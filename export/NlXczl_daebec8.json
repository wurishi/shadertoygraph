{"ver":"0.1","info":{"id":"NlXczl","date":"1648495786","viewed":67,"name":"First Assignment - O1XZTL","username":"GergoPapp","description":"First Assignment","likes":6,"published":1,"flags":48,"usePreview":0,"tags":["triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    const int k = 1;\n    \n    for(int i=-k; i <= k; i++)\n    for(int j=-k; j <= k; j++)\n    {\n    \n        fragColor += texelFetch(iChannel0,\n            ivec2(fragCoord)+ivec2(i,j)\n        ,0);    \n    }\n    \n    fragColor /=float((2*k+1)*(2*k+1));\n    fragColor *= 2.;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int spheresNo = 10;\nSphere spheres[spheresNo];\n\nconst int planeNo = 1;\nPlane planes[planeNo];\n\nconst int triangleNo = 36;\nTriangle triangles[triangleNo];\n\nconst int materialsNo = 3;\nMaterial materials[materialsNo];\n\n\n// ---- CAMERA and EVENTs ----\n// Common key codes (WASD instead of arrows)\n\nconst int KeyLeft  = 65;\nconst int KeyRight = 68;\nconst int KeyUp    = 87;\nconst int KeyDown  = 83;\n\n#define isKeyHeld(k)  (texelFetch(iChannel1, ivec2(k,0), 0).x > 0.)\n\nconst vec3 EyeStartPosition = vec3(-4.5,0.1,1.5);\n\nRay Camera(vec2 fragCoord, out vec3 eye, out vec2 data2)\n{\n    /*\n        We will use the first 2 pixels of the buffer to store the information we need.\n        Every pixel contains 4 channels (floats), for RGBA. We can exploit this in the following way:\n            pixel0 = (empty, cameraX, cameraY, cameraZ)\n            pixel1 = (empty, empty, U, V)\n        where \n            cameraX, cameraY and cameraZ describe the position of the camera respectively\n            U,V give the current rotation of the camera in spherical coordinates\n\t*/\n    \n    // Ray generation\n    eye = texelFetch(iChannel0, ivec2(0,0), 0).yzw+EyeStartPosition;\t\t// camera position\n    data2 = texelFetch(iChannel0, ivec2(1,0), 0).zw;\t// spherical coordinates\n    vec2 uv\t= abs(data2);\n    \n   \tif(iMouse.z>0. || data2.x >= 0.)\t//mouse held or was held last frame\n        uv += (abs(iMouse.zw)-abs(iMouse.xy))*0.01;\n    \n    vec3 w = vec3(cos(uv.x)*cos(-uv.y),\n                  \t\t\tsin(-uv.y),\n                  sin(uv.x)*cos(-uv.y));\n    vec3 u = normalize(cross(vec3(0,1,0),w));\n\tvec3 v = cross(w,u);\n    \n    vec2 px = (fragCoord/iResolution.xy*2.-1.)*1.*normalize(iResolution.xy);\n    \n    // Keyboard and mouse handling:\n\tfloat speed = 0.2;\n    if (isKeyHeld(KeyLeft )) eye -= u*speed;\n    if (isKeyHeld(KeyRight)) eye += u*speed;\n    if (isKeyHeld(KeyUp   )) eye += w*speed;\n    if (isKeyHeld(KeyDown )) eye -= w*speed;\n    \n    if(iMouse.z>=0.)\t\t//mouse held\n        data2 = abs(data2.xy);\n\telse if(data2.x >= 0.)\t//mouse released\n        data2 = -mod(uv,2.*pi);\n    \n    // Ray generation\n    return Ray(eye,\t\t\t\t\t\t\t//V\n               0.5,\t\t\t\t\t\t\t//minT\n               normalize(w+px.x*u+px.y*v),\t//P\n               500.);\t\t\t\t\t\t//maxT\n}\n\n// ---- MAIN ----\n\nconst float maxT = 1000.0;\n\nTraceResult intersectSphere(Ray ray, Sphere s)\n{\n    vec3 p0c = ray.p0 - s.c;\n    float a = dot(ray.v, ray.v);\n    float b = 2.0 * dot(p0c, ray.v);\n    float c = dot(p0c,p0c) - s.r*s.r;\n    float discriminant = b*b - 4.0*a*c;\n    \n    if(discriminant < 0.0)\n        return TraceResult(vec3(0), ray.tmax, s.mat_id); // no intersection\n    \n    float sqd = sqrt(discriminant);\n    float numerator = -b - sqd;\n    \n    if(numerator < 0.0)\n        numerator = -b + sqd;\n    \n    float t = 0.5 * numerator / a;\n    vec3 p = ray.p0 + t * ray.v;\n    vec3 normal = normalize(p - s.c);\n    \n    return TraceResult(normal, t, s.mat_id);\n}\n\nTraceResult intersectTriangle(Ray ray, Triangle triangle) {\n\n    vec3 ap = ray.p0 - triangle.a;\n    vec3 ab = triangle.b - triangle.a;\n    vec3 ac = triangle.c - triangle.a;\n    \n    vec3 f = cross(ray.v, ac);\n    vec3 g = cross(ap, ab);\n    \n    vec3 res = 1. / dot(f, ab) * vec3(dot(g, ac), dot(f, ap), dot(g, ray.v));\n    \n    float t = res[0];\n    float u  = res[1];\n    float v = res[2];\n    \n    vec3 n = normalize(cross(ab, ac));\n    \n    if(0. < dot(n, ray.v)) {\n        n = -n;\n    }\n    \n    if(u < 0. || v < 0. || 1.-u-v < 0.)    \n        return TraceResult(n, ray.tmax, triangle.mat_id);\n    else\n        return TraceResult(n, t, triangle.mat_id);\n}\n\nTraceResult intersectPlane(Ray ray, Plane plane)\n{\n    float t = dot(plane.q0-ray.p0,plane.n)/dot(ray.v,plane.n);\n    return TraceResult(plane.n, t, plane.mat_id);\n}\n\nTraceResult raycast(Ray ray)\n{\n    TraceResult res = TraceResult(vec3(0), ray.tmax, -1);\n    for(int i = 0; i < spheresNo; ++i)\n    {\n        TraceResult res2 = intersectSphere(ray, spheres[i]);\n        if(res2.t < ray.tmax && res2.t > ray.tmin && res2.t < res.t){\n            res = res2;\n        }\n    }\n    for(int i = 0; i < planeNo; ++i)\n    {\n        TraceResult res2 = intersectPlane(ray, planes[i]);\n        if(res2.t < ray.tmax && res2.t > ray.tmin && res2.t < res.t){\n            res = res2;\n        }\n    }\n    \n    for(int i = 0; i < triangleNo; ++i)\n    {\n        TraceResult res2 = intersectTriangle(ray, triangles[i]);\n        if(res2.t < ray.tmax && res2.t > ray.tmin && res2.t < res.t){\n            res = res2;\n        }\n    }\n    \n    return res;\n}\n\n\nvec4 missColor(Ray ray)\n{\n    return vec4(texture(iChannel2, ray.v).xyz,1.);\n}\nvec4 hitColor(Ray ray, TraceResult tr)\n{\n    vec3 p = ray.p0 + ray.v*tr.t;\n    vec3 n = tr.n;\n    \n    vec3 lights[2] = vec3[](vec3(10.,8.,0.), vec3(10.,8.,-10.));\n    vec3 col = vec3(0); // remains 0 if in shadow\n    \n    for(int i = 0; i < 2; ++i) {\n        \n        vec3 lightPos = lights[i];\n    \n        vec3 l = lightPos-p;\n        float lightDist = length(l);\n\n        l /= lightDist; // normalized direction to the light\n\n        Ray shadowray = Ray(p+0.001*n, 0.001, l, lightDist);\n                          /*     p0  , tmin , v,    tmax  */\n        TraceResult res = raycast(shadowray);\n\n        \n        if(res.t==shadowray.tmax)\n        {\n            vec3 v = -ray.v;\n\n            //diffuse\n            float costheta = max(dot(n,l),0.);\n            vec3 k_d = materials[tr.mat_id].diffuse_color;\n\n            //specular\n            vec3 toLight = normalize(lightPos - p);\n            vec3 toEye = -ray.v;\n            vec3 k_s = materials[tr.mat_id].specular_color / pi;\n\n            vec3 h = normalize(toLight+toEye);\n            float si = pow(clamp(dot(h,n),0.,1.),100.);\n\n            //sum\n            if(i == 1 && sin(iTime * 15.) <= 0.5) {\n                continue;\n            }\n\n            col += (k_d + si*k_s)*costheta;\n            \n        }\n    }\n    return vec4(col,1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Description of 2 spheres\n    spheres[0] = Sphere(vec3(0.3, abs(sin(iTime)) / 4. + 5., 0), 4.f, 0);\n    spheres[1] = Sphere(vec3(5., 2., 0), 2.f, 0);\n    spheres[2] = Sphere(vec3(7., 3., 0.25), 0.25f, 1);\n    spheres[3] = Sphere(vec3(7., 3., -0.25), 0.25f, 1);\n    spheres[4] = Sphere(vec3(7., 2.5, -0.5), 0.1f, 1);\n    spheres[5] = Sphere(vec3(7., 2.6, -0.25), 0.1f, 1);\n    spheres[6] = Sphere(vec3(7., 2.6, 0.25), 0.1f, 1);\n    spheres[7] = Sphere(vec3(7., 2.5, 0.5), 0.1f, 1);\n    spheres[8] = Sphere(vec3(7., 2.6, 0.0), 0.1f, 1);\n    \n    planes[0] = Plane(vec3(0), normalize(vec3(0,1,0)), 2);\n    \n    triangles[0] = Triangle(vec3(5., 2., 0.), vec3(5.5, 2., 0.), vec3(5.25, 5., 3), 2);\n    triangles[1] = Triangle(vec3(5.25, 2., -0.5), vec3(5.5, 2., 0.), vec3(5.25, 5., 3), 2);\n    triangles[2] = Triangle(vec3(5.25, 2., -0.5), vec3(5., 2., 0.), vec3(5.25, 5., 3), 2);\n    \n    triangles[3] = Triangle(vec3(5., 2., 0.), vec3(5.5, 2., 0.), vec3(7.25, 5., 3), 2);\n    triangles[4] = Triangle(vec3(5.25, 2., -0.5), vec3(5.5, 2., 0.), vec3(7.25, 5., 3), 2);\n    triangles[5] = Triangle(vec3(5.25, 2., -0.5), vec3(5., 2., 0.), vec3(7.25, 5., 3), 2);\n    \n    triangles[6] = Triangle(vec3(5., 2., 0.), vec3(5.5, 2., 0.), vec3(3.25, 5., 3), 2);\n    triangles[7] = Triangle(vec3(5.25, 2., -0.5), vec3(5.5, 2., 0.), vec3(3.25, 5., 3), 2);\n    triangles[8] = Triangle(vec3(5.25, 2., -0.5), vec3(5., 2., 0.), vec3(3.25, 5., 3), 2);\n    \n    triangles[9] = Triangle(vec3(5., 2., 0.), vec3(5.5, 2., 0.), vec3(5.25, 5., -3), 2);\n    triangles[10] = Triangle(vec3(5.25, 2., 0.5), vec3(5.5, 2., 0.), vec3(5.25, 5., -3), 2);\n    triangles[11] = Triangle(vec3(5.25, 2., 0.5), vec3(5., 2., 0.), vec3(5.25, 5., -3), 2);\n    \n    triangles[12] = Triangle(vec3(5., 2., 0.), vec3(5.5, 2., 0.), vec3(7.25, 5., -3), -2);\n    triangles[13] = Triangle(vec3(5.25, 2., 0.5), vec3(5.5, 2., 0.), vec3(7.25, 5., -3), 2);\n    triangles[14] = Triangle(vec3(5.25, 2., 0.5), vec3(5., 2., 0.), vec3(7.25, 5., -3), 2);\n    \n    triangles[15] = Triangle(vec3(5., 2., 0.), vec3(5.5, 2., 0.), vec3(3.25, 5., 3), -2);\n    triangles[16] = Triangle(vec3(5.25, 2., 0.5), vec3(5.5, 2., 0.), vec3(3.25, 5., -3), 2);\n    triangles[17] = Triangle(vec3(5.25, 2., 0.5), vec3(5., 2., 0.), vec3(3.25, 5., -3), 2);\n    \n    \n    \n    triangles[18] = Triangle(vec3(5.25, 5., 3), vec3(5.5, abs(sin(iTime))*2.f, 5.), vec3(5.25, abs(sin(iTime))*2.f, 5.25), 2);\n    triangles[19] = Triangle(vec3(5.25, 5., 3), vec3(5., abs(sin(iTime))*2.f, 5.), vec3(5.25, abs(sin(iTime))*2.f, 5.25), 2);\n    triangles[20] = Triangle(vec3(5.25, 5., 3), vec3(5., abs(sin(iTime))*2.f, 5.), vec3(5.5, abs(sin(iTime))*2.f, 5.), 2);\n    \n    triangles[21] = Triangle(vec3(7.25, 5., 3), vec3(7.5, abs(sin(iTime+30.))*2.f, 5.), vec3(7.25, abs(sin(iTime+30.))*2.f, 5.25), 2);\n    triangles[22] = Triangle(vec3(7.25, 5., 3), vec3(7., abs(sin(iTime+30.))*2.f, 5.), vec3(7.25, abs(sin(iTime+30.))*2.f, 5.25), 2);\n    triangles[23] = Triangle(vec3(7.25, 5., 3), vec3(7., abs(sin(iTime+30.))*2.f, 5.), vec3(7.5, abs(sin(iTime+30.))*2.f, 5.), 2);\n    \n    triangles[24] = Triangle(vec3(3.25, 5., 3), vec3(3.5, abs(sin(iTime+30.))*2.f, 5.), vec3(3.25, abs(sin(iTime+30.))*2.f, 5.25), 2);\n    triangles[25] = Triangle(vec3(3.25, 5., 3), vec3(3., abs(sin(iTime+30.))*2.f, 5.), vec3(3.25, abs(sin(iTime+30.))*2.f, 5.25), 2);\n    triangles[26] = Triangle(vec3(3.25, 5., 3), vec3(3., abs(sin(iTime+30.))*2.f, 5.), vec3(3.5, abs(sin(iTime+30.))*2.f, 5.), 2);\n    \n    triangles[27] = Triangle(vec3(5.25, 5., -3), vec3(5.5, abs(sin(iTime))*2.f, -5.), vec3(5.25, abs(sin(iTime))*2.f, -5.25), 2);\n    triangles[28] = Triangle(vec3(5.25, 5., -3), vec3(5., abs(sin(iTime))*2.f, -5.), vec3(5.25, abs(sin(iTime))*2.f, -5.25), 2);\n    triangles[29] = Triangle(vec3(5.25, 5., -3), vec3(5., abs(sin(iTime))*2.f, -5.), vec3(5.5, abs(sin(iTime))*2.f, -5.), 2);\n    \n    triangles[30] = Triangle(vec3(7.25, 5., -3), vec3(7.5, abs(sin(iTime+30.))*2.f, -5.), vec3(7.25, abs(sin(iTime+30.))*2.f, -5.25), 2);\n    triangles[31] = Triangle(vec3(7.25, 5., -3), vec3(7., abs(sin(iTime+30.))*2.f, -5.), vec3(7.25, abs(sin(iTime+30.))*2.f, -5.25), 2);\n    triangles[32] = Triangle(vec3(7.25, 5., -3), vec3(7., abs(sin(iTime+30.))*2.f, -5.), vec3(7.5, abs(sin(iTime+30.))*2.f, -5.), 2);\n    \n    triangles[33] = Triangle(vec3(3.25, 5., -3), vec3(3.5, abs(sin(iTime+30.))*2.f, -5.), vec3(3.25, abs(sin(iTime+30.))*2.f, -5.25), 2);\n    triangles[34] = Triangle(vec3(3.25, 5., -3), vec3(3., abs(sin(iTime+30.))*2.f, -5.), vec3(3.25, abs(sin(iTime+30.))*2.f, -5.25), 2);\n    triangles[35] = Triangle(vec3(3.25, 5., -3), vec3(3., abs(sin(iTime+30.))*2.f, -5.), vec3(3.5, abs(sin(iTime+30.))*2.f, -5.), 2);\n    \n    \n    \n    materials[0] = Material(vec3(0.3, 0.1, 0.), vec3(0.2, 0.2, 0.2), vec3(0., 0., 0.));\n    materials[1] = Material(vec3(0.7, 0., 0.1), vec3(0.9, 0.9, 0.9), vec3(0., 0., 0.));\n    materials[2] = Material(vec3(0.3, 0.3, 0.3), vec3(0.0, 0.0, 0.0), vec3(0., 0., 0.));\n    \n\n    vec3 eye; vec2 data;                    // this will be saved into first two pixels\n    Ray ray = Camera(fragCoord, eye, data); // Generate ray from pixel\n    \n    TraceResult result = raycast(ray);      // Raycast\n    \n    if(ray.tmax<=result.t)\n        fragColor = missColor(ray);    \n    else\n        fragColor = hitColor(ray, result);\n\n    vec4 prev = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragColor = 0.3*prev + 0.7*fragColor;   // Motion blur\n    fragColor.w = result.t;\n\n    // First two pixels are reserved\n    if(fragCoord.x == 0.5 && fragCoord.y == 0.5) // pixel (0,0)\n        fragColor.yzw = eye-EyeStartPosition;\n    if(fragCoord.x == 1.5 && fragCoord.y == 0.5) //pixel (1,0)\n        fragColor.zw = data;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float pi = 3.1415926535897932384626433832795;\n\nstruct Sphere {\n    vec3 c;    // center\n    float r;   // radius\n    int mat_id;\n};\n\nstruct Triangle {\n\n    vec3 a, b, c;\n    int mat_id;\n};\n\nstruct Plane {\n\n    vec3 q0;    // any point on the plane\n    vec3 n;    // normal\n    int mat_id;\n};\n\nstruct Ray\n{\n\tvec3 p0;    // ray origin if tmin=0\n\tfloat tmin; // omit solutions t<tmin\n\tvec3 v;     // direction\n\tfloat tmax; // omit solutions t>tmax\n};\n\nstruct TraceResult\n{\n    vec3 n;  // Normal vector on surface\n    float t; // Distance taken on ray\n    int mat_id;\n};\n\nstruct Material {\n\n    vec3 diffuse_color;       // [0,1/pi]\n    vec3 specular_color;\n    vec3 emission;    // [0, inf]\n};","name":"Common","description":"","type":"common"}]}