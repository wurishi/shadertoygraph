{"ver":"0.1","info":{"id":"Xdd3Wn","date":"1449002298","viewed":152,"name":"My second raymarching","username":"anastadunbar","description":"Trying out new features.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","test","raymarch","texture","beginner","noob"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float PI=3.1415926535897932384;\n#define time iTime\n\n//Rotation (Found on http://www.pouet.net/)\nvec3 rX(vec3 p, float a) {\n\tfloat c,s;vec3 q=p;\n\tc = cos(a); s = sin(a);\n\tp.y = c * q.y - s * q.z;\n\tp.z = s * q.y + c * q.z;\n    return p;\n}\n\nvec3 rY(vec3 p, float a) {\n\tfloat c,s;vec3 q=p;\n\tc = cos(a); s = sin(a);\n\tp.x = c * q.x + s * q.z;\n\tp.z = -s * q.x + c * q.z;\n    return p;\n}\n\nvec3 rZ(vec3 p, float a) {\n\tfloat c,s;vec3 q=p;\n\tc = cos(a); s = sin(a);\n\tp.x = c * q.x - s * q.y;\n\tp.y = s * q.x + c * q.y;\n    return p;\n}\n\n//Shapes\nfloat Sphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\nfloat Box( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\nfloat Torus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nfloat opU( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat get_distance(vec3 point) {\n  return opU(opU(opU(Torus(point,vec2(0.9,0.1)),Sphere(point,0.8)),Box(rY(point,time),vec3(0.1,1.,0.1))),Torus(vec3(point.y,point.z,point.x),vec2(1.1,0.1)))+(texture(iChannel0,point.xy+vec2(sin(point.z*2.),0.)).r*0.03);\n}\nvec3 color(vec3 point) {\n    vec3 myTexture = vec3(texture(iChannel0,rY(point.xyz,time).xy).rgb);\n    if (length(point) > 1.0) {\n      myTexture = vec3(texture(iChannel1,point.xy).rgb);  \n    }\n    return myTexture;\n}\n\nfloat raymarch(vec3 ray_origin, vec3 ray_direction) {\n  float d = 0.0;\n\n  for (float i = 0.; i < 70.; i++) {\n    vec3 new_point = ray_origin + ray_direction*d;\n    float s = get_distance(new_point);\n    if (s < 0.001) return d;\n    d += s;\n    if (d > 70.) return 300.;\n  }\n  return 300.;\n}\n\nvec3 get_normal(vec3 point) {\n  float d0 = get_distance(point);\n  float dX = get_distance(point - vec3(0.001, 0.0, 0.0));\n  float dY = get_distance(point - vec3(0.0, 0.001, 0.0));\n  float dZ = get_distance(point - vec3(0.0, 0.0, 0.001));\n    \n  \treturn normalize(vec3(dX-d0, dY-d0, dZ-d0));\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec2 suv = ((2.0 * gl_FragCoord.xy) - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 colors = vec3(0.);\n    vec3 eye_pos = vec3(rY(vec3(0.,0.,-1.),time*1.))+vec3(0.,0.,-4.);\n    vec3 forward = vec3(0.0, 0.0, 1.0);\n    vec3 light = vec3(1., 1., -3.0);\n    \n    //Shooting rays to detect around the scene\n    vec3 up = vec3(0., 0.5, 0.);\n    vec3 right = cross(up, forward);\n    //vec3 ray_dir = normalize(up * suv.y + right*suv.x + forward);\n    vec4 scene = vec4(uv.y*0.4); //Also known as background\n//...\nvec3 ray_dir = normalize(up * suv.y + right *suv.x + forward);\n\nfloat d = raymarch(eye_pos, ray_dir);\nif (d < 300.) {\n  vec3 point = (eye_pos+ray_dir*d);\n  vec3 point_normal = get_normal(point);\n  vec3 light_dir = -normalize(light-point);\n  vec3 dotp_diffuse = vec3(max(0.0, dot(light_dir, point_normal))+0.05)*color(point);\n    scene = vec4(dotp_diffuse,1.);\n}\n//...\n    /*\n    float d = raymarch(eye_pos, ray_dir);\n    float scene = 0.;\n\tif (d < 300.) {\n\tscene = 1.0;\n\t} else {\n\tscene = 0.0;\n\t}\n    */\n    \n\tfragColor = vec4(scene.rgb,1.0);\n}","name":"Image","description":"","type":"image"}]}