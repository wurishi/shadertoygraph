{"ver":"0.1","info":{"id":"ssy3Wd","date":"1632401843","viewed":162,"name":"Scramble/descramble","username":"Kypsis","description":"Scrambling/descrambling using modular multiplicative inverse function. Press mouse left button for descrambling.","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["inverse","reversible","scramble"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ...and descramble output from BufferA\n\nuint un_rhashx(uint n) {\n    return (n * 567u) % 640u;\n}\n\nuint un_rhashy(uint n) {\n    return (n * 247u) % 360u;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // Mouse\n    vec4 m = iMouse / iResolution.x;\n    \t\n    // If mouse down, modify iChannel0 from Buffer A (descramble)\n\tif(m.z > 0.0) {\n        // Discard coordinates outside screen range\n        if (int(fragCoord.y) > 359 || int(fragCoord.x) > 639) discard;\n        fragColor = texelFetch(\n            iChannel0, \n            ivec2(\n                un_rhashx(uint(fragCoord.x)),\n                un_rhashy(uint(fragCoord.y))\n            ), \n            0);\n\n    } \n    else {\n    // else just show the texture from Buffer A\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord),0);\n    }\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Scramble iChannel0 input using modular multiplicative inverse function...\n\nuint rhashx(uint n) {\n    return (n * 3463u) % 640u;\n}\n\nuint rhashy(uint n) {\n    return (n * 3463u) % 360u;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    // Discard coordinates outside screen range\n    if (int(fragCoord.y) > 359 || int(fragCoord.x) > 639) discard;\n    \n    fragColor = texelFetch(\n        iChannel0, \n        ivec2(\n            rhashx(uint(fragCoord.x)),\n            rhashy(uint(fragCoord.y))\n        ), \n        0);\n}","name":"Buffer A","description":"","type":"buffer"}]}