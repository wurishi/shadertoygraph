{"ver":"0.1","info":{"id":"MdtSRr","date":"1457474488","viewed":302,"name":"Perspective Spheres","username":"vamoss","description":"Original work: http://wavegrower.tumblr.com/post/119795328255/perspectives-bridge-between-this-and-that#notes","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["ray","perspective","rhythm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Adapted from inigo quilez:\n//https://www.shadertoy.com/view/Xds3zN\n\n//Original work:\n//http://wavegrower.tumblr.com/post/119795328255/perspectives-bridge-between-this-and-that#notes\n\n#define PI 3.1415926\n#define TWO_PI 6.2831852\n\n//number of spheres\n#define TOTAL 30\n\n//plane shape\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\n//sphere shape\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\n\n//unify shapes\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n\n//model the scene, return x for the shape and y for the material\nvec2 map( in vec3 pos )\n{\n    //start with the plane to receive the shadows\n    vec2 res = vec2( sdPlane(pos), 0.0 );//0.0 is the plane material\n    \n    //draw spheres\n    float sphereScale = 0.02;\n    for(int i=0; i<TOTAL; i++){\n        float index = float(i)/float(TOTAL);\n        \n        sphereScale += index*0.01;\n        \n        //position\n        vec3 spherePos = vec3( 0.0,0.9, 0.0);\n        spherePos.x += sin(iTime*10.0*float(index))*index*0.7;\n        spherePos.y += cos(iTime*10.0*float(index))*index*0.7;\n    \tspherePos.z += -float(TOTAL)*0.07+float(i)*0.15;\n        \n        res = opU( res, vec2( sdSphere(pos-spherePos, sphereScale ), 1.0 ) );//1.0 is the sphere material\n    }\n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 0.1;\n    float tmax = 20.0;\n    \n#if 0\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n\tfloat precis = 0.01;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<70; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.20 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n    \n    //background color\n    vec3 col = vec3(1.0, 1.0, 1.0);\n    \n    //material\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n\n        // lighting        \n        vec3  lig = normalize( vec3(-0.7, 0.7, -0.7) );\n              \n        //spheres color\n        if( m==1.0 )\n        {\n            col = vec3(0.0,0.0,0.0);\n        }else{\n\t        //shadow\n\t        col *= softshadow( pos, lig, 0.2, 2.5 )*3.1+0.95;\n        }\n\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\t\t \n\tfloat time = iTime;\n\n\t// camera\t\n\tvec3 ro = vec3( -0.5, 1.0, 0.5);//camera rotation\n    vec3 ta = vec3( -0.0, 0.8, 0.0 );//camera target\n    \n    //control camera rotation with mouse and time\n    ro.x += 3.5*cos(0.1*time+TWO_PI*mo.x);\n    ro.y += -0.1+clamp(mo.y*TWO_PI-PI, 0.0, TWO_PI);\n    ro.z += 3.5*sin(0.1*time+TWO_PI*mo.x);\n    \n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n\tfragColor=vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}