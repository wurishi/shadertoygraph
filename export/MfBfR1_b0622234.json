{"ver":"0.1","info":{"id":"MfBfR1","date":"1724635961","viewed":32,"name":"chiral cuboid subdivision layout","username":"jt","description":"Subdivide cube into three axial cuboids and six chiral cuboids (quantized into voxels).\nLeave every other cuboid-type empty and mirror randomized chunks to create connections in a cave-pattern.\nTracks cuboids across voxels.\nUsing hybrid DDA SDF approach.\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["grid","voxels","cube","dda","hybrid","subdivision","architecture","construction","cuboid","industrial","building","layout","chiral","axial"],"hasliked":0,"parentid":"4fSBRh","parentname":"industrial storage facility 4"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/MfBfR1 chiral cuboid subdivision layout, 2024 by jt\n// based on https://www.shadertoy.com/view/4fSBRh industrial storage facility 4\n// structure: https://www.shadertoy.com/view/XcSfRh chiral voxel subdivision of cube\n// visualization: https://www.shadertoy.com/view/lXGGR3 raymarch voxels with color\n\n// Subdivide cube into three axial cuboids and six chiral cuboids (quantized into voxels).\n// Leave every other cuboid-type empty and mirror randomized chunks to create connections in a cave-pattern.\n// Tracks cuboids across voxels.\n// Using hybrid DDA SDF approach.\n\n// tags: grid, voxels, cube, subdivision, construction, cuboid, industrial, building, chiral, axial, hybrid, dda, layout, architecture\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// For correct ambient occlusion sample 2x2x2 voxels (slow!)\n//#define HIGH_QUALITY\n\n// https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\nfloat hash13(vec3 p3)\n{\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash33(vec3 p3) // Hash without Sine by Dave_Hoskins https://www.shadertoy.com/view/4djSRW\n{\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n// https://www.shadertoy.com/view/DtjyWD integer division - rounding down\nint div_floor(int a, int b) // vector version thanks to Fabrice\n{\n    int    S = (sign(abs(a*b))-sign(a*b))/2; // 0 if a*b >= 0\n    return S * ((1 - abs(a)) / abs(b) - 1)+(1-S)*(a / b); // emulates ()?:\n}\n\n// this implementation avoids operator % for stability on windows XXX differs from original at 0 ? XXX\n// https://www.shadertoy.com/view/DtjyWD integer modulo strictly positive\nint mod_positive(int a, int b) // vector version thanks to Fabrice\n{\n    return a - div_floor(a, b) * b;\n}\n\n// https://www.shadertoy.com/view/DtjyWD integer division - rounding down\nivec3 div_floor(ivec3 a, ivec3 b) // vector version thanks to Fabrice\n{\n    ivec3  S = (sign(abs(a*b))-sign(a*b))/2; // 0 if a*b >= 0\n    return S * ((1 - abs(a)) / abs(b) - 1)+(1-S)*(a / b); // emulates ()?:\n}\n\n// this implementation avoids operator % for stability on windows XXX differs from original at 0 ? XXX\n// https://www.shadertoy.com/view/DtjyWD integer modulo strictly positive\nivec3 mod_positive(ivec3 a, ivec3 b) // vector version thanks to Fabrice\n{\n    return a - div_floor(a, b) * b;\n}\n\nstruct subdivision_result\n{\n    ivec3 p;\n    ivec3 q;\n    uint index;\n};\n\nivec3 mirror(int n, bvec3 m, ivec3 v)\n{\n    if(m.x) v.x = n-1 - v.x;\n    if(m.y) v.y = n-1 - v.y;\n    if(m.z) v.z = n-1 - v.z;\n    return v;\n}\n\nsubdivision_result mirror(int n, bvec3 m, subdivision_result result)\n{\n    result.p = mirror(n+1, m, result.p); // NOTE: mirroring n+1 WALLS instead of n VOXELS\n    result.q = mirror(n+1, m, result.q); // NOTE: mirroring n+1 WALLS instead of n VOXELS\n    return result;\n}\n\nsubdivision_result chirally_subdivided_cube(ivec3 v, ivec3 p, ivec3 q, int n) // https://www.shadertoy.com/view/XcSfRh chiral voxel subdivision of cube (jt)\n{\n    ivec3 d = div_floor(v, ivec3(n));\n    //if(any(lessThan(d, ivec3(-1))) || any(greaterThanEqual(d, ivec3(1)))) return 0u;\n    //if(any(lessThan(d, ivec3(0))) || any(greaterThanEqual(d, ivec3(1)))) return subdivision_result(ivec3(0), ivec3(0), 0u);\n\n    //bvec3 m = equal(d % 1, ivec3(1));\n    bvec3 m = equal(d&1, ivec3(1));\n\n    //v = v % 3; // XXX WARNING: NEGATIVE % BREAKS ON WINDOWS? XXX\n    v = mod_positive(v, ivec3(n)); // NOTE: Need strictly positive modulo here (why isn't that a built-in operator?!)\n\n    // mirror every other cube\n    v = mirror(n, m, v);\n    //v = mirror(n, bvec3(1,0,0), v);\n    //if(all(greaterThanEqual(v, ivec3(0))) && all(lessThan(v, ivec3(n-1))))\n    //    return subdivision_result(ivec3(0), ivec3(n-1), 1u);\n        //return subdivision_result(mirror(n, m, ivec3(2)), mirror(n, m, ivec3(n-1)), 1u);\n\n    // axis\n    if(v.x < p.x && v.y < p.y && v.z < p.z) return mirror(n, m, subdivision_result(ivec3(0), p, 8u));\n    if(v.x >= p.x && v.y >= p.y && v.z >= p.z && v.x < q.x && v.y < q.y && v.z < q.z) return mirror(n, m, subdivision_result(p, q, 7u));\n    if(v.x >= q.x && v.y >= q.y && v.z >= q.z) return mirror(n, m, subdivision_result(q, ivec3(n), 15u));\n\n    // chiral\n    if(v.z < p.z && v.x >= p.x && v.y < q.y) return mirror(n, m, subdivision_result(ivec3(p.x,0,0), ivec3(n,q.y,p.z), 1u));\n    if(v.x < p.x && v.y >= p.y && v.z < q.z) return mirror(n, m, subdivision_result(ivec3(0,p.y,0), ivec3(p.x,n,q.z), 2u));\n    if(v.y < p.y && v.z >= p.z && v.x < q.x) return mirror(n, m, subdivision_result(ivec3(0,0,p.z), ivec3(q.x,p.y,n), 4u));\n    // chiral\n    if(v.z >= q.z && v.y >= p.y && v.x < q.x) return mirror(n, m, subdivision_result(ivec3(0,p.y,q.z), ivec3(q.x,n,n), 6u));\n    if(v.y >= q.y && v.x >= p.x && v.z < q.z) return mirror(n, m, subdivision_result(ivec3(p.x,q.y,0), ivec3(n,n,q.z), 3u));\n    if(v.x >= q.x && v.z >= p.z && v.y < q.y) return mirror(n, m, subdivision_result(ivec3(q.x,0,p.z), ivec3(n,q.y,n), 5u));\n\n    return subdivision_result(ivec3(0), ivec3(0), 0u);\n}\n\nivec3 quantize(ivec3 n, vec3 unit) // input n, 0 <= unit < 1, output (1,..,n-1)\n{\n    return ivec3((floor(unit*vec3(n-1))+1.0));\n}\n\nsubdivision_result chirally_subdivided_cube_random(ivec3 v, ivec3 seed0, ivec3 seed1, int n)\n{\n    if(true) // let voxel influence randomness\n    {\n        ivec3 d = div_floor(v, ivec3(n));\n        seed0 ^= d;\n        seed1 ^= d;\n    }\n    ivec3 a = quantize(ivec3(n-1), hash33(vec3(seed0)*123.456));\n    ivec3 b = a+quantize(n-a, hash33(vec3(seed1)*123.456));\n    return chirally_subdivided_cube(v, a, b, n);\n}\n\n#define BLACK vec3(0)\n#define RED vec3(1,0,0)\n#define GREEN vec3(0,1,0)\n#define YELLOW vec3(1,1,0)\n#define BLUE vec3(0,0,1)\n#define MAGENTA vec3(1,0,1)\n#define CYAN vec3(0,1,1)\n#define WHITE vec3(1,1,1)\n#define DARKGREY vec3(1.0/3.0)\n#define REDGREY vec3(0.5,0,0)\n#define GREENGREY vec3(0,0.5,0)\n#define YELLOWGREY vec3(0.5,0.5,0)\n#define BLUEGREY vec3(0,0,0.5)\n#define MAGENTAGREY vec3(0.5,0,0.5)\n#define CYANGREY vec3(0,0.5,0.5)\n#define LIGHTGREY vec3(2.0/3.0)\n\n#define COLORS vec3[](BLACK,RED,GREEN,YELLOW,BLUE,MAGENTA,CYAN,WHITE,DARKGREY,REDGREY,GREENGREY,YELLOWGREY,BLUEGREY,MAGENTAGREY,CYANGREY,LIGHTGREY)\n\nvec3 code(uint c)\n{\n    //return COLORS[c % 16u]; // NOTE: % seems to breaks on windows for negative int - uint ok? XXX\n    return COLORS[c & 15u];\n}\n\nfloat halfspace(vec3 p)\n{\n    return p.z + 1.0;\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat cylinder(vec3 p, vec2 s) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - s;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat frame(vec3 p, vec3 b, float e) // https://iquilezles.org/articles/distfunctions/\n{\n    p = abs(p)-b;\n    vec3 q = abs(p+e)-e;\n    return min(min(\n        length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n        length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n        length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat box(vec3 p, vec3 s) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec3 d = abs(p) - s;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat box(vec3 p, vec3 a, vec3 b)\n{\n    return box(p-(a+b)/2.0, abs(b-a)/2.0);\n}\n\nfloat box(vec3 p, vec3 a, vec3 b, float r)\n{\n    return box(p-(a+b)/2.0, abs(b-a)/2.0 - r) - r;\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\nstruct result\n{\n    vec3 color;\n    float dist;\n};\n\nresult map(ivec3 v, vec3 l) // unit grid: voxel = float(position), local = fract(position)\n{\n    int n = 6; // number of subdivisions\n    //ivec3 m = v % 3; // XXX WARNING: NEGATIVE % BREAKS ON WINDOWS? XXX\n    ivec3 m = mod_positive(v, ivec3(n)); // NOTE: Need strictly positive modulo here (why isn't that a built-in operator?!)\n\n    subdivision_result subdiv = chirally_subdivided_cube_random(v, ivec3(0), ivec3(0), n);\n    \n    // sort componentwise (fix effects of mirroring)\n    {\n        ivec3 p = subdiv.p;\n        ivec3 q = subdiv.q;\n        subdiv.p = min(p, q);\n        subdiv.q = max(p, q);\n    }\n\n    vec3 o = vec3(0.25, 0.25, 0.0);\n\n    bvec3 flip = notEqual(div_floor(v, ivec3(n)) & 1, ivec3(0));\n\n    //if(v.z > -2 && v.z < 2)\n    if(v.z >= -n && v.z < 0)\n    {\n        //if(subdiv.index > 0u && (flip.x != flip.y != flip.z))\n        {\n            vec3 color = code(subdiv.index);\n            //color = mix(color, 1.0 - color, vec3(flip));\n            if(flip.x != flip.y != flip.z) color = 1.0 - color;\n            vec3 tint = mix(vec3(0.25), vec3(0.75), hash33(vec3(v)));\n            //return result(color, sphere(l-0.5, 0.5));\n            /*\n            if(subdiv.index == 15u)\n            {\n                float r = 0.1;\n                //return result(color, sphere(l-0.5, 0.5));\n                return result(color, box(l+vec3(m),vec3(subdiv.p),vec3(subdiv.q), 0.3));\n            }\n            */\n            if(subdiv.index == 1u || subdiv.index == 2u || subdiv.index == 4u)\n            {\n                color *= tint;\n                float r = 0.1;\n                if(subdiv.index == 1u)\n                {\n                    //return result(color, sphere(l-0.5, 0.5));\n                    return result(color, box(l+vec3(m),vec3(subdiv.p)+o,vec3(subdiv.q)-o, 0.3));\n                }\n                if(subdiv.index == 2u)\n                {\n                    //return result(color, cylinder(l-0.5, vec2(0.5-r))-r);\n                    return result(color, box(l+vec3(m),vec3(subdiv.p)+o,vec3(subdiv.q)-o, 0.3));\n                }\n\n                //return result(color, box(l-0.5, vec3(0.5-r))-r);\n                return result(color, box(l+vec3(m),vec3(subdiv.p)+o,vec3(subdiv.q)-o, 0.3));\n            }\n            else\n            {\n                float r = 0.02;\n                return result(color, frame(l-0.5, vec3(0.5-0.02), r)-0.01);\n                //return result(tint, box(l, vec3(subdiv.p)+r, vec3(subdiv.q)-r));\n            }\n        }\n    }\n\n    return result(vec3(0), DIST_MAX); // signal to skip this voxel\n}\n#ifdef HIGH_QUALITY\nresult map(vec3 p) // for correct ambient occlusion sample 2x2x2 voxels (slow!)\n{\n    // I think kastorp originally suggested to sample only 2x2x2 instead of 3x3x3, thanks!\n    result d = result(vec3(0), DIST_MAX);\n    ivec3 s = ivec3(step(0.5, fract(p)));\n    ivec3 o;\n    for(o.z = s.z-1; o.z < s.z+1; o.z++)\n        for(o.y = s.y-1; o.y < s.y+1; o.y++)\n            for(o.x = s.x-1; o.x < s.x+1; o.x++)\n            {\n                result r = map(ivec3(floor(p))+o, fract(p)-vec3(o));\n                if(r.dist < d.dist)\n                    d = r;\n            }\n    return d;\n}\n#else\nresult map(vec3 p)\n{\n    return map(ivec3(floor(p)), fract(p));\n}\n#endif\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy*map(p + k.xyy*h).dist +\n                     k.yyx*map(p + k.yyx*h).dist +\n                     k.yxy*map(p + k.yxy*h).dist +\n                     k.xxx*map(p + k.xxx*h).dist);\n}\n\n// NOTE: Apparently sign fails on some systems! Thanks to spalmer for debugging this!\nvec3 sgn(vec3 v) // WORKAROUND FOR COMPILER ERROR on some systems\n{\n    return step(vec3(0), v) * 2.0 - 1.0;\n}\n\nresult trace(vec3 ro, vec3 rd, float t0, float t1) // ray-march sdf handling discontinuities between voxels  (jt)\n{\n    result h;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++) // finite loop originally suggested by pyBlob to avoid stalling if ray parallel to surface just above EPSILON\n    {\n        vec3 p = ro + rd * t;\n        h = map(p);\n        if(h.dist < EPSILON)\n            return result(h.color, t);\n\n        // NOTE: An extra step per voxel, use if sdf discontinuous between voxels\n        //       Could make this conditional by prefixing sth. like if(voxel_changed) // suggested by spalmer, see variant below\n        // constrain step to voxels (voxel-snap ray-march plugin by jt, thanks to Shane for the idea!)\n        {\n            // NOTE: assuming unit grid\n            // sgn(rd)*0.5 are the walls in ray direction, fract(p) - 0.5 is center of voxel\n            vec3 sd = (sgn(rd)*0.5 - (fract(p) - 0.5))/rd; // distances to voxel sides / walls\n            vec3 n = step(sd.xyz, min(sd.yzx, sd.zxy)); // component true if corresponding wall is nearest (at most one component true) NOTE: originally I used lessThanEqual, min from fb39ca4/kzy then switched to step, min by iq\n            float skip = dot(sd, vec3(n)) + EPSILON; // distance to next voxel: sum up all components, weighted by the nearest flag (assuming only one component is true this selects the nearest component)\n            h.dist = min(h.dist, skip); // constrain step to at most next block to handle sdf discontinuities between voxels\n        }\n\n        t += h.dist;\n    }\n\n    //return result(h.color, t); // stop on running out of iterations\n    return result(h.color, t1); // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\n//       Thanks to spalmer for pointing that out.\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).dist < t1 ? 0.0 : 1.0;\n}\n#ifdef HIGH_QUALITY\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).dist;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n#endif\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).dist;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nfloat checker(vec2 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi));\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi)*sin(p.z*pi));\n}\n\nvec3 material(vec3 p)\n{\n    return vec3(1.0); // plain\n    //return mix(vec3(0.25), vec3(0.75), checker(p*2.0+0.5)); // checker\n}\n\nvoid mainImage(out vec4 fragColor, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-7.5);\n    vec3 rd = normalize(vec3(I.xy, 2.0));\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    //ro.z += 1.0;\n\n    //vec3 sky_color = mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(-rd.z));\n    vec3 sky_color = mix(vec3(0,0.25,0.5),vec3(0,0,1),abs(-rd.z));\n    vec3 color = vec3(1);\n    result r = trace(ro, rd, 0.0, DIST_MAX);\n    if(r.dist < DIST_MAX)\n    {\n        color *= r.color;\n        vec3 dst = ro + rd * r.dist;\n        vec3 n = normal(dst);\n\n        //color *= (n * 0.5 + 0.5);\n        color *= material(dst);\n\n        vec3 lightdir = normalize(vec3(1.0, 2.0, 3.0));\n        vec3 ambient = vec3(0.1);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0); // requires HIGH_QUALITY\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        //vec3 fog_color = vec3(0.2);\n        vec3 fog_color = sky_color;\n        color = mix(fog_color, vec3(color), exp(-pow(r.dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        color *= sky_color;\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    fragColor = vec4(color, 1);\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}