{"ver":"0.1","info":{"id":"NtsGWS","date":"1622738692","viewed":498,"name":"Day 532","username":"jeyko","description":"potate","likes":24,"published":3,"flags":32,"usePreview":0,"tags":["space","wow","motiongraphics","mdtmjvm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// vhs filter forked from an old shader of mine\n// THE BLOOM ON LINE 145 is from FMS_Cat !! \n\n\n#define R (iResolution.xy)\n#define T(U) texture(iChannel0,(U)/R)\n#define Tn(U,mip) texture(iChannel0,(U),mip)\n\nvec4 noise(float t){return texture(iChannel0,vec2(floor(t), floor(t))/256.);}\nvec4 valueNoise(vec2 t, float w){\n    vec2 fr = fract(t);\n\treturn \n        mix(\n            mix( \n                texture(iChannel1,vec2(floor(t.x), floor(t.y))/256.),\n                texture(iChannel1,vec2(floor(t.x), floor(t.y) + 1.)/256.),\n            \tsmoothstep(0.,1.,fr.y)\n            ),\n            mix( \n                texture(iChannel1,vec2(floor(t.x) + 1.,floor(t.y))/256.),\n                texture(iChannel1,vec2(floor(t.x) + 1.,floor(t.y) + 1.)/256.),\n            \tsmoothstep(0.,1.,fr.y)\n            ),\n            smoothstep(0.,1.,pow(fr.x, w)));\n}\nvec4 fbm(vec2 uv){\n\tvec4 n = vec4(0);\n    n += valueNoise(uv*800.,0.1);\n    n += valueNoise(uv*1700.,0.1)*0.5;\n    n -= valueNoise(uv*10.,1.)*1.;\n    n -= valueNoise(uv*20.,0.5)*0.5;\n    //n = max(n, 0.);\n    \n    n = smoothstep(0.,1.,n);\n    return n;\n}\n\n\n\nfloat eass(float p, float g) {\n    float s = p*0.45;\n    for(float i = 0.; i < g; i++){\n    \ts = smoothstep(0.,1.,s);\n    }\n    return s;\n}\n\n\nvoid mainImage( out vec4 C, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 nuv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    vec2 muv = (iMouse.xy - 0.5*iResolution.xy)/iResolution.y;\n    \n    vec2 offs = vec2(cos(iTime*0.5),sin(iTime*0.9))*0.04;\n    offs += vec2(muv)*0.1;\n    \n    uv += offs;\n    nuv += offs;\n    vec2 bentuv = nuv * (1. - smoothstep(1.,0.,dot(nuv,nuv)*0.2)*0.4);\n    \n    bentuv *= 1.7;\n    \n    \n    float df = dFdx(uv.x);\n    float amt = (dot(nuv,nuv) + 0.1)*2.*(1.04-eass((iTime)/3.,3.));\n    \n    float env = eass(iTime*1.,3.);\n    float envb = eass((iTime - 2.)*0.4,2.);\n    float envc = eass((iTime - 4.)*1.,2.);\n    float envd = eass((iTime - 9.)*1.,2.);\n    \n    \n    vec4 nA = fbm(uv*0.02 + iTime*(20.));\n    vec4 nB = fbm(vec2(1. + iTime*0.3 + sin(iTime)*0.1,uv.y*0.42));\n    vec4 nC = valueNoise(vec2( iTime,uv.y),0.5);\n    vec4 nD = valueNoise(vec2( iTime*50.,uv.y),0.5);\n    vec4 nE = fbm(vec2(uv.x*0.02,iTime));\n    vec4 nF = fbm(vec2(uv.x*1.0,mod(iTime*200.,2000.)));\n    vec4 nG = fbm(vec2(uv.x,uv.y + mod(iTime,2000.)));\n    vec4 nT = valueNoise(vec2( iTime),0.5);\n    \n    float glitch = 0.;\n    glitch += pow(nB.x,0.5)*0.005 + nB.y*0.005;\n    glitch *= 1.;\n    uv.x += glitch*0.1;\n    \n    \n    //+ float ( 0. == floor(fract(uv.y*iResolution.y/8.)*2.) ) \n    \n    float slidey = smoothstep(0.01,0.,abs(uv.y - nC.x*1.4) - 0.1 + nE.x*0.06);\n    \n    \n    slidey *= smoothstep(0.,df*(224.2 ),abs(nuv.x + R.x/R.y*0.5 - 0.01) - 0.004);\n    \n    \n    glitch += slidey*0.002;\n    uv.x += slidey*(pow(nC.y,0.01)*0.004 + 0.001);\n    \n    \n    uv.x += 0.1*pow(nB.x,2.)*smoothstep(df*(4.2 ),0.,(abs(nuv.x + R.x/R.y*0.5 - 0.01) - 0.004 )*0.2);\n    \n    uv.x += pow(nB.x,2.)*0.007;\n    \n    C += smoothstep(df*(1. + nE.y*2.2),0.,abs(uv.y  + nC.x*.02 + 0.1 - 2.*nD.y*float(nC.z>0.4)) + nE.x*0.04 - (nE.y*0.01))*(0.5*nE.y );\n    \n    \n    \n    if(nA.x*nA.z > 0.1 - 0.0009*sin(iTime) ){\n        glitch += 0.01;\n        uv += 0.02;\n    }\n    if(nB.x*nB.y > 0.1 - envc*0.10001){\n        \n        //glitch += envc*0.;\n        //uv += 0.1 + iTime;\n    }\n    \n    \n    \n    \n    \n    float mip = 0.5 + nG.x*5.;\n    \n    float iters = 130.;\n    \n    vec3 chrab = vec3(0);\n    vec2 chruv = uv;\n    vec2 dir = vec2(1.,0.);\n    amt *= 1.;\n    amt += glitch*104.4;\n    for(float i = 0.; i < iters; i++){\n        //uv.x += 0.01;\n        float slider = i/iters;\n        chrab.r += Tn(uv + amt*dir*0.004*slider,mip).r;\n        chrab.g += Tn(uv + -amt*dir*0.01*slider,mip).g;\n        chrab.b += Tn(uv + amt*dir*0.01*slider,mip).b;\n    }\n    \n    chrab /= iters;\n    vec3 bloom = vec3(0);\n      for( float x = -1.0; x < 2.5; x += 1.0 ){\n        bloom += vec3(\n          Tn( uv + vec2( x - 0.0, 0.0 ) * 7E-3, mip).x,\n          Tn( uv + vec2( x - 1.0 + sin(iTime), 0.0 ) * 7E-3,mip ).y,\n          Tn( uv + vec2( x - 4.0 - sin(iTime*4.), 0.0 ) * 7E-3, mip ).z\n        );\n      }\n    bloom/=iters;\n    \n    C.rgb += mix(chrab,bloom,0.5);\n    \n    \n    C = mix(C,vec4(1),(smoothstep(0.5,0.41,pow(nT.x,0.9)) + 0.02)*pow(smoothstep(0.6,0.,valueNoise( uv*190. + vec2(0,nA.x*30. + pow(nB.y, 0.01)*70.*nT.y) + mod(iTime*2000.,20000.),1. + 3.*nC.x).x),18. - nT.w*uv.y*17.));\n    \n    C.rgb = mix(vec3(1),C.rgb,1.);\n    \n    vec2 bentuvold = bentuv;\n    \n    float dfbentuv = dFdx(bentuv.x);\n    \n    bentuv = abs(bentuv);\n    float dedges = abs(bentuv.x) - 0.9;\n    dedges = max(dedges, bentuv.y - 0.5);\n    float edger = 0.1;\n    //dedges = max(dedges,-length(bentuv- vec2(R.x/R.y,R.y/R.y)*0.5 + edger) - edger);\n    \n   // C *= smoothstep(dfbentuv*4.,0.,);\n    C *= pow(smoothstep(0.1,0., bentuv.x - R.x/R.y*0.47),1.);\n    C *= pow(smoothstep(0.1,0., bentuv.y - R.y/R.y*0.4),1.);\n    \n    \n    C = mix(C, Tn(uv + 0.2,2.)*0.04,1.-smoothstep(dfbentuv*4.,0.,dedges));\n    \n    C *= smoothstep(1.,0.2, 0.3 + 0.2*uv.y*(0.7 + nD.x));\n    C *= pow(smoothstep(1.,0., dot(nuv*0.6,nuv)),1.);\n    \n    bentuvold -= vec2(0.3,0.1);\n    \n    C += pow(smoothstep(1.,0., length(bentuvold) - 0.),4.)*0.01*vec4(0.6,0.9,0.9,0.);\n    \n    C.xyz *= vec3(1,1,0.9);\n    \n    C = pow(max(C,0.),vec4(0.4545));\n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float sdBox(vec2 p,vec2 s){ p =abs(p) -s; return max(p.y,p.x);}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define pmod(p,a) mod(p,a) - 0.5*a\n#define pi acos(-1.)\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define T (iTime + sin(iTime*2.)*0.4)*0.6\n\nfloat plaIntersect( in vec3 ro, in vec3 rd, in vec4 p )\n{\n    return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.003);\n    \n    \n    {\n        vec3 ro = vec3(0,0,2);\n        vec3 rd = normalize(vec3(uv,1));\n        float iters = 16.;\n        for(float i = 0.; i < iters; i++){\n            float env = mod((T*0.25 + i/iters),1.);\n            float pl = plaIntersect( ro - vec3(0,0,1. + env*2.),  rd, vec4(0,0,-1,0) );\n            vec2 p = (ro + rd*pl).xy;\n            float md = 0.1;\n            p.x += sin(i/iters*4. + T)*0.05;\n            vec2 id = floor(p/md);\n            p = pmod(p,md);\n\n            float d = length(p);\n\n            float att = smoothstep(0.,0.01,env) * smoothstep(1.,0.2,env) ;\n            //att = 1.;\n            //col = mix(col,vec3(0.1,1.,0.6),smoothstep(fwidth(d) - 0.003,0.,d - env*0.0)*att);\n            d -= 0.003;\n            float pmp = (0.5 + 0.5*sin(iTime + i/iters*0.5));\n            vec3 c = vec3(1. + pmp ,1. + 2.*pmp,0.6+ sin(id.x + cos(id.y*20.)*4.)*0.3);\n            \n            c *= max(sin(T*2. - i/iters*2.),0.);\n            col = mix(col,c,smoothstep(fwidth(pl) + 0.002,0.,d - env*0.0*att)*att);\n\n        }\n        \n    }\n\n\n    {\n        vec2 p = uv;\n        p = vec2(atan(p.y,p.x)/pi*2.,length(p));\n        float lpy = log(p.y);\n        p.y = lpy + T*1.;\n        \n        \n        vec2 op = p;\n        //float md = 0.4;\n        vec2 md = vec2(1./2.,0.8);\n        vec2 id = floor(p/md);\n        \n        p = uv;\n        p *= rot(sin(id.y + T + sin(T + id.y) + iTime*0.5)*1.9);\n        p = vec2(atan(p.y,p.x)/pi*2.,length(p));\n        \n        p.y = log(p.y) + T*1.;\n        id = floor((p-vec2(md.x*0.25,0.))/md);\n        \n        p.y += sin(id.x + iTime + sin(id.x + iTime))*0.2*max(sin(id.y),0.);\n        \n        \n        //p *= rot(sin(id.y + iTime)*0.01);\n        p = pmod(p,md);\n        \n        float d = abs(p.y);\n        d = min(d,abs(p.y));\n        //p = abs(p) + 0.01;\n        d = max(d,-length(p) + length(md.x)*0.1);\n        \n        col = mix(col, vec3(12.6,3. + sin(id.y)*0.,0.1),smoothstep(fwidth(op.y)*1.5,0.,d)*smoothstep(0.,0.02,dot(uv,uv)));\n        \n    }\n    {\n        \n        float d = 10e4;\n        //uv -= vec2(0.5,0.2);\n        float sc = 4.;\n        #define xor(a,b) min(max(a ,-(b) + 0.2),max(b,-(a)))\n        \n        float enva = iTime + sin(iTime);\n        for(float i = 0.; i < 8.; i++){\n            float env = iTime + sin(iTime + i*.3) + i*0.1;\n            vec2 p = uv * rot(env*2.)*sc;\n            float ld = sdBox(p,vec2(-0.4 + sin(env)*1. + sin(i + iTime)*0.5 ));\n            ld = abs(ld);\n            ld = max(ld,-abs(p.x) + 0.2);\n            ld = max(ld,-abs(p.y) + 0.2);\n            d = xor(d,ld);\n        }\n        //d -= 0.01;\n        col = mix(col,2.*vec3(4.,(0.5 + 0.5*sin(iTime*4.)),.5)*pow(abs(sin(enva)),0.2),smoothstep(fwidth(uv.y) + 0.01,0.,d/sc));\n    }\n\n    {\n        \n        float d = 10e4;\n        float t = iTime*4.;\n        float envc = max(sin(t + sin(t)),0.);\n        envc *= pow(envc,2.);\n        for(float i = 0.; i < 17.; i++){\n            float env = iTime + sin(iTime + i*2.3)*1.6 + i*.5;\n            vec2 p = uv * rot(env);\n            float ld = sdBox(uv,vec2(1.6 + sin(iTime)*0.,0.4 ));\n            ld = max(ld,-abs(p.x) + 0.2 + sin(env)*0.1);\n            ld = max(ld,-abs(p.y) + 0.2 + sin(env)*0.1);\n            //ld = abs(ld) - 0.4;\n            \n            d = xor(d,ld);\n        }\n        \n\n        col = mix(col,4.5-col*1.,smoothstep(fwidth(uv.y) + 0.01,0.,d)*envc);\n    }\n    vec3 oc = col.zyx;\n    //oc = vec3(1.,1.,1.)*2. - oc*vec3(1.,1.,1.)*4.4;\n    oc = vec3(1.,1.,1.)*2. - length(oc)*vec3(1.,1.,1.)*4.4;\n    \n    col = mix(col,oc,smoothstep(-0.7,-0.8,sin(iTime*1. + sin(iTime)*1.)));\n\n    col = abs(col);\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}