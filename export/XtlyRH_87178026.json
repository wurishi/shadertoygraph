{"ver":"0.1","info":{"id":"XtlyRH","date":"1504817842","viewed":149,"name":"Tiles Animation","username":"anclin","description":"Tiles Animation","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["animation","tiles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.14159;\nconst float oneOverNine = 1.0 / 9.0;\n\nfloat when_gt(float x, float y){\n\treturn max(sign(x-y),0.0);\n}\n\nfloat when_lt(float x, float y){\n\treturn max(sign(y-x),0.0);\n}\n\nfloat when_hlt(float x, float n, float m){\n\treturn max(sign(x-m) * sign(n-x), 0.0);\n}\n\nfloat bump(float x, float o){\n    return (cos(2.0*pi*(x-o)+pi)*0.5+0.5) * when_gt(x,o) * when_lt(x, o+1.0);\n}\n\nfloat fade(float x, float o){\n\treturn (cos( (x-o)*pi )*0.5+0.5) * when_hlt(x, o, o+1.0) + when_lt(x, o);\n}\n \nbool isLine(float y, float line){\n    return y == oneOverNine * line;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;\n    vec2 coord = fragCoord.xy;\n\tvec2 uv = coord / res;\n    \n    vec3 c = texture(iChannel0, uv).xyz;\n    \n\tvec3 color = vec3(0);\n    \n    float x = floor(uv.x*10.)*oneOverNine;\n    float y = floor(uv.y*10.)*oneOverNine;\n    float id = x + y * 10.;\n    \n    vec3 backColor = vec3(x,y,0.5);\n    color = backColor * 0.3;\n    \n// MOUSE //////\n    float nMouseX = iMouse.x / res.x;\n    float nMouseY = iMouse.y / res.y;\n    float nMouseZ = iMouse.z / res.x;\n    \n// ANIMATION //////\n    \n//offset\n    float offset = c.x;\n    \n//Alpha\n    //float alpha = bump(iTime, offset);\n    float alpha = fade(iTime, offset);\n    //float alpha = bump(mod(iTime, 5.0), id * 0.15);\n    \n//final color\n    color += backColor * alpha * 0.7;\n    \n//mouse press color\n    \n    float mx = floor(nMouseX * 10.)*oneOverNine;\n    float my = floor(nMouseY * 10.)*oneOverNine;\n    \n    float isMouseDown = ceil(nMouseZ);\n    \n    if(x == mx && y == my && isMouseDown == 1.0){\n        color = backColor;\n    }\n    \n    \n// DEBUG //////////\n    if(false){\n\t    bool isLeftHalf = uv.x < 0.5;\n\t    bool isRightHalf = !isLeftHalf;\n\t    \n\t    if( isLine(y,0.0) ){\n\t        if( isLeftHalf ){\n\t            color = vec3(iMouse.x / res.x, 0,0);\n\t        }else{\n\t            color = vec3(iMouse.z / res.x, 0,0);\n\t        }\n\t    }\n\t    if(isLine(y,1.0)){\n\t        color = vec3(nMouseX * isMouseDown, 0,0);\n\t    }\n    }\n    \n\tfragColor = vec4(color, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float oneOverNine = 1.0 / 9.0;\n\nbool isLine(float y, float line){\n    return y == oneOverNine * line;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;\n    vec2 coord = fragCoord.xy;\n\tvec2 uv = coord / res;\n    \n    float x = floor(uv.x*10.)*oneOverNine;\n    float y = floor(uv.y*10.)*oneOverNine;\n    float id = x + y * 10.;\n    \n    \n    vec3 color = texture(iChannel0, uv).xyz;\n    \n    \n// MOUSE //////\n    float nMouseX = iMouse.x / res.x;\n    float nMouseY = iMouse.y / res.y;\n    float nMouseZ = iMouse.z / res.x;\n    \n    float mx = floor(nMouseX * 10.)*oneOverNine;\n    float my = floor(nMouseY * 10.)*oneOverNine;\n    \n    bool isMouseDown = nMouseZ > 0.0;\n    \n    if(x == mx && y == my && isMouseDown){\n        color = vec3(iTime);\n    }\n    \n\tfragColor = vec4(color, 1);\n}","name":"Buf A","description":"","type":"buffer"}]}