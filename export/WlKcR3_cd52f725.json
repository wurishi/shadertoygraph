{"ver":"0.1","info":{"id":"WlKcR3","date":"1611440279","viewed":71,"name":"pattern practice - 3","username":"Many","description":"shader pattern practice","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["patternpractice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(float n){return fract(sin(n) * 43758.5453123);}\n\nfloat noise(float p){\n\tfloat fl = floor(p);\n  float fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat box(vec2 _st, vec2 _size, float _smoothEdges){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 aa = vec2(_smoothEdges*0.5);\n    vec2 uv = smoothstep(_size,_size+aa,_st);\n    uv *= smoothstep(_size,_size+aa,vec2(1.)-_st);\n    return uv.x*uv.y;\n}\n\nfloat move(float x,float t){\n    float y = 3. * sin(x)/x;\n    float f = 2. * noise(3.* x + t) + y;\n    return f;\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  if(value > max1){\n      value = max1;\n  }\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\n\nfloat speedControl(float t, float min1,float max1, vec2 uv){\n    t = t/7200.;\n    t = fract(.65 * t);\n    if(t >= max1)\n    {\n        t = min1;\n    }\n    return t;\n}\n\n//resize position\nfloat Rect(vec2 _st,vec2 _size,vec2 _pos){\n    vec2 uv = _st;\n    uv += vec2((.5 - _size.x/2.),(-.5 + _size.y/2.));\n    uv += vec2(-1. * _pos.x, _pos.y);\n    float r = box(uv,_size,.001);\n    return r;\n}\n\nfloat RectGenerator(vec2 _st, float ran,float num, float time){\n    float r = 0.;\n    for(float i = 0.;i < num; i++){\n        float x = random(vec2(i * .1 + .5));\n        float x2 =  random(vec2(i * .4 + .5));\n        r += Rect(_st,vec2(x * move(i + ran,time),1./num),vec2(x2 + sin(time *(x2 + .5) *ran),(1./num)* i));//move(i + ran,iTime)\n    }\n    return r;\n}\n\nvec2 tile (vec2 _st, float _zoom) {\n    _st *= _zoom;\n    return fract(_st);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n     vec3 col = vec3(1.);    \n     vec2 st = uv;\n     uv.x = st.y;\n     uv.y = st.x;\n     //uv = tile(uv,4.);\n     \n     float speed = speedControl(iTime,.04,1.,uv);\n     float rect = RectGenerator(uv,speed,50.,iTime);//fract(iTime * iTime)\n     col = vec3(rect);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}