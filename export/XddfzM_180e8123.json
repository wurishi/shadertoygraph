{"ver":"0.1","info":{"id":"XddfzM","date":"1524518542","viewed":463,"name":"E.J. shaking grid","username":"rory618","description":"Based on https://goo.gl/2d7xvC\nOne pass version by fabrice: https://www.shadertoy.com/view/MdyyWK","likes":20,"published":1,"flags":32,"usePreview":0,"tags":["2d","art","greyscale","stochastic","reproduction","etiennejacob","routing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n    vec2 uv = i/R.xy;\n    o = exp(-vec4(length(texture(iChannel0, uv).xy*R.xy-i)/30.));\n    o = texture(iChannel1,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n    o = vec4(0);\n    vec2 s = floor(i/vec2(w,h))*vec2(w,h)/R.xy;\n    \n    for(int a = 0; a < i1; a++){\n        vec4 r = hash44(vec4(i,F,a));\n        vec4 p = texture(iChannel0,r.xy);\n        float l = length(p.xy*R.xy-i);\n        if(l < length(o.zw*R.xy-i)){\n            o.zw = p.xy;\n        }\n    }\n    \n    for(int a = 0; a < i1; a++){\n        vec4 r = hash44(vec4(F,i,-a));        \n        r.z = sqrt(-2.*log(r.z));\n        r.w *= 6.28318;\n        r.zw = r.z*vec2(cos(r.w),sin(r.w))*25.;\n        vec4 p = texture(iChannel1,(i+r.zw)/R.xy);//sample random nearby points\n        float l = length(p.zw*R.xy-i);\n        if(l < length(o.xy*R.xy-i)){\n            o.xy = p.zw;\n        }\n    }\n    \n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n    vec2 uv = i/R.xy;\n    o = texture(iChannel1,uv)*.45;\n    for(int a = 0; a <i2; a++){\n        vec4 r = hash44(vec4(i,F,a));//Transform this uniform random into a normal distribution\n        r.z = sqrt(-2.*log(r.z));\n        r.w *= 6.28318;\n        r.zw = r.z*vec2(cos(r.w),sin(r.w));\n        vec4 p = texture(iChannel0,(i+r.xy)/R.xy);//sample random nearby points\n        o += .5/(1.+exp(4.*length(p.xy*R.xy-i))); //add a gaussian to the accumulated image from the particle \n    }\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n// --- pseudo perlin noise 3D\n\nint MOD = 1;  // type of Perlin noise\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define hash31(p) fract(sin(dot(p,vec3(127.1,311.7, 74.7)))*43758.5453123)\nfloat noise3(vec3 p) {\n    vec3 i = floor(p);\n    vec3 f = fract(p); f = f*f*(3.-2.*f); // smoothstep\n\n    float v= mix( mix( mix(hash31(i+vec3(0,0,0)),hash31(i+vec3(1,0,0)),f.x),\n                       mix(hash31(i+vec3(0,1,0)),hash31(i+vec3(1,1,0)),f.x), f.y), \n                  mix( mix(hash31(i+vec3(0,0,1)),hash31(i+vec3(1,0,1)),f.x),\n                       mix(hash31(i+vec3(0,1,1)),hash31(i+vec3(1,1,1)),f.x), f.y), f.z);\n\treturn   MOD==0 ? v\n\t       : MOD==1 ? 2.*v-1.\n           : MOD==2 ? abs(2.*v-1.)\n                    : 1.-abs(2.*v-1.);\n}\n\nfloat fbm3(vec3 p) {\n    float v = 0.,  a = .5;\n    mat2 R = rot(.37);\n\n    for (int i = 0; i < 1; i++, p*=2.,a/=2.) \n        p.xy *= R, p.yz *= R,\n        v += a * noise3(p);\n\n    return v/.5;\n}\n// -------------------------------------\n\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    vec2 uv = i/R.xy;\n    vec4 r = vec4(0);\n    for(int j = 0; j < 30; j++){\n        r = hash44(vec4(floor(i/v),0,j));\n        if(length(r-.5)<.5)\n            break;\n    }\n    o = texture(iChannel0,uv);\n    //if(iFrame<3){\n        o.xy = r.xy*2.-1.;\n    float t = 3.*iTime, K = 1.5, S = 2.;\n    float k = K * max(1.-length(o.xy),0.);\n    o.xy += k * vec2( fbm3(vec3(S*o.xy, t)), fbm3(vec3(S*o.xy+15., t)) ) / S;\n    o.xy = .5 + o.xy/2.*vec2(R.y/R.x,1);\n    /*}\n    o.zw /= 1.001;\n    //o.xy = fract(o).xy;\n    o.xy += o.zw/R.xy;\n    //o.zw += .01*vec2(sin(o.y*10.),cos(o.x*10.))/1e3;\n    if(iMouse.w > 1.){\n        vec2 d = (iMouse.xy-o.xy*R.xy);\n        o.zw += d/(pow(length(d),2.));\n        o.zw *= 1.-exp(-.4*length(d));\n    }*/\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R iResolution\n#define F iFrame\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\nfloat w = 16.;\nfloat h = 16.;\nfloat v = 5.;   //increase for fewer particles drawn better. Decrease all the way to 1 for iResolution.x*iResolution.y total number of particles\nint i1 = 20;    //number of iterations for fisrt and second drawing/search stages\nint i2 = 20;\t//more runs slower, but the particles are more visible","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n    o = vec4(0);\n    vec2 s = floor(i/vec2(w,h))*vec2(w,h)/R.xy;\n    \n    //Randomly search for particles that are within this WxH block\n    for(int a = 0; a < i1; a++){\n        vec4 r = hash44(vec4(i,F,-a));        \n        r.z = sqrt(-2.*log(r.z));\n        r.w *= 6.28318;\n        r.zw = r.z*vec2(cos(r.w),sin(r.w))*5.;\n        vec4 p = texture(iChannel0,(i+r.zw)/R.xy);//sample random nearby points\n        float l = length(p.xy*R.xy-i);\n        if(l < length(o.zw*R.xy-i)){\n            o.zw = p.xy;\n        }\n    }\n    \n    for(int a = 0; a < i1; a++){\n        vec4 r = hash44(vec4(i,a,F));        \n        r.z = sqrt(-2.*log(r.z));\n        r.w *= 6.28318;\n        r.zw = r.z*vec2(cos(r.w),sin(r.w))*3.;\n        vec4 p = texture(iChannel1,(i+r.zw)/R.xy);//sample random nearby points\n        float l = length(p.zw*R.xy-i);\n        if(l < length(o.xy*R.xy-i)){\n            o.xy = p.zw;\n        }\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}