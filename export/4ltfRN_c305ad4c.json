{"ver":"0.1","info":{"id":"4ltfRN","date":"1538840279","viewed":826,"name":"Stable Oscillator","username":"ttg","description":"An integer-arithmetic trick to accurately perform the calculation: fract(s/n), for integer s arbitrarily high.\nComparison to floating-point time: [url=https://www.shadertoy.com/view/XldfRN]Errors in float-time Oscillator[/url]","likes":10,"published":1,"flags":8,"usePreview":0,"tags":["sound","sampleprecise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\n  See Sound Tab\n\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0)\n#define endMsg  return length(T.yz)==0. ? 0. : T.x\n\nfloat message(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0);   // or: initMsg;\n    C(83);C(111);C(117);C(110);C(100);C(32);C(105);C(110); // message \"Sound in\"\n    return length(T.yz)==0. ? -1. : T.x; // or: endMsg;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //  if (iResolution.y<200.) to display only in the icon \n    if (iResolution.y<2000.) {float c=message((fragCoord/iResolution.y-vec2(.1,.2))*8.);if(c>=0.){fragColor=vec4(c);return;}}\n\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\nStable Oscillator\n\nAn integer-arithmetic trick to accurately perform the calculation:\n    fract(s/n), for integer s arbitrarily high.\nComparison to floating-point time: https://www.shadertoy.com/view/XldfRN\n\nThe function \"intfract\" may be used and copied freely, with or without\nattribution.  However, please do not remove the comment,\n    shadertoy.com/view/4ltfRN,\nso that others may find the explanation provided here, which may be expanded in\nfuture.  This is not a legal requirement.\n\n*/\n\nfloat intfract(int s, float n) {\n\n  // Do not use.  Further testing revealed precision inconsistencies.\n  // Replacement: https://www.shadertoy.com/view/ctf3z8\n\n  // Implements fract(s/n)\n  // Explanation and copyright: shadertoy.com/view/4ltfRN\n  // Given sample number and period, calculate phase with high accuracy.\n  // Uses integer overflow for modulo.\n  int sn = int(n), a = s%sn, b = (s/sn);\n  const float MAXF = float(uint(-1))+1.;\n  return fract(  (float(a)/n) + float((uint(b)*uint(MAXF*float(sn)/n)))/MAXF );\n}\n\nvec2 mainSound( int samp )\n{\n    // A 440 Hz wave\n    return .1*vec2( sin(6.2831*intfract(samp, iSampleRate/440.0)) );\n}\n\nvec2 mainSound( in int s,float time_DO_NOT_USE)\n{\n    return mainSound(s);\n}\n","name":"Sound","description":"","type":"sound"}]}