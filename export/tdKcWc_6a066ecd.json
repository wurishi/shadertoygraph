{"ver":"0.1","info":{"id":"tdKcWc","date":"1603940318","viewed":81,"name":"RayMarchingTest-sphere","username":"Hopepdm","description":"sdf 基本光照模型， copy from iq","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 抗锯齿开关\n\n#define AA 2\n\n// sdf\nfloat sdPlane(vec3 p) {\n\treturn p.y;\n}\n\nfloat sdSphere(vec3 p, float s){\n\treturn length(p) - s;\n}\n\n// sdf的交并补\n// subtraction减法\nfloat opS(float d1, float d2){\n\treturn max(-d2, d1);\n}\n\n// Union\nvec2 opU(vec2 d1, vec2 d2) {\n    return ( d1.x < d2.x ) ? d1 : d2;\n}\n\n// repetition 周期重复\nvec3 opRep(vec3 p, vec3 c){\n\treturn mod(p,c) - 0.5 * c;\n}\n\n//twist 扭曲\nvec3 opTwist(vec3 p){\n\tfloat c = cos(10.0 * p.y + 10.0);\n    float s = sin(10.0 * p.y + 10.0);\n    mat2 m = mat2(c, -s, s, c);\n    return vec3(m * p.xz, p.y);\n}\n\nvec2 map(in vec3 pos){\n\t// res.x 是光线到表面的距离，res.y 影响的是物体材质\n\t//vec2 res = vec2( sdSphere( pos-vec3( 0.0,0.25, 0.0), 0.25 ), 46.9 );\n\tvec2 res = opU( vec2( sdPlane( pos), 1.0 ),\n\t\t\tvec2( sdSphere( pos-vec3( 0.0,0.25, 0.0), 0.25 ), 48.0 ) );\n    \n    return res;\n\n}\n\n// 实际是 Ray-marching\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n\tfloat tmin = 1.0;\n\tfloat tmax = 20.0;\n \n#if 1   // 加速 Raymarching\n\t// bounding volume\n\tfloat tp1 = (0.0-ro.y)/rd.y;\n\tif( tp1>0.0 )\n\t\ttmax = min( tmax, tp1 );\n \n\tfloat tp2 = (1.6-ro.y)/rd.y;\n\tif( tp2>0.0 )\n\t{\n\t\tif( ro.y>1.6 )\n\t\t\ttmin = max( tmin, tp2 );\n\t\telse\n\t\t\ttmax = min( tmax, tp2 );\n\t}\n#endif\n \n\tfloat t = tmin;\n\tfloat m = -1.0;\n\tfor( int i=0; i<64; i++ )\n\t{\n\t\tfloat precis = 0.0005*t;\n\t\tvec2 res = map( ro+rd*t );\n\t\tif( res.x<precis || t>tmax )\n\t\t\tbreak;\n\t\tt += res.x;\n\t\tm = res.y;\t// 唯一用到 res.y 的地方，影响材质的计算\n\t}\n \n\tif( t>tmax )\n\t\tm=-1.0;\n\treturn vec2( t, m );\n}\n \n// 柔化阴影\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n\tfloat t = mint;\n\tfor( int i=0; i<16; i++ )\n\t{\n\t\tfloat h = map( ro + rd*t ).x;\n\t\tres = min( res, 8.0*h/t );\n\t\tt += clamp( h, 0.02, 0.10 );\n\t\tif( h<0.001 || t>tmax )\t// 在[ mint, maxt)范围内进行插值\n\t\t\tbreak;\n\t}\n\treturn clamp( res, 0.0, 1.0 );\n}\n \n// 法线\nvec3 calcNormal( in vec3 pos )\n{\n\tvec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n\treturn normalize( e.xyy*map( pos + e.xyy ).x +\n\t\t\te.yyx*map( pos + e.yyx ).x +\n\t\t\te.yxy*map( pos + e.yxy ).x +\n\t\t\te.xxx*map( pos + e.xxx ).x );\n\t/*\n\t vec3 eps = vec3( 0.0005, 0.0, 0.0 );\n\t vec3 nor = vec3(\n\t map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\t return normalize(nor);\n\t */\n}\n \n// Ambient Occlusion: 环境光吸收/遮蔽\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n\tfloat sca = 1.0;\n\tfor( int i=0; i<5; i++ )\n\t{\n\t\tfloat hr = 0.01 + 0.12*float(i)/4.0;\n\t\tvec3 aopos = nor * hr + pos;\n\t\tfloat dd = map( aopos ).x;\n\t\tocc += -(dd-hr)*sca;\n\t\tsca *= 0.95;\n\t}\n\treturn clamp( 1.0 - 3.0*occ, 0.0, 1.0 );\n}\n \nvec3 render( in vec3 ro, in vec3 rd )\n{\n\tvec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n\tvec2 res = castRay(ro,rd);\n\tfloat t = res.x;\n\tfloat m = res.y;\n\tif( m>-0.5 )\n\t{\n\t\tvec3 pos = ro + t*rd;\t\t// 步进的光线位置\n\t\tvec3 nor = calcNormal( pos );\t// 法线\n\t\tvec3 ref = reflect( rd, nor );\t// 反光\n \n\t\t// material\n\t\tcol = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\t\t// 如果是地板的话\n\t\tif( m<1.5 )\n\t\t{\n\t\t\t// 格子地砖\n\t\t\tfloat f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n\t\t\tcol = 0.3 + 0.1*f*vec3(1.0);\n\t\t}\n \n\t\t// 光照模型的计算\n\t\tfloat occ = calcAO( pos, nor );\n\t\tvec3 lig = normalize( vec3(-0.4, 0.7, -0.6) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n\t\tfloat dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n\t\tfloat bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n\t\tfloat dom = smoothstep( -0.1, 0.1, ref.y );\n\t\tfloat fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n \n\t\t// 散射阴影\n\t\tdif *= softshadow( pos, lig, 0.02, 2.5 );\n\t\t// 反光阴影\n\t\tdom *= softshadow( pos, ref, 0.02, 2.5 );\n \n\t\t// 注意物体底座的阴影变化\n\t\t// occ = 1.;\n\t\tvec3 lin = vec3(0.0);\n\t\tlin += 1.30*dif*vec3(1.00,0.80,0.55);\n\t\tlin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;\n\t\tlin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;\n\t\tlin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;\n\t\tlin += 0.50*bac*vec3(0.25,0.25,0.25)*occ;\n\t\tlin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n \n\t\tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );\n\t}\n \n\treturn vec3( clamp(col,0.0,1.0) );\n}\n \nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\t\t// look\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\t// XY Space\n\tvec3 cu = normalize( cross(cw,cp) );\t// right\n\tvec3 cv = normalize( cross(cu,cw) );\t// up\n \n\t// right,\n\t// up,\t* world = camera\n\t// look\n\t// 注意： glsl 是按列存储，所以可以直接右乘相机坐标系的点，结果就是世界坐标系下的点\n\treturn mat3( cu, cv, cw );\t// right, up, look\n}\n \n\nuniform float iGlobalTime;\n \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy / iResolution.xy;\n        float time = 15.0 + iTime;\n\n        vec3 tot = vec3(0.0);\n    #if AA>1\t// 开启 AA\n        for (int m = 0; m < AA; m++)\n        {\n            for (int n = 0; n < AA; n++)\n            {\n                // pixel coordinates\n                vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n                vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o)) / iResolution.y;\n    #else\n                vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n    #endif\n\n                // camera\n                vec3 ro = vec3(-0.5 + 3.5 * cos(0.1 * time + 6.0 * mo.x),\n                        1.0 + 2.0 * mo.y, 0.5 + 4.0 * sin(0.1 * time + 6.0 * mo.x));\n                vec3 ta = vec3(-0.5, -0.4, 0.5);\n                // camera-to-world transformation\n                mat3 ca = setCamera(ro, ta, 0.0);\n                // ray direction\n                vec3 rd = ca * normalize(vec3(p.xy, 2.0));\n\n                // render\n                vec3 col = render(ro, rd);\n\n                // 针对电子屏幕的 gamma 矫正（否则颜色偏暗）\n                col = pow(col, vec3(0.4545));\n\n                tot += col;\n    #if AA>1\n            }\n        }\n        tot /= float(AA * AA);\n    #endif\n\n        fragColor = vec4(tot, 1.0);\n\n}","name":"Image","description":"","type":"image"}]}