{"ver":"0.1","info":{"id":"tsX3Dr","date":"1545730061","viewed":813,"name":"Interior Mapping","username":"zcx_star","description":"Interior Mapping: http://interiormapping.oogst3d.net/\nMy explanation (Chinese): https://zcx-star.github.io/2019/01/30/Shadertoy-02/","likes":13,"published":1,"flags":0,"usePreview":1,"tags":["raytracing","interiormapping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Ray tracing\n//http://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-plane-and-ray-disk-intersection\n\n//Interior mapping \n//http://interiormapping.oogst3d.net/\n\n//It is not optimized, but easy for me to understand step by step\n\nvec2 intersect(in vec3 ro, in vec3 rd, in vec3 Axis, in float d, in float id1, in float id2)\n{    \n    float rd_weight = dot( rd, Axis );\n    float ro_weight = dot( ro ,Axis );\n    float pointer = ceil( ro_weight / d );\n    \n    if( rd_weight > 0.0 ) // look up\n    {\n        float h = pointer * d;\n        float t = ( h - ro_weight ) / rd_weight;\n        return vec2( t, id1 );  \n    }\n    else // look down\n    {\n        float h = ( pointer - 1.0 ) * d;\n        float t = ( h - ro_weight ) / rd_weight;\n        return vec2( t, id2 );  \n    }   \n}\n\nvec2 nearest(in vec2 c1,in vec2 c2,in vec2 c3)\n{    \n    if( c1.x < c2.x )\n    {\n        return c1.x<c3.x? c1:c3;\n    }\n    else\n    {\n        return c2.x<c3.x? c2:c3; \n    }\n}\n\nvec3 render(in vec2 tID, in vec3 ro, in vec3 rd, in vec3 size)\n{\n    vec3 color1 = vec3(0.42, 0.85, 0.65);//green,  top\n    vec3 color2 = vec3(1.0, 0.67, 0.55); //red,    bottom\n    vec3 color3 = vec3(1.0, 0.9, 0.49);  //yellow, right\n    vec3 color4 = vec3(1.0, 0.77, 0.5);  //orange, left   \n    vec3 color5 = vec3(0.5, 0.78, 1.0);  //blue,   front\n    vec3 color6 = vec3(0.59, 0.56, 0.92);//purple, back\n    \n    float t = tID.x;\n    float id = tID.y;   \n    \n    vec3 pos = ro + t*rd;\n    pos = pos / size;\n    \n    if (id>0.9 && id<1.1)\n    {\n        vec3 tex = texture( iChannel0, fract(vec2(pos.x,-pos.z)) ).xyz; \n        return color1 * tex;        \n    }  \n    else if (id>1.9 && id<2.1)\n    {\n        vec3 tex = texture( iChannel0, fract(pos.xz) ).xyz; \n        return color2 * tex;\n    }\n    else if (id>2.9 && id<3.1)\n    {\n        vec3 tex = texture( iChannel0, fract(vec2(-pos.z,pos.y)) ).xyz; \n        return color3 * tex;\n    }\n    else if (id>3.9 && id<4.1)\n    {\n        vec3 tex = texture( iChannel0, fract(pos.zy) ).xyz; \n        return color4 * tex;\n    }\n    else if (id>4.9 && id<5.1)\n    {\n        vec3 tex = texture( iChannel0, fract(pos.xy)).xyz; \n        return color5 * tex;\n    }\n    else if (id>5.9 && id<6.1)\n    {\n        vec3 tex = texture( iChannel0, fract(pos.xy) ).xyz; \n        return color6 * tex;\n    }    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 cameraPos = vec3( sin(iTime), 0.5*cos(iTime), 0.0 );    \n    \n    vec2 uv = ( fragCoord * 2.0 - iResolution.xy ) / iResolution.y;\n    vec3 ro = vec3( uv, 2.14 );          \n    vec3 rd = normalize( ro - cameraPos );\n    \n    vec3 size = vec3(0.8, 0.6, 1.0);    \n   \n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 right = vec3(1.0, 0.0, 0.0);\n    vec3 front = vec3(0.0, 0.0, 1.0); \n    \n    // interset\n    vec2 tID1 = intersect(ro,rd,up,size.y, 1.0, 2.0);\n    vec2 tID2 = intersect(ro,rd,right,size.x, 3.0, 4.0);\n    vec2 tID3 = intersect(ro,rd,front,size.z, 5.0, 6.0);\n    vec2 tID = nearest(tID1,tID2,tID3);\n    \n    // render \n    vec3 color = render(tID,ro,rd,size);\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}