{"ver":"0.1","info":{"id":"MlcczN","date":"1531781032","viewed":147,"name":"Dodecahedron trail (WIP)","username":"Firzen_","description":"Currently WIP, but I dig this so far.","likes":2,"published":1,"flags":96,"usePreview":0,"tags":["sdfdodecahedronvisualization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n\nconst vec3 camPos = vec3(0,0,10.);\n\nfloat timeScale = 10.;\n\nvec3 n14 = vec3(0.000,0.851,0.526);\nvec3 n15 = vec3(0.000,-0.851,0.526);\nvec3 n16 = vec3(0.526,0.000,0.851);\nvec3 n17 = vec3(-0.526,0.000,0.851);\nvec3 n18 = vec3(0.851,0.526,0.000);\nvec3 n19 = vec3(-0.851,0.526,0.000);\n\nfloat dodecahedral(vec3 p, float e, float r) {\n\tfloat s = pow(abs(dot(p,n14)),e);\n\ts += pow(abs(dot(p,n15)),e);\n\ts += pow(abs(dot(p,n16)),e);\n\ts += pow(abs(dot(p,n17)),e);\n\ts += pow(abs(dot(p,n18)),e);\n\ts += pow(abs(dot(p,n19)),e);\n\ts = pow(s, 1./e);\n\treturn s-r;\n}\n\nmat4 rotX(float t)\n{\n    return mat4(vec4(1.,0.,0.,0.),\n                vec4(0.,cos(-t),-sin(-t),0.),\n                vec4(0.,sin(-t),cos(-t),0.),\n                vec4(0.));\n}\n\nmat4 rotY(float t)\n{\n    return mat4(vec4(cos(-t),0.,-sin(-t),0.),\n        \t\tvec4(0.,1.,0.,0.),\n                vec4(sin(-t),0.,cos(-t),0.),\n                vec4(0.));\n}\n\nvec3 path(float t)\n{\n    return 1.8*vec3(sin(t), -cos(t), cos(t*3.));\n}\n\nfloat test(vec3 pos, float t)\n{\n    float curLine = mod(t*timeScale, iResolution.y);\n    vec2 sampleOffset = vec2(0,curLine/iResolution.y);\n    \n    vec3 offset = -path(t);\n    vec2 samplePos = sampleOffset;\n    samplePos.y += 1.;\n    samplePos.y = mod(samplePos.y, 1.);\n    float scale = 0.2+3.*texture(iChannel0, samplePos).r/10.;\n    float rotx = 2.*t;\n    float roty = t;\n    vec3 fpos = (rotX(rotx) * rotY(roty) * vec4(pos+offset,1.)).xyz;\n    return dodecahedral(fpos, 10., scale);\n}\n\nvec4 SDFScene(vec3 pos)\n{    \n    float dist = 100.*MAX_DIST;\n    float steps = 15.;\n    float t = iTime;\n    dist = min(dist, test(pos, t));\n    for(float i=0.; i<steps; i++)\n    {\n        t = floor(iTime*timeScale)/timeScale-(steps-i-1.)/timeScale;\n\n    \tdist = min(dist, test(pos, t));\n    }\n    return vec4(1.,1.,1., dist);\n}\n\nvec4 shortestDistanceToSurface(vec3 camPos, vec3 dir)\n{\n    float depth = MIN_DIST;\n    \n    for(int i = 0; i<MAX_MARCHING_STEPS; i++)\n    {\n        vec4 val = SDFScene(camPos+dir*depth);\n        float dist = val.w;\n        if(dist < EPSILON)\n            return vec4(val.rgb, depth);\n        depth += dist;\n        if(depth > MAX_DIST)\n            return vec4(0.,0.,0.,MAX_DIST);\n    }\n    return vec4(0.,0.,0.,MAX_DIST);\n}\n\nvec3 estimateNormal(vec3 p) {\n    float dx = (SDFScene(vec3(p.x + EPSILON, p.y, p.z)).w - SDFScene(vec3(p.x - EPSILON, p.y, p.z)).w);\n    float dy = (SDFScene(vec3(p.x, p.y + EPSILON, p.z)).w - SDFScene(vec3(p.x, p.y - EPSILON, p.z)).w);\n    float dz = (SDFScene(vec3(p.x, p.y, p.z + EPSILON)).w - SDFScene(vec3(p.x, p.y, p.z - EPSILON)).w);\n    return normalize(vec3(\n        dx,\n        dy,\n        dz\n    ));\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 eye = camPos;\n    \n    float t = iTime + texture(iChannel0, vec2(0.005,0)).r*0.5;\n    \n    vec3 lightDir1 = -vec3(cos(t),-sin(t),-2.);\n    lightDir1 = normalize(lightDir1);\n    vec3 lightColor1 = vec3(1.,0.,1.);\n    \n    vec3 lightDir2 = vec3(cos(t),0.,1);\n    vec3 lightColor2 = vec3(0.,1.,0.);\n        \n    vec4 val = shortestDistanceToSurface(eye, dir);\n    vec3 bgColor = texture(iChannel1, dir).rgb * (0.5+0.5*texture(iChannel0, uv).r);\n    \n    \n    if(val.w > MAX_DIST - EPSILON)\n        fragColor = vec4(bgColor,0.);\n    else\n    {\n        vec3 normal = estimateNormal(eye+dir*val.w);\n        vec3 geomColor = mix(val.rgb, bgColor, 0.05);\n        geomColor = texture(iChannel1, reflect(dir, normal)).rgb;\n        fragColor = vec4(geomColor*lightColor1,1.) * max(0.,dot(normal, lightDir1)) + vec4(geomColor*lightColor2,1.) * max(0.,dot(normal, lightDir2));\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xs2Xzt","filepath":"https://soundcloud.com/pvnova/evolution-of-get-lucky-daft","previewfilepath":"https://soundcloud.com/pvnova/evolution-of-get-lucky-daft","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float timeScale = 10.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float depth = texture(iChannel1, vec2(uv.x, 0)).r;\n    vec4 color = texture(iChannel0, uv);\n    \n    if(abs(mod(iTime*timeScale, iResolution.y)-fragCoord.y)<1.1)\n    \tfragColor = vec4(depth,0.0,0.0,1.0);\n    else\n        fragColor = color;\n}","name":"Buf A","description":"","type":"buffer"}]}