{"ver":"0.1","info":{"id":"csS3Rh","date":"1667180346","viewed":53,"name":"Scene/subscene truncations test","username":"Envy24","description":"Subscene truncations with map for split screen shaders.\n4 diffetrent variants for scene and subscene truncation.\nDrag scene with mouse to see when different truncation occurs.\nTry to on/off different truncation)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["test","map","scene","split","truncation"],"hasliked":0,"parentid":"DdsGDj","parentname":"Map and inverse map test"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                         ( iResolution )\n#define AR                        ( R.x / R.y )                      // Aspect ratio.\n#define UNIT                      ( 16.0 / R.y  )\n#define SMAA(x)                   ( smoothstep(UNIT, 0., x) )\n#define PIXELATE(SC, PS)          ( floor( (SC) / (PS) ) * (PS) )    // PS - pixel size\n\n#define MOUSE_OFFSET ( iMouse.z > 0. ? iMouse.xy - R.xy * 0.5 : vec2(0) )\nvec2 map_to_centered_ndc_old(in vec2 SC, in float scale, in vec2 origin)\n{\n    return ((2. * (SC - MOUSE_OFFSET) - R.xy) / R.y) * scale - origin;\n}\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin, in float mouse_scale)\n{\n    vec2 M = mouse_scale * MOUSE_OFFSET;\n    return ((2. * (SC - M) - R.xy) / R.y) * scale - origin;\n}\n\nfloat diskSDF_L2(vec2 NDC, vec2 C, float r)\n{\n    return length(C - NDC)-r;\n}\n\n/**\n#define TRUNCATE       (0.95)//( sinOSC(0.25, 1., iTime) )\n#define SCENE_SCALE    (1.0)//( sinOSC(1.0, 3., iTime*0.6) )\n#define X              (0.25)//( sinOSC(-0.5, 0.5, iTime) )\n#define Y              (0.25)//( sinOSC(-0.5, 0.5, iTime*0.3) )\n/**/\n#define TRUNCATE       ( 0.95 )//( sinOSC(0.5, 1., iTime) )\n#define SCENE_SCALE    ( sinOSC(1.0, 3., iTime*0.6) )\n#define X              ( sinOSC(-0.5, 0.5, iTime) )\n#define Y              ( sinOSC(-0.5, 0.5, iTime*0.3) )\n/**/\n#define CELL_SIZE_SC   ( 50. )\n#define CELL_SIZE_NDC  ( 50. / R.y ) // == CELL_X_MIN/MAX == CELL_Y_MIN/MAX\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 origin =  vec2(X, Y),\n         NDC = map_to_centered_ndc(SC, SCENE_SCALE, origin, 1.),\n         CC = map_to_centered_ndc(PIXELATE(SC, CELL_SIZE_SC) + vec2(CELL_SIZE_SC*0.5), SCENE_SCALE, origin, 1.),\n         /* Problem: distortion when you drag subframe with mouse, \n            because of mouse offset affects on ranges calculation.\n            Try drag scene with mouse to see distortion. *\n         ranges = TRUNCATE * map_to_centered_ndc_old(R.xy, SCENE_SCALE, vec2(0));\n         /* Solution: cancel mouse offset by set mouse_scale to zero. */\n         ranges = TRUNCATE * map_to_centered_ndc(R.xy, SCENE_SCALE, vec2(0), 0.);\n         /* */\n\n    /* Control dots. */    \n    vec2 gradient = 1.-normalize(SC);\n    /* Viewport origin (blue). */    \n    vec3 color = mix( gradient.xyx, vec3(0,0,1), SMAA(diskSDF_L2(NDC, -origin, 15./R.y)) );\n    /* Subframe origin (red). */\n         color = mix( color, vec3(1,0,0),        SMAA(diskSDF_L2(NDC, vec2(0), 15./R.y)) );                \n    /* Cells origins (cyan). */\n         color = mix( color, vec3(0,1,0),        SMAA(diskSDF_L2(NDC, CC, 2./R.y)) );\n    /* 1 unit orbit in cell coordinates (black). */\n         color = mix( color, vec3(0,0,0),        SMAA(diskSDF_L2(NDC, CC+vec2(cos(iTime), sin(iTime))*CELL_SIZE_NDC, 1./R.y)) );\n    /**/\n      \n    /* 1) Truncate scene in screen coordinates (global) */\n    float x_min = R.x * 0.5 - TRUNCATE * R.x * 0.5,\n          x_max = R.x - x_min,\n          y_min = R.y * 0.5 - TRUNCATE * R.y * 0.5,\n          y_max = R.y - y_min;\n    color =        \n        SC.x < x_min || SC.x > x_max ||\n        SC.y < y_min || SC.y > y_max ?\n            vec3(1,1,0) : // truncated part\n            vec3(color);\n    /* 2) Truncate scene relative to subframe origin (red dot) */\n    color =        \n        abs(NDC.x) > ranges.x || abs(NDC.y) > ranges.y ?\n            vec3(1,0,0) : // truncated part\n            vec3(color);\n    /* 3) Truncate scene relative to viewport origin (blue dot) */\n    color =        \n        abs(NDC.x+origin.x) > ranges.x || abs(NDC.y+origin.y) > ranges.y ?\n            vec3(0,1,1) : // truncated part\n            vec3(color);\n    /* 4) Truncate scene relative to each cells origin (cyan dots).\n       Visible parts depends on SCENE_SCALE. */    \n    color =        \n        abs(NDC.x-CC.x) > CELL_SIZE_NDC*TRUNCATE || abs(NDC.y-CC.y) > CELL_SIZE_NDC*TRUNCATE ?\n            vec3(0.3) : // truncated part\n            vec3(color);\n    /**/\n    O = vec4(color, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}","name":"Common","description":"","type":"common"}]}