{"ver":"0.1","info":{"id":"7s3yzS","date":"1654271886","viewed":243,"name":"Mandelbrot Bouquet","username":"chickenlegs","description":"Mandelbrot set bouquet where different layered sets are superimposed together.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrotset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926538\n\nstruct com\n{\n    float real;\n    float img;\n};\n\ncom addcNum(com cNum1, com cNum2)\n{\n    return com(cNum1.real + cNum2.real, cNum1.img + cNum2.img);\n}\n\ncom subcNum(com cNum1, com cNum2)\n{\n    return com(cNum1.real - cNum2.real, cNum1.img - cNum2.img);\n}\n\ncom mulcNum(com cNum1, com cNum2)\n{\n    return com(\n                   cNum1.real * cNum2.real - cNum1.img * cNum2.img,\n                   cNum1.real * cNum2.img + cNum1.img * cNum2.real\n                  );\n}\n\ncom divcNum(com cNum1, com cNum2)\n{\n    return com(\n                   (cNum1.real * cNum2.real + cNum1.img * cNum2.img)/(cNum2.real*cNum2.real+cNum2.img*cNum2.img),\n                   (cNum1.img * cNum2.real - cNum1.real * cNum2.img)/(cNum2.real*cNum2.real+cNum2.img*cNum2.img)\n                  );\n}\n\ncom powcNum(com cNum, int expo)\n{\n    com res = com(1., 0.);\n    for (int i=expo; i>0; --i)\n    {\n        res = mulcNum(cNum, res);\n    }\n    return res;\n}\n\nfloat getiVal(com cNum)\n{\n    return cNum.real + cNum.img;\n}\n\nfloat range(float x, float s, float e)\n{\n    return max(sign(s-x)*sign(x-e), 0.);\n}\n\nfloat eq(float v1, float v2, float e)\n{\n    return range(v1, v2-e, v2+e);\n}\n\n\nvec2 rotate(vec2 vec, float a)\n{\n    return vec2(vec.x*cos(a)-vec.y*sin(a), vec.x*sin(a)+vec.y*cos(a));\n}\n\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 mandelbrot(vec2 xy, int max_iter, int expo, bool isGrey)\n{\n    com z;\n\n    com c = com(xy.x, xy.y);    \n\n    int n = 0;\n\n    while (abs(getiVal(z)) < 4. && n < max_iter)\n    {\n        com t = z;\n        \n        z = addcNum(powcNum(z, expo), c);\n        \n        n += 1;\n    }\n    \n    if (isGrey)\n    {\n        return vec3(float(n)/float(max_iter));\n    }\n    else\n    {\n        float h = float(n)/float(max_iter);\n        float s = 1.;\n        float v = 1.-h;\n        return vec3(hsv2rgb(vec3(h,s,v)));\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float ratio = iResolution.y/iResolution.x;\n    \n    float zoom = (cos(iTime/5.)+1.)*2.75;\n    \n    vec2 viewPortCenter = vec2(.372,.8);\n    \n    vec2 zoomCenter = vec2(-.63,0.702);\n    \n    vec2 xy = (uv - viewPortCenter) * zoom + zoomCenter;\n    xy = vec2(xy.x, xy.y*ratio);\n    \n    xy = rotate(xy, -PI/2.);\n    \n    vec3 col = vec3(0.);\n    \n    col -= mandelbrot(xy, 30, 20, true);\n    col += mandelbrot(xy, 30, 9, true);\n    col += mandelbrot(xy, 100, 5, false);\n    col += mandelbrot(xy, 100, 5, false)*.25;\n    col += mandelbrot(xy, 100, 4, true);\n    col -= mandelbrot(xy, 100, 3, true);\n    col += mandelbrot(xy, 30, 3, true);\n    col -= mandelbrot(xy, 50, 2, false);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}