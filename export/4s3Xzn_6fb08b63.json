{"ver":"0.1","info":{"id":"4s3Xzn","date":"1457259302","viewed":563,"name":"Jumping Cubes","username":"dr2","description":"The cubes are free!!","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["simulation","dynamics","physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Jumping Cubes\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  const vec3 e = vec3 (0.1, 0., 0.);\n  vec3 g;\n  float s;\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nconst int nBlock = 64;\nconst int nSiteBk = 27;\nconst vec3 blkSph = vec3 (3.);\nconst vec3 blkGap = vec3 (0.4);\n\nvec3 vnBlk, fcBlk, sunDir;\nvec2 qBlk;\nfloat tCur, dstFar;\nint idBlk;\n\nfloat BlkHit (vec3 ro, vec3 rd)\n{\n  mat3 m;\n  vec3 rm, rdm, v, tm, tp, bSize, u;\n  float dMin, dn, df;\n  bSize = 0.5 * blkGap * (blkSph - 1.) + 0.4;\n  dMin = dstFar;\n  for (int n = 0; n < nBlock; n ++) {\n    rm = Loadv4 (4 + 4 * n).xyz;\n    m = QtToRMat (Loadv4 (4 + 4 * n + 2));\n    rdm = rd * m;\n    v = ((ro - rm) * m) / rdm;\n    tp = bSize / abs (rdm) - v;\n    tm = - tp - 2. * v;\n    dn = max (max (tm.x, tm.y), tm.z);\n    df = min (min (tp.x, tp.y), tp.z);\n    if (df > 0. && dn < min (df, dMin)) {\n      dMin = dn;\n      fcBlk = - sign (rdm) * step (tm.zxy, tm) * step (tm.yzx, tm);\n      idBlk = n;\n      u = (v + dn) * rdm;\n    }\n  }\n  if (dMin < dstFar) {\n    qBlk = vec2 (dot (u.zxy, fcBlk), dot (u.yzx, fcBlk));\n    vnBlk = QtToRMat (Loadv4 (4 + 4 * idBlk + 2)) * fcBlk;\n  }\n  return dMin;\n}\n\nfloat BlkHitSh (vec3 ro, vec3 rd, float rng)\n{\n  mat3 m;\n  vec3 rm, rdm, v, tm, tp, bSize;\n  float dMin, dn, df;\n  bSize = 0.5 * blkGap * (blkSph - 1.) + 0.4;\n  dMin = dstFar;\n  for (int n = 0; n < nBlock; n ++) {\n    rm = Loadv4 (4 + 4 * n).xyz;\n    m = QtToRMat (Loadv4 (4 + 4 * n + 2));\n    rdm = rd * m;\n    v = ((ro - rm) * m) / rdm;\n    tp = bSize / abs (rdm) - v;\n    tm = - tp - 2. * v;\n    dn = max (max (tm.x, tm.y), tm.z);\n    df = min (min (tp.x, tp.y), tp.z);\n    if (df > 0. && dn < min (df, dMin)) dMin = dn;\n  }\n  return smoothstep (0., rng, dMin);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, vn, grCol, bgCol;\n  vec2 w, iw;\n  float dstBlk, sh, dstGrnd;\n  bgCol = vec3 (0.2, 0.4, 0.7);\n  grCol = vec3 (0.3, 0.5, 0.2);\n  dstBlk = BlkHit (ro, rd);\n  dstGrnd = (rd.y < 0.) ? - (ro.y - 0.5) / rd.y : dstFar;\n  if (min (dstBlk, dstGrnd) < dstFar) {\n    if (dstBlk < dstFar) {\n      ro += rd * dstBlk;\n      vn = vnBlk;\n      if (max (abs (qBlk.x), abs (qBlk.y)) > 0.7) objCol = vec4 (1.);\n      else objCol = vec4 (abs (fcBlk), 1.);\n    } else if (dstGrnd < dstFar) {\n      ro += rd * dstGrnd;\n      vn = VaryNf (0.5 * ro, vec3 (0., 1., 0.), 2.);\n      objCol = vec4 (mix (grCol - 0.05, grCol + 0.05, Fbm2 (0.5 * ro.xz)), 0.);\n    }\n    sh = 0.2 + 0.8 * BlkHitSh (ro + 0.01 * sunDir, sunDir, 30.);\n    col = objCol.rgb * (0.1 + 0.9 * sh * max (dot (vn, sunDir), 0.) +\n       0.2 * max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.)) +\n       objCol.a * sh * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.);\n    col = mix (col, bgCol, clamp (4. * min (dstBlk, dstGrnd) / dstFar - 3.,\n       0., 1.));\n  } else col = bgCol;\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 col, rd, ro;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 200.;\n  az = 0.;\n  el = 0.1 * pi;\n  if (mPtr.z > 0.) {\n    el = clamp (el - 2. * mPtr.y, 0.05 * pi, 0.45 * pi);\n    az -= 7. * mPtr.x;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  ro = vec3 (0., 5., - 100.) * vuMat;\n  rd = normalize (vec3 (uv, 6.)) * vuMat;\n  sunDir = normalize (vec3 (-0.5, 1., -1.));\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// \"Jumping Cubes\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nconst float pi = 3.14159;\n\nconst int nBlock = 64;\nconst int nSiteBk = 27;\nconst vec3 blkSph = vec3 (3.);\nconst vec3 blkGap = vec3 (0.4);\n\nfloat nStep;\n\nvec3 RSite (int sId)\n{\n  float sIdf;\n  sIdf = float (sId);\n  return blkGap * (floor (vec3 (mod (sIdf, blkSph.x),\n      mod (sIdf, blkSph.x * blkSph.y) / blkSph.x,\n      sIdf / (blkSph.x * blkSph.y))) - 0.5 * (blkSph - 1.));\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  vec3 f;\n  float vRel, fo, drv;\n  const float fOvlap = 1000., fricN = 10., fricT = 1., fricS = 10.;\n  fo = fOvlap * (1. / rSep - 1.);\n  drv = dot (dr, dv) / (rSep * rSep);\n  dv -= drv * dr;\n  vRel = length (dv);\n  fo = max (fo - fricN * drv, 0.);\n  f = fo * dr;\n  if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  return f;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float rStep)\n{\n  mat3 mRot, mRotN;\n  vec4 p, drw4;\n  vec3 rmN, vmN, wmN, dr, dv, rts, rtsN, rms, vms, fc, am, wam, dSp, drw;\n  float mIdf, farSep, rSep, grav, fDamp, dt;\n  grav = 5.;\n  fDamp = 0.001;\n  dt = 0.01;\n  p = Loadv4 (4 + 4 * mId);\n  rm = p.xyz;\n  rStep = p.w;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  mRot = QtToRMat (qm);\n  farSep = length (blkGap * (blkSph - 1.)) + 1.;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBlock; n ++) {\n    rmN = Loadv4 (4 + 4 * n).xyz;\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      mRotN = QtToRMat (Loadv4 (4 + 4 * n + 2));\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      for (int j = 0; j < nSiteBk; j ++) {\n        rts = mRot * RSite (j);\n        rms = rm + rts;\n        vms = vm + cross (wm, rts);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int jN = 0; jN < nSiteBk; jN ++) {\n          rtsN = mRotN * RSite (jN);\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rtsN));\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  if (rm.y < 0.5 * farSep + 1.) {\n    for (int j = 0; j < nSiteBk; j ++) {\n      rts = mRot * RSite (j);\n      dr = rm + rts;\n      rSep = abs (dr.y);\n      if (rSep < 1.) {\n        fc = FcFun (vec3 (0., dr.y, 0.), rSep, vm + cross (wm, rts));\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  am -= fDamp * vm;\n  am.y -= grav;\n  am.xz -= 0.01 * rm.xz;\n  dSp = blkGap * blkSph;\n  wam = mRot * (wam * mRot / (0.25 * (vec3 (dot (dSp, dSp)) - dSp * dSp) + 1.));\n  vm += dt * am;\n  if (abs (vm.y) < 0.05 && rm.y < 4.) {\n    mIdf = float (mId) + 1.;\n    if (rStep > 0.) rStep = -20. - floor (100. * Hashff (77.3 * mIdf));\n    else {\n      ++ rStep;\n      if (rStep == 0.) {\n        vm.xz = vec2 (Hashff (17.1 * mIdf), Hashff (27.1 * mIdf)) - 0.5;\n        vm.y = 5. + 10. * Hashff (37.1 * mIdf);\n        wm = 3. * vec3 (0., 2. * Hashff (37.1 * mIdf) - 1., 0.);\n      }\n    }\n  }\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float rStep)\n{\n  float mIdf, nbEdge;\n  mIdf = float (mId);\n  nbEdge = floor (sqrt (float (nBlock)) + 0.1);\n  rm.xz = 3. * (floor (vec2 (mod (mIdf, nbEdge),\n      mIdf / nbEdge)) - 0.5 * (nbEdge - 1.));\n  rm.y = 1.4;\n  vm = vec3 (0.);\n  qm = vec4 (0., 0., 1., 0.);\n  wm = vec3 (0.);\n  rStep = -30. - floor (100. * Hashff (77.3 * (mIdf + 1.)));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag;\n  float rStep;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBlock + 4) discard;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  doInit = false;\n  if (iFrame <= 5) {\n    doInit = true;\n  } else {\n    stDat = Loadv4 (0);\n    nStep = stDat.x;\n    ++ nStep;\n    if (mId >= 0) Step (mId, rm, vm, qm, wm, rStep);\n  }\n  if (doInit) {\n    if (mId >= 0) Init (mId, rm, vm, qm, wm, rStep);\n  }\n  if (pxId == 0) stDat = vec4 (nStep, 0., 0., 0.);\n  else if (pxId == 4 + 4 * mId) p = vec4 (rm, rStep);\n  else if (pxId == 4 + 4 * mId + 1) p = vec4 (vm, 0.);\n  else if (pxId == 4 + 4 * mId + 2) p = qm;\n  else if (pxId == 4 + 4 * mId + 3) p = vec4 (wm, 0.);\n  Savev4 (pxId, ((pxId >= 4) ? p : stDat), fragColor, fragCoord);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// \"Jumping Cubes\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nconst float pi = 3.14159;\n\nconst int nBlock = 64;\nconst int nSiteBk = 27;\nconst vec3 blkSph = vec3 (3.);\nconst vec3 blkGap = vec3 (0.4);\n\nfloat nStep;\n\nvec3 RSite (int sId)\n{\n  float sIdf;\n  sIdf = float (sId);\n  return blkGap * (floor (vec3 (mod (sIdf, blkSph.x),\n      mod (sIdf, blkSph.x * blkSph.y) / blkSph.x,\n      sIdf / (blkSph.x * blkSph.y))) - 0.5 * (blkSph - 1.));\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  vec3 f;\n  float vRel, fo, drv;\n  const float fOvlap = 1000., fricN = 10., fricT = 1., fricS = 10.;\n  fo = fOvlap * (1. / rSep - 1.);\n  drv = dot (dr, dv) / (rSep * rSep);\n  dv -= drv * dr;\n  vRel = length (dv);\n  fo = max (fo - fricN * drv, 0.);\n  f = fo * dr;\n  if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  return f;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float rStep)\n{\n  mat3 mRot, mRotN;\n  vec4 p, drw4;\n  vec3 rmN, vmN, wmN, dr, dv, rts, rtsN, rms, vms, fc, am, wam, dSp, drw;\n  float mIdf, farSep, rSep, grav, fDamp, dt;\n  grav = 5.;\n  fDamp = 0.001;\n  dt = 0.01;\n  p = Loadv4 (4 + 4 * mId);\n  rm = p.xyz;\n  rStep = p.w;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  mRot = QtToRMat (qm);\n  farSep = length (blkGap * (blkSph - 1.)) + 1.;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBlock; n ++) {\n    rmN = Loadv4 (4 + 4 * n).xyz;\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      mRotN = QtToRMat (Loadv4 (4 + 4 * n + 2));\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      for (int j = 0; j < nSiteBk; j ++) {\n        rts = mRot * RSite (j);\n        rms = rm + rts;\n        vms = vm + cross (wm, rts);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int jN = 0; jN < nSiteBk; jN ++) {\n          rtsN = mRotN * RSite (jN);\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rtsN));\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  if (rm.y < 0.5 * farSep + 1.) {\n    for (int j = 0; j < nSiteBk; j ++) {\n      rts = mRot * RSite (j);\n      dr = rm + rts;\n      rSep = abs (dr.y);\n      if (rSep < 1.) {\n        fc = FcFun (vec3 (0., dr.y, 0.), rSep, vm + cross (wm, rts));\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  am -= fDamp * vm;\n  am.y -= grav;\n  am.xz -= 0.01 * rm.xz;\n  dSp = blkGap * blkSph;\n  wam = mRot * (wam * mRot / (0.25 * (vec3 (dot (dSp, dSp)) - dSp * dSp) + 1.));\n  vm += dt * am;\n  if (abs (vm.y) < 0.05 && rm.y < 4.) {\n    mIdf = float (mId) + 1.;\n    if (rStep > 0.) rStep = -20. - floor (100. * Hashff (77.3 * mIdf));\n    else {\n      ++ rStep;\n      if (rStep == 0.) {\n        vm.xz = vec2 (Hashff (17.1 * mIdf), Hashff (27.1 * mIdf)) - 0.5;\n        vm.y = 5. + 10. * Hashff (37.1 * mIdf);\n        wm = 3. * vec3 (0., 2. * Hashff (37.1 * mIdf) - 1., 0.);\n      }\n    }\n  }\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float rStep)\n{\n  float mIdf, nbEdge;\n  mIdf = float (mId);\n  nbEdge = floor (sqrt (float (nBlock)) + 0.1);\n  rm.xz = 3. * (floor (vec2 (mod (mIdf, nbEdge),\n      mIdf / nbEdge)) - 0.5 * (nbEdge - 1.));\n  rm.y = 1.4;\n  vm = vec3 (0.);\n  qm = vec4 (0., 0., 1., 0.);\n  wm = vec3 (0.);\n  rStep = -30. - floor (100. * Hashff (77.3 * (mIdf + 1.)));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag;\n  float rStep;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBlock + 4) discard;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  doInit = false;\n  if (iFrame <= 5) {\n    doInit = true;\n  } else {\n    stDat = Loadv4 (0);\n    nStep = stDat.x;\n    ++ nStep;\n    if (mId >= 0) Step (mId, rm, vm, qm, wm, rStep);\n  }\n  if (doInit) {\n    if (mId >= 0) Init (mId, rm, vm, qm, wm, rStep);\n  }\n  if (pxId == 0) stDat = vec4 (nStep, 0., 0., 0.);\n  else if (pxId == 4 + 4 * mId) p = vec4 (rm, rStep);\n  else if (pxId == 4 + 4 * mId + 1) p = vec4 (vm, 0.);\n  else if (pxId == 4 + 4 * mId + 2) p = qm;\n  else if (pxId == 4 + 4 * mId + 3) p = vec4 (wm, 0.);\n  Savev4 (pxId, ((pxId >= 4) ? p : stDat), fragColor, fragCoord);\n}\n","name":"Buffer B","description":"","type":"buffer"}]}