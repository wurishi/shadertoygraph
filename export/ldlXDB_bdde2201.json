{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// perlin noise function by https://github.com/ashima/webgl-noise\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187, // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439, // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626, // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i = floor(v + dot(v, C.yy) );\n  vec2 x0 = v - i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x = a0.x * x0.x + h.x * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nfloat fbm(in vec2 uv, in float freq, in float lac)\n{\n    float gain = 0.65;\n    float lacunarity = lac;\n    \n    float total = 0.0;\n    float frequency = freq;\n    float amplitude = gain;\n    \n    uv = uv*5.0;\n    \n    total = snoise(uv);\n        \n    for (int i = 0; i < 10; i++)\n    {\n        total += snoise(uv * frequency) * amplitude;\n        frequency *= lacunarity;\n        amplitude *= gain;\n    }\n\n    //total = 1.0 - (1.0 / total);\n    total = (total + 2.0) / 4.0;\n    \n    return total;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float time = iTime/0.5;\n    float daytime = (sin(time/200.0+10.0)+1.0)*200.0;\n    \n    float y = (uv.y);\n    \n    vec3 col = vec3(0.4, 0.7, 1.0);\n    \n    // dimming\n    col -= vec3(daytime/100.0); // darken total\n    col -= vec3(tan(y)*daytime/200.0); // darken gradient\n    float g = pow(1.0-y, sqrt(1.0+daytime/20.0));\n    col += vec3(g, -g*0.5, -g*0.75)*(daytime/200.0); // redden\n\n    //vec3 col = vec3(0.0);\n    \n    float f = fbm(uv + vec2(time/20.0, time/30.0), 0.5+daytime/200.0, 2.1042 + sin(time/10.0)/100.0);\n    \n    if (f > 0.2)\n        col += smoothstep(f, 0.05, 0.45)*g*0.5;\n\n    \n    //col = sqrt(col);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldlXDB","date":"1406592410","viewed":248,"name":"CloudySky","username":"sed","description":"A clumsy application of fractual brownian motion","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","fbm"],"hasliked":0,"parentid":"","parentname":""}}