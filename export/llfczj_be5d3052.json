{"ver":"0.1","info":{"id":"llfczj","date":"1506623511","viewed":196,"name":"black neons","username":"balkhan","description":"a negative lightning experiment","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n*/\n\n#define LPOS vec3(cos(t)*.8, sin(t)*.8, -t-1.5)\n#define I_MAX\t\t100\n#define E\t\t\t0.001\n\nvec4\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvoid\trotate(inout vec2 v, float angle);\nvec2\trot_t;\nvec3\th;\nvec3\tbase;\nvec3\tlight_pos;\nvec3\tlight_green = vec3(.5,.7,.4);\nvec3\tlight_blue = vec3(.1,.5,.7);\nvec3\tlight_red = vec3(.7,.2,.1);\nvec3\tuglob;\nfloat \tt;\n\nvoid mainImage(out vec4 c_out, in vec2 f)\n{\n    uglob*=0.;\n    vec3\tcol = vec3(0., 0., 0.);\n    vec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = camera(uv);\n    vec3\tpos = vec3(-.0+cos(iTime*.5)*2., .0+sin(iTime*.5)*2., 1.0-iTime*.5);\n    t = iTime;\n\trot_t = vec2( cos(-t*.5)*.75, sin(-t*.5)*.75 );\n\n    dir.zx *= mat2(rot_t.x, rot_t.y, -rot_t.y, rot_t.x);\n    dir=normalize(dir);\n    vec4\tinter = (march(pos, dir));\n\n    col.xyz = (1.-inter.x*.0061251)-(1.-vec3(.125)*inter.w)*.5;\n    col.xyz += -h*.0053061251;\n\tcol.xyz += uglob*.75;\n    c_out =  vec4(col,1.0);\n}\n\nvec3 evaluateLight(in vec3 pos)\n{\n    vec3\tlightCol;\n    lightCol =\n        (mod(ceil(pos.y),3.)==1.?\n                light_blue\n               :\n                (mod(ceil(pos.y),3.)==2.?light_red:light_green)\n               )*.5;\n    \n    lightCol += \n        (mod(ceil(pos.x),3.)==1.?\n                light_blue\n               :\n                (mod(ceil(pos.x),3.)==2.?light_red:light_green)\n               )*.5;\n    \n    float distanceToL = \n        length(fract(pos.xy+light_pos.xy)-.5)-.025;\n\n    float\tdl = length(fract(pos.xy+light_pos.xy)-.5)-.025;;\n    vec3\to = fract(pos.xyz*15.+light_pos.xyz*15.)-.5;\n    float\tdl2 = max(max(max(abs(o.x), abs(o.y)), abs(o.z)) + .03, .0);\n\tvec3\tret = \n        max\n        (\n        lightCol * 5./(distanceToL*distanceToL)\n        ,\n    \tlightCol * 300.0/sqrt( (dl2-1.5*dl/(dl2)) )\n    )*.015;\n    dl = length(pos.xyz-LPOS);\n    uglob += .015*vec3(.2,.2,.9)*1./(dl*dl);\n    return ret;\n}\n\nfloat\tscene(vec3 p)\n{\n    vec3\top = p;\n    float\tmind = 1e5;\n    op = p;\n    \n    // \"star\" lattice\n    p.xy += .5;\n    p.xyz = fract(p.xyz*.5)-.5;\n    vec3 oo = abs(p);\n    vec3 o = p*p;\n    float s = sqrt(o.x+o.y);\n    s = min(s, sqrt(o.x+o.z));\n    s = min(s, sqrt(o.y+o.z));\n    mind = max(-(length(oo -(oo.x+oo.y+oo.z)/3. )-.3503125),s-0.45);\n\n    // cubic cylinder lattice\n    p = op;\n    p = fract(p)-.5;\n    o = p*p*p*p; // length4 square it a bit\n    s = pow(o.x+o.y,1./4.);\n    s = min(s, pow(o.x+o.z,1./4.));\n    s = min(s, pow(o.y+o.z,1./4.));\n    mind = min(mind, s-.025);\n\n    // cylinders for blacklight\n    p = op;\n    p.z += .52*t;\n    light_pos.xy = vec2(cos(p.z*4. ),sin(p.z*4. ))*.15;\n    p.xy = fract(p.xy)-.5;\n    p.z += .52*t;\n    p.xy+=light_pos.xy;\n    light_pos.z = p.z;\n\n    mind = min(mind, \n              length(p.xy)-.02501\n              );\n    \n    // positive light sphere\n\tmind = min(mind,\n               length(op-LPOS)-.0001\n               );\n    \n    return(mind);\n}\n\n\nvec4\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0, 0.0);\n    vec3\tp = vec3(0.0, 0.0, 0.0);\n    vec4\ts = vec4(0.0, 0.0, 0.0, 0.0);\n\n    for (int i = -1; i < I_MAX; ++i)\n    {\n    \tp = pos + dir * dist.y;\n        dist.x = scene(p);\n        dist.y += dist.x;\n        h += evaluateLight(p)*.5;\n        if (dist.x < E )\n        {\n            s.y = 1.;\n            break;\n        }\n        s.x++;\n    }\n    s.w = dist.y+dist.x;\n    return (s);\n}\n\n// Utilities\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec2\trot(vec2 p, vec2 ang)\n{\n\tfloat\tc = cos(ang.x);\n    float\ts = sin(ang.y);\n    mat2\tm = mat2(c, -s, s, c);\n    \n    return (p * m);\n}\n\n\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n\treturn normalize(vec3(\n           march(pos+eps.xyy, dir).w - march(pos-eps.xyy, dir).w,\n           march(pos+eps.yxy, dir).w - march(pos-eps.yxy, dir).w,\n           march(pos+eps.yyx, dir).w - march(pos-eps.yyx, dir).w ));\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float\t\tfov = 1.;\n\tvec3\t\tforw  = vec3(0.0, 0.0, -1.0);\n\tvec3    \tright = vec3(1.0, 0.0, 0.0);\n\tvec3    \tup    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n","name":"Image","description":"","type":"image"}]}