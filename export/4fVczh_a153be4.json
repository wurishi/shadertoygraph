{"ver":"0.1","info":{"id":"4fVczh","date":"1731487237","viewed":56,"name":"julia set animated","username":"lukajk1","description":"juliaset","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["juliaset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323846\n\nvec2 squareC(vec2 c) {\n    return vec2(c.x * c.x - c.y * c.y, 2. * c.x * c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    \n    vec2 coordsC = uv * 1.2; // times zoom value\n    \n    vec2 num = vec2(coordsC);\n    float totalIterations = 100.;\n    float escapeRadiusSquared = 4.;\n\n    float oscillator = .04*sin(iTime/3.-PI/2.)+.56;\n    \n    float c = -oscillator;\n\n    float i;\n    for (i = 0.; i < totalIterations; i++) {\n        num = squareC(num) + c;\n        if (dot(num, num) > escapeRadiusSquared) break;\n    }\n\n    float val = smoothstep(0., 1., i/totalIterations);\n    vec3 col = vec3(val, .2+(val/9.), .3);\n    fragColor = vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"}]}