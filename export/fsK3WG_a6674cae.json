{"ver":"0.1","info":{"id":"fsK3WG","date":"1632089746","viewed":70,"name":"PBR Green dude","username":"NataliaP","description":"CookTorrance lightening","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["pbrsdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define asp iResolution.x/iResolution.y\nconst vec3  eye      = vec3 ( 0, 0, 3);\nconst vec3  light    = vec3  ( 1.0, 3.0, 5.0 );\nconst int   maxSteps = 70;\nconst float eps      = 0.01;\n\n// Rotation matrix around the X axis.\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nfloat length8 ( in vec2 p )\n{\n    return pow ( pow ( p.x, 8.0 ) + pow ( p.y, 8.0 ), 1.0/ 8.0 );\n}\n\nfloat length8 ( in vec3 p )\n{\n    return pow ( pow ( p.x, 8.0 ) + pow ( p.y, 8.0 ) + pow ( p.z, 8.0 ), 1.0/ 8.0 );\n}\n\nfloat dBox ( vec3 p, vec3 b )\n{\n\treturn length8 ( max ( abs ( p ) - b, 0.0 ) );\n}\n\nfloat dSphere ( vec3 p, in vec3 c )\n{\n\treturn length ( p - c ) - 1.0;\n}\n\nfloat smin ( float a, float b, float k )\n{\n\tfloat res = exp ( -k*a ) + exp ( -k*b );\n\treturn -log ( res ) / k;\n}\n\nfloat smax ( float a, float b, float k )\n{\n\tfloat res = exp ( k*a ) + exp ( k*b );\n\treturn log ( res ) / k;\n}\n\nfloat dCone ( vec3 p, vec2 c, float h)\n{\n    float q = length ( p.xy );\n    return smax(dot ( c, vec2 ( q, p.z ) ), -h - p.z, 20.0);\n}\n\nfloat dGreenDude (in vec3 q) \n{\n    q -= vec3(0, 0, 0.35);\n    return min(min(min(dBox ( q, vec3 ( 0.5, 0.5, 0.7 )), \n      dBox ( q + vec3( 0.0, 0.0, 0.8), vec3 ( 0.4, 0.4, 0.4 ))),\n      dBox ( q + vec3( - 0.7, 0.0, -0.9), vec3 ( 0.2, 0.5, 0.2 ))),\n      dBox ( q + vec3( + 0.7, 0.0, -0.9), vec3 ( 0.2, 0.5, 0.2 )));\n}\n\nfloat dHat (vec3 p)\n{\n    p += vec3( 0, 0, 1.35 );\n    return dCone(-p, vec2(0.06, 0.15), 0.7);\n}\n\nfloat circle(vec2 uv,float radius,float blur){\n\tfloat d = length(uv);\n    return smoothstep(radius,radius-blur,d);\n}\n\nfloat sdf ( in vec3 p, in mat3 m )\n{\n   vec3 q = m * p*rotateX(0.5 * abs(cos(iTime)))*rotateX(1.7);\n   \n   return min(dGreenDude(q), dHat(q));\n}\n\nvec3 trace ( in vec3 from, in vec3 dir, out bool hit, in mat3 m )\n{\n\tvec3\tp         = from;\n\tfloat\ttotalDist = 0.0;\n\t\n\thit = false;\n\t\n\tfor ( int steps = 0; steps < maxSteps; steps++ )\n\t{\n\t\tfloat\tdist = sdf ( p, m );\n        \n\t\tif ( dist < 0.01 )\n\t\t{\n\t\t\thit = true;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\ttotalDist += dist;\n\t\t\n\t\tif ( totalDist > 10.0 )\n\t\t\tbreak;\n\t\t\t\n\t\tp += dist * dir;\n\t}\n\t\n\treturn p;\n}\n\nvec3 generateNormal ( vec3 z, float d, in mat3 m )\n{\n    float e   = max (d * 0.5, eps );\n    float dx1 = sdf(z + vec3(e, 0, 0), m);\n    float dx2 = sdf(z - vec3(e, 0, 0), m);\n    float dy1 = sdf(z + vec3(0, e, 0), m);\n    float dy2 = sdf(z - vec3(0, e, 0), m);\n    float dz1 = sdf(z + vec3(0, 0, e), m);\n    float dz2 = sdf(z - vec3(0, 0, e), m);\n    \n    return normalize ( vec3 ( dx1 - dx2, dy1 - dy2, dz1 - dz2 ) );\n}\n\n// eye sensitivity in the rgb range\nconst vec3 lum = vec3(0.2126, 0.7152, 0.0722);\n\n// returns brightness\nfloat height(in vec2 tx)\n{\n    return dot(texture(iChannel0, tx).rgb, lum);\n}\n\nvec3 bump (in vec2 tx) \n{\n    float v = height (tx);\n    float vx = height(vec2(tx.x + 0.01, tx.y));\n    float vy = height(vec2(tx.x, tx.y + 0.01));\n    \n    return normalize(vec3(vx - v, vy - v, 0.99));\n}\n\n//////////////////////////////////////////////////////////////////////////////////////\n\n\nconst float roughness = 0.27;\nconst vec3  r0   = vec3 ( 1.0, 0.92, 0.23 );\nconst vec3  clr  = vec3 ( 0.0, 0.9, 0.8 );\nconst float gamma = 10.0;\nconst float pi    = 3.1415926;\nconst float FDiel = 0.04;\t\t// Fresnel for dielectrics\n\nvec3 fresnel ( in vec3 f0, in float product )\n{\n\tproduct = clamp ( product, 0.0, 1.0 );\t\t// saturate\n\t\n\treturn mix ( f0, vec3 (1.0), pow(1.0 - product, 5.0) );\n}\n\nfloat D_blinn(in float roughness, in float NdH)\n{\n    float m = roughness * roughness;\n    float m2 = m * m;\n    float n = 2.0 / m2 - 2.0;\n    return (n + 2.0) / (2.0 * pi) * pow(NdH, n);\n}\n\nfloat D_beckmann ( in float roughness, in float NdH )\n{\n\tfloat m    = roughness * roughness;\n\tfloat m2   = m * m;\n\tfloat NdH2 = NdH * NdH;\n\t\n\treturn exp( (NdH2 - 1.0) / (m2 * NdH2) ) / (pi * m2 * NdH2 * NdH2);\n}\n\nfloat D_GGX ( in float roughness, in float NdH )\n{\n\tfloat m  = roughness * roughness;\n\tfloat m2 = m * m;\n\tfloat NdH2 = NdH * NdH;\n\tfloat d  = (m2 - 1.0) * NdH2 + 1.0;\n\t\n\treturn m2 / (pi * d * d);\n}\n\nfloat G_schlick ( in float roughness, in float nv, in float nl )\n{\n    float k = roughness * roughness * 0.5;\n    float V = nv * (1.0 - k) + k;\n    float L = nl * (1.0 - k) + k;\n\t\n    return 0.25 / (V * L);\n}\n\nfloat G_neumann ( in float nl, in float nv )\n{\n\treturn nl * nv / max ( nl, nv );\n}\n\nfloat G_klemen ( in float nl, in float nv, in float vh )\n{\n\treturn nl * nv / (vh * vh );\n}\n\nfloat G_default ( in float nl, in float nh, in float nv, in float vh )\n{\n\treturn min ( 1.0, min ( 2.0*nh*nv/vh, 2.0*nh*nl/vh ) );\n}\n\nvec4 cookTorrance ( in vec3 p, in vec3 n, in vec3 l, in vec3 v )\n{\n    vec3  h    = normalize ( l + v );\n\tfloat nh   = dot (n, h);\n\tfloat nv   = dot (n, v);\n\tfloat nl   = dot (n, l);\n\tfloat vh   = dot (v, h);\n    float metallness = 1.0;\n    vec3  base  = pow ( clr, vec3 ( gamma ) );\n    vec3  F0    = mix ( vec3(FDiel), clr, metallness );\n\t\n\t\t\t// compute Beckman\n   \tfloat d = D_beckmann ( roughness, nh );\n\n            // compute Fresnel\n    vec3 f = fresnel ( F0, nv );\n\t\n            // default G\n    float g = G_default ( nl, nh, nv, vh );\n\t\n\t\t\t// resulting color\n\tvec3  ct   = f*(0.4 * d * g / nv);\n\tvec3  diff = max(nl, 0.0) * ( vec3 ( 1.0 ) - f ) / pi;\n\tfloat ks   = 0.5;\n\n\treturn vec4 ( pow ( diff * base + ks * ct, vec3 ( 1.0 / gamma ) ), 1.0 );\n}\n//////////////////////////////////////////////////////////////////////////////////////\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    bool hit;\n\tvec3 mouse = vec3(iMouse.xy/iResolution.xy - 0.5,iMouse.z-.5);\n    mat3 m     = rotateX ( 6.0*mouse.y ) * rotateY ( 6.0*mouse.x);\n    vec2 scale = 9.0 * iResolution.xy / max ( iResolution.x, iResolution.y ) ;\n    vec2 uv    = scale * ( fragCoord/iResolution.xy - vec2 ( 0.5 ) );\n\tvec3 dir   = normalize ( vec3 ( uv, 0 ) - eye );\n    vec4 color = vec4 ( 0, 0, 0, 1 );\n    vec3 p     = trace ( eye, dir, hit, m );\n\n\n\tif ( hit )\n\t{\n        vec3  l  = normalize        ( light - p );\n        vec3  v  = normalize        ( eye - p );\n\t\tvec3  n  = generateNormal   ( p, 0.001, m );\n        \n        //n = bump( p.xy );\n        \n\t\tfloat nl = max ( 0.0, dot ( n, l ) );\n        vec3  h  = normalize ( l + v );\n        float hn = max ( 0.0, dot ( h, n ) );\n        float sp = pow ( hn, 150.0 );\n\t\t\n        color = cookTorrance ( p, n, l, v );\n\n\t}\n    \n    // Background\n    vec2 uv1 = fragCoord/iResolution.xy;\n    uv1-=vec2(0.5,1.1);\n    uv1.x*=asp;\n    vec2 st = uv1;\n    float d = length(uv1);\n    float radius = 0.5;\n    float blur = 0.49;\n    float c = smoothstep(radius+sin(iTime)*.1,radius-blur+sin(iTime)*.05,d);\n    float dd = smoothstep(radius-0.3,radius-0.3-0.04,d);\n   \n\tfloat n = c-dd;\n    fragColor +=clamp(n,0.,1.)*1.2*vec4(0.2,0.5,0.9,1.);\n    fragColor += dd*vec4(0.2,0.5,(1.-dd),1.);\n    fragColor+=dd;\n    fragColor +=vec4( st.y)*vec4(0.2,0.5,0.9,1.)*0.6*(1.-fragColor.b);\n\n    // Output to screen\n    color *= 1.5*textureLod(iChannel0, p.xy, 0.0);\n    \n    fragColor = max(color, fragColor);\n}\n","name":"Image","description":"","type":"image"}]}