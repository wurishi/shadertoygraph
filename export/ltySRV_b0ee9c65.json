{"ver":"0.1","info":{"id":"ltySRV","date":"1484951858","viewed":137,"name":"Cyclic cellular automaton 1D","username":"chronos","description":"A simple implementation of a 1d cyclic cellular automaton.\nhttps://en.wikipedia.org/wiki/Cyclic_cellular_automaton","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["1d","cellular","automaton","cyclic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float n = 4.; // also needs to be changed in buffer A\n\n// 3-bit encoding, gives up to 8 unique colors\nvec3 NumToColor(float k) { \n    float x = mod(floor(k/4.), 2.);\n    float y = mod(floor(k/2.), 2.);\n    float z = mod(floor(k), 2.);\n    return vec3(x * (1.-z) + y*(1.-x), y*x + (1.-y)*(1.-z), z*(1.-y)+(1.-z)*x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 buffer = texture(iChannel0, uv);\n    \n    vec3 color = NumToColor(buffer.r);\n    \n    // Scanline\n    float scan = iResolution.y - fragCoord.y - 0.5 - mod(float(iFrame), iResolution.y);\n    if(scan == 0.) {\n       color = vec3(1.);\n    } else if(scan > 0.) {\n        color *= 0.5;\n    }\n    \n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float n = 4.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float k = texture(iChannel0, uv).x;\n    float cycle = mod(float(iFrame), iResolution.y);\n\tif(iResolution.y - fragCoord.y - 0.5 == cycle) {\n    \tvec4 left  = texture(iChannel0, fract( (fragCoord + vec2(-1., 1.0))/iResolution.xy) );\n    \tvec4 above = texture(iChannel0, fract( (fragCoord + vec2( 0., 1.0))/iResolution.xy) );\n    \tvec4 right = texture(iChannel0, fract( (fragCoord + vec2( 1., 1.0))/iResolution.xy) );\n        \n        k = above.x;\n        float next = mod(k + 1., n);\n        if(left.x == next || right.x == next) {\n        \tk = next;\n        }\n    }\n    \n    //bool spacebar = texture( iChannel1, vec2(32.5/256.0, 0.5) ).x > 0.5;\n\n    if(iFrame <= 20)\n    if(fragCoord.y+.5 == iResolution.y) k = floor(0.5 + (n - 1.0) * fract(abs(1293916.345727 * sin(83729384.78364 * uv.x))));\n    \n    fragColor = vec4(vec3(k), 1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}