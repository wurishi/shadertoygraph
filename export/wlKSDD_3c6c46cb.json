{"ver":"0.1","info":{"id":"wlKSDD","date":"1585137596","viewed":92,"name":"TP2 Graphique S4","username":"LucieFournier","description":"TP2 Graphique - Textures","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tp2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Lucie Fournier\n// p1811511\n// Les fbm me font un peu laguer... Donc j'ai laissé mes planètes rondes :(\n\nconst int Steps = 400;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\nstruct V {\n \tfloat v;\n    int i;\n};\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nV Union(V a,V b)\n{\n    if(a.v < b.v) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\n// Rotation indirecte\n// p : point de l'espace\n// c : centre de rotation\n// r : vecteur des trois rotations (x, y, z) en radians d'angles directs\nvec3 Rotation(vec3 p, vec3 c, vec3 r)\n{\n    float cx = cos(-r.x);\n    float sx = sin(-r.x);\n    float cy = cos(-r.y);\n    float sy = sin(-r.y);\n    float cz = cos(-r.z);\n    float sz = sin(-r.z);\n    p -=c;\n    mat3 Rx = mat3(1.0, 0.0, 0.0,    0.0, cx, -sx,    0.0, sx,cx);\n    mat3 Ry = mat3(cy, 0.0, -sy,    0.0,1.0,0.0,    sy, 0.0, cy);\n    mat3 Rz = mat3(cz, -sz, 0.0,    sz, cz, 0.0,    0.0,0.0,1.0);\n    return (Rx*Ry*Rz*p)+c;\n}\n\n// Difference puissance\nfloat Diff(vec3 p, float k) {\n    return pow(pow(abs(p.x), k) + pow(abs(p.y), k) + pow(abs(p.z), k), 1.0/k);\n}\n\n// Difference\n// a : field function of major sub-tree\n// b : fied function of delete sub-tree\nV Difference(V a, V b, int i)\n{\n    if(a.v > -b.v) return a;\n    else return V(-b.v, i);\n}\n\n// Intersection\n// a : field function of left sub-tree\n// b : fied function of right sub-tree\nV Intersection(V a, V b)\n{\n    if(a.v > b.v) return a;\n    else return b;\n}\n\n// Sphere \n// p : point\n// c : center of skeleton\n// r : radius\nV Sphere(vec3 p, vec3 c,float r, int i)\n{\n  return V(length(p-c)-r, i);\n}\n\n// Cube\n// >2 : cube arrondi\n// 2 : sphere\n// 1 : pyramide\n// < 1 : etoile ; re-multiplier le total par un tout petit nombre\nV Cube(vec3 p, vec3 c, float r, int i) {\n \treturn V((Diff((p-c), 10.0) - r), i);   \n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\nV Plane(vec3 p, vec3 n, vec3 o, int i)\n{\n    return V(dot((p-o),n),i);\n}\n\n// Boite AAB\n// p : point\n// a : point inferieur\n// b : point superieur\nV Boite(vec3 p, vec3 a, vec3 b, int i)\n{\n    V v = Intersection(Plane(p, vec3(-1.0,0.0,0.0),a, i),Plane(p, vec3(1.0,0.0,0.0),b, i));\n    v = Intersection(v, Intersection(Plane(p, vec3(0.0,-1.0,0.0),a, i),Plane(p, vec3(0.0,1.0,0.0),b, i)));\n    v = Intersection(v, Intersection(Plane(p, vec3(0.0,0.0,-1.0),a, i),Plane(p, vec3(0.0,0.0,1.0),b, i)));\n    return v;\n}\n\n\n// Cylindre infini\n// p : point\n// a : point du centre du cylindre\n// u : vecteur unitaire directeur\n// r : rayon\nV Cylindre(vec3 p, vec3 a, vec3 u, float r, int i)\n{\n \tfloat l = dot((p-a),u);\n    float d = sqrt(length(p-a)*length(p-a) - l*l);\n    return V(d - r, i);\n}\n\n// Cylindre fini\n// p : point\n// a : base du cylindre\n// b : haut du cylindre\n// r : rayon\nV CylindreFini(vec3 p, vec3 a, vec3 b, float r, int i)\n{\n    vec3 u = (b-a)/length(b-a);\n    V fc = Cylindre(p, a, u, r, i);\n    V pa = Plane(p, u, a, i);\n    V pb = Plane(p, -u, b, i);\n    return Difference(fc, Union(pa, pb), i);\n}\n\n// Potential field of the object\n// p : point\nV object(vec3 p)\n{\n  // /!\\ Pour faire fbm changer SphereTrace : v => v/2.0\n  //float v = Union(\n      //Sphere(p + fbm(p),vec3( 0.0, 0.0, 3.0),5.0),\n      //Plane(p,vec3(0.0,0.0,1.0),vec3(0.0,0.0,-4.0)));\n  \tV v = Plane(p,vec3(0.0,0.0,1.0),vec3(0.0,0.0,-8.0),2);\n    \n    // Cube marbre\n    v = Union(v, Cube(p, vec3(-6.0, 6.0, -6.0), 2.0, 3));\n    \n    // Soleil\n    v = Union(v, Sphere(p + 0.5*fbm(p/2.0 + iTime), vec3(0.0, 0.0, 1.0), 2.5,4));\n    // fdm demande manifestement à mon ordi beaucoup de ressources donc j'évite de l'utiliser après...\n    // Couleur\n    v = Union(v, Sphere(Rotation(p, vec3(0.0, 0.0, 1.0), vec3(0.0,0.0,3.0*iTime)), vec3(0.0, -3.5, 1.0), 0.5,0));\n    // Eau\n    v = Union(v, Sphere(Rotation(p, vec3(0.0, 0.0, 1.0), vec3(0.0,0.0,iTime)), vec3(0.0, -5.5, 1.0), 1.0,85));\n    // Marbre\n    v = Union(v, Sphere(Rotation(p, vec3(0.0, 0.0, 1.0), vec3(0.0,0.0,0.2*iTime)), vec3(0.0, 14.0, 1.0), 2.3,35));\n    // Pois\n    v = Union(v, Sphere(Rotation(p, vec3(0.0, 0.0, 1.0), vec3(0.0,0.0,0.7*iTime)), vec3(0.0, 8.0, 1.0), 1.2,75));\n    // Sable\n    v = Union(v, Sphere(Rotation(p, vec3(0.0, 0.0, 1.0), vec3(0.0,0.0,0.5*iTime)), vec3(0.0, -10.4, 1.0), 1.0,55));\n\t// \"Neige\" (ça fait plus Lune/Pluton)\n    v = Union(v, Sphere(Rotation(p, vec3(0.0, 0.0, 1.0), vec3(0.0,0.0,0.1*iTime)), vec3(0.0, -16.0, 1.0), 0.5,65));\n    \n    // Drapeau\n    v = Union(v, CylindreFini(p, vec3(0.0,0.0,-8.0), vec3(0.0, 0.0, -4.0), 0.1, 0));\n    v = Union(v, Boite(vec3(p.x + 0.2*sin((p.y + iTime)/0.2), p.y, p.z), vec3(-0.1,-2.5,-6.0), vec3(0.1, -0.1, -4.0), 15));\n  return v;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n  V v = object(p);\n  n.x = object( vec3(p.x+eps, p.y, p.z) ).v - v.v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ).v - v.v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ).v - v.v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    V v = object(p);\n    // Hit object\n      if (v.v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v.v/2.0);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Lighting ----------------------------------------------------------------------------------------------\n\n// Ambient occlusion\n// p : Point\n// n : Normal\n// a : Number of smaples\nfloat AmbientOcclusion(vec3 p,vec3 n, int a)\n{\n    if (a==0) { return 1.0; }\n    \n\tfloat ao=0.0; \n    \n    for (int i=0;i<a;i++)\n    {\n \t\tvec3 d = Cosine(581.123*float(i) , n);\n\n        int s;\n        bool h;\n        float t=SphereTrace(p,d,0.0,h,s);\n        if (!h) {ao+=1.0;}\n        else if (t>5.0)\n            {\n             ao+=1.0;   \n            }\n    }\n    \n    ao/=float(a);\n\treturn ao;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.452,0.551,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,0.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\n\n// Shading and lighting ---------------------------------------------------------------------------\n\n// Couleur unique : 0\nvec3 Couleur(vec3 p, vec3 c) {\n \treturn c;   \n}\n\n// Damier : 1\n// p : point de l'espace\n// n : taille des cases\nvec3 Damier(vec3 p, float n, vec3 c1, vec3 c2) {\n    p/= n;\n    ivec3 i = ivec3(floor(p.x), floor(p.y), floor(p.z));\n    if ((i.x + i.y + i.z)%2 == 0) {\n        return c1;\n    }\n    else {\n        return c2;\n    }\n}\n\n// Bois : 2\n// p : point de l'espace\n// e : epaisseur des colonnes\n// c1 : couleur 1\n// c2 : couleur 2\nvec3 Bois(vec3 p, float e, vec3 c1, vec3 c2) {\n    // Distance à l'axe z\n    float d = sqrt(p.x*p.x + p.y * p.y);\n    d/= e;\n    // Bruit sur les ronds\n    d+= 0.6*Noise(p*0.5);\n    // Ronds à repeter\n    float s = sin(d*2.0*3.14);\n    // Modification des traits\n    s = (s + 1.0)/2.0;\n    s = smoothstep(-0.3, s, 0.005);\n    // Bruit sur la couleur\n    s += 0.5*Noise(p*0.5);\n    return mix(c1,c2,s);\n}\n\n// Ligne marbre\n// p : point de l'espace\nvec4 LigneMarbre(vec3 p, float modulo, float smoo, vec3 col) {\n    // point de l'espace modifie\n \tvec3 q = p + 1.0*N3(p) + 0.5*N3(p/0.5);\n    // repetition des lignes (axe x)\n    float z = abs(mod(q.x, modulo)-1.0);\n    // Lignes plus fines\n    z = smoothstep(smoo,0.0,z);\n    // Couleur et transparence\n    return vec4(col, z);\n}\n\n// Marbre : 3\n// p : point de l'espace\nvec3 Marbre(vec3 p) {\n    // Rotation des lignes\n\tvec3 p1 = Rotation(p, vec3(0.0),vec3(0.0,0.3,0.3));\n    vec3 p2 = Rotation(p, vec3(0.0), vec3(0.0,0.6,0.6));\n    vec3 p3 = Rotation(p, vec3(0.0), vec3(0.0,0.1,0.1));\n    // Lignes\n    vec4 l1 = LigneMarbre(p1, 3.0, 0.1, vec3(0.3));\n    vec4 l2 = LigneMarbre(p2, 2.0, 0.05, vec3(0.65));\n    vec4 l3 = LigneMarbre(p3, 1.5, 0.03, vec3(0.8));\n    // Couleur de base\n    vec3 col = mix(vec3(1.0),vec3(1.0,0.85,0.85),1.0*fbm(p*0.25));\n    // Lignes\n    col = mix(col, l3.xyz, l3.w);\n    col = mix(col, l2.xyz, l2.w);\n    col = mix(col, l1.xyz, l1.w);\n    return col;\n}\n\n// Lave : 4\n// p : point de l'espace\nvec3 Lave(vec3 p) {\n    vec3 q = p + 1.0*N3(p) + 0.5*N3(p/0.5);\t// On tord le point dans l'espace\n    q.z=(q.y+5.0*iTime);\n \tvec3 Rouge = vec3(1.0,0.2,0.0);\n    vec3 Orange = vec3(1.0,1.0,0.0);\n    vec3 col = mix(Rouge,Orange,fbm(q/2.0));\n    return col;\n}\n\n// Sable : 5\n// p : point de l'espace\nvec3 Sable(vec3 p) {\n    vec3 Orange = vec3(1.0,0.9,0.5);\n    vec3 Marron = vec3(0.85,0.5,0.3);\n \tvec3 col = mix(Orange,Marron,0.5*fbm(p/0.1));\n    return col;\n}\n\n// Neige : 6\n// p : point de l'espace\nvec3 Neige(vec3 p) {\n \tvec3 Blanc = vec3(1.0);\n    vec3 Gris = vec3(0.7,0.7,0.88);\n    vec3 col = mix(Blanc,Gris, 1.8*fbm(p/3.0));\n    return col;\n}\n\n// Pois : 7\n// p : point de l'espace\nvec3 Pois(vec3 p) {\n    p+=0.5;\n    vec3 q = mod(p, 1.0);\t// On replace correctement le point pour le modulo\n    q-=0.5;\n    float d = sqrt(q.x*q.x + q.y*q.y + q.z*q.z);\t// Cercle\n    if(d < 0.3) {\n        return vec3(1.0,0.0,0.0);\n    }\n    else {\n        return vec3(1.0);\n    }\n}\n\n// Eau : 8\n// p : point de l'espace\nvec3 Eau(vec3 p) {\n    vec3 q = p + 1.0*N3(p) + 0.5*N3(p/0.5);\t// On tord le point dans l'espace\n    q.z=(q.x+5.0*iTime);\n \tvec3 Bleu = vec3(0.2,0.6,1.0);\n    vec3 Bleu2 = vec3(0.0,0.0,0.8);\n    vec3 col = mix(Bleu,Bleu2,fbm(q/2.0));\n    return col;\n}\n\n// Color : renvoie la couleur selon l'index\n// p : point de l'espace\n// c : couleur unique\n// c1Damier et c2Damier : couleurs du damier\n// c2Boix et c2Bois : couleurs du bois\nvec3 Color(vec3 p, vec3 c, vec3 c1Damier, vec3 c2Damier, vec3 c1Bois, vec3 c2Bois) {\n \tV v = object(p);\n    switch(v.i) {\n     \tcase 0 : return Couleur(p, c);\n        \tbreak;\n        case 1 : return Damier(p, 1.0, c1Damier, c2Damier);\n        \tbreak;\n        // Pareil mais en bougeant la couleur comme le drapeau\n       \tcase 15 : return Damier(vec3(p.x + 0.2*sin((p.y + iTime)/0.2), p.y, p.z), 0.5, c1Damier, c2Damier);\n        \tbreak;\n        case 2 : return Bois(p, 1.0, c1Bois, c2Bois);\n        \tbreak;\n        case 3 : return Marbre(p);\n        \tbreak;\n        // Pareil mais en tournant la couleur avec la planete\n        case 35 : return Marbre(Rotation(p, vec3(0.0, 0.0, 1.0), vec3(0.0,0.0,0.2*iTime)));\n        \tbreak;\n        case 4 : return Lave(p);\n        \tbreak;\n        case 5 : return Sable(p);\n        \tbreak;\n        // Pareil mais en tournant la couleur avec la planete\n        case 55 : return Sable(Rotation(p, vec3(0.0, 0.0, 1.0), vec3(0.0,0.0,0.5*iTime)));\n        \tbreak;\n        case 6 : return Neige(p);\n        \tbreak;\n        // Pareil mais en tournant la couleur avec la planete\n        case 65 : return Neige(Rotation(p, vec3(0.0, 0.0, 1.0), vec3(0.0,0.0,0.1*iTime))/0.1);\n        \tbreak;\n        case 7 : return Pois(p);\n        \tbreak;\n        // Pareil mais en tournant la couleur avec la planete\n        case 75 : return Pois(Rotation(p, vec3(0.0, 0.0, 1.0), vec3(0.0,0.0,0.7*iTime)));\n        \tbreak;\n        case 8 : return Eau(p);\n        \tbreak;\n        // Pareil mais en tournant la couleur avec la planete\n        case 85 : return Eau(Rotation(p, vec3(0.0, 0.0, 1.0), vec3(0.0,0.0,1.0*iTime))/0.2);\n        \tbreak;\n        default : return Couleur(p, c);\n    }\n}\n\n// Shade\n// p : Point\n// n : Normal at point\nvec3 Shade(vec3 p, vec3 n)\n{\n    // A decommenter pour voir les couleurs une à une dans l'espace\n    // Base\n    //vec3 col = Color(p, n);\n    \n    // Couleur unique\n    //vec3 col = Couleur(p, vec3(1.0,0.0,0.0));\n    \n    // Damier\n    //vec3 col = Damier(p, 3, vec3(1.0,1.0,0.0), vec3(0.1,0.1,0.1));\n    \n    // Bois\n    //vec3 col = Bois(p, 1.0, vec3(1.0,0.93,0.83), vec3(0.8,0.64,0.41));\n    \n    // Couleur turbulence\n    //vec3 col = Couleur(p, vec3(0.3,0.3,0.4)) + 0.5*fbm(p);\n    \n    // Marbre\n    //vec3 col = Marbre(p);\n    \n    // Lave\n    //vec3 col = Lave(p);\n    \n    // Sable\n    //vec3 col = Sable(p);\n    \n    // Neige\n    //vec3 col = Neige(p);\n    \n    // Pois\n    //vec3 col = Pois(p);\n    \n    // Eau\n    //vec3 col = Eau(p);\n    \n    // Couleur totale selon les index\n    vec3 col = Color(p, vec3(0.5,0.2,0.2), vec3(1.0, 1.0, 0.0), vec3(0.2), vec3(1.0,0.93,0.83), vec3(0.8,0.64,0.41));\n    \n    vec3 ambient=0.5*col; \n    vec3 diffuse=0.35*Light(p,n)*col;\n   \tvec3 c = ambient+diffuse; \n    c+=0.15*AmbientOcclusion(p+0.1*n,n,0)*vec3(1.0,1.0,1.0);\n    return c;\n}\n\n\n// Picture in picture ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Texturing and noise ---------------------------------------------------------\n\n// Hashing function\n// Returns a random number in [-1,1]\nfloat Hash(float seed)\n{\n    return fract(sin(seed)*43758.5453 );\n}\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\nvec3 N3(vec3 p) {\n    return vec3(Noise(p), Noise(p + vec3(165.0,126.0,127.0)), Noise(p + vec3(34.0,242.0,342.0)));\n}\n\n// FBM\nfloat fbm(vec3 p) {\n\treturn (Noise(p) + 0.5*Noise(p/0.5) + 0.25*Noise(p/0.25) + 0.125*Noise(p/0.125))*0.5;\n}\n\n// Lighting -----------------------------------------------------------------------\n\n// Cosine direction \n// seed : Random seed\n//    n : Normal\nvec3 Cosine( in float seed, in vec3 n)\n{\n    float u = Hash( 78.233 + seed);\n    float v = Hash( 10.873 + seed);\n\n    // Method by fizzer: http://www.amietia.com/lambertnotangent.html\n    float a = 6.2831853 * v;\n    u = 2.0 * u - 1.0;\n    return normalize( n + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u) );\n}\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.8;\n    \n    ro=vec3(40.0,0.0,9.0);\n    ro*=Rz(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}","name":"Common","description":"","type":"common"}]}