{"ver":"0.1","info":{"id":"DtKcDV","date":"1700685005","viewed":100,"name":"isometric grass tile","username":"jt","description":"An attempt to create a random patch of grass in an isometric tile.\nMove mouse to zoom. Click to show bit noise / grass seeds.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["grass","isometric","tile"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/DtKcDV isometric grass tile, 2023 by jt\n\n// An attempt to create a random patch of grass in an isometric tile.\n// Move mouse to zoom. Click to show bit noise / grass seeds.\n\n// tags: grass, isometric, tile\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//#define SIZE 250\n//#define SIZE int(mix(25.0,500.0,0.5-0.5*cos(iTime)))\n#define SIZE int(mix(50.0,250.0,1.0-iMouse.y/iResolution.y))\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nint triple32(int x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bb;\n    x ^= x >> 11;\n    x *= 0xac4c1b51;\n    x ^= x >> 15;\n    x *= 0x31848bab;\n    x ^= x >> 14;\n    return x;\n}\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nint lowbias32(int x)\n{\n    x ^= x >> 16;\n    x *= 0x7feb352d;\n    x ^= x >> 15;\n    x *= 0x846ca68b;\n    x ^= x >> 16;\n    return x;\n}\n\n#define HASH(u) triple32(u)\n//#define HASH(u) lowbias32(u)\n\n// WARNING: N 0 can crash shader!\n#define N 3\n/*\nbool bhash(ivec2 t)\n{\n    //int n = 2 + int(floor(iTime/2.0))%5;\n    //int n = 6 - int(floor(iTime/2.0))%5; // more interesting start image\n    return (HASH((t.x + HASH(t.y))) & ((1<<N)-1)) != 0;\n}\n*/\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nbool bhash(ivec2 t)\n{\n    return fract(hash12(vec2(t))) < 0.5/float((1<<N)-1);\n}\n\nbool grid(ivec2 t)\n{\n    return bhash(t);\n}\n\nfloat hash11(float p)\n{\n    p = fract(p * .1031); // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec3 hash31(float p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec2 iso(vec2 p)\n{\n    return mat2(1,1,-1,1) * p;\n    //return vec2(p.x-p.y, p.x+p.y)/2.0;\n}\n\nvec2 un_iso(vec2 p)\n{\n    return inverse(mat2(1,1,-1,1)) * p;\n    //return vec2(p.x+p.y, p.x-p.y)/2.0;\n}\n\n#define pi 3.1415926\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    vec2 R = iResolution.xy;\n    I = (2. * I - R) / R.y;\n    I.x /= 16.0/9.0;\n    vec3 c = vec3(0);\n\n    {\n        ivec2 tile = ivec2(floor(I*float(SIZE)));\n        bool on_tile = all(lessThan(abs(un_iso(vec2(tile)/vec2(SIZE))), vec2(0.5)));\n        if(on_tile)\n            c = mix(vec3(0.1,0.1,0),vec3(0.5,0.5,0),hash32(vec2(tile/2))); // ground\n\n        bool flip = false;\n        for(int i = 0; i < (1<<N); i++)\n        {\n            ivec2 lookup = tile-ivec2(0,i);\n            //lookup.x += int(float(i*i)/float(2<<N)*cos((hash12(vec2(lookup)*123.0)+iTime/10.0)*pi*2.0));\n            //lookup.x += int(hash12(vec2(lookup)*123.0)*float(i*i)/float(2<<N)*cos((iTime/10.0)*pi*2.0));\n            if(all(lessThan(abs(un_iso(vec2(lookup)/vec2(SIZE))), vec2(0.5))))\n                if(grid(lookup))\n                    c = mix(vec3(0,1,0),vec3(0.75,1,0),hash32(vec2(lookup)))\n                    //c = mix(vec3(0,1,0),vec3(0.5,0.75,0),hash32(vec2(lookup)))\n                        * mix(0.25,1.0,hash12(vec2(lookup)*123.0));\n        }\n\n        if(iMouse.z > 0.0 && on_tile)\n            c = vec3(grid(tile)); // show bit-noise\n    }\n\n    //c = sqrt(c); // gamma\n    o = vec4(c, 1);\n}\n","name":"Image","description":"","type":"image"}]}