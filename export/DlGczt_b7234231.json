{"ver":"0.1","info":{"id":"DlGczt","date":"1700526696","viewed":55,"name":"8bit 3d noise water","username":"sciner","description":"Add worley3D for make time based water waves effect\nOriginal: https://www.shadertoy.com/view/ldlXRS","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["procedural","3d","noise"],"hasliked":0,"parentid":"ldlXRS","parentname":"Noise animation - Electric"},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// 8bit 3d noise water\n//\n// Based on:\n// Noise animation - Electric\n// by nimitz (stormoid.com) (twitter: @stormoid)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n// The domain is displaced by two fbm calls one for each axis.\n// Turbulent fbm (aka ridged) is used for better effect.\n\n// float noise( in vec2 x ){return texture(iChannel0, x*.01).x;}\n\n//float circ(vec2 p) {\n//\tfloat r = length(p);\n//\tr = log(sqrt(r));\n//\treturn abs(mod(r * 4., tau) - 3.14) * 3. + .2;\n//}\n\nmat2 makem2(in float theta){float c = 1.;float s = 1.;return mat2(c,-s,s,c);}\n\nfloat noise3D(vec3 p) {\n\treturn fract(sin(dot(p ,vec3(12.9898,78.233,126.7235))) * 43758.5453);\n}\n\nfloat worley3D(vec3 p) {\t\t\t\t\t \t\t\t\t\t \n\tfloat r = 3.0;\n    vec3 f = floor(p);\n    vec3 x = fract(p);\n\tfor(int i = -1; i<=1; i++) {\n\t\tfor(int j = -1; j<=1; j++) {\n\t\t\tfor(int k = -1; k<=1; k++) {\n                vec3 q = vec3(float(i),float(j),float(k));\n    \t\t\tvec3 v = q + vec3(noise3D((q+f)*1.11), noise3D((q+f)*1.14), noise3D((q+f)*1.17)) - x;\n    \t\t\tfloat d = dot(v, v);\n\t\t\t\tr = min(r, d);\n\t\t\t}\n\t\t}\n\t}\n    return sqrt(r);\n}\n\nfloat fbm(in vec2 p) {\t\n\tfloat z = 2.;\n\tfloat rz = 0.;\n\tvec2 bp = p;\n\tfor (float i= 1.;i < 5.; i++) \t{\n        vec3 pos = vec3(p, iTime/500. * 150.)/2.;\n\t\trz+= abs((worley3D(pos) - 0.5) * 2.)/z;\n\t\tz = z*2.;\n\t\tp = p*2.;\n\t}\n\treturn rz;\n}\n\nfloat dualfbm(in vec2 p) {\n    //get two rotated fbm calls and displace the domain\n\tvec2 p2 = p * .7;\n    float time = iTime * 0.25;\n\tvec2 basis = vec2(fbm(p2 - time * 1.6), fbm(p2 + time * 1.7));\n\tbasis = (basis - .5) * 0.2;\n\tp += basis;\n\t//coloring\n\treturn fbm(p * makem2(time * 2.2));\n}\n\nvec3 makeWater(vec2 p) {\n    float rz = dualfbm(p);\n\t//rings\n\t// p /= exp(mod(time*10.,3.14159));\n\t// rz *= pow(abs((0.1-circ(p))),.9);\n\t//final color\n\tvec3 col = vec3(.2,0.5,0.8) / rz / 5.;\n\tcol = pow(abs(col), vec3(0.99));\n    col = round(vec3((col.r + col.g + col.b) / 3.) * 5.) / 5. + vec3(.0,0.5,0.8);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n\n    // pixelization effect\n    float pixel_size = 10.;\n    vec2 pixel = round(fragCoord.xy / pixel_size) * pixel_size;\n\tvec2 p = pixel / iResolution.xy-0.5;\n\tp.x *= iResolution.x/iResolution.y;\n\tp*=3.;\n\t\n    vec3 col = makeWater(p);\n\n\tfragColor = vec4(col, 1.);\n\n}","name":"Image","description":"","type":"image"}]}