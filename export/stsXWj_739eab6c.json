{"ver":"0.1","info":{"id":"stsXWj","date":"1626618653","viewed":389,"name":"Compiler Explorer","username":"vegardno","description":"Just a quick recreation + animation of the Godbolt Compiler Explorer logo: https://godbolt.org/\n\nMeasurements mostly done by eye so not really accurate.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["sdf","logo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 background = vec3(232.) / vec3(255.);\nconst vec3 green = vec3(103., 197., 42.) / vec3(255.);\nconst vec3 black = vec3(60., 60., 63.) / vec3(255.);\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nvec2 opRotate(vec2 p, float a)\n{\n    return mat2(cos(a), -sin(a), sin(a), cos(a)) * p;\n}\n\nfloat sdC(in vec2 p, float t)\n{\n    {\n        float a = -radians(360.) * smoothstep(0., .65, t);\n        p = opRotate(p, a);\n    }\n\n    float d0 = length(p) - .50;\n    float d1 = length(p) - .43;\n    float d2 = length(p) - .32;\n\n    float a = atan(p.y, p.x);\n    a = abs(mod(a + .5 * radians(45.), radians(45.)) - .5 * radians(45.));\n\n    float d = mix(d0, d1, smoothstep(-.1, .01, a - radians(14.)));\n    return opSmoothSubtraction(min(d2, sdLine(p, vec2(0), vec2(1, 0)) - .16), d, .02);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdE(in vec2 p, float t)\n{\n    const float w = .16;\n    const float wf = .82;\n\n    t -= .15;\n    float x0 = 1.2 * ( 1. - smoothstep(-.1, .2, t - .2));\n    float x1 = 1.2 * (-1. + smoothstep(.7, 1., t + .6));\n    float x2 = 1.2 * ( 1. - smoothstep(0., .3, t + .0));\n\n    float d0 = sdBox(p - vec2(x0 + 0., .12), vec2(w, .03));\n    float d1 = sdBox(p - vec2(x1 + -w * (1. - wf),  .00), vec2(w * wf, .03));\n    float d2 = sdBox(p - vec2(x2 + 0.,  -.12), vec2(w, .03));\n    return min(min(d0, d2), d1);\n}\n\nvec3 colCE(in float scale, in vec2 p, in float t)\n{\n    vec3 col = background;\n    col = mix(col, green, smoothstep(.5, -.5, sdC(p, t) * scale));\n    col = mix(col, black, smoothstep(.5, -.5, sdE(p, t) * scale));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = .9 * iResolution.y;\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / scale;\n    float t = mod(iTime, 2.) / 2.;\n\n    vec3 col = vec3(0);\n\n    for (int i = 0; i < 5; ++i)\n        col += colCE(scale, uv, t + .01 * (float(i) / 5. - .5)) / 5.;\n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}