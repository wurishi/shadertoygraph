{"ver":"0.1","info":{"id":"X3dXWn","date":"1718937434","viewed":63,"name":"太阳月亮","username":"langzai","description":"学习2dsdf及平滑布尔","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2dsdfopsmoothunion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdSphere( vec2 p, float s )//圆,p为uv+位置，s为圆的大小\n{\n    return length(p)-s;\n} \n//月亮，两个圆的差集，p为月亮（被切去的圆的中心）的位置，d为切圆横向的偏移，ra是被切圆大小，rb是切圆大小\nfloat sdMoon(vec2 p, float d, float ra, float rb )\n{\n    p.y = abs(p.y);\n    float a = (ra*ra - rb*rb + d*d)/(2.0*d);\n    float b = sqrt(max(ra*ra-a*a,0.0));\n    if( d*(p.x*b-p.y*a) > d*d*max(b-p.y,0.0) )\n          return length(p-vec2(a,b));\n          \n    return max( (length(p)-ra),-(length(p-vec2(d,0))-rb));//差集\n}\n\n//平滑布尔\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2,d1, h ) - k*h*(1.0-h);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 将uv按屏幕比例进行缩放，并归零到中心点\n    vec2 uv = fragCoord/iResolution.xy;//根据屏幕（0-1）\n    uv = uv * vec2(2.) - vec2(1.);//将（0，0）点移到中心点\n    uv.x *= iResolution.x/iResolution.y;//长边按屏幕尺寸比例缩放\n\n    uv = (fragCoord * vec2(2.) - iResolution.xy)/iResolution.y;//简写（很神奇！！！）\n\n    float S1 = sdMoon(uv + vec2(0.), .5,.5,.5);\n    float S2 = sdSphere(uv + vec2(sin(iTime) * 2.,0.), .5);\n    float S = opSmoothUnion(S1,S2,.2);\n\n    vec3 col = vec3(1.);\n    if(S<-.01) col = vec3(1.,.8,0.0);\n    if(S>.01) col = mix(vec3(0.0,.5,.8),vec3(0.0,.3,.5),sin(iTime)*.5+.5);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}