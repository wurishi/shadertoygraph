{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// 3d flythrough of the fractal in https://www.shadertoy.com/view/lslGWr\n// used ray casting from https://www.shadertoy.com/view/ldl3DS\n\nconst int MAX_RAY_STEPS = 64;\n\nvec2 mouse() {\n\treturn iMouse.xy / iResolution.xy - vec2(.5);\n}\n\nfloat field(in vec3 p) {\n\tfloat strength = 15.;\n\tfloat accum = 0.;\n\tfloat prev = 0.;\n\tfloat tw = 0.;\n\tfor (int i = 0; i < 16; ++i) {\n\t\tfloat mag = dot(p, p);\n\t\tp = abs(p) / mag + vec3(-.5, -.4, -.8  + (-0.13 * sin(iTime * .1) - .4));\n\t\tfloat w = exp(-float(i) / 7.);\n\t\taccum += w * exp(-strength * pow(abs(mag - prev), 2.2));\n\t\ttw += w;\n\t\tprev = mag;\n\t}\n\treturn max(0., 5. * accum / tw - .7);\n}\n    \n\nfloat getVoxel(vec3 c) {\n    return field(c.yxz * .0035);\n}\n\nvec2 rotate2d(vec2 v, float a) {\n\tfloat sinA = sin(a);\n\tfloat cosA = cos(a);\n\treturn vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA);\t\n}\n\nfloat sum(vec3 v) { return dot(v, vec3(1.0)); }\n\n\nfloat vertexAo(vec2 side, float corner) {\n\treturn (side.x + side.y + max(corner, side.x * side.y)) / 3.0;\n}\n\nvec4 voxelAo(vec3 pos, vec3 d1, vec3 d2) {\n\tvec4 side = vec4(getVoxel(pos + d1), getVoxel(pos + d2), getVoxel(pos - d1), getVoxel(pos - d2));\n\tvec4 corner = vec4(getVoxel(pos + d1 + d2), getVoxel(pos - d1 + d2), getVoxel(pos - d1 - d2), getVoxel(pos + d1 - d2));\n\tvec4 ao;\n\tao.x = vertexAo(side.xy, corner.x);\n\tao.y = vertexAo(side.yz, corner.y);\n\tao.z = vertexAo(side.zw, corner.z);\n\tao.w = vertexAo(side.wx, corner.w);\n\treturn 1.0 - ao;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n\tvec2 screenPos = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n\tvec3 cameraDir = vec3(0.0, 0.0, 1.4);\n\tvec3 cameraPlaneU = vec3(1.0, 0.0, 0.0);\n\tvec3 cameraPlaneV = vec3(0.0, 1.0, 0.0) * iResolution.y / iResolution.x;\n\tvec3 rayDir = cameraDir + screenPos.x * cameraPlaneU + screenPos.y * cameraPlaneV;\n\tvec3 rayPos = vec3(120.0, 2.0 * sin(iTime / 2.7), -12.0);\n\t\t\n    \n\trayPos.xz = rotate2d(rayPos.xz, iTime / 7.0 + mouse().y);\n\trayDir.xz = rotate2d(rayDir.xz, iTime / 7.0 + mouse().y);\n    \n\tvec3 mapPos = vec3(floor(rayPos));\n\n\tvec3 deltaDist = abs(vec3(length(rayDir)) / rayDir);\n\t\n\tvec3 rayStep = sign(rayDir);\n\n\tvec3 sideDist = (sign(rayDir) * (mapPos - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; \n\t\n\tvec3 mask;\n\t\n\tvec3 color = vec3(0);\n    \n    float dis = 0.08;\n    \n\tfor (int i = 0; i < MAX_RAY_STEPS; i++) {\n\t\tfloat val = pow(getVoxel(mapPos), 1.3);\n\t\t\n\t\tcolor += sqrt(dis) * vec3(val, 2.0 * val*val, 2.3 * val) * .05;\n\t\t\n\t\tmask = step(sideDist.xyz, sideDist.yzx) * step(sideDist.xyz, sideDist.zxy);\n\t\t\n\t\tsideDist += mask * deltaDist;\n\t\tmapPos += mask * rayStep;\n        \n        dis += 1.0 / float(MAX_RAY_STEPS);\n\t}\n\tfragColor.rgb = color;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ld2SDt","date":"1417414698","viewed":660,"name":"Simplicity Clouds (cubed)","username":"runouw","description":"flythrough of the fractal in JoshP's Simplicity https://www.shadertoy.com/view/lslGWr","likes":26,"published":1,"flags":0,"usePreview":0,"tags":["fractalclouds"],"hasliked":0,"parentid":"","parentname":""}}