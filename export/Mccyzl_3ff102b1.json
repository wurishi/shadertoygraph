{"ver":"0.1","info":{"id":"Mccyzl","date":"1731015435","viewed":29,"name":"blurry endless room","username":"congodin","description":"Room ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","tunnel","room","ps2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Reduced movement speed\n    float speed = 5.0;\n    float headBob = sin(iTime * speed * 1.5) * 0.05; // Reduced head bob\n    float sidewaysSway = sin(iTime * speed * 0.3) * 0.1; // Reduced sway\n    \n    // More subtle velocity for blur\n    vec2 velocity = vec2(\n        (sin((iTime + 0.05) * speed * 0.3) - sin(iTime * speed * 0.3)) * 10.0,\n        (sin((iTime + 0.05) * speed * 1.5) - sin(iTime * speed * 1.5)) * 10.0\n    );\n    \n    vec3 accumColor = vec3(0.0);\n    float accumWeight = 0.0;\n    \n    // Fewer samples for subtle blur\n    const int SAMPLES = 4;\n    for(int i = 0; i < SAMPLES; i++) {\n        float t = float(i) / float(SAMPLES - 1);\n        vec2 offset = velocity * (t - 0.5);\n        vec2 sampleUV = uv + offset * 0.02; // Reduced blur amount\n        \n        vec3 ro = vec3(sidewaysSway, 1.0 + headBob, 0.0);\n        vec3 rd = normalize(vec3(sampleUV.x + sidewaysSway * 0.2, sampleUV.y, -1.0));\n        \n        float width = 2.0;\n        float height = 2.0;\n        \n        vec3 box_min = vec3(-width, 0.0, -100.0);\n        vec3 box_max = vec3(width, height, 100.0);\n        \n        vec3 t1 = (box_min - ro) / rd;\n        vec3 t2 = (box_max - ro) / rd;\n        \n        vec3 tmin = min(t1, t2);\n        vec3 tmax = max(t1, t2);\n        \n        float tNear = max(max(tmin.x, tmin.y), tmin.z);\n        float tFar = min(min(tmax.x, tmax.y), tmax.z);\n        \n        vec3 col = vec3(0.0);\n        \n        if(tNear < tFar && tFar > 0.0) {\n            vec3 p = ro + rd * tNear;\n            p.z += iTime * speed;\n            p.z = mod(p.z, 20.0) - 10.0;\n            \n            if(abs(p.x) > width - 0.01) {\n                col = vec3(0.5, 0.0, 0.0);\n            } else if(abs(p.y - height) < 0.01) {\n                col = vec3(0.2);\n            } else if(p.y < 0.01) {\n                col = vec3(0.1);\n            }\n            \n            float distToLight = 10.0 - mod(p.z + 10.0, 20.0);\n            float lightIntensity = 1.0 / (1.0 + distToLight * 0.1);\n            vec3 lightColor = vec3(1.0, 0.9, 0.7);\n            col += lightColor * lightIntensity * 0.5;\n            \n            float sideLight = width - abs(p.x);\n            sideLight = pow(sideLight, 3.0) * 0.1;\n            col += vec3(0.5, 0.2, 0.2) * sideLight;\n            \n            float fog = 1.0 - exp(-distToLight * 0.05);\n            col = mix(col, vec3(0.0), fog * 0.7);\n            \n            // More subtle brightness contribution\n            float brightness = dot(col, vec3(0.2126, 0.7152, 0.0722));\n            float weight = 1.0 - abs(t - 0.5) * 2.0;\n            weight *= 1.0 + brightness; // Reduced brightness influence\n            \n            accumColor += col * weight;\n            accumWeight += weight;\n        }\n    }\n    \n    vec3 finalColor = accumColor / max(accumWeight, 0.001);\n    \n    // Lighter color quantization\n    finalColor = floor(finalColor * 32.0) / 32.0;\n    \n    // More subtle scanlines\n    float scanline = sin(fragCoord.y * 0.5 + iTime * 10.0) * 0.5 + 0.5;\n    finalColor *= 0.95 + scanline * 0.05;\n    \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}