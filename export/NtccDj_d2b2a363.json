{"ver":"0.1","info":{"id":"NtccDj","date":"1660895072","viewed":87,"name":"Simplex distorted tiling","username":"GribUser","description":"Noisy square tiling","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["tiles","noize"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float scale = 12.0;\nfloat step = 20.0;\nfloat BaseNoiseStrength = 0.0;\nfloat VariableNoiseStrength = 5.0;\nfloat TreeChance = 0.999;\n\n\nfloat NoiseAt(in vec2 p, float NoisePhase) {\n\tp += NoisePhase * 7.31;\n\tvec2 m = vec2(1.6, 1.2);\n\tfloat dx = 0.0;\n\tdx = 0.5000 * noise(p); p = m * p;\n\tdx += 0.2500 * noise(p); p = m * p;\n\tdx += 0.1250 * noise(p); p = m * p;\n\tdx += 0.0625 * noise(p); p = m * p;\n\treturn dx;\n}\n\n// Technical\nconst float Noiseyshift = 500.2319;\nvec2 ShiftAt(in vec2 Coord) {\n\tvec2 p = Coord.xy * scale / 300.0;\n\treturn vec2(NoiseAt(p, 0.0), NoiseAt(p + Noiseyshift, 0.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 FakeCoords = fragCoord / scale + iTime * 10.0;\n\tvec2 ShiftXY = ShiftAt(FakeCoords);\n    \n    float noisemod = fract(iTime / 10.0);\n    noisemod = (max(noisemod, 1.0-noisemod) - 0.5)*VariableNoiseStrength*2.0;\n    \n\tvec2 DistortedCoords = FakeCoords + ShiftXY * step * (BaseNoiseStrength + noisemod);\n\tvec2 CellCoords = floor(DistortedCoords / step);\n\n\tbool OddX = false;\n\tbool OddY = false;\n\tif (mod(CellCoords.x, 2.0) == 0.0) {\n\t\tOddX = true;\n\t}\n\tif (mod(CellCoords.y, 2.0) == 0.0) {\n\t\tOddY = true;\n\t}\n\tif (OddX != OddY) {\n\t\tfragColor = vec4(0.7, 0.0, noisemod / 10.0, 1.0);\n\t} else {\n\t\tfragColor = vec4(0.0, 0.7, noisemod / 10.0, 1.0);\n\t}\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 hash(vec2 p) // replace this by something better\n{\n\tp = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));\n\treturn -1.0 + 2.0 * fract(sin(p) * 43758.5453123);\n}\n\nfloat PHI = 1.61803398874989484820459;  // Î¦ = Golden Ratio   \n\nfloat gold_noise(in vec2 xy, in float seed) {\n\treturn fract(tan(distance(xy * PHI, xy) * seed) * xy.x);\n}\n\nfloat noise(in vec2 p) {\n\tconst float K1 = 0.366025404; // (sqrt(3)-1)/2;\n\tconst float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor(p + (p.x + p.y) * K1);\n\tvec2  a = p - i + (i.x + i.y) * K2;\n\tfloat m = (a.x < a.y) ? 0.0 : 1.0;\n\tvec2  o = vec2(m, 1.0 - m);\n\tvec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0 * K2;\n\tvec3  h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);\n\tvec3  n = h * h * h * h * vec3(dot(a, hash(i + 0.0)), dot(b, hash(i + o)), dot(c, hash(i + 1.0)));\n\treturn dot(n, vec3(70.0));\n}","name":"Common","description":"","type":"common"}]}