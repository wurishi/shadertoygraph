{"ver":"0.1","info":{"id":"llGXWm","date":"1485354826","viewed":938,"name":"Relative Ray Marcher","username":"pixartist","description":"A simple emulation of relativistic light bending by black holes.\nuse WASD and mouse to navigate, Q to slow down, E to speed up movement.\n\nHint: slow down and fly into the central hole backwards to see the room transform into a sphere","likes":27,"published":1,"flags":48,"usePreview":0,"tags":["light","relativity","bending","blackholes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n    fragColor /= fragColor.a;\n   // fragColor = vec4(fragColor.a);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//seed for random algorithm\nvec2 seed = vec2(0.0);\n//global uv coordinate\nvec2 uv;\n\n//helper for RNG\n#define uv2 uv+vec2(72.12, -12.423457)*mod(seed.y, 23.12639)\nconst float maxDist = 30.0;\n//mmmhh PIE\nconst float PI = 3.14159265359;\n//width of the camera plane\nconst float camSize = 0.1;\n//ray struct\nstruct Ray\n{\n    vec3 o;\n    vec3 d;\n};\n\n\n//init is called at the start (after uv was set)\nvoid init()\n{\n    seed.x = (uv.y + iTime * 0.523413187) * sqrt(uv.x * 0.77777777 * iTime);\n    seed.y = iTime;\n}\n//custom random function\nfloat rand() \n{ \n    vec2 s = uv2;\n    float n = fract(sin(seed.x+=1.0)*43758.5453123);\n    return fract(n + fract(sin(dot(vec2(n * s.y, s.x)*0.123,vec2(12.9898,78.233))) * 43758.5453));\n}\n//returns a random direction vector inside the hemisphere of the given normal\nvec3 rndDirHemisphere(vec3 n)\n{\n    float r2 = rand();\n    float phi = 2.0*PI*rand();\n    float sina = sqrt(r2);\n    float cosa = sqrt(1. - r2);\n    vec3 w = normalize(n), u = normalize(cross(w.yzx, w)), v = cross(w, u);\n\treturn (u*cos(phi) + v*sin(phi)) * sina + w * cosa;\n}\n//returns a random direction vector inside the hemisphere of the given normal mixed with the given normal by a factor\nvec3 weightedRndDirHemisphere(vec3 n, float randomness)\n{\n    return mix(n, rndDirHemisphere(n), randomness);\n}\n//creates a view\nRay makeView(vec3 p, vec3 up, vec3 tgt)\n{\n    float f = iResolution.x / iResolution.y;\n    vec3 dir = normalize(tgt - p);\n    up = normalize(up);\n    vec3 right = cross(dir, up);\n    Ray res;\n    vec3 uv3 = right * (uv.x - 0.5) * f + up * (uv.y - 0.5);\n    res.o = (p + uv3) * camSize;\n    res.d = normalize(dir + uv3 * 1.3);\n    //res.d = normalize(weightedRndDirHemisphere(res.d, rayJitter * sqrt(iResolution.x)));\n    return res;\n}\n\n\n//movement speed\n\nint kA=65,kB=66,kC=67,kD=68,kE=69,kF=70,kG=71,kH=72,kI=73,kJ=74,kK=75,kL=76,kM=77,kN=78,kO=79,kP=80,kQ=81,kR=82,kS=83,kT=84,kU=85,kV=86,kW=87,kX=88,kY=89,kZ=90;\nint k0=48,k1=49,k2=50,k3=51,k4=52,k5=53,k6=54,k7=55,k8=56,k9=57;\nint kSpace=32,kLeft=37,kUp=38,kRight=39,kDown=40,kCtrl=17;\nfloat ReadKeyFloat(int key)\n{\n\tfloat keyVal = texture( iChannel0, vec2( (float(key)+.5)/256.0, .25 ) ).x;\n\treturn keyVal;\n}\nvec4 readData(int x, int y)\n{\n    return texture(iChannel1, (vec2(x,y) + vec2(0.5)) / iResolution.xy);\n}\nbool checkPos(int x, int y, vec2 fc)\n{\n    return int(fc.x) == x && int(fc.y) == y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float speed = readData(0,6).r;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 self = texture(iChannel1, uv);\n    self.a = 0.0;\n\tif(iFrame < 5)\n    {\n        if(checkPos(0,0,fragCoord))\n    \t{\n            //set your initial position\n        \tself = vec4(0.0, 0.0, 20.0, 0.0);\n        }\n        else if(checkPos(0,2,fragCoord))\n    \t{\n            self.rg = vec2(0.0);\n            self.a = 1.0;\n        }\n        else if(checkPos(0,3,fragCoord))\n    \t{\n            self.rg = iResolution.xy * 0.5;\n            self.a = 1.0;\n        }\n        else if(checkPos(0,4,fragCoord))\n    \t{\n            self.r = 1.0;\n        }\n        else if(checkPos(0,1, fragCoord))\n        {\n            //and direction here\n            self = vec4(0.0, 0.0 ,-1.0, 1.0);\n        }\n        else if(checkPos(0,6,fragCoord)) // speed\n        {\n            self.r = 0.1;\n        }\n    }\n\n    //Position with WASD, space and ctrl\n    if(checkPos(0,0,fragCoord))\n    {\n        \n        vec3 fw = readData(0, 1).rgb;\n        if(ReadKeyFloat(kW) > 0.0)\n        {\n            self += vec4(fw * speed, 1.0);\n        }\n        if(ReadKeyFloat(kS) > 0.0)\n        {\n            self -= vec4(fw * speed, -1.0);\n        }\n        if(ReadKeyFloat(kA) > 0.0)\n        {\n            vec3 right = cross(fw, vec3(0.0, 1.0, 0.0));\n            self -= vec4(right * speed, -1.0);\n        }\n        if(ReadKeyFloat(kD) > 0.0)\n        {\n            vec3 right = cross(fw, vec3(0.0, 1.0, 0.0));\n            self += vec4(right * speed, 1.0);\n        }\n        if(ReadKeyFloat(kSpace) > 0.0)\n        {\n            vec3 right = cross(fw, vec3(0.0, 1.0, 0.0));\n            vec3 up = cross(fw, -right);\n            self += vec4(up * speed, 1.0);\n        }\n        if(ReadKeyFloat(kCtrl) > 0.0)\n        {\n            vec3 right = cross(fw, vec3(0.0, 1.0, 0.0));\n            vec3 up = cross(fw, -right);\n            self -= vec4(up * speed, -1.0);\n        }\n    }\n    //Direction by mouse\n    else if(checkPos(0,1,fragCoord))\n    {\n        vec3 lmp = readData(0, 2).xyw;\n        if(lmp.z > 0.0)\n        {\n            \n            float x = (lmp.x / iResolution.x) * PI * 2.0 * 2.0;\n            float y = (lmp.y / iResolution.y) * PI;\n            float upDown = -cos(y);\n            vec3 d = vec3(cos(x), upDown * 2.0, sin(x));\n            self = vec4(normalize(d), 1.0);\n        }\n        else\n        {\n            self.a = 0.0;\n        }\n    } \n    //mouse loca\n    else if(checkPos(0,2,fragCoord))\n    {\n        vec4 lmp = readData(0, 3).xyzw;\n        if(lmp.w > 0.0)\n        {\n            if(lmp.z <= 0.0)\n                lmp.xy = iMouse.xy;\n            self.xy += vec2(iMouse.x - lmp.x ,iMouse.y - lmp.y);\n            self.y = clamp(self.y, 0.0, iResolution.y);\n            self.a = 1.0;\n        }\n        else\n        {\n            self.a = 0.0;\n        }\n    }   \n    //last mouse pos\n    else if(checkPos(0,3,fragCoord))\n    {\n        if(iMouse.z > 0.0)\n        {\n            self = vec4(iMouse.x,iMouse.y, 1.0, 1.0);\n        }\n        else\n        {\n            self.a = 0.0;\n        }\n    }   \n    else if(checkPos(0,4,fragCoord))\n    {\n    }   //reset\n    else if(checkPos(0,5,fragCoord))\n    {\n        self.r = readData(0,0).a + readData(0,1).a;\n    } \n    else if(checkPos(0,6,fragCoord)) // speed\n    {\n        if(self.g <= 0.0)\n        {\n            if(ReadKeyFloat(kE) > 0.0)\n            {\n                self.r = min(50.0, self.r * 2.0);\n                self.g = 1.0;\n            }\n            if(ReadKeyFloat(kQ) > 0.0)\n            {\n                self.r = max(0.005, self.r / 2.0);\n                self.g = 1.0;\n            }\n        }\n        else\n        {\n            self.g -= 0.1;\n        }\n    }\n    else\n    {\n        uv = fragCoord.xy / iResolution.xy;\n        init();\n        vec4 pos = readData(0,0);\n        vec4 fw = readData(0,1);\n        vec4 cp = texture(iChannel2, uv);\n        bool reset = pos.a > 0.0 || fw.a > 0.0 || readData(0, 5).r > 0.0 || iFrame < 1 ;\n        /*if(reset)\n        {\n            self = vec4(seed,0.0, 1.0);\n\n        }\n        else*/\n        {\n            self = vec4(cp.xyz, 0.0);\n        }\n    }\n    fragColor = self;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Created by pixartist (pixartist dot de at gmail dot com)\n//Feel free to use this as long as you credit me\n\n\n//seed for random algorithm\nvec2 seed = vec2(0.0);\n//global uv coordinate\nvec2 uv;\n\n//helper for RNG\n#define uv2 uv+vec2(72.12, -12.423457)*mod(seed.y, 23.12639)\n\n//mmmhh PIE\nconst float PI = 3.14159265359;\n\n\n//#define HIGH_QUALITY_NOISE 1\n\n\nconst float photonMass =0.1;\n//minimum distance for the tracer to step out. Lower value = finder details\nconst float minDist = 0.005;\n//width of the camera plane\nconst float camSize = 0.1;\n//iterator steps of the tracer\nconst int steps = 250;\n//\nconst float rayJitter = 0.000015 ;\n//\nconst float rayMarcherStepLengthFactor =0.25;\n\n//ray struct\nstruct Ray\n{\n    vec3 o;\n    vec3 d;\n};\n\n\n//reads data from input buffer (for controls)\nvec4 readData(int x, int y)\n{\n    return texture(iChannel3, (vec2(x,y) + vec2(0.5)) / iResolution.xy);\n}\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat noise3d(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n//custom random function\nfloat rand() \n{ \n    vec2 s = uv2;\n    float n = fract(sin(seed.x+=1.0)*43758.5453123);\n    return fract(n + fract(sin(dot(vec2(n * s.y, s.x)*0.123,vec2(12.9898,78.233))) * 43758.5453));\n}\n//returns a random direction vector inside the hemisphere of the given normal\nvec3 rndDirHemisphere(vec3 n)\n{\n    float r2 = rand();\n    float phi = 2.0*PI*rand();\n    float sina = sqrt(r2);\n    float cosa = sqrt(1. - r2);\n    vec3 w = normalize(n), u = normalize(cross(w.yzx, w)), v = cross(w, u);\n\treturn (u*cos(phi) + v*sin(phi)) * sina + w * cosa;\n}\n//returns a random direction vector inside the hemisphere of the given normal mixed with the given normal by a factor\nvec3 weightedRndDirHemisphere(vec3 n, float randomness)\n{\n    return mix(n, rndDirHemisphere(n), randomness);\n}\n//creates a view\nRay makeView(vec3 p, vec3 up, vec3 tgt)\n{\n    float f = iResolution.x / iResolution.y;\n    vec3 dir = normalize(tgt - p);\n    up = normalize(up);\n    vec3 right = cross(dir, up);\n    Ray res;\n    vec3 uv3 = right * (uv.x - 0.5) * f + up * (uv.y - 0.5);\n    res.o = (p + uv3) * camSize;\n    res.d = normalize(dir + uv3 * 1.3);\n   // res.d = normalize(weightedRndDirHemisphere(res.d, rayJitter * sqrt(iResolution.x)));\n    return res;\n}\n\n//init is called at the start (after uv was set)\nvoid init()\n{\n    seed.x = (uv.y + iTime * 0.523413187) * sqrt(uv.x * 0.77777777 * iTime);\n    seed.y = iTime;\n}\nvec3 inv(vec3 v)\n{\n    float l = length(v);\n    return v / (l*l*l);\n}\nvec3 map(vec3 p)\n{\n    vec3 v = inv(-p) + inv(vec3(4.0 * cos(iTime*0.3), 0.0, 4.0 * sin(iTime*0.3)) - p);\n    \n    \n    return v;\n}\n\n\nvec2 trace(inout Ray r)\n{\n    float totalForce = 0.0;\n    float totalGD = 0.0;\n    float fd;\n    for(int i = 0; i < steps; i++)\n    {\n        vec3 res = map(r.o);\n        float force = length(res);\n        \n        if(i > 0)\n            totalGD += force - fd;\n        fd = force;\n        totalForce += force / float(steps);\n        float dt = rayMarcherStepLengthFactor / (1.0 + force);\n        float integral = (photonMass * rayMarcherStepLengthFactor) / (2.0 );\n        r.d = normalize(r.d + integral * res );\n        r.o += dt * r.d;\n    }\n    return vec2(totalGD, totalForce);\n}\nfloat dl(float v, float d, float s)\n{\n    float delta = abs(v-d);\n    return smoothstep(1.-s, 1.0, 1.-delta);\n}\nvec4 getColor(Ray ray)\n{\n    float n1 = noise3d(normalize(ray.d) * 100.0);\n    float n3 = noise3d(normalize(ray.d) * 512.0);\n    float n2 = noise3d(normalize(ray.o) * 3.0);\n    vec3 col = vec3(dl(n1, 1.0, 0.15));\n    float clouds = pow(dl(n2, 1.0, 1.), 2.0);\n    col += vec3(clouds * 0.4, clouds * 0.6, clouds * 0.8) + smoothstep(0.4, 0.9, clouds) * 0.2;\n    col += vec3(n3) * 0.2 * (0.5 + 0.5 * n2);\n    //return vec4(col,1.0);\n    return texture(iChannel0, ray.d * vec3(1,-1,1));\n}\n//main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = fragCoord.xy / iResolution.xy;\n\tinit();\n    vec4 pos = texture(iChannel3, uv);\n    bool reset = true;\n    Ray ray;\n    if(reset)\n    {\n        seed = pos.xy;\n        \n        pos = readData(0,0);\n    \tvec4 fw = readData(0,1);\n        vec3 up = cross(fw.xyz, -cross(fw.xyz, vec3(0.0, 1.0, 0.0)));\n        ray = makeView(\n            pos.xyz,\n            up,\n            pos.xyz + fw.xyz\n        );\n    }\n    else\n    {\n        \n        ray.o = pos.rgb;\n        ray.d = texture(iChannel1, uv).rgb;\n    }\n    vec2 f = trace(ray);\n\n    fragColor = getColor(ray);\n    float ft = 1.0 / (1.0 + f.y);\n    fragColor.rgb *= ft;\n\n}","name":"Buffer B","description":"","type":"buffer"}]}