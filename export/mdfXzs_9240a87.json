{"ver":"0.1","info":{"id":"mdfXzs","date":"1671386459","viewed":66,"name":"Fast diffraction approximation","username":"narain","description":"Based on @dpiponi's diffraction experiment: https://www.shadertoy.com/view/DdlSzr\n\nI approximate ∫ exp(i ω f(z)) dz by the sum ∑ exp(i ω f(z*))/√|f''(z*)| over the critical points, f'(z*) = 0. Hold the mouse down for the original integral.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["optics","diffraction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float frequency = 1000.0;\n\nfloat smallStep = 0.001;\nfloat largeStep = 0.01;\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+10.0)*x);\n}\n\nfloat permute(float x) {\n     return mod289(((x*34.0)+10.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n  return p;\n  }\n\t\t\t\t\t\t\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat snoise(vec4 v)\n  {\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                       -0.447213595499958); // -1 + 4 * G4\n\n// First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n// Permutations\n  i = mod289(i); \n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n  }\n\nfloat phase(in vec3 v) {\n    return frequency * snoise(vec4(v, 0.1*iTime));\n}\n\nfloat window(in float z) {\n    float s = sin(3.14159*z);\n    return s*s;\n}\n\nvoid findStationary(in vec4 theta, out int n_st, out vec2 z_st, out vec2 theta_st, out vec2 d2theta_st) {\n    // find stationary points of piecewise cubic interpolant\n    // assuming values are given at z = -1, 0, 1, 2\n    float d = theta[2] - theta[1];\n    float d0 = 0.5*(theta[2] - theta[0]);\n    float d1 = 0.5*(theta[3] - theta[1]);\n    float disc = 9.0*d*d + d0*d0 + d0*d1 + d1*d1 - 6.0*d*(d0 + d1);\n    n_st = 0;\n    if (disc >= 0.0) {\n        vec2 z;\n        float b = 2.0*d0 + d1 - 3.0*d;\n        if (b >= 0.0) {\n            z[0] = (-b - sqrt(disc))/(6.0*d - 3.0*(d0 + d1));\n            z[1] = d0/(b + sqrt(disc));\n        } else {\n            z[0] = d0/(b - sqrt(disc));\n            z[1] = (-b + sqrt(disc))/(6.0*d - 3.0*(d0 + d1));\n        }\n        float a0 = theta[2] + theta[0] - 2.0*theta[1];\n        float a1 = theta[3] + theta[1] - 2.0*theta[2];\n        for (int j = 0; j < 2; j++) {\n            if (z[j] >= 0.0 && z[j] < 1.0) {\n                z_st[n_st] = z[j];\n                theta_st[n_st] = theta[1] + z[j]*(d0 + z[j]*(-b + z[j]*(d0 + d1 - 2.0*d)));\n                // d2theta_st[n_st] = (j==0?1.0:-1.0)*2.0*sqrt(disc);\n                d2theta_st[n_st] = (1.0-z[j])*a0 + z[j]*a1;\n                n_st++;\n            }\n        }\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    float res = sqrt(iResolution.x*iResolution.y);\n    float x = fragCoord.x/res;\n    float y = fragCoord.y/res;\n\n    float c = 0.0, s = 0.0, i = 0.0;\n    \n    if (iMouse.z > 0.0) {\n    \n        for (float z = 0.0; z < 1.0; z += smallStep) {\n            float theta = phase(vec3(x, y, z));\n            c += window(z)*cos(theta)*smallStep;\n            s += window(z)*sin(theta)*smallStep;\n        }\n        \n    } else {\n\n        vec4 theta = vec4(\n            phase(vec3(x, y, 0.0 - largeStep)),\n            phase(vec3(x, y, 0.0)),\n            phase(vec3(x, y, 0.0 + largeStep)),\n            0\n        );\n        for (float z = 0.0; z < 1.0; z += largeStep) {\n            theta.w = phase(vec3(x, y, z + 2.0*largeStep));\n            int n_st;\n            vec2 z_st, theta_st, d2theta_st;\n            findStationary(theta, n_st, z_st, theta_st, d2theta_st);\n            z_st = z + largeStep*z_st;\n            d2theta_st *= 1.0/(largeStep*largeStep);\n            for (int j = 0; j < n_st; j++) {\n                float a = 1.0/sqrt(abs(d2theta_st[j]));\n                c += 2.5*window(z_st[j])*a*cos(theta_st[j]);\n                s += 2.5*window(z_st[j])*a*sin(theta_st[j]);\n                i += 1.25*window(z_st[j])*a;\n            }\n            theta.xyz = theta.yzw;\n        }\n\n    }\n    \n    i = sqrt(c*c + s*s);\n    i *= 0.5*sqrt(frequency);\n    vec3 col = vec3(1.0,1.0,1.0) * i;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}