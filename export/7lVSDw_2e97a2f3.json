{"ver":"0.1","info":{"id":"7lVSDw","date":"1640835428","viewed":452,"name":"Cyber Punk","username":"jianinz","description":"Combination of glitches, namely: wave tile, image block, scanline jitter, analog noise, screen jump, tile. Credits to https://github.com/QianMo/X-PostProcessing-Library","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["glitch","cyberpunk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2013 Jianing Zhang\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define NOISE 0.00346020761245674740484429065744f\n#define FREQUENCY 10.3\n#define RGBSPLIT 37.8\n#define JUMPINDENSITY 0.15\n#define SPLITTINGNUMBER 14.0\n#define JITTERAMOUNT 9.7\n#define JITTERSPEED 0.15\n#define BLOCKSIZE 10.0\n#define MAXRGBSPLITX 1.0\n#define MAXRGBSPLITY 1.0\n#define FADING 2.0\n#define LUMINANCEJITTERTHREASHOLD 0.895\n#define NOISESPEED 0.102\n#define SCANLINEJITTERAMOUNT 3.45\n#define WAVEJITTERAMOUNT 1.0\n#define WAVESPEED 10.32\n\nvec3 taylorInvSqrt(vec3 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nvec2 mod289(vec2 x)\n{\n\treturn x - floor(x * NOISE) * 289.0;\n}\n\nvec3 mod289(vec3 x)\n{\n\treturn x - floor(x * NOISE) * 289.0;\n}\n\nvec3 permute(vec3 x)\n{\n\treturn mod289(x * x * 34.0 + x);\n}\n\nfloat randomNoise(vec2 seed)\n{\n\treturn fract(sin(dot(seed * floor(iTime * 30.0), vec2(17.13, 3.71))) * 43758.5453123);\n}\n\nfloat randomNoise(float seed)\n{\n\treturn randomNoise(vec2(seed, 1.0));\n}\n\n    \nfloat randomNoise(float x, float y)\n{\n\treturn fract(sin(dot(vec2(x, y), vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat snoise(vec2 v)\n{\n\tconst vec4 C = vec4(0.211324865405187, 0.366025403784439, - 0.577350269189626, 0.024390243902439);\n\tvec2 i = floor(v + dot(v, C.yy));\n\tvec2 x0 = v - i + dot(i, C.xx);\n\t\n\tvec2 i1;\n\ti1.x = step(x0.y, x0.x);\n\ti1.y = 1.0 - i1.x;\n\tvec2 x1 = x0 + C.xx - i1;\n\tvec2 x2 = x0 + C.zz;\n\t\n\ti = mod289(i);\n\tvec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0))\n\t+ i.x + vec3(0.0, i1.x, 1.0));\n\t\n\tvec3 m = max(0.5 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2)), 0.0);\n\tm = m * m;\n\tm = m * m;\n\t\n\tvec3 x = 2.0 * fract(p * C.www) - 1.0;\n\tvec3 h = abs(x) - 0.5;\n\tvec3 ox = floor(x + 0.5);\n\tvec3 a0 = x - ox;\n\t\n\tm *= taylorInvSqrt(a0 * a0 + h * h);\n\t\n\tvec3 g;\n\tg.x = a0.x * x0.x + h.x * x0.y;\n\tg.y = a0.y * x1.x + h.y * x1.y;\n\tg.z = a0.z * x2.x + h.z * x2.y;\n\treturn 130.0 * dot(m, g);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float strength = 0.5 + 0.5 *cos(iTime * FREQUENCY);\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Screen jump\n    float _JumpTime = iTime * JUMPINDENSITY * 5.8;\n    float hJump = mix(uv.x, fract(uv.x + _JumpTime), JUMPINDENSITY);    \n    //float vJump = mix(uv.y, fract(uv.y + _JumpTime), JUMPINDENSITY);\n    \n    // Tile Jitter\n\tfloat pixelSizeX = 1.0 / iResolution.x;\n\n\tif (mod(uv.y * SPLITTINGNUMBER, 2.0) < 1.0)\n\t{\n        uv.x += pixelSizeX * cos(iTime * JITTERSPEED) * JITTERAMOUNT * strength;\n\t}\n    \n    // Image Block\n    float block = randomNoise(floor(uv * BLOCKSIZE));\n\n\tfloat displaceNoise = pow(block, 8.0) * pow(block, 3.0);\n\tfloat splitRGBNoise = pow(randomNoise(7.2341), 17.0);\n\tfloat offsetX = displaceNoise - splitRGBNoise * MAXRGBSPLITX;\n\tfloat offsetY = displaceNoise - splitRGBNoise * MAXRGBSPLITY;\n\n\tfloat noiseX = 0.05 * randomNoise(13.0);\n\tfloat noiseY = 0.05 * randomNoise(7.0);\n\tvec2 offset = vec2(offsetX * noiseX, offsetY* noiseY);\n\n\tvec4 iColorR = texture(iChannel0, uv);\n\tvec4 iColorG = texture(iChannel0, uv + offset);\n\tvec4 iColorB = texture(iChannel0, uv - offset);\n    \n    // Wave Jitter\n    float noise_wave_1 = snoise(vec2(uv.y, iTime * WAVESPEED * 20.0)) * (strength * WAVEJITTERAMOUNT * 32.0);\n    float noise_wave_2 = snoise(vec2(uv.y, iTime * WAVESPEED * 10.0)) * (strength * WAVEJITTERAMOUNT * 4.0);\n\tfloat noise_wave_x = noise_wave_1 * noise_wave_2 / iResolution.x;\n\tfloat uv_x = uv.x + noise_wave_x;\n    float rgbSplit_uv_x = (RGBSPLIT * 50.0 + (20.0 * strength + 1.0)) * noise_wave_x / iResolution.x;;\n    \n    // Scanline Jitter\n\tfloat jitter = randomNoise(uv.y, iTimeDelta) * 2.0 - 1.0;\n    float threshold = clamp(1.0f - JUMPINDENSITY * 1.2f, 0.0, 1.0);\n\tjitter *= step(threshold, abs(jitter)) * SCANLINEJITTERAMOUNT * strength;\t\n    \n    // Analog Noise\n    vec4 sceneColor = texture(iChannel0, uv);\n    vec4 noiseColor = sceneColor;\n\n    float luminance = dot(noiseColor.rgb, vec3(0.22, 0.707, 0.071));\n    if (randomNoise(vec2(iTimeDelta * NOISESPEED, iTimeDelta * NOISESPEED)) > LUMINANCEJITTERTHREASHOLD)\n\t{\n\t\tnoiseColor = vec4(luminance, luminance, luminance, luminance);\n\t}\n\n\tfloat aNoiseX = randomNoise(iTimeDelta * NOISESPEED + uv / vec2(-213, 5.53));\n\tfloat aNoiseY = randomNoise(iTimeDelta * NOISESPEED - uv / vec2(213, -5.53));\n\tfloat aNoiseZ = randomNoise(iTimeDelta * NOISESPEED + uv / vec2(213, 5.53));\n\n\tnoiseColor.rgb += 0.25 * vec3(aNoiseX,aNoiseY,aNoiseZ) - 0.125;\n    \n    \n    // Mixing\n    vec4 originalColor = texture(iChannel0, uv);\n    vec4 colorG = texture(iChannel0, vec2(uv_x, uv.y));\n    vec4 colorRB = texture(iChannel0, vec2(uv_x + rgbSplit_uv_x, uv.y));\n    vec4 jumpColor = texture(iChannel0, fract(vec2(uv.x, hJump)));\n    vec4 waveColor = vec4(colorRB.r, colorG.g, colorRB.b, colorRB.a + colorG.a);\n    vec4 jumpWaveMix = mix(jumpColor, waveColor, jumpColor.a);\n    vec4 imageBlockColor = vec4(iColorR.r , iColorG.g, iColorB.z, (iColorR.a + iColorG.a + iColorB.a));\n    vec4 tileColor = mix(originalColor, jumpWaveMix, originalColor.a);\n    vec4 scanlineJitterColor = texture(iChannel0, fract(uv + vec2(jitter, 0)));\n    vec4 imageBlockTileMix = mix(imageBlockColor, tileColor, imageBlockColor.a);\n    vec4 analogNoiseColor = mix(sceneColor, noiseColor, FADING);\n    vec4 scanlineImageBlockTileMix = mix(scanlineJitterColor, imageBlockTileMix, scanlineJitterColor.a);\n    \n    \n    // Output to screen\n    fragColor = mix(analogNoiseColor, scanlineImageBlockTileMix, analogNoiseColor.a);\n}","name":"Image","description":"","type":"image"}]}