{"ver":"0.1","info":{"id":"fsjSW3","date":"1621161366","viewed":96,"name":"Electrostaticisty","username":"Hyeve","description":"Something something something made some cubes and it turned into this","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","glitch","static"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nvec3 fk(vec3 p)\n{\n    vec3 q = abs(p * 38.987);\n    float d = length(q - p);\n    return fract(p + q * d);\n}\n\nfloat bx(vec3 p, vec3 s)\n{\n    vec3 q = abs(p) - s;\n    return max(q.x,max(q.y,q.z)) + fk(s).y;\n}\n\nvec2 mp(vec3 p)\n{\n    vec3 op = p;\n    p.xz *= rot(iTime/4.);\n    p.yz *= rot(iTime/4.);\n    p.y = mod(p.y,3.4) - 1.7;\n    p.xz = mod(p.xz,3.4) - 1.7;\n    float bxs = bx(p,vec3(1.5));\n    float cont = bx(op,vec3(6.5));\n    float inf = max(cont,bxs);\n    float wrp = (sin(iTime/3.)*0.5+0.8)*0.2;\n    inf -= pow(abs((inf - length(op)) * wrp), 6.);\n    return vec2(inf,1.);\n}\n\nvec2 tr(vec3 ro,vec3 rd)\n{\n    vec2 d=vec2(0);\n    for(int i=0; i<128;i++)\n    {\n        vec3 p = ro+rd*d.x;\n        vec2 s = mp(p);\n        d.x+=s.x;d.y=s.y;\n        if(d.x>64.||s.x<0.01)break;\n    }    \n    if(d.x>64.)d.y=0.;\n    return d;\n}\n\nvec3 norm(vec3 p)\n{\n    vec2 e=vec2(0.001,0);\n    return normalize(mp(p).x - vec3(mp(p - e.xyy).x,mp(p - e.yxy).x,mp(p - e.yyx).x));\n}\n\nvec3 lit(vec3 p, vec3 rd, vec3 n, vec2 uv)\n{\n     vec3 al = vec3(tan(iTime/3.));\n     float diffs = dot(n,-rd);\n     float diff=max(0.,diffs) - sin(fk(p).x) * 0.1;\n     float fres=pow(1. - abs(diffs), 4.);\n     float spec = pow(abs(dot(reflect(rd,n),-rd)),40.);\n     return al*diff + vec3(uv.x,uv.y, sin(uv.x*uv.y)*0.5+0.5) * (spec + fres);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    uv *= rot(iTime/2.);\n\n    // Time varying pixel color\n    vec3 col = vec3(1. - tan(iTime/3.));\n\n    float mv = (sin(iTime/3.)*0.5+0.8)*10.;\n\n    vec3 ro=vec3(0,0,-20. - mv);\n   \n    vec3 rd=normalize(vec3(uv.x,uv.y,1.));    \n    \n    vec2 s=tr(ro,rd);\n    vec3 p=ro+rd*s.x;\n    \n    if(s.y>0.)\n    {\n        vec3 n=norm(p);\n        col = lit(p,rd,n,uv);\n        vec3 refld = reflect(rd,n);\n        vec2 refl = tr(p + n*0.1, refld);    \n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}