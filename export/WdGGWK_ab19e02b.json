{"ver":"0.1","info":{"id":"WdGGWK","date":"1570903104","viewed":204,"name":"ShaderTober - Swing","username":"Flopine","description":"A small doodle with inktober's theme \"Swing\"","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n#define PI 3.141592\n\nmat2 rot(float a)\n{return mat2 (cos(a),sin(a),-sin(a),cos(a));}\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r,abs(p.z)-h);}\n\nfloat ring (vec3 p, float r, float w)\n{return max(abs(cyl(p, r,1.))-w,abs(p.z)-0.08);}\n\nfloat SDF (vec3 p)\n{\n    float r = 5.;\n    float w = 0.01;\n    float d = 1e10;\n\tfor (int i = 0; i<=6; i++)\n    {\n        float ratio = float(i)/5.;\n        r-=ratio;\n        w += ratio*0.1;\n        p.xz *= rot(iTime*0.5);\n        p.yz *= rot(iTime*0.2);\n        d = min(d, ring (p,r,w));\n    }  \n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.*(fragCoord/iResolution.xy)-1.;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0.001,0.001,-6.),\n        rd = normalize(vec3(uv,1.)),\n        col = vec3(0.),\n        p = ro;\n    \n    float shad = 0.;\n    bool hit = false;\n    \n    for (float i = 0.; i<64.; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            shad = i/64.;\n            hit = true;\n            break;\n        }\n        \n        p+=d*rd;\n    }\n    \n    if (hit)\n    {\n        col = vec3(1.-shad);\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}