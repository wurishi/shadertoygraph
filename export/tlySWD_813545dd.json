{"ver":"0.1","info":{"id":"tlySWD","date":"1582718323","viewed":299,"name":"Function plot for learning","username":"jaszunio15","description":"My function plotting shader for learning purposes.\nGreen lines - visible values,\nRed lines - not visible values,\nJust play with function() and uv scaling :)\n\nShader License: CC BY 3.0\nAuthor: Jan Mróz (jaszunio15)","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["learning","function","plot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Shader License: CC BY 3.0\n//Author: Jan Mróz (jaszunio15)\n\n// Function to plot\nfloat function(float x)\n{\n    return sin(x * 9.5) + x * 0.2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.x;\n    \n    // Coordinate system scale and offset\n    uv *= 5.0;\n    uv += vec2(0.0, 0.0);\n    \n    // Plot\n    fragColor = plot(uv, function(uv.x));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define LINE_SIZE 2.0\n#define GRID_SIZE 2.0\n\nfloat triangleWave(float x)\n{\n \tx = abs(x * 2.0);\n    if (int(x) % 2 == 0) return 1.0 - fract(x);\n    else return fract(x);\n}\n\nfloat grid(vec2 uv)\n{\n    uv += 0.5;\n \tfloat height = fwidth(uv.y);\n    float width = fwidth(uv.x);\n    \n    float vertical = 1.0 - smoothstep(0.0, width * GRID_SIZE, triangleWave(uv.x));\n    float horizontal = 1.0 - smoothstep(0.0, height * GRID_SIZE, triangleWave(uv.y));\n    \n    return horizontal + vertical;\n}\n\nvec4 plot(vec2 uv, float value)\n{\t\n    float pixelSize = abs(dFdy(uv.y));\n    \n    float clampValue = clamp(value, 0.0, 1.0);\n    float clampDerivative = abs(dFdx(clampValue));\n    float clampLine = smoothstep(clampDerivative * LINE_SIZE + pixelSize * LINE_SIZE, 0.0, abs(uv.y - clampValue));\n    \n    float derivative = abs(dFdx(value));\n    float line = smoothstep(derivative * LINE_SIZE + pixelSize * LINE_SIZE, 0.0, abs(uv.y - value));\n    \n    vec4 result = mix(vec4(clamp(value, 0.0, 1.0)), vec4(0.5), grid(uv));\n    result = mix(result, vec4(0.8, 0.0, 0.0, 1.0), line);\n    result = mix(result, vec4(0.0, 0.8, 0.0, 1.0), clampLine);\n    \n    return result;\n}","name":"Common","description":"","type":"common"}]}