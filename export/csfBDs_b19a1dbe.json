{"ver":"0.1","info":{"id":"csfBDs","date":"1689275810","viewed":57,"name":"HomerDreams","username":"Raistlin_fuego","description":"xDD","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["torus3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MS 100\n#define MT 7.\n#define mD .001\n\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat add(float a, float b){\n    return a < b ? a : b;\n}\n\nmat2 Rot(float a){\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n\n}\n\nvec3 N13(float p){\n    float x = fract(cos(p*94.234)*2943.234);\n    float y = fract(cos(p*15.332)*534.254);\n    float z = fract(cos(p*42.332)*943.234);\n    return vec3(x, y, z);\n\n}\n\nfloat N31(vec3 p){\n    float x = fract(cos(length(p*10.23))*942.344);\n    return x;\n\n}\n\nvec4 GetDist(vec3 p){\n    vec3 pT = fract(p-(cos(p*10.+iTime)*.04)*(cos(p*20.+iTime)*.6))-.5;\n    vec3 idpT = floor(p);\n    float rP = N31(idpT);\n    float stop = 1.;\n    if(idpT.x == 0.) stop = 0.;\n    pT.yz *= Rot(iTime*rP*stop+30.);\n    float torus = sdTorus(pT, vec2(.15, .08));\n    \n   \n    return vec4(torus,N13(rP+floor(pT.y*2.+pT.x*20.*rP)));\n\n}\n\nvec4 Ray(vec3 ro, vec3 rd){\n    float dist = 0.;\n    vec3 col;\n    \n    for(int i = 0; i < MS; i++){\n        vec3 p = ro + rd * dist;\n        float d = GetDist(p).x;\n        dist += d;\n        if(dist > MT){\n            col = vec3(-1);\n            break;\n        }\n        \n        if(d < mD){\n            col = GetDist(p).yzw;\n            break;\n        }\n    }\n    return vec4(dist, col);\n\n}\n\nvec3 Normals(vec3 p){\n    vec2 d = vec2(mD, 0);\n    float x = (GetDist(p+d.xyy)-GetDist(p-d.xyy)).x;\n    float y = (GetDist(p+d.yxy)-GetDist(p-d.yxy)).x;\n    float z = (GetDist(p+d.yyx)-GetDist(p-d.yyx)).x;\n    return normalize(vec3(x,y,z));\n}\n\nfloat GetLight(vec3 p, vec3 light){\n    vec3 n = Normals(p);\n    vec3 l = normalize(light-p);\n    float diff = clamp(dot(n, l)*.5+.7, 0., 1.);\n    return diff;\n}\n\nvec3 GetRayDir(vec2 uv, vec3 ro, vec3 l, float z){\n\n    vec3 f = normalize(l-ro);\n    vec3 r = normalize(cross(vec3(0,1,0), f));\n    vec3 u = cross(f, r);\n    vec3 c = ro + f*z;\n    vec3 i = c + uv.x*r + uv.y*u;\n    return normalize(i-ro);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(.5, .5, iTime*.3);\n    vec3 rd = normalize(vec3(uv, 1));\n    vec3 light = vec3(0., 6, 0.);\n    \n    vec4 r = Ray(ro, rd);\n    vec3 p = ro+rd*r.x;\n    float l = GetLight(p, light);\n    col = l*r.yzw;\n    \n    if(r.y == -1.) col = vec3(cos(iTime*.1)*.5+.5, uv.x+1., uv.y+1.)*.4;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}