{"ver":"0.1","info":{"id":"WslfW7","date":"1588386172","viewed":301,"name":"Accurate one pixel line","username":"mastersun","description":"Nothing special, just a way to create accurate one pixel thickness line in pixel shader. :p","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 DrawLine(vec2 uv, float slope, vec3 color, float half_pixel)\n{\n    float isLine = 0.0;\n    if (slope <= 1.0)\n    {\n        isLine += 1.0 - step(half_pixel, abs(uv.y - slope * uv.x));\n    }\n    else\n    {\n        isLine += 1.0 - step(half_pixel, abs(uv.x - 1.0 / slope * uv.y));\n    }\n    \n    return isLine * color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float Aspect = iResolution.x / iResolution.y;\n    uv.x *= Aspect;\n    float half_pixel = 0.5/iResolution.y;\n    uv.xy += vec2(half_pixel, half_pixel);\n    float verticalLine = 0.0;\n    for (float i = 0.0; i < Aspect; i+=0.05)\n    {\n        verticalLine += 1.0 - step(half_pixel, abs(uv.x - i));\n    }\n    \n    \n\tvec3 finalColor = vec3(0.0);\n    finalColor += verticalLine * vec3(0.66);\n    finalColor += DrawLine(uv, 0.31, vec3(1.0, 0.0, 0.0), half_pixel);\n    finalColor += DrawLine(uv, 0.08, vec3(0.0, 1.0, 0.0), half_pixel);\n    finalColor += DrawLine(uv, 8.8, vec3(0.0, 0.0, 1.0), half_pixel);\n\n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}