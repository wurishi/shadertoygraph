{"ver":"0.1","info":{"id":"4XGSzz","date":"1719819003","viewed":61,"name":"Rooster'sHW1","username":"RoosterWho","description":"看不懂了但是运行了","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.shadertoy.com/view/XtGfzw\n\nfloat sdCircle( in vec2 p, in float r)\n{\n    return length(p) - r;\n}\n\nfloat sdSquare( in vec2 p, in float a)\n{\n    float max_p = max(abs(p.x),abs(p.y));\n    return max_p - a;\n}\n\nfloat sdCross( in vec2 p, in vec2 b, float r ) \n{\n    //p是输入的点，b是十字中心点，r是倒角\n    p = abs(p); p = (p.y>p.x) ? p.yx : p.xy;//放在第一象限并且x>y\n    \n    vec2  q = p - b;//q是b指向更改后的p的向量\n    float k = max(q.y,q.x);//获取较大的一个q的分量（是一个负值的话就是减得最小的）\n    vec2  w = (k>0.0) ? q : vec2(b.y-p.x,-k);//k用于计算是否在外面；如果在内部的话用vec2(b.y-p.x,-k)准备计算倒角\n    float d = length(max(w,0.0));//\n    return ((k>0.0)?d:-d) + r;\n}\n\nfloat rand(vec2 co, float scale) {\n    // 对输入坐标进行缩放\n    co *= scale;\n    // 生成伪随机数\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    float t=abs(sin(iTime));\n    float co = rand(uv, 1.0);\n    \n    vec3 col = vec3(smoothstep(-0.05, 0.05, sdCross(uv,vec2(0.3*t, 0.08), 0.03 * co)));\n    col -= (vec3(rand(uv,500.0)*10.*(0.05),rand(uv,500.0)*10.*(.33),rand(uv,500.0)*10.*(.76)))*(0.5 * (t * abs(cos(iTime))));\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}