{"ver":"0.1","info":{"id":"3tGXzd","date":"1583336697","viewed":91,"name":"\u0010Simple Raymarching Demo","username":"takumifukasawa","description":"demo for my blog entry:\nhttps://takumifukasawa.hatenablog.com/entry/context2d-cpu-raymarching","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","demo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define EPS .0001\n#define NORMAL_EPS .0001\n\nconst float stopThreshold = .0001;\n\nfloat scene(vec3 p) {\n    return length(p) - 1.;\n}\n\nmat3 camera(vec3 o, vec3 t) {\n\tvec3 forward = normalize(t - o);\n    vec3 right = cross(forward, vec3(0., 1., 0.));\n    vec3 up = cross(right, forward);\n    return mat3(right, up, forward);\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(NORMAL_EPS, 0);\n    return normalize(\n    \tvec3(\n            scene(p + e.xyy) - scene(p - e.xyy),\n            scene(p + e.yxy) - scene(p - e.yxy),\n            scene(p + e.yyx) - scene(p - e.yyx)\n        )\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = (fragCoord.xy - iResolution.xy * .5) / min(iResolution.x, iResolution.y);\n    \n    vec3 ro = vec3(\n    \tcos(iTime) * 5.,\n        0.,\n        sin(iTime) * 5.\n    );\n    vec3 target = vec3(0.);\n    float fov = 1.5;\n    \n    vec3 rd = camera(ro, target) * normalize(vec3(uv, fov));\n    \n    // raymarching\n    float depth = 0.;\n    float dist = 0.;\n    for(int i = 0; i < 64; i++) {\n    \tdist = scene(ro + rd * depth);\n        if(dist < stopThreshold) {\n            break;\n        }\n        depth += dist;\n    }\n    \n    // no hit\n    if(dist >= stopThreshold) {\n    \tfragColor = vec4(vec3(0.), 1.);\n        return;\n    }\n    \n    vec3 color = vec3(0.);\n   \n    vec3 position = ro + rd * depth;\n    vec3 normal = getNormal(position);\n    \n    // directional lighting\n    vec3 lightPos = vec3(-1., 1., 1.);\n    float lambert = max(0., dot(normal, normalize(lightPos)));\n\tcolor += lambert * vec3(1.);    \n    \n    // gamma\n    color = pow(clamp(color, 0., 1.), vec3(.4545));\n    \n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}