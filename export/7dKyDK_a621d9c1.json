{"ver":"0.1","info":{"id":"7dKyDK","date":"1656322072","viewed":107,"name":"time tables alal111","username":"alal111","description":"Trying","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["timetablescirclelines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n\nfloat circle(vec2 uv, vec2 pos, float r, bool outline){\n    float len = length(uv - pos) - r;\n    if(outline){\n        return (smoothstep(.01, .01+.01, abs(len))); \n    }\n    \n    return (smoothstep(.01, .01+.01, len)); \n    \n}\n\n//https://iquilezles.org/articles/distfunctions2d/\nfloat line( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return smoothstep(.0001, .0001+.01, length( pa - ba*h ));\n}\n\n\nvec3 axis(vec2 uv, float r, float size, vec3 color){\n    \n    float fullSize = r+.06;\n    \n   float axisXCord =  1. -(smoothstep(0.-size, 0.-size+.001, uv.x) - smoothstep(0., 0.+.001 , uv.x))\n       + smoothstep(fullSize, fullSize+.001, abs(uv.y));\n       \n       \n   float axisXArrow = 1. - (smoothstep(0.-size, 0.-size+.001, uv.x-uv.y+fullSize) - smoothstep(0., 0.+.001 , uv.x-uv.y+fullSize))\n   * 1. - (smoothstep(0.0+size, 0.0+size-.001, ( -uv.y-uv.x)+fullSize) - smoothstep(0.0, 0.0-.001 , ( -uv.y-uv.x)+fullSize))\n   + smoothstep(fullSize, fullSize+.001, abs(uv.y))\n   + 1. - smoothstep(fullSize, fullSize+.001, uv.y+.03)\n   ;\n    axisXCord *= axisXArrow;\n   return axisXCord+color;\n}\n\nvec3 createAxes(vec2 uv, float r, float outline){\n\n   float fullSize = r+.06;\n    \n   float axisXCord =  1. -(smoothstep(0.-outline/2., 0.-outline/2.+.001, uv.x) - smoothstep(0.+outline/2., 0.+outline/2.+.001 , uv.x))\n       + smoothstep(fullSize, fullSize+.001, abs(uv.y));\n       \n       \n   float axisXArrow = 1. - (smoothstep(0.-outline/2., 0.-outline/2.+.001, uv.x-uv.y+fullSize) - smoothstep(0.+outline/2., 0.+outline/2.+.001 , uv.x-uv.y+fullSize))\n   * 1. - (smoothstep(0.0+outline/2., 0.0+outline/2.-.001, ( -uv.y-uv.x)+fullSize) - smoothstep(0.0-outline/2., 0.0-outline/2.-.001 , ( -uv.y-uv.x)+fullSize))\n   + smoothstep(fullSize, fullSize+.001, abs(uv.y))\n   + 1. - smoothstep(fullSize, fullSize+.001, uv.y+.03);\n   \n    axisXCord *= axisXArrow;\n    \n    vec3 axisX = axisXCord + vec3(1., .0, .0);\n    \n    float axisYCord =  1. -(smoothstep(0.-outline/2., 0.-outline/2.+.001, uv.y) - smoothstep(0.+outline/2., 0.+outline/2.+.001 , uv.y))\n       + smoothstep(fullSize, fullSize+.001, abs(uv.x));\n       \n       \n   float axisYArrow = 1. - (smoothstep(0.-outline/2., 0.-outline/2.+.001, uv.y-uv.x+fullSize) - smoothstep(0.+outline/2., 0.+outline/2.+.001 , uv.y-uv.x+fullSize))\n   * 1. - (smoothstep(0.0+outline/2., 0.0+outline/2.-.001, ( -uv.y-uv.x)+fullSize) - smoothstep(0.0-outline/2., 0.0-outline/2.-.001 , ( -uv.y-uv.x)+fullSize))\n   + smoothstep(fullSize, fullSize+.001, abs(uv.x))\n   + 1. - smoothstep(fullSize, fullSize+.001, uv.x+.03)\n   ;\n    axisYCord *= axisYArrow;\n    \n    vec3 axisY = axisYCord + vec3(.0, 1.0, .0);\n    return axisX*axisY;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ((2.*fragCoord - iResolution.xy)/iResolution.y)*1.2;\n    int pointsNum = 100;\n    vec3 f = vec3(0);\n    float r = 1.;\n       float rPoint = r/115.;\n    float circle1 = circle(uv, vec2(0), r, true);\n    f += circle1;    \n    \n    vec3 axes = createAxes(uv, r, .01);\n    f *= axes;\n   \n    float sc = .0;\n    sc += iTime*.5;\n    for(int i = 0; i < pointsNum; i++){\n        vec2 pointCord = -vec2(cos(2.*PI*float(i)/float(pointsNum)),sin(2.*PI*float(i)/float(pointsNum)));\n        vec2 pointCord1 = -vec2(cos(2.*PI*float(i)*float(sc)/float(pointsNum)),sin(2.*PI*float(i)*float(sc)/float(pointsNum)));\n       float point = circle(uv, pointCord, .008, false);\n         \n        f *= point;\n        \n        float lineTo = line(uv, pointCord, pointCord1);\n        vec3 c = 0.6+0.6*cos(2.3*(float(i)/float(pointsNum)/3.+iTime/5.)+vec3(0,23,21));\n       \n   ;\n   c.x = c.y < .1 || c.z < .1 ? .1 : .0;\n   c.z *= .1;\n   c.y *= .3;\n        //c = clamp(c, vec3(.1, .1, .0), vec3(.2, .5, .0));\n        vec3 l = vec3(smoothstep(.3, .5+.001, lineTo))+c;\n        \n        f*=l;\n    }\n    \n    \n     fragColor = vec4(f,1.0);\n   \n        \n    // Output to screen\n    \n}","name":"Image","description":"","type":"image"}]}