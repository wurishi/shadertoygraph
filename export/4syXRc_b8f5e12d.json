{"ver":"0.1","info":{"id":"4syXRc","date":"1465588929","viewed":495,"name":"Phat Saw Pad","username":"cce","description":"For Graffathon.","likes":9,"published":1,"flags":8,"usePreview":0,"tags":["example"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"XsfGRr","channel":0}],"code":"#define PI 3.1415926536\n\nfloat pitch(float p) {\n\treturn pow(1.059460646483, p) * 440.0;\n}\n\n// This is the summation formula adapted from\n// https://en.wikipedia.org/wiki/Sawtooth_wave\nfloat saw(float phase) {\n    const int PARTIALS = 40;\n    float s = 0.0;\n    \n    for (int k=1; k < PARTIALS+1; k++) {\n        s += (sin(2.0*PI*float(k)*phase) / float(k));\n    }\n    \n    return (1.0/2.0) - (1.0/PI)*s - 0.5;\n}\n\nvec2 mainSound( in int samp,float t)\n{\n    float base = -24.0; // A2 is the root note\n    float s = 0.0;\n    // Semitone offsets of a A major 7 chord.\n    // Try also (0, 3, 7, 10) for a minor 7. \n    float semitones[4];\n    semitones[0] = 0.0;\n    semitones[1] = 4.0;\n    semitones[2] = 7.0;\n    semitones[3] = 9.0;\n    \n    // Loop through our four voices.\n    const int VOICES = 4;\n    for (int i=0;i<4;i++) {\n        float f = pitch(base + semitones[i]);\n        \n        // Add four slightly detuned sawtooth waves together.\n        const int UNISON = 4;\n        for (int u=0;u<UNISON;u++) {\n            float fu = float(u);\n            float new_f = f + fu*sin(fu);\n    \t\ts += saw(t * new_f) \n            //s += sin(2.0*PI* t * (f*2.0 + fu*sin(fu))) // of course sine waves can also be used\n                * (1.0/float(UNISON))\n                * (1.0/float(VOICES));\n        }\n    }\n    \n    // Finally, a super simple stereo movement effect.\n    // You should synthesize a stereo signal to get proper stereo sound, for example\n    // the saw function could return a vec2 and panorize the partials somehow.\n    return vec2(s, max(0.3, cos(t*0.2))*s);\n}\n","name":"Sound","description":"","type":"sound"}]}