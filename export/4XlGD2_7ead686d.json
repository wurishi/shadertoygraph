{"ver":"0.1","info":{"id":"4XlGD2","date":"1708553744","viewed":88,"name":"[Kiltun] Space Marines Logos 40K","username":"Kiltun","description":"Making every loyalist space marine legion logos from Warhammer 40k\nBecause i am using a lot of SVG data, compile time can be huge if you want to display every logos\nBy default there is a #define USING_PREVIEW, you can change that in \"Common\"","likes":5,"published":1,"flags":32,"usePreview":1,"tags":["sdf","40k","svg","spacemarine","warhammer","warhammer40k"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Logos are based on this image : https://bakadesign.dk/backoffice/wp-content/uploads/2017/12/loyalist-chapter-symbols.jpg\n// Colors are based on : https://woehammer.com/2022/01/20/space-mari\n\n// Heavy use of FabriceNeyret2 SVG viewer : https://www.shadertoy.com/view/ldXyRn\n// (I would have liked making sdf for each logo, but some of them really seemed to be a nightmare to make)\n\n// WARNING : Heavy use of SVG increase the compile time by a lot\n\n// TO CHANGE PARAMETERS : GO TO COMMON !!!\n\n\n// Globals\nfloat logoOutput=0.0f;\nvec3 Bkgr=vec3(0.);\nvec3 Frg=vec3(1.);\nvec2 BkrgUV=vec2(0.);\n\n\n//////// LEGION LOGOS FUNCTIONS =========================================================v\n// ULTRAMARINES.......................................\nvoid ultraFunc( in vec2 _bounceUv, in float _logoFlashTime)\n{\n    logoOutput = sdfUltra(_bounceUv);\n    logoOutput = pow(mix(0.001,0.03,_logoFlashTime)/smoothstep(0.,0.4,logoOutput),0.4); \n    Frg = vec3(1.) * logoOutput;\n    Frg = clamp(Frg,0.0,2.);\n    Bkgr = vec3(0.192,0.314,0.482);\n}\n\n// SPACEWOLF.......................................\nvoid spFunc( in vec2 _bounceUv, in float _logoFlashTime)\n{\n    logoOutput = SVG_SpaceWolf(_bounceUv)* 1./max(0.001,_logoFlashTime);\n    logoOutput = pow(mix(0.001,0.03,_logoFlashTime) / smoothstep(0.,1000.,logoOutput),0.4);\n    Frg = vec3(0.) * logoOutput;\n    Frg = clamp(Frg,0.0,2.);\n    Bkgr = BkrgUV.x >= BkrgUV.y ? vec3(0.337,0.427,0.478) : vec3(0.804,0.639,0.220); \n}\n\n// SALAMANDERS.......................................\nvoid salaFunc( in vec2 _bounceUv, in float _logoFlashTime)\n{\n    logoOutput = SVG_Salamanders(_bounceUv)* 1./max(0.001,_logoFlashTime);\n    logoOutput = pow(mix(0.001,0.03,_logoFlashTime) / smoothstep(0.,1000.,logoOutput),0.4);\n    Frg = vec3(1.) * logoOutput;\n    Frg = clamp(Frg,0.0,2.);\n    Bkgr = BkrgUV.x >= BkrgUV.y ? vec3(0.157,0.424,0.243) : vec3(0.125,0.125,0.125);\n}\n\n// WHITE SCARS.......................................\nvoid whiteFunc( in vec2 _bounceUv, in float _logoFlashTime)\n{\n    logoOutput = SVG_WhiteScars1(_bounceUv)* 1./max(0.001,_logoFlashTime);\n    logoOutput = pow(mix(0.001,0.03,_logoFlashTime) / smoothstep(0.,1000.,logoOutput),0.4);  \n    logoOutput = clamp(0.,2.,logoOutput);\n    Frg = vec3(0.851,0.051,0.090) * logoOutput;            \n\n    float output2 = SVG_WhiteScars2(_bounceUv)* 1./max(0.001,_logoFlashTime);\n    output2 = pow(mix(0.001,0.03,_logoFlashTime) / smoothstep(0.,300.,output2),0.4);\n    output2 = clamp(0.,1.,output2);\n    vec3 color2 = vec3(0.890,0.871,0.012) * output2;\n\n    Frg = mix(Frg,color2,output2);\n    logoOutput = mix(logoOutput, output2,output2);\n\n    Frg = clamp(Frg,0.0,2.);\n    Bkgr = vec3(0.851,0.871,0.886);\n}\n\n// RAVEN GUARD.......................................\nvoid ravenFunc( in vec2 _bounceUv, in float _logoFlashTime)\n{\n    logoOutput = SVG_RavenGuard(_bounceUv)* 1./max(0.001,_logoFlashTime);\n    logoOutput = pow(mix(0.001,0.03,_logoFlashTime) / smoothstep(0.,1000.,logoOutput),0.4);\n    Frg = vec3(1.) * logoOutput;\n    Frg = clamp(Frg,0.0,2.);\n    Bkgr = BkrgUV.x >= BkrgUV.y ? vec3(0.051,0.067,0.078) : vec3(0.643,0.133,0.118);\n}\n\n// DARK ANGELS.......................................\nvoid darkFunc( in vec2 _bounceUv, in float _logoFlashTime)\n{\n    logoOutput = SVG_DarkAngels(_bounceUv)* 1./max(0.001,_logoFlashTime);\n    logoOutput = pow(mix(0.001,0.03,_logoFlashTime) / smoothstep(0.,1000.,logoOutput),0.4);\n    Frg = vec3(1.) * logoOutput;\n    Frg = clamp(Frg,0.0,2.);\n    Bkgr = vec3(0.165,0.290,0.145);\n}\n\n// BLOOD ANGELS.......................................\nvoid bloodFunc( in vec2 _bounceUv, in float _logoFlashTime)\n{\n    logoOutput = SVG_BloodAngels(_bounceUv)* 1./max(0.001,_logoFlashTime);\n    logoOutput = pow(mix(0.001,0.03,_logoFlashTime) / smoothstep(0.,1000.,logoOutput),0.4);\n    Frg = vec3(0.) * logoOutput;\n    Frg = clamp(Frg,0.0,2.);\n    Bkgr = vec3(0.733,0.125,0.106);\n}\n\n// IRON FIST.......................................\nvoid irFiFunc( in vec2 _bounceUv, in float _logoFlashTime)\n{\n    logoOutput = SVG_IronFist(_bounceUv)* 1./max(0.001,_logoFlashTime);\n    logoOutput = pow(mix(0.001,0.03,_logoFlashTime) / smoothstep(0.,1000.,logoOutput),0.4);\n    Frg = vec3(1.) * logoOutput;\n\n    float sdfVal = sdfIronFist(_bounceUv); //just to get the circle\n    float output2 = sdfVal;\n    output2 = pow(mix(0.001,0.03,_logoFlashTime)/smoothstep(0.,0.4,output2),0.4);\n\n    // This part is a mess\n    float ring = (sdfVal+0.05) * output2+1.0;\n    ring = clamp(0.,1.,ring);\n    ring *= abs(1.-clamp(0.001,0.5, _logoFlashTime));\n    vec3 color2 = mix(vec3(1.), vec3(0.), ring);\n\n    color2 = clamp(vec3(0.),vec3(1.),color2);\n    Frg = clamp(vec3(0.),vec3(1.),Frg);\n    Frg = abs(vec3(1.)-Frg);            \n    Frg *= color2;\n\n    logoOutput = output2;\n\n    Frg = clamp(Frg,0.0,2.);\n    Bkgr = vec3(0.945,0.718,0.000);\n}\n\n// IRON HANDS.......................................\nvoid irHaFunc( in vec2 _bounceUv, in float _logoFlashTime)\n{\n    logoOutput = SVG_IronHands(_bounceUv)* 1./max(0.001,_logoFlashTime);\n    logoOutput = pow(mix(0.001,0.03,_logoFlashTime) / smoothstep(0.,1000.,logoOutput),0.4);\n    Frg = vec3(1.) * logoOutput;\n    Frg = clamp(Frg,0.0,2.);\n    Bkgr = vec3(0.141,0.141,0.141);\n}\n\n\n\n\n//////// MAIN ========================================================================v\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    BkrgUV = fragCoord/iResolution.xy;\n        \n    vec2 bounceUv = uv;  \n    float bounceTime = logoBounceTime(iChannel0);  \n    float bounceVal = logoBounceVal(iChannel0);       \n    bounceUv *= bounceVal*.25+0.9;\n    \n    float logoFlashTime = bounceTime*abs(1.-parabola(bounceTime,0.1));       \n    \n    // Switch logos with time\n    int currentLogoID = int(logoID(iChannel0)*255.);\n    \n    // BIG COMPILE TIME !!\n#ifdef LOOP_BETWEEN_LOGOS   \n    switch(currentLogoID){\n        case 0:\n            ultraFunc(bounceUv, logoFlashTime);break;// ULTRAMARINES.......................................\n        case 1:\n            spFunc(bounceUv, logoFlashTime);break;   // SPACEWOLF.......................................\n        case 2: \n            salaFunc(bounceUv, logoFlashTime);break; // SALAMANDERS.......................................\n        case 3: \n            whiteFunc(bounceUv, logoFlashTime);break;// WHITE SCARS.......................................\n        case 4:\n            ravenFunc(bounceUv, logoFlashTime);break;// RAVEN GUARD.......................................\n        case 5:\n            darkFunc(bounceUv, logoFlashTime);break; // DARK ANGELS .......................................\n        case 6:\n            bloodFunc(bounceUv, logoFlashTime);break;// BLOOD ANGELS .......................................\n        case 7:\n            irFiFunc(bounceUv, logoFlashTime);break; // IRON FIST .......................................\n        case 8:\n            irHaFunc(bounceUv, logoFlashTime);break; // IRON HANDS .......................................\n    }  \n\n\n#elif defined(USING_PREVIEW)\n    switch(currentLogoID){\n        case 0:\n            ultraFunc(bounceUv, logoFlashTime);break;// ULTRAMARINES.......................................\n        case 1:\n            spFunc(bounceUv, logoFlashTime);break;   // SPACEWOLF.......................................\n        case 2:\n            salaFunc(bounceUv, logoFlashTime);break; // SALAMANDERS.......................................\n    }\n    \n#else\n    #if (CURRENT_LOGO == 0)\n    // ULTRAMARINES.......................................\n    ultraFunc(bounceUv, logoFlashTime);\n    #elif (CURRENT_LOGO == 1)\n    // SPACEWOLF.......................................\n    spFunc(bounceUv, logoFlashTime);\n    #elif (CURRENT_LOGO == 2)\n    // SALAMANDERS.......................................\n    salaFunc(bounceUv, logoFlashTime);\n    #elif (CURRENT_LOGO == 3)\n    // WHITE SCARS.......................................\n    whiteFunc(bounceUv, logoFlashTime);\n    #elif (CURRENT_LOGO == 4)\n    // RAVEN GUARD.......................................\n    ravenFunc(bounceUv, logoFlashTime);\n    #elif (CURRENT_LOGO == 5)\n    // DARK ANGELS .......................................\n    darkFunc(bounceUv, logoFlashTime)\n    #elif (CURRENT_LOGO == 6)\n    // BLOOD ANGELS .......................................\n    bloodFunc(bounceUv, logoFlashTime);\n    #elif (CURRENT_LOGO == 7)\n    // IRON FIST .......................................\n    irFiFunc(bounceUv, logoFlashTime);\n    #elif (CURRENT_LOGO == 8)\n    // IRON HANDS .......................................\n    irHaFunc(bounceUv, logoFlashTime);\n    #endif\n#endif\n    \n\n    //Vignette\n    float vignetteVal = smoothstep(2.6*bounceVal,1.*bounceVal,length(uv));\n    Bkgr *= vignetteVal;\n         \n    // Output to screen\n    vec3 col = mix(Bkgr, Frg, clamp(0.,1.,logoOutput));   \n    fragColor = vec4(col,1.0);    \n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// PARAMETERS  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n\n#define LOGO_NUMBER 9\n#define LOGO_NUMBER_PREVIEW 3\n\n// Looping between logos make the shader compile every svg (the compil time can be very long = 1min~3min)\n//#define LOOP_BETWEEN_LOGOS\n\n// Preview with less logo for faster compile time \n// (NEED TO COMMENT LOOP_BETWEEN_LOGOS)\n#define USING_PREVIEW\n\n// Faster compilation by only choosing one logo at a time \n// (NEED TO COMMENT LOOP_BETWEEN_LOGOS and USING_PREVIEW)\n#define CURRENT_LOGO 2\n\n\n//SVG functions  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n// src: FarbiceNeyret2 SVG shader : https://www.shadertoy.com/view/ldXyRn\n\n#define N 2.  // splines discretization. Lower it on slow GPUs\n// absolute main SVG commands\n#define M(x,y)             x0 = _x = x;   y0 = _y = y;\n#define L(x,y)             d = min(d, line(uv, vec2(_x,_y), vec2(x,y)) ); _x=x,_y=y;\n#define C(x1,y1,x2,y2,x,y) d = min(d, bezier(uv, vec2(_x,_y), vec2(x1,y1),vec2(x2,y2), vec2(x,y)) ); _x=x,_y=y; \n#define V(y)               d = min(d, line(uv, vec2(_x,_y), vec2(_x,y)) ); _y=y;\n#define Z                  d = min(d, line(uv, vec2(_x,_y), vec2(x0,y0)) );\n\n#define path(cmd)          cmd;\n\n\nfloat bezier(vec2,vec2,vec2,vec2,vec2);\nfloat line(vec2,vec2,vec2);\nvoid  draw(float,inout vec4);\n \nfloat S=1.;\nfloat d = 1e38;   // global to allow unique distance field\n\n// --- spline interpolation ( inspired from revers https://www.shadertoy.com/view/MlGSz3 )\nvec2 interpolate(vec2 G1, vec2 G2, vec2 G3, vec2 G4, float t)\n{\n    vec2 A = G4-G1 + 3.*(G2-G3),\n         B = 3.*(G1-2.*G2+G3),\n         C = 3.*(G2-G1),\n         D = G1;\n    return t * (t * (t * A + B) + C) + D;\n}\n\n\nfloat line(vec2 p, vec2 a, vec2 b) \n{\n\tvec2 pa = p - a, ba = b - a,\n\t     d = pa - ba * clamp(dot(pa, ba) / dot(ba, ba) , 0., 1.); // distance to segment\n         \n    if  ( (a.y>p.y) != (b.y>p.y) && pa.x < ba.x * pa.y / ba.y ) \n        S = -S;     \n        \n\treturn dot(d,d); //length(d);                  // optimization by deferring sqrt\n}\n// interior detection (sign S): ( thanks TimoKinnunen https://www.shadertoy.com/view/4lySWd )\n// see http://web.archive.org/web/20161116163747/https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html - previously on https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n\nfloat bezier( vec2 uv, vec2 A, vec2 B, vec2 C, vec2 D)    \n{\n    vec2 p = A;\n    for (float t = 1.; t <= N; t++) {\n        vec2 q = interpolate(A, B, C, D, t/N);\n        float l = line(uv, p, q);\n        d = min(d, l );\n\t\tp = q;\n\t}\n\treturn d;\n}\n\n\n//Curves  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n\nfloat cubicPulse( float c, float w, float x )\n{\n    x = abs(x - c);\n    if( x>w ) return 0.0;\n    x /= w;\n    return 1.0 - x*x*(3.0-2.0*x);\n}\n\nfloat expImpulse( float x, float k )\n{\n    float h = k*x;\n    return h*exp(1.0-h);\n}\n\nfloat quaImpulse( float k, float x )\n{\n    return 2.0*sqrt(k)*x/(1.0+k*x*x);\n}\n\nfloat parabola( float x, float k )\n{\n    return pow( 4.0*x*(1.0-x), k );\n}\n\n//Bounce  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\nfloat pcurve( float x, float a, float b )\n{\n    float k = pow(a+b,a+b)/(pow(a,a)*pow(b,b));\n    return k*pow(x,a)*pow(1.0-x,b);\n}\n\n//SDF  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n// you can find sdf refs here : https://iquilezles.org/articles/distfunctions2d/\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n//TEXTURE READING  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\nfloat logoID(sampler2D buf) \n{\n    return texelFetch(buf, ivec2(0, 0), 0).x;\n}\n\nfloat logoBounceVal(sampler2D buf) \n{\n    return texelFetch(buf, ivec2(0, 0), 0).y;\n}\n\nfloat logoBounceTime(sampler2D buf) \n{\n    return texelFetch(buf, ivec2(0, 0), 0).z;\n}\n\nfloat logoIdChanged(sampler2D buf) \n{\n    return texelFetch(buf, ivec2(0, 0), 0).w;\n}\n\n\n//////// LEGION LOGOS (Lots of SVG data) ==========================================v\n// ULTRAMARINES .....................................................\nfloat sdfUltra(vec2 p)\n{ \n    p.y -= 0.07;\n    \n    //Boxes\n    vec2 boxUV = p;\n    boxUV.y -= 0.5;\n    float boxHeight = 0.14;\n    \n    float fullBox   = sdBox(boxUV, vec2(0.72,boxHeight));    \n    float holeBox  = sdBox(boxUV, vec2(0.12,boxHeight*2.));\n    float boxOutput = max(-holeBox,fullBox);\n    \n    //Ring\n    float ra = 0.63;\n    float rb = 0.42;\n    float d = 0.1;\n    \n    p.y += 0.15;\n    p.x = abs(p.x);\n    \n    float ringOutput = max((length(p)-ra), -(length(p-vec2(0.,d)) -rb) );\n    ringOutput = max(-holeBox,ringOutput);\n    \n    //return boxOutput;    \n    return min(ringOutput, boxOutput);\n\n}\n\n// SPACE WOLF .....................................................\nfloat SVG_SpaceWolf(vec2 uv) \n{\n    float _x, _y, x0, y0; // d = 1e38; \n    uv.y -= 1.05;\n    uv.x += 1.1;\n    uv *= 330.;  // scaling\n    uv.y = -uv.y; //mirror \n   \n   \npath(           \n    M( 526.5,201.5 )\n    C( 532.842,201.334, 539.175,201.5, 545.5,202.0 )\n    C( 546.624,202.249, 547.624,202.749, 548.5,203.5 )\n    C( 541.931,207.564, 536.097,212.564, 531.0,218.5 )\n    C( 530.104,221.025, 530.604,223.192, 532.5,225.0 )\n    C( 554.494,228.83, 575.827,234.83, 596.5,243.0 )\n    C( 589.081,246.251, 581.414,248.918, 573.5,251.0 )\n    C( 570.42,252.711, 569.254,255.211, 570.0,258.5 )\n    C( 600.762,273.76, 621.262,297.76, 631.5,330.5 )\n    C( 631.224,332.33, 630.557,333.997, 629.5,335.5 )\n    C( 621.571,327.066, 612.905,319.566, 603.5,313.0 )\n    C( 600.339,311.587, 597.339,309.92, 594.5,308.0 )\n    C( 591.975,307.104, 589.808,307.604, 588.0,309.5 )\n    C( 595.654,329.781, 600.987,350.781, 604.0,372.5 )\n    C( 606.507,395.659, 605.507,418.659, 601.0,441.5 )\n    C( 600.0,442.5, 599.0,443.5, 598.0,444.5 )\n    C( 595.818,431.633, 589.652,421.133, 579.5,413.0 )\n    C( 577.783,411.441, 575.783,410.608, 573.5,410.5 )\n    C( 565.553,442.84, 554.72,474.174, 541.0,504.5 )\n    C( 539.887,506.329, 538.387,507.163, 536.5,507.0 )\n    C( 532.335,501.674, 528.668,496.007, 525.5,490.0 )\n    C( 522.833,488.0, 520.167,488, 517.5,490.0 )\n    C( 497.808,524.03, 474.641,555.53, 448.0,584.5 )\n    C( 446.574,576.183, 445.24,567.85, 444.0,559.5 )\n    C( 443.129,555.074, 440.796,551.741, 437.0,549.5 )\n    C( 392.896,579.902, 344.063,595.902, 290.5,597.5 )\n    C( 322.963,572.238, 346.963,540.571, 362.5,502.5 )\n    C( 352.051,503.056, 342.885,507.056, 335.0,514.5 )\n    C( 333.437,513.275, 332.27,511.775, 331.5,510.0 )\n    C( 343.18,482.297, 353.68,454.131, 363.0,425.5 )\n    C( 365.147,424.524, 367.314,424.691, 369.5,426.0 )\n    C( 374.435,428.606, 379.102,431.606, 383.5,435.0 )\n    C( 392.945,446.724, 401.778,458.891, 410.0,471.5 )\n    C( 469.926,404.043, 494.26,325.376, 483.0,235.5 )\n    C( 480.704,230.939, 479.037,226.272, 478.0,221.5 )\n    C( 478.465,220.069, 479.299,218.903, 480.5,218.0 )\n    C( 496.073,212.757, 511.406,207.257, 526.5,201.5 )\n    Z\n    )\n\npath(       \n    M( 355.5,83.5 )\n    C( 357.082,84.8758, 358.915,85.8758, 361.,86.5 )\n    C( 362.7,85.0734, 364.533,84.24, 366.5,84. )\n    C( 392.945,103.792, 411.778,129.292, 423.,160.5 )\n    C( 425.31,153.925, 427.31,147.258, 429.,140.5 )\n    C( 462.057,175.984, 477.557,218.151, 475.5,267. )\n    C( 475.549,277.218, 474.882,287.384, 473.5,297.5 )\n    C( 471.795,293.719, 470.462,293.719, 469.5,297.5 )\n    C( 473.823,313.666, 473.323,329.666, 468.,345.5 )\n    C( 454.902,386.026, 436.735,424.026, 413.5,459.5 )\n    C( 404.347,437.517, 388.347,423.017, 365.5,416. )\n    C( 353.196,414.612, 341.196,415.946, 329.5,420. )\n    C( 300.578,433.459, 272.578,448.459, 245.5,465. )\n    C( 242.139,465.337, 238.806,465.837, 235.5,466.5 )\n    C( 216.784,462.15, 198.784,455.817, 181.5,447.5 )\n    C( 179.663,440.489, 177.663,433.489, 175.5,426.5 )\n    C( 176,426.167, 176.5,425.833, 177.,425.5 )\n    C( 187.037,427.978, 197.204,429.645, 207.5,430.5 )\n    C( 207.424,426.436, 206.424,422.603, 204.5,419. )\n    C( 205.425,416.446, 207.259,414.946, 210.,414.5 )\n    C( 216.29,416.846, 222.79,417.846, 229.5,417.5 )\n    C( 229.334,412.821, 229.501,408.155, 230.,403.5 )\n    C( 230.118,400.629, 230.784,397.962, 232.,395.5 )\n    C( 240.074,403.56, 249.574,406.06, 260.5,403. )\n    C( 246.809,391.314, 235.309,377.814, 226.,362.5 )\n    C( 224.661,369.426, 224.161,376.426, 224.5,383.5 )\n    C( 218.112,382.824, 211.778,381.824, 205.5,380.5 )\n    C( 205.826,384.884, 205.492,389.217, 204.5,393.5 )\n    C( 195.667,391.13, 186.667,390.13, 177.5,390.5 )\n    C( 177.666,395.179, 177.499,399.845, 177.,404.5 )\n    C( 176.586,404.957, 176.086,405.291, 175.5,405.5 )\n    C( 167.565,400.709, 159.232,399.709, 150.5,402.5 )\n    C( 149.657,408.825, 148.99,415.158, 148.5,421.5 )\n    C( 132.449,413.972, 117.115,405.139, 102.5,395. )\n    C( 85.7546,376.919, 67.7546,360.252, 48.5,345. )\n    C( 46.6707,343.887, 45.8374,342.387, 46.,340.5 )\n    C( 51.6773,333.482, 58.5106,327.982, 66.5,324. )\n    C( 96.8435,310.552, 127.51,297.885, 158.5,286. )\n    C( 166.127,284.588, 173.793,283.422, 181.5,282.5 )\n    C( 182.029,272.601, 186.696,265.435, 195.5,261. )\n    C( 236.446,242.864, 278.446,227.531, 321.5,215. )\n    C( 339.953,207.211, 352.12,193.711, 358.0,174.5 )\n    C( 360.392,144.078, 359.559,113.745, 355.5,83.5 )\n    Z\n    M( 245.5,278.5 )\n    C( 247.75,278.181, 249.75,278.681, 251.5,280.0 )\n    C( 244.5,287, 237.5,294, 230.5,301.0 )\n    C( 222.215,303.456, 214.215,302.789, 206.5,299.0 )\n    C( 220.446,293.696, 233.446,286.863, 245.5,278.5 )\n    Z\n    M( 131.5,323.5 )\n    C( 141.386,323.152, 142.553,325.818, 135.,331.5 )\n    C( 133.007,329.182, 131.841,326.516, 131.5,323.5 )\n    Z\n    M( 147.5,323.5 )\n    C( 157.386,323.152, 158.553,325.818, 151.0,331.5 )\n    C( 148.772,329.322, 147.605,326.655, 147.5,323.5 )\n    Z\n    M( 115.5,336.5 )\n    C( 120.597,337.128, 121.597,339.461, 118.5,343.5 )\n    C( 116.918,341.423, 115.918,339.09, 115.5,336.5 )\n    Z\n    M( 132.5,336.5 )\n    C( 141.747,339.276, 141.747,341.609, 132.5,343.5 )\n    C( 132.5,341.167, 132.5,338.833, 132.5,336.5 )\n    Z\n    M( 147.5,336.5 )\n    C( 157.853,338.839, 158.02,341.506, 148.0,344.5 )\n    C( 147.503,341.854, 147.336,339.187, 147.5,336.5 )\n    Z\n)\n    //d = line\n    //S = shape\n    d *= 0.1;\n    return S*d;    \n}\n\n\n// SALAMANDERS .....................................................\nfloat SVG_Salamanders(vec2 uv) \n{\n    float _x, _y, x0, y0; // d = 1e38; \n    uv.y -= 1.;\n    uv.x += 1.1;\n    uv *= 300.;  // scaling\n    uv.y = -uv.y; //mirror \n   \n   \npath(           \n    M( 435.8125,56.867188 )\n    C( 388.917969,95.519531, 341.472656,133.777344, 293.488281,171.640625 )\n    C( 283.675781,205.1875, 264.3125,231.824219, 235.394531,251.546875 )\n    C( 231.601562,247.441406, 229.179688,242.597656, 228.132812,237.015625 )\n    C( 219.523438,248.539062, 209.84375,259.195312, 199.089844,268.980469 )\n    C( 185.960938,286.09375, 179.183594,305.464844, 178.757812,327.09375 )\n    C( 154.921875,346.089844, 134.105469,367.882812, 116.308594,392.46875 )\n    C( 113.894531,394.46875, 111.957031,393.984375, 110.5,391.015625 )\n    C( 108.601562,386.324219, 107.148438,381.480469, 106.144531,376.488281 )\n    C( 103.484375,378.894531, 101.550781,381.800781, 100.332031,385.207031 )\n    C( 92.332031,425.113281, 101.046875,460.953125, 126.476562,492.714844 )\n    C( 128.679688,483.167969, 132.550781,474.453125, 138.09375,466.5625 )\n    C( 140.996094,470.4375, 143.902344,474.3125, 146.808594,478.1875 )\n    C( 150.660156,470.542969, 154.53125,462.792969, 158.425781,454.941406 )\n    C( 160.054688,453.425781, 161.992188,452.457031, 164.234375,452.035156 )\n    C( 168.285156,455.269531, 171.671875,459.144531, 174.398438,463.660156 )\n    C( 178.382812,454.144531, 183.707031,445.429688, 190.375,437.507812 )\n    C( 193.058594,441.164062, 195.476562,445.039062, 197.636719,449.128906 )\n    C( 205.324219,440.050781, 211.132812,429.878906, 215.0625,418.621094 )\n    C( 221.585938,419.1875, 226.910156,422.578125, 231.039062,428.789062 )\n    C( 251.25,378.050781, 284.652344,367.882812, 331.246094,398.28125 )\n    C( 293.265625,417.542969, 260.347656,442.242188, 232.492188,472.375 )\n    C( 224.492188,473.199219, 216.746094,475.136719, 209.253906,478.1875 )\n    C( 212.566406,480.875, 212.566406,483.296875, 209.253906,485.449219 )\n    C( 200.542969,487.871094, 191.828125,490.292969, 183.113281,492.714844 )\n    C( 186.277344,495.9375, 186.277344,498.84375, 183.113281,501.433594 )\n    C( 173.414062,504.824219, 163.734375,508.214844, 154.066406,511.601562 )\n    C( 161.664062,521.214844, 171.347656,526.058594, 183.113281,526.128906 )\n    C( 230.101562,501.171875, 277.542969,476.960938, 325.4375,453.488281 )\n    C( 358.355469,440.898438, 391.273438,428.304688, 424.191406,415.714844 )\n    C( 423.976562,405.441406, 425.429688,395.273438, 428.550781,385.207031 )\n    C( 433.875,381.816406, 439.199219,378.425781, 444.523438,375.035156 )\n    C( 480.160156,365.582031, 515.984375,356.863281, 551.992188,348.882812 )\n    C( 574.882812,342.867188, 597.152344,335.117188, 618.796875,325.640625 )\n    C( 601.082031,323.011719, 583.652344,319.132812, 566.515625,314.015625 )\n    C( 563.453125,309.984375, 562.972656,305.625, 565.0625,300.941406 )\n    C( 576.097656,286.992188, 588.203125,273.917969, 601.371094,261.714844 )\n    L( 653.652344,218.128906 )\n    C( 611.257812,225.847656, 568.65625,233.59375, 525.851562,241.375 )\n    C( 515.203125,243.3125, 504.554688,243.3125, 493.902344,241.375 )\n    C( 490.320312,225.457031, 490.804688,209.476562, 495.355469,193.433594 )\n    C( 511.316406,151.808594, 529.222656,111.128906, 549.089844,71.394531 )\n    C( 548.605469,70.425781, 548.121094,69.457031, 547.636719,68.488281 )\n    C( 515.589844,102.421875, 477.832031,127.605469, 434.359375,144.035156 )\n    C( 421.683594,141.003906, 415.390625,132.773438, 415.480469,119.335938 )\n    C( 419.613281,98, 427.363281,78.144531, 438.714844,59.769531 )\n    C( 438.355469,58.007812, 437.386719,57.039062, 435.8125,56.867188 )\n    Z\n    M( 229.585938,277.695312 )\n    L( 238.300781,277.695312 )\n    C( 238.753906,281.6875, 238.269531,285.5625, 236.847656,289.320312 )\n    C( 227.121094,299.535156, 216.957031,309.21875, 206.351562,318.375 )\n    C( 205.382812,317.40625, 204.414062,316.4375, 203.445312,315.46875 )\n    C( 208.75,300.484375, 217.460938,287.894531, 229.585938,277.695312 )\n    Z\n    M( 107.59375,411.355469 )\n    C( 111.351562,416.773438, 111.351562,422.582031, 107.59375,428.789062 )\n    C( 104.125,422.933594, 104.125,417.121094, 107.59375,411.355469 )\n    Z\n)\n    //d = line\n    //S = shape\n    d *= 0.1;\n    return S*d;    \n}\n\n// WHITE SCARS .....................................................\nfloat SVG_WhiteScars1(vec2 uv) \n{\n    float _x, _y, x0, y0; // d = 1e38; \n    uv.y -= 1.1;\n    uv.x += 1.1;\n    uv *= 330.;  // scaling\n    uv.y = -uv.y; //mirror \n   \n   \npath(           \n    M( 422.109375,102.894531 )\n    C( 410.289062,102.894531, 398.46875,102.964844, 386.644531,103.105469 )\n    C( 358.734375,153.894531, 329.46875,204.039062, 298.847656,253.535156 )\n    C( 251.332031,253.121094, 205.183594,244.667969, 160.398438,228.183594 )\n    C( 159.273438,232.125, 158.148438,236.070312, 157.023438,240.015625 )\n    C( 163.953125,271.324219, 169.582031,302.878906, 173.90625,334.667969 )\n    C( 167.515625,368.558594, 160.761719,402.363281, 153.644531,436.082031 )\n    C( 154.769531,437.773438, 155.894531,439.464844, 157.023438,441.152344 )\n    C( 196.234375,425.980469, 236.757812,417.527344, 278.585938,415.800781 )\n    C( 268.296875,431.324219, 259.292969,447.664062, 251.574219,464.816406 )\n    C( 252.699219,465.941406, 253.824219,467.070312, 254.949219,468.199219 )\n    C( 272.238281,461.234375, 289.125,453.347656, 305.601562,444.535156 )\n    C( 306.726562,445.660156, 307.851562,446.789062, 308.976562,447.914062 )\n    C( 271.558594,516.085938, 236.101562,584.820312, 202.609375,654.125 )\n    C( 267.246094,572.625, 333.09375,492.058594, 400.152344,412.417969 )\n    C( 453.5,413.070312, 505.277344,422.648438, 555.484375,441.152344 )\n    C( 556.609375,439.464844, 557.738281,437.773438, 558.863281,436.082031 )\n    C( 551.199219,400.765625, 544.445312,365.273438, 538.601562,329.597656 )\n    C( 544.964844,295.882812, 550.59375,262.078125, 555.484375,228.183594 )\n    C( 533.503906,233.449219, 511.554688,239.082031, 489.636719,245.085938 )\n    C( 487.949219,243.957031, 486.261719,242.832031, 484.574219,241.703125 )\n    C( 491.242188,231.191406, 499.121094,221.617188, 508.210938,212.972656 )\n    C( 507.085938,212.40625, 505.957031,211.84375, 504.832031,211.28125 )\n    C( 481.617188,224.046875, 457.980469,234.753906, 433.921875,243.394531 )\n    C( 465.4375,197.195312, 496.957031,150.996094, 528.472656,104.796875 )\n    C( 493.023438,103.527344, 457.570312,102.894531, 422.109375,102.894531 )\n    Z\n    M( 525.09375,255.226562 )\n    C( 528.761719,255.632812, 531.015625,257.886719, 531.847656,261.988281 )\n    C( 527.816406,283.867188, 524.4375,305.839844, 521.71875,327.90625 )\n    C( 524.941406,355.5625, 528.320312,383.171875, 531.847656,410.730469 )\n    C( 493.523438,404.40625, 455.253906,397.648438, 417.035156,390.445312 )\n    C( 437.492188,367.949219, 455.5,345.414062, 471.066406,322.835938 )\n    C( 448.363281,334.300781, 425.851562,343.316406, 403.527344,349.878906 )\n    C( 423.382812,323.09375, 443.640625,296.613281, 464.3125,270.4375 )\n    C( 484.925781,265.28125, 505.1875,260.207031, 525.09375,255.226562 )\n    Z\n    M( 180.660156,258.605469 )\n    C( 215.566406,263.867188, 250.460938,269.503906, 285.339844,275.507812 )\n    C( 270.652344,297.050781, 258.832031,319.585938, 249.882812,343.121094 )\n    C( 278.707031,326.683594, 307.410156,313.160156, 335.992188,302.554688 )\n    C( 319.855469,332.039062, 304.097656,361.902344, 288.71875,392.136719 )\n    C( 252.480469,397.265625, 216.460938,403.460938, 180.660156,410.730469 )\n    C( 183.851562,384.238281, 187.226562,357.757812, 190.789062,331.289062 )\n    C( 188.691406,306.851562, 185.3125,282.625, 180.660156,258.605469 )\n    Z\n    M( 180.660156,258.605469 )\n)\n    //d = line\n    //S = shape\n    d *= 0.1;\n    return S*d;    \n}\n\nfloat SVG_WhiteScars2(vec2 uv) \n{\n    // reset values\n    S=1.;\n    d = 1e38;\n    \n    float _x, _y, x0, y0; // d = 1e38; \n    uv.y -= 1.1;\n    uv.x += 1.1;\n    uv *= 330.;  // scaling\n    uv.y = -uv.y; //mirror \n   \n   \npath(           \n    M( 525.09375,255.226562 )\n    C( 505.1875,260.207031, 484.925781,265.28125, 464.3125,270.4375 )\n    C( 443.640625,296.613281, 423.382812,323.09375, 403.527344,349.878906 )\n    C( 425.851562,343.316406, 448.363281,334.300781, 471.066406,322.835938 )\n    C( 455.5,345.414062, 437.492188,367.949219, 417.035156,390.445312 )\n    C( 455.253906,397.648438, 493.523438,404.40625, 531.847656,410.730469 )\n    C( 528.320312,383.171875, 524.941406,355.5625, 521.71875,327.90625 )\n    C( 524.4375,305.839844, 527.816406,283.867188, 531.847656,261.988281 )\n    C( 531.015625,257.886719, 528.761719,255.632812, 525.09375,255.226562 )\n    Z\n    M( 525.09375,255.226562 )\n    M( 180.660156,258.605469 )\n    C( 185.3125,282.625, 188.691406,306.851562, 190.789062,331.289062 )\n    C( 187.226562,357.757812, 183.851562,384.238281, 180.660156,410.730469 )\n    C( 216.460938,403.460938, 252.480469,397.265625, 288.71875,392.136719 )\n    C( 304.097656,361.902344, 319.855469,332.039062, 335.992188,302.554688 )\n    C( 307.410156,313.160156, 278.707031,326.683594, 249.882812,343.121094 )\n    C( 258.832031,319.585938, 270.652344,297.050781, 285.339844,275.507812 )\n    C( 250.460938,269.503906, 215.566406,263.867188, 180.660156,258.605469 )\n    Z\n    M( 180.660156,258.605469 )\n)\n\n    //d = line\n    //S = shape\n    d *= 0.1;\n    return S*d;    \n}\n\n// RAVEN GUARD .....................................................\nfloat SVG_RavenGuard(vec2 uv) \n{\n    float _x, _y, x0, y0; // d = 1e38; \n    uv.y -= .95;\n    uv.x += 1.2;\n    uv *= 300.;  // scaling\n    uv.y = -uv.y; //mirror \n   \n   \npath(           \n    M( 259.957031,68.277344 )\n    C( 233.789062,75.855469, 207.160156,82.636719, 180.082031,88.617188 )\n    C( 167.050781,188.839844, 122.027344,270.675781, 45.019531,334.128906 )\n    C( 54.21875,343.332031, 63.417969,352.53125, 72.613281,361.730469 )\n    C( 75.519531,359.792969, 78.421875,357.859375, 81.328125,355.921875 )\n    C( 120,306.675781, 150.496094,252.4375, 172.820312,193.214844 )\n    C( 176.273438,190.515625, 180.148438,189.546875, 184.441406,190.308594 )\n    C( 164.644531,258.925781, 135.597656,323.328125, 97.304688,383.523438 )\n    C( 118.996094,379.363281, 140.292969,373.070312, 161.203125,364.636719 )\n    C( 189.878906,317.300781, 211.179688,266.9375, 225.105469,213.550781 )\n    L( 239.625,213.550781 )\n    C( 230.496094,261.710938, 215.972656,308.199219, 196.058594,353.015625 )\n    C( 197.027344,353.984375, 197.996094,354.953125, 198.960938,355.921875 )\n    C( 216.28125,350.953125, 233.222656,345.144531, 249.792969,338.488281 )\n    C( 256.203125,311.863281, 263.945312,285.710938, 273.027344,260.039062 )\n    C( 279.734375,282.84375, 284.574219,306.085938, 287.550781,329.769531 )\n    C( 289.929688,337.695312, 289.445312,345.441406, 286.097656,353.015625 )\n    C( 254.058594,368.074219, 222.109375,383.085938, 190.25,398.050781 )\n    C( 183.417969,411.335938, 180.03125,425.378906, 180.082031,440.179688 )\n    C( 196.542969,449.863281, 213,459.550781, 229.460938,469.234375 )\n    C( 225.53125,455.988281, 220.207031,442.914062, 213.484375,430.011719 )\n    C( 216.710938,421.132812, 221.066406,412.902344, 226.554688,405.3125 )\n    C( 233.949219,412.683594, 238.792969,421.402344, 241.078125,431.460938 )\n    C( 245.082031,426.484375, 249.921875,422.609375, 255.601562,419.839844 )\n    C( 256.050781,412.394531, 254.597656,405.128906, 251.246094,398.050781 )\n    C( 263.886719,386.578125, 278.410156,381.253906, 294.8125,382.070312 )\n    C( 298.164062,389.628906, 299.617188,397.375, 299.171875,405.3125 )\n    C( 280.351562,428.886719, 260.5,451.648438, 239.625,473.59375 )\n    C( 250.511719,481.214844, 261.648438,488.480469, 273.027344,495.382812 )\n    C( 288.6875,474.875, 303.210938,453.566406, 316.597656,431.460938 )\n    C( 311.28125,456.609375, 304.988281,481.792969, 297.71875,507.003906 )\n    C( 315.515625,519.3125, 333.914062,530.933594, 352.90625,541.871094 )\n    C( 371.894531,530.933594, 390.292969,519.3125, 408.089844,507.003906 )\n    C( 401.429688,483.828125, 396.105469,460.585938, 392.117188,437.273438 )\n    C( 405.671875,456.644531, 419.222656,476.011719, 432.78125,495.382812 )\n    C( 444.640625,489.695312, 455.777344,482.917969, 466.183594,475.042969 )\n    C( 448.683594,451.691406, 429.804688,429.414062, 409.542969,408.21875 )\n    C( 406.949219,398.292969, 408.402344,389.09375, 413.902344,380.617188 )\n    C( 426.785156,383.140625, 439.371094,387.5, 451.660156,393.691406 )\n    C( 452.628906,395.628906, 453.597656,397.566406, 454.5625,399.503906 )\n    C( 451.230469,406.070312, 449.777344,412.851562, 450.207031,419.839844 )\n    C( 455.277344,424.070312, 460.601562,427.945312, 466.183594,431.460938 )\n    C( 474.394531,402.097656, 483.109375,401.613281, 492.324219,430.011719 )\n    C( 486.910156,442.292969, 481.101562,454.398438, 474.894531,466.328125 )\n    L( 477.800781,469.234375 )\n    C( 494.15625,460.125, 510.132812,450.441406, 525.726562,440.179688 )\n    C( 525.789062,425.414062, 522.402344,411.367188, 515.558594,398.050781 )\n    C( 483.609375,383.039062, 451.660156,368.027344, 419.710938,353.015625 )\n    C( 418.359375,322.355469, 422.714844,292.335938, 432.78125,262.945312 )\n    C( 441.875,287.664062, 450.105469,312.847656, 457.46875,338.488281 )\n    C( 470.195312,345.5625, 483.75,350.886719, 498.132812,354.46875 )\n    C( 502.328125,356.738281, 506.199219,356.25, 509.75,353.015625 )\n    C( 490.539062,307.949219, 476.015625,261.464844, 466.183594,213.550781 )\n    L( 480.707031,213.550781 )\n    C( 495.253906,269.347656, 518.492188,321.160156, 550.414062,368.996094 )\n    C( 567.84375,374.320312, 585.269531,379.648438, 602.695312,384.976562 )\n    C( 604.632812,384.007812, 606.570312,383.039062, 608.507812,382.070312 )\n    C( 570.058594,322.574219, 541.011719,258.652344, 521.371094,190.308594 )\n    C( 525.664062,189.546875, 529.535156,190.515625, 532.988281,193.214844 )\n    C( 555.097656,245.203125, 581.71875,294.59375, 612.863281,341.394531 )\n    C( 619.6875,348.707031, 626.949219,355.484375, 634.648438,361.730469 )\n    C( 642.976562,352.921875, 650.722656,343.722656, 657.882812,334.128906 )\n    C( 584.984375,268.21875, 540.449219,186.382812, 524.273438,88.617188 )\n    C( 491.65625,80.347656, 458.738281,73.570312, 425.519531,68.277344 )\n    C( 425.046875,74.167969, 425.53125,79.980469, 426.972656,85.710938 )\n    C( 448.136719,102.863281, 453.945312,124.171875, 444.398438,149.632812 )\n    C( 435.222656,164.421875, 422.636719,169.265625, 406.640625,164.160156 )\n    C( 403.597656,145.84375, 400.695312,127.441406, 397.925781,108.957031 )\n    C( 395.503906,98.785156, 389.210938,92.492188, 379.046875,90.070312 )\n    C( 341.710938,88.824219, 306.855469,97.539062, 274.480469,116.21875 )\n    C( 270.019531,119.441406, 268.082031,123.800781, 268.671875,129.292969 )\n    C( 284.191406,128.8125, 299.683594,129.296875, 315.144531,130.746094 )\n    C( 320.992188,132.722656, 324.863281,136.59375, 326.761719,142.367188 )\n    C( 321.167969,159.101562, 309.550781,167.332031, 291.910156,167.066406 )\n    C( 262.804688,161.597656, 251.667969,144.167969, 258.507812,114.765625 )\n    C( 264.152344,104.277344, 270.929688,94.59375, 278.839844,85.710938 )\n    C( 280.277344,79.980469, 280.761719,74.167969, 280.289062,68.277344 )\n    Z\n    M( 338.382812,103.144531 )\n    C( 346.1875,102.667969, 353.933594,103.152344, 361.617188,104.597656 )\n    C( 353.292969,108.828125, 344.582031,109.796875, 335.476562,107.503906 )\n    C( 337.09375,106.390625, 338.058594,104.9375, 338.382812,103.144531 )\n    Z\n)\n\n    //d = line\n    //S = shape\n    d *= 0.1;\n    return S*d;    \n}\n\n\n// DARK ANGELS .....................................................\nfloat SVG_DarkAngels(vec2 uv) \n{\n    float _x, _y, x0, y0; // d = 1e38; \n    uv.y -= .95;\n    uv.x += 1.05;\n    uv *= 350.;  // scaling\n    uv.y = -uv.y; //mirror \n   \n   \npath(           \n    M( 357.523438,31.855469 )\n    C( 345.164062,55.921875, 327.550781,79.574219, 312.164062,102.183594 )\n    C( 321.285156,109.582031, 330.746094,116.519531, 340.539062,122.996094 )\n    C( 339.773438,159.535156, 337.882812,196.121094, 334.863281,232.75 )\n    C( 327.195312,233.363281, 320.871094,233.199219, 313.097656,232.414062 )\n    C( 306.699219,228.042969, 300.96875,221.515625, 295.136719,217.609375 )\n    C( 285.335938,227.355469, 276.808594,235.414062, 266.757812,245.996094 )\n    C( 274.824219,258.484375, 284.914062,269.207031, 297.027344,278.164062 )\n    C( 301.542969,273.363281, 308.300781,266.921875, 312.785156,261.800781 )\n    C( 319.902344,262.113281, 324.652344,262.417969, 331.082031,263.023438 )\n    C( 324.070312,356.765625, 320.265625,450.738281, 314.054688,543.082031 )\n    C( 327.539062,576.359375, 342.042969,609.15625, 357.566406,641.476562 )\n    C( 372.410156,608.964844, 386.914062,576.167969, 401.082031,543.082031 )\n    C( 395.964844,452.070312, 386.550781,358.09375, 384.054688,263.023438 )\n    C( 390.484375,262.417969, 396.789062,262.9375, 402.863281,263.375 )\n    C( 408.117188,268.273438, 412.945312,273.570312, 418.109375,278.164062 )\n    C( 429.460938,269.332031, 439.550781,259.242188, 448.378906,247.886719 )\n    C( 439.550781,236.53125, 429.460938,226.441406, 418.109375,217.609375 )\n    C( 412.949219,222.429688, 407.882812,228.066406, 402.972656,232.179688 )\n    C( 395.839844,232.511719, 387.941406,233.363281, 380.269531,232.75 )\n    C( 378.824219,199.871094, 377.234375,156.785156, 375.976562,123.753906 )\n    C( 388.996094,113.753906, 390.824219,111.445312, 402.972656,102.183594 )\n    C( 388.304688,81.046875, 370.804688,54.796875, 358.988281,31.78125 )\n    C( 357.894531,32.058594, 361.292969,31.53125, 357.523438,31.855469 )\n    Z\n    M( 110.839844,217.175781 )\n    C( 95.980469,217.167969, 81.109375,217.308594, 66.214844,217.609375 )\n    L( 66.214844,232.75 )\n    C( 68.539062,246.507812, 69.492188,271.757812, 69.691406,285.753906 )\n    C( 104.015625,286.527344, 132.742188,284.234375, 164.59375,285.730469 )\n    L( 164.59375,312.222656 )\n    C( 137.558594,314.417969, 111.074219,319.464844, 85.136719,327.363281 )\n    C( 94.628906,348.90625, 105.980469,369.089844, 119.1875,387.914062 )\n    L( 175.945312,359.53125 )\n    C( 189.167969,362.652344, 197.996094,371.484375, 202.433594,386.023438 )\n    C( 187.1875,399.992188, 170.792969,412.609375, 153.242188,423.867188 )\n    C( 149.644531,426.585938, 149.015625,429.738281, 151.351562,433.328125 )\n    C( 164.023438,445.371094, 176.007812,457.984375, 187.296875,471.175781 )\n    C( 204.269531,456.09375, 220.664062,440.328125, 236.488281,423.867188 )\n    C( 248.582031,423.902344, 257.410156,429.578125, 262.972656,440.898438 )\n    C( 254.117188,461.191406, 245.289062,481.375, 236.488281,501.449219 )\n    C( 253.074219,514.140625, 271.992188,521.707031, 293.242188,524.15625 )\n    C( 299.410156,456.53125, 306.976562,389.042969, 315.945312,321.683594 )\n    C( 314.683594,318.53125, 313.421875,315.378906, 312.164062,312.222656 )\n    C( 273.488281,293.753906, 250.785156,263.476562, 244.054688,221.394531 )\n    C( 199.816406,218.601562, 155.40625,217.199219, 110.839844,217.175781 )\n    Z\n    M( 604.296875,217.175781 )\n    C( 559.726562,217.199219, 515.320312,218.601562, 471.082031,221.394531 )\n    C( 464.894531,263.554688, 442.191406,293.199219, 402.972656,310.332031 )\n    C( 400.859375,313.074219, 399.597656,316.226562, 399.1875,319.792969 )\n    C( 408.003906,387.8125, 415.574219,455.933594, 421.890625,524.15625 )\n    C( 442.703125,520.570312, 461.621094,513, 478.648438,501.449219 )\n    C( 469.84375,481.375, 461.015625,461.191406, 452.164062,440.898438 )\n    C( 457.722656,429.578125, 466.554688,423.902344, 478.648438,423.867188 )\n    C( 493.320312,439.816406, 509.089844,454.324219, 525.945312,467.390625 )\n    C( 539.644531,457.484375, 552.253906,446.132812, 563.785156,433.328125 )\n    C( 566.117188,429.738281, 565.492188,426.585938, 561.890625,423.867188 )\n    C( 544.34375,412.609375, 527.949219,399.992188, 512.703125,386.023438 )\n    C( 517.34375,374.828125, 524.28125,365.367188, 533.511719,357.636719 )\n    C( 554.554688,367.214844, 575.367188,377.308594, 595.945312,387.914062 )\n    C( 609.15625,369.089844, 620.507812,348.90625, 630.0,327.363281 )\n    C( 603.867188,320.367188, 577.378906,315.320312, 550.539062,312.222656 )\n    C( 549.398438,302.539062, 550.660156,293.707031, 554.324219,285.730469 )\n    C( 584.21875,283.101562, 614.492188,280.578125, 645.136719,278.164062 )\n    C( 645.152344,262.894531, 646.414062,247.757812, 648.917969,232.75 )\n    L( 648.917969,217.609375 )\n    C( 634.027344,217.308594, 619.152344,217.167969, 604.296875,217.175781 )\n    Z\n)\n\n    //d = line\n    //S = shape\n    d *= 0.1;\n    return S*d;    \n}\n\n// BLOOD ANGELS .....................................................\nfloat SVG_BloodAngels(vec2 uv) \n{\n    float _x, _y, x0, y0; // d = 1e38; \n    uv.y -= .9;\n    uv.x += 1.0;\n    uv *= 450.;  // scaling\n    uv.y = -uv.y; //mirror \n   \npath(   \n    M(72.5,3.8007812)\n    C(71.400001,5.9007792,71.300391,7.7000018,71.400391,9.5)\n    C(72.50039,30.599979,72.899612,51.800802,75.099609,72.800781)\n    C(81.099603,131.10072,96.60082,185.99926,135.30078,232.19922)\n    C(137.70078,234.99922,141.29922,238.40079,138.69922,242.30078)\n    C(135.89922,246.50078,131.19922,244.69922,127.69922,243.19922)\n    C(117.89923,238.99922,108.10038,234.79999,98.900391,229.5)\n    C(71.200418,213.40002,45.899195,193.80076,21.699219,172.80078)\n    C(20.39922,171.70078,18.999607,170.69961,17.099609,169.09961)\n    C(16.09961,186.49959,18.200005,202.4008,23.5,217.80078)\n    C(33.69999,247.60075,53.200416,270.50002,78.400391,288.5)\n    C(94.800374,300.19999,112.50041,310.0004,129.40039,320.90039)\n    C(132.40039,322.80039,134.5,326.09922,137.0,328.69922)\n    C(133.6,330.79922,130.20078,332.99961,126.80078,335.09961)\n    C(126.40078,335.29961,125.80078,335.40039,125.30078,335.40039)\n    C(114.70079,335.50039,103.99999,336.50039,93.5,335.40039)\n    C(63.50003,332.20039,34.999581,322.8996,7.0996094,311.59961)\n    C(5.3996111,310.89961,3.6007789,310.30039,1.3007812,309.40039)\n    C(1.600781,310.40039,1.7003908,310.90078,1.9003906,311.30078)\n    C(16.500376,334.10076,32.799239,355.49963,53.199219,373.59961)\n    C(71.6992,389.99959,92.200415,403.20079,116.90039,407.30078)\n    C(128.30038,409.20078,140.09923,408.39961,151.69922,409.09961)   \n    C(153.39922,409.19961,156.4,410.19922,156.5,411.19922)\n    C(156.7,412.89922,155.7,415.19922,154.5,416.69922)\n    C(153.5,417.99922,151.60039,419.0,149.90039,419.5)\n    C(143.2004,421.5,136.49921,423.8,129.69922,425.0)\n    C(96.599252,430.59999,63.399967,430.80039,30.0,428.90039)\n    C(28.400002,428.80039,26.799217,428.90039,25.199219,428.90039)\n    C(25.099219,429.50039,25.000391,429.89922,25.400391,430.19922)\n    C(25.90039,431.39922,26.400001,432.60078,27.0,433.80078)\n    C(46.099981,472.70074,78.000824,493.90079,120.30078,499.80078)\n    C(135.30077,501.90078,150.49962,502.00078,165.59961,503.30078)\n    C(168.79961,503.60078,174.29961,505.09922,174.59961,506.69922)\n    C(175.19961,510.09922,173.80078,514.49961,171.80078,517.59961)\n    C(169.40078,521.29961,165.79922,524.4,162.19922,527.0)\n    C(156.39922,531.1,150.40038,535.39961,143.90039,538.09961)\n    C(126.80041,545.1996,109.4992,551.70001,92.199219,558.0)\n    C(85.599225,560.4,78.599992,561.89961,70.5,564.09961)\n    C(75.499995,567.49961,79.399614,570.5,83.599609,573.0)\n    C(105.89959,586.39999,130.60003,589.89922,156.0,591.19922)\n    C(184.49997,592.69922,208.69963,583.39959,229.59961,564.59961)\n    C(236.5996,558.29962,243.39962,551.60038,250.59961,545.40039)   \n    C(256.5996,540.2004,262.7004,534.89961,269.40039,530.59961)\n    C(290.40037,517.19962,313.99924,519.80002,332.19922,537.0)\n    C(333.49922,538.2,334.8,539.4,336.5,541.0)\n    C(344.89999,518.50002,353.1004,496.49998,361.40039,474.5)\n    C(355.6004,473.6,350.2996,473.10039,345.09961,471.90039)\n    C(321.29963,466.4004,303.40038,453.89998,297.40039,429.0)\n    C(291.2004,403.30003,296.69924,380.59998,318.19922,363.5)\n    C(324.89921,358.10001,332.30001,353.49999,339.0,348.0)\n    C(345.59999,342.60001,352.49922,337.40077,357.69922,330.80078)\n    C(373.9992,310.2008,368.70037,283.00077,346.40039,269.30078)\n    C(343.50039,267.60078,340.59961,265.89961,337.59961,264.59961)\n    C(327.69962,260.29961,317.79921,255.8,307.69922,252.0)\n    C(242.29928,227.80002,188.60035,188.09955,146.40039,132.59961)\n    C(117.30042,94.199648,94.19959,52.300737,74.599609,8.3007812)\n    L(72.5,3.8007812)\n    Z\n    M(824.09961,4.0)\n    L(822.0,8.5)\n    C(802.40002,52.499956,779.29919,94.40082,750.19922,132.80078)\n    C(707.99926,188.10073,654.20033,227.80002,588.90039,252.0)\n    C(578.8004,255.8,568.89999,260.29961,559.0,264.59961)\n    C(556.0,265.89961,553.09922,267.60078,550.19922,269.30078)\n    C(527.89924,283.00077,522.60041,310.2008,538.90039,330.80078)\n    C(544.10039,337.40077,550.99962,342.60001,557.59961,348.0)\n    C(564.2996,353.49999,571.7004,358.10001,578.40039,363.5)\n    C(599.90037,380.59998,605.39921,403.30003,599.19922,429.0)   \n    C(593.19922,453.89998,575.29998,466.4004,551.5,471.90039)\n    C(546.30001,473.10039,540.99921,473.6,535.19922,474.5)\n    C(543.49921,496.49998,551.69962,518.50002,560.09961,541.0)\n    C(561.79961,539.4,563.10039,538.2,564.40039,537.0)\n    C(582.60037,519.80002,606.19924,517.19962,627.19922,530.59961)    \n    C(633.89921,534.89961,640.00001,540.2004,646.0,545.40039)    \n    C(653.19999,551.60038,660.00001,558.29962,667.0,564.59961)\n    C(687.89998,583.39959,712.09964,592.69922,740.59961,591.19922)\n    C(765.99958,589.89922,790.70002,586.39999,813.0,573.0)\n    C(817.2,570.5,821.09961,567.49961,826.09961,564.09961)\n    C(817.99962,561.89961,811.00038,560.4,804.40039,558.0)\n    C(787.10041,551.70001,769.7992,545.1996,752.69922,538.09961)\n    C(746.19923,535.39961,740.20038,531.1,734.40039,527.0)\n    C(730.80039,524.4,727.20078,521.29961,724.80078,517.59961)\n    C(722.80078,514.49961,721.4,510.09922,722.0,506.69922)\n    C(722.3,505.09922,727.8,503.60078,731.0,503.30078)    \n    C(746.09998,502.00078,761.3008,501.90078,776.30078,499.80078)\n    C(818.60074,493.90079,850.49963,472.70074,869.59961,433.80078)\n    C(870.19961,432.60078,870.69922,431.39922,871.19922,430.19922)\n    C(871.39922,429.89922,871.30078,429.50039,871.30078,428.90039)\n    C(869.70078,428.90039,868.1,428.80039,866.5,428.90039)\n    C(833.10003,430.80039,799.90075,430.59999,766.80078,425.0)\n    C(760.00079,423.8,753.2996,421.5,746.59961,419.5)\n    C(744.89961,419.0,743,417.99922,742.0,416.69922)\n    C(740.8,415.19922,739.8,412.89922,740.0,411.19922)\n    C(740.1,410.19922,743.10078,409.19961,744.80078,409.09961)\n    C(756.40077,408.39961,768.19962,409.20078,779.59961,407.30078)    \n    C(804.29958,403.20079,824.8008,389.99959,843.30078,373.59961)\n    C(863.70076,355.49963,879.99962,334.10076,894.59961,311.30078)\n    C(894.79961,310.90078,894.89922,310.40039,895.19922,309.40039)\n    C(892.89922,310.30039,891.10039,310.89961,889.40039,311.59961)\n    C(861.50042,322.8996,832.99997,332.20039,803.0,335.40039)    \n    C(792.50001,336.50039,781.79921,335.50039,771.19922,335.40039)\n    C(770.69922,335.40039,770.09922,335.29961,769.69922,335.09961)\n    C(766.29922,332.99961,762.9,330.79922,759.5,328.69922)\n    C(762,326.09922,764.09961,322.80039,767.09961,320.90039)\n    C(783.99959,310.0004,801.69963,300.19999,818.09961,288.5)\n    C(843.29958,270.50002,862.80001,247.60075,873.0,217.80078)\n    C(878.29999,202.4008,880.40039,186.49959,879.40039,169.09961)\n    C(877.50039,170.69961,876.10078,171.70078,874.80078,172.80078)\n    C(850.60081,193.80076,825.29958,213.40002,797.59961,229.5)\n    C(788.39962,234.79999,778.60077,238.99922,768.80078,243.19922)\n    C(765.30078,244.69922,760.60078,246.50078,757.80078,242.30078)\n    C(755.20078,238.40079,758.79922,234.99922,761.19922,232.19922)\n    C(799.99918,186.19926,815.40001,131.29994,821.5,73.0)\n    C(823.7,52.000021,824.09922,30.799198,825.19922,9.6992188)\n    C(825.29922,7.8992205,825.19961,6.0999979,824.09961,4.0)\n    Z\n    M(450.40039,274.59961)\n    C(449.10039,275.79961,448.8,276.99922,448.5,278.19922)\n    C(434.80001,343.09915,417.0992,406.90084,397.69922,470.30078)\n    C(384.59923,513.20074,370.60038,555.70043,362.40039,599.90039)\n    C(357.4004,627.00036,354.10039,654.30042,357.90039,681.90039)\n    C(363.10039,719.50035,384.10082,741.9004,421.30078,749.40039)\n    C(426.20078,750.40039,431.1,751.1,436.0,752.0)\n    C(445.29999,752,454.7004,752.00039,463.90039,751.90039)\n    C(467.80039,751.20039,471.69961,750.50039,475.59961,749.90039)\n    C(512.09957,744.2004,534.20001,722.79918,541.0,686.69922)\n    C(545.3,663.79924,543.70039,640.89959,540.40039,618.09961)\n    C(535.1004,581.19965,525.40077,545.40036,514.30078,509.90039)\n    C(492.3008,439.70046,471.50037,369.09915,455.40039,297.19922)\n    C(453.70039,289.69923,452.10039,282.0996,450.40039,274.59961)\n    Z\n\t\n)\n\n    //d = line\n    //S = shape\n    d *= 0.1;\n    return S*d;    \n}\n\n// IRON FIST .....................................................\nfloat SVG_IronFist(vec2 uv) \n{\n    float _x, _y, x0, y0; // d = 1e38; \n    uv.y -= 0.87;\n    uv.x += 0.85;\n    uv *= 420.;  // scaling\n    uv.y = -uv.y; //mirror \n   \n   \npath(           \n    M(316.628906,70.472656)\n    C(311.429688,70.390625,305.792969,70.738281,299.722656,71.515625)\n    C(291.519531,75.664062,287.632812,80.195312,286.1875,86.976562)\n    C(283.203125,107.867188,284.492188,128.484375,290.054688,148.828125)\n    C(310.4375,160.625,331.707031,170.933594,353.867188,179.753906)\n    C(356.546875,177.722656,358.480469,175.144531,359.667969,172.023438)\n    C(360.3125,159.78125,360.957031,147.539062,361.601562,135.296875)\n    C(367.996094,92.648438,353.007812,71.042969,316.628906,70.472656)\n    Z\n    M(226.644531,79.117188)\n    C(225.25,79.085938,223.828125,79.125,222.375,79.246094)\n    C(204.285156,84.246094,173.414062,99.640625,174.03125,106.304688)\n    C(173.765625,109.042969,180.707031,180.902344,199.171875,214.542969)\n    C(222.109375,200.003906,243.378906,183.253906,262.984375,164.292969)\n    C(266.984375,138.578125,263.117188,114.09375,251.382812,90.84375)\n    C(244.628906,83.242188,236.386719,79.335938,226.644531,79.117188)\n    Z\n    M(412.074219,94.257812)\n    C(408.183594,94.203125,404.253906,94.355469,400.277344,94.707031)\n    C(390.375,97.492188,383.285156,103.9375,379.003906,114.039062)\n    C(372.84375,138.40625,372.199219,162.886719,377.070312,187.484375)\n    C(396.566406,197.628906,416.546875,206.648438,437.015625,214.542969)\n    C(445.066406,205.988281,450.222656,195.679688,452.484375,183.621094)\n    C(459.3125,158.183594,467.585938,120.433594,460.222656,106.304688)\n    C(454.433594,95.203125,428.933594,94.480469,412.074219,94.257812)\n    Z\n    M(490.441406,129.167969)\n    C(471.578125,149.128906,451.246094,210.492188,460.222656,260.933594)\n    C(474.351562,277.570312,490.46875,280.148438,508.5625,268.664062)\n    L(549.171875,187.484375)\n    C(553.109375,146.945312,500.902344,121.152344,490.441406,129.167969)\n    Z\n    M(280.386719,168.15625)\n    C(246.96875,198.316406,212.808594,227.953125,177.902344,257.066406)\n    C(176.632812,267.53125,177.917969,277.839844,181.769531,287.992188)\n    C(185.835938,305.441406,194.214844,320.257812,206.90625,332.449219)\n    C(271.074219,356.527344,307.171875,335.265625,315.195312,268.664062)\n    C(345.78125,275.707031,376.722656,278.929688,408.011719,278.328125)\n    C(425.117188,266.679688,433.496094,250.574219,433.148438,230.007812)\n    C(383.257812,206.679688,332.335938,186.0625,280.386719,168.15625)\n    Z\n    M(442.816406,260.933594)\n    C(435.773438,276.339844,424.171875,287.292969,408.011719,293.792969)\n    C(381.007812,290.714844,353.9375,288.136719,326.796875,286.058594)\n    C(324.511719,309.652344,314.199219,328.980469,295.855469,344.042969)\n    C(268.046875,354.246094,239.6875,356.175781,210.773438,349.84375)\n    C(217.601562,374.4375,229.203125,396.988281,245.582031,417.492188)\n    C(321.640625,420.070312,397.695312,420.070312,473.757812,417.492188)\n    C(486.636719,377.613281,499.527344,337.667969,512.429688,297.65625)\n    C(511.871094,294.671875,510.582031,292.09375,508.5625,289.925781)\n    C(493.917969,289.308594,479.734375,286.730469,466.023438,282.195312)\n    C(461.152344,271.652344,453.417969,264.5625,442.816406,260.933594)\n    Z\n    M(304.761719,434.214844)\n    C(285.058594,434.203125,265.328125,434.429688,245.582031,434.886719)\n    C(210.167969,487.609375,174.71875,540.441406,139.226562,593.378906)\n    C(135.324219,599.277344,133.390625,605.71875,133.425781,612.707031)\n    C(181.140625,612.0625,228.839844,612.707031,276.519531,614.640625)\n    C(299.855469,626.347656,319.835938,642.457031,336.464844,662.960938)\n    C(347.5,678.792969,353.6875,686.164062,361.554688,702.679688)\n    C(370.042969,686.503906,410.554688,632.058594,450.550781,614.640625)\n    C(496.941406,612.707031,543.351562,612.0625,589.777344,612.707031)\n    C(590.355469,608.640625,589.714844,604.777344,587.84375,601.113281)\n    C(551.914062,547.964844,516.464844,494.492188,481.492188,440.6875)\n    C(422.78125,436.40625,363.875,434.25,304.761719,434.214844)\n    Z\n    M(304.761719,434.214844)\n)\n\n    //d = line\n    //S = shape\n    d *= 0.1;\n    return S*d;    \n}\n\nfloat sdfIronFist(vec2 p)\n{ \n    p.y -= 0.14;\n    \n    //Boxes\n    vec2 boxUV = p;\n    boxUV.y -= 0.5;\n    float boxHeight = 0.14;\n    \n    //Ring\n    float ra = 0.63;\n    float rb = 0.42;\n    float d = 0.1;\n    \n    p.y += 0.15;\n    p.x = abs(p.x);\n    float a = (ra*ra - rb*rb + d)/d;\n    float b = sqrt(max(ra*ra-a*a,0.0));\n    \n    float circle = (length(p)-ra) -rb;\n    \n    //return boxOutput;    \n    return circle;\n\n}\n\n// IRON HANDS .....................................................\nfloat SVG_IronHands(vec2 uv) \n{\n    float _x, _y, x0, y0; // d = 1e38; \n    uv.y -= .9;\n    uv.x += .9;\n    uv *= 550.;  // scaling\n    uv.y = -uv.y; //mirror \n   \n   \npath(           \n    M(510.552455, 964.53683)\n    L(332.081473, 835.295759)\n    L(392.488839, 708.90625)\n    L(320.803571, 700.46875)\n    L(320.803571, 693.409598)\n    L(400.814732, 680.758929)\n    L(400.814732, 669.481027)\n    L(356.858259, 591.367188)\n    C(355.697545, 589.151786, 356.328125, 586.517857, 358.225446, 585.039062)\n    L(372.773438, 576.819196)\n    L(317.220982, 408.046875)\n    L(330.714286, 399.827009)\n    L(299.827009, 269.21317)\n    L(308.258929, 263.627232)\n    L(295.401786, 193.314732)\n    L(299.827009, 190.680804)\n    L(296.24442, 146.300223)\n    L(320.803571, 132.912946)\n    L(331.032366, 183.828125)\n    L(339.570312, 184.458705)\n    L(349.581473, 252.34933)\n    L(362.020089, 251.819196)\n    L(389.748884, 354.916295)\n    L(378.465402, 225.675223)\n    L(388.270089, 224.308036)\n    L(379.83817, 141.450893)\n    L(388.270089, 141.450893)\n    L(389.642857, 75.457589)\n    L(416.311384, 71.24442)\n    L(423.376116, 141.450893)\n    L(431.808036, 142.81808)\n    L(434.654018, 217.243304)\n    L(443.085938, 217.243304)\n    L(461.322545, 315.597098)\n    L(464.168527, 189.202009)\n    L(473.973214, 189.202009)\n    L(471.127232, 102.131696)\n    L(478.191964, 102.131696)\n    L(485.251116, 38.878348)\n    L(514.475446, 39.564732)\n    L(517.511161, 97.912946)\n    L(525.524554, 97.912946)\n    L(524.575893, 188.889509)\n    L(534.799107, 189.202009)\n    L(534.799107, 352.176339)\n    L(548.504464, 218.722098)\n    L(559.257812, 220.089286)\n    L(559.257812, 128.800223)\n    L(568.426339, 128.482143)\n    L(571.060268, 63.337054)\n    L(600.580357, 67.02567)\n    L(604.481027, 129.324777)\n    L(610.066964, 131.646205)\n    L(613.018973, 221.88058)\n    L(621.344866, 224.726562)\n    L(614.492188, 363.348214)\n    C(614.492188, 363.348214, 629.988839, 368.939732, 629.988839, 390.022321)\n    C(629.988839, 411.104911, 667.940848, 316.969866, 667.940848, 316.969866)\n    L(667.940848, 257.935268)\n    C(667.940848, 257.935268, 684.804688, 228.420759, 694.609375, 231.266741)\n    C(704.414062, 234.112723, 714.324777, 316.969866, 714.324777, 316.969866)\n    C(714.324777, 316.969866, 722.756696, 316.969866, 725.602679, 326.768973)\n    C(728.448661, 336.573661, 693.342634, 422.276786, 693.342634, 422.276786)\n    C(693.342634, 422.276786, 697.561384, 426.495536, 694.715402, 440.513393)\n    C(691.86942, 454.53683, 645.591518, 572.600446, 645.591518, 572.600446)\n    C(645.591518, 572.600446, 666.674107, 578.186384, 668.046875, 588.097098)\n    C(669.414062, 597.901786, 624.508929, 670.954241, 624.508929, 670.954241)\n    L(698.934152, 689.190848)\n    L(698.934152, 700.46875)\n    L(625.245536, 711.858259)\n    L(684.910714, 833.822545)\n    Z\n    M(510.552455, 964.53683)\n)\n\n    //d = line\n    //S = shape\n    d *= 0.1;\n    return S*d;    \n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SWITCH_VALUE 0.999\n\n// Buffer to store texture switch data and bounce values\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float bounceTime = sin(iTime)*0.5+0.5;\n    float bounceVal = min(1.,pcurve(bounceTime,0.0,0.3));          \n\n    int currentLogoID = int(logoID(iChannel0)*255.);\n    float hasLogoChanged = logoIdChanged(iChannel0);\n    \n    //currentLogoID = 0;\n    if(bounceTime >= SWITCH_VALUE && hasLogoChanged == 0.)\n    {\n        hasLogoChanged = 1.;\n        currentLogoID++;\n        \n#if defined(USING_PREVIEW)\n        currentLogoID = int(mod(float(currentLogoID), float(LOGO_NUMBER_PREVIEW)));\n#elif defined(LOOP_BETWEEN_LOGOS)\n        currentLogoID = int(mod(float(currentLogoID), float(LOGO_NUMBER)));\n#endif\n\n    }\n    else\n    {\n        // in case bounceTime is, during a couple a frame, equal to 1\n        // we need to be sure that we only change currentLogoID once\n        // however, if you have low framerates, it can skip\n        hasLogoChanged = step(SWITCH_VALUE, bounceTime); \n    }\n    \n    fragColor = vec4(0.);\n    fragColor.x = float(currentLogoID)/255.;\n    fragColor.y = bounceVal;    \n    fragColor.z = bounceTime;\n    fragColor.w = hasLogoChanged;\n   \n}","name":"Buffer A","description":"","type":"buffer"}]}