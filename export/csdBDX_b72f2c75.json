{"ver":"0.1","info":{"id":"csdBDX","date":"1697706268","viewed":101,"name":"Camera Grid","username":"pedrogarlaschi","description":"grid magnifying glass experiment","likes":1,"published":1,"flags":2,"usePreview":0,"tags":["grid","camera","magnifying"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized coordinates [0,1]\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Correct for aspect ratio to make the grid cells perfect squares\n    float aspectRatio = iResolution.x / iResolution.y;\n    uv.x *= aspectRatio;\n\n    // Grid size\n    float gridSize = 5.;\n    \n    // Calculate grid cell size\n    vec2 cellSize = vec2(1.0) / gridSize;\n    \n    // Cell indices [0, gridSize-1]\n    vec2 cell = floor(uv * gridSize);\n    \n    // Remap UV to local cell coordinates [0,1]\n    vec2 localUv = mod(uv, cellSize) / cellSize;\n\n    // Rounded corners mask\n    float borderRadius = 1.0;\n    float mask = smoothstep(0.0, 0.02, borderRadius - length(localUv*2.0-1.0));\n\n    // Magnifying effect\n    vec2 toCenter = vec2(0.5) - localUv;\n    float distanceToCenter = length(toCenter);\n    float magnifyStrength = 1.9; \n    float magnify = 1.0 - magnifyStrength * (0.5 - distanceToCenter); \n    vec2 magnifiedUv = vec2(0.5) + toCenter * magnify;\n\n    // Flip the Y-axis\n    magnifiedUv.y = 1.0 - magnifiedUv.y;\n\n    // Sample webcam texture with the magnified UVs\n    vec4 webcamColor = texture(iChannel0, magnifiedUv);\n    \n    // Apply rounded mask\n    vec4 bgColor = vec4(0.0, 0.0, 0.0, 1.0); // White background color\n    fragColor = mix(bgColor, webcamColor, mask);\n\n    // Vignetting effect over the entire image\n    float vignetteStrength = 0.8; // Adjust this value as needed\n    float distFromCenter = length(uv - vec2(0.5*aspectRatio, 0.5));\n    float vignette = 1.0 - vignetteStrength * smoothstep(0.3, 0.8, distFromCenter);\n\n    fragColor.rgb *= vignette;\n}","name":"Image","description":"","type":"image"}]}