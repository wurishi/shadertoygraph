{"ver":"0.1","info":{"id":"Wd2cDy","date":"1587364651","viewed":241,"name":"Subsurface Scattering Approx","username":"sanjanarao","description":"CIS461 University of Pennsylvania\n\nBottom and Right hemisphere materials subsurface scatter. The left hemisphere is a solid lambert material for contrast.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cis461"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int RAY_STEPS = 256;\nconst vec3 lightPos = vec3(0., 3., 3.);\nconst vec3 eyePos = vec3(0.0, 2., -20.0);\nconst vec3 refPos = vec3(0., 2.5, 0.);\nconst float PI = 3.14159265359;\nconst float FOVY = 19.5 * PI / 180.;\n\n// Toggle ATTENUATION \nconst bool ATTENUATION = false;\n// Adjust these to alter where the subsurface glow shines through and how brightly\nconst float FIVETAP_K = 2.0;\nconst float AO_DIST = 0.085;\n\n// The larger the DISTORTION, the smaller the glow\nconst float DISTORTION = 0.2;\n// The higher GLOW is, the smaller the glow of the subsurface scattering\nconst float GLOW = 6.0;\n// The higher the BSSRDF_SCALE, the brighter the scattered light\nconst float BSSRDF_SCALE = 3.0;\n// Boost the shadowed areas in the subsurface glow with this\nconst float AMBIENT = 0.0;\n// Toggle this to affect how easily the subsurface glow propagates through an object\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n\n/***************** BASIC SCENE SET UP *******************/\n    \n#define FLOOR_SDF plane(pos, vec4(0, 1, 0, 2.5));\n#define LEFT_WALL_SDF plane(pos, vec4(1, 0, 0, 5));\n#define RIGHT_WALL_SDF plane(pos, vec4(-1, 0, 0, 5));\n#define BACK_WALL_SDF plane(pos, vec4(0, 0, -1, 5));\n#define CEILING_SDF plane(pos, vec4(0, -1, 0, 7.5));\n#define GROUND_SPHERE_SDF sphere(rotateY(pos + vec3(0., 2.5, 0.), 27.5 * 3.14/180.0), 4., vec3(-2.0, 0.0, -3.0));\n#define RIGHT_SPHERE_SDF sphere(pos + vec3(0., 2.5, 0.), 4., vec3(5.0, 7.0, -5.0));\n#define LEFT_SPHERE_SDF sphere(pos + vec3(0, 2.5, 0.), 4., vec3(-5.0, 7.0, -5.0));\n    \nconst int FLOOR_ID = 0;\nconst int LEFT_WALL_ID = 1;\nconst int RIGHT_WALL_ID = 2;\nconst int BACK_WALL_ID = 3;\nconst int CEILING_ID = 4;\nconst int GROUND_SPHERE_ID = 5;\nconst int RIGHT_SPHERE_ID = 6;\nconst int LEFT_SPHERE_ID = 7;\n\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat sphere(vec3 p, float r, vec3 c) {\n    return distance(p, c) - r;\n}\n\nfloat sceneMap3D(vec3 pos) {\n    float flr = FLOOR_SDF;\n    float left_wall = LEFT_WALL_SDF;\n    float right_wall = RIGHT_WALL_SDF;\n    float back_wall = BACK_WALL_SDF;\n    float ceiling = CEILING_SDF;\n    float ground_sphere = GROUND_SPHERE_SDF;\n    float right_sphere = RIGHT_SPHERE_SDF;\n    float left_sphere = LEFT_SPHERE_SDF;\n    return min(back_wall, min(left_wall, min(right_wall, \n       min(ceiling, min(flr, min(ground_sphere, min(right_sphere, left_sphere)))))));\n}\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj) {\n    t = FLOOR_SDF;\n    obj = FLOOR_ID;\n\n    float t2 = LEFT_WALL_SDF\n    if (t2 < t) {\n        t = t2;\n        obj = LEFT_WALL_ID;\n    } \n    t2 = RIGHT_WALL_SDF;\n    if (t2 < t) {\n        t = t2;\n        obj = RIGHT_WALL_ID;\n    }\n    t2 = BACK_WALL_SDF;\n    if (t2 < t) {\n        t = t2;\n        obj = BACK_WALL_ID;\n    }\n    t2 = CEILING_SDF;\n    if (t2 < t) {\n        t = t2;\n        obj = CEILING_ID;\n    }\n    t2 = GROUND_SPHERE_SDF;\n    if (t2 < t) {\n        t = t2;\n        obj = GROUND_SPHERE_ID;\n    }\n    t2 = RIGHT_SPHERE_SDF\n    if (t2 < t) {\n        t = t2;\n        obj = RIGHT_SPHERE_ID;\n    }\n    t2 = LEFT_SPHERE_SDF;\n    if (t2 < t) {\n        t = t2;\n        obj = LEFT_SPHERE_ID;\n    }\n}\n\n/***************** RAY MARCHING LOGIC *******************/\n\nvec3 rayCast(vec3 eye, vec3 ref, vec2 uv) {\n\n    float len = tan(FOVY) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + uv.x * H + uv.y * V;\n    return normalize(p - eye);\n}\n\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01) { return; }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\n/***************** EFFECTS *******************/\n\nfloat fiveTapAO(vec3 p, vec3 n, float k) {\n    float aoSum = 0.0;\n    for(float i = 0.0; i < 5.0; ++i) {\n        float coeff = 1.0 / pow(2.0, i);\n        aoSum += coeff * (i * AO_DIST - sceneMap3D(p + n * i * AO_DIST));\n    }\n    return 1.0 - k * aoSum;\n}\nfloat subsurface(vec3 lightDir, vec3 normal, vec3 viewVec, float thickness) {\n    vec3 scatteredLightDir = lightDir + normal * DISTORTION;\n    float lightReachingEye = pow(clamp(dot(viewVec, -scatteredLightDir), 0.0, 1.0), GLOW) * BSSRDF_SCALE;   \n    float attenuation = 1.0;\n    if (ATTENUATION) { attenuation = max(0.0, dot(normal, lightDir) + dot(viewVec, -lightDir)); }\n\tfloat totalLight = attenuation * (lightReachingEye + AMBIENT) * thickness;\n    return totalLight;\n}\n\n/***************** MATERIALS *******************/\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 nor, vec3 lightDir, vec3 view, float thick) {\n    float lambert = max(0., dot(lightDir, nor));\n    \n    if (hitObj == GROUND_SPHERE_ID) {\n       vec3 color = vec3(1.0, 0.88, 0.7) * vec3(1.0, 0.67, 0.67) * max(0.0, dot(nor, lightDir));\n       return color + vec3(1.0, 0.67, 0.67) * subsurface(lightDir, nor, view, thick) * vec3(1.0, 0.88, 0.7);\n    } else if (hitObj == RIGHT_SPHERE_ID) {         \n       vec3 color = vec3(0.45, 0.45, 1.0) * vec3(1.0, 0.67, 0.67) * max(0.0, dot(nor, lightDir));\n       return color + vec3(0.45, 0.45, 1.0) * subsurface(lightDir, nor, view, thick) * vec3(1.0, 0.88, 0.7);\n    } else {\n        return vec3(0.15, 0.15, 1.0)  * lambert;\n    }\n}\n\n/***************** BASIC FUNCTIONALITY *******************/\n\nIntersection sdf3D(vec3 dir, vec3 eye)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = normalize(computeNormal(isect));\n\n    //oscillating light\n    float radius = 3.;\n    \n    float x  = 5. + radius * cos(iTime);\n    float z  = 2. + radius * sin(iTime);\n      \n    vec3 lightDir = normalize(vec3(x,3.,z) - isect);\n\n    //SSS logic\n    float thickness = fiveTapAO(isect, -nor, FIVETAP_K);\n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect), thickness);\n    \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //Convert to range [-1,1]\n    uv = uv * 2.0 - vec2(1.);\n    \n    vec3 eye = eyePos;\n    vec3 ref = refPos;\n\n    vec3 dir = rayCast(eye, ref, uv);\n    \n    Intersection isect = sdf3D(dir, eye);\n     \n    // Output to screen\n    fragColor = vec4(isect.color, 1.);\n    \n\n}","name":"Image","description":"","type":"image"}]}