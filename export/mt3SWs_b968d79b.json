{"ver":"0.1","info":{"id":"mt3SWs","date":"1685862876","viewed":95,"name":"Spinning Fractal Neon","username":"POOGLIES","description":"Following this tutorial: https://www.youtube.com/watch?v=f4s1h2YETNY&t=555s\n","likes":0,"published":1,"flags":64,"usePreview":0,"tags":["music","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"ldt3z4","filepath":"https://soundcloud.com/rainbowtripmusic/psychedelicmushroomstripexperience?si=e69ced74457145dd8f2f40dc1441dcc3","previewfilepath":"https://soundcloud.com/rainbowtripmusic/psychedelicmushroomstripexperience?si=e69ced74457145dd8f2f40dc1441dcc3","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotateAndScale(vec2 point, float wave, float i)\n{\n    // scale over time\n    float scale = 0.4 + (sin(iTime * 0.1) * 0.65) + (i * 0.45) ;\n    point *= scale;\n\n    // rotate over time\n    float degree = iTime * pow(1.7,i+1.0); \n    \n    vec2 pivot = vec2(0.0);\n    float radAngle = -radians(degree);// \"-\" - clockwise\n    float x = point.x;\n    float y = point.y;\n\n    float rX = pivot.x + (x - pivot.x) * cos(radAngle) - (y - pivot.y) * sin(radAngle);\n    float rY = pivot.y + (x - pivot.x) * sin(radAngle) + (y - pivot.y) * cos(radAngle);\n\n    point = vec2(rX, rY);\n\n    // move over time\n    point.x += iTime * pow(0.31, i + 1.0) ;\n    point.y += iTime * -pow(0.27, i + 1.0);\n    \n    return point;\n}\n\n\n// cosine based palette, 4 vec3 params\nvec3 palette( in float t)\n{\n    vec3 a = vec3(0.648, 0.828, 0.738);\n    vec3 b = vec3(0.448, 0.228, 0.268);\n    vec3 c = vec3(3.138, 2.488, 1.858);\n    vec3 d = vec3(1.078, -0.132, 0.358);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec2 uv0 = uv;\n    float j = length(uv);\n\n    float wave = texture(iChannel0, vec2(j, j)).x;\n\n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 4.0; i++) {\n        float magi = 1.0 + (wave * 2.0 - 1.0) * (0.15 * i);\n        \n        uv = rotateAndScale(uv, magi, i);\n        uv = fract(uv * 1.5) - 0.5;\n        \n        float d = (length(uv) * magi) * exp(-length(uv0));\n    \n        vec3 col = palette((length(uv0) + magi) + i*.4 + iTime / 8.0);\n    \n        d = sin(d * 8.0 + iTime) / 8.0;\n        d = abs(d);\n    \n        d = pow(0.01 / d, 2.0);\n    \n        finalColor += col * d ;\n    }\n    \n \n    uv0 = rotateAndScale(uv0, wave, 1.0) * 0.7;\n    float tex = texture(iChannel1, uv0).x;\n    \n    float timeScaleClouds = 0.1 + (sin(iTime * 0.7) + 1.0) * 0.75;\n    \n    tex = 1.0 / pow(0.4/tex, 2.0) * timeScaleClouds; \n    \n    vec3 col = vec3(tex);\n\n    fragColor = vec4(finalColor * col, 1.0);\n\n  //fragColor = vec4(rbg); \n    \n    \n    //fragColor = vec4(waver, waveg, waveb, 1.0);\n}","name":"Image","description":"","type":"image"}]}