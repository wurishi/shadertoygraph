{"ver":"0.1","info":{"id":"tdjyWK","date":"1589475105","viewed":187,"name":"Study about procedural warping","username":"D4v1D","description":"Freely inspired by https://www.shadertoy.com/view/MdSXzz\nWill be a work in progress for long time, as a study about procedural shaders\n// Created by inigo quilez - iq/2014\n// License Creative Commons Attribution-NonComm","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","warping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const mat2 m = mat2(2.1,2.1,3.9,2.7);\nfloat hash( vec2 p ) { float h = dot(p,vec2(1.,1.)); return -1.0+2.0*fract(sin(h)*777.); }\n\nfloat noise( in vec2 p) \n{   vec2 i = floor(p); vec2 f = (fract(p)); vec2 u = f*f*(3.0-2.0*f);\n    return mix(mix( hash(i + vec2(0.0,0.0)), hash( i + vec2(1.0,.0)), u.x),\n                mix( hash( i + vec2(0.0,1.0)), hash( i + vec2(1.0,1.0)), u.x), u.y); }\n\nfloat fbm(vec2 p) \n{   float f = 0.1;\n          f -= 0.31 - noise(p);\n          p /= m*p/0.09; return f*1.4;}\n\nvec2 fbm2( in vec2 p) \n\t{return vec2( fbm(p.xy), fbm(p.xy) );}\n\nvec3 map( vec2 p )\n{   p *= 1.0; \n    float f = dot(fbm2(tan(.9)*(iTime - atanh(noise(sin(p)))-fbm2(0.9-(p - fbm2(3.0*p)))) ), vec2(0.5,0.8));\n    float bl = smoothstep(-.2,-0.9, sin(f));\n    float ti = smoothstep(.0,1.0, fbm((p*f)) ); // highlight color amount;\n    return mix( mix( vec3(0.0,0.1,.3), vec3(0.0,0.75,.6), bl ), vec3(.8,0.5,.40), ti );}     \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   vec2 p = (-iResolution.xy+5.*fragCoord.xy)/iResolution.y;\n    float e = 1.0;\n    vec3 colc = map(e+p);\n    float gc = dot(colc,vec3(30.));\n    vec3 cola = map(sin(p)/asinh(e)*.9 + dot(colc,vec3(.0)) - vec2(e,3.0));\n    float ga = dot(cola,vec3(6.1));\n    vec3 colb = map(p - vec2(4.0,e));\n \t \n    float gb = dot(colb,vec3(0.333)); //vec3 nor = normalize( vec3(ga-gc, e, gb-gc ) );\n    vec3 col = colc; // colc becomes col\n    col += vec3(0.1,0.1,.41)*.1*abs(.20*gc*ga-gb); // defines color for highlight in outlines/borders\n    vec2 q = -fragCoord.xy/iResolution.xy; // this traces screen coordinates;\n    col *= pow(1.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.1);  // canva vignette   \n   \n    fragColor = vec4(col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}