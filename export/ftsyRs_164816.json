{"ver":"0.1","info":{"id":"ftsyRs","date":"1648557052","viewed":120,"name":"Rock Islands","username":"MasterQ32","description":"This shader renders tiny rock islands in the sea.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["water","parallax","particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid sampleLevel(in vec2 uv, out float inside, out float border)\n{\n    const float threshold = 0.7;\n    float v = texture(iChannel0, uv).x;\n    \n    inside = step(threshold, v);\n    border = step(v - 0.01, threshold) * inside;\n}\n\nvoid sampleParticle(in vec2 uv, in float rot, out float strength)\n{\n    const float threshold = 0.1;\n    \n    vec2 dir = vec2(sin(rot), cos(rot));\n    \n    float v0 = texture(iChannel0, 7.0 * uv + dir * 0.11 * iTime).x;\n    float v1 = texture(iChannel0, 32.0 * uv - dir * 0.08 * iTime).x;\n    \n    float v = v0 * v1;\n    \n    strength = pow(clamp((v - threshold) / (1.0 - threshold), 0.0, 1.0), 7.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 xy = 2.0 * uv - 1.0;\n    xy.x *= (iResolution.x / iResolution.y);    \n    xy *= 0.03;\n   \n    const float zoom = 5.0;\n    const vec3 background = vec3(0.18, 0.30, 0.32);\n   \n    vec3 col = background;\n    \n    vec2 scroll = 0.15 * (2.0 * iMouse.xy / iResolution.xy - 1.0);\n    scroll.x += 0.04 * iTime;\n    \n    const int limit = 16;\n    for(int i = 0; i < limit; i++)\n    {\n        col = mix(col, background, 0.15);\n    \n        float r = float(i) / float(limit - 1);\n        float alpha = pow(r, 1.4);\n        \n        vec2 pos = scroll + zoom * (1.5-0.3*r) * xy;\n        \n        vec3 color = texture(iChannel1, 3.0 * pos + r).rgb;\n    \n        float particle;\n        sampleParticle(0.6*pos, 3.2 * r, particle);\n        col = mix(col, vec3(1,1,1), alpha * particle);\n\n        float inside, border;\n        sampleLevel(pos, inside, border);    \n        col = mix(col, color, alpha * inside);\n        if(i == limit-1) {\n            col = mix(col, 0.5 * color, alpha * border);\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}