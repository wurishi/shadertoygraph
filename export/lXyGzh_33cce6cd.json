{"ver":"0.1","info":{"id":"lXyGzh","date":"1717275720","viewed":61,"name":"Scintillating Grid Illusion","username":"berelium","description":"I wanted to recreate the optical illusion where you see black dots where there are white dots...\nYou might have to play with `scale` and/or `thick` before you see the illusion on your screen.\nAs described here: https://en.wikipedia.org/wiki/Grid_illusion","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["grid","lines","illusion","dots","scintillating","hermann"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Messing with grid illusions!\n// The default view is the Scintillating grid, which has gray bars and white dots at intersections.\n// The Hermann grid illusion can be toggled below, which is just white bars and a black background.\n// Best viewed in fullscreen for the nicest effect, you may have to adjust the scale.\n// More info can be found here: https://en.wikipedia.org/wiki/Grid_illusion\n\n//#define HERMANN\n#define BIAS 3.0 / iResolution.y\n\nfloat circle( in vec2 p, in float r ) {\n    return smoothstep(r, r-BIAS, length(p));\n}\nfloat circles( in vec2 p, in float r, in vec2 c ) {\n    vec2 q = mod(p + 0.5*c, c) - 0.5*c;\n    return circle(q, r);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Parameters\n    int scale = 6; // Scale of the grid\n    float thick = 0.15; // Thickness of grid lines\n    float fs = float(scale);\n    \n    // Setup UV space\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    if(scale % 2 == 0) uv += 1.0 / fs;\n    uv *= 1.5; \n    uv += thick / (fs * 2.0) + (fs / 2.0); // center on middle of cell\n    \n    float m = 0.5;\n#ifdef HERMANN\n    m = 1.0;\n#endif\n    \n    float gX = step(float(mod(uv.x * fs, 1.0)), thick);\n    float gY = step(float(mod(uv.y * fs, 1.0)), thick);\n    float grid = min(m, gX + gY);\n        \n    \n    vec3 col = vec3(0.0);\n    col += grid;\n#ifndef HERMANN\n    vec2 pv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y + 1.0;\n    if(scale % 2 == 0) pv += 1.0 / fs;\n    pv *= 1.5;\n\n    col += circles(pv, thick / (fs * 1.75), vec2(1.0 / fs));\n#endif\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}