{"ver":"0.1","info":{"id":"DsKXDd","date":"1681813175","viewed":103,"name":"Interpolation between edges","username":"dashed_man","description":"Method for interpolating a value between edges to a point on a triangle","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["barycentric","interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 edge_intr( vec3 w ) {\n    // w - barycentric coords of point to interpolate\n    vec3 t = mix(w / (1. - w.zxy), vec3(1.), step(1.,w.zxy));\n    return w * t.yzx + w.yzx * (1. - t.zxy);\n}\n\n\nvec3 bary( vec3 v0, vec3 v1, vec3 v2, vec3 p ) {\n    vec3  N = cross(v1 - v0, v2 - v0);\n    float A = length(N); \n    \n    if ( A < 1e-4 )  vec3(0);\n    \n    v0 -= p;\n    v1 -= p;\n    v2 -= p;\n    \n    return N * mat3(\n        cross(v1, v2),\n        cross(v2, v0),\n        cross(v0, v1) \n    ) / (A*A);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec3 v0 = vec3(0.0, 0.7, 0.0);\n\tvec3 v1 = vec3(0.5, -0.6, 0.0);\n\tvec3 v2 = vec3(-0.5, -0.5, 0.0);\n\n\tvec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n\tvec3 bc = bary(v0, v1, v2, vec3(uv, 0.0));\n    vec3 edge_coefs = edge_intr(bc);\n\t\n    vec3 sRGB = sqrt( edge_coefs );\n    \n\tvec3 color = any(lessThan(bc,vec3(0))) ? vec3(0) : sRGB;\n\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}