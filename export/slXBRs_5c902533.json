{"ver":"0.1","info":{"id":"slXBRs","date":"1651290094","viewed":124,"name":"Plasma texture from scratch","username":"Dubswitcher","description":"Random coding spree I went on today. Felt like trying my hand at a more natural noise texture for once, which I have been terrified of messing with up until now.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","cloud","texture","plasma","random","hash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash (in vec2 uv) {\n    vec3 p = vec3(dot(uv.xy,vec2(123.,456.)),dot(uv.xy,vec2(789.,112.)),dot(uv.xy,vec2(345.,678.)));\n    return fract(dot(fract(sin(p*10.)*5000.),vec3(987.,654.,321.)));\n}\n\nvec2 rot(in vec2 uvi, in float r, in vec2 o)\n{\n    float t = radians(r*360.);\n    vec2 uv = uvi-0.5+o;\n    uv *= mat2(cos(t),-sin(t),sin(t),cos(t));\n    return uv+0.5-o;\n}\n\nfloat ease (in float p) {\n    return pow(p,2.)*(3.-2.*p);\n}\n\nfloat noise(in vec2 uv, in float s, in float ofs)\n{\n    vec2 t = floor(uv*s)/s;\n    vec2 b = ceil(uv*s)/s;\n    vec2 g = fract(uv*s);\n    \n    highp float p[4] = float[4](hash(t+ofs),\n                          hash(vec2(b.x,t.y)+ofs),\n                          hash(vec2(t.x,b.y)+ofs),\n                          hash(b+ofs));\n    \n    return mix(mix(p[0],p[1],ease(g.x)),mix(p[2],p[3],ease(g.x)),ease(g.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 sq = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    sq += noise(sq+vec2(iTime/13.,0.),6.,2.2)/12.;\n    sq += noise(sq+vec2(0.,iTime/-18.),7.,2.6)/12.;\n    vec3 col = vec3(noise(sq+iTime/10.,10.,0.));\n    col += vec3(noise(rot(sq,0.73,vec2(0.6))+iTime/10.,4.,0.8));\n    col += vec3(noise(rot(sq,0.4,vec2(0.4))+iTime/10.,18.,0.3))/2.;\n    col += vec3(noise(rot(sq,0.6,vec2(0.1))+iTime/10.,25.,0.1))/3.;\n    col += vec3(noise(rot(sq,0.35+iTime/400.,vec2(-3.))+iTime/10.,50.,0.6))/6.;\n    col /= 2. + 0.5 + 1./3. + 1./6.;\n    \n    vec3 c1 = vec3(0.1,0.5,0.9)*smoothstep(0.3,0.6,col);\n    vec3 c2 = vec3(0.8,0.14,0.1)*smoothstep(0.5,0.0,col);\n    vec3 c3 = vec3(0.11,0.9,0.0)*smoothstep(0.4,1.0,col);\n    col = c1+c2+c3;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}