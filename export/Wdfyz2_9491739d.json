{"ver":"0.1","info":{"id":"Wdfyz2","date":"1585111423","viewed":193,"name":"Drunk border","username":"mmis1000","description":"Add a feedback loop to a normal vector shader.","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{        \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    // Output to screen\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float light(in vec4 c) {\n\treturn (c.r + c.g + c.b) / 3.0;\n}\n\nvec2 vector(in float r, in float d) {\n\treturn vec2(cos(r), sin(r)) * d;\n}\n\nvec3 hueShift(vec3 col, float shift){\n    vec3 m = vec3(cos(shift), -sin(shift) * .57735, 0);\n    m = vec3(m.xy, -m.y) + (1. - m.x) * .33333;\n    return mat3(m, m.zxy, m.yzx) * col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{        \n    float DISTANCE = 2.0;\n    int RAY = 8;\n    float LAG_VECTOR = 0.97;\n    \n    vec2 sum = vec2(0, 0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    for (int i = 0; i < RAY; i++) {\n        vec2 offset = vector(float(i) / float(RAY) * 3.14159 * 2.0, DISTANCE);\n        vec2 uvo = \n            (\n                fragCoord \n                + offset\n            )\n            / iResolution.xy;\n        \n        sum = sum + normalize(offset) * light(texture(iChannel0, uvo));\n    }\n    \n    sum = sum * 16.0 / float(RAY);\n    \n    float strength = length(sum);\n    float direction = atan(sum.y, sum.x);\n    fragColor = \n        vec4(hueShift(vec3(strength, 0.0, 0.0), direction), 1.0) * (1.0 - LAG_VECTOR / 1.1)\n        + texture(iChannel1, uv + vec2(1.0, 0.0) / iResolution.xy) * LAG_VECTOR * 0.25\n        + texture(iChannel1, uv + vec2(0.0, 1.0) / iResolution.xy) * LAG_VECTOR * 0.25\n        + texture(iChannel1, uv + vec2(-1.0, 0.0) / iResolution.xy) * LAG_VECTOR * 0.25\n        + texture(iChannel1, uv + vec2(0.0, -1.0) / iResolution.xy) * LAG_VECTOR * 0.25;\n    // Output to screen\n}","name":"Buffer B","description":"","type":"buffer"}]}