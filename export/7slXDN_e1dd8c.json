{"ver":"0.1","info":{"id":"7slXDN","date":"1618683566","viewed":41,"name":"314_Zhmakina","username":"kabutakot","description":"Magic Ball","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["magic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec3 CAMERA_POS = vec3(0, 1.2, -6);\nconst vec4 LIGHT1_COLOR = vec4(1, 1, 1, 1);\nconst vec4 LIGHT2_COLOR = vec4(0.9, 0.7, 0, 1);\n\nconst int EMISSION = 0;\nconst int DIFFUSE = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\n\nconst float GLASS_N = 1.5;\nconst float AIR_N = 1.0;\n\nconst float INF = 1e10;\nconst float EPS = 1e-3;\nconst float MARCH_SIZE = 0.01;\n\nconst float LIGHT1_RADIUS = 0.25;\nconst float LIGHT1_INTENSIVE = 10.0;\nconst float LIGHT2_RADIUS = 0.15;\nconst float LIGHT2_INTENSIVE = 5.0;\n\nfloat tracePlane(vec3 position, vec3 direction, out vec3 normal) {\n    float t = (-1.2 - position.y) / direction.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = position + t * direction;\n    if (dot(worldPos.x, worldPos.x) >= 30.0 || dot(worldPos.z, worldPos.z) >= 30.0) {\n        return INF;\n    }\n    \n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 position, vec3 direction, float r, out vec3 normal) {\n    float b = dot(position, direction);\n    float D = b * b - dot(position, position) + r * r;\n    if (D < 0.0) {\n        return INF;\n    }\n    \n    float t = -b - sqrt(D);\n    if (t < 0.0)\n        t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(position + t * direction);\n    return t;\n}\n\nfloat traceCylinder(vec3 position, vec3 direction, out vec3 normal) {\n    float t = (-1.0 - position.y) / direction.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = position + t * direction;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(direction.xz, direction.xz);\n    float b = dot(position.xz, direction.xz);\n    float c = dot(position.xz, position.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    \n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = position + t * direction;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    \n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    \n    worldPos = position + t * direction;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 position, vec3 target) {\n    vec3 rvec = target - position;\n    float dist = length(rvec);\n    vec3 dir = rvec / dist;\n    \n    vec3 normal = vec3(0, 0, 0);\n    \n    float t = traceSphere(position, dir, 1.0, normal);\n    if (dist >= t) {\n        return true;\n    }\n    vec3 cylNormal = normal;\n    t = traceCylinder(position, dir, cylNormal);\n    return (t > 0.0 && dist >= t);\n}\n\nvec3 randVals;\nvec3 randDir;\n\nvec3 computeLight(vec3 position, vec3 color, vec3 normal, vec3 viewVec, vec3 lp1, vec3 lp2) {\n    vec3 lightPos = lp1 + randDir * LIGHT1_RADIUS;\n    vec3 toLight = lightPos - position;\n    bool occl = isOccluded(position + normalize(toLight) * EPS, lightPos);\n    float lightAtten = 20.0f / dot(toLight, toLight) * (occl ? 0.0 : 1.0);\n\n    vec3 light2Pos = lp2 + randDir * LIGHT2_RADIUS;\n    vec3 toLight2 = light2Pos - position;\n    bool occl2 = isOccluded(position + normalize(toLight2) * 1e-3, light2Pos);\n    float light2Atten = 10.0f / dot(toLight2, toLight2) * (occl2 ? 0.0 : 1.0);\n\n    return color * (\n        max(0.0f, dot(normal, normalize(toLight))) * lightAtten * LIGHT1_COLOR\n        + max(0.0f, dot(normal, normalize(toLight2))) * light2Atten * LIGHT2_COLOR\n        + textureLod(iChannel1, viewVec, 10.0) * 0.3).rgb;\n}\n\nvec3 refraction(vec3 v_in, vec3 normal, float n1, float n2) {\n    if (dot(v_in, normal) < 0.0)\n        normal = -normal;\n    float cosA = dot(v_in, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v_in - cosA * normal);\n    float sinB = n1 * sinA / n2;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return tang * sinB + normal * cosB;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\n\n\nfloat ABSORBTION = 10.0;\nvec3 minecraft (in vec2 w) {\n\n    vec3 d = vec3(w, 1) / iResolution - 0.5;\n    vec3 p, c, f;\n    vec3 g = d; \n    vec3 o = vec3(2.1, 0.0, 8.0);\n    o.y = 3.0 * cos(o.x * o.z);\n    vec3 y = vec3(1, 2, 0);\n\n    for (float i = 0.0; i < 7.0; i += 0.01) {\n        o += d * i * 0.01;\n        c = o;\n        f = fract(c);\n        p = floor(c) * 0.3;\n        if (cos(p.z) + sin(p.x) > ++p.y) {\n\t    \tg = (f.y - 0.04 * cos((c.x + c.z) * 30.0) > 0.9 ? y : f.y * y.yxz) / i;\n            break;\n        }\n    }\n    \n    return g.rgb;\n}\nfloat fogSdf(vec3 pos) {\n    return length(pos) - 0.5;\n}\nfloat BeerLambert(float absorbtion, float distanceTraveled) {\n    return exp(-absorbtion * distanceTraveled);\n}\nvec3 from_rbg(vec3 c) {\n    vec4 v = vec4(1.0, -1.0 / 2.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, v.wz), vec4(c.gb, v.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\nvec3 to_rgb(vec3 c) {\n    vec4 q = vec4(2.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + q.xyz) * 6.0 - q.www);\n    return c.z * mix(q.xxx, clamp(p - q.xxx, 0.0, 1.0), c.y);\n}\nvec4 Fog(vec3 position, vec3 direction, in vec2 fragCol) {\n\n    float t = fogSdf(position);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = position + (float(i) * MARCH_SIZE + t) * direction;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    vec3 color = minecraft(fragCol);\n    vec3 tmp = from_rbg(color);\n    tmp.x /= 1.2;\n    tmp.z *= 3.0;\n    color = to_rgb(tmp);\n    color *= 1.2;\n    return vec4(color * totalAbs, 1.0 - opacity);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    vec3 LIGHT1_POS = vec3(-3, 1.5, 0) + dot(vec3(0.5,0.5,0.5),randVals) * 0.05;\n    vec3 LIGHT2_POS = vec3(2, 0.5, 1) + dot(vec3(0.5,0.5,0.5),randVals) * 0.05;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 6; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            normal = planeNorm;\n            if (randVals.y < 0.2) {\n                materialType = REFLECTION;\n            } \n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n\n        }\n        \n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            normal = l1Norm;\n            color = LIGHT1_COLOR.rgb;\n        }\n        \n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            normal = l2Norm;\n            color = LIGHT2_COLOR.rgb;\n        }\n        \n        vec3 sphNorm;\n        float sphT = traceSphere(curPos, curDir, 1.0, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            if (randVals.x * 0.7 < GLASS_R) {\n                materialType = REFLECTION;\n            } \n            else {\n                materialType = REFRACTION;               \n            }\n        }\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = curPos + t * curDir;\n            normal = cylNorm;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n        }\n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n           \n            if (materialType == EMISSION) {\n                fragColor.rgb = color;\n                break;\n            } \n            else if (materialType == DIFFUSE) {\n                fragColor.rgb += computeLight(worldPos, color, normal, curDir, LIGHT1_POS, LIGHT2_POS) * colorMult;\n                break;\n            } \n            else if (materialType == REFLECTION) {\n                fragColor.rgb += computeLight(worldPos, color, normal, curDir, LIGHT1_POS, LIGHT2_POS) * colorMult;\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * EPS;\n            }\n            else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, sphNorm, n1, n2);\n                curPos = worldPos + curDir * EPS;\n                \n                float tmp = n1;\n                n1 = n2;\n                n2 = tmp;\n                \n                vec4 fog = Fog(curPos, curDir, fragCoord);\n                fragColor.rgb += fog.rgb * fog.a * colorMult;\n                colorMult = colorMult - fog.a;\n                \n            }\n            \n        } \n        else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult * 0.5;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv) + texture (iChannel1,uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}