{"ver":"0.1","info":{"id":"WlBXzw","date":"1565324498","viewed":440,"name":"Shadertoy JS Speedup Hack","username":"ttg","description":"Try it or copy:\n      [b][[/b]url][url] javascript: H=location.host;E=(H?window:opener).Effect;P=E.prototype;if(!E.P)E.P=P.Paint;P.Paint=function(...A){for(i=0;i<20;i++)E.P.apply(this,A);};if(!H)close();[/url][/url]\n\n[url]WlBXzw[/url]\nSee source comments.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["test","hack"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nShadertoy JS hack to do multiple passes of each buffer per screen refresh.\n\nThe BBCode (copy and paste into description or comment):\n\n[url] javascript: H=location.host;E=(H?window:opener).Effect;P=E.prototype;if(!E.P)E.P=P.Paint;P.Paint=function(...A){for(i=0;i<20;i++)E.P.apply(this,A);};if(!H)close();[/url]\n\nEdit here to change N passes...................................................................................................^^\n\n\nLast tested on 2020-01-21\n\nTested in browsers:\n  Firefox 68-72\n  Chromium 75\n\nWorking in a browser not listed?\nNot working?\nFix ?\nLet me know in comment.\n\nHistory: See comments.\n\n*/\n\n/*\n\nThe test shader:\n  Top: rotate the image 1px right on each pass.\n  Bottom: highlight column (frame number % res width)\n\n*/\n\nvoid mainImage( out vec4 f, in vec2 d ) {\n    if (d.y > iResolution.y/2.) f = texelFetch(iChannel0, ivec2(d), 0);\n    else                        f = vec4(int(d.x)==iFrame%int(iResolution.x));\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ifrag = ivec2(fragCoord);\n    ivec2 ires = ivec2(iResolution);\n    if (iFrame==0) {\n        fragColor = vec4(ifrag.x==0);\n        return;\n    }\n    fragColor = texelFetch(iChannel0, (ifrag-ivec2(1,0)+ires)%ires, 0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}