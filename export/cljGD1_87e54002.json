{"ver":"0.1","info":{"id":"cljGD1","date":"1673256563","viewed":228,"name":"Octahedron Normal Vector","username":"codeonwort","description":"Test of https://knarkowicz.wordpress.com/2014/04/16/octahedron-normal-vector-encoding/\n\n[2023-01-10]\n- OctWrap() : Fixed if conditions (w -> v).\n- Decode() : Replaced saturate() with max().\n- main() : Added fake rotation test.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 0: Wrap 6 faces of cubemap to single 2D\n// 1: Sample the wrapped cubemap using direction vector\n#define MODE 1\n\nvec2 OctWrap( vec2 v ) {\n    vec2 w = 1.0 - abs( v.yx );\n    if (v.x < 0.0) w.x = -w.x;\n    if (v.y < 0.0) w.y = -w.y;\n    return w;\n}\n\nvec2 Encode( vec3 n ) {\n    n /= ( abs( n.x ) + abs( n.y ) + abs( n.z ) );\n    n.xy = n.z > 0.0 ? n.xy : OctWrap( n.xy );\n    n.xy = n.xy * 0.5 + 0.5;\n    return n.xy;\n}\n\nvec3 Decode( vec2 f )\n{\n    f = f * 2.0 - 1.0;\n \n    // https://twitter.com/Stubbesaurus/status/937994790553227264\n    vec3 n = vec3( f.x, f.y, 1.0 - abs( f.x ) - abs( f.y ) );\n    float t = max( -n.z, 0.0 );\n    n.x += n.x >= 0.0 ? -t : t;\n    n.y += n.y >= 0.0 ? -t : t;\n    return normalize( n );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n#if MODE == 0\n    vec3 dir = Decode(uv);\n    fragColor = texture(iChannel0, dir);\n#elif MODE == 1\n    float x = 2.0 * uv.x - 1.0;\n    float y = 2.0 * uv.y - 1.0;\n    float lenSq = x * x + y * y;\n    if (lenSq <= 1.0) {\n        float z = sqrt(1.0 - lenSq);\n        \n        float dt = iTime;\n        float tx = x * cos(dt) - z * sin(dt);\n        z        = x * sin(dt) + z * cos(dt);\n        x        = tx;\n        \n        vec2 st = Encode(vec3(x, y, z));\n        \n        // They should produce the same result\n        vec3 dir = Decode(st);\n        //dir = vec3(x, y, z);\n        \n        fragColor = texture(iChannel0, dir);\n        //fragColor = vec4(st, 0.0, 0.0);\n    } else {\n        fragColor = vec4(0.0);\n    }\n#endif\n}","name":"Image","description":"","type":"image"}]}