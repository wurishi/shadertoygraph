{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"vec2 cmult(vec2 q1, vec2 q2) {\n    return vec2\n        ( q1.x * q2.x - q1.y * q2.y\n        , q1.x * q2.y + q1.y * q2.x\n        );\n}\n\nvec4 qmult(vec4 q1, vec4 q2) {\n    \n    vec4 r;\n    \n    r.wy = cmult(q1.wy, q2.wy) - cmult(q1.xz, q2.xz);\n    r.xz = cmult(q1.wy, q2.xz) + cmult(q1.xz, q2.wy);\n    \n    return r;\n}\n\nvec4 stepj(vec4 cx, vec4 p) {\n    return qmult(qmult(cx, qmult(cx, cx)), qmult(cx, cx)) + p;\n}\n\nfloat iter(vec4 cx, vec4 p) \n{\n    for (int i = 0; i < 50; i++) {\n        cx = stepj(cx, p);\n    }\n  \n    return length(cx);   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 cx = fragCoord.xy / iResolution.xy * 3.0 - vec2(1.5, 1.5);\n    \n    float s = iTime;\n    float t = s / 15.0;\n          \n    vec4 qx = vec4(cx.y, 0.0, 0.0, cx.x);\n    \n    vec4 p = vec4(cos(t * 3.0), cos(t * 4.0), cos(t * 5.0), cos(t * 3.5));\n     \n    vec4 o = vec4(0.0, 0.0, 0.0, 0.0);\n        \n    float d = iter(o, qmult(qx, p));\n    \n    fragColor = vec4(cos(d * 6.0) * 0.5 + 0.5, sin(d * 6.0) * 0.1 + 0.2, sin(d * 5.0) * 0.2 + 0.4, 1.0);  \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XtBGRm","date":"1427483002","viewed":111,"name":"Morphobrot","username":"paf31","description":"Experimenting with complex complex numbers","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["4dcomplex"],"hasliked":0,"parentid":"","parentname":""}}