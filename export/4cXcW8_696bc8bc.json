{"ver":"0.1","info":{"id":"4cXcW8","date":"1721044905","viewed":92,"name":"Inverse ripples","username":"Xe_non","description":"My very first shader.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t) {\n    return vec3(t, 0.1, 0.3);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy; // Normalization\n    \n    uv = uv * 2.0 - 1.0; // Centering coords\n    uv.x *= iResolution.x / iResolution.y; // Correcting aspect ratio\n\n    float gridSize = 10.0; // Set grid size\n   \n    vec2 gridPos = floor(uv * gridSize) / gridSize; // Calculate points position\n\n    float angle = iTime * 2.5 + length(gridPos) * 7.0; // Calculate movement offset\n    vec2 offset = vec2(cos(angle), sin(angle)) * 0.1;\n\n    vec2 pointPos = gridPos + offset / gridSize; // Place points with offset\n\n    float dist = length(uv - pointPos); // Distance from (0, 0)\n\n    float intensity = smoothstep(0.02, 0.01, dist); // Smoothen the points\n\n    vec3 color = palette(intensity); // Color palette\n\n    fragColor = vec4(color, 1.0); // Ser fragment color\n}\n","name":"Image","description":"","type":"image"}]}