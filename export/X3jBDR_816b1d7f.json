{"ver":"0.1","info":{"id":"X3jBDR","date":"1729335711","viewed":73,"name":"Checkerboard pattern with AA","username":"stegu","description":"Checkerboard pattern with anti-aliasing, without the ugly jaggies you get when doing \"mod(floor(x) + floor(y), 2.0)\". Made to demonstrate that sometimes you need to completely rethink \"clever\" but naive code to do proper AA.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["checkerboard","aa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float aastep(float threshold, float value) {\n  float afwidth = fwidth(value);  // fwidth(v) is |dFdx(v)| + |dFdy(v)|\n  return smoothstep(threshold-afwidth, threshold+afwidth, value);\n}\n\nvec2 aastep(vec2 threshold, vec2 value) {\n    vec2 afwidth;\n    afwidth = fwidth(value-threshold);\n    return smoothstep(-afwidth, +afwidth, value-threshold);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Semi-normalized pixel coordinates (0 to 1 in y, uniform scaling)\n    vec2 st = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y;\n\n    // Rotate a little to show the jaggies, and scale to show more squares\n    float a = 0.1 * sin(iTime);\n    float s = sin(a);\n    float c = cos(a);\n    vec2 st_rot = 2.0 * (mat2(c, -s, s, c) * st);\n\n    // Jaggy checkerboard pattern (quick but ugly)\n    vec2 steps = floor( 2.0*st_rot - 0.5 ); // Line up to match AA version\n    float jaggycheckers = mod(steps.s + steps.t, 2.0); // A classic example\n\n    // Anti-aliased checkerboard pattern (slower but actually useful)\n    // Ramps in x and y without discontinuities, for AA thresholding\n\tvec2 ramps = 2.0 * abs( fract( st_rot ) - 0.5); // “Triangle waves”\n    // Either of the thresholds below can be changed for a different look.\n    // This is an added bonus compared to the naive version without AA.\n\tvec2 stripes = aastep( vec2(0.5, 0.5), ramps ); // 50% stripes\n\tfloat aacheckers = abs( stripes.x - stripes.y ); // “XOR” for overlaps\n\n    // Show jaggies to the left, AA to the right, with a thin line between\n    float checkers = st.s < 0.0 ? jaggycheckers : aacheckers;\n\n    // Create a thin vertical line in the middle, with AA for good measure\n    float line = aastep(-0.003, st.s) - aastep(0.003, st.s);\n    vec3 linecolor = vec3(1.0, 0.5, 0.0);\n\n    vec3 col = vec3(checkers); // Just black and white for max contrast\n\n    col = mix(col, linecolor, line); // Mix in the line\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}