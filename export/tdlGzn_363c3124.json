{"ver":"0.1","info":{"id":"tdlGzn","date":"1544779308","viewed":625,"name":"Spirograph Doodler","username":"wyatt","description":"What is the path of a point that goes around a point that goes a round a point that goes around a point...","likes":9,"published":3,"flags":32,"usePreview":0,"tags":["cirlces"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Draw armature structure and print the drawing buffer (B or D)\nvec2 R;\nfloat ln (vec2 p, vec2 a, vec2 b) {return length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.));}\nvec2 P1 (vec2 U) {return texture(iChannel0,U/R).xy;}\nvec2 P0 (vec2 U) {return texture(iChannel1,U/R).xy;}\nvec4 T (vec2 U) {return texture(iChannel2,U/R);}\nvoid mainImage( out vec4 Q, in vec2 U )\n{\tR = iResolution.xy;\n \tQ = T(U);\n \tvec2 a=0.5*R, b, o;\n for (float i = 1.; i < 11.; i++) {\n     vec4 c = 0.5+0.5*normalize(sin(i*vec4(1,2,3,4)));\n     b = P1(vec2(i,0)+.5);\n     float l = ln (U,a,b);\n     o = a;\n     a = b;\n     b = a;\n     Q = (Q*0.99 + c*smoothstep(2.,1.,l));\n }\n Q += T(U);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Rotate about point defined in the pixel to the left\n// left most pixel is stationairy.\nvec2 R;\nvec2 ro (float a) {\n\tfloat s = sin(a),c = cos(a);\n    return vec2 (c,s);\n}\nvec2 P (vec2 U) {return texture(iChannel0,U/R).xy;}\nvoid mainImage( out vec4 Q, in vec2 U )\n{\tR = iResolution.xy;\n \t// get parent point\n    vec2 p = P(U-vec2(1,0));\n \t// length of arm decreases each arm\n \tfloat r = .5*R.y*pow(.6,(U.x));\n \t// rotation rate increases each arm\n \tfloat t = .1*floor(1.+2.*U.x+0.4*U.x*U.x-0.04*U.x*U.x*U.x);\n \t// move to the parent point and then rotate about it\n \tQ.xy = p + r*(ro(t*(iTime-10.*U.y)));\n \t// anchor the base\n    if (U.x < 1.) Q.xy = 0.5*R;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Draw some lines\n// Buffer C has the state now, and buffer A has the previous state\n// each pixel in buffers a and c are the location of a different rotating point, but we only see 11\nvec2 R;\nfloat ln (vec2 p, vec2 a, vec2 b) {return length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.));}\nvec2 P1 (vec2 U) {return texture(iChannel0,U/R).xy;}\nvec2 P0 (vec2 U) {return texture(iChannel1,U/R).xy;}\nvec4 T (vec2 U) {return texture(iChannel2,U/R);}\nvoid mainImage( out vec4 Q, in vec2 U )\n{\tR = iResolution.xy;\n \tQ = T(U);\n    if (iFrame > 6) {\n        // draw a few selected points on the armature sctructure so we can see the path\n        for (float i = 0.; i < 20.; i+=1.) {\n            //color \n            vec4 c = 0.5+0.5*normalize(sin(1.+iTime+i*vec4(1,2,3,4)));\n            // distance to linear trajectory\n            float l = ln (U,P0(vec2(10,i)+.5),P1(vec2(10,i)+.5));\n            //update buffer color\n        \tQ = max(Q*0.9998, c*smoothstep(4.,1.,l));\n        }\n    \t\n    } else Q = vec4(0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Rotate about point defined in the pixel to the left\n// left most pixel is stationairy.\nvec2 R;\nvec2 ro (float a) {\n\tfloat s = sin(a),c = cos(a);\n    return vec2 (c,s);\n}\nvec2 P (vec2 U) {return texture(iChannel0,U/R).xy;}\nvoid mainImage( out vec4 Q, in vec2 U )\n{\tR = iResolution.xy;\n \t// get parent point\n    vec2 p = P(U-vec2(1,0));\n \t// length of arm decreases each arm\n \tfloat r = .5*R.y*pow(.6,(U.x));\n \t// rotation rate increases each arm\n \tfloat t = .1*floor(1.+2.*U.x+0.4*U.x*U.x-0.04*U.x*U.x*U.x);\n \t// move to the parent point and then rotate about it\n \tQ.xy = p + r*(ro(t*(iTime-10.*U.y)));\n \t// anchor the base\n    if (U.x < 1.) Q.xy = 0.5*R;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//Draw some lines\n// Buffer C has the state now, and buffer A has the previous state\n// each pixel in buffers a and c are the location of a different rotating point, but we only see 11\nvec2 R;\nfloat ln (vec2 p, vec2 a, vec2 b) {return length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.));}\nvec2 P1 (vec2 U) {return texture(iChannel0,U/R).xy;}\nvec2 P0 (vec2 U) {return texture(iChannel1,U/R).xy;}\nvec4 T (vec2 U) {return texture(iChannel2,U/R);}\nvoid mainImage( out vec4 Q, in vec2 U )\n{\tR = iResolution.xy;\n \tQ = T(U);\n    if (iFrame > 6) {\n        // draw a few selected points on the armature sctructure so we can see the path\n        for (float i = 0.; i < 20.; i+=1.) {\n            //color \n            vec4 c = 0.5+0.5*normalize(sin(1.+iTime+i*vec4(1,2,3,4)));\n            // distance to linear trajectory\n            float l = ln (U,P0(vec2(10,i)+.5),P1(vec2(10,i)+.5));\n            //update buffer color\n        \tQ = max(Q*0.9998, c*smoothstep(4.,1.,l));\n        }\n    \t\n    } else Q = vec4(0);\n}","name":"Buffer D","description":"","type":"buffer"}]}