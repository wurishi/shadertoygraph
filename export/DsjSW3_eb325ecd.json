{"ver":"0.1","info":{"id":"DsjSW3","date":"1677530134","viewed":82,"name":"Noise line with offset","username":"remilanza","description":"Example of 1d noise as a line","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","1d","curve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int N_VALUES = 10;\nconst float LINE_THK = 0.005;\nconst vec4 COL_BLACK = vec4(0., 0., 0., 1.0);\nconst vec4 COL_WHITE = vec4(1., 1., 1., 1.0);\nconst vec4 COL_GREEN = vec4(0., 1., 0., 1.0);\nconst vec4 COL_BLUE = vec4(0., 0., 1., 1.0);\nconst vec4 COL_RED = vec4(1., 0., 0., 1.0);\n\n\nfloat randValues[N_VALUES] = float[](\n    /*0.0               --------------->             1.0*/\n    0.4, -0.2, 0.2, 0.4, 0.6, 0.1, -0.5, -0.8, -0.9, 0.9\n);\n\nfloat noiseEval(float x){        \n    int index = int(float(N_VALUES) * x) % N_VALUES;\n    \n    float diff = float(int(x));\n    x = x - diff;\n    \n    float dx = x - float(index)/float(N_VALUES + 0);\n    dx *= float(N_VALUES);\n    \n    dx = smoothstep(0., 1., dx);\n    int nextIndex = index < (N_VALUES - 1) ? index + 1 : 0;    \n    return mix(randValues[index], randValues[nextIndex], dx);\n}\n\nbool isWithinLineThk(float y, float yCenter, float lineThk){\n    return (y > (yCenter - lineThk/2.)) && (y < (yCenter + lineThk/2.));\n}\n\nbool isWithinLineOffsets(float y, float yCenter, float offsetBot, float offsetTop){\n    return (y > (yCenter - offsetBot)) && (y < (yCenter + offsetTop));\n}\n\nbool isUnderLine(float y, float lineY, float lineThk){\n    return y < (lineY + lineThk/2.);\n}\n\n\nfloat noise(float x){\n    return 0.75 * noiseEval(0.5*x) \n        + 1./4.0 * noiseEval(1.0*x) \n        + 1./8.0 * noiseEval(1.6*x);\n        //+ 1./16.0 * noiseEval(8.*x)  \n        //+ 1./32.0 * noiseEval(16.*x);    \n}\n\nvec2 noiseTangent(float x){\n    const float dxnorm = 0.00001;\n    float x0 = x - dxnorm;\n    float x1 = x + dxnorm;\n    float y0 = noise(x0);\n    float y1 = noise(x1);\n    return normalize(vec2(x1 - x0, y1 - y0));\n    \n}\n\nvec2 noiseNormal(float x){\n    vec2 tangent = noiseTangent(x);\n    return vec2(-tangent.y, tangent.x);    \n}\n\nfloat yDiffNextPixel(float y, float x){\n    return abs(y - noise(x + 1./iResolution.x));\n} \n\nfloat yDiffPreviousPixel(float y, float x){\n    return abs(y - noise(x - 1./iResolution.x));\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = COL_WHITE;\n   \n    vec2 uv = fragCoord/iResolution.xy;\n               \n    float x = uv.x * 1.7 + iTime/10.;\n    float y1 = noise(x);        \n    float y = 0.5*y1 + 0.5;\n    vec2 norm = noiseNormal(x);\n    \n    float offsetTop1 = 4.0 * (LINE_THK + yDiffNextPixel(y1, x));\n    float offsetBot1 = 4.0 * (LINE_THK + yDiffPreviousPixel(y1, x));\n    float offsetTop2 = 1.0 * (LINE_THK + yDiffNextPixel(y1, x));\n    float offsetBot2 = 1.0 * (LINE_THK + yDiffPreviousPixel(y1, x));\n    \n    float thk1 = 4.0 * LINE_THK / (1.*norm.y);\n    float thk2 = 1.0 * LINE_THK / (1.*norm.y);\n    //float thk1 = 4.0 * LINE_THK / sqrt(1. + tang.y * tang.y);\n    //float thk2 = 1.0 * LINE_THK / sqrt(1. + tang.y * tang.y);\n    if(isWithinLineOffsets(uv.y, y, offsetBot2, offsetTop2)){\n        fragColor = COL_RED;\n    }\n    else if(isWithinLineOffsets(uv.y, y, offsetBot1, offsetTop1)){\n        fragColor = COL_BLACK;\n    }\n    else if(isUnderLine(uv.y, y, thk1)){\n        //fragColor = COL_GREEN;\n    }\n    else{\n        //fragColor = COL_BLUE;\n    }\n    \n    //debug\n    //float debX = x;\n    //vec2 debNorm = noiseNormal(debX);\n    //if(uv.y > (debNorm.y - 0.005) && uv.y < (debNorm.y + 0.005)){\n    //    fragColor = COL_RED;\n    //}\n\n}","name":"Image","description":"","type":"image"}]}