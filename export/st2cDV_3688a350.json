{"ver":"0.1","info":{"id":"st2cDV","date":"1650292864","viewed":274,"name":"Digital doughnut","username":"me_123","description":"A bright domo of game of life on a torus. Includes motion blur, and bloom.","likes":16,"published":3,"flags":32,"usePreview":0,"tags":["torus","motionblur","bloom","mapping","life","gol"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    vec4 c = texelFetch(iChannel1, ivec2(fragCoord), 0); //original image before bloom\n    fragColor = (texelFetch(iChannel0, ivec2(fragCoord), 0)+c*0.5); //mix original image with bloom \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//buffer A: game of life, and camera state\nint get(in ivec2 p) { //get GOL pixel\n    ivec2 rp = (p-ivec2(1, 0));\n    \n    //the oposite edges are joind, resulting in a torus \n    if (rp.x > int(res.x)) rp.x = 0;\n    if (rp.x < 0) rp.x = int(res.x);\n    if (rp.y > int(res.y)) rp.y = 0;\n    if (rp.y < 0) rp.y = int(res.y);\n    \n    \n    return int(texelFetch(iChannel0, ivec2(rp)+ivec2(1, 0), 0).x);\n}\nfloat hash(in vec2 p) {\n    vec3 p3 = fract(vec3(p.xyx)*.1031);\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.x+p3.y)*p3.z);\n}\nfloat hash1(in float p) {\n    p = fract(p*0.1031);\n    p *= p+33.33;\n    p *= p+p;\n    return fract(p);\n}\nfloat n(in float p) { //1D noise\n    float f = floor(p);\n    return mix(hash1(f), hash1(f+1.), fract(p));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 fc = ivec2(fragCoord);\n    vec4 old = texelFetch(iChannel0, fc, 0);\n    if (fc == ivec2(0)) {\n        float y = (((iMouse.y)/(iResolution.y))*3.14)+0.01;\n        float ty = 3.1415*(cos(iTime+n(iTime))+1.0)*0.5;\n        fragColor = vec4(iMouse.z > 0.0 ? vec3(\n            iMouse.x*0.01,\n            y,\n            y*0.1\n        ) : vec3((iTime*3.0)+sin(iTime*2.0+n(iTime*0.5))*2., ty, ty*0.5)\n        , 0);\n    }\n    if (fc == ivec2(0, 1)) {\n        fragColor = texelFetch(iChannel0, ivec2(0, fc.y-1), 0);\n    }\n    if (fc.x < 1 || fc.x > int(res.x)+1 || fc.y > int(res.y)) return;\n    fragColor = old;\n    \n    if (iFrame < 10) { //init\n    \n        //lots of gliders\n        fc = (fc-ivec2(1, 0))%6;\n        if (fc == ivec2(0, 0)) fragColor.x = 1.;\n        if (fc == ivec2(1, 0)) fragColor.x = 1.;\n        if (fc == ivec2(2, 0)) fragColor.x = 1.;\n        if (fc == ivec2(2, 1)) fragColor.x = 1.;\n        if (fc == ivec2(1, 2)) fragColor.x = 1.;\n        return;\n    } else {\n        #if JUSTGLIDERS\n        #else\n        if (hash(fragCoord+iTime) < 0.000001) {\n            fragColor = vec4(1.-fragColor.x, 0, 0, 0);\n            return;\n        }\n        #endif\n        int sum = get(fc+ivec2(-1, -1))+\n                  get(fc+ivec2(-1, 0))+\n                  get(fc+ivec2(-1, 1))+\n\n                  get(fc+ivec2(0, -1))+\n                  get(fc+ivec2(0, 1))+\n                  \n                  get(fc+ivec2(1, -1))+\n                  get(fc+ivec2(1, 0))+\n                  get(fc+ivec2(1, 1));\n\n        bool s = false;;\n        bool o = bool(float((sum-3) == 0) + float(sum-2 == 0) * old);\n        \n        if (o) {\n           fragColor = vec4(o, 0, 0, 0);\n        } else {\n           fragColor = vec4(0, old.y + 1.0, 0, 0);\n        }\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define BLOOM 1\n#define JUSTGLIDERS 0\nconst vec2 res = vec2(3, 1)*64.0;","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Buffer B: render scene pre bloom\nfloat hash(in vec2 p) {\n    vec3 p3 = fract(vec3(p.xyx)*.1031);\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.x+p3.y)*p3.z);\n}\nvec2 hash2(in vec2 p) {\n    vec3 p3 = fract(p.xyx*vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\nfloat nh(in vec3 p3) {\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.x+p3.y)*p3.z);\n}\nfloat noise(in vec3 p) {\n    vec3 c = floor(p);\n    vec3 f = fract(p);\n    return mix( \n                mix(\n                    mix( nh(c+vec3(0, 0, 0)), nh(c+vec3(1, 0, 0)), f.x), \n                    mix( nh(c+vec3(0, 1, 0)), nh(c+vec3(1, 1, 0)), f.x), \n                f.y),   \n                mix(\n                    mix( nh(c+vec3(0, 0, 1)), nh(c+vec3(1, 0, 1)), f.x), \n                    mix( nh(c+vec3(0, 1, 1)), nh(c+vec3(1, 1, 1)), f.x), \n                f.y), \n            f.z); \n}\nfloat fbm(in vec3 p) {\n    float v = 0.0;\n    for (int i = 0; i < 5; i += 1) {\n        float s = float(1<<i);\n        v += noise(p*s)/s;\n    }\n    return v;\n}\nvoid Camera(in vec2 fragCoord, out vec3 ro, out vec3 rd, in int i) \n{\n    vec2 uv = ((fragCoord.xy+(hash2(fragCoord+float(i))-0.5))/iResolution.xy)-0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    float y = (((iMouse.y)/(iResolution.y))*3.14)+0.01;\n    \n    //linear interplate from old camera inputs to current camera inputs by a random factor for motion blur\n    vec3 an = mix(texelFetch(iChannel0, ivec2(0, 0), 0).xyz,\n                  texelFetch(iChannel0, ivec2(0, 1), 0).xyz,\n                  hash(fragCoord+iTime+float(i)*0.1));\n    //calculate camera position from poler coords\n    ro = vec3(\n        cos(an.x)*sin(an.y),\n        sin(an.x)*sin(an.y),\n        cos(an.y)\n    )*3.0;\n    \n    //get ray direction twords the center\n    vec3 cam_z = normalize(-ro);\n    vec3 cam_x = normalize(cross(vec3(0, 0, 1), cam_z));\n    vec3 cam_y = cross(cam_z, cam_x);\n    rd = normalize(uv.x * cam_x + uv.y * cam_y + 1.1 * cam_z);\n    \n    //camera xz rototion\n    mat2 r = mat2(cos(an.z), -sin(an.z), sin(an.z), cos(an.z));\n    rd.xz *= r;\n    ro.xz *= r;\n}\n\n//torus intersection and normal by Iq\nfloat tor( in vec3 ro, in vec3 rd, in vec2 tor )\n{\n    float po = 1.0;\n    float Ra2 = tor.x*tor.x;\n    float ra2 = tor.y*tor.y;\n    float m = dot(ro,ro);\n    float n = dot(ro,rd);\n    float k = (m + Ra2 - ra2)*0.5;\n    float k3 = n;\n    float k2 = n*n - Ra2*dot(rd.xy,rd.xy) + k;\n    float k1 = n*k - Ra2*dot(rd.xy,ro.xy);\n    float k0 = k*k - Ra2*dot(ro.xy,ro.xy);\n    \n    if( abs(k3*(k3*k3-k2)+k1) < 0.01 )\n    {\n        po = -1.0;\n        float tmp=k1; k1=k3; k3=tmp;\n        k0 = 1.0/k0;\n        k1 = k1*k0;\n        k2 = k2*k0;\n        k3 = k3*k0;\n    }\n    \n    float c2 = k2*2.0 - 3.0*k3*k3;\n    float c1 = k3*(k3*k3-k2)+k1;\n    float c0 = k3*(k3*(c2+2.0*k2)-8.0*k1)+4.0*k0;\n    c2 /= 3.0;\n    c1 *= 2.0;\n    c0 /= 3.0;\n    float Q = c2*c2 + c0;\n    float R = c2*c2*c2 - 3.0*c2*c0 + c1*c1;\n    float h = R*R - Q*Q*Q;\n    \n    if( h>=0.0 )  \n    {\n        h = sqrt(h);\n        float v = sign(R+h)*pow(abs(R+h),1.0*0.3333333); // cube root\n        float u = sign(R-h)*pow(abs(R-h),1.0*0.3333333); // cube root\n        vec2 s = vec2( (v+u)+4.0*c2, (v-u)*sqrt(3.0));\n        float y = sqrt(0.5*(length(s)+s.x));\n        float x = 0.5*s.y/y;\n        float r = 2.0*c1/(x*x+y*y);\n        float t1 =  x - r - k3; t1 = (po<0.0)?2.0/t1:t1;\n        float t2 = -x - r - k3; t2 = (po<0.0)?2.0/t2:t2;\n        float t = 1e20;\n        if( t1>0.0 ) t=t1;\n        if( t2>0.0 ) t=min(t,t2);\n        return t;\n    }\n    \n    float sQ = sqrt(Q);\n    float w = sQ*cos( acos(-R/(sQ*Q)) / 3.0 );\n    float d2 = -(w+c2); if( d2<0.0 ) return -1.0;\n    float d1 = sqrt(d2);\n    float h1 = sqrt(w - 2.0*c2 + c1/d1);\n    float h2 = sqrt(w - 2.0*c2 - c1/d1);\n    float t1 = -d1 - h1 - k3; t1 = (po<0.0)?2.0/t1:t1;\n    float t2 = -d1 + h1 - k3; t2 = (po<0.0)?2.0/t2:t2;\n    float t3 =  d1 - h2 - k3; t3 = (po<0.0)?2.0/t3:t3;\n    float t4 =  d1 + h2 - k3; t4 = (po<0.0)?2.0/t4:t4;\n    float t = 1e20;\n    if( t1>0.0 ) t=t1;\n    if( t2>0.0 ) t=min(t,t2);\n    if( t3>0.0 ) t=min(t,t3);\n    if( t4>0.0 ) t=min(t,t4);\n    return t;\n}\n\nvec3 torNormal( in vec3 pos, vec2 tor )\n{\n    return normalize( pos*(dot(pos,pos)-tor.y*tor.y - tor.x*tor.x*vec3(1.0,1.0,-1.0)));\n}\nvec3 sky(in vec3 rd) {\n    return (vec3(0.0, 0.5, 0.3)*pow(fbm(1.0+rd*4.), 4.0));\n}\nconst vec2 t = vec2(1 ,0.4);\nvec4 getColor(in vec3 ro, in vec3 rd) {\n    float d = tor(ro, rd, t); //depth to torus\n    if (d < 0.0) { //calculate sky\n        vec3 s = sky(rd);\n        return vec4(0);\n    }\n    vec3 p = ro+rd*d; //position on torus\n    vec3 n = torNormal(p, t); //normal\n    vec3 op = p; //untransformed position on torus\n    \n    p /= vec2(t.x+t.y, t.y).xxy; //normalize coords between -1, 1\n    \n    //toroidal and poloidal coordinates from point on surface\n    float y = (((length(vec2(length(vec2(n.x, n.y))-1.0, n.z)))));\n    if (p.z < 0.0) y = -y;\n    if (length(op.xy) < t.x) {\n        y = -(y)-2.8;\n    }\n    vec2 z = (vec2((atan(p.x, p.y)+3.141592653589793)*0.15915494309189535, ((y+4.13)*0.18)))*res;\n    \n    //map game of life from buffer A to torus\n    vec4 o = texelFetch(iChannel0, ivec2(ceil(z))+ivec2(1, 0), 0);\n    vec3 c = mix(vec3((-dot(rd, n))*0.25), vec3(0.2, 0.2, 1)*10., o.x);\n    if (o.x == 0.0) c += (30.-min(30., o.y))*vec3(1.0, 0.2, 0.2)*0.1;\n    return vec4(c, o.x > 0.0 || o.y < 10.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n\tvec3 rd;\n\tvec3 ro;\n    \n    //AA and motion blur sampling\n    for (int i = 0; i < 10; i += 1) {\n        Camera(fragCoord, ro, rd, i);\n        vec4 c = getColor(ro ,rd);\n        fragColor += vec4(c);\n    }\n    fragColor *= 0.1;\n    fragColor = max(fragColor, 0.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Buffer C: bloom X\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    #if BLOOM\n    vec3 b = vec3(0);\n    int r = int(iResolution.x/20.);\n    float rr = 1./float(r);\n    for (int x = -r; x < r; x += 1) {\n        vec4 s = texelFetch(iChannel0, ivec2(fragCoord)+ivec2(x, 0), 0);\n        if (s.w > 0.0) {\n            float ss = 1.-abs(float(x)*rr);\n            b += (s.xyz*ss*ss)*0.1;\n        }\n    }\n    fragColor = vec4((b)*rr*10., 1);\n    #endif\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//Buffer D: bloom y\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    #if BLOOM\n    vec3 b = vec3(0);\n    int r = int(iResolution.x/20.);\n    float rr = 1./float(r);\n    for (int x = -r; x < r; x += 1) {\n        vec4 s = texelFetch(iChannel0, ivec2(fragCoord)+ivec2(0, x), 0);\n        if (s.w > 0.0) {\n            float ss = 1.-abs(float(x)*rr);\n            b += (s.xyz*ss*ss)*0.1;\n        }\n    }\n    fragColor = vec4((b)*rr*10., 1);\n    #endif\n}","name":"Buffer D","description":"","type":"buffer"}]}