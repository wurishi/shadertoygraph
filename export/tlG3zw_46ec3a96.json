{"ver":"0.1","info":{"id":"tlG3zw","date":"1579274293","viewed":172,"name":"Palette Sandbox - Controls","username":"Gaktan","description":"Fork of: https://www.shadertoy.com/view/wlyGzh\nAdded mouse/keyboard controls and text display\n\nDon't know why the text display is so inaccurate before changing values...","likes":8,"published":1,"flags":48,"usePreview":0,"tags":["color","palette","sandbox","control"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Original Source: https://www.shadertoy.com/view/wlyGzh\n// Added text display and mouse/keyboard control\n// Mouse:\t\tPhase and Shift\n// Ctrl+Mouse:\tPeriod and Amplitude\n\n// Sandbox based on IQ's procedural pallete example:\n// Pallette Sandbox based on IQ's example:\n//\n// https://www.shadertoy.com/view/ll2GD3\n// https://iquilezles.org/articles/palettes\n// The MIT License\n// Copyright Â© 2015 Inigo Quilez\n\nvec3 pal(in float t, in Palette palette)\n{\n    return palette.YShift + palette.Amplitude*cos( 6.28318*(palette.Period*t+palette.Phase) );\n}\n\n// Smaller Numbers \n// ---- 8< ---- GLSL Number Printing - @P_Malin ---- 8< ----\n// Creative Commons CC0 1.0 Universal (CC-0) \n// https://www.shadertoy.com/view/4sBSWW\nfloat DigitBin( const int x )\n{\n    return x==0?480599.0:x==1?139810.0:x==2?476951.0:x==3?476999.0:x==4?350020.0:x==5?464711.0:x==6?464727.0:x==7?476228.0:x==8?481111.0:x==9?481095.0:0.0;\n}\n\nfloat PrintValue( vec2 vStringCoords, float fValue, float fMaxDigits, float fDecimalPlaces )\n{       \n    if ((vStringCoords.y < 0.0) || (vStringCoords.y >= 1.0)) return 0.0;\n    \n    bool bNeg = ( fValue < 0.0 );\n\tfValue = abs(fValue);\n    \n\tfloat fLog10Value = log2(abs(fValue)) / log2(10.0);\n\tfloat fBiggestIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitIndex = fMaxDigits - floor(vStringCoords.x);\n\tfloat fCharBin = 0.0;\n\tif(fDigitIndex > (-fDecimalPlaces - 1.01)) {\n\t\tif(fDigitIndex > fBiggestIndex) {\n\t\t\tif((bNeg) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;\n\t\t} else {\t\t\n\t\t\tif(fDigitIndex == -1.0) {\n\t\t\t\tif(fDecimalPlaces > 0.0) fCharBin = 2.0;\n\t\t\t} else {\n                float fReducedRangeValue = fValue;\n                if(fDigitIndex < 0.0) { fReducedRangeValue = fract( fValue ); fDigitIndex += 1.0; }\n\t\t\t\tfloat fDigitValue = (abs(fReducedRangeValue / (pow(10.0, fDigitIndex))));\n                fCharBin = DigitBin(int(floor(mod(fDigitValue, 10.0))));\n\t\t\t}\n        }\n\t}\n    return floor(mod((fCharBin / pow(2.0, floor(fract(vStringCoords.x) * 4.0) + (floor(vStringCoords.y * 5.0) * 4.0))), 2.0));\n}\n// ---- 8< -------- 8< -------- 8< -------- 8< ----\n\nvoid PrintValue(in float value, in vec2 drawPos, in vec2 fragCoord, out vec3 outColor)\n{\n    // Multiples of 4x5 work best\n\tconst vec2 font_size = vec2(8.0, 15.0);\n    \n    vec2 pixel_coord = drawPos + vec2(4.0, 4.0);\n\tfloat max_digits = 1.0;\n\tfloat num_decimals = 2.0;\n\tfloat is_digit = PrintValue( (fragCoord - pixel_coord) / font_size, value, max_digits, num_decimals);\n\toutColor = mix( outColor, vec3(1.0), is_digit);\n}\n\nvoid PrintPaletteColor(in Palette palette, in int selectedColor, in vec2 drawPos, in vec2 fragCoord, out vec3 outColor)\n{\n    PrintValue(palette.YShift[selectedColor],\t\tdrawPos + vec2(iResolution.x - 200.0, 0.0), fragCoord, outColor);\n    PrintValue(palette.Amplitude[selectedColor],\tdrawPos + vec2(iResolution.x - 150.0, 0.0), fragCoord, outColor);\n    PrintValue(palette.Period[selectedColor],\t\tdrawPos + vec2(iResolution.x - 100.0, 0.0), fragCoord, outColor);\n    PrintValue(palette.Phase[selectedColor],\t\tdrawPos + vec2(iResolution.x - 50.0, 0.0), fragCoord, outColor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    float thickness = .015;\n    \n    // Animate\n    //p.x += 0.05*iTime;\n    //p.x *= 5.0;\n    //p.x = mod(p.x, 1.0);\n\n    // Default color\n    vec3 col = vec3(0);\n    \n    // Band\n    float f = fract(p.y*4.0);\n    \n    Palette palette = GetPalette(iChannel0, IDX_DEFAULT);\n    \n    // Curve for B\n    {\n    \tcol = vec3(0, 0, smoothstep(thickness+.01, thickness, abs(pal(p.x, palette).z-f)));\n    }\n    // Curve for G\n    if( p.y>(1.0/4.0) )\n    {\n\t    col = vec3(0, smoothstep(thickness+.01, thickness, abs(pal(p.x, palette).y-f)), 0);\n    }\n    // Curve for R\n    if( p.y>(2.0/4.0) )\n    {\n\t    col = vec3(smoothstep(thickness+.01, thickness, abs(pal(p.x, palette).x-f)), 0, 0);\n    }\n    // Palette color\n    if( p.y>(3.0/4.0) )\n    {\n        col = pal( p.x, palette );\n    }\n    \n    // Borders\n    col = mix(col, vec3(.5), vec3(step( .5-thickness, abs(f-0.5))));\n    \n    // Text\n    PrintPaletteColor(palette, 0, vec2(0, iResolution.y / 2.0), fragCoord, col);\n    PrintPaletteColor(palette, 1, vec2(0, iResolution.y / 4.0), fragCoord, col);\n    PrintPaletteColor(palette, 2, vec2(0, 0), fragCoord, col);\n    \n\tfragColor = vec4( col, 1.0 );\n    \n    // --------- Debug\n    //fragColor = ReadComponent(int(fragCoord.x*0.1), iChannel0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//      A Component  R     G     B   (Y shift)\n#define pal_a vec3( 0.50, 0.50, 0.50 )  \n//      B Component  R     G     B   (amplitude)\n#define pal_b vec3( 0.50, 0.50, 0.50 )  \n//      C Component  R     G     B   (period)\n#define pal_c vec3( 1.00, 0.70, 0.40 )  \n//      D Component  R     G     B   (phase)\n#define pal_d vec3( 0.00, 0.15, 0.20 )  \n\nPalette GetDefaultPalette()\n{\n    Palette palette = Palette(pal_a, pal_b, pal_c, pal_d);\n    return palette;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    Palette palette = GetPalette(iChannel0, IDX_DEFAULT);\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    if (iFrame == 0)\n    {\n        fragColor = vec4(0.0);\n        palette = GetDefaultPalette();\n        WritePalette(palette, IDX_SAVED, fragCoord.xy, fragColor);\n    }\n\n    vec4 mouse\t\t\t    = iMouse / iResolution.xyxy;\n    bool mouse_pressed      = mouse.z > 0.0 && mouse.w < 0.0;\n    bool mouse_released     = mouse.z < 0.0 && mouse.w < 0.0;\n    bool control_pressed\t= ReadComponent(17, iChannel3).x > 0.5;\n    \n    int selectedColor\t= int((1.0-abs(mouse.w))*4.0) - 1;\n\n    if (mouse_pressed && selectedColor >= 0)\n    {\n        palette = GetPalette(iChannel0, IDX_SAVED);\n\t\t\n        // Swapping z and x to invert X movement\n        vec2 movement = abs(mouse.zy) - abs(mouse.xw);\n        // Better controls when the period is high\n        movement.x *= palette.Period[selectedColor];\n        \n        if (control_pressed)\n        {\n            palette.Period[selectedColor]\t\t+= movement.x;\n            palette.Amplitude[selectedColor]\t+= movement.y;\n        }\n        else\n        {\n            palette.Phase[selectedColor]\t+= movement.x;\n            palette.YShift[selectedColor]\t+= movement.y;\n        }\n    }\n    else\n    {\n        WritePalette(palette, IDX_SAVED, fragCoord.xy, fragColor);\n    }\n\n    WritePalette(palette, IDX_DEFAULT, fragCoord.xy, fragColor);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"struct Palette\n{\n    vec3 YShift;\n    vec3 Amplitude;\n    vec3 Period;\n    vec3 Phase;\n};\n\n#define IDX_DEFAULT 0\n#define IDX_SAVED 4\n\nivec2 ComponentToCoord(in int componentNum)\n{\n    return ivec2(componentNum, 0);\n}\n\nvec4 ReadComponent(in int componentNum, in sampler2D inTexture)\n{\n    return texelFetch(inTexture, ComponentToCoord(componentNum), 0);\n}\n\nvoid WriteComponent(in int componentNum, in vec4 value, in vec2 fragCoord, out vec4 outValue)\n{\n   ivec2 coord = ComponentToCoord(componentNum);\n   if (ivec2(fragCoord) == coord)\n   {\n       outValue = value;\n   }\n}\n\nPalette GetPalette(in sampler2D inTexture, in int offset)\n{\n    vec3 pal_a = ReadComponent(offset + 0, inTexture).rgb;\n    vec3 pal_b = ReadComponent(offset + 1, inTexture).rgb;\n    vec3 pal_c = ReadComponent(offset + 2, inTexture).rgb;\n    vec3 pal_d = ReadComponent(offset + 3, inTexture).rgb;\n    \n    Palette palette = Palette(pal_a, pal_b, pal_c, pal_d);\n    return palette;\n}\n\nvoid WritePalette(in Palette palette, in int offset, in vec2 fragCoord, out vec4 outValue)\n{\n    WriteComponent(offset + 0, vec4(palette.YShift,\t\t1.0), fragCoord.xy, outValue);\n    WriteComponent(offset + 1, vec4(palette.Amplitude,\t1.0), fragCoord.xy, outValue);\n    WriteComponent(offset + 2, vec4(palette.Period,\t\t1.0), fragCoord.xy, outValue);\n    WriteComponent(offset + 3, vec4(palette.Phase,\t\t1.0), fragCoord.xy, outValue);\n}","name":"Common","description":"","type":"common"}]}