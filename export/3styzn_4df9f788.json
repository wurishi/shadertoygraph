{"ver":"0.1","info":{"id":"3styzn","date":"1600286097","viewed":591,"name":"Variegated Tiling","username":"fizzer","description":"A simple way to create a tiling with varying cell sizes.","likes":38,"published":1,"flags":0,"usePreview":0,"tags":["tiling","bricks"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 c)\n{\n    return mix(.2, .7, texelFetch(iChannel0, ivec2(c) & 255, 0).r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.y * 10.;\n    \n    uv.x += iTime / 2.;\n    uv.y -= iMouse.y / iResolution.y * 10.;\n\n    vec2 f = fract(uv);\n    vec2 c = floor(uv);\n    \n    vec2 texCoord = f;\n    vec2 tileCoord = c;\n    \n    float r0 = rand(floor(uv));\n    \n    int orientation = (int(c.x) + int(c.y)) & 1;\n    \n    if(f[orientation] > r0)\n        tileCoord[orientation] += 1.;\n\n    texCoord[orientation] = abs(texCoord[orientation] - r0);\n\n    vec2 cellOffset = vec2(0);\n    \n    cellOffset[orientation] = (f[orientation] > r0) ? +1. : -1.;\n    \n    float r1 = rand(c + cellOffset);\n    \n    if(f[orientation ^ 1] > r1)\n        tileCoord[orientation ^ 1] += 1.;\n    \n    texCoord[orientation ^ 1] = abs(texCoord[orientation ^ 1] - r1);\n    \n    \n    // Shading and colouration.\n    \n    \n    // Rounded box shape.\n    float mask = 1. - smoothstep(0., .01, distance(vec2(.1), min(texCoord, 0.1)) - .05);\n    \n    // Corner 'bolts' shape.\n    mask *= smoothstep(.05, .06, distance(vec2(.15), texCoord));\n    \n    // Randomised per-tile colour.\n    vec3 colour = .52 + .48 * cos(textureLod(iChannel1, tileCoord / 13., 0.).r * vec3(4, 2, 6) * 4.5 + 18.5);\n    \n    // Combine.\n    vec3 col = mix(vec3(.02), colour, mask);\n    \n    // Output.\n    fragColor = vec4(pow(col, vec3(1. / 2.2)), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}