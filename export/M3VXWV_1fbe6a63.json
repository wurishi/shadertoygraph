{"ver":"0.1","info":{"id":"M3VXWV","date":"1720532678","viewed":141,"name":"Unnamed spiral distance approx","username":"NinjaKoala","description":"The method from https://www.shadertoy.com/view/lXGXWK works in principle for any curve defined by the integral of its hodograph.\nI played around a bit and found this spiral to look nice :D\nAnyone knows if it has a name?","likes":13,"published":3,"flags":0,"usePreview":0,"tags":["2d","spiral"],"hasliked":0,"parentid":"lXGXWK","parentname":"Clothoid distance approximation"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float dt = .01;\nconst float len = 2.;\nconst float zoom = 2.;\n\nvec2 diff(float t){\n    return vec2(sin(exp(t*t)),cos(exp(t*t)));\n}\n\nfloat spiral_distance(vec2 uv){\n    float dis = 1e38;\n    \n    vec2 p = vec2(0);\n    for(float t=0.;t<len;t+=dt){\n        vec2 tang = diff(t+dt/2.);\n        float tang2 = dot(tang,tang);\n\n        float dt2 = clamp(dot(tang,uv-p)/tang2,0.,dt);\n        vec2 p2 = p + dt2 * diff(t+dt2/2.);\n        \n        float dt3 = clamp(dot(tang,-uv-p)/tang2,0.,dt);\n        vec2 p3 = p + dt3 * diff(t+dt3/2.);\n\n        dis = min(dis,distance(uv,p2));\n        dis = min(dis,distance(-uv,p3));\n        p += dt * tang;\n    }\n    \n    return dis;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord.xy/iResolution.xy;\n\tuv -= .5;\n    uv.y *= iResolution.y/iResolution.x;\n    \n    uv *= zoom;\n    \n    float dis = spiral_distance(uv);\n    \n    dis /= zoom;\n\n    vec3 color = vec3(1.0) - sign(dis)*vec3(0.1,0.4,0.7);\n\tcolor *= 1.0 - exp(-8.0*abs(dis));\n\tcolor *= 0.8 + 0.2*cos(480.0*dis);\n\tcolor = mix(color, vec3(1.0), 1.0-smoothstep(0.0,0.005,abs(dis)));\n\n    fragColor = vec4(color,1);\n}","name":"Image","description":"","type":"image"}]}