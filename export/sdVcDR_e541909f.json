{"ver":"0.1","info":{"id":"sdVcDR","date":"1654727488","viewed":375,"name":"2D Water Reflection","username":"Xorberax","description":"A simple 2D water reflection shader. Mouse X Axis = Field of View, Mouse Y = Water Line Offset","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["reflection","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec4 waterTint = vec4(0.5, 0.5, 0.5, 1.0);\nconst float waterRippleStrength = 10.25;\nconst float waterRippleSpeed = 0.015;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    float waterLineOffset = iMouse.y / iResolution.y;\n\n    if (uv.y >= waterLineOffset)\n    {\n        fragColor = texture(iChannel0, uv);\n    }\n    else\n    {\n        float fieldOfViewScalar = (iMouse.x / iResolution.x) * 10.0;\n        vec2 vanishingPoint = vec2(0.5, waterLineOffset + fieldOfViewScalar);\n        float distanceToVanishingPoint = length(uv - vanishingPoint);\n        float distanceToWaterLine = waterLineOffset - uv.y + 0.2;\n        float fadedWaterRippleStrength = waterRippleStrength * distanceToWaterLine;\n        vec4 noiseColor = texture(\n            iChannel1,\n            vec2(\n                uv.x + iTime * waterRippleSpeed, \n                uv.y - iTime * waterRippleSpeed\n            ) * distanceToVanishingPoint\n        );\n        noiseColor *= texture(\n            iChannel2,\n            vec2(\n                uv.x - iTime * waterRippleSpeed,\n                uv.y + iTime * waterRippleSpeed\n            ) * distanceToVanishingPoint\n        );\n        noiseColor *= fadedWaterRippleStrength * distanceToWaterLine;\n        fragColor = texture(\n            iChannel0, \n            vec2(\n                uv.x,\n                -uv.y + waterLineOffset\n            ) + \n            vec2(\n                0.0,\n                waterLineOffset\n            ) +\n            vec2(\n                noiseColor.g * noiseColor.b * noiseColor.r,\n                noiseColor.r * noiseColor.g * noiseColor.b\n            )\n        ) * waterTint;\n    }\n}","name":"Image","description":"","type":"image"}]}