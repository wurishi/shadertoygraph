{"ver":"0.1","info":{"id":"NddcD7","date":"1653556738","viewed":206,"name":"Edge Blur Test","username":"ShadingKnight","description":"Edge Blur","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["blur","edge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 center = texture(iChannel1, uv);\n    \n    float edgeWeight = 0.0f;\n    if (center.a > 0.0)\n    {\n        float accum = 0.0;\n        float weight;\n        vec2 offset;\n        vec2 pixelSize = vec2(1.0) / iResolution.xy;\n        \n        for (int x = -samples / 2; x < samples / 2; ++x) \n        {\n            for (int y = -samples / 2; y < samples / 2; ++y) \n            {\n                offset = vec2(x, y);\n                weight = gaussian(offset);\n                float col = texture(iChannel0, uv + pixelSize * offset).a;\n                edgeWeight += col * weight;\n                accum += weight;\n            }\n        }\n        edgeWeight = edgeWeight / accum;\n    }\n    fragColor = vec4(edgeWeight * texture(iChannel0, uv).rgb, 1.0);\n    // Output to screen\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define pow2(x) (x * x)\n\nconst float pi = atan(1.0) * 4.0;\nconst int samples = 25;\nconst float sigma = float(samples) * 0.65;\n\nfloat luminance(vec3 col)\n{\n    return dot(col.xyz, vec3(0.2126f, 0.7152f, 0.0722f));\n}\n\nfloat gaussian(vec2 i) {\n    return 1.0 / (2.0 * pi * pow2(sigma)) * exp(-((pow2(i.x) + pow2(i.y)) / (2.0 * pow2(sigma))));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb;\n    float a = 1.0f;\n    if ((col.r <= 0.3f && col.g >= 0.5f && col.b <= 0.3f))\n    {\n        col = vec3(0.0f);\n        a = 0.0f;\n    }\n    fragColor = vec4(col, a);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float edgeWeight = 0.0;\n    \n    vec4 center = texture(iChannel0, uv);\n    if (center.a > 0.0f)\n    {\n        float accum = 0.0;\n        float weight;\n        vec2 offset;\n        vec2 pixelSize = vec2(1.0) / iResolution.xy;\n        \n        float edgeDistance = 999999.0f;\n        for (int x = -samples / 2; x < samples / 2; ++x) \n        {\n            for (int y = -samples / 2; y < samples / 2; ++y) \n            {\n                offset = vec2(x, y);\n                vec4 sampledValue = texture(iChannel0, uv + pixelSize * offset);\n                if (sampledValue.a <= 0.0f)\n                {\n                    edgeDistance = min(edgeDistance, length(offset));\n                }\n            }\n        }\n        \n        for (int x = -samples / 2; x < samples / 2; ++x) \n        {\n            for (int y = -samples / 2; y < samples / 2; ++y) \n            {\n                offset = vec2(x, y);\n                float dis = length(offset);\n                weight = gaussian(offset);\n                if (dis < edgeDistance)\n                {\n                    edgeWeight += weight;\n                }\n                else\n                {\n                    edgeWeight += (edgeDistance / dis) * weight;\n                }\n                accum += weight;\n            }\n        }\n        edgeWeight = edgeWeight / accum;\n        if (edgeDistance < 999999.0f)\n        {\n            edgeWeight = edgeWeight * edgeDistance / (float(samples) / 3.0 * 1.41);\n        }\n        edgeWeight = min(edgeWeight, 1.0f);\n    }\n    \n    \n    \n    vec3 col = texture(iChannel0, uv).rgb;\n    // Output to screen\n    fragColor = vec4(col, edgeWeight);\n}","name":"Buffer B","description":"","type":"buffer"}]}