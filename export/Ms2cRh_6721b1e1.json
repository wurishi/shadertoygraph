{"ver":"0.1","info":{"id":"Ms2cRh","date":"1490942175","viewed":205,"name":"RGB vs RYB interpolation","username":"benardp","description":"RGB vs RYB interpolation","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rgb2ryb(vec3 rgb_color) {\n\t// Remove the white from the color\n\tfloat white = min(min(rgb_color.r,rgb_color.g), rgb_color.b);\n\trgb_color -= vec3(white);\n\t\n\tfloat max_green = max(max(rgb_color.r,rgb_color.g), rgb_color.b);\n\t\n\t// Get the yellow out of the red & green\t\t\n\tfloat yellow = min(rgb_color.r, rgb_color.g);\n\trgb_color.r -= yellow;\n\trgb_color.g -= yellow;\n\n\t// If this unfortunate conversion combines blue and green, then cut each in half to preserve the value's maximum range.\n\tif (rgb_color.b > 0. && rgb_color.g > 0.) {\n\t\trgb_color.b  /= 2.;\n\t\trgb_color.g /= 2.;\n\t}\n\n\t// Redistribute the remaining green.\n\tyellow += rgb_color.g;\n\trgb_color.b   += rgb_color.g;\n\n\t// Normalize to values.\n\tfloat max_yellow = max(max(rgb_color.r, yellow), rgb_color.b);\n\t\t\n\tif (max_yellow > 0.) {\n\t\tfloat n = max_green / max_yellow;\n\t\t\t\n\t\trgb_color.r  *= n;\n\t\tyellow *= n;\n\t\trgb_color.b   *= n;\n\t}\n\n\t// Add the white back in.\n\trgb_color.r += white;\n\tyellow += white;\n\trgb_color.b   += white;\n\t\n\treturn vec3(rgb_color.r, yellow, rgb_color.b);\n}\n\nvec3 ryb2rgb(vec3 ryb_color) {\n\t// Remove the white from the color\n\tfloat white = min(min(ryb_color.r,ryb_color.g), ryb_color.b);\n\tryb_color -= vec3(white);\n\n\tfloat max_yellow = max(max(ryb_color.r,ryb_color.g), ryb_color.b);\n\t\n\t// Get the green out of the yellow & blue\n\tfloat green = min(ryb_color.g, ryb_color.b);\n\tryb_color.g -= green;\n\tryb_color.b -= green;\n\t\n\tif (ryb_color.b > 0. && green > 0.) {\n\t\tryb_color.b *= 2.;\n\t\tgreen          *= 2.;\n\t}\n\n\t// Redistribute the remaining yellow.\n\tryb_color.r  += ryb_color.g;\t\n\tgreen          += ryb_color.g;\n\n\t// Normalize to values.\n\tfloat max_green = max(max(ryb_color.r, green), ryb_color.b);\n\t\t\n\tif (max_green > 0.) {\n\t\tfloat n = max_yellow / max_green;\n\t\t\t\n\t\tryb_color.r   *= n;\n\t\tgreen            *= n;\n\t\tryb_color.b   *= n;\n\t}\n\n\t// Add the white back in.\n\tryb_color.r   += white;\n\tgreen           += white;\n\tryb_color.b  += white;\n\t\n\treturn vec3(ryb_color.r, green, ryb_color.b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 rgb_color1 = vec3(0.163, 0.373, 0.6);\n\tvec3 rgb_color2 = vec3(1.0, 1.0, 0.0);\n\tmat3 M = mat3(0.241, 0, 0, 0, 0.691, 0, 0, 0, 0.068);\n\tfloat b1 = sqrt(dot(rgb_color1,M*rgb_color1));\n\tfloat b2 = sqrt(dot(rgb_color2,M*rgb_color2));\n\tvec3 ryb_color1 = rgb2ryb(rgb_color1);\n\tvec3 ryb_color2 = rgb2ryb(rgb_color2);\n\tvec3 res_ryb = mix(ryb_color1,ryb_color2,uv.x);\n\tvec3 res_rgb = ryb2rgb(res_ryb);\n\tfloat b_res = sqrt(dot(res_rgb,M*res_rgb));\n\tfloat b = mix(b1,b2,uv.x);\n\tres_ryb *= b / b_res;\n\tfloat t = gl_FragCoord.x/512.;\n\tvec3 res2 = mix(rgb_color1,rgb_color2,uv.x);\n\tif(uv.y<0.49)\n\t\tfragColor = vec4(ryb2rgb(res_ryb),1);\n\telse if(uv.y>0.51)\n\t\tfragColor = vec4(res2,1);\n\telse\n\t\tfragColor = vec4(0,0,0,1);\n}","name":"Image","description":"","type":"image"}]}