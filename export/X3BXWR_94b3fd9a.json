{"ver":"0.1","info":{"id":"X3BXWR","date":"1711756921","viewed":36,"name":"ahmt1","username":"kaibene","description":"Occlusion","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tp3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2023.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(37.,0.,15.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n  \n}\n// intersection\nfloat Intersection(float a,float b)\n{\n  return max(a,b);\n  }\n\n// Plan\n// p : point\n// n : norme du paln\n// d : distance\nfloat DemiPlan(vec3 p,vec3 n, vec3 c)\n{\n  n= normalize (n);\n  return dot(p-c,n);\n}\n\n\nfloat Plane(vec3 p,vec3 c,vec3 n)\n{\n  return dot(p-c,n);\n}\n\n// capsule\n\n   float capsule(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 u = normalize(b-a); // Normalisation du vecteur direction de la capsule\n    float l = dot(p-a, u); // Calcul l \n\n    float d;\n\n    if (l < 0.)\n    {\n  \n        d = length(p-a)-r; \n    }\n    else if (l > length(b-a))\n    {\n   \n        d = length(p-b)-r; \n    }\n    else\n    {\n       \n        d = sqrt(length(p-a) * length(p-a)-l*l)-r; \n    }\n    return d; \n}\n// Tore\n// p : point\n// c : centre\n// r1 : rayon section centrale \n// r2 : rayon cercle\nfloat Tore(vec3 p, vec3 c, float r1, float r2)\n{\n    p=p-c;\n  vec2 q = vec2(length(p.xz) - r1, p.y);\n  return length(q) - r2;\n}\nfloat boite(vec3 p, vec3 c, float size)\n{   \n    p = p - c;\n    float v1 = Intersection(DemiPlan(p, vec3(5., 0., 0.), c), DemiPlan(p, vec3(0., 5., 0.), c));\n    v1 = Intersection(v1, DemiPlan(p, vec3(0., 0., 5.), c));\n    \n    v1 = Intersection(v1, DemiPlan(p, vec3(-5., 0., 0.), c));\n    v1 = Intersection(v1, DemiPlan(p, vec3(0., -5., 0.), c));\n    v1 = Intersection(v1, DemiPlan(p, vec3(0., 0., -5.), c));\n\n    return v1;\n}\nfloat Difference(float a, float b)\n{\n    return max(a, -b);\n}\n\nfloat Box(vec3 p, vec3 c, vec3 size)\n{\n    // Définir les paramètres pour chaque composant de la boîte\n    float boxX = DemiPlan(p, vec3(1.0, 0.0, 0.0), c); // Plan vertical\n    float boxY = DemiPlan(p, vec3(0.0, 1.0, 0.0), c); // Plan horizontal\n    float boxZ = DemiPlan(p, vec3(0.0, 0.0, 1.0), c); // Plan de profondeur\n    \n    // Appliquer la taille à chaque plan\n    boxX = abs(boxX) - size.x * 0.5;\n    boxY = abs(boxY) - size.y * 0.5;\n    boxZ = abs(boxZ) - size.z * 0.5;\n    \n    // Combinez tous les composants de la boîte\n    float box = Intersection(boxX, boxY);\n    box = Intersection(box, boxZ);\n    \n    return box;\n}\n\nfloat etage(vec3 p)\n{   \n    // Tailles des différentes parties de la maison\n    vec3 wallSize = vec3(7.0, 3.5, 2.0); // Taille du mur augmentée\n    vec3 roofSize = vec3(7.5, 4.0, 0.4); // Taille du toit augmentée\n    vec3 windowSize = vec3(0.5, 0.5, 0.1); // Taille de la fenêtre\n\n    // Positions des différentes parties de la maison\n    vec3 wallPos = vec3(0.0, 0.0, 0.0);\n    vec3 roofPos = vec3(0.0, 0.0, 1.8); // Position du toit\n    vec3 windowPos = vec3(1.5, 1.0, 1.0); // Position de la fenêtre pour le premier étage\n\n    // Création des différentes parties de la maison pour chaque étage\n    float wall1 = Box(p, wallPos, wallSize); // Premier étage de mur\n    float wall2 = Box(p, wallPos + vec3(0.0, 0.0, 3.0), wallSize); // Deuxième étage de mur\n    float wall3 = Box(p, wallPos + vec3(0.0, 0.0, 6.0), wallSize); // Troisième étage de mur\n\n    float roof1 = Box(p, roofPos, roofSize); // Premier étage de toit\n    float roof2 = Box(p, roofPos + vec3(0.0, 0.0, 3.0), roofSize); // Deuxième étage de toit\n    float roof3 = Box(p, roofPos + vec3(0.0, 0.0, 6.0), roofSize); // Troisième étage de toit\n\n    float window1 = Box(p, windowPos, windowSize); // Fenêtre pour le premier étage\n    float window2 = Box(p, windowPos + vec3(0.0, 0.0, 3.0), windowSize); // Fenêtre pour le deuxième étage\n    float window3 = Box(p, windowPos + vec3(0.0, 0.0, 6.0), windowSize); // Fenêtre pour le troisième étage\n    \n    // Combinaison des composants pour former la maison\n    float house = Union(wall1, roof1);\n    house = Union(house, wall2);\n    house = Union(house, roof2);\n    house = Union(house, wall3);\n    house = Union(house, roof3);\n    \n    // Soustraction de la fenêtre au mur pour chaque étage\n    house = Difference(house, window1);\n    house = Difference(house, window2);\n    house = Difference(house, window3);\n    \n    return house;\n}\n\nfloat object(vec3 p)\n{\n    // Calcul de la distance au triangle de cylindres avec une sphère au centre\n    float v = etage(p);\n\n    // Union avec d'autres objets si nécessaire\n    v = Union(v,\n             Sphere(p, vec3(3.0, 0.0, 6.0), 0.0));\n\n    v = Union(v,\n              Sphere(p, vec3(0.0, -2.0, 5.0), 0.0));\n\n    v = Union(v,\n              Plane(p, vec3(0.0, 0.0, -1.0), vec3(0.0, 0.0, 1.0)));\n\n    return v;\n}\n\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n\n// La fonction Hemisphere qui génère une série de directions unitaires sur une sphère \nvec3 Hemisphere(int i, int n) {\n    float phi = float(i) * (3.14159265359 * (3.0 - sqrt(5.0))); // Golden ratio\n    float y = 1.0 - float(i) / float(n - 1) * 2.0; // Range from -1 to 1\n    float radius = sqrt(1.0 - y * y); // Projected radius onto the xy-plane\n    float x = cos(phi) * radius;\n    float z = sin(phi) * radius;\n    return normalize(vec3(x, y, z));\n}\n// Fonction Occlusion\nfloat Occlusion(vec3 p, vec3 n, int numSamples) {\n    float occlusion = 0.0; // Initialiser l'occlusion à 0\n    \n    // Boucle à travers les échantillons sur l'hémisphère\n    for (int i = 0; i < numSamples; ++i) {\n        vec3 sampleDir = Hemisphere(i, numSamples); // Obtenir la direction d'échantillonnage\n        float dotProduct = dot(sampleDir, n); // Calcule le produit scalaire entre la direction d'échantillonnage et la normale\n        \n        // Ignorer les échantillons en dessous de l'horizon\n        if (dotProduct > 0.0) {\n            vec3 occlusionRo = p + n * Epsilon; // Décale légèrement l'origine du rayon pour éviter l'auto-occlusion\n            vec3 occlusionRd = sampleDir; // Définir la direction du rayon\n            \n            bool hit;\n            int s;\n            float t = SphereTrace(occlusionRo, occlusionRd, 1e30, hit, s); // Tracer le rayon et obtenir la distance jusqu'à l'intersection\n            \n            if (hit) {\n                occlusion += 1.0; // Incrémenter si l'échantillon est occlus\n            }\n        }\n    }\n    \n    return occlusion / float(numSamples); // Normaliser le nombre d'échantillons occlus\n}\n\n// Image\nvoid mainImage(out vec4 color, in vec2 pxy)\n{\n    // Picture in picture on\n    bool pip = true;\n\n    // Pixel\n    vec2 pixel = Pip(pxy, pip);\n\n    // Mouse\n    vec2 m = iMouse.xy / iResolution.xy;\n\n    // Camera\n    vec3 ro, rd;\n    Ray(m, pixel, ro, rd);\n\n    // Trace ray\n\n    // Hit and number of steps\n    bool hit;\n    int s;\n\n    float t = SphereTrace(ro, rd, 100., hit, s);\n\n    // Shade background\n    vec3 rgb = background(rd);\n\n    if (hit)\n    {\n        // Position\n        vec3 p = ro + t * rd;\n\n        // Compute normal\n        vec3 n = ObjectNormal(p);\n\n        // Calculate occlusion using Occlusion function\n        float occlusion = Occlusion(p, n, 100); // Using 100 samples for occlusion estimation\n\n        // Shade object with light and occlusion\n        rgb = Shade(p, n, rd) * (1.0 - occlusion);\n    }\n\n    // Uncomment this line to shade image with false colors representing the number of steps\n    if (pip == true)\n    {\n        rgb = ShadeSteps(s);\n    }\n\n    color = vec4(rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}