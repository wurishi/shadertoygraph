{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"\n//define this for replicating the row of chairs w/ mod\n//seems buggy, sometimes the back of the chairs don't render, but its way faster\n#define USE_MOD_FOR_CHAIRS\n\nvec2 raymarch(in vec3 ro, in vec3 rd, in float maxt);\nvec3 calc_normal(in vec3 pos);\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\n\nfloat hash( float n ) { return fract(sin(n)*43758.5453123); }\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\nfloat tbnoise(in vec3 pos)\n{\n    float f = 0.;\n    vec3 q = 8.0*pos;\n            f  = 0.5000*noise( q ); q = m*q*2.01;\n            f += 0.2500*noise( q ); q = m*q*2.02;\n            f += 0.1250*noise( q ); q = m*q*2.03;\n            f += 0.0625*noise( q ); q = m*q*2.01;\n    return f;\n}\n\nvec2 chair(in vec3 p)\n{\n    float t = sdBox(p, vec3(.03, .4, .25));//back\n    t = opS(t, sdBox(p, vec3(.6, .2, .15)));\n    t = min(t, sdBox(p+vec3(.27,.4,0.), vec3(.25, .03, .25)));//seat\n    \n    //legs\n    t = min(t, sdBox(p+vec3(0.,.7,0.22), vec3(.03, .3, .03)));\n    t = min(t, sdBox(p+vec3(0.,.7,-0.22), vec3(.03, .3, .03)));\n    t = min(t, sdBox(p+vec3(0.49,.7,0.22), vec3(.03, .3, .03)));\n    t = min(t, sdBox(p+vec3(0.49,.7,-0.22), vec3(.03, .3, .03)));\n    return vec2(t, 4.);\n}\n\nvec2 table(in vec3 p)\n{\n    float t = sdBox(p, vec3(.75, .03, 1.6)); //table top\n    //legs\n    t = min(t, sdBox(p+vec3(.7, .5, 1.55), vec3(.04, .5, .04)));\n    t = min(t, sdBox(p+vec3(.7, .5, -1.55), vec3(.04, .5, .04)));\n    t = min(t, sdBox(p+vec3(-.7, .5, 1.55), vec3(.04, .5, .04)));\n    t = min(t, sdBox(p+vec3(-.7, .5, -1.55), vec3(.04, .5, .04)));\n    return vec2(t, 1.);\n}\n\nvec2 map(in vec3 p)\n{\n    vec2 res = vec2(sdPlane(p), 0.);\n    \n    {\n        vec3 q = p;\n    \tq.x = abs(q.x);\n    \t#ifdef USE_MOD_FOR_CHAIRS\n        q.z = mod(q.z, .8)-.4;\n    \tvec2 c = chair(q-vec3(1.1, 1., 0.));\n        c.x = max(c.x, abs(p.z)-1.7);\n        res = opU(res, c);//chair(q - vec3(1.1, 1., 0.)));\n        #else\n        q.z += .4;\n        res = opU(res, chair(q - vec3(1.1, 1., -.8)));\n    \tres = opU(res, chair(q - vec3(1.1, 1., 0.)));\n    \tres = opU(res, chair(q - vec3(1.1, 1., .8)));\n    \tres = opU(res, chair(q - vec3(1.1, 1., 1.6)));\n        #endif\n    }\n    \n    res = opU(res, table(p-vec3(0., 1., 0.)));\n    \n    return res;\n}\n\nvec3 mat_color(float id, in vec3 p)\n{\n \tif(id == 0.) return vec3(.35, .35, .33);\n    else if(id == 1.)\n    {\n        return vec3(.2, .1, .1)*tbnoise(p*vec3(8., .5, 1.));\n    }\n    else if(id == 4.) return vec3(.8, .4, 0.);\n    else return vec3(0., 0., 1.);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat totao = 0.0;\n    float sca = 1.0;\n    for( int aoi=0; aoi<5; aoi++ )\n    {\n        float hr = 0.01 + 0.05*float(aoi);\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        totao += -(dd-hr)*sca;\n        sca *= 0.75;\n    }\n    return clamp( 1.0 - 4.0*totao, 0.0, 1.0 );\n}\n\nvec3 shade(in vec3 p, in vec3 v, in vec3 n, in vec3 l, in float id)\n{\n\tfloat shd = 1.;\n    if(raymarch(p+l*.01, l, 100.).y >= 0.) shd = 0.;\n    vec3 sp = vec3(0.);\n    vec3 diffuse = mat_color(id,p)*dot(n,l);\n    vec3 ambient = calcAO(p, n)*diffuse*.3;\n    return ((diffuse+sp)*shd) + ambient;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\t\t \n\tfloat time = 15.0 + iTime;\n\n\t// camera\t\n\tvec3 ro = vec3( -0.5+4.2*cos(0.1*time + 6.0*mo.x), 2.0 + 4.0*mo.y, 0.5 + 4.2*sin(0.1*time + 6.0*mo.x) );\n\tvec3 ta = vec3( 0., 1., 0. );\n\t\n\t// camera tx\n\tvec3 cw = normalize( ta-ro );\n\tvec3 cp = vec3( 0.0, 1.0, 0.0 );\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n\tvec3 rd = normalize( p.x*cu + p.y*cv + 2.5*cw );\n    \n    vec3 col = vec3(0.);\n    \n    vec2 hr = raymarch(ro, rd, 1000.);\n    \n    if(hr.y >= 0.)\n    {\n        vec3 p = ro + rd*hr.x;\n        vec3 n = calc_normal(p);\n        vec3 l = (vec3(sin(time*.01), 5., cos(time*.01))-p);\n        float ld = length(l);\n        l /= ld;\n        col = shade(p, rd, n, l, hr.y) * (1./ld*ld);\n    }\n    \n\tfragColor = vec4(col, 1.);\n}\n\nvec3 calc_normal(in vec3 pos)\n{\n    \tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nvec2 raymarch(in vec3 ro, in vec3 rd, in float maxt)\n{\n    const float prs = .001;\n    float h = 2.*prs;\n    vec2 res = vec2(0, -1.);\n    for(int i = 0; i < 64; ++i)\n    {\n        if(res.x>maxt) break;\n        res.x += h;\n        vec2 r = map(ro+rd*res.x);\n        h = r.x;\n        res.y = r.y;\n    }\n    if(res.x>maxt) res.y = -1.0;\n    return res;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdlXWf","date":"1407522483","viewed":320,"name":"Dining room","username":"squid","description":"A dining room, just direct light with shadow + AO. Still a work in progress.Thanks to @movAX13h, @Dave_Hoskins, @eiffie","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""}}