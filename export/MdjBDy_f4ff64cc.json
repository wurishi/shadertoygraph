{"ver":"0.1","info":{"id":"MdjBDy","date":"1502088914","viewed":616,"name":"heart halfdonut worm","username":"ollj","description":"mouse does things.\n\ninner distance is not too good.\nseems to contain many hear shapes, with a single length()","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["heart","worm","superprim","bisymmetry","halfdonut"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nusing the framework of \nhttps://www.shadertoy.com/view/lsjBWy\nfor use in \nhttps://www.shadertoy.com/view/4d2BDy\n\nto quickly post an improved \"halfdonut\"=\"worm\"\n- improved in its symmetry by precalculating signs and delaying lenngth().\nand I found a parameter that makes it heart shaped.\n*/\n\n//toggle between square and round\n#define noLength\n\nfloat halfdonut(vec2 p, vec2 m) {\n    p.x=abs(p.x);  \n    float heart=m.y;\n    //heart=1. ;//overwrite to circle\n    //heart=-1.;//overwrite to water drop\n    //all else in between is pretty heart shaped, out of bounds is \"scary clown area\"\n    vec2  o=vec2(0);\n    float q=-sign(p.y);\n    float d=-m.x*(1.+q);//lower cuircle center//float d=0.;if(p.y>0.)d=size;\n    o.x    =-m.x*(heart-q);//upper circle radius//vec2 o=vec2(0);if(0>p.y)o.x=size;\n    //multiplying by *-m.x could be done on 2 domains of a vec3() !!\n    p+=o;     \n    float r=length(p);\n    #ifndef noLength\n    p=abs(p);r=max(p.x,p.y);//overwrite to square borders,of course this squares ALL round parts.\n    #endif\n    return abs(r+d);//yeaj abs wraps length, can not be undone.\n}    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y*1.5;\n    \n    \n    vec2 m=(iMouse.xy/iResolution.xy);\n    if(iMouse.z<0.)m=vec2(sin(iTime),cos(iTime*1.61))*.5+.5;\n    float len =halfdonut(uv,m);\n    len=abs(len-.5);//outline emphasizes the heart shapes\n\n    \n    //below is the distance coloring by iq from https://www.shadertoy.com/view/ldl3W8\n\t// isolines\n    vec3 col = len*(0.5 + 0.5*sin(64.0*len))*vec3(1.0);\n    // borders\t\n    col = mix( vec3(1.0,0.6,0.0), col, smoothstep( 0.01, 0.04, len ) );\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}