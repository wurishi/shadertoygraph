{"ver":"0.1","info":{"id":"7lBSDh","date":"1627519177","viewed":124,"name":"bg/fg test","username":"rhradec","description":"a bg/df separation test","likes":1,"published":1,"flags":34,"usePreview":0,"tags":["video"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float offset[5] = float[](0.0, 1.0, 2.0, 3.0, 4.0);\nfloat weight[5] = float[](0.2270270270, 0.1945945946, 0.1216216216,\n                                  0.0540540541, 0.0162162162);\n \n#define blur(  image, gl_FragCoord, FragmentColor) {\\\n    FragmentColor = rgb2hsv(texture(image, vec2(gl_FragCoord) / 1024.0).xyz) * weight[0]; \\\n    for (int i=1; i<5; i++) { \\\n        FragmentColor += rgb2hsv(\\\n            texture(image, (vec2(gl_FragCoord) + vec2(0.0, offset[i]/300.0)) / 1.0).xyz) \\\n                * weight[i]; \\\n        FragmentColor += \\\n            rgb2hsv(texture(image, (vec2(gl_FragCoord) - vec2(0.0, offset[i]/300.0)) / 1.0).xyz) \\\n                * weight[i]; \\\n    } \\\n}\n\n\nvec3 rgb2hsv(vec3 rgb) {\n \tfloat Cmax = max(rgb.r, max(rgb.g, rgb.b));\n \tfloat Cmin = min(rgb.r, min(rgb.g, rgb.b));\n \tfloat delta = Cmax - Cmin;\n\n \tvec3 hsv = vec3(0., 0., Cmax);\n\n \tif (Cmax > Cmin) {\n \t\thsv.y = delta / Cmax;\n\n \t\tif (rgb.r == Cmax)\n \t\t\thsv.x = (rgb.g - rgb.b) / delta;\n \t\telse {\n \t\t\tif (rgb.g == Cmax)\n \t\t\t\thsv.x = 2. + (rgb.b - rgb.r) / delta;\n \t\t\telse\n \t\t\t\thsv.x = 4. + (rgb.r - rgb.g) / delta;\n \t\t}\n \t\thsv.x = fract(hsv.x / 6.);\n \t}\n \treturn hsv;\n }\n\nfloat grayscale( in vec3 rgb)\n{\n    return (rgb.x+rgb.y+rgb.z)/3.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel1,uv).xyz;\n    vec3 coll = texture(iChannel2,uv).xyz;\n    vec3 col1 = vec3(0.0);\n    blur( iChannel1, uv, col1 );\n    vec3 col2 = vec3(0.0);\n    blur( iChannel2, uv, col2 );\n    \n    //col1=rgb2hsv(col1);\n    //col2=rgb2hsv(col2);\n    \n    float g1 = grayscale(col1);\n    float g2 = grayscale(col2);\n    g1 = pow(g1,0.5);\n    g2 = pow(g2,0.5);\n\n    // Output to screen\n    float mask=smoothstep(1.15,1.2,g2/g1);\n    fragColor = vec4(vec3(col)*mask,1.0);\n    fragColor = vec4(g2);\n    mask = col1.y;//smoothstep(0.2,0.25, 1.0-col1.z);\n    mask = mask - (col2.y);///smoothstep(0.0,0.5, 1.0-col2.z));\n    float mask2 = smoothstep(0.05,0.15,mask);\n    fragColor = vec4(col,0.0)*vec4(mask2);\n    fragColor = vec4(col,0.0)*vec4(mask2);\n    float mask3 = (rgb2hsv(col/col1.z).z-col2.z);\n    float mask4 = (-mask3)<0.2? 0.0 : 1.0;\n    //fragColor=vec4((mask3+1.0));\n    //fragColor = vec4(coll/col2.z,0.0);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    float n=0.0;\n    vec3 col=vec3(0);\n    /*\n    for(n=0.0;n<10.0;n+=10.0){\n    \n         col += texture( iChannel0, uv ).xyz;\n    }\n    col /= n;\n    */\n    col += texture( iChannel0, uv ).xyz;\n    fragColor=vec4(col,1);//-vec4(0.5,0,0,0);\n}","name":"Buffer B","description":"","type":"buffer"}]}