{"ver":"0.1","info":{"id":"lXXcz2","date":"1726424385","viewed":56,"name":"Rainy Window Effect","username":"arminkz","description":"rainy window effect","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["water","rain","droplet","rainy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//shortcut names\n#define S(a,b,t) smoothstep(a,b,t)\n\n//pseudo random generator\nfloat R(vec2 p) {\n    p = fract(p * vec2(123.456, 345.67));\n    p += dot(p, p+ 34.345);\n    return fract(p.x * p.y);\n}\n\n\nvec3 rainLayer(vec2 UV, float t) {\n    vec2 aspect = vec2(2.,1.);\n \n    vec2 uvg = UV * vec2(5.,3.) * aspect; // 5x5 grid\n    uvg.y += t*.25; // Grid moves linearly\n    \n    //Output color\n    vec3 col = vec3(0.);\n    \n    vec2 gv = fract(uvg) - .5;\n    vec2 id = floor(uvg);\n    \n    float noise = R(id);\n    t += noise * 6.28; // noise times 2pi because it's been used as phase of sine\n    \n    float w = UV.y * 10.;\n    float x = (noise - 0.5) * 0.8;\n    x *= sin(3.*w) * pow(sin(w),6.) * .65; // x-wise wiggle effect\n    \n    float y = -sin(t + sin(t + sin(t) * .5)) * .45; //slow rise, fast decline sine (rainfall effect)\n    y -= (gv.x-x)*(gv.x-x); // parabolic skew to drop\n    \n    vec2 dropPos = vec2(x, y);\n    vec2 dropDf = (gv - dropPos) / aspect;\n    float drop = S(0.05, 0.03, length(dropDf));\n    \n    vec2 trailPos = vec2(x, t*.25);\n    vec2 trailDf = (gv - trailPos) / aspect;           // distance function to trail pos\n    trailDf.y = ((fract(trailDf.y *  8.) - .5) / 8.) ; // repeat trail on y axis 8 times\n    float trail = S(0.02, 0.01, length(trailDf));\n    \n    float fogTrail = S(-0.05, 0.05, dropDf.y);\n    fogTrail *= S(.5, y, gv.y);                           // fade effect for trail\n    trail *= fogTrail;                                    // erase trail where drop hasent reached.\n\n    fogTrail *= S(0.05, 0.04, abs(dropDf.x));\n    \n    vec2 offset = vec2(0.);\n    if (drop > 0.) {\n        offset = drop * dropDf;\n    }\n    else {\n        offset = drop * dropDf + trail * trailDf;\n    }\n    \n    return vec3(offset, fogTrail);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // avoid very large values for t\n    float t = mod(iTime,7200.); \n    \n    vec3 drops = rainLayer(uv, t);\n    drops += rainLayer(uv * 1.23 + 7.54, t);\n    //drops += rainLayer(uv * 0.7 + 1.6, t);\n    \n    float blur = 2.5 * (1.- drops.z);\n    float distortion = 2.5;\n    \n    vec4 bg = textureLod(iChannel0, uv + drops.xy*distortion, blur);   // texture lod makes blur effect\n    \n    // Output to screen\n    fragColor = bg;\n} ","name":"Image","description":"","type":"image"}]}