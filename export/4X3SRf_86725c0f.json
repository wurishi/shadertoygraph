{"ver":"0.1","info":{"id":"4X3SRf","date":"1719324644","viewed":90,"name":"3D Supershape","username":"valvw","description":"supershape","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["supershape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n// constants\nfloat a = 1.0;\nfloat b = 1.0;\n\n// Supershape formula\nfloat supershape(float theta, float m, float n1, float n2, float n3) {\n    float t1 = abs(cos(m * theta / 4.0) / a);\n    t1 = pow(t1, n2);\n    float t2 = abs(sin(m * theta / 4.0) / b);\n    t2 = pow(t2, n3);\n    float r = pow(t1 + t2, -1.0 / n1);\n    return r;\n}\n\n//  distance to the supershape surface\nfloat distanceToSupershape(vec3 p, float m1, float n11, float n12, float n13, float m2, float n21, float n22, float n23) {\n    float phi = atan(p.z, p.x);\n    float r1 = supershape(phi, m1, n11, n12, n13);\n\n    float theta = atan(p.y, length(vec2(p.x, p.z)));\n    float r2 = supershape(theta, m2, n21, n22, n23);\n\n    float r = r1 * r2;\n    vec3 ss = vec3(r * cos(theta) * cos(phi), r * sin(theta), r * cos(theta) * sin(phi));\n\n    return length(p - ss);\n}\n\n// Raymarching\nvec3 raymarch(vec3 ro, vec3 rd, float m1, float n11, float n12, float n13, float m2, float n21, float n22, float n23) {\n    float t = 0.0;\n    vec3 p;\n    for(int i = 0; i < 100; i++) {\n        p = ro + t * rd;\n        float dist = distanceToSupershape(p, m1, n11, n12, n13, m2, n21, n22, n23);\n        if(dist < 0.001) break;\n        t += dist * 0.5;\n    }\n    return p;\n}\n\n// normal at point p\nvec3 getNormal(vec3 p, float m1, float n11, float n12, float n13, float m2, float n21, float n22, float n23) {\n    float eps = 0.001;\n    vec3 n;\n    n.x = distanceToSupershape(p + vec3(eps, 0, 0), m1, n11, n12, n13, m2, n21, n22, n23) - distanceToSupershape(p - vec3(eps, 0, 0), m1, n11, n12, n13, m2, n21, n22, n23);\n    n.y = distanceToSupershape(p + vec3(0, eps, 0), m1, n11, n12, n13, m2, n21, n22, n23) - distanceToSupershape(p - vec3(0, eps, 0), m1, n11, n12, n13, m2, n21, n22, n23);\n    n.z = distanceToSupershape(p + vec3(0, 0, eps), m1, n11, n12, n13, m2, n21, n22, n23) - distanceToSupershape(p - vec3(0, 0, eps), m1, n11, n12, n13, m2, n21, n22, n23);\n    return normalize(n);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 2.0); // Camera position\n    vec3 rd = normalize(vec3(uv, -1.0)); // Ray direction\n\n    // Dynamic parameters \n    float time = iTime * 0.5;\n    float m1 = 8.0 + 4.0 * sin(iTime);\n    float n11 = 0.2 + 0.1 * cos(iTime);\n    float n12 = 1.7 + 0.3 * sin(iTime * 0.5);\n    float n13 = 1.7 + 0.3 * cos(iTime * 0.5);\n    float m2 = 8.0 + 4.0 * cos(iTime * 0.7);\n    float n21 = 0.2 + 0.1 * sin(iTime * 0.7);\n    float n22 = 1.7 + 0.3 * cos(iTime * 0.3);\n    float n23 = 1.7 + 0.3 * sin(iTime * 0.3);\n\n    // Rotate \n    mat3 rotY = mat3(\n        cos(time), 0.0, sin(time),\n        0.0, 1.0, 0.0,\n        -sin(time), 0.0, cos(time)\n    );\n    mat3 rotX = mat3(\n        1.0, 0.0, 0.0,\n        0.0, cos(time), -sin(time),\n        0.0, sin(time), cos(time)\n    );\n\n    ro = rotY * ro;\n    rd = rotY * rd;\n\n    ro = rotX * ro;\n    rd = rotX * rd;\n\n    vec3 p = raymarch(ro, rd, m1, n11, n12, n13, m2, n21, n22, n23);\n    vec3 n = getNormal(p, m1, n11, n12, n13, m2, n21, n22, n23);\n    vec3 lightDir = normalize(vec3(1.0, 1.0, 1.0));\n    float diff = max(dot(n, lightDir), 0.0);\n\n    vec3 col = vec3(0.5 + 0.5 * cos(3.0 * p.x + iTime), 0.5 + 0.5 * sin(3.0 * p.y + iTime), 0.5 + 0.5 * cos(3.0 * p.z + iTime)) * diff;\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}