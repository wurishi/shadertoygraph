{"ver":"0.1","info":{"id":"wdjyDd","date":"1587556772","viewed":63,"name":"Trig funcs on a grid","username":"bikemule","description":"Draws sin, cos, tan in that order on a cartesian grid.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["trig","cartesian","trigonometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Drawing basic trig functions\n// Done from memory for practice\n\n#define PI 3.14159\n#define TICKS 1. / 4.\n\n\nbool between(float p, float lower, float upper) {\n    return p > lower && p < upper;\n}\n\nbool origin_lines(vec2 uv, float lw) {\n\t// Draw Cartesian coord lines\n    /*\n\tOriginal version\n\t\n\tif(between(uv.y, 0.-lw, 0.+lw) || between(uv.x, 0.-lw, 0.+lw))\n       col = fgcolor;\n    */\n    return abs(uv.x) < lw || abs(uv.y) < lw;\n}\n\nbool tick_marks(vec2 uv, float lw) {\n    // Draw x-axis tick marks\n    if((mod(abs(uv.x), TICKS) < lw) && between(uv.y, 0.-3.*lw, 0.+3.*lw))\n      return true;\n    \n    // Draw y-axis tick marks\n    if((mod(abs(uv.y), TICKS) < lw) && between(uv.x, 0.-3.*lw, 0.+3.*lw))\n       return true;\n    \n    return false;\n}\n\nbool sine(vec2 uv, float lw) {\n    return between(uv.y, sin(uv.x*2.*PI) - lw, sin(uv.x*2.*PI) + lw);\n}\n\nbool cosine(vec2 uv, float lw) {\n    return between(uv.y, cos(uv.x*2.*PI) - lw, cos(uv.x*2.*PI) + lw);\n}\n\nbool tangent(vec2 uv, float lw) {\n    return between(uv.y, tan(uv.x*2.*PI) - lw, tan(uv.x*2.*PI) + lw);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Move origin to center, a la Descartes\n    uv -= vec2(0.5);\n    \n    // Multiply y axis so it goes from -1 to +1 so we can see full graphs\n    // TODO: makes x-axis line fatter\n    uv.y *= 2.;\n    \n    // Make dimensions square\n    uv.x *= iResolution.x/iResolution.y;\n    \n    const float lw = .003;  // Line width\n    \n    const vec3 fgcolor = vec3(1., 1., 1.);  // Black\n    const vec3 bgcolor = vec3(0., 0., 0.);  // White\n    \n    vec3 col = bgcolor;\n        \n    // Draw x and y axes\n    if(origin_lines(uv, lw)) {\n        fragColor = vec4(fgcolor, 1.);\n        return;  // Skip extra calculations\n    }\n   \n  \t// Tick marks on axes\n    if(tick_marks(uv, lw)) {\n        fragColor = vec4(fgcolor, 1.);\n        return;  // Skip extra calculations\n    }\n\n    // Cycle between the three trig funcs\n    if(mod(iTime, 10.) < 4.) {\n\t    // Draw sine wave\n    \tif(sine(uv, lw))\n     \t  \tcol = fgcolor;\n    } else if(mod(iTime, 10.) < 7.) {\n    \tif(cosine(uv, lw))\n            col = fgcolor;\n    } else {\n        if(tangent(uv, lw))\n            col = fgcolor;\n    }\n        \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}