{"ver":"0.1","info":{"id":"lcX3DH","date":"1703022258","viewed":24,"name":"ZombieBlob","username":"Brrainz","description":"A test for creating a zombie blob creature","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["metaballs","mod","rimworld"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec4 color_bg = vec4(0.8, 0.7, 0.5, 0.0);\nconst vec4 color_inner = vec4(0.0, 0.4, 0.2, 1.0);\nconst vec4 color_outer = vec4(0.0, 0.0, 0.0, 1.0);\n\nconst vec2 cellSize = vec2(19.0, 28.0); //alt: vec2(22.0, 34.0);\n\nconst float tMax = 0.4; //alt: 0.5;\nconst float tMin = tMax - 0.05; //alt: tMax - 0.1;\n\nconst vec2 powerExponent = vec2(0.9, 3.0); //alt: vec2(1.0, 4.0);\n\nconst int cellCount = 18;\nconst vec2 positions[cellCount] = vec2[]\n(\n    // bottom left\n    vec2(0.45, 0.5),\n    vec2(0.6, 0.5),\n    vec2(0.75, 0.5),\n    vec2(0.9, 0.5),\n    \n    // bottom right\n    vec2(1.35, 0.5),\n    vec2(1.35, 0.75),\n    vec2(1.5, 0.5),\n    vec2(1.65, 0.5),\n    vec2(1.65, 0.75),\n    \n    // top left\n    vec2(0.45, 1.5),\n    vec2(0.6, 1.5),\n    vec2(0.6, 1.25),\n    vec2(0.75, 1.25),\n    vec2(0.9, 1.25),\n    vec2(1.05, 1.25),\n    vec2(0.9, 1.5),\n    vec2(1.05, 1.5),\n    \n    // top right\n    vec2(1.5, 1.5)\n);\n\nvec4 powerToColor(vec2 power)\n{\n    vec4 color = mix(color_bg, color_outer, smoothstep(tMin, tMax, power.y));\n    color = mix(color, color_inner, smoothstep(tMin, tMax, power.x));\n    \n    if (power.x > 0.35 && power.y > 0.35)\n        color -= color * 0.3 * pow(1.0 / dot(power, power), 0.08);\n    \n    return color;\n}\n\nvec2 cellPower(int idx, vec2 coord, vec2 pos)\n{\n    vec2 hRes = iResolution.xy / 2.0;\n    vec2 f = hRes / vec2(320.0, 180.0);\n\n    // test jiggle\n    pos.x += sin(float(12 + idx) * iTime / 1.5);\n    pos.y += cos(float(7 + idx) * iTime / 1.5);\n\n    vec2 len = coord - pos;\n    vec2 power = f * f * cellSize * cellSize / dot(len, len);\n    power *= pow(power, powerExponent);\n    return power;\n}\n\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n    vec2 hRes = iResolution.xy / 2.0;\n    \n    vec2 pos;\n    vec2 power = vec2(0.0, 0.0);\n    for(int idx = 0; idx != cellCount; ++idx)\n    {\n        pos = hRes * positions[idx];\n    \tpower += cellPower(idx, coord.xy, pos);\n    }\n    \n    // test simulate expansion\n    float f = sin(iTime * 2.0);\n    if (f >= 0.0)\n    {\n        f = min(1.0, 1.4 * f);\n        \n        // bottom left\n        pos = hRes * vec2(0.45 - 0.15 * f, 0.5);\n    \tpower += cellPower(2, coord.xy, pos) * f;\n        \n        // bottom right\n        pos = hRes * vec2(1.5, 0.5 + 0.25 * f);\n    \tpower += cellPower(4, coord.xy, pos) * f;\n        \n        // top left\n        pos = hRes * vec2(0.75, 1.25 - 0.25 * f);\n    \tpower += cellPower(6, coord.xy, pos) * f;\n        \n        // top right\n        pos = hRes * vec2(1.5 + 0.15 * f, 1.5);\n    \tpower += cellPower(8, coord.xy, pos) * f;\n    }\n    \n    color = powerToColor(power);\n}","name":"Image","description":"","type":"image"}]}