{"ver":"0.1","info":{"id":"XfSGzz","date":"1703716843","viewed":76,"name":"adaptive stairs 3d","username":"jt","description":"Stairs with grated steps.\nUse mouse to change slope.\n","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["grid","sdf","circle","distance","box","angle","euclidean","stairs","construction","adaptive","exact","industrial","inscribed","thales","grated"],"hasliked":0,"parentid":"lfX3RX","parentname":"adaptive stairs"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/XfSGzz adaptive stairs 3d, 2023 jt\n// based on https://www.shadertoy.com/view/lfX3RX adaptive stairs\n// based on https://www.shadertoy.com/view/lclGz2 thales circle stairs\n// based on https://www.shadertoy.com/view/XcX3zX thales circle box\n\n// Stairs with grated steps.\n// Use mouse to change slope.\n\n// tags: grid, sdf, circle, distance, box, angle, euclidean, stairs, construction, adaptive, exact, industrial, inscribed, thales, grated\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat box(vec2 p, vec2 b) // https://iquilezles.org/articles/distfunctions2d/\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat frame(vec3 p, vec3 b) // https://www.shadertoy.com/view/XfSGzz adaptive stairs 3d (jt)\n{\n    float d = abs(box(p.xy,b.xy));\n    vec2 w = vec2(d, abs(p.z) - b.z);\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nvec2 bounce(vec2 t, vec2 s) // https://www.shadertoy.com/view/XfSGzz adaptive stairs 3d (jt)\n{\n    return abs(1.0-4.0*abs(fract(t/s/4.0)-0.5))*s;\n}\n\nfloat mincomp(vec2 v) // https://www.shadertoy.com/view/XfSGzz adaptive stairs 3d (jt)\n{\n    return min(v.x,v.y);\n}\n\nfloat grid(vec2 p, vec2 s) // https://www.shadertoy.com/view/XfSGzz adaptive stairs 3d (jt)\n{\n    return mincomp(bounce(p,s));\n}\n\nfloat astep(vec3 p, vec3 b, float mu) // https://www.shadertoy.com/view/XfSGzz adaptive stairs 3d (jt)\n{\n    float c = cos(mu);\n    float f = box(p.xy,b.xy*vec2(c,1));\n    float g = grid(p.xy,vec2(0.1*c));\n    float d = f > 0.0 ? f : min(-f,g);\n    vec2 w = vec2(d, abs(p.z) - b.z);\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat box(vec3 p, vec3 b) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat adaptive_stairs_steps(vec2 p, float hy, float mu) // https://www.shadertoy.com/view/XfSGzz adaptive stairs 3d (jt)\n{\n    float c = cos(mu);\n    float s = sin(mu);\n    mat2 M = mat2(c,s,-s,c);\n\n    p = p*M;\n\n    p *= c;\n\n    p.x -= clamp(round(p.x),1.0-hy,hy-1.0); // from iq's https://www.shadertoy.com/view/3syGzz limited rpetition SDF\n    vec2 p0 = vec2(p.x-0.5,p.y);\n    vec2 p1 = vec2(p.x+0.5,p.y);\n\n    return min(box(M*p0-vec2(0,s/2.0),0.5*vec2(c,0)),box(M*p1-vec2(0,s/2.0),0.5*vec2(c,0)))/c; // line variant\n    //return min(box(M*p0,0.5*vec2(c,s)),box(M*p1,0.5*vec2(c,s)))/c; // box variant\n}\n\nfloat adaptive_stairs_steps(vec3 p, vec3 h, float mu) // https://www.shadertoy.com/view/XfSGzz adaptive stairs 3d (jt)\n{\n    float c = cos(mu);\n    float s = sin(mu);\n    mat2 M = mat2(c,s,-s,c);\n\n    p.yz = p.yz*M;\n\n    p *= c;\n\n    p.y -= clamp(round(p.y),1.0-h.y,h.y-1.0); // from iq's https://www.shadertoy.com/view/3syGzz limited rpetition SDF\n    vec2 p0 = vec2(p.y-0.5,p.z);\n    vec2 p1 = vec2(p.y+0.5,p.z);\n\n    return\n        min\n        (\n            astep(vec3(p.x,M*p0)-vec3(0,0,s/2.0+h.z*2.0*c),vec3(h.x,0.5*c,h.z*c),mu),\n            astep(vec3(p.x,M*p1)-vec3(0,0,s/2.0+h.z*2.0*c),vec3(h.x,0.5*c,h.z*c),mu)\n        )\n        /\n        c;\n}\n\nfloat hseg(vec2 p)\n{\n    return length(p - vec2(clamp(p.x,-1.0,+1.0),0));\n}\n\nfloat adaptive_stairs_support(vec2 p, vec2 h, float mu) // https://www.shadertoy.com/view/XfSGzz adaptive stairs 3d (jt)\n{\n    float c = cos(mu);\n    float s = sin(mu);\n    mat2 M = mat2(c,s,-s,c);\n\n    p = p*M;\n\n    p *= c;\n\n    p.x -= clamp(round(p.x),1.0-h.x,h.x-1.0); // from iq's https://www.shadertoy.com/view/3syGzz limited rpetition SDF\n    vec2 p0 = vec2(p.x-0.5,p.y);\n    vec2 p1 = vec2(p.x+0.5,p.y);\n\n    return\n        min\n        (\n            min\n            (\n                max(-p.y,box(M*p0,(0.5-h.y)*vec2(c,s))),\n                max(-p.y,box(M*p1,(0.5-h.y)*vec2(c,s)))\n            ),\n            hseg(p) // TODO: consider cylinder instead of line?\n        )\n        /\n        c;\n}\n\nfloat adaptive_stairs_support(vec3 p, vec4 h, float mu) // https://www.shadertoy.com/view/XfSGzz adaptive stairs 3d (jt)\n{\n    float l = 1.0;\n    float s = h.x/l*2.0/3.0;\n    // limited repetition thanks to https://iquilezles.org/articles/distfunctions/\n    float q = p.x - s*clamp(round(p.x/s),-l,l);\n    return length(vec2(q,adaptive_stairs_support(p.yz,h.yw,mu)))-h.w;\n}\n\nfloat adaptive_stairs_plain(vec2 p, float n) // https://www.shadertoy.com/view/lfX3RX adaptive stairs\n{\n    float mu = pi/6.0*iMouse.x/iResolution.x;\n    if(all(lessThan(iMouse.xy,vec2(10.0)))) mu = (0.5+0.5*cos(2.0*pi*iTime/10.0))*pi/6.0;\n    float c = cos(mu);\n    float s = sin(mu);\n    mat2 M = mat2(c,s,-s,c);\n\n    p = p*M;\n\n    p *= c;\n\n    p.x -= clamp(round(p.x),-n,+n); // from iq's https://www.shadertoy.com/view/3syGzz limited rpetition SDF\n    vec2 p0 = vec2(p.x-0.5,p.y);\n    vec2 p1 = vec2(p.x+0.5,p.y);\n\n    return min(box(M*p0,0.5*vec2(c,s)),box(M*p1,0.5*vec2(c,s)))/c; // box variant\n}\n\nfloat adaptive_stairs_plain(vec3 p, float n)\n{\n    float h = 1.5;\n    vec2 w = vec2(adaptive_stairs_plain(p.yz, n), abs(p.x) - h);\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nvec4 combine(vec4 a, vec4 b)\n{\n    return a.w < b.w ? a : b;\n}\n\nvec4 adaptive_stairs(vec3 p, vec4 h, float mu) // https://www.shadertoy.com/view/XfSGzz adaptive stairs 3d (jt)\n{\n\n    float support = adaptive_stairs_support(p, h, mu);\n\n    return // grated stairs\n        //combine\n        (\n        //    vec4(vec3(1,0,0),adaptive_stairs_plain(p,2.0)),\n            combine\n            (\n                vec4(vec3(1),adaptive_stairs_steps(p,h.xyz,mu)-0.01),\n                vec4(vec3(1),support)\n            )\n        );\n\n    // plain stairs\n    float d = adaptive_stairs_steps(p.yz-vec2(0,h.z),h.y,mu);\n    // extrusion thanks to https://iquilezles.org/articles/distfunctions/\n    vec2 w = vec2(d, abs(p.x) - h.x);\n    //return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n    return vec4(1,1,1,min(min(max(w.x,w.y),0.0) + length(max(w,0.0))-0.02,support));\n}\n\nfloat frame(vec3 p, vec3 b, float e) // https://iquilezles.org/articles/distfunctions/\n{\n    p = abs(p)-b;\n    vec3 q = abs(p+e)-e;\n    return min(min(\n        length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n        length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n        length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nvec4 map(vec3 p)\n{\n    vec4 h = vec4(1.5,3,0.04,0.04);\n    float mu = pi/6.0*iMouse.x/iResolution.x;\n    if(all(lessThan(iMouse.xy,vec2(10.0)))) mu = (0.5+0.5*cos(2.0*pi*iTime/10.0))*pi/6.0;\n    /*\n    return\n        combine\n        (\n            adaptive_stairs(p,h,mu),\n            vec4(0.1,0.25,1,frame(p-vec3(0,0,h.z*2.0), vec3(h.xy,(h.y)*tan(mu)+h.z), h.z))\n        );\n    */\n    return adaptive_stairs(p,h,mu);\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h).w\n            +\n            k.yyx * map(p + k.yyx*h).w\n            +\n            k.yxy * map(p + k.yxy*h).w\n            +\n            k.xxx * map(p + k.xxx*h).w\n        );\n}\n\nvec4 trace(vec3 ro, vec3 rd, float t0, float t1) // pass on running out of iterations\n{\n    // NOTE: Limited number of iterations to avoid stalling\n    //       when ray passes closely (just above EPSILON)\n    //       in parallel to a surface.\n    uint i;\n    vec4 t;\n    for(t.w = t0, i = 0u; t.w < t1 && i < ITER_MAX; i++)\n    {\n        vec4 h = map(ro + rd * t.w);\n        if(h.w < EPSILON)\n            return vec4(h.xyz,t.w);\n        t.w += h.w;\n    }\n\n    return t; // stop on running out of iterations\n    //return vec4(0,0,0,t1); // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).w < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).w;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).w;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : pi / 2.0 + 2.0 * pi * fract(iTime/100.0);\n    //pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n    pitch = !demo ? pitch : 3.5/3.0 * pi / 2.0;\n    //pitch = !demo ? pitch : 3.2/3.0 * pi / 2.0;\n    //pitch = !demo ? pitch : (0.5-0.5*cos(iTime/pi/10.0)+3.0)/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-7.5);\n    vec3 rd = normalize(vec3(I.xy, 2.5)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    //ro.z += 0.0;\n\n    //vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 lightdir = normalize(vec3(-3.0,-2.0, 1.0));\n\n    vec4 result = trace(ro, rd, 0.0, DIST_MAX);\n    vec3 color = result.xyz;\n    float dist = result.w;\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n\n        //color = n * 0.5 + 0.5;\n\n        vec3 ambient = vec3(0.1);\n        float brightness = max(dot(lightdir, n), 0.0) * 2.0;\n        if(brightness > 0.0)\n            //brightness *= shadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0);\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        vec3 fog_color = vec3(0);\n        color = mix(fog_color, vec3(color), exp(-pow(dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        color *= 0.0;\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    color = sqrt(color); // approximate gamma\n\n    //color += hash32(I*123.0)/255.0; // dither to remove banding in the background\n\n    o = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}