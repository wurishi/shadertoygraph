{"ver":"0.1","info":{"id":"csSfDy","date":"1690183460","viewed":69,"name":"Dancing Sphere for Ray Tracing2","username":"G04","description":"A simple shader for ray tracing.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["asimpleshaderforraytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//==================================================================================\n//  The fairy who controls lifeÔºÅ\n//  Show your magic!\n//  (Click on the left side of the screen to bring them to life)\n//  (Click on the right side of the screen to deprive them of the power to live)\n//==================================================================================\n\n\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n\n// Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * PI / 180.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow raay intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n// Constants for the scene objects.\nconst int NUM_LIGHTS = 2;\nconst int NUM_MATERIALS = 5;\nconst int NUM_PLANES = 5;\nconst int NUM_SPHERES = 19;\nconst int NUM_CYLINDERS = 1;\n// The amplitude and frequency of the wave\nconst float amplitude = 0.1;\nconst float frequency = 0.3;\n\n// The direction of motion of the wave\nconst vec2 wave_dir = vec2(1.0, 0.0);\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 1;\n\n\n    // Vertical plane.\n    Plane[1].A = 0.0;\n    Plane[1].B = 0.0;\n    Plane[1].C = 1.0;\n    Plane[1].D = 5.5;\n    Plane[1].materialID = 2;\n    \n    Plane[2].A = 1.0;\n    Plane[2].B = 0.0;\n    Plane[2].C = 0.0;\n    Plane[2].D = 5.5;\n    Plane[2].materialID = 2;\n    \n    Plane[3].A = 0.0;\n    Plane[3].B = 0.0;\n    Plane[3].C = -1.0;\n    Plane[3].D = 5.5;\n    Plane[3].materialID = 2;\n    \n    Plane[4].A = -1.0;\n    Plane[4].B = 0.0;\n    Plane[4].C = 0.0;\n    Plane[4].D = 5.5;\n    Plane[4].materialID = 2;\n    \n    // Round bouncing sphere.\n    Sphere[0].center = vec3( (1.5*cos(iTime)-2.75)*0.4, (0.3+ abs(cos(6.2831 * iTime)))*0.4, -1.5*sin(-iTime)-2.75);\n    Sphere[0].radius = 0.3;\n    Sphere[0].materialID = 0;\n    \n    Sphere[1].center = vec3( (-1.5*cos(iTime)+2.75)*0.4, (0.3+ abs(cos(6.2831 * iTime)))*0.4, -1.5*sin(-iTime)-2.75);\n    Sphere[1].radius = 0.3;\n    Sphere[1].materialID = 0;\n    \n    Sphere[2].center = vec3( 1.5*cos(iTime)-2.75, 0.3+ abs(cos(6.2831 * iTime)), 1.5*sin(-iTime)-2.75);\n    Sphere[2].radius = 0.3;\n    Sphere[2].materialID = 0;\n    \n    Sphere[3].center = vec3( -1.5*cos(iTime)+2.75, 0.3+ abs(cos(6.2831 * iTime)), 1.5*sin(-iTime)-2.75);\n    Sphere[3].radius = 0.3;\n    Sphere[3].materialID = 0;\n    \n    Sphere[4].center = vec3( -1.5*cos(iTime)+2.75, 0.3+ abs(cos(6.2831 * iTime)), 1.5*sin(iTime)+2.75);\n    Sphere[4].radius = 0.3;\n    Sphere[4].materialID = 0;\n   \n    Sphere[5].center = vec3( 1.5*cos(iTime)-2.75, 0.3+ abs(cos(6.2831 * iTime)), 1.5*sin(iTime)+2.75);\n    Sphere[5].radius = 0.3;\n    Sphere[5].materialID = 0;\n   \n    Sphere[6].center = vec3( (-1.5*cos(iTime)+2.75)*0.4, (0.3+ abs(cos(6.2831 * iTime)))*0.4, -1.5*sin(iTime)+2.75);\n    Sphere[6].radius = 0.3;\n    Sphere[6].materialID = 0;\n    \n    Sphere[7].center = vec3( (1.5*cos(iTime)-2.75)*0.4, (0.3+ abs(cos(6.2831 * iTime)))*0.4, -1.5*sin(iTime)+2.75);\n    Sphere[7].radius = 0.3;\n    Sphere[7].materialID = 0;\n    \n    \n    // Center sphere\n    Sphere[18].center = vec3(0.0,2.0,0.0);\n    Sphere[18].radius = 0.6;\n    Sphere[18].materialID = 4;\n    \n    \n    // Center rounding sphere material\n    Material[0].k_d = vec3( 1.0, 1.0, 1.0 );\n    Material[0].k_a = 0.0 * Material[0].k_d;\n    Material[0].k_r = 1.0 * Material[0].k_d;\n    Material[0].k_rg = 1.0 * Material[0].k_r;\n    Material[0].n = 128.0;\n    Material[0].ior = 1.5;\n    Material[0].fuzz = -1.0;\n    \n    // floor material\n    Material[1].k_d = vec3( 0.4, 0.4, 0.4 );\n    Material[1].k_a = 0.9 * Material[0].k_d;\n    Material[1].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[1].k_rg = 0.2 * Material[0].k_r;\n    Material[1].n = 128.0;\n\n\n\n    // Wall material.\n    Material[2].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[2].k_a = 0.9 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.2 * Material[2].k_r;\n    Material[2].n = 128.0;\n\n    \n    // Round bouncing sphere material\n    Material[3].k_d = vec3( 1.0, 1.0, 1.0);\n    Material[3].k_a = 0.2 * Material[3].k_d;\n    Material[3].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[3].k_rg = 0.5 * Material[3].k_r;\n    Material[3].n = 128.0;\n    Material[3].ior = -1.0;\n    Material[3].fuzz = -1.0;\n    \n    // Center sphere material.\n    Material[4].k_d = vec3( 0.6, 0.8, 0.9 );\n    Material[4].k_a = 0.2 * Material[4].k_d;\n    Material[4].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[4].k_rg = 0.5 * Material[4].k_r;\n    Material[4].n = 128.0;\n    \n    // Light 0.\n    // Light[0].position = vec3( 2.0, 18.0, -3.0 );\n    Light[0].position = vec3( 4.0,12.0,-3.0);\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n   \n    float intensityFactor = clamp(0.3 + 0.7 * (sin(iTime) * 0.5 + 0.5), 0.3, 1.0);\n    //Light[0].I_source = intensityFactor0 * vec3( 0.3*cos(iTime) +0.1, 0.3*sin(iTime)+0.1, 0.3*sin(iTime)+0.1 );\n    \n    // Light 1.\n    // Light[1].position = vec3( 1.0, 10.0, 1.0 );\n    Light[1].position = vec3(-4.0,12.0,0.0);\n    Light[1].I_a = vec3( 0.1, 0.1, 0.1 );\n\n   \n    //Light[1].I_source = intensityFactor1 * vec3( 1.0, 1.0, 1.0 );\n    \n    Light[0].I_source =intensityFactor * vec3( 0.8*abs(sin(0.2*iTime)), 0.8*abs(cos(0.2*iTime)), 0.8*abs(sin(1.2*iTime)) );\n    Light[1].I_source =intensityFactor * vec3( 0.5*abs(sin(0.4*iTime)), 0.5*abs(cos(0.1*iTime)), 0.5*abs(sin(1.4*iTime)) );\n    \n \n    \n\n    const int sphere_count = NUM_SPHERES-1;\n    const float shpere_count_float = 2.0 * PI / float(sphere_count); // Each sphere's \"position\" along the circle (in radians)\n\n    for (int i = 8; i < sphere_count; ++i)\n    {\n        Sphere[i].radius = 0.2 + 0.02 * (1.0 + sin(iTime)) / 2.0;\n        Sphere[i].materialID = 3; // Or some material ID\n\n        float time_factor = iTime * 1.3f ; // Adjust this value to control the speed of rotation\n\n        // Calculate each sphere's position in the circle based on the current time and its \"position\" in the circle\n        Sphere[i].center.x = cos(shpere_count_float * float(i) + time_factor);\n        Sphere[i].center.y = sin(shpere_count_float * float(i) + time_factor)+2.0;\n        \n        // Set sphere's Z position as bounce height\n        Sphere[i].center.z =  sin(shpere_count_float * float(i) + time_factor); // The 0.3 value here controls the bounce height\n    }\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a +\n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray,\n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg )\n{\n    // Find whether and where the ray hits some object.\n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    // Iterate through all planes and check for intersection.\n    for (int i = 0; i < NUM_PLANES; i++)\n    {\n        temp_hasHit = IntersectPlane(Plane[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if (temp_hasHit)\n        {\n            // Check if this is the nearest intersection.\n            if (temp_t < nearest_t)\n            {\n                hasHitSomething = true;\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Plane[i].materialID;\n            }\n        }\n    }\n\n    // Iterate through all spheres and check for intersection.\n    for (int i = 0; i < NUM_SPHERES; i++)\n    {\n        temp_hasHit = IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if (temp_hasHit)\n        {\n            // Check if this is the nearest intersection.\n            if (temp_t < nearest_t)\n            {\n                hasHitSomething = true;\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Sphere[i].materialID;\n            }\n         }\n     }\n    \n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n    \n    if(nearest_hitMatID==3){\n        vec2 uv = get_sphere_uv(nearest_hitNormal);\n        vec3 diffuse_color = texture(iChannel1,uv).rgb;\n        Material[3].k_d = diffuse_color;\n        Material[3].k_a = 0.5 * Material[2].k_d;\n        Material[3].k_rg = 0.05 * Material[2].k_r;\n    }\n\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n    \n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point.\n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the\n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    // Accumulate lighting from each light source on the nearest hit point.\n    for (int i = 0; i < NUM_LIGHTS; i++)\n    {\n        // Make a shadow ray towards the light source.\n        vec3 shadowRayDir = Light[i].position - nearest_hitPos;\n        float shadowRayDist = length(shadowRayDir);\n        vec3 shadowRayDirNormalized = normalize(shadowRayDir);\n\n        // Check for shadow by intersecting the shadow ray with all objects.\n        bool inShadow = false;\n        for (int j = 0; j < NUM_PLANES; j++)\n        {\n            float t;\n            vec3 hitPosCandidate;\n            vec3 hitNormalCandidate;\n            if (IntersectPlane(Plane[j], Ray_t(nearest_hitPos, shadowRayDirNormalized), DEFAULT_TMIN, shadowRayDist, t, hitPosCandidate, hitNormalCandidate))\n            {\n                inShadow = true;\n                break;\n            }\n        }\n\n        for (int j = 0; j < NUM_SPHERES; j++)\n        {\n            float t;\n            vec3 hitPosCandidate;\n            vec3 hitNormalCandidate;\n            if (IntersectSphere(Sphere[j], Ray_t(nearest_hitPos, shadowRayDirNormalized), DEFAULT_TMIN, shadowRayDist, t, hitPosCandidate, hitNormalCandidate))\n            {\n                inShadow = true;\n                break;\n            }\n        }\n\n        // Compute lighting for this light source using Phong Lighting Model.\n        I_local += PhongLighting(shadowRayDirNormalized, nearest_hitNormal, -ray.d, inShadow, Material[nearest_hitMatID], Light[i]);\n    }\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n\n    // Scale the 2D position of the pixel so that its y coordinates range between [-1.0, 1.0]\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Add the water surface ripple effect to the camera position\n    // Check iMouse.x to decide num value\n    bool magic =false;\n    if(iMouse.x < iResolution.x / 2.0) \n        magic = true;\n    vec3 cam_pos = 5.5*normalize(vec3(sin(frequency * iTime), 0.8/5.5, cos(frequency * iTime)));  \n    \n    if(magic)     \n        cam_pos.y =  0.3;\n      \n    vec3 cam_lookat = vec3( 0.25, 1.0, 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Set the camera coordinate system in the world coordinate system\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    \n    // Create a main ray with a water surface ripple effect\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    float displacement = amplitude * sin(6.2831 * pixel_pos.x + 0.3 * iTime) + amplitude * sin(6.2831 * pixel_pos.y + 0.3 * iTime);\n    vec3 displaced_cam_pos = cam_pos + cam_y_axis * displacement;\n    Ray_t pRay;\n  \n    vec3 er = normalize(vec3(pixel_pos, pixel_pos_z));\n    pRay.d = normalize(mat3( cam_x_axis , cam_y_axis , cam_z_axis)*er );\n      if(magic)      \n       pRay.o =displaced_cam_pos;    \n    else  \n       pRay.o =cam_pos;\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ )\n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float PI = 3.1415926536;\nconst float TAU = 2.0*PI;\n\nconst float EXPOSURE = 12.0;\nconst float OMNI_LIGHT = 0.1;\nconst float FLOOR_REFLECTION = 0.15;\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n    float ior;\n    float fuzz;\n};\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection\n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    // return false;  // Replace this with your code.\n    vec3 centerToRay = ray.o - sph.center;\n    float a = dot(ray.d, ray.d);\n    float b = 2.0 * dot(centerToRay, ray.d);\n    float c = dot(centerToRay, centerToRay) - sph.radius * sph.radius;\n    float discriminant = b * b - 4.0 * a * c;\n\n    if (discriminant < 0.0) return false;\n\n    float t0 = (-b - sqrt(discriminant)) / (2.0 * a);\n    float t1 = (-b + sqrt(discriminant)) / (2.0 * a);\n\n    if (t0 < tmin && t1 < tmin || t0 > tmax && t1 > tmax) return false;\n\n    t = (t0 > tmin && t0 < tmax) ? t0 : t1;\n    hitPos = ray.o + t * ray.d;\n    hitNormal = normalize(hitPos - sph.center);\n    return true;\n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    // return false;  // Replace this with your code.\n    // Compute the components of the quadratic equation.\n    vec3 oc = ray.o - sph.center;\n    float a = dot(ray.d, ray.d);\n    float b = 2.0 * dot(oc, ray.d);\n    float c = dot(oc, oc) - sph.radius * sph.radius;\n\n    // Compute the discriminant.\n    float discriminant = b * b - 4.0 * a * c;\n\n    // Check if the ray intersects the sphere.\n    if (discriminant >= 0.0)\n    {\n        // Compute the two possible values of t.\n        float t1 = (-b - sqrt(discriminant)) / (2.0 * a);\n        float t2 = (-b + sqrt(discriminant)) / (2.0 * a);\n\n        // Check if t1 or t2 lies within the given tmin and tmax range.\n        if ((t1 >= tmin && t1 <= tmax) || (t2 >= tmin && t2 <= tmax))\n        {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nvec2 get_sphere_uv(in vec3 normal){\n     float theta = acos(normal.z);\n     float _atan = atan(normal.z, normal.x);\n     float phi = _atan*_atan + PI;\n     return vec2(phi/TAU,theta/PI);\n}\n/*\nfloat merge_sphere_sdf(in Sphere_t sph1,in Sphere_t sph2, in vec3 p){\n    float d1 = length(p-sph1.center)-sph1.radius;\n    float d2 = length(p-sph2.center)-sph2.radius;\n    const float k = 2.0;\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n\n\nvec3 calculate_normal(in Sphere_t sph1,in Sphere_t sph2,in vec3 p)\n{\n    const float h = 1e-6;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*merge_sphere_sdf(sph1,sph2,p + k.xyy*h ) + \n                      k.yyx*merge_sphere_sdf(sph1,sph2,p + k.yyx*h ) + \n                      k.yxy*merge_sphere_sdf(sph1,sph2,p + k.yxy*h ) + \n                      k.xxx*merge_sphere_sdf(sph1,sph2,p + k.xxx*h ) );\n}\n\nbool IntersectMergeSpheres( in Sphere_t sph1,in Sphere_t sph2, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    t = tmin;\n    const float MINIMUM_HIT_DISTANCE = 1e-6;\n    \n    vec3 ro = ray.o;\n    vec3 rd = ray.d;\n    \n     for (int i = 0; i < 32; ++i)\n    {\n        vec3 cur_pos = ro + t * rd;\n        \n        float distance_to_closest = merge_sphere_sdf(sph1,sph2,cur_pos);\n        if ( distance_to_closest< MINIMUM_HIT_DISTANCE) \n        {\n            hitPos = cur_pos;\n            hitNormal = calculate_normal(sph1,sph2,cur_pos);\n            return true;\n        }\n\n        if (t > tmax)\n        {\n            return false;\n        }\n        t += distance_to_closest;\n    }\n    return false;\n} \n\n\nfloat insideCone(vec3 direction, float angle, vec3 o)\n{\n    float oz = dot(o, direction);\n    vec3 oxy = o - direction * oz;\n    float c = dot(oxy, oxy) / (angle * angle) - (oz * oz);\n    return smoothstep(20.0, -50.0, c);\n}\n*/","name":"Common","description":"","type":"common"}]}