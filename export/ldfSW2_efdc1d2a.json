{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// srtuss, 2014\n//\n// I started making these visuals for Dave's \"Tropical Beeper\" track, but then the\n// soundshader-feature was added. :P\n\nvec2 rotate(vec2 p, float a)\n{\n\treturn vec2(p.x * cos(a) - p.y * sin(a), p.x * sin(a) + p.y * cos(a));\n}\n\nfloat box(vec2 p, vec2 b)\n{\n\tvec2 d = abs(p) - b;\n\treturn min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\n#define aav (4.0 / iResolution.y)\n\nvoid button(out vec4 bcol, inout vec3 acol, vec2 uv, float i1)\n{\n\tfloat v; vec3 col;\n\tv = box(uv, vec2(0.1)) - 0.05;\n\tfloat l = length(uv);\n\tfloat shd = exp(-40.0 * max(v, 0.0));\n\tcol = vec3(exp(l * -4.0) * 0.3 + 0.2);\n\tcol *= 1.0 - vec3(exp(-100.0 * abs(v))) * 0.4;\n\tv = smoothstep(aav, 0.0, v);\n\tbcol = mix(vec4(0.0, 0.0, 0.0, shd * 0.5), vec4(col, 1.0), v);\n\tcol = vec3(0.3, 1.0, 0.2) * exp(-30.0 * l * l) * 0.8 * i1;\n\tacol += col;\n}\n\nfloat f0(vec2 uv)\n{\n\tfloat l = length(uv);\n\treturn l - 0.2;\n}\n\nfloat f1(vec2 uv, float a)\n{\n\tfloat l = length(uv);\n\treturn l - 0.14 + sin((a + atan(uv.y, uv.x)) * 13.0) * 0.005;\n}\n\nfloat f2(vec2 uv, float a)\n{\n\tuv = rotate(uv, a);\n\tfloat l = length(uv);\n\tfloat w = max(abs(uv.x + 0.12) - 0.03, abs(uv.y) - 0.01);\n\treturn min(l - 0.1, w);\n}\n\nvec3 n0(vec2 p)\n{\n\tvec2 h = vec2(0.01, 0.0);\n\tfloat m = -0.01;\n\treturn normalize(vec3(max(f0(p + h.xy), m) - max(f0(p - h.xy), m), max(f0(p + h.yx), m) - max(f0(p - h.yx), m), 2.0 * h.x));\n}\n\nvec3 n1(vec2 p, float a)\n{\n\tvec2 h = vec2(0.01, 0.0);\n\treturn normalize(vec3(f1(p + h.xy, a) - f1(p - h.xy, a), f1(p + h.yx, a) - f1(p - h.yx, a), 2.0 * h.x));\n}\n\nvec3 n2(vec2 p, float a)\n{\n\tvec2 h = vec2(0.005, 0.0);\n\tfloat m = -0.005;\n\treturn normalize(vec3(max(f2(p + h.xy, a), m) - max(f2(p - h.xy, a), m), max(f2(p + h.yx, a), m) - max(f2(p - h.yx, a), m), 2.0 * h.x));\n}\n\nvec3 sun = normalize(vec3(-0.2, 0.5, 0.5));\n\nvoid knob(inout vec3 bcol, inout vec3 acol, vec2 uv, float a)\n{\n\tfloat v; vec3 col;\n\tfloat diff;\n\tfloat l = length(uv);\n\tbcol = mix(bcol, vec3(0.0), exp(max(l - 0.2, 0.0) * -20.0) * 0.5);\n\tv = f0(uv);\n\tv = smoothstep(aav, 0.0, v);\n\tdiff = max(dot(mix(n0(uv), vec3(0.0, 0.0, 1.0), smoothstep(0.02, 0.0, l - 0.115)), sun), 0.0);\n\tcol = vec3(diff) * 0.2;\n\tbcol = mix(bcol, col, v);\n\tbcol = mix(bcol, vec3(0.0), exp(max(l - 0.14, 0.0) * -40.0) * 0.5);\n\tv = f1(uv, a);//l - 0.14 + sin(atan(uv.y, uv.x) * 13.0) * 0.005;\n\tv = smoothstep(aav, 0.0, v);\n\tdiff = max(dot(mix(n1(uv, a), vec3(0.0, 0.0, 1.0), smoothstep(0.02, 0.0, l - 0.115)), sun), 0.0);\n\tcol = vec3(diff) * 0.2;//vec3(0.05);\n\tbcol = mix(bcol, col, v);\n\tv = f2(uv, a);\n\tv = smoothstep(aav, 0.0, v);\n\tdiff = max(dot(mix(n2(uv, a), vec3(0.0, 0.0, 1.0), 0.0), sun), 0.0);\n\tcol = vec3(diff) * 0.1 + 0.2;\n\tbcol = mix(bcol, col, v);//*/\n}\n\nfloat hash1(float x)\n{\n\treturn fract(sin(x * 11.1753) * 192652.37862);\n}\n\nfloat nse1(float x)\n{\n\tfloat fl = floor(x);\n\treturn mix(hash1(fl), hash1(fl + 1.0), smoothstep(0.0, 1.0, fract(x)));\n}\n\nfloat bf(float t)\n{\n\tfloat v = 0.04;\n\treturn exp(t * -30.0) + smoothstep(0.25 + v, 0.25 - v, abs(t * 2.0 - 1.0));\n}\n\n#define ITS 7\n\nvec2 circuit(vec3 p)\n{\n\tp = mod(p, 2.0) - 1.0;\n\tfloat w = 1e38;\n\tvec3 cut = vec3(1.0, 0.0, 0.0);\n\tvec3 e1 = vec3(-1.0);\n\tvec3 e2 = vec3(1.0);\n\tfloat rnd = 0.23;\n\tfloat pos, plane, cur;\n\tfloat fact = 0.9;\n\tfloat j = 0.0;\n\tfor(int i = 0; i < ITS; i ++)\n\t{\n\t\tpos = mix(dot(e1, cut), dot(e2, cut), (rnd - 0.5) * fact + 0.5);\n\t\tplane = dot(p, cut) - pos;\n\t\tif(plane > 0.0)\n\t\t{\n\t\t\te1 = mix(e1, vec3(pos), cut);\n\t\t\trnd = fract(rnd * 19827.5719);\n\t\t\tcut = cut.yzx;\n\t\t}\n\t\telse\n\t\t{\n\t\t\te2 = mix(e2, vec3(pos), cut);\n\t\t\trnd = fract(rnd * 5827.5719);\n\t\t\tcut = cut.zxy;\n\t\t}\n\t\tj += step(rnd, 0.2);\n\t\tw = min(w, abs(plane));\n\t}\n\treturn vec2(j / float(ITS - 1), w);\n}\n\nvec3 pixel(vec2 p, float time, float ct)\n{\t\n\tfloat te = ct * 9.0 / 16.0;//0.25 + (ct + 0.25) / 2.0 * 128.0 / 60.0;\n\tfloat ll = dot(p, p);\n\tp *= 1.0 - cos((te + 0.75) * 6.283185307179586476925286766559) * 0.01;\n\tvec2 pp = p;\n\tp = rotate(p, sin(time * 0.1) * 0.1 + nse1(time * 0.2) * 0.0);\n\tfloat r = 1.5;\n\tp = mod(p - r, r * 2.0) - r;\n\tp.x += 0.6;\n\tfloat i1 = bf(fract(0.75 + te));\n\tfloat i2 = bf(fract(0.5 + te));\n\tfloat i3 = bf(fract(0.25 + te));\n\tfloat i4 = bf(fract(0.0 + te));\n\tfloat s = time * 50.0;\n\tvec2 shk = (vec2(nse1(s), nse1(s + 11.0)) * 2.0 - 1.0) * exp(-5.0 * fract(te * 4.0)) * 0.1;\n\tpp += shk;\n\tp += shk;\n\tvec3 col = vec3(0.1);\n\ts = 0.2;\n\tfloat c = smoothstep(aav, 0.0, circuit(vec3(p, 0.1) * s).y / s - 0.001);\n\tcol += vec3(c) * 0.05;\n\tvec4 bcol; vec3 acol = vec3(0.0);\n\tbutton(bcol, acol, p, i1);\n\tcol = mix(col, bcol.xyz, bcol.w);\n\tbutton(bcol, acol, p - vec2(0.4, 0.0), i2);\n\tcol = mix(col, bcol.xyz, bcol.w);\n\tbutton(bcol, acol, p - vec2(0.8, 0.0), i3);\n\tcol = mix(col, bcol.xyz, bcol.w);\n\tbutton(bcol, acol, p - vec2(1.2, 0.0), i4);\n\tcol = mix(col, bcol.xyz, bcol.w);\n\tknob(col, acol, p - vec2(1.2, -0.6), 1.9);\n\tknob(col, acol, p - vec2(0.4, 0.6), 0.2);\n\tknob(col, acol, p - vec2(0.7, -0.6), -0.5);\n\tvec2 q = p - vec2(0.9, 0.6);\n\tvec2 qq = q - vec2(0.35, 0.0);\n\tfloat v = box(qq, vec2(0.4, 0.2)) - 0.01;\n\tcol = mix(col, vec3(0.2) * 0.8, smoothstep(aav, 0.0, v));\n\tcol += vec3(1.0) * exp(max(v, 0.0) * -30.0) * 0.14;\n\tcol -= vec3(1.0) * exp(dot(qq, qq) * -20.0) * 0.1;\n\tvec2 fr = mod(q, 0.03) - 0.015;\n\tvec2 id = floor(q / 0.03);\n\tv = box(fr, vec2(0.003)) - 0.003;\n\tfloat amp = 2.0;\n\tfloat inte = abs(id.y + sin(id.x * 0.6 + time * 4.0) * amp) - 0.8;\n\tacol += exp(max(v, 0.0) * -400.0) * smoothstep(0.5, 0.0, inte) * step(id.x, 21.0) * step(0.0, id.x);\n\t//0.018\n\tcol += acol;\n\tcol *= exp((length(pp) - 0.5) * -1.0) * 0.5 + 0.5;\n\tcol = pow(col, vec3(1.2, 1.1, 1.0) * 2.0) * 4.0;\n\tcol = pow(col, vec3(1.0 / 2.2));\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = 2.0 * uv - 1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n\tvec3 col = vec3(0.0);\n\tfloat j = 0.008;\n\tcol  = pixel(uv, iTime, iTime);\n\t/*col += pixel(uv, iTime + j * 1.0, iTime);\n\tcol += pixel(uv, iTime - j * 1.0, iTime);\n\tcol /= 3.0;//*/\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"XsfGRr"}],"inputs":[],"code":"// srtuss, 2014\n//\n// Writing this crude 303 emulation + some percussion was the first thing i tried with the new\n// soundshader-feature. The values are all tweaked by ear.\n\n// number of synthesized harmonics (tune for quality/preformance)\n#define NSPC 256\n\n#define pi2 6.283185307179586476925286766559\n\n// hard clipping distortion\nfloat dist(float s, float d)\n{\n\treturn clamp(s * d, -1.0, 1.0);\n}\nvec2 dist(vec2 s, float d)\n{\n\treturn clamp(s * d, -1.0, 1.0);\n}\n\n// quantize\nfloat quan(float s, float c)\n{\n\treturn floor(s / c) * c;\n}\n\n// my resonant lowpass filter's frequency response\nfloat _filter(float h, float cut, float res)\n{\n\tcut -= 20.0;\n\tfloat df = max(h - cut, 0.0), df2 = abs(h - cut);\n\treturn exp(-0.005 * df * df) * 0.5 + exp(df2 * df2 * -0.1) * 2.2;\n}\n\n// hash\nfloat nse(float x)\n{\n\treturn fract(sin(x * 110.082) * 19871.8972);\n\t//return fract(sin(x * 110.082) * 13485.8372);\n}\nfloat nse_slide(float x)\n{\n\tfloat fl = floor(x);\n\treturn mix(nse(fl), nse(fl + 1.0), smoothstep(0.0, 1.0, fract(x)));\n}\n\n// note number to frequency\nfloat ntof(float n)\n{\n\treturn 440.0 * pow(2.0, (n - 69.0) / 12.0);\n}\n\n// tb303 core\nvec2 synth(float tseq, float t)\n{\n\tvec2 v = vec2(0.0);\n\t\n\tfloat tnote = fract(tseq);\n\tfloat dr = 0.26;\n\tfloat amp = smoothstep(0.05, 0.0, abs(tnote - dr - 0.05) - dr) * exp(tnote * -1.0);\n\tfloat seqn = nse(floor(tseq));\n\t//float seqn = nse_slide(tseq);\n\tfloat n = 20.0 + floor(seqn * 38.0);//50.0 + floor(time * 2.0);\n\tfloat f = ntof(n);\n\t\n    float sqr = smoothstep(0.0, 0.01, abs(mod(t * 9.0, 64.0) - 20.0) - 20.0);\n    \n\tfloat base = f;//50.0 + sin(sin(t * 0.1) * t) * 20.0;\n\tfloat flt = exp(tnote * -1.5) * 50.0 + pow(cos(t * 1.0) * 0.5 + 0.5, 4.0) * 80.0 - 0.0;\n\tfor(int i = 0; i < NSPC; i ++)\n\t{\n\t\tfloat h = float(i + 1);\n\t\tfloat inten = 1.0 / h;\n\t\t//inten *= sin((pow(h, sin(t) * 0.5 + 0.5) + t * 0.5) * pi2) * 0.9 + 0.1;\n\t\t\n\t\tinten = mix(inten, inten * mod(h, 2.0), sqr);\n\t\t\n\t\tinten *= exp(-1.0 * max(2.0 - h, 0.0));// + exp(abs(h - flt) * -2.0) * 8.0;\n\t\t\n\t\tinten *= _filter(h, flt, 4.0);\n\t\t\n\t\t\n\t\tv.x += inten * sin((pi2 + 0.01) * (t * base * h));\n\t\tv.y += inten * sin(pi2 * (t * base * h));\n\t}\n\t\n\t\n\tfloat o = v.x * amp;//exp(max(tnote - 0.3, 0.0) * -5.0);\n\t\n\t//o = dist(o, 2.5);\n\t\n\treturn vec2(dist(v * amp, 2.0));\n}\n\n// heavy 909-ish bassdrum\nfloat kick(float tb, float time)\n{\n\ttb = fract(tb / 4.0) * 0.5;\n\tfloat aa = 5.0;\n\ttb = sqrt(tb * aa) / aa;\n\t\n\tfloat amp = exp(max(tb - 0.15, 0.0) * -10.0);\n\tfloat v = sin(tb * 100.0 * pi2) * amp;\n\tv = dist(v, 4.0) * amp;\n\tv += nse(quan(tb, 0.001)) * nse(quan(tb, 0.00001)) * exp(tb * -20.0) * 2.5;\n\treturn v;\n}\n\n// 909-ish open hihat\nfloat hat(float tb)\n{\n\ttb = fract(tb / 4.0) * 0.5;\n\tfloat aa = 4.0;\n\t//tb = sqrt(tb * aa) / aa;\n\treturn nse(sin(tb * 4000.0) * 0.0001) * smoothstep(0.0, 0.01, tb - 0.25) * exp(tb * -5.0);\n}\n\nfloat gate1(float t)\n{\n\t#define stp 0.0625\n\tfloat v;\n\tv = abs(t - 0.00 - 0.015) - 0.015;\n\tv = min(v, abs(t - stp*1. - 0.015) - 0.015);\n\tv = min(v, abs(t - stp*2. - 0.015) - 0.015);\n\tv = min(v, abs(t - stp*4. - 0.015) - 0.015);\n\tv = min(v, abs(t - stp*6. - 0.015) - 0.015);\n\tv = min(v, abs(t - stp*8. - 0.05) - 0.05);\n\tv = min(v, abs(t - stp*11. - 0.05) - 0.05);\n\tv = min(v, abs(t - stp*14. - 0.05) - 0.05);\n\t\n\treturn smoothstep(0.001, 0.0, v);\n}\n\nvec2 synth2(float time)\n{\n\tfloat tb = mod(time * 9.0, 16.0) / 16.0;\n\t\n\tfloat f = time * pi2 * ntof(87.0 - 12.0 + mod(tb, 4.0));\n\tfloat v = dist(sin(f + sin(f * 0.5)), 5.0) * gate1(tb);\n\t\n\treturn vec2(v);\n}\n\nvec2 synth2_echo(float time, float tb)\n{\n\tvec2 mx;\n\tmx = synth2(time) * 0.5;// + synth2(time) * 0.5;\n\tfloat ec = 0.3, fb = 0.6, et = 3.0 / 9.0, tm = 2.0 / 9.0;\n\tmx += synth2(time - et) * ec * vec2(1.0, 0.2); ec *= fb; et += tm;\n\tmx += synth2(time - et) * ec * vec2(0.2, 1.0); ec *= fb; et += tm;\n\tmx += synth2(time - et) * ec * vec2(1.0, 0.2); ec *= fb; et += tm;\n\tmx += synth2(time - et) * ec * vec2(0.2, 1.0); ec *= fb; et += tm;\n\treturn mx;\n}\n\n// oldschool explosion sound fx\nfloat expl(float tb)\n{\n\t//tb = fract(tb / 4.0) * 0.5;\n\tfloat aa = 20.0;\n\ttb = sqrt(tb * aa) / aa;\n\t\n\tfloat amp = exp(max(tb - 0.15, 0.0) * -10.0);\n\tfloat v = nse(quan(mod(tb, 0.1), 0.0001));\n\tv = dist(v, 4.0) * amp;\n\treturn v;\n}\n\nvec2 synth1_echo(float tb, float time)\n{\n    vec2 v;\n    v = synth(tb, time) * 0.5;// + synth2(time) * 0.5;\n\tfloat ec = 0.4, fb = 0.6, et = 2.0 / 9.0, tm = 2.0 / 9.0;\n\tv += synth(tb, time - et) * ec * vec2(1.0, 0.5); ec *= fb; et += tm;\n\tv += synth(tb, time - et).yx * ec * vec2(0.5, 1.0); ec *= fb; et += tm;\n\tv += synth(tb, time - et) * ec * vec2(1.0, 0.5); ec *= fb; et += tm;\n\tv += synth(tb, time - et).yx * ec * vec2(0.5, 1.0); ec *= fb; et += tm;\n\t\n    return v;\n}\n\nvec2 mainSound( in int samp,float time)\n{\n\tvec2 mx = vec2(0.0);\n\t\n\tfloat tb = mod(time * 9.0, 16.0);\n\t\n\t\n\tmx = synth1_echo(tb, time) * 0.8 * smoothstep(0.0, 0.01, abs(mod(time * 9.0, 256.0) + 8.0 - 128.0) - 8.0);\n\t\n    float hi = 1.0;\n    float ki = smoothstep(0.01, 0.0, abs(mod(time * 9.0, 256.0) - 64.0 - 128.0) - 64.0);\n    float s2i = 1.0 - smoothstep(0.01, 0.0, abs(mod(time * 9.0, 256.0) - 64.0 - 128.0) - 64.0);\n    hi = ki;\n    \n    mx += expl(mod(time * 9.0, 64.0) / 4.5) * 0.4 * s2i;\n    \n\tmx += vec2(hat(tb) * 1.5) * hi;\n\t\n\t//mx += dist(fract(tb / 16.0) * sin(ntof(77.0 - 36.0) * pi2 * time), 8.0) * 0.2;\n\t//mx += expl(tb) * 0.5;\n\t\n\tmx += vec2(synth2_echo(time, tb)) * 0.2 * s2i;\n\t\n\t\n\tmx = mix(mx, mx * (1.0 - fract(tb / 4.0) * 0.5), ki);\n\tfloat sc = sin(pi2 * tb) * 0.4 + 0.6;\n\tfloat k = kick(tb, time) * 0.8 * sc * ki;// - kick(tb, time - 0.004) * 0.5 - kick(tb, time - 0.008) * 0.25);\n\t\n\tmx += vec2(k);\n\t\n\t\n\t\n\tmx = dist(mx, 1.00);\n\t\n\treturn vec2(mx);\n}","name":"Sound","description":"","type":"sound"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":true,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldfSW2","date":"1406827361","viewed":22767,"name":"sound - acid jam","username":"srtuss","description":":love: the new sound feature. ","likes":329,"published":1,"flags":8,"usePreview":0,"tags":["emulation","303","bassline","kick","tb","909","hard","bassdrum"],"hasliked":0,"parentid":"","parentname":""}}