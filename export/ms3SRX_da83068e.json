{"ver":"0.1","info":{"id":"ms3SRX","date":"1680979297","viewed":47,"name":"TP3: Animation","username":"Lidia","description":"Lidia Cruz Pérez p2212260","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tp3"],"hasliked":0,"parentid":"ms3GDn","parentname":"TP1: Modélisation formes simples"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// TP3: Animation \n// Lidia Cruz Pérez p2212260\n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// OPERATORS -----------------------------------------------\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nfloat Intersection(float a,float b)\n{\n    return max(a,b);\n}\n\nV Intersection(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\n\n\n// Union\n// a, b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n        return V(a.v,a.i);\n    else \n    {\n        return V(b.v,b.i);\n    }\n}\n\n\n// Complement \nfloat Complement(float a) \n{\n    return -a;\n}\n\nV Complement(V a)\n{\n    return V(-a.v,a.i);\n}\n\n// Difference \n// a,b : field function of left and right sub-trees\nfloat Difference(float a, float b)\n{\n    return Intersection(a, Complement(b));\n}\n\nV Difference(V a, V b) \n{\n    return Intersection(a,Complement(b));\n}\n\n\n// PIMITIVES ---------------------------------------------\n\n// Sphere \n// p : Point\n// c : Center \n// r : Radius\nfloat Sphere(vec3 p, vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\nV Sphere(vec3 p, vec3 c,float r, int index)\n{\n  return V(Sphere(p,c,r),index);\n}\n\n\n// Plane\n// p: point\n// o: a point in the plane\n// n: normal vector (must be normalized)\nfloat Plane(vec3 p, vec3 o, vec3 n)\n{\n    return dot((p-o),n);\n}\n\nV Plane(vec3 p, vec3 o, vec3 n, int index)\n{\n    return V(Plane(p,o,n),index);\n}\n\n\n// SemiSphere\n// p: point\n// c: center\n// r: radius\n// n: normal vector of plane intersecting the whole sphere (must be normalized)\nfloat SemiSphere(vec3 p, vec3 c, float r, vec3 n)\n{\n    float sp = Sphere(p,c,r);\n    float pl = Plane(p,c,n);\n    return Intersection(sp,pl);\n}\n\nV SemiSphere(vec3 p, vec3 c, float r, vec3 n, int index)\n{\n  return V(SemiSphere(p,c,r,n),index);\n}\n\n\n// Cylinder\n// p: point\n// c: center of the base, that is in the plane XY\n// r: radius\n// h: height\nfloat Cylinder(vec3 p, vec3 c, float r, float h)\n{\n    float d = length(p.xy-c.xy)-r;\n    float pl1 = Plane(p,c,vec3(0.,0.,-1.));\n    float pl2 = Plane(p,vec3(c.x,c.y,c.z+h),vec3(0.,0.,1.));\n    float v;\n    v = Intersection(d,pl1);\n    v = Intersection(v,pl2);\n    return v;\n}\n\nV Cylinder(vec3 p, vec3 c, float r, float h, int index)\n{\n  return V(Cylinder(p,c,r,h),index);\n}\n\n\n// Capsule \n// p: point\n// c: \"south pole\" of the lower dome, that is in the plane XY\n// r: radius\n// h: height\nfloat Capsule(vec3 p, vec3 c, float r, float h) \n{\n    float d = Cylinder(p,vec3(c.x,c.y,c.z+r),r,h-r-r);\n    float ssp1 = SemiSphere(p,vec3(c.x,c.y,c.z+r),r, vec3(0.,0.,1.));\n    float ssp2 = SemiSphere(p,vec3(c.x,c.y,c.z+h-r),r, vec3(0.,0.,-1.));\n    float v;\n    v = Union(d,ssp1);\n    v = Union(v,ssp2);\n    return v;\n}\n\nV Capsule(vec3 p, vec3 c, float r, float h, int index) \n{\n    return V(Capsule(p,c,r,h),index);\n}\n\n\n// Box\n// p: point\n// a: (xmax,ymin,zmin)\n// b: (xmin,ymax,zmax)\nfloat Box(vec3 p, vec3 a, vec3 b)\n{\n  float pl1 = Plane(p,a,vec3(1.,0.,0.));\n  float pl2 = Plane(p,b,vec3(-1.,0.,0.));\n  float pl3 = Plane(p,a,vec3(0.,-1.,0.));\n  float pl4 = Plane(p,b,vec3(0.,1.,0.));\n  float pl5 = Plane(p,a,vec3(0.,0.,-1.));\n  float pl6 = Plane(p,b,vec3(0.,0.,1.));  \n  \n  float v;\n  v = Intersection(pl1,pl2);\n  v = Intersection(v,pl3);\n  v = Intersection(v,pl4);\n  v = Intersection(v,pl5);\n  v = Intersection(v,pl6);\n  \n  return v;\n}\n\nV Box(vec3 p, vec3 a, vec3 b, int index) \n{\n    return V(Box(p,a,b),index);\n}\n\n\n// Pyramid \n// p: point\n// c: center of the base\n// h: height\n// l: length base side\n// o: orientation (1: vertex up, 2: vertex down)\nfloat Pyramid(vec3 p,vec3 c, float h, float l, int o)\n{\n    float pyramid, base, plane1,plane2,plane3,plane4;\n    vec3 vertex;\n    if (o == 1) {\n        vertex = vec3(c.x,c.y,c.z+h);\n        base = Plane(p,c,vec3(0.,0.,-1.));\n        plane1 = Plane(p,vertex,normalize(vec3(h,h,l)));\n        plane2 = Plane(p,vertex,normalize(vec3(h,-h,l)));\n        plane3 = Plane(p,vertex,normalize(vec3(-h,-h,l)));\n        plane4 = Plane(p,vertex,normalize(vec3(-h,h,l)));\n    } else {\n        vertex = vec3(c.x,c.y,c.z-h);\n        base = Plane(p,c,vec3(0.,0.,1.));\n        plane1 = Plane(p,vertex,normalize(vec3(h,h,-l)));\n        plane2 = Plane(p,vertex,normalize(vec3(h,-h,-l)));\n        plane3 = Plane(p,vertex,normalize(vec3(-h,-h,-l)));\n        plane4 = Plane(p,vertex,normalize(vec3(-h,h,-l)));\n    }\n\n    pyramid = Intersection(base,plane1);\n    pyramid = Intersection(pyramid,plane2);\n    pyramid = Intersection(pyramid,plane3);\n    pyramid = Intersection(pyramid,plane4);\n\n    return pyramid;   \n}\n\nV Pyramid(vec3 p,vec3 c, float h, float l, int o, int index) \n{\n    return V(Pyramid(p,c,h,l,o),index);\n}\n\n// ----------------------------------------------------------------\n\n// THE MILL --> Arbre de construction animé  \nfloat Base(vec3 p)\n{\n  float base = Cylinder(p,vec3(0.,0.,0.),2.8,3.);\n  float door = Capsule(p,vec3(2,0.,-1.5),1.,4.);\n  float u;\n  u = Difference(base,door);\n  return u;\n}\n\nV Base(vec3 p, int index)\n{\n    return V(Base(p),index);\n}\n\n\nfloat Mill(vec3 p) \n{  \n  return Cylinder(p,vec3(0.,0.,2.8),2.5,5.7);\n}\n\nV Mill(vec3 p, int index)\n{\n    return V(Mill(p),index);\n}\n\n\nfloat Roof(vec3 p) \n{\n    return Pyramid(p,vec3(0.,0.,8.5),2.,4.,1);\n}\n\nV Roof(vec3 p, int index)\n{\n    return V(Roof(p),index);\n}\n\n\nfloat Blades(vec3 p) \n{\n\n  float a = Box(p,vec3(4.,.5,8.),vec3(3.8,4.1,9.));\n  float a1 = Box(p,vec3(4.,0.6,8.1),vec3(3.8,1.2,8.54));\n  float a2 = Box(p,vec3(4.,0.6,8.56),vec3(3.8,1.2,8.9));\n  float a3 = Box(p,vec3(4.,1.3,8.1),vec3(3.8,1.9,8.54));\n  float a4 = Box(p,vec3(4.,1.3,8.56),vec3(3.8,1.9,8.9));\n  float a5 = Box(p,vec3(4.,2.,8.1),vec3(3.8,2.6,8.54));\n  float a6 = Box(p,vec3(4.,2.,8.56),vec3(3.8,2.6,8.9));\n  float a7 = Box(p,vec3(4.,2.7,8.1),vec3(3.8,3.3,8.54));\n  float a8 = Box(p,vec3(4.,2.7,8.56),vec3(3.8,3.3,8.9));\n  float a9 = Box(p,vec3(4.,3.4,8.1),vec3(3.8,4.,8.54));\n  float a10 = Box(p,vec3(4.,3.4,8.56),vec3(3.8,4.,8.9));\n  \n  float b = Box(p,vec3(4.,-4.1,8.),vec3(3.8,-0.5,9.));\n  float b1 = Box(p,vec3(4.,-4,8.1),vec3(3.8,-3.4,8.54));\n  float b2 = Box(p,vec3(4.,-4,8.56),vec3(3.8,-3.4,8.9));\n  float b3 = Box(p,vec3(4.,-3.3,8.1),vec3(3.8,-2.7,8.54));\n  float b4 = Box(p,vec3(4.,-3.3,8.56),vec3(3.8,-2.7,8.9));\n  float b5 = Box(p,vec3(4.,-2.6,8.1),vec3(3.8,-2,8.54));\n  float b6 = Box(p,vec3(4.,-2.6,8.56),vec3(3.8,-2,8.9));\n  float b7 = Box(p,vec3(4.,-1.9,8.1),vec3(3.8,-1.3,8.54));\n  float b8 = Box(p,vec3(4.,-1.9,8.56),vec3(3.8,-1.3,8.9));\n  float b9 = Box(p,vec3(4.,-1.2,8.1),vec3(3.8,-0.6,8.54));\n  float b10 = Box(p,vec3(4.,-1.2,8.56),vec3(3.8,-0.6,8.9));\n  \n  float c = Box(p,vec3(4.,-0.5,9.),vec3(3.8,0.5,12.6));\n  float c1 = Box(p,vec3(4.,-0.4,9.1),vec3(3.8,-0.01,9.7));\n  float c2 = Box(p,vec3(4.,0.0,9.1),vec3(3.8,0.4,9.7));\n  float c3 = Box(p,vec3(4.,-0.4,9.8),vec3(3.8,-0.01,10.4));\n  float c4 = Box(p,vec3(4.,0.0,9.8),vec3(3.8,0.4,10.4));\n  float c5 = Box(p,vec3(4.,-0.4,10.5),vec3(3.8,-0.01,11.1));\n  float c6 = Box(p,vec3(4.,0.0,10.5),vec3(3.8,0.4,11.1));\n  float c7 = Box(p,vec3(4.,-0.4,11.2),vec3(3.8,-0.01,11.8));\n  float c8 = Box(p,vec3(4.,0.0,11.2),vec3(3.8,0.4,11.8));\n  float c9 = Box(p,vec3(4.,-0.4,11.9),vec3(3.8,-0.01,12.5));\n  float c10 = Box(p,vec3(4.,0.0,11.9),vec3(3.8,0.4,12.5));\n  \n  float d = Box(p,vec3(4.,-0.5,4.4),vec3(3.8,0.5,8.));\n  float d1 = Box(p,vec3(4.,-0.4,4.5),vec3(3.8,-0.01,5.1));\n  float d2 = Box(p,vec3(4.,0.0,4.5),vec3(3.8,0.4,5.1));\n  float d3 = Box(p,vec3(4.,-0.4,5.2),vec3(3.8,-0.01,5.8));\n  float d4 = Box(p,vec3(4.,0.0,5.2),vec3(3.8,0.4,5.8));\n  float d5 = Box(p,vec3(4.,-0.4,5.9),vec3(3.8,-0.01,6.5));\n  float d6 = Box(p,vec3(4.,0.0,5.9),vec3(3.8,0.4,6.5));\n  float d7 = Box(p,vec3(4.,-0.4,6.6),vec3(3.8,-0.01,7.2));\n  float d8 = Box(p,vec3(4.,0.0,6.6),vec3(3.8,0.4,7.2));\n  float d9 = Box(p,vec3(4.,-0.4,7.3),vec3(3.8,-0.01,7.9));\n  float d10 = Box(p,vec3(4.,0.0,7.3),vec3(3.8,0.4,7.9));\n  \n  float center = Sphere(p,vec3(3.9,0.,8.55),0.3);\n  float x = Box(p,vec3(4.,-0.5,8.5),vec3(3.8,0.5,8.6));\n  float y = Box(p,vec3(4.,-0.05,8.),vec3(3.8,0.05,9.));\n    \n  float u;\n  u = Difference(a,a1);\n  u = Difference(u,a2);\n  u = Difference(u,a3);\n  u = Difference(u,a4);\n  u = Difference(u,a5);\n  u = Difference(u,a6);\n  u = Difference(u,a7);\n  u = Difference(u,a8);\n  u = Difference(u,a9);\n  u = Difference(u,a10);\n  \n  u = Union(u,b);\n  u = Difference(u,b1);\n  u = Difference(u,b2);\n  u = Difference(u,b3);\n  u = Difference(u,b4);\n  u = Difference(u,b5);\n  u = Difference(u,b6);\n  u = Difference(u,b7);\n  u = Difference(u,b8);\n  u = Difference(u,b9);\n  u = Difference(u,b10);\n  \n  u = Union(u,c);\n  u = Difference(u,c1);\n  u = Difference(u,c2);\n  u = Difference(u,c3);\n  u = Difference(u,c4);\n  u = Difference(u,c5);\n  u = Difference(u,c6);\n  u = Difference(u,c7);\n  u = Difference(u,c8);\n  u = Difference(u,c9);\n  u = Difference(u,c10);\n  \n  u = Union(u,d);\n  u = Difference(u,d1);\n  u = Difference(u,d2);\n  u = Difference(u,d3);\n  u = Difference(u,d4);\n  u = Difference(u,d5);\n  u = Difference(u,d6);\n  u = Difference(u,d7);\n  u = Difference(u,d8);\n  u = Difference(u,d9);\n  u = Difference(u,d10);\n  \n  u = Union(u,center);\n  u = Union(u,x);\n  u = Union(u,y);\n  \n  return u;\n}\n\nV Blades(vec3 p, int index) \n{\n    return V(Blades(p),index);\n}\n\n\n// DRONES ---> Déplacement sur une courbe \n\n// Dron\n// p: point\n// c: center of the principal sphere (the sphere in the middle)\n// r: radius of the principal sphere\nfloat Dron(vec3 p, vec3 c, float r) \n{\n    float t = r + abs(cos(iTime)*0.4);\n    float s = 0.8*r;\n    float u;\n    float a = Sphere(p,c,r); // Sphere principal\n    // Spheres secondaries\n    float d = Sphere(p,vec3(c.x-t,c.y-t,c.z+t),s);\n    float e = Sphere(p,vec3(c.x+t,c.y-t,c.z+t),s);\n    float f = Sphere(p,vec3(c.x-t,c.y+t,c.z+t),s);\n    float g = Sphere(p,vec3(c.x+t,c.y+t,c.z+t),s);\n    float h = Sphere(p,vec3(c.x-t,c.y-t,c.z-t),s);\n    float i = Sphere(p,vec3(c.x+t,c.y-t,c.z-t),s);\n    float j = Sphere(p,vec3(c.x-t,c.y+t,c.z-t),s);\n    float k = Sphere(p,vec3(c.x+t,c.y+t,c.z-t),s);\n    u = Union(a,d);\n    u = Union(u,e);\n    u = Union(u,f);\n    u = Union(u,g);\n    u = Union(u,h);\n    u = Union(u,i);\n    u = Union(u,j);\n    u = Union(u,k);\n    return u;\n}\n\nV Dron(vec3 p, vec3 c, float r, int index) \n{\n    return V(Dron(p,c,r),index);\n}\n\n// THE OCEAN ---> Animation de surface paramétrée \n\n// Ocean Sinus : sum of sinus \n// p: point\n// t: time\n// n: number of sinus to sum\n// a: amplitude\n// l: wavelenght\n// d: depth\n// +amplitude and +wavelength --> open ocean    \n// -amplitude and –wavelenght --> coast\nfloat OceanSinus(vec2 p,float t,int n,float a,float l,float d) \n{\n    float h = 2.;\n    float k = 2.*3.1416/l;   // Wave number\n    float w = sqrt(9.8*k*tanh(k*d));   // Pulsation\n    for (int i = 0; i <= n-1; i++) {\n        h += a*cos(p.y*k-w*t);\n        a *= 0.5;\n    }\n    return h;\n}\n\nV ImplicitOceanSinus(in vec3 p,float t,int n,float a, float l, float d,int index)\n{\n    float z =  OceanSinus(p.xy,t,n,a,l,d) ;\n    float h = (p.z - z)/2.0; \n    return V(h,index);\n}\n\n\n// Ocean Tronchoïde  \n// t: time\n// a: amplitude\n// l: wavelenght\n// d: depth\n// +amplitude and +wavelength --> open ocean   \n// -amplitude and –wavelenght --> coast\nfloat OceanTronch(float t,float a,float l,float d) \n{\n    float k = 2.*3.1416/l;               // Wave number\n    float w = sqrt(9.8*k*tanh(k*d));     // Pulsation\n    vec2 p = vec2(1.-a*sin(t),a*cos(t)); // Parameterized curve\n    float h = -a+2.*a*pow(1.-pow(0.5+0.5*sin(p.y*k-w*t),a+1.),1./(a+1.));\n    return h;\n}\n\nV ImplicitOceanTronch(in vec3 p,float t,float a, float l, float d,int index)\n{\n    float z =  OceanTronch(t,a,l,d) ;\n    float h = (p.z - z)/2.0; \n    return V(h,index);\n}\n\n// --------------------------------------------------------------------\n\n// Potential field of the object\n// p : point\nV object(vec3 p)\n{ \n  // THE MILL --> Arbre de construction animé *************************\n  V a;\n  \n  V ground = Plane(p,vec3(0.,0.,0.),vec3(0.,0.,1.),0);\n  V sun = Sphere(p,vec3(-20.,15.*cos(0.1*iTime),15.*sin(0.1*iTime)),2.,1);\n  a=Union(ground,sun);\n  \n  // Base -------------------------------------------\n  V base = Base(p,2);\n  a=Union(a,base);\n  // Mill -------------------------------------------\n  V mill = Mill(p,3);\n  a=Union(a,mill);\n  // Roof -------------------------------------------\n  V roof = Roof(p,4);\n  a=Union(a,roof);\n  // Blades -----------------------------------------\n  \n  /*\n  mat4 traslation = mat4(\n      vec4(1,0,0,-3.5),\n      vec4(0,1,0,0),\n      vec4(0,0,1,-8.55),\n      vec4(0,0,0,1)\n  );\n  \n  mat4 rotation = mat4(\n    vec4(1,0,0,0),\n    vec4(0,cos(iTime),-sin(iTime),0),\n    vec4(0,sin(iTime),cos(iTime),0),\n    vec4(0,0,0,1)\n  );\n  \n  vec3 q = (inverse(traslation)*rotation*traslation*vec4(p,1)).xyz;\n  */\n  \n  mat3 rotation = mat3(\n    vec3(1,0,0),\n    vec3(0,cos(2.*iTime),-sin(2.*iTime)),\n    vec3(0,sin(2.*iTime),cos(2.*iTime))\n  );\n  \n  vec3 q = p - vec3(3.5,0.,8.55);\n  q = rotation*q;\n  q = q + vec3(3.5,0.,8.55);\n  V blades = Blades(q,5);\n  \n  a=Union(a,blades);\n  \n  // THE DRONES ---> Déplacement sur une courbe ***************************\n  \n  V b;  \n  V tube = Cylinder(p,vec3(0.,0.,0.),1.,15.,10);\n  V origen = Box(p,vec3(1.,-2.,0.),vec3(-1.,2.,1.),10);\n  \n  V circleXY = Dron(p,vec3(5.*cos(0.5*iTime),5.*sin(0.5*iTime),15.),0.3,11);\n  V circleSinus = Dron(p,vec3(4.*cos(iTime),4.*sin(iTime),3.+sin(10.*iTime)),0.3,12);\n  V ellipseXY = Dron(p,vec3(10.*cos(iTime),15.*sin(iTime),5.),0.3,13);\n  V heliceZ = Dron(p,0.5*vec3(-6.*cos(iTime),-6.*sin(iTime),15.*(1.-cos(iTime/3.1416))),0.4,14);\n  V helizeZ2 = Dron(p,0.5*vec3(6.*cos(iTime),6.*sin(iTime),15. + 15.*(cos(iTime/3.1416))),0.4,15);\n  V heartYZ = Sphere(p,vec3(2.,0.25*(45.+12.*sin(iTime)-4.*sin(3.*iTime)),0.5*(20.+13.*cos(iTime)-5.*cos(2.*iTime)-2.*cos(3.*iTime)-cos(4.*iTime))),0.8,16);\n  V astroidXY = Dron(p,vec3(4.*cos(iTime)*cos(iTime)*cos(iTime),4.*sin(iTime)*sin(iTime)*sin(iTime),10.),0.2,17);\n  V infinityXY = Sphere(p,vec3(6.*sqrt(2.)*cos(iTime)*sin(iTime)/(sin(iTime)*sin(iTime)+1.),6.*sqrt(2.)*cos(iTime)/(sin(iTime)*sin(iTime)+1.),1.),0.5,20);\n  \n  b=Union(tube,origen);\n  b=Union(b,circleXY);\n  b=Union(b,circleSinus);\n  b=Union(b,ellipseXY);\n  b=Union(b,heliceZ);\n  b=Union(b,helizeZ2);\n  b=Union(b,heartYZ);\n  b=Union(b,astroidXY);\n  b=Union(b,infinityXY);\n  \n  // THE OCEAN ---> Animation de surface paramétrée  ***************************\n  V c;\n  V sphere = Sphere(p,vec3(0.,0.,0.),15.,20); \n  \n  V oceanSinus= ImplicitOceanSinus(p,iTime,5,.2,5.,2.,20); // Coast\n  //V oceanSinus= ImplicitOceanSinus(p,iTime,5,1.5,10.,2.,20); // Open ocean\n  c = Intersection(sphere,oceanSinus);\n  \n  V oceanTronch= ImplicitOceanTronch(p,iTime,.3,5.,2.,20);\n  //c = Intersection(sphere,oceanTronch);\n  \n  return a;  \n}\n\n// TEXTURES -------------------------------------------------------------\n\n// Uniform color texture\n// c: color RGB (r,g,b) with r,g,b between 0 and 255\n// s: specular between 0 and 1\nT Uniform(vec3 c, float s)\n{\n    return T(normalize(c),s);\n}\n\n// Uniform color texture with noise \n// p: point \n// c: color RGB (r,g,b) with r,g,b between 0 and 255\n// f: frequency  (higher frequency ---> more granular texture)\n// s: specular between 0 and 1\nT Noise(in vec3 p, vec3 c, float f, float s) \n{\n    vec3 t = normalize(c);\n    float noise = Noise(p*f);\n    return T(vec3(noise,t.y,t.z),s);   \n}\n\n// Uniform color texture with turbulence\n// p: point \n// c: color RGB (r,g,b) with r,g,b between 0 and 255\n// f: frequency  (higher frequency ---> more granular texture)\n// a: amplitude\n// s: specular between 0 and 1\nT Turbulence(in vec3 p, vec3 c, float f, float a, float s) \n{\n    vec3 t = normalize(c);\n    float turbulence = Turbulence(p,f,a);\n    return T(vec3(turbulence,t.y,t.z),s);   \n}\n\n// Compute textures\n// p: point\n// n: normal\nT Color(in vec3 p,in vec3 n)\n{\n    V vp = object(p);\n    if (vp.i==0){                                        // Ground\n        return Noise(p,vec3(80,100,40),10.,0.);\n    } else if(vp.i==1) {                                 // Sun\n        return Turbulence(p,vec3(1,1,0),10.,3.,0.);\n    } else if(vp.i==2) {                                 // Base mill\n        return Turbulence(p,vec3(100,3,5),114.,0.5,0.);\n    } else if(vp.i==3) {                                 // Mill\n        return Uniform(vec3(100,30,1),0.);\n    } else if(vp.i==4) {                                 // Roof\n        return Turbulence(p,vec3(100,3,5),114.,0.5,0.);\n    } else if(vp.i==5) {                                 // Blades\n        return Noise(p,vec3(100,3,5),10.,0.);\n    } else if(vp.i==10) {                                // Tube   \n        return Uniform(vec3(76,45,98),0.);\n    } else if(vp.i==11) {                                // CircleXY   \n        return Uniform(vec3(1,0,0),0.);\n    } else if(vp.i==12) {                                // CircleSinus\n        return Uniform(vec3(10,4,4),0.);                  \n    } else if(vp.i==13) {                                // EllipseXY   \n        return Uniform(vec3(0,1,0),0.);\n    } else if(vp.i==14) {                                // HeliceZ\n        return Uniform(vec3(0,0,1),0.);\n    } else if(vp.i==15) {                                // HeliceZ2\n        return Uniform(vec3(24,65,65),0.);\n    } else if(vp.i==16) {                                // HeartYZ\n        return Uniform(vec3(54,36,100),0.);\n    } else if(vp.i==17) {                                // Astroid\n        return Uniform(vec3(1,1,1),0.);\n    } else if(vp.i==20) {                                // Ocean\n        return Uniform(vec3(0,0.5,1),0.);\n    }\n}\n\n// ----------------------------------------------------------------------\n\n// ANALYSIS OF THE SCALAR FIELD --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p)\n{\n  float eps = 0.001;\n  vec3 n;\n  V vp = object(p);\n  float v = vp.v;\n  n.x = object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.65,0.75,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n// SHADING AND LIGHTING -------------------------------------------------------\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p,l,100.0,h,s);\n    if (!h)\n    {\n     return 1.0;\n    }\n    return 0.0; \n}\n\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n     // Point light\n    const vec3 lp = vec3(5.0, 10.0, 25.0);\n    \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n\n    T tex=Color(p,n);\n\n    // Ambient color\n    vec3 ambient = 0.5*tex.c;\n        \n    // Shadow computation\n    float s = Shadow(p+0.01*n,n,l);\n\n// Phong diffuse\n    vec3 diffuse = 0.5  * clamp(dot(n, l),0.0,1.0) * tex.c;\n\n    // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = tex.s * pow(clamp(dot(r,l),0.0,1.0),28.0) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + s * (diffuse + specular);\n    return c;\n}\n\n// PICTURE IN PICTURE ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n   \n   // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n  \n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// CAMERA ----------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.8;\n    \n    ro=vec3(45.0,8.0,12.0);\n    ro*=Rz(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,7.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n// TEXTURES --------------------------------------\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n// Structure for texture\n// c : Color\n// s : Specular\nstruct T {\n    vec3 c;\n    float s;\n};\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// p : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Procedural value turbulence with noise with cubic interpolation\n// p: Point\n// freq: frequency\n// amp : amplitude\nfloat Turbulence(vec3 p, float freq, float amp) {\n    float t = 0.0;\n    float f = 1.0;\n    for (int i = 0; i < 4; i++) {\n        t += abs(Noise(p * f)) * amp;\n        f *= freq;\n        amp *= 0.5;\n    }\n    return t;\n}\n\n// Compute the distance to the Voronoi boundary\n// x : Point\n// Return (closest distance, second closest, cell id)\nvec3 Voronoi( in vec3 x )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + Hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\n","name":"Common","description":"","type":"common"}]}