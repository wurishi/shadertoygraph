{"ver":"0.1","info":{"id":"lsfcR8","date":"1486950850","viewed":386,"name":"Fractal Noise Experiment","username":"marciot","description":"My attempt to create the pattern shown in the page http://www.davidcornette.com/glsl/noise.html","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","noise","basic","interactive","texture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Implementation of the fractal noise algorithm described here:\n *   http://www.davidcornette.com/glsl/noise.html\n */\n\nvec4 noise(in vec2 uv ) {\n    return\n        texture(iChannel0, uv * 0.125)  *  0.50    +\n        texture(iChannel0, uv * 0.25)   *  0.25    +\n        texture(iChannel0, uv * 0.5)    *  0.125   +\n        texture(iChannel0, uv * 1.0)    *  0.0625  +\n        texture(iChannel0, uv * 2.0)    *  0.03125 +\n        texture(iChannel0, uv * 4.0)    *  0.03125;\n}\n\nfloat colormap(float x) {\n    return 0.9 - (\n        smoothstep(0.45,  0.50, x) * +1.0 +\n        smoothstep(0.50,  0.55, x) * -1.0 +\n        smoothstep(0.60,  0.61, x) * +0.5 +\n        smoothstep(0.63,  0.64, x) * -0.5\n     );\n}\n\nfloat animate(float x) {\n    return mod(x + iTime * 0.1, 1.);\n}\n\nfloat manipulate(float y) {\n    return mod(y + 1. - iMouse.y/iResolution.y, 1.);\n}\n\nvec4 colorize(float x, vec4 col) {\n    return clamp(x + col, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec4 fgColor = vec4(0., 0., 1., 1.);\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float val = noise(uv).x;\n    \n    // Show the color map on the margins\n    if(uv.x < 0.03 || uv.x > 0.97) {\n        val = uv.y;\n    }\n    \n    // On the right side, animate the colormap\n    // On the left side, make it respond to the mouse\n    if(uv.x > .5) {\n        val = animate(val);\n    } else {\n        val = manipulate(val);\n    }\n    \n    fragColor = colorize(colormap(val), fgColor);\n}","name":"Image","description":"","type":"image"}]}