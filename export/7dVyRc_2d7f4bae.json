{"ver":"0.1","info":{"id":"7dVyRc","date":"1655409634","viewed":62,"name":"Ray Marching ( study )","username":"forij","description":"Parties with ray marching ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","simple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\n\nfloat sdSphere(vec3 p, float r)\n{\n  return min( length(p) - r, length(\n      p + vec3(\n              0.1, \n              0.5 + sin( float(iFrame) * 0.01), \n              0. + sin( float(iFrame) * 0.012) * 0.1\n          )) - r); // p is the test point and r is the radius of the sphere\n}\n\nvec3 calcNormal(vec3 p) {\n  float e = 0.0005; // epsilon\n  float r = 1.; // radius of sphere\n  return normalize(vec3(\n    sdSphere(vec3(p.x + e, p.y, p.z), r) - sdSphere(vec3(p.x - e, p.y, p.z), r),\n    sdSphere(vec3(p.x, p.y + e, p.z), r) - sdSphere(vec3(p.x, p.y - e, p.z), r),\n    sdSphere(vec3(p.x, p.y, p.z  + e), r) - sdSphere(vec3(p.x, p.y, p.z - e), r)\n  ));\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, float start, float end){\n    float depth = start;\n    \n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        vec3 p = ro + depth * rd;\n        \n        // TODO: Because it's shpehre set in cooridnate vec3(0,0,0)\n        float d = sdSphere(p, 1.);\n        depth += d;\n        if ( d < PRECISION || depth > end) break;\n    }\n\n    return depth;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; // <0, 1>\n    uv -= 0.5; // <-0.5,0.5>\n    uv.x *= iResolution.x/iResolution.y; // fix aspect ratio\n\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0,0,5);\n    vec3 rd = normalize(vec3(uv, -1));\n    vec3 lightPos = vec3(4,5,-5);\n    vec3 lightDrection = vec3(1, 1, 1);\n    \n    float d = rayMarch(ro, rd, MIN_DIST, MAX_DIST );\n\n    if(d > 100.0) { \n        col = vec3(0.6);\n    }else{\n    \n     vec3 p = ro + rd * d; // point on sphere we discovered from ray marching\n    vec3 normal = calcNormal(p);\n    vec3 lightPosition = vec3(2, 2, 4);\n    vec3 lightDirection = normalize(lightPosition - p);\n\n    // Calculate diffuse reflection by taking the dot product of \n    // the normal and the light direction.\n    float dif = clamp(dot(normal, lightDirection), 0., 1.);\n        col = vec3(dif);\n        \n        \n    }\n       \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}