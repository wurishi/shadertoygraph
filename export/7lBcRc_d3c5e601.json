{"ver":"0.1","info":{"id":"7lBcRc","date":"1650453664","viewed":225,"name":"Soft Focus with soft light","username":"LoganOracio","description":"Soft focus with soft light","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["soft","gaussian","focus"],"hasliked":0,"parentid":"ftScWm","parentname":"Soft Focus w/ Fast G-Blur"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 pix_l = 1.0 / iResolution.xy;\n    vec2 uv = fragCoord * pix_l;\n    \n    vec4 blurred = fast_gaussian_blur(iChannel0,uv,iResolution.xy,vec2(1.0,0.0),BLUR);\n    vec4 original = texture(iChannel1,uv);\n    if(uv.x> .505)\n    {\n        fragColor = original;\n    }\n    else if(uv.x < .495)\n    {\n        vec4 lighten = max(original,blurred);\n        float lum = luma(original);\n        lighten = mix(lighten,blurred,lum);\n\n        fragColor = vec4(soft_light(original.xyz,lighten.xyz),1.0);\n        fragColor = mix(fragColor,original,OMIX);\n        fragColor = mix(fragColor,blurred,BMIX);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pix_l = 1.0 / iResolution.xy;\n    vec2 uv = fragCoord * pix_l;\n    fragColor = texture(iChannel0,uv);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pix_l = 1.0 / iResolution.xy;\n    vec2 uv = fragCoord * pix_l;\n    fragColor = fast_gaussian_blur(iChannel0,uv,iResolution.xy,vec2(0.0,1.0),BLUR);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define BLUR 10.0*sin(iTime)+12.0\n#define BMIX 0.4\n#define OMIX 0.1\nconst float PI = 3.141592653589793238462;\nconst float inv_sqrt_2pi = 0.3989422804014327;\nfloat soft_light(float base, float blend)\n{\n    return (blend < 0.5) ? (2.0 * base * blend + base * base * (1.0 - 2.0 * blend)) : (sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend)); \n}\nvec3 soft_light(vec3 base, vec3 blend)\n{\n    return vec3(soft_light(base.x,blend.x),soft_light(base.y,blend.y),soft_light(base.z,blend.z));\n}\nvec3 screen( vec3 s, vec3 d )\n{\n\treturn s + d - s * d;\n}\nfloat luma(vec4 color) {\n  return clamp(dot(color.rgb, vec3(0.299, 0.587, 0.114)),0.0,1.0);\n}\nfloat gaussianf(float sigma, float dist)\n{\n    float a = dist / sigma;\n    return (inv_sqrt_2pi / sigma ) * exp( -0.5 * a * a );\n}\nvec4 fast_gaussian_blur(sampler2D image, vec2 uv,vec2 resolution, vec2 direction, float blur)\n{\n    vec4 color = vec4(0.0);\n    float coef = gaussianf(blur,0.0);\n    color += texture(image, uv) * coef;\n    float kernel_s = blur * 4.0;\n    //removed precomputing weights by onehade\n    float prev = gaussianf(blur, 0.0);\n    for (float i = 0.0; i < kernel_s; i++) {\n        float w1 = prev; \n        float w2 = gaussianf(blur, i + 1.0);\n        prev = w2; //storing redudant weight for next loop\n        float c = w1 + w2;\n        vec2 off1 = vec2((i * w1 + (i + 1.0) * w2) / c) * direction / resolution;\n        color += texture(image, uv - off1 ) * c;\n        color += texture(image, uv + off1 ) * c;\n        coef += c + c;\n    }\n\n    return color/coef;\n}","name":"Common","description":"","type":"common"}]}