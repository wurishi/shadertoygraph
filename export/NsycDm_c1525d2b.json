{"ver":"0.1","info":{"id":"NsycDm","date":"1654939953","viewed":125,"name":"Simple Infinite Maze","username":"johnao","description":"The classic maze now comes in 3D.\n\nThe thickness of walls is faked. And there are a few artifacts.\n\nNevertheless, I hope you like it! : )","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["procedural","maze"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define N 40\n#define PRECISION .001\n\nfloat rand(vec2 p) {\n    return fract(sin(dot(p, vec2(1.234, 56.78))) * 87654.3);\n}\n\nvec2 map(vec3 p) {\n    vec2 ip = floor(p.xz);\n    vec2 fp = p.xz - ip;\n    float d = (rand(ip) < .5 ? abs(fp.x + fp.y - 1.) : -abs(fp.x - fp.y)) * .707;\n    vec2 cp = vec2(.5) - abs(fp - vec2(.5));\n    float d2 = max(max(cp.x, cp.y) * .7, min(cp.x, cp.y) * 1.4);\n    d = d < 0. ? max(-d2, d) : min(d2, d);\n    if (abs(d) < p.y) {\n        return vec2(abs(d), p.y > .95 ? 2. : (d > 0. ? 0. : 1.));\n    } else {\n        return vec2(p.y, 2.);\n    }\n}\n\nvec3 scene(vec2 coord) {\n    vec2 uv = (2. * coord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 o = vec3(iTime, 3., -iTime);\n    vec3 d = normalize(vec3(uv.x, -1. + uv.y * .707, -2. - uv.y * .707));\n    float t = .2 * iTime;\n    float ct = cos(t), st = sin(t);\n    d = vec3(d.x * ct - d.z * st, d.y, d.x * st + d.z * ct);\n    vec3 col = vec3(0.);\n    if (d.y < 0.) {\n        float l = (o.y - 1.) / -d.y;\n        vec3 p = o + l * d;\n        vec2 m;\n        for (int i = 0; i < N; ++i) {\n            m = map(p);\n            if (m.x < PRECISION) {\n                break;\n            }\n            l += m.x;\n            p = o + l * d;\n        }\n        if (m.y < .5) {\n            col = vec3(0.7529, 0.2157, 0.3333);\n        } else if (m.y < 1.5) {\n            col = vec3(0.);\n        } else if (m.y < 2.5) {\n            col = vec3(0.6353, 0.5686, 0.6588);\n        }\n    }\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // simple AA\n    vec3 col = .25 * (scene(fragCoord.xy + vec2(.1, .4)) + scene(fragCoord.xy + vec2(-.4, .1)) + scene(fragCoord.xy + vec2(-.1, -.4)) + scene(fragCoord.xy + vec2(.4, -.1)));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}