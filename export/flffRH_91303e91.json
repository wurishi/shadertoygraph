{"ver":"0.1","info":{"id":"flffRH","date":"1650595353","viewed":67,"name":"Ocean Sunset View Shader TestRun","username":"HSundar3467","description":"I created this shader as a test run drawing inspiration from the ocean and the sunset. ","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["ocean","sunsest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// smooth min\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// smooth max\nfloat smax(float a, float b, float k) {\n  return -smin(-a, -b, k);\n}\n\n/* sdfCircle\n * Gives float value of if point is or out of circle\n * vec2 uv      array of pixels \n * float r      radius of circle\n * vec2 offset  the coordinates of the offset of x and y values. \n*/\nfloat sdCircle(vec2 uv, float r, vec2 offset) {\n  float x = uv.x - offset.x;\n  float y = uv.y - offset.y;\n  \n  return length(vec2(x, y)) - r;  \n}\n\n\n/* sdfSquare\n * Gives float value of if point is or out of circle\n * vec2 uv      array of pixels \n * float size   the length of the squares ends \n * vec2 offset  the coordinates of the offset of x and y values. \n*/\nfloat sdSquare(vec2 uv, float size, vec2 offset) {\n  float x = uv.x - offset.x;\n  float y = uv.y - offset.y;\n\n  return max(abs(x), abs(y)) - size;\n}\n\n\n//creates sideways egg shape. Still under works \nfloat opDisplace(vec2 p, float r, vec2 offset)\n{\n  float d1 = sdCircle(p, r, offset);\n  float s = 0.5; // scaling factor\n\n  float d2 = sin(s * p.x * 1.8); // Some arbitrary values to produce shape variation \n\n  return d1 + d2;\n}\n\n//list of symetric functions\nfloat opSymX(vec2 p, float r)\n{\n  p.x = abs(p.x);\n  return sdCircle(p, r, vec2(0.2, 0));\n}\nfloat opSymY(vec2 p, float r)\n{\n  p.y = abs(p.y);\n  return sdCircle(p, r, vec2(0, 0.2));\n}\n\nfloat opSymXY(vec2 p, float r)\n{\n  p = abs(p);\n  return sdCircle(p, r, vec2(0.2));\n}\n\nfloat opRep(vec2 p, float r, vec2 c)\n{\n  vec2 q = mod(p+0.5*c,c)-0.5*c;\n  return sdCircle(q, r, vec2(0));\n}\n\n//returns a hear with size being one leg of the heart \nfloat sdHeart(vec2 uv, float size, vec2 offset) {\n  float x = uv.x - offset.x;\n  float y = uv.y - offset.y;\n  float xx = x * x;\n  float yy = y * y;\n  float yyy = yy * y;\n  float group = xx + yy - size;\n  float d = group * group * group - xx * yyy;\n  \n  return d;\n}\n\n//creates a star with 5 points\nfloat sdStar5(in vec2 p, in float r, in float rf, vec2 offset)\n{\n  p -= offset; // This will subtract offset.x from p.x and subtract offset.y from p.y\n  const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n  const vec2 k2 = vec2(-k1.x,k1.y);\n  p.x = abs(p.x);\n  p -= 2.0*max(dot(k1,p),0.0)*k1;\n  p -= 2.0*max(dot(k2,p),0.0)*k2;\n  p.x = abs(p.x);\n  p.y -= r;\n  vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n  float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n  return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n\n//makes a rectangle \nfloat sdBox( in vec2 p, in vec2 b, vec2 offset )\n{\n  p -= offset;\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n  vec2 pa = p-a, ba = b-a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h );\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\n//bezeir curves \nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n\n\n\n\n//draws background gradient. Could be more efficient with mix function. \nvec3 drawBackground(vec2 p)\n{\n    return vec3 (0.5 + cos(p.y) * 0.5, 0.5 + cos(p.y + iTime * 2.0) * 0.2, \n        0.5 + sin(p.y) * 1.0);\n}\n\n\n//draw scene\nvec3 drawScene(vec2 p)\n{\n    vec3 col = drawBackground(p); \n        \n    float circle = sdCircle(p, 0.1, vec2 (1.0 - sin(iTime) * .7, 0.0 + abs(cos(iTime)) * .7));\n    float cutOut = sdCircle(p, 0.2, vec2 (1.125 - sin(iTime) * .7, 0.0 + abs(cos(iTime)) * .7));\n    \n    circle = max(circle, -cutOut);\n   \n    col = mix(vec3(1., 1., 1.), col, smoothstep(0., 0.07, circle)); //params: color of circle, color of background, if point is in circle\n   \n    vec3 waterCol = vec3(0.4 + cos(p.y + iTime * 2.0) * 0.2, 0.4 + cos(p.y + iTime * 2.0) * 0.2, 1.0 + sin((p.x * p.x + p.y * p.y)*10.0 + iTime * 2.0) * 0.1); \n \n    col = mix(waterCol, col, step(0.2, p.y));\n    \n    return col; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = fragCoord/iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n\n    vec3 col = drawScene(p); \n   \n    fragColor = vec4(col,1.0);\n}\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}