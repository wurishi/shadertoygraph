{"ver":"0.1","info":{"id":"mlXXzn","date":"1674202996","viewed":63,"name":"From Sphere To Cube","username":"benjik42","description":"From a sphere to a cube.\nFirst part of  a serie where I wanna learn how to do this exact things but in 3d !","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(vec2 uv, float th){\n    return mat2(cos(th),sin(th),-sin(th),cos(th))*uv;\n\n}\n\nvec3 CubeSphere(vec2 uv,float size,float transform){\n    vec2 rotated = rotate(uv, iTime);\n    float x = rotated.x ;\n    float y = rotated.y ;\n    \n    float v = (max(abs(x),abs(y))*transform) + (x*x+y*y-transform)+size;\n    \n    return v > 0. ? vec3(1.) : vec3(1., 0., 0.);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy) / iResolution.y;\n    \n    uv *= 5.;\n    vec3 col = vec3(0.);\n    \n    float transform = 64.5+(-32./(.5+8.*smoothstep(-.8,1.9,sin(.2+iTime*.9))));\n    float size = smoothstep(-155.,-200.,sin(.2+iTime*.9));\n    col +=CubeSphere(uv,size,transform);\n    \n    \n    \n    \n    //if(abs(uv.x)<(1./iResolution.y)) col.g = 1.;\n    //if(abs(uv.y)<(1./iResolution.y)) col.r = 1.;\n    \n    \n    // Output to screen\n    fragColor = vec4(col,0.);\n}","name":"Image","description":"","type":"image"}]}