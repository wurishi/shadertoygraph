{"ver":"0.1","info":{"id":"7lGGWz","date":"1638404280","viewed":230,"name":"Warped Waves of Color","username":"flylo","description":"Based loosedly on Conway's Game of Life [url]https://iquilezles.org/articles/gameoflife/gameoflife.htm[/url], with a study in color mixing.  Combined with a fractal warp effect based on [url]https://iquilezles.org/articles/warp/[/url].","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["2d","fractal","simulation","warp","automata","life","conway","gameoflife","multipass"],"hasliked":0,"parentid":"slK3zm","parentname":"Fork GameOfLife flylo 481"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n      \n    fragColor = texelFetch( iChannel0, ivec2(fragCoord), 0 );\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nfloat hash1( float n )\n{\n    return fract(sin(n)*138.5453123);\n}\n\nfloat rstate;\nvec2 uv;\n\n\nfloat rand(){\n    rstate += dot(uv, vec2(71.9898,123.233));\n    return hash1(rstate*(iTime+1.));\n}\n\n\nvec4 texel( in ivec2 p )\n{\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n    return (texelFetch(iChannel0, p, 0 ));\n}\n\nconst int[18] ns = int[](-1, -1, 0, -1, 1, -1, -1, 0, 1, 0, 0, 0, -1, 1, 0, 1, 1, 1);\nvec4 cur, next;\nbool add; \n\nvec4 avg( in ivec2 px )\n{\n    int idx = int(rand() * 10.) * 2;\n   \n    vec4 r = texel(px);\n    float rv = 0.;\n        \n    for (int i = idx; i < 18 + idx; i += 2) {\n       vec4 n = texel(px+ivec2(ns[i%18],ns[(i%18)+1]));\n\n       if (n.a > r.a) {\n           r = (r + n) / 2.;\n           r.a = n.a;\n       }\n   }\n \n   return r;\n   \n}\n\n\nvec4 sum( in ivec2 px )\n{\n    int idx = int(rand() * 10.) * 2;\n   \n    vec4 r = cur;\n    float rv = 0.;\n        \n    for (int i = idx; i < 18 + idx; i += 2) {\n       vec4 n = texel(px+ivec2(ns[i%18],ns[(i%18)+1]));\n\n       if (n.a > r.a) {\n           r = cur + n;\n           float mx = max(r.r, max(r.g, r.b));\n           if (mx > 1.)\n               r /= mx;\n               \n           //if (r.r > 1.) r.r /= 2.;\n           //if (r.g > 1.) r.g /= 2.;\n           //if (r.b > 1.) r.b /= 2.; \n           r.a = n.a;\n           //if (mx > 1.)\n           //    r.a -= fract(r.a);\n       }\n   }\n \n   return r;\n   \n}\n\n\nvec4 diff( in ivec2 px )\n{\n    int idx = int(rand() * 10.) * 2;\n   \n    vec4 r = texel(px);\n    float rv = 0.;\n        \n    for (int i = idx; i < 18 + idx; i += 2) {\n       vec4 n = texel(px+ivec2(ns[i%18],ns[(i%18)+1]));\n\n       if (n.a > r.a) {\n           r.rgb = min(r.rgb, n.rgb);\n           r.a = n.a;\n       }\n   }\n \n   return r;\n}\n\n\nvec4 copy( in ivec2 px )\n{\n    int idx = int(rand() * 10.) * 2;\n   \n    vec4 r = texel(px);\n    float rv = 0.;\n        \n    for (int i = idx; i < 18 + idx; i += 2) {\n       vec4 n = texel(px+ivec2(ns[i%18],ns[(i%18)+1]));\n\n       if (n.a > rv) {\n           r = n;\n           rv = n.a;\n       }\n   }\n \n   return r;\n}\n\n\nvec4 vsim(in vec2 uv) {\n    next = cur;\n    \n    ivec2 px = ivec2( (uv * iResolution.y + iResolution.xy)/2. );\n\n    bool l, d = false;\n\n    next = diff(px);           \n    if (fract(next.a) > 0.1) {\n           next = cur;   \n           next = sum(px);\n       if (fract(next.a) > .6) {\n             next = cur;\n             next = copy(px);\n           if (fract(next.a) > .8) {\n             next = cur;\n             next = avg(px);\n           }    \n       }       \n    }\n   \n    // decay\n    if (true) {\n        float dk = 2.;\n        next.a = max(0.0, next.a - dk);\n    }\n    \n    // growth\n    if (rand() < 1351e-4 && rand() < 1e-6 ) {\n        vec4 n;\n            \n        n.rgb = vec3(rand(), rand(), rand());\n        n.a = rand() * 1000.; \n        next = n;\n        \n    }\n       \n    if(  iFrame==0 ) {\n        if (rand() < .0002) {\n            next.r = rand();\n            next.g = rand();\n            next.b = rand(); //       fragColor = vec4(step(0.5, hash1(fragCoord.x*13.0+hash1(fragCoord.y*71.1))));\n            next.a = rand() * 1000.;       \n        }\n    } \n    \n    return next;\n}\n\nvec4 clouds(in vec2 uv) {\n    vec4 vs = vsim(uv);\n    \n    int iter = 3;\n    float amp = 112.9;\n    float f = .0342;\n\n    float a = 1.; \n    for (int i = 0; i < iter; i++) {\n       a *= amp;\n    }\n       \n    for (int i = 0; i < iter; i++) {\n        a /= amp;\n        f *= 1.2;\n        vs = a*vsim(uv + f*vec2(vs.r - vs.g, vs.g - vs.b)) ;\n    }\n    return vs;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    ivec2 px = ivec2( fragCoord );\n\n    uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    rstate = dot(uv, vec2(711.9898,1123.233));\n \n    cur = texelFetch(iChannel0, px, 0 );\n\n    fragColor = clouds(uv);\n\n}","name":"Buffer A","description":"","type":"buffer"}]}