{"ver":"0.1","info":{"id":"lssyRf","date":"1489226991","viewed":181,"name":"Vector balls Loading Screen","username":"skaven","description":"Fast made shader for a loading screen. Idea come from Amiga Nexus demo. Vector balls is the first thing I've seen running on Amiga 500. Memories. Click in view to change loading progress.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["loadingscreen"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\nfloat circle(vec2 coord, float radius, float aa)\n{\n    return smoothstep(radius-aa, radius+aa, sqrt(dot(coord,coord)));\n}\n\nfloat hash(vec2 p)  // replace this by something better\n{\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= vec2(0.5);\n    \n    float pixelSize = 1.0/iResolution.x;\n    vec2 uvvign = uv;\n    uvvign += vec2(hash(uv*11.17), hash(uv*9.98))*pixelSize * 10.0;\n    float vignette = 1.7 - sqrt(dot(uv+uvvign,uv+uvvign));\n\tuv.y *= iResolution.y / iResolution.x;\n    \n    float randomIncl = iMouse.y/iResolution.y * 0.1;\n    float loading = max(iMouse.x/iResolution.x-0.9,0.0) * 100.0 + 1.0;\n    float loadingThes = 0.8 - iMouse.x/iResolution.x - 0.2;\n    float col = 1.0;\n    for (int i = 0;i<10;i++)\n    {\n        float t = float(i) / 10.0 + iTime * 0.2;\n        vec2 coord = vec2(cos(t * PI * 2.0) * 0.25, sin(t * PI * 2.0) * 0.05); \n        \n        float radius = sin(t * 21.11) * 0.2+0.8;\n        radius *= clamp((float(i)-loadingThes*10.0), 0.0, 1.0);\n        radius *= 1.0 + coord.y * 14.0;\n        \n        radius *= loading;\n        coord.y += sin(t * 3.6 * PI) * randomIncl;\n        col = min(col, circle(uv + coord, radius * 0.05, pixelSize));\n    }\n    \n    fragColor = vec4(0.3,0.3,0.3,1.0) * vignette * col;\n}","name":"Image","description":"","type":"image"}]}