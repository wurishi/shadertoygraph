{"ver":"0.1","info":{"id":"Nd3XR4","date":"1663429026","viewed":91,"name":"SDF 2d test","username":"sergei_am","description":"Simple 2d SDF test.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n\nfloat sdf_circle(in vec2 pos, in vec2 center, in float r)\n{\n    return length(pos - center) - r;\n}\n\nfloat sdf_edge(in vec2 pos, in vec2 p0, in vec2 p1, in float r)\n{\n    float t = dot(pos-p0, p1-p0) / dot(p1-p0, p1-p0);\n    \n    if(t>0.0 && t<1.0)\n    {\n        return sdf_circle(pos, p0 + (p1-p0)*t, 0.0) - r;\n    }\n    return min(sdf_circle(pos, p0, r), sdf_circle(pos, p1, r));\n}\n\nvoid apply_sdf(inout float summ_sdf, in float sdf)\n{\n    if(abs(sdf)<abs(summ_sdf)) summ_sdf = sdf;\n}\n\nfloat sdf_wheel(in vec2 pos, in vec2 center, in float size)\n{\n    float x = 1000000000.0;\n    \n    apply_sdf(x, sdf_circle(pos, center, size*0.5));\n    \n    apply_sdf(x, sdf_edge(pos, center, center + vec2(sin(iTime),-cos(iTime))*size*0.5, 0.0));\n    apply_sdf(x, sdf_edge(pos, center, center + vec2(sin(iTime + PI*2.0/3.0),-cos(iTime + PI*2.0/3.0))*0.5*size, 0.0));\n    apply_sdf(x, sdf_edge(pos, center, center + vec2(sin(iTime + PI*4.0/3.0),-cos(iTime + PI*4.0/3.0))*0.5*size, 0.0));\n    \n    float sign = 1.0;\n    for(float i=0.0; i<9.0; i += 1.0, sign = -sign)\n        apply_sdf(x,\n            sdf_circle(pos,\n                center + vec2((0.2+i*0.02)*cos(-iTime*(1.0+i*0.1)*sign), (0.2+i*0.02)*sin(-iTime*(1.0+i*0.1)*sign))*size, 0.0));\n\n    for(float i=0.0; i<36.0; i += 1.0)\n    {\n        float a = iTime + i*PI*2.0/36.0;\n        apply_sdf(x, sdf_edge(pos,\n            center + vec2(0.5*cos(a), 0.5*sin(a))*size,\n            center + vec2(0.55*cos(a), 0.55*sin(a))*size,\n            0.0\n        ));\n    }\n    return x;\n}\n\nfloat sdf_fan(in vec2 pos, in vec2 center, in float size, in float rot_speed)\n{\n    float x = 1000000000.0;\n    \n    vec2 edge = vec2(cos(iTime*rot_speed), sin(iTime*rot_speed));\n    \n    apply_sdf(x, sdf_edge(pos, center + edge*size, center - edge*size, 0.0));\n    \n    return x;\n}\n\nfloat sdf_fan_machine(in vec2 pos, in vec2 center, in float size)\n{\n    float x = 1000000000.0;\n    \n    vec2 edge = vec2(cos(-iTime), sin(-iTime));\n    \n    apply_sdf(x, sdf_edge(pos, center + edge*size, center - edge*size, 0.0));\n    apply_sdf(x, sdf_fan(pos, center + edge*size, size*0.7, 1.0));\n    apply_sdf(x, sdf_fan(pos, center - edge*size, size*0.3, -2.0));\n    \n    return x;\n}\n\nfloat sdf_fan_machine2(in vec2 pos, in vec2 center, in float size)\n{\n    float x = 1000000000.0;\n    \n    vec2 edge = vec2(cos(iTime*0.5), sin(iTime*0.5));\n    \n    apply_sdf(x, sdf_edge(pos, center + edge*size, center - edge*size, 0.0));\n    apply_sdf(x, sdf_fan_machine(pos, center + edge*size, size*0.7));\n    apply_sdf(x, sdf_fan_machine(pos, center - edge*size, size*0.4));\n    \n    return x;\n}\n\nfloat sdf_lisajou(in vec2 pos, in vec2 center, in float size)\n{\n    float x = 1000000000.0;\n    for(int i=0; i<10; ++i)\n    {\n        float k = 2.0*PI*float(i)/10.0;\n        apply_sdf(x, sdf_circle(pos, center + vec2(sin(iTime*2.0 + k), cos(iTime*3.0 + k))*size, size*0.1));\n    }\n    return x;\n}\n\nfloat sdf(in vec2 pos)\n{\n    float x = 1000000000.0;\n    \n    apply_sdf( x, sdf_wheel(pos, vec2(0.1,0.5), 0.5));\n    apply_sdf( x, sdf_fan_machine2(pos, vec2(0.9, 0.5), 0.15));\n    apply_sdf( x, sdf_lisajou(pos, vec2(0.9, 0.5), 0.4));\n\n    return x;\n}\n\nvec3 shade(in vec2 pos)\n{\n    float x = sdf(pos);\n    x = abs(x) - 0.025*abs(sin(iTime));\n    \n    float c = abs(abs(x) - 0.05*abs(sin(iTime))) - 0.005;\n    float v = x > 0.0 ? 1.0 : 0.0;\n    return vec3(v,v,v);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord.xy = (fragCoord.xy - iResolution.xy*0.5)/iResolution.yy + vec2(0.5,0.5);\n    vec2 uv = fragCoord;\n    \n    vec2 distorted;\n    distorted.x = uv.x + cos(uv.y*24.0 + iTime*6.0)*0.01;\n    distorted.y = uv.y + sin(uv.x*24.0 + iTime*6.0)*0.01;\n    \n    vec3 col = shade(distorted);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}