{"ver":"0.1","info":{"id":"DlBSRd","date":"1676418753","viewed":62,"name":"sunset-move","username":"prathik_karanth","description":"animated sunset","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sunsetflow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\nprecision mediump float;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n \n    //Sun Reflection\n    vec2 center = uv - vec2(0.5, 0.5);\n    center.x = center.x * (iResolution.x / iResolution.y);\n\n    vec3 col = vec3(0.9, 0.3 + center.y, 0.2 + center.x);\n\n    float r = 0.25;\n    col *= 1.0 - smoothstep(r + 0.005, r + 0.2, length(center));\n    col *= 1.0 - step(0.0, center.y);\n\n    //topHalf - Sun\n    vec2 center2 = uv - vec2(0.5, 0.5);\n    center2.x = center2.x * (iResolution.x / iResolution.y);\n    vec3 col2 = vec3(0.9, 0.3 + center2.y, 0.2 + center2.x);\n\n    float r2 = 0.3;\n    col2 *= 1.0 - smoothstep(r2 + 0.005, r2 + 0.01, length(center2));\n    col2 *= step(0.0, center2.y);\n\n    //bottomHalf - water\n    float n = nestedNoise(uv * 6., iTime);\n    vec3 mixedColor = mix(vec3(.4, .6, 1.), vec3(.1, .2, 1.), n);\n\n    mixedColor *= 1.0 - smoothstep(0.0, 0.005, center.y);\n    \n    //Combine top-bottom\n    col += col2 + mixedColor;\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float random(float x) {\n\n    return fract(sin(x) * 10000.);\n\n}\n\nfloat noise(vec2 p) {\n\n    return random(p.x + p.y * 10000.);\n\n}\n\n// Perlin Water Noise \n// by jackdavenport\n\nvec2 sw(vec2 p) {\n    return vec2(floor(p.x), floor(p.y));\n}\nvec2 se(vec2 p) {\n    return vec2(ceil(p.x), floor(p.y));\n}\nvec2 nw(vec2 p) {\n    return vec2(floor(p.x), ceil(p.y));\n}\nvec2 ne(vec2 p) {\n    return vec2(ceil(p.x), ceil(p.y));\n}\n\nfloat smoothNoise(vec2 p) {\n\n    vec2 interp = smoothstep(0., 1., fract(p));\n    float s = mix(noise(sw(p)), noise(se(p)), interp.x);\n    float n = mix(noise(nw(p)), noise(ne(p)), interp.x);\n    return mix(s, n, interp.y);\n\n}\n\nfloat fractalNoise(vec2 p) {\n\n    float x = 0.;\n    x += smoothNoise(p);\n    x += smoothNoise(p * 2.) / 2.;\n    x += smoothNoise(p * 4.) / 4.;\n    x += smoothNoise(p * 8.) / 8.;\n    x += smoothNoise(p * 16.) / 16.;\n    x /= 1. + 1. / 2. + 1. / 4. + 1. / 8. + 1. / 16.;\n    return x;\n\n}\n\nfloat movingNoise(vec2 p, float time) {\n\n    float x = fractalNoise(p + time);\n    float y = fractalNoise(p - time);\n    return fractalNoise(p + vec2(x, y));\n\n}\n\nfloat nestedNoise(vec2 p, float time) {\n\n    float x = movingNoise(p, time);\n    float y = movingNoise(p + 100., time);\n    return movingNoise(p + vec2(x, y), time);\n\n}","name":"Common","description":"","type":"common"}]}