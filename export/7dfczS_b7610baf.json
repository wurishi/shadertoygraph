{"ver":"0.1","info":{"id":"7dfczS","date":"1642267632","viewed":95,"name":"Smartie Colour Test","username":"ewanovitch","description":"Smartie Colour Test","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdr","smartie"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 128\n#define MIN_DIST 0.01\n#define MAX_DIST 100.\n\nstruct PointLight {\n    vec3 pos;\n    vec3 colour;\n};\n\n// ------------------------------------------------------------------\n// SDF utilities\n//\n// ----------------\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// Thanks Inigo Quilez :)\n\nfloat union_(float a, float b) {\n    return min(a, b);\n}\n\nfloat intersection(float a, float b) {\n    return max(a, b);\n}\n\nfloat smoothUnion(float a, float b, float smoothing) {\n    float h = clamp(0.5 + 0.5 * (b-a)/smoothing, 0., 1.);\n    return mix(b, a, h) - smoothing*h*(1.0-h);\n}\n\nfloat smoothIntersection(float a, float b, float smoothing) {\n    float h = clamp(0.5 - 0.5 * (b-a)/smoothing, 0., 1.);\n    return mix(b, a, h) + smoothing*h*(1.0-h);\n\n}\n\nvec3 repeat(vec3 pt, vec3 centre) {\n    return mod(pt + 0.5*centre, centre) - 0.5*centre;\n}\n\nfloat sphereDist(vec3 pt, vec4 sphere) {\n    return length(pt - sphere.xyz) - sphere.w;\n}\n\n\nfloat rand(vec3 n) { \n    return fract(sin(dot(n, vec3(12.9898, 4.1414, 9.1919))) * 43758.5453);\n}\n\nfloat hash(vec3 p)  // replace this by something better\n{\n    p  = fract( p*0.3183099+.1 );\n    p *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    return mix(mix(mix( hash(i+vec3(0,0,0)), \n                        hash(i+vec3(1,0,0)),f.x),\n                   mix( hash(i+vec3(0,1,0)), \n                        hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(i+vec3(0,0,1)), \n                        hash(i+vec3(1,0,1)),f.x),\n                   mix( hash(i+vec3(0,1,1)), \n                        hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\nfloat layeredNoise(vec3 q, float scales[5], int nScales) {\n    float f = 0.;\n    for (int i = 0; i < nScales; i++) {\n        f += scales[i]*noise( q ); q = q*2.01;\n    }\n    return f;\n}\n\nconst float noiseScales[5] = float[5](\n  0.5000,\n  0.2500,\n  0.1250,\n  0.0625,\n  0.03125\n);\n\n// ------------------------------------------------------------------\n// Ray marched smartie\n\nfloat smartie(vec3 pt) {\n    return smoothIntersection(\n        sphereDist(pt, vec4(0, 0, 1, 1.2)),\n        sphereDist(pt, vec4(0, 0, -1, 1.2)),\n        0.11\n    );\n}\n\nfloat bumpySmartie(vec3 pt) {\n    vec3 noisy = pt + layeredNoise(pt * 10., noiseScales, 3) * 0.0025;\n    return smartie(noisy);\n}\n\n\nconst float INFINITY = 999999.;\nvec2 sceneSdf(vec3 pt) {\n    float closest = INFINITY;\n    float closestColourSelector;\n    for (int y = 0; y < 3; y++) {\n        for (int x = 0; x < 4; x++) {\n            float colourSelector = rand(vec3(x, y, 5));\n            vec3 offs = vec3(\n                (rand(vec3(x, y, 0))-0.5) * 4.,\n                (rand(vec3(x, y, 1))-0.5) * 5.,\n                (rand(vec3(x, y, 2))-0.5) * 2.5\n            );\n            float isect = bumpySmartie(pt + offs);\n            if (isect < closest) {\n                closest = isect;\n                closestColourSelector = colourSelector;\n           }\n        }\n    }\n\n    return vec2(closest, closestColourSelector);\n}\n\nvec3 normalAtScenePoint(vec3 pt) {\n    vec2 isect = sceneSdf(pt);\n    float distAtPt = isect.x;\n    vec2 smallStep = vec2(0.0001, 0);\n    return normalize(\n        vec3(\n            sceneSdf(pt + smallStep.xyy).x - sceneSdf(pt - smallStep.xyy).x,\n            sceneSdf(pt + smallStep.yxy).x - sceneSdf(pt - smallStep.yxy).x,\n            sceneSdf(pt + smallStep.yyx).x - sceneSdf(pt - smallStep.yyx).x\n        )\n    );\n}\n\nvec2 marchRay(vec3 ro, vec3 rd) {\n    vec2 dist = vec2(-1., 0);\n    for (int step = 0; step < MAX_STEPS; step++) {\n        vec3 pt = ro + rd*dist.x;\n        vec2 sceneDist = sceneSdf(pt);\n        dist.x += sceneDist.x;\n        dist.y = sceneDist.y;\n        if (dist.x < MIN_DIST || dist.x > MAX_DIST) {\n            break;\n        }\n    }\n    if (dist.x > MAX_DIST) {\n        dist.x = -1.;\n    }\n    return dist;\n}\n\n// ------------------------------------------------------------------\n// Surface and illumination characteristics\n\n\nconst vec3 backgroundColor = vec3(0.2);\nconst vec3 ambientLight = vec3(0.1, 0.02, 0.02);\nconst PointLight light1 = PointLight(vec3(-5, -3, -2), vec3(0.9, 0.8, 0.7));\nconst PointLight light2 = PointLight(vec3(3, 5, 2), vec3(0.9, 0.8, 0.7));\n\nconst vec3 smartieColours[6] = vec3[6](\n    vec3(0., 0.6, 0.95),  // blue\n    vec3(.9, .45, .1),    // orange\n    vec3(0.5, 0.9, 0.5),  // \n    vec3(0.9, 0.2, 0.),\n    vec3(0.4, 0.2, 0.2),\n    vec3(0.8, 0.8, 0.2)   // yellow\n);\nvec3 colourFromObjectIdent(float ident) {\n    int index = int(floor(ident * float(smartieColours.length())));\n    return smartieColours[index];\n}\n\nvec3 diffuseLight(vec3 pt, vec3 normal, PointLight light, vec3 colour) {\n    vec3 lightDir = normalize(light.pos - pt);\n    return max(dot(normal, lightDir), 0.) * colour;\n}\n\nvec3 diffuse(vec3 pt, vec3 normal, vec3 colour) {\n    return diffuseLight(pt, normal, light1, colour) + diffuseLight(pt, normal, light2, colour);\n}\n\nvec3 specularLight(vec3 pt, vec3 normal, vec3 viewDir, PointLight light) {\n    vec3 lightDir = normalize(light.pos - pt);\n    vec3 r = reflect(-lightDir, normal);\n    float rDotV = max(dot(r, viewDir), 0.);\n    return 0.8 * pow(rDotV, 40.) * light.colour;\n}\n\nvec3 specular(vec3 pt, vec3 normal, vec3 viewDir) {\n    return specularLight(pt, normal, viewDir, light1) + specularLight(pt, normal, viewDir, light2);\n}\n\n// ------------------------------------------------------------------\n// Shader entry point\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalised device coordinates with aspect ratio: (-1, 1) x (-aspect, aspect)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    // Camera model - rotating around the look at point with time\n    float camDist = 4.;\n    float rotSpeed = 0.5;\n    float zoom = 1.;\n    vec3 ro = vec3(camDist * sin(iTime * rotSpeed), 1, -camDist * cos(iTime * rotSpeed));\n    //ro = vec3(0, 0, camDist);\n    vec3 lookAt = vec3(0.);\n\n    // Camera -> image plane\n    vec3 forward = normalize(lookAt - ro);\n    vec3 right = cross(vec3(0., 1., 0.), forward);\n    vec3 up = cross(forward, right);\n    vec3 centre = ro + forward * zoom;\n\n    // Shoot ray through pixel into scene\n    vec3 pixelPos = centre + uv.x*right + uv.y*up;\n    vec3 rd = normalize(pixelPos - ro);\n\n    // Intersect with scene\n    vec3 col = backgroundColor;\n    vec2 isect = marchRay(ro, rd);\n    float sceneMinDist = isect.x;\n    if (sceneMinDist >= 0.) {\n        // Pixel colour = diffuse surface colour + specular highlights + ambient colour\n        vec3 isectPt = ro + rd*sceneMinDist;\n        vec3 isectNormal = normalAtScenePoint(isectPt);\n\n        vec3 colour = colourFromObjectIdent(isect.y);\n        vec3 diffuseCol = diffuse(isectPt, isectNormal, colour);\n        vec3 specCol = specular(isectPt, isectNormal, rd);\n        col = diffuseCol + specCol + ambientLight;\n    }\n    fragColor = vec4(col,1);\n}\n","name":"Image","description":"","type":"image"}]}