{"ver":"0.1","info":{"id":"lcG3D1","date":"1712693281","viewed":67,"name":"iterative epicycloid","username":"HalbFettKaese","description":"Press Space to reset the canvas (useful for fullscreen switching)","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["keyboard","cardioid","cycloid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 point(int frame) {\n    float t = float(frame)*0.01;\n    float n = 9.0;\n    float R = 1.0;\n    float r = R/n;\n    return r * (n+1.) * vec2(cos(t), sin(t))\n     + 1.5*r * vec2(cos((n+1.)*t), sin((n+1.)*t));\n}\n\nfloat lineSegment(vec2 uv, vec2 p1, vec2 p2) {\n    \n    float pixel = dFdx(uv.x);\n    \n    float t = clamp(dot(uv - p1, normalize(p2 - p1)), 0., length(p2-p1));\n    vec2 pt = p1 + t * normalize(p2 - p1);\n    float v = length(uv - pt);\n    v = smoothstep(0.0, 2.*pixel, v);\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 texCoord = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, texCoord).rgb;\n    float keyboard = texelFetch(iChannel1, ivec2(0x20, 0), 0).r;\n    if (iFrame==0 || keyboard==1.) {\n        col = vec3(1.);\n    } else {\n        vec2 uv = (fragCoord - iResolution.xy*0.5)/iResolution.yy;\n        uv *= 4.0;\n        vec2 p1 = point(iFrame);\n        vec2 p2 = point(iFrame+1);\n        float v = lineSegment(uv, p1, p2);\n        col = min(col, vec3(v));\n    }\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}