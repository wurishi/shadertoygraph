{"ver":"0.1","info":{"id":"MfXBzX","date":"1724365478","viewed":23,"name":"Orbiting Overlaid Circles","username":"trismegistus_shandy","description":"Basically an orrery with moons of moons of moons, but no sun, and every body is equally large; when they overlap, the distance functions their colors are based on add up.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["orbit","solarsystem","moons"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.1415926535897932;\nconst float tau = pi * 2.;\n\nfloat wobble( float speed ) {\n    return abs(sin ( iTime * speed ) );\n}\n\n//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.657);\n\n    return a + b*cos( tau * (c*t+d) );\n}\n\nvec3 wobble_palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3( wobble(2.),\n                   wobble(3.) + pi/3.,\n                   wobble(5.) + pi/5. );\n\n    return a + b*cos( tau * (c*t+d) );\n}\n\n\n\nvec2 multiply_complex( vec2 p, vec2 q ) {\n    float realpart = p.x * q.x - p.y * q.y;\n    float imaginarypart = p.x * q.y + p.y * q.x;\n    return vec2( realpart, imaginarypart );\n}\n\n\nvec2 rotate( vec2 coord, float angle ) {\n    vec2 rotator = vec2( sin(angle), cos(angle) );\n    vec2 rotated = multiply_complex( coord, rotator );\n    return rotated;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv0 = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    // rotate the coordinate system as a function of time so shapes we \n    // draw will orbit the center\n    vec3 finalColor = vec3( 0., 0., 0. );\n\n    vec2 uv_planet = uv0;\n    float offset = 0.3;\n    float speed = 1.;\n    float n = 0.;\n    // planets and moons and moons of moons...\n    for ( float f = 1.; f <= 6.; f++ ) {\n        uv_planet = rotate( uv_planet, iTime*speed );\n        uv_planet += offset;\n        speed *= 4./3.;\n        \n       if ( length( uv_planet ) < 0.5 ) {\n           n += length( uv0 );\n       }\n        \n    }\n    if ( n > 0. ) {\n        finalColor = wobble_palette( n );\n    }\n        \n\n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}