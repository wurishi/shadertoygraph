{"ver":"0.1","info":{"id":"wsSBDc","date":"1590974695","viewed":78,"name":"tunel--otro-v5 ","username":"jorge2017a1","description":"tunel--otro-v5","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["tunelotrov5"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a1-\n\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n\n#define PI 3.14159265358979323846264\n\n\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n\n\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n\n\n\n//Torus function\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\n//Sphere function\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n\n//-------------------------------------\nvec2 path(float t)\n{\n    //return sin(t * vec2(1., .83)) * .5 + sin(t * vec2(.3, .21)) * 1.;\n    return sin(t * vec2(0.475, 1.83)) * .5 + sin(t * vec2(.23, .21)) * 1.;\n}\n\n\nfloat sdf(vec3 p) \n{\n    return 2.7 - length(p.xy - path(p.z)) + noise(p * 1.5) * .6 + noise(p * 5.) * .15;\n}\n\n\n\n///---------------------------------------\nfloat sdCylinderYZ( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.yz),p.x)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdCylinderXZ( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdCylinderXY( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n\nfloat sdCylinderXYpath( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xy-path(p.z)),p.z)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n\n\n\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) \n{\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) \n{\n    return max(distA, -distB);\n}\n\n\nvec2 opU(vec2 d1, vec2 d2 ) {\n  vec2 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n\nvec3 rotate_y(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t+ca, +.0, -sa,\n\t\t+.0,+1.0, +.0,\n\t\t+sa, +.0, +ca);\n}\n\nvec3 rotate_x(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t+1.0, +.0, +.0,\n\t\t+.0, +ca, -sa,\n\t\t+.0, +sa, +ca);\n}\n\n\nvec3 rotate_z(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); \n    float sa = sin(angle);\n\treturn v*mat3(\n\t\t+ca, -sa, +.0,\n\t\t+sa, +ca, +.0,\n\t\t+.0, +.0, +1.0);\n}\n\n\n\n///-----------------------------------------\n\n\nvec3 LightShading(vec3 N,vec3 L,vec3 V,vec3 color)\n{\n    vec3 diffuse = max(0.,dot(N,-L))*color;\n    vec3 specular = pow(max(0.,dot(N,normalize(-L-V))),100.)*vec3(1.,1.,1.); \n    return diffuse + specular;\n}\n\n    \n    \n//-------------------------------------------------\n\nfloat hash( in vec2 p ) \n{\n    return fract(sin(p.x*15.32+p.y*35.78) * 43758.23);\n}\n\nvec2 hash2(vec2 p)\n{\n\treturn vec2(hash(p*.754),hash(1.5743*p.yx+4.5891))-.5;\n}\n\n\nvec2 noise2(vec2 x)\n{\n    vec2 add = vec2(1.0, 0.0);\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    return mix(mix( hash2(p),          hash2(p + add.xy),f.x),\n                    mix( hash2(p + add.yx), hash2(p + add.xx),f.x),f.y);\n    \n}\n\nmat2 rotate(float a) \n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\nfloat mapCerrov3(vec3 pp)\n{\n    vec3 p= pp;\n    \n    \n    float h = dot(sin(p - cos(p.yzx*1.3)), vec3(.13));\n    h += dot(sin(p*2. - cos(p.yzx*1.3*2.)), vec3(.1/2.));\n    return p.y + 1. + h;     \n}\n\n\nfloat mapCerro(vec3 pp)\n{\n    vec3 p= pp;\n    p.z += iTime;\n    float h = dot(sin(p - cos(p.yzx*1.3)), vec3(.13));\n    h += dot(sin(p*2. - cos(p.yzx*1.3*2.)), vec3(.1/2.));\n    return p.y + 1. + h;     \n}\n\n\n\n//-----------------------------------------------------\n\nvec2 rotate(vec2 v, float a) {\n   return vec2(cos(a)*v.x + sin(a)*v.y, -sin(a)*v.x + cos(a)*v.y);\n}\n\n\n//-----------------------------------------------------\n\nfloat GetDist(vec3 p  ) \n{\t\n\n    float d, dif1, dif2;\n    vec2 res;\n    vec3 pp, p2,p3;\n    \n   \n    pp=p;\n    p2=p;\n    p3=p;\n    \n \n    float planeDist1 = p.y+0.5;  //piso inf\n    float planeDist2 = 30.0-p.y;  //piso sup\n    float planeDist3 = p.x+30.0; //pared izq\n    float planeDist4 = 30.0-p.x;  //pared der\n    float planeDist5 = -p.z+40.0;  //pared atras\n    float planeDist6 = p.z+40.0;  //pared atras\n   \n    \n    res = vec2(9999, 0);\n    \n   \n   float mc= mapCerro(p);\n    \n   float mult=2.0;\n    p.z=mod(p.z,10.0);\n   float sdc1= sdCylinderXYpath(p-vec3(0.0,2.0,0.0), vec2(2.6*mult,11.0) );\n   float sdc2= sdCylinderXYpath(p-vec3(0.0,2.0,0.0), vec2(3.6*mult,10.0) );\n   float dif= differenceSDF(sdc2, sdc1);\n    \n    \n    \n   \n    //res =opU(res, vec2(planeDist1,20)); //inf\n    \n    res =opU(res, vec2(planeDist1+mc,4)); //inf\n    \n    //res =opU(res, vec2(dif,40 ));\n    res =opU(res, vec2(dif,43 ));\n    \n    \n    \n    res =opU(res, vec2(1.0,0 ));\n    \n    d = res.x;\n    mObj.dist = res.x;\n    mObj.tipo = res.y;\n    \n    return d;\n}\n\n\n\n///----------------------------------------------------------\n\n\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd) \n{\n\t\n    // The extra distance might force a near-plane hit, so\n    // it's set back to zero.\n    float dO = 0.; \n    //Determines size of shadow\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        \n        // The \"abs\" is a hack of sorts, but it forces the ray to hone in\n        // on the surface from either side. \"dS*dS<SURF_DIST*SURF_DIST\"\n        // would also work.\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n        \n        // This needs to be after the surface test. Otherwise, you could\n        // just the ray back out of range.\n        dO += dS;\n        // Ray shortening, for more accuracy, if you need it. It might be\n        // hacky, but it's necessary sometimes.\n        //dO += dS*.85; //  dS*.7, etc.\n       \n    }\n    \n    return dO;\n}\n\n\n\n\n//---------------------------------------------------\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\n\n\n\nfloat GetLightPar(vec3 p, vec3 plig) {\n    vec3 lightPos = plig;\n    //Determine movement of light ex. shadow and light direction and diffusion\n    //lightPos.xz += vec2(1, 2);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\nfloat saturate(float f)\n{\n\treturn clamp(f,0.0,1.0);\n}\n\n\n//----------------------------------------------------\n\n// Single rotation function - return matrix\nmat2 r2(float a){ \n  float c = cos(a); float s = sin(a); \n  return mat2(c, s, -s, c); \n}\n//--------------------\n\n// iMouse pos function - take in a vec3 like ro\n// simple pan and tilt and return that vec3\nvec3 get_mouse(vec3 ro) \n{\n    float x = iMouse.xy==vec2(0) ? -.2 :\n    \t(iMouse.y / iResolution.y * .5 - 0.25) * PI;\n    float y = iMouse.xy==vec2(0) ? .0 :\n    \t-(iMouse.x / iResolution.x * 1.0 - .5) * PI;\n    float z = 0.0;\n\n    ro.zy *= r2(x);\n    ro.zx *= r2(y);\n    \n    return ro;\n}\n\n\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor)\n{   // https://www.shadertoy.com/view/3lsSzf\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.0005 + 0.04*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        //float d = Map( opos, time ).x;\n        float d = GetDist( opos );\n        //float GetDist(vec3 p  ) \n        \n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\n\nfloat SoftShadow(vec3 ro, vec3 rd, float tmin, float tmax) \n{\t// https://iquilezles.org/articles/rmshadows\n    float res = 1.0;\n    float k = 16.0;\n    for (float t = tmin; t <= tmax;) \n    {\n\t\tfloat m = GetDist(ro + rd*t);\n\t\tif (m < SURF_DIST)\n\t\t\treturn 0.0;\n\t\tres = min(res, k*m/t);\n\t\tt += m;\n\t}\n\treturn res;\n}\n\n\n\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\n\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) \n{\n    vec3 N = GetNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\n\n\nvec3 phongIlluminationv2(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,vec3 light1Pos,vec3 light1Intensity  ) \n{\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    return color;\n}\n\n\n\n// phong shading\nvec3 p_shadingv2( vec3 v, vec3 n, vec3 eye, vec3 plight_pos1,  vec3 plight_color1 )\n{\n\t// ...add lights here...\n   //col2= p_shadingv2( p, nor, ro, light_pos1, light_color1 )*colobj;\n  \n    \n    \n   // float occ = calcOcclusion(v, n);\n   // vec3  lDir = normalize(plight_pos1 - v);\n  //  float lDist = length(plight_pos1 - v);\n\t\n   // float lShad = 0.3 + 0.7 * SoftShadow(v + n * SURF_DIST, lDir, SURF_DIST, lDist);\n    \n\t//float shininess = 16.0;\n    float shininess = 30.0;\n\t\n\tvec3 final = vec3( 0.0 );\n\t\n\tvec3 ev = normalize( v - eye );\n\tvec3 ref_ev = reflect( ev, n );\n\t\n\t// light 0\n\t{\n\t\n\t\tvec3 vl = normalize( plight_pos1 - v );\n\t\n\t\tfloat diffuse  = max( 0.0, dot( vl, n ) );\n\t\tfloat specular = max( 0.0, dot( vl, ref_ev ) );\n\t\tspecular = pow( specular, shininess );\n\t\t\n\t\t//final += plight_color1 * ( diffuse*lShad*occ + specular ); \n        //final += plight_color1 * ( diffuse*lShad + specular*occ );\n        final += plight_color1 * ( diffuse + specular );\n\t}\n\t\n\t\n\n    return (final);\n}\n\nvec3 srgb(float r, float g, float b) {\n    return vec3(r*r,g*g,b*b);\n}\n\n\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    itime=iTime;\n    float t;\n    t=iTime*5.0;\n   \n    \n \n light_pos1   = vec3(0.0, 20.0, 20.0 +t); \n light_color1 = vec3( 1.0 );\n\n light_pos2   = vec3( 0.0, 3.5, -1.0 +t);\n light_color2 = vec3( 1.0, 1.0, 1.0 );\n\n    \n   \n   \n    vec2  p2= path( t);\n    vec3 ro = vec3(0.0,5.0,-20.0+t);\n    \n    ro.x=p2.x;\n    ro.y=p2.y+1.0;\n\n \t\n\t//ro = get_mouse(ro);\n    vec3 rd = normalize( vec3(uv,1.0));\n  \n    \n    \n    vec3 col = vec3(0);\n    \n    TObj Obj;\n    \n    mObj.uv=uv;\n    mObj.rd=rd;\n    mObj.ro=ro;\n\n\t \n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    \n  \n    vec3 p = (ro + rd * d ); \n    glpRoRd=p;\n    mObj.p=p;\n    \n    float dif=0.8;\n  \n    \n    mObj.dist =d;\n    vec3 colobj;\n    \n    vec3 nor= GetNormal( p);\n    \n   \n    \n    \n    \n    colobj=getSphereColor(int( Obj.tipo));\n    \n    \n   float dif1=1.0;\n   \n    /*\n \tfloat dif1= GetLightPar(p,light_pos1);\n    dif1+= GetLightPar(p,light_pos2);\n     dif1= (dif1 )/2.0;\n    */\n    \n    \n    vec3 col2=vec3(1.0)*colobj;\n    \n   \n\t\n   col2= p_shadingv2( p, nor, ro, light_pos1, light_color1 )*colobj;\n   col2+= p_shadingv2( p, nor, ro, light_pos2, light_color2 )*colobj;\n   \n    float geo1=100.0/pow(distance(p,light_pos1),2.0);\n    float geo2=100.0/pow(distance(p,light_pos2),2.0);\n    \n\n\n\n    //col= (col2*dif*dif1)* (geo1+geo2);\n    col= (col2*dif*dif1);\n    \n    \n    vec3 K_a = vec3(0.35);\n    vec3 K_d = K_a;\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 50.0;\n    \n    vec3 color; \n    color = phongIlluminationv2(K_a, K_d, K_s, shininess, p, ro,light_pos1, light_color1 )*colobj;\n    color+= phongIlluminationv2(K_a, K_d, K_s, shininess, p, ro,light_pos2, light_color2 )*colobj;\n    col=(col+color)/2.5;\n    \n    //col=color;\n    \n    \n    col = pow(col, vec3(1.0/2.2));  \n    \n    fragColor = vec4(col,1.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///------------------------------------\nstruct TObj\n{\n    float tipo;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n};\n\n\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\nfloat random() \n{\n\treturn fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453);\n}\n\n\n\n\n\nfloat sdcirclevec2(vec2 pos, vec2 center, float radius)\n{\n    float d = length(pos - center) - radius;\n    return d;\n}\n\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n\n\n\nfloat distCustom(float x, float y)\n{\n    float n = -0.5 * abs(x) + y;\n    return log(\n        x * x + 1.5 * n * n\n    );\n}\n\n//-------------------\n//IQs noise\nfloat noise(vec3 rp) {\n    vec3 ip = floor(rp);\n    rp -= ip; \n    vec3 s = vec3(7, 157, 113);\n    vec4 h = vec4(0.0, s.yz, s.y + s.z) + dot(ip, s);\n    rp = rp * rp * (3.0 - 2.0 * rp); \n    h = mix(fract(sin(h) * 43758.5), fract(sin(h + s.x) * 43758.5), rp.x);\n    h.xy = mix(h.xz, h.yw, rp.y);\n    return mix(h.x, h.y, rp.z); \n}\n\n\n///----------------------\nfloat floorTex(vec3 rp) {\n    rp.x += itime * -2.0;\n    vec2 m = mod(rp.xz, 4.0) - 2.0;\n    if (m.x * m.y > 0.0) {\n        return 0.8 + noise(rp * 4.0) * 0.16;\n    }\n    return 0.2 + noise((rp + 0.3) * 3.0) * 0.1;\n}\n\n\n\n\n\n///-----------------------------------------\n//----------------------------------------------------\n\n\nvec3 getSphereColor(int i)\n{\n    \n    float m;\n        \n\tif(i==0 )\n    { return vec3(0.0);    }\n    \n    if(i== 1 )\n    {  return vec3(1, 0.5, 0);    } \n    if(i== 2 )\n    { return vec3(1.0, 1.0, 1.0); } \n    if(i== 3 )\n    {  return vec3(247./255., 168./255.,  184./255.);  } \n    if(i== 4 )\n    { return vec3(0, 1, 1);} \n    if(i== 5 )\n    { return vec3(85./255., 205./255., 252./255.); } \n    if(i== 6 )\n    { return  vec3(0.5, 0.8, 0.9);} \n    if(i== 7 )\n     {return vec3(1.0, 1.0, 1.0);} \n    if(i== 8 )\n    { return vec3(0.425, 0.56, 0.9); } \n    if(i== 9 )\n    { return vec3(0.5, 0.6, 0.6);} \n    if(i== 10 )\n    { return vec3(0.0, 1.0, 0.0);} \n    if(i== 11 )\n    { return vec3(0.25, 0.25, 0.25); } \n    \n    \n       if(i== 12 )\n    {\n        vec3 tmp;\n        tmp =glpRoRd;\n        \n        //tmp=rotate_x(tmp,90.0);\n        //tmp=rotate_x(tmp,90.0);\n        \n        return  vec3(0.8, 1.0, 0.4) * floorTex(tmp); \n        } \n    \n    \n     if(i== 13 )\n    {\n        float d = 0.0;\n\t\t\t// checkerboard function that returns 0 or 1\n\t\t\td = mod(floor(glpRoRd.x)+floor(glpRoRd.z),2.0);\n\t\t\t// vary between red (0) and yellow (1)\n\t\treturn vec3(0.8 + 0.1*d, 0.3 + 0.55*d, 0.15 - 0.1*d)*0.8;\n    } \n    \n    \n     if(i== 14 )\n    {\n        \t// checkerboard hack\n\t\t\tvec2 cb = floor(glpRoRd.xz);\n\t\t\tfloat cb2 = mod(cb.x + cb.y, 2.0);\n        \treturn vec3(0.4 + 0.1*cb2, 0.3 + 0.85*cb2, 0.35 - 0.3*cb2)*0.8;\n     } \n    \n    \n    \n     if(i== 15 )\n    { return vec3(1.0,0.0,1.);} \n    if(i== 16 )\n     { return vec3(1.0,1.0,0.0);} \n    if(i== 17 )\n     { return vec3(1.0,0.2,0.2);} \n    \n    if (i== 18)\n     {  \n        //checkboard\n        \n         vec3 col;\n         float cf=(0.23 + mod(floor(mObj.p.x*0.5) + floor(mObj.p.z*0.5), 2.0));\n         col =vec3(1.0)*floor( cf);\n         return col;\n     }\n    \n    \n    if (i== 19)\n     {  \n        //checkboard\n        \n         vec3 col ;\n         float cf=(0.23 + mod(floor(mObj.p.x*0.25) + floor(mObj.p.z*0.25), 2.0));\n         col =vec3(1.0)*floor( cf);\n         return col;\n     }\n    \n    \n    \n     if(i== 20 )\n    {\n     \n        vec3 p = glpRoRd;\n           vec3 marbleP = p;\n\n            marbleP.x += sin(p.y*20.0)*0.12;\n            marbleP.z += sin(p.y*22.0)*0.1;\n            marbleP.y += sin(p.x*25.0)*0.13;\n            marbleP.y += sin(p.z*23.0)*0.14;\n\n            marbleP.y += sin(p.x*1.3)*0.5;\n            marbleP.y += sin(p.z*1.5)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 20.0;\n            marbleP.z *= 20.0;\n            marbleP.y *= 10.0;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n    \t\t\n         vec3 surfaceColor;\n        \tsurfaceColor = mix(vec3(0.1,0.8,0.5),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\n     } \n    \n    \n    \n    if(i== 21 )\n    {\n     \n        vec3 p = glpRoRd;\n           vec3 marbleP = p;\n    \n            marbleP.x += sin(p.y*20.0)*0.12;\n            marbleP.z += sin(p.y*22.0)*0.1;\n            marbleP.y += sin(p.x*25.0)*0.13;\n            marbleP.y += sin(p.z*23.0)*0.14;\n\n            marbleP.y += sin(p.x*1.3)*0.5;\n            marbleP.y += sin(p.z*1.5)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 20.0;\n            marbleP.z *= 20.0;\n            marbleP.y *= 10.0;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n            marbleP = p;\n\n            marbleP.x += sin(p.y*21.0)*0.12;\n            marbleP.z += sin(p.y*23.0)*0.1;\n            marbleP.y += sin(p.x*22.0)*0.13;\n            marbleP.y += sin(p.z*24.0)*0.14;\n\n            marbleP.y += sin(p.x*1.2)*0.5;\n            marbleP.y += sin(p.z*1.4)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 22.0;\n            marbleP.z *= 23.0;\n            marbleP.y *= 11.0;\n\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.4,0.4,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n    }    \n\t\n    \n    if(i== 22)\n    {\n       return  vec3(0.5, 0.2, 1.0);  \n    }  \n    \n     if(i== 23)\n    { return  vec3(0.425, 0.5, 0.6);} \n    \n    if(i== 24)\n    {\n      float size = (-mObj.uv.y+.1)/2.5;\n     vec3 color = vec3(0.,0.,0.);\n     color += vec3(mod(floor(mObj.uv.x/size+sin(itime)) + floor(mObj.uv.y*20./size+itime),2.)-.8-mObj.uv.y);\n\n     // Lightsource falloff on floor\n     color *= vec3(smoothstep(0.,1.,1.-length(vec2(.2-mObj.uv.x/6.,.6+mObj.uv.y/1.5))));\n        return color;\n\t}    \n    \n    \n    if(i== 25)\n    {\n      float size = (-mObj.p.y+.1)/2.5;\n     vec3 color = vec3(0.,0.,0.);\n     color += vec3(mod(floor(mObj.p.x/size) + floor(mObj.p.y*20./size),2.)-.8-mObj.p.y);\n\n     // Lightsource falloff on floor\n     color *= vec3(smoothstep(0.,1.,1.-length(vec2(.2-mObj.p.x/6.,.6+mObj.p.y/1.5))));\n        return color;\n\t} \n    \n    if(i== 26)\n    {\n        // checkerboard hack\n\t\t\tvec2 cb = floor(mObj.p.xz);\n\t\t\tfloat cb2 = mod(cb.x*1.2 + cb.y, 2.);\n        \treturn vec3(1.4 + 0.1*cb2, 0.3 + 0.85*cb2, 0.35 - 0.3*cb2)*0.8;\n            \n    }   \n    \n    if(i== 27)\n    {\n      vec3 outColor = vec3(0.0);\n      float sinus1 = sin(mObj.uv.x*5.1 +itime*0.5) * 0.1 - 0.2;\n      float land1 = step(sinus1, mObj.uv.y);\n      vec3 landColor1 = vec3(0.2, 0.4, 0.3);\n      outColor = mix(outColor, landColor1, 1.0 - land1);\n        return outColor;\n    }\n    \n    \n    if(i== 28)\n    { return vec3(0.9,0.9,0.2);  }\n    \n    if(i== 29)\n    { return vec3(1.0,1.0,1.0); }\n    \n     \n    if (i== 30)\n     {  \n        //checkboard\n        //vec3 col = vec3(0.75)*(0.3 + mod(floor(mObj.p.x) + floor(mObj.p.z), 2.0));\n        vec3 col = vec3(1.0)*(0.23 + mod(floor(mObj.p.x*0.25) + floor(mObj.p.z*0.25), 2.0));\n         return col;\n     }\n    \n    \n    if(i== 31 )\n    {\n     \n        vec3 p = glpRoRd;\n           vec3 marbleP = p*2.0;\n    \n            marbleP.x += sin(p.y*0.5)*0.12;\n            marbleP.z += sin(p.y*2.0)*0.1;\n            marbleP.y += sin(p.x*5.0)*0.13;\n            marbleP.y += sin(p.z*3.0)*0.14;\n\n            marbleP.y += sin(p.x*1.3)*0.5;\n            marbleP.y += sin(p.z*1.5)*0.6;\n\n            marbleP.x += sin(p.y*10.0)*0.011;\n            marbleP.z += sin(p.y*12.0)*0.013;\n            marbleP.y += sin(p.x*15.0)*0.012;\n            marbleP.y += sin(p.z*13.0)*0.015;\n\n            marbleP.x *= 0.5;\n            marbleP.z *= 2.8;\n            marbleP.y *= 1.0;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n            marbleP = p;\n\n            marbleP.x += sin(p.y*21.0)*0.12;\n            marbleP.z += sin(p.y*23.0)*0.1;\n            marbleP.y += sin(p.x*22.0)*0.13;\n            marbleP.y += sin(p.z*24.0)*0.14;\n\n            marbleP.y += sin(p.x*1.2)*0.5;\n            marbleP.y += sin(p.z*1.4)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 22.0;\n            marbleP.z *= 23.0;\n            marbleP.y *= 11.0;\n\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.4,0.4,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n        \n\t\t\t}  \n    \n    \n    \n    if(i== 32 )\n    {\n     \n           vec3 p = glpRoRd;\n           vec3 marbleP = p*2.0;\n    \n            marbleP.x += sin(p.y*0.5)*0.12;\n            marbleP.z += sin(p.y*2.0)*0.1;\n            marbleP.y += sin(p.x*5.0)*0.13;\n            marbleP.y += sin(p.z*3.0)*0.14;\n\n            marbleP.y += sin(p.x*1.3)*0.5;\n            marbleP.y += sin(p.z*1.5)*0.6;\n\n            marbleP.x += sin(p.y*10.0)*0.011;\n            marbleP.z += sin(p.y*12.0)*0.013;\n            marbleP.y += sin(p.x*15.0)*0.012;\n            marbleP.y += sin(p.z*13.0)*0.015;\n\n            marbleP.x *= 0.5;\n            marbleP.z *= 0.8;\n            marbleP.y *= 0.50;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n            marbleP = p;\n\n            marbleP.x += sin(p.y*21.0)*0.12;\n            marbleP.z += sin(p.y*23.0)*0.1;\n            marbleP.y += sin(p.x*22.0)*0.13;\n            marbleP.y += sin(p.z*24.0)*0.14;\n\n            marbleP.y += sin(p.x*1.2)*0.5;\n            marbleP.y += sin(p.z*1.4)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 0.2;\n            marbleP.z *= 0.3;\n            marbleP.y *= 0.10;\n\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.4,0.4,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n        \n\t\t\t}  \n\n    \n    \n    if(i== 33 )\n    {\n     \n        vec3 p = glpRoRd;\n           vec3 marbleP = p*2.0;\n    \n            marbleP.x += sin(p.y*0.5)*0.012;\n            marbleP.z += sin(p.y*0.3)*0.01;\n            marbleP.y += sin(p.x*5.0)*0.013;\n            marbleP.y += sin(p.z*3.0)*0.014;\n\n            marbleP.y += sin(p.x*1.3)*0.05;\n            marbleP.y += sin(p.z*1.5)*0.06;\n\n            marbleP.x += sin(p.y*10.0)*0.011;\n            marbleP.z += sin(p.y*12.0)*0.013;\n            marbleP.y += sin(p.x*15.0)*0.012;\n            marbleP.y += sin(p.z*13.0)*0.015;\n\n            marbleP.x *= 0.015;\n            marbleP.z *= 0.08;\n            marbleP.y *= 0.50;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n        \n            marbleP = p;\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.1,0.4,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n        \n\t\t\t}  \n\n    \n    \n    \n    if(i== 34 )\n    {\n     \n        vec3 p = glpRoRd;\n           vec3 marbleP = p*2.0;\n    \n            marbleP.x += sin(p.y*0.5)*0.12;\n            marbleP.z += sin(p.y*0.3)*0.1;\n            marbleP.y += sin(p.x*5.0)*0.13;\n            marbleP.y += sin(p.z*3.0)*0.14;\n\n            marbleP.y += sin(p.x*1.3)*0.5;\n            marbleP.y += sin(p.z*1.5)*0.6;\n\n            marbleP.x += sin(p.y*10.0)*0.011;\n            marbleP.z += sin(p.y*12.0)*0.013;\n            marbleP.y += sin(p.x*15.0)*0.012;\n            marbleP.y += sin(p.z*13.0)*0.015;\n\n            marbleP.x *= 0.5;\n            marbleP.z *= 0.8;\n            marbleP.y *= 0.50;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n            marbleP = p;\n\n            marbleP.x += sin(p.y*21.0)*0.12;\n            marbleP.z += sin(p.y*23.0)*0.1;\n            marbleP.y += sin(p.x*22.0)*0.13;\n            marbleP.y += sin(p.z*24.0)*0.14;\n\n            marbleP.y += sin(p.x*1.2)*0.5;\n            marbleP.y += sin(p.z*1.4)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 0.2;\n            marbleP.z *= 0.3;\n            marbleP.y *= 0.10;\n\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.4,0.4,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n        \n\t\t\t}  \n    \n    \n    \n    if(i== 35 )\n    {\n     \n        \n        float freq=0.125;\n        vec3 p = glpRoRd;\n           vec3 marbleP = p*2.0;\n    \n            marbleP.x += sin(p.y*freq)*0.12;\n            marbleP.z += sin(p.y*freq)*0.1;\n            marbleP.y += sin(p.x*freq)*0.13;\n            marbleP.y += sin(p.z*freq)*0.14;\n\n            marbleP.y += sin(p.x*freq)*0.5;\n            marbleP.y += sin(p.z*freq)*0.6;\n\n            marbleP.x += sin(p.y*freq)*0.011;\n            marbleP.z += sin(p.y*freq)*0.013;\n            marbleP.y += sin(p.x*freq)*0.012;\n            marbleP.y += sin(p.z*freq)*0.015;\n\n            marbleP.x *= freq;\n            marbleP.z *= freq;\n            marbleP.y *= freq;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n            marbleP = p;\n\n            marbleP.x += sin(p.y*21.0)*0.12;\n            marbleP.z += sin(p.y*23.0)*0.1;\n            marbleP.y += sin(p.x*22.0)*0.13;\n            marbleP.y += sin(p.z*24.0)*0.14;\n\n            marbleP.y += sin(p.x*1.2)*0.5;\n            marbleP.y += sin(p.z*1.4)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 0.2;\n            marbleP.z *= 0.3;\n            marbleP.y *= 0.10;\n\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.4,1.0,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n        \n\t\t\t}  \n\n    \n    if(i== 36 )\n    {\n    \t///oro color oro\n    \t//float factor = shadow*length(sin(rf*3.)*0.5+0.5)/sqrt(2.);\n        float factor = 0.985*length(sin(mObj.rf*4.)*0.5+0.5)/sqrt(2.);\n        \n  \t\tvec3 col= mix(vec3(0.3,0.25,0.1), vec3(0.8,0.6,0.2), factor) + pow(factor*0.8, 6.);\n        return col;\n        \n    \n   }\n    \n    \n    \n    if(i== 37 )\n    {\n     \n           //vec3 p = glpRoRd;\n           vec3 p = mObj.p;\n        \n           //vec3 marbleP = p+glpRoRd;\n           vec3 marbleP = p*2.0;\n\n            marbleP.x += sin(p.y*20.0)*0.012;\n            marbleP.z += sin(p.y*22.0)*0.01;\n            marbleP.y += sin(p.x*25.0)*0.013;\n            marbleP.y += sin(p.z*23.0)*0.014;\n\n            marbleP.y += sin(p.x*1.3)*0.05;\n            marbleP.y += sin(p.z*1.5)*0.06;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 20.0;\n            marbleP.z *= 20.0;\n            marbleP.y *= 10.0;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n    \t\t\n         vec3 surfaceColor;\n        \tsurfaceColor = mix(vec3(0.1,0.8,0.5),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\n     } \n  \n    \n    \n    \n    \n    if(i== 38 )\n    {\n        \n        float i0 = 1.0;\n  \t\tfloat i1 = 1.0;\n  \t\tfloat i2 = 1.0;\n  \t\tfloat i4 = 0.0;\n        \n  \tfor (int s = 0; s < 8; s++) {\n    vec2 r;\n    r = vec2(cos(mObj.uv.y * i0 - i4 + itime / i1), sin(mObj.uv.x * i0 - i4 + itime / i1)) / i2;\n    r += vec2(-r.y, r.x) * 0.3;\n    mObj.uv.xy += r;\n\n    i0 *= 1.93;\n    i1 *= 1.15;\n    i2 *= 1.7;\n    i4 += 0.05 + 0.1 * itime * i1;\n  \t}\n        \n    \tfloat r = sin(mObj.uv.x - itime+2.0) * 0.25 + 0.5;\n  \t\tfloat b = sin(mObj.uv.y + itime*2.0+2.0) * 0.5 + 0.5;\n  \t\tfloat g = sin((mObj.uv.x + mObj.uv.y + sin(1.0 * 0.5)) * 0.5) * 0.5 + 0.5;\n        vec3 col= vec3(r,g,b);\n        return col;\n\t}      \n    \n    \n    \n    \n    if(i== 39 )\n    {\n        \n        float i0 = 1.0;\n  \t\tfloat i1 = 1.0;\n  \t\tfloat i2 = 1.0;\n  \t\tfloat i4 = 0.0;\n       \n        \n  \t   for (int s = 0; s < 8; s++)  \n       {\n       vec2 r;\n        r = vec2(cos(mObj.uv.y * i0 - i4 + 1.0 / i1), sin(mObj.uv.x * i0 - i4 + 1.0 / i1)) / i2;\n        r += vec2(-r.y, r.x) * 0.3;\n        mObj.uv.xy += r;\n\n        i0 *= 1.93;\n        i1 *= 1.15;\n        i2 *= 1.7;\n        i4 += 0.05 + 0.1 * 1.0 * i1;\n  \t  }\n        \n    \tfloat r = sin(mObj.uv.x - 1.0+2.0) * 0.25 + 0.5;\n  \t\tfloat b = sin(mObj.uv.y + 1.0*2.0+2.0) * 0.5 + 0.5;\n  \t\tfloat g = sin((mObj.uv.x + mObj.uv.y + sin(1.0 * 0.5)) * 0.5) * 0.5 + 0.5;\n        vec3 col= vec3(r,g,b);\n        return col;\n\t}      \n    \n    \n    \n    if(i== 40 )\n    {\n        \n        float i0 = 1.0;\n  \t\tfloat i1 = 1.0;\n  \t\tfloat i2 = 1.0;\n  \t\tfloat i4 = 0.0;\n       \n        \n  \t   for (int s = 0; s < 8; s++)  \n       {\n       vec2 r;\n        r = vec2(cos(mObj.p.y * i0 - i4 + 1.0 / i1), sin(mObj.p.x * i0 - i4 + 1.0 / i1)) / i2;\n        r += vec2(-r.y, r.x) * 0.3;\n        mObj.p.xy += r;\n\n        i0 *= 1.93;\n        i1 *= 1.15;\n        i2 *= 1.7;\n        i4 += 0.05 + 0.1 * 1.0 * i1;\n  \t  }\n        \n    \tfloat r = sin(mObj.p.x - 1.0+2.0) * 0.25 + 0.5;\n  \t\tfloat b = sin(mObj.p.y + 1.0*2.0+2.0) * 0.5 + 0.5;\n  \t\tfloat g = sin((mObj.p.x + mObj.p.y + sin(1.0 * 0.5)) * 0.5) * 0.5 + 0.5;\n        vec3 col= vec3(r,g,b);\n        return col;\n\t}  \n    \n    if(i==41)\n    {\n\t\tfloat  sdc1= sdcirclevec2(vec2(mObj.p.x, mObj.p.y), vec2(mObj.p.x/4.0,mObj.p.y/4.0), 1.0);\n        return  mix(vec3(0.5), vec3(0.3,0.63,0.8), sdc1);\n    }   \n    \n    \n    if(i==42)\n    {\n\t\tvec3 chc= checkerBoard(mObj.p.x, mObj.p.z, 4.0);\n        return chc; \n    }   \n    \n    if(i==43)\n    {\n\t\tvec3 chc= checkerBoard(mObj.p.x, mObj.p.z, 4.0);\n        return  mix(vec3(0.7), vec3(0.3,0.63,0.8), chc.x+chc.y+chc.z);\n        \n    }   \n    \n    \n     if(i==44)\n    {\n\t\tvec3 chc= checkerBoard(mObj.p.x, mObj.p.z, 4.0);\n        vec3 ch1=  mix(vec3(0.7), vec3(0.3,0.63,0.8), chc.x+chc.y+chc.z);\n        vec3 ch2=  mix(vec3(0.1), ch1, chc.x+chc.y+chc.z);\n        return ch2;\n        \n    }   \n    \n\t    \n    if(i==45)\n    {\n\t\tvec3 chc= checkerBoard(mObj.p.x, mObj.p.z, 4.0);\n        vec3 ch1=  mix(vec3(0.0), vec3(1.0,1.0,1.0), length(chc));\n        return ch1; \n    }   \n    \n    \n      if(i==46)\n    {\n\t\tvec3 chc= checkerBoard(mObj.p.x, mObj.p.z, 4.0);\n        vec3 ch1=  mix(vec3(0.7), vec3(0.3,0.63,0.8), chc.x+chc.y+chc.z);\n        vec3 ch2=  mix(vec3(0.0), ch1, chc.x+chc.y+chc.z);\n        return ch2;\n        \n    }   \n    \n    \n    if(i==47)\n    {\n      return vec3(0.8392, 0.0629,1.0);\n     }   \n    \n   if(i==48)\n    {\n      return vec3(0.6289, 0.7216, 1.0); \n    }\n    \n    \n    if(i==49)\n    {\n      vec3 p1 = mObj.p;\n      return vec3(floor(length(floor(mod(p1, 2.0)+0.5))-0.5));\n    }   \n    \n    \n     if(i==50)\n    {\n      vec3 pp = mObj.p;\n        \n        vec3 col1;\n         float cf=(0.23 + mod(floor(mObj.p.x*0.5) + floor(mObj.p.z*0.5), 2.0));\n         col1 =vec3(1.0)*floor( cf);\n\t\t\n        \n        \n      \t\tvec3 p = glpRoRd;\n           vec3 marbleP = p*2.0;\n    \n            marbleP.x += sin(p.y*0.5)*0.12;\n            marbleP.z += sin(p.y*2.0)*0.1;\n            marbleP.y += sin(p.x*5.0)*0.13;\n            marbleP.y += sin(p.z*3.0)*0.14;\n\n            marbleP.y += sin(p.x*1.3)*0.5;\n            marbleP.y += sin(p.z*1.5)*0.6;\n\n            marbleP.x += sin(p.y*10.0)*0.011;\n            marbleP.z += sin(p.y*12.0)*0.013;\n            marbleP.y += sin(p.x*15.0)*0.012;\n            marbleP.y += sin(p.z*13.0)*0.015;\n\n            marbleP.x *= 0.5;\n            marbleP.z *= 0.8;\n            marbleP.y *= 0.50;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n            marbleP = p;\n\n            marbleP.x += sin(p.y*21.0)*0.12;\n            marbleP.z += sin(p.y*23.0)*0.1;\n            marbleP.y += sin(p.x*22.0)*0.13;\n            marbleP.y += sin(p.z*24.0)*0.14;\n\n            marbleP.y += sin(p.x*1.2)*0.5;\n            marbleP.y += sin(p.z*1.4)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 0.2;\n            marbleP.z *= 0.3;\n            marbleP.y *= 0.10;\n\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.4,0.4,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \tvec3 col2= surfaceColor;\t\n        \n      \n      vec3 col= (col2+ mix(col1, col2*2.0,  length( pp)))/2.0;\n        \n      return col;\n    }   \n    \n    \n    \n     if(i==51)\n    {\n \n      vec3 col1;\n      float cf=(0.23 + mod(floor(mObj.p.x*0.5) + floor(mObj.p.z*0.5), 2.0));\n      col1 =vec3(1.0)*floor( cf);\n      //col1=mix(col1, vec3(random()), fract( mObj.p.x+mObj.p.z) );\n      col1=col1+ vec3(random())/2.0;\n        return col1;\n    }   \n    \n    \n    \n     if(i==52)\n    {\n \n      vec3 col1;\n      float cf=(0.23 + mod(floor(mObj.p.x*0.5) + floor(mObj.p.z*0.5), 2.0));\n      col1 =vec3(1.0)*floor( cf);\n        return col1;\n    }   \n    \n}\n\n///--------------------------------------------\n\n","name":"Common","description":"","type":"common"}]}