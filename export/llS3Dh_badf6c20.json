{"ver":"0.1","info":{"id":"llS3Dh","date":"1428593799","viewed":191,"name":"matrix experiments","username":"cnc","description":"just again practice stuff ... ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGzn","filepath":"/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","previewfilepath":"/media/ap/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const float NUM_FREQS = 3.0;\nconst float SCALE     = 5.0;\nconst float PI        = 3.14159265359;\n\nfloat angleBetween( vec2 a, vec2 b )\n{\n    float dotAB = dot( normalize(a), normalize(b) );\n    return acos(dotAB);\n}\n\nvec2 rotate( float angle, vec2 current )\n{\n    // counterclockwise\n    mat2 r = mat2( cos(angle), -sin(angle),\n                   sin(angle),  cos(angle) );\n                 \n    return r * current;\n}\n                 \nfloat noise( vec2 seed )\n{\n    return fract(sin(dot(seed.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}         \n\nvec3 ring( vec2  center, \n           vec2  current, \n           float radius, \n           float width,\n           vec3  color )\n{\n    float l = length( current - center );\n    color *= 1.0 - ( smoothstep( radius - 0.0025, radius, l ));\n    color *= smoothstep( (radius - width) - 0.0025, radius - width, l );\n    return color;\n}\n\nvec3 ringSegment( vec2 center,\n                  vec2 current,\n                  float radius,\n                  float width,\n                  float angle,\n                  vec3 color )\n{\n    vec2 v1 = vec2( 1.0, 0.0 );\n    vec2 v2 = current - center ;\n    \n    color  = ring( center, current, radius, width, color );\n    color  *= 1.0 - step( angle-0.01, abs(angleBetween( v1, v2 )) );\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4( 0, 0, 0, 1 );\n    \n    // correct the aspect ratio\n    vec2 uv = ( fragCoord.xy-(iResolution.xy/2.0) )/min(iResolution.y,iResolution.x);\n    \n    // fft samples\n    float freq0 = texture( iChannel0, vec2(0.0, 0.25) ).x;\n    float freq1 = texture( iChannel0, vec2(0.3, 0.25) ).x;     \n    float freq2 = texture( iChannel0, vec2(0.5, 0.25) ).x;     \n    float freq3 = texture( iChannel0, vec2(0.7, 0.25) ).x;     \n    \n    vec2 suv  = SCALE* uv * sqrt(freq2/NUM_FREQS);\n    vec2 ruv  = rotate( iTime, suv);\n    \n    vec3 red   = vec3( 197.0/255.0, 0.1, 10.0/255.0 );\n    vec3 color = vec3( 0,0,0 );   \n    \n    color.rgb += (red * smoothstep( 0.0, -1.0, ruv.y ));\n    color.rgb += (red * smoothstep( 0.0, -1.0, ruv.x ));    \n    color.rgb += (red * smoothstep( 0.0,  1.0, ruv.y ));\n    color.rgb += (red * smoothstep( 0.0,  1.0, ruv.x ));    \n    color.rgb *= 1.0 - noise( ruv ) * 0.35;\n    \n    vec2 uv1 = rotate( -iTime,     uv );\n    vec2 uv2 = rotate( -iTime*2.0, uv );\n    vec2 uv3 = rotate( -iTime*2.5, uv );\n    vec2 uv4 = rotate( -iTime*3.0, uv );\n    color.rgb += ringSegment( vec2(0,0), uv1, 0.15, 0.01, 5.0 * freq1, vec3(1,1,1) );\n    color.rgb += ringSegment( vec2(0,0), uv2, 0.20, 0.01, 5.0 * freq2, vec3(1,1,1) );\n    color.rgb += ringSegment( vec2(0,0), uv3, 0.25, 0.01, 5.0 * freq3, vec3(1,1,1) );\n    color.rgb += ringSegment( vec2(0,0), uv4, 0.45, 0.01, 5.0 * freq3, vec3(1,1,1) );\n         \n\tfragColor = vec4(color,1);\n}","name":"","description":"","type":"image"}]}