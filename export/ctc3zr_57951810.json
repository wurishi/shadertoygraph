{"ver":"0.1","info":{"id":"ctc3zr","date":"1681921669","viewed":185,"name":"Metaballs Pixel Art Filter","username":"UltimateBurrito","description":"Decreases resolution, snaps all colors to a palette(AAP-Splendor128 in this case) and adds some bayer dithering","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["pixels"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// aap 64\n//vec3 palette[] = vec3[] (vec3(0.024, 0.024, 0.031), vec3(0.078, 0.063, 0.075), vec3(0.231, 0.09, 0.145), vec3(0.451, 0.09, 0.176), vec3(0.706, 0.125, 0.165), vec3(0.875, 0.243, 0.137), vec3(0.98, 0.416, 0.039), vec3(0.976, 0.639, 0.106), vec3(1.0, 0.835, 0.255), vec3(1.0, 0.988, 0.251), vec3(0.839, 0.949, 0.392), vec3(0.612, 0.859, 0.263), vec3(0.349, 0.757, 0.208), vec3(0.078, 0.627, 0.18), vec3(0.102, 0.478, 0.243), vec3(0.141, 0.322, 0.231), vec3(0.071, 0.125, 0.125), vec3(0.078, 0.204, 0.392), vec3(0.157, 0.361, 0.769), vec3(0.141, 0.624, 0.871), vec3(0.125, 0.839, 0.78), vec3(0.651, 0.988, 0.859), vec3(1.0, 1.0, 1.0), vec3(0.996, 0.953, 0.753), vec3(0.98, 0.839, 0.722), vec3(0.961, 0.627, 0.592), vec3(0.91, 0.416, 0.451), vec3(0.737, 0.29, 0.608), vec3(0.475, 0.227, 0.502), vec3(0.251, 0.2, 0.325), vec3(0.141, 0.133, 0.204), vec3(0.133, 0.11, 0.102), vec3(0.196, 0.169, 0.157), vec3(0.443, 0.255, 0.231), vec3(0.733, 0.459, 0.278), vec3(0.859, 0.643, 0.388), vec3(0.957, 0.824, 0.612), vec3(0.855, 0.878, 0.918), vec3(0.702, 0.725, 0.82), vec3(0.545, 0.576, 0.686), vec3(0.427, 0.459, 0.553), vec3(0.29, 0.329, 0.384), vec3(0.2, 0.224, 0.255), vec3(0.259, 0.141, 0.2), vec3(0.357, 0.192, 0.22), vec3(0.557, 0.322, 0.322), vec3(0.729, 0.459, 0.416), vec3(0.914, 0.71, 0.639), vec3(0.89, 0.902, 1.0), vec3(0.725, 0.749, 0.984), vec3(0.518, 0.608, 0.894), vec3(0.345, 0.553, 0.745), vec3(0.278, 0.49, 0.522), vec3(0.137, 0.404, 0.306), vec3(0.196, 0.518, 0.392), vec3(0.365, 0.686, 0.553), vec3(0.573, 0.863, 0.729), vec3(0.804, 0.969, 0.886), vec3(0.894, 0.824, 0.667), vec3(0.78, 0.69, 0.545), vec3(0.627, 0.525, 0.384), vec3(0.475, 0.404, 0.333), vec3(0.353, 0.306, 0.267), vec3(0.259, 0.224, 0.204));\n// aap splendor128\nvec3 palette[] = vec3[] (vec3(0.0196, 0.0157, 0.0118), vec3(0.0549, 0.0471, 0.0471), vec3(0.1765, 0.1059, 0.1176), vec3(0.3804, 0.1529, 0.1294), vec3(0.7255, 0.2706, 0.1137), vec3(0.9451, 0.3922, 0.1216), vec3(0.9882, 0.6471, 0.4392), vec3(1.0, 0.8784, 0.7176), vec3(1.0, 1.0, 1.0), vec3(1.0, 0.9412, 0.5373), vec3(0.9725, 0.7725, 0.2275), vec3(0.9098, 0.5412, 0.2118), vec3(0.6902, 0.3569, 0.1725), vec3(0.4039, 0.2235, 0.1922), vec3(0.1529, 0.1216, 0.1059), vec3(0.298, 0.2392, 0.1804), vec3(0.5216, 0.3725, 0.2235), vec3(0.8275, 0.5922, 0.2549), vec3(0.9725, 0.9647, 0.2667), vec3(0.8353, 0.8627, 0.1137), vec3(0.6784, 0.7216, 0.2039), vec3(0.498, 0.5569, 0.2667), vec3(0.3451, 0.3882, 0.2078), vec3(0.2, 0.2353, 0.1412), vec3(0.0941, 0.1098, 0.098), vec3(0.1608, 0.2471, 0.1294), vec3(0.2784, 0.4471, 0.2196), vec3(0.3804, 0.6471, 0.2471), vec3(0.5608, 0.8157, 0.1961), vec3(0.7686, 0.9451, 0.1608), vec3(0.8157, 1.0, 0.9176), vec3(0.5922, 0.9294, 0.7922), vec3(0.349, 0.8118, 0.5765), vec3(0.2588, 0.6431, 0.349), vec3(0.2392, 0.4353, 0.2627), vec3(0.1529, 0.2549, 0.1765), vec3(0.0784, 0.0706, 0.1137), vec3(0.1059, 0.1412, 0.2784), vec3(0.1686, 0.3059, 0.5843), vec3(0.1529, 0.5373, 0.8039), vec3(0.2588, 0.749, 0.9098), vec3(0.451, 0.9373, 0.9098), vec3(0.9451, 0.949, 1.0), vec3(0.7882, 0.8314, 0.9922), vec3(0.5412, 0.6314, 0.9647), vec3(0.2706, 0.4471, 0.8902), vec3(0.2863, 0.2549, 0.5098), vec3(0.4706, 0.3922, 0.7765), vec3(0.6118, 0.5451, 0.8588), vec3(0.8078, 0.6667, 0.9294), vec3(0.9804, 0.8392, 1.0), vec3(0.9333, 0.7098, 0.6118), vec3(0.8314, 0.502, 0.7333), vec3(0.5647, 0.3216, 0.7373), vec3(0.0902, 0.0824, 0.0863), vec3(0.2157, 0.2, 0.2039), vec3(0.4118, 0.3569, 0.349), vec3(0.698, 0.5451, 0.4706), vec3(0.8863, 0.698, 0.4941), vec3(0.9647, 0.8471, 0.5882), vec3(0.9882, 0.9686, 0.7451), vec3(0.9255, 0.9216, 0.9059), vec3(0.7961, 0.7765, 0.7569), vec3(0.651, 0.6196, 0.6039), vec3(0.502, 0.4824, 0.4784), vec3(0.349, 0.3412, 0.3412), vec3(0.1961, 0.1961, 0.1961), vec3(0.3098, 0.2039, 0.1843), vec3(0.549, 0.3569, 0.2431), vec3(0.7765, 0.5216, 0.3373), vec3(0.8392, 0.6588, 0.3176), vec3(0.7059, 0.4588, 0.2196), vec3(0.4471, 0.2941, 0.1725), vec3(0.2706, 0.1647, 0.1059), vec3(0.3804, 0.4078, 0.2275), vec3(0.5765, 0.5804, 0.2745), vec3(0.7765, 0.7216, 0.3451), vec3(0.9373, 0.8667, 0.5686), vec3(0.7098, 0.9059, 0.7961), vec3(0.5255, 0.7765, 0.6039), vec3(0.3647, 0.6078, 0.4745), vec3(0.2824, 0.4078, 0.349), vec3(0.1725, 0.2314, 0.2235), vec3(0.0902, 0.0941, 0.098), vec3(0.1725, 0.2039, 0.2196), vec3(0.2745, 0.3294, 0.3373), vec3(0.3922, 0.5294, 0.549), vec3(0.5412, 0.7686, 0.7647), vec3(0.6863, 0.9137, 0.8745), vec3(0.8627, 0.9176, 0.9333), vec3(0.7216, 0.8, 0.8471), vec3(0.5333, 0.6392, 0.7373), vec3(0.3686, 0.4431, 0.5569), vec3(0.2824, 0.3216, 0.3843), vec3(0.1569, 0.1725, 0.2353), vec3(0.2745, 0.2784, 0.3843), vec3(0.4118, 0.4, 0.5098), vec3(0.6039, 0.5922, 0.7255), vec3(0.7725, 0.7804, 0.8667), vec3(0.902, 0.9059, 0.9412), vec3(0.9333, 0.902, 0.9176), vec3(0.8902, 0.8039, 0.8745), vec3(0.749, 0.6471, 0.7882), vec3(0.5294, 0.451, 0.5608), vec3(0.3373, 0.3098, 0.3569), vec3(0.1961, 0.1843, 0.2078), vec3(0.2118, 0.1569, 0.1686), vec3(0.3961, 0.2863, 0.3373), vec3(0.5882, 0.4078, 0.5333), vec3(0.7529, 0.5647, 0.6627), vec3(0.8314, 0.7216, 0.7216), vec3(0.9176, 0.8784, 0.8667), vec3(0.9451, 0.9216, 0.8588), vec3(0.8667, 0.8078, 0.749), vec3(0.7412, 0.6431, 0.6), vec3(0.5333, 0.4314, 0.4157), vec3(0.349, 0.302, 0.302), vec3(0.2, 0.1529, 0.1647), vec3(0.698, 0.5804, 0.4627), vec3(0.8824, 0.749, 0.5373), vec3(0.9725, 0.8902, 0.5961), vec3(1.0, 0.9137, 0.8902), vec3(0.9922, 0.7882, 0.7882), vec3(0.9647, 0.6353, 0.6588), vec3(0.8863, 0.4471, 0.5216), vec3(0.698, 0.3216, 0.4), vec3(0.3922, 0.2118, 0.2941), vec3(0.1647, 0.1176, 0.1373));\nconst int paletteCount = 128;\nconst float ditherStrength = 0.1;\nvec3 paletteSnap(vec3 color, vec2 coord){\n    float dith = texelFetch(iChannel1, ivec2(coord),0).x * ditherStrength - (ditherStrength*0.5);\n    float dist = 999.;\n    vec3 chosenColor = vec3(0.,0.,0.);\n    for(int c = 0; c < paletteCount; c++){\n        if(distance(palette[c],color)+dith < dist){\n            dist = distance(palette[c],color);\n            chosenColor = palette[c];\n        }\n    }\n    return chosenColor;\n}\nfloat maxComp(vec3 v) {return max(max(v.r,v.g),v.b);}\nvec3 antialias(vec2 uv,vec2 delta)\n{\n    float diff = 0.0;\n    float center = maxComp(texture(iChannel0,uv).rgb);\n    vec3 average = vec3(0);//texture(iChannel0,uv).rgb;\n    diff += maxComp(texture(iChannel0,uv+vec2(delta.x,0)).rgb) - center; average += texture(iChannel0,uv+vec2(delta.x,0)).rgb;\n    diff += maxComp(texture(iChannel0,uv+vec2(-delta.x,0)).rgb) - center; average += texture(iChannel0,uv+vec2(-delta.x,0)).rgb;\n    diff += maxComp(texture(iChannel0,uv+vec2(0,delta.y)).rgb) - center; average += texture(iChannel0,uv+vec2(0,delta.y)).rgb;\n    diff += maxComp(texture(iChannel0,uv+vec2(0,-delta.y)).rgb) - center; average += texture(iChannel0,uv+vec2(0,-delta.y)).rgb;\n    return diff > 0.75 ? average / 3.0 : texture(iChannel0,uv).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 aa = antialias(uv,vec2(iResolution.x / pixelWidth) / iResolution.xy);\n    vec3 posterized = paletteSnap(aa,fragCoord/pixelWidth);\n    fragColor = vec4(posterized,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int MAX_MARCHING_STEPS = 511;\nconst float MIN_DIST = 0.1;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\nconst vec3 LIGHT = normalize(vec3(0.8,1.,0.));\nconst vec3 ambientColor = vec3(.05,.06,.1);\nconst float LIGHTINTENSITY = 1.;\n\nstruct material{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n};\nstruct ball{\n    vec3 p;\n    float r;\n    material m;\n};\nball balls[] = ball[](\nball(vec3(0.,0.,0.),1.,material(vec3(1.,1.,1.),vec3(1.,1.,1.),1.)),\nball(vec3(0.2,1.,1.),1.,material(vec3(1.,0.,0.),vec3(1.,1.,1.),1.)),\nball(vec3(1.,-1.,0.),1.,material(vec3(0.,1.,0.),vec3(1.,1.,1.),1.)),\nball(vec3(-0.5,0.5,-1.),1.,material(vec3(0.,0.,1.),vec3(1.,1.,1.),1.))\n);\nint ballCount = 4;\n\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\nfloat hash14(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.x + p4.y) * (p4.z + p4.w));\n}\n\nfloat box(vec3 p, vec3 c, vec3 s){\n    vec3 d = abs(c - p) - s;\n    return min(max(d.x, max(d.y,d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat ballSDF(vec3 p, ball b){\n    return length(b.p-p) - b.r;\n}\n\nfloat sceneSDF(vec3 p){\n    float dist = 512.;\n    for (int i=0; i<ballCount; i++){\n        dist = smin(dist,ballSDF(p,balls[i]),0.5);\n    }\n    return dist;\n}\nmaterial sceneMat(vec3 p){\n    float dist = 512.;\n    material mat;\n    for (int i=0; i<ballCount; i++){\n        if (ballSDF(p,balls[i]) < dist){\n            dist = ballSDF(p,balls[i]);\n            mat = balls[i].m;\n        }\n    }\n    return mat;\n}\nvec4 sceneColor(vec3 p){\n    return vec4(1.,1.,1.,1.);\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\nvec3 shading(vec3 normal, material mat,vec3 dir,vec2 coord){\n    float occ = 0.5 + 0.5 * normal.y;\n    float amb = clamp(0.5 + 0.5 * normal.y, 0.0, 1.0);\n    float dif = clamp(dot(LIGHT, normal), 0.0, 1.0);\n    vec3 ref = reflect(dir,normal);\n    float spe = pow(clamp(dot(ref, normal), 0.0, 1.0), 16.0);\n    vec3 color = amb * ambientColor * occ;\n    color += dif * mat.diffColor * occ;\n    color += dif * spe * mat.specColor * occ;\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pxSize = iResolution.x / pixelWidth;\n    vec2 pixelPos = floor(fragCoord / pxSize);\n    vec2 screenPos = pixelPos * pxSize;\n\tvec3 viewDir = rayDirection(45.0, iResolution.xy, screenPos);\n    vec2 mousepos = (iMouse.xy / iResolution.xy) * 8.;\n    float rotationPos = mousepos.x;\n    vec3 eye = vec3(12.*sin(-rotationPos), 5, 12.*cos(-rotationPos));\n    vec3 focus = vec3(0.,0.,0.);\n    mat4 viewToWorld = viewMatrix(eye, focus, vec3(0.0, 1.0, 0.0));\n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n    float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    bool hit = true;\n    if (dist > MAX_DIST - EPSILON) {\n        hit = false;\n    }\n     if(hit){\n        \n        vec3 pos = eye + worldDir * dist;\n        vec3 normal = estimateNormal(pos);\n        material mat = sceneMat(pos);\n        vec3 sampleColor = shading(normal,mat,worldDir,pixelPos);\n        //vec3 snappedColor = paletteSnap(sampleColor,pixelPos);\n        fragColor = vec4(sampleColor,1.0);\n    }   \n    else{\n        fragColor = vec4(0., 0., .0, 1.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float pixelWidth = 128.;","name":"Common","description":"","type":"common"}]}