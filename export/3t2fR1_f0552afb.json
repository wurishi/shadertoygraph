{"ver":"0.1","info":{"id":"3t2fR1","date":"1598336122","viewed":207,"name":"De Jong Map","username":"scanlime","description":"This is basically the worst algorithm to implement in a shader. Brute force IFS thing, using the Peter de Jong map. For a much faster version of this that runs of the CPU check out the old \"Fyre\" program this was inspired by.","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["2d","ifs","iterative","slow","chaoticmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 samp = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragColor = vec4(1.);\n    fragColor.xyz -= vec3(20. * samp.z / samp.w);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int ITERS_PER_FRAME = 1000;\n\nvec2 ifs(vec2 p)\n{\n\tconst float A = 2.38767;\n\tconst float B = -1.22713;\n\tconst float C = -0.39595;\n\tconst float D = -4.67104;\n\n    return vec2(\n    \tsin(A * p.y) - cos(B * p.x),\n        sin(C * p.x) - cos(D * p.y));\n}\n\nvec2 noise(vec2 c)\n{\n    return mod(sin(c * mat2(3., 100., 4., 102.)) * 1e6, 1.);\n}\n\nvoid mainImage( out vec4 O, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = uv - vec2(.5);\n\tp.x *= iResolution.x / iResolution.y;\n  \tp.y *= -1.;\n    p *= 4.;\n\n    float pt = 10./max(iResolution.x,iResolution.y);\n    O = iFrame == 0 ? vec4(noise(fragCoord),0.,0.) : texelFetch(iChannel0, ivec2(fragCoord), 0);\n    O.w += 1.;\n    for (int i = 0; i < ITERS_PER_FRAME; i++) {\n\t\tO.z += 1. - smoothstep(0., pt, length(O.xy - p));\n        O.xy = ifs(O.xy);\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"}]}