{"ver":"0.1","info":{"id":"md2Szc","date":"1670673795","viewed":103,"name":"画一个圆","username":"lambwww","description":"画一个圆形，参考了网上的教程","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//返回结果判断屏幕坐标是否在圆内\nfloat circle(vec2 uv, float radius, vec2 center)\n{\n    //length函数用于计算向量的长度，传入参数为向量\n    //这里用于获得两点之间的距离\n    float lenth = length(center - uv);\n    if(lenth<=radius)\n        return 1.;\n    return 0.;\n}\n//fragCoord是屏幕输入的位置坐标\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //iResolution代表屏幕的分辨率\n    //将uv坐标normalize在0到1中\n    vec2 uv = fragCoord/iResolution.xy;\n    //先平移再缩放\n    //先把立方体中心平移到原点\n    uv -= 0.5;\n    //在缩放操作之前，由于把xy都映射到0，1中间，单位长度x轴的像素数量多于y，单位像素的x长度值小于y值\n    //所以通过对x轴进行拉伸，使得x、y的像素长宽值相等\n    //也就是把uv的x坐标放大了，使得uv的xy也有和屏幕分辨率一样的比例\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float col = circle(uv, 0.1, vec2(-0.5*iResolution.x/iResolution.y, -0.5));\n    // Output to screen\n    fragColor = vec4(col, 0, 0, 1.0);\n}","name":"Image","description":"","type":"image"}]}