{"ver":"0.1","info":{"id":"Dtf3Rj","date":"1672025786","viewed":142,"name":"5 Star Carpet Ride","username":"Dirk","description":"mouse camera controls\nFive Start fractal used for terrain and carpet texture.","likes":15,"published":1,"flags":64,"usePreview":0,"tags":["fractal","terrain","carpet","carpet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ltjSzd","filepath":"https://soundcloud.com/ryan-yuen-14509974/i-can-show-you-the-world?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/ryan-yuen-14509974/i-can-show-you-the-world?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2   // make this 2 or 3 for antialiasing\n#endif\n\n\n// TEXTURES //\n\nF ha(F h) {\n\tR K(sin(h) * 43758.5453123);\n}\n\nF noise(v3 x) {\n\tv3 p = E(x);\n\tv3 f = K(x);\n\tf = f * f * (3.0 - 2.0 * f);\n\tF n = p.x + p.y * 157.0 + 113.0 * p.z;\n\tR Y(Y(Y(ha(n + 0.0), ha(n + 1.0), f.x),\n          Y(ha(n + 157.0), ha(n + 158.0), f.x), f.y),\n      Y(Y(ha(n + 113.0), ha(n + 114.0), f.x),\n          Y(ha(n + 270.0), ha(n + 271.0), f.x), f.y), f.z);\n}\n\nF fbm(v3 p, F s ) {\n\n    p /= s;\n\n\tF f = 0.0;\n\tf = 0.4567 * noise(p);\n\tp *= 2.01;\n\tf += 0.2732 * noise(p);\n\tp *= 2.02;\n\tf += 0.1340 * noise(p);\n\n\tR f;\n}\n\nF worly( v3 p, F s ){\n    R fbm( v3(fbm(p,s) ),s );\n}\n\n\nv2 triWave(v2 a,F scale, v3 kernal){\n    R abs(K((a+kernal.xy)*scale)-.5);\n}\n\nv3 fsf( vec3 kernal, vec2 uv ){\n\n    v3 col = vec3(0.);\n\n    F scale = kernal.z;\n    v2 t2 = v2(0.);\n    v2 t3 = v2(0.);   \n    for(I k = 0; k < 9; k++){\n        uv -= (t2.yx)*scale;\n        t3 = triWave(-uv,scale,kernal);\n        v2 temp = t2;\n        t2 = triWave(-uv.yx-.5,scale,kernal);\n        uv.yx = (t3-t2);\n        t2 /= (temp-.75);\n        col.x = 1.-abs(uv.x+uv.y+col.x);\n        col = col.yzx;\n        uv /= scale;\n    }\n\n    R col;\n\n}\n\n\n// RENDER ENGINE //\n\nv2 map( v3 p, F t ){ \n\n    F mate = -1.0;\n    F d = carpet(p*2.0,iTime)/2.0;\n    \n    v3 wp = p;\n    wp.xz /= 20.0;\n    wp.x += iT*0.05;\n    F noi = fbm(wp,1.0);\n    F w = fsf( vec3(0.9,0.32,0.5), wp.xz ).x;\n      //w = SS(noi,1.-noi*0.5,w);\n    F d2 = p.y+2.0+w*1.5;\n    d2*20.0;\n    if(d<d2) mate = 1.0;\n    d = min( d, d2/4.0 );\n    \n    \n    R v2(d,mate);\n}\n\nF aoMap( v3 p ){ \n    R min( p.y+1.0, map(p,0.0).x );\n}\n\nv3 calcNormal( v3 p ){\n\n    v2 e = v2(0.001,0.0);\n    F t = 0.0;\n    F f = map(p,t).x;\n    R N( v3( map( p + e.xyy,t ).x - f,\n             map( p + e.yxy,t ).x - f,\n             map( p + e.yyx,t ).x - f));\n}\n\nv2 castRay( v3 ro, v3 rd ){\n\n    F r = 0.0;\n    F m;\n    \n    for( I i=0; i<100; i++ ){\n    \n        v3 p = ro+rd*r;\n        v2 d = map(p,r);\n        m = d.y;\n        \n        if( abs(d.x) < 0.001 ) B;\n        r += d.x;\n        if( r > 40.0 ) B;\n    }\n    \n    if( r > 40.0 ) r=-1.0;\n    \n    R v2( r, m );\n}\n\n\nF castShadow( v3 ro, v3 rd ){\n    \n    F res = 1.0, t = 0.0;\n    \n    for( I i=0; i<60; i++ ){\n        F h = map(ro + t*rd,t).x;\n        res = min( res, 32.0*h/t );\n        t += h;\n    }\n    \n    R res;\n}\n\n\nF ao( v3 p, v3 n ){\n\n    F occ = 0.0;\n    F sca = 1.0;\n    \n    for( I i=0; i<20; i++ ){\n    \n        F h = 0.08 + 0.5*F(i)/7.0;\n        F d = map( p + h*n, 0.0 ).x;\n        occ += max(h-d,0.0)*sca;\n        sca *= 0.86;\n        \n    }\n    \n    R C( 1.5 - occ*0.5, 0.0, 1.0 );\n    \n}\n\nv3 cp( F d ){\n    \n    F ax = -PI*.75+PI*0.5*iMouse.x/iResolution.x;\n    F ay = 2.0*iMouse.y/iResolution.y;\n    R v3(d*sin(ax),d*sin(ay), d*cos(ax));\n\n}\n\nv3 cd( v2 p, v3 ro, v3 ta ){\n    \n    v3 ww = N( ta- ro );\n    v3 uu = N( X(ww,v3(0,1,0)));\n    v3 vv = N( X(uu,ww) );\n    \n    R N( p.x*uu + p.y*vv + 1.5*ww );\n\n}\n\nV A( out vec4 pixar, in vec2 pixel )\n{\n    v2  uv = (2.0*pixel-iR.xy)/iR.y;\n    \n    v3 ta = v3(0.0,0.5,0.0);\n    F d = 3.0;\n    \n    v3 ro = cp(d);\n    v3 rd = cd(uv,ro,ta);\n    \n    v2 r  = castRay(ro,rd);\n    \n    v3 col = v3(0.2);\n    \n        \n    v3  pos = ro+rd*r.x;\n    v3  nor = calcNormal(pos);\n    v3  wp  = pos;\n    wp.x += iT*0.05;\n    F   noi = fbm(wp, 1.0);\n\n    v3  mate = v3( 0.4,0.2,0.1 );\n    \n    if( r.x > 0.0 ){\n        \n        if( r.y < 0.0 ){\n            mate = mix( mate, v3( 0.9*wp.y+2.9 ),0.5 );\n            mate *= v3( 0.9,0.7,0.3 );\n            mate *= nor.y;\n        }\n        \n        if( r.y > 0.0 ){\n            mate = fsf( vec3(0.5*fsf(vec3(0.3,0.5,0.7),pos.xz*3.3).x,0.05,0.5+0.1), pos.xz );\n            mate = vec3(0.8,0.2,0.1)*mate.xxx*mate.yyy*2.2;\n            mate.x += (1.0-mate.z)*0.8;\n        }\n        \n        v3  dir = N( v3(5.0*sin(iTime*0.1),6.0,5.0*cos(iTime*0.1) ) );\n        F dif = C(D(nor,dir),0.0,1.0);\n        F sky = C( 0.5 + 0.5*D(nor,v3(0.0,1.0,0.0)),0.0,1.0);\n        F bou = C( 0.5 + 0.5*D(nor,v3(0.0,-1.0,0.0)),0.0,1.0);\n        F sha = 0.5 + 0.5*S(castRay(pos+nor*0.001,dir).x,0.0);\n        F occ = ao( pos, nor );\n        \n        col += mate*dif*sha;\n        col += mate*sky*v3(0.1,0.3,0.5);\n        col += mate*bou*v3(0.5,0.4,0.1);\n        col += col*mix(dif,occ,0.005);\n    }\n    \n    if( r.x < 0.0 ){\n        col = v3(0.1,0.4,0.8)-fsf(pos,uv)*rd.x;\n        col = vec3(0.3,0.4,0.8) - 0.7*rd.x;\t\t\t\t//Sky Color\n        col = mix( col,vec3(0.8,0.8,0.7)/fsf(rd,uv), exp(-10.0*fsf(rd*1.0,uv)));\t\t//Sky Color 2 + Gradient Mixture\n    }\n    \n\n    pixar = v4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n\n    //////////////////////////////\n    //                          //\n    //  DIRK'S DENSOR NOTATION  //\n    //                          //\n    //////////////////////////////\n\n\n#define  v2 vec2\n#define  v3 vec3\n#define  v4 vec4\n\n#define  m2 mat2\n#define  m3 mat3\n\n#define  iR iResolution\n#define  iM iMouse\n#define  iT iTime\n\n#define  PI 3.14159265359\n\n#define  A  mainImage\n#define  B  break\n#define  C  clamp\n#define  D  dot\n#define  E  floor\n#define  F  float\n#define  G\n#define  H\n#define  I  int\n#define  J\n#define  K  fract\n#define  L  length\n#define  M  mix\n#define  N  normalize\n#define  O\n#define  P  pow\n#define  Q\n#define  R  return\n#define  S  step\n#define  SS smoothstep\n#define  T  texture\n#define  U\n#define  V  void\n#define  W  mirror\n#define  X  cross\n#define  Y  mix\n#define  Z  reflect\n\n\n\n\n//MODELING FUNCTIONS\n\nF smin( F a, F b, F k ) {\n    F h = C( 0.5+0.5*(b-a)/k, 0., 1. );\n    R mix( b, a, h ) - k*h*(1.0-h);\n}\n\n//SDF MODELS\n\nF ball( v3 p, F r ){ R L(p) - r; }\n\nF box( v3 p, v3 b, F r )\n{\n  v3 q = abs(p) - b;\n  R L(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nF pill( v3 p, v3 a, v3 b, F r){\n\n    v3 ab = b-a;\n    v3 ap = p-a;\n    F t = D(ab, ap) / D(ab,ab);\n    t = C(t,0.0,1.0);\n    v3 c=a+t*ab;\n    \n    R L(p-c)-r;\n}\n\nF superPill( v3 p, v3 a, v3 b, F r1, F r2, F s1, F s2, F d )\n{\n\tv3 pa = p-a, ba = b-a;\n    F t = D(pa,ba)/D(ba,ba);\n\tF h = C( t, 0.0, 1.0 );\n\td = smin(d, L( pa - ba*h ) - mix(r1, r2, SS(0.,1.,h)), mix(s1, s2, h))*.98;\n    \n    R d;\n}\n\nF egg( in v3 p, in v3 r )\n{\n    F k0 = L(p/r);\n    F k1 = L(p/(r*r));\n    R k0*(k0-1.0)/k1;\n}\n\nF pillar( v3 p, v2 h )\n{\n    v2 d = abs(v2(L(p.xz),p.y)) - h;\n    R min(max(d.x,d.y),0.0) + L(max(d,0.0));\n}\n\nF pyramid( in v3 p, in F h )\n{\n    F mp = h*h + 0.25;\n    p.xz = abs(p.xz);\n    p.xz = (p.z>p.x) ? p.zx : p.xz;\n    p.xz -= 0.5;\n    v3 q = v3( p.z, h*p.y - 0.5*p.x, h*p.x + 0.5*p.y);\n    F s = max(-q.x,0.0);\n    F t = C( (q.y-0.5*p.z)/(mp+0.25), 0.0, 1.0 );\n    F a = mp*(q.x+s)*(q.x+s) + q.y*q.y;\n\tF b = mp*(q.x+0.5*t)*(q.x+0.5*t) + (q.y-mp*t)*(q.y-mp*t);\n    F d2 = min(q.y,-q.x*mp-q.y*0.5) > 0.0 ? 0.0 : min(a,b);\n    \n    R sqrt( (d2+q.z*q.z)/mp ) * sign(max(q.z,-p.y));;\n}\n\nfloat carpet( vec3 p, float t )\n{\n    t *= 3.0;\n    p.y += 0.05*sin((p.x+t+cos(t*0.1))*2.0);\n    p.y += 0.05*cos(p.z+t)*4.0;\n    F d = box(p, v3(2.0,0.01,1.3),0.01);\n    R d;\n}\n\n\n","name":"Common","description":"","type":"common"}]}