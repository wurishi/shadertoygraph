{"ver":"0.1","info":{"id":"DtSczc","date":"1692071718","viewed":51,"name":"Diagonal line utility functions","username":"Tara","description":"Simple helper functions for rendering diagonal lines, for visualization purposes.\nExample usage: Highlight pixels with clipped luminance using a red stripe overlay.\nThe point of this code is to be fast and simple to use. Just copy the code from \"Common\".","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["visualization","lines","diagonal","mode","view"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = get_diagonal_line_color(fragCoord,\n                                        vec4(1.0, 0.5, 0.5, 1.0),\n                                        vec4(0.0, 1.0, 0.5, 0.0),\n                                        1.0, 16.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// \"_pixel_coordinate\" ideally gl_FragCoord.xy.\n// \"_hardness\": A value between 0.0 and 1.0.\n// \"_thickness\": Line thickness in pixels.\n//\n// Returns an alpha value between 0.0 and 1.0.\nfloat get_diagonal_line_alpha(vec2 _pixel_coordinate,\n                             float _hardness,\n                             float _thickness)\n{\n    float edge0 = 0.249 * _hardness;\n    float edge1 = 0.5 - edge0;\n    \n    float x = _pixel_coordinate.y - _pixel_coordinate.x;\n    x = fract(x * 0.5 / _thickness);\n    x = abs(x - 0.5);\n    \n    return(smoothstep(edge0, edge1, x));\n}\n\n// \"_pixel_coordinate\" ideally gl_FragCoord.xy.\n// \"_color_a\": The color of the first out of the two lines.\n// \"_color_b\": The color of the second out of the two lines.\n// \"_hardness\": A value between 0.0 and 1.0.\n// \"_thickness\": Line thickness in pixels.\n//\n// Returns an interpolated color between \"_color_a\" and \"_color_b\".\nvec4 get_diagonal_line_color(vec2 _pixel_coordinate,\n                             vec4 _color_a,\n                             vec4 _color_b,\n                             float _hardness,\n                             float _thickness)\n{\n    float alpha = get_diagonal_line_alpha(_pixel_coordinate, _hardness, _thickness);\n    return(mix(_color_a, _color_b, alpha));\n}\n\n// \"_pixel_coordinate\" ideally gl_FragCoord.xy.\n// \"_color_a\": The color of the first out of the two lines.\n// \"_color_b\": The color of the second out of the two lines.\n// \"_hardness\": A value between 0.0 and 1.0.\n// \"_thickness\": Line thickness in pixels.\n//\n// Returns an interpolated color between \"_color_a\" and \"_color_b\".\nvec3 get_diagonal_line_color(vec2 _pixel_coordinate,\n                             vec3 _color_a,\n                             vec3 _color_b,\n                             float _hardness,\n                             float _thickness)\n{\n    float alpha = get_diagonal_line_alpha(_pixel_coordinate, _hardness, _thickness);\n    return(mix(_color_a, _color_b, alpha));\n}","name":"Common","description":"","type":"common"}]}