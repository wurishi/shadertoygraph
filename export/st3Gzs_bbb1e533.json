{"ver":"0.1","info":{"id":"st3Gzs","date":"1636564060","viewed":270,"name":"slope blur","username":"xZAKHAMx","description":"I tried to make something like slope blur nodes in substance designer. \n","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["blur","slope"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv1 = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.y -= .05;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 col = vec3(0.);\n    \n    vec4 tex = texture(iChannel0, uv);\n    ivec2 texSize  = ivec2(iResolution.x/1.78, iResolution.y);\n    ivec2 texIndex = ivec2(uv1.xy * vec2(texSize)); \n    vec4 right = texelFetch(iChannel0 , texIndex + ivec2(-1, 0), 0).rrrr;\n    vec4 left  = texelFetch(iChannel0 , texIndex + ivec2(-1, 0), 0).rrrr;\n    vec4 up    = texelFetch(iChannel0 , texIndex + ivec2(0, -1), 0).rrrr;\n    vec4 down  = texelFetch(iChannel0 , texIndex + ivec2(0, 1), 0).rrrr;\n    \n    float scale = (abs(sin(iTime+1.*2.)*2.));\n    float dx = (right.r - left.r) / 2.*scale;\n    float dy = (up.r - down.r) / 2.*scale;\n    \n\n    \n    vec3 grid = vec3(dx, dy, 0.);\n    \n    vec2 newUV = uv + grid.xy;\n    float len = length(newUV);\n    col = vec3(smoothstep(.4, .39, len));\n\n    fragColor = vec4(col, 1.);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float random (in vec2 uv) {\n    return fract(sin(dot(uv.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\nfloat noise (in vec2 uv) {\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    \n    fragColor = vec4(noise(uv*10.));\n}","name":"Buffer A","description":"","type":"buffer"}]}