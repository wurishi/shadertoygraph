{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"const float RAINBOW_SPLINE_SIZE = 6.0;\n\n\n/**\n * Lookup table for rainbox colors. Workaround as GLSL does not support arrays.\n * @param i: Array index; Should be integer.\n * @return The color at the given index.\n */\nvec3 GetRainbowColor(float i){\n\tif(i == 0.0){\n\t\treturn vec3(1.0, 0.0, 0.0); // Red\n\t}\n    else if(i == 1.0){\n\t\treturn vec3(1.0, 0.5, 0.0); // Orange\n\t}\n\telse if(i == 2.0){\n\t\treturn vec3(1.0, 1.0, 0.0); // Yellow\n\t}\n\telse if(i == 3.0){\n\t\treturn vec3(0.0, 1.0, 0.0); // Green\t\n    }\n\telse if(i == 4.0){\n\t\treturn vec3(0.0, 0.0, 1.0); // Blue\t\n\t}\n\telse if (i == 5.0){\n        return vec3(0.27, 0.0, 0.51); // Purple\n\t}\n\telse if (i == 6.0){\n\t\treturn vec3(0.57, 0.0, 1.0); // Violet\t\n\t}\n\n\treturn vec3(1.0, 1.0, 1.0); // should never get here.\n}\n\n/**\n * Perform Catmull-Rom spline interpolation between support points v1 and v2.\n * @param x: Interpolation factor between v1 and v2; Range[0.0,1.0]\n * @param v0: left most control point.\n * @param v1: left support point.\n * @param v2: right support point.\n * @param v3: right most control point.\n * @return The interpolated value.\n */\nvec3 CatmullRomSpline(float x, vec3 v0, vec3 v1, vec3 v2, vec3 v3) \n{\n    // Note: this spline will go through it's support points.\n\tvec3 c2 = -.5 * v0\t\t\t\t+ 0.5 *v2;\n\tvec3 c3 = \t\tv0\t+ -2.5*v1 \t+ 2.0 *v2 + -.5*v3;\n\tvec3 c4 = -.5 * v0\t+ 1.5 *v1 \t+ -1.5*v2 + 0.5*v3;\n\treturn(((c4 * x + c3) * x + c2) * x + v1);\n}\n\n/**\n * Evaluates the rainbox texture in UV-space using a Catmull-Rom spline.\n */\nvec3 EvaluateRainbowSpline(float x){\n    // x must be in range [0.0,1.0]\n    float scaledX = clamp(x, 0.0, 1.0) * RAINBOW_SPLINE_SIZE;\n    \n    // Determine which 'rainbox segment' we are evluating:\n    float segmentIndex = floor(scaledX);\n    \n    // Note that you evaluate between v1 and v2, using v0 and v3 as control points:\n    vec3 v0 = GetRainbowColor(segmentIndex-1.0);\n    vec3 v1 = GetRainbowColor(segmentIndex+0.0);\n    vec3 v2 = GetRainbowColor(segmentIndex+1.0);\n    vec3 v3 = GetRainbowColor(segmentIndex+2.0);\n    \n    return CatmullRomSpline(fract(scaledX), v0,v1,v2,v3);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy; // in range [0.0,1.0]\n\n    fragColor = vec4(EvaluateRainbowSpline(uv.x),1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdBXzG","date":"1414524755","viewed":503,"name":"Rainbow spline","username":"xilconic","description":"Simple shader using catmull-rom to display a rainbow pattern.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["spline","catmullrom"],"hasliked":0,"parentid":"","parentname":""}}