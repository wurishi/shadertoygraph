{"ver":"0.1","info":{"id":"7dS3DR","date":"1617795867","viewed":57,"name":"Ray Practiceeeee","username":"delirious_blanc","description":"ray practice with box frame","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ray"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 128\n#define MAX_DIST 120.\n#define SURF_DIST .01\n#define time iTime/6.\n\n//from IQ\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdCapsule (vec3 p, vec3 a, vec3 b, float r) {\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    return length(p - c)-r;\n}\n\nfloat sdTorus (vec3 p, vec2 r) {\n    float x = length(p.xz) - r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat dBox(vec3 p, vec3 s) {\n    return length(max(abs(p)-s, 0.));\n}\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p)-s;\n}\n\nfloat sdBoundingBox( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat sMin( float a, float b, float k) {\n    float h = clamp(.5 + .5 *(b-a)/k, 0., 1.);\n    return mix(b, a, h) - k*h*(1. - h);\n}\n\nfloat sineCrazy(vec3 p){\n    return 1. - abs((sin(p.x)+sin(p.y)+sin(p.z)))/4.;\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat GetDist(vec3 p){\n    float scale = 5. + 10. * sin(time *0.5);\n    \n    float planeDist = p.y; //0\n    \n    //Cylinders\n    vec3 cdp = p + vec3(0.5, 0., 0.);\n    cdp.x = abs(cdp.x) - 2.;\n    \n    cdp.xz *= Rot(cdp.x*.5 + iTime*.5);\n    \n    float cd = sdCapsule(cdp, vec3(0, 0.,-1.75), vec3(.5, 2.5, 3), .2);\n    float cd2 = sdCapsule(cdp, vec3(2, 0., -1.75), vec3(-.75, 3, 3), .2);\n    \n    //cdp.yz *= Rot(cdp.x*1. + iTime*.5); //rotating cylinders around origin\n    \n    float cd3 = sdCapsule(cdp, vec3(-.2, 2.2, -1.), vec3(-3, 0.2, 3) , .2);\n    float cd4 = sdCapsule(cdp, vec3(-1.5, .7, 0.), vec3(0., 2.2, 2.), .2); \n    \n    \n   cdp.y = abs(cdp.y) - .5;\n    \n    float cdtogether = sMin(cd, cd2, 0.1); //+ sin(iTime*.2);\n    cdtogether = sMin(cdtogether, cd3, .1);\n    cdtogether = sMin(cdtogether, cd4, .1);\n    \n    \n    vec3 sp = p - vec3(-1., 1., 0.);\n    sp.x = abs(sp.x) - 2.5;\n    //sp.xz *= Rot(sp.z * sin(0.2*iTime));\n    \n    float sphere = sdSphere(sp, 1.);\n    //float box = dBox(sp, 1.2)\n    \n    float d = min(cdtogether, sphere);\n    //float d = min(cdtogether, planeDist); //planeDist\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    \n    //if(d<length(lightPos-p)) dif *= .1; //shadow\n    \n    return dif;\n}\n\nvec3 Bg(vec3 rd) {\n\tfloat k = rd.z*.8+.8;\n    //light blue: .2, .5, 1\n    vec3 col = mix(vec3(0.105, 0.815, 0.615), vec3(0.035, 0.525, 0.356), k);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    //vec2 m = iMouse.xy / iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 3.5, -7);\n    ro.z -= sin(iTime);\n    //ro.xz *= Rot(0.2*iTime * sin(.5));\n    \n    //ro.yz *= Rot(-m.y*3.14+1.); //mouse interaction\n    //ro.xz *= Rot(-m.x*6.2831); //mouse interaction\n    \n    vec3 rd = normalize(vec3(uv.x-.1, uv.y-.4, 1));\n\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    //col += Bg(rd);\n    \n        if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        \n        float spec = pow(max(0., r.y), 20.);\n\n    \tfloat dif = dot(n, normalize(vec3(1,2,3)))*.2+1.; //GetLight(p);\n        col = mix(Bg(r), vec3(dif), .25) + spec;\n        col += pal(rd.x, vec3(0., 0.13, 0.89), vec3(0.5,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.301, 0.309, 0.901));\n        //0.901, 0.627, 0.301\n    \t//col = vec3(dif);\n    }\n    \n    //float dif = GetLight(p);\n    //col = vec3(dif);\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}