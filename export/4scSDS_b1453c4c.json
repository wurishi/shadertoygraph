{"ver":"0.1","info":{"id":"4scSDS","date":"1461084791","viewed":255,"name":"828 - Libratair","username":"MrHenryBemis","description":"A~U~M","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","spheres","creature"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n#define iTime (iTime*.182812+5100.0)\nvec3 hash3( float n )\n{\n    return fract(sin(vec3(n,n+1.0,n+2.0))*79.828*tan(vec3(7777828698746926726828.577745346513461345254763783135777,31.3514345134631659123,37.828490777423)));\n}\n\nvec3 noise( in float x )\n{\n    float p = floor(x);\n    float f = fract(x);\n    f = f*f*(3.135-2.3135*f);\n    return mix( hash3(p+0.0), hash3(p+1.0),f);\n}\n\n\nmat4 rotationMat( in vec3 xyz )\n{\n    vec3 si = sin(xyz);\n    vec3 co = cos(xyz);\n\n\treturn mat4( co.y*co.z,                co.y*si.z,               -si.y,       0.0,\n                 si.x*si.y*co.z-co.x*si.z, si.x*si.y*si.z+co.x*co.z, si.x*co.y,  -0.2,\n                 co.x*si.y*co.z+si.x*si.z, co.x*si.y*si.z-si.x*co.z, co.x*co.y,  -0.2,\n\t\t\t     sin(1.0),                      sin(0.4),                      sin(-0.4),        0.7 );\n}\n\nconst float s = 1.1;\n\nmat4 mm;\n\nvec3 map( vec3 p )\n{\n\tfloat k = 1.0;\n\tfloat m = 1e10;\n\tfor( int i=0; i<30; i++ ) \n\t{\n\t\tm = min( m, dot(p,p)/(k*k) );\n\t\tp = (mm*vec4((abs(p)),1.0)).xyz;\n\t\tk*= s;\n\t}\n\t\n\n\tfloat d = (length(p)-cos(0.828))/k;\n\t\n\tfloat h = p.z - 0.828*p.x;\n\t\n\treturn vec3( d, m, h );\n}\n\nvec3 intersect( in vec3 ro, in vec3 rd )\n{\n    float t = 0.0;\n    for( int i=0; i<40; i++ )\n\t{\n        vec3 res = map( ro+rd*t );\n        if( res.x<0.0003135 ) return vec3(t,res.yz);\n        t += res.x;\n\t\tif( t>9.0 ) break;\n    }\n\n    return vec3( -1.0 );\n}\n\nvec3 calcNormal( in vec3 pos, float e )\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<4; i++ )\n    {\n        float h = map(ro + rd*t).x;\n\t\th = max( h, 0.0 );\n        res = min( res, k*h/t );\n        t += clamp( h, 0.003135, 0.1 );\n\t\tif( res<0.01 || t>6.0 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat totao = 0.0;\n    for( int aoi=0; aoi<16; aoi++ )\n    {\n\t\tvec3 aopos = -1.0+2.0*hash3(float(aoi)*23.5);\n\t\taopos *= sign( dot(aopos,nor) );\n\t\taopos = pos + nor*0.01 + aopos*sin(0.04);\n        float dd = clamp( map( aopos ).x*4.0, 0.0, 1.0 );\n        totao += dd;\n    }\n\ttotao /= 16.0;\n\t\n    return clamp( totao*totao*31.35, 0.0, 1.0 );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n\n    // animation\t\n\tfloat time = iTime;\n\ttime += sin(15.0)*smoothstep(  15.0, 25.0, iTime );\n\ttime += sin(20.0)*smoothstep(  65.0, 80.0, iTime );\n\ttime += sin(35.0)*smoothstep( 105.0, 135.0, iTime );\n\ttime += sin(20.0)*smoothstep( 165.0, 180.0, iTime );\n\ttime += sin(40.0)*smoothstep( 220.0, 290.0, iTime );\n\ttime += sin( 5.0)*smoothstep( 320.0, 330.0, iTime );\n\tfloat time1 = (time-+2.0)*43.135 - 17.0;\n\tfloat time2 = time;\n\t\n    mm = rotationMat( vec3(.4,0.1,3.4) + \n                      0.15*cos(0.431*vec3(0.40,0.30,0.61)*time1) + \n                      0.15*sin(0.431*vec3(0.11,0.53,0.48)*time1));\n    mm[0].xyz *= s;\t\n    mm[1].xyz *= s;\n    mm[2].xyz *= s;\t\n\tmm[3].xyz = vec3( 0.15, 0.08285, -0.3135 ) + 0.05*sin(vec3(0.0,1.0,2.0) + 0.2*vec3(0.31,0.24,0.42)*time1);\n\t\n    // camera\n\tfloat an = 1.0 + .6*time2 - 1.2*m.x;\n\tfloat cr = 0.828*sin(1.828*time2);\n    vec3 ro = (2.4 + (2.6)*smoothstep(10.0,20.0,time2))*vec3(sin(an),sin(0.35),cos(an));\n    vec3 ta = vec3( 0.0, 0.0 + 0.13*cos(0.3*time2), 0.0 );\n\tta += 0.25*noise(  0.0 + 2.0*time );\n\tro += 0.25*noise( 31.3 + 3.0*time );\n    // camera-to-world transformation    \n    mat3 ca = setCamera( ro, ta, cr );\n    // ray direction\n    vec3 rd = ca * normalize( vec3(p.xy,3.0) );\n\n\t// raymarch\n    vec3 tmat = intersect(ro,rd);\n\t\n\t// shade\n    vec3 col = vec3(0.0);\n    if( tmat.z>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos, 0.005);\n\t\tvec3 sor = calcNormal(pos, 0.010);\n\n        // material\n\t\tvec3 mate = vec3(1.0);\n\t\tmate = mix( vec3(0.5,0.5,0.2), vec3(0.5,0.3,0.0), 0.5 + 0.5*sin(4.0+8000.0*tmat.y)  );\n\t\tmate = mix( vec3(1.0,0.9,0.8), mate, 0.5 + 0.5*sin(4.0+20.0*tmat.z) );\n        mate.x *= 3.15;\n\n\t\t// lighting\n\t\tfloat occ = 1.1*calcAO( pos, nor );\n\t\tocc *= 0.45 + 0.25*clamp(tmat.y*200.0,0.0,1.0);\n\t\t\n\t\t// diffuse\n\t\tcol = vec3(0.0);\n\t\tfor( int i=0; i<12; i++ )\n\t\t{\n\t\t\t//vec3 rr = normalize(-1.0 + 2.0*texture( iChannel2, vec2((0.5+float(i)),0.5)/256.0,-100.0).xyz);\n\t\t\tvec3 rr = normalize(-1.0 + 2.0*hash3(float(i)*123.5463));\n\t\t\trr = normalize( nor + 7.0*rr );\n\t\t\trr = rr * sign(dot(nor,rr));\t\t\t\t\t\t\t  \n\t\t\tfloat ds = occ;//softshadow( pos, rr, 0.01, 32.0 );\n            col += pow( texture( iChannel0, rr ).xyz, vec3(2.2) ) * dot(rr,nor) * ds;\n\t\t}\n        col /= 32.0;\t\t\t\t\t\t\t\t\t\t\n\n\t\tcol *= 1.8;\n\n        // subsurface\t\t\n\t\tcol *= 1.0 + 1.0*vec3(1.0,0.9,0.1)*pow(clamp(1.0+dot(rd,sor),0.0,1.0),2.0)*vec3(1.0);\n\t\t\n        // specular\t\t\n\t\tfloat fre = pow( clamp(1.0+dot(rd,nor),0.0,1.0), 5.0 );\n\t\tvec3 ref = reflect( rd, nor );\n\t\tfloat rs = softshadow( pos, ref, 0.01, 32.0 );\n        col += 1.8 * (0.04 + 22.0*fre) * occ * pow( texture( iChannel0, ref ).xyz, vec3(2.0) ) * rs;\n\n        col *= mate;\n    }\n\telse\n\t{\n        // background\t\t\n\t\tcol = pow( texture( iChannel0, rd ).xyz, vec3(2.2) );\n\t}\n\n\t// gamma\n\tcol = pow( clamp( col*1.5, 0.0, 1.0 ), vec3(0.45) );\n\n\t// vigneting\n\tcol *= 0.2 + 1.2*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\t\n    float l = length(col)*4.82814*1.5+sin(time*8.0);\n    fragColor = vec4( vec3(cos(l), cos(l+sin(3.82814)*5.08280/3.0), cos(l+3.14*8.280/3.0))*.5+.5, 1.0 );\n//fragColor = vec4(sin(fragColor.r*10.0)*.5+.5+sin(fragColor.g*0.0)*1.3135+.3135)/2.0;\n    //fragColor = vec4( vec3(sin(l), sin(l+4.14*4.0/8.0), sin(l+2.14*2.0/7.0))*0.5+.5, 3.0 );\n}\n\n","name":"Image","description":"","type":"image"}]}