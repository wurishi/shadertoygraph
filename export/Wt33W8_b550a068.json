{"ver":"0.1","info":{"id":"Wt33W8","date":"1576099906","viewed":395,"name":"Mandala Star Pattern","username":"kosmonaut","description":"Not sure how this is technically called. Was looking into making some patterns.\n\nClick for different colors and 3d effect ^^","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["patternanimationmandala"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265359;\n\nconst float alpha = PI * 2./3.;\n\nconst float verticalWidth = 8.;\nconst float verticalWaveHeight = 200.;\nconst float verticalWaveWidth = 20.;\n\nconst float aa_width = 3.;\nconst float borderWidth = 4.;\nconst float bezelWidth = 20.;\n\nconst mat2x2 rot = mat2x2(cos(alpha), -sin(alpha),sin(alpha), cos(alpha));\n\nconst float timeScale = .2;\n\nconst float shearFactor = 0.1;\n\n#define SHOWBEZEL\n\n////////////////////////////\n// COLORS\nconst vec3 gold = vec3(252. / 255., 186. / 255., 3. / 255.);\nconst vec3 green = vec3(111. / 255., 232. / 255., 84. / 255.);\nconst vec3 violet = vec3(77. / 255., 4. / 255., 212. / 255.);\nconst vec4 backgroundColor = vec4(82./255.);\nconst vec4 backgroundRed = vec4(240./255., 108./255., 0., 1.);\nconst vec4 backgroundLines2 = vec4(79./255., 36./255., 0., 1.);\n\nconst vec3 blue = vec3(21. / 255., 170. / 255., 230. / 255.);\n\nmat2x2 getRotMatrix(float rad)\n{\n    float c = cos(rad);\n    float s = sin(rad);\n    return mat2x2(c, -s, s, c);\n}\n\nvec4 drawLine(vec2 coord, const float waveHeight, const float waveWidth, const float width)\n{\n    float verticalOffset = waveHeight * sin(alpha);\n    vec2 origin = vec2(verticalOffset * .5, 0.);\n    \n    coord -= origin;\n \tfloat verticalPosition = sin(coord.y /waveHeight *2.* PI)*waveWidth;\n    \n    float diff = abs(verticalPosition + verticalOffset/2. - mod(coord.x, verticalOffset) );\n    vec4 color = vec4( smoothstep(diff, diff+aa_width, width), vec3(0.));\n    \n    // Bezel\n    color += vec4(vec3(0.),smoothstep(diff+aa_width, diff+bezelWidth, width+ borderWidth));\n    \n    //shadow\n    color += vec4(0., smoothstep(width, diff+aa_width, width + borderWidth), 0., 0.);\n    \n    return vec4(color);  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 lines;\n    \n    float beta = PI/4. + sin(iTime*.25*timeScale) * sin(iTime*.3*timeScale + 1.);\n    \n    mat2x2 rotation = getRotMatrix(beta);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // toggle 3d effect with mouseclick\n    if(iMouse.z > 0.)\n    {\n        vec2 fragDistFromCenter = uv - vec2(.8);\n        // square it up\n        fragDistFromCenter.y /= iResolution.x/iResolution.y;\n        float dist = dot(fragDistFromCenter,fragDistFromCenter);\n\n        fragCoord *= mix(1.0, 1.5 - dist, .5*(sin( iTime * .3 * timeScale)+1.));\n    }\n    \n    // translation for eventual rotation around something around the middle of the screen\n    vec2 rotationOrigin = iResolution.xy * mix(.4, .6, sin(iTime*.5*timeScale));\n    fragCoord -= rotationOrigin; \n    \n    // Some zooming in/out\n    fragCoord *= 1.5 + sin(iTime*1.2*timeScale)*.5;\n    \n    /*\n    mat2x2 shear = mat2x2(1., shearFactor * uv.y, 0., 1.);\n    \n    fragCoord *= shear;\n    */\n    \n    // transform into rotated space\n    vec2 fragTrafo;\n    \n    for(int i = 0; i < 3; ++i)\n    {\n        fragTrafo = rotation * fragCoord;\n    \tlines.b += drawLine(fragTrafo, verticalWaveHeight*.2, verticalWaveWidth*.2, verticalWidth*.4).r;\n    \tlines.b += drawLine(fragTrafo + vec2(0., verticalWaveHeight*.5), verticalWaveHeight*.2, verticalWaveWidth*.2, verticalWidth*.4).r;\n    \trotation *= rot;\n    }\n    \n    float waveHeight = verticalWaveHeight ;//* (1. +  sin(iTime)*.25);\n    float waveWidth = verticalWaveWidth * (2. +  sin(iTime));\n    \n    // Easy curves\n    for(int i = 0; i < 3; ++i)\n    {\n        fragTrafo = rotation * (fragCoord);\n    \tlines += drawLine(fragTrafo, waveHeight, waveWidth, verticalWidth);\n    \tlines += drawLine(fragTrafo + vec2(0., waveHeight*.5), waveHeight, waveWidth, verticalWidth);\n    \trotation *= rot;\n    }\n    \n    // No overshooting, clean colors\n    lines = clamp(lines, 0.0, 1.0);\n    \n    vec3 baseColor = iMouse.z > 0. ? gold : blue;\n    \n    //Optional: Do HSV lerp\n    vec3 gradientColorUpper = mix(violet, backgroundRed.rgb, (sin(iTime*5.*timeScale)+1.)*.5);\n    vec3 gradientColor = mix(baseColor, gradientColorUpper, (uv.x+uv.y)*.5);\n    \n    vec4 background = mix(backgroundLines2, backgroundRed, lines.b);\n    fragColor = mix(background - lines.g*vec4(.85), vec4(gradientColor, 1.), lines.r);\n    \n    #ifdef SHOWBEZEL\n    // Sweet 3d effect with some good old grad stuff\n    // looks like jank on 1080p but acceptable on 4k\n    float bezel = lines.w; //clamp(lines.w, -1.0, 1.0);\n    float grad = clamp((dFdx(bezel)+ dFdy(bezel))*.5, -1.0, 1.0);\n    \n    fragColor += vec4(grad)*.5;\n    #endif\n}","name":"Image","description":"","type":"image"}]}