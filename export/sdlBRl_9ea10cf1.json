{"ver":"0.1","info":{"id":"sdlBRl","date":"1645232332","viewed":142,"name":"Temporal upscaling attempt 2","username":"romax9lahin","description":"Works really bad","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["temporal","upscaling"],"hasliked":0,"parentid":"fdffRS","parentname":"Temporal upscaling attempt 1"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv;\n    vec3 old = texture(iChannel1,RENDERSCALE*fragCoord/iResolution.xy).rgb;\n    vec3 new = texture(iChannel0,fragCoord/iResolution.xy).rgb;\n\n    vec3 c =(fragCoord.x<iResolution.x*(.5-.5*sin(iTime)))?\n        old:\n        new;\n\n    fragColor = vec4(new,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//warning: iChannel0 must be either linear or nearest, NOT mipmap, mipmap breaks it\n\nvoid mainImage( out vec4 O, vec2 I )\n{\n    if(I.x<iResolution.x*RENDERSCALE && I.y<iResolution.y*RENDERSCALE){\n\n    vec2 h = fract(float(iFrame)/vec2(phi2sq,phi2));\n    \n    vec2 off = h;\n        I=floor(I)+off;\n        \n    O = texture(iChannel0,I/(iResolution.xy*RENDERSCALE) /* vec2(1./6., 1.)*/);\n\t}\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float bayer2(vec2 a){\n    a = floor(a);\n    return fract( dot(a, vec2(.5, a.y * .75)) );\n}\n#define bayer4(a)   (bayer2( .5*(a))*.25+bayer2(a))\n#define bayer8(a)   (bayer4( .5*(a))*.25+bayer2(a))\n#define bayer16(a)  (bayer8( .5*(a))*.25+bayer2(a))\n#define RENDERSCALE 0.05\n\n//sequence from http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\nconst float phi2=1.32471795724474602596090885447809734; //root of X^3-X-1=0.\nconst float phi2sq=phi2*phi2;","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define dot2( a) dot(a,a)\n\nfloat dist2(vec3 x, vec3 y) {\n    float d = min(distance(x, y) / sqrt(2.), 1.0);\n    return d;\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 I2 = RENDERSCALE*I;\n    \n    vec2 off = fract(float(iFrame)/vec2(phi2sq,phi2));\n    //data from previous frame\n    vec4 oldFull = texture(iChannel1, I/iResolution.xy);\n    vec3 old = pow(oldFull.rgb, vec3(2.2));\n    vec3 new = pow(texture(iChannel0, (I2 - off)/iResolution.xy).rgb, vec3(2.2));\n    \n    //float pixrad = clamp(1.0 - distance(fract(I2 - off), vec2(0.5)) * (2.0), 0.0, 1.0);\n    float pixrad2 = clamp(1.0 - distance(fract(I2 - off), vec2(0.5)) * sqrt(2.0), 0.0, 1.0);\n    \n    float oldError = oldFull.a;\n    float error = max(0.1, dist2(old, new));// * pixrad;\n    \n    float radiusPow = max(0.0, 1.0 - error) / (oldError + 0.1);\n    float mixFactor = pow(error, 0.5) * pow(pixrad2, radiusPow);\n    \n    O.rgb = mix(old, new, mixFactor);\n    O.a = error;\n    O.rgb = pow(O.rgb, vec3(1.0 / 2.2));\n}","name":"Buffer C","description":"","type":"buffer"}]}