{"ver":"0.1","info":{"id":"ssVfWc","date":"1659006216","viewed":132,"name":"Planet physics","username":"maze_maze","description":"Planet physics","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["physics","planets"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// A gravitational simulation\n\n// Noise function from my other post https://www.shadertoy.com/view/fdKBDV\n#define noise2D(P) float((P.x * 676769 ^ P.y * 53769) * 676769) * 4.656613e-10\n\nfloat smootherstep(float t) {\n    return (t * (t * 6. - 15.) + 10.) * t * t * t;\n}\n\nfloat gradNoise2D(ivec2 pos, vec2 offset) {\n    float value = noise2D(pos) * 1000.;\n    return dot(vec2(cos(value), sin(value)), offset);\n}\nfloat perlin2D(vec2 pos) {\n    vec2 offset = fract(pos);\n    vec2 offset1 = offset - 1.;\n    ivec2 posf = ivec2(pos - offset);\n    ivec2 posc = posf + 1;\n    \n    float sox = smootherstep(offset.x);\n    return mix(\n        mix(gradNoise2D(posf, offset), gradNoise2D(ivec2(posc.x, posf.y), vec2(offset1.x, offset.y)), sox),\n        mix(gradNoise2D(ivec2(posf.x, posc.y), vec2(offset.x, offset1.y)), gradNoise2D(posc, offset1), sox),\n        smootherstep(offset.y)\n    ) * 1.41421356237;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord;\n    uv -= iResolution.xy * .5;\n    uv /= SCALE;\n    \n    fragColor = vec4(vec3(clamp((perlin2D(uv / 4.) - .6) * 3., 0., 1.)), 1.); // Stars\n    vec4 trails = texture(iChannel1, fragCoord / iResolution.xy);\n    fragColor = mix(fragColor, trails, trails.a);\n    \n    for (int i = 0; i < PLANET_COUNT; i++) {\n        vec4 planet = texelFetch(iChannel0, ivec2(i, 0), 0);\n        float dist = distance(uv, planet.xy);\n        float d = clamp(8. - dist, 0., 1.);\n        fragColor = vec4(mix(fragColor.rgb, PLANET_COLOR[i] * (1. - dist / 16.), d), 1.);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 planetInfo, in vec2 fragCoord) {\n    ivec2 uv = ivec2(fragCoord);\n    int i = uv.y * int(iResolution.x) + uv.x;\n    \n    if (iFrame == 0) {\n        if (i < PLANET_COUNT) {\n            planetInfo = vec4(PLANET_POS[i], PLANET_SPEED[i]); // Set all planets to its default values\n        } else {\n            planetInfo = vec4(0);\n        }\n    } else {\n        if (i < PLANET_COUNT) {\n            vec4 currentPlanet = texelFetch(iChannel0, uv, 0);\n            \n            vec2 pos = currentPlanet.xy;\n            vec2 speed = currentPlanet.zw;\n            float mass1 = PLANET_MASS[i];\n            \n            for (int j = 0; j < PLANET_COUNT; j++) {\n                vec4 otherPlanet = texelFetch(iChannel0, ivec2(j, 0), 0);\n                if (otherPlanet != currentPlanet) {\n                    vec2 pos2 = otherPlanet.xy;\n                    float mass2 = PLANET_MASS[j];\n                    \n                    float distanceX = pos2.x - pos.x;\n                    float distanceY = pos2.y - pos.y;\n                    \n                    // Just a gravitational formula\n                    speed += G * mass2 * vec2(distanceX, distanceY) /\n                        pow(pow(distanceX, 2.) + pow(distanceY, 2.), 1.5) * SPEED;\n                }\n            }\n            pos += speed * SPEED;\n            \n            planetInfo = vec4(pos, speed);\n        } else {\n            planetInfo = vec4(0);\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const int PLANET_COUNT = 6;\n// Starting positions of all planets\nconst vec2 PLANET_POS[PLANET_COUNT] = vec2[PLANET_COUNT](\n    vec2(0., 0.),\n    vec2(0., 25.),\n    vec2(50., 0.),\n    vec2(-75., 0.),\n    vec2(50., 50.),\n    vec2(-75., 50.)\n);\n// Starting speeds of all planets\nconst vec2 PLANET_SPEED[PLANET_COUNT] = vec2[PLANET_COUNT](\n    vec2(0., 0.),\n    vec2(-3.5, 0.),\n    vec2(0., 2.5),\n    vec2(0., -2.1),\n    vec2(0., 2.5),\n    vec2(0., -2.1)\n);\nconst float PLANET_MASS[PLANET_COUNT] = float[PLANET_COUNT](\n    3333.,\n    .02,\n    .1,\n    .5,\n    .1,\n    .5\n);\nconst vec3 PLANET_COLOR[PLANET_COUNT] = vec3[PLANET_COUNT](\n    vec3(1., .8, .1),\n    vec3(.95, .3, .1),\n    vec3(.05, .8, .2),\n    vec3(.2, .6, .7),\n    vec3(.05, .8, .2),\n    vec3(.2, .6, .7)\n);\n\nconst float G = .1;\nconst float SPEED = .5; // Simulation speed\nconst float SCALE = 1.0; // Zoom?","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (iFrame == 0 || iMouse.z > 0.) {\n        fragColor = vec4(0);\n    } else {\n        fragColor = texture(iChannel1, fragCoord / iResolution.xy) * 0.999; // Make the trails fadeout\n    }\n    \n    vec2 uv = fragCoord;\n    uv -= iResolution.xy * .5;\n    uv /= SCALE;\n    \n    for (int i = 0; i < PLANET_COUNT; i++) {\n        vec4 planet = texelFetch(iChannel0, ivec2(i, 0), 0);\n        float d = clamp(2. - distance(uv, planet.xy), 0., 1.);\n        vec4 color = vec4(PLANET_COLOR[i], 1.);\n        fragColor = mix(fragColor, color, d); // Draw planet trails\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}