{"ver":"0.1","info":{"id":"7ssSzH","date":"1618895931","viewed":49,"name":"Sierpiński Carpet (Basic)","username":"adamjmurray","description":"Very basic implementation of the Sierpiński carpet: https://en.wikipedia.org/wiki/Sierpi%C5%84ski_carpet","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tiles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 draw(vec2 p, float start, float end, float iter) \n{     \n    if (p.x < start || p.x > end || p.y < start || p.y > end) {\n        return vec3(0,0,0);\n    }\n    float len = end - start;\n    float x = p.x - start;\n    float y = p.y - start;\n    \n    for(float i=0.; i<iter; i++) {\n        len /= 3.;         \n        if (int(x/len) % 3 == 1 && int(y/len) % 3 == 1) {\n            return vec3(1.-i/iter, 1.-i/(iter+1.), 1);  \n        }\n        \n    }\n    return vec3(0.1,0.1,0.1);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{  \n    vec2 p = (2.*fragCoord - iResolution.xy)/iResolution.y; // [-1,1] vertically    \n    vec3 color = draw(p, -1., 1., 5.);\n    fragColor = vec4(color,1);\n}","name":"Image","description":"","type":"image"}]}