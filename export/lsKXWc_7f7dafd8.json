{"ver":"0.1","info":{"id":"lsKXWc","date":"1467205498","viewed":363,"name":"metalNoise","username":"glkt","description":"testing noise","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash( vec2 p ) {\n\tfloat h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\n\nfloat noise( in vec2 p ) {\n    p.y /= iResolution.x / iResolution.y ; // ratio - independent noise\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n    vec2 u = f*f*f*(f*(f*6.-15.)+10.);\n    float v = mix( mix( hash( i + vec2(0.,0.) ), \n                     hash( i + vec2(1.,0.) ), u.x),\n                mix( hash( i + vec2(0.,1.) ), \n                     hash( i + vec2(1.,1.) ), u.x), u.y);\n    return pow(abs(cos(v)),10.);\n}\n\nfloat noiseLayer(vec2 uv) {\n    float freq = 10.; // noise base frequency / size\n    const int iter = 14; // noise iteration / depth\n    float lacunarity = 0.7; // lacunarity: relative \"importance\" of smaller octaves\n    float v = 0.;\n    float sum = 0.;\n    for(int i = 0; i < iter; i++) {\n        float layerUp = 1. / pow(freq,lacunarity);\n    \tv += noise(uv*freq) * layerUp;\n        sum += layerUp;\n\t\tfreq *= 2.0896;\n    }\n    v /= sum;\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv.x += noiseLayer(uv*0.1+iTime/800.);    \n    uv.y += noiseLayer(uv*0.1+iTime/900.);\n    \n    float v = noiseLayer(uv-vec2(iMouse.x,iMouse.y)/200.+iTime/800.);\n        \n    v = v*v*2.;\n    \n    fragColor = vec4(v);\n\n}","name":"Image","description":"","type":"image"}]}