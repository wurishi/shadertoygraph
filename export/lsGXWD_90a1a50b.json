{"ver":"0.1","info":{"id":"lsGXWD","date":"1464371842","viewed":481,"name":"Simplest Edge Detection","username":"DavidBarbera","description":"Detects Edges in Images in order to draw silouhettes, you can choose color.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["edgedetection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//from http://coding-experiments.blogspot.co.uk/2010/06/edge-detection.html\n// nice for learning\n//\n\nfloat threshold(in float thr1, in float thr2 , in float val) {\n if (val < thr1) {return 0.0;}\n if (val > thr2) {return 1.0;}\n return val;\n}\n\n// averaged pixel intensity from 3 color channels\nfloat avg_intensity(in vec4 pix) {\n return (pix.r + pix.g + pix.b)/3.;\n}\n\n vec4 get_pixel (in vec2 coords, in float dx, in float dy) {\n return texture(iChannel0, coords + vec2(dx, dy) ).xyzw;   \n\n}\n// returns pixel color;\n \n\nfloat IsEdge(in vec2 coords)\n{\n  float dxtex = 1.0 / iChannelResolution[0].x; //512.0 /*image width*/;\n  float dytex = 1.0 / iChannelResolution[0].y; //512.0 /*image height*/;\n  float pix[9];\n  int k = -1;\n  float delta;\n    \n     pix[0] = avg_intensity(get_pixel(coords,float(-1)*dxtex, float(-1)*dytex));\n     pix[1] = avg_intensity(get_pixel(coords,float(-1)*dxtex, float(0)*dytex));\n     pix[2] = avg_intensity(get_pixel(coords,float(-1)*dxtex, float(1)*dytex));\n     pix[3] = avg_intensity(get_pixel(coords,float(0)*dxtex, float(-1)*dytex));\n     pix[4] = avg_intensity(get_pixel(coords,float(0)*dxtex, float(0)*dytex));\n     pix[5] = avg_intensity(get_pixel(coords,float(0)*dxtex, float(1)*dytex));\n     pix[6] = avg_intensity(get_pixel(coords,float(1)*dxtex, float(-1)*dytex));\n     pix[7] = avg_intensity(get_pixel(coords,float(1)*dxtex, float(0)*dytex));\n     pix[8] = avg_intensity(get_pixel(coords,float(1)*dxtex, float(1)*dytex));\n\n  // average color differences around neighboring pixels\n  delta = (abs(pix[1]-pix[7])+\n          abs(pix[5]-pix[3]) +\n          abs(pix[0]-pix[8])+\n          abs(pix[2]-pix[6])\n           )/4.;\n\n  return threshold(0.1,0.5,clamp(2.5*delta,0.0,1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec4 color = vec4(0.0,0.0,0.0,1.0);\n  vec2 uv = fragCoord.xy/iResolution.xy;  \n    \n  float channel = IsEdge(uv);\n  color.b= channel;\n  color.r = channel;\n  color.g = channel;\n    \n  vec3 tint = vec3(1.0,0.0,1.0);\n  \n  color.rgb *=tint;\n    \n  fragColor = color;\n    \n   // Just to play the video  \n  //   vec2 uv = fragCoord.xy / iResolution.xy;\n  // fragColor = vec4(texture(iChannel0,uv).xyz,1.0).xyzw;\n}\n","name":"Image","description":"","type":"image"}]}