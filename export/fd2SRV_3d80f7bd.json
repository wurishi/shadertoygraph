{"ver":"0.1","info":{"id":"fd2SRV","date":"1620594727","viewed":126,"name":"Happy Mothers' Day 2021","username":"huttarl","description":"Flowers dancing in a circle.","likes":8,"published":1,"flags":64,"usePreview":0,"tags":["flowers","mothers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ltsXzj","filepath":"https://soundcloud.com/christian-brown-80/spring","previewfilepath":"https://soundcloud.com/christian-brown-80/spring","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Happy Mothers' Day!\n\n// Feature requests:\n// weaving in and out\n// Keziah: side veins on leaves\n// \"Happy Mothers' Day!\"\n\n#define npetals 5.0\n#define nflowers 10.0\n#define rflower 0.05\n#define bigR 0.24\n#define TWOPI (3.1415926 * 2.)\n#define HOUR (TWOPI / 12.)\n#define middleR 0.015\n#define zoom 1.7\n\nvec3 lerp(in vec3 from, in vec3 to, in float thingy) {\n    return from + (to - from) * thingy;\n}\n\nvec2 threeoclock = vec2(cos(0.), sin(0.)),\n    fiveoclock = vec2(cos(HOUR * 10.), sin(HOUR * 10.));\n    \nvoid leaf(in float a, inout vec3 col, in vec2 center, in vec2 uv) {\n    // Change col to green if in shape of leaf\n    float k = rflower * 2.;\n    vec2 p1 = center + k * vec2(cos(a), sin(a)),\n        p2 = center + k * vec2(cos(a + HOUR*10.), sin(a + HOUR*10.));\n    float d1 = distance(uv, p1), d2 = distance(uv, p2);\n    if (d1 < k && d2 < k) {\n        col = lerp(vec3(0.), vec3(0., 0.1, 0.),\n            log(abs(d1 - d2) * 20000.));\n    }\n}\n\nvec3 fcol(in float f) {\n    float sect = TWOPI / nflowers;\n    float colAngle = f * sect;\n    return vec3(sin(colAngle), sin(colAngle + sect*2.),\n        sin(colAngle + sect*4.)) * .5 + vec3(.5);\n}\n\nvoid flower(in float f, in float dir, inout vec3 col, in vec2 center, in vec2 uv) {\n    leaf(HOUR, col, center, uv);\n    leaf(0., col, center, uv);\n\n    // loop over petals\n    for (float p=0.; p < npetals; p+=1.) {\n        float a = p * TWOPI / npetals + sin(iTime) * 6. * dir;\n        vec2 petalc = center + rflower * vec2(cos(a), sin(a));\n        float d = distance(uv, petalc);\n        if (d < rflower) {\n            col = fcol(f) * (0.95 + 0.05 * sin(d * 600.)) *\n                (1. - .2 * pow(d/rflower, 7.0));\n        }\n    }\n    \n    float duc = distance(uv, center);\n    if (duc < middleR) {\n        col = vec3(0.9, 0.9, 0.2) * (1. - .4 * pow(duc/middleR, 7.0));\n    }\n    \n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 center = vec2(0,0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy * .5)/iResolution.xx * zoom;\n\n    // blue sky gradient background\n    vec3 col = lerp(vec3(0.8, 1.0, 0.8), vec3(0.8, 0.8, 1.0), uv.y + 0.5);\n    \n    for (float f = 0.; f < nflowers; f += 1.) {\n        float dir = (int(f) % 2 == 0) ? 1. : -1.;\n        float a = f * TWOPI / nflowers + iTime;\n        center = bigR * vec2(sin(a), cos(a)) * (1.3 + .4 * dir * sin(iTime));\n        flower(f, dir, col, center, uv);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}