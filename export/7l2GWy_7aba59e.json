{"ver":"0.1","info":{"id":"7l2GWy","date":"1625705137","viewed":623,"name":"Particle System Base","username":"SpinningCube","description":"basic particle code to be expanded on, storing position and velocity. Fullscreen is broken for some reason, I haven't found an explanation for the behavior there.\n\nreset it to add more particles","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["ball","physics","particle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 displayRawParticles (vec2 uv) {\n    return texture(iChannel0, uv/10.)/iResolution.x;\n}\n\nfloat circleDist (vec2 point, vec2 pos, float radius) {\n    return distance(point, pos) - radius;\n}\n\nvec3 drawBalls (int count, float radius, vec2 fragCoord) {\n    for (int i = 0; i < count; i++) {\n        if (circleDist(mod(fragCoord + vec2(radius) - getParticlePos(i), iResolution.xy), vec2(radius), radius) <= 0.) {\n            return vec3(1.);\n        }\n    }\n    return vec3(0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(uv,0);\n\n    // Output to screen\n    fragColor = vec4(drawBalls(100, 20., fragCoord), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 outputVec;\n    \n    int id = int(fragCoord.x) + int(iResolution.x) * int(fragCoord.y);\n\n    int particleNum = id/2;\n\n    int task = int(mod(float(id), 2.)); // 0 = position, 1 = velocity\n    \n    if (iFrame > 0) {\n\n        vec2 pos = getParticlePos(particleNum);\n        vec2 vel = getParticleVel(particleNum);\n\n        if (task == 0) { // position\n            outputVec = pos + vel;\n        }\n        else { // velocity\n            outputVec = vel;\n        }\n        outputVec = mod(outputVec, iResolution.xy);\n    }\n    else {\n    \n        outputVec = texelFetch(iChannel1, ivec2(fragCoord), 0).xy;\n        if (task == 0) {\n            outputVec *= iResolution.x;\n        }\n        else {\n            outputVec -= 0.5;\n            outputVec *= 4.;\n        }\n    }\n    \n    \n    fragColor = vec4(outputVec, 0., 1.);\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define getParticlePos(num) texelFetch(iChannel0, ivec2(mod(float(num*2), iResolution.x), num*2 / int(iResolution.x)), 0).xy\n#define getParticleVel(num) texelFetch(iChannel0, ivec2(mod(float(num*2), iResolution.x) + 1., num*2 / int(iResolution.x)), 0).xy\n\n","name":"Common","description":"","type":"common"}]}