{"ver":"0.1","info":{"id":"l3fXWj","date":"1710008920","viewed":67,"name":"Twistzor2","username":"gimulnautti","description":"Combining twisting kernels","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","bitmap"],"hasliked":0,"parentid":"l3XSDM","parentname":"TwistZoor"},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 twist(vec2 uv, float aspect, vec2 mid)\n{\n    // base vectors\n    vec2 up = vec2(0,1);\n    vec2 right = vec2(1,0);\n    vec2 toFrag = uv - mid;\n    \n    // angle + distance from middle\n    float angle = acos(dot(toFrag, up) /  (length(toFrag)));\n    float dist = log(length(toFrag));\n       \n    // rotate uv\n    float rotAngle = sin(iTime) * (-dist) * 3.;\n    \n    vec2 uvC = uv - mid;\n    vec2 b0 = vec2(sin(rotAngle), -cos(rotAngle));\n    vec2 b1 = vec2(-b0.y, b0.x);\n    uv = b0 * uvC.x + b1 * uvC.y + 0.5;\n  \n    return uv;\n}\n\nvec2 tunnel(vec2 uv, float aspect, vec2 mid)\n{\n    // base vectors\n    vec2 up = vec2(0,1);\n    vec2 right = vec2(1,0);\n    vec2 toFrag = uv - mid;\n    \n    // angle + log distance from middle\n    float angle = acos(dot(toFrag, up) / (length(toFrag)));\n    float dist = log(length(toFrag));\n        \n    // have two sides to it\n    /*if (dot(toFrag, right) > 0.0)\n    {\n        angle = -angle;\n    }*/\n\n    // resolve texture UV\n    vec2 texUv = vec2(angle / 3.1415192, 1.0-dist);\n    \n    return texUv;\n}\n\nvec2 star(vec2 uv, float aspect, vec2 mid)\n{\n    // base vectors\n    vec2 up = vec2(0,1);\n    vec2 right = vec2(1,0);\n    vec2 toFrag = uv - mid;\n    \n    // angle + distance from middle\n    float angle = acos(dot(toFrag, up) / (length(toFrag)));   \n    \n    // have two sides to it\n    if (dot(toFrag, right) > 0.0)\n    {\n        angle = -angle;\n    }\n    \n    float dist = sin(angle * 6.);\n    \n    return uv - toFrag * dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // find aspect ratio\n    float aspect = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= aspect;\n    \n    vec2 midTunnel = vec2(0.75 + 0.25 * aspect * sin(iTime), 0.5 + 0.25 * cos(iTime));\n    vec2 midTwist = vec2(0.75 + 0.25 * aspect * cos(iTime * .5), 0.5 + 0.25 * sin(iTime * .5));\n    vec2 midStar = vec2(0.75 + 0.25 * aspect * cos(iTime * .25), 0.5 + 0.25 * sin(iTime * .25));\n    \n    vec2 tunnelUv = tunnel(uv, aspect, midTunnel);\n    vec2 twistUv = twist(uv, aspect, midTwist);\n    vec2 starUv = star(uv, aspect, midStar);\n    \n    uv = tunnelUv * .3 * cos(iTime * .24),\n    uv += twistUv * .9 * sin(iTime * .13);\n    uv += starUv * .4 * sin(iTime * .38);\n    \n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"}]}