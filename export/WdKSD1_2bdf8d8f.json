{"ver":"0.1","info":{"id":"WdKSD1","date":"1573929193","viewed":346,"name":"Doodling with h0ffman","username":"Flopine","description":"H0ffman did an AWESOME youtube live dj set on Amiga here: https://youtu.be/zVF-GbGHxA8?t=3220\nSo inspiring I wrote a shader along it :) thank you <3 ","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","improvisation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n// H0ffman did an AWESOME youtube live DJ set on Amiga here: \n// https://youtu.be/zVF-GbGHxA8?t=3220\n// So inspiring I wrote a shader along it :) thank you <3 \n\n#define PI 3.141592\n#define time iTime*5.\n\nfloat hash21(vec2 x)\n{return fract(sin(dot(x,vec2(12.4,16.1)))*1245.1);}\n\nfloat stmin (float a, float b, float k, float n)\n{\n    float st = k/n;\n    float u = b-k;\n    return min(min(a,b),0.5*(u+a+abs(mod(u-a+st,2.*st)-st)));\n}\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nvoid moda(inout vec2 p, float rep)\n{\n    float per = (2.*PI)/rep;\n    float a = atan(p.y,p.x);\n    float l = length(p);\n    a = mod(a,per)-per*0.5;\n    p = vec2(cos(a),sin(a))*l;\n}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y>p.x) p = p.yx;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z))) + length(max(q,0.)); \n}\n\nfloat sc(vec3 p, float s) \n{\n    p = abs(p);\n    p = max(p, p.yzx);\n    return min(p.x, min(p.y, p.z)) - s;\n}\n\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r,abs(p.z)-h);}\n\nfloat room (vec3 p)\n{\n    float b = -box(p,vec3(6.,3.,1e10));\n    float per = 3.;\n    p.x = abs(p.x)-5.;\n    p.z = mod(p.z,per)-per*0.5;\n    \n    return stmin(b, cyl(p.xzy, 0.6,15.),0.5,3.);\n}\n\nfloat prim1 (vec3 p)\n{\n    p.xy *= rot(tan(p.z+time)*0.05);\n    p.xz *= rot(sin(p.y+time));\n    moda(p.xz, 5.);\n    p.x -= 0.2;\n    return cyl(p.xzy,0.1,15.);\n}\n\nfloat prim2 (vec3 p)\n{\n    float size = 0.5;\n    return max(-sc(p,size), box(p,vec3(size+0.02)));\n}\n\nfloat g1 = 0.;\nfloat fractal(vec3 p)\n{\n    p.xy *= rot(tan(p.z+time)*0.2);\n    mo(p.xz, vec2(.2));\n    p.xz *= rot(time*0.5);\n    mo(p.xy, vec2(.5));\n    p.xy *= rot(sin(p.z*0.5));\n\n    p.x -=.5;\n    float d =  prim2(p);\n    g1 += 0.01/(0.01+d*d);\n    return d;\n}\n\nfloat wave (vec3 p)\n{\n    float per = 5.;\n    p.xy *= rot(p.z*0.2);\n    p.x = abs(p.x)-2.;\n\n    p.z = mod(p.z,per)-per*0.5;\n    return prim1(p);\n}\n\n\nfloat SDF (vec3 p)\n{\n    p.xy *= rot(p.z*0.1);\n    float d = stmin(wave(p),room(p),.5,5.);\n    d = min(d, fractal(p-vec3(0.,0.,time)));\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    float dither = hash21(uv);\n\n    vec3 ro = vec3(0.001,0.001,-5.+time),\n        p = ro,\n        rd = normalize(vec3(uv,1)),\n        col = vec3(0.);\n\n    float shad = 0.;\n\n    for (float i=0.; i<100.; i++)\n    {\n        float d = SDF(p);\n        if (d<0.01)\n        {\n            shad = i/100.;\n            break;\n        }\n        d *= 0.8 +dither*0.1;\n        p += d*rd;\n    }\n\n    float t = length(ro-p);\n    col = vec3(shad);\n\n    col += g1*vec3(0.5,length(uv),0.1)*0.8;\n\n    col = mix(col, vec3(0.2), 1.-exp(-0.002*t*t));\n\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}