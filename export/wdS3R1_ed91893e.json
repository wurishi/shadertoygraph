{"ver":"0.1","info":{"id":"wdS3R1","date":"1548121891","viewed":287,"name":"Intersecting Lines","username":"mrtownsend","description":"Part one of my working through the \"LiveCoding - The Universe Within - Part 1\" tutorial on YouTube (https://www.youtube.com/watch?v=3CycKKJiwis&t=1611s).  Great tutorial and I gotta start somewhere.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SMOOTH(a,b,t) smoothstep(a,b,t)\n\nfloat DistLine(vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float t = clamp(dot(pa, ba)/dot(ba, ba), 0., 1.);\n    return length(pa - ba*t);\n}\n\n\nfloat N21(vec2 p)\n{\n    p = fract(p*vec2(233.34, 851.73));\n    p += dot(p, p+23.45);\n    return fract(p.x*p.y);\n}\n\n\nvec2 N22(vec2 p)\n{\n    float n = N21(p);\n    return vec2(n, N21(p+n));\n}\n\n\n// Returns the position of a dot in a grid cell.\nvec2 GetPosition(vec2 id, vec2 offset)\n{\n    //vec2 noise = N22(id+offset);\n    //float x = sin(iTime*noise.x);\n    //float y = cos(iTime*noise.y);\n    //return offset+vec2(x, y)*.4;\n    vec2 noise = N22(id+offset)*iTime;\n    return offset+sin(noise)*.4;\n}\n\n\n// Draw line.\nfloat Line(vec2 p, vec2 a, vec2 b)\n{\n    float distance = DistLine(p, a, b);\n    float m = SMOOTH(.02, .01, distance);\n    return m;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float m = 0.;\n    \n    uv *= 5.;\n    \n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n    // Array\n    vec2 gridCells[9];\n    int i = 0;\n    \n    for(float y=-1.; y<=1.; y++)\n    {\n        for(float x=-1.; x<=1.; x++)\n        {\n            gridCells[i++] = GetPosition(id, vec2(x, y));\n        }\n    }\n    \n    // Draw the primary lines.\n    for(int i=0; i<9; i++)\n    {\n        m += Line(gv, gridCells[4], gridCells[i]);\n    }\n    \n    // Draw the lines that overlap the grid lines.\n    m += Line(gv, gridCells[1], gridCells[3]);\n    m += Line(gv, gridCells[1], gridCells[5]);\n    m += Line(gv, gridCells[7], gridCells[3]);\n    m += Line(gv, gridCells[7], gridCells[5]);\n    \n    vec3 col = vec3(m);\n    \n    // The below code renders a grid.\n    //if(gv.x > .48 || gv.y > .48) col = vec3(1,1,0);\n    \n    m = N22(uv) .y;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}