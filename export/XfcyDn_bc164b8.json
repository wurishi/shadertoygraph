{"ver":"0.1","info":{"id":"XfcyDn","date":"1730457454","viewed":98,"name":"Interaktive Mandelbulb3D Fractal","username":"tholzer","description":"Mandelbulb raymarched with lighting,  mouse.x = power,  mouse.y = iterations\n[url=http://blog.hvidtfeldts.net/index.php/2011/09/distance-estimated-3d-fractals-v-the-mandelbulb-different-de-approximations/]Distance Estimated 3D Fractals[/url]","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["3d","raymarching","fractal","interactive","mandelbulb","power8"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Fork of \"Raymarched Mandelbulb 3D Fractal\" by infurity. \n//   https://shadertoy.com/view/l32BWW  2024-11-01 10:14:12\n\n// Shader:  \n//   an interactive Raymarched Mandelbulb 3D Fractal\n//   https://www.shadertoy.com/view/XfcyDn\n// File: IRM3DFractal.glsl\n\nmat2 rot2D(float angle)\n{\n  float s = sin(angle);\n  float c = cos(angle);\n  return mat2(c,-s,s,c);\n}\n\nfloat sdBulb(vec3 p) \n{\n  float power = 8.0;\n  int iter = 8;\n  if ((iMouse.x > 5.0)\n   || (iMouse.y > 5.0))\n  {\n    power = 2.0 + iMouse.x / 25.0;\n    iter = 2+int(iMouse.y) / 25;\n  }\n  \n  vec3 z = p;\n  float dr = 1.0;\n  float r = 0.0;\n  for (int i = 0;i<iter;i++) \n  {\n\tr = length(z);\n\tif (r>2.0) break;\n\tfloat theta = acos(z.z/r);\n\tfloat phi = atan(z.y,z.x);\n\tdr = pow(r,power-1.0)*power*dr+1.;\n\tfloat zr = pow(r,power);\n\ttheta = theta*power;\n\tphi = phi*power;\n    float sinTh = sin(theta);\n\tz=zr*vec3(sinTh*cos(phi), sinTh*sin(phi), cos(theta));\n\tz+=p;\n  }\n  return 0.5*log(r)*r/dr;\n}\n\n// Scene\nfloat map(vec3 p){\n    vec3 q = p;\n    float tick = iTime/8.;\n    q.xz *= rot2D(tick);\n    q.yz *= rot2D(tick);\n    float mandelbulb = sdBulb(q);\n    return mandelbulb;\n}\n\n// Calculate normals\nvec3 normals(vec3 p){\n    vec2 d = vec2(.001,0);\n    vec3 n;\n    n.x = map(p+d.xyy)-map(p-d.xyy);\n    n.y = map(p+d.yxy)-map(p-d.yxy);\n    n.z = map(p+d.yyx)-map(p-d.yyx);\n    return normalize(n);\n}\n\nconst int iter = 100; // Raymarching iterations\n\n// Raymarching function\nfloat march(vec3 ro,vec3 rd){\n    float t = 0.;\n    for (int i = 0;i<iter;i++){\n        vec3 p = ro+rd*t;\n        float d = map(p);\n        if (d<.001||t>100.) break;\n        t+=d;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord.xy*2.-iResolution.xy)/min(iResolution.x,iResolution.y);\n    vec3 ro = vec3(0,0,-1.7);\n    vec3 rd = normalize(vec3(uv,1));\n    vec3 col = vec3(0);\n\n    float t = march(ro,rd);\n    if (t<100.){\n        vec3 p = ro+rd*t;\n        vec3 normal = normals(p);\n        vec3 lightSource = vec3(ro);\n        vec3 viewSource = normalize(ro);\n        vec3 reflectSource = normalize(reflect(-lightSource,normal));\n        vec3 lightCol = vec3(1);\n        float diffuseStrength = max(0.,dot(normalize(lightSource),normal)); // Diffuse lighting\n        vec3 diffuse = diffuseStrength*lightCol;\n        float specularStrength = max(0.,dot(viewSource,reflectSource)); // Specular lighting\n        specularStrength = pow(specularStrength,64.);\n        vec3 specular = specularStrength*lightCol;\n        vec3 lighting = .75*diffuse+.25*specular;\n        col = lighting;\n    }\n    fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}