{"ver":"0.1","info":{"id":"mlKcWW","date":"1700240177","viewed":47,"name":"evolve","username":"Rahul_Jain","description":"just learnt creating squares, thought gotta give it a try","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["shader","rainbow","squares"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 pallete1(float t)\n{\n    vec3 a = vec3(0.9);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n    \n    return a+b*sin(6.28318*(c*t-d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // setting the co-ordinates\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    float d = length(uv);\n    \n    // calling the palletes\n    vec3 sqcl = pallete1(d + iTime);\n    d = sin(d* 10.0 - iTime);\n    d = abs(d);\n    d = 0.2/d;\n    sqcl *= d;\n    // creates multiple squares\n    uv = fract(uv*6.0);\n    \n    // read it below\n    vec2 squareSize = vec2(0.6, 0.6);\n    \n    // logic for creating a square\n    if (abs(uv.x) <= squareSize.x && abs(uv.y) <= squareSize.y)\n    {\n        // everything inside the square's area\n        fragColor = vec4(sqcl, 1.0);\n    }\n    else\n    {\n        // color for everything outside the squares area\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}