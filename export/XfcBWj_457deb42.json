{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define seed (84561)\n#define cellSize 10.\n#define wallSize 1.\n\n#define TOP 0\n#define RIGHT 1\n#define BOTTOM 2\n#define LEFT 3\n\nuint rand(uint i, uint seedling) {\n    uint state = i + (i * 747796405u + 2891336453u) ^ seedling;\n    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n    return (word >> 22u) ^ word;\n}\n\nbool isBitActive(int val, int index) {\n    return (val & (1 << index)) != 0;\n}\n\nint rand(float i) {\n    return int(rand(floatBitsToUint(i), uint(seed + int(iTime) / 2)));\n}\nint rand(int i) {\n    return int(rand(uint(i), uint(seed + int(iTime) / 60)));\n}\n\nint hash21(vec2 src) {\n    return int(rand(rand(floor(src.x)) + rand(floor(src.y))));\n}\n\nint wallBit(int hash) {\n    int _rand = hash % 16;\n    int walls = 0;\n\n    walls += isBitActive(_rand, TOP) ? 1 : 0;\n    walls += isBitActive(_rand, RIGHT) ? 1 : 0;\n    walls += isBitActive(_rand, BOTTOM) ? 1 : 0;\n    walls += isBitActive(_rand, LEFT) ? 1 : 0;\n\n    if (walls <= 2) {\n        int missingWalls = 3 - walls;\n\n        if (!isBitActive(_rand, TOP) && missingWalls > 0) {\n            _rand |= (1 << TOP);\n            missingWalls--;\n        }\n        if (!isBitActive(_rand, RIGHT) && missingWalls > 0) {\n            _rand |= (1 << RIGHT);\n            missingWalls--;\n        }\n        if (!isBitActive(_rand, BOTTOM) && missingWalls > 0) {\n            _rand |= (1 << BOTTOM);\n            missingWalls--;\n        }\n        if (!isBitActive(_rand, LEFT) && missingWalls > 0) {\n            _rand |= (1 << LEFT);\n        }\n    }\n\n    return _rand;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 cellRaw = fragCoord/float(cellSize);\n    vec2 cell    = floor(cellRaw);\n    vec2 cellPos = (cellRaw - cell) * float(cellSize);\n    \n    int cellRand   = hash21(cell);\n    int bottomRand = hash21(cell + vec2( 0,  1));\n    int leftRand   = hash21(cell + vec2(-1,  0));\n    \n    int walls       = wallBit(cellRand);\n    int wallsBottom = wallBit(bottomRand);\n    int wallsLeft   = wallBit(leftRand);\n    \n    int pro       = (cellRand   % 1000) / 200;\n    int proBottom = (bottomRand % 1000) / 200;\n    int proLeft   = (leftRand   % 1000) / 200;\n    \n    vec3 col = vec3(0);\n    \n    bool isBottomWall = !isBitActive(walls, BOTTOM) || !isBitActive(wallsBottom, TOP   );\n    bool itLeftWall   = !isBitActive(walls, LEFT  ) || !isBitActive(wallsLeft  , RIGHT );\n    \n    if (isBottomWall && cellSize - cellPos.y < wallSize) {\n        col = vec3(1);\n    }\n    if (itLeftWall && cellPos.x < wallSize) {\n        col = vec3(1);\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XfcBWj","date":"1733744938","viewed":97,"name":"Fork Maze Wall  V2","username":"MrNissenDK","description":"I've updated my Maze Generator! It now performs much better, producing mazes that generate instantly and appear to be fully connected. However, it might still need a bit more fine-tuning.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["random","generator","maze"],"hasliked":0,"parentid":"XccBWj","parentname":"Maze Wall Generator"}}