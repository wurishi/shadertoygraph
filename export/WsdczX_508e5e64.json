{"ver":"0.1","info":{"id":"WsdczX","date":"1601482676","viewed":158,"name":"bisection for raymarching?","username":"izutionix","description":"I tried using the bisection method to help with ray marching, but there is not much improvement :/ (toggle at line 77 in Common)\nsee line 48 and below in Common\n(ignore the Buffer stuff, I forked a previous experiment)\n\nmaybe I'm doing something wrong?","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","voronoi","bisection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n\t//vec3 ro = RO;\n    //vec3 rd = normalize(vec3(uv, FOV));\n    \n\tfloat t = texture(iChannel0,fragCoord/iResolution.xy).x;\n    //float dev = map(ro + rd*t);\n\t\n\t//fragColor = vec4(exp(vec2(-5., -25.)/t), dev*(iTime+1.), 1);\n    fragColor = vec4(1./t);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(0,0,iTime*.1+1.);\n    //vec3 ro = RO;\n    vec3 rd = normalize(vec3(uv, FOV));\n    \n\t//float oldt = texture(iChannel0, fragCoord.xy / iResolution.xy).x;\n    //float newt = march(oldt, ro, rd);\n    float newt = march(.01, ro, rd);\n\n    fragColor = vec4(newt,0,0,1);\n    \n\t//vec3 col = voronoi(vec3(uv*2., iTime)).xxx;\n    //fragColor = vec4(col, 1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define FOV 1.5\n\nvec3 hash( vec3 x ) // iq's\n{\n\tx = vec3( dot(x,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(x,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(x,vec3(113.5,271.9,124.6)));\n\n\treturn fract(sin(x)*43758.5453123);\n}\n\nvec3 voronoi( in vec3 x ) // iq's\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\nfloat map(vec3 p)\n{\n    float s = 1.;\n    float v = voronoi(p*s).x-.2;\n    return 1.1*v/s;\n}\n\nfloat bisect(vec3 ro, vec3 rd, float l, float u)\n{\n\tfloat m = .5*(l+u);\n\tfloat mp = m;\n\n\tfor(int i=0; i<64; i++)\n    {\n\t\tmp = m;\n\t\tfloat s = map(ro + rd*l)*map(ro + rd*m);\n\t\t\n        if(s==0.) break;\n\t\telse if(s<0.) u = m;\n    \telse if(s>0.) l = m;\n\t\tm = .5*(l+u);\n\t\t\n\t\tif(abs((m-mp)/m) < 1e-8) break;\n\t}\n\treturn m;\n}\n\nfloat march(float t, vec3 ro, vec3 rd)\n{\n    for(int i=0; i<8; i++)\n    \tt += map(ro + rd*t);\n    \n    \n    \n    \n    \n    #if 0\n    return t;\n    #else\n\tfloat l = t-.1; // changed\n    float u = t+.2+map(ro + rd*t); // changed\n    return bisect(ro, rd, l, u);\n    #endif\n}","name":"Common","description":"","type":"common"}]}