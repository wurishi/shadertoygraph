{"ver":"0.1","info":{"id":"cdtGWS","date":"1677762733","viewed":61,"name":"#NAN from vector normalization","username":"CaffeinePwrdAl","description":"Normalizing a zero length vector generates #NANs because of the divide by zero. Wanted to see whether different platforms were consistent in the behaviour. Black bars will be visible where NAN is generated.\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["length","nan","normalization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.0);\n    col.r = max(0.0, cos(20.0 * uv.x + (1.0 * iTime)));\n    \n    // Put some very small float values in rows just to see where length\n    // starts being non-zero\n    col.b = (uv.y > 0.375) ?(1.0e-38):(0.0);\n    col.b = (uv.y > 0.5)   ?(1.0e-37):(col.b);\n    col.b = (uv.y > 0.625) ?(1.0e-36):(col.b);\n    col.b = (uv.y > 0.75)  ?(1.0e-20):(col.b);\n    col.b = (uv.y > 0.875) ?(1.0e-18):(col.b);\n    col.b = (uv.y > 0.9375)?(1.0e-15):(col.b);\n\n    \n    vec3 col2 = col;\n    float nanval = (isnan(length(normalize(col2.rgb))))\n                            ?(0.0)\n                            :(1.0);\n\n    // Add some bars in green to show where the Blue epislon values were\n    col.g = (uv.y > 0.375) ? (0.1) : (0.0);\n    col.g = (uv.y > 0.5)   ? (0.2) : (col.g);\n    col.g = (uv.y > 0.625) ? (0.3) : (col.g);\n    col.g = (uv.y > 0.75)  ? (0.4) : (col.g);\n    col.g = (uv.y > 0.875) ? (0.5) : (col.g);\n    //col.g = (uv.y > 0.9375)? (0.6) : (col.g);\n\n    col = vec3(nanval, col.g, col.b);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}