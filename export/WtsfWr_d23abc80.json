{"ver":"0.1","info":{"id":"WtsfWr","date":"1596482096","viewed":504,"name":"I'm trapped","username":"Flopine","description":"An improve version of a doodle I made under 25 minutes during the FieldFX Shader Showdown qualifications","likes":45,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","animation","rainbow","isometric","showdown"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define time iTime\n#define BPM (135./60.)\n#define dt(speed) fract(time*speed)\n\n#define bouncy(speed) sqrt(abs(sin(dt(speed)*PI)))\n#define switchanim(speed) floor(sin(dt(speed)*2.*PI)+1.)\n\nstruct obj \n{\n    float d;\n    float m;\n    vec3 c;\n}\n;\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y>p.x) p = p.yx;\n}\n\nvec3 pal (float t, vec3 c)\n{return vec3(0.5)+vec3(0.5)*cos(2.*PI*(c*t+vec3(0.,0.37,0.63)));}\n\nobj strucmin (obj a, obj b)\n{\n    if (a.d<b.d) return a;\n \telse return b;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0., max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat sc (vec3 p, float d)\n{\n    p = abs(p);\n    p = max(p,p.yzx);\n    return min(p.x,min(p.y,p.z))-d;\n}  \n\nobj cages (vec3 p)\n{\n    mo(p.xz, vec2(0.5));\n    p.x -= 0.8;\n\n    mo(p.yz, vec2(1.));\n    p.y -= 1.+bouncy(BPM/4.);\n\n    mo(p.xz, vec2(2.));\n    p.x -= 1.5;\n\n\tfloat anim = (PI/2.)*(floor(time*(BPM/2.))+pow(dt(BPM/2.),5.));\n    p.xz += vec2(cos(anim),sin(anim));\n\n    return obj(max(-sc(p,0.9-bouncy(BPM)*0.1),box(p,vec3(1.)))-0.02,0.,pal(length(p),vec3(1.)));\n}\n\nobj gem (vec3 p)\n{\n    p.xz *= rot(dt(BPM/5.)*PI);\n    return obj (dot(p,normalize(sign(p)))-1., 1., vec3(1.));\n}\n\nobj SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.0);\n    return strucmin(gem(p),cages(p));\n}\n\nvec3 getnorm(vec3 p)\n{\n    vec2 eps = vec2(0.001,0.);\n    return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\nfloat mask(vec2 uv)\n{\n    return smoothstep(0.1,0.4, sin(fract(length(uv))-time*(BPM/4.)));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    vec2 uu = floor(uv*30.)/30.;\n    uv *= 0.95+mask(uu);\n    \n    vec3 ro = vec3(uv*8.,-50.),\n        rd = vec3(0.,0.,1.),\n        l = normalize(vec3(1.,2.,-2.)),\n        p = ro,\n        col = vec3(0.);\n\n    bool hit = false; obj O;\n\n    for (float i=0.; i<64.;i++)\n    {\n        O = SDF(p);\n        if (O.d<0.001)\n        {\n            hit = true; break;\n        }\n        p += O.d*rd;\n    }\n\n    if (hit)\n    {\n        vec3 n = getnorm(p);\n        float lighting = max(dot(n,l),0.);\n        if (O.m == 0.) col = O.c*lighting;\n        if (O.m == 1.) col = mix(vec3(0.1,0.2,0.8),vec3(1.,0.8,0.8), lighting);\n\n    }\n    \n    fragColor = vec4(sqrt(col),1.);\n}","name":"Image","description":"","type":"image"}]}