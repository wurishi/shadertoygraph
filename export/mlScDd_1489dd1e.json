{"ver":"0.1","info":{"id":"mlScDd","date":"1694726154","viewed":83,"name":"Sharingan Evolution","username":"frostu","description":"My first shader - sharingan evolution up to 3 tomoe","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["anime","naruto","sharingan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// My first shader - sharingan evolution up to 3 tomoe\n// Based on https://upload.wikimedia.org/wikipedia/commons/7/75/Sharingan-evo-en.svg\n\n#define PI 3.141592\n#define S(a, b, d) smoothstep(a, b, d)\n\nfloat circle(vec2 uv, float r)\n{\n    return length(uv) - r;\n}\n\nfloat sdMoon(vec2 uv, float d, float ra, float rb)\n{\n    uv.y = abs(uv.y);\n    float a = (ra * ra - rb * rb + d * d) / (2.0 * d);\n    float b = sqrt(max(ra * ra - a * a, 0.0));\n    if (d * (uv.x * b - uv.y * a) > d * d * max(b - uv.y, 0.0)) return length(uv - vec2(a, b));\n    return max((length(uv) - ra), -(length(uv - vec2(d, 0)) - rb));\n}\n\nvec2 rotate(vec2 uv, float angle)\n{\n    return vec2(uv.x * cos(angle) - uv.y * sin(angle), uv.x * sin(angle) + uv.y * cos(angle));\n}\n\nvec4 tomoe(vec2 uv)\n{\n    vec4 col = vec4(S(0.10, 0.09, length(uv - vec2(0.0, 0.5))));\n    \n    float ra = 0.15;\n    float rb = 0.14;\n    float di = 0.07;\n    vec2 uv_rotated = rotate(uv - vec2(0.063, 0.510), 0.000);\n\tfloat d = sdMoon(uv_rotated, di, ra, rb);\n    col = mix(col, vec4(1.0), smoothstep(0.01, 0.00, d) * clamp(uv_rotated.y, 0.0, 1.0) / uv_rotated.y);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord * vec2(2.0, 1.0) / iResolution.xy;\n    \n    if (uv.x <= 1.0) uv = fract(uv);\n    else uv = fract(vec2(2.0 - uv.x, uv.y));\n    \n    uv.y -= 0.5;\n    uv.x -= 0.625;\n    uv *= 7.0;\n    \n    float dist = length(uv);\n    \n    // iris's background\n    vec3 col = mix(vec3(1.0), vec3(0.35), S(0.800, 0.775, dist));\n    col = mix(col, vec3(0.65, 0.00, 0.00), S(0.800, 0.775, dist) * pow(clamp(iTime / 5.0 - 0.5, 0.0, 1.0), 2.0));\n    \n    // iris's highlight\n    float tilt = 0.5 + 0.5 * pow(sin(PI * dist / 0.8), 3.0);\n    if (dist < 0.8) col *= 0.5 + 0.5 * pow(sin(PI * dist / 0.8 - (tilt / 2.5)), 3.0);\n    \n    // exterior ring\n    col = mix(col, vec3(0.0), S(0.025, 0.020, abs(circle(uv, 0.8))));\n    \n    // interior ring\n    col = mix(col, vec3(0.25), S(0.010, 0.005, abs(circle(uv, 0.5))));\n    \n    // eye's pupil\n    col = mix(col, vec3(0.0), S(0.150, 0.145, dist));\n    \n    // tomoe\n    float tomoe_number = clamp(iTime / 5.0 - 1.0, 0.0, 3.0);\n    for (float i = 0.0; i < tomoe_number; i += 1.0) {\n        vec2 uv_rotated;\n        if (tomoe_number <= 2.0) uv_rotated = rotate(uv, iTime * 0.8 + PI / 8.0 + i * 2.0 * PI / ceil(tomoe_number));\n        else uv_rotated = rotate(uv, iTime * 0.8 + PI / 8.0 + i * 2.0 * PI / tomoe_number);\n        vec4 tom = tomoe(uv_rotated);\n        col = mix(col, vec3(0.0), tom.a * clamp(1. - exp(-4.0 * (tomoe_number - i)), 0.0, 1.0));\n    }\n    uv /= 3.0;\n    \n    uv.xy = (uv.xy + vec2(0.5, 0.273)) * 0.725;\n    float f2 = 0.5 * pow(2.0 * uv.x - 0.8, 4.0);\n    vec3 bk = vec3(smoothstep(uv.y, uv.y * 0.95, f2)) * step(0., uv.y);\n    \n    float f3 = -0.8 * pow(uv.x - 0.25, 2.) + 0.4;\n    bk *= vec3(smoothstep(uv.y * 0.95, uv.y, f3)) * step(0., uv.y);\n    \n    col = mix(col, bk, S(0.10, 0.09, S(1.00, 0.00, dist)));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}