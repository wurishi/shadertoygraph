{"ver":"0.1","info":{"id":"tdsfzl","date":"1595189690","viewed":113,"name":"Rather Shiny Balls","username":"rhaglennuddestron","description":"raymarching and showing shiny balls","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarcher","shiny"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//cube REf\nfloat boxSDF(vec3 p, vec3 b)\n{\n    vec3 d = abs(p) - b;\n    return length(max(d,0.)) + min(max(d.x,max(d.y,d.z)),0.);\n}\n//quaternion rotation\nvec4 qmult(vec4 a,vec4 b)\n{\n    float s = a.w*b.w - dot(a.xyz,b.xyz);\n    vec3  v = a.w*b.xyz + b.w*a.xyz + cross(a.xyz,b.xyz);\n    return vec4(v,s);\n}\nvec3 qrot(vec3 n,vec3 vv,float theta)\n{\n    float s = sin(radians(theta/2.));\n    float c = cos(radians(theta/2.));\n    \n    vec4 qp = vec4(s*n,c);\n    vec4 qn = vec4(-s*n,c);\n    vec4 v  = vec4(vv,0) ;\n    vec4 outp = qmult(qmult(qp,v),qn);\n    return outp.xyz;\n}\nvec3 QLookAt(vec3 dir,vec3 a,vec3 b)\n{\n    vec3 d = normalize(b - a);\n    vec3 n = vec3(0,1,0);\n    if (vec3(0,0,1) != d) n = normalize(cross(d,vec3(0,0,1)));\n    float theta = degrees( acos(dot(d,vec3(0,0,1))));\n    return qrot(n,dir,theta);\n}\n//rodriguez rotation\nvec3 rodr(vec3 n,vec3 v,float theta)\n{\n    float s = sin(radians(theta));\n    float c = cos(radians(theta));\n    \n    vec3 cosc = (1.-c)*dot(v,n)*n + c*v;\n    vec3 sinc = s*cross(n,v);\n    return cosc+sinc;\n\n}\n//raymarching stuff\n#define MS   2048\n#define MAD  512.\n#define MID  5e-6\n//functions\n\nfloat getdist(vec3 p){return min(boxSDF(qrot(vec3(0,1,0),p,45. * iTime),vec3(1)),p.y+2.);}\nfloat getDist(vec3 p){\n    mat3 xr = mat3(1,         0,          0,\n                   0,cos(iTime),-sin(iTime),\n                   0,sin(iTime), cos(iTime));\n    xr *= xr;\n    vec3 pos = vec3(sin(iTime),0,cos(iTime))*xr*vec3(2,1.5,2) + vec3(0,0,2);\n    vec3 dir = QLookAt(p - pos,pos,vec3(0,0,2));\n    return min(length(p - vec3(0,0,2))-1.,boxSDF(dir,vec3(1,1,1e-2)));\n}\nfloat RayMarch(vec3 ro,vec3 rd) { float cd = 0.;float pd = MID*1.1;for(int s = 0; s < MS && cd < MAD && pd > MID;s++){pd = getDist(ro+rd*cd);cd += pd;}return cd;}\nvec3 getNorm(vec3 p)\n{\n    float d = getDist(p);\n    vec2 e = vec2(5e-5,0);\n    return normalize(d - vec3(getDist(p-e.xyy),\n                              getDist(p-e.yxy),\n                              getDist(p-e.yyx)));\n}\nfloat getLight(vec3 p,vec3 lp)\n{\n    return dot(getNorm(p),normalize(lp - p));\n}\nfloat getLight(vec3 p,vec3 lp,vec3 dir)\n{\n    return (dot(getNorm(p),normalize(lp - p)) + dot(qrot(getNorm(p),dir,180.),normalize(lp - p)) )/2.;\n}\nvec3 getCol(vec3 dir,vec3 pos)\n{\n    float d = RayMarch(pos,dir);\n    vec3 p = pos+dir*d;\n    float lightp = clamp(0.,1.,getLight(p,vec3(0,2,1),dir) + 0.9);\n    vec3 colp   = texture(iChannel0,rodr(getNorm(p),-dir,180.)).xyz;\n    if (d > MAD*0.9) {return vec3(1);}else{\n        return lightp * colp;}\n}\nvec3 getSBCol(vec3 dir,vec3 pos)\n{\n    float d = RayMarch(pos,dir);\n    vec3 p = pos+dir*d;\n    float lightp = clamp(0.,1.,getLight(p,vec3(0,2,1),dir) + 0.8);\n    vec3 colp   = texture(iChannel0,rodr(getNorm(p),-dir,180.)).xyz;\n    vec3 col = lightp * colp;\n    if (d > MAD*0.9) {return texture(iChannel1,dir).xyz;}else{\n        return col*0.9 + getCol(rodr(getNorm(p),-dir,180.),p)*0.1;}\n}  \nvec3 getBCol(vec3 dir,vec3 pos)\n{\n    float d = RayMarch(pos,dir);\n    vec3 p = pos+dir*d;\n    float lightp = clamp(0.,1.,getLight(p,vec3(0,2,1),dir) + 0.8);\n    vec3 colp   = texture(iChannel0,rodr(getNorm(p),-dir,180.)).xyz;\n    vec3 col = lightp * colp;\n    if (d > MAD*0.9) {return texture(iChannel1,dir).xyz;}else{\n        return col + getSBCol(rodr(getNorm(p),-dir,180.),p);}\n}    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy/2.)/(iResolution.yy/2.);\n    if(abs(uv.x) < 1.){\n        vec3 dir = normalize(vec3(uv,1.)); dir = qrot(normalize(vec3(0,-1,0)),dir,45.*iTime*0.);\n    \tvec3 col = getSBCol(dir,vec3(0,0,-2));\n    \tfragColor = vec4(col,1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}