{"ver":"0.1","info":{"id":"wdBfRK","date":"1590359083","viewed":175,"name":"ShATI - Amiti√©","username":"Flopine","description":"My former school named ATI decided to launch an everyday challenge from 4th may to 24th may, here is the 19th subject: friendship :)","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["2d","animation","rainbow","xor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n// Shader made for Everyday ATI challenge\n\n#define PI acos(-1.)\n#define TAU 6.2831853071\n#define time(offset) fract((iTime+offset)*0.1)\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(.05,fwidth(val-thre)))\n#define circle(s,pix) AAstep(s,length(pix))\n#define square(s,pix) AAstep(s,max(abs(pix.x),abs(pix.y)))\n\n\n// taken from YX here : https://www.shadertoy.com/view/tdlXW4\n// rough shadertoy approximation of the bonzomatic noise texture\nvec4 texNoise(vec2 uv)\n{\n    float f = 0.;\n    f += texture(iChannel0, uv*.125).r*.5;\n    f += texture(iChannel0, uv*.25).r*.25;\n    f += texture(iChannel0, uv*.5).r*.125;\n    f += texture(iChannel0, uv*1.).r*.125;\n    f=pow(f,1.2);\n    return vec4(f*.45+.05);\n}\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat xor (float a, float b)\n{return (1.-b)*a + (1.-a)*b;}\n\nvec3 palette (float t, vec3 c)\n{return vec3(.5)+vec3(.5)*cos(TAU*(c*t+vec3(.0,.37,.63)));}\n\nvec3 background (vec2 uv)\n{\n    uv *= rot(sin(length(uv*1.5)+time(0.)*TAU));\n    uv += texNoise(uv+smoothstep(0.1,0.25,abs(sin(length(uv)-iTime)-1.))).r*0.5-0.1;\n    float mask = circle(sqrt(sin((time(5.))*TAU)*2.),length(uv));\n    float spread = atan(uv.y,uv.x);\n    return palette(spread, vec3(TAU/8.))*(1.-mask);\n}\n\nvec3 dancing_shapes (vec2 uv)\n{\n    float size = 0.1;\n    float spread = pow(clamp(sin(time(0.)*TAU)*0.2,0.,1.),0.35);\n    vec2 puv = uv;\n    uv *= rot(time(0.)*TAU*1.2);\n\n    vec2 uc = vec2(uv.x - spread,uv.y);\n    vec2 us = vec2(uv.x + spread, uv.y);\n    us *= rot(time(0.)*PI);\n    \n    float cir = circle(size,uc);\n    float squ = square(size,us);\n    float mask = xor(cir,1.-squ);\n    \n    vec3 color = (spread<=0.0001) ? background(puv)*squ+(1.-mask) : vec3(mask); \n    return color;\n}\n\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n    vec3 col = vec3(dancing_shapes(uv));\n    fragColor = vec4(sqrt(col),1.);\n}","name":"Image","description":"","type":"image"}]}