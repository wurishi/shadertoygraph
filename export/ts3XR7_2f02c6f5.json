{"ver":"0.1","info":{"id":"ts3XR7","date":"1571663983","viewed":573,"name":"Ray Marching 1(From Art of Code)","username":"UltimateKimera","description":"Followed Art of Code's Ray Marching for Dummies here: https://www.youtube.com/watch?v=PGtv-dBi2wE","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","raycasting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURFACE_DIST .001\n\nfloat GetDist(vec3 p){\n    vec4 sphere = vec4(0,1,6,1);\n    float dSphere = length(p-sphere.xyz)-sphere.w;\n    float dPlane = p.y;\n    float d = min(dSphere, dPlane);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.;\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + dO*rd;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dS<SURFACE_DIST || dO>MAX_DIST) break;\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p){\n    vec2 e = vec2(.01, 0);\n    float d = GetDist(p);\n    vec3 n = vec3(\n    \td-GetDist(p-e.xyy),\n        d-GetDist(p-e.yxy),\n        d-GetDist(p-e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p){\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURFACE_DIST*2., l);\n    if (d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0,1,0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd*d;\n    \n    float dif = GetLight(p);\n    col = vec3(dif);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}