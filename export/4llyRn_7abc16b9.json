{"ver":"0.1","info":{"id":"4llyRn","date":"1503122831","viewed":741,"name":"B. Farewell Outro","username":"db0x90","description":"Just a simple old school styled outro ....","likes":9,"published":1,"flags":96,"usePreview":1,"tags":["raymarch","oldschool","intro","amiga","rasterbars","ice","cracktro","copperbars","cytax","gurumeditation","bigpoint"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"ltjXzz","filepath":"https://soundcloud.com/user-761205785/sid-music-jason-page-mark-tdk-knight-albino-4-fpgasid-8580-pseudo-stereo-bx?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/user-761205785/sid-music-jason-page-mark-tdk-knight-albino-4-fpgasid-8580-pseudo-stereo-bx?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////////////////////////////////////////////////////////////////////////////////////////\n//\n//  ______________.___.________________  ____  ___\n//  \\_   ___ \\__  |   |\\__    ___/  _  \\ \\   \\/  /\n//  /    \\  \\//   |   |  |    | /  /_\\  \\ \\     / \n//  \\     \\___\\____   |  |    |/    |    \\/     \\ \n//   \\______  / ______|  |____|\\____|__  /___/\\  \\\n//          \\/\\/                       \\/      \\_/\n//\n//\n// cytax products ///////////////////////////////////////////////////////////////////////\n// \t http://www.pouet.net/groups.php?which=3127\n//\n// sounds favs //////////////////////////////////////////////////////////////////////////\n//\t https://soundcloud.com/www-digitalista-de/jesper-kyd-cytax-ice-02\n//\t https://soundcloud.com/dailychiptune/razor1911-starcraft-2-wings-of-liberty-crack\n//   https://soundcloud.com/user-761205785/sid-music-jason-page-mark-tdk-knight-albino-4-fpgasid-8580-pseudo-stereo-bx?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing\n//   https://www.youtube.com/watch?v=O2eyRtDeI0Q\n//    \n//\n// colorscheme ///////////////////////////////////////////////////////////////////////////\n#define COL_BGND           float(0x26)/255., float(0x26)/255., float(0x26)/255.\n#define COL_BORDER         float(0xA5)/255., float(0x6F)/255., float(0xE7)/255.\n#define COL_LISSAJOUS      float(0xCC)/255., float(0x52)/255., float(0x7A)/255.\n#define COL_GURUMEDITATION float(0xF4)/255., float(0x1E)/255., float(0x04)/255.\n\n#define BORDER_TOP     0.15\n#define BORDER_BOTTOM  0.85\n#define BORDER_SIZE    0.01\n\n#define PI    3.14159265359\n#define TWOPI 6.28318530718\n\n// FX IDs ///////////////////////////////////////////////////////////////////////////////\n#define FX_COPPERBARS 1\n#define FX_LISSAJOUS  10\n#define FX_RASTERBARS 11\n\n#define FX_PIXELIZE 20\n#define FX_SCANLINES 21\n#define FX_DECRUNCH 22\n#define FX_NOISE    23\n#define FX_CRANKUP_CONTRAST 24\n\n#define FX_KLOTZAEDER 30\n#define FX_BOUNCINGBALL 31\n\n#define FX_SCROLL_ONE 40\n#define FX_SCROLL_TWO 41\n\n#define FX_LOGO_CYTAX 50\n#define FX_LOGO_ICE 51\n\n#define FX_GURU_MEDITATION 666\n\n// buffer constants //////////////////////////////////////////////////////////////////////\nconst int LOGO_START_Y      = 1;\nconst int LOGO_START_HEIGHT = LOGO_START_Y + 32;\n\nconst int GURU_START_Y      = LOGO_START_HEIGHT + 1; \nconst int GURU_HEIGHT       = GURU_START_Y      + 35;\n\n// timing ////////////////////////////////////////////////////////////////////////////////\nconst float PLAYBACK_TIME_S = 50.;\nfloat t;\n\n// screen position ///////////////////////////////////////////////////////////////////////\nvec2 xy;\nvec2 xyC;\nvec2 xyF;\nvec2 xyS;\nvec4 resultColor;\n\nfloat s;\nfloat bass;\n\n// utility methods ///////////////////////////////////////////////////////////////////////\nbool isInBorderlines() {\n\tif ( ((xy.y>BORDER_BOTTOM-BORDER_SIZE) && (xy.y<BORDER_BOTTOM)) ||\n         ((xy.y>BORDER_TOP) && (xy.y<BORDER_TOP+BORDER_SIZE))    ){\n    \treturn true;\n    } else {\n    \treturn false;\n    }\n}\n\nbool isInContentArea() {\n    if ( (xy.y<BORDER_BOTTOM-BORDER_SIZE) && (xy.y>BORDER_TOP+BORDER_SIZE) ) {\n    \treturn true;\n    } else {\n    \treturn false;\n    }\n}\n\nfloat rand(vec2 co){\n\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat frandom(float seed) {\n    return fract( sin(iTime/4.+dot(seed, 12.9898))*43758.5453);\n}\n\n\n// FX - background ////////////////////////////////////////////////////////////////\nvoid background(inout vec4 resultColor) {\n    if ( isInBorderlines() ) {\n        resultColor = vec4(COL_BORDER,1.);\n    \treturn;\n    }\n    if ( isInContentArea()) {\n        float bt    = iTime;\n        float split = clamp( 3.*sin(bt*1.5), 0.3, 0.7);\n        if (xy.x>split) {\n            float y = abs(cos(3.*TWOPI*xy.y + bt));\n            float r = clamp(y, 0.2, 0.3);\n            resultColor = vec4(r*0.5,r*0.7,r,1.);\n            return;\n        } else {\n            float y = abs(cos(3.*TWOPI*xy.y - bt));\n            float r = clamp(y, 0.2, 0.3);\n            resultColor = vec4(r*.75,r*.75,r*.75,1.);\n            return;\n        }\n    } else {\n        float a;   \n        if (xy.y<BORDER_TOP+BORDER_SIZE) {\n         \ta = sin(-0.04+ xy.y*1.2);  \n        } else if (xy.y>BORDER_BOTTOM) {\n         \ta = sin(1.2 -xy.y*1.24);  \n        }\n        vec3 c = vec3(COL_BORDER)*a*2.5;\n        resultColor = vec4(c,1.0 );\n    }\n}\n\nvoid bassTheBackground(inout vec4 resultColor) {\n    int tx = int(xy.x*512.0);\n\ttx  = clamp(tx*4+80,70,80);\n\tfloat fft = texelFetch( iChannel3, ivec2(tx,0), 0 ).x;\n    bass = clamp(fft,0.1,0.9);\n    float a   = smoothstep(0.1, 2.2, length(xyC));\n    resultColor -= a * bass*0.85;\n}\n\n// FX - pixelize /////////////////////////////////////////////////////////////////////\nvoid pixelize(float effectShowValue, inout vec4 resultColor) {\n    if ( isInContentArea() ) {\n        float m = 1.-(effectShowValue*0.4);\n        if ( mod( (xyF.x-t*35.), 5.0) > 3.){\n            resultColor *= m;\n        }\n\n        if ( mod( (xyF.y-t*35.), 5.0) > 3.){\n            resultColor *= m;\n        }\n    }\n\n}\n\n// FX - scanlines /////////////////////////////////////////////////////////////////////\nvoid scanlines(float effectShowValue, inout vec4 resultColor) {\n    if ( isInContentArea() ) {\n        float m = 1.-(effectShowValue*0.4);\n        if ( mod( (xyF.y-t*35.), 5.0) > 3.){\n            resultColor *= m;\n        }\n    }\n}\n\n    \n// FX - noises ////////////////////////////////////////////////////////////////////////\nfloat _noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nvoid noise(float effectShowValue, inout vec4 resultColor) {  \n    float c = _noise( vec2(xyF.x + iResolution.x*cos(500.*iTime),xyF.y + iResolution.y*sin(439.*iTime))  );\n    vec4 nc = vec4(c,c,c,1.);\n\tresultColor = mix(resultColor, nc, effectShowValue);\n}\n\n// FX - decrunch /////////////////////////////////////////////////////////////////////\nvoid decrunch(float effectShowValue, inout vec4 resultColor) {    \n    float ra = 0.2 + 2.5 * frandom(t/1.9738);\n    float r  = 0.5 * abs( sin(xy.y*100.*ra));\n    \n    float ga = 0.4 + 0.8 * frandom(abs(cos(t/4.9138)) );\n    float g  = 0.6 * smoothstep( cos(2.73+xy.y*56.*ga), 0.1, 0.6);\n  \n    float ba = 0.4 + 0.8 * frandom(exp(cos(iTime/15.)) );\n    float b  = 0.6 * smoothstep( sin(0.73+xy.y*66.*ba), 0., 0.7);\n    \n    vec3 color = vec3( r, g, b);\n    resultColor = vec4(color,1.);   \n}\n\n\n// FX - contrast /////////////////////////////////////////////////////////////////////\nvoid crankUpContrast(float effectShowValue, inout vec4 resultColor) {\n    float m = 1.+(effectShowValue * 3.);\n\tresultColor = vec4(resultColor.xyz*m, m);\n}\n\n// FX - rasterbars ///////////////////////////////////////////////////////////////////\nfloat ysMin =BORDER_TOP + 0.12;\nfloat barWidth = 0.02;\nvoid rasterbars(float effectShowValue, inout vec4 resultColor) {    \n    vec3 result;\n    vec4 barColor;\n    vec3 bar = vec3(0.5,ysMin,barWidth);\n\t// float foo = 0.;\n    float foo = xy.y*0.28*-sin(t);\n\tfloat xPos = -1. + 1.9*sin(effectShowValue);\n    for(int i=0;i<32;i++) {\n        // bar.x = xPos;\n        bar.x = foo+xPos + 0.22 * sin(t + (float(i) *0.14) );\n        if ( ((xy.x+foo)>(bar.x-bar.z-foo)) && ( (xy.x+foo)<(bar.x+bar.z-foo)) ) {\n            bar.y =  ysMin + ( float(i) * 0.015);\n            if ( (xy.y>bar.y) && (xy.y<(BORDER_BOTTOM-BORDER_SIZE))) {\n                float r =  abs(cos( ((bar.x-foo*2.2)-xy.x-0.36)/barWidth));\n    \t\t\tbarColor = vec4( vec3(r), (effectShowValue*0.2) );\n            }\n        }\n\n    }\n    resultColor = mix(resultColor,barColor,barColor.a); \n}\n\n\n// FX - lissajous /////////////////////////////////////////////////////////////////\nconst float r = 0.03;\n    \nconst float x1    = 0.63;\nconst float y1    = 0.5;\n    \nconst float x1a   = 0.13;\nconst float x2a   = 0.15;\nconst float x1f   = 0.17;\nconst float x2f   = 0.32;\nconst float x1phi = 6.9;\nconst float x2phi = 1.;\n        \nconst float y1a   = 0.19;\nconst float y2a   = 0.19;\nconst float y1f   = 0.33;\nconst float y2f   = 0.13;\nconst float y2phi = 1.3;\nconst float y1phi = 3.;\n\nfloat circle(vec2 r, vec2 center, float radius) {\n\tfloat distanceFromCenter = length(r-center);\n\tfloat outsideOfDisk = smoothstep( radius-.012, radius+.012, distanceFromCenter);\n\tfloat insideOfDisk = 1.0 - outsideOfDisk;\n\treturn insideOfDisk;\n}\n\nvoid lissajous(float effectShowValue, inout vec4 resultColor) {\n    float dist;\n    \n    float n = floor( effectShowValue * 40.);\n    for(float i=0.0;i<n;i+=1.0){\n        vec2 pos = vec2(\n            x1 + (x1a * sin(i*x1f+iTime+x1phi) ) + (x2a * sin(i*x2f+iTime+x2phi) ),\n            y1 + (y1a * cos(i*y1f+iTime+y1phi) ) + (y2a * sin(i*y2f+iTime+y2phi) )\n        );\n        dist = circle(xy, pos, r * (1.-(.3*sin(i+t*3.))) );\n        if ( (xy.y>(pos.y-dist)) && (xy.y<(pos.y+dist)) ) {\n        \tresultColor -= vec4( mix(vec3(0.,0.,0.), resultColor.rgb, dist), 1.);\n        }\n    \t\n    }\n}\n\n// FX - cytax logo movement //////////////////////////////////////////////////////////////////\nvoid moveCytaxLogo(float effectShowValue, inout vec4 fragColor) {\n\n    vec2 pos = vec2(.5, 0.9 );\n    pos.x +=  cos(iTime*2.1) *0.36 + sin(iTime*1.6) *0.25;\n    pos.x +=  (exp(-effectShowValue*8.));\n    float scale  = 1.4 * s;\n    \n    vec2 targetSize = vec2(31.*8.,25.);\n    vec2 targetPos  = vec2( 0.   ,7);\n    vec2 tmp = iResolution.xy / targetSize;\n    \n    vec2 windowOffset = floor((iResolution.xy - targetSize*scale)*vec2(pos));\n    vec2 coord = (xyF- windowOffset) / scale;\n    \n    if(coord.x < targetPos.x || coord.y < targetPos.y  || coord.x >= (targetSize.x+targetPos.x) || coord.y >= (targetSize.y+targetPos.y))\n    {\n        return;\n    }\n    \n    vec4 col = texture(iChannel0, coord / iChannelResolution[0].xy) ;\n    fragColor = vec4( mix(fragColor.rgb, col.rgb, col.a), 1.0);\n}\n\n// FX - let´s meditate  //////////////////////////////////////////////////////////////////////\nvoid meditate(float ttt, inout vec4 resultColor) {\n    if (ttt<0.5) {\n    \tresultColor = vec4(0.8,0.8,0.8,1.);\n    } else if (ttt>=0.5 && ttt<1.) {\n    \tresultColor = vec4(0.4,0.4,0.4,1.);\n    } else {\n        vec4 bCol = vec4(0.,0.,0.,0.);\n        float modt = mod(ttt, 2.);\n        if (modt<=1.) {\n             if (  ((xy.y>0.170) && (xy.y<0.185)) || (xy.y<0.015) ||\n                \t( ((xy.x<0.01) || (xy.x>0.99)) && (xy.y<0.185))\n                ) {\n                 bCol = vec4( COL_GURUMEDITATION, 1.0); \n             }\n        }\n        \n        float scale  = s;\n    \tvec2 pos = vec2(0.5,0.86);\n        vec2 targetSize = vec2(56.*8.,35.);\n        vec2 targetPos  = vec2( 0.   ,GURU_START_Y);\n        vec2 tmp = iResolution.xy / targetSize;\n\n        vec2 windowOffset = floor((iResolution.xy - targetSize*scale)*vec2(pos));\n        vec2 coord = (xyF- windowOffset) / scale;\n        if(coord.x < targetPos.x || coord.y < targetPos.y  || coord.x >= (targetSize.x+targetPos.x) || coord.y >= (targetSize.y+targetPos.y))\n        {\n            resultColor = bCol;\n            return;\n        } else {\n        \tresultColor = texture(iChannel0, coord / iChannelResolution[0].xy) ;\n        }\n    }\n}\n\n// FX - DDD - klotzaeder /////////////////////////////////\nconst vec3 camera = vec3(0.,0.,-12.);\nconst vec3 target = vec3(0.,0.,0.);\n\nconst float fov = 1.5;\nconst float raymarchMaximumDistance = 40.;\nconst float raymarchPrecision = 0.001;\nconst int   raymarchSteps = 50;\n\nvec3 color0 = vec3( 0.4,0.5,0.7 );\nvec3 color1 = vec3(0.1, 0.1, 0.3);\nvec3 light0 = vec3(-0.5, 0.75, -0.5);\nvec3 light1 = vec3(0.5, -0.75, 0.5);\nfloat kt;\nvec2 rpos;\n\nvec3 RotateX(vec3 v, float rad)\n{\n  float cos = cos(rad);\n  float sin = sin(rad);\n  return vec3(v.x, cos * v.y + sin * v.z, -sin * v.y + cos * v.z);\n}\nvec3 RotateY(vec3 v, float rad)\n{\n  float cos = cos(rad);\n  float sin = sin(rad);\n  return vec3(cos * v.x - sin * v.z, v.y, sin * v.x + cos * v.z);\n}\nvec3 RotateZ(vec3 v, float rad)\n{\n  float cos = cos(rad);\n  float sin = sin(rad);\n  return vec3(cos * v.x + sin * v.y, -sin * v.x + cos * v.y, v.z);\n}\n\nmat3 rotationMatrix3(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n\n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c          \n               );\n}\n\nmat3 calcLookAtMatrix(vec3 origin, vec3 target, float roll) {\n  vec3 rr = vec3(sin(roll), cos(roll), 0.0);\n  vec3 ww = normalize(target - origin);\n  vec3 uu = normalize(cross(ww, rr));\n  vec3 vv = normalize(cross(uu, ww));\n  return mat3(uu, vv, ww);\n}\n\n// operations\nvec3 twist( vec3 pos, float amount )\n{\n    vec3 p = normalize( pos );\n    float c = cos(amount * p.y);\n    float s = sin(amount * p.y);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*pos.xz,pos.y);\n    return q;\n}\n\nvec2 subtract(vec2 a, vec2 b){ \n    return vec2(max(-a.x, b.x),1.); \n}\nvec2 smin( vec2 a, vec2 b, float k ) { \n    float h = clamp( 0.5+0.5*(b.x-a.x)/k, 0.0, 1.0 ); \n    return vec2( mix( b.x, a.x, h ) - k*h*(1.0-h), 1. ); \n}\n\n//primitives\nvec2 torus( vec3 p, vec2 radii, vec3 pos, vec4 quat )\n{\n    mat3 transform = rotationMatrix3( quat.xyz, quat.w );\n    vec3 pp = ( p - pos ) * transform;\n    float d = length( vec2( length( pp.xz ) - radii.x, pp.y ) ) - radii.y;\n    return vec2(d,1.);\n}\n\nvec2 sphere( vec3 p, float radius, vec3 pos , vec4 quat)\n{\n    mat3 transform = rotationMatrix3( quat.xyz, quat.w );\n    float d = length( ( p * transform )-pos ) - radius;\n    return vec2(d,0.);\n}\n\nvec2 roundBox(vec3 p, vec3 size, float corner, vec3 pos, vec4 quat )\n{\n    mat3 transform = rotationMatrix3( quat.xyz, quat.w );\n    return vec2( length( max( abs( ( p-pos ) * transform )-size, 0.0 ) )-corner,0.7);\n}\n\nconst vec3 pa = vec3(1., 57., 21.);\nconst vec4 pb = vec4(0., 57., 21., 78.);\nfloat perlin(vec3 p) {\n\tvec3 i = floor(p);\n\tvec4 a = dot( i, pa ) + pb;\n\tvec3 f = cos((p-i)*acos(-1.))*(-.5)+.5;\n\ta = mix(sin(cos(a)*a),sin(cos(1.+a)*(1.+a)), f.x);\n\ta.xy = mix(a.xz, a.yw, f.y);\n\treturn mix(a.x, a.y, f.z);\n}\n\nvec2 _roundBox(vec3 p, vec3 size, float corner, vec3 pos ) {\n    return vec2( length( max( abs(p-pos)-size, 0.0 ) )-corner,0.3);\n}\n\nvec2 _cube(vec3 pos, float a, float i, float n) {\n\tpos = RotateX(  pos, a + (i*PI*2./n+1.));\n    pos = RotateZ(  pos, a + (i*PI/n+1.));\n    return _roundBox( pos, vec3(2.,2.,2.),  .15, vec3(0.) );\n}\n\nfloat bounceF = 2.5;\nconst vec3 zero = vec3(0.);\nvec2 scene_BouncingBall(vec3 position) {\n\n\tfloat a = kt  * 1.2;\n\n    position.y += 3.8 - 6.4 * clamp( abs(-cos( kt*bounceF)),0.17, 1.);\n    position.x *= 0.7 + 0.9 * clamp( abs(-cos( kt*bounceF)),0.  , .33);\n    position.y *= 1.25 - 0.75 * clamp( abs(-cos( kt*bounceF)),0.  , .33);\n\n    vec2 sre = sphere( position, 3.3, zero, vec4(0.1) );\n\n    vec4 bxr = vec4( 0., 1., 0., 0. );\n    vec3 ptr = position;\n           \n    int n = 5;\n    vec2 bxs = _cube(ptr,a, 0., float(n) );\n    for(int i=1;i<=n;i++) {\n        bxs = min(bxs, _cube( position, a, float(i), float(n)) );\n    }\n\n    return min( bxs, sre/*subtract(sce, sre)*/ );\n}\n\nvec2 scene_Klotzaeder(vec3 position)\n{  \n    vec4 quat = vec4( 0., 0., cos(  kt) *.9, -3. + kt  * .3 );\n\n    vec3 noise  = position    * 0.22;\n         noise += kt * .1;\n    float pnoise = 1. + perlin( noise );\n\n    float d = 2.6 + sin(-1.6 + kt *0.8);\n    vec2 klotz = roundBox( position, vec3(2.,2.,2.),  .1, zero, quat + vec4( 1., 1., 1., PI / 4. ) );\n\n    float td = 2.0 + sin(-1.7 + kt*0.5);\n    vec2 to0 = torus( twist( position, PI * sin( kt ) ), vec2( td,.15), zero, vec4( 1., 0., 0., 0. + kt * .32 ) );\n    vec2 to1 = torus( position, vec2( td,.15), zero, vec4( 0., 0., 1., PI *.5 + kt * .3 ) );\n\n    vec2 sre = sphere( position,   d, zero, quat );\n    vec2 sce = sphere( position, 1.5, zero, quat ) + perlin( position + kt ) * 0.232;\n\n    return smin( sce, smin( to0, smin( to1, subtract( sre, klotz  ), pnoise ), pnoise ), pnoise);\n}\n\nvoid dddLights_Klotzaeder() {\n    color1 = vec3( 0.4,0.5,0.7 );\n\tcolor0 = vec3(0.1, 0.1, 0.3);\n    \n    light0.y = 2. * ( sin( t * 0.2 ) );\n    light0.x = 2. * ( cos( t * 0.1 ) );\n\tlight1.z = 1. * ( -sin( kt * 0.3 ) );\n    \n    light1.x = 3.  * (  cos( kt * 0.1 ) );\n    light1.z =  .2 * ( -sin( kt * 0.3 ) );\n}\n\nvoid dddLights_BouncingBall() {\n    color0 = vec3( 0.4,0.9,0.7 );\n\tcolor1 = vec3( COL_BORDER );\n    \n    light0.x = -3.1;\n    light0.y = 2.1; \n\tlight0.z = -0.2;\n    \n\n    light1.x = 1.;\n    light1.y = 1.1; \n    light1.z = -0.5 +  (.25 + .5 * ( -sin( kt) ));\n}\n\nconst vec3 v1 = vec3( 1.0,-1.0,-1.0);\nconst vec3 v2 = vec3(-1.0,-1.0, 1.0);\nconst vec3 v3 = vec3(-1.0, 1.0,-1.0);\nconst vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\nvec3 calcNormal_Klotzaeder(vec3 pos, float eps) {\n  return normalize( \n      v1 * scene_Klotzaeder( pos + v1*eps ).x +\n      v2 * scene_Klotzaeder( pos + v2*eps ).x +\n      v3 * scene_Klotzaeder( pos + v3*eps ).x +\n      v4 * scene_Klotzaeder( pos + v4*eps ).x \n  );\n}\n\nvec3 calcNormal_BouncingBall(vec3 pos, float eps) {\n  return normalize( \n      v1 * scene_BouncingBall( pos + v1*eps ).x +\n      v2 * scene_BouncingBall( pos + v2*eps ).x +\n      v3 * scene_BouncingBall( pos + v3*eps ).x +\n      v4 * scene_BouncingBall( pos + v4*eps ).x \n  );\n}\n\nvec2 raymarching( vec3 rayOrigin, vec3 rayDir, float maxd, float precis, int fxID ) {\n    float latest = precis * 2.0;\n    float dist   = 0.0;\n    float type   = -1.0;\n    vec2 result;\n    for (int i = 0; i < raymarchSteps; i++) {\n\n        if (latest < precis || dist > maxd) break;\n\n        if (fxID==FX_KLOTZAEDER) {\n        \tresult = scene_Klotzaeder( rayOrigin + rayDir * dist );\n        } else if (fxID==FX_BOUNCINGBALL) {\n        \tresult = scene_BouncingBall( rayOrigin + rayDir * dist );\n        }\n        \n        latest = result.x;\n        dist  += latest;\n\n        type = result.y;\n    }\n\n    vec2 res    = vec2(-1.0, -1.0 );\n    if (dist < maxd) { res = vec2( dist, type ); }\n    return res;\n}\n\nvec3 getRay(mat3 camMat, vec2 screenPos, float lensLength) {\n  return normalize(camMat * vec3(screenPos, lensLength));\n}\n\nvec3 getRay(vec3 origin, vec3 target, vec2 screenPos, float lensLength) {\n  mat3 camMat = calcLookAtMatrix(origin, target, 0.0);\n  return getRay(camMat, screenPos, lensLength);\n}\n\nvoid dddObject(float effectShowValue, float timeFX, inout vec4 resultColor, int fxID ) {\n\n    if ( !isInContentArea() ) {\n        return;\n    }\n    \n    kt = timeFX;\n    rpos = xyC;\n    rpos.x *= iResolution.x / iResolution.y;\n    rpos.x +=  1.2 + (exp(-effectShowValue*8.));\n    \n    vec3 rayDirection = getRay( camera, target, rpos, fov );\n    vec2 collision = raymarching( \n        camera, \n        rayDirection, \n        raymarchMaximumDistance, \n        raymarchPrecision,\n        fxID\n    );\n    \n    if ( collision.x > -0.5)\n    {\n        vec3 diffuseCol;\n        vec3 pos = camera + rayDirection * collision.x;\n        vec3 nor;\n        vec3 lightColor0;\n        vec3 lightColor1;\n        if (fxID==FX_KLOTZAEDER) {\n            dddLights_Klotzaeder();\n            nor = calcNormal_Klotzaeder( pos, 0.002);\n            diffuseCol  = vec3( 0.,0.1, 0.1);\n            lightColor0 = max( 0.0, dot( normalize( light0 ), nor) ) * color0;\n            lightColor1 = max( 0.0, dot( normalize( light1 ), nor) ) * color1;\n        } else if (fxID==FX_BOUNCINGBALL) {\n            dddLights_BouncingBall();\n            nor = calcNormal_BouncingBall( pos, 0.002);\n            diffuseCol  = vec3( 0.,0.1, 0.);\n            lightColor0 = max( 0.0, dot( normalize( light0 ), nor) ) * color0;\n            lightColor1 = max( 0.0, dot( normalize( light1 ), nor) ) * color1;            \n        }\n\n        float depth = 1./ log( collision.x );\n        resultColor = vec4( ( diffuseCol + lightColor0 + lightColor1 ) * depth, 1. );\n    }    \n}\n\n// FX - oldschool sin-scroller  //////////////////////////////////////////////////////////////////\n#define S(a) c+=char(float(a)); xyS.x-=0.5;\n#define _ S(32);\n#define _or S(33);\n#define _add S(43);\n#define _DOT S(46);\n#define _COMMA S(44)\n#define _HIGHCOMMA S(96);\n#define _6 S(54);\n\n#define _A S(65);\n#define _B S(66);\n#define _C S(67);\n#define _D S(68);\n#define _E S(69);\n#define _F S(70);\n#define _G S(71);\n#define _H S(72);\n#define _I S(73);\n#define _J S(74);\n#define _K S(75);\n#define _L S(76);\n#define _M S(77);\n#define _N S(78);\n#define _O S(79);\n#define _P S(80);\n#define _Q S(81);\n#define _R S(82);\n#define _S S(83);\n#define _T S(84);\n#define _U S(85);\n#define _V S(86);\n#define _W S(87);\n#define _X S(88);\n#define _Y S(89);\n#define _Z S(90);\n\n\n#define SCROLL_SPEED_1 5.0\n#define SCROLL_SPEED_2 8.0\n\n#define FONT_SIZE 0.10\n#define SIN_SPEED 3.0\n#define SCROLL_LEN_1 120.\n#define SCROLL_LEN_2 148.\n\nfloat char(float ch) {\n  return texture(iChannel1,clamp(xyS,0.0,1.00)/16.0 + fract(floor(vec2(ch,15.999-ch/16.))/16.0)).x;\n}\n\nfloat TextPart1()\n{\n    float c=0.;\n\t_I _T _HIGHCOMMA _S _  _T _I _M _E _COMMA _  _T _I _M _E _  _T _O _  _S _A _Y _  _G _O _O _D _B _Y _E _COMMA _  _T _I _M _E _  _T _O _  _T _H _A _N _K _  _A _L _L _  _A _T _  _B _I _G _P _O _I _N _T _  _A _N _D _  _E _S _P _E _C _I _A _L _L _Y _  _A _L _L _  _I _N _  _T _H _E _  _D _A _R _K _O _R _B _I _T _  _T _E _A _M _  _F _O _R _  _T _H _E _I _R _  _D _A _I _L _Y _  _W _O _R _K _  _T _O _  _K _E _E _P _  _S _U _C _H _  _A _N _  _O _L _D _  _A _N _D _  _H _A _R _D _  _T _O _  _M _A _I _N _T _A _I _N _  _P _R _O _J _E _C _T _  _A _L _I _V _E _  _T _O _  _P _A _V _E _  _T _H _E _  _W _A _Y _  _F _O _R _  _T _H _E _  _D _E _V _E _L _O _P _M _E _N _T _  _O _F _  _F _U _R _T _H _E _R _  _G _A _M _E _S _DOT \n    return c;\n}\n\nvoid sinScroller01(float ttt, inout vec4 resultColor) {\n\txyS    = xyC/FONT_SIZE;\n    xyS.y += 0.5+0.55*sin(xyS.x*.25+t*SIN_SPEED) * (xyS.x);\n    float s = 0.5*sin(xyS.x) + 0.2*cos(xyS.x*1.2);\n    xyS.x += -13.+mod(ttt*SCROLL_SPEED_1,SCROLL_LEN_1) - s;\n    resultColor += TextPart1() * vec4(COL_BORDER, 1.) * xy.x;\n}\n\nfloat TextPart2()\n{\n    float c=0.;\n\t_I _T _HIGHCOMMA _S _  _T _I _M _E _  _T _O _  _L _E _A _V _E _COMMA _  _E _V _E _N _  _I _F _  _I _T _  _W _A _S _N _HIGHCOMMA _T _  _A _N _  _E _A _S _Y _  _D _E _C _I _S _I _O _N _COMMA _  _B _U _T _  _W _O _R _K _I _N _G _  _M _O _R _E _  _T _H _A _N _  _6 _  _Y _E _A _R _S _  _F _O _R _  _T _H _I _S _  _C _O _M _P _A _N _Y _  _W _I _T _H _O _U _T _  _A _N _Y _  _S _A _L _A _R _Y _  _I _N _C _R _E _A _S _E _  _L _E _A _D _S _  _T _O _  _T _H _E _  _L _O _G _I _C _A _L _  _A _N _D _  _L _O _N _G _  _O _V _E _R _D _U _E _  _D _E _C _I _S _I _O _N _  _T _O _  _S _H _I _F _T _  _P _E _R _S _P _E _C _T _I _V _E _DOT _  _I _HIGHCOMMA _M _  _O _U _T _  _DOT _DOT _DOT _DOT _DOT _DOT _  _I _F _  _T _H _E _R _E _  _W _I _L _L _  _B _E _  _N _O _  _N _E _W _  _H _I _T _COMMA _  _T _H _E _R _E _  _W _I _L _L _  _B _E _  _A _  _H _I _T _  _F _O _R _  _S _U _R _E       \n    return c;\n}\n\nvoid sinScroller02(float ttt, inout vec4 resultColor) {\n\txyS    = xyC/FONT_SIZE;\n    xyS.y += 0.5+0.55*sin(xyS.x*.25-t*SIN_SPEED) * (xyS.x);\n    float s = 0.4*sin(xyS.x*0.8) - 0.3*cos(xyS.x*1.3);\n    xyS.x += -13.+mod(ttt*SCROLL_SPEED_2,SCROLL_LEN_2) - s;\n    resultColor += TextPart2() * vec4(COL_BORDER, 1.) * xy.x;\n}\n\nvoid effectExecuter(int effectID, float tStart, float tDuration, inout vec4 resultColor) {\n    float timeFrame = mod(iTime, PLAYBACK_TIME_S);\n    float tt = -tStart + timeFrame;\n    tt = clamp(tt,0.,tDuration);\n    float effectShowValue = clamp( (tDuration/2. * sin( (tt*3.1415)/tDuration) ),0.,1.);\n    if (effectShowValue<.01) {\n    \treturn;\n    } else {\n        switch(effectID) {\n            \n            case FX_CRANKUP_CONTRAST: crankUpContrast(effectShowValue, resultColor); break;\n            case FX_LISSAJOUS:        lissajous(effectShowValue, resultColor); break;\n            case FX_RASTERBARS:       rasterbars(effectShowValue, resultColor); break;\n            case FX_PIXELIZE:         pixelize(effectShowValue, resultColor); break;\n            case FX_SCANLINES:        scanlines(effectShowValue, resultColor); break;\n         \n            case FX_LOGO_CYTAX:       moveCytaxLogo(tt, resultColor); break;\n            \n            case FX_SCROLL_ONE:       sinScroller01(tt, resultColor); break;\n            case FX_SCROLL_TWO:       sinScroller02(tt, resultColor); break;\n            \n            case FX_BOUNCINGBALL:     dddObject(effectShowValue, tt, resultColor, effectID); break;\n            case FX_KLOTZAEDER:       dddObject(effectShowValue, tt, resultColor, effectID); break;    \n            \n\t\t\tcase FX_DECRUNCH:         decrunch(effectShowValue, resultColor); break;\n            case FX_NOISE:            noise(effectShowValue, resultColor); break;\n            case FX_GURU_MEDITATION:  meditate(tt, resultColor); break;\n            \n            \n        }\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    xy    = fragCoord.xy/iResolution.xy;\n    xyC   = xy*2.-1.;\n    xyF   = fragCoord.xy;\n\txy.y  = 1. - xy.y;\n    s     = iResolution.x/800.;\n\n    t = iTime;\n    \n    resultColor  = vec4( vec3(COL_BGND), 1. );\n    background(resultColor);\n    bassTheBackground(resultColor);\n\n    effectExecuter(FX_DECRUNCH         , 0.,.8, resultColor); \n\n    effectExecuter(FX_RASTERBARS       ,  1.0,  9.0, resultColor);\n\teffectExecuter(FX_LISSAJOUS        , 10.0,  9.0, resultColor);\n    effectExecuter(FX_PIXELIZE         , 10.0,  9.0, resultColor);\n    \n    effectExecuter(FX_RASTERBARS       , 21.0, 12.0, resultColor);\n    effectExecuter(FX_SCANLINES        , 21.0, 12.0, resultColor);\n    \n    effectExecuter(FX_LISSAJOUS        , 33.0, 12.0, resultColor);\n    effectExecuter(FX_PIXELIZE         , 32.0, 12.0, resultColor);\n    \n    \n    effectExecuter(FX_LOGO_CYTAX       ,  0.9, PLAYBACK_TIME_S, resultColor);\n    \n    \n    effectExecuter(FX_CRANKUP_CONTRAST , 27.3,  .75, resultColor);\n    effectExecuter(FX_CRANKUP_CONTRAST , 10.3,  .75, resultColor);\n    effectExecuter(FX_CRANKUP_CONTRAST ,  6.5,  .75, resultColor);\n    effectExecuter(FX_CRANKUP_CONTRAST ,  2.6,  .75, resultColor);\n        \n    \n    effectExecuter(FX_SCROLL_ONE       ,  2.0, 24.0, resultColor); \n    effectExecuter(FX_SCROLL_TWO       , 27.0, 21.0, resultColor);\n    \n    effectExecuter(FX_KLOTZAEDER       , 23.0, 20.0, resultColor);\n    effectExecuter(FX_BOUNCINGBALL     ,  2.0, 20.0, resultColor);\n\n    effectExecuter(FX_NOISE            ,  5.0,  1.0, resultColor); \n    effectExecuter(FX_NOISE            , 17.0,  1.0, resultColor); \n    effectExecuter(FX_NOISE            , 25.5,  2.5, resultColor); \n    \n    effectExecuter(FX_NOISE            , PLAYBACK_TIME_S-5.8,  3.0, resultColor); \n    effectExecuter(FX_GURU_MEDITATION  , PLAYBACK_TIME_S-4.6 , 4.6, resultColor);\n\n    \n    fragColor   = resultColor; \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int LOGO_START_Y      = 1;\nconst int LOGO_START_HEIGHT = LOGO_START_Y + 32;\n\nconst int GURU_START_Y      = LOGO_START_HEIGHT+1; \nconst int GURU_HEIGHT       = GURU_START_Y     + 35;\n\nvoid drawGuru( inout vec4 color, int xx, int yy )\n{\n\t\n\tfloat y = float(yy);\n    float x = float(xx);\n    \n    vec4 tile = vec4(0.0);\n\tif (y == 0.0) tile = ( x < 48.0 ) ? vec4(0xfff95b, 0xf96fff, 0xffffbf, 0xffffff) : ( x < 96.0 ) ? vec4(0xffffff, 0xffffff, 0xff9557, 0xfdbfff) : ( x < 144.0 ) ? vec4(0xfffd7f, 0xffffff, 0xffffff, 0xffffff) : ( x < 192.0 ) ? vec4(0xffffff, 0xfe557f, 0xffffff, 0xffffff) : ( x < 240.0 ) ? vec4(0xffffff, 0xff9bff, 0x6fffff, 0xffbff9) : ( x < 288.0 ) ? vec4(0xffffff) : ( x < 336.0 ) ? vec4(0x97ffff, 0xffffff, 0xfffaff, 0xfffffa) : ( x < 384.0 ) ? vec4(0xffffff, 0xfbffff, 0xffffff, 0xffffff) : ( x < 432.0 ) ? vec4(0xffffff, 0xefffff, 0xffdbff, 0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 1.0) tile = ( x < 48.0 ) ? vec4(0xfff807, 0xf41fff, 0xffff7f, 0xffffff) : ( x < 96.0 ) ? vec4(0xffffff, 0xffffff, 0xff8002, 0xfcbfff) : ( x < 144.0 ) ? vec4(0xfff82f, 0xffffff, 0xffffff, 0xffffff) : ( x < 192.0 ) ? vec4(0xffffff, 0xfd003f, 0xffffff, 0xffffff) : ( x < 240.0 ) ? vec4(0xffffff, 0xff47ff, 0x1fffff, 0xff7ff4) : ( x < 288.0 ) ? vec4(0xffffff) : ( x < 336.0 ) ? vec4(0x83ffff, 0xffffff, 0xfffaff, 0xfffffa) : ( x < 384.0 ) ? vec4(0xffffff, 0xf7ffff, 0xffffff, 0xffffff) : ( x < 432.0 ) ? vec4(0xffffff, 0xdfffff, 0xffd7ff, 0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 2.0) tile = ( x < 48.0 ) ? vec4(0xffe2f2, 0xe28bff, 0xffff2f, 0xffffff) : ( x < 96.0 ) ? vec4(0xffffff, 0xffffff, 0xff8b8b, 0xffffff) : ( x < 144.0 ) ? vec4(0xfff8bf, 0xffffff, 0xffffff, 0xffffff) : ( x < 192.0 ) ? vec4(0xffffff, 0xf8b8bf, 0xffffff, 0xffffff) : ( x < 240.0 ) ? vec4(0xffffff, 0xff5fff, 0x8bffff, 0xff2fe2) : ( x < 288.0 ) ? vec4(0xffffff) : ( x < 336.0 ) ? vec4(0x8fffff, 0xffffff, 0xfff8bf, 0xfffff8) : ( x < 384.0 ) ? vec4(0xffffff, 0xf1ffff, 0xffffff, 0xffffff) : ( x < 432.0 ) ? vec4(0xffffff, 0xd7ffff, 0xffffff, 0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 3.0) tile = ( x < 48.0 ) ? vec4(0xabf6e2, 0xe78bfa, 0xfafa1f, 0xfeabeb) : ( x < 96.0 ) ? vec4(0xaffaea, 0xfffffa, 0xaf9b8b, 0xfebffa) : ( x < 144.0 ) ? vec4(0xebf8bf, 0xebabeb, 0xffeabf, 0xffffff) : ( x < 192.0 ) ? vec4(0xffffff, 0xb8b8bf, 0xabfeaa, 0xfaabfe) : ( x < 240.0 ) ? vec4(0xfffaab, 0xff5fff, 0x8bfaab, 0xfa1fe7) : ( x < 288.0 ) ? vec4(0xfaffff, 0xfaaffa, 0xaffbfb, 0xeaafea) : ( x < 336.0 ) ? vec4(0x8fffff, 0xebebea, 0xbfe47f, 0xeabfe4) : ( x < 384.0 ) ? vec4(0xffeaaf, 0xa1ffff, 0xffaaff, 0xaaffff) : ( x < 432.0 ) ? vec4(0xbfaaff, 0x92ffaa, 0xffeaff, 0xbebeaa) : vec4(0xfeabfe, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 4.0) tile = ( x < 48.0 ) ? vec4(0x07ffc2, 0xff8bf8, 0xf5f40b, 0xf807d3) : ( x < 96.0 ) ? vec4(0x1ff081, 0xffffe0, 0x0bff8b, 0xfc2ff4) : ( x < 144.0 ) ? vec4(0xc7f8bf, 0xc207c7, 0xff807f, 0xffffff) : ( x < 192.0 ) ? vec4(0xffffff, 0x38b8bf, 0x02fd18, 0xf403fc) : ( x < 240.0 ) ? vec4(0xfff003, 0xff5fff, 0x8bf807, 0xf40bff) : ( x < 288.0 ) ? vec4(0xf1ffff, 0xf00ff1, 0x1fe2e2, 0xe01f80) : ( x < 336.0 ) ? vec4(0x8fffff, 0xd7d7d1, 0x3fc03f, 0x807fc0) : ( x < 384.0 ) ? vec4(0xff802f, 0x40bfff, 0xff40bf, 0x00ffff) : ( x < 432.0 ) ? vec4(0x7f00ff, 0x01fe00, 0xbfc1fe, 0x7d3d00) : vec4(0xfc02fd, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 5.0) tile = ( x < 48.0 ) ? vec4(0xa2fe4b, 0xff46e2, 0x65fe1f, 0xf5abd2) : ( x < 96.0 ) ? vec4(0x8bd647, 0xffffd6, 0xaff54b, 0xfc7fe2) : ( x < 144.0 ) ? vec4(0xc7f8bf, 0x591fc7, 0xff5a2f, 0xffffff) : ( x < 192.0 ) ? vec4(0xffffff, 0xbd54bf, 0xa5f8a0, 0xfaa5f4) : ( x < 240.0 ) ? vec4(0xfffaa1, 0xff5fff, 0x46e2a2, 0xfe1fff) : ( x < 288.0 ) ? vec4(0x91ffff, 0xd687d0, 0x8be2e2, 0x8a8bea) : ( x < 336.0 ) ? vec4(0x0fffff, 0xc7d78a, 0xbfe4bf, 0x5a2fe4) : ( x < 384.0 ) ? vec4(0xff5a2f, 0xe1ffff, 0xfe297f, 0x697fff) : ( x < 432.0 ) ? vec4(0x7d687d, 0x93fd68, 0xbfc7ff, 0x7d38a4) : vec4(0xf4a5fd, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 6.0) tile = ( x < 48.0 ) ? vec4(0xe2fd1f, 0xff42e2, 0x25ff2f, 0xf1ffd2) : ( x < 96.0 ) ? vec4(0x87c747, 0xffffc6, 0xfff50b, 0xfcbfd2) : ( x < 144.0 ) ? vec4(0xc7f8bf, 0x1d1fc7, 0xff1a1f, 0xffffff) : ( x < 192.0 ) ? vec4(0xffffff, 0xfd50bf, 0xa4f4e0, 0xffe5f4) : ( x < 240.0 ) ? vec4(0xfffef1, 0xff5fff, 0x02e2a2, 0xff2fff) : ( x < 288.0 ) ? vec4(0x51ffff, 0xc7c7d0, 0x8be2e2, 0x8a8bfb) : ( x < 336.0 ) ? vec4(0x0fffff, 0xc7d74e, 0xfff8bf, 0x1f1ff8) : ( x < 384.0 ) ? vec4(0xfe2f2f, 0xf1ffff, 0xfd3d3f, 0x7d7fff) : ( x < 432.0 ) ? vec4(0x7c7c7d, 0xd7fc7c, 0xbfd7ff, 0x7d38b8) : vec4(0xf4a4fd, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 7.0) tile = ( x < 48.0 ) ? vec4(0xe2e0bf, 0xff8be2, 0x25ff2f, 0xf00fd2) : ( x < 96.0 ) ? vec4(0x07c7c7, 0xffffc0, 0x2fff8b, 0xfcbfd0) : ( x < 144.0 ) ? vec4(0xc7f8bf, 0x1f1fc7, 0xff001f, 0xffffff) : ( x < 192.0 ) ? vec4(0xffffff, 0xfff8bf, 0x00f4f8, 0xfc03f4) : ( x < 240.0 ) ? vec4(0xfffc03, 0xff5fff, 0x8be002, 0xff2fff) : ( x < 288.0 ) ? vec4(0x21ffff, 0xc7c7d6, 0x1fe2e2, 0x800be0) : ( x < 336.0 ) ? vec4(0x4fffff, 0xc7d74f, 0xfff8bf, 0x1f1ff8) : ( x < 384.0 ) ? vec4(0xfe2f2f, 0xf1ffff, 0xfd3d3f, 0xfd7fff) : ( x < 432.0 ) ? vec4(0x7c7c7f, 0xd7fc7c, 0xbfc7ff, 0x7d38b8) : vec4(0xf400fd, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 8.0) tile = ( x < 48.0 ) ? vec4(0xe2e1f6, 0xff8be2, 0xa2ef2f, 0xf1a6e1) : ( x < 96.0 ) ? vec4(0x87ebc7, 0xffffea, 0xa7ff8b, 0xfcbfd2) : ( x < 144.0 ) ? vec4(0xc7f8bf, 0xaf1fc7, 0xffaa1f, 0xfffffa) : ( x < 192.0 ) ? vec4(0xffffff, 0xfff8bf, 0xa4faf8, 0xf8abfa) : ( x < 240.0 ) ? vec4(0xfff5ab, 0xff5fff, 0x8bfa92, 0xef2fff) : ( x < 288.0 ) ? vec4(0xb1ffff, 0xc7c7d6, 0xafe2e2, 0xea4bd6) : ( x < 336.0 ) ? vec4(0x4fffff, 0xc7d74f, 0xffb8bf, 0x1f1fb8) : ( x < 384.0 ) ? vec4(0xfe2f2f, 0xb1ffff, 0xfd3d3e, 0xbd7fff) : ( x < 432.0 ) ? vec4(0x7c7c7e, 0xd7fc7c, 0xbfd7fe, 0x7d38b8) : vec4(0xfaa4fd, 0x00009f, 0x000000, 0x000000);\n\tif (y == 9.0) tile = ( x < 48.0 ) ? vec4(0xe2e2f2, 0xff8be2, 0xd3db2f, 0xf1f1f1) : ( x < 96.0 ) ? vec4(0xc7ffc7, 0xffffff, 0xd3ff8b, 0xfcbfd3) : ( x < 144.0 ) ? vec4(0xc7f8bf, 0xff1fc7, 0xffff1f, 0xfffff5) : ( x < 192.0 ) ? vec4(0xffffff, 0xfff8bf, 0xf4fff8, 0xf5ffff) : ( x < 240.0 ) ? vec4(0xfff1ff, 0xff5fff, 0x8bffe2, 0xdb2fff) : ( x < 288.0 ) ? vec4(0xf1ffff, 0xc7d7d7, 0xffe2e2, 0xff8b8b) : ( x < 336.0 ) ? vec4(0x4fffff, 0xc7d74b, 0xff78bf, 0x1f1f78) : ( x < 384.0 ) ? vec4(0xfe2f2f, 0xb1ffff, 0xfd3d3e, 0x7d7fff) : ( x < 432.0 ) ? vec4(0x7c7d7d, 0xd7fc7c, 0xbfd7f9, 0x7d38b8) : vec4(0xfff4fd, 0x00008b, 0x000000, 0x000000);\n\tif (y == 10.0) tile = ( x < 48.0 ) ? vec4(0x07f807, 0xff02f4, 0xd3f47f, 0xd603f1) : ( x < 96.0 ) ? vec4(0x1fff42, 0xffffe0, 0x0bfd03, 0xf02f88) : ( x < 144.0 ) ? vec4(0x0ff03f, 0xfd0b58, 0xff807f, 0xfffff5) : ( x < 192.0 ) ? vec4(0xffffff, 0x7fc03f, 0x02ffe0, 0xfc01fd) : ( x < 240.0 ) ? vec4(0xfff801, 0xfe07ff, 0x02f807, 0xf47fff) : ( x < 288.0 ) ? vec4(0xf1ffff, 0xe00fd7, 0x0bc507, 0xe01fe0) : ( x < 336.0 ) ? vec4(0x2fffff, 0x480fd0, 0xffc2ff, 0x807f82) : ( x < 384.0 ) ? vec4(0xfe2f2f, 0x47ffff, 0xff40bf, 0x00ffff) : ( x < 432.0 ) ? vec4(0x7e00ff, 0x0ffc7c, 0xbf42fe, 0x80b8b8) : vec4(0xfd02f8, 0x00008b, 0x000000, 0x000000);\n\tif (y == 11.0) tile = ( x < 48.0 ) ? vec4(0x5bf95b, 0xff56f9, 0xe7f5bf, 0xd657f5) : ( x < 96.0 ) ? vec4(0x5fff96, 0xffffe5, 0x5bfd57, 0xf56f9d) : ( x < 144.0 ) ? vec4(0x5ff57f, 0xfe5b59, 0xff957f, 0xfffff5) : ( x < 192.0 ) ? vec4(0xffffff, 0x7fd57f, 0x57ffe5, 0xfd55fd) : ( x < 240.0 ) ? vec4(0xfffd55, 0xfe5bff, 0x56f95b, 0xf5bfff) : ( x < 288.0 ) ? vec4(0xf6ffff, 0xf55fd7, 0x5bda5b, 0xe56fe5) : ( x < 336.0 ) ? vec4(0x6fffff, 0x995fd5, 0xffd6ff, 0x957fd6) : ( x < 384.0 ) ? vec4(0xff6f6f, 0x97ffff, 0xff55bf, 0x55ffff) : ( x < 432.0 ) ? vec4(0xbf55ff, 0x5ffdbd, 0xbf96fe, 0xd5f9f9) : vec4(0xfd57f9, 0x00009b, 0x000000, 0x000000);\n\tif (y == 12.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff) : ( x < 144.0 ) ? vec4(0xffffff) : ( x < 192.0 ) ? vec4(0xffffff) : ( x < 240.0 ) ? vec4(0xffffff) : ( x < 288.0 ) ? vec4(0xffffff) : ( x < 336.0 ) ? vec4(0xffffff) : ( x < 384.0 ) ? vec4(0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 13.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff) : ( x < 144.0 ) ? vec4(0xffffff) : ( x < 192.0 ) ? vec4(0xffffff) : ( x < 240.0 ) ? vec4(0xffffff) : ( x < 288.0 ) ? vec4(0xffffff) : ( x < 336.0 ) ? vec4(0xffffff) : ( x < 384.0 ) ? vec4(0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 14.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff) : ( x < 144.0 ) ? vec4(0xffffff) : ( x < 192.0 ) ? vec4(0xffffff) : ( x < 240.0 ) ? vec4(0xffffff) : ( x < 288.0 ) ? vec4(0xffffff) : ( x < 336.0 ) ? vec4(0xffffff) : ( x < 384.0 ) ? vec4(0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 15.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff) : ( x < 144.0 ) ? vec4(0xffffff) : ( x < 192.0 ) ? vec4(0xffffff) : ( x < 240.0 ) ? vec4(0xffffff) : ( x < 288.0 ) ? vec4(0xffffff) : ( x < 336.0 ) ? vec4(0xffffff) : ( x < 384.0 ) ? vec4(0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 16.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff) : ( x < 144.0 ) ? vec4(0xffffff) : ( x < 192.0 ) ? vec4(0xffffff) : ( x < 240.0 ) ? vec4(0xffffff) : ( x < 288.0 ) ? vec4(0xffffff) : ( x < 336.0 ) ? vec4(0xffffff) : ( x < 384.0 ) ? vec4(0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 17.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff) : ( x < 144.0 ) ? vec4(0xffffff) : ( x < 192.0 ) ? vec4(0xffffff) : ( x < 240.0 ) ? vec4(0xffffff) : ( x < 288.0 ) ? vec4(0xffffff) : ( x < 336.0 ) ? vec4(0xffffff) : ( x < 384.0 ) ? vec4(0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 18.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff) : ( x < 144.0 ) ? vec4(0xffffff) : ( x < 192.0 ) ? vec4(0xffffff) : ( x < 240.0 ) ? vec4(0xffffff) : ( x < 288.0 ) ? vec4(0xffffff) : ( x < 336.0 ) ? vec4(0xffffff) : ( x < 384.0 ) ? vec4(0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 19.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff) : ( x < 144.0 ) ? vec4(0xffffff) : ( x < 192.0 ) ? vec4(0xffffff) : ( x < 240.0 ) ? vec4(0xffffff) : ( x < 288.0 ) ? vec4(0xffffff) : ( x < 336.0 ) ? vec4(0xffffff) : ( x < 384.0 ) ? vec4(0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 20.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff) : ( x < 144.0 ) ? vec4(0xffffff) : ( x < 192.0 ) ? vec4(0xffffff) : ( x < 240.0 ) ? vec4(0xffffff) : ( x < 288.0 ) ? vec4(0xffffff) : ( x < 336.0 ) ? vec4(0xffffff) : ( x < 384.0 ) ? vec4(0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 21.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff) : ( x < 144.0 ) ? vec4(0xffffff) : ( x < 192.0 ) ? vec4(0xffffff) : ( x < 240.0 ) ? vec4(0xffffff) : ( x < 288.0 ) ? vec4(0xffffff) : ( x < 336.0 ) ? vec4(0xffffff) : ( x < 384.0 ) ? vec4(0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 22.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff) : ( x < 144.0 ) ? vec4(0xffffff) : ( x < 192.0 ) ? vec4(0xffffff) : ( x < 240.0 ) ? vec4(0xffffff) : ( x < 288.0 ) ? vec4(0xffffff) : ( x < 336.0 ) ? vec4(0xffffff) : ( x < 384.0 ) ? vec4(0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 23.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff) : ( x < 144.0 ) ? vec4(0xffffff) : ( x < 192.0 ) ? vec4(0xffffff) : ( x < 240.0 ) ? vec4(0xffffff) : ( x < 288.0 ) ? vec4(0xffffff) : ( x < 336.0 ) ? vec4(0xffffff) : ( x < 384.0 ) ? vec4(0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 24.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff, 0xffffff, 0xffffff, 0xfffaaf) : ( x < 144.0 ) ? vec4(0xffffff, 0xffffff, 0xfffbff, 0xffffff) : ( x < 192.0 ) ? vec4(0xfeffea, 0xffffff, 0xfbffff, 0xfffaff) : ( x < 240.0 ) ? vec4(0xffffff, 0xbfffff, 0xaaffae, 0xffaaff) : ( x < 288.0 ) ? vec4(0xaaffaa, 0xffabff, 0xabfeab, 0xfaaafe) : ( x < 336.0 ) ? vec4(0xafffff, 0xfaaafe, 0xaffeab, 0xfaabfe) : ( x < 384.0 ) ? vec4(0xaffaaf, 0xfaaffa, 0xffffff, 0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 25.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff, 0xffffff, 0xffffff, 0xfff00b) : ( x < 144.0 ) ? vec4(0xffffff, 0xffffff, 0xaff6ff, 0xffffff) : ( x < 192.0 ) ? vec4(0xf8bfd1, 0xfffaff, 0xf6ffff, 0xfff5ff) : ( x < 240.0 ) ? vec4(0xffffff, 0x3fffff, 0x00ff1d, 0xff00ff) : ( x < 288.0 ) ? vec4(0x01fe01, 0xfe01fe, 0x02fd02, 0xf400fd) : ( x < 336.0 ) ? vec4(0x0fffff, 0xf001fc, 0x1ff807, 0xe002f8) : ( x < 384.0 ) ? vec4(0x0bf40b, 0xf00ff0, 0xffffff, 0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 26.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff, 0xffffff, 0xffffff, 0xffe297) : ( x < 144.0 ) ? vec4(0xffffff, 0xffffff, 0x9be2ff, 0xffffff) : ( x < 192.0 ) ? vec4(0xfeffd2, 0xfff9ff, 0xf5ffff, 0xfffaff) : ( x < 240.0 ) ? vec4(0xffffff, 0x3fffff, 0x297f1d, 0xbd68bd) : ( x < 288.0 ) ? vec4(0x68bd68, 0xf965bd, 0xa5f8a5, 0xfaa4f8) : ( x < 336.0 ) ? vec4(0x97ffff, 0xfaa1fe, 0x8bf5a2, 0xfa92f8) : ( x < 384.0 ) ? vec4(0x97e297, 0xd297e2, 0xffffff, 0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 27.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff, 0xffffff, 0xffffff, 0xffd7d3) : ( x < 144.0 ) ? vec4(0xffffff, 0xffffff, 0x8be2ff, 0xffffff) : ( x < 192.0 ) ? vec4(0xffffd3, 0xfff8bf, 0xf4ffff, 0xffffff) : ( x < 240.0 ) ? vec4(0xffffff, 0x3fffff, 0x7d7f1d, 0x7c7c7d) : ( x < 288.0 ) ? vec4(0xb8bc7c, 0xb8b8b8, 0xf8f8b8, 0xfff4f4) : ( x < 336.0 ) ? vec4(0xd3ffff, 0xfff1ff, 0x87e2e2, 0xffe2f8) : ( x < 384.0 ) ? vec4(0xd3d3e3, 0xd7d7d3, 0xffffff, 0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 28.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff, 0xffffff, 0xffffff, 0xf1fff5) : ( x < 144.0 ) ? vec4(0xf081f1, 0xffe2e2, 0x8382ff, 0x0fd02f) : ( x < 192.0 ) ? vec4(0xf82fd2, 0x1fc03f, 0x807fe0, 0x7ff47f) : ( x < 240.0 ) ? vec4(0x402f80, 0x1fffff, 0x1d7d00, 0x7c1d7d) : ( x < 288.0 ) ? vec4(0x28bc2c, 0xb828b8, 0xfff838, 0xfc00f4) : ( x < 336.0 ) ? vec4(0xf1ffff, 0xf801ff, 0xa2e0a2, 0xf402f8) : ( x < 384.0 ) ? vec4(0xffd3ff, 0xd7d7d3, 0xffffff, 0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 29.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff, 0xffffff, 0xffffff, 0xf1eaf5) : ( x < 144.0 ) ? vec4(0xe582f1, 0xffe2e2, 0x8142ff, 0x4b955f) : ( x < 192.0 ) ? vec4(0xf87fd2, 0x6fd47f, 0xd4bfd5, 0x7ff4bf) : ( x < 240.0 ) ? vec4(0x552f55, 0x2ffffe, 0x187e05, 0x7c187d) : ( x < 288.0 ) ? vec4(0x14bc18, 0xb814b8, 0xaff824, 0xf855f8) : ( x < 336.0 ) ? vec4(0xa1ffff, 0xf556fe, 0xa5e052, 0xe557f8) : ( x < 384.0 ) ? vec4(0xbfe2af, 0xe29be2, 0xffffff, 0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 30.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff, 0xffffff, 0xffffff, 0xf1d1f5) : ( x < 144.0 ) ? vec4(0xc747f1, 0xffe2e2, 0x8002ff, 0xd38b8b) : ( x < 192.0 ) ? vec4(0xf8bfd1, 0xfff8bf, 0xf4ffcb, 0x2ff5ff) : ( x < 240.0 ) ? vec4(0x2e2e2e, 0x3ffffe, 0x007f1d, 0x7c007d) : ( x < 288.0 ) ? vec4(0x00bc00, 0xb800b8, 0x1ff800, 0xf4fffd) : ( x < 336.0 ) ? vec4(0x01ffff, 0xf1fffc, 0xb8a002, 0xe2fff8) : ( x < 384.0 ) ? vec4(0x2ff42f, 0xf00ff0, 0xffffff, 0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 31.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff, 0xffffff, 0xffffff, 0xf1d3f5) : ( x < 144.0 ) ? vec4(0xc7c7f1, 0xffe2e2, 0x8852ff, 0xd3850b) : ( x < 192.0 ) ? vec4(0xf8bfd2, 0x7ff8bf, 0xf4ffc1, 0x2ff5ff) : ( x < 240.0 ) ? vec4(0x2e2e2e, 0x1ffffe, 0x647d04, 0x7c647d) : ( x < 288.0 ) ? vec4(0x60bc64, 0xb8a0b8, 0xa6f8a0, 0xf4ffff) : ( x < 336.0 ) ? vec4(0xa1ffff, 0xf1fff5, 0x50a182, 0xe2ffe0) : ( x < 384.0 ) ? vec4(0xbfe2bf, 0xd697d2, 0xffffff, 0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 32.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff, 0xffffff, 0xffffff, 0xf1d3f5) : ( x < 144.0 ) ? vec4(0xd7c7f1, 0xffe2e2, 0x8962ff, 0xd3950b) : ( x < 192.0 ) ? vec4(0xf8bfd3, 0x6ff8bf, 0xf4ffc1, 0x2ff5ff) : ( x < 240.0 ) ? vec4(0x2e2e2e, 0x1ffffe, 0x783d04, 0x7c747d) : ( x < 288.0 ) ? vec4(0xb4bc74, 0xb8b0b8, 0xe2f8a0, 0xf4fefe) : ( x < 336.0 ) ? vec4(0xf1ffef, 0xf1fbf1, 0x55e2d2, 0xe2fbe0) : ( x < 384.0 ) ? vec4(0xfbd3fb, 0xd7d7d3, 0xffffff, 0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 33.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff, 0xffffff, 0xffffff, 0xf1d3d3) : ( x < 144.0 ) ? vec4(0xffc7f1, 0xffe2e2, 0x8be2ff, 0xd3ff8b) : ( x < 192.0 ) ? vec4(0xf8bfd3, 0xc778bf, 0x74ffc7, 0x2ff5ff) : ( x < 240.0 ) ? vec4(0x2e2e2e, 0x3ffffe, 0x7d7f1d, 0x7c7c7d) : ( x < 288.0 ) ? vec4(0xb8bc7c, 0xb8b8b8, 0xf8f8b8, 0xf4f4f4) : ( x < 336.0 ) ? vec4(0xf5ff8b, 0xf1f1f1, 0xffe2e2, 0xe2e2f8) : ( x < 384.0 ) ? vec4(0xd3d3e3, 0xd7d7d3, 0xffffff, 0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 34.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff, 0xffffff, 0xffffff, 0x52d157) : ( x < 144.0 ) ? vec4(0xff82e2, 0xffd556, 0x8be2ff, 0x5be55f) : ( x < 192.0 ) ? vec4(0xf47f89, 0x5b95ff, 0x95ff59, 0x7fe0bf) : ( x < 240.0 ) ? vec4(0x2e2f55, 0x3ffffe, 0x14bf5d, 0xbe14be) : ( x < 288.0 ) ? vec4(0x55bd54, 0xfd55fd, 0x54f955, 0xf855f4) : ( x < 336.0 ) ? vec4(0x52ff8b, 0xf552f9, 0x6ff556, 0xe557e4) : ( x < 384.0 ) ? vec4(0x57e557, 0xe14be1, 0xffffff, 0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\tif (y == 35.0) tile = ( x < 48.0 ) ? vec4(0xffffff) : ( x < 96.0 ) ? vec4(0xffffff, 0xffffff, 0xffffff, 0x07d00b) : ( x < 144.0 ) ? vec4(0xff41d6, 0xffc507, 0x8be2ff, 0x0fd02f) : ( x < 192.0 ) ? vec4(0xf02f48, 0x1fc2ff, 0x82ff18, 0x7fd07f) : ( x < 240.0 ) ? vec4(0x2e2f80, 0x3ffffe, 0x00ff1d, 0xff00ff) : ( x < 288.0 ) ? vec4(0x01fe01, 0xfe01fe, 0x00fd02, 0xfc02f4) : ( x < 336.0 ) ? vec4(0x03ff8b, 0xf807fc, 0x1ff807, 0xf40be0) : ( x < 384.0 ) ? vec4(0x0bf40b, 0xf00ff0, 0xffffff, 0xffffff) : ( x < 432.0 ) ? vec4(0xffffff) : vec4(0xffffff, 0x0000ff, 0x000000, 0x000000);\n\t\n\tfloat n = mod(x, 48.0);\n\tfloat t = ( ( n < 12.0 ) ? tile.x : ( n < 24.0 ) ? tile.y : (n < 36.0 ) ? tile.z : tile.w );\n\tfloat p = mod( x, 12.0 ) * 2.0;\n\tint idx = int( mod( floor( t * exp2(-p) ), 4.0)); \n\tif (idx == 0) color = vec4(0.945098, 0.121569, 0.015686, 1.0);\n\tif (idx == 1) color = vec4(0.733333, 0.094118, 0.015686, 1.0);\n\tif (idx == 2) color = vec4(0.290196, 0.043137, 0.019608, 1.0);\n\tif (idx == 3) color = vec4(0.015686, 0.007843, 0.015686, 1.0);\n}\n\nvoid drawCytax( inout vec4 color, int xx, int yy )\n{\n\t\n\tfloat y = float(yy);\n    float x = float(xx);\n    \n    vec4 tile = vec4(0.0);\n\tif (y == 0.0) tile = ( x < 32.0 ) ? vec4(0xffffff, 0xb76fff, 0xb6db6d, 0xb6db6d) : ( x < 64.0 ) ? vec4(0xb6db6d, 0xb6db6d, 0xdadb6d, 0xb6db6d) : ( x < 96.0 ) ? vec4(0xb6db6d, 0xffdb6d, 0xb6db6e, 0xb6db6d) : ( x < 128.0 ) ? vec4(0xf6db6d, 0xdbffff, 0xb6db6d, 0xb6db6d) : ( x < 160.0 ) ? vec4(0xb6db6d, 0xb6db6d, 0xd6db6d, 0xffffff) : ( x < 192.0 ) ? vec4(0xffffff, 0xffffff, 0xb6ddbf, 0xdffdad) : ( x < 224.0 ) ? vec4(0xb6db6d, 0xb6db6d, 0xfedb6d, 0xb6db6e) : vec4(0xb6db6d, 0xf6db6d, 0xffffff, 0x000000);\n\tif (y == 1.0) tile = ( x < 32.0 ) ? vec4(0xffffff, 0x264b76, 0x249249, 0x249249) : ( x < 64.0 ) ? vec4(0x049249, 0x248000, 0x961249, 0x249249) : ( x < 96.0 ) ? vec4(0x249249, 0xff4241, 0x24924d, 0x249249) : ( x < 128.0 ) ? vec4(0xf09249, 0x92ddff, 0x24924c, 0x249249) : ( x < 160.0 ) ? vec4(0x249249, 0x249249, 0xb09249, 0xfffffe) : ( x < 192.0 ) ? vec4(0xffffff, 0xdfffff, 0x24c92e, 0xdf5909) : ( x < 224.0 ) ? vec4(0x24924c, 0x249249, 0xf89249, 0x249266) : vec4(0x249209, 0xd09249, 0xffffff, 0x000000);\n\tif (y == 2.0) tile = ( x < 32.0 ) ? vec4(0xdfffff, 0x648265, 0x4db6db, 0x492480) : ( x < 64.0 ) ? vec4(0x002492, 0x680000, 0x961243, 0x6d9249) : ( x < 96.0 ) ? vec4(0x492692, 0xff4240, 0x49264d, 0x49249a) : ( x < 128.0 ) ? vec4(0xe486da, 0x24c9b7, 0x49a481, 0x492492) : ( x < 160.0 ) ? vec4(0x492492, 0x492492, 0x8486d2, 0xfffffe) : ( x < 192.0 ) ? vec4(0xffffff, 0xb77fff, 0x6c924c, 0xda4249) : ( x < 224.0 ) ? vec4(0x6db04c, 0x492489, 0xf4b492, 0x6d9266) : vec4(0x498000, 0x84925a, 0xffffff, 0x000000);\n\tif (y == 3.0) tile = ( x < 32.0 ) ? vec4(0x9bffff, 0x49b2c9, 0x492492, 0x492492) : ( x < 64.0 ) ? vec4(0x000492, 0x490000, 0x723492, 0x492480) : ( x < 96.0 ) ? vec4(0x492492, 0xdb4240, 0x4926cc, 0x492492) : ( x < 128.0 ) ? vec4(0xc4a492, 0x649336, 0x49249b, 0x492492) : ( x < 160.0 ) ? vec4(0x492492, 0x4924d2, 0x84a49a, 0xfffffe) : ( x < 192.0 ) ? vec4(0xffffff, 0x32edff, 0x492481, 0xd0925b) : ( x < 224.0 ) ? vec4(0x49308c, 0x492492, 0xd1a492, 0x4db26e) : vec4(0x492480, 0x849492, 0xfffffe, 0x000000);\n\tif (y == 4.0) tile = ( x < 32.0 ) ? vec4(0x266fff, 0x492492, 0x492492, 0x492692) : ( x < 64.0 ) ? vec4(0x000012, 0x6da000, 0x6e46db, 0x492492) : ( x < 96.0 ) ? vec4(0x092492, 0xdf4240, 0x4906c4, 0x492492) : ( x < 128.0 ) ? vec4(0xc4a492, 0x0db065, 0x6d9649, 0x492493) : ( x < 160.0 ) ? vec4(0x412492, 0x49a492, 0x24b4d2, 0xfffffd) : ( x < 192.0 ) ? vec4(0xffffff, 0x04cbb7, 0x492492, 0xad8482) : ( x < 224.0 ) ? vec4(0x4924dd, 0x49249a, 0xd1a492, 0x4db337) : vec4(0x492490, 0x24b692, 0xfffffd, 0x000000);\n\tif (y == 5.0) tile = ( x < 32.0 ) ? vec4(0x6a5dff, 0x692492, 0x2036db, 0x0136db) : ( x < 64.0 ) ? vec4(0x000000, 0x249200, 0x4e4249, 0x4924d2) : ( x < 96.0 ) ? vec4(0x012492, 0xdf4240, 0x4906cc, 0x492492) : ( x < 128.0 ) ? vec4(0xc58492, 0x2d30cc, 0x4c38c9, 0x492492) : ( x < 160.0 ) ? vec4(0x492492, 0x4d801a, 0x249258, 0xfffffe) : ( x < 192.0 ) ? vec4(0xdfffff, 0x4c9325, 0x400492, 0x8c249b) : ( x < 224.0 ) ? vec4(0x4100dd, 0x492480, 0xa4a412, 0x00033f) : vec4(0x492492, 0x2d3492, 0xfffffc, 0x000000);\n\tif (y == 6.0) tile = ( x < 32.0 ) ? vec4(0x49cbff, 0x412492, 0x848002, 0x924924) : ( x < 64.0 ) ? vec4(0x921324, 0x924924, 0x664924, 0x49249b) : ( x < 96.0 ) ? vec4(0x0004d2, 0xdb5240, 0x4904c4, 0x492492) : ( x < 128.0 ) ? vec4(0xa5a492, 0x2126cc, 0x4d4b64, 0x492492) : ( x < 160.0 ) ? vec4(0x6da492, 0x924924, 0x924924, 0xfffffe) : ( x < 192.0 ) ? vec4(0x977fff, 0x0d924c, 0x4db480, 0x8c3492) : ( x < 224.0 ) ? vec4(0x4982dd, 0x492482, 0x85a4d2, 0x240177) : vec4(0x482492, 0x21a092, 0xfffff4, 0x000000);\n\tif (y == 7.0) tile = ( x < 32.0 ) ? vec4(0x4d9bff, 0x412490, 0xb23402, 0xb6db6d) : ( x < 64.0 ) ? vec4(0xb6db6d, 0xb6db6d, 0x065b6d, 0x492490) : ( x < 96.0 ) ? vec4(0x0006d2, 0xdb5840, 0x4924c9, 0x492492) : ( x < 128.0 ) ? vec4(0xb0a492, 0x6106d9, 0x4c4db5, 0x4da4d2) : ( x < 160.0 ) ? vec4(0x918090, 0xb6db6d, 0xb6db6d, 0xffffff) : ( x < 192.0 ) ? vec4(0x325dff, 0x724649, 0x019249, 0x6d2492) : ( x < 224.0 ) ? vec4(0x499265, 0x492492, 0x852492, 0x0d81be) : vec4(0x492492, 0x252492, 0xffffe9, 0x000000);\n\tif (y == 8.0) tile = ( x < 32.0 ) ? vec4(0x4989bf, 0x492492, 0xb6c6d2, 0xb6ed6e) : ( x < 64.0 ) ? vec4(0xb6db6d, 0xb6db6d, 0x264b6d, 0x4d26c0) : ( x < 96.0 ) ? vec4(0x000003, 0xbb4848, 0x49008b, 0x6db692) : ( x < 128.0 ) ? vec4(0xb4b493, 0x2d800c, 0x49b65b, 0x492492) : ( x < 160.0 ) ? vec4(0xb6349a, 0xbb5b75, 0xf6dd6d, 0xffffff) : ( x < 192.0 ) ? vec4(0x24c977, 0x96c909, 0x4906dc, 0x2d2492) : ( x < 224.0 ) ? vec4(0x49826c, 0x49249a, 0x252492, 0x0989b5) : vec4(0x492492, 0x2da092, 0xffffe9, 0x000000);\n\tif (y == 9.0) tile = ( x < 32.0 ) ? vec4(0x49137f, 0x493692, 0xb646d2, 0xb6db6e) : ( x < 64.0 ) ? vec4(0xb6db6d, 0xb6db6d, 0x325b6d, 0x01b240) : ( x < 96.0 ) ? vec4(0x000000, 0x924258, 0x4920d8, 0x249002) : ( x < 128.0 ) ? vec4(0xd64600, 0x248264, 0x4d8209, 0x492492) : ( x < 160.0 ) ? vec4(0xb23412, 0xb6db6d, 0xf65b6d, 0xdbffff) : ( x < 192.0 ) ? vec4(0x849325, 0xb75b64, 0x4924e4, 0x242492) : ( x < 224.0 ) ? vec4(0x481934, 0x492492, 0x0c2492, 0x09396c) : vec4(0x492492, 0x212692, 0xffffe9, 0x000000);\n\tif (y == 10.0) tile = ( x < 32.0 ) ? vec4(0x48333f, 0x49b6d2, 0xb1b412, 0xdb6db6) : ( x < 64.0 ) ? vec4(0xb6db6d, 0xbb5b6d, 0x96db6d, 0x24924c) : ( x < 96.0 ) ? vec4(0x000000, 0x6db248, 0x4930d8, 0x24924b) : ( x < 128.0 ) ? vec4(0xd6d921, 0x92492d, 0x4d9924, 0x492492) : ( x < 160.0 ) ? vec4(0x8da012, 0xbadb64, 0xfa496d, 0x976fff) : ( x < 192.0 ) ? vec4(0x909249, 0x92ddad, 0x49249b, 0x25a492) : ( x < 224.0 ) ? vec4(0x6e4b74, 0x492482, 0x0d2692, 0x483649) : vec4(0x492492, 0x91b612, 0xfffff5, 0x000000);\n\tif (y == 11.0) tile = ( x < 32.0 ) ? vec4(0x49333f, 0x49b6db, 0x8424d2, 0xb75b75) : ( x < 64.0 ) ? vec4(0xb6db6d, 0xb6db6d, 0xbadb6d, 0x92492d) : ( x < 96.0 ) ? vec4(0x00000c, 0x492098, 0x69309a, 0x924923) : ( x < 128.0 ) ? vec4(0xd6db6c, 0xb6db6d, 0x4ccb6d, 0x492492) : ( x < 160.0 ) ? vec4(0x202492, 0xb6db23, 0xfe496d, 0x665bff) : ( x < 192.0 ) ? vec4(0xb6369b, 0x6e5bb6, 0x492492, 0x25a492) : ( x < 224.0 ) ? vec4(0x92edb1, 0x492482, 0x6d2492, 0x6c1208) : vec4(0x492492, 0xd5b6d2, 0xfffffe, 0x000000);\n\tif (y == 12.0) tile = ( x < 32.0 ) ? vec4(0x09227f, 0x49a4db, 0x202492, 0xbb6dac) : ( x < 64.0 ) ? vec4(0xb6db6e, 0xdb5b6d, 0xbadbb6, 0xb6db6d) : ( x < 96.0 ) ? vec4(0x000025, 0x4924da, 0x612492, 0xb6db6c) : ( x < 128.0 ) ? vec4(0xdadb75, 0xb6db6e, 0x4ccb6d, 0x492492) : ( x < 160.0 ) ? vec4(0x492492, 0xb6d8da, 0xff496d, 0x609937) : ( x < 192.0 ) ? vec4(0xd63692, 0x44c976, 0x492492, 0x252492) : ( x < 224.0 ) ? vec4(0x6e5db1, 0x492493, 0x692492, 0x4c9658) : vec4(0x492492, 0x91b612, 0xffffec, 0x000000);\n\tif (y == 13.0) tile = ( x < 32.0 ) ? vec4(0x09227f, 0x4980db, 0x69a492, 0xdb5bac) : ( x < 64.0 ) ? vec4(0xb76db6, 0xb6db6d, 0xdb6bb6, 0xb6db6d) : ( x < 96.0 ) ? vec4(0x000025, 0x492492, 0x692492, 0xb6db74) : ( x < 128.0 ) ? vec4(0xd6eb6d, 0xb6db6e, 0x4ccb6d, 0x492492) : ( x < 160.0 ) ? vec4(0x492492, 0xb758d2, 0xdb496d, 0x499265) : ( x < 192.0 ) ? vec4(0x909492, 0x4c132d, 0x492492, 0x25b492) : ( x < 224.0 ) ? vec4(0x6c9ba9, 0x492493, 0x412092, 0x4e491b) : vec4(0x492492, 0x2d86d2, 0xfffd61, 0x000000);\n\tif (y == 14.0) tile = ( x < 32.0 ) ? vec4(0x09227f, 0x498092, 0x292492, 0xff6d6c) : ( x < 64.0 ) ? vec4(0xffffff, 0xffffff, 0xdfffff, 0xb6db6e) : ( x < 96.0 ) ? vec4(0x400025, 0x492492, 0x0d2492, 0xd6edb4) : ( x < 128.0 ) ? vec4(0xd76d75, 0xb6db76, 0x4ccb76, 0x492492) : ( x < 160.0 ) ? vec4(0x492492, 0xff581a, 0x936dbf, 0x4d2049) : ( x < 192.0 ) ? vec4(0x24c6d2, 0x6c1249, 0x492493, 0x25b492) : ( x < 224.0 ) ? vec4(0x4809a0, 0x492482, 0x492492, 0x0e5b5b) : vec4(0x492412, 0x018492, 0xffe860, 0x000000);\n\tif (y == 15.0) tile = ( x < 32.0 ) ? vec4(0x6d227f, 0x49a090, 0x692492, 0xff6d6c) : ( x < 64.0 ) ? vec4(0xffffff, 0xffffff, 0xffffff, 0xb6dbb7) : ( x < 96.0 ) ? vec4(0x00000d, 0x492492, 0x0d2492, 0xdaddb4) : ( x < 128.0 ) ? vec4(0xdb5db6, 0xb6dbb6, 0x0ccb6d, 0x492492) : ( x < 160.0 ) ? vec4(0x492492, 0xffd252, 0x025dff, 0x09268b) : ( x < 192.0 ) ? vec4(0x72561a, 0x6db613, 0x09009b, 0x002490) : ( x < 224.0 ) ? vec4(0x4993a0, 0x492492, 0x0d2492, 0x465b18) : vec4(0x492412, 0x692412, 0xffd04b, 0x000000);\n\tif (y == 16.0) tile = ( x < 32.0 ) ? vec4(0x69227f, 0x49249a, 0x2d2492, 0xb6d924) : ( x < 64.0 ) ? vec4(0x92cb6d, 0xb24924, 0xffffad, 0xb6ddbf) : ( x < 96.0 ) ? vec4(0x41000c, 0x492492, 0x0d2492, 0xd76dac) : ( x < 128.0 ) ? vec4(0xfb6db6, 0xb6ddbf, 0x48cb6d, 0x492492) : ( x < 160.0 ) ? vec4(0x412492, 0xffd252, 0x6c197f, 0x492003) : ( x < 192.0 ) ? vec4(0x96d618, 0x492494, 0x409242, 0x0d049a) : ( x < 224.0 ) ? vec4(0x493798, 0x492492, 0x4da492, 0x6edb12) : vec4(0x49245a, 0x612412, 0xffc203, 0x000000);\n\tif (y == 17.0) tile = ( x < 32.0 ) ? vec4(0x09327f, 0x492490, 0x012492, 0x249249) : ( x < 64.0 ) ? vec4(0x008049, 0x248040, 0xffff61, 0xdb6dff) : ( x < 96.0 ) ? vec4(0x49304c, 0x492492, 0x2d2492, 0xdb6dac) : ( x < 128.0 ) ? vec4(0xfffdb6, 0xdb6dff, 0x40cdb6, 0x492492) : ( x < 160.0 ) ? vec4(0x492092, 0xffd252, 0x4d9337, 0x492410) : ( x < 192.0 ) ? vec4(0xbad85a, 0x49244c, 0x6cb492, 0x0c009b) : ( x < 224.0 ) ? vec4(0x680749, 0x492492, 0x002492, 0x72db1a) : vec4(0x493652, 0x6920d2, 0xff9203, 0x000000);\n\tif (y == 18.0) tile = ( x < 32.0 ) ? vec4(0x69227f, 0x4924d3, 0x6d2492, 0x49360b) : ( x < 64.0 ) ? vec4(0x00b6d2, 0x2d2400, 0xffed09, 0xdbffff) : ( x < 96.0 ) ? vec4(0x4d204d, 0x492492, 0x212492, 0xfffdad) : ( x < 128.0 ) ? vec4(0xffffff, 0xffffff, 0x40cdbf, 0x492492) : ( x < 160.0 ) ? vec4(0x692092, 0xffc2d0, 0x49a265, 0x6126d8) : ( x < 192.0 ) ? vec4(0xd6d85a, 0x49264d, 0x6c3692, 0x082002) : ( x < 224.0 ) ? vec4(0x49b909, 0x492492, 0x602492, 0x72d903) : vec4(0x49205a, 0x6d2492, 0xfe8203, 0x000000);\n\tif (y == 19.0) tile = ( x < 32.0 ) ? vec4(0x69327f, 0x492483, 0x492492, 0x49341a) : ( x < 64.0 ) ? vec4(0x002492, 0x092000, 0xffdb23, 0xffffff) : ( x < 96.0 ) ? vec4(0x49204d, 0x492493, 0x210492, 0xffffad) : ( x < 128.0 ) ? vec4(0xffffff, 0xffffff, 0x464fff, 0x492492) : ( x < 160.0 ) ? vec4(0x612692, 0xdfc25a, 0x69264c, 0x69809a) : ( x < 192.0 ) ? vec4(0xd6c01b, 0x492665, 0x01b692, 0x6d8000) : ( x < 224.0 ) ? vec4(0x492900, 0x492498, 0x692492, 0x72d843) : vec4(0x4926d8, 0x492692, 0xfe1280, 0x000000);\n\tif (y == 20.0) tile = ( x < 32.0 ) ? vec4(0x6d327f, 0x492493, 0x492492, 0x6db692) : ( x < 64.0 ) ? vec4(0x0026db, 0x6d0000, 0xff5b6c, 0xffffff) : ( x < 96.0 ) ? vec4(0x49224d, 0x6d8092, 0x2da492, 0xffffb5) : ( x < 128.0 ) ? vec4(0xffffff, 0xffffff, 0x6ccfff, 0x6db493) : ( x < 160.0 ) ? vec4(0x6926db, 0xbb425a, 0x6926cc, 0x41a4d3) : ( x < 192.0 ) ? vec4(0xdac240, 0x49b265, 0x01b0da, 0x61b400) : ( x < 224.0 ) ? vec4(0x68291a, 0x6db6c2, 0x492492, 0x96d852) : vec4(0x4926cb, 0x0124d2, 0xf4b492, 0x000000);\n\tif (y == 21.0) tile = ( x < 32.0 ) ? vec4(0x00133f, 0x49249b, 0x492412, 0x692492) : ( x < 64.0 ) ? vec4(0x0026db, 0x909200, 0xfadb6d, 0xffffff) : ( x < 96.0 ) ? vec4(0x49024d, 0x723640, 0x2002cb, 0xffffb5) : ( x < 128.0 ) ? vec4(0xffffff, 0xffffff, 0x64cfff, 0x05a013) : ( x < 160.0 ) ? vec4(0x719240, 0xbbc248, 0x200049, 0x0024d9) : ( x < 192.0 ) ? vec4(0xdac048, 0x490066, 0x000252, 0x618698) : ( x < 224.0 ) ? vec4(0x21c903, 0x09248b, 0x492480, 0x9ad812) : vec4(0x69340c, 0x0000db, 0xf092d8, 0x000000);\n\tif (y == 22.0) tile = ( x < 32.0 ) ? vec4(0x24cb7f, 0x6db249, 0x2db6db, 0x6492c9) : ( x < 64.0 ) ? vec4(0x2496db, 0xb64919, 0xdadb76, 0xdfffff) : ( x < 96.0 ) ? vec4(0x2d824c, 0x924849, 0x249249, 0xffffb5) : ( x < 128.0 ) ? vec4(0xffffff, 0xffffff, 0x24cfff, 0x24925c) : ( x < 160.0 ) ? vec4(0x724249, 0x9b5849, 0x25b249, 0x0036c9) : ( x < 192.0 ) ? vec4(0xdac249, 0x8d932e, 0x24020c, 0x249249) : ( x < 224.0 ) ? vec4(0x264909, 0x249249, 0x2c9249, 0xbac849) : vec4(0x8c924c, 0x24004c, 0xf09249, 0x000000);\n\tif (y == 23.0) tile = ( x < 32.0 ) ? vec4(0x96edff, 0x924924, 0x924924, 0x924924) : ( x < 64.0 ) ? vec4(0x924924, 0xb6db6c, 0xd6eb6e, 0xffffff) : ( x < 96.0 ) ? vec4(0x924926, 0x96db64, 0x924924, 0xffffad) : ( x < 128.0 ) ? vec4(0xffffff, 0xffffff, 0x924fff, 0x924924) : ( x < 160.0 ) ? vec4(0x96d924, 0x9b6b2c, 0x924924, 0x924964) : ( x < 192.0 ) ? vec4(0xdb5924, 0xb2492d, 0x924925, 0x96c964) : ( x < 224.0 ) ? vec4(0x92496c, 0x924924, 0x924924, 0xdb5b64) : vec4(0xb6db6d, 0xb6c925, 0xf6eb6d, 0x000000);\n\tif (y == 24.0) tile = ( x < 32.0 ) ? vec4(0xdbffff, 0xb6db6e, 0xb6db6d, 0xdb5b75) : ( x < 64.0 ) ? vec4(0xb6edb6, 0xd6db6d, 0xdaed6e, 0xffffff) : ( x < 96.0 ) ? vec4(0xb6db77, 0xb76dad, 0xb6db6d, 0xffffad) : ( x < 128.0 ) ? vec4(0xffffff, 0xffffff, 0xb25fff, 0xb6db76) : ( x < 160.0 ) ? vec4(0xb76b6d, 0x977d6d, 0xb6db64, 0xb6dd6d) : ( x < 192.0 ) ? vec4(0xbb7dad, 0xd6db6d, 0xbadb76, 0xdb6b75) : ( x < 224.0 ) ? vec4(0xb64976, 0xb6db6d, 0xb6db6d, 0xdb6db5) : vec4(0xff6b6d, 0xffeb76, 0xfb7fff, 0x000000);\n\tif (y == 25.0) tile = ( x < 32.0 ) ? vec4(0xffffff, 0xb6db76, 0xb6db6d, 0xb6db6d) : ( x < 64.0 ) ? vec4(0xb6edb6, 0xb6db6d, 0xfb6d6e, 0xffffff) : ( x < 96.0 ) ? vec4(0xb6dbbf, 0xb75b6d, 0xb6db6d, 0xffffad) : ( x < 128.0 ) ? vec4(0xffffff, 0xffffff, 0xb26fff, 0xb6db6d) : ( x < 160.0 ) ? vec4(0xb6db6d, 0x977dad, 0xb6db6c, 0xb6dd6d) : ( x < 192.0 ) ? vec4(0xb6efad, 0xb6db6d, 0xb6dbb6, 0xd6db6d) : ( x < 224.0 ) ? vec4(0xb6c92e, 0xb6db6d, 0xd6db6d, 0xb76ff6) : vec4(0xff6dad, 0xffeb77, 0xfb6fff, 0x000000);\n\tif (y == 26.0) tile = ( x < 32.0 ) ? vec4(0xffffff, 0xdb6dff, 0xb6db6d, 0xb6ddad) : ( x < 64.0 ) ? vec4(0xb6edb6, 0xb76b6d, 0xff6db6, 0xffffff) : ( x < 96.0 ) ? vec4(0xb6ddff, 0xb76b6d, 0xb6dbb5, 0xffffad) : ( x < 128.0 ) ? vec4(0xffffff, 0xffffff, 0xb6efff, 0xbadb76) : ( x < 160.0 ) ? vec4(0xb6dbb5, 0x937fb6, 0xd6db6d, 0xbaedad) : ( x < 192.0 ) ? vec4(0xb2ffb5, 0xbadb6d, 0xd6ddb5, 0xdaed76) : ( x < 224.0 ) ? vec4(0xdb5b2e, 0xdb6b6e, 0xdb6db6, 0xb76fff) : vec4(0xff6db5, 0xffedb7, 0xff6dbf, 0x000000);\n\t\n\tfloat n = mod(x, 32.0); \n\tfloat t = ( ( n < 8.0 ) ? tile.x : ( n < 16.0 ) ? tile.y : (n < 24.0 ) ? tile.z : tile.w );\n\tfloat p = mod( x, 8.0 ) * 3.0; \n\tint idx = int( mod( floor( t * exp2(-p) ), 8.0)); \n\tif (idx == 0) color = vec4(0.690196, 0.443137, 0.960784, 1.0);\n\tif (idx == 1) color = vec4(0.635294, 0.435294, 0.901961, 1.0);\n\tif (idx == 2) color = vec4(0.666667, 0.403922, 0.968627, 1.0);\n\tif (idx == 3) color = vec4(0.631373, 0.400000, 0.921569, 1.0);\n\tif (idx == 4) color = vec4(0.513725, 0.309804, 0.737255, 1.0);\n\tif (idx == 5) color = vec4(0.325490, 0.196078, 0.462745, 1.0);\n\tif (idx == 6) color = vec4(0.250980, 0.105882, 0.388235, 1.0);\n\tif (idx == 7) color = vec4(0.007843, 0.000000, 0.015686, 0.0);\n}\n\n\n\nconst vec2 txStaticDataInited = vec2(9.0,0.0);\n\nfloat isInside( vec2 p, vec2 c ) { vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); }\n\nvec4 loadValue(vec2 re)\n{\n    return textureLod( iChannel0, (0.5 + re) / iChannelResolution[0].xy, 0.0 );\n}\n\nvoid storeValue(vec2 re, vec4 va, inout vec4 fragColor, vec2 fragCoord)\n{\n    fragColor = (isInside(fragCoord, re) > 0.0) ? va : fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int x = int(fragCoord.x);\n    int y = int(fragCoord.y);\n\n    fragColor = textureLod( iChannel0, fragCoord / iChannelResolution[0].xy, 0.0 );\n    vec4 staticDataInited = loadValue(txStaticDataInited);\n    if(staticDataInited.x == 0.0)\n    {\n\n        if(y >= GURU_START_Y && y < GURU_START_Y + GURU_HEIGHT)\n        {\n        \tdrawGuru(fragColor, x, GURU_HEIGHT-y);\n        }\n            \n        else if(y > LOGO_START_Y && y<LOGO_START_Y + LOGO_START_HEIGHT ) {\n            drawCytax(fragColor, x, LOGO_START_HEIGHT-y);\n            staticDataInited.x = 1.0;\n        } else {\n\t\t\treturn;\n        }\n\n        \n    } else if(staticDataInited.x == 1.0) {\n                fragColor = vec4(abs(sin(iTime)));  \n    }\n    \n\tstoreValue(txStaticDataInited, vec4(staticDataInited),\tfragColor, fragCoord);\n}","name":"Buffer A","description":"","type":"buffer"}]}