{"ver":"0.1","info":{"id":"dtsyR4","date":"1690483617","viewed":83,"name":"Field of Fragments","username":"thedarkbunny","description":"Fractal triangles, and some practice with barycentric coordinates.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["fractal","triangles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.2831853\n\nfloat p_area(in vec2 a, in vec2 b, in vec2 c)\n{\n    vec3 ab = vec3(b-a,0.);\n    vec3 ac = vec3(c-a,0.);\n    return cross(ab,ac).z;\n}\n\n\n\n\nvec3 bary(in vec2 a, in vec2 b, in vec2 c, in vec2 p)\n{\n    float abc = p_area(a,b,c);\n    return vec3(p_area(a,b,p),p_area(b,c,p),p_area(c,a,p))/abc;\n}\n\n//requires:\n//AB is the short side.\n//ABC is a right angle.\n//P is within the triangle.\nfloat subtri(inout vec2 az, inout vec2 bz, inout vec2 cz, in vec2 p)\n{\n    vec2 a = az;\n    vec2 b = bz;\n    vec2 c = cz;\n    vec3 res = bary(a,b,c,p);\n    vec2 d = (4.*a+c)/5.;\n    if(res.x*4. < res.y){\n        //ADB is subtri.\n        cz = b;\n        bz = d;\n        return 0.;\n    }\n    //working on DBC.\n    vec2 e = (b+c)/2.;\n    res = bary(d,b,c,p);\n    if(res.x > res.z){\n        //DEC is subtri\n        vec2 f = (c+d)/2.;\n        res = bary(d,e,c,p);\n        az = e;\n        bz = f;\n        if(res.x > res.y){\n            return 4.;\n        }else{\n            cz = d;\n            return 3.;\n        }\n    }else{\n        //DEB is subtri\n        vec2 g = (b+d)/2.;\n        res = bary(d,e,b,p);\n        bz = g;\n        cz = e;\n        if(res.x > res.y){\n            az = b;\n            return 2.;\n        }else{\n            az = d;\n            return 1.;\n        }\n    }\n    \n    \n    return 5.;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy*0.5) / min(iResolution.x,iResolution.y);\n    if(abs(uv.x) > 1.){\n        fragColor = vec4(0.);\n        return;\n    }\n    if(abs(uv.y) > .5){\n        fragColor = vec4(0.);\n        return;\n    }\n    \n\n    \n    if(uv.x/2.+uv.y > 0.){\n        uv *= -1.;\n    }\n    vec2 a = vec2(-1.,.5);\n    vec2 b = vec2(-1.,-.5);\n    vec2 c = vec2(1.,-.5);\n    //vec3 col = bary(vec2(-1.,-.5),vec2(-1.,.5),vec2(1.,-.5),uv);\n    vec3 col = vec3(0.5);\n    float r = 0.;\n    for(int i=0;i<5;i++){\n        float z = subtri(a,b,c,uv);\n        r = r/5.+z;\n        vec3 q = bary(a,b,c,uv);\n        float p = smoothstep(min(min(q.x,q.y),q.z)*3.,0.,0.1);\n        col = (col+p)/2.;\n    r = r * 7.5 * sin(iTime*TAU/120.);\n    float offset = iTime * TAU / 180.;\n    col = col * (vec3(sin(r+offset),sin(r+TAU/3.+offset),sin(r-TAU/3.+offset))+1.)/2.;\n        \n        \n        //col = (col.yzx+*vec3(0.7,0.7,1.))/2.;\n        \n    }\n    //col = ((col*6.)-0.5)/5.;\n    //col = (bary(a,b,c,uv)+((p_area(a,b,c)>0.)?0.25:0.75))/1.25;\n    \n    /*\n    for(int i=0;i<3;i++){\n        col = (col+subtri(a,b,c,uv))/5.;\n    }\n    col = (sin(col*4.)+1.+bary(a,b,c,uv))/3.;\n    */\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}