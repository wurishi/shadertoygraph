{"ver":"0.1","info":{"id":"XfVXzm","date":"1714986063","viewed":38,"name":"RaySphereIntersection","username":"ZeroSkyline","description":"RaySphereIntersection","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["intersection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 GetViewDir(vec2 fragCoord, float fov)\n{\n    vec3 viewDir;\n    viewDir.xy = fragCoord - iResolution.xy * .5;\n    viewDir.z = iResolution.y * .5 / tan(radians(fov) * .5); // tan(Theta) = opposite / adjacent -> adjecent = opposite / tan(Theta) \n    viewDir = normalize(viewDir);\n    return viewDir;\n}\nstruct sphere\n{\n    vec3 o; // center\n    float r; // radius\n};\nstruct ray\n{\n    vec3 o;\n    vec3 d;\n};\nvec2 RaySphereIntersection(ray r, sphere s)\n{\n    vec3 oc = s.o - r.o;\n    float a = dot(r.d, r.d);\n    float b = -2.0 * dot(r.d, oc);\n    float c = dot(oc, oc) - s.r*s.r;\n    float discriminant = b * b - 4.f * a * c;\n    \n    if (discriminant >= 0.f)\n    {\n        return vec2((-b - sqrt(discriminant)) / (2.f * a),  // first hit point (front)\n                    (-b + sqrt(discriminant)) / (2.f * a)); // second hit point (back)\n    }\n    return vec2(-1.f); \n    // discriminant < 0.f no hit point\n    // discriminant == 0.f one hit point\n    // discriminant > 0.f two hit point\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ray r;\n    r.o = vec3(0.f);\n    r.d = GetViewDir(fragCoord, 60.f);\n    sphere s;\n    s.o = vec3(0.f, 0.f, 2.f);\n    s.r = 1.f;\n    vec2 hit = RaySphereIntersection(r, s);\n    \n    fragColor = vec4(0.f);\n    if (hit.x > 0.f)\n    {\n        fragColor = vec4(r.o + hit.x * r.d, 0.f);\n    }\n}","name":"Image","description":"","type":"image"}]}