{"ver":"0.1","info":{"id":"MdGfzW","date":"1527753131","viewed":158,"name":"A graph with some cool functions","username":"JohnShadow","description":"A colorful grid with some functions.\ncould use a better graphing function though...","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["grid","color","graph","functions","graphing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define epsilon 0.15\n#define epsilon2 0.25\n#define lineThickness 0.1\n#define pi 3.14159265359\nfloat scale = 1.0;\n#define rangeBounds(x,b,e) (x < (b+e) && x > (b-e) ? 1.0 : 0.0)\nvec3 grid(vec2 uv, vec3 colOpt1, vec3 colOpt2, vec3 colShadow)\n{\n    vec2 uvFract = fract(uv * scale);\n    \n    return    min(uvFract.x, uvFract.y) < epsilon ?  colOpt2\n\t\t\t: min(uvFract.x, uvFract.y) < epsilon2 ? colShadow\n            :\t\t\t\t\t\t\t\t\t\t colOpt1;\t\n}\nfloat c(float x, float r)\n{\n    float c = (sin(1.0-x*r)*cos(x*1.0-r));\n    return c;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n\n    vec2 uv = (-1.0 + 2.0*fragCoord.xy / iResolution.xy) * vec2(iResolution.x/iResolution.y, 1.0);\n    \n    uv += vec2(sin(((iTime+2.0)/2.0) + 1.0),cos((iTime+2.0)/2.0));\n    \n    uv -= vec2(1.0,1.0);\n    \n    scale = 2.0*(sin(iTime)+5.0);\n    \n    vec3 col;\n    vec3 colOpt1 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\tvec3 colOpt2 = vec3(0.15,0.15,0.15);\n    vec3 colOpt3 = vec3(0.1,0.1,0.1);\n    col = grid(uv,colOpt1,colOpt2,colOpt3);\n    \n    float r1 = 0.5*pi;\n    float r2 = 0.25*pi;\n   \n\tfloat f1 = c(c(uv.x * scale,r1-pi),r2+pi);\n\tfloat f2 = c(c(uv.x * scale,pi-r1),pi-r2);\n\tfloat f3 = c(c(uv.x * scale,r1+pi),r2-pi);\n    float f4 = (f1+f2+f3)/3.0;\n    \n    uv += 2.0;\n   \tfloat m1 = c(c((uv.x + iTime) * scale,r1-pi),r2+pi);\n\tfloat m2 = c(c((uv.x + iTime) * scale,pi-r1),pi-r2);\n\tfloat m3 = c(c((uv.x + iTime) * scale,r1+pi),r2-pi);\n    float m4 = (f1+f2+f3)/3.0;\n    \n    col = mix(col, vec3(1.0), rangeBounds(uv.y * scale, m4, lineThickness));\n    uv -= 2.0;\n    col = mix(col, vec3(1.0), rangeBounds(uv.y * scale, f4, lineThickness));\n    col = mix(col, vec3(1.0), rangeBounds(uv.y * scale, 1./uv.x, lineThickness));\n    col = mix(col, vec3(1.0), rangeBounds(uv.y * scale, 10.*uv.x, lineThickness));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}