{"ver":"0.1","info":{"id":"Mtlyzs","date":"1506101370","viewed":84,"name":"Mandelbrot with smooth colouring","username":"otah007","description":"Mandelbrot with smooth colouring","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAXITERATIONS 100\n#define COLOURFACTOR 1.0\n#define COLOUROFFSET 0.0\n#define CENTRE vec2(0.0, 0.0)\n#define ZOOM 1.0\n\nvec3 hsv2rgb(vec3 hsv)\n{\n  hsv.yz = clamp (hsv.yz, 0.0, 1.0);\n  return hsv.z * (1.0 + 0.63 * hsv.y * (cos (2.0 * 3.14159 * (hsv.x + vec3 (0.0, 2.0 / 3.0, 1.0 / 3.0))) - 1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 z = vec2(0.0f, 0.0f);\n\tvec2 c = ((fragCoord.xy / iResolution.xy) - 0.5) * 2.0;\n    c.x *= iResolution.x / iResolution.y;\n    c = (c / float(ZOOM)) + CENTRE;\n\tfloat rsqr = 0.0f;\n\tfloat isqr = 0.0f;\n\tint i = 0;\n    \n\twhile ((i < MAXITERATIONS) && (isqr + rsqr < 4.0f))\n\t{\n\t\tz.y = z.x * z.y;\n\t\tz.y += z.y + c.y;\n\t\tz.x = rsqr - isqr + c.x;\n\t\trsqr = z.x * z.x;\n\t\tisqr = z.y * z.y;\n\n\t\t++i;\n\t}\n\n\tfloat result = float(float(i) + 1.0001f - (log(log(float(sqrt(rsqr + isqr)))) / log(2.0)));\n    \n    fragColor = vec4(hsv2rgb(vec3(result * COLOURFACTOR / float(MAXITERATIONS) + COLOUROFFSET, 1.0, 1.0)), 1.0);\n}","name":"Image","description":"","type":"image"}]}