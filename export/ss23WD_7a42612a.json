{"ver":"0.1","info":{"id":"ss23WD","date":"1618703735","viewed":71,"name":"318_kroychuk_v5v8","username":"DigitalAkula","description":"автор: Кройчук Павел 318\nИкосаэдр + Фрактальные поверхности\n","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["msumg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(1, 1, -10);\n\nvec3 LIGHT2_POS = vec3(2, 0.5, 0);\nconst float LIGHT2_RADIUS = 0.5;\nconst vec3 LIGHT2_COLOR = vec3(1.0, 1.0, 1.0);\n\nvec3 LIGHT3_POS = vec3(0, 2, 1);\nconst float LIGHT3_RADIUS = 0.25;\nconst vec3 LIGHT3_COLOR = vec3(0.867, 0.567, 0.2);\n\nconst int VERTEX_COUNT = 12;\nconst int TRIANGLE_COUNT = 20;\nconst float PHI = 1.72454;\n\nvec3 vertices[VERTEX_COUNT] = vec3[VERTEX_COUNT] (\n    vec3(-1,  PHI, 0) / PHI,\n    vec3( 1,  PHI, 0) / PHI,\n    vec3(-1, -PHI, 0) / PHI,\n    vec3( 1, -PHI, 0) / PHI,\n    vec3(0, -1,  PHI) / PHI,\n    vec3(0,  1,  PHI) / PHI,\n    vec3(0, -1, -PHI) / PHI,\n    vec3(0,  1, -PHI) / PHI,  \n    vec3( PHI, 0, -1) / PHI,\n    vec3( PHI, 0,  1) / PHI,\n    vec3(-PHI, 0, -1) / PHI,\n    vec3(-PHI, 0,  1) / PHI);\n\nint triangles[TRIANGLE_COUNT * 3] = int[TRIANGLE_COUNT * 3] (\n     5, 11,  0,\n     1,  5,  0,\n     7,  1,  0,    \n    10,  7,  0,\n    11, 10,  0,\n     9,  5,  1, \n     4, 11,  5,\n     2, 10, 11,\n     6,  7, 10,\n     8,  1,  7,\n     4,  9,  3,\n     2,  4,  3,\n     6,  2,  3,\n     8,  6,  3,\n     9,  8,  3,\n     5,  9,  4,\n    11,  4,  2,\n    10,  2,  6,\n     7,  6,  8,\n     1,  8,  9);\n\nvec3 randDir;\n\nconst float MARCH_STEPS = 54.;\nconst int ITERATIONS = 256;\nconst float OUTRANGE = 36.;\n\nmat2 rot(float a){\n\treturn mat2(cos(a), -sin(a),\n               sin(a), cos(a));\n}\n\nfloat SDF(vec3 p, out float trap){\n    p.xz *= rot(0.5);\n    p.yz *= rot(0.5);\n    \n    vec3 z = p;\n    float n = 9.;\n    float r = 0.;\n    float dr = 2.5;\n    \n    trap = dot(z,z);\n    \n    for(int i = 0; i < ITERATIONS; i++){\n        r = length(z);\n        \n        if(r >= OUTRANGE){\n            break;\n        }\n        \n        trap = min(dot(z,z), trap);\n        \n        dr = n * pow(r, n - 1.) * dr + 0.5;\n        \n        float theta = atan(z.y / z.x);\n        float phi = asin(z.z / r);\n\n        r = pow(r, n);\n        theta *= n;\n        phi *= n;\n        \n        z = r * vec3(cos(theta) * cos(phi), sin(theta) * cos(phi), sin(phi)) + p;\n    }\n    \n    return 0.5 * log(r) * r / dr;\n}\n\n\nfloat raymarch(vec3 ro, vec3 rd, out float i, out float trap){\n    const float eps = 0.0003;\n    \n    vec3 p = ro;\n    vec3 cl = p + rd * abs(dot(p, rd));\n    if(dot(cl, cl) >= 0.65){\n        return -1.;\n    }\n    \n    for(i = 0.; i < MARCH_STEPS; ++i){\n        float d = SDF(p, trap);\n        if(d < eps){\n            return d;\n        }\n        p += rd * d ;\n    }\n    \n    return -1.;\n}\n\nvec3 coloring(float trap){\n    trap = clamp(pow(trap, 8.), 0., 1.);\n    vec3 col = mix(vec3(0.8, 0.8, 0.64), vec3(0.8, 0.4, 0.1), trap);\n    return col;\n}\n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    \n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    \n    if (D < 0.0) {\n        return INF;\n    }\n    \n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    \n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    \n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    \n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    \n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    \n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    \n    return INF;\n}\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 vert_1, vec3 vert_2, vec3 vert_3, out vec3 normal) {\n    vec3 line_1 = vert_2 - vert_1;\n    vec3 line_2 = vert_3 - vert_1;\n    vec3 norm_2 = cross(dir, line_2);\n    vec3 tv = pos - vert_1;\n    vec3 norm_1 = cross(tv, line_1);\n    \n    float d = 1.0 / dot(line_1, norm_2);\n    float u = dot(tv, norm_2) * d;\n    \n    if (u < 0.0 || u > 1.0) {\n        return INF;\n    }\n    \n    float a = dot(dir, norm_1) * d;\n    if (a < 0.0 || u + a > 1.0) {\n        return INF;\n    }\n    \n    float t = dot(line_2, norm_1) * d;\n    normal = normalize((vert_1 + vert_2 + vert_3) / 3.0);  \n    if (t <= 0.0) {\n        return INF;\n    }\n    return t;\n}\n\nfloat traceIcosahed(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = INF;\n    for (int i = 0; i < TRIANGLE_COUNT; ++i) {\n        vec3 vert_1 = vertices[triangles[i * 3]];\n        vec3 vert_2 = vertices[triangles[i * 3 + 1]];\n        vec3 vert_3 = vertices[triangles[i * 3 + 2]];\n        vec3 cur_norm;\n        float cur_t = traceTriangle(pos, dir, vert_1, vert_2, vert_3, cur_norm);\n        if (cur_t < t) {\n            t = cur_t;\n            normal = cur_norm;\n        }\n    }\n    return t;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n        \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS) ? 0.0 : 10.0f / distSq2;\n    \n    vec3 toLight3 = LIGHT3_POS - pos;\n    float distSq3 = dot(toLight3, toLight3);\n    float att3 = isOccluded(pos, LIGHT3_POS + randDir * LIGHT3_RADIUS) ? 0.0 : 30.0f / distSq3;\n    \n    return color * (\n        max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHT3_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    \n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    \n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame) {\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    vec3 LIGHT2_POS = vec3(2, 0.5, 0) + randVals * 0.1;\n    vec3 LIGHT3_POS = vec3(0, 2, 1) + randVals * 0.1;\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    const float GLASS_N = 5.0;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.5).rgb;\n            normal = planeNorm;\n        }\n        \n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        vec3 l3Norm;\n        float light3T = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_RADIUS, l3Norm);\n        if (light3T < t) {\n            t = light3T;\n            materialType = EMISSION;\n            color = LIGHT3_COLOR;\n            normal = l3Norm;\n        }\n        \n        vec3 iNorm;\n        float icoT = traceIcosahed(curPos, curDir, iNorm);\n        if (icoT < t) {\n            t = icoT;\n            normal = iNorm;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(0.1, 0.5, 0.9);\n                materialType = REFRACTION;\n            }\n        }\n        \n    \n        float j;\n        float trap;\n        float t_d = raymarch(curPos, curDir, j, trap);\n        \n        if(t_d > 0.){\n            color = vec3(1.) * pow(1. * j / MARCH_STEPS, 5.);\n            fragColor.rgb *= coloring(trap);\n            t = t_d ;\n            vec3 worldPos = t * curDir + curPos;\n        }\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            \n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}