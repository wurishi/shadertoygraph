{"ver":"0.1","info":{"id":"ltXXRM","date":"1435416606","viewed":3872,"name":"Windyplains","username":"kuvkar","description":"walking along path of grass rendering from height map and some fbm clouds. Mouse to look around.","likes":72,"published":1,"flags":0,"usePreview":0,"tags":["terrain","fbm","grass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"mat3 rotx(float a) { mat3 rot; rot[0] = vec3(1.0, 0.0, 0.0); rot[1] = vec3(0.0, cos(a), -sin(a)); rot[2] = vec3(0.0, sin(a), cos(a)); return rot; }\nmat3 roty(float a) { mat3 rot; rot[0] = vec3(cos(a), 0.0, sin(a)); rot[1] = vec3(0.0, 1.0, 0.0); rot[2] = vec3(-sin(a), 0.0, cos(a)); return rot; }\nmat3 rotz(float a) { mat3 rot; rot[0] = vec3(cos(a), -sin(a), 0.0); rot[1] = vec3(sin(a), cos(a), 0.0); rot[2] = vec3(0.0, 0.0, 1.0); return rot; }\n\n// Height of grass\nconst float H = 0.2;\n\n\nvec4 flter(sampler2D sampler, vec2 uv, float f)\n{\n\tvec4 c = texture(sampler, uv);\n    c = clamp(c - f, 0.0, 1.0);\n    c /= f;\n    return c;\n}\n\nfloat flter(float f, float a)\n{\n    f = clamp(f - a, 0.0, 1.0);\n    return f / (1.0 - a);\n}\n\n\n// clouds fbm \nfloat fbm(vec2 uv)\n{\n    float f = 0.0;\n    \n    f += (texture(iChannel0, uv).r - 0.5) * 0.5;\n    f += (texture(iChannel0, uv * 2.0).r - 0.5) * 0.25;\n    f += (texture(iChannel0, uv * 4.0).r - 0.5) * 0.125;\n    f += (texture(iChannel0, uv * 8.0).r - 0.5) * 0.125 * 0.5;\n    f += (texture(iChannel0, uv * 32.0).r - 0.5) * 0.125 * 0.5 * 0.5;\n    \n    return f + 0.5;\n}\n\n\nstruct AA\n{\n    float a;\n    float b;\n    float c;\n    float d;\n    float e;\n    float f;\n    float g;\n    float h;\n};\n\n    \nvoid rotate(inout AA aa, float v)\n{\n    aa.h = aa.g;\n    aa.g = aa.f;\n    aa.f = aa.e;\n    aa.e = aa.d;\n    aa.d = aa.c;\n    aa.c = aa.b;\n    aa.b = aa.a;\n    aa.a = v;\n}\n\nfloat avg(in AA aa)\n{\n    float f1 = 0.7;\n    float f2 = 0.5;\n    float f3 = 0.8;\n\n    float a = aa.a + aa.b;\n    float b = aa.c + aa.d;\n    float c = aa.e + aa.f;\n    float d = aa.g + aa.h;\n    \n    float a1 = mix(a, b, 1.0 - f1);\n    float a2 = mix(c, d, 1.0 - f2);\n    \n    float a3 = mix(a1, a2, 1.0 - f3);\n    \n    return a3 * 0.5;\n}\n\nvec2 rot2d(in vec3 p, float angle)\n{\n\tfloat x = p.x * cos(angle) + p.y * -sin(angle);\n\tfloat y = p.x * sin(angle) + p.y * cos(angle);\n    return vec2(x, y);\n}\n\n\nvec4 strawcol = vec4(0.8);\nvec3 warpedRp = vec3(0.0);\n\n\nfloat map(in vec3 rp, inout AA aa, bool useAA)\n{\n    float gt = iTime * 0.9;\n    float t = sin(gt + rp.x * 1.2) * 0.5;\n    t += sin(gt + rp.z * 1.4) * 0.5;\n    t *= 0.5;\n    \n    vec2 off = rot2d(vec3(0.0, 5.0, 0.0), rp.y * 20.0* t);\n    rp.x -= off.x * 0.04;\n    rp.y -= off.y * 0.005;\n    vec2 uv = rp.xz * 6.5;\n    \n    \n\t// path\n    float s1 = 1.0 - smoothstep(rp.x + sin(rp.z * 3.0) * 0.1 + sin(rp.z * 5.0) * 0.12, -0.4, 0.);\n    float s2 = 1.0 - smoothstep(rp.x - sin(rp.z * 4.4) * 0.1 + sin(rp.z * 14.0) * 0.04, 0.4, -0.);\n    rp.y += (s1 + s2) * 0.03;\n    \n\tvec4 col = texture(iChannel0, uv, -100.0);\n    float h = col.r;\n    \n    if(useAA)\n    {\n        rotate(aa, h);\n        h = avg(aa);\n    }\n    \n    h *= mix(texture(iChannel0, uv * 0.025).r + 0., 1.0, 0.7);\n    h *= H;\n    warpedRp = rp;\n    return rp.y - h;\n}\n\n\nvec3 grad (in vec3 rp, in AA aa)\n{\n    \n    vec2 off = vec2(0.03, 0.0);\n    vec3 grad = vec3(map(rp + off.xyy, aa, false) - map(rp - off.xyy, aa, false),\n                     off.x,\n                     map(rp + off.yyx, aa, false) - map(rp - off.yyx, aa, false));\n    return normalize(grad);\n}\n\nvec3 light = normalize(vec3(.0, 2., .0));\n\nfloat shadow(in vec3 rp)\n{\n\tfloat d = 0.05;\n\tAA aa;\n    float h = map(rp + normalize(vec3(0.0, .0, 1.0)) * d, aa, false);\n    return clamp(h / d, 0.0, 1.0);\n}\n\n\nvec4 clouds(in vec3 rp, in vec3 rd)\n{\n    vec4 c = vec4(0.0);\n    float gt = iTime * 0.5;\n    rp += rd * (1.0 / abs(rd.y));\n    vec2 uv = rp.xz;\n    uv.y += gt;\n    float f1 = fbm(uv * 0.009);\n    f1 = flter(f1, .3);\n\n    uv = rp.xz;\n    uv.y += gt * 1.5;\n    uv.x += gt * 0.5;\n    \n    float f2 = fbm(uv * 0.015);\n    f2 = flter(f2, 0.5);\n    float f = mix(f1, f2, .2);\n    f = clamp(f * 1.2, 0.0, 1.0);\n    return vec4(f);\n}\n\n\n\nvec4 grasscol = vec4(0.5, 0.5, 0.3, 0.0) * 2.;\n\n\n\nbool trace(inout vec3 rp, in vec3 rd, inout vec4 col)\n{\n    if(rd.y > 0.0)\n    {\n        return false;\n    }\n    \n    vec3 ro = rp;\n    float ydiff = rp.y - H;\n    float l = 0.0;\n    rp += rd * (ydiff / abs (rd.y));\n    AA aa;\n\tfor (int i = 0; i < 450; ++i)\n    {\n        float h = map(rp, aa, true);\n    \t\n        if(h <= 0.0 || rp.y < 0.0)\n        {\n            \n            vec4 tx = texture(iChannel2, warpedRp.xz * 0.5);\n            \n        \t// straw color variance    \n\t\t    float flter = 0.5;\n            float strw = clamp(tx.g - flter, 0.0, 1.0);\n            strw /= 1.0 - flter;\n            strawcol = mix(vec4(1., 1., 0., 0.0), vec4(.8, 0.6, 0.3, 0.0), strw);\n            strawcol *= 1.5;\n            \n            // coloring\n            vec4 c2 = texture(iChannel2, warpedRp.xz * 0.008);\n            col = mix(c2, strawcol, 0.8);\n            \n            vec3 g = grad(rp, aa);\n            col = mix(vec4(0.0), col, smoothstep(H * 0.2,  H * 1.4, rp.y));\n            \n            vec4 clds = clouds(ro, rd);\n            col *= 1.0 - clds;\n            col *= vec4(1.0) * mix(shadow(rp), 1.0, 0.7);\n            return true;\n        }\n        \n        vec3 diff = rp - ro;\n        float dst = dot(diff, diff);\n        \n        if ( dst > 30. )\n        {\n            return false;\n        }\n        \n        float dist = max(0.00001, h * 0.04 * exp(max(0.0, (l - 0.5) * .2)));\n        rp += rd * dist;\n        l += dist;\n    }\n    \n    \n    return false;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n    fragColor = vec4(0.0);\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= vec2(0.5);\n    uv.y /= iResolution.x / iResolution.y;\n    \n    vec3 rp = vec3(0.0, 0.5, -1.0);\n    rp.z += iTime * 0.15;\n    \n    vec3 ro = rp;\n    vec3 rd = normalize(vec3(uv ,0.5));\n    \n    vec2 m = iMouse.xy - 0.5 * iResolution.xy;\n    if(iMouse.xy == vec2(0.0)) m = vec2(0.0, 0.2 * iResolution.y);\n    \n    rd *= rotx( (m.y / iResolution.y) * 2.0);\n    rd *= roty( (m.x / iResolution.y) * 3.0);\n \trd = normalize(rd);\n    bool hit = false;\n    hit = trace(rp, rd, fragColor);\n    \n    if(!hit)\n    {\n        if(rd.y > -0.08)\n            rp += rd * 10.0;\n    }\n    \n    float dist = length(ro - rp);\n    vec4 fog = vec4(0.1, 0.25, 0.4, 0.0) * 0.7;\n    fog = mix(fog, vec4(1.0), smoothstep(0.5,-0.4, rd.y));\n    fragColor = mix(fragColor, fog, smoothstep(3.0, 10.0, dist));\n    \n    if(rd.y > 0.0)\n    {\n        vec4 clds = clouds(ro, rd);\n        clds *= smoothstep(0.0, 0.2, rd.y);\n        fragColor = mix(fragColor, vec4(1.0) * 0.95, clds);\n    }\n\n    vec2 halo = rd.xy;\n    float hl = length(halo);\n    if(rd.z < 0.0) hl = 11.0;\n    fragColor += clamp(1.0 - pow(hl, .3), 0.0, 1.0);\n    \n    float mx = max(fragColor.r, fragColor.g);\n    mx = max(fragColor.b, mx);\n    fragColor /= max(1.0, mx);\n    \n    // contrast\n    float contr = 0.2;\n    fragColor = mix(vec4(0.0), vec4(1.0), fragColor * contr + (1.0 - contr) * fragColor * fragColor * (3.0 - 2.0 * fragColor));\n    \n}","name":"Image","description":"","type":"image"}]}