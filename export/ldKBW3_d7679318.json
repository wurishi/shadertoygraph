{"ver":"0.1","info":{"id":"ldKBW3","date":"1530848593","viewed":131,"name":"Exploring 2Dd Noise","username":"Veggiebob","description":"use mouse to look around and fly","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["noise","nyan","mountains"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float ground (vec3 p){\n    return p.y-texture(iChannel0, p.xz*0.1).r*0.5;\n}\nvec4 trace (vec3 o, vec3 r){\n    vec3 p = o;\n    float t = 0.;\n    for(int i = 0; i<39; i++){\n        p = o+r*t;\n        float d = ground(p);\n        t+=d*0.5;\n        r.y-=0.002;\n    }\n    return vec4(p, t);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x*=iResolution.x/iResolution.y;\n    uv-=0.5;\n    uv.y*=1.5;\n    //uv.y*=0.5;\n\tvec2 mouse = iMouse.xy/iResolution.xy;\n    mouse-=0.5;\n    mouse*=5.;\n    // Time varying pixel color\n\tvec3 camera = texture(iChannel2, vec2(0.)).xyz;//vec3(iTime*0.01, sin(iTime)*0.5+1., 0.);\n    vec3 ray = vec3(cos(uv.x+mouse.x), sin(uv.y+mouse.y), sin(uv.x+mouse.x));\n    //ray.y = max(ray.y, -0.8);\n    vec4 trz = trace(camera, ray);\n    float fog = 1./(1.+trz.w*trz.w*0.3);\n    vec3 col = texture(iChannel1, trz.xz*0.1).rgb;//texture(iChannel0, uv).rgb;\n    //col = 1.-1./col;\n    col*=fog*trz.y*8.;\n    //if(dot(col, vec3(1.))>3.){\n        \n    //}\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    mouse-=0.5;\n    mouse*=5.;\n    vec3 Pos = texture(iChannel0, vec2(0.)).rgb;\n    vec3 move = vec3(cos(mouse.x), sin(mouse.y), sin(mouse.x));\n    Pos+=move*0.01;\n    if(Pos.y<1.){\n        Pos.y = 1.;\n    }\n    //Pos = vec3(0., 0.5, 0.);\n    fragColor = vec4(Pos,1.0);\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//credit: morgan3d\n//noise from: https://www.shadertoy.com/view/4dS3Wd\n#define NOISE fbm\n#define NUM_NOISE_OCTAVES 5\nfloat hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\nfloat hash(float n) { return fract(sin(n) * 1e4); }\nfloat noise(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n\n\t// Four corners in 2D of a tile\n\tfloat a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    // Simple 2D lerp using smoothstep envelope between the values.\n\t// return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tmix(c, d, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tsmoothstep(0.0, 1.0, f.y)));\n\n\t// Same code, with the clamps in smoothstep and common subexpressions\n\t// optimized away.\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\nfloat fbm(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\t// Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x+=iTime*0.01;\n    fragColor = vec4(vec3(NOISE(uv*15.)),1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}