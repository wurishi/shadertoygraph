{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"buffer","id":"XsXGR8","filepath":"/media/previz/buffer01.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"vec3 flameRGB(float t) {\n    return vec3(t, t*t, t*t*t);\n}\n\nvoid mainImage(out vec4 o, in vec2 p) {\n    o = vec4(0,0,0,1);\n    \n    vec3 e = texture(iChannel1, p/iResolution.xy).rgb;\n    \n    o.rgb += RGB_OUTFLOW * flameRGB(e.r);\n    o.rgb += RGB_INFLOW * flameRGB(e.g);\n    o.rgb += RGB_GLOW * e.b;\n    \n    o.rgb = pow(o.rgb, vec3(0.4545));\n    \n}\n","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":"const float PI = radians(180.);\nconst float SQ3 = sqrt(3.);\nconst float INF = 1e10;\n\n// Simulation consts\nconst int N_MAX = 128;\nconst float MASS = 50.0;\n\n// Rendering consts\nconst vec3 RGB_INFLOW = vec3(0.1, 0.2, 1.5);\nconst vec3 RGB_OUTFLOW = vec3(1.5, 0.5, 0.2);\nconst vec3 RGB_GLOW = vec3(0.5, 0.2, 1.5);\nconst float GLOW = 1.5;\nconst float R0 = 0.02;\nconst float R1 = 1.0;\n\nint texSize(sampler2D ch0) {\n    return min(N_MAX, textureSize(ch0, 0).x);\n}\n\nvec4 texFetch(sampler2D ch0, ivec2 p) {\n    int N = texSize(ch0);\n    p = ivec2(mod(vec2(p), vec2(ivec2(N,2))));\n    return texelFetch(ch0, p, 0);\n}\n\nvec2 c2exp(float phi) {\n    return vec2(cos(phi), sin(phi));\n}\n\nmat2 rot2(float phi) {\n    float c = cos(phi), s = sin(phi);\n    return mat2(c, s, -s, c);\n}\n","name":"Common","description":"","type":"common"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// Simulates the motion of masses in iChannel0.\n\nvec4 initialWave(ivec2 pp, int N) {\n    float phi = 2.*PI*float(pp.x)/float(N);\n    vec2 xy = c2exp(phi);\n\n    float z = 1.0 * sin(phi * 5.0) - 0.4;\n    float w = 0.1 * cos(phi * 5.0);\n\n    vec3 xyz = vec3(xy*cos(z), sin(z));\n    vec4 xyzw = vec4(xyz*cos(w), sin(w));\n    return normalize(xyzw);\n}\n\nvoid mainImage(out vec4 o, in vec2 p) {\n    int N = texSize(iChannel0);\n    ivec2 pp = ivec2(p - 0.5);\n    \n    if (pp.x > N-1 || pp.y > 1)\n        return;\n     \n    // the initial state\n    if (iFrame == 0) {\n        o = initialWave(pp,N);\n        return;\n    }\n    \n    // prev <- curr\n    if (pp.y == 1) {\n        o = texelFetch(iChannel0, ivec2(pp.x,0), 0);\n        return;\n    }\n    \n    // the string lies on the unit sphere: length(cc) = 1\n    vec4 cc = texFetch(iChannel0, pp);\n    vec4 cc_prev = texFetch(iChannel0, pp + ivec2(0,1));\n    vec4 rr = texFetch(iChannel0, pp + ivec2(1,0));\n    vec4 ll = texFetch(iChannel0, pp - ivec2(1,0));\n    \n    vec4 T = rr + ll - 2.*cc; // Hooke's law\n    o = normalize(cc*2. - cc_prev + T/MASS); // F=ma\n}\n","name":"Buffer A","description":"","type":"buffer"},{"outputs":[{"channel":0,"id":"XsXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"buffer","id":"XsXGR8","filepath":"/media/previz/buffer01.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// Renders the mesh defined by iChannel0 coords.\n\nfloat lineSDF(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec2 p2q(vec2 p) {\n    vec2 ar = iResolution.xy/iResolution.yy;\n    return (p/iResolution.xy*2. - 1.) * ar;\n}\n\nvec2 q2p(vec2 q) {\n    vec2 ar = iResolution.xy/iResolution.yy;\n    return (q/ar*0.5 + 0.5) * iResolution.xy;\n}\n\nvec2 pos(int i) {\n    vec4 r = texFetch(iChannel0, ivec2(i,0));\n    if (iMouse.z > 0.) {\n        vec2 m = p2q(iMouse.xy);\n        r.zw *= rot2(PI*m.y);\n        r.xy *= rot2(PI*m.x);\n    }\n    // basic perspective projection\n    r.xyz /= 1.2 - r.w;\n    r.xy /= 1.2 - r.z;\n    //r.xy /= length(r.zw - vec2(0,1.1));\n    return r.xy;\n}\n\nfloat sdf(vec2 q) {\n    int N = texSize(iChannel0);\n    float d = INF, e = 0.;\n    vec2 p1 = pos(-1), p2 = pos(-2), p3 = pos(-3);\n    \n    for (int i = 0; i < N; i++) {\n        vec2 p0 = pos(i);\n\n        // basic interpolation\n        vec2 m1 = (p1+p2)*0.5 + (p1+p2)*0.125 - (p0+p3)*0.125;\n        d = min(d, lineSDF(q, p1, m1));\n        d = min(d, lineSDF(q, m1, p2));\n        \n        p3 = p2;\n        p2 = p1;\n        p1 = p0;\n    }\n    \n    return d;\n}\n\nvoid mainImage(out vec4 o, vec2 p) {\n    vec2 q = p2q(p);\n    float d = sdf(q/R1);\n    float e = exp(-pow(7.5*d/R0, 2.0));\n    float g  = 0.1*pow(R0/d, GLOW);\n\n    o.rgb = vec3(e, e, g);\n\n    float dt = 0.02;\n    o.r += (1.0-dt*1.5)*texture(iChannel1, q2p(q*(1.0-dt*0.3))/iResolution.xy).r;\n    o.g += (1.0-dt*0.5)*texture(iChannel1, q2p(q*(1.0+dt*0.3))/iResolution.xy).g;\n}\n","name":"Buffer B","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"lfyBWd","date":"1734581039","viewed":95,"name":"Oscillating Star","username":"prasound","description":"Motion of a string constrained to a 4d sphere: x^2+y^2+z^2+w^2=1.\nFrom the initial state, the string is driven by the basic wave equation.\niMouse.x = rotation in the (x,y) plane\niMouse.y = rotation in the (z,w) plane","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["oscillator"],"hasliked":0,"parentid":"4fKBWV","parentname":"3d-Sphere String"}}