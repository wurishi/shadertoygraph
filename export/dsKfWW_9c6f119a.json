{"ver":"0.1","info":{"id":"dsKfWW","date":"1713545948","viewed":94,"name":"Sobel Outline","username":"candleflame2003","description":"Uses Sobel Convolution to trace the outline of images","likes":2,"published":1,"flags":2,"usePreview":0,"tags":["sobel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 getPixel(vec2 coord) {\n    vec3 pixelColor = texture(iChannel0, coord / iResolution.xy).xyz;\n    \n    float contrast = 2.;\n    pixelColor.rgb = ((pixelColor.rgb - 0.5f) * contrast) + 0.5f;\n    \n    return pixelColor;\n}\n\nfloat sobelOutline(vec2 pos) {\n    //int spacing = int(floor(sin(iTime / 6.) * 10.));\n    int spacing = 3;\n    float tightening = 4.;\n\n    mat3 xKernel;\n    xKernel[0] = vec3(1., 0., -1.);\n    xKernel[1] = vec3(2., 0., -2.);\n    xKernel[2] = vec3(1., 0., -1.);\n    \n    mat3 yKernel;\n    yKernel[0] = vec3(1., 2., 1.);\n    yKernel[1] = vec3(0., 0., 0.);\n    yKernel[2] = vec3(-1., -2., -1.);\n\n    float xValue = 0.;\n    float yValue = 0.;\n    for (int dx = -1; dx <= 1; dx++) {\n        int xIndex = dx + 1;\n        for (int dy = -1; dy <= 1; dy++) {\n            int yIndex = dy + 1;\n            vec3 currentCol = getPixel(pos + vec2(dx * spacing, dy * spacing));\n            float currentLength = (0.299*currentCol.r + 0.587*currentCol.g + 0.114*currentCol.b);\n            xValue += currentLength * xKernel[xIndex][yIndex];\n            yValue += currentLength * yKernel[xIndex][yIndex];\n        }\n    }\n    float result = sqrt(xValue * xValue + yValue * yValue);\n    result = pow(result, tightening);\n    return result;\n    \n}\n\nvec3 getNoise(vec2 coord, float density, float tightening, float multiplier) {\n    return vec3(pow(texture(iChannel2, coord / density / iResolution.xy).x, tightening) * multiplier);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    vec3 col = vec3(sobelOutline(fragCoord));\n    //col *= getNoise(fragCoord, 2., 1.5, 1.);\n    col += getNoise(fragCoord, .1, 1.5, .25);\n    col = vec3(1) - col;\n\n    // Output to screen\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}