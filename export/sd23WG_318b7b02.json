{"ver":"0.1","info":{"id":"sd23WG","date":"1618728953","viewed":104,"name":"MSU CG task 2","username":"eriskob","description":"homework","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["homework"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);// / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(0, 1.2, -6);\nconst vec3 LIGHT1_POS = vec3(-3, 1.5, 5);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(1, 0.5, 2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(1, 0, 0.7);\nvec3 randDir;\n\nconst float CYLINDER_RADIUS = 1.0;\n\n#define VERTEXCOUNT 12\n#define TRIANGLECOUNT 20\n#define PHI 1.618\n\nconst struct vert{\n    vec3 g1;\n    vec3 g2;\n    vec3 g3;\n    vec3 g4;\n    \n    vec3 g5;\n    vec3 g6;\n    vec3 g7;\n    vec3 g8;\n    \n    vec3 g9;\n    vec3 g10;\n    vec3 g11;\n    vec3 g12;\n};\n\nvert vertices = vert(\nvec3(-1,  PHI, 0)/1.5,\nvec3( 1,  PHI, 0)/1.5,\nvec3(-1, -PHI, 0)/1.5,\nvec3( 1, -PHI, 0)/1.5,\n    \nvec3(0, -1,  PHI)/1.5,\nvec3(0,  1,  PHI)/1.5,\nvec3(0, -1, -PHI)/1.5,\nvec3(0,  1, -PHI)/1.5,\n    \nvec3( PHI, 0, -1)/1.5,\nvec3( PHI, 0,  1)/1.5,\nvec3(-PHI, 0, -1)/1.5,\nvec3(-PHI, 0,  1)/1.5\n);\nvec3 vertexbuffer[VERTEXCOUNT];\n// (CAMERA_POS + t * viewVec).y == -1\n// t = (-1 - CAMERA_POS.y) / viewVec.y;\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 v0, vec3 v1, vec3 v2, out vec3 normal) {\n    vec3 e1 = v1 - v0;\n    vec3 e2 = v2 - v0;\n    \n    vec3 pvec = cross(dir, e2);\n    float det = dot(e1, pvec);\n    if (det < 1e-8 && det > -1e-8) {\n        return INF;\n    }\n    \n    float inv_det = 1.0 / det;\n    vec3 tvec = pos - v0;\n    float u = dot(tvec, pvec) * inv_det;\n    if (u < 0.0 || u > 1.0) {\n        return INF;\n    }\n    \n    vec3 qvec = cross(tvec, e1);\n    float v = dot(dir, qvec) * inv_det;\n    if (v < 0.0 || u + v > 1.0) {\n        return INF;\n    }\n    \n    float t = dot(e2, qvec) * inv_det;\n    normal = normalize((v0 + v1 + v2) / 3.0); \n    //normal = normalize(cross(e1, e2)); \n    if (t <= 0.0) {\n        return INF;\n    }\n    return t;\n}\n\nfloat traceIcosahedron(vec3 pos, vec3 dir, out vec3 normal) {\n        \n       //5, 11,  0,\n    // 1,  5,  0,\n    // 7,  1,  0,\n    //10,  7,  0,\n    //11, 10,  0,\n    \n    // 9,  5,  1,\n    // 4, 11,  5,\n    // 2, 10, 11,\n    // 6,  7, 10,\n    // 8,  1,  7,\n    \n    // 4,  9,  3,\n    // 2,  4,  3,\n    // 6,  2,  3,\n    // 8,  6,  3,\n    // 9,  8,  3,\n    \n    // 5,  9,  4,\n    //11,  4,  2,\n   // 10,  2,  6,\n    // 7,  6,  8,\n    // 1,  8,  9);\n        \n        vertexbuffer[0] = vertices.g1;\n        vertexbuffer[1] = vertices.g2;\n        vertexbuffer[2] = vertices.g3;\n        vertexbuffer[3] = vertices.g4;\n        vertexbuffer[4] = vertices.g5;\n        vertexbuffer[5] = vertices.g6;\n        vertexbuffer[6] = vertices.g7;\n        vertexbuffer[7] = vertices.g8;\n        vertexbuffer[8] = vertices.g9;\n        vertexbuffer[9] = vertices.g10;\n        vertexbuffer[10] = vertices.g11;\n        vertexbuffer[11] = vertices.g12;\n    float t = INF;\n    vec3 v0 = vertexbuffer[5];\n    vec3 v1 = vertexbuffer[11];\n    vec3 v2 = vertexbuffer[0];\n    vec3 cur_norm;\n    float cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    \n    v0 = vertexbuffer[1];\n    v1 = vertexbuffer[5];\n    v2 = vertexbuffer[0];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    \n    v0 = vertexbuffer[7];\n    v1 = vertexbuffer[1];\n    v2 = vertexbuffer[0];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    v0 = vertexbuffer[10];\n    v1 = vertexbuffer[7];\n    v2 = vertexbuffer[0];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    v0 = vertexbuffer[11];\n    v1 = vertexbuffer[10];\n    v2 = vertexbuffer[0];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    \n    \n    \n    \n    \n    v0 = vertexbuffer[9];\n    v1 = vertexbuffer[5];\n    v2 = vertexbuffer[1];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    v0 = vertexbuffer[4];\n    v1 = vertexbuffer[11];\n    v2 = vertexbuffer[5];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    v0 = vertexbuffer[2];\n    v1 = vertexbuffer[10];\n    v2 = vertexbuffer[11];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    v0 = vertexbuffer[6];\n    v1 = vertexbuffer[7];\n    v2 = vertexbuffer[10];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    v0 = vertexbuffer[8];\n    v1 = vertexbuffer[1];\n    v2 = vertexbuffer[7];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    \n    \n    // 4,  9,  3,\n    // 2,  4,  3,\n    // 6,  2,  3,\n    // 8,  6,  3,\n    // 9,  8,  3,\n    \n    \n    v0 = vertexbuffer[4];\n    v1 = vertexbuffer[9];\n    v2 = vertexbuffer[3];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    v0 = vertexbuffer[2];\n    v1 = vertexbuffer[4];\n    v2 = vertexbuffer[3];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    v0 = vertexbuffer[6];\n    v1 = vertexbuffer[2];\n    v2 = vertexbuffer[3];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    v0 = vertexbuffer[8];\n    v1 = vertexbuffer[6];\n    v2 = vertexbuffer[3];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    v0 = vertexbuffer[9];\n    v1 = vertexbuffer[8];\n    v2 = vertexbuffer[3];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    \n    \n    \n    v0 = vertexbuffer[5];\n    v1 = vertexbuffer[9];\n    v2 = vertexbuffer[4];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    v0 = vertexbuffer[11];\n    v1 = vertexbuffer[4];\n    v2 = vertexbuffer[2];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    v0 = vertexbuffer[10];\n    v1 = vertexbuffer[2];\n    v2 = vertexbuffer[6];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    v0 = vertexbuffer[7];\n    v1 = vertexbuffer[6];\n    v2 = vertexbuffer[8];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    v0 = vertexbuffer[1];\n    v1 = vertexbuffer[8];\n    v2 = vertexbuffer[9];\n    cur_t = traceTriangle(pos, dir, v0, v1, v2, cur_norm);\n    if (cur_t < t) {\n        t = cur_t;\n        normal = cur_norm;\n    }\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n   \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 15.0 / distSq1;\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 20.0 / distSq2;\n    return color * (max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR +\n        max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR +\n        texture(iChannel1, normal).rgb * 0.1);\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.0) {\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    const float WATER_N = 1.33;\n    float n1 = AIR_N;\n    float n2 = WATER_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float WATER_R = pow2(WATER_N - GLASS_N) / pow2(WATER_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n       \n       vec3 sphNorm;\n        float sphT = traceSphere(curPos, viewVec, 0.5, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            vec3 worldPos = curPos + t * viewVec;\n            if (randVals.x < WATER_R) {\n                materialType = REFLECTION;\n            } else {\n                //colorMult *= col;\n                materialType = REFRACTION;\n                if (dot(viewVec, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = WATER_N;\n                }\n            }\n        }\n        vec3 icoNorm;\n        float icoT = traceIcosahedron(curPos, curDir, icoNorm);\n        if (icoT < t) {\n            t = icoT;\n            normal = icoNorm;\n            if (randVals.x < DIAMOND_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(0.5, 0.5, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);// + texture(iChannel1, uv);\n    \n}","name":"Buffer B","description":"","type":"buffer"}]}