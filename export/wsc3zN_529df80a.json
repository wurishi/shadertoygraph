{"ver":"0.1","info":{"id":"wsc3zN","date":"1567968464","viewed":227,"name":"TrappedSpheres","username":"dila","description":"Poor spheres","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float x) {\n    return mat2(cos(x), sin(x), -sin(x), cos(x));\n}\n\nfloat sdCone( in vec3 p, in vec2 c )\n{\n    // c is the sin/cos of the angle\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sdBoxZ( vec3 p, vec3 b )\n{\n  vec2 d = abs(p.xy) - b.xy;\n  return length(max(d,0.0))\n         + min(max(d.x,d.y),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat mapmat = 0.0;\n\nfloat cell(vec3 p, float fd) {\n    p.x = abs(p.x) - 1.0;\n    float nz = floor(p.z / 2.0 + 0.5) * 2.0;\n    float brz = (fract(p.z * 3.0) - 0.5) / 3.0;\n\tfloat rm = sdBox(p - vec3(10.0, 0.0, 0.0), vec3(10.0, 1.0, 3.0));\n    float rs = max(rm, -sdBox(vec3(p.x, p.y, p.z), vec3(2.0, 0.9, 0.9)));\n    float bs = length(vec2(p.x - 0.25, brz)) - 0.05;\n    float d = rs;\n    float ts = length(vec3(p.x - 1.0, p.y, p.z)) - 0.7;\n    float rd = fd;\n    if (ts < rd) {\n        mapmat = 1.0;\n        rd = ts;\n    }\n    if (d < rd) {\n        mapmat = 0.0;\n        rd = d;\n    }\n    if (bs < rd) {\n        mapmat = 2.0;\n        rd = bs;\n    }\n    return rd;\n}\n\nfloat map(vec3 p) {\n    float nz = floor(p.z / 2.0);\n    vec3 op = p;\n    //p.xy *= rot(3.141592 * 0.125 * p.z);\n    vec3 lp = p;\n    float lz = (fract((op.z + 1.0) / 2.0) - 0.5) * 2.0;\n    p.z = (fract(p.z / 2.0) - 0.5) * 2.0;\n    //p.x = (fract(p.x / 4.0) - 0.5) * 4.0;\n    float fd = 1000.0;\n    p = mix(p, p.yxz, mod(nz, 2.0));\n\tfloat cx = cell(p.xzy, fd);\n    float cy = cell(p.yxz, cx);\n    return cy;\n}\n\nvec3 normal(vec3 p)\n{\n\tvec3 o = vec3(0.01, 0.0, 0.0);\n    return normalize(vec3(map(p+o.xyy) - map(p-o.xyy),\n                          map(p+o.yxy) - map(p-o.yxy),\n                          map(p+o.yyx) - map(p-o.yyx)));\n}\n\nfloat trace(vec3 o, vec3 r) {\n    float t = 0.0;\n    for (int i = 0; i < 32; ++i) {\n        t += map(o + r * t);\n    }\n    return t;\n}\n\nvec3 texture3(vec3 p) {\n    vec3 ta = texture(iChannel0, p.yz).xyz;\n    vec3 tb = texture(iChannel0, p.xz).xyz;\n    vec3 tc = texture(iChannel0, p.xy).xyz;\n    return (ta + tb + tc) / 3.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    vec2 ouv = uv;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0 - dot(uv, uv) * 0.33));\n    vec3 o = vec3(0.0, 0.0, 0.0);\n    \n    o.z += iTime * 0.5;\n    //r.xz *= rot(sin(iTime * 0.5) * 0.75);\n    r.yz *= rot(3.141592 * -0.25);\n    r.xz *= rot(3.141592 * 0.25);\n    //r.yz *= rot(3.141592 * 0.5);\n    \n    vec3 lpos = o + vec3(0.5, 0.5, -0.5);\n    \n    vec3 fc = vec3(0.0);\n    float at = 0.0;\n    for (int i = 0; i < 3; ++i) {\n    \tfloat t = trace(o, r);\n        at += t;\n        float tmat = mapmat;\n        vec3 wp = o + r * t;\n        vec3 sn = normal(wp);\n        float aoc = map(wp + sn * 1.3) * 1.0;\n        float fd = map(wp);\n        \n        float lit = 0.0;\n        vec3 ldt = wp - lpos + sn * 0.01;\n        float llen = length(ldt);\n        ldt /= llen;\n        float lt = trace(lpos, ldt);\n        if (lt > llen) {\n            lit = max(dot(ldt, -sn), 0.0) * 1.0;\n            lit /= 1.0 + llen * llen * 0.1;\n        }\n        lit *= max(dot(r, -sn), 0.0);\n        \n        float fog = 1.0 / (1.0 + at * at * 0.01);\n        if (tmat != 1.0) {\n            vec3 sm = texture3(wp);\n        \tfc += (aoc + lit) * sm * fog;\n            fc /= 1.0 + fd * fd * 1000.0;\n            if (tmat == 0.0) {\n                fc.z *= 0.8;\n            }\n            if (i != 0) {\n            \tfc *= 2.5;\n            }\n            break;\n        }\n        o = wp + sn * 0.001;\n        r = reflect(r, sn);\n    }\n    \n    fragColor = vec4(fc, 1.0);\n}","name":"Image","description":"","type":"image"}]}