{"ver":"0.1","info":{"id":"wtVXDD","date":"1584610005","viewed":108,"name":"TP3 LIFGRAPHIQUE","username":"bouiflanemaryam","description":"textures","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tp3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Texturing\n// Eric Galin\n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n    \n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere \n// p : point\n// c : center of skeleton\n// r : radius\nV Sphere(vec3 p, vec3 c,float r,int index)\n{\n  return V(length(p-c)-r,index);\n}\n\n// Sphere \n// p : point\n// n : Normal of plane\n// o : Point on plane\nV Plane(vec3 p, vec3 n, vec3 o,int index)\n{\n    return V(dot((p-o),n),index);\n}\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n        return V(a.v,a.i);\n    else \n    {\n        return V(b.v,b.i);\n    }\n}\n\nV Union3(V a, V b, V c) {\n\treturn Union(Union(a, b), c);\n}      \n\nV Union4(V a, V b, V c, V d) {\n\treturn Union(Union(Union(a, b), c), d);\n}\n\nV Union5(V a, V b, V c, V d, V e) {\n\treturn Union(Union(Union(Union(a, b), c), d),e);\n}\n\nV Union6(V a, V b, V c, V d, V e, V f) {\n\treturn Union(Union(Union(Union(Union(a, b), c), d), e), f);\n}\n\nV Union7(V a, V b, V c, V d, V e, V f, V g) {\n\treturn Union(Union(Union(Union(Union(Union(a, b), c), d), e), f), g);\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Inter(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\n\nV Inter3(V a, V b, V c) {\n    return Inter(a, Inter(b, c));\n}\n\nV Inter6(V a, V b, V c, V d, V e, V f) {\n    return Inter(Inter3(a, b, c), Inter3(d, e, f));\n}\n\n//Différence ( max(a,-b) )\nV diff(V a,V b)\n{\n\treturn V(max(a.v,-b.v),a.i);\n}\n\n// Modifie la taille selon un vecteur t\t\nvec3 Scale ( vec3 t, vec3 p )\t\n{   \t\n    mat3 T = mat3(\t\n                    1.0/t.x, 0      , 0,\t\n                    0\t   , 1.0/t.y, 0,\t\n                    0      , 0      , 1.0/t.z\t\n   \t\t\t \t  \t\n\t\t\t\t   );\t\n \t\n    return (p * T);\t\n}\n\n// cree un cube parallele au plan, selon deux sommets opposés a et b\n// p : point\n// a, b : sommets opposés l'un l'autre\nV boite ( vec3 p, vec3 a, vec3 b, int i ) {\n    vec3 x = vec3(1.0, 0.0, 0.0);\n  \tvec3 y = vec3(0.0, 1.0, 0.0);\n  \tvec3 z = vec3(0.0, 0.0, 1.0);\n    return Inter6(\n            Plane(p, -x, a, i),\n            Plane(p, -y, a, i),\n            Plane(p, -z, a, i),\n            Plane(p, x, b, i),\n            Plane(p, y, b, i),\n            Plane(p, z, b, i)\n        );\n}\n\n// cree un cylindre selon un centre de base a, une normale u, et un rayon r\n// p : point\n// a : \nV CylindreInf( vec3 a,vec3 u,float r,vec3 p, int i ) {\n    float l= dot((p-a), u);\n    float d = distance(p, a); \n    return V( (sqrt(d*d - l*l) - r), i);\n}\n\nV cylindre(vec3 a, vec3 b, float r, vec3 p, int i ) {\n    vec3 r3 = vec3(r, r, r);\n    vec3 l = (b-a)/length(b-a);\n    V ci = CylindreInf(a,l,r,p,i);\n    V pa = Plane(p, a, l, i);\n    V pb = Plane(p, b, -l, i);\n    return Inter( ci, boite(p, a-r, b+r, 3) );\n}\n\nV colonnes(vec3 p)\t\n{    \t\n   V c= Union6( \t\n                       Union3(\t\n                           boite(p, vec3(-11.5,-9.5,3.0),vec3(-8.5,-6.5,4.0),3),\t\n                           boite(p, vec3(-11.5,-9.5,10.0),vec3(-8.5,-6.5,11.0),3),\t\n                           cylindre(vec3( -10.0,-8.0,0.0), vec3( -10.0, -8.0, 10.0),1.0, p,1)\t\n                       ),\t\n                       Union3(\t\t\n                           boite(p, vec3(-1.5,-9.5,3.0),vec3(1.5,-6.5,4.0),3),\t\n                           boite(p, vec3(-1.5,-9.5,10.0),vec3(1.5,-6.5,11.0),3),\t\n                           cylindre(vec3(0.0,-8.0,0.0), vec3( 0.0, -8.0, 10.0),1.0, p,1)\t\n                       ),\t\n                       Union3(\t\n                           boite(p, vec3(8.5,-9.5,3.0),vec3(11.5,-6.5,4.0),3),\t\n                           boite(p, vec3(8.5,-9.5,10.0),vec3(11.5,-6.5,11.0),3),\t\n                           cylindre(vec3(10.0,-8.0,0.0), vec3( 10.0, -8.0, 10.0),1.0, p,1)\t\n                       ),  \t\n                       Union3(\t\n                           boite(p, vec3(-11.5,6.5,3.0),vec3(-8.5,9.5,4.0),3),\t\n                           boite(p, vec3(-11.5,6.5,10.0),vec3(-8.5,9.5,11.0),3),\t\n                           cylindre(vec3( -10.0,8.0,0.0), vec3( -10.0, 8.0, 10.0),1.0, p,1)\t\n                       ),  \t\n                       Union3(\t\n                           boite(p, vec3(-1.5,6.5,3.0),vec3(1.5,9.5,4.0),3),\t\n                           boite(p, vec3(-1.5,6.5,10.0),vec3(1.5,9.5,11.0),3),\t\n                           cylindre(vec3(0.0,8.0,0.0), vec3( 0.0, 8.0, 10.0),1.0, p,1)\t\n                       ),\t\n                       Union3(\t\n                           boite(p, vec3(8.5,6.5,3.0),vec3(11.5,9.5,4.0),3),\t\n                           boite(p, vec3(8.5,6.5,10.0),vec3(11.5,9.5,11.0),3),\t\n                           cylindre(vec3(10.0,8.0,0.0), vec3( 10.0, 8.0, 10.0),1.0, p,1)\t\n                       )\t\n                   );\t\n    return c;\t\n}\n\n//Base du temple\t\nV base(vec3 p)\t\n{\t\n    V b=boite(p, vec3(-14.0,-14.0,0.0),vec3(14.0,14.0,3.0),2);\t\n \t\t\n    return b;\t\n}\t\n\n//Base du toit\t\nV base_toit(vec3 p)\t\n{\t\n    V bt= boite(p, vec3(-11.5,-11.5,11.0),vec3(11.5,11.5,12.0),1);\t\n \t\t\n    return bt;\t\n}\n\n//Escaliers\t\nV escalier (vec3 p)\t\n{\t\n    V e= Union6(\t\n        \t\t\t boite(p, vec3(-20.5,-6.5,0.0),vec3(20.5,6.5,0.5),4),\t\n        \t\t\t boite(p, vec3(-19.5,-6.5,0.5),vec3(19.5,6.5,1.0),4),\t\n        \t\t\t boite(p, vec3(-18.5,-6.5,1.0),vec3(18.5,6.5,1.5),4),\t\n        \t\t\t boite(p, vec3(-17.5,-6.5,1.5),vec3(17.5,6.5,2.0),4),\t\n        \t\t\t boite(p, vec3(-16.0,-6.5,2.0),vec3(16.5,6.5,2.5),4),\t\n        \t\t\t boite(p, vec3(-15.5,-6.5,2.5),vec3(15.5,6.5,3.0),4)\t\n    \t\t\t    );\t\n    \t\n    return e;\t\n}\t\n\n//coupole\t\nV coupole (vec3 p)\t\n{\t\n    V bol= diff(\t\n        \t\t\tdiff(\t\n        \t\t\t\t Sphere(p,vec3( 0.0, 0.0, 5.5),2.25,4),\t\n                         Sphere(p,vec3( 0.0, 0.0, 5.5),2.0,4)\t\n                        ),\t\n        \t\t\tboite(p, vec3(-3.0,-3.0,5.7),vec3(3.0,3.0,8.0),4)\t\n        \t\t   );\t\n    \t\n    V c= Union(\t\n                    bol,\t\n                    cylindre(vec3(0.0,0.0,0.0), vec3( 0.0, 0.0, 4.0),1.5, p,3)                       \t\n                   );\t\n    \t\n    return c;\t\n}\n\n//toit\nV toit(vec3 p)\n{\n\tV t= diff(\t\n              Sphere(p,vec3( 0.0, 0.0, 11.0),10.0,0),\t\n              boite(p, vec3(-11.5,-11.5,0.0),vec3(11.5,11.5,12.0),1)\t\n             );\n    \n    return t;\n}\n\n// Potential field of the object\n// p : point\nV object(vec3 p)\n{\n  V u = Union7(escalier(p),\t\n                        base(p),\t\n                            colonnes(p),\t\n      \t\t\t\t\t\t\tcoupole(Scale(vec3 (1.0,1.2,1.1),p)),\t\n                                    base_toit(p),\n               \t\t\t\t\t\t\ttoit(p),\n \t\t\t\t\t\t\t\t\t\t\tPlane(p,vec3(0.0,0.0,1.0),vec3(0.0,0.0,0.0),5)\n      \n         );\n\n  return u;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n  V vp = object(p);\n    float v = vp.v;\n  n.x = object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Lighting ----------------------------------------------------------------------------------------------\n\n// Ambient occlusion\n// p : Point\n// n : Normal\n// a : Number of smaples\nfloat AmbientOcclusion(vec3 p,vec3 n, int a)\n{\n    if (a==0) { return 1.0; }\n    \n\tfloat ao=0.0; \n    \n    for (int i=0;i<a;i++)\n    {\n \t\tvec3 d = Cosine(581.123*float(i) , n);\n\n        int s;\n        bool h;\n        float t=SphereTrace(p,d,10.0,h,s);\n        if (!h) {ao+=1.0;}\n        else if (t>5.0)\n        {\n             ao+=1.0;   \n        }\n    }\n    \n    ao/=float(a);\n\treturn ao;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.65,0.75,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\n\n// Shading and lighting ---------------------------------------------------------------------------\n\nvec3 damier (in vec3 p)\n{\n   if (sin(p.x) >= 0.0 == sin(p.y) >= 0.0 == sin(p.z) >= 0.0)\n   {\n       return vec3(0.0,0.0,0.0);\n   }\n    \n   if (sin(p.x) <= 0.0 != sin(p.y) <= 0.0 != sin(p.z) <= 0.0)\n   {\n       return vec3(1.0,1.0,1.0);\n   } \n}\n\nvec3 couleur_cst (in vec3 p, in vec3 n)\n{\n    \n    return p,vec3(0.996,0.9647,0.81568);\n    \n}\n\nvec3 couleur_cst2 (in vec3 p, in vec3 n)\n{\n    \n    return p,vec3(0.69,0.83,0.16);\n    \n}\n\nvec3 pierre(in vec3 p) {\n    \n    return mix(vec3(0.22,0.22,0.30),vec3(0.60,0.62,0.80),1.0*Noise(p/3.0));\n}\n\nvec3 bois(in vec3 p) {\n    \n    float d=sqrt(p.x*p.x+p.y*p.y);\n    float u=d/1.5;\n\n    float s=sin(u*2.0*3.14);\n\n    s=(s+1.0)/2.0;\n\n    return mix(vec3(0.45,0.2,0.1),vec3(0.4,0.15,0.05),s);\n}\n\nfloat Turbulence(vec3 p)\n{\n    float d=sqrt(p.x*p.x+p.y*p.y);\n\tfloat t=Noise(p);\n    for (float i=0.5; i<0.05; i/=2.0)\n    {\n     \tt+=i+Noise(p/i);   \n    }\n    t/=2.0;\n \treturn t; \n}\n\nvec3 Noise3D(vec3 p)\n{\n \treturn vec3(Noise(p), Noise(p + vec3(165.0,126.0,127.0)), Noise(p + vec3(34.0,242.0,342.0)));\n}\n\nfloat Ligne(vec3 p)\n{\n \tvec3 q=p+1.0*Noise3D(p)+0.5*Noise3D(p/0.5);\n    float z=abs(mod(q.z,0.5)-0.5)*3.0*Noise(p);\n    return smoothstep(z,0.0,0.02);\n}\n\nvec3 Zebre(vec3 p,vec3 c1,vec3 c2)\n{\n    float l=Ligne(p);\n    return mix(c1,c2,l);\n}\n\nvec3 marbre(vec3 p,vec3 c1,vec3 c2)\n{\n \t vec3 q=p+10.0*Turbulence(vec3(Noise(p),Noise(p+vec3(5.2,7.1,2.3)),Noise(p+vec3(4.5,8.7,9.1))));\n     return Zebre(q,c1,c2);\n}\n\n// Compute color \n// p : Point\n// n : Normal\nvec3 Color(in vec3 p,in vec3 n)\n{\n    V vp=object(p);\n    if (vp.i==0)\n    {\n        return damier(p);\n    }\n    else if (vp.i==1)\t\t\n    {    \n        return marbre(p,vec3(0.0,0.0,0.0),vec3(1.0,1.0,1.0));\n    }\n    else if (vp.i==2)\t\t\n    {\n        return bois(p);\n     }\n    else if (vp.i==3)\t\t\n    {\n        return  couleur_cst2 (p,n);\n    }\n    else if (vp.i==4)\t\t\n    {\n        return  couleur_cst (p,n);\n    }\n    else if (vp.i==5)\t\t\n    {\n        return  pierre(p);\n    }\n}\n\n// Shade\n// p : Point\n// n : Normal at point\nvec3 Shade(vec3 p, vec3 n)\n{\n    vec3 ambient=0.5*Color(p,n); \n    vec3 diffuse=0.35*Light(p,n)*Color(p,n);\n   vec3 c = ambient+diffuse; \n     c+=0.15*AmbientOcclusion(p+0.1*n,n,0)*vec3(1.0,1.0,1.0);\n    return c;\n}\n\n// Picture in picture ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Texturing and noise ---------------------------------------------------------\n\n// Hashing function\n// Returns a random number in [-1,1]\nfloat Hash(float seed)\n{\n    return fract(sin(seed)*43758.5453 );\n}\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Lighting -----------------------------------------------------------------------\n\n// Cosine direction \n// seed : Random seed\n//    n : Normal\nvec3 Cosine( in float seed, in vec3 n)\n{\n    float u = Hash( 78.233 + seed);\n    float v = Hash( 10.873 + seed);\n\n    // Method by fizzer: http://www.amietia.com/lambertnotangent.html\n    float a = 6.2831853 * v;\n    u = 2.0 * u - 1.0;\n    return normalize( n + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u) );\n}\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.8;\n    \n    ro=vec3(80.0,0.0,9.0);\n    ro*=Rz(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n","name":"Common","description":"","type":"common"}]}