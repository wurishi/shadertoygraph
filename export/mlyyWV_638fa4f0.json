{"ver":"0.1","info":{"id":"mlyyWV","date":"1700663381","viewed":107,"name":"Rhombus Shapes","username":"francesco","description":"Shader created by following the An introduction to Shader Art Coding tutorial by kishimisu\n\nhttps://youtu.be/f4s1h2YETNY?si=ekiWxjw65SLN8EHl","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","shapes","rhombus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( in float t)\n{\n    vec3 a = vec3 (0.5, 0.5, 0.5);\n    vec3 b = vec3 (0.5, 0.5, 0.5);\n    vec3 c = vec3 (1.0, 1.0, 1.0);\n    vec3 d = vec3 (0.263, 0.416, 0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for(float i = 0.0; i < 4.0; i++) {    \n        uv = fract(uv * 1.5) - 0.5;\n\n        vec2 ra = vec2 (1.0, 1.0);\n        ra *= 0.5;\n\n\n        float dist = sdRhombus(uv, ra) * exp(-sdRhombus(uv0, ra));\n        vec3 col = palette(sdRhombus(uv0, ra) + i*.4 + iTime*.4);\n\n\n        //dist = sin(dist*10. + iTime*.5)/10.;\n        dist = smoothstep(0., 0.05, dist);\n\n        dist = 0.01/dist;\n        dist = pow(0.01/dist, 1.2);\n\n        finalColor += col * dist;\n    }\n    \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}