{"ver":"0.1","info":{"id":"4f3cD2","date":"1731154349","viewed":40,"name":"Complex Tetration Chart","username":"DWal","description":"Graphs the inf^^a fractal, where a is a slightly transformed pixel coordinate\nclick to drag\nzooms in when time flows\nnow with antialiasing! sort of.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float INFINITY = 1./0.;\nconst float NINFINITY = -1./0.;\nconst float A = 3.;\nconst float A2 = A*A;\n\nvec3 toColor(vec2 coord) {\n    if (coord.x == INFINITY) {\n        if (coord.y == INFINITY) {\n            return vec3(0.5,0.5,0.5);\n        } else if (coord.y == NINFINITY) {\n            return vec3(0.5,-0.5,0.5);\n        }\n        return vec3(0.5,0,0.5);\n    } else if (coord.x == NINFINITY) {\n        if (coord.y == INFINITY) {\n            return vec3(-0.5,0.5,0.5);\n        } else if (coord.y == NINFINITY) {\n            return vec3(-0.5,-0.5,0.5);\n        }\n        return vec3(-0.5,0,0.5);\n    } else {\n        if (coord.y == INFINITY) {\n            return vec3(0,0.5,0.5);\n        } else if (coord.y == NINFINITY) {\n            return vec3(0,-0.5,0.5);\n        }\n        return vec3(-0.5,-0.5,-0.5);\n    }\n}\n\nvec2 raise(vec2 base, vec2 exponent) {\n    float a = atan(base.y, base.x);\n    float d1 = base.x*base.x + base.y*base.y;\n    float d2 = pow(d1,exponent.x/2.)*exp(-exponent.y*a);\n    float t = exponent.x*a+log(d1)*exponent.y/2.;\n    \n    return vec2(d2*cos(t), d2*sin(t));\n}\n\nvec3 fractal(vec2 original, vec2 coord, uint samp) {\n    while (!(samp == 255u || isinf(coord.x) || isinf(coord.y)) ) {\n        samp++;\n        coord = raise(original, coord);\n    }\n    return toColor(coord);\n}\n\nvec3 fractal(vec2 copyme) {\n    return fractal(copyme, copyme, 0u);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 pixelpreprocess = fragCoord-iMouse.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(0,0,0);\n    for (float i = 0.; i < A2; i++) {\n        col += fractal(((pixelpreprocess+vec2(fract(i/A), floor(i/A)/A))/iResolution.x/iTime)+vec2(-2.3,0))/A;\n    }\n    //col = fractal(((fragCoord-iMouse.xy)/iResolution.x/iTime/iTime)+vec2(-4.12,0));\n    col = col+.5;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}