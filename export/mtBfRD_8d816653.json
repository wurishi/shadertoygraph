{"ver":"0.1","info":{"id":"mtBfRD","date":"1694045718","viewed":178,"name":"JV 2","username":"ChunderFPV","description":"Update to Jeweled Vortex: https://www.shadertoy.com/view/fdjfDc\nAdded a radial blur and a few other touches.\nClick & move in a circular pattern to change the value.","likes":16,"published":1,"flags":32,"usePreview":0,"tags":["blur","spiral","radial","fractions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 C, in vec2 U )\n{\n    vec2 m = M,\n         O = U/R;\n    vec3 c = vec3(0),\n         v = texture(iChannel0, O).rgb;\n    float j = 1./cl, // increment\n          i = j, s,\n          b = sqrt(j), // brightness\n          t = T,\n          g = max(v.x, max(v.y, v.z)), // grayscale\n          sm = (abs(t)/2. + .1) * -sign(t), // scale multiplier\n          maa = .5; // mipmap aa\n    \n    for (; i<=1.; i+=j) // clone & scale bufferA\n        s = (1.-i)*sm,  // scale ratio\n        c += texture(iChannel0, mix(O, vec2(.5), s), maa).rgb*b*i;\n    \n    c *= g + H(t+length((U-R/2.)/R.y))*.5+.5; // a bit more color\n    c += (v+g)/3.; // bright points\n    \n    C = vec4(c*c + c*.2, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define sec 900.  // number of seconds to traverse number line\n#define st 150.   // start time\n#define wr 3.     // warp radius (where rotation & exponent = 0)\n#define cl 50.    // clone loop\n\n#define R iResolution.xy\n#define M (iMouse.xy-R/2.)/R.y\n#define T (iMouse.z > 0.) ? atan(m.x, -m.y)/3.1416: ((mod(iTime+st, sec)/sec)-.5)*2.\n#define N(t) -sign(t)*log(1.-abs(t))\n#define H(a) (cos(radians(vec3(0, 60, 120))+(a)*6.2832)*.5+.5)","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 C, in vec2 U )\n{\n    vec2 m = M, b,\n         u = (U-R/2.)/R.y;\n    u = -u.yx; // 0 arc at bottom\n    float pi = 3.1416,\n          pi2 = pi*2.,\n          t = T, //get value between +-1\n          at = abs(t),\n          n = N(t), // location on number line\n          e = n*(2.-at), // exponent\n          s = 5. + 25.*at, // scale\n          ro = log(abs(n))*s*pi, // counter rotation speed\n          fr = pow(length(u)*wr, 1./e), // frame coords\n          r, a, v, rv, cr, vd, sc, q;\n    \n    ro *= min(1., pow(at, .2)); // slow rotation near 0\n    u *= clamp(pow(s, e)*wr, 1e-16, 1e18); // apply zoom & trim limits\n    r = pow(length(u), 1./e); // root radius\n    a = atan(u.y, u.x) + ro; // arc with counter rotation\n    v = a/pi2; // arc to range +-.5\n    rv = r-v;\n    cr = ceil(rv);\n    vd = cos((cr*pi2+a)/n); // visual denominator\n    sc = iTime + pi*pow(cr+v, 2.)/n; // spiral coords\n    q = sin(sc);     // spiral 1\n    q *= cos(sc*2.); // spiral 2\n    q *= pow(abs(sin(pi*rv)), abs(e)+2.); // smooth edges\n    q *= .2+abs(vd); // dark folds\n    \n    vec3 c = q * vec3(1.4-vd, abs(cos(t*pi/2.))+.5, vd+1.4); // color\n    c += q*q; // add flipped negatives (more color)\n    \n    b = abs(fract(U/R+.5)-.5)/fwidth(U/R)*.1; // vignette\n    if (e > 0.) c = min(c, min(b.x, b.y)); // fix for inner radial blur artifacts\n    \n    c = clamp(c, vec3(0), vec3(1)); // clear negatives and limit brightness\n    c *= min(pow(fr, .3), 1./fr);   // darken limits\n    C = vec4(c, 1);\n}","name":"Buffer A","description":"","type":"buffer"}]}