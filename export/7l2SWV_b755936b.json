{"ver":"0.1","info":{"id":"7l2SWV","date":"1628701301","viewed":148,"name":"Simple Music Pan","username":"YUIT","description":"A simple music visualizer","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["musicvisual"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592654\n\n// From https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// From https://www.shadertoy.com/view/XdXGW8\nvec2 grad( ivec2 z )  // replace this anything that returns a random vector\n{\n    // 2D to 1D  (feel free to replace by some other)\n    int n = z.x+z.y*11111;\n\n    // Hugo Elias hash (feel free to replace by another one)\n    n = (n<<13)^n;\n    n = (n*(n*n*15731+789221)+1376312589)>>16;\n\n#if 0\n\n    // simple random vectors\n    return vec2(cos(float(n)),sin(float(n)));\n    \n#else\n\n    // Perlin style vectors\n    n &= 7;\n    vec2 gr = vec2(n&1,n>>1)*2.0-1.0;\n    return ( n>=6 ) ? vec2(0.0,gr.x) : \n           ( n>=4 ) ? vec2(gr.x,0.0) :\n                              gr;\n#endif                              \n}\n\nfloat noise( in vec2 p )\n{\n    ivec2 i = ivec2(floor( p ));\n     vec2 f =       fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f); // feel free to replace by a quintic smoothstep instead\n\n    return mix( mix( dot( grad( i+ivec2(0,0) ), f-vec2(0.0,0.0) ), \n                     dot( grad( i+ivec2(1,0) ), f-vec2(1.0,0.0) ), u.x),\n                mix( dot( grad( i+ivec2(0,1) ), f-vec2(0.0,1.0) ), \n                     dot( grad( i+ivec2(1,1) ), f-vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat fBM(in vec2 p)\n{\n    float f;\n    vec2 uv = p;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    f  = 0.5000*noise( uv ); uv = m*uv;\n    f += 0.2500*noise( uv ); uv = m*uv;\n    f += 0.1250*noise( uv ); uv = m*uv;\n    f += 0.0625*noise( uv ); uv = m*uv;\n    return f*0.5+0.5;\n}\n\n\nfloat sdSphere(in vec2 p, float r)\n{\n    return length(p) - r;\n}\n\n// from https://www.shadertoy.com/view/wdyXzy\nvec2 opRepAng( in vec2 p, float theta, float offset)\n{\n    float a = atan(p.y, p.x) - offset;\n    a = mod(a + .5 * theta, theta) - .5 * theta;\n    return length(p) * vec2(cos(a), sin(a));\n}\n\n// From iq\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 backCol = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec2 p = uv - vec2(0.85, 0.5);\n    float circle = 1.0 - smoothstep(0.0, 0.2, sdSphere(p*(2.-0.55*noise(p*5.50 + vec2(iTime*1.5))), 0.35));\n    float circle1 = 1.0 - smoothstep(0.1, 1.0, sdSphere(p*(2.33-1.9*noise(p*10.50 + vec2(iTime, iTime*2.))), 0.2));\n\n    p = opRepAng(p, 2.*PI / 20., PI*0.5);\n    float len = 0.4;\n    float offset = 0.02 * sin(iTime * 10.0) * 5.02*(circle1 - circle);\n    float val = smoothstep(0.01, 0.015, sdSegment(p*1.5, vec2(len*0.9 - offset, 0.0), vec2(len + offset, 0.0)));\n    float addVal = mix(0.21, 13., sdSegment(p*1.5, vec2(len*0.9 - offset, 0.0), vec2(len + offset, 0.0)));\n    vec3 addValCol = clamp(0.,1.,1.0-addVal)*vec3(0.3,0.5,0.99);\n    vec3 baseValCol = vec3(0.4,0.8,0.88)*(1.0-val);\n    vec3 col = vec3(addValCol+baseValCol);\n    \n    col = mix(col, backCol + col, col.x);\n    // vec3 col = vec3(circle1 - circle);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}