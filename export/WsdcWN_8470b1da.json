{"ver":"0.1","info":{"id":"WsdcWN","date":"1601020253","viewed":199,"name":"Voronoi's Life","username":"savegor","description":"One more implementation of Conway's Game of Life. This time on the Voronoi grid.\nMouse can be used to animate cells.","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["voronoi","conway","gameoflife"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// another variant of the Glow Life: https://www.shadertoy.com/view/3tSyWm\n\nvec2 RND(vec2 st) {\n    float i = st.x * iResolution.y / CELL_SIZE + st.y;\n    float teta = cos(43.3234 * i);\n    return abs(sin(fract(vec2(teta, teta * 10031.1231)) * 0.3 * iTime));\n}\n\nfloat getVoronoiDist(vec2 cell, vec2 point) {\n    vec2 shift = CELL_SIZE * RND(cell);\n    return distance(cell + shift, point);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float minDist = 1.0e6;\n    float sumGlow = 0.0;\n    vec2 cell = floor(fragCoord / CELL_SIZE) * CELL_SIZE;\n    cell += CELL_SIZE * 0.5;\n    \n    vec2 voronoi_cell = vec2(0.0, 0.0);\n    float area = 3.0 * CELL_SIZE;\n    for(float i = -area; i < area + 0.1; i = i + CELL_SIZE) {\n    \tfor(float j = -area; j < area + 0.1; j = j + CELL_SIZE) {\n            vec2 cell_ij = cell + vec2(i, j);\n            \n            float dist = getVoronoiDist(cell_ij, fragCoord);\n            \n            vec2 cell_uv = cell_ij / (iResolution.xy * CELL_SIZE);\n            float alive = texture(iChannel0, cell_uv).r;            \n            \n            sumGlow += alive * 0.5 / dist;\n\n            if(dist < minDist) {\n            \tminDist = dist;\n                voronoi_cell = cell_ij;\n            }\n        }\n    }\n        \n    float voron = 0.03 * minDist;\n   \t\n\tfloat red = voron;\n    float green = voron + 1.2 * sumGlow;\n    float blue = voron;\n    \n    fragColor = vec4(red, green, blue, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float CELL_SIZE = 25.0;\nconst int SLOWDOWN = 15;","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nfloat noise(vec2 st) {\n    return fract(sin(st.x * st.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // just lazy trick to generate first state \n    // sorry\n    if(iFrame == 0) { \n    \tfragColor = vec4(0.0,0.0,noise(fragCoord) > 0.5,1.0);\n    }\n    else {\n        vec4 mouse = iMouse;\n        mouse.xy /= CELL_SIZE;\n\t\t\n        vec2 uv = fragCoord / iResolution.xy;\n        vec4 status = texture(iChannel0, uv);\n\n\n        float was_alive = status.b;\n        float is_alive = 0.0;\n        vec2 diff = abs(fragCoord - mouse.xy);\n\t\t\n        // if left mouse button pressed\n        // just freeze world and revive selected cells\n        if(mouse.z > 0.0) {\n            is_alive = was_alive;\n            if(diff.x < 0.5 &&  diff.y < 0.5) {\n                is_alive = 1.0;    \n            }\n        }\n        else {\n            if( iFrame % SLOWDOWN == 0) {\n                int living_count = 0;\n                for(int i = -1; i < 2; i = i + 1) {\n                    for(int j = -1; j < 2; j = j + 1) {\n\n                        float not_center = float((abs(i) + abs(j)) != 0);\n                        vec2 uv_ij = (fragCoord + vec2(i, j)) / iResolution.xy;\n                        vec4 status_ij = texture(iChannel0, uv_ij);\n\n                        living_count += int(status_ij.z * not_center);\n                    }\n                }\n\n                float keepAlive = float(living_count == 2 || living_count == 3);\n                float revive = float(living_count == 3);\n\n                is_alive = mix(revive, keepAlive, was_alive);\n            }\n            else {\n                is_alive = was_alive;\n            }\n        }\n        float delta = 0.034;\n        float inertion = mix(status.r - delta, status.r + delta, is_alive);\n        inertion = clamp(inertion, 0.0, 1.0);\n        fragColor = vec4(inertion,was_alive,is_alive,1.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}