{"ver":"0.1","info":{"id":"XldXWX","date":"1481850517","viewed":105,"name":"ShaderNight - HelloWorld","username":"inantop","description":"Shader night 1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Expand \"Shader Inputs\" above to take a look at what variables you have to play with.\n\n//This function is executed for each pixel in the coloured box to the left.\n//fragColor - the output for this pixel\n//fragCoord - the position of the pixel inside the buffer - ranges from (0,0) in the bottom left to (iResolution.x, iResolution.y)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //The acceptable range for our output is 0..1 for each of the 4 vector elements - which are RGBA.\n    \n    //We normalize the position of the pixel by the resolution to get a (0..1, 0..1) vector\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //You might have noticed that iResolution is a vec3 meaning it has three elements, but we're using it in an operation with a vec2. \n    //Typing .xy on the vector constructs a 2D vector with its x and y elements.\n    \n    //Outputting this normalized value demonstrates what we know about the coordinate system\n\tfragColor = vec4(uv.x, uv.y, 0.0, 1.0);\n    \n    //Notice the red channel moves from 0 at the left to 1 at the right, and the green channel does the same on Y\n}","name":"Image","description":"","type":"image"}]}