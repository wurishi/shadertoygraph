{"ver":"0.1","info":{"id":"WstcRN","date":"1600541975","viewed":648,"name":"Liquid Paint + Lighting","username":"smkgames","description":"Liquid Paint","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["paint","liquid","ripple","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float diffuse;\nfloat specular;\n\nvoid calculateLighting(vec2 uv)\n{\n    float l= length(texture(iChannel0,uv).xyz);\n    float dx=dFdx(l)*iResolution.x;\n    float dy=dFdy(l)*iResolution.y;\n    \n    // Calculating Normal by dx and dy\n    vec3 N =normalize(vec3(dx,dy,100.0));\n    \n    // Light Direction\n    vec3 L = normalize(vec3(1.0, 1.0, 2.0));\n    \n    // Calculating Diffuse\n    diffuse = max(dot(N, L)  + 1., 0.);\n    \n    // Calculating Specular\n    specular = clamp(dot(reflect(L, N),vec3(0, 0, -1)), 0., 1.0);\n    \n    specular = pow(specular, 12.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    calculateLighting(uv);\n    \n    // Get Liquid From Buffer B\n    vec3 liquid = texture(iChannel0, uv).rgb;\n    \n    // Normalizing Liquid\n    liquid = clamp(liquid,0.,0.5);\n    \n    // Cream Color\n    vec3 color = vec3(1.,0.99,0.81);\n    \n    vec3 finalColor = liquid * color * diffuse + specular;\n    \n\tfragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(distance(iMouse.xy, fragCoord) < 10.0);\n    fragColor += texture(iChannel0, fragCoord.xy / iResolution.xy);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float s = 0.;\n\nvec4 Move(vec2 U,vec2 dir) {\n    \n     // smoothing gives a circle\n     s += 1./ length(dir);\n    \n     // using texelFetch ( if speed always refer to an integer number of pixels ) would make your life a bit easier\n     vec4 result = texelFetch( iChannel1, ivec2(U+dir) , 0 );\n    \n     result /= length(dir);\n    \n     return result;\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = vec4(0);\n    \n    O += Move( U, vec2( 1, 0) )\n      +  Move( U, vec2(-1, 0) ) \n      +  Move( U, vec2( 0, 1) )\n      +  Move( U, vec2( 0,-1) )\n      +  Move( U, vec2( 1, 1) )\n      +  Move( U, vec2( 1,-1) )\n      +  Move( U, vec2(-1, 1) )\n      +  Move( U, vec2(-1,-1) );\n    \n    O /= s;\n    \n    O += texelFetch(iChannel0, ivec2(U), 0); \n}","name":"Buffer B","description":"","type":"buffer"}]}