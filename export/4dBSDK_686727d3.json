{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define time iTime\n\n#define pi 3.141592\n#define ITERS 10\n\nfloat lemniscate(float r, float t) {\n\treturn sqrt(4.0*sin(2.0*t-pi/2.+cos(time/3.)*2.)+r);\n}\n\n//gltracy's shader structure\nfloat solve(vec2 p) {\n    float r = length(p);\n    float t = atan(p.y, p.x);\n    float v = abs(lemniscate(r, t));\n    return v;\n}\n        \nfloat value(vec2 p, float size) {\n    float error = size * 22.;\n    return 1.0 / max(solve(p)/error, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float width = 1.0 / min( iResolution.x, iResolution.y );\n    uv = ( fragCoord.xy - vec2(iResolution.x/2., iResolution.y/2.)) * width * 2.0;\n\t\n    uv.x += .1;\n    \n   \tvec3 col=vec3(0);\n\n   \n    for (int i = 0; i < ITERS; i++) {\n        float factor = 4.0 + 5.0*(cos(time)+1.0);\n    \tfloat g = value(uv*3.0-float(i)/10., width * factor);\n        col.r += g*cos(time*2.);\n        float p = float(i)-(cos(time/1.6)+.5)*float(ITERS);\n        if (p < .5 && p > 0.) \n            col.b +=6.*g;\n        if (p < 0.)\n            col.b -= g;\n       \n        \n        col.g += g;\n      \n        \n    }\n    col /= float(ITERS);\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dBSDK","date":"1415762188","viewed":205,"name":"Rotating Lemniscate","username":"okro","description":"Hmm.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["polar","coordinates","infinity"],"hasliked":0,"parentid":"","parentname":""}}