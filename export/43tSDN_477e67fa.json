{"ver":"0.1","info":{"id":"43tSDN","date":"1719154504","viewed":29,"name":"Gradients : xyY, XYZ, Lab","username":"ivar","description":"From bottom to top :\nRGB, xyY, linear RGB (same as XYZ), Lab, RGB\n5%, 30%, 30%, 30%, 5%\nSide note: IIUC, a XYZ gradient and a linear RGB gradient is the same thing.\nI'm surprised by how similar the Lab and linear RGB gradients are... ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["lab","xyz","xyy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define seed 10.0\n#define nb_tiles 6.0\n#define right_to_left_latency 5.0\n#define speed 1.0\n#define color_shift vec3(1.0 / 3.0, 2.0 / 5.0, 3.0 / 7.0)\n\n/* source (modified values): https://www.shadertoy.com/view/flGSzz */\n/* source (values): https://en.wikipedia.org/wiki/SRGB#Transformation */\n\nconst mat3 rgb2xyz = mat3(\n    0.4124, 0.2126, 0.0193,\n    0.3576, 0.7152, 0.1192,\n    0.1805, 0.0722, 0.9505\n);\n\nconst mat3 xyz2rgb = mat3(\n     3.2406, -0.9689,  0.0557,\n    -1.5372,  1.8758, -0.2040,\n    -0.4986,  0.0415,  1.0570\n);\n\n/* source: https://www.shadertoy.com/view/flGSzz */\n\nvec3 xyz2Yxy(vec3 xyz) {\n    float d = 1.0 / (xyz.x + xyz.y + xyz.z);\n    float x = xyz.x * d;\n    float y = xyz.y * d;\n    return vec3(xyz.y, x, y);\n}\n\nvec3 Yxy2xyz(vec3 Yxy) {\n    float x = Yxy.x * Yxy.y / Yxy.z;\n    float z = Yxy.x * (1.0 - Yxy.y - Yxy.z) / Yxy.z;\n    return vec3(x, Yxy.x, z);\n}\n\nfloat srgb2linear1(float channel) {\n    if (channel <= 0.04045)\n        return channel / 12.92;\n    else\n        return pow((channel + 0.055) / (1.0 + 0.055), 2.4);\n}\n\nvec3 srgb2linear(vec3 srgb) {\n    return vec3(\n        srgb2linear1(srgb.x),\n        srgb2linear1(srgb.y),\n        srgb2linear1(srgb.z)\n    );\n}\n\nfloat linear2srgb1(float channel) {\n    if(channel <= 0.0031308)\n        return 12.92 * channel;\n    else\n        return (1.0 + 0.055) * pow(channel, 1.0/2.4) - 0.055;\n}\n\nvec3 linear2srgb(vec3 linear) {\n    return vec3(\n        linear2srgb1(linear.x),\n        linear2srgb1(linear.y),\n        linear2srgb1(linear.z)\n    );\n}\n\n/* source (modified structure, maybe values): https://www.shadertoy.com/view/4syfRc */\n/* source (values): https://en.wikipedia.org/wiki/CIELAB_color_space#Converting_between_CIELAB_and_CIEXYZ_coordinates */\n\nvec3 d65_whitepoint = vec3(95.0489, 100.0, 108.884);\nfloat delta = 6.0 / 29.0;\n\nfloat xyz2lab1(float channel) {\n    if (channel > delta * delta * delta) {\n        return pow(channel, 1.0 / 3.0);\n    } else {\n        return channel / (delta * delta * 3.0) + 4.0 / 29.0;\n    }\n}\n\nvec3 xyz2lab(vec3 xyz){\n\tvec3 normalized = xyz / d65_whitepoint;\n\n    vec3 f = vec3(xyz2lab1(normalized.x),\n                  xyz2lab1(normalized.y),\n                  xyz2lab1(normalized.z));\n\n\treturn vec3((116.0 * f.y) - 16.0,\n                500.0 * (f.x - f.y),\n                200.0 * (f.y - f.z));\n}\n\nfloat lab2xyz1(float channel) {\n    if (channel > delta) {\n        return channel * channel * channel;\n    } else {\n        return 3.0 * delta * delta * (channel - 4.0 / 29.0);\n    }\n}\n\nvec3 lab2xyz(vec3 lab) {\n\tfloat fy = (lab.x + 16.0) / 116.0;\n\tfloat fx = fy + lab.y / 500.0;\n\tfloat fz = fy - lab.z / 200.0;\n\treturn vec3(lab2xyz1(fx), lab2xyz1(fy), lab2xyz1(fz)) * d65_whitepoint;\n}\n   \n/* source end */\n\nvec3 srgb2Yxy(vec3 rgb) {\n    return xyz2Yxy(srgb2linear(rgb) * rgb2xyz);\n}\n\nvec3 Yxy2srgb(vec3 Yxy) {\n    return linear2srgb(Yxy2xyz(Yxy) * xyz2rgb);\n}\n\n\nvec3 srgb2lab(vec3 rgb) {\n    return xyz2lab(srgb2linear(rgb) * rgb2xyz);\n}\n\nvec3 lab2srgb(vec3 lab) {\n    return linear2srgb(lab2xyz(lab) * xyz2rgb);\n}\n\nvec3 color(float t) {\n    return 0.5 + 0.5 * cos(t * color_shift);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    float t = iTime + seed;\n    \n    vec3 color1 = color(speed * t);\n    vec3 color2 = color(speed * (t + right_to_left_latency));\n    \n    float x = uv.x;\n    if (nb_tiles > 2.0) {\n        x = floor((uv.x * nb_tiles / (nb_tiles - 1.0)) * (nb_tiles - 1.0)) / (nb_tiles - 1.0);\n    }\n    \n    if (abs(uv.y - 0.5) > 0.45) {\n        fragColor = vec4(mix(color1, color2, uv.x), 1.0);\n    } else if (uv.y < 0.35) {\n        fragColor = vec4(Yxy2srgb(mix(srgb2Yxy(color1), srgb2Yxy(color2), x)), 1.0);\n    } else if (uv.y < 0.65) {\n        fragColor = vec4(linear2srgb(mix(srgb2linear(color1), srgb2linear(color2), x)), 1.0);\n    } else {\n        fragColor = vec4(lab2srgb(mix(srgb2lab(color1), srgb2lab(color2), x)), 1.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}