{"ver":"0.1","info":{"id":"NdcSRN","date":"1632796013","viewed":75,"name":"Dragon","username":"atnnn","description":"Animated Julia fractal with continuous color palette and smooth time dilation","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int maxit = 80;\nconst float antialias = 5.0;\nconst float radius = 1.6;\nconst bool debug = false;\nconst float time_dilate = 4.;\nconst int time_samples = 8;\n\nfloat pixd() {\n  return 1./min(iResolution.x, iResolution.y);\n}\n\nfloat its(vec2 p, vec2 c) {\n  int n = 0;\n  float low = radius;\n  float high = radius * radius + length(c) - low;\n  for(; n < maxit; n++){\n    if (length(p) > radius) {\n      return float(n) + 1. - (length(p) - low) / high;\n    }\n    p = vec2(p.x * p.x - p.y * p.y, 2. * p.x * p.y) + c;\n  }\n  return float(maxit) + (length(p) / low);\n}\n\nvec2 start(float t) {\n  float a = t / 3.1415;\n  float r = sin(t/ 2.618) * sin(t * 2.) / 2. + .5;\n  float a2 = t / 6.7;\n  float m = sin(t);\n  return mix(vec2(-0.835, -0.2321) * mat2(cos(a2), sin(a2), -sin(a2), cos(a2)), vec2(cos(a), sin(a)) * r, m);\n}\n\nfloat atime() {\n  int c = time_samples;\n  vec2 o = vec2(0.,0.);\n  float d = time_dilate / float(c);\n  float k = time_dilate;\n  float now = floor(iTime / d) * d;\n  float away = (now - iTime) / d;\n  float adjust = 0.;\n  bool lasta = its(o, start(now - time_dilate)) >= float(maxit);\n  for (int n = -c + 1; n <= c; n++) {\n    float i = now + float(n) * d;\n    bool nexta = its(o, start(i)) >= float(maxit);\n    float f = sin((i - iTime) / (time_dilate) * 3.1415926);\n    if (nexta != lasta) {\n      lasta = nexta;\n      adjust += f;\n    } else {\n      //adjust -= f;\n    }\n  }\n  return iTime + clamp(adjust, -time_dilate, time_dilate);\n}\n\n\nvec2 jitter(vec2 p, float n) {\n  float dx = fract(sin(dot(p, vec2(12.9898 * n, 78.233))) * 43758.5453) - 0.5;\n  float dy = fract(sin(dot(p, vec2(17.9898 * n, 78.233))) * 43758.5453) - 0.5;\n  return p + vec2(dx, dy) * pixd();\n}\n\nvec4 pal(float n, vec2 p, float ktime) {\n  float th = 5.;\n  float red = float(n) / (float(th) + 5.);\n  red = pow(n / float(maxit), .5);\n  if (n < th) {\n    return vec4(red, 0., 0., 1.);\n  }\n  if (n > float(maxit)) {\n    float w = (n - float(maxit)); \n    float inner = 1.1 + .6 * (2. - (ktime - iTime)) / 4.;\n    float m = 0.;\n    for (float j = 0.; j < antialias; j++) {\n      float i = its(jitter(p, j), start(ktime) * inner);\n      m += i;\n    }\n    m = m / antialias;\n    if (m >= float(maxit)) {\n      return vec4(0.,0.,0.,1.);\n    }\n    float r = m / float(maxit - 1);\n    return vec4( ((1. - r)/4. + .0) ,pow(w,3.),0.,1.);\n  }\n  return vec4(red, float(n - th) / (float(maxit) - th), 0., 1.);\n}\n\nvec4 layercol(vec4 a, vec4 b) {\n  return vec4(mix(a.rgb, b.rgb, 1.-a.a), max(a.a, b.a));\n}\n\nvec4 coloraa(vec2 p, float ktime) {\n  p *= 3.;\n  vec4 over = vec4(0.,0.,0.,0.);\n  if(debug) {\n      if (length(p-start(ktime)) < .04) {\n        over = max(over, vec4(0.,1.,0.,1.));\n      }\n    for (float n = -time_dilate; n <= time_dilate; n+=time_dilate * 2. / float(time_samples)) {\n      if (length(p-start(iTime - n)) < .05) {\n        float r = 1. - abs(n / 3.) / 2.;\n        float b = 0.;\n        if ( abs(n - 0.) < 0.0001 ) b = .8;\n        over = max(over, vec4(b,0.,1.,r));\n      }\n    }\n  }\n  vec4 c;\n  for (float n = 0.; n < antialias; n++) {\n    float i = its(jitter(p, n), start(ktime));\n    c += pal(i, p, ktime);\n  }\n  return layercol(over, c/antialias);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 uv = (fragCoord - iResolution.xy / 2.) * pixd();\n    float ktime = atime();\n    fragColor = coloraa(uv, ktime);\n}","name":"Image","description":"","type":"image"}]}