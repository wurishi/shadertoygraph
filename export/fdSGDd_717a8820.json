{"ver":"0.1","info":{"id":"fdSGDd","date":"1618084117","viewed":70,"name":"Raymarching Primitives of FUNK","username":"IMLXH","description":"okay why the heck is the floor warping? what is the power of this Long Boy","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","experiment","vaporwave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    return length(p-c)-r;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5) * length(ab);\n    float e = length(max(vec2(x,y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return e+i;\n}\n\nfloat sdTorus(vec3 p, vec2 r) {\n    float x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat dBox(vec3 p, vec3 s) {\n    return length(max(abs(p) - s, 0.));\n}\n\nfloat GetDist(vec3 p) {\n    vec4 s = vec4(0, 1, 6, 1); // sphere\n    \n    float sphereDist = length(p-s.xyz)-s.w; // s.w is sphere radius i guess\n    float planeDist = p.y;\n    \n    float cd = sdCapsule(p, vec3(0,1,6), vec3(1,2,6), .2);\n    float td = sdTorus(p-vec3(0.,.5,6.), vec2(1.5, .3));\n    float bd = dBox(p-vec3(-3., .75, 6.), vec3(.75));\n    float cyld = sdCylinder(p, vec3(0,.3,3), vec3(3,1,5), .3);\n    \n    float d = min(cd, planeDist);\n    d = min(d, td); // mixing objects in raymarching is done with min()\n    d = min(d, bd);\n    d = min(d, cyld);\n    return d;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        d-GetDist(p-e.xyy), // recreating the happy accident\n        d-GetDist(p-e.yxy),\n        d-GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + dO*rd;\n        float dS = GetDist(p);\n        dO += dS;\n        if (dS<SURF_DIST || dO>MAX_DIST) break;\n    }\n    return dO;\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if (d<length(lightPos-p)) dif *= .1; // shadows!\n    return dif;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y; // OOH you can do this all in one line\n\n    vec3 col = vec3(0);\n    \n    // CAMERA\n    vec3 ro = vec3(sin(iTime), 2, cos(iTime)-.5)*vec3(2., 1., 2.);\n    vec3 rd = normalize(vec3(uv.x, uv.y-.3, 1));\n\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p); // diffuse lighting\n    \n    col = GetNormal(p);\n    \n    col += dif;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}