{"ver":"0.1","info":{"id":"lsdSDH","date":"1459222636","viewed":319,"name":"Sun Planet","username":"rodolphito","description":"Check out the raymarching part of the code, it's a new idea I had, i haven't seen it used before on this site.\nMouse X rotates, mouse Y zooms.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 12\n#define MIN 0.005\n#define MOONS\nvec3 ry(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(ca,0.0,-sa,0.0,1.0,0.0,sa,0.0,ca);\n}\n\nvec3 rx(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(1.0,0.0,0.0,0.0,ca,-sa,0.0,sa,ca);\n}\n//return the vector to the closest point on the nearest surface.\nvec3 c(vec3 v)\n{\n    vec3 p0 = v-normalize(v);\n    #ifdef MOONS\n    vec3 moon1 = v+1.6*vec3(sin(iTime),0.0,cos(iTime));\n    vec3 p1 = moon1-normalize(moon1)*0.1;\n    vec3 moon2 = moon1+0.3*vec3(sin(iTime*5.0),0.0,-cos(iTime*5.0));\n    vec3 p2 = moon2-normalize(moon2)*0.02;\n    if (dot(p0,p0)>dot(p2,p2))p0=p2; //Moon\n    if (dot(p0,p0)>dot(p1,p1))p0=p1; //Moon\n    #endif\n    return p0;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 light = normalize(vec3(-1.0,0.0,0.0));\n    vec3 suncol = vec3(4.6,1.2,0.2);\n    vec3 planetcol = vec3(0.1,0.4,0.8);\n    vec3 atmoscol = vec3(0.2,0.7,1.0);\n\tvec3 mouse = vec3(iMouse.xy/iResolution.xy - 0.5,iMouse.z-.5);\n\tvec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n\tuv.x *= iResolution.x/iResolution.y;\n    vec3 p = vec3(.0,0.0,-40.0*(mouse.y+0.6));\n\t//p = rx(p,mouse.y*8.0);\n\tp = ry(p,mouse.x*8.0-iTime*0.1);\n\tvec3 d = vec3(uv,1.0);\n\t//d = rx(d,mouse.y*8.0);\n\td = ry(d,mouse.x*8.0-iTime*0.1);\n\td = normalize(d);\n    vec3 n = vec3(0.0);\n    float color = 0.0;\n    for (int i = 0; i < STEPS; i++)\n    {\n        n = c(p);\n    \tfloat a = length(n)-MIN;\n        if (a <= 0.0) break;\n        p += d * max(a,0.0);\n    }\n    float t = length(n);\n    n = n / t;\n    float planet = min(t,1.0);\n    float atmos = (1.0-abs(dot(d,n)))*max(dot(n,light)+0.3,0.0);\n    float diffuse = (max(dot(n,light),0.0) + 0.15)*(1.0-planet);\n    float sun = planet*max(dot(d,light)-0.5,0.0)*2.0;\n    fragColor = vec4(atmos*(atmoscol+suncol*max(dot(d,light)-0.5,0.2))+diffuse*planetcol+sun*suncol, 1.0);\n    //fragColor = vec4((mix(planetcol,lightcol,planet)*mix(diffuse,sun,planet))+atmos*atmoscol, 1.0);\n    //fragColor = vec4((mix(planetcol,lightcol,sqrt(1.0-planet))) * color, 1.0);\n    //fragColor = vec4(planet);\n    //fragColor = vec4(color);\n    //fragColor = vec4(diffuse*planet);\n    //fragColor = vec4(atmos);\n    //fragColor = vec4(atmos*(atmoscol+suncol*dot(d,light)),1.0);\n}","name":"Image","description":"","type":"image"}]}