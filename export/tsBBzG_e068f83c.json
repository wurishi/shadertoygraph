{"ver":"0.1","info":{"id":"tsBBzG","date":"1590261223","viewed":957,"name":"Outline 2020 Freestyle Live code","username":"NuSan","description":"Shader coded live during Outline Online 2020 in ~2h\nThere is two scenes that you can switch by changing SCENE from 0 to 1","likes":47,"published":1,"flags":0,"usePreview":0,"tags":["livecode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shader coded live during Outline Online 2020 in ~2h\n// There is two scenes that you can switch by changing SCENE from 0 to 1\n\n#define SCENE 0\n\nfloat time = 0.;\n\n#define repeat(a,b) (fract((a)/(b)+.5)-.5)*(b)\n#define repid(a,b) floor((a)/(b)+.5)\n\nfloat fft(vec2 t) {\n  return texture(iChannel0, vec2((fract(t.x*10.)+fract(t.y))*.1)).x*50.;\n}\n\n\nvec2 rnd(vec2 p){\n  \n  return fract(sin(p*425.522+p.yx*847.554)*352.742);\n}\n\nfloat rnd(float a) {\n  return fract(sin(a*254.574)*652.512);\n}\n\nfloat curve(float t, float d) {\n  t/=d;\n  return mix(rnd(floor(t)), rnd(floor(t)+1.), pow(smoothstep(0.,1.,fract(t)), 10.));\n}\n\nfloat tick(float t, float d) {\n  t/=d;\n  return (floor(t) + pow(smoothstep(0.,1.,fract(t)), 10.)) * d;\n}\n\n\n\nfloat box(vec3 p, vec3 s) {\n  p=abs(p)-s;\n  return max(p.x, max(p.y,p.z));\n}\n\nmat2 rot(float a) {\n  float ca=cos(a);\n  float sa=sin(a);\n  return mat2(ca,sa,-sa,ca);\n}\n\nfloat at=0.;\nfloat at2=0.;\n#if SCENE==0\nfloat map(vec3 p){\n  \n  //p.xy *= rot(sin(-length(p.xy)*.02 + time*2)*1+time);\n  //p.yz *= rot(sin(-length(p.yz)*.03 + time*4)*1);\n  p.xz *= rot(sin(-length(p.xz)*.07 + time*1.)*1.);\n  \n  \n  p.y += pow(smoothstep(0.,1.,sin(-pow(length(p.xz),2.)*.001 + time*4.)),3.)*4.;\n  \n  float d=-p.y;\n  \n  for(float i=0.; i<4.; ++i) {\n    vec3 p2 = p;\n    p2.xz *= rot(i+.7);\n    p2.xz -= 7.;\n    float id=fft(rnd(repid(p2.xz, 10.)));\n    p2.xz = repeat(p2.xz, 10.);\n    \n    d=min(d, box(p2, vec3(1,0.3*id,1)));\n    //d=max(d, -box(p2, vec3(4,id*130,4)));\n    \n  }\n  \n  vec3 p3 = p;\n  float t3 = time*.13;\n  p3.xz *= rot(t3);\n  p3.xy *= rot(t3*1.3);\n  p3=repeat(p3, 5.);\n  float d2 = box(p3, vec3(1.7));\n  //d = max(d, -d2*1.3);\n  d = min(d, d-d2*0.1);//*curve(time, .3));\n  \n  //d = min(d, -p.y);\n  \n  vec3 p4 = p;\n  float t4 = time*1.33;\n  p4.xz=repeat(p4.xz, 200.);\n  p4.yz *= rot(t4);\n  p4.xz *= rot(t4*1.3);\n  \n  at += 0.04/(1.2+abs(length(p4.xz)-17.));\n  \n  vec3 p5 = p;\n  float t5 = time*1.23;\n  p5.xz=repeat(p5.xz, 200.);\n  p5.yz *= rot(t5*.7);\n  p5.xy *= rot(t5);\n  \n  at2 += 0.04/(1.2+abs(box(p5,vec3(37))));\n  \n  //d -= sin(time);\n  \n  return d*.7;\n}\n#endif\n\nfloat grid2(vec3 p) {\n  float v=0.0;\n  p *= 0.004;\n  for(float i=0.; i<3.; ++i) {\n    p *= 1.7;\n    p.xz *= rot(0.3+i);\n    p.xy *= rot(0.4+i*1.3);\n    p += vec3(0.1,0.3,-.13)*(i+1.);\n    vec3 g=abs(fract(p)-.5)*2.0;\n    //v-=g.x*g.y*g.z*.7;\n    v-=min(g.x,min(g.y,g.z))*.7;\n  }\n  return v;\n}\n\n#if SCENE==1\nfloat map(vec3 p){\n  \n  //p.x += smoothstep(0,1,sin(p.y*.01 + time))*100*curve(time, .5);\n  \n  float ppy=p.y;\n  \n  p.y = repeat(p.y,300.);\n  //p.x = repeat(p.x,500);\n  \n  p.xz *= rot(sin(-length(p.xz)*.0007 + time*.5 + ppy*.005)*1.);\n  \n  //p.xz *= rot(sin(-length(p.xz)*.07 + time*1 + p.y*.05)*1);\n  \n  vec3 p4=p;\n  float t4=0.;\n  p4.yz *= rot(t4);\n  p4.xz *= rot(t4*1.3);\n  \n  float d = box(p4, vec3(20));\n  float ss = 10.;\n  d = max(d, -box(p4, vec3(ss,ss,100)));\n  d = max(d, -box(p4, vec3(ss,100,ss)));\n  d = max(d, -box(p4, vec3(100,ss,ss)));\n  \n  vec3 p3 = p;\n  p3.xz *= rot(sin(time*3. + p.y*.01)*.3);\n  p3.xz = abs(p3.xz)-30.;\n  p3.xz = abs(p3.xz)-10.*(sin(time+p.y*.05)*.5+.5);\n  d = min(d, length(p3.xz)-5.);\n  \n  \n  float g = grid2(p);\n  float d2 = d-5.-g*12.7;// * smoothstep(-1,1,sin(tick(time, 1)+p.y*.1));\n  d = min(d+4.3, d2);\n  \n  vec3 p6 = p;\n  float t6 = time*1.33;\n  p6.xz=repeat(p6.xz, 40.);\n  p6.yz *= rot(t6);\n  p6.xz *= rot(t6*1.3);\n  \n  at += 0.04/(1.2+abs(length(p6.xz)-17.));\n  \n  vec3 p5 = p;\n  float t5 = time*1.23;\n  //p5.xz=repeat(p5.xz, 200);\n  p5.yz *= rot(t5*.7);\n  p5.xy *= rot(t5);\n  \n  at2 += 0.04/(0.7+abs(box(p5,vec3(37))));\n  \n  \n  vec3 p7 = p;\n  float t3 = time*.13;\n  p7.xz *= rot(t3);\n  p7.xy *= rot(t3*1.3);\n  p7=repeat(p7, 5.);\n  float d7 = box(p7, vec3(1.7));\n  //d = max(d, -d7*1.3);\n  d = min(d, d*.7-d7*0.7);//*curve(time, .3));\n  \n  return d*.7;\n}\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n    \n  time = mod(iTime*1., 300.);\n  \n  float si = 30.;// + 50 * curve(time, .1);\n  vec2 grid=abs(fract(uv*si)-.5)*2.;\n  //uv=floor(uv*si+.5)/si;\n  \n  \n\n  vec3 s=vec3(0,0,-50);\n  s.xz += (curve(time, 1.6)-.5)*30.;\n  vec3 t=vec3(0);\n  \n  // SWITCH NIGHT MOOD\n  float part = smoothstep(-0.1,.1,sin(time));\n  \n  float adv = time*.1;//tick(time, .5)*2;\n  s.yz *= rot(sin(adv*.3)*.3+0.5);\n  s.xz *= rot(adv);\n \n#if SCENE==1  \n  s.y -= 100.;\n  s.x += 100.;\n  \n \n  float push=tick(time, .5) * 100.;\n  s.y += push;\n  t.y += push;\n#endif\n  \n  \n  vec3 cz=normalize(t-s);\n  vec3 cx=normalize(cross(vec3(0,1,0), cz));\n  vec3 cy=normalize(cross(cx, cz));\n  float fov = 0.4;// + curve(time, 0.5)*1.3;\n  vec3 r=normalize(uv.x*cx + uv.y*cy + fov*cz);\n  \n  vec3 col=vec3(0);\n  \n  vec3 p=s;\n  for(int i=0; i<100; ++i) {\n    float d=abs(map(p));\n    if(d<0.01) {\n      d=0.1;\n      break;\n    }\n    if(d>300.) break;\n    p+=r*d;\n    //col += 0.001/(0.1+abs(d));\n  }\n  col += at * vec3(.3,.4,1) * (1.+curve(time, .3));\n  col += at2 * vec3(1.0,.4,.6) * (1.+curve(time, .4));\n  \n  col *= part;\n  \n  \n  //*\n  float fog = 1.-clamp(length(p-s)/300.,0.,1.);\n  \n  vec2 off=vec2(0.01,0);\n  vec3 n=normalize(map(p)-vec3(map(p-off.xyy), map(p-off.yxy), map(p-off.yyx)));\n  vec3 l=normalize(-vec3(1,1.3,2));\n  vec3 h=normalize(l-r);\n  \n  float sss=0.;\n  for(float i=1.; i<20.; ++i){\n    float dist = i*5.2;\n    sss += smoothstep(0.,1.,map(p+l*dist)/dist);\n    \n  }\n  vec3 col2 = vec3(0);\n  col2 += sss * vec3(1,.3,.8) * .15 * fog ;\n  \n  float ao=smoothstep(0.,1.,map(p+n));\n  \n  vec3 sky = mix(vec3(1,.6,.7)*0.1/(.1+abs(r.y)), vec3(1,.9,.3)*10., pow(max(0.,dot(r,l)), 20.));\n  \n  col2 += max(0., dot(n,l)) * (pow(max(0.,dot(h,n)),10.))*fog*ao;\n  \n  col2 += pow(1.-fog,2.) * sky;\n  col += col2*(1.-part);\n  //*/\n  \n  /*\n  float t3 = time*.1;\n  col.xz *= rot(t3 + r.x*.17);\n  col.yz *= rot(t3*1.2 + r.y*.13);\n  col=abs(col);\n  //*/\n  \n  col *= 1.2-length(uv);\n  \n  float lum = clamp(col.x,0.,1.);\n  float factor = step(+1.-1.+0.7*lum,min(grid.x, grid.y))+.7;\n  \n  //col *= factor;\n  \n  col += max(col.yzx-1.,0.);\n  col += max(col.zxy-1.,0.);\n  \n  col=smoothstep(0.,1.,col);\n  col=pow(col, vec3(0.4545));\n  \n  fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}