{"ver":"0.1","info":{"id":"Mt2GWt","date":"1433732234","viewed":596,"name":"FFT Domain Coloring","username":"pixelbeast","description":"Wait 5s for track to start...\n*Added FFT colors to https://www.shadertoy.com/view/Mt2GDV# from David Bargo\n*Smooth HSV by iq.\n*Grid and click to zoom based on Ray Marching Experiment 23 by aiekick","likes":30,"published":1,"flags":0,"usePreview":0,"tags":["fftcomplexvisualizers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","previewfilepath":"/media/ap/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Iain Melvin - added FFT_IZE\n// Created by David Bargo - davidbargo/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define PI 3.14159265359\n#define E  2.71828182845\n\n// Uncomment to see original functions\n#define FFT_IZE\n\nvec2 sinz(vec2 c) \n{\n    float a = pow(E, c.y);\n    float b = pow(E,-c.y);\n    return vec2(sin(c.x)*(a + b)*0.5, cos(c.x)*(a - b)*0.5);\n}\n\nvec2 cosz(vec2 c) \n{\n    float a = pow(E, c.y);\n    float b = pow(E,-c.y);\n    return vec2(cos(c.x)*(a + b)*0.5, -sin(c.x)*(a - b)*0.5);\n}\n\nvec2 tanz(vec2 c) \n{\n    float a = pow(E, c.y);\n    float b = pow(E,-c.y);\n    float cosx = cos(c.x);\n    float sinhy = (a - b)*0.5;\n    return vec2(sin(c.x)*cosx, sinhy*(a + b)*0.5)/(cosx*cosx + sinhy*sinhy);\n}\n\nvec2 logz(vec2 c) \n{\n    return vec2(log(sqrt(dot(c, c))), atan(c.y, c.x));\n}\n\nvec2 sqrtz(vec2 c) \n{\n    float n = c.x + sqrt(dot(c, c));\n    return vec2(n, c.y)/sqrt(2.0*n);\n}\n\nvec2 exp2z(vec2 c) \n{\n\treturn vec2(c.x*c.x - c.y*c.y, 2.*c.x*c.y);   \n}\n\nvec2 epowz(vec2 c) \n{\n\treturn vec2(cos(c.y), sin(c.y))*pow(E, c.x);   \n}\n\nvec2 mulz(vec2 c1, vec2 c2)\n{\n    return c1*mat2(c2.x, -c2.y, c2.y, c2.x);\n}\n\nvec2 divz(vec2 n, vec2 d)\n{\n    return n*mat2(d.x, d.y, -d.y, d.x)/dot(d, d);\n}\n\nvec2 invz(vec2 c)\n{\n\treturn vec2(c.x, -c.y)/dot(c, c);\n}\n\nvec2 func(float cellID, vec2 c)\n{\n    vec2 fz = c;\n    if (cellID == 0.)       fz = c;\n    else if (cellID == 1.)  fz = sinz(c);\n   \telse if (cellID == 2.)  fz = sqrtz(divz(logz(vec2(-c.y - 6.0, c.x)), logz(vec2(-c.y + 2.0, c.x))));\n   \telse if (cellID == 3.)  fz = epowz(c);\n   \telse if (cellID == 4.)  fz = tanz(tanz(c));\n   \telse if (cellID == 5.)  fz = tanz(sinz(c));\n   \telse if (cellID == 6.)  fz = sqrtz(vec2(1.0 + c.x, c.y)) + sqrtz(vec2(1.0 - c.x, -c.y));\n   \telse if (cellID == 7.)  fz = divz(tanz(exp2z(c)), c);\n   \telse if (cellID == 8.)  fz = sinz(cosz(sinz(c)));\n   \telse if (cellID == 9.)  fz = invz(vec2(1.0, 0.0) + epowz(vec2(c.y, c.x)));\n   \telse if (cellID == 10.) fz = epowz(invz(sqrtz(-c)));\n   \telse if (cellID == 11.) fz = exp2z(invz(c));\n   \telse if (cellID == 12.) fz = epowz(sinz(epowz(cosz(c))));   \t\n    else if (cellID == 13.) fz = divz(sinz(c), c);\n   \telse if (cellID == 14.) fz = exp2z(c);\n   \telse if (cellID == 15.) fz = divz(sinz(c), cosz(exp2z(c)));\n    else if (cellID == 16.) fz = invz(c + vec2(1.0, 0.0)) + invz(c - vec2(1.0, 0.0));\n    else if (cellID == 17.) fz = logz(c - invz(c));\n   \telse if (cellID == 18.) fz = divz(sqrtz(vec2(c.x + 1.0, c.y)), sqrtz(vec2(c.x - 1.0, c.y)));\n   \telse if (cellID == 19.) fz = invz(vec2(1.0, 0.0) + mulz(c, exp2z(exp2z(c))));\n\n    return fz;   \n}\n\nvec2 animate(vec2 v) \n{\n\tfloat s = sin(iTime);\n    float c = cos(iTime);\n    return v*mat2(c, -s, s, c);\n}\n\n// iq's smooth hsv to rgb\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\trgb = rgb*rgb*(3.0-2.0*rgb);\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n\nvec2 gridSize = vec2(5.,4.);\n\nvec3 getCell(vec2 s, vec2 h) \n{\n    float cx = floor(h.x*gridSize.x/s.x);\n    float cy = floor(h.y*gridSize.y/s.y);\n    return vec3(cx, cy, (gridSize.y - 1.0 - cy)*gridSize.x + cx);\n}\n\nvec3 getSmallCells(vec2 s, vec2 h)\n{\n    vec3 c = getCell(s, h);\n    vec2 size = s/gridSize;\n    float ratio = size.x/size.y;\n    vec2 uv = PI*((2.*h-size)/size.y - 2.*vec2(c.x*ratio,c.y));    \n    return vec3(c.z, uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;\n    vec2 coord = fragCoord.xy;\n    \n    vec3 cell = iMouse.z>0.? \n        vec3(getCell(res, iMouse.xy).z, PI*(2.*coord-res)/(res.y)) : \n    \tgetSmallCells(res, coord);\n\n    vec2 z = animate(func(cell.x, cell.yz))*2.0;\n    \n#ifdef FFT_IZE\n    \n    fragColor = texture(iChannel0, z*0.25);\n   \n    float wav_or_fft=0.25; \n    float a = texture( iChannel0, vec2(abs(z.x)*0.1,wav_or_fft) )[0];\n    float b = texture( iChannel0, vec2(abs(z.y)*0.1,wav_or_fft) )[0];\n    float hue = a*b;\n    \n    float sat = 1.0;\n   \n    vec2 r = abs(fract(vec2(a,b)) - 0.5) - 0.25;\n    r = step(0.0, r)*r*4.0;\n    r = 1. - r*r*r*r;\n    float val = mix(1.0, r.x*r.y, sat*0.5);\n    \n\tfragColor = vec4(hsv2rgb(vec3(hue,sat,val)),1.0);\n#else \n    \n    float hue = atan(z.y,z.x)/(2.0*PI);\n    \n    float l = length(z);\n    float sat = abs(fract(l)-0.5)-0.25;\n    sat = step(0.0, sat)*sat*4.0;\n    sat = 1. - sat*sat;\n    \n    vec2 r = abs(fract(z) - 0.5) - 0.25;\n    r = step(0.0, r)*r*4.0;\n    r = 1. - r*r*r*r;\n    float val = mix(1.0, r.x*r.y, sat*0.5);\n    \n\tfragColor = vec4(hsv2rgb(vec3(hue,sat,val)),1.0);\n#endif\n}","name":"Image","description":"","type":"image"}]}