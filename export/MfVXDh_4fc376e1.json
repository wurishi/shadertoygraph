{"ver":"0.1","info":{"id":"MfVXDh","date":"1715284511","viewed":21,"name":"AK FYP11: Hex. Tiling Grid (UV)","username":"AKHC","description":"A grid with hexagonal cells that can be accessed with coordinates through a function. This version displays the UVs within the hexagonal space.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float HexDist(vec2 p)\n{\n    //drawing hexagon\n    p = abs(p); //clamps where the hexagon is drawn\n    float c = dot(p, normalize(vec2(1, 1.73))); //1.73 is sqrt of 3\n    c = max(c, p.x);        //idk what this does\n    return c;\n}\n\n\n//function that returns hex coordinate\nvec4 HexCoords(vec2 uv)\n{\n    vec2 r = vec2(1, 1.73);\n    vec2 h = r / 2.;\n    vec2 a = mod(uv, r)-h;\n    vec2 b = mod(uv-h, r)-h;\n    \n    vec2 gv;\n    \n    if(length(a) < length(b))\n    {\n        gv = a;\n    }\n    else\n    {\n        gv = b;\n    }\n    \n    \n    float x = atan(gv.x, gv.y);\n    float y = .5-HexDist(gv);\n    \n    //calculating ID\n    vec2 id = uv-gv;\n    \n    return vec4(x, y, id);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0);\n    \n    uv *= 20.;\n    \n    vec4 hc = HexCoords(uv);\n    \n    float c = smoothstep(.05, .03, hc.y * sin(hc.z / hc.w + iTime));\n    \n    col += c;\n    \n    col.rg = HexCoords(uv).xy;\n    \n    //col += sin(HexDist(HexCoords(uv).xy) * 10. + iTime * 10.); //second parameter is size\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}