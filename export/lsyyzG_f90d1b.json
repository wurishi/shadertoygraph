{"ver":"0.1","info":{"id":"lsyyzG","date":"1522401210","viewed":139,"name":"Noise - Perlin Noise","username":"nawafuji","description":"tested perlin-like gradient noise\nreference https://www.shadertoy.com/view/4dS3Wd\n","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 baseColor = vec3(0.0,0.0,0.0);\nconst vec3 cloudColor = vec3(1.0,1.0,1.0);\n\n\nfloat fbm(vec4 x) {\n\tfloat v = 0.0;\n    float a = 0.5;\n\tfor (int i = 0; i < 4; ++i) {\n\t\tv += x[i] * a;\n        a *= 0.5;\n\t}\n\treturn v;\n}\n\nfloat turbulence(vec4 x) {\n\tfloat v = 0.0;\n    float a = 0.5;\n\tfor (int i = 0; i < 4; ++i) {\n\t\tv += abs(a * (x[i] - 0.5))*2.0;\n        a *= 0.5;\n\t}\n\treturn v;\n}\n\nfloat marble(vec4 x) {\n\tfloat v = 0.0;\n    float a = 0.5;\n\tfor (int i = 0; i < 4; ++i) {\n\t\tv += abs(a * (x[i] - 0.5));\n        a *= 0.5;\n\t}\n\treturn sin(v*12.0)*0.5+0.5;\n    \n}\n\nfloat granite(vec4 x) {\n\tfloat v = min(1.0, x[3]*4.0);\n\treturn  v;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec4 tex = texture(iChannel0, uv);\n\n    \n    float val;\n    if(uv.x>0.5)\n    {\n        if(uv.y>0.5)\n        {\n    \t\tval = fbm(tex);\n        }\n        else\n        {\n            val = turbulence(tex);\n        }\n    }\n    else\n    {\n        if(uv.y>0.5)\n        {\n            val = marble(tex);\n        }\n        else\n        {\n            val = granite(tex);\n        }\n    }\n    \n    // Output to screen\n    \n    float tmp = clamp(texture(iChannel0,fract(iTime)*vec2(1.0,0)).r*2.0,0.0,1.0);\n    //val *= clamp(texture(iChannel0,fract(iTime)*vec2(1.0,0)).r*2.0,0.0,1.0);\n    vec3 color = mix(baseColor, cloudColor, val);\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\n\n\n#define NOISE fbm\n#define NUM_NOISE_OCTAVES 5\n#define BASE_FREQUENCY 32\n\nfloat hash(float n) { return fract(sin(n) * 1e4); }\nfloat hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\n\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(hash(i), hash(i + 1.0), u);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat noise(vec3 x) {\n    const vec3 step = vec3(110, 241, 171);\n\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n \n    // For performance, compute the base input to a 1D hash from the integer part of the argument and the \n    // incremental change to the 1D based on the 3D -> 1D wrapping\n    float n = dot(i, step);\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\n               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\n\nfloat fbm(float x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tfloat shift = float(100);\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n\nfloat fbm(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\t// Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nfloat turbulence(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += abs(a * (noise(x) - 0.5));\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn clamp(v*4.0,0.0,1.0);\n}\n\n\nfloat marble(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += abs(a * (noise(x) - 0.5));\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn  sin(v*12.0) * 0.5 + 0.5;\n}\n\nfloat granite(vec2 x) {\n\tfloat v = min(1.0, 4.0*noise(x*16.0));\n\treturn  v;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 color;\n    float f = 1.0 * float(BASE_FREQUENCY);\n    for (int i = 0; i < 4; ++i) {\n        color[i] = noise(uv*f);\n        f *= 2.0;\n    }\n    fragColor = color;\n    //fragColor = vec4(fbm(uv*float(BASE_FREQUENCY)));\n    //fragColor = vec4(turbulence(uv*float(BASE_FREQUENCY)));\n    //fragColor = vec4(marble(uv*float(BASE_FREQUENCY)));\n    //fragColor = vec4(granite(uv*float(BASE_FREQUENCY)));\n}","name":"Buf A","description":"","type":"buffer"}]}