{"ver":"0.1","info":{"id":"WsGyzV","date":"1603205567","viewed":209,"name":"My First Voronoi Shader","username":"oneshade","description":"I got some knowledge about how voronoi cells work from The Art of Code and made this. I used my edge detection algorithm from my shader \"Simple Webcam Edge Detection\" (https://www.shadertoy.com/view/3sVcRV) to draw the cell boundaries.","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["voronoi","edgedetection","edges"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Edge detection algorithm from my shader \"Simple Webcam Edge Detection\" (https://www.shadertoy.com/view/3sVcRV).\nconst bool DETECT_EDGES = true;\nconst float SQRT_2 = sqrt(2.0);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 color = texture(iChannel0, uv).rgb;\n    float sensitivity = 3.624 / iResolution.y;\n\n    if (DETECT_EDGES) {\n        mat3 samples = mat3(0.0);\n        for (int i=-1; i < 2; i++) {\n            for (int j=-1; j < 2; j++) {\n                uv = (fragCoord + vec2(i, j)) / iResolution.xy;\n                vec3 curTexel = texture(iChannel0, uv).rgb;\n                samples[i + 1][j + 1] = max(curTexel.r, max(curTexel.g, curTexel.b));\n            }\n        }\n\n        bool onEdge = false;\n        for (int i=0; i < 3; i++) {\n            for (int j=0; j < 3; j++) {\n                float gradient1 = samples[1][1] - samples[i][j];\n                float gradient2 = samples[2 - i][2 - j] - samples[1][1];\n                if (i == j || (2 - i) == j) {\n                    gradient1 /= SQRT_2;\n                    gradient2 /= SQRT_2;\n                }\n\n                if ((gradient1 >= sensitivity && gradient2 >= sensitivity) || (gradient1 < -sensitivity && gradient2 < -sensitivity)) {\n                    onEdge = true;\n                    break;\n                }\n            }\n        }\n\n        color = onEdge ? color : vec3(1.0, 0.6, 0.0);\n    }\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 GetPoint(in vec2 cell) {\n    return 0.5 + 0.5 * vec2(sin(cell.x - cell.y + iTime), cos(cell.x + cell.y * iTime));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    vec2 cellLocation = floor(uv);\n\n    float minDist = length(uv - (cellLocation + GetPoint(cellLocation)));\n    for (int i=-1; i < 2; i++) {\n        for (int j=-1; j < 2; j++) {\n            vec2 curCellLocation = cellLocation + vec2(i, j);\n            vec2 curCellPoint = curCellLocation + GetPoint(curCellLocation);\n            minDist = min(minDist, length(uv - curCellPoint));\n        }\n    }\n\n    vec3 color = 1.0 - vec3(minDist);\n    fragColor = vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}