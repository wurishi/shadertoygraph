{"ver":"0.1","info":{"id":"lcBcDw","date":"1723182058","viewed":436,"name":"grid and lines","username":"dccjohnny","description":"skyline","likes":28,"published":1,"flags":0,"usePreview":0,"tags":["effectperspective"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 GetPos(vec2 id)\n{\n    vec2 n=N22(id)*iTime*.7;\n    return sin(n)*.4;\n\n}\nfloat Circle(vec2 uv,vec2 p,float r,float blur)\n{\n    float d=length(uv-p);\n    float c=smoothstep(r,r-blur,d);\n    return c;\n}\nfloat Band(float t,float start,float end,float blur)\n{\n    float step1=smoothstep(start-blur,start+blur,t);\n    float step2=smoothstep(end+blur,end-blur,t);\n    return step1*step2;\n}\nfloat Rectangle(vec2 uv,float left,float right,float bottom,float top,float blur)\n{\n    float band1=Band(uv.x,left,right,blur);\n    float band2=Band(uv.y,bottom,top,blur);\n    return band1*band2;\n}\nfloat GridLine(vec2 uv,vec2 ouv,float density ,float width)\n{\n    float gridLine=0.0;\n    float masky=abs(ouv.y-0.5);\n    ouv=1.-abs(ouv-0.5);\n    uv*=density;\n    uv=fract(uv);\n    uv-=0.5;\n    uv=abs(uv);\n    float maskx=uv.x;\n\n    uv.x=smoothstep(width,0.0,uv.x);\n    uv.y=smoothstep(ouv.y*ouv.y*width*5.0,0.0,uv.y);//待解决y轴的粗细\n    gridLine=max(uv.y,uv.x);\n\n    maskx=smoothstep(0.1,0.0,maskx);\n    masky=smoothstep(0.1,0.3,masky);\n    masky=clamp((masky-maskx),0.,1.);\n    return gridLine*(maskx+masky);\n    \n\n}\nvec2 GridRing(vec2 uv,float density,float radius,float Blur,float holeRadiusRatio)\n{\n\n    float circle;\n    float ring;\n\n    uv*=density;\n    uv=fract(uv);\n    uv-=0.5;\n    uv=abs(uv);\n\n\n    circle=Circle(uv,vec2(0.,0.),radius,Blur);\n\n    ring=circle-Circle(uv,vec2(0.,0.),radius*holeRadiusRatio,Blur);\n\n    return vec2(circle,ring);\n}\nfloat GridRingLine(vec2 uv,vec2 ouv,float density,float width,float radius,float Blur,float holeRadiusRatio)\n{\n     float grid=GridLine(uv,ouv,density,width);\n     vec2 ring=GridRing(uv,density,radius,Blur,holeRadiusRatio);\n\n     grid*=1.-ring.x;\n     grid+=ring.y;\n\n     return grid;\n}\nfloat RandomSquares(vec2 uv,float density )\n{\n    uv*=density;\n    vec2 id=floor(uv);\n    uv=fract(uv);\n    uv-=0.5;\n    vec2 p=N22(id);\n    p=vec2(remapF01(-0.5,0.5,p.x),remapF01(-0.5,0.5,p.y));\n\n\n    float s=remapF01(0.02,0.3,N21(id));\n\n    float f=N21(id+365.22);\n\n    float rect=Rectangle(uv,p.x-s,p.x+s,p.y-s,p.y+s,0.02)*f*(sin(iTime*5.+N21(id+765.1)*6.28)+1.)*0.5;\n\n    return rect;\n}\nfloat RandomSparkers(vec2 uv,float density,float i)\n{\n    float dots;\n    uv*=density;\n    vec2 id=floor(uv);\n    uv=fract(uv);\n    uv-=0.5;\n\n    float maxR=0.1;\n    vec2 p=N22(id+i);\n\n    p=vec2(remapF01(-0.5+maxR,0.5-maxR,p.x),remapF01(-0.5+maxR,0.4-maxR,p.y));\n\n\n    vec2 j=(p-uv)*70.;\n    dots=1./dot(j,j);\n    dots*=sin(iTime*10.+p.x*10.)*.5+.5;\n    return dots;\n}\nfloat RandomSparkersForward(vec2 uv,float speed,float scale)\n{\n    float sparkerForward=0.;\n\n    for(float k=0.;k<1.;k+=1./4.)\n    {\n       float z=fract(k+iTime*speed);\n       float size=mix(scale,.5,z);\n       float fade=smoothstep(0.,0.5,z)*smoothstep(1.,.8,z);\n       sparkerForward+=RandomSparkers(uv,size,k)*fade;\n    }\n\n    return sparkerForward;\n}\n float RandomSparkersRise(vec2 uv,float density)\n{\n    float dots;\n    uv*=density;\n    vec2 id=floor(uv);\n    uv=fract(uv);\n    uv-=0.5;\n\n\n    vec2 p=GetPos(id);\n\n    \n\n\n    vec2 j=(p-uv)*70.;\n    dots=1./dot(j,j);\n    dots*=sin(iTime*10.+p.x*10.)*.5+.9;\n    return dots;\n}\nfloat FlowLines(vec2 uv, float resolutionX, float resolutionY)\n{\n\n    uv.x-=0.5;\n    uv.x=abs(uv.x)*2.0;\n    float hx=uv.x;\n    uv.x=1.-uv.x;\n    uv.x*=_flowDensity;\n\n    uv.y=1.-uv.y;\n    uv.y+=uv.x;\n\n\n    float a=fract(tan(resolutionX)*7.);\n\n \n    \n\n    float b=a*10.*(uv.y)/(mod(a*iResolution.y*(iTime+60.)*_flowSpeed,iResolution.x)-resolutionY)*uv.y;\n\n    return b;\n\n}\nvoid mainImage(out vec4 fragColor, vec2 fragCoord){\n    \n    float t=mod(iTime,7200.);\n    vec2 ouv=fragCoord/iResolution.xy;\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y; \n    \n    uv.y-=_horizontalHight;\n    \n    vec2 ouv2=uv;\n    ouv2.x*=iResolution.y/iResolution.x;\n    ouv2+=0.5;\n  \n    float fade=clamp(remap(0.,0.5,0.0,0.8,-uv.y-0.12),0.,1.);\n    float inversFade=clamp(remap(0.,0.3,0.0,0.5,uv.y-(-0.10)),0.,1.);\n\n    float circleFade=smoothstep(-0.6+_BGcircleScale,0.2+_BGcircleScale,1.-length((ouv-0.5)*2.0));\n\n    vec2 puv = PerspectiveUV(uv);\n\n    float gridRingLine=GridRingLine(vec2(puv.x,puv.y+=iTime*_gridSpeed),ouv2,_gridScale,_gridLineWidth,_gridRingRadius,0.02,_gridRingHoleRate);\n\n    float squares=RandomSquares(vec2(puv.x,puv.y+=t*_squareSpeed),_squareScale);\n\n    float sparkerRise=RandomSparkersRise(vec2(uv.x,uv.y-iTime*_sparkRiseSpeed),_sparkRiseScale);\n\n    float sparkerForward=RandomSparkersForward(uv,_sparkerForwardSpeed,_sparkerForwardScale);\n\n    float flowLine=FlowLines(ouv,fragCoord.x,fragCoord.y);\n\n\n\n    float maskdown=clamp(squares*_squareIntensity+gridRingLine*_girdIntensity+sparkerForward*_sparkerForwardIntensity,0.,1.)*fade;\n\n    float maskup=(clamp(sparkerRise*_sparkRiseIntensity,0.,1.)+clamp(flowLine*_flowIntensity,0.,1.))*inversFade;\n\n    float mask=(maskup+maskdown);\n\n    vec3 col =_Color;\n    vec3 horizonCol =_horizonColor;\n    vec3 haloCol =_haloColor;\n\n    float horizonBG=length(uv*vec2(1.,50.)-vec2(0.,-5.));\n    horizonBG=(1./pow(dot(horizonBG,horizonBG),0.5))*_horizonBGIntensity;\n\n    float haloBG=length(uv*vec2(1.,10.)-vec2(0.,-1.));\n    haloBG=(2./pow(dot(haloBG,haloBG),1.2))*_haloBGIntensity;\n\n\n    horizonCol*=horizonBG;\n    haloCol*=haloBG;\n    col*=mask*haloCol;\n    \n\n    \n    fragColor=vec4((col+horizonCol)*circleFade+vec3(0.15),1.0);\n  \n    \n    }\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 _Color=vec3(0.2,0.5,1.);\nvec3 _horizonColor=vec3(0.2,0.5,1.);\nvec3 _haloColor=vec3(0.2,1.,1.);\nfloat _flowSpeed=0.3;\nfloat _flowDensity=2.;\nfloat _flowIntensity=0.5;\n\nfloat _gridSpeed=0.3;\nfloat _gridScale=1.5;\nfloat _gridLineWidth=0.015;\nfloat _gridRingRadius=0.08;\nfloat _gridRingHoleRate=0.8;\nfloat _girdIntensity=0.6;\n\n\nfloat _squareSpeed=0.1;\nfloat _squareScale=1.4;\nfloat _squareIntensity=0.3;\n\nfloat _sparkerForwardSpeed=0.1;\nfloat _sparkerForwardScale=10.;\nfloat _sparkerForwardIntensity=0.5;\n\nfloat _sparkRiseSpeed=0.05;\nfloat _sparkRiseScale=10.;\nfloat _sparkRiseIntensity=0.2;\n\nfloat _BGcircleScale=0.2;\nfloat _haloBGIntensity=4.0;\nfloat _horizontalHight=0.0;\nfloat _horizonBGIntensity=0.3;\n\nfloat remap01(float a,float b,float t)\n{\n    return clamp((t-a)/(b-a),0.,1.);\n}\n\nfloat remap(float a,float b,float c,float d,float t)\n{\n    return remap01(a,b,t)*(d-c)+c;\n}\n\nfloat remapF01(float a,float b,float t)\n{\n    return t*(b-a)+a;\n}\n\nfloat N21(vec2 p)\n{\n    p=fract(p*vec2(233.34,851.73 ));\n    p+=dot(p,p+237.45);\n    return fract(p.x*p.y);\n}\n\nvec2 N22(vec2 p)\n{\n    float n=N21(p);\n    return vec2(n,N21(p+n));\n}\n\n\n\n\n\nvec2 PerspectiveUV(vec2 uv)\n{\n    float z = 1./abs(uv.y);\n    return vec2(uv.x*z,z);\n}\n","name":"Common","description":"","type":"common"}]}