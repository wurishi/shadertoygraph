{"ver":"0.1","info":{"id":"tdlGWl","date":"1547829792","viewed":119,"name":"GLSL SCHOOL WORKS","username":"kiyoshidainagon","description":"20190119","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["shaderglsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265359;\n\nconst float DEVISION_NUM =  7.0;\nconst float REDUCTION_VALUE = 0.4;\n\nconst vec3 BASE_COLOR =vec3(0.1, 0.8, 0.6);\n\nvec2 kaleido(vec2 uv) {\n    float th = atan(uv.y, uv.x);\n    float r = pow(length(uv), 0.5);\n    float f = 2.0 * PI / DEVISION_NUM / 2.0;\n    \n    th = abs(mod(th + f / 4.0, f)  - f / 2.0) / ( 1.0 + r);\n    return vec2(cos(th), sin(th)) * r * REDUCTION_VALUE;\n}\n\nvec2 transform(vec2 at) {\n    vec2 v;\n    float th = 0.2 * iTime;\n    v.x = at.x * cos(th) - at.y * sin(th) - 0.2 * sin(th);\n    v.y = at.x * sin(th) + at.y * cos(th) + 0.2 * cos(th);\n    return v;\n}\n\nvoid rotate(float time, inout vec2 p) {\n    float s = sin(time);\n    float c = cos(time);\n    p *= mat2(c, s, -s, c);\n}\n\nvec3 scene(vec2 at) {\n    return texture(iChannel0, at * 1.0).xyz;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = ( fragCoord.xy * 2.0 - iResolution.xy ) / iResolution.y;\n\n    vec3 color;\n    \n    if(sin(iTime) <= 0.0) {\n        vec2 p = uv;\n    \trotate(iTime, p);\n    \tfloat l;\n\t\tfor(int i = 0; i < 3; i++) {\n\t\t\tl = length(p);\n\t\t\tuv += p  / l * (sin(iTime * 1.0) + 2.0) * sin(l* 9.0 - iTime * 2.0);\n\t\t\tcolor[i] = 0.5 / length(abs(mod(uv,  1.0) - 0.5));\n\t\t}\n    } else {\n        vec2 q = fragCoord/iResolution.xy;\n   \t\tq.x = mix(-1.0, 1.0, q.x);\n    \tq.y = mix(-1.0, 1.0, q.y);\n    \tq.y *= iResolution.y / iResolution.x;\n    \tcolor = scene(transform(kaleido(q)));\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(color * BASE_COLOR,1.0);\n}","name":"Image","description":"","type":"image"}]}