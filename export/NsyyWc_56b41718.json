{"ver":"0.1","info":{"id":"NsyyWc","date":"1655693196","viewed":36,"name":"Lonely Road","username":"Sent","description":"dispersive polar waves","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fourier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 vec2ar(float ar, float x, float y) {return vec2(ar*x, y);}\n\nfloat rect(vec2 st, vec2 bl, vec2 tr) {\n    bl = step(bl,st);       // bottom-left\n\ttr = step(vec2(1.)-tr,1.-st);   // top-right\n\treturn (bl.x * bl.y * tr.x * tr.y);\n}\n\nfloat rect(vec2 st, vec2 bl, vec2 tr, float blur) {\n    if (blur <= 0.) {\n        return rect(st, bl, tr);\n    }\n    \n    float b = blur/2.;\n    bl = smoothstep(bl-b, bl+b,st);       // bottom-left\n\ttr = smoothstep(tr+b, tr-b, st);   // top-right\n\treturn (bl.x * bl.y * tr.x * tr.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = fragCoord/iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n\n    st.x *= aspect;\n    st *= .2;\n    \n    // Use polar coordinates instead of cartesian\n    vec2 toCenter = vec2ar(aspect, 0.075, .18)-st;\n    float phi = atan(toCenter.y,toCenter.x);\n    float r = length(toCenter)*2.;\n    float PI = 3.14159265;\n\n    // waves\n    vec3 color = vec3(0.);\n    const int max_iter = 5;\n    for(int i = 1; i <= max_iter; i++)\n    {\n        float c = .005*float(i);\n        float k = 17.*float(i);\n        float w = c*k;\n    \tcolor += vec3(sin(k*(phi+r)-w*iTime));\n    }\n    color = abs(color)/float(max_iter); \n    \n    // aperture\n    color *= clamp(0., 1., pow(r, .5));\n        \n    // radial\n    color *= rect(vec2(r+phi, phi), vec2(2., 0.), vec2(3., 4.*PI), .1);\n\n    color = mix(vec3(255, 208, 0)/255., vec3(255, 17, 0)/255., color.x)*color.x;\n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}