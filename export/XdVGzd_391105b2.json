{"ver":"0.1","info":{"id":"XdVGzd","date":"1455920269","viewed":600,"name":"Water Effect 2D Lite","username":"Draedrus","description":"A simple 2D water cartoon like effect. Really lite.\n\nI've added a new way to draw bubbles without using 3D spheres which is costly. This looks more like cartoon too !","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","cartoon","water","lite"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**********************************\n * @author pierre.plans@gmail.com *\n * Water Effect 2D Lite           *\n **********************************/\n\n//#define HIGHQUALITY_BUBBLES\n\n#define AMPLITUDE 0.06\n#define SPEED 0.09\n#define FREQUENCY 16.0\n#define WATER_HEIGHT -0.45\n\n#define BUBBLES_NUMBER 60\n#define ANIMATION_DURATION_S 12.0\n\n#define WATER_EDGE vec4(1.0, 1.0, 1.0, 1.0)\n#define WATER_TOP vec4(0.5, 0.5, 0.9, 1.0)\n#define WATER_BOTTOM vec4(0.0, 0.0, 0.1, 1.0)\n\n#define HIGHQUALITY_BUBBLES\n\n\nfloat IntersectSphere(vec3 ro, vec3 rd, vec3 center, float radius) {\n    vec3 Z = ro-center;\n    float A = 1.0;\n    float B = 2.0 * dot(rd, Z);\n    float C = Z.x*Z.x+Z.y*Z.y+Z.z*Z.z-radius*radius;\n    float D = B*B - 4.0*C;\n    float t = -1.0;\n    float d = -1.0;\n    if(D>=0.0) {\n        if(C>0.0) {\n            d = (-B-sqrt(D))/2.0;\n        }else{\n            d = (-B+sqrt(D))/2.0;\n        }\n    }\n    return d;\n}\n\nfloat hash(vec2 uv) {\n\tfloat h = dot(uv, vec2(323.13, 69.34));\n    return fract(sin(h)*59695.1357142317);\n}\n\nfloat noise(vec2 uv) {\n    vec2 f = fract(uv);\n    vec2 _ = floor(uv);\n    return mix(hash(_), mix(hash(_+vec2(0.1, 0.0)), hash(_+vec2(0.5, 0.1)), f.x), f.y);\n}\n\nfloat bubble(vec3 ro, vec3 rd, vec3 center, float radius, inout vec4 color) {\n    float t = IntersectSphere(ro, rd, center, radius);\n\tvec4 iColor = color;\n    if(t>0.0) {\n        vec3 n = normalize((ro+rd*t)-center);\n        float f = 0.5+pow(dot(rd, n), 1.5);\n        color = mix(color, WATER_EDGE, max(0.0, 1.0-f));\n        //color = mix(color, WATER_EDGE*(1.0-pow(max(0.0, dot(n, -rd)), 0.6)), 0.2);\n        //color = mix(color, vec4(1.0, 0.8, 0.0, 1.0), max(0.0, dot(n, -vec3(0.0, 0.0, 1.0))));\n        //color += vec4(0.0, 1.0, 0.0, 0.0)*max(0.0, dot(normalize(vec3(-1.0, 0.5, 0.0)), n));\n    }\n    return t;\n}\n\nfloat bubble_lite(vec2 pixel, vec2 center, float radius, float borderWidth, out vec4 color) {\n    \n    float t = length(pixel-center);\n\n    if(t>(radius-borderWidth) && t<(radius+borderWidth)) {\n        color = mix(color, WATER_EDGE, (t-radius+borderWidth)/(radius+borderWidth));\n    }\n    return t;\n}\n\nvec4 waterize(vec2 uv, float amp, float time, float freq) {\n    vec4 color = vec4(0, 0, 0, 1);\n    vec4 bgColor = texture(iChannel0, uv);\n    vec2 uvwave = uv;\n    uvwave.y += sin((uvwave.x + time)*freq)*amp - WATER_HEIGHT;\n\t//vec2 muv = iMouse.xy / iResolution.xy;\n    float alpha = 0.0;\n    if(uvwave.y > 1.0/* ||length(muv-uv)<0.3*/) {\n        color = texture(iChannel0, uv); \n    }else if(uvwave.y>(0.99-alpha)/* ||length(muv-uv)<0.31*/) {\n        color = mix(WATER_EDGE, bgColor, 0.3);\n    }else{\n        color = mix(WATER_TOP, WATER_BOTTOM, pow(1.0-(uvwave.y-0.01-alpha), 0.5));\n        uvwave.x = max(0.0, mix(uvwave.x, uvwave.y, uv.y));\n        color = mix(\n            color,\n            texture(iChannel0, vec2(uvwave.x, uv.y)),\n            0.05\n        );\n        vec2 pixel = (-1.0 + 2.0*uv.xy);\n\n        float T = mod(iTime, ANIMATION_DURATION_S);\n\n        #ifdef HIGHQUALITY_BUBBLES\n        vec3 ro = vec3(0.5, 0.5, 0.0);\n        vec3 rd = normalize(vec3(pixel.x, pixel.y, 1.0));\n        #endif\n\n        for(int i=0;i<BUBBLES_NUMBER;++i) {\n            float ID = noise(vec2(i, i));\n            #ifdef HIGHQUALITY_BUBBLES\n            bubble(ro, rd,\n                   vec3(\n                       -5.0+noise(vec2(float(i), 0.0))*10.0+(ID>0.5?cos(T+ID):sin(T+ID))/4.0,\n                       -5.0-float(i)/10.0-2.0*noise(uv)+T,\n                       5.0),\n                   0.3*(0.5+ID)/(1.0+T),\n                   color\n                  );\n            #else\n            bubble_lite(uv,\n                   vec2(\n                       -0.0+noise(vec2(float(i), 0.0))*2.0+(ID>0.5?cos(T+ID):sin(T+ID))/40.0,\n                       -0.0-float(i)/20.0-2.0*noise(uv)+T*0.4),\n                       0.05*(0.5+ID)/(1.0+T),\n                       0.01*(0.5+ID)/(1.0+T),\n                       color);\n            #endif\n        }\n    }\n\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ti = iTime+9990.0;\n    // this little fix prevents time duration anomalies.\n    float T = mix(mod(ti, 10000.0), 0.0, mod(ti, 10000.0)/10000.0);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = waterize(uv, AMPLITUDE+cos(T)/100.0, T*SPEED, FREQUENCY);\n}","name":"Image","description":"","type":"image"}]}