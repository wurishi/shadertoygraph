{"ver":"0.1","info":{"id":"4cdyR7","date":"1730994161","viewed":200,"name":"Beehive 1 - lmhurley","username":"wormtilda","description":"Beehive","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["beehive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cosine based palette, 4 vec3 params\n//from https://iquilezles.org/articles/palettes/\n//and http://dev.thi.ng/gradients/\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d )\n{\n    return a + b*cos( 6.283185*(c*t+d) );\n}\n\nvec3 hex_palette(float t) {\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(1.0,1.0,1.0);\n    vec3 d = vec3(0.0,0.10,0.20);\n    vec3 col = palette(t, a, b, c, d);\n    return col;\n}\n\nfloat inBeehive(float u, float v, float sqh, float borderWidth) {\n   bool up = abs(v - 0.5) <= ((1.0 - (sqh+borderWidth/2.0)))*(0.5 - abs(u - 0.5)) + (sqh+borderWidth/2.0)/2.0;\n   bool lo = abs(v - 0.5) <= ((1.0 - (sqh+borderWidth/2.0)))*(0.5 - abs(u - 0.5)) + (sqh-borderWidth/2.0)/2.0;\n   float t = (abs(v - 0.5) - ((1.0-sqh)*(0.5 - abs(u - 0.5)) + sqh/2.0 - borderWidth/2.0));\n   t = clamp(t/(borderWidth/2.0), 0.0, 1.0);\n   bool h = ((borderWidth/2.0 <= u) && (u <= 1.0-(borderWidth/2.0)));\n   float b = max(min((u/(borderWidth/2.0)), 1.0f)*min(float((1.0-u)/(borderWidth/2.0)), 1.0), 0.0);\n   //not on border\n   return max(t, (1.0-b));\n}\n\n\nfloat dist(float x1, float y1, float x2, float y2) {\n    return sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1));\n}\n\nfloat remap(float x, float i_s, float i_e, float o_s, float o_e) {\n    return o_s + ((x - i_s)/(i_e - i_s))*(o_e-o_s);\n}\n\nvec3 remap(vec3 x, float i_s, float i_e, float o_s, float o_e) {\n    return o_s + ((x - i_s)/(i_e - i_s))*(o_e-o_s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float len = min(iResolution.x, iResolution.y);\n    float ud = fragCoord.x/len;\n    float u = ((uv.x - 0.5)*2.0);//*(iResolution.x/len);\n    float v = fragCoord.y/min(iResolution.x, iResolution.y);\n    v = (v - 0.5);\n    \n    float scale = 20.0;\n    float sqh = 0.6;\n    \n    float warp = 0.0f;//0.3*cos(iTime*0.3)*((sin(iTime*10.0)+1.0)/2.0);\n    \n    float off = sin(3.141592*(uv.x + 1.0)) + 1.0;\n    //v += 0.5*off*off*sin(3.141592*(uv.y - 0.5));\n    v = min(v/(1.0 - warp*off*0.5), 1000.0);\n    u = min(u/(1.0 - warp*off*0.7), 1000.0);\n    //fragColor = vec4(u);\n    //return ;\n    \n    u *= scale;\n    v *= scale;\n   \n   \n    \n    float u_tot = u;\n    float v_tot = v;\n    \n    float borderWidth = 0.1;\n    u = fract(u + 1.0f);\n    v = mod(v, 1.0 + sqh);\n    \n    float u2 = u + 0.5;\n    float v2 = v_tot - (sqh + ((1.0-sqh)/2.0));//, 1.0 + sqh + borderWidth);\n    \n    float u2_tot = u_tot + 0.5;\n    float v2_tot = v2;\n    \n    u2 = fract(u2);\n    v2 = mod(v2, 1.0 + sqh);\n    \n    // Time varying pixel color\n    vec3 border_dist = vec3(inBeehive(u, v, sqh, borderWidth)*inBeehive(u2, v2, sqh, borderWidth));\n    float uv_hex_dist = inBeehive(u, v, sqh, 1.0);\n    float uv2_hex_dist = inBeehive(u2, v2, sqh, 1.0);\n    vec3 hex_dist = vec3(1.0 - clamp((uv_hex_dist*uv2_hex_dist)/(1.0-borderWidth/2.0), 0.0, 1.0));\n    vec3 circle_dist = 1.0 - vec3(min(dist(u, v, 0.5, 0.5)*0.5, dist(u2, v2, 0.5, 0.5)*0.5));\n    hex_dist = (hex_dist+circle_dist)/2.0;\n    hex_dist = remap(hex_dist, 0.1, 1.0, 0.2, 1.5);\n    hex_dist = hex_dist*(float(border_dist.x <= 0.0));\n    border_dist = remap(border_dist, 0.0, 1.0, 0.2, 1.0);\n    \n    float sects = 13.0;\n    u_tot += floor(sects/2.0);\n    v_tot += floor(sects/2.0);\n    u2_tot += floor(sects/2.0);\n    v2_tot += floor(sects/2.0);\n    \n    float u_idx = round(u_tot - 0.5);\n    float v_idx = round((v_tot-0.5)/(1.0+sqh));\n    float u2_idx = round(u2_tot - 0.5);\n    float v2_idx = round((v2_tot-0.5)/(1.0+sqh));\n    \n    //vec3 uv_col = 1.3*vec3(u_idx/10.0, v_idx/10.0, 1.0);\n    //vec3 uv2_col = 1.3*vec3(u2_idx/10.0, v2_idx/10.0, 0.0);\n    \n    \n    \n    float uv_mask = float(uv_hex_dist < 1.0);\n    float uv2_mask = float(uv2_hex_dist < 1.0);\n    \n    float t = 0.3*iTime;\n    \n    float uv_idx =  (dist(u_idx/sects, v_idx/sects, 2.*cos(2.*t), 2.*sin(2.*t))*0.5) + t ;\n    float uv2_idx = (dist(u2_idx/sects, v2_idx/sects, 2.*cos(2.*t+0.2), 2.*sin(2.*t+0.2))*0.5) + t;\n   \n    vec3 uv_color = hex_palette(fract(uv_idx));\n    vec3 uv2_color = hex_palette(fract(uv2_idx));\n    \n    vec3 hex_col = (uv_mask*uv_color + uv2_mask*uv2_color)*max(hex_dist.x, 0.0);\n    hex_col = clamp(hex_col, vec3(0.0), vec3(1.0));\n    \n    vec3 border_col = vec3(0.8, 0.3, 0.0)*remap(border_dist, 0.0, 0.9, 0.0, 0.7);\n    vec3 col = /*vec3(0.4, 0.4, 0.6)*/(hex_col + float(border_dist.x>0.0)*border_col);\n    \n    //col = vec3(uu, v, 1.0);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}