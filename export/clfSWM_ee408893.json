{"ver":"0.1","info":{"id":"clfSWM","date":"1674814850","viewed":210,"name":"Ray Marching - Basics","username":"bbateni","description":"This is a basic shader for understanding how ray marching works. try uncommenting\n- line 54 to add a plane\n- line 50 to add a moving box\n- lines 51 to 53 one at a time\n- lines 44 and 45 one at a time for other shapes\n- lines 90 to 91 for shadows","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","simple","distancefunction","basics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This shader is a modified version of a tutorial on YouTube\n// https://youtu.be/PGtv-dBi2wE\n\n#define MAX_STEPS 100\n#define MAX_DIST 1000.\n#define SURF_DIST .01\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat SmoothMin(float a, float b, float k) {\n    float h = max(k - abs(a - b), 0.) / k;\n    return min(a, b) - h*h*h*k*(1./6.);\n}\n\nfloat SphereDist(vec4 sphere, vec3 p) {\n    return length(p-sphere.xyz)-sphere.w;\n}\nfloat BoxDist(vec3 boxSize, vec3 boxOrigin, vec3 p) {\n\treturn length(max(abs(p-boxOrigin)-boxSize, 0.));\n}\nfloat WavedSphereDist(vec4 sphere, vec3 p)\n{\n    float displacement = sin(5.0 * p.x) * sin(5.0 * p.y) * sin(5.0 * p.z) * 0.25;\n    return SphereDist(sphere, p) + displacement;\n}\nfloat TorusDist(vec3 origin, vec3 p, vec2 r) {\n    p -= origin;\n    p.yz *= Rot(.1);\n\tfloat x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat GetDist(vec3 p) {\n\tvec4 sphere = vec4(-.5, 1, 5.75, 1);\n    vec3 boxSize = vec3(0.75,.75,1);\n    vec3 boxOrigin = vec3(-2.5, .5, 6);\n    boxOrigin += vec3((sin(iTime*0.7)+1.)*2.-1., 0, 0);\n    \n    float sphereDist =  SphereDist(sphere, p);\n    //sphereDist =  WavedSphereDist(sphere, p);\n    //sphereDist =  TorusDist(sphere.xyz, p, vec2(1., .2));\n    //float boxDist = BoxDist(boxSize, boxOrigin, p);\n    //float planeDist = p.y+2.;\n    \n    float d = sphereDist;\n    //d = min(boxDist, sphereDist);\n    //d = max(boxDist, sphereDist);\n    //d = max(boxDist, -sphereDist);\n    //d = SmoothMin(boxDist, sphereDist, 1.);\n    //d = min(d, planeDist);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 3, 1);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    // shadow\n    //float d = RayMarch(p+n*SURF_DIST*2., l);\n    //if(d<length(lightPos-p)) dif *= .5;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 2, 0);\n    vec3 rd = normalize(vec3(uv.x-.15, uv.y-.2, 1));\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \n    \tfloat dif = GetLight(p);\n    \tcol = vec3(dif);\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}