{"ver":"0.1","info":{"id":"dslGRf","date":"1666596060","viewed":128,"name":"InteractiveRipple","username":"Mario8664","description":"Click to make ripple.\nSpan pixels + Blur to make height, and make normals.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["water","ripple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DISORTION 0.2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 offset = vec3(1.0 / iResolution.xy, 0.0);\n    \n    float h00 = texture(iChannel0, uv).r;\n    float h01 = texture(iChannel0, uv + offset.zy).r;\n    float h10 = texture(iChannel0, uv + offset.xz).r;\n    \n    //height\n    //fragColor = vec4(h00, h00, h00, 1);\n    \n    vec3 normal = normalize(vec3(h10 - h00, h01 - h00, 1.0));\n   \n    //disortion\n    uv = fragCoord/iResolution.y;\n    vec3 background = texture(iChannel1, uv + normal.xy * DISORTION).rgb;\n    //light\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 0.0));\n    float light = dot(normal, lightdir);\n    \n    \n    // Output to screen\n    fragColor = vec4(background.rgb + light, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define RADIUS 0.01\n#define RAIN_RADIUS 0.005\n#define RAIN_STR 0.6\n\nint xorshift(in int value) {\n    // Xorshift*32\n    // Based on George Marsaglia's work: http://www.jstatsoft.org/v08/i14/paper\n    value ^= value << 13;\n    value ^= value >> 17;\n    value ^= value << 5;\n    return value;\n}\n\nfloat nextFloat(inout int seed) {\n    seed = xorshift(seed);\n    // FIXME: This should have been a seed mapped from MIN..MAX to 0..1 instead\n    return abs(fract(float(seed) / 3141.592653));\n}\n\nvec2 rain()\n{\n    int seed = int(iTime * 10.0);\n    float x = nextFloat(seed);\n    float y = nextFloat(seed);\n    return vec2(x, y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 mousePos = iMouse.xy / iResolution.y;\n    vec2 col = vec2(0.0, 0.0);\n    \n    //rain\n    vec2 rainPos = rain();\n    rainPos.x *= iResolution.x / iResolution.y;\n    \n    if(iTime < 0.5)\n        col = vec2(0.0, 0.0);\n    else if(iMouse.z > 0.5 && distance(uv, mousePos) < RADIUS){\n        col.r = distance(uv, mousePos) / RADIUS;\n        col.r = sqrt(1.0 - col.r * col.r);\n    }\n    else if(distance(uv, rainPos) < RAIN_RADIUS)\n    {\n        col.r = RAIN_STR;\n    }\n        \n    uv = fragCoord/iResolution.xy;\n    //Last frame\n    col.g = texture(iChannel0, uv).r;\n    //This frame\n    //col.r = max(texture(iChannel1, uv).r, col.r);\n    col.r += texture(iChannel1, uv).r;\n    //col.r = clamp(col.r, 0.0, 1.0);\n        \n    fragColor = vec4(col.rg, 0.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define ATTEN_SPD 0.99\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float preCenter = texture(iChannel0, uv).g;\n    \n    vec3 offset = vec3(1.0 / iResolution.xy, 0.0);\n    \n    float curUp = texture(iChannel0, uv + offset.zy).r;\n    float curDown = texture(iChannel0, uv - offset.zy).r;\n    float curLeft = texture(iChannel0, uv - offset.xz).r;\n    float curRight = texture(iChannel0, uv + offset.xz).r;\n    \n    float height = (curUp + curDown + curLeft + curRight) / 2.0 - preCenter;\n    height *= ATTEN_SPD;\n    \n    // Output to screen\n    fragColor = vec4(height, 0.0, 0.0,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//blur\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 offset = vec3(1.0 / iResolution.xy, 0.0);\n    \n    float c00 = texture(iChannel0, uv).r;\n    float c01 = texture(iChannel0, uv + offset.zy).r;\n    float c10 = texture(iChannel0, uv + offset.xz).r;\n    float c11 = texture(iChannel0, uv + offset.xy).r;\n    \n    fragColor = vec4((c00 + c01 + c10 + c11) * 0.25, 0.0, 0.0, 1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}