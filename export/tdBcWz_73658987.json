{"ver":"0.1","info":{"id":"tdBcWz","date":"1586444416","viewed":147,"name":"RaymarchIsosurface","username":"Raxmo","description":"Raymarch rendering of an isosurface. Not entirely sure why I can't get shadows to work, nor why I can't even identify where the light actually is, or change the color of the light, or surfaces at all. But as a proof of concept, it works.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAXDIST 100.\n#define SURFDIST 0.001\n#define STEPS 100\n\nvec3 col = vec3(1.);\n\n\nfloat lerp(float a, float b, float t)\n{\n    return ((1. - t) * a) + (t * b);\n}\n\nfloat tlerp(vec4 a, vec4 n, vec3 p)\n{\n    float x1 = lerp(a.x, a.y, p.x);\n    float x2 = lerp(a.z, a.w, p.x);\n    float x3 = lerp(n.x, n.y, p.x);\n    float x4 = lerp(n.z, n.w, p.x);\n    \n    float y1 = lerp(x1, x2, p.y);\n    float y2 = lerp(x3, x4, p.y);\n    \n    return lerp(y1, y2, p.z);\n}\n\nfloat blerp(vec4 s, vec2 p)\n{\n    vec2 q = 1. - p;\n    \n    float v =\n        s.x * q.x * q.y +\n        s.y * p.x * q.y +\n        s.z * q.x * p.y +\n        s.w * p.x * p.y;\n    \n    return v;\n}\n\nfloat derp1 (float a, float b, float t)\n{\n    return lerp(a, b, t) / (a - b);\n}\n\nfloat derp3 (vec4 a, vec4 b, vec3 t)\n{\n    vec3 d;\n    \n    d.z = derp1(blerp(a, t.xy), blerp(b, t.xy), t.z);\n    d.y = derp1(blerp(vec4(a.xy, b.xy), t.xz), blerp(vec4(a.zw, b.zw), t.xz), t.y);\n    d.x = derp1(blerp(vec4(a.xz, b.xz), t.yz), blerp(vec4(a.yw, b.yw), t.yz), t.x);\n    \n    return 1./length(1./d);\n}\n    \nfloat vlerp(vec4 a, vec4 b, vec3 p)\n{\n    // causses tearing in the depth field\n    //p = p * p * (3. - 2. * p);\n    vec3 q = 1. - p; //create a conjugate of the point\n    \n    \n    // yes... this mess is a perfectly valid 3D interpolation.\n    return a.x * p.x * p.y * p.z\n         + a.y * q.x * p.y * p.z\n         + a.z * p.x * q.y * p.z\n         + a.w * q.x * q.y * p.z\n         + b.x * p.x * p.y * q.z\n         + b.y * q.x * p.y * q.z\n         + b.z * p.x * q.y * q.z\n         + b.w * q.x * q.y * q.z;\n}\n\nfloat getdist(vec3 p)\n{\n    vec4 sphere = vec4(0., 1., 6., 1.);\n    \n    \n    \n    float sd = length(p - sphere.xyz) - sphere.w;\n    float pd = p.y + 1.5;\n    \n    //return min(sd, pd);\n    vec4 iso = vec4(0., -0.49, 6., 1.);\n    \n    float time = iTime / 5.;\n    \n    \n    vec4 isovala = vec4(sin(time * 1.1), cos(time * 1.2), -1., -1.);\n    vec4 isovalb = vec4( cos(time * 1.3), sin(time * 1.4),-1., -1.);\n    \n    float isod = 0.;\n    \n    if(any(greaterThanEqual(abs(p - iso.xyz), iso.www)))\n    {\n        isod = length(max(abs(p - iso.xyz) - iso.www, 0.)) + SURFDIST * 1.5;\n        col = vec3(1.);\n    }\n    else\n    {\n        vec3 np = (p - iso.xyz) / (2.0 * iso.w) + 0.5;\n        \n        float bdist = max(-np.x, np.x - 1.);\n        bdist = max(bdist, -np.y);\n        bdist = max(bdist, np.y - 1.);\n        bdist = max(bdist, -np.z);\n        bdist = max(bdist, np.z - 1.);\n        \n        isod = derp3(isovala, isovalb, fract(np));\n        \n        isod = max(isod, bdist);\n        \n        //bit of a hack-job, but this is effectively 3D uv coordinates. so, I suppose they would be uvt coordinates?\n        \n            vec3 uvt = (p - iso.xyz)/(2.0 * iso.w) + 0.5;\n            float res = 64. * 64.;\n            float r3 = pow(res, 1./3.);\n            float r2 = 512.;\n            float r6 = pow(r3, 0.5);\n            \n            //uvt.xyz = uvt.xzy;\n            \n            uvt.xz = uvt.xz / r6;\n            uvt.y = floor(uvt.y * r3);\n            vec2 uvo = vec2(0.);\n            uvo.x = mod(uvt.y, r6) / r6;\n            uvo.y = floor(uvt.y / r6) / r6;\n            \n            \n            vec2 uv = uvt.xz + uvo;\n            \n            //col = uvt;\n            col = texture(iChannel0, uv).xyz;\n            col.y = 1.- col.x;\n            col.z = 0.5;\n    }\n    \n    //return min(sd, pd);\n    \n    //return isod;\n    \n    \n   // if(isod < pd){col.gb *=0.;}\n    return min(isod, pd);\n    //return min(sd, pd);\n}\n\nvec3 getnorm(vec3 p)\n{\n    vec2 e = vec2(0.00001, 0.);\n    float d = (getdist(p));\n    \n    vec3 norm = d - vec3(\n        getdist(p - e.xyy),\n        getdist(p - e.yxy),\n        getdist(p - e.yyx)\n    );\n    \n    \n    \n    return normalize(- norm);\n}\n\nfloat march(vec3 ro, vec3 rd)\n{\n    float d = 0.;\n    float df = MAXDIST;\n    vec3 p = ro + rd * d;\n    \n    for(int i = 0; i < STEPS && d < MAXDIST && df > SURFDIST; i++)\n    {\n        df = getdist(p);\n        d += df;\n        p = ro + rd * d;\n    }\n    \n    return d;\n}\n//vec3 light = vec3(0.);\n    \nfloat lighting(vec3 p)\n{\n    vec3 light = 2. * vec3(cos(iTime), 0., sin(iTime)) + vec3(0., 1.5, 4.);\n    \n    vec3 ldir = normalize(p - light);\n    \n    \n    float dif = clamp(dot(getnorm(p), ldir), 0., 1.);\n    \n    //if(march(p + getnorm(p) * SURFDIST * 2., ldir) < length(light - p)) dif *= 0.1;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0., 1., 0.);\n    vec3 rd = normalize(vec3(uv, 1.));\n    \n    float d = march(ro, rd);\n    //float d = mod(iTime / 3., 10.);\n    vec3 p = ro + rd * d;\n    \n    vec3 norm = getnorm(p);\n    \n    float lightf = lighting(p);\n    \n    //col = vec3(texture(iChannel0,uv).x);\n    \n    col *= clamp(lighting(p), 0.2, 1.0);\n    \n    //col = vec3(d) / 10.;\n    \n    //col = (norm + 1.) / 2.;\n    \n    //col = p / 20.;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}