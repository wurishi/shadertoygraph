{"ver":"0.1","info":{"id":"lcs3Rs","date":"1703399215","viewed":42,"name":"Toxin","username":"foxinabox","description":"oscillating fractal and music\n\nyou have to rewind [|<] it for audio to play, probably an issue with the site itself but idk","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["fractal","music","practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette (float t)\n{\n    vec3 a = vec3(1.0, 1.0, 1.0);\n    vec3 b = vec3(1.0, 0.0, 1.0);\n    vec3 c = vec3(1.0, 0.0, 1.0);\n    vec3 d = vec3(1.0, 0.0, 1.0);\n    \n    return a + b*cos(6.28318*(c*t+d));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(1.0,1.0,1.0);\n\n    // Output to screen\n    vec3 baseColor = vec3(col);\n    vec2 uv0 = uv;\n    \n    vec3 finalColor = vec3(0.0);\n    \n    for(float i = 0.0; i < 4.0; i++)\n    {    \n        uv = fract((uv  * (sin(iTime * 0.1))) +iTime*0.5 * 1.5) -0.5;\n\n        float d = length(uv) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i * 0.4 + iTime * 0.4);\n\n        d = sin(d * (-0.1 +iTime)) * 0.2;\n        float circle = length(uv);\n        float radius = 0.3;\n        \n        finalColor += col * d;\n    }\n    \n    fragColor = vec4((baseColor / finalColor)*-0.8-5.0, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define TWOPI 6.2831\n\nfloat FM(float fc, float fm, float iom, float t)\n{\n    return sin(TWOPI*fc*t + iom*sin(TWOPI*fm*t));\n}\n\nvec2 fmPluck (float f, float t)\n{\n    float fc = f; //carrier\n    float fm = f*3.; //modulation\n    float iom = 1.; //index of m.\n    \n    float env = exp(-2.0*t) * 0.1;\n    vec2 sig = vec2(0.0);\n    \n    sig.x += FM(f+1.,f+1.,1.,t) * env;\n    sig.y += FM(f-1.,f-1.,1.,t) * env;\n    sig += FM(f,f,15.,t) * exp(-20.0*t) * 0.03;;\n    \n    return sig;\n}\n\nvec2 pan (float pos)\n{\n    vec2 e = vec2(1.-pos,1.+pos);\n    return normalize(e);\n}\n\nfloat interval(float semitones)\n{\n    return pow(2., semitones/12.);\n}\n\nconst float notes [] = \nfloat[16]\n(12.0,\n0.0,\n6.0,\n0.0,\n9.0,\n0.0,\n6.0,\n0.0,\n12.0,\n0.0,\n6.0,\n0.0,\n10.0,\n0.0,\n6.0,\n0.0);\nvec2 jingle(float t)\n{\n    vec2 sig = vec2(0.0);\n    for(int i = 0; i < 6; i++)\n    {\n        float nn = notes[i];\n        float f1 = 440.*interval(nn);\n        float t0i = 0.25*float(i);\n        float ti = mod(t-t0i, 2.);\n        float pos = float((i+1)%3) + 1.;\n        \n        sig += fmPluck(f1,ti) * pan(pos);\n    }\n    return sig;\n}\n\n\n\nfloat sqrPluck (float f, float t)\n{\n    return sign(sin(TWOPI*f*t))*exp(-6.0*t) * 0.1;\n}\n\nfloat sawPluck (float f, float t)\n{\n    return (mod(t*f,1.0)*2.0-1.0)*exp(-3.0*t) * 0.1;\n}\n\nfloat sinPluck (float f, float t)\n{\n    return sin(TWOPI*f*t)*exp(-3.0*t) * 0.1+sin(TWOPI*f*20.*t)*exp(-20.0*t) * 0.05;\n}\n\nvec2 mainSound( int samp, float t )\n{\n    vec2 sig = vec2(0.0); \n    if(t > 2.0)sig += sqrPluck(80.,mod(t, 0.5)) * 0.8;\n    if(t > 4.0)sig += sqrPluck(140.,mod(t, 0.5)) * 0.8;\n    sig += sinPluck(90.,mod(t, 0.25)) * 1.0;\n    if(t > 8.0)sig += sawPluck(440.,mod(t, 2.0)) * 0.5;\n    if(t > 16.0)sig += sawPluck(480.,mod(t, 2.5)) * 0.5;\n    if(t > 32.0)sig += jingle(t) - (sin(t*5.0));\n    \n    return sig;\n}","name":"Sound","description":"","type":"sound"}]}