{"ver":"0.1","info":{"id":"fdVyDh","date":"1654848924","viewed":142,"name":"Caustic + blur","username":"Famousghost","description":"Simple algorithm to create Voronoi diagram and gaussian blur effect","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["gaussianblurcausticvoronoidiagram"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 random(in vec2 uv, in float offset)\n{\n    mat2 randomValues = mat2(vec2(19.32423f, 32.234234f), vec2(88.34234f, 99.342343f));\n    \n    vec2 val = fract(sin(randomValues * uv) * 43423.2342f);\n    \n    \n    return vec2(sin(val.y * offset) * 0.5f + 0.5f, cos(val.x * offset) * 0.5f + 0.5f);\n}\n\nvec3 voronoi(in vec2 uv, in float angleOffset, in float density, in float t)\n{\n    vec2 iuv = floor(uv * density);\n    vec2 fuv = fract(uv * density);\n    \n    vec3 result = vec3(t, 0.0f, 0.0f);\n    \n    \n    for(int y = -1; y <= 1; ++y)\n    {\n        for(int x = -1; x <= 1; ++x)\n        {\n            vec2 lattice = vec2(x, y);\n            vec2 offset = random(iuv + lattice, angleOffset);\n            float dist = distance(lattice + offset, fuv);\n            if(dist < result.x)\n            {\n                result = vec3(dist, offset.x, offset.y);\n            }\n            \n        }\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = (texture(iChannel0, uv).rgb + texture(iChannel1, uv).rrr) * 0.5f;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define factor 5.0\n#define value 2\n\nvec2 random(in vec2 uv, in float offset)\n{\n    mat2 randomValues = mat2(vec2(19.32423f, 32.234234f), vec2(88.34234f, 99.342343f));\n    \n    vec2 val = fract(sin(randomValues * uv) * 43423.2342f);\n    \n    \n    return vec2(sin(val.y * offset) * 0.5f + 0.5f, cos(val.x * offset) * 0.5f + 0.5f);\n}\n\nfloat voronoi(in vec2 uv, in float angleOffset, in float density, in float t)\n{\n    vec2 iuv = floor(uv * density);\n    vec2 fuv = fract(uv * density);\n    \n    float result = t;\n    \n    \n    for(int y = -1; y <= 1; ++y)\n    {\n        for(int x = -1; x <= 1; ++x)\n        {\n            vec2 lattice = vec2(x, y);\n            vec2 modIp = vec2(mod(iuv.x + lattice.x, density), mod(iuv.y + lattice.y, density));\n\n\n            vec2 offset = random(modIp, angleOffset);\n            float dist = distance(lattice + offset, fuv);\n            if(dist < result)\n            {\n                result = dist;\n            }\n            \n        }\n    }\n    return result;\n}\n\nfloat gaussianBlur(in vec2 fragCoord, in float time, in float density, in float t)\n{\n    float result = voronoi(fragCoord / iResolution.xy, time, density, t);\n    int counter = 0;\n    for(int i = -value; i <= value; ++i)\n    {\n        for(int j = -value; j <= value; ++j)\n        {\n            result += voronoi((fragCoord + vec2(float(i), float(j)) * factor) / iResolution.xy, time, density, t);\n            counter++;\n        }\n    }\n    return result / float(counter);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Time varying pixel color\n    vec3 col = vec3(pow(gaussianBlur(fragCoord + iTime * 30.0f + 1000.0f, iTime + 1000.0f, 8.0f, 0.9f), 4.0f));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}