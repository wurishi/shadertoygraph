{"ver":"0.1","info":{"id":"DlyGWy","date":"1684580363","viewed":65,"name":"Phase Flow","username":"JulietMike","description":"Use the ENTER key to reset to the start.","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["math","differentialequations"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float x = texture(iChannel0, uv).x;\n    float y = texture(iChannel0, uv).y;\n    float a = 6.0; // Spatial frequency\n    float sx = sin(a*x);\n    float sy = sin(a*y);\n    \n    // Grid pattern\n    fragColor = vec4(sign(sx),sign(sy),sign(sx)*sign(sy),1.0) * sx*sx*sy*sy;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 get_derivative(vec2 state)\n{\n    float x = state.x;\n    float y = state.y;\n\n    // Van der Pol Oscillator\n    //return 0.1 * vec2(-y + 1.3 * (1.0 - y * y) * x, x);\n\n    // Spirals\n    return vec2(sin(y), sin(x));\n    \n    // Pendulum\n    //return vec2(y, sin(x));\n\n    // Bouncing ball\n    //return 0.3 * vec2(-(min(5.0*(y+3.0), 1.0)), x);\n}\n\nconst int KEY_ENTER = 13;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame == 0 || texelFetch( iChannel1, ivec2(KEY_ENTER,0), 0 ).x == 1.0) \n    {\n        // Initial state\n        vec2 init = 15.0*(fragCoord - 0.5*iResolution.xy)/iResolution.x;\n        fragColor = vec4(init.x,init.y,0.0,1.0);\n    }\n    else \n    {\n        // Heun's method, backwards in time\n        float dt = iTimeDelta;\n        vec2 x0 = texture(iChannel0, fragCoord/iResolution.xy).xy;\n        vec2 d0 = -get_derivative(x0);\n        vec2 d1 = -get_derivative(x0 + dt * d0);\n        vec2 x1 = x0 + (d0 + d1) * (0.5 * dt);\n        fragColor = vec4(x1.x, x1.y, 0.0, 1.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}