{"ver":"0.1","info":{"id":"M3tSWM","date":"1719155288","viewed":72,"name":"2024_06_24","username":"sako","description":"practice","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cf\n// https://wgld.org/d/glsl/g011.html\n// https://wgld.org/d/glsl/g012.html\n// https://wgld.org/d/glsl/g013.html\n//\nconst float sphereSize = 1.0;\n\nconst float PI = 3.13159265;\nconst float angle = 60.0;\nconst float deg2rad = PI / 180.0;\nconst float fov = angle * 0.5 * deg2rad;\n\nconst int marchingLoopCount = 64;\n\nvec3 trans(vec3 p){\n    return mod(p, 4.0) - 2.0;\n}\nfloat sdSphere(vec3 p){\n    return length(p)-sphereSize;\n}\n\nfloat sdBox(vec3 p){\n    return length(max(abs(p) - vec3(0.5, 0.5, 0.5), 0.0));\n}\n\nfloat sdRoundBox(vec3 p){\n    return length(max(abs(p) - vec3(0.5, 0.5, 0.5), 0.0))-0.2;\n}\n\nfloat sdScene(vec3 p){\n    // trans function is dividing space (-2 < p < 2)\n    return sdRoundBox(trans(p));\n}\n\nvec3 getNormal(vec3 p){\n    float d = 0.0001;\n    return normalize(vec3(\n        sdScene(p + vec3(  d, 0.0, 0.0)) - sdScene(p + vec3( -d, 0.0, 0.0)),\n        sdScene(p + vec3(0.0,   d, 0.0)) - sdScene(p + vec3(0.0,  -d, 0.0)),\n        sdScene(p + vec3(0.0, 0.0,   d)) - sdScene(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec3 lightDir = vec3(-0.577, 0.577, 0.577);\n    const float sphereSize = 1.0;\n    // center is (0,0)\n    vec2 p = (fragCoord.xy*2.0 - iResolution.xy);\n    // normalize\n    p /= min(iResolution.x, iResolution.y);\n    \n//\n//     *\n//     *****\n//     *********\n//sinθ *************\n//     *****************    θ(fov)\n//     *********************\n//            cosθ\n///////////////////////////////////\n    vec3 ray = normalize(vec3(sin(fov) * p.x, sin(fov) * p.y, -cos(fov)));\t\n    \n    vec3 cPos = vec3(0.0, 0.0, 2.0);\n\n    \n    float distance = 0.0;\n    float rLen = 0.0;\n    vec3 rPos = cPos;\n    for(int i=0; i<marchingLoopCount; i++){\n        distance = sdScene(rPos);\n        rLen += distance;\n        rPos = cPos + ray * rLen;\n    }\n    \n    \n    if(abs(distance) < 0.001){\n        vec3 normal = getNormal(rPos);\n        float diff = clamp(dot(lightDir, normal), 0.1, 1.0);\n        fragColor = vec4(vec3(diff), 1.0);\n        //fragColor = vec4(vec3(normal), 1.0);\n    }\n    else{\n        fragColor = vec4(vec3(0.0), 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}