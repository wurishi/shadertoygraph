{"ver":"0.1","info":{"id":"NdGXWD","date":"1634619673","viewed":473,"name":"Freeangle Pixelsort","username":"amagitakayosi","description":"Reimplemented pixelsort shader based on FMS_Cat's shader https://www.shadertoy.com/view/XsBfRG","likes":14,"published":1,"flags":32,"usePreview":0,"tags":["pixelsort"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ANGLES 16.0\n#define ANGLE (iMouse.y < 1.0 ? (iTime * 0.4) : iMouse.y / iResolution.y)\n#define ERROR 3.0\n\nvec4 draw(vec2 uv, vec2 fragCoord) {        \n    vec3 col = texture(iChannel1, uv).rgb;                           \n    //return vec4(col.x, col.y, 1, 1);\n    \n    float pixelSize = ERROR / iResolution.x; // allow errors\n    \n    float angle = floor(ANGLE * ANGLES) / ANGLES * 3.142593 * 2.;\n    vec2 dir = vec2(cos(angle), sin(angle)) / iResolution.xy;       \n    \n    vec2 uv2, uv3;\n    for (float i = 0.; i < 999.; i++) {    \n        {\n            uv2 = uv - dir * i;\n            uv3 = texture(iChannel1, uv2).xy; // destination of pixel at uv2\n            if (length(uv - uv3) < pixelSize) {\n                return texture(iChannel0, uv2);\n            }        \n        }\n        {\n            uv2 = uv + dir * i;\n            uv3 = texture(iChannel1, uv2).xy; // destination of pixel at uv2\n            if (length(uv - uv3) < pixelSize) {\n                return texture(iChannel0, uv2);\n            }\n        }\n    }        \n    \n    //return vec4(1, 0, 1, 1);\n    return texture(iChannel0, col.xy);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = draw(fragCoord.xy / iResolution.xy, fragCoord);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define THRESHOLD (iMouse.x < 1.0 ? (sin(iTime * 5.0) * 0.5 + 0.5) : iMouse.x / iResolution.x)\n#define ANGLES 16.0\n#define ANGLE (iMouse.y < 1.0 ? (iTime * 0.4) : iMouse.y / iResolution.y)\n\nfloat grey(vec3 c) {\n    return dot(c, vec3(0.299, 0.587, 0.114));\n}\n\nvec4 draw(vec2 uv, vec2 fragCoord) {\n    vec4 color = texture(iChannel0, uv);\n    \n    float g = grey(color.rgb); \n    if (g < THRESHOLD) {\n        return vec4(uv, 1, 1);\n    }    \n    \n    float angle = floor(ANGLE * ANGLES) / ANGLES * 3.142593 * 2.;\n    \n    float rank = 0.;\n    vec2 headPos;    \n       \n    vec2 dir = vec2(cos(angle), sin(angle)) / iResolution.xy;    \n           \n    // Search thr first pixel under the threshold\n    // to the left (when angle = 0)\n    for (float i = 0.; i < 9999.; i += 1.) {\n        vec2 uv2 = uv - dir * i;\n        \n        if (uv2.x < 0. || uv2.y < 0. || uv2.x >= 1. || uv2.y >= 1.) {\n            headPos = uv2;\n            break;\n        }\n\n        vec3 col = texture(iChannel0, uv2).rgb;       \n        float gi = grey(col);\n        if (gi < THRESHOLD) {\n            headPos = uv2;\n            break;\n        } \n        \n        if (gi <= g) {\n            rank += 1.0;\n        }\n    }\n\n    // Search thr first pixel under the threshold \n    // to the right (when angle = 0)\n    for (float i = 0.; i < 9999.; i += 1.) {\n        vec2 uv2 = uv + dir * i;\n\n        if (uv2.x < 0. || uv2.y < 0. || uv2.x >= 1. || uv2.y >= 1.) {\n            break;\n        }\n\n        vec3 col = texture(iChannel0, uv2).rgb;\n        float gi = grey(col);\n        if (gi <= THRESHOLD) {\n            break;\n        }\n\n        if (gi < g) {\n            rank += 1.0;\n        }\n    }\n\n    // where this pixel should be rendered\n    vec2 dst = headPos + rank * dir;\n    \n    return vec4(dst, 1, 1);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = draw(fragCoord.xy / iResolution.xy, fragCoord);\n}\n","name":"Buffer B","description":"","type":"buffer"}]}