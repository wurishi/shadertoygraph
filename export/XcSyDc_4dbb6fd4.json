{"ver":"0.1","info":{"id":"XcSyDc","date":"1723048802","viewed":35,"name":"Surface of Revolution Edit Ver","username":"litlov3","description":"source shader: https://www.shadertoy.com/view/NlSyzd","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float cylinder(vec3 position, float radius, float halfHeight, float cornerRadius) {\n   vec2 d = vec2(length(position.xz), abs(position.y)) - vec2(radius, halfHeight) + cornerRadius; \n   return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0) - cornerRadius;\n}\n\nfloat map (vec3 p) {\n    vec2 u = vec2(length(p.xz),.5*p.y);\n    u = u*R.y*0.5+0.5*R;\n    float res = A(u).x/R.x-.012;\n    float cl = cylinder(p, .5, .8, 0.2);\n    return min(cl, res);\n}\n\nvec3 norm (vec3 p) {\n    vec3 e = vec3(0.05,0,0);\n    return normalize(vec3(\n        map(p+e.xyz)-map(p-e.xyz),\n        map(p+e.zxy)-map(p-e.zxy),\n        map(p+e.yzx)-map(p-e.yzx)\n    ));\n}\n\n\nvec3 shading(vec3 v, vec3 n){\n    float l = 1. - max(0.,dot(-v, n));\n    return vec3(l * l);\n}\n\nvec3 mainPass(in vec2 U)\n{\n    vec3 d = normalize(vec3(2.*(U-.5*R)/R.y,1));\n    vec3 p = vec3(0,0,-3);\n    //p.yz *= ei(.75*sin(.5*iTime));\n    //d.yz *= ei(.75*sin(.5*iTime));\n    vec4 Q = vec4(0.8);\n    for (float x = 0.; x < 280.; x++) {\n        float l = map(p);\n        p += d*l;\n        if (l < .002) Q.xyz = smoothstep(-.6, 1.8, shading(d, norm(p)));//.5-.5*norm(p);\n    }\n    \n    return Q.xyz;\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 antialias(in vec2 fragCoord)\n{\n    // Set the number of AA passes here\n    // Note that your shader code is called n^2 times, so be careful\n    // Higher values have diminishing returns anyway\n    const float AA_STAGES = 2.0;\n    \n    // These constants don't need changing\n    const float AA_TOTAL_PASSES = AA_STAGES * AA_STAGES + 1.0;\n    const float AA_JITTER = 0.5;\n    \n    // Run the shader multiple times with a random subpixel offset each time and average the results\n    vec3 color = mainPass(fragCoord);\n    for (float x = 0.0; x < AA_STAGES; x++)\n    {\n        for (float y = 0.0; y < AA_STAGES; y++)\n        {\n            vec2 offset = AA_JITTER * (2.0 * hash22(vec2(x, y)) - 1.0);\n            color += mainPass(fragCoord + offset);\n        }\n    }\n    return color / AA_TOTAL_PASSES;\n}\n\n\nMain {\n    vec3 d = normalize(vec3(2.*(U-.5*R)/R.y,1));\n    vec3 p = vec3(0,0,-3);\n    //p.yz *= ei(.75*sin(.5*iTime));\n    //d.yz *= ei(.75*sin(.5*iTime));\n    Q = vec4(0.8);\n    /*\n    for (float x = 0.; x < 180.; x++) {\n        float l = map(p);\n        p += d*l;\n        if (l < .002) Q.xyz = smoothstep(-.6, 1.8, shading(d, norm(p)));//.5-.5*norm(p);\n    }*/\n    Q = vec4(antialias(U), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R iResolution.xy\n#define Main void mainImage(out vec4 Q, in vec2 U)\n#define A(U) texture(iChannel0,(U)/R)\n#define B(U) texture(iChannel1,(U)/R)\n#define C(U) texture(iChannel2,(U)/R)\n#define ei(a) mat2(cos(a),sin(a),-sin(a),cos(a))\nfloat segment (vec2 p, vec2 a, vec2 b) {\n    return length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"Main {\n    Q = A(U);\n    if (iFrame < 1) Q = vec4(length(U-.5*R));\n    \n    if (iMouse.z>0.) {\n        vec4 b = B(U);\n        vec4 c = C(U);\n        Q = vec4(min(Q.x,min(segment(U,c.xy,c.zw), segment(U,b.xy,b.zw))));\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"Main {\n    Q = B(U);\n    if (iMouse.z>0.) {\n        if (Q.x<R.x) {\n            Q = vec4(Q.zw,iMouse.xy);\n        }\n        else Q = iMouse.xyxy;\n        Q = vec4(0.);\n    }\n    else Q = vec4(1e9);\n    if (Q.x<.5*R.x) Q.x = R.x-Q.x;\n    if (Q.z<.5*R.x) Q.z = R.x-Q.z;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"Main {\n    Q = C(U);\n    if (iMouse.z>0.) {\n        if (Q.x<R.x) {\n            Q = vec4(Q.zw,iMouse.xy + vec2(0, -100));\n        }\n        else Q = iMouse.xyxy + vec4(0, -100, 0, -100);\n    }\n    else Q = vec4(1e9);\n    if (Q.x<.5*R.x) Q.x = R.x-Q.x;\n    if (Q.z<.5*R.x) Q.z = R.x-Q.z;\n}","name":"Buffer C","description":"","type":"buffer"}]}