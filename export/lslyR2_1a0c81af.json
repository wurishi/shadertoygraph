{"ver":"0.1","info":{"id":"lslyR2","date":"1489873010","viewed":599,"name":"Rainbow Spinner","username":"akohdr","description":"Determines polar angle from aspect corrected centred coordinates.  \nPhases and masks rotating RGB fields to produce rainbow spinner.\n","likes":31,"published":1,"flags":0,"usePreview":0,"tags":["color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Andrew Wild - akohdr/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define iR iResolution.xy\n#define iT iTime\n#define T (9.*iT)\n//#define T (9.*sin(iT))\n#define PI 3.14159265359\n\nvoid mainImage( out vec4 k, in vec2 p )\n{\n \tvec4 h = vec4(1,2,3,0);\t\t\t// relative RGB phase\n//\th *= PI/2. * sin(iT);\t\t\t// opt. temporal phase shift\n    \n\tvec2 UV = p / iR,\t\t\t\t// scaled coord.\n//\t     O = iR/2.-p,\t\t\t\t// centered coord.  (wrong, ooops)\n//\t     O = p-.5*iR,\t\t\t\t// centered coord.  (corrected @Fab)\n//\t     C = O / iR.y;\t\t\t\t// aspect corrected coord.\n    \t C = (p - .5*iR) / iR.y;\t// direct centered aspect corrected coord. @Fab\n    \n    float r = length(C),\t\t\t// radius\n    \t  d = abs(r-.3),\t\t\t// dist to ring\n//\t      a = atan(C.y/C.x) +\t\t// angle\n//\t          PI*step(0.,C.x);\t\t// quadrant adj.\n          a = atan(C.y,C.x);\t\t// hadn't seen two param atan() @Fab\n    \n\tk = sin(T+a-h);\t\t\t\t\t// phase & spin\n\tk *= .1-d;\t\t\t\t\t\t// transform into ring\n\tk /= r;\t\t\t\t\t\t\t// brighten\n\tk *= step(d,.1);\t\t\t\t// bagel mask\n\tk *= 2.;\t\t\t\t\t\t// increase colour\n//\tk += UV.y/3.;\t\t\t\t\t// background\n}\n\n/*\nvoid mainImage( out vec4 k,  vec2 C )\n{\n    float r = length( C -= .5*(k.xy=iResolution.xy) ) / k.y;        \n\tk = sin( 9.*iTime + atan(C.y,C.x) -vec4(1,2,3,0) )\n        * max(.1-abs(r-.3), 0.) *2. / r;\t\t\t\t\t\n} // 159\n*/\n","name":"Image","description":"","type":"image"}]}