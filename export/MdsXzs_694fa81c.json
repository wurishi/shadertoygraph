{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"float Epsilon = 1e-10;\n \nvec3 RGBToHCV(vec3 RGB)\n{\n\t// Based on work by Sam Hocevar and Emil Persson\n\tvec4 P = (RGB.g < RGB.b) ? vec4(RGB.bg, -1.0, 2.0/3.0) : vec4(RGB.gb, 0.0, -1.0/3.0);\n\tvec4 Q = (RGB.r < P.x) ? vec4(P.xyw, RGB.r) : vec4(RGB.r, P.yzx);\n\tfloat C = Q.x - min(Q.w, Q.y);\n\tfloat H = abs((Q.w - Q.y) / (6.0 * C + Epsilon) + Q.z);\n\treturn vec3(H, C, Q.x);\n}\n\nvec3 HUEToRGB(float H)\n{\n\tfloat R = abs(H * 6.0 - 3.0) - 1.0;\n\tfloat G = 2.0 - abs(H * 6.0 - 2.0);\n\tfloat B = 2.0 - abs(H * 6.0 - 4.0);\n\t//return saturate(vec3(R,G,B));\n\treturn clamp(vec3(R,G,B),0.0,1.0);\n}\n\nvec3 HSVToRGB(vec3 HSV)\n{\n\tvec3 RGB = HUEToRGB(HSV.x);\n\treturn ((RGB - 1.0) * HSV.y + 1.0) * HSV.z;\n}\n\nvec3 RGBToHSV(vec3 RGB)\n{\n\tvec3 HCV = RGBToHCV(RGB);\n\tfloat S = HCV.y / (HCV.z + Epsilon);\n\treturn vec3(HCV.x, S, HCV.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy;\n\tvec2 res = iResolution.xy;\n\tvec2 mouseX = iMouse.xz / res.x;\n\tvec2 mouseY = iMouse.yw / res.y;\n\t\n\t// for some reason our image is upside down, so lets make it rightside up\n\tuv.y = abs(uv.y - res.y);\n\t\n\t// get the colors from the texture, pass in our UV coords\n\tvec4 col = texture(iChannel0, uv / res);\n\t\n\t// if the color is pure white, lets make it 0 alpha\n\tif (col.r == 0.0 && col.g == 0.0 && col.b == 0.0) {\n\t\tcol.a = 0.0;\n\t}\n\t\n\t// convert to HSV\n\tvec3 hsv = RGBToHSV(col.rgb);\n\t\n\t// do some HSV adjustments\n\t// hue\n\thsv.x += fract(iTime / 4.0);\n\t// saturation\n\thsv.y += mouseX.x;\n\t// value\n\thsv.z += mouseY.x;\n\t\n\t// convert back to RGB\n\tvec4 newCol = vec4(HSVToRGB(hsv), 0.0);\n\t\n\t// if we had 0 alpha in the original image, lets make it gray so we know where the alpha is\n\t// since shadertoy doesnt seem like it supports alpha\n\tif (col.a == 0.0) {\n\t\tnewCol.rgb = vec3(0.3, 0.3, 0.3);\n\t}\n\t\n\t// set the colors back to our gl contex\n\tfragColor = newCol;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdsXzs","date":"1406041390","viewed":254,"name":"hue shift test","username":"tayl0r","description":"Trying to understand more about this hue shift shader.\nI wrote the same thing in Unity3d but it's behaving differently there...\nIt could be because alpha doesn't seem to be supported here so it's kind of hard to tell if it's working properly.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""}}