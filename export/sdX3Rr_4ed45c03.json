{"ver":"0.1","info":{"id":"sdX3Rr","date":"1615445376","viewed":41,"name":"ANU - Strategic Management","username":"mooj","description":"ANU - Strategic Management Simple Desicion Visualizing Shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fuzzy","logic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float linear_activation(float edge0, float edge1, float x)\n{\n    return clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n}\n\nfloat rms_is_high(float rms)\n{\n    return linear_activation(0.0, 3.0, rms);\n}\n\nfloat mgr_is_high(float rms)\n{\n    return linear_activation(0.0, 20.0, rms);\n}\n\n// NOTE: Maps [-1, 1] to (inf, -1]\nfloat map11to1inf(float x)\n{\n    return 2.0/(x+1.0) - 2.0;\n}\n\n#define T_Min 1\n#define T_Prod 2\n#define T_Drastic 3\n#define T_SugenoWeber 4\n#define T_Hamacher 5\n#define T_SchweizerSklar 6\n#define T_Frank 7\n#define T_Yager 8\n#define T_AczelAlsina 9\n#define T_Dombi 10\nfloat fuzzy_and(float a, float b, float cos_time)\n{\n    float result = 0.0;\n    int t_norm = T_SugenoWeber;\n    \n    switch (t_norm)\n    {\n    case T_Min:\n        result = min(a, b);\n        break;\n    case T_Prod:\n        result = a*b;\n        break;\n    case T_Drastic:\n        if(a == 1.0) result = b;\n        else if(b == 1.0) result = a;\n        else result = 0.0;\n        break;\n    case T_SugenoWeber:\n        float lambda = map11to1inf(cos_time);\n        result = max(0.0, (a+b-1.0 + lambda*a*b)/(1.0+lambda));\n        break;\n    case T_Hamacher:\n        float k = map11to1inf(cos_time) + 1.0;\n        result = (a*b)/(k + (1.0-k)*(a + b - a*b));\n        break;\n    case T_SchweizerSklar:\n        float p = map11to1inf(cos_time) + 1.0;\n        result = pow(max(0.0, pow(a,p) + pow(b,p) - 1.0), 1.0/p);\n        break;\n    case T_Frank:\n        p = map11to1inf(cos_time) + 1.0;\n        result = log(1.0 + (pow(p,a) - 1.0)*(pow(p,b) - 1.0)/(p-1.0))/log(p);\n        break;\n    case T_Yager:\n        // NOTE: Numerically unstable\n        p = map11to1inf(cos_time) + 1.0;\n        result = max(0.0, 1.0 - pow(pow(1.0-a, p) + pow(1.0-b, p), 1.0/p));\n        break;\n    }\n    \n    return result;\n}\n\nvec3 heatmap(float x)\n{\n    float level = x*3.14159265/2.;\n   \n    vec3 col;\n    col.r = sin(level);\n    col.g = sin(level*2.);\n    col.b = cos(level);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0,0,0);\n\n    vec2 ll = vec2(3,0);\n    vec2 tr = vec2(0,20);\n\n    #if 0\n    ll = vec2(3.5,-0.5);\n    tr = vec2(-2,22);\n    #endif\n\n    float rms = mix(ll.x, tr.x, uv.x);\n    float mgr = mix(ll.y, tr.y, uv.y);\n\n    float rms_high = rms_is_high(rms);\n    float mgr_high = mgr_is_high(mgr);\n    float rms_low = 1.0 - rms_high;\n    float mgr_low = 1.0 - mgr_high;\n\n    float cos_time = cos(iTime);\n    float strategies[4];\n    strategies[0] = fuzzy_and(mgr_high, rms_high, cos_time);\n    strategies[1] = fuzzy_and(mgr_low, rms_low, cos_time);\n    strategies[2] = fuzzy_and(mgr_high, rms_low, cos_time);\n    strategies[3] = fuzzy_and(mgr_low, rms_high, cos_time);\n\n    int best_strategy = 0;\n    float best_rating = 0.0;\n    for(int i=0; i<4; ++i)\n    {\n        if(strategies[i] > best_rating)\n        {\n            best_rating = strategies[i];\n            best_strategy = i;\n        }\n    }\n\n#if 1\n    col.xyz = heatmap(strategies[0]);\n#elif 1\n    col.x = strategies[0];\n    col.y = strategies[1];\n    col.z = strategies[2];\n#elif 1\n    switch(best_strategy)\n    {\n        case 0: col = vec3(1.0,0.5,0.3); break;\n        case 1: col = vec3(0.8,0.6,1.0); break;\n        case 2: col = vec3(0.5,0.8,0.2); break;\n        case 3: col = vec3(0.5,0.8,1.0); break;\n    }\n#else\n    col = strategies[0]*vec3(1.0,0.5,0.3) + strategies[1]*vec3(0.8,0.6,1.0) + strategies[2]*vec3(0.5,0.8,0.2) + strategies[3]*vec3(0.5,0.8,1.0);\n#endif\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}