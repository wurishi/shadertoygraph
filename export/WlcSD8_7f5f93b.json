{"ver":"0.1","info":{"id":"WlcSD8","date":"1580826600","viewed":412,"name":"Golden Section Zoom","username":"fizzer","description":"I saw an animated GIF somewhere that shows an endless loop zooming into \"squared rectangles\", which I guessed must be arranged in a configuration based on the golden ratio so I went and tried it.","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["zoom","phi","infinite","goldenratio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// For this to work, it needs a rectangle which can be split into a square and another rectangle\n// with the same edge-length ratios, such as x:1 where 1 / (x - 1) == x or (x - 1) == 1 / x\n// and the golden ratio satisfies this equation.\n\n// This variant by FabriceNeyret2 does it \"the other way around\" and draws boxes outwards from the center\n// by placing the boxes on a golden spiral path: https://www.shadertoy.com/view/3llGD7\n\nconst float phi = (sqrt(5.) + 1.) / 2.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.y;\n\n    // Jittered time value for cheap motionblur\n    float t = iTime + texelFetch(iChannel0, ivec2(fragCoord.xy) & 1023, 0).r / 60.;\n    \n    vec2 pp = vec2(pow(phi - 1., 4.), pow(phi - 1., 3.));\n    \n    // Calculate the limit point of nested transformations for zooming in to    \n    vec2 zc = vec2(1., pp.y) / (1. - pp.x);\n    \n    uv -= .5 * vec2(iResolution.x / iResolution.y, 1);\n    uv += vec2(cos(t / 3.), sin(t / 2.)) * .1;\n    \n    float a = t;\n    mat2 m = mat2(cos(a), sin(a), -sin(a), cos(a));\n    \n    // Exponential scaling transform, for a seamless (self-similar) zooming animation.\n    float scale = pow(pp.x, 1. + fract(t));\n    \n    uv = m * uv * scale + zc;\n\n    vec3 c = vec3(0);\n\n    // Repeatedly subdivide pixelspace into a square and rectangle with edge lengths in ratio 1:(phi-1)\n    // Note that such a rectangle has the same shape as a rectangle with ratio 1:phi\n    for(int i = 0; i < 32; ++i)\n    {\n        float j = float(i) + floor(t) * 4.;\n        if(uv.x < 1.)\n        {\n            // Pixel is inside this square. Pick a colour and break out.\n            c = sin(vec3(j, j * 2., j * 3.)) * .5 + .5;\n            break;\n        }\n        // Pixel is inside the rectangle, so continue subdividing.\n        uv = (uv - vec2(1., 1.)).yx * vec2(-1, 1) * phi;\n    }\n    \n    fragColor.rgb = sqrt(c);\n    fragColor.a = 1.;\n}","name":"Image","description":"","type":"image"}]}