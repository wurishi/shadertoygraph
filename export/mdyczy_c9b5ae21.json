{"ver":"0.1","info":{"id":"mdyczy","date":"1701752638","viewed":73,"name":"headache induction","username":"pb","description":"maybe this one needs the seizure warning","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["bloom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//bloom logic from: //https://www.shadertoy.com/view/lsBfRc\n\n#define colorRange 32.\n\n\nvec3 bloomTile(float lod, vec2 offset, vec2 uv){\n    return texture(iChannel1, uv * exp2(-lod) + offset).rgb;\n}\n\nvec3 getBloom(vec2 uv){\n\n    vec3 blur = vec3(0.0);\n\n    blur = pow(bloomTile(2., vec2(0.0,0.0), uv),vec3(2.2))       \t   \t+ blur;\n    blur = pow(bloomTile(3., vec2(0.3,0.0), uv),vec3(2.2)) * 1.3        + blur;\n    blur = pow(bloomTile(4., vec2(0.0,0.3), uv),vec3(2.2)) * 1.6        + blur;\n    blur = pow(bloomTile(5., vec2(0.1,0.3), uv),vec3(2.2)) * 1.9 \t   \t+ blur;\n    blur = pow(bloomTile(6., vec2(0.2,0.3), uv),vec3(2.2)) * 2.2 \t   \t+ blur;\n\n    return blur * colorRange;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = texture(iChannel0, uv).rgb;\n    \n    color += getBloom(uv) * vec3(2.,0,1.); \n    \n    color = 1. - exp(-color*color);\n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define extraReflection 1.  //set this to zero if your FPS is crashing - sorry\n\nfloat objid, inf=1e6, too_small=1e-6, distToFloor;\nvec3 ifs_color, ro;\n\nfloat de(vec3 p) {\n    vec4 q = vec4(p, 1.);\n    float nn=1.;\n    q.xz = mod(q.xz + nn, 2.*nn) - nn;\n    q.xyz -= 1.;\n\n    float i=0.;\n    for(; i < 5.; i++) {\n        q.xyz = abs(q.xyz + 1.5 )  - 1.5;\n        q /= clamp(dot(q.xyz, q.xyz), .6, .9);\n        q *= 2.;\n    }\n    \n    return length( max( abs(q.xyz) - vec3( .4) , 0.) )/q.w;\n \n\n}\n\nfloat march(vec3 ro, vec3 rd, float mx) {\n    float t = 0.0;\n    float eps = 1e-5, distfac=100.;\n    float hitThreshold = eps;\n    for(int i = 0; i < 200; i++) {\n        float d = de(ro + rd*t);\n        if (d < hitThreshold || t >= mx) break;\n        t += d;\n        hitThreshold = eps *(1.+t*distfac);\n    }\n    return t;\n}\n\n\nvec3 phong(\n  in vec3 pt,\n  in vec3 prp,\n  in vec3 normal,\n  in vec3 light,\n  in vec3 color,\n  in float spec,\n  in vec3 ambLight)\n{\n   vec3  lightv=normalize(light-pt);\n   float diffuse=dot(normal,lightv);\n   vec3  refl=-reflect(lightv,normal);\n   vec3  viewv=normalize(prp-pt);\n   float specular=pow(max(dot(refl,viewv),0.0),spec+params[20]);\n   return .5*max(diffuse,0.)*(color) + .5*specular*vec3(.3,.6,1.);  \n}\n\nvec3 normal(vec3 p, float dist) {\n    vec2 h = vec2(.001 + params[25] + dist/100., 0.0);\n    vec3 n = vec3(\n        de(p + h.xyy) - de(p - h.xyy),\n        de(p + h.yxy) - de(p - h.yxy),\n        de(p + h.yyx) - de(p - h.yyx));\n    return normalize(n);\n}\n\n\nvec3 render(vec3 ro, vec3 rd) {\n    vec3 col = vec3(0.);\n    vec3 light_dir =  ro;\n    \n\n    vec3 color     = vec3( params[27], params[28], params[29]);\n    float specular_power = 2.;\n    vec3 ambient_light = vec3(.5);\n    vec3 floor_color = vec3(.01,.1,.1);\n    \n    float t = march(ro, rd, 100.0);\n    if(t < 100.0) {\n        vec3 pos = ro + rd*t;\n        vec3 nor = normal(pos, t);        \n        vec3 cf = phong( pos, ro, nor, light_dir, color, specular_power, ambient_light);       \n        col = cf * (1.-objid); \n\n        col *= 60.*exp(-.2*t*t);\n    }\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p  = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    \n    ro = vec3(iTime/3.,-.9,.6);  //iTime/8.);\n    vec3 rd = normalize( vec3(p,1.2) );\n    \n    float s2 = 1.;// + iTime/5.;\n    rd.xz *= mat2( cos( s2 + vec4(0,11,33,0))); \n    \n    vec3 col = render(ro, rd);\n    col = 1. - exp(-.2 * (1.+params[16]) * col);\n    \n    fragColor = vec4( col/1.2, 1.);\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//bloom logic from: //https://www.shadertoy.com/view/lsBfRc\n\nvec3 makeBloom(float lod, vec2 offset, vec2 bCoord){\n    \n    vec2 pixelSize = 1.0 / vec2(iResolution.x, iResolution.y);\n\n    offset += pixelSize;\n\n    float lodFactor = exp2(lod);\n\n    vec3 bloom = vec3(0.0);\n    vec2 scale = lodFactor * pixelSize;\n\n    vec2 coord = (bCoord.xy-offset)*lodFactor;\n    float totalWeight = 0.0;\n\n    if (any(greaterThanEqual(abs(coord - 0.5), scale + 0.5)))\n       return vec3(0.0);\n\n    //changed to gaussian weighting scheme - pb\n    for (int i = -2; i < 2; i++) {\n        for (int j = -2; j < 2; j++) {\n\n            float wg = gk1s[ (i+2)*5+(j+2)]; \n\n            bloom = pow(texture(iChannel0,vec2(i,j) * scale + lodFactor * pixelSize + coord, lod).rgb,vec3(12.))*wg + bloom;\n            totalWeight += wg;\n\n        }\n    }\n\n    bloom /= totalWeight;\n\n    return bloom;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n\tvec3 blur = makeBloom(2.,vec2(0.0,0.0), uv);\n\t\tblur += makeBloom(3.,vec2(0.3,0.0), uv);\n\t\tblur += makeBloom(4.,vec2(0.0,0.3), uv);\n\t\tblur += makeBloom(5.,vec2(0.1,0.3), uv);\n\t\tblur += makeBloom(6.,vec2(0.2,0.3), uv);\n\n    fragColor = vec4( sqrt(blur) ,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float[] params = float[] ( \n0.,\n6.,\n-0.3,\n0.,\n0.,\n0.,\n-0.6,\n0.,\n0.,\n0.,\n0.,\n0.,\n1.6,\n1.,\n0.,\n0.1,\n2.,\n0.,\n0.,\n0.,\n2.,\n-2.,\n0.,\n0.,\n0.,\n0.1,\n-5.,\n0.,\n.1,\n.4,\n0.,\n0.,\n0.\n);\n\n\n//gaussian_kernel_one_stdev\nfloat[] gk1s = float[] (\n        0.003765,0.015019,0.023792,0.015019,0.003765,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.023792,0.094907,0.150342,0.094907,0.023792,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.003765,0.015019,0.023792,0.015019,0.003765 );","name":"Common","description":"","type":"common"}]}