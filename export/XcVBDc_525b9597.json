{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// -----------------------------------------------------------------------\n// Simplex 3D Noise\n// by Ian McEwan, Stefan Gustavson (https://github.com/stegu/webgl-noise)\n\n#define PI 3.141592\n\nvec4 permute(vec4 x) {\n    return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v) {\n    const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i = floor(v + dot(v, C.yyy));\n    vec3 x0 = v - i + dot(i, C.xxx);\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min(g.xyz, l.zxy);\n    vec3 i2 = max(g.xyz, l.zxy);\n\n    //  x0 = x0 - 0. + 0.0 * C\n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n    // Permutations\n    i = mod(i, 289.0);\n    vec4 p = permute(permute(permute(\n                    i.z + vec4(0.0, i1.z, i2.z, 1.0))\n                    + i.y + vec4(0.0, i1.y, i2.y, 1.0))\n                + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n\n    // Gradients\n    // ( N*N points uniformly over a square, mapped onto an octahedron.)\n    float n_ = 1.0 / 7.0; // N=7\n    vec3 ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z); //  mod(p,N*N)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_); // mod(j,N)\n\n    vec4 x = x_ * ns.x + ns.yyyy;\n    vec4 y = y_ * ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4(x.xy, y.xy);\n    vec4 b1 = vec4(x.zw, y.zw);\n\n    vec4 s0 = floor(b0) * 2.0 + 1.0;\n    vec4 s1 = floor(b1) * 2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n    vec3 p0 = vec3(a0.xy, h.x);\n    vec3 p1 = vec3(a0.zw, h.y);\n    vec3 p2 = vec3(a1.xy, h.z);\n    vec3 p3 = vec3(a1.zw, h.w);\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n    m = m * m;\n    float n = 42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1),\n                    dot(p2, x2), dot(p3, x3))); // [-1 ... +1]\n\n    // n = 0.5 * (n + 1.0); // [0 ... +1]\n\n    return n;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 vs_uv = fragCoord/iResolution.xy;\n    float u_time = iTime;\n    float u_aspect = iResolution.x/iResolution.y;\n    \n    // -------------------------------------------------------------------\n    // Space\n    vec2 sp;\n    float a;\n    float r;\n    float aw;\n\n    {\n        float aspect = u_aspect;\n        float zoomout = 1.5;\n\n        // Cartesian coordinates\n        sp = (vs_uv * 2.0) - 1.0;\n        sp.x *= aspect;\n        sp *= zoomout;\n\n        // Polar coordinates\n        r = length(sp);\n        a = 0.5 * (atan(sp.y, sp.x) / PI + 1.0);\n        aw = 2.0 * abs(a - 0.5); // [1.0 -> 0.0 -> 1.0]\n    }\n\n    // Entropy sources\n    float n0;\n    float n1;\n    float n2;\n    {\n        float t = u_time * 0.25;\n        t = snoise(vec3(t, 0.25 * sp.x, 0.5 * sp.x));\n\n        vec2 tmp = normalize(sp - vec2(0.0, 1.8));\n        float k = atan(tmp.y, tmp.x);\n        n1 = snoise(vec3(0.0, k + t, 0.0));\n\n        n1 *= 0.5;\n\n        // Transform space\n        sp = sp - 0.1 * n1;\n        n2 = snoise(vec3(0.0, 20.0 * sp.x, 20.0 * sp.y));\n        n0 = snoise(vec3(0.0, 50.0 * sp.x - 0.4 * n1, 50.0 * sp.y - 0.4 * n1));\n    }\n\n    // -------------------------------------------------------------------\n    // Shapes and signed distances\n    float sd;\n    float shape_idx;\n\n    {\n        float sd_square = 1.0 - max(abs(sp.x), abs(sp.y));\n        float sd_circle = length(sp) - 1.0;\n\n        sd = sd_square;\n        sd = min(sd, sd_circle);\n\n        shape_idx = float(sd == sd_square);\n    }\n\n    // -------------------------------------------------------------------\n    // Drawing\n\n    // Line\n    vec3 line_color;\n\n    {\n        vec3 color = mix(vec3(0.8, 1.0, 0.8), vec3(1.0, 0.8, 0.8), shape_idx);\n        color *= (1.0 + sign(n0) * pow(abs(n0), 2.0));\n\n        float line_width = 0.025 + 0.04 * n0 + 0.005 * n1;\n        float line_smoothness = 0.025;\n        float line = 1.0 - smoothstep(0.0, line_smoothness, abs(sd) - line_width);\n\n        line_color = color * line;\n    }\n\n    // Ground\n    vec3 ground_color;\n\n    {\n        vec3 color = 0.5 * vec3(1.0, 0.5, 1.0);\n        color *= (1.0 + 0.05 * sign(n2) * pow(abs(n2), 0.5));\n        color *= (1.0 + 0.10 * sign(n0) * pow(abs(n0), 0.5));\n        color *= (1.0 + 0.20 * sign(n1) * pow(abs(n1), 0.8));\n\n        ground_color = color;\n    }\n\n    // Lighting\n    vec3 light_color;\n\n    {\n        vec3 color = 0.25 * vec3(1.0, 0.9, 0.8);\n        color *= (1.0 + 1.0 * n1);\n\n        color *= 1.5 - pow(0.6 * max(abs(sp.x), abs(sp.y)), 8.0);\n\n        light_color = color;\n    }\n\n    vec3 color = (line_color + ground_color) * light_color;\n    fragColor = vec4(color, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XcVBDc","date":"1734533997","viewed":64,"name":"Fabric Effect","username":"whoami","description":"-","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","flag","fabric"],"hasliked":0,"parentid":"","parentname":""}}