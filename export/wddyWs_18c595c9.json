{"ver":"0.1","info":{"id":"wddyWs","date":"1602082726","viewed":189,"name":"flyeyes","username":"shortwavedave","description":"eyes that fly","likes":15,"published":1,"flags":32,"usePreview":0,"tags":["eyes","fly","that"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ((fragCoord/iResolution.xy));//-0.5)*vec2(iResolution.x/iResolution.y,1.0);\n    \n    vec3 viewDir = normalize(vec3(uv,clamp(abs(sin(.1*iTime)),0.3,.5)));\n    \n    vec2 planarUV = viewDir.xz/abs(viewDir.y);\n    \n    float depth = planarUV.y;\n    //planarUV += vec2(0.0, cos(iTime*.6));\n    \n    //vec3 albedo = texture( iChannel0, planarUV).rgb;\n    vec3 albedo = texture( iChannel0, uv).rgb;\n    \n    float light = 2.5/(depth*depth)*viewDir.z;\n    \n    fragColor = vec4(light*albedo,1.0);\n    //fragColor = albedo;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// fork of: https://www.shadertoy.com/view/XsXXDn\n\n#define t iTime\n#define r iResolution.xy\n\nmat2 r2d(float a) {\n\tfloat c = cos(a), s = sin(a);\n    return mat2(\n        c, s,\n        -s, c\n    );\n}\n\n// Smooth HSV to RGB conversion \nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 c;\n    float l,z=t;\n    vec2 pos = fragCoord.xy/r;\n    //pos *= r2d(t);\n    for(int i=0;i<3;i++) {\n    \tvec2 uv,p=pos;\n        uv = p;\n        p-=0.5;\n        p.x*=r.x/r.y;\n        p*=r2d(sin(-t*.12));\n        //z+=float(i)*.1;\n        z+=pow(0.01 + abs(sin(t*.1)),10.);//0.01;\n        l=length(p)/.5;\n        //uv+=(p/l)*(smoothstep(-1000.,1000.,tan(z*.1))*.5)*((l*(cos(t*.1)*.5)-z*.002));\n        //uv+=(p/l)*(clamp(10.*cos(z*.1),-5.,5.)*.5)*((l*(cos(t*.1)*.5)-z*.002));\n        uv+=(p/l)*(clamp(10.*cos(z*.1),-2.,2.))*pow(sin(l*4.2-z*1.),4.);\n        uv*=r2d(t*.1);\n        c[i]=.01*(1.+abs(cos(t*.5)))/length(abs(mod(uv,1.)-.5));\n    }\n    fragColor = vec4((c/l),t);\n}","name":"Buffer A","description":"","type":"buffer"}]}