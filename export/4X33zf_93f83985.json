{"ver":"0.1","info":{"id":"4X33zf","date":"1716807218","viewed":55,"name":"Pixelate Filter","username":"JenKaiLiu","description":"Pixelate Filter","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["filter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Desired number of squares per row and column\n    float size = 50.;\n\n    // Aspect ratio of the viewport\n    float aspectRatio = iResolution.x / iResolution.y;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Adjust uv coordinates to keep squares as squares\n    uv.x *= aspectRatio;\n\n    // Creating grid of squares\n    uv = vec2(\n        float(int(uv.x * size)) / size,\n        float(int(uv.y * size)) / size\n    );\n\n    // Resetting the aspect ratio effect on x coordinate after grid placement\n    uv.x /= aspectRatio;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0,uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}