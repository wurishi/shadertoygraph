{"ver":"0.1","info":{"id":"4lyyRR","date":"1534765235","viewed":1158,"name":"Engraved Face","username":"jackdavenport","description":"Engraved face on a stone slab. Similar to my last shader.","likes":12,"published":3,"flags":34,"usePreview":0,"tags":["shader","face","stone","engraved"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER 256\n#define MAX_DIST 100.\n#define MIN_DIST .01\n\nfloat luma(vec3 v) {\n    return .2126*v.x + .7152*v.y + .0722*v.z;\n}\n\nvec2 wallUV(vec3 p) {\n    float aspect = iChannelResolution[0].x/iChannelResolution[0].y;\n    return (p.xy*vec2(1./aspect,1.))/7.5+vec2(.5,.5);\n}\n\nfloat dstPlane(vec3 p, vec4 n) {\n    return dot(p,n.xyz) + n.w;\n}\n\nfloat dstScene(vec3 p) {\n    float disp = luma(texture(iChannel0, wallUV(p)).xyz);\n    return dstPlane(p, vec4(0.,0.,-1.,2.)) + disp * .5;\n}\n\nfloat raymarch(vec3 ro, vec3 rd) {\n    float t = 0.;\n    for(int i = 0; i < MAX_ITER; i++) {\n        float d = dstScene(ro+rd*t);\n        if(d < MIN_DIST || d > MAX_DIST) {\n            break;\n        }\n        t += d * .75;\n    }\n    return t;\n}\n\n// Shadows by iq\n// Source: https://www.shadertoy.com/view/Xds3zN\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax, in float hardness )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<32; i++ )\n    {\n\t\tfloat h = dstScene( ro + rd*t );\n        res = min( res, hardness*h/t );\n        t += clamp( h, 0.06, 0.30 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal(vec3 p, float t) {\n    vec2 e = vec2(t * MIN_DIST, 0.);\n    vec3 n = vec3(dstScene(p+e.xyy)-dstScene(p-e.xyy),\n                  dstScene(p+e.yxy)-dstScene(p-e.yxy),\n                  dstScene(p+e.yyx)-dstScene(p-e.yyx));\n    return normalize(n);\n}\n\nvec3 pixel(vec3 ro, vec3 rd) {\n    float t = raymarch(ro, rd);\n    if(t < MAX_DIST) {\n        vec3 p  = ro + rd * t;\n        vec3 n  = calcNormal(p, t);\n        vec3 r  = normalize(reflect(rd, n));\n        vec2 uv = wallUV(p);\n        \n        vec3 mat = texture(iChannel1, uv).xyz;\n        vec3  l = normalize(vec3(45.,30.,-45.));\n        float a = softshadow(p+l*MIN_DIST,l,MIN_DIST+.05,MAX_DIST, 3.);\n        float d = max(dot(l,n)*a,.2);\n        float s = pow(max(dot(l,r),0.),5.+25.*luma(mat))*a;\n        \n        return mat*d+s;\n    }\n    return rd;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    vec3 ro = vec3(0., 0., -5.);\n    vec3 rd = vec3(uv, 1.);\n    \n    fragColor.xyz = pixel(ro, normalize(rd));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Thanks to dharrys for the noise reduction code!\n// Source: https://www.shadertoy.com/view/MtsBWj\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\tfloat offset = 1.0 / iResolution.x;\n\tvec3 o = vec3(-offset, 0.0, offset);\n\tvec4 gx = texture(iChannel0, uv + o.xz);\n\tvec4 gy = gx;\n\tvec4 t;\n\n    //Calculate sobel\n\tgx += 2.0*texture(iChannel0, uv + o.xy);\n\tt = texture(iChannel0, uv + o.xx);\n\tgx += t;\n\tgy -= t;\n\tgy += 2.0*texture(iChannel0, uv + o.yz);\n\tgy -= 2.0*texture(iChannel0, uv + o.yx);\n\tt = texture(iChannel0, uv + o.zz);\n\tgx -= t;\n\tgy += t;\n\tgx -= 2.0*texture(iChannel0, uv + o.zy);\n\tt = texture(iChannel0, uv + o.zx);\n\tgx -= t;\n\tgy -= t;\n    \n\tvec4 sobel = sqrt(gx*gx + gy*gy);\n    vec4 blur_=texture( iChannel0, vec2(uv.x,uv.y), 1.5);\n    \n    fragColor = mix(blur_, texture(iChannel0, uv), sobel);\n}","name":"Buffer A","description":"","type":"buffer"}]}