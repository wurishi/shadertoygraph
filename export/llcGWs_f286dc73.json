{"ver":"0.1","info":{"id":"llcGWs","date":"1472338987","viewed":141,"name":"zuckersuess","username":"vapoi","description":"i need icecream.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","candy","sugar","fountain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float fPi = 3.14159;\n\nconst float extra_inside = 0.8; // 0.0 to 1.0 \n\n\nconst float smoke_only = 0.0;\t// 1.0 for raw uninverted data\n\n\n// Noise part:\n    //\n    // GLSL textureless classic 2D noise \"cnoise\",\n    // with an RSL-style periodic variant \"pnoise\".\n    // Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n    // Version: 2011-08-22\n    //\n    // Many thanks to Ian McEwan of Ashima Arts for the\n    // ideas for permutation and gradient selection.\n    //\n    // Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n    // Distributed under the MIT license. See LICENSE file.\n    // https://github.com/ashima/webgl-noise\n    //\n\n    vec4 mod289(vec4 x)\n    {\n      return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\n\n    vec4 permute(vec4 x)\n    {\n      return mod289(((x*34.0)+1.0)*x);\n    }\n\n    vec4 taylorInvSqrt(vec4 r)\n    {\n      return 1.79284291400159 - 0.85373472095314 * r;\n    }\n\n    vec2 fade(vec2 t) {\n      return t*t*t*(t*(t*6.0-15.0)+10.0);\n    }\n\n    // Classic Perlin noise\n    float cnoise(vec2 P)\n    {\n      vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n      vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n      Pi = mod289(Pi); // To avoid truncation effects in permutation\n      vec4 ix = Pi.xzxz;\n      vec4 iy = Pi.yyww;\n      vec4 fx = Pf.xzxz;\n      vec4 fy = Pf.yyww;\n\n      vec4 i = permute(permute(ix) + iy);\n\n      vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n      vec4 gy = abs(gx) - 0.5 ;\n      vec4 tx = floor(gx + 0.5);\n      gx = gx - tx;\n\n      vec2 g00 = vec2(gx.x,gy.x);\n      vec2 g10 = vec2(gx.y,gy.y);\n      vec2 g01 = vec2(gx.z,gy.z);\n      vec2 g11 = vec2(gx.w,gy.w);\n\n      vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n      g00 *= norm.x;  \n      g01 *= norm.y;  \n      g10 *= norm.z;  \n      g11 *= norm.w;  \n\n      float n00 = dot(g00, vec2(fx.x, fy.x));\n      float n10 = dot(g10, vec2(fx.y, fy.y));\n      float n01 = dot(g01, vec2(fx.z, fy.z));\n      float n11 = dot(g11, vec2(fx.w, fy.w));\n\n      vec2 fade_xy = fade(Pf.xy);\n      vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n      float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n      return 2.3 * n_xy;\n    }\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 pos = fragCoord.xy / iResolution.xy;\n    vec2 posMid = vec2(-1.0, -1.0) + 2.0 * pos; \n    float fakX = iResolution.x / iResolution.y;\n    posMid.x *= fakX;\n    pos.x *= fakX;\n    \n    float fTime = iTime * 1.0;\n\n    float v = 0.0;\n    float fHeight = 0.0;\n    float fWidth = 0.0;\n    float fNoise1 = 0.0; \n    \n    float mode1 = smoothstep(-0.5, 0.5, sin(fTime * 0.50));\n    vec3 colNoise = vec3(0.0);\n    float fCNoise = 0.0;\n    \n    for (int j = 0; j < 15; j++)\n    {\n        fHeight = float(j) * 0.05 * (1.0 + pos.y * 1.0); \n        fWidth = float(j) * 0.02 - mix(abs(posMid.y) * 1.50, pos.y, mode1); \n        \n        fNoise1 = cnoise(vec2(pos.x, pos.y * 0.2) * 15.0 + 1.2 * vec2(fHeight , fTime * 0.70 + fHeight * 21.0));\n        \n        fHeight += 0.1 * fNoise1 * smoothstep(0.35, 0.6, pos.y);\n        fWidth += (0.03 + mode1 * 0.05) * fNoise1;\n        \n        v += 0.06 * smoothstep(-0.3 - fHeight, -0.2 - fHeight, 2.0 * -abs(pos.y) + 0.5)\n            \t  * smoothstep(-0.8 - fWidth, -0.75 - fWidth, -abs(posMid.x));\n        fCNoise += (fNoise1 + 0.8) * (1.0 - v) * 0.1;\n    }\n    \n    \n    vec3 colMixed = vec3(0.0);\n    \n    colMixed += vec3(0.6, 0.6, 0.6) * v;\n    colMixed = mix(max(0.0, fCNoise) * vec3(0.6, 0.3, 0.15) * .9, colMixed, \n                   min(1.0, v * .90 - fCNoise) + 01.15 * smoothstep(-0.2, -0.14 + (1.0 - extra_inside) * 0.5, -abs(v - 0.5)));\n    \n    colMixed = mix(colMixed, fCNoise * (1.0 + fNoise1 * 0.2) * vec3(0.13, 0.05, 0.07), 2.0 - v * 8.0);\n    \n    colMixed = mix(colMixed, vec3(0.6, 0.60, 0.60) * v, smoke_only);\n    \n    \n\tfragColor = vec4(colMixed,1.0);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}