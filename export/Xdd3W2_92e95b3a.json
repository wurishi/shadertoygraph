{"ver":"0.1","info":{"id":"Xdd3W2","date":"1452316306","viewed":1151,"name":"Blur and Isolate","username":"iq","description":"Repeated box blurring (2x2 kernel) and isolating a band of values with an exponential around 0.2 leads to a pretty long lasting transitory dynamics.  ","likes":9,"published":3,"flags":32,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by inigo quilez - iq/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat c = texture( iChannel0, fragCoord / iResolution.xy ).x;\n    \n    fragColor = vec4(c,c,c,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Created by inigo quilez - iq/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n\nfloat fetch( in vec2 p )\n{\n    return texture(iChannel0, fract(p/iChannelResolution[0].xy) ).x;\n}\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*138.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 px )\n{\n    // box blur\n    vec2 s;\n    s.x = -0.5+2.0*fract(float(iFrame/1)/2.0);\n    s.y = -0.5+2.0*fract(float(iFrame/2)/2.0);\n    float k = texture( iChannel0, (px+s) / iResolution.xy ).x;\n\n\n    // isolate band\n    //float f = (k-.15)/0.053; f = exp( -f*f );\n\tfloat f = (k-.20)/0.044; f = exp( -f*f );\n    //float f = (k-.30)/0.071; f = exp( -f*f );\n    \n    if( iFrame==0 ) f = hash1(px.x*13.0+hash1(px.y*71.1));\n\t\n\tfragColor = vec4( f, 0.0, 0.0, 0.0 );\n}","name":"Buf A","description":"","type":"buffer"}]}