{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"XsXGzn","filepath":"/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"vec3 COLOR1 = vec3(0.0, 0.0, 0.3);\nvec3 COLOR2 = vec3(0.5, 0.0, 0.0);\nfloat BLOCK_WIDTH = 0.01;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\t// To create the BG pattern\n\tvec3 final_color = vec3(1.0);\n\tvec3 bg_color = vec3(0.0);\n\tvec3 wave_color = vec3(0.0);\n\t\n\tfloat c1 = mod(uv.x, 2.0 * BLOCK_WIDTH);\n\tc1 = step(BLOCK_WIDTH, c1);\n\t\n\tfloat c2 = mod(uv.y, 2.0 * BLOCK_WIDTH);\n\tc2 = step(BLOCK_WIDTH, c2);\n\t\n\tbg_color = mix(uv.x * COLOR1, uv.y * COLOR2, c1 * c2);\n\t\n\t\n\t// To create the waves\n\tfloat wave_width = 0.01;\n\tuv  = -1.0 + 2.0 * uv;\n\tuv.y += 0.1;\n    \n       // create pixel coordinates\n\t//vec2 uv = fragCoord.xy / iResolution.xy;\n\n    \n    vec2 uvo = uv;\n    uv = fragCoord.xy / iResolution.xy;\n    \n\t// first texture row is frequency data\n\tfloat fft  = texture( iChannel0, vec2(uv.x,0.25) ).x; \n\t\n    // second texture row is the sound wave\n\tfloat wave = texture( iChannel0, vec2(uv.x,0.75) ).x;\n\t\n\t// convert frequency to colors\n\tvec3 col = vec3( fft, 4.0*fft*(1.0-fft), 1.0-fft ) * fft;\n\n    // add wave form on top\t\n\tcol += 1.0 -  smoothstep( 0.0, 0.15, abs(wave - uv.y) );\n\t\n\t// output final color\n\t//fragColor = vec4(col,1.0);\n    uv = uvo;\n    \n\tfor(float i = 0.0; i < 10.0; i++) {\n\t\t\n\t\tuv.y += (0.07 * sin(uv.x + (i*(fft*wave))/7.0 + (iTime + (wave*(1.0+fft))))) ;\n\t\twave_width = abs(1.0 / (150.0 * uv.y));\n\t\twave_color += vec3(wave_width * 1.9, wave_width, wave_width * 1.5);\n\t}\n    \n\tbg_color.x *= sin(wave*cos(fft)/iTime);\n    bg_color.z *= cos(fft*sin(wave))*col.z;\n    \n\tfinal_color = bg_color + wave_color;\n\tfinal_color *= (0.75 * (1.0+(fft*(10.0/wave))));\n//\tfinal_color -= (col - wave);\n    vec3 inv = final_color - (col - wave);\n    \n   final_color = final_color * 0.075 * (inv * 0.75);\n    \n\tfragColor = vec4(final_color, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsjSWV","date":"1416084211","viewed":848,"name":"waves [audio]","username":"XYX","description":"based on waves by bonniem\nhttps://www.shadertoy.com/view/4dsGzH#","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["waves","fft","visualization","audio"],"hasliked":0,"parentid":"","parentname":""}}