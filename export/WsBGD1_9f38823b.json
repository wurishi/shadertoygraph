{"ver":"0.1","info":{"id":"WsBGD1","date":"1548705137","viewed":205,"name":"DJANG - Simple Ray Intersection","username":"d_matrix","description":"Simple Ray Sphere Intersection","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["ray"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Ray\n{\n    vec3 origin;\n    vec3 direction;\n};\n    \nstruct Sphere\n{\n    vec3 center;\n    float radius;\n};\n    \nfloat remap(float a, float b, float t)\n{\n    return (t - a) / (b - a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy) / iResolution.y;\n    \n    Ray ray;\n    ray.origin = vec3(0.0);\n    ray.direction = normalize(vec3(uv, 1.0));\n    \n    Sphere sphere;\n    sphere.center = vec3(0.0, 0.0, 3.0);\n    sphere.radius = 1.0;\n    \n    float t = dot(sphere.center - ray.origin, ray.direction);\n    float y = distance(sphere.center, ray.origin + ray.direction * t);\n    \n    vec3 color = vec3(0.0);\n    \n    if (y <= sphere.radius)\n    {\n        float x = sqrt(pow(sphere.radius, 2.0) - pow(y, 2.0));\n        float t1 = t - x;\n        float t2 = t + x;\n        \n        color = vec3(remap(sphere.center.z, sphere.center.z - sphere.radius, t1));\n    }\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}