{"ver":"0.1","info":{"id":"dlXBRj","date":"1699832608","viewed":103,"name":"Game of life went wrong !?","username":"Carabaf","description":"Game of life shader but with some tweaked rules.\nSome init patterns are mapped on A, Z, E and R","likes":5,"published":1,"flags":48,"usePreview":0,"tags":["gameoflife"],"hasliked":0,"parentid":"mtsBDM","parentname":"Game of Life - Cara"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 color = texture(iChannel0, uv);\n\n    fragColor = vec4(color.rgb, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord.xy) - ivec2(iResolution.xy)/2;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n\n    int neighbors = 0;\n\n    neighbors += GetNeighbours(uv, iResolution, iChannel0);\n   \n    float state = texture(iChannel0, uv).a;\n\n    vec3 color = vec3(0.);\n\n    if(state > 0.) \n    {\n        if(neighbors >= 2 || neighbors <= 3) \n        {\n            state -= 0.005;\n        }\n        else\n        {\n            state = 0.;\n        }\n    } \n    else{\n        if(neighbors == 3) \n        {\n            state = 1.0;\n        }\n    } \n\n\n    if(iFrame < 1) {\n        state = init_2(coord); \n    }\n    \n    fragColor = vec4(state);\n\n    fragColor = resetPattern(coord, fragColor, iChannel3);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const ivec2 KEY_ENTER = ivec2(13, 0);\nconst ivec2 KEY_a = ivec2(65, 0);\nconst ivec2 KEY_z = ivec2(90, 0);\nconst ivec2 KEY_e = ivec2(69, 0);\nconst ivec2 KEY_r = ivec2(82, 0);\nconst ivec2 KEY_t = ivec2(84, 0);\nconst ivec2 KEY_y = ivec2(89, 0);\n\n\nint GetNeighbours(vec2 uv, vec3 resolution, sampler2D channel) {\n    int neighbors = 0;\n\n    for(int y = -1; y <= 1; y++) {\n        for(int x = -1; x <= 1; x++) {\n\n            if(x == 0 && y == 0)\n                continue;\n\n            // Scale the offset down\n            vec2 offset = vec2(x, y) / resolution.xy;\n            // Apply offset and sample texture\n            vec4 lookup = texture(channel, uv + offset);\n             // Accumulate the result\n            neighbors += lookup.a > 0.75 ? 1 : 0;\n        }\n    }\n\n    return neighbors;\n}\n\n\n/* INIT PATTERNS */\n\nfloat random(vec2 coord)\n{\n    return round(fract(sin(dot(coord.xy, vec2(12.9898,78.233))) * 43758.5453123));\n}\n\nfloat init_0(ivec2 coord){\n    ivec2 c1 = ivec2(0, 0);\n    ivec2 c2 = ivec2(-1, 0);\n    ivec2 c3 = ivec2(1, 0);\n    ivec2 c4 = ivec2(-1, 1);\n    ivec2 c5 = ivec2(1, 1);\n    ivec2 c6 = ivec2(0, -1);\n    if (coord == c1 || coord == c2 || coord == c3 || coord == c4 || coord == c5 || coord == c6)\n    {\n        return 1.;\n    }\n    \n    return 0.;\n}\n\nfloat pattern_square(ivec2 coord, int scale){\n    if(coord.x > -1*scale && coord.x < 1*scale && coord.y > -1*scale && coord.y < 1*scale)\n    {\n        return 1.;\n    }\n    \n    return 0.;\n}\n\nfloat init_2(ivec2 coord){\n    int x = coord.x;\n    int y = coord.y;\n    if(x * x + y * y < 10000)\n    {\n        return 1.;\n    }\n    \n    return 0.;\n}\n\nbool keyChecker(ivec2 key, sampler2D channel_keyboard)\n{\n    return texelFetch(channel_keyboard, key, 0).r == 1.;\n}\n\nvec4 resetPattern(ivec2 coord, vec4 color, sampler2D channel_keyboard)\n{\n    if(keyChecker(KEY_a, channel_keyboard))\n    {\n        return vec4(init_0(coord));\n    }\n    \n    if(keyChecker(KEY_z, channel_keyboard))\n    {\n        return vec4(pattern_square(coord, 200));\n    }\n    \n    if(keyChecker(KEY_e, channel_keyboard))\n    {\n        return vec4(init_2(coord));\n    }\n    if(keyChecker(KEY_r, channel_keyboard))\n    {\n        return vec4(random(vec2(coord) * pattern_square(coord, 200)));\n    }\n    \n    return vec4(color);\n}\n\n","name":"Common","description":"","type":"common"}]}