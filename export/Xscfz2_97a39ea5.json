{"ver":"0.1","info":{"id":"Xscfz2","date":"1525874346","viewed":205,"name":"Battery Icons","username":"KaleyGoode","description":"Testing for an embedded GUI on a very small screen so on larger screens you'll need a magnifier to see!\nRed must always be visible, so they don't go to zero.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["battery","icon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Invert(t) (1.0 - t) // in = [0,1] out = [1,0]\n\n// Minimise mapping by having everything return normalised ranges [0,1] or [-1,1].\n// Unsigned Interval is [0,1]; Signed interval is [-1,1]; These change between the two (useful for double or float):\n#define Unsigned(t) ((t + 1.0) / 2.0) // in = [-1,1] out = [ 0,1]\n#define   Signed(t) (2.0 * t - 1.0)   // in = [ 0,1] out = [-1,1]\n\n#define bMix(b,C) ((byte)(((word)(C)*(byte)(b))>>8))                  // b is a byte [0,0xFF]\n#define bRGB(b,R,G,B) Screen_RGB(Screen_bMix(b,R), Screen_bMix(b,G), Screen_bMix(b,B)) // b is a byte parameter [0,0xFF]\n\nconst int BatteryLength    = 25;\nconst int CarBatteryHeight = 15;\nconst vec3 BG=vec3(0,0,0);\n\n/* AA-Cell:\n+-----------+_\n|       |    _|\n+-----------+\nOrigin(0,0) Top Left.\n*/\nvec3 DrawAABattery(in float Charge, in int x, in int y) { // Charge [0,1]\n  if((0>x)||(x>BatteryLength)||(0>y)||(y>7)) return BG;\n  const int   Band[8]=int[](148,195,210,223,125, 65,151,110); // Defines the brightness of one vertical line of the battery   \n  const int  Black[8]=int[]( 72, 85, 79,  0, 31, 49, 75, 78); // Luminance of coloured section; 1 pixel column, top to bottom\n  const int Nipple[8]=int[](  0, 33, 80,230,186, 98, 24,  0); // Luminance of  black   section; 1 pixel column, top to bottom\n  int R=0, G=255, B=0;\n  if((Charge!=0.0) && (Charge<0.25)) Charge=0.25;\n       if(Charge==0.0)        G=0;  // Special case for unknown battery power\n  else if(Charge<0.4) {R=255; G=0;} // Red\n  else if(Charge<0.8)  R=255;       // Yellow\n  Charge*=float(BatteryLength-4);   // Charge [0,Length-4]\n       if(x==0)                 return vec3((y==0)||(y==8) ? 0 : Black[y])/256.0; // Base black\n  else if(float(x)<  Charge)    return vec3(Band[y]*R, Band[y]*G, Band[y]*B)/256.0/256.0; // Coloured section\n  else if(x< (BatteryLength-4)) return vec3(Black[y])/256.0; // Background black\n  else if(x< (BatteryLength-1)) return vec3(Band[y]*0xEE, Band[y]*0xCC, Band[y]*0x66)/256.0/256.0; // Gold Cap 247,238,227\n  else if(x==(BatteryLength-1)) return vec3(Nipple[y])/256.0; // Nipple base\n}\n\n/* C-Cell:\n+-------------+\n|         |   |_\n|         |    _|\n|         |   |\n+-------------+\nOrigin(0,0) Top Left.\n*/\nvec3 DrawCBattery(in float Charge, in int x, in int y) { // Charge [0,1]\n  if((0>x)||(x>BatteryLength)||(0>y)||(y>15)) return BG;\n  const int    Band[16]=int[](133,159,190,195,202,213,223,216,160, 87, 50, 68,143,154,117, 96); // Luminance of coloured section; 1 pixel column, top to bottom\n  const int   Black[16]=int[](104, 41, 46,128, 99, 58,  0,  0,  8, 46, 46, 46, 53, 87,100, 58); // Luminance of  black   section; 1 pixel column, top to bottom\n  const int EndCol1[16]=int[](  0,  0,  0, 40, 50, 97,255,206,163,206,105, 76, 23,  0,  0,  0); // Luminance of nipple base     ; 1 pixel column, top to bottom\n  const int EndCol2[16]=int[](  0,  0,  0,  0,  0,113,255,190,137,206, 64,  0,  0,  0,  0,  0); // Luminance of nipple end      ; 1 pixel column, top to bottom\n  int R=0,G=255,B=0;\n  if((Charge!=0.0) && (Charge<0.25)) Charge=0.25;\n       if(Charge==0.0)        G=0;  // Special case for unknown battery power\n  else if(Charge<0.4) {R=255; G=0;} // Red\n  else if(Charge<0.8)  R=255;       // Yellow\n  Charge*=float(BatteryLength-4);   // Charge [0,Length-4]\n       if(x==0)                 return vec3((y==0)||(y==15) ? 0 : Black[y])/256.0; // Base black\n  else if(float(x)<  Charge)    return vec3(Band[y]*R, Band[y]*G, Band[y]*B)/256.0/256.0; // Coloured section\n  else if(x< (BatteryLength-4)) return vec3(Black[y])/256.0; // Background black\n  else if(x< (BatteryLength-2)) return vec3(Band[y]*0xEE, Band[y]*0xCC, Band[y]*0x66)/256.0/256.0; // Gold Cap 247,238,227\n  else if(x==(BatteryLength-2)) return vec3(EndCol1[y])/256.0; // Nipple base\n  else                          return vec3(EndCol2[y])/256.0; // Nipple end\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  float charge = Unsigned(cos(iTime));\n  vec3 AA = DrawAABattery(charge, int(fragCoord.x) - 20, int(fragCoord.y) - 90);\n  vec3  C = DrawCBattery (charge, int(fragCoord.x) - 20, int(fragCoord.y) - 20);\n  fragColor = vec4(Invert(Invert(AA) * Invert(C)),1.0);\n}","name":"Image","description":"","type":"image"}]}