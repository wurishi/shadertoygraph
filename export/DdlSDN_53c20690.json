{"ver":"0.1","info":{"id":"DdlSDN","date":"1669730644","viewed":91,"name":"Random Maze","username":"greenbird10","description":"Fake WFC","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["wfc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 drawShape(vec2 p, float squre_id, int shape_type, int rot_type)\n{\n   // uv in a square\n   vec2 q = vec2(p.x * SQURE_WIDTH - floor(squre_id/SQURE_WIDTH),\n                 p.y * SQURE_WIDTH - float(int(squre_id) % int(SQURE_WIDTH)));\n   \n   float squre_shape = step(0., p.x) * step(0., p.y) * (1. - step(1., p.x)) * (1. - step(1., p.y));\n   float shape = squre_shape;\n   \n   // rotate uv\n   q -= 0.5;\n   q *= rots[rot_type];\n   q += 0.5;\n   \n   switch (shape_type)\n   {\n   case 0:\n       shape *= step(0., q.y) * (1. - step(0.6, q.x)) * step(0.4, q.x) * (1. - step(0.5, q.y));\n       break;\n   case 1:\n       shape *= step(0.4, q.x) * (1. - step(0.6, q.y)) * (1. - step(0.6, q.x) * (1. - step(0.4, q.y)));\n       break;\n   case 2:\n       shape *= step(0.4, q.x) * (1. - step(0.6, q.x));\n       break;\n   case 3:\n       shape *= step(0.4, q.x) * (1. - step(0.6, q.x)) + step(0.4, q.y) * (1. - step(0.6, q.y)) * step(0.6, q.x);;\n       break;\n   case 4:\n       shape *= max(step(0.4, q.x) * (1. - step(0.6, q.x)), step(0.4, q.y) * (1. - step(0.6, q.y)));\n       break;\n   default:\n       shape *= 0.;\n       break;\n   }\n   \n   return vec3(shape);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col;\n    \n    vec2 p = fragCoord/iResolution.xy;\n    p.y *= iResolution.y / iResolution.x;\n    p.y += 0.1;\n    \n    float squre_id, sample_pos;\n    get_squre_id_2D(p, squre_id, sample_pos);\n    \n    vec4 sampled = texture(iChannel0, vec2(sample_pos, 0.005));\n    int shape_type = int(sampled.x * SHAPE_TYPE_NUM);\n    int rot_type = int(sampled.y * 4.);\n    \n    col = drawShape(p, squre_id, shape_type, rot_type);\n    \n    \n    // --------------- debug ---------------\n    int id_x = int(floor(squre_id/SQURE_WIDTH));\n    int id_y = int(squre_id) % int(SQURE_WIDTH);\n    if(id_x%2==0 && id_y%2 == 0)\n    {\n    \n       vec2 q = vec2(p.x * SQURE_WIDTH - floor(squre_id/SQURE_WIDTH),\n                     p.y * SQURE_WIDTH - float(int(squre_id) % int(SQURE_WIDTH)));\n\n       //col.x = sampled.x;\n       //col.y = col.x;\n       //col.z = col.x;\n       col.x += 0.2;\n    }\n    // --------------- debug ---------------\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 p = fragCoord/iResolution.xy;\n  // p.y\n  // 1 \n  // |\n  // |\n  // 0-----------1 p.x\n  if(p.y > BUFFER_WIDTH) discard;\n  \n  float squre_id, squre_id_grey;\n  get_squre_id_1D(p.x, squre_id, squre_id_grey);\n  \n  float type, rotate;\n  get_type_rotate(squre_id_grey, floor(iTime*0.5), type, rotate);\n  \n  fragColor = vec4(type,rotate,0.,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define BUFFER_WIDTH 0.01\n#define SHAPE_TYPE_NUM 6.\n#define SQURE_WIDTH 20.\n#define SQURE_NUM (SQURE_WIDTH*SQURE_WIDTH)\n#define ROT_NUM 4.\n\n#define PI          3.141592654\n#define TAU         (2.*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\nconst mat2[4] rots = mat2[](ROT(0.0*TAU/4.0),ROT(1.0*TAU/4.0),ROT(2.0*TAU/4.0),ROT(3.0*TAU/4.0)); \n\nconst int[6] shape_edge = int[](\n(1<<3),//1000,\n(1<<3)+1,//1001,\n(1<<3)+(1<<1),//1010,\n(1<<3)+(1<<1)+1,//1011,\n(1<<3)+(1<<2)+(1<<1)+1,//1111,\n0//0000,\n);\n\nconst vec2[16] shape_rot_by_neighbor = vec2[](\nvec2(5./SHAPE_TYPE_NUM, 0./ROT_NUM), //0000\nvec2(0./SHAPE_TYPE_NUM, 1./ROT_NUM), //0001\nvec2(0./SHAPE_TYPE_NUM, 2./ROT_NUM), //0010\nvec2(1./SHAPE_TYPE_NUM, 1./ROT_NUM), //0011\nvec2(0./SHAPE_TYPE_NUM, 3./ROT_NUM), //0100\nvec2(2./SHAPE_TYPE_NUM, 3./ROT_NUM), //0101\nvec2(1./SHAPE_TYPE_NUM, 2./ROT_NUM), //0110\nvec2(3./SHAPE_TYPE_NUM, 1./ROT_NUM), //0111\nvec2(0./SHAPE_TYPE_NUM, 0./ROT_NUM), //1000\nvec2(1./SHAPE_TYPE_NUM, 0./ROT_NUM), //1001\nvec2(2./SHAPE_TYPE_NUM, 0./ROT_NUM), //1010\nvec2(3./SHAPE_TYPE_NUM, 0./ROT_NUM), //1011\nvec2(1./SHAPE_TYPE_NUM, 3./ROT_NUM), //1100\nvec2(3./SHAPE_TYPE_NUM, 3./ROT_NUM), //1101\nvec2(3./SHAPE_TYPE_NUM, 2./ROT_NUM), //1110\nvec2(4./SHAPE_TYPE_NUM, 0./ROT_NUM)  //1111\n);\n\n//From Dave (https://www.shadertoy.com/view/4djSRW)\nvec2 hash(vec2 p)\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(443.897, 441.423, 437.195));\n    p3 += dot(p3.zxy, p3.yxz+19.19);\n    return fract(vec2(p3.x * p3.y, p3.z*p3.x))*2.0 - 1.0;\n}\n\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))*43758.5453123);\n}\n\nvoid get_squre_id_2D(in vec2 p, out float id, out float sample_pos)\n{\n    id = floor(p.x * SQURE_WIDTH)*SQURE_WIDTH + floor(p.y * SQURE_WIDTH);\n    sample_pos = id / SQURE_NUM + 0.5 / SQURE_NUM;\n}\n\nvoid get_squre_id_1D(in float x, out float id, out float id_grey)\n{\n    id = floor(x * SQURE_NUM);\n    id_grey = id / SQURE_NUM;\n}\n\nvoid get_type_rotate(in float squre_id_grey, in float seed, out float type, out float rotate)\n{\n    type = random(vec2(squre_id_grey, 113.777 + seed));\n    type = floor(type * SHAPE_TYPE_NUM) / SHAPE_TYPE_NUM;\n\n    rotate = random(vec2(squre_id_grey, 17.317));\n    rotate = floor(rotate * ROT_NUM) / ROT_NUM;\n}\n\nint get_edge(vec2 sampled)\n{\n    int edge_b = shape_edge[int(sampled.x*SHAPE_TYPE_NUM)];\n    int rot_b = int(sampled.y * ROT_NUM);\n    edge_b = ((edge_b<<rot_b)&15) + ((edge_b>>(int(ROT_NUM)-rot_b)));\n    return edge_b;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n  vec2 p = fragCoord/iResolution.xy;\n  // p.y\n  // 1 \n  // |\n  // |\n  // 0-----------1 p.x\n  if(p.y > BUFFER_WIDTH) discard;\n  \n  vec3 bufferA_col = texture(iChannel0, p).xyz;\n  \n  float squre_id, squre_id_grey;\n  get_squre_id_1D(p.x, squre_id, squre_id_grey);\n  \n  int id_x = int(floor(squre_id/SQURE_WIDTH));\n  int id_y = int(squre_id) % int(SQURE_WIDTH);\n\n  float sample_pos_b = p.x - 1./SQURE_NUM;\n  float sample_pos_t = p.x + 1./SQURE_NUM;\n  float sample_pos_l = p.x - 1./SQURE_NUM*SQURE_WIDTH;\n  float sample_pos_r = p.x + 1./SQURE_NUM*SQURE_WIDTH;\n\n  vec3 sample_b = texture(iChannel0, vec2(sample_pos_b, 0.005)).xyz;\n  vec3 sample_t = texture(iChannel0, vec2(sample_pos_t, 0.005)).xyz;\n  vec3 sample_l = texture(iChannel0, vec2(sample_pos_l, 0.005)).xyz;\n  vec3 sample_r = texture(iChannel0, vec2(sample_pos_r, 0.005)).xyz;\n  \n  int edge_b = (get_edge(sample_b.xy)>>1)&1;\n  int edge_t = (get_edge(sample_t.xy)>>3)&1;\n  int edge_l = (get_edge(sample_l.xy))&1;\n  int edge_r = (get_edge(sample_r.xy)>>2)&1;\n  \n  int edge_all = (edge_b<<3) + (edge_l<<2) + (edge_t<<1) + edge_r;\n  vec2 shape_rot_new = shape_rot_by_neighbor[edge_all]; \n\n  if(id_x%2==0 && id_y%2 == 0)\n  {\n    if(fract(iTime*0.5) < 0.5) discard;\n    else fragColor = vec4(shape_rot_new.x, shape_rot_new.y, 0., 0.);\n  }\n  else\n    fragColor = vec4(bufferA_col, 1.);\n}","name":"Buffer B","description":"","type":"buffer"}]}