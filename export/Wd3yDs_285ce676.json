{"ver":"0.1","info":{"id":"Wd3yDs","date":"1601948224","viewed":59,"name":"fake river, fake mirror","username":"jorge2017a1","description":"fake river, fake mirror","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fakeriver","fakemirror"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a1-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n//operacion de Union\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n\t{ vec3 q = abs(p) - b; return length(max(q,0.0)) +  min(max(q.x,max(q.y,q.z)),0.0) - r; }\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n//-------------------------------------------\n//----------oPeraciones de Repeticion\nvec2 opRep2D( in vec2 p, in vec2 c )\n\t{ vec2 q = mod(p+0.5*c,c)-0.5*c; return  q ;}\nvec3 opRep3D( in vec3 p, in vec3 c )\n\t{ vec3 q = mod(p+0.5*c,c)-0.5*c; return  q ;}\nvec3  opRep(vec3 p, vec3 r)\n   { return mod(p,r)-0.5*r; }\n///------------------------------------\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{\n    float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n///------------------------------------\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\t\n\tvec3 res;\n    vec3 pp;\n    \n     float posx=2.5; \n    \n    res = vec3(9999.0, -1.0,-1.0);\n    //p= rotate_y(p-vec3(0.0,0.0,0.0), radians(45.0));\n\t\n\tfloat planeDist1 = p.y+0.0;  //piso inf\n    float planeDist2 = 40.0-p.y;  //piso sup\n    float planeDist3 = p.x+30.0; //pared izq\n    float planeDist4 = 30.0-p.x;  //pared der\n    float planeDist5 = -p.z+40.0;  //pared frente\n    float planeDist6 = p.z+40.0;  //pared atras\n    \n \n    res =opU3(res, vec3(planeDist1,100.0,-1.0)); //inf\n    res =opU3(res, vec3(planeDist2,100.0,MATERIAL_NO)); \n    res =opU3(res, vec3(planeDist3,100.0,-1.0)); \n    res =opU3(res, vec3(planeDist4,100.0,-1.0)); \n    res =opU3(res, vec3(planeDist5,100.0,-1.0)); \n    res =opU3(res, vec3(planeDist6,100.0,-1.0)); \n    \n    \n  \n    p.y=p.y-5.0;\n    \n    float sdb1= sdBox(p-vec3(0.0,-1.0,0.0), vec3(15.0,1.0,25.0));\n    float sdsp1= sdSphere( p- vec3(0.0,5.0,0.0), 2.0);\n    float sdsp2= sdSphere( p- vec3(-8.0,3.0,0.0), 2.0);\n    \n    \n     posx=-6.5;\n     float posz=10.0;\n     vec3 pp1=p-vec3(posx,0.0,posz);\n     pp1.xz = rotatev2(pp1.xz, iTime);\n     pp1.xy = rotatev2(pp1.xy, iTime);\n     pp1.x=pp1.x+posx;\n     float sdb2=  sdRoundBox( pp1-vec3(posx,8.0,0.0), vec3(2.0,1.0,2.0), 1.0 ); //3 in\n    \n    \n    \n     posx=6.5; \n     pp=p;\n     pp.x=pp.x-posx;\n     pp.xz = rotatev2(pp.xz, iTime);\n     pp.x=pp.x+posx;\n    \n    float sdb3=  sdRoundBox( pp-vec3(posx,3.5,0.0), vec3(2.0,1.0,2.0), 1.0 ); //3 in\n    \n    res =opU3(res, vec3(sdb1,203.0, MATERIAL_NO));   \n    res =opU3(res, vec3(sdb2,3.0, MATERIAL_NO));   \n    \n    res =opU3(res, vec3(sdsp1,2.0,MATERIAL_NO));   \n    res =opU3(res, vec3(sdsp2,201.0,MATERIAL_NO));   \n    res =opU3(res, vec3(sdb3,4.0,MATERIAL_NO));   \n    \n    \n    //res =opU3(res, vec3(1.0,0.0,MATERIAL_NO)); \n    //return (dist, id_color, id_material)\n    return res;\n}\n\n///-----------------------------------------\nvec3 LightShading(vec3 Normal,vec3 toLight,vec3 toEye,vec3 color)\n{\n    vec3 toReflectedLight=reflect(-toLight, Normal);\n    vec3 diffuse = max(0.,dot(Normal,-toLight))*color;\n    //vec3 specular = pow(max(0.,dot(Normal,normalize(-toLight-V))),100.)*vec3(1.,1.,1.); \n    float specularf=max(dot(toReflectedLight, toEye),0.0);\n    specularf=pow(specularf, 100.0);\n    vec3 specular =specularf*vec3(1.0);\n    return diffuse + specular;\n}\n//------------------------------------------------\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n          \n        if(dO>MAX_DIST )\n        {\t\n            mObj.dist = -1.0;\n    \t\tmObj.id_color = -1.0;\n    \t\tmObj.marchCount=marchCount;\n    \t\tmObj.id_material=-1.0;\n            return -1.0;\n        }\n        \n        if (abs(dS.x)<MIN_DIST) \n        { break;  }\n            \n            \n        dO += dS.x;\n        marchCount++;\n     }\n    \n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig)\n{\n    vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n\n\n//----------------------------------------------------\n//-------------------------------\nvec3 getColorTextura( vec3 p, vec3 nor,  int i)\n{\n\tif (i==100 ) { return tex3D(iChannel0, p/32., nor); }\n\tif (i==101 ) { return tex3D(iChannel1, p/32., nor); }\n\tif (i==102 ) { return tex3D(iChannel2, p/32., nor); }\n\tif (i==103 ) { return tex3D(iChannel3, p/32., nor); }\n}\n//-------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{\n    vec3 lightPos = plight_pos;\n    float intensity=1.0;\n\tconst float shininess = 64.0;\n\tvec3 l = normalize( p-lightPos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    float diff = dot(nor, l);\n   \n    \n    vec3 result = LightShading(nor,l,v, colobj)*intensity;\n    \n    \n    if (mObj.blnShadow==true)\n    {\n    \tfloat fhadow=GetShadow(p,plight_pos);\n    \treturn result*fhadow;\n     }\n    else\n    {  return result; }\n}\n\n//----------------------------------------------\n\nvec3 mirrorwavi(vec3 pos, vec3 n,  vec3 rd)\n{\n    float t;\n    TObj Obj;\n    \n    vec3 ro;\n    vec3 col;\n    float l;\n    vec3 colobj;\n    \n    vec3 p=pos;\n    \n    n=normalize(n+0.01*sin(10.0* p+2.0*iTime));\n    \n  \n    p += n * MIN_DIST * 2.;\n\trd = reflect(rd, n);\n   \n\t l = RayMarch(p, rd);\n    Obj=mObj;\n    \n    \n    if (Obj.id_color<100.0)\n\t\t{ colobj=getColor(int( Obj.id_color)); }\n    if ( float( Obj.id_color)>=100.0  && float( Obj.id_color)<=199.0 ) \n \t    { vec3 coltex=getColorTextura(p, n, int( Obj.id_color)); colobj=coltex; \t}\n    if (l>MAX_DIST) return colobj;\n    \n       p = p + rd * l;\n        n = GetNormal(p);\n\n        rd=reflect(rd,n);\n        p = p + rd * EPSILON;\n    \n    \tcol=(Getluz( p,ro,rd, n, vec3(1.0) ,light_pos1))*0.85;\n    \n    \n    return col;\n}\n///-----------------------------------------------\nvec3 mirror(inout vec3 p, inout vec3 n, inout vec3 rd, int opmat) {\n\tp += n * MIN_DIST * 2.;\n\trd = reflect(rd, n);\n\n    TObj Obj;\n\tfloat l = RayMarch(p, rd);\n    Obj=mObj;\n    \n    \n    \n    vec3 colobj;\n    if (Obj.id_color<100.0)\n\t\t{ colobj=getColor(int( Obj.id_color)); }\n    \n    \n    if ( float( Obj.id_color)>=100.0  && float( Obj.id_color)<=199.0 ) \n \t{  vec3 coltex=getColorTextura(p, n, int( Obj.id_color));\n        colobj=coltex;\n\t}\n    \n    if (l>MAX_DIST)\n        return colobj;\n    \n    \n\tp = p + rd * l;\n\tn = GetNormal(p);\n    \n\trd=reflect(rd,n);\n    p = p + rd * EPSILON;\n    \n    vec3 col=(Getluz( p,mObj.ro,rd, n, vec3(1.0) ,light_pos1)*colobj)*0.85;\n    \n    return col;\n}\n\n//------------------------------------------------\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj; \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n    \n    if ( float( id_color)>=100.0  && float( id_color)<=199.0 ) \n \t{  vec3 coltex=getColorTextura(p, n, int( id_color));\n        colobj=coltex;\n\t}\n\t\n      \n    if (id_color==201)\n    \t{ colobj= mirror(p, n, rd, id_color); }\n    \n    if (id_color==203)\n       { colobj=  mirrorwavi(p,n, rd); }\n    \n    if ( float( id_color)>=100.0  && float( id_color)<=199.0 ) \n \t{  vec3 coltex=getColorTextura(p, n, int( id_color));\n        colobj=coltex;\n\t}   \n    \n    \n    return colobj;\n}\n\n\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    float t;\n    t=mod(iTime*1.0,360.0);\n    itime=t;\n\tmObj.blnShadow=false;\n        \n \tlight_pos1= vec3(0.0, 10.0, 0.0 );  light_color1 = vec3( 1.0 );\n \tlight_pos2= vec3( -5.0, 6.0, -5.0 ); light_color2 = vec3( 1.0, 1.0, 1.0 );\n \n    vec3 ro=vec3(0.0,11.0+3.0*sin(t),-25.0);\n   \n    vec3 rd=normalize(vec3(uv,1.0));\n    \n    \n    light_pos1+=ro;\n    light_pos2+=ro;\n    \n    \n    vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd;\n    mObj.ro=ro;\n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor=mObj.normal;\n\n    vec3 colobj;\n    colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n    \n    \n\tfloat dif1=1.0;\n   \tvec3 result;\n    result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n    result/=1.25;\n    col= result*dif1;\n   \n  \t//sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d /(100.0) , 3.5);    \n    col = pow(col, vec3(1.0/2.2));  \n    fragColor = vec4(col,1.0);\n}\n\n\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow; \n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\nfloat saturate(float f)\n{ return clamp(f,0.0,1.0);}\n\n\n///--------------------------------------------\n///----------Orbit Camera\n///---------https://www.shadertoy.com/view/WlVGD1\n///----------Creditos de : spalmer en 2020-01-12\n///--------------------------------------------INICIO\nconst float orbit_scale = 4.0; // of radius of object\nconst float radius = 15.0; // of object resting on ground to examine\n\nvec2 StoQ(vec2 s, vec2 r)\n{\n\treturn (s + s - r) / r.y; \n}\n\nmat3 CameraMatrix(vec3 camFwd)\n{\n    vec3 w = normalize(camFwd)\n       , u = normalize(cross(vec3(0., 1., 0.), w))\n       , v = normalize(cross(w, u));\n    return mat3(u, v, w);\n}\n\n\nvec3 sph2cart(vec3 a) // spherical radians theta, psi, radius -> cartesian\n{\n    float cx = cos(a.x), sx = sin(a.x)\n        , cy = cos(a.y), sy = sin(a.y);\n    return vec3(sx*cy, sy, cx*cy) * a.z;\n}\n\nvec3 OrbitCamera(vec2 angles)\n{ // angles is yaw, pitch in radians\n    angles.x *= 2.; // kludge because Shadertoys clip mouse to window\n    angles.y = clamp(angles.y, -.4, .3);\n    return sph2cart(vec3(angles * PI, 1.));\n} \n\n///--------------------------------------------FIN\n///--------------------------------------------\n\n\n\nvec3 hsv(vec3 c)\n{\n    vec4 k=vec4(1.,2./3.,1./3.,3.);\n    vec3 p=abs(fract(c.xxx+k.xyz)*6.-k.www);\n    return c.z*mix(k.xxx,clamp(p-k.xxx,0.,1.),c.y);\n}\n\n\n\n///Gracias a SHane...16-jun-2020\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n    n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n    n /= dot(n, vec3(1)); \n    vec3 tx = texture(tex, p.yz).xyz;\n    vec3 ty = texture(tex, p.zx).xyz;\n    vec3 tz = texture(tex, p.xy).xyz;\n    return mat3(tx*tx, ty*ty, tz*tz)*n; \n}\n\nfloat random() \n{ return fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453); }\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n\n//----------------------------------------------------\n\n\nvec3 getColor(int i)\n{\nfloat m;\nif (i==-2 ) {return mObj.color; }       \nif (i==0 ) {return vec3(0,0,0)/255.0; }\nif (i==1 ) {return vec3(255.,255.,255.)/255.0; }\nif (i==2 ) {return vec3(255,0,0)/255.0; }\nif (i==3 ) {return vec3(0,255,0)/255.0; }\nif (i==4 ) {return vec3(0,0,255)/255.0; }\nif (i==5 ) {return vec3(255,255,0)/255.0; }\nif (i==6 ) {return vec3(0,255,255)/255.0; }\nif (i==7 ) {return vec3(255,0,255)/255.0; }\nif (i==8 ) {return vec3(192,192,192)/255.0; }\nif (i==9 ) {return vec3(128,128,128)/255.0; }\nif (i==10 ) {return vec3(128,0,0)/255.0; }\nif (i==11 ) {return vec3(128,128,0)/255.0; }\nif (i==12 ) {return vec3(0,128,0)/255.0; }\nif (i==13 ) {return vec3(128,0,128)/255.0; }\nif (i==14 ) {return vec3(0,128,128)/255.0; }\nif (i==15 ) {return vec3(0,0,128)/255.0; }    \nif (i==16 ) {return vec3(255, 204, 188)/255.0; }\nif (i==17 ) {return vec3(0.8, 0.8, 0.8); }\nif (i==18 ) {return vec3(0.5, 0.5, 0.8); }\nif(i== 19 ) {return vec3(1, 0.5, 0);} \nif(i== 20 ) {return vec3(1.0, 1.0, 1.0);} \nif(i== 21 ) {return vec3(247./255., 168./255.,  184./255.);} \nif(i== 22 ) {return vec3(0, 1, 1);} \nif(i== 23 ) {return vec3(85./255., 205./255., 252./255.);} \nif(i== 24 ) {return  vec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 );} \nif(i== 25 ) {return vec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ); } \nif(i== 26 ){ return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ); } \nif(i== 30 ) { return vec3(0.1, 0.5, 1.0);}   \nif(i== 31 ){ return vec3(0.0, 0.6, 0.0);}\n\n    \n\n}\n\n///--------------------------------------------\n\n","name":"Common","description":"","type":"common"}]}