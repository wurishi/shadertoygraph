{"ver":"0.1","info":{"id":"3stSWr","date":"1571781045","viewed":130,"name":"ShaderTober - Treasure","username":"Flopine","description":"A small doodle with inktober's theme \"Treasure\".\nI'm so tired, I don't have any creativity today... ><","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","glow","morphing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n#define ITER 100.\n#define PI 3.141592\n#define dt (iTime*0.3)\n\nvec2 moda (vec2 p, float per)\n{\n    float a = atan(p.y, p.x);\n    float l = length(p);\n    a = mod(a-per/2., per)-per/2.;\n    return vec2(cos(a),sin(a))*l;\n}\n\nmat2 rot (float a)\n{return mat2(cos(a), sin(a), -sin(a), cos(a));}\n\nfloat random (vec2 st)\n{return fract(sin(dot(st.xy, vec2(12.2544, 35.1571)))*2418.56);}\n\nfloat stmin(float a, float b, float k, float n)\n{\n    float st = k/n;\n    float u = b-k;\n    return min(min(a,b), 0.5 *(u+a+abs(mod(u-a+st, 2.*st)-st)));\n}\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r, abs(p.z)-h);}\n\nfloat od (vec3 p, float d)\n{return dot(p,normalize(sign(p)))-d;}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n        length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n        p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat g2 = 0.;\nfloat room (vec3 p)\n{\n    p.y -= 3.;\n    float d = -sdHexPrism(p.xzy, vec2(50.,20.));\n    g2 += 0.1/(0.1+d*d);\n    return d;\n}\n\nfloat column (vec3 p, float width)\n{\n    float c1 = length(p.xz)-width;\n\n    p.xz *= rot(p.y*0.2);\n    p.xz *= rot(iTime);\n    p.xz = moda(p.xz, PI);\n    p.x -= width;\n    float c2 = length(p.xz)-(width*0.5);\n\n    return min(c1, c2);\n}\n\nfloat columns (vec3 p)\n{\n    vec3 pp = p;\n    p.xz = moda(p.xz, PI/3.);\n    p.x -= 60.;\n    float d = column(p,5.);\n\n    return d;\n}\n\nfloat g1 = 0.;\nfloat gem (vec3 p)\n{\n    p.xz *= rot(iTime*5.);\n    float sp = 1.;\n    float steps = 3.;\n    float _od = od(vec3(p.x-sp,p.y,p.z),1.);\n    float _od1 = od(vec3(p.x+sp,p.y,p.z),1.);\n    float _od3 = od(vec3(p.x,p.y+sp,p.z),1.);\n    float _od2 = od(vec3(p.x,p.y-sp,p.z),1.);\n    float d = stmin(_od3,stmin(_od2,stmin(_od,_od1,0.5,steps),0.5,steps),0.5,steps);\n    g1 += 0.1/(0.1+d*d);\n    return d;\n}\n\nfloat pillars (vec3 p)\n{ \n    vec3 pp = p;\n    float c1 = mix(column(p,2.), gem(p), clamp(sin(iTime*0.5)*1.5+0.5,0.,1.));\n    float c = 1e10;\n    float aoffset = 0.;\n    float offset = 0.;\n    for (int i=0; i<2; i++)\n    {\n        p.xz *= rot(PI/(4.+aoffset));\n        p.xz =  moda(p.xz, 2.*PI/5.);\n        p.x -= 16.+offset;\n        c = min(c, column(p,1.5));\n\n        aoffset += 2.;\n        offset ++;\n    }\n    return min(c1,max(-column(pp,8.),c));\n}\n\nfloat SDF (vec3 p)\n{return stmin(room(p),min(columns(p),pillars(p)),3.,4.);}\n\nvec3 palette (float t, vec3 a, vec3 b, vec3 c, vec3 d)\n{return a+b*cos(2.0*PI*(c*t+d));}\n\nvec3 get_cam (vec3 ro, vec3 target, vec2 uv, float fov)\n{\n    vec3 forward = normalize(target - ro);\n    vec3 left = normalize(cross(vec3(0.,1.,0.), forward));\n    vec3 up = normalize(cross (forward, left));\n    return normalize(forward*fov+ left*uv.x + up*uv.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float dither = random(uv); \n\n    vec3 ro = vec3(-21.*cos(-dt),1.,-21.*sin(-dt)),\n        p = ro,\n        tar = vec3(0.),\n        rd = get_cam(ro, tar, uv, 1.),\n        col = vec3(0.);\n\n    float shad = 0.;\n\n    for (float i=0.; i<ITER; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            shad = i/ITER;\n            break;\n        }\n        d *= 0.9+dither*0.1;\n        p += d*rd;\n    }\n\n    col = vec3(shad)*0.1;\n    vec3 g1_anim = mix(vec3(0.),\n                       palette(length(p), vec3(0.5), vec3(0.5),vec3(0.5), vec3(0.8,0.7,0.8)), \n                       clamp(sin(iTime*0.5),0.,1.)\n                      );\n    vec3 g2_anim = mix(vec3(0.),\n                       vec3(0.,length(uv)*0.5,0.7), \n                       clamp(sin(iTime*0.5),0.,1.)\n                      );\n    col += g1*g1_anim*0.3;\n    col += g2*g2_anim*0.1;\n    \n    // Output to screen\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}