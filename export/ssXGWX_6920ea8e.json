{"ver":"0.1","info":{"id":"ssXGWX","date":"1616625010","viewed":67,"name":"Sphere Thingy","username":"inspirnathan","description":"I made this by accident while I was coding a 3D scene and thought it looked cool.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["inspirnathan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\n\nstruct Object {\n    float sd;\n    vec3 col;\n};\n\nObject sdSphere(vec3 p, float r, vec3 offset, vec3 col)\n{\n  float d = length(p - offset) - r;\n  return Object(d, col);\n}\n\nObject minWithColor(Object obj1, Object obj2) {\n  if (obj2.sd < obj1.sd) return obj2;\n  return obj1;\n}\n\nObject sdScene(vec3 p) {\n  Object sphereOne = sdSphere(p, 1., vec3(-2.5, 0, -2), vec3(0.2, .7, .7));\n  Object sphereTwo = sdSphere(p, 1., vec3(2.5, 0, -2), vec3(1, 0.58, 0.29));\n  Object closestObj = minWithColor(sphereOne, sphereTwo);\n  return closestObj;\n}\n\nObject rayMarch(vec3 ro, vec3 rd, float start, float end) {\n  float depth = start;\n  Object closestObj;\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    closestObj = sdScene(p);\n    depth += closestObj.sd;\n    if (closestObj.sd < PRECISION || depth > end) break;\n  }\n  \n  return closestObj;\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.001*sin(iTime);\n    float r = 1.;\n    return normalize(\n      e.xyy * sdScene(p + e.xyy).sd +\n      e.yyx * sdScene(p + e.yyx).sd +\n      e.yxy * sdScene(p + e.yxy).sd +\n      e.xxx * sdScene(p + e.xxx).sd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec3 backgroundColor = vec3(0.835, 1, 1);\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0, 3);\n  vec3 rd = normalize(vec3(uv, -1));\n\n  Object closestObj = rayMarch(ro, rd, MIN_DIST, MAX_DIST);\n\n  if (closestObj.sd > MAX_DIST) {\n    col = backgroundColor;\n  } else {\n    vec3 p = ro + rd * closestObj.sd;\n    vec3 normal = calcNormal(p);\n    vec3 lightPosition = vec3(2.5, 2.5, 7);\n    vec3 lightDirection = normalize(lightPosition - p);\n\n    float dif = clamp(dot(normal, lightDirection), 0.3, 1.);\n\n    col = dif * closestObj.col + backgroundColor * .2;\n  }\n\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}