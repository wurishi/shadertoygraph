{"ver":"0.1","info":{"id":"McySW1","date":"1715106108","viewed":55,"name":"2d Planet","username":"thom7918","description":"Just a simple spinnig 2d planet I bulit of of my attempt at a 2d tornado shader","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","practice","exploration","outerspace"],"hasliked":0,"parentid":"MfGXDz","parentname":"Grayscale Tornado"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\n#define PI 3.14159265359\n\nfloat plot(vec2 st, float pct){\n    return  smoothstep( pct-0.034, pct, st.y);\n            // smoothstep( pct, pct+0.02, st.y);\n}\n\nmat2 rotate2d(float angle){\n    return mat2(cos(angle),-sin(angle),\n                sin(angle),cos(angle));\n}\n\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\n\nfloat circle_sd(vec2 p, vec2 c, float r){\n     float d = length(p - c);\n     return d - r;\n    \n}\n\nfloat hash( float n ) { return fract(sin(n)*43758.5453123); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 color = vec3(0.);\n    vec3 col = vec3(0.2);\n    vec2 p = (2.*gl_FragCoord.xy- iResolution.xy)/iResolution.y;\n    //vec2 aspect = vec2(iResolution.x/iResolution.y, 1.0);\n    \n    float radius = 0.7;\n    \n    \n    vec2 st = p;\n  \n   \n    // rotate space\n    p -= vec2(1.0);\n    p = rotate2d(PI/9.)*p;\n    p += vec2(1.0);\n\n   \n    // attempting to control number of rings on the planet by scaling and reorenting space;\n    float nTiles =25./2.;\n\n\n    float horizontal_movement= 0.1*iTime;\n    p.x -= horizontal_movement*p.x;\n   \n    \n    // sin related variables\n    float amp  = 0.2 ;\n    \n   \n    float freq  = 2.;\n    float vertical_movement = 0.05;\n //   p.x -= horizontal_movement*pzzzz;\n     \n    float tornado =  amp*sin(p.x) ;\n    \n    p.y += (tornado);\n  \n    \n    float id = floor(p.y*nTiles);\n    float lv_y = fract(p.y*nTiles);\n     \n;\n   \n   \n    float s = lv_y ;\n     if(mod(((id)),2.) == 0.){\n     //  color.rb += vec2(0.05);\n       }else{\n       // color.bg += vec2(0.05);\n     }\n    \n    \n    //mix the colors of the bands\n    float curr = (hash(id));;\n    float up = ((hash(id+1.0)));\n    float down = hash((id-1.0));\n    float c_up = mix(curr, up, smoothstep(-0.1, 0.8, s));\n    float c_down = mix(curr, down, smoothstep(-0.1, .9, (1.-s)));\n   \n   s = 2.*s -1.;\n   float c = mix(c_down, c_up, smoothstep(-0.1, 0.9, (1.2 - abs(s))));\n    //color += vec3(0.2*s);\n    color += vec3(c);\n\n\n    \n    \n    //debug\n    if(false){\n\n   if( s < -0.98){\n     color.b = 1.0;\n   }\n   if(s > 0.98){\n     color.r = 1.0;\n  }\n   \n   color= vec3(c);\n  \n  }\n \n  \n // get distance to the circle\n float d = circle_sd(st, vec2(0., 0.), radius);\n color *= vec3(smoothstep(0.1, radius-0.2, -d+0.15))+0.04;\n color *= -sign(d);\n if(sign(d) == 1.){\n    // color += vec3(0.1);\n }\n fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}