{"ver":"0.1","info":{"id":"XltSWf","date":"1482061373","viewed":2082,"name":"404","username":"mhorga","description":"testing light and shadows","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","previewfilepath":"/media/ap/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nstruct Ray { \n\tvec3 origin;\n\tvec3 dir;\n};\n    \nstruct Light {\n    vec3 pos;\n};\n\nstruct Sphere { \n\tvec3 center;\n\tfloat radius;\n};\n\nstruct Plane {\n    float yCoord;\n};\n    \nfloat unionOp(float d0, float d1) {\n    return min(d0, d1);\n}\n\nfloat differenceOp(float d0, float d1) {\n    return max(d0, -d1);\n}\n\nfloat distToSphere(in Ray r, in Sphere s) {\n\tfloat d = distance(r.origin, s.center);\n    return d - s.radius;\n}\n\nfloat distToPlane(in Ray r, in Plane p) {\n\treturn r.origin.y - p.yCoord;\n}\n\nfloat distToScene(in Ray r) {\n    Plane p = Plane(0.);\n    float d2p = distToPlane(r, p);\n    Sphere s1 = Sphere(vec3(2.), 1.9);\n    Sphere s2 = Sphere(vec3(0, 4, 0), 4.0);\n    Sphere s3 = Sphere(vec3(0, 4, 0), 3.9);\n    Ray repeatRay = r;\n    repeatRay.origin = mod(r.origin, 4.0);\n    float d2s1 = distToSphere(repeatRay, s1);\n    float d2s2 = distToSphere(r, s2);\n    float d2s3 = distToSphere(r, s3);\n    float dist = differenceOp(d2s2, d2s3);\n    dist = differenceOp(dist, d2s1);\n    dist = unionOp(d2p, dist);\n    return dist;\n}\n\nfloat lighting(in Ray ray, in vec3 normal, in Light light) {\n    vec3 lightRay = normalize(light.pos - ray.origin);\n    float diffuse = max(0.0, dot(normal, lightRay));\n    vec3 reflectedRay = reflect(ray.dir, normal);\n    float specular = max(0.0, dot(reflectedRay, lightRay));\n    specular = pow(specular, 200.0);\n    return diffuse + specular;\n}\n\nfloat shadow(in Ray ray, in float k, in Light l) {\n    vec3 lightDir = l.pos - ray.origin;\n    float lightDist = length(lightDir);\n    lightDir = normalize(lightDir);\n    float light = 1.0; \n    float eps = 0.1;\n    float distAlongRay = eps * 2.0;\n    for (int i=0; i<100; i++) {\n        Ray lightRay = Ray(ray.origin + lightDir * distAlongRay, lightDir);\n        float dist = distToScene(lightRay);\n        light = min(light, 1. - (eps - dist) / eps);\n        distAlongRay += dist * 0.5;\n        eps += dist * k;\n        if (distAlongRay > lightDist) { break; }\n    }\n    return max(light, 0.0);\n}\n\nvec3 getNormal(in Ray ray) {\n \tvec2 eps = vec2(0.001, 0.0);\n    vec3 n = vec3(distToScene(Ray(ray.origin + eps.xyy, ray.dir)) - \n        \t\t  distToScene(Ray(ray.origin - eps.xyy, ray.dir)),\n        \t\t  distToScene(Ray(ray.origin + eps.yxy, ray.dir)) - \n        \t\t  distToScene(Ray(ray.origin - eps.yxy, ray.dir)),\n        \t\t  distToScene(Ray(ray.origin + eps.yyx, ray.dir)) - \n        \t\t  distToScene(Ray(ray.origin - eps.yyx, ray.dir)));\n    return normalize(n);\n}\n\nvec3 skyColor(in vec3 dir) {\n    return texture(iChannel0, dir).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.y *= iResolution.y / iResolution.x;\n    Ray ray = Ray(vec3(0., 4., -12), normalize(vec3(uv, 1.0)));\n    vec3 col = vec3(1.);\n    bool hit = false;\n    for (int i=0; i<300; i++) {\n        float dist = distToScene(ray); \n    \tif (dist < 0.001) {\n            hit = true;\n            break;\n        }\n        ray.origin += ray.dir * dist;\n    }\n    if (!hit) { \n        col.rgb = skyColor(ray.dir) + 0.3; \n    } else {\n        vec3 n = getNormal(ray);\n        Light light = Light(vec3(sin(iTime) * 10.0, 5., cos(iTime) * 10.0));\n\t\tfloat l = lighting(ray, n, light);\n    \tfloat s = shadow(ray, 0.3, light);\n        col = col * l * s;\n    }\n    Light light2 = Light(vec3(0., 5., -10.));\n\t\n    vec3 lightRay = normalize(light2.pos - ray.origin);\n    float fl = max(0.0, dot(getNormal(ray), lightRay) / 2.);\n    fragColor.rgb = col + fl;\n}\n","name":"Image","description":"","type":"image"}]}