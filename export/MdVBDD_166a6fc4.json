{"ver":"0.1","info":{"id":"MdVBDD","date":"1528944284","viewed":447,"name":"李明杰VIRTUALDJ2","username":"leneer","description":"李明杰VIRTUALDJ2","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["virtualdj"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://www.shadertoy.com/view/XlKSzw//\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n    vec2 uv = 0.5 * (2. * fragCoord.xy - iResolution.xy) / iResolution.y;\n    \n    // warp uv pre-perspective shift\n    float displaceAmp = 0.1;\n    float displaceFreq = 2.5;\n    uv += vec2(displaceAmp * sin(time + uv.x * displaceFreq));\n    \n    // 3d params\n    // 3d plane technique from: http://glslsandbox.com/e#37557.0 \n    float horizon = 0.2 * cos(time); \n    float fov = 0.35 + 0.15 * sin(time); \n\tfloat scaling = 0.3;\n    // create a 2nd uv with warped perspective\n\tvec3 p = vec3(uv.x, fov, uv.y - horizon);      \n\tvec2 s = vec2(p.x/p.z, p.y/p.z) * scaling;\n    \n    // wobble the perspective-warped uv \n    float oscFreq = 12.;\n    float oscAmp = 0.04;\n    s += vec2(oscAmp * sin(time + s.x * oscFreq));\n\t\n\t// normal drawing here\n    // lines/lattice\n    float color = max(\n        smoothstep(0.2, 0.8, 0.94 - pow(sin(s.y * 100.), 0.3)), \n        smoothstep(0.2, 0.8, 0.94 - pow(sin(s.x * 100.), 0.3))\n    );\n\n\t// 线条深度范围\n\tcolor *= p.z * p.z * 20.0;\n    // 线条颜色\n\tfragColor = vec4( vec3(color, 0, 0), 1 );\n}","name":"Image","description":"","type":"image"}]}