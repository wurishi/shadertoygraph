{"ver":"0.1","info":{"id":"slsBRN","date":"1650656256","viewed":48,"name":"Sphere Test Shader 1","username":"HSundar3467","description":"Its two spheres. ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\n\nvec4 sdSphere(vec3 p, float r, vec3 offset, vec3 col )\n{\n  float d = length(p - offset) - r;\n  return vec4(d, col);\n}\n\nvec4 sdFloor(vec3 p, vec3 col) {\n  float d = p.y + 1.;\n  return vec4(d, col);\n}\n\nvec4 minWithColor(vec4 obj1, vec4 obj2) {\n  if (obj2.x < obj1.x) return obj2;\n  return obj1;\n}\n\nvec4 sdScene(vec3 p) {\n  vec4 sphereLeft = sdSphere(p, 1., vec3(-2.5, 0, -1), vec3(0, .8, .8));\n  vec4 sphereRight = sdSphere(p, 1., vec3(2.5, 0, -2), vec3(1, 0.58, 0.29));\n  vec4 co = minWithColor(sphereLeft, sphereRight); // co = closest object containing \"signed distance\" and color\n  \n  vec3 floorColor = vec3(1. + 0.7*mod(floor(p.x) + floor(p.z), 2.0));\n  co = minWithColor(co, sdFloor(p, floorColor));\n  return co;\n}\n\nvec4 rayMarch(vec3 ro, vec3 rd, float start, float end) {\n  float depth = start;\n  vec4 co; // closest object\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = sdScene(p);\n    depth += co.x;\n    if (co.x < PRECISION || depth > end) break;\n  }\n  \n  vec3 col = vec3(co.yzw);\n\n  return vec4(depth, col);\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n    return normalize(\n      e.xyy * sdScene(p + e.xyy).x +\n      e.yyx * sdScene(p + e.yyx).x +\n      e.yxy * sdScene(p + e.yxy).x +\n      e.xxx * sdScene(p + e.xxx).x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec3 backgroundColor = vec3(0.835, 1, 1);\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0, 3); // ray origin that represents camera position\n  vec3 rd = normalize(vec3(uv, -1)); // ray direction\n\n  vec4 co = rayMarch(ro, rd, MIN_DIST, MAX_DIST); // distance to sphere\n\n  if (co.x > MAX_DIST) {\n    col = backgroundColor; // ray didn't hit anything\n  } else {\n    vec3 p = ro + rd * co.x; // point on sphere we discovered from ray marching\n    vec3 normal = calcNormal(p);\n    vec3 lightPosition = vec3(2., 2., 4.);//change where the lightsource hits \n    vec3 lightDirection = normalize(lightPosition - p);\n\n    // Calculate diffuse reflection by taking the dot product of \n    // the normal and the light direction.\n    float dif = clamp(dot(normal, lightDirection), 0.3, 1.);\n\n    col = dif * co.yzw + backgroundColor * .2;//change color in this last vec3 multiplied here \n    //(0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)));\n  }\n\n  // Output to screen\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}