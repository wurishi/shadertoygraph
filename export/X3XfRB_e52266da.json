{"ver":"0.1","info":{"id":"X3XfRB","date":"1728508915","viewed":15,"name":"Screen Waifu","username":"hectobreak","description":"Done in an afternoon","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["animation","character"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 green = vec3(0.1, 0.7, 0.1);\n\nvec2 CRT_distortion(vec2 coord, float CRT_exponent){\n    float R = max(abs(coord.x - 0.5), abs(coord.y - 0.5));\n    float s = 1.0 - R / pow(pow(abs(coord.x - 0.5), CRT_exponent) + pow(abs(coord.y - 0.5), CRT_exponent), 1.0 / CRT_exponent);\n    return coord + 4.0 * s * R * R * (vec2(0.5, 0.5) - coord);\n}\n\nvec2 CRT_distortion_inverse(vec2 coord, float CRT_exponent){\n    float R = max(abs(coord.x - 0.5), abs(coord.y - 0.5));\n    float s = 1.0 - R / pow(pow(abs(coord.x - 0.5), CRT_exponent) + pow(abs(coord.y - 0.5), CRT_exponent), 1.0 / CRT_exponent);\n    return (coord - 2.0 * s * R * R * vec2(1.0, 1.0))/(1.0 - 4.0*s*R*R);\n}\n\nfloat dot2(vec2 v){\n    return dot(v, v);\n}\n\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n\n\n\nfloat sdSegment( vec2 p, vec2 a, vec2 b ){\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdStar5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n\nvec3 eyebrow1(vec2 uv, vec3 base_color){\n    if(sdBezier(uv, vec2(0.1, 0.7), vec2(0.4,0.7), vec2(0.45,0.8)) < 0.01) \n        return vec3(0.1, 0.7, 0.1);\n    return base_color;\n}\n\nvec3 eyebrow3(vec2 uv, vec3 base_color){\n    if(sdBezier(uv, vec2(0.1, 0.7), vec2(0.2,0.8), vec2(0.45,0.8)) < 0.01) \n        return vec3(0.1, 0.7, 0.1);\n    return base_color;\n}\n\nvec3 mouth1(vec2 uv, vec3 base_color){\n    if(sdBezier(uv, vec2(0.3, 0.3), vec2(0.5,0.2), vec2(0.7,0.3)) < 0.1 &&\n       sdBezier(uv, vec2(0.3, 0.3), vec2(0.5,0.2), vec2(0.7,0.3)) > 0.08 \n       ) \n        return vec3(0.1, 0.7, 0.1);\n    if(sdSegment(uv, vec2(0.36, 0.36), vec2(0.3, 0.2)) < 0.01)\n        return vec3(0.1, 0.7, 0.1);\n    if(sdSegment(uv, vec2(0.5, 0.34), vec2(0.5, 0.17)) < 0.01)\n        return vec3(0.1, 0.7, 0.1);\n    if(sdSegment(uv, vec2(0.64, 0.36), vec2(0.7, 0.2)) < 0.01)\n        return vec3(0.1, 0.7, 0.1);\n    return base_color;\n}\n\nvec3 mouth6(vec2 uv, vec3 base_color){\n    if(sdBezier(uv, vec2(0.3, 0.3), vec2(0.5,0.2), vec2(0.7,0.3)) < 0.01) \n        return vec3(0.1, 0.7, 0.1);\n    float tdist = sdBezier(uv, vec2(0.5, 0.45), vec2(0.6,0.2501), vec2(0.7,0.15));\n    if(tdist < 0.1 && tdist > 0.08 &&\n       (uv.x - 0.5) * (uv.x - 0.5) + 0.25 - uv.y > 0.0 ) \n        return vec3(0.1, 0.7, 0.1);\n    if(tdist < 0.01 &&\n       (uv.x - 0.5) * (uv.x - 0.5) + 0.25 - uv.y > 0.0 ) return vec3(0.1, 0.7, 0.1);\n    return base_color;\n}\n\nvec3 eye1(vec2 uv, vec2 lookat, vec3 base_color){\n    float eye_size = 0.17;\n    float thickness = 0.02;\n    float d_eye = eye_size - thickness;\n    float cheek_size = eye_size * 2.2;\n    float d_cheek = cheek_size - thickness;\n    float pupil_size = 0.05;\n    float iris_size = 0.10;\n    float d_iris = iris_size + thickness;\n    vec2 eye_pos = vec2(0.3, 0.55);\n    vec2 cheek_pos = vec2(0.3, 0.15);\n    vec2 eye = uv - lookat;\n    vec2 pupil = vec2(1.5, 1.0);\n    vec2 pupil_pos = vec2(0.325, 0.625);\n    \n    // Left eye\n    if(distance(uv, eye_pos) < eye_size && \n       distance(uv, eye_pos) > d_eye && \n       distance(uv, cheek_pos) > cheek_size){\n        return green;\n    }\n    if(distance(uv, cheek_pos) < cheek_size && \n       distance(uv, cheek_pos) > d_cheek && \n       distance(uv, eye_pos) < eye_size){\n        return green;\n    }\n    if(distance(eye * pupil, pupil_pos * pupil) < pupil_size &&\n       distance(uv, eye_pos) < eye_size && \n       distance(uv, cheek_pos) > cheek_size){\n        return green;\n    }\n    if(distance(eye * pupil, pupil_pos * pupil) < iris_size && \n       distance(uv, eye_pos) < eye_size && \n       distance(uv, cheek_pos) > cheek_size){\n        return mix(green, vec3(0.1, 0.5, 0.1), smoothstep(0.0, 0.1, distance(eye, vec2(0.35, 0.6))));\n    }\n    if(distance(eye * pupil, pupil_pos * pupil) < d_iris && \n       distance(uv, eye_pos) < eye_size && \n       distance(uv, cheek_pos) > cheek_size){\n        return green;\n    }\n    if(sdSegment(uv, vec2(0.08, 0.45), vec2(0.142, 0.48)) < 0.01){\n        return green;\n    }\n    if(sdSegment(uv, vec2(0.06, 0.54), vec2(0.13, 0.54)) < 0.01){\n        return green;\n    }\n    if(sdSegment(uv, vec2(0.08, 0.64), vec2(0.15, 0.62)) < 0.01){\n        return green;\n    }\n    \n    return base_color;\n}\n\nvec3 eye2(vec2 uv, vec3 base_color){\n    if(sdSegment(uv, vec2(0.2, 0.4), vec2(0.4, 0.5)) < 0.01){\n        return green;\n    }\n    if(sdSegment(uv, vec2(0.2, 0.6), vec2(0.4, 0.5)) < 0.01){\n        return green;\n    }\n    if(sdSegment(uv, vec2(0.2, 0.7), vec2(0.4, 0.6)) < 0.01){\n        return green;\n    }\n    return base_color;\n}\n\nvec3 eye3(vec2 uv, vec2 lookat, vec3 base_color){\n    float eye_size = 0.17;\n    float thickness = 0.02;\n    float d_eye = eye_size - thickness;\n    float pupil_size = 0.05;\n    float iris_size = 0.10;\n    float d_iris = iris_size + thickness;\n    vec2 eye_pos = vec2(0.3, 0.55);\n    vec2 eye = uv - lookat;\n    vec2 pupil = vec2(1.5, 1.0);\n    vec2 pupil_pos = vec2(0.325, 0.625);\n    \n    // Left eye\n    if(distance(uv, eye_pos) < eye_size && \n       distance(uv, eye_pos) > d_eye){\n        return green;\n    }\n    if(distance(eye * pupil, pupil_pos * pupil) < pupil_size &&\n       distance(uv, eye_pos) < eye_size){\n        return green;\n    }\n    if(distance(eye * pupil, pupil_pos * pupil) < iris_size && \n       distance(uv, eye_pos) < eye_size){\n        return mix(green, vec3(0.1, 0.5, 0.1), smoothstep(0.0, 0.1, distance(eye, vec2(0.35, 0.6))));\n    }\n    if(distance(eye * pupil, pupil_pos * pupil) < d_iris && \n       distance(uv, eye_pos) < eye_size){\n        return green;\n    }\n    if(sdSegment(uv, vec2(0.08, 0.45), vec2(0.142, 0.48)) < 0.01){\n        return green;\n    }\n    if(sdSegment(uv, vec2(0.06, 0.54), vec2(0.13, 0.54)) < 0.01){\n        return green;\n    }\n    if(sdSegment(uv, vec2(0.08, 0.64), vec2(0.15, 0.62)) < 0.01){\n        return green;\n    }\n    \n    return base_color;\n}\n\nvec2 rotate(vec2 uv, float angle){\n    float x = uv.x * cos(angle) + uv.y * sin(angle);\n    float y = - uv.x * sin(angle) + uv.y * cos(angle);\n    return vec2(x, y);\n}\n\nvec2 rotate_uvs(vec2 uv, float angle){\n    return rotate(uv - vec2(0.5, 0.5), angle) + vec2(0.5, 0.5);\n}\n\nvec2 scale_uvs(vec2 uv, float scale){\n    return (uv - vec2(0.5, 0.5)) / scale + vec2(0.5, 0.5);\n}\n\nvec3 frame1(vec2 uv, vec2 lookat, vec3 base_color){\n    vec3 col = base_color;\n    col = eye1(uv, lookat, col);\n    col = eye1(vec2(1.0 - uv.x, uv.y), vec2(-lookat.x, lookat.y), col);\n    \n    col = eyebrow1(uv, col);\n    col = eyebrow1(vec2(1.0 - uv.x, uv.y), col);\n    \n    col = mouth1(uv, col);\n    return col;\n}\n\nvec3 frame2(vec2 uv, vec2 lookat, vec3 base_color){\n    vec3 col = base_color;\n    col = eye2(uv, col);\n    col = eye2(vec2(1.0 - uv.x, uv.y), col);\n    if(distance(uv, vec2(0.5, 0.3)) < 0.05 && distance(uv, vec2(0.5, 0.3)) > 0.03){\n        col = green;\n    }\n    return col;\n}\n\nvec3 frame3(vec2 uv, vec2 lookat, vec3 base_color){\n    uv = rotate_uvs(uv, 0.4);\n    vec3 col = base_color;\n    col = eye3(uv, lookat, col);\n    col = eye3(vec2(1.0 - uv.x, uv.y), vec2(-lookat.x, lookat.y), col);\n    \n    col = eyebrow3(uv, col);\n    col = eyebrow3(vec2(1.0 - uv.x, uv.y), col);\n    \n    if(distance(uv, vec2(0.5, 0.3)) < 0.1 && distance(uv, vec2(0.5, 0.3)) > 0.08){\n        col = green;\n    }\n    return col;\n}\n\nvec3 frame4(vec2 uv, vec2 lookat, vec3 base_color){\n    uv = rotate_uvs(uv, -0.4);\n    uv = scale_uvs(uv, 1.4);\n    vec3 col = base_color;\n    col = eye3(uv, lookat, col);\n    col = eye3(vec2(1.0 - uv.x, uv.y), vec2(-lookat.x, lookat.y), col);\n    if(distance(uv, vec2(0.5, 0.3)) < 0.1 && distance(uv, vec2(0.5, 0.3)) > 0.08){\n        col = green;\n    }\n    return col;\n}\n\nvec3 frame5(vec2 uv, vec2 lookat, vec3 base_color){\n    vec2 blush = vec2(0.23, 0.43);\n    vec2 bscale = vec2(0.5, 1);\n    float blush_rad = 0.05;\n    \n    vec2 b1 = blush - vec2(1.0, 0.0) * blush_rad;\n    vec2 b2 = blush + vec2(1.0, 0.0) * blush_rad;\n    \n    vec3 col = base_color;\n    col = mouth1(uv, col);\n    if(sdBezier(uv, vec2(0.3, 0.3), vec2(0.5,0.2), vec2(0.7,0.3)) > 0.1 &&\n       sdSegment(uv, b1, b2) < 0.08 ) \n        col = mix(green, col, smoothstep(0.0, 0.08, distance(uv * bscale, blush * bscale)));\n    if(sdBezier(uv, vec2(0.3, 0.3), vec2(0.5,0.2), vec2(0.7,0.3)) > 0.1 &&\n       sdSegment(uv, vec2(1.0 - b1.x, b1.y), vec2(1.0 - b2.x, b2.y)) < 0.08 ) \n        col = mix(green, col, smoothstep(0.0, 0.08, distance(uv * bscale, (vec2(1.0 - blush.x, blush.y)) * bscale)));\n    uv -= vec2(0.0, 0.05);\n    col = eye2(uv, col);\n    col = eye2(vec2(1.0 - uv.x, uv.y), col);\n    return col;\n}\n\n\nvec3 frame6(vec2 uv, vec2 lookat, vec3 base_color){\n    uv = rotate_uvs(uv, 0.2);\n    vec3 col = base_color;\n    col = eye1(vec2(1.0 - uv.x, uv.y), vec2(-lookat.x, lookat.y), col);\n    col = eyebrow3(vec2(1.0 - uv.x, uv.y), col);\n    uv -= vec2(0.0, 0.05);\n    col = eye2(uv, col);\n    col = mouth6(uv, col);\n    \n    return col;\n}\n\nvec2 squish_and_stretch(vec2 uv, float time, float ini_time){\n    float len = 0.2;\n    float intensity = 0.2;\n    if(time - ini_time > len) return uv;\n    float dtime = time - ini_time;\n    float stretch = intensity * (dtime - len) * (dtime - len) / (len * len) + 1.0;\n    float squish = 1.0 / (stretch);\n    return (uv - vec2(0.5, 0.5)) * vec2(squish, stretch) + vec2(0.5, 0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - vec2(\n        max(0.0, iResolution.x - iResolution.y), \n        max(0.0, iResolution.y - iResolution.x))/2.0)/min(iResolution.x, iResolution.y);\n    \n    uv = CRT_distortion_inverse(uv, 4.0);\n    if(uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0){\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n    } else {\n        // Breathe\n        uv = uv + 0.02 * vec2(0.0, 1.0) * sin(iTime*2.2);\n        \n        // Find proper frame\n        float animation_length = 7.0;\n        float frame_time = mod(iTime, animation_length);\n        vec3 col = mix(vec3(0.01, 0.3, 0.01), vec3(0.1, 0.5, .1), uv.y);\n        if(frame_time < 2.0){ \n            uv = squish_and_stretch(uv, frame_time, 0.0);\n            col = frame1(uv, vec2(0.0, 0.01) * sin(iTime *2.0), col);\n        } else if(frame_time < 2.1){\n            uv = squish_and_stretch(uv, frame_time, 2.0);\n            col = frame2(uv, vec2(0.0, 0.01) * sin(iTime *2.0), col);\n        } else if(frame_time < 2.7){ \n            uv = squish_and_stretch(uv, frame_time, 2.1);\n            col = frame3(uv, vec2(0.0, 0.01) * sin(iTime *2.0) + vec2(-0.1, 0.0), col);\n        } else if(frame_time < 3.5){ \n            uv = squish_and_stretch(uv, frame_time, 2.7);\n            col = frame4(uv, vec2(0.0, 0.01) * sin(iTime *2.0) + vec2(0.0, -0.1), col);\n        } else if(frame_time < 3.6){\n            uv = squish_and_stretch(uv, frame_time, 3.5);\n            uv += vec2(0.0, 0.1);\n            col = frame2(uv, vec2(0.0, 0.01) * sin(iTime *2.0), col);\n        } else if(frame_time < 5.0){\n            uv = squish_and_stretch(uv, frame_time, 3.6);\n            uv += vec2(0.0, 0.02 * (2.0 / (1.0 + exp(-10.0 * sin(iTime * 15.0))) - 1.0));\n            col = frame5(uv, vec2(0.0, 0.01) * sin(iTime *2.0), col);\n        } else if(frame_time < 5.1){\n            uv = squish_and_stretch(uv, frame_time, 5.0);\n            uv += vec2(0.0, 0.1);\n            col = frame2(uv, vec2(0.0, 0.01) * sin(iTime *2.0), col);\n        } else if(frame_time < 7.0){\n            uv = squish_and_stretch(uv, frame_time, 5.1);\n            col = frame6(uv, vec2(0.0, 0.01) * sin(iTime *2.0), col);\n            \n            float dif = frame_time - 5.1;\n            vec2 star_pos = vec2(0.2, 0.5) + vec2(-0.2 * sin(dif * 5.0), 0.4 * dif * dif);\n            if(sdStar5(rotate(uv - star_pos, 4.0 * sqrt(dif)), 0.1, 0.5) < 0.0) \n                col = green;\n        }\n        \n        uv = (fragCoord - vec2(\n        max(0.0, iResolution.x - iResolution.y), \n        max(0.0, iResolution.y - iResolution.x))/2.0)/min(iResolution.x, iResolution.y);\n        \n        float f1 = 1.5 / (((uv.x - 0.4)*(uv.x - 0.4) + (uv.y - 0.6)*(uv.y - 0.6)));\n        float f2 = 1.0 / (((uv.x - 0.5)*(uv.x - 0.5) + (uv.y - 0.5)*(uv.y - 0.5)));\n        float f = 1.0 / (f1 - f2 - 6.0);\n        col += max(vec3(1, 1, 1) * (0.45 - distance(uv, vec2(0.2, 0.8))), vec3(-0.2, -0.2, -0.2));\n        \n        // Output to screen\n        fragColor = vec4(col,1.0);\n        \n        float CRTf = 0.9 - 0.1 * step(15.0, mod(fragCoord.y + iTime * 10.0, 30.0));\n        fragColor *= vec4(CRTf, CRTf, CRTf, 1.0);\n    }\n    \n}","name":"Image","description":"","type":"image"}]}