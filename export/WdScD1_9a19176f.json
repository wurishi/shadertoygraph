{"ver":"0.1","info":{"id":"WdScD1","date":"1586514486","viewed":397,"name":"Invasion Of The Covoids","username":"dr2","description":"Close encounters of a different kind","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["space","symmetry","flight","virus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Invasion Of The Covoids\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsAnDf (vec3 p, float r, float w, float h);\nvec3 SphFib (vec3 v, float n);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 VToRMat (vec3 v, float a);\nvec3 RotToDir (vec3 v1, vec3 v2, vec3 p);\nvec2 Rot2D (vec2 q, float a);\nmat3 StdVuMat (float el, float az);\nfloat Hashfv3 (vec3 p);\nvec4 Hashv4v3 (vec3 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nmat3 flMat, obMat;\nvec4 obRnd;\nvec3 trkAx, trkAy, trkFx, trkFy, sunDir, flPos, cId, qHit, obDisp, crMid;\nvec2 scrMid;\nfloat bGrid, tCur, dstFar, spd, obOcc, nSpk, obSzFac, rScrn;\nint idObj;\nconst int idCage = 1, idScrn = 2, idVbal = 3, idVspk = 4, idVcap = 5;\nconst float pi = 3.14159;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nvec3 TrackPath (float t)\n{\n  return vec3 (dot (trkAx, cos (trkFx * t)), dot (trkAy, cos (trkFy * t)), t);\n}\n\nvec3 TrackVel (float t)\n{\n  return vec3 (- dot (trkFx * trkAx, sin (trkFx * t)),\n     - dot (trkFy * trkAy, sin (trkFy * t)), 1.);\n}\n\nvec3 TrackAcc (float t)\n{\n  return vec3 (- dot (trkFx * trkFx * trkAx, cos (trkFx * t)),\n     - dot (trkFy * trkFy * trkAy, cos (trkFy * t)), 0.);\n}\n\nvoid ObjState ()\n{\n  obRnd = Hashv4v3 (cId + 17.11);\n  obDisp = 0.5 * bGrid * (obRnd.xyz - 0.5);\n  obMat = VToRMat (normalize (obRnd.xyz - 0.5), (0.2 + 0.8 * obRnd.w) * tCur);\n  nSpk = floor (100. + 40. * obRnd.y);\n  obSzFac = 0.4 + 0.2 * obRnd.y;\n}\n\nfloat VbalDf (vec3 p, float dMin)\n{\n  vec3 q, qn, uf;\n  float d, rad, len, h;\n  dMin /= 0.6 * obSzFac;\n  q = p / obSzFac;\n  rad = 1.;\n  qn = normalize (q);\n  uf = SphFib (qn, nSpk);\n  d = PrSphDf (q, rad * (1. - 0.05 * smoothstep (0.1, 0.2, length (qn - uf))));\n  DMIN (idVbal);\n  q = RotToDir (uf, vec3 (0., 0., 1.), q - uf);\n  h = Hashfv3 (41. * uf);\n  len = 0.3 * (1. - 0.2 * h);\n  q.z -= len;\n  d = PrCylDf (q, 0.04 * (1. - 0.1 * q.z / len), len);\n  DMIN (idVspk);\n  q.z -= len + 0.05;\n  q.xy = Rot2D (q.xy, pi * h / 3.);\n  q.xy = Rot2D (q.xy, 2. * pi * floor (3. * atan (q.y, - q.x) / (2. * pi) + 0.5) / 3.);\n  q.x += 0.08;\n  d = PrSphDf (q * vec3 (1., 1., 1.3), 0.1);\n  DMIN (idVcap);\n  return 0.6 * obSzFac * dMin;\n}\n\nfloat ObjCDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  q = p - obDisp;\n  d = PrSphDf (q, 1.7 * obSzFac);\n  if (d < 0.05) dMin = VbalDf (obMat * q, dMin);\n  else dMin = min (dMin, d);\n  return dMin;\n}\n\nfloat ObjCRay (vec3 ro, vec3 rd)\n{\n  vec3 cIdP, p, s, rdi;\n  float dHit, d, eps;\n  eps = 0.0005;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  rdi = 1. / rd;\n  cIdP = vec3 (-999.);\n  dHit = eps;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + dHit * rd;\n    cId = floor (p / bGrid);\n    if (cId != cIdP) {\n      ObjState ();\n      cIdP = cId;\n    }\n    s = (bGrid * (cId + step (0., rd)) - p) * rdi;\n    d = abs (Minv3 (s)) + eps;\n    if (obRnd.x < obOcc && length (cId.xy - floor (TrackPath (bGrid * cId.z).xy / bGrid)) >= 1.)\n       d = min (d, ObjCDf (p - (bGrid * (cId + 0.5))));\n    dHit += d;\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjCNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0005, -0.0005);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjCDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, len, rad, s, b;\n  dMin = dstFar;\n  len = 1.;\n  rad = 0.8;\n  p = flMat * (p - flPos);\n  q = p;\n  q.yz -= vec2 (-0.1 * rad, 0.3 * len);\n  b = length (q.xy);\n  s = (q.z > len) ? 16. * (atan (q.z - len, b) / (2. * pi) + 0.5) : 2. * q.z / len;\n  s = min (abs (fract (s) - 0.5), abs (fract (12. * atan (q.y, - q.x) / (2. * pi)) - 0.5));\n  d = 0.7 * max (max (PrCapsAnDf (q, rad, 0.01 * (1.5 - clamp (20. * s, 0.5, 1.75)), len),\n     -1.25 * len - 0.03 - q.z), 0.2 * rad - b);\n  DMINQ (idCage);\n  q = p;\n  q.yz -= vec2 (-0.17, 0.5);\n  scrMid = q.xy;\n  q.xy = Rot2D (q.xy, pi / 4.);\n  q.xy -= 1.02 * rScrn * sign (q.xy);\n  d = PrCylDf (q, rScrn, 0.003);\n  DMINQ (idScrn);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 80; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0005, -0.0005);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 StarPat (vec3 rd, float scl)\n{\n  vec3 tm, qn, u;\n  vec2 q;\n  float f;\n  tm = -1. / max (abs (rd), 0.0001);\n  qn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  u = Maxv3 (tm) * rd;\n  q = atan (vec2 (dot (u.zxy, qn), dot (u.yzx, qn)), vec2 (1.)) / pi;\n  f = 0.57 * (Fbm2 (11. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 131.13 * scl * q) +\n      Fbm2 (13. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 171.13 * scl * q.yx));\n  return 5. * vec3 (1., 1., 0.8) * pow (f, 16.);\n}\n\nvec3 ErCol (vec3 rd)\n{\n  vec3 erDir, col, vn;\n  float erRad, bs, ts;\n  erDir = normalize (vec3 (0.02, -0.04, 1.));\n  erRad = 0.04;\n  col = vec3 (0.);\n  bs = dot (rd, erDir);\n  ts = bs * bs - 1. + erRad * erRad;\n  if (ts > 0.) {\n    ts = bs - sqrt (ts);\n    if (ts > 0.) {\n      vn = normalize ((ts * rd - erDir) / erRad);\n      col = mix (vec3 (0.3, 0.4, 0.8), vec3 (1., 1., 0.95),\n         smoothstep (0.2, 0.8, Fbm2 (6. * vn.xy + 7.1))) * (0.5 + 0.5 * max (- dot (vn, rd), 0.)) *\n         (0.2 + 0.8 * max (dot (vn, sunDir), 0.));\n    }\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  vec2 vf;\n  float dstObj, nDotS, t;\n  bool isScrn, showBg;\n  rScrn = 0.03;\n  isScrn = false;\n  showBg = true;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == idCage) {\n      col = mix (vec3 (0.45, 0.5, 0.5), vec3 (0.5, 0.5, 0.6), smoothstep (0.4, 0.6,\n         Fbm3 (64. * qHit)));\n      vn = VaryNf (128. * qHit, vn, 0.2);\n    } else if (idObj == idScrn) {\n      if (length (qHit.xy) < 0.95 * rScrn) {\n        qHit.xy = Rot2D (qHit.xy, - pi / 4.);\n        if (min (abs (qHit.x), abs (qHit.y)) > 0.03 * rScrn) {\n          ro = flPos;\n          rd = normalize (vec3 (qHit.xy, - rScrn)).xzy;\n          if (abs (scrMid.y) > abs (scrMid.x)) rd.yz = Rot2D (rd.yz, -0.25 * pi * sign (scrMid.y));\n          else rd.xy = Rot2D (rd.xy, 0.25 * pi * sign (scrMid.x));\n          ro += 0.5 * rd;\n          isScrn = true;\n        } else col = vec3 (0.7, 0.7, 0.8) * (0.7 + 0.3 * sin (4096. * length (qHit.xy)));\n      } else {\n        col = vec3 (0.5, 0.5, 0.6) * (0.7 + 0.3 * sin (256. * atan (qHit.y, qHit.x)));\n      }\n    }\n    if (! isScrn) {\n      nDotS = max (dot (vn, sunDir), 0.);\n      nDotS *= nDotS;\n      col = col * (0.3 + 0.3 * max (- dot (vn, sunDir), 0.) + 0.7 * nDotS * nDotS);\n      showBg = false;\n    }\n  }\n  if (dstObj >= dstFar || isScrn) {\n    dstObj = ObjCRay (ro, rd);\n    if (dstObj < dstFar) {\n      ro += dstObj * rd;\n      cId = floor (ro / bGrid);\n      ObjState ();\n      ro -= bGrid * (cId + 0.5);\n      vn = ObjCNf (ro);\n      vf = vec2 (0.);\n      if (idObj == idVbal) {\n        col4 = vec4 (0.5, 0.4, 0.2, 0.1);\n        vf = vec2 (8., 8.);\n      } else if (idObj == idVspk) {\n        col4 = vec4 (0.5, 0.6, 0.5, 0.4);\n        vf = vec2 (64., 0.1);\n      } else if (idObj == idVcap) {\n        col4 = vec4 (1., 0.2, 0.2, 0.3);\n        vf = vec2 (64., 2.);\n      }\n      if (! isScrn) {\n        t = 0.3 * tCur + obRnd.z;\n        if (idObj == idVbal) col4.rgb = mix (col4.rgb, vec3 (0.2, 1., 0.2), \n           SmoothBump (0.45, 0.55, 0.005, mod (t, 1.)));\n        else if (idObj == idVspk || idObj == idVcap) col4.rgb = mix (col4.rgb, vec3 (1., 1., 0.7),\n           SmoothBump (0.49, 0.51, 0.005, mod (0.5 * length (ro - obDisp) - t, 1.)));\n        if (vf.x > 0.) vn = VaryNf (vf.x * (obMat * (ro - obDisp)), obMat * vn, vf.y) * obMat;\n      }\n      col = col4.rgb * (0.2 + 0.2 * max (- dot (vn, sunDir), 0.) + 0.8 * max (dot (vn, sunDir), 0.)) +\n          col4.a * pow (max (dot (reflect (rd, vn), sunDir), 0.), 16.);\n      if (! isScrn) {\n        col = mix (col, ErCol (rd), smoothstep (0.6, 1., dstObj / dstFar));\n      } else {\n        col = mix (col, vec3 (0.), smoothstep (0.6, 1., dstObj / dstFar));\n        col = sqrt (Maxv3 (col)) * vec3 (0.5, 0.5, 1.);\n      }\n      showBg = false;\n    } else {\n      col = vec3 (0.);\n      if (! isScrn) col += ErCol (rd);\n    }\n  }\n  if (showBg) {\n    col = ErCol (rd);\n    if (length (col) < 0.03) col += StarPat (rd, 8.);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid FlyerPM (float s, float rl, float vu)\n{\n  vec3 vel, ort, ca, sa;\n  float el, az;\n  flPos = TrackPath (s);\n  vel = normalize (TrackVel (s));\n  el = -0.2 * asin (vel.y);\n  az = 0.2 * (atan (vel.z, vel.x) - 0.5 * pi);\n  rl = clamp (rl - 0.5 * TrackAcc (s).x, -0.3 * pi, 0.3 * pi);\n  ort = (vu >= 0.) ? vec3 (el, az, rl) : vec3 (- el, az + pi, - rl);\n  ca = cos (ort);\n  sa = sin (ort);\n  flMat = mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n          mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n}\n\n#define AA  0\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur = mod (tCur, 1800.) + 10.;\n  az = 0.;\n  el = -0.03 * pi;\n  if (mPtr.z > 0.) {\n    az += 1.5 * pi * mPtr.x;\n    el += 1.5 * pi * mPtr.y;\n    az = clamp (az, -0.5 * pi, 0.5 * pi);\n    el = clamp (el, -0.4 * pi, 0.4 * pi);\n  }\n  vuMat = StdVuMat (el, az);\n  spd = -2.;\n  obOcc = 0.4;\n  bGrid = 4.;\n  trkAx = 0.5 * vec3 (0.7, 0.8, 1.2);\n  trkAy = 0.5 * vec3 (1., 1.1, 0.9);\n  trkFx = vec3 (0.43, 0.33, 0.23);\n  trkFy = vec3 (0.41, 0.31, 0.12);\n  FlyerPM (spd * tCur, 0.1 * pi * (Fbm1 (0.01 * tCur) - 0.5), 1.);\n  ro = flPos;\n  zmFac = 2.6;\n  dstFar = 60.;\n  sunDir = normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    rd = vuMat * (rd * flMat);\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.9)), 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsAnDf (vec3 p, float r, float w, float h)\n{\n  p.z = abs (p.z);\n  return max (length (p - vec3 (0., 0., min (p.z, h + w))) - r,\n     - length (p - vec3 (0., 0., min (p.z, h - w))) + r) - w;\n}\n\nvec3 SphFib (vec3 v, float n)\n{   // Keinert et al's inverse spherical Fibonacci mapping\n  vec4 b;\n  vec3 vf, vfMin;\n  vec2 ff, c;\n  float fk, ddMin, dd, a, z, ni;\n  const float phi = 1.618034;\n  ni = 1. / n;\n  fk = pow (phi, max (2., floor (log (n * pi * sqrt (5.) * dot (v.xy, v.xy)) /\n     log (phi + 1.)))) / sqrt (5.);\n  ff = vec2 (floor (fk + 0.5), floor (fk * phi + 0.5));\n  b = vec4 (ff * ni, pi * (fract ((ff + 1.) * phi) - (phi - 1.)));\n  c = floor ((0.5 * mat2 (b.y, - b.x, b.w, - b.z) / (b.y * b.z - b.x * b.w)) *\n     vec2 (atan (v.y, v.x), v.z - (1. - ni)));\n  ddMin = 4.1;\n  for (int j = 0; j < 4; j ++) {\n    a = dot (ff, vec2 (j - 2 * (j / 2), j / 2) + c);\n    z = 1. - (2. * a + 1.) * ni;\n    vf = vec3 (sin (2. * pi * fract (phi * a) + vec2 (0.5 * pi, 0.)) * sqrt (1. - z * z), z);\n    dd = dot (vf - v, vf - v);\n    if (dd < ddMin) {\n      ddMin = dd;\n      vfMin = vf;\n    }\n  }\n  return vfMin;\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 VToRMat (vec3 v, float a)\n{\n  mat3 m;\n  vec2 cs;\n  float a1, a2;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  m[0][0] = (1. - cs.x) * v.x * v.x + cs.x;\n  m[1][1] = (1. - cs.x) * v.y * v.y + cs.x;\n  m[2][2] = (1. - cs.x) * v.z * v.z + cs.x;\n  a1 = (1. - cs.x) * v.x * v.y;\n  a2 = - cs.y * v.z;\n  m[0][1] = a1 + a2;\n  m[1][0] = a1 - a2;\n  a1 = (1. - cs.x) * v.z * v.x;\n  a2 = - cs.y * v.y;\n  m[2][0] = a1 + a2;\n  m[0][2] = a1 - a2;\n  a1 = (1. - cs.x) * v.y * v.z;\n  a2 = - cs.y * v.x;\n  m[1][2] = a1 + a2;\n  m[2][1] = a1 - a2;\n  return m;\n}\n\nvec3 RotToDir (vec3 v1, vec3 v2, vec3 p)\n{\n  vec3 n;\n  float c;\n  n = normalize (cross (v1, v2));\n  c = dot (v1, v2);\n  return c * p + sqrt (1. - c * c) * cross (n, p) + (1. - c) * dot (n, p) * n;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (dot (p, cHashVA3) + vec4 (0., cHashVA3.xyz)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n","name":"Image","description":"","type":"image"}]}