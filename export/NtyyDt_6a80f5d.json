{"ver":"0.1","info":{"id":"NtyyDt","date":"1662400936","viewed":1623,"name":"water metal bg","username":"cxm","description":"water metal bg","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["water","background","metal","cineshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define count 100\n#define speed .7\n#define TAU 6.28 * 2.5\n\nvec2 center = vec2( .4 );\nfloat dt = 0.;\n\nmat2 _rot1(float a) {\n  float s = sin(a), c = cos(a);\n  return mat2(c,s,-s,c);\n}\n\nconst mat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nfloat noise( in vec2 p )\n{\n    return sin(p.x)*sin(p.y);\n}\n\nfloat fbm4( vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p ); p = m*p*2.01;\n    f += 0.0625*noise( p );\n    return f/0.9375;\n}\n\nvec2 fbm4_2( vec2 p )\n{\n    return vec2(fbm4(p), fbm4(p+vec2(7.8)));\n}\n\nmat2 m2 = mat2( .3, .4, -.3, .9 );\n\nfloat noise2( in vec2 f ){\n  f *= m;\n  return ( cos( f.x + .18975 ) * sin( f.y + .494516 ) + .1615246 );\n}\n\nmat2 rot( float d ){\nfloat s = sin(d), c = cos(d);\nreturn mat2(c, s, -s, c);\n}\n\nfloat fbm( in vec2 x )\n{    \n    float t = 0.0;\n    for( int i=0; i<10; i++ )\n    {\n        float f = pow( 2.0, float(i) );\n        float a = pow( f, -.05 );\n        t += a*noise2(f*x);\n    }\n    return t;\n}\n\n\n// pulse\nfloat Pulse2Pixel( in vec2 uv, in vec2 oUv, vec2 pos, float rot, float size, float idx, float diffuse ){\n    float b = 0.;\n    vec2 bUv = uv;\n\n    // uv *= _rot1( iTime * .4 + rot * .01 );\n\n    uv = diffuse * fbm4_2( diffuse * ( uv + diffuse * .2 * fbm4_2( uv + diffuse * ( fbm4_2( uv - rot * 2. ) ) ) ) );\n    \n    uv += fbm( uv + fbm( uv ) * .2 );\n    uv *= 1. - smoothstep( 0., .5, length( oUv - .5 ) ); \n\n    b = cos( uv.x ) * sin( uv.y );\n    b = noise( uv ) + cos( uv.x ) * sin( uv.y ) * .6;\n    \n\n    b *= 1. - smoothstep(.0, size, length( bUv - pos ) );\n    \n    b = mix(\n        b, \n        0.,\n        1. - smoothstep(.0, size * 1., length( bUv - pos ) )\n    );\n    \n    // pulse overlay\n    b = mix(\n        b, \n        uv.x * .1,\n        1. - smoothstep(.0, size * 2.3, length( bUv - pos ) )\n    );\n    \n    b = mix(\n        b,\n        0.,\n        1. - smoothstep( 0., size * 1.2, length( oUv - .5 ) )\n    );\n    \n    \n    return b;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.yy;\n    vec2 uv2 = fragCoord/iResolution.yy;\n    vec2 uv3 = fragCoord/iResolution.yy;\n    \n    float resRa = ( iResolution.x / iResolution.y );\n    uv.x -= ( iResolution.x - iResolution.y ) / iResolution.y * .5;\n    uv2.x -= ( iResolution.x - iResolution.y ) / iResolution.y * .5;\n    uv3.x -= ( iResolution.x - iResolution.y ) / iResolution.y * .5;\n    \n    \n    uv = abs( ( ( uv - .5 ) * _rot1( iTime * .4 ) ) ) * 2.;\n    uv2 = abs( uv2 - cos( iTime ) ) * .4;\n    \n    \n    // Time varying pixel color\n    vec3 col = vec3( 0. );\n    \n    float p = 0.;\n\n\n    float t = fract( iTime * .2 );\n\n    float spiral = 0.;\n    \n\n    for( float i = 0.; i < 60.; i++ ){\n        float x = .5 + cos( i / 60. * TAU ) * .05 * ( i / 5. );\n        float y = .5 + sin( i / 60. * TAU ) * .05 * ( i / 5. );\n        // spiral += smoothstep( .011, .01, distance( uv.xy, vec2( x, y ) ) );\n    }\n\n\n    for( float i = 0.; i < 5.; i++ ){\n        uv2.x += cos( uv.y * sin( uv.x + iTime * .1 ) );\n        \n    }\n\n\n\n    spiral = uv2.x;\n\n    \n    for( float i = 0.; i < 6.; i++ ){\n    \n        t = fract( iTime * .3 - .3 * i );\n        \n        p = Pulse2Pixel( uv, uv3, center * 2. - .5, t, t, 0., spiral * .9 );\n        \n        for( float i = 0.; i < 60.; i++ ){\n            float x = .5 + cos( i / 60. * TAU ) * .05 * ( i / 5. );\n            float y = .5 + sin( i / 60. * TAU ) * .05 * ( i / 5. );\n            // p += smoothstep( .011, .01, distance( uv.xy, vec2( x, y ) ) );\n            \n        }\n        \n\n        col = mix(\n            col,\n            vec3( 3. - 3. * ( t ) ),\n            p\n        );\n    \n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}