{"ver":"0.1","info":{"id":"Wd2GDt","date":"1550279047","viewed":191,"name":"CubeMap Reflection","username":"chuckguy55","description":"Testing 1 2 3","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["cubemapreflection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool intersect(vec3 origin, vec3 ray, vec4 sphere, out vec3 normal)\n{\n    vec3 l = sphere.xyz - origin;\n    float tca = dot(l, ray);\n    float d2 = dot(l, l) - tca * tca;\n    if (d2 > sphere.w * sphere.w) return false;\n    float thc = sqrt(sphere.w * sphere.w - d2);\n    float t0 = tca - thc;\n    float t1 = tca + thc;\n    \n    if (t0 > t1)\n    {\n        float temp = t0;\n        t0 = t1;\n        t1 = temp;\n    }\n    \n    if (t0 < 0.)\n    {\n        t0 = t1;\n        if (t0 < 0.) return false;\n    }\n    \n    float t = t0;\n    \n    vec3 Phit = origin + ray * t;\n    normal = normalize(Phit - sphere.xyz);\n    \n    return true;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord/iResolution.xy) * 2. - 1.;\n    \n    float fovY = 1.57079632679;\n    \n    float aspect = iResolution.x / iResolution.y;\n    vec2 theta = ((iMouse.xy / iResolution.xy) * 2. - 1.) * vec2(-3.14159265359, 1.57079632679);\n    \n    vec3 camera = vec3(0., 0., -1. / tan(fovY / 2.));\n    \n    vec3 ray = normalize(vec3(uv.x * aspect, uv.y, 0.) - camera);\n    \n    float z = 4. + 2. * sin(iTime);\n    \n    vec4 sphere = vec4(0., 0., z, 1.0);\n    \n    vec3 normal;\n    if (intersect(camera, ray, sphere, normal))\n    {\n        ray = reflect(ray, normal);\n    }\n    \n    vec3 dir = vec3(ray.x, ray.y*cos(theta.y) + ray.z*sin(theta.y), ray.y*-sin(theta.y) + ray.z*cos(theta.y)); \n    dir = vec3(dir.x*cos(theta.x) + dir.z*-sin(theta.x), dir.y, dir.x*sin(theta.x) + dir.z*cos(theta.x));\n    \n    fragColor = texture(iChannel0, dir);\n}","name":"Image","description":"","type":"image"}]}