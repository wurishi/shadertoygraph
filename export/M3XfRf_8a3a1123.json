{"ver":"0.1","info":{"id":"M3XfRf","date":"1728692109","viewed":26,"name":"Raymarching - 00","username":"zschzen","description":"raymarching bvh studies?","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nvec3 opRep(vec3 p, vec3 c) {\n    return mod(p + 0.5 * c, c) - 0.5 * c;\n}\n\n// Bounding sphere for each cell\nfloat boundingSphere(vec3 p, vec3 c) {\n    return length(opRep(p, c)) - 0.5;\n}\n\nfloat getDist(vec3 p) {\n    vec3 c = vec3(2.0); // Cell size for repetition\n    vec3 q = opRep(p, c);\n    float sphereDist = sdSphere(q, 0.5); // Sphere radius is 0.5\n    return sphereDist;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    vec3 c = vec3(2.0); // Cell size, same as in getDist\n\n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        \n        // Check bounding sphere first\n        float boundDist = boundingSphere(p, c);\n        if(boundDist > SURF_DIST) {\n            // Skip to the next potential intersection\n            dO += boundDist;\n            continue;\n        }\n\n        float dS = getDist(p);\n        dO += dS;\n        if(dO > MAX_DIST || abs(dS) < SURF_DIST) break;\n    }\n    return dO;\n}\n\nvec3 getNormal(vec3 p) {\n    float d = getDist(p);\n    vec2 e = vec2(.01, 0);\n    vec3 n = d - vec3(\n        getDist(p - e.xyy),\n        getDist(p - e.yxy),\n        getDist(p - e.yyx)\n    );\n    return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 0, -3);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    // Rotate the ray to make the view more interesting\n    float t = iTime * 0.3;\n    mat2 rot = mat2(cos(t), -sin(t), sin(t), cos(t));\n    ro.xz *= rot;\n    rd.xz *= rot;\n    \n    float d = rayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    \n    if(d < MAX_DIST) {\n        vec3 n = getNormal(p);\n        // Map the normal to RGB colors\n        col = (n + 1.0) * 0.5;\n    }\n    \n    // Fog effect\n    col = mix(col, vec3(0.6, 0.8, 1.0), 1.0 - exp(-0.01 * d));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}