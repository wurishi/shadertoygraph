{"ver":"0.1","info":{"id":"M3sGzj","date":"1707712209","viewed":56,"name":"Moire Pattern","username":"ShadedSky","description":"moire pattern","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["moire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Time variable for animation\n    float time = iTime;\n\n    // Convert UV to a centered coordinate system ranging from -1 to 1\n    uv -= 0.5;\n    uv *= 2.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Convert cartesian to polar coordinates\n    float angle = atan(uv.y, uv.x);\n    float radius = length(uv);\n\n    // Function to create the moir√© pattern\n    float moire = sin(12.0 * angle + 4.0 * time) * cos(6.0 * radius - 2.0 * time);\n\n    // Color gradient - this can be tuned to your visual preference\n    vec3 color = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4));\n    color = mix(color, vec3(1.0, 1.0, 1.0), 1.0 - smoothstep(0.2, 0.5, radius));\n\n    // Combine the moire pattern with the color gradient\n    color *= 0.5 + 0.5 * moire;\n\n    // Output the final color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}