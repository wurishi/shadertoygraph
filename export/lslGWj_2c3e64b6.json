{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"cubemap","id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Created by inigo quilez - iq/2013\n// Modified by Angisoft/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nbool isphere( in vec4 sph, in vec3 ro, in vec3 rd, out vec2 t )\n{\n    vec3 oc = ro - sph.xyz;\n\tfloat b = dot(oc,rd);\n\tfloat c = dot(oc,oc) - sph.w*sph.w;\n\n    float h = b*b - c;\n    if( h<0.0 )\n        return false;\n\n    float g = sqrt( h );\n    t.x = - b - g;\n    t.y = - b + g;\n\n    return true;\n}\n\nconst int NumIte = 7;\nconst float Bailout = 1000.0;\n\nbool iterate( in vec3 p, in vec3 CC, out float resPot, out vec4 resColor )\n{\n    vec3 zz = p;\n\tvec4 trap = vec4(abs(zz.xyz),dot(zz,zz));\n\tfloat dz = 1.0;\n\n\tfor( int i=0; i<NumIte; i++ )\n    {\n        float m = dot(zz,zz);\n\t\tif( m > Bailout )\n        {\n\t\t    resColor = trap;\n\t\t\tresPot = 0.25*log(m)*sqrt(m)/dz;\n            return false;\n        }\n\n\t\tdz = 8.0*pow(m,3.5)*dz;\n\n        float x = zz.x; float x2 = x*x; float x4 = x2*x2;\n        float y = zz.y; float y2 = y*y; float y4 = y2*y2;\n        float z = zz.z; float z2 = z*z; float z4 = z2*z2;\n\n        float k3 = x2 + z2;\n        float k2 = inversesqrt( k3*k3*k3*k3*k3*k3*k3 );\n        float k1 = x4 + y4 + z4 - 6.0*y2*z2 - 6.0*x2*y2 + 2.0*z2*x2;\n        float k4 = x2 - y2 + z2;\n\n        zz.x = CC.x +  64.0*x*y*z*(x2-z2)*k4*(x4-6.0*x2*z2+z4)*k1*k2;\n        zz.y = CC.y + -16.0*y2*k3*k4*k4 + k1*k1;\n        zz.z = CC.z +  -8.0*y*k4*(x4*x4 - 28.0*x4*x2*z2 + 70.0*x4*z4 - 28.0*x2*z2*z4 + z4*z4)*k1*k2;\n\n        trap = min( trap, vec4(abs(zz.xyz),dot(zz,zz)) );\n\n    }\n\n    resColor = trap;\n    resPot = 0.0;\n    return true;\n}\n\nbool ifractal( in vec3 ro, in vec3 rd, out float rest, in float maxt, out vec3 resnor, out vec4 rescol, float fov, vec3 ccc )\n{\n    vec4 sph = vec4( 0.0, 0.0, 0.0, 1.25 );\n    vec2 dis;\n\n    if( !isphere(sph,ro,rd,dis) )\n        return false;\n\n    // early skip\n    if( dis.y<0.001 ) return false;\n    // clip to near!\n    if( dis.x<0.001 )dis.x = 0.001;\n\n    if( dis.y>maxt) dis.y = maxt;\n\n    float dt;\n\tvec3 gra;\n\tvec4 color;\n\n\tfloat fovfactor = 1.0/sqrt(1.0+fov*fov);\n\n\tfloat t = dis.x;\n\tfor( int i=0; i<80; i++  )\n    { \n        vec3 p = ro + rd*t;\n\nfloat Surface = clamp( 0.002*t*fovfactor, 0.000001, 0.005 );\n\n\n\t\tfloat eps = Surface*0.1;\n\t\tvec4 col2;\n\t\tif( iterate(p,ccc,dt,color) ) { rest = t; resnor=vec3(0.0,0.0,0.0); rescol = color; return true; }\n\n\t\t//gra = vec3( pot2-pot1, pot3-pot1, pot4-pot1 );\n//dt = 0.01;\n\t\tif( dt<Surface )\n        {\n\t\t    rescol = color;\n\n\t\t\tvec4 tmp;\n\t\t\tfloat eps = Surface*0.75;\n\t\t\tfloat p2; iterate( p+vec3(eps,0.0,0.0), ccc, p2, tmp );\n\t\t\tfloat p3; iterate( p+vec3(0.0,eps,0.0), ccc, p3, tmp );\n\t\t\tfloat p4; iterate( p+vec3(0.0,0.0,eps), ccc, p4, tmp );\n\t\t\tresnor = normalize( vec3( p2-dt, p3-dt, p4-dt ) );\n            rest = t;\n            return true;\n        }\n\n        t+=dt;\n    }\n\n    return false;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = -1.0 + 2.0*fragCoord.xy / iResolution.xy;\n\n\tvec2 s = xy*vec2(1.75,1.0);\n\n    float time = iTime*.15;\n\n\tvec3 light1 = vec3(  0.577, 0.577, -0.577 );\n\tvec3 light2 = vec3( -0.707, 0.000,  0.707 );\n\n\n\tfloat r = 1.3+0.1*cos(.29*time);\n\tvec3 campos = vec3( r*cos(.33*time), 0.8*r*sin(.37*time), r*sin(.31*time) );\n\tvec3 camtar = vec3(0.0,0.1,0.0);\n\n\tfloat roll = 0.5*cos(0.1*time);\n\tvec3 cw = normalize(camtar-campos);\n\tvec3 cp = vec3(sin(roll), cos(roll),0.0);\n\tvec3 cu = normalize(cross(cw,cp));\n\tvec3 cv = normalize(cross(cu,cw));\n\tfloat fov = 1.5;\n\tvec3 rd = normalize( s.x*cu + s.y*cv + fov*cw );\n\n\n\tvec3 cc = vec3( 0.9*cos(3.9+1.2*time)-.3, 0.8*cos(2.5+1.1*time), 0.8*cos(3.4+1.3*time) );\n\tif( length(cc)<0.50 ) cc=0.50*normalize(cc);\n\tif( length(cc)>0.95 ) cc=0.95*normalize(cc);\n\n\tvec3 nor, rgb;\n\tvec4 col;\n    float t;\n    if( !ifractal(campos,rd,t,1e20,nor,col,fov,cc) )\n    {\n\t\trgb = texture( iChannel0, rd).xyz;\n\t}\n\telse\n\t{\n\t\tfloat ao = clamp(1.5*col.w-0.9,0.0,1.0);\n\n\t\tvec3 refl = reflect(nor, rd);\n\t\trgb = texture( iChannel0, refl).xyz * ao;\n\t}\n\n\trgb = sqrt(rgb);\n\n\tfragColor=vec4(rgb,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lslGWj","date":"1379839899","viewed":383,"name":"Shiny Juliabulb","username":"Angisoft","description":"Nothing special - added some reflections to the original iq Juliabulb:\nhttps://www.shadertoy.com/view/MdfGRr","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","fractal","distancefield"],"hasliked":0,"parentid":"","parentname":""}}