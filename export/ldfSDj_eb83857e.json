{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"const float PI = 3.14159265;\n    \n// from https://iquilezles.org/articles/distfunctions\nfloat udRoundBox( vec2 p, vec2 b, float r )\n{\n    return length(max(abs(p)-b+r,0.0))-r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // setup\n    float t = 0.2 + 0.2 * sin(mod(iTime, 2.0 * PI) - 0.5 * PI);\n    float iRadius = min(iResolution.x, iResolution.y) * (0.05 + t);\n    vec2 halfRes = 0.5 * iResolution.xy;\n\n    // compute box\n    float b = udRoundBox( fragCoord.xy - halfRes, halfRes, iRadius );\n    \n    // colorize (red / black )\n\tvec3 c = mix( vec3(1.0,0.0,0.0), vec3(0.0,0.0,0.0), smoothstep(0.0,1.0,b) );\n        \n    fragColor = vec4( c, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldfSDj","date":"1406793351","viewed":6369,"name":"Procedural Rounded Edged Quad","username":"ShadyBen","description":"A rectangle with antialiased corners of some given radius. I wanted to see how hard it would be to implement rounded corners on a quad without using the typical 9-box/polygonal method. Using this shader you can get the same effect using one quad prim","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","edge","ui","rounded"],"hasliked":0,"parentid":"","parentname":""}}