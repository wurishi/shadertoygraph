{"ver":"0.1","info":{"id":"4d3SRl","date":"1460717692","viewed":529,"name":"Julia Set Shader","username":"gabejbrenner","description":"Generates Julia Set","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define cProd(a, b) vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x)\n\nvec2 cPwr( vec2 z, int n )\n{\n\tvec2 memo = z;\n    n--;\n    \n    for (int i=1; i<1000000000; i++)\n    {\n    \tmemo = cProd(memo, z);\n        if (i>=n) {break;}\n    }\n    \n    return memo;\n}\n\nvec2 julia( vec2 z, vec2 c, int d )\n{\n\treturn cPwr(z, d) + c;\n}\n\nbool checkPoint( vec2 z, vec2 c, int d )\n{\n\tbool result;\n    int i = 0;\n    vec2 memo = z;\n   \n    for ( int i = 0; i <= 100; i++ )\n    { \n        if (length( memo ) > 2.0) {break;}\n        memo = julia(memo, c, d);\n    }\n    \n    if ( length( memo ) < 2.0 )\n    {\n        result = true;\n    }\n    else\n    {\n        result = false;\n    }\n    \n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = .005;\n    float offX = 0.0;\n    float offY = 0.0;\n    float t = .1*sin(iTime);\n\n    vec2 z = fragCoord * scale + vec2(-scale*(iResolution.x/2.0 - offX), -scale*(iResolution.y/2.0 - offY));\n    vec2 c = vec2(-.391+t, -.587);\n    int d = 2;\n    \n    bool bounded = checkPoint(z, c, d);\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    if (bounded)\n    { \n\t\tfragColor = vec4(0,0,0,1);\n    }\n    else\n    {\n        fragColor = vec4(1,1,1,1);\n    }\n}","name":"Image","description":"","type":"image"}]}