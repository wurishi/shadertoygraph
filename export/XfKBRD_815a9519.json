{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"vec2 cDiv(vec2 a, vec2 b){\n    float r1 = length(a);\n    float r2 = length(b);\n    float theta1 = atan(a.y,a.x);\n    float theta2 = atan(b.y,b.x);\n    float r = r1 / r2;\n    float theta = theta1 - theta2;\n    return r * vec2(cos(theta),sin(theta));\n}\nvec2 invert(vec2 z){\n     for(int i =0;i<2;i++){\n     z = vec2(1,0)-cDiv(vec2(1,0),z - vec2(cos(iTime),0));\n     }\n     \n \n    return z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 uv = fragCoord/iResolution.xy - .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    uv *= 3.5;\n      uv = invert(uv);\n    \n    vec3 col = vec3(0);\n    vec2 z = vec2(0,0);\n    vec2 c = uv;\n   \n    for(int i =0;i<= 500;i++){\n         \n        z = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + c;\n        \n        if(length(z) < 2.)\n        {\n        i >= 500- + 5 ? \n        vec3(0) : col = vec3(cos(float(i)),sin(float(i)),0);\n        }\n    }\n      \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XfKBRD","date":"1733819036","viewed":36,"name":"Mandelbrot Inversion","username":"SnackEater","description":"Mandelbrot inversion fun ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""}}