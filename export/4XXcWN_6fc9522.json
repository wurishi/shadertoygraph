{"ver":"0.1","info":{"id":"4XXcWN","date":"1726329723","viewed":29,"name":"FS Lamp Test","username":"GabrieleGiuseppini","description":"Experiments for the lamp tool in Floating Sandbox.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["floatingsandbox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float CalculateDepthDarkeningFactor(\n    float yWorld,\n    float darkeningRate)\n{\n    float darkMix = 1.0 - exp(min(0.0, yWorld) * darkeningRate); // Darkening is based on world Y (more negative Y, more dark)\n    return darkMix * darkMix * darkMix;\n}\n\nfloat CalculateLampToolIntensity(vec2 fragCoords)\n{\n    // Simulate the vec4 uniform\n    vec4 paramLampToolAttributes; // Position (vec2 in frag space), Radius (float), Toggle (float, 0/1)\n    paramLampToolAttributes = vec4(\n        iMouse.x,\n        iMouse.y,\n        iResolution.x / 6.0,\n        1.0);\n        \n    ///////////////////////////////\n\n    //\n    // Feature switch: no lamp factor calculation if lamp is not on\n    //\n    // Note: fine to branch in shader - all pixels will follow the same branching\n    //\n    if (paramLampToolAttributes.w == 0.0)\n        return 0.0;\n\n    float r = paramLampToolAttributes.z;\n    float d = length(fragCoords - paramLampToolAttributes.xy);\n    float x = (r - d) / r;\n    \n    // From far away (x=-INF) to center (x=1):\n    // - 0 until x=0.0\n    // - sloping up between 0.0 and r2\n    // - 0.5 between r2 and r1\n    // - sloping up between r1 and r0\n    // - 1.0 between r0 and 1.0\n    #define r0 0.65\n    #define r1 0.3\n    #define r2 0.2\n    \n    float lampIntensity = \n        (smoothstep(0.0, r2, x) + smoothstep(r1, r0, x)) * 0.5;\n        ;\n\n    return lampIntensity;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Take sample\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 textureSample = texture(iChannel0, uv);\n    \n    // Calculate depth darkening\n    float d = CalculateDepthDarkeningFactor(\n        -(iResolution.y - fragCoord.y) * 0.08,\n        0.13);    \n\n    // Calculate lamp factor\n    float lampToolIntensity = CalculateLampToolIntensity(fragCoord);\n\n    // Apply darkening - but not where lamp is\n    vec3 c = mix(\n        textureSample.rgb,\n        vec3(0.),\n        d * (1.0 - lampToolIntensity));    \n\n    // Output to screen\n    fragColor = vec4(c, 1.0);\n    \n    //fragColor = vec4(lampFactor, lampFactor, lampFactor, 1.);\n}","name":"Image","description":"","type":"image"}]}