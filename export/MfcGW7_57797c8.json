{"ver":"0.1","info":{"id":"MfcGW7","date":"1711752984","viewed":33,"name":"AhmtTp3","username":"kaibene","description":"ombre doucesss","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tttttttttt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2024.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\nstruct Ray {\nvec3 ro; // Ray origin\nvec3 rd; // Direction\n};\n\n// Compute a point on the ray\n// ray : Ray\n// t   : depth\nvec3 Point(Ray ray,float t)\n{\n  return ray.ro+t*ray.rd;\n}\n\n// Compute the ray\n//     m : Mouse position\n//     p : Pixel\nRay CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x; \n  float le=3.5;\n  \n  // Origin\n  vec3 ro=vec3(35.,0.,10.)*Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,3.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return Ray(ro,rd);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Plane\n// p : point\n// c : center of skeleton\n// n : Normal\nfloat Plane(vec3 p,vec3 c,vec3 n)\n{\n  return dot(p-c,n);\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n\n// Cylinder\n// p : point\n// c : center of cylinder\n// r : radius\n// h : height\nfloat Cylinder(vec3 p, vec3 c, float r, float h)\n{\n    vec2 d = abs(vec2(length(p.xz - c.xz), p.y - c.y)) - vec2(r, h);\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\n  // Fonction pour créer un H avec cylindres et une sphère au centre\nfloat TriangleWithSphere(vec3 p)\n{\n    // Distance au cylindre 1\n    float d1 = Cylinder(p, vec3(0.0, 0.0, 3.0), 0.5, 6.0);\n\n    // Distance au cylindre 2\n    float d2 = Cylinder(p, vec3(2.0, 0.0, 3.0), 0.5, 6.0);\n\n\n    // Union des distances des trois cylindres\n    float triangle = Union(d1, d2);\n\n    // Distance à la sphère au centre\n    float sphere = Sphere(p, vec3(1.0, sqrt(3.0) / 3.0, 3.0), 0.8);\n\n    // Union du triangle de cylindres et de la sphère au centre\n    return Union(triangle, sphere);\n}\n// Difference\n// a,b : field function of left and right sub-trees\nfloat Difference(float a,float b)\n{\n  return max(a,-b);\n}\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n    // Calcul de la distance au triangle de cylindres avec une sphère au centre\n    float v = TriangleWithSphere(p);\n\n    // Union avec d'autres objets si nécessaire\n    v = Union(v,\n             Sphere(p, vec3(3.0, 0.0, 6.0), 0.0));\n\n    v = Union(v,\n              Sphere(p, vec3(0.0, -2.0, 5.0), 0.0));\n\n    v = Union(v,\n              Plane(p, vec3(0.0, 0.0, -1.0), vec3(0.0, 0.0, 1.0)));\n\n    return v;\n}\n\n \n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// ray : Ray \n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(Ray ray,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 Background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,30.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*Background(n);\n  \n  // Shadow computation\n  float shadow=1.0;\n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n\n\nvec3 Fibonacci(int i, int n) {\n    float phi = float(i) * (3.14159265359 * (3.0 - sqrt(5.0))); // Golden ratio\n    float y = 1.0 - float(i) / float(n - 1) * 2.0; // Range from -1 to 1\n    float radius = sqrt(1.0 - y * y); // Projected radius onto the xy-plane\n    float x = cos(phi) * radius;\n    float z = sin(phi) * radius;\n    return vec3(x, y, z);\n}\n\n\nfloat SoftShadow(vec3 p, vec3 n, vec3 lp, int numSamples) {\n    float shadow = 0.0;\n    \n    for (int i = 0; i < numSamples; ++i) {\n        vec3 sampleDir = Fibonacci(i, numSamples);\n        Ray shadowRay;\n        shadowRay.ro = p + n * Epsilon; // Offset the origin slightly to avoid self-shadowing\n        shadowRay.rd = normalize(lp - p + sampleDir * 0.1); // Perturb the ray direction\n        \n        bool hit;\n        int s;\n        float t = SphereTrace(shadowRay, length(lp - p), hit, s);\n        \n        if (hit && t < length(lp - p)) {\n            shadow += 1.0; // Increment if point is in shadow\n        }\n    }\n    \n    return shadow / float(numSamples); // Normalize the sum of shadow values\n}\n// Image\nvoid mainImage(out vec4 color, in vec2 pxy)  \n{\n    // Pixel\n    vec2 pixel = (-iResolution.xy + 2.0 * pxy) / iResolution.y;\n\n    // Mouse\n    vec2 m = iMouse.xy / iResolution.xy;\n\n    // Camera\n    Ray ray = CreateRay(m, pixel);\n\n    // Hit and number of steps\n    bool hit;\n    int s;\n\n    // Trace ray\n    float t = SphereTrace(ray, 75.0, hit, s);\n\n    // Shade background\n    vec3 rgb = Background(ray.rd);\n\n    if (hit)\n    {\n        // Position\n        vec3 p = Point(ray, t);\n\n        // Compute normal\n        vec3 n = ObjectNormal(p);\n\n        // Calculate shadow using SoftShadow function\n        float shadow = SoftShadow(p, n, vec3(5.0, 10.0, 30.0), 100); // Assuming position of the point light and 100 samples\n\n        // Shade object with light and shadow\n        rgb = Shade(p, n, ray.rd) * (1.0 - shadow);\n\n    }\n\n    color = vec4(rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}