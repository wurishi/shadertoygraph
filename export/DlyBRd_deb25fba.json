{"ver":"0.1","info":{"id":"DlyBRd","date":"1702360421","viewed":28,"name":"Matthew Do A16325941 E","username":"m1do","description":"Base Code + all EC (3D, UI, Predator) combined","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["b"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Smooth HSV2RGB from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n//THIS JUST DOES COLORS\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = vec4(0.5, 0.5, 0.5, 1.0);\n    // Loop over all boids\n    vec4 bcolor = vec4(0.0, 0.0, 0.0, 1.0);\n    bool hitBoid = false;\n    bool hitPred = false;\n    vec4 pred_pos_vel_z = texelFetch(iChannel3, ivec2(17,17), 0);\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                              i / int(iChannelResolution[0].x));\n        vec4 pos_vel = texelFetch(iChannel0, tex_pos, 0);\n        vec4 pos_vel_z = texelFetch(iChannel1, tex_pos, 0);\n        vec3 pos = vec3(pos_vel.xy, pos_vel_z.x);\n        vec3 vel = vec3(pos_vel.zw, pos_vel_z.z);\n        \n        vec2 proj = pos.xy;\n        \n        if (distance(fragCoord, proj) < (BOIDS_SIZE / pos.z) && \n            BOIDS_SIZE / pos.z <= MAX_SIZE) {\n                vec3 rgb = hsv2rgb(vec3((float(i) + 0.5) / float(NUM_BOIDS), 1.0, 0.9));\n                bcolor = vec4(rgb, 1.0);\n                hitBoid = true;\n        }\n        vec4 pred_pos_vel_xy = texelFetch(iChannel2, ivec2(17,17), 0);\n        vec4 pred_pos_vel_z = texelFetch(iChannel3, ivec2(17,17), 0);\n        if (distance(fragCoord, pred_pos_vel_xy.xy) < PREDATOR_SIZE / pred_pos_vel_z.x) {\n            hitPred = true;\n        }\n\n        \n    }\n    if (hitBoid) {\n        color = bcolor;\n    }\n    if (hitPred) {\n        color = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n    // Output to screen\n    fragColor = color;\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Initialization //\n            \n    if (iFrame == 0) {\n        vec4 pos_vel = texture(iChannel2, fragCoord/iChannelResolution[2].xy);\n        pos_vel.xy = iResolution.xy / 2.0 + (pos_vel.xy - 0.5) * iResolution.xy * 0.2;\n        pos_vel.zw = (pos_vel.zw - 0.5) * iResolution.xy * 1.0;\n        fragColor = pos_vel;\n        return;\n    }\n    \n    ////////////////////\n    \n    \n    ivec2 iFragCoord = ivec2(fragCoord); \n    vec4 pos_vel_xy = texelFetch(iChannel0, iFragCoord, 0);\n    vec4 pos_vel_z = texelFetch(iChannel1, iFragCoord, 0);\n    vec3 pos = vec3(pos_vel_xy.xy, pos_vel_z.x);\n    vec3 vel = vec3(pos_vel_xy.zw, pos_vel_z.z);\n    // ID of the current Boid\n    int my_id = int(iFragCoord.y) * int(iResolution.x) + int(iFragCoord.x);\n    \n    vec3 F_separation = vec3(0.0, 0.0, 0.0);\n    vec3 F_cohesion = vec3(0.0, 0.0, 0.0);\n    vec3 F_alignment = vec3(0.0, 0.0, 0.0);\n    vec3 F_boundary = vec3(0.0, 0.0, 0.0);\n    \n    int safety_boids = 0;\n    int visible_boids = 0;\n    \n    vec3 p_avg = vec3(0.0, 0.0, 0.0);\n    vec3 v_avg = vec3(0.0, 0.0, 0.0);\n    \n    int a_a = 0;\n    int a_b = 0;\n    int b_a = 0;\n    int b_b = 0;\n    int c_a = 0;\n    int c_b = 0;\n    \n    for (int i = 0; i < int(iChannelResolution[0].x); i++) {\n    \n        if (i != my_id) {\n        \n            ivec2 tex_pos_i = ivec2(i % int(iChannelResolution[0].x),\n                                    i / int(iChannelResolution[0].x));\n            vec4 pos_vel_xy_i = texelFetch(iChannel0, tex_pos_i, 0);\n            vec4 pos_vel_z_i = texelFetch(iChannel1, tex_pos_i, 0);\n            vec3 pos_i = vec3(pos_vel_xy_i.xy, pos_vel_z_i.x);\n            vec3 vel_i = vec3(pos_vel_xy_i.zw, pos_vel_z_i.z);\n            \n            if (distance(pos, pos_i) < dist_safety) {\n            \n                safety_boids += 1;\n                F_separation += pos - pos_i;\n       \n            }\n            \n            if (distance(pos, pos_i) < dist_visible) {\n            \n                visible_boids += 1;\n                p_avg += pos_i;\n                v_avg += vel_i;\n                \n            }\n      \n        }\n       \n    }\n    \n    if (pos.x < dist_left) {\n        a_a = 1;\n    }\n    if (pos.x > dist_right) {\n        a_b = 1;\n    }\n    if (pos.y < dist_top) {\n        b_a = 1;\n    }\n    if (pos.y > dist_bottom) {\n        b_b = 1;\n    }\n    if (pos.z < dist_near) {\n        c_a = 3;\n    }\n    if (pos.z > dist_far) {\n        c_b = 3;\n    }\n        \n    F_separation = F_separation / float(safety_boids);\n    F_cohesion = (p_avg / float(visible_boids)) - pos;\n    F_alignment = (v_avg / float(visible_boids)) - vel;\n    F_boundary = vec3( float(a_a - a_b), float(b_a - b_b), float(c_a - c_b) );\n    \n    // Predator - Start //\n    \n    vec4 pred_pos_vel = texelFetch(iChannel3, ivec2(17,17), 0);\n    vec2 pred_pos = pred_pos_vel.xy;\n    \n    vec3 F_predator = normalize(pos - vec3(pred_pos, 0.0));\n    \n    // Predator - End ////\n                        \n    vec3 F = a_separation * F_separation + \n             a_cohesion * F_cohesion +\n             a_alignment * F_alignment + \n             a_boundary * F_boundary; \n    \n    if ( distance(pos, vec3(pred_pos, 0.0)) < dist_predator ) {\n       F += F_predator;\n    }\n    \n    //  Mouse  //\n    \n    vec3 mouse_pos = vec3(iMouse.xy, 0.5);\n    \n    vec3 pull = mouse_pos - pos;\n    vec3 push = pos - mouse_pos;\n    \n    //Switch between push and pull \n    \n    if ( iMouse.z > 0.0 ) {\n       F += normalize(pull);\n       //F += normalize(push);\n    }\n    \n    /////////////\n    \n    vel += F;\n    pos += vel;\n    \n    if ( length(vel) > 0.0 ) {\n    \n        if ( length(vel) > speed_max ) {  \n            vel = vel * (speed_max / length(vel));\n        }\n         if ( length(vel) < speed_min ) {  \n            vel = vel * (speed_min / length(vel));\n        }\n    \n    }\n    \n    fragColor = vec4(pos.xy, vel.xy);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Z: x is position, z is velocity\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n     vec2 uv = fragCoord/iResolution.xy;\n\n     if (iFrame == 0) {\n        vec4 pos_vel = texture(iChannel2, fragCoord/iChannelResolution[2].xy);\n        pos_vel.xy = iResolution.z / 2.0 + (pos_vel.xy - 0.5) * iResolution.z * 0.2;\n        pos_vel.zw = (pos_vel.zw - 0.5) * iResolution.xy * 1.0;\n        fragColor = vec4(pos_vel.x, 0.0, pos_vel.z, 0.0);\n        return;\n    }\n    \n    ivec2 iFragCoord = ivec2(fragCoord); \n    vec4 pos_vel_xy = texelFetch(iChannel0, iFragCoord, 0);\n    vec4 pos_vel_z = texelFetch(iChannel1, iFragCoord, 0);\n    vec3 pos = vec3(pos_vel_xy.xy, pos_vel_z.x);\n    vec3 vel = vec3(pos_vel_xy.zw, pos_vel_z.w);\n    // ID of the current Boid\n    int my_id = int(iFragCoord.y) * int(iResolution.x) + int(iFragCoord.x);\n    \n    vec3 F_separation = vec3(0.0, 0.0, 0.0);\n    vec3 F_cohesion = vec3(0.0, 0.0, 0.0);\n    vec3 F_alignment = vec3(0.0, 0.0, 0.0);\n    vec3 F_boundary = vec3(0.0, 0.0, 0.0);\n    \n    int safety_boids = 0;\n    int visible_boids = 0;\n    \n    vec3 p_avg = vec3(0.0, 0.0, 0.0);\n    vec3 v_avg = vec3(0.0, 0.0, 0.0);\n    \n    int a_a = 0;\n    int a_b = 0;\n    int b_a = 0;\n    int b_b = 0;\n    int c_a = 0;\n    int c_b = 0;\n    \n    for (int i = 0; i < int(iChannelResolution[0].x); i++) {\n    \n        if (i != my_id) {\n        \n            ivec2 tex_pos_i = ivec2(i % int(iChannelResolution[0].x),\n                                    i / int(iChannelResolution[0].x));\n            vec4 pos_vel_xy_i = texelFetch(iChannel0, tex_pos_i, 0);\n            vec4 pos_vel_z_i = texelFetch(iChannel1, tex_pos_i, 0);\n            vec3 pos_i = vec3(pos_vel_xy_i.xy, pos_vel_z_i.x);\n            vec3 vel_i = vec3(pos_vel_xy_i.zw, pos_vel_z_i.w);\n            \n            if (distance(pos, pos_i) < dist_safety) {\n            \n                safety_boids += 1;\n                F_separation += pos - pos_i;\n       \n            }\n            \n            if (distance(pos, pos_i) < dist_visible) {\n            \n                visible_boids += 1;\n                p_avg += pos_i;\n                v_avg += vel_i;\n                \n            }\n      \n        }\n       \n    }\n    \n    if (pos.x < dist_left) {\n        a_a = 1;\n    }\n    if (pos.x > dist_right) {\n        a_b = 1;\n    }\n    if (pos.y < dist_top) {\n        b_a = 1;\n    }\n    if (pos.y > dist_bottom) {\n        b_b = 1;\n    }\n    if (pos.z < dist_near) {\n        c_a = 3;\n    }\n    if (pos.z > dist_far) {\n        c_b = 3;\n    }\n        \n    F_separation = F_separation / float(safety_boids);\n    F_cohesion = (p_avg / float(visible_boids)) - pos;\n    F_alignment = (v_avg / float(visible_boids)) - vel;\n    F_boundary = vec3( float(a_a - a_b), float(b_a - b_b), float(c_a - c_b) );\n    \n    // Predator - Start //\n    \n    vec4 pred_pos_vel = texelFetch(iChannel3, ivec2(17,17), 0);\n    float pred_pos = pred_pos_vel.x;\n    \n    float F_predator = normalize(pos.z - pred_pos);\n    \n    // Predator - End ////\n    \n                       \n    vec3 F = a_separation * F_separation + \n             a_cohesion * F_cohesion +\n             a_alignment * F_alignment + \n             a_boundary * F_boundary; \n             \n     if ( distance(pos.z, pred_pos) < dist_predator ) {\n       F += vec3(0.0, 0.0, F_predator * 0.03);\n    }\n             \n    vel += F;\n    pos += vel;\n    \n    if ( length(vel) > 0.0 ) {\n    \n        if ( length(vel) > speed_max ) {  \n            vel = vel * (speed_max / length(vel));\n        }\n         if ( length(vel) < speed_min ) {  \n            vel = vel * (speed_min / length(vel));\n        }\n    \n    }\n    \n    fragColor = vec4(pos.z, 0.0, vel.z, 0.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Predator Buffer\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n            \n    if (iFrame == 0) {\n        vec4 pred_pos_vel = texture(iChannel0, fragCoord/iChannelResolution[0].xy);\n        pred_pos_vel.xy = iResolution.xy / 2.0 + (pred_pos_vel.xy - 0.5) * iResolution.xy * 0.2;\n        pred_pos_vel.zw = (pred_pos_vel.zw - 0.5) * iResolution.xy * 1.0;\n        fragColor = pred_pos_vel;\n        return;\n    }\n    \n    vec4 pred_pos_vel = texelFetch(iChannel2, ivec2(17,17), 0);\n    vec2 pred_pos = pred_pos_vel.xy;\n    vec2 pred_vel = pred_pos_vel.zw;\n    \n    if (pred_pos.x > iResolution.x) {\n        pred_vel.x = -pred_vel.x;\n    }\n    else if (pred_pos.x < 0.0) {\n        pred_vel.x = -pred_vel.x;\n    }\n    if (pred_pos.y > iResolution.y) {\n        pred_vel.y = -pred_vel.y;\n    }\n    else if (pred_pos.y < 0.0) {\n        pred_vel.y = -pred_vel.y;\n    }\n    \n    pred_pos.x += pred_vel.x * 0.43;\n    pred_pos.y += pred_vel.y * 0.47;\n    \n    if ( length(pred_vel) > 0.0 ) {\n    \n        if ( length(pred_vel) > speed_max ) {  \n            pred_vel = pred_vel * (speed_max / length(pred_vel));\n        }\n         if ( length(pred_vel) < speed_min ) {  \n            pred_vel = pred_vel * (speed_min / length(pred_vel));\n        }\n    \n    }\n    \n    fragColor = vec4(pred_pos, pred_vel);\n    \n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//Predator Buffer\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n            \n    if (iFrame == 0) {\n        vec4 pred_pos_vel = texture(iChannel0, fragCoord/iChannelResolution[0].xy);\n        pred_pos_vel.xy = iResolution.z / 2.0 + (pred_pos_vel.xy - 0.5) * iResolution.z * 0.2;\n        pred_pos_vel.zw = (pred_pos_vel.zw - 0.5) * iResolution.xy * 1.0;\n        fragColor = vec4(pred_pos_vel.x, 0.0, pred_pos_vel.z, 0.0);\n        return;\n    }\n    \n    vec4 pred_pos_vel = texelFetch(iChannel3, ivec2(17,17), 0);\n    vec2 pred_pos = pred_pos_vel.xy;\n    vec2 pred_vel = pred_pos_vel.zw;\n    \n    if (pred_pos.x < dist_near) {\n        pred_vel.x = -pred_vel.x;\n    }\n    else if (pred_pos.x > dist_far_pred) {\n        pred_vel.x = -pred_vel.x;\n    }\n\n    pred_pos.x += pred_vel.x * 0.001;\n    \n    if ( length(pred_vel) > 0.0 ) {\n    \n        if ( length(pred_vel) > speed_max ) {  \n            pred_vel = pred_vel * (speed_max / length(pred_vel));\n        }\n         if ( length(pred_vel) < speed_min ) {  \n            pred_vel = pred_vel * (speed_min / length(pred_vel));\n        }\n    \n    }\n    \n    fragColor = vec4(pred_pos.x, 0.0, pred_vel.x, 0.0);\n    \n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUM_BOIDS 200\n#define BOIDS_SIZE 10.0\n#define PREDATOR_SIZE 15.0\n#define speed_max 10.0\n#define speed_min 5.0\n#define dist_safety 30.0\n#define dist_visible 0.02\n#define a_separation 0.02\n#define a_cohesion 0.001\n#define a_alignment 0.03\n#define a_boundary 0.5\n#define dist_left 200.0\n#define dist_right (iResolution.x - 200.0)\n#define dist_top 160.0\n#define dist_bottom (iResolution.y - 160.0)\n#define dist_near 0.2\n#define dist_far 50.0\n#define dist_far_pred 1.5\n#define dist_predator 225.0\n#define MAX_SIZE 50.0\n","name":"Common","description":"","type":"common"}]}