{"ver":"0.1","info":{"id":"XlBGRd","date":"1431240009","viewed":172,"name":"Rainbow Caverns","username":"BrwnRyce","description":"A simple infinite array spherical holes.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"vec2 dSphere(vec3 p){\n  \tfloat d = length(p)-4.2;\n  \treturn vec2(d,1);\n}\n\nvec2 oSub(vec2 a, vec2 b){\n  \tfloat d = max(a.x, -b.x);\n  \treturn vec2(d,1);\n}\n\nvec2 infiniteSpheres(vec3 p, vec3 c){\n    vec3 q;\n\tq.x = mod(p.x,c.x)-0.5*c.x;\n    q.y = mod(p.y,c.y)-0.5*c.y;\n    q.z = mod(p.z,c.z)-0.5*c.z;\n\treturn dSphere(q);\n}\n\nvec2 dist(vec3 p){\n  \treturn oSub(vec2(-1,1),infiniteSpheres(p,vec3(7.0, 7.0, 7.0)));                       \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 vPos = -1.0+2.0*q;\n\n    vec3 camUp = vec3(0,\n                      2.0*cos(iTime*0.1),\n                      -2.0*sin(iTime*0.1)); \n  \n    vec3 camPos = vec3(iTime*15.0+8.0*cos(iTime),\n                       3.5,\n                       3.5);\n  \n  \tvec3 camLook = vec3(camPos.x-sin(iTime*0.5),\n\t\t\t\t\t\tcamPos.y+0.2*cos(iTime*0.5),\n                        camPos.z+1.0);\n\n    vec3 vpn = normalize(camLook-camPos);\n  \tvec3 u = normalize(cross(camUp,vpn));\n  \tvec3 v = cross(vpn,u);\n\tvec3 vcv = camPos+vpn;\n  \tvec3 scrCoord = vcv+vPos.x*u*iResolution.x/iResolution.y+vPos.y*v;\n  \tvec3 scp = normalize(scrCoord-camPos);\n\n  \tconst vec3 e = vec3(0.0001,0,0);\n  \tconst float maxDepth = 128.0;\n  \tvec2 d = vec2(0.02,0.0);\n  \tvec3 p;\n\n  \tfloat f = 1.0;\n  \tfor(int i=0; i<128; i++){\n    \tif ((abs(d.x) < .001) || (f > maxDepth)) \n      \t\tbreak;\n    \n    \tf += d.x;\n    \tp = camPos+scp*f;\n    \td = dist(p);\n  \t}\n  \n  \tif (f < maxDepth){\n    \tvec3 color = vec3(0.5+0.7*cos(mod(p.x,11840.0)*0.0400),\n                          0.5+0.7*cos(mod(p.x,11840.0)*0.0100),\n                          0.5+0.7*cos(mod(p.x,11840.0)*0.0200));\n   \n  \t\tvec3 n = vec3(d.x-dist(p-e.xyy).x,\n\t\t\t\t\t  d.x-dist(p-e.yxy).x,\n                  \t  d.x-dist(p-e.yyx).x);\n        \n    \tvec3 N = normalize(n);\n    \tfragColor=vec4(color*dot(N,normalize(camPos-p)),1.0);\n        //fragColor=vec4((16.0/f)*color*vec3(0.7,0.7,0.7),1.0);\n    }else\n    \tfragColor=vec4(0,0,0,1);\n    \n}","name":"","description":"","type":"image"}]}