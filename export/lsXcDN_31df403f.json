{"ver":"0.1","info":{"id":"lsXcDN","date":"1488242041","viewed":237,"name":"v3 format","username":"gigatron","description":"substract color texture ; become nice amiga style demo ; \nNo anunnaki code or alien code here ; imagine  Amiga 500 with 7.9 mhz speed\nconsider cube rotation is not optimized :))))","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["texture","red","blue","gree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MdSGWK","filepath":"https://soundcloud.com/coldstorage/cream-of-the-earth-cold-storage-vs-romeo-knight","previewfilepath":"https://soundcloud.com/coldstorage/cream-of-the-earth-cold-storage-vs-romeo-knight","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n#define slowt mod(iTime,0.15)\nvec3 lDir = vec3(-0.577, 0.577, 0.577);\n\nvec3 rotate(vec3 p, float angle, vec3 axis)\n{\n    vec3 a = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float r = 1.0 - c;\n    mat3 m = mat3(\n        a.x * a.x * r + c,\n        a.y * a.x * r + a.z * s,\n        a.z * a.x * r - a.y * s,\n        a.x * a.y * r - a.z * s,\n        a.y * a.y * r + c,\n        a.z * a.y * r + a.x * s,\n        a.x * a.z * r + a.y * s,\n        a.y * a.z * r - a.x * s,\n        a.z * a.z * r + c\n    );\n    return m * p;\n}\n\nfloat distBox(vec3 p, vec3 b)\n{\n\treturn length(max(abs(p)-b, 0.0));\n}\n\n \nfloat distMap(vec3 p)\n{\n\tfloat ret = 0.0;\n\tvec3 q = rotate(p,  iTime-slowt, vec3(2.0, 1.0, 3.0));\n\t//ret = distSphere(p, 1.0);\n\tret = distBox(q, vec3(0.5, 0.5, 0.5));\n    \n    //ret = min(distBox(q+1.0, vec3(0.5, 0.5, 0.5)),distBox(q, vec3(0.3, 0.3, 0.3)));\n    \n\treturn ret;\n}\n\n \nvec3 getNormal(vec3 p)\n{\n\tfloat d = 0.0001;\n\t\n    return normalize(vec3(\n        distMap(p + vec3(  d, 0.0, 0.0)) - distMap(p + vec3( -d, 0.0, 0.0)),\n        distMap(p + vec3(0.0,   d, 0.0)) - distMap(p + vec3(0.0,  -d, 0.0)),\n        distMap(p + vec3(0.0, 0.0,   d)) - distMap(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // don't alter texture ;\n    vec4 txx = texture(iChannel0,uv,0.0);\n    float t = iTime;\n     \n    \n    vec3 n = normalize(vec3(uv,1.0))+floor(sin(t)*64.0*uv.x)/64.0*sin(t);// blue needed \n     \n    uv = floor(128.0*uv)/128.0;\n    //-\n     \n     uv.y -= sin(t)*sin(uv.x*8. );\n      \n     uv.x +=sin(t)*sin(uv.y*4.-t );\n    \n    \n     float tr = floor(1.+mod(t,3.0)*3.0);\n     \n    \n    //-    \n    if(uv.x>=0.2 && uv.x<=0.8) fragColor = vec4(n,1.0)*txx.b*tr ; \n\telse    \n     fragColor = vec4( txx.rgb-n.xyz,1.0 ) ;\n     \n     if(uv.y>.1 ^^ uv.y<0.75)  fragColor  += vec4(1.0,0.,0.,1.0)/tr;\n  \n\n    // poly\n    vec2 uvx =  (2.*fragCoord.xy - iResolution.xy)/iResolution.y;\n       uvx = floor(100.0*uvx)/100.0;\n  \n    vec3  cPos = vec3(0.0, 0.0, 3.0);\n\tvec3  cDir = vec3(0.0, 0.0,-1.0);\n\tvec3  cUp  = vec3(0.0, 1.0, 0.0);\n\tvec3  cSide= cross(cDir, cUp);\n\tfloat focus= 2.8;\n    \n    if (t>10.0) cPos = vec3(0.0+sin(t)+0.5-0.5, 0.0, 3.0+abs(sin(t)*2.));\n\t \n\tvec3 rPos = cPos;\n\tvec3 rDir = normalize(cSide*uvx.x + cUp*uvx.y + cDir*focus);\n\t\n\tconst int MAX_MARCH = 64;\n\tfloat dist;\n\tfloat total = 0.0;\n\tfor(int i = 0; i < MAX_MARCH; i++){\n\t\tdist = distMap(rPos);\n\t\ttotal += dist;\n\t\trPos = cPos + rDir*total;\n\t}\n\t \n\tvec3  color  = vec3(0.3*tr, 0.4*tr, 0.6*tr);\n\tvec3  normal = getNormal(rPos);\n\tfloat diff   = min(max(dot(lDir, normal), 0.1), 1.0);\n\tif(dist<0.001){\n\t\tfragColor = vec4(color*diff, 1.0);\n  \n\t}\n\telse{\n\t\tfragColor -= vec4(0.0, 0.0, 0.0, 1.0);\n\t}\n    \n    \n    \n    \n    \n    // *** bar layer\n    \n    vec2 bl = fragCoord.xy / iResolution.xy;\n    \n    if(bl.y>.50-min(t/8.,0.4) ^^ bl.y<0.50+min(t/8.0,.4))  fragColor  = vec4(0.2,0.2,0.2,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}