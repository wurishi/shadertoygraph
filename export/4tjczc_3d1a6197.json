{"ver":"0.1","info":{"id":"4tjczc","date":"1509576569","viewed":369,"name":"Temporal Dithering","username":"kyokpae","description":"Top half of the screen is rendered with temporal dithering.\nBottom right quarter of the screen is rendered with no dithering. Quantization error artifacts are visible.\nNoise pattern used in dithering is also shown.\n","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["procedural"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Generate a random number using x, y and iTime as input.\nfloat random(in vec2 fragCoord) {\n    float x = fragCoord.xy.x;\n    float y = fragCoord.xy.y;\n    float w = iResolution.x;\n    float h = iResolution.y;\n    \n    \n    float f0 = sin(x / w * (65543.0 * sin((iTime + 7.0) * 13.0))) * 0.5 + 0.5;\n    float f1 = cos(y / h * (65449.0 * cos((iTime + 13.0) * 7.0))) * 0.5 + 0.5;\n    float f2 = sin(cos((iTime + 41.0) * sin(65557.0 * f0 * f1)) * 13.0) * 0.5 + 0.5;\n    \n    uint b0 = uint(f0 * 64063.0);\n    uint b1 = uint(f1 * 65381.0);\n    uint b2 = uint(f2 * 65447.0);\n    \n    uint s1 = 64463u;\n    uint s2 = 50273u;\n      \n    s1 = (s1 + b0) % 65521u;\n    s2 = (s1 + s2) % 65521u;\n    \n    s1 = (s1 + b1) % 65521u;\n    s2 = (s1 + s2) % 65521u;\n    \n    s1 = (s1 + b2) % 65521u;\n    s2 = (s1 + s2) % 65521u;\n    \n    return float(s2) / 65521.0;\n}\n\n// Apply dithering by adding a random value smaller than\n// quantizition error.\nfloat dither(in float color, in vec2 fragCoord) {\n    return color + ((random(fragCoord) - 0.5) / 256.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    // Generate a gradient pattern.\n\tfloat x = fragCoord.xy.x;\n    float y = fragCoord.xy.y;\n    float w = iResolution.x;\n    float h = iResolution.y;\n    \n    float s = (x / w - 0.5) * 3.14;\n    float c = (y / h -0.5) * 3.14;\n    \n    float color = sin(s * c) * cos(s * c) * 0.5 + 0.5;\n\n    // Apply dithering.\n    float dithered = dither(color, fragCoord);\n    \n    // Split screen in half.\n    float u = y / h;\n    \n    if (u > 0.52) {\n      // Top half - dithered.\n      fragColor = vec4(dithered, dithered, dithered, 1.0);\n    } else if (u < 0.48) {\n      // Bottom half.\n      float v = x / w;\n      if (v > 0.52) {\n        // Left quarter - undithered.\n        fragColor = vec4(color, color, color, 1.0);\n      } else if (v < 0.48) {\n        // Right quarter - noise.\n        color = random(fragCoord);\n        fragColor = vec4(color, color, color, 1.0);\n      }\n    } else {\n      fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}