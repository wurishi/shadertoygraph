{"ver":"0.1","info":{"id":"tljfzG","date":"1599253392","viewed":288,"name":"Minimalism #12","username":"Flopine","description":"Twelfth piece of a shader serie about minimalism, how to do small and quick artwork that are about composition and animation.\nHEAVILY inspired by a invitro from Ninjadev: https://www.youtube.com/watch?v=YxLCvjuW9c4","likes":26,"published":1,"flags":0,"usePreview":0,"tags":["3d","isometric","orthographic","minimal","daily"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n   \n// HEAVILY inspired by a invitro from Ninjadev <3 <3 <3 <3\n// https://www.youtube.com/watch?v=YxLCvjuW9c4\n\n#define ITER 40.\n#define PI acos(-1.)\n\n#define time(speed) fract(iTime*speed)\n#define bouncy(speed) (abs(sqrt(sin(time(speed)*PI))))\n\n#define sphere(p,r) (length(p)-r)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define replimit(p,c,l) p=p-c*clamp(round(p/c),-l,l)\n\nfloat easeOutExpo (float x) \n{return x >= 1. ? 1. : 1. - pow(2., -10. * x);}\n\nstruct obj \n{\n    float dist;\n    int mat;\n};\n\nobj SDF (vec3 p)\n{\n    float dt = mod(iTime*1.5, 7.2);\n    float animxz,animyz;\n    \n    animxz = mix(0.,PI/4., easeOutExpo(clamp(dt-1.,0.,1.)));\n    animxz = mix(animxz,-PI/5.1,easeOutExpo(clamp(dt-2.,0.,1.))); \n    animxz = mix(animxz,PI/3.,easeOutExpo(clamp(dt-4.,0.,1.)));\n    animxz = mix(animxz,0.,easeOutExpo(clamp(dt-6.,0.,1.)));\n    \n    animyz = mix(0., PI/2., easeOutExpo(dt));\n    animyz = mix(animyz, 1./sqrt(1.6),easeOutExpo(clamp(dt-3.,0.,1.)));\n    animyz = mix(animyz, 0.,easeOutExpo(clamp(dt-5.,0.,1.)));\n    \n    p.xz *= rot(animxz);\n    p.yz *= rot(animyz);\n    \n    float per = 3.;\n    float nb = 1.;\n    vec3 id = floor((p-per*0.5)/per);\n    \n    replimit(p,per,nb);\n    \n   return obj(sphere(p,1.2+bouncy(2.)*0.2),int(length(id*1.5))); \n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(uv*6.2,-50.),\n        rd = vec3(0.,0.,1.),\n        p = ro,\n        col = vec3(0.);\n\n    bool hit = false;\n    float shad = 0.;\n    obj scene;\n\n    for (float i=0.; i<ITER; i++)\n    {\n        scene = SDF(p);\n        if (scene.dist < 0.001)\n        {\n            hit = true;\n            shad = i/ITER;\n            break;\n        }\n        p += scene.dist*rd;\n    }\n\n    if (hit)\n    {\n        if (scene.mat == 0) col = vec3(1.,0.,0.2);\n        if (scene.mat == 1) col = vec3(1.,0.3,0.1);\n        if (scene.mat == 2) col = vec3(1.,1.,0.);\n        if (scene.mat == 3) col = vec3(0.,0.8,0.35);\n        if (scene.mat == 4) col = vec3(0.,1.,1.);\n        if (scene.mat == 5) col = vec3(0.9,0.4,0.8);\n      \n        col *= (1.-shad);\n    }\n\n    fragColor = vec4(sqrt(col), 1.0);\n}","name":"Image","description":"","type":"image"}]}