{"ver":"0.1","info":{"id":"tdGcRW","date":"1602361083","viewed":69,"name":"mprin","username":"adr","description":"move mouse move camera","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["weeee"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// followed great raymarch tutorial https://www.shadertoy.com/view/XlBGDW\n#define CLIP_NEAR 0.1\n#define CLIP_FAR 8.0\n#define STEPS 100\n#define EPSILON 0.0001\n#define DISTANCE_BIAS 0.7\n#define PI 3.14159\n\nfloat scene(vec3 p) {\n    vec3 pos = vec3(\n        sin(p.x * PI + 12.0 * sin(PI * p.x / 5.0)), // phase modulation\n        sin(p.y * PI + 12.0 * sin(PI * p.y / 5.0)),\n        p.z);\n    float d = length(pos);\n    return d;\n}\n\nfloat raymarch(vec3 p, vec3 direction) {\n\tfloat dist = CLIP_NEAR;\n    float result;\n    for (int i = 0; i < STEPS; ++i) {\n        result = scene(p + direction * dist);\n        if (result < EPSILON) { break; }\n        dist += result * DISTANCE_BIAS;\n        if (dist > CLIP_FAR) { break; }\n    }\n    return dist;\n}\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n\t//vec3 f = normalize(center - eye);\n    vec3 f = normalize(eye - center);\n\tvec3 s = normalize(cross(f, up));\n\tvec3 u = cross(s, f);\n\treturn mat4(\n\t\tvec4(s, 0.0),\n\t\tvec4(u, 0.0),\n\t\tvec4(-f, 0.0),\n\t\tvec4(0.0, 0.0, 0.0, 1)\n\t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 offset = vec3(-0.25 * iTime, 0.1 * iTime,  0.0);\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 direction = normalize(vec3(uv, 2.5));\n    vec3 eye = vec3(\n        1.0 - 2.0 * sin(PI * iMouse.x / iResolution.x) + offset.x,\n        1.0 - 2.0 * iMouse.y / iResolution.y + offset.y,\n        1.0 - 2.0 * cos(PI * iMouse.x / iResolution.x) + offset.z);\n    mat4 viewToWorld = viewMatrix(eye, offset, vec3(0.0, 1.0, 0.0));\n    vec3 worldDir = (viewToWorld * vec4(direction, 0.0)).xyz;\n    float result = raymarch(eye, worldDir);\n    float fog = 0.5 - result / CLIP_FAR;\n    \n    vec3 base = vec3(fog, fog, fog) * fog;\n    vec3 tint = vec3(1.0, 0.2, 0.2);\n    vec3 modulation_tint = vec3(0.1, 0.0, -0.1);\n    vec3 modulation_back = vec3(0.1, 0.0, 0.0);\n    vec3 back = vec3(0.2, 0.0, 0.2);\n    \n    vec3 color = base * (cos(iTime / (3.0 * PI)) * modulation_tint + tint) + back + sin(iTime / PI) * modulation_back;\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}