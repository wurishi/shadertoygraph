{"ver":"0.1","info":{"id":"4lcXWf","date":"1481750629","viewed":197,"name":"font test","username":"yakoudbz","description":"little font experiment","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["font"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":" // 1 for original size\nvec4 char(vec2 pos, vec2 letterPos, vec2 origin, vec2 size) {\n    pos = (pos-origin)/size + letterPos;\n    pos = clamp(pos,letterPos,(letterPos+1.));\n\treturn texture( iChannel0, pos/16.);\n}\n\nvec4 fontUnion(vec4 f1, vec4 f2){\n    if(f1.w<f2.w)\n        return f1;\n    else\n        return f2;\n}\n\n#define LETTER(x,y) font = fontUnion(font,char(uv,vec2(x,y),pos,vec2(0.3,0.3))); pos+=vec2(.16,0.);\n\n#define A LETTER(1.,11.)\n#define B LETTER(2.,11.)\n#define C LETTER(3.,11.)\n#define D LETTER(4.,11.)\n#define E LETTER(5.,11.)\n#define F LETTER(6.,11.)\n#define G LETTER(7.,11.)\n#define H LETTER(8.,11.)\n#define I LETTER(9.,11.)\n#define J LETTER(10.,11.)\n#define K LETTER(11.,11.)\n#define L LETTER(12.,11.)\n#define M LETTER(13.,11.)\n#define N LETTER(14.,11.)\n#define O LETTER(15.,11.)\n#define P LETTER(0.,10.)\n#define Q LETTER(1.,10.)\n#define R LETTER(2.,10.)\n#define S LETTER(3.,10.)\n#define T LETTER(4.,10.)\n#define U LETTER(5.,10.)\n#define V LETTER(6.,10.)\n#define W LETTER(7.,10.)\n#define X LETTER(8.,10.)\n#define Y LETTER(9.,10.)\n#define Z LETTER(10.,10.)\n#define n pos = vec2(.01*sin(pos.y*iTime)-1.,pos.y-0.3);\n#define _ pos += vec2(.1,0.);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2.0*fragCoord/iResolution.xy-1.0;\n    \n\tvec4 font = vec4(1.);\n    vec2 pos = vec2(.02*sin(iTime)-1.,0.5+.03*cos(iTime));\n    \n// ====== use macro to make it as if you were typing =====\n    H E L L O n\n\tW O R L D n n\n\tI _ M n\n    Y A K O U D B Z\n        \n// ======\n    \n    vec4 bgColor = vec4(0.3);\n    vec4 inColor = vec4(0.1);\n    vec4 outColor = vec4(.8,0.45,0.,1.);\n    \n    float outWidth = 0.06;\n    float deepness = 0.4;\n    \n    font.yzw =1.-2.*font.yzw; // center everything on 0, above 0 = in the font\n    float inner = smoothstep(0.0,0.01,font.w);\n    //float inner = font.x; // less smooth\n    //font = (1.0-inner)*font; // everything in the font gets leveled to 0 (font.w <= 0)\n    font.w += outWidth; // now everithing above 0 is in the outline\n    float outer = smoothstep(0.0,0.01, font.w); // this is the inner + the outline\n    font.yzw *= outer*deepness/outWidth;  // crop everything outside the outline, and map to height\n    \n    \n    vec3 viewPos = vec3(uv,font.w);\n    vec3 lightPos = vec3(3.0,2.0,0.4);\n    vec3 lightDir = normalize(lightPos-viewPos);\n    vec3 normal = normalize(vec3(-font.g, font.b, 1.0));\n    vec3 reflectDir = reflect(-lightDir, normal);\n    \n    vec3 viewDir = normalize(vec3(0.0,0.0,1.0) - viewPos);\n\tfloat spec = pow(max(dot(viewDir, reflectDir),0.0), 5.);\n    \n    float light = .5 + 0.8*max(dot(normal,lightDir),0.0) + 2.0*spec;\n    fragColor = light*(inner*inColor + (outer-inner)*outColor + (1.0-outer)*bgColor);\n}","name":"Image","description":"","type":"image"}]}