{"ver":"0.1","info":{"id":"M3BBDh","date":"1729466022","viewed":33,"name":"Fresnel - Shadetober24 #20","username":"franke333","description":"Day 20 of shadetober\n\nSlowly working on raytracer at this point. This is my WIP and tried to visualize fresnel-like event while i work on it. ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["shadetober"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.x;\n\n    // Time varying pixel color\n    Ray r = generateRay(uv);\n\n    // Output to screen\n    fragColor = vec4(shade(r,3,iTime),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define EPSILON 1e-4\n\nstruct Ray{\n    vec3 ori;\n    vec3 dir;\n};\n\nstruct Material{\n    vec3 color;\n    float ka,kd,ks,h;\n};\n\nstruct hitInfo{\n    vec3 pos;\n    vec3 norm;\n    vec2 uv;\n    bool hit;\n    Material mat;\n};\n\n\nRay generateRay(vec2 uv){\n    Ray r;\n    r.ori = vec3(0);\n    r.dir = normalize(vec3(uv.x-0.5,uv.y-0.5,1.));\n    return r;\n}\n\nhitInfo hitSphere(Ray ray, vec3 p, float r){\n    float a = dot(ray.dir,ray.dir);\n    float b = 2. * dot(ray.dir,ray.ori - p);\n    float c = dot(p,p) + dot(ray.ori,ray.ori) - 2. * dot(p,ray.ori) - r*r;\n    \n    float disc = b*b - 4. * a * c;\n    \n    hitInfo info;\n    if(disc <= 0.){\n        info.hit = false;\n        return info;\n    }\n        \n    info.hit = true;\n    float t1 = (-b - sqrt(disc)) / (2. * a);\n    info.pos = ray.ori + ray.dir * t1;\n    info.norm = normalize((ray.ori + ray.dir * t1) - p);\n    \n    //uv\n    vec3 equator = normalize(vec3(1.,1.,0.));\n    vec3 pole = normalize(vec3(-1.,1.,-1.5));\n    float psi = acos(dot(-info.norm,pole));\n    float theta = acos(dot(info.norm,equator)/sin(psi))/(6.2844);\n    info.uv.x = psi/3.1415;\n    info.uv.y = dot(cross(pole,equator),info.norm) > 0. ? theta : 1. - theta;\n    \n    \n    return info;\n\n}\n// description of scene and its objects\nhitInfo scene(Ray r);\n\n// return lights of the scene\n// info = (xyz,intensity)\nbool getLight(in int i,out vec4 lightInfo);\n\nvec3 shade(Ray r, int depth, float time){\n    vec3 bckgrnd = vec3(.3,0.4,0.6);\n    float ksfactor = 1.0;\n    vec3 color = vec3(0.);\n    while(depth>0 && ksfactor > EPSILON){\n        vec3 currColor;\n        hitInfo info = scene(r);\n        \n        if(!info.hit)\n        {\n            color += ksfactor*bckgrnd;\n            depth = 0;\n        }\n        else{\n            Material mat = info.mat;\n\n            //lighting\n            int i = 0;\n            vec4 lightInfo;\n            currColor = mat.color*mat.ka;\n            while(getLight(i,lightInfo)){\n                vec3 light = lightInfo.xyz;\n                float lightIntensity = lightInfo.w;\n                vec3 l = normalize(light - info.pos);\n                float diffuse = dot(l,info.norm);\n                float spec = pow(max(0.,dot(info.norm,(info.norm+l)/2.)),mat.h);\n                float ldist = dot(light - info.pos,light - info.pos);\n                currColor += mat.color*mat.kd*diffuse*lightIntensity/ldist + mat.ks*lightIntensity*spec/ldist;\n                i += 1;\n            }\n            \n            float fresnel = 1.-abs(dot(info.norm,r.dir));\n            fresnel = clamp(0.,1.,fresnel);\n            color += ksfactor*pow(fresnel,7. + 5.*sin(0.66*time))*vec3(1.0,0.3,1.0);\n\n            //shade\n            color += ksfactor*currColor;\n\n            //prepare for new depth\n            Ray newRay;\n            newRay.ori = info.pos;\n            //v - 2 * (v âˆ™ n) * n\n            newRay.dir = -r.dir - 2.*dot(-r.dir,info.norm) * info.norm;\n            r = newRay;\n            ksfactor *= mat.ks; \n            depth -= 1;\n            \n\n        }\n\n    }\n    return color;\n}\n\n\n\n// --------- SCENE DESCRIPTION ----------\n\nhitInfo scene(Ray r){\n    hitInfo hit = hitSphere(r, vec3(0.,-.8,3.5),.8);\n    hit.mat = Material(vec3(1.),0.05,0.95,0.25,160.);\n    \n    hit.hit = hit.hit && (distance(r.ori,hit.pos) > EPSILON);\n    return hit;\n\n}\nbool getLight(in int i,out vec4 lightInfo){\n    if(i==0){\n        lightInfo = vec4(1.,2.,-.5,4.);\n        return true;\n    }\n    if(i==1){\n        lightInfo = vec4(-3.,-3.,-.5,4.);\n        return true;\n    }\n    return false;\n}\n","name":"Common","description":"","type":"common"}]}