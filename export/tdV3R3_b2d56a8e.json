{"ver":"0.1","info":{"id":"tdV3R3","date":"1571550082","viewed":54,"name":"HarmonicThing","username":"aaron_anderson","description":"difference tone patterns","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["shm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415926535897932384626433832795;\nfloat difference = 0.00001;\nfloat fundamentalFrequency = 0.5;\nfloat zoomSpeed = 0.5f;\nfloat getIntensity(float phase){\n    /*\n    float intensity;\n    if(phase > 0.5){\n        intensity = 1.0f;//smoothstep(0.0f, 1.0f, 1.0f);\n    }else{\n        intensity = 0.0f;\n    }\n    return intensity;\n*/\n    float intensity;\n    intensity = (sin(phase * PI * 2.0f) + 1.0f) * 0.5f;\n    return intensity;\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n   // vec4 mouse = iMouse/iResolution.xxxx;\n\n    //difference = map(mouse.x, 0.0f, float(iResolution.x), 0.01f, 0.001f);\n    \n    //fundamentalFrequency = map(mouse.y, 0.0f, float(iResolution.y), 0.1f, 2.0f);\n    vec2 center = vec2(0.5, 0.5);\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = map(uv.x, \n               0.0f, \n               1.0f, \n               0.5f - (iTime*zoomSpeed+1.0f)/0.5f, \n               0.5f + (0.5f/(iTime * zoomSpeed+1.0f)));\n    uv.y = map(uv.y, \n               0.0f, \n               1.0f, \n               0.5f - (iTime*zoomSpeed+1.0f)/0.5f, \n               0.5f + (0.5f/(iTime*zoomSpeed+1.0f)));\n    vec2 mouse = vec2(iMouse.x, iMouse.y);\n    float distanceToCenter = distance(uv,center) * 20000.0f;\n    float extraDifference = (fragCoord.x * (fragCoord.y * 0.333) * difference);\n    float frequency = fundamentalFrequency + (distanceToCenter * difference * -extraDifference);\n    float intensity = getIntensity(mod(iTime * frequency, 1.0f));\n    float brightness = smoothstep(0.0f, 1.0f, intensity);\n    // Time varying pixel color\n    vec3 col = vec3(brightness);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}