{"ver":"0.1","info":{"id":"4f2GRd","date":"1704535448","viewed":42,"name":"sleepdesign","username":"ford442","description":"3 great shaders meet up","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","psy","combination"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define l 200\n\nfloat iSphere(in vec3 ro, in vec3 rd, in vec4 sph) // From iq\n{\n    vec3 oc = ro - sph.xyz;\n    float b = dot(oc, rd);\n    float c = dot(oc,oc) - sph.w*sph.w;\n    float h = b*b - c;\n    if(h <0.0) return -1.0;\n    float t = (-b + sqrt(h));\n    return t;\n}\n\nvec2 rotate(vec2 v, float a) {\n\treturn vec2(cos(a)*v.x + sin(a)*v.y, -sin(a)*v.x + cos(a)*v.y);\n}\n\nvec3 hsv(in float h, in float s, in float v) {\n\treturn mix(vec3(1.0), clamp((abs(fract(h + vec3(3, 2, 1) / 3.0) * 6.0 - 3.0) - 1.0), 0.0 , 1.0), s) * v;\n}\n\nvec3 toSpherical(in vec3 c)\n{\n\tfloat r = length(c);\n\treturn vec3(r, acos(c.z/r), atan(c.y,c.x));\n}\n\nvec3 toCartesian(in vec3 s)\n{\n\tfloat sy = sin(s.y);\n\treturn s.x * vec3(sy*cos(s.z), sy*sin(s.z), cos(s.y));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n       int isEvenInt = int(iTime/7.0) % 2 == 0 ? 1 : 0;\n       int isEvenInt2 = int(iTime/21.0) % 2 == 0 ? 1 : 0;\n       int isEvenInt3 = int(iTime/42.0) % 2 == 0 ? 1 : 0;\n           if(isEvenInt3==0){\n\nfloat tim=0.7-(float(isEvenInt)*0.5);\n    float theta = 0.02 * (iTime/tim);\n\n    if(isEvenInt2==1){\n        vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n\n    for (float i = 0.0; i < 100.0; i += 1.0){\n        uv = abs(uv);\n        uv -= vec2(0.5 + 0.25 * sin((iTime/tim) * 0.5), 0.5 + 0.25 * cos((iTime/tim) * 0.3));\n        uv *= 1.1;\n        uv *= mat2(\n            cos(theta), -sin(theta),\n            sin(theta), cos(theta)\n        );\n    }\n\n    fragColor = vec4(\n        length(uv + vec2(0.1, 0.273) * sin((iTime/tim) * 0.125)),\n        length(uv + vec2(0.428, 0.27333) * sin((iTime/tim) * 0.625)),\n        length(uv + vec2(0.555, 0.555) * sin((iTime/tim) * 0.0125)),\n        1.0\n    );\n    }\n        if(isEvenInt2==0){\n   float angle = (iTime/tim)*0.008;\n\n    vec2 normalizedCoord = fragCoord / iResolution.xy * 2.0 - 1.0;\n\n    for (float i = 0.0; i < 64.0; i += 1.0) {\n    normalizedCoord = abs(normalizedCoord);\n    normalizedCoord -= 0.5;\n    normalizedCoord *= 1.1;\n    normalizedCoord *= mat2(\n        cos(angle), -sin(angle),\n        sin(angle), cos(angle)\n    );\n    };\n    fragColor = vec4(vec3(length(normalizedCoord + vec2(sin((iTime/tim))*.5, sin(-(iTime/tim))*.5)),length(normalizedCoord + vec2(sin(-(iTime/tim))*.5, cos((iTime/tim))*.5)),length(normalizedCoord + vec2(cos((iTime/tim))*.5, sin(-(iTime/tim))*.5))),0);\n}\n       }\n                  if(isEvenInt3==1){\n                              if(isEvenInt2==0){\n\n                    float alph=1.0;\n    vec2 uv = (fragCoord.xy - iResolution.xy/2.0) / min(iResolution.y, iResolution.x) * 90.0;\n    vec2 vv = uv;\n    float tim=1.030303033-((iTime-floor(iTime)/33.333333333));\n    int isEvenInt = int(iTime/10.0) % 2 == 0 ? 1 : 0;\ntim=1.0+float(isEvenInt*12);\n// alph=0.22*(float(isEvenInt)*(iTime-floor(iTime)));\n    float rotationAngle = mod((iTime/tim) * 1.1, 6.141530303 * 2000.0);\n    vec2 rotatedUV = mat2(cos(rotationAngle), -sin(rotationAngle), sin(rotationAngle), cos(rotationAngle)) * uv;\n    float ft = (iTime/tim) + 290.1;\n    float tm = ft * 0.1;\n    float tm2 = ft * 0.3;\n    vec2 mspt = (vec2(\n        sin(tm) + cos(tm * 0.2) + sin(tm * 0.5) + cos(tm * -0.4) + sin(tm * 1.3),\n        cos(tm) + sin(tm * 0.1) + cos(tm * 0.8) + sin(tm * -1.1) + cos(tm * 1.5)\n    ) + 1.0) * 0.35;\n    float R = 0.0;\n    float RR = 0.0;\n    float RRR = 0.0;\n    float a = (1. - mspt.x) * 0.5;\n    float C = cos(tm2 * 0.030003303 + a * 0.010001303) * 1.1;\n    float S = sin(tm2 * 0.033033303 + a * 0.230023303) * 1.1;\n    float C2 = cos(tm2 * 0.024024303 + a * 0.230023303) * 3.1;\n    float S2 = sin(tm2 * 0.030003303 + a * 0.010001303) * 3.3;\n    vec2 xa = vec2(C, -S);\n    vec2 ya = vec2(S, C);\n    vec2 xa2 = vec2(C2, -S2);\n    vec2 ya2 = vec2(S2, C2);\n    vec2 shift = vec2(0.033033303, 0.140014303);\n    vec2 shift2 = vec2(-0.023023303, -0.220022303);\n    float Z = 0.4 + mspt.y * 0.3;\n    float m = 0.990099 + sin((iTime/tim) * 0.003003303) * 0.000303303;\n    for (int i = 20; i < l; i++) {\n        float r = dot(rotatedUV, rotatedUV);\n        float r2 = dot(vv, vv);\n        if (r > 1.0) {\n            r = (1.0) / r;\n            rotatedUV.x = rotatedUV.x * r;\n            rotatedUV.y = rotatedUV.y * r;\n        }\n        if (r2 > 1.0) {\n            r2 = (1.0) / r2;\n            vv.x = vv.x * r2;\n            vv.y = vv.y * r2;\n        }\n        R *= m;\n        R += r;\n        R *= m;\n        R += r2;\n        if (i < l - 1) {\n            RR *= m;\n            RR += r;\n            RR *= m;\n            RR += r2;\n            if (i < l - 2) {\n                RRR *= m;\n                RRR += r;\n                RRR *= m;\n                RRR += r2;\n            }\n        }\n        rotatedUV = vec2(dot(rotatedUV, xa), dot(rotatedUV, ya)) * Z + shift;\n        vv = vec2(dot(vv, xa2), dot(vv, ya2)) * Z + shift2;\n    }\n    float c = ((mod(R, 2.0) > 1.0) ? 1.0 - fract(R) : fract(R));\n    float cc = ((mod(RR, 2.0) > 1.0) ? 1.0 - fract(RR) : fract(RR));\n    float ccc = ((mod(RRR, 2.0) > 1.0) ? 1.0 - fract(RRR) : fract(RRR));\n    vec3 neonColor = vec3(\n        0.5 + 0.5 * sin(c * 10.0 + (iTime/tim)  * 30.030303303),\n        0.5 + 0.5 * sin(cc * 10.0 + (iTime/tim)  * 30.003033303 + 1.0),\n        0.5 + 0.5 * sin(ccc * 10.0 + (iTime/tim)  * 30.000303303 + 2.0)\n    );\n    fragColor = vec4(neonColor, alph);\n}\n                              if(isEvenInt2==1){\n                                  \n\n\tvec2 uv = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n\tuv.x *= iResolution.x / iResolution.y;\n\tvec3 ro = toCartesian(vec3(1.0, iTime*0.01, iTime*0.01419+0.5));\n\tvec3 cd = normalize(-ro);\n\tvec3 u = normalize(vec3(-ro.z, 0, ro.x));\n\tvec3 v = cross(u, cd);\n\tvec3 rd = normalize(u*uv.x + v*uv.y + cd*exp(sin(iTime*0.013)*0.5+0.5)*2.0);\n\tvec4 color = vec4(0);\n\tfloat it = 0.0;\n\t\n    vec2 ms = iMouse.xy / iResolution.xy;\n    vec2 m = vec2(0.7 + iTime * 0.01312, 1.0 + iTime * 0.01231);  m+=ms;\n\tm *= 3.1415;\n\tmat2 r1 = mat2(cos(m.x),  sin(m.x),\n\t\t\t\t   -sin(m.x), cos(m.x));\n\tmat2 r2 = mat2(cos(m.y),  sin(m.y),\n\t\t\t\t   -sin(m.y), cos(m.y));\n\t\n\tfor (int i = 0; i < 32; i++) {\n\t\tfloat d = iSphere(ro, rd, vec4(0,0,0,1.0-float(i)/100.0));\n\t\tvec3 p = ro+rd*d;\n\t\tro = p * 9.0;\n\t\tro.xy *= r1;\n\t\tro.yz *= r2;\n\t\tro = abs(ro-1.0);\n\t\trd = normalize(ro);\n\n\t\tcolor += vec4(hsv(float(i)/10.0+length(ro), dot(p, rd), 1.0), 1.0);\n\t}\n\tcolor = sin(color)*0.5+0.5;\n\tfragColor = color;\n\n             \n                              }\n                  }\n}\n","name":"Image","description":"","type":"image"}]}