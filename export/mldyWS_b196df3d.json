{"ver":"0.1","info":{"id":"mldyWS","date":"1699955540","viewed":153,"name":"Music Beating Heart","username":"middle","description":"I like  the heart function","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["sound","music","audio","effect","visualizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n#define Scale(a,b) (a*-b+1.)\n\nfloat Line(vec2 a, vec2 b, vec2 U)    // --- Distance to a line segment https://www.shadertoy.com/view/llySRh\n{   \n    U -= a, b -= a;\n\tfloat h = dot( U, b ) / dot(b,b),\n          c = clamp(h, 0., 1.);\n    return h==c ? length( U - b * c ) : 1e5;   // dist to strict segment\n  //return        length( U - b * c );         // dist to segment with round ends\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float base0 = vec4(texelFetch(iChannel0,ivec2(1,0),0)).x;\n    float base1 = vec4(texelFetch(iChannel0,ivec2(1,4),0)).x;\n    float base2 = vec4(texelFetch(iChannel0,ivec2(1,8),0)).x;\n    \n    float linebase0 = vec4(texture(iChannel0,vec2(.001,abs((uv.x-.5)*.2)))).x;\n    \n    \n    base1 =Scale(base1,0.15);\n    base2 =Scale(base2,0.12);\n    \n    float pix = 200. / iResolution.y ;\n    float line = 1e5;\n    float LineR = 30.;\n    for(float R = 0.;R<=LineR;R++ )\n    {\n        \n        line =  min(Line(vec2 (R/LineR,linebase0*0.3+0.55), vec2 (0.5,0.45), uv),line);\n        //line =  min(Line(vec2 (R/LineR,linebase0*0.16+0.05), vec2 (0.5,0.45), uv),line);\n    }\n    \n    line = 1.0-smoothstep( 0.0, pix, sqrt(sqrt(abs(line)))) ;\n    float centermask=distance(vec2(0.5,0.45),uv)-0.05;\n    line = centermask*centermask*centermask*line;\n    \n    \n    \n    float heart0r = texture(iChannel1,((uv-.5)*Scale(base0,0.26))+.5).x;\n    float heart0g = texture(iChannel1,((uv-.5)*Scale(base0,0.2))+.5).x;\n    float heart0b = texture(iChannel1,((uv-.5)*Scale(base0,0.15))+.5).x;\n    \n    float heart1 = texture(iChannel1,((uv-.5)*(base1-0.2))+.5).x*.5;\n    \n    float heart2 = texture(iChannel1,((uv-.5)*(base2-0.4))+.5).x*.2;\n    \n    fragColor = vec4(heart1+heart2)*vec4(0.7,0.6,0.4,1.)+\n                vec4(heart0r,heart0g,heart0b,1.)+\n                vec4(10.,5.,0.3,1.)*line+\n                vec4(0.9,0.04,base0,1.)*centermask;\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    float soundLog;\n    if(fragCoord.y>1.)\n    {\n        soundLog = texelFetch(iChannel1,ivec2(fragCoord.x,fragCoord.y-1.),0).x;\n    }\n    else\n    {\n        soundLog = texelFetch(iChannel0,ivec2(fragCoord),0).x;\n    }\n    \n    fragColor = vec4(soundLog);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define Msin(t) sin(t)*0.5+0.5\n#define PI 3.1415926\n#define TwoPI 6.28318531\nfloat VIEW_SCALE = 0.02;\n\nfloat Line(vec2 a, vec2 b, vec2 U)    // --- Distance to a line segment https://www.shadertoy.com/view/llySRh\n{   \n    U -= a, b -= a;\n\tfloat h = dot( U, b ) / dot(b,b),\n          c = clamp(h, 0., 1.);\n    //return h==c ? length( U - b * c ) : 1e5;   // dist to strict segment\n  return        length( U - b * c );         // dist to segment with round ends\n}\n\nvec4 ParametricEquations(float time,float dt)\n{\n    \n    float b = time+dt;\n    \n    \n    return vec4(16.*sin(time)*sin(time)*sin(time),\n                13.*cos(time)-5.*cos(2.*time)-2.*cos(3.*time)-cos(4.*time),\n                16.*sin(b)*sin(b)*sin(b),\n                13.*cos(b)-5.*cos(2.*b)-2.*cos(3.*b)-cos(4.*b)\n    \n    );\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv =  fragCoord/iResolution.y+vec2((iResolution.y-iResolution.x)/(2.0*iResolution.y),0.0)-vec2(0.5,0.5);\n    vec2 polar = vec2(sqrt(dot(uv,uv)),fract(atan(uv.x,uv.y)/TwoPI));\n    \n    float pix = 2. / iResolution.y / VIEW_SCALE;\n    //float base = vec4(texelFetch(iChannel1,ivec2(1,0),0)).x;\n    //base =base*-0.3+1.;\n    uv = uv/VIEW_SCALE;\n    vec4 pos = ParametricEquations(iTime*50.,20./iFrameRate);\n    float dline = Line(pos.xy,pos.zw,uv);\n    dline =1.0-smoothstep( 0.0, pix+1.58, sqrt(sqrt(abs(dline)))) ;\n    vec4 col = dline*vec4(1.0,1.0,1.0,0.0);\n    \n    //dLine = smoothstep(1.0,0.,dLine);\n    //float Line = max(Xaxi,dLine);\n    \n    col =  max(texture(iChannel0,fragCoord/iResolution.xy)*0.99,col);\n    \n    //fragColor = vec4(polar,0.,0.);\n    fragColor = vec4(col);\n}","name":"Buffer B","description":"","type":"buffer"}]}