{"ver":"0.1","info":{"id":"ddf3Rs","date":"1666637179","viewed":214,"name":"Artober - Low poly","username":"Flopine","description":"Day 21 of artober challenge, I can do it!! Hopefully XD","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","torus","animation","dithering","bayer","everyday"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define PI acos(-1.)\n\nfloat box2D (vec2 p, float c)\n{\n    vec2 q = abs(p)-c;\n    return min(0., max(q.x,q.y))+length(max(q,0.));\n}\n\n// found in iq's shader\n// https://www.shadertoy.com/view/7tSXzt\n// signed distance to a n-star polygon with external angle en\nfloat sdRegularPolygon(in vec2 p, in float r, in int n )\n{\n    // these 4 lines can be precomputed for a given shape\n    float an = PI/float(n);\n    vec2  acs = vec2(cos(an),sin(an));\n\n    // reduce to first sector\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n\n    // line sdf\n    p -= r*acs;\n    p.y += clamp( -p.y, 0.0, r*acs.y);\n    return length(p)*sign(p.x);\n}\n\nfloat tore (vec3 p, vec2 d, float dir)\n{   \n    vec2 q = vec2(sdRegularPolygon(p.xy, d.x, 10), p.z);\n    float anim = atan(p.y,p.x)+(iTime*.7*dir);\n    q *= rot(anim);\n    //q = abs(q)-d.y*1.5;\n   \n    return box2D(q,  d.y);\n}\n\nfloat SDF (vec3 p)\n{\n    return min(\n            min(\n            tore(p, vec2(0.7, .15), 1.), \n            tore(p, vec2(1.2, .15), -1.)\n            ),\n            tore(p, vec2(1.7, .15), 1.)\n        );\n}\n\nvec3 gn (vec3 p)\n{\n    vec2 eps = vec2(0.001, 0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0.001, 0.001, -2.), rd=normalize(vec3(uv,1.)), p=ro,\n    col = vec3(clamp(abs(uv.y)-.05, 0., .99)), \n    l=normalize(vec3(0., 5., -2.));\n    \n    bool hit=false;\n    for (float i=0.; i<24.; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            hit=true; break;\n        }\n        p += d*rd;\n    }\n    \n    if (hit)\n    {\n        vec3 n = gn(p);\n        float li = max(dot(n,l), 0.);\n        col = vec3(li);\n    }\n    \n    float dit = texture(iChannel0, fragCoord.xy/8.).r;\n    float detail = 2.;\n    col += dit/detail;\n    col = floor(col*detail)/detail;\n    \n    // Output to screen\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}