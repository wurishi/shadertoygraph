{"ver":"0.1","info":{"id":"DlVcWK","date":"1700674460","viewed":46,"name":"Alien in cosmic diamond","username":"nayk","description":"cosmic,stars, alien, space, copy past\n\nThank you very much everyone for the shaders and encodings","likes":2,"published":1,"flags":1,"usePreview":0,"tags":["space","stars","alien","cosmic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/* original   https://www.shadertoy.com/view/lslyRn  https://www.shadertoy.com/view/ldBXDD https://www.shadertoy.com/view/ctGyWK\nThank you very much everyone for the shaders and encodings*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n#define R mat2(cos(a/4.+vec4(0,11,33,0)))\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n             p.xy*=mat2(cos(iTime*0.01),sin(iTime*0.01),-sin(iTime*0.01),cos(iTime*0.01));// the magic formula// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\t\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.1; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n    \n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,iTime*0.05);\n   \n    \n    // distance of current pixel from center\n\tfloat cLength = length(uv);\n\n\t dir.xy+=(uv/cLength)*cos(cLength*12.0-iTime*4.0) * 0.03;\n\tfloat time=iTime*speed+.25;\n    vec4 O=fragColor;\n    vec2 I =fragCoord;\n vec4 h; O=++h;\n    \n    //Uvs and resolution for scaling\n    vec2 u,r=iResolution.xy;\n    //Alpha, length, angle and iterator/radius\n    for(float A,l,a,i=.6;i>.1;i-=.1)\n        //Smoothly rotate a quarter at a time\n        a-=sin(a-=sin(a=(iTime+i)*4.)),\n        //Scale and center\n        u=(I+I-r)/r.y,\n        //Compute round square SDF\n        l=max(length(u-=R*clamp(u*R,-i,i)),.1),\n        //Compute anti-aliased alpha using SDF\n        A=min((l-.1)*r.y*.2,1.),\n        //Pick layer color\n        O=mix(h=sin(i/.1+a/3.+vec4(1,3,5,0))*.2+.7,O,A)*\n        //Soft shading\n        mix(h/h,h+.5*A*u.y/l,.1/l);\n\tfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n    \n\tmat2 ma = mat2(co, si, -si, co);\n    dir.xy*=ma*O.xy;\n\tvec3 from=vec3(1.,.5,0.5);\n\tfrom+=vec3(time*2.,time,-2.);\n\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n}\n","name":"Image","description":"","type":"image"}]}