{"ver":"0.1","info":{"id":"3sVSDt","date":"1575341294","viewed":58,"name":"The Checkerboard Repost","username":"coltMagri","description":"Checkerboard, reposted because old link was dead","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["checker"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float collumns = 7.0;\nfloat rows = 7.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float aspectRatio = iResolution.y / iResolution.x;\n    \n    uv.y *= aspectRatio;\n    \n    vec3 col = vec3(1.0,1.0,1.0);\n    \n    // Create the dimension values by multipying x and y by amount of rows and collumns, and returns integer\n    float dimY = floor(uv.y * collumns);\n    float dimX = floor(uv.x * rows);\n    \n    // Create the pattern effect\n    // Essentially a mod statement for each dimension. By using mod with 2.0, the checkerboard effect is ccreated\n    // Using any other value for the mod creates different wacky patterns\n    vec2 pattern = vec2(mod(dimX, 2.0), mod(dimY, 2.0));\n    \n    //Calculates the final value to be used in RGB, returning a value from 0 - 1\n    //Uses two step functions between y and x interchangebly, then mixes with 0.5 (half) to combine results, essentially\n    float finalValue = mix(step(pattern.y,pattern.x),step(pattern.x,pattern.y),0.5);\n    \n    fragColor = vec4(finalValue,finalValue,finalValue,1.0);\n}","name":"Image","description":"","type":"image"}]}