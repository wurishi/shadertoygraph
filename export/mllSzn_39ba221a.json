{"ver":"0.1","info":{"id":"mllSzn","date":"1674218024","viewed":47,"name":"First Ray marching on a sphere!","username":"benjik42","description":"Hey ! Here it is my first ray march! very happy with it !","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarchingbeginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\n\n\nvec2 rotate(vec2 uv, float th){\n    return mat2(cos(th),sin(th),-sin(th),cos(th))*uv;\n\n}\nfloat sdSphere(vec3 p, float r,vec3 offset )\n{\n    vec2 rotated = rotate(p.xz, iTime);\n    p.x = rotated.x ;\n    p.z = rotated.y ;\n    return length(p - offset) - r;\n}\n\nfloat sdScene(vec3 p) {\n  float sphereLeft = sdSphere(p, 1.,vec3(2,0,0));\n  float sphereRight = sdSphere(p, 1.,vec3(-2,0,0));\n  return min(sphereLeft, sphereRight);\n}\n\n\nfloat rayMarch(vec3 ro, vec3 rd, float start, float end) {\n  float depth = start;\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    float d = sdScene(p);\n    depth += d;\n    if (d < PRECISION || depth > end) break;\n  }\n\n  return depth;\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n    float r = 1.; // radius of sphere\n    return normalize(\n      e.xyy * sdScene(p + e.xyy) +\n      e.yyx * sdScene(p + e.yyx) +\n      e.yxy * sdScene(p + e.yxy) +\n      e.xxx * sdScene(p + e.xxx));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec3 backgroundColor = vec3(0.835, 1, 1);\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0, 5); // ray origin that represents camera position\n  vec3 rd = normalize(vec3(uv, -1)); // ray direction\n\n  float d = rayMarch(ro, rd, MIN_DIST, MAX_DIST); // distance to sphere\n\n  if (d > MAX_DIST) {\n    col = backgroundColor; // ray didn't hit anything\n  } else {\n    vec3 p = ro + rd * d; // point on sphere we discovered from ray marching\n    vec3 normal = calcNormal(p);\n    vec3 lightPosition = vec3(2, 2, 7);\n    vec3 lightDirection = normalize(lightPosition - p);\n\n    // Calculate diffuse reflection by taking the dot product of \n    // the normal and the light direction.\n    float dif = clamp(dot(normal, lightDirection), 0.3, 1.);\n\n    // Multiply the diffuse reflection value by an orange color and add a bit\n    // of the background color to the sphere to blend it more with the background.\n    col = dif * vec3(1, 0.58, 0.29) + backgroundColor * .2;\n  }\n\n  // Output to screen\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}