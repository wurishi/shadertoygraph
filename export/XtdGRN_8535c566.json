{"ver":"0.1","info":{"id":"XtdGRN","date":"1468194553","viewed":268,"name":"Random connections","username":"dche","description":"For more 2D SDF functions, see https://www.shadertoy.com/view/XdGSWd.","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["2d","random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define goCount 10.\n#define goSize 1.\n\n// Anti-alias step function\nfloat aastep(float threshold, float value) {\n    float afwidth = 0.7 * length(vec2( dFdx(value), dFdy(value)));\n    return smoothstep(threshold - afwidth, threshold + afwidth, value);\n}\n\nfloat opU(float d0, float d1) {\n    return min(d0, d1);\n}\n\nfloat opI(float d0, float d1) {\n    return max(d0, d1);\n}\n\nfloat opS(float d0, float d1) {\n    return max(d0, -d1);\n}\n\nvec2 opRep(vec2 p, vec2 c) {\n    return mod(p, c) - c * 0.5;\n}\n\n// circle: (center.x, center.y, radius)\nfloat sdCircle(vec2 p, vec3 circle) {\n    return length(p - circle.xy) - circle.z;\n}\n\nfloat sdHalfPlane(vec2 p, vec2 plane) {\n    return dot(p, normalize(plane));\n}\n\nfloat sdSegment(vec2 p, vec2 a, vec2 b) {\n    vec2 np = p - a;\n    vec2 ns = b - a;\n    float proj = dot(np, ns) / length(ns);\n    float d = sdHalfPlane(np, vec2(ns.y, -ns.x));\n    float s = sign(d);\n    if (proj < 0.) return s * length(np);\n    if (proj > length(ns)) return s * length(np - ns);\n    else return d;\n}\n\nvec4 fill(float shape, vec4 color) {\n    return vec4(color.rgb, color.a * (1. - smoothstep(0., 1.5, shape)));\n}\n\nvec4 stroke(float shape, vec4 color, float width) {\n    float w = 1. - aastep(width * 0.5, abs(shape));\n    // float w = 1. - step(width * 0.5, abs(shape));\n    // float b = 1. - smoothstep(0., 1., abs(abs(shape) - width * 0.5));\n    float a = min(w, 1.);\n    return vec4(color.rgb, color.a * a);\n}\n\nvec3 blend(vec4 fg, vec3 bg) {\n    return mix(bg, fg.rgb, fg.a);\n}\n\nfloat rand( vec2 co ) {\n    return fract( sin( dot( co.xy, vec2( 12.9898, 78.233 ) ) ) * 43758.5453 );\n}\n\nvec2 hash22(vec2 p)\n{\n    p = vec2( dot(p,vec2(127.1,311.7)),\n              dot(p,vec2(269.5,183.3)));\n\n    return fract(sin(p)*43758.5453123) + 0.5;\n}\n\nfloat noise(vec2 p)\n{\n    vec2 pi = floor(p);\n    vec2 pf = p-pi;\n\n    vec2 w = pf*pf*(3.-2.*pf);\n\n    float f00 = dot(hash22(pi+vec2(.0,.0)),pf-vec2(.0,.0));\n    float f01 = dot(hash22(pi+vec2(.0,1.)),pf-vec2(.0,1.));\n    float f10 = dot(hash22(pi+vec2(1.0,0.)),pf-vec2(1.0,0.));\n    float f11 = dot(hash22(pi+vec2(1.0,1.)),pf-vec2(1.0,1.));\n\n    float xm1 = mix(f00,f10,w.x);\n    float xm2 = mix(f01,f11,w.x);\n\n    float ym = mix(xm1,xm2,w.y);\n    return ym + 0.5;\n}\n\nvec3 alpha_go(vec2 p) {\n    // moving slowly. NOTE: artifacts appear.\n    p -= iTime * 2.;\n    vec3 col = vec3(.1, .2, .5);\n    float r2 = iResolution.x / goCount;\n    vec2 c = floor(p / r2);\n    // circle\n    p = opRep(p, vec2(r2));\n    float r = r2 * 0.5 - 2.;\n    r *= 0.2 + goSize * 0.8;\n    float d = sdCircle(p, vec3(0., 0., r));\n    float cd = rand(c) * 0.5;\n    // ring\n    float t = 2. + r * 0.15 * (0.5 + 0.5 * sin(iTime * cd * 2.));\n    d = opS(d, sdCircle(p, vec3(0., 0., r - t)));\n    // fill\n    vec3 clr = vec3(.9, .9, .89);\n    float a = 0.5 + 0.3 * sin(iTime * cd);\n    col = blend(fill(d, vec4(clr, a)), col);\n    // center.\n    d = sdCircle(p, vec3(0., 0., 3.));\n    col = blend(fill(d, vec4(.9, .9, .89, 1.)), col);\n    // links.\n    // ml = left middle point.\n    vec2 ml = vec2(c.x - 0.5, c.y) + iTime * 0.1;\n    vec2 mr = vec2(c.x + 0.5, c.y) + iTime * 0.1;\n    vec2 mu = vec2(c.x, c.y + 0.5) + iTime * 0.1;\n    vec2 md = vec2(c.x, c.y - 0.5) + iTime * 0.1;\n    float f = noise(ml);\n    float hl = r2 * 0.5;\n    d = sdSegment(p, vec2(0., 0.), vec2(-hl, 0.));\n    f = (clamp(f, 0.6, 0.65) - 0.6) * 20.;\n    col = blend(stroke(d, vec4(vec3(1.), f), 2.), col);\n    f = noise(mr);\n    d = sdSegment(p, vec2(0., 0.), vec2(hl, 0.));\n    f = (clamp(f, 0.6, 0.65) - 0.6) * 20.;\n    col = blend(stroke(d, vec4(vec3(1.), f), 2.), col);\n    f = noise(mu);\n    d = sdSegment(p, vec2(0., 0.), vec2(0., hl));\n    f = (clamp(f, 0.6, 0.65) - 0.6) * 20.;\n    col = blend(stroke(d, vec4(vec3(1.), f), 2.), col);\n    f = noise(md);\n    d = sdSegment(p, vec2(0., 0.), vec2(0., -hl));\n    f = (clamp(f, 0.6, 0.65) - 0.6) * 20.;\n    col = blend(stroke(d, vec4(vec3(1.), f), 2.), col);\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = fragCoord.xy - iResolution.xy * 0.5;\n    fragColor = vec4(alpha_go(p), 1.0);\n}","name":"Image","description":"","type":"image"}]}