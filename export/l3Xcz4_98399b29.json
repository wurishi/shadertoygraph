{"ver":"0.1","info":{"id":"l3Xcz4","date":"1729167234","viewed":47,"name":"[JFIG2024] Bretzel equation","username":"FabriceNeyret2","description":"the Bretzel equation :-p\nMouse controls camera\n\nref img: https://www.gastronomiac.com/lexique_culinaire/bretzel/\nmore: https://www.google.com/search?q=bretzel&udm=2\nreport: https://drive.google.com/file/d/1K50YnhApcdOV4RuqUTtl42JZqdxgMkm9/view?usp=sharing","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["short","spheremarching","reproduction","pretzel","concoursjfig2024"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R      iResolution\n#define rot(a) mat2(cos(a+vec4(0,33,11,0)))                              // rot2\n#define rot3(P,A,a) ( mix( A*dot(P,A), P, cos(a) ) + sin(a)*cross(P,A) ) // rot3\n#define H(p)   fract(1e3*sin( (p) * mat3(R,71.-R,37.+R)))                // hash\n\nfloat b,p,s;                                                             // dist to bretzel, plane, salt\n\nfloat B(vec3 P) {                                                        // --- Bretzel SDF\n    float d=1.,t, l;\n    vec3 P0, P1, C;\n    for( l = -1.; l < 1.; l += .03, P0 = P1 )                            // iterates along the curve parameter\n        t = l*4.9,                                                       // the Bretzel equation https://www.desmos.com/3d/hjckevlsql\n        P1 = vec3( cos( .095*(exp(abs(t)/1.4)-1.) ) * vec2(cos(t),sin(t)) , .2*mix( sin(1.81*t), 1.4 , abs(l*l*l)) ).xzy,    \n        d = l>-1. ? C = P1-P0, P0 = P-P0, min( d, length(P0 - C * clamp(dot(P0, C) / dot(C, C), 0., 1.) ) -.18 ) : d; // draw segment P0-P1 https://iquilezles.org/articles/distfunctions/\n                                      //  min( d, line(P,P0,P1) -.18 ) : d\n    if (d < .03 ) {                                                      // we are near the bretzel surface\n        s = 1.;                                                          // --- salt\n        for( int k; k < 8; k++ )                                         // check neighborhood for crystal seed\n            C = floor(7.*P) + vec3(k%2,k/2%2,k/4),\n            C = abs( rot3(C-7.*P, normalize(H(C+.5)), 1.) + H(C) -.5  ), // distance to seed +Â random rotate\n            s = min(s, max(C.x,max(C.y,C.z)) -.05 );                     // cube SDF\n        d = min( d, s/=7. );                    \n    }\n    return min( b = d, p = P.y+.2 );                                     // --- plane SDF\n}   // +out : b,p,s,  dist to bretzel, plane, salt \n\nvoid mainImage( out vec4 O, vec2 u ) {\n    vec3 L = vec3(0,1,0),                                                // light direction\n         P = vec3(0,0,3),                                                // eye position, then sample along ray\n         D = normalize(vec3( u - .5*R.xy, -R.y )),                       // ray direction\n         M = -6.*( iMouse.z > 0. ? iMouse.xyz/R -.5 :                    // for camera. comment for no mouse cam\n                   vec3( .15,.08,0) * cos(.3*iTime + vec3(0,11,0)) ),\n         e = vec3(1,1,-1)*.01, N;                                        // for normal evaluation\n \n    P.yz *= rot(M.y-.9),                                                 // --- rotations\n    P.xz *= rot(M.x);\n    D.yz *= rot(M.y-.9),                          \n    D.xz *= rot(M.x);\n    float d = 1., i;                                                     // --- sphere-march scene\n    for ( ; i++ < 250. && d > .01; P += d*D )\n        d = B(P);\n                                                                         // --- color scheme\n    bool tab = d==p, sal = d==s;                                         // object hit: table, salt, otherwise bretzel\n    #define n(c) e.c * B( P + e.c )\n    N = normalize( vec3( n(zxx) + n(xzx) + n(xxz) + n(zzz) ) )           // normal by tetrahedron FD https://iquilezles.org/articles/normalsSDF/\n        + ( tab ? N-N : .2*texture(iChannel3,2.*P*vec3(1,7,1)).xyz-.1 ); // + bump\n    O = d < .01                                                          // if hit:    \n        ? (   .3 + .7*dot(N,L) )                                         //   pseudo-diffuse:\n            * ( tab ? texture(iChannel1,.3*P.xz)                         //     table color\n                      *(.3+.7*smoothstep(.1,.3,b) )                      //     pseudo-shadow\n              : sal ? vec4(2)                                            //     salt color\n              : vec4(1,.6,.25,1) )                                       //     bretzel color\n            + pow(max(0.,dot(N,(L-D)/2.)),20.)                           //   specular:\n            * ( tab ? 1. : .7 )                                          //     specularity map\n         // * ( tab ? 1. : texture(iChannel0,P.xz).r )                   //    \n        : texture(iChannel2,D);                                          // else environment\n}\n","name":"Image","description":"","type":"image"}]}