{"ver":"0.1","info":{"id":"lfBBDd","date":"1725644274","viewed":62,"name":"Spiral Distortion Transition","username":"wilkie","description":"Just a simple spiral distortion and fade to represent a transition between two texture sources.\n\nMy trig seems a little jank... 3am maths. Would probably look better with a finite spiral instead of an infinite one.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["spiral","transition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// MIT License\n// wilkie\n\n#define PI 3.1415926\n#define TAU (PI * 2.0)\n\nfloat speed = 2.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Normalized pixel coordinates where 0, 0 is the center\n    vec2 cuv = uv - vec2(0.5, 0.5);\n    \n    // Convert to polar\n    float theta = atan(cuv.x, cuv.y);\n    float r = length(cuv);\n    \n    float period = (cos(iTime * speed / 2.0) + 1.0) / 2.0;\n    float frequency = (-cos(iTime * speed) + 1.0) * 8.0;\n    \n    // Angle of spiral (phi)\n    float phi = (log(r) * frequency - theta) / TAU;\n    \n    // Spiral radius\n    float sr = exp((TAU * floor(phi) + theta) / frequency);\n    \n    // Detect distance to spiral\n    vec2 suv = vec2(sr * cos(phi), sr * sin(phi));\n    float dr = length(suv) / r;\n    \n    // Compute this coordinate with distortion\n    vec3 col = mix(\n        texture(iChannel0, uv + sin(dr) * 0.1).rgb,\n        texture(iChannel1, uv + sin(dr) * 0.1).rgb,\n        period\n    );\n        \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}