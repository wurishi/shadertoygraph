{"ver":"0.1","info":{"id":"4fBczd","date":"1722893423","viewed":80,"name":"partially symmetric hexahedron","username":"jt","description":"A partially symmetric hexahedron (mirror-symmetries along axes).\nSo far exact only when slopes not to extreme. I hope to fix that someday...\nTODO: simplify","likes":7,"published":1,"flags":0,"usePreview":1,"tags":["sdf","distance","euclidean","signed","hexahedron","irregular","debugger","symmetric","partially"],"hasliked":0,"parentid":"DdX3z4","parentname":"euclidean distance sdf debugger"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/4fBczd partially symmetric hexahedron, 2024 by jt\n// using https://www.shadertoy.com/view/DdX3z4 euclidean distance sdf debugger\n\n// A partially symmetric hexahedron (mirror-symmetries along axes).\n// So far exact only when slopes not to extreme. I hope to fix that someday...\n\n// tags: sdf, distance, euclidean, signed, hexahedron, irregular, debugger, symmetric, partially\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n#define VERIFY_INTERIOR /* thanks to spalmer - detects broken SDFs (can cause more false alarms) */\n#define VERIFY_EXTERIOR /* thanks to spalmer - detects broken SDFs (can cause more false alarms) */\n// (See e.g. https://www.shadertoy.com/view/ddXGDr verify SDF error detection for test on deliberately incorrect SDF)\n// #define VERIFY_GRADIENT_CONTINUITY_ALONG /* WARNING: detects change of direction along gradients but causes false alarms e.g. outwards from box vertices */\n#define VERIFY_GRADIENT_CONTINUITY_SIDEWAYS /* WARNING: detects change of direction in \"parallel\" gradients but causes false alarms where gradients curve (e.g. towards sphere center) or at reflections/symmetries */\n\n#define AA 1\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 500u\n\n#define pi 3.1415926\n\nfloat slice_z()\n{\n    return cos(iTime*0.5)*0.4-0.4; // TWEAK SLICE-PLANE HERE\n    //return cos(iTime*0.5)*2.0;\n}\n\nfloat line(vec3 p, vec3 a, vec3 b)\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = dot(pa,ba)/dot(ba,ba);\n    return length(pa - ba*h);\n}\n\nvec3 point_from_three_planes(vec4 p0, vec4 p1, vec4 p2) // https://www.shadertoy.com/view/McXyDM intersection point from 3 planes (jt)\n{\n    // wxMaxima solve([n_0_x*x+n_0_y*y+n_0_z*z=n_0_w,n_1_x*x+n_1_y*y+n_1_z*z=n_1_w,n_2_x*x+n_2_y*y+n_2_z*z=n_2_w],[x,y,z]); then manually simplified\n    return\n        vec3 // can this be further compactified? (perhaps by using determinant?)\n        (\n            dot(p0.wyz,cross(p1.wyz,p2.wyz)),\n            dot(p0.xwz,cross(p1.xwz,p2.xwz)),\n            dot(p0.xyw,cross(p1.xyw,p2.xyw))\n        )\n        /\n        dot(p0.xyz,cross(p1.xyz,p2.xyz));\n}\n\nfloat plane(vec3 n, vec3 q, vec3 p)\n{\n    return dot(n,p) - dot(n,q);\n}\n\nfloat hexahedron(vec3 p, vec2 x, vec2 y, vec2 z) // https://www.shadertoy.com/view/4fBczd partially symmetric hexahedron (jt)\n{\n    bvec3 oct = greaterThanEqual(p, vec3(0)); // octant of point relative to center [0,1]\n    ivec3 dir = ivec3(oct) * 2 - 1; // direction of octant [-1,+1]\n    vec3 x0 = normalize(vec3(+dir.x,x.x,x.y));\n    vec3 y0 = normalize(vec3(y.x,+dir.y,y.y));\n    vec3 z0 = normalize(vec3(z.x,z.y,+dir.z));\n\n    vec3 q = point_from_three_planes(vec4(x0,1),vec4(y0,1),vec4(z0,1)); // vertex\n    vec3 xy0 = normalize(cross(x0,y0));\n    vec3 yz0 = normalize(cross(y0,z0));\n    vec3 zx0 = normalize(cross(z0,x0));\n    vec3 yx0 = -xy0;\n    vec3 zy0 = -yz0;\n    vec3 xz0 = -zx0;\n\n    vec3 xyx = normalize(cross(xy0,x0));\n    vec3 yzy = normalize(cross(yz0,y0));\n    vec3 zxz = normalize(cross(zx0,z0));\n\n    vec3 yxy = normalize(cross(yx0,y0));\n    vec3 zyz = normalize(cross(zy0,z0));\n    vec3 xzx = normalize(cross(xz0,x0));\n\n    bvec3 sgn =\n        greaterThanEqual\n        (\n            vec3 // distance to three nearest halfspaces in every direction\n            (\n                plane(xy0, q, p),\n                plane(yz0, q, p),\n                plane(zx0, q, p)\n            ),\n            vec3(0)\n        ); // outside of halfspace?\n\n    float flip = oct.x != oct.y != oct.z ? +1.0 : -1.0;\n\n    if(flip * plane(xy0, q, p) < 0.0 && plane(xyx, q, p) > 0.0 && plane(yxy, q, p) > 0.0) return line(p, q-xy0,q+xy0);\n    if(flip * plane(yz0, q, p) < 0.0 && plane(yzy, q, p) > 0.0 && plane(zyz, q, p) > 0.0) return line(p, q-yz0,q+yz0);\n    if(flip * plane(zx0, q, p) < 0.0 && plane(zxz, q, p) > 0.0 && plane(xzx, q, p) > 0.0) return line(p, q-zx0,q+zx0);\n\n    if(sgn == bvec3(oct.x != oct.y != oct.z))\n        return length(p-q);\n\n    return\n        //min\n        (\n            max\n            (\n                max\n                (\n                    plane(x0, q, p),\n                    plane(y0, q, p)\n                ),\n                plane(z0, q, p)\n            )//,\n            //min\n            //(\n            //    min\n            //    (\n            //        line(p, q-xy0,q+xy0) - 0.025,\n            //        line(p, q-yz0,q+yz0) - 0.025\n            //    ),\n            //    min\n            //    (\n            //        line(p, q-zx0,q+zx0) - 0.025,\n            //        length(p-q) - 0.1\n            //    )\n            //)\n        );\n}\n\nvec2 polar(float t)\n{\n    return vec2(cos(t), sin(t));\n}\n\nfloat map(vec3 p) // PLACE SDF TO DEBUG HERE\n{\n    float t = pi * 2.0 * iTime / 12.0;\n    //return hexahedron(p, vec2(0.1,0), vec2(0.2,0), vec2(0.3,0));\n    return hexahedron(p, 0.2 * polar(t*1.0), 0.2 * polar(t*3.0), 0.2 * polar(t*3.0)) - 0.2*(0.5+0.5*cos(t*4.0));\n}\n\nvec3 gradient(vec3 p) // NOT normalized so we can use it's length to detect errors in the SDF.\n{\n    vec2 h = vec2(EPSILON,0);\n    return (vec3(map(p+h.xyy) - map(p-h.xyy),\n                 map(p+h.yxy) - map(p-h.yxy),\n                 map(p+h.yyx) - map(p-h.yyx)))/EPSILON/2.0;\n}\n\nfloat trace(vec3 ro, vec3 rd) // iteration count limited to avoid stalling if ray passes very close to surface\n{\n    float t;\n    uint i;\n    for(i = 0u, t = 0.0; i < ITER_MAX && t < DIST_MAX; i++)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return DIST_MAX;\n}\n\nvec3 hash33(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n/*\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n// implementing Chris Wellons' https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n*/\nvec4 trace_slice(vec3 ro, vec3 rd)\n{\n    vec3 planecolor = vec3(0);\n    // z = ro.z+d*rd.z\n    // z-ro.z = d*rd.z\n    // (z-ro.z)/rd.z = d\n    float dist = (slice_z()-ro.z)/rd.z;\n    if(dist > 0.0)\n    {\n        vec3 dst = ro + rd * dist;\n        float d = map(dst);\n        float n = length(gradient(dst));\n\n        d /= 5.0; // SCALE SDF VISUALIZATION\n\n        // iq's sdf visualization colors\n        planecolor = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n        planecolor *= 1.0 - exp(-24.0 * abs(d));\n        planecolor *= 0.8 + 0.2 * cos(240.0*d);\n        planecolor = mix(planecolor, vec3(1.0), 1.0 - smoothstep(0.0, 0.01, abs(d)));\n\n        planecolor = mix(planecolor, vec3(0,1,0), smoothstep(1.0,1.0-EPSILON, n)); // gradient too small? GREEN\n        planecolor = mix(planecolor, vec3(1,0,0), smoothstep(1.0,1.0+EPSILON, n)); // gradient too large? RED\n        //planecolor = mix(planecolor, vec3(0,0,1), smoothstep(0.0+EPSILON,0.0, n)); // gradient zero? BLUE\n\n        // The error detection is basically, quoting spalmer,\n        // \"one iteration of snap-point-to-(nearest-)surface algorithm\".\n        // Jump the distance given by the SDF at the current position\n        // along the gradient given by the SDF at the current position\n        // (direction to the nearest surface) and evaluate the SDF there.\n        // Because the SDF is supposed to describe the distance to the surface,\n        // the result should be (close to) zero.\n        //float error = map(dst - gradient(dst) * map(dst)); // SDF error detection thanks to spalmer!\n        float distance_towards_nearest_surface = map(dst);\n        vec3 direction_towards_nearest_surface = gradient(dst);\n        float error = map(dst - direction_towards_nearest_surface * distance_towards_nearest_surface);\n#ifdef VERIFY_INTERIOR\n        planecolor += smoothstep(0.0, sqrt(EPSILON),-error) * (cos(iTime*2.0*pi)*0.5+0.5); // SDF interior otherwise broken? WHITE, BLINKING (can cause false alarms)\n#endif\n#ifdef VERIFY_EXTERIOR\n        planecolor += smoothstep(0.0, sqrt(EPSILON),+error) * (cos(iTime*2.0*pi)*0.5+0.5); // SDF exterior otherwise broken? WHITE, BLINKING (can cause false alarms)\n#endif\n        //planecolor += smoothstep(0.0,sqrt(EPSILON), abs(error)) * (cos(iTime*2.0*pi)*0.5+0.5); // SDF otherwise broken? WHITE, BLINKING\n#ifdef VERIFY_GRADIENT_CONTINUITY_ALONG\n        vec3 cross_surface_direction = gradient(dst - direction_towards_nearest_surface * (distance_towards_nearest_surface + sign(distance_towards_nearest_surface) * EPSILON));\n        float dir_error = dot(gradient(dst), cross_surface_direction);\n        planecolor += smoothstep(0.0,sqrt(EPSILON), abs(dir_error - 1.0)) * (cos(iTime*2.0*pi)*0.5+0.5); // SDF otherwise broken? WHITE, BLINKING\n#endif\n#ifdef VERIFY_GRADIENT_CONTINUITY_SIDEWAYS\n        //vec3 epsilon = (hash33(dst*100.0) * 2.0 - 1.0) * 0.1/*step-size*/;\n        vec3 epsilon = (hash33(dst*100.0) * 2.0 - 1.0) * 0.01/*step-size*/;\n        //if(abs(dot(gradient(dst-epsilon), gradient(dst+epsilon)) - 1.0) > 0.5/*sensitivity*/)\n        if(abs(dot(gradient(dst-epsilon), gradient(dst+epsilon)) - 1.0) > 0.05/*sensitivity*/)\n            //planecolor.z += 1.0;\n            planecolor += mix(vec3(1,0,1),vec3(0,1,1), 0.5 + 0.5 * cos(iTime * 5.0));\n#endif\n    }\n\n    return vec4(planecolor, dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 o = ivec2(0);\n    vec3 sum = vec3(0);\n    for(o.y = 0; o.y < AA; o.y++)\n    {\n        for(o.x = 0; o.x < AA; o.x++)\n        {\n            vec2 uv = (fragCoord.xy + vec2(o) - vec2(AA-1)*0.5) / iResolution.xy;\n            vec2 ndc = 2.0 * uv - 1.0;\n            ndc.x *= float(iResolution.x) / float(iResolution.y);\n            float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n            float my = pi - pi / 2.0 * float(iMouse.y) / float(iResolution.y);\n            mx = (iMouse.x > 10.0) ? mx : 2.0 * pi * fract(iTime * 0.05);\n            my = (iMouse.y > 10.0) ? my : 1.25 * pi / 2.0;\n\n            mat2 yaw = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n            vec3 ro = vec3(0.0, 0.5, -5.0 );//vec3(0.0, -10.0 * my, 0.0);\n            //mat2 Pitch = mat2(vec2(0.0, 1.0), vec2(-1.0, 0.0));\n            mat2 pitch = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n            ro.yz = pitch * ro.yz;\n            ro.xy = yaw * ro.xy;\n\n            vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n            rd.yz = pitch * rd.yz;\n            rd.xy = yaw * rd.xy;\n\n            vec4 slice = trace_slice(ro, rd);\n            vec3 scenecolor = vec3(0);\n\n            float dist = trace(ro, rd);\n            if(dist < DIST_MAX)\n            {\n                if(slice.w < 0.0)\n                    slice.w = DIST_MAX;\n                bool above = dist < slice.w;\n                if(above) // view only part above plane (comment-out to view whole shape)\n                {\n                    vec3 dst = ro + rd * dist;\n                    //vec3 dst = ro + rd * (dist - 0.005); // https://www.shadertoy.com/view/dldfW8 \"normal back-off\" method by elenzil\n                    vec3 n = normalize(gradient(dst)); // NOTE: gradient is unnormalized in case of errors!\n\n                    //vec3 lightdir = normalize(vec3(1, 1, 1));\n                    vec3 lightdir = normalize(vec3(0, 0, 1));\n                    vec3 ambient = vec3(0.1);\n                    float diffuse = max(dot(lightdir, n), 0.0);\n                    float specular = pow(max(dot(normalize(lightdir - rd), n), 0.0), 50.0);\n\n                    scenecolor = vec3(.1); // object color\n                    scenecolor = /*specular+*/ (ambient + diffuse) * scenecolor;\n\n                    {\n                        // transform normal to local coordinates\n                        n.xy = n.xy*yaw;\n                        n.yz = n.yz*pitch;\n                        scenecolor = max(scenecolor, smoothstep(0.8, 1.0, length(n.xy))); // rim-light\n                    }\n\n                    scenecolor = sqrt(scenecolor); // approximate gamma\n                }\n            }\n\n            vec3 planecolor = 1.5*slice.xyz*exp2(-slice.w*slice.w/20.0); // workaround: \"fog\" hides moiree pattern\n\n            vec3 color = scenecolor + planecolor; // TRANSPARENT\n            //vec3 color = mix(scenecolor, planecolor, step(slice.w, dist)); // SOLID\n            sum += color;\n        }\n    }\n\n    fragColor = vec4(sum/float(AA*AA), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}