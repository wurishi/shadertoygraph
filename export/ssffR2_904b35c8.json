{"ver":"0.1","info":{"id":"ssffR2","date":"1645076285","viewed":617,"name":"Glitch Box","username":"Xor","description":"This was a mistake","likes":20,"published":1,"flags":32,"usePreview":0,"tags":["golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Mountain Box: https://www.shadertoy.com/view/7sfBR2\n//<512 Chars playlist: shadertoy.com/playlist/N3SyzR\n\n#define T texture(iChannel0,I/iResolution.xy\nvoid mainImage( out vec4 O, vec2 I )\n{\n    O = T)+T,1.5)+T,4.5);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Mountain Box: https://www.shadertoy.com/view/7sfBR2\n\nvoid mainImage( out vec4 O, vec2 I )\n{\n    O-=O; //Clear color\n    \n    vec3 r = iResolution,\n    d = vec3(roundEven(I)*2.-r.xy,-r)/r.x, //Pixelated ray direction\n    p = 5./r,v; //Camera position\n    d.yz *= mat2(.8,.6,-.6,.8); //Rotate downward\n    \n    for(float i=0.,s,h=i,t = iTime; i++<9e2 && length(p)<6.;\n    \n        int(i)%6<1? //Step forward every 6 iterations\n        v = p,\n        v.xz *= mat2(cos(t*.2+vec4(0,11,33,0))), //Rotate\n        p += d*max(h*.1,0.), //Step forward (box and heightfield)\n        h = p.y-1. //Reset height\n        :\n        s = exp2(mod(i,6.)), //Update scale\n        h += 4.*texture(iChannel0,ceil(v*s+ceil(t*.3+I.y/1e5))/8e1).r/--s //Sample texture\n    );\n\n    O.rgb = fwidth(v)*r.x/8e1; //Compute color from position derivative\n    O *= O; //Boost contrast\n    O = min(O, 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}