{"ver":"0.1","info":{"id":"Wsyfzh","date":"1606524649","viewed":167,"name":"Floor is Lava","username":"chadmiral","description":"Lava!","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["voronoi","fire","lava","hot","magma","basalt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float depth = pow(uv.y, 2.0);\n    \n    \n    vec4 dist = texture(iChannel1, vec2(0.3, 0.15) * uv + vec2(0.0, iTime * 0.012));\n    vec2 distUV = uv + 0.011 * dist.xy;\n    distUV = mix(uv, distUV, depth);\n    vec4 buffA = texture(iChannel0, distUV);\n    \n    \n    // Output to screen\n    fragColor = vec4(buffA);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float CellSize = 0.35;\nfloat MinCrackSize = 1.4;\nfloat MaxCrackSize = 12.0;\nfloat CrackSharpness = 10.0;\nfloat FlowSpeed = 0.045;\nfloat NormalHeight = 1.0;\n\nvec3 FogColorNear = vec3(1.0, 0.0, 0.0);\nvec3 FogColorFar = vec3(1.0, 0.8, 0.9);\nvec3 LightDir = vec3(1.0, 0.0, 0.0);\nvec3 LightColor = 6.2 * vec3(1.0, 0.45, 0.3);\n\nvec2 rand2dTo2d(vec2 uv)\n{\n    return vec2(fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453),\n                fract(sin(dot(uv, vec2(15.6542, 96.4321))) * 67432.6573));\n}\n\nfloat rand3dTo1d(vec3 xyz)\n{\n    return fract(sin(dot(xyz, vec3(12.9898, 78.233, 81.654))) * 43758.5453);\n}\n\nvec3 rand3dTo3d(vec3 xyz)\n{\n    return vec3(fract(sin(dot(xyz, vec3(12.9898, 78.233, 81.654))) * 43758.5453),\n                fract(sin(dot(xyz, vec3(59.1254, 39.519, 29.468))) * 74271.8763),\n                fract(sin(dot(xyz, vec3(93.5218, 47.173, 73.915))) * 73105.2594));\n}\n\nvec3 voronoiNoise(vec3 value){\n    vec3 baseCell = floor(value);\n\n    //first pass to find the closest cell\n    float minDistToCell = 10.0;\n    vec3 toClosestCell;\n    vec3 closestCell;\n    for(int x1=-1; x1<=1; x1++){\n        for(int y1=-1; y1<=1; y1++){\n            for(int z1=-1; z1<=1; z1++){\n                vec3 cell = baseCell + vec3(x1, y1, z1);\n                vec3 cellPosition = cell + rand3dTo3d(cell);\n                vec3 toCell = cellPosition - value;\n                float distToCell = length(toCell);\n                if(distToCell < minDistToCell){\n                    minDistToCell = distToCell;\n                    closestCell = cell;\n                    toClosestCell = toCell;\n                }\n            }\n        }\n    }\n\n    //second pass to find the distance to the closest edge\n    float minEdgeDistance = 10.0;\n    for(int x2=-1; x2<=1; x2++){\n        for(int y2=-1; y2<=1; y2++){\n            for(int z2=-1; z2<=1; z2++){\n                vec3 cell = baseCell + vec3(x2, y2, z2);\n                vec3 cellPosition = cell + rand3dTo3d(cell);\n                vec3 toCell = cellPosition - value;\n\n                vec3 diffToClosestCell = abs(closestCell - cell);\n                bool isClosestCell = diffToClosestCell.x + diffToClosestCell.y + diffToClosestCell.z < 0.1;\n                if(!isClosestCell){\n                    vec3 toCenter = (toClosestCell + toCell) * 0.5;\n                    vec3 cellDifference = normalize(toCell - toClosestCell);\n                    float edgeDistance = dot(toCenter, cellDifference);\n                    minEdgeDistance = min(minEdgeDistance, edgeDistance);\n                }\n            }\n        }\n    }\n\n    float random = rand3dTo1d(closestCell);\n    return vec3(minDistToCell, random, minEdgeDistance);\n}\n\nvec3 getLavaColor(float temperature)\n{\n    return mix(vec3(1.0, 0.15, 0.02), vec3(1.0, 0.95, 0.1), temperature);\n}\n\nvec3 getBasaltColor(float height, float normalHeight)\n{\n    vec3 basaltAlbedo = vec3(0.15, 0.25, 0.3);\n    vec3 normal = normalize(normalHeight * vec3(dFdx(height), dFdy(height), 0.01));\n    float ndotl = clamp(dot(normal, normalize(LightDir)), 0.0, 1.0);\n    \n    //float lavaBlend = clamp(2.7 * pow(1.0 - height - 0.20, 2.0), 0.0, 1.0);\n    float lavaBlend = clamp(80.0 * pow(1.0 - height, 8.0), 0.0, 1.0);\n    //float lavaTemp = clamp(1.5 * pow(height, 1.5) - 0.25, 0.0, 1.0);\n    float lavaTemp = clamp(2.5 * pow(height, 2.6), 0.0, 1.0);\n    vec3 emissive = mix(vec3(0.0, 0.0, 0.0), getLavaColor(lavaTemp), lavaBlend);\n\n    //return vec3(emissive);\n    vec3 diffuse = ndotl * basaltAlbedo * LightColor;\n    return vec3(diffuse + emissive);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 perspUV = mix(uv, vec2(2.0 * (uv.x - 0.5), uv.y * 2.0), uv.y);\n    vec2 mouseUV = iMouse.xy / iResolution.xy;\n    \n    vec3 noiseTex0 = 1.0 - texture(iChannel0, 0.25 * perspUV + vec2(iTime * 0.002, 0.0)).rgb;\n    vec3 noiseTex1 = texture(iChannel1, 1.25 * perspUV).rgb;\n    vec3 noiseTex2 = texture(iChannel2, 0.6 * perspUV).rgb;\n    \n    float mouseDistance = length((uv - mouseUV));\n    float mouseTemp = 0.26 * clamp(1.0 - 3.0 * pow(mouseDistance, 1.0), 0.0, 1.0);\n    \n    float t = iTime * FlowSpeed;\n    \n    //perspective hack\n    float cellSize = mix(CellSize, CellSize / 3.0, uv.y);\n    //float cellSize = CellSize;\n\n    vec3 value = vec3(uv / cellSize, t);\n\tvec3 noise = voronoiNoise(value + 0.2 * noiseTex2.xyz);\n    \n    float temperature = clamp(mouseTemp + mix(0.1, 0.7, noiseTex0.x) * (1.0 - noise.z), 0.0, 1.0);\n\n    float crackSize = 30.0 / mix(MinCrackSize, MaxCrackSize, pow(temperature, 4.0));\n    float basaltMask = clamp(pow(crackSize * noise.z, CrackSharpness), 0.0, 1.0);\n    \n    float macroHeight = pow(clamp(pow(noise.z, 0.5) + 0.2, 0.0, 1.0), 2.0);\n    float height = macroHeight + 0.2 * (1.0 - noiseTex1.x);\n    vec3 lavaColor = getLavaColor(pow(1.48 * temperature, 3.8));\n    vec3 finalColor = mix(lavaColor, getBasaltColor(height, NormalHeight), basaltMask);\n    \n    //fog hack\n    finalColor = mix(finalColor, mix(FogColorNear, FogColorFar, uv.y), clamp(1.22 * uv.y - 0.25, 0.0, 1.0));\n    \n    // Output to screen\n    fragColor = vec4(finalColor.rgb, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}