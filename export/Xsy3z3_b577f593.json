{"ver":"0.1","info":{"id":"Xsy3z3","date":"1455512242","viewed":180,"name":"cube to octahedron","username":"ypn","description":"ray marching","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWO_PI 6.28318530718\n#define t iTime\n#define res iResolution.xy\n\nvec3 cpos = vec3(0.0, 0.0, 5.0);\nvec3 cdir = normalize(-cpos);\nvec3 cside = vec3(1.0, 0.0, 0.0);\nvec3 cup  = cross(cside, cdir);\nvec3 light = normalize(vec3(0.1, 0.2, 1.0));\n\nvec3 rotate(vec3 p, float angle, vec3 axis){\n    vec3 a = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float r = 1.0 - c;\n    mat3 m = mat3(\n        a.x * a.x * r + c,\n        a.y * a.x * r + a.z * s,\n        a.z * a.x * r - a.y * s,\n        a.x * a.y * r - a.z * s,\n        a.y * a.y * r + c,\n        a.z * a.y * r + a.x * s,\n        a.x * a.z * r + a.y * s,\n        a.y * a.z * r - a.x * s,\n        a.z * a.z * r + c\n    );\n    return m * p;\n}\n\nfloat cube( vec3 p, float s) {\n  vec3 d = abs(p) - s;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\n\nfloat octahedral(vec3 p, float s) {\n    vec3 d = abs(p);\n    return (d.x + d.y + d.z) / 3. - s * .5;\n}\n\nfloat dist(vec3 p) {\n    float d0 = cube(rotate(p, t, vec3(0.0,1.0,1.0)), 2.0);\n    float d1 = octahedral(rotate(p, t, vec3(0.0,1.0,1.0)),2.0);\n    float i = clamp(sin(t)*0.5+0.5 + iMouse.x, 0.0, 1.0);\n    return mix(d0,d1,i);\n}\n\nvec3 norm(vec3 p){\n\tvec2 d = vec2(0.001, 0.0);\n    float di = dist(p);\n\treturn normalize(vec3(di - dist(p - d.xyy), di - dist(p - d.yxy), di - dist(p - d.yyx)));\n}\n\nvec3 phong(vec3 p, vec3 ray) {\n    vec3 n = norm(p);\n    return vec3(0.2,0.2,0.2) * clamp(dot(light, n), 0.0, 1.0)\n\t\t+ pow(clamp(dot(normalize(light - ray), n), 0.0, 1.0), 256.0) * 0.6;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 p = (fragCoord.xy * 2.0 - res) / min(res.x, res.y);\n\tvec3 ray = normalize(cside * p.x + cup * p.y + cdir * 2.0);\n\n\tfloat len = 0.0, di;\n\tvec3 rhead = cpos;\n\tfor(int i = 0; i < 64; i++){\n\t\tdi = dist(rhead);\n        if (abs(di) < 0.001) {\n            break;\n        }\n\t\tlen += di;\n\t\trhead = cpos + len * ray;\n\t}\n\n\tvec3 color = vec3(1.0);\n\tif(abs(di) < 0.001){\n        color = phong(rhead, ray);\n\t} \n\tfragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}