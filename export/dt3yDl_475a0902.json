{"ver":"0.1","info":{"id":"dt3yDl","date":"1717328224","viewed":104,"name":"Some Space Elevator","username":"INCHMAN1900","description":"Space Elevator like animation by ray marching and cube SDF","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 50\n#define RES iResolution.xy\n\n// pick the smallest two component from the cube sdf.\nfloat sdf(vec3 pos, vec3 center, float size) {\n    vec3 q = abs(abs(pos - center) - size);\n    float m1 = max(q.x, q.y);\n    float m2;\n    if (q.z < m1) {\n        m1 = min(q.x, q.y);\n        m2 = q.z;\n    } else {\n        m2 = m1 == q.x ? q.y : q.x;\n    }\n    return m1 + m2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - RES) / RES.y;\n    vec3 cameraPos = vec3(sin(iTime) * sin(iTime * .7962) * 5., cos(iTime * 1.7185) * 5., -10. + sin(iTime) * 2.);\n    vec3 cubePos = vec3(0., 0., 0.);\n    float cubeSize = .4;\n    float u = 1. / RES.y * .1;\n    vec3 rayVec = vec3(uv - cameraPos.xy, -cameraPos.z);\n    vec3 rayDir = rayVec / length(rayVec);\n    \n    float stepDistance = 0.;\n    float maxDistance = 1000.;\n    \n    for (int i = 0; i < STEPS; i++) {\n        float dist = sdf(cameraPos + stepDistance * rayDir, cubePos, cubeSize);\n        float d = smoothstep(0.002 + u, 0.002, dist);\n        if (d > 0.) {\n            fragColor = vec4(1.);\n            return;\n        }\n        stepDistance += dist;\n    }\n    \n    fragColor = vec4(0.);\n}","name":"Image","description":"","type":"image"}]}