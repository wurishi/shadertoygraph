{"ver":"0.1","info":{"id":"4ftXD8","date":"1713873104","viewed":58,"name":"reeser00: Perlin Noise","username":"reeser00","description":"Perlin Noise and some variants.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["noise","perlin","billow","ridged"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"uniform float u_time;\n\nvec2 randomGradient(vec2 gridCorner) \n{\n    float x = dot(gridCorner, vec2(123.4, 234.5));\n    float y = dot(gridCorner, vec2(234.5, 345.6));\n    vec2 gradient = vec2(x, y);\n    gradient = sin(gradient);\n    gradient = gradient * 143758.;\n    gradient = sin(gradient + iTime);\n    return gradient;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    vec3 black = vec3(0.000,0.251,0.502);\n    vec3 white = vec3(0.000,0.502,0.753);\n    vec3 color = white;\n\n    //GRID\n    \n    uv = uv * 5.0;\n    vec2 gridId = floor(uv);\n    vec2 gridUv = fract(uv);\n    \n    color = vec3(gridId, 0.0);\n    color = vec3(gridUv, 0.0);\n    \n    \n    //GRADIENT\n    vec2 bl = gridId + vec2(0.0, 0.0);\n    vec2 br = gridId + vec2(1.0, 0.0);\n    vec2 tl = gridId + vec2(0.0, 1.0);\n    vec2 tr = gridId + vec2(1.0, 1.0);\n    \n    vec2 gradBl = randomGradient(bl);\n    vec2 gradBr = randomGradient(br);\n    vec2 gradTl = randomGradient(tl);\n    vec2 gradTr = randomGradient(tr);\n    \n    //FIND DISTANCE\n    vec2 distFromPixelToBl = gridUv - vec2(0.0, 0.0);\n    vec2 distFromPixelToBr = gridUv - vec2(1.0, 0.0);\n    vec2 distFromPixelToTl = gridUv - vec2(0.0, 1.0);\n    vec2 distFromPixelToTr = gridUv - vec2(1.0, 1.0);\n    \n    //CALCULATE DOT PRODUCTS\n    float dotBl = dot(gradBl, distFromPixelToBl);\n    float dotBr = dot(gradBr, distFromPixelToBr);\n    float dotTl = dot(gradTl, distFromPixelToTl);\n    float dotTr = dot(gradTr, distFromPixelToTr);\n    \n    \n    //SMOOTH OUT GRIDUVS\n    gridUv = smoothstep(0.0, 1.0, gridUv);\n    \n    \n    \n    //LINEAR INTERPOLATION\n    float b = mix(dotBl, dotBr, gridUv.x);\n    float t = mix(dotTl, dotTr, gridUv.x);\n    float perlin = mix(b, t, gridUv.y);\n    \n    color = vec3(perlin + 0.1);\n    \n    \n    //BILLOW NOISE\n    float billow = abs(perlin);\n    color = vec3(billow);\n    \n    //RIDGED NOISE\n    float ridgedNoise = 1.0 - abs(perlin);\n    ridgedNoise = ridgedNoise * ridgedNoise;\n    color = vec3(ridgedNoise);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}