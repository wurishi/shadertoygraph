{"ver":"0.1","info":{"id":"sslXRr","date":"1618723157","viewed":112,"name":"320_mudarova_v1v2","username":"Ramina","description":"Cube, glass","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["cube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(0, 2.3, -12);\nconst float GLASS_N = 1.5;\nconst float AIR_N = 1.0;\n \nvec3 randDir;\nvec3 randVals;\n \nstruct Sph {\n    vec3 pos;\n    float radius;\n    vec3 color;\n    float intensity;\n};\n \nconst int LIGHT_NUM = 2;\n \nSph lights[LIGHT_NUM] = Sph[LIGHT_NUM](\n    Sph(vec3(2, 0.1, -4), 0.35, vec3(1, 0, 1), 15.0),\n    Sph(vec3(-2, 1.5, 3), 0.5, vec3(1, 1, 1), 40.0)\n);\n\n \nconst int INS_NUM = 9;\n \nSph ins_cube[INS_NUM] = Sph[INS_NUM](\n    Sph(vec3(0.2, 0.1, -0.1), 0.2, vec3(5.9, 0.1, 0.9), 0.0),\n    Sph(vec3(-0.3, -0.1, 0.3), 0.25, vec3(0.8, 6.3, 0.1), 0.0),\n    Sph(vec3(1.2, 0.21, -0.5), 0.25, vec3(0.9, 0.1, 5.9), 0.0),\n    Sph(vec3(-0.9, -1.1, 1.13), 0.2, vec3(0.8, 7.3, 0.1), 0.0),\n    Sph(vec3(0.3, -0.1, 0.3), 0.15, vec3(6.8, 0.3, 0.1), 0.0),\n    Sph(vec3(0.32, 0.41, -0.61), 0.25, vec3(5.9, 5.1, 0.9), 0.0),\n    Sph(vec3(-0.53, -0.81, 0.73), 0.25, vec3(0.8, 0.3, 7.1), 0.0),\n    Sph(vec3(-0.45, 0.7, 0.3), 0.45, vec3(5.0, 0.0, 0.0), 0.0),\n    Sph(vec3(0.6, -0.9, -0.3), 0.35, vec3(0.8, 3.3, 4.3), 0.0)\n);\n \nstruct Cube {\n    vec3 a;\n    vec3 b;\n    vec3 c;\n    vec3 d;\n    vec3 e;\n    vec3 f;\n    vec3 g;\n    vec3 h;\n};\n \nCube cube = Cube(\n    vec3(-1.5, -1.5, -1.5),\n    vec3(-1.5, -1.5, 1.5),\n    vec3(1.5, -1.5, 1.5),\n    vec3(1.5, -1.5, -1.5),\n \n    vec3(-1.5, 1.5, -1.5),\n    vec3(-1.5, 1.5, 1.5),\n    vec3(1.5, 1.5, 1.5),\n    vec3(1.5, 1.5, -1.5)\n);\n \nvec3 rotate (vec3 p, vec3 r)\n{\n    p = vec3(p.x*cos(r.y)+p.z*sin(r.y), p.y,-p.x*sin(r.y)+p.z*cos(r.y));\t\n    return p;\n}\n \nfloat pow2(float x)\n{\n    return x * x;\n}\n \nbool equals(float a, float b)\n{\n    if (abs(a - b) < 0.0001) {\n        return true;\n    }\n    return false;\n}\n \nconst int EMISSION = 0;\nconst int DIFFUSE = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\n \nfloat rand(float frame) \n{\n    return fract(sin(dot(vec3(frame), vec3(12.9898, 78.233, 45.5432))) * 43758.5453);\n}\n \nfloat tracePlane (vec3 pos, vec3 dir, out vec3 normal)\n{\n    normal = vec3(0, 1, 0);\n    float t = (-2.0 - pos.y)/dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0){\n        return INF;\n    }  \n \n    return t;\n}\n \nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal)\n{\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n \n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n \n}\n \nfloat traceCube(vec3 pos, vec3 dir, out vec3 normal) \n{ \n    vec3 min = cube.a;\n    vec3 max = cube.g;\n \n    float tmin = (min.x - pos.x) / dir.x; \n    float tmax = (max.x - pos.x) / dir.x; \n \n    if (tmin > tmax) {\n        float tmp = tmin;\n        tmin = tmax;\n        tmax = tmp;\n    }\n \n    float tymin = (min.y - pos.y) / dir.y; \n    float tymax = (max.y - pos.y) / dir.y; \n \n    if (tymin > tymax) {\n        float tmp = tymin;\n        tymin = tymax;\n        tymax = tmp;\n    }\n \n    if ((tmin > tymax) || (tymin > tmax)) \n        return INF; \n \n    if (tymin > tmin) \n        tmin = tymin; \n \n    if (tymax < tmax) \n        tmax = tymax; \n \n    float tzmin = (min.z - pos.z) / dir.z; \n    float tzmax = (max.z - pos.z) / dir.z; \n \n    if (tzmin > tzmax) {\n        float tmp = tzmin;\n        tzmin = tzmax;\n        tzmax = tmp;\n    }\n \n    if ((tmin > tzmax) || (tzmin > tmax)) \n        return INF; \n \n    if (tzmin > tmin) \n        tmin = tzmin; \n \n    if (tzmax < tmax) \n        tmax = tzmax; \n \n    float t = tmin;\n    if (t < 0.0) {\n        t = tmax;\n        if (t < 0.0) {\n            return INF;\n        }\n    }\n \n    vec3 point = t * dir + pos;\n    if (equals(point.z, cube.a.z) && equals(point.z, cube.d.z) && \n            equals(point.z, cube.e.z) && equals(point.z, cube.h.z)) {\n        normal = vec3(0, 0, -1);\n    }\n    if (equals(point.x, cube.a.x) && equals(point.x, cube.b.x) && \n            equals(point.x, cube.e.x) && equals(point.x, cube.f.x)) {\n        normal = vec3(-1, 0, 0);\n    }\n    if (equals(point.z, cube.b.z) && equals(point.z, cube.c.z) && \n            equals(point.z, cube.f.z) && equals(point.z, cube.g.z)) {\n        normal = vec3(0, 0, 1);\n    }\n    if (equals(point.x, cube.c.x) && equals(point.x, cube.d.x) && \n            equals(point.x, cube.h.x) && equals(point.x, cube.g.x)) {\n        normal = vec3(1, 0, 0);\n    }\n    if (equals(point.y, cube.e.y) && equals(point.y, cube.f.y) && \n            equals(point.y, cube.g.y) && equals(point.y, cube.h.y)) {\n        normal = vec3(0, 1, 0);\n    }\n    if (equals(point.y, cube.a.y) && equals(point.y, cube.b.y) && \n            equals(point.y, cube.c.y) && equals(point.y, cube.d.y)) {\n        normal = vec3(0, -1, 0);\n    } \n    return t; \n} \n \nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal)\n{\n    float R = 2.5;\n    float H = 0.5;\n    float y = -1.5;\n    float t = (y - pos.y)/dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < R * R) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    float a = dot(dir.xz, dir.xz);\n    if (a == 0.0) {\n        return INF;\n    }\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - R * R;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n \n \n    if (t <= 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y < y && worldPos.y > y - H) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n \n    t = (-b + sqrt(D)) / a;\n    if (t <= 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y < y && worldPos.y > y - H) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n \n}\n \nvec3 refraction(vec3 v, vec3 normal, float n1, float n2, out bool isReflected)\n{\n    isReflected = false;\n    if(dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if(sinB > 1.0) {\n        isReflected = true;\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n \nbool isOccluded(vec3 pos, vec3 target)\n{\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n \n    vec3 cylinderNorm;\n    float cylinderT = traceCylinder(pos, dir, cylinderNorm);\n    if (cylinderT < dist) {\n        return true;\n    }\n    return false;\n}\n \nvec3 computeLight(vec3 pos, vec3 color, vec3 normal)\n{\n    vec3 k;\n \n    for (int i = 0; i < LIGHT_NUM; ++i) {\n        vec3 toLight = lights[i].pos - pos;\n        float distSq = dot(toLight, toLight);\n        float att = isOccluded(pos, lights[i].pos + randDir * lights[i].radius) ? 0.0 : lights[i].intensity / distSq;\n        k += max(0.0, dot(normal, normalize(toLight))) * att * lights[i].color\n        + texture(iChannel1, normal).rgb * 0.1;\n    }\n    return color * k;\n}\n \n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    randDir = normalize(randVals - 0.5);\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3 (0,1,0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right*uv.x + up*uv.y);\n \n    vec3 multColor = vec3(1.0, 1.0, 1.0);;\n \n \n    vec3 planeNorm;\n    vec3 camera_pos = CAMERA_POS;\n \n    bool isCube = false;\n \n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n \n    float rotation_val = 0.4;\n    camera_pos = rotate(camera_pos, vec3(rotation_val));\n    viewVec = rotate(viewVec, vec3(rotation_val));\t\n \n    vec3 curPos = camera_pos;\n    vec3 curDir = viewVec;\n \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    \n    for (int i = 0; i < 10; ++i) {\n        vec3 normal;\n        float t = INF;\n        int materialType = EMISSION;\n        vec3 color;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n\n        for (int i = 0; i < LIGHT_NUM; ++i) {\n            vec3 lnorm;\n            float lightT = traceSphere(curPos - lights[i].pos + randVals * 0.1, curDir, lights[i].radius, lnorm);\n            if (lightT < t)\n            {\n                t = lightT;\n                materialType = EMISSION;\n                color = lights[i].color;\n                normal = lnorm;\n            }\n        }\n    \n        vec3 cylinderNorm;\n        float cylinderT = traceCylinder(curPos, curDir, cylinderNorm);\n        if (cylinderT < t)\n        {\n\n            t = cylinderT;\n            vec3 worldPos = t * curDir + curPos;\n            materialType = DIFFUSE;\n\n            normal = cylinderNorm;\n            if (normal == vec3(0, 1, 0) || normal == vec3(0, -1, 0)) {\n                color =  texture(iChannel2, worldPos.xz).rgb;\n            } else {\n                color = texture(iChannel2, worldPos.yz).rgb;\n            }\n        }\n        \n              \n        vec3 cubeNorm;\n        float cubeT = traceCube(curPos, curDir, cubeNorm);\n        if (true) {\n            if (cubeT < t)\n            {\n                isCube = true;\n                t = cubeT;\n \n                normal = cubeNorm;\n \n                if (randVals.x * 0.5 < GLASS_R) {\n                    materialType = REFLECTION;\n                } else {\n                    materialType = REFRACTION;\n                } \n                //materialType = EMISSION;\n                colorMult *= vec3(1.0, 1.0, 1.15) ;// vec3(0.2, 0.6, 0.3);\n            }\n        }\n      \n        for (int i = 0; i < INS_NUM; ++i) {\n            float sphereT = traceSphere(curPos - ins_cube[i].pos, curDir, ins_cube[i].radius, cubeNorm);\n            if (sphereT < t)\n            {\n                t = sphereT;\n                normal = cubeNorm;\n                if (randVals.x < DIAMOND_R * 10.0) {\n                    materialType = REFLECTION;\n                } else {\n                    colorMult *= ins_cube[i].color * 0.29;\n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0) {\n                        n2 = GLASS_N;\n                    } else {\n                        n2 = DIAMOND_N;\n                    }\n                }\n            }\n        }\n        \n        /*\n        vec3 sphNorm;\n        for (int i = 0; i < INS_NUM; ++i) {\n            float sphereT = traceSphere(curPos - ins_cube[i].pos, curDir, ins_cube[i].radius, sphNorm);\n            if (sphereT < t)\n            {\n                t = sphereT;\n                materialType = DIFFUSE;\n                vec3 worldPos = t * curDir + curPos;\n                color = ins_cube[i].color * 20.0;\n                normal = sphNorm;\n            }\n        }\n        */\n \n \n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                bool isReflected;\n                curDir = refraction(curDir, normal, n1, n2, isReflected);\n                curPos = worldPos + curDir * 1e-5;\n                if (!isReflected) {\n                    float tmp = n1;\n                    n1 = n2;\n                    n2 = tmp;\n                }    \n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n \n       // } else {\n         //   fragColor = texture(iChannel1, curDir) * 0.5;\n           // break;\n     //   }\n    }\n \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}