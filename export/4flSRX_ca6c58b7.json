{"ver":"0.1","info":{"id":"4flSRX","date":"1705519279","viewed":50,"name":"glitchy screen","username":"Zokalyx","description":"inspired by hamming codes, part of my learning journey with the book of shaders.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["glitch","pattern","tiling","hamming"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: zokalyx\n// Title: glitchy screen\n// Comment: inspired by hamming codes\n\n// size must be a power of 2\nfloat hamming(in float bit, in float size, in vec2 _st) {\n    _st *= size;\n    \n    // Get index of the current square in the size*size grid\n    float index = floor(_st.y) * size + floor(_st.x);\n    \n    // This index will have a binary representation, we want to see if\n    // the specific bit matches\n    float bit_number = pow(2.0, float(bit));\n    \n    float rem = mod(index, bit_number);\n    \n    float small_rem = mod(rem, bit_number);\n    small_rem -= mod(small_rem, bit_number / 2.0);\n    \n    return small_rem;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x / iResolution.y;\n    \n    st *= 10.0;\n    \n    vec3 color = vec3(hamming(8.0 * abs(sin(iTime / 2.0)), 8.0, st));\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}