{"ver":"0.1","info":{"id":"7dXXRf","date":"1618947955","viewed":107,"name":"Space in octahedron","username":"hicapu","description":"2 задание по курсу машинной графики.\nАвтор: Охотин Андрей 317 группа\nВариант: октаэдр с космическим пространством внутри (открывать на Linux)\nПункты: резкие и мягкие тени, анти-алиасинг, куб-мап, невероятная реалистичность.\nДоп объект: черная дыра\n","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["octahedron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}\n\n\n// https://www.shadertoy.com/view/wsSGDG\n// ","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// CAMERA\n\nconst float CAMERA_HEIGHT = 3.2;\nconst float DISTANCE_TO_OBJECT = 18.0;\nconst float CAMERA_ANGLE = 250.0;\n\n\n\n// scene parameters\n\n// materials\n\nconst float AIR_N = 1.0;\nconst float GLASS_N = 1.5;\nconst float DIAMOND_N = 2.5;\n\n// object params\n\nconst vec3 OKTAHEDRON_COLOR = vec3(1.0, 1.0, 1.0);\nconst float OKTAHEDRON_SZ = 4.0;\n\nconst float CYLINDER_HEIGHT = -4.0;\nconst float CYLINDER_RADIUS = 4.0;\n\nconst float PLANE_HEIGHT = -4.6;\nconst float PLANE_RADIUS = 100.0;\n\nconst float LIGHT_BLUR = 0.07;\n\nconst float FIRE_VAR = 0.8;\nconst float FIRE_RADIUS = 0.034;\nconst float FIRE_MIX_PARAM = 0.8;\nconst vec3 FIRE_COLOR = vec3(0.9, 0.65, 0.5);\n\nconst float FOG_RADIUS = 3.4;\nconst float MARCH_SIZE = 0.01;\nconst vec3 FOG_COLOR = vec3(0.9, 0.9, 0.9);\n\nconst float FOG_NOISE = 1.4;\nconst float FOG_SZ = 2.5;\n\n// end params\n\nconst float PSI = 3.14 * CAMERA_ANGLE / 180.0;\n\nconst vec3 CAMERA_POS = vec3(\n    DISTANCE_TO_OBJECT * cos(PSI), \n    CAMERA_HEIGHT, \n    DISTANCE_TO_OBJECT * sin(PSI)\n);\n\nconst float INF = 1e10;\n\nstruct Sphere {\n    vec3 pos;\n    vec3 color;\n    float radius;\n    float n;\n    float material;\n};\n\nconst uint SPHERES_COUNT = 1u;\nSphere SPHERES[SPHERES_COUNT] = Sphere[SPHERES_COUNT](\n    Sphere(vec3(0, 0, 0), vec3(0.0, 0.0, 0.0), 0.2, 1.5, GLASS_N)\n);\n\n\nconst uint LIGHTS_COUNT = 62u;\nconst uint REAL_LIGHTS = 2u;\nSphere LIGHTS[LIGHTS_COUNT] = Sphere[LIGHTS_COUNT](\n\nSphere(vec3(-4, -3., 0.4), vec3(0.9, 0.0, 1.0), 0.6, 1.5, GLASS_N),\nSphere(vec3(1.5, -3, -1.9), vec3(0.4, 0.9, 1.0), 0.5, 1.5, GLASS_N),\n\n// stars \n\nSphere(vec3(0.0032, -0.6418, 1.2400), vec3(1, 1, 1), 0.034, GLASS_N, GLASS_N),\nSphere(vec3(-1.0097, -0.1753, 1.0481), vec3(1, 1, 1), 0.016, GLASS_N, GLASS_N),\nSphere(vec3(0.8050, -0.9079, 0.6516), vec3(1, 1, 1), 0.017, GLASS_N, GLASS_N),\nSphere(vec3(-0.5225, -0.5630, 1.3068), vec3(1, 1, 1), 0.023, GLASS_N, GLASS_N),\nSphere(vec3(1.0801, 0.6564, -1.0452), vec3(1, 1, 1), 0.021, GLASS_N, GLASS_N),\nSphere(vec3(1.4580, 0.0377, 0.5275), vec3(1, 1, 1), 0.018, GLASS_N, GLASS_N),\nSphere(vec3(-1.0780, -0.8782, 0.6500), vec3(1, 1, 1), 0.023, GLASS_N, GLASS_N),\nSphere(vec3(-0.2602, 0.5705, 1.3479), vec3(1, 1, 1), 0.032, GLASS_N, GLASS_N),\nSphere(vec3(1.3935, 0.4932, -0.0136), vec3(1, 1, 1), 0.021, GLASS_N, GLASS_N),\nSphere(vec3(0.4734, -0.0532, 1.4521), vec3(1, 1, 1), 0.027, GLASS_N, GLASS_N),\nSphere(vec3(0.4236, 0.4034, 1.4069), vec3(1, 1, 1), 0.027, GLASS_N, GLASS_N),\nSphere(vec3(0.4870, -0.0826, -1.5018), vec3(1, 1, 1), 0.032, GLASS_N, GLASS_N),\nSphere(vec3(0.1406, -0.6177, 1.5856), vec3(1, 1, 1), 0.016, GLASS_N, GLASS_N),\nSphere(vec3(0.0277, 0.1652, -1.2966), vec3(1, 1, 1), 0.027, GLASS_N, GLASS_N),\nSphere(vec3(-0.1460, -0.1404, 1.3077), vec3(1, 1, 1), 0.025, GLASS_N, GLASS_N),\nSphere(vec3(1.1412, 0.3733, -0.7005), vec3(1, 1, 1), 0.019, GLASS_N, GLASS_N),\nSphere(vec3(-0.6018, 0.6419, 1.1516), vec3(1, 1, 1), 0.028, GLASS_N, GLASS_N),\nSphere(vec3(-0.6046, 0.8476, 0.8394), vec3(1, 1, 1), 0.02, GLASS_N, GLASS_N),\nSphere(vec3(1.1689, -0.3476, 0.5513), vec3(1, 1, 1), 0.033, GLASS_N, GLASS_N),\nSphere(vec3(-1.4133, -0.4140, -1.0884), vec3(1, 1, 1), 0.025, GLASS_N, GLASS_N),\nSphere(vec3(0.4729, 0.2224, -1.6943), vec3(1, 1, 1), 0.03, GLASS_N, GLASS_N),\nSphere(vec3(-0.9144, -0.0531, -0.9238), vec3(1, 1, 1), 0.018, GLASS_N, GLASS_N),\nSphere(vec3(-1.2267, -0.5168, -0.5316), vec3(1, 1, 1), 0.016, GLASS_N, GLASS_N),\nSphere(vec3(0.5189, 0.9218, 1.1202), vec3(1, 1, 1), 0.017, GLASS_N, GLASS_N),\nSphere(vec3(-0.0132, 1.2347, 0.4932), vec3(1, 1, 1), 0.017, GLASS_N, GLASS_N),\nSphere(vec3(-0.0306, -0.7691, 1.1681), vec3(1, 1, 1), 0.032, GLASS_N, GLASS_N),\nSphere(vec3(1.1344, 0.5396, -0.4993), vec3(1, 1, 1), 0.022, GLASS_N, GLASS_N),\nSphere(vec3(-1.4646, 0.2375, -0.9875), vec3(1, 1, 1), 0.025, GLASS_N, GLASS_N),\nSphere(vec3(0.5470, 1.0226, 0.6776), vec3(1, 1, 1), 0.033, GLASS_N, GLASS_N),\nSphere(vec3(-1.2935, -0.6462, 0.2076), vec3(1, 1, 1), 0.015, GLASS_N, GLASS_N),\nSphere(vec3(-1.3578, -0.1963, -0.4043), vec3(1, 1, 1), 0.019, GLASS_N, GLASS_N),\nSphere(vec3(1.2608, 0.5571, -0.6393), vec3(1, 1, 1), 0.022, GLASS_N, GLASS_N),\nSphere(vec3(-0.4201, -0.2094, -1.2305), vec3(1, 1, 1), 0.025, GLASS_N, GLASS_N),\nSphere(vec3(-0.1962, -0.5379, -1.2705), vec3(1, 1, 1), 0.031, GLASS_N, GLASS_N),\nSphere(vec3(1.0368, 0.1881, -0.7765), vec3(1, 1, 1), 0.018, GLASS_N, GLASS_N),\nSphere(vec3(-1.1519, 0.6051, 0.3502), vec3(1, 1, 1), 0.023, GLASS_N, GLASS_N),\nSphere(vec3(-0.7560, 0.2698, 1.3594), vec3(1, 1, 1), 0.025, GLASS_N, GLASS_N),\nSphere(vec3(0.7538, 1.1990, 0.1341), vec3(1, 1, 1), 0.026, GLASS_N, GLASS_N),\nSphere(vec3(-0.1204, 1.3140, 0.1952), vec3(1, 1, 1), 0.022, GLASS_N, GLASS_N),\nSphere(vec3(1.1915, -0.3833, 0.5690), vec3(1, 1, 1), 0.023, GLASS_N, GLASS_N),\nSphere(vec3(-1.0277, 0.6907, 0.8749), vec3(1, 1, 1), 0.025, GLASS_N, GLASS_N),\nSphere(vec3(0.4627, 0.7718, -1.2673), vec3(1, 1, 1), 0.032, GLASS_N, GLASS_N),\nSphere(vec3(-0.1398, 0.0766, 1.4243), vec3(1, 1, 1), 0.024, GLASS_N, GLASS_N),\nSphere(vec3(0.0535, 0.0865, -1.3962), vec3(1, 1, 1), 0.017, GLASS_N, GLASS_N),\nSphere(vec3(-0.3103, 0.5526, 1.1423), vec3(1, 1, 1), 0.03, GLASS_N, GLASS_N),\nSphere(vec3(0.2510, 0.6623, -1.3078), vec3(1, 1, 1), 0.022, GLASS_N, GLASS_N),\nSphere(vec3(-0.1289, 0.4503, -1.2272), vec3(1, 1, 1), 0.016, GLASS_N, GLASS_N),\nSphere(vec3(0.9564, -0.2031, -1.2996), vec3(1, 1, 1), 0.017, GLASS_N, GLASS_N),\nSphere(vec3(0.2180, 0.2581, -1.3160), vec3(1, 1, 1), 0.032, GLASS_N, GLASS_N),\nSphere(vec3(1.1981, -0.0067, 0.7329), vec3(1, 1, 1), 0.03, GLASS_N, GLASS_N),\nSphere(vec3(0.8602, -0.4830, 0.9783), vec3(1, 1, 1), 0.026, GLASS_N, GLASS_N),\nSphere(vec3(1.1593, -0.0534, 0.6007), vec3(1, 1, 1), 0.026, GLASS_N, GLASS_N),\nSphere(vec3(-0.2431, -0.0418, 1.3167), vec3(1, 1, 1), 0.03, GLASS_N, GLASS_N),\nSphere(vec3(-0.0394, 0.7786, 1.1272), vec3(1, 1, 1), 0.02, GLASS_N, GLASS_N),\nSphere(vec3(-1.4330, -0.1736, 0.0043), vec3(1, 1, 1), 0.019, GLASS_N, GLASS_N),\nSphere(vec3(1.3533, 0.6826, 0.5946), vec3(1, 1, 1), 0.022, GLASS_N, GLASS_N),\nSphere(vec3(1.0469, -0.1697, 1.0565), vec3(1, 1, 1), 0.018, GLASS_N, GLASS_N),\nSphere(vec3(1.4840, -0.2927, 0.1192), vec3(1, 1, 1), 0.029, GLASS_N, GLASS_N),\nSphere(vec3(0.2402, 0.0016, 1.4754), vec3(1, 1, 1), 0.019, GLASS_N, GLASS_N),\nSphere(vec3(-1.8573, -0.7432, -0.3455), vec3(1, 1, 1), 0.031, GLASS_N, GLASS_N)\n);\n\n\n\n\nfloat traceSphere(Sphere S, vec3 pos, vec3 dir, out vec3 normal) \n{\n    float r = S.radius;\n    pos = pos - S.pos;\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n\n\n\n\nvec3 randVals;\nvec3 randDir;\n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal)\n{\n    float t = (PLANE_HEIGHT - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= PLANE_RADIUS) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\n\n// Cylinder\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) \n{\n    float t = (CYLINDER_HEIGHT - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < CYLINDER_RADIUS) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - CYLINDER_RADIUS;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= CYLINDER_HEIGHT) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= CYLINDER_HEIGHT) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n\n// begin Oktahedron\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 x1, vec3 x2, vec3 x3, out vec3 normal){\n    vec3 diff1 = x2 - x1;\n    vec3 diff2 = x3 - x1;\n    float det = dot(diff1, cross(dir, diff2));\n    if (det < 1e-9 && det > -1e-9)\n        return INF;\n        \n    float u = dot(pos - x1, cross(dir, diff2))/det;\n    if (u < 0.0 || u > 1.0) \n        return INF;\n    float v = dot(dir, cross(pos - x1, diff1))/det;\n    if (v < 0.0 || u + v > 1.0)\n        return INF;\n    float k = dot(diff2, cross(pos - x1, diff1))/det;\n    normal = normalize((x1 + x2 + x3) / 3.0); \n    if (k <= 0.0) \n        return INF;\n        \n    return k;\n}\n\n\nconst uint VERTEXES_COUNT = 6u;\nvec3 Oktahedron[VERTEXES_COUNT] = vec3[VERTEXES_COUNT](\n    vec3( 0,  OKTAHEDRON_SZ,  0),\n    vec3( 0,  0,  OKTAHEDRON_SZ),\n    vec3( OKTAHEDRON_SZ,  0,  0),\n    vec3( 0,  0, -OKTAHEDRON_SZ),\n    vec3(-OKTAHEDRON_SZ,  0,  0),\n    vec3( 0, -OKTAHEDRON_SZ,  0)\n);\n\nconst uint EDGES_COUNT = 8u;\nint Edges[3u * EDGES_COUNT] = int[24u](\n    0, 2, 1,\n    0, 3, 2,\n    0, 4, 3,\n    0, 1, 4,\n    5, 2, 1,\n    5, 3, 2,\n    5, 4, 3,\n    5, 1, 4\n);\n\nfloat traceOktahedron(vec3 pos, vec3 dir, out vec3 normal)\n{\n    float t = INF;\n    vec3 cur_norm;\n    for (uint i = 0u; i < EDGES_COUNT; ++i)\n    {\n        vec3 x1 = Oktahedron[Edges[i * 3u + 0u]];\n        vec3 x2 = Oktahedron[Edges[i * 3u + 1u]];\n        vec3 x3 = Oktahedron[Edges[i * 3u + 2u]];\n        float cur_t = traceTriangle(pos, dir, x1, x2, x3, cur_norm);\n        if (cur_t < t) {\n            t = cur_t;\n            normal = cur_norm;\n        }\n    }\n    return t;\n}\n\nvec3 moveInside(vec3 vert) {\n    while (abs(vert.x) + abs(vert.y) + abs(vert.z) > 0.2 + OKTAHEDRON_SZ) {\n        vert *= 0.9;\n    }\n    return vert;\n}\n\n// fog object\n\nvec3 Fog[VERTEXES_COUNT] = vec3[VERTEXES_COUNT](\n    vec3( 0,  FOG_SZ,  0),\n    vec3( 0,  0,  FOG_SZ),\n    vec3( FOG_SZ,  0,  0),\n    vec3( 0,  0, -FOG_SZ),\n    vec3(-FOG_SZ,  0,  0),\n    vec3( 0, -FOG_SZ,  0)\n);\n\nfloat traceFog(vec3 pos, vec3 dir, out vec3 normal, vec3 shft)\n{\n    float t = INF;\n    vec3 cur_norm;\n    for (uint i = 0u; i < EDGES_COUNT; ++i)\n    {\n        vec3 x1 = moveInside(Fog[Edges[i * 3u + 0u]] + shft);\n        vec3 x2 = moveInside(Fog[Edges[i * 3u + 1u]] + shft);\n        vec3 x3 = moveInside(Fog[Edges[i * 3u + 2u]] + shft);\n        float cur_t = traceTriangle(pos, dir, x1, x2, x3, cur_norm);\n        if (cur_t < t) {\n            t = cur_t;\n            normal = cur_norm;\n        }\n    }\n    return t;\n}\n\n\n// end   Oktahedron\n\n// FIRE\n\n\nfloat pow2(float x)\n{\n    return x * x;\n}\n\n\nfloat traceSphereForFire(vec3 pos, vec3 dir, float r, out vec3 normal)\n{\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - pow2(r + randDir.x * FIRE_VAR);\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    \n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat snoise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e3);\n\tuv *= res;\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\tvec3 f = fract(uv); \n\tf = f*f*(3.0-2.0*f);\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n\t              uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\tvec4 r = fract(sin(v*1e-1)*1e3);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\treturn mix(r0, r1, f.z)*2.-1.;\n}\n\nvec3 burn(vec2 p) \n{\n\tfloat color1 = 4.0 - (3.*length(2.5*p));\n    \n\tvec3 coord = vec3(atan(p.x,p.y)/6.2832+.5, length(p)*.4, .5);\n\tfor(int i = 1; i <= 3; i++)\n\t{\n\t\tfloat power = pow(2.0, float(i));\n\t\tcolor1 += 0.5*(1.5 / power) * snoise(coord + vec3(0.,.05, .01), power*16.);\n\t}\n\tcolor1 *= 0.6;\n\treturn vec3( color1, pow(max(color1,0.),2.)*0.4, pow(max(color1,0.),3.)*0.1);\n}\n\nvec3 drawFire(vec2 p) {\n  vec3 color = burn(p);\n  return mix(FIRE_COLOR, color, FIRE_MIX_PARAM);\n}\n\n\n\n\n// space\n\nbool isOccluded(vec3 pos, vec3 target) \n{\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    for (uint i = 0u; i < SPHERES_COUNT; ++i) \n    {\n        float sphT = traceSphere(SPHERES[i], pos, dir, sphNorm);\n        if (sphT < dist)\n            return true;\n    }\n    vec3 oktNorm;\n    float oktT = traceOktahedron(pos, dir, oktNorm);\n    if  (oktT < dist) {\n        return true;\n    }\n    \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\n// fog\n\n\nfloat fogSdf(vec3 pos)\n{\n    return abs(pos.x) + abs(pos.y) + abs(pos.z) - FOG_RADIUS;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(FOG_COLOR * totalAbs, 1.0 - opacity);\n    \n}\n\n\n\n// fog\n\n\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) \n{\n    vec3 s;\n    for (uint i = 0u; i < REAL_LIGHTS; ++i) \n    {\n        vec3 toLight = LIGHTS[i].pos - pos;\n        float distSq = dot(toLight, toLight);\n        float att = isOccluded(pos, LIGHTS[i].pos + randDir * LIGHTS[i].radius) ? 0.0 : 20.0f / distSq;\n        s = s + max(0.0, dot(normal, normalize(toLight))) * att * LIGHTS[i].color;\n    }\n    return color * (s + texture(iChannel1, normal).rgb * 0.1);\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) \n{\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.0)\n        return reflect(v, normal);\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    // material definition\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    \n    vec3 colorMult = vec3(1, 1, 1);\n    float mult = 1.0;\n    \n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        \n        // plane\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.2).rgb;\n            normal = planeNorm;\n        }\n        \n        // lights\n        \n        vec3 lNorm;\n        for (uint i = 0u; i < LIGHTS_COUNT; ++i)\n        {\n            if (i < REAL_LIGHTS)\n                LIGHTS[i].pos += LIGHT_BLUR * randDir;\n            float lightT = traceSphere(LIGHTS[i], curPos, curDir, lNorm);\n            if (lightT < t) {\n                t = lightT;\n                materialType = EMISSION;\n                color = LIGHTS[i].color;\n                normal = lNorm;\n            }\n            if (i < REAL_LIGHTS)\n                LIGHTS[i].pos -= LIGHT_BLUR * randDir;\n        }\n        \n        // spheres\n        \n        vec3 sphNorm;\n        for (uint i = 0u; i < SPHERES_COUNT; ++i) \n        {\n            float sphT = traceSphere(SPHERES[i], curPos, curDir, sphNorm);\n            if (sphT < t)\n            {\n                t = sphT;\n                normal = sphNorm;\n                if (randVals.x < GLASS_R) {\n                    materialType = REFLECTION;\n                } else {\n                    colorMult *= SPHERES[i].color;\n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0) {\n                        nEnter = AIR_N;\n                    } else {\n                        nEnter = SPHERES[i].material;\n                    }\n                }\n            }\n        }\n        \n        // cylinder\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        \n        // oktahedron\n        \n        vec3 oktNorm;\n        float oktT = traceOktahedron(curPos, curDir, oktNorm);\n        if  (oktT < t) {\n            t = oktT;\n            normal = oktNorm;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= OKTAHEDRON_COLOR;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                }\n                else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        \n        // fire \n        \n        vec3 fireNorm;\n        float fireT = traceSphereForFire(curPos, curDir, FIRE_RADIUS, fireNorm);\n        if (true) {\n            if (fireT < t) {\n                t = fireT;\n                normal = fireNorm;\n                vec3 worldPos = t * curDir + curPos;\n                color = drawFire(uv * sqrt(dot(CAMERA_POS, CAMERA_POS) / 250.0) * 3.50);\n                materialType = EMISSION;\n            }\n        }\n        \n        vec3 fogNorm;\n        vec3 shft = FOG_NOISE * randDir;\n        float fogT = traceFog(curPos, curDir, fogNorm, shft);\n        if (fogT < t) {\n            t = fogT;\n            normal = fogNorm;\n            if (dot(curDir, fogNorm) > 0.0) \n                materialType = DIFFUSE;\n        }\n        \n        \n        // ray -> INF\n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                fragColor.rgb += mult * computeLight(worldPos, color, normal);\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                vec4 fog = sampleFog(curPos, curDir);\n                fragColor.rgb += fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = mult * (texture(iChannel1, curDir)).rgb; // * colorMult;\n            break;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}