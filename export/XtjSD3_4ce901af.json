{"ver":"0.1","info":{"id":"XtjSD3","date":"1446920948","viewed":185,"name":"SDF Critter 1","username":"Alway_PanicButton","description":"Signed distance field critter using IQ's smooth min for impressions of subsurface structure.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"//#define FLAPPY_SWARM\n#define EPSILON 0.001\n#define ESCAPEDIST 100.\n\n// polynomial smooth min (k = 0.1);\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat box( vec3 p, vec3 b )\n{\n    vec3 d = abs( p ) - b;\n    return min( 0., max( d.x, max( d.y, d.z ) ) ) +\n        length( max(d, 0.) );\n}\n\nvoid rot2( inout vec2 v, float theta )\n{\n \tfloat co = cos( theta );\n    float si = sin( theta );\n    v = vec2( v.x * co + v.y * si,\n              v.y * co - v.x * si );\n}\n\nfloat scene( vec3 p )\n{\n#ifdef FLAPPY_SWARM\n    vec3 n = floor((p + 70.) / 140.);\n    p = mod( p + 70., 140. ) - 70.;\n    rot2( p.xz, n.x * iTime );\n    rot2( p.yx, n.y * iTime );\n    rot2( p.yz, n.z * iTime );\n#endif\n    \n    vec3 pc = p;\n    pc.x += 5.;\n    pc.y += 2.;\n    float core = box( pc, vec3( 4., 3., 3. ) );\n    pc.x -= 5.5;\n    pc.y -= sin( mod( iTime, 1. ) * 6.283 ) * 0.5;\n    core = smin( core, box( pc, vec3( 2., 1., 1. ) ), 8.6 );\n    pc.x -= 1.5;\n    core = smin( core, box( pc, vec3( 2., 0.2, 0.2 ) ), 1.6 );\n    p.z = abs( p.z );\n    p.z -= 2.;\n    \n    rot2( p.zy, 3. );\n    rot2( p.zy, mod(iTime, 1. ) * 6.283);\n    p.y -= 1.5;\n    rot2( p.zy, mod(iTime, 1. ) * -6.283);\n    float kneerot = abs(mod(iTime, 1. ) - 0.5 ) * 4.5 - 0.15;\n    p.y -= 2.;\n    float b1 = box( p, vec3( 0.5, 2.0, 0.25 ) );\n    p.y += 1.6;\n    rot2( p.yx, kneerot * 0.8 );\n    rot2( p.xz, kneerot * 1. );\n    p.y += 2.;\n    float b2 = box( p, vec3( 0.5, 2.0, 0.125 ) );\n    \n    float b3 = 10000.;\n    for( int i = 0; i < 5; i++ )\n    {\n    \tfloat knucklerot = abs(mod(iTime, 1. ) - 0.5 ) * (3.0 - (float(i) * 0.5) ) - 0.15;\n    \tp.y += 2.;\n    \trot2( p.yx, knucklerot );\n    \tp.y += 2.;\n        b3 = smin( b3, box( p, vec3( 0.5, 2.0, 0.125 ) ), 1.1 );\n        \n        rot2( p.yx, 1.57 );\n        p.y += 3.;\n        b3 = smin( b3, box( p, vec3( 5.5, 2.0, 0.125 ) ), 1.1 );\n        p.y -= 3.;\n        rot2( p.yx, -1.57 );\n    }\n    \n    float b = smin( b1, b2, 1.1 );\n    b = smin( b, b3, 1.1 );\n    b = smin( core, b, 1.1 );\n    return b;\n}\n\nvec3 norm( vec3 p )\n{\n    float c = scene( p );\n    return normalize(vec3( scene( p + vec3( EPSILON, 0., 0. ) ),\n                 scene( p + vec3( 0., EPSILON, 0. ) ),\n                 scene( p + vec3( 0., 0., EPSILON ) ) ) - c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 d = normalize( vec3( uv - 0.5, 1. ) );\n    vec3 p = vec3( 0., 2., -35. );\n    \n    if( iMouse.z == 0. )\n    {\n    \trot2( d.xz, iTime );\n    \trot2( p.xz, iTime );\n    }\n    else\n    {\n    \trot2( d.xz, iMouse.x / iResolution.x * 10. );\n    \trot2( p.xz, iMouse.x / iResolution.x * 10. );\n    }\n    p.y += sin( mod( iTime, 1. ) * 6.283 );\n    float minDist = 0.;\n    float t = 0.;\n    for( int i = 0 ; i < 100; i++ )\n    {\n        minDist = scene( p + t * d );\n        t += minDist;\n        if( minDist < EPSILON )\n            break;\n        if( minDist > ESCAPEDIST )\n            break;\n    }\n    \n    vec3 color = vec3( 0. );\n    if( minDist < EPSILON )\n    {\n        color = vec3( 0.7, 0.5, 0.3 );\n        color = (dot( norm( p + t * d ), vec3( 1., 1., 0. ) ) + 0.2) * color;\n    }\n    else\n    {\n        color = texture( iChannel0, d ).rgb;\n    }\n    \n\tfragColor = vec4(color,1.0);\n}","name":"","description":"","type":"image"}]}