{"ver":"0.1","info":{"id":"dtfBRn","date":"1692509203","viewed":37,"name":"hexagon gaming","username":"Swifter","description":"hexagon","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float ZOOM = 5.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.x;\n    \n    float angle = iTime * 0.1;\n    \n    uv += 1.;\n    \n    uv = vec2(\n        (uv.x * cos(angle)) - (uv.y * sin(angle)),\n        (uv.x * sin(angle)) + (uv.y * cos(angle))\n    );\n    \n    uv.x += sin(iTime * 0.75) * 0.1;\n    uv.y *= cos(angle) + sin(uv.x);\n    \n    vec2 currPoint = uv * (ZOOM + cos(iTime * 0.3));\n    vec2 point = floor(currPoint);\n    \n    float dist = 1.;\n    \n    float offset = (1. - pow(1. - (sin(iTime * 0.3) * 0.5 + 0.5), 1.)) * 0.5;\n    \n    for (int x = 0; x <= 1; x++) {\n        for (int y = 0; y <= 1; y++) {\n            vec2 p = point + vec2(x, y);\n            p.x += mod(p.y, 2.) < 0.5 ? 0. : offset;\n            dist = min(dist, length(currPoint - p));\n        }\n    }\n    \n    float f = dist * 1.6 + abs(cos(iTime)) * 0.2;\n    vec3 col = f * cos(vec3(3,uv.y,sin(iTime * 0.2) + 2.) * uv.x + iTime);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}