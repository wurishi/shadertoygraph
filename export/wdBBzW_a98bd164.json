{"ver":"0.1","info":{"id":"wdBBzW","date":"1589576426","viewed":196,"name":"blackhole anomaly","username":"foxiepaws","description":"ba","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["starfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 background = texture(iChannel1,uv);\n    vec4 midground = texture(iChannel0,uv);\n    vec4 foreground = texture(iChannel2,uv);\n    fragColor = mix(background,midground,midground.a);\n    fragColor = mix(fragColor,foreground,foreground.a);   \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float hash212 (vec2 n) { // thx art of code\n    n = fract(n * vec2(335.32345,238.652342));\n    //n += dot(n, n+23.58);\n    n += dot(n, n+53.32523);\n    return fract(n.x*n.y);\n       \n}\nvec4 starfield(vec2 uv) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec3 col= vec3(0);\t\n    vec2 gv = fract(vec2(uv.x,uv.y))-.5;\n    vec2 id = floor(uv);\n    \n    for (int x = -1; x<2; x++) {\n        for (int y = -1; y<2; y++) {\n    \t\tvec2 offset = vec2(x,y);\t\n    \t\tfloat r = hash212(id+offset);\n    \t\tfloat dist = length(gv-offset-vec2(r-.5,r-.5));\n    \t\t// Time varying pixel color\n    \t\tfloat star = min(.03,r/100.)/dist;\n    \t\tstar *= smoothstep(.8,.3,dist);\n    \t\tcol += star;\n            if (r > .5) col *= vec3(1.,1.,1.+(clamp((r),1.,2.)/9.));\n            if (r<=.5) col *= vec3(1.+clamp(r,1.,3.)/9.,1.,1.);\n            //if (r < .6 && r > .2);\n            //if (r < .2) col *= vec3(1.+(clamp((r),1.,2.)/9.),1.,1.);\n            \n        }\n    }\n    float r = hash21(id);\n    \n    // Output to screen\n    return vec4(vec3(col),1.0);\n    return vec4(1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 sv = starfieldMotion(uv, iTime);\n    float dist = sqrt(abs(1.0-dot(sv,sv)));\n    uv = plasmaMotion(uv, iTime);\n    vec4 sf = starfield(uv);\n    sf = vec4(sf.rgb,1.-step(2.,length(sv)));\n    for (int rots = 0; rots < 4; rots++) {\n        uv *= rot(360./5.);\n    \tvec4 tsf = starfield(uv/dist);\n    \tsf = mix(sf,tsf,.5);\n    }\n    \n    fragColor = vec4(sf.rgb,1.-step(3.1,length(sv)));\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 starfield(vec2 uv) {\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    vec3 col= vec3(0);\t\n    vec2 gv = fract(vec2(uv.x,uv.y))-.5;\n    vec2 id = floor(uv);\n    \n    for (int x = -1; x<2; x++) {\n        for (int y = -1; y<2; y++) {\n    \t\tvec2 offset = vec2(x,y);\t\n    \t\tfloat r = hash21(id+offset);\n    \t\tfloat dist = length(gv-offset-vec2(r-.5,r-.5));\n    \t\t// Time varying pixel color\n    \t\tfloat star = min(.03,r/100.)/dist;\n    \t\tstar *= smoothstep(.8,.3,dist);\n            \n    \t\tcol += star;\n            if (r > .8) col *= vec3(1.+(clamp((r),1.,2.)/9.),1.,1.);\n            if (r < .8 && r > .4);\n            if (r < .4) col *= vec3(1.,1.,1.+(clamp((r),1.,2.)/9.));\n            //col+= vec3(1.,0,0);\n        }\n    }\n    float r = hash21(id);\n    \n    \n    // Output to screen\n    return vec4(vec3(col),1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tuv = starfieldMotion(uv, iTime);\n    //uv.x += sin((iTime/1.)/5.0);                    // x movement\n    //uv.y += cos((iTime/1.)/3.0);                    // y movement\n    \n   \tvec4 sf = starfield(uv);\n    for (int rots = 0; rots < 4; rots++) {\n        uv *= rot(360./5.);\n    \tvec4 tsf = starfield(uv);\n    \tsf = mix(sf,tsf,.5);\n    }\n    \n    \n    //fragColor = vec4(1);\n    fragColor = sf;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define pi 3.141579\nfloat hash21 (vec2 n) { // thx art of code\n    n = fract(n * vec2(328.3,258.6543));\n    //n += dot(n, n+23.58);\n    n += dot(n, n+24.235);\n    return fract(n.x*n.y);\n       \n}\nmat2 rot(float deg) {\n    deg /= 180./3.141579; // convert to radians;\n    float s=sin(deg), c=cos(deg);\n    return mat2(c, -s, s, c);\n}\n\nvec2 starfieldMotion(vec2 uv, float iTime) {\n \tuv *= 5. * (2.+(10.*sin(2.*pi*.04*iTime)/10.));\n    uv *= rot(22.5+(45.*sin(2.*pi*.01*iTime)));\n    uv.y += iTime/100.;\n    return uv;\n}\nvec2 plasmaMotion(vec2 uv, float iTime) {\n    uv *= 5. * (2.+(10.*(-1.*sin(2.*pi*.04*iTime)/10.)));\n    uv *= rot(22.5+(45.*(-1.*sin(2.*pi*.01*iTime))));\n    uv.y -= iTime/100.;\n    return uv;\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// from iq \n// signed distance to a 2D triangle\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n\tvec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float k = sign( q.y );\n    float d = min(dot( a, a ),dot(b, b));\n    float s = max( k*(p.x*q.y-p.y*q.x),k*(p.y-q.y)  );\n\treturn sqrt(d)*sign(s);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 tuv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv=starfieldMotion(uv,iTime);\n    uv += (iTime/100.);\n    uv *= rot(200. + (2.*sin(iTime*2.*pi*.5)) - (iTime/100.));\n    uv.x += 2. - (iTime/100.);\n    uv.y += .5 + (iTime/100.);\n    \n    vec2 trisize = vec2(.2+(sin(iTime*2.*pi*.01)/10.),-.2+(sin(iTime*2.*pi*0.1)/15.));\n    \n    float mask = step(.01,sdTriangleIsosceles(uv,trisize));\n    fragColor = vec4(vec3(.3),1.-mask);\n}","name":"Buffer C","description":"","type":"buffer"}]}