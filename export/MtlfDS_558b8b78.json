{"ver":"0.1","info":{"id":"MtlfDS","date":"1513198051","viewed":178,"name":"wave audio visualizer","username":"liyouvane","description":"perlin noise","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["perlin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec2 P)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0;\n  vec4 gy = abs(gx) - 0.5;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\nfloat fbm(vec2 p) {\n \tfloat f = 0.0;\n    float w = 0.5;\n    for (int i = 0; i < 5; i ++) {\n\t\tf += w * cnoise(p);\n\t\tp *= 1.2;\n\t\tw *= 0.8;\n    }\n    return f;\n}\n\nfloat dualfbm(in vec2 p)\n{\n\tvec2 p2 = p*.5;\n\tvec2 basis = vec2(fbm(p2-iTime*1.7),fbm(p2+iTime*1.7));\n\tbasis = (basis-.5)*.2;\n\treturn fbm(basis);\n}\nfloat freqs[4];\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\t\n    freqs[0] = texture( iChannel0, vec2( 0.02, 0.25 ) ).x;\n\tfreqs[1] = texture( iChannel0, vec2( 0.07, 0.25 ) ).x;\n\tfreqs[2] = texture( iChannel0, vec2( 0.15, 0.25 ) ).x;\n\tfreqs[3] = texture( iChannel0, vec2( 0.30, 0.25 ) ).x;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float noise = dualfbm(10. * uv);\n    float b = freqs[1] - (1.+sin(noise+12.3*uv.x))/2.;\n\tfloat g = freqs[2] - (1.+cos(noise+12.6*uv.x))/2.;\n\tfloat r = freqs[3] - (1.-sin(noise+12.6*uv.x))/2.;\n    vec3 color1 = vec3(172,177,255);\n    vec3 color2 = vec3(171,203,255);\n    vec3 color3 = vec3(172,255,207);\n    vec3 color = r * color3 + g * color2 + b * color1;\n\tfragColor = vec4(3. * color/255.,1.0);\n}","name":"Image","description":"","type":"image"}]}