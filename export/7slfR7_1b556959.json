{"ver":"0.1","info":{"id":"7slfR7","date":"1644661794","viewed":48,"name":"Simple 3d implement","username":"chenxiaoleizi","description":"3d","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Point distance to ray\nfloat rayPoint(vec3 ro, vec3 rd, vec3 p){\n    float s = length(cross(rd, p - ro));\n    float d = s / length(rd);\n    return smoothstep(0.1, 0.09, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    \n    // Ray origin and ray direction\n    vec3 ro = vec3(0., 0., -2.);\n    vec3 rd = vec3(uv.x, uv.y, 0.) - ro;\n    \n    vec3 p1 = vec3(sin(iTime), 0, cos(iTime))*0.5;\n    vec3 p2 = vec3(0, sin(iTime), cos(iTime))*0.5;\n    \n    vec3 col = vec3(0.0);\n    col += rayPoint(ro, rd, p1);\n    col += rayPoint(ro, rd, p2);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}