{"ver":"0.1","info":{"id":"MsVfWy","date":"1530386701","viewed":4087,"name":"Sinking","username":"zguerrero","description":"Got inspired by BigWings's https://www.shadertoy.com/view/lscczl \nand his tutorial : https://www.youtube.com/watch?v=3CycKKJiwis&t=4s.\nI was initially making a starfield, then it derived...","likes":132,"published":1,"flags":32,"usePreview":0,"tags":["sea","water","light","particles","deep","layer","sink"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float r = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float v = max(0.0, length(uv - 0.5) * 7.0 - 2.0);\n    vec4 col = textureLod(iChannel0, uv, v);\n\n    fragColor = pow(col, vec4(2.0));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float star(vec2 uv, vec2 s, vec2 offset)\n{\n    uv += offset;\n    uv *= 2.0;\n    float l = length(uv);\n    l = sqrt(l);\n    vec2 v = smoothstep(s, vec2(0.0), vec2(l));\n    \n    return v.x + v.y*0.1;\n}\n\nvec4 starField(vec2 uv)\n{\n    vec2 fracuv = fract(uv);\n    vec2 flooruv = floor(uv);\n    vec4 r = hash42(flooruv);\n    vec4 color = mix(vec4(0.5, 1.0, 0.25, 1.0), vec4(0.25, 0.5, 1.0, 1.0), dot(r.xy, r.zw)) * 4.0 * dot(r.xz, r.yw);\n    \n    float t = iTime*2.0;\n    vec2 o = sin(vec2(t, t + HALFPI) * r.yx) * r.zw * 0.75;\n    \n    return color * star((fracuv - 0.5) * 2.0, vec2(0.4, 0.75) * (0.5 + 0.5*r.xy), o);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n\tuv = CalculateUv(uv, iTime);\n        \n    vec4 res = vec4(0.0);\n    float t = iTime * -0.075;\n    const float itter = 15.0;\n    float tex = 0.0;\n    vec2 disto = vec2(0.0);\n    \n    for(float f = 0.0; f < itter; f++)\n    {\n        vec2 r = hash21(f);\n        float t2 = fract(t + f / itter);\n        float size = mix(30.0, 0.001, t2);\n        vec2 fade = smoothstep(vec2(0.0, 1.0), vec2(0.9, 0.9), vec2(t2));\n        \n        vec2 uv2 = uv * size + r * 100.0 + (r - 0.5) * iTime * 0.25;\n        res += starField(uv2) * fade.x * fade.y * 0.65;\n        tex = texture(iChannel1, uv2*0.1 + tex * 0.15).x;\n        disto += vec2(tex) / itter;\n        res += tex * tex * 3.0 * fade.x * fade.y * vec4(0.25, 0.35, 0.5, 1.0) / itter;\n    }\n    \n    vec2 distuv = uv + disto*0.15;\n    vec4 sun = smoothstep(vec4(0.25, 3.0, 0.0025, 4.5), vec4(0.0, 0.0, 0.0, 0.0), vec4(dot(distuv, distuv)));\n    sun = sun * sun * sun * sun;\n    sun.xyz *= 0.5;\n    \n    vec2 pc;\n    pc.x = iTime*0.02;\n    pc.y = (atan(distuv.x, distuv.y) / PI) + iTime * 0.05;\n    \n    float rays = (texture(iChannel2, pc).x + texture(iChannel2, pc * vec2(1.0, 0.5)).x) * sun.y * 0.5;\n    \n    vec4 bg = mix(vec4(0.01, 0.01, 0.075, 1.0), vec4(0.05, 0.065, 0.1, 1.0), clamp(sun.x + rays, 0.0, 1.0) + sun.y);\n    bg += sun.z*vec4(0.2, 0.2, 0.05, 0.0) + sun.x * vec4(0.05, 0.05, 0.075, 0.0);\n    \n    vec4 c = bg + res * bg * 0.5 + res*0.5;\n    c *= sun.w;\n    \n    vec4 old = texture(iChannel0, fragCoord/iResolution.xy);\n    fragColor = c + old * 0.85;\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265359\n#define HALFPI 1.57079632679\n\n//Hash Functions by Dave_Hoskins \n//https://www.shadertoy.com/view/4djSRW/////////////////////\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(.1031, .1030, .0973, .1099)\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * HASHSCALE3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n///////////////////////////////////////////////////////////\n\nmat2 rot(float a) \n{\n    vec2 s = sin(vec2(a, a + HALFPI));\n    return mat2(s.y,s.x,-s.x,s.y);\n}\n\nvec2 CalculateUv( vec2 coord, float time)\n{\n    vec2 uv = coord;\n    uv *= rot(time*0.1);\n    uv += sin(vec2(time*0.2, time*0.3 + HALFPI)) * 0.35;\n    \n    vec4 disto = sin(uv.xxyy * vec4(8.1, 7.8, 7.7, 8.3) + vec4(0.3, -0.4, 0.25, -0.3) * time) * vec4(0.01, 0.015, 0.007, 0.012);\n\tuv.x += disto.z + disto.w;\n    uv.y += disto.x + disto.y;\n    return uv;\n}\n","name":"Common","description":"","type":"common"}]}