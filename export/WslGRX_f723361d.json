{"ver":"0.1","info":{"id":"WslGRX","date":"1728477508","viewed":16,"name":"a simple wallpaper","username":"cailuming","description":"just for fun","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["background","wallpaper"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\nvec3 getColor(float c){\n   float r = cos((c-0.75)*PI*1.66);\n   float g = cos((c-0.55)*PI*1.66);\n   float b = cos((c-0.25)*PI*1.66);\n   return vec3(r,g,b); \n}\n\nfloat hash1(vec2 cuv){\n   return fract(sin(dot(vec2(0.0,1.0),cuv)*100000.0));\n}\n\nvec2 hash2(vec2 cuv){\n   float a = hash1(cuv);\n   float b = hash1(cuv*a);\n    \n   return vec2(a,b);\n}\n\n\nvoid curve(inout vec3 col,vec2 cuv,vec2 c,float alpha){\n   vec2 uv = cuv;\n   cuv-=c;\n   cuv*=4.0;\n   float t = iTime;\n   float v =0.;\n   float wave_h = texture(iChannel0,vec2(0.1,0.2)).x;   \n   cuv.y+=sin(cuv.x*0.2+t)*0.5+wave_h*0.9;\n   \n   float ln = (cuv.x+1.)*sin(cuv.x*1.5);\n   float f1 = sin(cuv.x*1.3+t)*0.3+ln*0.1;\n   float f2 = sin(cuv.x*(1.0+sin(t)*0.3)+0.5+t*1.2)*0.4+ln*0.1;\n   float v1 = pow(abs(f1-f2),1.2); \n\n   float c1 = length(cuv-vec2(cuv.x,f1));\n   float c2 = length(cuv-vec2(cuv.x,f2));\n   \n   float ma = max(f1,f2);\n   float mi = min(f1,f2);\n   float ec = 3.0;\n   if(cuv.y>ma || cuv.y<mi){\n        v1 =0.;\n   }\n   \n   v1*=exp(-length(cuv.y-ma)*ec); \n   v1*=exp(-length(cuv.y-mi)*ec); \n   \n   c1 /= exp(-c1);\n   c2 /= exp(-c2);\n   \n   v+= 0.006/pow(c1+0.03,1.0); \n   v+= 0.01/pow(c2+0.03,1.0); \n   v+= v1;\n \n   col += mix(col,vec3(0.2,0.3,0.9)*4.4,v)*alpha;\n\n}\n \n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 cuv = uv -  vec2(0.5);\n    cuv.x*= iResolution.x/iResolution.y;\n    // Time varying pixel color\n    vec3 col = vec3(.13,0.15+cuv.y*cos(uv.x*1.5+iTime*0.5)*0.3,0.3);\n    col = smoothstep(0.0,1.0,col);\n    curve(col,cuv,vec2(0.,0.3),  0.99);\n    curve(col,cuv,vec2(0.7,-0.2),0.7);\n    col = pow(col,vec3(.5));\n    col = smoothstep(0.,1.,col); \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}