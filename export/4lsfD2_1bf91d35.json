{"ver":"0.1","info":{"id":"4lsfD2","date":"1513711951","viewed":257,"name":"Fitzhugh-Nagumo/Gray-Scott","username":"FlexMonkey","description":"Coupled Fitzhugh-Nagumo / Gray-Scott\n\nI can't quite get the boundary conditions right, press 'space' to restart after opening to get the GS solitons :)","likes":7,"published":1,"flags":48,"usePreview":0,"tags":["reactiondiffusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    \n    vec2 gs = smoothstep(0.2, 0.4, (texture(iChannel0, coord).xy));\n    vec2 fitz =  smoothstep(0.0, 0.5, (texture(iChannel1, coord).xy));\n\n    fragColor = vec4(sqrt(abs(gs.y - fitz.y)), pow(abs(gs.yx * fitz), vec2(0.25)) , 1.0); \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | September 2017\n\n\tBased on https://github.com/GollyGang/ready/tree/gh-pages/Patterns/FitzHugh-Nagumo\n*/\n\nfloat a0 = -0.11;\nfloat a1 = 2.0;\nfloat epsilon = 0.04;\nfloat delta = 1.0;\nfloat k1 = 2.75;\nfloat k2 = -0.21;\nfloat k3 = 2.6;\n\nfloat timestep = 0.062; \n\n\n\n// Keyboard reset taken from https://www.shadertoy.com/view/XtcGD2\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0) * 1.0; // (2.5 + 0.5*cos(-iTime*0.3)); \n\n    vec4 ab = texture(iChannel0, coord);\n\n    vec3 laplacian = vec3(texture(iChannel0, coord - pixelSize.zy) +\n                          texture(iChannel0, coord - pixelSize.xz) -\n                          4.0 * texture(iChannel0, coord) +\n                          texture(iChannel0, coord + pixelSize.xz) +\n                          texture(iChannel0, coord + pixelSize.zy));\n\n\n    float a = ab.x; // - noise(coord * iTime) * 0.004;\n    float b = ab.y;// + noise(coord * iTime) * 0.004;\n    \n    float delta_a = k1*a - k2*a*a - a*a*a - b + laplacian.x;\n    float delta_b = epsilon*(k3*a - a1*b - a0) + delta*laplacian.y; \n    \n   \tvec2 result = vec2(a + delta_a * timestep, \n                       b + delta_b * timestep);\n\n    if(texture(iChannel2, coord) == vec4(0) || reset()) {\n        float aspect = iResolution.x / iResolution.y; \n        float size = 0.025;\n        if (abs(coord.x - 0.5) < size && abs(coord.y - 0.5) < size * aspect) {\n            fragColor = texture(iChannel1, coord) * vec4(1.0, 0.0, 0.0, 1.0) ;\n        }\n        else {\n         \tfragColor = vec4(-0.7, -0.3, 0.0, 1.0);   \n        }\n        \n    } else {\n        fragColor = vec4(result, 0.0, 1.0);\n    }\n    \n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | September 2017\n\n\tBased on https://github.com/GollyGang/ready/tree/gh-pages/Patterns/FitzHugh-Nagumo\n*/\n\nfloat a0 = -0.11;\nfloat a1 = 2.0;\nfloat epsilon = 0.12;\nfloat delta = 4.0;\nfloat k1 = 1.2;\nfloat k2 = -0.22;\nfloat k3 = 1.4;\n\nfloat timestep = 0.062; \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0) * 2.0; \n\n    vec4 ab = texture(iChannel0, coord);\n\n    vec3 laplacian = vec3(texture(iChannel0, coord - pixelSize.zy) +\n                          texture(iChannel0, coord - pixelSize.xz) -\n                          4.0 * texture(iChannel0, coord) +\n                          texture(iChannel0, coord + pixelSize.xz) +\n                          texture(iChannel0, coord + pixelSize.zy));\n\n    vec2 gs = texture(iChannel1, coord).xy;\n    \n    float a = ab.x ;\n    float b = ab.y ;\n\n    float foo = smoothstep(0.0, 1.0, gs.x);\n    \n    float delta_a = k1*a - k2*a*a - a*a*a*foo - b + laplacian.x;\n    float delta_b = epsilon*(k3*a - a1*b - a0*gs.y) + delta*laplacian.y; \n    \n   \tvec2 result = vec2(a + delta_a * timestep, \n                       b + delta_b * timestep);\n\n    fragColor = vec4(result.xyy, 1.0);\n    \n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | September 2017\n\n\tBased on https://github.com/GollyGang/ready/tree/gh-pages/Patterns/FitzHugh-Nagumo\n*/\n\nfloat a0 = -0.11;\nfloat a1 = 2.0;\nfloat epsilon = 0.12;\nfloat delta = 4.0;\nfloat k1 = 1.2;\nfloat k2 = -0.23;\nfloat k3 = 1.4;\n\nfloat timestep = 0.062; \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0) * 3.0; \n\n    vec4 ab = texture(iChannel0, coord);\n\n    vec3 laplacian = vec3(texture(iChannel0, coord - pixelSize.zy) +\n                          texture(iChannel0, coord - pixelSize.xz) -\n                          4.0 * texture(iChannel0, coord) +\n                          texture(iChannel0, coord + pixelSize.xz) +\n                          texture(iChannel0, coord + pixelSize.zy));\n\n    vec2 gs = texture(iChannel1, coord).xy;\n    \n    float a = ab.x ;\n    float b = ab.y;\n\n    float foo = smoothstep(0.0, 1.0, gs.x); \n    \n    float delta_a = k1*a - k2*a*a - a*a*a*foo - b + laplacian.x;\n    float delta_b = epsilon*(k3*a - a1*b - a0*gs.y) + delta*laplacian.y; \n    \n   \tvec2 result = vec2(a + delta_a * timestep, \n                       b + delta_b * timestep);\n\n    fragColor = vec4(result.xyy, 1.0);\n    \n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | November 2017\n*/\n\nfloat f = 0.0135;\nfloat k = 0.0915;\nfloat dU = 0.2097;\nfloat dV = 0.105;\n\nfloat timestep = 1.0;\n\n// Keyboard reset taken from https://www.shadertoy.com/view/XtcGD2\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nfloat noise(vec2 co) {\n    vec2 seed = vec2(sin(co.x), cos(co.y));\n    return fract(sin(dot(seed ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    \n    float size = abs(texture(iChannel2, coord).x);\n    \n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0) * (1.5 + size); // (1.25 + sin(-iTime*0.3)*0.75) ; \n\n    vec3 p = texture(iChannel0, coord).xyz;\n\n    vec3 laplacian = vec3(texture(iChannel0, coord - pixelSize.zy) +\n                          texture(iChannel0, coord - pixelSize.xz) -\n                          4.0 * texture(iChannel0, coord) +\n                          texture(iChannel0, coord + pixelSize.xz) +\n                          texture(iChannel0, coord + pixelSize.zy));\n\n    float u = p.x;\n    float v = p.y;\n\n    float fitz = abs(texture(iChannel2, coord).x);\n    k -= (texture(iChannel2, coord).y * 0.02);\n    f -= (texture(iChannel2, coord).y * 0.02);\n    \n    float reactionRate = u * v * v * fitz;\n    \n    float delta_u = dU * laplacian.x - reactionRate + f * (1.0 - u*noise(coord * iTime));\n    float delta_v = dV * laplacian.y + reactionRate - (f + k) * (v- 0.01*noise(13.0*coord * iTime));\n\n   \tvec2 result = clamp(vec2(u + delta_u * timestep, v + delta_v * timestep), 0.0, 1.0);\n\n    if(p.xy == vec2(0) || reset()) {\n        \n        vec2 uv = texture(iChannel1, coord).xy ;\n        fragColor = vec4(uv, 0.0, 1.0);\n        \n        float aspect = iResolution.x / iResolution.y;\n        if (abs(coord.x - 0.5) > 0.025 || abs(coord.y - 0.5) > 0.025 * aspect) {\n            fragColor =  vec4(1,0,0,1);\n        }\n        \n    } else {\n        fragColor = vec4(result.xyy, 1.0);\n    }\n    \n}","name":"Buf D","description":"","type":"buffer"}]}