{"ver":"0.1","info":{"id":"dlcGDr","date":"1682228950","viewed":77,"name":" rotational symmetry2-3","username":"Acre","description":" rotational symmetry2-2+ incomplete circle.\ntime*mouse * rot symmetry2-2 by timmaffett impressed.\nhttps://www.shadertoy.com/view/ctc3Rr","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"time*mouse * rot symmetry2-2\" by timmaffett. https://www.shadertoy.com/view/ctc3Rr\n#define iTime (iTime/20.0)\nvec3 poison_apple=vec3(0.635,0.0,0.38);\nvec3 teal_blue=vec3(0.0,0.329,0.533);\nvec3 misty_green=vec3(0.811,0.894,0.819);\nvec3 darkblue_green=vec3(0.0,0.435,0.482);\nvec3 medium_gray=vec3(0.623,0.627,0.627);  \n  \n  \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 col;\n    vec2 vec;\n    float a,b,c,d,circle;\n    float AA=3.0/min(iResolution.x, iResolution.y);\n    Voronoi(p ,vec2(8.0),vec2(8.0),a,b,c,d);\n    for( float i = floor(length(p)/.11) ; i < min(60.,1.+ceil(length(p)/.03)); i++)\n    {\n        vec = vec2(cos(i*iTime),sin(i*iTime)) *i*.04;\n        circle=sdCircle(p* (sin(d)/d)+vec,i*0.07* (sin(d)/d));\n\n        col=(circle>0.0&&mod(i,5.0)==0.) ? teal_blue      : col;\n        col=(circle>0.0&&mod(i,5.0)==1.) ? poison_apple   : col;\n        col=(circle>0.0&&mod(i,5.0)==2.) ? misty_green    : col;\n        col=(circle>0.0&&mod(i,5.0)==3.) ? darkblue_green : col;\n        col=(circle>0.0&&mod(i,5.0)==4.) ? medium_gray    : col;\n        col = mix(col, vec3(d), smoothstep(AA,0.0,abs(circle)));\n    }\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 voronoi_noise_randomVector(vec2 UV, vec2 offset)\n{\n\tmat2 m = \tmat2(15.27, 47.63, 99.41, 89.98);\n\tUV = fract(sin(UV* m) * 46839.32);\n\treturn vec2(sin(UV.y * +offset.x) * 0.5 + 0.5, cos(UV.x * offset.y) * 0.5 + 0.5);\n}\nvoid Voronoi(vec2 UV, vec2 AngleOffset, vec2 CellDensity, out float Out, out float Cells, out float Lines,out float Points)\n{\n\tvec2 g = floor(UV * CellDensity);\n\tvec2 f = fract(UV * CellDensity);\n\t\n\tfloat res = 8.0;\n\tfloat md=8.0;\n    vec2 mr;\n\tfor (int y = -1; y <= 1; y++)\n \t{\n\t    for (int x = -1; x <= 1; x++)\n\t\t{\n\t\t    vec2 lattice = vec2(x, y);\n            vec2 offset = voronoi_noise_randomVector(lattice + g, AngleOffset);\n            vec2 r = lattice +offset -f;\n\t\t    float d = dot(r,r);\n\n\t\t\tif (d < res)\n\t\t\t{\n\t\t\t    res = d;\n                mr=r;\n\t\t\t}\n\t\t}\n\t}\n    res = 8.0;\n\tfor (int y = -1; y <= 1; y++)\n \t{\n\t    for (int x = -1; x <= 1; x++)\n\t\t{\n\t\t    vec2 lattice = vec2(x, y);\n            vec2 offset = voronoi_noise_randomVector(lattice + g, AngleOffset);\n            vec2 r = lattice +offset -f;\n\t\t    float d = dot(r,r);\n\n\t\t\tif (d < res)\n\t\t\t{\n\t\t\t    res = d;\n\t\t\t    Out = res;\n\t\t\t    Cells = offset.x;\n\t\t\t}\n\t\t\tif( dot(mr-r,mr-r)>0.00001)\n\t\t\t{\n                md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n\t\t\t}\n\t\t}\n\t}\n\n    Lines = md;\n    Points=res;\n    //Lines = mix(1.0, 0.0, smoothstep( 0.0, 0.1, md ));\n\t//Points =smoothstep( 0.1, 0.0, res );\n}\n\nfloat sdCircle( in vec2 p, in float r ) \n{\n    return length(p)-r;\n}","name":"Common","description":"","type":"common"}]}