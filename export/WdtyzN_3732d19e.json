{"ver":"0.1","info":{"id":"WdtyzN","date":"1634905829","viewed":30,"name":"SpaceToy_PalmTree","username":"SpaceToy","description":"Create palm tree and background changes with time, kind of from dark to dawn and daylight to dusk to dark.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["palmtree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Default background color\n    vec4 color = vec4(0.7, 0.5, 0.0, 0.0); //orange\n    \n    // Define the center\n    vec2 center = vec2(0.3, 0.6);\n    \n    // Distance of a normalized pixel coordinate from the center\n    vec2 gradient = uv - center;\n    \n    // Default radius for a circle\n    float radius = 0.2;\n    \n    // Number of petals to generate from a circle\n    float numPetals = 8.0;\n    \n    // Radius of circle changed based on the cos function for which angle\n    // is defined by number of petals multiplied by angle projected by a pixel to\n    // the center of the screen defined above.\n    // iTime is used to make the petals rotate, add iTime for clockwise,\n    // subtract it to get anti-clockwise rotation\n    // Add x component of gradient to bring a little bend at the end of the\n    // petals. 15.0 is a magic value.\n    float changingRadius = radius * cos(15.0 + numPetals * \n                                        atan(gradient.y, gradient.x) +\n                                        20.0 * gradient.x);\n\n    \n    // This is what will give us petals position and correct shape.\n    // The smootstep function will interpolate a value for pixels within the\n    //  two edges and the source value is defined by the length of th gradient.\n    float smoothValue = smoothstep(changingRadius, changingRadius+0.001, \n                                   length(gradient));\n \t\n    // Multiply smoothness with color to get petals\n    color *= smoothValue;\n    \n    float barkRadius = 0.015;\n    \n    // Absolute value of x gradient times some sine angle of y gradient\n    // Subtract both to get the reverse shape.\n    float barkCurve = abs(gradient.x - 0.2 * sin(3.0 * gradient.y));\n    \n    // Let's get the bark. Need to subtract 1 from smootstep o/p to get the \n    // complement value for pixels.\n    float smoothValueY = 1.0 - ((1.0 - smoothstep(barkRadius, barkRadius+0.0001, \n                                                  barkCurve)) *\n                                ((1.0 - smoothstep(0.0, 0.0001, (gradient.y)))));\n\n    color *= smoothValueY;\n    \n    // Time varying pixels, dont do this to have static color background \n    color *= 0.5 + 0.5*sin(iTime+uv.xyxx);\n    \n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}