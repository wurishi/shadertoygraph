{"ver":"0.1","info":{"id":"XsGSDz","date":"1463686110","viewed":1461,"name":"Mouse Coordinates (OnScreen)","username":"MichaelPohoreski","description":"Instructions: Click and Drag mouse button\n\nFixed printing of mouse coordinates to always be on screen.","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["utility","numbers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Instructions: Click and Drag mouse button\n// Fixed coordinates of digits so mouse locations numbers to always be visible\n// Michael Pohoreski\n\n// Smaller Number Printing - @P_Malin\n// Creative Commons CC0 1.0 Universal (CC-0)\n\n// Feel free to modify, distribute or use in commercial code, just don't hold me liable for anything bad that happens!\n// If you use this code and want to give credit, that would be nice but you don't have to.\n\n// I first made this number printing code in https://www.shadertoy.com/view/4sf3RN\n// It started as a silly way of representing digits with rectangles.\n// As people started actually using this in a number of places I thought I would try to condense the \n// useful function a little so that it can be dropped into other shaders more easily,\n// just snip between the perforations below.\n// Also, the licence on the previous shader was a bit restrictive for utility code.\n//\n// Note that the values printed are not always accurate!\n\n// ---- 8< ---- GLSL Number Printing - @P_Malin ---- 8< ----\n// Creative Commons CC0 1.0 Universal (CC-0) \n// https://www.shadertoy.com/view/4sBSWW\n\nfloat DigitBin(const in int x)\n{\n    return x==0?480599.0:x==1?139810.0:x==2?476951.0:x==3?476999.0:x==4?350020.0:x==5?464711.0:x==6?464727.0:x==7?476228.0:x==8?481111.0:x==9?481095.0:0.0;\n}\n\nfloat PrintValue(const in vec2 fragCoord, const in vec2 vPixelCoords, const in vec2 vFontSize, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces)\n{\n    vec2 vStringCharCoords = (fragCoord.xy - vPixelCoords) / vFontSize;\n    if ((vStringCharCoords.y < 0.0) || (vStringCharCoords.y >= 1.0)) return 0.0;\n\tfloat fLog10Value = log2(abs(fValue)) / log2(10.0);\n\tfloat fBiggestIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitIndex = fMaxDigits - floor(vStringCharCoords.x);\n\tfloat fCharBin = 0.0;\n\tif(fDigitIndex > (-fDecimalPlaces - 1.01)) {\n\t\tif(fDigitIndex > fBiggestIndex) {\n\t\t\tif((fValue < 0.0) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;\n\t\t} else {\t\t\n\t\t\tif(fDigitIndex == -1.0) {\n\t\t\t\tif(fDecimalPlaces > 0.0) fCharBin = 2.0;\n\t\t\t} else {\n\t\t\t\tif(fDigitIndex < 0.0) fDigitIndex += 1.0;\n\t\t\t\tfloat fDigitValue = (abs(fValue / (pow(10.0, fDigitIndex))));\n                float kFix = 0.0001;\n                fCharBin = DigitBin(int(floor(mod(kFix+fDigitValue, 10.0))));\n\t\t\t}\t\t\n\t\t}\n\t}\n    return floor(mod((fCharBin / pow(2.0, floor(fract(vStringCharCoords.x) * 4.0) + (floor(vStringCharCoords.y * 5.0) * 4.0))), 2.0));\n}\n\n// ---- 8< -------- 8< -------- 8< -------- 8< ----\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 vColour = vec3(0.0);\n\n\t// Multiples of 4x5 work best\n\tvec2 vFontSize = vec2(8.0, 15.0);\n\n    float mx = iMouse.x;\n    float my = iMouse.y;\n    \n    if (iMouse.z < 1.0)\n    {\n        mx = iResolution.x * 0.5;\n        my = iResolution.y * 0.5;\n    }\n\n    vec2 mXY = vec2( mx, my );\n    \n    float radius = 4.0;\n\tfloat fDistToPointB = length( mXY - fragCoord.xy) - radius;\n\tvColour = mix(vColour, vec3(0.0, 0.0, 1.0), (1.0 - clamp(fDistToPointB, 0.0, 1.0)));\n\t\n    float fDigits;\n\tfloat fDecimalPlaces = 0.0;\n// BEGIN FIX\n    float fPad = 2.0;\n// END    \n\n    if (mx > 0.0)\n\t{\n\t\t// Print Mouse X\n// BEGIN FIX        \n\t\tvec2 vPixelCoord2 = mXY + vec2(-28.0, radius + 2.0);\n        float fValue2 = mx; // / iResolution.x;\n        if (my > (iResolution.y - 2.0*vFontSize.y)) vPixelCoord2.y -= 2.*vFontSize.y;\n        if (mx < (                3.0*vFontSize.x)) fPad = +4.0;\n        if (mx > (iResolution.x - 3.0*vFontSize.x)) fPad = -1.0;\n// END FIX\n\t\tfDigits = fPad;\n        \n        float fIsDigit2 = PrintValue(fragCoord, vPixelCoord2, vFontSize, fValue2, fDigits, fDecimalPlaces);\n\t\tvColour = mix( vColour, vec3(1.0, 0.0, 0.0), fIsDigit2);\n\t\t\n\t\t// Print Mouse Y\n// BEGIN FIX\n\t\tvec2 vPixelCoord3 = mXY + vec2(0.0, radius + 2.0);\n        float fValue3 = my; //  / iResolution.y;\n        if (my > (iResolution.y - 2.*vFontSize.y)) vPixelCoord3.y -= 2.*vFontSize.y;\n// END FIX\n\t\tfDigits = fPad;\n\t\tfloat fIsDigit3 = PrintValue(fragCoord, vPixelCoord3, vFontSize, fValue3, fDigits, fDecimalPlaces);\n\t\tvColour = mix( vColour, vec3(0.0, 1.0, 0.0), fIsDigit3);\n    }\n\n\tfragColor = vec4(vColour,1.0);\n}","name":"Image","description":"","type":"image"}]}