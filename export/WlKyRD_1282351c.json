{"ver":"0.1","info":{"id":"WlKyRD","date":"1610605441","viewed":186,"name":"Raymarching_domainID_samp","username":"Haru86_","description":"Raymarching_domainID_sample","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n\nfloat rand(vec2 st)\n{\n    return fract(sin(dot(st, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n float PerlinNoise(float x) {\n                float aL = rand(vec2(floor(x), 0.1));\n                float aR = rand(vec2(floor(x + 1.0), 0.1));\n                float wL = aL * fract(x);\n                float wR = aR * (fract(x) - 1.0);\n                float f = fract(x);\n                float u = pow(f, 2.0) * (3.0 - 2.0 * f);\n                float n = mix(wL, wR, u);\n\n                return n;\n            }\n\nfloat Box(vec3 p,vec3 size)\n{\n    return length(max(vec3(0.0),abs(p)-size));\n}\n\nfloat map(vec3 p,inout vec3 col,float freqs[4])\n{\n    p.z-=iTime;\n\n    vec3 pos=p;\n    float modNum=0.75;\n    //get axis random id\n    float xid=floor(pos.x/modNum);\n    float yid=floor(pos.y/modNum);\n    float zid=floor(pos.z/modNum);\n    \n    pos.xz=mod(pos.xz,modNum)-0.5*modNum;\n\n    //get constant id\n    int id=(int(floor(rand(vec2(xid,zid))*3.0)))%3;\n    float aud=0.0;\n    if(id==0)\n    {\n        col=vec3(1.0,0.0,0.0);\n        aud=freqs[0];\n    }else if(id==1)\n    {\n        col=vec3(0.0,1.0,0.0);\n        aud=freqs[1];\n    }else if(id==2)\n    {\n        col=vec3(0.0,0.0,1.0);\n        aud=freqs[2];\n    }\n    \n    return Box(pos,vec3(0.2,\n    aud*2.0\n   // +PerlinNoise(float(xid))*10.0+PerlinNoise(float(zid))*10.0\n    ,0.2))-0.15;\n    \n}\n\nfloat freqs[4];\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    freqs[0] = texture( iChannel0, vec2( 0.01, 0.25 ) ).x;\n\tfreqs[1] = texture( iChannel0, vec2( 0.07, 0.25 ) ).x;\n\tfreqs[2] = texture( iChannel0, vec2( 0.15, 0.25 ) ).x;\n\tfreqs[3] = texture( iChannel0, vec2( 0.30, 0.25 ) ).x;\n    //-----------\n\n    vec2 uv = (fragCoord.xy*2.0-iResolution.xy)/min(iResolution.x,iResolution.y);\n    vec3 col = vec3(0,0,0);\n \n    vec3 ro=vec3(0.0,-8.0,6.0);\n    vec3 target=vec3(0,0,0);\n    vec3 cDir=normalize(target-ro);\n    vec3 cSide=cross(cDir,vec3(0.0,1.0,0.0));\n    vec3 cUp=cross(cDir,cSide);\n    float depth=1.0;\n    vec3 rd=vec3(uv.x*cSide+uv.y*cUp+depth*cDir);\n    \n       vec3 mapCol = vec3(0);\n    float d, t = 0.;\n    for(int i=0;i<128;i++)\n    {\n        d = map(ro + rd*t, mapCol,freqs);\n        if(d<0.001||t>100.0)break;\n        t+=d*.35;\n    }\n    \n   \n    vec3 p = ro + rd*t;\n    // Directional derivative lighting.   \n    float dif = max((map(p - .01, mapCol,freqs) - map(p, mapCol,freqs))/.01, 0.);\n    col = vec3(exp(-0.05*t))*mapCol*(dif + .2)*2.;\n\n    fragColor = vec4(sqrt(max(col, 0.)), 1); // Gamma correction.\n}","name":"Image","description":"","type":"image"}]}