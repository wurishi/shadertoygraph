{"ver":"0.1","info":{"id":"WllyzS","date":"1638627642","viewed":80,"name":"StripesWithSimplexNoise","username":"allllll3n","description":"Simple Striples With Simplex Noise","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Simplex Noise Code Implement by Inigo Quilez\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org\n\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\n// -----------------------------------------------\n\n\nfloat Band(float t, float start, float end,float blur){\n    float step1=smoothstep(start-blur,start+blur,t);\n    float step2=smoothstep(end+blur,end-blur,t);\n    \n    return step1*step2;\n}\n\nfloat Rect(vec2 uv,float left,float right,float bottom,float top,float blur){\n \tfloat band1=Band(uv.x,left,right,blur);\n    float band2=Band(uv.y,bottom,top,blur);\n    \n    return band1*band2;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv-=0.5;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    vec3 col=vec3(0.);\n    float TimeAdjustment=0.5;\n\n    //Parameters Here\n    float BandAmount=20.0;\n    float BandOffset=1./BandAmount;\n    float NoiseSpeed=0.5;\n    float NoiseStrength1=50.0f;\n    float NoiseStrength2=NoiseStrength1*0.1f;\n    float NoiseTiling1=1000.0f;\n    float NoiseTiling2=NoiseTiling1*0.1f;\n    \n    float NoiseWave1=noise(vec2(iTime*NoiseSpeed*NoiseTiling1,uv.y*0.01*NoiseTiling1))*NoiseStrength1;\n    float NoiseWave2=noise(vec2(iTime*NoiseSpeed*NoiseTiling2,uv.y*0.01*NoiseTiling2))*NoiseStrength2;\n    float NoiseWaveY=NoiseWave1*NoiseWave2/iResolution.y;\n    uv.x+=NoiseWaveY;\n    \n    float Mask=0.0f;\n    float OffsetMask1=0.0f;\n    float OffsetMask2=0.0f;\n    for(int i=0;i<int(BandAmount);i++){\n        float TimeOffset=BandOffset*float(i);\n        float BandWidth=0.2*pow(length((TimeOffset-0.5)),3.0);\n        float FracTime=(fract(iTime*TimeAdjustment+TimeOffset)*2.-1.);    \n        Mask+=Band(uv.x,-BandWidth+FracTime,BandWidth+FracTime,0.01);\n        OffsetMask1+=Band(uv.x+0.01f,-BandWidth+FracTime+0.01,BandWidth+FracTime+0.02,0.01);\n        OffsetMask2+=Band(uv.x-0.01f,-BandWidth+FracTime-0.02,BandWidth+FracTime-0.01,0.01);\n    }\n    \n    \n    \n    //float mask=Band(uv.x,-BandWidth+FracTime,BandWidth+FracTime,0.01);\n    \n    //float mask=Rect(uv,-.1,.1,-.1,.1,.01);\n\n    \n    col=vec3(1.,0.,0.)*Mask+vec3(0.,1.,0.)*OffsetMask1+vec3(0.,0.,1.)*OffsetMask2;\n    //col=vec3(uv.x,uv.y,0.0f);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}