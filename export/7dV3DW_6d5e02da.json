{"ver":"0.1","info":{"id":"7dV3DW","date":"1632823264","viewed":166,"name":"mandlelbulb","username":"willis","description":"mandlelbulb","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEP 100\n#define MAX_DIST 100.\n#define SURF_DIST 0.01\n#define Sat(a) clamp(a, 0., 1.)\n\n#define STYLE 0\n\n// STYLE 0 : mandelbox\n// STYLE 1 : mandelbulb\n\nfloat ffd1, ffd2;\nconst float Scale = 2.;\n\nconst vec3 REF_COLOR = vec3(.98, .7, .3);\nvec3 objCol = vec3(0.3, 0.1, 0.01);\n\nmat2 Rot(float a){\n    float c = cos(a), s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat smin(float a, float b, float k){\n    float h = Sat(0.5 + 0.5 * (b - a) / k);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat sdMandelbulb(vec3 c){\n    vec3 w = c;\n    float m = dot(w, w);\n    float dz = 0.35;\n    for(int i = 0; i < 4; i++){\n        dz = 8.0 * pow(sqrt(m), 7.) * dz + 0.;\n        float r = length(w) ;\n        float b = 8. * acos(w.y / r) + iTime ;\n        float a = 8. * atan(w.x, w.z);\n        w = pow(r, 8.) * vec3(sin(b)*sin(a), cos(b), sin(b)*cos(a)) + c;\n        m = dot(w, w) ;\n        if(m > MAX_DIST) break;\n    }\n    return 0.25 * log(m) * sqrt(m)/dz ;\n}\n\nfloat sdBox(vec3 p, vec3 b){\n    p = abs(p) - b;\n    return length(max(p, 0.)) + min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdCube(vec3 p, float b){\n    return sdBox(p, vec3(b));\n}\n\nfloat sdSphere(vec3 p, vec4 s){\n    return length(p - s.xyz) - s.w;\n}\n\nvoid sphereFold(inout vec3 z, inout float dz) {\n\tfloat r2 = dot(z,z);\n    float fixedRadius2 = 1.47 + sin(iTime) * 0.5 + 0.5;\n    float minRadius2 = 0.5;\n\n\tif (r2<minRadius2) { \n\t\t// linear inner scaling\n\t\tfloat temp = (fixedRadius2/minRadius2);\n\t\tz *= temp;\n\t\tdz*= temp;\n\t} else if (r2<fixedRadius2) { \n\t\t// this is the actual sphere inversion\n\t\tfloat temp =(fixedRadius2/r2);\n\t\tz *= temp;\n\t\tdz*= temp;\n\t}\n}\n\nvoid boxFold(inout vec3 z, inout float dz) {\n\tz = clamp(z, -1., 1.) * 2. - z;\n}  \n\nfloat DE(vec3 z)\n{\n\tvec3 offset = z;\n\tfloat dr = 1.;\n\tfor (int n = 0; n < 10; n++) {\n\t\tboxFold(z,dr);       // Reflect\n\t\tsphereFold(z,dr);    // Sphere Inversion\n \t\t\n        z=(Scale)*z + offset;  // Scale & Translate\n        dr = dr*abs(Scale) + 1.;\n\t}\n\tfloat r = length(z);\n\treturn r/abs(dr);\n}\n\nfloat GetDist(vec3 p){\n    //objCol += abs(p);\n    return STYLE == 0 ? DE(p) : sdMandelbulb(p * 0.2);\n}\n\nvec3 GetNormal(vec3 p){\n    vec2 e = vec2(0.001, 0.);\n    return normalize(vec3(\n                        GetDist(p + e.xyy) - GetDist(p - e.xyy),\n                        GetDist(p + e.yxy) - GetDist(p - e.yxy),\n                        GetDist(p + e.yyx) - GetDist(p - e.yyx)\n                    ));\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z){\n    vec3 f = normalize(l - p),\n        r = normalize(cross(vec3(0, 1, 0), f)),\n        u = cross(f, r),\n        c = f * z,\n        i = c + uv.x * r + uv.y * u;\n        return normalize(i);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    vec3 p = ro;\n    float d = 0., sd = 0.;\n    for(int i = 0; i < MAX_STEP; i++){\n        d = GetDist(p);\n        sd += d;\n        p = p + d * rd;\n        if(d < SURF_DIST || sd > MAX_DIST) break;\n    }\n    return sd;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5)/iResolution.y;\n    \n    vec2 m = iMouse.xy / iResolution.xy;\n    \n    vec3 ro = vec3(0., 1., -30.);\n    ro.yz *= Rot(-m.y * 3.14 + 1.);\n    ro.xz *= Rot(-m.x * 6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0., 0., 0.), 1.5);\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 col = texture(iChannel0, rd).rgb ;\n    \n    ffd1 = texture(iChannel1, vec2(1. / 512.0, 0)).x * 0.1;\n    ffd2 = texture(iChannel1, vec2(256. / 512.0, 0)).x * 0.1;\n    \n    //ffd2 = 0.;\n    \n    if(d < MAX_DIST){\n        \n        vec3 p = ro + rd * d;\n        vec3 lightPos = vec3(1., 2., 3.);\n        vec3 N = GetNormal(p);\n        vec3 L = normalize(lightPos - p);\n        \n        float fresnel = pow(Sat(1. - dot(N, -rd)), 5.) ;\n        \n        float dif =  Sat(dot(N, L)) * 0.5 + 0.5;\n        \n        d = RayMarch(p + N * SURF_DIST * 2., L);\n        if(d < length(lightPos - p)) dif *= .5;\n        \n        col = vec3(dif) * objCol;\n\n        vec3 reflDir = normalize(reflect(rd, N));\n        vec3 reflCol = texture(iChannel0, reflDir).rgb ;//* objCol ;//* 0.015;\n        \n        col += reflCol ;\n             \n    }\n    col = pow(col, vec3(0.4545));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}