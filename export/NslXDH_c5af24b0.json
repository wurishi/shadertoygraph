{"ver":"0.1","info":{"id":"NslXDH","date":"1618673508","viewed":83,"name":"WitchBall","username":"exxxplainer","description":"A homework on CMC MSU Computer Graphics course","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["witchball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    // Channel0 constains background and the ball \n    // (actually their sum from multiple iterations, and that's why it is averaged)\n    // Channel1 renders Minecraft\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1)\n         + texture(iChannel1, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec3 CAMERA_POS = vec3(0, 1.2, -6);\nconst float INF = 1e10;\n\nconst float AIR_N = 1.0;\nconst float GLASS_N = 1.5;\nconst float DIAMOND_N = 2.5;\n\nconst vec3 LIGHT1_POS = vec3(-2, 1.5, 4);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(-2, 0.5, -1);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.2, 2, 0.4);\n\nvec3 randDir;\n\nfloat TracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    // Find intersection with plane where y == -1:\n    // (CAMERA_POS + t * viewVec).y = -1\n    float t = (-1.2 - pos.y) / dir.y;\n    \n    // If the plane is behind us\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = pos + t * dir;\n\n    // If we are not inside a circle\n    if (dot(worldPos.xz, worldPos.xz) > 100.0) {\n        return INF;\n    }\n    \n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat TraceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) = r * r;\n    // dot(dir, dir) == 1\n    // t * t + 2 * t * dot(pos, dir) + dot(pos, pos) - r * r = 0\n    float b = dot(pos, dir);\n    float D = b * b  - dot(pos, pos) + r * r;\n    if (D < 0.0) {\n        return INF;\n    }\n    \n    // Compute smaller root\n    float t = -b - sqrt(D);\n    // If it is positive, it is closer to us than the bigger root\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n\n    // Else compute bigger root\n    t = -b + sqrt(D);\n    // If the instersection point is again behind, \n    // there is no visible intersection\n    if (t < 0.0) {\n        return INF;\n    }\n    return t;\n}\n\nfloat TraceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    const float R = 1.0f;\n\n    float floorT = (-1.0 - pos.y) / dir.y;\n    if (floorT < 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = pos + floorT * dir;\n    if (dot(worldPos.xz, worldPos.xz) < R * R) {\n        // On the top of the cylinder\n        normal = vec3(0, 1, 0);\n        return floorT;\n    }\n    \n    // Else we are on the side\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - R * R;\n    float D = b * b - a * c;\n    \n    if (D < 0.0) {\n        return INF;\n    }\n    \n    float t = (-b - sqrt(D)) / a;\n    worldPos = pos + t * dir;\n    if (t > 0.0 && worldPos.y <= -1.0) {\n        normal = vec3(worldPos.x, 0, worldPos.z);\n        return t;\n    }\n    \n    // Actually don't need to compute this since it is under the top of the cylinder\n    /*t = (-b + sqrt(D)) / a;      \n    worldPos = pos + t * dir;\n    if (t > 0.0 && worldPos.y <= -1.0) {\n        normal = vec3(worldPos.x, 0, worldPos.z);\n        return t;\n    }*/\n    \n    return INF;\n    \n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNormal;\n    float sphT = TraceSphere(pos, dir, 1.0, sphNormal);\n    if (sphT < dist) {\n        return true;\n    }\n    \n    vec3 cylNormal;\n    float cylT = TraceCylinder(pos, dir, cylNormal);\n    return cylT < dist;\n}\n\nvec3 ComputeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ?\n        0.0 : 20.0f / distSq1;\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ?\n        0.0 : 10.0f / distSq2;\n    \n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    \n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    \n    return sinB * tang + cosB * normal;\n}\n\nfloat square(float x) {\n    return x * x;\n}\n\nfloat rand(int frame) {\n    vec3 seed_dir = vec3(12.9898, 78.233, 45.5432);\n    float seed_coef = 43758.5453;\n    return fract(sin(dot(vec3(float(frame)), seed_dir)) * seed_coef);\n}\n\nvec3 randvec3(int frame) {\n    return vec3(rand(frame), rand(frame + 5), rand(frame + 15));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Getting pseudorandom values\n    vec3 randVals = randvec3(iFrame);\n    randDir = normalize(randVals - 0.5);\n\n    // Renormalized pixel coordinates (from -0.5 to 0.5) with jittering (for antialiasing)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy + (randVals.xy - 0.5)) / iResolution.x;\n    \n    // Setup basis    \n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    \n    // Compute view vector for current pixel\n    vec3 viewVec = normalize(front + uv.x * right + uv.y * up);\n    \n    \n    // Enumerate material types\n    const int EMISSION = 0;\n    const int DIFFUSION = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    // Coefficients for refraction and reflection\n    float nCur = AIR_N;\n    float GLASS_R = square(AIR_N - GLASS_N) / square(AIR_N + GLASS_N);\n    \n    for (int i = 0; i < 10; ++i) {\n        // No intersection yet\n        float t = INF;\n        \n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        // Find intersection with plane\n        vec3 planeNormal;\n        float planeT = TracePlane(curPos, curDir, planeNormal);\n        if (planeT < t) {\n            t = planeT;\n            normal = planeNormal;\n            materialType = DIFFUSION;\n            vec3 worldPos = curPos + t * curDir;\n            color = texture(iChannel0, worldPos.xz * 0.2).rgb;\n        }\n        \n        // Find intersection with lights\n        vec3 lightNormal;\n        float lightT = TraceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, lightNormal);\n        if (lightT < t) {\n            t = lightT;\n            normal = lightNormal;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n        }\n        \n        lightT = TraceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, lightNormal);\n        if (lightT < t) {\n            t = lightT;\n            normal = lightNormal;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n        }\n        \n        // The Ball\n        vec3 sphNormal;\n        float sphT = TraceSphere(curPos, curDir, 1.0, sphNormal);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNormal;\n            \n            if (randVals.y < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n            \n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                    //colorMult *= vec3(0.5, 0.5, 1);\n                }\n            }\n        }\n        \n        // Cylinder\n        vec3 cylNormal;\n        float cylinT = TraceCylinder(curPos, curDir, cylNormal);\n        if (cylinT < t) {\n            t = cylinT;\n            normal = cylNormal;\n            materialType = DIFFUSION;\n            vec3 worldPos = curPos + t * curDir;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n        }\n        \n        // Process intersection\n        if (t != INF) {\n            vec3 worldPos = curPos + t * curDir;\n\n            if (materialType == EMISSION) {\n                fragColor.rgb = color;\n                break;\n            } else if (materialType == DIFFUSION) {\n                fragColor.rgb = ComputeLight(worldPos, color, normal);\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, nCur, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                nCur = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb;\n        }\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Cumulative buffer\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Yes, I found a working implementation of minecraft on Shadertoy and didn't wrote this code myself.\n// But it looks cool.\n\n// Minecraft Blocks. Created by Reinder Nijhoff 2013\n// Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\n// @reindernijhoff\n//\n// https://www.shadertoy.com/view/MdlGz4\n//\n// port of javascript minecraft: http://jsfiddle.net/uzMPU/\n// original code by Markus Persson: https://twitter.com/notch/status/275331530040160256\n\nfloat hash( float n ) {\n    return fract(sin(n)*43758.5453);\n}\n\n// port of minecraft\n\nbool getMaterialColor( int i, vec2 coord, out vec3 color ) {\n\t// 16x16 tex\n\tvec2 uv = floor( coord );\n\n    float n = uv.x + uv.y*347.0 + 4321.0 * float(i);\n\tfloat h = hash(n);\n\t\t\n    float br = 1. - h * (96./255.\n\t\t\t\t\t\t);\n\tcolor = vec3( 150./255., 108./255.,  74./255.); // 0x966C4A;\n\t\n\tif (i == 4) {\n\t\tcolor = vec3( 127./255., 127./255., 127./255.); // 0x7F7F7F;\n\t}\n\t\n\tfloat xm1 = mod((uv.x * uv.x * 3. + uv.x * 81.) / 4., 4.);\n\t\n\tif (i == 1) {\n\t\tif( uv.y < (xm1 + 18.)) {\n\t\t\tcolor = vec3( 106./255., 170./255.,  64./255.); // 0x6AAA40;\n\t\t} else if (uv.y < (xm1 + 19.)) {\n\t\t\tbr = br * (2. / 3.);\n\t\t}\n\t}\n\t\n\tif (i == 7) {\n\t\tcolor = vec3( 103./255., 82./255.,  49./255.); // 0x675231;\n\t\tif (uv.x > 0. && uv.x < 15.\n\t\t\t&& ((uv.y > 0. && uv.y < 15.) || (uv.y > 32. && uv.y < 47.))) {\n\t\t\tcolor = vec3( 188./255., 152./255.,  98./255.); // 0xBC9862;\n\t\t\tfloat xd = (uv.x - 7.);\n\t\t\tfloat yd = (mod(uv.y, 16.) - 7.);\n\t\t\tif (xd < 0.)\n\t\t\t\txd = 1. - xd;\n\t\t\tif (yd < 0.)\n\t\t\t\tyd = 1. - yd;\n\t\t\tif (yd > xd)\n\t\t\t\txd = yd;\n\t\t\t\n\t\t\tbr = 1. - (h * (32./255.) + mod(xd, 4.) * (32./255.));\n\t\t} else if ( h < 0.5 ) {\n\t\t\tbr = br * (1.5 - mod(uv.x, 2.));\n\t\t}\n\t}\n\t\n\tif (i == 5) {\n\t\tcolor = vec3( 181./255.,  58./255.,  21./255.); // 0xB53A15;\n\t\tif ( mod(uv.x + (floor(uv.y / 4.) * 5.), 8.) == 0. || mod( uv.y, 4.) == 0.) {\n\t\t\tcolor = vec3( 188./255., 175./255., 165./255.); // 0xBCAFA5;\n\t\t}\n\t}\n\tif (i == 9) {\n\t\tcolor = vec3(  64./255.,  64./255., 255./255.); // 0x4040ff;\n\t}\n\t\n\tfloat brr = br;\n\tif (uv.y >= 32.)\n\t\tbrr /= 2.;\n\t\n\tif (i == 8) {\n\t\tcolor = vec3(  80./255., 217./255.,  55./255.); // 0x50D937;\n\t\tif ( h < 0.5) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tcolor *= brr;\n\t\n\treturn true;\n}\n\nint getMap( vec3 pos ) {\t\n\tvec3 posf = floor( (pos - vec3(32.))  );\n    \n\tfloat n = posf.x + posf.y*517.0 + 1313.0*posf.z;\n    float h = hash(n);\n\t\n\tif( h > sqrt( sqrt( dot( posf.yz, posf.yz )*0.16 ) ) - 0.8  ) {\n        return 0;\n\t}\t\n\t\n\treturn int( hash( n * 465.233 ) * 16. );\n}\n\nvec3 renderMinecraft( vec2 uv ) {\n    float xRot = sin( iTime*0.5 ) * 0.4 + (3.1415 / 2.);\n    float yRot = cos( iTime*0.5 ) * 0.4;\n    float yCos = cos(yRot);\n    float ySin = sin(yRot);\n    float xCos = cos(xRot);\n    float xSin = sin(xRot);\n\n\tvec3 opos = vec3( 32.5 + iTime * 6.4, 32.5, 32.5 );\n\t\n\tfloat gggxd = (uv.x - 0.5) * (iResolution.x / iResolution.y );\n\tfloat ggyd = (1.-uv.y - 0.5);\n\tfloat ggzd = 1.;\n\t\n\tfloat gggzd = ggzd * yCos + ggyd * ySin;\n\t\n\tvec3 _posd = vec3( gggxd * xCos + gggzd * xSin,\n\t\t\t\t\t   ggyd * yCos - ggzd * ySin,\n\t\t\t\t\t   gggzd * xCos - gggxd * xSin );\n\t\n\tvec3 col = vec3( 0. );\n\tfloat br = 1.;\n\tvec3 bdist = vec3( 255. - 100., 255. -   0., 255. -  50.  );\n\tfloat ddist = 0.;\n\t\n\tfloat closest = 32.;\n\t\n\tfor ( int d = 0; d < 3; d++) {\n\t\tfloat dimLength = _posd[d];\n\t\t\n\t\tfloat ll = abs( 1. / dimLength );\n\t\tvec3 posd = _posd * ll;;\n\t\t\n\t\tfloat initial = fract( opos[d] );\n\t\tif (dimLength > 0.) initial = 1. - initial;\n\t\t\n\t\tfloat dist = ll * initial;\n\t\t\n\t\tvec3 pos = opos + posd * initial;\n\t\t\n\t\tif (dimLength < 0.) {\n\t\t\tpos[d] -= 1.;\n\t\t}\n\t\t\n\t\tfor (int i=0; i<30; i++) {\n\t\t\tif( dist > closest )continue;\n\t\t\t\n\t\t\t//int tex = getMap( mod( pos, 64. ) );\n\t\t\tint tex = getMap( pos );\n\t\t\t\n\t\t\tif (tex > 0) {\n\t\t\t\tvec2 texcoord;\n\t\t\t\ttexcoord.x = mod(((pos.x + pos.z) * 16.), 16.);\n\t\t\t\ttexcoord.y = mod((pos.y * 16.), 16.) + 16.;\n\t\t\t\tif (d == 1) {\n\t\t\t\t\ttexcoord.x = mod(pos.x * 16., 16.);\n\t\t\t\t\ttexcoord.y = mod(pos.z * 16., 16.);\n\t\t\t\t\tif (posd.y < 0.)\n\t\t\t\t\t\ttexcoord.y += 32.;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ( getMaterialColor( tex, texcoord, col ) ) {\n\t\t\t\t\tddist = 1. - (dist / 32.);\n\t\t\t\t\tbr = bdist[d];\n\t\t\t\t\tclosest = dist;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpos += posd;\n\t\t\tdist += ll;\n\t\t}\n\t}\n\t\n\treturn col * ddist * (br/255.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Make picture smaller\n    uv = (uv - vec2(0.4, 0.4)) / vec2(0.2, 0.2);\n    if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) return;\n    \n    // And remove sharp edges by multiplier\n    float mult = 4.0 * (0.25 - dot(uv - vec2(0.5), uv - vec2(0.5)));\n\tfragColor = vec4( clamp(renderMinecraft( uv ) * mult, 0.0, 2.0), 1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}