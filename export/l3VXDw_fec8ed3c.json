{"ver":"0.1","info":{"id":"l3VXDw","date":"1720056611","viewed":40,"name":"Simple CRT Shader","username":"twisterge","description":"A simple CRT shader with flicker","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["video","crt","glow","flicker"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 squareUV(vec2 coord, vec2 res) {\n    if (res.x >= res.y) {\n        coord.x = (coord.x + (res.y - res.x) / 2.0) * res.x / res.y;\n    } else {\n        coord.y = (coord.y + (res.x - res.y) / 2.0) * res.y / res.x;\n    }\n    \n    return coord / res;\n}\n\nfloat sdBox(in vec2 p, float off)\n{\n    vec2 b = vec2(0.92, 0.92) + vec2(off);\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvec3 pixel(in vec2 p, vec3 color, float off, float feather) {\n    const float sz = 2.0;\n    vec2 p0 = vec2(p.x * 3.0 + sz, p.y);\n    vec2 p1 = vec2(p.x * 3.0, p.y);\n    vec2 p2 = vec2(p.x * 3.0 - sz, p.y);\n    vec3 b0 = smoothstep(feather, 0.0, sdBox(p0, off)) * vec3(color.r, 0.0, 0.0);\n    vec3 b1 = smoothstep(feather, 0.0, sdBox(p1, off)) * vec3(0.0, color.g, 0.0);\n    vec3 b2 = smoothstep(feather, 0.0, sdBox(p2, off)) * vec3(0.0, 0.0, color.b);\n    return b0 + b1 + b2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenSize = vec2(320, 240);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = squareUV(fragCoord, iResolution.xy);\n    vec2 p = fract(uv * screenSize);\n    \n    vec2 screenP = (p * 2.0 - 1.0);\n    \n    vec2 normUV = fragCoord.xy / iResolution.xy;\n    vec2 texUV = floor(normUV * screenSize) / screenSize;\n    vec3 color = texture(iChannel0, texUV).rgb;\n    vec3 bx = pixel(screenP, color, 0.0, 0.1);\n    \n    float flicker = sin(texUV.y * 3.0 + iTime * 1.0) * 0.5 + 0.5;\n    flicker = smoothstep(0.5, 0.6, flicker);\n    \n    // glow\n    bx += pixel(screenP, color, -1.0, 2.5) * flicker;\n\n    // Output to screen\n    fragColor = vec4(bx, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}