{"ver":"0.1","info":{"id":"3sXyDM","date":"1584862602","viewed":73,"name":"Julia2D","username":"NY","description":"a","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// HSV カラー生成関数\nvec3 hsv(float h, float s, float v){\n    vec4 t = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(vec3(h) + t.xyz) * 6.0 - vec3(t.w));\n    return v * mix(vec3(t.x), clamp(p - vec3(t.x), 0.0, 1.0), s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n      vec2 p  = (2. * fragCoord - iResolution.xy) / iResolution.y;\n\n    \n    int j = 0;\n    vec2 x = vec2(-0.345, 0.654);\n    vec2 y = vec2(iTime * 0.005, 0.0);\n    vec2 z = p;\n    for(int i = 0; i < 360; i++){\n        j++;\n        if(length(z) > 2.0){break;}\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + x + y;\n    }\n\n    // 時間の経過で色を HSV 出力する\n    float h = mod(iTime * 20.0, 360.0) / 360.0;\n    vec3 rgb = hsv(h, 1.0, 1.0);\n    \n    // 漸化式で繰り返した回数をもとに輝度を決める\n    float t = float(j) / 360.0;\n    \n    // 最終的な色の出力\n    fragColor = vec4(rgb * t, 1.0);\n}","name":"Image","description":"","type":"image"}]}