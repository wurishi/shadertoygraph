{"ver":"0.1","info":{"id":"ctlczB","date":"1690901455","viewed":102,"name":"Voxel terrain","username":"GBA","description":"A voxel terrain using the algorithm from this shader https://www.shadertoy.com/view/4dX3zl","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["dda"],"hasliked":0,"parentid":"mlsyWr","parentname":"Voxel dda"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox( vec3 p, vec3 b)\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec2 getVoxel(vec3 p) {\n    vec3 c = vec3(5.0, 0.0, 5.0);\n    vec3 q = mod(p + 0.5 * c, c) - 0.5 * c;\n    vec3 b = 0.5 * c.xxx;\n    vec2 xz = floor((p.xz - 0.5 * c.xz) / c.xz);\n    b.y += 10. * noise(xz / 5.0) + 20. * fbm(xz / 10., 2);\n    vec2 r;\n    r.x = float(sdBox(q, b) < 0.0);\n    r.y = b.y;\n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.y /= iResolution.x/iResolution.y;\n    vec3 rd = normalize(vec3(ndc, 1.0));\n    vec3 ro = vec3(1.0, 30.0, 20. * iTime);\n    vec3 mp = floor(ro);\n    vec3 d = abs(vec3(length(rd))/rd);\n    \n    bool hit = false;\n    bvec3 mask;\n    vec3 dist = (sign(rd) * (mp - ro) + (sign(rd) * 0.5) + 0.5) * d;\n    for(float t = 0.0; t < 500.; t++) {        \n        if(getVoxel(mp).x == 1.0){\n            hit = true;\n            break;\n        }\n        mask = lessThanEqual(dist.xyz, min(dist.yzx, dist.zxy));\n        dist += vec3(mask) * d;\n        mp += vec3(mask) * sign(rd);\n        if(mp.y < 10.0) break;\n    }\n    \n    vec3 col = vec3(0.53, 0.81, .92);\n    if(hit) { \n        vec2 r = getVoxel(mp);\n        col = vec3(0.7098, 0.3961, 0.1176);\n        if(r.y > 15.0 - 2. * noise(mp.xz)) col = vec3(0.4862, 0.9882, 0.0); \n        col += 0.4 * fbm(mp.xz * 2.0 + mp.y, 2);\n        float dz = 0.025 * (mp.z - ro.z);\n        col *= 1.0/(1.0 + dz * dz);\n    }\n    if(mp.y < 10.0) col = vec3(0.0, 0.0, 1.0);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float rand(vec2 co) {\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f*f*f*(f*(f*6.-15.)+10.);\n    vec2 d = vec2(1.0, 0.0); \n    \n    float x1 = rand(i);\n    float x2 = rand(i + d.xy);\n    float x3 = rand(i + d.yx);\n    float x4 = rand(i + d.xx);\n    \n    float mix1 = mix(x1, x2, u.x);\n    float mix2 = mix(x3, x4, u.x);\n    \n    return mix(mix1, mix2, u.y);\n    \n}\n\nfloat fbm(vec2 p, int n) {\n    float s = .5;\n    float f = 0.;\n    mat2 r = 2. * mat2(0.76024, 0.64963, -0.64963, 0.76024);\n    for(int i = 0; i < n; i++) {\n        f += s * noise(p);\n        p *= r;\n        s *= .5;\n    }\n    return f;\n}","name":"Common","description":"","type":"common"}]}