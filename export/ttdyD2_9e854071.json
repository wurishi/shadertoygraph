{"ver":"0.1","info":{"id":"ttdyD2","date":"1610028532","viewed":100,"name":"Desert and sun","username":"regis","description":"Desert and sun","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","sun","desert"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 tpos = vec4(0.0, 0.0, 0.0, 0.0);\nfloat angle_tpos;\nbool done = false;\nfloat dist = 0.0;\n\nmat2 Rot(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nmat3 RotX(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat3(1., .0, .0, .0, c, -s, .0, s, c);\n\n}\n\nmat3 RotY(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat3(c, .0, s, .0, 1., .0, -s, .0, c);\n\n}\n\nmat3 RotZ(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat3(c, -s, .0, s, c, .0, .0, .0, 1.);\n\n}\n\nfloat opExtrusion(in vec3 p, in float d, in float h) {\n    // d is the distance to the 2D shape using the x and y components of p\n    vec2 w = vec2(d, abs(p.z) - h);\n    return min(max(w.x, w.y), 0.0) + length(max(w, 0.0));\n}\n\nvec4 opElongate( in vec3 p, in vec3 h )\n{\n    //return vec4( p-clamp(p,-h,h), 0.0 ); // faster, but produces zero in the interior elongated box\n    \n    vec3 q = abs(p)-h;\n    return vec4( max(q,0.0), min(max(q.x,max(q.y,q.z)),0.0) );\n}\n\n\nvec3 opTwist(in vec3 p, in float t) {\n    float c = cos(t * p.y);\n    float s = sin(t * p.y);\n    mat2 m = mat2(c, -s, s, c);\n    return vec3(m * p.xz, p.y);\n}\n\n// from iq\nfloat Noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n  \tf = f*f*(3.0-2.0*f);\n  \tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n  \tvec2 rg = textureLod( iChannel0, (uv+0.5)/256.0, 0.0).yx;\n  \treturn mix( rg.x, rg.y, f.z );\n}\n\n// ref https://www.shadertoy.com/view/Xs33Df\nfloat Noise3D(in vec3 p){\n    const vec3 s = vec3(7, 157, 113);\n\tvec3 ip = floor(p); // Unique unit cell ID.\n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n\tp -= ip; // Cell's fractional component.\n    p = p*p*(3. - 2.*p);\n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); // Range: [0, 1].\n\t\n}\n\nfloat FBM( in vec3 p )\n{\n    float n = 0.0;\n    n += 0.50000*Noise( p*1.0 );\n    n += 0.25000*Noise( p*2.0 );\n    n += 0.12500*Noise( p*4.0 );\n    n += 0.06250*Noise( p*8.0 );\n    n += 0.03125*Noise( p*16.0 );\n    return n/0.984375;\n}\n\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.)-0.1;\n    \n    return e+i;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return -(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r);\n}\n\nfloat Box(vec3 p, vec3 sc, float r){\n    return length(max(abs(p)-sc, 0.));\n}\n\nfloat opRep( in vec3 p, in vec3 c, vec3 sc, float r )\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return Box( q, sc, r );\n}\n\nfloat opRepS( in vec3 p, in vec3 c, vec4 pos )\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return length(q) - pos.w;\n}\n\nvec3 add_tpos(vec3 tp){\n    return vec3(tp.x+tpos.x, tp.y+tpos.y, tp.z+tpos.z);\n    \n}\n\nvec3 rot_y(vec3 tp, float a){\n    tp.xz *= Rot(a);\n    return tp;\n\n}\n\nfloat noi(vec3 p){ \n  vec3 f=floor(p),s=vec3(7,157,113);\n  p-=f; vec4 h=vec4(0,s.yz,s.y+s.z)+dot(f,s);;\n  p=p*p*(3.-2.*p);\n  h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n  h.xy=mix(h.xz,h.yw,p.y);\n  return mix(h.x,h.y,p.z);  \n}\n\n\n\nvec2 GetDist(vec3 p, vec2 uv){\n\n\n    stone vballe[10];\n    stone nballe;\n    \n    vec4 s = vec4(50.0,3.0, 100.0,25.0);\n    vec4 s2 = vec4(-15.0 ,3.0, 100.0, 5.0);\n    \n    \n    \n    \n    vec2 d=vec2(0.0);;\n    float pd = dot(p, vec3(0.0, 1.0, 0.0));\n    \n    \n    //pd = pd - noi(p*0.91)*0.1 -sin(p.x+iTime*2.0)*0.02-cos(p.z+iTime*2.0)*0.05+sin(p.y*3.0+iTime)*0.1;//- length(texture(iChannel0, (uv*.03) ).rgb)*.8;\n    \n    //pd = p.y ;\n    pd = pd - noi(p/2.0+iTime) ;//- noi(p*0.5+iTime);;\n   \n    \n    vec3 sp = (p)-s.xyz;\n    //sp /= 5.0;\n    // sp.y += sin(iTime)*0.5;\n    //sp.xz *= Rot(iTime);\n    \n    float sd = opRepS(sp, vec3(100.0, 0.0, 40.0), s);\n    //float sd = length((sp))-s.w;\n       \n    sd -= noi(sp/5.0) ;//- noi(sp*15.)*1.;\n    \n    \n    \n    \n    vec3 sp2 = (p)-s2.xyz;\n    sp2.y += sin(iTime)*0.1;\n    float sd2 = length((sp2))-s2.w;\n    sd2 -= noi(sp2*1.2) ;\n    \n    \n    \n    \n    //bp.y += sin(iTime*0.5);\n    //bp -= noi(bp) - noi(bp*15.)*0.1;\n    //bp.xz *= Rot(iTime);\n    //bp *= RotZ(iTime);\n    //bp *= RotY(iTime);\n   // bp *= RotX(iTime);\n   \n    float x = 3., y=7.0, z=5.;\n    \n        \n    vec4 s3 = vec4(x, y, z, 0.5);\n    vec3 sp3 = (p)-s3.xyz;\n    //sp3.y += sin(iTime)*0.1;\n    float sd3 = length((sp3))-s3.w;\n    \n    //sd3 = opExtrusion(sp3, sd3, 0.02);\n           \n    vec3 bx = vec3(3.0, 4.0, 25.);\n    vec3 bp = p-bx;\n    vec3 sc = vec3(5.0, 4.0, 20.0);\n    float dbv = Box(bp, sc, 0.5);\n    dbv -= noi(p) ;//- noi(p*5.)*0.1;\n        \n    vec3 b1 = vec3(-100.0, 6.0, 30.0);\n    vec3 b2 = vec3(200.0, 6.0, 30.0);\n    \n    float balle = sdCylinder(p, b1, b2, 6.0);\n    balle -= noi(p) ;//- noi(p*5.)*0.1;\n    \n       \n    b1 = vec3(20.0, 1.0, 15.0);\n    b2 = vec3(20.0, 1.0, -2);\n    \n    float trou = max(balle, -dbv);\n    //trou -= noi(p) - noi(p*5.)*0.1;\n    \n    float balle2 = sdCylinder(p, b1, b2, 4.0);\n    balle2 -= noi(p) - noi(p*5.)*0.1;\n    \n    //quad\n    bx = vec3(3.0, .5, 10.);\n    bp = p-bx;\n    sc = vec3(1.0, 0.5, 1.0);\n    //bp *= RotY(iTime);\n    vec4 w = opElongate(bp, vec3(3.0, 0.0, 0.0));\n    float dbv2 = w.w + opRep(w.xyz, vec3(6.0, 0.0, 8.0), sc, 0.5);\n    dbv2 -= noi(bp) ;//- noi(bp*5.)*0.1;\n    \n    \n     bx = vec3(-5.0, 3.5, 10.);\n     bp = p-bx;\n     sc = vec3(.1, 4.0, .1);\n     float dbvc = opRep(bp, vec3(0.0, 0.0, 8.0), sc, 0.5);\n     \n      bx = vec3(-5.0, 5.5, 10.);\n     bp = p-bx;\n     sc = vec3(2.0, .1, .1);\n     float dbvc2 = opRep(bp, vec3(0.0, 0.0, 8.0), sc, 0.5);\n     \n     bx = vec3(12.0, 3.5, 10.);\n     bp = p-bx;\n     sc = vec3(.1, 4.0, .1);\n     float dbvc3 = opRep(bp, vec3(0.0, 0.0, 8.0), sc, 0.5);\n     \n      bx = vec3(12.0, 5.5, 10.);\n     bp = p-bx;\n     sc = vec3(2.0, .1, .1);\n     float dbvc4 = opRep(bp, vec3(0.0, 0.0, 8.0), sc, 0.5);\n    \n    \n      \n      if(sd < sd2){\n          d.x = sd;\n          d.y = -1.0;\n       }\n       else\n       {\n           d.x = sd2;\n          d.y = -1.0;\n       }\n       \n       if(pd < d.x){\n          d.x = pd;\n          d.y = 2.0;\n       }\n       if(trou < d.x){\n          d.x = trou;\n          d.y = 3.0;\n       }\n       \n             \n       if(sd3 < d.x){\n          d.x = sd3;\n          d.y = -1.0;\n       }\n       \n       if(dbv2 < d.x){\n          d.x = dbv2;\n          d.y = 3.0;\n       }\n       \n       if(dbvc < d.x){\n          d.x = dbvc;\n          d.y = 5.0;\n       }\n       \n       if(dbvc2 < d.x){\n          d.x = dbvc2;\n          d.y = 5.0;\n       }\n       \n       if(dbvc3 < d.x){\n          d.x = dbvc3;\n          d.y = 5.0;\n       }\n       \n       if(dbvc4 < d.x){\n          d.x = dbvc4;\n          d.y = 5.0;\n       }\n            \n       /*       \n       if(balle < d.x){\n          d.x = balle;\n          d.y = 3.0;\n       }*/\n       \n       /*if(balle2 < d.x){\n          d.x = balle2;\n          d.y = 3.0;\n       }\n       \n       if(sd3 < d.x){\n          d.x = sd3;\n          d.y = 4.0;\n       }*/\n       \n      \n   // \n    return d;\n    \n    \n}\n\nvec3 RayMarch2(vec3 eye, vec3 viewRayDirection, vec2 uv){\n    vec3 t = vec3(0.);\n    float max = -100000.0;\n    vec2 dd;\n    float depth = 0.0, end = 10.0;\n    for (int i = 0; i < 100; i++) {\n        dd = GetDist(eye + t.x * viewRayDirection, uv);\n        t.y = dd.x;\n        \n        \n            \n        if (t.y < 0.01) {\n           t.z = dd.y;\n           return t;\n        }\n        t.x += t.y;\n        \n        \n\n        if (t.x >= 70.0) {\n            t.z = dd.y;\n            return t;\n        }\n    }\n    \n    \n    \n    t.z = dd.y;\n    \n    \n    return t;\n\n\n}\n\n\n\n\nfloat GetLight(vec3 p, vec2 uv, vec3 lg, out vec3 n){\n    vec3 lightpos = lg;\n    //lightpos.xz += vec2(sin(iTime), cos(iTime));\n    vec3 l = normalize(lightpos-p);\n    \n    vec2 d = GetDist(p, uv);\n    vec2 e = vec2(0.01, 0);\n    \n    \n    float dd = d.x;\n    n = d.x - vec3(\n        GetDist(p-e.xyy, uv).x,\n        GetDist(p-e.yxy, uv).x,\n        GetDist(p-e.yyx, uv).x);\n    \n    n = normalize(n);\n    \n    float dif = clamp(dot(n, l), .0, 1.);\n    //float dif = clamp(dot(n, l), 0., 1.);\n    //vec2 dd = RayMarch2(p+n*.01, l, uv);\n   //if(dd.x < length(lightpos-p))dif *= 0.1;\n    return dif ;\n\n}\n\n\n\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity, vec2 uv, out vec3 N) {\n    \n    vec2 d = GetDist(p, uv);\n    vec2 e = vec2(0.01, 0);\n    \n    \n    N = d.x - vec3(\n        GetDist(p-e.xyy, uv).x,\n        GetDist(p-e.yxy, uv).x,\n        GetDist(p-e.yyx, uv).x);\n    \n    N = normalize(N);\n    //vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye, vec2 uv, out vec3 n) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity,\n                                  uv,\n                                  n);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity,\n                                  uv,\n                                  n);    \n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    \n    //iMouse.xy / iResolution.xy\n    vec3 lightpos = vec3(5.0, 6., 5.);\n    vec3 lookat = vec3(0.0, 10.0, 10.0);//vec3(0.0, 1.5, 0.0);\n    vec3 ro = vec3(0, 7.0, -4.);\n    \n    vec3 dirc = vec3(0.0, 2.0, 0.0);\n        \n    float an = (iMouse.x/iResolution.x)*10.0;\n    float anx = (iMouse.y/iResolution.y)*10.0;\n    ro -= dirc;\n    lookat -= dirc;\n    ro *= quaternion(vec3(0.0, 0.0, 1.0), anx);\n    lookat *= quaternion(vec3(0.0, 0.0, 1.0), anx);\n    ro *= quaternion(vec3(1.0, 0.0, 0.0), anx);\n    lookat *= quaternion(vec3(1.0, 0.0, 0.0), anx);\n    ro *= quaternion(vec3(0.0, 1.0, 0.0), an);\n    lookat *= quaternion(vec3(0.0, 1.0, 0.0), an);\n    \n    ro += dirc;\n    lookat += dirc;\n      \n    \n    \n    lightpos -= dirc;\n    lightpos *= quaternion(vec3(0.0, 0.0, 1.0), anx);\n    lightpos *= quaternion(vec3(1.0, 0.0, 0.0), anx);\n    lightpos *= quaternion(vec3(0.0, 1.0, 0.0), an);\n    lightpos += dirc;\n    \n    \n    ro.z += mod(iTime*3.0, 150.0);\n    if(ro.z >= 38.0){\n        ro.y = 15.0;\n       \n        \n    \n    }\n    lookat.z += mod(iTime*3.0, 150.0);\n    dirc.z += mod(iTime*3.0, 150.0);\n    lightpos.z += mod(iTime*3.0, 150.0);\n    \n    float zoom = 1.0;    \n    vec3 f = normalize(lookat-ro),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f, r),\n        c = ro + f * zoom,\n        i = c + uv.x * r + uv.y * u,\n        rd = normalize(i-ro);\n        \n    \n        \n     vec3 t;\n     float dO, dif, dif2, dif3, difT;\n     vec3 p;\n     \n  \n     \n     t = RayMarch2(ro, rd, uv);\n     p = ro + rd * t.x;\n     \n    \n    \n     if(t.y >= 0.1){\n         col = mix(vec3(0.0, 0.8, 1.0), vec3(224, 205, 169)/255., length(uv*2.0));\n         \n         \n     }\n     else{\n     \n         vec3 n1, n2, n3, np;\n        dif = GetLight(p, uv, lightpos, n1);\n        dif2 = GetLight(p, uv, vec3(5.0, 5, 0), n2);\n        dif3 = GetLight(p, uv, vec3(-5.0, 7, 5.0), n3);\n        //phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye)\n        vec3 ph = phongIllumination(vec3(1.0), vec3(dif), vec3(1.0, 1.0, 0.0), 50.0, p, ro, uv, np);\n         \n         if(t.z == 0.0){\n             col = ph * vec3(0.0, 1.0, 0.0);//vec3(dif)* vec3(0.0, 1.0, 0.0)+ vec3(dif2)* vec3(0.0, 1.0, 0.0);\n         }\n         else if(t.z == 1.0){\n             col = ph* vec3(1.0, 0.0, 0.0);//vec3(dif)* vec3(1.0, 0.0, 0.0)+ vec3(dif2)* vec3(1.0, 0.0, 0.0);\n         }\n         else if(t.z == 2.0){\n             vec3 colXZ = texture(iChannel1, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel1, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel1, p.xy*0.1).rgb;\n             \n             col = colYZ * n1.x + colXZ * n1.y + colXY*n1.z;  ///vec3(dif)* texture(iChannel0, uv).rgb;\n             col *= vec3(1.0, 0.0, 0.0);\n         }\n         else if(t.z == -1.0){\n             vec3 colXZ = texture(iChannel0, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel0, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel0, p.xy*0.1).rgb;\n             \n             n1 = abs(n1);\n             \n             n1 *= pow(n1, vec3(20));\n             n1 /= n1.x+n1.y+n1.z;\n             \n             col = colYZ * n1.x + colXZ * n1.y + colXY*n1.z;\n             \n             uv = vec2(atan(p.x, p.z)/6.2832+.5, p.y/3.+0.5);\n             vec4 st = texture(iChannel0, uv);\n             \n             col = vec3(dif) * mix(col, st.rgb, st.a);\n         \n             //col = ph*vec3(1.0, 0.1, 1.0);//vec3(dif)* vec3(1.0, 0.1, 1.0)+ vec3(dif2)* vec3(1.0, 0.1, 1.0);\n         }\n         else if(t.z == 3.0){\n             vec3 colXZ = texture(iChannel0, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel0, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel0, p.xy*0.1).rgb;\n             \n             col = colYZ * n1.x + colXZ * n1.y + colXY*n1.z + colYZ * n3.x + colXZ * n3.y + colXY*n3.z;\n             col += vec3(dif) * vec3(1.0, 0.5, 0.5) * 0.001 ;//+ vec3(dif3) * vec3(1.0, 0.5, 0.5);\n         \n             //col = vec3(dif)* vec3(1.0, 0.5, 0.5) + vec3(dif2)* vec3(1.0, 0.5, 0.5);\n         }\n         else if(t.z == 4.0){\n             col = vec3(dif3)* vec3(1.0, 0.5, 0.5) + vec3(dif3)*texture(iChannel1, uv+iTime*0.01).rgb;\n         }\n         else if(t.z == 5.0){\n             vec3 colXZ = texture(iChannel0, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel0, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel0, p.xy*0.1).rgb;\n             \n             col = colYZ * n1.x + colXZ * n1.y + colXY*n1.z ;\n             col += ph * vec3(1.0, 0.5, 0.5);\n         \n             //col = vec3(dif)* vec3(1.0, 0.5, 0.5) + vec3(dif2)* vec3(1.0, 0.5, 0.5);\n         }\n         \n         vec2 j = uv*3.0;\n         j.x += 0.0;\n         j.y += .1;\n         float sparkle = 1./dot(j,j);\n                \n         col += vec3(dif)*(sparkle*sin(mod(iTime*10.0, 3.1415))*0.01) ;\n    \n         col += mix(vec3(dif)* vec3(.2, .2, .2), vec3(dif)*vec3(1.) , vec3(0.5)*dif ) - vec3(0.2);\n\n         \n         \n         \n     }\n     \n   \n    // Output to screen\n    fragColor = vec4((col),1.0);\n}\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"struct stone{\n\n    vec4 pos;\n    vec3 sp;\n    float sd;\n\n}Balle;\n\n\nmat3 quaternion(vec3 v, float an){\n\n    vec3 z = normalize(v);\n    \n    float a = cos(an/2.0);\n    float s = sin(an/2.0);\n    float b = s*z.x;\n    float c = s*z.y;\n    float d = s*z.z;\n    float a2 = a*a;\n    float b2 = b*b;\n    float c2 = c*c;\n    float d2 = d*d;\n    float _2ab = 2.*a*b;\n    float _2ac = 2.*a*c;\n    float _2ad = 2.*a*d;\n    float _2bc = 2.*b*c;\n    float _2bd = 2.*b*d;\n    float _2cd = 2.*c*d;\n    \n    return mat3(a2+b2-c2-d2  , _2bc-_2ad, _2ac+_2bd, \n                _2ad+_2bc, a2-b2+c2-d2  , _2cd-_2ab,\n                _2bd-_2ac, _2ab+_2cd, a2-b2-c2+d2);\n\n\n}","name":"Common","description":"","type":"common"}]}