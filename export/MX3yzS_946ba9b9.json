{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// Shadertoy compatible shader: \"Animated Path Tracing Global Illumination\"\n// Author: Your Name\n// Description: A path tracing implementation with animated camera and light source.\n\n#define PI 3.14159265359\n#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.001\n#define NUM_SAMPLES 32\n\n// Random function\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// Sphere distance function\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\n// Scene distance function\nfloat scene(vec3 p) {\n    float sphere1 = sdSphere(p - vec3(0.0, 0.0, 0.0), 1.0); // Central sphere\n    float sphere2 = sdSphere(p - vec3(2.0, 0.0, 0.0), 1.0); // Secondary sphere\n    return min(sphere1, sphere2);\n}\n\n// Raymarching function\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0; // Distance from origin\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = scene(p); // Distance to scene\n        if (dS < SURF_DIST || dO > MAX_DIST) break;\n        dO += dS;\n    }\n    return dO;\n}\n\n// Normal calculation\nvec3 getNormal(vec3 p) {\n    float d = scene(p);\n    vec2 e = vec2(0.01, 0.0);\n    vec3 n = d - vec3(\n        scene(p - e.xyy),\n        scene(p - e.yxy),\n        scene(p - e.yyx)\n    );\n    return normalize(n);\n}\n\n// Random direction in a hemisphere\nvec3 randomHemisphereDirection(vec3 n) {\n    vec3 dir = normalize(vec3(\n        random(vec2(gl_FragCoord.xy + 0.1)),\n        random(vec2(gl_FragCoord.xy + 0.2)),\n        random(vec2(gl_FragCoord.xy + 0.3))\n    ) * 2.0 - 1.0);\n    return dot(dir, n) > 0.0 ? dir : -dir;\n}\n\n// Path tracing function\nvec3 pathTrace(vec3 ro, vec3 rd) {\n    vec3 col = vec3(0.0); // Accumulated color\n    vec3 mask = vec3(1.0); // Light contribution mask\n    \n    for (int bounce = 0; bounce < 4; bounce++) {\n        float d = rayMarch(ro, rd);\n        if (d >= MAX_DIST) {\n            // Sky color\n            col += mask * vec3(0.5, 0.7, 1.0);\n            break;\n        }\n        \n        vec3 p = ro + rd * d;\n        vec3 n = getNormal(p);\n        \n        // Animated light source\n        float time = iTime;\n        vec3 lightPos = vec3(3.0 * sin(time), 3.0, 3.0 * cos(time));\n        vec3 lightDir = normalize(lightPos - p);\n        \n        // Direct lighting\n        float diff = max(dot(n, lightDir), 0.0);\n        col += mask * diff * vec3(1.0, 0.8, 0.6);\n        \n        // Indirect lighting (random bounce)\n        rd = randomHemisphereDirection(n);\n        ro = p + n * SURF_DIST * 2.0;\n        mask *= 0.5; // Attenuate light contribution\n    }\n    \n    return col;\n}\n\n// Main rendering function\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized coordinates\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Camera setup with animation\n    float time = iTime;\n    vec3 ro = vec3(5.0 * sin(time * 0.2), 2.0, 5.0 * cos(time * 0.2)); // Animated camera position\n    vec3 lookAt = vec3(0.0, 0.0, 0.0); // Look at point\n    vec3 forward = normalize(lookAt - ro);\n    vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), forward));\n    vec3 up = cross(forward, right);\n    vec3 rd = normalize(forward + uv.x * right + uv.y * up); // Ray direction\n    \n    // Path tracing\n    vec3 col = vec3(0.0);\n    for (int i = 0; i < NUM_SAMPLES; i++) {\n        col += pathTrace(ro, rd);\n    }\n    col /= float(NUM_SAMPLES); // Average samples\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MX3yzS","date":"1735248762","viewed":99,"name":"Deepseek 4","username":"darrinm","description":"Deepseek v3 test","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["globalillumination","pathtracing"],"hasliked":0,"parentid":"","parentname":""}}