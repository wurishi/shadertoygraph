{"ver":"0.1","info":{"id":"ldBBzV","date":"1501137609","viewed":477,"name":"[SH17C] Subpixel movement","username":"unbird","description":"Subpixel movement illustration. Speed is 1 \"pixel\" per second, upper half is smooth, lower is rounded to pixel position.\n\nChange PIXELSIZE constant for granularity. Set to 1 for actual pixels.\n\n(made after a chat discussion about the topic)","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["antialias","subpixel","movement"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Subpixel movement\n\t\n\tby unbird\n\n\tLicense: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\t\n\tIllustrating the illusion of subpixel movement thanks to filtering/\"supersampling\"/anti-aliasing\n\n\tSelf ref : https://www.shadertoy.com/view/ldBBzV\n\n\tUpdate: Cleaner transitions, simplified calculation\n\n*/\n\n// Change the following constant to define \"pixel\" size\n\nconst int PIXELSIZE = 10;\n\n///////////////////////////////////////////////////////////\n\nfloat circle(vec2 p, float radius)\n{\n\treturn length(p) - radius;\n}\n\nfloat saturate(float x)\n{\n    return clamp(x, 0.0, 1.0);\n}\n\nvoid blend(inout vec4 back, float dist, vec4 color, float border)\n{\n    float alpha = saturate((dist+border)/border);\n    color = mix(color, vec4(0.0, 0.0, 0.0, 1.0), saturate((dist + 2.0 * border)/border));    \n    back = mix(back, color, (1.0-alpha) * color.a);\n}\n\nfloat pingpong(float time)\n{\n    // triangle curve\n\treturn abs(fract(time)*2.0 - 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    fragColor = vec4(0.5);\n    float center = iResolution.y / 2.0;\n\tivec2 pixCoord = ivec2(fragCoord);\n    \n    // screen split\n    if(pixCoord.y == int(center))\n        return;\n    \n    // background color\n\tfragColor = vec4(0.0,1.0,0.0,1.0);\n    \n\tfloat pixelSize = float(PIXELSIZE);   \n\t\n    // comment out the following line to remove the pixelated look (for debugging)\n    fragCoord = floor(fragCoord / pixelSize) * pixelSize;\n\t\n    float radius = iResolution.y / 3.0;        \n    float speed = pixelSize / iResolution.x;\n\tfloat x = radius + pingpong(iTime*speed) * (iResolution.x - radius*2.0);\n    if(pixCoord.y < int(center))\n        x = round(x / pixelSize) * pixelSize;\n\t\n    blend(fragColor, circle(vec2(fragCoord.x - x, fragCoord.y - center), radius), vec4(1.0), pixelSize);\t\n}\n","name":"Image","description":"","type":"image"}]}