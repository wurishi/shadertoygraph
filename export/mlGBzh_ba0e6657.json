{"ver":"0.1","info":{"id":"mlGBzh","date":"1701997335","viewed":45,"name":"Fork UCSD CSE 1 vraj 692","username":"vraj","description":"This is a homework template for a homework for UCSD CSE 167.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["boids"],"hasliked":0,"parentid":"ddtyDs","parentname":"UCSD CSE 167 Boids template"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Smooth HSV2RGB from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = vec4(0.5, 0.5, 0.5, 1.0);\n    // Loop over all boids\n    vec4 bcolor = vec4(0.0, 0.0, 0.0, 1.0);\n    bool hit = false;\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 pos_vel = texelFetch(iChannel0, tex_pos, 0);\n        if (distance(fragCoord, pos_vel.xy) < BOIDS_SIZE) {\n            vec3 rgb = hsv2rgb(vec3((float(i)+0.5) / float(NUM_BOIDS), 1.0, 0.9));\n            bcolor += vec4(rgb, 1.0);\n            hit = true;\n        }\n    }\n    if (hit) {\n        color = bcolor;\n    }\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame == 0) {\n        // initialize the buffer\n        vec4 pos_vel = texture(iChannel1, fragCoord/iChannelResolution[1].xy);\n        pos_vel.xy = iResolution.xy / 2.0 + (pos_vel.xy - 0.5) * iResolution.xy * 0.2;\n        pos_vel.zw = (pos_vel.zw - 0.5) * iResolution.xy * 1.0;\n        fragColor = pos_vel;\n        return;\n    }\n    ivec2 iFragCoord = ivec2(fragCoord);\n    // \n    vec4 pos_vel = texelFetch(iChannel0, iFragCoord, 0);\n    vec2 pos = pos_vel.xy;\n    vec2 vel = pos_vel.zw;\n    \n    // ID of the current Boid\n    int my_id = int(iFragCoord.y) * int(iResolution.x) + int(iFragCoord.x);\n\n    // Implement Boids here:\n    vec2 F_s_numerator = vec2(0.0,0.0);\n    float N_s = 0.0;\n    vec2 p_bar_numerator = vec2(0.0,0.0);\n    float N_v = 0.0;\n    vec2 v_bar_numerator = vec2(0.0,0.0);\n    \n    for (int i = 0; i < NUM_BOIDS; i++) {\n        if (my_id != i) continue;\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 new_pos_vel = texelFetch(iChannel0, tex_pos, 0);\n        vec2 new_pos = new_pos_vel.xy;\n        vec2 new_vel = new_pos_vel.zw;\n        if (distance(pos, new_pos) < 30.0) {\n            F_s_numerator += new_pos_vel.xy - pos;\n            N_s += 1.0;\n        }\n        if (distance(pos, new_pos) < 150.0) {\n            p_bar_numerator += new_pos_vel.xy;\n            N_v += 1.0;\n            v_bar_numerator += new_pos_vel.zw;\n        }\n    }\n    \n    float bool_a = 0.0;\n    float bool_b = 0.0;\n    float bool_c = 0.0;\n    float bool_d = 0.0;\n\n    if(pos.x < 200.0){bool_a=1.0;}\n    if(pos.x > (iResolution.x - 200.0)){bool_b=1.0;}\n    if(pos.y < 160.0){bool_c=1.0;}\n    if(pos.y > (iResolution.y - 160.0)){bool_d=1.0;}\n\n\n    // compute force based on the neighbor boids\n    vec2 F_s = F_s_numerator;\n    if(N_s != 0.0){F_s = F_s_numerator / (N_s);}\n    \n    vec2 F_c = p_bar_numerator - pos;\n    vec2 F_a = v_bar_numerator - vel;\n    if(N_v != 0.0){\n        F_c = (p_bar_numerator / (N_v)) - pos;\n        F_a = (v_bar_numerator / (N_v)) - vel;\n    }\n    \n    vec2 F_b = vec2(bool_a-bool_b,bool_c-bool_d);\n    \n    vec2 F = (0.02 * F_s) + (0.001 * F_c) + (0.03 * F_a) + (0.5 * F_b);\n\n    // update velocity using force\n    vel = vel + F;\n\n    if (length(vel) > 0.0){\n        if (length(vel) > 10.0){\n            vel = vel * (10.0/length(vel));\n        }\n        if (length(vel) < 5.0){\n            vel = vel * (5.0/length(vel));\n        }\n    }\n\n    // update position using velocity\n    pos += vel;\n\n    fragColor = vec4(pos, vel);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUM_BOIDS 200\n#define BOIDS_SIZE 10.0\n","name":"Common","description":"","type":"common"}]}