{"ver":"0.1","info":{"id":"MXSSW1","date":"1710516300","viewed":47,"name":"wave-y move-y stars (?)","username":"Kat_Purpy","description":"forked from https://www.shadertoy.com/view/McjXRD#","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["background","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// signed distance to a n-star polygon with external angle en\nfloat sdStar(in vec2 p, in float r, in float  n, in float m) // m=[2,n]\n{\n    // these 4 lines can be precomputed for a given shape\n    float an = 3.141593/float(n);\n    float en = 3.141593/m;\n    vec2  acs = vec2(cos(an),sin(an));\n    vec2  ecs = vec2(cos(en),sin(en)); // ecs=vec2(0,1) and simplify, for regular polygon,\n\n    // symmetry (optional)\n    p.x = abs(p.x);\n    \n    // reduce to first sector\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n\n    // line sdf\n    p -= r*acs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    uv.x += sin(iTime * 1.0 + uv.y*0.2);\n    uv.y += iTime * 0.34;\n    uv = fract(uv * 2.0)-0.5;\n    float w = (sin(iTime)+1.)/2.0 + 2.0 + 0.5*0.5*(3.0); \n    \n    float d = sdStar(uv, 0.3, (sin(iTime)+1.)/2.*6.+3., w);\n    \n    d = smoothstep(0.07, 0.1, d);\n    d = 1.0-d;\n    vec3 gold = vec3(1.0, 0.843, 0.0);\n    gold *= d;\n    fragColor = vec4(gold,1.0);\n}","name":"Image","description":"","type":"image"}]}