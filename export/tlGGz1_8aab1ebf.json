{"ver":"0.1","info":{"id":"tlGGz1","date":"1578266835","viewed":300,"name":"Microscopic Algae","username":"Eggy42","description":"A riff on BigWIng's Universe Within tutorial. ","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["2d","green","layers","algae","microscopic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a, b, t)\n#define NUM_LAYERS 5.\n\n// Color pallete\n//      A Component  R     G     B   (Y shift)\n#define pal_a vec3( 0.20, 0.50, 0.20 )  \n//      B Component  R     G     B   (amplitude)\n#define pal_b vec3( 0.10, 0.30, 0.20 )  \n//      C Component  R     G     B   (period)\n#define pal_c vec3( 1.00, 0.70, 0.40 )  \n//      D Component  R     G     B   (phase)\n#define pal_d vec3( 0.00, 0.15, 0.20 )    \n\nvec3 pal( in float t )\n{\n    return 1. - pal_a + pal_b*-cos( 6.28318*(pal_c*t+pal_d) );\n}\n\n// Distance from p to line a-b\nfloat distLine(vec2 p, vec2 a, vec2 b) {\n\tvec2 pa = p - a;\n    vec2 ba = b - a;\n    float t = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n    return length(pa - ba * t);\n\n}\n\n// Noise 2 in, 1 out\nfloat N21 (vec2 p) {\n\tp = fract(p*vec2(231.34, 851.73));\n    p += dot(p, p+23.45);\n    return fract(p.x * p.y);\n}\n\n// Noise 2 in , 2 out\nvec2 N22 (vec2 p ){\n\tfloat n = N21(p);\n    return vec2(n, N21(p+n));\n}\n\n// Get random position within a cell\nvec2 getPos(vec2 id, vec2 offset) {\n    vec2 r = N22(id+offset)*(iTime+22856.)*.2;\n    return offset+sin(r)*.4;\n}\n\n// Is p within a line from a-b\nfloat drawLine (vec2 p, vec2 a, vec2 b) {\n\tfloat d = distLine(p, a, b);\n    float m = S(.08, .0, d);\n    float d2 = length(a-b);\n    m *= S(1.5, 0., d2);\n    return m;\n}\n\n// Draw a whole layer \nfloat drawLayer(vec2 uv) {\n    float m = 0.;\n    \n    // Grid coords\n  \tvec2 gv = fract(uv)-.5;\n \t// ID for this cell\n    vec2 id = floor(uv);\n    \n    // Get the dot position for this cell and 8 surrounding ones\n    vec2 p[9];\n    int i = 0;\n    for(float y=-1.; y<= 1.; y++) {\n    \tfor(float x=-1.; x<= 1.; x++) {\n            p[i++] = getPos(id, vec2(x, y));\n        }\n    }\n    \n    // draw a line from the center to surrounding cells\n    float t = iTime;\n    for(int i=0; i<9; i++) {\n    \tm += drawLine(gv, p[4], p[i]);\n    }\n    // Fill in the diagonals\n    m += drawLine(gv, p[1], p[3]);\n    m += drawLine(gv, p[1], p[5]);\n    m += drawLine(gv, p[7], p[3]);\n    m += drawLine(gv, p[7], p[5]);\n    \n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy/iResolution.xy)-.5;\n\n    float m = 0.;\n    float t = sin(iTime*.03);\n\n    // Rotate and zoom over time\n    float s = sin(t);\n    float c = cos(t);\n    mat2 rot = mat2(c, -s, s, c);\n    \n    // grab the distance from the bottom\n    float gradient = uv.y;\n    \n    // Grab distance from edges for vignette\n    float vignette = length(uv);\n    \n    // Rotate coords\n    uv *= rot;\n    mouse *= rot;\n    \n    // Draw multiple layers at different scales and positions\n    for (float i = 0.; i<1.; i+=1./NUM_LAYERS) {\n        float z = fract(i+t);\n        float size = mix(10., .5, z);\n        float fade = S(0., .6, z)*S(1., .9, z);\n        m += drawLayer(uv*size+i*20.-mouse)*fade;\n    }\n    \n    // Color things\n    vec3 base = pal(iTime*.03);\n    vec3 col = m*base;\n    col -= gradient*base*.8;\n    col += smoothstep(0.8, .99, vignette)*2.;\n\n    // Tone mapping? KeepsSee: https://www.shadertoy.com/view/3s3GDn\n    col = 1.0 - exp( -col );\n        \n    // Output to screen\n    fragColor = vec4(vec3(1)-col, 1.0);\n}","name":"Image","description":"","type":"image"}]}