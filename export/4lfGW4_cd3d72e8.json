{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// [2TC 15] Speckle CrossFade\n// Copyleft {c} 2015 Michael Pohoreski\n// Chars: 267 one-time, 276 repeat\n//\nfloat r(vec2 p){return fract(cos(mod(123456789.,256.*dot(p,vec2(23.140692632779,2.6651441426902)))));}\n\n// Another popular/canonical \"rnd\"; for more details see: \n// http://stackoverflow.com/questions/12964279/whats-the-origin-of-this-glsl-rand-one-liner\n//float r(vec2 p){return fract(sin(dot(p.xy ,vec2(12.9898,78.233))) * 43758.5453);}\n\n\n// Why is there a 0.4 in there?\n//   Duration = 2.5 seconds\n// We need a normalized time between 0.0 and 1.0 thus:\n//   = 1/Duration * mod( time, duration )\n//   = 0.4 * ...\nvoid mainImage( out vec4 f, in vec2 w ){vec2 p=w/iResolution.xy;p.y=1.-p.y;\n  // one-time\n  //f=mix(texture(iChannel0,p),texture(iChannel1,p),((min(1.,.4*    iTime     ))<=r(p))?0.:1.);\n  // repeat\n  f=mix(texture(iChannel0,p),texture(iChannel1,p),((min(1.,.4*mod(iTime,2.5)))<=r(p))?0.:1.);\n}\n\n/*\n// In case you hate \"de-compiling\" the minified version, here is the original code.\n// Major props to I.Q. for building ShaderToy to make it trivial to play with shaders!\n//\n// Why not use C style comments?\n// ShaderToy HAD a bug that incorrectly counts characters in C-style comments :-(\n//\n// I use this Define ShaderToy Shim to run the original shader in ShaderToy ...\n//\n#define vvTexCoord fragCoord.xy / iResolution.xy\n#define unTime     iTime\n#define unDuration 10.0\n#define utDiffuse1 iChannel0\n#define utDiffuse2 iChannel1\n\n// See my post on Stack Overflow on how to generate a random number in a shader without using a noise texture\n// http://stackoverflow.com/questions/5149544/can-i-generate-a-random-number-inside-a-pixel-shader/10625698#10625698\nfloat random( vec2 p )\n{\n    const vec2 r = vec2(23.14069263277926,2.665144142690225);\n    return fract( cos( mod( 123456789., 256. * dot(p,r) ) ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    vec2  p = vvTexCoord;\n    float t = min( 1., 2. * unTime / unDuration);\n    float w = (t <= random( p )) ? 0. : 1.;\n    vec4 texel1 = texture( utDiffuse1, p );\n    vec4 texel2 = texture( utDiffuse2, p );\n    fragColor = mix( texel1, texel2, w );\n}\n*/\n    ","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4lfGW4","date":"1421897859","viewed":1761,"name":"[2TC 15] Speckle Cross Fade","username":"MichaelPohoreski","description":"A simple random cross fade between two textures","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","random","vfx","crossfade"],"hasliked":0,"parentid":"","parentname":""}}