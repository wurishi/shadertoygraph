{"ver":"0.1","info":{"id":"Wd33Rr","date":"1568483616","viewed":334,"name":"SDF n-ellipse","username":"wagyx","description":"Multifocal ellipse, polyellipse, egglipse,] k-ellipse and Tschirnhaus'sche Eikurve.\nSources are in the code.\nCould be easily ported to 3D.\nUnfortunately, this distance function is not linear.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","ellipse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define N 5\n\n// wikipedia: https://en.wikipedia.org/wiki/N-ellipse\n// original by FabriceNeyret2: https://www.shadertoy.com/view/XlGGD3\n// ellipse SDF by inigo quilez is a bit buggy: https://www.shadertoy.com/view/4sS3zz\n\n\nfloat sdEllipse( in vec2[N] poly, in vec2 p, in float r )\n{\n    float d= -r;\n    for( int i=0; i<N; i++) {\n\t\td+= length(poly[i]-p);\n    }\n\n\treturn d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 pix = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n\tpix *= 1.5;\n    \n\tvec2 v1 = cos( iTime + vec2(0.0,2.00) + 0.0 );\n\tvec2 v2 = cos( iTime + vec2(0.0,1.50) + 1.5 );\n\tvec2 v3 = cos( iTime + vec2(0.0,3.00) + 4.0 );\n\tvec2 v4 = cos( iTime + vec2(0.0,2.00) - 2.0 );\n    vec2 v5 = cos( iTime + vec2(0.0,1.00) - 1.0 );\n    \n    // add more points\n    vec2[N] poly= vec2[N](v1,v3,v2,v4,v5);\n    \n    float radius= 5.0;\n\tfloat d = sdEllipse(poly, pix, radius);\n\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(15.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n   \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}