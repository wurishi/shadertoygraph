{"ver":"0.1","info":{"id":"cllcWj","date":"1691190569","viewed":82,"name":"Gamma correction graph","username":"Envy24","description":"Mouse.x - display gamma,\nMouse.y - image gamma,\nBlue       - gamma curve of image,\nRed        - gamma curve of display,\nMagenta - composite (result) gamma curve.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["graph","gamma","correction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCENE_SCALE               ( 0.53 )\n#define UNIT                      ( (SCENE_SCALE*4.0) / iResolution.y  )\n#define SMAA(d)                   ( smoothstep(UNIT, 0., d) )\n\n/* https://www.shadertoy.com/view/DdsGDj */\n#define MOUSE_OFFSET ( iMouse.z > 0. ? iMouse.xy - iResolution.xy * 0.5 : vec2(0) )\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin, in bool mouse_drag)\n{\n    vec2 M = MOUSE_OFFSET * (mouse_drag == true ? 1. : 0.);\n    return ((2. * (SC - M) - iResolution.xy) / iResolution.y) * scale + origin;\n}\n\nfloat diskSDF(in vec2 NDC, in vec2 C, in float r) { return length(C - NDC)-r; }\nfloat vertical_lineSDF(vec2 NDC, float x0) { return abs(NDC.x-x0); }\nfloat horizontal_lineSDF(vec2 NDC, float y0) { return abs(NDC.y-y0); }\nfloat cellsSDF(vec2 NDC)\n{\n    NDC *= 10.; // Finer cells\n    NDC = fract(NDC);\n    NDC = fract(min(NDC, 1. - NDC));\n    return\n        min(vertical_lineSDF(NDC, 0.), horizontal_lineSDF(NDC, 0.));\n}\nfloat draw_explicit_func(vec2 NDC, float fx, float dfdx)\n{\n    float sdf = NDC.y - fx;\n    return SMAA(abs(sdf) / sqrt(1.0 + dfdx * dfdx));\n}\n\nfloat gamma(float x, float e)\n{\n    return pow(x, e);\n}\n\n// This values should be set, before call explicit() or explicit_dydx();\nfloat img_e = 1./2.2,\n      dis_e = 2.2;\nint func_idx = 0;     // 0,1,2\n\n// Explicit function definition.\nfloat explicit(float x) \n{ \n    switch (func_idx)\n    {\n    case 0: return gamma(x, img_e); \n    case 1: return gamma(x, dis_e);\n    case 2: return gamma(gamma(x, img_e), dis_e);\n    }\n}\nfloat explicit_dydx(float x)\n{\n    const float dx = 0.001;\n    return ( explicit(x+dx) - explicit(x-dx) ) / (2.*dx);\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = map_to_centered_ndc(SC, SCENE_SCALE, vec2(0.9, 0.5), false),\n         MP = map_to_centered_ndc(iMouse.xy, SCENE_SCALE, vec2(0.9, 0.5), false);\n         MP = iMouse.xy == vec2(0) ? vec2(1) : clamp(MP, vec2(0), vec2(1));\n    \n    vec3 color = vec3(1);\n         color = mix( color, vec3(0.8), smoothstep(16./iResolution.y, 0., cellsSDF(NDC)) );        \n         color = mix( color, vec3(0), SMAA(vertical_lineSDF(NDC, 0.)) );\n         color = mix( color, vec3(0), SMAA(vertical_lineSDF(NDC, 1.)) );   \n    /* Image gamma curve. */\n    func_idx = 0; img_e = 1./max(MP.y * 2.2, 0.04);\n    float image_y = explicit(NDC.x),\n          image_dydx = explicit_dydx(NDC.x);\n          \n    color = mix(color, vec3(0,0,1), draw_explicit_func(NDC, image_y, image_dydx));\n    /* Display gamma curve. */\n    func_idx = 1; dis_e = max(MP.x * 2.2, 0.05);\n    float display_y = explicit(NDC.x),\n          display_dydx = explicit_dydx(NDC.x);\n          \n    color = mix(color, vec3(1,0,0), draw_explicit_func(NDC, display_y, display_dydx));\n    /* Composite gamma curve. */\n    func_idx = 2;\n    float system_y = explicit(NDC.x),\n          system_dydx = explicit_dydx(NDC.x);\n    \n    color = mix(color, vec3(1,0,1), draw_explicit_func(NDC, system_y, system_dydx) );\n    /* RGB gradients. */\n    float x_min = 1.2, x_max = 1.67;\n    if (NDC.x >= x_min && NDC.x <= x_max && NDC.y >= 0. && NDC.y < 1.)\n    {\n        float range = x_max - x_min,\n              w = range / 3.,\n              sw0 = float(NDC.x >= x_min        && NDC.x < x_min + w),\n              sw1 = float(NDC.x >= x_min + w    && NDC.x < x_min + 2.*w),\n              sw2 = float(NDC.x >= x_min + 2.*w && NDC.x <= x_max);\n        color = explicit(NDC.y) * vec3(sw0, sw1, sw2);      \n    }\n    /* UV parameter picker. */\n    color = mix(color, vec3(0.5), SMAA(diskSDF(NDC, MP, 0.01)));\n    /* Borders. */\n    color = mix( color, vec3(0), SMAA(horizontal_lineSDF(NDC, 0.)) );\n    color = mix( color, vec3(0), SMAA(horizontal_lineSDF(NDC, 1.)) );\n    color = mix( color, vec3(0), SMAA(vertical_lineSDF(NDC, x_min)) );\n    color = mix( color, vec3(0), SMAA(vertical_lineSDF(NDC, x_max)) );\n    /**/\n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}