{"ver":"0.1","info":{"id":"X3f3DH","date":"1708693193","viewed":47,"name":"TP 1 LIFGraphique","username":"Kamkazeo","description":"TP1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tp1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2023.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  /*ro=vec3(20.,70.,40.);\n  ro*=Rz(a);*/\n  ro=vec3(75.,10.,20);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n\n//Permet de faire boite avec plusieurs plan en intersection\nfloat Plan (vec3 p, vec3 c,vec3 normal)\n  {\n    return dot(p-c, normal); \n  }\n\n\n//Creation d'un cercle pour former un tore\nfloat Cercle(vec3 p, vec3 c, vec3 normal, float r)\n{\n    float h= dot ((p-c),normal);      // Calcul de la hauteur du point par rapport au cercle\n    float l= sqrt(length(p-c)*length(p-c)-(h*h));  // Calcul de la longueur entre le point et le cercle\n    float m= l-r; // On retranche le rayon\n    float d= sqrt((h*h)+(m*m)); // Distance entre le poit et le cercle\n    return d;\n    \n}\n\n\n//Creation d'un Disque\n\n\n\nfloat Tore(vec3 p, vec3 c, vec3 normal, float R,float r)\n{\n    return Cercle(p,c,normal,R)- r; // On retranche r pour retirer la partie pleine du cercle\n}\n\n\n\n//Creation d'une capsule via un segment\n\nfloat Segment (vec3 p,vec3 a,vec3 b)\n{\n    vec3 u =(b-a)/length(b-a);\n    float d;\n    float l;\n    if(dot((p-a),u)<0.)\n        {\n            d=length(p-a);\n        }\n    else if(dot(p-b,u)>0.)\n        {\n            d=length(p-b);\n        }\n    else\n        {\n            l=dot((p-a),u);\n            d=sqrt(length(p-a)*length(p-a)-(l*l));\n        }\n   return d;\n}\n\nfloat Capsule (vec3 p, vec3 a, vec3 b,float r)\n{\n    return Segment(p,a,b)-r;\n}\n\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\nfloat Inter(float a,float b)\n{\n    return max(a,b);\n}\n\n\nfloat Difference(float a,float b)\n{\n    return max(a,-b);\n}\n\n\n\n// Potential field of the object\n// p : point\nfloat Boite (vec3 p)\n{\n  float v1=Plan(p,vec3(0,0,0),vec3(0,0,1)); //Plan dessus\n  float v2=Plan(p,vec3(10,0,0),vec3(1,0,0));//Plan gauche\n  float v3=Plan(p,vec3(- 10,0,0),vec3(-1,0,0));//Plan droite\n  float v4=Plan(p,vec3(0,10,0),vec3(0,1,0));//Plan devant \n  float v5=Plan(p,vec3(0,-10,0),vec3(0,-1,0)); //Plan derriere\n  float v6=Plan(p,vec3(0,0,-10),vec3(0,0,-1));//Plan dessous\n  float v=Inter(v1,Inter(v2,Inter(v3,Inter(v4,Inter(v5,v6)))));\n  return v;\n}\n\n//Creation d'un cylindre via une capsule\n\nfloat Cylindre (vec3 p,vec3 a,vec3 b,float r)\n        {\n            float Cap= Capsule (p,a,b,r);\n            float P1=Plan(p,a,normalize (a-b)); // Plan pour couper l'extrémité a orienté a-b\n            float P2=Plan(p,b,normalize (b-a)); // Plan pour couper l'extrémité b orienté b-a\n            float res=Inter(Inter(Cap,P2),P1);\n            return res;\n        }\n\n\n\n\n// a : Un angle\n// Faire une rotation matricielle autour de z\n\nmat3 rz (float a)\n{\n    float sa=sin(a);\n    float ca=cos(a);\n    return mat3 (ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Faire une rotation matricielle autour de x\n\nmat3 rx(float a)\n{\n    float sa=sin(a);\n    float ca=cos(a);\n    return mat3(1.,0.,0.,0.,ca,-sa,0.,sa,ca);\n}\n\n\n// Faire une rotation matricielle autour de y\n\nmat3 ry(float a)\n{\n    float sa=sin(a);\n    float ca=cos(a);\n    return mat3(ca,0.,sa,0.,1.,0.,-sa,0.,ca);\n}\n\n\n//ROTATION X\n\nvec3 RotationX (vec3 p, float theta)\n{\n    return p*rx(radians(theta));\n}\n\n\n//ROTATION Y\n\nvec3 RotationY (vec3 p, float theta)\n{\n    return p*ry(radians(theta));\n}\n\n\n//ROTATION z\n\nvec3 RotationZ (vec3 p, float theta)\n{\n    return p*ry(radians(theta));\n}\n\n//Le Blend permet les mélanges\n// r : blend radius\n\nfloat Blend (float a, float b,float r)\n{\n    float h =max(r - abs(a-b),0.) / r;\n    float res = (1./6.) * r *(h*h*h);\n    return Union(a,b) - res;\n}\n\nfloat Bol(vec3 p)\n{\n    float a=Sphere(p,vec3(0,0.,23),8.);\n    float b=Plan(p,vec3(0,0,23),vec3(0,0,1));\n    float c=Sphere(p,vec3(0,0.,23),7.5);\n    float d=Plan(p,vec3(0,0,23),vec3(0,0,1));\n    float ext=Inter(a,b);\n    float interieur= Inter(c,d);\n    float BOL=Difference(ext,interieur);// CREER UN BOLE CREUX\n    return BOL;\n}\n\n\n//La Glace\nfloat Glace(vec3 p)\n{\n  float C=Capsule(p,vec3 (0,0,0),vec3 (0,0,15),0.8);\n  float Cy=Cylindre(p,vec3 (0,0,0),vec3 (0,0,1),8.);\n  float Pied= Blend(C,Cy,8.); // Pied du verre de la glace\n  float Bole=Bol(p);\n  float PiedBole= Blend(Pied,Bole,7.5);\n  float BouleDeGlace=Union(\n    Union(Sphere(p,vec3(-3.5,2.,25.5),4.2),\n    Sphere(p,vec3(3.,0.,23),4.8)),\n    Sphere(p,vec3(-3.,-4.,24),3.75));\n  float Paille=Capsule(p,vec3(3.,0.,23),vec3(8.,0.,35),0.5);\n  float GlacePresqueFinale=Union(BouleDeGlace,PiedBole);\n  float GlaceFinal=Union(Union(Paille,BouleDeGlace),PiedBole);\n  return GlaceFinal;\n}\n\n\n\n// Un Atome\n\nfloat Atome(vec3 p)\n{\n  float T1=Tore(p, vec3 (0.,0.,0.), normalize (vec3 (0,1,-1)),15.,0.3);\n  float T2=Tore(p, vec3 (0.,0.,0.), normalize (vec3 (0,1,1)),15.,0.3);\n  float T3=Tore(p, vec3 (0.,0.,0.), normalize (vec3 (0,0,1)),15.,0.3);\n  float v=Union(\n    Union(Sphere(p,vec3(0.,0.,2.),2.25),Sphere(p,vec3(-2.,0.,-1.),2.25)),\n    Sphere(p,vec3(2.,0.,-1.),2.25));\n  float Electron1=Sphere(p,vec3(13.,5.,5.),1.25);\n  float Electron2=Sphere(p,vec3(-13.,-5.,5.),1.25);\n  float Electron3=Sphere(p,vec3(11.,-10.,0.),1.25);\n  float Electron4=Sphere(p,vec3(-11.,10.,0.),1.25);\n  float T=Union(T1,Union(T2,Union(v,T3)));\n  float atom=Union(T,Union(Electron1,Union(Electron2,Union(Electron3,Electron4))));\n  return atom;\n}\n\nfloat object(vec3 p)\n{\n  \n  /*float v=Union(\n    Union(Sphere(p,vec3(0.,2.,2.),2.25),\n    Sphere(p,vec3(3.,0.,-1.),3.)),\n    Sphere(p,vec3(3.,0.,5.),3.75)\n  );*/\n  \n  /*float v=Sphere(p,vec3(0.,2.,-1),2.25);*/\n  //float Ce=Cercle(p,vec3 (0,0,0),vec3 (0,1,0),10.);\n  float B=Boite(p);\n  //float GLACE=Glace(p);\n  //float ATOME=Atome(p);\n  return B;\n  \n  \n  \n} \n  \n  \n \n\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,200.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,200.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}