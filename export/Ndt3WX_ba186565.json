{"ver":"0.1","info":{"id":"Ndt3WX","date":"1630755036","viewed":186,"name":"Tetrahedron in cube fork1","username":"spalmer","description":"tribute to [url]https://iquilezles.org/articles/normalsSDF/normalsSDF.htm[/url] by FabriceNeyret2 with slight modification to show the embedded tet better","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","tetrahedra","short"],"hasliked":0,"parentid":"7s33Df","parentname":"tetrahedron in cube"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// a minor modification by spalmer to a toy\n// original by https://shadertoy.com/user/FabriceNeyret2\n// https://shadertoy.com/view/7s33Df\n// showing the embedded tetrahedron more clearly in the cube\n\n#define rot(a)       mat2(cos(a+vec4(0,11,33,0)))             // rotation                  \n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9.,s,c,e,l; \n    vec3  R = iResolution,\n          D = normalize(vec3(U+U, -3.5*R.y) - R),             // ray direction\n          p = 7./R, q,a,                                      // marching point along ray \n          M = iMouse.z > 0. ? iMouse.xyz/R -.5: vec3(20,8,0)/1e2*cos(iTime+vec3(0,11,0)); // auto thumbnail\n     \n    for (O=vec4(1); O.x > 0. && t > .01; O-=.01)\n        q = p,\n        q.yz *= rot(.5-6.*M.y),                               // rotations\n        q.xz *= rot(2.-6.*M.x),\n        a = abs(q),\n        c = max(a.x,max(a.y,a.z))-1.,                         // cube\n#define A(x,y,z) vec3(x,y,z)/sqrt(3.)\n#define D(x,y,z) dot(q,A(x,y,z))\n//        t = max(c, 1.3 - max(max(D(1,1,-1),D(1,-1,1)),max(D(-1,1,1),D(-1,-1,-1))) ), // tetrahedron corners\n//        t = min(t, s = length(q)-.4),                         // central sphere\n#define C(s) length(abs(q.s) - 1.)\n        t = min(t, e = max(min(C(xy),min(C(yz),C(xz)))-.01, c)), // cube edges\n#define P(x,y,z) length(q - max(0.,D(x,y,z))*A(x,y,z))\n        t = min(t, l = max(min(min(P(1,1,-1),P(1,-1,1)),min(P(-1,1,1),P(-1,-1,-1))) -.1 , c ) ), // tetra axes\n        t = min(t, -sqrt(1./3.) + max(max(D(1,1,-1),D(1,-1,1)),max(D(-1,1,1),D(-1,-1,-1)))), // my modification\n        p += t*D;                                             // step forward = dist to obj          \n\n    if (t==e) O.rg *=.7;                                      // coloring\n    //if (t==s) O.gb *= 0.; else if (t!=c) O *= .7;\n    if (t==l) O.gb *= 0.;\n}","name":"Image","description":"","type":"image"}]}