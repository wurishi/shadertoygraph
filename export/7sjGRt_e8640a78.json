{"ver":"0.1","info":{"id":"7sjGRt","date":"1617832743","viewed":54,"name":"YICHAOW Noise","username":"wycwyc99a88b","description":"Noise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int RAY_STEPS = 256;\nconst float PI = 3.14159;\nconst float TWO_PI = 2.0 * PI;\n\n#define LIGHT_POS vec3(0.0, 7.45, 0.0)\n\n#define BACK_WALL 0\n#define LEFT_WALL 1\n#define RIGHT_WALL 2\n#define CEILING 3\n#define FLOOR 4\n#define TALL_BOX 5\n#define SPHERE 6\n\n#define BACK_WALL_SDF plane(pos, vec4(0.0, 0.0, -1.0,5.0))\n#define LEFT_WALL_SDF plane(pos, vec4(1.0, 0.0, 0.0, 5.0))\n#define RIGHT_WALL_SDF plane(pos, vec4(-1.0, 0.0, 0.0, 5.0))\n#define CEILING_SDF plane(pos, vec4(0.0, -1.0, 0.0, 7.5))\n#define FLOOR_SDF plane(pos, vec4(0.0, 1.0, 0.0, 2.5))\n#define TALL_BOX_SDF box(rotateY(pos + vec3(2, 0, -3), 27.5 * 3.14159 / 180.0), 0.5 * vec3(3, 6, 3))\n#define SPHERE_SDF sphere(pos, 1.5, vec3(2.0, 0.0, -3.0))\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n    \nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nvec2 sphereToUV(vec3 p) {\n    // compute phi\n    float phi = atan(p.z, p.x);\n    if(phi < 0.0) {\n        phi += TWO_PI;\n    }\n\n    // compute theta\n    float theta = acos(p.y);\n    return vec2(1.0 - phi / TWO_PI, 1.0 - theta / TWO_PI); // scale to UV\n}\n\nvec2 planeToUV(vec3 o, vec3 n, vec3 p) {\n    vec3 uAxis;\n    vec3 vAxis;\n    \n    vec3 worldUp = vec3(0.0, 1.0, 0.0);\n    uAxis = normalize(cross(worldUp, n));\n    vAxis = normalize(cross(n, uAxis));\n    \n    vec3 diff = p - o;\n    float u = dot(diff, uAxis);\n    float v = dot(diff, vAxis);\n    return vec2(u, v);\n}\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p, vec2(127.1, 311.7)),\n                 dot(p, vec2(269.5,183.3))))\n                 * 43758.5453);\n}\n\nfloat WorleyNoise(vec2 uv) {\n    uv *= 1.0; // Now the space is 10x10 instead of 1x1. Change this to any number you want.\n    vec2 uvInt = floor(uv);\n    vec2 uvFract = fract(uv);\n    float minDist = 1.0; // Minimum distance initialized to max.\n    for(int y = -1; y <= 1; ++y) {\n        for(int x = -1; x <= 1; ++x) {\n            vec2 neighbor = vec2(float(x), float(y)); // Direction in which neighbor cell lies\n            vec2 point = random2(uvInt + neighbor); // Get the Voronoi centerpoint for the neighboring cell\n            // Animate the point\n            point = 0.5 + 0.5 * sin(iTime + 6.2831 * point); // 0 to 1 range\n            vec2 diff = neighbor + point - uvFract; // Distance between fragment coord and neighborâ€™s Voronoi point\n            float dist = length(diff);\n            minDist = min(minDist, dist);\n        }\n    }\n    return minDist;\n}\n\nfloat noise2D(vec2 p ) {\n    return fract(sin(dot(p, vec2(127.1, 311.7))) *\n                 43758.5453);\n}\n\nfloat interpNoise2D(float x, float y) {\n    int intX = int(floor(x));\n    float fractX = fract(x);\n    int intY = int(floor(y));\n    float fractY = fract(y);\n\n    float v1 = noise2D(vec2(intX, intY));\n    float v2 = noise2D(vec2(intX + 1, intY));\n    float v3 = noise2D(vec2(intX, intY + 1));\n    float v4 = noise2D(vec2(intX + 1, intY + 1));\n\n    float i1 = mix(v1, v2, fractX);\n    float i2 = mix(v3, v4, fractX);\n    return mix(i1, i2, fractY);\n}\n\n\nfloat fbm(vec2 uv) {\n    float total = 0.0;\n    int octaves = 4;\n    float freq = 2.0;\n    float amp = 0.5;\n\n    for(int i = 1; i <= octaves; i++) {\n        freq *= 2.0;\n        amp *= 0.5;\n        total += interpNoise2D(uv.x * freq,\n                               uv.y * freq) * amp;\n    }\n    return total;\n}\n\nvec3 random3(vec3 p) {\n    return fract(sin(vec3(dot(p,vec3(127.1, 311.7, 191.999)),\n                          dot(p,vec3(269.5, 183.3, 765.54)),\n                          dot(p, vec3(420.69, 631.2,109.21))))\n                 *43758.5453);\n}\n\n\nfloat surflet(vec3 p, vec3 gridPoint) {\n    // Compute the distance between p and the grid point along each axis, and warp it with a\n    // quintic function so we can smooth our cells\n    vec3 t2 = abs(p - gridPoint);\n    float tx = 1.0 - 6.0 * pow(t2.x, 5.0) + 15.f * pow(t2.x, 4.0) - 10.0 * pow(t2.x, 3.0);\n    float ty = 1.0 - 6.0 * pow(t2.y, 5.0) + 15.f * pow(t2.y, 4.0) - 10.0 * pow(t2.y, 3.0);\n    float tz = 1.0 - 6.0 * pow(t2.z, 5.0) + 15.f * pow(t2.z, 4.0) - 10.0 * pow(t2.z, 3.0);\n    vec3 t = vec3(tx, ty, tz);\n    \n    // Get the random vector for the grid point (assume we wrote a function random2\n    // that returns a vec2 in the range [0, 1])\n    vec3 gradient = random3(gridPoint) * 2. - vec3(1., 1., 1.);\n    // Get the vector from the grid point to P\n    vec3 diff = p - gridPoint;\n    // Get the value of our height field by dotting grid->P with our gradient\n    float height = dot(diff, gradient);\n    // Scale our height field (i.e. reduce it) by our polynomial falloff function\n    return height * t.x * t.y * t.z;\n}\n\n\nfloat perlinNoise3D(vec3 p) {\n\tfloat surfletSum = 0.f;\n\t// Iterate over the four integer corners surrounding uv\n\tfor(int dx = 0; dx <= 1; ++dx) {\n\t\tfor(int dy = 0; dy <= 1; ++dy) {\n\t\t\tfor(int dz = 0; dz <= 1; ++dz) {\n\t\t\t\tsurfletSum += surflet(p, floor(p) + vec3(dx, dy, dz));\n\t\t\t}\n\t\t}\n\t}\n\treturn surfletSum;\n}\n\n\n// Box with side lengths b\nfloat box(vec3 p, vec3 b) {\n  return length(max(abs(p) - b, 0.0));\n}\n\nfloat plane( vec3 p, vec4 n ) {\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat sphere(vec3 p, float r, vec3 c) {\n    return distance(p, c) - r;\n}\n\nvec3 colorPalette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.0, 0.1, 0.2);\n\n    return a + b * cos(2.0 * 3.14159 * (t * c + d));\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 light) {\n    float t;\n    float lambert = dot(n, light) + 0.2;\n    switch(hitObj) {\n        case BACK_WALL:\n            return colorPalette(WorleyNoise(planeToUV(vec3(0.0, 0.0, -5.0), n, p)));\n        case CEILING:\n        case FLOOR:\n            return vec3(0.85, 0.81, 0.78) * lambert;\n        case TALL_BOX:\n            vec3 pos = 0.5 + 0.5 * sin(iTime + 6.2831 * p); // 0 to 1 range\n            return colorPalette(perlinNoise3D(pos));\n        case SPHERE:\n            vec2 uv = sphereToUV((p - vec3(2.0, 0.0, -3.0)) / 1.5);  \n            uv = 0.5 + 0.5 * sin(iTime + 6.2831 * uv); // 0 to 1 range\n            return colorPalette(fbm(uv));\n            break;\n        case LEFT_WALL:\n            return vec3(0.63, 0.065, 0.05) * lambert;\n            break;\n        case RIGHT_WALL:\n            return vec3(0.14, 0.45, 0.091) * lambert;\n            break;\n        case -1:\n            return vec3(0.0);\n            break;\n    }\n    return vec3(1.0);\n}\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t = BACK_WALL_SDF;\n    t = min(t, LEFT_WALL_SDF);\n    t = min(t, RIGHT_WALL_SDF);\n    t = min(t, CEILING_SDF);\n    t = min(t, FLOOR_SDF);\n    t = min(t, TALL_BOX_SDF);\n    t = min(t, SPHERE_SDF);\n    return t;\n}\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj, vec3 lightPos) {\n    t = BACK_WALL_SDF;\n    obj = BACK_WALL;\n    \n    float t2;\n    if ((t2 = LEFT_WALL_SDF) < t) {\n        t = t2;\n        obj= LEFT_WALL;\n    }\n    if ((t2 = RIGHT_WALL_SDF) < t) {\n        t = t2;\n        obj= RIGHT_WALL;\n    }\n    if ((t2 = CEILING_SDF) < t) {\n        t = t2;\n        obj= CEILING;\n    }\n    if ((t2 = FLOOR_SDF) < t) {\n        t = t2;\n        obj= FLOOR;\n    }\n    if ((t2 = TALL_BOX_SDF) < t) {\n        t = t2;\n        obj= TALL_BOX;\n    }\n    if ((t2 = SPHERE_SDF) < t) {\n        t = t2;\n        obj= SPHERE;\n    }\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj, vec3 lightPos) {\n    t = 0.001;\n    for (int i=0; i < RAY_STEPS; i++) {\n        vec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, hitObj, lightPos);\n        if (m < 0.01) {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeNormal(vec3 pos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize(vec3(sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                          sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                          sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye, vec3 lightPos) {\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj, lightPos);\n    \n    vec3 point = eye + t * dir;\n    vec3 nor = computeNormal(point);\n    vec3 lightDir = normalize(lightPos - point);\n    vec3 surfaceColor = computeMaterial(hitObj, point, nor, lightDir);\n    return Intersection(t, surfaceColor, point, hitObj);\n}\n\nvoid raycast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref) {\n    eye = vec3(0.0, 5.5, -30);\n    ref = vec3(0.0, 2.5, 0.0);\n    \n    float len = tan(0.3403392 * 0.75) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // [-1, 1]\n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n    \n    vec3 dir, eye, ref;\n    raycast(uv2, dir, eye, ref);\n    \n    // Time varying pixel color\n    Intersection isect = sdf3D(dir, eye, LIGHT_POS);\n    vec3 col = isect.color;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}