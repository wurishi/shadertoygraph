{"ver":"0.1","info":{"id":"wttSDN","date":"1581005555","viewed":284,"name":"Colorful Flexible Vector Field","username":"arifr123","description":"A nice vectorfield + example","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["color","vectorfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//##### Vector Field #####\n\nconst float boxSize = 20.;\nconst float arrowWidth = 0.02;\n\nfloat sq(float x) { return x*x; }\nfloat sqLen(vec2 v) { return dot(v, v); }\n\nfloat clip(float x) { return clamp(x, 0., 1.); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 luv = mod(fragCoord / boxSize, 2.) - 1.;\n    \n    vec2 vec = texelFetch(iChannel0, ivec2(fragCoord), 0).xy;\n    \n    float dist = sq(vec.x * luv.y - vec.y * luv.x) / sqLen(vec);\n    \n    float arrow = clip(1. - dist/arrowWidth);\n    \n    float carrow = arrow * clip(1. - sq(sqLen(luv)));\n    \n    float direction = dot(luv, vec)/length(vec);\n    \n    float direction1 = 1. - 2.*sq(+direction - 0.5);\n    float direction2 = 1. - 2.*sq(-direction - 0.5);\n    \n    fragColor = vec4(clip(direction1*carrow), arrow * clip(1. - 2.*sqLen(luv)), clip(direction2*carrow), 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//##### Example Vector Field #####\n\nfloat sqLen(vec2 v) { return dot(v, v); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.yy;\n    \n    float t = iTime;\n    \n    vec2 p1 = vec2(cos(t)/2. + 0.7, sin(t)/2.5 + 0.5);\n    vec2 p2 = vec2(sin(t)/2. + 1., cos(t)/2.5 + 0.5);\n    \n    vec2 d1 = uv - p1;\n    vec2 d2 = uv - p2;\n    \n    vec2 vec = vec2(d1.x*sqLen(d2) + d2.x*sqLen(d1),\n                    d1.y*sqLen(d2) + d2.y*sqLen(d1));\n    \n    vec = vec.yx * vec2(-1, 1);\n    \n    fragColor = vec4(vec, 0, 1);\n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}