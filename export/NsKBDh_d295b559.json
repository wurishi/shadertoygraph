{"ver":"0.1","info":{"id":"NsKBDh","date":"1668791734","viewed":89,"name":"Triangle Coords / RGB testing","username":"Sent","description":"triangle coords","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["coord"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 vec2ar(vec2 uv, float ar) {return vec2(uv.x*ar, uv.y);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float ar = iResolution.x/iResolution.y;\n    uv.x *= ar;\n        \n    // equil triangle\n    float a = 2./sqrt(3.);\n    float h = 1.;    \n    vec2 cen = uv - vec2ar(vec2(.5, 0.), ar);\n\n    vec2 mAC = cen - vec2(-a/4., h/2.);\n    vec2 mBC = cen - vec2(a/4., h/2.);\n    \n    vec3 xyz;\n    {\n    xyz.x = 2.*uv.y;\n    float m = sqrt(3.);\n    xyz.y = -mBC.y - m * mBC.x;\n    xyz.z = -mAC.y + m * mAC.x;\n    }\n    \n    \n\n    // pixel color\n    vec3 c = vec3(1.);\n    c *= xyz;\n    //c *= step(0., xyz.x + xyz.y + xyz.z - 1.);\n    c *= step(0., xyz.x);\n    c *= step(0., xyz.y);\n    c *= step(0., xyz.z);\n    \n\n    // Output to screen\n    fragColor = vec4(pow(c, vec3(.45)),1.0);\n}","name":"Image","description":"","type":"image"}]}