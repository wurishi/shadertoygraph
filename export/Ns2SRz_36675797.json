{"ver":"0.1","info":{"id":"Ns2SRz","date":"1619702061","viewed":185,"name":"video effect 001","username":"theott","description":"(Work in progress) Experimenting with buffers to create video effect. Basically trying to reproduce https://www.premiercri.com/ using methods in https://www.shadertoy.com/view/3tBGzh","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["videoeffect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 buf = texture(iChannel0, uv);\n\n    // Output to screen\n    fragColor = vec4(vec3(buf.w),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define R iResolution.xy\n#define A(U) texture(iChannel0, U)\n#define B(U) texture(iChannel1, U)\n\nvec4 T(vec2 U){return A(U-A(U).xy);}\n\nvec3 getVid(vec2 uv){\n    vec3 vid = texture(iChannel1, uv).rgb;\n    float start = 0.2;\n    float stp = 1.-start;\n    //col = vec3(.999);\n    vec3 col = 1. * vid * smoothstep(start,start+stp,length(vid.rb));\n    return col;//col = fract(col);\n}\n\nfloat noise1(float a, float b){return 2.*fract(sin(cos(-a*b*a*100000.) * sin(b*b*10000000.) *100000.* iTime))-1.;}\n\nvec2 noise2(vec2 v, vec2 w){return vec2(noise1(v.x, w.y), noise1(v.y, w.x));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = getVid(uv);\n    \n    vec4 last = T(uv);\n    last.w *= 0.99;\n    last.w += 0.03*length(col);\n    \n    vec2 cuv = uv*2.-1.;\n    vec2 cons = last.xy;\n    //last.xy = normalize(cuv)*0.005;// * .00005*(exp(-abs(cuv.x))-exp(-1.)) ;\n    //last.xy -= vec2(0,1)*0.005;\n    //if (length(last.w) > 0.1)\n    last.xy = 0.01*noise2(uv, last.xy);\n    //last.xy /= (smoothstep(0.,.2,last.w)+0.1);\n    last.xy = (3.*cons + last.xy)/4.;\n\n    \n\n    fragColor = last;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"","name":"Common","description":"","type":"common"}]}