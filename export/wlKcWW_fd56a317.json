{"ver":"0.1","info":{"id":"wlKcWW","date":"1611072916","viewed":276,"name":"Naive Conway's Game of Life","username":"Zi7ar21","description":"My attempt at Conway's game of life. Apparently he passed away in 2020, and that made me sad. I guess this is to honor him.","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["conway","gameoflife","gol","naive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Everything is in Buffer A since there is no backbuffer in Shadertoy yet...\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){fragColor.rgb = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Settings\n// Speed, if N is this define then the game will update every N frames\n#define speed 4\n// Mouse interaction pixel radius\n#define mouseradius 8.0\n\n// Find all of the cell's neighbors\nmat3 nearestpoints(ivec2 c){\n    return mat3(texelFetch(iChannel0, ivec2(c)+ivec2(-1, 1), 0).a, texelFetch(iChannel0, ivec2(c)+ivec2(0, 1), 0).a, texelFetch(iChannel0, ivec2(c)+ivec2(1, 1), 0).a,\n                texelFetch(iChannel0, ivec2(c)+ivec2(-1, 0), 0).a, texelFetch(iChannel0, ivec2(c)            , 0).a, texelFetch(iChannel0, ivec2(c)+ivec2(1, 0), 0).a,\n                texelFetch(iChannel0, ivec2(c)+ivec2(-1,-1), 0).a, texelFetch(iChannel0, ivec2(c)+ivec2(0,-1), 0).a, texelFetch(iChannel0, ivec2(c)+ivec2(1,-1), 0).a);}\n\n// Check if the cell will live\nbool gol(mat3 points){\n    vec3 a = points[0];\n    vec3 b = points[1];\n    vec3 c = points[2];\n    int sum = int((a.x+a.y+a.z)+(b.x+b.z)+(c.x+c.y+c.z));\n    return sum == 3 || (sum == 2 && b.y == 1.0);}\n\n// Noise for the noise starting position (optional)\nfloat hash12(vec2 p){\n\tvec3 p3 = fract(vec3(p.xyx)*0.1031);\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.x+p3.y)*p3.z);}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // Slow the game\n    if(iFrame % speed != 0){fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0); return;}\n    \n    // Check whether or not the Cell lives or dies\n    bool particle = false;\n    particle = gol(nearestpoints(ivec2(fragCoord)));\n\n    // Mouse interaction (optional)\n    if(distance(iMouse.xy, fragCoord) < mouseradius && iMouse.z > 0.0){particle = true;}\n\n    // Example starting state, replace the stuff inside the if loop for a different start.\n    if(iFrame == 0){if(hash12(fragCoord) < 1.0/3.0){particle = true;}}\n    \n    // Output the Buffer, we are storing the state in the alpha channel in case we want color or something.\n    fragColor = vec4(vec3(particle), float(particle));}","name":"Buffer A","description":"","type":"buffer"}]}