{"ver":"0.1","info":{"id":"WlScDh","date":"1594248920","viewed":49,"name":"Many balls","username":"p5imoes","description":"There are too many balls!!!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAXDIST 20.0\n#define HITDIST 0.0001\n#define PI 3.14159\n\nfloat distSphere(vec3 pos, vec3 spos, float r) {\n\t  return distance(pos, spos)-r;\n}\n\nvec3 transform(vec3 pos, vec3 x, vec3 y, vec3 z) {\n\treturn x*pos.x + y*pos.y + z*pos.z;   \n}\n\nvec3 rotate(vec3 pos, float x, float y, float z) {\n\t// apply x rotation\n    if(x != 0.0)\n        pos = transform(\n            pos, \n            vec3(1.0, 0.0, 0.0),\n            vec3(0.0, cos(x), -sin(x)),\n            vec3(0.0, sin(x), cos(x))\n        );\n    \n    // apply y rotation\n    if(y != 0.0)\n        pos = transform(\n            pos, \n            vec3(cos(y), 0.0, sin(y)),\n            vec3(0.0, 1.0, 0.0),\n            vec3(-sin(y), 0.0, cos(y))\n        );\n    \n    // apply z rotation \n    if(z != 0.0)\n        pos = transform(\n            pos, \n            vec3(cos(z), -sin(z), 0.0),\n            vec3(sin(z), cos(z), 0.0),\n            vec3(0.0, 0.0, 1.0)\n        );\n    \n    return pos;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 uv;\n    uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x /= iResolution.y/iResolution.x;\n    \n    // camera movement\n    float piTime = iTime*PI/5.0;\n    vec3 pos = vec3(cos(piTime)*2.0 + 2.0, sin(piTime)*2.0, iTime);\n    \n    // camera rotation\n    vec3 dir = normalize(vec3(uv.xy, 1.0));\n    dir = rotate(dir, 0.0, sin(iTime/3.0)*PI, 0.0);\n    \n    // ray marching\n    float dist = 0.0;\n    float steps = 0.0;\n    bool hit = false;\n    \n    while(dist < MAXDIST) {\n        float minDist = distSphere(mod(pos, 2.0), vec3(1.0), 0.5);\n        if(minDist <= HITDIST) {\n            hit = true;\n            break;\n        }\n        dist += minDist;\n        pos += minDist*dir;\n        steps++;\n    }\n    \n    // color\n \tvec3 color = vec3(0.0);\n    if(hit) {\n    \tcolor = vec3((sin(iTime)+1.)/4., (cos(iTime)+1.)/4., (sin(iTime)+1.)/4.);\n        // who needs shadows when you have inverse glow\n    \tcolor -= (steps/50.0 * 2.0 -0.5) * vec3(0.4, 0.6, 1.0);\n    }\n        \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}