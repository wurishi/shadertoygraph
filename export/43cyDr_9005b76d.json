{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"const int N = 48;\n\nvec2 cmul(vec2 a, vec2 b) { return vec2( a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y ); }\nvec2 csqr (vec2 z) { return vec2( z.x * z.x - z.y * z.y, 2.0 * z.x * z.y ); }\nvec2 cexp(vec2 z) { return vec2(cos(z.y), sin(z.y)) * exp(z.x); } \n\nvec2 pearceyIntegrand(vec2 p, float x) {\n    // This is such a cool trick for evaluating an oscillating integral.\n    // See the github repo in the description for more detail!\n    // https://github.com/dpiponi/caustics\n    const float rate = 0.01;\n    float x2 = x * x;\n    vec2 z = vec2(x, rate * (4.0 * x2 * x + 2.0 * p.y * x + p.x));\n    vec2 z2 = csqr(z);\n    vec2 z4 = csqr(z2);\n    vec2 f = z4 + p.y * z2 + p.x * z;\n    vec2 g = cexp(vec2(-f.y, f.x));\n    vec2 dz = vec2(1, rate * (12.0 * x2 + 2.0 * p.y));\n    return cmul(g, dz);\n}\n\nvec2 pearceyIntegral(vec2 p) {\n    const float range = 3.0;\n    const float h = 2.0 * range / float(N);\n    vec2 integral = pearceyIntegrand(p, -range) + pearceyIntegrand(p, range); \n    for (int i = 1; i < N; i++) {\n        float x = -range + float(i) * h;  \n        integral += (i % 2 == 0 ? 2.0 : 4.0) * pearceyIntegrand(p, x);\n    }\n    return (h / 3.0) * integral;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 p = mix(vec2(-40, -17.), vec2(40, 10), uv);\n    p.x -= 0.008 * p.y * p.y + 0.35 * p.y + 1.0; // the Piponi shift\n    fragColor = vec4(1.3 * vec3(1.2, 0.35, 0.55) + 3.5 * vec3(1.0, 0.35, 0.5) * vec3(pow(length(pearceyIntegral(p)), 2.0)), 1);\n    for(int i = 0; i < 16; i++) fragColor.rgb -= 0.18 * (1.0 - 0.05 * float(i)) * (0.8 + 1.0 * dot(uv - 0.5, uv - 0.5)) * (0.5 + 0.8 * snoise(float(i) + 0.03 * p * pow(float(i), 2.0)));\n    fragColor.rgb = clamp(fragColor.rgb, vec3(-0.1), vec3(1.1));\n    vec3 yuv = rgb2yuv(fragColor.rgb);\n    yuv.y = 0.04;\n    fragColor.rgb = yuv2rgb(yuv);\n}","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":"// Source: https://github.com/hughsk/glsl-noise/blob/master/simplex/2d.glsl\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v - i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod289(i);\n  vec3 p = permute( permute(i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m;\n  m = m*m;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * (a0*a0 + h*h);\n  vec3 g;\n  g.x  = a0.x * x0.x + h.x * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvec3 yuv2rgb (vec3 yuv) {\n    return vec3(\n        yuv.x + yuv.z * 1.4,\n        yuv.x + yuv.y * -0.343 + yuv.z * -0.711,\n        yuv.x + yuv.y * 1.765\n    );\n}\n\nvec3 rgb2yuv (vec3 rgb) {\n    return vec3 (\n        rgb.r * 0.299 + rgb.g * 0.587 + rgb.b * 0.114,\n        rgb.r * -0.169 + rgb.g * -0.331 + rgb.b * 0.5,\n        rgb.r * 0.5 + rgb.g * -0.419 + rgb.b * -0.081\n    );\n}","name":"Common","description":"","type":"common"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"43cyDr","date":"1734930442","viewed":266,"name":"Pearcey Integral","username":"rreusser","description":"Just a direct port of Dan Piponi's https://github.com/dpiponi/caustics since I've always been enamored with his profile picture: https://mathstodon.xyz/@dpiponi See also: https://www.shadertoy.com/view/ltlyzj","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["optics"],"hasliked":0,"parentid":"","parentname":""}}