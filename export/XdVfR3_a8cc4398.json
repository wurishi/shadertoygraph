{"ver":"0.1","info":{"id":"XdVfR3","date":"1529810544","viewed":75,"name":"Mandelbrot Plotting Minimal","username":"viclw17","description":"Wip. Practice to better understand Mandelbrot set generation. Going to add more comments.\nBased on --> https://www.shadertoy.com/view/4df3Rn\nResource --> https://en.wikipedia.org/wiki/Mandelbrot_set\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float timeScale = 3.;\nfloat zoomOut = 2.5;\nint iteration = 30;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Calculate & Normalize UV coordianates \n    //vec2 uv = fragCoord/iResolution.xy - .5;\n    // Adjust for aspect ratio\n    //uv.x *= iResolution.x / iResolution.y;\n    /*Shortcut :)*/\n    vec2 uv = ( fragCoord - .5*iResolution.xy ) / iResolution.y;\n    \n   \tvec2 c = uv*zoomOut;\n    // Animation\n    iteration = int(mod(iTime*timeScale,float(iteration)));\n    \n    /*****Main algorithm*****/\n    const float B = 16.;\n    float l = 0.0;\n    vec2  z = vec2(0.0);\n    for( int i=0; i<iteration; i++ )\n    {\n        // z = z*z + c      \n        //z = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n        /*Shortcut :)*/\n        z = mat2(z,-z.y,z.x) * z + c;\n \n        if( dot(z,z)>(B*B) ) break;\n        l += 1.0;\n    }\n        \n    vec3 color = vec3(l/(float(iteration)));\n    \n    // Grid\n    if (uv.x>0. && uv.x<0.002 || uv.y>0. && uv.y<0.002)\n        color=vec3(1.,0,0);  \n\n    fragColor = vec4(color,1.);\n}\n","name":"Image","description":"","type":"image"}]}