{"ver":"0.1","info":{"id":"tl3Szs","date":"1581527844","viewed":135,"name":"procedurally generated terrain","username":"supastav","description":"looks funky","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["procedural","raymarcher","gammacorrected"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 gammaCorrect(vec4 pixel)\n{\n    pixel.rgb = pow(pixel.rgb,vec3(2.2));\n    return pixel;\n}\nbool ground(vec3 p)\n{\n    if(p.y < texture(iChannel2, p.xz/100.).r)\n        return true;\n    return false;\n}\nvec3 march(vec3 s, vec3 d)\n{\n    vec3 p = s;\n    for(int i=0; i < 1000; i++)\n    {\n        p += d/200.;\n        if(ground(p))\n        \treturn vec3(gammaCorrect(texture(iChannel0, p.xz)*clamp(p.y+.3,0.,1.)));\n    }\n    return vec3(gammaCorrect(texture(iChannel1, d)));\n}vec3 render(vec2 uv)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 yo = uv*2.-1.;\n    vec3 dir = vec3(yo,1);\n    vec3 camera = vec3(1,1,iTime);\n    vec3 march = march(camera,dir);\n\n    // Time varying pixel color\n    vec3 col = vec3(march);\n    \n\n    \n    return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 px = 1./ iResolution.xy;\n\tfloat _14 = 1./4.;\n    float _34 = 3./4.;\n    // Time varying pixel color\n    vec3 col = vec3(0);\n    \n    \n    col += render(uv + px*vec2(_14,_14));\n    col += render(uv + px*vec2(_34,_14));\n    col += render(uv + px*vec2(_14,_34));\n    col += render(uv + px*vec2(_34,_34));\n    col /= 4.;\n    // Output to screen\n    fragColor = vec4(pow(col,vec3(1./2.2)),1);\n}","name":"Image","description":"","type":"image"}]}