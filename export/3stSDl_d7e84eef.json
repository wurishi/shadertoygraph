{"ver":"0.1","info":{"id":"3stSDl","date":"1573323168","viewed":99,"name":"Rule 86","username":"copperTones","description":"Was gonna do CGoL, but I was sure that was already done to death. So I did a linear cellular automaton, because some rules have amazing patterns.\n\n[url=http://mathworld.wolfram.com/ElementaryCellularAutomaton.html]Full rules list/more.[/url]","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["nature","automaton","cellularautomaton","natural","linearcellularautomaton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 color, vec2 coord) {\n    vec2 uv = coord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    col.y = 1.-pow(.9, col.y);\n\t\n    color = vec4(col, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define R iResolution.xy\n\n#define CA_rule 86\n#define CA_RANDSEED\n\n#define getBuf(o) texture(iChannel0, (coord+o)/R)  //get self coords+x\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    float k = getBuf(vec2(0, -1)).x;//one above\n    float t = getBuf(vec2(0, -1)).y;//one above\n    if (coord.y == .5) {//bottom row only\n        \n        if (iFrame == 0) {\n            #ifdef CA_RANDSEED  //seed center\n            k = texture(iChannel1, vec2(coord.x, .5)/256.).x;\n            #else  //seed randomly\n            k = coord.x==(R.x/2.+.5)? 1.: 0.;\n            #endif\n            k = k<.5? 1.: 0.;\n        } else {//color based on 3 above & ca rule\n            int n = int(//converts a string of 0./1. to binary\n                getBuf(vec2(-1, -1))*4. +\n                getBuf(vec2( 0, -1))*2. +\n                getBuf(vec2( 1, -1)) );\n            k = float((CA_rule>>n) & 1);//nth element of rule\n            //k = floor(mod(CA_rule / pow(2., float(n)), 2.));//glsl < 3.0\n        }\n        \n        if (k == getBuf(vec2(0, -1)).x) {//same as last turn\n            t++;\n        } else {\n            t = 0.;\n        }\n        \n    }\n    color = vec4(k, t, 0, 1);\n}","name":"Buffer A","description":"","type":"buffer"}]}