{"ver":"0.1","info":{"id":"WljcWd","date":"1595731072","viewed":160,"name":"Volumetrics Second Attempt","username":"izutionix","description":"Based on [url=https://youtu.be/dKA5ZVALOhs]The simplest 3D tutorial by The Art of Code[/url]\nFirst attempt (bad): [url]https://www.shadertoy.com/view/wlscRn[/url]","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["volumetric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 plane(vec3 ro, vec3 rd, vec3 p) {\n\tvec3 plane = cross(p-ro, rd)/length(rd);\n    return plane.yxz*vec3(1,-1,1);\n}\n\n//hash function modified from https://www.shadertoy.com/view/4djSRW\nvec3 hash(vec3 p3)\n{\n    p3 *= 733.424;\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return 2.*fract((p3.xxy + p3.yxx)*p3.zyx)-1.;\n}\n\n//noise by iq\nfloat noise( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\nfloat rnoise(vec3 p)\n{\n    return abs(noise(p))*2.-1.;\n}\n\nfloat fbm(vec3 q)\n{\n    const mat3 m = mat3( 0.00,  0.80,  0.60,\n                        -0.80,  0.36, -0.48,\n                        -0.60, -0.48,  0.64 );\n    float f;\n    f  = 0.5000*rnoise( q ); q = m*q*2.01;\n    f += 0.2500*rnoise( q ); q = m*q*2.02;\n    f += 0.1250*rnoise( q ); q = m*q*2.03;\n    f += 0.0625*rnoise( q ); q = m*q*2.01;\n\tf += 0.0313*rnoise( q ); q = m*q*2.02;\n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 R = iResolution.xy;\n\tvec2 uv = (fragCoord-.5*R.xy)/min(R.x, R.y);\n\n    vec3 ro = vec3(0, 0, -2);\n    vec3 rd = vec3(uv.x, uv.y, 0.)-ro;\n    \n    float time = iTime*1.4;\n    vec3 p;\n    //5p =.5*vec3(sin(time), .5+cos(time), 0.);\n    p = vec3(2.*iMouse.xy/max(R.x, R.y)-1., -time);\n    \n    vec3 col;\n    vec3 pl = plane(ro, rd, p+vec3(0,0,0));\n    //col = texture( iChannel1, plane.xy+.5 ).rgb;\n\t//col = plane;\n    //col = vec3( .5+.5*noise(plane*4.) );\n    \n\n    float start = -1.-p.z;\n    float end = 10.-p.z;\n    \n    int samples = 64;\n    float stepsize = .1;\n    \n    float t = start;\n    float res;\n    \n    for(int i=0; i<samples; i++)\n    {\n        vec3 z = vec3(0, 0, t +texture(iChannel0, uv).z*2.-1.);\n        pl = plane(ro, rd, p + z ) + z;\n        float density = exp( (-.5-.5*( fbm(pl*1.) + 1.5*noise(pl*1.)+.1 ) )*50. );\n\t\tres += density;//*(1.-exp(p.z));\n        //res = mix(res, density, clamp(density, 0., 1.));\n\t\tt += stepsize;\n        //if(t >= end) break;\n    }\n    \n    col = res*vec3(1., .1, .01);\n    \n    //d = pow(.05/(d+0.), 1.);\n    //col = d*vec3(.5, .5, 1);\n    \n    col = col/(col+.167);\n    //col *= col;\n    \n    //col += texture(iChannel0, fragCoord/100.).x-.5; // dither\n\n    fragColor = vec4(col , 1);\n}","name":"Image","description":"","type":"image"}]}