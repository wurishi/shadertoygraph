{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define FRAME\n#define STARS\n#define NOISE_HORIZON\n\nvec3 SUN = normalize(vec3(-0.8, -1.0, 0.0));\nvec3 MOON = normalize(vec3(-0.4, 0.4, 0.3));\n\n\nfloat snoise(vec3 v);\n\nfloat clouds(vec3 p) {\n\tvec3 q = p + vec3(-0.1, sin(p.y)*0.25, 1.0)*(10.0+iTime);\n\tfloat v = 0.0;\n\tv += 0.550 * snoise(q*0.051);\n\tv += 0.250 * snoise(q*0.111);\n\tv += 0.125 * snoise(q*0.211);\n\treturn v;\n}\n\nmat3 look(vec2 a) {\n\tfloat sa = sin(a.y);\n\tfloat ca = cos(a.y);\n\tfloat sb = sin(a.x);\n\tfloat cb = cos(a.x);\n\t\n\tmat3 Y = mat3(cb, 0.0, -sb, 0.0, 1.0, 0.0, sb, 0.0, cb);\n\tmat3 X = mat3(1.0, 0.0, 0.0, ca, sa, 0.0, -sa, 0.0, ca);\n\t\n\treturn Y*X;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv.y *= iResolution.y / iResolution.x;\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n\tvec2 pos = -1.0 + 2.0 * uv;\n\t\t\n\tmat3 rot = look(mouse / iResolution.xy);\n\t\n\t// camera setup\n\tvec3 camTarget = vec3(-3.5, 4.0, 0.0);\n\t\n\tvec3 camPos = vec3(0.0, 1.0, -1.0);\t\n\tvec3 up = vec3(0, 1, 0);\n\t\n\tvec3 camDir = normalize((camTarget - camPos));\n\tvec3 camLeft = normalize(cross(up, camDir));\n\tvec3 camUp = cross(camDir, camLeft);\n\t\n\tvec3 rayPos = camPos + normalize(camDir + pos.x * camLeft + pos.y * camUp);\n\tvec3 rayDir = normalize(rayPos - camPos);\n\t\n\tfloat t = (20.0 - rayPos.y) / rayDir.y;\t\t\n\tvec3 col = vec3(0.0, 0.0, 0.0);\t\n\t\n\tif (t >= 0.0 || t < -350.0) {\t\t\t\t\n\t\t// clouds\n\t\tfloat cloudA = (smoothstep(0.0, 1.0, 50.0/t)) * 0.25;\t\t\n\t\tfloat cloud = smoothstep(0.0, 0.8, 0.2+clouds(t * rayDir));\t\t\n\n\t\tcol += vec3(cloudA * cloud);\t\t\t\t\n\t\tfloat ms = snoise(rayDir*20.0);\n\t\tvec3 mCol = vec3(0.3, 0.3, 0.3) - 0.1*ms*ms*ms;\n\t\t\n\t\t// sun\n\t\tfloat sunA = clamp(dot(SUN, rayDir), 0.0, 1.0);\n\t\tcol += vec3(0.0, 0.0, 0.1) * (1.0 - cloudA);\t\t\t\t\n\t\tcol += vec3(0.3, 0.4, 0.5) * sunA;\n\t\tcol += vec3(0.6, 0.1, 0.0) * smoothstep(0.5, 1.0, sunA);\n\n\t\t// moon\n\t\tfloat cloudShade = 1.0 - smoothstep(0.2, 0.9 , cloud);\n\t\tfloat moonDot = dot(MOON, rayDir);\n\t\tfloat moonA = smoothstep(0.9985, 0.999, moonDot);\t\t\n\t\tcol += (moonA*cloudShade)*mCol;\n\t\tcol += vec3(0.15) * smoothstep(0.91, 0.9985, moonDot);\n\t\t\n\t\t#ifdef STARS\n\t\tfloat star = cloudShade*smoothstep(0.925, 0.955, snoise(floor(rayDir*202.0)));\n\t\tcol += clamp(star - sunA, 0.0, 1.0) * vec3(0.4);\n\t\t#endif\n\n\t\t#ifdef FRAME\t\t\n\t\tcol *= pow(16.0 * uv.x * (1.0-uv.x) * uv.y * (1.0-uv.y), 0.2);\t\t\n\t\t#endif\n\t}\t\t\n\tif (t < -350.0) {\n\t\t#ifdef NOISE_HORIZON\n\t\tvec3 q = vec3(rayDir.xz, 1.0);\n\t\tt += (snoise(q*12.0)+0.5)*60.0;\n\t\t#endif\n\t\tcol *= smoothstep(-350.0, -425.0, t);\t\n\t}\n\t\n\tfragColor = vec4(col, 1.0);\t\n}\n\n\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdBGRh","date":"1383993866","viewed":1717,"name":"Nightsky","username":"bysse","description":"Nightsky using simplex noise.","likes":26,"published":1,"flags":0,"usePreview":0,"tags":["sky"],"hasliked":0,"parentid":"","parentname":""}}