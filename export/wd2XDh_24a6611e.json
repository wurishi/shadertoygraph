{"ver":"0.1","info":{"id":"wd2XDh","date":"1553673298","viewed":122,"name":"Double Gyre FTLE","username":"lhofmann","description":"FTLE of Shadden's double gyre model\n\n[mouse click] to set advection time (x coordinate)\n[space] to toggle forward/backward integration\n","likes":4,"published":1,"flags":16,"usePreview":0,"tags":["flow","lyapunov","scivis","lcs","ftle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float A = 0.1;\nconst float PI = 3.14159265359;\nconst float EPS = 0.25;\nconst float OMEGA = 2.0*PI/10.0;\n\nfloat a(float t) {  \n    return EPS * sin(OMEGA * t);\n}\n\nfloat b(float t) {\n    return 1. - 2. * EPS * sin(OMEGA * t);\n}\n\nfloat f(float x, float t) {\n    return a(t) * x * x + b(t) * x;\n}\n\nfloat dfdx(float x, float t) {\n    return 2. * a(t) * x + b(t);\n}\n\nvec2 v(vec2 pos, float t) {\n    return vec2(\n        -PI * A * sin(PI * f(pos.x,t)) * cos(PI * pos.y),\n         PI * A * cos(PI * f(pos.x,t)) * sin(PI * pos.y) * dfdx(pos.x,t));\n}\n\nvec2 RK4(vec2 p, float t, float h) {\n    vec2 k1 = v( p         , t        ),\n         k2 = v( p +.5*h*k1, t + .5*h ),\n         k3 = v( p +.5*h*k2, t + .5*h ),\n         k4 = v( p +   h*k3, t +    h );\n    return h/3.* ( .5*k1 + k2 + k3 + .5*k4 );\n}\n\nvec2 flowmap(vec2 p, float t, float dt, int n) {\n    for(int i = 0; i < n; i++){\n        p += RK4(p, t, dt);\n        t += dt;\n    }\n    return p;\n}\n\nbool keyToggle(int ascii) {\n\treturn (texture(iChannel2,vec2((.5+float(ascii))/256.,0.75)).x > 0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= 2.;\n    \n    vec2 spacing = vec2(2., 1.) / iResolution.xy / 2.;\n    \n    float t0 = iTime;\n    float dt = 0.1;    \n    if (keyToggle(32)) {\n        dt *= -1.;\n    }\n    int steps = 1 + int(iMouse.x / iResolution.x * 300.);\n    float T = abs(dt) * float(steps);\n    \n    vec2 top = flowmap(uv + vec2(0., spacing.y), t0, dt, steps);\n    vec2 bottom = flowmap(uv - vec2(0., spacing.y), t0, dt, steps);\n    vec2 right = flowmap(uv + vec2(spacing.x, 0.), t0, dt, steps);\n    vec2 left = flowmap(uv - vec2(spacing.x, 0.), t0, dt, steps);\n    \n    mat2 J = mat2(\n        (right - left) / (2. * spacing.x), \n        (top - bottom) / (2. * spacing.y));\n    \n    mat2 D = transpose(J)*J;\n    float a = 1., \n          b = -D[0][0] - D[1][1], \n          c = determinant(D),\n          d = sqrt(b * b - 4. * a * c),\n          l = (-b + d) / 2.;\n    \n    float ftle = log(l) / T;\n    fragColor = vec4(0., 0., 0., 1.);\n    fragColor.rb = vec2(ftle);\n}\n","name":"Image","description":"","type":"image"}]}