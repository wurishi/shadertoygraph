{"ver":"0.1","info":{"id":"NdKyWG","date":"1655579714","viewed":221,"name":"Acoustic wave equation I","username":"gleboneloner","description":"Wave equation solver, which uses finite difference method.\nKey [x] - display potential energy.\nKey [y] - display kinetic energy.","likes":24,"published":1,"flags":48,"usePreview":0,"tags":["wave","pde","acoustic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 color, in vec2 coords ) {\n\n    vec4 H = texelFetch( iChannel0, ivec2( coords ), 0 );\n    \n    #define KEY(N) texelFetch( iChannel1, ivec2( N, 0 ), 0 ).x\n    \n    if ( KEY(88) > 0.5 ) {\n    \n        color.xyz = map( tanh( 5.0*H.z*H.z - 1.0 ) );\n        \n    } else if ( KEY(89) > 0.5 ) {\n    \n        color.xyz = map( tanh( 5.0*(H.y-H.x)*(H.y-H.x) - 1.0 ) );\n        \n    } else {\n    \n        color.xyz = map(tanh(H.y));\n        \n    }\n    \n    float s = bound( coords, iResolution.xy );\n    \n    color.xyz = mix( vec3(0), color.xyz, clamp( s/fwidth(s)+0.5, 0.0, 1.0 ) );\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 map ( float x ) {\n    \n    const vec3 K1 = vec3( +0.337, -0.018, -0.135 );\n    const vec3 K2 = vec3( +0.455, +0.398, +0.135 );\n    const vec3 K3 = vec3( +0.204, +0.596, +0.490 );\n    \n    return x*(K1*x+K2)+K3;\n    \n}\n\nfloat source ( vec2 uv, vec2 size, vec4 mouse, float time ) {\n\n    // external force sources\n\n    float R1 = 0.0;\n    \n    vec2 Q1 = uv - mouse.xy;\n    if ( mouse.w > 0.01 ) R1 += 10.0/exp(dot(Q1,Q1)/10.0);\n\n    if ( distance( uv, vec2( 200, size.y/2.0 ) ) < 1.0 ) R1 += sin(time*20.0)*10.0;\n    \n    return R1;\n\n}\n\nfloat bound ( vec2 uv, vec2 size ) {\n    \n    // boundary condition\n    // [+] -> free space\n    // [-] -> barrier\n    \n    // simple ellipse\n    \n    vec2 s = (uv-size/2.0)/(size/2.0-20.0);\n    return 1.0-dot(s,s);\n    \n    // more complex shape\n    \n    // if ( uv.x < 1.0 ) return -1.0;\n    // if ( uv.y < 1.0 ) return -1.0;\n    // if ( uv.x > size.x - 1.0 ) return -1.0;\n    // if ( uv.y > size.y - 1.0 ) return -1.0;\n    // return cos(uv.x/25.0)*cos(uv.y/25.0)+0.2;\n\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 color, in vec2 coords ) {\n\n    float IX = coords.x, IY = coords.y;\n    \n    #define TEX(u,v) texelFetch( iChannel0, ivec2(u,v), 0 )\n        \n    float H1 = TEX( IX, IY ).x;\n    float H2 = TEX( IX, IY ).y;\n\n    float M1 = 0.0, M2 = 0.0;\n    \n    M1 += TEX( IX - 1.0, IY - 1.0 ).y;\n    M1 += TEX( IX - 1.0, IY + 1.0 ).y;\n    M1 += TEX( IX + 1.0, IY - 1.0 ).y;\n    M1 += TEX( IX + 1.0, IY + 1.0 ).y;\n\n    M2 += TEX( IX - 1.0, IY ).y;\n    M2 += TEX( IX + 1.0, IY ).y;\n    M2 += TEX( IX, IY - 1.0 ).y;\n    M2 += TEX( IX, IY + 1.0 ).y;\n    \n    ///////////////////////\n    \n    float D1 = (M1+3.0*M2-16.0*H2)/3.0;\n    \n    D1 += source( coords, iResolution.xy, iMouse, float(iFrame)/60.0 );\n    \n    const float dt = 0.4;\n    \n    color.xyz = vec3( H2, 2.0*H2-H1+D1*dt*dt, D1 );\n    \n    ///////////////////////\n    \n    color.xy *= step( 0.0, bound( coords, iResolution.xy ) );\n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    //float a = texelFetch( iChannel0, ivec2( IX - 2.0, IY ), 0 ).y;\n    //float b = texelFetch( iChannel0, ivec2( IX - 1.0, IY ), 0 ).y;\n    //float c = texelFetch( iChannel0, ivec2( IX + 1.0, IY ), 0 ).y;\n    //float d = texelFetch( iChannel0, ivec2( IX + 2.0, IY ), 0 ).y;\n    //float K1 = -0.08333333*(d-16.0*c-16.0*b+a+30.0*H2);\n    \n    //float u = texelFetch( iChannel0, ivec2( IX, IY - 1.0 ), 0 ).y;\n    //float v = texelFetch( iChannel0, ivec2( IX, IY + 1.0 ), 0 ).y;\n    //float K2 = v+u-2.0*H2;\n    \n    //float c1 = texelFetch( iChannel0, ivec2( IX, IY - 2.0 ), 0 ).y;\n    //float c2 = texelFetch( iChannel0, ivec2( IX, IY - 1.0 ), 0 ).y;\n    //float c3 = texelFetch( iChannel0, ivec2( IX, IY + 1.0 ), 0 ).y;\n    //float c4 = texelFetch( iChannel0, ivec2( IX, IY + 2.0 ), 0 ).y;\n    //float K2 = -0.083333333*(c4-16.0*c3-16.0*c2+c1+30.0*H2);","name":"Buffer A","description":"","type":"buffer"}]}