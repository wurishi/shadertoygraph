{"ver":"0.1","info":{"id":"3ddGRn","date":"1567628239","viewed":184,"name":"The Eye Of The Galaxy","username":"96logda","description":"This shader was made by experimenting with my tunnel shader.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fbm","distortion","eye","colorshifting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Copyright (c) 2019-09-04 by Angelo Logahd\n//Portfolio: https://angelologahd.wixsite.com/portfolio\n\n#define PI 3.1415927\n\nconst float MOVING_SPEED = 0.1;\n\n#define TYPE_1\t0\n#define TYPE_2\t1\n#define TYPE_3  2\n\n#define TYPE_TO_USE TYPE_1\n\nfloat sdSphere(vec2 p, float radius)\n{\n     return length(p) - radius;\n}\n\nfloat hash(vec2 p)\n{\t\n    return fract(sin(dot(p, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nfloat noise (in vec2 p) \n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 sf = f * f * (3.0 - 2.0 * f);\n    \n    float a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n    \n    return mix(mix(a, b, sf.x), mix(c, d, sf.x), sf.y);\n}\n\nfloat fbm (in vec2 p)\n{\n    float f = 0.0;\n    f += 0.5000 * noise(p); p = p * 2.02;\n    f += 0.2500 * noise(p); p = p * 2.03;\n    f += 0.1250 * noise(p); p = p * 2.01;\n    f += 0.0625 * noise(p);\n    return f / 0.9375;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = 2.0 * (fragCoord.xy / iResolution.xy) - 1.0;\n    p.x *= iResolution.x / iResolution.y;\n    \n    float deform = sdSphere(p, 1.05);\n    float r = min(1.0, deform);\n    \n    float a = abs(atan(p.y, p.x));\n    vec2 uv = vec2(0.6 / r + iTime * MOVING_SPEED, a / PI);\n\n    #if   TYPE_TO_USE == TYPE_1\n    vec3 texCol = texture(iChannel0, uv).rgb;\n    #elif TYPE_TO_USE == TYPE_2\n    vec3 texCol = texture(iChannel0, uv * 5.5).rgb;\n    #else\n    vec3 texCol = texture(iChannel1, uv).rgb;\n    #endif\n    vec3 col = fbm(uv) * 0.12 / texCol;\n    \n    vec3 centerCol = mix(vec3(abs(sin(iTime * 0.1)) + 0.2, cos(iTime * 0.1), sin(iTime * 0.1)), texCol, r);\n    col *= centerCol; \n    //col += texCol;\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}