{"ver":"0.1","info":{"id":"4sXyzX","date":"1489024488","viewed":98,"name":"Jellyfish Creature_PS20","username":"Gracefrnandz","description":"3 - 9 - 17","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["jellyfish"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 white = vec3(1., 1., 1. );\n\nfloat circle(vec2 uv, vec2 center, float radius)\n{\n    float bilog = step(distance(center,uv), radius);\n    return bilog;\n}\n\nmat2 rotate2d(float angle)\n{\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nfloat rectangle(vec2 uv, vec2 position, vec2 size, float angle)\n{\n    float leftSide = position.x;\n    float rightSide = position.x + size.x;\n    float bottom = position.y;\n    float top = position.y + size.y;\n    uv *= rotate2d(angle);\n    \n    float rect = step(leftSide, uv.x) - step(rightSide, uv.x); \n    float rect2 = step(bottom, uv.y) - step(top, uv.y);\n    \n    return (rect * rect2);\n}\n\n\nmat2 scale2d(float value)\n{\n    return mat2(value, 0, 0,value);\n}\n\nfloat rand(vec2 uv)\n{\n    return (fract(sin(dot(uv, vec2(12., 70.)))*43758.5453123));\n}\n\nfloat noise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) + \n            (c - a)* u.y * (1.0 - u.x) + \n            (d - b) * u.x * u.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv += ((sin(iTime) + 0.1)/5.0);\n    \n    float n = noise(uv  * 15. + iTime) * .05;\n    float n2 = noise(uv * 10. + iTime) * .05;\n    \n    vec2 position2 = vec2(0.5 , 0.7);\n    float circle1 = circle(uv, position2, .15 + n);\n    \n    vec2 position = vec2(0.2, 0.4);\n    vec2 size = vec2(0.02, 0.4);\n    float rectangle1 = rectangle(uv + n2, position, size, .270);\n    \n    vec2 position3 = vec2(0.42, 0.25);\n    vec2 size3 = vec2(0.02, 0.4);\n    float rectangle2 = rectangle(uv + n2, position3, size3, .0);\n    \n    vec2 position4 = vec2(0.5, 0.25);\n    vec2 size4 = vec2(0.02, 0.4);\n    float rectangle3 = rectangle(uv + n2, position4, size4, .0);\n    \n    vec2 position5 = vec2(0.59, 0.25);\n    vec2 size5 = vec2(0.02, 0.4);\n    float rectangle4 = rectangle(uv + n2, position5, size5, .0);\n    \n    vec2 position6 = vec2(0.78, 0.1);\n    vec2 size6 = vec2(0.02, 0.4);\n    float rectangle5 = rectangle(uv + n2, position6, size6, -.270);\n    \n    fragColor = vec4(vec3(circle1 + rectangle1 + rectangle2 + rectangle3 + rectangle4 + rectangle5) * white, 1.0);\n}","name":"Image","description":"","type":"image"}]}