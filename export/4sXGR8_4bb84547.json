{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"//rotate\nvec3 _rot(vec3 d, float rot) {\n\tmat3 M = mat3(\n\t  cos(rot),  sin(rot), 0,\n\t  sin(rot), -cos(rot), 0,\n\t  0,       0,      1);\n\td = (M * d).zxy;\n\treturn (M * d).xzy;\n}\n\n//torus\nfloat torus(vec3 p) {\n\tfloat  R    = 0.7;\n\tfloat  rr   = 0.05;\n\tvec3   d    = abs(mod(p, 4.0)) - 2.0;\n\td           = _rot(d.yxz, 2.2*iTime + p.z);\n\tfloat    g  = length(d.xy) - R * R;\n\tg = (g * g) + (d.z * d.z);\n\treturn sqrt(g) - rr;\n}\n\n//rm map\nfloat map(vec3 p) {\n\tfloat ktt   = iTime;\n\tfloat time  = ktt * 3.3 + sin(0.3 * ktt + sin(ktt * 0.5) + p.z * 0.43);\n\tint   ctime = int(iChannelTime[0]);\n\tvec3  tp    = p;\n\tvec3  up    = p;\n\t\n\tif(ctime >= 4*2) {\n\t\tp.x        += sin(p.z  * 0.5 + time);\n\t\tp.y        += cos(p.z  * 0.4 + time);\n\t\tp.z        -= sin(p.x  * 0.7 + time);\n\t}\n\tif(ctime >= 48) {\n\t\tup         += 0.7;\n\t\tup.x       += sin(up.z * 0.20) * 1.5;\n\t\tup.x       += cos(up.z * 4.00) * 0.2;\n\t\tup.y       -= cos(up.z * 0.15) * 1.0;\n\t\tup.y       += cos(up.z * 5.00) * 0.3;\n\t}\n\t\n\t//prim\n\tfloat c0   = length(     abs(mod(p,        8.0) ) - 4.0) - 3.8;\n\tfloat c1   = length(     abs(mod(p.xy,     1.0) ) - 0.5) - 0.5;\n\tfloat c2   = length(     abs(mod(p.xy+0.3,10.0) ) - 5.0) - 5.2;\n\tfloat c3   = length(     abs(mod(p.xy,     5.0) ) - 2.5) - 2.5*0.2;\n\tfloat c4   = length(     abs(mod(up.xy,    4.0) ) - 2.0) - 0.1;\n\tfloat k    = 2.7 - dot(abs(p), vec3(0.0, 1.0, 0.0));\n\t//k = max(-c0, k);\n\tif(ctime >= 12 )\tk = max(-c1, k);\n\tif(ctime >= 16)\tk = max(-c2, k);\n\tif(ctime >= 4*5)\tk = max(-c3, k);\n\tif(ctime >= 4*0)\tk = max(-c1, k);\n\tif(ctime >= 4*8)\tk = min( c4, k);\n\tif(ctime >= 24 )\tk = min(torus(tp + 0.3), k);\n\treturn k;\n}\n\n//get normal\nvec3 rnorm(vec3 ip) {\n  float iit    = map(ip);\n  vec3  h      = vec3(0.01, 0, 0);\n  return normalize(vec3(\n    iit - map(ip + h.xyy),\n    iit - map(ip + h.yxy),\n    iit - map(ip + h.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t//float time   = float(int(iChannelTime[0]));\n\tfloat time   = iChannelTime[0];\n\t\n\t//direction\n\tvec2  uv     = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n\tvec3  dir    = normalize(vec3(uv * vec2(1.0, 0.75), 1.0)).yzx;\n\t\n\t//rotate\n\tdir          = _rot(dir.xyz, time * 0.1);\n\tdir          = _rot(dir.yzx, time * 0.03);\n\t\n\t//position\n\tvec3  pos    = vec3(time * 2.0, 0.0, time * 2.0);\n\tvec3  I      = pos;\n\tfloat t      = 0.0;\n\t\n\t//ray marching\n\tfor(int i = 0 ; i < 64; i++) {\n\t\tI  = pos + dir * t;\n\t\tfloat h = map(I) * 0.75;\n\t\t\n\t\t//uchikiri\n\t\tif(h < 0.001) break;\n\t\tt += h;\n\t}\n\t\n\t//diff\n\tvec3  N      = rnorm(pos + dir * t);\n\tfloat D      = max(dot(pow(N, vec3(8.0)),\n\t\t\t\t\t\t   normalize(vec3(-0.5,  0.7, 1.0))), sin(iTime/16.0)*0.5);\n\t\n\t//fog-ppoino.\n\tfloat fog    = length(I - pos) * 0.03;\n\t\n\t//screen-ppoino.\n\tfloat Scr    = 1.0 - dot(uv, uv) * 0.5;\n\tfragColor = vec4(\n\t\t0.2 * dir +\n\t\t0.7 * D   * mix(vec3(1, 2, 3), vec3(4, 2, 1), D) +\n\t\tfog, 1.0) * Scr;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sXGR8","date":"1361999895","viewed":1070,"name":"string","username":"gyabo","description":"tanoshi-!","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""}}