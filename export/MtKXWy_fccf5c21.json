{"ver":"0.1","info":{"id":"MtKXWy","date":"1485826188","viewed":91,"name":"The Big Revealv","username":"Gart","description":"Reveals a sharpened layer underneath the mouse. Variables at the top can be altered to change which kernels are used for the layers and how big the circle is.\nMade for a class.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Includes some code from Nikos Papadopoulos, 4rknova / 2015 and Dr. Sajid Farooq, 2016\n// Some modification by Garret Moran\n// Also everything else created by Garret Moran\n\n\n\n\n//----------MODIFY THESE HOWEVER YOU DESIRE\nfloat radius = 0.1;\nint kernelSelectA = 0; //0-4: Blur,Sharpen,HardEdge,Guassian,Incongruent\nint kernelSelectB = 1;\nfloat blurriness = 0.111;//larger=less blur\n//---------------------\n\n\n\n\n\nmat3 kernelA;\nmat3 kernelB;\nvec3 bgColor = vec3(1.0,1.0,1.0);//Unused since the other textures cover it completely\nvec4 tempColor = vec4(0.0,0.0,0.0,0.0);\n\n\n//The blur matrix. Since there are 9 pixels, each weight is 1/9 = 0.111 by default to ensure that each pixel is averaged properly\nfloat invBlur = (1.0-blurriness)/8.0;\nmat3 blur = mat3(\n invBlur, invBlur, invBlur, // first column (not row!)\n invBlur, blurriness, invBlur, // second column\n invBlur, invBlur, invBlur // third column\n);\n\nmat3 sharpen = mat3(\n 0., -1, 0.0, // first column (not row!)\n -1, 5, -1, // second column\n 0., -1, 0.0 // third column\n);\n\n\n//Bonus Kernels----------\n\n//Hard Edges\nmat3 edgy = mat3(\n -1, -1, -1, // first column (not row!)\n -1, 8, -1, // second column\n -1, -1, -1 // third column\n);\n\n//Gaussian Blur\nmat3 gaussian = mat3(\n 0.0625, 0.125, 0.0625, // first column (not row!)\n 0.125, 0.25, 0.125, // second column\n 0.0625, 0.125, 0.0625 // third column\n);\n\n//Entirely custom, made from messing around with values\nmat3 incongruent = mat3(\n 1, -1, -8, // first column (not row!)\n -1, 1, 1, // second column\n 8, 1, -1 // third column\n);\n\n\n\n\n\n\n//I added an int to select channel rather than redo the whole thing manually. -G\nvec3 sample(const int x, const int y, in vec2 fragCoord, int channel)\n{\n \tvec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n\tuv = (uv + vec2(x, y)) / iChannelResolution[0].xy ;\n    if(channel == 0) {return texture(iChannel0, uv).xyz;}\n    else {return texture(iChannel1, uv).xyz;}\n    //Add channel 2/3 when I inevitably reuse this eventually\n}\nvec3 filter(in vec2 fragCoord, mat3 kernel, int channel)\n{\n vec3 sum = sample(-1, -1, fragCoord, channel) * kernel[0][0]\n \t\t  + sample(-1,  0, fragCoord, channel) * kernel[0][1]\n \t\t  + sample(-1,  1, fragCoord, channel) * kernel[0][2]\n \t\t  + sample( 0, -1, fragCoord, channel) * kernel[1][0]\n \t\t  + sample( 0,  0, fragCoord, channel) * kernel[1][1]\n \t\t  + sample( 0,  1, fragCoord, channel) * kernel[1][2]\n \t\t  + sample( 1, -1, fragCoord, channel) * kernel[2][0]\n \t\t  + sample( 1,  0, fragCoord, channel) * kernel[2][1]\n \t\t  + sample( 1,  1, fragCoord, channel) * kernel[2][2];\n \n return sum;\n}\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y *= (iResolution.y / iResolution.x);//fix aspect ratio\n    vec2 mousePos = iMouse.xy/ iResolution.xy;\n    mousePos.y *= (iResolution.y / iResolution.x);\n    \n\tvec2 fc = fragCoord.xy;\n    \n    tempColor = vec4(bgColor, 1.0);\n    \n    vec4 layer0 = vec4(1.0,1.1,1.0,0.0);\n    vec4 layer1 = vec4(1.0,1.1,1.0,0.0);\n    \n    \n    //No switches in hlsl\n    if(kernelSelectA == 0)\n        kernelA = blur;\n    else if(kernelSelectA == 1)\n        kernelA = sharpen;\n    else if(kernelSelectA == 2)\n        kernelA = edgy;\n    else if(kernelSelectA == 3)\n        kernelA = gaussian;\n    else\n        kernelA = incongruent;\n    \n    if(kernelSelectB == 0)\n        kernelB = blur;\n    else if(kernelSelectB == 1)\n        kernelB = sharpen;\n    else if(kernelSelectB == 2)\n        kernelB = edgy;\n    else if(kernelSelectB == 3)\n        kernelB = gaussian;\n    else\n        kernelB = incongruent;\n    \n    \n    layer0 = vec4(filter(fc, kernelA, 1), 1.0);\n    \n    //Circle\n\tif( length(uv - mousePos) < radius)\n    {\n    \tlayer1 = vec4( filter(fc, kernelB, 0), 1.0 );\n    }\n\t\n    \n    vec4 composite = mix(layer0, layer1, layer1.a);\n    tempColor = composite;\n    fragColor = tempColor;\n    \n    fragColor = tempColor;\n    \n}","name":"Image","description":"","type":"image"}]}