{"ver":"0.1","info":{"id":"MfsGWn","date":"1702967911","viewed":28,"name":"Dust, the animation","username":"Kerdek","description":"This will deterministically render a cinematic, and you should use the code in the `Image` tab to automate the process of downloading the rendered frames.\n\nIt includes a mod that make shadertoy run better, too.\n\nRender at 4k if you are real champ.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["animation","dust"],"hasliked":0,"parentid":"dl3fWB","parentname":"Noon Dust"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(\n  out vec4 c,\n  in vec2 xy) {\n  c = texelFetch(iChannel0, ivec2(xy), 0);\n  c.rgb /= c.a;\n  c.rgb *= 10.0;\n  c.rgb = max(vec3(0.0), c.rgb);\n  c.rgb = min(vec3(1.0), c.rgb);\n  c.rgb = srgb_gamma(c.rgb); }\n\n/*\n use this code in the console to install the mod\n hit the record button to begin the job\n*/\n\n/*\nShaderToy.prototype.StopRecording = function() {\n  player.parentElement.removeChild(this.recording_area);\n  this.mEffect.Paint = Effect.prototype.Paint;\n  delete this.mEffect.OldPaint;\n  if (!this.mIsPaused) {\n    this.pauseTime(false); } }\n\nShaderToy.prototype.Record = function(work_order) {\n  const stop = () => {\n    this.StopRecording(); }\n  const update_progress = (\n    subsequence_percentage,\n    sequence_percentage) => {\n    this.subsequence_progress.value = subsequence_percentage;\n    this.sequence_progress.value = sequence_percentage; }\n  this.mEffect.OldPaint = Effect.prototype.Paint;\n  this.mEffect.Paint = function(...x) {\n    const setup = (w, h, sequence, ...x) => {\n      this.mXres = this.mCanvas.width = w;\n      this.mYres = this.mCanvas.height = h;\n      this.mFrame = sequence;\n      for (let i = 0; i < this.mPasses.length; i++) {\n        this.mPasses[i].mFrame = sequence; }\n      this.OldPaint(...x);\n      return name => this.mCanvas.toBlob(blob => {\n        const\n          url = URL.createObjectURL(blob),\n          link = document.createElement('a');\n        document.body.appendChild(link);\n        link.download = `${name}.png`;\n        link.href = url;\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url); }) };\n    const progress =\n      work_order(setup, ...x);\n    const [,sequence_percentage] = progress;\n    if (sequence_percentage >= 1.0) {\n      stop(); }\n    else {\n      update_progress(...progress) } }\n  this.player.insertAdjacentElement('afterend', this.recording_area);\n  if (this.mIsPaused) {\n    this.pauseTime(false); } }\n\nShaderToy.prototype.InitRecordingMod = function() {\n\nthis.player = document.querySelector('#player');\nthis.stop_button = document.createElement('a');\nthis.sequence_progress = document.createElement('progress');\nthis.subsequence_progress = document.createElement('progress');\nthis.recording_area = document.createElement('div');\n\nthis.recording_area.appendChild(this.subsequence_progress);\nthis.recording_area.appendChild(this.sequence_progress);\nthis.recording_area.appendChild(this.stop_button);\nthis.stop_button.href = '#';\nthis.stop_button.innerHTML = 'stop recording';\nthis.stop_button.onclick = () => this.StopRecording();\n\n};\n\nShaderToy.prototype.SetXYStrips = function(strip_height, frame_height) {\n  this.mVBO_Tri = [];\n  this.mXYStrips = Math.ceil(frame_height / strip_height);\n  row_height = 2.0 / frame_height;\n  strip_height *= row_height;\n  const context = this.mEffect.mGLContext;\n  for (let i = 0; i < this.mXYStrips; i++) {\n    const ymin = -1.0 + i * strip_height;\n    const ymax = ymin + strip_height;\n    this.mVBO_Tri[i] = context.createBuffer();\n    context.bindBuffer(context.ARRAY_BUFFER, this.mVBO_Tri[i]);\n    context.bufferData(context.ARRAY_BUFFER, new Float32Array([\n      -1.0, ymin, 1.0, ymin, -1.0, ymax,\n      1.0, ymin, 1.0, ymax, -1.0, ymax]),\n      context.STATIC_DRAW);\n    context.bindBuffer(context.ARRAY_BUFFER, null); } }\n\nShaderToy.prototype.InitStripMod = function() {\n  this.SetXYStrips();\n  const\n    st = this,\n    effect = st.mEffect,\n    renderer = effect.mRenderer;\n  renderer.DrawFullScreenTriangle_XY = function(vpos) {\n    for (let i = 0; i < st.mXYStrips; i++) {\n      effect.mGLContext.bindBuffer(effect.mGLContext.ARRAY_BUFFER, st.mVBO_Tri[i]);\n      effect.mGLContext.vertexAttribPointer(vpos, 2, effect.mGLContext.FLOAT, false, 0, 0);\n      effect.mGLContext.enableVertexAttribArray(vpos);\n      effect.mGLContext.drawArrays(effect.mGLContext.TRIANGLES, 0, 6);\n      effect.mGLContext.disableVertexAttribArray(vpos);\n      effect.mGLContext.bindBuffer(effect.mGLContext.ARRAY_BUFFER, null);\n      effect.mGLContext.finish(); } };\n  renderer.DrawUnitQuad_XY = renderer.DrawFullScreenTriangle_XY; }\n\ngShaderToy.InitStripMod();\ngShaderToy.InitRecordingMod();\n\ndocument.querySelector('#myRecord').onclick = function () {\n  const width = 1920;\n  const height = 1080;\n  const every = 1024;\n  const frame_min = 0;\n  const frame_max = 3000;\n  const gpu_workgroup_size = 256 * 256;\n  const sequence_min = every * frame_min;\n  const sequence_max = every * frame_max;\n  let frame = 0, sequence = every * frame;\n  function work_order(setup, ...x) {\n    const download = setup(width, height, sequence, ...x);\n    const subsequence = sequence % every;\n    if (subsequence == every - 1) {\n      download(`frame${frame++}`); }\n    sequence += 1;\n    return [\n      subsequence / every,\n      (sequence - sequence_min) / (sequence_max - sequence_min)]; };\n  gShaderToy.SetXYStrips(Math.floor(gpu_workgroup_size / width), height);\n  gShaderToy.Record(work_order); }\n\n*/\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 srgbcmf2[] = vec3 [](vec3(1.127313E-04, -9.335945E-05, 6.470841E-04), vec3(1.263916E-04, -1.048132E-04, 7.269167E-04), vec3(1.417377E-04, -1.177074E-04, 8.168770E-04), vec3(1.589762E-04, -1.322135E-04, 9.181536E-04), vec3(1.783138E-04, -1.485031E-04, 1.031935E-03), vec3(1.999571E-04, -1.667477E-04, 1.159409E-03), vec3(2.243205E-04, -1.873090E-04, 1.303088E-03), vec3(2.518190E-04, -2.105463E-04, 1.465510E-03), vec3(2.826605E-04, -2.366279E-04, 1.647903E-03), vec3(3.170527E-04, -2.657219E-04, 1.851492E-03), vec3(3.552034E-04, -2.979964E-04, 2.077504E-03), vec3(3.969669E-04, -3.332975E-04, 2.324931E-03), vec3(4.434170E-04, -3.725771E-04, 2.600384E-03), vec3(4.965910E-04, -4.176628E-04, 2.916525E-03), vec3(5.585267E-04, -4.703820E-04, 3.286015E-03), vec3(6.312602E-04, -5.325621E-04, 3.721517E-03), vec3(7.181712E-04, -6.071830E-04, 4.243816E-03), vec3(8.184578E-04, -6.934837E-04, 4.847714E-03), vec3(9.278839E-04, -7.876799E-04, 5.506901E-03), vec3(1.042215E-03, -8.859878E-04, 6.195064E-03), vec3(1.157220E-03, -9.846240E-04, 6.885893E-03), vec3(1.270019E-03, -1.081049E-03, 7.561887E-03), vec3(1.388111E-03, -1.181811E-03, 8.268888E-03), vec3(1.522821E-03, -1.296758E-03, 9.075586E-03), vec3(1.685467E-03, -1.435734E-03, 1.005067E-02), vec3(1.887376E-03, -1.608585E-03, 1.126283E-02), vec3(2.138813E-03, -1.824251E-03, 1.277431E-02), vec3(2.438576E-03, -2.081711E-03, 1.457860E-02), vec3(2.780724E-03, -2.375867E-03, 1.664135E-02), vec3(3.159331E-03, -2.701619E-03, 1.892817E-02), vec3(3.568467E-03, -3.053871E-03, 2.140472E-02), vec3(4.001336E-03, -3.426854E-03, 2.403224E-02), vec3(4.473524E-03, -3.834195E-03, 2.690542E-02), vec3(5.012702E-03, -4.299890E-03, 3.018996E-02), vec3(5.646540E-03, -4.847933E-03, 3.405152E-02), vec3(6.402712E-03, -5.502321E-03, 3.865581E-02), vec3(7.319312E-03, -6.296393E-03, 4.423674E-02), vec3(8.381912E-03, -7.218027E-03, 5.071267E-02), vec3(9.539360E-03, -8.223030E-03, 5.777592E-02), vec3(1.074051E-02, -9.267205E-03, 6.511884E-02), vec3(1.193424E-02, -1.030637E-02, 7.243374E-02), vec3(1.308619E-02, -1.131128E-02, 7.951830E-02), vec3(1.427399E-02, -1.235035E-02, 8.685778E-02), vec3(1.561434E-02, -1.352582E-02, 9.517586E-02), vec3(1.722410E-02, -1.493995E-02, 1.051962E-01), vec3(1.921999E-02, -1.669498E-02, 1.176425E-01), vec3(2.168159E-02, -1.886173E-02, 1.330282E-01), vec3(2.459168E-02, -2.142715E-02, 1.512692E-01), vec3(2.792183E-02, -2.436770E-02, 1.721930E-01), vec3(3.164372E-02, -2.765984E-02, 1.956269E-01), vec3(3.572885E-02, -3.128002E-02, 2.213985E-01), vec3(4.016245E-02, -3.521860E-02, 2.494637E-01), vec3(4.501512E-02, -3.954164E-02, 2.803327E-01), vec3(5.038678E-02, -4.433913E-02, 3.146635E-01), vec3(5.637730E-02, -4.970109E-02, 3.531143E-01), vec3(6.308650E-02, -5.571751E-02, 3.963434E-01), vec3(7.050108E-02, -6.237632E-02, 4.442758E-01), vec3(7.858161E-02, -6.965305E-02, 4.968445E-01), vec3(8.738895E-02, -7.761916E-02, 5.547196E-01), vec3(9.698360E-02, -8.634601E-02, 6.185709E-01), vec3(1.074269E-01, -9.590518E-02, 6.890682E-01), vec3(1.187857E-01, -1.063682E-01, 7.668292E-01), vec3(1.308091E-01, -1.175104E-01, 8.502860E-01), vec3(1.430797E-01, -1.289583E-01, 9.368304E-01), vec3(1.551798E-01, -1.403382E-01, 1.023854E+00), vec3(1.666917E-01, -1.512767E-01, 1.108749E+00), vec3(1.773906E-01, -1.615716E-01, 1.190115E+00), vec3(1.872780E-01, -1.712303E-01, 1.268064E+00), vec3(1.962786E-01, -1.801950E-01, 1.342258E+00), vec3(2.043160E-01, -1.884073E-01, 1.412358E+00), vec3(2.113147E-01, -1.958090E-01, 1.478026E+00), vec3(2.171695E-01, -2.023169E-01, 1.538729E+00), vec3(2.218592E-01, -2.079014E-01, 1.594219E+00), vec3(2.254343E-01, -2.125853E-01, 1.644589E+00), vec3(2.279453E-01, -2.163913E-01, 1.689929E+00), vec3(2.294428E-01, -2.193423E-01, 1.730331E+00), vec3(2.299345E-01, -2.214340E-01, 1.765770E+00), vec3(2.294192E-01, -2.226784E-01, 1.796332E+00), vec3(2.279337E-01, -2.231230E-01, 1.822277E+00), vec3(2.255138E-01, -2.228150E-01, 1.843863E+00), vec3(2.221965E-01, -2.218021E-01, 1.861350E+00), vec3(2.180095E-01, -2.201137E-01, 1.874884E+00), vec3(2.129854E-01, -2.177788E-01, 1.884771E+00), vec3(2.071663E-01, -2.148438E-01, 1.891507E+00), vec3(2.005938E-01, -2.113549E-01, 1.895590E+00), vec3(1.933103E-01, -2.073586E-01, 1.897516E+00), vec3(1.853384E-01, -2.028751E-01, 1.897503E+00), vec3(1.767124E-01, -1.979321E-01, 1.895724E+00), vec3(1.674915E-01, -1.925871E-01, 1.892609E+00), vec3(1.577348E-01, -1.868976E-01, 1.888589E+00), vec3(1.475021E-01, -1.809212E-01, 1.884095E+00), vec3(1.368543E-01, -1.747081E-01, 1.879480E+00), vec3(1.257756E-01, -1.682208E-01, 1.874452E+00), vec3(1.142092E-01, -1.613849E-01, 1.868469E+00), vec3(1.020979E-01, -1.541260E-01, 1.860990E+00), vec3(8.938536E-02, -1.463699E-01, 1.851473E+00), vec3(7.604239E-02, -1.380691E-01, 1.839614E+00), vec3(6.213436E-02, -1.292456E-01, 1.825427E+00), vec3(4.774662E-02, -1.199292E-01, 1.808853E+00), vec3(3.296404E-02, -1.101495E-01, 1.789831E+00), vec3(1.787136E-02, -9.993632E-02, 1.768302E+00), vec3(2.543948E-03, -8.933741E-02, 1.744484E+00), vec3(-1.303481E-02, -7.829617E-02, 1.718044E+00), vec3(-2.891598E-02, -6.668620E-02, 1.688094E+00), vec3(-4.515239E-02, -5.438062E-02, 1.653746E+00), vec3(-6.179508E-02, -4.125302E-02, 1.614112E+00), vec3(-7.887373E-02, -2.721691E-02, 1.568524E+00), vec3(-9.627513E-02, -1.239897E-02, 1.518003E+00), vec3(-1.138364E-01, 3.007463E-03, 1.464200E+00), vec3(-1.313948E-01, 1.880918E-02, 1.408768E+00), vec3(-1.487881E-01, 3.481304E-02, 1.353357E+00), vec3(-1.659234E-01, 5.091481E-02, 1.298853E+00), vec3(-1.828180E-01, 6.714807E-02, 1.244979E+00), vec3(-1.994756E-01, 8.352665E-02, 1.191645E+00), vec3(-2.158987E-01, 1.000638E-01, 1.138760E+00), vec3(-2.320908E-01, 1.167732E-01, 1.086233E+00), vec3(-2.480391E-01, 1.336579E-01, 1.034253E+00), vec3(-2.637234E-01, 1.506699E-01, 9.831476E-01), vec3(-2.791354E-01, 1.677469E-01, 9.330348E-01), vec3(-2.942663E-01, 1.848262E-01, 8.840316E-01), vec3(-3.091075E-01, 2.018455E-01, 8.362553E-01), vec3(-3.236736E-01, 2.187759E-01, 7.897854E-01), vec3(-3.379970E-01, 2.356807E-01, 7.447449E-01), vec3(-3.520956E-01, 2.526353E-01, 7.013151E-01), vec3(-3.659880E-01, 2.697157E-01, 6.596776E-01), vec3(-3.796925E-01, 2.869975E-01, 6.200140E-01), vec3(-3.932056E-01, 3.045142E-01, 5.824565E-01), vec3(-4.066231E-01, 3.223184E-01, 5.469220E-01), vec3(-4.201124E-01, 3.405138E-01, 5.132692E-01), vec3(-4.338408E-01, 3.592045E-01, 4.813564E-01), vec3(-4.479755E-01, 3.784944E-01, 4.510421E-01), vec3(-4.626346E-01, 3.984814E-01, 4.222628E-01), vec3(-4.778031E-01, 4.191867E-01, 3.949971E-01), vec3(-4.934481E-01, 4.405990E-01, 3.691669E-01), vec3(-5.095375E-01, 4.627076E-01, 3.446947E-01), vec3(-5.260385E-01, 4.855010E-01, 3.215025E-01), vec3(-5.428768E-01, 5.089259E-01, 2.995044E-01), vec3(-5.601270E-01, 5.330939E-01, 2.786172E-01), vec3(-5.779799E-01, 5.582418E-01, 2.587672E-01), vec3(-5.966258E-01, 5.846061E-01, 2.398810E-01), vec3(-6.162559E-01, 6.124238E-01, 2.218849E-01), vec3(-6.369976E-01, 6.418559E-01, 2.047460E-01), vec3(-6.585752E-01, 6.726950E-01, 1.883415E-01), vec3(-6.805742E-01, 7.046258E-01, 1.724623E-01), vec3(-7.025796E-01, 7.373321E-01, 1.569000E-01), vec3(-7.241769E-01, 7.704984E-01, 1.414456E-01), vec3(-7.451008E-01, 8.039106E-01, 1.259703E-01), vec3(-7.653536E-01, 8.376087E-01, 1.105310E-01), vec3(-7.849221E-01, 8.716592E-01, 9.519703E-02), vec3(-8.037929E-01, 9.061282E-01, 8.003801E-02), vec3(-8.219525E-01, 9.410819E-01, 6.512341E-02), vec3(-8.393208E-01, 9.764874E-01, 5.045077E-02), vec3(-8.556724E-01, 1.012085E+00, 3.604812E-02), vec3(-8.707763E-01, 1.047603E+00, 2.203101E-02), vec3(-8.844015E-01, 1.082766E+00, 8.514857E-03), vec3(-8.963172E-01, 1.117302E+00, -4.385030E-03), vec3(-9.064160E-01, 1.151106E+00, -1.661994E-02), vec3(-9.145960E-01, 1.184016E+00, -2.819467E-02), vec3(-9.206344E-01, 1.215669E+00, -3.907404E-02), vec3(-9.243083E-01, 1.245705E+00, -4.922277E-02), vec3(-9.253947E-01, 1.273763E+00, -5.860562E-02), vec3(-9.237279E-01, 1.299561E+00, -6.717781E-02), vec3(-9.194236E-01, 1.323231E+00, -7.500001E-02), vec3(-9.126816E-01, 1.345033E+00, -8.219503E-02), vec3(-9.037012E-01, 1.365226E+00, -8.888570E-02), vec3(-8.926821E-01, 1.384069E+00, -9.519482E-02), vec3(-8.796895E-01, 1.401660E+00, -1.011843E-01), vec3(-8.647538E-01, 1.417908E+00, -1.068469E-01), vec3(-8.480229E-01, 1.432786E+00, -1.122020E-01), vec3(-8.296450E-01, 1.446270E+00, -1.172688E-01), vec3(-8.097681E-01, 1.458336E+00, -1.220665E-01), vec3(-7.885009E-01, 1.468989E+00, -1.266250E-01), vec3(-7.658532E-01, 1.478288E+00, -1.309563E-01), vec3(-7.418241E-01, 1.486284E+00, -1.350531E-01), vec3(-7.164135E-01, 1.493032E+00, -1.389082E-01), vec3(-6.896207E-01, 1.498585E+00, -1.425143E-01), vec3(-6.614795E-01, 1.502983E+00, -1.458760E-01), vec3(-6.320166E-01, 1.506227E+00, -1.490034E-01), vec3(-6.012162E-01, 1.508312E+00, -1.518968E-01), vec3(-5.690626E-01, 1.509234E+00, -1.545567E-01), vec3(-5.355401E-01, 1.508987E+00, -1.569836E-01), vec3(-5.006487E-01, 1.507585E+00, -1.591805E-01), vec3(-4.644169E-01, 1.505056E+00, -1.611537E-01), vec3(-4.268721E-01, 1.501418E+00, -1.629082E-01), vec3(-3.880421E-01, 1.496690E+00, -1.644493E-01), vec3(-3.479546E-01, 1.490890E+00, -1.657821E-01), vec3(-3.066269E-01, 1.484021E+00, -1.669096E-01), vec3(-2.640689E-01, 1.476115E+00, -1.678400E-01), vec3(-2.202952E-01, 1.467226E+00, -1.685862E-01), vec3(-1.753211E-01, 1.457409E+00, -1.691611E-01), vec3(-1.291623E-01, 1.446721E+00, -1.695779E-01), vec3(-8.178414E-02, 1.435126E+00, -1.698379E-01), vec3(-3.322993E-02, 1.422644E+00, -1.699462E-01), vec3(1.647723E-02, 1.409282E+00, -1.699071E-01), vec3(6.731900E-02, 1.395040E+00, -1.697244E-01), vec3(1.192826E-01, 1.379913E+00, -1.694011E-01), vec3(1.723716E-01, 1.363885E+00, -1.689388E-01), vec3(2.265535E-01, 1.346947E+00, -1.683397E-01), vec3(2.817685E-01, 1.329091E+00, -1.676064E-01), vec3(3.379604E-01, 1.310306E+00, -1.667407E-01), vec3(3.950782E-01, 1.290572E+00, -1.657441E-01), vec3(4.530904E-01, 1.269858E+00, -1.646158E-01), vec3(5.119055E-01, 1.248253E+00, -1.633665E-01), vec3(5.714813E-01, 1.225795E+00, -1.620011E-01), vec3(6.317760E-01, 1.202521E+00, -1.605242E-01), vec3(6.927480E-01, 1.178470E+00, -1.589408E-01), vec3(7.543417E-01, 1.153676E+00, -1.572557E-01), vec3(8.164712E-01, 1.128159E+00, -1.554717E-01), vec3(8.790492E-01, 1.101937E+00, -1.535900E-01), vec3(9.419879E-01, 1.075027E+00, -1.516121E-01), vec3(1.005200E+00, 1.047450E+00, -1.495393E-01), vec3(1.068595E+00, 1.019229E+00, -1.473743E-01), vec3(1.132079E+00, 9.904111E-01, -1.451228E-01), vec3(1.195562E+00, 9.610470E-01, -1.427911E-01), vec3(1.258952E+00, 9.311876E-01, -1.403853E-01), vec3(1.322155E+00, 9.008838E-01, -1.379118E-01), vec3(1.385085E+00, 8.701851E-01, -1.353755E-01), vec3(1.447610E+00, 8.391317E-01, -1.327810E-01), vec3(1.509572E+00, 8.077605E-01, -1.301333E-01), vec3(1.570813E+00, 7.761082E-01, -1.274373E-01), vec3(1.631175E+00, 7.442114E-01, -1.246980E-01), vec3(1.690527E+00, 7.121119E-01, -1.219200E-01), vec3(1.748767E+00, 6.798771E-01, -1.191085E-01), vec3(1.805788E+00, 6.475815E-01, -1.162701E-01), vec3(1.861481E+00, 6.153001E-01, -1.134109E-01), vec3(1.915737E+00, 5.831081E-01, -1.105374E-01), vec3(1.968406E+00, 5.510737E-01, -1.076565E-01), vec3(2.019379E+00, 5.192531E-01, -1.047715E-01), vec3(2.068605E+00, 4.877034E-01, -1.018832E-01), vec3(2.116035E+00, 4.564816E-01, -9.899258E-02), vec3(2.161619E+00, 4.256442E-01, -9.610039E-02), vec3(2.205355E+00, 3.952283E-01, -9.320728E-02), vec3(2.247016E+00, 3.653102E-01, -9.032203E-02), vec3(2.286212E+00, 3.360053E-01, -8.745773E-02), vec3(2.322551E+00, 3.074293E-01, -8.462748E-02), vec3(2.355643E+00, 2.796983E-01, -8.184441E-02), vec3(2.385179E+00, 2.529122E-01, -7.911832E-02), vec3(2.411291E+00, 2.270562E-01, -7.644707E-02), vec3(2.434250E+00, 2.020731E-01, -7.382581E-02), vec3(2.454327E+00, 1.779059E-01, -7.124969E-02), vec3(2.471793E+00, 1.544974E-01, -6.871386E-02), vec3(2.486810E+00, 1.318213E-01, -6.621644E-02), vec3(2.499142E+00, 1.099528E-01, -6.376390E-02), vec3(2.508465E+00, 8.898728E-02, -6.136401E-02), vec3(2.514454E+00, 6.902014E-02, -5.902449E-02), vec3(2.516787E+00, 5.014650E-02, -5.675308E-02), vec3(2.515281E+00, 3.242012E-02, -5.455461E-02), vec3(2.510147E+00, 1.580008E-02, -5.242557E-02), vec3(2.501651E+00, 2.409702E-04, -5.036125E-02), vec3(2.490061E+00, -1.430293E-02, -4.835691E-02), vec3(2.475644E+00, -2.787763E-02, -4.640780E-02), vec3(2.458524E+00, -4.050184E-02, -4.451170E-02), vec3(2.438652E+00, -5.217302E-02, -4.267014E-02), vec3(2.416041E+00, -6.290465E-02, -4.088408E-02), vec3(2.390702E+00, -7.271016E-02, -3.915446E-02), vec3(2.362647E+00, -8.160284E-02, -3.748224E-02), vec3(2.332006E+00, -8.960488E-02, -3.586778E-02), vec3(2.298837E+00, -9.674343E-02, -3.430864E-02), vec3(2.263040E+00, -1.030396E-01, -3.280152E-02), vec3(2.224515E+00, -1.085144E-01, -3.134317E-02), vec3(2.183162E+00, -1.131888E-01, -2.993031E-02), vec3(2.138985E+00, -1.170885E-01, -2.856103E-02), vec3(2.092322E+00, -1.202583E-01, -2.723575E-02), vec3(2.043580E+00, -1.227489E-01, -2.595460E-02), vec3(1.993169E+00, -1.246110E-01, -2.471774E-02), vec3(1.941496E+00, -1.258955E-01, -2.352532E-02), vec3(1.888731E+00, -1.266336E-01, -2.237612E-02), vec3(1.835119E+00, -1.268719E-01, -2.126993E-02), vec3(1.781178E+00, -1.266850E-01, -2.020835E-02), vec3(1.727426E+00, -1.261471E-01, -1.919298E-02), vec3(1.674379E+00, -1.253323E-01, -1.822547E-02), vec3(1.622437E+00, -1.242991E-01, -1.730664E-02), vec3(1.571505E+00, -1.230536E-01, -1.643371E-02), vec3(1.521356E+00, -1.215911E-01, -1.560290E-02), vec3(1.471761E+00, -1.199070E-01, -1.481042E-02), vec3(1.422494E+00, -1.179971E-01, -1.405246E-02), vec3(1.373536E+00, -1.158760E-01, -1.332694E-02), vec3(1.325033E+00, -1.135714E-01, -1.263340E-02), vec3(1.277005E+00, -1.110982E-01, -1.197045E-02), vec3(1.229469E+00, -1.084710E-01, -1.133672E-02), vec3(1.182445E+00, -1.057045E-01, -1.073083E-02), vec3(1.135944E+00, -1.028140E-01, -1.015115E-02), vec3(1.090028E+00, -9.981636E-02, -9.596884E-03), vec3(1.044795E+00, -9.672766E-02, -9.067950E-03), vec3(1.000341E+00, -9.356435E-02, -8.564254E-03), vec3(9.567625E-01, -9.034315E-02, -8.085670E-03), vec3(9.140990E-01, -8.707513E-02, -7.631671E-03), vec3(8.724007E-01, -8.377818E-02, -7.200966E-03), vec3(8.317810E-01, -8.047815E-02, -6.792405E-03), vec3(7.923530E-01, -7.720093E-02, -6.404826E-03), vec3(7.542297E-01, -7.397255E-02, -6.037050E-03), vec3(7.174977E-01, -7.081290E-02, -5.687499E-03), vec3(6.821161E-01, -6.772247E-02, -5.356688E-03), vec3(6.480060E-01, -6.469796E-02, -5.043423E-03), vec3(6.150882E-01, -6.173598E-02, -4.746524E-03), vec3(5.832837E-01, -5.883315E-02, -4.464810E-03), vec3(5.525690E-01, -5.599348E-02, -4.197302E-03), vec3(5.229613E-01, -5.322388E-02, -3.943484E-03), vec3(4.944434E-01, -5.052562E-02, -3.702843E-03), vec3(4.669975E-01, -4.789990E-02, -3.474872E-03), vec3(4.406057E-01, -4.534781E-02, -3.259070E-03), vec3(4.152519E-01, -4.287098E-02, -3.054902E-03), vec3(3.909333E-01, -4.047338E-02, -2.861817E-03), vec3(3.676544E-01, -3.816022E-02, -2.679254E-03), vec3(3.454195E-01, -3.593660E-02, -2.506657E-03), vec3(3.242323E-01, -3.380752E-02, -2.343480E-03), vec3(3.040693E-01, -3.177450E-02, -2.189048E-03), vec3(2.849291E-01, -2.983837E-02, -2.043231E-03), vec3(2.668509E-01, -2.800362E-02, -1.906266E-03), vec3(2.498742E-01, -2.627477E-02, -1.778383E-03), vec3(2.340380E-01, -2.465626E-02, -1.659820E-03), vec3(2.193497E-01, -2.314998E-02, -1.550489E-03), vec3(2.057325E-01, -2.174951E-02, -1.449636E-03), vec3(1.930996E-01, -2.044691E-02, -1.356494E-03), vec3(1.813641E-01, -1.923423E-02, -1.270296E-03), vec3(1.704391E-01, -1.810348E-02, -1.190280E-03), vec3(1.602979E-01, -1.705297E-02, -1.116116E-03), vec3(1.508736E-01, -1.607578E-02, -1.047312E-03), vec3(1.420191E-01, -1.515619E-02, -9.828534E-04), vec3(1.335871E-01, -1.427846E-02, -9.217242E-04), vec3(1.254305E-01, -1.342685E-02, -8.629110E-04), vec3(1.174393E-01, -1.259004E-02, -8.056016E-04), vec3(1.096530E-01, -1.177255E-02, -7.500272E-04), vec3(1.021484E-01, -1.098251E-02, -6.967327E-04), vec3(9.500256E-02, -1.022805E-02, -6.462583E-04), vec3(8.829232E-02, -9.517274E-03, -5.991500E-04), vec3(8.203211E-02, -8.851708E-03, -5.555099E-04), vec3(7.617779E-02, -8.227100E-03, -5.149744E-04), vec3(7.071848E-02, -7.642931E-03, -4.773879E-04), vec3(6.564327E-02, -7.098648E-03, -4.425979E-04), vec3(6.094121E-02, -6.593712E-03, -4.104500E-04), vec3(5.660647E-02, -6.127880E-03, -3.808564E-04), vec3(5.262366E-02, -5.699485E-03, -3.537132E-04), vec3(4.896744E-02, -5.305849E-03, -3.288424E-04), vec3(4.561254E-02, -4.944299E-03, -3.060656E-04), vec3(4.253371E-02, -4.612173E-03, -2.852040E-04), vec3(3.971720E-02, -4.308141E-03, -2.661454E-04), vec3(3.714224E-02, -4.030052E-03, -2.487379E-04), vec3(3.477292E-02, -3.773977E-03, -2.327449E-04), vec3(3.257283E-02, -3.535837E-03, -2.179389E-04), vec3(3.050490E-02, -3.311359E-03, -2.041028E-04), vec3(2.854500E-02, -3.098607E-03, -1.909896E-04), vec3(2.669066E-02, -2.897316E-03, -1.785825E-04), vec3(2.494395E-02, -2.707708E-03, -1.668956E-04), vec3(2.330697E-02, -2.530010E-03, -1.559428E-04), vec3(2.178178E-02, -2.364448E-03, -1.457380E-04), vec3(2.036242E-02, -2.210375E-03, -1.362413E-04), vec3(1.903675E-02, -2.066471E-03, -1.273716E-04), vec3(1.779758E-02, -1.931956E-03, -1.190804E-04), vec3(1.663770E-02, -1.806050E-03, -1.113199E-04), vec3(1.554991E-02, -1.687968E-03, -1.040417E-04), vec3(1.452803E-02, -1.577042E-03, -9.720444E-05), vec3(1.356866E-02, -1.472901E-03, -9.078545E-05), vec3(1.266883E-02, -1.375222E-03, -8.476490E-05), vec3(1.182557E-02, -1.283685E-03, -7.912281E-05), vec3(1.103590E-02, -1.197966E-03, -7.383925E-05), vec3(1.029593E-02, -1.117641E-03, -6.888823E-05), vec3(9.602632E-03, -1.042382E-03, -6.424951E-05), vec3(8.954338E-03, -9.720082E-04, -5.991192E-05), vec3(8.349386E-03, -9.063396E-04, -5.586430E-05), vec3(7.786111E-03, -8.451953E-04, -5.209549E-05), vec3(7.262497E-03, -7.883560E-04, -4.859209E-05), vec3(6.775542E-03, -7.354962E-04, -4.533398E-05), vec3(6.322092E-03, -6.862735E-04, -4.230002E-05), vec3(5.898988E-03, -6.403447E-04, -3.946912E-05), vec3(5.503077E-03, -5.973682E-04, -3.682012E-05), vec3(5.131862E-03, -5.570720E-04, -3.433640E-05), vec3(4.784032E-03, -5.193144E-04, -3.200914E-05), vec3(4.458207E-03, -4.839460E-04, -2.982906E-05), vec3(4.152998E-03, -4.508148E-04, -2.778699E-05), vec3(3.867026E-03, -4.197719E-04, -2.587362E-05), vec3(3.598668E-03, -3.906416E-04, -2.407804E-05), vec3(3.346858E-03, -3.633068E-04, -2.239325E-05), vec3(3.111061E-03, -3.377106E-04, -2.081559E-05), vec3(2.890741E-03, -3.137951E-04, -1.934140E-05), vec3(2.685353E-03, -2.914995E-04, -1.796722E-05), vec3(2.494110E-03, -2.707397E-04, -1.668765E-05), vec3(2.316055E-03, -2.514116E-04, -1.549631E-05), vec3(2.150406E-03, -2.334301E-04, -1.438799E-05), vec3(1.996382E-03, -2.167106E-04, -1.335744E-05), vec3(1.853198E-03, -2.011678E-04, -1.239942E-05), vec3(1.720098E-03, -1.867195E-04, -1.150887E-05), vec3(1.596529E-03, -1.733058E-04, -1.068210E-05), vec3(1.482026E-03, -1.608764E-04, -9.915975E-06), vec3(1.376122E-03, -1.493804E-04, -9.207395E-06), vec3(1.278350E-03, -1.387670E-04, -8.553214E-06), vec3(1.188204E-03, -1.289815E-04, -7.950067E-06), vec3(1.105110E-03, -1.199616E-04, -7.394096E-06), vec3(1.028492E-03, -1.116445E-04, -6.881462E-06), vec3(9.577772E-04, -1.039683E-04, -6.408315E-06), vec3(8.923909E-04, -9.687054E-05, -5.970829E-06), vec3(8.318533E-04, -9.029906E-05, -5.565784E-06), vec3(7.758031E-04, -8.421475E-05, -5.190758E-06), vec3(7.238451E-04, -7.857461E-05, -4.843118E-06), vec3(6.755836E-04, -7.333575E-05, -4.520209E-06), vec3(6.306229E-04, -6.845517E-05, -4.219386E-06), vec3(5.885813E-04, -6.389146E-05, -3.938096E-06), vec3(5.492518E-04, -5.962221E-05, -3.674945E-06), vec3(5.125000E-04, -5.563273E-05, -3.429048E-06), vec3(4.781927E-04, -5.190862E-05, -3.199502E-06), vec3(4.461953E-04, -4.843522E-05, -2.985417E-06), vec3(4.163141E-04, -4.519157E-05, -2.785487E-06), vec3(3.883805E-04, -4.215938E-05, -2.598583E-06), vec3(3.622988E-04, -3.932813E-05, -2.424078E-06), vec3(3.379741E-04, -3.668764E-05, -2.261327E-06), vec3(3.153113E-04, -3.422754E-05, -2.109696E-06), vec3(2.941994E-04, -3.193585E-05, -1.968434E-06), vec3(2.745228E-04, -2.979994E-05, -1.836780E-06), vec3(2.561807E-04, -2.780885E-05, -1.714060E-06), vec3(2.390727E-04, -2.595174E-05, -1.599593E-06), vec3(2.230977E-04, -2.421763E-05, -1.492707E-06), vec3(2.081595E-04, -2.259606E-05, -1.392758E-06), vec3(1.941959E-04, -2.108029E-05, -1.299330E-06), vec3(1.811571E-04, -1.966490E-05, -1.212091E-06), vec3(1.689936E-04, -1.834454E-05, -1.130706E-06), vec3(1.576557E-04, -1.711379E-05, -1.054847E-06), vec3(1.470850E-04, -1.596632E-05, -9.841196E-07), vec3(1.372263E-04, -1.489614E-05, -9.181571E-07), vec3(1.280348E-04, -1.389839E-05, -8.566582E-07), vec3(1.194658E-04, -1.296821E-05, -7.993245E-07), vec3(1.114745E-04, -1.210074E-05, -7.458563E-07), vec3(1.040177E-04, -1.129130E-05, -6.959637E-07), vec3(9.705902E-05, -1.053592E-05, -6.494051E-07), vec3(9.056414E-05, -9.830888E-06, -6.059487E-07), vec3(8.449856E-05, -9.172460E-06, -5.653649E-07), vec3(7.882785E-05, -8.556894E-06, -5.274234E-07), vec3(7.351722E-05, -7.980417E-06, -4.918907E-07), vec3(6.854530E-05, -7.440704E-06, -4.586248E-07), vec3(6.389788E-05, -6.936221E-06, -4.275294E-07), vec3(5.956066E-05, -6.465411E-06, -3.985095E-07), vec3(5.551934E-05, -6.026714E-06, -3.714705E-07), vec3(5.175544E-05, -5.618137E-06, -3.462868E-07), vec3(4.824857E-05, -5.237464E-06, -3.228225E-07), vec3(4.498170E-05, -4.882838E-06, -3.009646E-07), vec3(4.193789E-05, -4.552428E-06, -2.805988E-07), vec3(3.910010E-05, -4.244380E-06, -2.616120E-07), vec3(3.645248E-05, -3.956981E-06, -2.438967E-07), vec3(3.398315E-05, -3.688929E-06, -2.273750E-07), vec3(3.168133E-05, -3.439064E-06, -2.119739E-07), vec3(2.953619E-05, -3.206200E-06, -1.976216E-07), vec3(2.753695E-05, -2.989181E-06, -1.842449E-07), vec3(2.567232E-05, -2.786774E-06, -1.717690E-07), vec3(2.393320E-05, -2.597989E-06, -1.601328E-07), vec3(2.231200E-05, -2.422005E-06, -1.492857E-07), vec3(2.080118E-05, -2.258002E-06, -1.391770E-07), vec3(1.939314E-05, -2.105157E-06, -1.297561E-07), vec3(1.807999E-05, -1.962613E-06, -1.209700E-07), vec3(1.685526E-05, -1.829667E-06, -1.127756E-07), vec3(1.571361E-05, -1.705739E-06, -1.051370E-07), vec3(1.464966E-05, -1.590245E-06, -9.801830E-08), vec3(1.365804E-05, -1.482603E-06, -9.138355E-08), vec3(1.273315E-05, -1.382205E-06, -8.519526E-08), vec3(1.187050E-05, -1.288562E-06, -7.942337E-08), vec3(1.106632E-05, -1.201267E-06, -7.404275E-08), vec3(1.031689E-05, -1.119915E-06, -6.902847E-08), vec3(9.618487E-06, -1.044103E-06, -6.435558E-08), vec3(8.967188E-06, -9.734030E-07, -5.999791E-08), vec3(8.359790E-06, -9.074688E-07, -5.593391E-08), vec3(7.793614E-06, -8.460098E-07, -5.214570E-08), vec3(7.265980E-06, -7.887344E-07, -4.861536E-08), vec3(6.774213E-06, -7.353520E-07, -4.532508E-08), vec3(6.315534E-06, -6.855617E-07, -4.225613E-08), vec3(5.887706E-06, -6.391203E-07, -3.939361E-08), vec3(5.488876E-06, -5.958267E-07, -3.672510E-08), vec3(5.117191E-06, -5.554797E-07, -3.423822E-08), vec3(4.770795E-06, -5.178776E-07, -3.192057E-08), vec3(4.447747E-06, -4.828104E-07, -2.975908E-08), vec3(4.146454E-06, -4.501045E-07, -2.774319E-08), vec3(3.865600E-06, -4.196176E-07, -2.586402E-08), vec3(3.603865E-06, -3.912058E-07, -2.411279E-08), vec3(3.359925E-06, -3.647253E-07, -2.248069E-08));\nfloat d65[] = float[](0.0341, 0.36014, 0.68618, 1.01222, 1.33826, 1.6643, 1.99034, 2.31638, 2.64242, 2.96846, 3.2945, 4.98865, 6.6828, 8.37695, 10.0711, 11.7652, 13.4594, 15.1535, 16.8477, 18.5418, 20.236, 21.9177, 23.5995, 25.2812, 26.963, 28.6447, 30.3265, 32.0082, 33.69, 35.3717, 37.0535, 37.343, 37.6326, 37.9221, 38.2116, 38.5011, 38.7907, 39.0802, 39.3697, 39.6593, 39.9488, 40.4451, 40.9414, 41.4377, 41.934, 42.4302, 42.9265, 43.4228, 43.9191, 44.4154, 44.9117, 45.0844, 45.257, 45.4297, 45.6023, 45.775, 45.9477, 46.1203, 46.293, 46.4656, 46.6383, 47.1834, 47.7285, 48.2735, 48.8186, 49.3637, 49.9088, 50.4539, 50.9989, 51.544, 52.0891, 51.8777, 51.6664, 51.455, 51.2437, 51.0323, 50.8209, 50.6096, 50.3982, 50.1869, 49.9755, 50.4428, 50.91, 51.3773, 51.8446, 52.3118, 52.7791, 53.2464, 53.7137, 54.1809, 54.6482, 57.4589, 60.2695, 63.0802, 65.8909, 68.7015, 71.5122, 74.3229, 77.1336, 79.9442, 82.7549, 83.628, 84.5011, 85.3742, 86.2473, 87.1204, 87.9936, 88.8667, 89.7398, 90.6129, 91.486, 91.6806, 91.8752, 92.0697, 92.2643, 92.4589, 92.6535, 92.8481, 93.0426, 93.2372, 93.4318, 92.7568, 92.0819, 91.4069, 90.732, 90.057, 89.3821, 88.7071, 88.0322, 87.3572, 86.6823, 88.5006, 90.3188, 92.1371, 93.9554, 95.7736, 97.5919, 99.4102, 101.228, 103.047, 104.865, 106.079, 107.294, 108.508, 109.722, 110.936, 112.151, 113.365, 114.579, 115.794, 117.008, 117.088, 117.169, 117.249, 117.33, 117.41, 117.49, 117.571, 117.651, 117.732, 117.812, 117.517, 117.222, 116.927, 116.632, 116.336, 116.041, 115.746, 115.451, 115.156, 114.861, 114.967, 115.073, 115.18, 115.286, 115.392, 115.498, 115.604, 115.711, 115.817, 115.923, 115.212, 114.501, 113.789, 113.078, 112.367, 111.656, 110.945, 110.233, 109.522, 108.811, 108.865, 108.92, 108.974, 109.028, 109.082, 109.137, 109.191, 109.245, 109.3, 109.354, 109.199, 109.044, 108.888, 108.733, 108.578, 108.423, 108.268, 108.112, 107.957, 107.802, 107.501, 107.2, 106.898, 106.597, 106.296, 105.995, 105.694, 105.392, 105.091, 104.79, 105.08, 105.37, 105.66, 105.95, 106.239, 106.529, 106.819, 107.109, 107.399, 107.689, 107.361, 107.032, 106.704, 106.375, 106.047, 105.719, 105.39, 105.062, 104.733, 104.405, 104.369, 104.333, 104.297, 104.261, 104.225, 104.19, 104.154, 104.118, 104.082, 104.046, 103.641, 103.237, 102.832, 102.428, 102.023, 101.618, 101.214, 100.809, 100.405, 100.0, 99.6334, 99.2668, 98.9003, 98.5337, 98.1671, 97.8005, 97.4339, 97.0674, 96.7008, 96.3342, 96.2796, 96.225, 96.1703, 96.1157, 96.0611, 96.0065, 95.9519, 95.8972, 95.8426, 95.788, 95.0778, 94.3675, 93.6573, 92.947, 92.2368, 91.5266, 90.8163, 90.1061, 89.3958, 88.6856, 88.8177, 88.9497, 89.0818, 89.2138, 89.3459, 89.478, 89.61, 89.7421, 89.8741, 90.0062, 89.9655, 89.9248, 89.8841, 89.8434, 89.8026, 89.7619, 89.7212, 89.6805, 89.6398, 89.5991, 89.4091, 89.219, 89.029, 88.8389, 88.6489, 88.4589, 88.2688, 88.0788, 87.8887, 87.6987, 87.2577, 86.8167, 86.3757, 85.9347, 85.4936, 85.0526, 84.6116, 84.1706, 83.7296, 83.2886, 83.3297, 83.3707, 83.4118, 83.4528, 83.4939, 83.535, 83.576, 83.6171, 83.6581, 83.6992, 83.332, 82.9647, 82.5975, 82.2302, 81.863, 81.4958, 81.1285, 80.7613, 80.394, 80.0268, 80.0456, 80.0644, 80.0831, 80.1019, 80.1207, 80.1395, 80.1583, 80.177, 80.1958, 80.2146, 80.4209, 80.6272, 80.8336, 81.0399, 81.2462, 81.4525, 81.6588, 81.8652, 82.0715, 82.2778, 81.8784, 81.4791, 81.0797, 80.6804, 80.281, 79.8816, 79.4823, 79.0829, 78.6836, 78.2842, 77.4279, 76.5716, 75.7153, 74.859, 74.0027, 73.1465, 72.2902, 71.4339, 70.5776, 69.7213, 69.9101, 70.0989, 70.2876, 70.4764, 70.6652, 70.854, 71.0428, 71.2315, 71.4203, 71.6091, 71.8831, 72.1571, 72.4311, 72.7051, 72.979, 73.253, 73.527, 73.801, 74.075, 74.349, 73.0745, 71.8, 70.5255, 69.251, 67.9765, 66.702, 65.4275, 64.153, 62.8785, 61.604, 62.4322, 63.2603, 64.0885, 64.9166, 65.7448, 66.573, 67.4011, 68.2293, 69.0574, 69.8856, 70.4057, 70.9259, 71.446, 71.9662, 72.4863, 73.0064, 73.5266, 74.0467, 74.5669, 75.087, 73.9376, 72.7881, 71.6387, 70.4893, 69.3398, 68.1904, 67.041, 65.8916, 64.7421, 63.5927, 61.8752, 60.1578, 58.4403, 56.7229, 55.0054, 53.288, 51.5705, 49.8531, 48.1356, 46.4182, 48.4569, 50.4956, 52.5344, 54.5731, 56.6118, 58.6505, 60.6892, 62.728, 64.7667, 66.8054, 66.4631, 66.1209, 65.7786, 65.4364, 65.0941, 64.7518, 64.4096, 64.0673, 63.7251, 63.3828, 63.4749, 63.567, 63.6592, 63.7513, 63.8434, 63.9355, 64.0276, 64.1198, 64.2119, 64.304, 63.8188, 63.3336, 62.8484, 62.3632, 61.8779, 61.3927, 60.9075, 60.4223, 59.9371, 59.4519, 58.7026, 57.9533, 57.204, 56.4547, 55.7054, 54.9562, 54.2069, 53.4576, 52.7083, 51.959, 52.5072, 53.0553, 53.6035, 54.1516, 54.6998, 55.248, 55.7961, 56.3443, 56.8924, 57.4406, 57.7278, 58.015, 58.3022, 58.5894, 58.8765, 59.1637, 59.4509, 59.7381, 60.0253, 60.3125);\n\nfloat sun[] = float[](\n0.979, 0.894, 1.175, 0.958, 1.015, 1.263, 1.249, 1.214,\n1.088, 1.331, 1.075, 1.307, 1.065, 0.838, 0.878, 1.141,\n1.101, 1.291, 1.341, 1.000, 1.289, 1.096, 0.733, 0.684,\n1.027, 0.954, 1.071, 0.966, 0.912, 1.227, 1.223, 1.398,\n0.955, 0.489, 1.101, 1.378, 0.650, 1.040, 1.538, 1.655,\n1.649, 1.796, 1.803, 1.658, 1.602, 1.672, 1.624, 1.545,\n1.824, 1.706, 1.502, 1.819, 1.791, 1.758, 1.739, 1.736,\n1.844, 1.667, 1.686, 1.703, 1.760, 1.799, 1.584, 1.713,\n1.770, 1.697, 1.700, 1.571, 1.589, 1.477, 1.136, 1.688,\n1.648, 1.733, 1.672, 1.725, 1.931, 1.808, 1.569, 1.827,\n1.715, 1.933, 1.982, 1.911, 1.975, 1.823, 1.893, 2.079,\n1.975, 2.029, 2.146, 2.111, 1.943, 1.972, 1.981, 2.036,\n2.079, 2.102, 1.973, 2.011, 2.042, 2.057, 2.106, 2.042,\n1.978, 2.044, 1.923, 2.017, 1.996, 1.992, 1.879, 2.020,\n2.043, 1.993, 2.053, 2.018, 1.958, 2.077, 2.011, 2.078,\n2.037, 2.092, 2.025, 2.021, 1.971, 1.832, 1.627, 1.832,\n1.916, 1.962, 2.009, 1.898, 1.898, 1.890, 2.060, 1.928,\n2.019, 2.020, 1.868, 1.972, 1.859, 1.814, 1.896, 1.936,\n1.871, 1.995, 1.963, 1.908, 1.921, 1.918, 1.949, 1.999,\n1.869, 1.863, 1.876, 1.902, 1.671, 1.728, 1.656, 1.830,\n1.833, 1.908, 1.825, 1.896, 1.960, 1.932, 1.676, 1.830,\n1.899, 1.920, 1.954, 1.965, 1.773, 1.925, 1.860, 1.992,\n1.873, 1.884, 1.906, 1.834, 1.772, 1.883, 1.827, 1.881,\n1.881, 1.903, 1.881, 1.835, 1.865, 1.897, 1.864, 1.873,\n1.848, 1.884, 1.900, 1.899, 1.823, 1.848, 1.789, 1.810,\n1.845, 1.826, 1.852, 1.863, 1.856, 1.800, 1.831, 1.889,\n1.812, 1.862, 1.772, 1.825, 1.894, 1.878, 1.869, 1.832,\n1.848, 1.859, 1.786, 1.830, 1.840, 1.855, 1.875, 1.859,\n1.862, 1.786, 1.832, 1.850, 1.752, 1.614, 1.815, 1.789,\n1.810, 1.798, 1.776, 1.785, 1.807, 1.783, 1.760, 1.777,\n1.748, 1.753, 1.721, 1.789, 1.779, 1.766, 1.762, 1.760,\n1.745, 1.746, 1.705, 1.748, 1.707, 1.685, 1.715, 1.715,\n1.611, 1.709, 1.726, 1.709, 1.736, 1.692, 1.715, 1.668,\n1.658, 1.634, 1.699, 1.699, 1.699, 1.679, 1.641, 1.653,\n1.658, 1.656, 1.653, 1.616, 1.623, 1.629, 1.605, 1.560,\n1.608, 1.601, 1.534, 1.386, 1.551, 1.573, 1.557, 1.562,\n1.537, 1.548, 1.518, 1.523, 1.512, 1.510, 1.500, 1.494,\n1.481, 1.457, 1.469, 1.463, 1.450, 1.450, 1.438, 1.418,\n1.427);\n\n// integer domain SRGB Color Matching Functions\nvec3 srgbcmfi(\n  int l) {\n  return l >= 360 && l <= 830 ? srgbcmf2[l - 360] : vec3(0.0); }\n\n// integer domain CIE Standard Illuminant D65\nfloat cied65i(\n  int l) {\n  return l >= 300 && l <= 830 ? d65[l - 300] : 0.0; }\n\n// integer domain sunlight spectral power distribution function\nfloat sunlighti(\n  int l) {\n  return l >= 360 && l <= 700 ? sun[l - 360] : 0.0; }\n\n// SRGB Color Matching Functions\nvec3 srgbcmf(\n  float l) {\n  return srgbcmfi(int(l)); }\n\n// sunlight spectral power distribution function\nfloat sunlight(\n  float l) {\n  return sunlighti(int(l)); }\n\n// CIE Standard Illuminant D65\nfloat cied65(\n  float l) {\n  return cied65i(int(l)); }\n\n// color math\n\n// inverse term in Planck's law\nfloat planck_d(\n  float l,\n  float T) {\n  return exp(1.43877688e7 / (l * T)) - 1.0; }\n\n// CIE Standard Illuminant D\nfloat cied(\n  float l,\n  float T) {\n  return planck_d(l, 6500.0) / planck_d(l, T) * cied65(l); }\n\n// Planck's law\nfloat black_body(\n  float l,\n  float T) {\n  return 5.95521486e19 * pow(l, -4.0) / planck_d(l, T); }\n\n// Rayleigh law\nfloat rayleigh(\n  float l,\n  float s) {\n  return pow(l / s, -4.0); }\n  \n// CIEXYZ color to linear sRGB color\nconst mat3 XYZ2sRGB = mat3(\n  3.2410,-0.9692, 0.0556,\n  -1.5374, 1.8760,-0.2040,\n  -0.4986, 0.0416, 1.0570);\n\n// linear sRGB component to nonlinear sR'G'B' component\nfloat srgb_gamma(\n  float v) {\n  return v <= 0.0031308\n    ? v * 12.92\n    : 1.055 * pow(v, 0.41666666666) - 0.055; }\n\nvec3 srgb_gamma(\n  vec3 v) {\n  return vec3(\n    srgb_gamma(v.r),\n    srgb_gamma(v.g),\n    srgb_gamma(v.b)); }\n\n// linear sRGB component to nonlinear sR'G'B' component\nfloat srgb_igamma(\n  float v) {\n  return v <= 0.04045\n    ? v * 0.0773993808\n    : pow((v + 0.055) * 0.94786729857, 2.4) ; }\n\n// apparently this transforms linear srgb to aces srgb\nvec3 aces(vec3 x) {\n  const float a = 2.51;\n  const float b = 0.03;\n  const float c = 2.43;\n  const float d = 0.59;\n  const float e = 0.14;\n  return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0); }\n\n// math lib\n\n// needed to produce infinities\nfloat zero = 0.0;\n\nvec2 dir2(\n  float a) {\n  return vec2(cos(a), sin(a)); }\n\nfloat quadsorb(float wavelength, float c, float w) {\n  return 1.0 + pow((wavelength - c) / w, 2.0); }\n\n// vector lib\n\n// handy nil vector\nconst vec4 nil = vec4(0.0);\n\n// basis vectors\nconst vec4 dx = vec4(1.0, nil.xyz);\nconst vec4 dy = dx.wxyz;\nconst vec4 dz = dy.wxyz;\nconst vec4 dw = dz.wxyz;\n\n// transformation matrices\n\nmat4 translate(\n  vec4 by) {\n  return mat4(dx, dy, dz, dw + by); }\n\nmat4 scale(\n  float by) {\n  return mat4(by * dx, by * dy, by * dz, dw); }\n\nmat4 rotate(\n  vec4 axis,\n  float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  vec4 l = (1.0 - c) * axis;\n  vec3 m = l.xyz * axis.yzx;\n  vec4 n = s * axis;\n  return mat4(\n    l.x * axis.x, m.x - n.z, m.z + n.y, 0.0,\n    m.x + n.z, l.y * axis.y, m.y - n.x, 0.0,\n    m.z - n.y, m.y + n.x, l.z * axis.z, 0.0,\n    nil) + scale(c); }\n\n// pseudorandom\n\n// i can't believe it's an LCG\n// https://www.ams.org/journals/mcom/1999-68-225/S0025-5718-99-00996-5/S0025-5718-99-00996-5.pdf\nint next_hash(\n  int s) {\n  return s * 594156893; }\n\n// multilinear congruential seed function\nint hash(\n  int k,\n  int x,\n  int y) {\n  int s = next_hash(k * 37769685);\n  s ^= next_hash(x * 26757677);\n  s ^= next_hash(y * 20501397);\n  return next_hash(s); }\n\n// multilinear congruential seed function\nint hash(\n  ivec3 p) {\n  return hash(p.x, p.y, p.z); }\n\nint rand(\n  inout int s) {\n  s = next_hash(s);\n  return s >> 1; }\n\nconst int rand_size = 1 << 31;\n\nfloat unitrand(\n  inout int s) {\n  return float(rand(s) + (rand_size >> 1)) / float(rand_size); }\n\nfloat boxrand(\n  inout int s) {\n  return float(rand(s)) / float(rand_size); }\n\nconst float inv_4pi = 0.07957747154;\n\n// models an interaction with isotropic roughness\n// n - the surface normal\n// s - the azimuth of the incoming ray\n// you should supply a random value between 1.0 and -1.0 for s\nvec3 axial(\n  vec3 n,\n  float v,\n  inout int s) {\n  float u = 6.28318530718 * boxrand(s);\n  float r = sqrt(1.0 - pow(v, 2.0));\n  vec3 t = normalize(abs(n.y) > 0.5 ? vec3(-n.y, n.x, 0.0) : vec3(-n.z, 0.0, n.x));\n  vec3 b = cross(n, t.xyz);\n  return vec3(v * n + r * (cos(u) * t + sin(u) * b)); }","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int subsequence_length = 1024;\nconst float epsilon_free_distance = 1e-4;\nconst float wavelength_min = 360.0;\nconst float wavelength_max = 780.0;\nconst vec4 general_parms = vec4(-1.0, -1.0, -1.0, -1.0);\nconst vec4 orbit_parms = vec4(0.0, -0.1, 1.0, 1.0);\nvec4 position_parms = vec4(-6.0, -6.0, -6.0, 1.0);\nconst vec4 lens_parms = vec4(1.0, 6.0, 0.0008, -1.0);\nconst float sun_size = 0.00000951927;\nconst vec3 sun_dir = normalize(vec3(1.0, 1.0, 1.0));\n  \nvoid mainImage(\n  out vec4 c,\n  vec2 xy) {\n  int sequence = iFrame / subsequence_length;\n  float fsequence = float(iFrame) / float(subsequence_length);\n  int subsequence = iFrame - subsequence_length * sequence;\n  if (subsequence == 0) {\n    c = vec4(0.0); }\n  else { \n    c = texelFetch(iChannel0, ivec2(xy), 0); }\n\n  position_parms.z += 0.07 * fsequence;\n\n  int seed; // for pseudorandom state\n  vec4 cairn; // last visited\n  vec4 heading; // from cairn\n  vec4 lens_normal; // for lens shading\n  float leg = 0.0; // distance\n  float wavelength; // wavelength\n  float weight = 1.0; // of sample\n  float contribution = 0.0; // of energy\n  float divisor = 1.0; // for monte carlo sum\n  bool for_sun = true; // whether to consider sun\n\n  { // setup\n\n    // pseudorandom generator\n    seed = hash(ivec3(iFrame, xy));\n\n    // view matrix\n    mat4 view = translate(vec4(position_parms.xyz, 0.0))\n      * rotate(dy, orbit_parms.x)\n      * rotate(dx, orbit_parms.y)\n      * translate(vec4(0.0, 0.0, -orbit_parms.w, 0.0));\n\n    vec2 lens_uv = sqrt(unitrand(seed)) \n      * dir2(6.28318530718 * boxrand(seed));\n    vec2 lenspoint = lens_parms.z * lens_uv;\n    \n    wavelength = unitrand(seed)\n      * (wavelength_max - wavelength_min)\n      + wavelength_min;\n\n    cairn = vec4(lenspoint, 0.0, 1.0);\n\n    heading = normalize(vec4(\n      (1.0 - wavelength / 40000.0)\n      / (iResolution.y * lens_parms.x)\n      * (xy - 0.5 * iResolution.xy + vec2(boxrand(seed), boxrand(seed)))\n      - (lenspoint / lens_parms.y),\n      1.0, 0.0));\n\n    // view to world space\n    cairn = view * cairn;\n    heading = view * heading;\n    lens_normal = view * normalize(vec4(lens_uv * 0.2, 1.0, 0.0));\n\n  } // setup\n\n  // light source sampling\n\n  const float sun_cosine = 1.0 - sun_size;\n  const float sun_density = 1.0 / sun_size;\n  vec3 sun_heading = axial(sun_dir, 1.0 - sun_size * unitrand(seed), seed);\n  float sun_dist = 2.0 * sun_density * inv_4pi;\n\n  // lens shading\n\n  if (unitrand(seed) < 0.1) {\n    float p = 20.0;\n    if (dot(sun_heading, lens_normal.xyz) < 0.0 || unitrand(seed) < 0.5) {\n      heading.xyz = axial(normalize(lens_normal.xyz + heading.xyz), 1.0 - pow(unitrand(seed), p), seed);\n      for_sun = false; }\n    else {\n      float inv_p = 1.0 / p;\n      weight *= 2.0 * inv_4pi * inv_p * pow(1.0 - dot(sun_heading, normalize(lens_normal.xyz + heading.xyz)), inv_p - 1.0) / sun_dist;\n      heading.xyz = sun_heading;\n      for_sun = true; } }\n\n  // iterative ray-tracing\n\n  for(int i = 0; i < 1024; ++i) {\n\n    // our current position, used for intersection calculations\n    vec4 position = cairn + leg * heading;\n\n    // initially assume the free path is infinitely long\n    float free_distance = 1.0 / zero;\n\n    float city_free_distance = -1.0 / zero;\n    vec4 city_normal;\n    int city_color;\n    int city_normal_iter;\n    const int city_iters = 12;\n    vec3 city_parms[city_iters];\n    vec4 city_position = position;\n    mat2 tcity0 = mat2(cos(2.0), sin(2.0), -sin(2.0), cos(2.0));\n    mat2 itcity0 = inverse(tcity0);\n    int roof = 0;\n    float j = 100.0;\n    for(int i = 0; i < city_iters; i++) {\n      city_position.xz *= tcity0;\n      vec3 disc = mod(city_position.xyz, 2.0 * j) - j;\n      city_position.xyz = j * 0.8 - abs(disc);\n      city_parms[i] = -sign(disc);\n      if(disc.y > 0.0) { roof++; }\n      city_free_distance = max(city_free_distance, min(min(city_position.x, city_position.y), city_position.z));\n      if (city_free_distance == city_position.x) {\n        city_normal = dx;\n        city_normal_iter = i;\n        city_color = 0; }\n      else if (city_free_distance == city_position.y) {\n        city_normal = dy;\n        city_normal_iter = i;\n        city_color = roof % 4 + 1; }\n      else if (city_free_distance == city_position.z) {\n        city_normal = dz;\n        city_normal_iter = i;\n        city_color = 0; }\n      j *= 0.4; }\n    city_free_distance = max(city_free_distance, position.y);\n    if (city_free_distance == position.y) {\n      city_normal = dy;\n      city_normal_iter = -1;\n      city_color = 1; }\n    city_free_distance = max(city_free_distance, epsilon_free_distance);\n    free_distance = min(free_distance, city_free_distance);\n\n    float scatter_free_distance;\n    {\n      float scatter = rayleigh(wavelength, 100.0);\n      scatter_free_distance = -log(unitrand(seed)) / scatter;\n      free_distance = min(free_distance, scatter_free_distance);\n    }\n\n    float v = dot(heading, -dy);\n    vec3 p_ceil = position.xyz;\n    p_ceil.y -= 50.0;\n    float ceil_free_distance = v > 0.0 ? 1.0 / zero : -dot(p_ceil, -dy.xyz) / v;\n    free_distance = min(free_distance, ceil_free_distance);\n\n    leg += free_distance;\n\n    position = cairn + leg * heading;\n\n    // unit roll for deciding shading methods\n    float method_roll = unitrand(seed);\n\n    if (free_distance == ceil_free_distance) {\n      if (dot(heading.xyz, sun_dir) > sun_cosine) {\n        if (!for_sun) {\n          divisor = 0.0; }\n        else {\n          contribution += weight * sun_density * sunlight(wavelength); } }\n      break; }\n\n    if (free_distance == scatter_free_distance) {\n      cairn = position; leg = 0.0;\n      if (method_roll > 0.5) {\n        weight *= inv_4pi * (1.0 + pow(dot(heading.xyz, sun_heading), 2.0)) / sun_dist;\n        heading.xyz = sun_heading;\n        for_sun = true; }\n      else {\n        vec3 heading1 = normalize((boxrand(seed) < 0.0 ? heading.xyz : -heading.xyz) + axial(heading.xyz, 2.0 * boxrand(seed), seed));\n        heading.xyz = heading1;\n        for_sun = false; } }\n    else if (free_distance == city_free_distance && free_distance == epsilon_free_distance) {\n      cairn = position; leg = 0.0;\n      for(int i = city_normal_iter + 1; --i >= 0;) {\n        city_normal.xyz *= city_parms[i].xyz;\n        city_normal.xz = city_normal.xz * itcity0; }\n      city_normal = normalize(city_normal);\n      if (dot(heading.xyz, city_normal.xyz) < 0.0) {\n        if (city_color == 0) {\n          vec4 normal = -city_normal;\n          float ior1 = 1.0;\n          float ior2 = 2.7;\n          float ior12 = pow(ior1, 2.0);\n          float ior22 = pow(ior2, 2.0);\n          float dt1 = dot(heading, normal);\n          float dt12 = pow(dt1, 2.0);\n          float discriminant = -1.0 + ior22 / ior12 + dt12;\n          // no total internal reflection in this scene, so\n          // discriminant is always nonnegative.\n          vec4 refracted_heading = normalize(\n            heading\n            + (-dt1 + sqrt(discriminant)) * normal);\n          float dt2 = dot(refracted_heading, normal);\n          float dt22 = pow(dt2, 2.0);\n          float k1 = ior12 * dt12 + ior22 * dt22;\n          float k2 = ior22 * dt12 + ior12 * dt22;\n          float v = 2.0 * ior1 * ior2 * dt1 * dt2;\n          float reflectance = 0.5 * (\n            (k1 - v) / (k1 + v)\n            + (k2 - v) / (k2 + v));\n          if (method_roll > reflectance) {\n            break; }\n          heading.xyz = reflect(heading.xyz, city_normal.xyz); }\n        else {\n          //if (city_color == 2) {\n          //  contribution += weight * 0.001 * cied65(wavelength); }\n          if (dot(sun_dir, city_normal.xyz) < 0.0 || method_roll > 0.5) {\n            heading.xyz = axial(city_normal.xyz, unitrand(seed), seed);\n            for_sun = false; }\n          else {\n            weight *= 2.0 * inv_4pi / sun_dist;\n            heading.xyz = sun_heading;\n            for_sun = true; }\n          weight *=\n            city_color == 1 ? 0.8 :\n            city_color == 3 ? exp(-0.1 * quadsorb(wavelength, 550.0, 2.0)) :\n            city_color == 2 || city_color == 4 ? 0.95 :\n            0.0; } } } }\n\n  c.rgb += srgbcmf(wavelength) * contribution;\n  c.a += divisor; }","name":"Buffer A","description":"","type":"buffer"}]}