{"ver":"0.1","info":{"id":"7st3zl","date":"1630519117","viewed":403,"name":"Fork lysol ","username":"lysol","description":"liked the inside marble texture, but wanted just that \nforked from https://www.shadertoy.com/view/MtX3Ws","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal","volumetric"],"hasliked":0,"parentid":"MtX3Ws","parentname":"Playing marble"},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Created by S. Guillitte 2015\n\nfloat zoom=1.;\n\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 csqr( vec2 a )  { return vec2( a.x*a.x - a.y*a.y, 2.*a.x*a.y  ); }\n\n\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nfloat map(in vec3 p) {\n\t\n\tfloat res = 0.;\n\t\n    vec3 c = p;\n\tfor (int i = 0; i <11; ++i) {\n        p =.7*abs(p)/dot(p,p) - (.5);\n        p.yz= csqr(p.yz);\n        p=p.zyx;\n        res += exp(-20. * abs(dot(p,c)));\n        \n\t}\n\treturn res/2.;\n}\n\n\n\nvec3 raymarch( in vec3 ro, vec3 rd )\n{\n    float t = 1.;\n    float dt = .02;\n    //float dt = .2 - .195*cos(iTime*.5);//animated\n    vec3 col= vec3(0.);\n    float c = 0.;\n    for( int i=0; i<50; i++ )\n\t{\n        t+=dt*exp(-4.*c);\n        if(t<.001)break;\n        vec3 pos = ro+t*rd;\n        \n        c = map(ro+t*rd);               \n        \n        //col = 1.*col+ .1*vec3(c, c, c+.1);//green\t\n        col = .99*col+ .08*vec3(c*c*c, c*c, c);//blue\n    }    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat time = iTime;\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.);\n    m-=.5;\n\n    // camera\n\n    vec3 ro = zoom*vec3(.1);\n    ro.yz*=rot(iTime * .1);\n    vec3 ta = vec3( 0.0 , 0.0, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\t// raymarch\n    vec3 col = raymarch(ro,rd);\n     \n\t// shade\n    \n    col =  .5 *(log(1.+col));\n    col = clamp(col,0.,1.);\n    \n    fragColor = vec4( col, 1.0 );\n\n}\n","name":"Image","description":"","type":"image"}]}