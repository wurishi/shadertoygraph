{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// MIT License\n\nfloat map(vec3 p) {\n    float scene = 10000.0;\n    \n    float scale = 4.0;\n    \n    vec2 grid = floor(p.xz / scale);\n    vec2 gridLocal = fract(p.xz / scale) - 0.5;\n    \n    for(float i = -1.0; i <= 1.0; i++) {\n        for(float j = -1.0; j <= 1.0; j++) {\n            vec2 offset = vec2(i, j);\n            vec2 cell = grid + offset;\n            \n            // Generate random position within the cell\n            vec2 h = vec2(dot(cell,vec2(127.1,311.7)), dot(cell,vec2(269.5,183.3)));\n            vec2 random = (-1.0 + 2.0 * fract(sin(h)*43758.5453123)) * 0.5;\n            \n            vec3 pointPos = vec3(cell.x * scale + random.x * scale, \n                                0.0,\n                                cell.y * scale + random.y * scale);\n                                \n            float wave1 = sin(pointPos.x * 50.0 + iTime * 0.05);\n            float wave2 = cos(pointPos.z * 50.0 + iTime * 0.05);\n            pointPos.y = (wave1 + wave2) * 16.0;\n            \n            float d = length(p - pointPos);\n            scene = min(scene, d);\n        }\n    }\n    \n    return scene;\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n    vec3 col = vec3(0.0);\n    float t = 0.0;\n    \n    for(int i = 0; i < 25; i++) {\n        vec3 p = ro + rd * t;\n        float d = map(p);\n        \n        // glow\n        float glow = 1.0 / pow(max(d, 0.001), 2.0);\n        col += vec3(0.2, 0.4, 0.8) * glow * 0.075;\n        \n        // Large step so they fade in and out by going between steps\n        // Free animated brightness\n        t += 25.0; \n    }\n    \n    return col;\n}\n\n\nvec3 getSkyGradient(vec3 rd) {\n    vec3 topColor = vec3(0.000,0.082,0.180);\n    vec3 bottomColor = vec3(0.043,0.000,0.059);\n    float t = rd.y * 0.5 + 0.5;\n    return mix(bottomColor, topColor, t);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    vec3 ro = vec3(0.0, 0.0, 0.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n    \n    float angle = iTime * 0.1;\n    mat2 rot = mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\n    rd.xz = rot * rd.xz;\n    \n    vec3 col = getSkyGradient(rd);\n    col += render(ro, rd);\n    \n    col = clamp((col*(2.51f*col+0.03f))/(col*(2.43f*col+0.59f)+0.14f), vec3(0.0), vec3(1.0));\n    col = pow(col, vec3(0.4545));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lcGfz3","date":"1734266688","viewed":258,"name":"Starry Skies","username":"TheNuclearWolf","description":"Playing around with how I might render stars for a galaxy.","likes":19,"published":3,"flags":0,"usePreview":0,"tags":["sky","volumetric","stars"],"hasliked":0,"parentid":"","parentname":""}}