{"ver":"0.1","info":{"id":"4dGfzc","date":"1529697959","viewed":87,"name":"The Wobbs","username":"t3knomanser","description":"The wobblers!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["wobble","palette"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int pick_rule(vec2 uv, int space) {\n    return int(sin(distance(uv, vec2(0.5, 0.5))) * float(space) * 10.) % space;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 iPalette[4];\n    iPalette[0] = vec3(0x17, 0x3E, 0xA6) / 255.;\n    iPalette[1] = vec3(0xA5, 0x0E, 0x0E) / 255.;\n    iPalette[2] = vec3(0xE3, 0x74, 0x00) / 255.;\n    iPalette[3] = vec3(0x0D, 0x65, 0x2D) / 255.;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tint p = pick_rule(uv * sin(iTime + uv.x), iPalette.length());\n    int q = pick_rule(uv * cos(iTime + uv.y), iPalette.length());\n    \n    float m = smoothstep(-1., 1.,\n                           sin(uv.x * uv.y / sin(uv.x))\n                           );\n    \n    vec3 col = mix(iPalette[p], iPalette[q], m);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}