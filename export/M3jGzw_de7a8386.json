{"ver":"0.1","info":{"id":"M3jGzw","date":"1708328563","viewed":76,"name":"Aberration 'Hot Snow' Ocean","username":"akr51","description":"Attempting to learn ray marching and other interesting related mathematics. Please provide any interesting variations and discuss in the comments","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","aberration"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define SQR(X) ((X) * (X))\n\n\nfloat ray(vec3 rayOrigin, vec3 rayDirection)\n{\n\n\n    float dt = 0.01;\n    float limit = 10.0;\n    \n    for (float t = 0.0; t < limit; t += dt)\n    {\n    \n    \n        vec3 p = rayOrigin + rayDirection * t;\n\n        if (p.y * 23.0 >= (cos(p.x * 13.0 + iTime) * sin(p.z * 13.0 + iTime)))\n        {\n        \n            \n            return t;\n        }\n    \n    }\n    \n    \n    return 0.0;\n\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    \n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= (iResolution.x / iResolution.y);\n    \n    vec3 shade = vec3(0.3);\n    \n    \n    vec3 rayOrigin = vec3(uv, -1.0);\n    vec3 fixation = vec3(abs(cos(iTime * 0.01)), abs(sin(iTime * 0.001)), 0.5);\n    vec3 rayDirection = fixation - rayOrigin;\n    float r = ray(rayOrigin, rayDirection + vec3(0.02,  0.001, 0.001));\n    float g = ray(rayOrigin, rayDirection + vec3(0.01,   0.01,   0.029));\n    float b = ray(rayOrigin, rayDirection + vec3(0.01, 0.004, 0.018));   \n    \n    \n    fragColor = vec4(vec3(pow(r, 5.0), pow(g, 5.0), pow(b, 5.0)) + shade, 1.0);\n   \n   \n}","name":"Image","description":"","type":"image"}]}