{"ver":"0.1","info":{"id":"4f3BRN","date":"1732747012","viewed":73,"name":"Distortion_test","username":"LastfahrerLudwig","description":"Simple distortion with a sphere. Sphere is movable with mouse cursor when pressing left click in the window.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["interactive","distortion","gradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shader by LastfahrerLudwig on Shadertoy. Distribute however you see fit\n\n#define SPHERE_SIZE 0.6\n#define DISTORTION_STRENGTH 0.4 //Should be between 0 and 1\n\nfloat sphere(vec2 uv, vec2 position, float size) {\n    return smoothstep(DISTORTION_STRENGTH * size, size, length(uv - position));\n}\n\nvec3 background(vec2 uv, float iTime) {\n    return vec3(0.3 + 0.7*sin(5.*iTime + 2345.64 + uv.y*10.),\n    0.3 + 0.7*sin(5.*iTime + uv.y*10.),\n    0.3 + 0.7*sin(5.*iTime + 515.78 + uv.y*100.));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1 in y)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec2 mouse_pos = iMouse.xy/iResolution.xy;\n    mouse_pos = mouse_pos * 2. - 1.;\n    mouse_pos.x *= iResolution.x/iResolution.y;\n    // If mouse is not pressed, animate sphere\n    if(iMouse.z <= 0.) {\n        mouse_pos = vec2(sin(iTime), 0.3*sin(iTime * 0.4));\n    }\n    \n    vec3 sphere = vec3(sphere(uv, mouse_pos, SPHERE_SIZE));\n    \n    vec2 uv_vec = normalize(uv - mouse_pos);\n    uv_vec *= SPHERE_SIZE;\n    if(sphere.x < 1. && DISTORTION_STRENGTH != 0.) {\n        uv = mouse_pos + sphere.x * uv_vec;\n    }\n    vec3 col = 0.8*background(uv, 0.5*iTime);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}