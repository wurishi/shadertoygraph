{"ver":"0.1","info":{"id":"lslcWj","date":"1489983810","viewed":677,"name":"Space fungus","username":"LukeRissacher","description":"...","likes":34,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Just a typical space fungus. A result of trying to understand the \n// volumetric / additive color stuff in \"Type 2 Supernova\" by Duke \n// (https://www.shadertoy.com/view/lsyXDK). Cosine color palettes \n// courtesy IQ: https://iquilezles.org/articles/palettes\n// Golfed version by FabriceNeyret2: https://www.shadertoy.com/view/ldlyD2\n\n#define R(p, a) p = p * cos(a) + vec2(-p.y, p.x) * sin(a)\n\nfloat Sin01(float t) {\n    return 0.5 + 0.5 * sin(6.28319 * t);\n}\n\nfloat SineEggCarton(vec3 p) {\n    return 1.0 - abs(sin(p.x) + sin(p.y) + sin(p.z)) / 3.0;\n}\n\nfloat Map(vec3 p, float scale) {\n    float dSphere = length(p) - 1.0;\n    return max(dSphere, (0.95 - SineEggCarton(scale * p)) / scale);\n}\n\nvec3 GetColor(vec3 p) {\n    float amount = clamp((1.5 - length(p)) / 2.0, 0.0, 1.0);\n    vec3 col = 0.5 + 0.5 * cos(6.28319 * (vec3(0.2, 0.0, 0.0) + amount * vec3(1.0, 1.0, 0.5)));\n    return col * amount;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec3 rd = normalize(vec3(2.0 * fragCoord.xy - iResolution.xy, -iResolution.y));\n    vec3 ro = vec3(0.0, 0.0, mix(1.2, 2.0, Sin01(0.05 * iTime)));\n    R(rd.xz, 0.5 * iTime);\n    R(ro.xz, 0.5 * iTime);\n    R(rd.yz, 0.1 * iTime);\n    R(ro.yz, 0.1 * iTime);\n    float t = 0.0;\n    fragColor.rgb = vec3(0.0);\n    float scale = mix(3.5, 9.0, Sin01(0.068 * iTime));\n    for (int i = 0; i < 64; i++) {\n        vec3 p = ro + t * rd;\n        float d = Map(p, scale);\n        if (t > 5.0 || d < 0.001) {\n            break;\n        }\n        t += 0.8 * d;\n        fragColor.rgb += 0.05 * GetColor(p);\n    }\n}","name":"Image","description":"","type":"image"}]}