{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define PI 3.1415926535897932384626433832795\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pulse = 1.;       // pulse: on/off\n    float mag  = 80.;\n    \n    float gs = iResolution.x / 20.;\n    float ar = iResolution.x / iResolution.y;\n    float t =0.2*iTime;\n\n    if (pulse != 0.) {\n        pulse = sqrt( abs( mod( t, .4 ) - .2 ) ) * 16.;\n        mag = 200.;\n    }\n\n    vec2  s =iResolution.xy/mag+pulse;\n    vec2  p =fragCoord.xy/iResolution.x*s-s/2.;\n    float v =.0+sin((p.x+.8*t))+sin((p.y+.8*t)/2.)+sin((p.x+p.y+.9*t)/2.);\n    p += s/2.*vec2(sin(t/.9),cos(t/.6));\n    v += sin(sqrt(p.x*p.x+p.y*p.y+1.)+t);\n    float R =sin(.2*PI*v),G =cos(.75*PI*v),B =sin(.9*PI*v);\n\n    // restricted color palette (nice effect)\n    // code by McRam (https://www.shadertoy.com/view/ld2XRG)\n    R = ceil(R*255. /  8.) *  8. / 256.;\n    G = ceil(G*255. / 16.) * 16. / 256.;\n    B = ceil(B*255. /  8.) *  8. / 256.;\n\n    if(mod(R,16.) < 1.) R =G*.5+.5;\n    vec3 col =vec3(R,G,B);\n\n    // grid\n    col *= 0.4 * 1./length( sin( 1.*.1 * gs*p.x ) );\n    col *= 0.8 * 1./length( sin( ar*.1 * gs*p.y ) );\n\n    // deinterlaced scanlines\n    col *= .33 * length( sin( 5. * p.y * gs ) );\n\n    col = clamp(col,vec3(.0),vec3(1.));   // safe range\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsBXzc","date":"1414338330","viewed":298,"name":"Plas.mAtrix","username":"joates","description":"a pulsing plasma with grid lines & deinterlace interference effect. Go fullscreen !! Pulsing can be switched on/off :D","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["pulse","plasma","matrix","acid"],"hasliked":0,"parentid":"","parentname":""}}