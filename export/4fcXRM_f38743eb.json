{"ver":"0.1","info":{"id":"4fcXRM","date":"1713704246","viewed":31,"name":"squares?","username":"mkundera","description":"squares","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["squares"],"hasliked":0,"parentid":"4fS3R1","parentname":"squares_"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pi = 3.14159;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float aspectratio = iResolution.y/iResolution.x;\n    \n    uv *= vec2(1.0, aspectratio);\n    \n    float sq_mask_1 = 0. ;\n    // TODO: use a sdf for square contours\n    \n    // n squares\n    for (float n = 0.; n < 15.; n += 1.){\n        vec2 orig_n = vec2(0.7+0.2*sin(n/15.*iTime), aspectratio*(0.8 + 0.2*cos(iTime*n/12.)));\n        \n        sq_mask_1 += smoothstep(0.01,0.006,length(uv.x - orig_n.x))*smoothstep(0.01, 0.006, length(uv.y - orig_n.y));\n    }\n    \n    float sq_mask_2 = 0. ;\n    \n    for (float n = 0.; n < 15.; n += 1.){\n        vec2 orig_n = vec2(0.2+0.2*cos(n/25.*iTime), aspectratio*(0.2 + 0.2*sin(iTime*n/22.)));\n        \n        sq_mask_2 += smoothstep(0.01,0.006,length(uv.x - orig_n.x))*smoothstep(0.01, 0.006, length(uv.y - orig_n.y));\n    }\n    \n    vec3 col = vec3(1.0)*sq_mask_1;\n    \n    col += sq_mask_2*vec3(1.0, 0.0, 0.0);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}