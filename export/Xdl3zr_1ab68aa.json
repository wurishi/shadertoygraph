{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// metaball by @h013\n\n\nfloat metaball(vec3 p, vec4 spr){\n\tfloat fv[5];\n\tfloat t = iTime;\n\tfv[0] = length(p - vec3(2.0 * sin(t), 0.0, 2.0 * cos(t)));\n\tfv[1] = length(p - vec3(4.0 * sin(t), sin(t), 2.0 * cos(t * 0.7)));\n\tfv[2] = length(p - vec3(1.0 * sin(t), 2.0 * cos(t * 1.3), 1.0 * cos(t)));\n\tfv[3] = length(p - vec3(4.0 * cos(t), 2.0 * cos(t * 1.3), 1.5 * cos(t)));\n\tfv[4] = length(p - vec3(0.5 * sin(t * 0.2), 2.0 * cos(t * 1.6), 0.5 * sin(t)));\n\tfloat len = 0.0;\n\tfloat fs = 1.0;\n\tfor (int i = 0; i < 5; i ++) {\n\t\tlen += fs / (fv[i] * fv[i]);\n\t}\n\tlen = min(16.0, len);\n\tlen = 1.0 - len;\n\treturn len;\n}\n\n\nmat4 getrotz(float angle) {\n\treturn mat4(cos(angle), -sin(angle), 0.0, 0.0,\n\t\t\t\tsin(angle),  cos(angle), 0.0, 0.0,\n\t\t\t\t0.0,         0.0, 1.0, 0.0,\n\t\t\t\t0.0,         0.0, 0.0, 1.0);\n}\nmat4 getrotx(float angle) {\n\treturn mat4(       1.0,         0.0, 0.0, 0.0,\n\t\t\t\t0.0, cos(angle), -sin(angle), 0.0,\n\t\t\t\t0.0, sin(angle), cos(angle), 0.0,\n\t\t\t\t0.0, 0.0, 0.0, 1.0);\n}\n\nfloat scene(vec3 p) {\n\tfloat angle = iTime;\n\tmat4 rotmat = getrotz(angle) * getrotx(angle * 0.5);\n\tvec4 q = rotmat * vec4(p, 0.0);\n\tfloat d = metaball(q.xyz,vec4(0.0, 0.0, 2.0 , 6.0));\n\treturn d;\n}\n\nvec3 getN(vec3 p){\n\tfloat eps=0.01;\n\treturn normalize(vec3(\n\t\tscene(p+vec3(eps,0,0))-scene(p-vec3(eps,0,0)),\n\t\tscene(p+vec3(0,eps,0))-scene(p-vec3(0,eps,0)),\n\t\tscene(p+vec3(0,0,eps))-scene(p-vec3(0,0,eps))\n\t));\n}\nfloat AO(vec3 p,vec3 n){\n\tfloat dlt=0.5;\n\tfloat oc=0.0,d=1.0;\n\tfor(float i=0.0;i<6.;i++){\n\t\toc+=(i*dlt-scene(p+n*i*dlt))/d;\n\t\td*=2.0;\n\t}\n\t\n\tfloat tmp = 1.0-oc;\n\treturn tmp;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat aspect = iResolution.y / iResolution.x;\n\tvec3 org = vec3(vec2(0.5, 0.5) - fragCoord.xy / iResolution.xy, -22.0);\n\torg.y *= aspect;\n\t\n\tvec3 camera_pos = vec3(0.0, 0.0, -23.0);\n\tvec3 dir = normalize(org - camera_pos);\n\tvec4 col = vec4(0.0, 0.0, 0.0, 1.0);\n\tvec3 p = org.xyz;\n\tfloat d, g;\n\t\n\tfor (int i = 0; i < 64; i++) {\n\t\td = scene(p.xyz) * 1.0;\n\t\tp = p + d * dir;\n\t}\n\t\n\t\n\tvec3 n=getN(p);\n\tfloat a=AO(p,n);\n\tvec3 s=vec3(0,0,0);\n\tvec3 lp[3],lc[3];\n\tlp[0]=vec3(4.0 * cos(iTime),0, 4.0 * sin(iTime));\n\tlp[1]=vec3(2,3,-18);\n\tlp[2]=vec3(4,-2,-24);  \n\tlc[0]=vec3(1.0,0.5,0.4);  \n\t\n\t\n\tfloat theta = acos(p.y / length(p));\n\tfloat phi = acos(p.x / length(p.xz)) + iTime;\n\tlc[1] = vec3(sin(iTime), cos(iTime), sin(iTime) * cos(iTime));\n\tlc[2]=vec3(0.2,1.0,0.5);\n\t\n\tfor(int i=0;i<3;i++){\n\t\tvec3 l,lv;\n\t\tlv=lp[i]-p;\n\t\tl=normalize(lv);\n\t\tvec3 r = reflect(-l, n);\n\t\tvec3 v = normalize(camera_pos - p);\n\t\tg=length(lv);\n\t\tg = (max(0.0,dot(l,n)) + pow(max(0.0, dot(r, v)), 2.0))/(g)*5.;\n\t\ts+=g*lc[i];\n\t}\n\tfloat fg=min(1.0,20.0/length(p-org));\n\tcol = vec4(s*a,1)*fg*fg;\n\tfragColor = col;\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xdl3zr","date":"1361779217","viewed":996,"name":"Metaballs (Blobs)","username":"hole","description":"3D Metaballs or Blobs :D","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""}}