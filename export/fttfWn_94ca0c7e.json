{"ver":"0.1","info":{"id":"fttfWn","date":"1662936261","viewed":30,"name":"Struct Based Ray Tracer","username":"artefox","description":"Struct Based Ray Tracer","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["structbasedraytracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct hitData {\n    float d;\n    vec3 n;\n    vec3 hit;\n    vec3 albedo;\n    float rough;\n    bool sky;\n};\n\n// Thanks to umsoea/georg240p for providing the sphere intersection https://www.youtube.com/watch?v=ZpsGVsv94zQ\nhitData sphere(hitData data, vec3 ro, vec3 rd, vec3 center, float radius, vec3 albedo, float rough) {\n    hitData nohit = hitData(10000.0, vec3(0.0, 1.0, 0.0), vec3(0.0), vec3(0.0), 0.0, true);\n\n    float len = dot(center - ro, rd);\n    float b = distance(ro + rd * len, center);\n    if (b > radius || distance(ro, center) <= radius) return nohit;\n\n    float a = sqrt(radius * radius - b * b);\n    float d = len - a;\n    if (d < 0.0) return nohit;\n\n    vec3 hit = ro + rd * d;\n    vec3 n = (hit - center) / radius;\n\n    return hitData(d, n, hit, albedo, rough, false);\n}\n\nhitData addSphere(hitData data,  vec3 ro, vec3 rd, vec3 center, float radius, vec3 albedo, float rough) {\n    hitData newData = sphere(data, ro, rd, center, radius, albedo, rough);\n    if (newData.d < data.d) data = newData;\n    return data;\n}\n\nhitData ray(vec3 ro, vec3 rd) {\n    hitData data = hitData(10000.0, vec3(0.0, 1.0, 0.0), vec3(0.0), vec3(0.0), 0.0, true);\n\n    data = addSphere(data, ro, rd, vec3(0.4, 0.5, 1.5), 0.5, vec3(1.0), 1.0);\n    data = addSphere(data, ro, rd, vec3(-0.3, 0.5, 2.0), 0.5, vec3(1.0), 1.0);\n    data = addSphere(data, ro, rd, vec3(0.0, -10000.0, 0.0), 10000.0, vec3(1.0), 1.0);\n\n    return data;\n}\n\nvec3 light(vec3 shade, hitData data, vec3 pos, float intensity, vec3 color) {\n    vec3 col;\n    vec3 vtol = pos - data.hit;\n    float ld = length(vtol);\n    vtol /= ld;\n\n    if (data.d < 10000.0) {\n        vec3 s = vec3(max(dot(data.n, vtol), 0.0) / (ld * ld));\n        col = (ray(data.hit, vtol).d > ld ? s : vec3(0.0)) * intensity * color;\n    }\n    \n    return col + shade;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float fov = 60.0;\n    float aspect = iResolution.x / iResolution.y;\n    vec2 uv = (2.0 * fragCoord / iResolution.xy - 1.0) * tan(radians(fov / 2.0));\n    uv.x *= aspect;\n\n    vec3 ro = vec3(0.0, 0.5, -2.0);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    \n    vec3 col;\n\n    // shoot ray and get hit data\n    hitData data = ray(ro, rd);\n\n    //vec3 lpos = vec3((2.0 * iMouse.xy / iResolution.xy - 1.0) * 4.0, -1.0);\n\n    vec3 shade = vec3(0.0);\n    \n    shade = light(shade, data, vec3(-1.0, 1.5, 0.0), 0.5, vec3(1.0, 0.6, 0.2));\n    shade = light(shade, data, vec3(2.0, 1.5, 0.5), 0.3, vec3(0.6, 0.5, 0.7));\n    \n    col = shade;\n\n    if (data.sky) col = mix(vec3(0.6, 0.7, 1.0), vec3(0.3, 0.4, 0.7), rd.y);\n    \n    // gamma\n    col = pow(col, vec3(0.4545));\n\n    // output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}