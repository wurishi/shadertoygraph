{"ver":"0.1","info":{"id":"DtXyWM","date":"1690792231","viewed":254,"name":"Information Process2","username":"altunenes","description":"Information Process2 :)\n\noriginal= https://www.shadertoy.com/view/ddjcRd (fork)  :octopusballoon:  :)\n\ninformation process 1:  :)\nhttps://www.shadertoy.com/view/dslyDH\n","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["neuron"],"hasliked":0,"parentid":"ddjcRd","parentname":"Mystic Formations"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DETAIL 55.0\n#define ANIMATION_SPEED 1.5\n#define BRIGHTNESS 0.2\n#define STRUCTURE_SMOOTHNESS 1.2\n#define SATURATION 0.31\n#define PI 3.14159\n\n//erot from @blackle: Rodrigues' rotation formula (no need 3d but I used anyway :P )\nvec3 erot(vec3 p, vec3 ax, float ro) {\n    return mix(dot(p,ax)*ax,p,cos(ro)) + sin(ro)*cross(ax,p);\n}\n\nvec3 hash(vec3 p) {\n  return fract(\n      sin(vec3(dot(p, vec3(1.0, 57.0, 113.0)), \n              dot(p, vec3(57.0, 113.0, 1.0)),\n               dot(p, vec3(113.0, 1.0, 57.0)))) *\n      2.5453);\n}\n\nvec3 voronoi3d(const in vec3 x) {\n  vec3 p = floor(x);\n  vec3 f = fract(x);\n\n  float id = 0.0;\n  vec2 res = vec2(2.0);\n  for (int k = -1; k <= 5; k++) {\n    for (int j = -1; j <= 1; j++) {\n      for (int i = -1; i <= 5; i++) {\n        vec3 b = vec3(float(i), float(j), float(k));\n        vec3 r = vec3(b) - f + hash(p + b);\n        float d = dot(r, r);\n\n        float cond = max(sign(res.x - d), 0.0);\n        float nCond = 1.0 - cond;\n\n        float cond2 = nCond * max(sign(res.y - d), 0.0);\n        float nCond2 = 1.0 - cond2;\n\n        id = (dot(p + b, vec3(1.0, 3.0, 1.0)) * cond) + (id * nCond);\n        res = vec2(d, res.x) * cond + res * nCond;\n\n        res.y = cond2 * d + nCond2 * res.y;\n      }\n    }\n  }\n\n  return vec3(sqrt(res), abs(id));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    float dist_squared = dot(p,p);\n    float S = 15.0;\n    \n    float a;\n    vec2 n,q;\n    vec3 rotatedP;\n\n    for(float j = 1.0; j++ < DETAIL;){\n      rotatedP = erot(vec3(p, 0.0), vec3(0.0, 0.0, 1.0), 5.0 + sin(iTime) * 0.01);\n      p = rotatedP.xy;\n      n = erot(vec3(n, 0.0), vec3(0.0, 0.0, 1.0), 5.0 + sin(iTime) * 0.01).xy;\n      q = p * S + iTime * ANIMATION_SPEED + sin(iTime * ANIMATION_SPEED - dist_squared * 0.0) * 2.0 + j + n;\n      a += dot(cos(q) / S, vec2(SATURATION));\n      n -= sin(q);\n      S *= STRUCTURE_SMOOTHNESS;\n    }\n    \n    float result = 0.15 * ((a + BRIGHTNESS) + a + a); \n\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 rotatedUv = erot(vec3(uv, 0.0), vec3(0.0, 0.0, 1.0), iTime * 0.1);\n    \n    \n    vec3 voronoi = voronoi3d(vec3(iTime -0.0, uv));\n    float final = pow(voronoi.r * 0.1, result * 30.0) * 1.5;\n\n    float phaseR = (cos(uv.x * 0.1 + iTime * 10.0) * 0.5 + 1.5) * 0.5;\n    float phaseG = (cos(uv.x * 0.8 + iTime * 10.0 + PI/3.0) * 0.5 + 2.5) * 0.5;\n    float phaseB = (cos(uv.x * 0.5 + iTime * 10.0 + 2.0*PI/3.0) * 0.5 + 0.5) * 0.5;\n\nfloat spike = sin(iTime);\n    vec3 spikeColor = vec3(\n        smoothstep(0.5, 1.0, cos(iTime + PI * 1.0)),\n        smoothstep(0.5, 1.0, sin(iTime + PI * 1.0)),\n        smoothstep(0.5, 1.0, cos(iTime + PI * 1.0))\n    );\n    float wave = sin(5.0 * iTime + rotatedUv.x * PI);\n\nvec3 neuronColor = vec3(\n    0.6 + 0.5 * sin(2.0 * iTime + wave),\n    0.6 + 0.5 * sin(2.0 * iTime + 2.0 * PI / 3.0 + 2.0 * wave),\n    0.6 + 0.5 * sin(2.0 * iTime + 4.0 * PI / 3.0 + 2.0 * wave)\n);\n\n    fragColor = vec4(\n        final * neuronColor + vec3(phaseR, phaseG, phaseB) * final * 0.8 + spike * spikeColor, \n        1.0);\n}","name":"Image","description":"","type":"image"}]}