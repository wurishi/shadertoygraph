{"ver":"0.1","info":{"id":"dlXXDH","date":"1674672940","viewed":174,"name":"Simple Colored Boids","username":"LoganOracio","description":"imma bird, KAKAWH KAKAWH","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["boidparticle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"uvec3 murmurHash31(uint src) {\n    const uint M = 0x5bd1e995u;\n    uvec3 h = uvec3(1190494759u, 2147483647u, 3559788179u);\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\n\n// 3 outputs, 1 input\nvec3 hash31(float src) {\n    uvec3 h = murmurHash31(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    vec3 color = vec3(0.0);\n    float len = 10.0;\n    for(int i = 0; i < NUMBER_OF_PARTICLES; i++)\n    {\n        len = length(uv-(texelFetch(iChannel0,ivec2(i,0),0).xy-vec2(iResolution.x/iResolution.y,1.0)));\n        color += hash31(float(i))*smoothstep(0.015,0.012,len);\n    }\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"uvec2 murmurHash22(uvec2 src) {\n    const uint M = 0x5bd1e995u;\n    uvec2 h = uvec2(1190494759u, 2147483647u);\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src.x; h *= M; h ^= src.y;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\n\n// 2 outputs, 2 inputs\nvec2 hash22(vec2 src) {\n    uvec2 h = murmurHash22(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(int(fragCoord.y)==0 && int(fragCoord.x)<NUMBER_OF_PARTICLES)\n    {\n        vec4 raw = texelFetch(iChannel0,ivec2(fragCoord),0);\n        vec2 pos = raw.xy;\n        vec2 vel = raw.zw;\n        if(iFrame==0)\n        {\n            pos = hash22(fragCoord)*2.0-1.0;\n            vel = 0.01*(hash22(fragCoord*2.0)*2.0-1.0);\n        }\n        for( int i = 0; i < NUMBER_OF_PARTICLES; i++)\n        {\n            if(i!=int(fragCoord.x))\n            {\n                vec4 data_target =  texelFetch(iChannel0,ivec2(i,0),0);\n                vec2 pos_target = data_target.xy;\n                vec2 vel_target = data_target.zw;\n                vec2 dir = pos_target-pos;\n                vel+= -0.003*normalize(dir)/pow(length(dir)+0.1,2.0);\n                vel += 0.003*normalize(dir)/(length(dir));\n                vel += 0.006*vel_target/pow(length(dir)*10.0+0.8,2.0);\n            }\n        }\n        vel = normalize(vel);\n        pos += 0.005*vel;\n        pos.y = mod(pos.y,2.0);\n        pos.x = mod(pos.x,2.0*iResolution.x/iResolution.y);\n        fragColor = vec4(pos,vel);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUMBER_OF_PARTICLES 200","name":"Common","description":"","type":"common"}]}