{"ver":"0.1","info":{"id":"ftKXWR","date":"1640491227","viewed":59,"name":"RayMarchingSphereTest","username":"tarunrx","description":"Followed Art of code's tutorial to get this :)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DISTANCE 100.0f\n#define MIN_HIT_DISTANCE 0.01\n\nfloat GetDist(vec3 pos)\n{\n    vec4 sphere = vec4(0, 1, 6, 1);\n    float sphereDist = length(pos - sphere.xyz) - sphere.w;\n    float planeDist = pos.y;\n    \n    float d = min(sphereDist, planeDist);\n    if (d == sphereDist)\n    return d + d * sin(iTime);\n    \n    return d;\n}\n\nvec3 GetNormal(vec3 p)\n{\n    float d = GetDist(p);\n    \n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n\n    return normalize(n);\n}\n\n\nfloat RayMarch(vec3 rayOrigin, vec3 rayDirection)\n{\n    float distFromOrigin = 0.0f;\n    \n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 currentMarchPos = rayOrigin + rayDirection * distFromOrigin;\n        float distToScene = GetDist(currentMarchPos);\n        distFromOrigin += distToScene;\n        \n        if (distFromOrigin > MAX_DISTANCE || distFromOrigin < MIN_HIT_DISTANCE)\n        {\n            break;\n        }\n    }\n    \n    return distFromOrigin;\n}\n\n\nfloat GetLight(vec3 p)\n{\n    vec3 lightPos = vec3(0, 5, 6);\n \n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.0f;\n    \n    vec3 lightVector = normalize(lightPos - p);\n    vec3 normal = GetNormal(p);\n    \n    float diff = clamp(dot(lightVector, normal), 0.0f, 1.0f);\n    \n    float d = RayMarch(p + normal * MIN_HIT_DISTANCE * 2.0f, lightVector);\n    if (d < length(lightVector - p))\n    {\n        diff *= 0.1f;\n    }\n \n    return diff;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // center uv to middle of screen\n    vec2 uv = (fragCoord - 0.5f * iResolution.xy) /iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 cameraPosition = vec3(0.0f, 1.0f, 0.0f);\n    vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0f));\n\n    float d = RayMarch(cameraPosition, rayDirection);\n\n    vec3 p = cameraPosition + rayDirection * d;\n    \n    float diffuse = GetLight(p);\n    \n    col = vec3(diffuse);\n   \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}