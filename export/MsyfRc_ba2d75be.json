{"ver":"0.1","info":{"id":"MsyfRc","date":"1530629883","viewed":197,"name":"Flying through a 3D-noise world","username":"Veggiebob","description":"use mouse to look around. If you find yourself going slowly, try to clip through a wall (you probably just started inside one).","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["3d","noise","mouse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//another hash function by Dave_Hoskins https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE1 .1031\n#define threshold 0.2\n#define EPSILON pow(10., -2.)\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat cosmix(float b, float a, float x) {\n\treturn a+(b-a)*(cos(x*3.14)+1.0)/2.0;\n}\n\nfloat noise3d(vec3 pos) {\n\tvec3 flo = vec3(floor(pos.x),floor(pos.y),floor(pos.z));\n\tfloat x0y0z0 = hash13(vec3(flo.x,    flo.y,    flo.z    ));\n\tfloat x1y0z0 = hash13(vec3(flo.x+1.0,flo.y,    flo.z    ));\n\tfloat x0y1z0 = hash13(vec3(flo.x,    flo.y+1.0,flo.z    ));\n\tfloat x1y1z0 = hash13(vec3(flo.x+1.0,flo.y+1.0,flo.z    ));\n\tfloat x0y0z1 = hash13(vec3(flo.x,    flo.y,    flo.z+1.0));\n\tfloat x1y0z1 = hash13(vec3(flo.x+1.0,flo.y,    flo.z+1.0));\n\tfloat x0y1z1 = hash13(vec3(flo.x,    flo.y+1.0,flo.z+1.0));\n\tfloat x1y1z1 = hash13(vec3(flo.x+1.0,flo.y+1.0,flo.z+1.0));\n\tfloat a =  cosmix(x0y0z0,x1y0z0, pos.x-flo.x);\n\tfloat b =  cosmix(x0y1z0,x1y1z0, pos.x-flo.x);\n\tfloat a1 = cosmix(a,b,pos.y-flo.y);\n\tfloat a2 = cosmix(x0y0z1,x1y0z1, pos.x-flo.x);\n\tfloat b2 = cosmix(x0y1z1,x1y1z1, pos.x-flo.x);\n\tfloat b1 = cosmix(a2,b2,pos.y-flo.y);\n\treturn     cosmix(a1,b1,pos.z-flo.z);\n}\n//some noise 3d\nvec3 SDF (vec3 p){\n    return vec3(noise3d(p)-threshold, 0., 0.);\n}\n//Credit to Jamie Wong http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/#surface-normals-and-lighting\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        SDF(vec3(p.x + EPSILON, p.y, p.z)).x - SDF(vec3(p.x - EPSILON, p.y, p.z)).x,\n        SDF(vec3(p.x, p.y + EPSILON, p.z)).x - SDF(vec3(p.x, p.y - EPSILON, p.z)).x,\n        SDF(vec3(p.x, p.y, p.z  + EPSILON)).x - SDF(vec3(p.x, p.y, p.z - EPSILON)).x\n    ));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float tx = uv.x;\n    uv-=0.5;\n    uv.x*=iResolution.x/iResolution.y;\n    uv*=2.;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    mouse-=0.5;\n    mouse*=7.;\n    vec3 camera = texture(iChannel0, vec2(0.)).xyz;//this is to get the player position\n    vec3 ray = vec3(cos(uv.x+mouse.x), uv.y+mouse.y, sin(uv.x+mouse.x));\n    ray = normalize(ray);\n    vec3 col = vec3 (0.);\n    \n    vec3 p = vec3(0.);\n    float t = 0.;\n    float th = threshold+0.5*(noise3d(camera)-threshold);\n    for(int i = 0; i<32; i++){\n        p = camera+ray*t;\n    \tfloat d = noise3d(p)-th;\n        //if(uv.x>0.)d=noise3d(p)-th;else d=texture(iChannel2, p).r+0.5-threshold;\n        t+=d*1.5;\n    }\n    vec3 normal = estimateNormal(p);\n    col+=dot(-ray, normal)*0.3;\n    col += texture(iChannel1, p.xz+iTime*0.02).rgb*0.4;\n    col += texture(iChannel1, p.xy-iTime*0.02+3.).rgb*0.4;    //overlays the texture on all 3 planes to get rid of weird stretched lines\n    col += texture(iChannel1, p.yz+101.).rgb*0.2;\n    col.g*=col.g*1.5;\n    col.b*=0.9;\n    col.r*=col.r;\n    float n = noise3d(p*5.);\n    float fog = 1.0 / (1.0 + t*t*0.2);\n    col*=fog;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define HASHSCALE1 .1031\n#define threshold 0.2\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat cosmix(float b, float a, float x) {\n\treturn a+(b-a)*(cos(x*3.14)+1.0)/2.0;\n}\n\nfloat noise3d(vec3 pos) {\n\tvec3 flo = vec3(floor(pos.x),floor(pos.y),floor(pos.z));\n\tfloat x0y0z0 = hash13(vec3(flo.x,    flo.y,    flo.z    ));\n\tfloat x1y0z0 = hash13(vec3(flo.x+1.0,flo.y,    flo.z    ));\n\tfloat x0y1z0 = hash13(vec3(flo.x,    flo.y+1.0,flo.z    ));\n\tfloat x1y1z0 = hash13(vec3(flo.x+1.0,flo.y+1.0,flo.z    ));\n\tfloat x0y0z1 = hash13(vec3(flo.x,    flo.y,    flo.z+1.0));\n\tfloat x1y0z1 = hash13(vec3(flo.x+1.0,flo.y,    flo.z+1.0));\n\tfloat x0y1z1 = hash13(vec3(flo.x,    flo.y+1.0,flo.z+1.0));\n\tfloat x1y1z1 = hash13(vec3(flo.x+1.0,flo.y+1.0,flo.z+1.0));\n\tfloat a =  cosmix(x0y0z0,x1y0z0, pos.x-flo.x);\n\tfloat b =  cosmix(x0y1z0,x1y1z0, pos.x-flo.x);\n\tfloat a1 = cosmix(a,b,pos.y-flo.y);\n\tfloat a2 = cosmix(x0y0z1,x1y0z1, pos.x-flo.x);\n\tfloat b2 = cosmix(x0y1z1,x1y1z1, pos.x-flo.x);\n\tfloat b1 = cosmix(a2,b2,pos.y-flo.y);\n\treturn     cosmix(a1,b1,pos.z-flo.z);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if(uv.x<0.01&&uv.y<0.01){\n        vec2 mouse = iMouse.xy/iResolution.xy-0.5;\n        mouse*=7.;\n        vec3 prev = texture(iChannel0, vec2(0., 0.)).rgb;//setting player position\n        vec3 next = vec3(cos(mouse.x)*0.01, sin(mouse.y)*0.02, sin(mouse.x)*0.01);\n        float checkDist = 5.;\n        vec3 check = vec3(-0.1);\n        if(noise3d(prev+vec3(next.x, 0., 0.)*checkDist)>threshold){\n            check.x = 1.;\n        }\n        if(noise3d(prev+vec3(0., next.y, 0.)*checkDist)>threshold){\n            check.y = 1.;\n        }\n        if(noise3d(prev+vec3(0., 0., next.z)*checkDist)>threshold){\n            check.z = 1.;\n        }\n        prev+=next*check;\n        fragColor = vec4(prev, 1.0);\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}