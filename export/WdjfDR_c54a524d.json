{"ver":"0.1","info":{"id":"WdjfDR","date":"1589837446","viewed":177,"name":"background filter for whitewalls","username":"sidchou","description":"background filter, work best for whitewalls\n","likes":2,"published":1,"flags":34,"usePreview":0,"tags":["filter","camera","background"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0,uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//vec4 BGColor = vec4(.9,.59,.9,1.);\nvec4 BGColor = vec4(.9,.8,.9,1.);\nvec4 BGColorOffset; \n//vec4 BGColor = vec4(.8,.7,.3,1.);\nvec4 sat = vec4(.8,.8,.8,1.);\nvec4 brightness = vec4(.3,.3,.3,0.);\nvec4 Rgb2Hsb (vec4 _color) {\n    vec4 color = _color;\n    color /= 255.0;   \n    vec4 hsb = _color;\n\n    \n    float maxColorValue = max (color.r, max (color.g, color.b) );\n    float minColorValue = min (color.r, min(color.g, color.b) );\n    float delta = maxColorValue - minColorValue;\n    \n    hsb.b = maxColorValue;\n    hsb.g = (maxColorValue == 0.0) ? 0.0 : delta / maxColorValue;\n    \n    if (hsb.g == 0.0)\n        return color;\n    \n    if (color.r == maxColorValue)\n\t\thsb.r = (color.g - color.b) / delta;\n\telse if (color.g == maxColorValue)\n\t\thsb.r = 2.0 + (color.b - color.r) / delta;\n\telse if (color.b == maxColorValue)\n\t\thsb.r = 4.0 + (color.r - color.g) / delta;\n\n\thsb.r *= 60.0;\n\n\tif (hsb.r < 0.0)\n\t\thsb.r += 360.0;\n\treturn hsb;\n}\n\nvec4 Hsb2Rgb (vec4 _hsb) {\n    vec4 hsb = _hsb;\n    vec4 rgb;\n    \n    if (hsb.g == 0.0) \n    \treturn hsb;\n    else {\n        float f; float p; float q; float t; int i;\n\n        if (hsb.r == 360.0)\n            hsb.r = 0.0;\n        else if (hsb.r > 360.0)\n            hsb.r -= 360.0;\n        hsb.r /= 60.0;\n    \n        i = int(hsb.r);\n\n        f = hsb.r - float(i);\n        p = hsb.b * (1.0 - hsb.g);\n        q = hsb.b * (1.0 - hsb.g*f);\n        t = hsb.b * (1.0 - hsb.g*(1.0 - f));\n        \n        \n        if (i == 0) {\n            rgb.r=hsb.b;\n            rgb.g=t;\n            rgb.b=p;\n        } else if (i==1) {\n            rgb.r=q;\n            rgb.g=hsb.b;\n            rgb.b=p;\n        } else if (i==2) {\n            rgb.r=p;\n            rgb.g=hsb.b;\n            rgb.b=t; \n        } else if (i==3) {\n            rgb.r=p;\n            rgb.g=q;\n            rgb.b=hsb.b;\n        } else if (i==4) {\n            rgb.r=t;\n            rgb.g=p;\n            rgb.b=hsb.b;\n        } else if (i==5) {\n            rgb.r=hsb.b;\n            rgb.g=p;\n            rgb.b=q;\n        } \n    }\n    \n   \treturn rgb*255.0;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iMouse.z > 0.5){\n        BGColor.rg = iMouse.xy/iResolution.xy;\n    }//else{BGColor.ba = iMouse.xy/iResolution.xy;}\n    \n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 lastframe = texture(iChannel1,uv);\n    vec4 cam = texture(iChannel0,uv);\n    //cam = mix(cam,lastframe,0.5);\n\tuv-=0.5;\n    uv.x*=iResolution.x/iResolution.y;\n    vec4 detect = cam;\n    \n    vec4 len = vec4(length(uv));\n    detect += 2.*len*len*len;\n    vec4 hsb = Rgb2Hsb(detect);\n    hsb +=vec4(29.,.5,.0,0.);\n    vec4 col = Hsb2Rgb(hsb);\n    float _d = step(col.r,BGColor.r)*step(col.g,BGColor.g)*step(col.b,BGColor.b);\n    detect = step(col,BGColor);\n    cam *= _d;   \n    //cam = step(0.1,cam - cam*step(cam.r*cam.g*cam.b,0.05))+cam;\n    \n\n    //len = step(0.5,len);\n  \t//fragColor = col;\n    //fragColor = step(col,BGColor)*col;\n    //fragColor = vec4(_d);\n    //fragColor = step(0.,uv.x)*fragColor+step(uv.x,0.)*BGColor;\n    fragColor = cam;\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}