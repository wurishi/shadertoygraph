{"ver":"0.1","info":{"id":"4XKSWw","date":"1720029391","viewed":45,"name":"Perlin Gradent Fade","username":"L1x3N","description":"Inspired by this Earthbound effect : https://www.youtube.com/watch?v=mTDrB32ZCXM\nFeel free to tweak the const values to change the result, most notably COLORS_VALUES, NO_BACKGROUND_VERSION and PERLIN_SCALE","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["perlin","gradient","endless","fade","seamless"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3[] COLORS_VALUES = vec3[](vec3(0), vec3(0), vec3(0.415, 0.042, 0.342), vec3(0.746, 0.671, 0.396), vec3(0.416, 0.280, 0.593), vec3(0));\nconst float[] COLORS_POS = float[](0., 10. / 100., 25. / 100., 55. / 100., 85. / 100., 1.);\n\nconst bool GRADIENT_BLEND_MODE = true;\nconst bool ASPECT_RATIO = true;\n\nconst float SCROLL_SPEED_X = 0.25f;\nconst float SCROLL_SPEED_Y = - 0.3f;\nconst float PERLIN_SCALE = 9.5f;\nconst float PERLIN_STRENGTH = 2.25f;\nconst float GRADIENT_SPEED = - 0.45f;\n\nconst float FADE_SPEED = 0.5f;\nconst bool NO_BACKGROUND_VERSION = false;\n\nvec2 randomGradient(vec2 p) {\n\tp = p + 0.1f;\n\tfloat x = dot(p, vec2(139.9, 364.5));\n\tfloat y = dot(p, vec2(452.1, 983.6));\n\tvec2 gradient = sin(vec2(x, y)) * 26435.799f;\n\n\treturn sin(gradient + iTime * GRADIENT_SPEED);\n}\n\nfloat getPerlinNoise(vec2 uv) {\n\tvec2 gridUv = fract(uv * PERLIN_SCALE), gridId = floor(uv * PERLIN_SCALE);\n\n\tfloat scBg = dot(randomGradient(gridId), gridUv);\n\tfloat scBd = dot(randomGradient(gridId + vec2(1, 0)), gridUv - vec2(1, 0));\n\tfloat scHg = dot(randomGradient(gridId + vec2(0, 1)), gridUv - vec2(0, 1));\n\tfloat scHd = dot(randomGradient(gridId + vec2(1, 1)), gridUv - vec2(1, 1));\n\n\tgridUv = smoothstep(0., 1., gridUv);\n\treturn mix(mix(scBg, scBd, gridUv.x), mix(scHg, scHd, gridUv.x), gridUv.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord / iResolution.xy;\n\tuv = vec2(uv.x + iTime / 4. * SCROLL_SPEED_X, uv.y + iTime / 4. * SCROLL_SPEED_Y);\n\tif(ASPECT_RATIO)\n\t\tuv.x *= iResolution.x / iResolution.y;\n\n\tfloat perlin = getPerlinNoise(uv);\n\tperlin = fract(perlin * PERLIN_STRENGTH);\n\n\tfloat smoothPerlin = fract(smoothstep(0.5, 0., perlin) + fract(iTime / 2. * FADE_SPEED));\n\tif(NO_BACKGROUND_VERSION)\n\t\tsmoothPerlin *= fract(smoothstep(0.5, 0., perlin));\n\n\tvec3 myColor;\n\n\tint colorPosIndex;\n\tfor(colorPosIndex = 0; colorPosIndex < (COLORS_POS.length()); colorPosIndex ++) {\n\t\tif(fract(smoothPerlin) < COLORS_POS[colorPosIndex])\n\t\t\tbreak;\n\t}\n\n\tif(GRADIENT_BLEND_MODE) {\n\t\tfloat colorUv = (fract(smoothPerlin) - COLORS_POS[colorPosIndex - 1]) / (COLORS_POS[colorPosIndex] - COLORS_POS[colorPosIndex - 1]);\n\t\tmyColor = mix(COLORS_VALUES[colorPosIndex - 1], COLORS_VALUES[colorPosIndex], colorUv);\n\t} else {\n\t\tmyColor = COLORS_VALUES[colorPosIndex];\n\t}\n\n\t// myColor = vec3(smoothPerlin);\n\n\tfragColor = vec4(myColor, 1);\n}","name":"Image","description":"","type":"image"}]}