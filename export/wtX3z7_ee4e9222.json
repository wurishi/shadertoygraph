{"ver":"0.1","info":{"id":"wtX3z7","date":"1555945874","viewed":70,"name":"Movimiento horizontal","username":"lenkobeta","description":"Mi primer shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["begginer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159;\n\n// Las posiciones horizontales van de -0.5 a 0.5\n// las verticales en proporción\n// Los Gap son la diferencia máxima del movimiento\n// o cambio de color sobre la base\n// Los Ticks son el tiempo en segundos para realizar \n// un movimiento o cambio de color\n\nconst float LINE_H_POS = -0.3; // Posición horizontal inicial de la línea\nconst float LINE_H_GAP = 0.4;  // Diferencia \nconst float LINE_TICK = 2.0; // Tiempo de la transición de la línea\nconst vec3  L_COLOR = vec3(0.3, 0.3, 0.3); // Color izquierda\nconst vec3  L_COLOR_GAP = vec3(0.1, 0.9, 0.05);\nconst vec3  L_COLOR_TICK = vec3(1.3, 2.5, 5.0);\nconst vec3  R_COLOR = vec3(0.5, 0.85, 0.15);  // Color derecha\nconst vec3  R_COLOR_GAP = vec3(0.3, 0.05, 0.83);\nconst vec3  R_COLOR_TICK = vec3(0.8, 2.1, 1.4);\nconst vec2  CIRCLE_POS = vec2(0.0, 0.0); // Posición del círculo\nconst vec3  CIRCLE_COLOR = vec3(0.9, 0.9, 0.9); // Color del círculo\nconst vec3  CIRCLE_COLOR_GAP = vec3(0.05, 0.05, 0.05);\nconst vec3  CIRCLE_COLOR_TICK = vec3(0.5, 0.3, 0.7);\nconst float CIRCLE_RAD = 0.5; // Radio del círculo\nconst float CIRCLE_RAD_GAP = 0.3;\nconst float CIRCLE_RAD_TICK = 3.4;\nconst float BLUR = 0.04; // Zona de difuminado\nconst float BLUR_GAP = 0.035;\nconst float BLUR_TICK = 5.0;\n\n\nfloat i1(float base, float gap, float tick) {\n    return sin(iTime * PI / tick) * gap + base;\n}\n\nvec3 i3(vec3 base, vec3 gap, vec3 tick) {\n    return sin(iTime * PI / tick) * gap + base;\n}\n\nvec3 pos_with_blur(float pos, float blur, float var, vec3 color_ok, vec3 color_fail) {\n    float m = smoothstep(pos - blur, pos + blur, var);\n    return mix(color_ok, color_fail, m);    \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {   \n    vec2 r = 2.0 * vec2(fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Calculamos el cambio de cada parámetro\n    float line_calc = i1(LINE_H_POS, LINE_H_GAP, LINE_TICK);    \n    vec3 l_color_calc = i3(L_COLOR, L_COLOR_GAP, L_COLOR_TICK);\n    vec3 r_color_calc = i3(R_COLOR, R_COLOR_GAP, R_COLOR_TICK);\n    float circle_rad_calc = i1(CIRCLE_RAD, CIRCLE_RAD_GAP, CIRCLE_RAD_TICK);\n    vec3 circle_color_calc = i3(CIRCLE_COLOR, CIRCLE_COLOR_GAP, CIRCLE_COLOR_TICK);\n\tfloat blur_calc = i1(BLUR, BLUR_GAP, BLUR_TICK);\n    \n    // Calculamos el color del píxel\n    // Línea\n    vec3 pixel = pos_with_blur(line_calc, blur_calc, r.x, r_color_calc, l_color_calc);  \n    // Círculo\n\tpixel = pos_with_blur(circle_rad_calc, blur_calc, length(r - CIRCLE_POS), circle_color_calc, pixel);\n    \n    fragColor = vec4(pixel, 1.0);\n}","name":"Image","description":"","type":"image"}]}