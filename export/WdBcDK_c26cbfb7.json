{"ver":"0.1","info":{"id":"WdBcDK","date":"1588866453","viewed":58,"name":"CIS461: Cornell-Box_RayKim","username":"raykim1996","description":"Re-making a Cornell Box for practice","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cis461"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float FOVY = 3.14159 * 0.25;\nconst int RAY_STEPS = 256;\nconst vec3 matteWhite = vec3(0.85, 0.81, 0.78);\nconst vec3 matteRed = vec3(0.63, 0.065, 0.05);\nconst vec3 matteGreen = vec3(0.14, 0.45, 0.091);\nconst vec3 lightPos = vec3(0.0, 6.5, -1.5);\n\n//Intersection\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object; // unique ID for every object\n};    \n\n// Box with side lengths b\nfloat cube(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\n// SquarePlane SDF\nfloat plane(vec3 p, vec4 n)\n{\n    n = normalize(n);\n    return dot(p, n.xyz) + n.w;\n}\n\n// Sphere with radius r at center c\nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat sdPyramid( vec3 p, float h)\n{\n  float m2 = h*h + 0.25;\n    \n  p.xz = abs(p.xz);\n  p.xz = (p.z>p.x) ? p.zx : p.xz;\n  p.xz -= 0.5;\n\n  vec3 q = vec3( p.z, h*p.y - 0.5*p.x, h*p.x + 0.5*p.y);\n   \n  float s = max(-q.x,0.0);\n  float t = clamp( (q.y-0.5*p.z)/(m2+0.25), 0.0, 1.0 );\n    \n  float a = m2*(q.x+s)*(q.x+s) + q.y*q.y;\n  float b = m2*(q.x+0.5*t)*(q.x+0.5*t) + (q.y-m2*t)*(q.y-m2*t);\n    \n  float d2 = min(q.y,-q.x*m2-q.y*0.5) > 0.0 ? 0.0 : min(a,b);\n    \n  return sqrt( (d2+q.z*q.z)/m2 ) * sign(max(q.z,-p.y));\n}\n\nfloat sdSolidAngle(vec3 p, vec2 c, float ra)\n{\n  // c is the sin/cos of the angle\n  vec2 q = vec2( length(p.xz), p.y );\n  float l = length(q) - ra;\n  float m = length(q - c*clamp(dot(q,c),0.0,ra) );\n  return max(l,m*sign(c.y*q.x-c.x*q.y));\n}\n\n#define BACK_WALL 0\n#define LEFT_WALL 1\n#define RIGHT_WALL 2\n#define CEILING 3\n#define FLOOR 4\n#define LONG_CUBE 5\n#define SHORT_CUBE 6\n#define HEAD 7\n#define BACK_WALL_SDF plane(pos, vec4(0.0, 0.0, -1.0, 5.0))\n#define LEFT_WALL_SDF plane(pos, vec4(1.0, 0.0, 0.0, 5.0))\n#define RIGHT_WALL_SDF plane(pos, vec4(-1.0, 0.0, 0.0, 5.0))\n#define CEILING_SDF plane(pos, vec4(0.0, -1.0, 0.0, 7.5))\n#define FLOOR_SDF plane(pos, vec4(0.0, 1.0, 0.0, 2.5))\n#define LONG_CUBE_SDF cube(rotateY(pos + vec3(2, 0, -3), 27.5 * 3.14159 / 180.0), vec3(1.5, 3, 1.5))\n#define SHORT_CUBE_SDF cube(rotateY(pos + vec3(-2, 1, -0.75), -17.5 * 3.14159 / 180.0), vec3(1.5, 1.5, 1.5))\n#define headSphere sphere(vec3(1.0, 1.0, 0.0), 2.0, vec3(0.0))\n\nvec3 rotateY(vec3 p, float a)\n{\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);   \n}\n\n// function to create whole scene\nvoid sceneMap3D(vec3 pos, out float t, out int obj)\n{\n    t = BACK_WALL_SDF;\n    obj = BACK_WALL;\n    \n    float t2;\n    if ((t2 = LEFT_WALL_SDF) < t) {\n        t = t2;\n        obj = LEFT_WALL;\n    }\n    if ((t2 = RIGHT_WALL_SDF) < t) {\n        t = t2;\n        obj = RIGHT_WALL;\n    }\n    if ((t2 = CEILING_SDF) < t) {\n        t = t2;\n        obj = CEILING;\n    }\n    if ((t2 = FLOOR_SDF) < t) {\n        t = t2;\n        obj = FLOOR;\n    }\n    if ((t2 = LONG_CUBE_SDF) < t) {\n        t = t2;\n        obj = LONG_CUBE;\n    }\n    if ((t2 = SHORT_CUBE_SDF) < t) {\n        t = t2;\n        obj = SHORT_CUBE;\n    }\n    if ((t2 = headSphere) < t) {\n        t = t2;\n        obj = HEAD;\n    }\n    \n}\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t = BACK_WALL_SDF;\n    \n    float t2;\n    if ((t2 = LEFT_WALL_SDF) < t) {\n        t = t2;\n    }\n    if ((t2 = RIGHT_WALL_SDF) < t) {\n        t = t2;\n    }\n    if ((t2 = CEILING_SDF) < t) {\n        t = t2;\n    }\n    if ((t2 = FLOOR_SDF) < t) {\n        t = t2;\n    }\n    if ((t2 = LONG_CUBE_SDF) < t) {\n        t = t2;\n    }\n    if ((t2 = SHORT_CUBE_SDF) < t) {\n        t = t2;\n    }\n    return t;\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj)\n{\n    t = 0.001;\n    for (int i = 0; i < RAY_STEPS; ++i) {\n        vec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, hitObj);\n        if (m < 0.001) {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec, vec3 view)\n{\n    float lambert = dot(lightVec, n);\n    switch(hitObj) {\n        case BACK_WALL:\n        return matteWhite * lambert;\n        break;\n        case LEFT_WALL:\n        return matteRed * lambert;\n        break;\n        case RIGHT_WALL:\n        return matteGreen * lambert;\n        break;\n        case CEILING:\n        return matteWhite * lambert;\n        break;\n        case FLOOR:\n        return matteWhite * lambert;\n        break;\n        case LONG_CUBE:\n        return matteWhite * lambert;\n        break;\n        case SHORT_CUBE:\n        return matteWhite * lambert;\n        break;\n        case -1:\n        return vec3(0, 0, 0) * lambert;\n        break;\n    }\n    return vec3(0, 0, 0) * lambert;\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize(vec3(sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                         sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                         sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n    \n    vec3 isect = eye + (t * dir);\n    \n    vec3 nor = computeNormal(isect);\n    vec3 lightDir = normalize(lightPos - isect);\n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));\n    \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\n// Returns direction of ray\nvec3 rayCast(vec3 eye, vec3 ref, vec2 ndc)\n{\n    vec3 F = ref - eye;\n    vec3 R = normalize(cross(vec3(0, 1, 0), F));\n    vec3 U = normalize(cross(R, -F));\n    \n    vec3 V = U * length(F) * tan(FOVY * 0.5);\n    vec3 H = R * length(F) * tan(FOVY * 0.5) * float(iResolution.x) / iResolution.y;\n    \n    vec3 p = ref + ndc.x * H + ndc.y * V;\n    \n    return normalize(p - eye);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Convert range to [-1, 1]\n    uv = uv * 2.0 - vec2(1.0, 1.0);\n    \n    vec3 eye = vec3(0, 3.5, -15);\n    vec3 ref = vec3(0, 2.5, 0);\n    \n    vec3 rayDir = rayCast(eye, ref, uv);\n    \n    Intersection isect = sdf3D(rayDir, eye);\n    \n    fragColor = vec4(isect.color, 1.0);\n}","name":"Image","description":"","type":"image"}]}