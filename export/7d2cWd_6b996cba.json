{"ver":"0.1","info":{"id":"7d2cWd","date":"1644356036","viewed":161,"name":"Sparkling lights","username":"Dubswitcher","description":"Wasn't actually aiming for anything when I started making this. Pretty much a result of randomly playing with code.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["test","background","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.14159265;\n\nvec2 findRatio (in vec2 res) {\n    vec2 r = res;\n    float gcf;\n    for(float i = 1.; i <= r.x && i <= r.y; ++i)  \n    {  \n        if (mod(r.x,float(i)) == 0. && mod(r.y,float(i)) == 0.)  \n            gcf = float(i);\n    }\n    r /= gcf;\n    return r;\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat hash (in vec2 uv) {\n    vec3 p = vec3(\n    dot(uv.xy,vec2(123.,456.)),\n    dot(uv.xy,vec2(789.,112.)),\n    dot(uv.xy,vec2(345.,678.))\n    );\n    p = fract(sin(p*10.)*5000.);\n    return fract(dot(p,vec3(987.,654.,321.)));\n}\n\nvec3 part(in vec2 pos, in vec3 move, in float ratio)\n{    \n    // Generate central point gradient\n    vec2 center = pos - vec2(0.5, ratio);\n    \n    float p = sqrt(pow(center.x,2.)+pow(center.y,2.));    \n    p = pow((1.-p),50.)*2000.;\n    \n    // Generate orbiting spherical gradient\n    vec2 circ = vec2(sin(iTime*pi*move.x),cos(iTime*pi*move.y))/10.;\n    float d = sqrt(pow(circ.x,2.)+pow(circ.y,2.))*20.;\n    \n    vec2 sphere = pos - vec2(0.5 + circ.x, ratio + circ.y);\n    float o = sqrt(pow(sphere.x,2.)+pow(sphere.y,2.))/(30.*d);\n    //\n    \n    p = p*o+d;    \n    vec3 col = vec3(1.,0.,0.);\n    col = rgb2hsv(col);\n    col.x = p/2.+(iTime*move.z);\n    col.y = 0.2;\n    col.z = p-3.;\n    col = hsv2rgb(col);\n    \n    return clamp(col,0.,1.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 res = iResolution.xy;\n    vec2 r = findRatio(res);\n    float ratio = r.y/r.x/2.;\n    \n    vec2 uvp = (fragCoord/res.xx)*8.-2.;\n    uvp.x-=1.5;\n    \n    vec3 col = part(uvp,vec3(0.39,0.74,1.),ratio);\n    \n    for (vec2 i = vec2(0.,1.); i.x < 630.; i += vec2(3.)) {\n        col += part(uvp + (vec2(hash(i+0.2)*2.-0.5,hash(i-0.2))-0.5)*6.,\n            vec3(hash(vec2(i)),hash(vec2(i)-1.),hash(vec2(i)+1.)),ratio);\n    }\n    \n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}