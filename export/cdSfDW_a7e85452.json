{"ver":"0.1","info":{"id":"cdSfDW","date":"1689694398","viewed":56,"name":"Diffusion Figure Eight","username":"thedarkbunny","description":"Playing with multi-pass diffusion and different fade rates.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["diffusion","practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//it just grabs from the buffer\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;   \n    fragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//#define DROP 0.99\n//#define DIFF_RATE 0.9\n#define DROP vec4(0.97,0.98,0.99,1.)\n#define DIFF_RATE vec4(0.3,0.6,0.9,1.)\n\n\n\nvec4 laplacian(in sampler2D buf, in vec2 target, in vec2 shift){\n    vec2 xr = shift*vec2(1.,0.);\n    vec2 yr = shift*vec2(0.,1.);\n    \n    vec4 lap = -texture(buf,target);\n    lap += (\n                    texture(buf,target+xr) +\n                    texture(buf,target-xr) +\n                    texture(buf,target+yr) +\n                    texture(buf,target-yr)\n                )*.2;\n    lap += (\n                    texture(buf,target+xr+yr) +\n                    texture(buf,target+xr-yr) +\n                    texture(buf,target-xr+yr) +\n                    texture(buf,target-xr-yr)\n                )*.05;\n    return lap;\n}\n\n\n\n\nfloat pattern_dist(vec2 ref, float time)\n{\n    vec2 p = vec2(sin(time)*2.,sin(time*2.)) * 0.4;\n    float vel = length(vec2(cos(time)*2.,cos(time*2.)*2.));\n    \n    float inv_d = 1./(length(p-ref)+1.);\n    return smoothstep(1.-0.09/vel,1.,inv_d);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uva = (fragCoord - iResolution.xy*0.5)/min(iResolution.x,iResolution.y);\n    vec2 uvb = fragCoord/iResolution.xy;\n    \n    vec4 old_px = texture(iChannel0,uvb);\n    vec4 diffuse_px = laplacian(iChannel0,uvb,1./iResolution.xy);\n    \n    vec4 new_px = vec4(vec3(pattern_dist(uva,iTime)),1.);\n    \n    fragColor = max(new_px+old_px*DROP+diffuse_px*DIFF_RATE,0.);\n}","name":"Buffer A","description":"","type":"buffer"}]}