{"ver":"0.1","info":{"id":"lcjGRK","date":"1704426026","viewed":26,"name":"a basic shape","username":"Leabemo","description":"2D","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #define PI 3.14159265359\n    #define TWO_PI 6.28318530718\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    //===========================================================\n    /*The above code is equal to â†“\n    vec2 uv = fragCoord.xy / iResolution.xy\n    uv = 2.0 * uv - 1.0;\n    if (iResolution.x > iResolution.y) {\n        uv.x *= iResolution.x / iResolution.y;\n    } else {\n        uv.y *= iResolution.y / iResolution.x;\n    }*/\n    //===========================================================\n    vec3 col = vec3(0.);\n    \n    \n    // Num of Side\n    float N = floor(3.+iMouse.x*0.01);\n    \n    // Angle and radius from the current pixel\n    float a = atan(uv.x,uv.y)+PI;\n    float r = TWO_PI/N;\n    \n    // Shaping function that modulate the distance\n    float d = cos(floor(.5+a/r)*r-a) * length(uv);\n    float f = smoothstep(-0.900,0.400, cos(a*N))*0.2+0.5;\n    float r2 = length(uv)*2.;\n    vec3 col1 = vec3(smoothstep(f,f+0.02,r2) );\n    vec3 col2 = vec3(1.-smoothstep(.4,.41,d));\n    col = min(col1,col2);\n\n    // Output to screen\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}