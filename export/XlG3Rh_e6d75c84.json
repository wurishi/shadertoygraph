{"ver":"0.1","info":{"id":"XlG3Rh","date":"1472927587","viewed":716,"name":"Sample texture on rotated grid","username":"AmazingThew","description":"Click+drag to adjust angle/cell size.\n\nUseful math in case you want to draw cell-based stuff (truchet tiles, pixelation, etc) at arbitrary angles, while still sampling from an underlying texture.\n\nWith tex filtering: https://www.shadertoy.com/view/4lGGzh","likes":4,"published":1,"flags":0,"usePreview":1,"tags":["2d","mosaic","tiles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//NOTE: Causes artifacts with mipmapping. Texture filtering must be set to Linear or Nearest or it'll look weird\n\nconst int samples = 4;\n\nvec2 aspect;\nvec2 aux;\nfloat angle;\nfloat cellWidth;\nmat2 rot;\nmat2 unRot;\n\nvec4 samplePixel(vec2 uv) {\n    uv = uv * aspect * rot;\n    \n    // [0,1) range indicating fragment's position within current cell\n    // Useful for drawing stuff inside cells\n    vec2 cellCoord = fract(uv / cellWidth);\n    \n    // \"Tile-space\" coordinate of cell containing current fragment\n    // Will be same value for every fragment within the cell\n    vec2 cellId = floor(uv / cellWidth);\n    \n    // Texture coordinate (0-1 range across entire quad) of bottom-left corner of current cell\n    vec2 mosaicUv = cellId * cellWidth * unRot / aspect;\n    \n\treturn texture(iChannel0, mosaicUv);\n}\n\nvec4 superSamplePixel(vec2 pos) {\n    vec2 off = 1.0 / float(samples) / iResolution.xy;\n    vec4 sum = vec4(0.0);\n    for (int x=0; x<samples; x++) {\n        for (int y=0; y<samples; y++) {\n            sum += samplePixel(pos + vec2(off.x*float(x), off.y*float(y)));\n        }\n    }\n    return sum / float(samples * samples);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    aspect = vec2(iResolution.x/iResolution.y, 1.0);\n    aux = iMouse.xy / iResolution.xy;\n    angle = mix(3., 1., aux.y);\n    cellWidth = mix(0.01, 0.1, aux.x);\n    rot = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    unRot = inverse(rot);\n    \n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = superSamplePixel(uv);\n    //fragColor = samplePixel(uv); //Uncomment for no-AA version\n}","name":"Image","description":"","type":"image"}]}