{"ver":"0.1","info":{"id":"43GGRW","date":"1717325558","viewed":14,"name":"Dancing Blood Cell","username":"atkar","description":"bro has groove","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( float t)\n{\n    vec3 a = vec3(0.848, 0.500, 0.588);\n    vec3 b = vec3(0.718, 0.500, 0.500);\n    vec3 c = vec3(0.750, 1.000, 0.667);\n    vec3 d = vec3(-0.082, -0.042, 0.408);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\n\nfloat distance_from_sphere(in vec3 p, in vec3 c, float r)\n{\n    return length(p - c) - r;\n}\n\n\n\nfloat map_shape(in vec3 p)\n{\n    float displacement = sin(3.0 * p.x) * sin(3.0 * p.y) * sin(3.0 * p.z) * 0.25 * (sin(iTime * 2. + cos(iTime * 12.)));\n    float sphere_0 = distance_from_sphere(p, vec3(0.0), 1.8);\n    \n    float sphere_1 = distance_from_sphere(p, vec3(0.0, 2.0,0.0), 1.8);\n\n    return sphere_0 + displacement;\n}\n\n\n\nvec3 calculate_normal(in vec3 p)\n{\n    const vec3 small_step = vec3(0.001, 0.0, 0.0);\n\n    float gradient_x = map_shape(p + small_step.xyy) - map_shape(p - small_step.xyy);\n    float gradient_y = map_shape(p + small_step.yxy) - map_shape(p - small_step.yxy);\n    float gradient_z = map_shape(p + small_step.yyx) - map_shape(p - small_step.yyx);\n\n    vec3 normal = vec3(gradient_x, gradient_y, gradient_z);\n\n    return normalize(normal);\n}\n\n\nvec3 ray_march(in vec3 ro, in vec3 rd)\n{\n    float distance_traveled = 0.0;\n    const int max_steps = 32;\n    const float min_hit_dist = 0.001;\n    const float max_trace_dist = 1000.0;\n    vec3 col = palette(length(ro) + (iTime * 0.2));\n\n    for (int i = 0; i < max_steps; i++)\n    {\n        vec3 current_position = ro + distance_traveled * rd;\n\n        float distance_to_closest = map_shape(current_position);\n        \n        if (distance_to_closest < min_hit_dist) \n        {\n           vec3 normal = calculate_normal(current_position);\n\n           vec3 light_position = vec3(2.0, -5.0, 3.0);\n\n           vec3 direction_to_light = normalize(current_position - light_position);\n\n           float diffuse_intensity = max(0.0, dot(normal, direction_to_light));\n\n           return vec3(1.0, 0.0, 0.0) * diffuse_intensity;\n        }\n\n        if (distance_traveled > max_trace_dist)\n        {\n            break;\n        }\n        \n        distance_traveled += distance_to_closest;\n    }\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0; \n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 camera_position = vec3(0.0, 0.0, -5.0);\n    vec3 ro = camera_position;\n    vec3 rd = vec3(uv, 1.0);\n\n    vec3 shaded_color = ray_march(ro, rd);\n\n    fragColor = vec4(shaded_color, 1.0);\n}","name":"Image","description":"","type":"image"}]}