{"ver":"0.1","info":{"id":"wlK3Dw","date":"1579155596","viewed":85,"name":"RaymarchTest_Honorfil","username":"Honorfil","description":"raymarch test","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST 0.01\n\nmat2 GetRot(float alpha)\n{\n    float c = cos(alpha);\n    float s = sin(alpha);\n    \n    return mat2(c, -s, s, c);\n}\n\nfloat smoothMin(float p1, float p2, float k)\n{\n    float h = clamp(0.5 + 0.5 * (p2 - p1) / k,0., 1.);\n    return mix(p2, p1, h) - k * h * (1.0-h);\n}\n\nfloat BoxDist(vec3 p, vec3 s)\n{\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat GetDist(vec3 p)\n{\n    float t = iTime * .5;\n    \n    vec4 s1 = vec4(cos(t)*0.1 + 1.1, 1, 6, 1);\n    vec4 s2 = vec4(-cos(t)*0.1 - 1.1, 1, 6, 1);\n    vec4 s3 = vec4(0, 1. + cos(t) + 0.1, 5.2 , 0.4);\n    \n    vec3 boxPos = p - vec3(0,1,6);\n    boxPos.xz *= GetRot(t);\n    boxPos.xy *= GetRot(-t);\n    \n    float sd1 = length(p - s1.xyz) - s1.w;\n    float sd2 = length(p - s2.xyz) - s2.w; \n    float sd3 = BoxDist(boxPos, vec3(.5)); \n    float pd = p.y;\n    \n    float s21Min = smoothMin(sd1, sd2, .15);\n    float s21_3Min = smoothMin(sd3, s21Min, .3);\n    \n    return min(pd, s21_3Min);\n}\n\nvec3 GetNormal(vec3 p)\n{\n    float d = GetDist(p);\n    vec2 e = vec2(0.01, .0);\n    \n    vec3 n = d - vec3(\n    \tGetDist(p - e.xyy),\n    \tGetDist(p - e.yxy),\n    \tGetDist(p - e.yyx));\n    \n    return normalize(n);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    float d0 = 0.;\n        for (int i = 0; i < MAX_STEPS; i++)\n        {\n            vec3 p = ro + rd * d0;\n            float ds = abs(GetDist(p));\n            d0 += ds;\n            if (d0 > MAX_DIST || ds < SURF_DIST)\n            {\n                break;\n            }\n        }\n    \n    return d0;\n}\n\nfloat GetLight(vec3 p)\n{\n    vec3 lightPos = vec3(2, 5, 1);\n    \n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float diff = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float distToLight = RayMarch(p + n * SURF_DIST * 2., l);\n    if (p.y<.01 && distToLight < length(p - lightPos))\n    {\n        diff *= 0.4;\n    }\n\n    return diff;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy) / iResolution.y;\n\n    vec3 ro = vec3(0, 2, 0);\n    vec3 rd = normalize (vec3(uv.x, uv.y - 0.2, 1));\n\n    float d = RayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    float dif = GetLight(p);\n    vec3 col = vec3(0.8, 0.7, 0.9);\n    \n    fragColor = vec4(vec3(dif),1.0);\n}","name":"Image","description":"","type":"image"}]}