{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"XsXGRr","filepath":"/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"//////////////////////////////////////////\n// XBE\n// Sound Visualization Experiment\n///\n\n#define FULLCOLOR\n#define COLORCYCLING\n\n// Noise from IQ\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n\tconst float K1 = 0.366025404;\n\tconst float K2 = 0.211324865;\n\t\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n\tvec2 a = p - i + (i.x+i.y)*K2;\n\tvec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n\tvec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\t\n\tvec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\t\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\t\n\treturn dot( n, vec3(70.0) );\n}\n\n// http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c)\n{\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat T = iTime;\n\tfloat T2 = 2.*iTime;\n\tfloat T3 = 3.*iTime;\n\tfloat T_20 = iTime/20.;\n\t//\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 q = 2.*uv-1.;\n\tq.y *= iResolution.y/iResolution.x;\n\n\tif (iMouse.w<=0.)\n\t{\n\t\t// Synchronized rotation\n\t\tfloat a = 2. * ( texture(iChannel0, vec2(0.1,0.)).x + noise(vec2(0., T_20)) );\n\t\tmat2 rotmat = mat2(cos(a), -sin(a), sin(a), cos(a));\n\t\tq = rotmat*q;\n\t\t// Synchronized Zoom/Distortion\n\t\tq *= .5 + 3.* (texture(iChannel0, vec2(0.75,0.)).x) + noise(vec2(q.x, T_20));\n\t\t// Synchronized translation\n\t\tq += 2.*vec2( texture(iChannel0, vec2(0.35,0.)).x, texture(iChannel0, vec2(0.95,0.)).x);\n\t}\n\t\n\t// Summing the sinusoid\n\tvec3 col = vec3(0.);\n\tfloat inc = 1./32.;\n\tfloat f=0.;\n\tfloat t=0.;\n\tfloat d=0.;\n\tfor (int i=0; i<32; i++)\n\t{\n\t\tf = 3.14159*32.*(inc+t);\n#ifdef COLORCYCLING\n\t\td = fract( texture(iChannel0, vec2(t,0.)).x + T );\n#else\n\t\td = fract( texture(iChannel0, vec2(t,0.)).x );\n#endif\n#ifdef FULLCOLOR\n\t\tcol += sin(f*q.x) * sin(f*q.y) * hsv2rgb(vec3(d,1.,0.5));\n#else\n\t\tcol += d * sin(f*q.x) * sin(f*q.y) * vec3(1.);\n#endif\n\t\tt += inc;\n\t}\n\tcol = clamp(sqrt(col), 0., 1.);\n\t// Vignetting\n\tvec2 r = -1.0 + 2.0*(uv);\n\tfloat b = max(abs(r.x), abs(r.y));\n\tcol *= (0.15 + 0.85*(1.0-exp(-(1.0-b)*30.0)));\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dlSDB","date":"1406454507","viewed":360,"name":"Sound Viz Experiment","username":"xbe","description":"Kinda old-school sound visualization experiment. From spectrum data, simply adding increasing frequency sinusoidal patterns. Plus some distortion to polish final rendering. Still need improvement on coloration. Click to visualize without distortion.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","sound","oldschool"],"hasliked":0,"parentid":"","parentname":""}}