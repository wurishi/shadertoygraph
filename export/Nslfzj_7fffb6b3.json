{"ver":"0.1","info":{"id":"Nslfzj","date":"1645109891","viewed":69,"name":"Project#2","username":"Splatch","description":"project 2","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["project"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Projet #2 : les fragments\n// Production R&D\n// Romain Lopez-Rostain\n\n\n// ======= Méthodes usuelles =======\n// vec3.x / vec3.xz / vec3.zxy (on peu prendre le nombre d'attribut qu'on veut et dans l'ordre qu'on veut)\n// 5. <- un flottant\n// length(vec_) \n// dot(vec_)\n// normalize(vec_)\n// pow(n, exp)\n\n\n// Dans un shader standard, on définit les paramètres en entrée (in) \n// et ceux en sortie pour les fonctions GL seulement (out).\nbool inside_circle(in vec2 frag, in vec2 center, in float radius)\n{\n    return length(frag - center) < radius;\n}\n\n// La fonction principale\n// fragColor : la couleur (vec4) que doit prendre le fragment\n// fragCoord : les coordonnées (xy) du fragment dont on doit déterminer la couleur\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //random values\n    float rand = abs(sin(iTime*0.2+0.1));\n    float rand1 = abs(sin(iTime*0.3+0.95));\n    float rand2 = abs(sin(iTime*0.05+0.02));\n    float rand3 = abs(sin(iTime*5.+2.));\n\n    float speed = 5000.;\n    float randSpeed = sin(iTime*5.+7.) * speed * iTimeDelta;\n    \n    //split screen\n    if((100./iResolution.x)*fragCoord.x <= (100./iResolution.y)*fragCoord.y) {\n            //sin wave\n            if(fragCoord.y > iResolution.y/2. + sin(fragCoord.x*0.1)*10. - 0.5) {\n                fragColor = vec4(1.-rand, 1.-rand1, 1.-rand2, 1);\n            } else {\n                    fragColor = vec4(rand, rand1, rand2, 1);\n            }\n        } else {\n            //sin wave\n            if(fragCoord.y < iResolution.y/2. + sin(fragCoord.x*0.1)*10. - 0.5) {\n                fragColor = vec4(1.-rand, rand, 1.-rand, 1);\n            } else {\n                fragColor = vec4(rand, 1.-rand, rand, 1);\n            }\n        }\n    //circles\n    float circleCount = 7.;\n    circleCount --;\n    float splitScreenSize = sqrt(pow(iResolution.x, 2.)+pow(iResolution.y, 2.));\n    for(int i=0; i<int(circleCount)+1; i++) {\n        //if(inside_circle(fragCoord, vec2((iResolution.x/circleCount)*float(i)+randSpeed*(iResolution.x/1000.), (iResolution.y/circleCount)*float(i)+randSpeed*(iResolution.y/1000.)), iResolution.x/(circleCount)/2.)) {\n        if(i%2 == 0 && inside_circle(fragCoord, vec2((iResolution.x/circleCount)*float(i-1)-cos(iTime)*splitScreenSize/circleCount+randSpeed*(iResolution.x/1000.), (iResolution.y/circleCount)*float(i-1)-sin(iTime)*splitScreenSize/circleCount+randSpeed*(iResolution.y/1000.)), splitScreenSize/(circleCount)/2.) ||\n        i%2 == 1 && inside_circle(fragCoord, vec2((iResolution.x/circleCount)*float(i)+randSpeed*(iResolution.x/1000.), (iResolution.y/circleCount)*float(i)+randSpeed*(iResolution.y/1000.)), splitScreenSize/(circleCount)/2.)) {\n            if((100./iResolution.x)*fragCoord.x > (100./iResolution.y)*fragCoord.y) {\n                fragColor = vec4(rand, rand1,rand2, 1);\n            } else {\n                fragColor = vec4(1.-rand, rand, 1.-rand, 1);\n            }\n        }\n    }\n    \n    //circle borders\n    if(!inside_circle(fragCoord, vec2(iResolution.x*0.5, iResolution.y*0.5), iResolution.y/1.5+sin(iTime*8.+50.)*30.)) {\n        fragColor = vec4(0., 0., 1., 0.);\n    }\n    \n    //Red borders\n    float borderSize = iResolution.x/18.;\n    borderSize = rand*borderSize*rand3;\n    if(fragCoord.x < sin(fragCoord.y*iTime)*5.+borderSize || fragCoord.x > iResolution.x-borderSize-sin(fragCoord.y*iTime)*5. ||\n       fragCoord.y < cos(fragCoord.x*iTime)*5.+borderSize || fragCoord.y > iResolution.y-borderSize-cos(fragCoord.x*iTime)*5.)  {\n       fragColor = vec4(1., 0., 0., 0.);\n   }\n    \n    //mouse click\n    if(iMouse.z > 0.) {\n        if(inside_circle(fragCoord, vec2(iMouse.x, iMouse.y), iResolution.y/8.)) {\n            fragColor = vec4(1., 1., 1., 0.) - fragColor;\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}