{"ver":"0.1","info":{"id":"tttBRX","date":"1613173124","viewed":3216,"name":"Cubes are dancing","username":"Flopine","description":"Improvised during OMZG Shader Royale, here are some cube vibin' to the muuuusiiiiiic ","likes":85,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fft","animation","geometry","isometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy and wwrighter for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU 6.283581\n#define ITER 80.\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define crep(p,c,l) p=p-c*clamp(round(p/c),-l,l)\n\n#define dt(sp,off) fract((iTime+off)*sp)\n#define bouncy(sp,off) sqrt(sin(dt(sp,off)*PI))\n\nstruct obj\n{\n  float d;\n  vec3 cs; \n  vec3 cl;\n};\n\nobj minobj (obj a, obj b)\n{\n  if (a.d<b.d) return a;\n  else return b;\n}\n\nfloat stmin(float a, float b, float k, float n)\n{\n  float st = k/n;\n  float u = b-k;\n  return min(min(a,b),0.5*(u+a+abs(mod(u-a+st,2.*st)-st)));\n}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n  p = abs(p)-d;\n  if(p.y>p.x) p = p.yx;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n  vec3 q = abs(p)-c;\n  return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat sc (vec3 p, float d)\n{\n  p=abs(p);\n  p=max(p,p.yzx);\n  return min(p.x,min(p.y,p.z))-d;\n}\n\nobj prim1 (vec3 p)\n{\n  p.x = abs(p.x)-3.;\n  float per = 0.9;\n  float id = round(p.y/per);\n  p.xz *= rot(sin(dt(0.8,id*1.2)*TAU));\n  crep(p.y, per,4.);\n  mo(p.xz,vec2(0.3));\n  p.x += bouncy(2.,0.)*0.8;\n  float pd = box(p,vec3(1.5,0.2,0.2));\n  return obj(pd,vec3(0.5,0.,0.),vec3(1.,0.5,0.9));\n}\n\nobj prim2 (vec3 p)\n{\n  p.y = abs(p.y)-6.;\n  p.z = abs(p.z)-4.;\n  mo(p.xz, vec2(1.));\n  vec3 pp = p;\n  mo(p.yz, vec2(0.5));\n  p.y -= 0.5;\n  float p2d = max(-sc(p,0.7),box(p,vec3(1.)));\n  p = pp;\n  p2d = min(p2d, max(box(p,vec3(bouncy(2.,0.))*4.),sc(p,0.2)));\n  return obj(p2d, vec3(0.2),vec3(1.));\n}\n\nobj prim3 (vec3 p)\n{\n  p.z = abs(p.z)-9.;\n  float per = 0.8;\n  vec2 id = round(p.xy/per)-.5;\n  float height = 1.*bouncy(2.,sin(length(id*0.05)));\n  float p3d = box(p,vec3(2.,2.,0.2));\n  crep(p.xy,per,2.);\n  p3d = stmin(p3d,box(p+vec3(0.,0.,height*0.9),vec3(0.15,.15,height)),0.2,3.);\n  return obj (p3d, vec3(0.1,0.7,0.),vec3(1.,0.9,0.));\n}\n\nobj prim4 (vec3 p)\n{\n  p.y = abs(p.y)-5.;\n  mo(p.xz, vec2(1.));\n  float scale = 1.5;\n  p *= scale;\n  float per = 2.*(bouncy(0.5,0.));\n  crep(p.xz,per,2.);\n  float p4d = max(box(p,vec3(0.9)),sc(p,0.25));\n  return obj (p4d/scale, vec3(0.1,0.2,0.4),vec3(0.1,0.8,0.9));\n}\n\nfloat squared (vec3 p,float s)\n{\n  mo(p.zy,vec2(s));\n  return box(p,vec3(0.2,10.,0.2));\n}\n\nobj prim5 (vec3 p)\n{\n  p.x = abs(p.x)-8.;\n  float id = round(p.z/7.);\n  crep(p.z,7.,2.);\n  float scarce = 3.;\n  float p5d=1e10;\n  for(int i=0;i<4; i++)\n  {\n    p.x += bouncy(1.,id*0.9)*0.6;\n    p5d = min(p5d,squared(p,scarce));\n    p.yz *= rot(PI/4.);\n    scarce -= 1.;    \n  }\n  return obj(p5d,vec3(0.5,0.2,0.1),vec3(1.,0.9,0.1));\n}\n\nobj SDF (vec3 p)\n{\n  p.yz *= rot(-atan(1./sqrt(2.)));\n  p.xz *= rot(PI/4.);\n\n  obj scene = prim1(p);\n  scene = minobj(scene,prim2(p));\n  scene = minobj(scene,prim3(p));\n  scene = minobj(scene,prim4(p));\n  scene = minobj(scene, prim5(p));\n  return scene;\n}\n\nvec3 getnorm (vec3 p)\n{\n  vec2 eps = vec2(0.001,0.);\n  return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n vec2 uv = (2.*fragCoord.xy-iResolution.xy)/ iResolution.y;\n\nvec3 ro = vec3(uv*5.,-30.),rd = vec3(0.,0.,1.),\n  p = ro,\n  col = vec3(smoothstep(0.3,0.65,texture(iChannel0, vec2(length(uv*0.5),0.025)).xxx)),\n  l = normalize(vec3(1.,1.4,-2.));\n\n  obj O; bool hit = false;\n\n  for (float i=0.; i<ITER;i++)\n  {\n   O = SDF(p);\n   if (O.d<0.001)\n   {hit = true; break;}\n   p += O.d*rd;\n  }\n\n  if (hit)\n  {\n    vec3 n = getnorm(p);\n    float light = max(dot(n,l),0.);\n    col = mix(O.cs,O.cl, light);\n  }\n    fragColor = vec4(sqrt(col),1.);\n}","name":"Image","description":"","type":"image"}]}