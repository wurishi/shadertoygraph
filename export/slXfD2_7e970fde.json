{"ver":"0.1","info":{"id":"slXfD2","date":"1652096850","viewed":250,"name":"Fractal on a sphere","username":"smjty","description":"Fractal on a sphere. \nUse Mouse to rotate.","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["fractal","recursive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA 2\n#define PI 3.14159\n\nconst float ct0 =  1./sqrt(2.);\nconst float g = (1.5-sqrt(2.))/(1.5+sqrt(2.));\n\nvec3 sn(vec3 p)\n{\n    return vec3(sign(p.x),sign(p.y),sign(p.z));\n}\n//palette function credit: Inigo Quilez https://iquilezles.org/articles/palettes/\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvec3 color(float m){\n    return palette(m/3. + 0.5 ,vec3(0.5),vec3(0.5),vec3(1.0),vec3(0.00, 0.10, 0.20));\n}\n\n\nvec3 map(vec3 pos , float time )\n{  \n    vec4 res = vec4(vec3(0),1);\n    \n    float t_ind = -mod(floor(time),3.);\n\n    time = mod(time,1.);\n    \n    float kt = time;\n    time = -time * log(g);\n    \n    float t = 1.;\n    \n    vec3 v1 = vec3(1.,0.,0.); vec3 nv1 = v1;\n    vec3 v2 = vec3(0.,1.,0.); vec3 nv2 = v2;\n    vec3 v3 = vec3(0.,0.,1.); vec3 nv3 = v3;\n        \n    float col =-2.*t_ind/3.;\n    float t1 = 1.;\n    float yf = 1.;\n    \n    for(float i=0.;i<16.;i+=1.){\n        v1 = nv1;\n        v2 = nv2;\n        v3 = nv3;\n        \n        float phi = atan(dot(pos,v3),dot(pos,v1));\n        float theta = atan(length(vec2(dot(pos,v3),dot(pos,v1))),dot(pos,v2));\n               \n        if(i==0.)t1*=exp(time);\n        \n        theta = acos( ((t1-1.)+(t1+1.)*cos(theta))/((t1+1.)+(t1-1.)*cos(theta)));\n        vec3 pos0 = vec3(sin(theta)*cos(phi),cos(theta),sin(theta)*sin(phi));\n        pos = v1*pos0.x + v2*pos0.y + v3*pos0.z;\n        \n        vec3 spos = sn(pos0);\n    \n        t1 = g;\n        \n        if(abs(pos0.y)>ct0){\n            col = mod(col+(2.)/3.*spos.y*yf,2.);\n            yf *= spos.y;\n            if(i==0.){\n                if(spos.y>0.)res.w += 1.-kt;\n                else res.w += kt;\n            }\n            else res.w+=1.;\n            nv2 *= spos.y;\n            res.xyz = color(col);\n            continue;\n        }\n\n        if(abs(pos0.x)>ct0){\n            col = mod(col+(1.)/3.,2.);\n            yf = 1.;\n            res.xyz = color(col);\n            res.w += 1.;\n            nv2 = v1*spos.x;\n            nv1 = v2;\n            nv3 = v3;\n            continue;\n        }\n        if(abs(pos0.z)>ct0){\n            col = mod(col + (3.)/3.,2.);\n            yf = 1.;\n            res.xyz = color(col);\n            res.w += 1.;\n            nv2 = v3*spos.z;\n            nv1 = v1;\n            nv3 = v2;\n            continue;\n        }\n        res.xyz = color(col);  \n        break;    \n    }\n    return mix(vec3(0.0),res.xyz,exp(-pow(res.w,2.)/100.));\n}\n\n\nvec3 render(vec3 ro,vec3 rd, float time ,vec2 p )\n{ \n    vec3 back = vec3(0.);\n    float r = length(p);\n    back += exp((-r+1.)*20.)*vec3(0.8); \n    \n    vec3 col = back;\n    vec4 res = vec4(250.,-10.,0.,0.);\n    float t = 200.;\n    \n    float od = dot(ro,rd);\n    if(od<0.){\n        float o2 = dot(ro,ro);\n        float del = od*od - (o2-1.) ;\n        if(del>0.){\n            t = -od - sqrt(del);\n            col = map(ro + t*rd,time);\n        }\n    }\n\n    vec3 nor = normalize(ro + t*rd);\n       \n    col = mix(col , back , clamp(exp((r-0.99)*50.),0.,1.) );\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    float time = iTime/1.5;\n\n    \n    float phi = 4.*PI*iMouse.x/iResolution.x; //2.*PI*time/3.;\n    float theta = PI*clamp(-0.1+1.2*iMouse.y/iResolution.y,0.,1.);//PI/2. + PI/3.*cos(2.*PI*time/3.);\n\n    vec3 ro = 50.*vec3(sin(theta)*cos(phi),cos(theta),sin(theta)*sin(phi));\n\n    vec3 cw = normalize(-ro);\n    vec3 cu = vec3(sin(phi),0.,-cos(phi) );\n    vec3 cv = ( cross(cu,cw) );\n\n    mat3 ca = mat3(cu*0.2, cv*0.2, cw );\n\n    vec3 rd = ca * normalize( vec3(0.,0.,1.) );     \n\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y*1.2;\n        vec3 pp = ca * vec3(p,0.);\n        vec3 col = render( ro + pp*5., rd, time,p );\n        tot+=col;\n           \n\n    }\n\n    fragColor = vec4( tot/float(AA*AA), 1.0 );\n}","name":"Image","description":"","type":"image"}]}