{"ver":"0.1","info":{"id":"ttf3R2","date":"1556901280","viewed":123,"name":"Experiments with Worley's noise","username":"tpfto","description":"Altho Shadertoy already has a lot of posted shaders using [url=\"https://doi.org/10.1145/237170.237267\"]Worley's procedural noise[/url], I hope my slightly tweaked take is still of some interest.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["procedural","voronoi","noise","worley","cellular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Yet another Worley noise implementation.\n// A little bit of something old, something new, and something borrowed.\n\n// XY range of the display.\n\n#define DISP_SCALE 6.0 \n\n// rescaling functions\n\nfloat logistic(float x)\n{\n\t  float ex = exp(-abs(x));\n      return ((x >= 0.0) ? 1.0 : ex)/(1.0 + ex);\n}\n\nfloat rescale(float x, vec2 range)\n{\n\t  float a = range.x, b = range.y;\n      return (x - a)/(b - a);\n}\n\nfloat rescale(float x, vec2 r1, vec2 r2)\n{\n\t  float a = r1.x, b = r1.y;\n      float c = r2.x, d = r2.y;\n      return c + (d - c) * ((x - a)/(b - a));\n}\n\n// modified MATLAB bone colormap\n\nvec3 bone( float t )\n{\n\t return 0.875 * t + 0.125 * clamp(vec3(4.0, 3.0, 3.0) * t - vec3(3.0, 1.0, 0.0), 0.0, 1.0);\n}\n\n// simple LCG\n\n#define LCG(k) k = (65 * k) % 1021\n#define lr(k) float(k)/1021.\n\n// permutation polynomial\n\nint permp (int i1, int i2)\n{\n      int t = (i1 + i2) & 255;\n        \n      return ((112 * t + 153) * t + 151) & 255;\n}\n\n// return the two closest distances for Worley noise\n// type controls the type of metric used\n\nvec2 worley(int type, vec2 p)\n{\n    vec2 dl = vec2(20.0);\n    ivec2 iv = ivec2(floor(p));\n    vec2 fv = fract(p);\n    \n\tfor (int j = -1; j <= 1; j++)\n\t\tfor (int i = -1; i <= 1; i++)\n\t\t{\n\t\t\t// seeding\n            int s = permp(permp(0, iv.y + j), iv.x + i); LCG(s);\n            \n\t\t\tfor (int m = 0; m < 2; m++) // two points per cell\n            {\n                // generate feature points within the cell\n                LCG(s); float sy = lr(s);\n                LCG(s); float sx = lr(s);\n                \n                vec2 tp = vec2(i, j) + vec2(sx, sy) - fv;\n                float c = 0.0;\n                if (type == 1) c = dot(tp, tp); // Euclidean metric\n                if (type == 2) c = abs(tp.x) + abs(tp.y); // Manhattan metric\n                if (type == 3) c = max(abs(tp.x), abs(tp.y)); // Chebyshev metric\n                \n                float m1 = min(c, dl.x); // ranked distances\n                dl = vec2(min(m1, dl.y), max(m1, min(max(c, dl.x), dl.y)));\n            }\n\t\t}\n    \n      if (type == 1) dl = sqrt(dl); // don't forget to root at the end for Euclidean distance\n        \n      return dl;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        vec2 aspect = iResolution.xy / iResolution.y;\n        vec2 uv = ( fragCoord.xy / iResolution.y ) - 0.5 * aspect;\n        uv *= DISP_SCALE;\n    \n        vec2 w = worley(int(0.1 * iTime) % 3 + 1, uv + iTime);\n\n        // split image adapted from Inigo Quilez; https://www.shadertoy.com/view/ll2GD3\n        float ry = fragCoord.y / iResolution.y;\n        vec3                  col = bone(rescale(w.x, vec2(0.0, 1.0)));\n        if ( ry > (1.0/3.0) ) col = bone(rescale(length(w)/(w.y + w.x) - w.x, vec2(0.0, 1.4)));\n        if ( ry > (2.0/3.0) ) col = bone(rescale((2.1 * w.y * w.x)/(w.y + w.x) - w.x, vec2(0.0, 0.3)));\n\n        // borders\n        col *= smoothstep( 0.5, 0.48, abs(fract(3.0 * ry) - 0.5) );\n\n        fragColor = vec4( vec3(col), 1.0 );\n}","name":"Image","description":"","type":"image"}]}