{"ver":"0.1","info":{"id":"lsSyDw","date":"1492314426","viewed":327,"name":"Graprog Final Project","username":"Gracefrnandz","description":"Wood\nLava\nScottish\nGalaxy\nWith Moon\nRain\nCloud\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["finalproject"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 color = vec3(.71, .65, .6);\nvec3 blue = vec3(0.18, 0.47, .84);\nvec3 red = vec3(1., 0., 0.);\nvec3 white = vec3(1., 1., 1.);\nvec3 lightblue = vec3(.36, .60, .88);\nvec3 yellow = vec3(1., 1., 0.);\nvec3 blue2 = vec3(0., 0., .63);\n\n#define PATTERN 1\n\n\n#define PI 3.141592\n#define TWO_PI 6.2831\n\nfloat random (in vec2 uv) {\n    return fract(sin(dot(uv.xy, vec2(12.9898,78.233)))*43758.5453123);\n}\n\nfloat createCircle(vec2 uv, vec2 center, float radius)\n{\n    float circle = step(distance(center,uv), radius);\n    return circle;\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 uv) {\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nfloat rectangle(vec2 uv, vec2 position, vec2 size)\n{\n    float leftSide = position.x;\n    float rightSide = position.x + size.x;\n    float bottom = position.y;\n    float top = position.y + size.y;\n    \n    float rect = step(leftSide, uv.x) - step(rightSide, uv.x); \n    float rect2 = step(bottom, uv.y) - step(top, uv.y);\n    \n    return (rect * rect2);\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 uv) {\n    // Initial values\n    float value = 0.0;\n    float amplitud = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitud * noise(uv);\n        uv *= 2.;\n        amplitud *= .5;\n    }\n    return value;\n}\n\nfloat galaxy (in vec2 uv) {\n    float layer1 = step(.99, random(uv)) * (sin(iTime) + 1.) / 2.;\n    layer1  += step(.995, random(uv));\n   \treturn layer1;\n}\n\n\n\n#if PATTERN == 1\n//Wood\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    uv.x *= ratio;\n    \n    vec3 value = vec3(0.860, 0.806, 0.574);\n    \n    float planks;\n    planks = abs(sin(uv.x*10.));\n    value *= planks;\n    \n    vec3 colorA = vec3(0.);\n    value = mix(value, colorA, vec3(fbm(uv.xx * 10.)));  \n   \t\n   \tvalue = mix(value, vec3(0.390, 0.265, 0.192), vec3(fbm(uv.xx*22.)));\n    value = mix(value, vec3(0.930, 0.493, 0.502), random(uv.xx)*.1);\n    value -= (noise(uv*vec2(500., 14.) - noise(uv*vec2(1000., 64.))) * 0.1);\n    \n    fragColor = vec4(vec3(value) , 1.0);\n}\n\n//Lava\n#elif PATTERN == 2\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \tvec2 uv = fragCoord.xy / iResolution.xy;\n   \tuv += iTime/100.;\n\tfloat brightness = 1.7;\n    yellow *= brightness;\n    vec3 color = mix(yellow, red,vec3(fbm(uv*15.)*1.3));\n    fragColor = vec4(vec3(color),1.0);\n}\n\n#elif PATTERN == 3\n//Scottish\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    uv.x *= ratio;\n    \n    vec3 value = vec3(1., 0., 0.);\n    \n    float planks;\n    planks = abs(sin(uv.x*20.) +.5 );\n    value *= planks;\n    \n    vec3 colorA = vec3(0.);\n    value = mix(value, colorA, vec3(fbm(uv.yy * 50.)));  \n   \t\n   \tvalue = mix(value, vec3(0.390, 0.265, 0.192), vec3(fbm(uv.xx*22.)));\n    value = mix(value, vec3(0.930, 0.493, 0.502), random(uv.xx)*.1);\n    value -= (noise(uv*vec2(500., 14.) - noise(uv*vec2(1000., 64.))) * 0.1);\n    \n    fragColor = vec4(vec3(value) , 1.0);\n}\n\n\n#elif PATTERN == 4\n//Galaxy\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 clouds = mix(blue,vec3(0.),vec3(fbm(uv*10.)*2.));\n    fragColor = vec4(vec3(galaxy(uv) + clouds), 1.0);\n}\n\n//Moon\n#elif PATTERN == 5\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float ratio = iResolution.x / iResolution.y;\n   \tuv.x *= ratio;\n  \n\tvec3 circle = vec3(createCircle(uv, vec2(0.5 * ratio, -0.6), .99));\n    vec3 color = mix(vec3(0.07,  0.1, .25), vec3(1.),vec3(fbm(uv*15.)*1.3));\n\tcircle *= color;\n    \n    vec3 blue = vec3(0.07,  0.1, .25);\n    vec3 clouds = mix(blue,vec3(0.),vec3(fbm(uv*10.)*2.)); \n    vec3 stars = vec3(galaxy(uv) + clouds);\n    \n    vec3 circle2 = vec3(createCircle(uv, vec2(0.5 * ratio, 0.5), .1)) * blue;\n    \n    if(circle.x == 0.){\n    \tfragColor = vec4(vec3(stars) , 1.0);\n    }\n    else {\n        fragColor = vec4(vec3(circle), 1.0);\n    }\n}\n\n//Rain\n#elif PATTERN == 6\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n  \tfloat ratio = iResolution.x / iResolution.y;\n    uv.y *= -ratio;\n\t\n    float value = 0.;\n    float idy = floor(uv.x * 200.);\n    float r = random(vec2(idy));\n    float speed = fract(iTime * 2. * r );\n    uv.y += r - speed;\n    uv.y = fract(uv.y);\n    \n    value = step(0.14 * r, uv.y) - step(.17 *r, uv.y);\n    fragColor = vec4(vec3(lightblue - (value * white)), 1.);\n}\n\n//Clouds\n#elif PATTERN == 7\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv /= 2.;\n   \tuv += iTime / 100.;\n\tvec3 clouds = mix(blue,vec3(.8, .86, .91),vec3(fbm(uv*10.)*1.));\n    fragColor = vec4(vec3(clouds),1.0);\n}\n\n//Granite\n#elif PATTERN == 8\n//https://2.imimg.com/data2/TS/UE/MY-2957688/black-granite-250x250.jpg\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 clouds = mix(vec3(1.),vec3(0.),vec3(fbm(uv*50.)*2.5));\n    fragColor = vec4(vec3(clouds),1.0);\n}\n#endif","name":"Image","description":"","type":"image"}]}