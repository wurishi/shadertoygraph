{"ver":"0.1","info":{"id":"7lcXzr","date":"1648691004","viewed":128,"name":"Squares on Squares","username":"oneshade","description":"Fun fact: the area of this fractal is a geometric series that equals (4 + 4k^2) / (1 - 3k^2)\n(if |k| < 1 / sqrt(3))","likes":12,"published":3,"flags":0,"usePreview":0,"tags":["2d","fractal","squares"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Scale to the next layer of squares\n// The fractal won't overlap itself if k < sqrt(2) - 1\n#define k mix(1.0 / 3.0, sqrt(2.0) - 1.0, 0.5 - 0.5 * cos(iTime))\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    vec2 uv2 = uv;\n\n    uv.y = abs(uv.y);\n    float color = step(max(abs(uv.x), uv.y), 1.0);\n\n    float brightness = 1.0;\n    for (int i=0; i < 10; i++) {\n        brightness *= 0.75;\n\n        // Three way fold\n        uv.x = abs(uv.x);\n        uv = vec2(min(uv.x, uv.y), max(uv.x, uv.y));\n\n        // Translate outwards and scale\n        uv.y -= 1.0 + k;\n        uv /= k;\n\n        color = max(color, step(max(abs(uv.x), abs(uv.y)), 1.0) * sqrt(0.5 + 0.5 * uv.y) * brightness);\n    }\n\n    fragColor = vec4(color);\n}","name":"Image","description":"","type":"image"}]}