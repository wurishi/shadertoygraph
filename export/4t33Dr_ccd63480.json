{"ver":"0.1","info":{"id":"4t33Dr","date":"1468619341","viewed":571,"name":"Supersampling","username":"AmazingThew","description":"Simple setup for supersampled antialiasing. Much nicer than smoothstep, though fairly expensive.\n\nNothing novel or clever but I use it often enough that it seemed worth sharing.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["supersampling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int samples = 4; //Square this number to get supersample level\n\nvec4 samplePixel(vec2 uv) {\n    // Put all your actual drawing code in here\n    vec2 aspect = vec2(iResolution.x/iResolution.y, 1.0);\n    uv *= aspect;\n    \n    float k = step(0.5, texture(iChannel0, uv).r);\n    return mix(vec4(0.08, 0.15, 0.22, 1.0), vec4(1.00, 0.96, 0.91, 1.0), k);\n}\n\nvec4 superSamplePixel(vec2 pos) {\n    vec2 off = 1.0 / float(samples) / iResolution.xy;\n    vec4 sum = vec4(0.0);\n    for (int x=0; x<samples; x++) {\n        for (int y=0; y<samples; y++) {\n            sum += samplePixel(pos + vec2(off.x*float(x), off.y*float(y)));\n        }\n    }\n    return sum / float(samples * samples);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = superSamplePixel(uv);\n}","name":"Image","description":"","type":"image"}]}