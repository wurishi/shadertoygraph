{"ver":"0.1","info":{"id":"XslyD2","date":"1490133997","viewed":2294,"name":"Simple Reaction Diffusion","username":"Wumpf","description":"My humble attempt on Gray-Scott reaction diffusion patterns. There are better ones on Shadertoy already, but I wanted to play with it from scratch anyway :)\nTakes a bit to get started and is surprisingly hard to tweak. Also, precision problems.","likes":14,"published":3,"flags":32,"usePreview":0,"tags":["fractal","diffusion","reactiondiffusion","reaction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Visualization\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 values = texture(iChannel0, uv).xy;\n    float displayedValue = values.x;\n\n    // Sigmoid-like function for nice edges\n    const float edginess = 20.0;\n    float sigmoid = 1.0 / (1.0+exp(-displayedValue * edginess + edginess * 0.5));\n    \n    fragColor = vec4(sigmoid);\n    //fragColor = vec4(values.x > values.y ? 1.0 : 0.0);\n    //fragColor = vec4(values.x);\n    //fragColor = vec4(values.y);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Buf A/B/C/D are duplicated to get higher speed without killing accuracy too much\n\nconst vec2 DiffusionRate = vec2(1.0, 0.5);\nconst float KillRate = 0.062;\nconst float FeedRate = 0.0545;\nconst float Speed = 40.0;\n\n\nvec2 computeLaplacian(vec2 uv, vec2 current)\n{\n    vec2 pixelSize = vec2(1.) / iResolution.xy;\n    \n    // with diagonals.\n    return (texture(iChannel0, uv + vec2(pixelSize.x, 0.0)).xy +\n            texture(iChannel0, uv - vec2(pixelSize.x, 0.0)).xy +\n            texture(iChannel0, uv + vec2(0.0, pixelSize.y)).xy +\n            texture(iChannel0, uv - vec2(0.0, pixelSize.y)).xy) * 0.2\n            +\n           (texture(iChannel0, uv + pixelSize).xy +\n            texture(iChannel0, uv - pixelSize).xy +\n            texture(iChannel0, uv + vec2(pixelSize.x, -pixelSize.y)).xy +\n            texture(iChannel0, uv - vec2(pixelSize.x, -pixelSize.y)).xy) * 0.05\n    \t\t-\n            current;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n#if 0\n    // Init somehow.\n    if(iTime < 0.5)\n    {\n        vec2 toMid = (iResolution.xy * 0.5 - fragCoord) / iResolution.y;\n        toMid += sin(atan(toMid.x, toMid.y)*20.0) * 0.01; // Wobble circle a bit to get the desired effects faster.\n        float midDistSq = dot(toMid, toMid);\n        float initVal = pow(sin(midDistSq * 40.0) * 0.5 + 0.5, 5.0);\n        \n        fragColor = vec4(1.0, initVal, 0.0, 1.0);\n        return;\n    }\n#endif\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 current = clamp(texture(iChannel0, uv).xy, vec2(0.), vec2(1.));\n    \n    // Compute diffusion.\n    vec2 laplacian = computeLaplacian(uv, current);\n   \tvec2 diffusion = DiffusionRate * laplacian;\n        \n    // Compute reaction.\n    float u = current.x;\n    float v = current.y;    \n    float reactionU = - u * v * v + FeedRate * (1. - u);\n    float reactionV = u * v * v - (FeedRate + KillRate) * v;\n    \n    // Apply using simple forward Euler.\n    vec2 newValues = current + (diffusion + vec2(reactionU, reactionV)) * Speed * iTimeDelta;\n    \n    \n    fragColor = vec4(newValues, 0.0, 1.0);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Buf A/B/C/D are duplicated to get higher speed without killing accuracy too much\n\nconst vec2 DiffusionRate = vec2(1.0, 0.5);\nconst float KillRate = 0.062;\nconst float FeedRate = 0.0545;\nconst float Speed = 40.0;\n\n\nvec2 computeLaplacian(vec2 uv, vec2 current)\n{\n    vec2 pixelSize = vec2(1.) / iResolution.xy;\n    \n    // with diagonals.\n    return (texture(iChannel0, uv + vec2(pixelSize.x, 0.0)).xy +\n            texture(iChannel0, uv - vec2(pixelSize.x, 0.0)).xy +\n            texture(iChannel0, uv + vec2(0.0, pixelSize.y)).xy +\n            texture(iChannel0, uv - vec2(0.0, pixelSize.y)).xy) * 0.2\n            +\n           (texture(iChannel0, uv + pixelSize).xy +\n            texture(iChannel0, uv - pixelSize).xy +\n            texture(iChannel0, uv + vec2(pixelSize.x, -pixelSize.y)).xy +\n            texture(iChannel0, uv - vec2(pixelSize.x, -pixelSize.y)).xy) * 0.05\n    \t\t-\n            current;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n#if 0\n    // Init somehow.\n    if(iTime < 0.5)\n    {\n        vec2 toMid = (iResolution.xy * 0.5 - fragCoord) / iResolution.y;\n        toMid += sin(atan(toMid.x, toMid.y)*20.0) * 0.01; // Wobble circle a bit to get the desired effects faster.\n        float midDistSq = dot(toMid, toMid);\n        float initVal = pow(sin(midDistSq * 40.0) * 0.5 + 0.5, 5.0);\n        \n        fragColor = vec4(1.0, initVal, 0.0, 1.0);\n        return;\n    }\n#endif\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 current = clamp(texture(iChannel0, uv).xy, vec2(0.), vec2(1.));\n    \n    // Compute diffusion.\n    vec2 laplacian = computeLaplacian(uv, current);\n   \tvec2 diffusion = DiffusionRate * laplacian;\n        \n    // Compute reaction.\n    float u = current.x;\n    float v = current.y;    \n    float reactionU = - u * v * v + FeedRate * (1. - u);\n    float reactionV = u * v * v - (FeedRate + KillRate) * v;\n    \n    // Apply using simple forward Euler.\n    vec2 newValues = current + (diffusion + vec2(reactionU, reactionV)) * Speed * iTimeDelta;\n    \n    \n    fragColor = vec4(newValues, 0.0, 1.0);\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Buf A/B/C/D are duplicated to get higher speed without killing accuracy too much\n\nconst vec2 DiffusionRate = vec2(1.0, 0.5);\nconst float KillRate = 0.062;\nconst float FeedRate = 0.0545;\nconst float Speed = 40.0;\n\n\nvec2 computeLaplacian(vec2 uv, vec2 current)\n{\n    vec2 pixelSize = vec2(1.) / iResolution.xy;\n    \n    // with diagonals.\n    return (texture(iChannel0, uv + vec2(pixelSize.x, 0.0)).xy +\n            texture(iChannel0, uv - vec2(pixelSize.x, 0.0)).xy +\n            texture(iChannel0, uv + vec2(0.0, pixelSize.y)).xy +\n            texture(iChannel0, uv - vec2(0.0, pixelSize.y)).xy) * 0.2\n            +\n           (texture(iChannel0, uv + pixelSize).xy +\n            texture(iChannel0, uv - pixelSize).xy +\n            texture(iChannel0, uv + vec2(pixelSize.x, -pixelSize.y)).xy +\n            texture(iChannel0, uv - vec2(pixelSize.x, -pixelSize.y)).xy) * 0.05\n    \t\t-\n            current;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n#if 0\n    // Init somehow.\n    if(iTime < 0.5)\n    {\n        vec2 toMid = (iResolution.xy * 0.5 - fragCoord) / iResolution.y;\n        toMid += sin(atan(toMid.x, toMid.y)*20.0) * 0.01; // Wobble circle a bit to get the desired effects faster.\n        float midDistSq = dot(toMid, toMid);\n        float initVal = pow(sin(midDistSq * 40.0) * 0.5 + 0.5, 5.0);\n        \n        fragColor = vec4(1.0, initVal, 0.0, 1.0);\n        return;\n    }\n#endif\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 current = clamp(texture(iChannel0, uv).xy, vec2(0.), vec2(1.));\n    \n    // Compute diffusion.\n    vec2 laplacian = computeLaplacian(uv, current);\n   \tvec2 diffusion = DiffusionRate * laplacian;\n        \n    // Compute reaction.\n    float u = current.x;\n    float v = current.y;    \n    float reactionU = - u * v * v + FeedRate * (1. - u);\n    float reactionV = u * v * v - (FeedRate + KillRate) * v;\n    \n    // Apply using simple forward Euler.\n    vec2 newValues = current + (diffusion + vec2(reactionU, reactionV)) * Speed * iTimeDelta;\n    \n    \n    fragColor = vec4(newValues, 0.0, 1.0);\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// Buf A/B/C/D are duplicated to get higher speed without killing accuracy too much\n\nconst vec2 DiffusionRate = vec2(1.0, 0.5);\nconst float KillRate = 0.062;\nconst float FeedRate = 0.0545;\nconst float Speed = 40.0;\n\n\nvec2 computeLaplacian(vec2 uv, vec2 current)\n{\n    vec2 pixelSize = vec2(1.) / iResolution.xy;\n    \n    // with diagonals.\n    return (texture(iChannel0, uv + vec2(pixelSize.x, 0.0)).xy +\n            texture(iChannel0, uv - vec2(pixelSize.x, 0.0)).xy +\n            texture(iChannel0, uv + vec2(0.0, pixelSize.y)).xy +\n            texture(iChannel0, uv - vec2(0.0, pixelSize.y)).xy) * 0.2\n            +\n           (texture(iChannel0, uv + pixelSize).xy +\n            texture(iChannel0, uv - pixelSize).xy +\n            texture(iChannel0, uv + vec2(pixelSize.x, -pixelSize.y)).xy +\n            texture(iChannel0, uv - vec2(pixelSize.x, -pixelSize.y)).xy) * 0.05\n    \t\t-\n            current;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n#if 1\n    // Init somehow.\n    if(iTime < 0.5)\n    {\n        vec2 toMid = (iResolution.xy * 0.5 - fragCoord) / iResolution.y;\n        toMid += sin(atan(toMid.x, toMid.y)*20.0) * 0.01; // Wobble circle a bit to get the desired effects faster.\n        float midDistSq = dot(toMid, toMid);\n        float initVal = pow(sin(midDistSq * 40.0) * 0.5 + 0.5, 5.0);\n        \n        fragColor = vec4(1.0, initVal, 0.0, 1.0);\n        return;\n    }\n#endif\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 current = clamp(texture(iChannel0, uv).xy, vec2(0.), vec2(1.));\n    \n    // Compute diffusion.\n    vec2 laplacian = computeLaplacian(uv, current);\n   \tvec2 diffusion = DiffusionRate * laplacian;\n        \n    // Compute reaction.\n    float u = current.x;\n    float v = current.y;    \n    float reactionU = - u * v * v + FeedRate * (1. - u);\n    float reactionV = u * v * v - (FeedRate + KillRate) * v;\n    \n    // Apply using simple forward Euler.\n    vec2 newValues = current + (diffusion + vec2(reactionU, reactionV)) * Speed * iTimeDelta;\n    \n    \n    fragColor = vec4(newValues, 0.0, 1.0);\n}","name":"Buf D","description":"","type":"buffer"}]}