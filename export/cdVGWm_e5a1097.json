{"ver":"0.1","info":{"id":"cdVGWm","date":"1678650392","viewed":329,"name":"Circle Packing SDF","username":"SnoopethDuckDuck","description":"I saw this post and had a go myself\nhttps://www.reddit.com/r/generative/comments/11p5j3h/circle_packing_using_a_signed_distance_function/\n\nPress R to reset","likes":22,"published":3,"flags":48,"usePreview":0,"tags":["distancefield","game","interactive","buffer"],"hasliked":0,"parentid":"Dd33zS","parentname":"Buffer as Distance Field"},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 pal(float a, float b, vec3 c) {\n    return 0.5 + 0.5 * thc(a, 2.*pi*(b + c));\n}\n\n// messy color stuff\nvoid mainImage( out vec4 fragColor, in vec2 px )\n{\n    float t = iTime;\n    vec2 uv = (px - 0.5 * res) / res.y;\n\n    ivec2 ipx = ivec2(px);\n    vec4 txB = cell(ch2, ipx);\n\n    float sd = ss(2.-txB.r);\n    \n    vec3 col = txB.ggg;\n    \n    vec2 n = norm(ch2, ipx);\n    col.rg = 0.5 + 0.5 * n;\n\n    col.b = pow(1.-4.*col.b*(1.-col.b), 2.);\n    float a = atan(n.y, n.x);\n    vec3 pl = pal(2.,\n                  -0.5 * (1. + txB.b) * t + 0.18 * txB.r + a/pi, \n                  0.25 * vec3(0,2,1)/3.);\n    \n    col = pal(0.01, 0., 0.24 * col + 0.32 * vec3(2,1,0)/3.);\n              \n    col = mix(col, vec3(1), pl * txB.g);\n\n    float m =  min(px.x, res.x - px.x);\n    m = min(m, min(px.y, res.y - px.y));\n    col = mix(col, vec3(0.2 + 0.05*uv.y), exp(-0.2*m));\n    vec3 bg = vec3(1.15+ 0.25 * uv.y, 0.5 + 0.5 * uv.y, 0);\n    col = mix(bg, col, 0.2 + 0.8 * txB.b);\n    \n   \n    vec3 col2 = texture(ch1, -0.02 * t +\n                        vec2(a/pi + txB.b, 0.005*txB.r)).rrr;\n    \n    float osc = 0.5 + 0.5 * thc(8., 0.5 * pi * txB.b - 0.01*txB.r/(1.+txB.a) + 0.6*t);\n    col = mix(col, col2, osc);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define KEYBOARD iChannel1\n\n// This buffer counts frames since reset\n\nvoid mainImage( out vec4 fragColor, in vec2 px )\n{\n    ivec2 ipx = ivec2(px);\n    vec4 txA = cell(ch0, ipx);         \n\n    if (iFrame < 1 || key_down(KEY_RESET))\n        txA.r = 0.;\n    else\n        txA.r++;\n    \n   fragColor = txA;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define res iResolution.xy\n\n#define ss(a) smoothstep(-1., 1., a)\n\n// Ball radius\n#define br 14.\n\n#define key_val(key) texelFetch(KEYBOARD, ivec2(key, 0), 0).x\n#define key_down(key) int(key_val(key)) == 1\n#define KEY_RESET 82\n#define KEY_SPACE 32\n#define KEY_A 65\n#define KEY_W 87\n#define KEY_D 68\n#define KEY_S 83\n\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n\n// from: https://www.shadertoy.com/view/4djSRW\nvec2 hash22(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nvec4 cell(in sampler2D ch, in ivec2 p) {\n    ivec2 r = ivec2(textureSize(ch, 0));\n    p = (p+r) % r;\n    return texelFetch(ch, p, 0);\n}\n\n// from: https://www.shadertoy.com/view/3tfcDM\nvec2 norm(in sampler2D ch, in ivec2 p) {\n    ivec3 e = ivec3(0, -1, 1);\n    return normalize(vec2(cell(ch, p-e.zx).r - cell(ch, p-e.yx).r,\n                          cell(ch, p-e.xz).r - cell(ch, p-e.xy).r));\n}\n\nfloat seg(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define KEYBOARD iChannel1\n\n// This buffer stores circles\n\n// idea:\n// use squares, expand them, generate subdivision\n\n// experiments with other shapes (lots of overlap)\nfloat mlength(vec2 a) {\n    return length(a);\n\n    int fr = iFrame % 3;\n    //return mix(length(a), log(2. + length(a)), 0.8);\n    if (fr == 0)\n        return length(a);\n    if (fr == 1)\n        return max(abs(a.x), abs(a.y));\n    if (fr == 2)\n        return abs(a.x) + abs(a.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 px )\n{\n    ivec2 ipx = ivec2(px);\n    vec4 txA = cell(ch0, ipx); // Frame since reset\n    vec4 txB = cell(ch2, ipx); // This buffer\n    \n    // Initialize distances on reset\n    if (iFrame < 1 || key_down(KEY_RESET)) \n        txB = vec4(res.y ,0,0,0);   \n    \n    // Max radius of circles\n    // (increases with frame so it doesn't spawn 20 big ones at once)\n    float maxR = 4. * txA.r; \n    \n    for (int i = 0; i < 40; i++) {\n        // Random position\n        vec2 rpos = 0.125 * res + 0.75 * hash22(vec2(i,-0.13 * iTime)) * res;\n       \n        // Values at position\n        vec4 txR = cell(ch2, ivec2(rpos));\n        \n        //vec2 n = norm(ch2, ivec2(rpos));\n        //if (i > 0)\n        //    rpos -= min(maxR, txR.r) * n;     \n        //txR = cell(ch2, ivec2(rpos));\n             \n        // If not inside a circle, draw and break loop\n        if (txR.r > 0.) {\n        \n            // Red: distance field\n            float r = min(maxR, txR.r);\n            float d = mlength(px-rpos) - r;\n            txB.r = min(txB.r, d);\n            \n            // Green: fade from centre of circles\n            float l = mlength(px - rpos);\n            txB.g = max(txB.g, 1.-l / r);\n            \n            // Blue: random [0,1] value for each circle\n            float b = hash22(rpos + iTime).x;\n            txB.b = mix(txB.b, b, ss(r-l));\n            \n            // Alpha: radius of circles\n            txB.a = mix(txB.a, l, ss(r-l));\n            \n            break; // Less overlap, but slower\n        }\n    }\n    \n    fragColor = txB;\n}","name":"Buffer B","description":"","type":"buffer"}]}