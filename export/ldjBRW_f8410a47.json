{"ver":"0.1","info":{"id":"ldjBRW","date":"1499808774","viewed":355,"name":"Space Glowing 2","username":"tholzer","description":"A variant of 'Space Glowing'  using color shifting.\nAgain ... switch to full screen and lean back!","likes":11,"published":1,"flags":64,"usePreview":0,"tags":["3d","antialiasing","space","raytrace","glowing","satiny"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXXD2","filepath":"https://soundcloud.com/filipnikolaevic/jean-michel-jarre-oxygen-8-magnetik-rmx","previewfilepath":"https://soundcloud.com/filipnikolaevic/jean-michel-jarre-oxygen-8-magnetik-rmx","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//---------------------------------------------------------\n// SpaceGlowing2.glsl  by Antony Holzer          2017-07-11\n//\n// A variant of 'Space Glowing'  using color shifting.\n// Again ... switch to full screen and lean back!\n//\n// variantOf: https://www.shadertoy.com/view/4dyGWt\n// original:  https://www.shadertoy.com/view/MtX3Ws\n// see also:  https://www.shadertoy.com/view/Mlj3zW\n// simplified edit: Robert 25.11.2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// tags:      raytrace, 3d, space, antialiasing, glowing, satiny\n//---------------------------------------------------------\n\nvec3 roty (vec3 pos, float angle)\n{ \n    float sa = sin(angle), ca = cos(angle);\n    return mat3(ca,0,-sa, 0,1,0, sa,0,ca) * pos;\n}\n\nfloat map (in vec3 p) \n{\n\tvec3 c = p; \n    float res = 0.0;\n\tfor (int i=0; i < 4; i++) \n\t{\n\t\tp = abs(p) / dot(p,p) -0.7;\n\t\tp.yz = vec2(p.y*p.y-p.z*p.z, 2.*p.y*p.z);\n\t\tres += exp(-20.0 * abs(dot(p,c)));\n\t}\n\treturn res * 0.4;\n}\n\nvec3 raymarch (vec3 ro, vec3 rd)\n{\n\tfloat t = 5.0;\n    float c = 0.0;\n\tvec3 col = vec3(0.0); \n\tfor (int i=0; i < 6; i++)\n\t{\n\t\tt += exp(c * -2.0) * 0.02;\n\t\tc = map(t * rd + ro);               \n\t\tcol= vec3(4.0*c, 2.0*c, 6.0*c*c*c) *0.16 + col *0.6;\n\t\tc = map(t*0.99 * rd + ro);               \n\t\tcol+= vec3(4.0*c*c*c, 2.0*c*c, c) *0.16 + col *0.6;\n\t\tc = map(t*1.01 * rd + ro);               \n\t\tcol+= vec3(4.0*c, 18.0*c*c*c, -33.*c*c)*0.16 + col *0.6;\n        /* // blue\n\t\tcol= vec3(c*c, c, 6.0*c*c*c) *0.16 + col *0.96;\n\t\tcol= vec3(8.0*c*c*c, 2.0*c*c, 8.0*c) *0.16 + col *0.96;\n\t\tcol= vec3(c, 18.0*c*c*c, 8.0*c*c)*0.16 + col *0.96;\n\t\t*/\n\t}\n\treturn col*0.2;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 p = (fragCoord.xy - iResolution.xy*0.5) / iResolution.y;\n    vec3 ro = roty(vec3(3.), iTime*0.2 + iMouse.x / iResolution.x);\n    vec3 uu = normalize(cross(ro, vec3(1.0, 0.0, 0.0)));\n    vec3 vv = normalize(cross(uu, ro));\n    vec3 rd = normalize(p.x*uu + p.y*vv - ro*0.5);\n    fragColor.rgb = log(raymarch(ro,rd) + 1.0)*0.5;\n    fragColor.a = 1.0;\n}\n","name":"Image","description":"","type":"image"}]}