{"ver":"0.1","info":{"id":"XfjyWz","date":"1722171071","viewed":13,"name":"Atividade CG","username":"murilo","description":"Atividade para disciplina de CG, animação da terra está em movimento circular com a lua e quando clicar com o mouse sobre a lua, o tamanho dela irá aumentar.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["click","animacao"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec3 sdfCircle(vec2 uv, float r, vec2 offset, vec3 color) {\n  float x = uv.x - offset.x;\n  float y = uv.y - offset.y;\n\n  float d = length(vec2(x, y)) - r;\n\n  return d > 0. ? vec3(1.) : color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy; // Coordenadas normalizadas [0,1]\n    uv -= 0.5; // Centraliza o sistema de coordenadas\n    uv.x *= iResolution.x / iResolution.y; // Corrige a proporção da tela\n    vec4 background = texture(iChannel0, uv);\n\n    // Convertendo coordenadas do mouse para o sistema normalizado\n    vec2 mouse = iMouse.xy / iResolution.xy * 2.0 - 1.0;\n    mouse.x *= iResolution.x / iResolution.y; // Corrige a proporção da tela\n\n    // Verificando se o botão do mouse está pressionado\n    bool isClicked = (iMouse.z > 0.0);\n\n    // Criando a Lua.\n    vec2 center = vec2(0.0, 0.0); // Colocando ao centro.\n    vec3 centerColor = vec3(1.0, 1.0, 1.0); // Branco para a lua.\n\n    // Aumenta o raio se o mouse estiver sobre a lua e for clicado\n    float centerRadius = 0.1;\n    if (isClicked && length(mouse - center) < centerRadius) {\n        centerRadius *= 2.;\n    }\n    vec3 centerCircle = sdfCircle(uv, centerRadius, center, centerColor);\n    \n    // Criando a Terra com interação de mouse.\n    vec2 offset = vec2(sin(iTime * 1.0) * 0.5, cos(iTime * 1.0) * 0.4); // Movimento circular.\n    vec3 earthColor = vec3(0.0, 0.5, 0.8); // Azul claro para a Terra\n    vec3 earthCircle = sdfCircle(uv, 0.15, offset, earthColor);\n\n    // Mixa a cor dos dois círculos sobre o background\n    vec3 finalColor = mix(background.rgb, centerCircle, step(length(uv - center), centerRadius));\n    finalColor = mix(finalColor, earthCircle, step(length(uv - offset), 0.15));\n\n    // Saída para a tela\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}