{"ver":"0.1","info":{"id":"tdcBRN","date":"1623388103","viewed":73,"name":"Mandelbrot I","username":"itishappy","description":"fractal","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define i_max 512.\n#define escape 4.\n#define gamma .6\n\nvec2 isq(vec2 z) { // square of a complex number: s=z^2\n    vec2 s;\n    s.x = z.x*z.x - z.y*z.y; // real part: x^2-y^2\n    s.y = 2. * z.x * z.y;    // imag part: 2xy\n    return s;\n}\n\nfloat mandel(vec2 c) { // mandelbrot set: does f(z)=z^2+c diverge? iterations until |z|>escape\n    vec2 z = vec2(0.);          // z_0 = 0\n    float i;\n    for (i=0.; i<i_max; i++) {\n\t\tz = isq(z) + c;         // f(z)=z^2+c\n        if (length(z) > escape) // |z|>escape\n            return i + 1. - log(log(length(z)))/log(2.);\n    }\n    return 0.;\n}\n\nmat2 rot(float a) { // rotation by angle a: used by the camera\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // aspect ratio\n    vec2 z = 2.*(2.*fragCoord-iResolution.xy)/length(iResolution.xy);\n    \n    // magic camera stuff\n    z += vec2(-.25, 0.);\n    z *= rot(.2*sin(.17*iTime));\n    z += vec2(-.25, 0.);\n    z *= 0.8+0.2*sin(0.03*iTime);\n    \n    // the magic\n    float m = mandel(z)/i_max;\n    \n    // attept at exposure\n    fragColor = vec4(vec3(pow(m,gamma)),10.);\n}\n\n// hmmmm...\n// how do complex numbers exponentiate???\n// I think I can eek more contrast out if I use s=z^x where x is slightly < 2\n// NOPE, that doesn't do what I expected, changing the exponent \"unwraps\" the fractal","name":"Image","description":"","type":"image"}]}