{"ver":"0.1","info":{"id":"MddBWX","date":"1527058969","viewed":259,"name":"Piecewise Function Shader","username":"hungovercoder","description":"For Dan Fessler","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Tuning values for the piece-wise functions.\n    const float w = 0.2f;\n    const float s = 2.0f;\n    \n    const float wDivS = w/s;\n        \n    const float newSlope = (1.0f-2.0*w)/(1.0f-wDivS*2.0f);\n    const float leftOffset = w - newSlope*wDivS;\n    const float rightOffset = (1.0f-w) - s*(1.0f-wDivS);\n\n    float leftMask = step(uv.x, wDivS);\n    float rightMask = step(1.0f-wDivS, uv.x);\n    float centerMask = (1.0f - clamp(leftMask + rightMask, 0.0f, 1.0f));\n        \n    float evalValue = (s*uv.x) * leftMask;\n    evalValue += (newSlope*uv.x + leftOffset) * centerMask;\n    evalValue += (s*uv.x + rightOffset) * rightMask;\n\n    // Below is just for ShaderToy visual debugging.\n    const vec4 onColor = vec4(1.0f, 0.0f, 0.0f, 1.0f);\n    const vec4 offColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n    fragColor = (uv.y <= evalValue) ? onColor : offColor; \n}","name":"Image","description":"","type":"image"}]}