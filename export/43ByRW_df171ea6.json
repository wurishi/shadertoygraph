{"ver":"0.1","info":{"id":"43ByRW","date":"1727011623","viewed":159,"name":"Snake on Klein bottle","username":"FabriceNeyret2","description":"eat the red pills, don't cross yourself.\nleft/right key to turn\nmouse controls camera.\n\nUgliest SDF ever made ;-) . mysterious line #40 fix to avoid rendering \"cut\" artifacts.\nsome cut artifacts still there.","likes":29,"published":3,"flags":48,"usePreview":0,"tags":["torus","uv","kleinbottle","short"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// from https://shadertoy.com/view/l3jyz1\n// Klein bottle variant of https://shadertoy.com/view/X3lyW2\n\n#define hue(v)  ( .6 + .6 * cos( v  + vec4(0,23,21,0)  ) )    // hue\n//#define rot(a)    mat2( cos(a+vec4(0,11,33,0)) )            // rotation                  \n  #define rot(a)  mat2(cos(a),sin(a),-sin(a),cos(a))\n                                                              // torus distance + parameterization\n#define torus(t)  t = abs( length(vec2(d=length(q.xz)-R0,q.y)) - R1), \\\n                  a = atan(q.z,q.x), b = atan(q.y,d)\n                  \nvoid mainImage(out vec4 O, vec2 U) {    \n    float t=9.,d, l, t0, a,b,i, k = 2., // .9                 // tile multiplier\n          R0 = 20., R1 = 10.;                                 // large and small radii\n\n    vec3  R = iResolution,\n          D = normalize( vec3( U+U, -3.5*R.y ) - R ),         // ray direction\n          p = 150./R, q,                                      // marching point along ray \n       // M =  iMouse.xyz/R -.5;\n          M = iMouse.z > 0. ? iMouse.xyz/R -.5: vec3(8,4,0)/1e2*cos(iTime+vec3(0,11,0));\n    O *= 0.;\n    if ( T(50).w < 0. ) O = hue(30.*iTime);\n    for ( ; i++ < 1e2 ; ) {                            // --- ray-marching\n        q = p,\n        q.yz *= rot( 1.+6.*M.y),                              // rotations\n        q.xz *= rot( -6.*M.x),\n        torus(t);                                             // bottle loop = 3/4 torus\n        q.x += 2.*R0;\n        if (a < -1.57 ) {                                     // inside loop = 1/4 torus\n            torus(t), a = 3.14-a, b = 3.14-b;\n        }\n        q = q.zxy, q.x += R0;\n        if (q.y<0.) {                                         // bottle bottom = 1/2 torus \n            torus(t), d=a,a=b,b=d, a /= 2., a += 6.28;        // swap a,b\n        } else if (true){                                     // bottle body = cylinder with cos profile\n            t0 = abs(length(q.xz) -R0-R1*cos(1.57/R0*q.y) ) / 2.;\n            if ( t0 < t && q.y < 2.*R0 ) \n                t = t0, \n                b = atan(q.z,q.x), \n                a = q.y/(R0-.2) + 6.28;\n            else t /= 1.2;                                    // fix rendering bug. why ?\n        }      \n        l += t;\n        a += 1.57;\n        q = vec3( k*R0*a/6.283, round(k*R1*b/6.283), 0 );     // cell id\n        a = sin(k*R0*a/2.), b = cos(k*R1*b/2.);\n        d = sqrt( 1. - min(abs(a)/fwidth(a),1.) * min( abs(b)/fwidth(b),1.) ) / exp( (l-140.)/30. ); // color: mesh * depth darkening\n        if ( t < .01 ) \n          { O += d;                                           // draw mesh\n            d = T(mod(q.xy,S)).x;                             // cell content\n            if ( d > 0. ) O.g ++;\n            if ( d < 0. ) O.r ++;\n            t = .2;                                           // traverse the layer and continue\n          }\n\n        p += t*D;                                             // step forward = dist to obj          \n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 S = vec2(63,20);                                // 40 x 23 tiles\n\n#define T(U)    texelFetch(iChannel0, ivec2(U), 0)\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define key(a) (texelFetch(iChannel3,ivec2(a,1),0).x > 0.)      // LEFT:37  UP:38  RIGHT:39  DOWN:40 \n#define H(t)    fract(sin(mod( (t) *vec2(12.9898, 78.233 ), 6.28)) * 3758.5453)\n\nvec2 new() {                                                    // --- create a new pills\n    vec2 P;\n    for ( float i; i++ < 50.; ) {\n        P = floor( S* H(iTime - i*17.971) );\n        if ( T(P.xy).x == 0. && P != T(50).xy ) return P;       // ok if free cell\n    }\n    return vec2(-1);\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U -= .5;\n    O = T(U);                                                   // restore state\n    if (iFrame < 1 || T(50).w <  1. ) {                         // --- init\n        if  ( T(50).w < 0. ) {                                  // wait 2\" after loosing\n            if ( U == vec2(50) )  O.w += 1.;\n            return;\n        }\n        O *= 0.;\n        if ( U == vec2(50) )                                    // init snake pos,dir,length\n            O = vec4( floor(S*H(iTime)),  floor(4.*H(iTime+.5).x), 5 );\n        if ( U == new() ) O.x = -1.;                            // set a pills\n        return;\n    }\n    \n    if ( U == vec2(51) ) O.x = key(37) ? 1. : key(39) ? -1. : O.x, // cumulates key event between pause\n                         O.y += iTimeDelta;                     // to control the pause time\n // if (iFrame%10 > 0) return;                                  // slow game\n    if (T(51).y < .17 ) return;                                 // slow game\n    if ( U == vec2(50) ) {                                      // --- snake control\n        O.z = mod( O.z + T(51).x, 4. );                         // user changes direction\n     // O.z = mod( O.z + float(key(37)) - float(key(39)), 4. ); // user changes direction\n        O.xy += mat4x2( 1,0, 0,1, -1,0, 0,-1 )[int(O.z)];       // pos += dir\n    //  O.xy = mod( O.xy, S );\n        if (O.x >= S.x ) O.x = 0., O.y = S.y/2.- O.y;           // domain wrapping\n        else if ( O.x < 0. ) O.x = S.x-1., O.y = S.y/2. - O.y;\n        O.y = mod(O.y, S.y);\n        if ( T(O.xy).x < 0. ) O.w++;                            // eat pills\n        if ( T(O.xy).x > 0. ) O.w = -120.;                      // cross itself: loose !\n    }\n    else if ( U == vec2(51) ) O-=O;\n    else if( U.x < S.x && U.y < S.y ) {                         // --- grid management\n        vec4 P = T(50);                                         // snake state\n        if (O.x > 0.) O.x--;                                    // snake trail\n        if ( U==P.xy ) O.x = P.w;                               // snake head: timer = length\n        if ( T(P.xy).x < 0. && U==new() ) O.x = -1.;            // pills eaten: new one            \n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}