{"ver":"0.1","info":{"id":"Dt2fzc","date":"1694336486","viewed":72,"name":"[DFT] circle (resize & blur)","username":"Fuergu","description":"Move Your Mouse:\nleft & right: blurry\nup & down: size","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["2d","dft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**************************************************************************\n\nMove Your Mouse:\nleft & right: blur\nup   & down : size\n\n**************************************************************************/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  vec2 uv = fragCoord/iResolution.xy;\n  \n// small window\n  if(fragCoord.x < 0.25 * iResolution.x && fragCoord.y > 0.75 * iResolution.y) {\n    uv = fragCoord.xy / vec2(0.25 * iResolution.x, 0.25 * iResolution.y); \n    fragColor = texture(iChannel0, uv);\n  }\n  else {\n    // display iChannel1\n    fragColor = texture(iChannel1, uv); \n    fragColor *=3.5;\n  }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/* circle SDF */\n\nstruct ray \n{\n    vec3 origin,direction;\n}    \n     GetRay(vec2 uv,vec3 camPos, vec3 lookat,float zoom){\n     ray a;\n     a.origin=camPos;\n     vec3 fore=normalize(lookat-camPos);\n     vec3 right=cross(vec3(0,1,0),fore);\n     vec3 up=cross(fore,right);\n     vec3 centre=a.origin+fore*zoom;\n     vec3 i=centre+ uv.x*right+uv.y*up;\n\n     a.direction=normalize(i-a.origin);\n\n     return a;\n    }\n\nvec3 ClosestPoint(ray r,vec3 position)\n{\n    return r.origin+max(0.,dot(position-r.origin,r.direction))*r.direction;\n}\n\nfloat DistRay(ray r, vec3 position)\n{\n    return length(position-ClosestPoint(r,position));\n}\n\nfloat Bokeh(ray r,vec3 position,float size,float blur){\n    float d=DistRay(r,position);\n    \n    float circle= S(size,size*(1.-blur),d);\n    //circle*=mix(.6,1.,S(size*.8,size,d));//使得圆中间淡一些\n    return circle;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=.5;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    vec3 camPos=vec3(0.,0.,0.);\n    vec3 lookat=vec3(0.,0.,1.);\n    \n    ray r= GetRay(uv,camPos,lookat,.2);\n    vec3 position=vec3(0,0,iMouse.y/iResolution.y);\n    position.y=clamp(position.y,0.,.5);\n    \n    float idle = float(iMouse.x<0.001)*0.1;\n    if(idle>0.){position=vec3(0,0,.6);}\n    float circle= Bokeh(r,position,.35,0.8*iMouse.x/iResolution.x);\n    if(idle>0.){circle= Bokeh(r,position,.35,0.1);}\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col=vec3(1.);\n    col*=circle;\n    \n    fragColor = vec4(col,circle);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"/*DFT*/\n\n/*\nreference：https://www.shadertoy.com/view/MllGRX\n*/\nvec2 fft(vec2 uv,vec2 FFT_SIZE)\n{\n    \n    vec2 complex = vec2(0,0);\n    uv *= FFT_SIZE;\n    \n    vec2 size = FFT_SIZE;\n    \n    for(int x = 0;x < int(FFT_SIZE.x);x++)\n    {\n    \tfor(int y = 0;y < int(FFT_SIZE.y);y++)\n    \t{\n            float a = 2.0 * PI * (uv.x * (float(x)/size.x) + uv.y * (float(y)/size.y));\n            vec3 samplev = texture(iChannel0,vec2(x,y)/size).rgb;\n            complex += avg(samplev)*vec2(cos(a),sin(a));\n        }\n    }\n    \n    return complex;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    uv.x += (1.0-res.x)/2.0;\n    uv.y = 1.0-uv.y;\n    \n    vec3 color = vec3(0.0);\n    vec2 FFT_SIZE = iResolution.xy/10.;\n    color = vec3(length(fft(uv-0.5,FFT_SIZE))/float(FFT_SIZE.x+FFT_SIZE.y)/2.);\n    color = log(1.+abs(color));\n    fragColor = vec4(color,1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/*constant*/\n#define PI 3.14159265359\n\n/*Function*/\n#define S(a,b,t) smoothstep(a,b,t)\n#define avg(v) ((v.x+v.y+v.z)/3.0)","name":"Common","description":"","type":"common"}]}