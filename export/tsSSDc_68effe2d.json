{"ver":"0.1","info":{"id":"tsSSDc","date":"1555083800","viewed":551,"name":"Guilloche","username":"rafaelcastrocouto","description":"Trying to implement a Guilloche texture dithering effect like in this article:\nhttps://blog.spoongraphics.co.uk/tutorials/create-realistic-money-effect-photoshop\nPlease change the channel 0 to a video to test the effect live!","likes":12,"published":1,"flags":0,"usePreview":1,"tags":["texture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\nconst float levels = 3.0;\nconst float angle = PI/levels;\nconst float spacing = 0.01;\nconst float frequency = 30.0;\nconst float height = 0.003;\nconst float width = 0.015;\nconst float alias = 0.002;\nconst float bright = 1.2;\nconst float dist = 0.2;\nconst vec3 color = vec3(0.05,0.1,-0.15);\n\nmat2 rotate2d(float angle) {\n    return mat2(cos(angle),-sin(angle),\n                sin(angle), cos(angle));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float result = 0.0;\n    // normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // input texture from channel 0\n    vec4 tex = texture(iChannel0,uv);\n    float t = float(tex);\n    // diagonal waves\n    for (float i = 0.0; i<levels; i++) {\n        // new uv coordinate\n        vec2 nuv = rotate2d(angle+angle*i) * uv;\n        // calculate wave\n        float wave = sin(nuv.x*frequency)*height;\n        float x = (spacing/2.0)+wave;\n        float y = mod(nuv.y,spacing);\n        // wave lines\n        float line = width * (1.0-(t*bright)-(i*dist));\n        float waves = smoothstep(line,line+alias,abs(x-y));\n        // save the result for the next wave\n        result += waves;\n    }\n    result /= levels;\n    // increase contrast\n    result = smoothstep(0.6,1.0,result);\n    // add some color\n    vec3 colored = vec3(result+color);\n    // output to screen\n    fragColor = vec4(colored,1.0);\n}","name":"Image","description":"","type":"image"}]}