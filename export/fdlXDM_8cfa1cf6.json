{"ver":"0.1","info":{"id":"fdlXDM","date":"1618705487","viewed":60,"name":"321_vetrova_v2v5","username":"kate_fox","description":"Homework made by Ekaterina Vetrova, 321","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["homework"],"hasliked":0,"parentid":"NdfSW7","parentname":"Fork Homework V kate_fox 892"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenUV = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, screenUV) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e9;\nconst float SPHERE_R = 1.0;\nconst vec3 CAMERA_POS = vec3(-1, 3.5, -10);\nconst vec3 LIGHT1_POS = vec3(2.5, 1, 0.5);\nconst float LIGHT1_RADIUS = 0.3;\nconst vec4 LIGHT1_COLOR = vec4(0.7, 0.7, 0, 1);\n\nconst vec3 LIGHT2_POS = vec3(-3, 1, 3);\nconst float LIGHT2_RADIUS = 0.5;\nconst vec4 LIGHT2_COLOR = vec4(0.5, 0.7, 1, 1);\n\nconst vec3 LIGHT3_POS = vec3(2, 1.5, -3);\nconst float LIGHT3_RADIUS = 0.4;\nconst vec4 LIGHT3_COLOR = vec4(0.8, 0.9, 0.5, 1);\n\nconst float EPS = 1e-5;\nfloat traceSphere(vec3 pos, vec3 dir, float R, out vec3 normal) {\n    float b = dot(pos, dir);\n    float D = b * b - (dot(pos, pos) - R * R);\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(D));\n    if (t < 0.0)\n        t = (-b + sqrt(D));\n    if (t < 0.0)\n        return INF;\n    vec3 wPos = pos + t * dir;\n    normal = normalize(wPos);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, inout vec3 normal) {\n    const float R = 1.5f;\n    const float H = 0.1f;\n    float floorT = (-1.0 - pos.y) / dir.y;\n    if (floorT < 0.0)\n        return INF;\n    vec3 finalPos = pos + dir * floorT;\n    if (dot(finalPos.xz, finalPos.xz) < R * R) {\n        normal = vec3(0, 1, 0);\n        return floorT;\n    }\n    \n    float b = dot(pos.xz, dir.xz);\n    float a = dot(dir.xz, dir.xz);\n    float D = b * b - (dot(pos.xz, pos.xz) - R * R) * a;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(D)) / a;\n    if (pos.y + t * dir.y < -1.0) {\n        vec3 wPos = pos + t * dir;\n        normal = normalize(vec3(wPos.x, 0, wPos.z));\n        return t;\n    }\n    \n    return INF;\n}\n\nfloat traceTriangle(vec3 v0, vec3 v1, vec3 v2, vec3 pos, vec3 dir, out vec3 N)\n{\n    vec3 edge1 = v1 - v0;\n    vec3 edge2 = v2 - v0;\n    vec3 h = cross(dir, edge2);\n    float a = dot(edge1, h);\n    if (a > -EPS && a < EPS) return INF;\n    float f = 1.0/a;\n    vec3 s = pos - v0;\n    float u = f * dot(s, h);\n    if (u < 0.0 || u > 1.0) return INF;\n    vec3 q = cross(s, edge1);\n    float v = f * dot(dir, q);\n    if (v < 0.0 || u + v > 1.0) return INF;\n    float t = f * dot(edge2, q);\n    if (t < EPS) return INF;\n    vec3 ed1 = v2 - v0;\n    vec3 ed2 = v1 - v0;\n    N = normalize(cross(ed1,ed2));\n    return t;\n}\n\nfloat tracePy(vec3 pos, vec3 dir, out vec3 normal){\n    float ang = 0.5;\n    vec2 pyrA, pyrB, pyrC, pyrD;\n    vec3 norm1, norm2, norm3, norm4, norm5, norm6;\n    float t1, t2, t3, t4, t5, t6;\n    mat2 rot = mat2(cos(ang), sin(ang), -sin(ang), cos(ang));\n    pyrA = rot * vec2(1, -1);\n    pyrB = rot * vec2(1, 1);\n    pyrC = rot * vec2(-1, 1);\n    pyrD = rot * vec2(-1, -1);\n    vec3 norm = vec3(0,sqrt(1.0),0);\n    vec3 v1 = vec3(pyrA.x, -0.99, pyrA.y);\n    vec3 v2 = vec3(pyrB.x, -0.99, pyrB.y);\n    vec3 v3 = vec3(pyrC.x, -0.99, pyrC.y);\n    vec3 v4 = vec3(pyrD.x, -0.99, pyrD.y);\n    float t = INF;\n    t1 = traceTriangle(v1, v2, norm, pos, dir, norm1);\n    if (t1 < t && t1 > 0.0) {\n        t = t1;\n        normal = norm1;\n    }\n    t2 = traceTriangle(v2, v3, norm, pos, dir, norm2);\n    if (t2 < t && t2 > 0.0) {\n        t = t2;\n        normal = norm2;\n    }\n    t3 = traceTriangle(v3, v4, norm, pos, dir, norm3);\n    if (t3 < t && t3 > 0.0) {\n        t = t3;\n        normal = norm3;\n    }\n    t4 = traceTriangle(v4, v1, norm, pos, dir, norm4);\n    if (t4 < t && t4 > 0.0) {\n        t = t4;\n        normal = norm4;\n    }\n    t5 = traceTriangle(v1, v2, v3, pos, dir, norm5);\n    if (t5 < t && t > 0.0) {\n        t = t5;\n        normal = norm5;\n    }\n    t6 = traceTriangle(v3, v4, v1, pos, dir, norm6);\n    if (t6 < t && t > 0.0) {\n        t = t6;\n        normal = norm6;\n    }\n    if (t < INF) {\n        normal = normalize(normal);\n    }\n    \n    return t;  \n    \n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 pyNorm;\n    float pyT = tracePy(pos, dir, pyNorm);\n    if (pyT < dist) {\n        return true;\n    }  \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT > 0.0 && cylT < dist);\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0)\n        normal = -normal;\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = n1 * sinA / n2;\n    if (sinB > 1.0) {\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return tang * sinB + normal * cosB;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - 2.0;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec3 minecraftScreen(in vec2 w) {\n   vec3 a = vec3(w, 1) / iResolution - 0.5;\n    vec3 b, c, d, e = a, tmp;\n    float x = 0.2, y, z = 2.0;\n    y = 3.0 * cos(x * z);\n    vec3 pix = vec3(x, y, z);\n    vec3 t = vec3(1, 2, 0);\n\n    for (float i = 0.0; i < 9.0; i += 0.01) {\n        pix += a * i * 0.01;\n        c = pix;\n        b = floor(c) * 0.3;\n        d = fract(c);\n        if (cos(b.z) + sin(b.x) > b.y + 1.0) {\n            b.y += 1.0;\n            if (d.y - 0.04 * cos((c.x + c.z) * 40.0) > 0.8) {\n                tmp = t;\n            }\n            else {\n                tmp = d.y * t.yxz;\n            }\n\t    \te = tmp/i;\n            break;\n        }\n    }\n    return e.rgb;\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir, in vec2 w)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0, absorption = 10.0, totalAbs = 0.0;\n    for (int i = 0; i < 70; i++) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(minecraftScreen(w), 1.0 - opacity) + vec4(vec3(0.5, 1, 0.7) * totalAbs, 1.0 - opacity);\n}\n\n\n\nvec3 randVals;\nvec3 randDir;\n\nvec3 computeLighting(vec3 worldPos, vec3 color, vec3 normal, vec3 viewVec) {\n    vec3 light1Pos, light2Pos, light3Pos, toLight1, toLight2, toLight3;\n    bool occl1, occl2, occl3;\n    float light1Att, light2Att, light3Att;\n    light1Pos = LIGHT1_POS + randDir * LIGHT1_RADIUS;\n    toLight1 = light1Pos - worldPos;\n    occl1 = isOccluded(worldPos + normalize(toLight1) * 1e-3, light1Pos);\n    light1Att = 20.0f / dot(toLight1, toLight1) * (occl1 ? 0.0 : 1.0);\n\n    light2Pos = LIGHT2_POS + randDir * LIGHT2_RADIUS;\n    toLight2 = light2Pos - worldPos;\n    occl2 = isOccluded(worldPos + normalize(toLight2) * 1e-3, light2Pos);\n    light2Att = 20.0f / dot(toLight2, toLight2) * (occl2 ? 0.0 : 1.0);\n    \n    light3Pos = LIGHT3_POS + randDir * LIGHT3_RADIUS;\n    toLight3 = light3Pos - worldPos;\n    occl3 = isOccluded(worldPos + normalize(toLight3) * 1e-3, light3Pos);\n    light3Att = 20.0f / dot(toLight3, toLight3) * (occl3 ? 0.0 : 1.0);\n\n\n    return color * (\n        max(0.0f, dot(normal, normalize(toLight1))) * light1Att * LIGHT1_COLOR\n        + max(0.0f, dot(normal, normalize(toLight2))) * light2Att * LIGHT2_COLOR\n        + max(0.0f, dot(normal, normalize(toLight3))) * light3Att * LIGHT3_COLOR\n        + textureLod(iChannel1, viewVec, 10.0) * 0.2\n    ).rgb;\n} //soft shadows \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenUV = fragCoord/iResolution.xy;\n    randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals * 2.0 - 1.0);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0)/iResolution.x; //Anti-aliasing\n\n    vec3 forward = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(forward, up));\n    up = normalize(cross(right, forward));\n    vec3 viewVec = normalize(forward + uv.x * right + uv.y * up);\n\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float curN = 1.0;\n    float nextN = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float GLASS_T = 1.0 - GLASS_R;\n\n    vec3 currentPos = CAMERA_POS;\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    int iterationType;\n    vec3 color;\n    float mult = 1.0;\n    float n1, n2;\n\n    for (int i = 0; i < 7; ++i) {\n        vec3 normal = vec3(0, 0, 0);\n        vec3 pos;\n        float t = traceSphere(currentPos - LIGHT1_POS, viewVec, LIGHT1_RADIUS, normal);\n        if (t != INF) {\n            iterationType = EMISSION;\n            pos = currentPos + t * viewVec;\n            color = vec3(LIGHT1_COLOR.r + texture(iChannel0,  pos.xz * pos.y).r - 0.5, \n            texture(iChannel0,  pos.xz * pos.y).g + LIGHT1_COLOR.g - 0.5, \n            texture(iChannel0,  pos.xz * pos.y).b + LIGHT1_COLOR.b - 0.5);\n        }\n        \n        float l2_t = traceSphere(currentPos - LIGHT2_POS, viewVec, LIGHT2_RADIUS, normal);\n        if (t > l2_t) {\n            t = l2_t;\n            iterationType = EMISSION;\n            pos = currentPos + t * viewVec;\n            color = vec3(LIGHT2_COLOR.r + texture(iChannel0,  pos.xz * pos.y).r - 0.5, \n            texture(iChannel0,  pos.xz * pos.y).g + LIGHT2_COLOR.g - 0.5, \n            texture(iChannel0,  pos.xz * pos.y).b + LIGHT2_COLOR.b - 0.5);\n        }\n       float l3_t = traceSphere(currentPos - LIGHT3_POS, viewVec, LIGHT3_RADIUS, normal);\n        if (t > l3_t) {\n            t = l3_t;\n            iterationType = EMISSION;\n            pos = currentPos + t * viewVec;\n            color = vec3(LIGHT3_COLOR.r + texture(iChannel0,  pos.xz * pos.y).r - 0.5, \n            texture(iChannel0,  pos.xz * pos.y).g + LIGHT3_COLOR.g - 0.5, \n            texture(iChannel0,  pos.xz * pos.y).b + LIGHT3_COLOR.b - 0.5);\n        }\n        vec3 cylNormal = normal;\n        float cylT = traceCylinder(currentPos, viewVec, cylNormal);\n        if (cylT < t) {\n            t = cylT;\n            pos = currentPos + t * viewVec;\n            color = texture(iChannel0,  pos.xz * pos.y).rgb;\n            normal = cylNormal;\n            iterationType = DIFFUSE;\n        }\n        float floorT = (-1.2 - currentPos.y) / viewVec.y;\n        if (floorT > 0.0 && floorT < t && length(currentPos + floorT * viewVec) < 15.0f) {\n            t = floorT;\n            pos = currentPos + t * viewVec;\n            color = texture(iChannel2, pos.xz * 0.2).rgb;\n            normal = vec3(0, 1, 0);\n            iterationType = DIFFUSE;\n        }\n         \n        vec3 pyNorm = normal;\n        float pyT = tracePy(currentPos, viewVec, pyNorm);\n        if (pyT < t) {\n            t = pyT;\n            normal = pyNorm;\n            if (randVals.x * 0.1 < GLASS_R) {\n                iterationType = REFLECTION;\n            } else {\n                iterationType = REFRACTION;\n                if (dot(viewVec, normal) > 0.0){\n                    n1 = AIR_N;\n                }else{\n                    n2 = GLASS_N;\n                }\n            }\n        }\n        if (t != INF) {\n            if (iterationType == EMISSION) {\n                fragColor.rgb = color;\n                break;\n            } else if (iterationType == DIFFUSE) {\n                fragColor.rgb += mult * computeLighting(currentPos + t * viewVec, color, normal, viewVec);\n                break;\n            } else if (iterationType == REFLECTION) {\n                currentPos += viewVec * t;\n                fragColor.rgb += mult * computeLighting(currentPos + t * viewVec, color, normal, viewVec);\n                viewVec = reflect(viewVec, normal);\n                currentPos += viewVec * 1e-5;\n            } else if (iterationType == REFRACTION) {\n                currentPos += viewVec * t;\n                viewVec = refraction(viewVec, normal, curN, nextN);\n                currentPos += viewVec * 1e-5;\n                vec4 fog = sampleFog(currentPos, viewVec, fragCoord);\n                fragColor.rgb += fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n                float tmp = curN;\n                curN = nextN;\n                nextN = tmp;\n            }\n        } else {\n            fragColor += mult * texture(iChannel1, viewVec) * 0.3;\n            break;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenUV = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, screenUV) + texture(iChannel1, screenUV);\n}","name":"Buffer B","description":"","type":"buffer"}]}