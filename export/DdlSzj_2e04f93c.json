{"ver":"0.1","info":{"id":"DdlSzj","date":"1669213424","viewed":246,"name":"Binaural Beats ðŸ”Š","username":"blurryroots","description":"Turn your sound on and synchronize your brain waves. Wobble. Jives quite nicely with the song.\nLines based on Siri Ripples by MatHack https://www.shadertoy.com/view/4sVSzw","likes":4,"published":3,"flags":8,"usePreview":0,"tags":["sound","audio","beats","binaural"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","previewfilepath":"/media/ap/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n#define SOUND_IN_PIXEL 0\n#define SOUND_IN_SOUND 1\n\n#define SOUND_IN_TYPE SOUND_IN_PIXEL\n\n#if (SOUND_IN_TYPE == SOUND_IN_SOUND)\n// Message code by FabriceNeyret2 => https://www.shadertoy.com/view/MtyXRW\n\n// --- access to the image of ascii code c\n//#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): texture( iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.))\n//#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureLod( iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), \\\n//                                                                               log2(length(fwidth(U/16.*iResolution.xy))) )\n#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0)\n#define endMsg  return length(T.yz)==0. ? 0. : T.x\nfloat message(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0.);   // or: initMsg;\n    C(83);C(111);C(117);C(110);C(100);C(32);C(105);C(110); // message \"Sound in\"\n    return length(T.yz)==0. ? -1. : T.x; // or: endMsg;\n}\n#else\n// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\n\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; // 00110111 01010111 01100001 01110000\n    if (int(uv.y)==1) i=  626348112/bit; // 00100101 01010101 01010000 01010000\n    if (int(uv.y)==0) i= 1735745872/bit; // 01100111 01110101 01100001 01010000\n \treturn float(i-2*(i/2));\n}\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    #if (SOUND_IN_TYPE == SOUND_IN_SOUND)\n    //  if (iResolution.y<200.) to display only in the icon \n    if (iResolution.y<2000.) {\n        float c = message((fragCoord/iResolution.y-vec2(.01,.1))*8.);\n        if(c>=0.) {\n            vec3 cc = vec3(\n                0.1 + 0.9 * texture(iChannel0, vec2(0.11,0.0)).x,\n                0.1, //+ 0.2 * texture(iChannel0, vec2(0.33,0.0)).x,\n                0.5 //+ 0.5 * texture(iChannel0, vec2(0.66,0.0)).x\n            );\n            fragColor = vec4(c*cc, 1.0);\n            return;\n        }\n    }\n    #else\n    // Overlay by FabriceNeyret2 https://www.shadertoy.com/view/MtyXRW\n    if (iResolution.y<2000.) {float c=message(fragCoord.xy/8.);if(c>=0.){fragColor=vec4(c);return;}}  \n    #endif\n\n    const int WAVES = 3;\n    vec2 uvn = fragCoord.xy / iResolution.xy;\n\tvec2 uv = -1.0 + 2.0 * uvn;\n    float time = iTime * 10.3;\n       \n  \tvec4 cc = vec4(0.0);    \n    vec3 r = vec3(1.0, 0.0, 0.0);\n    vec3 g = vec3(0.0, 1.0, 0.0);\n    vec3 b = vec3(0.0, 0.0, 1.0);\n    float thickness = 0.004;     \n\n    // Lines concept by MatHack\n    // --- https://www.shadertoy.com/view/4sVSzw\n    for(int k=0; k<WAVES; k++) {\n        float i = float(k);\n\n        float K = 2.5 + 3.;\n        float B = 1.0 + 2.0;\n        float x = uv.x * 3.;\n        float bounce = 2.0*texture(iChannel0, vec2(0.33,0.0)).x;\n        float att = (1.0 - (i*0.3)) * 0.4 * bounce;\n        float split = uv.y + (att*pow((K/(K+pow(x, K))), K) * cos((B*x)-(time+(i*10.*phi))));\n        \n        vec3 c;\n        \n        if (0 == k) {\n            c = r;\n        }\n        else if (1 == k) {\n            c = g;\n        }\n        else if (2 == k) {\n            c = b;\n        }\n      \n        vec3 line = smoothstep(0.0, 1.0-phi0, abs(thickness / split)) * c;\n        cc += vec4(line, 1.0);\n    }\n    // ---\n    \n    fragColor = cc;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\nvec2\nprocess_beat (float base, float beat, float time) {\n    float l = sin(TWOPI * (base + 00.0) * time);\n    float r = sin(TWOPI * (base + beat) * time);\n    \n    return vec2 (l, r);\n}\n\nvec2\nmainSound (int samp, float time) {\n    float volume = phi0;\n    float base = 432.0;\n    \n    vec2 s1 = process_beat (base / (phi),    beat, time);\n    vec2 s2 = process_beat (base / (PI*phi), beat, time);\n    vec2 s = vec2 (0.0);\n         s = mix (s, s1, 1.00);\n         s = mix (s, s2, phi0i);\n    \n    return volume * s;\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\nconst float phi = (1. + sqrt (5.)) / 2.;\nconst float phi0 = phi - 1.;\nconst float phi0i = 1. - phi0;\nconst float PI = 355./113.;\nconst float TWOPI = 2.0*PI;\n\nfloat beat = PI*phi;\n\nfloat psin (float t) { return (sin (t) + 1.0) / 2.0; }\nfloat pcos (float t) { return (cos (t) + 1.0) / 2.0; }","name":"Common","description":"","type":"common"}]}