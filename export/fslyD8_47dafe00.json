{"ver":"0.1","info":{"id":"fslyD8","date":"1642022965","viewed":244,"name":"2D wave FDM with obstacles","username":"Masterchef365","description":"Draw obstacles using the mouse!","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["wave","fdm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    vec4 r = texture(iChannel0, uv);\n    float u = r.x;\n    bool obstacle = r.z > 0.;\n    \n    u *= 20.;\n    \n    vec3 color;\n    if (u > 0.) {\n        color = vec3(1., 0.1, 0.1) * u;\n    } else {\n        color = vec3(0.1, 0.4, 1.) * -u;\n    }\n    \n    if (obstacle) color = vec3(0.5);\n   \n   \n    fragColor = vec4(color, 1.);\n    //fragColor = texture(iChannel0, uv);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nconst float c = 1.; // Courant number\n\nvec2 coord_to_uv(vec2 coord) {\n    vec2 uv = coord / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = coord_to_uv(fragCoord);\n\n    // Mouse interaction\n    vec2 mouse_pos_uv = coord_to_uv(iMouse.xy);\n    bool mouse_circ = (iMouse.z > 0.) && distance(mouse_pos_uv, uv) < 0.1;\n    \n    // Border\n    const float border = 1.;\n    bool in_border = any(lessThan(fragCoord, vec2(border)))\n        || any(greaterThan(fragCoord, iResolution.xy - vec2(border)));\n    \n    // Obstacles\n    if (in_border) {\n        fragColor = vec4(0.);\n        return;\n    }\n\n    // Initialization\n    if (iFrame <= 1) {\n        float k = float(length(uv) < 0.1);\n        fragColor = vec4(k, k, 0., 1.);\n        return;\n    }\n    \n    // Compute kernel\n    vec3 center_prev = texture(iChannel0, fragCoord.xy / iResolution.xy).xyz;\n    float center = center_prev.x;\n    float prev = center_prev.y;\n    bool obstacle = center_prev.z > 0.;\n\n    float up = texture(iChannel0, (fragCoord.xy + vec2(0, 1)) / iResolution.xy).x;\n    float down = texture(iChannel0, (fragCoord.xy + vec2(0, -1)) / iResolution.xy).x;\n\n    float right = texture(iChannel0, (fragCoord.xy + vec2(-1, 0)) / iResolution.xy).x;\n    float left = texture(iChannel0, (fragCoord.xy + vec2(1, 0)) / iResolution.xy).x;\n    \n    float next;\n    \n    // Solve differential equation\n    float ddy = (up - 2. * center + down);\n    float ddx = (right - 2. * center + left);\n    \n    if (iFrame <= 1) {\n        // n = 1 special case\n        next = center - .5 * c * (ddy + ddx);\n    } else {\n        next = -prev + 2. * center + .5 * c * (ddy + ddx);\n    }\n  \n    if (obstacle) next = 0.;\n    \n    fragColor = vec4(next, center, mouse_circ || obstacle, 1.);\n}\n\n\n","name":"Buffer A","description":"","type":"buffer"}]}