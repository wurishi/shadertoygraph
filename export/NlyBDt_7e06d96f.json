{"ver":"0.1","info":{"id":"NlyBDt","date":"1665416178","viewed":199,"name":"Erode, Dilate and Blur, filter","username":"Envy24","description":"Use to control kernel order.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blur","filter","dilate","erode","morphologic"],"hasliked":0,"parentid":"NtKfD3","parentname":"Moda filter"},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                           iResolution\n#define TO_TEX_COORDS(SC)         ( (SC) / (R.xy) )                  // in range x=[0.0; 1.0], y=[0.0; 1.0]\n#define TEX0(TC)                  ( texture(iChannel0, (TC)) )\n#define TEXF0(SC)                 ( texelFetch(iChannel0, ivec2(SC), 0) )  // (channel, integer coordinates, mipmap level)\n#define READ_PIXEL(SC)            ( TEX0(TO_TEX_COORDS(SC)) )\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n#define NMY                       ( iMouse.y / R.y )                 // in range [0.0; 1.0]\n\nfloat luminosity(vec4 color)\n{\n    //https://www.shadertoy.com/view/XdXSzX\n    //return (color.x + color.y + color.z) * 0.3333333;\n    /**/\n    vec4 sRGB = vec4(0.2126, .7152, 0.0722, 1.);\n    return dot(color, sRGB);\n    /**\n    vec4 SD_Tel = vec4(0.3, .59, 0.11, 1.);\n    return dot(color, SD_Tel);\n    /**/\n}\n\nvec4 filter_(in vec2 SC, in float order)\n{\n    float O = order, min_ = 2., max_ = -1.;\n    vec4 min_c = vec4(0), max_c = vec4(0);\n\n    for (float r = -O; r <= O; r += 1.)\n    {\n        for (float c = -O; c <= O; c += 1.)\n        {\n            vec4 C = READ_PIXEL(SC + vec2(r, c));\n            float v = luminosity(C);\n            \n            min_ = min(min_, v);\n            max_ = max(max_, v);\n            \n            min_c = \n                min_ == v ?\n                    C :\n                    min_c;\n\n            max_c = \n                max_ == v ?\n                    C :\n                    max_c;\n        }\n    }\n    \n    //return (min_c + max_c) * 0.5; // blur\n    //return max_c;                 // dilate\n    //return min_c;                 // erode\n    \n    float t = fract(iTime * 0.1);\n    vec4 mean = (min_c + max_c) * 0.5;\n    \n    return\n        min_c * float(t < .33) +\n        max_c * float(t >= .33 && t < .66) +\n        mean * float(t >= .66);  \n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    float order = \n        LMB_IS_HOLD == true ?\n            1. + NMY * 9. :\n            5.;\n\n    O = filter_(SC, order); \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}","name":"Common","description":"","type":"common"}]}