{"ver":"0.1","info":{"id":"Xcsfz8","date":"1723357476","viewed":34,"name":"PISSS Diffuse LUT","username":"SelfishKrus","description":"ref:\nGPU Pro 2\nhttps://www.shadertoy.com/view/dt2SWh","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["skin","lut","pisss"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// uncomment it to visualize the LUT\n#define SHOWLUT \n\n// #define GAMMA\n// #define TONE_MAPPING\n#define ROTATION\n#define PI 3.14159265359\n#define MAX_ITERATION 360\n\n#define CURVATURE 0.2\n// WRAP = 0 ---> Lambert\n// WRAP = 1 ---> Half-Lambert\n#define WRAP 0.\n#define LUM 1.\n\nvec3 ACESToneMapping(vec3 color, float adapted_lum) \n{\n    const float A = 2.51;\n    const float B = 0.03;\n    const float C = 2.43;\n    const float D = 0.59;\n    const float E = 0.14;\n\n    color *= adapted_lum;\n    return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n\n// Gaussian Function\nfloat Gaussian ( float v , float r )\n{\n    return 1.0 / sqrt (2.0 * PI * v ) * exp(- (r * r) / 2.0 / v);\n}\n\n// to approximate the skin diffustion profile with six Gaussian functions for each channel\nvec3 DiffusionProfile(float r)\n{\n    return Gaussian ( 0.0064 * 1.414 , r ) * vec3( 0.233 , 0.455 , 0.649 ) +\n    \t   Gaussian ( 0.0484 * 1.414 , r ) * vec3( 0.100 , 0.336 , 0.344 ) +\n    \t   Gaussian ( 0.1870 * 1.414 , r ) * vec3( 0.118 , 0.198 , 0.000 ) +\n    \t   Gaussian ( 0.5670 * 1.414 , r ) * vec3( 0.113 , 0.007 , 0.007 ) +\n    \t   Gaussian ( 1.9900 * 1.414 , r ) * vec3( 0.358 , 0.004 , 0.000 ) +\n    \t   Gaussian ( 7.4100 * 1.414 , r ) * vec3( 0.078 , 0.000 , 0.000 ) ;\n}\n\n// ----------------------------\n// to compute the Subsurface LUT\n// theta: [-PI, 0], curvature: [0, 1]\n// R(distance) - diffusion profile\nvec3 computeSSLUT(float theta, float curvature)\n{\n    vec3 normFactor = vec3(0.);\n    vec3 warppedLight = vec3(0.);\n    \n    float r = 1. / curvature; // radius: [1, inf]\n    \n    float angleInterval = 2. * PI / float(MAX_ITERATION);\n    \n    for(int i = 0; i < MAX_ITERATION; i += 1){\n        float deltaX = float(i) * angleInterval;\n        float dist = abs(2. * r * sin(deltaX * 0.5));\n        \n        vec3 weight = DiffusionProfile(dist);\n        \n        float irradiance = (cos(theta + deltaX) + WRAP) / (1.+WRAP);\n        irradiance = max(0., irradiance);\n        warppedLight += irradiance * weight;\n        normFactor += weight;\n    }\n    \n    return warppedLight / normFactor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col; \n    \n    #ifdef SHOWLUT\n        col = computeSSLUT(PI  - PI * uv.x, uv.y);\n        #ifdef GAMMA\n            col = pow( col, vec3(0.4545));\n        #endif\n        #ifdef TONE_MAPPING\n            col = ACESToneMapping(col, LUM);\n        #endif \n        fragColor = vec4(col, 1.);\n    #else \n        // draw a sphere\n        vec2 p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n        \n        #ifdef ROTATION\n            float an = 2.0 + 0.5*iTime + 6.2831*iMouse.x/iResolution.x;\n        #else\n            float an = 2.0 + 0.5 + 6.2831*iMouse.x/iResolution.x;\n        #endif\n\n        vec3 ww = vec3(cos(an),0.0,sin(an));\n        vec3 uu = vec3(-ww.z,0.0,ww.x);\n        vec3 vv = vec3(0.0,1.0,0.0);\n        vec3 ro = -2.5*ww;\n\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n\n        float b = dot( rd, ro );\n        float c = dot( ro, ro ) - 1.0;\n        float h = b*b - c;\n        if( h>0.0 )\n        {\n            float t = -b - sqrt(h);\n            vec3 pos = ro + t*rd;\n            vec3 nor = normalize(pos); \n            col = vec3(1.0,0.9,0.8) * computeSSLUT( acos(dot(nor,vec3(0.57703))), CURVATURE );\n            \n            #ifdef GAMMA\n                col = pow( col, vec3(0.4545));\n            #endif \n            #ifdef TONE_MAPPING\n                col = ACESToneMapping(col, LUM);\n            #endif\n\n            fragColor = vec4(col, 1.);\n        }\n        else\n        {\n            fragColor = vec4(0.);\n        }\n    #endif\n}","name":"Image","description":"","type":"image"}]}