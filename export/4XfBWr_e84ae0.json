{"ver":"0.1","info":{"id":"4XfBWr","date":"1728319656","viewed":14,"name":"firepond","username":"secondthumb","description":"Fireflies on a pond","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ripples"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Function to create a ripple effect for a raindrop\nfloat ripple(vec2 uv, vec2 dropPos, float time, float speed, float frequency, float amplitude)\n{\n    float dist = distance(uv, dropPos);\n    float rippleEffect = sin(dist * frequency - time * speed) * amplitude / (dist + 0.1);\n    float fade = exp(-time * 0.5);\n    return rippleEffect * fade;\n}\n\n// Function to create firefly glow effect with smaller size\nfloat firefly(vec2 uv, vec2 flyPos, float size, float brightness)\n{\n    float dist = distance(uv, flyPos);  // Distance from the firefly's position\n    float intensity = exp(-pow(dist / size, 2.0));  // Smooth glow effect (smaller)\n    return brightness * intensity;\n}\n\n// Function for the firefly's shadow reflection on the pond\nfloat fireflyShadow(vec2 uv, vec2 flyPos, float size, float brightness)\n{\n    vec2 reflectedPos = vec2(flyPos.x, 1.0 - flyPos.y);  // Reflect firefly vertically on the \"pond\"\n    float dist = distance(uv, reflectedPos);\n    float intensity = exp(-pow(dist / size, 2.0)) * 0.3;  // Dimmer for shadow\n    return brightness * intensity;\n}\n\n// Function to make fireflies move naturally with wider patterns across the frame\nvec2 fireflyMovement(float time, float speed, float offsetX, float offsetY)\n{\n    // Expand the movement range to cover more of the frame\n    float x = 0.5 + 0.6 * sin(time * speed + offsetX);  // Wider horizontal movement with sine wave\n    float y = 0.5 + 0.6 * cos(time * speed + offsetY);  // Wider vertical movement with cosine wave\n    return vec2(x, y);  // Return the firefly's position\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n\n    float i = 0.0;\n    float O = 0.0;\n    vec4 p = vec4(uv, 0.0, 1.0);\n    float t = iTime * 0.5;  // Slowed down time\n\n    // Main loop for the vortex\n    for (float i = 0.0; i < 50.0; i++) {\n        p.z += t;\n        float d = t;\n        for (float j = -3.0; j < 3.0; j++) {\n            vec4 q = p;\n            q.z = fract(q.z) - 0.5 - j;\n            float k = floor(p.z) + j;\n            q.xy *= mat2(cos(k * 0.75), -sin(k * 0.75), sin(k * 0.75), cos(k * 0.75));\n            q.x += sin((k - t) * 0.5);\n            d = min(d, length(q.xy) - 0.07);\n        }\n        O += 8e-4 * (2.0 + cos(p.z / 4.0 + t + 0.0));\n        t += d;\n    }\n\n    // Sunset color gradient (purple at the top, orange/red at the horizon)\n    vec3 sunsetColor = mix(vec3(0.2, 0.0, 0.3),  // Deep purple at the top\n                           vec3(1.0, 0.4, 0.2),  // Red/orange at the horizon\n                           uv.y);\n\n    // Reflection of the vortex pattern (avoid green by focusing on red/purple tones)\n    vec3 reflection = vec3(0.6 + 0.4 * sin(O + p.x), 0.3 + 0.2 * cos(O + p.y), 0.4 + 0.3 * sin(O + p.z + iTime));\n\n    // Raindrop ripple effect\n    float ripple1 = ripple(uv, vec2(0.3, 0.5), iTime * 0.3, 1.5, 20.0, 0.04); // Drop 1\n    float ripple2 = ripple(uv, vec2(0.7, 0.8), iTime * 0.3, 1.5, 20.0, 0.04); // Drop 2\n    float rippleEffect = ripple1 + ripple2;\n\n    // Firefly movement: spread out more across the entire frame\n    vec2 fireflyPos1 = fireflyMovement(iTime, 0.6, 0.0, 1.0);  // Firefly 1, wider movement\n    vec2 fireflyPos2 = fireflyMovement(iTime, 0.5, 2.0, 1.5);  // Firefly 2, wider movement\n    vec2 fireflyPos3 = fireflyMovement(iTime, 0.7, 1.5, 2.0);  // Firefly 3, new pattern\n    vec2 fireflyPos4 = fireflyMovement(iTime, 0.9, 0.5, 2.5);  // Firefly 4, new pattern\n\n    // Firefly glow (size and brightness)\n    float firefly1 = firefly(uv, fireflyPos1, 0.03, 0.7);  // Smaller, brighter firefly\n    float firefly2 = firefly(uv, fireflyPos2, 0.02, 0.5);  // Smaller firefly\n    float firefly3 = firefly(uv, fireflyPos3, 0.04, 0.6);  // Another smaller one\n    float firefly4 = firefly(uv, fireflyPos4, 0.03, 0.4);  // Slightly dimmer\n\n    // Firefly shadow on the pond\n    float fireflyShadow1 = fireflyShadow(uv, fireflyPos1, 0.03, 0.5);  // Shadow of firefly 1\n    float fireflyShadow2 = fireflyShadow(uv, fireflyPos2, 0.02, 0.4);  // Shadow of firefly 2\n    float fireflyShadow3 = fireflyShadow(uv, fireflyPos3, 0.04, 0.5);  // Shadow of firefly 3\n    float fireflyShadow4 = fireflyShadow(uv, fireflyPos4, 0.03, 0.3);  // Shadow of firefly 4\n\n    // Easing firefly entrance and exit (fade in/out near the edges of the screen)\n    firefly1 *= smoothstep(0.0, 1.0, uv.x) * smoothstep(0.0, 1.0, uv.y);  // Eases in and out on X and Y\n    firefly2 *= smoothstep(0.0, 1.0, uv.x) * smoothstep(0.0, 1.0, uv.y);\n    firefly3 *= smoothstep(0.0, 1.0, uv.x) * smoothstep(0.0, 1.0, uv.y);\n    firefly4 *= smoothstep(0.0, 1.0, uv.x) * smoothstep(0.0, 1.0, uv.y);\n\n    // Combine the reflection, ripple, and sunset effects\n    vec3 finalColor = mix(sunsetColor, reflection, 0.5) + rippleEffect;\n\n    // Add firefly glow and shadow effect\n    finalColor += vec3(firefly1 + firefly2 + firefly3 + firefly4);  // Add firefly glow to the final color\n    finalColor += vec3(fireflyShadow1 + fireflyShadow2 + fireflyShadow3 + fireflyShadow4);  // Add firefly shadow\n\n    // Output the final color\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}