{"ver":"0.1","info":{"id":"Xl33Rf","date":"1489120522","viewed":191,"name":"Rounded Edge","username":"fscur","description":"Test smoothsies","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["tests"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415926535897932384626433832795;\n\nfloat sinedRange(float x, float min, float max)\n{ \n    return (sin(x * PI) * 0.5 + 0.5) * (max - min) + min;\n}\n\nfloat cossinedRange(float x, float min, float max)\n{ \n    return (cos(x * PI) * 0.5 + 0.5) * (max - min) + min;\n}\n\nfloat subtract(float d1, float d2)\n{\n    return max(-d1,d2);\n}\n\nfloat quad(vec2 position, vec2 size)\n{\n  return length(max(abs(position) - size, 0.0));\n}\n\nfloat roundedQuad(vec2 position, vec2 size, float radius)\n{\n  return length(max(abs(position) - (size * (1.0 - radius)), 0.0)) - radius;\n}\n\nfloat circle(vec2 p, float r)\n{\n\treturn length(p) - r;\n}\n\n\nfloat contour(in float dist, in float w) \n{\n    return smoothstep(0.98 - w, 0.98 + w, dist);\n}\n\nfloat samp(in float dist, in float w) \n{\n    return contour(dist, w);\n}\n\nfloat createOuterEdge(vec2 position, vec2 size)\n{\n\tfloat s0 = quad(position, size);\n    float dist = exp(-s0 * 100.0);\n    float width = fwidth(dist);\n    return clamp(contour(dist, width), 0.0, 1.0);\n}\n\nfloat createInnerEdge(vec2 position, vec2 size, float radius)\n{\n\tfloat s0 = 1.0 - roundedQuad(position, size, radius);\n    float dist = s0;\n    float width = fwidth(dist);\n    return clamp(contour(dist, width), 0.0, 1.0);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    float aspect = iResolution.x/iResolution.y;\n    uv.x *= aspect;\n    uv *= 1.5;\n    \n    vec2 q = uv;\n\n    float outerEdge = createInnerEdge(q, vec2(1.0, 1.0), 0.2);\n    float innerEdge = createInnerEdge(q, vec2(0.9, 0.9), 0.1);\n    \n    vec3 col = vec3(0.0);\n    col += vec3(1.0, 0.0, 0.0) * (outerEdge - innerEdge);\n    \n    float a = iTime * PI;\n    vec2 p = normalize(vec2(cos(a), sin(a)));\n    \n    fragColor = vec4(col, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}