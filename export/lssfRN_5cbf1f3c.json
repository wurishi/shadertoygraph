{"ver":"0.1","info":{"id":"lssfRN","date":"1550917399","viewed":407,"name":"[ Complex ] - 2D maps","username":"Friend","description":"Building complex maps library and visualization tool, please give suggestions for further improvements.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["2d","complex","functions","maps"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define res_        iResolution\n#define time_       iTime\n#define pi_         3.14159265\n#define tau_        2.*pi_\n\n#define crot(a)     mat2(cos(a),-sin(a),sin(a),cos(a))\n#define ccrot(a)    mat2(cos(a),sin(a),-sin(a),cos(a))\n#define dom(f,s)    (2. * f.xy - res_.xy) / res_.y * s\n\nfloat grid(vec2 p);\nvec2  zpow(vec2 z, float c);\nvec2  zexp(float c, vec2 z);\nvec2  zadd(vec2 z, float c);\nvec2  zmul(vec2 z0, vec2 z1);\nvec2  zdiv(vec2 z0, vec2 z1);\nvec2  zpow(vec2 z, float c);\nvec2  zsqrt(vec2 z);\nvec2  zconj(vec2 z);\n\nvec2  zsin(vec2 z);                  \nvec2  zcos(vec2 z);\nvec2  ztan(vec2 z);\nvec2  zlog(vec2 z);\nvec2  zinv(vec2 z);\n\n\n// ---------------------------------------------------------------------\nvoid mainImage(out vec4 o, vec2 f) {\n    float scale_range = abs(10. * sin(.5 * time_)); \n        \n    #define AA 5.\n    vec3 c = vec3(.0);\n    float scale = 2. + scale_range;\n    float cr = 0.;\n    for(float m = 0.; m < AA; m++)\n    for(float n = 0.; n < AA; n++) {\n        // Cartesian plane\n        // -------------------------------------------------------------\n        vec2 o = vec2(m, n) / AA - .5;\n        vec2 p = ((f + o) * 2. - res_.xy) / min(res_.x, res_.y) * scale;\n\n        // Complex map\n        // -------------------------------------------------------------\n        vec2 z = p; z = zsqrt(zmul(z, zconj(z)));\n        \n        vec2 g = mix(p, z, 1.);\n        float dg  = grid(g);\n\t\tcr   = length(g - vec2(sin(time_)*3., 0.)) - 2.;\n\n        // Shading\n        // -------------------------------------------------------------\n        c += vec3(1.) * smoothstep(1., .1, dg);\n        c += vec3(0., 0.2, 2.) * smoothstep(2.1, .1, dg);\n    }\n    \n    c /= AA * AA;\n    c = sqrt(c);\n    c -= vec3(1., .5, 0.)* smoothstep(.2, .1, cr);\n    c += vec3(.2, 1.1, .2)* smoothstep(.15, .01, abs(cr));\n    \n    o = vec4(c, 1.);\n}\n// ----------------------------------------------------------------------\n\nfloat grid(vec2 p) {\n\treturn min(\n        (abs(fract(p-.49)-.5) / fwidth(p)).x,\n        (abs(fract(p-.49)-.5) / fwidth(p)).y \n    );\n}\n\nvec2 zexp(float c, vec2 z) {\n\treturn vec2(\n    \tpow(c, z.x) * cos(z.y * log(c)),\n        pow(c, z.x) * sin(z.y * log(c))\n    );\n}\n\nvec2 zadd(vec2 z, float c) {\n    return vec2(z.x + c, z.y);\n}\n\nvec2 zmul(vec2 z0, vec2 z1)  {\n    return vec2(\n        z0.x * z1.x - z0.y * z1.y,\n        z0.x * z1.y + z0.y * z1.x\n    );\n}\n\nvec2 zdiv(vec2 z0, vec2 z1)  {\n    float d = dot(z1, z1);\n    return vec2(dot(z0, z1), z0.y * z1.x - z0.x * z1.y) / d; \n}\n\nvec2 zpow(vec2 z, float c) {\n    float r = length(z);\n    float a = atan(z.y, z.x);\n    return pow(r, c) * vec2(cos(a * c), sin(a * c)); \n}\n\nvec2 zsqrt(vec2 z) {\n    float m = length(z);\n    return sqrt(.5 * vec2(m + z.x, m - z.x)) * vec2(1., sign(z.y));\n}\n\nvec2 zconj(vec2 z) { \n    return vec2(z.x, -z.y); \n}\n\nvec2 zsin(vec2 z) {\n    vec2 d = vec2(exp(z.y), exp(-z.y));\n\treturn vec2(sin(z.x) * (d.x+d.y)*.5, cos(z.x) * (d.x-d.y)*.5);\n}\n\nvec2 zcos(vec2 z) {\n    vec2 d = vec2(exp(z.y), exp(-z.y));\n \treturn vec2(cos(z.x) * (d.x+d.y)*.5, -sin(z.x) * (d.x-d.y)*.5);\n}\n\nvec2 ztan(vec2 z) {\n\tvec2 d = vec2(exp(z.y), exp(-z.y));\n \tfloat e = cos(z.x), s = (d.x-d.y)*.5;\n \treturn vec2(sin(z.x) * e, s * (d.x+d.y)*.5) / (e*e+s*s);\n}\n\nvec2 zlog(vec2 z) {\n    return vec2(log(length(z)), atan(z.y, z.x));\n}\n\nvec2 zinv(vec2 z) {\n    return vec2(z.x, -z.y) / dot(z, z);\n}\n","name":"Image","description":"","type":"image"}]}