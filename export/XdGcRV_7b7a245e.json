{"ver":"0.1","info":{"id":"XdGcRV","date":"1522547041","viewed":257,"name":"Creamy Ripples","username":"Hamneggs","description":"IQ's smooth hsv->rgb, some classic inversion, and the glorious return (aka a slow implementation) of fast rain.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["2d","ripples","fast","water","fastwater","fastripples"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// This is my favorite thing now. It's IQ's smooth hsv to rgb.\nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float r = texture(iChannel0, fragCoord/iResolution.xy).r*8.;\n    r = clamp(r,0.,1.);\n    vec3 c = hsv2rgb_smooth(vec3(iTime*.05,1,1))*r;\n   \tfragColor = vec4(1.-c,1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tfragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tfragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define BUFFER_1 iChannel0\n#define BUFFER_2 iChannel1\n#define DAMPING .999\n\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(192.9898,78.233))) * 43758.5453);\n}\n\nbool rainDrop( vec2 p )\n{\n    return rand(p+rand(vec2(iTime*100.,-iTime))) > .99995;\n}\n\nfloat getSmoothValue( in sampler2D s, vec2 p )\n{\n    vec3 d = vec3( .66/iResolution.xy, 0.0);\n\n    return (texture(s,p-d.xz).r +\n            texture(s,p+d.xz).r +\n            texture(s,p-d.zy).r +\n            texture(s,p+d.zy).r ) * .5;\n}\n\nfloat getSampleVal( in sampler2D sA, in sampler2D sB, in vec2 p )\n{\n \treturn clamp(getSmoothValue(sB, p) -\n    \t         texture(sA, p).r, 0.0, 1.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    if ( rainDrop(uv) )\n    {\n        fragColor = vec4(1);\n    }\n    else fragColor = vec4(getSampleVal(BUFFER_1,BUFFER_2,uv))*DAMPING;\n}","name":"Buf C","description":"","type":"buffer"}]}