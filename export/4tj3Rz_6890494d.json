{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"mat3 rotateX(float a) {\n    float sa = sin(a), ca = cos(a);\n    return mat3(1.0, 0.0, 0.0, 0.0, ca, sa, 0.0, -sa, ca);\n}\nmat3 rotateY(float a) {\n    float sa = sin(a), ca = cos(a);\n    return mat3(ca, 0.0, sa, 0.0, 1.0, 0.0, -sa, 0.0, ca);\n}\nmat3 lookAt(vec3 fw){\n\tfw = normalize(fw);\n    vec3 rt = normalize(cross(fw, vec3(0.0, 1.0, 0.0)));\n    return mat3(rt, cross(rt, fw), fw);\n}\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat sdSphere(in vec3 p, in float r) {\n    return length(p) - r;\n}\n\nfloat sampleDistance(in vec3 p) {\n    float t = iTime * 2.0;\n    return smin(smin(smin(\n        sdSphere(p - vec3(sin(t*.813),cos(t*.758),0.) * 2., 1.2),\n        sdSphere(p - vec3(0.,sin(t*.454),cos(t*.676)) * 3., 1.), 0.5),\n        sdSphere(p - vec3(cos(t*.345),1.,sin(t*.253)) * 1.5, 1.5), 0.5),\n        sdSphere(p - vec3(cos(t*.929),sin(t*.987),0.) * 2.5, .8), 0.5);\n}\n\nvec3 sampleNormal(in vec3 pos) {\n    float e = .01;\n\tfloat d = sampleDistance(pos);\n\treturn normalize(vec3(\n        (d + sampleDistance(pos + vec3(e, 0.0, 0.0))) / e,\n\t\t(d + sampleDistance(pos + vec3(0.0, e, 0.0))) / e,\n\t\t(d + sampleDistance(pos + vec3(0.0, 0.0, e))) / e));\n}\n\n#define MIN_DIST 0.00001\n#define MAX_DIST 100.0\n\n// iq's soft shadows from https://iquilezles.org/articles/rmshadows\nfloat softShadow(in vec3 ro, in vec3 rd, float k) {\n    float res = 1.0;\n    float d, t = 0.05;\n    for(int i = 0; i < 64; ++i) {\n        d = sampleDistance(ro + rd * t);\n        //if(t > MAX_DIST || d < MIN_DIST) return 0.0;\n        res = min(res, k * d / t);\n        t += d;\n    }\n    return res;\n}\n\nfloat light(in vec3 ro, in vec3 rd) {\n    float diffuse = max(0., dot(sampleNormal(ro), rd));\n    return diffuse * softShadow(ro, rd, 16.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tfloat aspect = iResolution.x / iResolution.y;\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    uv.x *= aspect;\n    \n    float time = iTime;\n    \n    vec3 ro = vec3(cos(time*1.261), sin(time), sin(time*1.123)) * 5.0;\n   \tvec3 rd = lookAt(vec3(.1) - ro) * normalize(vec3(uv, 1.0));\n\tvec3 sp;\n\n    float d, t = 0.05;\n    for(int i = 0; i < 128; ++i) {\n        sp = ro + rd * t;\n        d = sampleDistance(sp);\n        if(t > MAX_DIST || d < MIN_DIST) break;\n        t += d;\n    }\n    \n    if (d < MIN_DIST) {\n        float lt = time * 1.0;\n        vec3 c = vec3(0.);\n        c += vec3(.7,.7,.6) * light(sp, normalize(vec3(.2,sin(lt*.1),-cos(lt*.1))));\n        c += vec3(.3,.3,.3) * light(sp, normalize(vec3(-.2,cos(lt),sin(lt))));\n        c += vec3(.3,.2,.2) * light(sp, normalize(vec3(sin(lt),cos(lt),0.)));\n        fragColor = vec4(c, 1.);\n    }\n    else {\n        float v = (rd.y + 1.) * .5;\n        fragColor = vec4(vec3(v), 1.0);\n    }\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4tj3Rz","date":"1426659056","viewed":176,"name":"Metaballs 2","username":"notlion","description":"blah","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""}}