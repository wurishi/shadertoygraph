{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"vec4 t(vec2 uv)\n{\n    float time = iTime*0.6;\n    vec2 fc = uv*vec2(640, 480);//fragCoord.xy;\n    float squares = 8.0;\n    float width = 150.0;\n    float offset = 320.0;//(iResolution.x/2.0);\n    float a = (sin((time)+fc.y/360.0) * width)+offset;\n    float b = (sin((time+1.57)+fc.y/360.0) * width)+offset;\n    float c = (sin((time+3.14)+fc.y/360.0) * width)+offset;\n    float d = (sin((time+4.71)+fc.y/360.0) * width)+offset;\n   \n    vec4 color = vec4(0.2);\n    if(fc.x > a && fc.x < b)\n    {\n        if(fc.x > a && fc.x < a+5.0)\n    \t{\n       \t\tcolor = vec4(1.0);\n    \t}\n        else if(fc.x > b-5.0 && fc.x < b)\n    \t{\n       \t\tcolor = vec4(.8);\n    \t}\n        else color = vec4(.8, 0.3, 0.0, 1.0);  \n    }\n    else if(fc.x > b && fc.x < c)\n    {\n        if(fc.x > b && fc.x < b+5.0)\n    \t{\n       \t\tcolor = vec4(1.0);\n    \t}\n        else if(fc.x > c-5.0 && fc.x < c)\n    \t{\n       \t\tcolor = vec4(.8);\n    \t}\n        else color = vec4(0.5, .0, 1.0, 1.0);  \n    }\n    else if(fc.x > c && fc.x < d)\n    {\n        if(fc.x > c && fc.x < c+5.0)\n    \t{\n       \t\tcolor = vec4(1.0);\n    \t}\n        else if(fc.x > d-5.0 && fc.x < d)\n    \t{\n       \t\tcolor = vec4(.8);\n    \t}\n        else color = vec4(0.8, 0.3, .0, 1.0);  \n    }\n    else if(fc.x > d && fc.x < a)\n    {\n        if(fc.x > d && fc.x < d+5.0)\n    \t{\n       \t\tcolor = vec4(1.0);\n    \t}\n        else if(fc.x > a-5.0 && fc.x < a)\n    \t{\n       \t\tcolor = vec4(.8);\n    \t}\n        else color = vec4(0.5, 0.0, 1.0, 1.0);  \n    }\n    return color;\n}\n\n//#define AA\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n\n    vec4 color = vec4(0.);\n    #ifndef AA\n    color = t(uv);\n    #else   \n    vec2 offsets[8+1];\n    offsets[0] = vec2(0.);\n    offsets[1] = vec2(1., 0.);\n    offsets[2] = vec2(0., 1.);\n    offsets[3] = vec2(-1., 0.);\n    offsets[4] = vec2(0., -1.);\n    offsets[1] = vec2(1., -1.);\n    offsets[2] = vec2(-1., 1.);\n    offsets[3] = vec2(-1., 1.);\n    offsets[4] = vec2(1., -1.);\n    \n    color = vec4(0.);\n    for(int i = 0; i < 81; ++i)\n    {\n        color += t(uv + (offsets[i/9]+texture(iChannel0, vec2(i)).xy*.4)*(1./iResolution.xy));\n    }\n    color /= 81.0;\n    #endif\n    \n    fragColor = color * pow(18.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y),.3);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sjSWG","date":"1415492668","viewed":212,"name":"Trig Twisty","username":"squid","description":"Based off of AMIGA TWIST by ac3t1me, using the same sin based twisting logic. Still has way too many conditional branches and the borders are a bit funky. ","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","retro","twisty"],"hasliked":0,"parentid":"","parentname":""}}