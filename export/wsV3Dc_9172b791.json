{"ver":"0.1","info":{"id":"wsV3Dc","date":"1571141088","viewed":123,"name":"Kurosuke wall","username":"blueneosky","description":"Tiling with kurosuke creature","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["tiling","makkuro","kurosuke","susuwatari"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 ConstBackGroundCol = vec3(.25);\nconst float ConstBodyBorderSize = .2;\nconst float ConstEyesBodyRatio = .3;\nconst vec2 ConstEyeLoc = vec2(.35, .25);\nconst float ConstIrisEyeRatio = .4;\n\nconst vec3 ConstBodyColor = vec3(0.);\nconst vec3 ConstEyesColor = vec3(1.);\nconst vec3 ConstIrisColor = vec3(0.);\nconst vec3 ConstAngryEyesColor = vec3(1., 0., 0.);\nconst vec3 ConstAngryIrisColor = vec3(.5, .0, 1.);\n\nconst float PI = 2.*asin(1.);\n\nvec2 polar(in vec2 p) {\n    float dist = length(p);\n    float teta = dist > .0 ? asin(p.y/dist) : .0;\t// -Pi/2 -> Pi/2\n    if(p.x < .0)\n    \tteta = 3.14 - teta;\n    \n    return vec2(dist, teta);\n}    \n\nfloat smoothPeriodicEvent(in float period, in float duration, in float timeOffset) {\n    float val = fract((iTime + timeOffset) / period);\n    val = smoothstep(.0, duration/period, val);\t// _.-°¨¨¨¨¨¨|_.-°¨¨¨¨¨¨|_ [...]\n    val = 2.*abs(val-.5);\t\t\t\t\t\t// ¨\\_/¨¨¨¨¨¨¨¨\\_/¨¨¨¨¨¨¨¨ [...]\n    val = 1.-val;\t\t\t\t\t\t\t\t// _/¨\\________/¨\\________ [...]\n    \n    return val;\n}             \n\nfloat hcos(float v) {\n    // Note: approximation of bad/cool rendering cos of too high value on some chip CG\n    float d = sign(mod(v, 2.*PI)/PI - 1.)\n        \t* max(0., fract(mod(v, PI)/PI/0.65 - 7./13.)-.3)/.7;\n    return cos(PI/2. * (1.- d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates\n    vec2 uv = 4.*(2.*fragCoord - iResolution.xy)/iResolution.y;\n\n    float hashedTime = 10000.+iTime;\n    \n    // tiling\n    float idY = floor(uv.y/2. + .5);\n    uv.x -= .5*idY;\n    vec2 id = vec2(floor(uv/2. + .5));\n    uv -= 2.*id ;\n    \n    vec3 col = ConstBackGroundCol;\n    \n    // angry one - sometime\n    float angry = smoothPeriodicEvent(30., 3., id.x*id.y + 2. * 5.*id.x - 7.*id.y);\n    if(angry >.0) {\n        vec2 rumble = .05*angry*vec2(cos((1000.*iTime)), sin(1200.*iTime));\n        uv+=rumble;\n    }\n    \n    // body size ~= 1. (+-cos +-sin)\n    {\n\t\tvec2 pol = polar(uv);\n        float bsize = pol.x\n            + ConstBodyBorderSize / 10.0 *\n            \t(   hcos(pol.y * 10. + 2. * iTime)\n                  - hcos(pol.y * 7. - 1.5 * iTime));\n        float b = smoothstep(1.-ConstBodyBorderSize, 1., bsize);\n        if(b < 1.) col = mix(ConstBodyColor, ConstBackGroundCol, b);\n    }\n    \n    // eyes\n    {\n        vec2 eyeMove = vec2(.0);\n        vec2 eyeLoc = ConstEyeLoc + eyeMove;\n        \n        vec2 rightLeftCorrection = vec2(1.);\n        if(uv.x < .0) rightLeftCorrection.x = -1.;\n        vec2 correctedEyeLoc = eyeLoc * rightLeftCorrection;\n        \n        vec2 normalizedEyeUv = (uv - correctedEyeLoc) / ConstEyesBodyRatio;\n        vec2 pol = polar(normalizedEyeUv);\n\n        float e = smoothstep(.7, 1., pol.x);\n        if(e < 1.)\n        {\n            // in the eye\n            vec3 eyesColor = ConstEyesColor;\n            if(angry>.0) eyesColor = mix(eyesColor, ConstAngryEyesColor, angry);\n            col = mix(eyesColor, col, e);\n            \n            // iris\n            {\n            \tvec2 irisLoc = eyeLoc;//+ 0.5*vec2(.03 * cos(iTime), .02 * sin(iTime));\n                vec2 normalizedIrisUv = (uv - irisLoc * rightLeftCorrection) / (ConstIrisEyeRatio*ConstEyesBodyRatio);\n                pol = polar(normalizedIrisUv);\n            \te = smoothstep(.6, 1.2, pol.x);\n                vec3 irisColor = ConstIrisColor;\n                if(angry>.0) irisColor = mix(irisColor, ConstAngryIrisColor, angry);\n                if(e < 1.) col = mix(irisColor, col, e);\n            }\n            \n            // eyelid\n            {\n                float closing = 1.-smoothPeriodicEvent(10., .2, 10.*(sin(30.* id.x) + .5*cos(10.*id.y)));\n                \n                vec2 lidLoc = eyeLoc;\n        \t\tvec2 correctedLidLoc = lidLoc * rightLeftCorrection;\n        \t\tvec2 normalizedLidUv = (uv - correctedLidLoc) / ConstEyesBodyRatio;\n                vec2 ellipsoidLidUv = normalizedLidUv * vec2(1., 1./closing);\n                float b = 1.-smoothstep(1., 1.05, length(ellipsoidLidUv));\n\t\t\t\tif(b<1.) col*=b;\n            }\n        }\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}