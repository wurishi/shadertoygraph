{"ver":"0.1","info":{"id":"ssX3Dl","date":"1616716462","viewed":90,"name":"raaaaainbows","username":"tripzilch","description":"rainbows","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["rainbows"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.283185307179586\n#define phi3 vec3(0.0, 2.0943951023931953, 4.1887902047863905)\n#define gamma vec3(2.2)\n#define igamma vec3(0.454545)\n\nvec3 florp(float a, float p) {\n    // this one maps the color\n    // a = brightness\n    // p = mushrooms\n    float b = clamp(2.*a - 1.,0.,1.);\n    b *= b; b *= b; b *= b;\n    vec3 res = pow(vec3(2.*a - a * a, a * a, b), gamma); // sRGB stands for stupid RGB\n    vec3 f = (1. + sin(phi3 + p)) * 0.333333333;\n    return pow(res.rgb * f.x + res.gbr * f.y + res.bgr * f.z, igamma);\n}\n\nfloat onk(vec2 uv, float t) {\n    // this one makes a wobbly function over t\n    // ranged -1 .. 1\n    float bx = uv.x * -3.13 + 2.04 * sin(uv.y * -2.3 + 1.3 * t) - 0.5* t;\n    float by = uv.y * 4.17 - 1.73 * sin(uv.x * 2.5 - 0.7 * t) + 0.9 * t;\n    return .5 * (sin(bx) + sin(by));\n}\n\nfloat unk(vec2 uv, float t) {\n    // this one ALSO makes a wobbly function over t\n    // ranged 0 .. 1\n    float cx = uv.x * 2.23 - 3.33 * sin(uv.y * -1.3 + 0.3 * t) - 0.4* t;\n    float cy = uv.y * -1.41 + 3.15 * sin(uv.x * 1.5 + 0.4 * t) + 0.1 * t;\n    return .5 + .25 * (sin(cx) + sin(cy));\n}\n\nconst vec2 cos_plz = vec2(0, 0.25); // cos ur face is 15 mins late\nconst vec2 flap = vec2(1., -1.);    // flap to flip not flop\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1) (??)\n    // this is how to get the pixels straight\n    vec2 aspect = iResolution.xy / iResolution.y;\n    vec2 uv = (fragCoord/iResolution.xy - 0.5) * aspect;\n    // and slightly bigger\n    uv *= 1.5;\n    float t = iTime * 0.5; // half speed is best speed\n    vec2 ee = vec2(4.35, -5.33); // bonus numbers\n    float c = unk(uv * vec2(0.43, -0.53), t); // weirdness amount\n    vec2 trun = sin(cos_plz + c * 8. + t * 0.61); \n    vec2 wp = uv + trun;\n    vec2 wq = uv - trun;\n    float lava = onk(wp, t) * (1. + onk((wq + ee * c) * 0.618, t * .7)); // left as exercise for the reader\n    float hi = 1.000420 + .7 * c; // how high we are \n    float a = smoothstep(-1., hi, lava); // brightness\n    float hole = smoothstep(hi + .02, hi, lava); // no more brightness\n    \n    vec3 col = florp(a, c * 12. + 2.5 * t).bgr * hole; // put everything together\n\n    // Output to screen\n    fragColor = vec4(pow(col, vec3(1.)),1.0);\n}","name":"Image","description":"","type":"image"}]}