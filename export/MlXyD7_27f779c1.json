{"ver":"0.1","info":{"id":"MlXyD7","date":"1505249194","viewed":152,"name":"glow fly","username":"srn","description":"some experimenting with light and noise","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","shadow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.14159;\nconst vec3 v = vec3(0.5,0.5,-10.0);\n\nvec4 diffuse = vec4(0.8,0.8,0.8,1.0);\nconst vec4 specular = vec4(0.9,0.9,0.9,1.0);\nfloat shininess = 380.0;\n\nconst float texMult = 2.0;\n\nconst float dbump = 0.001;\n\nconst float objectSize=0.06;\n\nconst float lampSize = 0.02;\n\nconst vec2[] points = vec2[] (\n        vec2(0.1, 0.7),\n        vec2(0.2, 0.7),\n        vec2(0.3, 0.7),\n        vec2(0.4, 0.7),\n        vec2(0.5, 0.7),\n        vec2(0.6, 0.7),\n        vec2(0.7, 0.7),\n        vec2(0.8, 0.7),\n        \n        \n        vec2(0.1, 0.3),\n        vec2(0.2, 0.3),\n        vec2(0.3, 0.3),\n        vec2(0.4, 0.3),\n        vec2(0.5, 0.3),\n        vec2(0.6, 0.3),\n        vec2(0.7, 0.3),\n        vec2(0.8, 0.3)\n        \n    \n    );\n\n\nvec4 light(vec3 normal, vec4 color, vec3 lightSource, float intensity) {\n   \n   vec3 L = normalize(lightSource - v);   \n   vec3 E = normalize(-v); \n   vec3 R = normalize(-reflect(L,normal));  \n \n   \n   //calculate Diffuse Term:  \n   vec4 Idiff = diffuse * max(dot(normal,L), 0.0);\n   Idiff = clamp(Idiff, 0.0, 1.0);     \n   \n   // calculate Specular Term:\n   vec4 Ispec = specular \n                * pow(max(dot(R,E),0.0),0.3*shininess);\n   Ispec = clamp(Ispec, 0.0, 1.0); \n   \n    // mix spec and diffuse Color:  \n   \n    vec4 p =mix(Idiff, Ispec, 0.8);\n    \n    vec4 r = color;\n    r.x *= p.x;\n    r.y *= p.y;\n    r.z *= p.z;\n    \n    return r*intensity;\n    \n}\n\n\n\nfloat isObject(vec2 uv, float bias) {\n   \n\n    float dist = 1.0;\n    \n    for (int i = 0; i < 16; ++i ) {\n        \n        vec2 bpoint = vec2(points[i].x * bias, points[i].y);\n        \n        float d = (distance(bpoint, uv));\n        \n        if  (d < dist) dist =d;\n    }\n    return dist;\n    \n}\n\n\n\nfloat hitsObject(vec2 a, vec2 n, vec2 p) {\n    \n    vec2 projection = (dot((a-p),n) * n);\n    \n   \n        \n    vec2 projectionNormal = (a-p)- (dot((a-p),n) * n);\n    \n    float l = length(projectionNormal);\n    \n    return l;\n    \n}\n\nfloat isLamp(vec2 uv,vec2 posLamp) {\n    \n   \t    return distance(uv, posLamp);\n    \n}\n\n\nfloat isShadow(vec2 uv, vec2 posLamp, float bias) {\n    int count = 0;\n    float dist = 1.0;\n    for (int i = 0; i< 16; i++ ) {\n        vec2 p = points[i];\n        p.x *= bias;\n        \n        vec2 normUvLamp = normalize(posLamp-uv);\n        vec2 normPLamp = normalize(posLamp-p);\n        \n        \n        if (length(normUvLamp+normPLamp) > 0.9) {\n        \n        \tif ((distance(uv, posLamp) > distance(p, posLamp)))  {\n                float d = hitsObject(uv, normalize(uv-posLamp), p);\n     \t\t\tif (d< dist )  dist = d ;\n        \t}\n        }\n        \n    }\n    return dist;\n}\n\nvec3 getFloorNormal(vec2 uv) {\n    \n    float dx = texture(iChannel0, vec2(uv.x+dbump, uv.y)).r - texture(iChannel0, vec2(uv.x-dbump, uv.y)).r;\n    float dy = texture(iChannel0, vec2(uv.x, uv.y+dbump)).r - texture(iChannel0, vec2(uv.x, uv.y-dbump)).r;\n\t\n    dx*=2.0;\n    dy*=2.0;\n    \n    float dz = sqrt (1.0 - dx*dx - dy*dy);\t\n\tvec3 normal = vec3(dx,dy,dz);\n    return normal;\n \n   \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.y;\n    \n    float bias = iResolution.x / iResolution.y;\n      \n    vec2 posLamp= vec2(0,0);\n   \n    vec4 noise = texture(iChannel2, vec2(floor(iTime/8.0)/100.0, 0.5));\n    posLamp = noise.xy;\n    \n    if (isObject(posLamp, 1.0) < objectSize+0.2) {\n        posLamp.y = posLamp.y > 0.5 ? + 0.85 : 0.12;\n    }\n    \n    float tv = (iTime/8.0-floor(iTime/8.0))*pi;\n    \n    float intensity = abs(sin(tv)) * 0.8 ;\n    \n    \n    posLamp+=vec2(texture(iChannel2, vec2(0, iTime/100.0))).xy*0.04;\n    \n    vec4 cShadow = vec4(0.0,0.0,0.0, 1.0);  \n    vec4 cObject = texture(iChannel1, uv*2.0);\n    vec4 cFloor = texture(iChannel0, uv*texMult); \n    \n    diffuse =noise;\n    \n    cFloor = light(getFloorNormal(uv*texMult), cFloor, vec3(posLamp.x, posLamp.y, 0.02), intensity);\n    cObject = light(vec3(0,0,1), cObject, vec3(posLamp.x, posLamp.y, -0.2), intensity);\n    \n    vec4 cLamp = noise;\n    \n    float tolerance = 0.01;\n    \n    \n    float distObject = isObject(uv, bias);\n    float distShadow = isShadow(uv, posLamp, bias);\n    float distLamp  = isLamp(uv, posLamp);\n    \n    \n    float t = 0.005;\n    float shadow = 1.0;\n    if ((distShadow > objectSize - t) && distShadow < objectSize ) {\n    \t shadow = smoothstep(0.0, 1.0, (distShadow-(objectSize-t))/t);\n         shadow += 0.2;\n         shadow = min(shadow, 1.0);\n            \n    } else if (distShadow < objectSize) {\n        shadow = 0.2;\n    }\n    \n    cFloor.xyz*= shadow;\n    \n    if ((distObject > objectSize -t) && distObject < objectSize) {\n        float step = smoothstep(1.0, 0.0, (distObject-(objectSize-t))/t);\n        vec4 m = mix(cFloor, cObject, step);\n        fragColor = m;\n    } else if ((distObject < objectSize -t)) {\n        fragColor = cObject;\n    } else if (distLamp < lampSize) {\n        float tlamp = 0.019;\n        if (distLamp < lampSize - tlamp) {\n        \tfragColor = cLamp * intensity;\n        } else {\n            \n            float step = smoothstep(1.0, 0.0, (distLamp-(lampSize-tlamp))/tlamp);\n            vec4 m = mix(cFloor, cLamp *intensity, step);\n            fragColor = m;\n        }\n    } else {\n        fragColor =cFloor;\n    }\n    fragColor*= max((0.7-distLamp),0.0)*2.0;   \n    \n    \n    \n    \n}","name":"Image","description":"","type":"image"}]}