{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//------------------------------------------------------------------------------------------\n//\n// Implicit curve segment example - @P_Malin\n//\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n//------------------------------------------------------------------------------------------\n//\n// I made this shader to explain the curve segment code in my shadertoy font shader:\n//\n//\t https://www.shadertoy.com/view/lslGDn\n//\n// Click and drag the mouse to move the control points\n//\n//------------------------------------------------------------------------------------------\n//\n// GPU Gems 3 has an article explaining something much better:\n// http://http.developer.nvidia.com/GPUGems3/gpugems3_ch25.html\n//\n// There is some more advanced work in this paper:\n// \"Random-access rendering of general vector graphics\"\n// http://research.microsoft.com/en-us/um/people/hoppe/proj/ravg/\n//\n// Also see more examples here:\n// http://glsl.heroku.com/e#4976.0\n// http://glsl.heroku.com/e#4978.0\n// http://glsl.heroku.com/e#5007\n//\n//------------------------------------------------------------------------------------------\n\n\n//#define QUADRATIC_CURVE\n//#define FULLSCREEN_CURVE\n\nvec3 cCurveColour = vec3(0.0, 0.4, 0.9);\nvec3 cControlPointColour = vec3(1.0, 0.5, 0.75);\n\nvec3 cBackground1Colour = vec3(226.0, 255.0, 225.0) / 255.0;\nvec3 cBackground2Colour = vec3(232.0, 253.0, 255.0) / 255.0;\n\nfloat PointAboveCurve(vec2 uv)\n{\n\t#ifdef QUADRATIC_CURVE\n\t\t// This is the more common curve to use for this sort of thing\n\t\tuv.x = 1.0 - uv.x;\n\t\treturn uv.y - uv.x * uv.x;\n\t#else\n\t\t// This is the curve I used in the \"shadertoy\" font shader\n\t\t// It is quarter of a circle. It solved some problems for me compared to\n\t\t// the above curve as the curve ends up much closer to the control point.\n\t\tuv = 1.0 - uv;\n\t\treturn 1.0 - dot(uv, uv);\n\t#endif\n}\n\nfloat PointOutsideTriangle(vec2 uv)\n{\n\tif(uv.x < 0.0)\n\t\treturn 1.0;\n\n\tif(uv.y < 0.0)\n\t\treturn 1.0;\n\n\tif(uv.x + uv.y > 1.0)\n\t\treturn 1.0;\n\t\n\treturn 0.0;\n}\n\n// 2D Cross product\nfloat Cross( const in vec2 A, const in vec2 B )\n{\n    return A.x * B.y - A.y * B.x;\n}\n\n// Returns the barycentric co-ordinates of point P in the triangle\nvec2 GetUV(const in vec2 A, const in vec2 B, const in vec2 C, const in vec2 P)\n{\n    float f1 = Cross(A-B, A-P);\n    float f2 = Cross(B-C, B-P);\n    float f3 = Cross(C-A, C-P);\n    \n    return vec2(f1, f2) / (f1 + f2 + f3);\n}\n\nfloat DrawPoint(vec2 vPos, vec2 vUV)\n{\n\tvec2 vDelta = (vPos - vUV) * iResolution.xy;\n\tfloat fDist = length(vDelta);\n\treturn smoothstep(7.0, 5.0, fDist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 vScreenUV = fragCoord.xy / iResolution.xy;\n\t\n\t// Calculate the control point co-ordiantes\n\t\n\tvec2 A= vec2(0.1, 0.2);\n\tvec2 B= vec2(0.5, 0.5);\n\tvec2 C= vec2(0.9, 0.2);\n\t\n\tif(iMouse.x > 0.0)\n\t{\n\t\tB = iMouse.xy / iResolution.xy;\n\t\tC = abs(iMouse.zw) / iResolution.xy;\n\t}\n\n\t#ifdef FULLSCREEN_CURVE\n\t\tA = vec2(0.0, 1.0);\n\t\tB = vec2(0.0, 0.0);\n\t\tC = vec2(1.0, 0.0);\n\t#endif\n\n\tvec2 BAdjusted = B;\t\n\n\t// Figure out where the corner of triangle should be\n\t#ifndef QUADRATIC_CURVE\n\t\tBAdjusted += (B - (A + C) * 0.5) * sqrt(2.0);\n\t#else\n\t\tBAdjusted += (B - (A + C) * 0.5) * (1.0 + sqrt(5.0));\n\t#endif\n\t\n\t// Get the UV co-ordiantes in the control point triangle\t\n\tvec2 vCurveUV = GetUV(A, BAdjusted, C, vScreenUV);\n\t\n\t// See if the we are above the curve at this UV co-ordiante\n\tfloat fPointAboveCurve = PointAboveCurve(vCurveUV);\n\t\n\t// Flip the sign of the curve test if we have a \"concave\" curve segment\n\tfloat isConcave = Cross(A-B, C-B);\n\tif(isConcave < 0.0)\n\t{\n\t\tfPointAboveCurve = -fPointAboveCurve;\n\t}\n\t\t\n\tfloat fOutsideTriangle = PointOutsideTriangle(vCurveUV);\n\n\t// Pick a colour based on the curve and triangle\n\t\n\tvec3 vResult = vec3(0.0);\n\tif(fOutsideTriangle > 0.0)\n\t{\n\t\tif(fPointAboveCurve > 0.0)\n\t\t{\n\t\t\tvResult = cBackground1Colour;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvResult = cBackground2Colour;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(fPointAboveCurve > 0.0)\n\t\t{\n\t\t\tvResult = cCurveColour;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvResult = cBackground1Colour;\n\t\t}\n\t}\n\t\n\t// Draw control Points\t\n\t\n\tvResult = mix( vResult, cControlPointColour, DrawPoint(A, vScreenUV));\n\tvResult = mix( vResult, cControlPointColour, DrawPoint(B, vScreenUV));\n\tvResult = mix( vResult, cControlPointColour, DrawPoint(BAdjusted, vScreenUV));\n\tvResult = mix( vResult, cControlPointColour, DrawPoint(C, vScreenUV));\t\n\t\n\tfragColor = vec4(vResult,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xds3Dn","date":"1368790777","viewed":3083,"name":"Implicit Curve Example","username":"P_Malin","description":"I made this shader to explain the curve segment code in my shadertoy font shader:\nhttps://www.shadertoy.com/view/lslGDn","likes":41,"published":1,"flags":0,"usePreview":0,"tags":["2d","curve"],"hasliked":0,"parentid":"","parentname":""}}