{"ver":"0.1","info":{"id":"lflcz7","date":"1720969901","viewed":51,"name":"inverse circle center and radius","username":"jt","description":"Calculate the center of a circle inverted at the unit circle.\n(The center of the inverted circle does not match the inverted center.)\nClick mouse to place circle & display incorrect inverted center.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["circle","inversion","center","unit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/lflcz7 inverse circle center and radius, 2024 by jt\n\n// Calculate the center of a circle inverted at the unit circle.\n// (The center of the inverted circle does not match the inverted center.)\n// Click mouse to place circle & display incorrect inverted center.\n\n// tags: inversion, circle, center, unit\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//#define draw(q) o *= smoothstep(0.0, 0.01, abs(q))\n#define draw(q) o *= smoothstep(0.0, length(fwidth(I)), abs(q)) /* is fwidth supported on all devices? */\n\nvoid mainImage(out vec4 o, in vec2 I) // [-1,+1]\n{\n    vec2 R = iResolution.xy;\n    I = (I+I-R)/R.y;\n\n    I *= 2.0;\n\n    bool demo = length(iMouse.xy)<10.0;\n\n    o = vec4(1);\n\n    {\n        vec2 m = (2.*iMouse.xy-R)/R.y;\n        float q = mix(0.4, 1.5, 0.5+0.5*cos(iTime));\n        vec3 c = vec3(demo?q*vec2(cos(iTime/5.0),sin(iTime/5.0)):m*2.0,0.4);\n\n        draw(length(I) - 1.0); // unit circle\n\n        draw(length(I - c.xy) - c.z); // circle\n        draw(length(I - c.xy) - 0.01); // center\n\n        vec2 d = c.xy/(dot(c.xy,c.xy)-c.z*c.z); // center of inverted circle\n        draw(length(I - d.xy) - 0.01);\n        float r = c.z/(dot(c.xy,c.xy)-c.z*c.z); // radius of inverted circle\n        draw(length(I - d.xy) - r);\n\n        if(!demo) // to verify circles match, actually perform inversion point by point\n        {\n            I /= dot(I,I); // inversion at unit circle\n            draw(length(I - c.xy) - c.z); // inverted circle\n            draw(length(I - c.xy) - 0.01); // inverted center != center of inverted circle\n        }\n    }\n}\n","name":"Image","description":"","type":"image"}]}