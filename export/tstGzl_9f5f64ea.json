{"ver":"0.1","info":{"id":"tstGzl","date":"1596163407","viewed":124,"name":"lrm","username":"Numero7","description":"having fun with proecedural sounds...","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["wave","music","bass","drum"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float moy(vec2 h) {\n    return (h.x + h.y) * 0.5;\n}\n\nvec2 rotate(vec2 v, float angle) {\n    float x = v.x * cos(angle) - v.y * sin(angle);\n    float y = v.x * sin(angle) + v.y * cos(angle);\n    return vec2(x, y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = mod(iTime, 80.0);\n    \n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    if (time > 52.0) {\n        uv.y += sin(uv.x * 2.0) * 0.3;\n    }\n    \n    if (time > 12.0 && time < 48.0) {\n    \tuv = rotate(uv, TWO_PI * time * 0.25);\n    }\n    \n    if (time > 52.0) {\n    \tuv = rotate(uv, TWO_PI * sin(time * 2.0));\n    }\n    \n    float y = moy(mainSound(0,uv.x / 110.0 + time));\n    \n    float brightness = abs(y - uv.y) * 40.0;\n    \n    vec3 col = vec3(brightness);\n    \n    if (time > 52.0) {\n        float d = mod(time, 4.0);\n        if (d < 1.0) {\n            col.r = 0.0;\n        } else\n        \n        if (d < 2.0) {\n            col.g = 0.0;\n        } else\n        \n        if (d < 3.0) {\n            col.b = 0.0;\n        } else \n        if (d < 4.0) {\n            col.rg = vec2(noise(0.6541 + floor(iTime * 4.0)), noise(0.351 + floor(iTime * 4.0)));\n            if (mod(time * 4.0, 1.0) < 0.5) {\n                col = normalize(col);\n            }\n        }\n        \n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define TWO_PI 4.0*asin(1.0)\n#define SemiTone pow(2.0, 1.0 / 12.0)\n\nfloat noise(float x) {\n    return fract(sin(x *316354.061465) * 654035.0654) * 2.0 - 1.0;\n}\n\nfloat smoothnoise(float x) {\n    float x1 = floor(x);\n    float x2 = ceil(x);\n    \n    float a = noise(x1 + 3.041541);\n    float b = noise(x2 + 3.041541);\n    \n    float t = pow(sin(mod(x, 1.0)*TWO_PI/4.0), 2.0);\n    \n    return (1.0 - t) * a + t * b;\n}\n\nfloat fractalnoise(float x, float freq, int layers) {\n    float result = 0.0;\n    for (float i = 0.0; i < float(layers); i++) {\n        result += smoothnoise(x * freq * (i * 2.0 + 1.0)) / (i * 2.0 + 1.0);\n    }\n    return result;\n}\n\nfloat clampfilter(float x, float amount) {\n    return clamp(x * amount, -1.0, 1.0);\n}\n\nfloat inst(float x, float decay) {\n    return x * decay / pow(2.0, x * decay);\n}\n\nfloat sinewave(float time) {\n    return sin(TWO_PI * time);\n}\n\nfloat getNoteFreq(float n) {\n    return pow(SemiTone, n - 49.0) * 440.0;\n}\n\nfloat bass(float time, float note) {\n    if (time >= 0.0 && time <= 1.0) {\n    \tfloat amp1 = (1.0 - time) / (1.0 + time * 16.0);\n        float amp2 = (1.0 - time) / (1.0 + time * 500.0);\n        float s = sinewave(time * getNoteFreq(note));\n        return s * amp1;\n    } else {\n    \treturn 0.0;\n    }\n}\n\nfloat snare(float time, float decay) {\n    return noise(time) * exp(-decay * time);\n}\n\nfloat kick(float time) {\n    return clampfilter(fractalnoise(time, 500.0, 10), 2.0) * inst(time, 50.0) * 0.5;\n}\n\n\nfloat getSound(float time) {\n    time = mod(time, 80.0);\n    float b = 0.0;\n    \n    if (time < 52.0) {\n        b += bass(mod(time + 0.25, 1.0), 49.0 - floor(mod(time + 0.25, 4.0)));\n    }\n    \n    if (time > 8.0 && time < 28.0) {\n        b += bass(mod(time, 1.0), 30.0 - floor(mod(time + 0.25, 4.0)));\n    }\n\n    if (time > 12.0 && time < 28.0) {\n        b += bass(mod(time, 1.0), 18.0 - floor(mod(time + 0.25, 4.0)));\n    }\n\n    if (time < 48.0) {\n        // Snare\n        if (time > 16.0) {\n            b += snare(mod(time, 2.0), 20.0);\n        }\n\n        // Hit hat\n        if (time > 20.0) {\n            b += snare(mod(time + 1.0, 2.0), 100.0);\n        }\n\n        // Kick\n        if (time > 24.0) {\n            b += kick(mod(time + 0.5, 1.0));\n        }\n    }\n    \n    if (time > 52.0) {\n        // Snare\n        if (time > 16.0) {\n            b += snare(mod(time, 1.0), 20.0);\n        }\n\n        // Hit hat\n        if (time > 20.0) {\n            b += snare(mod(time + 0.5, 1.0), 100.0);\n        }\n\n        // Kick\n        if (time > 24.0) {\n            b += kick(mod(time + 0.5, 1.0));\n        }\n    }\n    \n    if (time > 32.0 && time < 48.0) {\n        if (mod(time, 16.0) < 8.0) {\n            if (mod(time, 8.0) < 4.0) {\n                b += bass(mod(time, 0.5), 30.0 - floor(mod(time + 0.25, 4.0)));\n            } else {\n                b += bass(mod(time, 0.5), 30.0 + floor(mod(time + 0.25, 4.0)));\n            }\n        } else {\n            if (mod(time, 8.0) < 4.0) {\n                b += bass(mod(time, 0.5), 30.0 - floor(mod(time + 0.25, 4.0)));\n                b += bass(mod(time, 0.5), 42.0 - floor(mod(time + 0.25, 4.0)));\n            } else {\n                b += bass(mod(time, 0.5), 30.0 + floor(mod(time + 0.25, 4.0)));\n                b += bass(mod(time, 0.5), 42.0 - floor(mod(time + 0.25, 4.0)));\n            }\n        }\n    }\n    \n    if (time > 52.0) {\n        if (mod(time, 16.0) < 8.0) {\n            if (mod(time, 8.0) < 4.0) {\n                b += bass(mod(time, 0.25), 30.0 - floor(mod(time + 0.25, 4.0)));\n            } else {\n                b += bass(mod(time, 0.5), 30.0 + floor(mod(time + 0.25, 4.0)));\n            }\n        } else {\n            if (mod(time, 8.0) < 4.0) {\n                b += bass(mod(time, 0.25), 30.0 - floor(mod(time + 0.25, 4.0)));\n                b += bass(mod(time, 0.5), 42.0 - floor(mod(time + 0.25, 4.0)));\n            } else {\n                b += bass(mod(time, 0.5), 30.0 + floor(mod(time + 0.25, 4.0)));\n                b += bass(mod(time, 0.25), 42.0 - floor(mod(time + 0.25, 4.0)));\n            }\n        }\n        \n        float d = mod(time, 4.0);\n        if (d >= 3.0 && d < 4.0) {\n            b += bass(mod(time, 0.25), 54.0 - floor(1.5 * mod(time, 4.0)));\n        }\n    }\n    \n    if (time > 48.0 && time < 52.0) {\n        float s = time - 48.0;\n        b += fractalnoise(time, 200.0, 10) * s / (52.0 - 48.0);\n    }\n    \n    \n    \n    return b;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    return vec2(getSound(time) / 3.0);\n    //return vec2();\n}\n\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"// see common","name":"Sound","description":"","type":"sound"}]}