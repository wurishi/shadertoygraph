{"ver":"0.1","info":{"id":"wllcRl","date":"1592880557","viewed":486,"name":"specialBlur filter","username":"indere","description":"the Principle is similar to surface blur.\n1. border detection\n2. Selecting blur region based on boundary info\n","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["specialblurfilter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// special blur Vertical\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 offset = vec2(0.0, 1.0) / iResolution.xy;\n    vec3 ansColor = specialBlur(iChannel0, iChannel1, uv, offset);\n    if(fragCoord .x >= mod(iTime * 150.0, iResolution.x) - 0.5 && fragCoord .x <= mod(iTime * 150.0, iResolution.x) + 0.5)\n        ansColor = vec3(1.0,0.0,0.0);\n    else if(fragCoord .x > mod(iTime * 150.0, iResolution.x) + 0.5)\n        ansColor = texture(iChannel2, uv).rgb;\n    fragColor = vec4(ansColor, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// gaussian blur\n// first step we apply gaussian blur to remove Noise\n// which is helpful to border detection\n\n// for efficient we can separate our 2-dimensional Gaussian function into two 1-dimensional one  \n// (http://rastergrid.com/blog/2010/09/efficient-gaussian-blur-with-linear-sampling/) \n// Because of the limit of the number of buffers we can't do this on shadertoy\n\n\n// 3 * 3 gaussian blur\nconst float w[9] = float[9](\n\t0.095, 0.118, 0.085, 0.118, 0.147, 0.118, 0.095, 0.118, 0.095\n);\n\nvec3 gaussianBlur(in sampler2D tex, in vec2 uv){\n\tvec3 sumColor = vec3(0.0);\n    for(int x = 0; x < 3; x++){\n        for(int y = 0; y < 3; y++){\n        \tint index = x * 3 + y;\n            vec2 offset = vec2(float(x - 1), float(y - 1)) / iResolution.xy;\n            sumColor += texture(tex, uv + offset).rgb * w[index];\n        }\n    }\n    return sumColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n   \tvec3 blurColor = gaussianBlur(iChannel0, uv);\n    fragColor = vec4(blurColor, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//soble border detection\n//guassian blur can remove Noise\n//then we apply soble operator on image\nvoid make_kernel(inout vec4 n[9], sampler2D tex, vec2 coord)\n{\n\tfloat w = 1.0 / iResolution.x;\n\tfloat h = 1.0 / iResolution.y;\n\n\tn[0] = texture(tex, coord + vec2( -w, -h));\n\tn[1] = texture(tex, coord + vec2(0.0, -h));\n\tn[2] = texture(tex, coord + vec2(  w, -h));\n\tn[3] = texture(tex, coord + vec2( -w, 0.0));\n\tn[4] = texture(tex, coord);\n\tn[5] = texture(tex, coord + vec2(  w, 0.0));\n\tn[6] = texture(tex, coord + vec2( -w, h));\n\tn[7] = texture(tex, coord + vec2(0.0, h));\n\tn[8] = texture(tex, coord + vec2(  w, h));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n   \tvec4 n[9];\n    make_kernel(n, iChannel0, uv);\n    // sobel\n    vec4 gx = (n[6] + 2.0 * n[7] + n[8])  - (n[0] + 2.0 * n[1] + n[2]);\n    vec4 gy = (n[0] + 2.0 * n[3] + n[6]) - (n[2] + 2.0 * n[5] + n[8]);\n    \n    vec4 finalColor = vec4(0.0);\n    //finalColor = sqrt(gx * gx) + sqrt(gy * gy);\n    finalColor = sqrt(gx * gx + gy * gy);\n    \n    fragColor = vec4(clamp(finalColor.rgb, 0.0, 1.0), sqrt(length(gy) / length(gx)));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const float threshold = 0.5;\n//NMS\nbool NMS(in vec2 fragCoord){\n\tvec2 uv = fragCoord / iResolution.xy;\n    vec4 c = texture(iChannel0, uv);\n    float gp = length(c.rgb);\n    float xita = c.a;\n    float p1 = 0.0, p2 = 0.0,p3 = 0.0, p4 = 0.0;\n    float step_x = 1.0 / iResolution.x;\n    float step_y = 1.0 / iResolution.y;\n    if(xita > 1.0){\n    \tp1 = length(texture(iChannel0, uv + vec2(0.0, -step_y)).rgb);\n        p2 = length(texture(iChannel0, uv + vec2(step_x, -step_y)).rgb);\n        p3 = length(texture(iChannel0, uv + vec2(0.0, step_y)).rgb);\n        p4 = length(texture(iChannel0, uv + vec2(-step_x, step_y)).rgb);\n    }else if(xita > 0.0){\n    \tp1 = length(texture(iChannel0, uv + vec2(step_x, -step_y)).rgb);\n        p2 = length(texture(iChannel0, uv + vec2(step_x, 0.0)).rgb);\n        p3 = length(texture(iChannel0, uv + vec2(-step_x, step_y)).rgb);\n        p4 = length(texture(iChannel0, uv + vec2(-step_x, 0.0)).rgb);\n    }else if(xita > -1.0){\n    \tp1 = length(texture(iChannel0, uv + vec2(step_x, 0.0)).rgb);\n        p2 = length(texture(iChannel0, uv + vec2(step_x, step_y)).rgb);\n        p3 = length(texture(iChannel0, uv + vec2(-step_x, 0.0)).rgb);\n        p4 = length(texture(iChannel0, uv + vec2(-step_x, -step_y)).rgb);\n    }else{\n    \tp1 = length(texture(iChannel0, uv + vec2(step_x, step_y)).rgb);\n        p2 = length(texture(iChannel0, uv + vec2(0.0, step_y)).rgb);\n        p3 = length(texture(iChannel0, uv + vec2(-step_x, -step_y)).rgb);\n        p4 = length(texture(iChannel0, uv + vec2(0.0, -step_y)).rgb);\n    }\n    \n    float gp1 = xita * p2 + (1.0 - xita) * p1;\n    float gp2 = xita * p4 + (1.0 - xita) * p3;\n    //float gp1 = xita * p1 + (1.0 - xita) * p2;\n    //float gp2 = xita * p3 + (1.0 - xita) * p4;\n    \n    if(gp >= gp1 && gp >= gp2){\n        if((c.r + c.b + c.g) / 3.0 > threshold)\n            return true;\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    if(NMS(fragCoord))\n        fragColor = vec4(vec3(1.0),1.0);\n    else\n        fragColor = vec4(vec3(0.0),1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// special blur Horizontal\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 offset = vec2(1.0, 0.0) / iResolution.xy;\n    vec3 ansColor = specialBlur(iChannel0, iChannel1, uv, offset);\n    fragColor = vec4(ansColor, 1.0);\n}","name":"Buf D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// now we got img's border info. we can use this to blur img in similar region(not cross the border)\n\nconst float weight[20] = float[20](0.12238567125008,\n        0.11682268619326,\n        0.10158494451587,\n        0.080421414408401,\n        0.057903418374049,\n        0.037859927398416,\n        0.022435512532395,\n        0.012019024570926,\n        0.0058022877238952,\n        0.0025143246803546,\n        0.00097328697304049,\n        0.00033456739698267,\n        0.00010138405969172,\n        2.6836956977219e-05,\n        6.134161594793e-06,\n        1.192753643432e-06,\n        1.9341950974573e-07,\n        2.5449935492859e-08,\n        2.6102497941393e-09,\n        1.9576873456045e-10);\nconst int R = 20;\n\nvec3 specialBlur(in sampler2D originTex, in sampler2D borderTex, in vec2 uv, in vec2 offset)\n{\n    float f = texture(borderTex, uv).r;\n    vec3 ansColor = vec3(0.0);\n    if(f >= 0.5)\n        ansColor = texture(originTex, uv).rgb;\n    else{\n    \tansColor = texture(originTex, uv).rgb * weight[0];\n        float norm = weight[0];\n        for(int i = 1; i < R; i++){\n            float f_t = texture(borderTex, uv + float(i) * offset).r;\n            if(f_t > 0.5)\tbreak;\n        \tansColor += texture(originTex, uv + float(i) * offset).rgb * weight[i];\n            norm += weight[i];\n        }\n        \n        for(int i = 1; i < R; i++){\n        \tfloat f_t = texture(borderTex, uv - float(i) * offset).r;\n            if(f_t > 0.5)\tbreak;\n        \tansColor += texture(originTex, uv - float(i) * offset).rgb * weight[i];\n            norm += weight[i];\n        }\n        \n        ansColor /= norm;\n \n    }\n    \n    return   ansColor; \n}","name":"Common","description":"","type":"common"}]}