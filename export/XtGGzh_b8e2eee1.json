{"ver":"0.1","info":{"id":"XtGGzh","date":"1472931492","viewed":224,"name":"SSample texture on rotated grid","username":"lejeunerenard","description":"Tweak of AmazingThew's original shader to add super sampling of the underlying texture.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","mosaic","tiles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Added Super sampling of texture (i think) to @AmazingThew's Sample texture on rotated grid\n// Original: https://www.shadertoy.com/view/XlG3Rh\n//NOTE: Causes artifacts with mipmapping. Texture filtering must be set to Linear or Nearest or it'll look weird\n\nconst int samples = 4;\n\nvec2 aspect = vec2(iResolution.x/iResolution.y, 1.0);\nvec2 aux = iMouse.xy / iResolution.xy;\n\nfloat angle = mix(3., 1., aux.y);\nfloat cellWidth = mix(0.01, 0.1, aux.x);\n\nmat2 rot = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\nmat2 unRot = mat2(rot[0][0], rot[1][0], rot[0][1], rot[1][1]); //WOW IF ONLY WEBGL HAD SOME SORT OF TRANSPOSE FUNCTION\n\nvec4 samplePixel(vec2 uv) {\n    uv = uv * aspect * rot;\n    \n    // [0,1) range indicating fragment's position within current cell\n    // Useful for drawing stuff inside cells\n    vec2 cellCoord = fract(uv / cellWidth);\n    \n    // \"Tile-space\" coordinate of cell containing current fragment\n    // Will be same value for every fragment within the cell\n    vec2 cellId = floor(uv / cellWidth);\n    \n    // Texture coordinate (0-1 range across entire quad) of bottom-left corner of current cell\n    vec2 mosaicUv = cellId * cellWidth * unRot / aspect;\n    \n    vec4 color = vec4(0.);\n    const int ssamples = samples; // Can be independant of Screen Space AA\n    float ssampleWidth = cellWidth / float(ssamples);\n    for (int x = 0; x < ssamples; x++) {\n        for (int y = 0; y < ssamples; y++) {\n            color += texture(iChannel0, mosaicUv + ssampleWidth * vec2(x, y) * unRot / aspect);\n        }\n    }\n    \n\treturn color / float(ssamples * ssamples);\n    // return texture(iChannel0, mosaicUv); //Uncomment for orignal sampling\n}\n\nvec4 superSamplePixel(vec2 pos) {\n    vec2 off = 1.0 / float(samples) / iResolution.xy;\n    vec4 sum = vec4(0.0);\n    for (int x=0; x<samples; x++) {\n        for (int y=0; y<samples; y++) {\n            sum += samplePixel(pos + vec2(off.x*float(x), off.y*float(y)));\n        }\n    }\n    return sum / float(samples * samples);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = superSamplePixel(uv);\n    // fragColor = samplePixel(uv); //Uncomment for no-AA version\n}","name":"Image","description":"","type":"image"}]}