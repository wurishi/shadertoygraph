{"ver":"0.1","info":{"id":"ft3fz4","date":"1662715227","viewed":138,"name":"PerlinWorleyNoise","username":"neither","description":"Perlin worley noise. And 2d cloud.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 speed = vec2(.1, 0.);\n    vec2 speed_w = vec2(.05, 0.);\n    vec2 uv = fract(fragCoord/iResolution.y - iTime * speed);\n    vec2 uv_w = fract(fragCoord/iResolution.y - iTime * speed_w);\n    \n    float base_cloud = textureLod(iChannel0, fract(uv), 0.0).x;\n    //fragColor = vec4(vec3(base_cloud), 1.); return;\n    \n    vec3 weather_map = textureLod(iChannel1, fract(uv_w), 0.0).xyz;\n    float weather = weather_map.x;\n    \n    float Coverage = .6;\n    float coverage = remap(weather, 1. - Coverage, 1., 0., 1.);\n    \n    base_cloud = remap(base_cloud, (1. - coverage) * .2 , 1., 0., 1.);\n    fragColor = vec4((vec3(base_cloud)), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 lin2srgb( vec3 cl )\n{\n\tvec3 c_lo = 12.92 * cl;\n\tvec3 c_hi = 1.055 * pow(cl,vec3(0.41666)) - 0.055;\n\tvec3 s = step( vec3(0.0031308), cl);\n\treturn mix( c_lo, c_hi, s );\n}\n\nvec3 hash33(vec3 p){\n    p = vec3(\n        dot(p, vec3(13.13, 63.22, 75.46)),\n        dot(p, vec3(48.68, 75.13, 84.94)),\n        dot(p, vec3(94.78, 41.42, 86.35)));\n    return -1. + 2. * fract(sin(p) * 43241.1313187);\n}\n\nfloat perlin(vec3 p, vec3 period){\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    return mix(mix(mix(dot(hash33(mod(pi + vec3(0.0, 0.0, 0.0), period)), pf - vec3(0.0, 0.0, 0.0)), \n                       dot(hash33(mod(pi + vec3(1.0, 0.0, 0.0), period)), pf - vec3(1.0, 0.0, 0.0)), w.x), \n                   mix(dot(hash33(mod(pi + vec3(0.0, 1.0, 0.0), period)), pf - vec3(0.0, 1.0, 0.0)), \n                       dot(hash33(mod(pi + vec3(1.0, 1.0, 0.0), period)), pf - vec3(1.0, 1.0, 0.0)), w.x),\n                   w.y),\n               mix(mix(dot(hash33(mod(pi + vec3(0.0, 0.0, 1.0), period)), pf - vec3(0.0, 0.0, 1.0)), \n                       dot(hash33(mod(pi + vec3(1.0, 0.0, 1.0), period)), pf - vec3(1.0, 0.0, 1.0)), w.x), \n                   mix(dot(hash33(mod(pi + vec3(0.0, 1.0, 1.0), period)), pf - vec3(0.0, 1.0, 1.0)), \n                       dot(hash33(mod(pi + vec3(1.0, 1.0, 1.0), period)), pf - vec3(1.0, 1.0, 1.0)), w.x),\n                   w.y),\n               w.z);\n}\n\nfloat perlin_fbm(vec3 p, vec3 scale, vec3 period, int octaves, float W){\n    float fbm = 0.;\n    float weight = 1.;\n    float weightsum = 0.;\n    for(int i = 0; i < octaves; i++){\n        weightsum += weight;\n        fbm += weight * perlin(p * scale, period) * W;\n        weight *= 0.5;\n        scale *= 2.;\n        period *= 2.;\n    }\n    fbm /= weightsum;\n    //fbm = fbm * .5 + .5;\n    //fbm = clamp(fbm, 0., 1.);\n    return fbm;\n}\n\nfloat worley(vec3 p, vec3 period){\n    vec3 pi = floor(p);\n    float mndis = 1e9;\n    for(int i = -1; i <= 2; i++){\n        for(int j = -1; j <= 2; j++){\n            for(int k = -1; k <= 2; k++){\n                vec3 keypoint = pi + vec3(i, j, k) + hash33(mod(pi + vec3(i, j, k), period));\n                float dis = dot(p - keypoint, p - keypoint);\n                mndis = min(dis, mndis);\n            }\n        }\n    }\n    return mndis;\n}\n\nfloat worley_fbm(vec3 p, vec3 scale, vec3 period, int octaves){\n    float fbm = 1.;\n    float weight = 1.;\n    float weightsum = 0.;\n    for(int i = 0; i < octaves; i++){\n        weightsum += weight;\n        fbm *= 1. - weight * worley(p * scale, period);\n        weight *= .5;\n        scale *= 2.;\n        period *= 2.;\n    }\n    fbm /= weightsum;\n    return fbm;\n}\n\nfloat remap(float ipt, float l, float r, float L, float R){\n    return (ipt  - l) / (r - l) * (R - L) + L;\n}\n\nfloat REMAP(float ipt, float l, float r, float L, float R){\n    return clamp((ipt  - l) / (r - l), 0., 1.) * (R - L) + L;\n}\n\nvec3 basefrec = vec3(16.);","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    vec3 p = vec3(uv, iTime * .1);\n    \n    float p_noise = perlin_fbm(p, basefrec / 4., basefrec / 4., 4, 2.2);\n    float w_noise = worley_fbm(p, basefrec, basefrec, 4);\n    //Low freq base noise\n    float pw_noise = remap(p_noise, 0., 1., w_noise, 1.);\n    \n    //pw_noise = remap(p_noise, w_noise, 1., 0., 1.);\n    //has a quite interesting appearance, but not for clouds\n    \n    float w_noise0 = w_noise;\n    float w_noise1 = worley_fbm(p, basefrec * 2., basefrec* 2., 4);\n    float w_noise2 = worley_fbm(p, basefrec * 4., basefrec * 4., 3);\n    float w_noise3 = worley_fbm(p, basefrec * 8., basefrec * 8., 2);\n    \n    //High freq noise\n    float w_fbm = w_noise0 * 0.625 + w_noise1 * 0.25 + w_noise2 * 0.125;\n    \n    float base_cloud = remap(pw_noise,(1. - w_fbm) * .2, 1., 0., 1.);\n    \n    fragColor = clamp(vec4(base_cloud), 0., 1.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    vec3 p_weather = vec3(uv, 0.) + vec3(.33, .12, 0.);\n    \n    float p_noise = perlin_fbm(p_weather, basefrec / 4., basefrec / 4., 3, 1.);\n    float w_noise = worley_fbm(p_weather, basefrec, basefrec, 3) * .5;\n    float pw_noise = remap(p_noise, 0., 1., w_noise, 1.);\n    pw_noise = pw_noise * .5 + .5;\n    \n    float weather_map = perlin_fbm(p_weather, basefrec / 2., basefrec / 2., 2, 1.0);\n    weather_map = weather_map * .5 + .5;\n    //float lb = .4;\n    //weather_map = remap(weather_map, lb, 1., 0., 1.);\n    fragColor = vec4(vec3(weather_map, pw_noise, 0.), 1.);\n    fragColor = clamp(fragColor, 0., 1.);\n}","name":"Buffer B","description":"","type":"buffer"}]}