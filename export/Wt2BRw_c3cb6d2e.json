{"ver":"0.1","info":{"id":"Wt2BRw","date":"1598631799","viewed":118,"name":"lava lamp experiment","username":"rubenalexander","description":"experimenting with the lava lamp effect.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lavalamp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\nfloat random (in vec2 st) {\n    float x = fract(sin(dot(st.xy,vec2(12.9898,78.233)))* 43758.5453123);\n    float y = fract(cos(dot(st.xy,vec2(35745.54,65468545.546)))* 546.4563);\n    return mod(x+y,1.)+mod(x-y,1.);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = (6.*f*f*f*f*f)-15.*(f*f*f*f)+10.*(f*f*f);\n\n    // Mix 4 corners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n\nvec3 rm (vec2 uv, vec3 col) {\n    float val = .2;\n    float cbuff=val;\n    \n    if (col.r+col.g+col.b > .1) { \n        for (float m=0.; m<1.;m+=.1){\n            for (float n=0.; n<1.;n+=.1){\n                col.r *= cbuff;\n                col.g *= cbuff;\n                col.b *= cbuff;\n                cbuff *= sin(n);\n                uv.x += .2;\n            }\n            uv.y +=.2;\n            cbuff=val;\n        }\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    \n    float inv = fract(uv.x/uv.y);\n    vec3 col = vec3(0.);\n\t\n    // shifts the screen to a more interesting section\n    uv.x += .75;\n    uv.y *= .5;\n    \n    // I have used anywhere between 2 and 5 for proper scaling\n    uv *= 5.;\n    \n    \n    // save the original uv coordinates\n    vec2 suv = uv;\n \tfloat r,g,b=0.;\n    \n    // loop that generates the animation\n    \n    for(float n=0.05;n<5.;n+=.1) { \n        uv.x +=1.5;\n        uv.y=uv.y*suv.y;\n        \n        uv.x -=n;\n        uv.y += +.55*sin(iTime/(7.-n)*n)+.1;\n\t\tuv.x -=n;\t\n        uv.y += +.25*sin(iTime/(8.-n)*n)+.1;\n        \n        uv.y += -.55*sin(iTime/(9.-n)*n)+.2;\n        uv.x -=n;\n        \n        // fade between three colors\n        \n        b += smoothstep(.29,.20,length(uv))*.4;\n        r += smoothstep(.33,.27,length(uv))*.3;\n        g += smoothstep(.35,.30,length(uv))*.55;\n        \n        uv.y += -.55*sin(iTime/(7.-n)*n)+.2;\n        uv.x -=n;\n        b += smoothstep(.29,.20,length(uv))*.4;\n        g += smoothstep(.33,.27,length(uv))*.3;\n        r += smoothstep(.35,.30,length(uv))*.55;\n        \n        uv.y += -.55*sin(iTime/(6.-n)*n)+.2;\n        uv.x -=n;\n        r += smoothstep(.29,.20,length(uv))*.4;\n        g += smoothstep(.33,.27,length(uv))*.3;\n        b += smoothstep(.35,.30,length(uv))*.55;\n        \n        float s = abs(sin(iTime));\n        float c = abs(cos(iTime));\n        float t = abs(tan(iTime));\n        \n        // fade color change\n        col = vec3(mix(r,g,.5*s),mix(g,b,.5*c),mix(b,r,.5*1.-s)); \n        col *=1.5;\n        \n        // speeds up the movement + increases density\n        // uv = suv;\n    }\n    \n   \n    // runs around 120 to 140 fps with the original code   \n    fragColor = vec4(col,1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}