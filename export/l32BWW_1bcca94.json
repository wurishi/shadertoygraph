{"ver":"0.1","info":{"id":"l32BWW","date":"1729478793","viewed":103,"name":"Raymarched Mandelbulb 3D Fractal","username":"infurity","description":"Mandelbulb raymarched with lighting\n\nMandelbulb SDF: http://blog.hvidtfeldts.net/index.php/2011/09/distance-estimated-3d-fractals-v-the-mandelbulb-different-de-approximations/","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot2D(float angle){\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c,-s,s,c);\n}\n\n\nfloat sdBulb(vec3 p) {\n    float power = 16.;\n    const int iter = 20;\n\tvec3 z = p;\n\tfloat dr = 1.;\n\tfloat r = 0.;\n\tfor (int i = 0;i<iter;i++) {\n\t\tr = length(z);\n\t\tif (r>2.) break;\n\t\tfloat theta = acos(z.z/r);\n\t\tfloat phi = atan(z.y,z.x);\n\t\tdr = pow(r,power-1.)*power*dr+1.;\n\t\tfloat zr = pow(r,power);\n\t\ttheta = theta*power;\n\t\tphi = phi*power;\n\t\tz=zr*vec3(sin(theta)*cos(phi),sin(phi)*sin(theta),cos(theta));\n\t\tz+=p;\n\t}\n\treturn .5*log(r)*r/dr;\n}\n\n// Scene\nfloat map(vec3 p){\n    vec3 q = p;\n    float tick = iTime/2.;\n    q.xz *= rot2D(tick);\n    q.yz *= rot2D(tick);\n    float mandelbulb = sdBulb(q);\n    return mandelbulb;\n}\n\n// Calculate normals\nvec3 normals(vec3 p){\n    vec2 d = vec2(.001,0);\n    vec3 n;\n    n.x = map(p+d.xyy)-map(p-d.xyy);\n    n.y = map(p+d.yxy)-map(p-d.yxy);\n    n.z = map(p+d.yyx)-map(p-d.yyx);\n    return normalize(n);\n}\n\nconst int iter = 100; // Raymarching iterations\n\n// Raymarching function\nfloat march(vec3 ro,vec3 rd){\n    float t = 0.;\n    for (int i = 0;i<iter;i++){\n        vec3 p = ro+rd*t;\n        float d = map(p);\n        if (d<.001||t>100.) break;\n        t+=d;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord.xy*2.-iResolution.xy)/min(iResolution.x,iResolution.y);\n    vec3 ro = vec3(0,0,-1.7);\n    vec3 rd = normalize(vec3(uv,1));\n    vec3 col = vec3(0);\n\n    float t = march(ro,rd);\n    if (t<100.){\n        vec3 p = ro+rd*t;\n        vec3 normal = normals(p);\n        vec3 lightSource = vec3(ro);\n        vec3 viewSource = normalize(ro);\n        vec3 reflectSource = normalize(reflect(-lightSource,normal));\n        vec3 lightCol = vec3(1);\n        float diffuseStrength = max(0.,dot(normalize(lightSource),normal)); // Diffuse lighting\n        vec3 diffuse = diffuseStrength*lightCol;\n        float specularStrength = max(0.,dot(viewSource,reflectSource)); // Specular lighting\n        specularStrength = pow(specularStrength,64.);\n        vec3 specular = specularStrength*lightCol;\n        vec3 lighting = .75*diffuse+.25*specular;\n        col = lighting;\n    }\n    fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}