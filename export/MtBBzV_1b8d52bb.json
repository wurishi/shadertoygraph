{"ver":"0.1","info":{"id":"MtBBzV","date":"1516485723","viewed":447,"name":"Stupendous Julia matrix","username":"pjdevpl","description":"Animated Julia set in a wicked constantly moving world. ","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","fractal","julia","distancefields","abstract","generated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// inspired by: \n// https://www.shadertoy.com/view/Xd3SDs \n// https://www.shadertoy.com/view/Mtc3zS\n// https://www.shadertoy.com/view/Xds3zN\n// https://www.shadertoy.com/view/lsBXW3 \n// https://www.shadertoy.com/view/MtVGDt\n// https://www.shadertoy.com/view/MsfGRr\n\n//http://140.129.20.249/~jmchen/cg/docs/rendering%20pipeline/rendering/light_specular.html\n//http://ogldev.atspace.co.uk/www/tutorial19/tutorial19.html\n\n#define pi2            (2.*3.141593)\n#define rotate(plane,a)  (plane=vec2(cos((a)*pi2)*plane.x+sin((a)*pi2)*plane.y,cos((a)*pi2)*plane.y-sin((a)*pi2)*plane.x))\n#define pmod(a,b)    ( mod(mod((a),(b))+(b),(b)) )\n#define rep(a,r)    ( pmod(((a)+(r)*.5),(r))-(r)*.5 )\n#define repxz(a,r)    vec3( rep((a).x,(r)), (a).y + 0.5*sin((a).x+iTime)*cos((a).z+iTime), rep((a).z,(r)) )\n\n#define EPSILON .05\n\nvec2 opU(vec2 d1, vec2 d2)\n{\n\treturn (d1.x < d2.x) ? d1 : d2;\n}\n\nvec3 opTwist(vec3 p)\n{   \n    float  c = cos(.05*sin(iTime)*p.z);\n    float  s = sin(.05*cos(iTime)*p.z);\n    mat2   m = mat2(c,-s,s,c);\n    \n    return vec3(m*p.xy,p.z);\n}\n\nfloat udBox(vec3 p, vec3 b)\n{\n    return length(max(abs(p)-b, 0.));\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x, max(d.y,d.z)), 0.) + length(max(d, 0.));\n}\n\nfloat collumns(vec3 p, vec3 c, float r)\n{\n\tvec3 op = p;    \n    float d;\n    \n    d = udBox(p, vec3(20., 6., 20.));\n    d = max(d, -sdBox(p, vec3(3., 3.5, 3.)));\n\tp = repxz(p, r);\n    d = max(d, udBox(p, vec3(.25, 3., .25)));\n    \n    vec3 cell_center = op - p;\n    float cut = 1000000.;\n    \n    if( textureLod(iChannel3, (cell_center.xz/r+.5)/64., 0.).x < .8 )\n    {\n       cut = sdBox(op-cell_center, vec3(.5, 3.5, .5));\n    }\n\n    return max(d,-cut);\n}\n\nfloat surface(vec3 p, vec3 s, float r)\n{\n    float f = udBox(p, vec3(20., 1., 20.));\n    p = repxz(p, r);\n    f = max(f, udBox(vec3(p.x, p.y, p.z), s));  \n    \n    return f;\n}\n\nvec4 cloud(vec3 pos)\n{\n    rotate(pos.xy,iTime/50.);\n    vec3 p = pos;\n    p.xy += iTime * 5.;\n    float noise = textureLod(iChannel3,(p.xy)/64., 0.).x;\n    vec4 col = vec4(pos.z*.5+.5);\n    col.a = noise * .25; \n    \n    return col;\n}\n\nfloat julia(vec3 p, in vec4 c)\n{\n\tvec4 z = vec4(p, 0.);\n    float md2 = 1.;\n    \n    for( int i=0; i<11; i++ )\n    {\n        // https://www.cs.cmu.edu/~kmcrane/Projects/QuaternionJulia/paper.pdf\n        // http://www.fractalforums.com/3d-fractal-generation/true-3d-mandlebrot-type-fractal/435/\n        // |dz|^2 -> 4*|dz|^2\n        // z'n+1 = 2zn * z'n\n        md2 = 4.*dot(z, z)*md2;\n        \n        // z -> z2 + c\n        z = vec4( z.x * z.x - z.y * z.y - z.z * z.z - z.w * z.w, \n                  2.0 * z.x * z.y, \n                  2.0 * z.x * z.z, \n                  2.0 * z.x * z.w) + c;\n\n        // Just like in 2D Julia set: https://www.shadertoy.com/view/XlSyDK\n        if(dot(z, z)>4.) break;\n    }\n    \n\t// iq explained the following formula here: \n\t// http://www.fractalforums.com/3d-fractal-generation/true-3d-mandlebrot-type-fractal/msg8505/#msg8505\n    // http://www.fractalforums.com/3d-fractal-generation/true-3d-mandlebrot-type-fractal/450/\n    // https://en.wikipedia.org/wiki/Koebe_quarter_theorem\n    // DE = (power/4) · |Z|·log |Z| / |dZ|\n    return .25*sqrt(dot(z, z)/md2)*log(dot(z, z));\n}\n\nvec2 fn(vec3 p, in vec4 juliaFactor) \n{    \n    vec2 f = vec2(1.);\n    \n    f = opU(f, vec2(julia(p, juliaFactor), 0.));\n\t\n    p = opTwist(p);\n    \n    f = opU(f, vec2(surface(vec3(p.x, p.y + 3.3, p.z), vec3(.54, .25, .54), 1.15), .9));\n    f = opU(f, vec2(surface(vec3(p.x, p.y - 2.3, p.z), vec3(.54, .25, .54), 1.15), .6));\n    f = opU(f, vec2(collumns(p, vec3(0.), 1.15), .15));\n        \n    return f;\n}\n    \nvec3 getNormal(vec3 pos, vec4 juliaFactor)\n{\n    vec2 e = vec2(EPSILON, 0.);    // delta (epsilon)\n    \n    vec3 n = normalize(vec3(\n            fn(vec3(pos.x+e.x, pos.y, pos.z), juliaFactor).x - fn(vec3(pos.x-e.x, pos.y, pos.z), juliaFactor).x,\n            fn(vec3(pos.x, pos.y+e.x, pos.z), juliaFactor).x - fn(vec3(pos.x, pos.y-e.x, pos.z), juliaFactor).x,\n            fn(vec3(pos.x, pos.y, pos.z+e.x), juliaFactor).x - fn(vec3(pos.x, pos.y, pos.z-e.x), juliaFactor).x));\n    \n    return n;\n}\n\nvec3 getTexture(vec3 n, sampler2D tex)\n{\n\tvec3 mat = vec3(0.);\n\t\n\t// material color from texture\n\tfloat u = atan(n.z, n.x) / 3.1415*2.;\n\tfloat v = asin(n.y) / 3.1415*2. + .5;\n\tmat = texture( tex, vec2(u,v)).xyz;\n\t\n\treturn mat;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softShadow( vec3 rayOrigin, vec3 rayDir, float tMin, float tMax, in vec4 juliaFactor)\n{\n\tfloat res = 1.;\n\tfloat k = 5.;\n    for( float t=tMin; t < tMax; )\n    {\n\t\tfloat h = fn( rayOrigin + rayDir*t, juliaFactor).x;\n        if( h<.001 || t>tMax)\n            return 0.;\n\t\tres = min( res, k*h/t );\n        t += clamp( h, .05, .1 );\n    }\n    return clamp( res, 0., 1. );\n}\n\nvec3 calcLighting(vec3 rayDir, vec3 rayPos, vec2 dist, in vec4 juliaFactor)\n{\n    vec3 material;\n    vec3 texture[3];\n    vec3 color = vec3(0.);\n    vec3 factor = vec3(0.);\n    \n    vec3 normal = getNormal(rayPos, juliaFactor);\n    vec3 sunCol = vec3(1., 1., 1.);\n    vec3 ref = reflect(rayDir, normal);\n    \n    texture[0] = getTexture(normal, iChannel0);\n    texture[1] = getTexture(ref, iChannel1);\n    texture[2] = getTexture(ref, iChannel2);\n    \n    vec3 light = vec3(sin(iTime / 4.), -1., 1);\n    \n\t// https://www.shadertoy.com/view/Xds3zN\n    \n    if(dist.y < 0.1f)\n        material = 0.1 + 0.1*(sin( vec3(0.05*sin(rayPos.x),0.08*tan(rayPos.y),0.1*cos(rayPos.z))*100.0));\n    else\n    {\n        float tmpCol = 1.f + sin(iTime) / 2. + dist.y;\n        material = 0.1 + 0.1*(sin( vec3(0.05,0.08,0.1)*(100.0*tmpCol)));\n    }\n    \n    if(dist.y < 0.1)\n        color = clamp(material + .75*texture[0], 0., 1.);\n    else if (dist.y > .1 && dist.y < .2)\n        color = clamp(.5*material + .5*texture[1], 0., 1.);\n   \telse\n    \tcolor = clamp(.5*material + .5*texture[2], 0., 1.);\n    \n\tfloat ambient = clamp(0.5+0.5*normal.y, 0., 1.);\n    float diffuse = clamp(dot(normal, light), 0., 1.);\n    float backlight = clamp(dot(normal, normalize(vec3(-light.x, 0.,-light.z))), 0., 1. )*clamp( 1.-rayPos.y, 0., 1.);\n    float skydome = smoothstep( -.1, .1, ref.y);\n    float fresnel = pow(clamp(1.+dot(normal, rayDir), 0., 1.), 2.);\n\tfloat specular = pow(clamp(dot(ref, light), 0., 2.), 16.);\n        \n    diffuse *= softShadow(rayPos, light, .02, 2.5, juliaFactor);\n    skydome *= softShadow(rayPos, ref, .02, 2.5, juliaFactor);\n        \n    factor += 2.5*diffuse*vec3(.5, .5, .5);\n\tfactor += 0.1*specular*vec3(.5, .5, .5)*diffuse;\n    factor += 0.5*ambient*vec3(.5, .5, .5);\n    factor += 0.5*skydome*vec3(.5, .5, .5);\n    factor += 0.5*backlight*vec3(.5, .5, .5); \n    factor += 1.0*fresnel*vec3(1., 1., 1.)*(5. + sin(iTime * .5)*5.);\n\tcolor *= factor;\n\n    color = mix( color, vec3(1.,1.,1.), 1.-exp( -.0002*dist.x*dist.x*dist.x ));\n        \n\t// https://iquilezles.org/articles/outdoorslighting\n\t// gamma correction\n\tcolor = pow( color, vec3(1./2.2));\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec4 juliaFactor = .5*cos(iTime*vec4(.25, .1, .6, .4));\n    vec2 screenPos = -1. + 2. * fragCoord.xy / iResolution.xy; // screenPos can range from -1 to 1\n\tscreenPos.x *= iResolution.x / iResolution.y; // Correct aspect ratio\n    \n    float angle = iTime * .1;\n    \n    vec3 front = normalize(vec3(sin(angle),0,cos(angle)));\n    vec3 up = vec3(0., -1., 0.);\n    vec3 right = cross(up, front);\n    vec3 pos = vec3(0., 0., 0.)-front*2.5;\n\n    vec3 rayDir = normalize(front + screenPos.x*right + screenPos.y*up);\n\n    vec3 rayPos = pos;\n    \n    vec2 dist;\n    \n    float step = .2;\n    vec4 color = vec4(0., 0., 0., 1.);\n    \n    rayPos += rayDir*abs(sin(screenPos.x*200.*cos(screenPos.y*200.+iTime)))*step;\n    \n    for(int i=0;i<100;i++)\n    {\n        dist = fn(rayPos, juliaFactor);\n        rayPos += dist.x*rayDir;\n        \n        vec3 p = rayPos;\n        \n        p += vec3(0., .5, 0.);\n        rotate(p.yz, sin(70.));\n        vec4 c = cloud(p);\n        \n        color.r += color.a*c.a*sin(rayPos.x);\n        color.g += color.a*c.a*cos(rayPos.y);\n        color.b += color.a*c.a*sin(rayPos.z);\n        color.a = 1.;\n        \n        if(dist.x<.001) break;\n    }\n\t\n    if (dist.x < EPSILON)\n        fragColor = mix(color, vec4(calcLighting(rayDir, rayPos, dist, juliaFactor), 0.), .9);\n    else\n        fragColor = vec4(vec3(.85, .95, 1.)-pow(screenPos.y, 2.)/1.5, 0.);\n}","name":"Image","description":"","type":"image"}]}