{"ver":"0.1","info":{"id":"MsSSD1","date":"1577451736","viewed":67,"name":"Redshift","username":"renaudbedard","description":"Redshifting","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define saturate(x) clamp(x, 0.0, 1.0)\n\nvec3 RedshiftColor(vec3 sourceColor, float redShift)\n{\n    redShift *= 0.5;\n\tvec3 shiftMask = vec3(1.0 - saturate(-redShift), 1.0 - abs(redShift), 1.0 - saturate(redShift));\n    return shiftMask * sourceColor;\n}\n\nfloat Luminance(vec3 color)\n{\n    float fmin = min(min(color.r, color.g), color.b);\n\tfloat fmax = max(max(color.r, color.g), color.b);\n\treturn (fmax + fmin) / 2.0;\n}\n\nvec3 RGBToHSL(vec3 color)\n{\n\tvec3 hsl; // init to 0 to avoid warnings ? (and reverse if + remove first part)\n\t\n\tfloat fmin = min(min(color.r, color.g), color.b);    //Min. value of RGB\n\tfloat fmax = max(max(color.r, color.g), color.b);    //Max. value of RGB\n\tfloat delta = fmax - fmin;             //Delta RGB value\n\n\thsl.z = (fmax + fmin) / 2.0; // Luminance\n\n\tif (delta == 0.0)\t\t//This is a gray, no chroma...\n\t{\n\t\thsl.x = 0.0;\t// Hue\n\t\thsl.y = 0.0;\t// Saturation\n\t}\n\telse                                    //Chromatic data...\n\t{\n\t\tif (hsl.z < 0.5)\n\t\t\thsl.y = delta / (fmax + fmin); // Saturation\n\t\telse\n\t\t\thsl.y = delta / (2.0 - fmax - fmin); // Saturation\n\t\t\n\t\tfloat deltaR = (((fmax - color.r) / 6.0) + (delta / 2.0)) / delta;\n\t\tfloat deltaG = (((fmax - color.g) / 6.0) + (delta / 2.0)) / delta;\n\t\tfloat deltaB = (((fmax - color.b) / 6.0) + (delta / 2.0)) / delta;\n\n\t\tif (color.r == fmax )\n\t\t\thsl.x = deltaB - deltaG; // Hue\n\t\telse if (color.g == fmax)\n\t\t\thsl.x = (1.0 / 3.0) + deltaR - deltaB; // Hue\n\t\telse if (color.b == fmax)\n\t\t\thsl.x = (2.0 / 3.0) + deltaG - deltaR; // Hue\n\n\t\tif (hsl.x < 0.0)\n\t\t\thsl.x += 1.0; // Hue\n\t\telse if (hsl.x > 1.0)\n\t\t\thsl.x -= 1.0; // Hue\n\t}\n\n\treturn hsl;\n}\n\nfloat HueToRGB(float f1, float f2, float hue)\n{\n\tif (hue < 0.0)\n\t\thue += 1.0;\n\telse if (hue > 1.0)\n\t\thue -= 1.0;\n\tfloat res;\n\tif ((6.0 * hue) < 1.0)\n\t\tres = f1 + (f2 - f1) * 6.0 * hue;\n\telse if ((2.0 * hue) < 1.0)\n\t\tres = f2;\n\telse if ((3.0 * hue) < 2.0)\n\t\tres = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n\telse\n\t\tres = f1;\n\treturn res;\n}\n\nvec3 HSLToRGB(vec3 hsl)\n{\n\tvec3 rgb;\n\t\n\tif (hsl.y == 0.0)\n\t\trgb = vec3(hsl.z, hsl.z, hsl.z); // Luminance\n\telse\n\t{\n\t\tfloat f2;\n\t\t\n\t\tif (hsl.z < 0.5)\n\t\t\tf2 = hsl.z * (1.0 + hsl.y);\n\t\telse\n\t\t\tf2 = (hsl.z + hsl.y) - (hsl.y * hsl.z);\n\t\t\t\n\t\tfloat f1 = 2.0 * hsl.z - f2;\n\t\t\n\t\trgb.r = HueToRGB(f1, f2, hsl.x + (1.0/3.0));\n\t\trgb.g = HueToRGB(f1, f2, hsl.x);\n\t\trgb.b= HueToRGB(f1, f2, hsl.x - (1.0/3.0));\n\t}\n\t\n\treturn rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 image = texture(iChannel0, vec2(uv.x, 1.0 - uv.y)).rgb;\n    \n    float originalLuminance = Luminance(image);\n    \n    vec3 colorshifted = RedshiftColor(image, iMouse.x / iResolution.x * 2.0 - 1.0);\n    \n    vec3 shiftedHSL = RGBToHSL(colorshifted);\n    \n    vec3 luminancePreservedShift = HSLToRGB(vec3(shiftedHSL.x, shiftedHSL.y, originalLuminance));\n    \n    if (uv.x > 0.5)\n    \tfragColor = vec4(luminancePreservedShift, 1.0);\n    else\n        fragColor = vec4(colorshifted, 1.0);\n}","name":"Image","description":"","type":"image"}]}