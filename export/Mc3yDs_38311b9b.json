{"ver":"0.1","info":{"id":"Mc3yDs","date":"1731338350","viewed":98,"name":"Stylized Procedural Skybox","username":"lchaumartin","description":"A stylized procedural skybox shader where you can control the sun position with the mouse. ","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["procedural","reflection","sea","sun","water","gradient","bump","normal","skybox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SUN_RADIUS 80.0\n#define HORIZON_HEIGHT 0.33\n#define BUMPS 1.0\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 res = iResolution.xy;\n    vec2 halfres = res*0.5;\n    vec2 mouse = iMouse.xy;\n    if(length(mouse) < 0.005)\n        mouse = halfres + vec2(sin(iTime)*halfres.x*0.8, cos(iTime)*halfres.y);\n    mouse.y = max(mouse.y, HORIZON_HEIGHT * res.y - SUN_RADIUS);\n    \n    float sunsetFactor = clamp(mouse.y / res.y - HORIZON_HEIGHT, 0.0, 1.0);\n    vec4 sunColor = vec4(1.0, clamp(2.0 * sqrt(sunsetFactor), 0.0, 1.0), clamp(sunsetFactor * 2.0, 0.0, 0.5), 1.0);\n    \n    float heightFactor, dstPx, red, green, blue;\n    \n    if (fragCoord.y / res.y > HORIZON_HEIGHT) {\n        dstPx = length(mouse - fragCoord);\n        float dst = pow(clamp(1.0 - dstPx / SUN_RADIUS, 0.0, 1.0), 0.15);\n        heightFactor = fragCoord.y / res.y / (1.0 - HORIZON_HEIGHT);\n        red = 0.1 + pow(clamp(1.0 - dstPx / res.x, 0.0, 1.0), 32.0 * (sunsetFactor + 0.025)) * (1.0 - heightFactor / 4.0);\n        green = mix(0.0, 0.75, pow(sunsetFactor, 0.65));\n        blue = clamp(green * 2.0 + 0.35, 0.0, 1.0);\n        vec4 sky = vec4(red, green, blue, 1.0);\n        fragColor = mix(sky, sunColor, dst);\n    } \n    else \n    {\n        vec2 reflectedMouse = vec2(mouse.x, res.y - mouse.y - 2.0 * (0.5 - HORIZON_HEIGHT) * res.y);\n        vec2 warpedCoord = fragCoord / res\n                         + BUMPS * (texture(iChannel0, iTime * 0.025 + fragCoord / res / vec2(2.0, HORIZON_HEIGHT)).xy - 0.5) * 0.5 * (texture(iChannel0, -iTime * 0.025 + fragCoord / res / vec2(1.0, 0.5 * HORIZON_HEIGHT)).xy - 0.5);\n        warpedCoord.y = (warpedCoord.y - HORIZON_HEIGHT) * 0.5 + HORIZON_HEIGHT;\n        dstPx = length(reflectedMouse - warpedCoord * res);\n        heightFactor = (1.0 - fragCoord.y / res.y) / HORIZON_HEIGHT / 5.0;\n        red = pow(clamp(1.0 - dstPx / res.x, 0.0, 1.0), 64.0 * (sunsetFactor + 0.025)) * (1.0 - heightFactor / 4.0);\n        green = mix(0.0, 0.75, pow(sunsetFactor, 0.65));\n        blue = clamp(green * 2.0 + 0.35, 0.0, 1.0);\n        vec4 sky = vec4(red, green, blue, 1.0);\n        fragColor = mix(sky, sunColor, pow(clamp(1.0 - dstPx / SUN_RADIUS, 0.0, 1.0), 0.25)) * 0.75;\n    }\n    float dstToHorizon = length(fragCoord.y / res.y - HORIZON_HEIGHT);\n    vec4 fogColor = vec4(clamp(0.25 + sunsetFactor, 0.0, 0.75));\n    fragColor = mix(fragColor, fogColor, pow(0.985 - 0.015 * clamp(1.0 - 10.0 * sunsetFactor, 0.0, 1.0) - dstToHorizon, 3.0));\n}\n","name":"Image","description":"","type":"image"}]}