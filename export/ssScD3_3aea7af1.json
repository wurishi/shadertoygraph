{"ver":"0.1","info":{"id":"ssScD3","date":"1644218396","viewed":146,"name":"Three Morping fractals","username":"c0rymcg","description":"Blending some classic escape-time fractals together.\nMandelbrot set morphs to Sin(z)*c fractal and Lambda fractal, alternatively.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","morph","lambda"],"hasliked":0,"parentid":"-1","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n#define TAU 6.28318\n#define maxIterations 100\n#define AA 2\n\n\nvec2 cMult(vec2 c1, vec2 c2){\n   //complex mult\n    float newR = c1.x*c2.x - c1.y*c2.y;\n\tfloat newI = c1.y*c2.x + c1.x*c2.y;\n\treturn vec2(newR,newI);\n}\n\nvec2 f1(vec2 z, vec2 c) {\n    return mat2(z,-z.y,z.x)*z + c;\n}\n\nvec2 f2(vec2 z, vec2 c) {\n    //complex sine\n    //sin(x+iy) = sin(x) cosh(y) + i cos(x) sinh(y))\n\tfloat r = sin(z.x) * cosh(z.y);\n\tfloat i = cos(z.x) * sinh(z.y);\n    \n \n    return cMult(vec2(r,i),c);\n\t\n    \n}\nvec2 f3(vec2 z, vec2 c){\n    return cMult(c,cMult(z,vec2(1,0)-z));\n    \n}\n\nvec3 palette(float loc, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b*cos( TAU*(c*loc+d) );\n}\n\nfloat logPotential(float d,float i){\n  \n\tfloat base=log(2.);\n\treturn i-(log(log(d)/base)/base);\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec3 aacol=vec3(0.);\n    float time = iTime;\n    \n    //aa code here\n    for (int aax=0; aax<AA; aax++){\n    for (int aay=0; aay<AA; aay++){\n        vec2 c = vec2(0.);\n        vec2 z = vec2(0.);\n    \n        vec2 uv = (fragCoord + vec2(aax,aay)/float(AA))/iResolution.xx;\n        uv -= 0.5;uv *= 1.3;uv += 0.5;\n    \n        c.x = 3.0 * (uv.x - 0.5) ;\n        c.y = 3.0 * (uv.y - 0.22) ;\n        \n        bool escaped = false;\n        int iterations;\n        \n    \n        int i = 0;\n        float t = clamp(sin(iTime/5.)*1.01,-1.,1.);\n        \n        //control camera\n        //soom in and out, by parabola\n        float zoom = 0.6*t*t+.2*t+1.2;\n        \n        //move camera left and right by parabola\n        c.x+=.8*t*t-.3*t-.5;\n        c*=zoom;\n        \n        if(t>0.){\n            \n            z=mix(vec2(0,0),c,t);\n        }else{\n            \n            z = mix(vec2(0,0),vec2(0.5,0),-t);\n           // c.x+=mix(0.,1.,clamp(-t,0.,1.));\n        }        \n        t=t/2.+0.5;\n        //iterate\n        float sum=0.;\n        for (i = 0; i < maxIterations; i++) {\n            vec2 p1 = f3(z,c);\n            vec2 p2 = f1(z, c);\n            vec2 p3 = f2(z,c);\n            \n            \n            // spline this\n            vec2 tangent = (p1-p3)*0.2;\n            vec2 t1 = p2+tangent;\n            vec2 t2 = p2-tangent;\n            \n            if (t<0.5){\n                vec2 l1= mix(p1,t1,t*2.);\n                vec2 l2 = mix(t1, p2, t*2.);\n                \n                z = mix(l1,l2,t*2.);\n            }else{\n                vec2 l1= mix(p2,t2,t*2.-1.);\n                vec2 l2 = mix(t2, p3, t*2.-1.);\n                \n                z = mix(l1,l2,t*2.-1.);\n            }\n            \n            \n            sum+=max(0.,5.-length(z));\n            if(length(z)>5.)escaped=true;\n        \n        }\n\n\t\t\t\n    \n    \n    vec3 iterationCol = vec3(palette(sum/20., vec3(0.5),vec3(0.5),vec3(1.0, 1.0, 0.0),vec3(0.3, 0.2, 0.2)));\n\t\t\n    if (!escaped)iterationCol=iterationCol*0.8 -0.3;\n    aacol+= iterationCol;//vec3((escaped>=0) ? iterationCol : vec3(0.));\n    }\n    }\n    fragColor=vec4(aacol.xyz/4.,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}