{"ver":"0.1","info":{"id":"4sKSzy","date":"1465084854","viewed":145,"name":"Distance formulas","username":"cubby208","description":"I am visualizing different ways of calculating/approximating distance.  I have a (touch) project where the approximate distance has to be found between hundreds of points and each finger.  Any other ideas would be great!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["math","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float distCross(vec2 one, vec2 two)\n{\n    return dot(two - one, two - one);\n}\nfloat distTraditional(vec2 one, vec2 two)\n{\n  \treturn sqrt(pow(two.x - one.x, 2.0) + pow(two.y - one.y, 2.0));   \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 center = vec2(0.5);\n    \n    float val = 0.0;\n    if (uv.x < 0.5)\n    {\n     \tval = distCross(uv, center);\n    }\n    else\n    {\n     \tval = distTraditional(uv, center);   \n    }\n    fragColor = vec4(vec3(val), 1.0);\n}","name":"Image","description":"","type":"image"}]}