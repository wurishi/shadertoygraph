{"ver":"0.1","info":{"id":"tdyGDK","date":"1570957569","viewed":247,"name":"ShaderTober - Pattern","username":"Flopine","description":"A small doodle with inktober's theme \"Pattern\".  \nThis one is mostly inspired by this tutorial from The Art of Code : https://www.youtube.com/watch?v=cQXAbndD5CQ but with hexagonal grid ;) ","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid","wor","hexagone"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n// This one is mostly inspired by this tutorial from The Art of Code : \n// https://www.youtube.com/watch?v=cQXAbndD5CQ\n// But with hexagonal grid ;) \n\n#define hr vec2(1.,sqrt(3.))\n#define PI 3.141592\n\nfloat xor (float a, float b)\n{return (1.-a)*b + (1.-b)*a;}\n\nfloat hdist (vec2 uv)\n{\n    uv = abs(uv);\n    return max(uv.x, dot(uv, normalize(hr)));\n}\n\n\nvec3 hgrid (vec2 uv)\n{\n    uv *= 4.;\n    \n    vec2 ga = mod(uv,hr)-hr*0.5;\n    vec2 gb = mod(uv-hr*0.5,hr)-hr*0.5;\n    vec2 guv = (dot(ga,ga) < dot(gb,gb)) ? ga : gb;\n    \n    float m = 0.;\n    vec2 id = guv - uv;\n    \n    float dist = length(id)*5.;\n    for(float i = -1.; i<=1.;i++)\n    {\n     \tfor(float j = -1.; j<=1.;j++)\n    \t{\n        \tvec2 offset = vec2(i,j);\n            float r = mix(0.5,1.8,sin(iTime-dist)*0.5+0.5);\n            float d = hdist(guv-offset);\n            m = xor(m,smoothstep(r,r*0.95, d));\n    \t}   \n    }\n    return vec3(m,id);\n}\n\nvec3 palette (float t, vec3 a, vec3 b, vec3 c, vec3 d)\n{return a+b * cos(2.*PI*(c*t+d));}\n\nvec3 frame (vec2 uv)\n{\n\tvec3 hg = hgrid(uv);\n    return palette(length(uv*2.),\n                   vec3(0.5), \n                   vec3(0.5), \n                   vec3(hg.x*0.3), \n                   vec3(0.2,0.,0.7));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 col = frame(uv);\n\n    // Output to screen\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}