{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define PI 3.1415926538\n\nint e_solutions = 5;\nint v_solutions = 5;\n\nfloat particle_radius = 60.0;\nfloat fade_radius = 40.0;\n\nfloat line_thickness = 1.5;\n\n// Complex logarithm\nvec2 clog(vec2 z) {\n    return vec2(log(length(z)), atan(z.y, z.x));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 size = iResolution.xy;\n    vec2 coord = fragCoord / size * 2.0 - 1.0;\n    bool is_preview = iMouse.xy == vec2(0.0);\n\n    // Define particles and their chargers\n    int charge[] = int[](2, 2, -2);\n    vec2 particles[] = vec2[](iMouse.xy,\n                              size * vec2(.3, .5),\n                              size * vec2(.7, .5));\n\n    // The complex potential at each point due to all the particles is the sum\n    // of the potential from each of the particles.\n    vec2 field = vec2(0.0);\n    for (int i = int(is_preview); i < particles.length(); i++) {\n        vec2 delta = fragCoord - particles[i];\n        field += float(charge[i]) * clog(delta);\n    }\n\n\n    // To actually draw the field lines, we need to draw the counters of the\n    // real and imaginary components of the complex potential. To do this, lines\n    // are drawn where the potential is zero. In order to show more than just\n    // one solution, the cosine function is used.\n    float e = cos(field.y * float(e_solutions));\n    float e_value = line_thickness - abs(e / fwidth(e));\n    \n    float preview_animation = float(is_preview) * mod(-iTime, 2.0 * PI);\n    float v = cos(field.x * float(v_solutions) + preview_animation);\n    float v_value = line_thickness - abs(v / fwidth(v));\n    \n    vec3 e_color = max(e_value, 0.0) * vec3(0.031, 0.482, 0.737);\n    vec3 v_color = max(v_value, 0.0) * vec3(0.031, 0.596, 0.490);\n    fragColor = max(fragColor, vec4(max(e_color, v_color), 1.0));\n    \n    // Here we draw the red / blue particles on top of the field lines\n    for (int i = int(is_preview); i < particles.length(); i++) {\n        vec2 delta = fragCoord - particles[i];\n        vec3 color = (charge[i] < 0) ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 0.0, 1.0);\n\n        float t = -(length(delta) - particle_radius) / fade_radius;\n        fragColor = mix(fragColor, vec4(color, 1.0), smoothstep(0.0, 1.0, t));\n    }\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4fyBW3","date":"1734666488","viewed":34,"name":"E and V Field Lines","username":"connorslade","description":"Renders the E and V field lines due to point charges in real time. Click and hold to move the middle particle and you can modify the particles, charges, and other constants in the shader code to customize the simulation.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["physics"],"hasliked":0,"parentid":"","parentname":""}}