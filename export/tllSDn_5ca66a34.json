{"ver":"0.1","info":{"id":"tllSDn","date":"1562607450","viewed":123,"name":"Linear search rng color stripes","username":"vchizhov","description":"Performs linear search to produce a piecewise constant texture from a rng providing the size of each strip and the intensity.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["linearsearch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// http://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/\n// http://web.archive.org/web/20071223173210/http://www.concentric.net/%7ETtwang/tech/inthash.htm\nuint wangHash( uint a )\n{\n\ta = (a ^ 61u) ^ (a >> 16u);\n\ta += (a << 3u);\n\ta = a ^ (a >> 4u);\n\ta = a * 0x27d4eb2du;\n\ta = a ^ (a >> 15u);\n\treturn a;\n}\n\nuint rand( inout uint seed )\n{\n    seed += 13u;\n    return wangHash( seed );\n}\n\nfloat fRand( inout uint seed )\n{\n    uint urand = rand( seed );    \n    const uint mantissaMask = (0xffffffffu) >> ( 32u - 23u );\n    return fract(float(urand & mantissaMask) / float(mantissaMask)); \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // hash\n    uint seed = uint(float(1<<23)*texelFetch(iChannel0, ivec2(fragCoord.xy), 0).x);\n    rand(seed);\n \n    // number of cells\n    const int iter = 8;\n    // x coord\n    float t = fragCoord.x/iResolution.x;\n    // save seed\n    uint initialSeed = seed;\n    // accumulate sum\n    float acc = 0.0;\n    \n    // for the color at 0-th delta peak\n    rand(seed);\n    rand(seed);\n    rand(seed);\n    for(int i=0;i<iter;++i)\n    {\n        acc += fRand(seed); // 1.0/float(iter);//\n        // account for the color generation in the second loop\n        rand(seed);\n        rand(seed);\n        rand(seed);\n    }\n    \n    // map t from [0,1] to [0,acc]\n    float rescaledX = t * acc;\n    \n    // reset seed;\n    seed = initialSeed;\n    // reset accumulation var\n    acc = 0.0;\n    // generate color\n    // color at the 0-th peak\n    vec3 leftColor = vec3(fRand(seed), fRand(seed), fRand(seed));\n    vec3 rightColor;\n    float leftT = 0.0;\n    for(int i=0;i<iter;++i)\n    {\n        acc += fRand(seed); //1.0/float(iter);\n        rightColor = vec3(fRand(seed),fRand(seed), fRand(seed));\n        if(acc>=rescaledX)\n        { \n            break;\n        }\n        // prepare the next iteration\n        leftColor = rightColor;\n        leftT = acc;\n    }\n    float mixVal = 1.0-(acc-rescaledX)/(acc-leftT);\n    vec3 col = mix(leftColor, rightColor, mixVal);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}