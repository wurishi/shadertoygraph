{"ver":"0.1","info":{"id":"ws3Gzl","date":"1569107636","viewed":317,"name":"Tetris Musics Visualisations","username":"Numero7","description":"Musics Sounding sounds of Tetris music","likes":7,"published":1,"flags":8,"usePreview":0,"tags":["noise","sounds","tetris"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    uv *= 3.0;\n    \n    float y = mainSound(1, uv.x / 220.0 + iTime).x;\n    \n    vec3 col = vec3(0);\n    \n    if (uv.y > 0.5 - 0.005 && uv.y < 0.5 + 0.005) {\n        col += vec3(1.0, 0.0, 0.0);\n    }\n    \n    if (uv.y > -0.5 - 0.005 && uv.y < -0.5 + 0.005) {\n        col += vec3(1.0, 0.0, 0.0);\n    }\n    \n    if (uv.y > y - 0.005 && uv.y < y + 0.005) {\n        col += vec3(0.0, 1.0, 1.0);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define HALF_PI asin(1.0)\n#define PI 2.0 * HALF_PI\n#define TWO_PI 2.0 * PI\n\nfloat HASH11(float x) {\n    return fract(sin(TWO_PI * x * 45624.456) * 12256.514);\n}\n\nfloat HASH21(vec2 p) {\n    return HASH11(p.x * 1.0156448945 + p.y * 1.04564684467);\n}\n\n\n\n\n\n\n#define TwelfthRootOfTwo pow(2.0, 1.0/12.0)\n\n\nfloat noteFreq(float n) {\n    return pow(TwelfthRootOfTwo, n-49.0) * 440.0;\n}\n\nfloat sinwave(float time, float freq) {\n    return sin(TWO_PI * time * freq);\n}\n\nfloat trianglewave(float time, float freq) {\n    float x = time * freq;\n    float h = sign(fract(x) - 0.5) * 0.5 + 0.5;\n    float g = (fract(x) * h + fract(-x) * (1.0 - h)) * 4.0 - 3.0;\n    return g;\n}\n\nfloat squarewave(float time, float freq) {\n    return sign(sinwave(time, freq));\n}\n\nfloat f(float x) {\n    return (1.0 - x) / (1.0 + x);\n}\n\nfloat g(float x) {\n    return (pow(16.0,(1.0-x))-1.0) * f(1.0 - x);\n}\n\n\nfloat contrain(float x, float a, float b) {\n    if (x < a) {\n        return a;\n    } else if (x > b) {\n        return b;\n    } else {\n        return x;\n    }\n}\n\nfloat n(float n, float start, float end, float time) {\n    float duration = end - start;\n    float dt = time - start;\n    float x = dt / duration;\n    \n    float amp = max(min(g(x) * exp(-8.0 * x), 1.0), 0.0);\n    \n    float s1 = sinwave(dt, noteFreq(n + 0.0));\n    float s2 = sinwave(dt, noteFreq(n + 7.0 - x));\n    float t1 = trianglewave(dt, noteFreq(n));\n    float t2 = squarewave(dt, noteFreq(n - 12.0));\n    \n    float s = s1 * 0.8 + s2 * 0.1 + t1 * 0.6 + t2 * 0.05;\n    \n    if (time >= start && time < end) {\n        return s * amp;\n    } else {\n        return 0.0;\n    }\n}\n\n\nfloat melody(float time) {\n    return \n        +n(68.0, 0.0, 0.5, time)\n        +n(63.0, 0.5, 0.75, time)\n        +n(64.0, 0.75, 1.0, time)\n        +n(66.0, 1.0, 1.25, time)\n        \n        +n(68.0, 1.25, 1.375, time)\n        +n(66.0, 1.375, 1.5, time)\n        \n        +n(64.0, 1.5, 1.75, time)\n        +n(63.0, 1.75, 2.0, time)\n        +n(61.0, 2.0, 2.5, time)\n        \n        +n(61.0, 2.5, 2.75, time)\n        +n(64.0, 2.75, 3.0, time)\n        +n(68.0, 3.0, 3.5, time)\n        \n        +n(66.0, 3.5, 3.75, time)\n        +n(64.0, 3.75, 4.0, time)\n        +n(63.0, 4.0, 4.5, time)\n        \n        +n(63.0, 4.5, 4.625, time)\n        +n(63.0, 4.625, 4.75, time)\n        +n(64.0, 4.75, 5.0, time)\n        +n(66.0, 5.0, 5.5, time)\n        \n        +n(68.0, 5.5, 6.0, time)\n        +n(64.0, 6.0, 6.5, time)\n        +n(61.0, 6.5, 7.0, time)\n        +n(61.0, 7.0, 7.5, time)\n        \n        +n(66.0, 8.0, 8.5, time)\n        +n(66.0, 8.5, 8.75, time)\n        +n(69.0, 8.75, 9.0, time)\n        +n(73.0, 9.0, 9.5, time)\n        \n        +n(71.0, 9.5, 9.75, time)\n        +n(69.0, 9.75, 10.0, time)\n        +n(68.0, 10.0, 10.5, time)\n        \n        +n(68.0, 10.5, 10.75, time)\n        +n(64.0, 10.75, 11.0, time)\n        +n(68.0, 11.0, 11.5, time)\n        \n        +n(66.0, 11.5, 11.75, time)\n        +n(64.0, 11.75, 12.0, time)\n        +n(63.0, 12.0, 12.5, time)\n        \n        +n(63.0, 12.5, 12.625, time)\n        +n(63.0, 12.625, 12.75, time)\n        +n(64.0, 12.75, 13.0, time)\n        +n(66.0, 13.0, 13.5, time)\n        \n        +n(68.0, 13.5, 14.0, time)\n        +n(64.0, 14.0, 14.5, time)\n        +n(61.0, 14.5, 15.0, time)\n        +n(61.0, 15.0, 15.5, time)\n        ;\n}\n\nfloat bass(float time) {\n    return \n        +n(32.0, 0.0, 0.25, time)\n        +n(44.0, 0.25, 0.5, time)\n        +n(32.0, 0.5, 0.75, time)\n        +n(44.0, 0.75, 1.0, time)\n        +n(32.0, 1.0, 1.25, time)\n        +n(44.0, 1.25, 1.5, time)\n        +n(32.0, 1.5, 1.75, time)\n        +n(44.0, 1.75, 2.0, time)\n        \n        +n(37.0, 2.0, 2.25, time)\n        +n(49.0, 2.25, 2.5, time)\n        +n(37.0, 2.5, 2.75, time)\n        +n(49.0, 2.75, 3.0, time)\n        +n(37.0, 3.0, 3.25, time)\n        +n(49.0, 3.25, 3.5, time)\n        +n(37.0, 3.5, 3.75, time)\n        +n(49.0, 3.75, 4.0, time)\n        \n\t\t+n(36.0, 4.0, 4.25, time)\n        +n(48.0, 4.25, 4.5, time)\n        +n(36.0, 4.5, 4.75, time)\n        +n(48.0, 4.75, 5.0, time)\n        \n        +n(32.0, 5.0, 5.25, time)\n        +n(44.0, 5.25, 5.5, time)\n        +n(32.0, 5.5, 5.75, time)\n        +n(44.0, 5.75, 6.0, time)\n        \n        +n(37.0, 6.0, 6.25, time)\n        +n(49.0, 6.25, 6.5, time)\n        +n(37.0, 6.5, 6.75, time)\n        +n(49.0, 6.75, 7.0, time)\n        \n        +n(37.0, 7.0, 7.25, time)\n        +n(39.0, 7.25, 7.5, time)\n        +n(40.0, 7.5, 7.75, time)\n        +n(42.0, 7.75, 8.0, time)\n        \n        +n(30.0, 8.0, 8.25, time)\n        +n(42.0, 8.25, 8.5, time)\n        +n(30.0, 8.5, 8.75, time)\n        +n(42.0, 8.75, 9.0, time)\n        +n(30.0, 9.0, 9.25, time)\n        +n(42.0, 9.25, 9.5, time)\n        +n(30.0, 9.5, 9.75, time)\n        +n(42.0, 9.75, 10.0, time)\n        \n        +n(28.0, 10.0, 10.25, time)\n        +n(40.0, 10.25, 10.5, time)\n        +n(28.0, 10.5, 10.75, time)\n        +n(40.0, 10.75, 11.0, time)\n        +n(28.0, 11.0, 11.25, time)\n        +n(40.0, 11.25, 11.5, time)\n        +n(28.0, 11.5, 11.75, time)\n        +n(40.0, 11.75, 12.0, time)\n        \n        +n(23.0, 12.0, 12.25, time)\n        +n(35.0, 12.25, 12.5, time)\n        +n(23.0, 12.5, 12.75, time)\n        +n(35.0, 12.75, 13.0, time)\n        \n        +n(32.0, 13.0, 13.25, time)\n        +n(44.0, 13.25, 13.5, time)\n        +n(32.0, 13.5, 13.75, time)\n        +n(44.0, 13.75, 14.0, time)\n        \n        +n(37.0, 14.0, 14.25, time)\n        +n(49.0, 14.25, 14.5, time)\n        +n(37.0, 14.5, 14.75, time)\n        +n(49.0, 14.75, 15.0, time)\n        +n(37.0, 15.0, 15.25, time)\n        +n(49.0, 15.25, 15.5, time)\n        +n(37.0, 15.5, 15.75, time)\n        +n(49.0, 15.75, 16.0, time)\n        \n        ;\n}\n\nfloat song(float time) {\n    float amp = melody(time * 1.0) + bass(time * 1.0);\n        \n    return amp;\n}\n\n\nvec2 mainSound( in int samp, float time )\n{\n    float s = song(mod(time*1.2, 16.0));\n    return vec2(s);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"// See Common","name":"Sound","description":"","type":"sound"}]}