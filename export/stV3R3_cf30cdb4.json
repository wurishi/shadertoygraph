{"ver":"0.1","info":{"id":"stV3R3","date":"1659931171","viewed":110,"name":"Radar Spiral","username":"HaleyHalcyon","description":"a","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["radarspiralcirclegridsweep"],"hasliked":0,"parentid":"fdGXD1","parentname":"Not quite spectrum"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// take that tauists\n#define TAU (3.14159265 * 2.)\n// converts hex code to vec3 representation\n#define HEX(x) vec3((ivec3(x) >> ivec3(16, 8, 0)) & 255)/255.\n// makes triangle wave of amplitude 1 period 2\n#define ZIGZAG(x) (1. - abs(1. - mod(x, 2.)))\n\n// draws a square grid\nfloat grid(vec2 uv, float thickness){\n    uv = ZIGZAG(uv);\n    return (1.-step(0., -thickness)) * smoothstep(thickness * 1.5, thickness, min(uv.x, uv.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // loops after 2 seconds, start is offset by 0.5\n    float time = fract(0.5 + iTime / 2.);\n    \n    // Scales pixel coordinates, so that\n    // the center is distance 0 and\n    // diagonals are distance 1\n    vec2 uvR = 2. * fragCoord - iResolution.xy;\n    vec2 uv = uvR / length(iResolution.xy);\n\n    // log-polar coordinates\n    float lenSq = log(uv.x * uv.x + uv.y * uv.y);\n    float angle = atan(uv.y, uv.x);\n    // get the angle for the sweeping needle\n    float needleAngle = (0.125 + time) * TAU;\n    // affects the width of each spiral stripe at the current angle\n    float angleDiff = 1. - fract((0.77 + needleAngle + angle) / TAU);\n    \n    float spiral = ZIGZAG(2. * (\n         lenSq * 0.8\n       + angle / TAU\n       + time * 1.\n       + 0.5\n    ));\n    spiral = step(\n        1.02 - angleDiff * angleDiff * angleDiff,\n        spiral\n    );\n    \n    // the needle is basically a square but with one side extending to infinity\n    // vec2 for needle direction\n    vec2 needleVec = vec2(\n        sin(needleAngle) + cos(needleAngle),\n        cos(needleAngle) - sin(needleAngle)\n    );\n    // brightness of needle at current point\n    float needle = smoothstep(\n        0.02, 0.018, max(\n            // width of needle, capped on both ends\n            abs(\n                dot(uv, needleVec)\n            ),\n            // length of needle, capped on one end but not the other\n            dot(\n                vec2(uv.y, -uv.x), needleVec\n            )\n        )\n    );\n    \n    // draw the grid in the background\n    float grid = min(\n        // coarse grid\n        grid(\n            uv * 10., 1. / 20.\n        )\n        // fine grid\n        + 0.5 * grid(\n            uv * 50., 1. / 8.\n        ),\n        // cap the brightness at 1 so the overlapping grid lines don't overexpose\n        1.\n    );\n    \n    // the circle rings from the center\n    float circles = step(\n        -0.02 * lenSq + 0.8\n    , fract(\n        0.2 * lenSq + time * 3.\n    ));\n    \n    // Time varying pixel color\n    vec3 col = mix(\n        HEX(0x003000),\n        HEX(0x008010),\n        // mask the spiral behind the needle\n        min(spiral, 1. - needle)\n    )\n    + HEX(0x002000) * grid\n    + HEX(0xAFCF60) * needle\n    + HEX(0x806060) * grid * circles;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}