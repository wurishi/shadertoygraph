{"ver":"0.1","info":{"id":"stBfW1","date":"1652115955","viewed":135,"name":"Simple chromakey","username":"SNMetamorph","description":"Playing with chromakey implementation using GLSL.\nTransparency marked with chess pattern.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["chromakey"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CHROMAKEY_COLOR      vec3(0.156, 0.521, 0.105)\n#define COLOR_THRESHOLD      0.96\n#define CHESS_PATTERN_STEP   0.02\n#define BACKGROUND_SPLIT     0.0\n\nvec3 chessPattern( in vec2 texCoords, in float gridScale )\n{\n    float a = fract(texCoords.x * gridScale);\n    float b = fract(texCoords.y * gridScale);\n    a = mix(a, 1.0 - a, step(0.5, b));\n    return mix(vec3(0.0, 0.0, 0.0), vec3(1.0, 0.0, 1.0), step(0.5, a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 pixelColor = texture(iChannel0, uv).rgb;\n    const vec3 backgroundColor = CHROMAKEY_COLOR;\n    const float threshold = COLOR_THRESHOLD;\n    \n    // to avoid normalizing null vector\n    vec3 probeColor = mix(pixelColor, normalize(pixelColor), step(0.3, length(pixelColor)));\n    float t = dot(probeColor, normalize(backgroundColor));\n    float f = smoothstep(threshold - 0.1, threshold, t);\n    float a = step(BACKGROUND_SPLIT, uv.x);\n    vec3 outputColor = mix(pixelColor, chessPattern(fragCoord, CHESS_PATTERN_STEP), f * a);\n    fragColor = vec4(outputColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}