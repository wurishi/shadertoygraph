{"ver":"0.1","info":{"id":"WsXyRr","date":"1583955576","viewed":133,"name":"10/2020","username":"rimina","description":"Continum of my sdaily shader journey. I added some fresnel calculus inspired by demofox as well as beer's law. I also put in use Iq's procedural color palette. Yesterday's iteration shows here: https://www.shadertoy.com/view/WlVSWd","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","reflection","refraction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 80\n#define E 0.001\n#define gamma vec3(2.2)\n\nconst vec3 AMBIENT = vec3(0.3, 0.3, 0.2);\n\nconst vec3 LC1 = vec3(0.3, 0.6, 0.8);\nconst vec3 LC2 = vec3(0.6, 0.4, 0.3);\nconst vec3 FOG = vec3(0.64, 0.62, 0.6);\n\nstruct Material{\n    vec3 absorbed;\n    \n    vec3 lambertian;\n    vec3 specular;\n    float shininess;\n    float sintensity;\n    \n    bool reflective;\n    bool refractive;\n    float reflectivity;\n    float refractivity;\n    int id;\n};\n\nMaterial getGroundMaterial(){\n    Material mat;\n    \n    mat.absorbed = vec3(0.5, 0.6, 0.9);\n    mat.lambertian = vec3(0.1, 0.4, 0.5);\n    mat.specular = vec3(0.1, 0.19, 0.22);\n    mat.shininess = 4.0;\n    mat.sintensity = 0.2;\n    \n    mat.reflective = true;\n    mat.refractive = true;\n    mat.reflectivity = 0.5;\n    mat.refractivity = 1.333;\n    mat.id = 0;\n    \n    return mat;\n}\n\nMaterial getBlockMaterial(in vec2 id){\n    vec2 idd = abs(id);\n    vec2 s = smoothstep(vec2(0.4), vec2(0.8), idd);\n    \n    vec3 col = palette(length(id),\n                       vec3(0.2, 0.1, 0.25),\n                       vec3(0.5, 0.5, 0.5),\n                       vec3(1., 1., 0.),\n                       vec3(0.25, 0.5, 0.8));\n    \n    Material mat;\n    \n    mat.absorbed = col;\n    mat.lambertian = col;\n    mat.specular = col*vec3(0.5, 0.5, 0.7);\n    mat.shininess = 40.0;\n    mat.sintensity = 0.2;\n    \n    mat.reflective = mod(s.x, 2.0) == 0.0;\n    if(!mat.reflective){\n        mat.reflectivity = 0.0;\n    }\n    else{\n        mat.reflectivity = 0.8;\n    }\n    mat.refractive = true; \n    mat.refractivity = 1.63;\n    \n    if(mod(length(id), 4.0) == 0.0){\n        mat.refractive = false;\n\t\tmat.reflectivity = 1.0;\n        \n    }\n    \n    mat.id = 1;\n    \n    return mat;\n}\n\nfloat scene(in vec3 p, out Material mat){\n    \n    float pl = fPlane(p, normalize(vec3(0.0, 1.0, 0.0)), cos(iTime*0.15)-0.7);\n    float h = noise(p*(sqrt(5.0)*0.5 + 0.3)*0.2+iTime*0.2);\n    pl -= smoothstep(0.0, 1.0, h);;\n    \n    vec3 pp = p;\n    vec2 n = vec2(3.0, 8.0);\n    vec2 dif = n*0.5;\n    vec2 id = pMod2(pp.xz, n);\n    //id = abs(id);\n    float idx = 1.0+sin(id.x);\n    float y = abs(cos(idx)+sin(id.y))+0.5;\n\n    float sp = fBox(pp-vec3(0.0, y, 0.0), vec3(1.0, y, 1.0));\n    float guard = -fBoxCheap(pp-vec3(0.0, y, 0.0), vec3(n.x, 5.0, n.y)*0.5);\n    guard = abs(guard) + n.x*0.1;\n    \n    if(pl < sp){\n        \n        mat = getGroundMaterial();\n    }\n    else{\n        mat = getBlockMaterial(id);\n   \t}\n    \n    return min(min(sp, guard), pl);\n}\n\nbool march(in vec3 o, in vec3 d, in float far, in bool inside, out vec3 p, out Material mat, out float t){\n    t = E;\n    float dir = inside ? -1.0 : 1.0;\n    bool hit = false;\n    for(int i = 0; i < STEPS; ++i){\n        p = o + d*t;\n        float dist = dir*scene(p, mat);\n        \n        if(abs(dist) < E || t > far){\n            if(abs(dist) < E ){\n            \thit = true;\n            }\n            break;\n        }\n        t += dist;\n    }\n    \n    return hit;\n}\n\nvec3 normal(in vec3 p){\n    vec3 eps = vec3(E, 0.0, 0.0);\n    Material mat;\n    return normalize(vec3(\n        scene(p+eps.xyy, mat) - scene(p-eps.xyy, mat),\n        scene(p+eps.yxy, mat) - scene(p-eps.yxy, mat),\n        scene(p+eps.yyx, mat) - scene(p-eps.yyx, mat)\n    ));\n}\n\n//referenced from here\n//https://blog.demofox.org/2017/01/09/raytracing-reflection-refraction-fresnel-total-internal-reflection-and-beers-law/\nfloat schlick(float f0, float f1, float rr, vec3 n, vec3 d){\n    float r = (f0-f1)/(f0+f1);\n    r *= r;\n    float angle = -dot(n, d);\n    if(f0 > f1){\n        float f = f0/f1;\n        float sinT2 = f*f*(1.0-angle*angle);\n        if(sinT2 > 1.0){\n            return 1.0;\n        }\n        angle = sqrt(1.0-sinT2);\n    }\n    float x = 1.0-angle;\n    r = r+(1.0-r)*pow(x, 5.0);\n    return rr + (1.0-rr)*r;\n}\n\nvec3 phong(in vec3 n, in vec3 d, in vec3 ld, in Material mat){\n    float lamb = max(dot(n,ld), 0.0);\n    vec3 angle = reflect(n, ld);\n    float spec = pow(max(dot(d, angle), 0.0), mat.shininess);\n    \n    return lamb*mat.lambertian*(1.0-mat.sintensity) + spec*mat.specular*mat.sintensity;\n}\n\nvec3 fog(in vec3 col, in vec3 p, in vec3 ro, in vec3 rd, in vec3 ld, in vec3 lc){\n    float d = length(p-ro);\n    float sa = max(dot(rd, -ld), 0.0);\n    float fa = 1.0-exp(-d*0.06);\n    vec3 fc = mix(FOG, lc, pow(sa, 4.0));\n    return mix(col, fc, fa);\n}\n\nvec3 shadow(vec3 p, in vec3 ld){\n    vec3 s = vec3(1.0);\n    vec3 pr = p;\n    Material mat;\n    float t = 0.0;\n    if(march(p, ld, 40.0, false, pr, mat, t)){\n        s = vec3(0.1, 0.25, 0.2);\n    }\n    \n    return s;\n}\n\nbool reflection(inout vec3 d, in vec3 n, inout vec3 p, out Material mat){\n    d = reflect(d, n);\n    vec3 pr = p;\n    float t = 0.0;\n    if(march(p+n*E*2.0, d, 40.0, false, pr, mat, t)){\n        p = pr;\n        return true;\n    }\n    return false;\n}\n\nbool refraction(inout vec3 d, in vec3 n, in float index, in bool inside, inout vec3 p, out Material mat){\n    d = refract(d, n, index);\n    vec3 pr = p;\n    float t = 0.0;\n    \n    if(march(p-n*2.0*E, d, 20.0, inside, pr, mat, t)){\n        p = pr;\n        return true;\n    }\n}\n\nbool primary(in vec3 o, in vec3 d, out Material mat, out vec3 p, out vec3 n){\n    p = vec3(0.0);\n    n = vec3(0.0);\n    float t = 0.0;\n    \n    if(march(o, d, 40.0, false, p, mat, t)){\n        n = normal(p);\n        return true;\n    }\n    \n    return false;\n}\n\nvec3 shade(in vec3 rd, in vec3 p, in vec3 n, in vec3 ld, in Material mat){\n    vec3 col = vec3(0.0);\n    vec3 nr = n;\n    vec3 pr = p;\n    vec3 dir = rd;\n    Material matr;\n    \n    col += phong(n, rd, ld, mat);\n    float refractivity = 1.0; \n    float f = schlick(refractivity, mat.refractivity, mat.reflectivity, n, rd);\n    \n    \n    if(mat.reflective){\n        if(reflection(dir, n, pr, matr)){\n            nr = normal(pr);\n            col += phong(nr, dir, ld, matr)*f;\n        }\n    }\n    dir = rd;\n    pr = p;\n    vec3 ppr = p;\n    if(mat.refractive){\n        \n        if(refraction(dir, n, refractivity/mat.refractivity, true, pr, matr)){\n            nr = normal(pr);\n            col += phong(nr, dir, ld, matr)*(1.0-f);\n        }\n        if(refraction(dir, -nr, mat.refractivity, false, ppr, matr)){\n            vec3 nnr = normal(ppr);\n            float ff = schlick(mat.refractivity, refractivity, mat.reflectivity, -nr, dir);\n            float d = distance(pr, ppr);\n            vec3 absorbed = exp(-mat.absorbed * d);\n            col += phong(nr, dir, ld, matr)*(1.0-ff);\n            col *= absorbed;\n        }\n    }\n    col *= shadow(p+n*4.0*E, ld);\n    return col;\n}\n\nmat3 camera(in vec3 o, in vec3 t, in vec3 up){\n    \n    vec3 z = normalize(t-o);\n    vec3 x = normalize(cross(z, up));\n    vec3 y = normalize(cross(x, z));\n    \n    return mat3(x, y, z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 q = uv*2.0-1.0;//scaling from -1 to 1\n    q.x *= (iResolution.x/iResolution.y);\n    \n    vec3 ro = vec3(3.0, 5.5, iTime*0.75);\n    vec3 rt = vec3(4.0-8.0*smoothstep(0.0, 200.0, iTime), -5.0, ro.z+10.0);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    \n    mat3 cam = camera(ro, rt, up);\n    vec3 rd = normalize(cam*vec3(q, radians(60.0)));\n    \n    vec3 col = vec3(0.0);\n    \n    vec3 lp = vec3(20.0*sin(iTime*0.25)+ro.x, -10.0, 10.0*cos(iTime*0.25)+ro.z);\n    vec3 lt = ro;\n    vec3 ld = normalize(lt-lp);\n    vec3 ld2 = normalize(ro-rt);\n    \n    Material mat;\n    vec3 p = vec3(0.0);\n    vec3 n = vec3(0.0);\n    float t = 0.0;\n    \n    if(primary(ro, rd, mat, p, n)){\n        //Light 1\n        col = shade(rd, p, n, ld, mat);\n        //light 2\n        col += shade(rd, p, n, ld2, mat);\n        \n        col += AMBIENT;\n    }\n    \n    col = fog(col, p, ro, rd, ld, LC1);\n    col = fog(col, p, ro, rd, ld2, LC2);\n    \n    col *= smoothstep(0.8, 0.1*0.799, distance(uv, vec2(0.5))*(0.6 + 0.1));\n    \n    col = smoothstep(0.08, 1.0, col);\n    \n    col = pow(col, 1.0/gamma);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Functions from different sources (not written by me)\n\n//------------------------------------------------\n//From HG sdf library: http://mercury.sexy/hg_sdf/\nfloat vmax(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n// Box: correct distance to corners\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax(min(d, vec3(0)));\n}\n// Cheap Box: distance to corners is overestimated\nfloat fBoxCheap(vec3 p, vec3 b) { //cheap box\n\treturn vmax(abs(p) - b);\n}\n\n// Plane with normal n (n is normalized) at some distance from the origin\nfloat fPlane(vec3 p, vec3 n, float distanceFromOrigin) {\n\treturn dot(p, n) + distanceFromOrigin;\n}\n\n// Repeat in two dimensions\nvec2 pMod2(inout vec2 p, vec2 size) {\n\tvec2 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5,size) - size*0.5;\n\treturn c;\n}\n//------------------------------------------------\n\n// 3D noise function (IQ)\nfloat noise(vec3 p){\n\tvec3 ip = floor(p);\n    p -= ip;\n    vec3 s = vec3(7.0,157.0,113.0);\n    vec4 h = vec4(0.0, s.yz, s.y+s.z)+dot(ip, s);\n    p = p*p*(3.0-2.0*p);\n    h = mix(fract(sin(h)*43758.5), fract(sin(h+s.x)*43758.5), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z);\n}\n\n//Color palette function from IQ\n//https://iquilezles.org/articles/palettes\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d ){\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n//------------------------------------------------","name":"Common","description":"","type":"common"}]}