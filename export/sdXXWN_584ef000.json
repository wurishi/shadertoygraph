{"ver":"0.1","info":{"id":"sdXXWN","date":"1618728741","viewed":71,"name":"Minecraft cube","username":"alexeyshesh","description":"Шешуков Алексей, 325 группа\nВариант: куб + майнкрафт\n Майнкрафт полупрозрачный, два источника света, подставка, тени, сглаживание","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["cmc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float EPS = 1e-6;\nconst vec3 CAMERA_POS = vec3(5, 4.2, 6);\n\nvec3 LIGHT1_POS = vec3(-0, 1, 4);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(0.9, 0.9, 0.9);\n\nvec3 LIGHT2_POS = vec3(2.5, 0.5, 0);\nconst float LIGHT2_RADIUS = 0.3;\nconst vec3 LIGHT2_COLOR = vec3(1, 1, 1);\n\n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.5 - pos.y) / dir.y;\n    if (t <= 0.0) \n        return INF;\n        \n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0)\n        return INF;\n    normal = vec3(0, 1, 0);\n    return t;\n    \n}\n\n\nfloat traceCube(vec3 pos, vec3 dir, float a, out vec3 normal) {\n\n    vec3 tmin = (vec3( a)-pos)/dir;\t\t\n    vec3 tmax = (vec3(-a)-pos)/dir;\t\t\n    vec3 rmin = min(tmin, tmax);\t\t\n    vec3 rmax = max(tmin, tmax);\t\t\n    float dback  = min( min(rmax.x, rmax.y), rmax.z );\n    float dfront = max( max(rmin.x, rmin.y), rmin.z );\n    \n    float /* t */ rl = dback > dfront ? dfront : INF;\n    \n    if (rl > 0.0) {\n        vec3 xyz = pos + dir * rl;\t\t\n        normal = vec3(0, -1, 0);\n        if ((xyz.x) <= -1. + EPS) {\n            normal = vec3(-1, 0, 0);\n        } else if (xyz.x >= 1. - EPS) {\n            normal = vec3(1, 0, 0);\n        } else if (xyz.z <= -1. + EPS) {\n            normal = vec3(0, 0, -1);\n        } else if (xyz.z >= 1. - EPS) {\n            normal = vec3(0, 0, 1);\n        } else if (xyz.y >= 1. - EPS) {\n            normal = vec3(0, 1, 0);\n        } else if (xyz.y <= -1. + EPS) {\n            normal = vec3(0, -1, 0);\n        } \t\n        return rl;\n    }\n    \n    \n    \n    return INF;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float b = dot(pos, dir);\n    float d = b * b - dot(pos, pos) + r * r;\n    if (d < 0.0) {\n        return INF;\n    }\n    \n    float t = -b - sqrt(d);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(d);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n    \n}\n\nfloat traceCube1(vec3 pos, vec3 dir, float a, out vec3 normal) {\n    float t = (1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (worldPos.x < 1. && worldPos.x > -1. && \n        worldPos.z < 1. && worldPos.z > -1. ) {\n        normal = vec3(0, -1, 0);\n        return t;\n    }\n    \n    \n    \n    return INF;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= -1.) \n        return INF;\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 3.0) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 3.0;\n    float d = b * b - a * c;\n    if (d < 0.0) {\n        return INF;\n    }\n    \n    t = (-b - sqrt(d)) / a;\n    \n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y < -1.) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n        \n    }\n    t = (-b + sqrt(d)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = length(toLight1) * length(toLight1);\n    float att1 = 20.0f / distSq1;\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = length(toLight2) * length(toLight2);\n    float att2 = 10.0f / distSq2;\n    \n    return color * (\n    max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR +\n    max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR +\n    texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n    \n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame) {\n    return fract(sin(dot(vec3(frame), vec3(12.9898, 78.233, 45.5432))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) /iResolution.x;\n    \n    LIGHT1_POS += (randVals.xyz - 0.5) * 2.0 / iResolution.x;\n    LIGHT2_POS += (randVals.xyz - 0.5) * 2.0 / iResolution.x;\n    \n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front)); \n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    const int INSIDES = 4;\n    \n    const float AIR_N = 1.0;\n    const float GLASS_N = 1.5;\n   \n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n            if (randVals.y < 0.2) {\n                materialType = REFLECTION;\n            }\n        }\n        \n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        \n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n      \n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            vec3 worldPos = t * curDir + curPos;\n            t = cylT;\n            materialType = DIFFUSE;\n            normal = cylNorm;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n        }\n        \n        \n        vec3 cubeNorm;\n        \n        vec3 minecraftNorm;\n        float minecraftT = traceCube(curPos, curDir, 0.9 - EPS, minecraftNorm);\n        if (minecraftT < t) {\n            vec3 worldPos = t * curDir + curPos;\n            t = minecraftT;\n            normal = minecraftNorm;\n            materialType = INSIDES;\n            vec3 d = vec3(fragCoord,1)/iResolution-0.5, p, c, f, g = d, o, y=vec3(0,1,0);\n            o.x = 0.3;\n            o.z = 0.5;\n            o.y = 3.0 * cos((o.x)*(o.z));\n            for (float i = 0.0; i<9.0; i+=0.01) {\n                o += d * i * 0.1;\n                c = o;\n                f = fract(c); \n                p = floor(c )*.3;\n                if( cos(p.z) + sin(p.x) > ++p.y ) {\n                    g = (f.y - 0.04 * cos((c.x+c.z)*40.0) > 0.8 ? y : f.y * y.yxz) / i;\n                    break;\n                }\n            }\n            \n            color = 0.8 * g + color;\n        }\n        \n        \n        float cubeT = traceCube(curPos, curDir, 1.0, cubeNorm);\n        \n        if (cubeT < t) {\n            vec3 worldPos = t * curDir + curPos;\n            \n            t = cubeT;\n            normal = normalize(cubeNorm);\n            color = normal;\n            materialType = EMISSION;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n            }\n            \n            \n        }\n        \n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal);\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n                \n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-5;\n                float tmp =  n1;\n                n1 = n2;\n                n2 = tmp;\n            } else if (materialType == INSIDES) {\n                fragColor.rgba = vec4(color.x, color.y, color.z, 0.00);\n                break;\n            }\n        } else {\n            fragColor = texture(iChannel1, curDir);\n        }\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}