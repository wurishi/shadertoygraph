{"ver":"0.1","info":{"id":"Xd3cRs","date":"1519758872","viewed":542,"name":"Quick Sunshafts","username":"Assossa","description":"As described in GPU Gems 3: https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch13.html\n\nI have steps set to 128. This is a massive amount of texture lookups, but the shafts have banding without a high step count. Let me know if there is a better way","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["godrays","postprocess","sunshafts","gpugems"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 128\n\nfloat sunShafts(vec2 uv) {\n    float sum = 0.0;\n    vec2 stepV = (uv - vec2(.5)) / float(STEPS);\n    \n    for(int i = 0; i < STEPS; i++) {\n        sum += texture(iChannel0, uv).w;\n        uv -= stepV;\n    }\n    \n    return sum / float(STEPS);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    float shafts = sunShafts(uv);\n    \n    fragColor = texture(iChannel0, uv) + vec4(shafts);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SUN vec3(0,0,1)\n\nfloat sphere(vec3 p, vec3 c, float r) {\n    return length(p - c) - r;\n}\n\nfloat box(vec3 p, vec3 b) {\n  \tvec3 d = abs(p) - b;\n  \treturn min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat torus(vec3 p, vec2 t) {\n  \tvec2 q = vec2(length(p.xz)-t.x,p.y);\n  \treturn length(q)-t.y;\n}\n\nfloat scene(vec3 p) {\n    vec3 ballPos = vec3(sin(iTime) * 1.5, 0, 0);\n    return min(\n        max(\n            sphere(p, ballPos, 1.0),\n            -box(p - ballPos, vec3(.4, .4, 3.))\n        ),\n        torus((p - ballPos).xzy, vec2(1.5, 0.2))\n\t);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 pos = vec3(0,0,-2);\n    vec3 dir = normalize(vec3((2. * fragCoord - iResolution.xy) / iResolution.y, 1));\n    \n    for(int i = 0; i < 64; i++) {\n        float dist = scene(pos);\n        pos += dir * dist;\n    }\n    \n    if(pos.z > 3.0) {\n        fragColor = clamp(vec4(pow(dot(dir, SUN), 4.0)), 0.0, 1.0);\n        return;\n    }\n    \n    fragColor = vec4(0.0);\n}","name":"Buf A","description":"","type":"buffer"}]}