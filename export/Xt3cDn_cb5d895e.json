{"ver":"0.1","info":{"id":"Xt3cDn","date":"1532354605","viewed":3670,"name":"Quality hashes collection WebGL2","username":"nimitz","description":"Collection of useful hashes with various output and input dimensions of much higher quality than the traditionally used gpu hashes. See \"Common\" tab for 1D and 3D input.","likes":80,"published":1,"flags":0,"usePreview":0,"tags":["random","hash","xorshift","xxhash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Quality hashes collection\n//by nimitz 2018 (twitter: @stormoid)\n\n//The MIT License\n//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*\n\tThis is a collection of useful \"high-quality\" hash functions for WebGL 2 (or anything supporting uints\n\tand bitwise ops) returning values in the 0..1 range as 32bit floats\n\n\tI am using either the a XXhash32 (https://github.com/Cyan4973/xxHash) modified function (for low input\n\tcount). This is a relatively fast and very high quality hash function that can be used as a basis for\n\tcomparison.\tMy modified version was tested to make sure it still has quality comparable with the\n\treference implementation.\n\n\tThe second option is a modified version of iq's \"Integer Hash III\" (https://www.shadertoy.com/view/4tXyWN)\n\tWhich I tested using ENT (http://www.fourmilab.ch/random/) and turned out to have serious quality issues.\t\n\tI added the same XORShift finisher as XXHash to improve the characteristics and this turned out\tto work\n\tmuch better than I hoped, every test I have ran suggest that the quality of the modified version is very\n\thigh. I also implemented 1D and 3D input versions of this hash and tested to make sure the quality\n\tremained high.\n\n\tI did some prelinimary testing and it seems that the bit rotation line(s) of the XXHash implementations can\n\tbe omitted without much consequence in terms of quality (for very low input count as used here).\n\tThis would make the xxhash based method as fast as the other and the quality would likely be higher,\n\tfurther testing would be required to confirm.\n\n\n\tFor the generation of multiple outputs dimensions (if needed) from the base hash I am using MINSTD\n\twith the generator parameters from: http://random.mat.sbg.ac.at/results/karl/server/node4.html\n\tI also tested the hash quality after the MINSTD step and there seems to be little to no loss in quality from\n\tthat final step. One thing I did not test for is the potential correlation between the MINSTD generators,\n\tbut I doubt\tthis would be an issue, let me know if turns out to be the case.\n\n\tI included the 1D and 3D input versions in the common tab as to not clutter this tab too much.\n\n\n\tPlease report any issues, statistical or otherwise either here in the comments section\n\tor on twitter.\n\n\n\tSee the bottom of this page for an example of usage with arbitrary float input.\n*/\n\n/*\n\tN.B.\n\tIf speed is the main concern (and hash quality doesn't matter much), I suggest using\n \tthe faster \"Simplest Fastest 2D Hash\" by James_Harnett (https://www.shadertoy.com/view/MdcfDj)\n\tOr the multi-dimensional variants of it from Dave_Hoskins: https://www.shadertoy.com/view/XdGfRR\n\n\tI also compared the hashes of this shader with the \"2D Weyl hash 32-bit XOR\" from MBR \n\t(https://www.shadertoy.com/view/4dlcR4)\tand even with an added Xorshift finisher, the quality was still\n\ttoo low to be a good candidate for low bias\trendering or applications with higher quality requirements. \n\tIn addition, the performance with the added\tfinisher would be comparable the the hashes in this collection.\n*/\n\n#if 1\n//Modified from: iq's \"Integer Hash - III\" (https://www.shadertoy.com/view/4tXyWN)\n//Faster than \"full\" xxHash and good quality\nuint baseHash(uvec2 p)\n{\n    p = 1103515245U*((p >> 1U)^(p.yx));\n    uint h32 = 1103515245U*((p.x)^(p.y>>3U));\n    return h32^(h32 >> 16);\n}\n#else\n//XXHash32 based (https://github.com/Cyan4973/xxHash)\n//Slower, higher quality\nuint baseHash(uvec2 p)\n{\n    const uint PRIME32_2 = 2246822519U, PRIME32_3 = 3266489917U;\n\tconst uint PRIME32_4 = 668265263U, PRIME32_5 = 374761393U;\n    uint h32 = p.y + PRIME32_5 + p.x*PRIME32_3;\n    h32 = PRIME32_4*((h32 << 17) | (h32 >> (32 - 17))); //Initial testing suggests this line could be omitted for extra perf\n    h32 = PRIME32_2*(h32^(h32 >> 15));\n    h32 = PRIME32_3*(h32^(h32 >> 13));\n    return h32^(h32 >> 16);\n}\n#endif\n\n//---------------------2D input---------------------\n\nfloat hash12(uvec2 x)\n{\n    uint n = baseHash(x);\n    return float(n)*(1.0/float(0xffffffffU));\n}\n\nvec2 hash22(uvec2 x)\n{\n    uint n = baseHash(x);\n    uvec2 rz = uvec2(n, n*48271U);\n    return vec2((rz.xy >> 1) & uvec2(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec3 hash32(uvec2 x)\n{\n    uint n = baseHash(x);\n    uvec3 rz = uvec3(n, n*16807U, n*48271U);\n    return vec3((rz >> 1) & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec4 hash42(uvec2 x)\n{\n    uint n = baseHash(x);\n    uvec4 rz = uvec4(n, n*16807U, n*48271U, n*69621U); //see: http://random.mat.sbg.ac.at/results/karl/server/node4.html\n    return vec4((rz >> 1) & uvec4(0x7fffffffU))/float(0x7fffffff);\n}\n\n//--------------------------------------------------\n\n\n//Example taking an arbitrary float value as input\n/*\n\tThis is only possible since the hash quality is high enough so that\n\traw float input doesn't break the process when the raw bits are used\n*/\nvec4 hash42(vec2 x)\n{\n    uint n = baseHash(floatBitsToUint(x));\n    uvec4 rz = uvec4(n, n*16807U, n*48271U, n*69621U);\n    return vec4((rz >> 1) & uvec4(0x7fffffffU))/float(0x7fffffff);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    vec2 p = fragCoord/iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n    \n    //float input\n    //fragColor = hash42(p);\n    \n    //2D input\n    fragColor = hash42(uvec2(fragCoord));\n    \n    //1D input\n    //fragColor = hash41(uint(fragCoord.x + fragCoord.y*900.));\n    \n    //3D input\n    //fragColor = hash43(uvec3(fragCoord.xy, uint(fragCoord.y)*0xffffU));\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Quality hashes collection\n//by nimitz 2018 (twitter: @stormoid)\n\n//The MIT License\n//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#if 1\n//Modified from: iq's \"Integer Hash - III\" (https://www.shadertoy.com/view/4tXyWN)\nuint baseHash(uvec3 p)\n{\n    p = 1103515245U*((p.xyz >> 1U)^(p.yzx));\n    uint h32 = 1103515245U*((p.x^p.z)^(p.y>>3U));\n    return h32^(h32 >> 16);\n}\n\nuint baseHash(uint p)\n{\n    p = 1103515245U*((p >> 1U)^(p));\n    uint h32 = 1103515245U*((p)^(p>>3U));\n    return h32^(h32 >> 16);\n}\n#else\n//XXHash32 based (https://github.com/Cyan4973/xxHash)\nuint baseHash(uvec3 p)\n{\n\tconst uint PRIME32_2 = 2246822519U, PRIME32_3 = 3266489917U;\n\tconst uint PRIME32_4 = 668265263U, PRIME32_5 = 374761393U;\n\tuint h32 =  p.z + PRIME32_5 + p.x*PRIME32_3;\n\th32 = PRIME32_4*((h32 << 17) | (h32 >> (32 - 17)));\n\th32 += p.y * PRIME32_3;\n\th32 = PRIME32_4*((h32 << 17) | (h32 >> (32 - 17))); //Initial testing suggests this line could be omitted for extra perf\n    h32 = PRIME32_2*(h32^(h32 >> 15));\n    h32 = PRIME32_3*(h32^(h32 >> 13));\n    return h32^(h32 >> 16);\n}\n\nuint baseHash(uint p)\n{\n\tconst uint PRIME32_2 = 2246822519U, PRIME32_3 = 3266489917U;\n\tconst uint PRIME32_4 = 668265263U, PRIME32_5 = 374761393U;\n\tuint h32 = p + PRIME32_5;\n\th32 = PRIME32_4*((h32 << 17) | (h32 >> (32 - 17))); //Initial testing suggests this line could be omitted for extra perf\n    h32 = PRIME32_2*(h32^(h32 >> 15));\n    h32 = PRIME32_3*(h32^(h32 >> 13));\n    return h32^(h32 >> 16);\n}\n#endif\n\n//---------------------3D input---------------------\nfloat hash13(uvec3 x)\n{\n    uint n = baseHash(x);\n    return float(n)*(1.0/float(0xffffffffU));\n}\n\nvec2 hash23(uvec3 x)\n{\n    uint n = baseHash(x);\n    uvec2 rz = uvec2(n, n*48271U); //see: http://random.mat.sbg.ac.at/results/karl/server/node4.html\n    return vec2((rz.xy >> 1) & uvec2(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec3 hash33(uvec3 x)\n{\n    uint n = baseHash(x);\n    uvec3 rz = uvec3(n, n*16807U, n*48271U); //see: http://random.mat.sbg.ac.at/results/karl/server/node4.html\n    return vec3((rz >> 1) & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec4 hash43(uvec3 x)\n{\n    uint n = baseHash(x);\n    uvec4 rz = uvec4(n, n*16807U, n*48271U, n*69621U); //see: http://random.mat.sbg.ac.at/results/karl/server/node4.html\n    return vec4((rz >> 1) & uvec4(0x7fffffffU))/float(0x7fffffff);\n}\n\n//---------------------1D input---------------------\nfloat hash11(uint x)\n{\n    uint n = baseHash(x);\n    return float(n)*(1.0/float(0xffffffffU));\n}\n\nvec2 hash21(uint x)\n{\n    uint n = baseHash(x);\n    uvec2 rz = uvec2(n, n*48271U); //see: http://random.mat.sbg.ac.at/results/karl/server/node4.html\n    return vec2((rz.xy >> 1) & uvec2(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec3 hash31(uint x)\n{\n    uint n = baseHash(x);\n    uvec3 rz = uvec3(n, n*16807U, n*48271U); //see: http://random.mat.sbg.ac.at/results/karl/server/node4.html\n    return vec3((rz >> 1) & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec4 hash41(uint x)\n{\n    uint n = baseHash(x);\n    uvec4 rz = uvec4(n, n*16807U, n*48271U, n*69621U); //see: http://random.mat.sbg.ac.at/results/karl/server/node4.html\n    return vec4((rz >> 1) & uvec4(0x7fffffffU))/float(0x7fffffff);\n}","name":"Common","description":"","type":"common"}]}