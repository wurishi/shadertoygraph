{"ver":"0.1","info":{"id":"lsBfz1","date":"1499427133","viewed":198,"name":"Alt smoothstep","username":"djedge","description":"Using alternative smoothstep and its inverse.\n\nThe smooth factor is defined between 0.0 (resp. 2.0) and 1.0 (resp. 1.0) for the smoothstep func (resp. the inverse smoothstep func).","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","smoothstep","inverse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on https://www.shadertoy.com/view/MsSBRh from Inigo Quilez\n\n\nfloat smoothstep_alt (in float t, in float p)\n{\n    if (t > 0.5)\n        return (2.0-2.0*p+t*(3.0*p-4.0))/(2.0-3.0*p+4.0*t*(p-1.0));\n    else\n        return (p*t)/(2.0-p+4.0*t*(p-1.0));\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    float px = 1.0/iResolution.y;\n    vec2  p = ( vec2((iResolution.y-iResolution.x)/2.0,0.0)+fragCoord)/iResolution.y;\n    \n    vec3 col = vec3(0.0);\n    \n    if( p.x>0.0 && p.x<1.0 )\n    {\n        col = vec3( 0.2 ) + 0.01*mod(floor(p.x*20.0)+floor(p.y*20.0),2.0);\n\n        float smoothfactor = 0.25*(cos(iTime) + 1.0) + 0.25;\n        \n        // blue: smoothstep\n        float y1 = smoothstep_alt( p.x, smoothfactor );\n        col = mix( col, vec3(0.0,0.4,0.8), 1.0-smoothstep( 0.0, 2.0*px, abs(p.y-y1) ) );\n\n        // yellow: inverse_smoothstep\n        float y2 = smoothstep_alt( p.x, 2.0 - smoothfactor );\n        col = mix( col, vec3(1.0,0.7,0.0), 1.0-smoothstep( 0.0, 2.0*px, abs(p.y-y2) ) );\n\n        // gray: smoothstep of inverse_smoothstep, back to identity\n        float y3 = smoothstep_alt( y2, smoothfactor );\n        col = mix( col, vec3(0.5,0.5,0.5), 1.0-smoothstep(0.0, 1.5*px, abs(p.y-y3) ) );\n    }\n    \n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}