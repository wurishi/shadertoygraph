{"ver":"0.1","info":{"id":"7sXGzj","date":"1616242262","viewed":164,"name":"Lonely light & particles","username":"kaylent","description":"Press LBM to change the light pos.\nRestart if there are no particles.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["blur","particles","shadows"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define debug 0\n#define shadowIntensity 0.038\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;    \n\n    vec4 lightColor = vec4(0.86,0.86,0.86,1.0)*35.;\n\n    vec2 mousePos = iMouse.xy;\n    if (iMouse.x == 0. || iMouse.y==0.) mousePos = vec2(400,225);\n    vec3 lightPos = vec3(mousePos.x, mousePos.y, 85.); \n    float dif = dot(vec3(0.,0.,1.), normalize(lightPos - vec3(fragCoord, 0.)))/\n        (length(lightPos - vec3(fragCoord, 0.)));\n    fragColor = dif*lightColor;\n    lightPos = vec3(mousePos.x, mousePos.y, 0.03); \n    dif = dot(vec3(0.,0.,1.), normalize(lightPos - vec3(fragCoord, 0.)))/\n        (length(lightPos - vec3(fragCoord, 0.)));\n    fragColor += dif*lightColor;\n    //shadows\n    float shadowAcc = 1.;\n    vec2 distance = mousePos-fragCoord.xy;\n    vec2 pos = fragCoord.xy;\n    if (abs(distance.x) > abs(distance.y)){\n        for (int i = 0; i<int(abs(distance.x)); ++i){            \n            vec2 posuv;\n            posuv.x = pos.x/iResolution.x;\n            posuv.y = pos.y/iResolution.y;\n            float accuracyCoef = length(pos - vec2(pos.x, round(pos.y+0.5)));\n            shadowAcc -= texture(iChannel2, posuv).x*(shadowIntensity)*(1.-accuracyCoef);\n            pos.x += 1.*sign(distance.x);\n            pos.y += distance.y/abs(distance.x);\n        }\n    }\n    if (abs(distance.y) >= abs(distance.x)){\n        for (int i = 0; i<int(abs(distance.y)); ++i){            \n            vec2 posuv;\n            posuv.x = pos.x/iResolution.x;\n            posuv.y = pos.y/iResolution.y;\n            float accuracyCoef = length(pos - vec2(pos.x, round(pos.y+0.5)));\n            shadowAcc -= texture(iChannel2, posuv).x*(shadowIntensity)*(1.-accuracyCoef);\n            pos.y += 1.*sign(distance.y);\n            pos.x += distance.x/abs(distance.y);\n        }\n    }    \n    fragColor *=shadowAcc;\n    \n    if (debug==1) {\n        if (length(lightPos - vec3(fragCoord, 0.))>100.)\n            fragColor *=0.;\n    }\n\n\n    fragColor = max(texture(iChannel2, uv).x*vec4(0.86,0.86,0.86,1.0), fragColor);\n\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define numParticlesX 20.\n#define numParticlesY 20.\n#define particleSizeX 1./800.\n#define particleSizeY 1./450.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n   \n    texture(iChannel1, uv);\n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    if (texture(iChannel1, uv).x == 1.){\n        \n    }\n    \n    float GI = 0.;\n    for (int x = 0; x<int(numParticlesX); ++x){\n        for (int y = 0; y<int(numParticlesY); ++y){ \n            vec2 cUv = vec2(float(x), float(y))/iResolution.xy;                \n            if (length(uv.x - texture(iChannel2, cUv).x)<=particleSizeX\n            && length(uv.y - texture(iChannel2, cUv).y)<=particleSizeY\n            ) fragColor = vec4(1.0,0.,0.,1.);\n            GI +=  texture(iChannel2, cUv).z;\n        }\n    }    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//consist information about particles\n\n#define numParticlesX 20.\n#define numParticlesY 20.\n#define particleSizeX 1./800.\n#define particleSizeY 1./450.\n\n//random alghorithm by Spatial https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl \nuint hash( uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\n\nfloat floatConstruct( uint m ) {\n    const uint ieeeMantissa = 0x007FFFFFu; \n    const uint ieeeOne      = 0x3F800000u; \n\n    m &= ieeeMantissa;                     \n    m |= ieeeOne;                          \n\n    float  f = uintBitsToFloat( m );       \n    return f - 1.0;                        \n}\n\nfloat random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }\n\nuint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    vec2 mousePos = iMouse.xy;\n    if (iMouse.x == 0. || iMouse.y==0.) mousePos = vec2(400,225);\n       \n   \n    if (fragCoord.x < numParticlesX && fragCoord.y < numParticlesY){\n        if (iTime>0.4 ){\n            vec2 pos = texture(iChannel0, uv).xy;\n            vec2 shift = texture(iChannel0, uv).zw;\n\n            for (int x = 0; x<int(numParticlesX); ++x){\n                for (int y = 0; y<int(numParticlesY); ++y){ \n                    if (x != int(fragCoord.x) && y != int(fragCoord.y)){\n                        vec2 cUv = vec2(float(x), float(y))/iResolution.xy; \n                        vec2 tmpPos = texture(iChannel0, cUv).xy;\n                        vec2 particlesDir = tmpPos - pos;\n                        vec2 nParticlesDir = vec2(0.1,0.1);;\n                        if (particlesDir.x != 0. || particlesDir.y != 0.) nParticlesDir = normalize(particlesDir);\n                        float particlesDirLength = 0.00001;\n                        if (particlesDir.x != 0. || particlesDir.y != 0.) particlesDirLength = length(particlesDir);\n                        shift+=0.00001 * (normalize(mousePos- pos*iResolution.xy))*pow(length(mousePos- pos*iResolution.xy), 2.)/8000.; \n\n\n                    }\n                }\n            }  \n\n            pos+=shift*0.065;\n            if (pos.x < 0. || pos.y <0. || pos.x >1. || pos.y >1.){\n                shift = -texture(iChannel0, uv).zw;\n                pos = texture(iChannel0, uv).xy;\n                pos+=shift*0.1;            \n            }\n            if (length(shift)>0.08) shift*=0.99;\n            fragColor.xyzw = vec4(pos, shift);\n        }\n\n        //init data\n        if (iTime<=0.3){\n            fragColor = vec4 (random(fragCoord.x+fragCoord.y*800.), random(fragCoord.x+fragCoord.y*800.+800.*450.), (random(fragCoord.x+fragCoord.y*800.+800.*450.*2.)-0.5)/100.*2., (random(fragCoord.x+fragCoord.y*800.+800.*450.*3.)-0.5)/100.*2.);        \n        }\n\n\n        //delete particles with the same position\n        if (iTime<=0.4 && iTime>0.3){\n            for (int x = 0; x<int(numParticlesX); ++x){\n                for (int y = 0; y<int(numParticlesY); ++y){ \n                    vec2 cUv = vec2(float(x), float(y))/iResolution.xy;                \n                    if (texture(iChannel0, uv).x - texture(iChannel0, cUv).x <= particleSizeX\n                        && \n                        texture(iChannel0, uv).y - texture(iChannel0, cUv).y <= particleSizeY\n                        && int(fragCoord.x) + int(fragCoord.y)*800 < x + y *800)\n                        int a;\n\n                }\n            }\n        }\n    }\n    \n    \n   \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//blur\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float core[25] = float[]\n    (\n    0.000789, 0.006581, 0.013347, 0.006581, 0.000789,\n    0.006581, 0.054901, 0.111345, 0.054901, 0.006581,\n    0.013347, 0.111345, 0.225821, 0.111345, 0.013347,\n    0.006581, 0.054901, 0.111345, 0.054901, 0.006581, \n    0.000789, 0.006581, 0.013347, 0.006581, 0.000789\n    );\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = vec4(0.);\n    for (int x = - 2; x<=2; ++x){\n        for (int y = -2; y<=2; ++y){\n           int  matrixPos = 2-x+(2-y)*5;\n           vec2 uv = vec2(fragCoord.x+float(x), fragCoord.y+float(y));   \n           uv.x /= iResolution.x;\n           uv.y /= iResolution.y;\n           float val = texture(iChannel0,uv).x;\n           fragColor.x+=val*core[matrixPos];\n        }    \n    }\n    \n    if (texture(iChannel1,uv).x>0.1  && texture(iChannel1,uv).y<30.){\n    fragColor.y = texture(iChannel1,uv).y+1.;\n        for (int x = - 2; x<=2; ++x){\n            for (int y = -2; y<=2; ++y){\n               int  matrixPos = 2-x+(2-y)*5;\n               vec2 uv = vec2(fragCoord.x+float(x), fragCoord.y+float(y));   \n               uv.x /= iResolution.x;\n               uv.y /= iResolution.y;\n               float val = texture(iChannel1,uv).x;\n\n               fragColor.x+=val*core[matrixPos]/(texture(iChannel1,uv).y+1.)*0.5;\n            }    \n        }\n    }\n    \n    fragColor.x = clamp(fragColor.x, 0.,1.);\n    \n}","name":"Buffer C","description":"","type":"buffer"}]}