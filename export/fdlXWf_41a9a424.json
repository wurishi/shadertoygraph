{"ver":"0.1","info":{"id":"fdlXWf","date":"1619371295","viewed":159,"name":"Ant / Particle CA","username":"laserbat","description":"Something akin to Langton's Ant, but particles only change their movement direction when they collide with a \"tail\" left by any of the particles.\n\nRendering is done in \"Buffer A\" tab.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["feedback","ant","particle","cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Colorization and output stuff here.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {    \n    float val = tanh(texelFetch(iChannel0, ivec2(fragCoord), 0).z * 50.0);\n    fragColor.r = fract(45.67 * texelFetch(iChannel0, ivec2(fragCoord), 0).x);\n    fragColor.g = fract(7.73 * texelFetch(iChannel0, ivec2(fragCoord), 0).x);\n    fragColor.b = fract(345.67 * texelFetch(iChannel0, ivec2(fragCoord), 0).x);\n    fragColor = fragColor * val;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define GET_X(d) texelFetch(iChannel0, ivec2(mod(fragCoord + vec2(d) + res, res)), 0).x\n#define GET_Y(d) texelFetch(iChannel0, ivec2(mod(fragCoord + vec2(d) + res, res)), 0).y\n#define GET_Z(d) texelFetch(iChannel0, ivec2(mod(fragCoord + vec2(d) + res, res)), 0).z\n\n// How fast particle tail decays.\nconst float TAIL_DECAY = 0.991;\n\n// Adjusts behavior of particles.\nconst float C1 = 12.34;\nconst float C2 = 56.78;\n\n// Probability for a particle to spawn at initialization stage.\nconst float PARTICLE_PROB = 0.0005;\n\n// When tail decays under this value, it's set to zero.\nconst float EPS = 0.001;\n\nfloat noise(in vec2 co){\n    float a = fract(co.x * 10.5 + co.y * 7.5 + fract(iDate.a));\n    a = fract(715.5 * a * a + 57.1 * co.x);\n    a = fract(1371.5 * a * a + 757.1 * co.y);\n    return a;\n}\n\n\n// Main CA computation\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 res = iResolution.xy;\n\n    if (iFrame > 0) {\n    \tivec2 d;\n        \n        // x component contains tail value\n        // y component contains angle of a particle\n        //   (zero means no particle is present)\n        // z component measures decay of the tail.\n        float val = GET_Y(vec2(0.0, 0.0));\n        \n        if (abs(val) > 0.0) { // Current cell contains a particle\n            // A particle moves and leaves tail each step\n            fragColor.x = val;\n            fragColor.y = 0.0;\n            // Newly left tail has decay level of 1.0\n            fragColor.z = 1.0;\n        } else {\n            // Old tails decay each step\n            fragColor.z = GET_Z(vec2(0.0, 0.0)) * TAIL_DECAY;\n            // Tail value propagates to next iteration\n            fragColor.x = GET_X(vec2(0.0, 0.0));\n\n            // Tails with too much decay become zero\n            if (fragColor.z < EPS){\n                fragColor.z = 0.0;\n                fragColor.x = 0.0;\n            }\n            \n\n            // Check if there's a particle movintg towards this cell\n            for(d.y = -1; d.y <= +1; d.y++){\n                for(d.x = -1; d.x <= +1; d.x++){\n                    val = GET_Y(d);\n                    // If such particle is found, this cell becomes a partincle on next iteration\n                    if (abs(val) > 0.0 && d == ivec2(round(sin(val)), round(cos(val)))){\n                        fragColor.y = val + C1 * fract(C2 * fragColor.x);\n                    }\n                }\n            }\n        }\n    } else {\n        // Seeding.\n        if (noise(fragCoord * 0.01) > 1.0 - PARTICLE_PROB)\n            fragColor = vec4(0.0, 10.0 * noise(fragCoord), 1, 0.0);\n        else {\n            fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\n        }\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"}]}