{"ver":"0.1","info":{"id":"7s3fzn","date":"1655904746","viewed":201,"name":"Cloud nebula","username":"fpiaggio","description":"space, nebula, stars, noise","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","space","stars","nebula"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// based on: https://www.shadertoy.com/view/XtGBzR\n// by uqone \nfloat hash( const in float n ) {\n\treturn fract(sin(n));\n    //return fract(sin(n)*4378.5453);\n}\nmat2 rot2D(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\nfloat pnoise(in vec3 o) \n{\n\tvec3 p = floor(o);\n\tvec3 fr = fract(o);\n\t\t\n\tfloat n = p.x + p.y*57.0 + p.z * 1009.0;\n\n\tfloat a = hash(n+  0.0);\n\tfloat b = hash(n+  1.0);\n\tfloat c = hash(n+ 57.0);\n\tfloat d = hash(n+ 58.0);\n\t\n\tfloat e = hash(n+  0.0 + 1009.0);\n\tfloat f = hash(n+  1.0 + 1009.0);\n\tfloat g = hash(n+ 57.0 + 1009.0);\n\tfloat h = hash(n+ 58.0 + 1009.0);\n\t\n\t\n\tvec3 fr2 = fr * fr;\n\tvec3 fr3 = fr2 * fr;\n\t\n\tvec3 t = 3.0 * fr2 - 2.0 * fr3;\n\t\n\tfloat u = t.x;\n\tfloat v = t.y;\n\tfloat w = t.z;\n\n\tfloat res1 = a + (b-a)*u +(c-a)*v + (a-b+d-c)*u*v;\n\tfloat res2 = e + (f-e)*u +(g-e)*v + (e-f+h-g)*u*v;\n\t\n\tfloat res = res1 * (1.0- w) + res2 * (w);\n\t\n\treturn res;\n}\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n\nfloat SmoothNoise( vec3 p )\n{\n    float f;\n    f  = 0.5000*pnoise( p ); p = m*p*1.02;\n    f += 0.2500*pnoise( p ); \n\t\n    return f * (1.0 / (0.5000 + 0.2500));\n}\n\nvec3 getN(in vec3 from, in vec3 dir, int levels, float power) \n{\n\tvec3 color=vec3(0.0);\n\tvec3 st = (dir * 2.+ vec3(0.3,2.5,1.25)) * .3;\n\tfor (int i = 0; i < levels; i++) st = abs(st) / dot(st,st) - .9;\n    float star = min( 1., pow( min( 5., length(st) ), 3. ) * .0025 )*1.5;\n\n   \tvec3 randc = vec3(SmoothNoise( dir.xyz*10.0*float(levels) ), SmoothNoise( dir.xzy*10.0*float(levels) ), SmoothNoise( dir.yzx*10.0*float(levels) ));\n\tcolor += star * randc;\n\n\treturn pow(color*1., vec3(power));\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n\tvec2 uv = gl_FragCoord.xy / iResolution.xy;\n    \n\tvec2 uvo=(uv-.5)*2.;\n\tvec2 oriuv=uv;\n\t\n    uv=uv*2.-1.;\n\tuv.y*=iResolution.y/iResolution.x;\n\tuv.y-=.03;\n\n    \n\tvec3 dir=normalize(vec3(uv,.8));\n    \n\tmat2 camrot1=rot2D(-1.8);\n\tmat2 camrot2=rot2D(-.2);\n    \n\tdir.yz*=camrot1;\n\tdir.xy*=camrot2;\n    dir=normalize(dir);\n    \n\tvec3 from=vec3(0.0);\n    \n    vec3 color=clamp(getN(from, dir-0.45, 1, 0.9) * 3., .03, 1. + sin(iTime*.5)*.5) \n        * vec3(.1, 0.2, .8+ cos(iTime)*.3+.1);\n    vec3 color2=clamp(getN(from, dir-0.35, 1, 0.9) * 2.8, .02, 1. + cos(iTime*.5)*.8) \n        * vec3(.8 + sin(iTime)*.3+.1, 0.2, .2);\n    vec3 color3=clamp(getN(from, dir-1., 2, 0.8) * 2.3, .02, 1.) \n        * vec3(.6, 0.8, .6 + sin(iTime)*.8+.1);\n        \n    vec3 colorStars=clamp(getN(from, dir, 18, 0.99), 0.0, 1.0);\n    \n    \n    color = color + color2 + color3 + colorStars;\n\tcolor=clamp(color,vec3(.0),vec3(1.0));\n    color=pow(color, vec3(.85));\n    \n\tfragColor = vec4(color,1.);\n}","name":"Image","description":"","type":"image"}]}