{"ver":"0.1","info":{"id":"DlGBRt","date":"1702353937","viewed":19,"name":"simple chess pattern","username":"modog","description":"simple chess pattern","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323846\n\nvec2 rotate2D(vec2 _uv, float _angle){\n    _uv -= 0.5;\n    _uv = mat2(cos(_angle), -sin(_angle),\n                sin(_angle), cos(_angle)) * _uv;\n    _uv += 0.5;\n    return _uv;\n}\n\nvec2 tile(vec2 _uv, float _zoom){\n    _uv *= _zoom;\n    return fract(_uv);\n}\n\n\nfloat box(vec2 _uv, vec2 _size, float _smoothEdges){\n    _size = vec2(0.5) - _size * 0.5;\n    vec2 aa = vec2(_smoothEdges * 0.5);\n    vec2 uv = smoothstep(_size, _size + aa, _uv);\n    uv *= smoothstep(_size, _size + aa, vec2(1.0) - _uv);\n    return uv.x * uv.y;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv = tile(uv, 10.);\n    uv = rotate2D(uv, PI * 0.25);\n\n    // Time varying pixel color\n    vec3 col = vec3(box(uv, vec2(0.7), 0.01));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}