{"ver":"0.1","info":{"id":"mdl3R4","date":"1732694031","viewed":26,"name":"Smooth Combine","username":"afrodex","description":"testing the smooth combine function in 2d","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["testing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rect(vec2 c, vec2 dim, vec2 p){\n    \n    return step(abs(p.x-c.x), dim.x) * step(abs(p.y-c.y), dim.y);\n}\n\nfloat circ(vec2 c, float r, vec2 p){\n    return step(length(p-c), r);\n}\n\nfloat rectSDF(vec2 c, vec2 dim, vec2 p){\n    vec2 rel = abs(p-c);\n    return max(rel.x-dim.x, rel.y-dim.y);\n}\n\nfloat circSDF(vec2 c, float r, vec2 p){\n    return length(p-c)-r;\n}\n\nfloat smoothComb(float x, float y){\n    float k= .08;\n    return min(x,y)-pow(max(k-abs(x-y), 0.), 3.)/(6.*k*k);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 m = (iMouse.xy-.5*iResolution.xy)/iResolution.y;\n    vec2 o = vec2(0., 0.);\n    float colFloat = 0.;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col;\n    \n    float rec = rectSDF(vec2(0., 0.), vec2(.2, .3), uv);\n    float cir = circSDF(m, .2, uv);\n    colFloat += smoothComb(rec, cir);\n    col+= step(colFloat, .1);\n    //col+= vec3(rect( vec2(0., 0.), vec2(.2, .3), uv));\n    //col+= vec3(circ(m, .1, uv));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}