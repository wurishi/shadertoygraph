{"ver":"0.1","info":{"id":"wsXyz4","date":"1584295008","viewed":217,"name":"DNA-ish","username":"Axioplase","description":"Toying with more \"infinite\" things until I really grok it. I sometimes have some clipping on the circles I don't understand...Also, the moire effect is a problem...","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","infinite","dna"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Base code:\n///// \"RayMarching starting point\" \n//// by Martijn Steinrucken aka BigWings/CountFrolic - 2020\n//// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define MAX_STEPS 100\n#define MAX_DIST 50.\n#define SURF_DIST .001\n\n#define S(a, b, t) smoothstep(a, b, t)\n#define M(x, y, a) mix(x, y, a) \n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdLine(vec3 p, vec3 o, vec3 dir, float t) {\n    vec3 a = o;\n    vec3 b = a+dir;\n    vec3 bMinusA = b-a;\n    float h = min(t, max(-t, dot((p-a), bMinusA)/dot(bMinusA,bMinusA)));\n    //float h = dot(p-a, bMinusA)/dot(bMinusA,bMinusA);\n    float dist = length(p - a +-(b-a) * h )- 0.01;\n    return dist;\n}\n\nmat3 rx(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat3(1,0,0,0,c,-s,0,s,c);\n}\nmat3 ry(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat3(c,0,s,0,1,0,-s,0,c);\n}\nmat3 rz(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat3(c,-s,0,s,c,0,0,0,1);\n}\n\nfloat smoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n\nvec4 sdTorus(vec3 p, vec2 t) {\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    return vec4(length(q)-t.y, 0.4, 0.4, 0.4);\n}\n\n\nvec4 stick(vec3 p, float m) {\n      vec3 pp = vec3(p.x, p.y, mod(p.z+0.5*m, m)-m/2.);\n    pp = rz(-iTime+p.z*1.)*pp;\n    float dist = sdLine(pp, vec3(0), vec3(1., 1.,0.), .195); \n    return vec4(dist, 1., 1., 1.);\n}\n\n\nvec4 handle(vec3 p, float m) {\n    vec3 pp = vec3(p.x, p.y, mod(p.z+0.5*m, m)-m/2.);\n    pp = rz(-iTime+3.141592/4.+p.z)*pp;\n    pp = rx(3.141592/2.+p.z)*pp;\n    pp.x += 0.33;\n    vec4 t1 = sdTorus(pp, vec2(0.04, .01)); \n    pp.x -= 0.66;\n    vec4 t2 = sdTorus(pp, vec2(0.04, .01)); \n    return vec4(min(t1.x, t2.x), t1.yzw);\n}\n\n\nvec4 GetDist(vec3 p) {\n    // vec4 best = vec4(MAX_DIST, fract(p.z), 1.-fract(p.z), 0.5+0.5*sin(iTime*fract(p.z)));\n    vec4 best = vec4(MAX_DIST, 0.5+0.5*sin(1.3*p.z), 0.5+0.5*sin(p.z), 0.5+0.5*cos(p.z));\n\n    vec3 pp = p;\n    // pp = rx(iTime/25.)*pp;\n    pp.x = sin(pp.x);\n    pp.y = cos(pp.y);\n    pp.z += cos(iTime/2.);\n    float m = 0.1;\n    vec4 distStick = stick(pp, m);\n    vec4 distHandle = handle(pp, m);\n    float d = smoothUnion(distStick.x, distHandle.x, 0.03);\n    best.x = min(best.x, d);\n    \n    return best;\n    \n}\n\nvec4 RayMarch(vec3 ro, vec3 rd) {\n    vec4 dCol = vec4(0.);\n\n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dCol.x;\n        vec4 dS = GetDist(p);\n        dCol.x += dS.x;\n        dCol.yzw = dS.yzw;\n        if(dCol.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n\n    return dCol;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n\n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 col = vec3(.00001);\n   \n    vec3 ro = vec3(2.23*cos(1.58+iTime/2.234), 1.7*sin(2.78+iTime/3.43214), -iTime*0.7);\n\n    //vec3 rd = GetRayDir(uv, ro, vec3(cos(iTime)/10., sin(iTime)/20., -(iTime+1.)), 1.);\n\tvec3 rd = GetRayDir(uv, ro,\n                        vec3(\n                            ro.x+7.234*sin(iTime/13.13),\n                            ro.y+8.1*cos(iTime/14.48),\n                            ro.z+5.97*sin(1.587+iTime/15.32443)),\n                        1.);\n\n    vec4 d = RayMarch(ro, rd);\n\n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n\n        float dif = clamp(dot(n, normalize(vec3(1,2,3)))*.5+.5, 0.2, 0.8);\n        col = vec3(dif)/d.x;\n        col *= d.yzw;\n        col = M(col*3., vec3(0.00001), S(10., 20., d.x));\n    }\n\n    col = pow(col, vec3(.4545));\t// gamma correction\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}