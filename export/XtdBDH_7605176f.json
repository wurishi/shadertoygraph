{"ver":"0.1","info":{"id":"XtdBDH","date":"1539530073","viewed":716,"name":"Sound to Image","username":"Wumpf","description":"Interprets sound frequencies as image data. Endless tweaking potential. Uses only a singly sound channel.\nWorked for me on Windows Firefox/Chrome/Edge. Restart shader if picture is broken.\n\nSoundgen: https://github.com/Wumpf/shadertoy-pic2wav\n","likes":2,"published":3,"flags":96,"usePreview":0,"tags":["image","soundcloud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float minRes = min(iResolution.x, iResolution.y);\n    vec2 squareCoord = vec2(fragCoord.xy - (iResolution.xy - minRes) * 0.5);\n    if(squareCoord.x < 0.0 || squareCoord.y < 0.0 || squareCoord.x > minRes || squareCoord.y > minRes)\n    {\n        fragColor = vec4(0.0);\n    \treturn;\n    }\n    squareCoord /= minRes;\n    \n    squareCoord.y = 1.0 - squareCoord.y; // flip y\n    fragColor = texture(iChannel0, squareCoord * originalImageResolution / iResolution.xy);\n    \n    // \"PostPro\"\n    fragColor.rgb = pow(fragColor.rgb * 1.5, vec3(2.5));\n    // And as always, some noise to hide the artifacts a bit.\n    //if(false)\n    {\n        vec2 noiseCoord = squareCoord * minRes / iChannelResolution[1].xy;\n        vec3 noise0 = texture(iChannel1, noiseCoord).rgb;\n        vec3 noise1 = texture(iChannel1, noiseCoord * 0.75).brg;\n        vec3 noise2 = texture(iChannel1, noiseCoord * 0.5).abg;\n        fragColor.rgb = mix(fragColor.rgb, noise2, 0.1);\n        fragColor.rgb = mix(fragColor.rgb, noise1, 0.1);\n        fragColor.rgb = mix(fragColor.rgb, noise0, 0.1);\n    }\n    \n    fragColor.a = 1.0;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"ltf3Rn","filepath":"https://soundcloud.com/wumpf/purple","previewfilepath":"https://soundcloud.com/wumpf/purple","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.x > originalImageResolution)\n   \t\tdiscard;\n    float imageY = fragCoord.y;\n    if(imageY > originalImageResolution)\n   \t\tdiscard;\n    \n    // Loast last frames.\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel1, uv);\n    \n    // Average lines from two frames.\n    int startupOffset = 6;\n    if(int(imageY) != (iFrame - startupOffset) / 2)\n        return;\n    \n    // Cut off high frequencies.\n    const float maxFrequency = 16800.; // A empirical value: sampleRate / 2 * 0.7\n    const float originalSampleRate = 48000.;\n    float relevantSoundTexRange = maxFrequency / originalSampleRate * iChannelResolution[0].x;\n\n    // Frequency to image.\n    float originalImageCoord = fragCoord.x / originalImageResolution;\n    float frequencyMapped = originalImageCoord * relevantSoundTexRange / iChannelResolution[0].x;\n    fragColor += vec4(texture(iChannel0, vec2(frequencyMapped, 0.25)).rrr, 1.0) * 0.5;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float originalImageResolution = 256.;","name":"Common","description":"","type":"common"}]}