{"ver":"0.1","info":{"id":"M3SXDt","date":"1712247016","viewed":107,"name":"High Quality VHS Noise","username":"tuichi","description":"Noise for Panic rooms","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec3 tex2D( sampler2D _tex, vec2 _p )\n{\n  vec3 col = texture( _tex, _p ).xyz;\n  if ( 0.5 < abs( _p.x - 0.5 ) ) {\n    col = vec3( 0.1 );\n  }\n  \n  col = vec3(col.x, col.y, col.z);\n  return col;\n}\n\nvec2 grad( ivec2 z )  // replace this anything that returns a random vector\n{\n    // 2D to 1D  (feel free to replace by some other)\n    int n = z.x+z.y*11111;\n\n    // Hugo Elias hash (feel free to replace by another one)\n    n = (n<<13)^n;\n    n = (n*(n*n*15731+789221)+1376312589)>>16;\n\n    // simple random vectors\n    return vec2(cos(float(n)),sin(float(n)));\n}\n\nfloat pnoise( in vec2 p )\n{\n    ivec2 i = ivec2(floor( p ));\n     vec2 f =       fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f); // feel free to replace by a quintic smoothstep instead\n\n    return mix( mix( dot( grad( i+ivec2(0,0) ), f-vec2(0.0,0.0) ), \n                     dot( grad( i+ivec2(1,0) ), f-vec2(1.0,0.0) ), u.x),\n                mix( dot( grad( i+ivec2(0,1) ), f-vec2(0.0,1.0) ), \n                     dot( grad( i+ivec2(1,1) ), f-vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat perlinNoise ( vec2 fragPos, vec2 uv)\n{\n    float f = 0.0;\n    \n    uv *= 8.0;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    f  = 0.5000*pnoise( uv ); uv = m*uv;\n    f += 0.2500*pnoise( uv ); uv = m*uv;\n    f += 0.1250*pnoise( uv ); uv = m*uv;\n    f += 0.0625*pnoise( uv ); uv = m*uv;\n    \n    return 0.5 + 0.5*f;\n}\n\n\nfloat hash( vec2 _v ){\n  return fract( sin( dot( _v, vec2( 89.44, 19.36 ) ) ) * 22189.22 );\n}\n\nfloat iHash( vec2 _v, vec2 _r ){\n  float h00 = hash( vec2( floor( _v * _r + vec2( 0.0, 0.0 ) ) / _r ) );\n  float h10 = hash( vec2( floor( _v * _r + vec2( 1.0, 0.0 ) ) / _r ) );\n  float h01 = hash( vec2( floor( _v * _r + vec2( 0.0, 1.0 ) ) / _r ) );\n  float h11 = hash( vec2( floor( _v * _r + vec2( 1.0, 1.0 ) ) / _r ) );\n  vec2 ip = vec2( smoothstep( vec2( 0.0, 0.0 ), vec2( 1.0, 1.0 ), mod( _v*_r, 1. ) ) );\n  return ( h00 * ( 1. - ip.x ) + h10 * ip.x ) * ( 1. - ip.y ) + ( h01 * ( 1. - ip.x ) + h11 * ip.x ) * ip.y;\n}\n\nfloat noise( vec2 _v ){\n  float sum = 0.;\n  for( int i=1; i<9; i++ )\n  {\n    sum += iHash( _v + vec2( i ), vec2( 2. * pow( 2., float( i ) ) ) ) / pow( 2., float( i ) );\n  }\n  return sum;\n}\n\n#define TapeSpeed 3.0\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 fragPos = fragCoord/iResolution.xy;\n    vec2 fPos = fragPos * 2.0 - 1.0;\n    fPos.x *= iResolution.x / iResolution.y;\n    \n    float dist = length(fPos);\n    \n    float vignette = smoothstep(0.7,3.0, dist);\n\n    vec2 uv = fragPos*vec2(iResolution.x/iResolution.y,1.0) + vec2(0.0, iTime*0.05);\n    vec2 uvn = fragCoord/iResolution.xy;\n    \n    float randomOffset = noise(vec2(iTime * 0.5f,0)) * 0.5f;\n    randomOffset -= 0.25f;\n    \n    // Perlin Noise\n    float pNoise = perlinNoise(fragPos, uv);\n    //float pNoise = 0.0;\n    \n    // tape wave\n    uvn.x += ( noise( vec2( uvn.y, iTime/ 2.0) ) - 0.5 )* 0.0005 * pNoise;\n    uvn.x += ( noise( vec2( uvn.y * 5.0, iTime * TapeSpeed) ) - 0.5 ) * 0.001 * pNoise;\n    \n    // tape crease\n    \n    float randSPD = rand(vec2(0.0, fragPos.y + iTime));\n    float tcPhase = clamp( ( sin( uvn.y * 8.0 + randomOffset * 2.0 + (iTime + randomOffset * 0.005f)) - 0.92 ) * noise( vec2( iTime ) ), 0.0, 0.01 ) * 10.0;\n    float tcNoise = max( noise( vec2( uvn.y * 100.0, iTime * 100.0 ) ) - 0.5, 0.0);\n    uvn.x = uvn.x - tcNoise * tcPhase * pNoise;\n    \n    vec3 col = vec3(0.0);\n    \n    // switching noise\n    float snPhase = smoothstep( 0.03, 0.0, uvn.y );\n    uvn.y += snPhase * 0.7;\n    uvn.x += snPhase * ( ( noise( vec2( uv.y * 100.0, iTime * 10.0 ) ) - 0.5 ) * 0.2 );\n\n    col = tex2D( iChannel0, uvn );\n    col *= 1.0 - tcPhase;\n    col = mix(\n    col,\n    col.yzx,\n    snPhase\n    );\n    \n    // bloom\n    for( float x = -4.0; x < 2.5; x += 1.0 ){\n    col.xyz += vec3(\n      tex2D( iChannel0, uvn + randomOffset * 2.0 *vec2( x, 0.0 ) * 7E-3 ).x,\n      tex2D( iChannel0, uvn + randomOffset * 1.0 * vec2( x - 2.0, 0.0  ) * 7E-3 ).y,\n      tex2D( iChannel0, uvn + randomOffset * 12.0 * vec2( x - 4.0, 0.0 ) * 7E-3 ).z\n    ) * 0.1;\n    }\n    col *= 0.6;\n\n    // ac beat\n    col *= 1.0 + clamp( noise( vec2( 0.0, uv.y + sin(iTime * 0.5f + randomOffset) * 0.2) ) * 0.6 - 0.25, 0.0, 0.1 );\n    col *= 1.0 - vignette;\n    \n    \n\tfragColor = vec4( col.x, col.y, col.z, 1.0 );\n}","name":"Image","description":"","type":"image"}]}