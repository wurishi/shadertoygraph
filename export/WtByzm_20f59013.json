{"ver":"0.1","info":{"id":"WtByzm","date":"1593941945","viewed":85,"name":"Test : VoronoiValueGradientNoise","username":"Gijs","description":"basically glued some noise methods together to create this monstrosity. Suffers from the none of the artifacts the used noise methods have on their own. However, its range is not within [-1,1]... Oh and its horribly slow.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","noise","gradient","value"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float value_low     = -0.5,\n            value_high    =  0.5,\n            gradient_low  = -0.5,\n            gradient_high =  0.5;\n\n\nfloat voronoiValueGradientNoise( vec2 p ){\n    vec2 n = floor( p );\n    vec2 f = fract( p );\n    \n    float sum = 0.;\n    \n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\t\n        vec2  cello  = n+vec2(i,j);\n        \n        //get five pseudorandom numbers corresponding to this cell\n        float h1 = hash1(cello), \n              h2 = hash2(cello), \n              h3 = hash3(cello), \n              h4 = hash4(cello), \n              h5 = hash5(cello);\n        \n        vec2  cellp  = cello + vec2(h1, h2);\n        float cellv  = value_low    + (value_high-value_low)       * h3;\n        vec2  cellg  = gradient_low + (gradient_high-gradient_low) * vec2(h4, h5);\n        \n        vec2  delta = p - cellp;\n        float d = sqrt(dot(delta,delta));\n\n        sum += (cellv + dot(cellg, delta))*smoothstep(1., 0., d);\n\n    }\n\n    return sum;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 p = fragCoord.xy/iResolution.y*8.;\n    \n    fragColor += voronoiValueGradientNoise( p + iTime*.5 )*.5 + .5;\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//from Dave Hoskins\nfloat hash1(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash2(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1030);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nfloat hash3(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .0973);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nfloat hash4(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1099);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash5(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1151);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}","name":"Common","description":"","type":"common"}]}