{"ver":"0.1","info":{"id":"MXtGzM","date":"1716283147","viewed":40,"name":"bookOfShader05-GradientNoise","username":"doolhong","description":"The difference from \"Valuenoise\" is that it uses a directional vector to generate a random value.\nIt turns into a scalar value with an dot product.\nhttps://thebookofshaders.com/11/?lan=kr","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","study"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// Gradient Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/lsf3WH\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\nvec2 randomSt(vec2 st)\n{ \n\tst = floor(st);\n\treturn vec2( dot(st,vec2(127.1,311.7)),dot(st,vec2(269.5,183.3))); //Create a new random vector by dotproduct it with a specific vector.\n}\n\n// Gradient Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/XdXGW8\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n    \n    /*\n        The difference from \"Valuenoise\" is that it \n                            uses a directional vector to generate a random value.\n        It turns into a scalar value with an dot product, \n                            and interpolates in the same way as \"Valuenoise\".\n    */\n\tfloat a = dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) );\n    float b = dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) );\n    float c = dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) );\n    float d = dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) );\n    \n    //Interpolate\n\tfloat mixA = mix( a,b, u.x);\n    float mixB = mix( c, d, u.x);\n    float mixAlpha = u.y; // this is decimal point st(coordi).y\n    mixAlpha *=(sin(iTime*5.0)*0.5+0.5); \n    return mix( mixA, mixB, mixAlpha); //interpolate using decimal point st(coordi).y\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 st = fragCoord/iResolution.xy;\n    vec3 col = vec3(0.0);\n\n    vec2 pos = vec2(st*10.0);\n    col = vec3( noise(pos)*.5+.5 );\n    \n    //===========View random Vector2 for each cells\n\t//col = vec3(fract(randomSt(pos)),0.0); \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}