{"ver":"0.1","info":{"id":"XflcDl","date":"1721788068","viewed":69,"name":"AARBF - Particles (KNN Query)","username":"natevm","description":"Sample code for implementing \"attribute aware\" radial basis functions, as described in this paper:\nhttps://www.sci.utah.edu/publications/Mor2023a/AARBF.pdf\n\nModified to use a KNN interpolant \n\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["volume","particles","point","range","rbf","query","aarbf"],"hasliked":0,"parentid":"lflyzj","parentname":"AARBF - Particles (Range Query)"},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2024 Nate Morrical\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// The code below shows how to implement the AA-RBF interpolant from this paper:\n// https://www.sci.utah.edu/publications/Mor2023a/AARBF.pdf\n// The bulk of the method is in the \"interpolate\" function below\n\n// More point containment queries here: https://www.shadertoy.com/playlist/fXdfzX\n\n#if HW_PERFORMANCE==0\n#define NUM_PARTICLES 8    \n#define NUM_STEPS 8\n#else\n#define NUM_PARTICLES 16    \n#define NUM_STEPS 16    \n#endif\n\n// How much particles should cling together (between 0 and 1)\n#define BLOBBINESS (.5 + .5 * sin(iTime * .369))\n\n// The K closest particles to query\n#define K 8\n\n// The top K to reweight. \n// (This makes the field more continuous)\n#define K_TO_DROP 0\n\n#define DENSITY 2.0\n#define RADIUS 1.0\n\n#define EXPOSURE 3.5 \n\n// Attribute colormap\nvec3 viridis(float t) {\n    t = clamp(t, 0.0, 1.0);\n    \n    const vec3 c0 = vec3(0.2777273272234177, 0.005407344544966578, 0.3340998053353061);\n    const vec3 c1 = vec3(0.1050930431085774, 1.404613529898575, 1.384590162594685);\n    const vec3 c2 = vec3(-0.3308618287255563, 0.214847559468213, 0.09509516302823659);\n    const vec3 c3 = vec3(-4.634230498983486, -5.799100973351585, -19.33244095627987);\n    const vec3 c4 = vec3(6.228269936347081, 14.17993336680509, 56.69055260068105);\n    const vec3 c5 = vec3(4.776384997670288, -13.74514537774601, -65.35303263337234);\n    const vec3 c6 = vec3(-5.435455855934631, 4.645852612178535, 26.3124352495832);\n\n    vec3 srgb = c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n    return pow(srgb, vec3(2.2));\n}\n\n// Density transfer function\nfloat densityMap(float phi) {\n    if (phi < BLOBBINESS) return 0.0;\n    return clamp((phi - BLOBBINESS)/(1.0 - BLOBBINESS), 0.0, 1.0);\n}\n\n// Evaluates the RBF \"φ^\" (from Eq. 1)\nfloat evaluateRBF(float dist, float r, float sigma) {\n    return exp(-.5 * pow((dist * sigma) / r, 2.f));\n}\n\n// Returns (by value) the K closest particles and corresponding distances (squared)\nvoid getKNN(vec3 x, in vec4 particles[NUM_PARTICLES], out vec4 kp[K], out float kd[K]) {\n    // Initialize priority queue\n    for (int i = 0; i < K; ++i) {\n        kp[i] = vec4(1e38f);\n        kd[i] = 1e38f;\n    }\n    \n    // Naive N^2 KNN. For more particles, you'd use a tree here. \n    for (int pid = 0; pid < NUM_PARTICLES; ++pid) {\n        vec4 p = particles[pid]; \n        vec3 v = p.xyz - x;\n        float dist2 = dot(v,v);\n        \n        // If distance is farther than Kth... (stored at 0), skip\n        if (dist2 > kd[0]) continue;\n        \n        // Insertion sort\n        kd[0] = dist2;\n        kp[0] = p;\n        \n        for (int i = 0; i < K-1; ++i) {\n            // If Kth is closer than K-1th, swap\n            if (kd[i] < kd[i+1]) {\n                vec4  tmpP = kp[i]; kp[i] = kp[i+1]; kp[i+1] = tmpP;\n                float tmpD = kd[i]; kd[i] = kd[i+1]; kd[i+1] = tmpD;\n            }\n        }\n    }\n}\n\n// Particle positions, with \"y\" up and data values stored in \"w\" \nvec4 interpolateKNN(vec3 P, in vec4 v[NUM_PARTICLES]) {    \n    // Query the K closest particles\n    vec4 kp[K]; float kd[K];\n    getKNN(P, v, kp, kd);\n    \n    // The accumulated density value \"Φ\" (from Eq. 3)\n    float phiSum = 0.0;\n    \n    // The accumulated density-weighted color value, ∑ θ*φ (in Eq. 4)\n    vec3 thetaSum = vec3(0.0);\n    \n    for (int i = 0; i < K; ++i) {\n        float t = float(i) / float(NUM_PARTICLES);\n        float r = RADIUS * (.5 + .5 * t);\n        float phi = evaluateRBF(sqrt(kd[i]), r, 4.f);\n        vec3 theta = viridis(kp[i].w);\n        phiSum += phi;\n        thetaSum += theta * phi;\n    }\n    \n    // If the total weight is near-zero, return a background field value\n    if (phiSum <= 1e-3f) return vec4(0.0);\n    \n    // Else finish the weighted average\n    thetaSum /= phiSum;\n    \n    // Return weighted average color \"Θ\" (From Eq. 4) in the XYZ and \n    // the transformed density value (explained at end of sec 3.1.3) in W.\n    return vec4(thetaSum, densityMap(phiSum));\n}\n\n// Particle positions, with \"y\" up and data values stored in \"w\" \n#if K_TO_DROP != 0\nvec4 interpolateTOPK(vec3 P, in vec4 v[NUM_PARTICLES]) {    \n    // Query the K closest particles\n    vec4 kp[K]; float kd[K];\n    getKNN(P, v, kp, kd);\n    \n    // The K weights\n    float kP[K]; vec3 kT[K];\n    for (int i = 0; i < K; ++i) {\n        float t = float(i) / float(NUM_PARTICLES);\n        float r = RADIUS * (.5 + .5 * t);\n        kP[i] = evaluateRBF(sqrt(kd[i]), r, 4.f);\n        kT[i] = viridis(kp[i].w);\n    }\n    \n    // The accumulated density-weighted color value, ∑ θ*φ (in Eq. 4)\n    vec3 thetaSum = vec3(0.0);\n    \n    // Reweight by droping the influence of the Kth particle\n    float weightTotal = 0.0;\n    for (int i = K_TO_DROP; i < K; ++i) {\n        kP[i] = kP[i] - kP[K_TO_DROP-1];\n        thetaSum += kT[i] * kP[i];\n        weightTotal += kP[i];\n    }\n    thetaSum /= weightTotal;\n    \n    // The accumulated density value \"Φ\" (from Eq. 3)\n    float phiSum = weightTotal * (float(K) / float(K - K_TO_DROP));\n    \n    // If the total weight is near-zero, return a background field value\n    if (weightTotal <= 1e-3f) return vec4(0.0);\n    \n    // Return weighted average color \"Θ\" (From Eq. 4) in the XYZ and \n    // the transformed density value (explained at end of sec 3.1.3) in W.\n    return vec4(thetaSum, densityMap(phiSum));\n}\n#endif\n\n\n//-----------------------------------------------------------------------------\n// Utils\n//-----------------------------------------------------------------------------\n\nvec4 over(vec4 a, vec4 b) {\n  vec4 result;\n  result.a = a.a + b.a * (1.f - a.a);\n  if (result.a == 0.f)\n    return a; // avoid NaN\n  result.rgb = (a.rgb * a.a + b.rgb * b.a * (1.f - a.a)) / result.a;\n  return result;\n}\n\n#define M_2PI 6.2831853071795865f\n#define M_GRC 0.61803398875f\n\n// Vertex positions for the element\n\n//-----------------------------------------------------------------------------\n// Main functions\n//-----------------------------------------------------------------------------\n\nvec4[NUM_PARTICLES] CreateParticles() {\n    float time = iTime;\n    const float angle_offset = M_2PI / 4.0;\n    float speed = 0.2;\n    float dist = .3 + .6 * pow(sin(time * speed * 2.0), 2.0);\n    \n    vec4[NUM_PARTICLES] particles;\n\n    // Borrowed from here : https://www.shadertoy.com/view/MssXDn\n    for(int i=0;i<NUM_PARTICLES;i++)\n\t{\n\t\tfloat t=float(i)/float(NUM_PARTICLES);\n\t\tfloat a=t*M_2PI+iTime*speed;\n\n\t\tvec3 pos=vec3(sin(a)+2.0*sin(2.0*a),cos(a)-2.0*cos(2.0*a),-sin(3.0*a));//*0.01;\n\n\t\tfloat a1=speed*iTime;\n\t\tpos.yz*=mat2(cos(a1),-sin(a1),sin(a1),cos(a1));\n        pos *= dist * .5;\n        \n        //float a2=0.1;\n\t\t//pos.yz*=mat2(cos(a2),-sin(a2),sin(a2),cos(a2))* 2.0;\n        \n        particles[i].xyz = pos;\n        particles[i].w = .5 + .5 * cos(t * M_2PI); //cos(time * .05);\n    }\n    \n    return particles;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 v = -1.0 + 2.0*q;\n    v.x *= iResolution.x/ iResolution.y;\n           \n    float an = (iMouse.z > 0.0) ? /*0.25*iTime +*/ 6.283185*iMouse.x/iResolution.x : 0.0;\n    vec3 ro = vec3( 3.5*cos(an), 0.7, 3.5*sin(an) );\n    vec3 ta = vec3( 0.0, -0.1, 0.0 );\n    \n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n    // create view ray\n    vec3 rd = normalize( v.x*uu + v.y*vv + 3.0*ww );\n        \n    // create particles    \n    vec4[NUM_PARTICLES] particles = CreateParticles();\n    \n\tvec4 color = vec4(.0);\n\t\n    float startRayOffset = 0.0f;\n    int frame = iFrame % 64;\n        \n    // blue noise \n    // (inspired by the STBN used in section 3.3.)\n    startRayOffset = texture(iChannel0, fragCoord / 1024.0f).r;\n    startRayOffset = fract(startRayOffset + float(frame) * M_GRC);\n\t\n\t\n\tfloat zMin         = 2.0;\n    float zMax         = 5.0;\n\tfloat step         = (zMax - zMin) / float(NUM_STEPS);\n    vec3 p             = ro + rd * zMin + rd * step * startRayOffset;    \n\tint zer = int(min(iTime, 0.)); // Hack to force loop unrolling.\n    for(int i = zer; i < NUM_STEPS; i++)\n\t{\n        #if K_TO_DROP != 0\n        vec4 value = interpolateTOPK(p, particles);\n        #else\n        vec4 value = interpolateKNN(p, particles);\n        #endif\n        \n        // Colormapped value and a hardcoded optical density\n        vec3 rgb = value.rgb * EXPOSURE;\n        float density = value.a * DENSITY;\n        float rho = 1.0 - exp(-density * step);\n        color = over(color, vec4(rgb, rho));\n        if (color.a > .95) break;\n\n        p += rd*step;\n\t}\n         \n    // Composite over a background\n    color = over(color, vec4(vec3(0.01)*(1.0-0.2*length(v)), 1.0));\n\n    color.rgb = pow(color.rgb, vec3(1.0/2.2));\n    \n    // cheap dithering\n    color.rgb += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)/512.0;\n\n    fragColor = color;\n\n}\n","name":"Image","description":"","type":"image"}]}