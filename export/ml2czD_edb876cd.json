{"ver":"0.1","info":{"id":"ml2czD","date":"1691560310","viewed":37,"name":"Fork 2D Metaell smarchevsk 223","username":"smarchevsky","description":"The same, bit with fwidth AA and some colorization :)","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"MlsXW7","parentname":"2D Metaellipse Particles"},"renderpass":[{"inputs":[],"outputs":[],"code":"vec3 pal(float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) { return a + b*cos( 6.28318*(c*t+d) ); }\n\nstruct Particle \n{\n    vec2 pos;\n    float radius;\n    float angle;\n    float vel;\n    float hueShift;\n};\n    \nconst int N = 20;\nParticle particle[N];\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float timeMult = 1.5;\n    float t = mod(iTime * 0.1, 1.0) * timeMult;\n    float baseVel = 0.5;\n    for(int i = 0; i < N; i++)\n    {\n        particle[i].pos = vec2(1.0, 0.5);\n        particle[i].radius = 0.005+float(mod(float(i),4.0))*0.004;\n        particle[i].angle = float(i)*0.3;\n        particle[i].vel = baseVel + float(mod(float(i),4.0))*0.1;\n        particle[i].hueShift = float(i) / float(N);\n    }\n     \n    \n    for(int i = 0; i < N; i++)\n    {\n        float angle = particle[i].angle;\n        particle[i].pos += vec2(cos(angle), sin(angle))* t * particle[i].vel;\n        particle[i].radius = max(0.0, particle[i].radius - t * 0.005);\n    }\n    \n\tvec2 uv = fragCoord.xy / iResolution.yy;\n   \n    float sum = 0.0;\n    vec3 sumColor = vec3(0);\n    \n    for(int i = 0; i < N; i++)\n    {\n        float R = particle[i].radius;\n        vec2 p = particle[i].pos;\n        vec2 o = uv;\n        float angle = particle[i].angle;\n        \n        float c = cos(angle); float s = sin(angle);\n        \n        vec2 Pm = vec2(1.0, max(1.0, 10.5-t*12.0));\n        vec2 val = mat2(c, -s, s, c)*(p-o);\n        val = Pm * val * val;\n        float value = R / sqrt( val.x + val.y );\n\n        sumColor += pow(min(value, 1.), 10.) // colorize a bit\n          * pal(particle[i].hueShift,vec3(.52),vec3(.48),vec3(1.),vec3(0.0,0.4,0.5));    \n\n        sum += max(0.0, value * 2.);\n\n    }\n\n    sum = smoothstep(fwidth(sum) * 2., 0., 1.0-sum);\n    sumColor = normalize(sumColor + 1e-14 /* avoid normalization of 0 vector */);\n    \n    vec3 color = mix(vec3(0.1), sumColor, sum);\n\n    fragColor = vec4(color, 1.0); \n}","name":"Image","description":"","type":"image"}]}