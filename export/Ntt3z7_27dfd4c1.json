{"ver":"0.1","info":{"id":"Ntt3z7","date":"1635887823","viewed":119,"name":"Fractal flash","username":"Raffa","description":"Im not really sure what i am doing","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Algorithm used for fractals from Wikipedia: https://en.wikipedia.org/wiki/Mandelbrot_set\n*/\n\n#define MAX_ITERATIONS 1000\n\n#define SHARPNESS 75.0\n#define SPEED     0.75\n\n#define R_STRENGTH 1.0/6.0\n#define G_STRENGTH 2.0\n#define B_STRENGTH 6.0\n\nfloat map(float, float, float, float, float);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) { \n    // Normalized pixel coordinates (from 0 to 1)\n    float aspect = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    uv.y /= aspect;\n    \n    float x0 = map(uv.x, 0.0, 1.0, -2.0, 0.47);\n    float y0 = map(uv.y, 0.0, 1.0, -1.12, 1.12);\n    float x = 0.0;\n    float y = 0.0;\n    int iterations = 0;\n    while (x*x + y*y <= 2.0*2.0 && iterations < MAX_ITERATIONS) {\n        float xTemp = x*x - y*y + x0;\n        y = 2.0*x*y + y0;\n        x = xTemp;\n        iterations++;\n    }\n\n    // Output to screen\n    float sinNormalized = (sin(iTime * SPEED)+1.0)/2.0;\n    \n    float base = float(iterations) / (sinNormalized * SHARPNESS);\n    float r = base * R_STRENGTH;\n    float g = base * G_STRENGTH;\n    float b = base * B_STRENGTH;\n    \n    vec3 color = vec3(r, g, b);\n    fragColor = vec4(color, 1.0);\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}","name":"Image","description":"","type":"image"}]}