{"ver":"0.1","info":{"id":"WdVyRc","date":"1603383676","viewed":386,"name":"picture in picture 2","username":"FabriceNeyret2","description":"drawing pixelized video (or image) from channel 2/3  made of small videos (or images) from BuffA:channel1, which are stored there as tiles corresponding to different moments of the small video.","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["video"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// variant of https://shadertoy.com/view/3dVyz3\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy,\n          U = TILES*u/R.y,\n          I = floor(U)/TILES, F = fract(U);\n    \n    O = ( mod(iTime,6.) > 3. \n           ? texture(iChannel2, I*R.y/R)   // target intensity \n           : texture(iChannel3, I*R.y/R) )   \n        * texture(iChannel0, u/R) ;        // normalized subimage\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define hash2(p) fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123) // https://www.shadertoy.com/view/llySRh\n#define hash(p)  fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n#define T(U)     texelFetch(iChannel0,ivec2(U),0)\n\n#define read(F)   texture(iChannel1, F)         /* small video           */  \\\n                / texture(iChannel1, U, 99.)/2. /* normalize small video */\n                    \nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy,\n          U = TILES*u/R.y,\n          I = floor(U), F = fract(U), J;\n    \n    if (    T(0).a != iChannelResolution[0].x // init (at texture loaded or resol change)\n         || T(1).a != iResolution.x  )  \n        O = read(F);\n    else \n    {\n        O = T(u);                                                // restore previous state\n        if ( hash(I) < .01 )                                     // update some random tiles with the new image\n            O = read(F);\n        else  \n            J = floor(TILES*hash2(I)),                           // random copy from another tile\n     //     J == I ? J = floor(TILES*hash2(I+.5)) : J  ,\n            O = texture(iChannel0,(F+J)/TILES*R.y/R);\n     //     O = T( (F+J)/TILES*R+.5 );\n    }\n  //O-=O;\n    if ( u == vec2( .5) ) O.a = iChannelResolution[0].x;         // store texture resol  \n    if ( u == vec2(1.5) ) O.a = iResolution.x;                   // store screen resol  \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define TILES 20.","name":"Common","description":"","type":"common"}]}