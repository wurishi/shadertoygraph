{"ver":"0.1","info":{"id":"mdSfWc","date":"1690207483","viewed":45,"name":"Cube based terrain","username":"GBA","description":"Creating terrain based on a fbm heightmap","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["terrain","fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float SIZE = 0.4;\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec2 map(vec3 p) {\n    vec3 c = vec3(SIZE, 0.0, SIZE);\n    vec2 d = vec2(1E10, 0);\n    vec3 q = mod(p + 0.5 * c, c) - 0.5 * c;\n    for(int x = -2; x <= 2; x++)\n    for(int z = -2; z <= 2; z++) {\n        vec3 i = vec3(x, 0.0, z);\n        vec3 p2 = p + (i * c);\n        p2.xz = floor((p2.xz + 0.5 * c.xz) / c.xz);\n        float h = 4.0 * abs(fbm(p2.xz/15.));\n        vec3 b = vec3(c.x, h, c.z);\n        float dist = sdBox(q - (i * c), b);\n        d = dist < d.x ? vec2(dist, h) : d;\n    }\n    return d;\n}\n\nvec3 calcNormal(vec3 p, float h) {\n    vec3 n;\n    vec3 c = vec3(SIZE, 0.0, SIZE);\n    vec3 q = mod(p + 0.5 * c, c) - 0.5 * c;\n    vec3 b = vec3(c.x, h, c.z);\n    vec3 d = abs(q) - b;\n    vec3 s = sign(d);\n    float g = max(max(d.x, d.y), d.z);\n    return s * (g > 0.0 ? normalize(max(d, 0.0)) : step(d.yzx,d.xyz)*step(d.zxy,d.xyz));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    vec3 ro = vec3(0.0, 5.0, iTime);\n    vec3 rd = normalize(vec3(ndc, 1.0));\n    float t;\n    vec3 p;\n    bool hit;\n    vec2 d;\n    for(int i = 0; i < 500; i++) {\n        p = ro + t * rd;\n        d = map(p);\n        if(d.x < mix(0.01, 0.1, t / 100.)) {\n            hit = true;\n            break;\n        }\n        \n        if(t > 100.) break;\n        t += d.x;\n    }\n    vec3 col = vec3(0.53, 0.81, .92);\n    if(hit) { \n        if(d.y > 2.0) {\n            col = vec3(0.4862, 0.9882, 0.0);\n        } else {\n            col = vec3(0.7098, 0.3961, 0.1176);\n        }\n        col *= max(dot(-rd, calcNormal(p, d.y)), 0.0);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float rand(vec2 co) {\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f*f*f*(f*(f*6.-15.)+10.);\n    vec2 d = vec2(1.0, 0.0); \n    \n    float x1 = rand(i);\n    float x2 = rand(i + d.xy);\n    float x3 = rand(i + d.yx);\n    float x4 = rand(i + d.xx);\n    \n    float mix1 = mix(x1, x2, u.x);\n    float mix2 = mix(x3, x4, u.x);\n    \n    return mix(mix1, mix2, u.y);\n    \n}\n    \n    \nfloat fbm(vec2 p) {\n    float s = .5;\n    float f = 0.;\n    mat2 r = 2. * mat2(0.76024, 0.64963, -0.64963, 0.76024);\n    for(int i = 0; i < 3; i++) {\n        f += s * noise(p);\n        p *= r;\n        s *= .5;\n    }\n    return f;\n}    ","name":"Common","description":"","type":"common"}]}