{"ver":"0.1","info":{"id":"4sc3W2","date":"1455491983","viewed":199,"name":"simple lighted sphere","username":"samuelotherion","description":"1st try","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["spherewithsimplelight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define left   -.5\n#define right  +.5\n#define bottom -.5\n#define top    +.5\n#define pi     +3.1415926535\n#define globalTimePeriod 2.\n#define globalTimeOffset 3. * pi / 2. //phase\n#define globalTimeSpeed  .1\n#define ld   0.01\n#define ldr ( 1. / ( ld ) )\n#define ld2  ( ld * ld )\n#define ld2r ( 1. / ( ld2 ) )\n\n\n\nstruct Ball {\n\n    vec3\n    pos;\n    \n    float\n    rad;\n\n    vec3\n    col;\n    \n    mat3\n    dir;\n\n};\n    \nstruct Light {\n\n\tvec3\n    pos,\n    col;\n};\n    \nstruct Wall {\n\n    vec3\n    pos;\n    \n    mat3\n    dir;\n\n    vec2\n    size;   \n};\n\nbool\nhit( out vec3 p_hitp, in vec3 p_eye, in vec3 p_dir, in Ball p_ball ) {\n\n    vec3\n    dist = p_ball.pos - p_eye;\n  \n    float\n    aa = dot( p_dir, p_dir ),\n    ab = dot( p_dir, dist ),\n    bb = dot( dist, dist ),\n    ds = ( p_ball.rad * p_ball.rad - bb ) * aa + ab * ab;\n    \n    if( 0. <= ds ) {\n    \n    \tds = sqrt( +ds );\n        \n        float\n        l = ( ab - ds ) / aa;\n        \n        p_hitp = p_eye + l * p_dir;\n        \n        return true;\n    }\n    \n    return false;\n}\n\nvoid\nmainImage( out vec4 fragColor, in vec2 fragCoord ) {\n        \n\tvec2\n    uv = ( fragCoord.xy / iResolution.xy - .5 ) * vec2( iResolution.x / iResolution.y, 1. ),    \n    muv = ( iMouse.xy / iResolution.xy - .5 ) * vec2( iResolution.x / iResolution.y, 1. ),\n    tuv = ( uv +.5 );// * vec2( iChannelResolution[ 0 ].x, iChannelResolution[ 0 ].y );\n    \n    float\n    t1 = globalTimeOffset + globalTimePeriod * pi * sin( globalTimeSpeed * iTime );\n    \n    vec3\n    eye = vec3( 0., 0., -5. ),\n    dir = vec3( uv, 0. ) - eye,\n    htp;\n\n    float\n    ballZ = 5.;\n    \n    vec3\n    muv3 = vec3( muv * ( ballZ - eye.z ) / ballZ, ballZ );\n\t\n    \n    Ball\n    b1 = Ball( muv3, .5, vec3( .75, .5, .25 ), mat3( 1., 0., 0., 0., 1., 0., 0., 0., 1. ) );\n        \n\tLight\n    l1 = Light( vec3( 1. * cos( t1 ), 0., 5. + 1. * sin( t1 ) ), 2. * vec3( 0., .4, .91 ) ),\n    l2 = Light( vec3( 1. * cos( t1 ), 1. * sin( t1 ), 5. ), vec3( .5, .3, .1 ) );\n        \n    vec2\n    ll1 = vec2( l1.pos.x, l1.pos.y ) * length( eye ) / length( l1.pos - eye ) - uv;\n    \n    float\n    l = length( ll1 );\n    \n    if( hit( htp, eye, dir, b1 ) ) {\n     \n        vec3\n        lgtcol = max( 0., 2. / pi * asin( ( dot( normalize( l1.pos - htp ), normalize( htp - b1.pos ) ) ) ) ) * l1.col,\n//        bllcol = 2. / pi * asin( ( dot( normalize( eye - htp ), normalize( htp - b1.pos ) ) ) ) * b1.col,\n        bllcol = max( 0., 2. / pi * asin( dot( normalize( eye - htp ), normalize( htp - b1.pos ) ) ) ) * b1.col,\n        col = vec3( 1. * ( .95 * bllcol + .5 * lgtcol * b1.col ) );\n\n        if( l < ld && l1.pos.z < htp.z ) {\n\n//            fragColor = vec4( 1. * ( ( 1. - 400. * l * l ) * l1.col + .5 * (  col ) * (  400. * l * l ) ), 1. );\n           \n\t    \tl = l * l;\n            \n            fragColor = vec4( .7 *( 1. - ld2r * l ) * l1.col, 1. ) + 0.3 * texture( iChannel1, tuv );\n        }\n        else {\n                \n            fragColor = vec4( .97 * col, 1. ) + .03 * texture( iChannel1, tuv );\n        }\n    }\n    else {\n        \n        if( l < ld ) {\n            \n            l = l * l;\n\n            fragColor = vec4( .7 * ( 1. - ld2r * l ) * l1.col, 1. ) + vec4( vec3( .3 * ld2r * l * texture( iChannel0, tuv ) ), 1. );\n        }\n        else {\n        \t\n            fragColor = vec4( 0.5, 0.4, 0.1, 1. ) * texture( iChannel0, tuv );\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}