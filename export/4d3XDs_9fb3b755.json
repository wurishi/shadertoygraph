{"ver":"0.1","info":{"id":"4d3XDs","date":"1462041029","viewed":138,"name":"Loading indicator","username":"IlyaBelyy","description":"A simple loading indicator.\n\nThanks to FabriceNeyret2","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n\nconst vec2 r = vec2(0.39, 0.1);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord / iResolution.xy - 0.5;\n    float len = length(uv);\n    float ang = atan(uv.y, uv.x);\n\n    float t = iTime * 0.25;\n\n    // naive loop replacement to calculate the nearest circle by FabriceNeyret2\n    float aa = mod( floor( (ang - t) * 8. / (2.*PI) +.5 ), 8.);\n\n    vec2 centre = r.x * sin(vec2(PI/2., 0) + aa * 2.*PI / 8. + t);\n\n    // colour and distance\n    vec4 c = vec4(vec3((1. + aa) / 8.), length(uv - centre) - r.y);\n\n    fragColor.rgb = clamp(c.rgb * min(-c.a * 200.0, 1.0), 0.0, 1.0);\n    \n    // add motion trail\n    if (iMouse.z>0.) {\n\t\tfloat c = mod((ang - PI*3./4. - t) / (2.0*PI) + 0.5, 1.0);\n\t\tfloat dist = abs(len - r.x) - r.y;\n        fragColor.rgb += c * min(-dist * 200.0, 1.0);\n    }\n}\n\n/*\n\n* This is an identical, but more naive implementation that is probably a bit easier to follow\n\nvec4 circles(vec4 pos, float time)\n{\n    // naive loop replacement to calculate the nearest circle\n    // by FabriceNeyret2\n    float aa = mod( floor( (pos.a - time) * 8. / (2.*PI) +.5 ), 8.);\n    vec2 centre = r.x * sin(vec2(PI/2., 0) + aa * 2.*PI / 8. + time);\n\n    // colour and distance\n    return vec4(vec3((1. + aa) / 8.), length(pos.xy - centre) - r.y);\n}\n\nvec4 trail(vec4 pos, float time)\n{\n    float aa = (pos.a - PI*3./4.) / (2.0*PI) + 0.5;\n    float c = mod(aa - time /(2.0*PI), 1.0);\n    //c *= 0.5 * abs(cos(8. * PI * c)) + 0.5;\n    \n    float dist = abs(pos.z - r.x) - r.y;\n\n\treturn vec4(c, c, c, dist);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n    vec4 pos = vec4(uv.x, uv.y, length(uv.xy), atan(uv.y, uv.x));\n\n    float t = iTime * 0.25;\n\n    // circles SDF\n    vec4 c = circles(pos, t);\n    fragColor.rgb = clamp(c.rgb * min(-c.a * 200.0, 1.0), 0.0, 1.0);\n    \n    // add motion trail\n    if (iMouse.z>0.) {\n        vec4 tr = trail(pos, t);\n        fragColor.rgb += tr.rgb * min(-tr.a * 200.0, 1.0);\n    }\n}\n*/","name":"Image","description":"","type":"image"}]}