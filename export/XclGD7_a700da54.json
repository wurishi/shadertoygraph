{"ver":"0.1","info":{"id":"XclGD7","date":"1703147461","viewed":26,"name":"Spiral orbits %scouttea","username":"scouttea","description":"Simple recursively spinning circles each circle flips the color, the circles converge to a point which follows a circle ( drawn in red )\nMore info: https://www.desmos.com/geometry/iv7rbahcul","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["simple","spiral","blackandwhite","recursive","spinning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SMOOTH (.001)\n\nvec4 blend( in vec4 back, in vec4 front )\n{\n    vec4 result = vec4(0.);\n    result.a = mix( back.a, 1., front.a );\n    if( result.a > 0. )\n        result.rgb = mix( back.rgb * back.a, front.rgb, front.a ) / result.a;\n    else\n        result.rgb = vec3(0.);\n    return result;\n}\n\nfloat disk( in vec2 cntr, in float r, in vec2 pos )\n{\n    return 1. - smoothstep( r - SMOOTH, r + SMOOTH, distance( cntr, pos ) );\n}\n\n\nfloat circle( in vec2 cntr, in float r, in vec2 pos )\n{\n    return 1. - smoothstep( 0.005, 0.005 + SMOOTH, abs( r - distance( cntr, pos ) ) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // uv alternative where the coordinate grid is not stretched i.e. a square is square\n    // and (-1,-1) to (1,1) is on screen\n    vec2 ab = (2.*fragCoord - iResolution.xy )/min(iResolution.x,iResolution.y);\n    // Add margin\n    ab *= 1.1;\n    \n    // 1 - circle size \n    float f = ( 3. - sqrt(5.) ) / 2.; // Value chosen is the smallest solution of x = ( 1 - x ) / ( 2 - x )\n    \n    fragColor = vec4( 1. );\n    \n    vec3 color = vec3( 0. );\n    vec2 A = vec2( cos(iTime/1.1), sin(iTime/1.1) );\n    \n    vec2 C = vec2(0.);\n    \n    float r = 1.;\n    \n    for( int i = 0; i < 15; i ++ )\n    {\n        \n        fragColor = blend( fragColor, vec4( color, disk( C, r, ab ) ) );\n        C +=  vec2( cos( float(i+1) * iTime/1.1), sin( float(i+1) * iTime/1.1) ) * r * f;\n        r *= 1.-f;\n        color = vec3( 1. ) - color;\n    }\n    \n    // Draw orbit path\n    f = ( 1. - f ) / ( 2. - f );\n    ab = 1.1 * (2.*fragCoord - iResolution.xy )/min(iResolution.x,iResolution.y);\n    \n    fragColor = blend( fragColor, vec4( 1, .5, .5, circle( vec2( f , .0 ), 1. - f, ab ) ) );\n}\n\n\n\n/* Old not AA Code\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // uv alternative where the coordinate grid is not stretched i.e. a square is square\n    // and (-1,-1) to (1,1) is on screen\n    vec2 ab = (2.*fragCoord - iResolution.xy )/min(iResolution.x,iResolution.y);\n    // Add margin\n    ab *= 1.1;\n    \n    // 1 - circle size \n    float f = ( 3. - sqrt(5.) ) / 2.; // Value chosen is the smallest solution of x = ( 1 - x ) / ( 2 - x )\n    \n    fragColor = vec4( float( dot( ab, ab ) > 1. ) );\n    \n    for( int i = 0; i < 15; i ++ )\n    {\n        vec2 A = vec2( cos(iTime/1.1), sin(iTime/1.1) );\n        \n        if( dot( ab, ab ) - 2. * f * dot( ab, A ) <= 1. - 2. * f )\n        {\n            fragColor = vec4( 1. ) - fragColor;\n            \n            ab -= A * f;\n            ab /= (1.-f);\n            ab = vec2( ab.x * A.x + ab.y * A.y, A.x * ab.y - A.y * ab.x );\n        }\n        else\n        {\n            break;\n        }\n    }\n    \n    // Draw orbit path\n    f = ( 1. - f ) / ( 2. - f );\n    ab = 1.1 * (2.*fragCoord - iResolution.xy )/min(iResolution.x,iResolution.y);\n    if( abs( distance( ab, vec2( f , .0 ) ) - ( 1. - f ) ) < .0025 )\n    {\n        fragColor.xyz = mix( fragColor.xyz, vec3( 1, .5, .5 ), .75 );\n    }\n}\n\n*/","name":"Image","description":"","type":"image"}]}