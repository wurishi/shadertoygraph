{"ver":"0.1","info":{"id":"XXBGz3","date":"1708647648","viewed":58,"name":"polar coordinate cos animation","username":"Kinkajou81","description":"A simple shader where the uv is transformed to polar coordinates","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cos","animation","polar","cosine","polarcoordinate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float XYZ_TO_LAB_F(float x) {\n    return x > 0.00885645167 ? pow(x, 0.333333333) : 7.78703703704 * x + 0.13793103448;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // create polar coordanties uv\n    float r = sqrt(pow(iResolution.x, 2.0) + pow(iResolution.y, 2.0));\n    float O = acos(iResolution.x/r);\n    uv = vec2(O,r);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // convert to cartisean\n    col = vec3(r * cos(col.x),r * sin(col.y),r * cos(col.z));\n    \n    // tonemapping\n    //   to xyz from rgb\n    vec3 xyz = col * mat3(0.4124, 0.3576, 0.1805, 0.2126, 0.7152, 0.0722, 0.0193, 0.1192, 0.9505);\n    \n    //   to lab from xyz\n    vec3 xyz_scaled = vec3(XYZ_TO_LAB_F(xyz.x), XYZ_TO_LAB_F(xyz.y), XYZ_TO_LAB_F(xyz.z));\n    vec3 Lab = vec3((116.0 * xyz_scaled.y) - 16.0, 500.0 * (xyz_scaled.x - xyz_scaled.y), 200.0 * (xyz_scaled.y - xyz_scaled.z));\n    //   shlick\n    col = col/Lab.x * (Lab.x/(Lab.x+1.0));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}