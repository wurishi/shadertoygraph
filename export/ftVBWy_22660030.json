{"ver":"0.1","info":{"id":"ftVBWy","date":"1665225592","viewed":194,"name":"Distortion Post-Processing","username":"Dezzi","description":"I just had a quick look to how distortion works. This may not be completely accurate, but it gave me the desired effect: rounded corners.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["postprocessing","distortion","camera"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Test for a camera distortion shader.\n * Basically the distorted coordinates to sample are\n * uv = f(uv, k1, k2, k3, p1, p2 ...)\n * \n * With the f function using the coefficients to\n * achieve different effects, generally based on\n * the distance from a \"center of distortion\".\n *\n * See: https://en.wikipedia.org/wiki/Distortion_(optics)\n *      https://docs.opencv.org/4.x/dc/dbb/tutorial_py_calibration.html\n */\n\n// Radial distortion coefficients.\n// Make rounded corners like an old tv.\n// > 0 : barrel distortion\n// < 0 : pincushion distortion\nconst float k1 = -0.4;// r^2 scaling\nconst float k2 = 0.0;// r^4 scaling\nconst float k3 = 0.9;// r^6 scaling\n\n// Tangential distortion coefficients.\n// Tilt the image. Don't like this personally.\nconst float p1 = 0.0;// Vertically (+down, -up)\nconst float p2 = 0.0;// Horizontally (+left, -right)\n\n// Zoom. Since pincushion distorion goes out\n// of the display you might want to zoom out.\nconst float zoom = 1.2;// >1 out, <1 in.\n\n// Center of distortion (default: image center)\n// Coordinates in range [0, 1]\nconst vec2 cod = vec2(0.5);\n\n// Background color\nconst vec3 bgcolor = vec3(0, 0.1, 0.2);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Coordinates w.r.t. center of dist.\n    vec2 uvd = uv - cod;\n    float r2 = dot(uvd, uvd);\n    float r = sqrt(r2);\n    float r4 = r2 * r2;\n    float r6 = r4 * r2;\n    \n    // Coordinates w.r.t. center of image.\n    vec2 uvc = uv - 0.5;\n    \n    // Apply radial distortion.\n    vec2 uvdist = uvc * (1.0 + k1*r2 + k2*r4 + k3*r6);\n    \n    // Apply tangential distortion.\n    uvdist.x += (2.0*p1*uvc.x*uvc.y + p2*(r2+2.0*uvc.x*uvc.x));\n    uvdist.y += (p1*(r2+2.0*uvc.y*uvc.y) + 2.0*p2*uvc.x*uvc.y);\n    \n    // Scale coordinates for zoom.\n    uvdist *= zoom;\n    \n    // Back to [0,1] range.\n    uvdist += 0.5;\n    \n    // Get final color.\n    vec3 col;\n    if (uvdist.x > 1.0 || uvdist.x < 0.0 || uvdist.y > 1.0 || uvdist.y < 0.0)\n        // Out of bounds -> set to background.\n        col = bgcolor;\n    else\n        // Sample texture at distorted coordinates.\n        col = texture(iChannel0, uvdist).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}