{"ver":"0.1","info":{"id":"tdB3Ry","date":"1549155090","viewed":87,"name":"cool cool cool","username":"cbrpnk","description":"everyday","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raytracingdistance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float cylinder(vec3 p, float l, float w)\n{\n    float d = length(p - vec3(0., clamp(p.y, -l, l), 0.)) - w;\n    return max(max(d, p.y-l), -p.y-l);\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nvec2 rotate(vec2 p, float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c) * p;\n}\n\nfloat random(vec3 p)\n{\n    return fract(sin(dot(p, vec3(123.345, 4565.56542, 378.654))) * 2972.34858);\n}\n\nfloat map(vec3 p)\n{\n    p.z += 2.3;\n    \n    p.xz = rotate(p.xz, iTime*.2);\n    p.yz = rotate(p.yz, iTime*.2);\n    \n    vec3 gridId = floor((p+vec3(1.5))*.2);\n    float r = random(gridId)+1.;\n    \n    p = mod(p+vec3(2.), 5.)-vec3(2.);\n    \n    p.xz = rotate(p.xz, iTime*r);\n    p.yz = rotate(p.yz, iTime*r);\n    \n    float c = cylinder(p, 1., .9);\n    float c2 = cylinder(p, 2., .7);\n    float c3 = cylinder(p.yxz, 2., .7);\n    float c4 = cylinder(p.yxz, 2., .2);\n    float c5 = cylinder(p, 2., .2);\n    float s = sphere(p+vec3(1, 0., 0.), .5);\n    float s2 = sphere(p+vec3(-1, 0., 0.), .5);\n    float s3 = sphere(p+vec3(0., 1., 0.), .5);\n    float s4 = sphere(p+vec3(0., -1., 0.), .5);\n    \n    float d = max(c, -c2);\n    d = max(d, -c3);\n    d = min(d, s);\n    d = min(d, s2);\n    d = min(d, s3);\n    d = min(d, s4);\n    d = max(d, -c4);\n    d = max(d, -c5);\n    \n    return d;\n}\n\nfloat march(vec3 ro, vec3 rd, float f)\n{\n    float t=0.;\n    for(int i=0; i<128; ++i) {\n        float d = map(ro+t*rd);\n        if(d < .001) break;\n        if(d > 200.) return -1.;\n        t += d*f;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - vec2(.5);\n    uv.x *= iResolution.x/iResolution.y;\n\t\n    \n    vec3 eye = vec3(0., 0., 5.);\n    vec3 lookat = normalize(vec3(uv.x, uv.y, -1.));\n    float d = march(eye, lookat, .40);\n    vec3 col = vec3(d*.01) * vec3(d*.1, .5, .1);\n    col += vec3(1.-d*.06, .3, .5);\n    col = pow(col, vec3(2.1));\n    col *= 1.-d/50.;\n\t\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}