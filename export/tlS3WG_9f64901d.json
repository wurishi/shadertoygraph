{"ver":"0.1","info":{"id":"tlS3WG","date":"1560889035","viewed":303,"name":"Smile emoji","username":"aiody","description":"This is a smile emoji.\nI refer this tutorial : https://www.shadertoy.com/view/lsXcWn\nIf you want to give me some feedback or other ideas, welcome.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["smile","smiley","emoji"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a, b, t)\n#define sat(x) clamp(x, 0., 1.);\n\nfloat remap01(float a, float b, float t)\n{\n    return sat((t - a) / (b - a));\n}\n\nfloat remap(float a, float b, float c, float d, float t)\n{\n    return remap01(a, b, t) * (d - c) + c;\n}\n\nvec4 Mouth(vec2 uv)\n{\n    // mouth mask\n    float blur = .1;\n    vec4 col = vec4(0.);\n    vec4 mouthCol = vec4(.57, .31, .03, 1.);\n    \n    float d1 = length(uv);\n    float s1 = S(.33, .33 - blur, d1); // background\n    float d2 = length(uv - vec2(0., .08));\n    float s2 = S(.33, .33 - blur, d2); // mask\n    \n    float mouthMask = sat(s1 - s2);\n    \n    col = mix(col, mouthCol, S(.6, .7, mouthMask));\n    \n    // edge shade\n    float edgeShade1 = remap01(.22, .28, d1);\n    edgeShade1 *= edgeShade1;\n    col.rgb *= 1. - edgeShade1 * .5;\n    float edgeShade2 = remap01(.35, .29, d2);\n    edgeShade2 *= edgeShade2;\n    col.rgb *= 1. - edgeShade2 * .6;\n    \n    return col;\n}\n\nvec4 Eye(vec2 uv)\n{\n    // renormalizing UV and deforming it\n    uv.x *= 1.5;\n    uv.x -= .23;\n    uv.y -= .07;\n    \n    // eye mask\n    float blur = .1;\n    vec4 col = vec4(0.);\n    vec4 eyeCol = vec4(.57, .31, .03, 1.);\n    \n    float d1 = length(uv);\n    float s1 = S(.2, .2 - blur, d1); // background\n    float d2 = length(uv - vec2(0., -.08));\n    float s2 = S(.15, .15 - blur, d2); // mask\n    \n    float eyeMask = sat(s1 - s2);\n    \n    col = mix(col, eyeCol, S(.6, .7, eyeMask));\n    \n    // edge shade\n    float edgeShade1 = remap01(.01, .15, d1);\n    edgeShade1 *= edgeShade1;\n    col.rgb *= 1. - edgeShade1 * .6;\n    float edgeShade2 = remap01(.14, .1, d2);\n    edgeShade2 *= edgeShade2;\n    col.rgb *= 1. - edgeShade2 * .6;\n    \n    return col;\n}\n\nvec4 Head(vec2 uv)\n{\n    float d = length(uv);\n    float blur = .01;\n    float sizeOfHead = .5;\n    \n    vec4 col = vec4(.99, .8, .16, 1.); // base color\n    col.a = S(sizeOfHead, sizeOfHead - blur, d);\n    \n    // edge shade\n    vec3 colEdgeShade = vec3(.72, .37, .1);\n    float edgeShade = S(sizeOfHead - .08, sizeOfHead, d);\n    col.rgb = mix(col.rgb, colEdgeShade, edgeShade);\n    \n    // highlight\n    d = length(uv - vec2(0., .02));\n    float highlight = S(.44, .415, d);\n    highlight *= remap(.4, .05, .75, 0., uv.y);\n    col.rgb = mix(col.rgb, vec3(1.), highlight);\n    \n    // shade\n    d = length(uv);\n    vec3 colShade = vec3(.86, .50, .005);\n    float shade = S(sizeOfHead, sizeOfHead - .01, d);\n    shade *= remap(.4, .05, 1., 0., -uv.y);\n    col.rgb = mix(col.rgb, colShade, shade);\n    \n    // cheek\n    d = length(uv - vec2(.32, -.09));\n    vec3 colCheek = vec3(0.9, .1, .1);\n    float cheek = S(.23, .01, d) * .5;\n    col.rgb = mix(col.rgb, colCheek, cheek);\n    \n    return col;\n}\n\nvec4 Emoji(vec2 uv)\n{\n    vec4 col = vec4(0.); // starting as black\n    uv.x = abs(uv.x); // mirror\n    \n    vec4 head = Head(uv);\n    vec4 eye = Eye(uv);\n    vec4 mouth = Mouth(uv);\n    \n    col = mix(col, head, head.a);\n    col = mix(col, eye, eye.a);\n    col = mix(col, mouth, mouth.a);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; // Normalized pixel coordinates (from 0 to 1)\n    uv -= .5; // renormalizing UV\n\tuv.x *= iResolution.x / iResolution.y;\n    \n    fragColor = Emoji(uv); // Output to screen\n}","name":"Image","description":"","type":"image"}]}