{"ver":"0.1","info":{"id":"lfKXWR","date":"1715057243","viewed":32,"name":"Primes on the X axis - Optimized","username":"berelium","description":"\"fun with primes\"\nOptimized to run a little faster by using texture lookups instead of calculating primes for every pixel on the screen.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["numbers","prime","primes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Prime numbers on the X axis\" by SnackEater. https://shadertoy.com/view/XXBSDK\n// 2024-05-07 04:38:31\n\n// Optimized @SnackEater's prime finder to be a bit quicker.\n// It only tests primes on y=0 pixels, the others are set with a texture lookup.\n// I also added some other tests for fun.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"bool isEven( in int x ) {\n    return x % 2 == 0;\n}\nbool isOdd( in int x ) {\n    return !isEven(x);\n}\nbool isPrime( in int x ) {\n    if(x == 2 || x == 3) return true;\n    if(x <= 1 || x % 2 == 0 || x % 3 == 0) return false;\n    \n    for(int i = 5; i * i <= x; i += 6) {\n        if(x % i == 0 || x % (i + 2) == 0) return false;\n    }\n    return true;\n}\nbool isPerfect( in int x ) {\n    int sum = 1;\n    for(int i = 2; i * i <= x; i++) {\n        if(x % i == 0) {\n            if(i * i != x) sum += i + x/i;\n            else sum += i;\n        }\n    }\n    \n    if(sum == x && x != 1) return true;\n    return false;\n}\n\n// function that gets run on the x coordinate\nbool test( in int x ) {\n    return isPrime(x);\n}\n    \nvoid mainImage( out vec4 color, in vec2 px )\n{\n    float t = 50. * iTime;\n    px.x += t;\n    \n    // If we are above the first pixel, copy from the bottom of the column of pixels\n    if(px.y > 1.0 && iChannelResolution[0].x > 0.0) {\n        color = texelFetch(iChannel0, ivec2(px.x - t, 0), 0);\n        return;\n    }\n    \n    // Only calculate for first row of pixels\n    vec3 col = vec3(0.1);\n    for(float x = 0.0; x <= px.x; x++) {\n       col.r = test(int(x)) ? 1.0 : 0.0;\n    }\n    \n    color = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}