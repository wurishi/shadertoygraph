{"ver":"0.1","info":{"id":"MlSXDt","date":"1447279621","viewed":173,"name":"Watching Owlex 1","username":"cabbibo","description":"trying to make an owl that watches you!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf","model","owl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\n\n// Been loving the way this looks:\n//http://static.wixstatic.com/media/06c437_f01872fb122841b16c2d1ecfeaa834f5.jpg\n\n\n/*\n\n\tThis is a Shader for a VR gallery being worked on by\n\t@lukexi and myself for http://tree.is\n\n*/\n\n#define time iTime\n\nconst float INTERSECTION_PRECISION = .0001;\nconst float MAX_TRACE_DISTANCE     = 2.;\nconst int NUM_TRACE_STEPS          = 130;\n\nconst float PI = 3.14159;\n\nconst vec3 lightPos = vec3( 3. , 0.  , 0. );\n\n\n// This will just become vEye\nvec3 lookPos;\n\nvec3 lEyePos = vec3( -.05 , 0. , 0.15 );\nvec3 rEyePos = vec3( .05 , 0. , 0.15 );\n\nmat3 lEyeMat;\nmat3 rEyeMat;\nmat3 headMat;\n\n\n\n\n\n\nvoid doCamera( out vec3 camPos , out vec3 camTar , in float time ){\n\n  camPos = vec3( 0. , 0. , .5 );\n  camTar = vec3( 0. );\n\n}\n\nmat3 calcLookAtMatrix( vec3 camPos , vec3 camTar , float roll ){\n\n  vec3 up = vec3( sin( roll ) ,cos( roll ) , 0. );\n  vec3 ww = normalize( camTar - camPos );\n  vec3 uu = normalize( cross( ww , up ) );\n  vec3 vv = normalize( cross( uu , ww ) );\n\n  return mat3( uu , vv , ww );\n\n}\n\n\n\nfloat smin_2_3(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\n\n\n// checks to see which intersection is closer\n// and makes the y of the vec2 be the proper id\nvec2 opU( vec2 d1, vec2 d2 ){\n    \n\treturn (d1.x<d2.x) ? d1 : d2;\n    \n}\n\nvec2 opS( vec2 d1, vec2 d2 )\n{\n   return (-d1.x>d2.x) ? vec2( -d1.x , d1.y ) : d2;\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\n\n\n\n\n\n\nfloat sdPlane( vec3 pos ){\n return pos.y;   \n}\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n\nfloat sdCappedCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xy), -p.z - c.z );\n    vec2 v = vec2( c.z*c.y/c.x, -c.z );\n\n    vec2 w = v - q;\n\n    vec2 vv = vec2( dot(v,v), v.x*v.x );\n    vec2 qv = vec2( dot(v,w), v.x*w.x );\n\n    vec2 d = max(qv,0.0)*qv/vv;\n\n    return sqrt( dot(w,w) - max(d.x,d.y) )* sign(max(q.y*v.x-q.x*v.y,w.y));\n}\n\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nmat3 matInverse( mat3 m ){\n    \n  \n    vec3 a = vec3(\n      \n        m[1][1] * m[2][2] - m[2][1] * m[1][2],\n        m[0][2] * m[2][1] - m[2][2] * m[0][1],\n        m[0][1] * m[1][2] - m[1][1] * m[0][2]\n        \n    );\n    \n    vec3 b = vec3(\n      \n        m[1][2] * m[2][0] - m[2][2] * m[1][0],\n        m[0][0] * m[2][2] - m[2][0] * m[0][2],\n        m[0][2] * m[1][0] - m[1][2] * m[0][0]\n        \n    );\n    \n     vec3 c = vec3(\n      \n        m[1][0] * m[2][1] - m[2][0] * m[1][1],\n        m[0][1] * m[2][0] - m[2][1] * m[0][0],\n        m[0][0] * m[1][1] - m[1][0] * m[0][1]\n        \n    );\n    \n    \n    return mat3( \n        \n       a.x , a.y , a.z ,\n       b.x , b.y , b.z ,\n       c.x , c.y , c.z\n        \n    );\n\n}\n\n// ROTATION FUNCTIONS TAKEN FROM\n//https://www.shadertoy.com/view/XsSSzG\nmat3 xrotate(float t) {\n\treturn mat3(1.0, 0.0, 0.0,\n                0.0, cos(t), -sin(t),\n                0.0, sin(t), cos(t));\n}\n\nmat3 yrotate(float t) {\n\treturn mat3(cos(t), 0.0, -sin(t),\n                0.0, 1.0, 0.0,\n                sin(t), 0.0, cos(t));\n}\n\nmat3 zrotate(float t) {\n    return mat3(cos(t), -sin(t), 0.0,\n                sin(t), cos(t), 0.0,\n                0.0, 0.0, 1.0);\n}\n\n\nvec2 smoothU( vec2 d1, vec2 d2, float k)\n{\n    float a = d1.x;\n    float b = d2.x;\n    float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n    return vec2( mix(b, a, h) - k*h*(1.0-h), mix(d2.y, d1.y, pow(h, 2.0)));\n}\n\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat vRidge( vec3 pos ){\n \n  pos -= vec3( 0. , 0.04 , .09 );\n    \n  pos.x = abs( pos.x );\n  float r = sdCapsule( pos , vec3( 0. ,0. , 0. ) , vec3( .15 , .08 , 0. ) , .03  );\n // r = opS( sdCappedCone( pos-vec3( 0. , .03 , 0. ) , vec3( .08 , .4 , .1 ) ) , r );\n    \n   return r;\n    \n}\n\n\nfloat sdCone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\n\nfloat scaledCone( vec3 p, vec2 c , float s ){\n    \n    return sdCone( p / s , c ) * s;\n}\n\n\nfloat beak(vec3 pos ){\n   float r = scaledCone( pos , normalize( vec2( .3 , .2)) , .002);\n    \n   // getting rid of long tail of cylinder\n   r = opS(  scaledCone( pos - vec3( 0., 0., -.05) , normalize( vec2( .1 , .2)) , .002) , r);\n    \n   return r;\n\n}\n\nfloat sdPlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\n\n\nvec2 map( vec3 pos ){\n\n\n  // Drawing the Look Position\n  vec2 res = vec2( sdSphere( pos - lookPos , .001 ) ,0. );\n    \n        \n  \n  \n  \n  vec3 p;\n  mat3 rot;\n    \n  \n  p = headMat * (pos - vec3( 0. , 0. , .02 )) - vec3( 0. , 0. , .02 );\n    \n  // Drawing Head\n  res = opU( res , vec2( sdSphere( p   , .2 ) , 1. )); \n    \n    \n  // Getting positino for beak\n  // keeping it solid on face \n  // because it makes the rest of the movement\n  // seem exaggerated, and seems to make\n  // the face strech and fold in really cool ways!\n  rot = xrotate( .2 * PI );  \n  p =  rot* ( pos ) - vec3( 0. , 0.06, .22);\n    \n // res = smoothU( vec2( beak( p  ) , 2.) , res , .01);\n   \n    \n    \n  // drawing ridge\n  p = headMat * (pos - vec3( 0. , 0. , .1 ));\n  res = smoothU( res , vec2( vRidge( -p - vec3( 0., 0., .0) ) , 2. ) , .05);\n    \n \n  // subtracking out a cont\n  rot = xrotate( .5 * PI );\n  res = opS( vec2( scaledCone( rot * -p , normalize( vec2( .12 , .2)) , .002) , 1.) , res);\n\n  \n  // redraw the head\n  // So we can get some of the ridge smoothed, and other parts hard\n  p = headMat * (pos - vec3( 0. , 0. , .02 )) - vec3( 0. , 0. , .02 );\n  res = opU( res , vec2( sdSphere( p   , .2 ) , 1. )); \n    \n  // Drawing l eye\n  vec3 pl = lEyeMat * (pos - lEyePos);\n    \n  // Drawing r eye\n  vec3 pr = rEyeMat * (pos - rEyePos);\n    \n    \n  res = opS( vec2( sdSphere( pl  + vec3( 0. , 0. , .02 ), .06 ) , 3. ) , res );\n  res = opS( vec2( sdSphere( pr  + vec3( 0. , 0. , .02 ), .06 ) , 3. ) , res ); \n    \n  res = opU( res , vec2( sdSphere( pl + vec3( 0. , 0. , .04 ) , .02 ) , 4. ));   \n  res = opU( res , vec2( sdSphere( pr + vec3( 0. , 0. , .04 ) , .02 ) , 4. )); \n    \n  res = opS( vec2( sdSphere( pl + vec3( 0. , 0. , .05 ) , .014 ) , 5. ),res);   \n  res = opS( vec2( sdSphere( pr + vec3( 0. , 0. , .05 ) , .014 ) , 5. ), res); \n    \n\n    \n  res = smoothU( res , vec2( sdPlane( pos , vec4( 0. , 0., 1. , 0. ) ) , 1. ), .1 );\n    \n  return res;\n\n\n\n\n}\n\n\n// res = result;\nvec2 calcIntersection( in vec3 ro , in vec3 rd ){\n\n  float h     = INTERSECTION_PRECISION * 2.;\n  float t     = 0.;\n  float res   = -1.;\n  float id    = -1.;\n\n  for( int i = 0; i < NUM_TRACE_STEPS; i++ ){\n      \n    if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n    \n    vec2 m = map( ro + rd * t );\n  \n    h  = m.x;\n    t += h;\n    id = m.y;\n\n  }\n\n  if( t < MAX_TRACE_DISTANCE ) res = t;\n  if( t > MAX_TRACE_DISTANCE ) id = -1.;\n\n  return vec2( res , id ); \n\n}\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<50; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 20.*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.612*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.5;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\n\n\n\n\nmat3 getInverseLookAtMatrix( vec3 p , vec3 lookPos , float roll ){\n    \n\tmat3 rot = calcLookAtMatrix( p , lookPos , 0. );\n \treturn matInverse( rot );   \n    \n}\n\nmat3 getEyeMatrix( vec3 eyePos ){\n    \n    return getInverseLookAtMatrix( eyePos , lookPos , 0. );\n    \n}\n\n\nvoid getEyeMatrices( in vec3 lEyeP , in vec3 rEyeP , out mat3 lEye , out mat3 rEye , out mat3 hMat ){\n    \n    lEye = getEyeMatrix( lEyeP );\n    rEye = getEyeMatrix( rEyeP );\n    hMat = getEyeMatrix( vec3( 0. , 0. , .02 ) );\n    \n}\n\n\n/*\n\tLETS MAKE THESE LOOK COOL!\n*/\n\nfloat hash( float n ) { return fract(sin(n)*753.5453123); }\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n} \n\n\nvec3 cPal( float t ){\n return pal(t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25));   \n    \n}\n\n// Need to make a good field for that to make it look like feathers ?\n\nfloat radial( vec3 p ){\n    return (sin( p.x ) + sin( p.y ) + sin( p.z )) * length( p.xy);\n    \n}\n\nvec3 lensColor( vec3 p , vec3 n , vec3 rd ){\n    \n   vec3 pos; vec3 col; float v;\n    \n   float offset = sin(iTime * .1 + sin( iTime * .3 + sin( iTime * .1)));\n    \n   for( int i = 0; i < 3; i++ ){\n       \n    pos = p + rd * .1 * float(i);\n    v = radial( pos * 1000. + rd * offset  );\n    \n    col =1. * vec3( (1. - float( i ) / 3.));//cPal( abs(v) * .1 + offset + float( i ) / 10. ) *(1.+ float( i ) / 10.);\n       \n    if( v > .5 ){ break;}\n        \n   }\n    \n   return col; \n    \n}\n\n\nvec3 doEyeHoleColor( vec3 rd, vec3 p , vec3 n , float ao , float m  ){\n    \n  vec3 col = vec3( 1. - ao * ao * ao ) * m;//n * .5 + .5;//lensColor( p , n , rd ) * m * m * m;\n  return col;\n    \n}\n\nvec3 doEyeColor( vec3 p , vec3 n , float ao , float m   ){\n    \n  vec3 col  = vec3( 1. );//vec3(ao);//vec3( 1. , 0. , 0. ) * m;\n  return col;\n    \n}\n\nvec3 doPupilColor( vec3 p , vec3 n , float ao , float m   ){\n    \n  vec3 col  = m *vec3( 1.4 , 0., 0.);// (n * .5 + .5);\n  return col;\n    \n}\n\n\n\nvec3 doRidgeColor( vec3 p , vec3 n , float ao , float m  ){\n    \n  vec3 col  = vec3(m ) * vec3( 1. );// n * .5 + .5; // vec3( 1. , 1. , 1. );\n  return col;\n    \n}\n\n\nvec3 doFaceColor( vec3 p , vec3 n , float ao , float m   ){\n    \n  vec3 col  = vec3( 1. );// vec3(ao) * m ;//vec3( 0. , 0. , 1. ) * m;\n  return col;\n    \n}\n\n\n\nvec3 render( vec3 ro , vec3 rd ){\n   \n  vec2 res = calcIntersection( ro , rd );\n  vec3 col = vec3( 1. );\n  if( res.x > 0. ){\n\n\tvec3 pos = ro + rd * res.x;\n      vec3 nor = calcNormal( pos );\n\n      float ao = calcAO( pos , nor );\n      \n      vec3 lightDir = lookPos - pos;\n      float match = max( 0. , dot( normalize( lightDir ), nor  ));\n      \n      vec3 color = (nor * .5 + .5 );\n      \n      col = color;\n      \n      if( res.y == 3. ){  col = doEyeHoleColor( rd , pos , nor , ao, match ); }\n      if( res.y == 4. ){  col = doEyeColor( pos , nor , ao , match); }\n      if( res.y == 5. ){  col = doPupilColor( pos , nor , ao , match); }\n      \n      \n      // Properly blending the face with the ridge\n      if( res.y >= 1. && res.y <= 2. ){\n          \n          vec3 c1 = doFaceColor( pos , nor , ao , match);\n          vec3 c2 = doRidgeColor( pos , nor , ao , match);\n          \n          col = c2; // mix( c1 , c2 , res.y - 1. );\n          \n      }\n      \n      \n      // Coloring face and ridge\n      if( res.y == 2. ){  col = doRidgeColor( pos , nor , ao , match); }\n      if( res.y == 1. ){  col = doFaceColor( pos , nor , ao , match); }\n    \n  }\n     \n  return col;\n    \n}\n\n\n\nvoid mainImage( out vec4 fragColor , in vec2 fragCoord){\n\n  vec2 p = ( -iResolution.xy + 2.0 * fragCoord.xy ) / iResolution.y;\n  \n  // Getting mouse position!\n  vec2 m =  ( -iResolution.xy + 2.0 * iMouse.xy ) / iResolution.y;;\n    \n  vec3 ro , ta;\n  \n  doCamera( ro , ta , time  );\n\n  mat3 camMat = calcLookAtMatrix( ro , ta , 0. ); \n \n  // z = lens length \n  vec3 rd = normalize( camMat * vec3( p.xy , 2. ) ); \n     \n  // Getting our mouse ray direction\n  vec3 md = normalize( camMat * vec3( m.xy , 2. ) ); \n    \n        \n  // Won't have to worry in the future about this one...\n  lookPos = ro + md * .1;\n    \n  getEyeMatrices( lEyePos , rEyePos , lEyeMat , rEyeMat , headMat );\n    \n\n    \n  //lookPos = vec3( 0. , -.3 , .5 );\n \n  vec3 col = render( ro , rd );\n\n  fragColor = vec4( col , 1. );\n\n}","name":"","description":"","type":"image"}]}