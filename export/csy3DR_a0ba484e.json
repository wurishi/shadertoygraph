{"ver":"0.1","info":{"id":"csy3DR","date":"1678455981","viewed":103,"name":"VJ sync - Truchet - Pattern 1 H","username":"foxzasoby","description":"desc","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["vjhaft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst vec4 L[11]=vec4[11](\n    vec4(0., 0., 0., 1.0),                      // 0 czarny\n    vec4(102./255., 102./255., 102./255., 1.0), // 1 ciemny szary\n    vec4(153./255., 153./255., 153./255., 1.0), // 2 ciemnawy szary\n    vec4(179./255., 179./255., 179./255., 1.0), // 3 szary\n    vec4(230./255., 230./255., 230./255., 1.0), // 4 jasny szary\n    vec4(255./255., 255./255., 255./255., 1.0), // 5 biały\n\tvec4(0./255., 128./255., 128./255., 1.0),   // 6 turkus\n    vec4(0./255., 255./255., 0./255., 1.0),     // 7 jasny zielony\n\tvec4(0./255., 128./255., 0./255., 1.0),     // 8 ciemny zielony\n    vec4(128./255., 128./255., 0./255., 1.0),   // 9 ciemny żółty\n\tvec4(255./255., 255./255., 0./255., 1.0)    // 10 żółty\n\n);\n\n\nconst int tile1[400] = int[400](\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 3, 0, 0, 0, 0, 8, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t0, 0, 0, 1, 3, 5, 0, 0, 7, 8, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t0, 5, 1, 1, 3, 5, 3, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t0, 1, 4, 4, 10,9, 3, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t0, 5, 4, 4, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t0, 0, 3, 3, 5, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t0, 0, 0, 5, 3, 5, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0,\n\t0, 6, 0, 5, 3, 5, 1, 0, 0, 0, 0, 0, 0, 6, 8, 0, 0, 0, 0, 0,\n\t6, 6, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 6, 8, 0, 0, 8, 7, 7,\n\t8, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 8, 8, 8, 8, 0, 8,\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0,\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 8, 0, 0, 0, 0, 0, 0, 0,\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0,\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 8, 6, 8, 8, 7, 0, 0, 0, 0,\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n); \n\nconst int tile2[400] = int[400](\n    0, 0, 0, 0,\t0, 0, 0, 0,\t0, 8, 7, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\n    0, 0, 0, 0,\t0, 0, 0, 0,\t0, 6, 8, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\n    0, 0, 0, 0,\t0, 0, 0, 0,\t0, 6, 8, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\n    0, 0, 0, 0,\t0, 0, 0, 0,\t0, 8, 6, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\n    0, 0, 0, 0,\t0, 0, 0, 0,\t0, 0, 6, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\n    0, 0, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\n    0, 0, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\n    0, 0, 0, 0,\t8, 0, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\n    0, 0, 0, 6,\t8, 7, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\n    0, 0, 0, 6,\t8, 7, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\n    8, 8, 8, 8,\t8, 0, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\t6, 8, 8, 6,\n    0, 0, 0, 6,\t8, 6, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 7,\t7, 8, 8, 0,\n    0, 0, 0, 0,\t0, 8, 8, 6,\t0, 0, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\n    0, 0, 0, 0,\t0, 6, 8, 8,\t0, 0, 6, 6,\t0, 0, 0, 0,\t0, 0, 0, 0,\n    0, 0, 0, 0,\t0, 6, 8, 6,\t8, 8, 8, 8,\t6, 0, 0, 0,\t0, 0, 0, 0,\n    0, 0, 0, 0,\t0, 6, 8, 0,\t8, 0, 0, 7,\t0, 0, 0, 0,\t0, 0, 0, 0,\n    0, 0, 0, 0,\t0, 8, 7, 0,\t0, 8, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\n    0, 0, 0, 0,\t0, 0, 7, 0,\t0, 8, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\n    0, 0, 0, 0,\t0, 0, 0, 0,\t0, 8, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 0,\n    0, 0, 0, 0,\t0, 0, 0, 0,\t0, 8, 0, 0,\t0, 0, 0, 0,\t0, 0, 0, 0\n); \n\nconst int tile3[400] = int[400](\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 8, 8, 8, 8, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 6, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 8, 8, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 7, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    7, 0, 0, 0, 0, 0, 0, 0, 0, 8, 6, 0, 0, 0, 0, 0, 0, 0, 8, 0, \n    8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 8, 8, 8, 8, 8, \n    0, 6, 0, 0, 6, 8, 6, 0, 0, 0, 8, 0, 0, 6, 8, 6, 0, 0, 0, 0, \n    8, 6, 0, 0, 0, 0, 8, 6, 0, 0, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, \n    7, 6, 0, 0, 0, 0, 0, 8, 6, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, \n    0, 6, 0, 0, 0, 0, 0, 0, 8, 6, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 8, 8, 8, 8, 6, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 6, 6, 7, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n); \n\n\nstruct setup\n{\n float t;\n vec3 eye;\n vec3 dir;\n vec4 sfft;\n};\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(234.34, 435.345));\n    p += dot(p, p+34.23);\n    return fract(p.x*p.y);\n}\n\n\nvec4 getBackground(setup s)\n{\n    vec3 col;\n    float SRadius_1 =30.;\n    \n    //od Tomka\n    float proj = dot(-s.eye,s.dir);\n    vec3 srd = s.eye+s.dir*proj;\n    proj = length(srd);\n    proj = sqrt(SRadius_1*SRadius_1-proj*proj);\n    srd += s.dir*proj;\n    vec3 np = normalize(srd);\n    vec2 sph = acos(np.xy)/3.14159;\n\n    // GRID\n    vec2 uv = sph; \n    uv *= 50.;\n    //uv += iTime*.2; // *** moves with time\n    vec2 gv = fract(uv)-.5; // origin in the middle and -.5 to .5 in each direction\n    vec2 id = floor(uv);\n    \n    const int W = 20; // col width\n    vec2 hv = fract(gv*float(W))-.5;\n    vec2 hv_id = floor(vec2(-gv.x, gv.y)*20. + 10.);\n    int index = int(hv_id.y)*W + int(hv_id.x);\n\n    //col +=n; //*** show noise value\n    //if (gv.x>.48 || gv.y>.48) col = vec3(1, 0, 0); // ***show grid\n    //if (hv.x>.4 || hv.y>.4) col = vec3(0, 0, 1);   // ***show grid\n\n    \n    // NOISE\n    float n1 = Hash21(id); // random number between 0 and 1 for flipping x\n    float n2 = Hash21(Hash21(id)+id); // for flipping y\n    float n3 = Hash21(Hash21(1./id)+id/3.); // for choosing tile\n\n    //n1 = 1.;\n    //n2 = 1.;\n    if (n1<.5) gv.x *= -1.; // random flipping\n    if (n2<.5) gv.y *= -1.; // random flipping\n\n\n    // MIR\n    vec4 musicIntensity = s.sfft; // 0-1\n\n\n    // TILE 1\n    if (n3 < 0.4) {\n    \n    col+=L[tile1[index]].xyz;\n    \n    }\n   \n        \n    // TILE 2\n\n    else if (n3 < 0.8) {\n    \n        col+=L[tile2[index]].xyz;\n        //if (hv_id == vec2(0., 0.)) col += vec3(L[5]); //*** add here a little white square \n\n    }\n        \n    \n    // TILE 3\n    else {\n\n        col+=L[tile3[index]].xyz;\n\n    }\n     \n   //if (col == vec3(0)) col = vec3(241./255., 241./255., 218./255.); // *** lighten up a BG\n    \n    \n    return vec4(col, 1);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n// -=-=-=-=-=-=-=-=-=-=- SETUP renderera \n vec3 eye = vec3(0.0f, 0.0f, -5.0f);\n vec3 dir = vec3(vec2(2.0*(fragCoord-0.5*iResolution.xy)/iResolution.xx),0.0f)*1.;\n dir = normalize(dir -eye);\n setup wsad = setup(iTime,eye,dir, \n                    vec4(texelFetch(iChannel0, ivec2(1, 0), 0).r,texelFetch(iChannel0, ivec2(5, 0), 0).r,\n                    texelFetch(iChannel0, ivec2(10, 0), 0).r,texelFetch(iChannel0, ivec2(15, 0), 0).r));\n\n// =-=-=-=-=-=-=-=-=-=-\n\n\n    // Output to screen\n    fragColor = getBackground(wsad);\n    \n    //fragColor += getBacktestColorNice8(wsad);\n    //vec3 eye2 = vec3(0.0f, 0.0f, -12.0f);\n    //setup wsad2 = setup(iTime,eye2,dir);\n    //fragColor += getBackground(wsad2);\n\n    \n}","name":"Image","description":"","type":"image"}]}