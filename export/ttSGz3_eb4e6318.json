{"ver":"0.1","info":{"id":"ttSGz3","date":"1560524381","viewed":920,"name":"Glare of water","username":"jaszunio15","description":"Simple concept of simulating glare of water using Voronoi noise.\n\nShader License: CC BY 3.0\nAuthor: Jan Mróz (jaszunio15)","likes":46,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","water","glare"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Shader License: CC BY 3.0\n//Author: Jan Mróz (jaszunio15)\n\n//Layered voronoi\n#define VORONOI_NOISE_POW 5.0\n#define VORONOI_BRIGHTNESS_ADD 0.05\n#define SIZE_MUL 1.5\n#define ALPHA_MUL 0.9\n#define LAYERS 4\n\n//Colors\n#define WATER_COLOR vec4(0.0, 0.8, 0.8, 1.0)\n\n//Image size and displacement\n#define UV_MUL 3.0\n#define UV_DISPLACEMENT_STRENGTH 0.15\n#define UV_DISPLACEMENT_SIZE 5.0\n\n//Animation\n#define WATER_SPEED 0.5\n#define ANIMATION_SPEED 2.0\n\nfloat hash1_2(vec2 x)\n{\n \treturn fract(sin(dot(x, vec2(52.127, 61.2871))) * 521.582);   \n}\n\nvec2 hash2_2(vec2 x)\n{\n    return fract(sin(x * mat2x2(20.52, 24.1994, 70.291, 80.171)) * 492.194);\n}\t\n\n//Simple interpolated noise\nvec2 noise2_2(vec2 uv)\n{\n    vec2 f = smoothstep(0.0, 1.0, fract(uv));\n    \n \tvec2 uv00 = floor(uv);\n    vec2 uv01 = uv00 + vec2(0,1);\n    vec2 uv10 = uv00 + vec2(1,0);\n    vec2 uv11 = uv00 + 1.0;\n    vec2 v00 = hash2_2(uv00);\n    vec2 v01 = hash2_2(uv01);\n    vec2 v10 = hash2_2(uv10);\n    vec2 v11 = hash2_2(uv11);\n    \n    vec2 v0 = mix(v00, v01, f.y);\n    vec2 v1 = mix(v10, v11, f.y);\n    vec2 v = mix(v0, v1, f.x);\n    \n    return v;\n}\n\nvec2 rotate(vec2 point, float deg)\n{\n \tfloat s = sin(deg);\n    float c = cos(deg);\n    return mat2x2(s, c, -c, s) * point;\n}\n\n//Cell center from point on the grid\nvec2 voronoiPointFromRoot(vec2 root, float deg)\n{\n  \tvec2 point = hash2_2(root) - 0.5;\n    float s = sin(deg);\n    float c = cos(deg);\n    point = mat2x2(s, c, -c, s) * point;\n    point += root + 0.5;\n    return point;\n}\n\nfloat degFromRootUV(vec2 uv)\n{\n \treturn iTime * ANIMATION_SPEED * (hash1_2(uv) + 0.2);   \n}\n\n//x - voronoi coordinates (grid step = 1)\nfloat voronoi(vec2 uv)\n{\n    vec2 rootUV = floor(uv);\n    float deg = degFromRootUV(rootUV);\n    vec2 pointUV = voronoiPointFromRoot(rootUV, deg);\n    \n    vec2 tempRootUV;\t//Used in loop only\n    vec2 tempPointUV;\t//Used in loop only\n    vec2 closestPointUV = pointUV;\n    float minDist = 2.0;\n    float dist = 2.0;\n    for (float x = -1.0; x <= 1.0; x+=1.0)\n    {\n     \tfor (float y = -1.0; y <= 1.0; y+=1.0)   \n        {\n         \ttempRootUV = rootUV + vec2(x, y);\n            deg = (iTime * hash1_2(tempRootUV) * ANIMATION_SPEED);\n            tempPointUV = voronoiPointFromRoot(tempRootUV, deg);\n            \n            dist = distance(uv, tempPointUV);\n            if(dist < minDist)\n            {\n             \tclosestPointUV = tempPointUV;\n               \tminDist = dist;\n            }\n        }\n    }\n    \n    return minDist;\n}\n\n//Layered voronoi noise\nfloat fractVoronoi(vec2 uv, float sizeMul, float alphaMul, int layers)\n{\n \tfloat noise = 0.0;\n    float size = 1.0;\n    float alpha = 1.0;\n    vec2 uvOffset; //Used in loop only\n    for(int i = 0; i < layers; i++)\n    {\n        uvOffset = hash2_2(vec2(size, alpha)) * iTime * WATER_SPEED;\n        noise += pow(voronoi((uv + uvOffset) * size) * alpha + VORONOI_BRIGHTNESS_ADD, VORONOI_NOISE_POW);\n        size *= sizeMul;\n        alpha *= alphaMul;\n    }\n    \n    noise *= (1.0 - alphaMul)/(1.0 - pow(alphaMul, float(layers)));\n    return noise;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.x; \n    uv *= UV_MUL;\n    vec2 noise2D = noise2_2(uv * UV_DISPLACEMENT_SIZE) * UV_DISPLACEMENT_STRENGTH;\n    float fractVoro = fractVoronoi(uv + noise2D, SIZE_MUL, ALPHA_MUL, LAYERS);\n    float res = smoothstep(-0.2, 0.3, fractVoro);\n    fragColor = vec4(res) * WATER_COLOR + fractVoro;\n}","name":"Image","description":"","type":"image"}]}