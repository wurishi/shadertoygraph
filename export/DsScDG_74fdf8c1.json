{"ver":"0.1","info":{"id":"DsScDG","date":"1688086134","viewed":62,"name":"halton23","username":"MonterMan","description":"simple verifier of halton23","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["halton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float radicalInverse(int x, float base)\n{\n    int baseI = int(base);\n    float result = 0.0;\n    float b = 1.0 / base;\n    while (x > 0)\n    {\n        result += float(x % baseI) * b;\n        x /= baseI;\n        b /= base;\n    }\n    return result;\n}\n\nvec2 halton23(int index)\n{\n    return vec2(radicalInverse(index, 2.0), radicalInverse(index, 3.0));\n}\n\nvec2 hammersley(int index, int N)\n{\n    return vec2(float(index)/float(N), radicalInverse(index, 2.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.0 * uv - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    uv = 0.5 * uv + 0.5;\n    \n    float dist = 10e31;\n    int N = min(256, iFrame);\n    for (int i = 0; i < N; ++i)\n    {\n        vec2 p = uv - hammersley(i, N);\n        float localDist = length(p) - 0.005;\n        dist = min(dist, localDist);\n    }\n\n    // Output to screen\n    fragColor = vec4(vec3(smoothstep(0.01, 0.0, dist)),1.0);\n}","name":"Image","description":"","type":"image"}]}