{"ver":"0.1","info":{"id":"DsdXzr","date":"1679329712","viewed":66,"name":"Test 14- rotating reflected rays","username":"gorplex","description":"Test 14  - rotating reflected rays","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test","demo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926538\n#define LINE_WIDTH 1.\n//must be power of 2\n#define NUM_LINES 16\n\n\n\n\nfloat line(float val)\n{\n    return smoothstep(.0,.0, val+LINE_WIDTH/2.)-smoothstep(.0,.0, val-LINE_WIDTH/2.) ;\n}\n\nfloat lineAngle(vec2 px, float theta)\n{\n    // only tranforming x component from rotation matrix for line y=0\n    return line(px.x*cos(theta)-px.y*sin(theta));\n}\n\nfloat manyLines(vec2 px)\n{\n    float val = 0.;\n    for(int i=0;i<NUM_LINES; i++)\n    {\n        float theta = float(i)*PI/float(NUM_LINES);\n        val += lineAngle(px, theta);\n    }\n    return min(1.,val);\n}\n\nfloat manyLinesRot(vec2 px, float theta)\n{\n    vec2 pxRotated = vec2(px.x*cos(theta)-px.y*sin(theta), px.x*sin(theta)+px.y*cos(theta));\n    return manyLines(pxRotated);\n}\n\n\nvec3 rotLines(float iTime, vec2 px)\n{\n    float theta = 2.*iTime;\n    return vec3(1., 1., 0.)*lineAngle(px, theta);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //pixel value centerd on screen\n    vec2 px = fragCoord-iResolution.xy/2.;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = vec3(0.);\n    \n    col += vec3(1., 0., 0.)*manyLines(px);\n    \n    float theta = iTime;\n    col += vec3(0., 0., 1.)*manyLinesRot(px, theta);\n    \n    col += rotLines(iTime, px);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}