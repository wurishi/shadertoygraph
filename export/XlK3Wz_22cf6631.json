{"ver":"0.1","info":{"id":"XlK3Wz","date":"1474196657","viewed":158,"name":"Probability of chi-square","username":"joshliebe","description":"Calculates the p-value for a chi-square statistic","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["statistics","chisquare","pvalue"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \tProbability of a chi-square statistic\n\tThis is a GLSL version of the Java implementation found at:\n\thttp://www.vvlasov.com/2013/06/how-to-calculate-pvalue-from-chisquare.html\n\n    Adapted from:\n    Hill, I. D. and Pike, M. C., Algorithm 299\n    Collected Algorithms for the CACM 1967, p. 243\n    Updated for rounding errors based on remark in\n    ACM TOMS June 1985, page 185\n\n\tVerified against the JS implementation found at:\n\thttp://www.fourmilab.ch/rpkp/experiments/analysis/chiCalc.html\n*/\n\nconst float PI = 3.14159265359;\nconst float LOG_SQRT_PI = log(sqrt(PI));\nconst float I_SQRT_PI = 1.0 / sqrt(PI);\nconst float MAX_X = 20.0; // max value to represent exp(x)\nconst int MAX_ITER = 100;\n\n// Probability of normal z value\nfloat poz(float z) {\n    float y, x, w;\n    float Z_MAX = 6.0; // Maximum meaningful z value \n    if (z == 0.0) {\n        x = 0.0;\n    } else {\n        y = 0.5 * abs(z);\n        if (y >= (Z_MAX * 0.5)) {\n            x = 1.0;\n        } else if (y < 1.0) {\n            w = y * y;\n            x = ((((((((0.000124818987 * w\n                        - 0.001075204047) * w + 0.005198775019) * w\n                      - 0.019198292004) * w + 0.059054035642) * w\n                    - 0.151968751364) * w + 0.319152932694) * w\n                  - 0.531923007300) * w + 0.797884560593) * y * 2.0;\n        } else {\n            y -= 2.0;\n            x = (((((((((((((-0.000045255659 * y\n                             + 0.000152529290) * y - 0.000019538132) * y\n                           - 0.000676904986) * y + 0.001390604284) * y\n                         - 0.000794620820) * y - 0.002034254874) * y\n                       + 0.006549791214) * y - 0.010557625006) * y\n                     + 0.011630447319) * y - 0.009279453341) * y\n                   + 0.005353579108) * y - 0.002141268741) * y\n                 + 0.000535310849) * y + 0.999936657524;\n        }\n    }\n    return z > 0.0 ? ((x + 1.0) * 0.5) : ((1.0 - x) * 0.5);\n}\n\nfloat ex(float x) {\n    return (x < -MAX_X) ? 0.0 : exp(x);\n}\n\n// Probability of chi-square statistic x with degrees of freedom df\nfloat pochisq(float x, int df) {\n    float a, s;\n    float e, c, z;\n\n    if (x <= 0.0 || df < 1) {\n        return 1.0;\n    }\n    a = 0.5 * x;\n    bool even = mod(float(df), 2.0) == 0.0;\n    float y = 0.0;\n    if (df > 1) {\n        y = ex(-a);\n    }\n    s = (even ? y : (2.0 * poz(-sqrt(x))));\n    if (df > 2) {\n        x = 0.5 * (float(df) - 1.0);\n        z = (even ? 1.0 : 0.5);\n        if (a > MAX_X) {\n            e = (even ? 0.0 : LOG_SQRT_PI);\n            c = log(a);\n            for(int i = 0; i <= MAX_ITER; i++) { \n                e = log(z) + e;\n                s += ex(c * z - a - e);\n                z += 1.0;\n                \n                if(z > x) {\n                \tbreak;\n                }\n            }\n            return s;\n        } else {\n            e = (even ? 1.0 : (I_SQRT_PI / sqrt(a)));\n            c = 0.0;\n            for(int i = 0; i <= MAX_ITER; i++) { \n                e = e * (a / z);\n                c = c + e;\n                z += 1.0;\n                \n                if(z > x) {\n                \tbreak;\n                }\n            }\n            return c * y + s;\n        }\n    } else {\n        return s;\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float x = float(int(uv.x * 11.0)); // Chi-square values 0,1,...,10\n    int df = int((1.0 - uv.y) * 11.0); // Degrees of freedom 0,1,...,10\n   \tfragColor = vec4(vec3(pochisq(x, df)), 1.0);\n}","name":"Image","description":"","type":"image"}]}