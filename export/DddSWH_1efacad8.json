{"ver":"0.1","info":{"id":"DddSWH","date":"1679729324","viewed":219,"name":"Tetraeder Fractal Optimized","username":"tholzer","description":"Fork of \"Romanesco 2.0\" fractal shader with some code optimizations.\n\nYou can use your mouse to change fractal parameter !","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal","tetrader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Fork of \"Romanesco 2.0\" by elias. https://shadertoy.com/view/Xs3XW2\n\n// Tetraeder_Fractal_Optimized.glsl   2023-03-25\n\n// Fork of \"Romanesco 2.0\" fractal shader with some code optimizations.\n// You can use your mouse to change fractal parameter !\n\nfloat t = 5e-3;\n\n// 2d rotation matrix\nmat2 rotate(float a)   { float c=cos(a),   s=sin(a);  return mat2(c,-s,s,c); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 mp = 18. + iMouse.xy / iResolution.xy * 6.;\n  vec2 uv = (2. * gl_FragCoord.xy - iResolution.xy) / iResolution.y;\n  vec3 b = vec3(.707, .707, 0);\n  mat2 rotateTime = rotate (.3*iTime);\n  mat2 rotateMx = rotate (mp.x);\n  mat2 rotateMy = rotate (mp.y);\n  for (float i = 0.; i < 64.; i++)\n  {\n    vec3 p = vec3(uv, t - 1.);\n    p.xz *= rotateTime;\n    for (float i = 0.; i < 20.; i++)\n    {\n      p.xz *= rotateMx;\n      p.xy *= rotateMy;\n      p -= min(0., dot(p, b)) * b * 2.; b = b.zxx;\n      p -= min(0., dot(p, b)) * b * 2.; b = b.zxz;\n      p -= min(0., dot(p, b)) * b * 2.; b = b.xxy;\n      p = p * 1.5 - .25;\n    }\n    t += length(p) / 3325.;\n    if (length(p) / 3325. < 5e-3 || t > 2.)\n    {\n      b = vec3(1); p *= .5;\n      fragColor = vec4(p / length(p) * (t < 2. ? 5. / i : i / 64.), dot(p, b));\n      break;\n    }\n  }\n}","name":"Image","description":"","type":"image"}]}