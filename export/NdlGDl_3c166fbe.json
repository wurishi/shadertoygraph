{"ver":"0.1","info":{"id":"NdlGDl","date":"1616741369","viewed":146,"name":"20210326_oidos-like plus noise","username":"FMS_Cat","description":"additive synthesis + noise wavetable fm","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["sound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // put ryoji ikeda graphics here lol\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float PI = 3.14159265;\nconst float TAU = PI * 2.0;\n\n// oidos equivalent params\nconst int PARAM_MODES = 50;\nconst int PARAM_FAT = 50;\nconst float PARAM_SEED = 0.261;\nconst float PARAM_HARMONICITY = 0.1;\nconst float PARAM_WIDTH = 0.5;\nconst float PARAM_OVERTONES = 45.0;\n\n// params for noise\nconst float PARAM_NOISE_AMP = 0.002;\nconst float PARAM_NOISE_RADIUS = 0.04;\nconst float PARAM_NOISE_VELOCITY = 11.0;\nconst float PARAM_NOISE_WARP = 0.2;\nconst vec3 PARAM_NOISE_BASIS = vec3( 1.2, -1.5, 0.3 );\n\nconst float AMP_PER_SIN = 1.0 / float( PARAM_MODES * PARAM_FAT );\n\nmat3 orthBasis( vec3 z ) {\n  z = normalize( z );\n  vec3 up = abs( z.y ) > 0.999 ? vec3( 0.0, 0.0, 1.0 ) : vec3( 0.0, 1.0, 0.0 );\n  vec3 x = normalize( cross( up, z ) );\n  vec3 y = cross( z, x );\n  return mat3( x, y, z );\n}\n\nvec3 cyclicNoise( vec3 p ) {\n  vec3 sum = vec3( 0.0 );\n  float amp = 0.5;\n  float warp = PARAM_NOISE_WARP;\n  mat3 rot = orthBasis( PARAM_NOISE_BASIS );\n\n  for ( int i = 0; i < 8; i ++ ) {\n    p *= rot * 2.0;\n    p += sin( p.zxy * warp );\n    sum += sin( cross( cos( p ), sin( p.yzx ) ) ) * amp;\n    amp *= 0.5;\n    warp *= 1.3;\n  }\n\n  return sum;\n}\n\n\nfloat seed;\n\nfloat fs( float s ) {\n  return fract( sin( s * 114.514 ) * 1919.810 );\n}\n\nfloat random() {\n  seed = fs( seed );\n  return 2.0 * seed - 1.0;\n}\n\nvec2 mainSound( int samp, float time ) {\n  vec2 dest = vec2( 0.0 );\n  \n  float t = time;\n  vec3 z = vec3( sin( t ), cos( t * 0.4 ), sin( t * 0.7 ) );\n\n  float tone = 0.0;\n  \n  seed = PARAM_SEED;\n  \n  for ( int i = 0; i < PARAM_MODES; i ++ ) {\n    float reltone = random() * PARAM_OVERTONES;\n    \n    float relfreq = pow( 2.0, reltone / 12.0 );\n    float relfreqOt = floor( relfreq + 0.5 );\n    float relfreqH = mix( relfreq, relfreqOt, PARAM_HARMONICITY );\n    reltone = log2( relfreqH ) * 12.0;\n\n    float mtone = tone + reltone;\n    float mfreq = 220.0 * pow( 2.0, mtone / 12.0 );\n\n    for ( int j = 0; j < PARAM_FAT; j ++ ) {\n      float ptone = mtone + random() * PARAM_WIDTH;\n\n      float freq = 220.0 * pow( 2.0, ptone / 12.0 );\n    \n      float noisePhase = TAU * fract( freq * t * PARAM_NOISE_VELOCITY );\n      vec3 noisePos = PARAM_NOISE_RADIUS * vec3( sin( noisePhase ), cos( noisePhase ), 1.0 );\n      vec2 tt = t + PARAM_NOISE_AMP * cyclicNoise( noisePos ).xy;\n      \n      vec2 phase = TAU * fract( freq * tt ) + TAU * vec2( random(), random() );\n      dest += AMP_PER_SIN * sin( phase );\n    }\n  }\n\n  // slightly pumping up the volume\n  dest *= 2.0;\n\n  return dest;\n}","name":"Sound","description":"","type":"sound"}]}