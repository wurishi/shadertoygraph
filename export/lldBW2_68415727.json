{"ver":"0.1","info":{"id":"lldBW2","date":"1541178949","viewed":492,"name":"Black vs White","username":"RynsArgent","description":"Experimentation with back buffer where each cell looks at its neighbors. Reminds me of the old screensaver where you watched random colors on the screen and waited to see what lasted to the end. This isn't quite the same, and is only black and white.","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float easeInOutCubic(float t, float b, float c, float d)\n{\n\tt /= d/2.0f;\n\tif (t < 1.0f) return c/2.0f*t*t*t + b;\n\tt -= 2.0f;\n\treturn c/2.0f*(t*t*t + 2.0f) + b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 center = fragCoord/iResolution.xy;\n    if (iFrame <= 10)\n    {\n    \tfragColor = vec4(texture(iChannel1, center).xxx, 1.0f);\n    }\n    else\n    {\n    \tvec2 delta = 1.0f/iResolution.xy;\n    \t\n        vec2 topNeighbor = center + vec2(0, delta.y);\n        vec2 botNeighbor = center + vec2(0, -delta.y);\n        vec2 leftNeighbor = center + vec2(-delta.x, 0);\n        vec2 rightNeighbor = center + vec2(delta.x, 0);\n        \n        int numWhite = 0;\n        int numBlack = 0;\n        \n    \tvec4 topCol = texture(iChannel0, topNeighbor);\n    \tvec4 botCol = texture(iChannel0, botNeighbor);\n    \tvec4 leftCol = texture(iChannel0, leftNeighbor);\n    \tvec4 rightCol = texture(iChannel0, rightNeighbor);\n    \tvec4 centerCol = texture(iChannel0, center);\n        \n        float b = 0.0f;\n        float c = 1.0f;\n        float d = 1.0f;\n        \n        float top = easeInOutCubic(topCol.r, b, c, d);\n        float bot = easeInOutCubic(botCol.r, b, c, d);\n        float left = easeInOutCubic(leftCol.r, b, c, d);\n        float right = easeInOutCubic(rightCol.r, b, c, d);\n        \n        float topVal = 2.0f * top - 1.0f;\n        float botVal = 2.0f * bot - 1.0f;\n        float leftVal = 2.0f * left - 1.0f;\n        float rightVal = 2.0f * right - 1.0f;\n        \n        float totalVal = (topVal + botVal + leftVal + rightVal) / 4.0f;\n        \n        float result = (totalVal + 1.0f) / 2.0f;\n        fragColor = vec4(result, result, result, 1.0f);\n    }   \n}","name":"Buffer A","description":"","type":"buffer"}]}