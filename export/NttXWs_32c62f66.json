{"ver":"0.1","info":{"id":"NttXWs","date":"1640264183","viewed":203,"name":"Funky Swirls","username":"domizai","description":"Funky swirls.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["swirl","light","normal","height","recursion","gold"],"hasliked":0,"parentid":"fl3XDs","parentname":"Golden Swirls"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Inspired by wnu's 'chocolate swirl': https://www.shadertoy.com/view/NtcSDs\n    and combined with: https://www.shadertoy.com/view/fl3XDs\n*/\n\n#define RATIO iResolution.x / iResolution.y\n#define POINTS 15\n#define FORCE 3. // the larger the smaller the swirl\n#define ROTATION 9.\n\n\nvec3 getHeight (vec2 uv, inout float acc_frc, inout vec2 acc_rot)\n{\n    float tm = iTime * .1;\n        \n    for (int i = 0; i < POINTS; i++)\n    {\n        float n = n21(vec2(i + 1));\n        vec2 pnt = vec2(.5) + vec2(cos(tm + n * 423.1) * .6, sin(tm + n * 254.3) * .3);\n\n        vec2  loc = uv - pnt;\n        float len = length(loc);\n        float frc = exp(len * -FORCE);\n        float swl = frc * ROTATION * sin(tm + n * 624.8); \n        vec2  rot = loc * rotate(swl);\n        \n        uv = rot + pnt;\n        \n        acc_frc += frc;\n        acc_rot += rot * frc; \n    } \n    \n    float h = cos(uv.x + uv.y + 1.) * .5 + .5;\n    \n    return vec3(uv, h);\n}\n\n\nvec3 getHeight (vec2 p)\n{\n    float f = .0; vec2  r = vec2(0.);\n    return getHeight(p, f, r);\n}\n\n\nvec3 getNormal (vec2 p)\n{\n    vec2 eps = -vec2(1. / iResolution.y, .0);\n    \n    vec3 a = vec3(eps.xy, getHeight(p + eps.xy).z - getHeight(p - eps.xy).z);\n    vec3 b = vec3(eps.yx, getHeight(p + eps.yx).z - getHeight(p - eps.yx).z);\n    vec3 n = normalize(cross(a, b));\n\n    return n;\n}\n\n\nvec3 offsetLights (vec2 uv, vec3 normals)\n{\n    float tm  = iTime * 1.;\n    float off = .2; // offset\n    float sth = .7; // strength\n    float amb = .2; // ambient\n    float rad = 1.; // radius\n    vec3 pos  = vec3(.5, .5, 1.);\n    \n    float o2 = 1. * off;\n    float o3 = 2. * off;\n    \n    vec3 p1 = vec3(pos.x + cos(tm) * rad, pos.y + sin(tm + 0.) * rad, pos.z);\n    vec3 p2 = vec3(pos.x + cos(tm + o2) * rad, pos.y + sin(tm + o2) * rad, pos.z);\n    vec3 p3 = vec3(pos.x + cos(tm + o3) * rad, pos.y + sin(tm + o3) * rad, pos.z);\n    \n    vec3 l1 = diffuseLight(uv, normals, p1, vec3(sth, 0., 0.));\n    vec3 l2 = diffuseLight(uv, normals, p2, vec3(0., sth, 0.));\n    vec3 l3 = diffuseLight(uv, normals, p3, vec3(0., 0., sth));\n    \n    return l1 + l2 + l3 + amb;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord / iResolution.xy - .5) * vec2(RATIO, 1.) + .5;\n    vec3 col = vec3(0.);\n    float tm = iTime;\n    \n    float acc_frc = .0;\n    vec2  acc_rot = vec2(0.);\n    getHeight(uv, acc_frc, acc_rot);\n    \n    vec3 normal1   = normalize(vec3(acc_rot, acc_frc * .01)).yxz;\n    vec3 normal2   = getNormal(uv);\n    vec3 normal    = normal1 + normal2 * 1.5;\n    \n    vec3 diffuse   = offsetLights(uv, normal);\n    vec3 specular  = smoothstep(.8, .95, diffuse);\n    vec3 material  = vec3(.2, .15, .05);\n    vec3 light     = diffuse + specular + material;\n    \n    //col = light;\n    //col = normal;\n    col = light + sin(light * PI) - light; // To make it a bit more interesting\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.141592653589793\n\n\nfloat n21 (vec2 p)\n{\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\nvec2 n22 (vec2 p)\n{\n    float n = n21(p);\n    return vec2(n, n21(p+n));\n}\n\n\nmat2 rotate (float a) \n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n\nvec3 diffuseLight (vec2 uv, vec3 normals, vec3 pos, vec3 col)\n{\n    vec3 dif = pos - vec3(uv, 0.); // point light\n    //vec3 dif = pos; // directional light\n    vec3 dir = normalize(dif);\n    float intensity = 1. / length(dif); // inverse square law\n    float diffuse   = dot(normals, dir) * intensity;\n    return col * diffuse;\n}\n","name":"Common","description":"","type":"common"}]}