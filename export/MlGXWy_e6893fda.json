{"ver":"0.1","info":{"id":"MlGXWy","date":"1485797243","viewed":145,"name":"Assignment 2: Reveal","username":"hamiltonaaronw","description":"Due: 2/2/17\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["blur","textures","reveal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 blur = mat3 (\n    0.111, 0.111, 0.111,\n    0.111, 0.111, 0.111,\n    0.111, 0.111, 0.111\n    );\n\nmat3 sharpen = mat3 (\n    0.0, -1.0, 0.0,\n    -1.0, 5.0, -1.0,\n    0.0, -1.0, 0.0\n    );\n\nmat3 edge = mat3 (\n    -1.0, -1.0, -1.0,\n    -1.0, 8.0, -1.0,\n    -1.0, -1.0, -1.0\n    );\n\nmat3 gaussBlur = mat3 ((1.0/16.0) * (\n    1.0, 2.0, 1.0,\n    2.0, 4.0, 2.0,\n    1.0, 2.0, 1.0\n    ));\n\nmat3 defaultKernel = mat3 (\n    1.0, 1.0, 1.0,\n    1.0, 1.0, 1.0,\n    1.0, 1.0, 1.0\n    );\n\nvec3 sample0(const int x, const int y, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n\tuv = (uv + vec2(x, y)) / iChannelResolution[0].xy;\n\treturn texture(iChannel0, uv).xyz;\n}\n\nvec3 sample1(const int x, const int y, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[1].xy;\n    uv = (uv + vec2(x, y)) / iChannelResolution[1].xy;\n    return texture(iChannel1, uv).xyz;\n}\n\nvec3 filter0(in vec2 fragCoord, mat3 kernel)\n{\n\tvec3 sum = sample0(-1, -1, fragCoord) * kernel[0][0]\n\t+ sample0(-1, 0, fragCoord) * kernel[0][1]\n\t+ sample0(-1, 1, fragCoord) * kernel[0][2]\n\t+ sample0(0, -1, fragCoord) * kernel[1][0]\n\t+ sample0(0, 0, fragCoord) * kernel[1][1]\n\t+ sample0(0, 1, fragCoord) * kernel[1][2]\n\t+ sample0(1, -1, fragCoord) * kernel[2][0]\n\t+ sample0(1, 0, fragCoord) * kernel[2][1]\n\t+ sample0(1, 1, fragCoord) * kernel[2][2];\n\n\treturn sum;\n}\n\nvec3 filter1(in vec2 fragCoord, mat3 kernel)\n{\n\tvec3 sum = sample1(-1, -1, fragCoord) * kernel[0][0]\n        + sample1(-1, 0, fragCoord) * kernel[0][1]\n        + sample1(-1, 1, fragCoord) * kernel[0][2]\n        + sample1(0, -1, fragCoord) * kernel[1][0]\n        + sample1(0, 0, fragCoord) * kernel[1][1]\n        + sample1(0, 1, fragCoord) * kernel[1][2]\n        + sample1(1, -1, fragCoord) * kernel[2][0]\n        + sample1(1, 0, fragCoord) * kernel[2][1]\n        + sample1(1, 1, fragCoord) * kernel[2][2];\n    \n    return sum;\n}\n\nuniform vec2 mouse;\n\nfloat radius = 0.2;\nvec2 center;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    center = vec2(iMouse.x, iMouse.y);\n    // uv\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y *= iResolution.y / iResolution.x;\n    \n    // fragCoord\n\tvec2 fc = fragCoord.xy;\n\n    // declaring kernel variables\n    vec3 cfBlur = filter0(fc, blur);\n\tvec3 cfSharp = filter0(fc, sharpen);\n    vec3 cfGauss = filter0(fc, gaussBlur);\n    vec3 cfEdge = filter0(fc, edge);\n    \n    vec3 cfBlur1 = filter1(fc, blur);\n    vec3 cfSharp1 = filter1(fc, sharpen);\n    vec3 cfGauss1 = filter1(fc, gaussBlur);\n    vec3 cfEdge1 = filter1(fc, edge);\n    \n    // mouse\n    float mouseDistance = (distance(fragCoord.xy, iMouse.xy) / iResolution.y);\n    \n    // layers\n    vec4 bgLayer = vec4(cfSharp, 0.7);\n    vec4 topLayer = vec4(cfBlur1, 1.0);\n    \n    // switch\n    if (center.x < 0.25)\n        bgLayer = vec4(cfBlur, bgLayer.a);\n    else if (center.x >= 0.25 && center.x < 0.5)\n        bgLayer = vec4(cfSharp, bgLayer.a);\n    else if (center.x >= 0.5 && center.x < 0.75)\n        bgLayer = vec4(cfGauss, bgLayer.a);\n    else \n        bgLayer = vec4(cfEdge, bgLayer.a);\n  \t\t  \n     if (mouseDistance > radius)\n     \tfragColor = topLayer;\n     else \n     {  \n        float blendValue = 1.0 - (exp(0.05 / mouseDistance) / 2.7);\n        fragColor =  mix(bgLayer, topLayer, blendValue);\n     }\n}","name":"Image","description":"","type":"image"}]}