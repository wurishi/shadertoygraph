{"ver":"0.1","info":{"id":"tddGWf","date":"1569428549","viewed":84,"name":"Shape tests","username":"Clinery","description":"It displays shapes, nothing to it","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shapes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool circle(float radius,float width,vec2 position,vec2 xy) {\n    float res=(pow(xy.x-position.x,2.0))+(pow(xy.y-position.y,2.0));\n    return (res<pow(radius+width,2.0))&&(res>pow(radius,2.0));\n}\nbool fillCircle(float radius,vec2 position,vec2 xy) {\n    float res=(pow(xy.x-position.x,2.0))+(pow(xy.y-position.y,2.0));\n    return res<pow(radius,2.0);\n}\nbool square(float sideLength,float width,vec2 position,vec2 xy) { // Position is the center of the shape\n    float halfLength=sideLength/2.0;\n    float x=xy.x;float y=xy.y;\n    return ((x>position.x-halfLength)&&(x>(position.x-halfLength)-width))&&\n           ((x<position.x+halfLength)&&(x<(position.x+halfLength)+width))&&\n           ((y>position.y-halfLength)&&(y>(position.y-halfLength)-width))&&\n           ((y<position.y+halfLength)&&(y<(position.y+halfLength)+width));\n}\nbool fillSquare(float sideLength,vec2 position,vec2 xy) {\n    float halfLength=sideLength/2.0;\n    float x=xy.x;float y=xy.y;\n    return (x>position.x-halfLength)&&(x<position.x+halfLength)&&(y>position.y-halfLength)&&(y<position.y+halfLength);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float time=iTime/5.0;\n    vec3 col=vec3(0.5,0.0,1.0);\n    bool circle1=circle(100.0,10.0,iResolution.xy/2.0,fragCoord.xy);\n    bool circle2=fillCircle(100.0,vec2(iResolution.x/2.0+100.0,iResolution.y/2.0),fragCoord.xy);\n    float x=fragCoord.x;\n    float y=fragCoord.y;\n    float tolerance=1.0;\n    \n    // The equation for the x sine wave\n    float tmp=(32.0*sin((x/20.0)+time*8.0))+iResolution.y/2.0;    float half33=iResolution.y/2.00-33.0;\n    \n    // The x sin wave\n    if (y-tolerance<tmp&&y+tolerance>tmp&&x<half33) {col=vec3(0.0);}\n    // The circle\n    if (circle(32.0,2.0,vec2(iResolution.y/2.0),vec2(x,y))) {col=vec3(0.0);}\n    // The equation for the y cosine wave\n    float tmp2=(32.0*cos((y/20.0)+time*8.0))+(iResolution.y/2.0);\n    // The y cosine wave\n    if (x-tolerance<tmp2&&x+tolerance>tmp2&&y<half33) {col=vec3(0.0);}\n    \n    if ((x>half33&&x<half33+33.0)||(x>half33&&fillCircle(33.0,vec2(iResolution.y/2.0),vec2(x,y)))) {\n        tmp= (32.0*sin((half33/20.0)+time*8.0))+(iResolution.y/2.0);\n        tmp2=(32.0*cos((half33/20.0)+time*8.0))+(iResolution.y/2.0);\n        if (y-tolerance<tmp&&y+tolerance>tmp&&x<tmp2) {\n        \tcol=vec3(1.0,0.0,0.0);\n        }\n    }\n    if ((y>half33&&y<half33+33.0)||(y>half33&&fillCircle(33.0,vec2(iResolution.y/2.0),vec2(x,y)))) {\n        tmp= (32.0*sin((half33/20.0)+time*8.0))+(iResolution.y/2.0);\n        tmp2=(32.0*cos((half33/20.0)+time*8.0))+(iResolution.y/2.0);\n        if (x-tolerance<tmp2&&x+tolerance>tmp2&&y<tmp) {\n        \tcol=vec3(1.0,0.0,0.0);\n        }\n    }\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}