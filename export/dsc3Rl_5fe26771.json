{"ver":"0.1","info":{"id":"dsc3Rl","date":"1677678157","viewed":124,"name":"just another menger sponge","username":"Deep4","description":"simple Menger sponge\n\nSong \"Clouds\" by myself","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["raymarching","music","menger","sponge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XlBSWd","filepath":"https://soundcloud.com/stefan-kubsch/clouds","previewfilepath":"https://soundcloud.com/stefan-kubsch/clouds","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision mediump float;\n\nfloat Box(vec3 pos, vec3 b)\n{\n    vec3 d = abs(pos) - b;\n    return min(max(d.x,max(d.y,d.z)), .0) + length(max(d, .0));\n}\n\nfloat Map(vec3 p)\n{  \n    const float Iter = 40.;\n    const float BoxWidth = 4.;\n    float HoleWidth = BoxWidth * .333;\n    float Menger = Box(p, vec3(BoxWidth));\n       \n    for (int i=0; i<5; i++)\n    {\n        float HoleDist = HoleWidth * 2.8;\n        vec3 c = vec3(HoleDist);\n        vec3 q = mod(p + vec3(HoleWidth), c) - vec3(HoleWidth);\n        vec3 Hole = vec3(Box(q, vec3(Iter, HoleWidth, HoleWidth)), Box(q, vec3(HoleWidth, Iter, HoleWidth)), Box(q, vec3(HoleWidth, HoleWidth, Iter)));\n        HoleWidth *= .1667; \n        Menger = max(max(max(Menger, -Hole.x), -Hole.y), -Hole.z);\n    }\n    \n    return Menger;\n}\n\nfloat Tracer(vec3 Origin, vec3 Ray)\n{\n    float t;\n    \n    for (int i=0; i<32; ++i)\n    {\n        float d = Map(Origin + Ray * t);\n        t += d;\n    }\n    \n    return t;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 p = (fragCoord.xy / iResolution.xy) * 2. - 1.;     \n    p.x *= iResolution.x/iResolution.y;     \n        \n    // Sound (see shadertoy.com/view/Xds3Rr)\n    float fft_BassDrum;\n    \n    for (int n = 0; n<10; n++)\n    {\n        fft_BassDrum += texelFetch(iChannel0, ivec2(n, 0), 0).x;\n    }\n    \n    fft_BassDrum /= 9.; //normalize\n    \n    vec3 Ray = normalize(vec3(p.xy, 2.));\n    vec3 Origin = vec3(0, 0, -6. - 5.2 * sin(iTime * .4));\n    \n    float TempSin = sin(iTime);\n    float TempCos = cos(iTime);\n    mat2 Rotation = mat2(TempCos, -TempSin, TempSin, TempCos);\n    \n    Ray.yz *= Rotation;\n    Ray.xy *= Rotation;\n    Origin.yz *= Rotation;\n    Origin.xy *= Rotation;\n       \n    float Temp = Tracer(Origin * fft_BassDrum, Ray * fft_BassDrum);    \n    fragColor = vec4(vec3(2. / (2. + Temp * Temp * .05)) * vec3(.8 + .2 * sin(iTime * .1), .8 + .2 * sin(iTime * 1.), .9 + .1 * cos(iTime * 1.)), 1.);\n}","name":"Image","description":"","type":"image"}]}