{"ver":"0.1","info":{"id":"4tGSDW","date":"1484362454","viewed":204,"name":"chainmail torus","username":"balkhan","description":"got inspired by this article : http://paulbourke.net/geometry/chainmail3d/","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","torus","chain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define I_MAX\t100\n#define E\t\t0.001\n\n/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n*/\n\nfloat\tsdTorus( vec3 p, vec2 t );\nvec4\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvec3\tcalcNormal(in vec3 pos, float e, vec3 dir);\nvec2\tuv;\n\nfloat\tt;\nvec3\tbase;\n\n//#define X_ROT\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    t = iTime/4.;\n    uv  = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n\tvec3\tdir = camera(uv);\n    vec4\tcol = vec4(0.0);\n    vec3\tpos = vec3(.0, .0, 20.0);\n\n    #ifdef X_ROT\n\t    dir.x *= dir.x * sin(1.* atan(1.-dir.z, 1.-dir.y) );\n\t#endif\n    \n    vec4\tinter = (march(pos, dir));\n\n    if (inter.y == 1.)\n\t{\n        /*\n\t\t* taken from here : https://www.shadertoy.com/view/XsB3Rm\n\t\t*/\n\t\tvec3\tv = pos+inter.w*dir;\n        vec3\tn = calcNormal(v, E, dir);\n        vec3\tev = normalize(v - pos);\n\t\tvec3\tref_ev = reflect(ev, n);\n        vec3\tlight_pos   = vec3(0.0, 0.0, 50.0);\n\t\tvec3\tlight_color = vec3(.3, .1, .0);\n        vec3\tvl = normalize(light_pos - v);\n\t\tfloat\tdiffuse  = max(0.0, dot(vl, n));\n\t\tfloat\tspecular = pow(max(0.0, dot(vl, ref_ev)), 42.);\n        col.xyz = light_color * (specular) + diffuse*base;\n    }\n   \tfragColor = col;\n}\n\nfloat\tscene(vec3 p)\n{\n    vec2\trot = vec2( cos(t), sin(t) );\n    p.xz *= mat2( rot.x, rot.y, -rot.y, rot.x );\n    float\tmind = 1e5;\n    float\ttmp;\n\n\tp.xy = mod((p.xy), 2.4)-1.2;\n    \n\ttmp = mind = sdTorus(p, vec2(.8, .2) );\n    base = vec3(.75, 0., 0.);\n    p.x += 1.2;\n    p.yz *= mat2(0.,1.,-1.,0. );\n    mind = min(mind, sdTorus(p, vec2(.8, .2) ) );\n    if (mind != tmp)\n        base = vec3(0., 0., .75);\n    p.x -= 2.4;\n    mind = min(mind, sdTorus(p, vec2(.8, .2) ) );\n    if (mind != tmp)\n        base = vec3(0., 0., .75);\n    tmp = mind;\n    p.x += 2.4;\n    p.yz *= mat2(0.,-1.,1.,0. );\n    p.x -= 1.2;\n    p.y += 1.2;\n    p.xz *= mat2(0.,1.,-1.,0. );\n    mind = min(mind, sdTorus(p, vec2(.8, .2) ) );\n    if (mind != tmp)\n        base = vec3(0., .75, 0.);\n    tmp = mind;\n    p.y -= 2.4;\n    mind = min(mind, sdTorus(p, vec2(.8, .2) ) );\n    if (mind != tmp)\n        base = vec3(0., .75, 0.);\n    return(mind);\n}\n\nvec4\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0);\n    vec3\tp = vec3(0.0);\n    vec4\tstep = vec4(0.0);\n\n    for (int i = -1; i < I_MAX; ++i)\n    {\n    \tp = pos + dir * dist.y;\n        dist.x = scene(p);\n        dist.y += dist.x;\n        if (dist.x < E )\n        {\n            step.y = 1.;\n            break;\n        }\n        step.x++;\n    }\n    step.w = dist.y;\n    return (step);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n\tvec2 q = vec2(length(p.xy)-t.x,p.z);\n\n    return length(q)-t.y;\n}\n\n//taken from an iq shader\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n\treturn normalize(vec3(\n           march(pos+eps.xyy, dir).w - march(pos-eps.xyy, dir).w,\n           march(pos+eps.yxy, dir).w - march(pos-eps.yxy, dir).w,\n           march(pos+eps.yyx, dir).w - march(pos-eps.yyx, dir).w ));\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float   fov = 1.;\n\tvec3    forw  = vec3(0.0, 0.0, -1.0);\n\tvec3    right = vec3(1.0, 0.0, 0.0);\n\tvec3    up    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x-.85) * right + (uv.y-0.5) * up + fov * forw));\n}\n\n","name":"Image","description":"","type":"image"}]}