{"ver":"0.1","info":{"id":"XdGXzm","date":"1463421455","viewed":736,"name":"Test multipass","username":"yasuo","description":"This is my first multipass shader attempt.\nHere is c++ based multipass shader sample.\nhttps://github.com/yasuohasegawa/OpenGL-Multipass-Shader-Sample","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 position = ( fragCoord.xy / iResolution.xy );\n    position.y += (sin((position.x + (iTime * 0.5)) * 6.0) * 0.1) + (sin((position.x + (iTime * 0.2)) * 6.0) * 0.01);\n    \n    float temp = 0.02;\n    float temp2 = 0.02;\n    temp *= sin(iTime*2.0)*2.0;\n    temp2 *= sin(iTime*2.0)*2.0;\n    vec4 col = \n        vec4\n        (\n       \t\ttexture(iChannel0, vec2(position.x+temp, position.y-temp)).r,\n            texture(iChannel0, vec2(position.x-temp2, position.y+temp2)).g,\n            texture(iChannel0, vec2(position.x-temp, position.y+temp)).b,\n            1.0\n        );\n    \n    fragColor = col+vec4(position,1.0,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    float time = iTime;\n    vec2 position = fragCoord.xy;\n    vec2 p = fract(position / 20.0);\n    float a = 0.7;\n    float b = 0.3;\n    float r = 0.27;\n    float delta = 500.0;\n    vec2 mov = vec2(r * cos(a * time*2.5),r * sin(b * time*2.5 + delta))+vec2(0.5);\n    float s = min(pow(length(position - mov * iResolution.xy) / 80.0-abs(sin(time)*0.2), 1.5), 0.45);\n    float d = smoothstep(s - 0.025, s + 0.025, 0.5 - length(p - vec2(0.5, 0.5)));\n    \n    vec2 mov2 = vec2(r * cos(a * time*1.0),r * sin(b * time*1.0 + delta))+vec2(0.5);\n    float s2 = min(pow(length(position - mov2 * iResolution.xy) / 50.0-abs(sin(time)*0.5), 1.5), 0.45);\n    float d2 = smoothstep(s2 - 0.025, s2 + 0.025, 0.5 - length(p - vec2(0.5, 0.5)));\n    \n    fragColor = vec4(d, d2, 0.0, 1.0 );\n}","name":"Buf A","description":"","type":"buffer"}]}