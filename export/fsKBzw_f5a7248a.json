{"ver":"0.1","info":{"id":"fsKBzw","date":"1657870955","viewed":593,"name":"Integer Hash - III - vec2→float","username":"FabriceNeyret2","description":"convenient trivial variant of IQ's https://www.shadertoy.com/view/4tXyWN  eating vec2.\nAny scalings and signing work. \n\nSee also vec3→vec3: https://www.shadertoy.com/view/NtjyWw","likes":15,"published":3,"flags":0,"usePreview":0,"tags":["2d","hash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Integer Hash - III\" by iq. https://shadertoy.com/view/4tXyWN\n\nfloat hash( vec2 f )\n{   uvec2 //x = vec2BitsToUvec2 uvec2( floatBitsToUint(f.x), floatBitsToUint(f.y) ),\n          x = floatBitsToUint(f),\n          q = 1103515245U * ( x>>1U ^ x.yx    );\n    return float( 1103515245U * (q.x ^ q.y>>3U) ) / float(0xffffffffU);\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = vec4( hash(U+iTime) );\n // O = vec4( hash(1e-5*(U+iTime)));  // histograms are ok whatever the scaling\n // O = vec4( hash(1e 5*(U+iTime)));\n}","name":"Image","description":"","type":"image"}]}