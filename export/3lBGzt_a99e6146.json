{"ver":"0.1","info":{"id":"3lBGzt","date":"1560621337","viewed":270,"name":"ChamferBox Super Primitive","username":"TLC123","description":"My goal was  a super primitive of a Chamfer Box that also take a secondary rounding parameter on the new edges. Sphere, Cuboid and Octahedron in one continuum.\nfinalized 2019 with function sdOctahedron( in vec3 p, in float s)// by Iq  ","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"ChamferBox\" by TLC123. https://shadertoy.com/view/ltdSzX\n// 2019-06-15 17:45:33\n// ChamferBox and map created by TLC123 \n// Everything else adapted from stuff Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n \n \n\nfloat sdOctahedron( in vec3 p, in float s)// by Iq 2019\n{\n    p = abs(p);\n    float m = p.x+p.y+p.z-s;\n    vec3 q;\n         if( 3.0*p.x < m ) q = p.xyz;\n    else if( 3.0*p.y < m ) q = p.yzx;\n    else if( 3.0*p.z < m ) q = p.zxy;\n    else return m*0.57735027;\n    \n    float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n    return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\n \n\n \n\n \n \n\n\tfloat ChamferBox(vec3 op, vec3 b, float ch, float r) {\nvec3 p=abs(op)+vec3(ch)+vec3( r);\n       p=max(vec3(0),p-b); \n\nfloat d =sdOctahedron(   p,   ch)\n           ;\n \n \n return d  -r ;\t\t}\n//----------------------------------------------------------------------\n\n \n\n//----------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{\n\n//a bunch of fudging  numbers to drive demo\n float vari=0.5;\n float pivot=.85;   \nvec3 box = 2.0*normalize( vec3 (  pivot + sin(48.2+iTime*0.783116+1.  )*vari ,pivot+sin(131.2+iTime*0.953116  )*vari ,pivot+sin(4.2+iTime*0.43 )*vari ));\n float mb= min(min(box.x,box.y),box.z);\n    \nfloat ch=   0.9* mb*( .5+sin(414.5+ 1.+iTime*0.53116  )*.450)  ;\n    float r=    mb*    ( (0.5+ cos(2.+iTime*0.261265)*.50)) ;\n\n    float d= ChamferBox(pos+ vec3(1.5,0.,1.5) , box ,ch/max(min(mb,1.0),ch+r),r/max(min(mb,1.),ch+r));\n \n    \n    \n  box = 2.*normalize( vec3 (pivot+sin(16.2+iTime*0.93116+1.  )*vari ,pivot+sin(311.2+iTime*0.953116  )*vari,pivot+sin(4.2+iTime*0.823116  )*vari ));\n \n  mb= min(min(box.x,box.y),box.z);      \n    ch=     0.9* mb*(.5+ sin(31.+iTime*0.73116  )*.450)  ;\n      r=        mb*  ( (0.5+ cos(2.3+iTime*0.3261265)*.50)) ;\n float  dd= ChamferBox(pos+ vec3(-1.5,0.,1.5) , box  ,ch/max(min(mb,1.0),ch+r),r/max(min(mb,1.),ch+r));\n \n    \n      d=min(d,dd);\n  box = 2.*normalize( vec3 (pivot+sin(34.2+iTime*0.973116+1.  )*vari,pivot+sin(234.2+iTime*0.7153116  )*vari ,pivot+sin(24.2+iTime*0.993116  )*vari ));\n \n    mb= min(min(box.x,box.y),box.z); \n       ch=    0.9*  mb*( .5+ sin(22.3+iTime*0.843116  )*.450)  ;\n      r=       mb*   ( (0.5+ cos(1.6+iTime*0.63261265)*.50)) ;\n      dd= ChamferBox(pos+ vec3(1.5,0.,-1.5) , box  , ch/max(min(mb,1.0),ch+r),r/max(min(mb,1.),ch+r));\n \n   \n    d=min(d,dd);\n  box =  2.*normalize(vec3 (pivot+sin(43.2+iTime*0.83116+1.  )*vari ,pivot+ sin(3.2+iTime*0.8253116  )*vari ,pivot+sin(14.2+iTime*0.763116  )*vari ));\n \n    mb= min(min(box.x,box.y),box.z);      \n     ch=   0.9* mb*( 0.5+ sin(10.3+iTime*0.8143116  )*.450)  ;\n      r=       mb*   ( (0.5+ cos(1.2+iTime*0.563261265)*.50)) ;\n      dd= ChamferBox(pos+ vec3(-1.5,0.,-1.5) ,box   ,ch/max(min(mb,1.0),ch+r),r/max(min(mb,1.),ch+r));\n \n    d=min(d,dd);\n\nreturn vec2(  d  ,25);\n }\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n    \n#if 0\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n\tfloat precis = 0.0002;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=-0; i<250; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x*0.2;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.3*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\t\t\n        if( m<1.5 )\n        {\n            \n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.4 + 0.1*f*vec3(1.0);\n        }\n\n        // lighitng        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.20*dif*vec3(1.00,0.85,0.55);\n\t\tlin += 1.20*spe*vec3(1.00,0.85,0.55)*dif;\n        lin += 0.20*amb*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*dom*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.002*t*t ) );\n\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\t\t \n\tfloat time = 15.0 + iTime;\n\n\t// camera\t\n\tvec3 ro = 1.2*vec3( -0.5+3.5*cos(1.6*time + 6.0*mo.x), 3.0 + 2.0*mo.y, 0.5 + 3.5*sin(1.6*time + 6.0*mo.x) );\n\tvec3 ta = vec3( -0.0, -0.0, 0. ) ;\n\t\n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n\tcol = pow( col, vec3(0.4545) );\n\n    fragColor=vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}