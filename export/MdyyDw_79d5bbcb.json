{"ver":"0.1","info":{"id":"MdyyDw","date":"1522209679","viewed":239,"name":"Spooky Newton","username":"Ebanflo","description":"Playing around with Newton's method. The fracture-like effect is caused by doing component-wise division instead of complex division on the first iteration. Mouse does stuff.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","newton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA 1\n#define zoom 2.0\n#define fractalIters 8\n//#define evenMoreFracture\nconst float pi = 4.0*atan(1.0);\n\nvec2 cinv(vec2 z){return vec2(z.x, -z.y)/dot(z, z);}\n\nvec2 csqr(vec2 z){return vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y);}\n\nvec2 ccube(vec2 z){\n    return vec2(z.x*z.x*z.x - 3.0*z.x*z.y*z.y, 3.0*z.x*z.x*z.y - z.y*z.y*z.y);\n}\n\nvec2 cmul(vec2 a, vec2 b){return vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);}\n\nvec2 m(float t){\n    return vec2(16.0*iMouse.x/iResolution.x, 2.0*sin(t)*sin(t)*sin(t)*sin(t) + 3.0*sin(0.245*t) + sin(1.234*t));\n}\n\nvec2 f(vec2 z){return ccube(z) - m(iTime) + vec2(4);}\n\n#ifdef evenMoreFracture\nvec2 df(vec2 z){\n    vec2 e = vec2(0.0001);\n    return 10000.0*(f(z + e) - f(z));\n}\n#else\nvec2 df(vec2 z){return 3.0*csqr(z);}\n#endif\n\nfloat newton(vec2 p){\n    vec2 z = p, z1 = z - f(z)/df(z);\n    vec2 d;\n    for(int i = 0; i < fractalIters; i++){\n        d = abs(z - z1);\n        if(d.x < 0.05 || d.y < 0.05) break;\n        z = z1;\n        z1 = z1 - cmul(f(z1), cinv(df(z1)));\n    }\n    return smoothstep(0.0, 0.95, length(d));\n}\n\nvec3 render(vec2 p){\n    vec2 coords = zoom*(2.0*p - iResolution.xy)/iResolution.y;\n    if(length(coords) < 0.1) return vec3(0);\n    float mo = iMouse.y/iResolution.y;\n    coords = cmul(coords, vec2(cos(mo), sin(mo)));\n    float t = 0.2*smoothstep(0.5, 3.0, length(coords));\n    coords = cmul(coords, vec2(cos(t), sin(t)));\n    return vec3(newton(coords))*smoothstep(0.1, 1.0, dot(coords, coords));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    \n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ ){\n        vec2 px = fragCoord + vec2(float(m),float(n))/float(AA);\n    \tcol += render(px);    \n    }\n    col /= float(AA*AA);\n#else\n    col = render(fragCoord);\n#endif\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}