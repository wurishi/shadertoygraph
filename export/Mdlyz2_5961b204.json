{"ver":"0.1","info":{"id":"Mdlyz2","date":"1489621882","viewed":94,"name":"Noise 3/9/2017","username":"Jops","description":"noise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\nfloat rand(vec2 uv)\n{\n    //return fract(sin(dot(uv, vec2(12.9898,78.233)))*10000.*iTime);\n\t//return fract(sin(dot(uv, iMouse.xy))*10000.);\n\t//return (fract(sin(dot(uv, vec2(12., 70.)))*100000.));\n    return (fract(sin(dot(uv, vec2(12., 70.)))*43758.5453123));\n}\n\n\n// Value noise\nfloat noise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) + \n            (c - a)* u.y * (1.0 - u.x) + \n            (d - b) * u.x * u.y;\n}\n\nfloat createPoly(int corners, vec2 uv, vec2 pos, float rotate)\n{\n    uv-=pos;\n    //pos.x *= ratio;\n// Number of sides of your shape\n\tint N = corners;\n\n// Angle and radius from the current pixel\n\tfloat a = atan(uv.x,uv.y)+PI + rotate;\n\tfloat r = TWO_PI/float(N);\n  \n// Shaping function that modulate the distance\n    float dist = cos(floor(.5+a/r)*r-a)*length(uv);\n    \n    return dist;\n}\n\nfloat createRectangle(vec2 uv, vec2 pos, vec2 size)\n{\n   \n    \n    float testH = step(pos.x, uv.x ) - step(pos.x + (size.x), uv.x );\n    float testV = step(pos.y, uv.y ) - step(pos.y + (size.y), uv.y );\n    \n    return testV * testH;\n}\n\nfloat createCircle(vec2 uv, vec2 pos, float rad)\n{\n    \n    float testV;\n    \n    testV = 1.-step(rad, distance(pos, uv));\n    //testV = 1.-step(rad, distance(pos, uv) + distance(uv, pos + vec2(0.05)));\n    \n   \t//testV = step(distance(pos, uv), rad);\n    //testV = step(distance(uv,pos), rad);\n  \t//testV = step(distance(uv, pos), rad);\n   \t//testV = step(distance(uv, pos) * distance(uv, pos), rad);\n    //testV += step(distance(uv, pos ) * distance(uv, pos), rad);\n    //testV = step(max(distance(uv,pos + vec2(0.6)), distance(uv, pos)), rad);\n\n\n      \n    //testV = fract(distance(uv,pos)) * (distance(uv, pos));\n    \n    return testV;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    uv.x *= ratio;\n    \n    vec2 pos = vec2(0.5 * ratio, 0.5);\n    float offset = noise(uv * 6. + iTime) * 0.06;\n    \n  \n    ////////////////////////////////////////////////////////////////////////////\n    //vec2 shapePos = vec2(.5*ratio, .5);\n    //float dist = distance(shapePos, uv)*2.;\n    \n    //uv -= shapePos;\n    //float angle = atan(uv.y, uv.x);\n    //float radius = cos(3.*angle);    \n    ////////////////////////////////////////////////////////////////////////////\n    float value;// = step(0.4 + offset, uv.x) - step(0.5 + offset, uv.x);\n    vec3 randc = vec3(uv * 0.2-0.9*sin(iTime), value) ;\n    //value = createRectangle(uv + offset, vec2(0.5 * ratio, 0.1), vec2(0.01, 0.6));\n    \n   \t//value += createRectangle(uv + offset, vec2(0.45 * ratio, 0.3), vec2(0.01, .5));\n    //value += createRectangle(uv + offset, vec2(0.55 * ratio, 0.3), vec2(0.01, .5));\n    \n    //value += createRectangle(uv + offset, vec2(0.3 * ratio, 0.7), vec2(0.1));\n    //value += createRectangle(uv + offset, vec2(0.355 * ratio, 0.8), vec2(0.1));\n    \n    //value += createRectangle(uv + offset, vec2(0.41 * ratio, 0.9), vec2(0.3,0.1));\n    \n    //value += createRectangle(uv + offset, vec2(0.63 * ratio, 0.7), vec2(0.1));\n    //value += createRectangle(uv + offset, vec2(0.578 * ratio, 0.8), vec2(0.1));\n    \n    //value += step(createPoly(4, uv + offset, vec2(0.88,0.8), 0.8), 0.1);\n    \n    //value += createRectangle(uv + offset, vec2(0.31 * ratio, 0.7), vec2(0.6,0.1));\n    \n  \t//value += step(createPoly(10, uv + offset, vec2(0.61,0.8), 0.8), 0.1);\n  \t//value += step(createPoly(10, uv + offset, vec2(0.68,0.9), 0.8), 0.1);\n    \n    //value += step(createPoly(10, uv + offset, vec2(1.12,0.8), 0.8), 0.1);\n  \t//value += step(createPoly(10, uv + offset, vec2(1.09,0.9), 0.8), 0.1);\n    //////////////////////////////////////////////////////////////////////////////////\n    //value *= fract(sin(uv.x * uv.y * 10000.)*100000.);\n    \n    float id = floor(uv.x*10.);\n    float r = rand(vec2(id));\n    \n    uv.y += r*2.5 * -iTime / 2. ;\n    uv.y = fract(uv.y);\n    \n    value = createCircle(uv + offset , vec2(0.5 *  ratio * abs(sin(iTime) + 1.0),      0.5), 0.1);\n    value += createCircle(uv + offset, vec2(0.5 * ratio * abs(sin(iTime -.11) + 1.0), 0.4), 0.1);\n    value += createCircle(uv + offset, vec2(0.5 * ratio * abs(sin(iTime - .22) + 1.0), 0.3), 0.1);\n    value += createCircle(uv + offset, vec2(0.5 * ratio * abs(sin(iTime - .33) + 1.0), 0.2), 0.1);\n    \n    value += createRectangle(uv + offset, vec2(0.4 * ratio * abs(sin(iTime) + 0.95), 0.5 ) , vec2(0.6, 0.01));\n    value += createRectangle(uv + offset, vec2(0.4 * ratio * abs(sin(iTime  -.11 ) + 0.95), 0.4 ) , vec2(0.6, 0.01));\n    value += createRectangle(uv + offset, vec2(0.4 * ratio * abs(sin(iTime  -.22) + 0.95), 0.3 ) , vec2(0.6, 0.01));\n    value += createRectangle(uv + offset, vec2(0.4 * ratio * abs(sin(iTime  -.33) + 0.95), 0.2 ) , vec2(0.6, 0.01));\n    \n    \n    //uv.y *= 3.;    \n    //vec2 tileIdx = floor(uv);\n   \t//uv = fract(uv);\n    //value = rand(tileIdx / iTime) * sin(5.*angle);\n    //value = rand(tileIdx ) * sin(5.*angle);\n    //value = rand(tileIdx);\n    \n    //value += step(0.4, uv.x ) - step(0.2+.3*.9 * r, uv.x)  ;\n    //value +=  createCircle(uv + offset , vec2(0.5 * ratio,      0.5 * r), 0.1);\n \t\n    \n    \n\t\n\tfragColor = vec4(vec3(value) ,1.0);\n}","name":"Image","description":"","type":"image"}]}