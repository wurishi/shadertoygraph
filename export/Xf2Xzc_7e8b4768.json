{"ver":"0.1","info":{"id":"Xf2Xzc","date":"1706637070","viewed":60,"name":"interactive mandelbrot","username":"userwer","description":"click and drag on the screen! centre of the screen is the mandelbrot set.\nmouse x is zoom\nmouse y varies initial point\nto do:\nnot use absolute value for the zoom since it gets 2 quick near the centre <done>\nfix centering for same zoom on any aspect ratio","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","interactive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float MAX_ITERATIONS = 100.0;\n\n//does the zn^2 + c\nvec2 julia(vec2 z, vec2 c)\n{\n    return vec2(z.x * z.x - z.y * z.y + c.x, 2.0 * z.x * z.y + c.y);\n}\n\n//return modulus of z\nfloat modulus(vec2 z)\n{\n    return sqrt(z.x * z.x + z.y * z.y);\n}\n\n//check if (f_c)^n (0) diverges, colour accordingly\n//the longer it took to diverge, the whiter the pixel\nvec4 iterateColor(vec2 z, vec2 c)\n{\n    vec2 seq = z;\n    for (float i = 0.0; i < MAX_ITERATIONS; i++)\n    {\n        if(modulus(seq) > 2.0)\n        {\n            return vec4(vec3(i/MAX_ITERATIONS), 1.0);\n        }\n        seq = julia(seq, c);\n    }\n    return vec4(vec3(0.0), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //reframe screen\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    uv -= 0.5;\n    \n    //this does the zooming stuff\n    //i got a fantastic \"smoothening\" of |x| from the numerics\n    //ppl on stackexchange (mickep)\n    //      a|x|^3\n    //    ----------        where a = 0.4\n    //     1 + ax^2\n    //i wanted the centre of the screen (roughly, i guess) to be the untouched mandelbrot\n    uv.xy *= 75.0/((0.4*pow(abs(iMouse.x - iResolution.x/2.0),3.0))/(1.0 + 0.4*pow(iMouse.x - iResolution.x/2.0, 2.0))+ max(iResolution.x*18.0/iResolution.y, iResolution.y*18.0/iResolution.x));\n    //uv.xy *= 75.0/(abs(iMouse.x - iResolution.x/2.0) + 27.0);\n    \n    uv.x -= 1.44;\n    \n    //normalized mouse coords for playing\n    vec2 nm = vec2(0.0);\n    nm.x = iMouse.x/iResolution.x;\n    nm.y = iMouse.y/iResolution.y;\n    nm -= 0.5;\n    nm *= 0.5;\n    nm.x *= iResolution.x/iResolution.y;\n    \n    //mouse input changes initial point, pixel is used for c value\n    //vec4 color = iterateColor(vec2((iMouse.x/iResolution.x - 0.5)*3.0, (\n        //iMouse.y/iResolution.y - 0.5)*3.0), uv);\n    vec4 color = iterateColor(vec2(nm.y*0.33*cos(0.3*iTime - 5.0),nm.y*1.8), uv);\n\n    //color screen\n    fragColor = vec4(color);\n}\n","name":"Image","description":"","type":"image"}]}