{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":1,"type":"texture","id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"channel":2,"type":"texture","id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"channel":3,"type":"texture","id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// First attempt at rendering fbm-modified cones using SDF's and Raymarching.\n// Raymarching and camera setup, SDF functions and transparent material shading \n// taken from Snail by Inigo Quilez (https://www.shadertoy.com/view/ld3Gz2).\n\n// Entry for Simon Dev's first shader competition.\n\n#define ZERO (min(iFrame,0))\n\n// https://iquilezles.org/articles/smin\nvec3 smax( vec3 a, vec3 b, float k )\n{\n    vec3 h = max(k-abs(a-b),0.0);\n    return max(a, b) + h*h*0.25/k;\n}\n\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat noise(vec3 v){\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat fbm(vec3 x, int octaves, float amplitude, float frequency, vec3 shift, float lacunarity, float gain) {\n    float value = 0.0;\n    for (int i = 0; i < octaves; ++i) {\n        float sn = noise(x * frequency);\n        value += amplitude * sn;\n        x += shift;\n        frequency *= lacunarity;\n        amplitude *= gain;\n    }\n    return value;\n}\n\nfloat fbm(vec3 uv, int octaves) {\n    return fbm(uv, octaves, 0.5, 1.0, vec3(8), 1.9, 0.6);\n}\n\n\nfloat sdfSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat sdCone( vec3 p, vec2 c, float h )\n{\n  // c is the sin/cos of the angle, h is height\n  // Alternatively pass q instead of (c,h),\n  // which is the point at the base in 2D\n  vec2 q = h*vec2(c.x/c.y,-1.0);\n\n  vec2 w = vec2( length(p.xz), p.y );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return sqrt(d)*sign(s) - .01;\n}\n\nfloat softMax(float a, float b, float k) {\n    return log(exp(k * a) + exp(k * b)) / k;\n}\n\nfloat softMin(float a, float b, float k) {\n    return -softMax(-a, -b, k);\n}\n\n\nfloat easeInExpo(float x) {\n    return x == 0. ? 0. : pow(2., 10. * x - 10.);\n}\n\nfloat sdIcicle(vec3 pos, vec3 iciclePos, float timeOffset, float noiseSample) {\n    pos.y = pos.y * -1.;\n    float dist = sdCone(pos - vec3(noiseSample * 0.04,-noiseSample * 0.3, noiseSample * 0.1) - iciclePos, vec2(0.08715574, 0.9961947), .9);\n\n    float t = mod(iTime * 0.2 + timeOffset, 1.);\n\n    float y = (1. - step(0.5, t) * t) * 2.;\n    float radius = (1. - step(0.5, t)) * .008 * t;\n    float k;\n    \n    \n    if (t > 0.5) {\n        y = mix(.1, 1., (t - 0.5) * 2.);\n        y = mix(0.07, 1., easeInExpo((t - 0.5) * 2.));\n        radius = 0.01;\n        k = 0.;\n    }\n    \n    \n    if (t <= 0.5) {\n        y = mix(0.05, 0.07, t * 2.);\n        radius = 0.01 * mix(0., 1., t * 2.);\n        k = 170. * mix(1., 0., t * 2.); \n    }\n    \n    y = mix(iciclePos.y, 1., easeInExpo(t * 1.5));\n\n    dist = softMin(dist, sdfSphere(pos - vec3(iciclePos.xy + vec2(0., y), iciclePos.z), radius), k + 40.03);\n\n    return dist;\n}\n\nfloat map(vec3 pos) {\n\n    float noiseSample = fbm(pos, 7) * 0.7;\n\n    float dist =     sdIcicle(pos, vec3(-0.25, -0.05,  0.9), 0.7, noiseSample);\n    dist = min(dist, sdIcicle(pos, vec3(-1.20, -0.1,  0.7), 0.4, noiseSample));\n    dist = min(dist, sdIcicle(pos, vec3(-0.7, -0.2,  1.0), 0.1, noiseSample));\n    dist = min(dist, sdIcicle(pos, vec3(0., -0.3,  0.8), 0.6, noiseSample));\n    \n    dist = min(dist, sdIcicle(pos, vec3(-1., -0.3,  0.0), 0.9, noiseSample));\n    dist = min(dist, sdIcicle(pos, vec3(-0.2, -0.4,  0.2), 0.3, noiseSample));\n    \n    return dist;\n}\n\nfloat text1( in vec2 p )\n{\n    return textureLod( iChannel1, p, 0.0 ).x;\n}\n\n\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormalTransparent( in vec3 pos, in float eps )\n{\n    vec4 kk;\n    vec2 e = vec2(1.0,-1.0)*0.5773*eps;\n    return normalize( e.xyy*map( pos + e.xyy ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ) );\n}\n\nvec2 dirToEquirectUV(in vec3 dir) {\n    float u = atan(dir.z, dir.x) / (2.0 * 3.14159265358979323846264) + 0.5;\n    float v = asin(dir.y) / 3.14159265358979323846264 + 0.5;\n    return vec2(u,v);\n}\n\nvec3 sampleBackground (vec2 pos, float bias) {\n    return texture(iChannel2, pos, bias).zyx;\n\n}\n\nvec3 sampleBackground (vec3 dir, float bias) {\n\n    vec2 uv = dirToEquirectUV(normalize(dir));\n    return texture(iChannel2, uv).zyx;\n\n}\n\nconst vec3 sunDir = normalize( vec3(0.2,0.1,0.02) );\n\nvec3 shadeTransparent( in vec3 ro, in vec3 rd, in float t, in float m, in vec4 matInfo, in vec3 col, in float depth )\n{\n    vec3 oriCol = col;\n    \n    float dz = depth - t;\n    float ao = clamp(dz*50.0,0.0,1.0);\n    vec3  pos = ro + t*rd;\n    vec3  nor = calcNormalTransparent( pos, 0.002 );\n    float fre = clamp( 1.0 + dot( rd, nor ), 0.0, 1.0 );\n    vec3  hal = normalize( sunDir-rd );\n    vec3  ref = reflect( -rd, nor );\n    float spe1 = clamp( dot(nor,hal), 0.0, 1.0 );\n    float spe2 = clamp( dot(ref,sunDir), 0.0, 1.0 );\n\n    float ds = 1.6 - col.y;\n    \n\n    float eta = 10.33;\n    \n    vec3 refractDir1 = refract(rd, nor, 1.0/eta);\n    vec3 refractedColor = sampleBackground(refractDir1, 4.);\n\n    col = refractedColor;\n    \n    col *= mix( vec3(0.0,0.0,0.0), vec3(0.8,0.8,0.9), ao );\n\n    col += ds*1.5*vec3(1.0,0.9,0.8)*pow( spe1, 80.0 );\n    col += ds*0.2*vec3(0.9,1.0,1.0)*smoothstep(0.4,0.8,fre);\n    col += ds*1.3*vec3(0.6,0.7,1.0)*smoothstep( -0.5, 0.5, -reflect( rd, nor ).y )*smoothstep(0.2,0.4,fre);    \n    col += ds*0.5*vec3(1.0,0.9,0.8)*pow( spe2, 80.0 );\n    col += ds*0.5*vec3(1.0,0.9,0.8)*pow( spe2, 16.0 );\n    col += vec3(0.8,1.0,0.8)*0.5*smoothstep(0.3,0.6,text1( 0.8*nor.xy ))*(0.1+0.9*fre*fre);\n    \n    // hide aliasing a bit\n    return mix( col, oriCol, smoothstep(0.6,1.0,fre) ); \n}\n\nvec2 intersectTransparent( in vec3 ro, in vec3 rd, const float mindist, const float maxdist, out vec4 matInfo )\n{\n    vec2 res = vec2(-1.0);\n    \n    float t = mindist;\n    for( int i=ZERO; i<30; i++ )\n    {\n        vec3 p = ro + t*rd;\n        vec2 h = vec2(map( p ), 4.);\n        res = vec2(t,h.y);\n\n        if( h.x<(0.001*t) ||  t>maxdist ) break;\n        \n        t += h.x;\n    }\n\treturn res;\n}\n\nvec3 background( in vec3 d )\n{\n    // cheap cubemap\n    vec3 n = abs(d);\n    vec2 uv = (n.x>n.y && n.x>n.z) ? d.yz/d.x: \n              (n.y>n.x && n.y>n.z) ? d.zx/d.y:\n                                     d.xy/d.z;\n    // fancy blur\n    vec3  col = vec3( 0.0 );\n    for( int i=ZERO; i<100; i++ )\n    {\n        float h = float(i)/200.0;\n        float an = 31.0*6.2831*h;\n        vec2  of = vec2( cos(an), sin(an) ) * h;\n\n        vec3 tmp = sampleBackground(vec2(uv.x, 1.-uv.y)*.15 + 0.0075*of, 4.);\n        col = smax( col, tmp, 0.5 );\n    }\n    \n    return pow(col,vec3(5.5,5.0,2.0))*.6;\n}\n\nvec3 render( in vec3 ro, in vec3 rd, in vec2 q )\n{\n    //-----------------------------\n\n    vec3 col = background( rd );\n    \n    //-----------------------------\n    \n    float mindist = 1.0;\n    float maxdist = 4.0;\n\n    vec4 matInfo;\n    \n\n    //-----------------------------\n    \n    vec2 tm = intersectTransparent( ro, rd, mindist, maxdist, matInfo );\n    if( tm.y>-0.5 && tm.x < maxdist )\n    {\n        col = shadeTransparent( ro, rd, tm.x, tm.y, matInfo, col, maxdist );\n    }\n\n    //-----------------------------\n    \n    float sun = clamp(dot(rd,sunDir),0.0,1.0);\n    col += 1.0*vec3(1.5,0.8,0.7)*pow(sun,4.0);\n\n    //-----------------------------\n\n    col = pow( col, vec3(0.45) );\n    \n    col = vec3(1.05,1.0,1.0)*col*(0.7+0.3*col*max(3.0-2.0*col,0.0)) + vec3(0.0,0.0,0.04);\n\n    col *= 0.3 + 0.7*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.1);\n\n    return clamp( col, 0.0, 1.0 );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 rt )\n{\n    vec3 w = normalize(ro-rt);\n    float m = sqrt(1.0-w.y*w.y);\n    return mat3( w.z,     0.0, -w.x, \n                 0.0,     m*m, -w.z*w.y,\n                 w.x*m, w.y*m,  w.z*m );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    vec2  p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2  q = fragCoord/iResolution.xy;\n    float an = 1.87 - 0.04*(1.0-cos(0.5*iTime));\n\n    vec3  ro = vec3(-0.4,0.2,0.0) + 2.2*vec3(cos(an),0.0,sin(an));\n    vec3  ta = vec3(-0.6,0.2,0.0);\n    mat3  ca = setCamera( ro, ta );\n    vec3  rd = normalize( ca * vec3(p,-2.8) );\n\n    vec3 col = render( ro, rd, q );\n\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MX3cRM","date":"1734858946","viewed":602,"name":"Icicles","username":"BarberDucky","description":"First attempt at rendering fbm-modified cones using raymarching.\nRaymarching and camera setup, SDF functions and transparent material shading taken from [url=https://www.shadertoy.com/view/ld3Gz2]Snail by Inigo Quilez[/url].","likes":33,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","noise","sdf","fbm","winter","icicles"],"hasliked":0,"parentid":"ld3Gz2","parentname":"Snail"}}