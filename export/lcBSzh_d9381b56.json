{"ver":"0.1","info":{"id":"lcBSzh","date":"1706019973","viewed":134,"name":"Sparkly Britney 2","username":"spalmer","description":"Select and press play on video in Buffer A iChannel0!\ntrying Fabrice's gpmipmap gamma / weighting tricks applied to the screenspace sparkle glints problem.\n","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["bokeh","highlight","sparkle","glint","minmax","gpmipmap"],"hasliked":0,"parentid":"dlSyDc","parentname":"invmin/invmax for free"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// trying FabriceNeyret2's gpmipmap minmax \n// gamma tricks from http://shadertoy.com/view/dlSyDc\n// on the sparkle glint problem\n// more robust CubeMap based variant here: http://shadertoy.com/view/Dl2yDc\n// inspired from http://shadertoy.com/view/3sKGWy which is superb and simpler\n// trying to improve upon Sparkly Britney http://shadertoy.com/view/ct3fDs\n\nfloat LOD = 7.;                                         // less for local extremas\n\n// FraglessPlayer http://shadertoy.com/view/4tyfWy  awesomeness\nfloat cheap_star(vec2 q, float anim)\n{\n    q = abs(q);\n    vec2 r = min(q / q.yx, anim);\n    float p = (2. - r.x - r.y);\n    return (2. + p * (p * p - 1.5)) / (q.x + q.y);      \n}\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    O = texture(iChannel0, U/R).xxxw;                   // source image + resol\n    // TODO need another temp variable here, modifying O destroys hi-res video output\n    //O.g = textureLod(iChannel0, U/R, 2.).x;             // bloom color a bit\n    //O.g = max(O.g * 1.7 - .7, 0.);                      // threshold\n    // TODO perhaps multiple LODs?\n    int  l = int(max(0.,LOD+log2(R.y/O.w)));            // select lod\n    float ss; // sprite shape\n    // scan neighbor tiles for sprites that might overlap into our tile\n    for (int i = 9; i-- > 0; ) {\n        vec2 u = U;\n        u += vec2((ivec2(i % 3, i / 3) - 1) << l);\n        vec4 Q = O;\n        Q = textureLod(iChannel0, u / R, float(l)).xxxw;       // brightness for this tile\n        //Q.rgb = pow(Q.rgb, vec3(POW));\n        //Q.rgb = pow(Q.rgb, vec3(8.));\n        Q.rgb = max(Q.rgb * 1.7 - .7, 0.); // threshold tuning glint brightness\n        // TODO solve this mipmap problem\n        ivec2 texsize = textureSize(iChannel1, 0),\n            mipsize = textureSize(iChannel1, l), // trying to solve non-pow-2 Buffer mip problem\n            texel = ivec2(u);\n        texel -= texsize >> 1;\n        texel >>= l;\n        texel += mipsize >> 1;\n        texel = clamp(texel, ivec2(0), mipsize-1);\n        vec4 M = texelFetch(iChannel1, texel, l);         // fetch partial sum\n        //vec4 M = textureLod(iChannel1, u / R, float(l));    // fetch partial sum - TODO should be easier this way but damn bilinear filtering mixes w neighbor tiles, must struggle against the filtering\n        //O += M.xyww;                                      // (for debug)\n        M /= M.z;                                           // normalize position with weight : should show ~invmin\n        float s; // sprite shape for this tile\n        //s = smoothstep(11.5, 10., length(M.xy - U) + 10. * (1. - O.g)); // dot\n        vec2 W; // = M.xy; \n        //W = .5 * exp2(float(l)) * sin(vec2(texel) * vec2(17.1, 13.9) * vec2(2 - texel.yx) + 3.*iTime)\n        //    + (vec2(texel) + .5) * exp2(float(l)); // << l);// / vec2(mipsize - 1); // * exp2(-float(l));\n        //float dd = dot(M.xy - W, M.xy - W) / R.y / R.y;\n        // seems should involve Q here somehow TODO\n        float bright = O.g; // 1./(1. + exp2(15.)*dd); //Q\n        W = M.xy;\n        s = cheap_star((W - U) * 128. / R.y / max(.001, bright), .991);\n        //if (i == 5) // just center sample\n        ss = max(ss, s);\n    }\n    // otherwise consider fade out sprites near tile borders\n    O = mix(.1*O, vec4(1,.9,.4,1), ss); // draw sprite\n\n    O = pow(O, vec4(1./2.2));                           // sRGBish OETF\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// select source video on iChannel0 below and press play\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    U -= .5*R;\n    U = .5 * U / R.y * R.x / iChannelResolution[0].x + .5;\n    O.x = pow(length(texture(iChannel0, U).rb) , 4.);\n    if (abs(U.x - .5) > .5) O.x = 0.9;\n    O.w = iChannelResolution[0].y;                  // source resolution\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define POW 8.\n// the larger the better min/max, but more bigfloats precision issues\n\n#define R  iResolution.xy\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 O, vec2 U)\n{\n    float w = pow(texture(iChannel0, U/R).x,  POW);  // this approximates MAX. then apply pow(LODmax,  1/POW)\n \n    O.xy = U*w;                                         // weighted location\n    O.z  = w;                                           // weight\n}","name":"Buffer B","description":"","type":"buffer"}]}