{"ver":"0.1","info":{"id":"Wdlyzn","date":"1584009104","viewed":264,"name":"dot matrix spiral","username":"HaleyHalcyon","description":"a","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["a"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265;\nconst float PI_3 = PI / 3.0;\n\nfloat fn1(float x)\n{\n    return sin(x) * 0.5 + 0.5;\n}\n\nfloat fn2(float x)\n{\n    return 2. * sin(x) + x;\n}\n\nfloat dots(vec2 uv, vec2 center)\n{\n    vec2 xy = uv - center;\n    return sqrt(xy.x * xy.x + xy.y * xy.y);\n}\n\nvec3 hueToCol(float hue)\n{\n    return vec3(\n\t    abs(sin(hue)),\n        abs(sin(hue + PI_3)),\n        abs(sin(hue - PI_3))\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float speed = 4.;\n    float hue = PI * fract(iTime / 2.);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    float scale = min(iResolution.x, iResolution.y);\n    vec2 uv = (2. * fragCoord.xy - iResolution.xy) / scale;\n    uv *= 10.0;\n    vec2 rUV = round(uv) + vec2(0.5, 0.5);\n    \n    //float distance = length(uv);\n    //float distance = pow(sqrt(uv.x*uv.x+uv.y*uv.y), 1./3.);\n    float dist = log(length(rUV) + 0.5);\n    float angle = atan(rUV.y, rUV.x);\n    \n    vec3 colSpi = hueToCol(hue);\n    vec3 colAdd = hueToCol(hue + PI_3) - colSpi;\n    \n    // Time varying pixel color\n    float ring = 0.65 + 0.25 * sin(dist * 3.0 - angle * 1.0 + fn2(iTime * 2.0 * PI) + PI);\n    //float dots = clamp((ring * 0.6 - dots(uv + vec2(0.5, 0.5), rUV)) * 8.8, 0.0, 1.0);\n    float dots = step(0.5, (ring * 0.6 - dots(uv + vec2(0.5, 0.5), rUV)) * 8.8);\n    float spiral = fn1(dist * -4.0 + angle * -1.0 + iTime * speed * -1.5 + PI);\n\n    // Output to screen\n    fragColor = vec4(\n        dots * (spiral * colAdd + colSpi)\n      , 1);\n}","name":"Image","description":"","type":"image"}]}