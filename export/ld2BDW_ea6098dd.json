{"ver":"0.1","info":{"id":"ld2BDW","date":"1500501167","viewed":177,"name":"Chromatophore Britney","username":"mmerchante","description":"A simple experiment inspired by chromatophores. No optimization, just lookdev.","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["2d","video","chromatophores"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define saturate(x) clamp(x, 0.0, 1.0)\n\nvec3 rgb2hsv(vec3 rgb)\n{\n\tfloat Cmax = max(rgb.r, max(rgb.g, rgb.b));\n\tfloat Cmin = min(rgb.r, min(rgb.g, rgb.b));\n    float delta = Cmax - Cmin;\n\n\tvec3 hsv = vec3(0., 0., Cmax);\n\t\n\tif (Cmax > Cmin)\n\t{\n\t\thsv.y = delta / Cmax;\n\n\t\tif (rgb.r == Cmax)\n\t\t\thsv.x = (rgb.g - rgb.b) / delta;\n\t\telse\n\t\t{\n\t\t\tif (rgb.g == Cmax)\n\t\t\t\thsv.x = 2. + (rgb.b - rgb.r) / delta;\n\t\t\telse\n\t\t\t\thsv.x = 4. + (rgb.r - rgb.g) / delta;\n\t\t}\n\t\thsv.x = fract(hsv.x / 6.);\n\t}\n\treturn hsv;\n}\n\nfloat chromaKey(vec3 color)\n{\n\tvec3 backgroundColor = vec3(0.157, 0.576, 0.129);\n\tvec3 weights = vec3(4., 1., 2.);\n\n\tvec3 hsv = rgb2hsv(color);\n\tvec3 target = rgb2hsv(backgroundColor);\n\tfloat dist = length(weights * (target - hsv));\n\treturn 1. - clamp(3. * dist - 1.5, 0., 1.);\n}\n\nvec2 hash2( vec2 p ) \n{\n    const vec2 k = vec2( 0.3183099, 0.23678794 );\n    p = p*k + k.yx;\n    return fract( 13.0 * k * fract(p.x*p.y*(p.x+p.y)));\n}\n\nfloat worleyDistance(vec2 p, vec2 c, float scale)\n{\n    vec2 uv = p / scale;\n    \n    float r = texture(iChannel1, vec2(iTime, 0.0) * .05 + uv * vec2(.3, 1.0)).r;\n    r *= texture(iChannel1, vec2(r * .5) + uv).r;\n    \n    vec3 britney = texture(iChannel0, c * vec2(1.0, 2.0) / scale).rgb;\n    float key = length(1.0 - chromaKey(britney));\n    r += length(britney) * key * .65 + key * .2;\n    \n    r *= .6;\n    r = max(r, .0001);\n    \n    return length(p - c) / r;\n}\n\nvec3 worley(vec2 uv, float scale)\n{\n    vec2 p = floor(uv * scale);\n    \n    vec2 p1 = p + vec2(0.0, 0.0);\n    p1 += hash2(p) * .5;\n    \n    vec2 p2 = p + vec2(1.0, 0.0);\n    p2 += hash2(p2) * .5;\n    \n    vec2 p3 = p + vec2(1.0, 1.0);\n    p3 += hash2(p3) * .5;\n    \n    vec2 p4 = p + vec2(0.0, 1.0);\n    p4 += hash2(p4) * .5;\n\n    vec2 p5 = p + vec2(-1.0, 0.0);\n    p5 += hash2(p5) * .5;\n    \n    vec2 p6 = p + vec2(-1.0, -1.0);\n    p6 += hash2(p6) * .5;\n    \n    vec2 p7 = p + vec2(0.0, -1.0);\n    p7 += hash2(p7) * .5;\n    \n    vec2 p8 = p + vec2(-1.0, 1.0);\n    p8 += hash2(p8) * .5;\n    \n    vec2 p9 = p + vec2(1.0, -1.0);\n    p9 += hash2(p9) * .5;\n    \n    p = uv * scale;\n    \n    float d1 = worleyDistance(p, p1, scale);\n    float d2 = worleyDistance(p, p2, scale);\n    float d3 = worleyDistance(p, p3, scale);\n    float d4 = worleyDistance(p, p4, scale);\n    float d5 = worleyDistance(p, p5, scale);\n    float d6 = worleyDistance(p, p6, scale);\n    float d7 = worleyDistance(p, p7, scale);\n    float d8 = worleyDistance(p, p8, scale);\n    float d9 = worleyDistance(p, p9, scale);\n    \n    float d = d1;\n    d = min(d, d2);\n    d = min(d, d3);\n    d = min(d, d4);\n    d = min(d, d5);\n    d = min(d, d6);\n    d = min(d, d7);\n    d = min(d, d8);\n    d = min(d, d9);\n    \n    vec2 closest = p1;    \n    closest = mix(closest, p2, step(abs(d - d2), 0.0));\n    closest = mix(closest, p3, step(abs(d - d3), 0.0));\n    closest = mix(closest, p4, step(abs(d - d4), 0.0));\n    closest = mix(closest, p5, step(abs(d - d5), 0.0));    \n    closest = mix(closest, p6, step(abs(d - d6), 0.0));\n    closest = mix(closest, p7, step(abs(d - d7), 0.0));\n    closest = mix(closest, p8, step(abs(d - d8), 0.0));\n    closest = mix(closest, p9, step(abs(d - d9), 0.0));\n    \n    return vec3(1. - d, closest);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.x;\n    \n    float scale = 50.0;\n    float d = worley(uv, scale).r;\n    fragColor = vec4(1.0 - step(.0, d));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 video = texture(iChannel1, uv).xyz;\n    vec3 buffer = texture(iChannel0, uv).xyz;\n    \n    fragColor = vec4(mix(video, buffer, .9),1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}