{"ver":"0.1","info":{"id":"McBczR","date":"1721836796","viewed":52,"name":"[ARTS1308] Audio visualizer","username":"ARTS1308","description":"Probably simplest audio visualizer, demonstrating both music sample and FFT.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["oscilloscope","sound","audio"],"hasliked":0,"parentid":"wltcRn","parentname":"Simple audio visualization"},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Thanks for the comments from FabriceNeyret2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float amp1 = texture(iChannel0, vec2(uv.x, .75)).r - 2.*uv.y + 1.;\n    //col += smoothstep(3./iResolution.y, 0., abs(amp1));\n    col += smoothstep(1.5, 0., abs(amp1)/fwidth(amp1));\n    \n    float amp0 = texture(iChannel0, vec2(uv.x, .25)).r - 2.*uv.y;\n    col += step(0., amp0);\n     \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}