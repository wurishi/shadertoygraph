{"ver":"0.1","info":{"id":"dlXcDj","date":"1691173799","viewed":149,"name":"GLSL Fractals","username":"notmysql","description":"a fractal","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Base completed ShaderToy program for a Hack Club Jam\n// https://code-jams.hackclub.dev/jam/glsl-shaders\n// Remember to RECOMPILE and PRESS PLAY\n\n// Go to https://www.shadertoy.com/view/clfcRs to see a COMPLETED project\n\n\n// Squares a given complex number\nvec2 cSquare( in vec2 z ) \n{\n    return vec2(\n            z.x * z.x - z.y * z.y,\n            2.0 * z.x * z.y\n        );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 c = fragCoord/iResolution.x;\n    \n    // Scale [lower is more zoomed in]\n    float scale = 4.0;\n    \n    c *= scale;\n    \n    // Move set into view\n    c += vec2(-2.7,-1.1);\n    \n    // Maximum number of iterations\n    int maxIterations = 256;\n\n\t// Starting point\n\tvec2 Z = vec2(0,0);\n    \n    for(int i = 0; i < maxIterations; i++)\n    {\n        vec2 oldZ = Z;\n        Z = cSquare(oldZ) + c;\n        \n        if(dot(Z, Z) > 20.0) {\n            // Normalize i for brightness\n            float brightness = (float(i) - log2(log2(dot(Z,Z))) + 4.0) / float(maxIterations);\n            \n            // multipliers for ( R   G   B ) values\n            vec3 weights = vec3(15.0, 5.0, 4.0);\n            \n            fragColor = vec4(vec3(brightness) * weights, 1.0);\n            break;\n        } else {\n            fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}