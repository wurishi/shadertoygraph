{"ver":"0.1","info":{"id":"DtSyRW","date":"1691505590","viewed":231,"name":"traffic: slow lane car illusion ","username":"FabriceNeyret2","description":"About the illusion that more people are passing us in the other lane during traffic jam.\nSPACE: switch referential\nmouse.x: % duration in jam \nmouse.y: % speed in jam","likes":17,"published":3,"flags":16,"usePreview":0,"tags":["illusion","inverse","perception","loopless","smoothfloor","file","trafficjam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// drawing on https://shadertoy.com/view/DssfzS\n\nfloat d, h ; //  1.-d, h = width,height of spline part \n\n#define curve(x) ( f = clamp( ( fract(x) - d/2. ) / (1.-d), 0.,1.),  \\\n                   floor(x) + mix( fract(x), f*f*(3.-2.*f), h )  )\n\nfloat invcurve(float y) {\n                                    // --- inverse spline cf https://www.shadertoy.com/view/clXyWj ------\n   float a,b,c,k,l,A,R3=sqrt(3.),x; //                    with slope: https://www.shadertoy.com/view/DlByz1\n    y = fract(y);\n    if      ( y <    (1.-h)*d/2. ) x =     y/(1.-h);         // flat parts\n    else if ( y > 1.-(1.-h)*d/2. ) x = (y-h)/(1.-h);\n    else {                                                   // spline+slope part\n     // solve spline+kx: https://www.wolframalpha.com/input?i=solve%28y%3Dx*x*%283-2*x%29%2Bax%2C+x%29\n        y = ( y - (1.-h)/2.*d ) / (1.- (1.-h)*d );   \n        y /= h; \n        k = (1.-h) / h , \n        a = k+1.-2.*y, c = 2./3.*k+1., b = sqrt(c*c*c-a*a), A = atan(b,a)/3.,\n        x = sqrt(c)/2. * ( - cos(A) + R3*sin(A) )  + .5;\n        x = x*(1.-d) + d/2.;                                 // remaps for d\n    }\n    return x;\n}\n\n#define S(v) smoothstep( 1.5*s/R.y, 0., length(v) - 2.5*s/R.y )\n#define key(a)    ( texelFetch(iChannel3,ivec2(a,2),0).x > 0.)\n\nvoid mainImage( out vec4 O, vec2 u ) // ============================================\n{\n    float n = 21.,                   // number of dots per cycle\n          s = .25;                   //Â figure scaling\n    bool  m = // length(iMouse.xy)>10., \n                 iMouse.z>0.,\n          v = key(32);\n    if (v) s = .5;\n    vec2  R = iResolution.xy,\n          U = s*( 2.*u - R ) / R.y, \n          M = iMouse.xy/R;\n    d = m ? M.x : .6,                // 1.-d = width of spline part \n    h = m ? 1.-M.y : .7,             // h = height of spline part \n    \n    O *= 0.;                    // --- direct slope-spline ( red dots as guide ) ------------\n    // base smooth floor (no slope ) : https://www.desmos.com/calculator/srnrjrphqu\n    float t = 2.*iTime, x,f,y,Y;\n    if (!v)  \n            O.g += S( (U-vec2(-.1,0))/3. ), // draw my car\n            U.y += curve(t/n);              // first person view\n    else    O.g += S( (U-vec2(-.1,curve(fract(t/n+.5)-.5)))/3. ); // draw my car\n    \n    if (abs(U.x)<.005) f = sin(62.*U.y), O += f / fwidth(f); // --- scenary around cars\n    if (abs(U.x)>.2) O   += texture(iChannel0,U);\n                else O.b += texture(iChannel1,U).x*1.3;\n\n    x = invcurve(U.y);  Y = floor(U.y);  // --- param x = inv-spline(y)         \n    x = round(x*n-t)/n +t/n,        // --- after inverse-map, draw geen dots from it\n    y = curve(x);    \n    O.g += S(U-vec2(-.1 ,y+Y));                             // drawgreen vertical dots\n // O.g += S(U-vec2(x+Y,y+Y));                              // debug: draw time curve\n\n    U.y -= .5;                           // red dots\n    x = invcurve(U.y);  Y = floor(U.y);           \n    x = round(x*n-t)/n +t/n,  \n    y = curve(x);\n    O.r += S(U-vec2(.1 ,y+Y));                              // draw red vertical dots\n}\n","name":"Image","description":"","type":"image"}]}