{"ver":"0.1","info":{"id":"wsScRd","date":"1587154694","viewed":201,"name":"Space Worms","username":"julianlumia","description":"SPACE SNAAKEEEESS or worms.. , Made this while listening to a Klaus Schulze album. Seemed fitting:)","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["snake"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define T(uv) texture(iChannel0,uv)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy);\n\n    \n    float f = length(uv  - 0.5);\n    fragColor.x = T(uv + f*0.003).x;\n    fragColor.y = T(uv -f*0.002).y;\n    fragColor.z = T(uv-f*0.002).z;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n#define pmod(p, x) mod(p, x) - 0.5*x\n#define lmod(d, x) (mod(d,x)/x - 0.5)\n#define pi acos(-1.)\n#define tau (2.*pi)\n#define MAX_STEPS 64\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nvec2 condmin(in vec2 d1, in vec2 d2) {\nreturn vec2(min(d1.x, d2.x), mix(d1.y, d2.y, step(d2.x, d1.x)));\n}\n\nfloat sdOctahedron( vec3 p, float s)\n{\n p = abs(p);\n return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nmat2 Rot(float a) {\n float s = sin(a);\n float c = cos(a);\n return mat2(c, -s, s, c);\n}\n\n\n\nfloat displacement(vec3 p, float scale)\n{\n    return sin(scale*p.x)*sin(scale*p.y)*sin(scale*p.z);\n}\n\n\nfloat smin( float a, float b, float k ) {\n float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdSphere(vec3 p, float s)\n{\n return length(p) - s;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n p = abs(p)-s;\n return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat g1;\nfloat g2;\nfloat g3;\nfloat g4;\nfloat g5;\n\nmat3 rotate( in vec3 v, in float angle)\n{\n\tfloat c = cos(radians(angle));\n\tfloat s = sin(radians(angle));\n\t\n\treturn mat3(c + (1.0 - c) * v.x * v.x, (1.0 - c) * v.x * v.y - s * v.z, (1.0 - c) * v.x * v.z + s * v.y,\n\t\t(1.0 - c) * v.x * v.y + s * v.z, c + (1.0 - c) * v.y * v.y, (1.0 - c) * v.y * v.z - s * v.x,\n\t\t(1.0 - c) * v.x * v.z - s * v.y, (1.0 - c) * v.y * v.z + s * v.x, c + (1.0 - c) * v.z * v.z\n\t\t);\n}\n\nconst float PI = 3.14159265;\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\n\nvec3 p7;\n\nvec2 path(float z){\n    float x = sin(z) + 5.0 * cos(z * 0.5) - 1.5 * sin(z * 0.12345);\n    float y = cos(z) + 0.5 * sin(z * 1.3) + .2 * cos(z * 2.12345);\n    return vec2(x,y);\n}\nmat2 E;\n\nvec3 spherepos;\nvec2 GetDist(vec3 p) {\n       float r = 3.14159*sin(p.z*0.005);//+cos(T*0.025*1.);\n    E = mat2(cos(r), sin(r), -sin(r), cos(r));\n//        p.xy*= E;  \n             float the =sin((p.z*.1-iTime *.2));\n\n//   p.xy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n vec2 o = path(p.z) / 5.0;\n p = vec3(p.x,p.y,p.z)-vec3(o.x,o.y,0.);  \n            the =sin((p.z*.001-iTime *.01));\n\n   p.xy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n vec3 o5 = p;\n float gap =4.;\n p.z = mod(p.z + gap,2.0 * gap) - gap; \n vec2 d;\n       p.xy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n\n d = vec2((p.y) +9.75,5);\n// vec3 size3 = vec3(3.3,3.5,3.5);\n// vec3 pos = vec3(0,0.,.0);\n vec3 p4 = p;\n p4 -=vec3(-0.,13.5,-4.0);\n//  the = iTime *.5;\n// the = sin(p4.y+iTime);\n// p4.zx *= -mat2(cos(the), -sin(the), sin(the), cos(the));\n vec2 box11 = vec2((sdBox(p4, vec3(4.5,2,10))),5.);\n// vec3 p6 = p-vec3(-0,-2.,.5);\n// vec2 box12 = vec2((sdBox(p6, vec3(.1,.5,.1))),5.);\n vec3 p2 = p;   \n p7 = p-vec3(sin(p.z*0.7)*0.2,-2.7,-.5);\n p7.z = mod(p7.z , 2.) - 1.;\n  the = iTime; \n vec3 op = o5;\n      gap =10.;\n      the = sin(o5.z*.3+iTime*0.2); \n\n       op.xy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n\n op.z = mod(op.z + gap,2.0 * gap) - gap; \nvec3 op1 = op;\n vec3 snakesize =vec3(.01,0.01,10.);\nop =op-vec3(sin(o5.z*.1+iTime*0.2)*2.,cos(o5.z*.1+iTime*0.3)+1.5*3.,0);\n\n vec2 box13 = vec2((sdBox(op, snakesize)),5.);\n\n\n      op1 =op1-vec3(cos(o5.z*.1+iTime*0.2-pi)*2.,sin(o5.z*.1+iTime*0.3-pi)-1.5*3.,0);\n\n   vec2 box15 = vec2((sdBox(op1, snakesize)),5.);\n    \n    \n    \n    box15.x += cos(o5.y*.5+iTime-pi)*0.01+sin(o5.z*.2-iTime-pi*2.5)*.9;\n\n    \n    \n    \n    box13.x += cos(o5.y*.5+iTime)*0.01+sin(o5.z*.2-iTime*2.5)*.9;\n\n    \n    \n    \n    //wall\n p7.x = abs(p7.x)-8.5;\n vec2 box14 = vec2((sdBox(p7-vec3(-1.,0.,0), vec3(1.,20.,.4))),5.);\n float   displacement = sin(0.1*p.x+ iTime*0.4)*sin(0.2*p.y+ iTime)*cos(0.1*p.z+ iTime)*1.;\n box14.x += displacement;\n d.x += displacement;\n d.x = min(d.x,box14.x);\n    box13.x = min(box13.x,box15.x);\n    box13.x*= .7;\n d.x = smin(d.x,box13.x,.1);\n d.x = smin(d.x,box11.x,1.);\nvec3 p0 =p;\n \n     p0.x= (abs(p0.x)-9.);\n\nvec2 box10 = vec2((sdBox(p0-vec3(2,0,0.), vec3(.1,20.,4.))),5.);\n\n     displacement = sin(1.5*p.x+ iTime*0.4)*sin(.9*p.y+ iTime)*cos(.5*p.z+ iTime);\n box10.x += displacement;\n spherepos =  vec3(0.,7.5,-4.+iTime*2.);\n vec2 box;\n\n the = (iTime*0.2);\n float s =10.;\n float two = ((dot(sin(p2.zxy+iTime*0.2)*5., cos(p2.zxy*9.+iTime))));\n d.x = mix(d.x,two,sin(p.x*0.4+iTime)*0.01);\n    p2 += vec3(0,1.5,-0.);\n p2.x= (abs(p2.x)-6.5);\n    \n \n    box = vec2(sdBox(p2, vec3(.1,10.,2.)),5);\n\n        d.x = mix(d.x,box10.x,-.02);\n //two = ((dot(sin(p2.zxy*2.+0.), cos(p2.zxy*2.+iTime))));\n //box10.x = mix(box10.x,two,.09);\n //box10 = vec2(box10.x,5);\n \n    d = condmin(d,box13);\n\n       d = condmin(d,box11);\n  \n box10.x = smin(d.x,box10.x,1.);\n g5 +=1./(.005+pow(abs(box13.x),2.));\n g1 +=1./(.8+pow(abs(box10.x),5.));\n    \n g5 +=5./(.1+pow(abs(box11.x),10.));\n g2 +=.001/(.005+pow(abs(box13.x),5.));\n    \n\n g2 +=.02/(.05+pow(abs(box.x),6.));\n //g4 +=0.1/(4.+pow(abs(box10.x),6.));\n d = condmin(d,box10);\n return d;\n}\n\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\nvec2 h, t=vec2( 0.);   \nfor (int i=0; i<MAX_STEPS; i++) \n{   \nh = GetDist(ro + t.x * rd);\nif(h.x<SURF_DIST||abs(t.x)>MAX_DIST) break;\nt.x+=h.x *1.;\nt.y=h.y;\n}\nif(t.x>MAX_DIST) \nt.x=100.;\nt.x +=h.x*1.;\nreturn t;\n}\nfloat marchCount;\n\n\nfloat traceRef(vec3 o, vec3 r){\n    \n float t = 0.0;\n marchCount = 0.0;\n float dO = 0.;  \n for (int i = 0; i < 60; i++)\n {\n  vec3 p = o + r * t;   \n  float d = GetDist (p).x;\n  if(d<.02 || (t)>100.) break;\n  t += d * 1.;\n  marchCount+= 1./d*.2;\n }    \n return t;\n}\n\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n vec3 f = normalize(l-p),\n r = normalize(cross(vec3(0,1,0), f)),\n u = cross(f,r),\n c = p+f*z,\n i = c + uv.x*r + uv.y*u,\n d = normalize(i-p);\n return d;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr ){\n vec3 cw = normalize(ta-ro);\n vec3 cp = vec3(sin(cr), cos(cr),0.0);\n vec3 cu = normalize( cross(cw,cp) );\n vec3 cv = cross(cu,cw);\n return mat3( cu, cv, cw );\n}\n\nvec3 GetNormal(vec3 p){\nvec2 e = vec2(.00035, -.00035); \nreturn normalize(\n e.xyy * GetDist(p + e.xyy).x + \n e.yyx * GetDist(p + e.yyx).x + \n e.yxy * GetDist(p + e.yxy).x + \n e.xxx * GetDist(p + e.xxx).x);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nvec2 uv =( 2. * fragCoord.xy - iResolution.xy ) / iResolution.y;\nvec2 m = iMouse.xy/iResolution.xy;\n vec2 a = path(iTime * 1.0)*1.0;\n vec3 o = vec3(a / 5.0,iTime*2.);\n     vec3    eye = o+vec3(0,0,-7);\nvec3 col;\nvec2 d;\nvec3 hoek = vec3(iTime*0.2,(iTime)*1.,0.);  \nmat3 camera = setCamera( eye, hoek,iTime*0.1);\nfloat fov = .5;\nvec3 dir = camera * normalize(vec3(uv, fov));\nvec3 p;\nvec3 n;\nvec3 focalPoint = eye + (dir * 1.);\nvec3 shiftedRayOrigin = eye;\nvec3 shiftedRay = (focalPoint - shiftedRayOrigin);\n d = RayMarch(shiftedRayOrigin, shiftedRay);\nfloat t =d.x *1.;\nvec3  shiftedRayOrigin2 = shiftedRayOrigin;\nvec3  shiftedRay2= shiftedRay;\nif(t<MAX_DIST) {\n shiftedRayOrigin2 += shiftedRay2 * t;\n vec3 sn = GetNormal(shiftedRayOrigin2);\n shiftedRay2 = reflect(shiftedRay2, sn);\n //if(d.y==3.) traceRef(shiftedRayOrigin2 +  shiftedRay2*.1, shiftedRay2);\n  if(d.y==5.) traceRef(shiftedRayOrigin2 +  shiftedRay2*.1, shiftedRay2);\n // if(d.y==7.) traceRef(shiftedRayOrigin2 +  shiftedRay2*.1, shiftedRay2);    \n\n col +=g5*vec3(0.1)*vec3(0.1,0.,.5)*.5;    \n col +=g2*vec3(0.3)*vec3(.0,1.,.2)*1.;    \n// col +=g4*vec3(0.1)*vec3(1.,.0,0.6)*.1;    \n //col*= a*1.5; \n\n }\n col+=g1*vec3(0.,sin(shiftedRayOrigin.z*0.1+iTime),1)*0.05;  \n\n    col*=g2*vec3(.001);  \n float fog = 100. / (1. + d.x * d.x *1.+1.);\n col+=g5*vec3(.000005);  \n col*= 2.; \n// col=smoothstep(0.0,2.,col);\n col *= vec3(fog); \n col=pow(col, vec3(0.4545));\n fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}