{"ver":"0.1","info":{"id":"dlBBzw","date":"1693870279","viewed":32,"name":"Kuroki Fractal","username":"Kuroki","description":"My first shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette (float t){\n    vec3 a = vec3(0.758, 0.420, 1.173);\n    vec3 b = vec3(0.289, 0.400, 0.358);\n    vec3 c = vec3(0.765, 2.990, 2.136);\n    vec3 d = vec3(0.0, -0.5, 0.5);\n    \n    return a + b * cos(6.28318 * (c*t*d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for(float i = 0.0; i < 3.0; i++){\n        uv = fract(uv * 2.0) - 0.5;\n        //uv = smoothstep(0.07, 2.0, uv);    \n\n        float d = length(uv) * exp(-length(uv0));\n\n        vec3 color = palette(length(uv) * i * iTime * pow(d, 2.0));\n\n        d = cos(sin(d) + iTime * cos(d));\n        d = abs(d);\n\n        //d = smoothstep(0.0, 0.1, d);\n\n        d = 0.05/d;\n\n        //color *= d;\n        finalColor += color * d;\n    }\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}