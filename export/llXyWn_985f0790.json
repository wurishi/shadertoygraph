{"ver":"0.1","info":{"id":"llXyWn","date":"1504274236","viewed":683,"name":"yellow quartics matter","username":"ollj","description":"see \nhttp://blog.demofox.org/2016/02/22/gpu-texture-sampler-bezier-curve-evaluation/\nexplaining how bilinear interpolation estimates splines (in a lower texture resolution, easily hidden in dithering/noise)\nhttps://www.shadertoy.com/view/llSSRD","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["2d","bezier","yellow","quartic","polynomial","bilinear"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//parent: https://www.shadertoy.com/view/llSSRD\n\n//pretty much just changed the color sceme.\n//\n//this is more habitual reinfocing practice than innovation.\n//- i want to extend something, by first getting familiar with where I used it before.\n//- - the term quartic is a bit alien, but needs to become common to me.\n//- - same thing applies to mixing a 4th domain into an .rgb display (yellow==simle)\n\nfloat c_textureSize = 64.;\n\n#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)\nvec4 hash42(vec2 p){\n\tvec4 p4 = fract(vec4(p.xyxy) * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n\treturn fract(vec4((p4.x + p4.y)*p4.z, (p4.x + p4.z)*p4.y, (p4.y + p4.z)*p4.w, (p4.z + p4.w)*p4.x));\n}//https://www.shadertoy.com/view/4djSRW\n\n\nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\t\n    vec2 percent = (fragCoord.xy / iResolution.xy);   \n    float time = floor(iTime);\n    vec2 pixelOffset = vec2(\n        rand(vec2(time*7.23, time*3.14)),\n        rand(vec2(time*2.19, time*28.28))\n    );\n    pixelOffset.x*=.000001;\n    pixelOffset = floor(pixelOffset*c_textureSize) / c_textureSize + (0.5+percent.x) / c_textureSize;\n    vec4 a = texture(iChannel0, pixelOffset);\t\n    vec4 b = texture(iChannel0, pixelOffset + vec2(1.0 / c_textureSize,0.0));\t\n    vec4 c = texture(iChannel0, pixelOffset + vec2(2.0 / c_textureSize,0.0));\t\n    float t =percent.x;\n    float s =1.-t;\n    vec4 curveValues =a*s*s+2.*b*s*t+c*t*t;\n\n    curveValues-=fragCoord.y/iResolution.y;\n    curveValues=smoothstep(.1,-.1,abs(curveValues*.5));    \n    curveValues.rg=max(curveValues.rg,curveValues.aa);\n                       \n    fragColor=vec4(curveValues.xyz,1);\n}","name":"Image","description":"","type":"image"}]}