{"ver":"0.1","info":{"id":"Ds2SWD","date":"1670322266","viewed":130,"name":"chatgpt test","username":"itsmetamike","description":"first attempt using glsl","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["silly"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NOISE_QUALITY 3\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat noise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187,\n                      0.366025403784439,\n                      -0.577350269189626,\n                      0.024390243902439);\n\n  vec2 i = floor(v + dot(v, C.yy) );\n\n  vec2 x0 = v - i + dot(i, C.xx);\n\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n  i = mod289(i);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Compute the position of the current pixel in screen space\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Compute the time-varying offset for the Perlin noise\n    vec2 offset = vec2(sin(iTime * 10.0), cos(iTime * 100.0));\n\n    // Generate Perlin noise at the current pixel position\n    float perlinValue = noise(uv + offset);\n\n    // Generate simplex noise at the current pixel position\n    float simplexValue = noise(uv + offset);\n\n    // Combine the values of the two noise functions\n    float value = perlinValue + simplexValue;\n\n// Compute the time-varying color for the noise\nvec3 color = vec3(sin(iTime*10.0), cos(iTime), 0.0);\n\n// Adjust the saturation and brightness of the color\ncolor = mix(vec3(1.0), color, 0.9);\ncolor = pow(color, vec3(0.5));\n\n// Compute the psychedelic pattern using a noise function\nvec2 patternOffset = vec2(sin(iTime*100.0), cos(iTime));\nvec3 pattern = vec3(noise(uv * 1.0 + patternOffset));\n\n// Adjust the saturation and brightness of the pattern\npattern = mix(vec3(1.0), pattern, 0.5);\npattern = pow(pattern, vec3(0.01));\n\n// Blend the pattern with the existing noise using the mix function\ncolor = mix(color, pattern, value);\n\n// Compute the depth of the current pixel using the gl_FragCoord variable\nfloat depth = gl_FragCoord.z;\n\n// Modify the color of the pixel based on its depth\ncolor = mix(vec3(1.0), color, depth);\n\n// Set the output color to the modified color\nfragColor = vec4(color, 10.0);\n\n}","name":"Image","description":"","type":"image"}]}