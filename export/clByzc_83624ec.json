{"ver":"0.1","info":{"id":"clByzc","date":"1692068239","viewed":94,"name":"drum 2 Basico-sound","username":"jorge2017a2","description":"drum 2 Basico-sound","likes":12,"published":1,"flags":8,"usePreview":0,"tags":["sound","drum"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a2\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(7.0*antialiasing(1.0),b,d)\n#define PI 3.141516\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\nfloat sdCircle( vec2 p, float r )\n{return length(p) - r; }\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b; return length(max(d,0.0)) + min(max(d.x,d.y),0.0); }\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\nvec2 pa = p-a, ba = b-a;\nfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\nreturn length( pa - ba*h );\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0),S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\nvec3 columna(vec2 p, vec3 col)\n{\nvec2 pos, med;\nvec2 pr;\nfloat ang;\nvec3 colc=vec3(0.7);\n pos=vec2(3.99,3.36);\n med=vec2(0.375,2.65);\nfloat d1= sdBox(p-pos, med );\ncol=DrawFigBorde(colc, col, d1);\n\n pos=vec2(9.66,3.37);\n med=vec2(0.375,2.65);\nfloat d2= sdBox(p-pos, med );\ncol=DrawFigBorde(colc, col, d2);\n\npos=vec2(6.8,5.78);\nmed=vec2(3.175,0.25);\nfloat d3= sdBox(p-pos, med );\ncol=DrawFigBorde(colc, col, d3);\n//--------------\n\ncolc=vec3(0.5);\nfloat r1,r2,he;\nr1=2.46;\nr2=2.16;\nhe=0.125;\n pos=vec2(6.85,5.395);\nfloat d4= sdTrapezoid(p-pos, r2, r1, he);\ncol = DrawFigBorde(colc, col,d4);\n\n\nr1=2.185;\nr2=2.39;\nhe=0.13;\n pos=vec2(7.64,1.27);\n \nang = 90. * PI / 180.0;\npr = Rotate(p- pos, med/2.0, ang);\nfloat d5= sdTrapezoid(pr, r1, r2, he);\ncol = DrawFigBorde(colc, col,d5);\n\n\nr1=2.445;\nr2=2.04;\nhe=0.13;\n pos=vec2(3.0,1.40);\n ang = 90. * PI / 180.0;\npr = Rotate(p- pos, med/2.0, ang);\nfloat d6= sdTrapezoid(pr, r1, r2, he);\ncol = DrawFigBorde(colc, col,d6);\nreturn  col;\n}\n\nfloat N21(vec2 p)\n{ return fract(sin(p.x * 100. + p.y * 6574.) * 5647.);}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    vec2 uv = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n     uv-=vec2(-0.5,-0.5);\n    uv*=7.0;\n    vec3 col = vec3(0.5,0.5,0.7);\n    col=columna(uv-vec2(2.,4.5), col);\n    col=columna(uv-vec2(1.,2.5), col);\n    col=columna(uv+sin(iTime*0.5)*N21(uv), col);\n    col=columna(uv-vec2(-1.,-2.5), col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Referencia de sonido IQ y Gaz\n//Modificado por Jorge2017a2---jorgefp\n#define PI acos(-1.)\n#define PIH (PI*.5)\n#define TAU (PI*2.)\n\n\n#define DD(a,b) n=(s>=a)?ivec2(a,b):n;\n\nconst float pi = 3.1415927;\nconst float tau = 6.283185;\nconst float ttotal=30.0;\n\n//gaz\n#define osc_sin(x)sin((x)*TAU)\n#define osc_saw(x)(1.-fract(x)*2.)\n#define osc_sqr(x)sign(0.5-fract(x))\n#define osc_tri(x)(asin(sin((x)*PI))/PIH)\n \nfloat noize(float t,  float a, float b){\n    float g=fract(cos(t*exp2(a))*exp2(b))+6.0;\n    return exp(-0.08*g*g) *40.0-1.;\n}\n\nfloat kick(float t)\n{  return clamp(1.5*asin(cos(320.0*t-30.0*exp(-40.0*t))),-1.,1.)*exp(-4.*t);}\n\nfloat kick2(float t)\n{ return clamp(1.5*asin(cos(620.0*t-30.0*exp(-40.0*t))),-1.,1.)*exp(-4.*t); }\n\nfloat snare(float t)\n{   float n=noize(t,10.,10.)*exp(-t*10.);\n    float f=t*160.,a=.3*osc_tri(1.2*f)*exp(-t*3.);\n    float b=.05*osc_sin(10.*f+a)*exp(-t*3.);\n    float c=osc_sin(f+b)*exp(-t*15.), z;\n    return n+c;\n}\n\nfloat snare2(float t)\n{   float n=noize(t,10.,10.)*exp(-t*10.);\n    float f=t*260.,a=.3*osc_tri(1.2*f)*exp(-t*3.);\n    float b=.05*osc_sin(10.*f+a)*exp(-t*3.);\n    float c=osc_sin(f+b)*exp(-t*15.), z;\n    return n+c;\n}\n\n// saw wave iq\nfloat sawRaw( in float p, in float dpdt )\n{   float x = mod(p,tau)/tau;\n    return 2.0*x-1.0;\n}\n\n// square wave iq\nfloat squareRaw( in float p, in float dpdt )\n{   float t = fract(p/tau);\n    return sign(0.5-t);\n}\n\nfloat combinar(float a, float b, float f1, float f2)\n{   float ra=mix(0.0,a,f1);\n    float rb=mix(0.0,b,f2);\n    return ra+rb;\n}\n\nfloat wave( float x, float dxdt, in vec2 v )\n{   //referencia Inigo Quilez 2019\n    float a, b;\n    a=0.46;\n    b=0.65;\n    float f1= sawRaw(x, dxdt);\n    float f2=squareRaw(x, dxdt);\n    float f3=osc_saw(x*dxdt);\n    float fx= combinar( a, b, f1, f2);\n    \n    return fx;\n}\n\nfloat SoundIq(float time)\n{ ///referencia de notas musicales... iq \n  time = mod( time+1.0, ttotal);\n // tune\n  const float tempo = 4.2;\n  int s = int(floor(time*tempo));\n  ivec2 n = ivec2(0);\n  DD( 8,70) DD( 9,62) DD(10,67) DD(11,70) DD(12,72) DD(13,65) DD(14,69) DD(15,70)\n  DD(17,67) DD(18,70) DD(19,74) DD(20,75) DD(21,67) DD(22,74) DD(23,72) DD(24,70)\n  DD(25,62) DD(26,67) DD(27,70) DD(28,72) DD(29,65) DD(30,69) DD(31,70) DD(33,67)\n  DD(34,70) DD(35,74) DD(36,75) DD(37,67) DD(38,74) DD(39,72) DD(40,70) DD(41,62)\n  DD(42,67) DD(43,70) DD(44,72) DD(45,65) DD(46,69) DD(47,70) DD(49,67) DD(50,70)\n  DD(51,74) DD(52,75) DD(53,67) DD(54,74) DD(55,72) DD(56,70) DD(57,62) DD(58,67)\n  DD(59,70) DD(60,69) DD(61,60) DD(62,65) DD(63,67) DD(65,58) DD(66,65) DD(67,67)\n  DD(69,65) DD(70,67) DD(71,69) DD(72,70) DD(73,62) DD(74,67) DD(75,70) DD(76,72)\n  DD(77,65) DD(78,69) DD(79,70) DD(81,67) DD(82,70) DD(83,74) DD(84,75) DD(85,67)\n  DD(86,74) DD(87,72) DD(88,70) DD(89,62) DD(90,67) DD(91,70) DD(92,72) DD(93,65)\n DD(94,69) DD(95,70) DD(97,67) DD(98,70) DD(99,74) DD(100,75) DD(101,67) DD(102,74)\n  DD(103,72) DD(104,70) DD(105,62) DD(106,67) DD(107,70) DD(108,72) DD(109,65) DD(110,69)\n  DD(111,70) DD(113,67) DD(114,70) DD(115,74) DD(116,75) DD(117,67) DD(118,74) DD(119,72)\n  DD(120,70) DD(121,62) DD(122,67) DD(123,70) DD(124,69) DD(125,60) DD(126,65) DD(127,67)\n  DD(208,70) DD(209,62) DD(210,67) DD(211,70) DD(212,72) DD(213,65) DD(214,69) DD(215,70)\n  DD(217,67) DD(218,70) DD(219,74) DD(220,75) DD(221,67) DD(222,74) DD(223,72) DD(224,70)\n  DD(225,62) DD(226,67) DD(227,70) DD(228,72) DD(229,65) DD(230,69) DD(231,70) DD(233,67)\n  DD(234,70) DD(235,74) DD(236,75) DD(237,67) DD(238,74) DD(239,72) DD(240,70) DD(241,62)\n  DD(242,67) DD(243,70) DD(244,72) DD(245,65) DD(246,69) DD(247,70) DD(249,67) DD(250,70)\n  DD(251,74) DD(252,75) DD(253,67) DD(254,74) DD(255,72) DD(256,70) DD(257,62) DD(258,67)\n  \n  DD(259,70) DD(260,69) DD(261,60) DD(262,65) DD(263,67) DD(416,62) DD(416,65) DD(416,69)\n  DD(430,62) DD(430,70) DD(430,67) DD(432,62) DD(432,69) DD(432,65) DD(446,62) DD(446,70)\n  DD(446,67) DD(448,62) DD(448,69) DD(448,65) DD(462,62) DD(462,70) DD(462,67) DD(464,62)\n  DD(464,69) DD(464,65) DD(480,70) DD(481,62) DD(482,67) DD(483,70) DD(484,72) DD(485,65)\n  DD(486,69) DD(487,70) DD(489,67) DD(490,70) DD(491,74) DD(492,75) DD(493,67) DD(494,74)\n  \n  // lower one octave\n  n.y -= 12;\n      \n  // compute note frequency and time  \n  float f = 440.0*pow( 2.0, float(n.y-69)/12.0 );\n  float t = time - float(n.x)/tempo;\n  if( n.x==0 ) return 0.0;\n\n  // prepare wave parameters\n  float w = tau*f;\n  float dwdt = w/iSampleRate; // derivative\n    \n  // mix between bandlimited and raw saw waves  \n  vec2 v = smoothstep(-0.2,0.2,sin(time*vec2(1.0,0.5)) );\n    \n  // build instrument    \n  float y  = 0.4*wave(1.00*w*t,1.00*dwdt,v)*exp(-5.0*t);\n        y += 0.3*wave(2.01*w*t,2.01*dwdt,v)*exp(-7.0*t);\n        y += 0.2*wave(4.01*w*t,4.01*dwdt,v)*exp(-9.0*t);\n        y += 0.1*wave(8.01*w*t,8.01*dwdt,v)*exp(-11.0*t);\nreturn y;\n}\n\nfloat sound02(float time)\n{ int m,ss,c,d;\n     #define NI(c) m=(ss>=c)?c:m;\n  time = mod( time+1.0, ttotal );\n\n  // tune\n  const float tempo = 4.2;\n  ss = int(floor(time*tempo));\n  m = 0;\n  \n NI( 8) NI(9) NI(10) NI(11) NI(12) NI(13) NI(14) NI(15)\n  NI(17) NI(18) NI(19) NI(20) NI(21) NI(22) NI(23) NI(24)\n  \n  \n  NI(69) NI(71) NI(72)  NI(75) NI(76)\n  NI(77)  NI(79) NI(81)  NI(84) NI(85)\n  NI(86)  NI(88) NI(89)  NI(92) NI(93)\n  NI(94)  NI(97) NI(98)  NI(101) NI(102)\n  float t = time - float(m)/tempo;\n  if( m==0 ) return 0.0;\n  \n    float y= kick2(t)*0.75;\n    return y;\n}\n\nfloat sound03(float time)\n{   int m, ss,c,d;\n    #define NI(c) m=(ss>=c)?c:m;\n  time = mod( time+1.0,ttotal );\n\n  // tune\n  const float tempo = 4.2;\n  ss = int(floor(time*tempo));\n  m = 0;\n  \n  NI( 8) NI( 9) NI(10) NI(11) NI(12) NI(13) NI(14) NI(15)\n  NI(17) NI(18) NI(19) NI(20) NI(21) NI(22) NI(23) NI(24)\n  \n  NI(25)  NI(27)  NI(29) NI(31) NI(33)\n  NI(34)  NI(36)  NI(38) NI(40) NI(41)\n  \n  NI(42)  NI(45) NI(49) NI(50)\n  NI(51)  NI(54) NI(57) NI(58)\n  NI(59)  NI(62) NI(66) NI(67)\n  NI(69)  NI(72) NI(75) NI(76)\n  \n  float t = time - float(m)/tempo;\n  if( m==0 ) return 0.0;\n   float y= snare(t)*0.75;\n  return y;\n}\n\nfloat sound04(float time)\n{ int m, ss,c,d;\n     #define NI(c) m=(ss>=c)?c:m;\n    ///referencia de notas musicales... iq \n  time = mod( time+1.0, ttotal );\n  // tune\n  const float tempo = 4.2;\n  ss = int(floor(time*tempo));\n  m = 0;\n NI(111)  NI(114) NI(115) NI(116) \n NI(120)  NI(122) NI(123) NI(124) \n NI(208)  NI(210)  NI(212)  NI(214)\n  \nfloat t = time - float(m)/tempo;\n  if( m==0 ) return 0.0;\nfloat y= kick(t)*0.75;\n    return y;\n}\n\nfloat sound05(float time)\n{  int m, ss,c,d;\n     #define NI(c) m=(ss>=c)?c:m;\n   time = mod( time+1.0, ttotal);\n  const float tempo = 4.2;\n  ss = int(floor(time*tempo));\n  m = 0;\n  \n  NI(111)  NI(114) NI(115) NI(116) \n NI(120)  NI(122) NI(123) NI(124) \n NI(208)  NI(210)  NI(212)  NI(214)\n  float t = time - float(m)/tempo;\n  if( m==0 ) return 0.0;\nfloat y=snare2(t)*0.75;\n    return y;\n}\n\nvec2 mainSound( in int samp, float time )\n{ float y= SoundIq(time);\n  y+= sound02(time);\n  y+= sound03(time);\n  y+= sound04(time);\n  y+= sound05(time);\n  return 0.75*vec2(y);\n}   \n\n\n","name":"Sound","description":"","type":"sound"}]}