{"ver":"0.1","info":{"id":"4ddfWn","date":"1524696215","viewed":177,"name":"Voronoise 3d [Cow Spots]","username":"TinyTexel","description":"shader","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Voronoise 3d [Cow Spots]\n// by TinyTexel\n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n\n/*\n3d value noise using 2 texture lookups\nnoise is built by vertically stacking 2d noise layers with pseudo-random horizontal offsets\ncamera controls via mouse + shift key\n*/\n\n///////////////////////////////////////////////////////////////////////////\n//=======================================================================//\n\n#define Frame float(iFrame)\n#define Time iTime\n//#define PixelCount iResolution.xy\n#define OUT\n\n#define rsqrt inversesqrt\n#define clamp01(x) clamp(x, 0.0, 1.0)\n#define If(cond, resT, resF) mix(resF, resT, cond)\n\n\nconst float Pi = 3.14159265359;\nconst float Pi2 = Pi * 2.0;\nconst float Pi05 = Pi * 0.5;\n\nfloat Pow2(float x) {return x*x;}\nfloat Pow3(float x) {return x*x*x;}\nfloat Pow4(float x) {return Pow2(Pow2(x));}\n\nvec2 AngToVec(float ang)\n{\t\n\treturn vec2(cos(ang), sin(ang));\n}\n\nfloat SqrLen(float v) {return v * v;}\nfloat SqrLen(vec2  v) {return dot(v, v);}\nfloat SqrLen(vec3  v) {return dot(v, v);}\nfloat SqrLen(vec4  v) {return dot(v, v);}\n\n\n#define FUNC4_FLOAT(f)\t\t\t\t\t\t\t\\\nvec2 f(vec2 v) {return vec2(f(v.x ), f(v.y ));}\t\\\nvec3 f(vec3 v) {return vec3(f(v.xy), f(v.z ));}\t\\\nvec4 f(vec4 v) {return vec4(f(v.xy), f(v.zw));}\t\\\n\n#define FUNC4_UINT(f)\t\t\t\t\t\t\t\t\\\nuvec2 f(uvec2 v) {return uvec2(f(v.x ), f(v.y ));}\t\\\nuvec3 f(uvec3 v) {return uvec3(f(v.xy), f(v.z ));}\t\\\nuvec4 f(uvec4 v) {return uvec4(f(v.xy), f(v.zw));}\t\\\n    \nfloat GammaEncode(float x) {return pow(x, 1.0 / 2.2);}\nFUNC4_FLOAT(GammaEncode)\n\nfloat CheapHash(float v)\n{\n    return fract(sin(v) * 43758.5453) * 2.0 - 1.0;\n}\n\nfloat CheapHash(vec2 v)\n{\n\treturn CheapHash(v.y + v.x * 12.9898);\n}\n\nfloat CheapHash(vec3 v)\n{\n\treturn CheapHash(v.xy + v.z * vec2(3.354355, 7.23432));\n}\n\nfloat CheapHash(vec4 v)\n{\n\treturn CheapHash(v.xyz + v.w * vec3(5.08452, 1.3456, 9.235621));\n}\n    \nstruct Cam\n{\n\tvec3 Front, Right, Up;\n\tfloat Aspect;\n\tfloat AxisLen;\t\n};\n\nCam NewCam(vec2 ang, float fov, float aspect)\n{\n    Cam cam;\n\n    float sinPhi   = sin(ang.x);\n    float cosPhi   = cos(ang.x);\n    float sinTheta = sin(ang.y);\n    float cosTheta = cos(ang.y);    \n\n    cam.Front = vec3(cosPhi * cosTheta, \n                              sinTheta, \n                     sinPhi * cosTheta);\n\n    cam.Right = vec3(-sinPhi, 0.0, cosPhi);\n    cam.Up    = cross(cam.Right, cam.Front);\n\n    cam.Aspect = aspect;\n    cam.AxisLen = aspect * tan(Pi05 - fov * 0.5);\n\n    return cam;\n}\n\n// tc [-1..1]\nvec3 NewRay(Cam cam, vec2 tc)\n{\n    tc.x *= cam.Aspect;\n\n    vec3 imgPos = cam.Front * cam.AxisLen + (cam.Right * tc.x + cam.Up * tc.y);\n    \n    vec3 dir = normalize(imgPos);\n\n    return dir;\n}\n\n\n/*\nSOURCE: \n\t\"Building an Orthonormal Basis from a 3D Unit Vector Without Normalization\"\n\t\thttp://orbit.dtu.dk/files/126824972/onb_frisvad_jgt2012_v2.pdf\n\t\t\n\t\"Building an Orthonormal Basis, Revisited\" \n\t\thttp://jcgt.org/published/0006/01/01/\n\t\n\t- modified for right-handedness here\n\t\nDESCR:\n\tConstructs a right-handed, orthonormal coordinate system from a given vector of unit length.\n\nIN:\n\tn  : normalized vector\n\t\nOUT:\n\tox\t: orthonormal vector\n\toz\t: orthonormal vector\n\t\nEXAMPLE:\n\tfloat3 ox, oz;\n\tOrthonormalBasis(N, OUT ox, oz);\n*/\nvoid OrthonormalBasisRH(vec3 n, out vec3 ox, out vec3 oz)\n{\n\tfloat sig = n.z < 0.0 ? 1.0 : -1.0;\n\t\n\tfloat a = 1.0 / (n.z - sig);\n\tfloat b = n.x * n.y * a;\n\t\n\tox = vec3(1.0 + sig * n.x * n.x * a, sig * b, sig * n.x);\n\toz = vec3(b, sig + n.y * n.y * a, n.y);\n}\n\n\n// s0 [-1..1], s1 [-1..1]\n// samples spherical cap for s1 [cosAng05..1]\n// samples hemisphere if s1 [0..1]\nvec3 Sample_Sphere(float s0, float s1)\n{\n    float ang = Pi * s0;\n    float s1p = sqrt(1.0 - s1*s1);\n    \n    return vec3(cos(ang) * s1p, \n                           s1 , \n                sin(ang) * s1p);\n}\n\n\n/*\nIN:\n\trp\t\t: ray start position\n\trd\t\t: ray direction (normalized)\n\t\n\tsp2\t\t: sphere position\n\tsr2\t\t: sphere radius squared\n\t\nOUT:\n\tt\t\t: distances to intersection points (negative if in backwards direction)\n\nEXAMPLE:\t\n\tvec2 t;\n\tfloat hit = Intersect_Ray_Sphere(pos, dir, vec3(0.0), 1.0, OUT t);\n*/\nfloat Intersect_Ray_Sphere(\nvec3 rp, vec3 rd, \nvec3 sp, float sr2, \nout vec2 t)\n{\t\n\trp -= sp;\n\t\n\tfloat a = dot(rd, rd);\n\tfloat b = 2.0 * dot(rp, rd);\n\tfloat c = dot(rp, rp) - sr2;\n\t\n\tfloat D = b*b - 4.0*a*c;\n\t\n\tif(D < 0.0) return 0.0;\n\t\n\tfloat sqrtD = sqrt(D);\n\t// t = (-b + (c < 0.0 ? sqrtD : -sqrtD)) / a * 0.5;\n\tt = (-b + vec2(-sqrtD, sqrtD)) / a * 0.5;\n\t\n\t// if(start == inside) ...\n\tif(c < 0.0) t.xy = t.yx;\n\n\t// t.x > 0.0 || start == inside ? infront : behind\n\treturn t.x > 0.0 || c < 0.0 ? 1.0 : -1.0;\n}\n\nvec2 CmplxMul(vec2 c0, vec2 c1)\n{\n    return vec2(c0.x*c1.x - c0.y*c1.y, c0.y*c1.x + c0.x*c1.y);\n}\n\nvec2 CmplxMul(vec2 c0, float ang)\n{\n    vec2 c1 = vec2(cos(ang), sin(ang));\n    \n    return vec2(c0.x*c1.x - c0.y*c1.y, c0.y*c1.x + c0.x*c1.y);\n}\n\nfloat lerp(float a, float b, float l) {return a + (b - a) * l;}\n\nfloat SCurveC1(float x) {return x*x*(3.-2.*x);}\nFUNC4_FLOAT(SCurveC1)\n\nfloat SCurveC2(float x){ return ((x * 6.0 - 15.0) * x + 10.0) * x*x*x;}\nFUNC4_FLOAT(SCurveC2)\n\n    \n/////////////////////////////////////////////////////////////////////////////////////////////////////\n//=================================================================================================//\n    \nfloat VoronoiseN3(vec3 x, vec3 cells)\n{\n\tvec3 ix = floor(x);\n\tvec3 fx = x - ix;\n\n    float res = 0.0;\n    float accu_w = 0.0;\n    \n\tfor (float i = 0.0; i < 3.0; ++i)\n\tfor (float j = 0.0; j < 3.0; ++j)\n\tfor (float k = 0.0; k < 3.0; ++k)\n\t{\n\t\tvec3 v = vec3(i, j, k);\n\t\tvec3 c = v - 0.5;\n\t\tvec3 vp = v + ix;\n\n        #if 0\n        vp = mod(vp, cells);// mod(x, y) == x - y * floor(x/y)    \n        vp = If(lessThan(vp, vec3(0.0)), cells + vp, vp);\n        #endif\n        \n\t\tfloat s0 = CheapHash(vp * 1.3287 + 0.1338);\n\t\tfloat s1 = CheapHash(vp * 0.9562 + 1.4267);\n\t\tfloat s2 = CheapHash(vp * 0.8422 + 1.0456);\t\t\n        float s3 = CheapHash(vp * 1.1045 + 0.9391);        \n        float s4 = CheapHash(vp * 1.0909 + 0.3985);\n\n\t\t#if 0\n\t\tvec3 off = Sample_Sphere(s0, s1);\n        #else\n\t\tvec3 off = normalize(vec3(s0, s1, s2));\n\t\t#endif\n        \n\t\tc += off * 0.396;\n\n\t\tfloat l = SqrLen(fx - c);\n\t\t//l = sqrt(l * 0.5 + 0.5);// - 1.0;\n        \n        float w = clamp01(1.0 - l * 0.72);// 0.8? -> test empirically\n        w = exp2(w*w * 16.0) - 1.0;\n        //w = 1.0 / (exp2(l * 4.0) - 1.0*0.9);\n        \n        //w = pow(w, 5.0);\n        //w = SCurveC1(w);\n        //w *= w;\n        //w *= w;\n        //w *= w;\n        \n        #if 0\n        {\n            #if 1\n            vec3 ox, oz;\n            OrthonormalBasisRH(off, /*out:*/ ox, oz);\n            vec2 off2 = AngToVec(s4 * Pi);\n\n            off = ox * off.x + oz * off.y;\n            #endif\n\n            #if 1\n            s3 = s3*1.0 + dot(off, fx - c)*1.0;\n            #else\n            s3 = s3*.0 + sin((dot(off, fx - c) + s4) * Pi*1.5);\n            #endif\n            //s3 *= 0.75;\n        }\n        #endif\n        \n        //s3 = s3 < 0. ? -1.0 : 1.0;\n        //s3 = Pow3(s3);        \n        //s3 = Pow3(s3);\n\n        res += s3 * w;\n        \n        accu_w += w;\n\t}\n\n\tres = accu_w == 0.0 ? 0.0 : res / accu_w;\n\n    //res+=0.2;\n    //res*=10.0;\n    //return res * 0.5 + 0.5 < 0.35 ? 0.0 : 1.0;\n    //return isnan(res) ? 1.0 : 0.0;\n    \n\t//return res;\n    \n    //return smoothstep(0., 0.05, pow(Pow2(res), 2.0)) * (abs(res));\n    return 1.0 - smoothstep(0., 0.05, pow(Pow2(res), 2.0));\n    //return 1.0 - Pow2(res) > 0.9 ? 1.0 : 0.0;\n    ////return pow(1.0 - pow(abs(res), 8.0), 1024.0);\n\treturn res * 0.5 + 0.5;\n}\n//=================================================================================================//\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n//#define USE_FBM\n\nfloat Fbm(vec3 p, vec3 off)\n{\n    const float count = 2.0;\n\n    const float ang = Pi * (3.0 - sqrt(5.0));\n    const vec2 rot = vec2(cos(ang), sin(ang));\n    \n    float res = 0.0;    \n    float res2 = 1.0;\n\n    float accu_w = 0.0;\n    float w = 1.0;\n    //float aniS = 1.0;\n    \n    for(float i = 0.0; i < count; ++i)\n    {\n        float v = VoronoiseN3(p * 0.9, vec3(8.0));\n        \n        res += v * w;\n        res2 *= 1.0-v;\n        \n        accu_w += w;\n        \n        //aniS *= 1.8;        \n        w *= 0.99;\n        p *= 1.2;\n        p.xy = CmplxMul(p.xy, rot);\n        p = p.yzx;\n        p += vec3(0.1, 1.06, 0.0);\n        \n        //res = SCurveC1(res / accu_w) * accu_w; \n    }\n    \n    res /= accu_w;\n    \n    //res = SCurveC1(res);    \n    //res = SCurveC1(res);\n\t//res = res > 0.5 ? 1.0 : 0.0;\n    \n    return 1.0 - smoothstep(0., 0.05, pow(Pow2(res), 1.5));\n\n    return res;\n    return 1.0-res2;\n}\n\n\n\n\nfloat EvalSceneCol(\n    vec3 rp, Cam cam, vec2 uv0, bool right)\n{\n    float col = 0.0;\n    vec2 PixelCount = iResolution.xy * vec2(0.5, 1.0);\n    \n    vec2 tex = uv0.xy / PixelCount;\n    vec2 tex21 = tex * 2.0 - vec2(1.0);\n        \n    if(right)\n    {      \n        vec3 rd = NewRay(cam, tex21);\n    \n        vec2 t; vec3 n; vec3 a;\n        float hit = Intersect_Ray_Sphere(rp, rd, vec3(0.0), 1.0, OUT t);\n    \n        \n        if(hit > 0.0)// RIGHT ----------------------------------------------------------------------\n        {\n\t\t\tvec3 p = rp + rd * t.x;           \n            \n            col = VoronoiseN3(p * 8.0, vec3(4.0));\n            \n            #ifdef USE_FBM\n            col = Fbm(p * 12.0, vec3(0.0));\n\t\t\t#endif\n        }\n        else\n        {\n           col = 0.11;           \n        }\n    }\n    else// LEFT ------------------------------------------------------------------------------------\n    { \n        uv0 -= PixelCount * 0.5;\n        uv0 *= 0.04 + length(rp)*0.04;  \n        \n        vec3 uvw;\n        uvw = uv0.x * normalize(vec3(0.5, -1.0, 0.5)) + \n              uv0.y * normalize(vec3(1.0, 0.0, -1.0));\n          \n        //uvw.xy = -uvw.xy;\n        //uvw.xy = vec2(-uvw.y, uvw.x);\n        //uvw.z = -uvw.z;\n        float n = VoronoiseN3(uvw * 0.5, vec3(4.0));\n        \n        #ifdef USE_FBM\n        n = Fbm(vec3(uv0 * .5, 0.), vec3(0.0));\n        #endif\n        \n        col = n;\n    }\n\n    col = pow(clamp01(col), 2.2);\n    return col;\n}\n\n\nvoid mainImage( out vec4 outCol, in vec2 uv0 )\n{\n    vec3 col = vec3(0.0);\n    \n    vec2 uv = uv0.xy - 0.5;\n    \n    vec2 PixelCount = iResolution.xy * vec2(0.5, 1.0);\n    \n    bool right = uv.x > PixelCount.x;\n    if(right) uv.x -= PixelCount.x;\n    \n    \n    vec4 mouseAccu = texelFetch(iChannel0, ivec2(1, 0), 0); \n    vec4 wasdAccu  = texelFetch(iChannel0, ivec2(2, 0), 0); \n\n    vec2 lightAng = vec2(Pi * 0.0, Pi * 0.5);\n    lightAng.x += (wasdAccu.y - wasdAccu.w) * 0.06; \n    lightAng.y += (wasdAccu.x - wasdAccu.z) * 0.04;    \n    \n    \n    vec2 ang = vec2(0.0, 0.0);\n    ang += mouseAccu.xy * 0.008;\n\n    Cam cam = NewCam(ang, Pi * 0.5, PixelCount.x / PixelCount.y);\n    vec3 cpos = -cam.Front * 2.0;\n    cpos = -cam.Front * (exp2(0.6 + mouseAccu.w * 0.02));\n    \n\n\t#ifdef USE_AA\n    float flip = step(0.5, fract(uv.y * 0.5));\n    \n    col += EvalSceneCol(cpos, cam, uv + vec2(abs(flip - 0.5  ), 1./6.), light, right);\n    col += EvalSceneCol(cpos, cam, uv + vec2(abs(flip - 5./6.), 0.5  ), light, right);\n    col += EvalSceneCol(cpos, cam, uv + vec2(abs(flip - 1./6.), 5./6.), light, right);    \n    \n    col /= 3.0;   \n    #else\n    col = vec3(EvalSceneCol(cpos, cam, uv, right));    \n    #endif\n    \n\n    \n    //if(col.x > 1.0) col = vec3(1.0, 0.0, 1.0);\n    //if(col.x >\n    \n\toutCol = vec4(GammaEncode(clamp01(col)), 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 col, in vec2 uv0 )\n{  \n    col = vec4(0.0);\n    \n    vec2 uv = uv0 - 0.5;\n    \n    \n    vec4 iMouseLast     = texelFetch(iChannel0, ivec2(0, 0), 0);\n    vec4 iMouseAccuLast = texelFetch(iChannel0, ivec2(1, 0), 0);\n    vec4 wasdAccuLast   = texelFetch(iChannel0, ivec2(2, 0), 0);\n\n    bool shift = texelFetch(iChannel1, ivec2(16, 0), 0).x != 0.0;\n    \n    float kW = texelFetch(iChannel1, ivec2(0x57, 0), 0).x;\n    float kA = texelFetch(iChannel1, ivec2(0x41, 0), 0).x;\n    float kS = texelFetch(iChannel1, ivec2(0x53, 0), 0).x;\n    float kD = texelFetch(iChannel1, ivec2(0x44, 0), 0).x;\n    \n    vec4 wasdAccu = wasdAccuLast + vec4(kW, kA, kS, kD);\n    \n    vec2 mouseDelta = iMouse.xy - iMouseLast.xy;\n    \n    bool cond0 = iMouse.z > 0.0 && iMouseLast.z > 0.0;\n    vec2 mouseDelta2 = cond0 && !shift ? mouseDelta.xy : vec2(0.0);\n    vec2 mouseDelta3 = cond0 &&  shift ? mouseDelta.xy : vec2(0.0);\n    \n    vec2 iMouseAccu1 = iMouseAccuLast.xy + mouseDelta2;\n    vec2 iMouseAccu2 = iMouseAccuLast.zw + mouseDelta3;\n    \n    if(uv.x == 0.0 && uv.y == 0.0) col = iMouse;  \n    if(uv.x == 1.0 && uv.y == 0.0) col = vec4(iMouseAccu1, iMouseAccu2);\n    if(uv.x == 2.0 && uv.y == 0.0) col = wasdAccu;\n}","name":"Buffer A","description":"","type":"buffer"}]}