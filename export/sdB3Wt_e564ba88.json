{"ver":"0.1","info":{"id":"sdB3Wt","date":"1618094626","viewed":267,"name":"infinite_pattern_quick*","username":"SimonOakey","description":"quick sketch of an infinte pattern - tbc.\nlicenced under love, peace and happyness ✌️","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","color","pattern","osc"],"hasliked":0,"parentid":"ss2GW3","parentname":"noisey color journey"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*licenced under love, peace and happyness ✌️ */\n\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n#define time iTime\n#define resolution iResolution\n\n\n //generic rotation formula\nvec2 rot(vec2 uv,float a){\n\treturn vec2(uv.x*cos(a)-uv.y*sin(a),uv.y*cos(a)+uv.x*sin(a));\n}\n\n\n\nvec3 returnGrain(vec2 _uv, float amount){\n\t\n\t float x = (_uv.x + 4.0 ) * (_uv.y + 4.0 ) * ( 1110.0);\n\t vec4 grain = vec4(mod((mod(x, 13.0) + 1.0) * (mod(x, 123.0) + 1.0), 0.01)-0.005) *  amount;\n\t return grain.xyz;\n\t\n}\n\n\nvec3 hash3( float n ) { return fract(sin(vec3(n,n+1.0,n+2.0))*43758.5453123); }\n\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)) );\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = step(a.yx,a.xy);    \n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\n    return dot( n, vec3(70.0) );\n\t\n}\n\n\nconst mat2 mtx = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n \n\t\n\tfor(int i=0;i<11; i++){\n\n\tvec2 p1 = vec2(p.x*.4*float(i),p.y*.4*float(i));\n\t\t\n\tp1.x *=\tnoise(p1*.5+time*.1)*.4;\n\tp1.y *=\tnoise(p*.5-time*.1)*.4;\n\t\t\n    \tf += 0.8*noise(p1); p1 = mtx*p1*3.03;\t\n\t\t\n\t\n\t}\n\t\n\n    return f;\n}\n\nfloat pattern( in vec2 p )\n{\n\treturn fbm( p + fbm( p*2.3 + fbm( p*.33 ) ) );\n}\n\n\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\t\n    vec2 q = fragCoord.xy / iResolution.xy;\n    float _x = .65 + sin(time*.1)*.1 ;//iMouse.x/resolution.x;\n\n\tvec2 uv = gl_FragCoord.xy/resolution.y;\n    uv.x += resolution.y/resolution.x;\n\t\n    \n    \n    \n    uv.x = sin(uv.x*15.)*.5+.5;\n    uv.y *= 5.;\n    \n\tuv.y -= time*.1;\n    \n  // uv *=5.;\n   \n     vec2 ouv = uv;\n     \n\t\n     \n    \n\tfloat shade = pattern(uv);\n\t\n    shade = sin(noise(uv)*3.14);\n    \n    //shade += sin(uv.x)*6.*_x; // osc\n    \n     shade += sin(uv.y*.4+.1)*6.*_x;\n\t\n    shade = floor(shade*5.)*255. + shade*.2;\n    \n   \n\t\n\tvec3 col = vec3(\n\t\tsin(shade*.91+ time*.01)*1.75+.5 ,\n\t\tcos(shade*3.+ time*.13)*.75+.5 ,\n\t\tcos(shade*13.+ time*.13)*.5+.6 \n\t\t\t//shade*.7+.4\n\t);\n\t\n    \n\tcol = hsv2rgb(col);\n\t\n\t \n      \n     \n     \n      // dithering\n    col += hash3(q.x+13.0*q.y)*.1;\n     \n      // vignetting    \n   col *= 0.3 + .7*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.15);\n    \n\t\n\tfragColor = vec4( col, 1.0 );\n\n}\n\n\n\n\n ","name":"Image","description":"","type":"image"}]}