{"ver":"0.1","info":{"id":"fltBRH","date":"1662737732","viewed":68,"name":"Cycloid Coordinate","username":"romeosoft","description":"Cycloid coordinate system.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cycloid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n                          .-''--.\n                         _`>   `\\.-'<\n                      _.'     _     '._\n                    .'   _.='   '=._   '.\n                    >_   / /_\\ /_\\ \\   _<\n                      / (  \\o/\\\\o/  ) \\\n                      >._\\ .-,_)-. /_.<\n                          /__/ \\__\\\n                            '---'  \n            \n          “If I can’t picture it, I can’t understand it.”\n*/\n// The cycloid is related to the fastest curve, \n// but it is not convenient for us to calculate the integral problem here.\n\n#define real float\n#define ROT(p, a) p=cos(a)*p+sin(a)*vec2(p.y, -p.x)\n#define pi 3.1415926535\n// ---------------------------------------------------------\n// Coordinate System:\n// A coordinate system in two-dimensional space \n// consists of an origin plus two orientation axes \n// ---------------------------------------------------------\nstruct coord2\n{\n   vec2 ux,uy;   // two axial unit vectors\n   float s;      // scaling[opt]\n   vec2 o;       // origin\n};\ncoord2 create_coord(vec2 _ux, vec2 _o, real _s)\n{\n   coord2 c; c.ux = _ux;c.uy = vec2(-_ux.y, _ux.x);c.o = _o; c.s = _s;\n    return c;\n}\n// mul: define a vector in a coordinate system\nvec2 coord_mul (vec2 p, coord2 c)\n{\n\treturn c.ux * (p.x*c.s) + c.uy * (p.y*c.s) + c.o;\n}\n// rot: rotate the coord\ncoord2 coord_rot (coord2 c, real ang)\n{\n    ROT(c.ux, ang);\n    ROT(c.uy, ang);\n    return c;\n}\n// div: measure a vector in a coordinate system\nvec2 coord_div (vec2 p, coord2 c)\n{\n    vec2 v = p - c.o;\n    return vec2(dot(v,c.ux)/c.s, dot(v,c.uy)/c.s);\n}\n// cycloid coordinate\nvoid cycloid_coord(out coord2 c1, float x, float y)\n{\n\tc1.ux = vec2((y - sin(y)), (1. - cos(y)));\n\tc1.uy = vec2(x*(1. - cos(y)), x*sin(y));\n    c1.s = 1.0;\n    c1.o = vec2(0.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xx;\n\n    coord2 c1;\n    cycloid_coord(c1, uv.x, uv.y);\n    uv = coord_div(uv, c1);\n    \n    vec3 col = vec3(cos(uv*200.), 0.5);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}