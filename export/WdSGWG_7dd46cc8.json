{"ver":"0.1","info":{"id":"WdSGWG","date":"1549808894","viewed":124,"name":"Sphere box substraction","username":"rodgzilla","description":"Smooth subtraction of a moving box from a sphere.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","substraction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n#define PI 3.14159\n\nmat2 rot2d(float a) {\n  float c = cos(a);\n  float s = sin(a);\n\n  return mat2(c, s, -s, c);\n}\n\nfloat sdSphere(vec3 p, float s) {\n  return length(p) - s;\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n  vec3 d = abs(p) - b;\n\n  return length(max(d, 0.)) + \n    min(max(d.x, max(d.y, d.z)), 0.);\n}\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); \n}\n\nfloat map(vec3 p) {\n  p.xz = (p.xz - vec2(0, 5)) * rot2d(time) + vec2(0, 5);\n//  p.yz *= rot2d(time);\n  float wave = sin(2. * time) * 0.5 + 0.5;\n  float d = p.y + 1.5;\n  d = min(d, 3.9 - p.y);\n  d = min(d, p.x + 6.);\n  d = min(d, 6. - p.x);\n  d = min(d, 11. - p.z);\n  d = min(d, p.z + 1.);\n  float dObject = sdSphere(p - vec3(0, 0, 5), 1.);\n  vec3 posBox = p - vec3(0.1 * cos(5. * time), 0.1 * sin(time), 5);\n  posBox.xy = (posBox.xy - vec2(0, 0)) * rot2d(2. * time) + vec2(0, 0);\n//  dObject = max(dObject, -sdBox(p - vec3(0, 0, 5), vec3(0.8) + wave * 0.1));\n//  dObject = max(dObject, -sdBox(posBox, vec3(0.8) + wave * 0.1));\n//  dObject = max(dObject, -sdBox(posBox, vec3(0.8) + wave * 0.1));\n  dObject = opSmoothSubtraction(sdBox(posBox, vec3(0.8) + wave * 0.1), dObject, 0.2 * wave * wave);\n//  dObject = max(dObject, -sdBox(p - vec3(-0.5, 0, 5), vec3(0.5 + .1 * wave)));\n  d = min(d, dObject);\n\n  return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n  float d = 0.;\n\n  for (int i = 0; i < 60; i++) {\n    vec3 p = ro + d * rd;\n    float m = map(p);\n    d += m;\n\n    if (m < 0.001 || m > 100.) {\n      break;\n    }\n  }\n\n  return d;\n}\n\nvec3 GetNormal(vec3 p) {\n  vec2 e = vec2(0.01, 0.);\n\n  vec3 n = normalize(map(p) - vec3(\n    map(p - e.xyy),\n    map(p - e.yxy),\n    map(p - e.yyx)\n  ));\n\n  return n;\n}\n\nfloat GetLight(vec3 p, vec3 light) {\n  vec3 toLight = light - p;\n  vec3 n = GetNormal(p);\n  float dif = dot(n, normalize(toLight));\n  float d = RayMarch(p + 0.01 * n, normalize(toLight));\n\n  if (d < length(toLight)) {\n    dif *= 0.1;\n  }\n\n  return dif;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n  vec3 col = vec3(0.);\n  vec3 ro = vec3(0);\n  vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n  rd.xz *= rot2d(.01 * time);\n  ro.xz = (ro.xz - vec2(0, 5)) * rot2d(.01 * time) + vec2(0, 5);\n  float d = RayMarch(ro, rd);\n  vec3 p = ro + d * rd;\n  vec3 light = vec3(.5);\n  light.xz = (light.xz - vec2(0, 5)) * rot2d(.5 * time) + vec2(0, 5);\n//  light.xz *= rot2d(time);\n  float dif = GetLight(p, light);\n\n  col = vec3(dif);\n\n  fragColor = vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"}]}