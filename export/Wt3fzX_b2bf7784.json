{"ver":"0.1","info":{"id":"Wt3fzX","date":"1615700096","viewed":120,"name":"Blur filter - non separable","username":"kgussan","description":"[ GPU Optimization Nyumon sample ] Simple Blur filtering by non-separable method.\n\nreference : Simple Blur filtering by non-separable method\nhttps://www.shadertoy.com/view/3t3fzX","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["bloom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// simple blur filter\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col;\n    vec2 uv;\n    vec2 st;\n    const float blurSteps = 15.0;\n    //blur\n    for(float j = 0.0; j < blurSteps; j++){\n        for(float i = 0.0; i < blurSteps; i++){\n            uv = vec2(fragCoord.x - ((blurSteps-1.0)/2.0) + i,\n                      fragCoord.y - ((blurSteps-1.0)/2.0) + j );\n            if(uv.x<0.5){\n                uv.x = 0.5;\n            }else if(uv.x>iResolution.x-0.5){\n                uv.x = iResolution.x-0.5;\n            }\n            if(uv.y<0.5){\n                uv.y = 0.5;\n            }else if(uv.y>iResolution.y-0.5){\n                uv.y = iResolution.y-0.5;\n            }\n            st = uv / iResolution.xy;\n            col += texture( iChannel0, st );                  \n        }\n\t}\n    col /= (blurSteps*blurSteps);\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// create framebuffer size texture data\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, st);\n}","name":"Buffer A","description":"","type":"buffer"}]}