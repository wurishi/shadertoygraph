{"ver":"0.1","info":{"id":"ltGfDV","date":"1544081737","viewed":729,"name":"sharingan","username":"Kay","description":"draw a sharingan with 3 magatamas","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","naruto"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision mediump float;\nuniform vec2 u_Resolution;\nuniform float u_Distance;\n\nvec4 Color (float r, float g, float b, float a) {\n    return vec4(r / 255.0, g / 255.0, b / 255.0, a);\n}\n\nvec4 Circle (vec2 uv, vec2 position, float radius, float blur, vec4 color) {\n   float val = length(uv - position);\n   return vec4(mix(color.rgb, vec3(1.0), smoothstep(radius, radius + blur, val)), 1.0);\n}\n\nvec4 Ring (vec2 uv, vec2 position, float inner_radius, float outer_radius, vec4 color) {\n    float val = length(uv - position);\n    float blur = 0.01;\n    vec4 ring = Circle(uv, position, outer_radius, blur, color);\n    if (val < inner_radius + blur){\n        ring = vec4(mix(ring.rgb, vec3(1.0), smoothstep(inner_radius, inner_radius - blur, val)), 1.0);\n    }\n    return ring;\n}\n\nvec4 Magatama (vec2 uv, vec2 position){\n    float val = length(uv - position);\n    float radius = 0.035;\n    float blur = 0.01;\n    vec4 color = Color(0.0, 0.0, 0.0, 1.0);\n    vec4 magatama = Circle(uv, position, radius, blur, color);\n    return magatama;\n}\n\nvec4 Sharingan (vec2 uv, vec2 position) {\n\tfloat val = length(uv);\n    float radius = 0.3;\n    float outer_radius = 0.32;\n    float blur = 0.01;\n    vec4 red = Color(180.0, 2.0, 4.0, 1.0);\n    vec4 black = Color(0.0, 0.0, 0.0, 1.0);\n    vec4 circle_1 = Circle(uv, position, 0.3, blur, red);\n    vec4 circle_2 = Circle(uv, position, 0.05, blur, black);\n    vec4 ring_1 = Ring(uv, position, 0.3, outer_radius, black);\n    vec4 magatama = Magatama(uv, vec2(0.12));\n    vec4 result = circle_1 * circle_2 * ring_1 * magatama;\n\treturn result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv -= 0.5;\n\tuv.x *= iResolution.x / iResolution.y;\n\n\tfragColor = Sharingan(uv, vec2(0.0));\n\n}","name":"Image","description":"","type":"image"}]}