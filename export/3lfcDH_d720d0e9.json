{"ver":"0.1","info":{"id":"3lfcDH","date":"1591923551","viewed":424,"name":"reaction diffusion grid","username":"mds2","description":"first creates an abstract grid of rectangles, then runs a reaction-diffusion (based on rock-paper-scissors replicator dynamics) in each cell.","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["abstract","diffusion","feedback","reaction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EXAGGERATE 0 // set to 1 to wildly exagerate color diffs\n#define MAP_THROUGH_TEX 0 // set to 1 to map texture through texture\n#define EXTRA_MASK 0\n\nconst vec3 base_color = vec3(0.4, 0.2, 0.0);\nconst float base_color_weight = 0.0;\n\nconst mat3 color_xform = mat3(1.0, 0.5, 0.0,\n                              0.8, 0.2, 0.0,\n                              0.2, 0.2, 1.0);\n\n// most fun stuff to modify is in \"Buffer B\"\n// click that tab and start hacking.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rgb;\n    \n    float mag_mask = smoothstep(0.0, 0.1, length(col));\n#if EXTRA_MASK\n    mag_mask *= smoothstep(0.2, 0.6, col.r + 0.25 * col.g);\n#endif\n    \n    col = 2.0 * col - 0.5;\n    \n#if EXAGGERATE\n    col = sin(7.0 * col);\n#endif\n\n#if MAP_THROUGH_TEX\n    col = texture(iChannel1, col).rgb;\n#else\n    col = 0.5 * col;\n    col = transpose(color_xform) * col;\n#endif\n    \n    \n\n    col = mix(col, base_color, base_color_weight);\n    \n    col = col * mag_mask;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec2 to_uv(in vec2 in_pixels) {\n    return in_pixels / iResolution.xy;\n\t// return 0.1 + mod(vec2(0.8) + in_pixels / iResolution.xy, vec2(0.9));\n}\n\nvec2 fetch_dir(in vec2 in_pixels) {\n    vec2 dir = texture(iChannel0, to_uv(in_pixels)).rg;\n    dir = step(vec2(0.5), dir) * vec2(step(dir.y, dir.x), step(dir.x, dir.y));\n    return dir;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 p )\n{\n    float refresh_period = 25.0 * iResolution.y / 300.0;\n    float t = iTime - mod(iTime, refresh_period);\n    mat2 rotator = mat2(cos(t), sin(t),\n                          -sin(t), cos(t));\n    vec2 dir = step(vec2(0.985), texture(iChannel1, to_uv(rotator * p)).rg);\n    dir = vec2(step(dir.y, dir.x), step(dir.x, dir.y)) * dir;\n \n    if (mod(iTime, refresh_period) < 0.1) {\n      fragColor = vec4(dir, 0.0, 1.0);\n        return;\n    }\n   \n    if (dot(dir, dir) < 0.5) {\n\t    dir = step(vec2(0.9), texture(iChannel0, to_uv(p)).rg);\n    }\n     \n    if (dot(dir, dir) < 0.01) {\n    \tvec2 dir1 = vec2(1.0, 0.0);\n    \tvec2 dir2 = dir1.yx;\n        \n        \n    \tfloat val1 = max(abs(dot(dir1, fetch_dir(p + dir1))),\n                     \tabs(dot(dir1, fetch_dir(p - dir1))));\n        \n            \n    \tfloat val2 = max(abs(dot(dir2, fetch_dir(p + dir2))),\n        \t             abs(dot(dir2, fetch_dir(p - dir2))));\n        \n    \t\n        if (val1 > val2) {\n            val2 = 0.0;\n        } else {\n            val1 = 0.0;\n        }\n        \n        val1 = step(0.9, val1);\n        val2 = step(0.9, val2);\n        \n    \n    \tdir = mix(dir, dir1, val1);\n    \tdir = mix(dir, dir2, val2);\n    }\n    \n    dir = step(vec2(0.9), dir) * vec2(step(dir.y, dir.x), step(dir.x, dir.y));\n \n    fragColor = vec4(dir,0.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define ERODE 1\n#define CHAOS_FILL 0 // set to 1 for more interesting fill patterns.  Looks very nice with color_to_val_3\n\nconst float diffuse_weight = 0.75; // higher means less diffusion.  set greater than 0 and less than 1\nconst float react_weight = 0.25; // reaction speed : don't exceed 0.25.  higher is faster reaction\n\n// in the function \"greatest\" there are two calls to \"color_to_val_4\"\n// change those to \"color_to_val_1\", \"color_to_val_2\" etc to get different effects\n\nvec2 to_uv(in vec2 in_pixels) {\n    return in_pixels / iResolution.xy;\n\t// return 0.1 + mod(vec2(0.8) + in_pixels / iResolution.xy, vec2(0.9));\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 p )\n{\n    vec2 dir = step(vec2(0.98), texture(iChannel0, to_uv(p)).rg);\n\n    if (dot(dir, dir) > 0.81) {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n    float refresh_period = 25.0 * iResolution.y / 300.0;\n    \n    vec4 color = texture(iChannel2, to_uv(p));\n    \n    // color.rg = mod(10.0 * to_uv(p), vec2(1.0));\n    color.b = 1.0 - 0.5 * color.r - 0.5 * color.g;\n    \n    \n    if (mod(iTime, refresh_period) + 0.05 < 0.15 * refresh_period) { // about 3 frames at 60 fps\n\t    fragColor = vec4(1.0);\n        return;\n    }\n\n    if (mod(iTime, refresh_period) < 0.15 * refresh_period) {\n\t    fragColor = vec4(color.rgb, 1.0);\n        return;\n    }\n   \n    \n    color = diffuse_weight * texture(iChannel1, to_uv(p));\n    \n    float w = 0.25 * (1.0 - diffuse_weight);\n    color = color +  w * texture(iChannel1, to_uv(p + vec2(1.1, 0.0)));\n    color = color +  w * texture(iChannel1, to_uv(p + vec2(0.0, 1.1)));\n    color = color +  w * texture(iChannel1, to_uv(p - vec2(1.1, 0.0)));\n    color = color +  w * texture(iChannel1, to_uv(p - vec2(0.0, 1.1)));\n    \n#if ERODE\n    color.a = 1.0;\n#endif\n\n    color = color / color.a;\n    \n    color.rgb = color.rgb + react_weight * (1.0 * color.rgb * color.gbr - color.rgb * color.brg);//  + 0.005;\n    \n    float delta = 1.5 - dot(color.rgb, vec3(1.0));\n\n    color += 0.005 * delta;\n    \n \n    fragColor = vec4(color.rgb,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}