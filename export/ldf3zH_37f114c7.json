{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Earth globe shader (without any textures)\n// Copyright (c) 2013 Andrew Baldwin (baldand)\n// License = Attribution-NonCommercial-ShareAlike (http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US)\n\n// FBM Section below ------\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nmat3 m3 = mat3( 0.00,  0.80,  0.60,\n               -0.80,  0.36, -0.48,\n               -0.60, -0.48,  0.64 );\n\nfloat fbm( vec3 p )\n{\n    float f = 0.0;\n\n    f += 0.5000*noise( p ); p = m3*p*2.02;\n    f += 0.2500*noise( p ); p = m3*p*2.03;\n    f += 0.1250*noise( p ); p = m3*p*2.01;\n    f += 0.0625*noise( p );\n\n    return f/0.9375;\n}\n\n// END-NICE-IQ-FBM-SECTION\n\n#define WIDTH 128.\n#define HEIGHT 64.\n#define HEIGHTM1 63\n\nvoid d8x8(in vec2 c, out vec4 w)\n{\n\tvec2 m = (c*vec2(WIDTH,HEIGHT));\n\tivec2 p = ivec2(m);\n\tp = ivec2(p.x,HEIGHTM1-p.y);\n\tivec2 p4 = p/4;\n\tint d1=0;\n\tint d2=0;\n\tint e[33];\n\tif (p4.y<4) {\n\t\tif(p4.y==0){e[0]=0; e[1]=0; e[2]=0; e[3]=0; e[4]=0; e[5]=0; e[6]=0; e[7]=3; e[8]=31; e[9]=95; e[10]=71; e[11]=15; e[12]=191; e[13]=207; e[14]=12; e[15]=0; e[16]=0; e[17]=0; e[18]=8; e[19]=0; e[20]=0; e[21]=8; e[22]=0; e[23]=0; e[24]=2; e[25]=0; e[26]=0; e[27]=0; e[28]=0; e[29]=0; e[30]=0; e[31]=0;}\n\t\telse if (p4.y==1){e[0]=0; e[1]=3; e[2]=15; e[3]=14; e[4]=3; e[5]=1717; e[6]=239; e[7]=34081; e[8]=62962; e[9]=199; e[10]=61440; e[11]=65399; e[12]=65535; e[13]=65534; e[14]=34816; e[15]=0; e[16]=0; e[17]=24579; e[18]=15; e[19]=4; e[20]=16; e[21]=3075; e[22]=68; e[23]=127; e[24]=4095; e[25]=53247; e[26]=255; e[27]=207; e[28]=47; e[29]=15; e[30]=9; e[31]=11;}\n\t\telse if (p4.y==2){e[0]=57344; e[1]=28944; e[2]=65492; e[3]=65520; e[4]=65535; e[5]=65535; e[6]=65535; e[7]=65230; e[8]=57344; e[9]=12775; e[10]=51212; e[11]=13056; e[12]=59520; e[13]=0; e[14]=41984; e[15]=2; e[16]=304; e[17]=32460; e[18]=32743; e[19]=45055; e[20]=65535; e[21]=65535; e[22]=57343; e[23]=49151; e[24]=65535; e[25]=65535; e[26]=65535; e[27]=65535; e[28]=65532; e[29]=65520; e[30]=65332; e[31]=65344;}\n\t\telse if (p4.y==3){e[0]=0; e[1]=0; e[2]=0; e[3]=0; e[4]=29456; e[5]=65535; e[6]=65535; e[7]=65535; e[8]=52991; e[9]=65535; e[10]=61336; e[11]=128; e[12]=0; e[13]=0; e[14]=0; e[15]=21776; e[16]=2559; e[17]=8191; e[18]=65534; e[19]=65531; e[20]=65296; e[21]=65535; e[22]=65535; e[23]=65535; e[24]=65535; e[25]=65535; e[26]=65535; e[27]=65535; e[28]=36572; e[29]=0; e[30]=51200; e[31]=0;}\n\t}else if(p4.y<8) {\n\t\tif(p4.y==4){e[0]=0; e[1]=0; e[2]=0; e[3]=0; e[4]=0; e[5]=65399; e[6]=65535; e[7]=65535; e[8]=65535; e[9]=61064; e[10]=0; e[11]=0; e[12]=0; e[13]=0; e[14]=0; e[15]=1904; e[16]=59663; e[17]=45376; e[18]=53040; e[19]=15863; e[20]=40143; e[21]=65535; e[22]=65535; e[23]=65535; e[24]=65535; e[25]=65535; e[26]=65230; e[27]=64578; e[28]=37412; e[29]=0; e[30]=0; e[31]=0;}\n\t\telse if (p4.y==5){e[0]=0; e[1]=0; e[2]=0; e[3]=0; e[4]=0; e[5]=12288; e[6]=65395; e[7]=64648; e[8]=57856; e[9]=0; e[10]=0; e[11]=0; e[12]=0; e[13]=0; e[14]=17; e[15]=30719; e[16]=65535; e[17]=36863; e[18]=36863; e[19]=32635; e[20]=64476; e[21]=65528; e[22]=65527; e[23]=65535; e[24]=65527; e[25]=65535; e[26]=53230; e[27]=4096; e[28]=0; e[29]=0; e[30]=0; e[31]=0;}\n\t\telse if (p4.y==6){e[0]=0; e[1]=0; e[2]=0; e[3]=0; e[4]=0; e[5]=0; e[6]=4352; e[7]=52336; e[8]=2180; e[9]=512; e[10]=0; e[11]=0; e[12]=0; e[13]=0; e[14]=12561; e[15]=65535; e[16]=65535; e[17]=65535; e[18]=65535; e[19]=48607; e[20]=65504; e[21]=34816; e[22]=12561; e[23]=60552; e[24]=29457; e[25]=52454; e[26]=16; e[27]=0; e[28]=0; e[29]=0; e[30]=0; e[31]=0;}\n\t\telse if (p4.y==7){e[0]=0; e[1]=0; e[2]=0; e[3]=0; e[4]=0; e[5]=0; e[6]=0; e[7]=0; e[8]=8448; e[9]=22399; e[10]=52991; e[11]=204; e[12]=0; e[13]=0; e[14]=4096; e[15]=65280; e[16]=65296; e[17]=65535; e[18]=65535; e[19]=65535; e[20]=52352; e[21]=0; e[22]=4096; e[23]=1024; e[24]=17; e[25]=8; e[26]=78; e[27]=33792; e[28]=0; e[29]=0; e[30]=0; e[31]=0;}\n\t}else if(p4.y<12) {\n\t\tif (p4.y==8){e[0]=0; e[1]=0; e[2]=0; e[3]=0; e[4]=0; e[5]=0; e[6]=0; e[7]=0; e[8]=0; e[9]=65535; e[10]=65535; e[11]=53247; e[12]=3839; e[13]=0; e[14]=0; e[15]=0; e[16]=0; e[17]=65399; e[18]=65535; e[19]=61132; e[20]=0; e[21]=0; e[22]=0; e[23]=0; e[24]=0; e[25]=33808; e[26]=53504; e[27]=4104; e[28]=1840; e[29]=132; e[30]=0; e[31]=0;}\n\t\telse if (p4.y==9){e[0]=0; e[1]=0; e[2]=0; e[3]=0; e[4]=0; e[5]=0; e[6]=0; e[7]=0; e[8]=0; e[9]=30481; e[10]=65535; e[11]=65535; e[12]=60620; e[13]=0; e[14]=0; e[15]=0; e[16]=0; e[17]=30711; e[18]=65535; e[19]=61064; e[20]=1228; e[21]=0; e[22]=0; e[23]=0; e[24]=0; e[25]=0; e[26]=1; e[27]=2047; e[28]=35295; e[29]=136; e[30]=0; e[31]=0;}\n\t\telse if (p4.y==10){e[0]=0; e[1]=0; e[2]=0; e[3]=0; e[4]=0; e[5]=0; e[6]=0; e[7]=0; e[8]=0; e[9]=4369; e[10]=65535; e[11]=65228; e[12]=0; e[13]=0; e[14]=0; e[15]=0; e[16]=0; e[17]=29489; e[18]=65518; e[19]=32768; e[20]=32768; e[21]=0; e[22]=0; e[23]=0; e[24]=0; e[25]=0; e[26]=30579; e[27]=65530; e[28]=65471; e[29]=52974; e[30]=0; e[31]=0;}\n\t\telse if (p4.y==11){e[0]=0; e[1]=0; e[2]=0; e[3]=0; e[4]=0; e[5]=0; e[6]=0; e[7]=0; e[8]=0; e[9]=13107; e[10]=61128; e[11]=32768; e[12]=0; e[13]=0; e[14]=0; e[15]=0; e[16]=0; e[17]=0; e[18]=0; e[19]=0; e[20]=0; e[21]=0; e[22]=0; e[23]=0; e[24]=0; e[25]=0; e[26]=8192; e[27]=0; e[28]=28928; e[29]=52224; e[30]=0; e[31]=36;}\n\t}else{\n\t\tif (p4.y==12){e[0]=0; e[1]=0; e[2]=0; e[3]=0; e[4]=0; e[5]=0; e[6]=0; e[7]=0; e[8]=0; e[9]=14129; e[10]=0; e[11]=0; e[12]=0; e[13]=0; e[14]=0; e[15]=0; e[16]=0; e[17]=0; e[18]=0; e[19]=0; e[20]=0; e[21]=0; e[22]=0; e[23]=0; e[24]=0; e[25]=0; e[26]=0; e[27]=0; e[28]=0; e[29]=0; e[30]=0; e[31]=32768;}\n\t\telse if (p4.y==13){e[0]=0; e[1]=0; e[2]=0; e[3]=0; e[4]=0; e[5]=0; e[6]=0; e[7]=0; e[8]=0; e[9]=0; e[10]=6; e[11]=128; e[12]=0; e[13]=0; e[14]=0; e[15]=0; e[16]=0; e[17]=0; e[18]=16; e[19]=243; e[20]=255; e[21]=255; e[22]=200; e[23]=0; e[24]=2; e[25]=0; e[26]=0; e[27]=0; e[28]=0; e[29]=0; e[30]=0; e[31]=0;}\n\t\telse if (p4.y==14){e[0]=0; e[1]=0; e[2]=2; e[3]=15; e[4]=31; e[5]=15; e[6]=31; e[7]=255; e[8]=223; e[9]=1023; e[10]=52975; e[11]=12; e[12]=0; e[13]=7; e[14]=127; e[15]=2047; e[16]=4095; e[17]=4095; e[18]=4095; e[19]=40959; e[20]=65535; e[21]=65535; e[22]=53247; e[23]=65535; e[24]=65535; e[25]=65535; e[26]=65535; e[27]=65535; e[28]=65535; e[29]=45055; e[30]=4078; e[31]=2048;}\n\t\telse if (p4.y==15){e[0]=255; e[1]=8447; e[2]=63487; e[3]=65535; e[4]=65535; e[5]=65535; e[6]=65535; e[7]=65535; e[8]=65535; e[9]=65535; e[10]=65535; e[11]=65535; e[12]=65535; e[13]=65535; e[14]=65535; e[15]=65535; e[16]=65535; e[17]=65535; e[18]=65535; e[19]=65535; e[20]=65535; e[21]=65535; e[22]=65535; e[23]=65535; e[24]=65535; e[25]=65535; e[26]=65535; e[27]=65535; e[28]=65535; e[29]=65535; e[30]=52991; e[31]=255;}\n\t}\n\tif (p4.x<16) {\n\t\tif (p4.x<8) {\n\t\t\tfor (int x=0;x<8;x++){\n\t\t\t\tif (x==p4.x) { d1 = e[x]; d2 = e[x+1]; }\n\t\t\t}\t\t\n\t\t} else {\n\t\t\tfor (int x=8;x<16;x++){\n\t\t\t\tif (x==p4.x) { d1 = e[x]; d2 = e[x+1]; }\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (p4.x<24) {\n\t\t\tfor (int x=16;x<24;x++){\n\t\t\t\tif (x==p4.x) { d1 = e[x]; d2 = e[x+1]; }\n\t\t\t}\t\t\n\t\t} else {\n\t\t\tfor (int x=24;x<32;x++){\n\t\t\t\tif (x==p4.x) { d1 = e[x]; d2 = e[x+1]; }\n\t\t\t}\n\t\t}\n\t}\n\tivec2 pf = p-p4*4;\n\tint x=pf.y*4+pf.x;\n\tint x2=pf.y*4;\n\tint xl=pf.y*4+4;\n\tint xo = pf.x;\n\tw=vec4(0.);\n\tint limit=32768;\n\tfor (int b=0;b<16;b++) {\n\t\tif (d1>=limit) {\n\t\t\td1-=limit;\n\t\t\tif (b<xl) {\n\t\t\t\tif (b==x) {\n\t\t\t\t\tw.x=1.;\n\t\t\t\t} else if ((b-x)==1) {\n\t\t\t\t\tw.y=1.;\n\t\t\t\t} else if ((b-x)==2) {\n\t\t\t\t\tw.z=1.;\n\t\t\t\t} else if ((b-x)==3) {\n\t\t\t\t\tw.w=1.;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (d2>=limit) {\n\t\t\td2-=limit;\n\t\t\tif (b<xl) {\n\t\t\t\tif (b==x2) {\n\t\t\t\t\tif (xo==3) w.y=1.;\n\t\t\t\t\telse if (xo==2) w.z=1.;\n\t\t\t\t\telse if (xo==1) w.w=1.;\n\t\t\t\t} else if ((b-x2)==1) {\n\t\t\t\t\tif (xo==3) w.z=1.;\n\t\t\t\t\telse if (xo==2) w.w=1.;\n\t\t\t\t} else if ((b-x2)==2) {\n\t\t\t\t\tif (xo==3) w.w=1.;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlimit/=2;\n\t}\n}\n\nfloat bicubic( vec2 c, vec2 p )\n{\n    vec4 s=vec4(0.);\n    vec4 d=vec4(0.);\n\tvec2 cs=c*vec2(WIDTH,HEIGHT);\n    vec2 f=fract(cs); \n\tvec4 w;\n\tfor(int m=-1;m<=2;m++) {\n\t\tfloat f2=-(float(m)-f.y);\n\t\tf2=f2*.5;\n\t\tf2=mix(1.+f2,1.-f2,step(0.,f2));\n\t\td8x8(c+vec2(-p.x,p.y*float(m)),w);\n\t\tvec4 f1=vec4(-1.,0.,1.,2.);\n\t\tf1 -= f.x;\n\t\tf1 *= .5;\n\t\tf1 = mix(1.+f1,1.-f1,step(0.,f1));\n\t\tf1*=f2;\n\t\ts+=w*f1;\n\t\td+=f1;\n    }\n\treturn ((s.x+s.y+s.z+s.w)/(d.x+d.y+d.z+d.w));\n}\n\nfloat intersectsphere(vec3 ro, vec3 rd, float size, out float t0, out float t1, out vec3 normal)\n{\n\tfloat a = dot(rd,ro);\n\tfloat b = dot(ro,ro);\n\tfloat d = a*a - b + size*size;\n\tif (d>=0.) {\n\t\tfloat sd = sqrt(d);\n\t\tfloat ta = -a + sd;\n\t\tfloat tb = -a - sd;\n\t\tt0 = min(ta,tb);\n\t\tt1 = max(ta,tb);\n\t\tif (t0<0.) t0=t1;\n\t\tif (t0<0.) d=-0.1;\n\t\tnormal = ro+t0*rd;\n\t}\n\treturn d;\n}\n\nfloat intersect(vec3 boxPos, vec3 ro, vec3 rd, out vec3 intersection, out vec3 normal, out int material, out float t, out float ta) \n{\n\tfloat tb0=0.0;\n\tfloat tb1=0.0;\n\tvec3 earthnormal;\n\tfloat dearth = intersectsphere(ro-boxPos,rd,45.,tb0,tb1,earthnormal);\n\tfloat tf = 0.0;\n\tfloat d = dearth;\n\tvec3 atmosnormal;\n\tfloat ta0=0.0;\n\tfloat ta1=0.0;\n\tfloat datmos = intersectsphere(ro-boxPos,rd,45.2,ta0,ta1,atmosnormal);\n\tta = ta0;\n\tfloat ts0=0.0;\n\tfloat ts1=0.0;\n\tvec3 skynormal;\n\tfloat dsky = intersectsphere(ro-boxPos,rd,2000.,ts0,ts1,skynormal);\n\tmaterial = 2; // Sky\n\td = dsky;\n\tt = ts0;\n\tif (dearth>0.) {\n\t\tt = tb0;\n\t\td = dearth;\n\t\tnormal = earthnormal;\n\t\tmaterial = 1; // Earth\n\t\tif (t<0.) { t=ts0; d=-0.1; }\n\t} else if (datmos>0.) {\n\t\t// Passed through atmosphere, did not hit surface\n\t\tt = ta0;\n\t\tta = ta1;\n\t\tnormal = atmosnormal;\n\t\tmaterial = 0;\n\t}\n\tintersection = ro+t*rd;\n\treturn d;\n}\n\t\t\t\t\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat day = iTime * .1;\n\tfloat rotspeed = iTime*.01+(10.*iMouse.x)/iResolution.x;\n\tfloat elevate = 0.;//100.*iMouse.y/iResolution.y-50.;\n\tvec3 light = vec3(2000.*sin(day),0.,2000.*cos(day));;\n\tvec3 boxPos = vec3(0.,0.,0.);\n\t// Geosync \n\tfloat radius = 145.-90.+90.*iMouse.y/iResolution.y;\n\tvec3 up = vec3(0.,1.,0.);\n\tvec3 eye = vec3((radius)*sin(rotspeed),elevate,(radius)*cos(rotspeed));\n\tvec3 screen = vec3((radius-1.)*sin(rotspeed),1.0*elevate,(radius-1.)*cos(rotspeed));\n\t\n\t// Low orbit\n\t/*float radius = 45.8;\n\tvec3 up = vec3(sin(rotspeed),0.,cos(rotspeed));\n\tvec3 eye = vec3((radius)*sin(rotspeed+.02),elevate,(radius)*cos(rotspeed+.02));\n\tvec3 screen = vec3((radius)*sin(rotspeed),1.0*elevate,(radius)*cos(rotspeed));\n\t*/\n    vec2 screenSize = vec2(iResolution.x/iResolution.y,1.0);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 offset = screenSize * (uv - 0.5);\n\tvec3 right = cross(up,normalize(screen - eye));\n\tvec3 ro = screen + offset.y*up + offset.x*right;\n\tvec3 rd = normalize(ro - eye);\n\tvec3 i = vec3(0.);\n\tvec3 norm = vec3(0.);\n\tint m,m2;\n\tfloat d,lightd,ra,global,direct,shade,t,tlight,tatmos;\n\tvec3 lrd,i2,norm2;\n\tvec3 c=vec3(0.);\n\tvec3 ca=vec3(0.);\n\tfloat lra=1.;\n\t// Find the direct ray hit\n\td = intersect(boxPos,ro,rd,i,norm,m,t,tatmos);\n\t// Check for shadows to the light\n\tlrd = normalize(light-i);\n\ttlight = length(light-i);\n\tif (m==0) {\n\t\tc = vec3(0.,.7,1.)*length(rd*t-rd*tatmos)*.01;\n\t}\n\tif (m==1) { ra=0.2; \n\t\t\t   vec2 p=vec2(1./128.,1./64.);\n\t\t\t   vec3 i = i - boxPos;\n\t\t\t   vec3 ia = ro+tatmos*rd - boxPos;\n\t\t\t   vec2 uva = vec2(.5-atan(ia.x,ia.z)/6.282,(ia.y*.01+.5));\n\t\t\t   vec2 uv = vec2(.5-atan(i.x,i.z)/6.282,(i.y*.01+.5));\n\t\t\t   float w = bicubic(uv,p);\n\t\t\t   float n = fbm(vec3(uv*vec2(500.,200.),1.292));\n\t\t\t   float n2 = fbm(.07*i-vec3(6.9,-8.3,2.9));//vec3(uv*vec2(10.,5.),1.492));\n\t\t\t   float n3 = fbm(vec3(uv*vec2(5000.,2000.),1.232));\n\t\t\t   float o = .1-.2*n-.01*n3;\n\t\t\t   float e = -.3*smoothstep(.1,.05,length(uv-vec2(.52,.75))); // Make europe clearer\n\t\t\t   float l = smoothstep(0.27,.29,w+o+e);\n\t\t\t   vec3 water = vec3(0.,0.,.025-n*.01);\n\t\t\t   vec3 desert = mix(vec3(0.04,0.008,0.004),vec3(0.06,0.04,0.01),floor(n*10.)*.1+n3);\n\t\t\t   vec3 forest = mix(vec3(0.,0.006,0.001),vec3(0.,0.01,0.001),floor((n)*4.)*.25+n3);\n\t\t\t   float climate = clamp(-n2*2.5+2.1-3.*e,0.,1.);\n\t\t\t   vec3 warm = mix(desert,forest,climate);\t\n\t\t\t   vec3 snow = vec3(.1-.05*n);\n\t\t\t   float isCoast = 1.-2.*abs(l-.5)-2.*e;\n\t\t\t   vec3 lights = step(.5,noise(i*10.0))*10.*mix(vec3(0.),vec3(1.,1.,.5),smoothstep(.7,.8,n+.2*isCoast)*smoothstep(.5,.3,n2-.2*isCoast)*smoothstep(.35,.2,abs(uv.y-.5))*n3);\n\t\t\t   norm = norm+2.*n*l;\n\t\t\t   float inshadow = intersect(boxPos,i+norm*.0001,lrd,i2,norm2,m2,t,tatmos);\n\t\t\t   lightd = tatmos;\n\t\t\t   if (t>tlight) lightd=1.0;\n\t\t\t   // Colouring\n\t\t\t   global = .5;\n\t\t\t   direct = max( (1./length(lrd)) * dot( lrd, norm) ,0.0);\n\t\t\t   shade = global + direct*lightd;\n\t\t\t   vec3 land = mix(warm, snow,smoothstep(.6,.7,abs(uv.y-.5)*2.+.5*o-.2*n2+.1+.01*sin(iTime)));\n\t\t\t   vec3 wc = mix(water,land+smoothstep(.1,0.,shade-10.*n)*lights,l);\n\t\t\t   c = 2.*shade*wc;\t\n\t\t\t   float clouds = fbm(ia*.2+iTime*.05)-.1*n2;\n\t\t\t   float clouds2 = .1*clouds+fbm(ia*clouds+n3+n2+n)*smoothstep(.3,.4,clouds);\n\t\t\t   c=mix(c,vec3(.1*shade*smoothstep(.5,.6,clouds2)),smoothstep(.5,.9,clouds2));\n\t}\n\tif (m==2) {\n\t\tfloat fromlight = 10.*clamp(1.-.02*length(i-light),0.,1.);\n\t\tc = vec3(vec3(1.,1.,.5)*fromlight);\n\t}\n\tca += lra*c;\n\tfragColor = vec4(ca/(1.+ca),1.);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldf3zH","date":"1362520248","viewed":484,"name":"Globe","username":"baldand","description":"An attempt to make a model earth globe without using any textures.\nMouse up/down zoom in/out.\nMouse left/right rotates.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["procedural","3d","earth"],"hasliked":0,"parentid":"","parentname":""}}