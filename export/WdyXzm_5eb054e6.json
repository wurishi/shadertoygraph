{"ver":"0.1","info":{"id":"WdyXzm","date":"1573601195","viewed":142,"name":"Quadratic Bezier - over/under","username":"vegardno","description":"Find distance to (infinitely extended) quadratic bezier while also calculating whether the point is \"over or under\" the curve (AKA \"inside or outside\")\n\nHacky; NOT optimized.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","bezier","quadratic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// based on https://www.shadertoy.com/view/MlKcDD\n\n\n// signed distance to a quadratic bezier\nfloat sdBezier(vec2 pos, vec2 A, vec2 B, vec2 C, out vec3 col)\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    vec2 e = 2. * (C - B);\n\n    float kk = 1.0 / dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n\n    float res = 0.0;\n\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n\n    col = 1. - vec3(0.1,0.4,0.7);\n    \n    if(h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h, -h) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = uv.x + uv.y - kx;\n      \t//t = clamp( t, 0.0, 1.0 );\n\n        vec2 tangent = (1. - t) * c + t * e;\n        \n        // 1 root\n        vec2 qos = d + (c + b*t)*t;\n        res = length(qos);\n\n        // inside if true\n        if (tangent.x * qos.y < tangent.y * qos.x)\n            col = 1. - col;\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3 t = vec3(m + m, -n - m, n - m) * z - kx;\n        //t = clamp( t, 0.0, 1.0 );\n\n        // 3 roots\n        vec2 qos1 = d + (c + b*t.x)*t.x;\n        vec2 tangent1 = (1. - t.x) * c + t.x * e;\n        float dis1 = dot(qos1,qos1);\n\n        vec2 qos2 = d + (c + b*t.y)*t.y;\n\t\tvec2 tangent2 = (1. - t.y) * c + t.y * e;\n        float dis2 = dot(qos2,qos2);\n\n        vec2 qos3 = d + (c + b*t.z)*t.z;\n\t\tvec2 tangent3 = (1. - t.z) * c + t.z * e;\n        float dis3 = dot(qos3,qos3);\n\n        vec2 qos;\n        vec2 tangent;\n        if (dis1 < dis2) {\n            if (dis1 < dis3) {\n                qos = qos1;\n                tangent = tangent1;\n            } else {\n                qos = qos3;\n                tangent = tangent3;\n            }\n        } else {\n            if (dis2 < dis3) {\n                qos = qos2;\n                tangent = tangent2;\n            } else {\n                qos = qos3;\n                tangent = tangent3;\n            }\n        }\n        \n        res = length( qos );\n\n\t\tif (tangent.x * qos.y < tangent.y * qos.x)\n            col = 1. - col;\n    }\n    \n    return res;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n\tvec2 v0 = vec2(-.5 + .1 * cos(1. * iTime), .1 * sin(1. * iTime));\n    vec2 v1 = vec2( .0 + .3 * cos(2. * iTime), .0);\n    vec2 v2 = vec2( .5 + .1 * cos(3. * iTime), .1 * sin(3. * iTime));\n\n    vec3 col;\n    float d = sdBezier( p, v0,v1,v2, col );\n\n\tcol *= 1.0 - exp(-4.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}