{"ver":"0.1","info":{"id":"mtSXDD","date":"1676105089","viewed":91,"name":"Optical flow attempt","username":"rcmz","description":"Hue = optical flow direction\nSaturation = optical flow strength","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["opticalflow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float window = 4.0;\nconst float look = 4.0;\nconst float dlook = 1.0;\n\nconst float pi =  3.14159265358979323846;\n\nvec2 uv(vec2 fragCoord) {\n    return fragCoord / iResolution.xy;\n}\n\nfloat distance2(vec3 a, vec3 b) {\n    vec3 d = b - a;\n    return dot(d, d);\n}\n\nfloat grey(vec4 color) {\n    return (color.r + color.g + color.b) / 3.0;\n}\n\nvec3 hsvToRgb(vec3 hsv) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(hsv.xxx + K.xyz) * 6.0 - K.www);\n    return hsv.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), hsv.y);\n}\n\nbool updateBest(vec2 fragCoord, vec2 lxy, inout vec3 best) {\n    float ld = 0.0;\n    \n    for (float wx = -window; wx <= window; wx++)\n    for (float wy = -window; wy <= window; wy++) {\n        vec2 wxy = vec2(wx, wy);\n        vec3 current = texture(iChannel0, uv(fragCoord + wxy)).rgb;\n        vec3 previous = texture(iChannel1, uv(fragCoord + wxy + lxy)).rgb;\n        float d = distance2(current, previous);\n\n        if (d == 0.0) {\n            best.xy = lxy;\n            best.z = 0.0;\n            return true;\n        }\n\n        //d *= 1.0 - (length(wxy) / (window * sqrt(2.0)));\n        ld += d;\n    }\n    \n    //ld *= 1.0 + length(lxy) / (look * sqrt(2.0));\n\n    if (ld < best.z) {\n        best.xy = lxy;\n        best.z = ld;\n    }\n    \n    return false;\n}\n\nvec3 getBest(vec2 fragCoord) {\n    vec3 best = vec3(0, 0, 1000000);\n    \n    if (updateBest(fragCoord, vec2(0), best)) {\n        return best;\n    }\n\n    for (float lx = -look; lx <= look; lx += dlook)\n    for (float ly = -look; ly <= look; ly += dlook) {\n        vec2 lxy = vec2(lx, ly);\n        \n        if (lxy == vec2(0)) {\n            continue;\n        }\n        \n        if (updateBest(fragCoord, lxy, best)) {\n            return best;\n        }\n    }\n    \n    return best;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 proportionalUV = fragCoord / vec2(iResolution.y);\n    vec2 colorWheelCenter = vec2(0.1);\n    float colorWheelRadius = 0.075;\n    vec2 colorWheelDelta = proportionalUV - colorWheelCenter;\n\n    if (length(colorWheelDelta) < colorWheelRadius) {\n        float angle = atan(colorWheelDelta.y, colorWheelDelta.x) / (pi * 2.0);\n        float magnitude = length(colorWheelDelta) / colorWheelRadius;\n        fragColor.rgb = hsvToRgb(vec3(angle, 1, magnitude));\n    } \n    \n    else {\n        vec3 best = getBest(fragCoord);\n        vec2 lxy = -best.xy;\n        float angle = atan(lxy.y, lxy.x) / (pi * 2.0);\n        float magnitude = length(lxy) / (look * sqrt(2.0));\n        float confidance = 1.0; // - smoothstep(0.0, 10.0, best.z);\n        fragColor.rgb = hsvToRgb(vec3(angle, magnitude, 1));\n        fragColor *= grey(texture(iChannel0, uv(fragCoord)));\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n   \n    //fragColor = texture(iChannel0, uv);\n    \n    float t = iTime * 1.0;\n    vec2 center = (vec2(cos(t), sin(t)) * 0.7 + 1.0) / 2.0;\n    float radius = 0.1;\n    \n    uv = (uv - 0.5) * vec2(iResolution.x / iResolution.y, 1) + 0.5;\n    vec2 delta = uv - center;\n    if (length(delta) < radius) {\n        fragColor = texture(iChannel1, uv - center);\n    } else {\n        fragColor = texture(iChannel2, uv);\n    }\n    \n    //fragColor = texture(iChannel3, uv - center);\n}","name":"Buffer B","description":"","type":"buffer"}]}