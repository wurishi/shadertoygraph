{"ver":"0.1","info":{"id":"3tffD2","date":"1597715611","viewed":83,"name":"esfera-sol","username":"jorge2017a1","description":"usar Mouse","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["esferasol"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a1-\n//referencia\n// Mechanical Brain\n//https://www.shadertoy.com/view/Xt2XDh\n\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n\n\nfloat tau = atan(1.0) * 8.0;\n\n    \n//Torus function\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\n//Sphere function\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\n\n\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat sdCylinderYZ( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.yz),p.x)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdCylinderXZ( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdCylinderXY( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n///---------------------------------------\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) \n{\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) \n{\n    return max(distA, -distB);\n}\n\n\nvec2 opU(vec2 d1, vec2 d2 ) {\n  vec2 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n///------------------------------------\n\n\nvec3 rotate_y(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\tca, 0.0, -sa,\n\t\t0.0, 1.0, 0.0,\n\t\tsa, 0.0, ca);\n}\n\nvec3 rotate_x(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t1.0, 0.0, 0.0,\n\t\t0.0, ca, -sa,\n\t\t0.0, sa, ca);\n}\n\n\nvec3 rotate_z(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); \n    float sa = sin(angle);\n\treturn v*mat3(\n\t\tca, -sa, 0.0,\n\t\tsa, ca, 0.0,\n\t\t0.0, 0.0, 1.0);\n}\n\n///-----------------------------------------\n\n\nvec3 LightShading(vec3 Normal,vec3 toLight,vec3 toEye,vec3 color)\n{\n    vec3 toReflectedLight=reflect(-toLight, Normal);\n    vec3 diffuse = max(0.,dot(Normal,-toLight))*color;\n    //vec3 specular = pow(max(0.,dot(Normal,normalize(-toLight-V))),100.)*vec3(1.,1.,1.); \n    float specularf=max(dot(toReflectedLight, toEye),0.0);\n    specularf=pow(specularf, 100.0);\n    vec3 specular =specularf*vec3(1.0);\n    \n    return diffuse + specular;\n}\n\n\n\n///-----------------------------------\nvec2 rotate(vec2 v, float a) {\n   return vec2(cos(a)*v.x + sin(a)*v.y, -sin(a)*v.x + cos(a)*v.y);\n}\n//----------------------------------------------------\n\nmat2 rotate(float a) \n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\n\n//==== Distance field operators/functions by iq. ====\nfloat opU( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1, d2);\n}\n\nfloat opI( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\n//polynomial smooth minimum\nfloat opSU( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n//==== Distance field operators/functions by iq. ====\n\nmat2 genRotMat(float val){\n\treturn mat2(cos(val),-sin(val),sin(val),cos(val));\n}\n\n\n//----------------------------------------------\n\nvec3 opAngRep( vec3 p, float a )\n{\n\tvec2 polar = vec2(atan(p.y, p.x), length(p.xy));\n    polar.x = mod(polar.x + a / 2.0, a) - a / 2.0;\n    \n    return vec3(polar.y * vec2(cos(polar.x),sin(polar.x)), p.z);\n}\n\n\n\n\nfloat esferapicos(vec3 p, float numItem)\n{\n    //Spokes\n    \n    vec3 pp;\n    p.xy *= genRotMat(iTime);/// genera la rotacion del engrane\n    \n    vec3 rep2 = opAngRep(p, tau / numItem);\n    \n\tfloat sdsp1=sdSphere(rep2, 2.0);   \n    float sdb1= sdBox(rep2, vec3(3.5,0.2,0.1));\n    \n    pp=rotate_y(rep2, radians(45.0));\n    float sdb2= sdBox(pp, vec3(3.5,0.2,0.1));\n    \n    pp=rotate_y(rep2, radians(60.0));\n    float sdb3= sdBox(pp, vec3(3.5,0.2,0.1));\n    \n    pp=rotate_y(rep2, radians(80.0));\n    float sdb4= sdBox(pp, vec3(3.5,0.2,0.1));\n    \n    pp=rotate_y(rep2, radians(20.0));\n    float sdb5= sdBox(pp, vec3(3.5,0.2,0.1));\n    \n    \n    float res = opSU(sdsp1, sdb1,0.1);\n  \n    res = opSU(res, sdb2,0.1);\n    res = opSU(res, sdb3,0.1);\n    res = opSU(res, sdb4,0.1);\n    res = opSU(res, sdb5,0.1);\n    \n\treturn  res;\n}\n///------------------------\nfloat GetDist(vec3 p  ) \n{\t\n\n    float d, dif1, dif2;\n    vec2 res;\n    vec3 pp,p1, p2,p3; \n    res = vec2(9999, 0);\n  \n    \n    float planeDist1 = p.y+10.0;  //piso inf\n    float planeDist2 = 50.0-p.y;  //piso sup\n    float planeDist3 = p.x+30.0; //pared izq\n    float planeDist4 = 30.0-p.x;  //pared der\n    float planeDist5 = -p.z+40.0;  //pared atras\n    float planeDist6 = p.z+40.0;  //pared atras\n       \n    res =opU(res, vec2(planeDist1,100)); //inf\n  /*  res =opU(res, vec2(planeDist2,100)); \n    res =opU(res, vec2(planeDist3,104)); \n    res =opU(res, vec2(planeDist4,104)); \n  \tres =opU(res, vec2(planeDist5,105)); \n    res =opU(res, vec2(planeDist6,105)); \n  */\n    \n    \n    \n    float  sp1= esferapicos(p-vec3(0.0,5.0,0.0), 10.0);\n        \n    \n    \n    res =opU(res, vec2(sp1,106.0)); \n    \n    \n        \n    res =opU(res, vec2(1.0,0.0)); \n    \n    \n    d = res.x;\n    mObj.dist = res.x;\n    mObj.idcolor = res.y;\n    \n    return d;\n}\n\n\n\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd) \n{\n\t\n    // The extra distance might force a near-plane hit, so\n    // it's set back to zero.\n    float dO = 0.; \n    //Determines size of shadow\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        \n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n        dO += dS;\n        \n    }\n    \n    return dO;\n}\n\n\n\n\n//---------------------------------------------------\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\n\n\n\nfloat GetLightPar(vec3 p, vec3 plig) {\n    vec3 lightPos = plig;\n    //Determine movement of light ex. shadow and light direction and diffusion\n   \n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\nfloat saturate(float f)\n{\n\treturn clamp(f,0.0,1.0);\n}\n\n\n//----------------------------------------------------\n\n//Creado por dr2 en 2020-07-28\n//https://www.shadertoy.com/view/3lfBz8\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\n\n//Creado por dr2 en 2020-07-28\n//https://www.shadertoy.com/view/3lfBz8\nvec3 getMouse(vec3 ro)\n{    \n     vec4 mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  float tCur = iTime;\n    \n  float az = 0.;\n  float el = -0.15 * PI;\n\n    az += 2. * PI * mPtr.x;\n    el += PI * mPtr.y;\n \n    \n    \n  mat3 vuMat = StdVuMat (el, az);\n\treturn ro*vuMat;\n}\n\n\n\n\n//-------------------------------\nvec3 getColorTex( vec3 p, vec3 nor,  int i)\n{\n    \n\tif (i==100 ) { return tex3D(iChannel0, p/32., nor); }\n\tif (i==101 ) { return tex3D(iChannel1, p/32., nor); }\n\tif (i==102 ) { return tex3D(iChannel2, p/32., nor); }\n\tif (i==103 ) { return tex3D(iChannel3, p/32., nor); }\n   \n    if (i==104 ) { return tex3D(iChannel0, p/32., nor)*vec3(1.0,0.35,.4); }\n    if (i==105 ) { return tex3D(iChannel0, p/32., nor)*vec3(0.35,1.0,.43); }\n    if (i==106 ) { return tex3D(iChannel0, p/64., nor)*vec3(0.85,1.0,.73); }\n    if (i==107 ) { return tex3D(iChannel0, p/20.0, nor)*vec3(0.85,1.0,.73); }\n    \n}\n\n\nvec3 Getluz(vec3 p, vec3 ro, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{   \n     \n    vec3 lightPos = plight_pos;\n    float intensity=1.0;\n\tconst float shininess = 100.0;\n\tvec3 l = normalize( p-lightPos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    float diff = dot(nor, l);\n    float spec = max(0.0, pow(dot(nor, h), shininess)) * float(diff > 0.0);\n\tvec3 result = LightShading(nor,l,v, colobj)*intensity;\n    return result;\n}\n    \n\n\n\n\n//------------------------------------------------\n\nvec3 GetColorYsurface(inout vec3 p, inout vec3 n, inout vec3 rd, int opmat)\n{\n   \tvec3 colobj;\n    \n    \n    if (opmat<100)\n\t\t{ colobj=getColor(int( opmat)); }\n    \n  \n    \n    \n    if ( float( opmat)>=100.0  && float( opmat)<=199.0 ) \n \t{  vec3 coltex=getColorTex(p, n, int( opmat));\n        colobj=coltex;\n\t}\n\n    \n    return colobj;\n}\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    itime=iTime;\n    float t;\n    t=iTime*5.0;\n   \n    \n \n light_pos1   = vec3(10.0, 12.0, 10.0 ); \n light_color1 = vec3( 1.0 );\n\n light_pos2   = vec3( 0.0, 15.0, 0.0 );\n light_color2 = vec3( 1.0, 1.0, 1.0 );\n \n    \n \n    \n    \n     ///---------------\n    ///---------------\n    vec2 R = iResolution.xy;\n    vec2 M = iMouse.xy;\n     M.y = M.y+1.0;\n    vec2 q = StoQ(   fragCoord, R);\n    vec2 m = StoQ(M.xy, R);\n    if (length(M.xy) <= 1.0)\n  \n        m = vec2(.2 + .2*iTime,-.015); // unattended, mouse in bottom left corner?\n    \n    \n    vec3 object_pos = vec3(0.,3.0+ radius, 0.);\n        \n    vec3 camera_dir = OrbitCamera(m);\n    vec3 camera_pos = object_pos - orbit_scale * radius * camera_dir; // LookAt\n    \n    \n\n    camera_pos.y = max(camera_pos.y, 1e-2); // do not go beneath ground\n    camera_dir = normalize(object_pos - camera_pos); // redo LookAt after clamp\n\n    \n    mat3 cam = CameraMatrix(camera_dir);\n    const float hfovy = PI/6.;\n    vec3 vd = normalize(vec3(q, 1./sin(hfovy)));\n    vec3 ro = camera_pos;\n    vec3 rd = normalize(cam * vd); // view ray\n    //-------------------\n  \n\n  \n    light_pos1+=ro;\n    light_pos2+=ro;\n    \n    \n    vec3 col = vec3(0);\n    \n    TObj Obj;\n    \n    mObj.uv=uv;\n    mObj.rd=rd;\n    mObj.ro=ro;\n\n\t \n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    \n  \n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor= GetNormal( p);\n    mObj.normal=nor;\n  \n    vec3 colobj;\n    colobj=GetColorYsurface( p, nor, rd,  int( Obj.idcolor));\n    \n\n  float dif1=1.0;\n   vec3 col2,col3;\n    \n    vec3 result;\n    result=  Getluz( p,ro, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro, nor, colobj ,light_pos2);\n    result/=1.25;\n    col3=result;\n    \n    \n     \n  \n    col= col3*dif1;\n    \n  \t\n    //sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d / 100.0, 3.5);\n    \n    \n    col = pow(col, vec3(1.0/2.2));  \n    \n    fragColor = vec4(col,1.0);\n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///------------------------------------\nstruct TObj\n{\n    float idcolor;\n    float id_obj;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n   \n};\n\n\nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n\n\n\n///--------------------------------------------\n///----------Orbit Camera\n///---------https://www.shadertoy.com/view/WlVGD1\n///----------Creditos de : spalmer en 2020-01-12\n///--------------------------------------------INICIO\nconst float orbit_scale = 4.0; // of radius of object\nconst float radius = 2.0; // of object resting on ground to examine\n\nvec2 StoQ(vec2 s, vec2 r)\n{\n\treturn (s + s - r) / r.y; \n}\n\nmat3 CameraMatrix(vec3 camFwd)\n{\n    vec3 w = normalize(camFwd)\n       , u = normalize(cross(vec3(0., 1., 0.), w))\n       , v = normalize(cross(w, u));\n    return mat3(u, v, w);\n}\n\n\nvec3 sph2cart(vec3 a) // spherical radians theta, psi, radius -> cartesian\n{\n    float cx = cos(a.x), sx = sin(a.x)\n        , cy = cos(a.y), sy = sin(a.y);\n    return vec3(sx*cy, sy, cx*cy) * a.z;\n}\n\nvec3 OrbitCamera(vec2 angles)\n{ // angles is yaw, pitch in radians\n    angles.x *= 2.; // kludge because Shadertoys clip mouse to window\n    angles.y = clamp(angles.y, -.4, .3);\n    return sph2cart(vec3(angles * PI, 1.));\n} \n\n///--------------------------------------------FIN\n///--------------------------------------------\n\n\n\nvec3 hsv(vec3 c)\n{\n    vec4 k=vec4(1.,2./3.,1./3.,3.);\n    vec3 p=abs(fract(c.xxx+k.xyz)*6.-k.www);\n    return c.z*mix(k.xxx,clamp(p-k.xxx,0.,1.),c.y);\n}\n\n\n\n///Gracias por la Ayuda de SHane...16-jun-2020\n// Creditos a Shane por su funcion tex3D\n// Tri-Planar blending function. Based on an old Nvidia writeup:\n// GPU Gems 3 - Ryan Geiss: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch01.html\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n    \n    // Ryan Geiss effectively multiplies the first line by 7. It took me a while to realize that \n    // it's largely redundant, due to the division process that follows. I'd never noticed on \n    // account of the fact that I'm not in the habit of questioning stuff written by Ryan Geiss. \n    n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n    n /= dot(n, vec3(1)); \n    //n /= length(n); \n    \n    // Texure samples. One for each plane.\n    vec3 tx = texture(tex, p.yz).xyz;\n    vec3 ty = texture(tex, p.zx).xyz;\n    vec3 tz = texture(tex, p.xy).xyz;\n    \n    // Multiply each texture plane by its normal dominance factor.... or however you wish\n    // to describe it. For instance, if the normal faces up or down, the \"ty\" texture sample,\n    // represnting the XZ plane, will be used, which makes sense.\n    \n    // Textures are stored in sRGB (I think), so you have to convert them to linear space \n    // (squaring is a rough approximation) prior to working with them... or something like that. \n    // Once the final color value is gamma corrected, you should see correct looking colors.\n    return mat3(tx*tx, ty*ty, tz*tz)*n; // Equivalent to: tx*tx*n.x + ty*ty*n.y + tz*tz*n.z;\n\n}\n\n\n\n\nfloat random() \n{\n\treturn fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453);\n}\n\n\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n\n\n//----------------------------------------------------\n\n\nvec3 getColor(int i)\n{\n    \n    float m;\n    if (i==-2 ) { return mObj.color; }       \n    if (i==0 ) { return vec3(0,0,0)/255.0; }\n    if (i==1 ) { return vec3(255.,255.,255.)/255.0; }\n    if (i==2 ) { return vec3(255,0,0)/255.0; }\n    if (i==3 ) { return vec3(0,255,0)/255.0; }\n    if (i==4 ) { return vec3(0,0,255)/255.0; }\n    if (i==5 ) { return vec3(255,255,0)/255.0; }\n    if (i==6 ) { return vec3(0,255,255)/255.0; }\n    if (i==7 ) { return vec3(255,0,255)/255.0; }\n    if (i==8 ) { return vec3(192,192,192)/255.0; }\n    if (i==9 ) { return vec3(128,128,128)/255.0; }\n    if (i==10 ) { return vec3(128,0,0)/255.0; }\n    if (i==11 ) { return vec3(128,128,0)/255.0; }\n    if (i==12 ) { return vec3(0,128,0)/255.0; }\n    if (i==13 ) { return vec3(128,0,128)/255.0; }\n    if (i==14 ) { return vec3(0,128,128)/255.0; }\n    if (i==15 ) { return vec3(0,0,128)/255.0; }\n\n    if (i==16 ) { return vec3(255, 204, 188)/255.0; }\n    if (i==17 ) { return vec3(0.8, 0.8, 0.8); }\n    if (i==18 ) { return vec3(0.5, 0.5, 0.8); }\n\n    if(i== 19 )\n    {  return vec3(1, 0.5, 0);    } \n    if(i== 20 )\n    { return vec3(1.0, 1.0, 1.0); } \n    if(i== 21 )\n    {  return vec3(247./255., 168./255.,  184./255.);  } \n    if(i== 22 )\n    { return vec3(0, 1, 1);} \n    if(i== 23 )\n    { return vec3(85./255., 205./255., 252./255.); } \n    \n    \n    \n\n}\n\n///--------------------------------------------\n\n","name":"Common","description":"","type":"common"}]}