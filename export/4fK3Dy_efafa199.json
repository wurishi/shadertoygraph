{"ver":"0.1","info":{"id":"4fK3Dy","date":"1713567974","viewed":285,"name":"AF - Glowing petals","username":"tristanC","description":"With more inputs. Demo:\n- https://www.youtube.com/watch?v=ZTYozTBCQQU","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","glow"],"hasliked":0,"parentid":"Xs3yRM","parentname":"Glowing petals"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Forked from https://www.shadertoy.com/view/Xs3yRM\n// Created by lsdlive in 2018-02-08\n// Default licence: CC-BY-NC-SA-3.0\n\n// The shader has been adapted^Wbutchered to support new parameters\n// to be controlled from midi/audio inputs with animation-fractal.\n\n#ifndef ANIMATION_FRACTAL\n// Simulate the pitch inputs using a smoothed stairs function STEP\n#define STEP1(x) ((x) - sin(x))\n#define STEP(x, offset, amp) (STEP1(STEP1(offset + x * amp)) * .15)\n#define is (iTime)\n\n#define ipitch_1 (STEP(is, 1., 1.))\n#define ipitch_2 (STEP(is, 2., 2.))\n#define ipitch_3 (STEP(is, 3., 3.))\n#define ipitch_4 (STEP(is, 4., 4.))\n#define ipitch_5 (STEP(is, 5., 1.))\n#define ipitch_6 (STEP(is, 6., 2.))\n#define ipitch_7 (STEP(is, 7., 3.))\n#define ipitch_8 (STEP(is, 8., 4.))\n#define ipitch_9 (STEP(is, 4., 3.))\n\n#define icolor (iTime*.1)\n#define imoveFWD (iTime*.1)\n#endif\n\nvec3 glow = vec3(0.);\nfloat glow_intensity = .007;\nvec3 glow_color = vec3(.5, .8, .5);\n\nfloat smin(float a, float b) {\n    float k = 10.;\n    float res = exp(-k*a) + exp(-k*b);\n    return -log(res) / k;\n}\n\nmat2 r2d(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nvec2 amod(vec2 p, float m) {\n    float a = mod(atan(p.x, p.y) -m*.5, m) - m * .5;\n    return vec2(cos(a), sin(a)) * length(p);\n}\n\n#define sph(p, r) (length(p) - r)\n#define cyl sph\n#define cube(p, b) length(max(abs(p) - vec3(b), 0.))\n#define PI              3.141592654\n\nfloat de(vec3 p) {\n    float d = 1e9;\n    p.xy *= r2d(p.z);\n    p.xz *= r2d(3.14/2.);\n    p.zy = amod(p.zy, 0.785); // * (1 + .0 * sin(icolor)));\n    // float id = amod(p.zy, 0.785 * (1 + .3 * sin(icolor)));\n    // if (id == 0.) return d;\n\n    p.y = abs(p.y) - .45 + .06 * sin(icolor);\n    p.z = abs(p.z) - .45 + .05 * cos(PI + icolor);\n    if (p.z > p.y) p.yz = p.zy;\n\n\n    vec3 q = p;\n    float ips = 1.5;\n    p.xy *= r2d(-3.14 / 3.);\n    p.xz *= r2d(ipitch_6 * ips);\n    p.x += cos(sin(ipitch_8*.1)*p.y*8.)*.2;\n    p.z += sin(cos(ipitch_5*.2)*p.y*4.)*.2;\n    d = smin(d, cyl(p.xz, .05));\n\n    p = q * 1.2;\n    p.xy *= r2d(-3.14 / 4.);\n    p.xz *= r2d(ipitch_4 * ips *2.);\n    p.x += cos(sin((ipitch_6 + ipitch_7)*.1)*p.y*8.)*.2;\n    p.z += sin(cos(ipitch_9*.1)*p.y*4.)*.2;\n    d = smin(d, cyl(p.xz, .02));\n\n    p = q * 1.2;\n    p.xy *= r2d(-3.14 / 2.);\n    p.xz *= r2d(ipitch_5 * ips);\n    p.x += cos(p.y*8.)*.2;\n    p.z += sin(p.y*4.)*.2;\n    d = smin(d, cyl(p.xz, .03));\n\n    p = q;\n    p.xy *= r2d(3.14 / 2.);\n    p.xz *= r2d(ipitch_2 * ips);\n    p.x += cos(p.y*8.)*.2;\n    p.z += sin(.5 + ipitch_1 * ips + p.y*4.)*.2;\n    d = smin(d, cyl(p.xz, .05));\n\n    p = q;\n    p.xy *= 1.4;\n    p.xy *= r2d(3.14 / 2.);\n    p.xz *= r2d(icolor + ipitch_1*ips);\n    p.x += cos((ipitch_3)*ips + p.y*8.)*.2;\n    p.z += sin(p.y*4.)*.2;\n    d = smin(d, cyl(p.xz, .1));\n\n    // trick extracted from balkhan https://www.shadertoy.com/view/4t2yW1\n    glow += glow_color * .025 / (.01 + d*d);\n    return d;\n}\n\n#ifdef ANIMATION_FRACTAL\nvoid main() {\n    vec2 uv = -.5 + inUV;\n    uv.y *= scene.screenRatio;\n    uv *= 3.;\n#else\nvoid mainImage( out vec4 oColor, in vec2 fragCoord ) {\n    vec2 uv = ( fragCoord - .5*iResolution.xy ) / iResolution.y;\n#endif\n\n    uv.xy *= r2d(icolor);\n    vec3 ro = vec3(0., 0, 6.), p;\n    ro.z -= 2. + imoveFWD * 8.;\n    vec3 rd = normalize(vec3(uv, -1));\n    p = ro;\n\n    float t = 0.;\n    float d = 1e9;\n    for (float i = 0.; i < 1.; i += .01) {\n        p = ro + rd * t;\n        p.z = mod(p.z, 7.);\n        d = de(p);\n        if (d < .001 || t > 8.) break;\n        t += d * .2; // avoid clipping, enhance the glow\n    }\n\n    vec3 c = vec3(.5, .05, .4);\n    // if (d > .001) c = pow(c, 1.0/vec3(1.2, 1.2, 1.4));\n    // if (d > .001) c *= 1.2;\n    c.r *= p.y + cos(p.z);\n    c += glow * glow_intensity;\n    oColor = vec4(c, 1.);\n}\n","name":"Image","description":"","type":"image"}]}