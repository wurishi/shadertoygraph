{"ver":"0.1","info":{"id":"4dK3DV","date":"1456512033","viewed":312,"name":"Langtons ant","username":"aprowe","description":"A rough version of Langtons ant (https://en.wikipedia.org/wiki/Langton%27s_ant). Look at them go!","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["simulation","automata","cellular","ant","langtons"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.y;\n\tfragColor = texture(iChannel0, uv/2.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float UP =    0.97;\nfloat DOWN =  0.98;\nfloat LEFT =  0.99;\nfloat RIGHT = 1.0;\n\n\nfloat L = 0.0;\nfloat R = 1.0;\n\n// Try toggling this. \nbool MANY_ANTS = true;\n\nfloat rotateColor(float c) {\n  if (c == 0.0) {\n    return 1.0;\n  } else {\n    return 0.0;\n  }\n\n  return 0.0;\n}\n\nvec3 getColor( vec2 _xy )\n{\n    vec3 color;\n    // Initialize Pixels\n    if (iTime < 1.0) {\n    \tcolor = vec3(L, 0.0, 0.0);\n        if (!MANY_ANTS && length(_xy - 0.25) <= 0.002){\n          color = vec3(L, DOWN, 0.0);\n        }\n        if(MANY_ANTS && texture(iChannel1, _xy + 0.1).x > .95) {\n\t\t\tcolor = vec3(L, UP, 0.0);\n        }\n        return color;\n    }\n\n     color = texture(iChannel0, _xy).xyz;\n     vec2 dx = 1.0/iChannelResolution[0].xy;\n\n    // If this pixel is ant, it is not next round\n    if (color.g > 0.0) {\n      return vec3(rotateColor(color.r), 0.0, color.b);\n    }\n\n    vec3 right = texture(iChannel0, _xy + vec2( 1.0 ,0.0)*dx).xyz;\n    vec3 left  = texture(iChannel0, _xy + vec2(-1.0, 0.0)*dx).xyz;\n    vec3 up    = texture(iChannel0, _xy + vec2( 0.0, 1.0)*dx).xyz;\n    vec3 down  = texture(iChannel0, _xy + vec2( 0.0,-1.0)*dx).xyz;\n\n    // CHECK RIGHT PIXEL\n    if (right.g == UP && right.r == L) {\n      return vec3(color.r, LEFT, color.b);\n    }\n    if (right.g == DOWN && right.r == R) {\n      return vec3(color.r, LEFT, color.b);\n    }\n\n    // CHECK LEFT PIXEL\n    if (left.g == UP && left.r == R) {\n      return vec3(color.r, RIGHT, color.b);\n    }\n    if (left.g == DOWN && left.r == L) {\n      return vec3(color.r, RIGHT, color.b);\n    }\n\n    // CHECK UP PIXEL\n    if (up.g == LEFT && up.r == L) {\n      return vec3(color.r, DOWN, color.b);\n    }\n    if (up.g == RIGHT && up.r == R) {\n      return vec3(color.r, DOWN, color.b);\n    }\n\n    // CHECK DOWN PIXEL\n    if (down.g == RIGHT && down.r == L) {\n      return vec3(color.r, UP, color.b);\n    }\n    if (down.g == LEFT && down.r == R) {\n      return vec3(color.r, UP, color.b);\n    }\n\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = vec4(getColor(fragCoord/iChannelResolution[0].xy),1.0);\n}\n","name":"Buf A","description":"","type":"buffer"}]}