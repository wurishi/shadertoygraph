{"ver":"0.1","info":{"id":"Xt3SDs","date":"1482049769","viewed":271,"name":"Lch/Lab colorspaces","username":"nsf","description":"Lch/Lab to sRGB color conversion, code is taken from d3-color. Use LMB and drag on X axis to change one of the parameters, pick display mode by altering MODE var.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["color","lab","colorspace","lch","hcl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// code mostly taken from https://github.com/d3/d3-color/blob/master/src/lab.js\n\n#define HC  1 // X - Hue,    Y - Chroma,     Mouse X - Lightness   (Lch color space)\n#define HL  2 // X - Hue,    Y - Lightness,  Mouse X - Chroma      (Lch color space)\n#define CL  3 // X - Chroma, Y - Lightness,  Mouse X - Hue         (Lch color space)\n#define AB  4 // X - A,      Y - B,          Mouse X - Lightness   (Lab color space)\n\n#define ORB 5 // Mouse X - Chroma, Angle - Hue, Distance - Lightness (Lch color space)\n\n// pick display mode:\n#define MODE HL\n\nconst float X = 0.950470;\nconst float Y = 1.0;\nconst float Z = 1.088830;\n\nconst float t0 = 4.0 / 29.0;\nconst float t1 = 6.0 / 29.0;\nconst float t2 = 3.0 * t1 * t1;\nconst float t3 = t1 * t1 * t1;\n\nfloat lab_xyz(float t) {\n    return t > t1 ? t * t * t : t2 * (t - t0);\n}\n\nfloat xyz_rgb(float x) {\n    return x <= 0.0031308 ? 12.92 * x : 1.055 * pow(x, 1.0 / 2.4) - 0.055;\n}\n\nvec3 lab2rgb(vec3 lab) {\n    float l = lab.x;\n    float a = lab.y;\n    float b = lab.z;\n    float y = (l + 16.0) / 116.0;\n    float x = y + a / 500.0;\n    float z = y - b / 200.0;\n    x = lab_xyz(x) * X;\n    y = lab_xyz(y) * Y;\n    z = lab_xyz(z) * Z;\n    return vec3(\n        xyz_rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z),\n\t\txyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),\n        xyz_rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z)\n    );\n}\n\nvec3 hcl2lab(vec3 hcl) {\n    float h = hcl.x;\n    float c = hcl.y;\n    float l = hcl.z;\n    h = radians(h);\n    return vec3(l, cos(h) * c, sin(h) * c);\n}\n\nvec3 hcl2rgb(vec3 hcl) {\n    return lab2rgb(hcl2lab(hcl));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float x = fragCoord.x / iResolution.x;\n    float y = fragCoord.y / iResolution.y;\n    float z = clamp(1.2*iMouse.x / iResolution.x-0.1, 0.0, 1.0);\n    \n    vec3 src, rgb;\n    if (MODE == HC)\n        src = vec3(x, y, z);\n    else if (MODE == HL)\n        src = vec3(x, z, y);\n    else if (MODE == CL)\n        src = vec3(z, x, y);\n    else if (MODE == AB)\n        src = vec3(z, x, y);\n    else if (MODE == ORB) {\n\t\tx *= iResolution.x / iResolution.y;\n\t\tvec2 v = vec2(x-0.5, y-0.5);\n        vec2 nv = normalize(v);\n\t\tx = atan(nv.y, nv.x) / (2.0 * 3.14159265359) + 0.5;        \n        y = length(v) * 2.5 - 0.25;\n        src = vec3(x, z, y);\n    }\n    \n    if (MODE == AB) {\n    \tsrc.x *= 100.0;\n    \tsrc.y *= 220.0;\n    \tsrc.z *= 220.0;\n        src.y -= 110.0;\n        src.z -= 110.0;\n        rgb = lab2rgb(src);        \n    } else {\n    \tsrc.x *= 360.0;\n    \tsrc.y *= 128.0;\n    \tsrc.z *= 100.0;\n    \trgb = hcl2rgb(src);\n    }\n    \n    // colors outside of this range, cannot be represented in RGB properly\n    if (rgb.r < 0.0 || rgb.r > 1.0 || rgb.g < 0.0 || rgb.g > 1.0 || rgb.b < 0.0 || rgb.b > 1.0) {\n        float f = mod(fragCoord.x+fragCoord.y, 2.);\n        rgb = mix(vec3(0), rgb, f);\n    }\n    if (MODE == ORB) {\n        rgb *= (1.0 - step(1.0, y));\n    }\n\tfragColor = vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}