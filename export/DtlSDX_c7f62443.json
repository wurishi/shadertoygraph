{"ver":"0.1","info":{"id":"DtlSDX","date":"1675430244","viewed":55,"name":"Hexagram","username":"Hala","description":"shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdHexagram( in vec2 p, in float r )\n{\n    const vec4 k = vec4(-0.5,0.8660254038,0.5773502692,1.7320508076);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= 2.0*min(dot(k.yx,p),0.0)*k.yx;\n    p -= vec2(clamp(p.x,r*k.z,r*k.w),r);\n    return length(p)*sign(p.y);\n}\nvec2 rotation(vec2 st, float g)\n{\n    mat2 rot = mat2(cos(g), sin(g), -sin(g), cos(g));\n    st *= rot;\n    return st;\n}\nfloat spiralSDF(vec2 st, float t) {\n\tst -= 0.;\n\tfloat r = dot(st,st);\n\tfloat a = atan(st.y, st.x);\n\treturn abs(sin(fract(log(r)*t+a*0.159)));\n}\n\nfloat stroke(float x,float s, float w) {\n    float d = step(s, x+w) - step(s, x-w);\n    return clamp(d, 0.,1.);\n}\n\nfloat fill(float x, float size) {\n\treturn 1.-step(size, x);\n}\nvec2 rotate(vec2 st, float a) {\n\tst= mat2(cos(a), -sin(a), sin(a), cos(a)) * (st-.5);\n\treturn st+.5;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = (fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    vec2 uv = fragCoord/iResolution.xy*6.-3.;\n    uv.x *= iResolution.x / iResolution.y;  \n    uv -= vec2(.5, 0.);\n    //vec2 st = rotate(uv, iTime*3.14*1.5); \n    \n    \n    // shape\n    float sdf1 = spiralSDF(uv+vec2(0.,.2), 0.2);\n    float d = sdHexagram(p, 0.10);\n    float r = sdHexagram(p, 0.20);\n    float h = sdHexagram(p, 0.30);\n    float hx = sdHexagram(p, 0.40);\n    \n    vec2 stRotated = rotation(uv, iTime/3.);\n    \n    vec2 stRotatedRight = rotation(uv, -iTime/3.);\n    float sdfRotated = sdHexagram(stRotated, 1.);\n    \n    float sdf = sdHexagram(stRotatedRight, 1.);\n    // Colors\n    vec3 c = vec3(.0);\n    c +=  vec3 (sdf1, .1, .1);\n    vec3 colorA = vec3(0.6,0.3,0.4);\n    vec3 colorB = vec3(0.1,0.5,0.4);\n    c += (mix(colorB*.5, colorA*.5, uv.y*uv.x*uv.x*uv.y*uv.x*uv.y*0.005));\n    c += (mix(colorB*.5, colorA*.5, uv.y*uv.x*uv.x*uv.y*uv.x*uv.y*0.005))*.5;\n    c+= 0.3 + 0.1*cos(4.*iTime+uv.xyx+vec3(0,.5,.4));\n    \n    \n\n    //vec3 c = vec3(0.5, .3, .7);\n    c += stroke(sdfRotated, abs(fract(iTime/1.)), .03);   \n    c += stroke(sdf, abs(fract(-iTime/2.)), .04); \n    c += stroke(sdfRotated, abs(fract(iTime/3.)), .03); \n    c += stroke(sdf, abs(fract(-iTime/4.)), .04);\n    c += stroke(sdfRotated, abs(fract(iTime/5.)), .03);\n    c += stroke(sdf, abs(fract(-iTime/6.)), .05);\n    c += stroke(sdfRotated, abs(fract(iTime/9.)), .05);\n    \n\n    // Output to screen\n    fragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"}]}