{"ver":"0.1","info":{"id":"stdBRs","date":"1663552522","viewed":131,"name":"[phreax] rainbow madness","username":"phreax","description":"Inspired by hexeosis","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Creative Commons Licence Attribution-NonCommercial-ShareAlike \n * phreax 2022\n *\n * Special thanks to: iq, evvvvil, nusan, bigwings, fabrice, flopine, yx \n * for their amazing content and learning material.\n * \n */\n#define PI 3.141592\n#define TAU PI*2.\n\n#define DISTORT 0\n\nfloat tt;\nvec3 ro;\nvec2 beamId;\n\n\n// from \"Palettes\" by iq. https://shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 getPal(int id, float t) {\n\n    id = id % 7;\n\n    vec3          col = pal( t, vec3(.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,-0.33,0.33) );\n    if( id == 1 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );\n    if( id == 2 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.3,0.20,0.20) );\n    if( id == 3 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );\n    if( id == 4 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,0.7,0.4),vec3(0.0,0.15,0.20) );\n    if( id == 5 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n    if( id == 6 ) col = pal( t, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n    \n    return col;\n}\n\n\nfloat repeat(inout float x, float n) {\n    float id = floor(n*x)/n;\n    x = fract(n*x);\n    return id;\n}\n\n\nfloat box(vec3 p, vec3 r) {\n\tvec3 q = abs(p) - r;\n    return max(max(q.x, q.y),q.z);\n}\n\nmat2 rot(float a) { return mat2(cos(a), sin(a), -sin(a), cos(a));}\n\n\nvec2 repeat(inout vec2 p, vec2 size) {\n\tvec2 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5,size) - size*0.5;\n\treturn c;\n}\n\nfloat repeatSingle(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tif (p >= 0.)\n\t\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\nvoid transform(inout vec3 p) {\n    \n    float repz =8.;\n\n    float idz = repeatSingle(p.z,8.);  \n    p.xy *= rot(.25*PI*mod(idz, repz));\n}\n\nvec3 colorStripeTexture(vec3 p, vec2 matId) {\n\n    matId = abs(matId);\n    int mat = int((matId.x*2.))+int(matId.y*2.);\n    \n    float dim = p.x*4.;\n    \n    if(mat % 3 == 1) dim = p.y*3.;\n    if(mat % 3 == 2) dim = p.z*.4;\n    \n    float id = repeat(dim, 5.2) + matId.y/3. + tt*.6;\n    vec3 col = getPal(4, id);\n    return col;\n}\n\n\nvec2 moda(vec2 p, float repetitions) {\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\ta = mod(a,angle) - angle/2.;\n\treturn vec2(cos(a), sin(a))*length(p);\n}\n\n\nvec3 kalei(vec3 p) {\n  float w = 1.;\n      p = abs(p) -.2;\n  for(float i=0.; i < 4.; i++) {\n        float t1 = 2.+sin(i+tt) + sin(.7*tt)*.4;\n        p.xy *= rot(.3*t1);\n        p -= 0.1 + .1*i;\n        p.y -= 0.3;\n        p = abs(p);\n \n    }\n    p /= w;\n    return p;\n}\n\n// by Nusan\nfloat curve(float t, float d) {\n  t/=d;\n  return mix(floor(t), floor(t)+1., pow(smoothstep(0.,1.,fract(t)), 5.));\n}\n\n\nfloat map(vec3 p) {\n    \n    p.xy *= (1.+abs(.1*p.x))*rot(curve(tt, 4.)*.5*PI);\n\n    #if DISTORT\n    p.y += 0.1*sin(p.z+2.*tt);\n    p.x+= 0.1*sin(p.z*1.5+1.*tt);\n    #endif\n\n    transform(p);\n    //p = kalei(p);\n    float blen =2.8;\n\n    float outer = 1.45;\n    float inner = .9;\n    \n    float maskout = box(p, vec3(vec2(outer), blen));\n    float maskin = box(p, vec3(vec2(inner), blen + .3));\n   \n    beamId = repeat(p.xy, vec2(.39));\n    float beam = max(box(p, vec3(vec2(.16), blen)), -box(p, vec3(vec2(.1), blen+.3)));\n    \n    \n    float frame = max(maskout, -maskin);\n    float d = max(beam, maskout);\n    d = max(d, frame);\n    return d;\n   \n}\n\n\nvoid cam(inout vec3 p) {\n    p.z += 8.*tt;;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.x;\n    tt = iTime;\n         ro = vec3(0, 0., -15.);\n    vec3 rd = normalize(vec3(uv, 1.5)),\n         lp = vec3(0., 0., 2.);\n    \n    cam(ro);\n    cam(lp);\n    \n\n    float i, t, d = 0.1;\n\n    vec3 p = ro;\n    \n    vec2 matId;\n    for(i=0.; i<300.; i++) {\n    \n          \n        d = map(p);\n        matId = beamId; // save id\n        \n        if(d < 0.001 || t > 200.) break;\n        \t\n        p += rd*d;\n        t += d;\n    }\n    \n    vec2 e = vec2(0.0035, -0.0035);\n    \n    vec3 fo, co;\n    co = fo = mix(vec3(0.957,0.937,0.867), vec3(1.), uv.y+.5);\n    \n    if(d < 0.001) {\n        vec3 al;\n        \n        vec3 n = normalize( e.xyy*map(p+e.xyy) + e.yyx*map(p+e.yyx) +\n                            e.yxy*map(p+e.yxy) + e.xxx*map(p+e.xxx));\n        al = colorStripeTexture(p, matId)*1.2;\n        \n        vec3 l = normalize(lp-p);\n        float dif = max(dot(n, l), .0);\n        float spe = pow(max(dot(reflect(-rd, n), -l), .0), 40.);\n        float sss = smoothstep(0., 1., map(p+l*.4))/.4; \n        \n        co =  al*mix(1., .8*spe+(.9*dif+1.5*sss), .4);\n        \n        co = mix(co, fo, 1.-exp(-.000005*t*t*t));\n        \n    }\n\n\n    // Output to screen\n    fragColor = vec4(co, 1.);\n}","name":"Image","description":"","type":"image"}]}