{"ver":"0.1","info":{"id":"ctXXWH","date":"1674864663","viewed":284,"name":"Particles with mass","username":"vegardno","description":"Cellular automaton particle simulation with gravity and masses. You can even spot some particles orbiting each other. See configuration in \"Common\" tab.","likes":14,"published":1,"flags":32,"usePreview":0,"tags":["simulation","particles","cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define fetch_magnify(tex, coord) \\\n    ((iMouse.z > 0.) ?  fetch_offset(tex, iMouse.xy + .25 * (coord - .5 * iResolution.xy), 0) : fetch_offset(tex, coord, 0))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float velocity = length(fetch_magnify(pos_vel0_tex, fragCoord).zw);\n    float mass = fetch_magnify(mass0_tex, fragCoord).x;\n\n    vec3 col = vec3(0);\n#if INIT_RANDOM\n    col += vec3(0, 1, 1) * length(fetch_magnify(field_tex, fragCoord).xz) * 750. / iTime;\n    col += vec3(1, 1, 1) * 10. * vec3(mass);\n#else\n    col += vec3(0, 1, 1) * length(fetch_magnify(field_tex, fragCoord).xz) * 1.;\n    col += vec3(1, 1, 1) * 100. * vec3(mass);\n#endif\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define WRAP 1\n\nconst float dt = 1.;\n\n// set to 0 to create heavy central particle with ring around\n#define INIT_RANDOM 1\n\n// parameters for random init\nconst float init_threshold = .995;\nconst float init_vel = .3;\nconst float init_mass = .5;\n\n#if WRAP\n#define fetch_offset(tex, coord, offset) \\\n    texture(tex, (coord + vec2(offset)) / iResolution.xy)\n#else\n#define fetch_offset(tex, coord, offset) \\\n    texelFetchOffset(tex, ivec2(coord), 0, ivec2(offset))\n#endif\n\n#define mass0_tex    iChannel0\n#define pos_vel0_tex iChannel1\n#define mass1_tex    iChannel2\n#define pos_vel1_tex iChannel1\n#define trail_tex    iChannel3\n#define field_tex    iChannel3\n\n// https://stackoverflow.com/questions/12964279/whats-the-origin-of-this-glsl-rand-one-liner\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat rand_mass(vec2 co)\n{\n    return rand(co + vec2(100., 0.));\n}\n\nvec2 rand_vel(vec2 co)\n{\n    float x = rand(co + vec2(105., 117.));\n    float y = rand(co + vec2(130., 142.));\n    return vec2(x, y) - vec2(.5);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Buffer A: mass\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame < 10) {\n#if INIT_RANDOM\n        fragColor = vec4(0. + init_mass * rand_mass(fragCoord + vec2(99.)) * smoothstep(init_threshold, 1., rand_mass(fragCoord)), vec3(0));\n#else\n        vec2 uv = (2. * fragCoord - iResolution.xy)  / iResolution.y;\n        if (length(uv) < 2. / iResolution.y)\n            fragColor = vec4(10., 0, 0, 0);\n        else if (length(uv) > .2 && length(uv) < .7)\n            fragColor = vec4(0. + .01 * rand_mass(fragCoord + vec2(99.)) * smoothstep(.93, 1., rand_mass(fragCoord)), vec3(0));\n        else\n            fragColor = vec4(0.);\n#endif\n        return;\n    }\n\n    float result = 0.;\n\n    {\n        vec4 col = fetch_offset(pos_vel1_tex, fragCoord, ivec2(0, 0));\n        vec2 pos = col.xy;\n        vec2 vel = col.zw;\n\n        pos += vel * dt;\n        if (pos.x >= 0. && pos.x < 1. && pos.y >= 0. && pos.y < 1.)\n            result += fetch_offset(mass1_tex, fragCoord, ivec2(0, 0)).x;\n    }\n\n    {\n        vec4 col = fetch_offset(pos_vel1_tex, fragCoord, ivec2(-1, 0));\n        vec2 pos = col.xy;\n        vec2 vel = col.zw;\n        \n        pos += vel * dt;\n        if (pos.x >= 1. && pos.y >= 0. && pos.y < 1.)\n            result += fetch_offset(mass1_tex, fragCoord, ivec2(-1, 0)).x;\n    }\n    \n    {\n        vec4 col = fetch_offset(pos_vel1_tex, fragCoord, ivec2(1, 0));\n        vec2 pos = col.xy;\n        vec2 vel = col.zw;\n        \n        pos += vel * dt;\n        if (pos.x < 0. && pos.y >= 0. && pos.y < 1.)\n            result += fetch_offset(mass1_tex, fragCoord, ivec2(1, 0)).x;\n    }\n    \n        {\n        vec4 col = fetch_offset(pos_vel1_tex, fragCoord, ivec2(0, -1));\n        vec2 pos = col.xy;\n        vec2 vel = col.zw;\n        \n        pos += vel * dt;\n        if (pos.y >= 1. && pos.x >= 0. && pos.x < 1.)\n            result += fetch_offset(mass1_tex, fragCoord, ivec2(0, -1)).x;\n    }\n    \n    {\n        vec4 col = fetch_offset(pos_vel1_tex, fragCoord, ivec2(0, 1));\n        vec2 pos = col.xy;\n        vec2 vel = col.zw;\n        \n        pos += vel * dt;\n        if (pos.y < 0. && pos.x >= 0. && pos.x < 1.)\n            result += fetch_offset(mass1_tex, fragCoord, ivec2(0, 1)).x;\n    }\n\n    {\n        vec4 col = fetch_offset(pos_vel1_tex, fragCoord, ivec2(-1, -1));\n        vec2 pos = col.xy;\n        vec2 vel = col.zw;\n        \n        pos += vel * dt;\n        if (pos.x >= 1. && pos.y >= 1.)\n            result += fetch_offset(mass1_tex, fragCoord, ivec2(-1, -1)).x;\n    }\n\n\n    {\n        vec4 col = fetch_offset(pos_vel1_tex, fragCoord, ivec2(1, -1));\n        vec2 pos = col.xy;\n        vec2 vel = col.zw;\n        \n        pos += vel * dt;\n        if (pos.x < 0. && pos.y >= 1.)\n            result += fetch_offset(mass1_tex, fragCoord, ivec2(1, -1)).x;\n    }\n    \n    {\n        vec4 col = fetch_offset(pos_vel1_tex, fragCoord, ivec2(-1, 1));\n        vec2 pos = col.xy;\n        vec2 vel = col.zw;\n        \n        pos += vel * dt;\n        if (pos.x >= 1. && pos.y < 0.)\n            result += fetch_offset(mass1_tex, fragCoord, ivec2(-1, 1)).x;\n    }\n\n    {\n        vec4 col = fetch_offset(pos_vel1_tex, fragCoord, ivec2(1, 1));\n        vec2 pos = col.xy;\n        vec2 vel = col.zw;\n        \n        pos += vel * dt;\n        if (pos.x < 0. && pos.y < 0.)\n            result += fetch_offset(mass1_tex, fragCoord, ivec2(1, 1)).x;\n    }\n\n    fragColor = vec4(result, vec3(0));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Buffer B: position + velocity\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame < 10) {\n#if INIT_RANDOM\n        vec2 pos = vec2(.5);\n        vec2 vel = rand_vel(fragCoord);\n        fragColor = vec4(pos, init_vel * normalize(vel));\n#else\n        vec2 uv = (2. * fragCoord - iResolution.xy)  / iResolution.y;\n        if (length(uv) < 2. / iResolution.y) {\n            fragColor = vec4(0, 0, 0, 0);\n        } else {\n            vec2 pos = vec2(.5);\n            float a = atan(uv.y, uv.x) + radians(90. + 0.);\n            vec2 vel = .1 * vec2(cos(a), sin(a)) * length(uv);\n            fragColor = vec4(pos, vel);\n        }\n#endif\n        return;\n    }\n\n    float n_sum = 0.;\n    float m_sum = 0.;\n    vec4 result = vec4(0.);\n\n    {\n        float m = fetch_offset(mass1_tex, fragCoord, ivec2(0, 0)).x;\n        vec4 col = fetch_offset(pos_vel1_tex, fragCoord, ivec2(0, 0));\n        vec2 pos = col.xy;\n        vec2 vel = col.zw;\n\n        pos += vel * dt;\n        if (pos.x >= 0. && pos.x < 1. && pos.y >= 0. && pos.y < 1.) {\n            result += vec4(pos, m * vel);\n            n_sum += 1.;\n            m_sum += m;\n        }\n    }\n\n    {\n        float m = fetch_offset(mass1_tex, fragCoord, ivec2(-1, 0)).x;\n        vec4 col = fetch_offset(pos_vel1_tex, fragCoord, ivec2(-1, 0));\n        vec2 pos = col.xy;\n        vec2 vel = col.zw;\n        \n        pos += vel * dt;\n        if (pos.x >= 1. && pos.y >= 0. && pos.y < 1.) {\n            result += vec4(pos.x - 1., pos.y, m * vel);\n            n_sum += 1.;\n            m_sum += m;\n        }\n    }\n    \n    {\n        float m = fetch_offset(mass1_tex, fragCoord, ivec2(1, 0)).x;\n        vec4 col = fetch_offset(pos_vel1_tex, fragCoord, ivec2(1, 0));\n        vec2 pos = col.xy;\n        vec2 vel = col.zw;\n        \n        pos += vel * dt;\n        if (pos.x < 0. && pos.y >= 0. && pos.y < 1.) {\n            result += vec4(pos.x + 1., pos.y, m * vel);\n            n_sum += 1.;\n            m_sum += m;\n        }\n    }\n    \n    {\n        float m = fetch_offset(mass1_tex, fragCoord, ivec2(0, -1)).x;\n        vec4 col = fetch_offset(pos_vel1_tex, fragCoord, ivec2(0, -1));\n        vec2 pos = col.xy;\n        vec2 vel = col.zw;\n        \n        pos += vel * dt;\n        if (pos.y >= 1. && pos.x >= 0. && pos.x < 1.) {\n            result += vec4(pos.x, pos.y - 1., m * vel);\n            n_sum += 1.;\n            m_sum += m;\n        }\n    }\n    \n    {\n        float m = fetch_offset(mass1_tex, fragCoord, ivec2(0, 1)).x;\n        vec4 col = fetch_offset(pos_vel1_tex, fragCoord, ivec2(0, 1));\n        vec2 pos = col.xy;\n        vec2 vel = col.zw;\n        \n        pos += vel * dt;\n        if (pos.y < 0. && pos.x >= 0. && pos.x < 1.) {\n            result += vec4(pos.x, pos.y + 1., m * vel);\n            n_sum += 1.;\n            m_sum += m;\n        }\n    }\n\n    {\n        float m = fetch_offset(mass1_tex, fragCoord, ivec2(-1, -1)).x;\n        vec4 col = fetch_offset(pos_vel1_tex, fragCoord, ivec2(-1, -1));\n        vec2 pos = col.xy;\n        vec2 vel = col.zw;\n        \n        pos += vel * dt;\n        if (pos.x >= 1. && pos.y >= 1.) {\n            result += vec4(pos.x - 1., pos.y - 1., m * vel);\n            n_sum += 1.;\n            m_sum += m;\n        }\n    }\n\n\n    {\n        float m = fetch_offset(mass1_tex, fragCoord, ivec2(1, -1)).x;\n        vec4 col = fetch_offset(pos_vel1_tex, fragCoord, ivec2(1, -1));\n        vec2 pos = col.xy;\n        vec2 vel = col.zw;\n        \n        pos += vel * dt;\n        if (pos.x < 0. && pos.y >= 1.) {\n            result += vec4(pos.x + 1., pos.y - 1., m * vel);\n            n_sum += 1.;\n            m_sum += m;\n        }\n    }\n    \n    {\n        float m = fetch_offset(mass1_tex, fragCoord, ivec2(-1, 1)).x;\n        vec4 col = fetch_offset(pos_vel1_tex, fragCoord, ivec2(-1, 1));\n        vec2 pos = col.xy;\n        vec2 vel = col.zw;\n        \n        pos += vel * dt;\n        if (pos.x >= 1. && pos.y < 0.) {\n            result += vec4(pos.x - 1., pos.y + 1., m * vel);\n            n_sum += 1.;\n            m_sum += m;\n        }\n    }\n\n    {\n        float m = fetch_offset(mass1_tex, fragCoord, ivec2(1, 1)).x;\n        vec4 col = fetch_offset(pos_vel1_tex, fragCoord, ivec2(1, 1));\n        vec2 pos = col.xy;\n        vec2 vel = col.zw;\n        \n        pos += vel * dt;\n        if (pos.x < 0. && pos.y < 0.) {\n            result += vec4(pos.x + 1., pos.y + 1., m * vel);\n            n_sum += 1.;\n            m_sum += m;\n        }\n    }\n\n    // average positions\n    if (n_sum > 0.)\n        result.xy /= n_sum;\n        \n    // velocity is weighted by mass\n    if (m_sum > 0.)\n        result.zw /= m_sum;\n\n    // apply force from field\n    if (m_sum > 0.) {\n        vec2 n = vec2(\n            fetch_offset(field_tex, fragCoord, ivec2(1, 0)).x - fetch_offset(field_tex, fragCoord, ivec2(-1, 0)).x,\n            fetch_offset(field_tex, fragCoord, ivec2(0, 1)).z - fetch_offset(field_tex, fragCoord, ivec2(0, -1)).z);\n\n        // positive = attractive\n        // negative = repulsive\n        float k = 1.;\n        vec2 new_v = result.zw + k * n;\n        \n        // limit speeds\n        if (length(new_v) >= 1.)\n            new_v /= length(new_v);\n            \n        result.zw = new_v;\n    }\n\n\n    // clamp position\n    //result.xy = clamp(result.xy, 0., 1.);\n    // clamp velocity\n    //result.zw = clamp(result.zw, -.5, .5);\n\n    fragColor = result;\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Buffer C: mass\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(mass0_tex, ivec2(fragCoord), 0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// Buffer D: force field, output in .xz\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame < 10) {\n        fragColor = vec4(0);\n        return;\n    }\n\n    float mass = texelFetch(mass1_tex, ivec2(fragCoord), 0).x;\n\n    vec4 cur = texelFetchOffset(field_tex, ivec2(fragCoord), 0, ivec2(0, 0));\n    \n    vec4 n = vec4(0.);\n    n += fetch_offset(field_tex, fragCoord, ivec2(-1, -1));\n    n += fetch_offset(field_tex, fragCoord, ivec2(-1,  0));\n    n += fetch_offset(field_tex, fragCoord, ivec2(-1,  1));\n    \n    n += fetch_offset(field_tex, fragCoord, ivec2( 0, -1));\n    n += fetch_offset(field_tex, fragCoord, ivec2( 0,  1));\n    \n    n += fetch_offset(field_tex, fragCoord, ivec2( 1, -1));\n    n += fetch_offset(field_tex, fragCoord, ivec2( 1,  0));\n    n += fetch_offset(field_tex, fragCoord, ivec2( 1,  1));\n    n /= 8.;\n\n    cur.xz = n.xz + .01 * mass;\n\n    fragColor = vec4(cur);\n}","name":"Buffer D","description":"","type":"buffer"}]}