{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"float saturate(float x) {\n    return clamp(x, 0.0, 1.0);\n}\n\nfloat sdfSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat noise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat fbm(vec3 x, int octaves, float amplitude, float frequency, vec3 shift, float lacunarity, float gain) {\n\tfloat value = 0.0;\n    for (int i = 0; i < octaves; ++i) {\n        float sn = noise(x * frequency);\n        value += amplitude * sn;\n        x += shift;\n        frequency *= lacunarity;\n\t\tamplitude *= gain;\n\t}\n\treturn value;\n}\n\nfloat fbm(vec3 uv, int octaves) {\n    return fbm(uv, octaves, 0.5, 1.0, vec3(8), 2.0, 0.5);\n}\n\nfloat sdCone( vec3 p, vec2 c, float h )\n{\n  // c is the sin/cos of the angle, h is height\n  // Alternatively pass q instead of (c,h),\n  // which is the point at the base in 2D\n  vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n  vec2 w = vec2( length(p.xz), p.y );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return sqrt(d)*sign(s) - .01;\n}\n\nfloat softMax(float a, float b, float k) {\n    return log(exp(k * a) + exp(k * b)) / k;\n}\n\nfloat softMin(float a, float b, float k) {\n    return -softMax(-a, -b, k);\n}\n\nfloat sdIcicle(vec3 pos, vec3 iciclePos) {\n    float dist = sdfSphere(pos - iciclePos, 0.5);\n    \n    pos.y = pos.y * -1.;\n    float noiseSample = fbm(pos, 6);\n    dist = sdCone(pos - vec3(noiseSample * 0.04,-noiseSample * 0.3, .4) - iciclePos, vec2(0.08715574, 0.9961947), .9);\n    dist = softMin(dist, sdCone(pos - vec3(noiseSample * 0.04,noiseSample * 0.3, .4) - iciclePos, vec2(0.08715574, 0.9961947), .9), 150.);\n    \n    return dist;\n}\n\nfloat map(vec3 pos) {\n\n    float x = pos.x + 0.1 * sin(iTime);\n\n    float dist = sdIcicle(pos, vec3(-0.1 + x, 0.1, 0.0));\n    dist = min(dist, sdIcicle(pos, vec3(0.1 + x, 0.2, 0.0)));\n    \n    return dist;\n}\n\nvec2 dirToEquirectUV(in vec3 dir) {\n    float u = atan(dir.z, dir.x) / (2.0 * 3.14159265358979323846264) + 0.5;\n    float v = asin(dir.y) / 3.14159265358979323846264 + 0.5;\n    return vec2(u,v);\n}\n\nvec3 sampleBackground(vec3 dir) {\n    vec2 uv = dirToEquirectUV(normalize(dir));\n    //return dir;\n    return texture(iChannel0, uv).rgb;\n    \n}\n\nvec3 CalculateNormal(vec3 pos) {\n    const float EPS = 0.0001;\n    vec3 n = vec3(\n        map(pos + vec3(EPS, 0.0, 0.0)) - map(pos - vec3(EPS, 0.0, 0.0)),\n        map(pos + vec3(0.0, EPS, 0.0)) - map(pos - vec3(0.0, EPS, 0.0)),\n        map(pos + vec3(0.0, 0.0, EPS)) - map(pos - vec3(0.0, 0.0, EPS))\n    );\n    return normalize(n);\n}\n\nvec3 CalculateLighting(vec3 pos, vec3 normal, vec3 lightColour, vec3 lightDir) {\n    float dp = saturate(dot(normal, lightDir));\n\n    return lightColour * dp;\n}\n\nvec3 CalculateSpecular(vec3 pos, vec3 normal, vec3 viewDir, vec3 lightDir) {\n    vec3 r = normalize(reflect(-lightDir, normal));\n    float phongValue = max(0.0, dot(viewDir, r));\n\n    return vec3(pow(phongValue, 12.0));\n}\n\nconst int NUM_STEPS = 20;\nconst float MAX_DIST = 1000.0;\n\n// Performs sphere tracing for the scene.\nvec3 RayMarch(vec3 cameraOrigin, vec3 cameraDir) {\n\n    vec3 pos;\n    float dist = 0.0;\n\n    for (int i = 0; i < NUM_STEPS; ++i) {\n        pos = cameraOrigin + dist * cameraDir;\n\n        float distToScene = map(pos);\n\n        // Case 1: distToScene < 0, intersected scene\n        // BREAK\n        if (distToScene < 0.001) {\n            break;\n        }\n        dist += distToScene;\n\n        // Case 2: dist > MAX_DIST, out of the scene entirely\n        // RETURN\n        if (dist > MAX_DIST) {\n            return vec3(0.);\n            return texture(iChannel0, cameraDir.xy).rgb;\n        }\n\n        // Case 3: Loop around, in reality, do nothing.\n    }\n    float M_PI = 3.14159265359;\n    vec3 lightDir = normalize(vec3(1.0, 2.0, -1.0));\n    vec3 lightColour = vec3(1.);\n    vec3 normal = CalculateNormal(pos);\n    vec3 lighting = CalculateLighting(pos, normal, lightColour, lightDir);\n    vec3 colour = vec3(1., 0., 0.) * lighting;\n    vec3 refractDir = refract(-cameraDir, normal, 1.0 / 1.33);\n    float fresnelReflectance = pow(1.0 - max(dot(-cameraDir, normal), 0.0), 5.0);\n    float u = atan(refractDir.z, refractDir.x) / (2.0 * M_PI) + 0.5;\n    float v = asin(refractDir.y) / M_PI + 0.5;\n    vec3 backgroundColor = texture(iChannel0, vec2(u,v)).rgb;\n    vec3 reflectDir = reflect(cameraDir, normal);\n    colour = backgroundColor;\n    \n    float eta = 2.33;\n    if (dot(cameraDir,normal)>0.0) normal = -normal;\n    vec3 refractDir1 = refract(cameraDir, normal, 1.0/eta);\n    float fresnel1 = pow(1.0 - max(dot(-cameraDir, normal), 0.0), 5.0);\n    vec3 refractedColor = sampleBackground(refractDir1);\n    vec3 reflectDir1 = reflect(cameraDir, normal);\n    vec3 reflectColor = sampleBackground(reflectDir);\n    vec3 finalColor = mix(refractedColor, reflectColor, fresnel1);\n    \n    vec3 specular = CalculateSpecular(pos, normal, -cameraDir, lightDir);\n    \n    colour = finalColor + specular;\n    \n    return colour;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n    \n    vec2 pixelCoords = (uv - 0.5) * iResolution.xy;\n\n    //pixelCoords.x = pixelCoords.x + 20.3 * sin(iTime * 10.);\n\n    vec3 rayDir = normalize(vec3(pixelCoords * 2.0 / iResolution.y, 1.0));\n    vec3 rayOrigin = vec3(0.0);\n\n    vec3 colour = RayMarch(rayOrigin, rayDir);\n\n    fragColor = vec4(pow(colour, vec3(1.0 / 2.2)), 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4fVBRV","date":"1734213822","viewed":125,"name":"Freeze over","username":"BarberDucky","description":"A totally accidental effect I got while developing something else.\nSDFs from Inigo Quilez and Raymarching code from Simon Dev.","likes":7,"published":1,"flags":0,"usePreview":1,"tags":["raymarching","noise","sdf","fbm","glass","ice","freeze","frost"],"hasliked":0,"parentid":"","parentname":""}}