{"ver":"0.1","info":{"id":"3sdGRl","date":"1595639002","viewed":69,"name":"Fractal - Simple - TheRealJoe","username":"TheRealJoe24","description":"s","likes":3,"published":1,"flags":16,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 1000\n#define MAX_DIST  1000.\n#define MIN_DIST  0.01\n\nvec3 col = vec3(1);\nfloat angle = 0.;\nvec3 ps;\n\nbool isPressed(float keyCode) {\n\tkeyCode = (keyCode + 0.5) / 256.0;\n    vec2 uv = vec2(keyCode, 0.25);\n    float key = texture(iChannel1, uv).r;\n\n    return key > 0.;\n}\n\nfloat sdSphere(vec3 p, vec3 c, float r) {\n\treturn length(p-c)-r;\n}\n\nmat3 m;\n\nfloat fractal(vec3 p) {\n    float param = 0.69;\n    // BEST PARAM VALUES\n   \t// 0.69, 0.78, 0.63\n    float scale = 1.;\n    float totalScale = 1.;\n    p = p*-m;\n    for (int i = 0; i < 4; i++) {\n        totalScale *= scale;\n        p = abs(p)/dot(p,p)-(param);\n        p *= scale;\n    }\n    ps = p;\n    return sdSphere(p, vec3(0), 0.25)*pow(2., -4.);\n}\n\nfloat dScene(vec3 p) {\n\tfloat d = MAX_DIST;\n    col = vec3(1);\n    d = min(d, sdSphere(p, vec3(0,0,5), 1.));\n    //d = min(d, sdSphere(p, vec3(iMouse.xy*0.01,4),0.75));\n    if (d == sdSphere(p, vec3(0,0,5), 1.)) col = vec3(1,0,0);\n    d = fractal(p);\n    return d;\n}\n\nfloat march(vec3 ro, vec3 rd, out bool hit) {\n    vec3 p = ro;\n\tfloat d = dScene(p);\n    float t = 0.;\n    for (int i = 0; i < MAX_STEPS; i++) {\n    \tt += d;\n        p = ro + t*rd;\n        d = dScene(p);\n        if (d<MIN_DIST || t>MAX_DIST) break;\n    }\n    if (d < MIN_DIST) hit = true;\n    return t;\n}\n\nvec3 getNormal(vec3 p) {\n\tfloat d = dScene(p);\n    vec2 e = vec2(0.001, 0);\n    \n    vec3 n = d-vec3(\n    \tdScene(p-e.xyy),\n        dScene(p-e.yxy),\n    \tdScene(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat computeLighting(vec3 p, vec3 light) {\n    vec3 n = getNormal(p);\n\tvec3 l = normalize(light-p);\n    float dif = clamp(dot(n,l),0.0,1.0);\n    return dif;\n}\n\nfloat marchReflections(vec3 p, vec3 light) {\n\tvec3 n = getNormal(p);\n    vec3 ro = p+n*0.01;\n    vec3 rd = n;\n    bool hit;\n    float d = march(ro, rd, hit);\n    vec3 p1 = ro + d*rd;\n    float dif = computeLighting(p1, light);\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 uvo = fragCoord/iResolution.xy;\n    //float angle = iTime*0.1;\n    //float angle = iMouse.y*-0.01;\n    angle = -0.1*iTime;\n    float c = cos(angle);\n    float s = sin(angle);\n    \n    m = mat3(\n    \tvec3(1,0,0),\n        vec3(0,c,-s),\n        vec3(0,s,c)\n    );\n    \n    vec3 ro = vec3(0,0,-5);\n    vec3 rd = normalize(vec3(uv,1.0));\n    \n    bool hit = false;\n    float d = march(ro, rd, hit);\n    vec3 p = ro + d*rd;\n    vec3 lightPos1 = vec3(0,5,-4);\n    //float r = marchReflections(p, lightPos1);\n\tfloat dif = computeLighting(p, lightPos1);\n    \n    //col = (vec3(1)-vec3(d/10.))*vec3(1);\n    col = hit ? texture(iChannel0, (ps*m).xy).xyz*dif : texture(iChannel2, uvo).xyz;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}