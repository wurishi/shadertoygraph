{"ver":"0.1","info":{"id":"Mt3GDl","date":"1472350408","viewed":664,"name":"Deep Realms","username":"Imsure1200q_1UWE130","description":"I luv this realm with the floating islands, that i think of this in my dream.\n\nso, I published it.\n\n\nPlz Comment!","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["raymarching","cave","deep","realm","floatingislands"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#ifdef GL_FRAGMENT_PRECISICION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nfloat map(vec3 p)\n{\n    float time = iTime;\n    vec2 uv = gl_FragCoord.xy / iResolution.xy;\n    vec3 rd = normalize(vec3(uv, 1.0));\n    #ifdef rd\n    return 0.0;\n    #else\n    return length(max(vec3(dot(cos(p), sin(p))), cos(p))*2.0-1.0) - 3.0;\n    #endif\n}\nvec3 trace(vec2 uv)\n{\n    float time = iTime;\n    float t = 0.0;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 rd = normalize(vec3(uv, 1.0));\n    rd.xz *= mat2(cos(time/2.0), -sin(time/2.0), sin(time/2.0), cos(time/2.0));\n    vec3 ro = vec3(cos(time)-map(rd+t), sin(6.0)-map(rd+t), sin(time));\n    for(int i = 0; i < 24; i++)\n    {\n        vec3 p = ro+t*rd;\n        float d = map(p);\n        t += d * 0.5;\n    }\n    float fog = 1.0/(1.0+t*t*0.1);\n    vec3 fc = vec3(fog);\n    return fc;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 p = normalize(vec3(uv, 1.0));\n    vec3 x = trace(uv);\n\tfragColor = vec4( cos(uv.y) ) +\n        vec4(-0.025, 0.025, 0.6, 1.0) -\n        vec4(x, 1.0) *\n        texture(iChannel0, vec2(uv.x + map(p)+tan(cos(time)), uv.y + map(p)+sin(time)));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#ifdef GL_FRAGMENT_PRECISICION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nfloat map(vec3 p)\n{\n    float time = iTime;\n    vec2 uv = gl_FragCoord.xy / iResolution.xy;\n    vec3 rd = normalize(vec3(uv, 1.0));\n    #ifdef rd\n    return 0.0;\n    #else\n    return length(max(vec3(dot(cos(p), sin(p))), cos(p))*2.0-1.0) - 3.0;\n    #endif\n}\nvec3 trace(vec2 uv)\n{\n    float time = iTime;\n    float t = 0.0;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 rd = normalize(vec3(uv, 1.0));\n    rd.xz *= mat2(cos(time/2.0), -sin(time/2.0), sin(time/2.0), cos(time/2.0));\n    vec3 ro = vec3(cos(time)-map(rd+t), sin(6.0)-map(rd+t), sin(time));\n    for(int i = 0; i < 24; i++)\n    {\n        vec3 p = ro+t*rd;\n        float d = map(p);\n        t += d * 0.5;\n    }\n    float fog = 1.0/(1.0+t*t*0.1);\n    vec3 fc = vec3(fog);\n    return fc;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 p = normalize(vec3(uv, 1.0));\n    vec3 x = trace(uv);\n\tfragColor = vec4( cos(uv.y) ) +\n        vec4(-0.025, 0.025, 0.6, 1.0) -\n        vec4(x, 1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}