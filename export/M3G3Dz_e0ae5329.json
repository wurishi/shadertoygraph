{"ver":"0.1","info":{"id":"M3G3Dz","date":"1717509344","viewed":39,"name":"Tiling & offset","username":"sohan","description":"learning ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323846\n\nfloat box(vec2 uv,vec2 size, float smoothness){\n    vec2 pos = vec2(0.5) - size*0.5;\n    vec2 c = smoothstep(pos,pos+smoothness,uv);\n    c *= smoothstep(pos,smoothness+pos, vec2(1.) - uv);\n    return c.x * c.y;\n}\n\nvec2 rotate2D(vec2 _st, float _angle){\n    _st -= 0.5;\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    _st += 0.5;\n    return _st;\n}\n\nvec2 tile(vec2 uv, float zoom){\n    uv *= zoom;\n    float angle = iTime*PI*1.2;\n    float f1 = sin(angle);\n    \n    if(mod(floor(angle/(PI/2.)),2.) == 0.){\n        uv.x += step(1., mod(uv.y,2.0)) * f1;\n    }\n    else {\n        uv.y += step(1., mod(uv.x,2.0)) * f1;\n    }\n    return fract(uv);\n}\n\nfloat circle(vec2 uv,float r, float edge){\n    return smoothstep(r,r + edge, length(uv));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = tile(uv,20.);\n    uv.x *= iResolution.x / iResolution.y;\n    uv -= 0.5;\n    vec3 col = vec3(circle(uv,0.4,0.097));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}