{"ver":"0.1","info":{"id":"llVXRt","date":"1485485933","viewed":109,"name":"graphics assignment 2 - blur","username":"xombifier","description":"submission for assignment 2 for graphics class","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["graphics","egp200","assignment1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Originally by Nikos Papadopoulos, 4rknova / 2015\n// Heavily modified by Dr. Sajid Farooq, 2016\n//The blur matrix. Since there are 9 pixels, each weight is 1/9 = 0.111 \n// to ensure that each pixel is averaged properly\nmat3 blur = mat3(\n 0.111, 0.111, 0.111, // first column (not row!)\n 0.111, 0.111, 0.111, // second column\n 0.111, 0.111, 0.111 // third column\n);\n\nmat3 sharpen = mat3(\n 0., -1, 0.0, // first column (not row!)\n -1, 5, -1, // second column\n 0., -1, 0.0 // third column\n);\n\n//added extra parameter for the texture\t\t\t\t\t\t\t\tvvvv\nvec3 sample(const int x, const int y, in vec2 fragCoord, sampler2D texture)\n{\n vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n uv = (uv + vec2(x, y)) / iChannelResolution[0].xy;\n return texture(texture, uv).xyz;\n}\n\n//added extra parameter for the texture\t\t\t\t\tvvvv\nvec3 filter(in vec2 fragCoord, mat3 kernel, sampler2D texture)\n{\n vec3 sum = sample(-1, -1, fragCoord, texture) * kernel[0][0]\n + sample(-1, 0, fragCoord, texture) * kernel[0][1]\n + sample(-1, 1, fragCoord, texture) * kernel[0][2]\n + sample( 0, -1, fragCoord, texture) * kernel[1][0]\n + sample( 0, 0, fragCoord, texture) * kernel[1][1]\n + sample( 0, 1, fragCoord, texture) * kernel[1][2]\n + sample( 1, -1, fragCoord, texture) * kernel[2][0]\n + sample( 1, 0, fragCoord, texture) * kernel[2][1]\n + sample( 1, 1, fragCoord, texture) * kernel[2][2];\n \n return sum;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    /////////////////////////////////////////\n    const float RADIUS = 0.1;\n    /////////////////////////////////////////\n        \n    //variable for mouse position\n    vec4 m = iMouse / iResolution.xxxx;\n    \n     //MAKE ASPECT RATIO 1:1\n    uv.y *= iResolution.y / iResolution.x;\n    \n    vec2 fc = fragCoord.xy;\n    \n    vec3 cf = filter(fc, blur, iChannel0);\n    \n    fragColor = vec4(cf, 1);\n    \n    //if uv is within radius of mouse, show other texture\n    if (length(uv - m.xy) < RADIUS)\n    {\n        vec3 sf = filter(fc, sharpen, iChannel1);\n        fragColor = vec4(sf, 1);\n    }\n}","name":"Image","description":"","type":"image"}]}