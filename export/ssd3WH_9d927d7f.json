{"ver":"0.1","info":{"id":"ssd3WH","date":"1629751139","viewed":184,"name":"[TWITCH] Mind Trap","username":"Flopine","description":"A shader made partially during a (tired XD) stream.\nYou can watch all the VODs here: https://www.twitch.tv/flopine","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","animation","glow","isometric","live","twitch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings and FabriceNeyret for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU (2.*PI)\n\n#define time iTime\n#define frt(sp,off) fract((time+off)*sp)\n#define flt(sp,off) floor((time+off)*sp)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define crep(p,c,l) p-=(c*clamp(round(p/c),-l,l))\n#define mo(p,d) p=abs(p)-d;if(p.y>p.x)p=p.yx\n\nstruct obj{\n  float d;\n  vec3 sha;\n  vec3 li;\n};\n\nobj minobj(obj a, obj b)\n{\n  if (a.d<b.d) return a; else return b;\n}\n\n\nfloat box (vec3 p , vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nobj base (vec3 p)\n{\n    vec3 pp = p;\n    float per = 5.;\n    vec3 id = round(p/per);\n    float off = clamp(length(id*0.52),-3.,3.);\n    crep(p,per,2.);\n    float d = box(p,vec3(per*0.1+off));\n    float b = box(p,vec3(0.6));\n\n    p=pp;\n    d = max(-d,box(p-vec3(1.9,-1.9,1.8),vec3(11.)));\n    d = max(-box(p+vec3(1.,-3.,1.),vec3(8.)),d);\n\n    return obj(d, vec3(0.0,0.01,0.05),vec3(0.,0.1,0.2));\n}\n\nobj octas (vec3 p)\n{\n    p.y -= 2.;\n    mo(p.zx,vec2(5.5));\n    vec2 id = round(p.xy/3.);\n    crep(p.xy,3.,2.);\n    float off = length(id),\n    anim = (PI/4.)*(flt(2.,off)+pow(frt(2.,off),8.));\n    p.xz *= rot(anim);\n    float d = dot(p,normalize(sign(p)))-0.8;\n\n    return obj(d,vec3(0.2,0.,0.),vec3(1.,0.5,0.));\n}\n\nfloat g1=0.;\nobj pillars (vec3 p)\n{\n    p -= vec3(1.9,2.,1.8); \n    mo(p.xz,vec2(11.));\n    float d = box(p,vec3(.5,15.,.5));\n    g1 += 0.1/(0.1+d*d);\n\n    return obj(d,vec3(0.),vec3(0.1));\n}\n\nvec2 id;\nobj SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n\n    id = round(p.xz/29.);\n    crep(p.xz,29.,1.);\n    obj scene = base(p);\n    scene = minobj(scene, octas(p));\n    scene = minobj(scene, pillars(p));\n\n    return scene;\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.001,0.);\n    return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\nfloat AO (float eps, vec3 p, vec3 n)\n{return SDF(p+eps*n).d/eps;}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    vec2 ouv = fragCoord.xy/iResolution.xy;\n\n    vec3 ro=vec3(uv*20.,-50.), rd=vec3(0.,0.,1.),p=ro,\n    col=vec3(0.), l=normalize(vec3(2.,3.,-2.));\n\n    bool hit = false; obj O;\n    for (float i=0.; i<64.;i++)\n    {\n        O = SDF(p);\n        if (O.d<0.001)\n        {hit=true;break;}\n        p += O.d*rd;\n    }\n\n    if (hit)\n    {\n        vec3 n=getnorm(p);\n        float light = max(dot(n,l),0.);\n        float ao = AO(0.1,p,n)+AO(0.5,p,n)+AO(0.9,p,n);\n        col = mix(O.sha, O.li, light)*(ao/3.);\n    }\n\n    col += g1*(sin(length(id)-frt(.3,0.)*TAU)+1.);\n    fragColor = vec4(sqrt(col),1.);\n}","name":"Image","description":"","type":"image"}]}