{"ver":"0.1","info":{"id":"43lfRf","date":"1728722888","viewed":34,"name":"Periodic Waveguide Simulation","username":"Fuergu","description":"Periodic wave guides can reflect a wave of a certain wavelength and can be applied to optical fibers. This is suppose to run on 800*450 px","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["2d","wave","simulation","optics","waveguide","phasedarray"],"hasliked":0,"parentid":"43lBzS","parentname":"Wave guide phased array"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/******************************************************************************/\n// This works as a distributed grating reflector.\n\n/******************************************************************************/\n// I'm not sure how to remove the reflection of the screen boundary, \n// which seems to be unavoidable with this simulation method\n/******************************************************************************/\n//                    Go To Common for Controls\n// Only certain frequency can effectively reflect the wave.\n/******************************************************************************/\n\n\nfloat boundaries(vec2 p,vec2 uv) {\n        float left = 0.;\n        float right = Xsize;\n        //Ysize = 1.-Ysize;\n        float top = 1.-Ysize/2.;\n        float bottom = Ysize/2.;\n        vec2 texCoord = (uv - vec2(left, bottom)) / vec2(right - left, top - bottom);\n        vec4 boundaryColor = texture(iChannel1, texCoord);\n        if (boundaryColor.r>.1){\n            return 1.0;\n        }else{return 0.0;}\n        \n        return 0.0;\n}\n\n\nconst vec3 wallColor = vec3(0.000,0.024,0.341);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 p = fragCoord / iResolution.y;\n\n    vec4 tex = texture(iChannel0, uv);\n    float field = (tex.x/AMP+1.)*.5; // map (-1, 1) range into (0, 1)\n\t//vec3 col = mix(vec3(field), wallColor, boundaries(p,uv));\n    field = .9*(field+0.05);\n    vec3 a = vec3(0.660, 0.560, 0.680);\n    vec3 b = vec3(0.718, 0.438, 0.720);\n    vec3 c = vec3(0.520, 0.800, 0.520);\n    vec3 d = vec3(-0.430, -0.397, -0.083);\n    vec3 col = palette(clamp(field,0.,1.), a, b, c, d);\n    col = pow(col,vec3(4.));\n    col = mix(col, wallColor, boundaries(p,uv));\n    \n\n    \n    \n    fragColor = vec4(col, 1.0);    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float boundaries(vec2 p,vec2 uv) {\n        float left = 0.;\n        float right = Xsize;\n        float top = 1.-Ysize/2.;\n        float bottom = Ysize/2.;\n        if (uv.x >= left && uv.x <= right && uv.y >= bottom && uv.y <= top) {\n            vec2 texCoord = (uv - vec2(left, bottom)) / vec2(right - left, top - bottom);\n            vec4 boundaryColor = texture(iChannel1, texCoord);\n            if (boundaryColor.r>.1){\n                return 1.0;\n            }else{return 0.0;}\n        }\n        if (uv.x >= right && uv.x <= right+outPutLength) {\n        vec2 texCoord = vec2(right+1., (uv.y - bottom) / (top - bottom));\n        vec4 boundaryColor = texture(iChannel1, texCoord);\n        return boundaryColor.r > .1 ? 1.0 : 0.0;  \n        }\n        if((uv.y<=bottom || uv.y>=top)&& uv.x<right) return 1.;\n        return 0.0;\n}\n\n// Fork of \"2D Wave Equation Simulation\" by vug. https://shadertoy.com/view/3d3yzj\n// 2024-10-10 08:59:44\n\n// nine-point compact stencil of Laplacian operator\nconst float[9] stencil = float[](\n  .05, .20, .05,\n  .20, -1., .20,\n  .05, .20, .05\n);\n\n// relative coordinates of 9x9 grid points\nconst vec2[9] grid = vec2[9](\n    vec2(-1.0,  1.0), vec2(0.0,  1.0), vec2(1.0,  1.0),\n    vec2(-1.0,  0.0), vec2(0.0,  0.0), vec2(1.0,  0.0),\n    vec2(-1.0, -1.0), vec2(0.0, -1.0), vec2(1.0, -1.0)\n);\n\nvec4 sample1(sampler2D channel, vec2 uv) {\n    // Boundary conditions for walls inside.\n    // ellipse in the middle\n    vec2 p = uv * vec2(1. * iResolution.x / iResolution.y, 1.0);\n    return mix(texture(channel, uv), vec4(0.0, 0.0, 0.0, 1.), boundaries(p,uv));\n}\n\n// values of a field stored in a texture on the grid\nfloat[9] getField(sampler2D channel, vec2 uv) {\n\tvec2 px = 1.0 / iResolution.xy;\n    float[9] field;\n    for (int i = 0; i < 9; i++) {\n        vec2 r = uv + px * grid[i];\n        field[i] = sample1(channel, r).x;\n    }\n    return field;\n}\n\n// Laplacian of a field\nfloat laplacian(float[9] samples) {\n    float sum = 0.0;\n    for (int i=0; i<9; i++) {\n        sum += stencil[i] * samples[i];\n    }\n    return sum;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 p = fragCoord / iResolution.y;\n    vec3 col = vec3(0.0);\n    \n    // initial conditions\n    if (iFrame == 0) {       \n        fragColor = vec4(col, 1.0);\n        return;\n    }\n\n    // Red channel stores current field values\n    // Green channel stores previous field values (in time)\n    vec2 tex = sample1(iChannel0, uv).rg;\n    float u = tex.r;\n    float u1 = tex.g;       \n   \n    float[9] field = getField(iChannel0, uv);\n\n    // Determine the speed of wave propagation based on the region\n    float delay = 0.; // Default speed\n\n    float speed = C-delay;\n    \n    // Wave motion calculation with modified speed\n    float val = 0.;\n    //if(fragCoord.x<2.||fragCoord.x>iResolution.x-2.||fragCoord.y<2.||fragCoord.y>iResolution.y-2.)\n    //{speed*=0.;}\n    \n    val = 2.0 * u - u1 + speed * dt * laplacian(field); // Include speed in the calculation\n    val *= DAMP;\n\n    // Calculate distance from mouse\n    vec2 mousePos = iMouse.xy / iResolution.xy;\n    mousePos = vec2(0.03/2.-0.01,0.5);\n    float halfSize = 0.03; // Half the size of the square\n\n    // Check if inside the square\n    bool isInSquare = (abs(p.x - mousePos.x) <= halfSize) && (abs(p.y - mousePos.y) <= halfSize);\n    \n    // Source condition\n    if(MouseControlSource)\n    {\n        if (isInSquare && iMouse.z>0.) {\n            float t = float(iFrame);\n            val = AMP * sin(FREQUENCY * t);\n        }\n    }\n    else\n    {\n        if (isInSquare && iTime<10.) {\n            float t = float(iFrame);\n            val = AMP * sin(FREQUENCY * t);\n        }\n    }\n    \n    //reduce trailing when source disappear\n    if(iTime>10.&&iTime<11. && p.x<0.03/2.-0.01+0.035)val*=.6;\n    \n    \n    \n    //if(fragCoord.x<2.||fragCoord.x>iResolution.x-2.)val*=0.;\n    fragColor = vec4(val, u, laplacian(field), 1.0);\n    //if(fragCoord.x<2.||fragCoord.x>iResolution.x-2.)fragColor.rgba*=0.;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"bool MouseControlSource  = false;\n// Periodic Feature\n#define depth .111111\n#define frequency 5.\n#define PeriodicLength .5\n\n// Simulation \nfloat C = 1.; // wave speed <= 2\nfloat dt=.5;\n\nfloat FREQUENCY = 0.2; // emission frequency\nfloat DAMP = 1.; // 1.0 for infinite waves\nfloat AMP = 2.;\n\nfloat Ysize = 0.;\nfloat Xsize = 1.;\nfloat outPutLength = .05;\n\n//iq's artical\nfloat sdBox(in vec2 p, in vec2 b) {\n    vec2 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n// https://www.shadertoy.com/view/MdcfDj\nfloat hash_Tong(uvec2 q)\n{\n\tq *= uvec2(1597334677U, 3812015801U);\n    uint n = q.x ^ q.y;\n    n = n * (n ^ (n >> 15));\n    return float(n) * (1.0/float(0xffffffffU));\n}\nfloat map(float value, float fromMin, float fromMax, float toMin, float toMax) {\n    return toMin + (value - fromMin) * (toMax - toMin) / (fromMax - fromMin);\n}\n// by iq, https://iquilezles.org/articles/palettes/\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.283185*(c*t+d) );\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.);\n    vec2 uv = fragCoord / iResolution.xy;\n    float waveguide = texture(iChannel0,uv).b;\n    \n    fragColor += vec4(vec3(waveguide),1.);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// by iq\n\n// The MIT License\n// Copyright Â© 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Integral of a square pulse signal is a triangle signal\n// Integral of a triangle signal is a quadratic ladder function\n//\n// blue   : sqr = square\n// red    : tri = integral(sqr)\n// yellow : pri = integral(tri) = integral(integral(sqr))\n//\n// Developed to illustrate this article: https://iquilezles.org/articles/morecheckerfiltering\n\n// Returns the square, triangular and quadratic-ladder signals\n//\n// Branchless is always nicer\n//\nvec3 funcs(in float x)\n{\n    x *= 0.5;\n    \n    float h = fract(x) - 0.5;\n    \n    float s = -sign(h);\n    float t = 1.0 - 2.0 * abs(h);          // also 1.0 + 2.0*h*s\n    float p = x + h * t;\n    \n    return vec3(s, t, p);\n}\n\nfloat sdSegment(vec2 p)\n{\n    p = abs(p);\n    return length(vec2(p.x, min(1.0 - p.y, 0.0)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\t\n    const float sca = 10.;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = sca * (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    p.y-=.3/450.*iResolution.y;\n    p.y/=depth/450.*iResolution.y;\n    p.x*=frequency/800.*iResolution.x;\n    \n    //part that without\n    if(uv.x<1.-PeriodicLength)p.y*=10000.;\n    float px = sca * 2.0 / iResolution.y;\n    \n    vec3 f = funcs(p.x);\n    \n    // background\n    vec3 col = vec3(0.);\n    \n    // å°æ¹æ³¢ä¸è¾¹è®¾ç½®ä¸ºç½è²\n    if (p.y <= f.x && fragCoord.y/iResolution.y>.495) {\n        col = vec3(1.0); // å°ä¸åé¨åè®¾ç½®ä¸ºç½è²\n    } else {\n        // graphs\n        col = mix(col, vec3(1.000, 1.000, 1.000), 1.0 - smoothstep(0.5 * px, 1.5 * px, min(abs(p.y - f.x), length(vec2(fract(p.x + 0.5) - 0.5, min(1.0 - abs(p.y), 0.0))))));\n    }\n    \n    fragColor = vec4(vec3(1.-col), 1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}