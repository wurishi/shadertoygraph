{"ver":"0.1","info":{"id":"Mt2BRG","date":"1516339511","viewed":98,"name":"Julia with PICO-8 palette","username":"emmflo","description":"It's a simple julia set fractal with pico-8 color scheme.\nIt use a simple modulo to select the color.\nIt's my first ever shader.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","pico8"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 color0 = vec3(0.0, 0.0, 0.0);\nvec3 color1 = vec3(0.06274509803921569, 0.16862745098039217, 0.3254901960784314);\nvec3 color2 = vec3(0.49411764705882355, 0.1450980392156863, 0.3254901960784314);\nvec3 color3 = vec3(0.0, 0.5294117647058824, 0.3176470588235294);\nvec3 color4 = vec3(0.6705882352941176, 0.3215686274509804, 0.21176470588235294);\nvec3 color5 = vec3(0.37254901960784315, 0.3411764705882353, 0.30980392156862746);\nvec3 color6 = vec3(0.7607843137254902, 0.7647058823529411, 0.7803921568627451);\nvec3 color7 = vec3(1.0, 0.9450980392156862, 0.9098039215686274);\nvec3 color8 = vec3(1.0, 0.0, 0.30196078431372547);\nvec3 color9 = vec3(1.0, 0.6392156862745098, 0.0);\nvec3 color10 = vec3(1.0, 0.9254901960784314, 0.15294117647058825);\nvec3 color11 = vec3(0.0, 0.8941176470588236, 0.21176470588235294);\nvec3 color12 = vec3(0.1607843137254902, 0.6784313725490196, 1.0);\nvec3 color13 = vec3(0.5137254901960784, 0.4627450980392157, 0.611764705882353);\nvec3 color14 = vec3(1.0, 0.4666666666666667, 0.6588235294117647);\nvec3 color15 = vec3(1.0, 0.8, 0.6666666666666666);\n\nvec3 palette( in float i, in vec3 color0, in vec3 color1, in vec3 color2, in vec3 color3, in vec3 color4, in vec3 color5, in vec3 color6, in vec3 color7, in vec3 color8, in vec3 color9, in vec3 color10, in vec3 color11, in vec3 color12, in vec3 color13, in vec3 color14, in vec3 color15)\n{\n    vec3 c;\n    if (int(i) % 16 == 0)\n        return color0;\n    else if (int(i) % 16 == 1)\n        return color1;\n    else if (int(i) % 16 == 2)\n        return color2;\n    else if (int(i) % 16 == 3)\n        return color3;\n    else if (int(i) % 16 == 4)\n        return color4;\n    else if (int(i) % 16 == 5)\n        return color5;\n    else if (int(i) % 16 == 6)\n        return color6;\n    else if (int(i) % 16 == 7)\n        return color7;\n    else if (int(i) % 16 == 8)\n        return color8;\n    else if (int(i) % 16 == 9)\n        return color9;\n    else if (int(i) % 16 == 10)\n        return color10;\n    else if (int(i) % 16 == 11)\n        return color11;\n    else if (int(i) % 16 == 12)\n        return color12;\n    else if (int(i) % 16 == 13)\n        return color13;\n    else if (int(i) % 16 == 14)\n        return color14;\n    else if (int(i) % 16 == 15)\n        return color15;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat i = 0.0;\n    float xtemp;\n    vec2 v;\n    \n    v.x = fragCoord.x / iResolution.x * 3.5 - 1.75;\n    v.y = fragCoord.y / iResolution.y * 2.0 - 1.0;\n    while (v.x*v.x + v.y*v.y < 4.0 && i < 1000.0)\n    {\n        v = mat2(v, -v.y, v.x)*v;\n        v.x += iMouse.x / iResolution.x * 3.5 - 1.75;\n        v.y += iMouse.y / iResolution.y * 2.0 - 1.0;\n        i++;\n    }\n\tfragColor = vec4(palette(i, color0, color1, color2, color3, color4, color5, color6, color7, color8, color9, color10, color11, color12, color13, color14, color15), 1.0);\n}","name":"Image","description":"","type":"image"}]}