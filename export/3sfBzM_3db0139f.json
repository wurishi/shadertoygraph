{"ver":"0.1","info":{"id":"3sfBzM","date":"1587851881","viewed":363,"name":"Symmetry Elements","username":"izutionix","description":"control the number of elements by changing the N define\n[url=https://www.shadertoy.com/view/tdsBz4]aesthetically better version[/url]","likes":13,"published":3,"flags":32,"usePreview":0,"tags":["interactive","symmetrical"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define TAU 6.28318530718\n\n#define N 3\n#define FRAMERATE 60.\n\nvec2 orbit(float t) {\n    return vec2(sin(t),cos(t));\n}\n\n//rotation function snatched from BigWIngs\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec3 ScatterColors(float g, vec3 c)\n{\n    vec3 g3 = vec3(g);\n    vec3 G1 = pow(c, g3);\n    vec3 G2 = vec3(1.)-pow(vec3(1.)-c, vec3(1.)-g3);\n    \n    vec3 A = G1*(vec3(1.)-G1);\n    vec3 B = G2*(vec3(1.)-G2);\n    \n    return 4.5*mix(A, B, g3);\n}\n\nfloat n = float(N);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 mouse = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n    float t = float(iFrame)/FRAMERATE; //produces less gaps than iTime\n    \n    vec3 element = vec3(0.);\n    \n    for(int I = 0; I<N; I++) {\n        \n        float i = float(I);\n        vec2 p = 1.25*uv + orbit(t+i*TAU/float(n));\n\n        if(iMouse == texture(iChannel1, vec2(0.))){}\n        else {\n            p = uv - mouse*Rot(i*TAU/n);\n        }\n        \n        vec3 col = ScatterColors((i+.5)/n, vec3(0.007, 0.828, 0.321)); //vec3(.009, .288, .828)\n\t\tcol = normalize(col);\n        element += col/vec3(length(p));\n    }\n    \n    //accumulate image\n    vec4 new = vec4(vec3(element*.2/n), 1.0);\n    vec4 old = texture(iChannel0, fragCoord.xy / iResolution.xy);\n\n    fragColor = mix(old,new,.1);//vec4(max(old,new));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 old = texture(iChannel1, vec2(0.));\n    vec4 new = iMouse;\n    fragColor = mix(old,new,.6);\n}","name":"Buffer B","description":"","type":"buffer"}]}