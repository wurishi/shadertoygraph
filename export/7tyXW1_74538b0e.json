{"ver":"0.1","info":{"id":"7tyXW1","date":"1640594614","viewed":96,"name":"Gamma overlap interactive","username":"LiquidSentience","description":"this showcases how the gamma corrected colors overlap more realistically. While the non-gamma corrected colors combine and the overlapped colors looks too bright","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["gammacorrectionoverlap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926538\n\nconst float radius = .3f; \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float horizontal_stretch = iResolution.x / iResolution.y;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;  \n    uv.x *= horizontal_stretch;\t// correct aspect ratio\n     \n    // normalized mouse coordinates\n    vec2 mouse_uv = iMouse.xy /  iResolution.xy; \n    mouse_uv.x *= horizontal_stretch;\t// correct aspect ratio\n    \n    // calculate offset of circles\n    float percent_time = mod(iTime, 5.0) / 5.0; \n    float percent_pi = cos(percent_time * 2. * PI) / 2.0 + 1.0;\n\n    vec2 center_point1 = vec2( mix(.30, .40, cos(percent_pi)), .5) * vec2(horizontal_stretch, 1.0);\n    vec2 center_point2 = vec2( mix(.70, .55, cos(percent_pi)), .5) * vec2(horizontal_stretch, 1.0);\n\n    // color in circles\n    vec3 col = vec3(0.0); \n    if(distance(center_point1, uv) < radius)\n    {\n         col += vec3(.3); // == 1\n    }\n    if(distance( center_point2,  uv ) < radius)\n    {\n         col += vec3(.7); // == 1\n    }\n    \n    // gamma correct area under line\n    if(uv.y <= mouse_uv.y)\n    {  \n        col = pow( col, vec3(1.0/2.2) ); \n    }\n    \n    // draw line for visual aid\n    if(distance(uv.y, mouse_uv.y) < .0015) \n    {\n        col = vec3(1.0); \n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}