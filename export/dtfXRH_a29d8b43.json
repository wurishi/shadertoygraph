{"ver":"0.1","info":{"id":"dtfXRH","date":"1674263818","viewed":75,"name":"checkboard illusion","username":"user_25","description":"bulging checkboard illusion (from http://www.psy.ritsumei.ac.jp/~akitaoka/checkerede.html)\nhold mouse to remove dots","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","illusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926536\n\n\n// offsets for dots\n// a + b = 1\nfloat a = 11. / 36.;\nfloat b = 25. / 36.;\n\n// dot radius\nfloat r = 5. / 36.;\n\n// dot shape\nbool circle = false;\n\n// size of the area with dots\nfloat illusionRadius = 5.;\n\n// zoom factor\nfloat scale = 18.;\n\n// square root of samples per pixel (supersampling)\nint n = 16;\n\n\n\n\n\nbool showDots = true;\n\nfloat f(float x, float y) {\n    return sin(PI*(x - .5)) * sin(PI*(y - .5));\n}\n\nfloat g0(float x, float y) {\n    x = x - a;\n    y = y - b;\n    \n    if (circle)\n        return x*x + y*y - r*r;\n    \n    return max(abs(x), abs(y)) - r;\n}\n\nfloat g(float x, float y) {\n    return g0(x, y) * g0(y, x);\n}\n\nfloat h(float x, float t) {\n    return .5 + t * (x - .5);\n}\n\nfloat i(float x, float y) {\n    float result = f(x, y);\n    \n    if (length(round(vec2(x, y))) < illusionRadius\n        && showDots)\n        result *= g(\n            mod(x, 1.),\n            h(mod(y, 1.), sign(x * y))\n        );\n    \n    return result;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    vec2 coord = scale * (fragCoord / iResolution.xy - vec2(.5)) * vec2(1, iResolution.y / iResolution.x);\n    float pixsize = scale / iResolution.x;\n    \n    showDots = !(0. < iMouse.z);\n    \n    // supersampling\n    float accum = 0.;\n    for (int u = 0; u < n; u++) {\n        for (int v = 0; v < n; v++) {\n            vec2 p = coord + vec2(pixsize) * vec2(\n                float(1 + 2 * u) / float(n + 2),\n                float(1 + 2 * v) / float(n + 2)\n            ) - vec2(pixsize / 2.);\n            accum += float(i(p.x, p.y) < 0.);\n        }\n    }\n    \n    \n\n    vec3 color = vec3(accum / float(n*n));\n\n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}