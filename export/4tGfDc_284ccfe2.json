{"ver":"0.1","info":{"id":"4tGfDc","date":"1544201462","viewed":153,"name":"sos-osc","username":"shadyLane","description":"oscillator bank ","likes":5,"published":1,"flags":8,"usePreview":0,"tags":["sound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat gate (float time, float period, float duration) {\n    return mod(time, period) < duration ? 1. : 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    float r = sin(uv.y * (7. + sin(iTime * 4. + 0.)*12.));\n    float g = sin(uv.y * (6. + sin(iTime * 4. + 2.)*9.));\n    float b = sin(uv.y * (15. + sin(iTime * 4.+ 4.)*23.));\n\tvec2 grid = mod(uv, vec2(0.01, 0.01));\n    \n    // Output to screen\n    fragColor = vec4(vec3(r * gate(iTime, 0.2, 0.12),\n                          g * gate(iTime, 0.3, 0.12),\n                          b * gate(iTime, 0.5, 0.12)), \n                     \t\t1.)\n        * gate(iTime, 0.1, 0.08);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float TWOPI = 6.283185307179586;\n\n// sinusoidal oscillator\n\nfloat sinosc( float time, float freq) {\n    return sin(TWOPI * time * freq);\n}\n\n// sinusoidal oscillators bank\n\nfloat multisinosc(float time, float number, float freqmin, float freqmax ) {\n    float signal = 0.;\n    for (float i = 0.; i < number; i += 1.) {\n        float freq = freqmin * pow(freqmax/freqmin, i/number);\n        signal += sinosc(time, freq);\n    }\n    return signal / number;\n}\n\n// mono in stereo out\n\nvec2 pan(float signal, float pan) {\n    pan = clamp(pan, -1., 1.);\n    float ampL = pan > 0. ? 1. - pan : 1.;\n    float ampR = pan < 0. ? 1. + pan : 1.;\n    return vec2(signal * ampL, signal * ampR);\n}\n\n// stereo oscillator bank\n\nvec2 panmultisinosc(float time, \n                    float number, \n                    float freqmin, \n                    float freqmax,\n                   \tfloat pancycles) {\n    vec2 signal = vec2(0.);\n    for (float i = 0.; i < number; i += 1.) {\n        float freq = freqmin * pow(freqmax/freqmin, i/number);\n        signal += pan(sinosc(time, freq), sin(TWOPI * i/number * pancycles));\n    }\n    return signal / number;\n}\n\n\n// sequencing \n\nfloat gate (float time, float period, float duration) {\n    return mod(time, period) < duration ? 1. : 0.;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    // loooooop\n    time = mod(time, 19.2);\n    return vec2(   \n      (multisinosc(time, 50., 30., 120.) * gate(time, 1.2, 0.6) * 3.\n      //+ multisinosc(time, 12., 300., 800.) * 0.5\n      + multisinosc(time, 15., 1000., 1400.) * gate(time, 4.8, 2.4)* 0.3\n      + multisinosc(time, 50., 3000., 9000.) * gate(time, 0.1, 0.03)* 0.2\n      + multisinosc(time, 24., 330., 4130.) * 0.1  \n      + multisinosc(time, 24., 13000., 13100.) * 0.2)\n      \n      * gate(time, 0.2, 0.12))\n      +panmultisinosc(time, 250., 50. + gate(time, 0.3, 0.1)*500., 8000., 13.) * 1.\n      *0.5;\n}","name":"Sound","description":"","type":"sound"}]}