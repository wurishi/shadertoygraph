{"ver":"0.1","info":{"id":"4sKcWz","date":"1521616509","viewed":160,"name":"rotocop","username":"LegoCylon","description":"draws a rotoscope-like effect around edges based on the differences between two video frames","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["edge","multipass","rotoscope"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution 4.0 International License. \n// To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/ or\n// send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n\n// Simply renders the content of Buf D to the screen\n\nvoid mainImage( out vec4 o, in vec2 i ) {\n    o = vec4(texture(iChannel0, i/iResolution.xy).rrr, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution 4.0 International License. \n// To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/ or\n// send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n\n// Captures a consistent video frame into Buf A used by Buf B & Buf C\n\nvoid mainImage( out vec4 o, in vec2 i ) {\n    o = texture(iChannel0, i/iResolution.xy);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution 4.0 International License. \n// To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/ or\n// send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n\n// Updates the content of Buf B every 10 frames.\n\nvoid mainImage( out vec4 o, in vec2 i ) {\n    o = pick(iChannel1, iChannel0, i/iResolution.xy, iFrame, 10);\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution 4.0 International License. \n// To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/ or\n// send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n\n// Updates the content of Buf C every 10 + 5 frames.\n\nvoid mainImage( out vec4 o, in vec2 i ) {\n    o = pick(iChannel1, iChannel0, i/iResolution.xy, iFrame + 5, 10);\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution 4.0 International License. \n// To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/ or\n// send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n\n// Calculates the difference between Buf B and Buf C contents and then blends between them into Buf D if the difference is large enough\n\nvoid mainImage( out vec4 o, in vec2 i ) {\n    vec2 uv = i/iResolution.xy;\n    \n    vec4 d = texture(iChannel1, uv) - texture(iChannel2, uv);\n    float c = 1. - smoothstep(0.45, 0.75, pow(length(d), .225));\n\n    vec4 v = texture(iChannel0, uv);\n\n    if (iFrame % 5 == 0) {\n        v.g = v.b;\n        v.b = mix(1., c, step(0.175, fwidth(c)));\n    }\n    \n    \n    v.r = mix(v.g, v.b, float(iFrame % 15) / 15.);\n    v.a = 1.0;\n    \n    o = v;\n}","name":"Buf D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// This work is licensed under the Creative Commons Attribution 4.0 International License. \n// To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/ or\n// send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n\n//  Chooses a or b depending on the frame (f) and interval (i).\n\nvec4 pick (sampler2D a, sampler2D b, vec2 uv, int f, int i) {\n    return f % i == 0 ? texture(a, uv) : texture(b, uv);\n}","name":"Common","description":"","type":"common"}]}