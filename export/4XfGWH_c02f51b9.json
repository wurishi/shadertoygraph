{"ver":"0.1","info":{"id":"4XfGWH","date":"1708636321","viewed":37,"name":"TP1-p2200263","username":"AzherFR","description":"TP 1 LIFGRAPHIQUE","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["tp1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2023.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(60.,2.,25.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// OPERATEURS\n\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n\nfloat Intersection(float a,float b)\n{\n    return max(a,b);\n}\n\nfloat Difference(float a,float b)\n{\n    return max(a,-b);\n}\n\nfloat UnionL(float a, float b)\n{\n    // r = degré de lissage (+ r est élevé + ça lisse)\n    float r = 1.0;  \n    float h = max(r-abs(a-b),0.)/r;\n    float g= (1./6.)*r*pow(h,3.0);\n    return min(a,b)-g;\n}\n\nfloat IntersectionL(float a, float b)\n{\n    // r = degré de lissage (+ r est élevé + ça lisse)\n    float r = 1.0;  \n    float h = max(r-abs(a-b),0.)/r;\n    float g= (1./6.)*r*pow(h,3.0);\n    return max(a,b)+g;\n}\n\nfloat DifferenceL(float a, float b)\n{\n    // r = degré de lissage (+ r est élevé + ça lisse)\n    float r = 1.0;  \n    float h = max(r-abs(a-b),0.)/r;\n    float g= (1./6.)*r*pow(h,3.0);\n    return max(a,-b)+g;\n}\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// PRIMITIVES\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Plan\n// p : point\n// c : center of skeleton\n// d : direction\nfloat Plan(vec3 p, vec3 c, vec3 d)\n{\n    return dot(p-c,d);\n}\n\n// DemiSphere\n// p : point\n// c : center of skeleton\n// r : radius\n// d : direction\nfloat DemiSphere(vec3 p, vec3 c, float r, vec3 d)\n{\n    float v=Intersection(Sphere(p,c,r),\n    Plan(p,c,d)\n    );\n    return v;\n}\n\n// Box\n// p : point\n// c : centre de la boîte\n// s : taille de la boîte (largeur, hauteur, profondeur)\n\nfloat Box(vec3 p, vec3 c, vec3 s)\n{\n    vec3 d = abs(p - c) - s;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\n// Tore\n// p : point\n// c : centre de la tore\n// r1 : rayon du tube\n// r2 : distance entre le centre de la tore et le centre du tube\nfloat Tore(vec3 p, vec3 c, float r1, float r2)\n{\n    vec2 q = vec2(length(p.xz - c.xz) - r2, p.y - c.y);\n    return length(q) - r1;\n}\n\n// Cylindre\n// p : point\n// c : centre du cylindre\n// d : l'axe du cylindre\n// r : rayon du cylindre\n// h : hauteur du cylindre\nfloat Cylindre(vec3 p, vec3 c, vec3 d, float r, float h)\n{\n    // Calcul du point au centre du cylindre\n    vec3 pc = p - c;\n    float projection = Plan(p, c, d);\n    \n    // Calcul de la distance horizontale entre le point et l'axe du cylindre\n    vec3 horizontalDistance = pc - projection * d;\n    \n    // Calcul de la distance verticale entre le point et le cylindre\n    float verticalDistance = length(horizontalDistance);\n    \n    // Calcul de la distance totale au cylindre\n    float distance = max(verticalDistance - r, abs(projection) - h / 2.0);\n    \n    return distance;\n}\n\n// Capsule\n// p : point\n// c : centre de la capsule\n// d : direction\n// r : rayon des extrémités semi-sphériques\n// h : hauteur du cylindre\nfloat Capsule(vec3 p, vec3 c, vec3 d, float r, float h)\n{\n    vec3 dp = p - c;\n    float t = Plan(p, c, d);\n\n    // Projection du point sur l'axe de la capsule\n    vec3 proj = c + d * clamp(t, 0.0, h);             //clamp est une fonction qui renvoie le 2eme ou le 3eme argument en fonction de la valeur de t\n    vec3 distVec = p - proj;\n\n    // Distance par rapport à l'axe de la capsule\n    float distAxis = length(distVec) - r;\n\n    // Distance par rapport aux extrémités semi-sphériques\n    float distSpheres = length(dp - d * clamp(t, 0.0, h)) - r;\n\n    // Si le point est à l'intérieur des extrémités semi-sphériques\n    if (t >= 0.0 && t <= h) {\n        return max(distAxis, distSpheres);\n    }\n\n    // Si le point est en dehors des extrémités semi-sphériques\n    return distSpheres;\n}\n\n\n// Cone\n// p : point\n// c : centre du cône\n// d : direction de l'axe du cône\n// r1 : rayon de la base du cône\n// r2 : rayon du sommet du cône\n// h : hauteur du cône\nfloat Cone(vec3 p, vec3 c, vec3 d, float r1, float r2, float h)\n{\n    // Calcul du point au centre de la base du cône\n    vec3 pc = p - c;\n    float projection = Plan(p, c, d);\n    \n    // Calcul de la distance horizontale entre le point et l'axe du cône\n    vec3 horizontalDistance = pc - projection * d;\n    \n    // Calcul de la distance verticale entre le point et la base du cône\n    float verticalDistance = length(horizontalDistance);\n    \n    // Calcul du rayon interpolé en fonction de la hauteur du point sur le cône\n    float radius = mix(r1, r2, projection / h);\n    \n    // Calcul de la distance totale au cône\n    float distance = max(verticalDistance - radius, abs(projection) - h / 2.0);\n    \n    return distance;\n}\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// TRANSFORMATIONS\n\n// Translation\n// p : point à translater\n// t : vecteur de translation\nvec3 Translate(vec3 p, vec3 t)\n{\n    return p + t;\n}\n\n// Rotation\n// p : point à tourner\n// axe : axe de rotation (doit être normalisé)\n// angle : angle de rotation en radians\nvec3 Rotate(vec3 p, vec3 axe, float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    float t = 1.0 - c;\n    vec3 rotatedPoint;\n    \n    rotatedPoint.x = p.x * (t * axe.x * axe.x + c) +\n                     p.y * (t * axe.x * axe.y - s * axe.z) +\n                     p.z * (t * axe.x * axe.z + s * axe.y);\n                     \n    rotatedPoint.y = p.x * (t * axe.x * axe.y + s * axe.z) +\n                     p.y * (t * axe.y * axe.y + c) +\n                     p.z * (t * axe.y * axe.z - s * axe.x);\n                     \n    rotatedPoint.z = p.x * (t * axe.x * axe.z - s * axe.y) +\n                     p.y * (t * axe.y * axe.z + s * axe.x) +\n                     p.z * (t * axe.z * axe.z + c);\n                     \n    return rotatedPoint;\n}\n\nvec3 Homothetie(vec3 p, vec3 centre, vec3 scaleFactors)\n{\n    vec3 translatedPoint = p - centre;\n    \n    translatedPoint.x *= scaleFactors.x;\n    translatedPoint.y *= scaleFactors.y;\n    translatedPoint.z *= scaleFactors.z;\n    \n    translatedPoint += centre;\n    \n    return translatedPoint;\n}\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// FORME COMPLEXE\n\n// Un Bonhomme de Neige\nfloat BonhommeNeige(vec3 p)\n{\n    // Corps du bonhomme de neige\n    float body = UnionL(\n        Sphere(p, vec3(12.0, 0.0, 5.0), 4.0),      // Corps\n        Sphere(p, vec3(12.0, 0.0, 11.0), 3.0)       // Ventre\n    );\n\n    // Tête du bonhomme de neige\n    float head = Sphere(p, vec3(12.0, 0.0, 15.0), 2.0);\n\n    // Yeux\n    float eye1 = Sphere(p, vec3(13.0, 1.7, 15.5), 0.3);\n    float eye2 = Sphere(p, vec3(11.0, 1.7, 15.5), 0.3);\n    \n    // Bras\n    float arm1 = Cylindre(p, vec3(8.0, 0., 11.0), vec3(1.0, 0.0, 0.), 0.3,6.);\n    float arm2 = Cylindre(p, vec3(16.0, 0.0, 11.0), vec3(-1.0, 0., 0.), 0.3,6.);\n    \n    // Mains\n    float hand1 = Sphere(p, vec3(5.,0.,11.0), 0.5);\n    float hand2 = Sphere(p, vec3(19.,0.,11.0), 0.5);\n    \n    // Nez\n    float nose = Cone(p,vec3(12.0, 3.0, 15.0), vec3(0.,1.,0.),0.3,0.,5.);\n    \n    // Boutons\n    float button1 = Sphere(p, vec3(12.0, 4., 4.75), 0.3);\n    float button2 = Sphere(p, vec3(12.0, 4., 6.), 0.3);\n    float button3 = Sphere(p, vec3(12.0, 3.2, 7.5), 0.3);\n    float button4 = Sphere(p, vec3(12.0, 2.7, 12.5), 0.3);\n    float button5 = Sphere(p, vec3(12.0, 3., 10.5), 0.3);\n    \n    // Combine tout\n    float snowman = Union(Union(Union(UnionL(UnionL(UnionL(Union(Union(Union(Union(Union(Union(Union(body, button5), button4), button3), button2), button1), hand1), hand2), arm1), arm2), nose), head), eye1), eye2);\n\n    return snowman;\n}\n\n\nfloat Escalier(vec3 p)\n{\n    float stairs1 = Box(p,vec3(0.,0.,-2),vec3(2.,5.,1.));\n    float stairs2 = Box(p,vec3(2.,0.,-2),vec3(2.,5.,2.)); \n    float stairs3 = Box(p,vec3(4.,0.,-2),vec3(2.,5.,3.));\n    float stairs4 = Box(p,vec3(6.,0.,-2),vec3(2.,5.,4.)); \n    float stairs5 = Box(p,vec3(12.,0.,-2),vec3(6.,5.,5.));\n    float stairs = Union(Union(Union(Union(stairs5,stairs4), stairs3), stairs2), stairs1);\n    return stairs;\n}\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n\n\n  // AMUSEZ-VOUS A DECOMMENTER/COMMENTER LES DIFFERENTES PARTIES POUR VOIR LES FORMES\n\n\n  /*float v=DemiSphere(p,vec3(0.,0.,0.),5.0,vec3(0.,1.,-1.)                 // Demi-Sphere Fonctionnelle\n  );*/\n  \n  /*float v=Box(p,vec3(3.,3.,3.),vec3(3.,3.,3.))                            // Boite Fonctionnelle\n  ;*/\n  \n  /*float v=Tore(p, vec3(3.,3.,3.), 1., 3.)                                 // Tore Fonctionnelle\n  ;*/\n  \n  /*float v=Cylindre(p, vec3(0.0, 5.0, 6.0), vec3(0.0, -1.0, 0.), 0.3,3.)   // Cylindre Fonctionnelle\n  \n  ;*/\n  /*float v=Capsule(p, vec3(3.,3.,3.), vec3(0.,1.,0.), 3., 6.)              // Capsule Fonctionnelle\n  ;*/\n  \n  /*float v=Cone(p,vec3(3.,3.,3.), vec3(0.,1.,0.),0.3,0.,5.)                // Cone Fonctionnel\n  ;*/\n\n  float snowman = BonhommeNeige(p);\n  float stairs = Escalier(p);\n  float ground = Plan(p,vec3(0.,0.,-3.25),vec3(0.0,0.0,1.0));\n  float formeComplexe =Union(Union(stairs,ground),snowman);\n  \n  return formeComplexe;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}