{"ver":"0.1","info":{"id":"lst3Wl","date":"1452808683","viewed":523,"name":"Electricity arcs","username":"jbouny","description":"An electricity arc effect","likes":14,"published":1,"flags":32,"usePreview":0,"tags":["plasma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define PI 3.1415926\n\nconst bool circleTransform = true;\n\nvec2 lines(in vec2 uv)\n{\n    return mod(uv * vec2(-1.0, 2.0), 1.0);\n}\n\nvec2 circle(in vec2 uv)\n{\n    vec2 cuv = uv - vec2(0.5);\n    float angle = atan(cuv.x, cuv.y);\n    cuv = vec2(angle / (2.0 * PI), length(cuv) * 1.5);\n    return mod(cuv, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy);\n    vec3 lineColor = texture(iChannel0, uv).xyz;\n    vec3 linesColor = texture(iChannel0, lines(uv)).xyz;\n    vec3 circleColor = texture(iChannel0, circle(uv)).xyz;\n    \n    fragColor = vec4(max(lineColor, max(linesColor, circleColor)), 1.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.1415926\n\nconst float SOUND  = 1.0;\nconst float SPEED  = 3.0;\nconst float SCALE  = 4.0;\nconst float GLOW   = 1.5;\nconst float EASING = 0.2;\nconst int   ARCS   = 5;\n\nfloat easing(float x)\n{\n    if(x < EASING || x > 1.0 - EASING) {\n        float a = (0.5 - abs(x - 0.5)) / EASING;\n        return a * (2.0 - a);\n    }\n    return 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy);\n    vec2 cuv = uv - vec2(0.5);\n    cuv.x *= iResolution.x/iResolution.y;\n    \n    float frequency = (sin(iTime) + 5.0) * SCALE;\n    float easingFactor = easing(uv.x);\n    \n    // draw arcs\n    float intensity = 0.0;\n    for(int i=0; i < ARCS; i++)\n    {\n        float coord = float(i) / float(ARCS);\n        float rand = texture( iChannel0, vec2(coord)).x;\n        float react = SOUND * texture( iChannel1, vec2(coord, 0.0) ).x * 0.5;\n        react += floor(react * 10.0) / 10.0; // discretize sound space\n        \n        float colorFactor = (1.0 + react) * 0.001;\n        float wave = sin(rand * (cuv.x * frequency + 20.0) + mod(iTime, 2.0 * PI) * SPEED);\n        \n        intensity += colorFactor * abs( \n            (react + 0.7) * GLOW / sin( \n                cuv.y +\n            \teasingFactor * wave * (1.0 + 15.0 * react) * 0.01));\n    }\n    fragColor = vec4(intensity * vec3(0.8, 1.5, 2.0), 1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}