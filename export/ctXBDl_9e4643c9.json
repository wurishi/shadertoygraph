{"ver":"0.1","info":{"id":"ctXBDl","date":"1693570209","viewed":177,"name":"Cog Motion Illusion","username":"SnoopethDuckDuck","description":"the points move around circles like interlocking cogs\n\nugly golfed version (291 chars):\nhttps://www.shadertoy.com/view/DtfBDl","likes":18,"published":3,"flags":0,"usePreview":0,"tags":["illusion","tiling","cog"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159\n#define dir(a) vec2(cos(a),sin(a))\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy,\n         u = 2.*(U+U-R)/R.y,\n         I, // Integer part\n         F; // Fractional part\n    \n    float n = 3., // Subdivision number\n          o = .2 + .3 * smoothstep(2., 4., iTime); // Offset from centre\n    \n    O *= 0.;\n\n    for (int i;  i++ < 2; ) \n    for (int j;  j++ < 2; ) {   \n        I = ceil(u + 1. - vec2(i, j)),  \n        F = I - u;\n        \n        //O += smoothstep(-4./R.y, 4./R.y, .02 - abs(.42- length(F))); \n        \n        // Rotate in checkerboard pattern,\n        // offset rotation by pi every 2nd row\n        float a = atan(F.y, F.x)\n                + (mod(I.x+I.y, 2.) - .5) * iTime\n                - pi * mod(I.y, 2.);\n        \n        // Subdivide angle\n        a = mod(a, 2.*pi/n);\n        \n        // Centre F in each subdivision\n        F = length(F) * dir(a) - o * dir(pi/n);\n        \n        // Draw n circles, one in each subdivision\n        O += smoothstep(-4./R.y, 4./R.y, .02 - abs(.07- length(F)));\n     }\n}","name":"Image","description":"","type":"image"}]}