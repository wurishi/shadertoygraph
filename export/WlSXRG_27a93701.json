{"ver":"0.1","info":{"id":"WlSXRG","date":"1566197433","viewed":90,"name":"draw-math-4","username":"lilieming","description":"draw-math","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["justcoding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":" vec3 mod289(vec3 x) { return x - floor(x * (1. / 289.)) * 289.; }\n   vec4 mod289(vec4 x) { \n    return x - floor(x * (1. / 289.)) * 289.;\n}\n vec4 permute(vec4 x) { \n     return mod289(((x*34.)+1.)*x); \n }\n vec4 taylorInvSqrt(vec4 r) { \n     return 1.79284291400159 - .85373472095314 * r;\n }\n  vec3 fade(vec3 t) {\n      return t*t*t*(t*(t*6.-15.)+10.);\n  }\nfloat noise(vec3 P) {\n    vec3 i0 = mod289(floor(P)), i1 = mod289(i0 + vec3(1.)),\n       f0 = fract(P), f1 = f0 - vec3(1.), f = fade(f0);\n     vec4 ix = vec4(i0.x, i1.x, i0.x, i1.x), iy = vec4(i0.yy, i1.yy),\n          iz0 = i0.zzzz, iz1 = i1.zzzz,\n        ixy = permute(permute(ix) + iy), ixy0 = permute(ixy + iz0), ixy1 = permute(ixy + iz1),\n          gx0 = ixy0 * (1. / 7.), gy0 = fract(floor(gx0) * (1. / 7.)) - .5,\n          gx1 = ixy1 * (1. / 7.), gy1 = fract(floor(gx1) * (1. / 7.)) - .5;\n     gx0 = fract(gx0); gx1 = fract(gx1);\n     vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0), sz0 = step(gz0, vec4(0.)),\n          gz1 = vec4(0.5) - abs(gx1) - abs(gy1), sz1 = step(gz1, vec4(0.));\n     gx0 -= sz0 * (step(0., gx0) - .5); gy0 -= sz0 * (step(0., gy0) - .5);\n     gx1 -= sz1 * (step(0., gx1) - .5); gy1 -= sz1 * (step(0., gy1) - .5);\n     vec3 g0 = vec3(gx0.x,gy0.x,gz0.x), g1 = vec3(gx0.y,gy0.y,gz0.y),\n          g2 = vec3(gx0.z,gy0.z,gz0.z), g3 = vec3(gx0.w,gy0.w,gz0.w),\n          g4 = vec3(gx1.x,gy1.x,gz1.x), g5 = vec3(gx1.y,gy1.y,gz1.y),\n          g6 = vec3(gx1.z,gy1.z,gz1.z), g7 = vec3(gx1.w,gy1.w,gz1.w);\n     vec4 norm0 = taylorInvSqrt(vec4(dot(g0,g0), dot(g2,g2), dot(g1,g1), dot(g3,g3))),\n          norm1 = taylorInvSqrt(vec4(dot(g4,g4), dot(g6,g6), dot(g5,g5), dot(g7,g7)));\n     g0 *= norm0.x; g2 *= norm0.y; g1 *= norm0.z; g3 *= norm0.w;\n     g4 *= norm1.x; g6 *= norm1.y; g5 *= norm1.z; g7 *= norm1.w;\n     vec4 nz = mix(vec4(dot(g0, vec3(f0.x, f0.y, f0.z)), dot(g1, vec3(f1.x, f0.y, f0.z)),\n                       dot(g2, vec3(f0.x, f1.y, f0.z)), dot(g3, vec3(f1.x, f1.y, f0.z))),\n                   vec4(dot(g4, vec3(f0.x, f0.y, f1.z)), dot(g5, vec3(f1.x, f0.y, f1.z)),\n                        dot(g6, vec3(f0.x, f1.y, f1.z)), dot(g7, vec3(f1.x, f1.y, f1.z))), f.z);\n     return 2.2 * mix(mix(nz.x,nz.z,f.y), mix(nz.y,nz.w,f.y), f.x);\n  }\n  float turbulence(vec3 P) {             // Turbulence is a fractal sum of abs(noise).\n     float f = 0., s = 1.;              // The domain is rotated after every iteration\n     for (int i = 0 ; i < 9 ; i++) {      //    to avoid any visible grid artifacts.\n        f += abs(noise(s * P)) / s;\n        s *= 2.;\n        P = vec3(.866 * P.x + .5 * P.z, P.y + 100., -.5 * P.x + .866 * P.z);\n      }\n      return f;\n  }\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    \n   \tfloat c = noise(vec3(uv.x, uv.y+sin(iTime), 5.*sin(iTime*.5)))*255.;\n    fragColor = vec4(c,c,c,1.0);\n}","name":"Image","description":"","type":"image"}]}