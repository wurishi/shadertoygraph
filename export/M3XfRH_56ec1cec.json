{"ver":"0.1","info":{"id":"M3XfRH","date":"1728000415","viewed":19,"name":"Sin wave shader","username":"layne27","description":"A shader made with sin waves and reflect functions","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sinwave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec2 reflectVector = vec2(0.01, 0.01);\n    const float colorConstantA = 0.5;\n    const float colorConstantB = 0.5;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv *= 5.0;\n    \n    // converts the y coord of uv to a sin wave\n    uv.y += sin(uv.x * iTime) * 0.1;\n    \n    \n    // converts the x coord of uv to a sin wave\n    uv.x += sin(uv.x * iTime) * 0.1;\n    \n    // modulusly divides the uv x and y variables\n    float t = mod(uv.x + uv.y, 2.0);\n    \n    // spinning the UV coords\n    uv += vec2(uv.x*cos(iTime)-uv.y*sin(iTime),uv.y*cos(iTime)+uv.x*sin(iTime));\n    // reflects the uv over the reflect vector\n    uv -= reflect(reflectVector, uv);\n    \n    \n    // Time varying pixel color using tangent and uv coords\n    vec3 col = colorConstantA + 0.5*tan(iTime+uv.xyx+vec3(0,2,4));\n    vec3 colA = colorConstantB + 0.2*tan(iTime+uv.xyx+vec3(0,1,3));\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    fragColor = vec4(colA,1.0);\n}","name":"Image","description":"","type":"image"}]}