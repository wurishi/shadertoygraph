{"ver":"0.1","info":{"id":"slGyWd","date":"1662434666","viewed":97,"name":"Multiple Objects & Materials WIP","username":"FifthStateOfMatter","description":"Raytracing multiple spheres with different colors.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct material{\n    vec3 clr;\n    int type;\n};\n\nstruct sphere{\n    vec3 center;\n    float radius;\n    material mater;\n};\n\nsphere[] spheres = sphere[](sphere(vec3(10, 10, -10), 0.5, material(vec3(1), 0)), sphere(vec3(0, 0, 5), 1.0, material(vec3(1, 0, 0), 1)));\n\nconst int numSpheres = spheres.length();\n\nbool raytraceSphere(vec3 orig, vec3 dir, out float t, sphere sphr, out material mat){\n    vec3 oc = orig - sphr.center;\n    float a = dot(dir, dir);\n    float b = 2.0*dot(oc, dir);\n    float c = dot(oc, oc) - sphr.radius*sphr.radius;\n    float d = b*b - 4.0*a*c;\n    t = (-b - sqrt(d))/(2.0*a);\n    mat = sphr.mater;\n    bool h;\n    d >= 0.0 ? h = true : h = false;\n    return h;\n}\n\nbool raytraceScene(vec3 orig, vec3 dir, out float t, sphere[numSpheres] sphrs, out int c, out material mat){\n    float minT = 10000000.0;\n    int index = 0;\n    bool h = false;\n    material mt;\n    for(int i = 0; i < numSpheres; i++){\n        float testT;\n        bool r = raytraceSphere(orig, dir, testT, sphrs[i], mt);\n        if(r && testT < minT && testT > 0.0){\n            minT = testT;\n            index = i;\n            h = true;\n        }\n    }\n    t = minT;\n    c = index;\n    mat = sphrs[c].mater;\n    return h;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    spheres[0].center = vec3(cos(iTime)*10.0, 0, sin(iTime)*10.0 + 5.0);\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 orig = vec3(0);\n    vec3 dir = vec3(uv.xy, 1);\n    float t;\n    int c;\n    material rmat;\n    bool r = raytraceScene(orig, dir, t, spheres, c, rmat);\n    \n    vec3 rh = orig + dir*t;\n    vec3 normal = rh - spheres[c].center;\n    \n    vec3 lp = spheres[0].center;\n    vec3 lr = lp - rh;\n    \n    float lt;\n    int lc;\n    material lmat;\n    bool rl = raytraceScene(rh, lp, lt, spheres, lc, lmat);\n    //vec3 lr = rh + lp*lt;\n    \n    float shadow = 0.3;\n    \n    float d = 0.0;\n    \n    vec3 col;\n    \n    if(r){\n        if(rmat.type == 0){\n            d += 1.0;\n            col = rmat.clr;\n        }else if(lmat.type != 0 && lt < 10.0){\n            d += dot(normalize(normal), normalize(lr)) - shadow;\n            col = vec3(max(d, 0.2))*rmat.clr;\n        }else if(lmat.type == 0){\n            d += dot(normalize(normal), normalize(lr));\n            col = vec3(max(d, 0.15))*rmat.clr;\n        }\n        col = vec3(max(d, 0.2))*rmat.clr;\n    }else{\n        col = vec3(0.8);\n        d = 0.0;\n    }\n    \n    //col = vec3(normalize(lr));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}