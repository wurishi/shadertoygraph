{"ver":"0.1","info":{"id":"wtGXW1","date":"1582607197","viewed":109,"name":"thebookofshaders-patterns","username":"enigmawxy","description":"patterns in the book of shaders","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shader","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define AA 4\n#define PI 3.14159265358979323846\n\nvec2 brickTile(vec2 _st, float _zoom){\n    _st *= _zoom;\n\n    // Here is where the offset is happening\n    _st.x += step(1., mod(_st.y,2.0)) * 0.5;\n\n    return fract(_st);\n}\n\nfloat circle(in vec2 _st, in float _radius){\n    vec2 l = _st-vec2(0.5);\n    return 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(l,l)*4.0);\n}\n\nvec2 rotate2D(vec2 _st, float _angle){\n    _st -= 0.5;\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    _st += 0.5;\n    return _st;\n}\n\nvec2 tile(vec2 _st, float _zoom){\n    _st *= _zoom;\n    return fract(_st);\n}\n\nfloat box(vec2 _st, vec2 _size, float _smoothEdges){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 aa = vec2(_smoothEdges*0.5);\n    vec2 uv = smoothstep(_size,_size+aa,_st);\n    uv *= smoothstep(_size,_size+aa,vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nfloat box1(vec2 _st, vec2 _size){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 uv = smoothstep(_size,_size+vec2(1e-4),_st);\n    uv *= smoothstep(_size,_size+vec2(1e-4),vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nvec2 rotateTilePattern(vec2 _st){\n\n    //  Scale the coordinate system by 2x2\n    _st *= 2.0;\n\n    //  Give each cell an index number\n    //  according to its position\n    float index = 0.0;\n    index += step(1., mod(_st.x,2.0));\n    index += step(1., mod(_st.y,2.0))*2.0;\n\n    //      |\n    //  2   |   3\n    //      |\n    //--------------\n    //      |\n    //  0   |   1\n    //      |\n\n    // Make each cell between 0.0 - 1.0\n    _st = fract(_st);\n\n    // Rotate each cell according to the index\n    if(index == 1.0){\n        //  Rotate cell 1 by 90 degrees\n        _st = rotate2D(_st,PI*0.5);\n    } else if(index == 2.0){\n        //  Rotate cell 2 by -90 degrees\n        _st = rotate2D(_st,PI*-0.5);\n    } else if(index == 3.0){\n        //  Rotate cell 3 by 180 degrees\n        _st = rotate2D(_st,PI);\n    }\n\n    return _st;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x*=iResolution.x/iResolution.y;\n\tvec3 color = vec3(0.);\n    \n    int AA = 0;\n    AA = int(iTime)%5;\n    \n    if(AA==0) {\n    \tuv=fract(uv);\n        color = vec3(uv, 0.0);\n    }\n    if(AA==1) {\n        uv*=3.0;\n    \tuv=fract(uv);\n        color = vec3(uv, 0.0);\n        color = vec3(circle(uv, .5));\n    }\n    if(AA==2) {\n    \tuv=tile(uv, 4.);\n        uv=rotate2D(uv, PI*.25);\n        color = vec3(box(uv,vec2(0.7),0.01));\n        //color = vec3(uv, 0.0);\n    }\n    if(AA==3) {\n        uv = brickTile(uv,5.0);\n    \tcolor = vec3(box1(uv,vec2(0.9)));\n    }\n    if(AA==4) {\n        //O += mod( dot(ceil(3.*vec4(U+U,U+vec2(U.y,-U.x))/iResolution.y), O.wwww),2.)\n        //O += mod(dot(ceil(U*mat4x2(6,0,0,6,3.-6.*O)/iResolution.y),O.wwww),2.)\n            \n        uv = tile(uv,3.0);\n    \tuv = rotateTilePattern(uv);\n        //color=vec3(step(uv.x, uv.y));\n        color=vec3(smoothstep(uv.x, uv.x+.05, uv.y));\n    }\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}