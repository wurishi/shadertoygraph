{"ver":"0.1","info":{"id":"ddjGzz","date":"1667162514","viewed":147,"name":"Streamlines for Dyn Sys Plotter","username":"Envy24","description":"Based on: https://www.shadertoy.com/view/csXGz7\n\nPlotter:","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["flow","field","vector","vorticity","streamlines"],"hasliked":0,"parentid":"dsS3Rz","parentname":"Flow streamlines with history"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                         ( iResolution )\n#define TEXF0(SC)                 ( texelFetch(iChannel0, ivec2(SC), 0) )\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    O = sqrt(vec4(TEXF0(SC).xyz, 1.0));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float segmentSDF_L2(\n    in vec2 NDC,\n    in vec2 B,   \n    in vec2 E,\n    float R)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0)) - R;\n}\n\nfloat segmentSQSDF_L2(\n    in vec2 NDC,\n    in vec2 B,   \n    in vec2 E,\n    float R)\n{\n    vec2 BP = NDC - B, BE = E - B, P = BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0);\n    return dot(P, P) - R*R;\n}\n\n/* \n    Returns random vec2([-1.0; 1.0], [-1.0; 1.0]).\n*/\nvec2 hash2to2(\n    const uint x,\n    const uint y)\n{\n    // Pick some enthropy source values.\n    // Try different values.\n    const uint entropy0 = 123u;\n    const uint entropy1 = 456u;\n    const uint entropy2 = 789u;\n\n    // Use linear offset method to mix coordinates.\n    uint value0 = y * entropy2 + x;\n    uint value1 = x * entropy2 + y;\n\n    // Calculate hash.\n\tvalue0 += entropy1; value0 *= 445593459u; value0 ^= entropy0;\n    value1 += entropy1; value1 *= 445593459u; value1 ^= entropy0;\n    \n    // 2.0f / 4294967295.0f = 4.6566128730773926e-10\n\n    return \n        vec2(\n            float(value0 * value0 * value0) * 4.6566128730773926e-10f - 1.0f,\n            float(value1 * value1 * value1) * 4.6566128730773926e-10f - 1.0f);\n}\n#define H(x, y) ( hash2to2(uint(x), uint(y)) )\n\n/* \n    Returns random vec3([-1.0; 1.0], [-1.0; 1.0], [-1.0; 1.0]).\n*/\nvec3 hash3to3(\n    const uint x,\n    const uint y,\n    const uint z)\n{\n    // Pick some enthropy source values.\n    // Try different values.\n    const uint entropy0 = 1200u;\n    const uint entropy1 = 4500u;\n    const uint entropy2 = 6700u;\n    const uint entropy3 = 8900u;\n\n    // Use linear offset method to mix coordinates.\n    uint value0 = z * entropy3 * entropy2 + y * entropy2 + x;\n    uint value1 = y * entropy3 * entropy2 + x * entropy2 + z;\n    uint value2 = x * entropy3 * entropy2 + z * entropy2 + y;\n\n    // Calculate hash.\n\tvalue0 += entropy1; value0 *= 445593459u; value0 ^= entropy0;\n    value1 += entropy1; value1 *= 445593459u; value1 ^= entropy0;\n    value2 += entropy1; value2 *= 445593459u; value2 ^= entropy0;\n\n    // 2.0f / 4294967295.0f = 4.6566128730773926e-10\n\n    return vec3(\n        float(value0 * value0 * value0) * 4.6566128730773926e-10f - 1.0f,\n        float(value1 * value1 * value1) * 4.6566128730773926e-10f - 1.0f,\n        float(value2 * value2 * value2) * 4.6566128730773926e-10f - 1.0f);\n}\n#define HASH3(x, y, z) ( abs(hash3to3(uint(x), uint(y), uint(z))) )\n\n#define X ( P.x )\n#define Y ( P.y )\n \n/**\n#define ORIGIN         ( vec2(-0.2, -0.58) )\n#define STEP           ( 0.3 )\n#define FADE_OUT       ( 0.997 )\n#define TRUNCATE_FRAME ( 1.55 )\nvec2 field(in vec2 P)\n{    \n    float T = 0.998;\n    return \n        vec2(\n            X*X + Y*T - T*X - X,\n           -X*Y - Y*Y - Y*T - T*T - T*X - Y);\n}\n/**\n#define ORIGIN         ( vec2(0.0, -0.1) )\n#define STEP           ( 0.3 )\n#define FADE_OUT       ( 0.997 )\n#define TRUNCATE_FRAME ( 1.25 )\nvec2 field(in vec2 P) \n{      \n    float T = -0.137;\n    return \n        vec2(\n           -X*X + X*Y + Y*Y - Y*T - T*T + T*X - X - Y - T,\n           -X*X - X*Y + Y*Y + Y*T + T*T - T*X + T);\n}\n/**\n#define ORIGIN         ( vec2(-0.3, -0.10) )\n#define STEP           ( 0.3 )\n#define FADE_OUT       ( 0.997 )\n#define TRUNCATE_FRAME ( 1.25 )\nvec2 field(in vec2 P)\n{     \n    float T = -0.529;\n    return \n        vec2(\n           -X*X - Y*Y - T*T + T*X + Y - T,\n            X*X - X*Y - Y*T - T*T);\n}\n/**\n#define ORIGIN         ( vec2(0.1, -0.23) )\n#define STEP           ( 0.3 )\n#define FADE_OUT       ( 0.997 )\n#define TRUNCATE_FRAME ( 0.75 )\nvec2 field(in vec2 P)\n{       \n    float T = -0.37;\n    return \n        vec2(\n           -X*X + T*T + T*X + X - Y + T,\n           -Y*Y - Y*T + T*X + X - Y);\n}\n/**/\n#define ORIGIN         ( vec2(0.1, 0.06) )\n#define STEP           ( 0.2 )\n#define FADE_OUT       ( 0.997 )\n#define TRUNCATE_FRAME ( 0.75 )\nvec2 field(in vec2 P)\n{    \n    float T = -0.2852;\n    return \n        vec2(\n           -Y*T - T*X + Y,\n            X*X - T*X - X + T);\n}\n/**\n#define ORIGIN         ( vec2(-0.26, 0.05) )\n#define STEP           ( 0.2 )\n#define FADE_OUT       ( 0.994 )\n#define TRUNCATE_FRAME ( 1.25 )\nvec2 field(in vec2 P)\n{          \n    float T = -0.026;\n    return \n        vec2(\n           -X*X + X*Y - Y*Y + Y*T - T*X - X + Y + T,\n           -X*X + T*T - T*X - X - Y);\n}\n/**/","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define R                         ( iResolution )\n#define AR                        ( R.x / R.y )                      // Aspect ratio.\n#define UNIT                      ( 2. / R.y )\n#define SMAA(d)                   ( smoothstep(UNIT, 0., abs(d)) )\n#define SCENE_SCALE               ( 0.5 )\n#define TEXF0(SC)                 ( texelFetch(iChannel0, ivec2(SC), 0) )\n\n/* https://www.shadertoy.com/view/DdsGDj */\n#define MOUSE_OFFSET (0.)//( iMouse.z > 0. ? iMouse.xy - R.xy * 0.5 : vec2(0) )\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin)\n{\n    return ((2. * (SC - MOUSE_OFFSET) - R.xy) / R.y) * scale - origin;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 orig = -ORIGIN,\n         NDC = map_to_centered_ndc(SC, SCENE_SCALE, orig),\n         ranges = TRUNCATE_FRAME* map_to_centered_ndc(R.xy, SCENE_SCALE, vec2(0));\n\n    float min_dist = 9., T = 100.*iTime;\n    vec3 color = TEXF0(SC).rgb * FADE_OUT;\n  \n    for (float s = 0.; s < 10.; s += 1.)\n    {\n        vec2 B = H(s+T, s+T*2.0)*1.2, E=vec2(0.);\n        \n        for (float i = 0.; i < 20. && abs(B.x+orig.x) < ranges.x && abs(B.y+orig.y) < ranges.y; i+=1.)\n        {\n            E = B + field(B)*STEP;\n            min_dist = min( min_dist, segmentSQSDF_L2(NDC, B, E, 0.0) );\n            B = E;\n        }\n        \n        float seed = iTime + s + 10.;\n        color = mix( color, HASH3(seed, seed+1., seed+2.), SMAA((sqrt(min_dist)+UNIT*0.25)) );\n        \n        min_dist = 9.;               \n    }\n        \n    O = vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}