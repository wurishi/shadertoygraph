{"ver":"0.1","info":{"id":"3dXcRs","date":"1585316026","viewed":123,"name":"Polar form + noise","username":"singoltone","description":"Polar form distorted by noise","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","polar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n//\n// Description : GLSL 2D simplex noise function\n//      Author : Ian McEwan, Ashima Arts\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License :\n//  Copyright (C) 2011 Ashima Arts. All rights reserved.\n//  Distributed under the MIT License. See LICENSE file.\n//  https://github.com/ashima/webgl-noise\n//\nfloat snoise(vec2 v) {\n\n    // Precompute values for skewed triangular grid\n    const vec4 C = vec4(0.211324865405187,\n                        // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,\n                        // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,\n                        // -1.0 + 2.0 * C.x\n                        0.024390243902439);\n                        // 1.0 / 41.0\n\n    // First corner (x0)\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n\n    // Other two corners (x1, x2)\n    vec2 i1 = vec2(0.0);\n    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n    vec2 x1 = x0.xy + C.xx - i1;\n    vec2 x2 = x0.xy + C.zz;\n\n    // Do some permutations to avoid\n    // truncation effects in permutation\n    i = mod289(i);\n    vec3 p = permute(\n            permute( i.y + vec3(0.0, i1.y, 1.0))\n                + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(\n                        dot(x0,x0),\n                        dot(x1,x1),\n                        dot(x2,x2)\n                        ), 0.0);\n\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients:\n    //  41 pts uniformly over a line, mapped onto a diamond\n    //  The ring size 17*17 = 289 is close to a multiple\n    //      of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n    // Compute final noise value at P\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n    return 130.0 * dot(m, g);\n}\n\nvec2 CartToPolar(vec2 uv, float rotation, float distortion, float rotating)\n{\n   vec2 st = vec2(atan(uv.x, uv.y), length(uv));\n   uv = vec2(st.x/6.2831+.5 +(iTime*rotating) *.1+ (st.y*distortion) ,st.y);\n    \n   return uv;\n}\n\n\nfloat Lines(vec2 uv)\n{\n    return smoothstep(0.7, 0.5, snoise(uv)*fract(uv.y)*10.);\n}\n\nfloat Circle(vec2 uv, float radius, float center, float a)\n{\n    uv.x -= snoise(uv)*a;\n    float dist = distance(vec2(center), uv);\n    return smoothstep(radius*a, radius*a-0.01, dist);\n}\n\nfloat PolarForm(vec2 uv, float smooth1, float size1, float size2, \n                float numSide, float rotation, float distortion, float rotating)\n{\n    vec2 st = CartToPolar(uv, rotation, distortion, rotating);\n    float x = st.x * numSide;\n    float m = min(fract(x), fract(1.-x));\n    float c = smoothstep(0., smooth1, m*size1+size2-st.y);\n    return c;\n}\n\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 0.2;\n    \n    float a = snoise(uv*vec2(cos(iTime*0.15),sin(iTime*0.4))*0.1)*3.1415;\n    vec2 randPos = vec2(sin(a),cos(a));\n    \n    uv = rotate2d(PI*iTime*.2)*uv;\n   \tfloat c = PolarForm(uv, length(randPos)*0.2, 0.1, 0.1, 5., snoise(uv+randPos)*20., snoise(uv+randPos)*20., 0.);    \n    float c2 = PolarForm(uv*5., 0.1, 0.5, 0.1, 5., .5, 0., 0.);    \n    \n    vec3 col = vec3(smoothstep(0.01,1.,c));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}