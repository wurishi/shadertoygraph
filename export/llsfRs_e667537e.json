{"ver":"0.1","info":{"id":"llsfRs","date":"1513026433","viewed":592,"name":"bug MIPmap 5","username":"FabriceNeyret2","description":"MIPmap level = Mouse.y or autodemo. \nBuf A: set #def TEST\n\n- Bad behaviors when averaging odd sizes: artifacts, sliding...\n-W hen one side is odd/2, it's the other side that slides !","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["texture","glsl","lod","bug","gpmipmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// variant of https://shadertoy.com/view/ltSyRc\nvec4 pInt(vec2, float);\nvec4 blend(vec4 F, vec4 B) { return F + (1.-F.a)*B; }\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R =  iResolution.xy,\n         M = length(iMouse.xy)>10. ? iMouse.xy/R : vec2(.5+.5*cos(.5*iTime)); // mouse or auto\n \n    float z =  M.y * ceil (log2(float(textureSize(iChannel0,0).x))); // mouse control LOD\n    int iz = int(z);\n    vec2 S = vec2(textureSize(iChannel0,iz));                        // size of LOD iz\n        \n    O =  texelFetch( iChannel0, ivec2(U/R*S) , iz );                 // display texture LOD z\n        \n    \n    // --- display LOD level and size\n    O = blend( pInt(( U/R.y - vec2(.27,.85)) * 8., float(iz)), O);\n    O = blend( pInt(( U/R.y - vec2(.1 ,.7) ) * 8., S.x), O);\n    O = blend( pInt(( U/R.y - vec2(.45,.7) ) * 8., S.y), O);\n    \n    // --- display right slider\n    float r = length( (U-.95*vec2(R.x,0))/R.y - vec2(0,floor(z)/9.) );\n    O += smoothstep( .045, .04, r );// * ( .7+.3*sin(18.*iTime));\n    O -= smoothstep( .005, .0, abs(r-.045) );\n}\n\n\n// ==== utils: display numbers =============================================\n\nvec4 char(vec2 p, int c) { // --- access to the image of ascii code c\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0);\n\treturn vec4( textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                              dFdx(p/16.),dFdy(p/16.) ).xxx, 1);\n}\nvec4 pInt(vec2 p, float n) { // --- display uint4\n    vec4 v = vec4(0);\n    for (float i = 3.; i>=0.; i--) \n        n /=  9.999999, // 10., // for windows :-(\n        v += char(p - .5*vec2(i,0), 48+ int(fract(n)*10.) );\n    v.a = min(v.a,1.);\n    return v;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define TEST 1\n\n#if TEST == 1 // --- multiresolution checkers\n\n#define C(U,s)  ( int(U.x)/s + int(U.y)/s ) %2\nvoid mainImage(out vec4 O, vec2 U) { O = vec4( C(U,4), C(U,16), C(U,64), 0); }\n\n#else         // --- 1 tile level 4, 5, 6 \n\n#define M(U) max(U.x,U.y)\n#define mainImage( O, U ) O = vec4( M(U) < 16., M(U)<32., M(U) < 64., 0)\n\n#endif","name":"Buffer A","description":"","type":"buffer"}]}