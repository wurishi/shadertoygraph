{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"cubemap","id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"cubemap","id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// special thanks to TDM\n// https://www.shadertoy.com/view/XsfXWX\n\n// tuning knobs\n\n\t// enable or disable adaptive tone map\n\t#define ENABLE_TONE_MAP\n\n\t// define adaptive tone map gamma\n\t#define TONE_MAP_GAMMA 2.3\n\n// do not modify these\n#define PI 3.1415926535897932384626433832795\n#define PI_MODIFIER 4.0\n\nvec3 obj_pos = vec3(0.0,0.0,-10.0);\nfloat obj_size = 5.0;\n\nfloat sphere(vec3 dir, vec3 center, float radius) {\n    vec3 rp = -center;\n\tfloat b = dot(rp,dir);\n\tfloat dist = b * b - (dot(rp,rp) - radius * radius);\n\tif(dist <= 0.0) return -1.0;\n\treturn -b - sqrt(dist);\n}\n\nfloat somestep(float t) {\n    return pow(t,4.0);\n}\n\nvec3 textureAVG(samplerCube tex, vec3 tc) {\n    const float diff0 = 0.35;\n    const float diff1 = 0.12;\n \tvec3 s0 = texture(tex,tc).xyz;\n    vec3 s1 = texture(tex,tc+vec3(diff0)).xyz;\n    vec3 s2 = texture(tex,tc+vec3(-diff0)).xyz;\n    vec3 s3 = texture(tex,tc+vec3(-diff0,diff0,-diff0)).xyz;\n    vec3 s4 = texture(tex,tc+vec3(diff0,-diff0,diff0)).xyz;\n    \n    vec3 s5 = texture(tex,tc+vec3(diff1)).xyz;\n    vec3 s6 = texture(tex,tc+vec3(-diff1)).xyz;\n    vec3 s7 = texture(tex,tc+vec3(-diff1,diff1,-diff1)).xyz;\n    vec3 s8 = texture(tex,tc+vec3(diff1,-diff1,diff1)).xyz;\n    \n    return (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) * 0.111111111;\n}\n\nvec3 textureBlured(samplerCube tex, vec3 tc) {\n   \tvec3 r = textureAVG(tex,vec3(1.0,0.0,0.0));\n    vec3 t = textureAVG(tex,vec3(0.0,1.0,0.0));\n    vec3 f = textureAVG(tex,vec3(0.0,0.0,1.0));\n    vec3 l = textureAVG(tex,vec3(-1.0,0.0,0.0));\n    vec3 b = textureAVG(tex,vec3(0.0,-1.0,0.0));\n    vec3 a = textureAVG(tex,vec3(0.0,0.0,-1.0));\n        \n    float kr = dot(tc,vec3(1.0,0.0,0.0)) * 0.5 + 0.5; \n    float kt = dot(tc,vec3(0.0,1.0,0.0)) * 0.5 + 0.5;\n    float kf = dot(tc,vec3(0.0,0.0,1.0)) * 0.5 + 0.5;\n    float kl = 1.0 - kr;\n    float kb = 1.0 - kt;\n    float ka = 1.0 - kf;\n    \n    kr = somestep(kr);\n    kt = somestep(kt);\n    kf = somestep(kf);\n    kl = somestep(kl);\n    kb = somestep(kb);\n    ka = somestep(ka);    \n    \n    float d;\n    vec3 ret;\n    ret  = f * kf; d  = kf;\n    ret += a * ka; d += ka;\n    ret += l * kl; d += kl;\n    ret += r * kr; d += kr;\n    ret += t * kt; d += kt;\n    ret += b * kb; d += kb;\n    \n    return ret / d;\n}\n\nvec3 toneMap(vec3 color, float gamma)\n{\n    // kudos to Roman Galashov, aka RomBinDaHouse\n    color = exp(-1.0 / (2.72 * color + 0.15));\n\tcolor = pow(color, vec3(1.0 / gamma));\n\treturn color;\n}\n\nvec3 getColor(vec3 R) {\n    float dist = sphere(R, obj_pos, obj_size);    \n    if(dist > 0.0) {\n        \n        // material\n        float roughness = sin(iTime * 0.5) * 0.5 + 0.5;\n        vec3 light_color = textureBlured(iChannel1, normalize(R * 0.8)).xyz;\n                \n    \tvec3 point = R * dist;\n        \n        // NL\n    \tvec3 N = normalize(point - obj_pos);\n        vec3 L = normalize(vec3(-0.5, 1.0, 0.0));\n        \n        // dots\n        float NdotV = clamp(dot(N, -R), 0.0, 1.0);\n        float NdotL = clamp(dot(L,  N), 0.0, 1.0);\n        vec3  RrefN = reflect(R, N);\n        \n        // specular power\n        float specular_mod   = 1.0 - roughness;\n        float specular_power = clamp(pow(clamp(dot(L, RrefN), 0.0, 1.0), 1.0 / specular_mod) * specular_mod, 0.0, 1.0);\n        \n        // IBL\n        vec3 ibl_diffuse    = textureBlured(iChannel1, N);\n        vec3 ibl_reflection = textureBlured(iChannel1, RrefN);\n        \n        // fresnel\n        float fresnel_pow  = 35.0;\n        float fresnel_base = NdotV;\n        float fresnel_exp  = pow(fresnel_base, fresnel_pow);\n        float fresnel_term = specular_power + fresnel_exp;\n        \n        // specular\n        float normalization_term = ((specular_power + PI_MODIFIER) / PI_MODIFIER * PI);\n        float specular_term      = normalization_term * specular_power;\n        float vis_alpha          = 1.0 / (sqrt((PI / 4.0) * specular_power + (PI / 2.0)));\n        float vis_term           = clamp((NdotL * (1.0 - vis_alpha) + vis_alpha) * (NdotV * (1.0 - vis_alpha) + vis_alpha), 0.0, 1.0);\n        \n        // reflection        \n        vec3 refl = texture(iChannel1, RrefN).xyz;\n        refl = mix(refl, ibl_reflection, 1.0 - vis_term);\n        refl = mix(refl, ibl_reflection, roughness);\n        \n        // final colors\n        vec3 specular_color = specular_term * fresnel_term * vis_term * light_color;\n        vec3 diffuse_color  = mix(ibl_diffuse, refl, vis_term);\n\n        vec3 final_color = diffuse_color + specular_color;\n        \n        #ifdef ENABLE_TONE_MAP\n        float luma = dot(final_color, vec3(0.2126, 0.7152, 0.0722));\n        return mix(final_color, toneMap(final_color, luma * TONE_MAP_GAMMA), 1.0 - luma);\n        #else\n    \treturn final_color;\n        #endif\n        \n    } else {      \n        \n        return texture(iChannel0, R).xyz;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {   \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 dir = normalize(vec3(uv.xy,-1.0));\n   \n    // rotation\n    float c = cos(iTime / 20.0);\n    float s = sin(iTime / 20.0);\n    dir.xz = vec2(dir.x * c - dir.z * s, dir.x * s + dir.z * c);\n    obj_pos.xz = vec2(obj_pos.x * c - obj_pos.z * s, obj_pos.x * s + obj_pos.z * c);\n    \n    // color\n\tfragColor = vec4(getColor(dir),1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsjSRG","date":"1413216266","viewed":2008,"name":"PBR with microfacet BRDF","username":"bazhenovc","description":"PBR with microfacet BRDF.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["brdf","microfacet","pbr"],"hasliked":0,"parentid":"","parentname":""}}