{"ver":"0.1","info":{"id":"wdV3zz","date":"1570308005","viewed":1868,"name":"switching webcam visualizer","username":"ericspags","description":"switches between different audio-webcam visualizers\nswitch code from https://www.shadertoy.com/view/tlS3R3\nvisual 1 https://www.shadertoy.com/view/MdcSDB\nVisual 2 https://www.shadertoy.com/view\nVisual 3 https://www.shadertoy.com/view/llVcRG","likes":11,"published":1,"flags":38,"usePreview":0,"tags":["webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// -----------------------------------------------\n// Scene 1\n\n\nvoid scene1( out vec4 fragColor, in vec2 fragCoord )\n{\n float dotsize = 5.0 * (2.0 + sin (0.1 * iTime));\n    vec2 mirrorCoord = vec2 (iResolution.x - fragCoord.x, fragCoord.y);\n    vec2 dotcenter = (mirrorCoord - mod(mirrorCoord, 2.0 * dotsize)) + vec2(dotsize);\n    float rad = length(mirrorCoord - dotcenter);\n    \n    vec2 sampleAt = dotcenter / iResolution.xy;\n    \n    vec2 musicSampleAt = vec2(fract(dot(sampleAt, vec2(311.7123, 733.01))), 0.0);\n    \n    float dotRad = texture(iChannel2, musicSampleAt).x * (dotsize - 2.0);\n    \n    float inside = smoothstep (2.0, 0.0, rad - dotRad);\n    \n    vec3 rgb = texture(iChannel1, sampleAt).xyz;\n    \n    rgb = 0.25 * (step(vec3(0.1), rgb) + step(vec3(0.25), rgb) +\n                  step(vec3(0.4), rgb) + step(vec3(0.55), rgb));\n   //  rgb = vec3(1.0, 0.0, 0.0);\n    \n    vec3 background = vec3(0.0);\n\tfragColor = vec4(mix(background, rgb, inside),1.0);   \n}\n\n// Scene 1\n// --------------------------------------------------\n\n\n// --------------------------------------------------\n// Scene 2\n\nvoid scene2( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy / iResolution.xy;\n\tvec4 c = texture(iChannel0, uv);\n    c.rgb = sin(c.rgb*(6.2+iMouse.y/iResolution.y*20.)+iTime+vec3(3., 1.5,.5*texture(iChannel1, vec2(1.5*length(uv-.5),1.)).r))*.5+.5;\n    fragColor = c;  \n}\n// Scene 2\n// --------------------------------------------------\n\n\n// --------------------------------------------------\n// Scene 3\n\nconst int iters = 150;\n\nint fractal(vec2 p, vec2 point) {\n\tvec2 so = (-1.0 + 2.0 * point) * 0.3;\n\tvec2 seed = vec2(0.098386255 + so.x, 0.6387662 + so.y);\n\t\n\tfor (int i = 0; i < iters; i++) {\n\t\t\n\t\tif (length(p) > 2.0) {\n\t\t\treturn i;\n\t\t}\n\t\tvec2 r = p;\n\t\tp = vec2(p.x * p.x - p.y * p.y, 2.0* p.x * p.y);\n\t\tp = vec2(p.x * r.x - p.y * r.y + seed.x, r.x * p.y + p.x * r.y + seed.y);\n\t}\n\t\n\treturn 0;\t\n}\n\nvec3 color(int i) {\n\tfloat f = float(i)/float(iters) * 2.0;\n\tf=f*f*2.;\n\treturn vec3((sin(f*2.0)), (sin(f*3.0)), abs(sin(f*7.0)));\n}\n\n\nfloat sampleMusicA() {\n\treturn 0.6 * (\n\t\ttexture( iChannel2, vec2( 0.15, 0.25 ) ).x + \n\t\ttexture( iChannel2, vec2( 0.30, 0.25 ) ).x);\n}\n\nmat2 rotateX(float rad) {\n    float c = cos(rad);\n    float s = sin(rad);\n    return mat2(\n        c, -s,\n        s, c\n    );\n}\n\nvec4 fractalImg(vec2 uv, vec2 fragCoord) {    \n    vec2 position = 3. * (-0.5 + fragCoord.xy / iResolution.xy ) + vec2(0.2 * abs(cos(iTime * 0.21313)) * sin(sin(iTime)+cos(iTime)*.242), 0.1 * abs(cos(iTime * 0.1323)));\n\tposition.x *= iResolution.x/iResolution.y;\n    position *= rotateX(mod(iTime * .54, 6.3) + abs(.2 * sin(iTime / 5.3)));\n    \n    vec2 iFC = vec2(iResolution.x-fragCoord.x,iResolution.y-fragCoord.y);    \n    vec2 pos2 = 2. * (-0.5 + iFC.xy / iResolution.xy);\n    pos2.x*=iResolution.x/iResolution.y;\n    pos2 *= rotateX(mod(iTime * -.4235, 6.3) + abs(.2 * sin(iTime / 5.3)));\n\n    vec4 t3 = texture(iChannel1, vec2(length(position)/14.0,0.1) );\n    float pulse = .2+sampleMusicA()*1.8;\n\n    vec3 invFract = color(fractal(pos2,vec2(0.55+sin(iTime/18.+0.5)/2.0,pulse*.9)));\n    \n    vec3 fract4 = color(fractal(position/1.6,vec2(0.6+cos(iTime/20.+0.5)/2.0,pulse*.8)));\n\n    vec3 c = color(fractal(position,vec2(10.1+sin(iTime/3.)/12.0,pulse)));\n    \n    t3=abs(vec4(0.5,0.1,0.5,1.)-t3)*.8;\n    \n    vec4 fract01 =  vec4( c , 1.0 );\n    vec4 salida;\n    salida = fract01 / t3 + fract01 * t3 + vec4(invFract,0.6) + vec4(fract4,0.25);\n\treturn mix(salida * 2.,texture(iChannel2, fragCoord.xy / iResolution.xy), 0.3);\n}\n\n/////////////////////////////////////////////////////////////////////////////////\n// Modified from t3hk0d3's \"webcam roberts\"\n// https://www.shadertoy.com/view/MssGRB\n/////////////////////////////////////////////////////////////////////////////////\n\n\nconst float sensitivity = 1.0 / 64.0;\n\nfloat bw(vec2 coords) {\n\tvec4 lm = texture(iChannel1, coords) * vec4(0.21, 0.71, 0.07, 1);\n\t\n\treturn lm.r+lm.g+lm.b;\t\n}\n\nfloat outline(vec2 uv)\n{\n \tvec2 of = vec2(sensitivity * pow(sampleMusicA(), 2.), 0);\n\t\n\treturn sqrt(\n\t\tpow(abs(bw(uv) - bw(uv+of.xx)), 2.0) +\n\t\tpow(abs(bw(uv + of.xy) - bw(uv + of.yx)), 2.0)\n\t);   \n}\n\n/////////////////////////////////////////////////////////////////////////////////\n// Modified from  unycone's \"Camera Distortion 01\"\n// https://www.shadertoy.com/view/XlXfRs\n/////////////////////////////////////////////////////////////////////////////////\n\nvec2 distort(vec2 uv)\n{\n    bool autoScale = true;\n    float strength = sampleMusicA() * sign(sin(iTime / 5.)) * 0.1;\n    float zoom = (autoScale ? abs(strength) + 1.0 : 1.0);\n    \n\n    \n    vec2 p = (uv - 0.5) * 2.0; // map [0, 1] to [-1, 1]\n    float theta = atan(p.y, p.x);\n    float rd = length(p);\n    float ru = rd * (1.0 + strength * rd * rd) / zoom;\n    return vec2(cos(theta), sin(theta)) * ru / 2.0 + 0.5; \n}\n\n\nvoid scene3( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x = 1.0 - uv.x;\n    \n    vec4 imgColor = texture(iChannel1, uv);\n\n\n\t//uv = distort(uv); // Comment this line out to remove distortion\n\t\n\tfloat bwColor = outline(uv) * 2.;\n    bwColor = min(round(bwColor * 8.), 2.) * bwColor;\n    \n\t\n\t\n\tfragColor.xyz = bwColor * (fractalImg(uv, fragCoord) + fractalImg(-uv, fragCoord)).xyz;\n}\n// Scene 3\n// --------------------------------------------------\n\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n\tfloat span = 300.;\n    float sceneCount = 3.0;\n    float idx = mod(iTime / span, sceneCount);\n    \n    if (idx < 1.0)\n    {\n        scene1(O, U);\n    }\n    else if (idx < 2.0)\n    {\n        scene2(O, U);\n    }\n    else if (idx < 3.0)\n    {\n        scene3(O, U);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float z = (texture(iChannel2, vec2(length(uv-.5),1.)).r)*(iMouse.x/iResolution.x*.2+.02);\n    float zoom = (1.-z);///sin(iTime*20.)*.1+.9;\n    uv-=.5;\n    uv*=zoom;\n    uv+=.5;\n    vec4 o = texture(iChannel0, uv);\n    vec4 c = texture(iChannel3,uv);\n    c = mix(c,o,.95);\n    fragColor = c;\n}","name":"Buffer A","description":"","type":"buffer"}]}