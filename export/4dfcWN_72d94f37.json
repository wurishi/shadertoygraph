{"ver":"0.1","info":{"id":"4dfcWN","date":"1488157628","viewed":1935,"name":"fft ifs","username":"nshelton","description":"adding fft to distort the ifs. doing some smoothing on it","likes":15,"published":3,"flags":36,"usePreview":0,"tags":["fft","raymarched","distortion","audio","ifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define MAX_ITER 20\n#define MAX_ITER 50\n\nmat3 rotationMatrix(vec3 axis, float angle) {\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n\n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nmat3 ir;\n\nvec2 DE(vec3 p) \n{\n\tvec3 p_o = p;\n    float d = 1e10;\n    \n    float s = 1.; //sin(iTime /60.0) / 10.0 + 0.6;\n    vec3 t = vec3(0.1 + 0.2 * iMouse.xy/iResolution.xy, 0.1 + 0.1 * sin(iTime/5000.));\n    \n    \n    float xcoord = pow(fract(length(p - t)/3.),2.0);\n                       \n    vec2 texuv = vec2(xcoord, 0.5);\n    float fft = texture(iChannel0, texuv).r;\n\tfft = pow(fft, 4.0);\n\tfft *= pow(1.0 - xcoord, 0.2);\n    \n    for ( int i = 0; i < 6; i ++)\n    {\n        float thickness = 0.3 * fft + 0.002;\n        vec3 dim = vec3(thickness, 0.9, thickness);\n\n        p -= t*s;\n        p = (ir * (p-t/s));\n        float sp = s;// * (fft*10.0);\n     \td = min\t(d, udBox(p*sp, dim/sp  )/sp ) ;\n\n \t\tp = abs(p);\n        \n        \n                              \n        float circleSize =  fft / 10.; // (sin(iTime + length(p_o) * 5.) ) + 0.01;\n        \n        d = min(d, length(p - t) - circleSize/s);\n        s *= s;\n\t\t\n    }\n\n\n    return vec2(d,fft);\n}\n\n\nvec3 gradient(vec3 p) {\n\tvec2 e = vec2(0., 0.001);\n\n\treturn normalize(\n\t\tvec3(\n\t\t\tDE(p+e.yxx).x - DE(p-e.yxx).x,\n\t\t\tDE(p+e.xyx).x - DE(p-e.xyx).x,\n\t\t\tDE(p+e.xxy).x - DE(p-e.xxy).x\n\t\t)\n\t);\n}\n\n\n\n\n//https://iquilezles.org/articles/fog\nvec3 applyFog( in vec3  rgb,      // original color of the pixel\n               in float distance, // camera to point distance\n               in vec3  rayDir,   // camera to point vector\n               in vec3  sunDir )  // sun light direction\n{\n    \n    const vec3 fog0 = vec3(0,1,1);\n    const vec3 fog1 = vec3(1,0,1);\n    \n    float b = 0.9;\n    float fogAmount = 1.0 - exp( -distance*b );\n    float sunAmount = abs(dot( rayDir, sunDir ));\n    vec3  fogColor  = mix(fog1, fog0, pow(sunAmount,1.0) );\n    return mix( rgb, fogColor, fogAmount );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    float aspect = iResolution.x/iResolution.y;\n    uv.x *= aspect;\n    \n    vec3 cam = vec3(0,0,  - 3.0);\n    vec3 ray = normalize( vec3(uv, 1.0));\n    \n    vec3 color = vec3(0.1, 0.1, 0.2);\n    vec3 p;\n    float depth = 0.0;\n    bool hit = false;\n    float iter = 0.0;\n    \n    float fog = 0.0;\n    vec3 sun = normalize( vec3(-1,-1,1));\n\n    vec3 axis = vec3(sin(iTime/600.0),\n                     sin(iTime/100.0),\n                     sin(iTime/500.0));\n    \n    ir = rotationMatrix(axis, iTime/100.0 + 6.);\n    \n    mat3 mv = rotationMatrix(vec3(0,1,0), iTime/10.0);\n        \n    cam = mv * cam;\n    ray = mv * ray;\n       \n    vec2 de_ret;\n    for( int i= 0; i < MAX_ITER; i ++) {\n        p = depth * ray + cam;\n        de_ret = DE(p);\n        \n  \n        \tdepth += de_ret.x;\n         \n        \n        if (  de_ret.x < 0.001)\n        {\n        \thit = true;\n            break;\n        }\n        \n        iter ++;\n    }\n    float fakeAO = 1.0 - iter / float(MAX_ITER);    \n    vec3 n = gradient(p);\n    \n\n\tcolor = applyFog(vec3(1.0), depth, ray, sun) ;\n\n        \n    if (hit) {\n\n      \t//color = vec3(fract(length(p/4.)));\n\t\t//color *= dot(ray, -n);\n      \t//fakeAO = de_ret.y;\n   \t\t color +=  vec3(de_ret.y) + 0.2 ;\n\n    }\n    \n    float sk = 0.6;\n    color *= sk+ (1.0-sk) *fakeAO;\n    \n    //color = vec3(fakeAO);\n     //color = pow(color, vec3(0.5));\n    \n\tfragColor = vec4(color ,1.0);\n}\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 a = texture(iChannel0, uv );\n    vec4 b = texture(iChannel1, uv );\n    \n    float alpha = 0.3;\n    fragColor = alpha * a + (1.0 - alpha) * b;\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, uv );\n}","name":"Buf B","description":"","type":"buffer"}]}