{"ver":"0.1","info":{"id":"X3jyWD","date":"1727284914","viewed":27,"name":"GPT4-o1-preview try III","username":"rwqx","description":"The Zebra.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["demo","gpt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ShaderToy shader by ChatGPT\n// Title: Complex Dynamics Fractal Explorer\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Parameters for zoom and pan\n    float zoom = pow(0.5, iTime * 0.1 + 2.0);\n    vec2 pan = vec2(-0.5, 0.0);\n\n    // Complex plane coordinates\n    vec2 c = uv * zoom + pan;\n\n    // Initialize z to 0\n    vec2 z = vec2(0.0);\n\n    // Iteration limit\n    int maxIterations = 100;\n    int i;\n    for (i = 0; i < maxIterations; i++)\n    {\n        // Compute z^2 and z^3\n        vec2 z2 = vec2(\n            z.x * z.x - z.y * z.y,\n            2.0 * z.x * z.y\n        );\n\n        vec2 z3 = vec2(\n            z.x * z2.x - z.y * z2.y,\n            z.x * z2.y + z.y * z2.x\n        );\n\n        // Compute sin(z^3)\n        vec2 sin_z3 = vec2(\n            sin(z3.x) * cosh(z3.y),\n            cos(z3.x) * sinh(z3.y)\n        );\n\n        // Compute exp(-sin(z^3))\n        vec2 exp_neg_sin_z3 = exp(vec2(-sin_z3.x, -sin_z3.y));\n\n        // Compute cos(z^2)\n        vec2 cos_z2 = vec2(\n            cos(z2.x) * cosh(z2.y),\n            -sin(z2.x) * sinh(z2.y)\n        );\n\n        // Compute c * cos(z^2)\n        vec2 c_cos_z2 = vec2(\n            c.x * cos_z2.x - c.y * cos_z2.y,\n            c.x * cos_z2.y + c.y * cos_z2.x\n        );\n\n        // Iterative function: z = exp(-sin(z^3)) + c * cos(z^2)\n        z = exp_neg_sin_z3 + c_cos_z2;\n\n        // Check for divergence\n        if (length(z) > 4.0)\n            break;\n    }\n\n    // Smooth coloring\n    float smoothIter = float(i) - log2(log(length(z))) + 4.0;\n\n    // Color mapping\n    float t = smoothIter / float(maxIterations);\n    vec3 color = vec3(0.5 + 0.5 * cos(6.2831 * t + vec3(0.0, 0.33, 0.67)));\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}