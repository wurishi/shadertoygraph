{"ver":"0.1","info":{"id":"Ns2GzR","date":"1616849708","viewed":69,"name":"attempt_dotprod","username":"singoltone","description":"attempt with dot product","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["attempt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random(vec2 st) \n{\n    return fract(sin(dot(st.xx*st.yy*0.15,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat Circle(vec2 uv, float radius, float blur)\n{\n    return smoothstep(radius, radius-blur, length(uv))/\n    smoothstep(radius*.01, radius+blur, length(uv)*.2);\n}\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0., 0., 0.);\n    \n    uv *= uv * (100. + (cos(iTime*.1) * sin(iTime*.2) * 100.))*0.2;\n    uv.x = abs(uv.x);\n    \n    //uv.x = fract(uv.x);\n    uv = rotate(uv, sin(iTime*0.01)*180.);\n    \n    float choice = random(uv)*5.;\n    vec2 dotProdChoice = vec2(0.);\n    \n    if (choice < (sin(iTime)*3.)+3.)\n        dotProdChoice = uv.yy;\n    else\n        dotProdChoice = uv.yx;\n    \n    \n    uv.y = dot(dotProdChoice, uv.xy) * random(uv);\n    \n    \n    float x = uv.x*.1;\n    float m = ((x+-1. * .2) * (x-cos(iTime))*20. ) / sin(iTime);\n    m += m * 0.1;\n    float y = uv.y + sin(m)*cos(m)*2.;\n      \n    y = pow(y, random(uv)*2.)*0.1 ;\n    col += Circle(vec2(x,y) * 0.2 , ((.5 + sin(iTime*.01))*0.3), 0.7);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}