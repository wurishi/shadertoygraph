{"ver":"0.1","info":{"id":"XtK3Wh","date":"1474442529","viewed":228,"name":"Cube unwrap","username":"Slagh","description":"Unwraps a cubemap into 2d","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["texturecube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nSome kind of dual pyramidal unwrap of a cubemap into 2D and back.\n\nPress Up Arrow to toggle an UV overlay showing the mapping.\nPress Down Arrow to toggle between the 3D vomit camera and the 2D unwrap.\n\nUnwrapCube (in Buf A) and WrapCube to go back and forth.\n\nThe 2D texture wraps nicely in U, but not in V. If Buf A had mips, you\nwould need to use textureLod to sample - otherwise the jump at the top\nand bottom will sample a smaller mip.\n\n*/\n\nvec2 WrapCube(vec3 v)\n{\n   vec3 absv = abs(v);\n   float L = absv.z + max(absv.x, absv.y);\n   vec3 pv = v.xyz / L;\n   float zs = step(0.0, v.z);\n   vec2 uv = pv.xy * vec2(0.25,0.5) + vec2(0.25, 0.5);\n   uv.x = mix(uv.x, 1.0-uv.x, zs);\n   \n   return uv;\n}\n\nmat2 Rot(float rad)\n{\n    float s = sin(rad);\n    float c = cos(rad);\n\tmat2 rot;\n    rot[0] = vec2(c,s);\n    rot[1] = vec2(s,-c);\n    return rot;\n}\n\nconst float KEY_DOWN = 40.5/256.0;\nconst float TOGGLE = 2.5/3.0;\n\nfloat viewUnwrap()\n{\n    return texture(iChannel2, vec2(KEY_DOWN, TOGGLE)).r;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 unwrap = texture(iChannel1, uv).rgb;\n\n    vec3 ray = normalize(vec3(uv * 2. - 1., 0.707));\n    ray.y *= iResolution.z / 2.;\n    \n    ray.yz = ray.yz * Rot(sin(iTime * 0.5));\n    ray.xz = ray.xz * Rot(iTime * 0.7);\n    \n    vec3 cube2D = texture(iChannel1, WrapCube(ray)).rgb;\n    vec3 error = abs(cube2D - texture(iChannel0, ray).rgb) * 4.;\n        \n    fragColor.rgb = mix(cube2D, unwrap, viewUnwrap());\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 UnwrapCube(vec2 uv)\n{\n    vec2 buv = uv * 2.0 - 1.0;\n    float x = 1.0 - 2.0 * abs(buv.x);\n    float y = buv.y;\n    float z = sign(buv.x)*(1.0 - max(abs(x),abs(y)));\n    return vec3(x,y,z);\n}\n\nvec3 hyoo(float u)\n{\n    u *= radians(360.);\n    return max(vec3(0.), 0.3 + 0.7 * vec3(cos(u), cos(u - radians(120.)), cos(u + radians(120.))));\n}\n\nfloat band(float v, float bands)\n{\n    return floor(v*bands)/bands;\n}\n\nconst float KEY_UP = 38.5/256.0;\nconst float TOGGLE = 2.5/3.0;\n\nfloat viewMapping()\n{\n    return texture(iChannel2, vec2(KEY_UP, TOGGLE)).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 cubeSample = texture(iChannel0, UnwrapCube(uv));\n    vec4 mapping = vec4(hyoo(band(uv.x, 16.0)) * (0.5 * band(uv.y, 16.) + 0.5), 1.);   \n    fragColor = mix(cubeSample, mapping, viewMapping() * 0.8);\n}","name":"Buf A","description":"","type":"buffer"}]}