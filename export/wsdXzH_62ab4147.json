{"ver":"0.1","info":{"id":"wsdXzH","date":"1571497349","viewed":275,"name":"diffusion -","username":"matthen","description":"random cellular automaton simulating diffusion","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["2d","diffusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool isParticle(in ivec2 p) {\n    p = p % ivec2(iResolution.xy);\n    return texelFetch(iChannel0, p, 0).x > 0.5;\n}\n\nbool isFree(in ivec2 p) {\n    p = p % ivec2(iResolution.xy);\n    return texelFetch(iChannel0, p, 0).y > 0.5;\n}\n\nfloat age(in ivec2 p) {\n    p = p % ivec2(iResolution.xy);\n    return texelFetch(iChannel0, p, 0).y;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n \tivec2 coord =ivec2(fragCoord);\n    \n    float c = float(isParticle(coord));\n    \n    fragColor += 1. - c;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"int isParticle(in ivec2 p) {\n    p = p % ivec2(iResolution.xy);\n    return int(step(0.5, texelFetch(iChannel0, p, 0).x));\n}\n\nbool isFree(in ivec2 p) {\n    p = p % ivec2(iResolution.xy);\n    return texelFetch(iChannel0, p, 0).y > 0.5;\n}\n\nfloat hash11(float p) {\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * 0.1031);\n\tp3 += dot(p3, p3.yzx + 19.19);\n\treturn fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 getNext(in ivec2 p) {\n    vec3 val;\n    \n    int frame = iFrame;\n    ivec2 pp = (p + ivec2(frame % 2, frame / 2)) % 2;\n    ivec2 notpp = 1 - pp;\n    \n    ivec4 o = ivec4(-pp.x, 1 - pp.x, -pp.y, 1 - pp.y);\n    \n    if (\n        !isFree(p + o.xz)\n        || !\n    \n    int topLeft = isParticle(p + o.xz); \n    int topRight = isParticle(p + o.yz); \n    int bottomLeft = isParticle(p + o.xw); \n    int bottomRight = isParticle(p + o.yw); \n    \n    int next = topLeft + 2 * topRight + 4 * bottomLeft + 8 * bottomRight;\n    \n    float id = float(p.x + o.x) + iResolution.y * float(p.y + o.z);\n    \n    int shift = int(4. * hash11(iTime + id));\n    next = next << shift | (next >> (4 - shift));\n    \n    \n    // is particle\n    val.x = float((next >> (pp.x + 2 * pp.y)) % 2);\n    \n    // increment age\n    if (val.x > 0.5 && val.y < 0.5) {\n    \tval.z += 0.001;   \n    }\n    \n    return val;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    \n    ivec2 p = ivec2(fragCoord);\n    \n    vec3 val;\n    \n    val = getNext(p);\n    \n    if (iFrame == 0) {\n        vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.x;\n        \n        if (length(uv) > 0.1) {\n            // is particle\n            val.x = step(0.99, hash12(fragCoord));\n            // is free\n            val.y = 1.;\n            \n        } else {\n            val.x = 1.;\n            \n        }\n        \n  \n    }\n    \n    \n    fragColor = vec4(val, 0.);\n}","name":"Buffer A","description":"","type":"buffer"}]}