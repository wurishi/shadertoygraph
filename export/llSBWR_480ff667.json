{"ver":"0.1","info":{"id":"llSBWR","date":"1515275647","viewed":176,"name":"5/2018","username":"rimina","description":"Sometimes flat shading + black and white just works.\n\nThis one is part of my daily shader challenge. It is simple but I challenged my self to write the code without references and pretty much succeeded. :)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","blackandwhite","flatshading"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 64\n#define FAR 40.0\n#define EPSILON 0.01\n\n\nvec3 repeat(vec3 p, vec3 n){\n    vec3 pp = p;\n    vec3 dif = n*0.5;\n    pp = mod(pp+dif, n) - dif;\n    \n    return pp;\n}\n\nfloat sphere(vec3 p, float r){\n    return length(p)-r;\n}\n\n\nfloat dist(vec3 p){\n    vec3 pp = repeat(p, vec3(2.0));\n    \n    return sphere(pp, 0.17);\n}\n\nvec3 march(vec3 ro, vec3 rd){\n    \n    vec3 p = ro;\n    float t = 0.0;\n    \n    for(int i = 0; i < STEPS; ++i){\n        float d = dist(p);\n        t += d;\n        p += rd*d;\n        \n        if(d < EPSILON || t > FAR){\n            break;\n        }\n    }\n    \n    vec3 col = vec3(0.0);\n    if(t <= FAR){\n        col = vec3(1.0);\n    }\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    q = -1.0+2.0*q;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0.0, 0.0, 0.5);\n    vec3 rt = vec3(0.0, 0.0, 1.0);\n    \n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n    vec3 y = normalize(cross(x, z));\n    \n    vec3 rd = normalize(mat3(x, y, z)*vec3(q.xy, radians(60.0)));\n    \n    vec3 col = march(ro, rd);\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}