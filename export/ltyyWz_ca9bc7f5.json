{"ver":"0.1","info":{"id":"ltyyWz","date":"1535727064","viewed":559,"name":"cymack","username":"_polymath","description":"an effect to use in the future, here shown with a gentle plasma or britney, whatever you prefr","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["printing","cmy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float col(vec2 uv, int c) {\n    vec4 cc = texture(iChannel0, uv * iResolution.yy / iResolution.xy);\n    if (c == 0) return cc.r;\n    if (c == 1) return cc.g;\n    return cc.b;\n    // this is the old plasma version but it doesn't really show off the effect at all:\n\tuv *= 8.;\n    float d = 0.0;\n    for (float i = 0.0; i < 200.0; ++i) {\n        float j = max(0.0, 3.14 - distance(uv, vec2(\n            sin(i + iTime * mod(i * 2633.2363, 0.12623)) * 12.0,\n            cos(i  * 0.617 + iTime * mod(i * 36344.2363, 0.22623)) * 12.0\n        )));\n        d += cos(j);\n     }\n    if (c == 0) return cos(d * 6.0) * 0.5 + 0.5;\n    if (c == 1) return cos(d * 3.0) * 0.5 + 0.5;\n                return cos(d * 1.5) * 0.5 + 0.5;\n}\n\n\nfloat cc(vec2 uv, mat2 mat, int ch, float size) {\n        \n    vec2 inCell = fract(uv * mat * size),\n        cell = floor(uv * mat * size),\n        centre = (cell / size) * inverse(mat);\n    \n    float c = col(centre, ch);\n    \n    vec2 r = (inCell - vec2(0.5)) * 2.;\n   \treturn dot(r, r) >= (1. - c) ? 1. : 0.;\n    \n}\n\nmat2 rotate(float theta) {\n\tfloat s = sin(theta), c = cos(theta);\n    return mat2(c, s, -s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.yy;\n\n    mat2 r0 = rotate(0.),\n        r1 = rotate(30. + iTime * 0.04),\n    \tr2 = rotate(60. - iTime * 0.07);\n    \n    float size = 16. + 12. * cos(iTime * 0.1);\n    \n    fragColor = vec4(\n        cc(uv, r0, 0, size),\n        cc(uv, r1, 1, size),\n        cc(uv, r2, 2, size),\n        1.);\n    \n}\n           ","name":"Image","description":"","type":"image"}]}