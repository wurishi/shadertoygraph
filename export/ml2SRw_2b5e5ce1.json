{"ver":"0.1","info":{"id":"ml2SRw","date":"1689341366","viewed":68,"name":"SDFMaterial","username":"middle","description":"try render something.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf","material"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define PI 3.14159265359\n\n\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.001;\n\n\n\n\n\n\nfloat sphereSDF(vec3 samplePoint, float size) {\n    return length(samplePoint) - size;\n}\n\nfloat plan(vec3 samplePoint, float hight){\n\nreturn (samplePoint.z - hight);\n\n}\n\nmat3 rotate( in vec3 v, in float angle)\n{\n\tfloat c = cos(angle);\n\tfloat s = sin(angle);\n\t\n\treturn mat3(c + (1.0 - c) * v.x * v.x, (1.0 - c) * v.x * v.y - s * v.z, (1.0 - c) * v.x * v.z + s * v.y,\n\t\t(1.0 - c) * v.x * v.y + s * v.z, c + (1.0 - c) * v.y * v.y, (1.0 - c) * v.y * v.z - s * v.x,\n\t\t(1.0 - c) * v.x * v.z - s * v.y, (1.0 - c) * v.y * v.z + s * v.x, c + (1.0 - c) * v.z * v.z\n\t\t);\n}\n\n\nfloat cubeSDF(vec3 p,vec3 size) {\n\n    \n\n    // If d.x < 0, then -1 < p.x < 1, and same logic applies to p.y, p.z\n    // So if all components of d are negative, then p is inside the unit cube\n    vec3 d = abs(p) - size;\n    \n    // Assuming p is inside the cube, how far is it from the surface?\n    // Result will be negative or zero.\n    float insideDistance = min(max(d.x, max(d.y, d.z)), 0.0);\n    \n    // Assuming p is outside the cube, how far is it from the surface?\n    // Result will be positive or zero.\n    float outsideDistance = length(max(d, 0.0));\n    \n    return insideDistance + outsideDistance;\n}\n\n vec2 CompareDepth( vec2 shape0, vec2 shape1){\n \n return shape0.x < shape1.x ? shape0 : shape1 ;\n \n }\n\nvec2 sceneSDF(vec3 samplePoint) {\n\n    \n\n    float oo = sphereSDF(samplePoint,0.8);\n    \n    vec2 depthAndMat  = CompareDepth( vec2( oo,12.0),vec2(plan(samplePoint,-1.0),1.0));\n\n    return depthAndMat;\n}\n/*\n先从相机位置往光线方向射出 satrt 长度\n\n然后用sdf判断距离，如果小于 EPSILON 说明此时光线已经射入了sdf场景中的模型内部，于是return 距离\n\n如果没有则return 光线截止的距离\n*/\nvec2 shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float material = -1.0;\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        vec2 dist = sceneSDF(eye + depth * marchingDirection);\n        if (dist.x < EPSILON) {\n\t\t\treturn vec2 (depth,dist.y);\n        }\n        depth += dist.x;\n        if (depth >= end) {\n            return vec2(end,-1.0);\n        }\n    }\n    return vec2(end,-1.0);\n}\n\nfloat shadow(in vec3 origin, in vec3 direction) {\n    float hit = 1.0;\n    float t = 0.02;\n    \n    for (int i = 0; i < 1000; i++) {\n        float h = sceneSDF(origin + direction * t).x;\n        if (h < 0.001) return 0.0;\n        t += h;\n        hit = min(hit, 10.0 * h / t);\n        if (t >= 2.5) break;\n    }\n\n    return clamp(hit, 0.0, 1.0);\n}\n\n/*这里根据uv做出\n\n ← x →\n \n ↖↑↗  ↑\n ← · →  y\n ↙↓↘  ↓\n\n越边缘向量长度越长，\n\n然后再在z维度加上一个用 fieldOfView 控制的值\n\n    ·      ↑\n  ↙↓↘    z\n—————————— ↓\n\n就可以控制相机左右光线射出的角度\n\n*/\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n//计算法线，原理就是取上下左右前后6个点去算sdf距离\n\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)).x - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)).x,\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)).x - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)).x,\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)).x - sceneSDF(vec3(p.x, p.y, p.z - EPSILON)).x\n    ));\n}\n//单个灯光的属性\n\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) \n                          {\n    //计算p的法线\n    vec3 N = estimateNormal(p);\n    //灯光的入射角度\n    vec3 L = normalize(lightPos - p);\n    //从摄像机到被照亮地方的角度\n    vec3 V = normalize(eye - p);\n    //灯光的反射角度\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        //也就是说这个灯在模型的背面\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n    \n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        //漫反射的亮度\n        return lightIntensity * (k_d * dotLN);\n    }\n    //漫反射的亮度加上高光,这里的高光是用这个alpha控制的，意思是物体表面的光滑度\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n//多个灯光组合，这里放了三个灯\n//k_a 基础色 k_d\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 ,2.0,2.0 );\n    vec3 light1Intensity = vec3(0.8, 0.45, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(-1.0*sin(0.37 * iTime)-3.0 ,\n                          2.0 * cos(0.37 * iTime+1.0),\n                          2.0);\n    vec3 light2Intensity = vec3(0.5, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity); \n                                  \n    vec3 light3Pos = vec3(-5.0,-4.0,-2.0);\n    vec3 light3Intensity = vec3(0.4, 0.4, 0.8);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light3Pos,\n                                  light3Intensity);  \n                                  \n    return color;\n}\n\n//  BRDF ----- form https://www.shadertoy.com/view/XlKSDR\n\nfloat pow5(float x) {\n    float x2 = x * x;\n    return x2 * x2 * x;\n}\n\nfloat D_GGX(float linearRoughness, float NoH, const vec3 h) {\n    // Walter et al. 2007, \"Microfacet Models for Refraction through Rough Surfaces\"\n    float oneMinusNoHSquared = 1.0 - NoH * NoH;\n    float a = NoH * linearRoughness;\n    float k = linearRoughness / (oneMinusNoHSquared + a * a);\n    float d = k * k * (1.0 / PI);\n    return d;\n}\n\nfloat V_SmithGGXCorrelated(float linearRoughness, float NoV, float NoL) {\n    // Heitz 2014, \"Understanding the Masking-Shadowing Function in Microfacet-Based BRDFs\"\n    float a2 = linearRoughness * linearRoughness;\n    float GGXV = NoL * sqrt((NoV - a2 * NoV) * NoV + a2);\n    float GGXL = NoV * sqrt((NoL - a2 * NoL) * NoL + a2);\n    return 0.5 / (GGXV + GGXL);\n}\n\nvec3 F_Schlick(const vec3 f0, float VoH) {\n    // Schlick 1994, \"An Inexpensive BRDF Model for Physically-Based Rendering\"\n    return f0 + (vec3(1.0) - f0) * pow5(1.0 - VoH);\n}\n\nfloat F_Schlick(float f0, float f90, float VoH) {\n    return f0 + (f90 - f0) * pow5(1.0 - VoH);\n}\n\nfloat Fd_Burley(float linearRoughness, float NoV, float NoL, float LoH) {\n    // Burley 2012, \"Physically-Based Shading at Disney\"\n    float f90 = 0.5 + 2.0 * linearRoughness * LoH * LoH;\n    float lightScatter = F_Schlick(1.0, f90, NoL);\n    float viewScatter  = F_Schlick(1.0, f90, NoV);\n    return lightScatter * viewScatter * (1.0 / PI);\n}\n\nfloat Fd_Lambert() {\n    return 1.0 / PI;\n}\n\n\n\n//相机矩阵\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    \n\n    vec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord);\n       \n    vec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);\n    \n    vec3 eye = normalize (vec3(sin(iTime*0.2)*2.0, cos(iTime*0.3)*4.5, 5.0))*7.0;\n    \n    if (iMouse.zw==vec2(0) ){\n        \n        eye = normalize (vec3(sin(iTime*0.2)*2.0, cos(iTime*0.3)*4.5, 5.0))*7.0;\n        \n    }\n    if(iMouse.z>0.0)\n    {\n        eye = normalize (vec3(iMouse.x*90.0/iResolution.x-45.0, iMouse.y*90.0/iResolution.y-45.0, 5.0))*7.0;\n    \n    }\n    \n    mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n    \n    vec2 dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n    vec3 position = eye + dist.x * worldDir;\n    \n    float material = dist.y;\n    \n    if (dist.x > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        fragColor = vec4(0.1, 0.1, 0.1, 0.0);\n\t\treturn;\n    }\n    \n        vec3 K_a = vec3(0.2, 0.2, 0.2);\n        vec3 K_d = vec3(0.9, 0.9,0.9);\n        vec3 K_s = vec3(1.0, 1.0, 1.0);\n        float shininess = 10.0;\n        \n    if(material < 4.0){\n    \n        K_a = vec3(0.2, 0.2, 0.2);\n        float f = mod(floor(3.0 * position.y) + floor(3.0 * position.x), 2.0);\n        K_d = 0.4+f*vec3(0.6);\n        K_s = vec3(1.0, 1.0, 1.0);\n        shininess = 8.0+f*8.0;\n        \n    \n    }else if( material < 16.0){\n    \n        K_a = vec3(0.2, 0.2, 0.2);\n        K_d = vec3(0.3, 0.3, 0.3);\n        K_s = vec3(1.0, 1.0, 1.0);\n        shininess = 8.0;\n    \n    }\n    \n    vec3 p = eye + dist.x * worldDir;\n    \n    \n    \n    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}