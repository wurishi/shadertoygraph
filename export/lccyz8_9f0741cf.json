{"ver":"0.1","info":{"id":"lccyz8","date":"1730226203","viewed":205,"name":"Cut glass 2","username":"ChunderFPV","description":"Foolin around with an old shader.","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","cubemap","aa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// reworking an older shader: https://www.shadertoy.com/view/ddBXDm\n\n#define A(v) mat2(cos(m.v*3.1416 + vec4(0, -1.5708, 1.5708, 0)))  // rotate\n#define H(v) (cos(v*6.2832 + radians(vec3(-60, 0, 60)))*.5+.5)    // hue\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    float t = iTime/10.,\n          l = 50.,  // raymarch loop\n          a = 2.,   // aa loop\n          i, d, s;\n    \n    vec2 R = iResolution.xy, o,\n         m = (iMouse.z > 0.) ?\n               (iMouse.xy - R/2.)/R.y:    // coords (clicking)\n               vec2(cos(t+1.)*.25, .05);  // coords (not clicking)\n    \n    vec3 c = vec3(0), u, p, r, g;\n    \n    mat2 v = A(y),  // pitch\n         h = A(x);  // yaw\n    \n    for (int k = 0; k < int(a*a); k++)  // aa loop\n    {\n        o = vec2(k%2, k/2)/a;  // aa offset\n        u = normalize(vec3(U - R/2. + o, R.y*.7));  // coords\n        u.yz *= v;  // pitch\n        u.xz *= h;  // yaw\n        d = 0.;\n        \n        for (i = 0.; i++<l;)  // raymarch\n        {\n            p = u*d;                         // new coords\n            p.y = abs(p.y);                  // reflect y\n            p.xy += .5;                      // shift\n            p.z += sqrt(2.*t*t*round(p.y));  // move z\n            p = abs(p-round(p));             // tile xyz\n            s = smoothstep(.25, .3, max(p.x, max(p.y, p.z)));  // outer cubes\n            s = max(s, .24-max(p.x, max(p.y, p.z)));           // inner cubes\n            if (s < 1e-3 || d > 1e3) break;  // limit break\n            d += s;  // add scene\n        }\n        c += d/l + max(.5-H(d), 0.);  // add objects & color\n    }\n    \n    c /= a*a;  // fix brightness after aa pass\n    r = H(length(u.xy))*.5+.5;  // color (radial)\n    c *= r;\n    c += .5*c*texture(iChannel0, p).rgb;  // cubemap\n    p = abs(p-p.yzx)/p;  // adjust coords\n    c += .5*c*min(.01/min(p.x, min(p.y, p.z)), 1.);  // grid texture\n    \n    // floor grid\n    if (u.y < 0.)\n    {\n        c *= .5;                // floor brightness\n        d = pow(abs(u.y), .7);  // dark horizon\n        u /= -u.yzx;            // quotient coords\n        u.y = 1./u.y + t*2.;    // flip y, add time\n        g = min(max(fwidth(u), .02)/abs(u-round(u)), 2.);      // form grid\n        c += max(max(g.x, g.y)/2., min(g.x, g.y)*2.) * d * r;  // draw grid\n    }\n    \n    C = vec4(c + c*c, 1);\n}","name":"Image","description":"","type":"image"}]}