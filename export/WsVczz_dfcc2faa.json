{"ver":"0.1","info":{"id":"WsVczz","date":"1602149330","viewed":367,"name":"Snowing - Snowflake","username":"shadermonkey","description":"It is snowing!","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["snowflake","snow","winter","cold","crystal","shadermonkey"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a,b,t) smoothstep(a,b,t)\n#define N 80\n\nfloat pi = 3.141592653589793238462643383;\nvec3 snowBlue = vec3(.4);\nvec2 XY = vec2(8./9.,.5);\n\n\n//Coordinate Transformation\nvec2 RectToPolar(vec2 uv){\n    vec2 pol_uv = vec2(length(uv), atan(uv.x/uv.y));\n    float st_a = fract(pol_uv.y/(pi/3.))/(pi/3.) -.5;\n    return vec2(pol_uv.x, st_a);\n}\nvec2 PolarToRect(vec2 st){\n    float ratio = pi/6./.5;\n    return st.x*vec2(cos(st.y*ratio), sin(st.y*ratio));\n}\n\n//Map v to Range(i,f)\nfloat Map(float i, float f, float v){\n    if(v > f){\n        float a = ceil((v-f)/(f-i));\n        return v - a*(f-i);\n    } else if (v < i){\n        float a = ceil((i-v)/(f-i));\n        return v + a*(f-i);\n    } else return v;\n}\nvec2 Rotate(vec2 st, float angle){\n    float ratio = pi/6./.5;\n    st.y += angle/ratio;\n    st.y = Map(-.5,.5,st.y);\n    return st;\n}\nfloat Line(vec2 pi, vec2 pf, float d, vec2 st){\n    vec2 pi_rect = PolarToRect(pi);\n    vec2 pf_rect = PolarToRect(pf);\n    vec2 st_rect = PolarToRect(st);\n    \n    vec2 v1 = pf_rect - pi_rect; \n    float l = length(v1);\n    vec2 v2 = st_rect - pi_rect;\n    vec2 v3 = st_rect - pf_rect;\n    float d1 = length(v2);\n    float d2 = length(v3);\n    float perpD = d1*sqrt(1.-pow((dot(v1,v2)/l/length(v2)),2.));\n    \n    float x1 = abs(dot(v2,v1)/l);\n    float x2 = abs(dot(v3,v1)/l);\n    if(x1 < l){\n        if(x2 < l){\n            if(perpD < d) {\n                return S(d,0.,perpD);\n            }\n        } else if(d1 < d) {\n            return 0.;\n        }\n    } else {\n        if (d2 < d) {\n            return S(d,0.,d2);\n        }\n    }\n\n    return 0.;\n}\n    \n//Random with iMouse.x as parameter\nfloat Random(float s){ //[-1,1]\n    return fract(cos((iMouse.x +.2)*s)*73.17) * 2. - 1.;\n}\n\nfloat SnowFlake(vec2 st, float size, float seed){\n    st.x /= size;\n    vec2 st_rect = PolarToRect(st);\n    \n    float ringR = XY.y;\n    float ringW = abs(Random(.232*seed)) * .015 + .02;\n    float result = 0.;\n    result += Line(vec2(0.,0.), vec2(ringR,0.), ringW/2., st);\n    float ratio = pi/6./.5;\n    float angle = pi/3.;\n    float dx = .05;\n    \n    //Each line\n    for(float x = 0.02; x < ringR; x+= .05){\n        float r = x;\n        float l = (ringR-r)*r*2.5*abs(Random(r*seed));\n        float c = pow(pow(l,2.) + pow(r,2.) - 2.*l*r*cos(pi -angle),.5);\n        float angle2 = asin(sin(pi -angle)/c*l);\n        result += Line(vec2(r,.0), vec2(c,angle2/ratio), ringW, vec2(st.x,abs(st.y)));\n    }\n    return result;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2(.5);\n \tuv.x *= iResolution.x/iResolution.y;\n    float t = iTime*.2;\n    \n\tfloat ratio = pi/6./.5;\n    \n    vec3 col = vec3(.0,.0,.1);\n    for(int i = 0; i < N; i++){\n        //speed\n        float vy = abs(Random(float(i)*3.))*.5 + .1;\n        float vx = sin((float(i)+t)/2.)*.5;\n        float va = Random(float(i)*7.)*.5 + .2;\n        \n        //size\n        float size = abs(Random(float(i)*12.));\n        if(float(i) < float(N)* .1) {\n            size *= .4;\n        } else if(float(i) < float(N) * .7){\n            size *= .3;\n        } else size *= .25;\n        \n        //position\n\t\tvec2 XY_ = XY + XY*size;\n        vec2 orgOffset = vec2(Random(float(i))*.8, Random(float(i)*2.)*.5);\n        vec2 moveOffset = vec2(vx,vy*t);\n        vec2 offset = orgOffset + moveOffset;\n        offset.y = Map(-XY_.y,XY_.y, offset.y);\n        offset.x = Map(-XY_.x,XY_.x, offset.x);\n        vec2 pos = uv + offset;\n        \n        vec2 st = RectToPolar(pos);\n        st = Rotate(st, pi * va*t);\n        col += SnowFlake(st, size, float(i))*snowBlue*pow((size)/.4,2.);\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}