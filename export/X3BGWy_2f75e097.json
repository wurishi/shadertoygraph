{"ver":"0.1","info":{"id":"X3BGWy","date":"1708784963","viewed":89,"name":"Polyhedron Morph","username":"johnao","description":"All 5 regular polyhedrons.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["3d","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define INF 20.\n#define EPS .01\n#define AA 0\n#define T_TRANSFORM 1.\n#define T_STAY 1.\n#define SPLIT 0\n\nvec4 face(vec3 x, vec3 y, vec3 z) {\n    vec3 n = cross(y - x, z - x);\n    if (length(n) < EPS) {\n        n = x;\n    }\n    n = normalize(n);\n    float d = dot(x, n);\n    return d >= 0. ? vec4(n, d) : vec4(-n, -d);\n}\n\nvec4 map_face(vec3 x, vec3 y, vec3 z, vec3 p) {\n    vec4 f = face(x, y, z);\n    f.w = dot(p, f.xyz) - f.w;\n    return f;\n}\n\nvec4 max4(vec4 a, vec4 b) {\n    return a.w > b.w ? a : b;\n}\n\nfloat period(float a, float b, float x) {\n    x = mod(x, a + a + b + b);\n    return x < a ? smoothstep(0., a, x) : x < a + b   ? 1.\n                                      : x < a + a + b ? smoothstep(a + a + b, a + b, x)\n                                                      : 0.;\n}\n\nvec4 map_4_6(vec3 p, float t) {\n    float k = (1. + 2. * period(T_TRANSFORM, T_STAY, t)) / 3.;\n    vec3 vs[8] = vec3[](\n        vec3(-1, -1, +1) * k,\n        vec3(-1, +1, +1),\n        vec3(+1, -1, +1),\n        vec3(+1, +1, +1) * k,\n        vec3(-1, -1, -1),\n        vec3(-1, +1, -1) * k,\n        vec3(+1, -1, -1) * k,\n        vec3(+1, +1, -1));\n    vec4 c = vec4(vec3(1.), -INF);\n    c = max4(c, map_face(vs[0], vs[1], vs[2], p));\n    c = max4(c, map_face(vs[0], vs[1], vs[4], p));\n    c = max4(c, map_face(vs[0], vs[4], vs[2], p));\n    c = max4(c, map_face(vs[3], vs[1], vs[2], p));\n    c = max4(c, map_face(vs[3], vs[1], vs[7], p));\n    c = max4(c, map_face(vs[3], vs[7], vs[2], p));\n    c = max4(c, map_face(vs[5], vs[1], vs[4], p));\n    c = max4(c, map_face(vs[5], vs[1], vs[7], p));\n    c = max4(c, map_face(vs[5], vs[7], vs[4], p));\n    c = max4(c, map_face(vs[6], vs[7], vs[2], p));\n    c = max4(c, map_face(vs[6], vs[7], vs[4], p));\n    c = max4(c, map_face(vs[6], vs[4], vs[2], p));\n    return c;\n}\n\nvec4 map_6_8(vec3 p, float t) {\n    vec3 s = sign(p);\n    p = abs(p);\n    float k = period(T_TRANSFORM, T_STAY, t);\n    vec3 v = vec3(1., 0., 0.);\n    vec3 v_0_x = mix(vec3(+1, +1, +1), v.xyy, k);\n    vec3 v_0_y = mix(vec3(+1, +1, +1), v.yxy, k);\n    vec3 v_0_z = mix(vec3(+1, +1, +1), v.yyx, k);\n    vec3 v_1_x = mix(vec3(-1, +1, +1), v.xyy, k);\n    vec3 v_1_y = mix(vec3(-1, +1, +1), v.yxy, k);\n    vec3 v_1_z = mix(vec3(-1, +1, +1), v.yyx, k);\n    vec3 v_2_x = mix(vec3(+1, -1, +1), v.xyy, k);\n    vec3 v_2_y = mix(vec3(+1, -1, +1), v.yxy, k);\n    vec3 v_2_z = mix(vec3(+1, -1, +1), v.yyx, k);\n    vec3 v_3_x = mix(vec3(+1, +1, -1), v.xyy, k);\n    vec3 v_3_y = mix(vec3(+1, +1, -1), v.yxy, k);\n    vec3 v_3_z = mix(vec3(+1, +1, -1), v.yyx, k);\n    vec4 c = vec4(vec3(1.), -INF);\n    c = max4(c, map_face(v_0_x, v_0_y, v_0_z, p));\n    c = max4(c, map_face(v_0_x, v_2_x, v_3_x, p));\n    c = max4(c, map_face(v_0_y, v_1_y, v_3_y, p));\n    c = max4(c, map_face(v_0_z, v_1_z, v_2_z, p));\n    c.xyz *= s;\n    return c;\n}\n\nvec4 map_6_12(vec3 p, float t) {\n    vec3 s = sign(p);\n    p = abs(p);\n    float k = period(T_TRANSFORM, T_STAY, t);\n    float phi = (sqrt(5.) - 1.) * .5;\n    float a = 1. + phi;\n    vec3 o = vec3(1);\n    vec3 o_x = vec3(-1, 1, 1);\n    vec3 o_y = vec3(1, -1, 1);\n    vec3 o_z = vec3(1, 1, -1);\n    vec3 v_x = mix(vec3(1, 0, phi), vec3(a, 0, phi), k);\n    vec3 v_y = mix(vec3(phi, 1, 0), vec3(phi, a, 0), k);\n    vec3 v_z = mix(vec3(0, phi, 1), vec3(0, phi, a), k);\n    vec4 c = vec4(vec3(1.), -INF);\n    c = max4(c, map_face(o, o_y, v_x, p));\n    c = max4(c, map_face(o, o_z, v_x, p));\n    c = max4(c, map_face(o, o_x, v_y, p));\n    c = max4(c, map_face(o, o_z, v_y, p));\n    c = max4(c, map_face(o, o_y, v_z, p));\n    c = max4(c, map_face(o, o_x, v_z, p));\n    c.xyz *= s;\n    return c;\n}\n\nvec4 map_8_12(vec3 p, float t) {\n    vec3 s = sign(p);\n    p = abs(p);\n    float k = period(T_TRANSFORM, T_STAY, t);\n    float phi = (sqrt(5.) - 1.) * .5;\n    float a = 1. + phi;\n    vec3 v_0 = mix(vec3(1. / 3.), vec3(1.), k);\n    vec3 v_x = mix(vec3(1, 0, 0), vec3(a, 0, phi), k);\n    vec3 v_y = mix(vec3(0, 1, 0), vec3(phi, a, 0), k);\n    vec3 v_z = mix(vec3(0, 0, 1), vec3(0, phi, a), k);\n    vec3 v_x_ = mix(vec3(1, 0, 0), vec3(a, 0, phi), k);\n    vec3 v_y_ = mix(vec3(0, 1, 0), vec3(phi, a, 0), k);\n    vec3 v_z_ = mix(vec3(0, 0, 1), vec3(0, phi, a), k);\n    vec4 c = vec4(vec3(1.), -INF);\n    c = max4(c, map_face(v_0, v_x, v_y, p));\n    c = max4(c, map_face(v_0, v_x, v_z, p));\n    c = max4(c, map_face(v_0, v_z, v_y, p));\n    c.xyz *= s;\n    return c;\n}\n\nvec4 map_8_20(vec3 p, float t) {\n    vec3 s = sign(p);\n    p = abs(p);\n    float k = period(T_TRANSFORM, T_STAY, t);\n    float phi = (sqrt(5.) - 1.) * .5;\n    float a = 1. + phi;\n    vec3 x = mix(vec3(a, 0, 0), vec3(1, 0, 0), k);\n    vec3 y = x.zxy;\n    vec3 z = y.zxy;\n    vec3 xy = vec3(1, phi, 0);\n    vec3 yz = xy.zxy;\n    vec3 zx = yz.zxy;\n    vec4 c = vec4(vec3(1.), -INF);\n    c = max4(c, map_face(xy, yz, zx, p));\n    c = max4(c, map_face(x, xy, zx, p));\n    c = max4(c, map_face(xy, y, yz, p));\n    c = max4(c, map_face(zx, yz, z, p));\n    c.xyz *= s;\n    return c;\n}\n\nvec4 map_12_20(vec3 p, float t) {\n    vec3 s = sign(p);\n    p = abs(p);\n    float k = period(T_TRANSFORM, T_STAY, t);\n    float phi = (sqrt(5.) - 1.) * .5;\n    float a = 1. + phi;\n    vec3 o = vec3(1);\n    vec3 c_x = normalize(vec3(1, phi, 0)) * sqrt(3.);\n    vec3 c_y = c_x.zxy;\n    vec3 c_z = c_y.zxy;\n    vec3 o_x = mix(o, c_x, k);\n    vec3 o_y = o_x.zxy;\n    vec3 o_z = o_y.zxy;\n    vec3 x_x = mix(vec3(a, 0, phi), c_x, k);\n    vec3 x_z = mix(vec3(a, 0, phi), c_z, k);\n    vec3 x_a = vec3(x_x.x, -x_x.y, x_x.z);\n    vec3 x_b = vec3(x_x.x, -x_x.y, -x_x.z);\n    vec3 y_y = x_x.zxy;\n    vec3 y_x = x_z.zxy;\n    vec3 y_a = x_a.zxy;\n    vec3 y_b = x_b.zxy;\n    vec3 z_z = y_y.zxy;\n    vec3 z_y = y_x.zxy;\n    vec3 z_a = y_a.zxy;\n    vec3 z_b = y_b.zxy;\n    vec4 c = vec4(vec3(1.), -INF);\n    c = max4(c, map_face(o_x, o_y, o_z, p));\n\n    c = max4(c, map_face(o_x, o_y, y_x, p));\n    c = max4(c, map_face(o_y, o_z, z_y, p));\n    c = max4(c, map_face(o_z, o_x, x_z, p));\n\n    c = max4(c, map_face(o_x, x_x, y_x, p));\n    c = max4(c, map_face(o_y, y_y, z_y, p));\n    c = max4(c, map_face(o_z, z_z, x_z, p));\n\n    c = max4(c, map_face(x_x, x_a, x_b, p));\n    c = max4(c, map_face(x_x, x_a, x_z, p));\n    c = max4(c, map_face(y_y, y_a, y_b, p));\n    c = max4(c, map_face(y_y, y_a, y_x, p));\n    c = max4(c, map_face(z_z, z_a, z_b, p));\n    c = max4(c, map_face(z_z, z_a, z_y, p));\n\n    c.xyz *= s;\n    return c;\n}\n\nvec4 map(vec3 p) {\n    float T = T_TRANSFORM + T_STAY;\n    float t = mod(iTime, T * 6.);\n    // return vec4(normalize(p) * .5 + .5, length(p) - 1.);\n    float phi = (sqrt(5.) - 1.) * .5;\n    float s = sqrt((1. + phi * phi) / 3.);\n    return t < T ? map_4_6(p, iTime) : t < 2. * T ? map_6_12(p, iTime + T)\n                                   : t < 3. * T   ? map_12_20(p, iTime)\n                                   : t < 4. * T   ? map_8_20(p * mix(1. + phi, s, period(T_TRANSFORM, T_STAY, t)), iTime)\n                                   : t < 5. * T   ? map_6_8(p, iTime + T)\n                                                  : map_4_6(p, iTime);\n}\n\nvec3 image(vec2 coord) {\n    vec3 col = vec3(1.);\n    float t = iTime;\n    vec3 z = normalize(vec3(3. * cos(t), 2. * sin(.7 * t), 3. * sin(t)));\n    vec3 o = z * 10.;\n    vec3 y = vec3(0, 1, 0);\n    vec3 x = normalize(cross(y, z));\n    y = cross(z, x);\n#if SPLIT\n    float T = T_TRANSFORM + T_STAY;\n    vec2 res = iResolution.xy / vec2(3, 2);\n    vec2 uv = (2. * mod(coord, res) - res) / min(res.x, res.y) * 2.;\n    float index = floor(coord.x / res.x) + 3. * floor(coord.y / res.y);\n#else\n    vec2 uv = (2. * coord - iResolution.xy) / min(iResolution.x, iResolution.y) * 2.;\n#endif\n    vec3 r = normalize(uv.x * x + uv.y * y - o);\n    float d = 0.;\n    for (int i = 0; i < 100; ++i) {\n        vec3 p = o + d * r;\n#if SPLIT\n        vec4 cd = index == 0. ? map_4_6(p, iTime + T) : index == 1. ? map_12_20(p, iTime + T)\n                                                    : index == 2.   ? map_6_12(p, iTime)\n                                                    : index == 3.   ? map_8_12(p, iTime)\n                                                    : index == 4.   ? map_8_20(p, iTime)\n                                                                    : map_6_8(p, iTime + T);\n#else\n        vec4 cd = map(p);\n#endif\n        if (cd.w < EPS) {\n            col = cd.xyz * .5 + .5;\n            break;\n        }\n        d += cd.w * .5;\n        if (d > INF) {\n            break;\n        }\n    }\n    // float R=1.8;\n    // d=length(uv);\n    // col*=1.-(smoothstep(R-EPS,R,d)-smoothstep(R,R+EPS,d));\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n#if AA\n    const vec2 offset[4] = vec2[](vec2(.125, .375), vec2(.125, -.375), vec2(-.125, .375), vec2(-.125, -.375));\n    vec3 col = vec3(0.);\n    for (int i = 0; i < 4; ++i) {\n        col += image(fragCoord + offset[i]);\n    }\n    col *= .25;\n#else\n    vec3 col = image(fragCoord);\n#endif\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}