{"ver":"0.1","info":{"id":"tllczs","date":"1592860704","viewed":179,"name":"[TWITCH] Rainbow Maze","username":"Flopine","description":"Improved version of a shader started during a twitch stream. You can re-watch all of the previous episode of HBHS (Have a Beer Have a Shader) here: https://www.twitch.tv/flopine","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","animation","isometric","orthographic","twitch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU 6.2831853071\n#define ITER 64.\n\n#define time(speed) fract(iTime*speed)\n#define bouncy(speed) sqrt(abs(sin(time(speed)*PI)))\n#define switchanim(speed) floor(sin(time(speed)*TAU)+1.)\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat hash21 (vec2 x)\n{return fract(sin(dot(x,vec2(12.5,32.4)))*1245.2);}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y>p.x) p = p.yx;\n}\n\nvoid moda(inout vec2 p, float rep)\n{\n    float per = TAU/rep;\n    float a = mod(atan(p.y,p.x)-per*.5,per)-per*0.5;\n    p = vec2(cos(a),sin(a))*length(p);\n}\n\nfloat box(vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat lustre, g1 = 0.;\nfloat room (vec3 p)\n{\n    vec3 pp = p;\n    float size = 2.;\n    float r = abs(box(p, vec3(1.5,2.,1.5)))-0.08;\n    mo(p.xz, vec2(1.3));\n    r = min(r, max(length(p.xz)-0.2,abs(p.y)-3.));\n\n    p = pp;\n    float d = max(p.y-.5,r);\n    moda(p.xz, 4.);\n    p.x -= 1.5;\n    d = max(d,-box(p+vec3(0.,1.3,0.),vec3(0.1,0.7,.5)));\n\n    p = pp;\n    p.z = abs(p.z)-1.3;\n    lustre = dot(p,normalize(sign(p)))-0.2;\n    g1 += .01/(.01+lustre*lustre);\n    d = min(d, lustre);\n    return d;\n}\n\nfloat ball (vec3 p, float speed)\n{\n    p.y -= -2.+bouncy(speed*10.)*1.5; \n    return length(p)-0.3;\n}\n\nfloat ba; vec2 rid;\nfloat SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1.));\n    p.xz *= rot(PI/4.);\n    vec3 pp = p;\n\n    vec2 ballper = vec2(9.);\n    vec2 ballid = floor((p.xz-ballper*.5)/ballper);\n    float sp = length(ballid)*.2;\n\n    p.xz = mod(p.xz-ballper*.5,ballper)-ballper*.5;\n    float switchanim = sign(sin(time(sp*.5)*TAU));\n    vec2 ballanim = vec2(max(cos(time(sp)*TAU+PI/2.),0.)*3.,\n                         max(sin(time(sp)*TAU),0.)*3.\n                        );\n    p.xz += ballanim * switchanim;\n    ba = ball(p,sp);\n\n    p = pp;\n    vec2 per = vec2(3.);\n    rid = floor((p.xz-per*.5)/per);\n    p.xz = mod(p.xz-per*.5,per)-per*.5;\n\n    return min(ba,room(p));\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.01,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nvec3 pal (float t, vec3 c)\n{return vec3(0.5)+vec3(.5)*cos(TAU*(c*t+vec3(0.,0.36,0.64)));}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    float dither = hash21(uv);\n\n    float zoom = (switchanim(0.1) <= 0.) ? 30. : 15.;\n\n    vec3 ro = vec3(uv*zoom,-20.),\n        rd = vec3(0.,-0.05,1.),\n        p = ro,\n        l = normalize(vec3(0.9,1.2,-3.)),\n        col = vec3(0.);\n\n    float d = 0.; bool hit = false;\n\n    for (float i=0.; i<ITER;i++)\n    {\n        d = SDF(p);\n        if (d<0.001)\n        {\n            hit = true;\n            break;\n        }\n        d *= 0.95+dither*0.1;\n        p += d*rd;\n    }\n\n    if (hit)\n    {\n        if (d == ba) col = vec3(0.);\n        else if (d == lustre) col = vec3(0.);\n        else col = vec3(1.);\n            \n        vec3 n = getnorm(p);\n        float lighting = max(dot(n,l),0.);\n        col *= lighting*pal(length(rid),vec3(0.1))*0.3;\n    }\n\n    col += g1*pal(length(rid),vec3(0.1))*0.3;\n    fragColor = vec4(sqrt(col),1.);\n}","name":"Image","description":"","type":"image"}]}