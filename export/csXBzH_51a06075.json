{"ver":"0.1","info":{"id":"csXBzH","date":"1688429339","viewed":110,"name":"B&W dithering test â€“ Psychedelix","username":"rplacd","description":"Port of a B&W conversion scheme, with probabilistic dithering (closer to gray = higher probability of dithering).\nTested with the Psychedelix shader by (TomoAlien).","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["2d","plasma","colorful","psychedelic","weird","acid","dutchcolorscheme","rainbows"],"hasliked":0,"parentid":"MdsXDM","parentname":"Psychedelix"},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define BW(fl) vec4(fl, fl, fl, 1.0f);\n\nvec4 grayscaleToBW(in vec4 rgba, in vec2 fragCoord) {\n    // Obtain the luma of the current rgba, using\n    // ITU Rec.601 weights:\n    float grayscale = 0.299*rgba.r + 0.587*rgba.g + 0.114*rgba.b;\n    \n    // Convert to grayscale using a simple midpoint rule:\n    float bOrW = (grayscale < 0.5f) ? 0.0f : 1.0f;\n    \n    // For grayscale values close/r to the midpoint (127), compensate\n    // for the terrible approximation by probabilistically\n    // dithering, with probability falling off rapidly from\n    // grayscale value = .5      |--> dither with probability 1/2, to\n    // grayscale value = 1 or 0  |--> dither with probability 0.\n    //\n    // Cram the two below calculations into a graphiing calculator\n    // to see how they work.\n    float probabilityParameter = 1.0f - abs(0.5f - grayscale)/0.5f;\n    float ditherProbability = asin(probabilityParameter)/1.570796;\n        // 1.570796 \\approx \\pi/2.\n    \n    // To sample with the above probability, obtain a random value\n    // between 0 < 1 from iChannel0, gray noise, assumed to be\n    // equally distributed;\n    float randomSample = texture(iChannel0, fragCoord/iResolution.xy).x;\n    \n    // For the left half of the screen, return the original grayscale colour;\n    // for the right half of the screen, compare our random sample in 0...1 against our\n    // probability (assuming random samply is equally distributed, \n    // effectively sampling with said probability distribution.\n    if(fragCoord.x < iResolution.x/2.0f) {\n        return BW(grayscale);\n    } else {    \n        if(randomSample < ditherProbability) {\n            return (bOrW == 1.0f) ? vec4(0.0f, 0.0f, 0.0f, 1.0f) : vec4(1.0f, 1.0f, 1.0f, 1.0f);\n        } else {\n            return vec4(bOrW, bOrW, bOrW, 1.0f);\n        }   \n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Original\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 pos = (uv.xy-0.5);\n\tvec2 cir = ((pos.xy*pos.xy+sin(uv.x*18.0+iTime)/25.0*sin(uv.y*7.0+iTime*1.5)/1.0)+uv.x*sin(iTime)/16.0+uv.y*sin(iTime*1.2)/16.0);\n\tfloat circles = (sqrt(abs(cir.x+cir.y*0.5)*25.0)*5.0);\n    \n\tvec4 rawColour = vec4(sin(circles*1.25+2.0),abs(sin(circles*1.0-1.0)-sin(circles)),abs(sin(circles)*1.0),1.0);\n    fragColor = grayscaleToBW(rawColour, fragCoord);\n}","name":"Image","description":"","type":"image"}]}