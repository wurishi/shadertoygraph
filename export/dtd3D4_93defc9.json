{"ver":"0.1","info":{"id":"dtd3D4","date":"1682475502","viewed":63,"name":"3d sin wave interference","username":"lolucky","description":"lighting based on normal found by slope (derivative).\ndrag mouse to change light direction","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","sinwave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 wave(vec2 p) {\n    // d/dx -cosbx/(ax) = (abxsinbx+acosbx)/(ax)^2\n    float a = .5;\n    float b = 2.;\n    float x1 = a * length(p) + 1.;\n    float x2 = length(p) * b - iTime;\n    return - normalize(p) * (b * x1 * sin(x2) + a * cos(x2))/x1/x1;\n}\n\nvec3 normal( vec2 p ) {\n    vec2 d = wave(p-vec2(5,0))+wave(p+vec2(5,0));\n    return normalize(cross(vec3(1, 0, d.x), vec3(0, 1, d.y)));\n}\nvec2 UV ( vec2 p ) {\n    return (2. * p - iResolution.xy) / iResolution.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(vec3(1., 1., .8) * dot(\n        normal(UV(fragCoord) * 10.), \n        normalize(vec3(UV(iMouse.xy), 1))),\n    1);\n}","name":"Image","description":"","type":"image"}]}