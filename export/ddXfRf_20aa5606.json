{"ver":"0.1","info":{"id":"ddXfRf","date":"1698061470","viewed":82,"name":"Konod's Over the moon","username":"Konod","description":"Testing the first and second parts of the shading tutorial \"Over the Moon\" by The Art of Code:\nhttps://youtu.be/LLZPnh_LK8c\nhttps://youtu.be/XaiYKkxvrFM","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a,b,t)\nfloat taperBox(vec2 p, float wb, float wt, float yb, float yt, float blur) {\n    float m = S(-blur, blur, p.y - yb);\n    m *= S(blur, -blur, p.y - yt);\n    \n    p.x = abs(p.x);\n    float w = mix(wb, wt, (p.y - yb)/(yt - yb));\n    m *= S(blur, -blur, p.x - w);\n    return m;\n}\n\nvec4 tree(vec2 uv, vec3 col, float blur) {\n    float tree = taperBox(uv, .03, .03, -.05, .25, blur);\n    tree += taperBox(uv, .2, .1, .25, .5, blur);\n    tree += taperBox(uv, .15, .05, .5, .75, blur);\n    tree += taperBox(uv, .1, .0, .75, 1., blur);\n    \n    float shadow = taperBox(uv-vec2(.2, 0), .1, .5, 0.15, 0.25, blur);\n    shadow += taperBox(uv+vec2(.25, 0), .1, .5, 0.45, 0.5, blur);\n    shadow += taperBox(uv-vec2(.25, 0), .1, .5, 0.7, 0.75, blur);\n\n\n    col -= shadow*0.75; \n    return vec4(col, tree);\n}\n\nfloat getHeight(float x) {\n    return sin(x*.442) + sin(x+0.3)*.2;\n}\n\nvec4 layer(vec2 uv, float blur) {\n    vec4 col = vec4(0);\n    float id = floor(uv.x);\n    float n = fract(sin(id*245.)*4352.)*2. - 1.;\n    float x = n*.3;\n    float y = getHeight(uv.x);\n    \n    float ground = S(blur, -blur, uv.y + y);\n    col += ground;\n    y = getHeight(id + .5+x);\n\n    \n    uv.x = fract(uv.x) - .5;\n    vec4 tree = tree((uv - vec2(x, -y))*vec2(1, 1.+n*.2), vec3(1), blur);\n    \n    col = mix(col, tree, tree.a);\n    col.a = max(ground, tree.a);\n    \n    col.rg *= vec2(0.8f, 0.85f);\n    \n    return col;\n}\n\nfloat hash21(vec2 p) {\n    p = fract(p*vec2(654.2, 315.9));\n    p += dot(p, p + 98.1);\n    return fract(p.x*p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec2 M = (iMouse.xy/iResolution.xy)*2. - 1.;\n\n    float blur = .005;\n    float t = iTime*.1; \n        \n    float twinkle = sin(10.*dot(length(sin(uv + t)), length(cos(uv*vec2(15.1, 9.8) - t*3.))))*.5 + .5;\n    float stars = pow(hash21(uv), 100.)*twinkle;\n    vec4 col = vec4(.5*stars);\n    \n    float moon = S(.0, -.01, 2.*length(uv - vec2(.4, .2)) - .2);\n    col *= 1. - moon;\n    moon *= S(-.02, .07, 2.*length(uv - vec2(.45, .25)) - .2);\n    col += moon;\n  \n    vec4 plane;\n    \n    for (float i=0.; i<1.; i+=.1) {\n        float scale = mix(30., 1., i);\n        blur = mix(.0, .005, i);\n        blur += mix(0.005, 0.2, max(1.f - i*2.f, 0.f));\n        \n        vec2 layerPos = uv*scale + vec2(5.*t + 200.*i, 2.*i - 0.2) - M;\n        plane = layer(layerPos, blur);\n        \n        plane.rgb *= (1. - i)*vec3(.9, .9, 1.);\n        col = mix(col, plane, plane.a);\n    }\n    \n    vec2 layerPos = uv + vec2(5.*t, 0.5) - M;\n    plane = layer(layerPos, .07);\n    col = mix(col, plane*.08, plane.a);\n        \n    float thickness = 1./iResolution.y;\n\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}