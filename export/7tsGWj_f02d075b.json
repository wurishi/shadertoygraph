{"ver":"0.1","info":{"id":"7tsGWj","date":"1623344423","viewed":204,"name":"Radiosity","username":"Shcherbakov","description":"Radiosity sample written on stream: https://youtu.be/OJJlYTAHKHo.","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["gi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec3 CAMERA_POSITION = vec3(0, 0, -4.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.x;\n    vec3 viewVec = normalize(vec3(uv, 1));\n\n    vec3 col = vec3(0, 0, 0);\n    float t = INF;\n    vec2 uvTex;\n    for (int i = 0; i < SCENE_ELEMS_COUNT; ++i) {\n        if (intersectQuad(CAMERA_POSITION, viewVec, scene[i], t, col, uvTex)) {\n            fragColor = texture(iChannel2, (vec2(i * (SPLIT_CNT + 2) + 1, 1) + uvTex * float(SPLIT_CNT)) / iResolution.xy);\n        }\n    }\n\n    //fragColor = vec4(col,1.0);\n    \n    //fragColor = texture(iChannel0, fragCoord / iResolution.xy).xxxx / float(iFrame + 1);\n    //fragColor = texture(iChannel1, fragCoord / iResolution.xy * 0.25);\n    //fragColor = texture(iChannel2, fragCoord / iResolution.xy * 0.125);\n    fragColor = pow(fragColor, vec4(1.0 / 2.2));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"struct Quad {\n    vec3 position;\n    vec3 dir1;\n    vec3 dir2;\n    vec3 color;\n    vec3 emission;\n};\n\n#define M_PI 3.14159265358979323846\nconst int SCENE_ELEMS_COUNT = 12;\nconst float INF = 1e10;\nconst int SPLIT_CNT = 6;\nconst int PATCHES_PER_QUAD = SPLIT_CNT * SPLIT_CNT;\nconst int PATCHES_COUNT = SCENE_ELEMS_COUNT * PATCHES_PER_QUAD;\n\nQuad scene[SCENE_ELEMS_COUNT] = Quad[SCENE_ELEMS_COUNT](\n    Quad(vec3(-1, -1, -1), vec3(0, 0, 2), vec3(0, 2, 0), vec3(0.9, 0, 0), vec3(0, 0, 0)),\n    Quad(vec3( 1, -1, -1), vec3(0, 2, 0), vec3(0, 0, 2), vec3(0, 0.9, 0), vec3(0, 0, 0)),\n    Quad(vec3( 1, -1,  1), vec3(0, 2, 0), vec3(-2, 0, 0), vec3(0.7, 0.7, 0.7), vec3(0, 0, 0)),\n    Quad(vec3( 1, -1, -1), vec3(0, 0, 2), vec3(-2, 0, 0), vec3(0.7, 0.7, 0.7), vec3(0, 0, 0)),\n    Quad(vec3( 1,  1,  1), vec3(0, 0, -2), vec3(-2, 0, 0), vec3(0.7, 0.7, 0.7), vec3(0, 0, 0)),\n    Quad(vec3(0.25, 0.9, 0.25), vec3(0, 0, -0.5), vec3(-0.5, 0, 0), vec3(0, 0, 0), vec3(3, 3, 2.5)),\n    Quad(vec3(-0.7, -0.9, 0.1), vec3(0, 0.6, 0), vec3(0, 0, 0.6), vec3(0, 0, 0.3), vec3(0, 0, 0)),\n    Quad(vec3(-0.1, -0.9, 0.1), vec3(0, 0, 0.6), vec3(0, 0.6, 0), vec3(0, 0, 0.3), vec3(0, 0, 0)),\n    Quad(vec3(-0.1, -0.9, 0.7), vec3(-0.6, 0, 0), vec3(0, 0.6, 0), vec3(0, 0, 0.3), vec3(0, 0, 0)),\n    Quad(vec3(-0.1, -0.9, 0.1), vec3(-0.6, 0, 0), vec3(0, 0, 0.6), vec3(0, 0, 0.3), vec3(0, 0, 0)),\n    Quad(vec3(-0.1, -0.3, 0.7), vec3(-0.6, 0, 0), vec3(0, 0, -0.6), vec3(0, 0, 0.3), vec3(0, 0, 0)),\n    Quad(vec3(-0.1, -0.9, 0.1), vec3(0, 0.6, 0), vec3(-0.6, 0, 0), vec3(0, 0, 0.3), vec3(0, 0, 0))\n);\n\nfloat lengthSq(vec3 v) {\n    return dot(v, v);\n}\n\nbool intersectQuad(vec3 pos, vec3 dir, Quad q, inout float dist, inout vec3 color, inout vec2 uv) {\n    vec3 normal = -normalize(cross(q.dir1, q.dir2));\n    float t = dot(normal, q.position - pos) / dot(normal, dir);\n    if (t <= 0.0) {\n        return false;\n    }\n    vec3 inter = pos + t * dir;\n    vec3 interShifted = inter - q.position;\n    float xSizeSq = lengthSq(q.dir1);\n    float ySizeSq = lengthSq(q.dir2);\n    float x = dot(interShifted, q.dir1);\n    float y = dot(interShifted, q.dir2);\n    bool intersected = x > -1e-6 && x <= xSizeSq && y > -1e-6 && y <= ySizeSq;\n    if (intersected && dist >= t) {\n        color = q.color + q.emission;\n        dist = t;\n        uv = vec2(x / xSizeSq, y / ySizeSq);\n    }\n    return intersected;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 idx = ivec2(fragCoord);\n    if (idx.x >= PATCHES_COUNT || idx.y >= PATCHES_COUNT) {\n        return;\n    }\n    if (idx.x / PATCHES_PER_QUAD == idx.y / PATCHES_PER_QUAD) {\n        fragColor = vec4(0.0);\n        return;\n    }\n    fragColor.x = texelFetch(iChannel0, idx, 0).x;\n    Quad q1 = scene[idx.x / PATCHES_PER_QUAD];\n    Quad q2 = scene[idx.y / PATCHES_PER_QUAD];\n    ivec2 patchIdx1 = ivec2(idx.x % SPLIT_CNT, idx.x / SPLIT_CNT % SPLIT_CNT);\n    ivec2 patchIdx2 = ivec2(idx.y % SPLIT_CNT, idx.y / SPLIT_CNT % SPLIT_CNT);\n    int noise1 = iFrame % (256 * 256);\n    int noise2 = (noise1 * 5235 + 3252351) % (256 * 256);\n    vec2 noiseSample1 = texelFetch(iChannel1, ivec2(noise1 / 256, noise1 % 256), 0).xy;\n    vec2 noiseSample2 = texelFetch(iChannel1, ivec2(noise2 / 256, noise2 % 256), 0).xy;\n    vec3 pos1 = q1.position\n        + q1.dir1 * (float(patchIdx1.x) + noiseSample1.x) / float(SPLIT_CNT)\n        + q1.dir2 * (float(patchIdx1.y) + noiseSample1.y) / float(SPLIT_CNT);\n    vec3 pos2 = q2.position\n        + q2.dir1 * (float(patchIdx2.x) + noiseSample2.x) / float(SPLIT_CNT)\n        + q2.dir2 * (float(patchIdx2.y) + noiseSample2.y) / float(SPLIT_CNT);\n    vec3 normal1 = -normalize(cross(q1.dir1, q1.dir2));\n    vec3 normal2 = -normalize(cross(q2.dir1, q2.dir2));\n    pos1 += normal1 * 0.01;\n    pos2 += normal2 * 0.01;\n    \n    vec3 dir = pos2 - pos1;\n    float t = INF;\n    vec3 col;\n    vec2 uv;\n    for (int i = 0; i < SCENE_ELEMS_COUNT; ++i) {\n        intersectQuad(pos1, normalize(dir), scene[i], t, col, uv);\n    }\n    if (t > length(dir)) {\n        float theta1 = max(0.0, dot(normal1, normalize(dir)));\n        float theta2 = max(0.0, dot(normal2, normalize(-dir)));\n        float square = length(q2.dir1) * length(q2.dir2) / float(PATCHES_PER_QUAD);\n        float FF = theta1 * theta2 / max(lengthSq(dir), 1e-8) / M_PI / square;\n        fragColor.x += FF;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 idx = ivec2(fragCoord);\n    if (idx.x >= PATCHES_COUNT || idx.y > 2) {\n        return;\n    }\n    float ffNormalize = 0.0;\n    for (int i = 0; i < PATCHES_COUNT; ++i) {\n        ffNormalize += texelFetch(iChannel0, ivec2(i, idx.x), 0).x / float(iFrame + 1);\n    }\n    ffNormalize = 1.0 / max(ffNormalize, 1.0) / float(iFrame + 1);\n    if (idx.y == 0) {\n        vec3 lighting = vec3(0);\n        for (int i = 0; i < PATCHES_COUNT; ++i) {\n            int quadIdx = i / PATCHES_PER_QUAD;\n            lighting += texelFetch(iChannel0, ivec2(i, idx.x), 0).x * scene[quadIdx].emission;\n        }\n        fragColor.rgb = lighting * scene[idx.x / PATCHES_PER_QUAD].color * ffNormalize\n            + scene[idx.x / PATCHES_PER_QUAD].emission;\n    } else {\n        vec3 lighting = vec3(0);\n        for (int i = 0; i < PATCHES_COUNT; ++i) {\n            int quadIdx = i / PATCHES_PER_QUAD;\n            lighting += texelFetch(iChannel0, ivec2(i, idx.x), 0).x\n                * texelFetch(iChannel1, ivec2(i, idx.y - 1), 0).rgb;\n        }\n        fragColor.rgb = lighting * scene[idx.x / PATCHES_PER_QUAD].color * ffNormalize\n            + scene[idx.x / PATCHES_PER_QUAD].emission;\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 idx = ivec2(fragCoord);\n    if (idx.x >= (SPLIT_CNT + 2) * SCENE_ELEMS_COUNT || idx.y >= (SPLIT_CNT + 2)) {\n        return;\n    }\n    int quadId = idx.x / (SPLIT_CNT + 2);\n    int horIdx = (idx.x % (SPLIT_CNT + 2));\n    horIdx = clamp(horIdx, 1, SPLIT_CNT) - 1;\n    idx.y = clamp(idx.y, 1, SPLIT_CNT) - 1;\n    int patchId = horIdx + idx.y * SPLIT_CNT;\n    fragColor = texelFetch(iChannel0, ivec2(quadId * PATCHES_PER_QUAD + patchId, 2), 0);\n}","name":"Buffer C","description":"","type":"buffer"}]}