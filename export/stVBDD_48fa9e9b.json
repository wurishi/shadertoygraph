{"ver":"0.1","info":{"id":"stVBDD","date":"1664554683","viewed":50,"name":"BRDF tests","username":"dmmon00","description":"Phong BRDF currently (energy conserving for specular)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["brdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON 0.00001\n#define PI 3.14159265\n\nfloat SDFSphere(vec3 rayPos, vec3 spherePos)\n{\n    return length(rayPos - spherePos) - 7.0;\n}\n\nvec3 CalcNormal(vec3 p)\n{\n    const float eps = 0.1;\n    const vec2 h = vec2(eps, 0.0);\n    return normalize(vec3(SDFSphere(p+h.xyy, vec3(0.0, 0.0, 12.0)) - SDFSphere(p-h.xyy, vec3(0.0, 0.0, 12.0)),\n                          SDFSphere(p+h.yxy, vec3(0.0, 0.0, 12.0)) - SDFSphere(p-h.yxy, vec3(0.0, 0.0, 12.0)),\n                          SDFSphere(p+h.yyx, vec3(0.0, 0.0, 12.0)) - SDFSphere(p-h.yyx, vec3(0.0, 0.0, 12.0))));\n}\n\n// Cook-Torrance BRDF\nfloat chiGGX(float v)\n{\n    if (v > 0.0) { return 1.0; } else { return 0.0; }\n}\n\nfloat GTerm(float NdotH, float NdotV, float NdotL, float VdotH, float roughness)\n{\n    float two_NdotH = 2.0 * NdotH;\n\tfloat g1 = (two_NdotH * NdotV) / VdotH;\n\tfloat g2 = (two_NdotH * NdotL) / VdotH;\n\tfloat G = min(1.0, min(g1, g2));\n    \n    return G;\n}\n\nvec3 FTerm(float cosT, vec3 F0)\n{\n    return F0 + (1.0-F0) * pow( 1.0 - cosT, 5.0);\n}\n\nvec3 ColorAtNormalIncidence(float ior, vec3 diffuse, float metallic)\n{\n    vec3 F0 = vec3(abs ((1.0 - ior) / (1.0 + ior)));\n    F0 = F0 * F0;\n    F0 = mix(F0, diffuse, metallic);\n    \n    return F0;\n}\n\nfloat DTerm(float NdotH, float roughness) \n{\n    float m_squared = roughness * roughness;\n\tfloat r1 = 1.0 / ((4.0 * m_squared * pow(NdotH, 4.0)) + EPSILON);\n\tfloat r2 = (NdotH * NdotH - 1.0) / ((m_squared * NdotH * NdotH) + EPSILON);\n    float D = r1 * exp(r2);\n    \n    return D;\n}\n\nvec3 BRDF(vec3 viewPos, vec3 lightPos, vec3 rayPos, vec3 normal, vec3 diffuse, vec3 specular)\n{\n    float ior = 0.1;\n    float metallic = 0.1;\n    float roughness = 0.5;\n\n    vec3 N = normal;\n    vec3 V = normalize(viewPos - rayPos);\n    vec3 L = normalize(lightPos - rayPos);\n    vec3 H = normalize(N + L);\n    float NdotH = max(EPSILON, dot(N, H));\n    float HdotV = max(EPSILON, dot(H, V));\n    float NdotV = max(EPSILON, dot(N, V));\n    float VdotH = max(EPSILON, dot(V, H));\n    float LdotN = max(EPSILON, dot(N, H));\n    float NdotL = max(EPSILON, dot(N, L));\n    \n    vec3 F0 = ColorAtNormalIncidence(ior, diffuse, metallic);\n    \n    float term_D = DTerm(NdotH, roughness);\n    vec3 term_F = FTerm(HdotV, F0);\n    float term_G = GTerm(NdotH, NdotV, NdotL, VdotH, roughness);\n    \n    vec3 brdf = (term_D * term_F * term_G) / (4.0 * dot(V, N) * dot(L, N)) + EPSILON;\n    \n    return brdf;\n}\n\nfloat Raymarch(vec3 rayPos, vec3 rayDir)\n{\n    return SDFSphere(rayPos, vec3(0.0, 0.0, 12.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = (uv * 2.0) - 1.0;\n    \n    vec3 diffuse = vec3(1.0);\n    vec3 specular = vec3(1.0);\n    \n    vec3 camPos = vec3(0.0, 0.0, -1.5 * sin(1.0));\n    vec3 rayPos = vec3(camPos);\n    vec3 rayDir = normalize(vec3(uv, 1.0));\n    float dist = 0.0;\n    \n    for (int i = 0; i < 128; ++i)\n    {\n        rayPos += rayDir * 0.15;\n        dist = Raymarch(rayPos, rayDir);\n        if (dist < EPSILON) { break; }\n    }\n    \n    vec3 lambert = vec3(0.0);\n    if (dist < EPSILON) \n    {\n        vec3 lightPos = vec3(10.0, 12.0, 0.0);\n        vec3 normal = CalcNormal(rayPos);\n        lambert = BRDF(camPos, lightPos, rayPos, normal, diffuse, specular);\n    }\n    \n    fragColor = vec4(lambert, 1.0);\n}","name":"Image","description":"","type":"image"}]}