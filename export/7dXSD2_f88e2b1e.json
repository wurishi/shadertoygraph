{"ver":"0.1","info":{"id":"7dXSD2","date":"1619334794","viewed":60,"name":"Fractured Juliaset","username":"mherreshoff","description":"A fractured Julia set (flips the sign on half the plane every iteration to create the jagged look).","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["julia","set","fractured"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.283185\n\n// Official HSV to RGB conversion, from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage(out vec4 O, in vec2 U) {\n    vec2 uv = U/iResolution.xy;\n    vec4 t = texture(iChannel0, uv);\n    //O = vec4(hsv2rgb(vec3(t.z, 1.,1.)), 0.); return;\n    vec2 z = texture(iChannel0, uv).xy;\n    float m = length(z);\n    float h = .4+.3*smoothstep(0., 1., m);\n    float s = smoothstep(.2, .9, m);\n    float v = clamp(1.-m, 0., 1.);\n    O = vec4(hsv2rgb(vec3(h,s,v)), 0.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define TAU 6.283185\n\n// Official HSV to RGB conversion, from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage(out vec4 O, in vec2 U) {\n    if (iFrame < 10) {\n        O = vec4(0,0,0,iTime);\n        return;\n    }\n    vec2 uv = U/iResolution.xy;\n    vec4 prev = texture(iChannel0, uv);\n    float time = prev.z;\n    float oldITime = prev.w;\n    float total = 0.;\n    float total2 = 0.;\n\n    #define N 2\n    #define n (N*N)\n    for (int i = -N; i <= N; i++) {\n        for (int j = -N; j <= N; j++) {\n            float x = length(texture(iChannel0, .5 + .1*vec2(i, j)/float(N)).xy);\n            x = clamp(x, 0., 100.);\n            total += x;\n            total2 += x*x;\n        }\n    }\n    float mean = total/float(n);\n    float variance = total2/float(n) - mean*mean;\n    float speed = smoothstep(0., 1., 1.-variance)*3.+.3;\n\n    vec2 z = 1.5*(2.*U - iResolution.xy)/iResolution.y;\n    \n    vec2 c = vec2(sin(time*.5), cos(time*.5))*.4;\n    for (int i = 0; i < 10; i++) {\n        float theta = fract(.01*time+atan(z.y, z.x)/TAU);\n        float a = sign(fract(theta+.25)-.5); // Whether to flip this iteration.t\n        z = mat2(z, -z.y, z.x)*z*a;\n        z += c;\n        if (length(z) > 100.) break;\n    }\n    O = vec4(z, time+speed*(oldITime-iTime), iTime);\n}","name":"Buffer A","description":"","type":"buffer"}]}