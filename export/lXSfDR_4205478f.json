{"ver":"0.1","info":{"id":"lXSfDR","date":"1729322140","viewed":31,"name":"20241019_1615_shuffle","username":"tono","description":"shuffle","likes":1,"published":1,"flags":4,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 球の距離関数\nfloat sphereSDF(vec3 p, float radius) {\n    return length(p) - radius;\n}\n\n// 立方体の距離関数\nfloat boxSDF(vec3 p, vec3 size) {\n    vec3 d = abs(p) - size;\n    float outsideDistance = length(max(d, 0.0));\n    float insideDistance = min(max(d.x, max(d.y, d.z)), 0.0);\n    return outsideDistance + insideDistance;\n}\n\n// スムーズな最小値を計算する関数\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat sceneSDF(vec3 p) {\n    float dSphere = sphereSDF(p, 1.2);\n                                                        //tanの動きをさせる\n    float dBox = boxSDF(p - vec3(tan(iTime), 0.0, 0.0), vec3(1.0));\n    \n    //もう一個箱を追加\n    float dBox2 = boxSDF(p - vec3(0.0, tan(iTime+1.5), 0.0), vec3(1.0));\n\n    // 球と立方体を滑らかに合体\n    return smin( smin(dSphere, dBox, 0.5),dBox2 , 0.5 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // カメラの設定\n    vec2 p = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // カメラの設定\n    vec3 target = vec3(0.0, 0.0, 0.0);      // カメラが注目するターゲット位置\n    vec3 cp = vec3(5.0, -5.0, -5.0);       // カメラの位置\n    vec3 cd = normalize(target - cp);       // カメラの視線方向\n    vec3 cs = normalize(cross(cd, vec3(0.0, 1.0, 0.0))); // 右方向\n    vec3 cu = normalize(cross(cd, cs));     // 上方向\n    \n    //最初は真っ黒にする\n    vec3 col = vec3(0.0);\n    \n    float fov = 1.5; // 視野角\n    vec3 rd = normalize(cs * p.x + cu * p.y + cd * fov); // レイの方向\n\n    // レイマーチングのループ\n    float t = 0.0;\n    int maxSteps = 100;\n    for (int i = 0; i < maxSteps; i++) {\n        vec3 p = cp + t * rd;\n        float d = sceneSDF(p);\n        if (d < 0.001) break;\n        t += d;\n        if (t > 20.0) break;\n    }\n\n    // ヒットしたかどうかで色を決定\n    vec3 color = t < 20.0 ? vec3(0.0, 0.0, 1.0) : vec3(0.0);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}