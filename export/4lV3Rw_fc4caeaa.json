{"ver":"0.1","info":{"id":"4lV3Rw","date":"1473856490","viewed":1335,"name":"top-down paint","username":"FabriceNeyret2","description":"The idea is to paint top to bottom, preserving the coarser histograms.\n- Top: added details for each lower scale.\n- Bottom: huge blur, to verify.\n\n( NB: we should verify we don't create negative colors. > 1 may be allowed if lighting is included ).","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["texture","paint","wavelets"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// bufA: create the paint\n// buf B+C: blur for verification\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    U /= iResolution.xy;\n    O =  U.y > .5 ? texture(iChannel1, U) : texture(iChannel0, U);\n  //O =  texture(U.y > .5 ? iChannel1 : iChannel0, U);  // doesn't compile on some systems\n\n    U = mod(U,vec2(.2,.5)); // draw black frame\n    if ( min(U.x,U.y) < .004) O-=O;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// top-to bottom texture paint (details preserving top appearance)\n\n#define noise(U) ( (texture(iChannel0,U) - moy) / moy ) // ~ centered unitary noise.\n\nvec4 Ccontrast1 = vec4(1,-.5,-.5,0), // color contrast created at each scale\n     Ccontrast2 = vec4(-.5,1,-.5,0),\n     Ccontrast3 = vec4(-.5,-.5,1,0),\n     Ccontrast4 = vec4(1,-.5,-.5,0);\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    O = vec4(1,.7,.8,1);\n    \n    vec4 moy = texture(iChannel0,vec2(.5),99.);\n    float t = iTime, W=iResolution.x;\n\n    if (mod(t,4.)<2.)  Ccontrast4 = Ccontrast3 = Ccontrast2 = Ccontrast1; // 2 sets of colors\n    if (mod(t,2.)<1.)                                                     // 2 sets of weights\n              Ccontrast1/=2., Ccontrast2/=4., Ccontrast3/=8., Ccontrast4/=16.;   \n        else  Ccontrast1/=4., Ccontrast2/=4., Ccontrast3/=4., Ccontrast4/=4.;\n\n    float x = U.x/W;\n    U.x = mod(U.x, W/5.);  // comment if you prefer peeling rather than copies\n    U /= 400.;\n    if (x > .2) O += Ccontrast1 * noise(U   );\n    if (x > .4) O += Ccontrast2 * noise(U*2.);\n    if (x > .6) O += Ccontrast3 * noise(U*4.);\n    if (x > .8) O += Ccontrast4 * noise(U*8.);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// blur - x direction\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    U /= R;\n    \n    O -= O;\n    for (float i = -128.; i<128.; i++) \n        O += texture(iChannel0, fract( U + vec2(i,0)/R ) );\n    \n    O /= 256.;\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// blur - y direction\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    U /= R;\n    \n    O -= O;\n    for (float j = -128.; j<128.; j++) \n        O += texture(iChannel0, fract( U + vec2(0,j)/R ) );\n    \n    O /= 256.;\n}","name":"Buf C","description":"","type":"buffer"}]}