{"ver":"0.1","info":{"id":"3tBGW1","date":"1559270095","viewed":302,"name":"Random sample blur (click)","username":"badjano","description":"Using a fast random function on uv for every coordinate of the blur kernel. The results with 3x3 kernel ( 1 iteration ) give a noisy result.\nmouse click: Above left is the sampling without randomness, top right is the noise intensity.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["noise","blur","grain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0,fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI2 6.2831853072\n\nfloat rand(vec3 seed) {\n    return fract(sin(dot(seed, vec3(78.233, 12.9898, 173.864))) * 437585.453123) * 2. - 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // play around with these:\n\tconst int iterations = 0;\n    float div = float(iterations);\n    float a = 100.0;\n    float b = 0.1;\n    float c = 0.1;\n    float d = 0.1 * iMouse.x / iResolution.x;\n    \n    float perc = 1.0/pow(float(iterations*2+1),2.);\n    vec4 col = vec4(0);\n    for (int x=-iterations; x<=iterations; x++){\n        for (int y=-iterations; y<=iterations; y++){\n            vec2 noise = vec2(\n                rand(vec3(uv*a + vec2(x,y)*b,cos(fract(iTime*.76)*PI2)) * c),\n                rand(vec3(uv*a - vec2(x,y)*b,sin(fract(iTime*1.13)*PI2)) * c)\n            );\n            float a = noise.y * PI2;\n            noise = vec2(cos(a), sin(a)) * noise.x;\n            noise *= d;\n            if (iMouse.w > 0.5 && iMouse.y < fragCoord.y){\n\t            if (iMouse.x < fragCoord.x){\n                \tcol += vec4(noise.r + noise.g) * perc / (d);\n                } else {\n                \tcol += texture(iChannel0,uv + vec2(x,y) * d * 0.5 / div) * perc;\n                }\n            } else {\n                col += texture(iChannel0,uv + noise) * perc;\n            }\n        }\n    }\n\tfloat updateRate = pow(1.-9.9*d,1.1);\n    vec4 old = texture(iChannel1,uv);\n    \n    if (iMouse.w > 0.5 && iMouse.y < fragCoord.y){\n        updateRate = 1.;\n    }\n    fragColor = col * updateRate + old * (1.-updateRate);\n}","name":"Buffer A","description":"","type":"buffer"}]}