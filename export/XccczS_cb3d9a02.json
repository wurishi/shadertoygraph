{"ver":"0.1","info":{"id":"XccczS","date":"1730818626","viewed":39,"name":"Crossbody","username":"sandyklark","description":"A waving cross signed distance experiment","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["signeddistance","imouse","itime"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdLine(vec2 p, vec2 a, vec2 b)\n{\n    vec2 ab = b - a;\n    float projection = clamp(dot(p - a, ab) / dot(ab, ab), 0.0, 1.0);\n    return length(p - (a + ab * projection)); \n}\n\n\nfloat sdCross(vec2 p, vec2 a, vec2 b, vec2 c, vec2 d)\n{\n    // Calculate distances to each line segment\n    float d1 = sdLine(p, a, b);\n    //float d2 = sdLine(p, b, c);\n    float d3 = sdLine(p, c, d);\n    // float d4 = sdLine(p, d, a);\n\n    // Return the minimum distance\n    return min(d1, d3);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sin1 = sin(iTime * 1.0);\n    float sin2 = cos(iTime * 1.2);\n\n    vec3 black = vec3(0);\n    vec3 magenta = vec3(1, 0.0, 1);\n    vec3 blue = vec3(0.92, 0.92, 1.0);\n    vec3 white = vec3(abs(sin(iTime * (sin1 * 100.0))));\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    float halfWidth = iResolution.x / 2.0;\n    float thirdWidth = iResolution.x / 5.0;\n    float halfHeight = iResolution.y / 2.0;\n    float thirdHeight = iResolution.y / 3.0;\n    float MOVE = 6.0;\n\n    /*\n    float cross = -6.0 + (6.0 * sin1) + sdCross(\n        fragCoord.xy, \n        vec2(thirdWidth + thirdWidth, halfHeight + sin1 * MOVE),\n        vec2(thirdWidth + thirdWidth * 2.0, halfHeight + sin2 * MOVE),\n        vec2(halfWidth + sin1 * MOVE, thirdHeight),\n        vec2(halfWidth + sin2 * MOVE, thirdHeight * 2.5)\n    );\n    */\n    \n    float crossW = 40.0;\n    float crossT = 80.0;\n    float crossB = 40.0;\n    \n    float cross = -6.0 + (6.0 * sin1) + sdCross(\n        fragCoord.xy, \n        vec2(iMouse.x - crossW, iMouse.y + sin1 * MOVE),\n        vec2(iMouse.x + crossW, iMouse.y + sin2 * MOVE),\n        vec2(iMouse.x + sin1 * MOVE, iMouse.y - crossB),\n        vec2(iMouse.x + sin2 * MOVE, iMouse.y + crossT)\n    );\n    \n    float crossWave = -0.2 + sin(cross * 0.5 + iTime * 50.0);\n    \n    vec3 lineCol = mix(magenta, blue, (1.0 + crossWave) * cross * abs(0.2 + sin1 * 0.4) * 0.03);\n    \n    // shadow\n    col = mix(black, lineCol, (1.0 + crossWave) * cross * abs(0.2 + sin1 * 0.2) * 0.06); \n    // cross center\n    col = mix(white, col, clamp(cross / 2.0, 0.0, 1.0));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}