{"ver":"0.1","info":{"id":"ltjfDw","date":"1516113596","viewed":226,"name":"Advecting random velocity II","username":"Ultraviolet","description":"Follow-up on [url=https://www.shadertoy.com/view/ll2BDw]this[/url] entry, with 3 channels accounted for.","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["texture","advection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PERIOD\t2.\n\n\nfloat weight(float t)\n{\n    t = mod(t, 1.);\n    return 7.5*t*t*(1.-t)*(1.-t);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 bufA = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec4 bufB = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    vec4 bufC = texelFetch(iChannel2, ivec2(fragCoord), 0);\n    \n    float t = iTime/PERIOD;\n    float valR = weight(t)*bufA.x + weight(t+.25)*bufA.y + weight(t+.5)*bufA.z + weight(t+.75)*bufA.w;\n    float valG = weight(t)*bufB.x + weight(t+.25)*bufB.y + weight(t+.5)*bufB.z + weight(t+.75)*bufB.w;\n    float valB = weight(t)*bufC.x + weight(t+.25)*bufC.y + weight(t+.5)*bufC.z + weight(t+.75)*bufC.w;\n        \n    fragColor = vec4(valR, valG, valB, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PERIOD\t2.\n#define EPSILON\t0.05\n#define HASHING 0.\n\n// from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * HASHSCALE3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nvec3 hash(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0*fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n// from https://www.shadertoy.com/view/Xsl3Dl\nfloat noise( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\n\n\n#define SPEED_EV\t0.5\n#define SPEED_PH\t0.0\n#define SPEED_AM\t(.5+iMouse.y/iResolution.y)\n\nvec2 speed(vec2 uv)\n{\n    float ratio = iResolution.y/iResolution.x;\n    uv = uv*10.*vec2(1., ratio);\n    return SPEED_AM*vec2(noise(vec3(uv, iTime*SPEED_EV + SPEED_PH)), noise(vec3(uv + vec2(12.10135, 1354.2435), iTime*SPEED_EV + SPEED_PH)));\n}\n\n\n#define h 2.\nvec2 RK4(vec2 p){\n    vec2 r = iResolution.xy;\n    vec2 k1 = speed(p/r);\n    \n    //return h*k1;\n    \n    vec2 k2 = speed((p-0.5*h*k1)/r);\n    vec2 k3 = speed((p-0.5*h*k2)/r);\n    vec2 k4 = speed((p-h*k3)/r);\n    return h/3.*(0.5*k1+k2+k3+0.5*k4);\n}\n\n\nvoid mainImage( out vec4 O, in vec2 C )\n{\n\tvec2 r  = iResolution.xy;\n\tvec2 uv = C.xy / r.xy;\n    \n    vec4 buf = texture(iChannel0,(C-RK4(C))/r);\n    \n    float val0, val1, val2, val3;\n    \n    if(iTime < EPSILON)\n    {\n        val0 = texture(iChannel1,C/r).x;\n        val1 = val0;\n        val2 = val0;\n        val3 = val0;\n    }\n    else\n    {\n        val0 = buf.x;\n        val1 = buf.y;\n        val2 = buf.z;\n        val3 = buf.w;\n    }\n    \n    float t = iTime/PERIOD;\n    if(mod(t, 1.0) < EPSILON)\n    {\n        val0 = texture(iChannel1,C/r + hash21(t)*HASHING).x;\n    }\n    \n    if(mod(t+.25, 1.0) < EPSILON)\n    {\n        val1 = texture(iChannel1,C/r + hash21(t)*HASHING).x;\n    }\n    \n    if(mod(t+.5, 1.0) < EPSILON)\n    {\n        val2 = texture(iChannel1,C/r + hash21(t)*HASHING).x;\n    }\n    \n    if(mod(t+.75, 1.0) < EPSILON)\n    {\n        val3 = texture(iChannel1,C/r + hash21(t)*HASHING).x;\n    }\n    \n    \n    \n    O = vec4(val0, val1, val2, val3);\n}\n\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define PERIOD\t2.\n#define EPSILON\t0.05\n#define HASHING 0.\n\n// from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * HASHSCALE3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nvec3 hash(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0*fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n// from https://www.shadertoy.com/view/Xsl3Dl\nfloat noise( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\n\n\n#define SPEED_EV\t0.5\n#define SPEED_PH\t(0.33*iMouse.x/iResolution.x)\n#define SPEED_AM\t(.5+iMouse.y/iResolution.y)\n\nvec2 speed(vec2 uv)\n{\n    float ratio = iResolution.y/iResolution.x;\n    uv = uv*10.*vec2(1., ratio);\n    return SPEED_AM*vec2(noise(vec3(uv, iTime*SPEED_EV + SPEED_PH)), noise(vec3(uv + vec2(12.10135, 1354.2435), iTime*SPEED_EV + SPEED_PH)));\n}\n\n\n#define h 2.\nvec2 RK4(vec2 p){\n    vec2 r = iResolution.xy;\n    vec2 k1 = speed(p/r);\n    \n    //return h*k1;\n    \n    vec2 k2 = speed((p-0.5*h*k1)/r);\n    vec2 k3 = speed((p-0.5*h*k2)/r);\n    vec2 k4 = speed((p-h*k3)/r);\n    return h/3.*(0.5*k1+k2+k3+0.5*k4);\n}\n\n\nvoid mainImage( out vec4 O, in vec2 C )\n{\n\tvec2 r  = iResolution.xy;\n\tvec2 uv = C.xy / r.xy;\n    \n    vec4 buf = texture(iChannel0,(C-RK4(C))/r);\n    \n    float val0, val1, val2, val3;\n    \n    if(iTime < EPSILON)\n    {\n        val0 = texture(iChannel1,C/r).y;\n        val1 = val0;\n        val2 = val0;\n        val3 = val0;\n    }\n    else\n    {\n        val0 = buf.x;\n        val1 = buf.y;\n        val2 = buf.z;\n        val3 = buf.w;\n    }\n    \n    float t = iTime/PERIOD;\n    if(mod(t, 1.0) < EPSILON)\n    {\n        val0 = texture(iChannel1,C/r + hash21(t)*HASHING).y;\n    }\n    \n    if(mod(t+.25, 1.0) < EPSILON)\n    {\n        val1 = texture(iChannel1,C/r + hash21(t)*HASHING).y;\n    }\n    \n    if(mod(t+.5, 1.0) < EPSILON)\n    {\n        val2 = texture(iChannel1,C/r + hash21(t)*HASHING).y;\n    }\n    \n    if(mod(t+.75, 1.0) < EPSILON)\n    {\n        val3 = texture(iChannel1,C/r + hash21(t)*HASHING).y;\n    }\n    \n    \n    \n    O = vec4(val0, val1, val2, val3);\n}\n\n","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define PERIOD\t2.\n#define EPSILON\t0.05\n#define HASHING 0.\n\n// from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * HASHSCALE3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nvec3 hash(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0*fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n// from https://www.shadertoy.com/view/Xsl3Dl\nfloat noise( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\n\n\n#define SPEED_EV\t0.5\n#define SPEED_PH\t(0.66*iMouse.x/iResolution.x)\n#define SPEED_AM\t(.5+iMouse.y/iResolution.y)\n\nvec2 speed(vec2 uv)\n{\n    float ratio = iResolution.y/iResolution.x;\n    uv = uv*10.*vec2(1., ratio);\n    return SPEED_AM*vec2(noise(vec3(uv, iTime*SPEED_EV + SPEED_PH)), noise(vec3(uv + vec2(12.10135, 1354.2435), iTime*SPEED_EV + SPEED_PH)));\n}\n\n\n#define h 2.\nvec2 RK4(vec2 p){\n    vec2 r = iResolution.xy;\n    vec2 k1 = speed(p/r);\n    \n    //return h*k1;\n    \n    vec2 k2 = speed((p-0.5*h*k1)/r);\n    vec2 k3 = speed((p-0.5*h*k2)/r);\n    vec2 k4 = speed((p-h*k3)/r);\n    return h/3.*(0.5*k1+k2+k3+0.5*k4);\n}\n\n\nvoid mainImage( out vec4 O, in vec2 C )\n{\n\tvec2 r  = iResolution.xy;\n\tvec2 uv = C.xy / r.xy;\n    \n    vec4 buf = texture(iChannel0,(C-RK4(C))/r);\n    \n    float val0, val1, val2, val3;\n    \n    if(iTime < EPSILON)\n    {\n        val0 = texture(iChannel1,C/r).z;\n        val1 = val0;\n        val2 = val0;\n        val3 = val0;\n    }\n    else\n    {\n        val0 = buf.x;\n        val1 = buf.y;\n        val2 = buf.z;\n        val3 = buf.w;\n    }\n    \n    float t = iTime/PERIOD;\n    if(mod(t, 1.0) < EPSILON)\n    {\n        val0 = texture(iChannel1,C/r + hash21(t)*HASHING).z;\n    }\n    \n    if(mod(t+.25, 1.0) < EPSILON)\n    {\n        val1 = texture(iChannel1,C/r + hash21(t)*HASHING).z;\n    }\n    \n    if(mod(t+.5, 1.0) < EPSILON)\n    {\n        val2 = texture(iChannel1,C/r + hash21(t)*HASHING).z;\n    }\n    \n    if(mod(t+.75, 1.0) < EPSILON)\n    {\n        val3 = texture(iChannel1,C/r + hash21(t)*HASHING).z;\n    }\n    \n    \n    \n    \n    O = vec4(val0, val1, val2, val3);\n}\n\n","name":"Buf C","description":"","type":"buffer"}]}