{"ver":"0.1","info":{"id":"7lGSRh","date":"1640142258","viewed":96,"name":"box-shadow for rounded rect","username":"likolu","description":"draw box-shadow by SDF.\nrefer1: https://www.shadertoy.com/view/4llXD7\nrefe2r: https://www.shadertoy.com/view/7lBXWm","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shadow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// Signed distance to a 2D rounded box. Tutorials explaining\n// how it works: \n//\n// https://www.youtube.com/watch?v=62-pRVZuS5c\n// https://www.youtube.com/watch?v=s5NGeUV2EyU\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n// and iquilezles.org/articles/distfunctions2d\n\n\n// b.x = width\n// b.y = height\n// r.x = roundness top-right  \n// r.y = roundness boottom-right\n// r.z = roundness top-left\n// r.w = roundness bottom-left\nfloat sdRoundBox( in vec2 p, in vec2 b, in vec4 r ) \n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 shift = vec2(0.4, 0.2);\n    float blur  = 0.2; // blur radius\n    float spreadPixel = 40.0; //  spread radius\n    float spread = spreadPixel / iResolution.x; \n    // center of fragCoord;\n\tvec2 po = (2.0*(fragCoord)-iResolution.xy)/iResolution.y;\n    vec2 p = (2.0*(fragCoord)-iResolution.xy)/iResolution.y + shift;\n    \n    if(iMouse.z > 0.001){\n      blur = max(iMouse.x / iResolution.x, 0.0);\n    }\n    \n    vec2 sio = vec2(0.6,0.3);\n\n    // size of rect\n\tvec2 si = sio + vec2(spread);\n    // radius of rect\n    vec4 ra = vec4(0.0,0.4,0.0,0.1);\n    // max radius\n    ra = min(ra, min(si.x,si.y));\n    vec4 rao = min(ra, min(sio.x,sio.y));\n\n    // calc SDF of current position\n\tfloat d = sdRoundBox( p, si, ra );\n    float ddo = sdRoundBox( po, sio, rao );\n\n    vec3 col = vec3(1);\n    // use smoothstep to calc color of current pos\n    col = vec3(1,0.2,0.1) * smoothstep(-blur, blur, -d);\n    \n    // blank inner\n    if(d <= 0.0){\n      col = vec3(1,0.2,0.1) * 0.5;\n    } \n\n\tfragColor = vec4(col,1.0);\n    if( ddo <0.0){\n      fragColor = vec4(1.0);\n    }\n    \n    if(iResolution.x > 1230.0){\n      fragColor = vec4(0.5);\n    }\n    \n}","name":"Image","description":"","type":"image"}]}