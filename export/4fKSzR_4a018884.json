{"ver":"0.1","info":{"id":"4fKSzR","date":"1714749731","viewed":27,"name":"Simple Sphere And Plane","username":"miguel000","description":"Simple sphere","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float cFovy = 90.0;\n\nfloat planeIntersectDistance( vec3 ray_origin, vec3 ray_dir, float plane_height )\n{\n    if( ray_dir.y >= 0.0 ){ return -1.0f; }\n    \n    float y = ray_origin.y - plane_height;\n    \n    float xz = length( ray_dir.xz / ray_dir.y * y );\n    \n    return sqrt( xz * xz - y * y );\n}\n\nfloat sphereIntersectDistance( in vec3 ray_origin, in vec3 ray_dir, in vec3 sph_pos, in float sph_radius )\n{\n    vec3 vec_c = sph_pos - ray_origin;\n    float b = dot( vec_c, ray_dir );\n    \n    float sqr_a = dot( vec_c, vec_c ) - b * b;\n    \n    float d = sph_radius * sph_radius - sqr_a;\n    if( d < 0.0 ){ return -1.0; }\n    \n    return b - sqrt( d );\n}\n\nvec3 sphereNormal( in vec3 sph_pos, in vec3 pos )\n{\n    return normalize( pos - sph_pos );\n}\n\nfloat sphereShadow( in vec3 light_dir, in vec3 sph_pos, in float sph_radius, in vec3 pos )\n{\n    vec3 ray_origin = pos;\n    \n    vec3 vec_c = sph_pos - ray_origin;\n    float b = dot( vec_c, -light_dir );\n    \n    float sqr_a = dot( vec_c, vec_c ) - b * b;\n    \n    float d = sph_radius - sqrt( sqr_a );\n    if( d < 0.0 ){ return 1.0; }\n    \n    return 1.0 - clamp( sqrt( d ) * 3., 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screen_pos = (2.0*fragCoord.xy-iResolution.xy) / iResolution.y;\n    \n    vec3 ray_dir = normalize( vec3( screen_pos, -tan( radians( cFovy ) * 0.5 ) ) );\n    vec3 ray_origin = vec3( 0.0, 0.0, 3. );\n    \n    vec2 mouse = iMouse.xy /iResolution.xy * 2.0 - 1.0;\n    if( iMouse.z <= 0. ){ mouse = vec2( 0.0 ); }\n    \n    float plane_height = -1.0;\n    \n    vec3 sph_pos = vec3( mouse * 5., 0.0 );\n    sph_pos.y = max( 0.0, sph_pos.y );\n    float sph_radius = 1.0;\n    \n    // sun_light\n    vec3 sun_light_dir = normalize( vec3( 0.5, 0.5, 0.5 ) );\n    vec3 sun_light_color = vec3( 1.0, 1.0, 1.0 );\n    float sun_light_intens = 0.7;\n    \n    // ambient_light\n    vec3 env_light_top = vec3( 0.0, 0.0, 1.0 ) * 2.;\n    vec3 env_light_bottom = vec3( 1.0 );\n    float env_light_intens = 0.2;\n    \n    \n    // G-Buffer\n    vec3 albedo = vec3( 0.0 );\n    vec3 normal = vec3( 0.0 );\n    float shadow = 1.0;\n    \n    float intersect_dist = -1.;\n    float min_dist = 9999999.0;\n    \n    ///////////////////\n    // calc shape\n    ///////////////////\n    float plane_intersect_dist = planeIntersectDistance( ray_origin, ray_dir, plane_height );\n    if( 0.0 < plane_intersect_dist )\n    {\n        intersect_dist = plane_intersect_dist;\n        min_dist = plane_intersect_dist;\n        \n        albedo = vec3( 1.0 );\n        normal = vec3( 0.0, 1.0, 0.0 );\n        \n        vec3 pos = ray_origin + plane_intersect_dist * ray_dir;\n        \n        shadow = sphereShadow( sun_light_dir, sph_pos, sph_radius, pos );\n    }\n    \n    \n    float sphere_intersect_dist = sphereIntersectDistance( ray_origin, ray_dir, sph_pos, sph_radius );\n    if( 0.0 < sphere_intersect_dist && min_dist > sphere_intersect_dist )\n    {\n        intersect_dist = sphere_intersect_dist;\n        min_dist = sphere_intersect_dist;\n        \n        albedo = vec3( 1.0 );\n        \n        vec3 pos = ray_origin + sphere_intersect_dist * ray_dir;\n        normal = sphereNormal( sph_pos, pos );\n        shadow = 1.0;\n    }\n    \n    ///////////////////\n    // calc lighting\n    ///////////////////\n    vec3 result = vec3( 0.0 );\n    if( intersect_dist > 0. )\n    {\n        vec3 sun_light_result = sun_light_color * max( 0.0, dot( normal, sun_light_dir ) ) * sun_light_intens;\n\n        vec3 env_light_result = mix( env_light_bottom, env_light_top, normal.y * 0.5 + 0.5 ) * env_light_intens;\n\n        result = albedo * ( sun_light_result * shadow + env_light_result );\n    }\n    else\n    {\n        result = vec3( 0.0, 0.0, 1.0 );\n    }\n    \n    result = pow( result, vec3(0.4545) );\n    \n    fragColor = vec4(result, 1.0);\n}","name":"Image","description":"","type":"image"}]}