{"ver":"0.1","info":{"id":"cd2XR3","date":"1670635446","viewed":183,"name":"Limited Asymmetric Blocks SDF","username":"jt","description":"Variant of [url=https://www.shadertoy.com/view/ftcfWf]Asymmetric Blocks SDF[/url] with transition of irregular interior to regular exterior\nintended for construction of walls of irregular stones containing windows and doors without having to cut any stone","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["blocks","architecture","construction","building","layout","limited","asymmetric"],"hasliked":0,"parentid":"ftcfWf","parentname":"Asymmetric Blocks SDF"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/cd2XR3 Limited Asymmetric Blocks SDF by jt (2022)\n// based on https://www.shadertoy.com/view/ftcfWf Asymmetric Blocks SDF\n\n// tags: blocks, architecture, construction, building, layout, limited, asymmetric\n\n// Variant of https://www.shadertoy.com/view/ftcfWf Asymmetric Blocks SDF\n// with transition of irregular interior to regular exterior.\n// Intended for construction of walls of irregular stones\n// which contain windows and doors without having to cut any stone.\n\n// The MIT License\n// Copyright (c) 2022 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Algorithm idea from https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane\n// (re-implemented from scratch by jt).\n\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nfloat hash(uint x)\n{\n    return float(triple32(x)) / float(0xffffffffU);\n}\n\nfloat hash(ivec2 v, uvec2 n, uvec2 m) // both dimension values same (faster)\n{\n    if(any(greaterThan(uvec2(v) + n, 2u * n))) return 0.5; // transition to regular tiling outside\n    if(all(lessThan(uvec2(v) + m, 2u * m + 1u))) return 0.5; // transition to regular tiling outside\n    uint i = (uint(v.x) + triple32(uint(v.y)) + uint(iFrame / 60));\n    float h = hash(i);\n    return mix(0.2, 0.8, h);\n}\n\nfloat hash0(ivec2 v, uvec2 n, uvec2 m) // both dimension values same (faster)\n{\n    if(any(greaterThan(uvec2(v) + n, 2u * n))) return 0.5; // transition to regular tiling outside\n    if(all(lessThan(uvec2(v) + m, 2u * m + 1u))) return 0.5; // transition to regular tiling outside\n    uint i = (uint(v.x) + triple32(uint(v.y)) + uint(iFrame / 60));\n    float h = hash(i*2u+0u);\n    return mix(0.2, 0.8, h);\n}\n\nfloat hash1(ivec2 v, uvec2 n, uvec2 m) // both dimension values same (faster)\n{\n    if(any(greaterThan(uvec2(v) + n, 2u * n))) return 0.5; // transition to regular tiling outside\n    if(all(lessThan(uvec2(v) + m, 2u * m + 1u))) return 0.5; // transition to regular tiling outside\n    uint i = (uint(v.x) + triple32(uint(v.y)) + uint(iFrame / 60));\n    float h = hash(i*2u+1u);\n    return mix(0.2, 0.8, h);\n}\n/*\nvec2 hash(uvec2 v, uvec2 n, uvec2 m) // both dimension values same (faster)\n{\n    if(any(greaterThan(v + n, 2u * n))) return vec2(0.5); // transition to regular tiling outside\n    if(all(lessThan(v + m, 2u * m + 1u))) return vec2(0.5); // transition to regular tiling outside\n    uint i = (v.x + triple32(v.y) + uint(iFrame / 60));\n    vec2 h = vec2(hash(i));\n    return mix(vec2(0.2), vec2(0.8), h);\n}\n\nvec2 hash(uvec2 v, uvec2 n, uvec2 m) // both dimension values different (slower)\n{\n    if(any(greaterThan(v + n, 2u * n))) return vec2(0.5); // transition to regular tiling outside\n    if(all(lessThan(v + m, 2u * m + 1u))) return vec2(0.5); // transition to regular tiling outside\n    uint i = (v.x + triple32(v.y) + uint(iFrame / 60));\n    vec2 h = vec2(hash((i << 1u) + 0u), hash((i << 1u) + 1u));\n    return mix(vec2(0.2), vec2(0.8), h);\n}\n\nvec2 hash(ivec2 v, uvec2 n, uvec2 m)\n{\n    return vec2(hash(uvec2(v), n, m));\n}\n*/\nfloat box(vec2 p, vec2 b) // https://iquilezles.org/articles/distfunctions2d/ by iq\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat box2(vec2 p, vec2 p0, vec2 p1, float r) // min-max box\n{\n    return box(p-(p1+p0)/2.0, (p1-p0)/2.0-r)-r;\n}\n/*\n// Idea from https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane.\n// Checkerboard tiling of alternating (horizontal vs. vertical) (double-T-) crossings.\n// Implementation my own since I prefer writing code to reading code ;-)\nfloat blocks_reduced(vec2 p, float r, uvec2 l, uvec2 m) // see https://www.shadertoy.com/view/DdlXDS Irregular City Block Layout for more condensed versions\n{\n    vec2 q = fract(p); // local coordinates inside tile\n    p = floor(p); // global coordinates of tile\n    ivec2 tile = ivec2(p);\n    vec2 c = hash(tile, l, m); // offset of vertical/horizontal line through this tile\n    vec2 sw = hash(tile+ivec2(-1,-1), l, m); // offset of vertical/horizontal line through south-west tile\n    vec2 nw = hash(tile+ivec2(-1,+1), l, m); // offset of vertical/horizontal line through north-west tile\n    vec2 se = hash(tile+ivec2(+1,-1), l, m); // offset of vertical/horizontal line through south-east tile\n    vec2 ne = hash(tile+ivec2(+1,+1), l, m); // offset of vertical/horizontal line through north-east tile\n    vec2 w = hash(tile+ivec2(-1, 0), l, m); // offset of horizontal/vertical line through west tile\n    vec2 e = hash(tile+ivec2(+1, 0), l, m); // offset of horizontal/vertical line through east tile\n    vec2 s = hash(tile+ivec2( 0,-1), l, m); // offset of horizontal/vertical line through south tile\n    vec2 n = hash(tile+ivec2( 0,+1), l, m); // offset of horizontal/vertical line through north tile\n    //bool flip = (tile.x % 2) == (tile.y % 2); // XXX breaks on windows XXX\n    bool flip = (tile.x & 1) == (tile.y & 1);\n    if(flip) // vertical line goes through\n    {\n        return\n            min\n            (\n                min\n                (\n                    box2(q, vec2(sw.x-1.0, s.y-1.0), vec2(c.x, w.y), r), // south-west\n                    box2(q, vec2(nw.x-1.0, w.y), vec2(c.x, n.y+1.0), r) // north-west\n                ),\n                min\n                (\n                    box2(q, vec2(c.x, s.y-1.0), vec2(se.x+1.0, e.y), r), // south-east\n                    box2(q, vec2(c.x, e.y), vec2(ne.x+1.0, n.y+1.0), r) // north-east\n                )\n            );\n    }\n    else // horizontal line goes through\n    {\n        return\n            min\n            (\n                min\n                (\n                    box2(q, vec2(w.x-1.0, sw.y-1.0), vec2(s.x, c.y), r), // south-west\n                    box2(q, vec2(w.x-1.0, c.y), vec2(n.x, nw.y+1.0), r) // north-west\n                ),\n                min\n                (\n                    box2(q, vec2(s.x, se.y-1.0), vec2(e.x+1.0, c.y), r), // south-east\n                    box2(q, vec2(n.x, c.y), vec2(e.x+1.0, ne.y+1.0), r) // north-east\n                )\n            );\n    }\n}\n*/\n// Inspired by https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane.\n// Checkerboard tiling of alternating (horizontal vs. vertical) (double-T-) crossings.\n// Implementation my own since I prefer writing code to reading code ;-)\nvec3 blocks(vec2 p, float r, uvec2 l, uvec2 m) // xy contains id, z contains distance\n{\n    vec2 q = fract(p); // local coordinates inside tile\n    ivec2 tile = ivec2(floor(p)); // global coordinates of tile\n    //bool flip = (tile.x % 2) == (tile.y % 2); // XXX breaks on windows XXX\n    bool flip = (tile.x & 1) == (tile.y & 1);\n    if(flip) // vertical line goes through\n    {\n        float x = hash0(tile, l, m); // x-coordinate of vertical line through this tile\n        float xsw = hash0(tile+ivec2(-1,-1), l, m); // x-coordinate of vertical line through south-west tile\n        float xnw = hash0(tile+ivec2(-1,+1), l, m); // x-coordinate of vertical line through north-west tile\n        float xse = hash0(tile+ivec2(+1,-1), l, m); // x-coordinate of vertical line through south-east tile\n        float xne = hash0(tile+ivec2(+1,+1), l, m); // x-coordinate of vertical line through north-east tile\n        float yw = hash1(tile+ivec2(-1, 0), l, m); // y-coordinate of horizontal line through west tile\n        float ye = hash1(tile+ivec2(+1, 0), l, m); // y-coordinate of horizontal line through east tile\n        float ys = hash1(tile+ivec2( 0,-1), l, m); // y-coordinate of horizontal line through south tile\n        float yn = hash1(tile+ivec2( 0,+1), l, m); // y-coordinate of horizontal line through north tile\n\n        return\n            q.x < x\n            ?\n            (\n                q.y < yw\n                ?\n                vec3\n                (\n                    vec2(tile.x, tile.y),\n                    box2(q, vec2(xsw-1.0, ys-1.0), vec2(x, yw), r) // south-west\n                )\n                :\n                vec3\n                (\n                    vec2(tile.x, tile.y + 1),\n                    box2(q, vec2(xnw-1.0, yw), vec2(x, yn+1.0), r) // north-west\n                )\n            )\n            :\n            (\n                q.y < ye\n                ?\n                vec3\n                (\n                    vec2(tile.x + 1, tile.y),\n                    box2(q, vec2(x, ys-1.0), vec2(xse+1.0, ye), r) // south-east\n                )\n                :\n                vec3\n                (\n                    vec2(tile.x + 1, tile.y + 1),\n                    box2(q, vec2(x, ye), vec2(xne+1.0, yn+1.0), r) // north-east\n                )\n            );\n    }\n    else // horizontal line goes through\n    {\n        float y = hash1(tile, l, m); // x-coordinate of horizontal line through this tile\n        float ysw = hash1(tile+ivec2(-1,-1), l, m); // y-coordinate of horizontal line through south-west tile\n        float ynw = hash1(tile+ivec2(-1,+1), l, m); // y-coordinate of horizontal line through north-west tile\n        float yse = hash1(tile+ivec2(+1,-1), l, m); // y-coordinate of horizontal line through south-east tile\n        float yne = hash1(tile+ivec2(+1,+1), l, m); // y-coordinate of horizontal line through north-east tile\n        float xw = hash0(tile+ivec2(-1, 0), l, m); // x-coordinate of vertical line through west tile\n        float xe = hash0(tile+ivec2(+1, 0), l, m); // x-coordinate of vertical line through east tile\n        float xs = hash0(tile+ivec2( 0,-1), l, m); // x-coordinate of vertical line through south tile\n        float xn = hash0(tile+ivec2( 0,+1), l, m); // x-coordinate of vertical line through north tile\n\n        return\n            q.y < y\n            ?\n            (\n                q.x < xs\n                ?\n                vec3\n                (\n                    vec2(tile.x, tile.y),\n                    box2(q, vec2(xw-1.0, ysw-1.0), vec2(xs, y), r) // south-west                        \n                )\n                :\n                vec3\n                (\n                    vec2(tile.x + 1, tile.y),\n                    box2(q, vec2(xs, yse-1.0), vec2(xe+1.0, y), r) // south-east\n                )\n            )\n            :\n            (\n                q.x < xn\n                ?\n                vec3\n                (\n                    vec2(tile.x, tile.y + 1),\n                    box2(q, vec2(xw-1.0, y), vec2(xn, ynw+1.0), r) // north-west\n                )\n                :\n                vec3\n                (\n                    vec2(tile.x + 1, tile.y + 1),\n                    box2(q, vec2(xn, y), vec2(xe+1.0, yne+1.0), r) // north-east\n                )\n            );\n    }\n}\n\nvec3 idmap(vec2 p)\n{\n    float r = 0.0; // roundness (TODO: fix border)\n    //uvec2 n = uvec2(6, 4);\n    //uvec2 m = uvec2(3, 2);\n    uvec2 n = uvec2(5, 3);\n    uvec2 m = uvec2(2, 1);\n    float exterior = max(box(p, vec2(n + 1u)-r)-r,-box(p, vec2(m)));\n    if(exterior > 0.0) return vec3(0.0, 0.0, exterior);\n    return blocks(p + 0.5, r, n, m);\n}\n\nvec3 idmap_scaled(vec2 p)\n{\n    return idmap(p*6.0)/vec3(1.0, 1.0, 6.0);\n}\n\nvec3 colorcode(ivec2 id)\n{\n    return vec3((id.x & 1) != (id.y & 1));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 p)\n{\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    p = (2.0 * p - R) / R.y;\n    vec2 m = iMouse.xy;\n    m = (2.0 * m - R) / R.y;\n\n    float d = idmap_scaled(p).z;\n    \n    // sdf visualization by iq\n    vec3 col = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcol *= 1.0 - exp(-24.0 * abs(d));\n\tcol *= 0.8 + 0.2 * cos(240.0*d);\n\tcol = mix(col, vec3(1.0), 1.0 - smoothstep(0.0, 0.01, abs(d)));\n\n    if(iMouse.z > 0.001)\n    {\n        col *= mix(vec3(0.5), vec3(1.0), colorcode(ivec2(idmap_scaled(p).xy))); // visualize ids\n        // sdf visualization by iq\n        d = idmap_scaled(m).z;\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0 - smoothstep(0.0, 0.005, abs(length(p - m) - abs(d)) - 0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0 - smoothstep(0.0, 0.005, length(p - m) - 0.015));\n    }\n    \n\tfragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}