{"ver":"0.1","info":{"id":"flK3RK","date":"1638007871","viewed":83,"name":"Classic Mandelbrot Set Demo.","username":"Ludicrous","description":"The classic mandelbrot set.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","maths","classic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float getScale()\n{\n    return clamp(exp2(2.-iTime), .0005, 2.);\n}\n\nvec3 Hue(float v)\n{\n    return vec3(sin(v), sin(v + 2.09439510239), sin(v - 2.09439510239)) * 0.5 + 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ((fragCoord + iMouse.xy * .2)/iResolution.xy * 4.0 - vec2(1.7,2.3)) * getScale() + vec2(-1.39,.0143);\n    vec2 ini = vec2(0,0);\n    float iter = 0.;\n    float iterLimit = clamp(iTime * 10.0, 1., 300.);\n    for (int i = 0; i < int(iterLimit); i++)\n    {\n        vec2 nPos = vec2(ini.x * ini.x - ini.y * ini.y, 2. * ini.y * ini.x) + uv;\n        ini = nPos;\n        float len = length(nPos);\n        if (len > 2.0)\n        {\n            iter += 1.0 / (len * len - 3.);\n            i = 2000;\n            continue;\n        }\n        iter++;\n    }\n    vec3 col = Hue(iter * .12);\n    if (iter >= floor(iterLimit))\n        col = vec3(0,0,0);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}