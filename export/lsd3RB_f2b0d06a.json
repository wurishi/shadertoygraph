{"ver":"0.1","info":{"id":"lsd3RB","date":"1450660917","viewed":749,"name":"YinYang","username":"BigWIngs","description":"YinYang","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["yinyang"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// \"YinYang\" by Martijn Steinrucken aka BigWings - 2015\n// Email:countfrolic@gmail.com Twitter:@The_ArtOfCode\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define PI 3.1415\n\nfloat circle(vec2 uv, vec2 p, float size) {\n    float dist = length(uv-p);\n    float f = fwidth(dist)/4.;\n    float circle = smoothstep(size+f, size-f, dist);\n    \n    return circle;\n}\n\nfloat circle(vec2 uv, vec2 p, float size, float thickness) {\n    float dist = length(uv-p);\n    \n    float circle = smoothstep(thickness+fwidth(dist), thickness, abs(dist-size));\n    \n    return circle;\n}\n\nvec2 rotate(vec2 uv, vec2 p, float angle) {\n\tfloat s = sin(angle);\n    float c = cos(angle);\n    mat2 rot = mat2(c, s, s, -c);\n    \n    uv -= p;\n    uv *= rot;\n    uv += p;\n    \n    return uv;\n}\n\nfloat yinyang(vec2 uv, vec2 p, float size, float angle) {\n   \tuv = rotate(uv, p, angle);\n    \n    float f = fwidth(uv.x);\n    float c = smoothstep(-f, f, uv.x-p.x);\n    c *= circle(uv, p, size);\n    float s2 = size*.5;\n    \n    c *= 1.-circle(uv, vec2(p.x, p.y+s2), s2);\n    c += circle(uv, vec2(p.x, p.y-s2), s2);   // this cause edgelines\n    c += circle(uv, p, size+0.001, 0.001);\n    \n    float s3 = s2*.25;\n    c += circle(uv, vec2(p.x, p.y+s2), s3);\n    c *= 1.-circle(uv, vec2(p.x, p.y-s2), s3); \n    \n    return clamp(c, 0., 1.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float grid = 4.;\n    float iGrid = 1./grid;\n     float t = iTime*2.;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float aspect = iResolution.x/iResolution.y;\n    vec2 uv1 = uv-vec2(.5);\n    \n    uv.x-=.5;\n    uv.x *= aspect;\n    \n    uv.y-=0.5;\n   \tfloat zoom = 4.-cos(t*.05)*2.5;\n    uv *= zoom;\n   // uv *= 1.+length(uv)*.2;\n\tuv.y+=0.5;\n    \n    uv = rotate(uv, vec2(.0, 0.5), -t*0.01);\n    \n    \n    \n\tvec4 col = vec4(0.);\n    \n   \n    vec2 uv2 = mod(uv+vec2(iGrid)*.5, iGrid)*grid-0.5;\n    \n    float angle = atan(uv.x, uv.y-iGrid*2.);\n\tfloat dist = t+(uv.x*uv.y);//+pow(sin(t+angle), 4.);\n    dist = length(uv1);\n    col += yinyang(uv2, vec2(.0), .4, dist*20.+t);\n \n    vec4 bg = mix(vec4(1.), vec4(0.), dist);\n    \n    col = mix(bg, vec4(0.), col);\n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}