{"ver":"0.1","info":{"id":"MdsfD7","date":"1496571494","viewed":1033,"name":"Rolling Stones","username":"dr2","description":"Spheres on a fractal landscape - explanations in the source","likes":18,"published":3,"flags":32,"usePreview":0,"tags":["raytracing","raymarching","landscape","balls","physics","collisions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Rolling Stones\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Rolling/bouncing balls dragged across a fractal landscape and also\n  attracted to their center-of-mass.\n\n  Control panel appears when ring (or a hidden control) clicked; panel fades\n  automatically; look around using mouse.\n\n  Sliders (from left - arbitrary values) adjust:\n    Lacunarity - rate of landscape fBm length scale change per iteration.\n    Persistence - rate of landscape fBm amplitude change per iteration.\n    Landscape height.\n    Drag speed.\n*/\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nmat3 QtToRMat (vec4 q);\nvec4 Loadv4 (int idVar);\nvec3 HsvToRgb (vec3 c);\n\nmat2 fqRot;\nvec3 vnBall, sunDir;\nfloat dstFar, fWav, aWav, htFac, htMax;\nint idBall;\nconst int nBall = 144;\nconst float pi = 3.14159;\n\nfloat GrndHt (vec2 p)\n{\n  vec2 q;\n  float f, wAmp;\n  q = 0.05 * p;\n  f = 0.;\n  wAmp = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += wAmp * Noisefv2 (q);\n    wAmp *= aWav;\n    q *= fqRot;\n  }\n  return htMax * f;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 200; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.2, 0.35 * h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (p.y > GrndHt (p.xz)) sLo = s;\n      else sHi = s;\n    }\n    dHit = 0.5 * (sLo + sHi);\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  const vec2 e = vec2 (0.01, 0.);\n  float h;\n  h = GrndHt (p.xz);\n  return normalize (vec3 (h - GrndHt (p.xz + e.xy), e.x, h - GrndHt (p.xz + e.yx)));\n}\n\nfloat GrndSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 16; j ++) {\n    p = ro + rd * d;\n    h = p.y - GrndHt (p.xz);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (0.2, 0.1 * d);\n    if (sh < 0.05) break;\n  }\n  return sh;\n}\n\nfloat BallHit (vec3 ro, vec3 rd)\n{\n  vec4 p;\n  vec3 u;\n  float b, d, w, dMin, rad;\n  dMin = dstFar;\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 * n);\n    u = ro - p.xyz;\n    rad = 0.45 * p.w;\n    b = dot (rd, u);\n    w = b * b - dot (u, u) + rad * rad;\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) {\n        dMin = d;\n        vnBall = (u + d * rd) / rad;\n        idBall = n;\n      }\n    }\n  }\n  return dMin;\n}\n\nfloat BallHitSh (vec3 ro, vec3 rd, float rng)\n{\n  vec4 p;\n  vec3 rs, u;\n  float b, d, w, dMin, rad;\n  dMin = dstFar;\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 * n);\n    u = ro - p.xyz;\n    rad = 0.45 * p.w;\n    b = dot (rd, u);\n    w = b * b - dot (u, u) + rad * rad;\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) dMin = d;\n    }\n  }\n  return 0.4 + 0.6 * smoothstep (0., rng, dMin);\n}\n\nfloat BallChqr (int idBall, vec3 vnBall)\n{\n  vec3 u;\n  u = vnBall * QtToRMat (Loadv4 (4 * idBall + 2));\n  return 0.4 + 0.6 * step (0., sign (u.y) * sign (u.z) * atan (u.x, u.y));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, vn, bgCol;\n  float dstGrnd, dstBall, sh, c;\n  bgCol = vec3 (0.4, 0.4, 0.45);\n  dstGrnd = GrndRay (ro, rd);\n  dstBall = BallHit (ro, rd);\n  if (min (dstBall, dstGrnd) < dstFar) {\n    if (dstGrnd < dstBall) {\n      ro += rd * dstGrnd;\n      vn = GrndNf (ro);\n      objCol = vec4 (mix (vec3 (0.35, 0.3, 0.1), vec3 (0.4, 0.6, 0.2),\n         clamp (0.5 * pow (vn.y, 4.) + Fbm2 (0.5 * ro.xz) - 0.5, 0., 1.)) *\n         (1. - 0.1 * Noisefv2 (10. * ro.xz)), 0.);\n      sh = min (BallHitSh (ro + 0.01 * sunDir, sunDir, 10.),\n         GrndSShadow (ro, sunDir));\n    } else {\n      ro += rd * dstBall;\n      c = float (idBall / 16) / float (nBall / 16);\n      objCol = vec4 (HsvToRgb (vec3 (mod (c, 1.), 1., 1.)), 1.);\n      objCol.rgb *= BallChqr (idBall, vnBall);\n      vn = vnBall;\n      sh = 1.;\n    }\n    col = objCol.rgb * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.)) +\n       objCol.a * sh * pow (max (dot (normalize (sunDir - rd), vn), 0.), 256.);\n    col = mix (col, bgCol, clamp (3. * min (dstBall, dstGrnd) / dstFar - 2.,\n       0., 1.));\n  } else col = bgCol;\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\n#define N_SLIDR 4\n\nvec4 ShowWg (vec2 uv, vec2 canvas, vec4 parmV)\n{\n  vec4 wgBx[N_SLIDR];\n  vec3 col, cc;\n  vec2 ut, ust;\n  float vW[N_SLIDR], asp, s;\n  cc = vec3 (1., 0., 0.);\n  asp = canvas.x / canvas.y;\n  for (int k = 0; k < N_SLIDR; k ++)\n     wgBx[k] = vec4 ((0.31 + 0.05 * float (k)) * asp, -0.15, 0.014 * asp, 0.18);\n  vW[0] = parmV.x;  vW[1] = parmV.y;  vW[2] = parmV.z;  vW[3] = parmV.w;\n  col = vec3 (0.);\n  for (int k = 0; k < N_SLIDR; k ++) {\n    ut = 0.5 * uv - wgBx[k].xy;\n    ust = abs (ut) - wgBx[k].zw * vec2 (0.7, 1.);\n    if (max (ust.x, ust.y) < 0.) {\n      if  (min (abs (ust.x), abs (ust.y)) * canvas.y < 2.) col = 0.3 * cc.yxx;\n      else col = (mod (0.5 * ((0.5 * uv.y - wgBx[k].y) / wgBx[k].w - 0.99), 0.1) *\n         canvas.y < 6.) ? 0.3 * cc.yxx : 0.6 * cc.yxx;\n    }\n    ut.y -= (vW[k] - 0.5) * 2. * wgBx[k].w;\n    s = ShowInt (ut - vec2 (0.018, -0.01), 0.02 * vec2 (asp, 1.), 2.,\n       clamp (floor (100. * vW[k]), 1., 99.));\n    if (s > 0.) col = cc.yxy;\n    ut = abs (ut) * vec2 (1., 1.5);\n    if (max (abs (ut.x), abs (ut.y)) < 0.025 && max (ut.x, ut.y) > 0.02) col = cc.yxx;\n  }\n  return vec4 (col, step (0.001, length (col)));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat, wgBxC, parmV, c4;\n  vec3 col, rd, ro, vd, u, rLead, rMid, cw;\n  vec2 canvas, uv;\n  float asp, tCur, tCurM, az, el, zmFac, f, cm;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  asp = canvas.x / canvas.y;\n  wgBxC = vec4 (0.45 * asp, -0.4, 0.022, 0.);\n  rMid = Loadv4 (4 * nBall).xyz;\n  rLead = Loadv4 (4 * nBall + 1).xyz;\n  parmV = Loadv4 (4 * nBall + 2);\n  fWav = 4. * (0.5 + 0.1 * (parmV.x - 0.5));\n  fqRot = fWav * mat2 (0.6, -0.8, 0.8, 0.6);\n  aWav = 1. * (0.5 + 0.2 * (parmV.y - 0.5));\n  htFac = 30. * (0.5 + 0.2 * (parmV.z - 0.5));\n  htMax = htFac * (1. - aWav) / (1. - pow (aWav, 5.));\n  stDat = Loadv4 (4 * nBall + 4);\n  tCur = stDat.z;\n  tCurM = stDat.w;\n  az = -0.01 * pi * tCur;\n  el = pi * (0.1 + 0.05 * sin (0.011 * pi * tCur));\n  el += stDat.x;\n  az += stDat.y;\n  el = clamp (el, 0.02 * pi, 0.45 * pi);\n  zmFac = 4.;\n  ro = 0.5 * (rLead + rMid) + 60. *\n     vec3 (cos (el) * cos (az), sin (el), cos (el) * sin (az));\n  ro.y = max (ro.y, GrndHt (ro.xz) + 3.);\n  vd = normalize (rMid - ro);\n  u = - vd.y * vd;\n  f = 1. / sqrt (1. - vd.y * vd.y);\n  vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  sunDir = normalize (vec3 (cos (0.01 * tCur), 1., sin (0.01 * tCur)));\n  dstFar = 100.;\n  col = ShowScene (ro, rd);\n  if (canvas.y < 256. || tCur - tCurM < 5.) {\n    c4 = ShowWg (uv, canvas, parmV);\n    cw = mix (col, c4.rgb, c4.a);\n    cm = (canvas.y < 256.) ? 0.3 : 0.2 + 0.8 * smoothstep (4., 5., tCur - tCurM);\n  } else {\n    cw = vec3 (0., 0.7, 0.7);\n    cm = 0.3 + 0.7 * step (2., abs (length (0.5 * uv - wgBxC.xy) -\n       wgBxC.z) * canvas.y);\n  }\n  fragColor = vec4 (mix (cw, col, cm), 1.);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nfloat DigSeg (vec2 q)\n{\n  return (1. - smoothstep (0.13, 0.17, abs (q.x))) *\n     (1. - smoothstep (0.5, 0.57, abs (q.y)));\n}\n\nfloat ShowDig (vec2 q, int iv)\n{\n  float d;\n  int k, kk;\n  const vec2 vp = vec2 (0.5, 0.5), vm = vec2 (-0.5, 0.5), vo = vec2 (1., 0.);\n  if (iv < 5) {\n    if (iv == -1) k = 8;\n    else if (iv == 0) k = 119;\n    else if (iv == 1) k = 36;\n    else if (iv == 2) k = 93;\n    else if (iv == 3) k = 109;\n    else k = 46;\n  } else {\n    if (iv == 5) k = 107;\n    else if (iv == 6) k = 122;\n    else if (iv == 7) k = 37;\n    else if (iv == 8) k = 127;\n    else k = 47;\n  }\n  q = (q - 0.5) * vec2 (1.8, 2.3);\n  d = 0.;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx - vo);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy - vp);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy - vm);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy + vm);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy + vp);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx + vo);\n  return d;\n}\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, sgn, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (min (q.x, q.y) >= 0. && max (q.x, q.y) < 1.) {\n    q.x *= mxChar;\n    sgn = sign (val);\n    val = abs (val);\n    nDig = (val > 0.) ? floor (max (log (val) / log (10.), 0.) + 0.001) + 1. : 1.;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (sgn < 0.) {\n      if (idChar == mxChar - nDig - 1.) s = ShowDig (q, -1);\n      else ++ v;\n    }\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// \"Rolling Stones\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nfloat Hashff (float p);\nfloat Noisefv2 (vec2 p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nmat2 fqRot;\nvec3 rLead;\nfloat todCur, nStep, fWav, aWav, htFac, htMax;\nconst int nBall = 144;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nfloat GrndHt (vec2 p)\n{\n  vec2 q;\n  float f, wAmp;\n  q = 0.05 * p;\n  f = 0.;\n  wAmp = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += wAmp * Noisefv2 (q);\n    wAmp *= aWav;\n    q *= fqRot;\n  }\n  return htMax * f;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float sz)\n{\n  vec4 p;\n  vec3 rmN, vmN, wmN, dr, dv, drw, am, wam, vn;\n  float fOvlap, fricN, fricT, fricS, fricSW, fDamp, fAttr, grav, rSep, szN, szAv,\n     fc, ft, ms, drv, dt;\n  const vec2 e = vec2 (0.1, 0.);\n  fOvlap = 1000.;\n  fricN = 10.;\n  fricS = 1.;\n  fricSW = 10.;\n  fricT = 0.5;\n  fAttr = 0.2;\n  fDamp = 0.05;\n  grav = 10.;\n  p = Loadv4 (4 * mId);\n  rm = p.xyz;\n  sz = p.w;\n  vm = Loadv4 (4 * mId + 1).xyz;\n  qm = Loadv4 (4 * mId + 2);\n  wm = Loadv4 (4 * mId + 3).xyz;\n  ms = sz * sz * sz;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 * n);\n    rmN = p.xyz;\n    szN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    szAv = 0.5 * (sz + szN);\n    if (n != mId && rSep < szAv) {\n      fc = fOvlap * (szAv / rSep - 1.);\n      vmN = Loadv4 (4 * n + 1).xyz;\n      wmN = Loadv4 (4 * n + 3).xyz;\n      dv = vm - vmN;\n      drv = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * drv, 0.);\n      am += fc * dr;\n      dv -= drv * dr + cross ((sz * wm + szN * wmN) / (sz + szN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n  vn = normalize (vec3 (GrndHt (rm.xz + e.xy) - GrndHt (rm.xz - e.xy), 2. * e.x,\n     GrndHt (rm.xz + e.yx) - GrndHt (rm.xz - e.yx)));\n  dr.xz = -0.5 * sz * vn.xz;\n  dr.y = rm.y + 0.55 * sz - GrndHt (rm.xz - dr.xz);\n  rSep = length (dr);\n  if (rSep < sz) {\n    fc = fOvlap * (sz / rSep - 1.);\n    dv = vm;\n    drv = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * drv, 0.);\n    am += fc * dr;\n    dv -= drv * dr + cross (wm, dr);\n    ft = min (fricT, fricSW * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  am += fAttr * (rLead - rm);\n  am.y -= grav * ms;\n  am -= fDamp * vm;\n  dt = 0.01;\n  vm += dt * am / ms;\n  rm += dt * vm;\n  wm += dt * wam / (0.1 * ms * sz);\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float sz)\n{\n  vec3 e;\n  float mIdf, nbEdge;\n  nbEdge = floor (sqrt (float (nBall)) + 0.1);\n  mIdf = float (mId);\n  rm.xz = floor (vec2 (mod (mIdf, nbEdge), mIdf / nbEdge)) - 0.5 * (nbEdge - 1.) - 20.;\n  rm.y = GrndHt (rm.xz) + 3.;\n  vm = 2. * normalize (vec3 (Hashff (mIdf + todCur), Hashff (mIdf + todCur + 0.3),\n     Hashff (mIdf + todCur + 0.6)) - 0.5);\n  e = normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3),\n     Hashff (mIdf + 0.6)));\n  qm = EulToQt (e);\n  wm = vec3 (0.);\n  sz = 1. - 0.3 * Hashff (mIdf + 0.1);\n}\n\n#define N_SLIDR 4\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[N_SLIDR + 1], mPtr, mPtrP, stDat, parmV, p, qm;\n  vec3 rm, vm, wm, rMid;\n  vec2 iFrag, canvas, ust;\n  float sz, tCur, tCurM, vW, asp, el, az, drSpd;\n  int mId, pxId, wgSel, wgReg, kSel, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBall + 5) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  wgSel = -1;\n  wgReg = -2;\n  asp = canvas.x / canvas.y;\n  if (pxId < 4 * nBall) mId = pxId / 4;\n  else mId = -1;\n  if (iFrame <= 5) {\n    doInit = true;\n    parmV = vec4 (0.5, 0.5, 0.5, 0.5);\n    mPtrP = mPtr;\n    el = 0.;\n    az = 0.;\n    tCurM = tCur;\n  } else {\n    doInit = false;\n    parmV = Loadv4 (4 * nBall + 2);\n    stDat = Loadv4 (4 * nBall + 3);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    wgSel = int (stDat.w);\n    stDat = Loadv4 (4 * nBall + 4);\n    el = stDat.x;\n    az = stDat.y;\n    tCurM = stDat.w;\n  }\n  if (mPtr.z > 0.) {\n    for (int k = 0; k < N_SLIDR; k ++)\n       wgBx[k] = vec4 ((0.31 + 0.05 * float (k)) * asp, -0.15, 0.014 * asp, 0.18);\n    wgBx[N_SLIDR] = vec4 (0.45 * asp, -0.4, 0.022, 0.);\n    for (int k = 0; k < N_SLIDR; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    ust = mPtr.xy * vec2 (asp, 1.) - wgBx[N_SLIDR].xy;\n    if (length (ust) < wgBx[N_SLIDR].z) wgReg = N_SLIDR;\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n    if (wgSel >= 0) tCurM = tCur;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {\n      az = pi * mPtr.x;\n      el = 0.5 * pi * mPtr.y;\n    } else {\n      el = 0.;\n      az = 0.;\n    }\n  } else {\n    if (wgSel < N_SLIDR) {\n      for (int k = 0; k < N_SLIDR; k ++) {\n        if (wgSel == k) {\n          kSel = k;\n          vW = clamp (0.5 + 0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0., 0.99);\n          break;\n        }\n      }\n      if      (kSel == 0) parmV.x = vW;\n      else if (kSel == 1) parmV.y = vW;\n      else if (kSel == 2) parmV.z = vW;\n      else if (kSel == 3) parmV.w = vW;\n      if (kSel <= 2) doInit = true;\n    }\n  }\n  fWav = 4. * (0.5 + 0.1 * (parmV.x - 0.5));\n  fqRot = fWav * mat2 (0.6, -0.8, 0.8, 0.6);\n  aWav = 1. * (0.5 + 0.2 * (parmV.y - 0.5));\n  htFac = 30. * (0.5 + 0.2 * (parmV.z - 0.5));\n  htMax = htFac * (1. - aWav) / (1. - pow (aWav, 5.));\n  drSpd = 1. * (0.52 + 0.96 * (parmV.w - 0.5));\n  if (doInit) {\n    nStep = 0.;\n    if (mId >= 0) Init (mId, rm, vm, qm, wm, sz);\n  } else {\n    nStep = Loadv4 (4 * nBall).w;\n    ++ nStep;\n    rLead = Loadv4 (4 * nBall + 1).xyz;\n    rLead += drSpd * vec3 (0.03, 0., 0.1);\n    rLead.y = GrndHt (rLead.xz) + 2.;\n    if (mId >= 0) Step (mId, rm, vm, qm, wm, sz);\n  }\n  if (pxId == 4 * nBall) {\n    rMid = vec3 (0.);\n    for (int n = 0; n < nBall; n ++) rMid += Loadv4 (4 * n).xyz;\n    rMid /= float (nBall);\n    if (doInit) rLead = rMid;\n  }\n  if (pxId < 4 * nBall) {\n    kp = 4 * mId;\n    if      (pxId == kp + 0) p = vec4 (rm, sz);\n    else if (pxId == kp + 1) p = vec4 (vm, 0.);\n    else if (pxId == kp + 2) p = qm;\n    else if (pxId == kp + 3) p = vec4 (wm, 0.);\n    stDat = p;\n  } else {\n    kp = 4 * nBall;\n    if      (pxId == kp + 0) stDat = vec4 (rMid, nStep);\n    else if (pxId == kp + 1) stDat = vec4 (rLead, 0.);\n    else if (pxId == kp + 2) stDat = parmV;\n    else if (pxId == kp + 3) stDat = vec4 (mPtr.xyz, float (wgSel));\n    else if (pxId == kp + 4) stDat = vec4 (el, az, tCur, tCurM);\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// \"Rolling Stones\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nfloat Hashff (float p);\nfloat Noisefv2 (vec2 p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nmat2 fqRot;\nvec3 rLead;\nfloat todCur, nStep, fWav, aWav, htFac, htMax;\nconst int nBall = 144;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nfloat GrndHt (vec2 p)\n{\n  vec2 q;\n  float f, wAmp;\n  q = 0.05 * p;\n  f = 0.;\n  wAmp = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += wAmp * Noisefv2 (q);\n    wAmp *= aWav;\n    q *= fqRot;\n  }\n  return htMax * f;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float sz)\n{\n  vec4 p;\n  vec3 rmN, vmN, wmN, dr, dv, drw, am, wam, vn;\n  float fOvlap, fricN, fricT, fricS, fricSW, fDamp, fAttr, grav, rSep, szN, szAv,\n     fc, ft, ms, drv, dt;\n  const vec2 e = vec2 (0.1, 0.);\n  fOvlap = 1000.;\n  fricN = 10.;\n  fricS = 1.;\n  fricSW = 10.;\n  fricT = 0.5;\n  fAttr = 0.2;\n  fDamp = 0.05;\n  grav = 10.;\n  p = Loadv4 (4 * mId);\n  rm = p.xyz;\n  sz = p.w;\n  vm = Loadv4 (4 * mId + 1).xyz;\n  qm = Loadv4 (4 * mId + 2);\n  wm = Loadv4 (4 * mId + 3).xyz;\n  ms = sz * sz * sz;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 * n);\n    rmN = p.xyz;\n    szN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    szAv = 0.5 * (sz + szN);\n    if (n != mId && rSep < szAv) {\n      fc = fOvlap * (szAv / rSep - 1.);\n      vmN = Loadv4 (4 * n + 1).xyz;\n      wmN = Loadv4 (4 * n + 3).xyz;\n      dv = vm - vmN;\n      drv = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * drv, 0.);\n      am += fc * dr;\n      dv -= drv * dr + cross ((sz * wm + szN * wmN) / (sz + szN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n  vn = normalize (vec3 (GrndHt (rm.xz + e.xy) - GrndHt (rm.xz - e.xy), 2. * e.x,\n     GrndHt (rm.xz + e.yx) - GrndHt (rm.xz - e.yx)));\n  dr.xz = -0.5 * sz * vn.xz;\n  dr.y = rm.y + 0.55 * sz - GrndHt (rm.xz - dr.xz);\n  rSep = length (dr);\n  if (rSep < sz) {\n    fc = fOvlap * (sz / rSep - 1.);\n    dv = vm;\n    drv = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * drv, 0.);\n    am += fc * dr;\n    dv -= drv * dr + cross (wm, dr);\n    ft = min (fricT, fricSW * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  am += fAttr * (rLead - rm);\n  am.y -= grav * ms;\n  am -= fDamp * vm;\n  dt = 0.01;\n  vm += dt * am / ms;\n  rm += dt * vm;\n  wm += dt * wam / (0.1 * ms * sz);\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float sz)\n{\n  vec3 e;\n  float mIdf, nbEdge;\n  nbEdge = floor (sqrt (float (nBall)) + 0.1);\n  mIdf = float (mId);\n  rm.xz = floor (vec2 (mod (mIdf, nbEdge), mIdf / nbEdge)) - 0.5 * (nbEdge - 1.) - 20.;\n  rm.y = GrndHt (rm.xz) + 3.;\n  vm = 2. * normalize (vec3 (Hashff (mIdf + todCur), Hashff (mIdf + todCur + 0.3),\n     Hashff (mIdf + todCur + 0.6)) - 0.5);\n  e = normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3),\n     Hashff (mIdf + 0.6)));\n  qm = EulToQt (e);\n  wm = vec3 (0.);\n  sz = 1. - 0.3 * Hashff (mIdf + 0.1);\n}\n\n#define N_SLIDR 4\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[N_SLIDR + 1], mPtr, mPtrP, stDat, parmV, p, qm;\n  vec3 rm, vm, wm, rMid;\n  vec2 iFrag, canvas, ust;\n  float sz, tCur, tCurM, vW, asp, el, az, drSpd;\n  int mId, pxId, wgSel, wgReg, kSel, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBall + 5) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  wgSel = -1;\n  wgReg = -2;\n  asp = canvas.x / canvas.y;\n  if (pxId < 4 * nBall) mId = pxId / 4;\n  else mId = -1;\n  if (iFrame <= 5) {\n    doInit = true;\n    parmV = vec4 (0.5, 0.5, 0.5, 0.5);\n    mPtrP = mPtr;\n    el = 0.;\n    az = 0.;\n    tCurM = tCur;\n  } else {\n    doInit = false;\n    parmV = Loadv4 (4 * nBall + 2);\n    stDat = Loadv4 (4 * nBall + 3);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    wgSel = int (stDat.w);\n    stDat = Loadv4 (4 * nBall + 4);\n    el = stDat.x;\n    az = stDat.y;\n    tCurM = stDat.w;\n  }\n  if (mPtr.z > 0.) {\n    for (int k = 0; k < N_SLIDR; k ++)\n       wgBx[k] = vec4 ((0.31 + 0.05 * float (k)) * asp, -0.15, 0.014 * asp, 0.18);\n    wgBx[N_SLIDR] = vec4 (0.45 * asp, -0.4, 0.022, 0.);\n    for (int k = 0; k < N_SLIDR; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    ust = mPtr.xy * vec2 (asp, 1.) - wgBx[N_SLIDR].xy;\n    if (length (ust) < wgBx[N_SLIDR].z) wgReg = N_SLIDR;\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n    if (wgSel >= 0) tCurM = tCur;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {\n      az = pi * mPtr.x;\n      el = 0.5 * pi * mPtr.y;\n    } else {\n      el = 0.;\n      az = 0.;\n    }\n  } else {\n    if (wgSel < N_SLIDR) {\n      for (int k = 0; k < N_SLIDR; k ++) {\n        if (wgSel == k) {\n          kSel = k;\n          vW = clamp (0.5 + 0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0., 0.99);\n          break;\n        }\n      }\n      if      (kSel == 0) parmV.x = vW;\n      else if (kSel == 1) parmV.y = vW;\n      else if (kSel == 2) parmV.z = vW;\n      else if (kSel == 3) parmV.w = vW;\n      if (kSel <= 2) doInit = true;\n    }\n  }\n  fWav = 4. * (0.5 + 0.1 * (parmV.x - 0.5));\n  fqRot = fWav * mat2 (0.6, -0.8, 0.8, 0.6);\n  aWav = 1. * (0.5 + 0.2 * (parmV.y - 0.5));\n  htFac = 30. * (0.5 + 0.2 * (parmV.z - 0.5));\n  htMax = htFac * (1. - aWav) / (1. - pow (aWav, 5.));\n  drSpd = 1. * (0.52 + 0.96 * (parmV.w - 0.5));\n  if (doInit) {\n    nStep = 0.;\n    if (mId >= 0) Init (mId, rm, vm, qm, wm, sz);\n  } else {\n    nStep = Loadv4 (4 * nBall).w;\n    ++ nStep;\n    rLead = Loadv4 (4 * nBall + 1).xyz;\n    rLead += drSpd * vec3 (0.03, 0., 0.1);\n    rLead.y = GrndHt (rLead.xz) + 2.;\n    if (mId >= 0) Step (mId, rm, vm, qm, wm, sz);\n  }\n  if (pxId == 4 * nBall) {\n    rMid = vec3 (0.);\n    for (int n = 0; n < nBall; n ++) rMid += Loadv4 (4 * n).xyz;\n    rMid /= float (nBall);\n    if (doInit) rLead = rMid;\n  }\n  if (pxId < 4 * nBall) {\n    kp = 4 * mId;\n    if      (pxId == kp + 0) p = vec4 (rm, sz);\n    else if (pxId == kp + 1) p = vec4 (vm, 0.);\n    else if (pxId == kp + 2) p = qm;\n    else if (pxId == kp + 3) p = vec4 (wm, 0.);\n    stDat = p;\n  } else {\n    kp = 4 * nBall;\n    if      (pxId == kp + 0) stDat = vec4 (rMid, nStep);\n    else if (pxId == kp + 1) stDat = vec4 (rLead, 0.);\n    else if (pxId == kp + 2) stDat = parmV;\n    else if (pxId == kp + 3) stDat = vec4 (mPtr.xyz, float (wgSel));\n    else if (pxId == kp + 4) stDat = vec4 (el, az, tCur, tCurM);\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n","name":"Buffer B","description":"","type":"buffer"}]}