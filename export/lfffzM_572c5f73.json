{"ver":"0.1","info":{"id":"lfffzM","date":"1723502835","viewed":35,"name":"Morph ðŸŸ ","username":"DinoDaredevil","description":"Perlin Noise circle","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["perlinnoise","music","bubble"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hash33(vec3 p3)\n{\n p3 = fract(p3 * vec3(.1031,.11369,.13787));\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3(p3.x+p3.y, p3.x+p3.z, p3.y+p3.z)*p3.zyx);\n}\n\nfloat perlinNoise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return  mix(\n                mix(\n                    mix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                        w.x),\n                    mix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                        w.x),\n                    w.z),\n                mix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                        w.x),\n                    mix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                        w.x),\n                    w.z),\n                w.y\n             );\n}\n\n\nconst vec3 color1 = vec3(255.0/255.0, 138.0/255.0, 28.0/255.0);\nconst vec3 color2 = vec3(255.0/255.0, 91.0/255.0, 33.0/255.0);\nconst vec3 color3 = vec3(255.0/255.0, 149.0/255.0, 50.0/255.0) / 3.0;\nconst float noiseScale = 1.5;\nconst float lightIntensity = 1.0;\nconst float noiseChangeSpeed = 0.5;\nconst float gradientSweepSweep = 0.5;\n\nfloat light(float intensity, float attenuation, float dist)\n{\n    return intensity / (0.5 + dist * attenuation);\n}\n\nvec3 draw( in vec2 vector )\n{\n    vec4 music = texture(iChannel0, vec2(0.0, 0.0));\n    float musicVolume = music.x;\n    \n\n    float angle = atan(vector.y, vector.x);\n    float len = length(vector);\n\n    // ring\n    float noise = perlinNoise( vec3(vector * noiseScale, iTime * noiseChangeSpeed) ) * 2.5  * musicVolume + 0.5;\n    float normalizedNoise = mix(0.3, 0.6, noise);\n    float distanceInputFromNoisy = distance(vector, normalizedNoise / len * vector);\n    \n    float brightness = light(lightIntensity, 10.0, distanceInputFromNoisy / 2.);\n    //brightness *= smoothstep(normalizedNoise - 0.1, distanceInputFromNoisy, len);\n    brightness *= musicVolume * 0.5;\n    float gradientSweep = len * cos(angle + iTime * gradientSweepSweep) * musicVolume;\n    \n    \n    // Non normalized noise underground\n    float undergroundNoize = smoothstep(2., noise * 1.2 * musicVolume, len);\n    \n    // color\n    vec3 color = mix(color1, color2, gradientSweep);\n    color = mix(color3, color, brightness);\n    color = color * undergroundNoize;\n    \n    return color.rgb;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 relativeCoordinates = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec3 color = draw(relativeCoordinates);\n\n    fragColor.rgb = color.rgb;\n}","name":"Image","description":"","type":"image"}]}