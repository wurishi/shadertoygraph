{"ver":"0.1","info":{"id":"XtG3R3","date":"1475682307","viewed":138,"name":"Mandelbrot neon","username":"vmednis","description":"Crude mandelbrot fractal implementation","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["green","mandelbrotfractal","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nCopyright (c) 2016 Valters Mednis\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n#define MAX_ITER 2000\n#define MAX_NUMBER 10\nvec2 findPosition(vec2 fragCoord, vec2 center, vec2 zoom)\n{\n    //Don't strech the fractal\n    vec2 scale = 1.0 / zoom;\n    if(iResolution.x > iResolution.y)\n    {\n        scale.x = scale.x / iResolution.y * iResolution.x;\n    }\n    else\n    {\n        scale.y = scale.y / iResolution.x * iResolution.y;\n    }\n    //Calculate the position\n    vec2 position = fragCoord / iResolution.xy * scale - (scale / 2.0) - center;\n    return position;\n}\n\n//Find out in how many iterations z = z^2 + c absolute value reaches a \"big number\"(MAX_NUMBER)\n//if it is > MAX_ITER, 0 is returned\nint mandelbrot(vec2 position)\n{\n    vec2 z = position;\n    for(int i = 1; i < MAX_ITER; i++)\n    {\n        //z = z^2 + position\n        vec2 newz;\n        newz.x = (z.x * z.x) - (z.y * z.y) + position.x;\n        newz.y = (2.0 * z.x * z.y) + position.y;\n        z = newz;\n        \n        //z.abs > MAX_NUMBER\n        if((z.x * z.x) + (z.y * z.y) > float(MAX_NUMBER))\n        {\n            return i;\n        }\n    }\n    return 0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 position = findPosition(fragCoord, vec2(0.5, 0.0), vec2(0.5));\n    //Decide color based on how many iterations it takes\n    vec3 color = vec3(102.0 / 255.0, 205.0 / 255.0, 170.0 / 255.0);\n    int iterations = mandelbrot(position);\n    if(iterations == 0)\n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n    else\n    {\n    \tfloat intensity = (sqrt(float(iterations)) / sqrt(float(MAX_ITER)));\n    \tfragColor = vec4(color * intensity, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}