{"ver":"0.1","info":{"id":"stlBWM","date":"1650987996","viewed":78,"name":"Vietnam Flag texture","username":"dormon","description":"Simple texture function for computing Vietnam Flag.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["flag","proceduraltexture","vietnam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"highp vec4 vietnamFlagTexture(highp vec2 uv )\n{\n  uv *= vec2(3.f,2.f);\n  const vec3  red    = vec3(0xda,0x25,0x1d)/vec3(0xff);\n  const vec3  yellow = vec3(0xff,0xff,0x00)/vec3(0xff);\n  const float radius = 0.6f;\n  const vec2  center = vec2(1.5f,1.f);\n  const mat2  rot    = mat2(\n    cos(radians(144.f)),-sin(radians(144.f)),\n    sin(radians(144.f)), cos(radians(144.f))\n  );\n\n  bool  parity = true;\n  bool  inter  = true;\n  vec2  starA  = vec2(0,radius);\n  for(uint i=0u;i<5u;++i){\n    vec2 starB  = rot*starA;\n    vec2 edge   = starB-starA;\n    vec2 normal = vec2(-edge.y,edge.x);\n    vec3 line   = vec3(normal,-dot(normal,starA+center));\n    float dist  = dot(line,vec3(uv,1.f));\n    starA       = starB;\n    parity = parity != (dist < 0.f);\n    inter  = inter  && (dist < 0.f);\n  }\n\n  float mixF = float((parity || inter) && distance(uv,center)<radius);\n  return vec4(mix(red,yellow,mixF),1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vietnamFlagTexture(uv);\n}\n","name":"Image","description":"","type":"image"}]}