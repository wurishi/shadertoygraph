{"ver":"0.1","info":{"id":"7dd3DS","date":"1630950505","viewed":61,"name":"Basics of Fragment Shaders - CL","username":"cLaBounty","description":"GPR-200 Assignment - Basics of Fragment Shaders","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["assignment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Create a Gradient that moves vertically\nvec3 questionOne(vec2 uv)\n{\n    return vec3(1, uv.y, 0);\n}\n\n// Create a split-screen of four quadrants. Choose any 4 colors\nvec3 questionTwo(vec2 uv)\n{\n    const vec3 COLOR_ONE = vec3(1, 0, 0);\n    const vec3 COLOR_TWO = vec3(1);\n    const vec3 COLOR_THREE = vec3(0);\n    const vec3 COLOR_FOUR = vec3(0, 0, 1);\n\n    vec3 retval;\n    if (uv.x > 0.5) {\n        if (uv.y > 0.5) {\n            retval = COLOR_ONE;\n        } else {\n            retval = COLOR_TWO;\n        }\n    } else {\n        if (uv.y > 0.5) {\n            retval = COLOR_THREE;\n        } else {\n            retval = COLOR_FOUR;\n        }\n    }\n\n    return retval;\n}\n\n// Calculate magnitude/brightness of a color\nfloat calculateBrightness(vec3 color)\n{\n    return sqrt(pow(color.x, 2.0) + pow(color.y, 2.0) + pow(color.z, 2.0));\n}\n\n\n// Create a \"heat\" finder\nvec3 questionThree(vec2 uv)\n{\n    const float X = 0.5;\n    const vec3 RED = vec3(1, 0, 0);\n    vec3 COLOR = vec3(0, uv.x, uv.y);\n    \n    if (calculateBrightness(COLOR) > X) {\n        return RED;\n    }\n    \n    return COLOR;\n}\n\n// Create a striped pattern of any two colors\nvec3 questionFour(vec2 uv)\n{\n    const int TOTAL_STRIPS = 7;\n    const vec3 COLOR_ONE = vec3(1, 0, 0);\n    const vec3 COLOR_TWO = vec3(0);\n    \n    if (int(uv.x * float(TOTAL_STRIPS)) % 2 == 0) {\n        return COLOR_TWO;\n    }\n    \n    return COLOR_ONE;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Questions\n    vec3 col = questionOne(uv);\n    //vec3 col = questionTwo(uv);\n    //vec3 col = questionThree(uv);\n    //vec3 col = questionFour(uv);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}