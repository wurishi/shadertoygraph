{"ver":"0.1","info":{"id":"cd2cWK","date":"1688171038","viewed":77,"name":"interlaced 3d template","username":"davidmachadosf","description":"Base code for interlaced 3d implementations","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3dmath"],"hasliked":0,"parentid":"DdjyWK","parentname":"lisergic experiment 3"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.141592;\n\nconst float vRot       =   .2;\nconst float vZoom      =   .1;\nconst float scaleZoom  =  20. ;\nconst float complexity =  15. ;\n\n\nconst vec3 a = vec3(  .698,   .258,   .118); // bgcolor\nconst vec3 b = vec3(  .051,   .453,   .850); \nconst vec3 c = vec3(-0.552,  5.361, -0.764);\nconst vec3 d = vec3(-0.503, -0.503,  8.113);\nvec3 palette( float t ) {\n    return a + b*cos( 1.28318*(c*t+d) );\n}\n\n\n\n\nvec4 function_TrantorLisergic(in vec2 uv, in float t, bool isLisergic){\n\n    float dist = length(uv);\n    \n    vec3  finalColor = vec3(0.0); // rgb black\n    \n    for (float i=0.; i<complexity; i++) {\n\n        float theta = 7.*PI*(i/7.);\n        float sin_t = sin(theta);\n        float cos_t = cos(theta);\n\n        mat2 m = mat2(    \n                   cos_t, -1.5*sin_t, \n                .5*sin_t,      cos_t);\n\n        uv *= m;\n        uv = fract(1.5*uv) - .5;\n\n        float d = length(uv) * exp(-dist);\n\n        if(isLisergic) {\n            d = cos(8.*d + t)/3.;\n        }\n        \n        d = abs(d);\n        d = pow(.01/d, 1.2);\n\n        vec3 col = palette(dist + .1*i + .2*t);\n        finalColor += col*d;\n    }  \n    \n    return vec4(finalColor, 1.0);\n}\n\nvec4 function_Trantor(in vec2 uv, in float t){\n    return function_TrantorLisergic(uv,t,false);\n}\n\nvec4 function_TrantorWaves(in vec2 uv, in float t){\n    return function_TrantorLisergic(uv,t,true);\n}\n\n\n\n\nvec4 f1(in vec2 xy, in float t){\n\n    float dist = length(xy)*t;\n    //return vec4(vec3(dist), 1.);\n    //return vec4(palette(dist), 1.0);\n    return vec4(vec3(1.-pow(dist,2.),cos(dist),sin(dist)), 1.0);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    float x = fragCoord.x; \n    float y = fragCoord.y;\n    float z = 0.;\n    float t = iTime;\n    \n    bool  isLeftEye = int(y)%2==0;\n    \n    \n    float zoom  = 1.0 + scaleZoom*sin(vZoom*t);\n    float rho   = vRot*t;\n    float sin_r = sin(rho);\n    float cos_r = cos(rho);\n    mat2  rot   = mat2( \n                   cos_r, -sin_r, \n                   sin_r,  cos_r );\n        \n    vec2  uv = (2.*fragCoord - iResolution.xy) / iResolution.y;\n    uv /= zoom;  // camera zoom\n    uv *= rot;   // camera rotation\n    \n    //fragColor = function_Trantor(uv,t);\n    fragColor = function_TrantorWaves(uv,t);\n    //fragColor = f1(uv,t);\n}\n\n","name":"Image","description":"","type":"image"}]}