{"ver":"0.1","info":{"id":"XljcRR","date":"1507174391","viewed":304,"name":"preAlpha Vector Field","username":"Chris_M_Thomasson","description":"Here is one of my vector fields in a GLSL pre-alpha experiment. Sorry for the verbose nature of the code: I am still trying to feel things out in GLSL. ;^o","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["fractal","math","circle","space","field","vector","art","parametric","trigonometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nPre-Alpha Vector Field by Chris M. Thomasson\nThe code is basic, and the math can be streamlined.\nThis is a basic experiment, not thinking of sheer performance yet.\n___________________________________*/\n\n\n// The number of points in the spiral\n#define CT_N 16\n\n// Viewport Axes\nstruct ct_axes\n{\n    float xmin;\n    float xmax;\n    float ymin;\n    float ymax;\n};\n    \n    \nct_axes ct_axes_from_radius(\n    in vec3 vpcircle\n){\n    return ct_axes(\n        vpcircle.x - vpcircle.z,\n        vpcircle.x + vpcircle.z,\n        vpcircle.y - vpcircle.z,\n        vpcircle.y + vpcircle.z\n    );\n}\n\n\n// Simple 2d Plane\nstruct ct_plane2d\n{\n    ct_axes axes;\n    float xstep;\n    float ystep;\n};\n    \n    \nct_plane2d ct_plane2d_create(\n    in ct_axes axes\n){\n    float awidth = axes.xmax - axes.xmin;\n    float aheight = axes.ymax - axes.ymin;\n    \n    float daspect = abs(iResolution.y / iResolution.x);\n    float waspect = abs(aheight / awidth);\n    \n    if (daspect > waspect)\n    {\n        float excess = aheight * (daspect / waspect - 1.0);\n        axes.ymax += excess / 2.0;\n        axes.ymin -= excess / 2.0;\n    }\n    \n    else if (daspect < waspect)\n    {\n        float excess = awidth * (waspect / daspect - 1.0);\n        axes.xmax += excess / 2.0;\n        axes.xmin -= excess / 2.0;\n    }\n    \n    return ct_plane2d(\n        axes,\n        (axes.xmax - axes.xmin) / iResolution.x,\n        (axes.ymax - axes.ymin) / iResolution.y\n    );\n}\n\n\nvec2 ct_plane2d_project(\n\tin ct_plane2d self,\n    in vec2 z\n){\n\treturn vec2(\n        self.axes.xmin + z.x * self.xstep,\n        self.axes.ymin + z.y * self.ystep\n    );\n}\n\n\n// A vector field point\nstruct ct_vfpoint\n{\n    vec2 p;\n    float m;\n};\n\n\n// Our global per-pixel points\nct_vfpoint g_vfp[CT_N];\n\n\n// Gain a normalized vector from p, \n// using a power of npow.\nvec2 ct_vfield_normal(\n    in vec2 p,\n    float npow\n){\n    vec2 g = vec2(0.0, 0.0);\n    \n    const int imax = CT_N;\n    \n    for (int i = 0; i < imax; ++i)\n    {\n        vec2 dif = g_vfp[i].p - p;\n        float sum = dif[0] * dif[0] + dif[1] * dif[1];\n        float mass = pow(sum, npow);\n        \n      \tg[0] = g[0] + g_vfp[i].m * dif[0] / mass;\n      \tg[1] = g[1] + g_vfp[i].m * dif[1] / mass;\n        \n        \n    }\n    \n    return normalize(g);\n}\n\nfloat ct_normal_pi(\n    in vec2 z\n){\n    vec2 d = vec2(z[0] * z[0] + z[1] * z[1]);\n    float a = atan(d[1], d[0]);\n    if (a < 0.0) a += 6.28318;\n    a /= 6.28318;\n    return a;\n}\n\n\n// Vector Pixel Iteration\nvec4 ct_vpixel(\n    in vec2 z,\n    in vec2 c,\n    in int n,\n    in float npow\n){\n    vec2 vn = ct_vfield_normal(z, npow);\n    float npi = ct_normal_pi(vn);\n    \n    float blah = length(vn);\n    \n    if (blah < .01)\n    {\n        return vec4(1.0, 1.0, 0.0, 1.0);\n    }\n    \n    return vec4(vn.x, vn.y, vn.x * vn.y, 1.0);\n}\n\n\n// High-Level Entry\nvec4 ct_main(\n    in vec2 c\n){\n    \n    float bradius = 1.0;\n    float abase = 6.28318 / float(CT_N);\n    float arbase = bradius / float(CT_N);\n    \n    for (int i = 0; i < CT_N; ++i)\n    {\n        float angle = abase * float(i) + cos(iTime * .1);\n        float radius = 1.2 + arbase * float(i) + abs(sin(iTime)) * .7;\n       \n        vec2 z = vec2(\n            cos(angle) * abs(cos(angle + sin(iTime * .1))) * radius,\n            sin(angle) * abs(sin(angle)) * radius\n        );\n        \n        g_vfp[i] = ct_vfpoint(z, 1.0);\n    }\n    \n    return ct_vpixel(c, c, 128, 2.0 + abs(cos(iTime * 3.0)) * 7.14);\n}\n\n\n// Raw Entry.\nvoid mainImage(\n  \tout vec4 fragColor, \n\tin vec2 fragCoord\n){\n    vec3 vpcircle = vec3(0.0, 0.0, 1.618);\n    \n    ct_plane2d plane = ct_plane2d_create(\n        ct_axes_from_radius(vpcircle)\n    );\n    \n    vec2 c = ct_plane2d_project(plane, fragCoord);\n    \n    // Exec...\n    vec4 color = ct_main(c);\n    \n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}