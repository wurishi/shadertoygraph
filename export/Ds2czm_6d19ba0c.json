{"ver":"0.1","info":{"id":"Ds2czm","date":"1687535496","viewed":95,"name":"RotateSin","username":"Ibvwg","description":"Rotation with quaternions","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["sin","rotation","quaternions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 mulQuat(vec4 q1, vec4 q2){\n    //scalar and vector form\n    return vec4(q1.x * q2.x - dot(q1.yzw, q2.yzw),\n    q1.x * q2.yzw + q2.x * q1.yzw + cross(q1.yzw, q2.yzw)\n    );\n    \n    \n    /* Hamilton product\n    return vec4(\n    q1.x * q2.x - q1.y * q2.y - q1.z * q2.z - q1.w * q2.w,\n    q1.x * q2.y + q1.y * q2.x + q1.z * q2.w - q1.w * q2.z, \n    q1.x * q2.z + q1.z * q2.x + q1.w * q2.y - q1.y * q2.w,\n    q1.x * q2.w + q1.w * q2.x + q1.y * q2.z - q1.z * q2.y\n    );\n    */\n}\nvec3 rotPoint(vec3 rot, vec3 point, float a){\n    a *= 3.1415 / 360.;\n    float c = cos(a);\n    float s = sin(a);\n    vec4 q = vec4(c, s * rot);\n    vec4 _q = vec4(q.x, -q.yzw);\n    vec4 p = vec4(0., point);    \n    return mulQuat(mulQuat(q, p), _q).yzw;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ((fragCoord - 0.5 * iResolution.xy) / iResolution.y) * 10.;\n    vec3 col = vec3(0.);\n    \n    float alpha = 70. * 3.1415 / 180.;\n    vec3 rot = vec3(cos(alpha), sin(alpha), 0.);\n    vec3 coords;\n\n//Decart coords\n    for (float x = - 20.; x < 20.; x+=0.4){\n        float y = sin(x);\n        coords = rotPoint(rot, vec3(x, y, 0.), iTime * 20.);\n        col += (smoothstep(-1., 1., coords.z) * 0.01  + 0.001) / length(uv - coords.xy);\n    }\n\n// Polar coords\n/*\n    for (float a = 0.; a < 60.; a+=0.5){       \n        float r = (sin(a) * sqrt(abs(cos(a)))) / (sin(a) + 7./5.) - 2. * sin(a) + 2.;\n        float x = cos(a) * r;\n        float y = sin(a) * r;\n        coords = rotPoint(rot, vec3(x, y, 0.), iTime * 20.);\n        col += 0.001 / length(uv - coords.xy);\n        coords = rotPoint(vec3(0., cos(alpha), sin(alpha)), vec3(x, y, 0.), iTime * 20.);\n        col += 0.001 / length(uv - coords.xy);       \n    } \n*/\n    col *= vec3(125., 249., 255.) / 255.;\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}