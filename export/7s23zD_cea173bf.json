{"ver":"0.1","info":{"id":"7s23zD","date":"1617087289","viewed":116,"name":"Mandelbrot Set (smooth coloring)","username":"adamjmurray","description":"Mandelbrot Set fractal with full-spectrum coloration based on how quickly each pixel is determined to be outside the Mandelbrot Set. Includes a \"count smoothing\" function for smooth blending between colors. Compare to https://www.shadertoy.com/view/fsXGzB","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractals"],"hasliked":0,"parentid":"fsXGzB","parentname":"Mandelbrot Set (all hues)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float iterations = 50.0;\nvec2 offset = vec2(-0.5, 0);\nfloat zoom = 1.0;\n\n#define cmul(A,B) mat2(A,-A.y,A.x)*B \n\nvec2 normalizedCoord(vec2 fragCoord) {\n    vec2 norm = fragCoord/iResolution.xy * 2.0 - 1.0; // normalize to (-1, 1) range\n    norm.x *= iResolution.x/iResolution.y; // normalize to square aspect ratio\n    return norm;\n}\n\nvec3 hsl2rgb( in vec3 c ) { // Â© 2014 Inigo Quilez, MIT license, see https://www.shadertoy.com/view/lsS3Wc\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\n// https://www.linas.org/art-gallery/escape/smooth.html\n// https://iquilezles.org/articles/msetsmooth\nfloat smoothCount(float escapeCount, vec2 escapeValue) {\n    return escapeCount - log2(log(length(escapeValue)));\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {   \n    vec2 z = vec2(0, 0);\n    vec2 c = normalizedCoord(fragCoord)/zoom + offset;\n\n    float i = 0.0;  \n    while (i < iterations) {\n        z = cmul(z, z) + c;\n        \n        // normally we'd check if the length(z) is > 2.0        \n        // but we get better smoothing if we increase the threshold:\n        if (length(z) > 4.0) break;\n        \n        i++;\n    }\n  \n    if (i >= iterations) {\n        fragColor = vec4(0,0,0,1);\n    } else {\n        float hue = smoothCount(i, z) / iterations;\n        vec3 hsl = vec3(hue, 0.5, 0.5);\n        fragColor = vec4(hsl2rgb(hsl), 1);\n    }\n}","name":"Image","description":"","type":"image"}]}