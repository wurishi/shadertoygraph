{"ver":"0.1","info":{"id":"td2yDm","date":"1595350584","viewed":1323,"name":"Shader : Edge Detection","username":"Gijs","description":"basic edge detection using central differences.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["basic","detection","edge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    // I suggest playing around with this value\n    float h = 2.0;\n    \n    vec4 o = texture(iChannel0, (fragCoord + vec2( 0, 0))/iResolution.xy);\n\tvec4 n = texture(iChannel0, (fragCoord + vec2( 0, h))/iResolution.xy);\n    vec4 e = texture(iChannel0, (fragCoord + vec2( h, 0))/iResolution.xy);\n    vec4 s = texture(iChannel0, (fragCoord + vec2( 0,-h))/iResolution.xy);\n    vec4 w = texture(iChannel0, (fragCoord + vec2(-h, 0))/iResolution.xy);\n    \n    vec4 dy = (n - s)*.5;\n    vec4 dx = (e - w)*.5;\n    \n    vec4 edge = sqrt(dx*dx + dy*dy);\n    vec4 angle = atan(dy, dx);\n   \n    fragColor.xyz = edge.xyz * 5.0;\n   \n    // Below is another way to make an edge detector, \n    // It is invariant under intensity-scalings of the image\n    // and linear illumination differences.\n    // This should make it more \"human-sight\" like\n   \n    //vec4 laplacian = n + e + s + w - 4.0 * o;\n    //fragColor.xyz = abs(laplacian.xyz/o.xyz) * 1.0;\n \n}","name":"Image","description":"","type":"image"}]}