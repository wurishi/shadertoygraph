{"ver":"0.1","info":{"id":"DltfWX","date":"1701747480","viewed":33,"name":"Fork UCSD CSE 1 167toyacco 257","username":"167toyaccount","description":"CSE 167 HW5 by Shijie Wang","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["boids"],"hasliked":0,"parentid":"ddtyDs","parentname":"UCSD CSE 167 Boids template"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Smooth HSV2RGB from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = vec4(0.5, 0.5, 0.5, 1.0);\n    // Loop over all boids\n    vec4 bcolor = vec4(0.0, 0.0, 0.0, 1.0);\n    bool hit = false;\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 pos_vel = texelFetch(iChannel0, tex_pos, 0);\n        if (distance(fragCoord, pos_vel.xy) < BOIDS_SIZE) {\n            vec3 rgb = hsv2rgb(vec3((float(i)+0.5) / float(NUM_BOIDS), 1.0, 0.9));\n            bcolor += vec4(rgb, 1.0);\n            hit = true;\n        }\n    }\n    if (hit) {\n        color = bcolor;\n    }\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame == 0) {\n        // initialize the buffer\n        vec4 pos_vel = texture(iChannel1, fragCoord/iChannelResolution[1].xy);\n        pos_vel.xy = iResolution.xy / 2.0 + (pos_vel.xy - 0.5) * iResolution.xy * 0.2;\n        pos_vel.zw = (pos_vel.zw - 0.5) * iResolution.xy * 1.0;\n        fragColor = pos_vel;\n        return;\n    }\n    ivec2 iFragCoord = ivec2(fragCoord);\n    vec4 pos_vel = texelFetch(iChannel0, iFragCoord, 0);\n    vec2 pos = pos_vel.xy;\n    vec2 vel = pos_vel.zw;\n    // ID of the current Boid\n    int my_id = int(iFragCoord.y) * int(iResolution.x) + int(iFragCoord.x);\n    //int my_id = int(iFragCoord.y) * int(iChannelResolution[0].x) + int(iFragCoord.x);\n\n    // Implement Boids here\n    float smax = 10.0;\n    float smin = 5.0;\n    float ds = 30.0;\n    float dv = 150.0;\n    float dleft = 200.0;\n    float dright = iResolution.x - 200.0;\n    float dtop = 160.0;\n    float dbottom = iResolution.y - 160.0;\n    float as = 0.02;\n    float ac = 0.001;\n    float aa = 0.03;\n    float ab = 0.5;\n    /*float as = 0.02;\n    float ac = 0.001;\n    float aa = 0.03;\n    float ab = 0.5;*/\n    \n    vec2 fs = vec2(0,0);\n    vec2 fc = vec2(0,0);\n    vec2 fa = vec2(0,0);\n    vec2 fb = vec2(0,0);\n    vec2 f;\n    float ns = 0.0;\n    float nv = 0.0;\n    \n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 itex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 ipos_vel = texelFetch(iChannel0, itex_pos, 0);\n        if (i == my_id) {\n            continue;\n        }\n        \n        if (distance(pos, ipos_vel.xy) < ds) {\n            fs += pos - ipos_vel.xy ;\n            ns += 1.0;\n        }\n        if (distance(pos, ipos_vel.xy) < dv) {\n            fc += ipos_vel.xy;\n            fa += ipos_vel.zw;\n            nv += 1.0;\n        }\n    }\n    \n    \n    if (ns != 0.0) {\n        fs = fs/ns;\n    }\n    \n    if (nv != 0.0) {\n        fc = fc/nv - pos;\n        fa = fc/nv - vel;\n    } else {\n        fc = -pos;\n        fa = -vel;\n    }\n    \n    fb = vec2( ((pos.x < dleft) ? 1 : 0) - ((pos.x > dright) ? 1 : 0), \n               ((pos.y < dtop) ? 1 : 0) - ((pos.y > dbottom) ? 1 : 0) );\n    f = as * fs + ac * fc + aa * fa + ab * fb;\n\n    vel += f;        \n    if (length(vel) > 0.0) {\n        if (length(vel) > smax) {\n            vel = vel * (smax/length(vel));\n        }\n        if (length(vel) < smin) {\n            vel  = vel * (smin/length(vel));\n        }\n    }\n    pos += vel;\n    \n    fragColor = vec4(pos, vel);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUM_BOIDS 200\n#define BOIDS_SIZE 10.0\n","name":"Common","description":"","type":"common"}]}