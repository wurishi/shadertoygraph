{"ver":"0.1","info":{"id":"clfcz2","date":"1691017892","viewed":60,"name":"Gravity like particles","username":"jeffbustercase","description":"Learning how to use variables to store state of particles\n(Try clicking on spots to make them dumbly try to follow you)\n#idontknowwhatamdoing","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["interactive","particles","gravity","variables"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 updateObj(Obj obj, int addr)\n{\n    vec2 pos = fetchData(iChannel0, ivec2(obj.idx,addr)).xy;\n    return pos;\n}\n\nvec3 render(vec2 uv, int addr)\n{\n    vec3 col = vec3(0);\n    \n    Obj list[QTD];\n    \n    for(int i=0;i<QTD;i++)\n    {\n        float _i = float(i+1)*0.1;\n        vec2 p = vec2(_i*8.0,_i*5.0);\n        vec3 mat = vec3(texture(iChannel1,p).xyz);\n        list[i] = createObj(mat);\n    }\n    \n    for(int i=0;i<QTD;i++)\n    {\n        Obj obj = list[i];\n        obj.pos = updateObj(obj, addr);\n        vec2 ipos = uv + obj.pos;\n        if(abs(ipos.x)>SCREEN_SIZE*SCALE.x) continue;\n        if(abs(ipos.y)>SCREEN_SIZE) continue;\n        \n        float l = length(ipos);\n        if(DISPLAY_TYPE==DISPLAY_PARTICLES)\n        {\n            l = step(l,ORB_SIZE);\n            if(l < 0.0) continue;\n        \n            vec3 c = obj.mat * (l);\n            if(col.xyz == vec3(0)) col = c;\n            else col = mix(c,col,1.0);\n        } else {//else DISPLAY_SPARSE\n            col += smoothstep(5.0* ORB_SIZE,0.1 * ORB_SIZE,l) * obj.mat;\n        }\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/ON_SCREEN;\n    uv *= SCALE;\n    \n    vec3 col = vec3(0);\n    col = render(uv, 0);\n    /*const int lim = 1;\n    for(int i=0;i<lim;i++)\n    {\n        col += render(uv, iFrame*i);\n    }\n    \n    col /= float(lim);\n    */\n    col = pow(col,vec3(.4545));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 initial[QTD];\n    \n    for(int i=0;i<QTD;i++)\n    {\n        float _i = float(i)*0.001;\n        vec2 p = vec2(_i*6.0,_i*14.0);\n        p = (p);\n        float x = texture(iChannel1,p).x;\n        p = (p+p+p);\n        float y = texture(iChannel1,p).x;\n        vec2 posIni = vec2(x,y);\n        posIni = posIni*2.0-1.0;\n        posIni *= DISTANCE_BETWEEN;\n        initial[i] = vec4(posIni,0.0,0.0);\n    }\n    \n    for(int i=0;i<QTD;i++)\n    {\n        ivec2 obj = ivec2(i,fragCoord.y);\n        if(storeData(fragCoord, obj))\n        {\n            fragColor = initial[i];\n        \n            if(iFrame > 0)\n            {\n                vec2 pos = fetchData(iChannel0, obj).xy;\n                vec2 vel = fetchData(iChannel0, obj).zw;\n                \n                for(int j=0;j<QTD;j++)\n                {\n                    if(j==i) continue;\n                    ivec2 obj2 = ivec2(j,fragCoord.y);\n                    vec2 pos2 = vec2(0);\n                    if(GRAV_ORIGIN==GRAV_ORIGIN_MOUSE\n                        && iMouse.z > 0.0\n                        )\n                    {\n                        pos2 = m;\n                    } else {\n                        pos2 = fetchData(iChannel0, obj2).xy;    \n                    }\n                    vec2 vec = normalize(pos2 - pos);\n                    vel += vec * MOV_FORCE;\n                    pos += vel;\n                }\n                #if defined CLOSED_BOX\n                bool hitHorizontal = abs(pos.x)>(SCREEN_SIZE*SCALE.x);\n                bool hitVertical = abs(pos.y)>SCREEN_SIZE;\n                #if defined COLLISION\n                    if(hitHorizontal) vel = reflect(vel,vec2(sign(pos.x),0.0));\n                    if(hitVertical) vel = reflect(vel,vec2(0.0,sign(pos.y)));\n                #endif\n                if(hitHorizontal) pos.x = sign(pos.x) * SCREEN_SIZE*SCALE.x;\n                if(hitVertical) pos.y = sign(pos.y) * SCREEN_SIZE;\n                #if defined LOSE_VEL_ON_COLLISION\n                if(hitHorizontal) vel.x = vel.x*(1.0-LOSE_PERCENT);\n                if(hitVertical) vel.y = vel.y*(1.0-LOSE_PERCENT);\n                #endif\n                #endif\n                \n                \n                fragColor = vec4(pos,vel);\n            }\n        }\n    }\n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define storeData(buf_pos, addrs) ivec2(buf_pos) == addrs\n#define fetchData(buf_pos, addrs) texelFetch(buf_pos, addrs, 0)\n#define MOV_FORCE 0.000001\n#define ORB_SIZE 0.1\n#define t iTime\n#define DISTANCE_BETWEEN 4.0\n#define GRAV_ORIGIN_MOUSE 1\n#define GRAV_ORIGIN_THEMSELVES 0\n// will fall to them if no mouse\n#define GRAV_ORIGIN GRAV_ORIGIN_MOUSE\n#define SCREEN_SIZE 3.0\n#define RES iResolution.xy\n#define ON_SCREEN RES*SCREEN_SIZE*2.0-SCREEN_SIZE\n#define SCALE vec2(RES.x/RES.y,1.0)\n#define m (-(iMouse.xy/ON_SCREEN) * SCALE)\n#define DISPLAY_PARTICLES 0\n#define DISPLAY_SPARSE 1\n#define DISPLAY_TYPE DISPLAY_PARTICLES\n#define CLOSED_BOX\n#define COLLISION\n#define LOSE_VEL_ON_COLLISION\n#define LOSE_PERCENT 0.25\n\n#define QTD 35\n\nint ident = 0;\nstruct Obj {\n    vec2 pos;\n    int idx;\n    vec2 vel;\n    vec3 mat;\n};\n\nObj createObj(vec3 mat)\n{\n    Obj o;\n    o.pos = vec2(0);\n    o.idx = ident++;\n    o.vel = vec2(0);\n    o.mat = mat;\n    return o;\n}\n\n\nconst ivec2 OBJ1 = ivec2(0,0);\nconst ivec2 OBJ2 = ivec2(1,0);\nconst ivec2 OBJ3 = ivec2(3,0);","name":"Common","description":"","type":"common"}]}