{"ver":"0.1","info":{"id":"4c2Bzd","date":"1725383627","viewed":24,"name":"Practice (Link)","username":"Quill","description":"For a Computer Graphics assignment","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//This function is copied from https://iquilezles.org/articles/distfunctions/. It is the Link (exact) function.\nfloat sdLink( vec3 p, float le, float r1, float r2 )\n{\n    vec3 q = vec3( p.x, max(abs(p.y)-le,0.0), p.z );\n    return length(vec2(length(q.xy)-r1,q.z)) - r2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    // apply same scale to x pixels\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //subtracting 0.5 moves origin to middle of window\n    //however x is at a different scale, so we need to scale\n    //based on aspect ratio\n    uv.x = uv.x - 0.5*(iResolution.x/iResolution.y);\n    uv.y = uv.y - 0.5;\n    \n    //set background color\n    vec3 col = vec3(0.0);\n    \n    //distance along ray\n    float t = 0.0;\n    \n    //position and size of the sdf sphere\n    vec3 linkPos = vec3(-0.39,0.0,40.0);\n    const float len = 0.15, rad1 = 0.2, rad2 = 0.0;\n    \n    //starting point of ray and the direction it follows\n    vec3 pt = vec3(uv.x, uv.y, 0.0);\n    vec3 dir = normalize(vec3(0.0, 0.0, 1.0));\n\n    //loop that allows us to keep moving along the ray \n    //until we hit the sphere or until we run out of \n    //loop iterations (and hit nothing)\n    for( int i = 0; i < 25; i++){\n    \n        //calc positions from view rays\n        vec3 pos = pt + dir * t;\n        \n        //get distance from position to sphere\n        //subtract spherePos from pos allows us to \"move\"\n        // the position of the sphere in the world\n        //otherwise it is stuck at the world origin\n        float dist = sdLink(pos - linkPos, len, rad1, rad2);\n              \n        if(dist < 0.1){ //point on ray is close enough\n                        //we'll call this a \"hit\"\n            col = vec3(1.0); //lets color this fragment\n                             // a \"sphere color\"\n            //surface normal\n            vec3 normal = normalize(pos - linkPos);\n            \n            //first value: horizontal\n            //second value: vertical\n            col *= dot(normal, normalize(vec3(10.0, 0.0, -1.0)));\n            col *= dot(normal, normalize(vec3(10.0, 0.0, -1.0)));\n            break; //stop checking\n        }\n        //update distance along ray if haven't hit yet\n        t += dist;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}