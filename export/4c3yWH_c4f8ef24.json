{"ver":"0.1","info":{"id":"4c3yWH","date":"1730826403","viewed":95,"name":"Pendulum Multi-Joint Test","username":"8InfinityTaco8","description":"A fork of the previous test of which i will also add physics to.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["sin","pendulum","oscilation"],"hasliked":0,"parentid":"Xc3yWH","parentname":"Pendulum Test"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool isOnLineSegment(vec2 p, vec2 a, vec2 b) {\n    vec2 ab = b - a;\n    vec2 ap = p - a;\n    float d = dot(ab, ap) / dot(ab, ab);\n    return d >= 0.0 && d <= 1.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 center = vec2(0.0, 0.58);\n    float time = iTime;\n    \n    // Pendulum parameters\n    float pendulumLength1 = 0.5;\n    float pendulumLength2 = 0.5;\n    float pendulumLength3 = 0.5;\n    float angle1 = 0.5 * sin(time);\n    float angle2 = 0.5 * sin(time + 1.0);\n    float angle3 = 0.5 * sin(time + 2.0);\n    \n    // Calculate joint positions\n    float verticalOffset = 0.1;\n    vec2 joint1 = center + vec2(0.0, verticalOffset);\n    vec2 joint2 = joint1 + vec2(pendulumLength1 * sin(angle1), -pendulumLength1 * cos(angle1));\n    vec2 joint3 = joint2 + vec2(pendulumLength2 * sin(angle2), -pendulumLength2 * cos(angle2));\n    vec2 joint4 = joint3 + vec2(pendulumLength3 * sin(angle3), -pendulumLength3 * cos(angle3));\n    \n    // Start with black background\n    vec3 color = vec3(0.0);\n    \n    // Drawing parameters\n    float radius = 0.02;\n    float lineThickness = 0.01;\n    vec3 lineColor = vec3(0.8, 0.1, 0.1);\n    \n    // Draw lines between joints\n    vec2[4] points = vec2[4](joint1, joint2, joint3, joint4);\n    for(int i = 0; i < 3; i++) {\n        vec2 start = points[i];\n        vec2 end = points[i + 1];\n        float dist = abs((uv - start).y * (end - start).x - (uv - start).x * (end - start).y) / length(end - start);\n        if (dist < lineThickness && isOnLineSegment(uv, start, end)) {\n            color = lineColor;\n        }\n    }\n    \n    // Draw joints with different colors\n    vec3[4] jointColors = vec3[4](\n        vec3(0.1, 0.1, 0.8),  // Blue for joint 1\n        vec3(0.1, 0.8, 0.1),  // Green for joint 2\n        vec3(0.8, 0.8, 0.1),  // Yellow for joint 3\n        vec3(0.8, 0.1, 0.8)   // Purple for joint 4\n    );\n    \n    for(int i = 0; i < 4; i++) {\n        float dist = length(uv - points[i]);\n        if (dist < radius) {\n            color = jointColors[i];\n        }\n    }\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}