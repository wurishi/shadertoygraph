{"ver":"0.1","info":{"id":"Wtl3zS","date":"1556737961","viewed":172,"name":"Disk-tortion","username":"tpfto","description":"Hexagonally packed disks deformed by a Möbius transformation.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","math","complex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2019 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Use a (complex) Möbius transformation to distort a set of hexagonally packed disks\n\n#define IS3 1.0/sqrt(3.0)\n\n// some colors\n// #define C1 vec3(0.18, 0.31, 0.31)\n// #define C2 vec3(0.1, 0.8, 0.6)\n#define C1 vec3(0.8996, 0.604, 0.0127)\n#define C2 vec3(0.184, 0.112, 0.0243)\n\n// XY range of the display.\n#define DISP_SCALE 4.0 \n\n// from Fabrice Neyret, \n#define cis(a) vec2( cos(a), sin(a) )\n#define cmul(A,B) ( mat2( A, -(A).y, (A).x ) * (B) )\n#define cdiv(A,B) ( cmul( A, vec2( (B).x, -(B).y ) ) / dot(B, B) )\n\n// uncomment to see a square packing instead\n// #define SQUARE\n\n// Möbius transformation parametrized by its fixed points g1, g2 and pole zi, https://en.wikipedia.org/wiki/M%C3%B6bius_transformation#Poles_of_the_transformation\n\nvec2 moebius( in vec2 g1, in vec2 g2, in vec2 zi, in vec2 z )\n{\n\treturn cdiv(cmul(g1 + g2 - zi, z) - cmul(g1, g2), z - zi);\n}\n\n#ifndef SQUARE\n\n// generate hexagonally packed disks\n\nfloat hexpack(vec2 p)\n{\n      float sc = 3.0 * DISP_SCALE / iResolution.y;\n      float x = p.x, y = p.y * IS3;\n\n      float u = mod(x - y, 1.0), v = mod(2.0 * y, 1.0);\n      float qf = 4.0 * (u + v) * (u + v) - 4.0 * u * v - 1.0;\n      float qu = 4.0 * (1.0 - 2.0 * u - v);\n      float qv = 4.0 * (1.0 - u - 2.0 * v);\n    \n      return min(min(smoothstep(0.0, sc, qf), smoothstep(0.0, sc, qu + qf)),\n                 min(smoothstep(0.0, sc, qv + qf), smoothstep(0.0, sc, 4.0 + qu + qv + qf)));\n}\n\n#else\n\n// generate square packed disks\n\nfloat sqrpack(vec2 p)\n{\n      float sc = 0.75 * DISP_SCALE / iResolution.y;\n      vec2 u = 0.5 - mod(p, 1.0);\n    \n      return 1.0 - smoothstep(0.0, sc, 0.25 - dot(u, u));\n}\n\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        vec2 aspect = iResolution.xy / iResolution.y;\n        vec2 uv = ( fragCoord.xy / iResolution.y ) - 0.5 * aspect;\n        uv *= DISP_SCALE;\n\n        // specify the fixed points; vary the pole's position\n        vec2 w = moebius(vec2(1.0, 1.0), vec2(1.0, -1.0), vec2(7.0, 5.0) * cis(iTime), uv);\n    \n        // generate the packed disks\n        #ifndef SQUARE\n        float c = hexpack(w);\n        #else\n        float c = sqrpack(w);\n        #endif\n\n        vec3 col = mix(C2, C1, c);\n\n        fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}