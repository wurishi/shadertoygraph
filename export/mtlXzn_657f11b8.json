{"ver":"0.1","info":{"id":"mtlXzn","date":"1674271336","viewed":94,"name":"metal ripple uv 9194826920706","username":"HaleyHalcyon","description":"aaa","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["aaaaa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define REMAP 1\n\nconst float TURN = acos(-1.) * 2.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2. * fragCoord - iResolution.xy)/length(iResolution.xy);\n    uv = uv / 2.;\n    float t = fract(iTime);\n    \n    vec2 tx = vec2(0);\n    vec2 uv_ = uv + vec2(0., 0.02);\n    float r = length(uv_);\n    tx += 1. * uv_ * cos(96. * r - 1. * t * TURN);\n    tx += vec2(0.05,0.01) * cos(96. * r - 1. * t * TURN);\n    uv_ = uv + vec2(0.017, -0.01);\n    r = length(uv_);\n    tx += 1. * uv_ * cos(96. * r - 1. * (t + 1./3.) * TURN);\n    uv_ = uv + vec2(-0.017, -0.01);\n    r = length(uv_);\n    tx += 1. * uv_ * cos(96. * r - 1. * (t + 2./3.) * TURN);\n    \n    \n    \n    // Time varying pixel color\n#if REMAP == 0\n    vec4 col = texture(iChannel0, uv + 0.5);\n#else\n    vec4 col = texture(iChannel0, mix(uv, tx, 0.125) + 0.5);\n    //vec4 patternCol = texture(iChannel1, mix(uv, tx, 1./256.) + 0.5);\n    //col.rgb = mix(col.rgb, patternCol.rgb, patternCol.a);\n#endif\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float TURN = acos(-1.) * 2.;\n#define POLAR(t) (cos((t + vec2(0., 1. / 4.)) * TURN))\n#define WEIGHT(r) (exp2(-r * 32.))\n\n// overexposure filter\nvec3 overexpose(vec3 rgb) {\n    return rgb + vec3(\n      max(0., rgb.g - 1.) + max(0., rgb.b - 1.),\n      max(0., rgb.b - 1.) + max(0., rgb.r - 1.),\n      max(0., rgb.r - 1.) + max(0., rgb.g - 1.)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = fract(iTime / 8.);\n    vec2 uv = fragCoord / iResolution.xy;\n    //fragColor = vec4(uv.x, uv.y, 0.0, 1.0);\n    \n    vec2 center = vec2(0.5);\n    vec3 col = (0.5 - length(uv - center)) * vec3(0.4);\n    \n    center = vec2(0.5, 0.55);\n    col += exp2((length(uv - center) - 0.5) * 32.) * vec3(1.5);\n    \n    center = vec2(0.4, 0.6) + vec2(0.05, 0.03) * POLAR(t + 0.25);\n    col += WEIGHT(length(uv - center) * 3.) * vec3(1.2);\n    \n    center = vec2(0.5, 0.7) + vec2(0.04, 0.04) * POLAR(t + 0.25);\n    col += WEIGHT(length(uv - center) * 2.) * vec3(1.4);\n    \n    center = vec2(0.62, 0.52) + vec2(0.03, 0.05) * POLAR(t + 0.25);\n    col += WEIGHT(length(uv - center) * 6.) * vec3(0.9);\n    \n    center = vec2(0.7, 0.36) + vec2(0.06, 0.06) * POLAR(t + 0.25);\n    col += WEIGHT(length(uv - center) * 2.) * vec3(0.4);\n    \n    \n    \n    center = vec2(0.5, 0.3) + vec2(0.2, 0.1) * POLAR(t);\n    col += WEIGHT(length(uv - center)) * vec3(1.5, 0, 0);\n    \n    center = vec2(0.8, 0.6) + vec2(0.14, 0.18) * POLAR(t + 0.7);\n    col += WEIGHT(length(uv - center)) * vec3(0, 1.5, 0);\n    \n    center = vec2(0.3, 0.6) + vec2(0.2, 0.24) * POLAR(t + 0.15);\n    col += WEIGHT(length(uv - center)) * vec3(0, 0, 1.5);\n    \n    \n    center = vec2(0.6, 0.4) + vec2(0.25, 0.15) * POLAR(t + 0.2);\n    col += WEIGHT(length(uv - center)) * vec3(1, 1, 0);\n    \n    center = vec2(0.7, 0.3) + vec2(0.16, 0.21) * POLAR(t + 0.6);\n    col += WEIGHT(length(uv - center)) * vec3(0, 1, 1);\n    \n    center = vec2(0.2, 0.8) + vec2(0.16, 0.14) * POLAR(t + 0.35);\n    col += WEIGHT(length(uv - center)) * vec3(1, 0, 1);\n    \n    \n    col = overexpose(col);\n    \n    fragColor = vec4(col, 1.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    float v = max(\n        step(abs(1. - 2. * fract(uv.x * 8.)), .1),\n        step(abs(1. - 2. * fract(uv.y * 8.)), .1)\n    );\n    \n    fragColor = vec4(0,1,0,v);\n}","name":"Buffer B","description":"","type":"buffer"}]}