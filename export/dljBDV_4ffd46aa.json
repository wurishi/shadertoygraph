{"ver":"0.1","info":{"id":"dljBDV","date":"1697035283","viewed":103,"name":"StructTensor","username":"ascomycody","description":"Iterative image processing with bilateral filter to preserve edges while simplifying shapes. Can be used to approximate anisotropic diffusion with images. First 8 frames of the shader are used for iterations, but this is a static image filter","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["imageprocessing","kernel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n    vec2 d = rerez;\n    vec4 c = texture(ic3, p);\n    \n    fragColor = c;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define SOBELMAG\n\n#define BLUR 20.\n#define SMOOTH int(floor(BLUR))*5+3\n\n#define LICLEN 100\n\n#define ic0 iChannel0\n#define ic1 iChannel1\n#define ic2 iChannel2\n#define ic3 iChannel3\n#define rerez vec2(1. / iResolution.x, 1. / iResolution.y)\n#define pi 3.1415926535897\n#define twopi 6.28318530717\n#define e 2.718281828\n#define ra 0.\n#define ga (2. * pi) / 3.\n#define ba (4. * pi) / 3.\n\n#ifdef SOBELMAG\n#define x_sobel mat3(vec3(3,0,-3),vec3(10,0,-10),vec3(3,0,-3))\n#define y_sobel mat3(vec3(3,10,3),vec3(0,0,0),vec3(-3,-10,-3))\n#else\n#define x_sobel mat3(vec3(1,0,-1),vec3(2,0,-2),vec3(1,0,-1))\n#define y_sobel mat3(vec3(1,2,1),vec3(0,0,0),vec3(-1,-2,-1))\n#endif\n\n\nfloat lum(vec4 col){\n    return (dot(col.rgb, vec3(0.21,0.72,0.07)));\n}\n\nvec2 sobel2d(in sampler2D a, in vec2 p, in vec2 d){\n    mat3 b;\n    float cx;\n    float cy;\n    for(int x = -1; x <= 1; x++){\n    for(int y = -1; y <= 1; y++){\n        int i = x + 1;\n        int j = y + 1;\n        vec2 o = p + vec2(float(x), float(y)) * d;\n        b[i][j] = lum(texture(a, o));\n        cx += b[i][j] * x_sobel[i][j];\n        cy += b[i][j] * y_sobel[i][j];\n    }\n    }\n    return vec2(cx, cy);\n}\n\nvec4 boxFilter(in sampler2D z, in vec2 p, in vec2 d){\n    mat3 r;\n    mat3 b;\n    mat3 g;\n    mat3 a;\n    vec4 c;\n    for(int x = -1; x <= 1; x++){\n    for(int y = -1; y <= 1; y++){\n        int i = x + 1;\n        int j = y + 1;\n        vec2 o = p + vec2(float(x), float(y)) * d;\n        r[i][j] = texture(z, o).r;\n        g[i][j] = texture(z, o).g;\n        b[i][j] = texture(z, o).b;\n        a[i][j] = texture(z, o).a;\n        \n        c.r += r[i][j];\n        c.g += g[i][j];\n        c.b += b[i][j];\n        c.a += a[i][j];\n    }\n    }\n    return c / 9.;\n}\n\nvec4 structTensor(in float cx, in float cy, in int viz, in int dir, in int inv){\n    vec3 a = vec3(cx * cx, cx * cy, cy * cy);\n    vec2 b = vec2(((a.x + a.z) + sqrt((a.x - a.z) * (a.x - a.z) + 4. * (a.y * a.y))) * .5, \n                  ((a.x + a.z) - sqrt((a.x - a.z) * (a.x - a.z) + 4. * (a.y * a.y))) * .5);\n    vec3 v;\n    switch (inv){\n        case 0:\n            v = vec3(vec2(a.y, b.x - a.x), b.y - a.z);\n        break;\n        case 1:\n            v = vec3(1.) - vec3(a.y, b.x - a.x, b.y - a.z);\n        break;\n    }\n    switch (viz){\n        case 0:\n            return vec4(v, v.x);\n        case 1:\n            vec2 c = vec2(2. * atan(v.y, v.x), 2. * atan(v.x, v.z));\n            //vec2 d = vec2(dot(v.x, v.y), dot(v.z, v.x));\n            switch (dir){\n                case 0:\n                    return vec4(vec3(sin(c.x + ra), sin(c.x + ga), sin(c.x + ba)) * .5 + .5, 1.);\n                case 1:\n                    return vec4(vec3(sin(c.y + ra), sin(c.y + ga), sin(c.y + ba)) * .5 + .5, 1.);\n                case 2:\n                    return vec4(vec3(sin(c.x * c.y + ra), sin(c.x * c.y + ga), sin(c.x * c.y + ba)) * .5 + .5, 1.);\n            }\n    }\n}\n\n//----------GAUSSIAN\n\nvec4 gBlur(in sampler2D a, in float sd, in int k, in int dim, in vec2 p, in vec2 d){\n    int ksize = (k - 1) / 2;\n    float sd2 = 2. * (sd * sd);\n    float b;\n    vec4 c;\n    float g = 0.;\n    switch (dim) {\n        case 0:\n            b = 1. / sqrt(sd2 * pi);\n            for(int x = -ksize; x <= ksize; x++){\n                float f = b * pow(e, -(float(x * x)/sd2));\n                g += f;\n                c += texture(a, vec2(p.x + float(x) * d.x, p.y)) * f;\n            }\n            break;\n        case 1:\n            b = 1. / sqrt(sd2 * pi);\n            for(int y = -ksize; y <= ksize; y++){\n                float f = b * pow(e, -(float(y * y)/sd2));\n                g += f;\n                c += texture(a, vec2(p.x, p.y + float(y) * d.y)) * f;\n            }\n            break;\n        case 2:\n            b = 1. / (sd2 * pi);\n            for(int x = -ksize; x <= ksize; x++){\n            for(int y = -ksize; y <= ksize; y++){\n                float f = b * pow(e, -(float((x * x) + (y * y))/sd2));\n                g += f;\n                c += texture(a, vec2(p.x + float(x) * d.x, p.y + float(y) * d.y)) * f;\n            }\n            }\n            break;\n     }\n    c /= g;\n    return c;\n}\n\nvec4 fastblur(in sampler2D a, in vec2 f, in vec3 rez){\n    // Center\n    vec3 b = 0.0176838826 * texture(a, (f + vec2(0., 0.))/rez.xy).rgb;\n\n    // (x, y)\n    b += 0.0567742280 * texture(a, (f + vec2(1.4584295, 0.48611468))/rez.xy).rgb;\n    b += 0.0287029480 * texture(a, (f + vec2(3.4039848, 0.48611468))/rez.xy).rgb;\n    b += 0.0094251595 * texture(a, (f + vec2(5.3518058, 0.48611468))/rez.xy).rgb;\n    b += 0.0434682340 * texture(a, (f + vec2(1.4584295, 2.4309987))/rez.xy).rgb;\n    b += 0.0211459770 * texture(a, (f + vec2(3.4039848, 2.4309987))/rez.xy).rgb;\n    b += 0.0269184210 * texture(a, (f + vec2(1.4584295, 4.3775407))/rez.xy).rgb;\n    b += 0.0062053699 * texture(a, (f + vec2(5., 2.4309987))/rez.xy).rgb;\n    b += 0.0073983268 * texture(a, (f + vec2(3.4039848, 4.))/rez.xy).rgb;\n    b += 0.0022639205 * texture(a, (f + vec2(1., 6.))/rez.xy).rgb;\n    b += 0.0026745061 * texture(a, (f + vec2(3., 5.))/rez.xy).rgb;\n    \n    // (-x, y)\n    b += 0.0567742280 * texture(a, (f + vec2(-0.48611468, 1.4584295))/rez.xy).rgb;\n    b += 0.0287029480 * texture(a, (f + vec2(-0.48611468, 3.4039848))/rez.xy).rgb;\n    b += 0.0094251595 * texture(a, (f + vec2(-0.48611468, 5.3518058))/rez.xy).rgb;\n    b += 0.0434682340 * texture(a, (f + vec2(-2.4309987, 1.4584295))/rez.xy).rgb;\n    b += 0.0211459770 * texture(a, (f + vec2(-2.4309987, 3.4039848))/rez.xy).rgb;\n    b += 0.0269184210 * texture(a, (f + vec2(-4.3775407, 1.4584295))/rez.xy).rgb;\n    b += 0.0062053699 * texture(a, (f + vec2(-2.4309987, 5.))/rez.xy).rgb;\n    b += 0.0073983268 * texture(a, (f + vec2(-4., 3.4039848))/rez.xy).rgb;\n    b += 0.0022639205 * texture(a, (f + vec2(-6., 1.))/rez.xy).rgb;\n    b += 0.0026745061 * texture(a, (f + vec2(-5., 3.))/rez.xy).rgb;\n    \n    // (-x, -y)\n    b += 0.0567742280 * texture(a, (f + vec2(-1.4584295, -0.48611468))/rez.xy).rgb;\n    b += 0.0287029480 * texture(a, (f + vec2(-3.4039848, -0.48611468))/rez.xy).rgb;\n    b += 0.0094251595 * texture(a, (f + vec2(-5.3518058, -0.48611468))/rez.xy).rgb;\n    b += 0.0434682340 * texture(a, (f + vec2(-1.4584295, -2.4309987))/rez.xy).rgb;\n    b += 0.0211459770 * texture(a, (f + vec2(-3.4039848, -2.4309987))/rez.xy).rgb;\n    b += 0.0269184210 * texture(a, (f + vec2(-1.4584295, -4.3775407))/rez.xy).rgb;\n    b += 0.0062053699 * texture(a, (f + vec2(-5., -2.4309987))/rez.xy).rgb;\n    b += 0.0073983268 * texture(a, (f + vec2(-3.4039848, -4.))/rez.xy).rgb;\n    b += 0.0022639205 * texture(a, (f + vec2(-1., -6.))/rez.xy).rgb;\n    b += 0.0026745061 * texture(a, (f + vec2(-3., -5.))/rez.xy).rgb;\n    \n    // (y, -x)\n    b += 0.0567742280 * texture(a, (f + vec2(0.48611468, -1.4584295))/rez.xy).rgb;\n    b += 0.0287029480 * texture(a, (f + vec2(0.48611468, -3.4039848))/rez.xy).rgb;\n    b += 0.0094251595 * texture(a, (f + vec2(0.48611468, -5.3518058))/rez.xy).rgb;\n    b += 0.0434682340 * texture(a, (f + vec2(2.4309987, -1.4584295))/rez.xy).rgb;\n    b += 0.0211459770 * texture(a, (f + vec2(2.4309987, -3.4039848))/rez.xy).rgb;\n    b += 0.0269184210 * texture(a, (f + vec2(4.3775407, -1.4584295))/rez.xy).rgb;\n    b += 0.0062053699 * texture(a, (f + vec2(2.4309987, -5.))/rez.xy).rgb;\n    b += 0.0073983268 * texture(a, (f + vec2(4., -3.4039848))/rez.xy).rgb;\n    b += 0.0022639205 * texture(a, (f + vec2(6., -1.))/rez.xy).rgb;\n    b += 0.0026745061 * texture(a, (f + vec2(5., -3.))/rez.xy).rgb;\n    \n    return vec4(b*1.195, 1.);\n}\n\n//---------Line Integral Convolution Bilateral Filter\n\nvec4 LIC(in sampler2D a, in sampler2D v, in float scale, in vec2 p, in vec2 d){\n    vec4 b = vec4(0.);\n    float sd = sqrt(float(2 * LICLEN));\n    float sd2 = 2. * (sd * sd);\n    float c;\n    float g;\n    \n    vec4 ppath[LICLEN];\n    vec4 npath[LICLEN];\n    ppath[0] = vec4(p, texture(v, p).xy);\n    npath[0] = vec4(p, texture(v, p).xy);\n    \n    for(int i = 1; i < LICLEN; i++){\n        ppath[i] = vec4((ppath[i-1].xy + (normalize(ppath[0].zw) * scale * .25 * d)), texture(v, ppath[i-1].xy + (normalize(ppath[0].zw) * scale * .25 * d)).xy);\n        npath[i] = vec4((npath[i-1].xy - (normalize(npath[0].zw) * scale * .25 * d)), texture(v, npath[i-1].xy - (normalize(npath[0].zw) * scale * .25 * d)).xy);\n        \n        c = 1. / sqrt(sd2 * pi);\n        float f = c * pow(e, -(float(i * i)/sd2));\n        g += f;\n        \n        b += mix(texture(a, ppath[i].xy + vec2(d.x, 0.)), texture(a, ppath[i].xy - vec2(d.x, 0.)),.5) * f;\n        b += mix(texture(a, npath[i].xy + vec2(0., d.y)), texture(a, npath[i].xy - vec2(0., d.y)),.5) * f;\n    }\n    ppath[0] = vec4(p, texture(v, p).zw);\n    npath[0] = vec4(p, texture(v, p).zw);\n    \n    for(int i = 1; i < LICLEN; i++){\n        ppath[i] = vec4((ppath[i-1].xy + (normalize(ppath[i-1].zw) * scale * d)), texture(v, ppath[i-1].xy + (normalize(ppath[i-1].zw) * scale * d)).zw);\n        npath[i] = vec4((npath[i-1].xy - (normalize(npath[i-1].zw) * scale * d)), texture(v, npath[i-1].xy - (normalize(npath[i-1].zw) * scale * d)).zw);\n        \n        c = 1. / sqrt(sd2 * pi);\n        float f = c * pow(e, -(float(i * i)/sd2));\n        g += f;\n        \n        b += texture(a, ppath[i].xy) * f;\n        b += texture(a, npath[i].xy) * f;\n    }\n    \n    return b /= g * 2.;\n}\n\n//---------Difference of Gaussians\n\n//sd = 1\n#define blur1wt vec3[11](vec3(0., 0., 0.1591549431),vec3(1.1824255, 0.37754067, 0.0455986550),vec3(3.0293122, 0.37754067, 0.0003072413),vec3(5.0040701, 0.37754067, 0.0000000379),vec3(1.1824255, 2.07585820, 0.0022702233),vec3(3.0293122, 2.07585820, 0.0000152966),vec3(1.1824255, 4.01098690, 0.0000010702),vec3(5., 2.07585820, 0.0000000261),vec3(3.0293122, 4., 0.0000001168),vec3(1., 6., 0.0000000015),vec3(3., 5., 0.0000000066))\n//sd = 1.6\n#define blur2wt vec3[11](vec3(0., 0., 0.0621698996),vec3(1.3575675, 0.45132651, 0.0381524400),vec3(3.2030746, 0.45132651, 0.0054111666),vec3(5.1044773, 0.45132651, 0.0001608697),vec3(1.3575675, 2.27357440, 0.0118190740),vec3(3.2030746, 2.27357440, 0.0016763012),vec3(1.3575675, 4.14706450, 0.0007674666),vec3(5., 2.27357440, 0.0001389495),vec3(3.2030746, 4., 0.0002496470),vec3(1., 6., 0.0000451984),vec3(3., 5., 0.0000812070))\n#define blurdiv 121./41.\n\nvec4 blur1(in sampler2D a, in vec2 f, in vec3 rez){\n    vec3 b;\n    b += blur1wt[0].z * texture(a, (f + vec2(blur1wt[0].x, blur1wt[0].y))/rez.xy).rgb;\n    \n    for(int i = 1; i < 11; i++){\n        b += blur1wt[i].z * texture(a, (f + vec2(blur1wt[i].x, blur1wt[i].y))/rez.xy).rgb;\n        b += blur1wt[i].z * texture(a, (f + vec2(-blur1wt[i].y, blur1wt[i].x))/rez.xy).rgb;\n        b += blur1wt[i].z * texture(a, (f + vec2(-blur1wt[i].x, -blur1wt[i].y))/rez.xy).rgb;\n        b += blur1wt[i].z * texture(a, (f + vec2(blur1wt[i].y, -blur1wt[i].x))/rez.xy).rgb;\n    }\n    \n    return vec4(b*2.84765471092, 1.);\n}\n\nvec4 blur2(in sampler2D a, in vec2 f, in vec3 rez){\n    vec3 b;\n    b += blur2wt[0].z * texture(a, (f + vec2(blur2wt[0].x, blur2wt[0].y))/rez.xy).rgb;\n    \n    for(int i = 1; i < 11; i++){\n        b += blur2wt[i].z * texture(a, (f + vec2(blur2wt[i].x, blur2wt[i].y))/rez.xy).rgb;\n        b += blur2wt[i].z * texture(a, (f + vec2(-blur2wt[i].y, blur2wt[i].x))/rez.xy).rgb;\n        b += blur2wt[i].z * texture(a, (f + vec2(-blur2wt[i].x, -blur2wt[i].y))/rez.xy).rgb;\n        b += blur2wt[i].z * texture(a, (f + vec2(blur2wt[i].y, -blur2wt[i].x))/rez.xy).rgb;\n    }\n    \n    return vec4(b*3.32960347244, 1.);\n}\n\nvec4 xDoG(in sampler2D a, in float tau, in float thr, in float rng, in int cm, in vec2 f, in vec3 rez){\n    vec4 g = (1. + tau) * blur1(a, f, rez) - tau * blur2(a, f, rez);\n    \n    switch (cm){\n      case 0:\n          return smoothstep(thr - rng*.5, thr + rng*.5, vec4(lum(g)));\n      case 1:\n          return smoothstep(thr - rng*.5, thr + rng*.5, g);\n  }\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n    vec2 d = rerez;\n    vec4 c = texture(ic0, p);\n    \n    switch (iFrame){\n    case 0:\n    vec2 s = sobel2d(ic0, p, d);\n    c = structTensor(s.x, s.y, 0, 0, 0);\n    break;\n    case 1:\n    c = gBlur(ic1, BLUR, SMOOTH, 1, p, d);\n    break;\n    case 2:\n    c = gBlur(ic1, BLUR, SMOOTH, 0, p, d);\n    break;\n    }\n    \n    if(iFrame>2){\n    c = texture(ic1, p);\n    }\n    \n    fragColor = c;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define FTH1 0.25\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 p = fragCoord/iResolution.xy;\n    vec2 d = rerez;\n    vec4 c = texture(ic0, p);\n    \n    if(iFrame>2){\n    c = texture(ic2, p);\n        switch (iFrame){\n        case 3:\n        c = LIC(ic0, ic1, 1., p, d);\n        break;\n        case 4:\n        c = xDoG(ic2, 10., .5, 1., 1, fragCoord, iResolution);\n        break;\n        }\n    if(iFrame>4){\n        c = texture(ic2, p);\n    }\n    }\n    \n    fragColor = c;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n    vec2 d = rerez;\n    vec4 c = texture(ic0, p);\n    \n    if(iFrame>4){\n        c = texture(ic1, p);\n    } else if(iFrame==5){\n        c = xDoG(ic2, 10., .5, .1, 0, fragCoord, iResolution);\n    }\n    \n    fragColor = c;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"#define SATURATION 2.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 p = fragCoord/iResolution.xy;\n    vec2 d = rerez;\n    vec4 c = texture(ic1, p);\n    vec4 tx = c;\n    \n    if(iFrame>5){\n        c = mix(gBlur(ic3, 2., 7, 2, p, d), vec4(1.), lum(texture(ic0, p)) * .5);\n        c = vec4(pow(c.r, .8),pow(c.g, .8),pow(c.b, .8),pow(c.a, .8));\n        c = mix(c, vec4(lum(c)), 1. - lum(texture(ic0, p) * SATURATION));\n        c *= tx;\n    } else {\n        c = texture(ic3, p);\n    }\n    \n    fragColor = c;\n}","name":"Buffer D","description":"","type":"buffer"}]}