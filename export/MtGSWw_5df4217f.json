{"ver":"0.1","info":{"id":"MtGSWw","date":"1484561583","viewed":158,"name":"wooden_sphere","username":"sanctify","description":"wooden sphere","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["woodensphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// Rotation ------------------------------------------------------------\n\n\n// Hashing function, use sin instead of table with permutations\n// n : Real value\nfloat hash( float n ) \n{\n    return fract(sin(n)*43758.5453123); \n}\n\n// Noise\n// x : Point in space\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\n\n// Rotation around y axis\n// v : Vector\n// a : Angle\nvec3 rotate(in vec3 v,in float a)\n{\n    return vec3(v.x*cos(a)+v.z*sin(a),v.y,-v.x*sin(a)+v.z*cos(a));\n}\n\n// Textures ------------------------------------------------------------\n\nvec3 bark=vec3(0.6,0.4,0.2);\nvec3 white=vec3(0.5,0.32,0.12);\n\n// Simple color\n// p : Point on object\n// n : Normal at point\nvec3 color(in vec3 p,in vec3 n)\n{\n    return vec3(1,1,1);\n}\n\n// Checker\n// p : Point on object\n// n : Normal at point\nvec3 checker(in vec3 p,in vec3 n)\n{\n    float v;\n\n\tv=2.+sin(noise(p)*75.0);\n    return mix(bark,white,v);\n}\n\n// Color sine wave\nvec3 sine(in vec3 p,in vec3 n)\n{\n    vec3 pa=p-vec3(1.0,1.0,1.0);\n    float v=0.5*(1.0+cos(14.0*sqrt(dot(pa,pa))));\n        return mix(bark,white,v);\n}\n\n// Objects --------------------------------------------------------------\n\n// Intersection between a ray and a sphere\n// o : Ray origin\n// d : Ray direction\n// c : Center of sphere\n// r : Radius\n// t : Intersection depth\n// n : Normal at intersection point\nbool sphere(in vec3 o,in vec3 d,in vec3 c,in float r,out float t,out vec3 n)\n{\n\tvec3 oc = o-c;\n    \n    float b=dot(d,oc);\n    float k = dot(oc,oc)-r*r;\n    t=b*b-k;\n       \n    if (t<=0.0) return false;\n    \n    t=-b-sqrt(t);\n    if (t<0.0) return false;\n    \n    // Normal\n    n=(o+t*d-c)/r;\n\n   return true;\n }\n\n// Lighting -------------------------------------------------------------\n\n// Background color\n// r : Ray direction\nvec3 background(in vec3 r)\n{\n    return mix(vec3(0.2, 0.3, 0.4), vec3(0.7, 0.8, 1.0), r.y*0.5+0.5);\n}\n\n// p : Point on object\n// n : normal at point\nvec3 shade(in vec3 p,in vec3 n)\n{\n    // Point light\n    const vec3 lightPos = vec3(1.0, 1.0,-5.0);\n    const vec3 lightColor = vec3(0.95, 0.95,0.95);\n  \n    vec3 l = normalize(lightPos - p);\n\n    // Not even Phong shading, use weighted cosine instead for smooth transitions\n    float diff = 0.5*(1.0+dot(n, l));\n\n    // Change call to Texture there : apply either color() or sine() or checker() or whatever texture you wish\n    vec3 c = 0.2*background(n)+0.8*checker(p,n);//*diff*lightColor;\n\n    return c;\n}\n\n// Vignetting\t\n// c : Color\n// p : Point in screen space\nvec4 Vignetting(in vec4 c,in vec2 p)\n{\n\treturn c * ( 0.5 + 0.5*pow( (p.x+1.0)*(p.y+1.0)*(p.x-1.0)*(p.y-1.0), 0.1 ) );\n}\n\n// Main -----------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = -1.0 + 2.0*fragCoord.xy/iResolution.xy;\n    vec2 uv = xy * vec2(iResolution.x/iResolution.y, 1.0);\n    \n\t// Ray origin and direction\n    vec3 o = vec3(0.0, 0.0, -2.0);\n\tvec3 d = normalize(vec3(uv, 1.0));\n\t\n    o=rotate(o,0.5*iTime);\n    d=rotate(d,0.5*iTime);\n    \n\tvec3 n;\n    float t;\n    \n    // Default background color\n    fragColor=vec4(background(d),1.0);\n    if (sphere(o, d, vec3(0.0, 0.0, 0.0), 1.0, t, n))\n    {\t\n        fragColor = vec4( mix(background(d), shade(o+d*t,n), step(0.0, t)), 1.0 );\n        fragColor *= 1.5;\n    }\n    fragColor=Vignetting(fragColor,xy);\n}\n","name":"Image","description":"","type":"image"}]}