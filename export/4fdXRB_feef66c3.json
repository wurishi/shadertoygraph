{"ver":"0.1","info":{"id":"4fdXRB","date":"1714165345","viewed":47,"name":"Simple Ray Tracing - By Toad","username":"MasterToad","description":"a simple Ray Tracing shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct ray\n{\n    vec3 origin;\n    vec3 direction;\n};\n\nstruct sphere \n{\n    vec3 center;\n    float radius;\n};\n\n// check if ray hits sphere\nfloat check_hit_sphere(ray r, sphere s);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // create eye ray\n    ray eye_ray;\n    eye_ray.origin = vec3(0.0, 0.0, 0.0);\n    eye_ray.direction = vec3(-16.0, -9.0, -12.0) + (uv.x*vec3(32.0, 0.0, 0.0)) + (uv.y*vec3(0.0, 18.0, 0.0));\n    \n    // create sphere\n    sphere ball;\n    ball.center = vec3(0.0, 0.0, -1.0);\n    ball.radius = 0.5;\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    float eye_ray_length = check_hit_sphere(eye_ray, ball);\n    \n    if (eye_ray_length > 0.0) \n    {\n        vec3 ray_hit_point = vec3(eye_ray.origin + (eye_ray_length * eye_ray.direction));\n        vec3 normal = normalize(ray_hit_point - ball.center);\n        vec3 light_pos = vec3(1.0, 1.0, 0.5);\n        vec3 light_dir = -normalize(ray_hit_point - light_pos);\n        float lambert = max(dot(normal, light_dir), 0.0);\n        \n        vec3 ambient_color = col * 0.1 * (1.0-lambert);\n        vec3 diffuse_color = col * lambert;\n        fragColor = vec4(diffuse_color + ambient_color, 1.0);\n        //fragColor = vec4(normal + vec3(1.0, 1.0, 1.0) * 0.5,1.0);\n    }\n    else\n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n}\n\nfloat check_hit_sphere(ray r, sphere s) \n{\n    vec3 origin_sub_center = r.origin - s.center;\n    float a = dot(r.direction, r.direction);\n    float b = 2.0 * dot(r.direction, origin_sub_center);\n    float c = dot(origin_sub_center, origin_sub_center) - (s.radius*s.radius);\n    \n    float discriminant = (b*b) - (4.0*a*c);\n\n    if (discriminant < 0.0) \n    {\n        return -1.0;\n    }\n    else\n    {\n        return ((-b - sqrt(discriminant)) / (2.0*a));\n    }\n}","name":"Image","description":"","type":"image"}]}