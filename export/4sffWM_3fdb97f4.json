{"ver":"0.1","info":{"id":"4sffWM","date":"1496350130","viewed":193,"name":"Random Linear Palette Dithering","username":"theGiallo","description":"Extension of https://www.shadertoy.com/view/4dsfDN (binary palette) to #palette > 2. It uses the two colors closer to value with Euclidean distance in RGB. I 'd like to do further investigations on bilinear and more.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["palette","dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MOVE_PIC 1\n#define FIXED_PATTERN 1\n#define PATTERN_RELATIVE_TO_PIC 0\n#define PALETTE_COUNT 27\n// try 2,5,8,14,15,27\n\n/*\n From left to right:\n       Gradient  |  round  | texture noise | pseudo blue noise | cheap gaussian noise\n*/\n\n\nvec3 palette[PALETTE_COUNT];\n\nfloat sqlength( vec3 v )\n{\n    return dot(v,v);\n}\n\nfloat mask(vec2 p) // see https://www.shadertoy.com/view/ldyXDd\n{\n#define T(l) textureLod(iChannel1,U/256.,l)\n#define DMUL  8.12235325   \n#define SIZE  5.5\n    vec2 U = floor(p/SIZE)*SIZE;\n    p += ( T(0.).xy - .5 ) *DMUL;\n    return fract( p.x*1.705 + p.y*.5375 ); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #if PALETTE_COUNT > 0\n    palette[0] = vec3(0.0,0.0,0.0);\n    #endif\n    #if PALETTE_COUNT > 1\n    palette[1] = vec3(1.0,1.0,1.0);\n    #endif\n    #if PALETTE_COUNT > 2\n    palette[2] = vec3(1.0,0.0,0.0);\n    #endif\n    #if PALETTE_COUNT > 3\n    palette[3] = vec3(0.0,1.0,0.0);\n    #endif\n    #if PALETTE_COUNT > 4\n    palette[4] = vec3(0.0,0.0,1.0);\n    #endif\n    #if PALETTE_COUNT > 5\n    palette[5] = vec3(0.0,1.0,1.0);\n    #endif\n    #if PALETTE_COUNT > 6\n    palette[6] = vec3(1.0,0.0,1.0);\n    #endif\n    #if PALETTE_COUNT > 7\n    palette[7] = vec3(1.0,1.0,0.0);\n    #endif\n    #if PALETTE_COUNT > 8\n    palette[8] = vec3(0.5,0.0,0.0);\n    #endif\n    #if PALETTE_COUNT > 9\n    palette[9] = vec3(0.0,0.5,0.0);\n    #endif\n    #if PALETTE_COUNT > 10\n    palette[10] = vec3(0.0,0.0,0.5);\n    #endif\n    #if PALETTE_COUNT > 11\n    palette[11] = vec3(0.0,0.5,0.5);\n    #endif\n    #if PALETTE_COUNT > 12\n    palette[12] = vec3(0.5,0.0,0.5);\n    #endif\n    #if PALETTE_COUNT > 13\n    palette[13] = vec3(0.5,0.5,0.0);\n    #endif\n    #if PALETTE_COUNT > 14\n    palette[14] = vec3(0.5,0.5,0.5);\n    #endif\n    #if PALETTE_COUNT > 15\n    palette[15] = vec3(0.5,1.0,0.0);\n    #endif\n    #if PALETTE_COUNT > 16\n    palette[16] = vec3(0.5,1.0,0.5);\n    #endif\n    #if PALETTE_COUNT > 17\n    palette[17] = vec3(0.5,1.0,1.0);\n    #endif\n    #if PALETTE_COUNT > 18\n    palette[18] = vec3(0.0,0.5,1.0);\n    #endif\n    #if PALETTE_COUNT > 19\n    palette[19] = vec3(0.0,1.0,0.5);\n    #endif\n    #if PALETTE_COUNT > 20\n    palette[20] = vec3(0.5,0.0,1.0);\n    #endif\n    #if PALETTE_COUNT > 21\n    palette[21] = vec3(1.0,0.5,0.0);\n    #endif\n    #if PALETTE_COUNT > 22\n    palette[22] = vec3(0.5,0.5,1.0);\n    #endif\n    #if PALETTE_COUNT > 23\n    palette[23] = vec3(1.0,0.5,1.0);\n    #endif\n    #if PALETTE_COUNT > 24\n    palette[24] = vec3(1.0,0.5,0.5);\n    #endif\n    #if PALETTE_COUNT > 25\n    palette[25] = vec3(1.0,1.0,0.5);\n    #endif\n    #if PALETTE_COUNT > 26\n    palette[26] = vec3(1.0,0.0,0.5);\n    #endif\n\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float d = floor( uv.x * 5.0 ) * 0.2;\n    vec2 tex_uv = fragCoord.xy / iResolution.xy;\n    #if MOVE_PIC\n    tex_uv.x -= d - 0.4 + 0.4 * sin( iTime * 3.14159 * 0.1 );\n    #else\n    tex_uv.x -= d - 0.1;\n    #endif\n    vec3 hc = texture(iChannel0, tex_uv).rgb;\n    \n    fragColor.rgb = hc;\n    \n    \n    if ( uv.x > 0.2 )\n    {\n        // NOTE(theGiallo): min0 <= min1\n        float min0 = 40.0;\n        float min1 = 50.0;\n        int id0 = 0;\n        int id1 = 0;\n        for ( int i = 0; i != palette.length(); ++i )\n        {\n            float d = sqlength( hc - palette[i] );\n            if ( d < min0 && d < min1 )\n            {\n                min1 = min0;\n                min0 = d;\n                id1 = id0;\n                id0 = i;\n            } else\n            if ( d >= min0 && d < min1 )\n            {\n                min1 = d;\n                id1 = i;\n            }\n        }\n\n        float d0 = sqrt( min0 );\n        float d1 = sqrt( min1 );\n        float td = d0 + d1;\n        d0 /= td;\n        d1 /= td;\n\n        float p = d1;\n        vec3 COLOR_0 = vec3(0.0);\n        vec3 COLOR_1 = vec3(0.0);\n        #if 0\n        for ( int i = 0; i != palette.length(); ++i )\n        {\n            COLOR_0 = i == id0 ? palette[i] : COLOR_0;\n            COLOR_1 = i == id1 ? palette[i] : COLOR_1;\n        }\n        #else\n        COLOR_0 = palette[id0];\n        COLOR_1 = palette[id1];\n        #endif\n    \n        #if FIXED_PATTERN\n        #define PER_FRAME\n        #define PER_FRAME_MASK\n        #else\n        #define PER_FRAME + vec2(cos(iTime * 6.2831),sin(iTime * 6.2831) )\n        #define PER_FRAME_MASK PER_FRAME * iChannelResolution[1].xy\n        #endif\n        #if PATTERN_RELATIVE_TO_PIC\n        #define MASK_COORD ( iResolution.xy * tex_uv )\n        #else\n        #define MASK_COORD fragCoord\n        #endif\n        vec2 ruv = MASK_COORD / iChannelResolution[1].xy PER_FRAME;\n        float m =\n           uv.x < 0.4 ? 0.5 :\n         ( uv.x < 0.6 ? texture(iChannel1, ruv ).r :\n         ( uv.x < 0.8 ? mask( MASK_COORD PER_FRAME_MASK ) :\n         ( texture(iChannel2, ruv ).r +\n           texture(iChannel2, ruv ).g +\n           texture(iChannel2, ruv ).b ) / 3.0\n            ) );\n\n\t\tfragColor.rgb = m > p ? COLOR_1 : COLOR_0;\n    }\n}\n","name":"Image","description":"","type":"image"}]}