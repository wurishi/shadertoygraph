{"ver":"0.1","info":{"id":"Mf2yRy","date":"1722549063","viewed":81,"name":"Oven","username":"Elsio","description":"x","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["grid","tutorial","tunel","frame","liana","eletricity","scaffolding"],"hasliked":0,"parentid":"dscBRr","parentname":"Cabos 3"},"renderpass":[{"inputs":[{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define h31(a) fract(sin(dot(a, vec3(453.2734, 255.4363, 645.4363))) * 994.3434)\n#define normal(p) normalize(map(p)-vec3(map(p-e.xyy),map(p-e.yxy),map(p-e.yyx)))\n#define rot(a) mat2(cos(a + vec4(0, 11, 33, 0)))\n#define t iTime\n#define FAR 60.\n#define vel 5.\n\nfloat gCD, id, sh1, sh2;\nvec3 gD;\n\nvec2 path(float z) {\n    float a = 1. * sin(z * .11);\n    float b = cos(z * .14);\n    return vec2(\n               a * 4. - b * 1.5,\n               b * 1.7 + a * 1.5);\n}\n\n\nfloat slength(vec3 p){\n    float k = 8.;\n    vec3 q = pow(abs(p), vec3(k));\n    return pow(dot(q, q/q), 1./k);\n}\n\nfloat box(vec3 p, vec3 b, float sf) {\n    p = abs(p) - b + sf;\n    return length(max(p, 0.)) - sf;\n}\n\n\nbool tunel(vec3 p) {\n    p.xy -= path(p.z);\n    //return 2.5 - length(p.xy) < 0.;\n    return max(\n               2.5 - length(p.xy), // shane\n               texture(iChannel0, p / 300.) .x - .55\n           ) < 0.;\n}\n\nfloat oven(vec3 p) {\n    float z = p.z, \n          cabo, breads, balls;\n          \n    p.xy -= path(z);\n    \n    // cabo\n    vec3 q = p;\n    p.z += t * vel * 3.;\n    p.z = mod(p.z, 41.) - 20.;\n    p.y += 3.;\n    cabo = length(p.xy) - .2;\n    sh1 = length(p);\n    \n    // pÃ£o\n    p = q;\n    p.z -= t * vel * 2.;\n    p.z = mod(p.z, 8.) - 4.;\n    p.y += cos(z) + 1.2;\n    breads = slength(p) - .5;\n    \n    // lampada\n    p = q;\n    p.z -= t * vel * 2.;\n    p.z = mod(p.z, 20.) - 10.;\n    p.y -= 1.8;\n    balls = length(p) - .7;\n    sh2 = length(p);\n    \n    return min(cabo, min(breads, balls));\n}\n\nvoid grid(vec3 p){\n    vec3 g = (sign(gD) * .5 - p) / gD;\n    gCD =min(min(g.x, g.y), g.z) + .0015;\n}\n\nvec3 Dir(vec3 p){\n    vec3 d = abs(p);\n    return step(d.yzx, d) * step(d.zxy, d) * sign(p);\n}\n\nfloat map(vec3 p) {\n    vec3 k = floor(p) + .5,\n         q = fract(p) - .5,\n         neig = Dir(q);\n\n    bool c2 = h31(k) < .1;\n\n    float frame  = 1., d,\n          barra = box(q, abs(neig) + .05, .01),\n          oven  = oven(p);\n\n    grid(q);\n\n    \n    if(tunel(k)){\n        frame = length(q) - .1;\n        if(tunel(k + neig))\n            frame = min(frame, barra);\n    }\n    \n    id = step(frame, oven);\n    \n    return min(frame, oven);\n}\n\n\n\nfloat march(vec3 ro) {\n    vec3 p;\n    float s, d;\n\n    for(int i = 0; i < 128; i ++) {\n        p = ro + d * gD;\n        s = min(map(p), gCD);\n        if(abs(s) < .001 || d > FAR) break;\n        d += s;\n    }\n\n    d = min(d, FAR);\n    return d;\n}\n\n\nvoid mainImage(out vec4 o, vec2 u) {\n    vec2 r = iResolution.xy;\n         u = (u - r * .5) / r.y;\n\n    vec3 ro, eye, L,\n         fw, ri, up, D, p, N, col, e, cor;\n\n    float FOV = 3.14 / 3.,\n          ambience, d;\n\n    ro  = vec3(0, 0, t * vel);\n    eye = ro + vec3(0, 0, 1);\n    L   = ro + vec3(0, 0, 6.);\n\n    eye.xy += path(eye.z);\n    ro.xy  += path(ro.z);\n    L.xy   += path(L.z);\n\n    fw = normalize(eye - ro),\n    ri = normalize(vec3(fw.z, 0., - fw.x)),\n    up = cross(fw, ri),\n    D = normalize(u.x * ri + u.y * up + fw / FOV),\n    e = vec3(.01, 0, 0);\n\n    gD = D;\n    d = march(ro);\n\n    cor = id == 1. ? vec3(1, 2, 3)\n                   : vec3(8, 4, 1);\n    o *= 0.;\n    if(d < FAR) {\n        p = ro + d * D;\n        N = normal(p);\n\n        ambience =\n                length(sin(N * 2.) * .5 + .5) / sqrt(3.) *\n                 smoothstep(- 1., 1., N.y);\n\n        o.rgb = cor * ambience * exp(-d * .3) * .5;\n    }\n\n    o = sqrt(o);\n    o += vec4(1, 4, 8, 0) * 3. / exp(sh1 * 4.);\n    o += vec4(8, 4, 1, 0) * 3. / exp(sh2 * 1.);\n}\n","name":"Image","description":"","type":"image"}]}