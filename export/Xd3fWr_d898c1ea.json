{"ver":"0.1","info":{"id":"Xd3fWr","date":"1524969436","viewed":452,"name":"SDF Test:Bridge and Fishing-boat","username":"FishMan","description":"Test SDF ","likes":22,"published":1,"flags":0,"usePreview":0,"tags":["sdf","bridge","boat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// the base scene is from iq  //https://www.shadertoy.com/view/Xds3zN\n// i just want to test SDF functions\n// jiepengtan@gmail.com\n\n#define ITERATIONS 4\n\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(.1031, .1030, .0973, .1099)\n\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\n#define AA 1   // make this 1 is your machine is too slow\n\n//------------------------------------------------------------------\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n    return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\n\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n//------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec2 opRep( vec2 p, vec2 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\nvec3 rX(const in vec3 v, const in float cs, const in float sn) {return mat3(1.0,0.0,0.0,0.0,cs,sn,0.0,-sn,cs)*v;}\nvec3 rY(const in vec3 v, const in float cs, const in float sn) {return mat3(cs,0.0,-sn,0.0,1.0,0.0,sn,0.0,cs)*v;}\nvec3 rZ(const in vec3 v, const in float cs, const in float sn) {return mat3(cs,sn,0.0,-sn,cs,0.0,0.0,0.0,1.0)*v;}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n#define clamp01(a) clamp(a,0.0,1.0)\n#define opS(d1,d2) max(-d1,d2)\n// union 2 objects carrying material info\n#define opU(a,b) ((a.x < b.x) ? a : b)\n\n#define PI 3.14159\n\n// implicitly specifies shading rules\n#define WOOD_MAT 0.\n#define STRAW_MAT 1.\n#define VILLAGE_MAT 2.\nfloat sdCappedCone( in vec3 p, in vec3 c ) // c=vec3(bottom radius, angle , height)\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    vec2 v = vec2( c.z*c.y/c.x, -c.z );\n    vec2 w = v - q;\n    vec2 vv = vec2( dot(v,v), v.x*v.x );\n    vec2 qv = vec2( dot(v,w), v.x*w.x );\n    vec2 d = max(qv,0.0)*qv/vv;\n    return sqrt( dot(w,w) - max(d.x,d.y) )* sign(max(q.y*v.x-q.x*v.y,w.y));\n}\n\n\n\nfloat sdBounceBalls(vec3 pos){\n    float SIZE = 2.;\n    vec2 gridSize = vec2(SIZE,SIZE);\n    float rv = hash12( floor((pos.xz) / gridSize));\n    pos.xz = opRep(pos.xz,gridSize);\n    float bollSize = 0.1;\n    float bounceH = 1.;\n    return sdSphere(pos- vec3(0.,(bollSize+bounceH+sin(iTime*3.14 + rv*6.24)*bounceH),0.),bollSize);\n}\n\nfloat sdBoatHull( vec3 vPos )\n{\n    vPos.y-=0.4;\n    vec3 vBoatDomain = vPos;\n    vBoatDomain.x = abs(vBoatDomain.x);\n    \n    float boatDist = length( vBoatDomain.xyz - vec3(-3.9,3.2,0.)) - 5.6;\n\t\n    float bs = 14.5;\n    float gap = 0.3;\n    vec2 offset=vec2(0.3,bs+gap);\n    float cylinder= length(vBoatDomain.xy-offset)-bs;\n    boatDist=opS(cylinder,boatDist);\n    float sSize = 15.0;\n    float sOff = 0.05;\n    float sphere = length( vBoatDomain.xyz - vec3(0,sSize+sOff,0)) - sSize;\n    boatDist=opS(sphere,boatDist);\n    \n    float bx = vPos.y+0.4;\n    boatDist=opS(bx,boatDist);\n    \n    return boatDist;\n}\n\n\nfloat sdHalfCylinder(vec3 pos , vec3 h){\n    float cy=opS(\n        sdCylinder(pos.yzx,h.xy),\n        sdCylinder(pos.yzx,h.xy + vec2(0.03,-0.03))\n    );\n    float bx = sdBox(pos-vec3(0.,-h.x*h.z*2.,0.),vec3(h.x+0.3,h.x,h.y+0.3));\n    return opS(bx,cy);\n}\nfloat sdPin( vec3 pos, vec3 h)\n{\n    \n   pos.x += h.x*h.z*2. - h.x;\n   float cy = sdCylinder(pos,h.xy);\n   float bx = sdBox(pos-vec3(h.x*(1.+2.*h.z),0.,0.),vec3(h.x*2.,h.y+0.3,h.x*2.));\n   return opS(bx,cy);\n}\n\nfloat sdQuant(vec3 pos){\n    pos -= vec3(-0.,.3,0.);\n    float barLen = 0.3;\n    float quantLen = 0.2;\n\tfloat cy = sdCylinder(pos-vec3(0.,0.,0.),vec2(0.008,barLen));\n    float bx = udRoundBox(pos-vec3(0.,barLen+quantLen,0.),vec3(0.025,quantLen,0.002),0.003);\n    return min(cy,bx);\n}\n\nfloat sdBoat(vec3 pos){\n    float ret = 10000.;\n    //body\n    float vb = sdBoatHull(pos);\n    pos.y -=0.07;\n    float vs = sdBoatHull(pos);\n    float boatBody =  opS(vs,vb);\n    \n    ret = min(ret , boatBody);\n    //quant\n    vec3 quantPos = pos ;\n    quantPos.x = abs(pos.x);\n    quantPos = quantPos- vec3(0.05,.72,1.5);\n    \n    float degZ= PI*-0.15;\n    quantPos = rZ(quantPos,sin(degZ),cos(degZ));\n    float degX= PI*0.65;\n    quantPos = rX(quantPos,sin(degX),cos(degX));\n    float quant = sdQuant(quantPos*0.5);\n    ret = min(ret , quant);\n    \n    //quant Ring\n    \n    vec3 ringPos = pos ;\n    ringPos.x = abs(pos.x);\n    ringPos = ringPos- vec3(0.44,.49,1.72);\n    \n    degZ= PI*-0.05;\n    ringPos = rZ(ringPos,sin(degZ),cos(degZ));\n    degZ= PI*-0.45;\n    ringPos = rX(ringPos,sin(degZ),cos(degZ));\n    float ringd = sdTorus(ringPos,vec2(0.05,0.005));\n    ret = min(ret , ringd);\n    //bar\n    vec3 bpos = pos;\n    bpos.z = abs(bpos.z);\n    float bar1 = udRoundBox(bpos-vec3(0.,0.4,1.5),vec3(.46,0.01,0.04),0.01);\n    ret = min(ret , bar1);\n    \n    // roof\n   \tvec3 q1=pos-vec3(0.,0.65,0.);\n    vec3 roofSize = vec3(0.65,1.0,0.7);\n    float roof = sdHalfCylinder(q1,roofSize);\n    ret = min(ret , roof);\n    \n    //pos.x= abs(pos.x);//!! it is strange that i cann't use pos.x= abs(pos.x) to simplify the code\n    vec3 padPos = pos;\n    //padPos.x = abs(pos.x);\n    float paddingT = sdPin( padPos - vec3(-0.65,0.42,0.),vec3(8,0.02,0.003));\n    ret = min(ret , paddingT);\n    padPos.x = -pos.x;\n    paddingT = sdPin( padPos - vec3(-0.65,0.42,0.),vec3(8,0.02,0.003));\n    ret = min(ret , paddingT);\n    \n    return ret;\n}\n\n\n#define BridgeL 40.\n#define BridgeW 2.\n#define BridgeH 4.\n\n#define BridgeL1 50.\n\n\n#define LegGap (BridgeW*0.45)\n#define LegWid 0.1\n#define LegLenGap LegGap * 4.\n\n#define BoardLen  0.2\nfloat BridgeSeg1(float mindist,in vec3 pos){\n    float dis= 0.;\n\t\n    // bridge leg\n    vec3 legPos = pos;\n    legPos.z -= LegLenGap * 0.5;\n    if( legPos.z < BridgeL-LegLenGap && legPos.z >0.){\n    \tlegPos.z = mod(legPos.z- LegLenGap * 0.5,LegLenGap) - LegLenGap * 0.5;\n    }\n    \n   \tdis = sdCylinder( vec3(abs(legPos.x),legPos.yz)-vec3(LegGap,0.,0.0), vec2(LegWid,BridgeH) );\n    mindist = min( dis, mindist );\n    \n    dis = sdBox( legPos-vec3(0.,BridgeH*0.8,0.0), vec3(LegGap*0.95,LegWid*0.7,LegWid*0.7) );\n    mindist = min( dis, mindist );\n    \n    // bridge face\n    vec3 facePos = pos;\n    dis = sdBox( facePos-vec3(0.,BridgeH,BridgeL*0.5 ), vec3(BridgeW,LegWid*0.7,BridgeL*0.5) );\n    mindist = min( dis, mindist );\n    \n    vec3 boardPos = pos;\n    if( boardPos.z < BridgeL && boardPos.z >0.){\n    \tboardPos.z = mod(boardPos.z,BoardLen)- BoardLen * 0.5;\n    }\n    dis = sdBox( boardPos-vec3(0.,BridgeH + .1,0.), vec3(BridgeW,0.1,BoardLen*0.3));\n    //dis = sdSphere( boardPos-vec3(0.,BridgeH + 4.,BridgeL*0.5),vec4(0.,0.,0.,0.5));\n    //dis = sdSphere( boardPos, vec4(0.,BridgeH,0.,0.5) );\n    mindist = min( dis, mindist );\n   \n    return mindist;  \n}\n\nfloat BridgeSeg2(float mindist,in vec3 pos){\n    float dis= 0.;\n\tpos.z -= BridgeL;\n    pos.xz = pos.zx;\n    pos.z = -pos.z;\n    pos.z += BridgeW;\n    \n    return BridgeSeg1(mindist,pos);\n}\nfloat sdBridge( in vec3 pos )\n{\n    pos*=3.;\n\tfloat mindist = 10000000.0;\n\t\n    float f = 0.5;//-0.5*cos(3.14159*pos.z/20.0);\n\tmindist = BridgeSeg1(mindist,pos);\n  \tmindist = BridgeSeg2(mindist,pos);\n\treturn 0.25*mindist;\n}\n\n\n\nvec2 map( in vec3 pos )\n{\n    vec2 res = vec2( sdPlane(     pos), 1.0 );\n    res = opU( res, vec2( sdBounceBalls( pos),1.) );\n    res = opU( res, vec2( sdBridge( pos),1.) );\n    pos -=vec3(-1,0.,-.5);\n    \n    float deg = 1.*3.14159/180.;\n    pos = rY(pos,sin(deg),cos(deg));\n    res = opU( res, vec2( sdBoat( pos),1.) );\n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n   \n\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<64; i++ )\n    {\n\t    float precis = 0.0005*t;\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<40; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox( in vec2 p )\n{\n    // filter kernel\n    vec2 w = fwidth(p) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5)-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        if( m<1.5 )\n        {\n            \n            float f = checkersGradBox( 5.0*pos.xz );\n            col = 0.3 + f*vec3(0.1);\n        }\n\n        // lighitng        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.4, 0.7, -0.6) );\n        vec3  hal = normalize( lig-rd );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n        \n        dif *= calcSoftshadow( pos, lig, 0.02, 2.5 );\n        dom *= calcSoftshadow( pos, ref, 0.02, 2.5 );\n\n\t\tfloat spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),16.0)*\n                    dif *\n                    (0.04 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 5.0 ));\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.30*dif*vec3(1.00,0.80,0.55);\n        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\t\tcol += 10.00*spe*vec3(1.00,0.90,0.70);\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nfloat remap(float a,float b ,float c, float d,float v){\n\treturn ((v-a)/(b-a))*(d-c)+ c;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 15.0 + iTime;\n\n    \n    vec3 tot = vec3(0.0);\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n    #define Deg2Rad (3.14159/180.)\n    #define Rad2Deg (180./3.14159)\n\t\n    float deg = 0.1*time + 6.0*mo.x;\n    deg = remap(0.,360.,-230.,40.,mod(deg,6.28318) * Rad2Deg) * Deg2Rad;\n    \n    // -230 ~40\n    //deg = Deg2Rad*40.;\n    float radius = 4.8;\n    // camera\t\n    vec3 ro = vec3( radius*cos(deg), 1. + 2.0*mo.y, radius*sin(deg) );\n    vec3 ta = vec3( -0.5, .1, 0.5 );\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    // ray direction\n    vec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n    // gamma\n    col = pow( col, vec3(0.4545) );\n\n    tot += col;\n\n    \n    fragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}