{"ver":"0.1","info":{"id":"XsGyzR","date":"1520772254","viewed":257,"name":"2D Dynamic Noise ","username":"ircss","description":"A fun noise function I was developing to understand the whole noise thing better. The base 2D noise was from book of shaders, this is a 3D version of it for a 2D surface. ","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","gradient","dynamic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 random3(vec3 st)\n{\n    st = vec3( dot(st,vec3(127.1,311.7,211.2)),\n            \tdot(st,vec3(269.5,183.3, 157.1)), dot(st,vec3(269.5,183.3, 17.1))  );\n   \treturn -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\nfloat noise3D(vec3 st) \n{\n\tvec3 i = floor(st) ;\n  \tvec3 f = fract(st);\n\t\t\n    vec3 u = smoothstep(0.,1.,f);\n    \n\tfloat valueNowxy01 =mix( mix( dot( random3(i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ),\n                    \t\t \t dot( random3(i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                \t\tmix( dot( random3(i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ),\n                     \t\t \t dot( random3(i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y);\n\tfloat valueNowxy02 =mix( mix( dot( random3(i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ),\n                    \t\t \t dot( random3(i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                \t\tmix( dot( random3(i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ),\n                     \t\t \t dot( random3(i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y);\n\n    return abs(mix(valueNowxy01, valueNowxy02, u.z));\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float _Time = iTime /*+ smoothstep(0.0, 0.25, abs(uv.x - abs(fract(iTime * 0.1)*2.-1.)))*/;\n\n    // Time varying pixel color\n    float refNoise = noise3D(vec3(uv.xy*7., _Time*0.8)) ;\n    \n    vec2 N=vec2(refNoise,refNoise);\n    \n   \n    \n    float index=0.1;\n    float dotProduct=dot(N,uv);\n    \n    float constant1=1.-pow(index, 2.1)*(1.-pow(dotProduct,2.1));\n    uv= index*uv  - (index*dotProduct+sqrt(constant1))*N;\n    \n    \n    vec3 col = clamp(vec3(noise3D(vec3(uv.xy*2. + 100., _Time/4.))*1.,\n                    noise3D(vec3(uv.xy*2. + 5220., _Time/4.))*1.0,\n                    noise3D(vec3(uv.xy*2. + 6200., _Time/5.)))*2.+0.5,0.,1.);\n    col.y = min(col.z, max(col.y, col.x))*col.x;\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}