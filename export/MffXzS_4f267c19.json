{"ver":"0.1","info":{"id":"MffXzS","date":"1705476155","viewed":66,"name":"Weaving Snakes","username":"PGRacer","description":"I'm sure there are much cleaner ways to do this, but I'm to lazy and should probably be doing something better with my time ;)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["snakes","cells"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CELLS 15.0\n\nfloat N11(float a) {\n    return fract(fract(a*24384.2973)*512.34593+a*128.739623);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv2 = uv;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    uv *= CELLS;\n    float id = floor(uv).x + floor(uv.y);\n    id = mod(id, 2.0);\n    float id2 = mod(floor(uv.x), 4.0) + id;\n    uv = fract(uv);\n\n    vec3 col = vec3(0.8, 0.7, 0.4);\n    \n    if (uv.x > 0.2 && uv.y > 0.2)\n        col *= uv.x > uv.y ? 0.75 : 0.5;\n        \n    if (uv.x > 0.5 && uv.y > 0.5)\n        col = vec3(1.0);\n        \n    uv.y -= 0.75;\n    uv.y += sin((uv2.x*10.0 + id2*.5)*3.1415*2.0)*0.05;\n    \n    float f = smoothstep(0.05, 0.08, abs(uv.y));\n    \n    if (id == 0.0 && uv.x < 0.5) f = 1.0;\n    float t = floor(uv2.y*CELLS);\n    if (sin((uv2.x + uv.y) * 4.0 + iTime+(N11(t)*iTime*0.25)) < 0.25) f = 1.0;\n    col *= f;\n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}