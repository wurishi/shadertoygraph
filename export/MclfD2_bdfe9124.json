{"ver":"0.1","info":{"id":"MclfD2","date":"1724411348","viewed":100,"name":"paths in random hexagonal grid 2","username":"FabriceNeyret2","description":"Pathes / islands in hexagonal binary noise.\nColoring from random seeds + mouse pick.\n\nNote that we could do that on the dual as well ( white walls )","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["illusion","graph","hexagonaltiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// variant of https://shadertoy.com/view/MfsfW2\n\nvoid mainImage( out vec4 O, vec2 p ) {\n    O = T(p);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define hash(p)  fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec3(0,23,21)  ) )\n\nvoid mainImage( out vec4 O,  vec2 p ) {\n\n    vec3 R = iResolution;\n // if (iFrame < 1 || iMouse.w > 0. ) {              // --- init pattern\n    if ( T(0).xyz != R ) { \n        if ( p == vec2(.5) ) { O = R.xyzz; return; } // to detect resolution change\n        p *= mat2(1,1./1.73, 0,2./1.73) / 2.;        // to diamond coordinates\n        vec2  g = fract( p ),                        // local diamond coordinate\n              i = floor( p );                        // diamond id\n        float k = mod(i.x+i.y,3.);\n\n        i = k < 2. ?  i + k  :  i + step(g.yx,g);    // hexagon id\n        O = vec4( hash(i) < .5 );                    // randome B&W\n     // O = vec4( hash(i) );                         // debug: show hexagons\n        return;\n    }\n    \n    O = T(p);                                        // previous state\n    \n    if ( O.w <= 0. ) {                               // we are in black corridor\n        for( int k; k<9; k++ ) {                     // if neighbor colored, flood\n            vec4  C = T( p + vec2(k%3-1,k/3-1) );\n            float c = C.x + C.y + C.z;\n            if ( c > 0. && c < 3. && C.w < O.w ) { O = C; return; }\n        }\n        \n        if ( ( O.w == 0. && hash(p-iTime) > .9999 ) || iMouse.xy == p-.5 ) \n            O = vec4( hue(hash(p+.5)) , -iTime );    // seeding of colors + time stamp\n            \n    //  if ( hash(p-iTime) > .9999 || iMouse.xy == p-.5 ) O = hue(hash(p+.5)); // seeding of colors\n    }\n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define T(p) texelFetch(iChannel0, ivec2(p), 0 )\n","name":"Common","description":"","type":"common"}]}