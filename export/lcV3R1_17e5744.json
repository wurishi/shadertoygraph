{"ver":"0.1","info":{"id":"lcV3R1","date":"1712438957","viewed":102,"name":"1-bit Dithering Webcam","username":"chaddledee","description":"Testing simple dithering between two colours. Uses webcam as input.","likes":1,"published":1,"flags":2,"usePreview":0,"tags":["dither"],"hasliked":0,"parentid":"4f33Dj","parentname":"Dithering Test w/ Webcam 2"},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Set resolution scale factor by increasing exponent 0.5 is being raised to\n    float resScaleExp = 1.0;\n    float ditherResScale = pow(0.5,resScaleExp);\n    \n    // Map fragCoords to lower res\n    vec2 lowResCoord = floor((fragCoord-iResolution.xy/2.0) * ditherResScale) / ditherResScale + iResolution.xy/2.0;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = lowResCoord/iResolution.xy;\n\n    // Get pixel information from uv location\n    vec4 texColor = texture(iChannel0, uv);\n\n    // Greyscale it\n    float grey = (texColor.r + texColor.g + texColor.b)/3.0;\n    \n    // Split screen into tiny grids\n    float minigrid =3.0;\n    \n    // Set the amount of dither levels to the amount of pixels in each grid, or set it manually to a smaller value\n    float ditherLevels = minigrid*minigrid;\n    //ditherLevels = 6.0;\n    \n    // Assign pixel number to each pixel in grid\n    float pixelNo = mod(lowResCoord.y * ditherResScale,minigrid) * minigrid + mod(lowResCoord.x * ditherResScale,minigrid);\n    pixelNo = mod(pixelNo+mod(resScaleExp + 1.0,2.0),ditherLevels);\n    \n    // Add temporal blurring (warning: can be painful to look at, probably not great for epileptic people) \n    // pixelNo = mod(pixelNo+floor(120.0*iDate.w), ditherLevels);\n    \n    // Offset pixel grey value by the number of the pixel\n    float pixelValueOffset = pixelNo/ditherLevels + 0.015*(1.0+sin(1.0*iDate.w)) + 0.01*(1.0+sin(1.7*iDate.w));\n    \n    // Floor and clamp offset grey value to get binary value (floor not round because the offset will add an average of 0.5ish anyway)\n    float ditheredGrey = clamp(floor(grey + pixelValueOffset), 0.0, 1.0);\n    \n    // Choose colours for dark pixels and light pixels\n    vec3 darkColor = vec3(0.2,0.3,0.4);\n    vec3 lightColor = vec3(0.5,0.8,0.65);\n    \n    // Set frag colour\n    vec3 colorMapped = ditheredGrey * lightColor + (1.0 - ditheredGrey) * darkColor;\n    fragColor = vec4(colorMapped, 1);\n}\n\n","name":"Image","description":"","type":"image"}]}