{"ver":"0.1","info":{"id":"NdXSRS","date":"1618745910","viewed":69,"name":"Cristal","username":"Andrej2000","description":"-","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(1.8, 1.4, -6.0);\nconst vec3 CAMERA_POS_NEAR = vec3(1.6, 1.8, -3.0);\nconst vec3 LIGHT1_POS = vec3(-2, 2, -1.3);\nconst float LIGHT1_RADIUS = 0.4;\nconst vec3 LIGHT1_COLOR = vec3(0, 1, 0.7);\n\nconst vec3 LIGHT2_POS = vec3(0, 1.3, 2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(1, 0.5, 0);\n\nvec3 CRISTAL_COLOR = vec3(0.925, 0.6953, 0.9641);\n\nvec3 randDir;\n\nconst vec3 SPHERE1_POS = vec3(0, 0, 0);\nconst float SPHERE1_RADIUS = 0.25;\nconst vec3 SPHERE1_COLOR = vec3(1, 0, 0);\n\nconst vec3 SPHERE2_POS = vec3(0.4,-0.25, -0.3);\nconst float SPHERE2_RADIUS = 0.2;\nconst vec3 SPHERE2_COLOR = vec3(0.9125, 0.78125, 0.268);\n\nconst vec3 SPHERE3_POS = vec3(-0.8,-0.3, 0.4);\nconst float SPHERE3_RADIUS = 0.2;\nconst vec3 SPHERE3_COLOR = vec3(0.6125, 0.8125, 0.1875);\n\nconst vec3 SPHERE4_POS = vec3(0, -0.7, -0.3);\nconst float SPHERE4_RADIUS = 0.2;\nconst vec3 SPHERE4_COLOR = vec3(0.0313, 0.1445, 0.9023);\n\n\n// (CAMERA_POS + t * viewVec).y == -1\n// t = (-1 - CAMERA_POS.y) / viewVec.y;\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceElipse(vec3 pos, vec3 dir, vec3 d, out vec3 normal) {\n    // x^2/d1^2 + y^2/d2^2 == 1;\n    // t * t * (dir.x * dir.x / (d1 * d1) + dir.y * dir.y / (d2 * d2)) + \n    // 2 * t * (pos.x * dir.x / (d1 * d1) + pos.y * dir.y / (d2 * d2)) +\n    // pos.x * pos.x / (d1 * d1) + pos.y * pos.y / (d2 * d2) - 1 == 0\n    float a = dir.x * dir.x / (d.x * d.x) + dir.y * dir.y / (d.y * d.y) + dir.z * dir.z / (d.z * d.z);\n    float b = pos.x * dir.x / (d.x * d.x) + pos.y * dir.y / (d.y * d.y) + pos.z * dir.z / (d.z * d.z);\n    float c = pos.x * pos.x / (d.x * d.x) + pos.y * pos.y / (d.y * d.y) + pos.z * pos.z / (d.z * d.z) - 1.0;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n\nfloat traceTriangle(vec3 pos, vec3 dir, out vec3 normal, vec3 vertexes[12], vec3 coords) {\n    vec3 e1 = vertexes[int(coords.y)] - vertexes[int(coords.x)];\n    vec3 e2 = vertexes[int(coords.z)] - vertexes[int(coords.x)];\n    vec3 pvec = cross(dir, e2);\n    float det = dot(e1, pvec);\n\n    if (det < 1e-8 && det > -1e-8) {\n        return INF;\n    }\n\n    float inv_det = 1. / det;\n    vec3 tvec = pos - vertexes[int(coords.x)];\n    float u = dot(tvec, pvec) * inv_det;\n    if (u < 0. || u > 1.) {\n        return INF;\n    }\n\n    vec3 qvec = cross(tvec, e1);\n    float v = dot(dir, qvec) * inv_det;\n    if (v < 0. || u + v > 1.) {\n        return INF;\n    }\n    normal = normalize(cross(e1, e2));\n    float D = dot(normal, vertexes[int(coords.x)]);\n    float t = (D - dot(normal, pos)) / dot(normal, dir);\n    if (t < 0.0) {\n        return INF;\n    }\n    return t;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.5\n    );\n}\n\nvec3 refraction(vec3 v_in, vec3 normal, float n1, float n2) {\n    if (dot(v_in, normal) < 0.0)\n        normal = -normal;\n    float cosA = dot(v_in, normal) / length(v_in) / length(normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v_in - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.0) {\n        return reflect(v_in, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return tang * sinB + normal * cosB;\n}\n\n\n\nfloat pow2(float x) {\n    return x * x;\n}\n\n\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\n\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - 1.0;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 5.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(0.125, 0.6953, 0.6641) * totalAbs, 1.0 - opacity);\n}\n\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 vertexes[12];\n    float k = 1.5;\n    vec3 c = vec3(0,0.27, 0);\n    vertexes[0] = vec3(0.850651, 0.000000, -0.525731) * k + c;\n    vertexes[1] = vec3(-0.850651, 0.000000, -0.525731) * k + c;\n    vertexes[2] = vec3(0.850651, 0.000000, 0.525731) * k + c;\n    vertexes[3] = vec3(-0.850651, 0.000000, 0.525731) * k + c;\n    vertexes[4] = vec3(0.525731, 0.850651, 0.000000) * k + c;\n    vertexes[5] = vec3(0.525731, -0.850651, 0.000000) * k + c;\n    vertexes[6] = vec3(-0.525731, 0.850651, 0.000000) * k + c;\n    vertexes[7] = vec3(-0.525731, -0.850651, 0.000000) * k + c;\n    vertexes[8] = vec3(0.000000, 0.525731, -0.850651) * k + c;\n    vertexes[9] = vec3(0.000000, 0.525731, 0.850651) * k + c;\n    vertexes[10] = vec3(0.000000, -0.525731, -0.850651) * k + c;\n    vertexes[11] = vec3(0.000000, -0.525731, 0.850651) * k + c;\n    \n    vec3 triangleCoords[20];\n    triangleCoords[0] = vec3(0, 8, 4);\n    triangleCoords[1] = vec3(0, 5, 10);\n    triangleCoords[2] = vec3(2, 4, 9);\n    triangleCoords[3] = vec3(2, 11, 5);\n    triangleCoords[4] = vec3(1, 6, 8);\n    triangleCoords[5] = vec3(1, 10, 7);\n    triangleCoords[6] = vec3(3, 9, 6);\n    triangleCoords[7] = vec3(3, 7, 11);\n    triangleCoords[8] = vec3(0, 10, 8);\n    triangleCoords[9] = vec3(1, 8, 10);\n    triangleCoords[10] = vec3(2, 9, 11);\n    triangleCoords[11] = vec3(3, 11, 9);\n    triangleCoords[12] = vec3(4, 2, 0);\n    triangleCoords[13] = vec3(5, 0, 2);\n    triangleCoords[14] = vec3(6, 1, 3);\n    triangleCoords[15] = vec3(7, 3, 1);\n    triangleCoords[16] = vec3(8, 6, 4);\n    triangleCoords[17] = vec3(9, 4, 6);\n    triangleCoords[18] = vec3(10, 5, 7);\n    triangleCoords[19] = vec3(11, 7, 5);\n\n    \n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float BUILDING_R = 0.0;\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    const float EMERALD_N = 1.595;\n    float EMERALD_R = pow2(EMERALD_N - GLASS_N) / pow2(EMERALD_N + GLASS_N);\n    const float SAPPHIRE_N = 1.771;\n    float SAPPHIRE_R = pow2(SAPPHIRE_N - GLASS_N) / pow2(SAPPHIRE_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 0.9, 1);\n    float mult = 1.0;\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 triangleNorm;\n        float triangleT;\n        for (int j = 0; j < 20; ++j) {\n            triangleT = traceTriangle(curPos, curDir, triangleNorm, vertexes, triangleCoords[j]);\n            if (triangleT < t) {\n                t = triangleT;\n                normal = triangleNorm;\n                if (randVals.x < GLASS_R * 5.0) {\n                    materialType = REFLECTION;\n                } else {\n                    colorMult *= CRISTAL_COLOR;\n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0) {\n                        nEnter = DIAMOND_N;\n                    } else {\n                        nEnter = AIR_N;\n                    }\n                }\n\n            }\n        }\n        \n        \n        \n        \n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        vec3 sphNorm;\n        float sphT = traceSphere(curPos - SPHERE1_POS, curDir, SPHERE1_RADIUS, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            if (randVals.x < DIAMOND_R) {\n                materialType = REFLECTION;\n            } else if (randVals.x < DIAMOND_R * 2.0) {\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                color = SPHERE1_COLOR;\n            } else {\n                colorMult *= SPHERE1_COLOR;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = DIAMOND_N;\n                } else {\n                    nEnter = AIR_N;\n                }\n            }\n        }\n        sphT = traceSphere(curPos - SPHERE2_POS, curDir, SPHERE2_RADIUS, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            if (randVals.x < DIAMOND_R) {\n                materialType = REFLECTION;\n            } else if (randVals.x < DIAMOND_R * 1.5) {\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                color = SPHERE2_COLOR;\n            } else {\n                colorMult *= SPHERE2_COLOR;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = DIAMOND_N;\n                } else {\n                    nEnter = AIR_N;\n                }\n            }\n        }\n        \n        sphT = traceSphere(curPos - SPHERE3_POS, curDir, SPHERE3_RADIUS, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            if (randVals.x < EMERALD_R) {\n                materialType = REFLECTION;\n            } else if (randVals.x < EMERALD_R * 1.5) {\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                color = SPHERE3_COLOR;\n            } else {\n                colorMult *= SPHERE3_COLOR;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = EMERALD_N;\n                } else {\n                    nEnter = AIR_N;\n                }\n            }\n        }\n        sphT = traceSphere(curPos - SPHERE4_POS, curDir, SPHERE4_RADIUS, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            if (randVals.x < SAPPHIRE_R) {\n                materialType = REFLECTION;\n            } else if (randVals.x < SAPPHIRE_R * 1.5) {\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                color = SPHERE4_COLOR;\n            } else {\n                colorMult *= SPHERE4_COLOR;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = SAPPHIRE_N;\n                } else {\n                    nEnter = AIR_N;\n                }\n            }\n        }\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n            \n        }\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}