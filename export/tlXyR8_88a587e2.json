{"ver":"0.1","info":{"id":"tlXyR8","date":"1708282894","viewed":54,"name":"Tangent lines.<<<","username":"ArmanD","description":"Try to click and drag.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["ll"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define im iMouse.xy/iResolution.y\n#define irx iResolution.x\n#define iry iResolution.y\n#define PI 3.14159265\nvec3  grid(vec2 uv){\n    vec3 col =vec3(0.);\nfloat s = 10.;\n    vec2 fr =fract(uv*s);\n   vec2 p = vec2(fr)*0.5;\n    \n    if(length(p.x) < 0.02 || length(p.y) < 0.02){\n    col += vec3(0.5,0.5,0.);\n    \n    }\n    if(uv.x>-0.005 && uv.x<0.005){\n    col += vec3(0.,0.,1.);\n        \n    }\n    if(uv.y>-0.005 && uv.y<0.005){\n    col += vec3(0.,1.,0.);\n        \n    }\n    return col;\n}\nvec3 Point(vec2 uv,vec2 pos){\n    vec3 col =vec3(0.);\n    if( distance(uv,pos)<0.02){\n    col += vec3(1.,0.,0.);\n    }\n    \n        return col;\n}\nvec2 to(vec2 p1,vec2 p2){\nreturn p2-p1;\n}\n\n\nvec3 LineEq(vec2 uv, vec2 p1,vec2 p2){\nvec3 col = vec3(0.);\nvec2 v = to(p1,p2);\n    float a = v.y, b = -v.x, x = p1.x, y=p1.y;\n    float c = -(a*x+b*y);\n    float eq = -(a*uv.x+c)/b;\t\t\t\t\t\t//a*x+b*y+c = 0\t\t\ty=-(a*x+c)/b\n    if(uv.y >= eq-abs(a)/50. && uv.y <= eq+abs(a)/50.){\n    col += vec3(0.7,0.,0.7);\n    }\nreturn col;\n}\nvec3 Line(vec2 uv){\n vec3 col =vec3(0.);\n    float x = uv.x;\n    float eq1 = 2.*x-1.;\n    if(uv.y >= eq1-0.01 && uv.y <= eq1+0.01){\n    col += vec3(0.7,0.,0.7);\n    }\n    return col;\n}\nvec3 Circle(vec2 uv, vec2 pos,vec2 point){\nvec3 col =vec3(0.);\n    float r = distance(pos,point);\n    if( distance(uv,pos)>r-0.005 && distance(uv,pos)<r+0.005){\n    col += vec3(0.,1.,0.);\n    }\n    \n        return col;\n}\nvec2 Bissectrice(vec2 p1,vec2 p2,vec2 p3){\n    vec2 a = to(p2,p1),b = to(p2,p3);\nfloat l = length(a);\n    vec2 b2 = (length(a)/length(b))*b;\n    vec2 c = to(p1,p2+b2)/2.;\n    vec2 p4 = p1+c; \n    return p4;\n}\nvec2 rotate90(vec2 v){\nreturn normalize(vec2(v.y,-v.x));\n}\nvec2 rotate(vec2 v,float a){\nreturn v*mat2(cos(a),-sin(a),sin(a),cos(a));\n}\nfloat angle(vec2 v1, vec2 v2){\nreturn acos(dot(normalize(v1),normalize(v2)));\n}\nfloat f(float X,vec2 p1,vec2 p2){\nvec2 v = to(p1,p2);\n    float a = v.y, b = -v.x, x = p1.x, y=p1.y;\n    float c = -(a*x+b*y);\n    return -(a*X+c)/b;\t\t\t\t\t\t//a*x+b*y+c = 0\t\t\ty=-(a*x+c)/b\n}\nvec2 Arc(float t,vec2 p1,vec2 p2,vec2 c){//0<t<arcLength \n    float s1 = -1.,s2=-1.;\n\tvec2 v1 = to(c,p1), v2 = to(c,p2);\n    float a1 = s1*angle(v1,vec2(1.,0.));\n    float a2 = angle(v1,v2);\n    float r = length(to(c,p1)), t2 = s2*t/r;//0<t<angle(rad)\n    if(t2*s2<=a2){\n        return vec2(cos(a1+t2),sin(a1+t2))*r + c;}\n    else{ return vec2(0.);}\n    }//*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    float ratio = iResolution.x/iResolution.y;\n    uv-=vec2(0.5*ratio,0.5);\n    /*vec2 m = im-vec2(0.5*ratio,0.5);\n    uv-=m;//*/\n    uv+=0.5;\n    float t = 5.*cos(iTime);\n    vec2[] cp = vec2[](vec2(0.,0.),im,vec2(0.8,0.0));//vec2(0.,0.6)\n\n    float R = 1./(10./* *(iTime+0.001)*/);\n   \n\tvec2 B = Bissectrice(cp[0],cp[1],cp[2]);\n    vec2 v = normalize(to(cp[1],B));\n    vec2 C = cp[1]+v*R;\n    float angle1 = acos(R/length(to(cp[0],C)));\n    float angle2 = acos(R/length(to(cp[2],C)));\n    \n    float s = 1.; if(f(cp[1].x,cp[2],cp[0])>cp[1].y){s = -1.;}\n    vec2 T1 = to(cp[0],C) + normalize(rotate(to(cp[0],C),PI-angle1*s))*R;\n    vec2 T2 = to(cp[0],C) + normalize(rotate(to(cp[2],C),PI+angle2*s))*R;\n        vec3 col = vec3(0.);\n    col += grid(uv)\n        //+Line(uv)\n    \t+Point(uv,cp[0])\n        +Point(uv,cp[1])\n        +Point(uv,cp[2])\n       /* +Point(uv,T1)\n        +Point(uv,T2)\n        +Point(uv,C)//*/\n        //+Point(uv,B)\n\t\t/*+LineEq(uv,cp[1],B)\n        +LineEq(uv,cp[1],cp[0])\n\t\t+LineEq(uv,cp[1],cp[2])\n\t\t+LineEq(uv,cp[0],cp[2])\n\t\t+LineEq(uv,cp[0],C)\n\t\t+LineEq(uv,C,T1)\n        +LineEq(uv,cp[2],C)//*/\n        +LineEq(uv,cp[0],T1)\n        +LineEq(uv,cp[2],T2)\n        +Circle(uv,C,cp[1])\n        ;\n    float it = 20. , Arclen = angle(to(C,T1),to(C,T2))*R;\n    //for(float i = 0.; i< Arclen;i+=Arclen/it){\n    float i =0.;//Arclen;\n    if(uv.x >= Arc(i,T1,T2,C).x-0.01 && uv.x <= Arc(i,T1,T2,C).x+0.01 &&\n      uv.y >= Arc(i,T1,T2,C).y-0.01 && uv.y <= Arc(i,T1,T2,C).y+0.01){ col += vec3(1.,1.,1.);}\n    //}\n    /*float iter = 50.,maxx = 0.8, ArcLen =  (angle(to(C,T1),to(C,T2)))*R;\n    for(float i = 0.;i<ArcLen;i+=ArcLen/iter){\n        if( distance(uv,Arc(i,T1,T2,C))<0.01){\n        col += vec3(1.,1.,1.);\n        }\n    }//*/\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}