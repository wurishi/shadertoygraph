{"ver":"0.1","info":{"id":"tsdcWs","date":"1602048864","viewed":94,"name":"Lava Material Study","username":"treize","description":"Study Lava Voronoi","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","voronoi","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv =  ( 2.*fragCoord - iResolution.xy ) / iResolution.y;\n    vec3 col;\n    vec2 uv2=uv;\n    Spherize(uv, vec2(0.0,0.0),0.2,vec2(7.0),uv);\n    \n    float a,b,c,d; \n    Voronoi(uv2,vec2(3.0),vec2(7.0),a,b,c,d);\n    \n    float aa,bb,cc,dd; \n    vec2 sc=uv+vec2(0.0,iTime/10.0);\n    Voronoi(sc,vec2(7.0),vec2(11.0),aa,bb,cc,dd);\n    \n    float e;\n    SimpleNoise(uv,200.0,e);\n    \n    col.r=aa+a;\n    col.g=aa/2.0+a/2.0*e;\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 voronoi_noise_randomVector(vec2 UV, vec2 offset)\n{\n\tmat2 m = \tmat2(15.27, 47.63, 99.41, 89.98);\n\tUV = fract(sin(UV* m) * 46839.32);\n\treturn vec2(sin(UV.y * +offset.x) * 0.5 + 0.5, cos(UV.x * offset.y) * 0.5 + 0.5);\n}\n\nvoid Voronoi(vec2 UV, vec2 AngleOffset, vec2 CellDensity, out float Out, out float Cells, out float Lines,out float Points)\n{\n\tvec2 g = floor(UV * CellDensity);\n\tvec2 f = fract(UV * CellDensity);\n\t\n\tfloat res = 8.0;\n\tfloat md=8.0;\n    vec2 mr;\n\tfor (int y = -1; y <= 1; y++)\n \t{\n\t    for (int x = -1; x <= 1; x++)\n\t\t{\n\t\t    vec2 lattice = vec2(x, y);\n            vec2 offset = voronoi_noise_randomVector(lattice + g, AngleOffset);\n            vec2 r = lattice +offset -f;\n\t\t    float d = dot(r,r);\n\n\t\t\tif (d < res)\n\t\t\t{\n\t\t\t    res = d;\n                mr=r;\n\t\t\t}\n\t\t}\n\t}\n    res = 8.0;\n\tfor (int y = -1; y <= 1; y++)\n \t{\n\t    for (int x = -1; x <= 1; x++)\n\t\t{\n\t\t    vec2 lattice = vec2(x, y);\n            vec2 offset = voronoi_noise_randomVector(lattice + g, AngleOffset);\n            vec2 r = lattice +offset -f;\n\t\t    float d = dot(r,r);\n\n\t\t\tif (d < res)\n\t\t\t{\n\t\t\t    res = d;\n\t\t\t    Out = res;\n\t\t\t    Cells = offset.x;\n\t\t\t}\n\t\t\tif( dot(mr-r,mr-r)>0.00001)\n\t\t\t{\n                md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n\t\t\t}\n\t\t}\n\t}\n    Lines = mix(1.0, 0.0, smoothstep( 0.0, 0.1, md ));\n\tPoints =1.0-smoothstep( 0.0, 0.1, res );\n}\nfloat noise_randomValue(vec2 uv)\n{\n\treturn fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n}\nfloat noise_interpolate(float a, float b, float t)\n{\n\treturn (1.0 - t) * a + (t * b);\n}\nfloat valueNoise(vec2 uv)\n{\n\tvec2 i = floor(uv);\n\tvec2 f = fract(uv);\n\tf = f * f * (3.0 - 2.0 * f);\n\tuv = abs(fract(uv) - 0.5);\n\tvec2 c0 = i + vec2(0.0, 0.0);\n\tvec2 c1 = i + vec2(1.0, 0.0);\n\tvec2 c2 = i + vec2(0.0, 1.0);\n\tvec2 c3 = i + vec2(1.0, 1.0);\n\tfloat r0 = noise_randomValue(c0);\n\tfloat r1 = noise_randomValue(c1);\n\tfloat r2 = noise_randomValue(c2);\n\tfloat r3 = noise_randomValue(c3);\n\tfloat bottomOfGrid = noise_interpolate(r0, r1, f.x);\n\tfloat topOfGrid = noise_interpolate(r2, r3, f.x);\n\tfloat t = noise_interpolate(bottomOfGrid, topOfGrid, f.y);\n\treturn t;\n}\nvoid SimpleNoise(vec2 UV, float Scale, out float Out)\n{\n\tfloat t = 0.0;\n\tfloat freq = pow(2.0, float(0));\n\tfloat amp = pow(0.5, float(3 - 0));\n\tt += valueNoise(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;\n\tfreq = pow(2.0, float(1.0));\n\tamp = pow(0.5, float(2.0));\n\tt += valueNoise(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;\n\tfreq = pow(2.0, float(2.0));\n\tamp = pow(0.5, float(1.0));\n\tt += valueNoise(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;\n\tOut = t;\n}\nvoid Spherize(vec2 UV, vec2 Center, float Strength, vec2 Offset, out vec2 Out)\n{\n    vec2 delta = UV - Center;\n    float delta2 = dot(delta.xy, delta.xy);\n    float delta4 = delta2 * delta2;\n    vec2 delta_offset = vec2(delta4 * Strength);\n    Out = UV + delta * delta_offset + Offset;\n}","name":"Common","description":"","type":"common"}]}