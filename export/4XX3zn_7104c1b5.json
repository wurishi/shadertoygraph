{"ver":"0.1","info":{"id":"4XX3zn","date":"1707038552","viewed":58,"name":"Sound check1","username":"kiyamada96","description":"Sound check 01","likes":1,"published":1,"flags":64,"usePreview":0,"tags":["psytrance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Md33WS","filepath":"https://soundcloud.com/nbarket/barket-cocotte-style?si=3d36f3738ac14fb1b8224c08b285b314&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/nbarket/barket-cocotte-style?si=3d36f3738ac14fb1b8224c08b285b314&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 画面解像度によるピクセル座標の正規化\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // 波形データの取得\n    float lowWave = texture(iChannel0, vec2(uv.x, 0.25)).x; // 低音\n    float midWave = texture(iChannel0, vec2(uv.x, 0.5)).x;  // 中音\n    float highWave = texture(iChannel0, vec2(uv.x, 0.75)).x; // 高音\n\n    // 波形データの高さを調整\n    float baseY = 0.52;\n    float waveHeight = 0.08;\n    float lowWavePos = baseY - lowWave * waveHeight;\n    float midWavePos = baseY - midWave * waveHeight;\n    float highWavePos = baseY - highWave * waveHeight;\n\n    // 波形の描画幅\n    float waveWidth = 0.005;\n\n    // 色のグラデーションを作成\n    vec3 gradientLow = vec3(0.5 + 0.5 * sin(uv.y * 6.0 + iTime), 0.5 + 0.5 * cos(uv.y * 6.0), 1.0);\n    vec3 gradientMid = vec3(1.0, 0.5 + 0.5 * sin(uv.y * 6.0 + iTime), 0.5 + 0.5 * cos(uv.y * 6.0));\n    vec3 gradientHigh = vec3(0.5 + 0.5 * cos(uv.y * 6.0), 1.0, 0.5 + 0.5 * sin(uv.y * 6.0 + iTime));\n\n    // 色を波形に適用\n    vec3 color = vec3(0.0);\n    color += mix(vec3(0.0), gradientLow, smoothstep(0.0, waveWidth, abs(lowWavePos - uv.y)));\n    color += mix(vec3(0.0), gradientMid, smoothstep(0.0, waveWidth, abs(midWavePos - uv.y)));\n    color += mix(vec3(0.0), gradientHigh, smoothstep(0.0, waveWidth, abs(highWavePos - uv.y)));\n\n    // 最終的な色をフラグメントに出力\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}