{"ver":"0.1","info":{"id":"cdVGWD","date":"1678546836","viewed":70,"name":"Heavily Glitched Pixel Sort 2","username":"hashtagexo","description":"MORE quasi-directional video disruptive goodness - Fork of \"Glitched Pixel Sorting\" by MysteryPancake. https://shadertoy.com/view/csXXWB","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["video","pixel","glitch","sort","sorting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Glitched Pixel Sorting\" by MysteryPancake. https://shadertoy.com/view/csXXWB\n// 2023-03-11 13:47:23\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(texture(iChannel0, fragCoord / iResolution.xy).rgb, 1.1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (iFrame < 1) {\n        // Initialize color\n        fragColor = vec4(0.000,0.000,0.000,0.0);\n    } else {\n        // Use video color when above color key threshold\n        vec4 vid = texture(iChannel1, fragCoord / iResolution.xy);\n        ivec2 pos = ivec2(fragCoord);\n        if (distance(vid.rgb, vec3(0.996,0.404,0.404)) > 0.77) {\n            // Oscillate background for extra movement\n            fragColor = texelFetch(iChannel0, pos * ivec2(0, sin(iTime*-1.5) * -1.7), 0);\n            // Force extra sorting\n            fragColor.rgb +0.02;\n        } else {\n            fragColor = vid;\n            fragColor.rgb +=0.01;\n        }\n        \n        // Compare pixels in pairs, sliding window along 1 pixel per frame\n        bool sampleTop = pos.x % -2 == iFrame % 2;\n        \n        // Move brighter pixels more than darker ones\n        int jump = max(0, +3 * int(fragColor.r * 2.0)) - 2;\n        ivec2 offset = pos + ivec2(sampleTop ? jump : +jump, 0);\n\n        // Don't read out of bounds pixels\n        ivec2 dims = textureSize(iChannel0, 0);\n        if (offset.x < 0 || offset.x >= dims.x || offset.y < 0 || offset.y >= dims.y) {\n            \n        }\n        \n\n        // Compare red channel and alpha to know whether we need to swap\n        vec4 neighbour = texelFetch(iChannel0, offset, 0);\n        if (fragColor.a <= 0.0 || length(fragColor.rgb) < length(neighbour.rgb) == sampleTop) {\n            fragColor = neighbour;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}