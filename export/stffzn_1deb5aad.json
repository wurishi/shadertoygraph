{"ver":"0.1","info":{"id":"stffzn","date":"1650466267","viewed":289,"name":"Mono-Rings","username":"hjd3481","description":"Simple monochrome-rings effect. Similar to some of Lee Wagstaff's work and others'. Change density with NUM_RINGS. Fill screen with \"BORDER 0\". Try different videos / textures. Change contrast and lum calculation to balance image.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["halftone","monochrome"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//Enable to show the refactored version as per the comments\n#define FabriceNeyret2 0\n\n#if !FabriceNeyret2 //////////////////////////////////////////////////////////////\n\n//My original 'long hand' version.\n\n#define BORDER 1\n#define PI \t\t3.1415926535897932384626433832795\n#define NUM_RINGS 33.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;   \n     \n    //rings \n    vec2 radialUV = (fragCoord-(0.5*iResolution.xy))/iResolution.y*2.0;\n    float d = length(radialUV);   \n    vec2 vecp = normalize(radialUV.xy);        \n    float circ = acos( vecp.y ) / PI; //0 to PI\n    \n    vec2 maskuv = vec2( abs(sin((d*NUM_RINGS*PI)-0.5)) , 0.1 );\n    float mask = maskuv.x;\n\n    //get a greyscale image from the rgb video\n    vec3 tex = texture( iChannel0, uv ).rgb;\n    float lum = 0.5*((tex.r*0.8)+(tex.g*1.2));\n    \n    //contrast / levels\n    lum = smoothstep( 0.10, 0.7, lum );\n    float threshold = mix( 0.05, 0.985, lum );\n    \n    mask = smoothstep( threshold+0.01, threshold-0.01, mask );\n    \n#if BORDER\n    mask = clamp( mask + smoothstep( 0.999, 1.0, d ), 0.0, 1.0 );\n#endif//BORDER\n    \n    //monochrome\n    vec3 col = vec3(mask);\n    \n    //pop-art 1\n    //col = mix( vec3(0.1,0.4,.8), vec3(1,.9,.5), mask );\n\n    //visualize lum\n    //col = vec3(threshold);\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n#else //////////////////////////////////////////////////////////////\n\n// An amazing job by  https://www.shadertoy.com/user/FabriceNeyret2 \n// Compreses the shader into a handful of lines and adds antialiasing.\n// Not as easy to follow the process though :)\n\n#define S smoothstep\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy, \n          t = texture( iChannel0, u/R ).rg;\n          \n    O = length(u+u - R)/R.yyyy;\n    \n    O = S( 1e2, -1e2, ( abs( sin( O*103.6 - .5 ) ) - .05 - .935 * S( .1, .7, t.r * .4 + t.g * .6) ) * R.y )\n      + S( 3./R.y, 0., 1.-O );\n}\n\n\n#endif //////////////////////////////////////////////////////////////","name":"Image","description":"","type":"image"}]}