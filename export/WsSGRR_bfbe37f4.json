{"ver":"0.1","info":{"id":"WsSGRR","date":"1547871035","viewed":119,"name":"Progressive Mandelbrot Plotting","username":"viclw17","description":"I watched this video (https://youtu.be/6IWXkV82oyY) explaining Mandelbrot set, and just got amazed by its \"dancing floor\" analogy. Here I made a shader out of it as an exercise.\n\nHere is the youtuber:\nhttps://www.shadertoy.com/user/BigWIngs","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float RES = 10.;\nconst float max_iter = 100.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float s = 2.;\n    uv *= s;\n    float sin01 = (sin((iTime))+1.)*.5;\n    float counter = floor(sin01*RES);\n    vec2 c = floor((uv)*counter+vec2(.5))/counter;\n    \n    // Main algorithm\n    vec2 z = vec2(0);\n    float iter = 0.;\n    for(float i = 0.; i < max_iter; i++){\n        // z = z^2 + c\n        z = vec2(z.x*z.x-z.y*z.y, 2.*z.x*z.y)+c;\n        if(length(z)>2.) break;\n        iter ++;\n    }\n    \n    float f = iter/max_iter;\n    vec3 gold = vec3(1, .874, 0);\n    vec3 col = mix(vec3(.5), gold, f);\n    \n    // Grids and bands\n    uv *= 2.;\n    if(fract(abs(uv.x))<.03||fract(abs(uv.y))<.03) col = vec3(0);\n    col *= (abs(uv.x)>4.)?0.:1.;\n    \n    fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}