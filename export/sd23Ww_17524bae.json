{"ver":"0.1","info":{"id":"sd23Ww","date":"1617521241","viewed":69,"name":"CG-2-witch-icosahedron","username":"koralexa","description":"Shader for second task of computer graphics course","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["icosahedron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    \n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float EPS = 1e-5;\nconst float PI = 3.14159265358979323846;\n\nconst vec3 CAMERA_POS = vec3(0.1, 0.5, -5);\n\nvec3 LIGHT1_POS;\nconst float LIGHT1_RADIUS = 0.07;\nconst vec3 LIGHT1_COLOR = vec3(0.1, 1, 1);\n\nvec3 LIGHT2_POS;\nconst float LIGHT2_RADIUS = 0.1;\nconst vec3 LIGHT2_COLOR = vec3(0.929412, 0.831373, 0.670588);\n\nvec3 LIGHT3_POS;\nconst float LIGHT3_RADIUS = 0.1;\nconst vec3 LIGHT3_COLOR = vec3(0.9607843, 0.7568627, 0.8705882);\n\nvec3 LIGHT4_POS;\nconst float LIGHT4_RADIUS = 0.05;\nconst vec3 LIGHT4_COLOR = vec3(0.3, 1, 0.6);\n\nconst float GLASS_N = 1.5;\nconst float AIR_N = 1.0;\nconst float WATER_N = 1.33;\n\nconst float NOIZE_AMPLITUDE = 0.15;\nconst vec3 WATER_COLOR = vec3(0, 0.4, 0.9);\n\nfloat icosLowestApex = 0.0;\n\nvec3 randDir;\n\nconst float phi = (1.0 + 2.2360679774) / 2.0;\n\nvec3 rotateAroundX(vec3 v, float angle) {\n    vec4 v2 = vec4(v, 1.0);\n    float angle2 = angle * PI / 180.0;\n    mat4 rotMatrix = mat4(1, 0,            0,           0,\n                          0, cos(angle2), -sin(angle2), 0,\n                          0, sin(angle2),  cos(angle2), 0,\n                          0, 0,            0,           1);\n    v2 = v2 * rotMatrix;\n    return vec3(v2.x, v2.y, v2.z);\n}\n\nvec3 rotateAroundY(vec3 v, float angle) {\n    vec4 v2 = vec4(v, 1.0);\n    float angle2 = angle * PI / 180.0;\n    mat4 rotMatrix = mat4( cos(angle2), 0, sin(angle2), 0,\n                           0,           1, 0,           0,\n                          -sin(angle2), 0, cos(angle2), 0,\n                           0,           0, 0,           1);\n    v2 = v2 * rotMatrix;\n    return vec3(v2.x, v2.y, v2.z);\n}\n\nvec3 rotateAroundZ(vec3 v, float angle) {\n    vec4 v2 = vec4(v, 1.0);\n    float angle2 = angle * PI / 180.0;\n    mat4 rotMatrix = mat4(cos(angle2), -sin(angle2), 0, 0,\n                          sin(angle2),  cos(angle2), 0, 0,\n                          0,            0,           1, 0,\n                          0,            0,           0, 1);\n    v2 = v2 * rotMatrix;\n    return vec3(v2.x, v2.y, v2.z);\n}\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = float(float(-1.0) - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 6.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(D));\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal, float r, float upY) {\n    float upT = (upY - pos.y) / dir.y;\n    vec3 finalPos = pos + dir * upT;\n    if (dot(finalPos.xz, finalPos.xz) < r * r) {\n        normal = vec3(0, 1, 0);\n    } else {\n        upT = INF;\n    }\n    if (upT < 0.0) {\n        upT = INF;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float D = b * b - (dot(pos.xz, pos.xz) - r * r) * a;\n    if (D < 0.0) {\n        return upT;\n    }\n    float t = (-b - sqrt(D)) / a;\n    if ((pos.y + t * dir.y < upY) && (t > 0.0) && (t < upT)) {\n        vec3 worldPos = pos + t * dir;\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    t = (-b + sqrt(D)) / a;\n    if ((pos.y + t * dir.y < upY) && (t > 0.0) && (t < upT)) {\n        vec3 worldPos = pos + t * dir;\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return upT;\n}\n\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 apex1, vec3 apex2, vec3 apex3, out vec3 normal) {\n    vec3 edge1 = apex2 - apex1;\n    vec3 edge2 = apex3 - apex1;\n    vec3 tNormal = normalize(cross(edge1, edge2));\n    \n    float normalViewAngle = dot(dir, tNormal);\n    if (abs(normalViewAngle) < EPS) {\n        return INF;\n    }\n    float d = dot(apex1 - pos, tNormal) / normalViewAngle;\n    if (d < 0.0) {\n        return INF;\n    }\n    \n    vec3 hitPos = pos + dir * d;\n    \n    float square = length(cross(edge1, edge2));\n    vec3 toHitVec1 = hitPos - apex1;\n    vec3 toHitVec2 = hitPos - apex2;\n    vec3 toHitVec3 = hitPos - apex3;\n    \n    float square1 = length(cross(toHitVec1, toHitVec2));\n    float square2 = length(cross(toHitVec2, toHitVec3));\n    float square3 = length(cross(toHitVec1, toHitVec3));\n    \n    if (abs(square - square1 - square2 - square3) < EPS) {\n        normal = tNormal;\n        return d;\n    }\n    return INF;\n}\n\nfloat traceIcosahedron(vec3 pos, vec3 dir, out vec3 normal) {\n    float t1 = INF;\n    float t2;\n    vec3 normal2;\n    \n    vec3 apex0  = rotateAroundY(rotateAroundX(vec3( phi * 0.5,  0.5,        0.0      ), -72.0), 25.0);\n    vec3 apex1  = rotateAroundY(rotateAroundX(vec3( phi * 0.5, -0.5,        0.0      ), -72.0), 25.0);\n    vec3 apex2  = rotateAroundY(rotateAroundX(vec3(-phi * 0.5, -0.5,        0.0      ), -72.0), 25.0);\n    vec3 apex3  = rotateAroundY(rotateAroundX(vec3(-phi * 0.5,  0.5,        0.0      ), -72.0), 25.0);\n    vec3 apex4  = rotateAroundY(rotateAroundX(vec3( 0.0,        phi * 0.5,  0.5      ), -72.0), 25.0);\n    vec3 apex5  = rotateAroundY(rotateAroundX(vec3( 0.0,       -phi * 0.5,  0.5      ), -72.0), 25.0);\n    vec3 apex6  = rotateAroundY(rotateAroundX(vec3( 0.0,       -phi * 0.5, -0.5      ), -72.0), 25.0);\n    vec3 apex7  = rotateAroundY(rotateAroundX(vec3( 0.0,        phi * 0.5, -0.5      ), -72.0), 25.0);\n    vec3 apex8  = rotateAroundY(rotateAroundX(vec3( 0.5,        0.0,        phi * 0.5), -72.0), 25.0);\n    vec3 apex9  = rotateAroundY(rotateAroundX(vec3( 0.5,        0.0,       -phi * 0.5), -72.0), 25.0);\n    vec3 apex10 = rotateAroundY(rotateAroundX(vec3(-0.5,        0.0,       -phi * 0.5), -72.0), 25.0);\n    vec3 apex11 = rotateAroundY(rotateAroundX(vec3(-0.5,        0.0,        phi * 0.5), -72.0), 25.0);\n    \n    if (apex0.y < icosLowestApex) {\n        icosLowestApex = apex0.y;\n    }\n    if (apex1.y < icosLowestApex) {\n        icosLowestApex = apex1.y;\n    }\n    if (apex2.y < icosLowestApex) {\n        icosLowestApex = apex2.y;\n    }\n    if (apex3.y < icosLowestApex) {\n        icosLowestApex = apex3.y;\n    }\n    if (apex4.y < icosLowestApex) {\n        icosLowestApex = apex4.y;\n    }\n    if (apex5.y < icosLowestApex) {\n        icosLowestApex = apex5.y;\n    }\n    if (apex6.y < icosLowestApex) {\n        icosLowestApex = apex6.y;\n    }\n    if (apex7.y < icosLowestApex) {\n        icosLowestApex = apex7.y;\n    }\n    if (apex8.y < icosLowestApex) {\n        icosLowestApex = apex8.y;\n    }\n    if (apex9.y < icosLowestApex) {\n        icosLowestApex = apex9.y;\n    }\n    if (apex10.y < icosLowestApex) {\n        icosLowestApex = apex10.y;\n    }\n    if (apex11.y < icosLowestApex) {\n        icosLowestApex = apex11.y;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex4, apex0, apex7, normal2); // 4 0 7   0\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex3, apex4, apex7, normal2); // 3 4 7   1\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    t2 = traceTriangle(pos, dir, apex10, apex3, apex7, normal2); // 10 3 7   2\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex9, apex10, apex7, normal2); // 9 10 7   3\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex0, apex9, apex7, normal2); // 0 9 7   4\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex5, apex8, apex11, normal2); // 5 8 11   5\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex5, apex11, apex2, normal2); // 5 11 2   6\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex5, apex2, apex6, normal2); // 5 2 6   7\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex5, apex6, apex1, normal2); // 5 6 1   8\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex5, apex1, apex8, normal2); // 5 1 8   9\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex4, apex8, apex0, normal2); // 4 8 0   10\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex8, apex4, apex11, normal2); // 8 4 11   11\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex3, apex11, apex4, normal2); // 3 11 4   12\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex11, apex3, apex2, normal2); // 11 3 2   13\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex10, apex2, apex3, normal2); // 10 2 3   14\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex2, apex10, apex6, normal2); // 2 10 6   15\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex9, apex6, apex10, normal2); // 9 6 10   16\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex6, apex9, apex1, normal2); // 6 9 1   17\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex0, apex1, apex9, normal2); // 0 1 9   18\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    t2 = traceTriangle(pos, dir, apex1, apex0, apex8, normal2); // 1 0 8   19\n    if (t2 < t1) {\n        t1 = t2;\n        normal = normal2;\n    }\n    \n    return t1;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 icosahedronNorm;\n    float icosahedronT = traceIcosahedron(pos, dir, icosahedronNorm);\n    if (icosahedronT < dist) {\n        return true;   \n    }\n    vec3 cylinder1Norm;\n    float cylinder1T = traceCylinder(pos, dir, cylinder1Norm, 1.0, icosLowestApex - 0.02);\n    if (cylinder1T < dist) {\n        return true;   \n    }\n    vec3 cylinder2Norm;\n    float cylinder2T = traceCylinder(pos, dir, cylinder2Norm, 0.75, icosLowestApex);\n    if (cylinder2T < dist) {\n        return true;   \n    }\n    return false;\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 1.0 / distSq1;\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 7.0 / distSq2;\n\n    vec3 toLight3 = LIGHT3_POS - pos;\n    float distSq3 = dot(toLight3, toLight3);\n    float att3 = isOccluded(pos, LIGHT3_POS + randDir * LIGHT3_RADIUS) ? 0.0 : 2.0 / distSq3;\n    \n    vec3 toLight4 = LIGHT4_POS - pos;\n    float distSq4 = dot(toLight4, toLight4);\n    float att4 = isOccluded(pos, LIGHT4_POS + randDir * LIGHT4_RADIUS) ? 0.0 : 3.0 / distSq4;\n\n    return color * (max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR \n                  + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n                  + max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHT3_COLOR\n                  + max(0.0, dot(normal, normalize(toLight4))) * att4 * LIGHT4_COLOR\n                  + texture(iChannel1, normal).rgb * 0.05);\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.0) {\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return normalize(sinB * tang + cosB * normal);\n}\n\nvec4 bilinearFilter0(vec2 coords) {\n    float size = 1024.0;\n    vec2 trTexCoords = coords * size;\n    vec2 texf = floor(trTexCoords);\n    vec2 ratio = trTexCoords - texf;\n    vec2 opposite = 1.0 - ratio;\n    vec4 result = (texture(iChannel0, texf / size) * opposite.x  + texture(iChannel0, (texf + vec2(1, 0)) / size)   * ratio.x) * opposite.y + \n                  (texture(iChannel0, (texf + vec2(0, 1)) / size) * opposite.x + texture(iChannel0, (texf + vec2(1, 1)) / size) * ratio.x) * ratio.y;\n    return result;\n}\n\nvec4 bilinearFilter2(vec2 coords) {\n    float size = 512.0;\n    vec2 trTexCoords = coords * size;\n    vec2 texf = floor(trTexCoords);\n    vec2 ratio = trTexCoords - texf;\n    vec2 opposite = 1.0 - ratio;\n    vec4 result = (texture(iChannel2, texf / size) * opposite.x  + texture(iChannel2, (texf + vec2(1, 0)) / size)   * ratio.x) * opposite.y + \n                  (texture(iChannel2, (texf + vec2(0, 1)) / size) * opposite.x + texture(iChannel2, (texf + vec2(1, 1)) / size) * ratio.x) * ratio.y;\n    return result;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame) {\n    return fract(sin(dot(vec3(frame), vec3(12.9898, 78.233, 45.5432))) * 43758.5453);\n}\n\nfloat fogSdf(vec3 pos) {\n    return length(pos) - 1.0;\n}\n\nfloat beerLambert(float absorptionCoefficient, float distanceTraveled) {\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir) {\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float absorption = 7.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= beerLambert(absorption * (texture(iChannel3, curPos * 0.2).x + texture(iChannel3, curPos * 0.4).x\n                                               + texture(iChannel3, curPos * 0.8).x + texture(iChannel3, curPos * 1.6).x) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(3, 4, 4) * totalAbs, 1.0 - opacity);\n}\n\nfloat waterSdf(vec3 pos) {\n    float displacement = (sin(27.0 * pos.x) * sin(27.0 * pos.y) * sin(27.0 * pos.z) + 0.5) * NOIZE_AMPLITUDE;\n    return length(pos) - (0.15 + displacement);\n}\n\nvec3 waterSdfNormal(vec3 pos) {\n    const float EPS2 = 0.01;\n    return normalize(vec3(waterSdf(vec3(pos.x + EPS2, pos.y, pos.z)) - waterSdf(vec3(pos.x - EPS2, pos.y, pos.z)),\n                          waterSdf(vec3(pos.x, pos.y + EPS2, pos.z)) - waterSdf(vec3(pos.x, pos.y - EPS2, pos.z)),\n                          waterSdf(vec3(pos.x, pos.y, pos.z  + EPS2)) - waterSdf(vec3(pos.x, pos.y, pos.z - EPS2))));\n}\n\nfloat sampleWater(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = waterSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    for (int i = 0; i < 150; i++) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = waterSdf(curPos);\n        if (sdf < 0.0) {\n            normal = waterSdfNormal(curPos);\n            return float(i) * MARCH_SIZE + t;\n        }\n    }\n    return INF;\n}\n\nfloat marchRayThroughWater(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = waterSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    for (int i = 0; i < 150; i++) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE) * dir;\n        float sdf = waterSdf(curPos);\n        if (sdf > 0.0) {\n            normal = waterSdfNormal(curPos);\n            return float(i) * MARCH_SIZE;\n        }\n    }\n    return INF;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5); // soft shadows \n    \n    fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0)/ iResolution.x; // antialiacing\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    \n    LIGHT1_POS = vec3(-2, -0.1, 0.8) + randVals * 0.03;\n    LIGHT2_POS = vec3(-0.4, 0.9, -2.1) + randVals * 0.02;\n    LIGHT3_POS = vec3(0.9, 0.3, -0.05) + randVals * 0.025;\n    LIGHT4_POS = vec3(0.3, 0.9, -0.3) + randVals * 0.025; // motion blur\n    \n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n\n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    \n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float WATER_R = pow2(GLASS_N - WATER_N) / pow2(GLASS_N + WATER_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; i++) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        bool inWater = false;\n        \n        randVals = vec3(rand(float(iFrame + i)), rand(float(iFrame + 5 + i)), rand(float(iFrame + 15 + i)));\n        \n        vec3 icosahedronNorm;\n        float icosahedronT = traceIcosahedron(curPos, curDir, icosahedronNorm);\n        if (icosahedronT < t) {\n            t = icosahedronT;\n            normal = icosahedronNorm;\n            inWater = false;\n            float randomValue = randVals.x;\n            if (i % 3 == 1) {\n                randomValue = randVals.y;\n            } else if (i % 3 == 2) {\n                randomValue = randVals.z;\n            }\n            vec3 newNormal = normal;\n            if (dot(curDir, newNormal) < 0.0) {\n                newNormal = -newNormal;\n            }\n            float cos_a = dot(curDir, newNormal);\n            float reflectedPart = GLASS_R + (1.0 - GLASS_R) * pow((1.0 - cos_a), 5.0);\n            if (randomValue < reflectedPart) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        \n        vec3 waterNorm;\n        float waterT = sampleWater(curPos, normalize(curDir + randVals * 0.02), waterNorm);\n        if (waterT < t) {\n            t = waterT;\n            normal = waterNorm;\n            inWater = true;\n            float randomValue = randVals.x;\n            if (i % 3 == 1) {\n                randomValue = randVals.y;\n            } else if (i % 3 == 2) {\n                randomValue = randVals.z;\n            }\n            vec3 newNormal = normal;\n            if (dot(normalize(curDir + randVals * 0.02), newNormal) < 0.0) {\n                newNormal = -newNormal;\n            }\n            float cos_a = dot(normalize(curDir + randVals * 0.02), newNormal);\n            float reflectedPart = WATER_R + (1.0 - WATER_R) * pow((1.0 - WATER_R), 5.0);\n            if (randomValue < WATER_R) {\n                materialType = REFLECTION;\n                inWater = false;\n            } else {\n                materialType = REFRACTION;\n                nEnter = WATER_N;\n            }\n        }\n        \n        vec3 light1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, light1Norm);\n        if (light1T < t) {\n            t = light1T;\n            inWater = false;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = light1Norm;\n        }\n        \n        vec3 light2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, light2Norm);\n        if (light2T < t) {\n            t = light2T;\n            inWater = false;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = light2Norm;\n        }\n        \n        vec3 light3Norm;\n        float light3T = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_RADIUS, light3Norm);\n        if (light3T < t) {\n            t = light3T;\n            inWater = false;\n            materialType = EMISSION;\n            color = LIGHT3_COLOR;\n            normal = light3Norm;\n        }\n        \n        vec3 light4Norm;\n        float light4T = traceSphere(curPos - LIGHT4_POS, curDir, LIGHT4_RADIUS, light4Norm);\n        if (light4T < t) {\n            t = light4T;\n            inWater = false;\n            materialType = EMISSION;\n            color = LIGHT4_COLOR;\n            normal = light4Norm;\n        }\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            inWater = false;\n            vec3 worldPos = t * curDir + curPos;\n            materialType = DIFFUSE;\n            if (randVals.y < 0.5) {\n                materialType = REFLECTION;\n            }\n            color = bilinearFilter0(worldPos.xz * 0.3).rgb;\n            normal = planeNorm;\n        }\n        \n        vec3 cylinder1Norm;\n        float cylinder1T = traceCylinder(curPos, curDir, cylinder1Norm, 1.0, icosLowestApex - 0.02);\n        if (cylinder1T < t) {\n            t = cylinder1T;\n            inWater = false;\n            vec3 worldPos = t * curDir + curPos;\n            materialType = DIFFUSE;\n            color = bilinearFilter2(worldPos.xz * worldPos.y * 0.7).rgb;\n            normal = cylinder1Norm;\n        }\n        \n        vec3 cylinder2Norm;\n        float cylinder2T = traceCylinder(curPos, curDir, cylinder2Norm, 0.75, icosLowestApex);\n        if (cylinder2T < t) {\n            t = cylinder2T;\n            inWater = false;\n            vec3 worldPos = t * curDir + curPos;\n            materialType = DIFFUSE;\n            color = bilinearFilter0(worldPos.xz * worldPos.y * 0.3).rgb;\n            normal = cylinder2Norm;\n        }\n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            if (materialType == EMISSION) {\n                fragColor.rgb = color;\n                break;\n            } else if (materialType == DIFFUSE) {\n                worldPos = (t - EPS) * curDir + curPos;\n                fragColor.rgb = mix(fragColor.rgb, computeLight(worldPos, color, normal), colorMult);\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * EPS;\n            } else if (materialType == REFRACTION) {\n                if (!inWater) {\n                    curDir = refraction(normalize(curDir), normalize(normal), n1, nEnter);\n                } else {\n                   curDir = refraction(normalize(curDir + randVals * 0.02), normalize(normal), n1, nEnter);\n                }\n                curPos = worldPos + curDir * EPS; \n                if (n1 == AIR_N) {\n                    vec4 fog = sampleFog(curPos, curDir);\n                    fragColor.rgb = mix(fragColor.rgb, fog.rgb, fog.a);\n                    colorMult *= 1.0 - fog.a;\n                }\n                n1 = nEnter;\n                if (inWater) {\n                    nEnter = GLASS_N;\n                    float waterOut;\n                    vec3 waterNormal;\n                    waterOut = marchRayThroughWater(curPos, curDir, waterNormal);\n                    float randomValue = randVals.y;\n                    if (i % 3 == 1) {\n                        randomValue = randVals.z;\n                    } else if (i % 3 == 2) {\n                        randomValue = randVals.x;\n                    }\n                    if ((waterOut != INF) && (length(waterNormal) > EPS)) {\n                        fragColor.rgb = mix(fragColor.rgb, WATER_COLOR, (waterOut + randomValue) / 2.5 * colorMult.x);\n                        colorMult *= 1.0 - (waterOut + randomValue) / 2.5 * colorMult.x;\n                    } else {\n                        fragColor.rgb = mix(fragColor.rgb, WATER_COLOR, 0.3 * colorMult);\n                        colorMult *= 1.0 - 0.3 * colorMult.x;\n                    }\n                    curPos = curPos + (waterOut + EPS) * curDir;\n                    vec3 newNormal = waterNormal;\n                    if (dot(curDir, newNormal) < 0.0) {\n                        newNormal = -newNormal;\n                    }\n                    float cos_a = dot(curDir, newNormal);\n                    float reflectedPart = WATER_R + (1.0 - WATER_R) * pow((1.0 - WATER_R), 5.0);\n                    if (randomValue < WATER_R) {\n                        curDir = reflect(curDir, waterNormal);\n                    } else {\n                        curDir = refraction(curDir, waterNormal, n1, nEnter);\n                    }\n                    n1 = nEnter;\n                }\n            }\n        } else {\n            vec3 textureDir = rotateAroundY(curDir, 90.0);\n            fragColor.rgb += texture(iChannel1, vec3(textureDir.x, textureDir.y + 0.1, textureDir.z)).rgb * 0.6 * colorMult;\n            break;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}