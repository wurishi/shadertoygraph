{"ver":"0.1","info":{"id":"lcj3zm","date":"1704015702","viewed":136,"name":"Log point spiral (rb)","username":"ChunderFPV","description":"Added some radial blur to an old shader.","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["blur","spiral","radial","points","logarithmic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// added a couple features from Xor's radial blur to my own\n// https://www.shadertoy.com/view/cltfRf\n\n#define H(a) (cos(radians(vec3(0, 60, 120))+(a)*6.2832)*.5+.5)\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec2 R = iResolution.xy,\n         m = iMouse.xy/R,\n         u = U/R;\n    \n    if (iMouse.z < 1.) m = vec2(.5);\n    \n    vec3 c = texture(iChannel0, u).rgb, // buffer A\n         k;\n    \n    float l = 100., // loop size\n          j = 1./l, // increment size\n          aa = length((U+U-R)/R.y*2.), // mipmap aa\n          b = j*9., // brightness\n          i = j;\n    \n    for (; i<1.; i+=j)\n          k = texture(iChannel0, mix(u, m, 1.-i), aa).rgb,\n          c += b * H(i) * sqrt(i) * (k + .1 - i*.1);\n    \n    c.r += .1-aa*.1;\n    C = vec4(tanh(c*c), 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// original: https://www.shadertoy.com/view/Dl3Sz4\nvoid mainImage(out vec4 C, in vec2 U)\n{\n    vec3 c = vec3(0);\n    \n    vec2 R = iResolution.xy,\n         m = iMouse.xy/R,\n         u = (U-.5*R)/R.y*6.,\n         o;\n    \n    float r = length(u);\n    \n    u.x = tan(log(r)-atan(u.y, u.x)*1.5); // x to log spiral\n    u.y = r; // y to radial\n    u = max(abs(u), 1./abs(u)); // reciprocals\n    \n    o = vec2(0, iTime/5.*round(u.x)); // move Y at the speed of X\n    c += min(1., 1./length((fract(u-o+.5)-.5)/fwidth(u))) // point grid\n       / max(1., abs(u.x)); // darken limits\n    \n    C = vec4(c, 1);\n}","name":"Buffer A","description":"","type":"buffer"}]}