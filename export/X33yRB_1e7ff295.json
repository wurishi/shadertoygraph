{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define time iTime\n#define Pi 3.1415926535\n#define Pi2 (Pi*2.)\n#define resolution iResolution\n\nfloat bpm = 141.;\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.,0.33,0.67);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat depth = time/10.;\n\tfloat zoom = 10.;\n\tvec2 uv = (fragCoord.xy/2. - resolution.xy) /resolution.y;\n\tuv /= zoom;\n\tvec2 uv0 = uv;\n\tvec3 color = vec3(0);\n\nfloat angle = depth*2.;\n\tfor (float j = 0.; j<zoom; ++j) {\n\t\tuv = fract(uv*2.)-.5;\n\t\t\tuv *= mat2(cos(angle),-sin(angle),sin(angle),cos(angle));\n\tfloat d = smoothstep(0.,.15,abs(sin(length(uv)*8.+time)/8.));\n\td = .02/d;\n\tvec3 col = palette(length(uv*j));\n\tcol *= palette(length(uv0*j));\n\n  color += col * d;\n  //color += vec3(d);\n\t}\n    \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"X33yRB","date":"1735234256","viewed":80,"name":"Kabbalistic fractal circles","username":"ekaunt","description":"Lots of arcane kabbalistic looking circles","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","psychedelic"],"hasliked":0,"parentid":"","parentname":""}}