{"ver":"0.1","info":{"id":"DtySDd","date":"1686447929","viewed":339,"name":"Fork Motion Blu c64cosmin 892","username":"c64cosmin","description":"Motion blur on a 2D deformation effect.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","blur","deform","motionblur"],"hasliked":0,"parentid":"Xsf3Rn","parentname":"Motion Blurred Texture"},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Forked to add color blending and hue shift\n\nvec2 getCenter(in vec2 p, in float t){\nreturn 0.5*sin( t*vec2(1.1,1.3)+vec2(0.0,0.5) );\n}\nvec2 deformUV(in vec2 p, in float t){\n    p += getCenter(p,t);\n\n\tfloat a = atan( p.y, p.x );\n    float r = length( p );\n    \n    float s = r * (1.0+0.5*cos(t*1.7));\n\n    \n    return 0.1*t + 0.05*p.yx + 0.05*vec2( cos(t+a*2.0),\n                                          sin(t+a*2.0))/s;\n}\n\nvec3 deform( in vec2 p, in float t )\n{\n    return texture( iChannel0, 0.5*deformUV(p,t) ).xyz;\n}\n\nvec3 hueShift( vec3 color, float hueAdjust ){\n\n    const vec3  kRGBToYPrime = vec3 (0.299, 0.587, 0.114);\n    const vec3  kRGBToI      = vec3 (0.596, -0.275, -0.321);\n    const vec3  kRGBToQ      = vec3 (0.212, -0.523, 0.311);\n\n    const vec3  kYIQToR     = vec3 (1.0, 0.956, 0.621);\n    const vec3  kYIQToG     = vec3 (1.0, -0.272, -0.647);\n    const vec3  kYIQToB     = vec3 (1.0, -1.107, 1.704);\n\n    float   YPrime  = dot (color, kRGBToYPrime);\n    float   I       = dot (color, kRGBToI);\n    float   Q       = dot (color, kRGBToQ);\n    float   hue     = atan (Q, I);\n    float   chroma  = sqrt (I * I + Q * Q);\n\n    hue += hueAdjust;\n\n    Q = chroma * sin (hue);\n    I = chroma * cos (hue);\n\n    vec3    yIQ   = vec3 (YPrime, I, Q);\n\n    return vec3( dot (yIQ, kYIQToR), dot (yIQ, kYIQToG), dot (yIQ, kYIQToB) );\n\n}\n\n#define STEPS 30\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord/iResolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n    float tt = iTime*0.05;\n    vec2 dd=deformUV(p,tt);\n    \n    vec3 col = vec3(0.0);\n    for( int i=0; i<STEPS; i++ )\n    {\n        float t = tt + float(i)*0.005; \n        col += deform( p, t );\n    }\n    col /= float(STEPS);\n\n\tcol *= 1.5*(0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.25 ));\n    float ddd = length(-p-getCenter(p,tt));\n    ddd = smoothstep(ddd,0.0,0.2);\n    col = mix(col, hueShift(col, 5.0*tt+20.0*dd.x), ddd);\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}