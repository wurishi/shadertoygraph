{"ver":"0.1","info":{"id":"ftXyWl","date":"1649104247","viewed":121,"name":"Presentation for Critical Code","username":"formographik","description":"for critical code","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["lighting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// A shader by Nicole Vella. (2022)\n// @nicole.vella.art\n// www.nicolevella.com\n//\n// Attribution 4.0 International (CC BY 4.0)\n// This work is licensed under a Creative Commons Attribution 4.0 International License. \n// http://creativecommons.org/licenses/by/4.0/\n\n#define NUM_LIGHTS 9.\n#define TAU 6.283185\n#define BRIGHTNESS 0.04\n\nfloat Light(vec2 p, float s) {\n    float d = length(p);\n    return s/d;\n}\n\nvec3 Hash13(float t) {\n    float x = fract(sin(t*658.3)*456.7);\n    float y = fract(sin((t+x)*467.9)*354.3);\n    float z = fract(sin((t+x+y)*389.4)*764.2);\n    return vec3(x,y,z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.0);\n    float t = iTime*.45;\n    \n    for (float i = 0.; i < NUM_LIGHTS; i++) {\n    \n        float p = i/NUM_LIGHTS;\n    \n        vec3 color = sin(vec3(.5,.6,.8)*i*TAU)*.5+.5;\n        \n        float f = floor(p+t);\n        \n        color = Hash13(f);\n    \n        float radius = sin(t)*.75;\n    \n        vec2 animation = vec2(sin(p*TAU+t),cos(p*TAU+t))*radius;\n        \n        float circle = Light(uv-animation,BRIGHTNESS);\n    \n        col+=circle*color;\n    \n    }\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}