{"ver":"0.1","info":{"id":"DlXfWn","date":"1692775542","viewed":256,"name":"Fourier spectr Void And Cluster","username":"FabriceNeyret2","description":"Show the Fourier Transform of Void And Cluster bluenoise ( sigma = 2.5 )","likes":11,"published":3,"flags":32,"usePreview":0,"tags":["noise","bluenoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ===  Fourier Transform of Void And Cluster bluenoise ( Buff A,B,C, from https://www.shadertoy.com/view/mt2cWR ) ===\n// inspired from krax shader + my simplifications: https://www.shadertoy.com/results?query=Void+And+Cluster+Bluenoise\n\n// fork from Fourier-based transform (e.g. kernel convolution) using https://www.shadertoy.com/view/4s3GDs\n// adapted from  Flyguy's https://www.shadertoy.com/view/MscGWS#\n// see also https://www.shadertoy.com/view/4dGGz1 to play with spectrum.\n\n\n// #define paintDFT(F) log(length(F)) / log(SIZE*SIZE)   // log scale\n   #define paintDFT(F)     length(F) / SIZE              // linear scale    \n\nvoid mainImage( out vec4 O,  vec2 u )\n{\n    vec2 R = iResolution.xy,     \n         U = ( u - R/2.) / SIZE  + vec2(2,1)/2.,\n         I = floor(U);\n         U = fract(U) * SIZE / R ;\n\n // O =       texelFetch(iChannel0, ivec2(u) % S, 0).xxxx ;return;              // uncomment for fullpage texture\n // O = vec4( texelFetch(iChannel0, ivec2(u) % S, 0).x < iMouse.x/R.x) ;return; // dither(mouse.x)\n\n    O *= 0.;\n    \n    O +=  I == vec2(-1,0) ? texture(iChannel0, (u+vec2(2,.5)*SIZE-floor(R/2.))/R).x // left: Input image\n                         // texture(iChannel0, U).x            // left: Input image\n        : I == vec2( 1,0) ? paintDFT(texture(iChannel1, U).xy) // right: DFT\n        :                   .3;  \n    \n    if ( int(u) > int(R)-10 ) { O = vec4(1, u.y/R.y > float(iFrame)/(s*s),0,0); return; } // red separator + progress bar\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//#define SIZE (2.*floor(iResolution.x/4.*.8)) // uncomment for large spectrum\n  #define SIZE s\n\nconst int S = 64;           // bluenoiseSize = SxS , cycling tile\nfloat s = float(S),         // note that more buffers are needed if S > 64 : clone C , S/8^(i+1)\n      sigma = 2.5;          // NB: krax used 1.9 \n\n#define T(x,y) texelFetch(iChannel0, ivec2(x,y) % S, 0)\n\nfloat H( uvec3 x ) {        // from iq https://www.shadertoy.com/view/XlXcW4\n    uint k = 1103515245U;   // GLIB C\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n // x = ((x>>8U)^x.yzx)*k;  // but this version only return 10⁻¹⁹ amplitude\n    return uintBitsToFloat( ((((x.x>>8U)^x.y)*k )  & 0x1fffffffU) );\n}\n\n#define M(S,c)                                                                                  \\\nvoid mainImage( out vec4 O, vec2 U ) {                                                          \\\n    if( U.x > float(S/8) || U.y > float(S/8) ) return; /* we only simulate a small square    */ \\\n    O = vec4( 0,1e35,0,0);                                                                      \\\n    ivec2   start = min( ivec2(U)*8, S - 1 ),          /* to reduce a 8x8 above subtile to 1 */ \\\n              end = min( start + 8, S );                                                        \\\n    for( int y=start.y; y<end.y; ++y)                                                           \\\n      for( int x=start.x; x<end.x; ++x) {                                                       \\\n        vec4 E = T(x,y);                                                                        \\\n        c;                                             /* store result */                       \\\n}   } \n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// This stage deals with updating the blue noise energy.\n// On the first iteration, we simply seed it with background energy.\n// output: .x = bluenoise, .y = energy.   \n// input:  D.yz = location or largest void.\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n // O = T(U.x,U.y);              // uncomment to repeat copies\n    if( U.x>s || U.y>s ) return; // we only simulate a small (cyclicling) square\n\n    if(iFrame == 0)              // init: noise = 0, energy = random\n    {   O.xy = vec2( 0, H(uvec3(U, 2111)) );\n        return;\n    }\n    \n    O = T(U.x,U.y);              // previous state\n    if(iFrame > S*S-1) return;   // max iteration reached\n \n \n    // Get the result from downscaling and finding the smallest void center\n    U = abs( floor(U) - texelFetch(iChannel1, ivec2(0), 0).zw ) / s;  // delta to target\n\n    float v = 1. - float(iFrame-1) / (s*s-1.); // noise value = normalized iterations\n\n    // Wrap around logic : max energy around optimal void center modulo s : https://www.desmos.com/calculator/zuopknqihy\n    vec2 d = ( abs( U - .5 ) - .5 )  * s / sigma;\n    O.xy += vec2( U==vec2(0) ? v : 0.,            // we are at the optimum : store noise\n                  v * exp( -dot(d,d) )            // energy += gaussian to optimum\n              //  v * max(0., 1.-length(d) )      // variant\n                );\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Void and cluster reduce init\n// input:  .xy = SxS state noise,energy.\n// output: .xyz = lowest energy value + position on SxS /8   ( and not already chosen )\n\nM( S , \n   if( E.x == 0. && E.y < O.y ) O = vec4( 0, E.y, x, y )\n )","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Void and cluster reduce iteration\n// input:  .xy = SxS /8 state energy,location\n// output: .xyz = lowest energy value + position on SxS /8²  ( and not already chosen )\n//                note that with S = 64 this is only 1 pixel.\n\nM( S/8 ,                                            \n   if( E.y < O.y ) O = E\n )","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// Fourier transform of the input\n\n// Horizontal + Vertical Discrete Fourier Transform of the input \n// 2 passes pipelined : in -> buf.zw -> buf.xy -> out\n// ( adapted from  Flyguy's https://www.shadertoy.com/view/MscGWS# )\n\n\n#define tex(ch,I)  texelFetch(ch, I, 0)\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x) * vec2(cos(b),sin(b)); } \n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    O-=O; \n    \n    if(uv.x > SIZE || uv.y > SIZE) return;\n        \n    for(float n = 0.; n < SIZE; n++)  {\n        vec2 xn = tex(iChannel0, ivec2(n+.5, uv.y) ).xy,\n             yn = tex(iChannel1, ivec2(uv.x, n+.5) ).zw,\n             a = - 6.2831853 * (uv-.5 -SIZE/2.) * n/SIZE;\n        \n        O.zw += cmul(xn, a.x);\n        O.xy += cmul(yn, a.y);\n    }\n}","name":"Buffer D","description":"","type":"buffer"}]}