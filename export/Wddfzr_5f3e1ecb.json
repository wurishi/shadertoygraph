{"ver":"0.1","info":{"id":"Wddfzr","date":"1604245657","viewed":87,"name":"sound-get ready for this-Rev-2","username":"jorge2017a1","description":"sound-get ready for this-Rev-2","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["soundgetreadyforthisrev2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a1-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n//operacion de Union\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat sdCylinderXY( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xy),p.z)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n//-------------------------------------------\n\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{\n    float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n///------------------------------------\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\t\n\tvec3 res;\n    vec3 pp=p;\n    res = vec3(9999.0, -1.0,-1.0);\n    //p= rotate_y(p-vec3(0.0,0.0,0.0), radians(45.0));\n\n    \n   \n    p.y=p.y-5.0;\n \tvec3 q=p;\n    float cz=10.00;\n    q.z = mod(q.z+0.5*cz,cz)-0.5*cz;\n    p=q;\n\t\n    \n   \n    float sdcy1 =sdCylinderXY(  p, vec2(17.0,16.0) ) ;\n    float sdcy2 =sdCylinderXY(  p, vec2(15.85,16.78) ) ;\n   \n    float dif1 = differenceSDF(sdcy1,sdcy2);\n    \n    if (mod(iTime,2.0)<1.0)\n    res =opU3(res, vec3(dif1,-1.0,6.0)); \n    else\n\tres =opU3(res, vec3(dif1,100.0,-1.0)); \n    //res =opU3(res, vec3(dif1,-1.0,2.0)); \n    \n    \n    \n    //res =opU3(res, vec3(1.0,0.0,MATERIAL_NO)); \n    //return (dist, id_color, id_material)\n    return res;\n}\n\n\n\n\nvec3 LightShadingV2(vec3 normal,vec3 p, vec3 ro,vec3 rd, vec3 plight_pos,vec3 color)\n{   \n    \n    \n    vec3 final = vec3( 0.0 );\n  \n    float shininess = 64.;\n\tvec3 l = normalize( p-plight_pos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    \n    vec3 lightDir = normalize(plight_pos);\n    vec3 viewDir = normalize(-rd);  //normalize(-rayDir);\n    vec3 halfV = normalize(viewDir + lightDir); //normalize(viewDir + lightDir);\n  \n   \n    vec3 vl = normalize( plight_pos - p );\n    vec3 ref_v = reflect( v, normal );\n   float diffuse  = max( 0.0, dot( vl, normal ) );\n      float specular = max( 0.0, dot( vl, ref_v ) );\n\t\tspecular = pow( specular, shininess );\n\t\tfinal += color * ( diffuse + specular);\n    return  final;\n    \n    \n}   \n\n\n//------------------------------------------------\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n        \n        \n        if(dO>MAX_DIST )\n        {\t\n            mObj.dist = -1.0;\n    \t\tmObj.id_color = -1.0;\n    \t\tmObj.marchCount=marchCount;\n    \t\tmObj.id_material=-1.0;\n            //return -1.0;\n            break;\n        }\n        \n        if (abs(dS.x)<MIN_DIST) \n        { break;  }\n            \n            \n        dO += dS.x;\n        marchCount++;\n        \n        \n        \n    }\n    \n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig)\n{\n    vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n//----------------------------------------------------\n\n\nvec3 getColorTextura( vec3 p, vec3 nor,  int i)\n{\n\tif (i==100 ) { return tex3D(iChannel0, p/32., nor); }\n\tif (i==101 ) { return tex3D(iChannel1, p/32., nor); }\n\tif (i==102 ) { return tex3D(iChannel2, p/32., nor); }\n\tif (i==103 ) { return tex3D(iChannel3, p/32., nor); }\n}\n//-------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos, float id_material)\n{\n    float intensity=1.0;\n    vec3 result;\n    \n    if (id_material==5.0 || id_material==6.0)\n         result =colobj;\n    else\n\t \tresult = LightShadingV2(nor,p, ro, rd, plight_pos, colobj)*intensity;\n    \n    if (mObj.blnShadow==true)\n    {\n    \tfloat fhadow=GetShadow(p,plight_pos);\n    \treturn result*fhadow;\n        \n     }\n    else\n    {  return result; }\n}\n///-------------------------------------\n\n//------------------------------------------------\nvec3 getMaterial( vec3 pp, float id_material)\n{\n  vec3 col=vec3(1.0);\n  vec3 p=pp;\n    \n    \n    if(id_material== 1.0 )\n    {\n        float c = 0.8+mod((floor(mObj.p.x) + floor(mObj.p.z) + floor(mObj.p.y)), 2.0);\n        return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 )*c;\n    }\n    \n\tif(id_material== 2.0 )\n    { \n        return checkerBoard(mObj.p.x, mObj.p.z, 3.0);\n    } \n    \n\tif(id_material== 3.0 )\n    { \n        return checkerBoard(mObj.p.x, mObj.p.z, 3.0)*vec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 );\n    } \n\n    if (id_material==4.0)\n    { // nothing hit: background gradient\n     return vec3(0.2, 0.2, 0.2) * (-mObj.uv.y+1.2);\n    }  \n    \n    \n    if (id_material==5.0)\n    { \n      vec2 uv=mObj.uv*1.80;\n       \n        uv -= 0.5;\n        \n      float d = 0.1/length(uv);\n      vec3 col = vec3(0.0);\n      col += vec3(0.5,1.0,0.8)* smoothstep(0.1, 1., pow(d, 2.)) * 0.25;\n\t  col += sin( fbm(uv + fbm(uv + fbm(uv)*0.02) * 0.08 + iTime * 0.1) - 0.01/(cos(iTime)*0.5 + 0.5));\n        \n      vec4  col4= shadeSky(uv);\n      col=mix(col,  col4.xyz*col4.xyz, col4.w);\n      return col;  \n    }  \n    \n    \n if (id_material==6.0)\n    { \n      //nubes con sol  \n      vec2 uv=mod(p.xz*0.125,2.0);  \n      uv -= 0.5;\n        \n      float d = 0.1/length(uv);\n      vec3 col = vec3(0.0);\n      //col += vec3(0.5,1.0,0.8)* smoothstep(0.1, 1., pow(d, 2.)) * 0.25;\n\t  //col += sin( fbm(uv + fbm(uv + fbm(uv)*0.02) * 0.08 + iTime * 0.1) - 0.01/(cos(iTime)*0.5 + 0.5));\n      col += sin( fbm(uv + fbm(uv + fbm(uv)*0.02) * 0.08 + iTime * 0.1) );\n        \n        vec4  col4= shadeSky(uv);\n         col=mix(col,  col4.xyz*col4.xyz, col4.w);\n      return col;  \n    }  \n    \n    \n}\n//-------------------------------------------------\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj; \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n    \n   \n    if ( float( id_color)>=100.0  && float( id_color)<=199.0 ) \n \t{  vec3 coltex=getColorTextura(p, n, int( id_color));\n        colobj=coltex;\n\t}\n\n    if (id_material>-1.0 && id_color==-1)\n        { \n            colobj=vec3(0.5);\n            colobj*=getMaterial(p, id_material); \n            return colobj;\n        }\n    return colobj;\n}\n\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    float t;\n    t=mod(iTime*20.0,360.0);\n    itime=t;\n\tmObj.blnShadow=false;\n        \n \tlight_pos1= vec3(10.0, 6.0, 10.0 );  light_color1 = vec3( 1.0 );\n \tlight_pos2= vec3( -5.0, 6.0, -5.0 ); light_color2 = vec3( 1.0, 1.0, 1.0 );\n \n    vec3 ro=vec3(0.0,7.0,-25.0+t);\n    vec3 rd=normalize(vec3(uv,1.0));\n    \n    light_pos1+=ro;\n    light_pos2+=ro;\n    \n    \n    vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd;\n    mObj.ro=ro;\n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor=mObj.normal;\n\n    vec3 colobj;\n    colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n    \n    \n\tfloat dif1=1.0;\n   \tvec3 result;\n    result=  Getluz( p,ro,rd, nor, colobj ,light_pos1,Obj.id_material);\n    result+= Getluz( p,ro,rd, nor, colobj ,light_pos2,Obj.id_material);\n    result/=1.25;\n    col= result*dif1;\n    \n     \n\n  \t//sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d /(MAX_DIST) , 3.5);    \n    col = pow(col, vec3(1.0/2.2));  \n    fragColor = vec4(col,1.0);\n}\n\n   ","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n//1-nov-2020\n//---por jorgeflores ----jorge2017a1\n\n//referencia\n//https://www.shadertoy.com/view/wsScWV ......Creado por NonGrate en 2020-04-19\n\n///Referencia  la grande comunidad de usuarios de  Shadertoy... :)\n//Reference the large community of Shadertoy users ... :)\n\n//#define PI 3.14159265358979323846\n#define TAU PI*2.\n\n\n#define C  32.703\n#define CS 34.648\n#define D  36.708\n#define DS 38.891\n#define E  41.203\n#define F  43.654\n#define FS 46.249\n#define G  48.999\n#define GS 51.913\n#define A  55.0\n#define AS 58.270\n#define B  61.735\n\n\n// Durations\nconst float WHOLE_NOTE = 1.0;\nconst float HALF_NOTE = 1.0/2.0;\nconst float _4_NOTE = 1.0/4.0;\nconst float _8_NOTE = 1.0/8.0;\nconst float _16_NOTE = 1.0/16.0;\nconst float _32_NOTE = 1.0/32.0;\nconst float DOUBLE_NOTE = 2.0;\n\n\nstruct TNote {\n    // in Hz, see \"common\" tab\n    float note;\n    float octave;\n    float offset; // offset - time in seconds when to start playing note\n    float duration;  // duration of a note (1/4, 1/8, ...), see \"common\" tab\n};\n\n    \n\nfloat n2f(float n)\n{\n    return 440.0*pow(2.0,(n-69.0)/12.0);\n}\n\n\nfloat n2m(float n)\n{\n    return pow(2.0,n/12.0);\n}\n\n\n///-----------------------------------\n\nfloat noise( float x ){return fract(sin(1371.1*x)*43758.5453);}\n//Basic waveforms with note and octave input\nfloat sn(float t, float note, float octave)\n{\n\treturn sin(t*note*exp2(octave)*PI);\n}\n\nfloat saw(float t, float note, float octave)\n{\n\treturn fract(t*note*exp2(octave-1.))-0.5;\n}\n\nfloat tri(float t, float note, float octave)\n{\n\treturn (abs(fract(t*note*exp2(octave-1.))-0.5)*2.-0.5)*2.;\n}\n\nfloat sqr(float t, float note, float octave)\n{\n\treturn step(fract(t*note*exp2(octave-1.)), 0.5)-0.5;\n}\n///-----------------------------------\n\nconst float t2 =6.5;\n\nconst TNote[] notes = TNote[] \n    (\n   //-------N1\n    TNote(E, 5.0, _8_NOTE*1.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*1.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*1.0, _8_NOTE),\n\n        \n    TNote(E, 5.0, _8_NOTE*4., _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*4., _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*4., _8_NOTE),\n        \n    TNote(E, 5.0, _8_NOTE*7.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*7.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*7.0, _8_NOTE),\n    ///------------\n     //----------N2\n    TNote(A, 4.0, _8_NOTE*9., _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*9., _8_NOTE),\n    TNote(A, 3.0, _8_NOTE*9., _8_NOTE),\n    \n    TNote(A, 4.0, _8_NOTE*11., _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*11., _8_NOTE),\n    TNote(A, 3.0, _8_NOTE*11., _8_NOTE),\n        \n    TNote(B, 4.0, _8_NOTE*13.0, _8_NOTE),\n    TNote(FS, 4.0, _8_NOTE*13.0, _8_NOTE),\n    TNote(B, 3.0, _8_NOTE*13.0, _8_NOTE),\n        \n    TNote(B, 4.0, _8_NOTE*15.0, _8_NOTE),\n    TNote(FS, 4.0, _8_NOTE*15.0, _8_NOTE),\n    TNote(B, 3.0, _8_NOTE*15.0, _8_NOTE),\n    ///------------   \n    ///---------N3\n    TNote(E, 5.0, _8_NOTE*17.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*17.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*17.0, _8_NOTE),\n\n        \n    TNote(E, 5.0, _8_NOTE*20.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*20.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*20.0, _8_NOTE),\n        \n    TNote(E, 5.0, _8_NOTE*23.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*23.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*23.0, _8_NOTE),\n    ///------------\n    //---------N4\n    TNote(G, 5.0, _8_NOTE*25.0, _8_NOTE),\n    TNote(D, 5.0, _8_NOTE*25.0, _8_NOTE),\n    TNote(G, 4.0, _8_NOTE*25.0, _8_NOTE),\n        \n    TNote(G, 5.0, _8_NOTE*27.0, _8_NOTE),\n    TNote(D, 5.0, _8_NOTE*27.0, _8_NOTE),\n    TNote(G, 4.0, _8_NOTE*27.0, _8_NOTE),\n        \n    TNote(A, 5.0, _8_NOTE*29.0, _8_NOTE),\n    TNote(E, 5.0, _8_NOTE*29.0, _8_NOTE),\n    TNote(A, 4.0, _8_NOTE*29.0, _8_NOTE),\n        \n    TNote(B, 5.0, _8_NOTE*31.0, _8_NOTE),\n    TNote(FS, 5.0, _8_NOTE*31.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*31.0, _8_NOTE),\n    //-------------------\n        \n    //---------N5\n    TNote(E, 5.0, _8_NOTE*33.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*33.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*33.0, _8_NOTE),\n        \n    TNote(E, 5.0, _8_NOTE*36.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*36.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*36.0, _8_NOTE),\n        \n    TNote(E, 5.0, _8_NOTE*39.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*39.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*39.0, _8_NOTE),\n        \n    //-------------------\n    //---------N6\n    TNote(A, 4.0, _8_NOTE*41.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*41.0, _8_NOTE),\n    TNote(A, 3.0, _8_NOTE*41.0, _8_NOTE),\n\n    TNote(A, 4.0, _8_NOTE*43.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*43.0, _8_NOTE),\n    TNote(A, 3.0, _8_NOTE*43.0, _8_NOTE),\n        \n    TNote(B, 4.0, _8_NOTE*45.0, _8_NOTE),\n    TNote(FS, 4.0, _8_NOTE*45.0, _8_NOTE),\n    TNote(B, 3.0, _8_NOTE*45.0, _8_NOTE),\n        \n    TNote(B, 4.0, _8_NOTE*47.0, _8_NOTE),\n    TNote(FS, 4.0, _8_NOTE*47.0, _8_NOTE),\n    TNote(B, 3.0, _8_NOTE*47.0, _8_NOTE),\n     //----------\n        \n    //-------N7\n    TNote(E, 5.0, _8_NOTE*49.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*49.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*49.0, _8_NOTE),\n\n        \n    TNote(E, 5.0, _8_NOTE*52.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*52.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*52.0, _8_NOTE),\n        \n    TNote(E, 5.0, _8_NOTE*55.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*55.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*55.0, _8_NOTE),\n    ///------------    \n    \n    //-------N8\n    TNote(G, 5.0, _8_NOTE*57.0, _8_NOTE),\n    TNote(D, 5.0, _8_NOTE*57.0, _8_NOTE),\n    TNote(G, 4.0, _8_NOTE*57.0, _8_NOTE),\n        \n    TNote(G, 5.0, _8_NOTE*59.0, _8_NOTE),\n    TNote(D, 5.0, _8_NOTE*59.0, _8_NOTE),\n    TNote(G, 4.0, _8_NOTE*59.0, _8_NOTE),\n    \n    TNote(A, 5.0, _8_NOTE*61.0, _8_NOTE),\n    TNote(E, 5.0, _8_NOTE*61.0, _8_NOTE),\n    TNote(A, 4.0, _8_NOTE*61.0, _8_NOTE),\n\n    TNote(A, 5.0, _8_NOTE*63.0, _8_NOTE),\n    TNote(E, 5.0, _8_NOTE*63.0, _8_NOTE),\n    TNote(A, 4.0, _8_NOTE*63.0, _8_NOTE) ,\n     //-------N9\n    TNote(E, 5.0, _8_NOTE*65.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*65.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*65.0, _8_NOTE),\n\n        \n    TNote(E, 5.0, _8_NOTE*68.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*68.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*68.0, _8_NOTE),\n        \n    TNote(E, 5.0, _8_NOTE*71.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*71.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*71.0, _8_NOTE),\n    ///------------   \n     //----------N10\n    TNote(A, 4.0, _8_NOTE*73.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*73.0, _8_NOTE),\n    TNote(A, 3.0, _8_NOTE*73.0, _8_NOTE),\n    \n    TNote(A, 4.0, _8_NOTE*75.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*75.0, _8_NOTE),\n    TNote(A, 3.0, _8_NOTE*75.0, _8_NOTE),\n        \n    TNote(B, 4.0, _8_NOTE*77.0, _8_NOTE),\n    TNote(FS, 4.0, _8_NOTE*77.0, _8_NOTE),\n    TNote(B, 3.0, _8_NOTE*77.0, _8_NOTE),\n        \n    TNote(B, 4.0, _8_NOTE*79.0, _8_NOTE),\n    TNote(FS, 4.0, _8_NOTE*79.0, _8_NOTE),\n    TNote(B, 3.0, _8_NOTE*79.0, _8_NOTE),\n    ///------------\n        \n    //-------N11\n    TNote(E, 5.0, _8_NOTE*81.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*81.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*81.0, _8_NOTE),\n        \n    TNote(E, 5.0, _8_NOTE*84.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*84.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*84.0, _8_NOTE),\n        \n    TNote(E, 5.0, _8_NOTE*87.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*87.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*87.0, _8_NOTE),\n    ///-----------\n    ///------------\n    //---------N12\n    TNote(G, 5.0, _8_NOTE*89.0, _8_NOTE),\n    TNote(D, 5.0, _8_NOTE*89.0, _8_NOTE),\n    TNote(G, 4.0, _8_NOTE*89.0, _8_NOTE),\n        \n    TNote(G, 5.0, _8_NOTE*91.0, _8_NOTE),\n    TNote(D, 5.0, _8_NOTE*91.0, _8_NOTE),\n    TNote(G, 4.0, _8_NOTE*91.0, _8_NOTE),\n        \n    TNote(A, 5.0, _8_NOTE*93.0, _8_NOTE),\n    TNote(E, 5.0, _8_NOTE*93.0, _8_NOTE),\n    TNote(A, 4.0, _8_NOTE*93.0, _8_NOTE),\n        \n    TNote(B, 5.0, _8_NOTE*95.0, _8_NOTE),\n    TNote(FS,5.0, _8_NOTE*95.0, _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*95.0, _8_NOTE),\n    //-------------------\n    //---------N13\n    ///----------8*12=96\n    //-------silencio o pausa\n    ///----------\n    //---------N13---104\n    //---------------8*13=104\n    TNote(A, 4.0, _8_NOTE*107.0, _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*107.0, _8_NOTE),\n    TNote(A, 3.0, _8_NOTE*107.0, _8_NOTE),\n        \n    TNote(B, 4.0, _8_NOTE*109.0, _8_NOTE),\n    TNote(FS,4.0, _8_NOTE*109.0, _8_NOTE),\n    TNote(B, 3.0, _8_NOTE*109.0, _8_NOTE),\n\n    TNote(D, 5.0, _8_NOTE*111.0, _8_NOTE),\n    TNote(A, 4.0, _8_NOTE*111.0, _8_NOTE),\n    TNote(D, 4.0, _8_NOTE*111.0, _8_NOTE),\n    //-------------------\n    //********************************************\n    ///-********Repetir Ahora --m5-con m12*****\n    //********************************************\n    ///--------------112\n        \n    //---------N5\n    TNote(E, 5.0, _8_NOTE*(113.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(113.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(113.), _8_NOTE),\n        \n    TNote(E, 5.0, _8_NOTE*(116.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(116.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(116.), _8_NOTE),\n        \n    TNote(E, 5.0, _8_NOTE*(119.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(119.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(119.), _8_NOTE),\n       \n    //-------------------\n    //---------N6---8x15=120\n    TNote(A, 4.0, _8_NOTE*(121.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(121.), _8_NOTE),\n    TNote(A, 3.0, _8_NOTE*(121.), _8_NOTE),\n\n    TNote(A, 4.0, _8_NOTE*(123.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(123.), _8_NOTE),\n    TNote(A, 3.0, _8_NOTE*(123.), _8_NOTE),\n        \n    TNote(B,  4.0, _8_NOTE*(125.), _8_NOTE),\n    TNote(FS, 4.0, _8_NOTE*(125.), _8_NOTE),\n    TNote(B,  3.0, _8_NOTE*(125.), _8_NOTE),\n        \n    TNote(B,  4.0, _8_NOTE*(127.), _8_NOTE),\n    TNote(FS, 4.0, _8_NOTE*(127.), _8_NOTE),\n    TNote(B,  3.0, _8_NOTE*(127.), _8_NOTE),\n     //----------\n        \n    //-------N7-----8X16=128\n    TNote(E, 5.0, _8_NOTE*(129.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(129.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(129.), _8_NOTE),\n\n        \n    TNote(E, 5.0, _8_NOTE*(132.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(132.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(132.), _8_NOTE),\n        \n    TNote(E, 5.0, _8_NOTE*(135.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(135.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(135.), _8_NOTE),\n    ///------------    \n    \n    //-------N8------8*17=136\n    TNote(G, 5.0, _8_NOTE*(137.), _8_NOTE),\n    TNote(D, 5.0, _8_NOTE*(137.), _8_NOTE),\n    TNote(G, 4.0, _8_NOTE*(137.), _8_NOTE),\n        \n    TNote(G, 5.0, _8_NOTE*(139.), _8_NOTE),\n    TNote(D, 5.0, _8_NOTE*(139.), _8_NOTE),\n    TNote(G, 4.0, _8_NOTE*(139.), _8_NOTE),\n    \n    TNote(A, 5.0, _8_NOTE*(141.), _8_NOTE),\n    TNote(E, 5.0, _8_NOTE*(141.), _8_NOTE),\n    TNote(A, 4.0, _8_NOTE*(141.), _8_NOTE),\n\n    TNote(A, 5.0, _8_NOTE*(143.), _8_NOTE),\n    TNote(E, 5.0, _8_NOTE*(143.), _8_NOTE),\n    TNote(A, 4.0, _8_NOTE*(143.), _8_NOTE),\n        \n     //-------N9\n\t//-------8*18=144\n    TNote(E, 5.0, _8_NOTE*(145.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(145.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(145.), _8_NOTE),\n\n        \n    TNote(E, 5.0, _8_NOTE*(148.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(148.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(148.), _8_NOTE),\n        \n    TNote(E, 5.0, _8_NOTE*(151.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(151.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(151.), _8_NOTE),\n    ///------------   \n     \n     //----------N10\n    //-------8*19=152\n    TNote(A, 4.0, _8_NOTE*(153.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(153.), _8_NOTE),\n    TNote(A, 3.0, _8_NOTE*(153.), _8_NOTE),\n    \n    TNote(A, 4.0, _8_NOTE*(155.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(155.), _8_NOTE),\n    TNote(A, 3.0, _8_NOTE*(155.), _8_NOTE),\n        \n    TNote(B,  4.0, _8_NOTE*(157.), _8_NOTE),\n    TNote(FS, 4.0, _8_NOTE*(157.), _8_NOTE),\n    TNote(B,  3.0, _8_NOTE*(157.), _8_NOTE),\n        \n    TNote(B,  4.0, _8_NOTE*(159.), _8_NOTE),\n    TNote(FS, 4.0, _8_NOTE*(159.), _8_NOTE),\n    TNote(B,  3.0, _8_NOTE*(159.), _8_NOTE),\n    ///------------\n        \n    //-------N11\n    //-------8*20=160\n    TNote(E, 5.0, _8_NOTE*(161.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(161.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(161.), _8_NOTE),\n        \n    TNote(E, 5.0, _8_NOTE*(164.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(164.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(164.), _8_NOTE),\n        \n    TNote(E, 5.0, _8_NOTE*(167.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(167.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(167.), _8_NOTE),\n    ///-----------\n    \n    ///------------\n    //---------N12\n     //-------8*21=168\n    TNote(G, 5.0, _8_NOTE*(169.), _8_NOTE),\n    TNote(D, 5.0, _8_NOTE*(169.), _8_NOTE),\n    TNote(G, 4.0, _8_NOTE*(169.), _8_NOTE),\n        \n    TNote(G, 5.0, _8_NOTE*(171.), _8_NOTE),\n    TNote(D, 5.0, _8_NOTE*(171.), _8_NOTE),\n    TNote(G, 4.0, _8_NOTE*(171.), _8_NOTE),\n        \n    TNote(A, 5.0, _8_NOTE*(173.), _8_NOTE),\n    TNote(E, 5.0, _8_NOTE*(173.), _8_NOTE),\n    TNote(A, 4.0, _8_NOTE*(173.), _8_NOTE),\n        \n    TNote(B, 5.0, _8_NOTE*(175.), _8_NOTE),\n    TNote(FS,5.0, _8_NOTE*(175.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(175.), _8_NOTE),\n\n    //-------------------\n    //--------------Segunda linea al mismo tiempo\n    ///2DA LINEA 1\n    ///-------------8x14=112\n    TNote(E, 5.0, _8_NOTE*(113.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(113.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(113.), _8_NOTE),\n    \n    TNote(D, 5.0, _8_NOTE*(115.), _8_NOTE),\n    TNote(A, 4.0, _8_NOTE*(115.), _8_NOTE),\n    TNote(D, 4.0, _8_NOTE*(115.), _8_NOTE),\n        \n    TNote(E, 5.0, _8_NOTE*(116.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(116.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(116.), _8_NOTE),\n       \n    TNote(D, 5.0, _8_NOTE*(118.), _8_NOTE),\n    TNote(A, 4.0, _8_NOTE*(118.), _8_NOTE),\n    TNote(D, 4.0, _8_NOTE*(118.), _8_NOTE),\n    \n    TNote(E, 5.0, _8_NOTE*(119.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(119.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(119.), _8_NOTE),\n\n    ///---------------------------------\n    ///2DA LINEA 2\n    //-------8*15=120\n    TNote(E, 5.0, _8_NOTE*(121.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(121.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(121.), _8_NOTE),\n\n    TNote(G, 5.0, _8_NOTE*(123.), _8_NOTE),\n    TNote(D, 5.0, _8_NOTE*(123.), _8_NOTE),\n    TNote(G, 4.0, _8_NOTE*(123.), _8_NOTE),\n    ///---------------------------------\n     ///---------------------------------\n    ///2DA LINEA 3\n     //-------8*16=128\n    TNote(E, 5.0, _8_NOTE*(129.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(129.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(129.), _8_NOTE),\n\n          \n    TNote(D, 5.0, _8_NOTE*(131.), _8_NOTE),\n    TNote(A, 4.0, _8_NOTE*(131.), _8_NOTE),\n    TNote(D, 4.0, _8_NOTE*(131.), _8_NOTE),\n          \n    TNote(E, 5.0, _8_NOTE*(132.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(132.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(132.), _8_NOTE), \n\n    TNote(D, 5.0, _8_NOTE*(134.), _8_NOTE),\n    TNote(A, 4.0, _8_NOTE*(134.), _8_NOTE),\n    TNote(D, 4.0, _8_NOTE*(134.), _8_NOTE), \n          \n    TNote(E, 5.0, _8_NOTE*(135.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(135.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(135.), _8_NOTE),      \n    ///---------------------------------\n    ///2DA LINEA 4\n    //-------8*17=136\n    TNote(E, 5.0, _8_NOTE*(137.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(137.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(137.), _8_NOTE),\n    \n    TNote(B,  4.0, _8_NOTE*(139.), _8_NOTE),\n    TNote(FS, 4.0, _8_NOTE*(139.), _8_NOTE),\n    TNote(B,  3.0, _8_NOTE*(139.), _8_NOTE),\n    ///2DA LINEA 5\n    //-------8*18=144\n    TNote(E, 5.0, _8_NOTE*(145.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(145.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(145.), _8_NOTE),\n    \n    TNote(D, 5.0, _8_NOTE*(147.), _8_NOTE),\n    TNote(A, 4.0, _8_NOTE*(147.), _8_NOTE),\n    TNote(D, 4.0, _8_NOTE*(147.), _8_NOTE),\n        \n    TNote(E, 5.0, _8_NOTE*(148.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(148.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(148.), _8_NOTE),\n       \n    TNote(D, 5.0, _8_NOTE*(150.), _8_NOTE),\n    TNote(A, 4.0, _8_NOTE*(150.), _8_NOTE),\n    TNote(D, 4.0, _8_NOTE*(150.), _8_NOTE),\n    \n    TNote(E, 5.0, _8_NOTE*(151.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(151.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(151.), _8_NOTE),\n    ///2DA LINEA 6\n    //-------8*19=152\n    TNote(E, 5.0, _8_NOTE*(153.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(153.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(153.), _8_NOTE),\n\n    TNote(G, 5.0, _8_NOTE*(155.), _8_NOTE),\n    TNote(D, 5.0, _8_NOTE*(155.), _8_NOTE),\n    TNote(G, 4.0, _8_NOTE*(155.), _8_NOTE),\n    ///---------------------------------    \n     ///2DA LINEA 7\n     //-------8*20=160\n    TNote(E, 5.0, _8_NOTE*(161.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(161.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(161.), _8_NOTE),\n\n    TNote(D, 5.0, _8_NOTE*(163.), _8_NOTE),\n    TNote(A, 4.0, _8_NOTE*(163.), _8_NOTE),\n    TNote(D, 4.0, _8_NOTE*(163.), _8_NOTE),\n          \n    TNote(E, 5.0, _8_NOTE*(164.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(164.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(164.), _8_NOTE), \n\n    TNote(E, 5.0, _8_NOTE*(166.), _8_NOTE),\n    TNote(B, 4.0, _8_NOTE*(166.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(166.), _8_NOTE), \n          \n    TNote(D, 5.0, _8_NOTE*(167.), _8_NOTE),\n    TNote(A, 4.0, _8_NOTE*(167.), _8_NOTE),\n    TNote(D, 4.0, _8_NOTE*(167.), _8_NOTE),\n    ///---------------------------------\n    ///2DA LINEA 8\n     //-------8*21=168\n    TNote(A, 4.0, _8_NOTE*(169.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(169.), _8_NOTE),\n    TNote(A, 3.0, _8_NOTE*(169.), _8_NOTE),\n    \n    TNote(A, 4.0, _8_NOTE*(171.), _8_NOTE),\n    TNote(E, 4.0, _8_NOTE*(171.), _8_NOTE),\n    TNote(A, 3.0, _8_NOTE*(171.), _8_NOTE),\n    \n    TNote(B,  4.0, _8_NOTE*(173.), _8_NOTE),\n    TNote(FS, 4.0, _8_NOTE*(173.), _8_NOTE),\n    TNote(B,  3.0, _8_NOTE*(173.), _8_NOTE),    \n\n    TNote(D,  5.0, _8_NOTE*(175.), _8_NOTE),\n    TNote(A,  4.0, _8_NOTE*(175.), _8_NOTE),\n    TNote(D,  4.0, _8_NOTE*(175.), _8_NOTE)    \n);\n\n\nvec2 noteFreq(TNote note, float time) {\n    \n    // 6.2831 = 2pi\n    // exp() goes exponentially down to fade out the volume\n    //return vec2(sin(6.2831 * note.frequency * time) * exp(-1.0/note.duration * (time - note.offset)));\n    float n1=saw(time,note.note, note.octave)* exp(-1.0/note.duration * (time - note.offset));\n    \n        \n    return vec2(n1);\n}\n\n\nvec2 mainSound( in int samp,float time) \n{\n    \n    \n    \n    vec2 result;\n    \n    // time counts in seconds\n    // (time - x) is required, because we want to \"reset\" exp() function\n    // otherwise the output of exp() function will go down globally\n    // and we'll hear only first note\n\n    float ftime= mod(time, 25.0);\n    for (int i = 0; i < notes.length(); i++) {\n        TNote note = notes[i];\n        float x = float(i) * 1.0;\n        if (ftime > note.offset) \n        {\n            result += noteFreq(note, ftime);\n            \n        }\n    }\n\n\n    \n    return result;\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow; \n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\nfloat saturate(float f)\n{ return clamp(f,0.0,1.0);}\n\n\n///--------------------------------------------FIN\n///--------------------------------------------\nvec3 hsv(vec3 c)\n{\n    vec4 k=vec4(1.,2./3.,1./3.,3.);\n    vec3 p=abs(fract(c.xxx+k.xyz)*6.-k.www);\n    return c.z*mix(k.xxx,clamp(p-k.xxx,0.,1.),c.y);\n}\n\n///Gracias a SHane...16-jun-2020\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n    n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n    n /= dot(n, vec3(1)); \n    vec3 tx = texture(tex, p.yz).xyz;\n    vec3 ty = texture(tex, p.zx).xyz;\n    vec3 tz = texture(tex, p.xy).xyz;\n    return mat3(tx*tx, ty*ty, tz*tz)*n; \n}\n\nfloat random() \n{ return fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453); }\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1) //30\n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{    \n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n//----------------oooooooooooo-----------------\n\n#define LACUNARITY 1.98\n#define GAIN 0.45\n#define OCTAVES 8\n\nfloat hash21(vec2 uv) {\n    vec2 entropy = sin(uv * vec2(146., 745.));\n\t\n    return fract(cos(dot(uv, entropy)) * 4560.);\n}\n\nfloat noise(vec2 uv) {\n\tvec2 i = floor(uv);\n    vec2 f = fract(uv);\n    \n    f = f*f*(3.0 - 2.0 * f);\n    float a = hash21(i);\n    float b = hash21(i + vec2(1., 0.));\n    float c = hash21(i + vec2(0., 1.));\n    float d = hash21(i + vec2(1., 1.));\n    \n    return mix(mix(a, b, f.x), mix(c, d, f.x), f.y);\n}\n\nfloat fbm(vec2 uv) {\n    float value = 0.;\n    float amp = 1.;\n    float freq = 4.;\n    float divisor = 0.;\n    \n    for(int i = 0; i < OCTAVES; i++) {\n     value += noise(uv * freq) * amp;\n     divisor += amp;  \n     freq *= LACUNARITY;\n     amp *= GAIN;\n    }\n    \n    return value / divisor;\n}\n\nconst float horizon =-0.35;\nvec4 shadeSky(vec2 uv)\n{\n    float dist = uv.y - horizon;\n    return vec4(.3-dist, .6-dist, 1.0-dist/4.0,dist);\n}\n\n//----------------oooooooooooo-----------------\n","name":"Common","description":"","type":"common"}]}