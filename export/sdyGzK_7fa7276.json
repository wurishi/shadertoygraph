{"ver":"0.1","info":{"id":"sdyGzK","date":"1631798068","viewed":156,"name":"Isosceles Triangle SDF","username":"TheTurk","description":"Distance function for an isosceles triangle. A special case of an isosceles trapezoid ([url]https://www.shadertoy.com/view/fsy3zG[/url]). This is the basis for a cone ([url]https://www.shadertoy.com/view/fl3GW8[/url]).","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","sdf","triangle","distance","primitive","isosceles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float triangle(vec2 position, float halfWidth, float halfHeight) {\n    position.x = abs(position.x);\n    position -= vec2(halfWidth, -halfHeight);\n    vec2 e = vec2(-halfWidth, 2.0 * halfHeight);\n    vec2 q = position - e * clamp(dot(position, e) / dot(e, e), 0.0, 1.0);\n    float d = length(q);\n    if (max(q.x, q.y) > 0.0) {\n        return d;\n    }\n    return -min(d, position.y);\n}\n\n/*\n// alternative version without branching\nfloat triangle(vec2 position, float halfWidth, float halfHeight) {\n   position.x = abs(position.x);\n   position -= vec2(halfWidth, -halfHeight);\n   vec2 e = vec2(-halfWidth, 2.0 * halfHeight);\n   vec2 d1 = position - e * clamp(dot(position, e) / dot(e, e), 0.0, 1.0);\n   vec2 d2 = vec2(max(position.x, 0.0), -position.y);\n   return sqrt(min(dot(d1, d1), dot(d2, d2))) * sign(max(max(d1.x, d1.y), d2.y));\n}\n*/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    float halfWidth = 0.4;\n    float halfHeight = 0.6;\n    float d = triangle(position, halfWidth, halfHeight);\n\n    // same colorization that Inigo Quilez uses in his shaders\n    vec3 color = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n    color *= 1.0 - exp(-4.0 * abs(d)); \n\tcolor *= 0.8 + 0.2 * cos(120.0 * d);\n    color = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 3.0, (abs(d) - 0.003) * iResolution.y));\n    if (iMouse.z > 0.0) {\n        vec2 mousePosition = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n        float d = triangle(mousePosition, halfWidth, halfHeight);\n        color = mix(color, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 3.0, abs(length(position - mousePosition) - abs(d)) * iResolution.y - 1.0));\n    }\n    fragColor = vec4(color, 1.0);\n} ","name":"Image","description":"","type":"image"}]}