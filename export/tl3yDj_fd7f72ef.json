{"ver":"0.1","info":{"id":"tl3yDj","date":"1610132763","viewed":64,"name":"Sphere Test 1879","username":"charlesharvey","description":"sphere","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat sphere_map(in vec3 pos) {\n\n    float t = fract(iTime);\n    float y = 4.0 * t*(1.0-t);\n    // origin of the sphere\n    vec3 cen = vec3(0.0,y,0.0);\n\n    return length(pos-cen)-1.0;\n\n}\n\nfloat map (in vec3 pos) {\n\n\n    float sphere = sphere_map(pos);\n    float plane = pos.y - (-1.0 );\n    \n    float d = min(sphere, plane) ;\n    \n    return d;\n}\n\n\n\nvec3 calcNormal(in vec3 pos) {\n    vec2 e = vec2(0.0001,0.0);\n    return normalize(  vec3( map(pos+e.xyy)-map(pos-e.xyy),\n                             map(pos+e.yxy)-map(pos-e.yxy),\n                             map(pos+e.yyx)-map(pos-e.yyx)));\n\n}\n\n\n\nfloat castRay(in vec3 ro, vec3 rd) {\nfloat t = 0.0;\n for(int i=0;i<100;i++) {\n        vec3 pos = ro + t*rd;\n        float h = map(pos);\n        \n        if (h < 0.001) {\n            break;\n        }\n        t += h;\n        if (t > 20.0) {\n            break;\n        }\n        \n       \n     }\n     \n     if (t>20.0) t = -1.0;\n     return t;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = (2.0 * fragCoord -iResolution.xy)/iResolution.y;\n\n\n    vec3 ro = vec3(.0,0.5, 3.0);\n    vec3 rd = normalize(vec3(p,-1.5));\n\n \n     // sky color \n     vec3 sky_col = vec3(0.5,0.7,0.9);\n     \n     // sky color by default;\n     vec3 col = sky_col - 0.5*rd.y;\n     \n     // ray marching\n     float t = castRay(ro,rd);\n    \n    \n    \n     if ( t>0.0 ) {\n     \n         float theta = sin(iTime) / 10.0;\n\n         vec3 sun_dir   =  normalize(vec3(theta + 0.7,0.4,0.2));\n         vec3 sky_dir = vec3(0.0,1.0,0.0);\n         vec3 bounce_dir = vec3(0.0,-1.0,0.0);\n\n  \n         vec3 pos = ro + t*rd;\n         vec3 nor = calcNormal(pos);\n         \n         \n         // normal material\n         vec3 mate = vec3(0.18);\n         \n         // diffuse color from sun\n         float sun_dif = clamp(dot(nor,sun_dir),0.0,1.0);\n         col  = mate*vec3(7.0,5.0,3.0) * sun_dif;\n         \n         // sun shadow\n         float sun_sha = step(castRay(pos+nor*0.001, sun_dir),0.0);\n         col *= sun_sha;\n         \n         // diffuse color from sky\n         float sky_dif = clamp(0.5 + 0.5*dot(nor,sky_dir),0.0,1.0);\n         col +=  mate*0.5 *  sky_col * sky_dif;\n         \n        \n        // bounce light from other materials back to itself\n        float bou_dif =  clamp(0.5 + 0.5*dot(nor,bounce_dir),0.0,1.0);\n        col +=  mate* vec3(0.7,0.3,0.2) * bou_dif;\n             \n         \n    }\n \n \n \n // color correct \n col = pow(col, vec3(0.4545));\n \n \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}