{"ver":"0.1","info":{"id":"7ss3zX","date":"1617045193","viewed":761,"name":"Solar fields","username":"z0rg","description":"A bit of fun on this brilliant song :)\nYou can make it your window terminal background following link here :\nhttps://github.com/seb776/WindowsTerminalShaders\n","likes":21,"published":3,"flags":64,"usePreview":0,"tags":["abstract","planets","asteroid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4lXSW7","filepath":"https://soundcloud.com/solarfields/10-solar-fields-asteroid-time","previewfilepath":"https://soundcloud.com/solarfields/10-solar-fields-asteroid-time","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n//\n// You can make it your window terminal background following link here :\n// https://github.com/seb776/WindowsTerminalShaders\n//\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.141592653\n#define FFT(a) texelFetch(iChannel1, ivec2(a, 0), 0).x\nfloat _time;\nmat2 r2d(float a) {float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\nfloat _cir(vec2 p, float r)\n{\n    return length(p)-r;\n}\n\nfloat _sqr(vec2 p, vec2 s)\n{\n    vec2 l = abs(p)-s;\n    return max(l.x, l.y);\n}\n\nfloat _star(vec2 p, vec2 s)\n{\n    p*= r2d(PI/4.);\n    float a = _sqr(p, s);\n    float b = _sqr(p, s.yx);\n    return min(a, b);\n}\n\nfloat _stars(vec2 uv)\n{\n    vec2 ouv = uv;\n    float th = 0.002;\n    vec2 rep = vec2(0.1);\n\n    vec2 idx = floor((uv+rep*.5)/rep);\n    \n    uv = mod(uv+rep*.5, rep)-rep*.5;\n    uv += sin(length(idx)*10.)*rep*.25;\n    float sz = sat(sin(idx.x*5.+idx.y+_time+length(ouv)*10.))*sat(length(ouv*2.)-.5);\n    return _star(uv, vec2(20.*th, th)*.5*sz);\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.173,0.145,0.129)*(1.-sat(length(uv)-.5));\n    vec3 rgb = vec3(1.000,0.000,0.349);\n    \n    float th = 0.002;\n    float shp = 400.;\n    \n    float sun = _cir(uv, .1);\n    float innerSun = max(sun, (sin((uv.x+uv.y)*200.+_time*10.)+.7)*5.);\n    sun = abs(sun)-th;\n    innerSun = min(sun, innerSun);\n    col = mix(col, rgb, 1.-sat(innerSun*shp));\n    \n    float ta=_time*.5;\n    vec2 pa = uv-vec2(sin(ta), cos(ta))*.5;\n    float pla = _cir(pa, .04);\n    pla = abs(pla)-th;\n    pla = min(pla, _sqr(pa*r2d(-PI/4.), vec2(.08, th)));\n    col = mix(col, rgb, 1.-sat(pla*shp));\n    \n    float tb = _time;\n    vec2 pb = uv-vec2(sin(tb), cos(tb))*.2;\n    float plb = _cir(pb, .02);\n    col = mix(col, rgb, 1.-sat(plb*shp));\n    \n    float tc = _time*.7;\n    vec2 pc = uv-vec2(sin(tc), cos(tc))*.3;\n    float plc = _cir(pc, .05);\n    col = mix(col, rgb,  1.-sat(plc*shp));\n    \n    float stars = _stars(uv);\n    col = mix(col, rgb, 1.-sat(stars*shp));\n    \n    col += .5*sat(vec3(1.000,0.000,0.298)*5.)*(1.-sat(length(uv)));\n    \n    col *= .7*mix(vec3(1.000,0.000,0.298), vec3(0.), sat(length(uv)))*pow(FFT(20), .5);\n\n    col = mix(col, col.zyx, sat(length(uv)));\n    uv *= r2d(_time*.1);\n    uv += (sin(length(uv)*2.)*.5+.5)*.15;\n    col += sat(length(uv))*sat(length(uv))*pow(texture(iChannel0, 3.*uv*(sin(_time)*.01+.5)).x, 25.)*\n    mix(vec3(1.000,0.122,0.427), vec3(1.000,0.710,0.078), sat(length(uv)));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    _time = iTime*.5+texture(iChannel0, fragCoord/8.).x*iTimeDelta;\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n    uv *= 2.+sin(_time*.5);\n    vec3 col  = rdr(uv).zxy;\n    for (int i = 0; i < 16; ++i)\n    {\n        float f = (float(i)/16.)*(pow(FFT(50), 1.)*2.+.5);\n        float coef = 1.-sat(float(i)/16.);\n        col += rdr(uv*(1.-f*.1))*coef*.3;\n    }\n    col = pow(col, vec3(1.));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}