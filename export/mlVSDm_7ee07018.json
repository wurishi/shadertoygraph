{"ver":"0.1","info":{"id":"mlVSDm","date":"1686149431","viewed":56,"name":"Testing Triangle Deformities","username":"RaphaZev","description":"Testing applying noise to shapes","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","grid","shapes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\n// Gradient Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/XdXGW8\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvec2 rotate2D (vec2 _st, float _angle) {\n    _st -= 0.5;\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    _st += 0.5;\n    return _st;\n}\n\nmat2 rotate2d(float angle){\n    return mat2(cos(angle),-sin(angle),\n                sin(angle),cos(angle));\n}\n\nfloat lines(in vec2 pos, float b){\n    float scale = 10.0;\n    pos *= scale;\n    return smoothstep(0.0,\n                    .5+b*.5,\n                    abs((sin(pos.x*3.1415)+b*2.0))*.5);\n}\n\nfloat getTriangle(vec2 p, vec2 rp){\n    p *= vec2(iResolution.x, iResolution.y);\n    p /= max(iResolution.x, iResolution.y);\n    \n    p -= rp;\n\n    vec3 color = vec3(0.0);\n    float d = 0.0;\n\n    // Remap the space to -1. to 1.\n    p = p *2.-1.;\n\n    // Number of sides of your shape\n    int N = 3;\n\n    // Angle and radius from the current pixel\n    float a = atan(p.x,p.y)+PI;\n    float r = 2.*PI/float(N);\n\n    // Shaping function that modulate the distance\n    float m = abs(mod(a+iTime*2.,3.14*2.)-3.14)/3.6;\n    m += noise(p+iTime*0.1)*.5;\n    r += sin(a*25.)*noise(p+iTime*.2)*.1;\n    r += (sin(a*20.)*.1*pow(m,2.));\n    //r = 1.-smoothstep(r,r+0.007,2.*PI/float(N)); //crazy mode\n    //return 1.-smoothstep(f,f+0.007,r);\n    // Shaping function that modulate the distance\n    d = cos(floor(.5+a/r)*r-a)*length(p);\n\n    // Applying noise to the border of the shape\n    d += 0.1*noise(p*25.);\n\n\n    return 1.0-step(.12,d);\n    //return 1.0-smoothstep(r, .12,d);\n}\n\n\nfloat shape(vec2 st, float radius) {\n\tst = vec2(0.5)-st;\n    float r = length(st)*2.0;\n    float a = atan(st.y,st.x);\n    float m = abs(mod(a+iTime*2.,3.14*2.)-3.14)/3.6;\n    float f = radius;\n    m += noise(st+iTime*0.1)*.5;\n    // a *= 1.+abs(atan(u_time*0.2))*.1;\n    // a *= 1.+noise(st+u_time*0.1)*0.1;\n    f += sin(a*50.)*noise(st+iTime*.2)*.1;\n    f += (sin(a*20.)*.1*pow(m,2.));\n    return 1.-smoothstep(f,f+0.007,r);\n}\n\nvec2 tile (vec2 _st, float _zoom) {\n    _st *= _zoom;\n    return fract(_st);\n}\n\nvec2 rotateTilePattern(vec2 _st){\n\n    //  Scale the coordinate system by 2x2\n    _st *= 2.0;\n\n    //  Give each cell an index number\n    //  according to its position\n    float index = 0.0;\n    index += step(1., mod(_st.x,2.0));\n    index += step(1., mod(_st.y,2.0))*2.0;\n\n    //      |\n    //  2   |   3\n    //      |\n    //--------------\n    //      |\n    //  0   |   1\n    //      |\n\n    // Make each cell between 0.0 - 1.0\n    _st = fract(_st);\n\n    // Rotate each cell according to the index\n    if(index == 1.0){\n        //  Rotate cell 1 by 90 degrees\n        _st = rotate2D(_st,PI*0.5);\n    } else if(index == 2.0){\n        //  Rotate cell 2 by -90 degrees\n        _st = rotate2D(_st,PI*-0.5);\n    } else if(index == 3.0){\n        //  Rotate cell 3 by 180 degrees\n        _st = rotate2D(_st,PI);\n    }\n\n    return _st;\n}\n\n\nfloat shapeBorder(vec2 st, float radius, float width) {\n    return shape(st,radius)-shape(st,radius-width);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 color = vec3(1, 1, 1);\n    \n    uv = tile(uv,1.0);\n    uv = rotateTilePattern(uv);\n    \n    //vec3 color = vec3(1.0);\n    //uv.x *=iResolution.x/iResolution.y;\n    //vec3 color = vec3(1.) * shapeBorder(uv,0.8,0.02);\n   \n    //vec2 pos = vec2(uv*10.0);\n    \n    //float pattern = pos.x;\n    \n    //pos = rotate2d( noise(pos) ) * pos; // rotate the space\n    \n    //pattern = lines(pos,.5); // draw lines\n\n    vec3 triangle = getTriangle(uv, vec2(0.0, -0.23)) * vec3(2.0, 30.0, 2.0) * 2.0;\n    \n    color -= triangle;\n    \n    fragColor = vec4(color,1.0);\n    //fragColor = vec4(1.+color,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}