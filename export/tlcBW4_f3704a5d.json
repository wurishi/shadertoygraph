{"ver":"0.1","info":{"id":"tlcBW4","date":"1612728379","viewed":64,"name":"Genuary 2021 – 08 – Inter (A)","username":"endymion","description":"Genuary 2021 – 08 – Interference Patterns (A)\n\nSlightly more dynamic (more circles) version here: https://www.shadertoy.com/view/3ttfWN","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["trippy","interferencepatterns"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define PI 3.14159265359\n\n#define CIRCLES 2\n\n/**\n * Map range to new range\n */\nfloat map(float value, float min1, float max1, float min2, float max2) {\n    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\n/**\n * Simplex noise\n * @src https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83#simplex-noise\n */\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return map(130.0 * dot(m, g), -1., 1., 0., 1.);\n}\n\n/** \n * Circle distance function\n * @src https://iquilezles.org/articles/distfunctions2d\n */\nfloat sdCircle(in vec2 point, in vec2 center, in float radius) {\n    return distance(point, center) / radius;\n}\n \n/**\n * HSB to RGB\n * All components are in the range [0…1], including hue.\n * @src https://stackoverflow.com/a/17897228\n */\nvec3 hsb2rgb(in vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n/** \n * Get color\n */\nvec3 getColor(in vec2 point, in vec2 centerA, in vec2 centerB, in vec3 colorA, in vec3 colorB) {\n    float distA = distance(point, centerA);\n    float distB = distance(point, centerB);\n    \n    float dist;\n    dist = distA / (distB + distA);\n    return mix(colorA, colorB, dist);\n}\n\n/**\n * @main\n */\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 centerA = vec2(\n        snoise(vec2(2.25, 2.5) * iTime * .005),\n        snoise(vec2(3.25, 0.5) * iTime * .0010)\n    );\n    vec2 centerB = vec2(\n        snoise(vec2(20., 2000.) + vec2(0.25, 2.5) * iTime * .008),\n        snoise(vec2(2000., 20.) + vec2(1.75, 0.5) * iTime * .0015)\n    );\n    \n    float distA = sdCircle(uv, centerA, 0.05 + 0.25 * sin(iTime * 0.025));\n    float distB = sdCircle(uv, centerB, 0.25 + 0.125 * sin(iTime * 0.1));\n    \n    vec3 colorA = vec3(0.75 + 0.25 * cos(iTime * 0.1), 0.5, 0.5);\n    vec3 colorB = vec3(0.25 + 0.125 * cos(iTime), 0.5, 0.5);\n    //vec3 colorA = vec3(0.65 + 0.25 * cos(iTime * 0.1), 0.5, 0.5);\n    //vec3 colorB = vec3(0.85 + 0.125 * cos(iTime), 0.5, 0.5);\n    vec3 color = getColor(uv, centerA, centerB, colorA, colorB);\n    \n    float pattern = smoothstep(0.2, 0.9, fract(distA) + fract(distB));\n    float pixelNoise = snoise(uv * 300.);\n    \n    fragColor = vec4(hsb2rgb(vec3(\n        color.x + pattern * .15,\n        color.y,\n        1. - pixelNoise * 0.05\n    )), 1.0);\n}","name":"Image","description":"","type":"image"}]}