{"ver":"0.1","info":{"id":"4sy3W3","date":"1456612957","viewed":2563,"name":"JFA Voronoi Video Filter","username":"tomkh","description":"A super simple Voronoi filter based on JFA algorithm. It also works for color videos.","likes":54,"published":1,"flags":32,"usePreview":0,"tags":["voronoi","video","filter","jfa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simple Voronoi effect on top of Video\n// by Tom'2016\n\n// Based on JFA algorithm using demofox implementation:\n//    https://www.shadertoy.com/view/Mdy3DK\n\n// Original paper:\n//  http://www.comp.nus.edu.sg/~tants/jfa/i3d06.pdf\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n#if 0 // debug feature extraction\n    \n    fragColor = texture(iChannel1, uv).wwww;\n    \n#else\n    \n\tvec4 cell = texture(iChannel0, uv); \n    vec2 cell_uv = cell.xy / iChannelResolution[1].xy;\n    vec4 video = texture(iChannel1, cell_uv);\n    vec2 dcell = cell.xy - fragCoord.xy;\n    float len = length(dcell);\n    vec3 color = video.xyz * (.9 + len*.005);\n    fragColor = vec4(color, 1.);\n    \n#endif\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// A super simple video source with feature detection\n\nfloat grayScale(vec4 c) { return c.x*.29 + c.y*.58 + c.z*.13; }\n\n//============================================================\nvec4 GenerateSeed (in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 dataStep = vec3( vec2(1.) / iChannelResolution[0].xy, 0.);\n    \n    vec4 fragColor = texture( iChannel0, uv );\n    \n    float d = grayScale(fragColor);\n    float dL = grayScale(texture( iChannel0, uv - dataStep.xz ));\n    float dR = grayScale(texture( iChannel0, uv + dataStep.xz ));\n    float dU = grayScale(texture( iChannel0, uv - dataStep.zy ));\n    float dD = grayScale(texture( iChannel0, uv + dataStep.zy ));\n    float w = float( d > max(max(dL, dR), max(dU, dD)) );\n    \n    w = max(w, texture( iChannel1, uv ).w*.9); // get some from previous frame\n    \n    fragColor.w = w;\n    \n    return fragColor;\n}\n\n//============================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = GenerateSeed(fragCoord);\n}\n\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Stripped down JFA algorithm, based on demofox implementation:\n//    https://www.shadertoy.com/view/Mdy3DK\n\n// how many JFA steps to do.  2^c_maxSteps is max image size on x and y\nconst float c_maxSteps = 8.0;\n\n//============================================================\nvec4 StepJFA (in vec2 fragCoord, in float level)\n{\n    float stepwidth = floor(exp2(c_maxSteps - 1. - level)+0.5);\n    \n    float bestDistance = 9999.0;\n    vec2 bestCoord = vec2(0.0);\n    \n    for (int y = -1; y <= 1; ++y) {\n        for (int x = -1; x <= 1; ++x) {\n            vec2 sampleCoord = fragCoord + vec2(x,y) * stepwidth;\n            \n            vec4 data = texture( iChannel0, sampleCoord / iChannelResolution[0].xy);\n            vec2 seedCoord = data.xy;\n            float dist = length(seedCoord - fragCoord);\n            if ((seedCoord.x != 0.0 || seedCoord.y != 0.0) && dist < bestDistance)\n            {\n                bestDistance = dist;\n                bestCoord = seedCoord;\n            }\n        }\n    }\n    \n    return vec4(bestCoord, 0.0, 0.0);\n}\n\n//============================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float fFrame = float(iFrame);\n    float level = mod(fFrame,c_maxSteps);\n    if (level < .5) {\n        if (texture(iChannel1, fragCoord / iResolution.xy).w > .5)\n        \tfragColor = vec4(fragCoord, 0.0, 0.0);\n        else \n            fragColor = vec4(0.0);\n        return;\n    }\n    \n    fragColor = StepJFA(fragCoord, level);\n}\n\n","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// A secondary buffer to get clean Voronoi every N-th frame\n\n// this must be in sync with JFA algorithm constant\nconst float c_maxSteps = 8.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    if (mod(float(iFrame+1),c_maxSteps) < .5) {\n        fragColor = texture(iChannel1, uv); // update to new voronoi cell\n    } else {\n        fragColor = texture(iChannel0, uv); // no change\n    }\n}\n","name":"Buf C","description":"","type":"buffer"}]}