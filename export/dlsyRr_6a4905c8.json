{"ver":"0.1","info":{"id":"dlsyRr","date":"1690425985","viewed":42,"name":"圆形烟花","username":"houkinglong","description":"bubble fireworks","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["bubble"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define HARDNESS 60.0\n#define AMOUNT 90\n#define MAX_DISTANCE 20.0\n#define SPEED 0.15\n\n// https://iquilezles.org/articles/smin\nfloat smin(float a, float b, float k) {\n    float res = exp2(-k * a) + exp2(-k * b);\n    return -log2(res) / k;\n}\n\nfloat sdCircle(vec2 uv, vec2 pos, float radius) {\n    return length(uv - pos) - radius;\n}\n\nfloat sdLine(vec2 uv, vec2 start, vec2 end) {\n    return 0.0;\n}\n\nfloat randomSingle(vec2 p) {\n    p = fract(p * vec2(233.34, 851.73));\n    p += dot(p, p + 23.45);\n    return fract(p.x * p.y);\n}\n\nvec4 randomPoint(vec2 p) {\n    float x = randomSingle(p);\n    float y = randomSingle(vec2(x, p.x));\n    return vec4(x, y, randomSingle(vec2(y, x)), randomSingle(vec2(x, y)));\n}\n\nfloat Star(vec2 uv, float dist, vec2 id) {\n    vec4 rand = randomPoint(id);\n\n    float progress = fract(iTime * SPEED + rand.z);\n\n    vec2 dir = 2.0 * (normalize(rand.xy) - 0.5);\n\n    rand.w = clamp((rand.w - 0.5) * 999.0, -1.0, 1.0);\n    dir *= rand.w;\n\n    return smin(dist, sdCircle(uv, dir * progress * MAX_DISTANCE, 0.001) / (progress + 0.7), 200.0);\n}\n\nfloat Graph(vec2 uv, float r) {\n    float dist = sdCircle(uv, vec2(0.0, 0.0), r);\n\n    dist = Star(uv, dist, vec2(1.0, 1.0));\n\n    for (int s = 1; s < AMOUNT; ++s)\n        dist = Star(uv, dist, vec2(-1.0, s));\n\n    dist *= HARDNESS;\n\n    dist = max(dist, 0.0);\n    dist = 1.0 / (dist + 0.001);\n    dist *= clamp(0.8, 0.98, length(uv));\n\n    return dist;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    // 一个像素的大小\n    float scale = 1.0 / iResolution.y;\n\n    // 外圆半径\n    float outerRadius = 0.8;\n    // 内圆半径\n    float innerRadius = 0.3;\n\n    // 色值声明\n    vec3 col = vec3(0);\n    vec3 colR = vec3(1.0, 0.0, 0.0);\n    vec3 colG = vec3(0.0, 0.3, 0.0);\n    vec3 colB = vec3(0.01, 0.13, 0.32);\n\n    float dis = length(uv);\n\n    // 圆底\n    float bg = smoothstep(scale, -scale, sdCircle(uv, vec2(0.0, 0.0), outerRadius));\n    col = mix(vec3(0.0), colB, bg);\n\n    // 渐变环\n    float ring = smoothstep(outerRadius - 0.2, outerRadius, dis);\n    col *= ring;\n\n    if (dis > outerRadius) {\n        fragColor = vec4(0.0);\n        return;\n    }\n\n    // if (dis < innerRadius) {\n    //     fragColor = vec4(0.0, 0.1, 0.2, 1.);\n    //     return;\n    // }\n\n    // 增加旋转\n    float angle = iTime * 0.4;\n    float sinA = sin(angle);\n    float cosA = cos(angle);\n    mat2 rot = mat2(cosA, -sinA, sinA, cosA);\n    uv *= rot;\n\n    uv *= 3.0;\n\n    float m = Graph(uv, innerRadius);\n\n    vec3 tint = vec3(0.0, 0.0, 1.0);\n\n    col += m * mix(tint, vec3(1.0, 1.0, 1.0), m);\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}