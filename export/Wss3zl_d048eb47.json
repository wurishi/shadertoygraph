{"ver":"0.1","info":{"id":"Wss3zl","date":"1547218424","viewed":603,"name":"antialiasing vs sRGB","username":"FabriceNeyret2","description":"antialiasing really needs all the grey-level spread to occurs uniformly in perceptive space. \nSo the final sRGB conversion must be done (right), or antialiasing is less efficient (left)","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["lines","antialiasing","gamma","utils","tuto","segments"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(d,r) 1. - clamp( (d)*R.y/(r), 0., 1.)   // antialiased draw.\n\n// --- line segment https://shadertoy.com/view/4dcfW8\nfloat line(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n\tfloat h = clamp(dot(p, b) / dot(b, b), 0., 1.);   // proj coord on line\n\treturn length(p - b * h);                         // dist to segment\n}\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, U=u;\n    float n = exp2(floor(4.*U.y/R.y));     // pixel size\n    U = floor(U/n)*n;\n    U *= 4./R.y;                           // 4 vertical regions\n    U.y = fract(U.y);\n    float l = 4.*R.x/R.y, \n          v = line(U, vec2(0,.9), vec2(l,0) ); //  line\n\n    v = S (v, 4.* n );                     // draw antialiased\n    \n    if (U.x>l/2.) v = pow(v,1./2.2);       // right: sRGB corection\n    O = vec4(v);\n    \n    if (u.x-.5==R.x/2.) O.r++;             // vertical separator\n}","name":"Image","description":"","type":"image"}]}