{"ver":"0.1","info":{"id":"cllBRN","date":"1692709783","viewed":29,"name":"Loading circle animation","username":"sarram","description":"Animation with circles shader.\nWith a lot of properties and easy (hopeful) to read code.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circleloading"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define circlesCount 4\n#define circleRadius .02\n#define bouncingSpeed 1.\n#define gap 1.\n#define scalingSpeed 0.5\n#define scaleAnimationFunction (0.3 * sin(3.14 * iTime * scalingSpeed) + 0.7)\n\nvec3 createCircle(vec2 uv, float r, vec2 offset){\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    \n    float d = length(vec2(x,y)) - r;\n    \n    return d > 0. ? vec3(0.) : 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0,2,4));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n// --- UV ---    \n    vec2 uv = fragCoord/iResolution.xy;\n    // Center of Canvas\n    uv -= 0.5;\n    // Apply Canvas Aspect Ratio\n    uv.x *= iResolution.x/iResolution.y;\n    \n// --- loading animation ---\n    vec3 col = vec3(0);\n    for(int a = 0; a < circlesCount; ++a)\n    {\n        float offsetFromCenter = circleRadius * float(a) * (2. + gap);\n        float centerPosition = float(circlesCount) * float(circleRadius);\n        \n        vec2 offset;\n        offset.x = centerPosition - offsetFromCenter;\n        offset.y = ( sin(iTime * -2. + float(a))* 0.05) * bouncingSpeed;\n        \n        float circleScale = circleRadius;\n        circleScale = scaleAnimationFunction * circleRadius ;\n        \n        col += createCircle(uv, circleScale, offset);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}