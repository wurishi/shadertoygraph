{"ver":"0.1","info":{"id":"Xf33WN","date":"1727564867","viewed":24,"name":"GPT Tuned 250: Phong Sphere 2","username":"sferrando","description":"prompt:\n\nA phong sphere","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["gpt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":" vec3 light = normalize(vec3(0.87, 0.26, 0.46));\n\nvec3 phong (in vec3 normal, in vec3 pos, in vec3 color) {\n    vec3 p = pos / 2. - .5;\n    vec3 tolight = light - p;\n    float d = clamp(dot(normalize(tolight), normal), 0., 1.);\n    float s = pow(clamp(dot(normalize(reflect(tolight, normal)), \n                                normalize(vec3(0., 0., 1.))), \n                          0., 1.), 5.);\n    return color * (d + s) / (dot(p, p) + 1.) * 2.;\n}\n\nfloat sphere(vec3 ro, vec3 rd, float r) {\n    float k1 = -dot(ro, rd);\n    float k2 = dot(ro, ro);\n    float d = k1 * k1 - k2 + r*r;\n    if(d < 0.0) return -1.0;\n    d = sqrt(d);\n    float t = k1 - d;\n    if(t > 0.0) return t;\n    t = k1 + d;\n    if(t > 0.0) return t;\n    return -1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 color = vec3(0.);\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0., 0., 2.5);\n    vec3 rd = normalize(vec3(uv, -1.));\n    float r = sphere(ro, rd, .5);\n    if (r != -1.) {\n        vec3 pos = (ro + rd * r);\n        color += phong(ro - pos, pos, vec3(.6, .7, .8));\n    }\n    //floor\n    float y = -1.5 - ro.y;\n    float d = y/rd.y;\n    if (d > 0.) {\n        vec3 pos = ro + rd * d;\n        if (length(pos.xz) < 2.) {\n            vec3 n = normalize(vec3(0., 1., 0.));\n            color += phong(n, pos, vec3(.4));\n        }\n    }\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}