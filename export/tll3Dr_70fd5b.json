{"ver":"0.1","info":{"id":"tll3Dr","date":"1556800793","viewed":65,"name":"RayMarching - first attempt","username":"dghez","description":"Raymarching first attempt.\nThanks to https://www.youtube.com/watch?v=PGtv-dBi2wE&t=963s","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define  MAX_DIST 100.0\n#define SURF_DIST 0.01\n\nfloat GetDist(vec3 p){\n    vec4 s = vec4(0.0, 1.0, 6.0, 1.0); // sphere xyz radius\n    float sphereDist = length(p-s.xyz) - s.w; // point - sphere origin - radius\n    float planeDist = p.y; // plane distance, easy because same axes\n    float d = min(sphereDist, planeDist);\n    return d;\n    \n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.0;\n    \n    for(int i=0; i < MAX_STEPS; i++){\n        vec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO > MAX_DIST  || dS < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 point){\n   float dist = GetDist(point);\n   vec2 e = vec2(0.01, 0.0);\n    vec3 n = dist - vec3(\n        GetDist(point-e.xyy), // same as p- vec3(0.01, 0.0, 0.0);\n        GetDist(point-e.yxy),\n        GetDist(point-e.yyx)\n    );\n    \n    return normalize(n);\n    \n}\n\nfloat GetLight(vec3 point){\n    vec3 lightPos = vec3(0.0, 5.0, 6.0);\n    lightPos.xz += vec2(sin(iTime), cos(iTime));\n    vec3 lightVec = normalize(lightPos - point);\n    vec3 n = GetNormal(point);\n    float dif = clamp(dot(n, lightVec), 0.0, 1.0);\n    float distancePointLight = RayMarch(point + n * SURF_DIST * 2.0, lightVec);\n    if(distancePointLight < length(lightPos - point)) dif *= 0.1; // i'm in the shadow\n    return dif;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.0);\n    \n    // origin camera (ray origin)\n    vec3 ro = vec3(0.0, 1.0, 0.0);\n    \n    //camera direction (ray direction)\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.0));\n    \n    float d = RayMarch(ro, rd); \n    vec3 point = ro + rd * d;\n    \n    float diffuse = GetLight(point);\n    col = vec3(diffuse);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}