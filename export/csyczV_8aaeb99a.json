{"ver":"0.1","info":{"id":"csyczV","date":"1696299892","viewed":57,"name":"Partition Function","username":"levkruglyak","description":"graph of complex partition generating function $f(z)=\\prod_{n\\geq 0} (1+z^n)$","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n#define M_PI 0.523598776\n\n#define cx_mul(a, b) vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x)\n#define cx_div(a, b) vec2(((a.x*b.x + a.y*b.y)/(b.x*b.x + b.y*b.y)),((a.y*b.x - a.x*b.y)/(b.x*b.x + b.y*b.y)))\n#define cx_sin(a) vec2(sin(a.x) * cosh(a.y), cos(a.x) * sinh(a.y))\n#define cx_cos(a) vec2(cos(a.x) * cosh(a.y), -sin(a.x) * sinh(a.y))\n\nvec2 cx_tan(vec2 a) {return cx_div(cx_sin(a), cx_cos(a)); }\nvec2 cx_log(vec2 a) {\n    float rpart = sqrt((a.x*a.x)+(a.y*a.y));\n    float ipart = atan(a.y,a.x);\n    if (ipart > PI) ipart=ipart-(2.0*PI);\n    return vec2(log(rpart),ipart);\n}\n\nvec2 as_polar(vec2 z) {\n  return vec2(\n    length(z),\n    atan(z.y, z.x)\n  );\n}\nvec2 cx_pow(vec2 v, float p) {\n  vec2 z = as_polar(v);\n  return pow(z.x, p) * vec2(cos(z.y * p), sin(z.y * p));\n}\n\nfloat im(vec2 z) {\n  return ((atan(z.y, z.x) / PI) + 1.0);\n}\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat sigmoid(float t) {\n    return 1.0 / (1.0 - exp(-t));\n}\n\nvec3 angleMagnitudeToColor(float angle, float magnitude) {\n    float hue = angle / (2.0 * 3.14159265) + iTime /2.0;\n    vec3 hsv = vec3(hue, 1.0, 1.0); \n    return hsv2rgb(hsv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Set up our imaginary plane\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n    vec2 z = uv * 2.5;\n\n    vec2 one = vec2(1.0, 0.0);\n    \n    vec2 t1 = vec2(1.0, 0.0);\n    vec2 t2 = vec2(1.0, 0.0);\n    vec2 sum;\n    vec2 quot;\n    for (int i = 1; i < 5000; i++) {\n        t2 = cx_mul(t2, z);\n        sum = one + t2;\n        t1 = cx_mul(t1, sum);\n    }\n\n    vec2 result = t1;\n\n    float imaginary = cx_log(result).y;\n    vec3 col = angleMagnitudeToColor(imaginary, result.x * result.x + result.y * result.y);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}