{"ver":"0.1","info":{"id":"mdfyz2","date":"1686982804","viewed":100,"name":"Bezier curve distance","username":"tacos_au_chili","description":"the precision is changeable and \"exponential\"\nyou can move points!\n(dont work for some cases)","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["beziercurve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PRECISION 50\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//Buffer getting\nvec3 get(ivec2 p){\n    return texelFetch(iChannel0,ivec2(p),0).rgb;\n}\n\n//Bezier\nfloat bezier3(float a,float b,float c,float d,float t){\n    return (1.0-t)*(1.0-t)*(1.0-t)*a+3.0*(1.0-t)*(1.0-t)*t*b+3.0*(1.0-t)*t*t*c+t*t*t*d;\n}\nvec3 bezier3(vec3 a,vec3 b,vec3 c,vec3 d,float t){\n    return vec3(\n    bezier3(a.x,b.x,c.x,d.x,t),\n    bezier3(a.y,b.y,c.y,d.y,t),\n    bezier3(a.z,b.z,c.z,d.z,t));\n}\nfloat bezier3derivate(float a,float b,float c,float d,float t){\n    return (3.0*b-3.0*a)+2.0*(3.0*c-6.0*b+3.0*a)*t+3.0*(d-3.0*c+3.0*b-a)*t*t;\n}\nvec3 bezier3derivate(vec3 a,vec3 b,vec3 c,vec3 d,float t){\n    return vec3(\n    bezier3derivate(a.x,b.x,c.x,d.x,t),\n    bezier3derivate(a.y,b.y,c.y,d.y,t),\n    bezier3derivate(a.z,b.z,c.z,d.z,t));\n}\n//Bezier distance\nfloat bezier3MinDist(vec3 a,vec3 b,vec3 c,vec3 d,vec3 p){\n    float t = 0.0;\n    float r = 0.0;\n    float dist = distance(bezier3(a,b,c,d,t),p);\n    float minDist = dist;\n    int s = 10;\n    for(int i = 0;i<s;i++){\n        t=float(i)/float(s-1);\n        \n        for(int i = 0;i<PRECISION;i++){\n            float offset = 1.0/pow(2.0,float(i)+3.0);\n            float dr =distance(bezier3(a,b,c,d,t+offset),p);\n            float dl =distance(bezier3(a,b,c,d,t-offset),p);\n            float dm =dist;\n            if(dr<dl){if(dr<dm)t+=offset;}\n            else if(dl<dm)t-=offset;\n            t= clamp(0.0,t,1.0);\n        }\n        dist = distance(bezier3(a,b,c,d,t),p);\n        if(dist<minDist){\n            minDist = dist;\n            r = t;\n        }\n    }\n    t=r;\n    \n    return t;\n}\n\n//Main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 r = iResolution.xy;\n    \n    vec3 a = get(ivec2(0,1))*r.xyy;\n    vec3 b = get(ivec2(1,1))*r.xyy;\n    vec3 c = get(ivec2(2,1))*r.xyy;\n    vec3 d = get(ivec2(3,1))*r.xyy;\n    vec3 p = vec3(fragCoord,0);\n    \n    float minT = bezier3MinDist(a,b,c,d,p);\n    vec2 nearestP = bezier3(a,b,c,d,minT).xy;\n    float val = distance(p.xy,nearestP);\n    val = smoothstep(3.0,5.0,val);\n    vec3 color;\n    float val1 = clamp(0.0,\n    dot(normalize(bezier3derivate(a,b,c,d,minT).yx*vec2(1,-1)),normalize(p.xy-nearestP)),1.0);\n    color = val1*vec3(0.1);\n    color= mix(hsv2rgb(vec3(minT,1.0,1.0)),color,val);\n    \n    \n    \n    color = mix(color,vec3(1),smoothstep(12.0,10.0,distance(p,bezier3(a,b,c,d,fract(iTime/2.0)))));\n    \n    //Draw points\n    color = mix(color,vec3(1,0,0),smoothstep(7.0,5.0,distance(p,a)));\n    color = mix(color,vec3(1,0,0),smoothstep(7.0,5.0,distance(p,b)));\n    color = mix(color,vec3(1,0,0),smoothstep(7.0,5.0,distance(p,c)));\n    color = mix(color,vec3(1,0,0),smoothstep(7.0,5.0,distance(p,d)));\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Points array storage:\nivec2 U;\nvec3 O;\nbool set(ivec2 p,vec3 val){\n    if(p==U){\n        O=val;\n        return true;\n    }\n    return false;\n}\nvec3 get(ivec2 p){\n    return texelFetch(iChannel0,ivec2(p),0).rgb;\n}\nvoid mainImage( out vec4 FragColor, in vec2 FragCoord )\n{\n    U=ivec2(FragCoord);\n    O=get(U);\n    \n    if(iMouse.z>0.0){\n        if(U==ivec2(0)&&O.g==0.0){\n            int size = int(1.0/get(ivec2(0)).r-1.0);\n            int r = 0;\n            float dMin = distance(iMouse.xy,get(ivec2(0,1)).xy*iResolution.xy);\n            for(int i = 1;i<size;i++){\n                float dist=distance(iMouse.xy,get(ivec2(i,1)).xy*iResolution.xy);\n                if(dist<dMin){\n                    dMin=dist;\n                    r=i;\n                }\n            }\n            O.g = 1.0/float(r+1);\n        }\n    }else if(U==ivec2(0))O.g=0.0;\n    \n    \n    set(ivec2(1.0/get(ivec2(0)).g-1.0,1.0),vec3(iMouse.xy/iResolution.xy,0.0));\n    \n    \n    \n    \n    \n    \n    \n    if(iFrame==0){\n        set(ivec2(0),vec3(1.0/5.0,0.0,0.0));\n        set(ivec2(0,1),vec3(0,0,0));\n        set(ivec2(1,1),vec3(1,0,0));\n        set(ivec2(2,1),vec3(0,1,0));\n        set(ivec2(3,1),vec3(1,1,0));\n    }\n    FragColor=vec4(O,1);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}