{"ver":"0.1","info":{"id":"ftySzh","date":"1640178760","viewed":102,"name":"Quad Rotation","username":"santripta","description":"rotating a 2d quad, and applying a fragment shader to it with uvs.\n\nshader within a shader.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","uv","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 TranslationMatrix(vec3 translation)\n{\n    return mat3(\n        1., 0, 0,\n        0, 1., 0,\n        -translation\n    );\n}\n\nmat3 RotationMatrix(float angle)\n{\n    return mat3(\n        cos(angle), -sin(angle), 0,\n        sin(angle), cos(angle), 0,\n        1.         , 1.         , 1.\n    );\n}\n\n// Shader for the quad (currently sampling a texture)\nvoid shader(out vec4 color, in vec2 uv)\n{\n    color = texture(iChannel0, uv) * (0.2 + (sin(iTime*2.) + 1.)/2.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float width = 150.;\n\n    // Corners in local space (bottom left counterclockwise)\n    vec3 quad[4] = vec3[4](vec3(0,0,1.), vec3(width, 0, 1.), vec3(width, width, 1.),vec3(0, width,1.));\n    \n    // Origin of the local space\n    mat3 quadOrigin = TranslationMatrix(vec3(440., 230., 1.));\n    \n    // Rotation of the local space\n    float rotation = radians(iTime*12.);\n    mat3 quadRotation = RotationMatrix(rotation);\n    \n    //Background Color\n    fragColor = vec4(0.3, 0.5, 0.38, 1.);\n    \n    vec3 localPos = quadOrigin * vec3(fragCoord, 1);\n    localPos = quadRotation * localPos;\n    if(localPos.x > quad[0].x && localPos.x < quad[1].x && localPos.y > quad[0].y && localPos.y < quad[2].y)\n    {\n        vec2 uv = localPos.xy;\n        shader(fragColor,uv/width);\n    }\n    \n    vec3 uv = quadOrigin * vec3(fragCoord.xy, 1);\n    \n}","name":"Image","description":"","type":"image"}]}