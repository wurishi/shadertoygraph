{"ver":"0.1","info":{"id":"XtyBR1","date":"1541711012","viewed":70,"name":"helpsquare","username":"johnnyblame","description":"wtf is this","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 white = vec3(1,1,1);\nvec3 black = vec3(0,0,0);\nvec3 red = vec3(1, 0, 0);\n\nfloat sinp(float x) {\n    return abs(sin(x));\n}\n\nvec3 sp(vec2 c, float r, vec2 p) {\n    float d = length(p - c);\n    if (d < r)\n    {\n        if (sin(d) > 0.0) {\n            return sin((iTime*vec3(0, 0.5, 1)));    \n        }\n        else {\n      float d_norm = r / d;\n            return vec3(sinp(iTime)*d_norm);\n        }\n    }\n    else\n        return white;\n}\n\nvec3 sq(vec2 c, float bedro, vec2 p, float a) {\n  float r = bedro / 2.0;\n    mat2 rot_mat =mat2(\n        sin(a), cos(a),\n        sin(a), -sin(a)\n        );\n    vec2 p2 = p * rot_mat;\n    if (abs(p2.x - c.x) < r && abs(p2.y - c.y) < r)\n        return black;\n    else\n        return vec3(-1);\n    \n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 ccenter = iResolution.xy / 2.0;  \n    float cradius = (sinp(iTime* 2.0  ) * (iResolution.y / 2.0 ));\n   \n   vec3 col = sp(ccenter, cradius, fragCoord);\n    \n    float angle = abs(sin(iTime) * 2.0);\n    \n     vec3 sq_col = sq(vec2(sin(iTime) + 0.2) * iResolution.xy / 2.0,\n                     25.0, fragCoord, angle);\n    if (sq_col.x != -1.0)\n        col = sq_col;\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}