{"ver":"0.1","info":{"id":"DtlfzH","date":"1692620204","viewed":92,"name":"Combined SDF","username":"lennon27","description":"Combined the SDF of a square and a circle","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["shapes","outline"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circleSDF(vec2 uv, float size) \n{\n    return length(uv) - size;\n}\n\nfloat squareSDF(vec2 uv, float size)\n{\n    return max(abs(uv.x), abs(uv.y)) - size;\n}\n\nmat2 rotationMatrix(float rotation)\n{\n    return mat2(\n        cos(rotation), -sin(rotation),\n        sin(rotation), cos(rotation)\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Constants\n    float shapeSize = 0.5;\n    float circleSize = 0.5;\n    float rotationSpeed = 0.3;\n    float scalingSpeed = 2.0;\n    float scalingSize = 0.1;\n    float lineWidth = 4.0;\n    vec3 lineColor = vec3(1, 1, 0);\n    vec3 backgroundColor = vec3(0, 0, 0);\n\n    // UV (from center)\n    vec2 uv = vec2(2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    vec2 rotatedUV = uv * rotationMatrix(iTime * rotationSpeed);\n    float scaleModifier = sin(iTime * scalingSpeed) * scalingSize;\n    float circleSDF = circleSDF(rotatedUV, shapeSize - scaleModifier);\n    float squareSDF = squareSDF(rotatedUV, shapeSize + scaleModifier);\n    float combinedSDF = min(squareSDF, circleSDF);\n    float hollowSDF = smoothstep(lineWidth / iResolution.y, 0.0, abs(combinedSDF));\n    vec3 AAColor = mix(backgroundColor, lineColor, hollowSDF);\n    \n    fragColor = vec4(AAColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}