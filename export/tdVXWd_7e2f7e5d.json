{"ver":"0.1","info":{"id":"tdVXWd","date":"1576093215","viewed":288,"name":"Spherical Bessel","username":"JohnShadow","description":"Spherical Bessel, The negative side is screwed up but when I did it in regular c and a calculator it still showed up and worked out.\nhttps://www.desmos.com/calculator/5awgzdzqwa","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sphericalbessel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//on calculator version : https://www.desmos.com/calculator/5awgzdzqwa\n\n\nfloat besselNumbers[66] =\nfloat[66](\n\t1.0,\n\t1.0, 1.0, \n\t1.0, 3.0, 3.0,  \n\t1.0, 6.0, 15.0, 15.0, \n\t1.0, 10.0, 45.0, 105.0, 105.0, \n\t1.0, 15.0, 105.0, 420.0, 945.0, 945.0, \n\t1.0, 21.0, 210.0, 1260.0, 4725.0, 10395.0, 10395.0, \n\t1.0, 28.0, 378.0, 3150.0, 17325.0, 62370.0, 135135.0, 135135.0, \n\t1.0, 36.0, 630.0, 6930.0, 51975.0, 270270.0, 945945.0, 2027025.0, 2027025.0, \n\t1.0, 45.0, 990.0, 13860.0, 135135.0, 945945.0, 4729725.0, 16216200.0, 34459424.0, 34459424.0, \n\t1.0, 55.0, 1485.0, 25740.0, 315315.0, 2837835.0, 18918900.0, 91891800.0, 310134816.0, 654729088.0, 654729088.0\n);\nfloat dpow(float x, float p)\n{\n\treturn mod(p, 2.0) == 1.0 ? sign(x)*pow(abs(x),p) : pow(abs(x),p);\n}\nfloat bsign(float n, float k)\n{\n\treturn -sign(2.0 * mod(floor(0.5 * (k-n-1.0)), 2.0) - 1.0);\n}\nfloat cosinepart(float n, float x)\n{\n\treturn cos(x + 1.57079632679 * (1.0 - mod(n, 2.0)));\n}\nfloat BNumber(int m, int n)\n{\n    if(n > m)\n        return 0.0;\n\treturn besselNumbers[m*(m + 1)/2 + n];\n}\nfloat bessel(int m, float x)\n{\n\tfloat mf = float(m);\n\tif(m >= 3 && abs(x) < mf/2.0)\n\t\treturn 0.0;\n    if(m >= 10)\n        m = 10;\n\tfloat summation = 0.0;\n\tfor(int n = 0; n < m + 1; ++n)\n\t{\n\t\tfloat nf = float(n);\n\t\tsummation += dpow(x, -(nf+1.0)) * BNumber(m, n) * cosinepart((mf - nf), x) * bsign(mf, nf);\n\t}\n\treturn summation;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy) * 20.0;\n    uv.x -= 10.0;\n\tvec3 color = vec3(0.0);\n    float b = bessel(int(abs(sin(iTime*0.1)) * 10.0), uv.x) + 10.0;\n    if(b - 0.035 < uv.y && uv.y < b + 0.035)\n        color = vec3(1.0);\n    float lines = mod(uv.x, 2.0)-1.0;\n    if(lines < 0.0)\n        color += vec3(0.1);\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}