{"ver":"0.1","info":{"id":"Ml2fWV","date":"1517300811","viewed":219,"name":"bite from a fruit","username":"nexor","description":"raymarched sphere with sphere subtractions.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(float c){return fract(sin(dot(c,12.9898))*43758.5453);}\n\n\n// linear white point\nconst float W = 1.2;\nconst float T2 = 7.5;\n\nfloat filmic_reinhard_curve (float x) {\n    float q = (T2*T2 + 1.0)*x*x;    \n\treturn q / (q + x + T2*T2);\n}\n\nvec3 filmic_reinhard(vec3 x) {\n    float w = filmic_reinhard_curve(W);\n    return vec3(\n        filmic_reinhard_curve(x.r),\n        filmic_reinhard_curve(x.g),\n        filmic_reinhard_curve(x.b)) / w;\n}\n\nconst int N = 8;\nvec3 ca(sampler2D t, vec2 UV, vec4 sampl){\n\tvec2 uv = 1.0 - 2.0 * UV;\n\tvec3 c = vec3(0);\n\tfloat rf = 1.0;\n\tfloat gf = 1.0;\n    float bf = 1.0;\n\tfloat f = 1.0/float(N);\n\tfor(int i = 0; i < N; ++i){\n\t\tc.r += f*texture(t, 0.5-0.5*(uv*rf) ).r;\n\t\tc.g += f*texture(t, 0.5-0.5*(uv*gf) ).g;\n\t\tc.b += f*texture(t, 0.5-0.5*(uv*bf) ).b;\n\t\trf *= 0.9972;\n\t\tgf *= 0.998;\n        bf /= 0.9988;\n\t\tc = clamp(c,0.0, 1.0);\n\t}\n\treturn c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.+2.*uv;\n    p.y *= iResolution.y/iResolution.x;\n    vec4 sampl = texture(iChannel0, uv);\n    vec3 col = ca(iChannel0, uv, sampl).rgb;\n    col = texture(iChannel0,uv).rgb;\n    float noise = .012*vec3(hash(length(p)*iTime)).x;\n    float vignette = 1.25 / (1.1 + 1.1*dot(p, p));\n    vignette *= vignette;\n    vignette = mix(1.0, smoothstep(0.1, 1.1, vignette), 0.25);\n    col = col*vignette+noise;\n    col = filmic_reinhard(col);\n    col = smoothstep(-0.025, 1.0,col);\n    col = pow(col, vec3(1.0/2.2));\n\tfragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"precision highp float;\n\n#define RMMAX 50.\n#define RMITER 2000.\n#define RMS .025\n#define RMSH .025\n#define SHADOW 1\n\n#define resolution iResolution.xy\n#define time iTime\n#define touch iMouse.xy\n\n#define pi 3.141569\n#define pi_2 (pi*.5)\n#define pi_4 (pi*.25)\n#define pi2 (pi*2.)\n#define up vec3(.0,1.,.0)\n#define X vec2(1.,.0)\n\n#define repeat(a,x,n) (mod((a),((x)/(n)))-((x)/((n)*2.)))\n\nvec2 rep(vec2 p,float n)\n{\n  float a=atan(p.y,p.x);\n  a=mod(a,pi2/n)-pi/n;\n  return length(p)*vec2(cos(a),sin(a));\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n  vec4 k = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n  vec4 p = mix(vec4(c.bg, k.wz), vec4(c.gb, k.xy), step(c.b, c.g));\n  vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n  float d = q.x - min(q.w, q.y);\n  float e = 1.0e-10;\n  return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n  vec4 k = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + k.xyz) * 6.0 - k.www);\n  return c.z * mix(k.xxx, clamp(p - k.xxx, 0.0, 1.0), c.y);\n}\n\nmat2 rot2(float a)\n{\n  float c=cos(a),s=sin(a);\n  return mat2(c,-s,s,c);\n}\n\nmat3 rot(float a,float x,float y,float z)\n{\n  float s=sin(a),c=cos(a);\n  return mat3(\n    x+c*y+c*z,s*z,s*y,\n    -s*z,y+c*x+c*z,s*x,\n    -s*y,-s*x,z+c*x+c*y);\n}\n\nfloat lengthN(vec3 p,float n)\n{\n  p=pow(p,vec3(n));\n  return pow(p.x+p.y+p.z,1./n);\n}\n\nfloat lengthN(vec2 p,float n)\n{\n  p=pow(p,vec2(n));\n  return pow(p.x+p.y,1./n);\n}\n\nfloat sphere(vec3 p, float r)\n{\n\treturn length(p)-r;\n}\n\nfloat plane(vec3 p,vec3 n,float d)\n{\n  return dot(p,n)+d;\n}\n\nfloat box( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,.0));\n}\n\nfloat torus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat torus88(vec3 p,vec2 t)\n{\n  vec2 q=vec2(lengthN(p.xz,8.)-t.x,p.y);\n  return lengthN(q,8.)-t.y;\n}\n\nfloat torus28(vec3 p,vec2 t)\n{\n  vec2 q=vec2(lengthN(p.xz,2.)-t.x,p.y);\n  return lengthN(q,8.)-t.y;\n}\n\nvec2 opU(vec2 a, vec2 b)\n{\n  return vec2(min(a.x,b.x),\n    mix(a.y,b.y,step(a.x,b.x)));\n}\n\nvec2 opS(vec2 a, vec2 b)\n{\n  return vec2(max(a.x,1.-b.x),\n    mix(a.y,b.y,step(a.x,b.x)));\n}\n\nvec2 opI(vec2 a, vec2 b)\n{\n  return vec2(max(a.x,b.x),\n    mix(a.y,b.y,step(a.x,b.x)));\n}\n\nvec2 map(vec3 p)\n{\n  vec3 q=p;\n  vec2 res=vec2(-1.);\n\n//  mat2 r=rot2(p.x*sin(pi_2)*pi2);\n//  p.yz*=r;\n//  p.xz=rep(p.xz,3.)-X*1.;\n  q.xz=rep(q.xz,6.)-X*2.5;\n  \n  //float s = repeat(length(p.xz),.125,.5);\n    \n  res=vec2(sphere(q,1.),2.);\n  q=p;\n  q.xz*=rot2(iTime);\n  res=opS(res,vec2(box(q-up*2.5,vec3(2.)),1.));\n  res=opU(res,vec2(plane(p+sin(p.x*2.)*cos(p.z*3.)*.15,up,2.),.0));\n  \n  return res;\n}\n\nvec3 norm(vec3 p)\n{\n  const vec2 e=vec2(1.,-1.)*.5773*.000125;\n  return normalize(\n    e.xyy*map(p+e.xyy).x+\n    e.yxy*map(p+e.yxy).x+\n    e.yyx*map(p+e.yyx).x+\n    e.xxx*map(p+e.xxx).x);\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n  rd=normalize(rd);\n  float res = 1.0;\n  for( float t=mint; t < maxt; )\n  {\n    float h = map(ro + rd*t).x;\n    if( h<0.0005 ) return 0.0;\n    res = min( res, k*h/t );\n    t += h*RMSH;\n  }\n  return res;\n}\n\nvec3 render(vec3 ro, vec3 rd)\n{\n  vec3 col=vec3(.5);\n\n  float tmin=.0;\n  const float tmax=RMMAX;\n\n  float t=tmin;\n  float m=-1.;\n  for(float i=0.;i<RMITER;i++)\n  {\n    float precis=.000125*t;\n    vec2 res=map(ro+t*rd);\n    if(res.x<precis||t>tmax)break;\n    t+=res.x*RMS;\n    m=res.y;\n  }\n  m=mix(-1.,m,step(t,tmax));\n\n  vec3 p=ro+t*rd;\n  vec3 nor=norm(p);\n  vec3 lig=normalize(vec3(.5,.43,.6));\n  float amb=clamp(.7,.0,1.);\n  float dif=clamp(dot(nor,lig),.0,1.);\n  vec3 lin=\n      +.9*dif*vec3(1.,.8,.55)\n      +.3*hsv2rgb(vec3(m*pi2,1.,1.))\n      +.1*amb*vec3(.4,.6,1.);\n  col=mix(col,lin,step(-.5,m));\n#if SHADOW\n  col*=softshadow(p,1.-lig,tmin,tmax,16.);\n#endif\n  col=mix(vec3(.7,.8,1.),col,\n    exp(-t*t*.0025));\n  return col;\n}\n\nmat3 camera(vec3 ro, vec3 ta, float cr)\n{\n  vec3 cw = normalize(ta-ro);\n  vec3 cp = vec3(sin(cr),cos(cr),.0);\n  vec3 cu = normalize(cross(cw,cp));\n  vec3 cv = normalize(cross(cu,cw));\n  return mat3(cu,cv,cw);\n}\n\nvec2 pol(float a, float r)\n{\n\treturn vec2(cos(a),sin(a))*r;\n}\n\nvec3 render( vec2 fragCoord )\n{\n  vec2 uv = gl_FragCoord.xy/resolution.xy;\n  vec3 col = vec3(.0);\n  vec2 p=(-resolution+2.*fragCoord.xy)/resolution.y;\n  vec2 t=touch/resolution;\n  if (touch.x==0. && touch.y==0.)\n\tt+=pol(time*.3,.1);\n\n  vec3 ro =vec3(.0,2.+t.y*16.,5.-t.y);\n  ro.xz*=rot2(pi*2.*(t.x-1.));\n  vec3 to = vec3(.0,.0,.0);\n  mat3 ca = camera(ro,to,.0);\n  vec3 rd = ca*normalize(vec3(p,2.5));\n  col=render(ro,rd);\n\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  fragColor=vec4(render(fragCoord),1.);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// FXAA implementation by mudlord (I think?)\nvoid mainImage(out vec4 fragColor, vec2 fragCoord){\n    vec2 p = fragCoord.xy/iResolution.xy;\n    vec2 pp = 1.0 / iResolution.xy;\n    vec4 color = texture(iChannel0, vec2(fragCoord.xy * pp));\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(texture(iChannel0, (fragCoord.xy + vec2(-1.0, -1.0)) * pp).xyz, luma);\n    float lumaNE = dot(texture(iChannel0, (fragCoord.xy + vec2(1.0, -1.0)) * pp).xyz, luma);\n    float lumaSW = dot(texture(iChannel0, (fragCoord.xy + vec2(-1.0, 1.0)) * pp).xyz, luma);\n    float lumaSE = dot(texture(iChannel0, (fragCoord.xy + vec2(1.0, 1.0)) * pp).xyz, luma);\n    float lumaM  = dot(color.xyz,  luma);\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n\n    vec2 dir = vec2(-((lumaNW + lumaNE) - (lumaSW + lumaSE)), ((lumaNW + lumaSW) - (lumaNE + lumaSE)));\n\n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n                          (0.25 * (1.0/8.0)), (1.0/128.0));\n\n    float rcpDirMin = 2.5 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(8.0, 8.0),\n              max(vec2(-8.0, -8.0),\n              dir * rcpDirMin)) * pp;\n\n    vec3 rgbA = 0.5 * (\n        texture(iChannel0, fragCoord.xy * pp + dir * (1.0 / 3.0 - 0.5)).xyz +\n        texture(iChannel0, fragCoord.xy * pp + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\n        texture(iChannel0, fragCoord.xy * pp + dir * -0.5).xyz +\n        texture(iChannel0, fragCoord.xy * pp + dir * 0.5).xyz);\n\n    float lumaB = dot(rgbB, luma);\n    if ((lumaB < lumaMin) || (lumaB > lumaMax)){\n        fragColor = vec4(rgbA, color.w);\n    } else {\n        fragColor = vec4(rgbB, color.w);\n    }\n\n}","name":"Buf B","description":"","type":"buffer"}]}