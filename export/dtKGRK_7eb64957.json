{"ver":"0.1","info":{"id":"dtKGRK","date":"1684346347","viewed":77,"name":"Exponent flow","username":"ChunderFPV","description":"Playing with exponents again.  Showing points flowing between the limits.\nMouse y to zoom.","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["2d","grid","plot","power","transform","exponent","series"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 C, in vec2 U )\n{\n    vec3 c = texture(iChannel0, U/iResolution.xy, .25).rgb*.1; // load buffer A\n    C = vec4(c+c*c*2., 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define H(a) (cos(radians(vec3(0, 60, 120))-((a)*6.2832))*.5+.5)  // hue\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec3 c = vec3(0);\n    vec2 R = iResolution.xy,\n         m = iMouse.xy/R,              // mouse coords\n         u = (U-.5*R)/R.y*4./(1.-m.y), // cartesian coords\n         h = max(vec2(0), 1.-abs(fract(u+.5)-.5)/fwidth(u)/2.); // xy grid\n    u = abs(u);\n    float t = iTime/10.,\n          n = log(u.y)/log(u.x), // transform\n          v = max(abs(n), 1./abs(n)), // new coords with reciprocals\n          l = max(0., 1.-abs(fract(v+.5)-.5)/fwidth(v)/1.5), // lines\n          g = 1.-abs(sin(v*3.14)), // glow\n          d = min(1., 1./abs(v)); // darken\n    c = texture(iChannel0, mix(U/R, vec2(.5), -.001)).rgb*.9, // frame blur\n    c += (l*.8+g*.5)*d*2.*H(d+t+(sign(n)*.2+.2)); // blend\n    c *= max(0., 1.-max(h.x, h.y)*.05); // dark grid lines\n    c += min(h.x, h.y)*1.2; // grid points\n    \n    // point flow\n    float b = tan(t*3.14);\n    n = abs(n);\n    n = (n < 1.) ? 1./round(1./n): round(n); // round n or 1/n\n    n = sqrt(n);\n    vec2 o = vec2(pow(abs(b), 1./n), pow(abs(b), n*sign(b))); // point offsets\n    float f = length(u-o), // flow\n          p = max(0., 1.-f/length(fwidth(u))/4.), // points\n          pg = max(0., 1.-f/.5); // point glow\n    c += H(p+.5)*p*2.; // color & add\n    c += H(pg)*pg*.3;\n    \n    c = max(vec3(0), c); // clear negative rgb\n    C = vec4(c, 1);\n}","name":"Buffer A","description":"","type":"buffer"}]}