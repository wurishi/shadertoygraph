{"ver":"0.1","info":{"id":"NsXSWM","date":"1618686190","viewed":70,"name":"323_Saibel_v0v0","username":"saybeltimofey","description":"Сайбель Т. А., группа 323\nВарианты: 0, 0 => форма кристалла - шар, сцена внутри кристалла - огонь.\nРеализовано: \nМягкие тени \nАнти-алиасинг\nAmbient Occlusion\nОкружение в виде текстурированного куб-мапа\nRay marching","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["task2","cg21"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n* Сайбель Т. А., группа 323\n* Варианты: 0, 0 => форма кристалла - шар, сцена внутри кристалла - огонь.\n* Реализовано: \n* Мягкие тени\n* Анти-алиасинг \n* Ambient Occlusion\n* Окружение в виде текстурированного куб-мапа\n* Ray marching\n*/\n\n#define Fresnel(n1,n2) (n1 - n2) * (n1 - n2) / ((n1 + n2) * (n1 + n2))\n\nstruct Sphere \n{\n    vec3 pos;\n    vec3 color;\n    float radius;\n};\n\nconst int LIGHTS_AMOUNT = 2;\nSphere LIGHTS[LIGHTS_AMOUNT] = Sphere[LIGHTS_AMOUNT]\n(\n    Sphere(vec3(-3, 1.8, 5), vec3(1, 1, 1), 0.5),\n    Sphere(vec3(2, 1.7, 1), vec3(1.0, 0.9, 0.0), 0.25)\n);\n\nconst vec3 CAMERA_POS = vec3(0, 1.2, -6);\nconst float INF = 1e10;\nvec3 randDir;\n\nconst int EMISSION = 0;\nconst int DIFFUSE = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\nconst float GLASS_N = 1.5;\nconst float AIR_N = 1.0;\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal);\nfloat traceSphere(vec3 pos, vec3 dir, float R, out vec3 normal);\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal);\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal);\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2);\nfloat rand(float frame);\nbool isOccluded(vec3 pos, vec3 target);\nfloat snoise(vec3 uv, float res);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x; //+ (randVals.xy - 0.5) * 2.0)\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    \n    //motion blur for lights\n    LIGHTS[0].pos = LIGHTS[0].pos + randVals * 0.2;\n    LIGHTS[1].pos = LIGHTS[1].pos + randVals * 0.2;        \n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = normalize(front + right * uv.x + up * uv.y);\n    \n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    float GLASS_R = Fresnel(AIR_N, GLASS_N);\n    \n    vec4 globalColor = vec4(0, 0, 0, 0);\n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; i++)\n    {\n        float t = INF;\n        int materialType;    \n        vec3 normal, color;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t)\n        {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz).rgb;\n            normal = planeNorm;\n            if (randVals.y < 0.25)\n                materialType = REFLECTION;\n        }\n\n        for (int j = 0; j < LIGHTS_AMOUNT; j++)\n        {\n            vec3 lNorm;\n            float lightT = traceSphere(curPos - LIGHTS[j].pos, curDir, LIGHTS[j].radius, lNorm);\n            if (lightT < t)\n            {\n                t = lightT;\n                materialType = EMISSION;\n                color = LIGHTS[j].color;\n                normal = lNorm;\n            }\n        }\n        \n        vec3 sphNorm;\n        float sphT = traceSphere(curPos, curDir, 1.0, sphNorm);\n        if (sphT < t)\n        {\n            t = sphT;\n            normal = sphNorm;\n            if (randVals.x < GLASS_R)\n                materialType = REFLECTION;\n            else\n            {\n                colorMult *= vec3(0.4, 0.7, 0.7);\n                materialType = REFRACTION;\n                \n                //fire\n                vec2 p = -.5 + fragCoord.xy / iResolution.xy;\n                p.x *= iResolution.x/iResolution.y;\n\n                float color = 3.0 - (3.*length(2.*p));\n\n                vec3 coord = vec3(atan(p.x,p.y)/6.2832+.5, length(p)*.4, .5);\n\n                for(int i = 1; i <= 7; i++)\n                {\n                    float power = pow(2.0, float(i));\n                    color += (1.5 / power) * snoise(coord + vec3(0.,-iTime*.05, iTime*.01), power*16.);\n                }\n                globalColor += vec4( color, pow(max(color,0.),2.)*0.4, pow(max(color,0.),3.)*0.15 , 1.0);\n            }\n        }\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t)\n        {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y * 2.0).rgb;\n            normal = cylNorm;\n        }\n        \n        if (t != INF)\n        {\n            vec3 worldPos = t * curDir + curPos;\n            globalColor += vec4(texture(iChannel0, worldPos.xz).rgb * 0.1, 0.0);\n            \n            if (materialType == EMISSION)\n            {\n                globalColor += vec4(color * colorMult, 0);\n                break;\n            }\n            else if (materialType == DIFFUSE)\n            {\n                globalColor += vec4(computeLight(worldPos, color, normal) * colorMult, 0);\n                break;\n            }\n            else if (materialType == REFLECTION)\n            {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;            \n            }\n            else if (materialType == REFRACTION)\n            {\n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-5;\n            }\n        }\n        else\n        {\n            globalColor += vec4(texture(iChannel1, curDir).rgb * colorMult * 0.2, 0);\n        }        \n    }\n    fragColor = vec4(globalColor);\n}\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal)\n{\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0)\n        return INF;\n            \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz,worldPos.xz) >= 100.0)\n        return INF;\n    \n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float R, out vec3 normal)\n{\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - R * R;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal)\n{\n    vec3 toLight1 = LIGHTS[0].pos - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHTS[0].pos + randDir * LIGHTS[0].radius) ? 0.0 : 20.0f / distSq1;\n    \n    vec3 toLight2 = LIGHTS[1].pos - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHTS[1].pos + randDir * LIGHTS[1].pos) ? 0.0 : 10.0f / distSq2;\n    \n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHTS[0].color\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHTS[1].color\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2)\n{\n    if (dot(v, normal) < 0.0) \n    {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return normalize(sinB * tang + cosB * normal);\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) \n{\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) \n    {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) \n    {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) \n    {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) \n    {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) \n        {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) \n    {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) \n    {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nbool isOccluded(vec3 pos, vec3 target) \n{\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n        return (cylT < dist);\n}\n\nfloat snoise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e3);\n\t\n\tuv *= res;\n\t\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\t\n\tvec3 f = fract(uv); f = f*f*(3.0-2.0*f);\n\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n\t\t      \t  uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\n\tvec4 r = fract(sin(v*1e-1)*1e3) * 0.25;\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3) * 0.25;\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\treturn mix(r0, r1, f.z)*2.-1.;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}