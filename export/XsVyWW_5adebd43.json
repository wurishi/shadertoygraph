{"ver":"0.1","info":{"id":"XsVyWW","date":"1522823589","viewed":248,"name":"Sobel Edge Detection - schme","username":"schme","description":"A simple edge detection shader","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["edgedetection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 sx = mat3( \n    1.0, 2.0, 1.0, \n    0.0, 0.0, 0.0, \n   -1.0, -2.0, -1.0 \n);\nmat3 sy = mat3( \n    1.0, 0.0, -1.0, \n    2.0, 0.0, -2.0, \n    1.0, 0.0, -1.0 \n);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 diffuse = texture(iChannel0,uv).rgb;\n    mat3 I;\n    for (int i=0; i<3; i++) {\n        for (int j=0; j<3; j++) {\n            vec3 smpl  = texelFetch(iChannel0, ivec2(uv*iChannelResolution[0].xy) + ivec2(i-1,j-1), 0 ).rgb;\n            I[i][j] = length(smpl); \n        }\n    }\n    \n    float gx = dot(sx[0], I[0]) + dot(sx[1], I[1]) + dot(sx[2], I[2]); \n\tfloat gy = dot(sy[0], I[0]) + dot(sy[1], I[1]) + dot(sy[2], I[2]);\n\n    float g = sqrt(pow(gx, 2.0)+pow(gy, 2.0));\n    //g = smoothstep(0., 1., g);\n    vec3 edgeColor = vec3(1., .5, .1); \n\t//fragColor = vec4(edgeColor * g, 1.0);\n    fragColor = vec4(diffuse + edgeColor * g, 1.0f);\n\n}","name":"Image","description":"","type":"image"}]}