{"ver":"0.1","info":{"id":"mssSzS","date":"1669143446","viewed":129,"name":"Fork of mla's Equation Solver","username":"blurryroots","description":"Changed the coloring to be texture mapped; thought it might look psychodelic - seems like it does :)\n","likes":8,"published":1,"flags":48,"usePreview":1,"tags":["function","complex","cubic","equation","rational"],"hasliked":0,"parentid":"DdsSRS","parentname":"Complex Cubic Equation Solver"},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"////////////////////////////////////////////////////////////////////////////////\n//\n// Complex Cubic Equations, mla, 2022.\n//\n// Take three complex numbers as roots of a cubic equation, compute the equation,\n// then solve and compare with the original roots. The solved roots are marked\n// by rings and the contours show the roots of the equation directly.\n//\n// Not visually very exciting as the root finding is pretty much spot on (at\n// least to the precision we can see on the screen).\n\n// Use mouse to drag roots around.\n// Use following keys for parameters:\n// 'a': hide axes\n// 'r': rotation\n// 'x': space divisions\n// 'z': mapping spaces\n// 'w': root indicators\n// 'v': desaturation / recoloring\n//\n////////////////////////////////////////////////////////////////////////////////\n\n\nmat3x2\nsolvecubic (vec2 p, vec2 q) {\n  // Solve depressed cubic: x³+3px+q = 0 - note factor of 3!\n  // Put x = u+v and get x³ = u³+v³+3xuv\n  // Substitute in original equation and get:\n  // u³+v³+(3uv+3p)x + q = 0\n  // Now let's constrain u,v so that uv+p = 0, and then:\n  // uv = -p ie. u³v³ = -p³ and u³+v³ = -q\n  // This gives a quadratic equation in t with roots u³ and v³:\n  // t²+qt-p³ = 0 so try to solve as:\n  // u³ = -q + sqrt(q²+4p³), v³ = -q - sqrt(q²+4p³)\n  // and take cube roots to get solution x = u+v.\n  //\n  // HOWEVER, we can't just combine any cube roots of the\n  // quadratic solutions, the condition uv+p = 0 above must also\n  // hold, so what we do is take either one of the quadratic\n  // solutions with its three cube roots as the three values\n  // of u, and derive the corresponding v's directly as v = -p/u.\n  // As with solving a real quadratic equation, it seems prudent\n  // to use the quadratic root with the largest absolute magnitude,\n  // and given one cube root, we can easily find the others by\n  // multiplying by the cube roots of unity, ω and ω².\n  vec2 q2 = cmul(q, q);\n  vec2 p3 = cmul(p, cmul(p, p));\n  vec2 s = csqrt(q2 + 4.0*p3);\n  float sign = dot(q, s) > 0.0 ? -1.0 : 1.0; // Get largest magnitude root\n  vec2 u3 = 0.5 * (-q + sign*s);\n  vec2 u = ccbrt(u3);\n  // Maybe do a round of Newton-Raphson on u at this point.\n  vec2 u1 = cmul(u, omega); // Get other cuberoots by multiplying by ω and ω².\n  vec2 u2 = cmul(u, omega2);\n  return mat3x2(u - cdiv(p, u), u1 - cdiv(p ,u1), u2 - cdiv(p, u2));\n}\n\nmat3x2 solvecubic(vec2 B, vec2 C, vec2 D) {\n  // Solve x³+Bx²+Cx+D = 0\n  B /= 3.0; C /= 3.0;  // Simplifies sums\n  vec2 B2 = cmul(B, B); // Depress with x->x+B\n  // p = c-b*b\n  vec2 p = C - B2;\n  // q = 2.0*b*b*b - 3.0*b*c + d\n  vec2 q = cmul(B, 2.0*B2 - 3.0*C) + D;\n  mat3x2 res = solvecubic(p, q);\n  // Undepress by subtracting B\n  return mat3x2(res[0] - B, res[1] - B, res[2] - B);\n}\n \nvec2 evalcubic(vec2 a, vec2 b, vec2 c, vec2 z) {\n  // (x-a)(x-b)(x-c)\n  vec2 res = z - a;\n  res = cmul(res, z - b);\n  res = cmul(res, z - c);\n\n  return res;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    setscale();\n\n    vec2 z = map(fragCoord);\n    vec2 a = getselection(0);\n    vec2 b = getselection(1);\n    vec2 c = getselection(2);\n    \n    vec3 col1 =    vec3(1, 0, 0);\n    vec3 col2 =    vec3(0, 1, 0);\n    vec3 neutral = vec3(0, 0, 1);\n\n    vec2 w = evalcubic(a, b, c, z);\n    if (false == key(CHAR_R)) {\n      float t = 0.25 * iTime;\n      w = cmul(w, vec2(cos(t), sin(t)));\n    }\n    w = clog(w);\n    \n    \n    float alpha = w.y/PI;\n    vec3 basecol = alpha < 0.0 ? col1 : col2;\n    //vec3 color = mix(neutral,basecol,abs(alpha));\n    vec3 tint_a_color = vec3(0.0, 0.3098, phi0);\n    vec3 tint_b_color = vec3(0.3098, 0.0, phi0);\n    float px = fwidth(length(z));\n    \n    \n    float t = 0.5+atan(w.x)/PI;\n    \n    // fractional divisions?!\n    float space_divisions;\n    if (false == key(CHAR_X)) {\n        space_divisions = 0.5 + 1.5 * psin(iTime/4.); \n    }\n    else {\n        space_divisions = 2.0;\n    }\n    \n    vec2 uv = space_divisions * w / PI;\n    // Map the texture in 'single' space.\n    vec4 single_space = texture(iChannel0, uv);\n    if (true == key(CHAR_V)) {\n        single_space = desat(single_space);\n        single_space = vec4(tint_a_color * single_space.rgb, 1.0);\n    }\n    single_space = pow(single_space, linear_space);    \n    \n    float px2 = fwidth(uv.x);// fwidth for function result\n    uv = fract(uv);\n    uv = min(uv, 1.0 - uv);\n    // Map the texture in 'mirrored' space,\n    vec4 mirror_space = texture(iChannel0, uv);\n    if (true == key(CHAR_V)) {\n        mirror_space = desat(mirror_space);\n        mirror_space = vec4(tint_b_color * mirror_space.rgb, 1.0);\n    }\n    mirror_space = pow(mirror_space, linear_space);\n    \n    // Blend the single and mirror spaces.\n    float weight = 1.0;\n    if (false == key(CHAR_Z)) {\n        weight = psin(iTime/2.0);\n    }\n    fragColor = mix(mirror_space, single_space, weight);\n    \n    float line_brightness = 2.0;\n    vec3 color = vec3(0.0);\n    vec3 line_flavor = vec3(phi0, 0.0, phi0);\n    vec3 atanned_color = vec3(1. - t);\n    vec3 line_base_color = line_brightness * max(line_flavor, atanned_color);\n    \n    if (false == key(CHAR_A)) {\n        //line_base_color = pow(line_base_color, linear_space.rgb);\n        float eps = 0.05;\n        float d = min(abs(z.x), abs(z.y));\n        float x = z.x - round(z.x);\n        float y = z.y - round(z.y);\n        d = min(d, segment(vec2(x, z.y), vec2(0.0, -eps), vec2(0.0, eps)));\n        d = min(d, segment(vec2(z.x, y), vec2(-eps, 0.0), vec2(eps, 0.0)));\n        color = mix(line_base_color, color, smoothstep(0.0, px, d));\n    }\n    \n    if (false == key(CHAR_I)) {\n        color += mix(line_base_color, fragColor.rgb,\n            smoothstep(0.0, px2, min(uv.x, uv.y))\n        );\n    }\n    else {\n        color = fragColor.rgb;\n    }\n        \n    if (true == key(CHAR_W)) {\n        // Now let's solve the cubic equation and see if we get the\n        // original roots back.\n        // x³+Ax²+Bx+C = 0\n        vec2 A = -(a + b + c);\n        vec2 B = +cmul(a, b) + cmul(b, c) + cmul(c, a);\n        vec2 C = -cmul(a, cmul(b, c));\n        mat3x2 roots = solvecubic(A, B, C);\n        \n        float cirlce_size = phi0 / 10.0;\n        float thickness = 64.0 * px;\n        float threshold = thickness / 2.0;\n        for (int i = 0; i < 3; i++) {\n          vec2 w = roots[i];\n          // Draw a little circle around each root.\n          // Produces interesting interference close to origin.\n          float step = (abs(distance(w, z) - cirlce_size));\n          float s = smoothstep(0.0, thickness, step);\n          if (s > threshold)\n              color *= s;\n        }\n    }\n    \n    // Fetch processed rgb values an mix mith alpha.\n    fragColor = vec4(color, fragColor.a);\n    // Move back from linear to sRGB color space.\n    fragColor = pow(fragColor, sRGB_space);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define SELECTIONS\nconst int nselections = 3;\nconst float phi = (1. + sqrt (5.)) / 2.;\nconst float phi0 = phi - 1.;\nconst vec4 linear_space = vec4(2.2);\nconst vec4 sRGB_space = vec4(0.4545);\nconst float PI = 355./113.;\nconst float TWOPI = 2.0*PI;\n\n#define getselection(i) (texelFetch(iChannel2,ivec2((i)+1,3),0).xy)\n#define map(screenpos) (scale*(2.0*(screenpos)-iResolution.xy)/iResolution.y)\n\nfloat psin (float t) {\n    return (sin (t) + 1.) / 2.;\n}\n\nfloat pcos (float t) {\n    return (cos (t) + 1.) / 2.;\n}\n\nvec3 desat (vec3 c) {\n    return vec3(0.299*c.r + 0.587*c.g + 0.114*c.b);\n}\n\nvec4 desat (vec4 c) {\n    vec4 d = vec4(0.299*c.r + 0.587*c.g + 0.114*c.b);\n    d.a = 1.0;\n    return d;\n}\n\nvec2 initselection(int i) {\n  if (i == 0) return vec2(-sqrt(3.0),-1);\n  if (i == 1) return vec2( sqrt(3.0),-1);\n  if (i == 2) return vec2(0,1.5);\n  return vec2(0);\n}\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}\n\nvec2 cmul(vec2 z, vec2 w) {\n  return vec2(z.x*w.x-z.y*w.y,z.x*w.y+z.y*w.x);\n}\n\nvec2 cinv(vec2 z) {\n  return vec2(z.x,-z.y)/dot(z,z);\n}\n\nvec2 cdiv(vec2 z1, vec2 z2) {\n  return cmul(z1,cinv(z2));\n}\n\nvec2 clog(vec2 z) {\n  float r2 = dot(z,z);\n  return vec2(0.5*log(r2),atan(z.y,z.x));\n}\n\nfloat carg(vec2 z) {\n  return atan(z.y,z.x);\n}\n\nvec2 csqrt(vec2 z) {\n  float t = carg(z);\n  return sqrt(length(z))*vec2(cos(0.5*t),sin(0.5*t));\n}\n\nvec2 ccbrt(vec2 z) {\n  float t = carg(z)/3.0;\n  return pow(length(z),1.0/3.0)*vec2(cos(t),sin(t));\n}\n\n// cuberoots of 1.\nconst vec2 omega = 0.5*vec2(-1,sqrt(3.0));\nconst vec2 omega2 = omega*vec2(1,-1);\n\n// Rotate vector p by angle t.\nvec2 rotate(vec2 p, float t) {\n  return cos(t)*p + sin(t)*vec2(-p.y,p.x);\n}\n\nfloat scale = 1.0;\nvoid setscale() {\n  scale = 2.5;\n}\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )\n\nconst int KEY_ALT = 18;\n// const int KEY_PAGE_UP = 33;\n// const int KEY_PAGE_DOWN = 34;\n// const int KEY_LEFT = 37;\n// const int KEY_RIGHT = 39;\n// const int KEY_UP = 38;\n// const int KEY_DOWN = 40;\n\n// const int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\n// const int CHAR_B = 66;\n// const int CHAR_C = 67;\n// const int CHAR_D = 68;\n// const int CHAR_E = 69;\n// const int CHAR_F = 70;\n// const int CHAR_G = 71;\n// const int CHAR_H = 72;\nconst int CHAR_I = 73;\n// const int CHAR_J = 74;\n// const int CHAR_K = 75;\n// const int CHAR_L = 76;\n// const int CHAR_M = 77;\n// const int CHAR_N = 78;\n// const int CHAR_O = 79;\n// const int CHAR_P = 80;\n// const int CHAR_Q = 81;\nconst int CHAR_R = 82;\n// const int CHAR_S = 83;\n// const int CHAR_T = 84;\n// const int CHAR_U = 85;\nconst int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\n// const int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 t, vec2 uv) {\n  setscale();\n  int i = int(uv.x); // Column number\n  int j = int(uv.y); // Row\n  if (iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (j == 0) {\n    // First row - key count\n    // Do key repeat here as well?\n    float w1 = keystate(i,0).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      // Don't count key changes when ALT pressed\n      if (keystate(KEY_ALT,0).x == 0.0 && w1 != 0.0) {\n        t.x++; t.y = iTime;\n      }\n    }\n    // Key repeat - only when shader is running!\n    // Should have longer pause after first key press.\n    if (t.w != 0.0 && keystate(KEY_ALT,0).x == 0.0 && iTime-t.y > 0.25) {\n      t.x++; t.y = iTime;\n    }\n  } else if (j == 1) {\n    if (i == 0 && iMouse.z != 0.0) t.xy = iMouse.xy;\n    if (i == 1 && iMouse.z == 0.0) t.xy = iMouse.xy;\n  } else if (j == 2 && key(i)) {\n    // Record mouse position when key pressed\n    t = vec4(iMouse.xy,0,iTime);\n  } else if (j == 3) {\n      // Cell 0 holds currently selected item, 0 = no selection\n    if (i == 0 && iFrame != 0) {\n      if (t.x == 0.0 && iMouse.z > 0.0) {\n        vec2 mouse = map(iMouse.xy);\n        // No selection, but mouse now down\n        for (int i = nselections; i >= 1; i--) {\n          // Select topmost item (assume drawn 1..N)\n          vec2 p = texelFetch(iChannel2,ivec2(i,3),0).xy; // Get current state\n          if (distance(mouse,p) < scale*0.05) {\n            t.x = float(i);\n            break;\n          }\n        }\n      } else if (t.x != 0.0 && iMouse.z <= 0.0) {\n        // Clear selection if mouse up.\n        t.x = 0.0;\n      }\n    } else if (iFrame == 0 || t.z != 1234.0) {\n      t.z = 1234.0;\n      t.xy = initselection(i-1); // Current coordinates\n    } else {\n      vec4 t0 = texelFetch(iChannel2,ivec2(0,3),0); // Get current state\n      if (int(t0.x) == i && iMouse.z > 0.0) {\n        // If currently selected, copy mouse position\n        t.xy = map(iMouse.xy);\n      }\n    }\n  }\n}","name":"Buffer A","description":"","type":"buffer"}]}