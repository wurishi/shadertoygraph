{"ver":"0.1","info":{"id":"tdfyzB","date":"1585021630","viewed":53,"name":"tunel--plasma-v3","username":"jorge2017a1","description":"tunel--plasma-v3","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tunelplasmav3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a1---9-mar-2020\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define PI 3.14159265358979323846264\n\n\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n\n#define EPSILON 0.02\n#define WHITE 0.\n#define BLACK 1.\n#define FLOOR 2.\n\n\n\n///------------------------------------\nstruct TObj\n{\n    float tipo;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n};\n    \n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\n\n//Torus function\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n//Sphere function\nfloat sdSphere( vec3 p, float s1 )\n{\n   vec4 s = vec4(0, s1, 9, s1);\n   return  length(p-s.xyz)-s.w;   \n}\n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n//Triprism function\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n//Cone function\nfloat sdCone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n\n\n///--------------------------------------------\n\n\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) \n{\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) \n{\n    return max(distA, -distB);\n}\n\n\nvec2 opU(vec2 d1, vec2 d2 ) {\n  vec2 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n\nvec3 rotate_y(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t+ca, +.0, -sa,\n\t\t+.0,+1.0, +.0,\n\t\t+sa, +.0, +ca);\n}\n\nvec3 rotate_x(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t+1.0, +.0, +.0,\n\t\t+.0, +ca, -sa,\n\t\t+.0, +sa, +ca);\n}\n\n\nvec3 rotate_z(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); \n    float sa = sin(angle);\n\treturn v*mat3(\n\t\t+ca, -sa, +.0,\n\t\t+sa, +ca, +.0,\n\t\t+.0, +.0, +1.0);\n}\n\n\n///---------------------------------------------\n\n//IQs noise\nfloat noise(vec3 rp) {\n    vec3 ip = floor(rp);\n    rp -= ip; \n    vec3 s = vec3(7, 157, 113);\n    vec4 h = vec4(0.0, s.yz, s.y + s.z) + dot(ip, s);\n    rp = rp * rp * (3.0 - 2.0 * rp); \n    h = mix(fract(sin(h) * 43758.5), fract(sin(h + s.x) * 43758.5), rp.x);\n    h.xy = mix(h.xz, h.yw, rp.y);\n    return mix(h.x, h.y, rp.z); \n}\n///----------------------\nfloat floorTex(vec3 rp) {\n    rp.x += iTime * -2.0;\n    vec2 m = mod(rp.xz, 4.0) - 2.0;\n    if (m.x * m.y > 0.0) {\n        return 0.8 + noise(rp * 4.0) * 0.16;\n    }\n    return 0.2 + noise((rp + 0.3) * 3.0) * 0.1;\n}\n///-----------------------------------------\nfloat random() \n{\n\treturn fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453);\n}\n\n\n// We use it for ray scattering.\nvec3 randomUnitVector() \n{\n\tfloat theta = random() * PI2;\n    float z = random() * 2.0 - 1.0;\n    float a = sqrt(1.0 - z * z);\n    vec3 vector = vec3(a * cos(theta), a * sin(theta), z);\n    return vector * sqrt(random());\n}\n///-----------------------------------------\n\nvec3 LightShading(vec3 N,vec3 L,vec3 V,vec3 color)\n{\n    vec3 diffuse = max(0.,dot(N,-L))*color;\n    vec3 specular = pow(max(0.,dot(N,normalize(-L-V))),100.)*vec3(1.,1.,1.); \n    return diffuse + specular;\n}\n\n    \n    \n//-------------------------------------------------\n\n// Create infinite copies of an object -  https://iquilezles.org/articles/distfunctions\nvec2 opRep( in vec2 p, in float s )\n{\n    return mod(p+s*0.5,s)-s*0.5;\n}\n\nvec3 tex(vec2 uv)\n{\n\treturn vec3(fract(sin(dot(floor(uv*32.0),vec2(5.364,6.357)))*357.536));\n}\n\n//------------------------------------------\n\n\nfloat maxcomp(vec2 p) {\n  return max(p.x, p.y);\n}\n\nfloat sdCross(vec3 p) {\n  float da = maxcomp(abs(p.xy));\n  float db = maxcomp(abs(p.yz));\n  float dc = maxcomp(abs(p.xz));\n  return min(da, min(db, dc)) - 1.0;\n}\n\n\nmat2 rotate(float r) {\n  float c = cos(r);\n  float s = sin(r);\n  return mat2(c, s, -s, c);\n}\n\n\n\n\n\n//0000000000000000000000000000000000000000000000000000000\n\nfloat hash( in vec2 p ) \n{\n    return fract(sin(p.x*15.32+p.y*35.78) * 43758.23);\n}\n\nvec2 hash2(vec2 p)\n{\n\treturn vec2(hash(p*.754),hash(1.5743*p.yx+4.5891))-.5;\n}\n\n\nvec2 noise2(vec2 x)\n{\n    vec2 add = vec2(1.0, 0.0);\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    return mix(mix( hash2(p),          hash2(p + add.xy),f.x),\n                    mix( hash2(p + add.yx), hash2(p + add.xx),f.x),f.y);\n    \n}\n\n//-------------------------------------\n\n\n\n\nfloat mapCerro(vec3 pp){\n    vec3 p= pp;\n    p.z += iTime;\n    float h = dot(sin(p - cos(p.yzx*1.3)), vec3(.13));\n    h += dot(sin(p*2. - cos(p.yzx*1.3*2.)), vec3(.1/2.));\n    return p.y + 1. + h;     \n}\n\n\n//------------------------------------------\nvec2 GetDist(vec3 p  ) \n{\t\n    \n      float d;\n    float dif1;\n    float dif2;\n    \n    d=999.9;\n \n   vec3 pp;\n    pp=p;\n    vec2 res;\n    res = vec2(9999, 0);\n    \n    \n    float sdpt1= mapCerro(p);\n    float h = dot(sin(p - cos(p.yzx*1.3)), vec3(.13));\n    \n    vec3 ps;\n    ps=p;\n     ps= rotate_z(ps, iTime*3.141516/180.0);\n        \n    float sdsp1 = sdSphere (ps-vec3(0.0,2.0,4.4*iTime),2.0);\n    \n    \n    vec3 ppp;\n    ppp =p;\n    float c = 20.;\n    float c2 = 8.;\n    ppp.x+=sin(p.z*0.2);\n    \n    ppp.z=mod(ppp.z+c2*.5,c2)-c2*.5;\n    \n    vec3 p2;\n    \n    \n    vec3 p3;\n    p3 =p;\n     c = 20.;\n     c2 = 8.;\n    p3.y+=sin(p3.z*0.5)-4.0;\n    p3.z=mod(p3.z+c2*.5,c2)-c2*.5;\n    \n    \n    \n    float sdb1=sdBox(ppp- vec3(10.0,0.0,0.0), vec3(1.0,15.,20.0));\n    float sdb2=sdBox(ppp- vec3(-10.0,0.0,0.0), vec3(1.0,15.,20.0));   \n    float sdb3=sdBox(p3- vec3(0.0,10.0,0.0), vec3(10.0,2.,20.0));\n \n    res=opU(res, vec2(sdpt1,8 ));\n    res=opU(res, vec2(sdb1,24 ));\n    res=opU(res, vec2(sdb2,24 ));\n    res=opU(res, vec2(sdb3,24 ));\n    \n    \n    \n    \n    \n    d = res.x;\n    mObj.dist = res.x;\n    mObj.tipo = res.y;\n   \n    return res;\n}\n\n\n\n\nvec2 RayMarch(vec3 ro, vec3 rd)\n{\n\tfloat t_near=0.0;\n    //Determines size of shadow\n    \n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tvec3 p = ro + rd*t_near;\n        \n        vec2 dist = GetDist(p);\n        \n        t_near += dist.x;\n        if(t_near>MAX_DIST ) \n        {\n            \n            \n            return vec2(-1., -1);\n            \n    \t}else if(dist.x < SURF_DIST){\n            \n            return vec2(t_near, dist.y); \n        }    \n        \n    }\n    \n    \n     return vec2(-1., -1);\n}\n\n\n\nvec3 GetNormal(vec3 p) {\n\tvec2 d = GetDist(p);\n    float dist;\n    //Texture of white and black in image\n\n    vec2 e = vec2(0.0035, -0.0035);   \n    \n    dist=d.x;\n    \n  \n    vec3 n=  normalize(\n        e.xyy * GetDist(p + e.xyy).x + \n        e.yyx * GetDist(p + e.yyx).x + \n        e.yxy * GetDist(p + e.yxy).x + \n        e.xxx * GetDist(p + e.xxx).x);\n    \n    \n    return normalize(n);\n}\n\n\n\n\nfloat GetLightPar(vec3 p, vec3 plig) {\n    vec3 lightPos = plig;\n    //Determine movement of light ex. shadow and light direction and diffusion\n    //lightPos.xz += vec2(1, 2);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    vec2 d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d.x<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\n#define offset1 4.7\n#define offset2 4.6\n//----------------------------------------------------\n\n// Single rotation function - return matrix\nmat2 r2(float a){ \n  float c = cos(a); float s = sin(a); \n  return mat2(c, s, -s, c); \n}\n//--------------------\n\n// iMouse pos function - take in a vec3 like ro\n// simple pan and tilt and return that vec3\nvec3 get_mouse(vec3 ro) {\n    float x = iMouse.xy==vec2(0) ? -.2 :\n    \t(iMouse.y / iResolution.y * .5 - 0.25) * PI;\n    float y = iMouse.xy==vec2(0) ? .0 :\n    \t-(iMouse.x / iResolution.x * 1.0 - .5) * PI;\n    float z = 0.0;\n\n    ro.zy *= r2(x);\n    ro.zx *= r2(y);\n    \n    return ro;\n}\n\n\n//--------------------------------------------------------\n\nvec3 getSphereColor(int i)\n{\n    \n    float m;\n        \n\tif(i==0 )\n    {\n    \n        \n        return vec3(0.0);\n    }\n    \n    if(i== 1 )\n    {\n        \n        return vec3(1, 0.5, 0);\n        } \n    if(i== 2 )\n    {\n        return vec3(1.0, 1.0, 1.0);\n        } \n    if(i== 3 )\n    {\n        return vec3(247./255., 168./255.,  184./255.); \n       } \n    if(i== 4 )\n    {\n        \n        return vec3(0, 1, 1);\n        } \n    if(i== 5 )\n    {\n        return vec3(85./255., 205./255., 252./255.);\n        } \n    if(i== 6 )\n    {\n        \n        return  vec3(0.5, 0.8, 0.9);\n        } \n        \n    if(i== 7 )\n    {\n        return vec3(1.0, 1.0, 1.0);\n       } \n    if(i== 8 )\n    {\n       \n        \n        return vec3(0.425, 0.56, 0.9); \n       } \n    if(i== 9 )\n    {\n        \n        return vec3(0.5, 0.6, 0.6); \n     } \n    if(i== 10 )\n    {\n        return vec3(0.0, 1.0, 0.0);\n    } \n    \n    if(i== 11 )\n    {\n        return vec3(0.25, 0.25, 0.25);\n    } \n    \n    if(i== 12 )\n    {\n        vec3 tmp;\n        tmp =glpRoRd;\n        \n        tmp=rotate_x(tmp,90.0);\n        \n        return  vec3(0.8, 1.0, 0.4) * floorTex(tmp); \n        } \n     if(i== 13 )\n    {\n        float d = 0.0;\n\t\t\t// checkerboard function that returns 0 or 1\n\t\t\td = mod(floor(glpRoRd.x)+floor(glpRoRd.z),2.0);\n\t\t\t// vary between red (0) and yellow (1)\n\t\treturn vec3(0.8 + 0.1*d, 0.3 + 0.55*d, 0.15 - 0.1*d)*0.8;\n        } \n     if(i== 14 )\n    {\n        \t// checkerboard hack\n\t\t\tvec2 cb = floor(glpRoRd.xz);\n\t\t\tfloat cb2 = mod(cb.x + cb.y, 2.0);\n        \treturn vec3(0.4 + 0.1*cb2, 0.3 + 0.85*cb2, 0.35 - 0.3*cb2)*0.8;\n        } \n     if(i== 15 )\n    {\n    \t\treturn vec3(1.0,0.0,1.);\n       } \n     if(i== 16 )\n    {\n    \t\treturn vec3(1.0,1.0,0.0);\n     } \n     if(i== 17 )\n    {\n        /*\n        \tfloat tmps;\n        \ttmps=fbm(gres2);\n        \treturn  vec3(tmps );\n         */\n        } \n     if(i== 18 )\n    {\n        \treturn vec3(1.0,0.0,0.0);} \n     if(i== 19 )\n    {      \n     \treturn vec3(0.0,1.0,0.0);\n    } \n     \n    \n    if(i== 20 )\n    {\n     \n        vec3 p = glpRoRd;\n           vec3 marbleP = p;\n\n            marbleP.x += sin(p.y*20.0)*0.12;\n            marbleP.z += sin(p.y*22.0)*0.1;\n            marbleP.y += sin(p.x*25.0)*0.13;\n            marbleP.y += sin(p.z*23.0)*0.14;\n\n            marbleP.y += sin(p.x*1.3)*0.5;\n            marbleP.y += sin(p.z*1.5)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 20.0;\n            marbleP.z *= 20.0;\n            marbleP.y *= 10.0;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n    \t\t\n         vec3 surfaceColor;\n        \tsurfaceColor = mix(vec3(0.1,0.8,0.5),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\n     } \n    \n    \n    \n    if(i== 21 )\n    {\n     \n        vec3 p = glpRoRd;\n           vec3 marbleP = p;\n    \n    \t\t\n\n            marbleP.x += sin(p.y*20.0)*0.12;\n            marbleP.z += sin(p.y*22.0)*0.1;\n            marbleP.y += sin(p.x*25.0)*0.13;\n            marbleP.y += sin(p.z*23.0)*0.14;\n\n            marbleP.y += sin(p.x*1.3)*0.5;\n            marbleP.y += sin(p.z*1.5)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 20.0;\n            marbleP.z *= 20.0;\n            marbleP.y *= 10.0;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n            marbleP = p;\n\n            marbleP.x += sin(p.y*21.0)*0.12;\n            marbleP.z += sin(p.y*23.0)*0.1;\n            marbleP.y += sin(p.x*22.0)*0.13;\n            marbleP.y += sin(p.z*24.0)*0.14;\n\n            marbleP.y += sin(p.x*1.2)*0.5;\n            marbleP.y += sin(p.z*1.4)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 22.0;\n            marbleP.z *= 23.0;\n            marbleP.y *= 11.0;\n\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.4,0.4,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n        \n\t\t\t}  \n    \n    \n    if(i== 22 )\n    {\n        /*\n       return triangleBaryCentre(glpRoRd.xy);\t\n*/\n\t} \n    \n    \n     if(i== 23)\n    {\n    \n        \n        return  vec3(0.425, 0.16, 0.6);\t\n        \t\n\t} \n    \n    \n    \n    if(i== 24 )\n    {\n     \n        vec3 p = glpRoRd;\n           vec3 marbleP = p;\n    \n    \t\t\n\n            marbleP.x += sin(p.y*20.0)*0.12;\n            marbleP.z += sin(p.y*22.0)*0.1;\n            marbleP.y += sin(p.x*25.0)*0.13;\n            marbleP.y += sin(p.z*23.0)*0.14;\n\n            marbleP.y += sin(p.x*1.3)*0.5;\n            marbleP.y += sin(p.z*1.5)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*1.11;\n            marbleP.z += sin(p.y*162.0)*1.13;\n            marbleP.y += sin(p.x*145.0)*2.12;\n            marbleP.y += sin(p.z*153.0)*2.15;\n\n            marbleP.x *= 30.0;\n            marbleP.z *= 20.0;\n            marbleP.y *= 10.0;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/4.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n            marbleP = p;\n\n            marbleP.x += sin(p.y*21.0)*2.12;\n            marbleP.z += sin(p.y*23.0)*2.1;\n            marbleP.y += sin(p.x*22.0)*0.13;\n            marbleP.y += sin(p.z*24.0)*0.14;\n\n            marbleP.y += sin(p.x*1.2)*0.5;\n            marbleP.y += sin(p.z*1.4)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.11;\n            marbleP.z += sin(p.y*162.0)*0.13;\n            marbleP.y += sin(p.x*145.0)*0.12;\n            marbleP.y += sin(p.z*153.0)*0.15;\n\n            marbleP.x *= 22.0;\n            marbleP.z *= 23.0;\n            marbleP.y *= 11.0;\n\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/2.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.8);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.1,0.3,0.7),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n        \n\t\t\t}  \n\n    \n    if(i== 25 )\n    {\n        /*\n    \tfloat c = thunderbolt(mObj.uv+.02);\n    \tc=exp(-5.*c);\n    \tvec3 col;\n    \tcol=clamp(1.7*vec3(0.8,.7,.9)*c,0.,1.);\n        return col;\n*/\n\t}      \n    \n    \n  \n    if(i== 27 )\n    {\n        \n        float i0 = 1.0;\n  \t\tfloat i1 = 1.0;\n  \t\tfloat i2 = 1.0;\n  \t\tfloat i4 = 0.0;\n        \n  \tfor (int s = 0; s < 8; s++) {\n    vec2 r;\n    r = vec2(cos(mObj.uv.y * i0 - i4 + iTime / i1), sin(mObj.uv.x * i0 - i4 + iTime / i1)) / i2;\n    r += vec2(-r.y, r.x) * 0.3;\n    mObj.uv.xy += r;\n\n    i0 *= 1.93;\n    i1 *= 1.15;\n    i2 *= 1.7;\n    i4 += 0.05 + 0.1 * iTime * i1;\n  \t}\n        \n    \tfloat r = sin(mObj.uv.x - iTime+2.0) * 0.25 + 0.5;\n  \t\tfloat b = sin(mObj.uv.y + iTime*2.0+2.0) * 0.5 + 0.5;\n  \t\tfloat g = sin((mObj.uv.x + mObj.uv.y + sin(1.0 * 0.5)) * 0.5) * 0.5 + 0.5;\n        vec3 col= vec3(r,g,b);\n        return col;\n\t}      \n    \n    \n    \n    \n    if(i== 28 )\n    {\n        \n        float i0 = 1.0;\n  \t\tfloat i1 = 1.0;\n  \t\tfloat i2 = 1.0;\n  \t\tfloat i4 = 0.0;\n        \n  \tfor (int s = 0; s < 8; s++) {\n    vec2 r;\n    r = vec2(cos(mObj.uv.y * i0 - i4 + 1.0 / i1), sin(mObj.uv.x * i0 - i4 + 1.0 / i1)) / i2;\n    r += vec2(-r.y, r.x) * 0.3;\n    mObj.uv.xy += r;\n\n    i0 *= 1.93;\n    i1 *= 1.15;\n    i2 *= 1.7;\n    i4 += 0.05 + 0.1 * 1.0 * i1;\n  \t}\n        \n    \tfloat r = sin(mObj.uv.x - 1.0+2.0) * 0.25 + 0.5;\n  \t\tfloat b = sin(mObj.uv.y + 1.0*2.0+2.0) * 0.5 + 0.5;\n  \t\tfloat g = sin((mObj.uv.x + mObj.uv.y + sin(1.0 * 0.5)) * 0.5) * 0.5 + 0.5;\n        vec3 col= vec3(r,g,b);\n        return col;\n\t}      \n    \n  \n    \t\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n   \n    \n    vec3 ro = vec3(0 ,5.5,-1.0+iTime*4.5);\n    //ro = get_mouse(ro);\n    vec3 rd =normalize(vec3(uv,0.5) );\n\n    \n    vec3 col = vec3(0);\n    \n    TObj Obj;\n    \n    mObj.uv=uv;\n    mObj.rd=rd;\n    mObj.ro=ro;\n\n\tvec3 rLuz=vec3(0.5, 3.5, 4.5);\n    vec3 rl2=vec3(0.5, 20.5, 20.5);\n    \n    vec2 d = RayMarch(ro, rd);\n    Obj=mObj;\n    \n    \n    if(d.x == -1.){\n        col = getSphereColor(int( d.y)) * (1. - (uv.y));\n    }\n    else\n    {\n      \n  \n    vec3 p = (ro + rd * d.x ); \n    glpRoRd=p;\n    \n   \n    float dif;\n   \n    dif=0.35;\n   \n    \n    mObj.dist =d.x;\n    vec3 colobj;\n  \n    colobj=getSphereColor(int( d.y));\n    \n    vec3 nor= GetNormal( p);\n   \n    float intensity = 1.0;\n     vec3 V = normalize(p - ro);\n     vec3 L = rd;\n     vec3 normal = nor;\n     vec3 refl = 2.*dot(normal,-rd)*normal + rd;\n     vec3 result = LightShading(normal,L,V, colobj)*intensity;\n      col= result*dif*2.1;\n      col = pow(col, vec3(1.0/2.2));  \n     \n    }   \n        \n    fragColor = vec4(col,1.0);\n\n}","name":"Image","description":"","type":"image"}]}