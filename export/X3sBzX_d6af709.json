{"ver":"0.1","info":{"id":"X3sBzX","date":"1728706614","viewed":25,"name":"4D ray tracing","username":"Verlio_H","description":"ray tracer but it be in 4d","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","4d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float intersectHypersphere(vec4 ro, vec4 rd, vec4 cent, float r) {\n    vec4 oc = ro-cent;\n    float a = dot(rd,rd);\n    float b = 2.0 * dot(oc, rd);\n    float c = dot(oc,oc) - r*r;\n    float d = b*b - 4.*a*c;\n    if (d < 0.) {\n        return 100000.0;\n    } else {\n        float dist = (-b-sqrt(d))/(2.*a);\n        if (dist < 0.) {\n            return 100000.0;\n        }\n        return dist;\n    }\n}\n\nvec4 reflec(vec4 v, vec4 n) {\n    return v-2.*dot(v,n)*n;\n}\n\nfloat intersect(vec4 ro, vec4 rd, out int o, out vec4 norm) {\n    o = 0;\n    float dist = 100000.;\n    vec4 coord1 = vec4(0,0,5,-0.8);\n    float sphere1 = intersectHypersphere(ro,rd,coord1,1.);\n    vec4 coord2 = vec4(0,-100,5,15);\n    float sphere2 = intersectHypersphere(ro,rd,coord2,99.);\n    if (sphere1 < dist) {\n        dist = sphere1;\n        o = 1;\n        norm = (ro+dist*rd)-coord1;\n    }\n    if (sphere2 < dist) {\n        dist = sphere2;\n        o = 2;\n        norm = ((ro+dist*rd)-coord2)/99.;\n    }\n    \n    if (dist > 10000.) {\n        dist = 0.;\n        norm = vec4(0);\n    }\n    return dist;\n}\n\nvec3 light(vec4 ro, vec4 rd) {\n    int o; \n    vec4 norm;\n    vec3 mult = vec3(1.);\n    for (int i = 0; i < 10; ++i) {\n        float dist = intersect(ro,rd,o,norm);\n        if (o == 0) return mult*0.8;\n        ro = ro + dist*rd;\n        ro += norm*0.0001;\n        rd = reflec(rd,norm);\n        mult *= 0.9;\n    }\n        \n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = 2.*(fragCoord/iResolution.xy-0.5);\n    uv.x *= iResolution.x/float(iResolution.y);\n    vec4 rd = normalize(vec4(uv,1.0,0.0));\n    vec4 ro = vec4(0,0,0,sin(iTime));\n    // Output to screen\n    int o;\n    vec4 norm;\n    //float dist = intersect(ro,rd,o,norm);\n    //fragColor = vec4(norm.w);\n    fragColor = pow(vec4(light(ro,rd),1),vec4(1./2.2));\n}","name":"Image","description":"","type":"image"}]}