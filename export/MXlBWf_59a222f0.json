{"ver":"0.1","info":{"id":"MXlBWf","date":"1729021591","viewed":16,"name":"Moving box and sphere","username":"spectre256","description":"First attempt at using signed distance functions. Not sure where the distortion on the box is coming from.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Much of this code was taken directly from https://michaelwalczyk.com/blog-ray-marching.html\n// Also inspired by https://www.shadertoy.com/view/4lyfzw\n\n// Taken from https://iquilezles.org/articles/distfunctions/\nfloat sdf_sphere(in vec3 pos, in vec3 center, float radius) {\n    return length(pos - center) - radius;\n}\n\nfloat sdf_box(in vec3 pos, in vec3 lhw) {\n  vec3 q = abs(pos) - lhw;\n  return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat world(in vec3 pos) {\n    float d = sdf_sphere(pos, vec3(-2.0, 0.0, 0.0), 1.0);\n    return min(d, sdf_box(pos, vec3(1.0)));\n}\n\nvec3 normal(in vec3 pos) {\n    const vec2 step = vec2(0.001, 0);\n    \n    vec3 gradient;\n    gradient.x = world(pos + step.xyy) - world(pos - step.xyy);\n    gradient.y = world(pos + step.yxy) - world(pos - step.yxy);\n    gradient.z = world(pos + step.yyx) - world(pos - step.yyx);\n    \n    return normalize(gradient);\n}\n\nvec3 shade(in vec3 pos) {\n    const vec3 light_pos = vec3(-1.0, -5.0, 1.0);\n    const vec3 color = vec3(1.0, 0.0, 0.0);\n    \n    vec3 normal = normal(pos) * 0.5 + 0.5;\n    float intensity = max(0.0, dot(normal, normalize(pos - light_pos)));\n    \n    return color * intensity;\n}\n\nvec3 ray_march(in vec3 ro, in vec3 rd) {\n    float distance = 0.0;\n    const int STEPS = 32;\n    const float MIN_DISTANCE = 0.001;\n    const float MAX_DISTANCE = 1000.0;\n\n    for (int i = 0; i < STEPS; i++) {\n        vec3 pos = ro + distance * rd;\n\n        float new_distance = world(pos);\n\n        if (new_distance < MIN_DISTANCE) {\n            return shade(pos);\n        } else if (new_distance > MAX_DISTANCE) {\n            break;\n        }\n        \n        distance += new_distance;\n    }\n    \n    return vec3(0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Setup camera and ray\n    vec3 camera_pos = vec3(2.0 * cos(iTime), 0.0, -5.0);\n    vec3 ro = camera_pos;\n    vec3 rd = vec3(uv, 1.0);\n\n    // Output to screen\n    vec3 col = ray_march(ro, rd);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}