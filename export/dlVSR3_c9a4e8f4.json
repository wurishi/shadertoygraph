{"ver":"0.1","info":{"id":"dlVSR3","date":"1686257877","viewed":80,"name":"Diagonal Checkerboard","username":"dchapes123","description":"2D checkerboard moving on a diagonal defined by a given rotation.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["2d","checkerboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Input parameters\n    const float boardSize = 15.0;\n    const float colorScale = 1.125;\n    const float timeScale = 0.125;\n    const float rotation = M_PI * 1.125;\n    \n    // 2D rotation matrix \n    const mat2 R = mat2(cos(rotation), -sin(rotation), sin(rotation), cos(rotation));\n    \n    float resScale = min(iResolution.x, iResolution.y);\n    vec2 guv = fragCoord / vec2(resScale);\n    vec2 uv = guv * R;\n    \n    float time = iTime * timeScale;\n    \n    bool f = bool(((int((uv.x - time) * boardSize) % 2) + (int(uv.y * boardSize) % 2)) % 2);\n    float d = max(0.0, distance(guv, vec2(0.5)) - 0.25) * colorScale;\n    \n    vec3 col = vec3(float(f) - d);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}