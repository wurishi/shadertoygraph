{"ver":"0.1","info":{"id":"3lKBD3","date":"1615275078","viewed":695,"name":"4D Lava Lamp","username":"alalalat","description":"endless fun","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","perlinnoise","perlin","green","blue","screensaver","multidimensional"],"hasliked":0,"parentid":"tlyBDc","parentname":"Depth of noise gives edges"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2013 Inigo Quilez \n// substantial refactoring by 2021 Alalalat\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Simplex Noise (http://en.wikipedia.org/wiki/Simplex_noise), a type of gradient noise\n// that uses N+1 vertices for random gradient interpolation instead of 2^N as in regular\n// latice based Gradient Noise.\n\n\n// Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n// Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n// Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n// Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n// Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n// Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n// Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n// Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n// Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n// Wave     Noise 2D             : https://www.shadertoy.com/view/tldSRj\n\n\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nfloat maximum(vec3 p)\n{\n    float max = p.x;\n    if (p.y > max)\n    max = p.y;\n    if (p.z > max)\n    max = p.z;\n    return max;\n    \n    \n}\nfloat minimum(vec3 p)\n{\n    float min = p.x;\n    if (p.y < min)\n    min = p.y;\n    if (p.z < min)\n    min = p.z;\n    return min;\n    \n    \n}\nvec3 normalize2 (vec3 grosscolor)\n{\n    grosscolor = (grosscolor*grosscolor*grosscolor);\n    float max = maximum(grosscolor);\n    float min = minimum(grosscolor);\n    return (grosscolor.xyz/(max+min));\n\n}\n\n\nvec2 rotate (vec2 oldpoint, float angle)\n{\n    float left, right;\n    \n    left = cos(angle)*oldpoint.x;\n    left -= sin(angle)*oldpoint.y;\n    right = sin(angle)*oldpoint.x;  \n    right += cos(angle)*oldpoint.y;\n    \n    return vec2(left,right);\n}\n\nfloat noise4( vec2 uv )\n{\n    float f = 0.5;\n    float frequency = 1.75;\n    float amplitude = 0.5;\n    //for(int i = 0; i <int(floor(log(iTime*iTime))); i++){\n    for(int i = 0; i <7; i++){\n        f += amplitude*noise( frequency*uv - rotate(vec2(log(iTime+3.0),log(iTime+3.0)/999.0),iTime/9999.0) );\n        frequency *= 2.0;                                                                                             //helper\n        amplitude *= 0.5;\n    }\n    return f;\n}\n// -----------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n\n\tvec2 uv = p*vec2(iResolution.x/iResolution.y,0.8);\n    uv = rotate(uv,log(iTime)/-7.0);\n    \n    //uv -= 2.0*vec2(iResolution.x/2.0, iResolution.y/2.0);\n    \n    float interval = 10.0;\n    vec3 dblue = interval*vec3(1.8,2.6,2.6);\n    vec3 cyan = interval*vec3(0,2.1,2);\n    vec3 magenta = interval*vec3(1.8,1.0,1.8);\n   \n \n    \n\t\n    float f = 0.0\t;\n    \n    vec3 color = vec3(0.75,0.75,0.75);   \n\tf = noise4( uv + noise4(uv)*((log(iTime+1.0)+(iTime/60.0))) );\n    color += f*normalize2(dblue);\n    \n    f = noise4( f*rotate(uv,sin(iTime/11.0)) + f*noise4(f*uv));\n    color += f*normalize2(cyan);\n    \n    f = noise4( f*rotate(uv,iTime/7.0) + f*noise4(uv)*noise4(uv));\n    color += f*normalize2(magenta);\n    \n    color = normalize2(color);\n  \n    \n \n\n\t\n\t\n   \t\n\t\n\tfragColor = vec4(color,1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}