{"ver":"0.1","info":{"id":"3sS3WG","date":"1549816099","viewed":179,"name":"General polynomial interpolation","username":"noby","description":"https://en.wikipedia.org/wiki/Smoothstep#Generalization_to_higher-order_equations","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","graph","smoothstep","interpolation","polynomial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SQUARE_ASPECT 0\n\nfloat power(float x, int n) {\n\tfloat y = 1.0;\n\tfor(int i = 0; i < 16; ++i){         \n\t\tif((n & (1 << i)) > 0)\n        \ty *= x;\n\t\tx *= x;\n    }\n\treturn y;\n}\n\nfloat pascalTriangle(int a, int b) {\n\tfloat result = 1.0;\n\tfor(int i = 0; i < b; ++i)\n\t\tresult *= float(a - i) / float(i + 1);\n\treturn result;\n}\n\nfloat generalSmoothstep(float a, float b, float x, int N) {\n\tx = clamp(x, a, b);\n\tfloat result = 0.0;\n    for (int n = 0; n <= N; ++n){\n        // custom power function provides slightly better results\n        // with higher order polynomials (provided by fizzer)\n\t\tresult += (pascalTriangle(-N-1, n)*pascalTriangle(2*N+1, N-n)) * power(x, N+n+1);\n    }\n\treturn result;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n#if SQUARE_ASPECT\n    vec2 uv = -1.0+2.0*fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    uv = 0.5+(0.5*uv);\n#else\n    vec2 uv = fragCoord/iResolution.xy;\n#endif\n    \n    float aa = length(fwidth(uv));\n    vec3 result = vec3(1);\n    \n    // breaks down due to floats beyond the 6th degree\n    // (13th degree polynomials get quite large)\n    const float animspeed = 1.5;\n    const int maxdegree = 6;\n    int animFrame = int(floor(iTime*animspeed));\n    \n    for(int d = 0; d <= min(maxdegree, animFrame); d += 1){\n        // animation\n        float anim = min(1.0,\n                         step(float(d), float(animFrame-1))+\n                         generalSmoothstep(0.0, 1.0, mod(iTime*animspeed, 1.0), d));\n        anim = max(anim, step(float(maxdegree+1), float(animFrame)));\n        \n        float x = generalSmoothstep(0.0, anim, uv.x, d);\n        // \"clip\" the graph for the animation\n        x -= 2.0*step(anim, uv.x);\n        \n        // graph outline\n    \tfloat dx = dFdx(x);\n        float y = smoothstep(dx, aa*2.0+dx, distance(uv.y, x));\n        \n        // graph color\n        vec3 color = mix(1.0-vec3(0,0,1), 1.0-vec3(1,0,0), float(d)/float(maxdegree));\n    \tresult += mix(-color, vec3(0), y);\n    }\n    \n    fragColor.rgb = pow(result, vec3(1.0/2.2));\n}","name":"Image","description":"","type":"image"}]}