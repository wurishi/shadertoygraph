{"ver":"0.1","info":{"id":"XdKGWV","date":"1456484051","viewed":221,"name":"Simple SDF ray marcher","username":"tomkel","description":"Simple, illustrative ray marcher","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["procedural"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphere( vec3 spherepos, float r, vec3 raypos )\n{\n    return distance( spherepos, raypos ) - r;\n}\n\nvec4 getlight( vec3 normal, vec3 position, vec3 lightpos, vec4 lightcolour  )\n{\n    float d = distance( position, lightpos );\n    vec3 n = normalize( position - lightpos );\n    return max( dot( normal, n ), 0.0 ) * lightcolour;\n    \n}\n\n\nfloat smin( float a,  float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    float blend = -log( res )/k;\n    return blend;\n}\n\n\nfloat sdf( vec3 raypos )\n{\n    float e = abs( 0.5 + abs( cos( iTime )) * 3.0 ) ;\n    return smin( sphere( vec3( 0,0, 0.0), 10.0, raypos ),\n                    sphere( vec3( 0,10, 0.0), 10.0, raypos ), e );\n}\n\n\nvec3 grad( vec3 raypos, float delta )\n{\n    float dx =  sdf( raypos + vec3( delta, 0,0 ) ) - sdf( raypos - vec3( delta,0,0 ) );\n    float dy =  sdf( raypos + vec3( 0, delta,0 ) ) - sdf( raypos - vec3( 0,delta,0 ) );\n    float dz =  sdf( raypos + vec3( 0,0, delta ) ) - sdf( raypos - vec3( 0,0,delta ) );\n    return vec3( dx,dy,dz );\n}\n\nvec4 march( vec3 ray, vec3 origin, float ep )\n{\n    vec3 p = origin;\n    for ( int i = 0; i < 1024; i++ )\n    {\n        float step = sdf(p);\n        if ( step  <  ep )\n        {\n            vec3 normal = normalize( grad( p, 0.1 ) );\n            return getlight( normal, p,  vec3( 100,100,100 ), vec4(1.0,1.0,0,1.0 )) + \n                   getlight( normal, p,  vec3( -100,-100,-100 ), vec4(0.0,1.0,1.0,1.0 )) ;\n        }\n        \n        p += ray * step;\n    }\n    \n    return vec4(0.0,0,0,1);\n}\n\nvec3 rotatevecY( vec3 vec, float angle )\n{\n    vec3 m0 = vec3( -cos( angle ), 0, sin( angle ));\n    vec3 m1 = vec3( 0            , 1.0,   0      );\n    vec3 m2 = vec3( sin( angle ), 0, cos( angle ) );\n    \n    return vec3(  dot( m0, vec ), dot( m1, vec ), dot( m2, vec )) ;\n} \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float aspect = iResolution.y / iResolution.x;\n    \n    vec3 origin = vec3(0.0, 5,-30.0 );\n    vec3 ray = vec3( uv.x - 0.5, (uv.y - 0.5) * aspect, 0.5 );\n    \n    ray = rotatevecY( ray, iTime );\n    origin = rotatevecY( origin, iTime );\n\n    \n\tfragColor = march( ray, origin, 0.01 );\n}","name":"Image","description":"","type":"image"}]}