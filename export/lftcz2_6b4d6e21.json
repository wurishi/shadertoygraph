{"ver":"0.1","info":{"id":"lftcz2","date":"1730920316","viewed":48,"name":"Fast Sobel Edge Detection","username":"yurk_deng","description":"Very basic and fast Sobel Edge Detection implementation","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["edge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fast Sobel Edge Detection\n// Jeroen Baert - jeroen.baert@cs.kuleuven.be\n// www.forceflow.be\n\n// Use these parameters to fiddle with settings\nfloat step = 0.3;\n\nfloat intensity(in vec4 color){\n\treturn sqrt((color.x*color.x)+(color.y*color.y)+(color.z*color.z));\n}\n\nvec3 sobel(float stepx, float stepy, vec2 center){\n\t// get samples around pixel\n    float tleft = intensity(texture(iChannel0,center + vec2(-stepx,stepy)));\n    float left = intensity(texture(iChannel0,center + vec2(-stepx,0)));\n    float bleft = intensity(texture(iChannel0,center + vec2(-stepx,-stepy)));\n    float top = intensity(texture(iChannel0,center + vec2(0,stepy)));\n    float bottom = intensity(texture(iChannel0,center + vec2(0,-stepy)));\n    float tright = intensity(texture(iChannel0,center + vec2(stepx,stepy)));\n    float right = intensity(texture(iChannel0,center + vec2(stepx,0)));\n    float bright = intensity(texture(iChannel0,center + vec2(stepx,-stepy)));\n \n\t// Sobel masks (see http://en.wikipedia.org/wiki/Sobel_operator)\n\t//         1 0  -1      -1  -2 -1\n\t//    X =  2 0  -2  Y =  0   0  0\n\t//         1 0  -1       1   2  1\n\t\n\t// You could also use Scharr operator:\n\t//         3 0  -3       3  10  3\n\t//    X = 10 0 -10  Y =  0   0  0\n\t//         3 0  -3      -3 -10 -3\n \n    float x = tleft + 2.0*left + bleft - tright - 2.0*right - bright;\n    float y = -tleft - 2.0*top - tright + bleft + 2.0 * bottom + bright;\n    float color = sqrt((x*x) + (y*y));\n    return vec3(color,color,color);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 texCoord = fragCoord.xy / iResolution.xy;\n\tfragColor.xyz = sobel(step/iResolution.x, step/iResolution.y, texCoord);\n}\n","name":"Image","description":"","type":"image"}]}