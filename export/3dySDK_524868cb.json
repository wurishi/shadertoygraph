{"ver":"0.1","info":{"id":"3dySDK","date":"1575045512","viewed":367,"name":"Journey Through the Cosmos","username":"Soleam","description":"An eternal quest","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["cosmos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define timeScale 1.\n\nfloat N11(float n)\n{\n    vec2 v1 = vec2(fract(n*129.3484),fract(n*10.2347+1.4948));\n    vec2 v2 = vec2(49.256,n);\n    return fract(dot(v1,v2));\n}\n\nvec2 N12(float n)\n{\n    vec2 v1 = vec2(fract(n*33.24102+1.2847),fract(n*4.70234556-2.5856));\n    vec2 v2 = vec2(39.3823+n,n*3.1938+1.4028);\n    return vec2(fract(dot(v1,v2)),N11(dot(v1,v2)));\n}\n\nvec2 N22(vec2 p)\n{\n    return vec2(N11(4.238+p.y+p.x*0.6274),N11(3.4148*p.y-8.29*p.x+1.39558));\n}\n\nfloat perlin(vec2 p,float scale, float seed)\n{\n    vec2 pS = p*scale;\n    \n    float X1 = floor(p.x*scale);\n    float X2 = X1+1.;\n    float Y1 = floor(p.y*scale);\n    float Y2 = Y1+1.;\n    \n    vec2 v11 = vec2(X1,Y1);\n    \n    vec2 gpUnfaded = pS - v11;\n    float xCub = pow(gpUnfaded.x,3.);\n    float yCub = pow(gpUnfaded.y,3.);\n    vec2 gp = vec2((6.*gpUnfaded.x*gpUnfaded.x-15.*gpUnfaded.x+10.)*xCub,\n              (6.*gpUnfaded.y*gpUnfaded.y-15.*gpUnfaded.y+10.)*yCub);\n    \n    vec2 v12 = vec2(X1,Y2);\n    vec2 v21 = vec2(X2,Y1);\n    vec2 v22 = vec2(X2,Y2);\n    \n\tvec2 d11 = gp-v11;\n    vec2 d12 = gp-v12;\n    vec2 d21 = gp-v21;\n    vec2 d22 = gp-v22;\n    \n    float fact = 1.394+seed;\n    vec2 g11 = (N22(v11*fact)-.5)*2.;\n    vec2 g12 = (N22(v12*fact)-.5)*2.;\n    vec2 g21 = (N22(v21*fact)-.5)*2.;\n    vec2 g22 = (N22(v22*fact)-.5)*2.;\n    \n    vec2 contribY1 = mix(g11,g21,gp.x);\n    vec2 contribY2 = mix(g12,g22,gp.x);\n    \n    vec2 contrib = mix(contribY1,contribY2,gp.y);\n\n\tfloat value= dot(d11,contrib)+dot(d12,contrib)-dot(d21,contrib)-dot(d22,contrib);\n    \n    return mix(0.,1.,value);\n}\n\nvec3 starColor(vec2 p, float id, float radius)\n{\n    //center of the star\n    vec2 center = N12(id)-.5;\n    //random color\n    vec3 color = vec3(N11(id),N11(id*7.2819),N11(id/2.));\n    vec2 vec = center-p;\n    float dist = (length(vec));\n   \tfloat angle = abs(sqrt(abs(vec.x*vec.y)))*5.;\n    float star = smoothstep(radius*.3,radius*.25,dist);\n    float halo = smoothstep(radius*1.2,.0,dist)*(.7+abs(sin(iTime*(20.+center.x*40.)))*.3);\n    float scint = smoothstep(1.,.0,angle)*halo*(.7+abs(sin(iTime*(10.+center.x*20.)))*.3);\n    return star*vec3(sqrt(color))+(scint+halo)*color;\n}\n\nvec3 layerColor(vec2 uv, float layerIndex,float scale)\n{\n    uv = uv*scale;\n    //random seed for this layer\n    float seed = 2.309387+layerIndex*1.283374;\n    //subdivision into squares\n    vec2 gv = (fract(uv*10.)*2.)-1.;\n    //id of the square\n    float id= seed*1.4983*floor(uv.y*10.)+5.39283*floor(uv.x*10.);\n    //random radius for the star\n    float radius = mix(.1,.5,N11(id*3.82918));\n   \t//is the start in this square visible?\n    float visible = smoothstep(.95,.96,N11(id*19.10982));\n    //value of the star to draw\n    vec3 starColor = starColor(gv,id,radius);\n    \n    \n    return starColor*visible;\n}\n\nvec3 nebula(vec2 uv,float scale, float seed)\n{\n    uv = uv*scale;\n    vec3 color = 0.5 + 0.5*cos(iTime*.4*timeScale-length(uv)+vec3(0,2,4));\n    \n \t//value of the nebula\n    float valPerlin = perlin(uv,scale,seed)+.6*perlin(uv,5.*scale,seed)+.3*perlin(uv,7.*scale,seed);\n    vec3 colNebul = smoothstep(-1.,1.,valPerlin)*color*.12*(.2+.2*length(uv));  \n    \n    return colNebul;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy*2.)-1.;\n    uv.x *= iResolution.x/iResolution.y;\n\t\n    vec3 col = vec3(0.);\n    \n    \n    float time = iTime*timeScale;\n    // Number of layers\n    float nbLayers = 20.;\n    float step = .5;\n    float width = nbLayers * step;\n    \n    for(float i = 1. ; i < nbLayers; i++)\n    {\n        float posI = mod(width-(time+i),width+0.5);\n        float scale =posI;\n        float visible = clamp(2.-abs(posI - 2.), 0.,1.);\n        vec3 nebulVal = nebula(uv,scale,i)*.7;\n        col += visible*(layerColor(uv,i,scale)+nebulVal);\n    }\n                                                                   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}