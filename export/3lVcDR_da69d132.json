{"ver":"0.1","info":{"id":"3lVcDR","date":"1610821763","viewed":115,"name":"Clean Spiral Distance","username":"nr4","description":"Spiral distance function with correct behavior for angles greater than pi","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sdf","spiral","distance","logarithmic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * Clean Spiral Distance\n * \n * Copyright (C) 2021  Alexander Kraus <nr4@z10.info>\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nconst vec3 c = vec3(1.,0.,-1.);\nconst float pi = acos(-1.);\n\nfloat m(in vec2 x)\n{\n    //return max(abs(x.x), abs(x.y)); // rotated square spiral\n    //return abs(x.x)+abs(x.y); // square spiral\n    return length(x); // spiral\n    //return .5*((abs(x.x)+abs(x.y)+min(abs(x.x),abs(x.y)))); // 4-star\n    //return .5*((abs(x.x)+abs(x.y)+max(abs(x.x),abs(x.y)))); // octagon\n}\n\n// Distance to spiral\nfloat spiral(in vec2 x, in float k)\n{\n    float tau = 2.*pi;\n    vec2 dpr = mod(vec2(atan(x.y,x.x),m(x)/k),tau);\n    float a = abs(dpr.y-dpr.x);\n    return k*min(a,tau-a);\n}\n\nfloat sm(in float d)\n{\n    return smoothstep(1.5/iResolution.y, -1.5/iResolution.y, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Ignore the drawing code, it's messy, I know :)\n    vec2 uv = (fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n\tfloat d = spiral(uv, mix(.004,.1,.5+.5*sin(iTime)));\n    d = abs(d)-.0025;\n    float interval = clamp(.2 * (d-mod(d,.025))/.025, 0., 1.);\n    vec3 col = mix(vec3(1.00,0.90,0.68), vec3(0.98,0.64,0.67), 2.*interval);\n    if(interval > .5) col = mix(col, vec3(0.54,0.80,0.80), 2.*(interval-.5));\n    col = mix(col, c.yyy, sm(d));\n    col = mix(col, .4*c.xxx, sm(abs(mod(d+.0125,.025)-.0125)-.001));\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}