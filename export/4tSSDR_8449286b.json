{"ver":"0.1","info":{"id":"4tSSDR","date":"1442627059","viewed":275,"name":"Hello Square","username":"davepl","description":"Draws a very basic square, showing if/else testing inside the shader to determine where a pixel is relative to the square (inside or outside) and colors it accordingly.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ahelloworldeditionofdrawingasimplesquare"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Davepl 9/18/2015\n// Creative Commons Attribution License\n//\n// Simplest circle\t\n//\n// Basic idea - if a pixel is outside the boundary of a square, color it red, otherwise blue\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\t// Scale pixel coords to 0..1 range instead\n    uv = uv * 2.0 - 1.0;\t\t\t\t\t\t// Now to the -1 to +1 range\n    const float size = 0.8; \n    \n    uv.x *= iResolution.x / iResolution.y;\t\t// Correct for aspect ratio; rescale texcoords horizontally based on it\n    \n    // Check to see if the x is outside the square or if the y is outside.  If either is true, it becomes red\n    \n\tif (uv.x > size || uv.x < -size || uv.y < -size || uv.y > size)\n        fragColor = vec4(1,0,0,1);\n    else\n        fragColor = vec4(0,0,1,1);\n}","name":"","description":"","type":"image"}]}