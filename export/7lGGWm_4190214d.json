{"ver":"0.1","info":{"id":"7lGGWm","date":"1642051560","viewed":69,"name":"Plot an arbitrary function","username":"pavleeto","description":"Test Coordinates","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["line","plot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\nCrude sampling approach \nfloat func(float x)\n{\n    return x*x + 2.0*x + 1.0;\n}\n\nint is_func_above_pos(vec2 pos)\n{\n    float fx = func(pos.x);\n    return (fx - pos.y) > 0.0 ? 1 : -1;\n}\n\nfloat proximity_to_func(vec2 pos)\n{\n    float r = 0.02;\n    float delta = 0.005;\n    int step_cnt = int(2.0*r/delta) * int(2.0*r/delta);\n \n    // calculate how many points are above and below our function\n    // if \n    int cnt = 0;\n    for (float nx = pos.x - r; nx <= pos.x + r; nx += delta)\n    {\n        for (float ny = pos.y - r; ny <= pos.y + r; ny += delta)\n        {\n            cnt += is_func_above_pos(vec2(nx, ny));\n        }\n    }\n    \n    return 1.0 - (float(abs(cnt)) / float(step_cnt));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mat2x2 scale = mat2x2(10.0);\n    \n    // Normalized pixel coordinates (center 0.0, top = 1.0)\n    vec2 uv = fragCoord / iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= scale;\n\n    // Output to screen\n    fragColor = vec4(proximity_to_func(uv), 0.0, 0.0, 1.0);\n}\n\nCrude Samping Approach\n*/\n\nfloat func(float x)\n{\n    return x*x;\n}\n\nfloat proximity_to_func(vec2 pos)\n{\n    float dy = func(pos.x) - pos.y;\n    return 1.3 - abs(dy)/fwidth(dy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    float scale = 10.0;\n    vec2 res = iResolution.xy;\n    vec2 coord = scale * (fragCoord - 0.5 * res) / res.y;\n\n    // Output to screen\n    vec3 finalColor = 1.0 - vec3(proximity_to_func(coord));\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}