{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"vec3 palette(float t){\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,1.5,2.5);\n    vec3 c = vec3(0.,1.,0.5);\n    vec3 d = vec3(0.153,0.56,0.557);\n    \n    // Slightly change frequency from 6.28318 (2Ï€) to something like 5.5 to alter the pattern.\n    return a + b * cos(10. * (c * t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n  \n       \n    for (float i = 0.0; i < 5.0;++i, uv*=refract(uv.xy,uv.yx, cos(iTime))+length(uv)){\n        // Introduce a slight rotation that depends on time and iteration\n        float angle = iTime * 0.5 + i * 0.5*length(uv0) + i * 0.4;\n        uv+=reflect(uv,uv);\n         uv.x+=cos(iTime);\n    uv.y+=sin(iTime);\n        // Apply the fract as usual but with the rotated uv\n        uv = fract(uv * 2.5) - 0.5;\n mat2 rot = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n       \n     \n        float d = length(uv) * exp(-length(uv0));\n        vec3 col = palette(length(uv0) + i * 0.4 + iTime * 0.4);\n        \n        d = sin(d * 8.0 + iTime) / 8.0;\n        d = abs(d);\n        d = pow(0.01 / d, 1.2);\n        \n        finalColor += col * d;\n    }\n\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lfVBDd","date":"1734600757","viewed":106,"name":"spherical remake of ","username":"nayk","description":"remake https://www.shadertoy.com/view/XfKBDt","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""}}