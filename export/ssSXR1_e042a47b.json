{"ver":"0.1","info":{"id":"ssSXR1","date":"1619632447","viewed":41,"name":"Don't touch it","username":"Synfoxic","description":"I'll just touch it real quick...","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["notserious"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100    // int\n#define MAX_DIST 100.    // float\n#define SURF_DIST .01\n\nfloat GetDist(vec3 p) {\n    vec4 s = vec4(0., 1.8, 8, 1.);\n    \n    float sphereDist = length(p-s.xyz)-s.w;\n    float planeDist= p.y;\n    \n    float d = min(sphereDist, planeDist);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    for(int i = 0; i<MAX_STEPS; i++){\n        vec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if (dO > MAX_DIST || dS < SURF_DIST) break;\n    }    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0.);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy), \n        GetDist(p-e.yxy), \n        GetDist(p-e.yyx));\n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0., 8., 2.);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*50.;\n    vec3 l = normalize(lightPos * p);\n    vec3 n = GetNormal(p);\n    \n    float dif = dot(n, l);      // clamp(dot(n, l), 0., 1.) for more complicated mats, where it could go below 0\n    float d = RayMarch(p+n*SURF_DIST, l);    // SURF_DIST*2. to eliminate srew-up\n    if (d < length(lightPos-p)) dif *=.3 + smoothstep(0., 10., 0.);\n    dif += clamp(dot(n, l), 0., 2.);\n    return dif;\n   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(0., 1., 0.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.5));\n\n    float d = RayMarch(ro, rd);\n    d += RayMarch(rd, ro);\n    //d += RayMarch(ro, rd);\n\n    vec3 p = ro + rd * d;\n    p += 1.;\n    p /= 5.;\n   \n    float dif = GetLight(p);    // \"Diffuse Light\"\n    \n    col = vec3(dif);\nfragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}