{"ver":"0.1","info":{"id":"tds3Ws","date":"1547855171","viewed":920,"name":"int-in-float precision issues II","username":"iq","description":"For x and y integers, but floating point operations, white pixels mark where (x/y)*y != x. See Fabrice's [url]https://www.shadertoy.com/view/WdsGDX[/url]","likes":11,"published":3,"flags":0,"usePreview":0,"tags":["2d","precision","ieee","float"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Similar test to Fabrice's: https://www.shadertoy.com/view/WdsGDX\n//\n// With x and y integers and floating point representation and operations,\n// white pixels mark where (x/y)*y != x\n\n\n#define ZERO float(min(iFrame,0))\n\nvoid mainImage( out vec4 c, vec2 f )\n{\n    vec2 p = floor(f+0.5);   // Pick two numbers, call them x and y,\n                             //\n    float x = p.x;           // Now, take x,\n    x /= p.y;                // divide it by y,\n    x += ZERO;               // add nothing to it (prevents compiler optimizing things away)\n    x *= p.y;                // and finally multiply it by y.\n                             // At this point we'd like x to have its original value, \n    c = vec4( x!=p.x );      // but it won't,\n}","name":"Image","description":"","type":"image"}]}