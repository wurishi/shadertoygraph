{"ver":"0.1","info":{"id":"wlfBRl","date":"1597425852","viewed":41,"name":"Control point template","username":"vlequang","description":"Just a template, for a shader with two points and a control point.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["template"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float point(vec2 uv, vec2 pt) {\n    return distance(pt, uv);\n}\n\nvec4 draw(vec4 originalColor, float dist, vec4 color) {\n    vec4 col = (1. - smoothstep(.005, .02, dist)) * color;\n\treturn max(originalColor, col);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xx;\n    vec4 m = iMouse / iResolution.xxxx;\n    \n    vec4 color = vec4(0.);\n    \n    vec2 pt1 = vec2(.3, .3);\n    vec2 pt2 = vec2(.7, .3);\n    \n    color = draw(color, point(uv, pt1), WHITE);\n    color = draw(color, point(uv, pt2), WHITE);\n    color = draw(color, point(uv, m.xy), RED);\n    \n    \n    \n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define RED vec4(1., 0., 0., 1.)\n#define WHITE vec4(1.)","name":"Common","description":"","type":"common"}]}