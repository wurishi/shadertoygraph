{"ver":"0.1","info":{"id":"XdGXDh","date":"1463959218","viewed":771,"name":"Predator Thermal Vision (II)","username":"maldicion069","description":"Simulating Predator Thermal Vision (not perfect)\nSecond version with CRT","likes":10,"published":1,"flags":2,"usePreview":0,"tags":["crt","postprocess","webcam","thermal","predator"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// CRT code from https://www.shadertoy.com/view/MsXGD4\n\nvec3 thermal_vision(in vec3 color) {\n    vec3 colors[3];\n    colors[0] = vec3(0.0, 0.0, 1.0);\n    colors[1] = vec3(1.0, 1.0, 0.0);\n    colors[2] = vec3(1.0, 0.0, 0.0);\n    float luminance = dot(vec3(0.40, 0.38, 0.25), color);\n    if(luminance < 0.5) {\n    \tcolor = mix(colors[0], colors[1], luminance / 0.5);\n    } else {\n    \tcolor = mix(colors[1], colors[2], (luminance - 0.5) / 0.5);   \n    }\n    return color;\n}\n\nfloat scanline(vec2 uv) {\n\treturn sin(iResolution.y * uv.y * 0.7 - iTime * 10.0);\n}\n\nfloat slowscan(vec2 uv) {\n\treturn sin(iResolution.y * uv.y * 0.02 + iTime * 6.0);\n}\n\nvec2 colorShift(vec2 uv) {\n\treturn vec2(\n\t\tuv.x,\n\t\tuv.y + sin(iTime)*0.02\n\t);\n}\n\nfloat noise(vec2 uv) {\n\treturn clamp(texture(iChannel1, uv.xy + iTime*6.0).r +\n\t\ttexture(iChannel1, uv.xy - iTime*4.0).g, 0.96, 1.0);\n}\n\n// from https://www.shadertoy.com/view/4sf3Dr\n// Thanks, Jasper\nvec2 crt(vec2 coord, float bend) {\n\t// put in symmetrical coords\n\tcoord = (coord - 0.5) * 2.0;\n\n\tcoord *= 0.5;\t\n\t\n\t// deform coords\n\tcoord.x *= 1.0 + pow((abs(coord.y) / bend), 2.0);\n\tcoord.y *= 1.0 + pow((abs(coord.x) / bend), 2.0);\n\n\t// transform back to 0.0 - 1.0 space\n\tcoord  = (coord / 1.0) + 0.5;\n\n\treturn coord;\n}\n\nvec2 colorshift(vec2 uv, float amount, float rand) {\n\t\n\treturn vec2(\n\t\tuv.x,\n\t\tuv.y + amount * rand * sin(uv.y * iResolution.y * 0.12 + iTime)\n\t);\n}\n\nvec2 scandistort(vec2 uv) {\n\tfloat scan1 = clamp(cos(uv.y * 2.0 + iTime), 0.0, 1.0);\n\tfloat scan2 = clamp(cos(uv.y * 2.0 + iTime + 4.0) * 10.0, 0.0, 1.0) ;\n\tfloat amount = scan1 * scan2 * uv.x; \n\t\n\tuv.x -= 0.05 * mix(texture(iChannel1, vec2(uv.x, amount)).r * amount, amount, 0.9);\n\n\treturn uv;\n\t \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color = texture(iChannel0, uv).rgb;\n    color.rgb = thermal_vision(color.rgb);\n    \n\tvec2 sd_uv = scandistort(uv);\n\tvec2 crt_uv = crt(sd_uv, 2.0);\n    \n    vec4 rand = texture(iChannel1, vec2(iTime * 0.01, iTime * 0.02));\n    \n    color.r = texture(iChannel0, crt(colorshift(sd_uv, 0.025, rand.r), 2.0)).r;\n\tcolor.g = texture(iChannel0, crt(colorshift(sd_uv, 0.01, rand.g), 2.0)).g;\n\tcolor.b = texture(iChannel0, crt(colorshift(sd_uv, 0.024, rand.b), 2.0)).b;\t\n\t\t\n\tvec3 scanline_color = vec3(scanline(crt_uv));\n\tvec3 slowscan_color = vec3(slowscan(crt_uv));\n\t\n\tfragColor.rgb = mix(color, mix(scanline_color, slowscan_color, 0.5), 0.05) * noise(uv);\n    \n    fragColor = vec4(thermal_vision(fragColor.rgb), 1.0);\n}","name":"Image","description":"","type":"image"}]}