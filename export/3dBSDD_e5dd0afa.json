{"ver":"0.1","info":{"id":"3dBSDD","date":"1553754720","viewed":107,"name":"Grow object","username":"edo_m18","description":"Grow object test.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","grow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA 2\n\nconst vec3 light = normalize(vec3(0.77));\nconst vec3 amblight = vec3(0.05);\n\nstruct Surface\n{\n    float dist;\n    vec3 color;\n    bool isGrow;\n};\n    \nSurface near(Surface a, Surface b)\n{\n    if (a.dist < b.dist)\n    {\n        return a;\n    }\n    else\n    {\n        return b;\n    }\n}\n\nfloat dist_sphere(in vec3 p, in vec3 offset)\n{\n    return length(p - offset) - 1.0;\n}\n\nfloat dist_box(in vec3 p, in vec3 offset, in vec3 b)\n{\n    vec3 d = abs(p - offset) - b;\n    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n}\n\nfloat dist_plane(in vec3 p)\n{\n    const vec4 n = vec4(0, 1.0, 0, 1.0);\n    return dot(n.xyz, p) + n.w;\n}\n\nconst Surface NO_HIT = Surface(1e+30, vec3(0.0), false);\n\nSurface emitSurface = NO_HIT;\n\nSurface dist_func(in vec3 p)\n{\n    // Grow object\n    // float d1 = dist_sphere(p, vec3(0, 3.5, 0));\n    float d1 = dist_box(p, vec3(0, 2.5, 0), vec3(0.5));\n    Surface grow = Surface(d1, vec3(1.0, 0.0, 0.0), true);\n    \n    emitSurface = near(grow, emitSurface);\n        \n    float d2 = dist_plane(p);\n    Surface plane = Surface(d2, vec3(0.2), false);\n    \n    vec3 q = p;\n    q.xz = mod(q.xz, vec2(8.0, 4.0)) - vec2(4.0, 2.0);\n    float d3 = dist_sphere(q, vec3(0.0));\n    Surface sphere1 = Surface(d3, vec3(0.8), false);\n    \n    return near(near(grow, plane), sphere1);\n}\n\nvec3 getNormal(in vec3 p)\n{\n    const vec2 d = vec2(0.01, 0.0);\n    return normalize(vec3(dist_func(p + d.xyy).dist - dist_func(p - d.xyy).dist,\n                          dist_func(p + d.yxy).dist - dist_func(p - d.yxy).dist,\n                          dist_func(p + d.yyx).dist - dist_func(p - d.yyx).dist));\n}\n\nmat3 camera(in vec3 ro, in vec3 ta)\n{\n    const vec3 up = vec3(0, 1.0, 0);\n    vec3 cw = normalize(ta - ro);\n    vec3 cu = normalize(cross(cw, up));\n    vec3 cv = normalize(cross(cu, cw));\n    return mat3(cu, cv, cw);\n}\n\nvec3 render(vec3 ray, vec3 p)\n{\n    Surface surf;\n    \n    for (int i = 0; i < 100; i++)\n    {\n        surf = dist_func(p);\n        \n        if (surf.dist < 0.001)\n        {\n            break;\n        }\n        \n        p += ray * surf.dist;\n\t}\n    \n    vec3 col = vec3(0.0);\n    \n    if (surf.dist < 0.001)\n    {\n        col = surf.color;\n        \n        if (!surf.isGrow)\n        {\n            vec3 n = getNormal(p);\n            float diff = dot(n, light);\n            col *= diff;\n        }\n    }\n    else\n    {\n        col = mix(vec3(0.03, 0.06, 0.05), vec3(0.05, 0.1, 0.2), ray.y);\n    }\n    \n    float k = 1.5;\n    vec3 emit = pow(emitSurface.dist + 2.0, -k) * emitSurface.color;\n    col += emit + amblight;\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float camDist = 8.0;\n    float sp = iTime * 0.5;\n    float x = sin(sp) * camDist;\n    float y = sin(sp) + 3.0;\n    float z = cos(sp) * camDist;\n    \n    vec3 ro = vec3(x, y, z);\n    vec3 ta = vec3(0, 1.0, 0);\n    \n    mat3 c = camera(ro, ta);\n\n    vec3 tot = vec3(0.0);\n    \n    for (int m = 0; m < AA; m++)\n    {\n        for (int n = 0; n < AA; n++)\n        {\n            vec2 o = vec2(float(m), float(n)) / float(AA);\n            vec2 uv = ((fragCoord + o) * 2.0 - iResolution.xy) / iResolution.y;\n    \t\tvec3 ray = c * normalize(vec3(uv, 1.25));\n    \t\tvec3 p = ro;\n        \n            vec3 col = render(ray, p);\n            tot += col;\n        }\n    }\n    \n    tot /= float(AA * AA);\n    \n    // gamma\n    tot = pow(tot, vec3(0.4545));\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv *= 1.0 - uv.yx;\n    float vig = uv.x * uv.y * 30.0;\n    vig = pow(vig, 0.1);\n    \n    fragColor = vec4(tot * vig, 1.0);\n}","name":"Image","description":"","type":"image"}]}