{"ver":"0.1","info":{"id":"4cSXWR","date":"1706180876","viewed":75,"name":"binary tiling zoom v2","username":"sepia_sempervirens","description":"Simple infinite zoom out of (or into) the binary tiling, now 3-colored. I wonder if there exists any single multi-colored tile of finite size that can reproduce this pattern?\nhttps://en.wikipedia.org/wiki/Binary_tiling","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","loop","binarytiling"],"hasliked":0,"parentid":"McBSRD","parentname":"binary tiling zoom v1"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// time, in seconds, that it takes for the layer positions to repeat\n// change this to a negative number to zoom in instead of out\nconst float PERIOD = 1.6;\nconst float ORIGIN_X_POS = 0.333;\n\nconst vec4 PALETTE[3] = vec4[] (\n    vec4(0.651, 0.161, 0.051, 1),\n    vec4(0.949, 0.718, 0.020, 1),\n    vec4(0.016, 0.467, 0.749, 1)\n);\n\nvec4 tileColor( int x, int y )\n{\n    if (bool(y % 2)) x = -x - 1;\n    if (x < 0) x--;\n    return PALETTE[x % 3];\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    // use mod() to make sure that we don't get unreasonably large values\n    // of exp2(cycleProgress)\n    // the cycle length has to be divisible by 2\n    float cycleProgress = mod(iTime / PERIOD, 2.0);\n    uv.x -= ORIGIN_X_POS;\n    uv *= exp2(cycleProgress);\n    \n    float tileY = floor(log2(uv.y));\n    float tileWidth = exp2(tileY);\n    \n    int tileX = int(floor(uv.x / tileWidth));\n    fragColor = tileColor(tileX, int(tileY));\n}\n\n","name":"Image","description":"","type":"image"}]}