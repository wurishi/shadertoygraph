{"ver":"0.1","info":{"id":"7ssXRM","date":"1618740900","viewed":34,"name":"doroushar","username":"kiril313","description":"n","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["lol"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(2, 4,-9);//координаты камеры\n\nconst vec3 LIGHT1_POS = vec3(-5, 2, 3);//координаты источника света\nconst float LIGHT1_RADIUS = 0.4;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 0.8);\n\nconst vec3 LIGHT2_POS = vec3(3, 2, -2);//координаты источника света\nconst float LIGHT2_RADIUS = 0.4;\nconst vec3 LIGHT2_COLOR = vec3(0.2, 0.8, 0.4);\nvec3 randDir;\n\nfloat triple(vec3 v1, vec3 v2, vec3 v3) {\nreturn dot(v1, cross(v2, v3));\n}\nconst float EPS = 1e-3;\nfloat tracSq(vec3 pos, vec3 dir, vec3 vert[4], vec3 centre, out vec3 norm, out vec2 coords) {\n    vec3 d1 = vert[1] - vert[0];\n    vec3 d2 = vert[2] - vert[0];\n    norm = normalize(cross(d1, d2));\n    vec3 d0 = pos - vert[0];\n    float a = triple(dir, d1, d2);\n    if (a == 0.0) return INF;\n    float t = - triple(d0, d1, d2) / a;\n    if (t < 0.0) return INF;\n    \n    vec3 worldPos = pos + t * dir;\n    \n    d0 = worldPos - vert[0];\n    vec3 d3 = vert[3] - vert[0];\n    float c1 = dot(d1, d0) / dot(d1, d1);\n    float c3 = dot(d3, d0) / dot(d3, d3);\n    if (c1 < 0.0 || c1 > 1.0 || c3 < 0.0 || c3 > 1.0) return INF;\n    \n    if (dot(vert[0] + 0.01 * norm - centre, vert[0] + 0.01 * norm - centre) < dot(vert[0] - centre, vert[0] - centre)) {\n        norm = -norm;\n    }\n    coords = vec2(trunc(c1 * 16.0), trunc(c3 * 16.0));\n    return t;\n}\nint CUBE_FACE[6 * 4] = int[6 * 4]\n(0, 1, 3, 2, \n0, 1, 5, 4, \n1, 3, 7, 5, \n3, 2, 6, 7, \n2, 0, 4, 6, \n4, 5, 7, 6);\n\n\nfloat traceCube(vec3 pos, vec3 dir, float size, vec3 centre, out vec3 norm/*, out vec2 coords*/) {\n    vec3 CUBE_VERT[8] = vec3[8]\n    (vec3(-1, -1, -1) * size + centre,\n    vec3(-1, -1, 1) * size + centre,\n    vec3(1, -1, -1) * size + centre,\n    vec3(1, -1, 1) * size + centre,\n    vec3(-1, 1, -1) * size + centre,\n    vec3(-1, 1, 1) * size + centre,\n    vec3(1, 1, -1) * size + centre,\n    vec3(1, 1, 1) * size + centre);\n    \n    vec3 cur_norm;\n    vec2 cur_coords;\n    float t = INF, cur_t;\n    for (int i = 0; i < 6; i++) {\n        vec3 cur_face[4];\n        for (int j = 0; j < 4; j++) {\n            cur_face[j] = CUBE_VERT[CUBE_FACE[i * 4 + j]];\n        }\n        cur_t = tracSq(pos, dir, cur_face, centre, cur_norm, cur_coords);\n        if (cur_t < t) {\n            t = cur_t;\n            norm = cur_norm;\n            //coords = cur_coords;\n        }\n    }\n    \n    return t;\n}\n\nstruct Triangle {\n    vec3 pos[3];\n    //vec3 color;\n    vec3 normal;\n    //float specular;\n};\n\nconst uint TRIANGLES_COUNT = 4u;\nTriangle TRIANGLES[TRIANGLES_COUNT];\n\n\nfloat ray_triangle_intersection(Triangle t, vec3 origin, vec3 dir) {\n    // dot(origin + dir * d - t.pos[0], t.normal) == 0\n    // dot(origin - t.pos[0], t.normal) + dot(dir, t.normal) * d == 0\n    // d = dot(t.pos[0] - origin, t.normal) / dot(dir, t.normal);\n    float normalViewAngle = dot(dir, t.normal);\n    if (abs(normalViewAngle) < EPS)\n        return INF;\n    float d = dot(t.pos[0] - origin, t.normal) / normalViewAngle;\n    if (d < 0.0)\n        return INF;\n    vec3 hitPos = origin + dir * d;\n    vec3 edges[3] = vec3[3](\n        t.pos[1] - t.pos[0],\n        t.pos[2] - t.pos[1],\n        t.pos[0] - t.pos[2]\n    );\n    float square = length(cross(edges[0], edges[1]));\n    vec3 toHitVecs[3] = vec3[3](\n        hitPos - t.pos[0],\n        hitPos - t.pos[1],\n        hitPos - t.pos[2]\n    );\n    float testSq[3] = float[3](\n        length(cross(toHitVecs[0], edges[0])),\n        length(cross(toHitVecs[1], edges[1])),\n        length(cross(toHitVecs[2], edges[2]))\n    );\n    if (abs(square - testSq[0] - testSq[1] - testSq[2]) < EPS)\n        return d;\n    return INF;\n}\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-2.0 - pos.y) / dir.y;//координаты стола\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 169.0) {//радиус стола\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n//трассировка лучей стол\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r/2.0;//размеры сферы\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n// трассировка сферы\nfloat traceCylinder(vec3 pos, vec3 dir, float height, float radius, out vec3 normal) {\n    float t = (-height - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < radius) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - radius;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -height) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -height) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n//подставка\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 2.0, sphNorm);\n    return (sphT < dist);\n        \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, 1.5, 0.5, cylNorm);\n    return (cylT < dist);\n    \n    vec3 qubeNorm;\n    float qubeT = traceCube(pos, dir, 0.5, vec3(0.0, 0.0 , 0.0), qubeNorm);\n    return (qubeT < dist);\n    \n  \n               \n    return false;        \n    \n}\n//\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.7 : 10.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.7 : 30.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - 2.0;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nfloat MARCH_SIZE = 0.01;\nint MAX_STEPS = 50;\nvec3 FOG_COLOR = vec3(0.7, 0, 0.3);\nfloat ABSORPTION = 10.0;\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.8;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(ABSORPTION * (\n            texture(iChannel3, curPos * 0.1).r\n            + texture(iChannel3, curPos * 0.2).r\n            + texture(iChannel3, curPos * 0.4).r\n            + texture(iChannel3, curPos * 0.8).r\n            ) * 0.28 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(FOG_COLOR * 3. * totalAbs, 1.0 - opacity);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    TRIANGLES[0].pos = vec3[3](vec3(0.6, 0.25, 0.6), vec3(0.6, 0.25, -0.6), vec3(0,0.8,0));\n    TRIANGLES[1].pos = vec3[3](vec3(-0.6, 0.25, 0.6), vec3(0.6, 0.25, 0.6), vec3(0,0.8,0));\n    TRIANGLES[2].pos = vec3[3](vec3(-0.6, 0.25, -0.6), vec3(-0.6, 0.25, 0.6), vec3(0,0.8,0));\n    TRIANGLES[3].pos = vec3[3](vec3(0.6, 0.25, -0.6), vec3(-0.6, 0.25, -0.6), vec3(0,0.8,0));\n    for(uint i = 0u; i < TRIANGLES_COUNT; i++) {\n        TRIANGLES[i].normal = - normalize(\n            cross(TRIANGLES[i].pos[0] - TRIANGLES[i].pos[1], \n                  TRIANGLES[i].pos[1] - TRIANGLES[i].pos[2])\n        );\n    }\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(2, 2, 2);\n    float mult = 1.0;\n    \n    for (int i = 0; i < 10; ++i) {\n        bool cube = false;\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        vec3 sphNorm;\n        float sphT = traceSphere(curPos -vec3(0,0.5,0), curDir, 2.5, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            if (randVals.x < GLASS_R * 1.5) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(1, 1, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir,1.3,1.0 ,cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n       vec3 qubeNorm;\n        float qubeT = traceCube(curPos-vec3(0,0.5,0), curDir, 0.5, vec3(0.0, 0.0 , 0.0), qubeNorm);\n        if (qubeT < t && (randVals.x < 0.75)) {\n            t = qubeT;\n            normal = qubeNorm;\n            materialType = DIFFUSE;\n            vec3 worldPos = curPos + t * curDir;\n            color = texture(iChannel2, worldPos.xz * worldPos.y *5.0).rgb;\n        }\n       \n        for (uint i = 0u; i < TRIANGLES_COUNT; ++i) {\n                float hitDist = ray_triangle_intersection(TRIANGLES[i], curPos -vec3(0,0.7,0), curDir);\n                if ((hitDist < t) && (randVals.x < 0.75)) {\n                    cube = true;\n                    t = hitDist;\n                    materialType = DIFFUSE;\n                    normal = TRIANGLES[i].normal;\n                    vec3 worldPos = curPos + t * curDir;\n                    color = texture(iChannel2, (worldPos.xz * worldPos.y * 0.2 )).rgb;\n                }\n         }\n        if (t != INF) {\n            vec3 worldPos = curPos + t * curDir;\n            if (materialType == EMISSION) {\n                fragColor.rgb = color;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb += mult * computeLight(worldPos, color, normal);\n                fragColor.a = 0.5;\n                break;\n            } else if (materialType == REFLECTION) {\n                fragColor.rgb += computeLight(worldPos + t * curDir, color, normal) * mult;\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-3;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-5;\n                \n                vec4 fog = sampleFog(curPos - vec3(0,0.5,-0.2), curDir);\n                fragColor.rgb += fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n                \n                float tmp = n1;\n                n1 = n2;\n                n2 = tmp;\n            }\n        } else {\n            fragColor = mult*texture(iChannel1, curDir);\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}