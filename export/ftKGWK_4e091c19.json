{"ver":"0.1","info":{"id":"ftKGWK","date":"1638348864","viewed":91,"name":"logistic map prng","username":"callistabee","description":"simple dynamic prng based on the logistic map\n(https://en.wikipedia.org/wiki/Logistic_map)\n\nplay around with the seed to get different images but don't set it too high or low\nalso feel free to play around with the n map","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["chaos","prng","logisticmap","rng"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// analytic solution to the logistic map for r=4\n// https://en.wikipedia.org/wiki/Logistic_map#Solution_when_r_=_4\n// when theta is irrational, logisticR4(n, theta) is aperiodic with respect to n.\nfloat logisticR4(float n, float theta) {\n    float root = sin(exp2(n) * theta * radians(180.0));\n    return root*root;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // transform to viewport coordinates\n    vec2 uv = (fragCoord / iResolution.xy);\n    \n    // put your fav (x,y) -> n function here\n    float n = pow(sin(uv.x), sin(uv.y));\n    \n    // add a little jitter (remove for a static buffer)\n    n += sin(iTime);\n\n    // put a nice number here but don't make it too small or too big \n    float seed = 15.7;\n    \n    // make large, irrational theta (high entropy initial condition)\n    float theta = exp(seed);\n\n    // get pseudorandom value for current position\n    float v = logisticR4(n, theta);\n\n    // render\n    fragColor = vec4(v,v,v,1.0);\n}","name":"Image","description":"","type":"image"}]}