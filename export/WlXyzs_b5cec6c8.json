{"ver":"0.1","info":{"id":"WlXyzs","date":"1592743599","viewed":98,"name":"Plot function of two variables","username":"TobyBrull","description":"Plot a function of two variables. Use Mouse to rotate.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["function"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n// s along +x axis, t along -z axis.\n// returns function value in .x and\n// upper bound on differential in .y\n\n#define BOUNDARY 3.1415*2.0\nvec2 function(float s, float t) {\n    t += iTime;\n    return vec2(sin(s)*sin(t) + sin(s*2.0)*cos(s*2.0)*0.4, 2.0);\n}\n\n//#define BOUNDARY 1.0\n//vec2 function(float s, float t) {\n//    return vec2(s*s + t*t, 4.0);\n//}\n\nfloat GetDistBox(vec3 p, vec3 o, vec3 s) {\n    p = abs(p-o)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat GetDist(vec3 p) {\n    float h = 0.01;\n    float b1 = GetDistBox(p, vec3(BOUNDARY/2.0, 0.0, 0.0), vec3(BOUNDARY/2.0, h, h));\n    float b2 = GetDistBox(p, vec3(0.0, BOUNDARY/2.0, 0.0), vec3(h, BOUNDARY/2.0, h));\n    float b3 = GetDistBox(p, vec3(0.0, 0.0, BOUNDARY/2.0), vec3(h, h, BOUNDARY/2.0));\n    \n    vec2 f = function(p.x, -p.z);\n    float bf = (abs(f.x - p.y)-0.01)/f.y;\n    bf = max(bf, GetDistBox(p, vec3(0.0), vec3(BOUNDARY)));\n   \t\n    return min(b1, min(b2, min(b3, bf)));\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.0;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 eye, vec3 center, float z) {\n\tvec3 dir = normalize(center-eye);\n\tvec3 right = normalize(cross(dir, vec3(0,1,0)));\n    vec3 up = cross(right, dir);\n    vec3 c = dir*z;\n    return normalize(c + uv.x*right + uv.y*up);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y*2.0;\n\tvec2 m = (iMouse.xy-.5*iResolution.xy)/iResolution.y*2.0;\n    m.xy-=0.2;\n    \n    // Right-hand coordinate system, x - right, y - up, z - towards    \n    float pi = 3.1415;\n    float theta = -m.y*pi/2.0f;\n    float phi = -m.x*pi/2.0f;\n    vec3 ro = 3.0*vec3(sin(phi)*cos(theta), sin(theta), cos(phi)*cos(theta));\n    vec3 rc = vec3(0.0, 0.0, 0.0);\n    vec3 rd = GetRayDir(uv, ro, rc, 1.);\n\n    vec3 col = vec3(0);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 n = GetNormal(p);\n        \n    \tfloat dif = dot(n, normalize(vec3(1, 2, 3)))*0.5+0.5;\n    \tcol += dif;  \n    }\n    \n    col = pow(col, vec3(0.4545));\t// gamma correction\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}