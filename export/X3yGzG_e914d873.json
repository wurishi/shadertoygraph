{"ver":"0.1","info":{"id":"X3yGzG","date":"1717800569","viewed":41,"name":"Concentric Rings Sphere Texture","username":"gllama","description":"Learning slowly. Was trying to do equirect stuff but ended up with these animated concentric rings (when textured on a sphere). Still don't understand UV => Equirectangular projection but hey it's something. CC0-1.0 licensed ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["grid","texture","rings","sphere","cc0","equirectangular"],"hasliked":0,"parentid":"4Xy3RG","parentname":"Basic Grid Shader"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// üíç Concentric Rings Sphere Texture\n// License CC0-1.0\n#define PI 3.1415926535897932384626433832795\n#define TIME iTime\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n    // How often to draw lines \n    float interval =PI/40.;\n    // Line thiccness\n    float thicc = .005;\n\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy; \n    // Start with black\n    vec3 col = vec3(0,0,0);\n    \n    // Animated rings\n    float x = cos(uv.x*PI*2.+PI/2.)*cos(uv.y*PI+PI/2.);\n    float y = cos(uv.x*PI*2.+PI/2.)*sin(uv.y*PI+PI/2.);\n    float offset = mod(iTime/10.,PI);//(thicc/2.)-(interval/2.);\n    if(mod(x+offset,interval)<thicc){\n        col = vec3(1,0,1);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}