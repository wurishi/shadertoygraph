{"ver":"0.1","info":{"id":"4fG3WK","date":"1713516932","viewed":69,"name":"RayMarched_Sphere_Grimer?","username":"_carpeus","description":"Starting point sphere with Ambient, Diffuse and Specular lighting\n","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//const vec3 lightPos = vec3(2, 2, 2);\n\n// https://iquilezles.org/articles/smin/\nfloat smin(float a, float b, float k )\n{\n    k *= 1.0;\n    float r = exp2(-a/k) + exp2(-b/k);\n    return -k*log2(r);\n}\n\n// https://iquilezles.org/articles/distfunctions/\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat PlaneSDF(vec3 pos)\n{\n    return pos.y;\n}\n\nfloat SphereSDF(vec3 pos, float r)\n{\n    return length(pos)- r;\n}\n\nfloat Map(vec3 pos)\n{\n    vec3 so = pos - vec3(0, 2., 6); // scene offset\n    float r = 2. + -sin(10.*iTime + so.y*10.)/100. + sin(2.*iTime + so.x)/10.;\n    \n    float eye_left = SphereSDF(so - vec3(-0.5, 0.1, -2.3), .45);\n    float eye_right = SphereSDF(so - vec3(0.5, 0.1, -2.3), .45);\n    float mouth = SphereSDF(so - vec3(0.0, -1., -2.3), 0.4);\n    \n        float dist = opSmoothSubtraction(mouth, min(eye_right,min(eye_left, smin(SphereSDF(so, r), PlaneSDF(pos), 1.))), .5);\n    \n    return dist; \n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd) \n{\n    float d0 = 0.;\n    \n    for(int i = 0; i < 256; i++)\n    {\n        vec3 pos = ro + rd*d0;\n        \n        float d = Map(pos);\n        \n        d0 += d;\n        \n        if(d < 0.001 || d > 100.) break;\n    }\n    \n    return d0;\n}\n\nvec3 GetNormal(vec3 pos)\n{\n    float d = Map(pos);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        Map(pos-e.xyy),\n        Map(pos-e.yxy),\n        Map(pos-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetDifLight(vec3 pos, vec3 lightPos, vec3 difCol)\n{\n    vec3 lightDir = normalize(lightPos - pos);\n    vec3 norm = GetNormal(pos);\n    \n    float dif = clamp(dot(norm, lightDir), 0., 1.);\n    \n    return dif * difCol;\n}\n\n\nvec3 GetSpecularRef(vec3 pos, vec3 lightPos, vec3 ro, vec3 specCol)\n{\n    vec3 lightDir = normalize(lightPos - pos);\n    vec3 norm = GetNormal(pos);\n    vec3 viewSource = normalize(ro);\n    \n    vec3 refSource = 2.0*dot(norm, lightDir) * norm - lightDir;//reflect(-lightDir, norm); \n    refSource = normalize(refSource);\n    \n    float spec = clamp(dot(refSource, viewSource), 0., 1.);\n    spec = pow(spec, 100.);\n    \n    return spec * specCol;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 lightPos = vec3(0,2,3);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Origin to center\n    uv = uv*2.0-1.0;  \n    // Allow dynamic aspect ratio\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0,2,0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 pos = ro + rd*d;\n    \n    // lighting\n    vec3 baseCol = vec3(0,0,0);\n    vec3 ambient = vec3(0.05);\n    vec3 dif = GetDifLight(pos, lightPos, vec3(0.45, 0.5, 0.8));\n    vec3 specular = GetSpecularRef(pos, lightPos, ro, vec3(0,1,0));\n    \n    vec3 light = ambient + dif + specular;\n    \n    vec3 col = 0.01*d*baseCol + light;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}