{"ver":"0.1","info":{"id":"lfKyDW","date":"1731912379","viewed":88,"name":"Pixel Size Demonstration","username":"azeitmuth","description":"Pixel Size Demonstration","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["pixel","demonstration","size"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Screen resolution\n    vec2 resolution = iResolution.xy;\n    \n    // Normalize coordinates\n    vec2 uv = fragCoord / resolution;\n    \n    // Dynamic pixel size based on time\n    float pixelSize = 5.0 + 45.0 * abs(sin(iTime * 0.5));\n    \n    // Snap coordinates to pixel grid\n    vec2 pixelatedUV = floor(uv * pixelSize) / pixelSize;\n\n    // Clever visualization: Render a colorful grid pattern\n    vec3 color = vec3(sin(pixelatedUV.x * 10.0 + iTime), \n                      sin(pixelatedUV.y * 10.0 - iTime), \n                      cos(pixelatedUV.x * pixelatedUV.y * 20.0));\n                      \n    // Draw grid lines to emphasize pixel boundaries\n    float gridLineWidth = 0.02;\n    vec2 grid = fract(uv * pixelSize);\n    color *= smoothstep(0.0, gridLineWidth, grid.x) * smoothstep(0.0, gridLineWidth, grid.y);\n\n    // Output the final color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}