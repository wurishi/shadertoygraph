{"ver":"0.1","info":{"id":"stGfDy","date":"1665158114","viewed":140,"name":"Cellular Fractals","username":"MysteryPancake","description":"I made my own fractal using a 3x3 kernel, inspired by Conway's Game of Life","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["spiral","cellular","pattern","cell","buffer","kernel","gameoflife"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    // Stored as color, segment length, direction (radians), length until rotation\n    vec4 self = texelFetch(iChannel0, ivec2(fragCoord) / cycleCount, 0);\n    \n    // Colorize based on color, length and direction\n    fragColor = vec4(self.x, self.y * 0.1, self.z * 0.01, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float rand(vec2 p) {\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    if (iFrame % resetAfter == 0) {\n    \n        // Initialize values, stored as color, segment length, direction (radians), length until rotation\n        fragColor = vec4(ivec2(fragCoord) == ivec2(iResolution.xy * 0.5) / cycleCount, 0.0, 0.0, 32.0);\n        \n    } else {\n        \n        // Sample current pixel directly\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        \n        // Sample in a 3 x 3 kernel\n        for (int x = -1; x <= 1; ++x) {\n            for (int y = -1; y <= 1; ++y) {\n            \n                // Ignore self\n                if (x == 0 && y == 0) continue;\n                \n                // Sample neighbour\n                ivec2 pos = ivec2(x, y);\n                vec4 neighbour = texelFetch(iChannel0, ivec2(fragCoord) + pos, 0);\n                \n                // For some reason neighbour.x > 0.0 breaks\n                if (neighbour.x > fragColor.x) {\n                    \n                    // Find where each neighbour wants to move next\n                    ivec2 target = ivec2(round(sin(neighbour.z)), round(cos(neighbour.z)));\n                    \n                    // Neighbour wants to move to us, we have to update ourselves\n                    if (abs(pos.x - target.x) == 1 && abs(pos.y - target.y) == 1) {\n                    \n                        fragColor = neighbour; // Transfer properties from neighbour to us\n                        ++fragColor.y; // Increase segment length\n                        \n                        // Rotate when segment length > length until rotation\n                        if (fragColor.y > fragColor.w) {\n                            fragColor.y = 0.0; // New segment, reset segment length\n                            fragColor.w -= float(cycleCount); // Shrink spiral whenever we rotate\n                            fragColor.z += PI_2; // Rotate 90 degrees (PI/2 radians)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float PI_2 = 1.57079632679489661923;\nconst int resetAfter = 768;\n#define cycleCount (1 + iFrame / resetAfter)","name":"Common","description":"","type":"common"}]}