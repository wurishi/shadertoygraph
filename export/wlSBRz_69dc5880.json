{"ver":"0.1","info":{"id":"wlSBRz","date":"1598203742","viewed":141,"name":"Game of _life_","username":"surffer3d","description":"Game of life variant, to use tmp buffers","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["gamelife"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float BORN = 0.25;\nconst int SZ = 1;\t\t// Set to 0 to disable blur\n\nvec3 grade(vec2 uv) {\n    vec3 color = vec3(0.0f);\n    float f = texture(iChannel0, uv).r;\n    \n    if (f >= BORN) {\n        color = vec3(f);\n        if (f == 0.5)\n            color = vec3(1.0, 1.0, 0.0);\n        else if (f < 0.6)\n        \tcolor = vec3(0.0, 1.0, 0.0) * (f-BORN) / (0.5-BORN);\n        else if (f >= 0.7)\n            color = vec3(1.0, 0.0, 0.0) * (1.0-f)/0.3;\n    }\n    \n    return color;\n}\n\n\nfloat blurFactor(int sz, int i, int j) {\n    return float(sz - min(abs(i), abs(j)) + 1);\n}\n\nvec3 blurGrade(vec2 uv, vec2 iResolution) {\n    vec3 color = vec3(0.0);\n    vec2 inc = vec2(1.0) / iResolution;\n    float total = 0.0;\n    \n    for (int i=-SZ; i<=SZ; i++) {\n        for (int j=-SZ; j<=SZ; j++) {\n            float factor = blurFactor(SZ, i, j);\n            total += factor;\n            vec2 offset = vec2(i,j) * inc;\n            color += grade(uv+offset)*factor;\n        }\n    }\n    \n    return color / total;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = vec4(blurGrade(uv, iResolution.xy),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float BORN = 0.25;\n    \nint isCell(vec2 uv) {\n    return int(step(0.5, texture(iChannel0, uv).r));\n}\n\nfloat getCell(vec2 uv) {\n    return texture(iChannel0, uv).r;\n}\n    \n\nint neighbours(vec2 uv) {\n    vec2 inc = vec2(1.0) / iResolution.xy;\n    \n    int total = int(\n        isCell(uv+vec2(-inc.x,inc.y)) +\n        isCell(uv+vec2(0.,inc.y)) +\n        isCell(uv+vec2(inc.x,inc.y)) +\n        \n        isCell(uv+vec2(inc.x,0.)) +\n        isCell(uv+vec2(-inc.x,0.0)) +\n        \n        isCell(uv+vec2(-inc.x,-inc.y)) +\n        isCell(uv+vec2(0.,-inc.y)) +\n        isCell(uv+vec2(inc.x,-inc.y))\n    );\n   \n    \n    return total;\n}\n\nfloat generateFirstGeneration(vec2 uv) {\n    uv -= vec2(0.5);\n    float factor = (0.5-abs(uv.x*uv.y));\n    return 0.5 * step(0.49,fract(sin(dot(uv,vec2(12.9898,78.233))) * 43758.5453) * factor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float cell = getCell(uv);\n    bool is_cell = isCell(uv) > 0;\n    int N = neighbours(uv);\n    \n    float col = cell;\n    if ((col > 0.0 && col < 0.5) || col >= 0.7)\n        col += 0.001;\n    \n    if (is_cell) {\n        if ((N < 2 || N > 3) && col<0.7)\n        \tcol = 0.7;\n    }\n    else {\n        if (N == 3 && cell < BORN)\n            col = 0.5;\n    }\n    \n    if (col > 0.9)\n        col = 0.0;\n    \n    if (ivec2(fragCoord.xy) == ivec2(iMouse.xy) && iMouse.z > 0.0)\n        col = BORN;\n    \n    if (iFrame == 0)\n        col = generateFirstGeneration(uv);\n    \n    fragColor = vec4(vec3(col),1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}