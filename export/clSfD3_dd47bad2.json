{"ver":"0.1","info":{"id":"clSfD3","date":"1694537766","viewed":37,"name":"noise,hash,test","username":"calc","description":"grid noise tile","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Function declarations\nfloat hash11(float p);\nfloat hash21(vec2 p);\nfloat noise(float x);\nfloat noise(vec2 x);\nfloat noise(vec3 x);\n\nconst float TILE_SIZE = 50.0;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.0);\n    float t = iTime;\n    \n\n    vec2 suv = uv*TILE_SIZE;\n    vec2 id = floor(suv);\n    vec2 f = suv-id.x;\n    vec2 p = (id+0.5)/TILE_SIZE;\n    vec2 d = f-0.5;\n    float length = noise(id+t);\n\n    //make line\n        // uv *= vec2(length*7.0);\n    for (int i=0; i<3; i++){\n        uv += vec2(length*7.0+id.y*0.3);\n        // float n = fbm(p+t);\n        // float w = smoothstep(0.4,0.0,abs(d.x))*smoothstep(0.4,0.0,abs(d.y));\n        // col += vec3(1.0)*w*n;\n        col += vec3(length, uv.x, uv.x-length);\n        col *= noise(t);\n    }\n    //time transition\n    fragColor = vec4(col,1.0);\n\n\n\n}\n\n// Precision-adjusted variations of https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\nfloat hash21(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }\n\n\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(hash11(i), hash11(i + 1.0), u);\n}\nfloat noise(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n\n\t// Four corners in 2D of a tile\n\tfloat a = hash21(i);\n    float b = hash21(i + vec2(1.0, 0.0));\n    float c = hash21(i + vec2(0.0, 1.0));\n    float d = hash21(i + vec2(1.0, 1.0));\n\n    // Simple 2D lerp using smoothstep envelope between the values.\n\t// return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tmix(c, d, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tsmoothstep(0.0, 1.0, f.y)));\n\n\t// Same code, with the clamps in smoothstep and common subexpressions\n\t// optimized away.\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat noise(vec3 x) {\n    const vec3 step = vec3(110, 241, 171);\n\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n\n    // For performance, compute the base input to a 1D hash from the integer part of the argument and the \n    // incremental change to the 1D based on the 3D -> 1D wrapping\n    float n = dot(i, step);\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(mix( hash11(n + dot(step, vec3(0, 0, 0))), hash11(n + dot(step, vec3(1, 0, 0))), u.x),\n                   mix( hash11(n + dot(step, vec3(0, 1, 0))), hash11(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\n               mix(mix( hash11(n + dot(step, vec3(0, 0, 1))), hash11(n + dot(step, vec3(1, 0, 1))), u.x),\n                   mix( hash11(n + dot(step, vec3(0, 1, 1))), hash11(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\n","name":"Image","description":"","type":"image"}]}