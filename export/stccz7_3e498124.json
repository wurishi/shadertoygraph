{"ver":"0.1","info":{"id":"stccz7","date":"1659516151","viewed":142,"name":"SIGGRAPH","username":"Reynolds","description":"They once dared to reject my paper.\n\nCongratulations!","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["logo","reproduction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//stolen from https://iquilezles.org/articles/distfunctions2d/\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\nvec2 rotate(float angle, vec2 p)\n{\n  float s = sin(angle);\n  float c = cos(angle);\n\n  // rotate point\n  float xnew = p.x * c - p.y * s;\n  float ynew = p.x * s + p.y * c;\n\n  return vec2(xnew, ynew);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat shell(vec2 p) \n{\n    float d = length(p) - 0.25;\n    d = max(d, -sdEllipse(p, vec2(0.25, 0.1)));\n    \n    float b = sdBox(p + vec2(0.0, 0.25), vec2(0.5, 0.25));\n\n    d = max(d, -b); \n\n    return d;\n}\n\nfloat insideShell(vec2 p) \n{\n    float d = sdEllipse(p, vec2(0.25, 0.1));\n    d = max(d, -sdEllipse(p + vec2(-0.03, 0.02), vec2(0.2175, 0.0825)));\n\n    return d;\n}\n\nvec2 opunion(vec2 a, vec2 b) \n{\n    return a.x < b.x ? a : b;\n}\n\nvec3 grad(float l, float m, float r, float t, vec3 a, vec3 b) {\n    vec3 col = a;\n    \n    if(t > l && t < m) {\n        col = mix(a, b, smoothstep(0., 1., (t - l) / (m - l)));\n    } else if(t > m && t < r) {\n        col = mix(b, a, smoothstep(0., 1., (t - m) / (r - m)));\n    } \n    \n    return col;\n}\n\nvec3 gamma(vec3 c) {\n    return pow(c, vec3(2.2));\n}\n\nvec3 material(float id, float x) {\n    vec3 col_top_a = gamma(vec3(70.0, 131.0, 186.0) / 255.); \n    vec3 col_top_b = gamma(vec3(154.0, 180.0, 215.0) / 255.); \n    \n    \n    vec3 col_bot_a = gamma(vec3(169., 4., 50. ) / 255.);\n    vec3 col_bot_b = gamma(vec3(208., 129., 125.) / 255.); \n    \n\n    vec3 col = vec3(1.0);\n    if(id < 0.5) {\n        col = grad(0.0, 0.3, 0.6, x, col_top_a, col_top_b);\n    } else if(id < 1.5) {\n        col = grad(0.1, 0.9, 1., x, col_top_a, col_top_b);\n    } else if(id < 2.5) {\n        col = grad(0.1, 0.3, 0.6, x, col_bot_a, col_bot_b);\n    } else {\n        col = grad(0.1, 0.5, 0.8, x, col_bot_a, col_bot_b);\n    }\n\n    return col;\n}\n\nvec2 logo(vec2 p) {\n    p = rotate(-0.56, p);\n    vec2 q = p * vec2(-1., -1.);\n\n    vec2 ta = vec2(0.0, 0.04 + 0.01*sin(iTime));\n    vec2 t = vec2(shell(p - ta), 0.0);\n    vec2 s = vec2(insideShell(p - ta), 1.0);\n    \n    vec2 t2 = vec2(shell(q - ta), 2.0);\n    vec2 s2 = vec2(insideShell(q -ta), 3.0);\n    \n    vec2 d = opunion(t, s);   \n    d = opunion(d, t2);\n    d = opunion(d, s2);\n\n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 tuv = uv - vec2(0.875, 0.5);\n\n    vec3 col = vec3(1.0);\n    \n    vec2 c = vec2(0., 0.5);\n\n    vec2 d = logo(tuv);\n       \n    vec2 ruv = rotate(-0.56, uv);\n    if(d.x < 0.0) {\n        col = material(d.y, ruv.x - 0.5);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"int _N = 3;\n#define mainImage mainImage0(out vec4 O, vec2 U);        \\\nvoid mainImage(out vec4 O, vec2 U) {                     \\\n    vec4 o; O = vec4(0);                                 \\\n    for (int k=0; k < _N*_N; k++ )                       \\\n      { mainImage0(o,U+vec2(k%_N-_N/2,k/_N-_N/2)/float(_N)); O += o; }  \\\n    O /= float(_N*_N);                                   \\\n    O = pow( O, vec4(1./2.2) );        /* to sRGB */     \\\n} \\\nvoid mainImage0","name":"Common","description":"","type":"common"}]}