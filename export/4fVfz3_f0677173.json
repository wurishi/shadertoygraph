{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n\n    vec2 uv = fragCoord/iResolution.xx * 3.5;\n\n    float t = iTime * 5.;\n    float a = 0.81 + 0.03 * sin(t/50.);\n    float b = 0.62 + 0.025 * sin(t/41.);\n    float c = 0.52 + 0.02 * sin(t/37.);\n    float d = 0.47 + 0.017 * sin(t/67.);\n    float e = 0.43 + 0.015 * sin(t/31.);\n    float z = 0.44 + 0.02 * sin(t/77.);\n    float y = 0.35 + 0.016 * sin(t/39.);\n    \n    vec3 rects[20];\n    \n    rects[0] = vec3(a, 0., 0.);\n    rects[1] = vec3(b, 0., a);\n    rects[2] = vec3(c, 0., a + b);\n    rects[3] = vec3(d, 0., a + b + c);\n    rects[4] = vec3(e, 0., a + b + c + d);\n    rects[5] = vec3(z, a, 0.);\n    rects[6] = vec3(a - b, b, a);\n    rects[7] = vec3(b - c, c, a + b);\n    rects[8] = vec3(c - d, d, a + b + c);\n    rects[9] = vec3(d - e, e, a + b + c + d);\n    rects[10] = vec3(z, a + z, 0.);\n    rects[11] = vec3(2.*a - b - z, a, z);\n    rects[12] = vec3(-a + 3.*b - c, b, 2.*a - b);\n    rects[13] = vec3(-b + 3.*c - d, c, a + 2.*b - c);\n    rects[14] = vec3(-c + 3.*d - e, d, a + b + 2.*c - d);\n    rects[15] = vec3(y, a + z + z, 0.);\n    rects[16] = vec3(-2.*a + b + 2.*z + z, 3.*a - b - z, z);\n    rects[17] = vec3(4.*a - 5.*b + c - z, -a + 4.*b - c, 2.*a - b);\n    rects[18] = vec3(-a + 5.*b - 5.*c + d, -b + 4.*c - d, a + 2.*b - c);\n    rects[19] = vec3(-b + 5.*c - 5.*d + e, -c + 4.*d - e, a + b + 2.*c - d);\n    \n    \n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    for(int i = 0; i < 20; i++) {\n        float x = rects[i][2];\n        float y = rects[i][1];\n        float s = rects[i][0];\n        if (x <= uv.x && \n                uv.x < x + s &&\n            y <= uv.y &&\n                uv.y < y + s) {\n            col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0+i,2+i,4+i));\n        }\n    }\n    \n\n    // Time varying pixel color\n\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4fVfz3","date":"1734288978","viewed":36,"name":"Irregular square tiling","username":"m1o9n6s8t8e3r","description":"An irregular square tiling inspired by Dan Piker https://mathstodon.xyz/@Danpiker/113289848539819167","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tiling"],"hasliked":0,"parentid":"","parentname":""}}