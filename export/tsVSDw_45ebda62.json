{"ver":"0.1","info":{"id":"tsVSDw","date":"1574199671","viewed":690,"name":"AMD FidelityFX CAS","username":"tomtomp","description":"AMD FidelityFX CAS sharpening\n\nThis is NOT my work, it was copied from the github  repository of the original project: https://github.com/GPUOpen-Effects/FidelityFX/\nFor the AMD presentation see: https://gpuopen.com/gaming-product/fidelityfx/","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sharpening"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define A_GPU\n#define A_GLSL\n\nuint bitfieldExtract(uint val, int off, int size) {\n    uint mask = uint((1 << size) - 1);\n    return uint(val >> off) & mask;\n}\n\nuint bitfieldInsert(uint a, uint b, uint c, uint d)\n{\n  uint mask = ~(0xffffffffu << d) << c;\n  mask = ~mask;\n  a &= mask;\n  return a | (b << c);\n}\n\n#ifdef A_CPU\n // Supporting user defined overrides.\n #ifndef A_RESTRICT\n  #define A_RESTRICT __restrict\n #endif\n//------------------------------------------------------------------------------------------------------------------------------\n #ifndef A_STATIC\n  #define A_STATIC static\n #endif\n//------------------------------------------------------------------------------------------------------------------------------\n // Same types across CPU and GPU.\n // Predicate uses 32-bit integer (C friendly bool).\n typedef uint32_t AP1;\n typedef float AF1;\n typedef double AD1;\n typedef uint8_t AB1;\n typedef uint16_t AW1;\n typedef uint32_t AU1;\n typedef uint64_t AL1;\n typedef int8_t ASB1;\n typedef int16_t ASW1;\n typedef int32_t ASU1;\n typedef int64_t ASL1;\n//------------------------------------------------------------------------------------------------------------------------------\n #define AD1_(a) ((AD1)(a))\n #define AF1_(a) ((AF1)(a))\n #define AL1_(a) ((AL1)(a))\n #define AU1_(a) ((AU1)(a))\n//------------------------------------------------------------------------------------------------------------------------------\n #define ASL1_(a) ((ASL1)(a))\n #define ASU1_(a) ((ASU1)(a))\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC AU1 AU1_AF1(AF1 a){union{AF1 f;AU1 u;}bits;bits.f=a;return bits.u;}\n//------------------------------------------------------------------------------------------------------------------------------\n #define A_TRUE 1\n #define A_FALSE 0\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//\n//                                                       CPU/GPU PORTING\n//\n//------------------------------------------------------------------------------------------------------------------------------\n// Hackary to get CPU and GPU to share all setup code, without duplicate code paths.\n// Unfortunately this is the level of \"ugly\" that is required since the languages are very different.\n// This uses a lower-case prefix for special vector constructs.\n//  - In C restrict pointers are used.\n//  - In the shading language, in/inout/out arguments are used.\n// This depends on the ability to access a vector value in both languages via array syntax (aka color[2]).\n//==============================================================================================================================\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                     VECTOR ARGUMENT/RETURN/INITIALIZATION PORTABILITY\n//==============================================================================================================================\n #define retAD2 AD1 *A_RESTRICT\n #define retAD3 AD1 *A_RESTRICT\n #define retAD4 AD1 *A_RESTRICT\n #define retAF2 AF1 *A_RESTRICT\n #define retAF3 AF1 *A_RESTRICT\n #define retAF4 AF1 *A_RESTRICT\n #define retAL2 AL1 *A_RESTRICT\n #define retAL3 AL1 *A_RESTRICT\n #define retAL4 AL1 *A_RESTRICT\n #define retAU2 AU1 *A_RESTRICT\n #define retAU3 AU1 *A_RESTRICT\n #define retAU4 AU1 *A_RESTRICT\n//------------------------------------------------------------------------------------------------------------------------------\n #define inAD2 AD1 *A_RESTRICT\n #define inAD3 AD1 *A_RESTRICT\n #define inAD4 AD1 *A_RESTRICT\n #define inAF2 AF1 *A_RESTRICT\n #define inAF3 AF1 *A_RESTRICT\n #define inAF4 AF1 *A_RESTRICT\n #define inAL2 AL1 *A_RESTRICT\n #define inAL3 AL1 *A_RESTRICT\n #define inAL4 AL1 *A_RESTRICT\n #define inAU2 AU1 *A_RESTRICT\n #define inAU3 AU1 *A_RESTRICT\n #define inAU4 AU1 *A_RESTRICT\n//------------------------------------------------------------------------------------------------------------------------------\n #define inoutAD2 AD1 *A_RESTRICT\n #define inoutAD3 AD1 *A_RESTRICT\n #define inoutAD4 AD1 *A_RESTRICT\n #define inoutAF2 AF1 *A_RESTRICT\n #define inoutAF3 AF1 *A_RESTRICT\n #define inoutAF4 AF1 *A_RESTRICT\n #define inoutAL2 AL1 *A_RESTRICT\n #define inoutAL3 AL1 *A_RESTRICT\n #define inoutAL4 AL1 *A_RESTRICT\n #define inoutAU2 AU1 *A_RESTRICT\n #define inoutAU3 AU1 *A_RESTRICT\n #define inoutAU4 AU1 *A_RESTRICT\n//------------------------------------------------------------------------------------------------------------------------------\n #define outAD2 AD1 *A_RESTRICT\n #define outAD3 AD1 *A_RESTRICT\n #define outAD4 AD1 *A_RESTRICT\n #define outAF2 AF1 *A_RESTRICT\n #define outAF3 AF1 *A_RESTRICT\n #define outAF4 AF1 *A_RESTRICT\n #define outAL2 AL1 *A_RESTRICT\n #define outAL3 AL1 *A_RESTRICT\n #define outAL4 AL1 *A_RESTRICT\n #define outAU2 AU1 *A_RESTRICT\n #define outAU3 AU1 *A_RESTRICT\n #define outAU4 AU1 *A_RESTRICT\n//------------------------------------------------------------------------------------------------------------------------------\n #define varAD2(x) AD1 x[2]\n #define varAD3(x) AD1 x[3]\n #define varAD4(x) AD1 x[4]\n #define varAF2(x) AF1 x[2]\n #define varAF3(x) AF1 x[3]\n #define varAF4(x) AF1 x[4]\n #define varAL2(x) AL1 x[2]\n #define varAL3(x) AL1 x[3]\n #define varAL4(x) AL1 x[4]\n #define varAU2(x) AU1 x[2]\n #define varAU3(x) AU1 x[3]\n #define varAU4(x) AU1 x[4]\n//------------------------------------------------------------------------------------------------------------------------------\n #define initAD2(x,y) {x,y}\n #define initAD3(x,y,z) {x,y,z}\n #define initAD4(x,y,z,w) {x,y,z,w}\n #define initAF2(x,y) {x,y}\n #define initAF3(x,y,z) {x,y,z}\n #define initAF4(x,y,z,w) {x,y,z,w}\n #define initAL2(x,y) {x,y}\n #define initAL3(x,y,z) {x,y,z}\n #define initAL4(x,y,z,w) {x,y,z,w}\n #define initAU2(x,y) {x,y}\n #define initAU3(x,y,z) {x,y,z}\n #define initAU4(x,y,z,w) {x,y,z,w}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                     SCALAR RETURN OPS\n//------------------------------------------------------------------------------------------------------------------------------\n// TODO\n// ====\n//  - Replace transcendentals with manual versions. \n//==============================================================================================================================\n #ifdef A_GCC\n  A_STATIC AD1 AAbsD1(AD1 a){return __builtin_fabs(a);}\n  A_STATIC AF1 AAbsF1(AF1 a){return __builtin_fabsf(a);}\n  A_STATIC AU1 AAbsSU1(AU1 a){return AU1_(__builtin_abs(ASU1_(a)));}\n  A_STATIC AL1 AAbsSL1(AL1 a){return AL1_(__builtin_labs(ASL1_(a)));}\n #else\n  A_STATIC AD1 AAbsD1(AD1 a){return fabs(a);}\n  A_STATIC AF1 AAbsF1(AF1 a){return fabsf(a);}\n  A_STATIC AU1 AAbsSU1(AU1 a){return AU1_(abs(ASU1_(a)));}\n  A_STATIC AL1 AAbsSL1(AL1 a){return AL1_(llabs(ASL1_(a)));}\n #endif\n//------------------------------------------------------------------------------------------------------------------------------\n #ifdef A_GCC\n  A_STATIC AD1 ACosD1(AD1 a){return __builtin_cos(a);}\n  A_STATIC AF1 ACosF1(AF1 a){return __builtin_cosf(a);}\n #else\n  A_STATIC AD1 ACosD1(AD1 a){return cos(a);}\n  A_STATIC AF1 ACosF1(AF1 a){return cosf(a);}\n #endif\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC AD1 ADotD2(inAD2 a,inAD2 b){return a[0]*b[0]+a[1]*b[1];}\n A_STATIC AD1 ADotD3(inAD3 a,inAD3 b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2];}\n A_STATIC AD1 ADotD4(inAD4 a,inAD4 b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]+a[3]*b[3];}\n A_STATIC AF1 ADotF2(inAF2 a,inAF2 b){return a[0]*b[0]+a[1]*b[1];}\n A_STATIC AF1 ADotF3(inAF3 a,inAF3 b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2];}\n A_STATIC AF1 ADotF4(inAF4 a,inAF4 b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]+a[3]*b[3];}\n//------------------------------------------------------------------------------------------------------------------------------\n #ifdef A_GCC\n  A_STATIC AD1 AExp2D1(AD1 a){return __builtin_exp2(a);}\n  A_STATIC AF1 AExp2F1(AF1 a){return __builtin_exp2f(a);}\n #else\n  A_STATIC AD1 AExp2D1(AD1 a){return exp2(a);}\n  A_STATIC AF1 AExp2F1(AF1 a){return exp2f(a);}\n #endif\n//------------------------------------------------------------------------------------------------------------------------------\n #ifdef A_GCC\n  A_STATIC AD1 AFloorD1(AD1 a){return __builtin_floor(a);}\n  A_STATIC AF1 AFloorF1(AF1 a){return __builtin_floorf(a);}\n #else\n  A_STATIC AD1 AFloorD1(AD1 a){return floor(a);}\n  A_STATIC AF1 AFloorF1(AF1 a){return floorf(a);}\n #endif\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC AD1 ALerpD1(AD1 a,AD1 b,AD1 c){return b*c+(-a*c+a);}\n A_STATIC AF1 ALerpF1(AF1 a,AF1 b,AF1 c){return b*c+(-a*c+a);}\n//------------------------------------------------------------------------------------------------------------------------------\n #ifdef A_GCC\n  A_STATIC AD1 ALog2D1(AD1 a){return __builtin_log2(a);}\n  A_STATIC AF1 ALog2F1(AF1 a){return __builtin_log2f(a);}\n #else\n  A_STATIC AD1 ALog2D1(AD1 a){return log2(a);}\n  A_STATIC AF1 ALog2F1(AF1 a){return log2f(a);}\n #endif\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC AD1 AMaxD1(AD1 a,AD1 b){return a>b?a:b;}\n A_STATIC AF1 AMaxF1(AF1 a,AF1 b){return a>b?a:b;}\n A_STATIC AL1 AMaxL1(AL1 a,AL1 b){return a>b?a:b;}\n A_STATIC AU1 AMaxU1(AU1 a,AU1 b){return a>b?a:b;}\n//------------------------------------------------------------------------------------------------------------------------------\n // These follow the convention that A integer types don't have signage, until they are operated on. \n A_STATIC AL1 AMaxSL1(AL1 a,AL1 b){return (ASL1_(a)>ASL1_(b))?a:b;}\n A_STATIC AU1 AMaxSU1(AU1 a,AU1 b){return (ASU1_(a)>ASU1_(b))?a:b;}\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC AD1 AMinD1(AD1 a,AD1 b){return a<b?a:b;}\n A_STATIC AF1 AMinF1(AF1 a,AF1 b){return a<b?a:b;}\n A_STATIC AL1 AMinL1(AL1 a,AL1 b){return a<b?a:b;}\n A_STATIC AU1 AMinU1(AU1 a,AU1 b){return a<b?a:b;}\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC AL1 AMinSL1(AL1 a,AL1 b){return (ASL1_(a)<ASL1_(b))?a:b;}\n A_STATIC AU1 AMinSU1(AU1 a,AU1 b){return (ASU1_(a)<ASU1_(b))?a:b;}\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC AD1 ARcpD1(AD1 a){return 1.0/a;}\n A_STATIC AF1 ARcpF1(AF1 a){return 1.0f/a;}\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC AL1 AShrSL1(AL1 a,AL1 b){return AL1_(ASL1_(a)>>ASL1_(b));}\n A_STATIC AU1 AShrSU1(AU1 a,AU1 b){return AU1_(ASU1_(a)>>ASU1_(b));}\n//------------------------------------------------------------------------------------------------------------------------------\n #ifdef A_GCC\n  A_STATIC AD1 ASinD1(AD1 a){return __builtin_sin(a);}\n  A_STATIC AF1 ASinF1(AF1 a){return __builtin_sinf(a);}\n #else\n  A_STATIC AD1 ASinD1(AD1 a){return sin(a);}\n  A_STATIC AF1 ASinF1(AF1 a){return sinf(a);}\n #endif\n//------------------------------------------------------------------------------------------------------------------------------\n #ifdef A_GCC\n  A_STATIC AD1 ASqrtD1(AD1 a){return __builtin_sqrt(a);}\n  A_STATIC AF1 ASqrtF1(AF1 a){return __builtin_sqrtf(a);}\n #else\n  A_STATIC AD1 ASqrtD1(AD1 a){return sqrt(a);}\n  A_STATIC AF1 ASqrtF1(AF1 a){return sqrtf(a);}\n #endif\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                               SCALAR RETURN OPS - DEPENDENT\n//==============================================================================================================================\n A_STATIC AD1 AFractD1(AD1 a){return a-AFloorD1(a);}\n A_STATIC AF1 AFractF1(AF1 a){return a-AFloorF1(a);}\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC AD1 APowD1(AD1 a,AD1 b){return AExp2D1(b*ALog2D1(a));}\n A_STATIC AF1 APowF1(AF1 a,AF1 b){return AExp2F1(b*ALog2F1(a));}\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC AD1 ARsqD1(AD1 a){return ARcpD1(ASqrtD1(a));}\n A_STATIC AF1 ARsqF1(AF1 a){return ARcpF1(ASqrtF1(a));}\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC AD1 ASatD1(AD1 a){return AMinD1(1.0,AMaxD1(0.0,a));}\n A_STATIC AF1 ASatF1(AF1 a){return AMinF1(1.0f,AMaxF1(0.0f,a));}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                         VECTOR OPS\n//------------------------------------------------------------------------------------------------------------------------------\n// These are added as needed for production or prototyping, so not necessarily a complete set.\n// They follow a convention of taking in a destination and also returning the destination value to increase utility.\n//==============================================================================================================================\n A_STATIC retAD2 opAAbsD2(outAD2 d,inAD2 a){d[0]=AAbsD1(a[0]);d[1]=AAbsD1(a[1]);return d;}\n A_STATIC retAD3 opAAbsD3(outAD3 d,inAD3 a){d[0]=AAbsD1(a[0]);d[1]=AAbsD1(a[1]);d[2]=AAbsD1(a[2]);return d;}\n A_STATIC retAD4 opAAbsD4(outAD4 d,inAD4 a){d[0]=AAbsD1(a[0]);d[1]=AAbsD1(a[1]);d[2]=AAbsD1(a[2]);d[3]=AAbsD1(a[3]);return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC retAF2 opAAbsF2(outAF2 d,inAF2 a){d[0]=AAbsF1(a[0]);d[1]=AAbsF1(a[1]);return d;}\n A_STATIC retAF3 opAAbsF3(outAF3 d,inAF3 a){d[0]=AAbsF1(a[0]);d[1]=AAbsF1(a[1]);d[2]=AAbsF1(a[2]);return d;}\n A_STATIC retAF4 opAAbsF4(outAF4 d,inAF4 a){d[0]=AAbsF1(a[0]);d[1]=AAbsF1(a[1]);d[2]=AAbsF1(a[2]);d[3]=AAbsF1(a[3]);return d;}\n//==============================================================================================================================\n A_STATIC retAD2 opAAddD2(outAD2 d,inAD2 a,inAD2 b){d[0]=a[0]+b[0];d[1]=a[1]+b[1];return d;}\n A_STATIC retAD3 opAAddD3(outAD3 d,inAD3 a,inAD3 b){d[0]=a[0]+b[0];d[1]=a[1]+b[1];d[2]=a[2]+b[2];return d;}\n A_STATIC retAD4 opAAddD4(outAD4 d,inAD4 a,inAD4 b){d[0]=a[0]+b[0];d[1]=a[1]+b[1];d[2]=a[2]+b[2];d[3]=a[3]+b[3];return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC retAF2 opAAddF2(outAF2 d,inAF2 a,inAF2 b){d[0]=a[0]+b[0];d[1]=a[1]+b[1];return d;}\n A_STATIC retAF3 opAAddF3(outAF3 d,inAF3 a,inAF3 b){d[0]=a[0]+b[0];d[1]=a[1]+b[1];d[2]=a[2]+b[2];return d;}\n A_STATIC retAF4 opAAddF4(outAF4 d,inAF4 a,inAF4 b){d[0]=a[0]+b[0];d[1]=a[1]+b[1];d[2]=a[2]+b[2];d[3]=a[3]+b[3];return d;}\n//==============================================================================================================================\n A_STATIC retAD2 opACpyD2(outAD2 d,inAD2 a){d[0]=a[0];d[1]=a[1];return d;}\n A_STATIC retAD3 opACpyD3(outAD3 d,inAD3 a){d[0]=a[0];d[1]=a[1];d[2]=a[2];return d;}\n A_STATIC retAD4 opACpyD4(outAD4 d,inAD4 a){d[0]=a[0];d[1]=a[1];d[2]=a[2];d[3]=a[3];return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC retAF2 opACpyF2(outAF2 d,inAF2 a){d[0]=a[0];d[1]=a[1];return d;}\n A_STATIC retAF3 opACpyF3(outAF3 d,inAF3 a){d[0]=a[0];d[1]=a[1];d[2]=a[2];return d;}\n A_STATIC retAF4 opACpyF4(outAF4 d,inAF4 a){d[0]=a[0];d[1]=a[1];d[2]=a[2];d[3]=a[3];return d;}\n//==============================================================================================================================\n A_STATIC retAD2 opALerpD2(outAD2 d,inAD2 a,inAD2 b,inAD2 c){d[0]=ALerpD1(a[0],b[0],c[0]);d[1]=ALerpD1(a[1],b[1],c[1]);return d;}\n A_STATIC retAD3 opALerpD3(outAD3 d,inAD3 a,inAD3 b,inAD3 c){d[0]=ALerpD1(a[0],b[0],c[0]);d[1]=ALerpD1(a[1],b[1],c[1]);d[2]=ALerpD1(a[2],b[2],c[2]);return d;}\n A_STATIC retAD4 opALerpD4(outAD4 d,inAD4 a,inAD4 b,inAD4 c){d[0]=ALerpD1(a[0],b[0],c[0]);d[1]=ALerpD1(a[1],b[1],c[1]);d[2]=ALerpD1(a[2],b[2],c[2]);d[3]=ALerpD1(a[3],b[3],c[3]);return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC retAF2 opALerpF2(outAF2 d,inAF2 a,inAF2 b,inAF2 c){d[0]=ALerpF1(a[0],b[0],c[0]);d[1]=ALerpF1(a[1],b[1],c[1]);return d;}\n A_STATIC retAF3 opALerpF3(outAF3 d,inAF3 a,inAF3 b,inAF3 c){d[0]=ALerpF1(a[0],b[0],c[0]);d[1]=ALerpF1(a[1],b[1],c[1]);d[2]=ALerpF1(a[2],b[2],c[2]);return d;}\n A_STATIC retAF4 opALerpF4(outAF4 d,inAF4 a,inAF4 b,inAF4 c){d[0]=ALerpF1(a[0],b[0],c[0]);d[1]=ALerpF1(a[1],b[1],c[1]);d[2]=ALerpF1(a[2],b[2],c[2]);d[3]=ALerpF1(a[3],b[3],c[3]);return d;}\n//==============================================================================================================================\n A_STATIC retAD2 opALerpOneD2(outAD2 d,inAD2 a,inAD2 b,AD1 c){d[0]=ALerpD1(a[0],b[0],c);d[1]=ALerpD1(a[1],b[1],c);return d;}\n A_STATIC retAD3 opALerpOneD3(outAD3 d,inAD3 a,inAD3 b,AD1 c){d[0]=ALerpD1(a[0],b[0],c);d[1]=ALerpD1(a[1],b[1],c);d[2]=ALerpD1(a[2],b[2],c);return d;}\n A_STATIC retAD4 opALerpOneD4(outAD4 d,inAD4 a,inAD4 b,AD1 c){d[0]=ALerpD1(a[0],b[0],c);d[1]=ALerpD1(a[1],b[1],c);d[2]=ALerpD1(a[2],b[2],c);d[3]=ALerpD1(a[3],b[3],c);return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC retAF2 opALerpOneF2(outAF2 d,inAF2 a,inAF2 b,AF1 c){d[0]=ALerpF1(a[0],b[0],c);d[1]=ALerpF1(a[1],b[1],c);return d;}\n A_STATIC retAF3 opALerpOneF3(outAF3 d,inAF3 a,inAF3 b,AF1 c){d[0]=ALerpF1(a[0],b[0],c);d[1]=ALerpF1(a[1],b[1],c);d[2]=ALerpF1(a[2],b[2],c);return d;}\n A_STATIC retAF4 opALerpOneF4(outAF4 d,inAF4 a,inAF4 b,AF1 c){d[0]=ALerpF1(a[0],b[0],c);d[1]=ALerpF1(a[1],b[1],c);d[2]=ALerpF1(a[2],b[2],c);d[3]=ALerpF1(a[3],b[3],c);return d;}\n//==============================================================================================================================\n A_STATIC retAD2 opAMaxD2(outAD2 d,inAD2 a,inAD2 b){d[0]=AMaxD1(a[0],b[0]);d[1]=AMaxD1(a[1],b[1]);return d;}\n A_STATIC retAD3 opAMaxD3(outAD3 d,inAD3 a,inAD3 b){d[0]=AMaxD1(a[0],b[0]);d[1]=AMaxD1(a[1],b[1]);d[2]=AMaxD1(a[2],b[2]);return d;}\n A_STATIC retAD4 opAMaxD4(outAD4 d,inAD4 a,inAD4 b){d[0]=AMaxD1(a[0],b[0]);d[1]=AMaxD1(a[1],b[1]);d[2]=AMaxD1(a[2],b[2]);d[3]=AMaxD1(a[3],b[3]);return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC retAF2 opAMaxF2(outAF2 d,inAF2 a,inAF2 b){d[0]=AMaxF1(a[0],b[0]);d[1]=AMaxF1(a[1],b[1]);return d;}\n A_STATIC retAF3 opAMaxF3(outAF3 d,inAF3 a,inAF3 b){d[0]=AMaxF1(a[0],b[0]);d[1]=AMaxF1(a[1],b[1]);d[2]=AMaxF1(a[2],b[2]);return d;}\n A_STATIC retAF4 opAMaxF4(outAF4 d,inAF4 a,inAF4 b){d[0]=AMaxF1(a[0],b[0]);d[1]=AMaxF1(a[1],b[1]);d[2]=AMaxF1(a[2],b[2]);d[3]=AMaxF1(a[3],b[3]);return d;}\n//==============================================================================================================================\n A_STATIC retAD2 opAMinD2(outAD2 d,inAD2 a,inAD2 b){d[0]=AMinD1(a[0],b[0]);d[1]=AMinD1(a[1],b[1]);return d;}\n A_STATIC retAD3 opAMinD3(outAD3 d,inAD3 a,inAD3 b){d[0]=AMinD1(a[0],b[0]);d[1]=AMinD1(a[1],b[1]);d[2]=AMinD1(a[2],b[2]);return d;}\n A_STATIC retAD4 opAMinD4(outAD4 d,inAD4 a,inAD4 b){d[0]=AMinD1(a[0],b[0]);d[1]=AMinD1(a[1],b[1]);d[2]=AMinD1(a[2],b[2]);d[3]=AMinD1(a[3],b[3]);return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC retAF2 opAMinF2(outAF2 d,inAF2 a,inAF2 b){d[0]=AMinF1(a[0],b[0]);d[1]=AMinF1(a[1],b[1]);return d;}\n A_STATIC retAF3 opAMinF3(outAF3 d,inAF3 a,inAF3 b){d[0]=AMinF1(a[0],b[0]);d[1]=AMinF1(a[1],b[1]);d[2]=AMinF1(a[2],b[2]);return d;}\n A_STATIC retAF4 opAMinF4(outAF4 d,inAF4 a,inAF4 b){d[0]=AMinF1(a[0],b[0]);d[1]=AMinF1(a[1],b[1]);d[2]=AMinF1(a[2],b[2]);d[3]=AMinF1(a[3],b[3]);return d;}\n//==============================================================================================================================\n A_STATIC retAD2 opAMulD2(outAD2 d,inAD2 a,inAD2 b){d[0]=a[0]*b[0];d[1]=a[1]*b[1];return d;}\n A_STATIC retAD3 opAMulD3(outAD3 d,inAD3 a,inAD3 b){d[0]=a[0]*b[0];d[1]=a[1]*b[1];d[2]=a[2]*b[2];return d;}\n A_STATIC retAD4 opAMulD4(outAD4 d,inAD4 a,inAD4 b){d[0]=a[0]*b[0];d[1]=a[1]*b[1];d[2]=a[2]*b[2];d[3]=a[3]*b[3];return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC retAF2 opAMulF2(outAF2 d,inAF2 a,inAF2 b){d[0]=a[0]*b[0];d[1]=a[1]*b[1];return d;}\n A_STATIC retAF3 opAMulF3(outAF3 d,inAF3 a,inAF3 b){d[0]=a[0]*b[0];d[1]=a[1]*b[1];d[2]=a[2]*b[2];return d;}\n A_STATIC retAF4 opAMulF4(outAF4 d,inAF4 a,inAF4 b){d[0]=a[0]*b[0];d[1]=a[1]*b[1];d[2]=a[2]*b[2];d[3]=a[3]*b[3];return d;}\n//==============================================================================================================================\n A_STATIC retAD2 opAMulOneD2(outAD2 d,inAD2 a,AD1 b){d[0]=a[0]*b;d[1]=a[1]*b;return d;}\n A_STATIC retAD3 opAMulOneD3(outAD3 d,inAD3 a,AD1 b){d[0]=a[0]*b;d[1]=a[1]*b;d[2]=a[2]*b;return d;}\n A_STATIC retAD4 opAMulOneD4(outAD4 d,inAD4 a,AD1 b){d[0]=a[0]*b;d[1]=a[1]*b;d[2]=a[2]*b;d[3]=a[3]*b;return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC retAF2 opAMulOneF2(outAF2 d,inAF2 a,AF1 b){d[0]=a[0]*b;d[1]=a[1]*b;return d;}\n A_STATIC retAF3 opAMulOneF3(outAF3 d,inAF3 a,AF1 b){d[0]=a[0]*b;d[1]=a[1]*b;d[2]=a[2]*b;return d;}\n A_STATIC retAF4 opAMulOneF4(outAF4 d,inAF4 a,AF1 b){d[0]=a[0]*b;d[1]=a[1]*b;d[2]=a[2]*b;d[3]=a[3]*b;return d;}\n//==============================================================================================================================\n A_STATIC retAD2 opANegD2(outAD2 d,inAD2 a){d[0]=-a[0];d[1]=-a[1];return d;}\n A_STATIC retAD3 opANegD3(outAD3 d,inAD3 a){d[0]=-a[0];d[1]=-a[1];d[2]=-a[2];return d;}\n A_STATIC retAD4 opANegD4(outAD4 d,inAD4 a){d[0]=-a[0];d[1]=-a[1];d[2]=-a[2];d[3]=-a[3];return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC retAF2 opANegF2(outAF2 d,inAF2 a){d[0]=-a[0];d[1]=-a[1];return d;}\n A_STATIC retAF3 opANegF3(outAF3 d,inAF3 a){d[0]=-a[0];d[1]=-a[1];d[2]=-a[2];return d;}\n A_STATIC retAF4 opANegF4(outAF4 d,inAF4 a){d[0]=-a[0];d[1]=-a[1];d[2]=-a[2];d[3]=-a[3];return d;}\n//==============================================================================================================================\n A_STATIC retAD2 opARcpD2(outAD2 d,inAD2 a){d[0]=ARcpD1(a[0]);d[1]=ARcpD1(a[1]);return d;}\n A_STATIC retAD3 opARcpD3(outAD3 d,inAD3 a){d[0]=ARcpD1(a[0]);d[1]=ARcpD1(a[1]);d[2]=ARcpD1(a[2]);return d;}\n A_STATIC retAD4 opARcpD4(outAD4 d,inAD4 a){d[0]=ARcpD1(a[0]);d[1]=ARcpD1(a[1]);d[2]=ARcpD1(a[2]);d[3]=ARcpD1(a[3]);return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n A_STATIC retAF2 opARcpF2(outAF2 d,inAF2 a){d[0]=ARcpF1(a[0]);d[1]=ARcpF1(a[1]);return d;}\n A_STATIC retAF3 opARcpF3(outAF3 d,inAF3 a){d[0]=ARcpF1(a[0]);d[1]=ARcpF1(a[1]);d[2]=ARcpF1(a[2]);return d;}\n A_STATIC retAF4 opARcpF4(outAF4 d,inAF4 a){d[0]=ARcpF1(a[0]);d[1]=ARcpF1(a[1]);d[2]=ARcpF1(a[2]);d[3]=ARcpF1(a[3]);return d;}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                     HALF FLOAT PACKING\n//==============================================================================================================================\n // Convert float to half (in lower 16-bits of output).\n // Same fast technique as documented here: ftp://ftp.fox-toolkit.org/pub/fasthalffloatconversion.pdf\n // Supports denormals.\n // Conversion rules are to make computations possibly \"safer\" on the GPU,\n //  -INF & -NaN -> -65504\n //  +INF & +NaN -> +65504\n A_STATIC AU1 AU1_AH1_AF1(AF1 f){\n  static AW1 base[512]={\n   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,\n   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,\n   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,\n   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,\n   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,\n   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,\n   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,0x0002,0x0004,0x0008,0x0010,0x0020,0x0040,0x0080,0x0100,\n   0x0200,0x0400,0x0800,0x0c00,0x1000,0x1400,0x1800,0x1c00,0x2000,0x2400,0x2800,0x2c00,0x3000,0x3400,0x3800,0x3c00,\n   0x4000,0x4400,0x4800,0x4c00,0x5000,0x5400,0x5800,0x5c00,0x6000,0x6400,0x6800,0x6c00,0x7000,0x7400,0x7800,0x7bff,\n   0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,\n   0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,\n   0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,\n   0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,\n   0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,\n   0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,\n   0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,0x7bff,\n   0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,\n   0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,\n   0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,\n   0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,\n   0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,\n   0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,\n   0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8001,0x8002,0x8004,0x8008,0x8010,0x8020,0x8040,0x8080,0x8100,\n   0x8200,0x8400,0x8800,0x8c00,0x9000,0x9400,0x9800,0x9c00,0xa000,0xa400,0xa800,0xac00,0xb000,0xb400,0xb800,0xbc00,\n   0xc000,0xc400,0xc800,0xcc00,0xd000,0xd400,0xd800,0xdc00,0xe000,0xe400,0xe800,0xec00,0xf000,0xf400,0xf800,0xfbff,\n   0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,\n   0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,\n   0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,\n   0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,\n   0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,\n   0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,\n   0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff,0xfbff};\n  static AB1 shift[512]={\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x17,0x16,0x15,0x14,0x13,0x12,0x11,0x10,0x0f,\n   0x0e,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,\n   0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x17,0x16,0x15,0x14,0x13,0x12,0x11,0x10,0x0f,\n   0x0e,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,\n   0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,\n   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18};\n  union{AF1 f;AU1 u;}bits;bits.f=f;AU1 u=bits.u;AU1 i=u>>23;return (AU1)(base[i])+((u&0x7fffff)>>shift[i]);}\n//------------------------------------------------------------------------------------------------------------------------------\n // Used to output packed constant.\n A_STATIC AU1 AU1_AH2_AF2(inAF2 a){return AU1_AH1_AF1(a[0])+(AU1_AH1_AF1(a[1])<<16);}\n#endif\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//\n//\n//                                                            GLSL\n//\n//\n//==============================================================================================================================\n#if defined(A_GLSL) && defined(A_GPU)\n #define A_2PI 6.28318530718\n #ifndef A_SKIP_EXT\n  #ifdef A_HALF\n   #extension GL_EXT_shader_16bit_storage:require\n   #extension GL_EXT_shader_explicit_arithmetic_types:require \n  #endif\n//------------------------------------------------------------------------------------------------------------------------------\n  #ifdef A_LONG\n   #extension GL_ARB_gpu_shader_int64:require\n   // TODO: Fixme to more portable extension!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n   #extension GL_NV_shader_atomic_int64:require\n  #endif\n//------------------------------------------------------------------------------------------------------------------------------\n  #ifdef A_WAVE\n   #extension GL_KHR_shader_subgroup_arithmetic:require\n   #extension GL_KHR_shader_subgroup_ballot:require\n   #extension GL_KHR_shader_subgroup_quad:require\n   #extension GL_KHR_shader_subgroup_shuffle:require\n  #endif\n #endif\n//==============================================================================================================================\n #define AP1 bool\n #define AP2 bvec2\n #define AP3 bvec3\n #define AP4 bvec4\n//------------------------------------------------------------------------------------------------------------------------------\n #define AF1 float\n #define AF2 vec2\n #define AF3 vec3\n #define AF4 vec4\n//------------------------------------------------------------------------------------------------------------------------------\n #define AU1 uint\n #define AU2 uvec2\n #define AU3 uvec3\n #define AU4 uvec4\n//------------------------------------------------------------------------------------------------------------------------------\n #define ASU1 int\n #define ASU2 ivec2\n #define ASU3 ivec3\n #define ASU4 ivec4\n//==============================================================================================================================\n #define AF1_AU1(x) uintBitsToFloat(AU1(x))\n #define AF2_AU2(x) uintBitsToFloat(AU2(x))\n #define AF3_AU3(x) uintBitsToFloat(AU3(x))\n #define AF4_AU4(x) uintBitsToFloat(AU4(x))\n//------------------------------------------------------------------------------------------------------------------------------\n #define AU1_AF1(x) floatBitsToUint(AF1(x))\n #define AU2_AF2(x) floatBitsToUint(AF2(x))\n #define AU3_AF3(x) floatBitsToUint(AF3(x))\n #define AU4_AF4(x) floatBitsToUint(AF4(x))\n//------------------------------------------------------------------------------------------------------------------------------\n #define AU1_AH2_AF2 packHalf2x16\n #define AU1_AW2Unorm_AF2 packUnorm2x16\n #define AU1_AB4Unorm_AF4 packUnorm4x8\n//------------------------------------------------------------------------------------------------------------------------------\n #define AF2_AH2_AU1 unpackHalf2x16\n #define AF2_AW2Unorm_AU1 unpackUnorm2x16\n #define AF4_AB4Unorm_AU1 unpackUnorm4x8\n//==============================================================================================================================\n AF1 AF1_x(AF1 a){return AF1(a);}\n AF2 AF2_x(AF1 a){return AF2(a,a);}\n AF3 AF3_x(AF1 a){return AF3(a,a,a);}\n AF4 AF4_x(AF1 a){return AF4(a,a,a,a);}\n #define AF1_(a) AF1_x(AF1(a))\n #define AF2_(a) AF2_x(AF1(a))\n #define AF3_(a) AF3_x(AF1(a))\n #define AF4_(a) AF4_x(AF1(a))\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 AU1_x(AU1 a){return AU1(a);}\n AU2 AU2_x(AU1 a){return AU2(a,a);}\n AU3 AU3_x(AU1 a){return AU3(a,a,a);}\n AU4 AU4_x(AU1 a){return AU4(a,a,a,a);}\n #define AU1_(a) AU1_x(AU1(a))\n #define AU2_(a) AU2_x(AU1(a))\n #define AU3_(a) AU3_x(AU1(a))\n #define AU4_(a) AU4_x(AU1(a))\n//==============================================================================================================================\n AU1 AAbsSU1(AU1 a){return AU1(abs(ASU1(a)));}\n AU2 AAbsSU2(AU2 a){return AU2(abs(ASU2(a)));}\n AU3 AAbsSU3(AU3 a){return AU3(abs(ASU3(a)));}\n AU4 AAbsSU4(AU4 a){return AU4(abs(ASU4(a)));}\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 ABfe(AU1 src,AU1 off,AU1 bits){return bitfieldExtract(src,ASU1(off),ASU1(bits));}\n AU1 ABfi(AU1 src,AU1 ins,AU1 mask){return (ins&mask)|(src&(~mask));}\n // Proxy for V_BFI_B32 where the 'mask' is set as 'bits', 'mask=(1<<bits)-1', and 'bits' needs to be an immediate.\n AU1 ABfiM(AU1 src,AU1 ins,AU1 bits){return bitfieldInsert(src,ins,0u,uint(bits));}\n//------------------------------------------------------------------------------------------------------------------------------\n // V_FRACT_F32 (note DX frac() is different).\n AF1 AFractF1(AF1 x){return fract(x);}\n AF2 AFractF2(AF2 x){return fract(x);}\n AF3 AFractF3(AF3 x){return fract(x);}\n AF4 AFractF4(AF4 x){return fract(x);}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 ALerpF1(AF1 x,AF1 y,AF1 a){return mix(x,y,a);}\n AF2 ALerpF2(AF2 x,AF2 y,AF2 a){return mix(x,y,a);}\n AF3 ALerpF3(AF3 x,AF3 y,AF3 a){return mix(x,y,a);}\n AF4 ALerpF4(AF4 x,AF4 y,AF4 a){return mix(x,y,a);}\n//------------------------------------------------------------------------------------------------------------------------------\n // V_MAX3_F32.\n AF1 AMax3F1(AF1 x,AF1 y,AF1 z){return max(x,max(y,z));}\n AF2 AMax3F2(AF2 x,AF2 y,AF2 z){return max(x,max(y,z));}\n AF3 AMax3F3(AF3 x,AF3 y,AF3 z){return max(x,max(y,z));}\n AF4 AMax3F4(AF4 x,AF4 y,AF4 z){return max(x,max(y,z));}\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 AMax3SU1(AU1 x,AU1 y,AU1 z){return AU1(max(ASU1(x),max(ASU1(y),ASU1(z))));}\n AU2 AMax3SU2(AU2 x,AU2 y,AU2 z){return AU2(max(ASU2(x),max(ASU2(y),ASU2(z))));}\n AU3 AMax3SU3(AU3 x,AU3 y,AU3 z){return AU3(max(ASU3(x),max(ASU3(y),ASU3(z))));}\n AU4 AMax3SU4(AU4 x,AU4 y,AU4 z){return AU4(max(ASU4(x),max(ASU4(y),ASU4(z))));}\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 AMax3U1(AU1 x,AU1 y,AU1 z){return max(x,max(y,z));}\n AU2 AMax3U2(AU2 x,AU2 y,AU2 z){return max(x,max(y,z));}\n AU3 AMax3U3(AU3 x,AU3 y,AU3 z){return max(x,max(y,z));}\n AU4 AMax3U4(AU4 x,AU4 y,AU4 z){return max(x,max(y,z));}\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 AMaxSU1(AU1 a,AU1 b){return AU1(max(ASU1(a),ASU1(b)));}\n AU2 AMaxSU2(AU2 a,AU2 b){return AU2(max(ASU2(a),ASU2(b)));}\n AU3 AMaxSU3(AU3 a,AU3 b){return AU3(max(ASU3(a),ASU3(b)));}\n AU4 AMaxSU4(AU4 a,AU4 b){return AU4(max(ASU4(a),ASU4(b)));}\n//------------------------------------------------------------------------------------------------------------------------------\n // Clamp has an easier pattern match for med3 when some ordering is known.\n // V_MED3_F32.\n AF1 AMed3F1(AF1 x,AF1 y,AF1 z){return max(min(x,y),min(max(x,y),z));}\n AF2 AMed3F2(AF2 x,AF2 y,AF2 z){return max(min(x,y),min(max(x,y),z));}\n AF3 AMed3F3(AF3 x,AF3 y,AF3 z){return max(min(x,y),min(max(x,y),z));}\n AF4 AMed3F4(AF4 x,AF4 y,AF4 z){return max(min(x,y),min(max(x,y),z));}\n//------------------------------------------------------------------------------------------------------------------------------\n // V_MIN3_F32.\n AF1 AMin3F1(AF1 x,AF1 y,AF1 z){return min(x,min(y,z));}\n AF2 AMin3F2(AF2 x,AF2 y,AF2 z){return min(x,min(y,z));}\n AF3 AMin3F3(AF3 x,AF3 y,AF3 z){return min(x,min(y,z));}\n AF4 AMin3F4(AF4 x,AF4 y,AF4 z){return min(x,min(y,z));}\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 AMin3SU1(AU1 x,AU1 y,AU1 z){return AU1(min(ASU1(x),min(ASU1(y),ASU1(z))));}\n AU2 AMin3SU2(AU2 x,AU2 y,AU2 z){return AU2(min(ASU2(x),min(ASU2(y),ASU2(z))));}\n AU3 AMin3SU3(AU3 x,AU3 y,AU3 z){return AU3(min(ASU3(x),min(ASU3(y),ASU3(z))));}\n AU4 AMin3SU4(AU4 x,AU4 y,AU4 z){return AU4(min(ASU4(x),min(ASU4(y),ASU4(z))));}\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 AMin3U1(AU1 x,AU1 y,AU1 z){return min(x,min(y,z));}\n AU2 AMin3U2(AU2 x,AU2 y,AU2 z){return min(x,min(y,z));}\n AU3 AMin3U3(AU3 x,AU3 y,AU3 z){return min(x,min(y,z));}\n AU4 AMin3U4(AU4 x,AU4 y,AU4 z){return min(x,min(y,z));}\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 AMinSU1(AU1 a,AU1 b){return AU1(min(ASU1(a),ASU1(b)));}\n AU2 AMinSU2(AU2 a,AU2 b){return AU2(min(ASU2(a),ASU2(b)));}\n AU3 AMinSU3(AU3 a,AU3 b){return AU3(min(ASU3(a),ASU3(b)));}\n AU4 AMinSU4(AU4 a,AU4 b){return AU4(min(ASU4(a),ASU4(b)));}\n//------------------------------------------------------------------------------------------------------------------------------\n // Normalized trig. Valid input domain is {-256 to +256}. No GLSL compiler intrinsic exists to map to this currently.\n // V_COS_F32.\n AF1 ANCosF1(AF1 x){return cos(x*AF1_(A_2PI));}\n AF2 ANCosF2(AF2 x){return cos(x*AF2_(A_2PI));}\n AF3 ANCosF3(AF3 x){return cos(x*AF3_(A_2PI));}\n AF4 ANCosF4(AF4 x){return cos(x*AF4_(A_2PI));}\n//------------------------------------------------------------------------------------------------------------------------------\n // Normalized trig. Valid input domain is {-256 to +256}. No GLSL compiler intrinsic exists to map to this currently.\n // V_SIN_F32.\n AF1 ANSinF1(AF1 x){return sin(x*AF1_(A_2PI));}\n AF2 ANSinF2(AF2 x){return sin(x*AF2_(A_2PI));}\n AF3 ANSinF3(AF3 x){return sin(x*AF3_(A_2PI));}\n AF4 ANSinF4(AF4 x){return sin(x*AF4_(A_2PI));}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 ARcpF1(AF1 x){return AF1_(1.0)/x;}\n AF2 ARcpF2(AF2 x){return AF2_(1.0)/x;}\n AF3 ARcpF3(AF3 x){return AF3_(1.0)/x;}\n AF4 ARcpF4(AF4 x){return AF4_(1.0)/x;}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 ARsqF1(AF1 x){return AF1_(1.0)/sqrt(x);}\n AF2 ARsqF2(AF2 x){return AF2_(1.0)/sqrt(x);}\n AF3 ARsqF3(AF3 x){return AF3_(1.0)/sqrt(x);}\n AF4 ARsqF4(AF4 x){return AF4_(1.0)/sqrt(x);}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 ASatF1(AF1 x){return clamp(x,AF1_(0.0),AF1_(1.0));}\n AF2 ASatF2(AF2 x){return clamp(x,AF2_(0.0),AF2_(1.0));}\n AF3 ASatF3(AF3 x){return clamp(x,AF3_(0.0),AF3_(1.0));}\n AF4 ASatF4(AF4 x){return clamp(x,AF4_(0.0),AF4_(1.0));}\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 AShrSU1(AU1 a,AU1 b){return AU1(ASU1(a)>>ASU1(b));}\n AU2 AShrSU2(AU2 a,AU2 b){return AU2(ASU2(a)>>ASU2(b));}\n AU3 AShrSU3(AU3 a,AU3 b){return AU3(ASU3(a)>>ASU3(b));}\n AU4 AShrSU4(AU4 a,AU4 b){return AU4(ASU4(a)>>ASU4(b));}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                          GLSL BYTE\n//==============================================================================================================================\n #ifdef A_BYTE\n  #define AB1 uint8_t\n  #define AB2 u8vec2\n  #define AB3 u8vec3\n  #define AB4 u8vec4\n//------------------------------------------------------------------------------------------------------------------------------\n  #define ASB1 int8_t\n  #define ASB2 i8vec2\n  #define ASB3 i8vec3\n  #define ASB4 i8vec4\n//------------------------------------------------------------------------------------------------------------------------------\n  AB1 AB1_x(AB1 a){return AB1(a);}\n  AB2 AB2_x(AB1 a){return AB2(a,a);}\n  AB3 AB3_x(AB1 a){return AB3(a,a,a);}\n  AB4 AB4_x(AB1 a){return AB4(a,a,a,a);}\n  #define AB1_(a) AB1_x(AB1(a))\n  #define AB2_(a) AB2_x(AB1(a))\n  #define AB3_(a) AB3_x(AB1(a))\n  #define AB4_(a) AB4_x(AB1(a))\n #endif\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                          GLSL HALF\n//==============================================================================================================================\n #ifdef A_HALF\n  #define AH1 float16_t\n  #define AH2 f16vec2\n  #define AH3 f16vec3\n  #define AH4 f16vec4\n//------------------------------------------------------------------------------------------------------------------------------\n  #define AW1 uint16_t\n  #define AW2 u16vec2\n  #define AW3 u16vec3\n  #define AW4 u16vec4\n//------------------------------------------------------------------------------------------------------------------------------\n  #define ASW1 int16_t\n  #define ASW2 i16vec2\n  #define ASW3 i16vec3\n  #define ASW4 i16vec4\n//==============================================================================================================================\n  #define AH2_AU1(x) unpackFloat2x16(AU1(x))\n  AH4 AH4_AU2_x(AU2 x){return AH4(unpackFloat2x16(x.x),unpackFloat2x16(x.y));}\n  #define AH4_AU2(x) AH4_AU2_x(AU2(x))\n  #define AW2_AU1(x) unpackUint2x16(AU1(x))\n  #define AW4_AU2(x) unpackUint4x16(pack64(AU2(x)))\n//------------------------------------------------------------------------------------------------------------------------------\n  #define AU1_AH2(x) packFloat2x16(AH2(x))\n  AU2 AU2_AH4_x(AH4 x){return AU2(packFloat2x16(x.xy),packFloat2x16(x.zw));}\n  #define AU2_AH4(x) AU2_AH4_x(AH4(x))\n  #define AU1_AW2(x) packUint2x16(AW2(x))\n  #define AU2_AW4(x) unpack32(packUint4x16(AW4(x)))\n//==============================================================================================================================\n  #define AW1_AH1(x) halfBitsToUint16(AH1(x))\n  #define AW2_AH2(x) halfBitsToUint16(AH2(x))\n  #define AW3_AH3(x) halfBitsToUint16(AH3(x))\n  #define AW4_AH4(x) halfBitsToUint16(AH4(x))\n//------------------------------------------------------------------------------------------------------------------------------\n  #define AH1_AW1(x) uint16BitsToHalf(AW1(x))\n  #define AH2_AW2(x) uint16BitsToHalf(AW2(x))\n  #define AH3_AW3(x) uint16BitsToHalf(AW3(x))\n  #define AH4_AW4(x) uint16BitsToHalf(AW4(x))\n//==============================================================================================================================\n  AH1 AH1_x(AH1 a){return AH1(a);}\n  AH2 AH2_x(AH1 a){return AH2(a,a);}\n  AH3 AH3_x(AH1 a){return AH3(a,a,a);}\n  AH4 AH4_x(AH1 a){return AH4(a,a,a,a);}\n  #define AH1_(a) AH1_x(AH1(a))\n  #define AH2_(a) AH2_x(AH1(a))\n  #define AH3_(a) AH3_x(AH1(a))\n  #define AH4_(a) AH4_x(AH1(a))\n//------------------------------------------------------------------------------------------------------------------------------\n  AW1 AW1_x(AW1 a){return AW1(a);}\n  AW2 AW2_x(AW1 a){return AW2(a,a);}\n  AW3 AW3_x(AW1 a){return AW3(a,a,a);}\n  AW4 AW4_x(AW1 a){return AW4(a,a,a,a);}\n  #define AW1_(a) AW1_x(AW1(a))\n  #define AW2_(a) AW2_x(AW1(a))\n  #define AW3_(a) AW3_x(AW1(a))\n  #define AW4_(a) AW4_x(AW1(a))\n//==============================================================================================================================\n  AW1 AAbsSW1(AW1 a){return AW1(abs(ASW1(a)));}\n  AW2 AAbsSW2(AW2 a){return AW2(abs(ASW2(a)));}\n  AW3 AAbsSW3(AW3 a){return AW3(abs(ASW3(a)));}\n  AW4 AAbsSW4(AW4 a){return AW4(abs(ASW4(a)));}\n//------------------------------------------------------------------------------------------------------------------------------\n  AH1 AFractH1(AH1 x){return fract(x);}\n  AH2 AFractH2(AH2 x){return fract(x);}\n  AH3 AFractH3(AH3 x){return fract(x);}\n  AH4 AFractH4(AH4 x){return fract(x);}\n//------------------------------------------------------------------------------------------------------------------------------\n  AH1 ALerpH1(AH1 x,AH1 y,AH1 a){return mix(x,y,a);}\n  AH2 ALerpH2(AH2 x,AH2 y,AH2 a){return mix(x,y,a);}\n  AH3 ALerpH3(AH3 x,AH3 y,AH3 a){return mix(x,y,a);}\n  AH4 ALerpH4(AH4 x,AH4 y,AH4 a){return mix(x,y,a);}\n//------------------------------------------------------------------------------------------------------------------------------\n  // No packed version of max3.\n  AH1 AMax3H1(AH1 x,AH1 y,AH1 z){return max(x,max(y,z));}\n  AH2 AMax3H2(AH2 x,AH2 y,AH2 z){return max(x,max(y,z));}\n  AH3 AMax3H3(AH3 x,AH3 y,AH3 z){return max(x,max(y,z));}\n  AH4 AMax3H4(AH4 x,AH4 y,AH4 z){return max(x,max(y,z));}\n//------------------------------------------------------------------------------------------------------------------------------\n  AW1 AMaxSW1(AW1 a,AW1 b){return AW1(max(ASU1(a),ASU1(b)));}\n  AW2 AMaxSW2(AW2 a,AW2 b){return AW2(max(ASU2(a),ASU2(b)));}\n  AW3 AMaxSW3(AW3 a,AW3 b){return AW3(max(ASU3(a),ASU3(b)));}\n  AW4 AMaxSW4(AW4 a,AW4 b){return AW4(max(ASU4(a),ASU4(b)));}\n//------------------------------------------------------------------------------------------------------------------------------\n  // No packed version of min3.\n  AH1 AMin3H1(AH1 x,AH1 y,AH1 z){return min(x,min(y,z));}\n  AH2 AMin3H2(AH2 x,AH2 y,AH2 z){return min(x,min(y,z));}\n  AH3 AMin3H3(AH3 x,AH3 y,AH3 z){return min(x,min(y,z));}\n  AH4 AMin3H4(AH4 x,AH4 y,AH4 z){return min(x,min(y,z));}\n//------------------------------------------------------------------------------------------------------------------------------\n  AW1 AMinSW1(AW1 a,AW1 b){return AW1(min(ASU1(a),ASU1(b)));}\n  AW2 AMinSW2(AW2 a,AW2 b){return AW2(min(ASU2(a),ASU2(b)));}\n  AW3 AMinSW3(AW3 a,AW3 b){return AW3(min(ASU3(a),ASU3(b)));}\n  AW4 AMinSW4(AW4 a,AW4 b){return AW4(min(ASU4(a),ASU4(b)));}\n//------------------------------------------------------------------------------------------------------------------------------\n  AH1 ARcpH1(AH1 x){return AH1_(1.0)/x;}\n  AH2 ARcpH2(AH2 x){return AH2_(1.0)/x;}\n  AH3 ARcpH3(AH3 x){return AH3_(1.0)/x;}\n  AH4 ARcpH4(AH4 x){return AH4_(1.0)/x;}\n//------------------------------------------------------------------------------------------------------------------------------\n  AH1 ARsqH1(AH1 x){return AH1_(1.0)/sqrt(x);}\n  AH2 ARsqH2(AH2 x){return AH2_(1.0)/sqrt(x);}\n  AH3 ARsqH3(AH3 x){return AH3_(1.0)/sqrt(x);}\n  AH4 ARsqH4(AH4 x){return AH4_(1.0)/sqrt(x);}\n//------------------------------------------------------------------------------------------------------------------------------\n  AH1 ASatH1(AH1 x){return clamp(x,AH1_(0.0),AH1_(1.0));}\n  AH2 ASatH2(AH2 x){return clamp(x,AH2_(0.0),AH2_(1.0));}\n  AH3 ASatH3(AH3 x){return clamp(x,AH3_(0.0),AH3_(1.0));}\n  AH4 ASatH4(AH4 x){return clamp(x,AH4_(0.0),AH4_(1.0));}\n//------------------------------------------------------------------------------------------------------------------------------\n  AW1 AShrSW1(AW1 a,AW1 b){return AW1(ASW1(a)>>ASW1(b));}\n  AW2 AShrSW2(AW2 a,AW2 b){return AW2(ASW2(a)>>ASW2(b));}\n  AW3 AShrSW3(AW3 a,AW3 b){return AW3(ASW3(a)>>ASW3(b));}\n  AW4 AShrSW4(AW4 a,AW4 b){return AW4(ASW4(a)>>ASW4(b));}\n #endif\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                         GLSL DOUBLE\n//==============================================================================================================================\n #ifdef A_DUBL\n  #define AD1 double\n  #define AD2 dvec2\n  #define AD3 dvec3\n  #define AD4 dvec4\n//------------------------------------------------------------------------------------------------------------------------------\n  AD1 AD1_x(AD1 a){return AD1(a);}\n  AD2 AD2_x(AD1 a){return AD2(a,a);}\n  AD3 AD3_x(AD1 a){return AD3(a,a,a);}\n  AD4 AD4_x(AD1 a){return AD4(a,a,a,a);}\n  #define AD1_(a) AD1_x(AD1(a))\n  #define AD2_(a) AD2_x(AD1(a))\n  #define AD3_(a) AD3_x(AD1(a))\n  #define AD4_(a) AD4_x(AD1(a))\n//==============================================================================================================================\n  AD1 AFractD1(AD1 x){return fract(x);}\n  AD2 AFractD2(AD2 x){return fract(x);}\n  AD3 AFractD3(AD3 x){return fract(x);}\n  AD4 AFractD4(AD4 x){return fract(x);}\n//------------------------------------------------------------------------------------------------------------------------------\n  AD1 ALerpD1(AD1 x,AD1 y,AD1 a){return mix(x,y,a);}\n  AD2 ALerpD2(AD2 x,AD2 y,AD2 a){return mix(x,y,a);}\n  AD3 ALerpD3(AD3 x,AD3 y,AD3 a){return mix(x,y,a);}\n  AD4 ALerpD4(AD4 x,AD4 y,AD4 a){return mix(x,y,a);}\n//------------------------------------------------------------------------------------------------------------------------------\n  AD1 ARcpD1(AD1 x){return AD1_(1.0)/x;}\n  AD2 ARcpD2(AD2 x){return AD2_(1.0)/x;}\n  AD3 ARcpD3(AD3 x){return AD3_(1.0)/x;}\n  AD4 ARcpD4(AD4 x){return AD4_(1.0)/x;}\n//------------------------------------------------------------------------------------------------------------------------------\n  AD1 ARsqD1(AD1 x){return AD1_(1.0)/sqrt(x);}\n  AD2 ARsqD2(AD2 x){return AD2_(1.0)/sqrt(x);}\n  AD3 ARsqD3(AD3 x){return AD3_(1.0)/sqrt(x);}\n  AD4 ARsqD4(AD4 x){return AD4_(1.0)/sqrt(x);}\n//------------------------------------------------------------------------------------------------------------------------------\n  AD1 ASatD1(AD1 x){return clamp(x,AD1_(0.0),AD1_(1.0));}\n  AD2 ASatD2(AD2 x){return clamp(x,AD2_(0.0),AD2_(1.0));}\n  AD3 ASatD3(AD3 x){return clamp(x,AD3_(0.0),AD3_(1.0));}\n  AD4 ASatD4(AD4 x){return clamp(x,AD4_(0.0),AD4_(1.0));}\n #endif\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                         GLSL LONG\n//==============================================================================================================================\n #ifdef A_LONG\n  #define AL1 uint64_t\n  #define AL2 u64vec2\n  #define AL3 u64vec3\n  #define AL4 u64vec4\n//------------------------------------------------------------------------------------------------------------------------------\n  #define ASL1 int64_t\n  #define ASL2 i64vec2\n  #define ASL3 i64vec3\n  #define ASL4 i64vec4\n//------------------------------------------------------------------------------------------------------------------------------\n  #define AL1_AU2(x) packUint2x32(AU2(x))\n  #define AU2_AL1(x) unpackUint2x32(AL1(x))\n//------------------------------------------------------------------------------------------------------------------------------\n  AL1 AL1_x(AL1 a){return AL1(a);}\n  AL2 AL2_x(AL1 a){return AL2(a,a);}\n  AL3 AL3_x(AL1 a){return AL3(a,a,a);}\n  AL4 AL4_x(AL1 a){return AL4(a,a,a,a);}\n  #define AL1_(a) AL1_x(AL1(a))\n  #define AL2_(a) AL2_x(AL1(a))\n  #define AL3_(a) AL3_x(AL1(a))\n  #define AL4_(a) AL4_x(AL1(a))\n//==============================================================================================================================\n  AL1 AAbsSL1(AL1 a){return AL1(abs(ASL1(a)));}\n  AL2 AAbsSL2(AL2 a){return AL2(abs(ASL2(a)));}\n  AL3 AAbsSL3(AL3 a){return AL3(abs(ASL3(a)));}\n  AL4 AAbsSL4(AL4 a){return AL4(abs(ASL4(a)));}\n//------------------------------------------------------------------------------------------------------------------------------\n  AL1 AMaxSL1(AL1 a,AL1 b){return AL1(max(ASU1(a),ASU1(b)));}\n  AL2 AMaxSL2(AL2 a,AL2 b){return AL2(max(ASU2(a),ASU2(b)));}\n  AL3 AMaxSL3(AL3 a,AL3 b){return AL3(max(ASU3(a),ASU3(b)));}\n  AL4 AMaxSL4(AL4 a,AL4 b){return AL4(max(ASU4(a),ASU4(b)));}\n//------------------------------------------------------------------------------------------------------------------------------\n  AL1 AMinSL1(AL1 a,AL1 b){return AL1(min(ASU1(a),ASU1(b)));}\n  AL2 AMinSL2(AL2 a,AL2 b){return AL2(min(ASU2(a),ASU2(b)));}\n  AL3 AMinSL3(AL3 a,AL3 b){return AL3(min(ASU3(a),ASU3(b)));}\n  AL4 AMinSL4(AL4 a,AL4 b){return AL4(min(ASU4(a),ASU4(b)));}\n #endif\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                      WAVE OPERATIONS\n//==============================================================================================================================\n #ifdef A_WAVE\n  AF1 AWaveAdd(AF1 v){return subgroupAdd(v);}\n  AF2 AWaveAdd(AF2 v){return subgroupAdd(v);}\n  AF3 AWaveAdd(AF3 v){return subgroupAdd(v);}\n  AF4 AWaveAdd(AF4 v){return subgroupAdd(v);}\n #endif\n//==============================================================================================================================\n#endif\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//\n//\n//                                                            HLSL\n//\n//\n//==============================================================================================================================\n#if defined(A_HLSL) && defined(A_GPU)\n #define AP1 bool\n #define AP2 bool2\n #define AP3 bool3\n #define AP4 bool4\n//------------------------------------------------------------------------------------------------------------------------------\n #define AF1 float\n #define AF2 float2\n #define AF3 float3\n #define AF4 float4\n//------------------------------------------------------------------------------------------------------------------------------\n #define AU1 uint\n #define AU2 uint2\n #define AU3 uint3\n #define AU4 uint4\n//------------------------------------------------------------------------------------------------------------------------------\n #define ASU1 int\n #define ASU2 int2\n #define ASU3 int3\n #define ASU4 int4\n//==============================================================================================================================\n #define AF1_AU1(x) asfloat(AU1(x))\n #define AF2_AU2(x) asfloat(AU2(x))\n #define AF3_AU3(x) asfloat(AU3(x))\n #define AF4_AU4(x) asfloat(AU4(x))\n//------------------------------------------------------------------------------------------------------------------------------\n #define AU1_AF1(x) asuint(AF1(x))\n #define AU2_AF2(x) asuint(AF2(x))\n #define AU3_AF3(x) asuint(AF3(x))\n #define AU4_AF4(x) asuint(AF4(x))\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 AU1_AH2_AF2_x(AF2 a){return f32tof16(a.x)|(f32tof16(a.y)<<16);}\n #define AU1_AH2_AF2(a) AU1_AH2_AF2_x(AF2(a)) \n #define AU1_AB4Unorm_AF4(x) D3DCOLORtoUBYTE4(AF4(x))\n//------------------------------------------------------------------------------------------------------------------------------\n AF2 AF2_AH2_AU1_x(AU1 x){return AF2(f16tof32(x&0xFFFF),f16tof32(x>>16));}\n #define AF2_AH2_AU1(x) AF2_AH2_AU1_x(AU1(x))\n//==============================================================================================================================\n AF1 AF1_x(AF1 a){return AF1(a);}\n AF2 AF2_x(AF1 a){return AF2(a,a);}\n AF3 AF3_x(AF1 a){return AF3(a,a,a);}\n AF4 AF4_x(AF1 a){return AF4(a,a,a,a);}\n #define AF1_(a) AF1_x(AF1(a))\n #define AF2_(a) AF2_x(AF1(a))\n #define AF3_(a) AF3_x(AF1(a))\n #define AF4_(a) AF4_x(AF1(a))\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 AU1_x(AU1 a){return AU1(a);}\n AU2 AU2_x(AU1 a){return AU2(a,a);}\n AU3 AU3_x(AU1 a){return AU3(a,a,a);}\n AU4 AU4_x(AU1 a){return AU4(a,a,a,a);}\n #define AU1_(a) AU1_x(AU1(a))\n #define AU2_(a) AU2_x(AU1(a))\n #define AU3_(a) AU3_x(AU1(a))\n #define AU4_(a) AU4_x(AU1(a))\n//==============================================================================================================================\n AU1 AAbsSU1(AU1 a){return AU1(abs(ASU1(a)));}\n AU2 AAbsSU2(AU2 a){return AU2(abs(ASU2(a)));}\n AU3 AAbsSU3(AU3 a){return AU3(abs(ASU3(a)));}\n AU4 AAbsSU4(AU4 a){return AU4(abs(ASU4(a)));}\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 ABfe(AU1 src,AU1 off,AU1 bits){AU1 mask=(1<<bits)-1;return (src>>off)&mask;}\n AU1 ABfi(AU1 src,AU1 ins,AU1 mask){return (ins&mask)|(src&(~mask));}\n AU1 ABfiM(AU1 src,AU1 ins,AU1 bits){AU1 mask=(1<<bits)-1;return (ins&mask)|(src&(~mask));}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 AFractF1(AF1 x){return x-floor(x);}\n AF2 AFractF2(AF2 x){return x-floor(x);}\n AF3 AFractF3(AF3 x){return x-floor(x);}\n AF4 AFractF4(AF4 x){return x-floor(x);}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 ALerpF1(AF1 x,AF1 y,AF1 a){return lerp(x,y,a);}\n AF2 ALerpF2(AF2 x,AF2 y,AF2 a){return lerp(x,y,a);}\n AF3 ALerpF3(AF3 x,AF3 y,AF3 a){return lerp(x,y,a);}\n AF4 ALerpF4(AF4 x,AF4 y,AF4 a){return lerp(x,y,a);}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 AMax3F1(AF1 x,AF1 y,AF1 z){return max(x,max(y,z));}\n AF2 AMax3F2(AF2 x,AF2 y,AF2 z){return max(x,max(y,z));}\n AF3 AMax3F3(AF3 x,AF3 y,AF3 z){return max(x,max(y,z));}\n AF4 AMax3F4(AF4 x,AF4 y,AF4 z){return max(x,max(y,z));}\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 AMax3SU1(AU1 x,AU1 y,AU1 z){return AU1(max(ASU1(x),max(ASU1(y),ASU1(z))));}\n AU2 AMax3SU2(AU2 x,AU2 y,AU2 z){return AU2(max(ASU2(x),max(ASU2(y),ASU2(z))));}\n AU3 AMax3SU3(AU3 x,AU3 y,AU3 z){return AU3(max(ASU3(x),max(ASU3(y),ASU3(z))));}\n AU4 AMax3SU4(AU4 x,AU4 y,AU4 z){return AU4(max(ASU4(x),max(ASU4(y),ASU4(z))));}\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 AMax3U1(AU1 x,AU1 y,AU1 z){return max(x,max(y,z));}\n AU2 AMax3U2(AU2 x,AU2 y,AU2 z){return max(x,max(y,z));}\n AU3 AMax3U3(AU3 x,AU3 y,AU3 z){return max(x,max(y,z));}\n AU4 AMax3U4(AU4 x,AU4 y,AU4 z){return max(x,max(y,z));}\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 AMaxSU1(AU1 a,AU1 b){return AU1(max(ASU1(a),ASU1(b)));}\n AU2 AMaxSU2(AU2 a,AU2 b){return AU2(max(ASU2(a),ASU2(b)));}\n AU3 AMaxSU3(AU3 a,AU3 b){return AU3(max(ASU3(a),ASU3(b)));}\n AU4 AMaxSU4(AU4 a,AU4 b){return AU4(max(ASU4(a),ASU4(b)));}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 AMed3F1(AF1 x,AF1 y,AF1 z){return max(min(x,y),min(max(x,y),z));}\n AF2 AMed3F2(AF2 x,AF2 y,AF2 z){return max(min(x,y),min(max(x,y),z));}\n AF3 AMed3F3(AF3 x,AF3 y,AF3 z){return max(min(x,y),min(max(x,y),z));}\n AF4 AMed3F4(AF4 x,AF4 y,AF4 z){return max(min(x,y),min(max(x,y),z));}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 AMin3F1(AF1 x,AF1 y,AF1 z){return min(x,min(y,z));}\n AF2 AMin3F2(AF2 x,AF2 y,AF2 z){return min(x,min(y,z));}\n AF3 AMin3F3(AF3 x,AF3 y,AF3 z){return min(x,min(y,z));}\n AF4 AMin3F4(AF4 x,AF4 y,AF4 z){return min(x,min(y,z));}\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 AMin3SU1(AU1 x,AU1 y,AU1 z){return AU1(min(ASU1(x),min(ASU1(y),ASU1(z))));}\n AU2 AMin3SU2(AU2 x,AU2 y,AU2 z){return AU2(min(ASU2(x),min(ASU2(y),ASU2(z))));}\n AU3 AMin3SU3(AU3 x,AU3 y,AU3 z){return AU3(min(ASU3(x),min(ASU3(y),ASU3(z))));}\n AU4 AMin3SU4(AU4 x,AU4 y,AU4 z){return AU4(min(ASU4(x),min(ASU4(y),ASU4(z))));}\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 AMin3U1(AU1 x,AU1 y,AU1 z){return min(x,min(y,z));}\n AU2 AMin3U2(AU2 x,AU2 y,AU2 z){return min(x,min(y,z));}\n AU3 AMin3U3(AU3 x,AU3 y,AU3 z){return min(x,min(y,z));}\n AU4 AMin3U4(AU4 x,AU4 y,AU4 z){return min(x,min(y,z));}\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 AMinSU1(AU1 a,AU1 b){return AU1(min(ASU1(a),ASU1(b)));}\n AU2 AMinSU2(AU2 a,AU2 b){return AU2(min(ASU2(a),ASU2(b)));}\n AU3 AMinSU3(AU3 a,AU3 b){return AU3(min(ASU3(a),ASU3(b)));}\n AU4 AMinSU4(AU4 a,AU4 b){return AU4(min(ASU4(a),ASU4(b)));}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 ANCosF1(AF1 x){return cos(x*AF1_(A_2PI));}\n AF2 ANCosF2(AF2 x){return cos(x*AF2_(A_2PI));}\n AF3 ANCosF3(AF3 x){return cos(x*AF3_(A_2PI));}\n AF4 ANCosF4(AF4 x){return cos(x*AF4_(A_2PI));}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 ANSinF1(AF1 x){return sin(x*AF1_(A_2PI));}\n AF2 ANSinF2(AF2 x){return sin(x*AF2_(A_2PI));}\n AF3 ANSinF3(AF3 x){return sin(x*AF3_(A_2PI));}\n AF4 ANSinF4(AF4 x){return sin(x*AF4_(A_2PI));}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 ARcpF1(AF1 x){return rcp(x);}\n AF2 ARcpF2(AF2 x){return rcp(x);}\n AF3 ARcpF3(AF3 x){return rcp(x);}\n AF4 ARcpF4(AF4 x){return rcp(x);}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 ARsqF1(AF1 x){return rsqrt(x);}\n AF2 ARsqF2(AF2 x){return rsqrt(x);}\n AF3 ARsqF3(AF3 x){return rsqrt(x);}\n AF4 ARsqF4(AF4 x){return rsqrt(x);}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 ASatF1(AF1 x){return saturate(x);}\n AF2 ASatF2(AF2 x){return saturate(x);}\n AF3 ASatF3(AF3 x){return saturate(x);}\n AF4 ASatF4(AF4 x){return saturate(x);}\n//------------------------------------------------------------------------------------------------------------------------------\n AU1 AShrSU1(AU1 a,AU1 b){return AU1(ASU1(a)>>ASU1(b));}\n AU2 AShrSU2(AU2 a,AU2 b){return AU2(ASU2(a)>>ASU2(b));}\n AU3 AShrSU3(AU3 a,AU3 b){return AU3(ASU3(a)>>ASU3(b));}\n AU4 AShrSU4(AU4 a,AU4 b){return AU4(ASU4(a)>>ASU4(b));}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                          HLSL BYTE\n//==============================================================================================================================\n #ifdef A_BYTE\n #endif\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                          HLSL HALF\n//==============================================================================================================================\n #ifdef A_HALF\n  #define AH1 min16float\n  #define AH2 min16float2\n  #define AH3 min16float3\n  #define AH4 min16float4\n//------------------------------------------------------------------------------------------------------------------------------\n  #define AW1 min16uint\n  #define AW2 min16uint2\n  #define AW3 min16uint3\n  #define AW4 min16uint4\n//------------------------------------------------------------------------------------------------------------------------------\n  #define ASW1 min16int\n  #define ASW2 min16int2\n  #define ASW3 min16int3\n  #define ASW4 min16int4\n//==============================================================================================================================\n  // Need to use manual unpack to get optimal execution (don't use packed types in buffers directly).\n  // Unpack requires this pattern: https://gpuopen.com/first-steps-implementing-fp16/\n  AH2 AH2_AU1_x(AU1 x){AF2 t=f16tof32(AU2(x&0xFFFF,x>>16));return AH2(t);}\n  AH4 AH4_AU2_x(AU2 x){return AH4(AH2_AU1_x(x.x),AH2_AU1_x(x.y));}\n  AW2 AW2_AU1_x(AU1 x){AU2 t=AU2(x&0xFFFF,x>>16);return AW2(t);}\n  AW4 AW4_AU2_x(AU2 x){return AW4(AW2_AU1_x(x.x),AW2_AU1_x(x.y));}\n  #define AH2_AU1(x) AH2_AU1_x(AU1(x))\n  #define AH4_AU2(x) AH4_AU2_x(AU2(x))\n  #define AW2_AU1(x) AW2_AU1_x(AU1(x))\n  #define AW4_AU2(x) AW4_AU2_x(AU2(x))\n//------------------------------------------------------------------------------------------------------------------------------\n  AU1 AU1_AH2_x(AH2 x){return f32tof16(x.x)+(f32tof16(x.y)<<16);}\n  AU2 AU2_AH4_x(AH4 x){return AU2(AU1_AH2_x(x.xy),AU1_AH2_x(x.zw));}\n  AU1 AU1_AW2_x(AW2 x){return AU1(x.x)+(AU1(x.y)<<16);}\n  AU2 AU2_AW4_x(AW4 x){return AU2(AU1_AW2_x(x.xy),AU1_AW2_x(x.zw));}\n  #define AU1_AH2(x) AU1_AH2_x(AH2(x))\n  #define AU2_AH4(x) AU2_AH4_x(AH4(x))\n  #define AU1_AW2(x) AU1_AW2_x(AW2(x))\n  #define AU2_AW4(x) AU2_AW4_x(AW4(x))\n//==============================================================================================================================\n  // TODO: These are broken!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  #define AW1_AH1(x) AW1(asuint(AF1(x)))\n  #define AW2_AH2(x) AW2(asuint(AF2(x)))\n  #define AW3_AH3(x) AW3(asuint(AF3(x)))\n  #define AW4_AH4(x) AW4(asuint(AF4(x)))\n//------------------------------------------------------------------------------------------------------------------------------\n  // TODO: These are broken!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  #define AH1_AW1(x) AH1(asfloat(AU1(x)))\n  #define AH2_AW2(x) AH2(asfloat(AU2(x)))\n  #define AH3_AW3(x) AH3(asfloat(AU3(x)))\n  #define AH4_AW4(x) AH4(asfloat(AU4(x)))\n//==============================================================================================================================\n  AH1 AH1_x(AH1 a){return AH1(a);}\n  AH2 AH2_x(AH1 a){return AH2(a,a);}\n  AH3 AH3_x(AH1 a){return AH3(a,a,a);}\n  AH4 AH4_x(AH1 a){return AH4(a,a,a,a);}\n  #define AH1_(a) AH1_x(AH1(a))\n  #define AH2_(a) AH2_x(AH1(a))\n  #define AH3_(a) AH3_x(AH1(a))\n  #define AH4_(a) AH4_x(AH1(a))\n//------------------------------------------------------------------------------------------------------------------------------\n  AW1 AW1_x(AW1 a){return AW1(a);}\n  AW2 AW2_x(AW1 a){return AW2(a,a);}\n  AW3 AW3_x(AW1 a){return AW3(a,a,a);}\n  AW4 AW4_x(AW1 a){return AW4(a,a,a,a);}\n  #define AW1_(a) AW1_x(AW1(a))\n  #define AW2_(a) AW2_x(AW1(a))\n  #define AW3_(a) AW3_x(AW1(a))\n  #define AW4_(a) AW4_x(AW1(a))\n//==============================================================================================================================\n  AW1 AAbsSW1(AW1 a){return AW1(abs(ASW1(a)));}\n  AW2 AAbsSW2(AW2 a){return AW2(abs(ASW2(a)));}\n  AW3 AAbsSW3(AW3 a){return AW3(abs(ASW3(a)));}\n  AW4 AAbsSW4(AW4 a){return AW4(abs(ASW4(a)));}\n//------------------------------------------------------------------------------------------------------------------------------\n // V_FRACT_F16 (note DX frac() is different).\n  AH1 AFractH1(AH1 x){return x-floor(x);}\n  AH2 AFractH2(AH2 x){return x-floor(x);}\n  AH3 AFractH3(AH3 x){return x-floor(x);}\n  AH4 AFractH4(AH4 x){return x-floor(x);}\n//------------------------------------------------------------------------------------------------------------------------------\n  AH1 ALerpH1(AH1 x,AH1 y,AH1 a){return lerp(x,y,a);}\n  AH2 ALerpH2(AH2 x,AH2 y,AH2 a){return lerp(x,y,a);}\n  AH3 ALerpH3(AH3 x,AH3 y,AH3 a){return lerp(x,y,a);}\n  AH4 ALerpH4(AH4 x,AH4 y,AH4 a){return lerp(x,y,a);}\n//------------------------------------------------------------------------------------------------------------------------------\n  AH1 AMax3H1(AH1 x,AH1 y,AH1 z){return max(x,max(y,z));}\n  AH2 AMax3H2(AH2 x,AH2 y,AH2 z){return max(x,max(y,z));}\n  AH3 AMax3H3(AH3 x,AH3 y,AH3 z){return max(x,max(y,z));}\n  AH4 AMax3H4(AH4 x,AH4 y,AH4 z){return max(x,max(y,z));}\n//------------------------------------------------------------------------------------------------------------------------------\n  AW1 AMaxSW1(AW1 a,AW1 b){return AW1(max(ASU1(a),ASU1(b)));}\n  AW2 AMaxSW2(AW2 a,AW2 b){return AW2(max(ASU2(a),ASU2(b)));}\n  AW3 AMaxSW3(AW3 a,AW3 b){return AW3(max(ASU3(a),ASU3(b)));}\n  AW4 AMaxSW4(AW4 a,AW4 b){return AW4(max(ASU4(a),ASU4(b)));}\n//------------------------------------------------------------------------------------------------------------------------------\n  AH1 AMin3H1(AH1 x,AH1 y,AH1 z){return min(x,min(y,z));}\n  AH2 AMin3H2(AH2 x,AH2 y,AH2 z){return min(x,min(y,z));}\n  AH3 AMin3H3(AH3 x,AH3 y,AH3 z){return min(x,min(y,z));}\n  AH4 AMin3H4(AH4 x,AH4 y,AH4 z){return min(x,min(y,z));}\n//------------------------------------------------------------------------------------------------------------------------------\n  AW1 AMinSW1(AW1 a,AW1 b){return AW1(min(ASU1(a),ASU1(b)));}\n  AW2 AMinSW2(AW2 a,AW2 b){return AW2(min(ASU2(a),ASU2(b)));}\n  AW3 AMinSW3(AW3 a,AW3 b){return AW3(min(ASU3(a),ASU3(b)));}\n  AW4 AMinSW4(AW4 a,AW4 b){return AW4(min(ASU4(a),ASU4(b)));}\n//------------------------------------------------------------------------------------------------------------------------------\n  AH1 ARcpH1(AH1 x){return rcp(x);}\n  AH2 ARcpH2(AH2 x){return rcp(x);}\n  AH3 ARcpH3(AH3 x){return rcp(x);}\n  AH4 ARcpH4(AH4 x){return rcp(x);}\n//------------------------------------------------------------------------------------------------------------------------------\n  AH1 ARsqH1(AH1 x){return rsqrt(x);}\n  AH2 ARsqH2(AH2 x){return rsqrt(x);}\n  AH3 ARsqH3(AH3 x){return rsqrt(x);}\n  AH4 ARsqH4(AH4 x){return rsqrt(x);}\n//------------------------------------------------------------------------------------------------------------------------------\n  AH1 ASatH1(AH1 x){return saturate(x);}\n  AH2 ASatH2(AH2 x){return saturate(x);}\n  AH3 ASatH3(AH3 x){return saturate(x);}\n  AH4 ASatH4(AH4 x){return saturate(x);}\n//------------------------------------------------------------------------------------------------------------------------------\n  AW1 AShrSW1(AW1 a,AW1 b){return AW1(ASW1(a)>>ASW1(b));}\n  AW2 AShrSW2(AW2 a,AW2 b){return AW2(ASW2(a)>>ASW2(b));}\n  AW3 AShrSW3(AW3 a,AW3 b){return AW3(ASW3(a)>>ASW3(b));}\n  AW4 AShrSW4(AW4 a,AW4 b){return AW4(ASW4(a)>>ASW4(b));}\n #endif\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                         HLSL DOUBLE\n//==============================================================================================================================\n #ifdef A_DUBL\n  #define AD1 double\n  #define AD2 double2\n  #define AD3 double3\n  #define AD4 double4\n//------------------------------------------------------------------------------------------------------------------------------\n  AD1 AD1_x(AD1 a){return AD1(a);}\n  AD2 AD2_x(AD1 a){return AD2(a,a);}\n  AD3 AD3_x(AD1 a){return AD3(a,a,a);}\n  AD4 AD4_x(AD1 a){return AD4(a,a,a,a);}\n  #define AD1_(a) AD1_x(AD1(a))\n  #define AD2_(a) AD2_x(AD1(a))\n  #define AD3_(a) AD3_x(AD1(a))\n  #define AD4_(a) AD4_x(AD1(a))\n//==============================================================================================================================\n  AD1 AFractD1(AD1 a){return a-floor(a);}\n  AD2 AFractD2(AD2 a){return a-floor(a);}\n  AD3 AFractD3(AD3 a){return a-floor(a);}\n  AD4 AFractD4(AD4 a){return a-floor(a);}\n//------------------------------------------------------------------------------------------------------------------------------\n  AD1 ALerpD1(AD1 x,AD1 y,AD1 a){return lerp(x,y,a);}\n  AD2 ALerpD2(AD2 x,AD2 y,AD2 a){return lerp(x,y,a);}\n  AD3 ALerpD3(AD3 x,AD3 y,AD3 a){return lerp(x,y,a);}\n  AD4 ALerpD4(AD4 x,AD4 y,AD4 a){return lerp(x,y,a);}\n//------------------------------------------------------------------------------------------------------------------------------\n  AD1 ARcpD1(AD1 x){return rcp(x);}\n  AD2 ARcpD2(AD2 x){return rcp(x);}\n  AD3 ARcpD3(AD3 x){return rcp(x);}\n  AD4 ARcpD4(AD4 x){return rcp(x);}\n//------------------------------------------------------------------------------------------------------------------------------\n  AD1 ARsqD1(AD1 x){return rsqrt(x);}\n  AD2 ARsqD2(AD2 x){return rsqrt(x);}\n  AD3 ARsqD3(AD3 x){return rsqrt(x);}\n  AD4 ARsqD4(AD4 x){return rsqrt(x);}\n//------------------------------------------------------------------------------------------------------------------------------\n  AD1 ASatD1(AD1 x){return saturate(x);}\n  AD2 ASatD2(AD2 x){return saturate(x);}\n  AD3 ASatD3(AD3 x){return saturate(x);}\n  AD4 ASatD4(AD4 x){return saturate(x);}\n #endif\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                         HLSL LONG\n//==============================================================================================================================\n #ifdef A_LONG\n #endif\n//==============================================================================================================================\n#endif\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//\n//\n//                                                          GPU COMMON\n//\n//\n//==============================================================================================================================\n#ifdef A_GPU\n // Negative and positive infinity.\n #define A_INFN_F AF1_AU1(0x7f800000u)\n #define A_INFP_F AF1_AU1(0xff800000u)\n//------------------------------------------------------------------------------------------------------------------------------\n // Copy sign from 's' to positive 'd'.\n AF1 ACpySgnF1(AF1 d,AF1 s){return AF1_AU1(AU1_AF1(d)|(AU1_AF1(s)&AU1_(0x80000000u)));}\n AF2 ACpySgnF2(AF2 d,AF2 s){return AF2_AU2(AU2_AF2(d)|(AU2_AF2(s)&AU2_(0x80000000u)));}\n AF3 ACpySgnF3(AF3 d,AF3 s){return AF3_AU3(AU3_AF3(d)|(AU3_AF3(s)&AU3_(0x80000000u)));}\n AF4 ACpySgnF4(AF4 d,AF4 s){return AF4_AU4(AU4_AF4(d)|(AU4_AF4(s)&AU4_(0x80000000u)));}\n//------------------------------------------------------------------------------------------------------------------------------\n // Single operation to return (useful to create a mask to use in lerp for branch free logic),\n //  m=NaN := 0\n //  m>=0  := 0\n //  m<0   := 1\n // Uses the following useful floating point logic,\n //  saturate(+a*(-INF)==-INF) := 0\n //  saturate( 0*(-INF)== NaN) := 0\n //  saturate(-a*(-INF)==+INF) := 1\n AF1 ASignedF1(AF1 m){return ASatF1(m*AF1_(A_INFN_F));}\n AF2 ASignedF2(AF2 m){return ASatF2(m*AF2_(A_INFN_F));}\n AF3 ASignedF3(AF3 m){return ASatF3(m*AF3_(A_INFN_F));}\n AF4 ASignedF4(AF4 m){return ASatF4(m*AF4_(A_INFN_F));}\n//==============================================================================================================================\n #ifdef A_HALF\n  #define A_INFN_H AH1_AW1(0x7c00u)\n  #define A_INFP_H AH1_AW1(0xfc00u)\n//------------------------------------------------------------------------------------------------------------------------------\n  AH1 ACpySgnH1(AH1 d,AH1 s){return AH1_AW1(AW1_AH1(d)|(AW1_AH1(s)&AW1_(0x8000u)));}\n  AH2 ACpySgnH2(AH2 d,AH2 s){return AH2_AW2(AW2_AH2(d)|(AW2_AH2(s)&AW2_(0x8000u)));}\n  AH3 ACpySgnH3(AH3 d,AH3 s){return AH3_AW3(AW3_AH3(d)|(AW3_AH3(s)&AW3_(0x8000u)));}\n  AH4 ACpySgnH4(AH4 d,AH4 s){return AH4_AW4(AW4_AH4(d)|(AW4_AH4(s)&AW4_(0x8000u)));}\n//------------------------------------------------------------------------------------------------------------------------------\n  AH1 ASignedH1(AH1 m){return ASatH1(m*AH1_(A_INFN_H));}\n  AH2 ASignedH2(AH2 m){return ASatH2(m*AH2_(A_INFN_H));}\n  AH3 ASignedH3(AH3 m){return ASatH3(m*AH3_(A_INFN_H));}\n  AH4 ASignedH4(AH4 m){return ASatH4(m*AH4_(A_INFN_H));}\n #endif\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                     HALF APPROXIMATIONS\n//------------------------------------------------------------------------------------------------------------------------------\n// These support only positive inputs.\n// Did not see value yet in specialization for range.\n// Using quick testing, ended up mostly getting the same \"best\" approximation for various ranges.\n// With hardware that can co-execute transcendentals, the value in approximations could be less than expected.\n// However from a latency perspective, if execution of a transcendental is 4 clk, with no packed support, -> 8 clk total.\n// And co-execution would require a compiler interleaving a lot of independent work for packed usage.\n//------------------------------------------------------------------------------------------------------------------------------\n// The one Newton Raphson iteration form of rsq() was skipped (requires 6 ops total).\n// Same with sqrt(), as this could be x*rsq() (7 ops).\n//------------------------------------------------------------------------------------------------------------------------------\n// IDEAS\n// =====\n//  - Polaris hardware has 16-bit support, but non-double rate.\n//    Could be possible still get part double rate for some of this logic, \n//    by clearing out the lower half's sign when necessary and using 32-bit ops...\n//==============================================================================================================================\n #ifdef A_HALF\n  // Minimize squared error across full positive range, 2 ops.\n  // The 0x1de2 based approximation maps {0 to 1} input maps to < 1 output.\n  AH1 APrxLoSqrtH1(AH1 a){return AH1_AW1((AW1_AH1(a)>>AW1_(1))+AW1_(0x1de2));}\n  AH2 APrxLoSqrtH2(AH2 a){return AH2_AW2((AW2_AH2(a)>>AW2_(1))+AW2_(0x1de2));}\n//------------------------------------------------------------------------------------------------------------------------------\n  // Lower precision estimation, 1 op.\n  // Minimize squared error across {smallest normal to 16384.0}.\n  AH1 APrxLoRcpH1(AH1 a){return AH1_AW1(AW1_(0x7784)-AW1_AH1(a));}\n  AH2 APrxLoRcpH2(AH2 a){return AH2_AW2(AW2_(0x7784)-AW2_AH2(a));}\n//------------------------------------------------------------------------------------------------------------------------------\n  // Medium precision estimation, one Newton Raphson iteration, 3 ops.\n  AH1 APrxMedRcpH1(AH1 a){AH1 b=AH1_AW1(AW1_(0x778d)-AW1_AH1(a));return b*(-b*a+AH1_(2.0));}\n  AH2 APrxMedRcpH2(AH2 a){AH2 b=AH2_AW2(AW2_(0x778d)-AW2_AH2(a));return b*(-b*a+AH2_(2.0));}\n//------------------------------------------------------------------------------------------------------------------------------\n  // Minimize squared error across {smallest normal to 16384.0}, 2 ops.\n  AH1 APrxLoRsqH1(AH1 a){return AH1_AW1(AW1_(0x59a3)-(AW1_AH1(a)>>AW1_(1)));}\n  AH2 APrxLoRsqH2(AH2 a){return AH2_AW2(AW2_(0x59a3)-(AW2_AH2(a)>>AW2_(1)));}\n #endif\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                    FLOAT APPROXIMATIONS\n//------------------------------------------------------------------------------------------------------------------------------\n// Michal Drobot has an excellent presentation on these: \"Low Level Optimizations For GCN\",\n//  - Idea dates back to SGI, then to Quake 3, etc.\n//  - https://michaldrobot.files.wordpress.com/2014/05/gcn_alu_opt_digitaldragons2014.pdf\n//     - sqrt(x)=rsqrt(x)*x\n//     - rcp(x)=rsqrt(x)*rsqrt(x) for positive x\n//  - https://github.com/michaldrobot/ShaderFastLibs/blob/master/ShaderFastMathLib.h\n//------------------------------------------------------------------------------------------------------------------------------\n// These below are from perhaps less complete searching for optimal.\n// Used FP16 normal range for testing with +4096 32-bit step size for sampling error.\n// So these match up well with the half approximations.\n//==============================================================================================================================\n AF1 APrxLoSqrtF1(AF1 a){return AF1_AU1((AU1_AF1(a)>>AU1_(1))+AU1_(0x1fbc4639));}\n AF1 APrxLoRcpF1(AF1 a){return AF1_AU1(AU1_(0x7ef07ebb)-AU1_AF1(a));}\n AF1 APrxMedRcpF1(AF1 a){AF1 b=AF1_AU1(AU1_(0x7ef19fff)-AU1_AF1(a));return b*(-b*a+AF1_(2.0));}\n AF1 APrxLoRsqF1(AF1 a){return AF1_AU1(AU1_(0x5f347d74)-(AU1_AF1(a)>>AU1_(1)));}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                    PARABOLIC SIN & COS\n//------------------------------------------------------------------------------------------------------------------------------\n// Approximate answers to transcendental questions.\n//------------------------------------------------------------------------------------------------------------------------------\n// TODO\n// ====\n//  - Verify packed math ABS is correctly doing an AND.\n//==============================================================================================================================\n // Valid input range is {-1 to 1} representing {0 to 2 pi}.\n // Output range is {-1/4 to -1/4} representing {-1 to 1}.\n AF1 APSinF1(AF1 x){return x*abs(x)-x;} // MAD.\n AF1 APCosF1(AF1 x){x=AFractF1(x*AF1_(0.5)+AF1_(0.75));x=x*AF1_(2.0)-AF1_(1.0);return APSinF1(x);} // 3x MAD, FRACT \n//------------------------------------------------------------------------------------------------------------------------------\n #ifdef A_HALF\n  // For a packed {sin,cos} pair,\n  //  - Native takes 16 clocks and 4 issue slots (no packed transcendentals).\n  //  - Parabolic takes 8 clocks and 8 issue slots (only fract is non-packed).\n  AH2 APSinH2(AH2 x){return x*abs(x)-x;} // AND,FMA\n  AH2 APCosH2(AH2 x){x=AFractH2(x*AH2_(0.5)+AH2_(0.75));x=x*AH2_(2.0)-AH2_(1.0);return APSinH2(x);} // 3x FMA, 2xFRACT, AND \n #endif\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                      COLOR CONVERSIONS\n//------------------------------------------------------------------------------------------------------------------------------\n// These are all linear to/from some other space (where 'linear' has been shortened out of the function name).\n// So 'ToGamma' is 'LinearToGamma', and 'FromGamma' is 'LinearFromGamma'.\n// These are branch free implementations.\n// The AToSrgbF1() function is useful for stores for compute shaders for GPUs without hardware linear->sRGB store conversion.\n//------------------------------------------------------------------------------------------------------------------------------\n// TRANSFER FUNCTIONS\n// ==================\n// 709 ..... Rec709 used for some HDTVs\n// Gamma ... Typically 2.2 for some PC displays, or 2.4-2.5 for CRTs, or 2.2 FreeSync2 native\n// Pq ...... PQ native for HDR10\n// Srgb .... The sRGB output, typical of PC displays, useful for 10-bit output, or storing to 8-bit UNORM without SRGB type\n// Two ..... Gamma 2.0, fastest conversion (useful for intermediate pass approximations)\n//------------------------------------------------------------------------------------------------------------------------------\n// FOR PQ\n// ======\n// Both input and output is {0.0-1.0}, and where output 1.0 represents 10000.0 cd/m^2.\n// All constants are only specified to FP32 precision.\n// External PQ source reference,\n//  - https://github.com/ampas/aces-dev/blob/master/transforms/ctl/utilities/ACESlib.Utilities_Color.a1.0.1.ctl\n//------------------------------------------------------------------------------------------------------------------------------\n// PACKED VERSIONS\n// ===============\n// These are the A*H2() functions.\n// There is no PQ functions as FP16 seemed to not have enough precision for the conversion.\n// The remaining functions are \"good enough\" for 8-bit, and maybe 10-bit if not concerned about a few 1-bit errors.\n// Precision is lowest in the 709 conversion, higher in sRGB, higher still in Two and Gamma (when using 2.2 at least).\n//------------------------------------------------------------------------------------------------------------------------------\n// NOTES\n// =====\n// Could be faster for PQ conversions to be in ALU or a texture lookup depending on usage case.\n//==============================================================================================================================\n AF1 ATo709F1(AF1 c){return max(min(c*AF1_(4.5),AF1_(0.018)),AF1_(1.099)*pow(c,AF1_(0.45))-AF1_(0.099));}\n//------------------------------------------------------------------------------------------------------------------------------\n // Note 'rcpX' is '1/x', where the 'x' is what would be used in AFromGamma().\n AF1 AToGammaF1(AF1 c,AF1 rcpX){return pow(c,rcpX);} \n//------------------------------------------------------------------------------------------------------------------------------\n AF1 AToPqF1(AF1 x){AF1 p=pow(x,AF1_(0.159302));\n  return pow((AF1_(0.835938)+AF1_(18.8516)*p)/(AF1_(1.0)+AF1_(18.6875)*p),AF1_(78.8438));}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 AToSrgbF1(AF1 c){return max(min(c*AF1_(12.92),AF1_(0.0031308)),AF1_(1.055)*pow(c,AF1_(0.41666))-AF1_(0.055));}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 AToTwoF1(AF1 c){return sqrt(c);}\n//==============================================================================================================================\n AF1 AFrom709F1(AF1 c){return max(min(c*AF1_(1.0/4.5),AF1_(0.081)),\n  pow((c+AF1_(0.099))*(AF1_(1.0)/(AF1_(1.099))),AF1_(1.0/0.45)));}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 AFromGammaF1(AF1 c,AF1 x){return pow(c,x);} \n//------------------------------------------------------------------------------------------------------------------------------\n AF1 AFromPqF1(AF1 x){AF1 p=pow(x,AF1_(0.0126833));\n  return pow(ASatF1(p-AF1_(0.835938))/(AF1_(18.8516)-AF1_(18.6875)*p),AF1_(6.27739));}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 AFromSrgbF1(AF1 c){return max(min(c*AF1_(1.0/12.92),AF1_(0.04045)),\n  pow((c+AF1_(0.055))*(AF1_(1.0)/AF1_(1.055)),AF1_(2.4)));}\n//------------------------------------------------------------------------------------------------------------------------------\n AF1 AFromTwoF1(AF1 c){return c*c;}\n//==============================================================================================================================\n #ifdef A_HALF\n  AH2 ATo709H2(AH2 c){return max(min(c*AH2_(4.5),AH2_(0.018)),AH2_(1.099)*pow(c,AH2_(0.45))-AH2_(0.099));}\n//------------------------------------------------------------------------------------------------------------------------------\n  AH2 AToGammaH2(AH2 c,AH1 rcpX){return pow(c,AH2_(rcpX));} \n//------------------------------------------------------------------------------------------------------------------------------\n  AH2 AToSrgbH2(AH2 c){return max(min(c*AH2_(12.92),AH2_(0.0031308)),AH2_(1.055)*pow(c,AH2_(0.41666))-AH2_(0.055));}\n//------------------------------------------------------------------------------------------------------------------------------\n  AH2 AToTwoH2(AH2 c){return sqrt(c);}\n #endif\n//==============================================================================================================================\n #ifdef A_HALF\n  AH2 AFrom709H2(AH2 c){return max(min(c*AH2_(1.0/4.5),AH2_(0.081)),\n   pow((c+AH2_(0.099))*(AH2_(1.0)/(AH2_(1.099))),AH2_(1.0/0.45)));}\n//------------------------------------------------------------------------------------------------------------------------------\n  AH2 AFromGammaH2(AH2 c,AH1 x){return pow(c,AH2_(x));}\n//------------------------------------------------------------------------------------------------------------------------------\n  AH2 AFromSrgbH2(AH2 c){return max(min(c*AH2_(1.0/12.92),AH2_(0.04045)),\n   pow((c+AH2_(0.055))*(AH2_(1.0)/AH2_(1.055)),AH2_(2.4)));}\n//------------------------------------------------------------------------------------------------------------------------------\n  AH2 AFromTwoH2(AH2 c){return c*c;}\n #endif\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                          CS REMAP\n//==============================================================================================================================\n // Simple remap 64x1 to 8x8 with rotated 2x2 pixel quads in quad linear.\n //  543210\n //  ======\n //  ..xxx.\n //  yy...y\n AU2 ARmp8x8(AU1 a){return AU2(ABfe(a,1u,3u),ABfiM(ABfe(a,3u,3u),a,1u));}\n//==============================================================================================================================\n // More complex remap 64x1 to 8x8 which is necessary for 2D wave reductions.\n //  543210\n //  ======\n //  .xx..x\n //  y..yy.\n // Details,\n //  LANE TO 8x8 MAPPING\n //  ===================\n //  00 01 08 09 10 11 18 19 \n //  02 03 0a 0b 12 13 1a 1b\n //  04 05 0c 0d 14 15 1c 1d\n //  06 07 0e 0f 16 17 1e 1f \n //  20 21 28 29 30 31 38 39 \n //  22 23 2a 2b 32 33 3a 3b\n //  24 25 2c 2d 34 35 3c 3d\n //  26 27 2e 2f 36 37 3e 3f \n AU2 ARmpRed8x8(AU1 a){return AU2(ABfiM(ABfe(a,2u,3u),a,1u),ABfiM(ABfe(a,3u,3u),ABfe(a,1u,2u),2u));}\n#endif\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//\n//                                                          REFERENCE\n//\n//------------------------------------------------------------------------------------------------------------------------------\n// IEEE FLOAT RULES\n// ================\n//  - saturate(NaN)=0, saturate(-INF)=0, saturate(+INF)=1\n//  - {+/-}0 * {+/-}INF = NaN\n//  - -INF + (+INF) = NaN\n//  - {+/-}0 / {+/-}0 = NaN\n//  - {+/-}INF / {+/-}INF = NaN\n//  - a<(-0) := sqrt(a) = NaN (a=-0.0 won't NaN)\n//  - 0 == -0\n//  - 4/0 = +INF\n//  - 4/-0 = -INF\n//  - 4+INF = +INF\n//  - 4-INF = -INF\n//  - 4*(+INF) = +INF\n//  - 4*(-INF) = -INF\n//  - -4*(+INF) = -INF\n//  - sqrt(+INF) = +INF\n//------------------------------------------------------------------------------------------------------------------------------\n// FP16 ENCODING\n// =============\n// fedcba9876543210\n// ----------------\n// ......mmmmmmmmmm  10-bit mantissa (encodes 11-bit 0.5 to 1.0 except for denormals)\n// .eeeee..........  5-bit exponent\n// .00000..........  denormals\n// .00001..........  -14 exponent\n// .11110..........   15 exponent\n// .111110000000000  infinity\n// .11111nnnnnnnnnn  NaN with n!=0\n// s...............  sign\n//------------------------------------------------------------------------------------------------------------------------------\n// FP16/INT16 ALIASING DENORMAL\n// ============================\n// 11-bit unsigned integers alias with half float denormal/normal values,\n//     1 = 2^(-24) = 1/16777216 ....................... first denormal value\n//     2 = 2^(-23)\n//   ...\n//  1023 = 2^(-14)*(1-2^(-10)) = 2^(-14)*(1-1/1024) ... last denormal value\n//  1024 = 2^(-14) = 1/16384 .......................... first normal value that still maps to integers\n//  2047 .............................................. last normal value that still maps to integers \n// Scaling limits,\n//  2^15 = 32768 ...................................... largest power of 2 scaling\n// Largest pow2 conversion mapping is at *32768,\n//     1 : 2^(-9) = 1/128\n//  1024 : 8\n//  2047 : a little less than 16\n//==============================================================================================================================\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//\n//\n//                                                     GPU/CPU PORTABILITY\n//\n//\n//------------------------------------------------------------------------------------------------------------------------------\n// This is the GPU implementation.\n// See the CPU implementation for docs.\n//==============================================================================================================================\n#ifdef A_GPU\n #define A_TRUE true\n #define A_FALSE false\n #define A_STATIC\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                     VECTOR ARGUMENT/RETURN/INITIALIZATION PORTABILITY\n//==============================================================================================================================\n #define retAD2 AD2\n #define retAD3 AD3\n #define retAD4 AD4\n #define retAF2 AF2\n #define retAF3 AF3\n #define retAF4 AF4\n #define retAL2 AL2\n #define retAL3 AL3\n #define retAL4 AL4\n #define retAU2 AU2\n #define retAU3 AU3\n #define retAU4 AU4\n//------------------------------------------------------------------------------------------------------------------------------\n #define inAD2 in AD2\n #define inAD3 in AD3\n #define inAD4 in AD4\n #define inAF2 in AF2\n #define inAF3 in AF3\n #define inAF4 in AF4\n #define inAL2 in AL2\n #define inAL3 in AL3\n #define inAL4 in AL4\n #define inAU2 in AU2\n #define inAU3 in AU3\n #define inAU4 in AU4\n//------------------------------------------------------------------------------------------------------------------------------\n #define inoutAD2 inout AD2\n #define inoutAD3 inout AD3\n #define inoutAD4 inout AD4\n #define inoutAF2 inout AF2\n #define inoutAF3 inout AF3\n #define inoutAF4 inout AF4\n #define inoutAL2 inout AL2\n #define inoutAL3 inout AL3\n #define inoutAL4 inout AL4\n #define inoutAU2 inout AU2\n #define inoutAU3 inout AU3\n #define inoutAU4 inout AU4\n//------------------------------------------------------------------------------------------------------------------------------\n #define outAD2 out AD2\n #define outAD3 out AD3\n #define outAD4 out AD4\n #define outAF2 out AF2\n #define outAF3 out AF3\n #define outAF4 out AF4\n #define outAL2 out AL2\n #define outAL3 out AL3\n #define outAL4 out AL4\n #define outAU2 out AU2\n #define outAU3 out AU3\n #define outAU4 out AU4\n//------------------------------------------------------------------------------------------------------------------------------\n #define varAD2(x) AD2 x\n #define varAD3(x) AD3 x\n #define varAD4(x) AD4 x\n #define varAF2(x) AF2 x\n #define varAF3(x) AF3 x\n #define varAF4(x) AF4 x\n #define varAL2(x) AL2 x\n #define varAL3(x) AL3 x\n #define varAL4(x) AL4 x\n #define varAU2(x) AU2 x\n #define varAU3(x) AU3 x\n #define varAU4(x) AU4 x\n//------------------------------------------------------------------------------------------------------------------------------\n #define initAD2(x,y) AD2(x,y)\n #define initAD3(x,y,z) AD3(x,y,z)\n #define initAD4(x,y,z,w) AD4(x,y,z,w)\n #define initAF2(x,y) AF2(x,y)\n #define initAF3(x,y,z) AF3(x,y,z)\n #define initAF4(x,y,z,w) AF4(x,y,z,w)\n #define initAL2(x,y) AL2(x,y)\n #define initAL3(x,y,z) AL3(x,y,z)\n #define initAL4(x,y,z,w) AL4(x,y,z,w)\n #define initAU2(x,y) AU2(x,y)\n #define initAU3(x,y,z) AU3(x,y,z)\n #define initAU4(x,y,z,w) AU4(x,y,z,w)\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                     SCALAR RETURN OPS\n//==============================================================================================================================\n #define AAbsD1(a) abs(AD1(a))\n #define AAbsF1(a) abs(AF1(a))\n//------------------------------------------------------------------------------------------------------------------------------\n #define ACosD1(a) cos(AD1(a))\n #define ACosF1(a) cos(AF1(a))\n//------------------------------------------------------------------------------------------------------------------------------\n #define ADotD2(a,b) dot(AD2(a),AD2(b))\n #define ADotD3(a,b) dot(AD3(a),AD3(b))\n #define ADotD4(a,b) dot(AD4(a),AD4(b))\n #define ADotF2(a,b) dot(AF2(a),AF2(b))\n #define ADotF3(a,b) dot(AF3(a),AF3(b))\n #define ADotF4(a,b) dot(AF4(a),AF4(b))\n//------------------------------------------------------------------------------------------------------------------------------\n #define AExp2D1(a) exp2(AD1(a))\n #define AExp2F1(a) exp2(AF1(a))\n//------------------------------------------------------------------------------------------------------------------------------\n #define AFloorD1(a) floor(AD1(a))\n #define AFloorF1(a) floor(AF1(a))\n//------------------------------------------------------------------------------------------------------------------------------\n #define ALog2D1(a) log2(AD1(a))\n #define ALog2F1(a) log2(AF1(a))\n//------------------------------------------------------------------------------------------------------------------------------\n #define AMaxD1(a,b) min(a,b)\n #define AMaxF1(a,b) min(a,b)\n #define AMaxL1(a,b) min(a,b)\n #define AMaxU1(a,b) min(a,b)\n//------------------------------------------------------------------------------------------------------------------------------\n #define AMinD1(a,b) min(a,b)\n #define AMinF1(a,b) min(a,b)\n #define AMinL1(a,b) min(a,b)\n #define AMinU1(a,b) min(a,b)\n//------------------------------------------------------------------------------------------------------------------------------\n #define ASinD1(a) sin(AD1(a))\n #define ASinF1(a) sin(AF1(a))\n//------------------------------------------------------------------------------------------------------------------------------\n #define ASqrtD1(a) sqrt(AD1(a))\n #define ASqrtF1(a) sqrt(AF1(a))\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                               SCALAR RETURN OPS - DEPENDENT\n//==============================================================================================================================\n #define APowD1(a,b) pow(AD1(a),AF1(b))\n #define APowF1(a,b) pow(AF1(a),AF1(b))\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                         VECTOR OPS\n//------------------------------------------------------------------------------------------------------------------------------\n// These are added as needed for production or prototyping, so not necessarily a complete set.\n// They follow a convention of taking in a destination and also returning the destination value to increase utility.\n//==============================================================================================================================\n #ifdef A_DUBL\n  AD2 opAAbsD2(outAD2 d,inAD2 a){d=abs(a);return d;}\n  AD3 opAAbsD3(outAD3 d,inAD3 a){d=abs(a);return d;}\n  AD4 opAAbsD4(outAD4 d,inAD4 a){d=abs(a);return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n  AD2 opAAddD2(outAD2 d,inAD2 a,inAD2 b){d=a+b;return d;}\n  AD3 opAAddD3(outAD3 d,inAD3 a,inAD3 b){d=a+b;return d;}\n  AD4 opAAddD4(outAD4 d,inAD4 a,inAD4 b){d=a+b;return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n  AD2 opACpyD2(outAD2 d,inAD2 a){d=a;return d;}\n  AD3 opACpyD3(outAD3 d,inAD3 a){d=a;return d;}\n  AD4 opACpyD4(outAD4 d,inAD4 a){d=a;return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n  AD2 opALerpD2(outAD2 d,inAD2 a,inAD2 b,inAD2 c){d=ALerpD2(a,b,c);return d;}\n  AD3 opALerpD3(outAD3 d,inAD3 a,inAD3 b,inAD3 c){d=ALerpD3(a,b,c);return d;}\n  AD4 opALerpD4(outAD4 d,inAD4 a,inAD4 b,inAD4 c){d=ALerpD4(a,b,c);return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n  AD2 opALerpOneD2(outAD2 d,inAD2 a,inAD2 b,AD1 c){d=ALerpD2(a,b,AD2_(c));return d;}\n  AD3 opALerpOneD3(outAD3 d,inAD3 a,inAD3 b,AD1 c){d=ALerpD3(a,b,AD3_(c));return d;}\n  AD4 opALerpOneD4(outAD4 d,inAD4 a,inAD4 b,AD1 c){d=ALerpD4(a,b,AD4_(c));return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n  AD2 opAMaxD2(outAD2 d,inAD2 a,inAD2 b){d=max(a,b);return d;}\n  AD3 opAMaxD3(outAD3 d,inAD3 a,inAD3 b){d=max(a,b);return d;}\n  AD4 opAMaxD4(outAD4 d,inAD4 a,inAD4 b){d=max(a,b);return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n  AD2 opAMinD2(outAD2 d,inAD2 a,inAD2 b){d=min(a,b);return d;}\n  AD3 opAMinD3(outAD3 d,inAD3 a,inAD3 b){d=min(a,b);return d;}\n  AD4 opAMinD4(outAD4 d,inAD4 a,inAD4 b){d=min(a,b);return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n  AD2 opAMulD2(outAD2 d,inAD2 a,inAD2 b){d=a*b;return d;}\n  AD3 opAMulD3(outAD3 d,inAD3 a,inAD3 b){d=a*b;return d;}\n  AD4 opAMulD4(outAD4 d,inAD4 a,inAD4 b){d=a*b;return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n  AD2 opAMulOneD2(outAD2 d,inAD2 a,AD1 b){d=a*AD2_(b);return d;}\n  AD3 opAMulOneD3(outAD3 d,inAD3 a,AD1 b){d=a*AD3_(b);return d;}\n  AD4 opAMulOneD4(outAD4 d,inAD4 a,AD1 b){d=a*AD4_(b);return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n  AD2 opANegD2(outAD2 d,inAD2 a){d=-a;return d;}\n  AD3 opANegD3(outAD3 d,inAD3 a){d=-a;return d;}\n  AD4 opANegD4(outAD4 d,inAD4 a){d=-a;return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n  AD2 opARcpD2(outAD2 d,inAD2 a){d=ARcpD2(a);return d;}\n  AD3 opARcpD3(outAD3 d,inAD3 a){d=ARcpD3(a);return d;}\n  AD4 opARcpD4(outAD4 d,inAD4 a){d=ARcpD4(a);return d;}\n #endif\n//==============================================================================================================================\n AF2 opAAbsF2(outAF2 d,inAF2 a){d=abs(a);return d;}\n AF3 opAAbsF3(outAF3 d,inAF3 a){d=abs(a);return d;}\n AF4 opAAbsF4(outAF4 d,inAF4 a){d=abs(a);return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n AF2 opAAddF2(outAF2 d,inAF2 a,inAF2 b){d=a+b;return d;}\n AF3 opAAddF3(outAF3 d,inAF3 a,inAF3 b){d=a+b;return d;}\n AF4 opAAddF4(outAF4 d,inAF4 a,inAF4 b){d=a+b;return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n AF2 opACpyF2(outAF2 d,inAF2 a){d=a;return d;}\n AF3 opACpyF3(outAF3 d,inAF3 a){d=a;return d;}\n AF4 opACpyF4(outAF4 d,inAF4 a){d=a;return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n AF2 opALerpF2(outAF2 d,inAF2 a,inAF2 b,inAF2 c){d=ALerpF2(a,b,c);return d;}\n AF3 opALerpF3(outAF3 d,inAF3 a,inAF3 b,inAF3 c){d=ALerpF3(a,b,c);return d;}\n AF4 opALerpF4(outAF4 d,inAF4 a,inAF4 b,inAF4 c){d=ALerpF4(a,b,c);return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n AF2 opALerpOneF2(outAF2 d,inAF2 a,inAF2 b,AF1 c){d=ALerpF2(a,b,AF2_(c));return d;}\n AF3 opALerpOneF3(outAF3 d,inAF3 a,inAF3 b,AF1 c){d=ALerpF3(a,b,AF3_(c));return d;}\n AF4 opALerpOneF4(outAF4 d,inAF4 a,inAF4 b,AF1 c){d=ALerpF4(a,b,AF4_(c));return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n AF2 opAMaxF2(outAF2 d,inAF2 a,inAF2 b){d=max(a,b);return d;}\n AF3 opAMaxF3(outAF3 d,inAF3 a,inAF3 b){d=max(a,b);return d;}\n AF4 opAMaxF4(outAF4 d,inAF4 a,inAF4 b){d=max(a,b);return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n AF2 opAMinF2(outAF2 d,inAF2 a,inAF2 b){d=min(a,b);return d;}\n AF3 opAMinF3(outAF3 d,inAF3 a,inAF3 b){d=min(a,b);return d;}\n AF4 opAMinF4(outAF4 d,inAF4 a,inAF4 b){d=min(a,b);return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n AF2 opAMulF2(outAF2 d,inAF2 a,inAF2 b){d=a*b;return d;}\n AF3 opAMulF3(outAF3 d,inAF3 a,inAF3 b){d=a*b;return d;}\n AF4 opAMulF4(outAF4 d,inAF4 a,inAF4 b){d=a*b;return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n AF2 opAMulOneF2(outAF2 d,inAF2 a,AF1 b){d=a*AF2_(b);return d;}\n AF3 opAMulOneF3(outAF3 d,inAF3 a,AF1 b){d=a*AF3_(b);return d;}\n AF4 opAMulOneF4(outAF4 d,inAF4 a,AF1 b){d=a*AF4_(b);return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n AF2 opANegF2(outAF2 d,inAF2 a){d=-a;return d;}\n AF3 opANegF3(outAF3 d,inAF3 a){d=-a;return d;}\n AF4 opANegF4(outAF4 d,inAF4 a){d=-a;return d;}\n//------------------------------------------------------------------------------------------------------------------------------\n AF2 opARcpF2(outAF2 d,inAF2 a){d=ARcpF2(a);return d;}\n AF3 opARcpF3(outAF3 d,inAF3 a){d=ARcpF3(a);return d;}\n AF4 opARcpF4(outAF4 d,inAF4 a){d=ARcpF4(a);return d;}\n#endif\n\n#define CAS_AREA_LIMIT 4.0\n//------------------------------------------------------------------------------------------------------------------------------\n// Pass in output and input resolution in pixels.\n// This returns true if CAS supports scaling in the given configuration.\nAP1 CasSupportScaling(AF1 outX,AF1 outY,AF1 inX,AF1 inY){return ((outX*outY)*ARcpF1(inX*inY))<=CAS_AREA_LIMIT;}\n//==============================================================================================================================\n// Call to setup required constant values (works on CPU or GPU).\nA_STATIC void CasSetup(\n outAU4 const0,\n outAU4 const1,\n AF1 sharpness, // 0 := default (lower ringing), 1 := maximum (higest ringing)\n AF1 inputSizeInPixelsX,\n AF1 inputSizeInPixelsY,\n AF1 outputSizeInPixelsX,\n AF1 outputSizeInPixelsY){\n  // Scaling terms.\n  const0[0]=AU1_AF1(inputSizeInPixelsX*ARcpF1(outputSizeInPixelsX));\n  const0[1]=AU1_AF1(inputSizeInPixelsY*ARcpF1(outputSizeInPixelsY));\n  const0[2]=AU1_AF1(AF1_(0.5)*inputSizeInPixelsX*ARcpF1(outputSizeInPixelsX)-AF1_(0.5));\n  const0[3]=AU1_AF1(AF1_(0.5)*inputSizeInPixelsY*ARcpF1(outputSizeInPixelsY)-AF1_(0.5));\n  // Sharpness value.\n  AF1 sharp=-ARcpF1(ALerpF1(8.0,5.0,ASatF1(sharpness)));\n  varAF2(hSharp)=initAF2(sharp,0.0);\n  const1[0]=AU1_AF1(sharp);\n  const1[1]=AU1_AH2_AF2(hSharp);\n  const1[2]=AU1_AF1(AF1_(8.0)*inputSizeInPixelsX*ARcpF1(outputSizeInPixelsX));\n  const1[3]=0u;}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                     NON-PACKED VERSION\n//==============================================================================================================================\n#ifdef A_GPU\n #ifdef CAS_PACKED_ONLY\n  // Avoid compiler error.\n  AF3 CasLoad(ASU2 p){return AF3(0.0,0.0,0.0);}\n  void CasInput(inout AF1 r,inout AF1 g,inout AF1 b){}\n #endif\n//------------------------------------------------------------------------------------------------------------------------------\n\n\nvec3 imageLoad(ivec2 point)\n{ return texture(iChannel0, vec2(point) / iChannelResolution[0].xy).rgb; }\n\nAF3 CasLoad(ASU2 p){return imageLoad(p).rgb;}\nvoid CasInput(inout AF1 r,inout AF1 g,inout AF1 b){}\n\n\nvoid CasFilter(\n out AF1 pixR, // Output values, non-vector so port between CasFilter() and CasFilterH() is easy.\n out AF1 pixG,\n out AF1 pixB,\n AU2 ip, // Integer pixel position in output.\n AU4 const0, // Constants generated by CasSetup().\n AU4 const1,\n AP1 noScaling){ // Must be a compile-time literal value, true = sharpen only (no resize).\n//------------------------------------------------------------------------------------------------------------------------------\n  // Debug a checker pattern of on/off tiles for visual inspection.\n  #ifdef CAS_DEBUG_CHECKER\n   if((((ip.x^ip.y)>>8u)&1u)==0u){AF3 pix0=CasLoad(ASU2(ip));\n    pixR=pix0.r;pixG=pix0.g;pixB=pix0.b;CasInput(pixR,pixG,pixB);return;}\n  #endif \n//------------------------------------------------------------------------------------------------------------------------------\n  // No scaling algorithm uses minimal 3x3 pixel neighborhood.\n  if(noScaling){\n   // a b c \n   // d e f\n   // g h i\n   ASU2 sp=ASU2(ip);\n   AF3 a=CasLoad(sp+ASU2(-1,-1));\n   AF3 b=CasLoad(sp+ASU2( 0,-1));\n   AF3 c=CasLoad(sp+ASU2( 1,-1));\n   AF3 d=CasLoad(sp+ASU2(-1, 0));\n   AF3 e=CasLoad(sp);\n   AF3 f=CasLoad(sp+ASU2( 1, 0));\n   AF3 g=CasLoad(sp+ASU2(-1, 1));\n   AF3 h=CasLoad(sp+ASU2( 0, 1));\n   AF3 i=CasLoad(sp+ASU2( 1, 1));\n   // Run optional input transform.\n   CasInput(a.r,a.g,a.b);\n   CasInput(b.r,b.g,b.b);\n   CasInput(c.r,c.g,c.b);\n   CasInput(d.r,d.g,d.b);\n   CasInput(e.r,e.g,e.b);\n   CasInput(f.r,f.g,f.b);\n   CasInput(g.r,g.g,g.b);\n   CasInput(h.r,h.g,h.b);\n   CasInput(i.r,i.g,i.b);\n   // Soft min and max.\n   //  a b c             b\n   //  d e f * 0.5  +  d e f * 0.5\n   //  g h i             h\n   // These are 2.0x bigger (factored out the extra multiply).\n   AF1 mnR=AMin3F1(AMin3F1(d.r,e.r,f.r),b.r,h.r);\n   AF1 mnG=AMin3F1(AMin3F1(d.g,e.g,f.g),b.g,h.g);\n   AF1 mnB=AMin3F1(AMin3F1(d.b,e.b,f.b),b.b,h.b);\n   #ifdef CAS_BETTER_DIAGONALS\n    AF1 mnR2=AMin3F1(AMin3F1(mnR,a.r,c.r),g.r,i.r);\n    AF1 mnG2=AMin3F1(AMin3F1(mnG,a.g,c.g),g.g,i.g);\n    AF1 mnB2=AMin3F1(AMin3F1(mnB,a.b,c.b),g.b,i.b);\n    mnR=mnR+mnR2;\n    mnG=mnG+mnG2;\n    mnB=mnB+mnB2;\n   #endif\n   AF1 mxR=AMax3F1(AMax3F1(d.r,e.r,f.r),b.r,h.r);\n   AF1 mxG=AMax3F1(AMax3F1(d.g,e.g,f.g),b.g,h.g);\n   AF1 mxB=AMax3F1(AMax3F1(d.b,e.b,f.b),b.b,h.b);\n   #ifdef CAS_BETTER_DIAGONALS\n    AF1 mxR2=AMax3F1(AMax3F1(mxR,a.r,c.r),g.r,i.r);\n    AF1 mxG2=AMax3F1(AMax3F1(mxG,a.g,c.g),g.g,i.g);\n    AF1 mxB2=AMax3F1(AMax3F1(mxB,a.b,c.b),g.b,i.b);\n    mxR=mxR+mxR2;\n    mxG=mxG+mxG2;\n    mxB=mxB+mxB2;\n   #endif\n   // Smooth minimum distance to signal limit divided by smooth max.\n   #ifdef CAS_GO_SLOWER\n    AF1 rcpMR=ARcpF1(mxR);\n    AF1 rcpMG=ARcpF1(mxG);\n    AF1 rcpMB=ARcpF1(mxB);\n   #else\n    AF1 rcpMR=APrxLoRcpF1(mxR);\n    AF1 rcpMG=APrxLoRcpF1(mxG);\n    AF1 rcpMB=APrxLoRcpF1(mxB);\n   #endif\n   #ifdef CAS_BETTER_DIAGONALS\n    AF1 ampR=ASatF1(min(mnR,AF1_(2.0)-mxR)*rcpMR);\n    AF1 ampG=ASatF1(min(mnG,AF1_(2.0)-mxG)*rcpMG);\n    AF1 ampB=ASatF1(min(mnB,AF1_(2.0)-mxB)*rcpMB);\n   #else\n    AF1 ampR=ASatF1(min(mnR,AF1_(1.0)-mxR)*rcpMR);\n    AF1 ampG=ASatF1(min(mnG,AF1_(1.0)-mxG)*rcpMG);\n    AF1 ampB=ASatF1(min(mnB,AF1_(1.0)-mxB)*rcpMB);\n   #endif\n   // Shaping amount of sharpening.\n   #ifdef CAS_GO_SLOWER\n    ampR=sqrt(ampR);\n    ampG=sqrt(ampG);\n    ampB=sqrt(ampB);\n   #else\n    ampR=APrxLoSqrtF1(ampR);\n    ampG=APrxLoSqrtF1(ampG);\n    ampB=APrxLoSqrtF1(ampB);\n   #endif\n   // Filter shape.\n   //  0 w 0\n   //  w 1 w\n   //  0 w 0\n   AF1 peak=AF1_AU1(const1.x);\n   AF1 wR=ampR*peak;\n   AF1 wG=ampG*peak;\n   AF1 wB=ampB*peak;\n   // Filter.\n   #ifndef CAS_SLOW\n    // Using green coef only, depending on dead code removal to strip out the extra overhead.\n    #ifdef CAS_GO_SLOWER\n     AF1 rcpWeight=ARcpF1(AF1_(1.0)+AF1_(4.0)*wG);\n    #else\n     AF1 rcpWeight=APrxMedRcpF1(AF1_(1.0)+AF1_(4.0)*wG);\n    #endif\n    pixR=ASatF1((b.r*wG+d.r*wG+f.r*wG+h.r*wG+e.r)*rcpWeight);\n    pixG=ASatF1((b.g*wG+d.g*wG+f.g*wG+h.g*wG+e.g)*rcpWeight);\n    pixB=ASatF1((b.b*wG+d.b*wG+f.b*wG+h.b*wG+e.b)*rcpWeight);\n   #else\n    #ifdef CAS_GO_SLOWER\n     AF1 rcpWeightR=ARcpF1(AF1_(1.0)+AF1_(4.0)*wR);\n     AF1 rcpWeightG=ARcpF1(AF1_(1.0)+AF1_(4.0)*wG);\n     AF1 rcpWeightB=ARcpF1(AF1_(1.0)+AF1_(4.0)*wB);\n    #else\n     AF1 rcpWeightR=APrxMedRcpF1(AF1_(1.0)+AF1_(4.0)*wR);\n     AF1 rcpWeightG=APrxMedRcpF1(AF1_(1.0)+AF1_(4.0)*wG);\n     AF1 rcpWeightB=APrxMedRcpF1(AF1_(1.0)+AF1_(4.0)*wB);\n    #endif\n    pixR=ASatF1((b.r*wR+d.r*wR+f.r*wR+h.r*wR+e.r)*rcpWeightR);\n    pixG=ASatF1((b.g*wG+d.g*wG+f.g*wG+h.g*wG+e.g)*rcpWeightG);\n    pixB=ASatF1((b.b*wB+d.b*wB+f.b*wB+h.b*wB+e.b)*rcpWeightB);\n   #endif\n   return;}\n//------------------------------------------------------------------------------------------------------------------------------\n  // Scaling algorithm adaptively interpolates between nearest 4 results of the non-scaling algorithm.\n  //  a b c d\n  //  e f g h\n  //  i j k l\n  //  m n o p\n  // Working these 4 results.\n  //  +-----+-----+\n  //  |     |     |\n  //  |  f..|..g  |\n  //  |  .  |  .  |\n  //  +-----+-----+\n  //  |  .  |  .  |\n  //  |  j..|..k  |\n  //  |     |     |\n  //  +-----+-----+\n  AF2 pp=AF2_AU2(ip)*AF2_AU2(const0.xy)+AF2_AU2(const0.zw);\n  AF2 fp=floor(pp);\n  pp-=fp;\n  ASU2 sp=ASU2(fp);\n  AF3 a=CasLoad(sp+ASU2(-1,-1));\n  AF3 b=CasLoad(sp+ASU2( 0,-1));\n  AF3 e=CasLoad(sp+ASU2(-1, 0));\n  AF3 f=CasLoad(sp);\n  AF3 c=CasLoad(sp+ASU2( 1,-1));\n  AF3 d=CasLoad(sp+ASU2( 2,-1));\n  AF3 g=CasLoad(sp+ASU2( 1, 0));\n  AF3 h=CasLoad(sp+ASU2( 2, 0));\n  AF3 i=CasLoad(sp+ASU2(-1, 1));\n  AF3 j=CasLoad(sp+ASU2( 0, 1));\n  AF3 m=CasLoad(sp+ASU2(-1, 2));\n  AF3 n=CasLoad(sp+ASU2( 0, 2));\n  AF3 k=CasLoad(sp+ASU2( 1, 1));\n  AF3 l=CasLoad(sp+ASU2( 2, 1));\n  AF3 o=CasLoad(sp+ASU2( 1, 2));\n  AF3 p=CasLoad(sp+ASU2( 2, 2));\n  // Run optional input transform.\n  CasInput(a.r,a.g,a.b);\n  CasInput(b.r,b.g,b.b);\n  CasInput(c.r,c.g,c.b);\n  CasInput(d.r,d.g,d.b);\n  CasInput(e.r,e.g,e.b);\n  CasInput(f.r,f.g,f.b);\n  CasInput(g.r,g.g,g.b);\n  CasInput(h.r,h.g,h.b);\n  CasInput(i.r,i.g,i.b);\n  CasInput(j.r,j.g,j.b);\n  CasInput(k.r,k.g,k.b);\n  CasInput(l.r,l.g,l.b);\n  CasInput(m.r,m.g,m.b);\n  CasInput(n.r,n.g,n.b);\n  CasInput(o.r,o.g,o.b);\n  CasInput(p.r,p.g,p.b);\n  // Soft min and max.\n  // These are 2.0x bigger (factored out the extra multiply).\n  //  a b c             b\n  //  e f g * 0.5  +  e f g * 0.5  [F]\n  //  i j k             j\n  AF1 mnfR=AMin3F1(AMin3F1(b.r,e.r,f.r),g.r,j.r);\n  AF1 mnfG=AMin3F1(AMin3F1(b.g,e.g,f.g),g.g,j.g);\n  AF1 mnfB=AMin3F1(AMin3F1(b.b,e.b,f.b),g.b,j.b);\n  #ifdef CAS_BETTER_DIAGONALS\n   AF1 mnfR2=AMin3F1(AMin3F1(mnfR,a.r,c.r),i.r,k.r);\n   AF1 mnfG2=AMin3F1(AMin3F1(mnfG,a.g,c.g),i.g,k.g);\n   AF1 mnfB2=AMin3F1(AMin3F1(mnfB,a.b,c.b),i.b,k.b);\n   mnfR=mnfR+mnfR2;\n   mnfG=mnfG+mnfG2;\n   mnfB=mnfB+mnfB2;\n  #endif\n  AF1 mxfR=AMax3F1(AMax3F1(b.r,e.r,f.r),g.r,j.r);\n  AF1 mxfG=AMax3F1(AMax3F1(b.g,e.g,f.g),g.g,j.g);\n  AF1 mxfB=AMax3F1(AMax3F1(b.b,e.b,f.b),g.b,j.b);\n  #ifdef CAS_BETTER_DIAGONALS\n   AF1 mxfR2=AMax3F1(AMax3F1(mxfR,a.r,c.r),i.r,k.r);\n   AF1 mxfG2=AMax3F1(AMax3F1(mxfG,a.g,c.g),i.g,k.g);\n   AF1 mxfB2=AMax3F1(AMax3F1(mxfB,a.b,c.b),i.b,k.b);\n   mxfR=mxfR+mxfR2;\n   mxfG=mxfG+mxfG2;\n   mxfB=mxfB+mxfB2;\n  #endif\n  //  b c d             c\n  //  f g h * 0.5  +  f g h * 0.5  [G]\n  //  j k l             k\n  AF1 mngR=AMin3F1(AMin3F1(c.r,f.r,g.r),h.r,k.r);\n  AF1 mngG=AMin3F1(AMin3F1(c.g,f.g,g.g),h.g,k.g);\n  AF1 mngB=AMin3F1(AMin3F1(c.b,f.b,g.b),h.b,k.b);\n  #ifdef CAS_BETTER_DIAGONALS\n   AF1 mngR2=AMin3F1(AMin3F1(mngR,b.r,d.r),j.r,l.r);\n   AF1 mngG2=AMin3F1(AMin3F1(mngG,b.g,d.g),j.g,l.g);\n   AF1 mngB2=AMin3F1(AMin3F1(mngB,b.b,d.b),j.b,l.b);\n   mngR=mngR+mngR2;\n   mngG=mngG+mngG2;\n   mngB=mngB+mngB2;\n  #endif\n  AF1 mxgR=AMax3F1(AMax3F1(c.r,f.r,g.r),h.r,k.r);\n  AF1 mxgG=AMax3F1(AMax3F1(c.g,f.g,g.g),h.g,k.g);\n  AF1 mxgB=AMax3F1(AMax3F1(c.b,f.b,g.b),h.b,k.b);\n  #ifdef CAS_BETTER_DIAGONALS\n   AF1 mxgR2=AMax3F1(AMax3F1(mxgR,b.r,d.r),j.r,l.r);\n   AF1 mxgG2=AMax3F1(AMax3F1(mxgG,b.g,d.g),j.g,l.g);\n   AF1 mxgB2=AMax3F1(AMax3F1(mxgB,b.b,d.b),j.b,l.b);\n   mxgR=mxgR+mxgR2;\n   mxgG=mxgG+mxgG2;\n   mxgB=mxgB+mxgB2;\n  #endif\n  //  e f g             f\n  //  i j k * 0.5  +  i j k * 0.5  [J]\n  //  m n o             n\n  AF1 mnjR=AMin3F1(AMin3F1(f.r,i.r,j.r),k.r,n.r);\n  AF1 mnjG=AMin3F1(AMin3F1(f.g,i.g,j.g),k.g,n.g);\n  AF1 mnjB=AMin3F1(AMin3F1(f.b,i.b,j.b),k.b,n.b);\n  #ifdef CAS_BETTER_DIAGONALS\n   AF1 mnjR2=AMin3F1(AMin3F1(mnjR,e.r,g.r),m.r,o.r);\n   AF1 mnjG2=AMin3F1(AMin3F1(mnjG,e.g,g.g),m.g,o.g);\n   AF1 mnjB2=AMin3F1(AMin3F1(mnjB,e.b,g.b),m.b,o.b);\n   mnjR=mnjR+mnjR2;\n   mnjG=mnjG+mnjG2;\n   mnjB=mnjB+mnjB2;\n  #endif\n  AF1 mxjR=AMax3F1(AMax3F1(f.r,i.r,j.r),k.r,n.r);\n  AF1 mxjG=AMax3F1(AMax3F1(f.g,i.g,j.g),k.g,n.g);\n  AF1 mxjB=AMax3F1(AMax3F1(f.b,i.b,j.b),k.b,n.b);\n  #ifdef CAS_BETTER_DIAGONALS\n   AF1 mxjR2=AMax3F1(AMax3F1(mxjR,e.r,g.r),m.r,o.r);\n   AF1 mxjG2=AMax3F1(AMax3F1(mxjG,e.g,g.g),m.g,o.g);\n   AF1 mxjB2=AMax3F1(AMax3F1(mxjB,e.b,g.b),m.b,o.b);\n   mxjR=mxjR+mxjR2;\n   mxjG=mxjG+mxjG2;\n   mxjB=mxjB+mxjB2;\n  #endif\n  //  f g h             g\n  //  j k l * 0.5  +  j k l * 0.5  [K]\n  //  n o p             o\n  AF1 mnkR=AMin3F1(AMin3F1(g.r,j.r,k.r),l.r,o.r);\n  AF1 mnkG=AMin3F1(AMin3F1(g.g,j.g,k.g),l.g,o.g);\n  AF1 mnkB=AMin3F1(AMin3F1(g.b,j.b,k.b),l.b,o.b);\n  #ifdef CAS_BETTER_DIAGONALS\n   AF1 mnkR2=AMin3F1(AMin3F1(mnkR,f.r,h.r),n.r,p.r);\n   AF1 mnkG2=AMin3F1(AMin3F1(mnkG,f.g,h.g),n.g,p.g);\n   AF1 mnkB2=AMin3F1(AMin3F1(mnkB,f.b,h.b),n.b,p.b);\n   mnkR=mnkR+mnkR2;\n   mnkG=mnkG+mnkG2;\n   mnkB=mnkB+mnkB2;\n  #endif\n  AF1 mxkR=AMax3F1(AMax3F1(g.r,j.r,k.r),l.r,o.r);\n  AF1 mxkG=AMax3F1(AMax3F1(g.g,j.g,k.g),l.g,o.g);\n  AF1 mxkB=AMax3F1(AMax3F1(g.b,j.b,k.b),l.b,o.b);\n  #ifdef CAS_BETTER_DIAGONALS\n   AF1 mxkR2=AMax3F1(AMax3F1(mxkR,f.r,h.r),n.r,p.r);\n   AF1 mxkG2=AMax3F1(AMax3F1(mxkG,f.g,h.g),n.g,p.g);\n   AF1 mxkB2=AMax3F1(AMax3F1(mxkB,f.b,h.b),n.b,p.b);\n   mxkR=mxkR+mxkR2;\n   mxkG=mxkG+mxkG2;\n   mxkB=mxkB+mxkB2;\n  #endif\n  // Smooth minimum distance to signal limit divided by smooth max.\n  #ifdef CAS_GO_SLOWER\n   AF1 rcpMfR=ARcpF1(mxfR);\n   AF1 rcpMfG=ARcpF1(mxfG);\n   AF1 rcpMfB=ARcpF1(mxfB);\n   AF1 rcpMgR=ARcpF1(mxgR);\n   AF1 rcpMgG=ARcpF1(mxgG);\n   AF1 rcpMgB=ARcpF1(mxgB);\n   AF1 rcpMjR=ARcpF1(mxjR);\n   AF1 rcpMjG=ARcpF1(mxjG);\n   AF1 rcpMjB=ARcpF1(mxjB);\n   AF1 rcpMkR=ARcpF1(mxkR);\n   AF1 rcpMkG=ARcpF1(mxkG);\n   AF1 rcpMkB=ARcpF1(mxkB);\n  #else\n   AF1 rcpMfR=APrxLoRcpF1(mxfR);\n   AF1 rcpMfG=APrxLoRcpF1(mxfG);\n   AF1 rcpMfB=APrxLoRcpF1(mxfB);\n   AF1 rcpMgR=APrxLoRcpF1(mxgR);\n   AF1 rcpMgG=APrxLoRcpF1(mxgG);\n   AF1 rcpMgB=APrxLoRcpF1(mxgB);\n   AF1 rcpMjR=APrxLoRcpF1(mxjR);\n   AF1 rcpMjG=APrxLoRcpF1(mxjG);\n   AF1 rcpMjB=APrxLoRcpF1(mxjB);\n   AF1 rcpMkR=APrxLoRcpF1(mxkR);\n   AF1 rcpMkG=APrxLoRcpF1(mxkG);\n   AF1 rcpMkB=APrxLoRcpF1(mxkB);\n  #endif\n  #ifdef CAS_BETTER_DIAGONALS\n   AF1 ampfR=ASatF1(min(mnfR,AF1_(2.0)-mxfR)*rcpMfR);\n   AF1 ampfG=ASatF1(min(mnfG,AF1_(2.0)-mxfG)*rcpMfG);\n   AF1 ampfB=ASatF1(min(mnfB,AF1_(2.0)-mxfB)*rcpMfB);\n   AF1 ampgR=ASatF1(min(mngR,AF1_(2.0)-mxgR)*rcpMgR);\n   AF1 ampgG=ASatF1(min(mngG,AF1_(2.0)-mxgG)*rcpMgG);\n   AF1 ampgB=ASatF1(min(mngB,AF1_(2.0)-mxgB)*rcpMgB);\n   AF1 ampjR=ASatF1(min(mnjR,AF1_(2.0)-mxjR)*rcpMjR);\n   AF1 ampjG=ASatF1(min(mnjG,AF1_(2.0)-mxjG)*rcpMjG);\n   AF1 ampjB=ASatF1(min(mnjB,AF1_(2.0)-mxjB)*rcpMjB);\n   AF1 ampkR=ASatF1(min(mnkR,AF1_(2.0)-mxkR)*rcpMkR);\n   AF1 ampkG=ASatF1(min(mnkG,AF1_(2.0)-mxkG)*rcpMkG);\n   AF1 ampkB=ASatF1(min(mnkB,AF1_(2.0)-mxkB)*rcpMkB);\n  #else\n   AF1 ampfR=ASatF1(min(mnfR,AF1_(1.0)-mxfR)*rcpMfR);\n   AF1 ampfG=ASatF1(min(mnfG,AF1_(1.0)-mxfG)*rcpMfG);\n   AF1 ampfB=ASatF1(min(mnfB,AF1_(1.0)-mxfB)*rcpMfB);\n   AF1 ampgR=ASatF1(min(mngR,AF1_(1.0)-mxgR)*rcpMgR);\n   AF1 ampgG=ASatF1(min(mngG,AF1_(1.0)-mxgG)*rcpMgG);\n   AF1 ampgB=ASatF1(min(mngB,AF1_(1.0)-mxgB)*rcpMgB);\n   AF1 ampjR=ASatF1(min(mnjR,AF1_(1.0)-mxjR)*rcpMjR);\n   AF1 ampjG=ASatF1(min(mnjG,AF1_(1.0)-mxjG)*rcpMjG);\n   AF1 ampjB=ASatF1(min(mnjB,AF1_(1.0)-mxjB)*rcpMjB);\n   AF1 ampkR=ASatF1(min(mnkR,AF1_(1.0)-mxkR)*rcpMkR);\n   AF1 ampkG=ASatF1(min(mnkG,AF1_(1.0)-mxkG)*rcpMkG);\n   AF1 ampkB=ASatF1(min(mnkB,AF1_(1.0)-mxkB)*rcpMkB);\n  #endif\n  // Shaping amount of sharpening.\n  #ifdef CAS_GO_SLOWER\n   ampfR=sqrt(ampfR);\n   ampfG=sqrt(ampfG);\n   ampfB=sqrt(ampfB);\n   ampgR=sqrt(ampgR);\n   ampgG=sqrt(ampgG);\n   ampgB=sqrt(ampgB);\n   ampjR=sqrt(ampjR);\n   ampjG=sqrt(ampjG);\n   ampjB=sqrt(ampjB);\n   ampkR=sqrt(ampkR);\n   ampkG=sqrt(ampkG);\n   ampkB=sqrt(ampkB);\n  #else\n   ampfR=APrxLoSqrtF1(ampfR);\n   ampfG=APrxLoSqrtF1(ampfG);\n   ampfB=APrxLoSqrtF1(ampfB);\n   ampgR=APrxLoSqrtF1(ampgR);\n   ampgG=APrxLoSqrtF1(ampgG);\n   ampgB=APrxLoSqrtF1(ampgB);\n   ampjR=APrxLoSqrtF1(ampjR);\n   ampjG=APrxLoSqrtF1(ampjG);\n   ampjB=APrxLoSqrtF1(ampjB);\n   ampkR=APrxLoSqrtF1(ampkR);\n   ampkG=APrxLoSqrtF1(ampkG);\n   ampkB=APrxLoSqrtF1(ampkB);\n  #endif\n  // Filter shape.\n  //  0 w 0\n  //  w 1 w\n  //  0 w 0\n  AF1 peak=AF1_AU1(const1.x);\n  AF1 wfR=ampfR*peak;\n  AF1 wfG=ampfG*peak;\n  AF1 wfB=ampfB*peak;\n  AF1 wgR=ampgR*peak;\n  AF1 wgG=ampgG*peak;\n  AF1 wgB=ampgB*peak;\n  AF1 wjR=ampjR*peak;\n  AF1 wjG=ampjG*peak;\n  AF1 wjB=ampjB*peak;\n  AF1 wkR=ampkR*peak;\n  AF1 wkG=ampkG*peak;\n  AF1 wkB=ampkB*peak;\n  // Blend between 4 results.\n  //  s t\n  //  u v\n  AF1 s=(AF1_(1.0)-pp.x)*(AF1_(1.0)-pp.y);\n  AF1 t=           pp.x *(AF1_(1.0)-pp.y);\n  AF1 u=(AF1_(1.0)-pp.x)*           pp.y ;\n  AF1 v=           pp.x *           pp.y ;\n  // Thin edges to hide bilinear interpolation (helps diagonals).\n  AF1 thinB=1.0/32.0;\n  #ifdef CAS_GO_SLOWER\n   s*=ARcpF1(thinB+(mxfG-mnfG));\n   t*=ARcpF1(thinB+(mxgG-mngG));\n   u*=ARcpF1(thinB+(mxjG-mnjG));\n   v*=ARcpF1(thinB+(mxkG-mnkG));\n  #else\n   s*=APrxLoRcpF1(thinB+(mxfG-mnfG));\n   t*=APrxLoRcpF1(thinB+(mxgG-mngG));\n   u*=APrxLoRcpF1(thinB+(mxjG-mnjG));\n   v*=APrxLoRcpF1(thinB+(mxkG-mnkG));\n  #endif\n  // Final weighting.\n  //    b c\n  //  e f g h\n  //  i j k l\n  //    n o\n  //  _____  _____  _____  _____\n  //         fs        gt \n  //\n  //  _____  _____  _____  _____\n  //  fs      s gt  fs  t     gt\n  //         ju        kv\n  //  _____  _____  _____  _____\n  //         fs        gt\n  //  ju      u kv  ju  v     kv\n  //  _____  _____  _____  _____\n  //\n  //         ju        kv\n  AF1 qbeR=wfR*s;\n  AF1 qbeG=wfG*s;\n  AF1 qbeB=wfB*s;\n  AF1 qchR=wgR*t;\n  AF1 qchG=wgG*t;\n  AF1 qchB=wgB*t;\n  AF1 qfR=wgR*t+wjR*u+s;\n  AF1 qfG=wgG*t+wjG*u+s;\n  AF1 qfB=wgB*t+wjB*u+s;\n  AF1 qgR=wfR*s+wkR*v+t;\n  AF1 qgG=wfG*s+wkG*v+t;\n  AF1 qgB=wfB*s+wkB*v+t;\n  AF1 qjR=wfR*s+wkR*v+u;\n  AF1 qjG=wfG*s+wkG*v+u;\n  AF1 qjB=wfB*s+wkB*v+u;\n  AF1 qkR=wgR*t+wjR*u+v;\n  AF1 qkG=wgG*t+wjG*u+v;\n  AF1 qkB=wgB*t+wjB*u+v;\n  AF1 qinR=wjR*u;\n  AF1 qinG=wjG*u;\n  AF1 qinB=wjB*u;\n  AF1 qloR=wkR*v;\n  AF1 qloG=wkG*v;\n  AF1 qloB=wkB*v;\n  // Filter.\n  #ifndef CAS_SLOW\n   // Using green coef only, depending on dead code removal to strip out the extra overhead.\n   #ifdef CAS_GO_SLOWER\n    AF1 rcpWG=ARcpF1(AF1_(2.0)*qbeG+AF1_(2.0)*qchG+AF1_(2.0)*qinG+AF1_(2.0)*qloG+qfG+qgG+qjG+qkG);\n   #else\n    AF1 rcpWG=APrxMedRcpF1(AF1_(2.0)*qbeG+AF1_(2.0)*qchG+AF1_(2.0)*qinG+AF1_(2.0)*qloG+qfG+qgG+qjG+qkG);\n   #endif\n   pixR=ASatF1((b.r*qbeG+e.r*qbeG+c.r*qchG+h.r*qchG+i.r*qinG+n.r*qinG+l.r*qloG+o.r*qloG+f.r*qfG+g.r*qgG+j.r*qjG+k.r*qkG)*rcpWG);\n   pixG=ASatF1((b.g*qbeG+e.g*qbeG+c.g*qchG+h.g*qchG+i.g*qinG+n.g*qinG+l.g*qloG+o.g*qloG+f.g*qfG+g.g*qgG+j.g*qjG+k.g*qkG)*rcpWG);\n   pixB=ASatF1((b.b*qbeG+e.b*qbeG+c.b*qchG+h.b*qchG+i.b*qinG+n.b*qinG+l.b*qloG+o.b*qloG+f.b*qfG+g.b*qgG+j.b*qjG+k.b*qkG)*rcpWG);\n  #else\n   #ifdef CAS_GO_SLOWER\n    AF1 rcpWR=ARcpF1(AF1_(2.0)*qbeR+AF1_(2.0)*qchR+AF1_(2.0)*qinR+AF1_(2.0)*qloR+qfR+qgR+qjR+qkR);\n    AF1 rcpWG=ARcpF1(AF1_(2.0)*qbeG+AF1_(2.0)*qchG+AF1_(2.0)*qinG+AF1_(2.0)*qloG+qfG+qgG+qjG+qkG);\n    AF1 rcpWB=ARcpF1(AF1_(2.0)*qbeB+AF1_(2.0)*qchB+AF1_(2.0)*qinB+AF1_(2.0)*qloB+qfB+qgB+qjB+qkB);\n   #else\n    AF1 rcpWR=APrxMedRcpF1(AF1_(2.0)*qbeR+AF1_(2.0)*qchR+AF1_(2.0)*qinR+AF1_(2.0)*qloR+qfR+qgR+qjR+qkR);\n    AF1 rcpWG=APrxMedRcpF1(AF1_(2.0)*qbeG+AF1_(2.0)*qchG+AF1_(2.0)*qinG+AF1_(2.0)*qloG+qfG+qgG+qjG+qkG);\n    AF1 rcpWB=APrxMedRcpF1(AF1_(2.0)*qbeB+AF1_(2.0)*qchB+AF1_(2.0)*qinB+AF1_(2.0)*qloB+qfB+qgB+qjB+qkB);\n   #endif\n   pixR=ASatF1((b.r*qbeR+e.r*qbeR+c.r*qchR+h.r*qchR+i.r*qinR+n.r*qinR+l.r*qloR+o.r*qloR+f.r*qfR+g.r*qgR+j.r*qjR+k.r*qkR)*rcpWR);\n   pixG=ASatF1((b.g*qbeG+e.g*qbeG+c.g*qchG+h.g*qchG+i.g*qinG+n.g*qinG+l.g*qloG+o.g*qloG+f.g*qfG+g.g*qgG+j.g*qjG+k.g*qkG)*rcpWG);\n   pixB=ASatF1((b.b*qbeB+e.b*qbeB+c.b*qchB+h.b*qchB+i.b*qinB+n.b*qinB+l.b*qloB+o.b*qloB+f.b*qfB+g.b*qgB+j.b*qjB+k.b*qkB)*rcpWB);\n  #endif\n }\n#endif\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//_____________________________________________________________/\\_______________________________________________________________\n//==============================================================================================================================\n//                                                       PACKED VERSION\n//==============================================================================================================================\n#if defined(A_GPU) && defined(A_HALF)\n // Missing a way to do packed re-interpetation, so must disable approximation optimizations.\n #ifdef A_HLSL\n  #ifndef CAS_GO_SLOWER\n   #define CAS_GO_SLOWER 1\n  #endif\n #endif\n//==============================================================================================================================\n // Can be used to convert from packed SOA to AOS for store.\n void CasDepack(out AH4 pix0,out AH4 pix1,AH2 pixR,AH2 pixG,AH2 pixB){\n  #ifdef A_HLSL\n   // Invoke a slower path for DX only, since it won't allow uninitialized values.\n   pix0.a=pix1.a=0.0;\n  #endif\n  pix0.rgb=AH3(pixR.x,pixG.x,pixB.x);\n  pix1.rgb=AH3(pixR.y,pixG.y,pixB.y);}\n//==============================================================================================================================\n void CasFilterH(\n // Output values are for 2 8x8 tiles in a 16x8 region.\n //  pix<R,G,B>.x = right 8x8 tile\n //  pix<R,G,B>.y =  left 8x8 tile\n // This enables later processing to easily be packed as well.\n out AH2 pixR,\n out AH2 pixG,\n out AH2 pixB,\n AU2 ip, // Integer pixel position in output.\n AU4 const0, // Constants generated by CasSetup().\n AU4 const1,\n AP1 noScaling){ // Must be a compile-time literal value, true = sharpen only (no resize).\n//------------------------------------------------------------------------------------------------------------------------------\n  // Debug a checker pattern of on/off tiles for visual inspection.\n  #ifdef CAS_DEBUG_CHECKER\n   if((((ip.x^ip.y)>>8u)&1u)==0u){AH3 pix0=CasLoadH(ASW2(ip));AH3 pix1=CasLoadH(ASW2(ip)+ASW2(8,0));\n    pixR=AH2(pix0.r,pix1.r);pixG=AH2(pix0.g,pix1.g);pixB=AH2(pix0.b,pix1.b);CasInputH(pixR,pixG,pixB);return;}\n  #endif \n//------------------------------------------------------------------------------------------------------------------------------\n  // No scaling algorithm uses minimal 3x3 pixel neighborhood.\n  if(noScaling){\n   ASW2 sp0=ASW2(ip);\n   AH3 a0=CasLoadH(sp0+ASW2(-1,-1));\n   AH3 b0=CasLoadH(sp0+ASW2( 0,-1));\n   AH3 c0=CasLoadH(sp0+ASW2( 1,-1));\n   AH3 d0=CasLoadH(sp0+ASW2(-1, 0));\n   AH3 e0=CasLoadH(sp0);\n   AH3 f0=CasLoadH(sp0+ASW2( 1, 0));\n   AH3 g0=CasLoadH(sp0+ASW2(-1, 1));\n   AH3 h0=CasLoadH(sp0+ASW2( 0, 1));\n   AH3 i0=CasLoadH(sp0+ASW2( 1, 1));\n   ASW2 sp1=sp0+ASW2(8,0);\n   AH3 a1=CasLoadH(sp1+ASW2(-1,-1));\n   AH3 b1=CasLoadH(sp1+ASW2( 0,-1));\n   AH3 c1=CasLoadH(sp1+ASW2( 1,-1));\n   AH3 d1=CasLoadH(sp1+ASW2(-1, 0));\n   AH3 e1=CasLoadH(sp1);\n   AH3 f1=CasLoadH(sp1+ASW2( 1, 0));\n   AH3 g1=CasLoadH(sp1+ASW2(-1, 1));\n   AH3 h1=CasLoadH(sp1+ASW2( 0, 1));\n   AH3 i1=CasLoadH(sp1+ASW2( 1, 1));\n   // AOS to SOA conversion.\n   AH2 aR=AH2(a0.r,a1.r);\n   AH2 aG=AH2(a0.g,a1.g);\n   AH2 aB=AH2(a0.b,a1.b);\n   AH2 bR=AH2(b0.r,b1.r);\n   AH2 bG=AH2(b0.g,b1.g);\n   AH2 bB=AH2(b0.b,b1.b);\n   AH2 cR=AH2(c0.r,c1.r);\n   AH2 cG=AH2(c0.g,c1.g);\n   AH2 cB=AH2(c0.b,c1.b);\n   AH2 dR=AH2(d0.r,d1.r);\n   AH2 dG=AH2(d0.g,d1.g);\n   AH2 dB=AH2(d0.b,d1.b);\n   AH2 eR=AH2(e0.r,e1.r);\n   AH2 eG=AH2(e0.g,e1.g);\n   AH2 eB=AH2(e0.b,e1.b);\n   AH2 fR=AH2(f0.r,f1.r);\n   AH2 fG=AH2(f0.g,f1.g);\n   AH2 fB=AH2(f0.b,f1.b);\n   AH2 gR=AH2(g0.r,g1.r);\n   AH2 gG=AH2(g0.g,g1.g);\n   AH2 gB=AH2(g0.b,g1.b);\n   AH2 hR=AH2(h0.r,h1.r);\n   AH2 hG=AH2(h0.g,h1.g);\n   AH2 hB=AH2(h0.b,h1.b);\n   AH2 iR=AH2(i0.r,i1.r);\n   AH2 iG=AH2(i0.g,i1.g);\n   AH2 iB=AH2(i0.b,i1.b);\n   // Run optional input transform.\n   CasInputH(aR,aG,aB);\n   CasInputH(bR,bG,bB);\n   CasInputH(cR,cG,cB);\n   CasInputH(dR,dG,dB);\n   CasInputH(eR,eG,eB);\n   CasInputH(fR,fG,fB);\n   CasInputH(gR,gG,gB);\n   CasInputH(hR,hG,hB);\n   CasInputH(iR,iG,iB);\n   // Soft min and max.\n   AH2 mnR=min(min(fR,hR),min(min(bR,dR),eR));\n   AH2 mnG=min(min(fG,hG),min(min(bG,dG),eG));\n   AH2 mnB=min(min(fB,hB),min(min(bB,dB),eB));\n   #ifdef CAS_BETTER_DIAGONALS\n    AH2 mnR2=min(min(gR,iR),min(min(aR,cR),mnR));\n    AH2 mnG2=min(min(gG,iG),min(min(aG,cG),mnG));\n    AH2 mnB2=min(min(gB,iB),min(min(aB,cB),mnB));\n    mnR=mnR+mnR2;\n    mnG=mnG+mnG2;\n    mnB=mnB+mnB2;\n   #endif\n   AH2 mxR=max(max(fR,hR),max(max(bR,dR),eR));\n   AH2 mxG=max(max(fG,hG),max(max(bG,dG),eG));\n   AH2 mxB=max(max(fB,hB),max(max(bB,dB),eB));\n   #ifdef CAS_BETTER_DIAGONALS\n    AH2 mxR2=max(max(gR,iR),max(max(aR,cR),mxR));\n    AH2 mxG2=max(max(gG,iG),max(max(aG,cG),mxG));\n    AH2 mxB2=max(max(gB,iB),max(max(aB,cB),mxB));\n    mxR=mxR+mxR2;\n    mxG=mxG+mxG2;\n    mxB=mxB+mxB2;\n   #endif\n   // Smooth minimum distance to signal limit divided by smooth max.\n   #ifdef CAS_GO_SLOWER\n    AH2 rcpMR=ARcpH2(mxR);\n    AH2 rcpMG=ARcpH2(mxG);\n    AH2 rcpMB=ARcpH2(mxB);\n   #else\n    AH2 rcpMR=APrxLoRcpH2(mxR);\n    AH2 rcpMG=APrxLoRcpH2(mxG);\n    AH2 rcpMB=APrxLoRcpH2(mxB);\n   #endif\n   #ifdef CAS_BETTER_DIAGONALS\n    AH2 ampR=ASatH2(min(mnR,AH2_(2.0)-mxR)*rcpMR);\n    AH2 ampG=ASatH2(min(mnG,AH2_(2.0)-mxG)*rcpMG);\n    AH2 ampB=ASatH2(min(mnB,AH2_(2.0)-mxB)*rcpMB);\n   #else\n    AH2 ampR=ASatH2(min(mnR,AH2_(1.0)-mxR)*rcpMR);\n    AH2 ampG=ASatH2(min(mnG,AH2_(1.0)-mxG)*rcpMG);\n    AH2 ampB=ASatH2(min(mnB,AH2_(1.0)-mxB)*rcpMB);\n   #endif\n   // Shaping amount of sharpening.\n   #ifdef CAS_GO_SLOWER\n    ampR=sqrt(ampR);\n    ampG=sqrt(ampG);\n    ampB=sqrt(ampB);\n   #else\n    ampR=APrxLoSqrtH2(ampR);\n    ampG=APrxLoSqrtH2(ampG);\n    ampB=APrxLoSqrtH2(ampB);\n   #endif\n   // Filter shape.\n   AH1 peak=AH2_AU1(const1.y).x;\n   AH2 wR=ampR*AH2_(peak);\n   AH2 wG=ampG*AH2_(peak);\n   AH2 wB=ampB*AH2_(peak);\n   // Filter.\n   #ifndef CAS_SLOW\n    #ifdef CAS_GO_SLOWER\n     AH2 rcpWeight=ARcpH2(AH2_(1.0)+AH2_(4.0)*wG);\n    #else\n     AH2 rcpWeight=APrxMedRcpH2(AH2_(1.0)+AH2_(4.0)*wG);\n    #endif\n    pixR=ASatH2((bR*wG+dR*wG+fR*wG+hR*wG+eR)*rcpWeight);\n    pixG=ASatH2((bG*wG+dG*wG+fG*wG+hG*wG+eG)*rcpWeight);\n    pixB=ASatH2((bB*wG+dB*wG+fB*wG+hB*wG+eB)*rcpWeight);\n   #else\n    #ifdef CAS_GO_SLOWER\n     AH2 rcpWeightR=ARcpH2(AH2_(1.0)+AH2_(4.0)*wR);\n     AH2 rcpWeightG=ARcpH2(AH2_(1.0)+AH2_(4.0)*wG);\n     AH2 rcpWeightB=ARcpH2(AH2_(1.0)+AH2_(4.0)*wB);\n    #else\n     AH2 rcpWeightR=APrxMedRcpH2(AH2_(1.0)+AH2_(4.0)*wR);\n     AH2 rcpWeightG=APrxMedRcpH2(AH2_(1.0)+AH2_(4.0)*wG);\n     AH2 rcpWeightB=APrxMedRcpH2(AH2_(1.0)+AH2_(4.0)*wB);\n    #endif\n    pixR=ASatH2((bR*wR+dR*wR+fR*wR+hR*wR+eR)*rcpWeightR);\n    pixG=ASatH2((bG*wG+dG*wG+fG*wG+hG*wG+eG)*rcpWeightG);\n    pixB=ASatH2((bB*wB+dB*wB+fB*wB+hB*wB+eB)*rcpWeightB);\n   #endif\n   return;}\n//------------------------------------------------------------------------------------------------------------------------------\n  // Scaling algorithm adaptively interpolates between nearest 4 results of the non-scaling algorithm.\n  AF2 pp=ip*AF2_AU2(const0.xy)+AF2_AU2(const0.zw);\n  // Tile 0.\n  // Fractional position is needed in high precision here.\n  AF2 fp0=floor(pp);\n  AH2 ppX;\n  ppX.x=AH1(pp.x-fp0.x);\n  AH1 ppY=AH1(pp.y-fp0.y);\n  ASW2 sp0=ASW2(fp0);\n  AH3 a0=CasLoadH(sp0+ASW2(-1,-1));\n  AH3 b0=CasLoadH(sp0+ASW2( 0,-1));\n  AH3 e0=CasLoadH(sp0+ASW2(-1, 0));\n  AH3 f0=CasLoadH(sp0);\n  AH3 c0=CasLoadH(sp0+ASW2( 1,-1));\n  AH3 d0=CasLoadH(sp0+ASW2( 2,-1));\n  AH3 g0=CasLoadH(sp0+ASW2( 1, 0));\n  AH3 h0=CasLoadH(sp0+ASW2( 2, 0));\n  AH3 i0=CasLoadH(sp0+ASW2(-1, 1));\n  AH3 j0=CasLoadH(sp0+ASW2( 0, 1));\n  AH3 m0=CasLoadH(sp0+ASW2(-1, 2));\n  AH3 n0=CasLoadH(sp0+ASW2( 0, 2));\n  AH3 k0=CasLoadH(sp0+ASW2( 1, 1));\n  AH3 l0=CasLoadH(sp0+ASW2( 2, 1));\n  AH3 o0=CasLoadH(sp0+ASW2( 1, 2));\n  AH3 p0=CasLoadH(sp0+ASW2( 2, 2));\n  // Tile 1 (offset only in x).\n  AF1 pp1=pp.x+AF1_AU1(const1.z);\n  AF1 fp1=floor(pp1);\n  ppX.y=AH1(pp1-fp1);\n  ASW2 sp1=ASW2(fp1,sp0.y);\n  AH3 a1=CasLoadH(sp1+ASW2(-1,-1));\n  AH3 b1=CasLoadH(sp1+ASW2( 0,-1));\n  AH3 e1=CasLoadH(sp1+ASW2(-1, 0));\n  AH3 f1=CasLoadH(sp1);\n  AH3 c1=CasLoadH(sp1+ASW2( 1,-1));\n  AH3 d1=CasLoadH(sp1+ASW2( 2,-1));\n  AH3 g1=CasLoadH(sp1+ASW2( 1, 0));\n  AH3 h1=CasLoadH(sp1+ASW2( 2, 0));\n  AH3 i1=CasLoadH(sp1+ASW2(-1, 1));\n  AH3 j1=CasLoadH(sp1+ASW2( 0, 1));\n  AH3 m1=CasLoadH(sp1+ASW2(-1, 2));\n  AH3 n1=CasLoadH(sp1+ASW2( 0, 2));\n  AH3 k1=CasLoadH(sp1+ASW2( 1, 1));\n  AH3 l1=CasLoadH(sp1+ASW2( 2, 1));\n  AH3 o1=CasLoadH(sp1+ASW2( 1, 2));\n  AH3 p1=CasLoadH(sp1+ASW2( 2, 2));\n  // AOS to SOA conversion.\n  AH2 aR=AH2(a0.r,a1.r);\n  AH2 aG=AH2(a0.g,a1.g);\n  AH2 aB=AH2(a0.b,a1.b);\n  AH2 bR=AH2(b0.r,b1.r);\n  AH2 bG=AH2(b0.g,b1.g);\n  AH2 bB=AH2(b0.b,b1.b);\n  AH2 cR=AH2(c0.r,c1.r);\n  AH2 cG=AH2(c0.g,c1.g);\n  AH2 cB=AH2(c0.b,c1.b);\n  AH2 dR=AH2(d0.r,d1.r);\n  AH2 dG=AH2(d0.g,d1.g);\n  AH2 dB=AH2(d0.b,d1.b);\n  AH2 eR=AH2(e0.r,e1.r);\n  AH2 eG=AH2(e0.g,e1.g);\n  AH2 eB=AH2(e0.b,e1.b);\n  AH2 fR=AH2(f0.r,f1.r);\n  AH2 fG=AH2(f0.g,f1.g);\n  AH2 fB=AH2(f0.b,f1.b);\n  AH2 gR=AH2(g0.r,g1.r);\n  AH2 gG=AH2(g0.g,g1.g);\n  AH2 gB=AH2(g0.b,g1.b);\n  AH2 hR=AH2(h0.r,h1.r);\n  AH2 hG=AH2(h0.g,h1.g);\n  AH2 hB=AH2(h0.b,h1.b);\n  AH2 iR=AH2(i0.r,i1.r);\n  AH2 iG=AH2(i0.g,i1.g);\n  AH2 iB=AH2(i0.b,i1.b);\n  AH2 jR=AH2(j0.r,j1.r);\n  AH2 jG=AH2(j0.g,j1.g);\n  AH2 jB=AH2(j0.b,j1.b);\n  AH2 kR=AH2(k0.r,k1.r);\n  AH2 kG=AH2(k0.g,k1.g);\n  AH2 kB=AH2(k0.b,k1.b);\n  AH2 lR=AH2(l0.r,l1.r);\n  AH2 lG=AH2(l0.g,l1.g);\n  AH2 lB=AH2(l0.b,l1.b);\n  AH2 mR=AH2(m0.r,m1.r);\n  AH2 mG=AH2(m0.g,m1.g);\n  AH2 mB=AH2(m0.b,m1.b);\n  AH2 nR=AH2(n0.r,n1.r);\n  AH2 nG=AH2(n0.g,n1.g);\n  AH2 nB=AH2(n0.b,n1.b);\n  AH2 oR=AH2(o0.r,o1.r);\n  AH2 oG=AH2(o0.g,o1.g);\n  AH2 oB=AH2(o0.b,o1.b);\n  AH2 pR=AH2(p0.r,p1.r);\n  AH2 pG=AH2(p0.g,p1.g);\n  AH2 pB=AH2(p0.b,p1.b);\n  // Run optional input transform.\n  CasInputH(aR,aG,aB);\n  CasInputH(bR,bG,bB);\n  CasInputH(cR,cG,cB);\n  CasInputH(dR,dG,dB);\n  CasInputH(eR,eG,eB);\n  CasInputH(fR,fG,fB);\n  CasInputH(gR,gG,gB);\n  CasInputH(hR,hG,hB);\n  CasInputH(iR,iG,iB);\n  CasInputH(jR,jG,jB);\n  CasInputH(kR,kG,kB);\n  CasInputH(lR,lG,lB);\n  CasInputH(mR,mG,mB);\n  CasInputH(nR,nG,nB);\n  CasInputH(oR,oG,oB);\n  CasInputH(pR,pG,pB);\n  // Soft min and max.\n  // These are 2.0x bigger (factored out the extra multiply).\n  //  a b c             b\n  //  e f g * 0.5  +  e f g * 0.5  [F]\n  //  i j k             j\n  AH2 mnfR=AMin3H2(AMin3H2(bR,eR,fR),gR,jR);\n  AH2 mnfG=AMin3H2(AMin3H2(bG,eG,fG),gG,jG);\n  AH2 mnfB=AMin3H2(AMin3H2(bB,eB,fB),gB,jB);\n  #ifdef CAS_BETTER_DIAGONALS\n   AH2 mnfR2=AMin3H2(AMin3H2(mnfR,aR,cR),iR,kR);\n   AH2 mnfG2=AMin3H2(AMin3H2(mnfG,aG,cG),iG,kG);\n   AH2 mnfB2=AMin3H2(AMin3H2(mnfB,aB,cB),iB,kB);\n   mnfR=mnfR+mnfR2;\n   mnfG=mnfG+mnfG2;\n   mnfB=mnfB+mnfB2;\n  #endif\n  AH2 mxfR=AMax3H2(AMax3H2(bR,eR,fR),gR,jR);\n  AH2 mxfG=AMax3H2(AMax3H2(bG,eG,fG),gG,jG);\n  AH2 mxfB=AMax3H2(AMax3H2(bB,eB,fB),gB,jB);\n  #ifdef CAS_BETTER_DIAGONALS\n   AH2 mxfR2=AMax3H2(AMax3H2(mxfR,aR,cR),iR,kR);\n   AH2 mxfG2=AMax3H2(AMax3H2(mxfG,aG,cG),iG,kG);\n   AH2 mxfB2=AMax3H2(AMax3H2(mxfB,aB,cB),iB,kB);\n   mxfR=mxfR+mxfR2;\n   mxfG=mxfG+mxfG2;\n   mxfB=mxfB+mxfB2;\n  #endif\n  //  b c d             c\n  //  f g h * 0.5  +  f g h * 0.5  [G]\n  //  j k l             k\n  AH2 mngR=AMin3H2(AMin3H2(cR,fR,gR),hR,kR);\n  AH2 mngG=AMin3H2(AMin3H2(cG,fG,gG),hG,kG);\n  AH2 mngB=AMin3H2(AMin3H2(cB,fB,gB),hB,kB);\n  #ifdef CAS_BETTER_DIAGONALS\n   AH2 mngR2=AMin3H2(AMin3H2(mngR,bR,dR),jR,lR);\n   AH2 mngG2=AMin3H2(AMin3H2(mngG,bG,dG),jG,lG);\n   AH2 mngB2=AMin3H2(AMin3H2(mngB,bB,dB),jB,lB);\n   mngR=mngR+mngR2;\n   mngG=mngG+mngG2;\n   mngB=mngB+mngB2;\n  #endif\n  AH2 mxgR=AMax3H2(AMax3H2(cR,fR,gR),hR,kR);\n  AH2 mxgG=AMax3H2(AMax3H2(cG,fG,gG),hG,kG);\n  AH2 mxgB=AMax3H2(AMax3H2(cB,fB,gB),hB,kB);\n  #ifdef CAS_BETTER_DIAGONALS\n   AH2 mxgR2=AMax3H2(AMax3H2(mxgR,bR,dR),jR,lR);\n   AH2 mxgG2=AMax3H2(AMax3H2(mxgG,bG,dG),jG,lG);\n   AH2 mxgB2=AMax3H2(AMax3H2(mxgB,bB,dB),jB,lB);\n   mxgR=mxgR+mxgR2;\n   mxgG=mxgG+mxgG2;\n   mxgB=mxgB+mxgB2;\n  #endif\n  //  e f g             f\n  //  i j k * 0.5  +  i j k * 0.5  [J]\n  //  m n o             n\n  AH2 mnjR=AMin3H2(AMin3H2(fR,iR,jR),kR,nR);\n  AH2 mnjG=AMin3H2(AMin3H2(fG,iG,jG),kG,nG);\n  AH2 mnjB=AMin3H2(AMin3H2(fB,iB,jB),kB,nB);\n  #ifdef CAS_BETTER_DIAGONALS\n   AH2 mnjR2=AMin3H2(AMin3H2(mnjR,eR,gR),mR,oR);\n   AH2 mnjG2=AMin3H2(AMin3H2(mnjG,eG,gG),mG,oG);\n   AH2 mnjB2=AMin3H2(AMin3H2(mnjB,eB,gB),mB,oB);\n   mnjR=mnjR+mnjR2;\n   mnjG=mnjG+mnjG2;\n   mnjB=mnjB+mnjB2;\n  #endif\n  AH2 mxjR=AMax3H2(AMax3H2(fR,iR,jR),kR,nR);\n  AH2 mxjG=AMax3H2(AMax3H2(fG,iG,jG),kG,nG);\n  AH2 mxjB=AMax3H2(AMax3H2(fB,iB,jB),kB,nB);\n  #ifdef CAS_BETTER_DIAGONALS\n   AH2 mxjR2=AMax3H2(AMax3H2(mxjR,eR,gR),mR,oR);\n   AH2 mxjG2=AMax3H2(AMax3H2(mxjG,eG,gG),mG,oG);\n   AH2 mxjB2=AMax3H2(AMax3H2(mxjB,eB,gB),mB,oB);\n   mxjR=mxjR+mxjR2;\n   mxjG=mxjG+mxjG2;\n   mxjB=mxjB+mxjB2;\n  #endif\n  //  f g h             g\n  //  j k l * 0.5  +  j k l * 0.5  [K]\n  //  n o p             o\n  AH2 mnkR=AMin3H2(AMin3H2(gR,jR,kR),lR,oR);\n  AH2 mnkG=AMin3H2(AMin3H2(gG,jG,kG),lG,oG);\n  AH2 mnkB=AMin3H2(AMin3H2(gB,jB,kB),lB,oB);\n  #ifdef CAS_BETTER_DIAGONALS\n   AH2 mnkR2=AMin3H2(AMin3H2(mnkR,fR,hR),nR,pR);\n   AH2 mnkG2=AMin3H2(AMin3H2(mnkG,fG,hG),nG,pG);\n   AH2 mnkB2=AMin3H2(AMin3H2(mnkB,fB,hB),nB,pB);\n   mnkR=mnkR+mnkR2;\n   mnkG=mnkG+mnkG2;\n   mnkB=mnkB+mnkB2;\n  #endif\n  AH2 mxkR=AMax3H2(AMax3H2(gR,jR,kR),lR,oR);\n  AH2 mxkG=AMax3H2(AMax3H2(gG,jG,kG),lG,oG);\n  AH2 mxkB=AMax3H2(AMax3H2(gB,jB,kB),lB,oB);\n  #ifdef CAS_BETTER_DIAGONALS\n   AH2 mxkR2=AMax3H2(AMax3H2(mxkR,fR,hR),nR,pR);\n   AH2 mxkG2=AMax3H2(AMax3H2(mxkG,fG,hG),nG,pG);\n   AH2 mxkB2=AMax3H2(AMax3H2(mxkB,fB,hB),nB,pB);\n   mxkR=mxkR+mxkR2;\n   mxkG=mxkG+mxkG2;\n   mxkB=mxkB+mxkB2;\n  #endif\n  // Smooth minimum distance to signal limit divided by smooth max.\n  #ifdef CAS_GO_SLOWER\n   AH2 rcpMfR=ARcpH2(mxfR);\n   AH2 rcpMfG=ARcpH2(mxfG);\n   AH2 rcpMfB=ARcpH2(mxfB);\n   AH2 rcpMgR=ARcpH2(mxgR);\n   AH2 rcpMgG=ARcpH2(mxgG);\n   AH2 rcpMgB=ARcpH2(mxgB);\n   AH2 rcpMjR=ARcpH2(mxjR);\n   AH2 rcpMjG=ARcpH2(mxjG);\n   AH2 rcpMjB=ARcpH2(mxjB);\n   AH2 rcpMkR=ARcpH2(mxkR);\n   AH2 rcpMkG=ARcpH2(mxkG);\n   AH2 rcpMkB=ARcpH2(mxkB);\n  #else\n   AH2 rcpMfR=APrxLoRcpH2(mxfR);\n   AH2 rcpMfG=APrxLoRcpH2(mxfG);\n   AH2 rcpMfB=APrxLoRcpH2(mxfB);\n   AH2 rcpMgR=APrxLoRcpH2(mxgR);\n   AH2 rcpMgG=APrxLoRcpH2(mxgG);\n   AH2 rcpMgB=APrxLoRcpH2(mxgB);\n   AH2 rcpMjR=APrxLoRcpH2(mxjR);\n   AH2 rcpMjG=APrxLoRcpH2(mxjG);\n   AH2 rcpMjB=APrxLoRcpH2(mxjB);\n   AH2 rcpMkR=APrxLoRcpH2(mxkR);\n   AH2 rcpMkG=APrxLoRcpH2(mxkG);\n   AH2 rcpMkB=APrxLoRcpH2(mxkB);\n  #endif\n  #ifdef CAS_BETTER_DIAGONALS\n   AH2 ampfR=ASatH2(min(mnfR,AH2_(2.0)-mxfR)*rcpMfR);\n   AH2 ampfG=ASatH2(min(mnfG,AH2_(2.0)-mxfG)*rcpMfG);\n   AH2 ampfB=ASatH2(min(mnfB,AH2_(2.0)-mxfB)*rcpMfB);\n   AH2 ampgR=ASatH2(min(mngR,AH2_(2.0)-mxgR)*rcpMgR);\n   AH2 ampgG=ASatH2(min(mngG,AH2_(2.0)-mxgG)*rcpMgG);\n   AH2 ampgB=ASatH2(min(mngB,AH2_(2.0)-mxgB)*rcpMgB);\n   AH2 ampjR=ASatH2(min(mnjR,AH2_(2.0)-mxjR)*rcpMjR);\n   AH2 ampjG=ASatH2(min(mnjG,AH2_(2.0)-mxjG)*rcpMjG);\n   AH2 ampjB=ASatH2(min(mnjB,AH2_(2.0)-mxjB)*rcpMjB);\n   AH2 ampkR=ASatH2(min(mnkR,AH2_(2.0)-mxkR)*rcpMkR);\n   AH2 ampkG=ASatH2(min(mnkG,AH2_(2.0)-mxkG)*rcpMkG);\n   AH2 ampkB=ASatH2(min(mnkB,AH2_(2.0)-mxkB)*rcpMkB);\n  #else\n   AH2 ampfR=ASatH2(min(mnfR,AH2_(1.0)-mxfR)*rcpMfR);\n   AH2 ampfG=ASatH2(min(mnfG,AH2_(1.0)-mxfG)*rcpMfG);\n   AH2 ampfB=ASatH2(min(mnfB,AH2_(1.0)-mxfB)*rcpMfB);\n   AH2 ampgR=ASatH2(min(mngR,AH2_(1.0)-mxgR)*rcpMgR);\n   AH2 ampgG=ASatH2(min(mngG,AH2_(1.0)-mxgG)*rcpMgG);\n   AH2 ampgB=ASatH2(min(mngB,AH2_(1.0)-mxgB)*rcpMgB);\n   AH2 ampjR=ASatH2(min(mnjR,AH2_(1.0)-mxjR)*rcpMjR);\n   AH2 ampjG=ASatH2(min(mnjG,AH2_(1.0)-mxjG)*rcpMjG);\n   AH2 ampjB=ASatH2(min(mnjB,AH2_(1.0)-mxjB)*rcpMjB);\n   AH2 ampkR=ASatH2(min(mnkR,AH2_(1.0)-mxkR)*rcpMkR);\n   AH2 ampkG=ASatH2(min(mnkG,AH2_(1.0)-mxkG)*rcpMkG);\n   AH2 ampkB=ASatH2(min(mnkB,AH2_(1.0)-mxkB)*rcpMkB);\n  #endif\n  // Shaping amount of sharpening.\n  #ifdef CAS_GO_SLOWER\n   ampfR=sqrt(ampfR);\n   ampfG=sqrt(ampfG);\n   ampfB=sqrt(ampfB);\n   ampgR=sqrt(ampgR);\n   ampgG=sqrt(ampgG);\n   ampgB=sqrt(ampgB);\n   ampjR=sqrt(ampjR);\n   ampjG=sqrt(ampjG);\n   ampjB=sqrt(ampjB);\n   ampkR=sqrt(ampkR);\n   ampkG=sqrt(ampkG);\n   ampkB=sqrt(ampkB);\n  #else\n   ampfR=APrxLoSqrtH2(ampfR);\n   ampfG=APrxLoSqrtH2(ampfG);\n   ampfB=APrxLoSqrtH2(ampfB);\n   ampgR=APrxLoSqrtH2(ampgR);\n   ampgG=APrxLoSqrtH2(ampgG);\n   ampgB=APrxLoSqrtH2(ampgB);\n   ampjR=APrxLoSqrtH2(ampjR);\n   ampjG=APrxLoSqrtH2(ampjG);\n   ampjB=APrxLoSqrtH2(ampjB);\n   ampkR=APrxLoSqrtH2(ampkR);\n   ampkG=APrxLoSqrtH2(ampkG);\n   ampkB=APrxLoSqrtH2(ampkB);\n  #endif\n  // Filter shape.\n  AH1 peak=AH2_AU1(const1.y).x;\n  AH2 wfR=ampfR*AH2_(peak);\n  AH2 wfG=ampfG*AH2_(peak);\n  AH2 wfB=ampfB*AH2_(peak);\n  AH2 wgR=ampgR*AH2_(peak);\n  AH2 wgG=ampgG*AH2_(peak);\n  AH2 wgB=ampgB*AH2_(peak);\n  AH2 wjR=ampjR*AH2_(peak);\n  AH2 wjG=ampjG*AH2_(peak);\n  AH2 wjB=ampjB*AH2_(peak);\n  AH2 wkR=ampkR*AH2_(peak);\n  AH2 wkG=ampkG*AH2_(peak);\n  AH2 wkB=ampkB*AH2_(peak);\n  // Blend between 4 results.\n  AH2 s=(AH2_(1.0)-ppX)*(AH2_(1.0)-AH2_(ppY));\n  AH2 t=           ppX *(AH2_(1.0)-AH2_(ppY));\n  AH2 u=(AH2_(1.0)-ppX)*           AH2_(ppY) ;\n  AH2 v=           ppX *           AH2_(ppY) ;\n  // Thin edges to hide bilinear interpolation (helps diagonals).\n  AH2 thinB=AH2_(1.0/32.0);\n  #ifdef CAS_GO_SLOWER\n   s*=ARcpH2(thinB+(mxfG-mnfG));\n   t*=ARcpH2(thinB+(mxgG-mngG));\n   u*=ARcpH2(thinB+(mxjG-mnjG));\n   v*=ARcpH2(thinB+(mxkG-mnkG));\n  #else\n   s*=APrxLoRcpH2(thinB+(mxfG-mnfG));\n   t*=APrxLoRcpH2(thinB+(mxgG-mngG));\n   u*=APrxLoRcpH2(thinB+(mxjG-mnjG));\n   v*=APrxLoRcpH2(thinB+(mxkG-mnkG));\n  #endif\n  // Final weighting.\n  AH2 qbeR=wfR*s;\n  AH2 qbeG=wfG*s;\n  AH2 qbeB=wfB*s;\n  AH2 qchR=wgR*t;\n  AH2 qchG=wgG*t;\n  AH2 qchB=wgB*t;\n  AH2 qfR=wgR*t+wjR*u+s;\n  AH2 qfG=wgG*t+wjG*u+s;\n  AH2 qfB=wgB*t+wjB*u+s;\n  AH2 qgR=wfR*s+wkR*v+t;\n  AH2 qgG=wfG*s+wkG*v+t;\n  AH2 qgB=wfB*s+wkB*v+t;\n  AH2 qjR=wfR*s+wkR*v+u;\n  AH2 qjG=wfG*s+wkG*v+u;\n  AH2 qjB=wfB*s+wkB*v+u;\n  AH2 qkR=wgR*t+wjR*u+v;\n  AH2 qkG=wgG*t+wjG*u+v;\n  AH2 qkB=wgB*t+wjB*u+v;\n  AH2 qinR=wjR*u;\n  AH2 qinG=wjG*u;\n  AH2 qinB=wjB*u;\n  AH2 qloR=wkR*v;\n  AH2 qloG=wkG*v;\n  AH2 qloB=wkB*v;\n  // Filter.\n  #ifndef CAS_SLOW\n   #ifdef CAS_GO_SLOWER\n    AH2 rcpWG=ARcpH2(AH2_(2.0)*qbeG+AH2_(2.0)*qchG+AH2_(2.0)*qinG+AH2_(2.0)*qloG+qfG+qgG+qjG+qkG);\n   #else\n    AH2 rcpWG=APrxMedRcpH2(AH2_(2.0)*qbeG+AH2_(2.0)*qchG+AH2_(2.0)*qinG+AH2_(2.0)*qloG+qfG+qgG+qjG+qkG);\n   #endif\n   pixR=ASatH2((bR*qbeG+eR*qbeG+cR*qchG+hR*qchG+iR*qinG+nR*qinG+lR*qloG+oR*qloG+fR*qfG+gR*qgG+jR*qjG+kR*qkG)*rcpWG);\n   pixG=ASatH2((bG*qbeG+eG*qbeG+cG*qchG+hG*qchG+iG*qinG+nG*qinG+lG*qloG+oG*qloG+fG*qfG+gG*qgG+jG*qjG+kG*qkG)*rcpWG);\n   pixB=ASatH2((bB*qbeG+eB*qbeG+cB*qchG+hB*qchG+iB*qinG+nB*qinG+lB*qloG+oB*qloG+fB*qfG+gB*qgG+jB*qjG+kB*qkG)*rcpWG);\n  #else\n   #ifdef CAS_GO_SLOWER\n    AH2 rcpWR=ARcpH2(AH2_(2.0)*qbeR+AH2_(2.0)*qchR+AH2_(2.0)*qinR+AH2_(2.0)*qloR+qfR+qgR+qjR+qkR);\n    AH2 rcpWG=ARcpH2(AH2_(2.0)*qbeG+AH2_(2.0)*qchG+AH2_(2.0)*qinG+AH2_(2.0)*qloG+qfG+qgG+qjG+qkG);\n    AH2 rcpWB=ARcpH2(AH2_(2.0)*qbeB+AH2_(2.0)*qchB+AH2_(2.0)*qinB+AH2_(2.0)*qloB+qfB+qgB+qjB+qkB);\n   #else\n    AH2 rcpWR=APrxMedRcpH2(AH2_(2.0)*qbeR+AH2_(2.0)*qchR+AH2_(2.0)*qinR+AH2_(2.0)*qloR+qfR+qgR+qjR+qkR);\n    AH2 rcpWG=APrxMedRcpH2(AH2_(2.0)*qbeG+AH2_(2.0)*qchG+AH2_(2.0)*qinG+AH2_(2.0)*qloG+qfG+qgG+qjG+qkG);\n    AH2 rcpWB=APrxMedRcpH2(AH2_(2.0)*qbeB+AH2_(2.0)*qchB+AH2_(2.0)*qinB+AH2_(2.0)*qloB+qfB+qgB+qjB+qkB);\n   #endif\n   pixR=ASatH2((bR*qbeR+eR*qbeR+cR*qchR+hR*qchR+iR*qinR+nR*qinR+lR*qloR+oR*qloR+fR*qfR+gR*qgR+jR*qjR+kR*qkR)*rcpWR);\n   pixG=ASatH2((bG*qbeG+eG*qbeG+cG*qchG+hG*qchG+iG*qinG+nG*qinG+lG*qloG+oG*qloG+fG*qfG+gG*qgG+jG*qjG+kG*qkG)*rcpWG);\n   pixB=ASatH2((bB*qbeB+eB*qbeB+cB*qchB+hB*qchB+iB*qinB+nB*qinB+lB*qloB+oB*qloB+fB*qfB+gB*qgB+jB*qjB+kB*qkB)*rcpWB);\n  #endif\n }\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 m = iMouse.xy / iResolution.xy;\n    uvec2 point = uvec2(uv * iChannelResolution[0].xy);\n    \n    vec4 color = vec4(1.0f, 0.0f, 1.0f, 1.0f);\n    \n    if (uv.x < m.x)\n    {\n        vec2 inputResolution = vec2(iChannelResolution[0]);\n        vec2 outputResolution = inputResolution * 2.0f;\n        float sharpnessTuning = 0.0f;\n\n        uvec4 const0;\n        uvec4 const1;\n\n        CasSetup(const0, const1, sharpnessTuning, \n                 inputResolution.x, inputResolution.y, \n                 outputResolution.x, outputResolution.y);\n\n        CasFilter(color.r, color.g, color.b, point, const0, const1, true);\n    }\n    else\n    {\n        color = vec4(imageLoad(ivec2(point)), 1.0f);\n    }\n    \n    color.rgb *= smoothstep(0.0f, 0.005f, abs(uv.x - m.x));\n\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}