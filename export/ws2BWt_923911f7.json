{"ver":"0.1","info":{"id":"ws2BWt","date":"1591155474","viewed":75,"name":"Color Square Operations","username":"stradiotto","description":"It is just an experimental shader to learn function declaration, defining what to entry and what to return, and combine colors in the form of set operators","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["intersection","union","subtraction","squarefunction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 rect(vec2 uv, vec4 coords, vec4 colorIn, vec4 colorOut)\n{\n\tif(uv.x >= coords[0] && uv.x <= coords[2]){\n        if(uv.y >= coords[1] && uv.y <= coords[3]){\n            return colorIn;\n        }\n    }\n    return colorOut;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv  = fragCoord / iResolution.xy;\n    uv \t\t-= .5;\n    uv.x \t*= iResolution.x / iResolution.y;\n\n    vec4 a = rect(uv, vec4(-.25, -.35, .35, .25), vec4(.2, 0., 0., 0.), vec4(1., 0., 0., 0.)); \n    vec4 b = rect(uv, vec4(-.45, -.25, .25, .35), vec4(.5, .2, .2, 1.), vec4(0., 0., 1., 0.));\n    \n    vec4 r = clamp(a*b, 0., 1.);//intersection \tand clamping\n//    vec4 r = clamp(a+b, 0., 1.);//union \t\tand clamping\n//    vec4 r = clamp(a-b, 0., 1.);//subtraction \tand clamping\n    \n    fragColor = r;\n}","name":"Image","description":"","type":"image"}]}