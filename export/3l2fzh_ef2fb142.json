{"ver":"0.1","info":{"id":"3l2fzh","date":"1598321639","viewed":117,"name":"lr94/ditheringWithNoise","username":"lucasrumney94","description":"dithering with noise \nhttps://www.youtube.com/watch?v=RdN06E6Xn9E","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_BANDS 256.0f\n#define NOISE_INTENSITY 1.0f/20.0f;\n\nfloat rand(float n){\n    return fract(sin(n) * 982457.4908571);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // create banding so that I can test dithering effectiveness\n    vec3 col = vec3(trunc((uv.x+1./NUM_BANDS)*NUM_BANDS)/NUM_BANDS);\n    \n    // Isolate the middle and apply noise dithering\n    float middlethird = step(uv.y, 2./3.) * step(1./3., uv.y);  \n    float random =  rand(iTime + fragCoord.x * fragCoord.y);\n    // scale the noise to be [-1, 1] so the average perceived value is the same\n\tfloat noise = ((random*2.0f)-1.0f)*NOISE_INTENSITY;\n    \n    col += noise*middlethird; \n    \n    // bottom is a smooth gradient\n    float bottomthird = step(uv.y, 1./3.);\n    col *= (1.0-bottomthird);\n    col += bottomthird*uv.x;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}