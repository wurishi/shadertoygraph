{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"const int MAX_ITERATIONS = 256;\nconst float PI = 3.1415926535897932384626433832795;\n\nvec2 complex_pow(vec2 z,float power)\n{\t\n\tfloat real = cos(power * atan(z.x / z.y) - power * PI * sign(z.y) * 0.5) * pow(z.x * z.x + z.y * z.y, power / 2.0 );\n\tfloat imag = -sin(power * atan(z.x / z.y) - power * PI * sign(z.y) * 0.5) * pow(z.x * z.x + z.y * z.y, power / 2.0 );\n\t\n\treturn vec2(real, imag);\t\n}\n\nvec2 complex_mlt(vec2 z, vec2 z2)\n{\n\treturn vec2(z.x * z2.x - z.y * z2.y,\n\t\t\t    z.x * z2.y + z.y * z2.x);\n}\n\nvec3 frac(vec2 c)\n{\n\tvec2 z = vec2(0.0,0.0);\t\n\tvec2 dz = vec2(1.0,0.0);\n\tfloat fi = 0.0;\n\tfloat m2 = 0.0;\n\tfloat time = (sin(iTime / 4.0 + 1.55*PI) + 1.0) * 3.0 + 2.0;\n\tfloat fr = fract(time);\t\n\tfloat fl = floor(time);\n\tfr = smoothstep(0.0,1.0,fr);\t\n\tfr = smoothstep(0.0,1.0,fr);\n\tfloat power = fr + fl;\n\t\n\t\n\t//Iterate\n\t//----------------\n\tfor(int i = 0;i < MAX_ITERATIONS; i++)\n\t{\t\t\n\t\tif(m2 > pow(1024.0, 1.0 / time)) \n\t\t\tcontinue;\n\t\t\n\t\t//Complex functions\n\t\tdz = power * complex_mlt(dz, complex_pow(z,power - 0.99)) + vec2(1.0,0.0);\n\t\tz = complex_pow(z, power) + c;\n\t\t\n\t\tm2 = dot(z,z);\n\t\t\n\t\tfi += 1.0;\t\t\n\t}\n\t//----------------\n\t\n\t\n\t\n\t//Code from iq \n\t//---------------\t\t\n\tfloat result = 0.0;\n\t\n\tif( fi < float(MAX_ITERATIONS) )\n\t\tresult = sqrt( dot(z,z)/dot(dz,dz) )*log(dot(z,z));\n\t\n\tresult = clamp(result/200.0, 0.0, 1.0 );\n\tresult = 1.0 - pow( result, 0.126);\t\n\t//----------------\n\t\n\n\t\n\t//Color gradient\n\t//----------------\t\n\tfloat f = result * 3.0;\n\tfloat ffr = fract(f);\n\t\n\tif(f < 1.0)\n\t\treturn vec3(0.0,0.0,0.0);\n\tif(f < 1.5)\n\t\treturn vec3(ffr * 2.0,0.0,0.0);\n\tif(f < 2.0)\n\t\treturn vec3(1.0 - (ffr - 0.5) * 2.0,(ffr - 0.5) * 2.0,0.0);\t\n\tif(f < 2.5)\n\t\treturn vec3(0.0,1.0 - ffr * 2.0,ffr * 2.0);\n\tif(f < 3.0)\n\t\treturn vec3(0.0,0.0,1.0);\n\t\t\n\treturn vec3(0.0,0.0,0.0);\t\n\t//----------------\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = uv*2.0 - 1.0;\n\tuv *= 1.3;\t\n\tuv.x *= iResolution.x / iResolution.y;\n\t\n\tfragColor = vec4(frac(uv),1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsXGz2","date":"1374088530","viewed":1298,"name":"Mandelbrot Evolution","username":"asti","description":"I just changed the formula of the normal Mandelbrot z = zÂ² + c to z = z^n + c and increase n using the time.\nI also used the distance estimation algorithm that iq explained here: https://iquilezles.org/articles/distancefractals/distancefractals.ht","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","mandelbrot","evolution"],"hasliked":0,"parentid":"","parentname":""}}