{"ver":"0.1","info":{"id":"4lBXzD","date":"1441875233","viewed":781,"name":"Video Trails","username":"P_Malin","description":"Not sure if there is already one of these on shadertoy. \nI put no thought into this whatsoever :)\nClick & drag the mouse!\n\nInspiration from https://www.shadertoy.com/view/MtBXz1\nChromakey code from https://www.shadertoy.com/view/4dX3WN\n","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["video","chromakey","discard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Video Trails\n\n// Not sure if there is already one of these on shadertoy.\n// I put no thought into this whatsoever :)\n\n// Inspiration from https://www.shadertoy.com/view/MtBXz1\n// Chromakey code from https://www.shadertoy.com/view/4dX3WN\n\nfloat g_fadeSpeed = 15.0;\nfloat g_ditherSize = 4.0;\n\nvec3 rgb2hsv(vec3 rgb)\n{\n\tfloat Cmax = max(rgb.r, max(rgb.g, rgb.b));\n\tfloat Cmin = min(rgb.r, min(rgb.g, rgb.b));\n    float delta = Cmax - Cmin;\n\n\tvec3 hsv = vec3(0., 0., Cmax);\n\t\n\tif (Cmax > Cmin)\n\t{\n\t\thsv.y = delta / Cmax;\n\n\t\tif (rgb.r == Cmax)\n\t\t\thsv.x = (rgb.g - rgb.b) / delta;\n\t\telse\n\t\t{\n\t\t\tif (rgb.g == Cmax)\n\t\t\t\thsv.x = 2. + (rgb.b - rgb.r) / delta;\n\t\t\telse\n\t\t\t\thsv.x = 4. + (rgb.r - rgb.g) / delta;\n\t\t}\n\t\thsv.x = fract(hsv.x / 6.);\n\t}\n\treturn hsv;\n}\n\nfloat chromaKey(vec3 color)\n{\n\tvec3 backgroundColor = vec3(0.157, 0.576, 0.129);\n\tvec3 weights = vec3(4., 1., 2.);\n\n\tvec3 hsv = rgb2hsv(color);\n\tvec3 target = rgb2hsv(backgroundColor);\n\tfloat dist = length(weights * (target - hsv));\n\treturn 1. - clamp(3. * dist - 1.5, 0., 1.);\n}\n\nbool TestGrid(in vec2 fragCoord )\n{\n    float pixelIndex = mod( floor(fragCoord.x), g_ditherSize ) + mod( floor(fragCoord.y), g_ditherSize ) * g_ditherSize;\n    float timeIndex = mod(floor(iTime * g_fadeSpeed), g_ditherSize * g_ditherSize);\n    if( abs( pixelIndex - timeIndex) > 0.0001 )\n    {\n    \treturn true;\n    }\n    \n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    if( iMouse.z > 0.0 )\n    {\n    \tuv -= (iMouse.xy - iMouse.zw) / iResolution.xy;\n    }\n    \n    vec3 tex = texture( iChannel0, uv ).rgb;\n    \n    float key = chromaKey(tex);\n    \n    if( key > 0.01 )\n    {\n        if( TestGrid( fragCoord ) )\n        {\n        \tdiscard;\n        }\n        else\n        {\n\t\t\tfragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    }\n    else\n    {\n\t\tfragColor = vec4(tex, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}