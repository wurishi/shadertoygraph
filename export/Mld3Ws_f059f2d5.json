{"ver":"0.1","info":{"id":"Mld3Ws","date":"1472558483","viewed":182,"name":"360 azimuth","username":"zproxy","description":"360 azimuth","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raycast","letters"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by johann langhofer - lavalang/04-2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Bit Paced Sprites from https://www.shadertoy.com/view/XtsGRl\n// dist fuctions from https://iquilezles.org/articles/distfunctions\n//#define MOVEMENT\nconst float grad_step = 0.1;\nvec2 print_pos = vec2(2,8);\n\n// need biggger font\n#define CHAR_SIZE vec2(3, 7)\n\n#define CHAR_SPACING vec2(4, 8 * 4)\n//#define CHAR_SPACING vec2(4 * 2, 8 * 2)\n\n#define STRWIDTH(c) (c * CHAR_SPACING.x)\n#define STRHEIGHT(c) (c * CHAR_SPACING.y)\n\nfloat vmax(vec2 v) {\n\treturn max(v.x, v.y);\n}\nfloat vmax(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\nfloat sdPlane(vec3 p, vec4 n) {\n\treturn dot(p, n.xyz) + n.w;\n}\nfloat sdPlane(vec3 p) {\n\treturn p.y;\n}\nfloat pMod1(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\nvec2 pMod2(inout vec2 p, vec2 size) {\n\tvec2 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5,size) - size*0.5;\n\treturn c;\n}\nfloat fCylinder(vec3 p, float r, float height) {\n\tfloat d = length(p.xz) - r;\n\td = max(d, abs(p.y) - height);\n\treturn d;\n}\nfloat fBox2Cheap(vec2 p, vec2 b) {\n\treturn vmax(abs(p)-b);\n}\nfloat fBoxCheap(vec3 p, vec3 b) { //cheap box\n\treturn vmax(abs(p) - b);\n}\nfloat fOpUnionRound(float a, float b, float r) {\n\tvec2 u = max(vec2(r - a,r - b), vec2(0));\n\treturn max(r, min (a, b)) - length(u);\n}\nconst float ICspacing = 50.0;\nconst float ICwidth = 8.0;\nconst float ICdepth = 4.0; // mirrored\n\n// linked to softshadow\nconst float ICheight = 0.001; // how thin can we go?\n\n\nfloat ICbody(vec3 pos) {\n\t// keep only the center piece?\n    //pMod2(pos.xz, vec2(ICspacing, ICspacing)); //domain: multiple objekts in xz-direction with distance: 8-units\n\t\n    float mark = fCylinder(pos + vec3(.99, -0.38, 2.5), 0.18, .11); //pin 1 marker\n\tpos.x = abs(pos.x) - .5; //domain: x-Axis mirror\n\t//half IC-body (half x-dimension)\n\t\n    // do we need the hole? we get shadows\n \n    return  \n        \n        max(-mark, \n            \n        fBoxCheap(\n            pos + vec3( 0., -ICheight, 0) \n                      \n                      , vec3(ICdepth, \n                                // thinner chip\n                                ICheight * 0.45, ICwidth)\n                 \n                 )\n            );\n}\n\n// called by?\nfloat ICpins(vec3 pos) {\n// can we create a fence of pins?\n    \n  \n    vec3 pos0 = pos;\n    \n    float pos0z = floor((pos0.z - 5.) /10.) * 10. + 5.0;\n    \n    //float animatedHeight = sin((0.1 * float(iFrame) + pos0z) * 0.2) * 8.;\n    \n   // float animatedHeight = 8. + pos0z;\n    \n    \n    float animatedHeight = 2. ;\n    \n    pos.x += 0.0;\n    \n    pos.x = abs(pos.x) - .0;\n    \n    \n    \n    // sets up the freq of pins\n    \n\tfloat c = pMod1(\n        pos.z, \n       10.\n\t);\t\n\n    // yes we can move it around.\n    \n    //float pos1z = pos0z * 0.01;\n    //float pos1z = (60. - pos0z) * 0.02 ;\n    //float pos1z = (100. - pos0z) * 0.1 ;\n    \n    \n    \n    // 10 seems to allow to keep rendering... why isnt it 0?\n    // missing the edge stones\n    if (abs(pos0z) >= 50.0)\n        return 10.;\n        \n    //float offset =  pos1z * pos1z;\n    //float offset =  100. - pos1z * pos1z;\n    float offset =  50.*sin(acos(pos0z / 50.) );\n\n    //float offset =  90.0 * sin(0.25 * 3.14 + float(pos0z) * 0.01);\n    //float offset =  40.0 * cos(float(pos0z) * 0.1);\n    \n    float box3 = fBoxCheap(\n        pos \n        + vec3(\n        // leg gets more detached. \n        - abs(offset), \n        // leg goes up\n        .0,\n            0), \n        vec3(\n            // leg gets depth.\n            .5, \n            // leg gets taller\n             animatedHeight //+ abs(pos0z) * 0.2\n            , \n            // leg gets width\n            .5)); \n    //one IC-pin smallpart\n \n  return  box3;\n}\n\nfloat ICground(vec3 pos) {\n\treturn sdPlane(pos+1.2);\n}\n\n// phong shading\nvec3 shading(vec3 v, vec3 n, vec3 eye) {\n// ...add lights here...\n\n\tfloat shininess = 16.0 * .3;\n\tvec3 final = vec3(0.0);\n\tvec3 ev = normalize(v - eye);\n\tvec3 ref_ev = reflect(ev, n);\n\n// light 0\n\t{\n\t\tvec3 light_pos = vec3(20.0, 20.0, 20.0);\n\t\tvec3 light_color = vec3(.7, .7, .7);\n\n\t\tvec3 vl = normalize(light_pos - v);\n\n\t\tfloat diffuse = max(0.0, dot(vl, n));\n\t\tfloat specular = max(0.0, dot(vl, ref_ev));\n\t\tspecular = pow(specular, shininess);\n\n\t\tfinal += light_color * (diffuse + specular);\n\t}\n\n// light 1\n\t{\n\t\tvec3 light_pos = vec3(-20.0, -20.0, -20.0);\n\t\tvec3 light_color = vec3(.7, .7, .7);\n\n\t\tvec3 vl = normalize(light_pos - v);\n\n\t\tfloat diffuse = max(0.0, dot(vl, n));\n\t\tfloat specular = max(0.0, dot(vl, ref_ev));\n\t\tspecular = pow(specular, shininess);\n\n\t\tfinal += light_color * (diffuse + specular);\n\t}\n\n\treturn final;\n}\n\n//vec3 bg(vec3 dir, bool colored) {\n//\tvec3 cube = texture(iChannel0, dir).xyz;\n//\tif (colored)\n//\t\treturn cube;\n//\tfloat avg = (cube.x + cube.y + cube.z) * 0.333;\n//\treturn vec3(avg);\n//}\n//\n//// ========================================\n//vec3 getBackground(vec3 rd) {\n//\treturn texture(iChannel0, rd).xyz;\n//}\n//\nvec2 opU(vec2 d1, vec2 d2) {\n\treturn (d1.x < d2.x) ? d1 : d2;\n}\n\n\n\n// called by castRay\n// useful for hit test\nvec2 map( in vec3 pos )\n{\n#ifdef MOVEMENT\n\tpos.z += iTime*5.;//+abs(sin(iTime * 2.5));\n#endif\n\t\n    vec2 res = opU(\n       // vec2(ICbody(pos),0), // chips with floor paint?\n        //vec2(ICbody(pos),-1), // chips with sky paint?\n        //vec2(ICbody(pos),1), // chips with floor paint?\n        vec2(ICbody(pos),10), // chips with chip paint/texture. \n        \n        //vec2(ICbody(pos),10),\n        vec2(ICpins(pos),20)\n    );\n\t\n    // render floor geometry\n    res = opU(res,vec2(ICground(pos), 1 ));\n    \n\treturn res;\n}\nvec3 gradient(vec3 pos) {\n\tconst vec3 dx = vec3(grad_step, 0.0, 0.0);\n\tconst vec3 dy = vec3(0.0, grad_step, 0.0);\n\tconst vec3 dz = vec3(0.0, 0.0, grad_step);\n\treturn normalize(\n\t\t\tvec3(map(pos + dx).x - map(pos - dx).x,\n\t\t\t\t\tmap(pos + dy).x - map(pos - dy).x,\n\t\t\t\t\tmap(pos + dz).x - map(pos - dz).x));\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t\t\tmap(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t\t\tmap(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t\t\tmap(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n\tfloat t = mint;\n\tfor( int i=0; i<16; i++ )\n\t{\n\t\tfloat h = map( ro + rd*t ).x;\n\t\tres = min( res, 8.0*h/t );\n\t\tt += clamp( h, 0.02, 0.10 );\n\t\tif( h<0.001 || t>tmax ) break;\n\t}\n\treturn clamp( res, 0.0, 1.0 );\n}\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n\tfloat sca = 1.0;\n\tfor( int i=0; i<5; i++ )\n\t{\n\t\tfloat hr = 0.01 + 0.12*float(i)/4.0;\n\t\tvec3 aopos = nor * hr + pos;\n\t\tfloat dd = map( aopos ).x;\n\t\tocc += -(dd-hr)*sca;\n\t\tsca *= 0.95;\n\t}\n\treturn clamp( 1.0 - 3.0*occ, 0.0, 1.0 );\n}\n\n// can we cast in low detail?\nvec2 castRay( in vec3 ro, in vec3 rd ) {\n\n\tfloat tmin = 0.0;\n    \n    // 50fps while horizon is visible?\n\t//float tmax = 20000.0; // how high up will the camera go?\n\n    // should be fog related\n    float tmax = 1000.0; // how high up will the camera go?\n\n    \n\tfloat precis = 0.01;\n\t//float precis = 1.; // wavy sideeffects\n\t//float precis = 10.; // wavy sideeffects\n\n    \n    float t = tmin;\n\tfloat m = -1.0;\n\t\n    //for( int i=0; i<150; i++ )\n    \n    // ah. less means horizon gets messed up?\nfor( int i=0; i<2200; i+=1 ) //60fps \n\n    //for( int i=0; i<1; i+=2 ) //60fps \n\n    {\n        \n        // what does map do?\n\t\tvec2 res = map( ro+rd*t );\n        \n\t\tif( res.x<precis || t>tmax ) \n            break;\n        \n\t\tt += res.x;\n\t\tm = res.y;\n\t}\n\n\tif( t>tmax ) m=-1.0;\n\treturn vec2( t, m );\n}\n//Automatically generated from a sprite sheet.\nfloat ch_sp = 0.0;\nfloat ch_dsh = 3584.0;\n\nfloat ch_a = 712557.0;\nfloat ch_b = 1760622.0;\nfloat ch_c = 706858.0;\nfloat ch_d = 1760110.0;\nfloat ch_e = 2018607.0;\nfloat ch_f = 2018596.0;\nfloat ch_g = 706922.0;\nfloat ch_h = 1498989.0;\nfloat ch_i = 1909911.0;\nfloat ch_j = 1872746.0;\nfloat ch_k = 1498477.0;\nfloat ch_l = 1198375.0;\nfloat ch_m = 1571693.0;\nfloat ch_n = 1760109.0;\nfloat ch_o = 711530.0;\nfloat ch_p = 711972.0;\nfloat ch_q = 711675.0;\nfloat ch_r = 1760621.0;\nfloat ch_s = 2018927.0;\nfloat ch_t = 1909906.0;\nfloat ch_u = 1497963.0;\nfloat ch_v = 1497938.0;\nfloat ch_w = 1498109.0;\nfloat ch_x = 1496429.0;\nfloat ch_y = 1496210.0;\nfloat ch_z = 2004271.0;\n\n\n// https://www.shadertoy.com/view/XtsGRl\nfloat ch_1 = 730263.0;\nfloat ch_2 = 693543.0;\nfloat ch_3 = 693354.0;\nfloat ch_4 = 1496649.0;\nfloat ch_5 = 1985614.0;\nfloat ch_6 = 707946.0;\nfloat ch_7 = 1873042.0;\nfloat ch_8 = 709994.0;\nfloat ch_9 = 710250.0;\nfloat ch_0 = 711530.0;\n\n//Extracts bit b from the given number.\nfloat extract_bit(float n, float b)\n{\n\treturn floor(mod(floor(n / pow(2.0,floor(b))),2.0));\n}\n\n//Returns the pixel at uv in the given bit-packed sprite.\nfloat sprite(float spr, vec2 size, vec2 uv)\n{\n    uv = floor(uv);\n    //Calculate the bit to extract (x + y * width) (flipped on x-axis)\n    float bit = (size.x-uv.x-1.0) + uv.y * size.x;\n\n    //Clipping bound to remove garbage outside the sprite's boundaries.\n    bool bounds = all(greaterThanEqual(uv,vec2(0)));\n    bounds = bounds && all(lessThan(uv,size));\n\n    return bounds ? extract_bit(spr, bit) : 0.0;\n\n}\n\n//Prints a character and moves the print position forward by 1 character width.\nfloat char(float ch, vec2 uv)\n{\n    float px = sprite(ch, CHAR_SIZE, (uv - print_pos));\n    print_pos.x += CHAR_SPACING.x;\n    return px;\n}\n \n\n//Returns the digit sprite for the given number.\nfloat get_digit(float d)\n{\n    d = floor(d);\n    \n    if(d == 0.0) return ch_0;\n    if(d == 1.0) return ch_1;\n    if(d == 2.0) return ch_2;\n    if(d == 3.0) return ch_3;\n    if(d == 4.0) return ch_4;\n    if(d == 5.0) return ch_5;\n    if(d == 6.0) return ch_6;\n    if(d == 7.0) return ch_7;\n    if(d == 8.0) return ch_8;\n    if(d == 9.0) return ch_9;\n    return 0.0;\n}\n\n//Prints out the given number starting at pos.\nfloat print_number(float number,vec2 pos, vec2 uv)\n{\n\tvec2 dec_pos = pos;\n    float result = 0.0;\n    \n\tfor(int i = 3;i >= 0;i--)\n    {\n        float clip = float(abs(number) > pow(10.0, float(i)) || i == 0); //Clip off leading zeros.\n        \n        float digit = mod(number / pow(10.0, float(i)),10.0);\n        \n        result += sprite(get_digit(digit),CHAR_SIZE, uv - dec_pos) * clip;\n        \n        dec_pos.x += CHAR_SPACING.x * clip;\n    }\n    \n    return result;\n}\n\n// called by?\nvec3 render( in vec3 ro, in vec3 rd )\n{\n    // is this the sky?\n\t//vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n   // vec3 col = vec3(0.5, 0.7, 0.8) +rd.y*0.8;\n    \n\n    //vec3 colsky = vec3(0.3, 0.6, 1.0) +tan(rd.y)*1.1;\n    vec3 colsky = vec3(0.3, 0.6, 1.0) +tan(rd.y)*0.4;\n\n   // vec3 colsky = vec3(0.3, 0.6, 0.8) +tan(rd.y)*0.9;\n    vec3 col = colsky;\n\n    //vec3 col = vec3(0.4, 0.4, 0.0) +rd.y*0.8;\n    \n    //return vec3( clamp(col,0.0,1.0) );\n    \n    // res means result?\n\tvec2 res = castRay(ro,rd);\n    \n    \n    \n\tfloat t = res.x;\n\tfloat m = res.y; // altitude\n\t\n    \n\n    \n    // fog out floor earlier\n    float ffogtosky = \n \t\t//( m>=0.0 ) ?      ( t * t ) * 0.00005 : 1.0;\n \t\t( m>=0.0 ) ?      ( t * t ) * 0.0000020 : 1.0;\n\n    if (ffogtosky > 1.0)\n        ffogtosky = 1.0;\n      float ffogtosky1 = 1.0 - ffogtosky;\n\n    \n    \n    float fogtosky = \n \t\t( m>=0.0 ) ?      ( t * t ) * 0.0000005 : 1.0;\n\n    if (fogtosky > 1.0)\n        fogtosky = 1.0;\n      float fogtosky1 = 1.0 - fogtosky;\n    \n    \n   // col.r = t;\n   //  col.r = res.z;\n    //return vec3( clamp(col,0.0,1.0) );\n    \n    // above is sky?\n    if( m>=0.0 )\n\t{\n\t\tvec3 pos = ro + t*rd;\n\t\tvec3 nor = calcNormal( pos );\n\t\tvec3 shaded=shading( pos, nor, ro );\n\t\tvec3 ref = reflect( rd, nor );\n        \n        \n        // floor paint\n\t\t//if( m<1.5 )\n\t\t{\n#ifdef MOVEMENT\n\t\t\tfloat fz= iTime*5;//+abs(sin(iTime * 2.5));\n#else\n\t\t\tfloat fz=0.5;\n#endif\n            // this is the floor\n\t\t\t//float rep=0.07;\n\t\t\tfloat rep0=0.01;\n            float f0 = mod( floor(rep0*(pos.z+fz)) + floor(rep0*pos.x), 2.0);\n\n            float rep1=0.02;\n            float f1 = mod( floor(rep1*(pos.z+fz)) + floor(rep1*pos.x), 2.0);\n\n            //col = 0.2 + 0.3*f*vec3(.5,1.2,0.4);\n            \n            \n            //col = 0.0 + 0.3*f*vec3(.5,1.2,0.4);\n            \n            //col = 0.3 + 0.2*f0*vec3(1.0,1.0,0.4) * ffogtosky1;\n            \n            \n            col += 0.3 \n                \n                + 0.1*f0*vec3(1.0,1.0,0.4) * fogtosky1\n                + 0.2*f1*vec3(1.0,1.0,0.4) * ffogtosky1;\n            \n            col /=2.;\n            \n            //if (f0>0.0)\n            //col = 0.3 + 0.2*f1*vec3(1.0,1.0,0.4) * ffogtosky1;\n            //else\n            //    col = 0.3 + 0.2*(1.0-f0)*(1.0-f1)*vec3(1.0,1.0,0.4) * ffogtosky1;\n            \n            \n            //col = 0.3 + 0.2*(1.0-f0)*f1*vec3(1.0,1.0,0.4) * ffogtosky1;\n            \n        \n           // col *= 0.3 + 0.2*f0*vec3(1.0,1.0,0.4) * ffogtosky1;\n\t\t}\n\n        // chippaint/ tex\n\t\tif(m>1.5) {\n\t\t\tfloat fz= iTime;\n\t\t\tvec3 n = gradient( pos );\n\t\t\t//l=shading( pos, n, rd );\n            //col = col * fogtosky + fogtosky1 *  shading( pos, n, rd );\n            \n            col = vec3(0.3);\n            \n            if (pos.z < -25.)\n            \tcol = vec3(0.9, 0., 9.);\n\n            if (pos.z > 25.)\n            \tcol = vec3(0.0, 9., 0.);\n\n            \n            \n            if (pos.x < -25.)\n            \tcol = vec3(0.9, 0., 0.);\n\n            if (pos.x > 25.)\n            \tcol = vec3(0.0, 0., 0.9);\n \n            \n            // do we get to position our text? recenters\n\t\t\tvec2 tpos=0.65\n                // scales\n                +0.1*(pos).zx; \n            \t//+0.05*(pos).zx; \n            \n            // flip fixup\n            //tpos.x*=-1.0;\n                        tpos.y*=-1.;\n\n            \n \n            // in center now...\n            tpos.x-=0.15;\n \t\t\ttpos.y+=1.15;\n \n\t\t\tvec2 uv=36.*vec2(tpos.xy);\n\t\t\tuv.y=mod(uv.y,36.);\n\t\t\tuv.x=mod(uv.x,115.25/2.);\n\t\t\tuv.y-=16.;\n\t\t\tfloat cl=0.0;\n            // \n            // https://www.shadertoy.com/view/XtsGRl\n            \n           // float print_number(float number,vec2 pos, vec2 uv)\n              \n\t\t    cl += print_number(  360., print_pos,uv);\n\t\t    //cl += char(ch_6,uv);\n\t\t    //cl += char(ch_0,uv);\n            print_pos = vec2(2,-2);\n            // SSS3333\n\t\t    cl += char(ch_a,uv);\n\t\t    cl += char(ch_z,uv);\n\t\t    cl += char(ch_i,uv);\n\t\t    cl += char(ch_m,uv);\n\t\t    cl += char(ch_u,uv);\n\t\t    cl += char(ch_t,uv);\n\t\t    cl += char(ch_h,uv);\n            \n            print_pos = vec2(2,-12);\n\t\t    //cl += char(  get_digit(3.),uv);\n\t\t    \n            //cl += print_number(  float(iFrame), print_pos,uv);\n\n            float mousex = (2.0*iMouse.x-iResolution.x) / iResolution.y;\n    \t\t\n            // fixup our north\n            float mousex_deg = 90. + float(-270. * -mousex);\n            \n            //if (mousex_deg < 0.)\n            if (mousex_deg <= -1.) // keep zero positive\n            \n\t\t    cl += char(ch_dsh,uv);\n\t\t    //else\n            //    cl += char(ch_sp,uv);\n\n\t\t\tcl += print_number(abs(mousex_deg)  , print_pos,uv);\n\n        \n            // we have a float slider?\n\t\t    //col=mix(col,vec3(cl),0.32500);//FloatSlider);\n            col=mix(col,vec3(cl),0.32500*ffogtosky1);//FloatSlider);\n            \n            \n\t\t}\n\n#define LIGHTNING\n#ifdef LIGHTNING\n\t\t// lightning\n\t\tfloat occ = calcAO( pos, nor );\n\t\t\n        // is our light moving?\n        vec3 lig = normalize( \n            vec3(\n                // subtle jerk only. or zero it.\n                0.1*sin(iTime*0.0), \n                0.7,\n                0.0*cos(iTime*0.0)) \n        );\n        \n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n\t\tfloat dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n\t\tfloat bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n\t\tfloat dom = smoothstep( -0.1, 0.1, ref.y );\n\t\tfloat fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n\t\t\n        // this makes the shadow\n        dif *= softshadow( pos, lig, \n                          // 2.2, // and its gone.\n                          \n                          ICheight * 0.8\n                          //0.62\n                          ,\n                          \n                          2.5 );\n\t\t\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\t\tvec3 lin = vec3(0.0);\n\t\t\n        // now everything is yellow\n        lin += 1.10*dif*vec3(1.00,0.85,0.55);\n\t\t\n        // does this do anything?\n        lin += 1.20*spe*vec3(1.00,0.85,0.55)*dif;\n\t\t\n        // no blue\n        lin += 0.20*amb*vec3(0.50,0.70,0.00)*occ;\n        \n        // this adds blue? zero it\n\t\tlin += 0.30*dom*vec3(0.50,0.70,0.00)*occ;\n\t\t\n        lin += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        \n\t\tlin += 0.40*fre*vec3(1.00,1.00,0.00)*occ;\n\t\t\n        //ghostly without it\n        vec3 collocal = col*lin;\n        \n        \t\tcol = col * ffogtosky + ffogtosky1 *  collocal;\n        \n        \n        \n        //col=mix(col,col*lin,(ffogtosky1+fogtosky1)/2.0);//FloatSlider);\n#endif\n        // why do we loose shadows on higer altitude?\n        \n        // recolors pins to cubemap. need it?\n\t\tif(m>15.) {\n            \n            vec3 colpin = (col+0.1) * 4.0;\n            \n          \tcol = col * ffogtosky + ffogtosky1 *  colpin;\n            \n\t\t\t//col=pow( abs(clamp(getBackground(rd)*1.,0.5,1.0)), vec3(0.5945) );\n\t\t\t//col=pow( abs(clamp(vec4(1.0),0.5,1.0)), vec3(0.5945) );\n\t\t}\n\t}\n\t\n //   return vec3( clamp(col,0.0,1.0) );\n    \n \n   // #define DEBUG\n    \n#ifdef DEBUG\n    // real\n    if (gl_FragCoord.x < iResolution.x * 0.1)\n           return vec3( clamp(col,0.0,1.0) );\n\n    // paint/tex id\n    if (gl_FragCoord.x < iResolution.x * 0.2)\n           return vec3((m + 10.) / 50.0, 0.0, 0.0);\n\n\n    if (gl_FragCoord.x < iResolution.x * 0.3)\n           return vec3(1.0 - t * 0.01, 0.0, 0.0) ;\n\n    if (gl_FragCoord.x < iResolution.x * 0.4)\n           return vec3(\n        \n               // fog out land near horizon?\n          1.0 -    ( t * t * t) * 0.000000001\n        \n        , 0.0,\n                 ( m>=0.0 )?\n               0.0 : 1.0) ;\n\n    \n    if (gl_FragCoord.x < iResolution.x * 0.5)\n        return vec3(col.r, col.r, col.r);\n    \n  \n    \n     if (gl_FragCoord.x < iResolution.x * 0.6)\n        return vec3(colsky.r , colsky.g, colsky.b);\n\n      if (gl_FragCoord.x < iResolution.x * 0.7)\n        return vec3(colsky.r *fogtosky , colsky.g *fogtosky, colsky.b *fogtosky);\n    \n      if (gl_FragCoord.x < iResolution.x * 0.8)\n          \n          if(m>1.5) \n        \treturn vec3(ffogtosky1 , ffogtosky1, ffogtosky1);\n        else\n            return vec3(col.r  , col.g , col.b );\n    \n    \n    \n   \n    \n#endif\n    \n  \n    \n    return vec3( clamp(\n        \n        // black n white yay.\n        vec3(colsky.r *fogtosky , colsky.g *fogtosky, colsky.b *fogtosky) +\n        vec3(col.r *fogtosky1, col.g *fogtosky1, col.b*fogtosky1)\n        \n        // inverse red\n        //vec3(1.0 - col.r, 0, 0)\n        \n        // nightvisionish\n        //vec3(0., 1.0 - col.r, 0)\n        \n        //vec3(0., col.r, col.g) // cyan moonish\n\n        //vec3((m + 10.) / 50.0, 0.0, 0.0) // red paint for texture selection\n\n        //vec3(1.0 - t * 0.001, 0.0, 0.0) // red paint for texture selection\n\n        \n        ,0.0,1.0) );\n}\n\nmat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1. - c;\n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\n// called by?\nvoid myCamera() {\n\t \n\n    \n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec3 ro;\n     vec3 rd;\n         \n        \n\t\n    float cameraUpAmplitude = 1.0;\n\n    //float cameraUpAmplitude = 36.0;\n    //float cameraUpAmplitude = 136.0;\n    \n    \n    float mousex = (2.0*iMouse.x-iResolution.x) / iResolution.y;\n\n    \n    float mousey = (2.0*iMouse.y-iResolution.y) / iResolution.y;\n   \n    \n    //float cameraRoamSpeed = 2.0;\n    //float cameraRoamSpeed = 4.0;\n    float cameraRoamSpeed = 0.4;\n\n    \n    ro = vec3(\n        \n        //100. * mousex +\n        10. -cos(iTime* cameraRoamSpeed) * 1.\n        ,\n              \n              // whatif we want a really high flyby too?\n        \n        // text visible in preview mode?\n            \n        // cant we use mouseheel here?\n        10.+        cameraUpAmplitude+cos(iTime/3.)*cameraUpAmplitude,\n              \n          //    100. * mousex+\n                     1. + sin(iTime * cameraRoamSpeed) * 1.\n    \n    );\n    \n     \n    \n    vec3 camX   = vec3( 1.0, 0.0, 0.0) ;\n\tvec3 camY   = vec3( 0.0, 1.0, 0.0) ;\n\tvec3 camZ   = vec3( 0.0, 0.0, 1.0);\n\t\n\tvec2 uv0 = gl_FragCoord.xy / iResolution.xy;\n\tvec2 uv2 = 2.0*gl_FragCoord.xy / iResolution.xy - 1.0;\n\n\t rd = normalize(uv2.x*camX + uv2.y*camY + camZ);\n\n   // rd = normalize(rd);\n    \n    if (abs(mousey) < 1.0)\n    \trd *=  rotationMatrix(vec3(1., 0., 0.), radians(-180. * mousey));\n    \n    rd *=  rotationMatrix(vec3(0., 1., 0.), radians(-270. * -mousex));\n    \n    \n    // allow to peak around corners\n    float edge = 0.00;\n    \n    if (gl_FragCoord.x < iResolution.x * edge)\n    {\n        float cx= gl_FragCoord.x -iResolution.x * edge;\n        float cx0 =  (-cx / (iResolution.x * edge));;\n        float cx1 = 1.0 - (-cx / (iResolution.x * edge));;\n       \n         rd *=  rotationMatrix(vec3(0., 1., 0.), radians(-90. * cx0 * cx0));\n        \n        // rd *=  rotationMatrix(vec3(0., 1., 0.), radians(-0.001 * cx * cx));\n       // rd *=  rotationMatrix(vec3(0., 1., 0.), radians(-1.1 * sqrt(-cx)));\n    }\n    \n    \n\tvec3 col = render( ro, rd );\n    \n      if (gl_FragCoord.x < iResolution.x * edge)\n    {\n        float cx= gl_FragCoord.x -iResolution.x * edge;\n        float cx0 =  (-cx / (iResolution.x * edge));;\n        float cx1 = 1.0 - (-cx / (iResolution.x * edge));;\n            \n            col *= 1.0 - (cx0 * cx0);\n        //col.r *= cx1;\n        //col.b *= cx1;\n    }\n    \n\t//col = pow( abs(clamp(col,0.0,1.0)), vec3(0.945) );\n\tfragColor=vec4( col, 1.0 );\n    \n    \n\n}\n\n","name":"Image","description":"","type":"image"}]}