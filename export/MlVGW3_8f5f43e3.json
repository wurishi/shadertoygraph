{"ver":"0.1","info":{"id":"MlVGW3","date":"1477255878","viewed":771,"name":"Bilateral Local Contrast ++","username":"ttoinou","description":"Local Contrast Enhancement with basic gaussian bilateral blur. Obviously this shouldn't be used on compressed videos...\nClick to see the original colors.\nTodo : work in a better color space, keep chroma constant and only change luminosity ?","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["blur","contrast","hdr","gaussian","bilateral","local","lce"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BLENDCOEFF  (iMouse.z > 0.5 ? 0. : 2.) // (8.*DX-4.) // negative => cartoon effect\n#define RADIUS   \t(12) // if you tweak this u have to tweak two next values :(  \n#define BLENDCMIN   (-2.)\n#define BLENCCMAX   (-1.)\n#define DIAMETER \t(2*RADIUS+1)\n#define SPACESMOOTH (2./1.41)\n#define INTENSITYSMOOTH (0.12) // (iMouse.y/iResolution.y*5.) // the bigger the glower\n#define EPSILON \t(1e-15)\n#define LUMWEIGHT   (vec4(0.2126,0.7152,0.0722,0.))\n\n#define UNMIX(t,a,b) ( clamp( (t-a)/(b-a) , 0. , 1.) )\n\nvec2 viewport(vec2 p)\n{   \n    return p/(iResolution.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 pixelColor = texture(iChannel0,viewport(fragCoord.xy));\n    fragColor = vec4(0.);\n    float sum = 0.;\n    float coeff;\n    vec4 diff;\n    vec4 color = vec4(0.);\n    \n    float IntensitySmooth2 = INTENSITYSMOOTH*INTENSITYSMOOTH;\n    float SpaceSmooth2 = float(RADIUS*RADIUS)*SPACESMOOTH*SPACESMOOTH;\n    \n    for( int i = -RADIUS ; i <= RADIUS ; i++ ){\n        \n        \n        for( int j = -RADIUS ; j <= RADIUS ; j++ ){\n            \n            color = texture(iChannel0,viewport(fragCoord.xy+vec2(i,j)));\n            \n            diff = color - pixelColor;\n            coeff = exp( -(\n                  dot(diff*diff,LUMWEIGHT)/IntensitySmooth2\n                + float(i*i+j*j)/SpaceSmooth2 ) );\n            \n            //color = log(color+EPSILON);\n            \n            if( i == -RADIUS && j == -RADIUS ){\n            \tfragColor = color*coeff;\n            } else {\n            \tfragColor += color*coeff;\n            }\n            \n            sum += coeff;\n            \n        }\n        \n    }\n    \n\t//fragColor = exp(fragColor/sum - EPSILON);\n\tfragColor = fragColor/sum;\n    \n    diff = pixelColor - fragColor;\n    // uncertainty : http://people.csail.mit.edu/fredo/PUBLI/Siggraph2002/DurandBilateral.pdf\n    // if sum is too low we don't want to increases local contrast\n    coeff = 1.;\n    coeff = UNMIX( log(sum/float(DIAMETER*DIAMETER)) , BLENDCMIN , BLENCCMAX );\n    \n    fragColor = pixelColor + coeff*BLENDCOEFF*diff;\n    \n    // to see uncertainty\n    //fragColor = vec4(coeff);\n}","name":"Image","description":"","type":"image"}]}