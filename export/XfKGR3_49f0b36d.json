{"ver":"0.1","info":{"id":"XfKGR3","date":"1713069760","viewed":59,"name":"WIP Cold Boot Pause Screen","username":"int_45h","description":"a prototype for a pause screen i am making","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["e"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/XdGfRR\nfloat hash12(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p)) * uvec2(1597334673U, 3812015801U);\n\tuint n = (q.x ^ q.y) * 1597334673U;\n\treturn float(n) * 2.328306437080797e-10;\n}\n\nfloat value2d(vec2 p)\n{\n    vec2 p_grid = floor(p);\n    vec2 p_cell = fract(p);\n    \n    p_cell = p_cell*p_cell*(3.-2.*p_cell);\n    \n    return mix(\n        mix(hash12(p_grid+vec2(0,0)),hash12(p_grid+vec2(1,0)),p_cell.x),\n        mix(hash12(p_grid+vec2(0,1)),hash12(p_grid+vec2(1,1)),p_cell.x),\n        p_cell.y\n    );\n}\n\n#define OCTAVES 4\nfloat fbm(vec2 p)\n{\n    float a = 1.;\n    float s = 1.;\n    float n = 0.;\n    mat2 r = mat2(cos(.5), -sin(.5), sin(.5), cos(.5));\n    for (int i = 0; i < OCTAVES; i++)\n    {\n        n += value2d(p*s)*a;\n        s *= 2.;\n        a *= .5;\n        p *= r;\n    }\n    \n    return n / float(OCTAVES);\n}\n\nfloat box_dist(vec2 p)\n{\n    vec2 c_dist = abs(p)-.5;\n    float o = length(max(c_dist, vec2(0.)));\n    float i = min(max(c_dist.x, c_dist.y), 0.);\n    return o;\n}\n\nfloat square_grid(vec2 uv)\n{\n    vec2 uv_grid = floor(uv);\n    vec2 uv_cell = fract(uv);\n    return box_dist(uv_cell*2.-1.);\n}\n\nfloat screen_dist(vec2 uv)\n{\n    return min(length(uv), 1.);\n}\n\nvec3 blood_cloud(vec2 uv)\n{\n    uv *= 8.;\n    vec2 q = vec2(\n        fbm(uv+iTime*.12)*3.\n    );\n    vec2 r = vec2(\n        fbm(uv+q+iTime*.26)*3.\n    );\n    \n    float f = fbm(uv+r);\n    \n    vec3 bg = vec3(.03, .03, .03);\n    vec3 fg1 = vec3(188, 0, 13)/255.99;\n    vec3 fg2 = vec3(43, 0, 4)/255.99;\n    vec3 fg3 = vec3(94, 0, 21)/255.99;\n    vec3 col = mix(bg,fg1*4.,clamp(f,0.,1.));\n    col = mix(col,fg2,clamp(length(q),0.,1.));\n    col = mix(col,fg3,clamp(r.x,0.,1.));\n    \n    return mix(col*.1, col*.35, 1.-screen_dist((uv/9.)+vec2(0.,0.1)));\n}\n\n\nvec3 square_grid_colored(vec3 color, vec2 uv)\n{\n    float t = 0.;\n    float o = 0.01;\n    vec2 uv2 = uv * 24.;\n    vec2 uv_grid = floor(uv2);\n    vec2 uv_cell = fract(uv2);\n    \n    float grid_mask = square_grid(uv2);\n    float circle_mask = (1.-screen_dist(uv_grid / 24.));\n    circle_mask *= (value2d(uv_grid*.75 - vec2(0.,iTime*.9))*.7+.3);\n    \n    grid_mask = smoothstep(t+o,t,grid_mask);\n    grid_mask *= (circle_mask);\n    \n    return mix(color, color*2.1, grid_mask);\n    //return vec3(circle_mask);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = blood_cloud(uv);\n    col = square_grid_colored(col, uv);\n \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}