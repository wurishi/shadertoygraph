{"ver":"0.1","info":{"id":"M3sSDX","date":"1710101591","viewed":67,"name":"trippy hexagons","username":"kritr","description":"I worked off the kishimisu tutorial to make a vivid hexagon display.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["first"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t) {\n    vec3 a = vec3(0.481, 0.613, 0.125); vec3 b = vec3(0.494, 0.943, 0.654); vec3 c = vec3(1.431, 0.508, 0.543); vec3 d = vec3(5.505, 4.203, 0.733);\n    return a + b * cos(6.28318 * (c*t + d));\n}\n\nfloat sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\nfloat mkHex(in vec2 uv) {\n\n    float d = sdHexagon(uv, 10.);\n\n    d = sin(8. * d - iTime * 0.4)/8.;\n    d = abs(d);\n    \n    d = pow(0.04/d, 1.2);\n    \n    return d;\n}\n\nvec2 normCoords(in vec2 fragCoord)\n{\n    return ((fragCoord) * 2. - iResolution.xy)/iResolution.y;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 finalColor = vec3(0.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv1 = normCoords(fragCoord + vec2(0., 0.));\n    \n    vec2 uv2 = normCoords(fragCoord + vec2(0., 0.));\n    for (float i = 0.0; i < 3.; i++) {\n        uv1 = fract(uv1 * 2.0) - 0.5;\n\n        vec3 col = palette(length(uv2) + (i * 0.4) + iTime * 0.3);\n\n        float m = mkHex(uv1) * exp(-length(uv2));\n\n        finalColor += col * length(m);\n    }\n\n    // Output to screen\n    fragColor = vec4(finalColor * sin(length(uv2)),1.0);\n\n}\n","name":"Image","description":"","type":"image"}]}