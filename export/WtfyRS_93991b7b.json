{"ver":"0.1","info":{"id":"WtfyRS","date":"1592277074","viewed":318,"name":"Point In Shape Playground","username":"demofox","description":"some simple point in shape tests, for use as bokeh in this shader:\nhttps://www.shadertoy.com/view/3tXyRS","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// BOKEH SHAPES:\n// 0 = circle\n// 1 = triangle\n// 2 = hour glass\n// 3 = diamond\n// 4 = star\n#define BOKEH_SHAPE 4\n\nfloat SignedTriArea(vec2 a, vec2 b, vec2 c)\n{\n    return (b.x - a.x)*(c.y - a.y) - (b.y - a.y)*(c.x - a.x);\n}\n\nvec3 BaryCentricCoordinates(vec2 P, vec2 A, vec2 B, vec2 C)\n{\n    float ABC = SignedTriArea(A, B, C);\n    \n    vec3 ret;\n    ret.x = SignedTriArea(C, A, P) / ABC;\n    ret.y = SignedTriArea(A, B, P) / ABC;\n    ret.z = SignedTriArea(B, C, P) / ABC;    \n    return ret;\n}\n\nbool PointInTriangle(vec2 uv, vec2 A, vec2 B, vec2 C)\n{\n    vec3 bary = BaryCentricCoordinates(uv, A, B, C);\n    return clamp(bary, 0.0f, 1.0f) == bary;\n}\n\nfloat sdStar(in vec2 p, in float r, in int n, in float m)\n{\n    // https://iquilezles.org/articles/distfunctions2d\n\n    // next 4 lines can be precomputed for a given shape\n    float an = 3.141593/float(n);\n    float en = 3.141593/m;  // m is between 2 and n\n    vec2  acs = vec2(cos(an),sin(an));\n    vec2  ecs = vec2(cos(en),sin(en)); // ecs=vec2(0,1) for regular polygon,\n\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n    p -= r*acs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\n\nbool PointInShape(vec2 uv)\n{\n    #if BOKEH_SHAPE == 0\n    return length(uv - 0.5f) < 0.5f;\n    #elif BOKEH_SHAPE == 1\n    return PointInTriangle(uv, vec2(0.0f, 0.0f), vec2(0.5f, 1.0f), vec2(1.0f, 0.0f));\n    #elif BOKEH_SHAPE == 2\n    return PointInTriangle(uv, vec2(0.0f, 0.0f), vec2(0.5f, 0.7f), vec2(1.0f, 0.0f)) ||\n           PointInTriangle(uv, vec2(0.0f, 1.0f), vec2(0.5f, 0.3f), vec2(1.0f, 1.0f));\n    #elif BOKEH_SHAPE == 3\n    return PointInTriangle(uv, vec2(0.2f, 0.5f), vec2(0.5f, 1.0f), vec2(0.8f, 0.5f)) ||\n           PointInTriangle(uv, vec2(0.2f, 0.5f), vec2(0.5f, 0.0f), vec2(0.8f, 0.5f));    \n    #elif BOKEH_SHAPE == 4\n    return sdStar(uv - 0.5f, 0.5f, 5, 3.0f) < 0.0f;\n    #endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    uv.x -= (iResolution.x - iResolution.y) / iResolution.x;\n    \n    if (clamp(uv, 0.0f, 1.0f) != uv)\n    {\n        fragColor = vec4(0.2f, 0.2f, 0.2f, 1.0f);\n        return;\n    }\n    \n    float shade = PointInShape(uv) ? 1.0f : 0.0f;\n    fragColor = vec4(shade, shade, shade, 1.0f);\n}","name":"Image","description":"","type":"image"}]}