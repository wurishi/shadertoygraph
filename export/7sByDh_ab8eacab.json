{"ver":"0.1","info":{"id":"7sByDh","date":"1643403343","viewed":144,"name":"Imaginary Clock","username":"HyPeRbLaH","description":"spinny patterns","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["clock","spin","imaginary"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float getV(vec2 uv) {\n    float pi = acos(-1.0);\n    \n    float l = length(uv) * pi * 2.0;\n    float c = ceil(l);\n    \n    float t = iTime;\n    \n    float o = t * 4.0 / c - t * c * 0.001;\n    float ox = sin(o);\n    float oy = cos(o);\n    \n    uv = vec2(uv.x * ox - uv.y * oy, uv.x * oy + uv.y * ox);\n\n    float theta = 0.5 * atan(uv.x, uv.y) / pi + 0.5;\n    float q = mod(mod(theta * c, c), 1.0);\n    return q;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float s = 5.0;\n    float b = min(iResolution.x, iResolution.y) / s;\n    vec2 r = iResolution.xy / b;\n    float o = 0.3333;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv1 = (fragCoord + vec2(-o, -o)) * 2.0 / b - r;\n    vec2 uv2 = (fragCoord + vec2(o, -o)) * 2.0 / b - r;\n    vec2 uv3 = (fragCoord + vec2(o, o)) * 2.0 / b - r;\n    vec2 uv4 = (fragCoord + vec2(-o, o)) * 2.0 / b - r;\n\n    vec3 col = vec3((getV(uv1) +getV(uv2) +getV(uv3) +getV(uv4)) * 0.25);\n    //vec3 col = vec3(getV(fragCoord * 2.0 / b - r));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}