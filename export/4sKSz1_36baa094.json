{"ver":"0.1","info":{"id":"4sKSz1","date":"1462920473","viewed":268,"name":"Mandelbrot to tricorn","username":"stduhpf","description":"The formula of the complex mandelbrot set is z=sqr(z)+c\nThe formula of the complex tricorn set is z=sqr(conj(z))+c\n\nI used quaternion rotation in the hypercomplex plane to make a smooth transition between these two set.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","quaternion","rotation","morph","mandelbar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int n = 64;\n\nvec4 qmult(vec4 a,vec4 b)\n{\n    return vec4(a.x*b.x-a.y*b.y-a.z*b.z-a.w*b.w,\n                a.x*b.y+a.y*b.x+a.z*b.w-a.w*b.z,\n                a.x*b.z+a.z*b.x+a.w*b.y-a.y*b.w,\n                a.x*b.w+a.w*b.x+a.y*b.z-a.z*b.y);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime*.2;\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    vec4 um = iMouse/iResolution.y;\n    vec4 quv= 3.*vec4(uv-vec2(.5+(iResolution.x-iResolution.y)/(2.*iResolution.y),.5),0,0);\n    vec4 qum= 3.*vec4(um.xy-vec2(.5+(iResolution.x-iResolution.y)/(2.*iResolution.y),.5),0,0);\n    vec4 s = normalize(vec4(0,0,1,1)); //the value of the vector should be (0,0,a,b) with (a,b)!=(0,0)\n    vec4 q = vec4(cos(time),0,0,0)+sin(time)*s;\n    vec4 qi = (vec4(cos(time),0,0,0)+sin(time)*s)*vec4(1,-1,-1,-1);\n    vec4 c = quv;// use qum istead of quv to make julia sets (not really interresting)\n    vec4 z = quv;\n    float f =0.;\n    for(int i=0;i<n;i++){\n        z = qmult(q,qmult(qmult(z,z),qi))+c; //\"rotate\" z at each iteration\n        f=max(f,length(z));\n        if(length(z)>2.)return;\n          }\n    \n    \n\tfragColor = vec4(cos(f));\n}","name":"Image","description":"","type":"image"}]}