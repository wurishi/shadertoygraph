{"ver":"0.1","info":{"id":"Nd33zr","date":"1628983965","viewed":216,"name":"Audio visualizer","username":"alexandre_lamure","description":"Audio visualizer test","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["audio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// To test it, click on iChannel0 and choose a Music\n\n#define PI 3.141592\n\nvec3 drawWave(in vec2 uv)\n{\n    //resize uv\n    float downsize_x = 2.5;\n    uv.x = (uv.x * downsize_x) - (downsize_x-1.0)*0.5;\n    float downsize_y = 7.5;\n    uv.y = (uv.y * downsize_y) - (downsize_y-1.0)*0.5;\n    \n    // the sound texture is 512x2\n    int tx = int(uv.x*512.0);\n    \n    // second row is the sound wave, one texel is one mono sample\n    float wave = texelFetch( iChannel0, ivec2(tx,1), 0 ).x;\n    \n\n    // add wave form\t\n    float waveThickness = pow(abs(wave - 0.5), 0.6) * 3.0;\n\tvec3 waveCol = vec3(1.0 - smoothstep(0.0, waveThickness, abs(wave - uv.y)));\n    // colorize wave\n    float x_color_speed = 1.2;\n    float x_color1 = cos(iTime * x_color_speed + PI * uv.x) * 0.5 + 0.5;\n    float x_color2 = cos(iTime * x_color_speed + PI * uv.x + PI*0.25) * 0.5 + 0.5;\n    float x_color3 = 1.0 - x_color2;\n    waveCol *= vec3(waveCol.x * x_color3,\n                    waveCol.x * x_color2,\n                    waveCol.x * x_color1);\n    // enhance color\n    waveCol *= 1.2;\n    \n    // draw middle line\n    float line_thickness = 0.02;\n    float lineIsInXRange = float(uv.x > 0.0 && uv.x < 1.0);\n    float lineIsInYRange = float(uv.y > (0.5 - line_thickness) && uv.y < (0.5 + line_thickness));\n    float line_col = 1.0 * lineIsInXRange * lineIsInYRange;\n    \n    // combine\n    vec3 col = line_col > 0.0 ? vec3(1.0) : waveCol;\n    \n    // Fade left/right borders of wave\n    float fade = 0.2;\n    col *= smoothstep(0.0, fade, uv.x) * (1.0 - smoothstep(1.0-fade, 1.0, uv.x));\n    \n    return col;\n}\n\nvec3 drawFreq(const vec2 uv, vec2 fragCoord)\n{\n    // cartesian to polar\n    vec2 centered_uv = (fragCoord.xy - iResolution.xy*0.5) / max(iResolution.x, iResolution.y);\n    float r = sqrt(centered_uv.x*centered_uv.x + centered_uv.y*centered_uv.y);\n    float theta = atan(centered_uv.y, centered_uv.x);\n    // re-range to [0,1]\n    theta = theta / (2.0*PI) + 0.5;\n    \n    // Define bands\n    float nBands = 128.0;\n    float intBand = floor(theta*nBands);\n    float fractBand = fract(theta*nBands);\n    \n    // the sound texture is 512x2\n    int tx = int(intBand / nBands * 512.0);\n    \n    // first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\tfloat fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x; \n    \n    // draw bands circle\n    float circleMinRadius = 0.24;\n    float circleMaxRadius = 0.30;\n    float bandWidth = 0.1;\n    // add band width depending smoothly on time and theta\n    bandWidth += 0.3 * abs(cos(iTime * 0.4 + PI * theta));\n    // remap fft (freq amount) between [circleMinRadius, circleMaxRadius]\n    float freqAmount = circleMinRadius + (circleMaxRadius - circleMinRadius) * fft;\n    float isInBandRange = float(\n                fractBand < bandWidth // band width\n                && r > circleMinRadius // min radius\n                && r < freqAmount); // freq radius\n    vec3 freqColor = vec3(1.0) * isInBandRange;\n    \n    // colorize freq bands\n    float x_color_speed = 1.2;\n    float x_color1 = cos(iTime * x_color_speed + PI * theta) * 0.5 + 0.5;\n    float x_color2 = cos(iTime * x_color_speed + PI * theta + PI*0.25) * 0.5 + 0.5;\n    float x_color3 = 1.0 - x_color2;\n    freqColor *= vec3(x_color1, x_color2, x_color3);\n    \n    // draw line\n    float lineThickness = 0.003;\n    vec3 lineColor = vec3(float(r > circleMinRadius && r < circleMinRadius + lineThickness));\n    \n    \n    vec3 col = freqColor + lineColor;\n    \n    return col;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec3 drawCircles(in vec2 uv)\n{\n    // the sound texture is 512x2\n    int tx = int(uv.x * 512.0);\n    \n    // first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\tfloat fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x; \n    \n    vec3 col = vec3(0.0);\n    if (fft > 0.9)\n    {\n        col += rand(vec2(uv.y));\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // create pixel coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 col = vec3(0.0);\n    col += drawFreq(uv, fragCoord);    \n    col += drawWave(uv);\n    //col += drawCircles(uv);\n\n\t// output final color\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}