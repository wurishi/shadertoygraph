{"ver":"0.1","info":{"id":"cdyBRd","date":"1704890923","viewed":108,"name":"Ordered Dithering Transparency","username":"lavi","description":"Hold mouse and move left and right across the screen to see the effect\n\n4x4 Bayer Matrix\n8x8 Bayer Matrix","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["transparency","dither","bayer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define USE4X4\n\nconst float dither4x4[16] = float[16]\n(\n     1./16.,  9./16.,  3./16., 11./16., \n    13./16.,  5./16., 15./16.,  7./16., \n     4./16., 12./16.,  2./16., 10./16., \n    16./16.,  8./16., 14./16.,  6./16.\n);\n\nfloat find_closest4(vec2 texcoords, float alpha)\n{\n   \tint x = int(texcoords.x) % 4;\n    int y = int(texcoords.y) % 4;\n    \n    return step(dither4x4[x + y * 4], alpha);\n}\n\nconst float dither8x8[64] = float[64]\n(\n     1./64., 33./64.,  9./64., 41./64.,  3./64., 35./64., 11./64., 43./64., \n    49./64., 17./64., 57./64., 25./64., 51./64., 19./64., 59./64., 27./64., \n    13./64., 45./64.,  5./64., 37./64., 15./64., 47./64.,  7./64., 39./64., \n    61./64., 29./64., 53./64., 21./64., 63./64., 31./64., 55./64., 23./64., \n     4./64., 36./64., 12./64., 44./64.,  2./64., 34./64., 10./64., 42./64., \n    52./64., 20./64., 60./64., 28./64., 50./64., 18./64., 58./64., 26./64.,\n    16./64., 48./64.,  8./64., 40./64., 14./64., 46./64.,  6./64., 38./64.,\n    64./64., 32./64., 56./64., 24./64., 62./64., 30./64., 54./64., 22./64.\n);\n\nfloat find_closest8(vec2 texcoords, float alpha)\n{\n   \tint x = int(texcoords.x) % 8;\n    int y = int(texcoords.y) % 8;\n    \n    return step(dither8x8[x + y * 8], alpha);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv  = vec2(gl_FragCoord) / iResolution.xy;\n\n    // https://en.wikipedia.org/wiki/Ordered_dithering\n    // https://en.wikipedia.org/wiki/Luma_(video)\n    \n    //----------------\n    // shrink range and shift position to allow for 0 and 1 values close to edges of screen (FOR TESTING ONLY)\n    float alpha      = iMouse.x - 32.0;\n    float alphaRange = float(iResolution.x) - 64.0;\n    //----------------\n    \n    float lum = 0.0;\n    \n    #ifdef USE4X4\n        lum = find_closest4(fragCoord, alpha / alphaRange);\n    #else\n        lum = find_closest8(vec2(gl_FragCoord), alpha / alphaRange);\n    #endif\n    \n    lum = (lum * 2.0 - 1.0) * 0.5;\n    \n    float test = ( ( uv.x + lum ) < 0.5 ) ? 1.0 : 0.0;\n    \n    fragColor = vec4(0.0);\n    fragColor += texture(iChannel0, uv) * test;\n    fragColor += texture(iChannel1, uv) * (1.0 - test);\n}","name":"Image","description":"","type":"image"}]}