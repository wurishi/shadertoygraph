{"ver":"0.1","info":{"id":"MfScDD","date":"1722335908","viewed":65,"name":"daily shader clock 6","username":"jonasfrey","description":"i have created a small website https://shaderclock.deno.dev/ where i want to have multiple shader clocks\nif you want to participate make sure to add the tag 'shaderclockdenodev'","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["daily","shaderclockdenodev"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"daily shader clock 5\" by jonasfrey. https://shadertoy.com/view/XcjyD1\n// 2024-07-30 10:01:15\n\n// Fork of \"daily shader clock 4\" by jonasfrey. https://shadertoy.com/view/MfjcWz\n// 2024-07-29 14:27:30\n\n// Fork of \"daily shader clock 3 \" by jonasfrey. https://shadertoy.com/view/Xc2yzD\n// 2024-07-28 17:27:46\n\n\nvec4 f_o_col_bin(\n    vec2 o_trn, \n    int n\n){\n    \n    int[] a_b = int[] (\n        (n>>0)&1, \n        (n>>1)&1, \n        (n>>2)&1, \n        (n>>3)&1 \n    );\n    float n_its = float(a_b.length());\n    float n_it_nor_one = 1./n_its;\n    vec4 o_col = vec4(0.);\n    float n_max = 0.;\n    for(float n_it_nor = 0.; n_it_nor<1.; n_it_nor+=n_it_nor_one){\n    \n        int b = a_b[int(n_it_nor*n_its)];\n        float nc = length(\n            o_trn-vec2(\n                0.,\n                n_it_nor\n            )\n        );\n        float n_radius = (1./n_its/ 2.)*.5;\n        float n1 = 1.-pow(abs(nc-n_radius), 1./5.)*1.2;\n        float n2 = 1.-(nc/n_radius/2.);\n        n2 = clamp(n2, 0., 1.);\n        float n = n1;\n        if(b == 1){\n            n+=n2;\n        }\n        n_max = max(n, n_max);\n    }\n    return vec4(n_max);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 o_trn = (fragCoord.xy-iResolution.xy*.5)/min(iResolution.y, iResolution.x);\n    o_trn*=1.5;\n    vec2 o2 = clamp(o_trn+.5, 0., 1.);\n\n    float n_tau = 6.2831;\n    \n    float n_sec = iDate.w;\n    float n_sec_mod = mod(n_sec , 60.);\n    float n_sec_mod_nor = n_sec_mod / 60.;\n    float n_sec_mod_nor_snp = floor(n_sec_mod) / 60.;\n    float n_min_mod = floor(mod(n_sec, 60.*60.));\n    float n_min_mod_nor = n_min_mod / (60.*60.);\n    float n_min_mod_nor_snp = (floor(n_min_mod_nor*12.))/12.;\n    float n_hou_mod = floor(mod(n_sec, 60.*60.*12.));\n    float n_hou_mod_nor = n_hou_mod / (60.*60.*12.);\n    float n_hou_mod_nor_snp = (floor(n_hou_mod_nor*12.))/12.;\n    \n    float n_aa = (1./(iResolution.x+iResolution.y)/2.)*8.;\n    float n_its = 3.;\n    float n_it_nor_one = 1./n_its;\n    vec4 o_col = vec4(0.);\n    \n    float nr = max(abs(o_trn.x) , abs(o_trn.y));\n    float nm = 1.-sign(nr-.5);\n    nm = clamp(nm, 0., 1.);\n    nr = (nr -.5)/.2;\n    nr = 1.-pow(nr, 1./9.);\n    int n_idx = int(o2.x*3.);\n    float[] anmt = float[] (\n            n_hou_mod_nor_snp, \n            n_min_mod_nor_snp, \n            n_sec_mod_nor_snp\n    );\n    \n        for(float n_it_nor = 0.; n_it_nor < 1.; n_it_nor+=n_it_nor_one){\n\n        float[] anmt = float[] (\n            n_hou_mod_nor_snp, \n            n_min_mod_nor_snp, \n            n_sec_mod_nor_snp\n        );\n        float[] and = float[] (\n            12., \n            12., \n            12.\n        );\n        \n        float nd = and[int((n_it_nor)*3.)];\n        float nmt = anmt[int((n_it_nor)*3.)];\n        vec2 o_trn2 = o_trn - vec2(\n            n_it_nor-(1./3.), \n            0. - 1./3.\n        );\n        o_col += f_o_col_bin(\n            o_trn2, \n            int(nmt * nd)\n        );\n        \n    }\n    \n    fragColor = vec4(o_col);\n\n\n}","name":"Image","description":"","type":"image"}]}