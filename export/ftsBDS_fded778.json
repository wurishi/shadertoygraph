{"ver":"0.1","info":{"id":"ftsBDS","date":"1672225024","viewed":110,"name":"Splitting Squares","username":"Emil","description":"another test","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","animated","recursive","splitting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float animatedSquare(vec2 uv, float time, float type)\n{\n    vec2 anim_uv = uv - 0.25;\n    if (step(type, 0.5) == 0.0)\n    {\n        anim_uv -= vec2(0.25 * clamp(time*2.6-0.3, 0.0, 1.0),\n                        0.25 * clamp(time*2.6-1.3, 0.0, 1.0));\n    } else {\n        anim_uv -= vec2(0.25 * clamp(time*2.6-1.3, 0.0, 1.0),\n                        0.25 * clamp(time*2.6-0.3, 0.0, 1.0));\n    }\n    anim_uv = abs(anim_uv);\n    \n    float smoothness = fwidth(uv.x);\n    \n    return smoothstep(0.25+smoothness, 0.25, anim_uv.x) * \n            smoothstep(0.25+smoothness, 0.25, anim_uv.y);\n    //return step(uv.x, -0.5)*step(uv.y, -0.5);\n}\n\nfloat cellrandom(vec2 xy)\n{\n    return fract(sin(dot(xy, vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat get_rnd(float index, vec2 uv)\n{\n    vec2 new_uvs = uv*index;\n    new_uvs -= fract(new_uvs);\n    return cellrandom(new_uvs);\n}\n\nfloat get_type(float index, vec2 uv)\n{\n    vec2 new_uvs = uv*index;\n    new_uvs -= fract(new_uvs);\n    //return new_uvs.x;\n    return step(abs(new_uvs.x - new_uvs.y), 0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv.x -= 0.5;\n    \n    float loopTime = iTime+0.00001;\n    loopTime = mod(loopTime+5.0, 10.0);\n    loopTime = abs(loopTime-5.0);\n    loopTime -= 1.0;\n    float fTime = ceil(loopTime);\n    fTime = pow(2.,fTime);\n    \n    \n    float rnd_1 = get_rnd(2., uv);\n    float rnd_2 = get_rnd(4., uv);\n    float rnd_3 = get_rnd(8., uv);\n    float rnd_4 = get_rnd(16., uv);\n    float rnd_5 = get_rnd(32., uv);\n    \n    vec2 uv_1 = vec2(fract(uv.x*fTime),\n                fract(uv.y*fTime));\n    uv = abs(uv_1*2.0-1.0);\n    \n    float animTime = mod(loopTime, 1.0);\n    \n    float square = animatedSquare(uv, animTime, get_type(2., uv_1));\n    \n    //fragColor = vec4(vec3(rnd_1), 1.0);\n    fragColor = 1.0*vec4(vec3(square), 1.0);\n    //fragColor += vec4(uv, 0.0, 0.0);\n    //fragColor += 0.2*vec4(get_type(2., uv_1));\n}","name":"Image","description":"","type":"image"}]}