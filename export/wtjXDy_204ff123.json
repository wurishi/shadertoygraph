{"ver":"0.1","info":{"id":"wtjXDy","date":"1567028291","viewed":71,"name":"Learning Raymarching 001","username":"raphaelameaume","description":"raymarching, learning","likes":2,"published":1,"flags":0,"usePreview":0,"tags":[],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat opSmoothSubstraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\n\n\n\nfloat map(in vec3 pos)\n{\t\n    vec3 sphereSpacing = vec3(4.0, 1.0, 5.0);\n    vec3 spherePos = vec3(0.5 * cos(iTime), 0.5 * sin(iTime), 0.);\n    spherePos = vec3(0.,-2.0, mod(iTime, 10.) - 10.);\n    vec3 q = mod(pos - spherePos, sphereSpacing) - 0.5 * sphereSpacing;\n    float sphere = sdSphere(q, 0.25);\n    \n    \n    vec3 boxPos = vec3(0.0, 0.0, 0.0);\n    vec3 boxSpacing = sphereSpacing;\n    vec3 qBox = mod(pos - boxPos, boxSpacing) - 0.5 * boxSpacing;\n    \n    float box = sdBox(qBox, vec3(0.2, 0.2, 0.2));\n                      \n    float d = opSmoothUnion(sphere, box, 0.3);          \n    \n    \n    float ground = pos.y - (-0.25);\n                      \n    \n    \n    return min(d, ground);\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n    vec2 e = vec2(0.0001, 0.0);\n\treturn normalize(vec3(map(pos+e.xyy)-map(pos-e.xyy),\n                          map(pos+e.yxy)-map(pos-e.yxy),\n                          map(pos+e.yyx)-map(pos-e.yyx)));\n}\n\nfloat castRay(in vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    float limit = 30.0;\n    \n    for (int i=0; i <100; i++)\n    {\n    \tvec3 pos = ro + t*rd;\n        \n        float h = map(pos);\n        \n        if(h<0.001) break;\n        \n        \n        t += h;\n        \n        if (t > limit) break;\n    }\n    \n    if (t>limit) t = -1.0;\n    \n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 p = (2.0 * fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0.0, 0.0, 2.0);\n    ro.y = 3.0 + sin(iTime) * 2.0;\n    //ro.z += iTime * 10.;\n    vec3 rd = normalize(vec3(p, -1.5));\n\tvec3 col = vec3(0.6, 0.7, 0.9) - 0.5 * rd.y;\n    \n    vec3 fogColor = vec3(0.7, 0.7, 0.8);\n    \n    col = mix(col, fogColor, exp(-10.0*rd.y));\n    \n    float t = castRay(ro, rd);\n    \n    \n    if (t > 0.0)\n    {\n        vec3 pos = ro + t * rd;\n        vec3 nor = calcNormal(pos);\n        \n        vec3 mate = vec3(0.18);\n        \n        vec3 sunDir = normalize(vec3(0.8, 0.2, 0.2));\n        float sunDif = clamp(dot(nor, sunDir), 0.0, 1.0);\n        float skyDif = clamp(0.5 + 0.5 *dot(nor, vec3(0.0, 1.0, 0.0)), 0.0, 1.0);\n        float sunShadow = step(castRay(pos + nor*0.001, sunDir), 0.0);\n        float bounceDif = clamp(0.5 + 0.5 *dot(nor, vec3(0.0, -1.0, 0.0)), 0.0, 1.0);\n        \n        // main light\n        col = mate * vec3(7.0, 5.0, 3.0) * sunDif*sunShadow;\n        // sky light\n        col += mate * vec3(0.5, 0.8, 0.9) * skyDif;\n\t\t// bounce light\n        col += mate * vec3(0.7, 0.3, 0.2) * bounceDif;\n        \n    }\n    \n    col = pow(col, vec3(0.4545));\n                        \n                    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}