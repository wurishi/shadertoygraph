{"ver":"0.1","info":{"id":"clKfWK","date":"1702496789","viewed":109,"name":"aasda","username":"lgps","description":"dots","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["dots"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\n                         Bioluminescence\n                  ----------------------------\n\n    A reddit post showing bioluminescent algae being set aglow by \n    rain drops caught my attention a number of days ago. I used that\n    video as a reference to make this shader.\n    \n    The shader is made of a number of layers of cells of randomly \n    positioned glow, synced with ripples that appear to come from\n    nonexistent raindrops that hit the water's surface. The shader\n    has no depth, instead it uses a UV trick and bokeh to appear 3d. \n    \n*/\n\n/// Hash function from Dave Hoskins\n/// shadertoy.com/view/4djSRW\nfloat hash21(vec2 p) {vec3 p3  = fract(vec3(p.xyx) * .1031);p3 += dot(p3, p3.yzx + 33.33);return fract((p3.x + p3.y) * p3.z);}\n\n/// Generalised n degree Polynomial Impulse function from IQ\n/// iquilezles.org/articles/functions/ \nfloat impulse( float k, float n, float x ) {return (n/(n-1.))*pow((n-1.)*k,1./n)*x/(1.+k*pow(x,n));}\n\n/// Layer function to create algae glow and ripples\n/// The shader uses 5 of these layers to achieve the\n/// desired frequency of rain heaviness\nvec3 Layer(vec2 uv, float index) {\n\n    // Initialise variables\n    vec3 col = vec3(0.);\n    vec2 droplets = vec2(0.),\n    // gv is uv of the cell\n    gv = fract(uv)-.5,\n    // id is the coordinate of the cell\n    id = floor(uv);\n    \n    \n    // Loops through -1,-1 to 1,1 (a 3x3 grid) to account\n    // for neighbouring droplets that would otherwise be\n    // cut off by the cell boundary\n    for (int y=-1;y<=1;y++) {\n        for (int x=-1;x<=1;x++) {\n            vec2 offs = vec2(x, y);\n            // Hash of the position used to modify otherwise uniform\n            // cells to look random and varied.\n            float n = hash21(vec2(id+offs)),\n            \n            // Uses the polynomial impulse function to create the realistic\n            // appearance of a raindrop setting aglow a cluster of algae before\n            // they fade out quickly.\n            impulse = max(n*impulse(1e3, 4.-2.*n, fract(.2*iTime+n*1e2+index)), .1) - .1,\n            \n            // Glow attributes\n            dist = length(gv-offs-vec2(n, fract(n*69.))+.5),\n            radius = .07*impulse,\n            intensity = 1.5+n*n,\n            \n            /// Glow adapted from alro's `Neon Love`\n            /// shadertoy.com/view/WdK3Dz\n            /// His glow tutorial was also very useful\n            /// shadertoy.com/view/3s3GDn\n            glow = pow(radius/dist, intensity);\n            col += glow * vec3(.2,.5,.9+n);\n            \n            /// Ripples adapted from `Rainier mood`\n            /// shadertoy.com/view/ldfyzl\n            /// Ctrl-Alt-Test (ctrl-alt-test.fr)\n            float t = fract(.2*iTime+n*1e2+.2+index);\n            vec2 v = id+offs+vec2(n, fract(n*69.)) - uv;\n            float d = length(v) - t,\n            carrier = cos(10.*radians(180.)*d),\n            i = clamp(3.*d + 1., -1., 1.),\n            energy = n*(1.-(i * i * (3. - 2.*abs(i))));\n            droplets += 16.* normalize(v) * carrier * energy * pow(1.-t, 3.-n+t);}}\n    droplets /= 9.;\n    vec3 n = vec3(droplets, sqrt(1. - dot(droplets, droplets)));\n    col += vec3(.2,.5,.9) * 5.*pow(clamp(dot(n, normalize(vec3(uv, .4))), 0., 1.), 4.);\n    return col;}      \n    \n/// Main function\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    /// A nice effect shown off by Xor\n    /// mini.gmshaders.com\n    /// shadertoy.com/view/mlBfR3\n    vec2 res = iResolution.xy;\n    vec2 pos = fragCoord - res*.5;\n    vec2 uv = pos / (res - pos * 1.).y + .5;\n    \n    vec3 col = vec3(.2,.5,.9)*.1;\n  \n    // 5 layers to achieve the desired rain heaviness\n    // More layers makes more 'droplets'\n    #define LAYERS 5.\n  \n    /// Warping of UV based on water movement in this shader\n    /// shadertoy.com/view/ldByDw\n    for (float i=0.; i<1.; i+=1./LAYERS) { col += Layer(vec2(\n        uv.x*5.+i*512.  +.25*sin(1.5*length(uv.xy*2.)-iTime) + .25*sin(1.5*length(uv.xy-vec2(55))-iTime)  +0.1*iTime+10.,\n        uv.y*5. +.3*iTime ), i/LAYERS);}\n    \n    // Glow colour management as suggested by P_Malin\n    // (See glow tutorial shader comments)\n    col = 1.-exp( -col );\n    \n    fragColor = vec4(col,1.);}","name":"Image","description":"","type":"image"}]}