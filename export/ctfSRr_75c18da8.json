{"ver":"0.1","info":{"id":"ctfSRr","date":"1674299163","viewed":61,"name":"Sinusoidal rainbow","username":"nseven","description":"exercise from The book of shaders","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define COUNT 7\n#define SMOOTH 0.03\n\nvec3 colors[COUNT] = vec3[](\n    vec3(148.0/255.0, 0, 211.0/255.0),\n    vec3(75.0/255.0, 0, 130.0/255.0),\n    vec3(0, 0, 255.0/255.0),\n    vec3(0, 255.0/255.0, 0),\n    vec3(255.0/255.0, 255.0/255.0, 0),\n    vec3(255.0/255.0, 127.0/255.0, 0),\n    vec3(255.0/255.0, 0 , 0)\n);\n\nvoid mixColor(inout vec3 baseColor, vec3 newColor, vec2 uv, float lineWidth, float mixCoef) {\n    float y = 1.0 - (pow(uv.x * 2.0 - 1.0, 2.0) + lineWidth * mixCoef);\n    vec3 z = vec3(y - lineWidth, y, pow(uv.y, 2.0));\n    float p = step(z.x, z.z) - step(z.y, z.z);\n    // NOTE: comment setp above and uncomment smoothstep below for blurred version\n    //float p = smoothstep(z.x - SMOOTH, z.x + SMOOTH, z.z) - smoothstep(z.y - SMOOTH, z.y + SMOOTH, z.z);\n    baseColor = mix(baseColor, newColor, p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 color = vec3(0.1,0.7,0.9);\n    \n    float lineWidth = (1.0/float(COUNT)) * 0.5;\n    \n    for (int i = 0; i < COUNT; i++) {\n        float mixCoef = mix(float(i), float(COUNT - i - 1), (sin(iTime) + 1.0) / 2.0);\n\n        mixColor(color, colors[i], uv, lineWidth, mixCoef);\n    }\n    \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}