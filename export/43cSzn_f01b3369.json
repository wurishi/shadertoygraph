{"ver":"0.1","info":{"id":"43cSzn","date":"1718477196","viewed":43,"name":"Relaxing Color Swim","username":"multiphonic","description":"Made with ChatGPT","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["waves","bitwise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized and symmetrical coordinates (-1 to 1)\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Make symmetrical on the y-axis\n    uv.x = sin(uv.x);\n    uv.y = cos(uv.y);\n\n    // Apply zoom\n    float zoom = 1.0 + 0.5 * sin(iTime * 0.3);\n    uv /= zoom;\n\n    // Apply rotation\n    float angle = iTime * 0.3;\n    float s = sin(angle);\n    float c = cos(angle);\n    uv = mat2(c, -s, s, c) * uv;\n\n    vec3 ro = vec3(0.0, 0.0, 0.0);  // Ray origin\n    vec3 rd = normalize(vec3(uv, -0.0));  // Ray direction\n\n    float time = iTime * 0.2;\n\n    float t = 0.5;\n    vec3 p;\n    vec3 col = vec3(0.5);\n\n    for (int i = 0; i < 20; i++) {\n        p = ro + t * rd;\n        if (max(abs(p.x), max(abs(p.y), abs(p.z))) < 0.6) {\n            vec2 faceUV = vec2(1.0) + time;\n            if (abs(p.x) > abs(p.y) || abs(p.x) > abs(p.z + time)) {\n                faceUV = p.yz * abs(p.y);\n            } else if (abs(p.y) > abs(p.x) || abs(p.y) > abs(p.z)) {\n                faceUV = p.xy / abs(p.z);\n            } else {\n                faceUV = p.yx / abs(p.y);\n            }\n            faceUV = faceUV * 0.5 + 0.5;\n\n            // Circles everywhere\n            float radius = 0.05 + 0.02 * sin(time * 5.0);\n            float d = length(fract(faceUV * 5.0) - 0.5) - radius;\n            float circle = smoothstep(0.01, 0.02, d);\n\n            col = mix(vec3(2.0, 0.5, 0.2), vec3(0.2, 0.5, 1.0), circle);\n            break;\n        }\n        t += 0.1;\n    }\n\n    // Apply bitwise glitch effect to the color\n    float glitch = float(int(abs(uv.x) * 10.0) ^ int(abs(uv.y) * 2.0) & int(time * 10.0)) * 0.15;\n    col *= vec3(glitch, glitch * 1.5, glitch * 0.2);\n\n    // High contrast and angles\n    col = col * 3.5 - 1.0; // Increase contrast more aggressively\n    col = abs(col); // Create sharp angles\n\n    // Add subtle lines\n    float lines = step(1.02, abs(sin(uv.x * 10.0 + time) * 0.5)) * 0.2 +\n                  step(1.42, abs(sin(uv.y * 10.0 + time) * 0.5)) * 0.2 +\n                  step(2.02, abs(sin(uv.x * 15.0 + time) * 0.5)) * 0.2 +\n                  step(0.02, abs(sin(uv.y * 15.0 + time) * 0.5)) * 0.2 +\n                  step(2.52, abs(sin(uv.x * 20.0 + time) * 0.5)) * 0.2;\n    col += vec3(lines);\n\n    // Add triangles in the center\n    float triangle = step(1.02, abs(sin(uv.x * 10.0 + time) * 0.5)) * \n                     step(2.02, abs(cos(uv.y * 10.0 + time) * 0.5));\n    col -= vec3(triangle);\n\n    // Add gradient based on UV coordinates\n    vec3 gradient = vec3(uv.x, uv.y, 1.0 - abs(uv.x + uv.y)) * 0.5 + 0.5;\n    col = mix(col, gradient, 0.5);\n\n    // Add noise texture\n    float noise = fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n    col += noise * 0.1;\n\n    col = clamp(col, 0.2, 1.0);\n\n    // Invert colors\n    col = 1.0 - col;\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}