{"ver":"0.1","info":{"id":"MlySDK","date":"1485907469","viewed":91,"name":"Reveal Assignment","username":"dabeesknees","description":"Assignment 2, Reveal Shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["reveal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Stephen Costello\n//Assignment2 - Reveal\n\n//Radius of the circle that will have the \"revealed\" texture (percentage ie: .1 = 10%)\nfloat cirRad = 0.1;\n\n//blur modifier\n//value to be used to increase or decrease total blur\nfloat bm = 3.0; \n\n//blur intensity\n//value to be used to create blur intensity\n//intensity is modified by increaseing or decreating the blur modifier variable (bm)\nfloat bi = 0.111 * bm; \n\n//reveal modifier\n//value to be used to increase or decrease total reveal\nfloat rm = 1.0; \n\n//reveal intensity\n//value to be used to create sharpen intensity\n//intensity is modified by increaseing or decreating the reveal modifier variable (rm)\nfloat ri = 5.0 * rm;\n\n//Setup Matrixes\n\n//blur matrix\n//use the blur intensity (bi) value to fill\nmat3 blur = mat3(\n \tbi, bi, bi,\n \tbi, bi, bi,\n \tbi, bi, bi\n);\n\n//sharpen matrix\nmat3 sharpen = mat3(\n \t0.0, -1.0, 0.0,\n \t-1.0, ri, -1,\n \t0.0, -1.0, 0.0\n);\n\n//Following code originally by Nikos Papadopoulos\n//heavily modified by Dr. Sajid Farooq\n//Additionally modified by myself for this assignment\n\n//Sample function to be used in the filter function\nvec3 sample(const int x, const int y, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = (uv + vec2(x, y));\n\treturn texture(iChannel0, uv).xyz;\n}\n\n//The function for applying a filter\nvec3 filter(in vec2 fragCoord, mat3 kernel)\n{\n\tvec3 sum = sample(-1, -1, fragCoord) * kernel[0][0]\n\t+ sample(-1, 0, fragCoord) * kernel[0][1]\n\t+ sample(-1, 1, fragCoord) * kernel[0][2]\n\t+ sample( 0, -1, fragCoord) * kernel[1][0]\n\t+ sample( 0, 0, fragCoord) * kernel[1][1]\n\t+ sample( 0, 1, fragCoord) * kernel[1][2]\n\t+ sample( 1, -1, fragCoord) * kernel[2][0]\n\t+ sample( 1, 0, fragCoord) * kernel[2][1]\n\t+ sample( 1, 1, fragCoord) * kernel[2][2];\n \n\treturn sum;\n}\n\n//Main function\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //defines the uv and sets it to the correct aspect ratio\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x = uv.x * (iResolution.x / iResolution.y);\n    \n    //Create two separate layers as vec4s\n    vec4 layer1; //Blur Layer\n \tvec4 layer2; //Sharpen Layer\n    \n    //Gets the mouse location in relation to the texture and sets it so that it will shw up where the user clicks\n    vec2 mouseLoc = iMouse.xy / iResolution.xy; \n    mouseLoc.x = mouseLoc.x * (iResolution.x / iResolution.y);\n    \n    //Defines the filter which will be used to \"reveal/sharpen\" an area of layer2 (layer1)\n    vec3 filterSharp = filter(fragCoord.xy, sharpen);\n    \n    //Defienes the filter which will be used to blur the background image (layer2)\n    vec3 filterBlur = filter(fragCoord.xy, blur);\n    \n    //converts filterSharp to a vec4\n    //sets the filter of layer1 to the sharp filter (filterSharp) by adding an alpha variable\n    layer1 = vec4(filterSharp, 1.0);\n    \n    //converts filterBlur to a vec4\n    //sets the filter of layer 2 to the blur filter (filterBlur) by adding an alpha variable\n    layer2 = vec4(filterBlur, 1.0);\n    \n    //Allows the second layer to appear over the first layer if it is within the defined circle radius (cirRad)\n    if(length(uv - mouseLoc) <= cirRad)\n    {\n\t\tlayer2.a = 0.0;\n    }\n \n \t//Sets the output of the code to the blended values\n \tvec4 blend = mix(layer1, layer2, layer2.a);\n \tfragColor = blend;   \n}","name":"Image","description":"","type":"image"}]}