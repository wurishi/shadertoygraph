{"ver":"0.1","info":{"id":"csyyD3","date":"1696660036","viewed":56,"name":"bling bling bling","username":"zyc","description":"bling bling bling","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["bling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BLOCK 0.095\nconst vec3 starColor = vec3(1.0, 1.0, 1.5);\nconst float PHI = 1.61803398874989484820459; // Î¦ = Golden Ratio \n\n\n  float gold_noise(in vec2 xy, in float seed)\n  {\n    return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);\n  }\n\nfloat sdStar(in vec2 p, in float r, in int n, in float m) // m=[2,n]\n{\n    // these 4 lines can be precomputed for a given shape\n    float an = PI/float(n);\n    float en = PI/m;\n    vec2  acs = vec2(cos(an),sin(an));\n    vec2  ecs = vec2(cos(en),sin(en)); // ecs=vec2(0,1) and simplify, for regular polygon,\n\n    // symmetry (optional)\n    p.x = abs(p.x);\n    \n    // reduce to first sector\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n\n    // line sdf\n    p -= r*acs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\n\nvec3 getSpotLightOne(vec2 uv, vec2 center, float radius, vec3 color, float s){\n\tfloat ratio = iResolution.x/iResolution.y; \n    uv.x *= ratio;\n    center.x *= ratio;\n    \n    float n = s;  // n, number of sides\n    float a = 0.68;                 // angle factor\n    float w = 2.0 + a*a*(n-2.0);        // angle divisor, between 2 and n\n    vec2 p = uv - center;\n    p.x /= ratio;\n    float d = sdStar(p, radius, int(n), w);\n    \n    vec3 col = (d > 0.0) ? vec3(0.0) : color;\n    float f = 1.05 - exp(-30.0*abs(d));\n    col *= f;\n    return col;\n}\n\nvec4 appendGrain(vec2 uv, vec4 src) {\n    float strength = 16.0;\n    \n    float x = (uv.x + 4.0 ) * (uv.y + 4.0 ) * 10.0;\n\tvec4 grain = vec4(mod((mod(x, 13.0) + 1.0) * (mod(x, 123.0) + 1.0), 0.01)-0.005) * strength;\n    return src * (1.0 - grain);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float progress = fract(iTime);\n    float ratio = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 buv = uv;\n    \n    vec3 light = vec3(0.0);\n    vec2 nuv = floor(buv/BLOCK)*BLOCK;\n    vec2 blockCenter = nuv + vec2(BLOCK)*0.5;\n    vec4 col = texture(iChannel1, blockCenter); \n    float brightness = getBrightness(col.rgb);\n    float radius = mix(0.3, 0.36, progress) * BLOCK;\n    \n    float seed = fract(iTime);\n    float angle = PI * (progress+0.5) * 0.1;\n    mat2 rot = mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\n        \n    if (brightness > BRIGHTNESS_LIMIT) {\n       float n = 4.0 + floor(mix(0.0, 5.0, (brightness-BRIGHTNESS_LIMIT)*3.0));\n       light = getSpotLightOne(rot*uv, rot*blockCenter, radius, starColor * (4.0 + 2.0 * progress), n);\n       light = pow(light, vec3(2.9));\n    }\n    \n    vec4 bg = texture(iChannel0, uv);\n    vec4 result = bg;\n    \n    result = appendGrain(uv, result);\n    result = vec4(max(result.rgb, light), bg.a);\n\tfragColor = result;  \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define BRIGHTNESS_LIMIT 0.60\n#define PI 3.1415926\n\n\nfloat getBrightness( vec3 col )\n{\n    float brightness = (col.r + col.g + col.b) / 3.0;\n    brightness *= step(BRIGHTNESS_LIMIT, brightness);\n    return brightness;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 col = texture(iChannel0, uv); \n    float brightness = getBrightness(col.rgb);\n    fragColor = vec4(brightness);\n}","name":"Buffer A","description":"","type":"buffer"}]}