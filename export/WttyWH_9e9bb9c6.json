{"ver":"0.1","info":{"id":"WttyWH","date":"1608987819","viewed":296,"name":"Simple Graph Viewer","username":"jolle","description":"Simple Graph Viewer\n\nChange function and viewport at top of shader.\n\nDefault function fakes oscilloscope.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","oscilloscope","math","graph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat f(float x)\n{\n    return dot(cos(x * vec3(1.0, 2.0, 4.0) + iTime), vec3(1.0));\n}\n\nvec2 viewportMin = vec2(-7.0, -4.0);\nvec2 viewportMax = vec2(7.0, 4.0);\n\nvec3 backgroundColor = vec3(1.0);\nvec3 gridColor = vec3(0.9);\nvec3 axisColor = vec3(0.25);\nvec3 graphColor = vec3(0.0);\n\nfloat sq(vec2 x)\n{\n    return dot(x, x);\n}\n\nvec2 getClosestPointOnGraph(vec2 p, float x0, float x1)\n{\n    // Bin search (not Newtonâ€“Raphson because requires proper gradient)\n    for (int n = 0; n < 4; n++)\n    {\n        float d0 = sq(p - vec2(x0, f(x0)));\n        float d1 = sq(p - vec2(x1, f(x1)));\n        float mid = (x0 + x1) * 0.5;\n        if (d0 < d1)\n            x1 = mid;\n        else\n            x0 = mid;\n    }\n    // Get closest point on line for result\n    vec2 p0 = vec2(x0, f(x0));\n    vec2 p1 = vec2(x1, f(x1));\n    vec2 v = normalize(p1 - p0);\n    return p0 + v * dot(p - p0, v);\n}\n\nbool isClosestToZero(float x, float d)\n{\n    return abs(x) < abs(x - d) && abs(x) < abs(x + d);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 pixelSize = (viewportMax - viewportMin) / iResolution.xy;\n    vec2 position = (fragCoord - 0.5) * pixelSize + viewportMin;\n\n    // Background\n    vec3 color = backgroundColor;\n\n    // Grid\n    vec2 gd = 1.0 - abs(0.5 - fract(position)) * 2.0;\n    if (isClosestToZero(gd.x, pixelSize.x * 2.0) ||\n        isClosestToZero(gd.y, pixelSize.y * 2.0))\n        color = gridColor;\n\n    // Axis notches\n    if (abs(position.y) < pixelSize.y * 2.5 && isClosestToZero(gd.x, pixelSize.x * 2.0) ||\n        abs(position.x) < pixelSize.x * 2.5 && isClosestToZero(gd.y, pixelSize.y * 2.0))\n        color = axisColor;\n\n    // Axis\n    if (isClosestToZero(position.x, pixelSize.x) || \n        isClosestToZero(position.y, pixelSize.y))\n        color = axisColor;\n\n    // Graph\n    vec2 p = getClosestPointOnGraph(position, position.x - pixelSize.x, position.x + pixelSize.x);\n    float d = length((p - position) / pixelSize);\n    color = mix(color, graphColor, clamp(1.25 - d, 0., 1.));\n\n    fragColor = vec4(sqrt(color), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}