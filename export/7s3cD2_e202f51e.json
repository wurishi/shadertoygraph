{"ver":"0.1","info":{"id":"7s3cD2","date":"1654068164","viewed":75,"name":"cg2 simplex-shader","username":"cgcostume","description":"didactic example for a simplex grid (not optimized, from live coding during lecture)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["procedural","grid","basics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float scale = 8.0;\nconst float LAMBDA = 0.5 * (sqrt(float(2) + 1.0) - 1.0);\n\nconst float pi = 3.14159265;\nconst float iskewx = 1.0 / cos(30.0 * pi / 180.0);\n\nvec2 skew(in vec2 st) {\n    return vec2(iskewx * st.x, 0.5 * st.x + st.y);\n}\n\nvec2 skewu(in vec2 st) { // alternative\n    return st + LAMBDA * (st.x + st.y);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    \n    // move the noise a little around \n\n    vec2 uv_scaled = (uv * vec2(aspect, 1.0));\n    uv_scaled -= 0.5;\n    uv_scaled *= 1.0 + sin(iTime * sqrt(2.0)) * 0.1;\n    uv_scaled += 0.5;\n    uv_scaled = uv_scaled * scale + scale / 16.0 * vec2(sin(iTime), cos(iTime));\n \n    vec2 uv_skewed = mix(skew(uv_scaled), skewu(uv_scaled), step(0.5, uv.x));\n    uv_skewed = fract(uv_skewed);\n\n    fragColor = vec4(vec3(uv_skewed, step(uv_skewed.x, uv_skewed.y)), 1.0);\n}","name":"Image","description":"","type":"image"}]}