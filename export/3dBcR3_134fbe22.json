{"ver":"0.1","info":{"id":"3dBcR3","date":"1587029897","viewed":126,"name":"sdLine Continuity","username":"harry7557558","description":"Use a power higher than 2 to increase the continuity of line segment primitive for modeling","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sdf","smooth","g2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Time measured with Shadertoy unofficial plugin by Patu\n\n// 1.00ms\nfloat sdLine(vec3 p, vec3 a, vec3 b){\n    vec3 pa = p-a, ba = b-a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba),0.,1.);\n    return length(pa-ba*h);\n}\n\n// 1.15ms\nfloat sdLine4(vec3 p, vec3 a, vec3 b){\n    vec3 pa = p-a, ba = b-a;\n    float h = dot(pa,ba)/dot(ba,ba);\n    pa -= ba*h;\n    h = max(abs(h-.5)-.5,0.);\n    return sqrt(length(vec2(dot(pa,pa),h*h*dot(ba,ba))));\n}\n\n// 1.25ms\nfloat sdLine3(vec3 p, vec3 a, vec3 b){\n    vec3 pa = p-a, ba = b-a;\n    float h = dot(pa,ba)/dot(ba,ba);\n    float u = length(pa-ba*h), v = max(abs(h-.5)-.5,0.)*length(ba);\n    return pow(u*u*u+v*v*v,1./3.);\n}\n\n// 1.5ms-1.6ms\nfloat sdLineN(vec3 p, vec3 a, vec3 b, float n){\n    vec3 pa = p-a, ba = b-a;\n    float h = dot(pa,ba)/dot(ba,ba);\n    float u = length(pa-ba*h), v = max(abs(h-.5)-.5,0.)*length(ba);\n    return pow(pow(u,n)+pow(v,n),1./n);\n}\n// n=2:    G1\n// 2<n<3:  G2 with divergent 3rd derivative, looks like G1\n// n=3:    G2, looks like G2\n// 3<n<4:  G3 with divergent 4th derivative\n// nâ‰¥4:    G3+\n\n\n\nvec3 a, b;\nfloat map(vec3 p){\n    return sdLineN(p,a,b,3.-cos(iTime))-1.0;\n}\nvec3 grad(vec3 p){\n    const float e = .001;\n\tfloat a = map(p+vec3(e,e,e));\n\tfloat b = map(p+vec3(e,-e,-e));\n\tfloat c = map(p+vec3(-e,e,-e));\n\tfloat d = map(p+vec3(-e,-e,e));\n\treturn normalize(vec3(a+b-c-d,a-b+c-d,a-b-c+d));\n}\n\n\n#define res iResolution.xy\nvoid mainImage(out vec4 col, in vec2 coord) {\n    vec3 p = vec3(0,0,10.);\n    float sc = 1./length(res);\n    vec3 d = normalize(vec3(10.*(coord-.5*res)*sc,0.)-p);\n    \n    if (iMouse.z>0.){\n        vec2 uv = 3.*(iMouse.xy-.5*res)*sc;\n        a = 1.2*normalize(vec3(uv,cos(2.*length(uv)))), b=-a;\n    }\n    else{\n        //float c = cos(iTime), s = sin(iTime);\n        float c = 1., s = 0.;\n        a = vec3(1.2*c,.4*c,-s), b=-a;\n    }\n    \n    // the usual raymarching code\n    col = vec4(0,0,0,1);\n    float t=0., dt;\n    for (int i=0;i<64;i++){\n        dt = map(p+t*d);\n        t += dt;\n        if (dt<.001) break;\n        if (t>100.) return;\n    }\n    col.xyz=vec3(.9*max(dot(grad(p+t*d),vec3(.55)),0.)+.1);\n}\n\n\n\n","name":"Image","description":"","type":"image"}]}