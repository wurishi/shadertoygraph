{"ver":"0.1","info":{"id":"MsXcRM","date":"1487416632","viewed":187,"name":"-Mandelbulb-","username":"yumcyawiz","description":"1.0 ~ 8.0 powered mandelbulb rendered with simple \"steps AO\".","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int maxIter = 100;\nfloat df(vec3 p, float power) {\n    vec3 z = p;\n    float r = 0.0;\n    float dr = 1.0;\n    for(int i = 0; i < maxIter; i++) {\n        r = length(z);\n        if(r > 100.0) break;\n        \n        float theta = acos(z.z/r);\n        float phi = atan(z.y, z.x);\n        \n        dr = power*pow(r, power-1.0)*dr + 1.0;\n        \n        r = pow(r, power);\n        theta *= power;\n        phi *= power;\n        \n        z = r*vec3(sin(theta)*cos(phi), sin(theta)*sin(phi), cos(theta));\n        z += p;\n    }\n    return 0.5*log(r)*r/dr;\n}\n\n\nstruct Ray {\n    bool hit;\n    vec3 hitPos;\n    float t;\n    int steps;\n};\nconst int maxSteps = 100;\nRay trace(vec3 camPos, vec3 rayDir) {\n    vec3 p = vec3(0);\n    float t = 0.0; \n    int steps = 0;\n    bool hit = false;\n    for(int i = 0; i < maxSteps; i++) {\n        p = camPos + t*rayDir;\n        float d = df(p, 8.0*abs(sin(0.5*iTime)) + 1.0);\n        if(d < 0.001) {\n            hit = true;\n            steps = i;\n            break;\n        }\n        t += d*0.9;\n    }\n    return Ray(hit, p, t, steps);\n}\n\n\nvec3 shading(Ray tr) {\n    if(tr.hit) {\n    \treturn vec3(pow(1.0 - float(tr.steps)/float(maxSteps), 0.7));\n    }\n    else {\n        return vec3(0);\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord.xy - iResolution.xy) / iResolution.y;\n    \n    //vec3 camPos = vec3(-2, 0, 0);\n    vec3 camPos = 2.0*vec3(cos(iTime), 0, sin(iTime));\n    vec3 camFront = normalize(-camPos);\n    vec3 camUp = vec3(0, 1, 0);\n    vec3 camRight = cross(camFront, camUp);\n    float focus = 1.0;\n    \n    vec3 rayDir = normalize(uv.x*camRight + uv.y*camUp + focus*camFront);\n    Ray tr = trace(camPos, rayDir);\n    \n\tfragColor = vec4(shading(tr), 1.0);\n}","name":"Image","description":"","type":"image"}]}