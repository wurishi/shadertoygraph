{"ver":"0.1","info":{"id":"ttyGWw","date":"1579053607","viewed":1534,"name":"Crowdy waves","username":"rory618","description":"A particle system where ids are tracked in a grid, saving 4 ids per grid cell. Particles can interact with each other by reading the id of nearby particles which are stored in it's same grid cell. Mouse to interact and space to show data buffer.","likes":75,"published":1,"flags":48,"usePreview":0,"tags":["2d","particles","boids"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool keyIsDown( float key ) {\n    return texture( iChannel3, vec2(key,0.75) ).x > .5;\n}\n\nvec4 A(int i){\n    return texture(iChannel0, (vec2((i-1)%int(R.x),(i-1)/int(R.x))+.5)/R.xy);\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    if(keyIsDown( 32.5/256.0 )){\n        O = texture(iChannel1, I/R.xy)/R.x/R.y*10.;\n    } else {\n    \tO = texture(iChannel2, I/R.xy);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 A(int i){\n    return texture(iChannel0, (vec2((i-1)%int(R.x),(i-1)/int(R.x))+.5)/R.xy);\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    O = texture(iChannel0, I/R.xy);\n    \n    O.xy = mod(O.xy,R.xy);\n    vec4 r = rand4(int(I.x) + int(I.y)*2048 + iFrame*2048*2048);\n    if(iFrame<3){\n        O.xy = r.xy*R.xy;\n        O.zw = .25*cos(6.283*(vec2(0,.25)+r.z));\n        \n    }\n    \n    vec4 a = texture(iChannel1, (.5+floor(O.xy))/R.xy);\n    \n    vec2 ns = vec2(0);\n    vec2 df = vec2(0);\n    for(int i = 0; i < 4; i++){\n        vec4 n = A(cvt(a[i]));\n        ns += n.zw/4.;\n        vec2 D = mod( O.xy - n.xy + R.xy/2., R.xy ) - R.xy/2.;\n        if(length(D)>.005&&length(D)<10.){\n        \tdf += normalize(D)*(1./(length(D)+.03));\n        }\n    }\n    O.zw+=df/25.;\n    O.zw = mix(O.zw,ns,.1);\n    if(length(O.zw)>.001)\n    \tO.zw = mix(O.zw,normalize(O.zw)/4.,.05);\n    O.zw += randn(r.xy)/1e2;\n    if(iMouse.z>0.){\n        vec2 D = O.xy-iMouse.xy;\n        O.zw += normalize(D)*(1./(length(D)+.03));\n    }\n    O.xy += O.zw;\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 A(int i){\n    return texture(iChannel0, (vec2((i-1)%int(R.x),(i-1)/int(R.x))+.5)/R.xy);\n}\n\n\n\nvoid list_insert(inout ivec4 i, inout vec4 s, int i_, float s_){\n\tivec4 ri;\n    vec4 rs;\n    if(i_ == 0) return;\n    if(any(equal(ivec4(i_),i))) return;\n    if(s_<s[0]) {\n        i = ivec4(i_,i.xyz);\n        s = vec4(s_,s.xyz);\n    } else if(s_<s[1]) {\n        i = ivec4(i.x,i_,i.yz);\n        s = vec4(s.x,s_,s.yz);\n    } else if(s_<s[2]) {\n        i = ivec4(i.xy,i_,i.z);\n        s = vec4(s.xy,s_,s.z);\n    } else if(s_<s[3]) {\n        i = ivec4(i.xyz,i_);\n        s = vec4(s.xyz,s_);\n    }\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    O = texture(iChannel1, I/R.xy);\n    vec4 a = texture(iChannel1, fract((I+vec2(1,0))/R.xy));\n    vec4 b = texture(iChannel1, fract((I+vec2(0,1))/R.xy));\n    vec4 c = texture(iChannel1, fract((I-vec2(1,0))/R.xy));\n    vec4 d = texture(iChannel1, fract((I-vec2(0,1))/R.xy));\n    ivec4 i = ivec4(0);\n    ivec4 i0 = ivec4(cvt(O.x),cvt(O.y),cvt(O.z),cvt(O.w));\n    ivec4 ia = ivec4(cvt(a.x),cvt(a.y),cvt(a.z),cvt(a.w));\n    ivec4 ib = ivec4(cvt(b.x),cvt(b.y),cvt(b.z),cvt(b.w));\n    ivec4 ic = ivec4(cvt(c.x),cvt(c.y),cvt(c.z),cvt(c.w));\n    ivec4 id = ivec4(cvt(d.x),cvt(d.y),cvt(d.z),cvt(d.w));\n\t#define dist(i) length(mod( A(i).xy-I + R.xy/2., R.xy) - R.xy/2.) \n    vec4 s = vec4(1e9);\n    for(int k = 0; k < 4; k++){\n        list_insert(i, s, i0[k], dist(i0[k]) );\n        list_insert(i, s, ia[k], dist(ia[k]) );\n        list_insert(i, s, ib[k], dist(ib[k]) );\n        list_insert(i, s, ic[k], dist(ic[k]) );\n        list_insert(i, s, id[k], dist(id[k]) );\n    }\n    int r = IHash(int(I.x) + int(I.y)*2048 + iFrame*2048*2048);\n    int i_ = 1+r%(int(R.x)*int(R.y)/10);\n    list_insert(i, s, i_, length(I-A(i_).xy));\n    O = vec4(cvt(i.x),cvt(i.y),cvt(i.z),cvt(i.w));\n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R iResolution\n\nint IHash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn a;\n}\n\nfloat Hash(int a){\n\treturn float(IHash(a)) / float(0x7FFFFFFF);\n}\nvec4 rand4(int seed){\n    return vec4(Hash(seed^0x34F85A93),\n                Hash(seed^0x85FB93D5),\n                Hash(seed^0x6253DF84),\n                Hash(seed^0x25FC3625));\n}\nvec3 rand3(int seed){\n    return vec3(Hash(seed^0x348CD593),\n                Hash(seed^0x8593FD5),\n                Hash(seed^0x62A5D384));\n}\nvec2 rand2(int seed){\n    return vec2(Hash(seed^0x348C5F93),\n                Hash(seed^0x8593D5BB));\n}\n\n\nvec2 randn(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(-2.*log(1e-9+abs(r.x)));\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}\n\nfloat dot2(vec2 x){\n    return dot(x,x);\n}\n\nint cvt(float x){\n    return int(x);\n    //return floatBitsToInt(x);\n}\n\nfloat cvt(int x){\n    return float(x);\n    //return intBitsToFloat(x);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec4 A(int i){\n    return texture(iChannel0, (vec2((i-1)%int(R.x),(i-1)/int(R.x))+.5)/R.xy);\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    O = vec4(0);\n    vec4 a = texture(iChannel1, I/R.xy);\n    for(int i = 0; i < 4; i++){\n        O += .4*exp(-.5*dot2(I-A(cvt(a[i]) ).xy));\n    }\n    O = mix(O, texture(iChannel2, I/R.xy),.9);\n}","name":"Buffer C","description":"","type":"buffer"}]}