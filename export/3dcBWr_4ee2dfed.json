{"ver":"0.1","info":{"id":"3dcBWr","date":"1604755885","viewed":72,"name":"codevember sketch 05","username":"annaesch","description":"codevember sketch 05 light","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\n// HELPER FUNCTIONS // \n// from https://iquilezles.org/articles/distfunctions\n// and https://www.youtube.com/channel/UCcAlTqd9zID6aNX3TzwxJXg\n// lighting and movement partially based on https://www.shadertoy.com/view/3sySRK\n\n// SMOOTH UNION FUNCTION\n// k controls the radious/distance of the smoothness\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n// ROTATE FUNCTION\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// GEOMETRY SIGNED DISTANCE FUNCTIONS (SDF) //\n\n// TORUS\nfloat sdTorus(vec3 p, vec2 r) {\n\tfloat x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\n// SPHERE\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n} \n\n// GET DISTANCE FROM VARIOUS GEOMETRY\nfloat GetDist(vec3 p) {\n\tfloat d = 2.0;\n\tfor (int i = 0; i < 4; i++) {\n\t\tfloat fi = float(i);\n\t\tfloat time = iTime * (fract(fi * 0.03  ) - 0.2);\n        \n        vec3 tp = p;\n        tp.yz *= Rot(0.2);\n        \n        \n        d = smin(sdTorus(tp + sin(1.5 * time + fi * vec3(0.0, 20.0, 0.0)) *\n                     vec3(0.0, 1.0, 0.0), vec2(mix(2.0, 0.3, fract(fi * 0.25)),.15)),\n                 d,\n                 0.1\n                 );\n\t}\n\treturn d;\n}\n\n// GET NORMALS\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p); \t//get distance to surface\n    vec2 e = vec2(0.4, 0);\n   // vec2 e = vec2(0.1, 0);\n    \n    vec3 n = d - vec3( \t\t// points around p\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\n// RAYMARCHING ALGORITHM\nfloat RayMarch(vec3 rayPos, vec3 rayDir) {\n\tfloat distO=0.; // distance origin\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = rayPos + rayDir*distO; //marching step point p \n        float distS = GetDist(p); \t// distance to closest object\n        distO += distS; \t\t\t// move to next marching step\n        if(distO>MAX_DIST || distS<SURF_DIST) break;\n    }\n    \n    return distO;\n}\n\n// SCENE LIGHTING\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 1, 0);\n    lightPos.y += 2.5*sin(iTime); // moving lightPos\n    vec3 l = normalize(lightPos-p); // vec from p to light source\n\tvec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.); // no negative results\n    \n    dif *= 3.0;\n    \n    // shadow\n   // float d = RayMarch(p+n*SURF_DIST*2., l); // distance to object\n   // if(d<length(lightPos-p)) dif *= .1; //check if distance to object is closer than ditance to light \n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // shift origin to center\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 rayPos = vec3(uv *6., 3.0); // ray origin\n    vec3 rayDir = normalize(vec3(0, 0, -1.)); // ray direction normalized\n\n    float d = RayMarch(rayPos, rayDir); // distance to objects\n    \n    vec3 p = rayPos + rayDir * d; // position for lighting\n    \n    d = min(6.0, d); // min d value of 6\n   \tfloat dif = GetLight(p); // diffuse light\n   \n    col = vec3(dif);\n    \n    // Color\n    col = (0.6 + 0.4 * cos((2.3 + dif  * .1) + uv.yxx * 0.7 + \n                           vec3(0,2,4))) * (0.95 + dif * 0.35);\n   \tcol *= exp( -d * 0.10 ); // darker\n  //  col *= vec3(.8,.8,2.3);\n   \t\n    //col =  pow(col, vec3(.5)); // gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}