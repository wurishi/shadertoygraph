{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"float Tonemap_ACES(float x) {\n    // Narkowicz 2015, \"ACES Filmic Tone Mapping Curve\"\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return (x * (a * x + b)) / (x * (c * x + d) + e);\n}\n\nfloat Tonemap_Unreal(float x) {\n    // Unreal 3, Documentation: \"Color Grading\"\n    // Adapted to be close to Tonemap_ACES, with similar range\n    // Gamma 2.2 correction is baked in, don't use with sRGB conversion!\n    return x / (x + 0.155) * 1.019;\n}\n\nfloat Tonemap_Uchimura(float x, float P, float a, float m, float l, float c, float b) {\n    // Uchimura 2017, \"HDR theory and practice\"\n    // Math: https://www.desmos.com/calculator/gslcdxvipg\n    // Source: https://www.slideshare.net/nikuque/hdr-theory-and-practicce-jp\n    float l0 = ((P - m) * l) / a;\n    float L0 = m - m / a;\n    float L1 = m + (1.0 - m) / a;\n    float S0 = m + l0;\n    float S1 = m + a * l0;\n    float C2 = (a * P) / (P - S1);\n    float CP = -C2 / P;\n\n    float w0 = 1.0 - smoothstep(0.0, m, x);\n    float w2 = step(m + l0, x);\n    float w1 = 1.0 - w0 - w2;\n\n    float T = m * pow(x / m, c) + b;\n    float S = P - (P - S1) * exp(CP * (x - S0));\n    float L = m + a * (x - m);\n\n    return T * w0 + L * w1 + S * w2;\n}\n\nfloat Tonemap_Uchimura(float x) {\n    const float P = 1.0;  // max display brightness\n    const float a = 1.0;  // contrast\n    const float m = 0.22; // linear section start\n    const float l = 0.4;  // linear section length\n    const float c = 1.33; // black\n    const float b = 0.0;  // pedestal\n    return Tonemap_Uchimura(x, P, a, m, l, c, b);\n}\n\nfloat Tonemap_Lottes(float x) {\n    // Lottes 2016, \"Advanced Techniques and Optimization of HDR Color Pipelines\"\n    const float a = 1.6;\n    const float d = 0.977;\n    const float hdrMax = 8.0;\n    const float midIn = 0.18;\n    const float midOut = 0.267;\n\n    // Can be precomputed\n    const float b =\n        (-pow(midIn, a) + pow(hdrMax, a) * midOut) /\n        ((pow(hdrMax, a * d) - pow(midIn, a * d)) * midOut);\n    const float c =\n        (pow(hdrMax, a * d) * pow(midIn, a) - pow(hdrMax, a) * pow(midIn, a * d) * midOut) /\n        ((pow(hdrMax, a * d) - pow(midIn, a * d)) * midOut);\n\n    return pow(x, a) / (pow(x, a * d) * b + c);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / (iResolution.y * 0.8);\n    uv.x += iMouse.x / iResolution.x * 9.0;\n\n    float p = 1.0 / (iResolution.y * 0.8);\n    float y = 0.0;\n\n    // Show LDR range (thanks iq)\n    fragColor.rgb = vec3(0.02) * step(uv.x, 1.0);\n\n    y = Tonemap_Uchimura(uv.x);\n    fragColor.rgb = mix(fragColor.rgb, vec3(1.0, 0.5, 0.0), 1.0 - smoothstep(0.0, 2.0 * p, abs(uv.y - y)));\n\n    y = Tonemap_Uchimura(uv.x, 1.0, 1.7, 0.1, 0.0, 1.33, 0.0);\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.8, 0.2, 0.6), 1.0 - smoothstep(0.0, 2.0 * p, abs(uv.y - y)));\n\n    y = Tonemap_ACES(uv.x);\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.8, 0.8, 0.0), 1.0 - smoothstep(0.0, 2.0 * p, abs(uv.y - y)));\n\n    y = pow(Tonemap_Unreal(uv.x), 2.2);\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.0, 0.6, 0.1), 1.0 - smoothstep(0.0, 2.0 * p, abs(uv.y - y)));\n\n    y = Tonemap_Lottes(uv.x);\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.0, 0.6, 0.8), 1.0 - smoothstep(0.0, 2.0 * p, abs(uv.y - y)));\n\n    y = 1.0;\n    fragColor.rgb = mix(fragColor.rgb, vec3(1.0, 1.0, 1.0), 1.0 - smoothstep(0.0, 1.0 * p, abs(uv.y - y)));\n    \n    fragColor.rgb = pow(fragColor.rgb, vec3(1.0 / 2.2));\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"llXyWr","date":"1504294802","viewed":4688,"name":"Tonemap operators","username":"romainguy","description":"Comparison of a few tone mapping operators for HDR to LDR conversion (gray shows LDR range):\n- Orange: GT\n- Blue: ACES\n- Green: Unreal 3 matched to ACES\n- Pink: GT with different parameters\n- Yellow: AMD matched to ACES","likes":37,"published":1,"flags":0,"usePreview":0,"tags":["hdr","tonemapping","sdr"],"hasliked":0,"parentid":"","parentname":""}}