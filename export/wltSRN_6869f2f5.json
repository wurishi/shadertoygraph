{"ver":"0.1","info":{"id":"wltSRN","date":"1580569616","viewed":129,"name":"Sine & Cosine on Grid Paper","username":"Neebz","description":"Learning how to display math functions with shaders.\n\nI'm very new to shaders so feedback is very welcome :)","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["grid","sine","graph","cosine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define amplitude .5\n#define frequency 2.\n#define speed 2.\n\nvec3 DrawAxis(vec2 uv){\n    vec3 axis = vec3(0);   \n    \n    vec2 uvs = fract(uv * 10. * 5.);    \n    vec2 absUv = abs(uvs);\n    if (absUv.x < .1 || absUv.x > .9) axis = vec3(.1);\n    if (absUv.y < .1 || absUv.y > .9) axis = vec3(.1);\n    \n    vec2 uvm = fract(uv * 5.);\n    absUv = abs(uvm);\n    if (absUv.x < .01 || absUv.x > .99) axis = vec3(.5);\n    if (absUv.y < .01 || absUv.y > .99) axis = vec3(.5);\n    \n    if (abs(uv.x) < .005) axis = vec3(1.);\n    if (abs(uv.y) < .005) axis = vec3(1.);\n   \n    return axis;\n}\n\nfloat Line(float n, float pw, float a){\n    return smoothstep(n - pw/iResolution.x, n, a) - smoothstep(n, n  + pw/iResolution.x, a);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord/iResolution.xy) - .5;\n    uv.x *= iResolution.x/iResolution.y;    \n    \n    vec3 col = vec3(.8,.95,1.);\n    col += DrawAxis(uv);\n    col *= .5;\n    \n    float y = uv.x;  \n    \n    float sine = sin(y * PI * frequency + iTime * speed) * amplitude;\n    float sinCurve = Line(sine, 5., uv.y);\n    \n    float cosine = cos(y * PI * frequency + iTime * speed) * amplitude;\n    float cosCurve = Line(cosine, 5., uv.y );\n    \n    col += vec3(sinCurve * .2, sinCurve * .35, sinCurve * .5);\n    col += vec3(cosCurve * .5, cosCurve * .15, cosCurve * .2); \n\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}