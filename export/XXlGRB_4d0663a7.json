{"ver":"0.1","info":{"id":"XXlGRB","date":"1707611962","viewed":75,"name":"Mandelbrot Renderer","username":"Goldim","description":"A simple mandelbrot renderer wit changeable zoom, iterations and position","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["simple","mandelbrot","shader","beautiful"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 mandelbrot(vec2 c, vec2 offset, int substeps, float zoom)\n{\n    vec2 z = vec2(0.);\n    c *= zoom;\n    c += offset;\n    for (int i = 0; i < substeps; i++)\n    {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        if (dot(z, z) > 4.)\n        {\n            return vec3(float(i) / float(substeps));\n        }\n    }\n    return vec3(1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    \n    vec2 offset = vec2(0.338940061, 0.046761464); // Change this to alter the position\n    float zoom = 0.01/iTime; // Change this to alter the speed of zoom\n    int substeps = 1000; // Change this to increase or decrease resolution\n    \n    vec3 col = mandelbrot(uv, offset, substeps, zoom);\n\n    bool aiming = false;\n    if (aiming && distance(vec2(0.), uv) < 0.01) { col = vec3(255., 0., 0.);}\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}