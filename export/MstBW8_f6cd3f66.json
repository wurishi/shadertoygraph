{"ver":"0.1","info":{"id":"MstBW8","date":"1524968366","viewed":798,"name":"3D Particle engine","username":"rory618","description":"Use the mouse to look around. Using stochastic routing to (mostly) render 60k circle particles.\nSee here for explination:\nhttps://www.shadertoy.com/view/Xd3BW8","likes":21,"published":1,"flags":32,"usePreview":0,"tags":["3d","particles","stochastic","routing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n\tvec2 uv = i/R.xy;\n    o = vec4(0,0,0,1e9);\n    for(int j = 0; j < iters; j++){\n        \n        vec4 r = hash44(vec4(F,i,j));        \n        r.z = sqrt(-2.*log(r.z));\n        r.w *= 6.28318;\n        r.zw = r.z*vec2(cos(r.w),sin(r.w));\n        float id = texture(iChannel0,(i+r.zw)/R.xy).w;\n        if(id >= 0.){\n            \n            particle t = getParticle(id, iChannel0, iTime, iMouse, R); \n        \tfloat d = max(0.,length(i-t.P)-10.*t.r/t.d);\n        \tfloat z = t.d;\n\n            \n            if(z<=o.w && d<=1.1){\n           \t\to.xyz = t.color*exp(-d);\n                o.w=z;\n            }\n        }\n    }\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    o = texture(iChannel1,i/R.xy);\n    \n    float d;\n    float z = 1e9;\n    for(int g = 0; g < 4; g++){\n        d = 1e9;\n        z = 1e9;\n        for(int j = 0; j < iters; j++){\n            vec4 r = hash44(vec4(j,F,i));\n            float id = g==0?floor(mod(r.x * 1e3+r.y*1e5+r.z,particles)):texture(iChannel1,(i+randn(r.zw)*30./float(g))/R.xy)[j==0?g:g-1];\n            particle t = getParticle(id, iChannel0, iTime-float(g-8)/60., iMouse, R); \n            float dp = length(i-t.P)-10.*t.r/t.d;\n            float zp = t.d;\n            if(max(0.,dp)<=max(0.,d)){\n                if(dp<-7.){\n                    if(zp<z){\n                        d = dp;\n                        z = zp;\n                        o[g] = id;\n                    }\n                } else {\n                    d = dp;\n                    z = zp;\n                    o[g] = id;\n                }\n            }\n        }\n    }\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n\n#define M_PI 3.1415926535897932384626433832795\n\nconst int waves = 20;\nconst float wl = 15.0;\nconst float rs = 0.0002;\nconst float speed = -0.001;\nconst float twist = 0.01;\n\n\nfloat saw(float s){\n    return mod(s,1.0);\n}\n\nfloat tri(float s){\n    return asin(sin(s));\n}\n\nfloat sqr(float s){\n    return sin(s)/abs(sin(s));\n}\n\nfloat wave( float angle, float phase, vec2 pos, float wavelength) {\n\t//if ( abs(2.0*M_PI/wavelength*(pos.x * cos(angle) - pos.y * sin(angle))) < sqrt(sqrt(.01+pos.y*pos.y + pos.x*pos.x))) {\n\t//\treturn -1000.0;\t\n\t//}\n\treturn .5+.5*sin(2.0*M_PI/wavelength*(phase + abs(pos.x * cos(angle) - pos.y * sin(angle))));\n}\n\n\nvec4 drawwaves(vec2 uv , float iTime) {\n\tvec2 center = vec2(.5,.5);\n\t\n\tvec2 position = ( uv );\n\tposition -=  vec2(.5, .5);\n\t//position +=  -1.0 * iMouse.xy / iResolution.xy;\n\tfloat color = 0.0;\n    \n    position *= vec2(2.0, 2.0);\n    \n    float t = 15.0*iTime;\n    \n    float ex = 1.5 + .5*sin(.1*t);\n\tfor (int i = 1; i < waves; i+=1) {\n\t\tcolor += wave(twist * float(i) + rs * t * float(i), speed * t * float(1), position, wl/(pow(float(i),2.0)))/pow(float(i),1.0);\n\t}\n    color = pow(2.0,color);\n    t = t*.1;\n    \n    return vec4(.5+.5*sin(color+4.0*sin(t*.1)),\n                     .5+.5*sin(color+3.0*sin(t*.11)),\n                     .5+.5*sin(color+2.0*sin(t*.111)),\n                     1.0);\n    \n}\n\n\n\n\n\n#define R iResolution\n#define F iFrame\n#define T(x) mat2(  cos(x+vec4(0,-pi,pi,0)) )\n#define pi 1.570796\n#define cam (vec3(sin(iTime/10.),1.5,cos(iTime/10.)))\n#define theta ((iMouse.yx/iResolution.yx-.5)*vec2(4.,-4))\n#define view (mat3(cos(theta.y),0,-sin(theta.y),0,1,0,sin(theta.y),0,cos(theta.y))*mat3(1,0,0,0,cos(theta.x),sin(theta.x),0,-sin(theta.x),cos(theta.x)))\n#define transform (mat4(1,0,-cam.x/cam.z,0,0,1,-cam.y/cam.z,0,0,0,1,0,0,0,-1./cam.z,1)))\n#define iters 3\n#define particles  (256.*256.)\n\nstruct particle {\n    vec2 P;\n    float d;\n    float r;\n    vec3 color;\n}; \n\nparticle getParticle(float index, sampler2D ch, float iTime, vec4 iMouse, vec3 iResolution){\n    vec2 g = vec2(mod(floor(index),256.),floor(floor(index)/256.))/256.;\n    vec3 c = drawwaves(g,iTime).xyz;\n    vec3 p = vec3((g-.5)*15.,c.x);\n    p = p.yzx;\n    float r = length(c)*length(c)*iResolution.y/9e2;\n    vec3 proj = ((p-cam)*view);\n    //if(proj.z>0.){\n        proj /= proj.z;\n        return particle(proj.xy*R.y+R.xy/2.,length(p-cam),r,c);\n    //} else {\n    //    return particle(vec2(-1e2),1e9,0.,vec3(1,0,0));\n    //}\n}\n    \nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nvec2 randn(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(-2.*log(r.x));\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    o = texture(iChannel1,i/R.xy);\n    \n    float d;\n    float z = 1e9;\n    for(int g = 4; g < 8; g++){\n        d = 1e9;\n        z = 1e9;\n        for(int j = 0; j < iters; j++){\n            vec4 r = hash44(vec4(j,F,i));\n            float id = (g==4)?texture(iChannel0,(i+randn(r.zw)*30./float(g))/R.xy).w:texture(iChannel1,(i+randn(r.zw)*30./float(g))/R.xy)[g-5];\n            particle t = getParticle(id, iChannel0, iTime-float(g-8)/60., iMouse, R); \n            float dp = length(i-t.P)-10.*t.r/t.d;\n            float zp = t.d;\n            if(max(0.,dp)<=max(0.,d)){\n                if(dp<-100.){\n                    if(zp<z){\n                        d = dp;\n                        z = zp;\n                        o[g-4] = id;\n                    }\n                } else {\n                    d = dp;\n                    z = zp;\n                    o[g-4] = id;\n                }\n            }\n        }\n    }\n}","name":"Buf B","description":"","type":"buffer"}]}