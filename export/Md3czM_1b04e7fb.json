{"ver":"0.1","info":{"id":"Md3czM","date":"1518173173","viewed":339,"name":"ttf2svg2shader stone in chinese ","username":"zhufei","description":"the svg file is gen by fontforge .\nthe code is base on https://www.shadertoy.com/view/llySWc\nvery loose version.\nto do: write an script to parser svg file can convert to shader function calls .","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["font","svg","ttf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// the code is based on https://www.shadertoy.com/view/llySWc\n\n/*\n\n<?xml version=\"1.0\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\" >\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" viewBox=\"0 -410 2048 2048\">\n  <g transform=\"matrix(1 0 0 -1 0 1638)\">\n   <path fill=\"currentColor\"\nd=\"M100 1549h1876v-148h-1054q-114 -265 -275 -504h1157v-1144h-156v176h-1020v-184h-156v914q-160 -197 -354 -374q-40 82 -90 152q466 402 718 964h-646v148zM1648 749h-1020v-672h1020v672z\" />\n  </g>\n\n</svg>\n\n*/\n\n// you can try this svg in   http://www.runoob.com/try/try.php?filename=trysvg_rect\n// svg is generate by fontforge    http://fontforge.github.io/en-US/\n\n\n#define M(x,y)             x0 = _x = x;   y0 =_y = y;\n#define L(x,y)             d = min(d, line(uv, vec2(_x,_y), vec2(_x+x,_y+y)) ); _x=_x+x,_y=_y+y;\n#define C(x1,y1,x,y) d = min(d, bezier(uv, vec2(_x,_y), vec2(_x + x1,_y+ y1),vec2(_x + x1,  _y+ y1), vec2(_x+ x ,_y + y)) ); _x=x + _x,_y=y + _y; \n#define z                  d = min(d, line(uv, vec2(_x,_y), vec2(x0,y0)) );\n\n\n\nfloat bezier(vec2 uv, vec2 A, vec2 B, vec2 C, vec2 D);\nfloat line(vec2 p, vec2 a, vec2 b);\nfloat contrast = 1.;\n\n/*\n\n\n \n\n\n\n*/\nfloat SVG(vec2 uv) {\n    uv.y  =  .48 - uv.y;\n    uv.x -= .3;\n    \n    uv *= 400.; \n    \n     \n    contrast = .75*iResolution.x/ 400.;\n    float d = 1e38, _x = .0, _y = .0, x0, y0;\n    \n    \n    M(10.0, 154.9)  //M 100 1549\n    L(187.6, .0)     // h1876\n    L(0., -14.80)   //v-148\n    L(-105.4, 0.)  //h-1054\n    C(-11.4, -26.5, -27.5, -50.4) //q-114 -265 -275 -504 \n    L(115.7, 0.) //h1157\n    L(0., -114.4)//v-1144\n    L(-15.6, 0.)  //h-156\n    L(0., 17.6)//v176\n    L(-102., 0.)//h-1020\n    L(0., -18.4)//v-184\n    L(-15.6, 0.)//h-156\n    L(0., 91.4)//v914\n    C(-16., -19.7, -35.4, -37.4) //q-160  -197 -354 -374\n    C(-4., 8.2, -9.,15.2) //q-40 82 -90 152\n    C(46.6, 40.2, 71.8,96.4) //q466 402 718 964\n    L(-64.6, 0.)//h-646\n    L(0., 14.8)//      //v148z\n        \n    M(164.8, 74.9) // M1648 749\n    L(-102., 0.) //h-1020\n    L(0., -67.2)//v-672\n    L(102.0, 0.) //h1020\n    L(0., 67.2)  //v672\n    z            //z\n    \n \n    return d;\n}\n\nconst mat4   M = mat4(-1,  3, -3,   1,         // Bspline Matrix\n                       3, -6,  3,   0,\n                      -3,  3,  0,   0,\n                       1,  0,  0,   0);\n/*\n#define T .5\nconst mat4   M = mat4(-T,   2.-T,  T-2.,    T, //  Catmull-Rom Matrix\n                       2.*T, T-3., 3.-2.*T,-T,\n                      -T,      0,   T,      0,\n                       0,      1,   0,      0);\n*/\n\n// Spline Interpolation\nvec2 interpolate(vec2 G1, vec2 G2, vec2 G3, vec2 G4, float t) {\n    vec2 A = G1 * M[0][0] + G2 * M[0][1] + G3 * M[0][2] + G4 * M[0][3];\n    vec2 B = G1 * M[1][0] + G2 * M[1][1] + G3 * M[1][2] + G4 * M[1][3];\n    vec2 C = G1 * M[2][0] + G2 * M[2][1] + G3 * M[2][2] + G4 * M[2][3];\n    vec2 D = G1 * M[3][0] + G2 * M[3][1] + G3 * M[3][2] + G4 * M[3][3];\n\n    return t * (t * (t * A + B) + C) + D;\n}\n\nfloat line(vec2 p, vec2 a, vec2 b) {\n\tvec2 pa = p - a, ba = b - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n\tvec2 d = pa - ba * h;\n\treturn dot(d,d); //length(d); // optimization by deferring sqrt\n}\n\n\nfloat bezier( vec2 uv, vec2 A, vec2 B, vec2 C, vec2 D)    \n{\n    float d = 1e5;\n    vec2 p = A;\n    for (float t = 0.; t <= 1.01; t += .025) {\n        vec2 q = interpolate(A, B, C, D, t);\n        d = min(d, line(uv, p, q));\n\t\tp = q;\n\t}\n\n\treturn d;\n}\n\n\nvoid mainImage(out vec4 O, vec2 U) {\n    vec2 R = iResolution.xy;\n    U.y = R.y-U.y; U /= R.x;\n    \n    float d = sqrt(SVG(U)); // SVG(U); // optimization by deferring sqrt here\n    d *= contrast;\n\tO = vec4(d); // *vec4(1,.2,.05,1);\n\tif (fract(iDate.w/2.)>.5) O = clamp(d,0.,1.) + .05*vec4(0,sin(d),0,0);\n}\n\n","name":"Image","description":"","type":"image"}]}