{"ver":"0.1","info":{"id":"4XXXDM","date":"1709571543","viewed":77,"name":"3 points 2d triangle","username":"Toiture","description":"Checks if the point is inside a 2d triangle defined by 3 points. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float triangle(vec2 uv, vec2 A, vec2 B, vec2 C) {\n    vec2 uA = normalize(A-uv) ;\n    vec2 uB = normalize(B-uv) ;\n    vec2 uC = normalize(C-uv) ;\n    \n    float a = acos(dot(uA, uB)) ;\n    float b = acos(dot(uB, uC)) ;\n    float c = acos(dot(uC, uA)) ;\n    \n    return abs((a+b+c)-2.*3.141592)<0.005 ? 1. : 0. ;\n} \n\nfloat triangle2(vec2 uv, vec2 A, vec2 B, vec2 C) {\n    return step(3.0,abs(\n        sign(determinant(mat2(B-A,uv-A)))+ \n        sign(determinant(mat2(C-B,uv-B)))+ \n        sign(determinant(mat2(A-C,uv-C)))));\n} \nvec2 linMix(vec2 a, vec2 b, float x) {\n    x = clamp(x, 0.,1.);\n    return a*(1.-x)+b*x;\n} \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.);\n    \n    vec2 A = vec2(0.1+sin(iTime)*0.1,0.1+cos(iTime)*0.1);\n    vec2 B = vec2(0.5+sin(iTime+27.38)*0.4,0.8+cos(iTime+36.22)*0.2);\n    vec2 C = vec2(0.9,0.1);\n    col.r=triangle(uv, A, B, C) ;\n    col.g=triangle2(uv,A,B,C);\n    \n    //float xA = dot(normalize\n    //vec3 pA = linMix(B, C, \n    vec2 AB = normalize(B-A) ;\n    vec2 AC = normalize(C-A) ;\n    vec2 BC = normalize(C-B) ;\n    \n    float aA = acos(dot(AB, AC)) ;\n    float aB = acos(dot(-AB, BC)) ;\n    float aC = acos(dot(-AC,-BC)) ;\n    \n    float xA = acos(dot(normalize(uv-A), AB)) / aA ;\n    float xB = acos(dot(normalize(uv-B), BC)) / aB ;\n    float xC = acos(dot(normalize(uv-C),-AC)) / aC ;\n    \n    vec2 pA = linMix(B, C, xA) ; \n    vec2 pB = linMix(C, A, xB) ; \n    vec2 pC = linMix(A, B, xC) ;\n    \n    float lAB = length(A-pA) ;\n    float lBC = length(B-pB) ;\n    float lCA = length(C-pC) ;\n    \n    float d1 = length(uv-A) / lAB;\n    float d2 = length(uv-B) / lBC;\n    float d3 = length(uv-C) / lCA;\n    \n    col = vec3(1.-d1,1.-d2,1.-d3)*col.g ;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}