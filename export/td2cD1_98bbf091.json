{"ver":"0.1","info":{"id":"td2cD1","date":"1586972054","viewed":165,"name":"Physics: Wave equation","username":"xlambein","description":"Wave equation","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float pos = vec2float(texture(iChannel0, uv).xy);\n    \n    // Output to screen\n    //fragColor = vec4(pos, pos, pos, 1.0);\n    \n    fragColor = sqrt(vec4(\n        vec3(1.0, 1.0, 1.0)\n        - mix(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 0.0), -clamp(pos, -1., 0.))\n        - mix(vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0), clamp(pos, 0., 1.)),\n        1.0\n    ));\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float dt = .7;\nfloat dx = 1.;\nfloat TAU = 6.2831;\n\nfloat U(vec2 loc) {\n    return vec2float(texture(iChannel0, loc/iResolution.xy).xy);\n}\n\nfloat V(vec2 loc) {\n    return vec2float(texture(iChannel0, loc/iResolution.xy).zw);\n}\n\nvec4 fields2col(float u, float v) {\n    return vec4(\n        float2vec(u),\n        float2vec(v)\n    );\n}\n\n/*\n\nd^2 u / dt^2 = c^2 * ( d^2 u / dx^2 + d^2 u / dy^2)\n\n=>\n\nd u / dt = c * v\nd v / dt = c * ( d^2 u / dx^2 + d^2 u / dy^2)\n\ndux(i,j;n) = (u(i+1,j;n) - 2*u(i,j;n) + u(i-1,j;n)) / dx^2;\nduy(i,j;n) = (u(i,j+1;n) - 2*u(i,j;n) + u(i,j-1;n)) / dx^2;\nv(i,j;n+1) = v(i,j;n) + dt * c * (dux + duy);\nu(i,j;n+1) = u(i,j;n) + dt * c * v(i,j;n+1);\n\nv(i,j;n+1) = v(i,j;n) + dt * c * (\n\tu(i+1,j;n) + u(i-1,j;n)\n\t+ u(i,j+1;n) + u(i,j-1;n)\n\t- 4*u(i,j;n)\n) / dx^2;\n\n\n*/\n\n/*\nfloat U(vec2 loc) {\n    return texture(iChannel0, loc/iResolution.xy).x - 0.5;\n}\n\nfloat V(vec2 loc) {\n    return texture(iChannel0, loc/iResolution.xy).y - 0.5;\n}\n\nvec4 fields2col(float u, float v) {\n    return vec4(\n        .5 + clamp(u, -.5, .5),\n        .5 + clamp(v, -.5, .5),\n        0., 0.\n    );\n}\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 ij )\n{\n    vec2 uv = ij/iResolution.xy;\n    vec2 uv2 = vec2(ij.xy - 0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy-.5;\n    mouse.x *= iResolution.x/iResolution.y;\n    \n    float u = U(ij);\n    float v = V(ij);\n    \n    // Integrate\n    v += dt * (\n        U(ij + vec2(1, 0)) + U(ij + vec2(-1, 0))\n        + U(ij + vec2(0, 1)) + U(ij + vec2(0, -1))\n        - 4.0 * U(ij)\n    ) / dx / dx;\n    u += dt * v;\n    u *= 0.99; // Dampening\n    \n    if (uv.x > 0.4 && uv.x < 0.45) {\n        if (uv.y < 0.48 || uv.y > 0.52)\n        \tu = 0.;\n    }\n    \n    if (length(uv2) < .01) {\n        u = sin(1.5 * TAU * iTime) * .6;\n    }\n    \n    if (iFrame == 0) {\n        u = 0.0;\n        v = 0.0;\n    } else {\n        if (length(mouse - uv2) < .01 && iMouse.z > 0.0) {\n            u = 0.5 * (1.0 - smoothstep(0.0, 0.05, length(mouse - uv2)));\n            //u = max(u, u + (1.0 - smoothstep(0.0, 0.05, length(mouse - uv2))) * .00001);\n            v = 0.0;\n        }\n    }\n    \n    fragColor = fields2col(u, v);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float vec2float(in vec2 u) {\n    u = clamp(u, 0., 1.);\n    float val = u.x + u.y / 255.;\n    //float val = u.x;\n    return val * 2. - 1.;\n}\n\nvec2 float2vec(in float val) {\n    val = (val + 1.) / 2.;\n    val = clamp(val, 0., 1.);\n    \n    float hi = val - mod(val, 1.0 / 255.0);\n\tfloat lo = (val - hi) * 255.0;\n    //float hi = val, lo = 0.;\n    \n    return vec2(hi, lo);\n}\n","name":"Common","description":"","type":"common"}]}