{"ver":"0.1","info":{"id":"Xd3SWr","date":"1458683244","viewed":539,"name":"Rocket Dude .  ","username":"zackpudil","description":"Walk around with WAD. Use mouse to move Third person camera. Space to \"fly\"","likes":17,"published":1,"flags":48,"usePreview":0,"tags":["raymarching","distancefiedls","psuedoik"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool isWDown() {\n    return texture(iChannel0, vec2(87.5/256.0, 0.0)).x == 1.0;\n}\n\nbool isSpaceDown() {\n    return texture(iChannel0, vec2(32.5/256.0, 0.0)).x == 1.0;\n}\n\nstruct Limb {\n    vec3 a;\n    vec3 k;\n    vec3 f;\n    float l1;\n    float l2;\n};\n    \nLimb limbs[4];\n\n// iq's 1-joint solver.\nvec3 solve(vec3 p, float l1, float l2, vec3 dir) {\n    vec3 q = p*(0.5 + 0.5*(l1*l1 - l2*l2)/dot(p, p));\n    \n    float s = max(0., l1*l1 - dot(q, q));\n    q += sqrt(s)*normalize(cross(p, dir));\n    \n    return q;\n}\n\nvec3 solve(vec3 a, vec3 b, float l1, float l2, vec3 dir) {\n    return solve(b - a, l1, l2, dir);\n}\n\nvoid rotate(inout vec2 p, float a) {\n    float s = sin(a);\n    float c = cos(a);\n    \n    p = mat2(c, s, -s, c)*p;\n}\n\nfloat dSegment(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 pa = p - a;\n    vec3 ba = b - a;\n    \n    float h = clamp(dot(pa, ba)/dot(ba, ba), 0.0, 1.0);\n    \n    return length(pa - ba*h) - r;\n}\n\nfloat det( vec2 a, vec2 b ) { return a.x*b.y-b.x*a.y; }\nvec3 getClosest( vec2 b0, vec2 b1, vec2 b2 ) \n{\n\t\n  float a = det(b0,b2);\n  float b = 2.0*det(b1,b0);\n  float d = 2.0*det(b2,b1);\n  float f = b*d - a*a;\n  vec2  d21 = b2-b1;\n  vec2  d10 = b1-b0;\n  vec2  d20 = b2-b0;\n  vec2  gf = 2.0*(b*d21+d*d10+a*d20); gf = vec2(gf.y,-gf.x);\n  vec2  pp = -f*gf/dot(gf,gf);\n  vec2  d0p = b0-pp;\n  float ap = det(d0p,d20);\n  float bp = 2.0*det(d10,d0p);\n  float t = clamp( (ap+bp)/(2.0*a+b+d), 0.0 ,1.0 );\n  return vec3( mix(mix(b0,b1,t), mix(b1,b2,t),t), t );\n}\n\n// bezier distance field see: https://www.shadertoy.com/view/ldj3Wh\nfloat dBezier(vec3 p, vec3 a, vec3 b, vec3 c, float r )\n{\n\tvec3 w = normalize( cross( c-b, a-b ) );\n\tvec3 u = normalize( c-b );\n\tvec3 v = normalize( cross( w, u ) );\n\n\tvec2 a2 = vec2( dot(a-b,u), dot(a-b,v) );\n\tvec2 b2 = vec2( 0.0 );\n\tvec2 c2 = vec2( dot(c-b,u), dot(c-b,v) );\n\tvec3 p3 = vec3( dot(p-b,u), dot(p-b,v), dot(p-b,w) );\n\n\tvec3 cp = getClosest( a2-p3.xy, b2-p3.xy, c2-p3.xy );\n    \n\treturn sqrt(dot(cp.xy,cp.xy)+p3.z*p3.z) - r;\n\n}\n\nfloat dEllipsoid(vec3 p, vec3 c) {\n    return (length(p/c) - 1.0)*min(min(c.x, c.y), c.z);\n}\n\nfloat dBox(vec3 p, vec3 b) {\n    vec3 d = abs(p) - b;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat dTorrent(vec3 p, float close) {\n    // the close param determins the torrents open/closed state.\n    // torrent is closed if close == .55 and open if close == 0.0;\n    p.y -= 1.0 + (isWDown() && !isSpaceDown() ? 0.1*cos(20.*iTime) : 0.0);\n    float td = 30.0;\n    \n    // middle part of body.\n    td = min(td, dEllipsoid(p + vec3(0, -0.02*cos(4.0*iTime), 0), vec3(.5, 1, .5)));\n    td = max(td, -(length(p - vec3(0, 0, .5)) - .2));\n    \n    vec3 q = -abs(p);\n    float bd1 = dBox(q + vec3(.45, 0, 0), vec3(.25, 2.5, .8));\n    float bd2 = dBox(q + vec3(.45 - close, 0, 0), vec3(.25, 2.5, .8));\n    \n    // Left and Right segments of the body.\n    td = max(td, -bd1);\n    td = min(td, max(dEllipsoid(q + vec3(.6 - close, 0.02*cos(4.0*iTime), 0), vec3(.45, .95, .45)), -bd2));\n    td = min(td, dSegment(p, vec3(-.9 + close, 0, 0), vec3(.9 - close, 0, 0), .1));\n    td = min(td, dSegment(p, vec3(-.9 + close, .3, 0), vec3(.9 - close, .3, 0), .05));\n    td = min(td, dSegment(p, vec3(-.9 + close, -.3, 0), vec3(.9 - close, -.3, 0), .05));\n\n    p.y += 1.0;\n    \n    // legs.\n    td = min(td, dBezier(p, limbs[0].a, limbs[0].k, limbs[0].f, .1));\n    td = min(td, dBezier(p, limbs[1].a, limbs[1].k, limbs[1].f, .1));\n    \n    // arms.\n    td = min(td, dBezier(p - vec3(.55 - close, 0, 0), limbs[2].a, limbs[2].k, limbs[2].f, .1));\n    td = min(td, dBezier(p + vec3(.55 - close, 0, 0), limbs[3].a, limbs[3].k, limbs[3].f, .1));\n    \n    return td;\n}\n\nvec2 map(vec3 p) {\n    vec2 pl = vec2(p.y + 1.0, 0.0);\n    float c = texture(iChannel1, vec2(0)).x;\n    vec4 tpa = texture(iChannel2, vec2(0));\n    p -= tpa.xyz;\n    rotate(p.xz, -3.14/2.0 + tpa.w);\n    if(isSpaceDown() && isWDown()) rotate(p.zy, .2);\n    \n    vec2 s = vec2(dTorrent(p, max(c, 0.0)), 1.0);\n    \n    return pl.x < s.x ? pl : s;\n}\n\nvec2 intersect(vec3 ro, vec3 rd) {\n    float tmax = 40.0;\n    float td = 0.0;\n    float mid = -1.0;\n    \n    for(int i = 0; i < 45; i++) {\n        vec2 s = map(ro + rd*td);\n        if(abs(s.x) < 0.001 || td >= tmax) break;\n        td += s.x;\n        mid = s.y;\n    }\n    \n    if(td >= tmax) mid = -1.0;\n    return vec2(td, mid);\n}\n\nvec3 normal(vec3 p) {\n    vec2 h = vec2(0.001, 0.0);\n    vec3 n = vec3(\n        map(p + h.xyy).x - map(p - h.xyy).x,\n        map(p + h.yxy).x - map(p - h.yxy).x,\n        map(p + h.yyx).x - map(p - h.yyx).x\n\t);\n    \n    return normalize(n);\n}\n\nfloat shadow(vec3 p, vec3 l) {\n    float res = 1.0;\n    float td = 0.002;\n    \n    for(int i = 0;i < 128; i++) {\n        float h = map(p + l*td).x;\n        td += h;\n        res = min(res, 8.0*h/td);\n        if(h < 0.001 || td >= 20.0) break;\n    }\n    \n    return clamp(res, 0.0, 1.0);\n}\n\nvec3 lighting(vec3 p, vec3 lp, vec3 rd) {\n    vec3 l = normalize(lp);\n    vec3 n = normal(p);\n    vec3 r = reflect(l, n);\n    vec3 ref = reflect(rd, n);\n    \n    float dif = clamp(dot(n, l), 0.0, 1.0);\n    float spe = pow(clamp(dot(r, rd), 0.0, 1.0), 16.0);\n    float fre = pow(clamp(1. + dot(n, rd), 0.0, 1.0), 2.0);\n    \n   \tdif *= shadow(p, l);\n    \n    vec3 lin = vec3(0.4);\n    \n    lin += 0.7*dif*vec3(1, .97, .85);\n    lin += 2.0*spe*vec3(1, .97, .7)*dif;\n    lin += 1.0*fre*vec3(1);\n    \n    return lin;\n}\n\nmat3 camera(vec3 e, vec3 l) {\n    vec3 rl = vec3(0, 1, 0);\n    vec3 f = normalize(l - e);\n    vec3 r = cross(rl, f);\n    vec3 u = cross(f, r);\n    \n    return mat3(r, u, f);\n}\n\nvec3 material(float id, vec3 p, vec3 lp, vec3 rd) {\n    vec3 col = vec3(.8);\n    if(id == 0.0) col = vec3(.8)*(.32 + mod(floor(p.x) + floor(p.z), 2.0));\n    if(id == 1.0) {\n        vec4 tpa = texture(iChannel2, vec2(0));\n        vec3 s = p - tpa.xyz;\n        \n        rotate(s.xz, -3.14/2.0 + tpa.w);\n        if(isSpaceDown() && isWDown()) rotate(s.zy, .2);\n        s.y -= (isWDown() && !isSpaceDown() ? 0.1*cos(20.*iTime) : 0.0);\n        vec2 q = s.xy;\n        \n        q.y = mod(q.y, .45);\n        \n        float hshape = step(.45/2., q.y);\n        \n        col = mix(vec3(.8, .3, .2), vec3(1), hshape);\n    }\n    \n    if(id != -1.0) col *= lighting(p, vec3(-1, 2, 1), rd);\n    \n    return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    if(isWDown()) {\n        if(!isSpaceDown()) {\n            float t = iTime*10.0;\n            limbs[0].a = vec3(.15, 0., .05);\n            limbs[0].f = vec3(.15, .2*sin(t) - 0.7, -.7*cos(t) + .2);\n            limbs[0].k = solve(limbs[0].a, limbs[0].f, .5, .5, normalize(vec3(1, 0, -1)));\n\n            limbs[1].a = vec3(-.15, 0., .05);\n            limbs[1].f = vec3(-.15, .2*sin(t + 3.0) - 0.7, -.7*cos(t + 3.0) + .2);\n            limbs[1].k = solve(limbs[1].a, limbs[1].f, .5, .5, normalize(vec3(1, 0, 1)));\n\n            limbs[2].a = vec3(.55, 1.0, .05);\n            limbs[2].f = vec3(.55, 0.2, .05 + 0.3*cos(t));\n            limbs[2].k = solve(limbs[2].a, limbs[2].f, 1.0, 1.7, normalize(vec3(-1, 0, -2)));\n\n            limbs[3].a = vec3(-.55, 1.0, .05);\n            limbs[3].f = vec3(-.55, 0.2, .05 - 0.3*cos(t));\n            limbs[3].k = solve(limbs[3].a, limbs[3].f, 1.0, 1.7, normalize(vec3(-1, 0, 2)));\n        } else {\n            limbs[0].a = vec3(.15, 0., .05);\n            limbs[0].f = vec3(.15, -.7, -.05);\n            limbs[0].k = solve(limbs[0].a, limbs[0].f, .5, .5, normalize(vec3(1, 0, -1)));\n\n            limbs[1].a = vec3(-.15, 0., .05);\n            limbs[1].f = vec3(-.15, -.7, -.05);\n            limbs[1].k = solve(limbs[1].a, limbs[1].f, .5, .5, normalize(vec3(1, 0, 1)));\n\n            limbs[2].a = vec3(.55, 1.0, .05);\n            limbs[2].f = vec3(1.0, 0.2, -.05);\n            limbs[2].k = solve(limbs[2].a, limbs[2].f, 1.0, 1.7, normalize(vec3(-1, 0, -2)));\n\n            limbs[3].a = vec3(-.55, 1.0, .05);\n            limbs[3].f = vec3(-1.0, 0.2, -.05);\n            limbs[3].k = solve(limbs[3].a, limbs[3].f, 1.0, 1.7, normalize(vec3(-1, 0, 2)));\n        }\n        \n    } else {\n        float t = 4.0*iTime;\n        // legs standing still\n        limbs[0].a = vec3(.15, 0. + 0.02*cos(t), .05);\n        limbs[0].f = vec3(.15, -.9, .05);\n        limbs[0].k = solve(limbs[0].a, limbs[0].f, .5, .5, normalize(vec3(1, 0, -1)));\n        \n        limbs[1].a = vec3(-.15, 0. + 0.02*cos(t), .05);\n        limbs[1].f = vec3(-.15, -.9, .05);\n        limbs[1].k = solve(limbs[0].a, limbs[0].f, .5, .5, normalize(vec3(1, 0, 1)));\n        \n        // arms standing still.\n        limbs[2].a = vec3(.55, 1.0 + 0.02*cos(t), .05);\n        limbs[2].f = vec3(.55, 0.2, .05);\n\t\tlimbs[2].k = solve(limbs[2].a, limbs[2].f, 1.0, 1.7, normalize(vec3(-1, 0, -2)));\n        \n        limbs[3].a = vec3(-.55, 1.0 + 0.02*cos(t), .05);\n        limbs[3].f = vec3(-.55, 0.2, .05);\n\t\tlimbs[3].k = solve(limbs[3].a, limbs[3].f, 1.0, 1.7, normalize(vec3(-1, 0, 2)));\n\n    }\n    \n    vec3 tp = texture(iChannel2, vec2(0)).xyz;\n    \n\tvec2 uv = -1.0 + 2.0*(fragCoord.xy / iResolution.xy);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float s = 0.01*iMouse.x;\n    \n    vec3 ro = tp + 5.5*vec3(cos(s), .1 + 0.01*iMouse.y, -sin(s));\n    vec3 rd = camera(ro, tp)*normalize(vec3(uv, 2.0));\n\tvec3 lp = vec3(-1, 2, -1);\n        \n    vec2 i = intersect(ro, rd);\n    vec3 p = ro + rd*i.x;\n    \n    vec3 col = material(i.y, p, lp, rd);\n    \n    col = pow(col, vec3(.65));\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const float KEY_W = 87.5/256.0;\nconst float KEY_A = 65.5/256.0;\nconst float KEY_D = 68.5/256.0;\nconst float KEY_SH = 16.5/256.0;\n\nbool isKeyPressed(float key) {\n    return texture(iChannel0, vec2(key, 0.0)).x == 1.0;\n}\n\nvec4 positionAndAngle() {\n    if(iFrame == 0) return vec4(0);\n    return texture(iChannel1, vec2(0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec4 p = positionAndAngle();\n\tfloat speed = isKeyPressed(KEY_SH) ? 0.2 : 0.1;\n    float angleSpeed = 0.05;\n\n    \n    vec3 cp = p.xyz;\n    float rads = p.w;\n    \n    if(isKeyPressed(KEY_A)) rads -= angleSpeed;\n    if(isKeyPressed(KEY_D)) rads += angleSpeed;\n    \n    vec3 dir = vec3(cos(rads), 0, -sin(rads));\n    \n    if(isKeyPressed(KEY_W)) cp -= dir*speed;\n    \n    fragColor = vec4(cp, rads);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 c = texture(iChannel1, vec2(0, 0)).xy;\n    \n    if(texture(iChannel0, vec2(32.5/256.0, 0)).x == 1.0) {\n        c.y = 1.0;\n    } else { c.y = -1.0; }\n    \n    if(c.y == 1.0) c.x -= 0.1;\n    else if (c.y == -1.0) c.x += 0.1;\n\n    if(c.x >= .55) c.y = 0.0;\n    if(c.x <= 0.0) c.y = 0.0;\n\n    c.x = max(min(c.x, .55), 0.0);\n    \n    fragColor = vec4(c, vec2(0));\n}","name":"Buffer A","description":"","type":"buffer"}]}