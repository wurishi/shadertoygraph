{"ver":"0.1","info":{"id":"ddV3RV","date":"1678837549","viewed":122,"name":"AI keleidoscope","username":"josplode","description":"Generated with chatGPT\n\nPrompt:\n\n\"Write a shadertoy glsl shader that renders a really cool and complex kaleidoscope.\"\n- After I got a black screen -\n\"The output is just black I see nothing\"\nThen I got the generated texture pattern and this image","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["ai","gpt","chatgpt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 texturePattern(in vec2 uv) {\n    vec2 p = fract(uv * vec2(10.0, 10.0)) - 0.5;\n    float lines = smoothstep(0.0, 0.02, min(abs(p.x), abs(p.y)));\n    return vec3(lines);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 center = vec2(0.5, 0.5);\n    vec2 p = uv - center;\n    \n    float angle = atan(p.y, p.x);\n    float radius = length(p);\n    \n    // Define the number of kaleidoscope segments\n    int numSegments = 12;\n    \n    // Fold angle into a single segment\n    angle = mod(angle, 2.0 * 3.14159265 / float(numSegments));\n    \n    // Convert back to Cartesian coordinates\n    vec2 mirrored = vec2(cos(angle), sin(angle)) * radius;\n    \n    // Create a radial gradient\n    float gradient = 1.0 - smoothstep(0.0, 0.5, radius);\n    \n    // Sample the procedural texture with mirrored coordinates\n    vec3 background = texturePattern(mirrored + center);\n    \n    // Apply the gradient to the background\n    vec3 finalColor = background * gradient;\n    \n    // Output the final color\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}