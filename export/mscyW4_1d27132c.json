{"ver":"0.1","info":{"id":"mscyW4","date":"1695056475","viewed":29,"name":"Dynamic circle","username":"FFFFFFear1","description":"Just a variant of previous circles party :)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define circle(pt, radius, sizeOutline, edge)  smoothstep(  edge,  0. , abs( length(pt) - radius) - sizeOutline / 2. )\n\nvec3 _ColorCircle = vec3(0.1,0.7,0.1);\nfloat _RadiusCircle = 0.09;\nfloat _RadiusCircleMin = 0.00;\nfloat _OutlineRadius = 0.02;\nfloat _OutlineSmoothRadius = 0.001;\nfloat _Speed = .6;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( fragCoord -.5* iResolution.xy ) / iResolution.y;\n    vec3 circles = vec3(0.);\n    \n    for(float j = 1.0; j < 4.0; j++) \n    { \n        for(float i = 1.0; i < 60.0; i++) \n        { \n            \n            float T = iTime * _Speed;\n            vec2 time = vec2(cos(T / j), sin(T * j / i)) * i;\n\n            vec2 S = max(_RadiusCircle * abs(time), _RadiusCircleMin); \n            float speed = S.x * S.y;\n\n\n            vec3 updatedColor = _ColorCircle / abs(time.y);\n\n            circles += updatedColor * circle(uv, speed, _OutlineRadius, _OutlineSmoothRadius);;\n        }\n    }\n    \n   \n \n    fragColor = vec4(circles,1.0);\n}","name":"Image","description":"","type":"image"}]}