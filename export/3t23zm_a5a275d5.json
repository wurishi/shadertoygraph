{"ver":"0.1","info":{"id":"3t23zm","date":"1559165111","viewed":94,"name":"2d organic layout","username":"linlin64","description":"2d organic layout","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["organic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 HASHSCALE3 = vec3(.1031, .1030, .0973);\n\nbool circle(vec2 uv, vec2 pos, float rad, out vec4 color) {\n    float d = length(pos - uv) - rad;\n    float t = 1.0;\n    if(d <= 0.0) {\n        t = 0.0;\n        color = vec4(0.0, 1.0, 0.0, 1.0);\n        return true;\n    }\n    return false;\n}\n\nbool sdLine( in vec2 p, in vec2 a, in vec2 b, out vec4 color )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    if(length( pa - ba*h ) <= 1.0) {\n        color = vec4(0.0, 0.0, 0.0, 1.0);\n    \treturn true;\n    }\n    return false;\n}\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvec2 hash22(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float number = texture (iChannel1, vec2(1.0, 1.0) / iResolution.xy).x;\n    if(number == 0.0) {\n    \treturn;\n    }\n    \n    vec2 uv = fragCoord;\n    \n    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n    bool found = false;\n    float loopmax = number;\n    for(float index = 0.0; index < loopmax; ++index) {\n        float i = index * 2.0 + 1.0;\n        vec4 pos = texture (iChannel0, vec2(float(i), float(i)) / iResolution.xy);\n        if(circle(uv, vec2(pos.x, pos.y), 3.0 + 7.0 * hash22(vec2(index, index)).x, color)) {\n            found = true;\n        \tbreak;\n        }\n    }\n\t\n    if(found == false) {\n        float loopmax2 = number - 1.0;\n        for(float index = 0.0; index < loopmax2; ++index) {\n            float i = index * 2.0 + 1.0;\n            vec4 transaction = texture (iChannel3, vec2(float(i), float(i)) / iResolution.xy).xyzw;\n\n            vec4 enterprise1 = texture (iChannel0, vec2(int(transaction.x), int(transaction.x)) / iResolution.xy);\n            vec4 enterprise2 = texture (iChannel0, vec2(int(transaction.y), int(transaction.y)) / iResolution.xy);\n        \n            if(sdLine(uv, vec2(enterprise1.x, enterprise1.y), vec2(enterprise2.x, enterprise2.y), color)) {\n            \tfound = true;\n                break;\n            }\n        }\n    }\n    \n    if(found) {\n    \tfragColor = color;\n    } else {\n    \tfragColor = vec4(1.0, 1.0, 1.0,1.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec3 HASHSCALE3 = vec3(.1031, .1030, .0973);\n\nvec2 hash22(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float number = texture (iChannel1, vec2(1.0, 1.0) / iResolution.xy).x;\n    if(number == 0.0) {\n    \treturn;\n    }\n    \n    if (fragCoord.x > number * 2.0\n        || fragCoord.y > number * 2.0) {\n    \treturn;\n    }\n    \n    for(float index = 0.0; index < number; ++index) {\n        float i = index * 2.0;\n        \n        vec4 pos = texture (iChannel0, vec2(i + 1.0, i + 1.0) / iResolution.xy).xyzw;\n        vec4 deriv = texture (iChannel2, vec2(i + 1.0, i + 1.0) / iResolution.xy).xyzw;\n\n        if(pos.w < 1.0) {\n            pos.x = hash22(fragCoord).x * iResolution.x;\n            pos.y = hash22(fragCoord).y * iResolution.y;\n            pos.z = 0.0;\n            pos.w = 1.0;\n        }\n\n        pos.x += deriv.x;\n        pos.y += deriv.y;\n        if(pos.x > iResolution.x - 10.0) {\n            pos.x = iResolution.x - 10.0;\n        }\n        if(pos.x < 10.0) {\n            pos.x = 10.0;\n        }\n        if(pos.y > iResolution.y - 10.0) {\n            pos.y = iResolution.y - 10.0;\n        }\n        if(pos.y < 10.0) {\n            pos.y = 10.0;\n        }\n        pos.z = 0.00;\n        //pos.w = 0.00;\n\n        if(fragCoord.x >= i && fragCoord.x < i + 2.0\n          && fragCoord.y >= i && fragCoord.y < i + 2.0) {\n            fragColor = pos;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.x >= 0.0 && fragCoord.x < 2.0\n    \t&& fragCoord.y >= 0.0 && fragCoord.y < 2.0) {\n        fragColor = vec4(80.0, 0.0, 0.0, 0.0);\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float number = texture (iChannel1, vec2(1.0, 1.0) / iResolution.xy).x;\n    if(number == 0.0) {\n    \treturn;\n    }\n    \n    if (fragCoord.x > number * 2.0\n        || fragCoord.y > number * 2.0) {\n    \treturn;\n    }\n    \n    float alpha1 = 3000.0 + cos(iTime) * 2000.0;//1000.0;\n    float alpha2 = 0.3 + cos(iTime) * 0.1;//0.3\n    float dx = 0.0;\n    float dy = 0.0;\n    \n    // Repulsion\n    float loopmax1 = number - 1.0;\n    float loopmax2 = number;\n    for(float iindex = 0.0; iindex < loopmax1; ++iindex) {\n        float i = iindex * 2.0 + 1.0;\n        vec4 e1 = texture (iChannel0, vec2(i, i) / iResolution.xy).xyzw;\n\n        for(float jindex = iindex + 1.0; jindex < loopmax2; ++jindex) {\n        \tfloat j = jindex * 2.0 + 1.0;\n\n            vec4 e2 = texture (iChannel0, vec2(j, j) / iResolution.xy).xyzw;\n\n            float dx1 = e2.x - e1.x;\n            float dy1 = e2.y - e1.y;\n            float dist = sqrt(dx1 * dx1 + dy1 * dy1);\n            if(dist != 0.0) {\n                float repulsionx = ((alpha1 * 1.0) / (dist*dist)) * ((dx1 * 1.0) / dist);\n                float repulsiony = ((alpha1 * 1.0) / (dist*dist)) * ((dy1 * 1.0) / dist);\n\n                if(fragCoord.x >= i\n                  && fragCoord.x < i + 2.0\n                  && fragCoord.y >= i\n                  && fragCoord.y < i + 2.0) {\n                    dx -= repulsionx;\n                    dy -= repulsiony;\n                }\n                if(fragCoord.x >= j\n                  && fragCoord.x < j + 2.0\n                  && fragCoord.y >= j\n                  && fragCoord.y < j + 2.0) {\n                    dx += repulsionx;\n                    dy += repulsiony;\n                }\n            }\n        }\n    }\n\n    // Attraction\n    for(float iindex = 0.0; iindex < loopmax2; ++iindex) {\n        float i = iindex * 2.0 + 1.0;\n        \n\t    vec4 transaction = texture (iChannel3, vec2(i, i) / iResolution.xy).xyzw;\n    \n        if(fragCoord.x >= transaction.x\n          && fragCoord.x < transaction.x + 2.0\n          && fragCoord.y >= transaction.x\n          && fragCoord.y < transaction.x + 2.0) {\n            vec4 enterprise1 = texture (iChannel0, vec2(float(transaction.x), float(transaction.x)) / iResolution.xy).xyzw;\n        \tvec4 enterprise2 = texture (iChannel0, vec2(float(transaction.y), float(transaction.y)) / iResolution.xy).xyzw;\n\n            float dx1 = enterprise2.x - enterprise1.x;\n            float dy1 = enterprise2.y - enterprise1.y;\n            float dist = sqrt(dx1 * dx1 + dy1 * dy1);\n            if(dist != 0.0) {\n              float attractionx = (alpha2 * dist * dx1) / dist;\n              float attractiony = (alpha2 * dist * dy1) / dist;\n\n              dx += attractionx; \n              dy += attractiony; \n            }\n        } else if(fragCoord.x >= transaction.y\n          && fragCoord.x < transaction.y + 2.0\n          && fragCoord.y >= transaction.y\n          && fragCoord.y < transaction.y + 2.0) {\n            vec4 enterprise1 = texture (iChannel0, vec2(float(transaction.x), float(transaction.x)) / iResolution.xy).xyzw;\n        \tvec4 enterprise2 = texture (iChannel0, vec2(float(transaction.y), float(transaction.y)) / iResolution.xy).xyzw;\n\n            float dx1 = enterprise2.x - enterprise1.x;\n            float dy1 = enterprise2.y - enterprise1.y;\n            float dist = sqrt(dx1 * dx1 + dy1 * dy1);\n            if(dist != 0.0) {\n              float attractionx = (alpha2 * dist * dx1) / dist;\n              float attractiony = (alpha2 * dist * dy1) / dist;\n\n              dx -= attractionx; \n              dy -= attractiony; \n            }\n        }\n    }\n    \n    fragColor = vec4(dx,dy,1.0,1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"const vec3 HASHSCALE3 = vec3(.1031, .1030, .0973);\n\nvec2 hash22(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float number = texture (iChannel1, vec2(1.0, 1.0) / iResolution.xy).x;\n    if(number == 0.0) {\n    \treturn;\n    }\n    \n    if (fragCoord.x > number * 2.0\n        || fragCoord.y > number * 2.0) {\n    \treturn;\n    }\n    \n    float loopmax = number;\n    float random = number - 2.0;\n    for(float iindex = 0.0; iindex < loopmax; ++iindex) {\n        float i = iindex * 2.0;\n\n        vec4 links = texture (iChannel3, vec2(i + 1.0, i + 1.0) / iResolution.xy).xyzw;\n        if(links.w < 1.0) {\n            links.x = i + 1.0;\n            links.y = i + 3.0 + floor((random - i / 2.0) * hash22(vec2(iindex, iindex)).x) * 2.0;\n        \tlinks.z = 0.0;\n            links.w = 1.0;\n        }\n\n        if(fragCoord.x >= i && fragCoord.x < i + 2.0\n           && fragCoord.y >= i && fragCoord.y < i + 2.0) {\n            fragColor = links;\n        }\n    }\n}","name":"Buffer D","description":"","type":"buffer"}]}