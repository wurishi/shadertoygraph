{"ver":"0.1","info":{"id":"DsScRG","date":"1687810963","viewed":39,"name":"My Shader Beginning","username":"JBright","description":"I saw kishimisu's video and was inspired to finally starting learning how to make shaders (I have been wanting to learn for a few years now...)! This is my first real attempt and for a first attempt I'm quite happy with it! ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["firstshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926538\n\nmat2 rotate2d(float angle)\n{\n    return mat2(cos(angle),-sin(angle),\n                sin(angle),cos(angle));\n}\n\nfloat shape(in vec2 p, in float r )\n{\n    /*\n    //Pentagon\n    const vec3 k = vec3(0.809016994,0.587785252,0.726542528);\n    p.x = abs(p.x);\n    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n    p -= vec2(clamp(p.x,-r*k.z,r*k.z),r);    \n    return length(p)*sign(p.y);\n    */\n    \n    //Triangle\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nvec3 palette(in float t)\n{\n    vec3 a = vec3(-0.022, 0.540, 0.768);\n    vec3 b = vec3(0.870, 0.388, 0.270);\n    vec3 c = vec3(0.350, 1.410, 0.373);\n    vec3 d = vec3(0.880, 6.043, 3.018);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    \n    vec3 finalColor = vec3(0.);\n    \n    for(float i = 0.0; i < 3.0; i++)\n    {\n        uv = 1.3 * fract(uv) - 0.65;\n        \n        vec3 col = palette(length(uv0 * cos(iTime * .4)) + i * 1.) * exp(-length(uv0) * 0.01);\n        \n        \n        float d1 = shape(rotate2d(i * iTime / 8.) * uv,  0.1 * iTime);\n        float d2 = shape(rotate2d(i * iTime / 8. + PI) * uv, 0.1 * iTime);\n        float d3 = shape(rotate2d(i * -iTime / 8.) * uv, 0.1 * iTime);\n        float d4 = shape(rotate2d(i * -iTime / 8. - PI) * uv, 0.1 * iTime);\n        float d = min(d1, min(d2, min(d3,d4)));\n        \n        d = abs(sin(d * 4. + i * 0.7 + iTime * 0.3) / 4.);\n        d = 0.02 / d;\n        \n        d = pow(d, 1.5);\n        \n        finalColor += col * d;\n    }\n    \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}