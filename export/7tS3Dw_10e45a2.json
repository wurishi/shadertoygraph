{"ver":"0.1","info":{"id":"7tS3Dw","date":"1624000955","viewed":53,"name":"strange ray marching","username":"kali_22","description":"i tried to make the model of rotating planets","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat getDist(vec3 p){\n    vec4 sphere = vec4(0, 1, 6, 1);\n    float planeDist = p.y;\n    float speed = 0.1;\n    float dis = 2.0;\n    float d = distance(sphere.xyz,p) - sphere.w;\n    for (int i = 0; i < 10; i+=1){\n        float j = float(i);\n        sphere = vec4(0.0 + sin(iTime*j*speed)*dis*j,1.0, 6.0 + cos(iTime*j*speed)*dis*j, 1.0-j*0.05);\n        d = min(distance(sphere.xyz, p) - sphere.w,d);\n    }\n    d = min(d, planeDist);\n    return d;\n}\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.0;\n    for(int i = 0; i < 100; i+=1){\n        vec3 p = ro + rd*dO;\n        dO += getDist(p);\n        if(dO > 100.0 || dO < 0.1) break;\n    }\n    return dO;\n}\nvec3 getNormal(vec3 p){\n    float d = getDist(p);\n    vec2 e = vec2(0.01,0.0);\n    vec3 n = d - vec3(getDist(p - e.xyy), getDist(p - e.yxy), getDist(p - e.yyx));\n    return normalize(n);\n}\nfloat getLight(vec3 p){\n    vec3 lo = vec3(0, 8, 2);\n    vec3 l = normalize(lo - p);\n    vec3 n = getNormal(p);\n    return dot(n,l);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.yy;\n    \n    vec3 ro = vec3(0, 2.0+sin(iTime),-3.0+cos(iTime));\n    vec3 dr = normalize(vec3(uv, 1.0));\n    float d = RayMarch(ro, dr);\n    vec3 p = ro + dr * d;\n    fragColor.rgb = vec3(d/12.0, getLight(p), d/5.0);\n}","name":"Image","description":"","type":"image"}]}