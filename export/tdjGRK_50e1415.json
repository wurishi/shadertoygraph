{"ver":"0.1","info":{"id":"tdjGRK","date":"1549494631","viewed":151,"name":"581 Ray Marching Practice PBR","username":"zheng516","description":"581","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["581"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n\n\n//camera position\nvec3  camPos = vec3(0.0, 0.0, 10.0);\n\n//template distance funciton\nfloat sphereSDF(in vec3 samplePoint, in float radius){\nreturn length (samplePoint) - radius;\n}\n\nfloat planeSDF( in vec3 samplePoint, in vec4 n)\n{// n must be normalized\n\treturn dot(samplePoint, n.xyz) + n.w;\n}\n\n// Signed distance function for a sphere centered at the origin with radius 1.0;\nfloat sphereSDF1(vec3 samplePoint) {\n    return length(samplePoint - vec3 (- 1.5 , 0.0 ,-1.5 )) - 0.9;\n}\nfloat sphereSDF2(vec3 samplePoint) {\n    return length(samplePoint - vec3 (1.0, 0.0,0.0)) - 0.5;\n}\nfloat sphereSDF3(vec3 samplePoint) {\n    return length(samplePoint - vec3 (0.0, 1.5* cos(iTime), -1.5 * -sin(iTime))) - 0.5;\n}\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n  const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n  p = abs(p);\n  p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n  vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n/** assign an id to each SDF in the scene, check if a ray hit the obj\n*since there's a better way to assign the ID, these code coudl be obsoleted\n*/\n//** easier understood, differentiate each sphere\n/*\nint id(vec3 samplePoint)\n{\n    if (sphereSDF1( samplePoint)<EPSILON)\n        return 1;\n    if (sphereSDF2( samplePoint)<EPSILON)\n        return 2;\n    if (sphereSDF3( samplePoint)<EPSILON)\n        return 3;\n}\n*/\n\n\n/**\n * Signed distance function describing the scene.\n * \n * Absolute value of the return value indicates the distance to the surface.\n * Sign indicates whether the point is inside or outside the surface,\n * negative indicating inside.\n */\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n//used in the sceneSDF, but sceneSDF only returns .x, set global here to hold .y\n// which is the ID of dist\nvec2 result = vec2 (0.0);\n\n\n float boxPotDist= 0.0;\n//**assign id to each dist as the second component in mapNid\nfloat sceneSDF(vec3 samplePoint) {\n    result = vec2(planeSDF(samplePoint, normalize(vec4(0.0, 1.0, 1.0, 5.0))), 0.0);\n    \n    result = opU(result, vec2(sphereSDF(samplePoint-vec3 (-2.0, \t\t\t0.0, \t\t\t   -1.5), 2.0), 1.0));\n    result = opU(result, vec2(sphereSDF(samplePoint-vec3 ( 1.0, \t\t\t0.0, \t\t\t\t0.0), 0.5), 2.0));   \n    result = opU(result, vec2(sphereSDF(samplePoint-vec3 ( 0.0, 1.5* cos(iTime), -1.5 * -sin(iTime)), 0.5), 3.0));\n    \n   \n    boxPotDist = sdBox( samplePoint, vec3 (1.0, 1.0, 1.0)) -sdBox( vec3( +1.5 * -sin(iTime), 0.0, 0.0), vec3 (1.0, 1.0, 1.0))  ;\n    \n    //result = opU(result, vec2 (boxPotDist, 1.0) );\n    \n    \n    result = opU(result, vec2(sdBox    (samplePoint - vec3(-2.0 +1.5 * -sin(iTime), 0.0, 0.0)                           , vec3(1.0, 1.0, 1.0)),3.0));\n    result = opU(result, vec2(sdHexPrism(samplePoint - vec3( 1.0,1.0, 1.5* cos(iTime))                         , vec2(1.0, 1.0)   ), 1.0 ) );\n    \n    \n    //return min(min(sphereSDF1(samplePoint), sphereSDF2(samplePoint)),\n      //        sphereSDF3(samplePoint));\n\n    return result.x;\n\n}\n\n/**\n * Return the shortest distance from the camera point to the scene surface along\n * the marching direction. If no part of the surface is found between start and end,\n * return end.\n * camPos: the eye point, acting as the origin of the ray\n * marchingDirection: the normalized direction to march in\n * start: the starting distance away from the eye\n * end: the max distance away from the ey to march before giving up\n */\nfloat shortestDistanceToSurface(vec3 camPos, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(camPos + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        \n        depth += dist;\n        \n        if (depth >= end) {\n            return end;\n        }\n    }\n    \n    return end;\n}          \n\n/**\n * Return the normalized direction to march in from the eye point for a single pixel.\n * \n * fieldOfView: vertical field of view in degrees\n * size: resolution of the output image\n * fragCoord: the x,y coordinate of the pixel in the output image\n */\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n/**\n * Using the gradient of the SDF, estimate the normal on the surface at point p.\n */\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\n//phong lighting\n//==============================================================\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: shininess (exponent of R dot V)\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\n\nvec3 K_a = vec3(0.2, 0.2, 0.2);\nvec3 K_d = vec3(0.7, 0.7, 0.7);\nvec3 K_s = vec3(0.1, 0.4, 0.1);\nfloat shininess = 40.0;\n\n\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 camPos,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(camPos - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess (exponent of R dot V)\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n* The function here loop all the sample point of dist through all the light \n*/\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 camPos) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 lit1Col = vec3(0.3, 0.5, 0.9);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, camPos,\n                                  light1Pos,\n                                  lit1Col);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 lit2Col = vec3(0.4, 0.9, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, camPos,\n                                  light2Pos,\n                                  lit2Col);    \n    \n     vec3 light3Pos = vec3(3.0 * sin(0.66 * iTime),\n                          2.0 * cos(0.66 * iTime),\n                          1.0);\n    vec3 lit3Col = vec3(0.8, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, camPos,\n                                  light3Pos,\n                                  lit3Col);    \n    \n    return color;\n}\n\n//PBR\n//=====================================================================\n/*\n\nin vec2 TexCoords;\nin vec3 WorldPos;\nin vec3 Normal;\n\n// material parameters\nuniform vec3  albedo;\nuniform float metallic;\nuniform float roughness;\nuniform float ao;\n\n// lights\nuniform vec3 lightPositions[4];\nuniform vec3 lightColors[4];\n\nuniform vec3 camPos;\n\nconst float PI = 3.14159265359;*/\n\n//** PBR Equations===========================================================\n\nconst float PI = 3.14159265359;\n\n\nfloat DistributionGGX(vec3 N, vec3 H, float roughness)\n{\n    float a      = roughness*roughness;\n    float a2     = a*a;\n    float NdotH  = max(dot(N, H), 0.0);\n    float NdotH2 = NdotH*NdotH;\n\t\n    float num   = a2;\n    float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n    denom = PI * denom * denom;\n\t\n    return num / denom;\n}\n\nfloat GeometrySchlickGGX(float NdotV, float roughness)\n{\n    float r = (roughness + 1.0);\n    float k = (r*r) / 8.0;\n\n    float nom   = NdotV;\n    float denom = NdotV * (1.0 - k) + k;\n\t\n    return nom / denom;\n}\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n{\n    float NdotV = max(dot(N, V), 0.0);\n    float NdotL = max(dot(N, L), 0.0);\n    float ggx2  = GeometrySchlickGGX(NdotV, roughness);\n    float ggx1  = GeometrySchlickGGX(NdotL, roughness);\n\t\n    return ggx1 * ggx2;\n}\n\nvec3 fresnelSchlick(float cosTheta, vec3 F0)\n{\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n} \n\n//Render PBR========================================================================\nint numOfLit = 4;\n//set parameters for material\nvec3 albedo;\nfloat roughness = 0.1; //** can be changed later\nfloat metallic = 0.3;  //** can be changed later\n\n//preset albedo color\nvec3 alumi = vec3(0.96, 0.96, 0.97);\nvec3 gold = vec3(1.00, 0.86, 0.57);\nvec3 copper = vec3(0.95, 0.64, 0.54);\nvec3 plastic = vec3(0.24, 0.24, 0.24);\n\n\n\nvec3 renderPBR(vec3 p){\n//** in shader toy changing variables cannot be global, so put litPos locally    \nvec3 lightPos[4] = vec3[4](\n        vec3(4.0 * sin(iTime)\t\t, 2.0\t\t\t\t\t , 4.0 * cos(0.29*iTime)),\n        vec3(2.0 * sin(0.37 * iTime), 2.0 * cos(0.37 * iTime), 2.0),\n        vec3(3.0 * sin(0.66 * iTime), 2.0 * cos(0.66 * iTime), 1.0),\n    \tvec3(5.0 * cos(0.17 * iTime), 3.0 * sin(0.47 * iTime), 3.0 * cos(0.17*iTime))\n    );\nvec3 lightColor[4] =  vec3[4](\n    vec3(10.0),\n    vec3(3.0, 4.0, 5.0),\n    vec3(12.0),\n    vec3(5.0, 6.0, 9.0));\n   \n\n//mapNid.y is the ID of the dist, so set parameters of each dist here\nif(result.y == 1.0)\n    {\n        roughness = 0.5;\n        metallic= 0.6;\n        albedo = gold;\n        //F0 =  mix(F0, albedo, metallic);\n    }\n    else if(result.y == 2.0)\n    {\n        roughness =0.7;\n        metallic = 0.9;\n        albedo = copper;\n       \t//F0 = mix(F0, albedo, metallic);\n    }\n    else if (result.y == 3.0)\n    {\n        roughness =0.5;\n        metallic = 0.5;\n        albedo = vec3 (0.95, 0.93, 0.88);\n       \t//F0 = mix(F0, albedo, metallic);\n    }\n    else if (result.y == 0.0){\n       \troughness =0.9;\n        metallic = 0.1;\n        albedo = plastic;\n       \t//F0 = mix(F0, albedo, metallic); \n    }\n\n    \n    //computing the variable needed in the loop\n\tvec3 N =  estimateNormal(p);\n\tvec3 V =  normalize(camPos - p);\n\tvec3 F0 = vec3(0.04);\n\t\t F0 = mix(F0, albedo, metallic); \n\tvec3 Lo = vec3(0.0);\n\n    \t\n    for(int i=0;i<numOfLit;i++)\n    {\n        vec3 L = normalize(lightPos[i]-p);\n        vec3 H = normalize(V+L);\n        \n        float attenDist = length(lightPos[i]-p);\n        float attenuation = 1.0/(attenDist*attenDist);\n        \n        vec3 radiance = lightColor[i]*attenuation;\n        \n        float NDF = DistributionGGX(N, H, roughness);\n        float G   = GeometrySmith(N, V, L, roughness);\n        vec3 F = fresnelSchlick(max(dot(H,V),0.0),F0);\n        \n        vec3 numerator    = NDF * G * F;\n\t\tfloat denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);\n\t\tvec3 specular     = numerator / max(denominator, 0.001);\n        \n        vec3 kS = F;\n        vec3 kD = vec3(1.0) - kS;\n        kD *= 1.0 - roughness;\n        \n        float NdotL = max(dot(N, L), 0.0);\n        Lo += (kD * albedo / PI  + specular) * radiance * NdotL;\n    }\n\n    vec3 ambient = vec3(0.03) * albedo * roughness;\n    vec3 color = ambient + Lo;\n    \n    //**to scale the PBR bigger since no diffuse term\n    //color = color / (color + vec3(1.0));\n    //color = pow(color, vec3(1.0/2.2));\n    \n    return color;\n}\n\n\n//=================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);\n    //vec3 camPos = vec3(0.0, 0.0, 5.0);\n    float dist = shortestDistanceToSurface(camPos, dir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST) {\n        // Didn't hit anything\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n    }\n    \n    //The sample point on the ray that shot from each fragment\n    vec3 sampleP = camPos + dist * dir;\n    \n    vec3 color = renderPBR(sampleP);\n    \n    //vec3 color = phongIllumination(K_a, K_d, K_s, shininess, sampleP, camPos);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}