{"ver":"0.1","info":{"id":"Xl3cDn","date":"1532131354","viewed":424,"name":"Prehistoric","username":"yoyobbi","description":"Still learning about shadertoy, inputs, etc.","likes":3,"published":1,"flags":64,"usePreview":0,"tags":["greenscreen","sepia","filmgrain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MdjXRt","filepath":"https://soundcloud.com/drikounet/flying-in-my-dreams","previewfilepath":"https://soundcloud.com/drikounet/flying-in-my-dreams","type":"musicstream","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Readbackground and foreground images.\n    vec3 bg = texture(iChannel0, uv).rgb;\n    vec3 fg = texture(iChannel1, uv).rgb;\n\n    // Foreground ghosting.\n    const float ghostliness = 0.2;\n    fg = mix(fg, bg, ghostliness);\n    \n    // Greenscreen mask.\n\tfloat ref = fg.r;\n\tif(ref < fg.b) ref = fg.b;\n\tfloat amask = fg.g - ref;\n\tamask = smoothstep(0.1,0.2,amask);\n    \n    // Apply mask.\n    vec3 col = mix(fg, bg, amask);\n\n    // Sepia tone, from\n    // https://www.techrepublic.com/blog/how-do-i/how-do-i-convert-images-to-grayscale-and-sepia-tone-using-c\n\tvec3 sepia = vec3(\n        col.r * .393 + col.g *.769 + col.b * .189,\n        col.r * .349 + col.g *.686 + col.b * .168,\n\t\tcol.r * .272 + col.g *.534 + col.b * .131);\n    \n    // Film grain, from\n    // https://www.reddit.com/r/opengl/comments/1rr4fy/any_good_ways_of_generating_film_grain_noise\n    const float noiseStrength = 50.0;\n    float x = (uv.x + 4.0) * (uv.y + 4.0) * (iTime * 10.0);\n    vec3 grain = vec3(mod((mod(x, 13.0) + 1.0) * (mod(x, 123.0) + 1.0), 0.01) - 0.005) * noiseStrength;\n\n    // This one is optional, it makes a small \"tear\" every now and then\n    //if(mod(time, 100) > 98 && mod(texcoord.y, 10) > 7) grain = vec3(-3.0, -3.0, -3.0);\n    \n    // Output to screen\n    fragColor = vec4(sepia+grain,1.0);\n}","name":"Image","description":"","type":"image"}]}