{"ver":"0.1","info":{"id":"WdXfR2","date":"1588613988","viewed":310,"name":"robust ray sphere intersection","username":"fpsunflower","description":"Orthographic view of a unit sphere. Distance to the sphere is animated back and forth.\nLeft is textbook method, right is robust method.\nMore info: https://link.springer.com/content/pdf/10.1007%2F978-1-4842-4427-2_7.pdf","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// return distance to sphere (xyz=center, w=radius)\nfloat isect_sphere(vec3 org, vec3 dir, vec4 sphere, bool robust) {\n    vec3 oc = org - sphere.xyz;\n    float b = dot(oc,dir);\n    float r2 = sphere.w * sphere.w;\n    if (!robust) {\n        // textbook method\n        float c = dot(oc, oc) - r2;\n        float d = b * b - c;\n        if (d > 0.0)\n            return -b - sqrt(d);\n    } else {\n        // robust method\n        vec3 fbd = oc - b * dir;\n        float d = r2 - dot(fbd, fbd);\n        if (d > 0.0)\n            return -b - sqrt(d);\n    }\n    return -1.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 4.0 * uv - vec2(2.0);\n    uv.y *= iResolution.y / iResolution.x;\n    \n    vec3 o = vec3(uv,0.0);\n    vec3 d = vec3(0.0,0.0,1.0);\n    vec4 s = vec4(0.0,0.0,4000.0*abs(sin(iTime))+10.0,1.0);\n\n    float t = isect_sphere(o,d,s,uv.x > 0.0);\n    \n    vec3 col = vec3(0.0);\n    if (t > 0.0) {\n        vec3 p = o + t * d;\n        vec3 n = normalize(p - s.xyz);\n        const float PI = 3.1415926535897932384626433832795;\n        vec2 uv = vec2((atan(n.x, n.z) + PI) / (2.0 * PI),\n                        acos(n.y) / PI);\n        ivec2 c = ivec2(uv * 20.0);\n        col = 0.5 * vec3(((c.x ^ c.y) & 1) == 0) + vec3(0.3);\n        col *= 0.7 * vec3(max(dot(normalize(vec3(-1.0,1.0,-1.0)), n), 0.0)) + 0.1;\n        //col = vec3(uv.xy, 0.5);\n        //col = 0.5 * n + vec3(0.5);\n    }\n    \n    // Output to screen\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}