{"ver":"0.1","info":{"id":"tdGGDw","date":"1570282833","viewed":546,"name":"Sine-Gordon equation simulation","username":"michael0884","description":"A basic simulation of the 2d sine-Gordon equation that has long-term stable solitonic waves, that behave like relativistic particles ","likes":32,"published":1,"flags":32,"usePreview":0,"tags":["nonlinearwaves","classicalfieldtheory","theoreticalphysics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//colormapping\nvoid mainImage( out vec4 color, in vec2 pos)\n{\n    vec4 field = F(pos);\n    //a weird colored energy mapping\n    color.xyz = vec3(0.7,0.3,0.1)*pow(3.*field.x,2.) + vec3(0.1,0.2,0.8)*pow(2.*field.y,2.);\n    color.w = 0.f;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define size iResolution.xy\n#define F(pos) texture(iChannel0, (pos)/size)\n\n//scales\n#define dt 0.05\n#define dx 0.1\n\n//nonlinearity\n#define K 0.6\n\n#define PI 3.14159265\n\n//vacuum noise cancelling \n#define noise_cancl 0.00005","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//the value of the field is the red channel, green is the time derivative of the value\n\nfloat LaplacianOperator(vec2 pos)\n{\n    vec4 a = F(pos);\n\tvec4 a00 = F(pos + vec2(-1,0));\n    vec4 a10 = F(pos + vec2(1,0));\n    vec4 a01 = F(pos + vec2(0,1));\n    vec4 a11 = F(pos + vec2(0,-1));\n \n\treturn (a00.x+a10.x+a01.x+a11.x-4.f*a.x)/(dx*dx);\n}\n\n\nvoid mainImage( out vec4 field, in vec2 pos)\n{\n    vec4 field_prev = F(pos);\n    float u = field_prev.x;\n    float du_dt = field_prev.y;\n    \n    //verlet integration of each point of the field \n    float laplace = LaplacianOperator(pos);\n\tfield.y = du_dt + dt*(laplace - K*sin(2.*PI*u) ); \n\tfield.x = u + dt*field.y + noise_cancl*laplace;\n    \n    //mouse interaction\n     if(iMouse.z>0.)\n        field.x += 0.02*exp(-pow(length(iMouse.xy-pos)/20.,2.));\n    \n    //vacuum noise cancelling, also kills the particles after some time\n   /* {\n        float f_energy = pow(u,2.) + pow(du_dt,2.);\n        if(f_energy < noise_cancl)\n        {\n            float k = (1.-0.01*f_energy/noise_cancl);\n            field.x *= k;\n            field.y *= k;\n        }\n    }*/\n    \n    //initial conditions\n    if(iFrame <1) {\n    \tfield.x = 1.5*exp(-pow(length(pos-0.55*size)/40.,2.))+\n            1.5*cos(20.f*pos.x/size.x)*exp(-pow(length(pos-0.45*size)/50.,2.));\n        field.y = 0.;\n    }\n  \n    //unused\n    field.z = 0.f; \n \tfield.w = 1.f;\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//the value of the field is the red channel, green is the time derivative of the value\n\nfloat LaplacianOperator(vec2 pos)\n{\n    vec4 a = F(pos);\n\tvec4 a00 = F(pos + vec2(-1,0));\n    vec4 a10 = F(pos + vec2(1,0));\n    vec4 a01 = F(pos + vec2(0,1));\n    vec4 a11 = F(pos + vec2(0,-1));\n \n\treturn (a00.x+a10.x+a01.x+a11.x-4.f*a.x)/(dx*dx);\n}\n\n\nvoid mainImage( out vec4 field, in vec2 pos)\n{\n    vec4 field_prev = F(pos);\n    float u = field_prev.x;\n    float du_dt = field_prev.y;\n    //verlet integration of each point of the field \n    float laplace = LaplacianOperator(pos);\n\tfield.y = du_dt + dt*(laplace - K*sin(2.*PI*u) ); \n\tfield.x = u + dt*field.y + noise_cancl*laplace;\n    \n    //mouse interaction\n     if(iMouse.z>0.)\n        field.x += 0.02*exp(-pow(length(iMouse.xy-pos)/20.,2.));\n   \n\n    //unused\n    field.z = 0.; \n \tfield.w = 1.;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//the value of the field is the red channel, green is the time derivative of the value\n\nfloat LaplacianOperator(vec2 pos)\n{\n    vec4 a = F(pos);\n\tvec4 a00 = F(pos + vec2(-1,0));\n    vec4 a10 = F(pos + vec2(1,0));\n    vec4 a01 = F(pos + vec2(0,1));\n    vec4 a11 = F(pos + vec2(0,-1));\n \n\treturn (a00.x+a10.x+a01.x+a11.x-4.f*a.x)/(dx*dx);\n}\n\n\nvoid mainImage( out vec4 field, in vec2 pos)\n{\n    vec4 field_prev = F(pos);\n    float u = field_prev.x;\n    float du_dt = field_prev.y;\n    \n     //verlet integration of each point of the field \n    float laplace = LaplacianOperator(pos);\n\tfield.y = du_dt + dt*(laplace - K*sin(2.*PI*u) ); \n\tfield.x = u + dt*field.y + noise_cancl*laplace;\n    \n    //mouse interaction\n     if(iMouse.z>0.)\n        field.x += 0.02*exp(-pow(length(iMouse.xy-pos)/20.,2.));\n    \n    \n    //unused\n    field.z = 0.; \n \tfield.w = 1.;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//the value of the field is the red channel, green is the time derivative of the value\n\nfloat LaplacianOperator(vec2 pos)\n{\n    vec4 a = F(pos);\n\tvec4 a00 = F(pos + vec2(-1,0));\n    vec4 a10 = F(pos + vec2(1,0));\n    vec4 a01 = F(pos + vec2(0,1));\n    vec4 a11 = F(pos + vec2(0,-1));\n \n\treturn (a00.x+a10.x+a01.x+a11.x-4.f*a.x)/(dx*dx);\n}\n\n\nvoid mainImage( out vec4 field, in vec2 pos)\n{\n    vec4 field_prev = F(pos);\n    float u = field_prev.x;\n    float du_dt = field_prev.y;\n    \n     //leapfrog integration of each point of the field \n    float laplace = LaplacianOperator(pos);\n\tfield.y = du_dt + dt*(laplace - K*sin(2.*PI*u) ); \n\tfield.x = u + dt*field.y + noise_cancl*laplace;\n    \n    //mouse interaction\n     if(iMouse.z>0.)\n        field.x += 0.02*exp(-pow(length(iMouse.xy-pos)/20.,2.));\n    \n  \n    //unused\n    field.z = 0.; \n \tfield.w = 1.;\n}","name":"Buffer C","description":"","type":"buffer"}]}