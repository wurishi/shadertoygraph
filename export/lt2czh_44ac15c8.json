{"ver":"0.1","info":{"id":"lt2czh","date":"1507521390","viewed":147,"name":"hw: Reveal","username":"dianna_cornett","description":"A homework assignment dealing with kernels. Still working out best way to do this.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["practice","homework","kernels"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Dianna Cornett \"Reveal\" assignment showing understanding of image processing kernels\n\n// matrices for kernels go here\nmat3 Sharpen = mat3(\n0, -1, 0,\n-1, 5, -1,\n0, -1, 0\n);\n\nmat3 Blurry = mat3(\n0.111, 0.111, 0.111,\n0.111, 0.111, 0.111,\n0.111, 0.111, 0.111\n);\n\nmat3 Edges = mat3(\n    -1, -1, -1,\n    -1, 8, -1,\n    -1, -1, -1\n );\n\nmat3 Gaussian = mat3(\n    0.0625, 0.125, 0.0625,\n    0.125, 0.25, 0.0625,\n    0.0625, 0.125, 0.0625\n);\n\n\n// VARIABLES TO EDIT AT WILL\n\n//on/off switch for layers\nfloat sharp = 1.0;\nfloat blur = 1.0;\nfloat circle = 1.0;\n//size of reveal circle\nfloat radius = 0.1;\n//which kernels shall we use?\nint whichUnder = 0;\nint whichOver = 3;\n\n vec3 Sampler( int x, int y, in vec2 fragCoord)\n {\n    vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n    uv.y *= iResolution.y / iResolution.x ;\n     \n\tuv = (uv + vec2(x, y)) / iChannelResolution[0].xy ;\n \treturn texture(iChannel0, uv).xyz;\n }\n\n\nvec3 Filter(in vec2 fragCoord, mat3 kernel)\n    {\n    vec3 thefilter= vec3(0.0, 0.0, 0.0);\n        \n\tfor (int i = 0; i < 3; i++)\n \t{\n     for(int j = 0; j < 3; j++)\n     {\n        thefilter += Sampler(i-1,j-1, fragCoord) * kernel[i][j];\n     }\n \t}\n    \n     return thefilter;\n    }\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 mousePos = iMouse.xy;\n    \n    //correction\n    uv.y *= iResolution.y / iResolution.x;\n    \n    mousePos.y *= iResolution.y/iResolution.x;\n    \n \t//mouse circle\n  \n\tvec2 middle = mousePos.xy / iResolution.xy;\n\tvec3 reveal = vec3(smoothstep(length(middle-uv), length(middle-uv) + 0.01, radius));\n    \n    //the textures\n\tvec4 tex1 = texture(iChannel0, uv);\n    vec4 tex2 = texture(iChannel1, uv);\n    \n    \n    //switch statement to determine which kernel to use\n  \n\n\tmat3 underKernel;\n    \n   switch(whichUnder)\n    {\n        case 0:\n        underKernel = Sharpen;\n         break;\n        case 1:\n        \tunderKernel = Blurry;\n        \tbreak;\n        case 2:\n        \tunderKernel = Edges;\n        \tbreak;\n        case 3:\n        \tunderKernel = Gaussian;\n        \tbreak;\n    }\n\n    \n   \tmat3 overKernel;\n    \n   switch(whichOver)\n    {\n        case 0:\n\t\t   overKernel = Sharpen;\n      \t   break;\n        case 1:\n        \toverKernel = Blurry;\n        \tbreak;\n        case 2:\n        \toverKernel = Edges;\n        \tbreak;\n        case 3:\n        \toverKernel = Gaussian;\n        \tbreak;\n    }\n    \n\t//draw layers    \n   \n   \tvec3 revealKernel = Filter(fragCoord, underKernel);\n    vec3 coverKernel = Filter(fragCoord, overKernel);\n   \n    vec4 baseLayer = vec4(tex1);\n    vec4 revealKernelLayer = vec4(revealKernel, sharp);\n    vec4 coverKernelLayer = vec4( coverKernel , blur);\n    vec4 secondTex = vec4(tex2);\n    vec4 circleLayer= vec4(revealKernel, reveal * circle);\n\n\n    //put layers together\n    vec4 Composite = mix(revealKernelLayer,coverKernelLayer, coverKernelLayer.a);\n    \tComposite = mix(Composite, circleLayer, circleLayer.a);\n    \n\tfragColor = Composite;\n    \n}","name":"Image","description":"","type":"image"}]}