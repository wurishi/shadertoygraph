{"ver":"0.1","info":{"id":"WlscR2","date":"1592526834","viewed":192,"name":"Restylized Shoreline","username":"miko3k","description":"based on: https://www.shadertoy.com/view/3dfBzM\n\nremoves certain things I did not understand or found uncessary.\n\nAlso it is infinitely tileable along X-axis. The way the tileability is handled is very questionable, ugly and repeatititve","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["water","stylized","shore"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265369\n\n// Simplex 2D noise\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n    const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod(i, 289.0);\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 ));\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n      dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nvec4 frag(vec4 snd, vec4 wtr, vec4 foamColor, vec2 uv, float time) {\n    float waveHeight = 0.1;\n    float waveSpeed = 4.0;\n    float bubbleSpeed = 1.0;\n    float bubbleWidth = 20.0;\n    float bubbleHeight = 20.0;\n    float shadowHeight = 0.1;\n    float wiggleDistance = 0.1;\n    float center = 0.5;\n\n\tfloat uvy = uv.y - (sin(time) * 0.5 + 0.5) * wiggleDistance - center;\n\tfloat wuvy = uv.y - center - shadowHeight;\n\n\tfloat shore = sin(uv.x * PI * 4. + time*waveSpeed) + sin(uv.x * PI * 2.);\n    \n\tshore = shore * 0.5 + 0.5;\n\tshore *= waveHeight;\n\tfloat smshore = smoothstep( uvy * 5., uvy * 5. + 2.5, shore);\n\n\n\tfloat wshore = smoothstep( wuvy * 5., wuvy * 5., shore);\n\n\tshore = smoothstep( uvy * 5., uvy * 5. + 2., shore);\n\n    // true if we are below the shore\n\tfloat shmsk = step(0.1, shore);\n    \n    float suvx = uv.x + (uv.y * 5.);\n\n\n\tvec4 res = mix(snd, wtr, smshore);\n\n    float foam = snoise(vec2(abs(uv.x-0.5) * bubbleWidth, uvy * bubbleHeight + time * bubbleSpeed)) * 0.3 + 0.5;\n\tfoam = step(shore, foam) * shmsk;\n\n\n    float soff = mix(0.01, 0.2, smoothstep (0.7, 0., uv.y));\n\n\tres *= (1. - wshore * (1. - shmsk) * (sin(time - PI / 2.) * 0.5 + 0.5) * 0.2);\n\n\tres = mix(res, foamColor, foam);\n\n    return res;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec4 wtr = mix(texture(iChannel0, uv), vec4(0.4,0.4,1.0,1.0), .8);\n\tvec4 snd = mix(texture(iChannel1, uv), vec4(0.4,0.5,0.2,1.0), .8);\n    vec4 foamColor = vec4(0.95, 0.95, 1., 1.);\n    \n\tfragColor = frag(snd, wtr, foamColor, uv, iTime);\n}","name":"Image","description":"","type":"image"}]}