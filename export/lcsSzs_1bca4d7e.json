{"ver":"0.1","info":{"id":"lcsSzs","date":"1705616100","viewed":67,"name":"Abstract parallax effect","username":"Zokalyx","description":"inspired by the \"ant highway\" shader of the book of shaders","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["parallax","abstract","pattern","bookofshaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: zokalyx\n// Title: parallax effect\n// Comment: inspired by the \"ant highway\" shader of the book of shaders\n\n#define ROWS 30.0\n#define COLS 30.0\n#define LAYERS 5.0\n#define DENSITY 0.4\n#define SEED 42.0\n\n// https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\nfloat rand(vec2 co){\n    return fract(sin(dot(co + SEED, vec2(12.9898, 78.233))) * 43758.5453);\n}\nfloat rand(float c){\n    return fract(sin(dot(vec2(c + SEED), vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat rect(in vec2 size, in vec2 _st) {\n    vec2 condition = step(_st, 0.5 - 0.5 * size) - step(_st, 0.5 + 0.5 * size);\n    return condition.x * condition.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = fragCoord.xy / iResolution.y;\n\tst *= vec2(COLS, ROWS);\n    \n    float layer = floor( LAYERS * rand( floor(st.y) ) ) + 1.0;\n    \n    st.x += (3.0 * layer - 2.0) * iTime;\n    float show = step(1.0 - DENSITY, rand(floor(st)));\n    \n    st = fract(st);\n\n    vec3 color = (layer / LAYERS) * mod(vec3(layer), vec3(1.0, 4.0, 6.0)) * show * rect(vec2(layer / LAYERS - 0.1, layer / LAYERS - 0.1), st);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}