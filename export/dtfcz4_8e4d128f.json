{"ver":"0.1","info":{"id":"dtfcz4","date":"1690482791","viewed":76,"name":"Hepatitis B Compofiller","username":"Virgill","description":"Alter!Krass! @ Evoke 2023\n\nFor Triace <3\n","likes":3,"published":1,"flags":96,"usePreview":0,"tags":["experiment","light","volumetric","glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MdcGWH","filepath":"https://soundcloud.com/deejay-arvy/triace-hepatitis-b","previewfilepath":"https://soundcloud.com/deejay-arvy/triace-hepatitis-b","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ***********************************************************\n// Hepatitis B 4k intro compo filler @ Evoke 2023\n// by Jochen \"Virgill\" Feldkötter + Triace/Desire\n// ***********************************************************\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 uv = (fragCoord.xy/iResolution.xy)*vec2(1.0,-1.0);\n    fragColor = texture(iChannel0, uv);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n// ***********************************************************\n// Hepatitis B 4k intro compo filler @ Evoke 2023\n// by Jochen \"Virgill\" Feldkötter + Triace/Desire\n// ***********************************************************\n\n#define PI 3.1415\nfloat beat = 1.4;\nvec3 lightpos1, lightpos2, lightpos3, lightpos4, schein1, schein2, schein3, schein4 = vec3(0);\nfloat scatter1, scatter2, scatter3, scatter4 = 0.;\nfloat amp1 = .9;\nfloat amp2 = .9;\nfloat amp3 = .9;\nfloat amp4 = .9;\nfloat bounce, mosaic = 0.;\nvec3 data[4] = vec3[4](\n\tvec3(sqrt(8. / 9.), 0., -1. / 3.), \n\tvec3(-sqrt(2. / 9.), sqrt(2. / 3.), -1. / 3.),\n\tvec3(0, 0, 1),\n\tvec3(-sqrt(2. / 9.), -sqrt(2. / 3.), -1. / 3.)\n\t);\n\n\nfloat fTetrahedron(vec3 p, float r)\n{\n\tfloat d = 0.;\n\tfor (int i = 0; i < 4; ++i)\n\t\td = max(d, dot(p, data[i]));\n\treturn d - r - .04;\n}\n\nfloat sdCylinder(vec3 p, vec3 c)\n{\n\treturn length(p.xz - c.xy) - c.z;\n}\n\nfloat sdRoundBox(vec3 p, vec3 b, float r)\n{\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, 0.0)) - r;\n}\n\nfloat rnd(vec2 co)\n{\n\treturn fract(sin(dot(co.xy, vec2(12.98, 78.23))) * 43758.54);\n}\n\n// 3D noise function (IQ, Shane)\nfloat noise(vec3 p)\n{\n\tvec3 ip = floor(p);\n\tp -= ip;\n\tvec3 s = vec3(7, 157, 113);\n\tvec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n\tp = p * p*(3. - 2.*p);\n\th = mix(fract(sin(h)*43758.5), fract(sin(h + s.x)*43758.5), p.x);\n\th.xy = mix(h.xz, h.yw, p.y);\n\treturn mix(h.x, h.y, p.z);\n}\n\nfloat sdCone(vec3 p, vec2 c)\n{\n\tfloat q = length(p.xy);\n\treturn dot(c, vec2(q, p.z));\n}\n\nvoid pR(inout vec2 p, float a)\n{\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat map(in vec3 p)\n{\n\t// background\n\tfloat noisy = 0.08*fract(-beat * iTime)*noise(20.*p + iTime);\n\tfloat d = 1.;\n\tif (mod(iTime*beat, 16.) > 8. || iTime * beat > 32.)\n\t\td = p.y - .5*log(1.*pow(length(p.xz), 1.) + 0.1) + noisy;\n\n\tvec3 q = p;\n\tq.y -= .4 + 0.2*sin(2.*iTime*beat);\n\tpR(q.xy, iTime);\n\tpR(q.yz, 0.7*iTime);\n\n\tif (iTime*beat > 16.&& iTime*beat <= 72.)\n\t{\n\t\t// sphere\n\t\tvec3 r = p;\n\t\tr.y -= 0.3;\n\t\tif (iTime*beat < 32.)\n\t\t{\n\t\t\td = min(d, length(r) - 0.45);\n\t\t}\n\n\t\telse\n\t\t{\n\t\t\tif (mod(iTime*beat, 16.) > 8.)\n\t\t\t{\n\t\t\t\t// tetrahedron\n\t\t\t\td = min(d, fTetrahedron(q, 0.2));\n\t\t\t\td = min(d, fTetrahedron(-q, 0.2));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// cube\n\t\t\t\td = min(d, sdRoundBox(q, vec3(.4 - .5*mod(q.x, 0.1)), 0.05));\n\t\t\t}\n\t\t}\n\n\t}\n\t// cylinder\n\tif (iTime*beat > 72.)\n\td = min(d, sdCylinder(p, vec3(0. + 0.1*sin(5.*p.y + iTime), 0., .4 + 0.03*sin(20.*p.y - 10.*iTime)) + 0.03*noise(10.*p)));\n\n\n\tschein1 = (p - lightpos1);\n\tschein2 = (p - lightpos2);\n\tschein3 = (p - lightpos3);\n\tschein4 = (p - lightpos4);\n\tpR(schein1.zy, 2.*sin(1.0*iTime)); \n\tpR(schein4.zy, 2.*sin(1.0*iTime) + PI); \n\tpR(schein1.zx, sin(1.5*iTime)); \n\tpR(schein4.zx, -sin(1.5*iTime)); \n\tpR(schein2.zy, 2.*sin(1.0*iTime));\n\tpR(schein3.zy, 2.*sin(1.0*iTime) + PI); \n\tpR(schein2.zx, sin(1.5*iTime)); \n\tpR(schein3.zx, -sin(1.5*iTime)); \n\tfloat s1 = sdCone(schein1, normalize(vec2(1.0, amp1))) / length(schein1*schein1);\n\tfloat s2 = sdCone(schein2, normalize(vec2(1.0, amp2))) / length(schein2*schein2);\n\tfloat s3 = sdCone(schein3, normalize(vec2(1.0, amp3))) / length(schein3*schein3);\n\tfloat s4 = sdCone(schein4, normalize(vec2(1.0, amp4))) / length(schein4*schein4);\n\tscatter1 += max(-s1, 0.)*0.2; \n\tscatter2 += max(-s2, 0.)*0.2; \n\tscatter3 += max(-s3, 0.)*0.2; \n\tscatter4 += max(-s4, 0.)*0.2; \n\tfloat f = length(p - lightpos1) - 0.1;\n\tf = min(f, length(p - lightpos2) - 0.1);\n\tf = min(f, length(p - lightpos3) - 0.1);\n\tf = min(f, length(p - lightpos4) - 0.1);\n\treturn min(f, d);\n}\n\n\nvec3 calcNormal(vec3 pos)\n{\n\tfloat eps = 0.0002, d = map(pos);\n\treturn normalize(vec3(map(pos + vec3(eps, 0, 0)) - d, map(pos + vec3(0, eps, 0)) - d, map(pos + vec3(0, 0, eps)) - d));\n}\n\n\nfloat castRay(in vec3 ro, in vec3 rd, in float maxt, in vec2 co) {\n\n\tfloat precis = 0.001;\n\tfloat h = precis * 2.0;\n\tfloat t = -3.5 + rnd(co + 0.01*iTime)*7.;\n\tfor (int i = 0; i < 200; i++)\n\t{\n\t\tif (abs(h) < precis || t > maxt) break;\n\t\th = map(ro + rd * t);\n\t\tt += 0.5*h;\n\t}\n\treturn t;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tif (iTime*beat > 32.&&iTime*beat<80.)\n\t{\n\t\tbounce = (fract(0.125*(beat*iTime - 5.)) >= 0.875) ? fract(-iTime * beat)*0.1*sin(30.*iTime*beat) : 0.;\n\t\tmosaic = (fract(0.125*(beat*iTime - 1.)) >= 0.875) ? 0.25*fract(-iTime * beat) : 0.;\n\t}\n\n\tif (iTime*beat < 48.) // Flackerlicht\n\t{\n\t\tamp1 = fract(0.5*iTime*-beat);\n\t\tamp3 = fract(0.5*iTime*-beat + 0.25);\n\t\tamp4 = fract(0.5*iTime*-beat + 0.5);\n\t\tamp2 = fract(0.5*iTime*-beat + 0.75);\n\t}\n\n\t// camera setup (iq)   \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv.x = 1.0 + (mod(gl_FragCoord.x - (iResolution.x / 2.), ((iResolution.x / 4.)* (-.9999 + mosaic) + (iResolution.x / 4.))) - fragCoord.x) / iResolution.x;\n\tuv.y = 1.0 + (mod(gl_FragCoord.y - (iResolution.y / 2.), ((iResolution.y / 4.)* (-.9999 + mosaic) + (iResolution.y / 4.))) - fragCoord.y) / iResolution.y;\n\tvec2 p = uv * 2.0 - 1.0;\n\tp.x *= iResolution.x / iResolution.y;\n\tp.x += bounce;\n\n    // feedbak noise (with buffer a)\n    uv = fragCoord.xy / iResolution.xy;\n   \t//uv.x+=0.005*noise(uv.yxx*32.-iTime)-0.0025;\n   \t//uv.y+=0.005*noise(uv.yxx*32.+iTime)-0.0025; \n    vec3 bufa= texture(iChannel0,uv).xyz;\n\n\n\tfloat theta = 0.;\n\n\tfloat x = 5.0 * cos(theta*0.5);\n\tfloat z = 5.0 * sin(theta*0.5);\n\tvec3 ro = vec3(0.5*x, 4.0, 5.3);\n\n\tvec3 ta = vec3(0.0, 0.25, 0.0);\n\tvec3 cw = normalize(ta - ro);\n\tvec3 cp = vec3(0.0, 1.0, 0.0);\n\tvec3 cu = normalize(cross(cw, cp));\n\tvec3 cv = normalize(cross(cu, cw));\n\tvec3 rd = normalize(p.x * cu + p.y * cv + 7.5 * cw);\n\n\tfloat circ1 = iTime;\n\tfloat circ2 = iTime + 1.57;\n\tif (iTime*beat < 48.) circ2 += 1.57; \n\tfloat stretch = 1.2 + 0.2*sin(iTime);\n\tlightpos1 = vec3(stretch*sin(circ1), 0.5, stretch*cos(circ1));\n\tlightpos2 = vec3(stretch*-sin(circ1), 0.5, stretch*-cos(circ1));\n\tlightpos3 = vec3(stretch*sin(circ2), 0.5, stretch*cos(circ2));\n\tlightpos4 = vec3(stretch*-sin(circ2), 0.5, stretch*-cos(circ2));\n\tvec3 col = vec3(0);\n\tfloat t = castRay(ro, rd, 15.0, uv);\n\tfloat depth = clamp(t / 5. - 1.3, 0., 1.);\n\tif (t > 15.) t = -1000000.;\n\n\tvec3 col1 = vec3(1.0, 0.8, 0.5);\n\tvec3 col2 = vec3(0.5, 0.8, 1.0);\n\tvec3 col3 = vec3(0.8, 1.0, 0.5);\n\tvec3 col4 = vec3(0.8, 0.5, 1.0);\n\n\tif (iTime*beat < 32.) { col4 = col1; col3 = col2; }\n\n\tcol += 0.3*scatter1*col1;\n\tcol += 0.3*scatter2*col2;\n\tcol += 0.3*scatter3*col3;\n\tcol += 0.3*scatter4*col4;\n\n\tfloat fadein = min(0.1*iTime, 1.);\n\tfloat fadeout = min(0.1*(68. - iTime), 1.);\n\tfragColor = vec4((col+0.*bufa)*fadeout*fadein, 0.);\n\n}","name":"Buffer A","description":"","type":"buffer"}]}