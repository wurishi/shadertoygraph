{"ver":"0.1","info":{"id":"mtccRX","date":"1717004841","viewed":45,"name":"VoronoiShader","username":"Plastic","description":"A simple Voronoi noise texture.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noise(vec2 p)\n{\n    vec4 noise = texture(iChannel0, p*0.008);\n    \n    \n    return (noise.x*2.-1.)*2.;\n}\n\nvec3 cell(vec2 pos[10], vec2 uv)\n{\n    float ad = distance(pos[0], uv);\n    float bd = distance(pos[1], uv);\n    float cd = distance(pos[2], uv);\n    float dd = distance(pos[3], uv);\n    float ed = distance(pos[4], uv);\n    float fd = distance(pos[5], uv);\n    float gd = distance(pos[6], uv);\n    float hd = distance(pos[7], uv);\n    float id = distance(pos[8], uv);\n    float jd = distance(pos[9], uv);\n    \n    float final = min(min(min(min(min(min(min(min(min(ad,bd),cd),dd),ed),fd),gd),hd),id),jd);\n\n    \n    if(final == ad)\n    {\n        return vec3(0.53, 0.89, 0.11);\n    }\n    else if(final == bd)\n    {\n        return vec3(0.74, 0.23, 0.98);\n    }\n    else if(final == cd)\n    {\n        return vec3(0.23, 0.76, 0.81);\n    }\n    else if(final == dd)\n    {\n        return vec3(0.67, 0.73, 0.29);\n    }\n    else if(final == ed)\n    {\n        return vec3(0.23, 0.75, 0.47);\n    }\n    else if(final == fd)\n    {\n        return vec3(0.27, 0.56, 0.);\n    }\n    else if(final == gd)\n    {\n        return vec3(1., 0.65, 0.8);\n    }\n    else if(final == hd)\n    {\n        return vec3(0.2, 0.7, 0.4);\n    }\n    else if(final == id)\n    {\n        return vec3(0.26, 0.89, 0.12);\n    }\n    else if(final == jd)\n    {\n        return vec3(0.23, 0.79, 1.);\n    }\n      \n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy * 2. - 1.;\n    \n    uv.x *= iResolution.x/iResolution.y;\n    \n    const float pi = 3.1416;\n\n    vec2 position_buffer[10];\n    \n    position_buffer[0] = vec2(noise(vec2(iTime)), noise(vec2(iTime+5.)));\n    position_buffer[1] = vec2(noise(vec2(iTime-6.)), noise(vec2(iTime-4.)));\n    position_buffer[2] = vec2(noise(vec2(iTime+8.)), noise(vec2(iTime-9.)));\n    position_buffer[3] = vec2(noise(vec2(iTime-2.)), noise(vec2(iTime+6.)));\n    position_buffer[4] = vec2(noise(vec2(iTime-10.)), noise(vec2(iTime+14.)));\n    position_buffer[5] = vec2(noise(vec2(iTime-7.)), noise(vec2(iTime+8.)));\n    position_buffer[6] = vec2(noise(vec2(iTime+1.)), noise(vec2(iTime-3.)));\n    position_buffer[7] = vec2(noise(vec2(iTime+0.6)), noise(vec2(iTime-59.)));\n    position_buffer[8] = vec2(noise(vec2(iTime-2.)), noise(vec2(iTime-16.)));\n    position_buffer[9] = vec2(noise(vec2(iTime+9.)), noise(vec2(iTime-90.)));\n    \n    /*\n    position_buffer[0] = vec2(1.3, 0.5);\n    position_buffer[1] = vec2(-0.5, 1.8);\n    position_buffer[2] = vec2(0.3, 0.6);\n    position_buffer[3] = vec2(0.1, -0.9);\n    position_buffer[4] = vec2(-0.5, 1.);\n    position_buffer[5] = vec2(-1.4, 0.);\n    position_buffer[6] = vec2(-1.4, 0.4);\n    position_buffer[7] = vec2(0., -0.7);\n    position_buffer[8] = vec2(-1.2, 0.4);\n    position_buffer[9] = vec2(0.7, -0.7);\n    */\n    \n    vec2 newuv = vec2(pow(uv.x, 2.), pow(uv.y, 2.));\n    \n    vec3 comp = cell(position_buffer, sin(uv*pi/4.));\n\n    fragColor = vec4(comp, 1.0);\n}","name":"Image","description":"","type":"image"}]}