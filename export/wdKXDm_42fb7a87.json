{"ver":"0.1","info":{"id":"wdKXDm","date":"1590337816","viewed":89,"name":"Coffee Sign","username":"jcf1","description":"For my one true love.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","coffee"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Option to choose one cup to pause on\n#define COFFEE_MUG 0\n#define ESPRESSO_CUP 0\n#define TRAVEL_CUP 0\n#define LATTE_CUP 0\n\n// Option to choose the text color used with cup above\n#define LIGHT_COLOR 0\n#define DARK_COLOR 0\n\n//=========================================================================================================\n\n// \"Bit Packed Sprites 2 (5x7)\" by Flyguy\n// https://www.shadertoy.com/view/llSGRm\n\n#define CHAR_SIZE vec2(6, 7)\n#define CHAR_SPACING vec2(6, 9)\n    \n#define STRWIDTH(c) (c * CHAR_SPACING.x)\n#define STRHEIGHT(c) (c * CHAR_SPACING.y)\n\nvec2 ch_hsh = vec2(10738.0,1134484.0);\nvec2 ch_1 = vec2(274497.0,33308.0);\n\nvec2 ch_exc = vec2(276705.0,32776.0);\nvec2 ch_C = vec2(935172.0,133276.0);\nvec2 ch_E = vec2(2048263.0,1181758.0);\nvec2 ch_F = vec2(2048263.0,1181728.0);\nvec2 ch_O = vec2(935188.0,665756.0);\n\n//Extracts bit b from the given number.\n//Shifts bits right (num / 2^bit) then ANDs the result with 1 (mod(result,2.0)).\nfloat extract_bit(float n, float b) {\n    b = clamp(b,-1.0,22.0);\n\treturn floor(mod(floor(n / pow(2.0,floor(b))),2.0));   \n}\n\nfloat sprite(vec2 spr, vec2 size, vec2 uv) {\n    uv = floor(uv);\n    float bit = (size.x-uv.x-1.0) + uv.y * size.x;\n    \n    bool bounds = all(greaterThanEqual(uv,vec2(0)));\n    bounds = bounds && all(lessThan(uv,size));\n    \n    return bounds ? extract_bit(spr.x, bit - 21.0)+extract_bit(spr.y, bit) : 0.0;\n\n}\n\n//Prints a character and moves the print position forward by 1 character width.\nfloat char(vec2 ch, vec2 uv, vec2 print_pos) {\n    float px = sprite(ch, CHAR_SIZE, uv - print_pos);\n    return px;\n}\n\nfloat Text(vec2 uv, vec2 res, vec2 print_pos) {\n    float col = 0.0;\n    \n    print_pos = vec2(print_pos.x - STRWIDTH(7.0)/2.0,print_pos.y - STRHEIGHT(1.0)/2.0);\n    \n    col += char(ch_C,uv,print_pos);\n    print_pos.x += CHAR_SPACING.x;\n    col += char(ch_O,uv,print_pos);\n    print_pos.x += CHAR_SPACING.x;\n    col += char(ch_F,uv,print_pos);\n    print_pos.x += CHAR_SPACING.x;\n    col += char(ch_F,uv,print_pos);\n    print_pos.x += CHAR_SPACING.x;\n    col += char(ch_E,uv,print_pos);\n    print_pos.x += CHAR_SPACING.x;\n    col += char(ch_E,uv,print_pos);\n    print_pos.x += CHAR_SPACING.x;\n    col += char(ch_exc,uv,print_pos);\n    \n    return col;\n}\n//=========================================================================================================\n\n\n//=========================================================================================================\n//Distance Functions\n//From iq: https://iquilezles.org/articles/distfunctions2d\n\n// Coffee Mug Body\nfloat sdBox( vec2 xy, vec2 pos, vec2 dimentions, float rounding) {\n    vec2 d = abs(xy - pos) - dimentions;\n    return (length(max(d,vec2(0.0))) + min(max(d.x,d.y),0.0) - rounding);\n}\n\n// Travel Cup and Plates\nfloat dot2(in vec2 v ) { return dot(v,v); }\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he, float rounding ) {\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) ) - rounding;\n}\n\n// Espresso Cup Body\nfloat sdParabola( in vec2 pos, in float k ) {\n    pos.x = abs(pos.x);\n    \n    float p = (1.0-2.0*k*pos.y)/(6.0*k*k);\n    float q = -abs(pos.x)/(4.0*k*k);\n    \n    float h = q*q + p*p*p;\n    float r = sqrt(abs(h));\n\n    float x = (h>0.0) ? \n        pow(-q+r,1.0/3.0) - pow(abs(-q-r),1.0/3.0)*sign(q+r) :\n        2.0*cos(atan(r,-q)/3.0)*sqrt(-p);\n    \n    return length(pos-vec2(x,k*x*x)) * sign(pos.x-x) + 0.0;\n}\n\n// Latte Handle\nfloat sdParabola_Side( in vec2 pos, in float k )\n{\n    pos.y = abs(pos.y);\n    pos.x = -pos.x;\n    \n    float p = (1.0-2.0*k*pos.x)/(6.0*k*k);\n    float q = -abs(pos.y)/(4.0*k*k);\n    \n    float h = q*q + p*p*p;\n    float r = sqrt(abs(h));\n\n    float x = (h>0.0) ? \n        pow(-q+r,1.0/3.0) - pow(abs(-q-r),1.0/3.0)*sign(q+r) :\n        2.0*cos(atan(r,-q)/3.0)*sqrt(-p);\n    \n    return length(pos-vec2(x,k*x*x)) * sign(pos.y-x);\n}\n\n// Latte Logo\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    vec2 q = abs(p);\n\n    float h = clamp( (-2.0*ndot(q,b) + ndot(b,b) )/dot(b,b), -1.0, 1.0 );\n    float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );\n    d *= sign( q.x*b.y + q.y*b.x - b.x*b.y );\n    \n\treturn d;\n}\n//=========================================================================================================\n\nvoid steam(vec2 xy, vec2 center, float height, float width, float amplification, float frequency, inout vec3 col) {    \n    vec3 steam_color = vec3(1);\n    \n    float y = abs(center.y - xy.y);\n    if(y > height) {\n        return;\n    }\n    \n    float w = 1.0 - (y / height);\n    \n    float wave = amplification * sin(frequency * (xy.y * 200.0) + (1.5 * iTime));\n    float x = xy.x;\n    if((x < ((center.x + wave) + (width * w))) && (x > ((center.x + wave) - (width * w))) ) {\n        col = vec3(xy.y);\n    }\n    \n    return;\n}\n\n//=========================================================================================================\n//Coffee Mug\n\nfloat coffee_text(vec2 uv, vec2 res, vec2 print_pos) {\n    float col = 0.0;\n    print_pos = vec2(print_pos.x - STRWIDTH(2.0)/2.0,print_pos.y - STRHEIGHT(1.0)/2.0);\n    col += char(ch_hsh,uv,print_pos);\n    print_pos.x += CHAR_SPACING.x;\n    col += char(ch_1,uv,print_pos);\n    return col;\n}\n\nvoid coffee_body(vec2 res, vec2 xy, vec2 pos, vec2 dimentions, vec3 cup_color, inout vec3 col) {\n    float rounding = 0.01;\n    if((sdBox(xy, pos, dimentions, rounding) <= 0.0) && (xy.y <= pos.y + dimentions.y)) {\n     \tcol = cup_color;   \n    }\n}\n\nvoid coffee_handle(vec2 res, vec2 xy, vec2 pos, float in_radius, float out_radius, vec3 cup_color, inout vec3 col) {       \n    if((length((xy - pos) * res) <= out_radius) && (length((xy - pos) * res) >= in_radius) && (xy.x >= pos.x)) {\n    \tcol = cup_color;\n    }\n}\n\nvoid coffee_mug(vec2 res, vec2 xy, vec2 duv, vec2 dres, inout vec3 col) {\n    vec3 cup_color = vec3(0.95);\n    \n    float cup_width  = 0.1;\n    float cup_height = 0.18;\n    \n    vec2 cup_dimentions = vec2(cup_width, cup_height);\n    vec2 cup_position = vec2(0.5, 0.5);\n    \n    float in_radius = res.y * 0.12;\n    float out_radius = res.y * 0.16;\n    vec2 handle_position = cup_position + vec2(cup_width + 0.01, 0.0);\n    \n    coffee_body(res, xy, cup_position, cup_dimentions, cup_color, col);\n    coffee_handle(res, xy, handle_position, in_radius, out_radius, cup_color, col);\n    \n    // \"#1\" Text\n    vec2 text_pos = vec2(dres.x/2.0,dres.y/2.0);\n    col = mix(col,vec3(0),coffee_text(duv,dres,text_pos));\n    \n    // Steam Parameters\n    float height = 0.12;\n    float width = 0.009;\n    float amplification =  0.004;\n    float frequency = 0.3;\n    float vert_offset = 0.31;\n        \n    vec2 steam_pos = vec2(cup_position.x - amplification/2.0,cup_position.y + vert_offset);\n    steam(xy, steam_pos, height, width, amplification, frequency, col);\n    steam_pos = vec2(cup_position.x - amplification/2.0 - cup_width/2.0,cup_position.y + vert_offset);\n    steam(xy, steam_pos, height - 0.02, width, amplification, frequency, col);\n    steam_pos = vec2(cup_position.x - amplification/2.0 + cup_width/2.0, cup_position.y + vert_offset);\n    steam(xy, steam_pos, height - 0.02, width, amplification, frequency, col);\n}\n//=========================================================================================================\n\n//=========================================================================================================\n//Espresso Cup\n\nvoid espresso_body(vec2 res, vec2 xy, vec2 pos, float height, vec3 cup_color, inout vec3 col) {\n    float px =  0.0;\n    float py =  0.0;\n    float pk =  40.0;\n    float bottom = 0.04;\n    \n    float d = sdParabola( (xy - pos), pk );\n    if(d <= 0.0 && xy.y < pos.y + height && xy.y > pos.y + bottom) {\n        col = cup_color;\n    }\n}\n\nvoid espresso_handle(vec2 res, vec2 xy, vec2 pos, float in_radius, float out_radius, vec3 cup_color, inout vec3 col) {\n    if((length((xy - pos) * res) <= out_radius) && (length((xy - pos) * res) > in_radius)) {\n    \tcol = cup_color;   \n    }\n}\n\nvoid espresso_plate(vec2 res, vec2 xy, vec2 pos, vec3 plate_color, inout vec3 col) {\n    // Top of the Plate\n    float r1 = 0.15;\n    float r2 = 0.2;\n    float he = 0.015;\n    float rounding = 0.0;\n    if(sdTrapezoid( xy - pos, r1 , r2, he, rounding) <= 0.0) {\n     \tcol = plate_color;\n        return;\n    }\n    \n    // Bottom of the Plate\n    pos = pos - vec2(0.0,he*2.0);\n    r1 = 0.12;\n    r2 = 0.15;\n    he = 0.015;\n    rounding = 0.0;\n    if(sdTrapezoid( xy - pos, r1 , r2, he, rounding) <= 0.0) {\n     \tcol = plate_color;\n        return;\n    }\n}\n\nvoid espresso_cup(vec2 res, vec2 xy, inout vec3 col) {\n    vec3 cup_color = vec3(1);\n    \n    float cup_height = 0.25;\n    vec2 cup_position = vec2(0.5,0.5 - cup_height/2.0);\n    \n    float handle_in_radius = res.y * 0.03;\n    float handle_out_radius = res.y * 0.06;\n    vec2 handle_position = cup_position + vec2(0.09,2.0*(cup_height/3.0));\n    \n    vec2 plate_position = cup_position + vec2(0.0,0.01);\n    vec3 plate_color = vec3(1);\n    \n    espresso_body(res, xy, cup_position, cup_height, cup_color, col);\n    espresso_handle(res, xy, handle_position, handle_in_radius, handle_out_radius, cup_color, col);\n    espresso_plate(res, xy, plate_position, plate_color, col);\n    \n    // illy\n    vec3 box_color = vec3(0.9,0.0,0.0);\n    vec2 box_pos = cup_position + vec2(0.0,2.0*(cup_height/3.0));\n    vec2 box_dimentions = vec2(0.035 * res.y);\n\tcol = (sdBox(xy * res, box_pos * res, box_dimentions, 1.0) <= 0.0) ? box_color : col;\n    \n    // Steam Parameters\n    float height = 0.1;\n    float width = 0.006;\n    float amplification =  0.008;\n    float frequency = 0.35;\n        \n    vec2 steam_pos = vec2(0.5 - amplification/2.0 - 0.03,0.5 + 0.24);\n    steam(xy, steam_pos, height, width, amplification, frequency, col);\n    steam_pos = vec2(0.5 - amplification/2.0 + 0.03,0.5 + 0.24);\n    steam(xy, steam_pos, height, width, amplification, frequency, col);\n}\n//=========================================================================================================\n\n//=========================================================================================================\n//Travel Cup\n\nbool travel_body(vec2 xy, vec2 pos, vec3 cup_color, inout vec3 col) {\n    float r1 = 0.04;\n    float r2 = 0.08;\n    float he = 0.2;\n    float rounding = 0.0;\n    return sdTrapezoid( xy - pos, r1 , r2, he, rounding) <= 0.0;\n}\n\nbool travel_top(vec2 xy, vec2 pos, vec3 cup_color, inout vec3 col) {\n    float r1 = 0.08;\n    float r2 = 0.07;\n    float he = 0.03;\n    float rounding = 0.01;\n    return sdTrapezoid( xy - pos, r1 , r2, he, rounding) <= 0.0;\n}\n\nvoid travel_cup(vec2 res, vec2 xy, inout vec3 col) {\n    vec3 cup_color = vec3(0.9);\n    vec3 top_color = vec3(0);\n    vec3 sleeve_color = vec3(0.6,0.4,0.2);\n    float radius = res.y*0.06;\n    float sleeve = 0.08;\n    \n    vec2 cup_position = vec2(0.5, 0.5 - 0.02);\n    vec2 top_position = vec2(0.5, 0.5 + 0.22);\n    \n    // Green Circle\n    if(length((xy - cup_position) * res) <= radius) {\n        col = vec3(0.0,0.5,0.0);\n    }else if(travel_body(xy, cup_position, cup_color, col)) {\n        // Brown Sleeve\n        if(abs(cup_position.y - xy.y) <= sleeve) {\n            col = sleeve_color;\n        } else {\n     \t\tcol = cup_color;\n        }\n    } else if(travel_top(xy, top_position, cup_color, col)) {\n        col = top_color;\n    }\n    \n    // Steam Parameters\n    float height = 0.1;\n    float width = 0.008;\n    float amplification =  0.004;\n    float frequency = 0.3;\n        \n    vec2 steam_pos = vec2(0.5 - amplification/2.0,0.5 + 0.365);\n    steam(xy, steam_pos, height, width, amplification, frequency, col);\n\t\n}\n\n//=========================================================================================================\n\n//=========================================================================================================\n//Latte Cup\n\nvoid latte_logo(vec2 res, vec2 xy, vec2 pos, inout vec3 col) {   \n    // Yellow side \n    pos -= vec2(0.0,0.08);\n    vec2 dimentions = vec2(0.05,0.025);\n    if(sdRhombus((xy-pos), dimentions) <= 0.0) {\n     \tcol = vec3(0.8,0.8,0.0);\n    }\n    \n    // Blue Side\n    vec2 p = pos - vec2(0.025,0.040);\n    dimentions = vec2(0.03,0.048);\n   \tfloat a = 0.565;\n    float c = cos(a), s = sin(a);\n    mat2 rot = mat2(c,s,-s,c);\n    if(sdRhombus((xy-p)*rot, dimentions) <= 0.0) {\n     \tcol = vec3(0.2,0.6,1.0);   \n    }\n    \n    // Red Side\n    p = pos - vec2(-0.025,0.040);\n    dimentions = vec2(0.03,0.048);\n   \ta = -0.565;\n    c = cos(a), s = sin(a);\n    rot = mat2(c,s,-s,c);\n    if(sdRhombus((xy-p)*rot, dimentions) <= 0.0) {\n     \tcol = vec3(1.0,0.2,0.0);   \n    }\n}\n\nvoid latte_body(vec2 res, vec2 xy, vec2 pos, vec3 cup_color, inout vec3 col) {\n    float radius = res.y * 0.25;\n   \tif((length((xy - pos) * res) <= radius) && (xy.y <= pos.y) && ((xy * res).y >= (pos.y * res.y - (radius * 0.95)))) {\n   \t\tcol = cup_color;   \n   \t}\n}\n\nvoid latte_handle(vec2 res, vec2 xy, vec2 pos, vec3 cup_color, inout vec3 col) {\n    float px =  0.0;\n    float py =  0.0;\n    float pk = 6.0;\n        \n    float handle_width = 0.02;\n    \n    float d = sdParabola_Side( (xy - pos), pk );\n    float d2 = sdParabola_Side( (xy - pos + vec2(handle_width,0.0)), pk );\n\n    if(((d <= 0.0 && d2 > 0.0) || (xy.y > pos.y + 0.03 && xy.y < pos.y + 0.03 + handle_width && xy.x < pos.x - 0.02)) && xy.y <= pos.y + 0.05 && xy.x <= pos.x && xy.x > 0.55) {\n        col = cup_color;\n    }\n}\n\nvoid latte_plate(vec2 res, vec2 xy, vec2 pos, vec3 plate_color, inout vec3 col) {\n    // Top of the Plate\n    float r1 = 0.1;\n    float r2 = 0.15;\n    float he = 0.015;\n    float rounding = 0.0;\n    if(sdTrapezoid( xy - pos, r1 , r2, he, rounding) <= 0.0) {\n     \tcol = plate_color;\n        return;\n    }\n    \n    // Bottom of the Plate\n    pos = pos - vec2(0.0,he*2.0);\n    r1 = 0.08;\n    r2 = 0.1;\n    he = 0.015;\n    rounding = 0.0;\n    if(sdTrapezoid( xy - pos, r1 , r2, he, rounding) <= 0.0) {\n     \tcol = plate_color;\n        return;\n    }\n}\n\nvoid latte_cup(vec2 res, vec2 xy, vec2 uv, inout vec3 col) {\n   \tvec3 cup_color = vec3(1.0);\n    \n    float cup_height = 0.25;\n    vec2 cup_position = vec2(0.5,0.65);\n    \n    float handle_in_radius = res.y * 0.03;\n    float handle_out_radius = res.y * 0.06;\n    vec2 handle_position = cup_position + vec2(0.21,-0.055);\n    \n    vec2 plate_position = cup_position - vec2(0.0,0.27);\n    vec3 plate_color = vec3(1.0);\n    \n    latte_body(res, xy, cup_position, cup_color, col);\n    latte_handle(res, xy, handle_position, cup_color, col);\n    latte_plate(res, xy, plate_position, plate_color, col);\n    latte_logo(res, xy, cup_position, col);\n    \n    // Steam Parameters\n    float height = 0.13;\n    float width = 0.01;\n    float amplification =  0.016;\n    float frequency = 0.25;\n        \n    vec2 steam_pos = vec2(0.5 - amplification/2.0 - 0.07,0.5 + 0.29);\n    steam(xy, steam_pos, height - 0.03, width, amplification, frequency, col);\n    steam_pos = vec2(0.5 - amplification/2.0 - 0.0,0.5 + 0.29);\n    steam(xy, steam_pos, height, width, amplification, frequency, col);\n    steam_pos = vec2(0.5 - amplification/2.0 + 0.07,0.5 + 0.29);\n    steam(xy, steam_pos, height - 0.03, width, amplification, frequency, col);\n}\n\n\n//=========================================================================================================\n\nvec3 background(vec2 xy, vec2 res) {\n    vec3 col = vec3(0.375,0.25,0.125);\n    float t = smoothstep(1.0,-1.0,sin((xy.y + iTime) * 1.0));\n    col = mix(col*1.1,col*0.9,t);\n    return col;\n}\n\nvoid transition_cup(vec2 xy, vec2 res, float current_time, float transition_time, vec3 col_1, vec3 col_2, inout vec3 col) {   \n\ttransition_time = transition_time / 2.0;\n    \n    vec2 center = vec2(res.x / 2.0, res.y / 2.0);\n    \n    float max_dist = res.y;\n    float min_dist = 0.0;\n\t\n    float dist;\n    \n    // Contracting\n    if(current_time <= transition_time) {\n    \tdist = mix(max_dist, min_dist, current_time / transition_time);\n        if(length(xy - center) <= dist) {\n        \tcol = col_1;\n        }   \n    // Expanding\n    } else {\n        current_time = current_time - transition_time;\n    \tdist = mix(min_dist, max_dist, current_time / transition_time);\n        if(length(xy - center) <= dist) {\n        \tcol = col_2;\n        }   \n    }\n}\n\nvec3 transition_text(vec2 xy, vec2 center, vec2 dimentions, float current_time, float transition_time, vec3 col_1, vec3 col_2) {\n    vec3 col;\n    float t = current_time / transition_time;\n    \n    col = col_1;\n    if(((abs(xy.x - center.x) / dimentions.x) <= t) && ((abs(xy.y - center.y) / dimentions.y) <= t)) {\n    \tcol = col_2;\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Determines size of Text\n    float DOWN_SCALE = iResolution.y * 0.03;\n\tvec2 duv = floor(fragCoord.xy / DOWN_SCALE);\n    vec2 dres = iResolution.xy / DOWN_SCALE;\n\n    // Position Parameters\n    vec2 uv = fragCoord.xy / DOWN_SCALE;\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    vec2 res = iResolution.xy;\n    \n    // Determine size of Text on Coffee Mug\n    DOWN_SCALE = iResolution.y * 0.025;\n\tvec2 duv_coffee = floor(fragCoord.xy / DOWN_SCALE);\n    vec2 dres_coffee = iResolution.xy / DOWN_SCALE;\n   \t    \n    // Parameters for Transitions\n    float display_time = 5.0;\n   \tfloat transition_time = 3.0;\n    float total_time = display_time + transition_time;\n    float current_time = mod(iTime, (total_time * 4.0));\n    float mode = current_time / total_time;\n    \n    //====================================================\n    //Text Parameters\n    \n    vec2 text_pos = vec2(dres.x/2.0,dres.y/2.0 * 0.3);\n    float text_width = STRWIDTH(7.0)/2.0;\n    float text_height = STRHEIGHT(1.0)/2.0;\n    \n    //Text Colors\n    vec3 dark_color = vec3(0.2,0.1,0.0);\n    vec3 light_color = vec3(0.77,0.55,0.33);\n    \n    float pixel = Text(duv,dres,text_pos);\n    //====================================================\n    \n    // Changed here for tranisiton code\n    text_pos = text_pos - vec2(0.0,dres.y/2.0 * 0.03);\n    \n    vec3 col = background(xy,res);\n    vec3 col_1, col_2;\n    col_1 = col;\n    col_2 = col;\n    \n    // Coffee Mug\n    if(mode < 1.0) {\n        if(current_time <= display_time) {\n      \t\tcoffee_mug(res,xy,duv_coffee,dres_coffee,col);\n            col = mix(col,dark_color,pixel);\n        } else {\n            coffee_mug(res,xy,duv_coffee,dres_coffee,col_1);\n            espresso_cup(res,xy,col_2);\n            transition_cup(fragCoord.xy, res, current_time - display_time, transition_time, col_1, col_2, col);\n        \tcol = mix(col,transition_text(uv,text_pos,vec2(text_width,text_height),current_time - display_time,transition_time,dark_color,light_color),pixel);\n        }\n    // Espresso Cup\n    } else if(mode < 2.0) {\n        current_time -= (total_time);\n        if(current_time <= display_time) {\n            espresso_cup(res,xy,col);\n            col = mix(col,light_color,pixel);\n        } else {\n            espresso_cup(res,xy,col_1);\n            travel_cup(res,xy,col_2);\n            transition_cup(fragCoord.xy, res, current_time - display_time, transition_time, col_1, col_2, col);\n            col = mix(col,transition_text(uv,text_pos,vec2(text_width,text_height),current_time - display_time,transition_time,light_color,dark_color),pixel);\n        }\n    // Travel Cup\n    } else if(mode < 3.0) {\n        current_time -= (2.0 * total_time);\n        if(current_time <= display_time) {\n      \t\ttravel_cup(res,xy,col);\n            col = mix(col,dark_color,pixel);\n        } else {\n            travel_cup(res,xy,col_1);\n            latte_cup(res,xy,fragCoord.xy,col_2);\n            transition_cup(fragCoord.xy, res, current_time - display_time, transition_time, col_1, col_2, col);\n            col = mix(col,transition_text(uv,text_pos,vec2(text_width,text_height),current_time - display_time,transition_time,dark_color,light_color),pixel);\n            \n        }\n    // Latte Cup\n    } else {\n        current_time -= (3.0 * total_time);\n        if(current_time <= display_time) {\n            latte_cup(res,xy,fragCoord.xy,col);\n            col = mix(col,light_color,pixel);\n        } else {\n            latte_cup(res,xy,fragCoord.xy,col_1);\n            coffee_mug(res,xy,duv_coffee,dres_coffee,col_2);\n            transition_cup(fragCoord.xy, res, current_time - display_time, transition_time, col_1, col_2, col);\n            col = mix(col,transition_text(uv,text_pos,vec2(text_width,text_height),current_time - display_time,transition_time,light_color,dark_color),pixel);\n            \n        }\n    }\n    \n    // Run if one cup is chosen at the top\n    if( (COFFEE_MUG + ESPRESSO_CUP + TRAVEL_CUP + LATTE_CUP) > 0) {\n        col = background(xy,res);\n        if(COFFEE_MUG != 0) {\n            coffee_mug(res,xy,duv_coffee,dres_coffee,col);\n        } else if(ESPRESSO_CUP != 0) {\n            espresso_cup(res,xy,col);\n        } else if(TRAVEL_CUP != 0) {\n\t\t\ttravel_cup(res,xy,col);\n        } else {\n            latte_cup(res,xy,fragCoord.xy,col);\n        }\n        \n        if(DARK_COLOR != 0) {\n        \tcol = mix(col,dark_color,pixel);\n        } else {\n            col = mix(col,light_color,pixel);\n        }\n    }\n    \n    fragColor = vec4(vec3(col), 1.0);\n}","name":"Image","description":"","type":"image"}]}