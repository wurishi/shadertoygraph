{"ver":"0.1","info":{"id":"NdcyDM","date":"1653584125","viewed":107,"name":"Volumetric cosmos","username":"the_last_willy","description":"I've been wanting to try some kind of volumetric rendering. I set a time limit of a single day to do this. This was not quite what I had in mind but I'm happy with the result.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sun","cloud","color","star","space","planet","volumetric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// MIT License\n// Copyright (c) 2022 Willy Jacquet\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// `https://github.com/the-last-willy/shadertoy`\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n// Common functions.\n\nfloat sphere_distance(vec3 p) {\n    return length(p);\n}\n\nvec3 rotated_x(float a, vec3 p) {\n    float ca = cos(a);\n    float sa = sin(a);\n    return vec3(p.x, ca * p.y + sa * p.z, -sa * p.y + ca * p.z);\n}\n\nvec3 rotated_y(float a, vec3 p) {\n    float ca = cos(a);\n    float sa = sin(a);\n    return vec3(ca * p.x - sa * p.z, p.y, sa * p.x + ca * p.z);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n// Spheres.\n// Defining all three objects properties here.\n\n// 4D noise (3D + time) is used as a texture for the sphere\n// as well as a sort of density of matter going outward of the spheres.\n\nvec3 sphere_0_position() {\n    return vec3(0.);\n}\n\nfloat sphere_0_radius() {\n    return 1.;\n}\n\nvec3 sphere_0_color(vec3 p) {\n    vec2 xy = p.xy - sphere_0_position().xy;\n    float ang = atan(xy.y, xy.x);\n    vec3 pal = trig_palette(vec3(.8, .2, .2), vec3(.2, .2, .2), vec3(1., 1., 1.),vec3(.0,.33,.67), ang / tau);\n    return mix(vec3(1., 0., 0.), pal, min(length(xy), 1.));\n    \n}\n\nfloat sphere_0_density(vec3 p) {\n    vec3 d = sphere_0_position() - p;\n    float l = length(d);\n    vec3 q = sphere_0_radius() * normalize(d);\n    return abs(snoise(iChannel0, q * 2., iTime / 5. - l));\n}\n\nfloat sphere_0_distance(vec3 p) {\n    return sphere_distance(p - sphere_0_position()) - 1.;\n}\n\nvec3 sphere_1_position() {\n    return rotated_y(iTime, vec3(3, 0., 0.));\n}\n\nfloat sphere_1_radius() {\n    return 1.;\n}\n\nvec3 sphere_1_color(vec3 p) {\n    vec2 xy = p.xy - sphere_1_position().xy;\n    float ang = atan(xy.y, xy.x);\n    vec3 pal = trig_palette(vec3(.2, .6, .3), vec3(.2, .2, .3), vec3(1., 1., 1.),vec3(.0,.33,.67), ang / tau);\n    return mix(vec3(0., 1., 0.), pal, min(length(xy), 1.));\n}\n\nfloat sphere_1_density(vec3 p) {\n    vec3 d = sphere_1_position() - p;\n    float l = length(d);\n    vec3 q = sphere_1_radius() * normalize(d);\n    return abs(snoise(iChannel0, q * 1.5, iTime / 5. - l));\n}\n\nfloat sphere_1_distance(vec3 p) {\n    return sphere_distance(p - sphere_1_position()) - 1.f;\n}\n\nvec3 sphere_2_position() {\n    return rotated_y(iTime / 1.7, vec3(6., 0., 0.));\n}\n\nfloat sphere_2_radius() {\n    return 1.;\n}\n\nvec3 sphere_2_color(vec3 p) {\n    vec2 xy = p.xy - sphere_2_position().xy;\n    float ang = atan(xy.y, xy.x);\n    vec3 pal = trig_palette(vec3(.4, .2, .7), vec3(.2, .2, .3), vec3(1., 1., 1.),vec3(.0,.33,.67), ang / tau);\n    return mix(vec3(0., 0., 1.), pal, min(length(xy), 1.));\n}\n\nfloat sphere_2_density(vec3 p) {\n    vec3 d = sphere_2_position() - p;\n    float l = length(d);\n    vec3 q = sphere_2_radius() * normalize(d);\n    return abs(snoise(iChannel0, q, iTime / 5. - l));\n}\n\nfloat sphere_2_distance(vec3 p) {\n    return sphere_distance(p - sphere_2_position()) - 1.f;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Scene.\n\nfloat scene_distance(vec3 p) {\n    float s0 = sphere_0_distance(p);\n    float s1 = sphere_1_distance(p);\n    float s2 = sphere_2_distance(p);\n    return min(s0, min(s1, s2));\n}\n\nvec3 scene_color(vec3 p) {\n    // Returns the color of the closest object.\n\n    float s0 = sphere_0_distance(p);\n    float s1 = sphere_1_distance(p);\n    float s2 = sphere_2_distance(p);\n    \n    if(s0 < s1) {\n        if(s0 < s2) {\n            return sphere_0_color(p);\n        } else {\n            return sphere_2_color(p);\n        }\n    } else {\n        if(s1 < s2) {\n            return sphere_1_color(p);\n        } else {\n            return sphere_2_color(p);\n        }\n    }\n}\n\nfloat scene_density(vec3 p) {\n    // This function is discontinuous.\n    // This causes some artifacts.\n    // A bit too much stuff to rewrite to fix it...\n\n    float s0 = sphere_0_distance(p);\n    float s1 = sphere_1_distance(p);\n    float s2 = sphere_2_distance(p);\n    \n    if(s0 < s1) {\n        if(s0 < s2) {\n            return sphere_0_density(p);\n        } else {\n            return sphere_2_density(p);\n        }\n    } else {\n        if(s1 < s2) {\n            return sphere_1_density(p);\n        } else {\n            return sphere_2_density(p);\n        }\n    }\n}\n\nvec4 scene_halo(vec3 p, vec3 d) {\n    // Bunch of magic constants here that wre chosen empirically to look good.\n    // Could use some factoring as well...\n\n    float sd0 = 2. * sphere_0_distance(p) / 1.8;\n    vec3 v0 = p - sphere_0_position();\n    float a0 = 2. / (1. + sd0 * sd0 * sd0);\n    \n    float sd1 = 2. * sphere_1_distance(p) / 1.8;\n    vec3 v1 = p - sphere_1_position();\n    float a1 = 2. / (1. + sd1 * sd1 * sd1);\n    \n    float sd2 = 2. * sphere_2_distance(p) / 1.8;\n    vec3 v2 = p - sphere_2_position();\n    float a2 = 2. / (1. + sd2 * sd2 * sd2);\n    \n    float sum_a = a0 + a1 + a2;\n    vec3 rgb = (a0 * sphere_0_color(p) + a1 * sphere_1_color(p) + a2 * sphere_2_color(p)) / sum_a;\n    float a = 1. - (1. - a0) * (1. - a1) * (1. - a2);\n    \n    float density = .2 + .8 * scene_density(p);\n    \n    return vec4(rgb, density * a);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\nvoid mainImage(out vec4 rgba, in vec2 coords) {\n    // Normalized device coordinates and aspect ratio (FOV 90).\n    coords = (2. * coords.xy - iResolution.xy) / iResolution.x;\n    \n    vec3 ro = vec3(0., 3., -10.); // Ray origin.\n    vec3 rd = rotated_x(-0.2, normalize(vec3(coords.xy, 1.))); // Ray direction.\n    \n    vec4 halo = vec4(0.);\n    \n    for(int i = 0; i < 150; ++i) {\n        // The step distance is upper bounded to ensure visual continuity in the halo.\n        float sd = min(scene_distance(ro), 0.25);\n        \n        // Advances the ray.\n        ro += sd * rd;\n        \n        if(sd < 0.01) {\n            break;\n        } else {\n            // Integrates the density as the ray marches.\n            // The result is accumulated with regular blending.\n            // Aplha is premultiplied in the halo color.\n            vec4 halo_i = scene_halo(ro, rd);\n            halo += (1. - halo.a) * sd * vec4(halo_i.rgb * halo_i.a, halo_i.a);\n        }\n    }\n    \n    // Took some stars from another shader to have a less boring background.\n    vec3 rgb = vec3(StableStarField(1000. * (coords + vec2(1.)), .97));\n    \n    // That doesn't make much sense but it somehow checks that we're before the far plane or smth.\n    float d = length(ro);\n    if(d < 20.) {\n        // Adds texture to the object, overriding the backgroud. \n        float noi =  scene_density(ro);\n        noi = pow(noi, 1. / 5.);\n        rgb = mix(scene_color(ro), vec3(1.), noi);\n    }\n    \n    // Composites the halo into the image.\n    rgba = vec4(halo.rgb + (1. - halo.a) * rgb, 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float pi = 3.14159265359;\nconst float tau = 2. * pi;\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n// External\n\n////////////////////////////////////////////////////////////////////////////////\n// 4D noise.\n// Taken from 'https://www.shadertoy.com/view/wd3czs'.\n\nfloat snoise(sampler3D channel, vec3 uvw, float time)\n{\n    vec4 p4 = uvw.x * vec4(-0.5,-0.5, 0.5, 0.5) +\n              uvw.y * vec4( 0.5,-0.5,-0.5, 0.5) +\n              uvw.z * vec4(-0.5, 0.5,-0.5, 0.5);\n    \n    p4 += time;\n    \n    vec4 ip = floor(p4);\n    vec4 fp = p4 - ip;\n\n   #if 0\n    fp = (fp * fp * fp) * (10.0 + fp * (-15.0 + 6.0 * fp));\n   #else\n    fp = fp * fp * (3.0 - 2.0 * fp);\n   #endif\n\n\tconst float pi = 3.14159265359;\n    const float texDim = 32.0;\n    const float txlDim = 1.0 / texDim;\n    const vec3 phi = vec3(27.0, 21.0, 17.0);\n    const float o0 =        0.5  * txlDim;\n    const vec3  o1 = (phi + 0.5) * txlDim;\n\n    vec3 p3 = phi * ip.w + (ip.xyz + fp.xyz);\n    \n    vec4 n = mix(textureLod(channel, p3 * txlDim + o0, 0.0), \n                 textureLod(channel, p3 * txlDim + o1, 0.0), fp.w) * 2.0 - 1.0;\n\n    return dot(n, sin(p4 * pi)) / pi;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Starfield.\n// Taken from 'https://www.shadertoy.com/view/Md2SR3'.\n\n// Return random noise in the range [0.0, 1.0], as a function of x.\nfloat Noise2d( in vec2 x )\n{\n    float xhash = cos( x.x * 37.0 );\n    float yhash = cos( x.y * 57.0 );\n    return fract( 415.92653 * ( xhash + yhash ) );\n}\n\n// Convert Noise2d() into a \"star field\" by stomping everthing below fThreshhold to zero.\nfloat NoisyStarField( in vec2 vSamplePos, float fThreshhold )\n{\n    float StarVal = Noise2d( vSamplePos );\n    if ( StarVal >= fThreshhold )\n        StarVal = pow( (StarVal - fThreshhold)/(1.0 - fThreshhold), 6.0 );\n    else\n        StarVal = 0.0;\n    return StarVal;\n}\n\n// Stabilize NoisyStarField() by only sampling at integer values.\nfloat StableStarField( in vec2 vSamplePos, float fThreshhold )\n{\n    // Linear interpolation between four samples.\n    // Note: This approach has some visual artifacts.\n    // There must be a better way to \"anti alias\" the star field.\n    float fractX = fract( vSamplePos.x );\n    float fractY = fract( vSamplePos.y );\n    vec2 floorSample = floor( vSamplePos );    \n    float v1 = NoisyStarField( floorSample, fThreshhold );\n    float v2 = NoisyStarField( floorSample + vec2( 0.0, 1.0 ), fThreshhold );\n    float v3 = NoisyStarField( floorSample + vec2( 1.0, 0.0 ), fThreshhold );\n    float v4 = NoisyStarField( floorSample + vec2( 1.0, 1.0 ), fThreshhold );\n\n    float StarVal =   v1 * ( 1.0 - fractX ) * ( 1.0 - fractY )\n        \t\t\t+ v2 * ( 1.0 - fractX ) * fractY\n        \t\t\t+ v3 * fractX * ( 1.0 - fractY )\n        \t\t\t+ v4 * fractX * fractY;\n\treturn StarVal;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Trigonometric color palette.\n// Taken from 'https://iquilezles.org/articles/palettes/'.\n\nvec3 trig_palette(vec3 a, vec3 b, vec3 c, vec3 d, float t) {\n    return a + b*cos( (tau*c*t+d) );\n}\n","name":"Common","description":"","type":"common"}]}