{"ver":"0.1","info":{"id":"lldcRM","date":"1532079414","viewed":173,"name":"Wave Equation : Higher Order","username":"Gijs","description":"Worked out a numerical integration method that uses the last __four__ states to calculate the next that has a local truncation error of O(dt^5). Derivation can be found here : https://imgur.com/Mq6E5Lm . Use your mouse.","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["wave","numerical","equation","order","integration"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tfragColor = texture(iChannel0,fragCoord.xy / iResolution.xy)*.5+.5;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//in which BufA is t-3dt, BufB is t-2dt, BufC is t-dt, BufD is t and BufA becomes t+dt\n\nvec4 getX(sampler2D g, vec2 p){\n    return texture(g,p/iResolution.xy);\n}\n\nvec4 getA(sampler2D g, vec2 p){\n    vec4 middle    = getX(g,p);   \t\n    vec4 up        = getX(g,p+vec2( 0, 1));\n    vec4 down      = getX(g,p+vec2( 0,-1));\n    vec4 right     = getX(g,p+vec2( 1, 0));\n    vec4 left      = getX(g,p+vec2(-1, 0));\n    vec4 upright   = getX(g,p+vec2( 1, 1));\t\n    vec4 upleft    = getX(g,p+vec2(-1, 1));\n    vec4 downright = getX(g,p+vec2( 1,-1));\n    vec4 downleft  = getX(g,p+vec2(-1,-1));\n        \n   \treturn (-8.*middle + up + left + right + down + upright + upleft + downright + downleft)/(3.*dx*dx);  \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 a   = getA(iChannel3,fragCoord);\n    vec4 dt3 = getX(iChannel0,fragCoord);\n    vec4 dt2 = getX(iChannel1,fragCoord);\n    vec4 dt1 = getX(iChannel2,fragCoord);\n    vec4 dt0 = getX(iChannel3,fragCoord);\n    \n    fragColor = 20./11.*dt0 + 1./11.*dt3 - 4./11.*dt2 - 6./11.*dt1 + 12./11.*dt*dt*a;\n\tfragColor *= 0.999;\n    if(iMouse.z>0. && distance(fragCoord,iMouse.xy)<10.) fragColor = vec4(1.);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 getX(sampler2D g, vec2 p){\n    return texture(g,p/iResolution.xy);\n}\n\nvec4 getA(sampler2D g, vec2 p){\n    vec4 middle    = getX(g,p);   \t\n    vec4 up        = getX(g,p+vec2( 0, 1));\n    vec4 down      = getX(g,p+vec2( 0,-1));\n    vec4 right     = getX(g,p+vec2( 1, 0));\n    vec4 left      = getX(g,p+vec2(-1, 0));\n    vec4 upright   = getX(g,p+vec2( 1, 1));\t\n    vec4 upleft    = getX(g,p+vec2(-1, 1));\n    vec4 downright = getX(g,p+vec2( 1,-1));\n    vec4 downleft  = getX(g,p+vec2(-1,-1));\n        \n   \treturn (-8.*middle + up + left + right + down + upright + upleft + downright + downleft)/(3.*dx*dx);  \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 a   = getA(iChannel3,fragCoord);\n    vec4 dt3 = getX(iChannel0,fragCoord);\n    vec4 dt2 = getX(iChannel1,fragCoord);\n    vec4 dt1 = getX(iChannel2,fragCoord);\n    vec4 dt0 = getX(iChannel3,fragCoord);\n    \n    fragColor = 20./11.*dt0 + 1./11.*dt3 - 4./11.*dt2 - 6./11.*dt1 + 12./11.*dt*dt*a;\n    fragColor *= 0.999;\n    if(iMouse.z>0. && distance(fragCoord,iMouse.xy)<10.) fragColor = vec4(1.);\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec4 getX(sampler2D g, vec2 p){\n    return texture(g,p/iResolution.xy);\n}\n\nvec4 getA(sampler2D g, vec2 p){\n    vec4 middle    = getX(g,p);   \t\n    vec4 up        = getX(g,p+vec2( 0, 1));\n    vec4 down      = getX(g,p+vec2( 0,-1));\n    vec4 right     = getX(g,p+vec2( 1, 0));\n    vec4 left      = getX(g,p+vec2(-1, 0));\n    vec4 upright   = getX(g,p+vec2( 1, 1));\t\n    vec4 upleft    = getX(g,p+vec2(-1, 1));\n    vec4 downright = getX(g,p+vec2( 1,-1));\n    vec4 downleft  = getX(g,p+vec2(-1,-1));\n        \n   \treturn (-8.*middle + up + left + right + down + upright + upleft + downright + downleft)/(3.*dx*dx);  \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 a   = getA(iChannel3,fragCoord);\n    vec4 dt3 = getX(iChannel0,fragCoord);\n    vec4 dt2 = getX(iChannel1,fragCoord);\n    vec4 dt1 = getX(iChannel2,fragCoord);\n    vec4 dt0 = getX(iChannel3,fragCoord);\n    \n    fragColor = 20./11.*dt0 + 1./11.*dt3 - 4./11.*dt2 - 6./11.*dt1 + 12./11.*dt*dt*a;\n\tfragColor *= 0.999;\n    if(iMouse.z>0. && distance(fragCoord,iMouse.xy)<10.) fragColor = vec4(1.);\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"vec4 getX(sampler2D g, vec2 p){\n    return texture(g,p/iResolution.xy);\n}\n\nvec4 getA(sampler2D g, vec2 p){\n    vec4 middle    = getX(g,p);   \t\n    vec4 up        = getX(g,p+vec2( 0, 1));\n    vec4 down      = getX(g,p+vec2( 0,-1));\n    vec4 right     = getX(g,p+vec2( 1, 0));\n    vec4 left      = getX(g,p+vec2(-1, 0));\n    vec4 upright   = getX(g,p+vec2( 1, 1));\t\n    vec4 upleft    = getX(g,p+vec2(-1, 1));\n    vec4 downright = getX(g,p+vec2( 1,-1));\n    vec4 downleft  = getX(g,p+vec2(-1,-1));\n        \n   \treturn (-8.*middle + up + left + right + down + upright + upleft + downright + downleft)/(3.*dx*dx);  \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 a   = getA(iChannel3,fragCoord);\n    vec4 dt3 = getX(iChannel0,fragCoord);\n    vec4 dt2 = getX(iChannel1,fragCoord);\n    vec4 dt1 = getX(iChannel2,fragCoord);\n    vec4 dt0 = getX(iChannel3,fragCoord);\n    \n    fragColor = 20./11.*dt0 + 1./11.*dt3 - 4./11.*dt2 - 6./11.*dt1 + 12./11.*dt*dt*a;\n    fragColor *= 0.999;\n    if(iMouse.z>0. && distance(fragCoord,iMouse.xy)<10.) fragColor = vec4(1.);\n}","name":"Buf D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float dx = 0.2;\nconst float dt = 0.1;","name":"Common","description":"","type":"common"}]}