{"ver":"0.1","info":{"id":"XtXSWs","date":"1440418355","viewed":3043,"name":"webcam is a scary tool publicint","username":"public_int_i","description":"kfgkshnfkshkfjh","likes":34,"published":3,"flags":2,"usePreview":0,"tags":["slsngkdn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","previewfilepath":"/media/ap/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","type":"cubemap","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FOV_SCALE .5\n#define ITER 96\n#define EPSILON .03\n#define NORMAL_EPSILON .02\n#define CAMERA_SPEED .5\n\n#define NO_SHADING\n#define SHADOW\n\nconst vec3 ambient = vec3(.7);\nconst vec3 diffuse = vec3(.3);\nconst float minBright = 0.3;\nconst float intensity = 7.;\n\n\nfloat ground(in vec3 rp) {\n    \n    float d = rp.y;\n    \n/*    float intensity = ((cos(rp.x*4.)*.3+cos(rp.z*4.)*.3)+\n                       (cos(rp.x*.45345)+cos(rp.z*.4324)) + 4.)*1.;*/\n    //if (length(max(abs(rp.xz)-vec2(5.),0.)) < 0.001) \n        d -= max(0.,length(texture(iChannel0,rp.xz*0.1).xyz)-minBright)*intensity;\n        \n    return d*(1./intensity);\n}\n\nfloat df(in vec3 rp) {\n\n    return ground(rp);\n}\nconst vec3 ne = vec3(NORMAL_EPSILON,0.,0.);\nvec3 normal(in vec3 rp) {\n    return normalize(vec3(df(rp+ne)-df(rp-ne),\n                          df(rp+ne.yxz)-df(rp-ne.yxz),\n                          df(rp+ne.yzx)-df(rp-ne.yzx)));\n}\n\n\nconst int AO_ITERATIONS= 4;\nconst float AO_PRECISION = 0.2;\nconst float AO_INTENSITY = 0.7;\nconst float AO_ATTEN = 0.5;\n\nfloat ao(in vec3 p, in vec3 norm) {\n\tfloat sum = 0.0;\n\tfloat atten = 1.0;\n\tfloat s = AO_PRECISION;\n    \n    return 1.;\n    \n    float hitDist = 0.0;\n    \n    \n\tfor (int i = 0; i < AO_ITERATIONS; i++) {\n        hitDist = df(p+norm*s);\n\t\tsum += (s-hitDist)*atten;\n\t\ts += AO_PRECISION;\n\n\t\tatten *= AO_ATTEN;\n                     //  if ( i == 1) return atten;\n\n\t}\n    \n    return sum;\n\t\n\treturn 1.0-max(0.0,sum*AO_INTENSITY);\n}\n\n\n               \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - vec2(.5);\n    uv.y *= iResolution.y/iResolution.x;\n\n    float cst = iTime*CAMERA_SPEED;\n    vec3 rp = vec3(5.,15.,4.);\n    vec3 rd = normalize(vec3(uv.x,-1.,uv.y));\n    \n    float d,s = 0.;\n    for (int i = 0; i < ITER; i++) {\n        d = df(rp);\n        if (d < EPSILON || s > 30.) break;\n        \n        rp += d*rd;\n    \ts += d;\n    }\n\n\tif (d > EPSILON) {\n       fragColor = vec4(0.);\n    \treturn;\n\t}\n    \n    \n    vec3 c = texture(iChannel0,rp.xz*0.1).xyz;\n    #ifdef NO_SHADING\n    fragColor = vec4(c,1.);\n    return;\n    #endif\n    \n    vec3 lightPos = vec3(iMouse.x/iResolution.x*10.,10.,iMouse.y/iResolution.y*10.);\n    vec3 n = normal(rp);\n    vec3 ld = -normalize(rp-lightPos);\n    vec3 hp = rp;\n    \n    float sh = 1.;\n    #ifdef SHADOW\n    sh = s = 0.;\n    rp += n*EPSILON;//ld*EPSILON*2.;\n    for (int i = 0; i < ITER; i++) {\n        d = df(rp);\n        if (d < EPSILON || s > 30.) break;\n        \n       sh += max(0.,min(s/abs(ld.y)*.5,.1)-d);\n        rp += ld*d;\n        s += d;\n    }\n    if (d < EPSILON) {\n        sh = 0.;\n    } else {\n        sh = max(0.,1.-sh);\n    }\n    #endif\n    \n    c = ao(hp,n)*ambient*c+\n        \tmax(0.,dot(ld,n))*sh*diffuse*c;\n    \n    fragColor = vec4(c,1.);\n}","name":"Image","description":"","type":"image"}]}