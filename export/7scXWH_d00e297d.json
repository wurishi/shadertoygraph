{"ver":"0.1","info":{"id":"7scXWH","date":"1633027485","viewed":114,"name":"Rain - 1","username":"1rosehip","description":"rain","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["rain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define NUM_LAYERS 5.0\n\n/**\n * create a rotation matrix for the given angle in radians\n */\nmat2 getRotationMatrix(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n\n    return mat2(c, -s,\n                s, c);\n}\n\n/**\n * random that returns float in range [0.0, 1.0]\n */\nfloat random(vec2 pos) {\n    pos = fract(pos * vec2(123.34, 456.21));\n    pos += dot(pos, pos + 45.32);\n    return fract(pos.x * pos.y);\n}\n\n/**\n * scale a range [min,max] to [a,b]\n * f(x) = (b-a)*(x - min)/(max - min) + a\n */\nfloat convertRange(float minimal, float maximal, float a, float b, float x){\n    return (b-a)*(x - minimal)/(maximal - minimal) + a;\n}\n\n/**\n * draw a drop :)\n */\nfloat createDrop(vec2 uv, float width) {\n    \n    float soft = 0.0; //width / 0.5;\n\n    // draw a centered vertical line\n    float drop = smoothstep(0.5 + width, 0.5 + width + soft, uv.x) + smoothstep(uv.x, uv.x + soft, 0.5 - width);\n\n    drop = (1.0 - drop) * (step(0.5, uv.y));\n\n    // make it white\n    return drop;\n}\n\nvec3 createLayer(vec2 uv){\n    \n    vec3 result = vec3(0);\n\n    // create multiple copies of the screen\n    vec2 copies = fract(uv);\n    vec2 index = floor(uv);\n\n    // create a drop\n    float drop = createDrop(copies, 0.005);\n\n    // create a random color\n    float rnd = random(index);\n    vec3 randomColor = sin(vec3(0.349, 0.4039, 1.0) * rnd);\n    \n    // set drop color\n    result = mix(result, randomColor, drop);\n\n    return result;\n}\n\n/*\nfunction easeOutQuart(x: number): number {\n    return 1.0 - pow(1.0 - x, 4.0);\n}   \n*/\n\n/**\n * entry point\n */\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // normalize coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float time = iTime * 3.0;\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // set background color\n    vec3 color = mix(col, vec3(0.0), sqrt(uv.y));\n\n    // rotate the rain ;)\n    mat2 matr = getRotationMatrix(10.0 * 3.14 / 180.0);\n    uv = (matr * (uv - 0.5)) + 0.5;\n\n    for(float i=0.0; i<1.0; i += 1.0 / NUM_LAYERS) {\n        float depth = fract(i) + 0.5;\n\n        // make depth in the required range\n        float scale = mix(15.0, 5.0, depth);\n\n        // create one time\n        vec2 bbb = vec2(0.0, time * depth);\n        vec3 layer = createLayer((uv + bbb) * scale);\n        color = mix(color, vec3(1.0, 1.0, 1.0), layer);\n    }\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}