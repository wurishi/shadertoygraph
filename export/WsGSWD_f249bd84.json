{"ver":"0.1","info":{"id":"WsGSWD","date":"1574029179","viewed":533,"name":"(⚠️Seizure⚠️) Lightning","username":"vegardno","description":"This really needed a seizure warning because I almost had one myself while working on this.\n\nYou may have to start the audio playback manually...\n\nAlso: Completely unoptimised.","likes":12,"published":1,"flags":64,"usePreview":0,"tags":["lightning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xtf3Dl","filepath":"https://soundcloud.com/paul-tobin-6/heavy-thunderstorm-sounds-relaxing-rain-thunder-lightning-ambience-for-sleep-hd-nature-video","previewfilepath":"https://soundcloud.com/paul-tobin-6/heavy-thunderstorm-sounds-relaxing-rain-thunder-lightning-ambience-for-sleep-hd-nature-video","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Set this to 1 to disable the rapid flickering.\n//\n// Useful while working on this to avoid seizing if you\n// increase the frequency or stare at it for too long.\n#define ANTI_SEIZURE 0\n\n// https://stackoverflow.com/a/4275343/1697183\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n// based on sdLine\nfloat sdUnevenCapsule( in vec2 p, in vec2 a, in vec2 b, in float r1, in float r2 )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - mix(r1, r2, h);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.2 * (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\n    // use this  to debug in slow motion :^)\n    float my_iTime = 1. * iTime;    \n\n    // how many times does it strike, on average, per second?\n    float freq = .4;\n    \n    // how fast does it hit the ground?\n    float speed = 8.;\n\n    float t_base = floor(freq * my_iTime);\n    \n    // random offset within time period\n\tfloat t_off = 1. * rand(vec2(t_base, 134.)) / freq;\n    my_iTime += t_off;\n    t_base += t_off;\n\n    vec2 pos = vec2(1. * (2. * rand(vec2(t_base, 995.)) - 1.),\n                    1. + .2 * (2. * rand(vec2(t_base, 46.)) - 1.));\n    float r = .03;\n    float a = radians(270.) + radians(45.) * (2. * rand(vec2(t_base, 13.)) - 1.);\n    \n    float d = 1e10;\n\n    float sum_len = 0.;\n\n#if ANTI_SEIZURE\n\tfloat t = 1.;\n#else\n    float t = speed * (freq * my_iTime - t_base) / freq;\n    if ((t > 1. && t < 1.6) || t > 2.5)\n        t = 0.;\n#endif\n    \n    float len_max = 8. * t;\n\n    // Branches\n    vec2 branch_1_pos;\n    float branch_1_len = 0.;\n    float branch_1_r = 0.;\n\tfloat branch_1_a;\n    \n\tvec2 branch_2_pos;\n    float branch_2_len = 0.;\n    float branch_2_r = 0.;\n\tfloat branch_2_a;\n\n    for (int i = 0; i < 12; ++i) {\n        if (sum_len >= len_max) \n            break;\n        \n        if (i == 3) {\n            branch_1_pos = pos;\n            branch_1_len = sum_len;\n            branch_1_r = .5 * r;\n            branch_1_a = radians(270.) + radians(90.) * (2. * rand(vec2(t_base, 13.)) - 1.);\n        }\n        \n\t\tif (i == 6) {\n            branch_2_pos = pos;\n            branch_2_len = sum_len;\n            branch_2_r = .5 * r;\n            branch_2_a = radians(270.) - radians(90.) * (2. * rand(vec2(t_base, 17.)) - 1.);\n        }\n        \n        float len = .12 + .18 * rand(vec2(300. + float(i) + t_base, 1337.));\n        float a_next = mix(a, radians(270.) + radians(40.) * (2. * rand(vec2(float(300 * i) + t_base, 1337.)) - 1.), .9);\n        \n\t\tvec2 next = pos + len * vec2(cos(a), sin(a));\n        float r_next = .9 * r;\n\n    \td = min(d, sdUnevenCapsule(uv,\n                                   pos, next,\n                                   r, r_next));\n        pos = next;\n        r = r_next;\n        a = a_next;\n        \n        sum_len = sum_len + len;\n\t}\n    \n    for (int i = 0; i < 10; ++i) {\n        if (branch_1_len >= len_max)\n            break;\n        \n\t\tfloat len = .07 + .07 * rand(vec2(300. + float(i) + t_base, 1337.));\n        float a_next = mix(radians(270.), branch_1_a + radians(40.) * (2. * rand(vec2(float(300 * i) + t_base, 1337.)) - 1.), .5);\n        \n\t\tvec2 next = branch_1_pos + len * vec2(cos(branch_1_a), sin(branch_1_a));\n        float r_next = .9 * branch_1_r;\n\n        d = min(d, sdUnevenCapsule(uv, branch_1_pos, next, branch_1_r, r_next));\n\n\t\tbranch_1_pos = next;\n        branch_1_r = r_next;\n        branch_1_a = a_next;\n        \n        branch_1_len += len;\n    }\n    \n    for (int i = 0; i < 10; ++i) {\n        if (branch_2_len >= len_max)\n            break;\n        \n\t\tfloat len = .07 + .07 * rand(vec2(300. + float(i) + t_base, 1337.));\n        float a_next = mix(radians(270.), branch_2_a + radians(40.) * (2. * rand(vec2(float(300 * i) + t_base, 1337.)) - 1.), .5);\n        \n\t\tvec2 next = branch_2_pos + len * vec2(cos(branch_2_a), sin(branch_2_a));\n        float r_next = .9 * branch_2_r;\n\n        d = min(d, sdUnevenCapsule(uv, branch_2_pos, next, branch_2_r, r_next));\n\n\t\tbranch_2_pos = next;\n        branch_2_r = r_next;\n        branch_2_a = a_next;\n        \n        branch_2_len += len;\n    }\n    \n    vec3 sky =\n          // blue\n          .2 * vec3(0, 0, 1) * clamp(sum_len, 0., 1.)\n          // white\n        + .1 * vec3(1, 1, 1) * clamp(sum_len - .8, 0., 1.);\n    \n    fragColor = vec4(sky\n                     + clamp(.9 - sqrt(d + .01), 0., 1.) * sky * max(.9 * uv.y + 2., 0.)\n                     + vec3(smoothstep(.0, -.01, d)), 1.);\n}","name":"Image","description":"","type":"image"}]}