{"ver":"0.1","info":{"id":"lXBGRK","date":"1708631335","viewed":80,"name":"Stylized Blurring","username":"DasBooter","description":"varying pixel sampling distance for bluring","likes":4,"published":1,"flags":48,"usePreview":0,"tags":["blur","relaxing"],"hasliked":0,"parentid":"X3S3RV","parentname":"Hello Buffers"},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795\n//This method takes aspect ratio into account making the stroke circular\nvec2 scaleByResolution(vec2 toScale) {\n    return toScale / min(iResolution.y, iResolution.x);\n}\n//http://dev.thi.ng/gradients/\nvec3 palette( in float t)\n{\n   return vec3(0.500, 0.500, 0.500) + vec3(0.500, 0.500, 0.500)*cos( 6.28318*(vec3(1.000, 1.000, 1.000)*t+vec3(0.000, 0.333, 0.667)) );\n}\nfloat circleIntensity(vec2 cirPosition, float radius) {\n    return pow(abs(min(length(cirPosition),radius) -radius),1./4.) * 3.;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //The bluring uses four cardinal directions and changes the distance for the texture sample over time\n    vec2[4] cardinal = vec2[4](vec2(1,0),vec2(-1,0),vec2(0,-1),vec2(0,1)) ;\n    for (int i = 0; i < 4; i++) {\n        fragColor += texture(iChannel0, (fragCoord + cardinal[i] * ceil((sin(iTime)+1.) * 3.0)) / iResolution.xy) * 0.245;\n    }\n    //set the color of the current pixel to the color in the previous frame\n    vec2 uv = scaleByResolution(fragCoord);\n    vec2 center = scaleByResolution(iResolution.xy/2.0); \n    fragColor += vec4(palette(sin(iTime/20.0))*.5,1.) * circleIntensity(uv-center,0.06);\n    \n    //generate the circles circling the center\n    int numCircles = 12;\n    for(int circle = 1; circle <= numCircles; circle++) {\n        float radius = 0.37 + sin(iTime + float(circle%5)) * .09 - (float(circle%2) *.1);\n        float deg = 2.*M_PI * float(circle)/float(numCircles)+ iTime/2.3;\n        vec2 circlePos = center + vec2(cos(deg),sin(deg)) * radius;\n        fragColor += vec4(palette(sin(iTime/20.0))*.5,1.) * circleIntensity(uv-circlePos,0.02);\n    }\n    fragColor.r = clamp(fragColor.r,0.,1.);\n    fragColor.g = clamp(fragColor.g,0.,1.);\n    fragColor.b = clamp(fragColor.b,0.,1.);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}