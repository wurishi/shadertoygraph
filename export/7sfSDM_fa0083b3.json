{"ver":"0.1","info":{"id":"7sfSDM","date":"1618707339","viewed":72,"name":"Magic pyramid (homework)","username":"annavtkn","description":"Вяткина Анна, группа 319/2\nВариант: Пирамида + Майнкрафт\nРезкие тени от подставки (+1)\nОкружение в виде текстурированного куб-мапа (+2)\nАнти-алиасинг (+2)","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float EPS = 1e-3;\nconst vec3 CAMERA_POS = vec3(-4, 1.2, -6);\n\nvec3 LIGHT1_POS = vec3(-2, 1, 3);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nvec3 LIGHT2_POS = vec3(2, 1, 0);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(1, 1, 0.5);\nvec3 randDir;\n\nvec3 LIGHT3_POS = vec3(0, 0.7, 3);\nconst float LIGHT3_RADIUS = 0.3;\nconst vec3 LIGHT3_COLOR = vec3(1, 0.8, 1);\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 2.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 2.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nstruct Triangle {\n    vec3 pos[3];\n    vec3 normal;\n};\n\nfloat traceTriangle(Triangle t, vec3 origin, vec3 dir, out vec3 normal) {\n\n    vec3 d1 = t.pos[1] - t.pos[0];\n    vec3 d2 = t.pos[2] - t.pos[0];\n    t.normal = normalize(cross(d1, d2));\n    normal = t.normal; \n    \n    \n    float normalViewAngle = dot(dir, t.normal);\n    if (abs(normalViewAngle) < EPS)\n        return INF;\n    float d = dot(t.pos[0] - origin, t.normal) / normalViewAngle;\n    if (d < 0.0)\n        return INF;\n    vec3 hitPos = origin + dir * d;\n    vec3 edges[3] = vec3[3](\n        t.pos[1] - t.pos[0],\n        t.pos[2] - t.pos[1],\n        t.pos[0] - t.pos[2]\n    );\n    float square = length(cross(edges[0], edges[1]));\n    vec3 toHitVecs[3] = vec3[3](\n        hitPos - t.pos[0],\n        hitPos - t.pos[1],\n        hitPos - t.pos[2]\n    );\n    float testSq[3] = float[3](\n        length(cross(toHitVecs[0], edges[0])),\n        length(cross(toHitVecs[1], edges[1])),\n        length(cross(toHitVecs[2], edges[2]))\n    );\n    if (abs(square - testSq[0] - testSq[1] - testSq[2]) < EPS)\n        return d;\n    return INF;\n}\n\nfloat tracePyramid(vec3 pos, vec3 dir, out vec3 normal) {\n    vec3[5] points = vec3[5] (\n        vec3(0, 1, 0),\n        vec3(-1, -0.999, -1),\n        vec3(1, -0.999, -1),\n        vec3(1, -0.999, 1),\n        vec3(-1, -0.999, 1)\n    );\n    int[18] trlist = int[18](\n        0, 4, 1, // right\n        0, 2, 1, // front\n        0, 2, 3, // left\n        0, 3, 4,  // back\n        1, 4, 2,\n        2, 4, 3\n    );\n    vec3 curNorm;\n    float t = INF, curT;\n    for (int i = 0; i < 6; i++) {\n    Triangle curTr;\n        for (int j = 0; j < 3; j++) {\n            curTr.pos[j] = points[trlist[i * 3 + j]];\n        }\n        curT = traceTriangle(curTr, pos, dir, curNorm);\n        if (curT < t) {\n            t = curT;\n            normal = curNorm;\n        }\n    }\n    return t;\n}\n\n\nfloat traceBox(vec3 pos, vec3 dir, vec3 size, out vec3 normal) {\n\n    vec3[8] points = vec3[8] (\n        vec3(size.x, 0, size.z),\n        vec3(size.x, 0, -size.z),\n        vec3(-size.x, 0, -size.z),\n        vec3(-size.x, 0, size.z),\n        \n        vec3(size.x, size.y * 2.0, size.z),\n        vec3(size.x, size.y * 2.0, -size.z),\n        vec3(-size.x, size.y * 2.0, -size.z),\n        vec3(-size.x, size.y * 2.0, size.z)\n    );\n    int[36] trlist = int[36](\n        //bottom\n        0, 1, 2,\n        0, 2, 3,\n        // back\n        4, 5, 6,\n        4, 6, 7,\n        //top\n        4, 0, 3,\n        7, 4, 3,\n        //front\n        5, 2, 1,\n        2, 5, 6,\n        //left\n        0, 5, 1,\n        0, 4, 5,\n        //right\n        3, 6, 2,\n        3, 7, 6\n        \n    );\n    vec3 curNorm;\n    float t = INF, curT;\n    for (int i = 0; i < 12; i++) {\n    Triangle curTr;\n        for (int j = 0; j < 3; j++) {\n            curTr.pos[j] = points[trlist[i * 3 + j]];\n        }\n        curT = traceTriangle(curTr, pos, dir, curNorm);\n        if (curT < t) {\n            t = curT;\n            normal = curNorm;\n        }\n    }\n    return t;\n}\n\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n    \n    vec3 pyrNorm;\n    float pyrT = tracePyramid(pos, dir, pyrNorm);\n    return (pyrT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\nvec3 groundColor(vec3 worldPos) {\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    float x = worldPos.x;\n    float y = worldPos.y;\n    float z = worldPos.z;\n    \n    if (y > 0.1) return vec3(0.61, 0.80, 0.42);\n    \n    vec3[5] dirtColors = vec3[5] (\n        vec3(0.63, 0.46, 0.32),\n        vec3(0.4, 0.3, 0.1),\n        vec3(0.4, 0.3, 0.0),\n        vec3(0.2, 0.1, 0.2),\n        vec3(0.5, 0.5, 0.5)\n    );\n    \n    int i; \n    \n    if (int(y * 10.0) % 2 == 0 && int(x * 10.0) % 2 == 0 && int(worldPos.z * 10.0) % 2 == 0) {\n        i = 1;\n    }\n    \n    else if (int(y * 10.0) % 2 == 1 && int(x * 10.0) % 2 == 0 && int(z * 10.0) % 2 == 0) {\n        i = 2;\n    }\n    \n    else if (int(y * 10.0) % 2 == 0 && int(x * 10.0) % 2 == 1 && int(z * 10.0) % 2 == 0) {\n        i = 3;\n    }\n    \n    else if (int(y * 10.0) % 2 == 0 && int(x * 10.0) % 2 == 0 && int(z * 10.0) % 2 == 1) {\n        i = 4;\n    }\n    \n    else if (int(y * 10.0) % 2 == 1 && int(x * 10.0) % 2 == 1 && int(z * 10.0) % 2 == 0) {\n        i = 0;\n    }\n    \n    else if (int(y * 10.0) % 2 == 0 && int(x * 10.0) % 2 == 1 && int(z * 10.0) % 2 == 1) {\n        i = 1;\n    }\n    \n    else if (int(y * 10.0) % 2 == 1 && int(x * 10.0) % 2 == 0 && int(z * 10.0) % 2 == 1) {\n        i = 2;\n    }\n    \n    else if (int(y * 10.0) % 2 == 1 && int(x * 10.0) % 2 == 1 && int(z * 10.0) % 2 == 1) {\n        i = 3;\n    }\n    \n    return dirtColors[i];\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    LIGHT2_POS = vec3(2, 1, 0) + randVals * 0.1;\n    LIGHT3_POS = vec3(0, 0.7, 3) + randVals * 0.2;\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.3;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float BOX_N = 1.0;\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        vec3 l3Norm;\n        float light3T = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_RADIUS, l3Norm);\n        if (light3T < t) {\n            t = light3T;\n            materialType = EMISSION;\n            color = LIGHT3_COLOR;\n            normal = l3Norm;\n        }\n        \n        \n        vec3 pyrNorm;\n        float pyrT = tracePyramid(curPos, curDir, pyrNorm);\n        if (pyrT < t) {\n            t = pyrT;\n            normal = pyrNorm;\n            if (randVals.x < GLASS_R + 0.2) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(1, 0.9, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        \n        float boxSize = 0.15;\n        \n        \n        for (float i = 3.0; i < 6.0; i += 1.0) {\n            vec3 boxNorm;\n            float boxT = traceBox(\n                curPos + vec3(0, 0.2, 0)+ vec3(0, 2.0 * boxSize * i, 0) + vec3(0, -1, 0), \n                curDir,  vec3(boxSize, boxSize, boxSize), boxNorm);\n            if (boxT < t) {\n                t = boxT;\n                normal = boxNorm;\n                vec3 worldPos = t * curDir + curPos;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                } else {\n                    nEnter = BOX_N;\n                }\n\n                colorMult = groundColor(worldPos);\n            }\n        }\n        \n        vec3 box4Norm;\n            float box4T = traceBox(\n                curPos + vec3(0.2, 0.2, 0)+ vec3(0, 2.0 * boxSize * 3.0, 0) + vec3(0, -1, 0), \n                curDir,  vec3(boxSize, boxSize, boxSize), box4Norm);\n            if (box4T < t) {\n                t = box4T;\n                normal = box4Norm;\n                vec3 worldPos = t * curDir + curPos;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                } else {\n                    nEnter = BOX_N;\n                }\n\n                colorMult = groundColor(worldPos);\n            }\n            \n        vec3 box5Norm;\n            float box5T = traceBox(\n                curPos + vec3(0.2, 0.2, 0)+ vec3(0, 2.0 * boxSize * 4.0, 0) + vec3(0, -1, 0), \n                curDir,  vec3(boxSize, boxSize, boxSize), box5Norm);\n            if (box5T < t) {\n                t = box5T;\n                normal = box5Norm;\n                vec3 worldPos = t * curDir + curPos;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                } else {\n                    nEnter = BOX_N;\n                }\n\n                colorMult = groundColor(worldPos);\n            }\n            \n        vec3 box6Norm;\n            float box6T = traceBox(\n                curPos + vec3(-0.2, 0.2, 0)+ vec3(0, 2.0 * boxSize * 3.0, 0) + vec3(0, -1, 0), \n                curDir,  vec3(boxSize, boxSize, boxSize), box6Norm);\n            if (box6T < t) {\n                t = box6T;\n                normal = box6Norm;\n                vec3 worldPos = t * curDir + curPos;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                } else {\n                    nEnter = BOX_N;\n                }\n\n                colorMult = groundColor(worldPos);\n            }\n        \n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}