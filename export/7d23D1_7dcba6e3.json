{"ver":"0.1","info":{"id":"7d23D1","date":"1617367295","viewed":95,"name":"Quartic sin(x) approximation","username":"edubart","description":"Computing sin(x) using symmetry and a quartic function.\nThis was made mainly to implement a fast sin/cos that can be vectorized easily with SIMD instructions in CPU while allowing to compromise some precision.\n\nMore details on comments.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sin","approximation","quartic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2021 Eduardo Bart (https://github.com/edubart)\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// Computing sin(x) using symmetry and a quartic function approximation.\n//\n// The quartic equation was solved on paper using the following constrains:\n// f(0) = 0, f(pi) = 0, f(pi/2) = 1, f'(0) = 1, f'(pi) = -1, f'(pi/2) = 0\n// Later symmetry was crafted by combining stair, saw and square signals on graphtoy.\n// See https://graphtoy.com/?f1(x,t)=(1/PI)*x&v1=true&f2(x,t)=floor(f1(x))&v2=true&f3(x,t)=f1(x)-f2(x)&v3=true&f4(x,t)=f3(x)*f3(x)*((16-4*PI)*f3(x)*f3(x)+(8*PI-32)*f3(x)+(16-5*PI))+PI*f3(x)&v4=true&f5(x,t)=1-2*(f2(x)-2*floor(0.5*f1(x)))&v5=true&f6(x,t)=f4(x)*f5(x)&v6=true&grid=true&coords=0,0,3.4759725568402553\n// \n// This was made mainly to implement a fast sin/cos that can be vectorized easily\n// with SIMD instructions in CPU while allowing to compromise some precision.\n// In my findings usually on x86_64 this is faster than approximations like in https://www.shadertoy.com/view/wlffWs\n// On GPUs this is slower, because native sin is pretty optimized already.\n//\n// No branching was a goal, the symmetry is done just using function signals.\n//\n// Yellow, GLSL sin(x)\n// Red, computed sin(x)\n\nfloat msin(float x) {\n  const float PI = 3.1415926535898;\n  const float PI_2 = 1.5707963267949; // PI/2\n  const float INVPI = 0.31830988618379; // 1/PI\n  const float K1 = 3.4336293856408; // 16 - 4*PI\n  const float K2 = -6.8672587712817; // 8*PI - 32\n  const float K3 = 0.29203673205103; // 16 - 5*PI\n  // The following costs 9 MULs, 3 ADDs, 3 SUBs and 2 FLOORs (optimizations are welcome)\n  float line = INVPI*x;\n  float stair = floor(line);\n  float saw = line - stair;\n  float wave = saw*(saw*(saw*(saw*K1 + K2) + K3) + PI);\n  float square = 1.0-2.0*(stair - 2.0*floor(0.5*line));\n  return square*wave;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\t\n    vec2  p = fragCoord/iResolution.y;\n    float px = 1.0/iResolution.y;\n    vec3 col = vec3( 0.2 + 0.02*mod(floor(p.x*10.0)+floor(p.y*10.0),2.0) );\n    // sin, yellow\n    float y = 0.5+0.4*sin( 7.0*p.x );\n    float dy = dFdx(y)/px;\n    col = mix( col, vec3(1.0,1.0,0.0), 1.0 - smoothstep( 0.0, 2.0*px, abs(p.y-y)/sqrt(1.0+dy*dy)) );\n    // msin, red\n    if(sin(iTime*6.28)>0.0)  {\n      y = 0.5+0.4*msin( 7.0*p.x );\n      dy = dFdx(y)/px;\n      col = mix( col, vec3(1.0,0.0,0.0), 1.0 - smoothstep( 0.0, 2.0*px, abs(p.y-y)/sqrt(1.0+dy*dy) ) );\n    }\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}