{"ver":"0.1","info":{"id":"3dffz7","date":"1587889514","viewed":603,"name":"Random lines","username":"Uncomfy","description":"Saw this effect in some music visualiser and tried to recreate it.","likes":34,"published":1,"flags":0,"usePreview":0,"tags":["noise","lines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//width of lines\n#define _Width 0.05\t\n\n//width of the borders of the lines\n#define _Border 0.003\t\n\n//frequency of the noise\n#define _NoiseFreq 50.0\n\n//strength of the noise\n#define _NoiseStr 0.01\t\n\n//speed of the \"simulation\"\n#define _Speed 5.0\n\n//portion of the time(from 0 to 1), that will be spent on \"growing\" the line\n//rest of the time will be spent \"widening\" the line\n#define _GT 0.5\t\n\nfloat hash( float n )\n{\n    n = mod(n, 691.564);\n    return fract(sin(n)*43758.5453);\n}\n\nfloat perlin(float x) {\n    float f = fract(x);\n    float i = floor(x);\n    return mix(hash(i), hash(i+1.0), smoothstep(0.0, 1.0, f));\n}\n\nvec2 hash2( vec2 p )\n{\n    p = mod(p, 132.5);\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nfloat saturate(float x) {\n    return clamp(x, 0.0, 1.0);\n}\n\nfloat drawLine(inout vec2 uv, inout float draw, float i, float f) {\n    float grow = saturate(f/_GT);\n    float widen = saturate((f-_GT)/(1.0-_GT))*_Width;\n\n    vec2 norm = hash2(vec2(i, i*1.1))-0.5;\n    vec2 nnorm = normalize(norm);\n\n    uv -= norm;\n\n    uv = mat2x2(nnorm.x, nnorm.y, -nnorm.y, nnorm.x) * uv;\n    float per = (perlin((uv.y+i)*_NoiseFreq)-0.5)*_NoiseStr;\n\n    uv.x += per;\n\n    float tx = uv.x - (step(0.0, uv.x)-0.5)*widen;\n\n    float ans = draw*smoothstep(_Border+0.003, _Border, abs(tx))*step(uv.y, mix(-2.0, 2.0, grow));\n    draw = saturate(draw - step(2.0*abs(uv.x), widen));\n    uv.x = tx - per;\n\n    uv = mat2x2(nnorm.x, -nnorm.y, nnorm.y, nnorm.x) * uv;\n    uv += norm;\n\n    return ans;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float tim = (iTime)*_Speed;\n    float timei = floor(tim);\n    float timef = fract(tim);\n\n    float bord = 0.0;\n    float draw = 1.0;\n\n    bord += drawLine(uv, draw, timei, timef);\n\n    timei -= 1.0;\n\n    for(float i = 0.0; i < 500.0; i++) {\n        bord += drawLine(uv, draw, timei-i, 1.0);\n        if(draw < 0.5) break;\n    }\n    \n    fragColor = vec4(bord, bord, bord, 1.0);\n}","name":"Image","description":"","type":"image"}]}