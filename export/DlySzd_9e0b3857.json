{"ver":"0.1","info":{"id":"DlySzd","date":"1686277125","viewed":26,"name":"uno","username":"gaco8","description":"circle","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Configuración\n    vec2 resolution = iResolution.xy;\n    vec2 center = resolution * 0.5;\n    float radius = min(resolution.x, resolution.y) * 0.4;\n    \n    // Convertir a coordenadas polares\n    vec2 uv = (fragCoord - center) / radius;\n    float angle = atan(uv.y, uv.x);\n    float distance = length(uv);\n    \n    // Efecto de onda\n    float wave = sin(iTime * 3.0 + angle * 5.0) * 0.5 + 0.5;\n    \n    // Color base\n    vec3 baseColor = vec3(wave);\n    \n    // Sombras\n    float shadow = smoothstep(0.4, 0.45, distance);\n    float shadowOffset = sin(iTime * 2.0 + angle * 10.0) * 0.02;\n    vec3 shadowColor = vec3(0.0);\n    vec2 shadowCoord = fragCoord + vec2(cos(angle), sin(angle)) * shadowOffset * resolution;\n    float shadowWave = sin(iTime * 4.0 + angle * 20.0) * 0.5 + 0.5;\n    shadowColor = mix(vec3(0.0), vec3(0.2), shadowWave);\n    \n    // Combinar el color base y las sombras\n    vec3 finalColor = baseColor - shadow * shadowColor;\n    \n    // Convertir a blanco y negro\n    finalColor = vec3(dot(finalColor, vec3(0.299, 0.587, 0.114)));\n    \n    // Renderizar el círculo\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}