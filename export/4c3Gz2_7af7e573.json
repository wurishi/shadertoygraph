{"ver":"0.1","info":{"id":"4c3Gz2","date":"1711991839","viewed":35,"name":"Fastaro Fractal4","username":"robfast","description":"this was another function I discovered when playing around earlier this year.. I figured I might as well turn it into a fractal too","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["floor","fraction","pythagorean"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Define the distance function g(x) for complex numbers\nfloat g(vec2 z, float p, float q) {\n    float x = z.x;\n    float y = z.y;\n    float n_x = floor(x * log(p) / log(q));\n    float n_y = floor(y * log(p) / log(q));\n\n    // Applying the distance formula to both the real and imaginary parts\n    float realPart = sqrt(pow(pow(p, x) / pow(q, floor((x * log(p)) / log(q))), 2.0) + pow(pow(q, floor(1.0 + (x * log(p)) / log(q))) / pow(p, x), 2.0));\n    float imagPart = sqrt(pow(pow(p, y) / pow(q, floor((y * log(p)) / log(q))), 2.0) + pow(pow(q, floor(1.0 + (y * log(p)) / log(q))) / pow(p, y), 2.0));\n    return sqrt(realPart + imagPart); // Combined distance\n}\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / (iResolution.y);\n    // Introduce a dynamic zoom or translation based on time\n    float zoom = 1.0 + sin(iTime/20.0) * 2.5; // Example zoom effect\n    vec2 baseC = (1.0/100.0)*uv * vec2(100.0 * zoom, 100.0 * zoom); // Apply zoom to fractal view\n\n    float p = 127.0 + sin(iTime) * -0.5; // Oscillate p over time\n    float q = 143.0 + cos(iTime) * -0.5; // Oscillate q over time\n\n    float sg = 0.0;\n    for(int m = 0; m <= 7; ++m) {\n        sg += g(baseC - vec2(float(m) / 12.0, 0.0), p, q);\n    }\n\n    // Animate the hue directly with iTime to create a more dynamic color shift\n    // Limit hue to a specific range within the spectrum\nfloat hueRangeStart = 0.4; // Start of hue range\nfloat hueRangeEnd = 0.75; // End of hue range\nfloat hue = hueRangeStart + mod(sg / 20.0 + iTime/10.0, hueRangeEnd - hueRangeStart);\n\n    float saturation = 0.7;\n    float value = 0.9;\n\n    vec3 hsv = vec3(hue, saturation, value);\n    vec3 rgb = hsv2rgb(hsv); // Convert HSV to RGB\n\n    fragColor = vec4(rgb, 0.2);\n}\n","name":"Image","description":"","type":"image"}]}