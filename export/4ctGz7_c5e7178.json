{"ver":"0.1","info":{"id":"4ctGz7","date":"1711509778","viewed":63,"name":"Spectral Vortex ","username":"ShadedSky","description":"fractal noise, procedural generation","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["animation","fractalnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time\n    float time = iTime * 0.1;\n\n    // Initialize depth as a function of time to simulate movement\n    float depth = mod(time, 20.0);\n\n    // Remap the coordinates to simulate a perspective\n    vec2 p = (3.5*uv-1.0);\n    p.x *= iResolution.x / iResolution.y;\n    p.y += depth;\n\n    // Fake some perspective\n    float scale = 1.0 / (1.0 + p.y * p.y * 0.1);\n    p *= scale*6.0*sin(0.1*iTime);\n\n    // Add some twists \n    float angle = sin(time*0.5)*2.83;\n    mat2 rot = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    p *= rot;\n\n    // Create a striped pattern for the walls\n    float stripes = sin(10.0*p.x) * sin(10.0*p.y);\n\n    // Iridescent color effect\n    vec3 iridescentColor = vec3(\n        0.5 + 0.5 * sin(time + p.y * 0.5 + 0.0),\n        0.5 + 0.5 * sin(time + p.y * 0.5 + 2.0944), // 2.0944 is 2*pi/3\n        0.5 + 0.5 * sin(time + p.y * 0.5 + 4.18879) // 4.18879 is 4*pi/3\n    );\n\n    // Calculate the color based on the stripes pattern and apply iridescence\n    vec3 col = mix(iridescentColor, vec3(1.0), smoothstep(0.2, 0.3, abs(stripes)));\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}