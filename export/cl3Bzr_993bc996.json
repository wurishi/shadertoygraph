{"ver":"0.1","info":{"id":"cl3Bzr","date":"1700848561","viewed":37,"name":"Rez remix","username":"fthr_tpolm","description":"effect","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tpolm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265358979323846;\nconst float value = 0.0;\n\nfloat rand(in vec2 p, in float t) {\n    return fract(sin(dot(p + mod(t, 1.0), vec2(12.9898, 78.2333))) * 43758.5453);\n}\n\nvec2 rotate(vec2 k, float t) {\n    return vec2(cos(t) * k.x - sin(t) * k.y, sin(t) * k.x + cos(t) * k.y);\n}\n\nfloat scene1(vec3 p) {\n    float speed = iTime * 0.5;\n    float ground = dot(p, vec3(0.0, 1.0, 0.0)) + 1.0;\n    float t1 = length(abs(mod(p.xyz, 2.0) - 1.0)) - 1.2 + 0.1 * cos(PI * p.x * 5.0) + 0.1 * sin(PI * p.z * 5.0); \n    float t3 = length(max(abs(mod(p.xyz, 2.0) - 1.0).xz - 1.0, 0.5)) - 0.05 + 0.2 * cos(p.y * 40.0); \n    float t5 = length(abs(mod(p.xyz, 0.5)) - 0.25) - 0.85;\n    float bubble_w = 0.6 + 0.3 * cos(PI * p.z) + 0.3 * cos(PI * p.x);\n    float bubble = length(mod(p.xyz, 0.125) - 0.0625) - bubble_w;\n    float hole_w = 0.1;\n    float hole = length(abs(mod(p.xz, 1.0) - 0.5)) - hole_w;\n    float tube_p = 2.0 - 0.35 * sin(PI * p.z * 0.5);\n    float tube_v = PI * 10.0;\n    float tube_b = tube_p * 0.03;\n    float tube_w = tube_b + tube_b * cos(p.x * tube_v) * sin(p.y * tube_v) * cos(p.z * tube_v) + tube_b * sin(PI * p.z + speed * 5.0);\n    float tube = length(abs(mod(p.xy, tube_p) - tube_p * 0.5)) - tube_w;\n    return min(max(min(-t1, max(-hole - t5 * 0.4, ground + bubble)), t3 + t5), tube);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float speed = iTime * 0.5;\n    float ground_x = 1.5 * cos(PI * speed * 0.15);\n    float ground_y = 4.0 - 3.0 * sin(PI * speed * 0.15) + 0.125 * value;\n    float ground_z = -1.0 - speed;\n    vec2 position = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * position;\n    vec3 dir = normalize(vec3(p * vec2(1.625, 1.0), 0.75));\n    dir.yz = rotate(dir.yz, PI * 0.25 * sin(PI * speed * 0.15) - value * 0.25);\n    dir.zx = rotate(dir.zx, PI * cos(-PI * speed * 0.05));\n    dir.xy = rotate(dir.xy, PI * 0.125 * cos(PI * speed * 0.15));\n    vec3 ray = vec3(ground_x, ground_y, ground_z);\n    float t = 0.0;\n    const int ray_n = 96;\n    for (int i = 0; i < ray_n; i++) {\n        float k = scene1(ray + dir * t);\n        if (abs(k) < 0.005) break;\n        t += k * 0.5;\n    }\n    vec3 hit = ray + dir * t;\n    vec2 h = vec2(-0.02, 0.01);\n    vec3 n = normalize(vec3(scene1(hit + h.xyy), scene1(hit + h.yxx), scene1(hit + h.yyx)));\n    float c = (n.x + n.y + n.z) * 0.1;\n    vec3 color = vec3(c, c, c) - t * 0.0625;\n    \n    // Convert to grayscale\n    float gray = dot(color, vec3(0.299, 0.587, 0.114)); // Standard grayscale conversion\n    vec3 grayscaleColor = vec3(gray);\n\n    // Add orange highlights\n    vec3 orange = vec3(1.0, 0.5, 0.0); // Orange color\n    float highlightFactor = smoothstep(0.4, 0.6, gray); // Determine where to apply highlights\n    vec3 finalColor = mix(grayscaleColor, orange, highlightFactor);\n\n    // Simulate bloom effect\n    finalColor += 0.8 * exp(-3.0 * length(2.0 * position - 1.0)); // Soft glow effect\n\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}