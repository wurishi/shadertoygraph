{"ver":"0.1","info":{"id":"WdVcW3","date":"1603902864","viewed":99,"name":"Cartoony whirling portal","username":"Chounard","description":"A spinning portal to another world. This is completely unoptimized, but you're welcome to use it however you want. :)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cartoon","portal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// voronoi code borrowed from here:\n// https://github.com/MaxBittker/glsl-voronoi-noise\nconst mat2 myt = mat2(.12121212, .13131313, -.13131313, .12121212);\nconst vec2 mys = vec2(1e4, 1e6);\n\nvec2 rhash(vec2 uv)\n{\n    uv *= myt;\n    uv *= mys;\n    return fract(fract(uv / mys) * uv);\n}\n\nfloat Voronoi(const in vec2 point)\n{\n    vec2 p = floor(point);\n    vec2 f = fract(point);\n    float res = 0.0;\n    for (int j = -1; j <= 1; j++)\n    {\n        for (int i = -1; i <= 1; i++)\n        {\n            vec2 b = vec2(i, j);\n            vec2 r = vec2(b) - f + rhash(p + b);\n            res += 1. / pow(dot(r, r), 8.);\n        }\n    }\n    return pow(1. / res, 0.0625);\n}\n\nvec2 Twirl(vec2 uv, vec2 center, float strength, vec2 offset)\n{\n    vec2 delta = uv - center;\n    float angle = strength * length(delta);\n    float x = cos(angle) * delta.x - sin(angle) * delta.y;\n    float y = sin(angle) * delta.x + cos(angle) * delta.y;\n    return vec2(x + center.x + offset.x, y + center.y + offset.y);\n}\n\nvec2 Rotate(vec2 uv, vec2 center, float rotation)\n{\n    uv -= center;\n    float s = sin(rotation);\n    float c = cos(rotation);\n    mat2x2 rmatrix = mat2x2(c, -s, s, c);\n    rmatrix *= 0.5;\n    rmatrix += 0.5;\n    rmatrix = rmatrix * 2.0 - 1.0;\n    uv.xy = uv.xy * rmatrix;\n    uv += center;\n    return uv;\n}    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 center = vec2(0.5, 0.5);\n    float rotateSpeed = -1.5;\n    float morphSpeed = 0.1f;\n    float twirlStrength = 25.0;\n    float scale = 5.0;\n    float stepCount = 2.0;\n    float inverseStepCount = 1.0 / stepCount;\n    vec4 colorA = vec4(49.0, 204.0, 49.0, 255.0) / 255.0;\n    vec4 colorB = vec4(13.0, 55.0, 13.0, 255.0) / 255.0;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 value = uv;\n    value = Rotate(value, center, rotateSpeed * iTime);\n    value = Twirl(value, center, twirlStrength, vec2(morphSpeed * iTime, morphSpeed * iTime));\n    float valuef = Voronoi(value);\n    valuef = clamp(valuef * 2.0, 0.0, 1.0);\n    valuef /= inverseStepCount;\n    valuef = floor(valuef);\n    valuef *= inverseStepCount;\n    \n    fragColor = mix(colorA, colorB, valuef);\n}","name":"Image","description":"","type":"image"}]}