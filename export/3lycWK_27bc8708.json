{"ver":"0.1","info":{"id":"3lycWK","date":"1612358475","viewed":277,"name":" Navier Stokes","username":"milez770","description":"https://www.dgp.toronto.edu/public_user/stam/reality/Research/pdf/GDC03.pdf\n\ntook some hints from \nhttps://www.shadertoy.com/view/ldd3WS","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["navierstocks"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy)/iResolution.xy;\n    vec4 vel = texture(iChannel0, uv) * 0.005;\n    vec4 div = texture(iChannel1, uv) * 0.009;\n    vec4 pre = texture(iChannel2, uv) * 0.009;\n    \n    fragColor = vec4((abs(vel.x)+abs(vel.y))/2.)+div+clamp(pre*.5, 0., 1.);\n    //fragColor = vec4(pre)*10.;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 0 ~ 1\n    vec2 i = 1./iResolution.xy;\n    vec2 uv = vec2(fragCoord.xy*i);\n    vec2 c = (fragCoord.xy - .5*iResolution.xy)/iResolution.y;\n    \n    vec2 oldVelocity = texture(iChannel0, uv).xy;\n    vec2 samplePos = uv - oldVelocity * iTimeDelta * i;\n    vec2 outputVelocity = texture(iChannel0, samplePos).xy;\n  \n\n    //outputVelocity += sin(vec2(1., .3)+iTime*vec2(1.4, 3.))*dist;\n   \n    if( length(c+sin(vec2(.3, .1)*iTime+2.)*.5) < .03){\n        outputVelocity += vec2(15.*cos(iTime*3.), -5.*sin(2.*iTime)-10.);\n    }\n    if( length(c-sin(vec2(.3, -.1)*iTime)*.5) < .03){\n        outputVelocity += vec2( 10.*sin(iTime*2.), 5.*sin(2.*iTime+10.)+10.);\n    }\n    if(uv.x < .01 && uv.y < .3 && uv.y > .2){\n        //outputVelocity += vec2(10., 0.);\n    }\n    if(uv.x > 1.0 - i.x ||\n      \tuv.y > 1.0 - i.y ||\n      \tuv.x < i.x ||\n      \tuv.y < i.y)\n    {\n        outputVelocity = vec2(0.0, 0.0);\n    }\n    //vec4 t0 = texture(iChannel0, uv);\n    //add force\n    fragColor = vec4(outputVelocity, 0., 0.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 i = 1./iResolution.xy;\n    vec2 uv = fragCoord.xy*i;\n    \n   //divergence\n    float xn = texture(iChannel0, uv-vec2(i.x, 0.)).x;\n    float xp = texture(iChannel0, uv+vec2(i.x, 0.)).x;\n    float yn = texture(iChannel0, uv-vec2(0., i.y)).y;\n    float yp = texture(iChannel0, uv+vec2(0., i.y)).y;\n    \n    float divergence = ((xp - xn) + (yp - yn))*.5;\n    //t0 += divergence;\n    fragColor = vec4(divergence);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//jacobi\nvec2 i;\nfloat iterate(in vec2 uv){\n    if(uv.x > 1. - i.x*2. || uv.y >  1. - i.y*2. || uv.x < i.x*2. || uv.y < i.y*2.){\n        return 0.;\n    }\n    else{\n        return texture(iChannel2, uv).x;\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    i = 1./iResolution.xy;\n    vec2 uv = fragCoord.xy*i;\n    \n    float a0 = texture(iChannel1, uv).x;\n    float xn = iterate(uv-vec2(1., 0.)*i.x);\n    float xp = iterate(uv+vec2(1., 0.)*i.x);\n    float yn = iterate(uv-vec2(0., 1.)*i.y);\n    float yp = iterate(uv+vec2(0., 1.)*i.y);\n    \n    \n    float diffused = (xn + xp + yn + yp - a0)*.25;\n    \n    \n    fragColor = vec4(diffused);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//subtract pressure\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 i = 1./iResolution.xy;\n    vec2 uv = fragCoord.xy*i;\n    \n    float xn = texture(iChannel1, uv-vec2(1., 0.)*i).x;\n    float xp = texture(iChannel1,uv+vec2(1., 0.)*i).x;\n    float yn = texture(iChannel1,uv-vec2(0., 1.)*i).x;\n    float yp = texture(iChannel1,uv+vec2(0., 1.)*i).x;\n    \n    vec2 pG = (vec2(xp, yp) - vec2(xn, yn))*.5;\n    vec2 oldV = texture(iChannel0, uv).xy;\n    \n    fragColor = vec4(oldV - pG, 0., 0.);\n     \n}","name":"Buffer D","description":"","type":"buffer"}]}