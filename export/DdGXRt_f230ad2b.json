{"ver":"0.1","info":{"id":"DdGXRt","date":"1713894633","viewed":97,"name":"tgruh","username":"The_Snek12","description":"literal agony","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON 0.001\n#define PI 3.1415926\n\n\n\nfloat saturate(float x)\n{\n\treturn clamp(x, 0., 1.);\n}\n\n\nmat3 rotateX(float ang){\n    float c = cos(ang);\n    float s = sin(ang);\n    return mat3(vec3(1,0,0),\n                vec3(0,c,-s),\n                vec3(0,s,c));\n}\n\nmat3 rotateY(float ang){\n    float c = cos(ang);\n    float s = sin(ang);\n    return mat3(vec3(c,0,s),\n                vec3(0,1,0),\n                vec3(-s,0,c));\n}\n\nmat3 rotateZ(float ang){\n    float c = cos(ang);\n    float s = sin(ang);\n    return mat3(vec3(c,-s,0),\n                vec3(s,c,0),\n                vec3(0,0,1));\n}\n\n\n\nfloat sphereSDF(vec3 p){\n     return length(p)-3.0;\n}\nfloat rectSDF(vec3 p){\n  vec3 b = vec3(2.5);\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat mainSDF(vec3 p){\n  p = p*rotateY(iTime);\n  return max(sphereSDF(p), rectSDF(p));\n  \n}\n\nvec3 getRayDirection(vec2 pos){\n    float z= iResolution.y/tan(radians(90.)/2.);\n    return normalize(vec3(pos, -z));\n}\n\n\nfloat distanceToSurface(vec3 eye, vec3 rayDir, float nearClipingBound, float farClipingBound){\n    float rayDist = nearClipingBound;\n   \n    for (int i = 0; i<100; i++){\n      float sceneDist = mainSDF(eye + rayDist * rayDir);\n      if (sceneDist < EPSILON){\n          return rayDist;\n      }\n      rayDist += sceneDist;\n      if (sceneDist >= farClipingBound){\n         return farClipingBound;\n      }\n    }\n    return farClipingBound;\n}\nvec3 normal(vec3 p){\n    return normalize(vec3(\n    mainSDF(vec3(p.x + EPSILON, p.y, p.z)) - mainSDF(vec3(p.x - EPSILON,p.y,p.z)),\n    mainSDF(vec3(p.x,p.y + EPSILON,p.z)) - mainSDF(vec3(p.x,p.y - EPSILON,p.z)),\n    mainSDF(vec3(p.x,p.y,p.z + EPSILON)) - mainSDF(vec3(p.x,p.y,p.z - EPSILON))\n    ));\n}\n\nvec3 lambert(vec3 normal, vec3 lightdir, vec3 col, float intensity, vec3 ambientColor,float ambientIntensity){\n    return dot(normal, lightdir)*col*intensity + ambientColor*ambientIntensity;\n}\n\n\n\nmat3 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\nvec3 EnvBRDFApprox(vec3 specularColor, float roughness, float ndotv)\n{\n\tconst vec4 c0 = vec4(-1, -0.0275, -0.572, 0.022);\n\tconst vec4 c1 = vec4(1, 0.0425, 1.04, -0.04);\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min(r.x * r.x, exp2(-9.28 * ndotv)) * r.x + r.y;\n\tvec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nvec3 renderSphere(vec3 cam, vec3 worldDir){\n     \n    \n     \n     float dist = distanceToSurface(cam, worldDir, 0.01, 100.);\n     vec3 p = dist*worldDir+cam;\n     \n     vec3 halfVector = normalize(normal(p) + worldDir);\n     \n      if (dist >= 100. - EPSILON){\n         vec3 col = texture(iChannel0, p).xyz;\n         return col;\n         \n     }\n\n     vec3 lightDir = normalize(vec3(7,9,5));\n    \n     vec3 envReflect = texture(iChannel0, reflect(worldDir, normal(p))).xyz; //reflections\n     vec3 frensel = EnvBRDFApprox(vec3(1.0), 0.9, saturate(dot(normal(p), -worldDir)));\n     \n     \n     //return vec3(dot(lightDir, normal(p)));\n     //return vec3( (1.-smoothstep(0., 0.3, dot(normal(p), -worldDir))) * ) ;\n     \n     \n     \n     return envReflect*frensel;\n     \n     //vec3 trans = texture(iChannel0, worldDir).xyz; //transparency\n     //vec3 diff = lambert(normal(p), normalize(vec3(7,9,5)), vec3(1,1,1), 0.2, vec3(1,1,1), 0.4); \n     //return mix(mix(diff, spec, reflection), trans, transparency);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n vec3 col;\n vec3 cam = vec3(cos(radians(iMouse.x))*10.,5.,sin(radians(iMouse.x))*10.);\n vec2 xy = fragCoord - iResolution.xy / 2.0;\n vec3 dir = getRayDirection(xy);\n \n mat3 viewToWorld = viewMatrix(cam, vec3(0.0, 0., 0.0), vec3(0.0, 1.0, 0.0));   \n vec3 worldDir = viewToWorld*dir;\n vec3 resultColor = renderSphere(cam, worldDir);   \n \n \n \n fragColor = vec4(resultColor, 1);\n \n}","name":"Image","description":"","type":"image"}]}