{"ver":"0.1","info":{"id":"4cjcW3","date":"1723092991","viewed":28,"name":"2D Animated Gradient","username":"dinther","description":"My very first shader.\n\nStudy to eventually create a fast animated 2D color gradient source with user defined 2D color stops.\nFor now it is fixed to 4 colors pinned in each corner.\n\nUse click and drag over the gradient to change the x and y bias.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2dcolorgradient1dcubicspline"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float cubicEasing(float x, float bias)\n{\n    return 3.0 * bias * x * pow((1.0 - x), 2.0) + 3.0 * bias * pow(x, 2.0) * (1.0 - x) + pow(x, 3.0);\n}\n\nvec4 grad(vec4 color1, vec4 color2, vec4 color3, vec4 color4, vec2 uv){\n    float y12 = cubicEasing(uv.y,color2[3]/(color1[3] + color2[3]));\n    float y34 = cubicEasing(uv.y,color4[3]/(color3[3] + color4[3]));\n    vec4 c1 = mix(color1, color2, smoothstep(0.0, 1.0, y12));\n    vec4 c2 = mix(color3, color4, smoothstep(0.0, 1.0, y34));\n    float y23 = cubicEasing(uv.x, color3[3]/(color2[3] + color3[3]));\n    vec4 col = mix(c1, c2, smoothstep(0.0, 1.0, y23));\n    return vec4(col[0], col[1], col[2], 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 m = vec4(iMouse.xy / iResolution.xy, iMouse.z, iMouse.w);\n   \n    \n    vec2 uv = fragCoord/iResolution.xy;     // Normalized pixel coordinates (from 0 to 1)\n\n    vec4 ColorTL = vec4(0, 0, 1, m.y);      //  Blue made yup of r, g, b, weight\n    vec4 ColorTR = vec4(1, 1, 0, 1.0-m.y);  //  Yellow\n    vec4 ColorBL = vec4(1, 0, 0, 1.0-m.x);  //  Red\n    vec4 ColorBR = vec4(0, 1, 0, m.x);      //  Green\n    \n    // Output to screen\n    fragColor = grad(ColorBL, ColorBR, ColorTL, ColorTR, uv);\n}","name":"Image","description":"","type":"image"}]}