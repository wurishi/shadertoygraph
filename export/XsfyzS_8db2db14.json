{"ver":"0.1","info":{"id":"XsfyzS","date":"1489095779","viewed":156,"name":"N Rooks Sampling, Lancsoz Filter","username":"ereif","description":"Lab for Interactive Graphics (Brown University). Sampling and filtering with some ~fun classics~ (N Rooks and Lancsoz) to avoid Moire patterns.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["lab"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define UP vec3(0.,1.,0.)\n\nfloat intersectPlane(vec3 p0, vec3 n, vec3 ro, vec3 rd)\n{\n    return dot((p0-ro),n)/dot(rd,n);\n}\n\nfloat xor(float a, float b)\n{\n    return a*(1.-b)+b*(1.-a);\n}\n\nfloat superSample()\n{\n\treturn 0.;\n}\n    \nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    float d=intersectPlane(vec3(0.),UP,ro,rd);\n    if (d<0.)\n        return vec3(0.5);\n    vec3 pos=ro+d*rd;\n    float xPos = mod(floor(pos.x),2.);\n    float zPos = mod(floor(pos.z),2.);\n    return vec3(xor(xPos,zPos), 0.4, 0.4);\n}\n\nvec4 swap(vec2 first, vec2 second)\n{\n    return vec4(first.x, second.y, first.y, second.x);\n}\n\nfloat sinc(vec2 inp)\n{\n\tfloat r = length(inp);\n    return sin(r)/r;\n}\n\nfloat lanczos(vec2 inp)\n{\n    float a = .6;\n    float inpLen = length(inp);\n   \treturn sinc(inp)*sinc(inp/a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int numSamples = 40;\n    vec3 final = vec3(0.);\n    float totalWeight = 0.;\n    // Samples array contains sub-pixel coords (between 0 and 1)\n    vec2 samplesArray[40];\n    \n    // Create array of diagonals.\n    for (int i=0; i<numSamples; i++)\n    {\n    \tsamplesArray[i] = (vec2(i)/float(numSamples) - 0.5);\n    }\n    \n    // Shuffle array.\n    for (int i=0; i<numSamples; i++)\n    {\n        int rand = (i * 2) % (numSamples  - 3);\n\t\tfloat temp = samplesArray[rand].y;\n    \tsamplesArray[rand].y = samplesArray[i].y;\n    \tsamplesArray[i].y = temp;\n    }\n    \n    vec2 offsetNormalized = vec2(0.);\n    for (int i=0; i<numSamples;i++)\n    {\n        vec2 uv=(fragCoord.xy - samplesArray[i])/iResolution.xy;\n        vec2 p=-1.0+2.0*uv; // pixel space of the focal plane\n        p.x*=iResolution.x/iResolution.y;\n\n        vec3 eye=vec3(0., 3., 0.0);\n        vec3 look=vec3(0.,0.,50.);\n        float d=2.5;\n        vec3 w=normalize( look - eye);\n        vec3 u=normalize( cross(w,UP) );\n        vec3 v=normalize( cross(u,w) );\n        vec3 rd=normalize( p.x*u + p.y*v + d*w );\n            \n        // Filter\n        float weight = lanczos(samplesArray[i]);\n        final += render(eye,rd) * weight;  \n        totalWeight += weight;\n    }\n    final = final/totalWeight;\n   \tfragColor=vec4(final, 1.0 );\n}","name":"Image","description":"","type":"image"}]}