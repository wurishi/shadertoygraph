{"ver":"0.1","info":{"id":"4lByzm","date":"1507840988","viewed":420,"name":"Pulse sensor","username":"A2K","description":"ECG","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["heartbeat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat sinc(float x)\n{\n    return (x == 0.0) ? 1.0 : sin(x) / x;\n}\n\nfloat triIsolate(float x)\n{\n    return abs(-1.0 + fract(clamp(x, -0.5, 0.5)) * 2.0);\n}\n\nfloat waveform(float x)\n{\n    float prebeat = -sinc((x - 0.37) * 40.0) * 0.6 * triIsolate((x - 0.4) * 1.0);\n    float mainbeat = (sinc((x - 0.5) * 60.0)) * 1.2 * triIsolate((x - 0.5) * 0.7) * 1.5;\n    float postbeat = sinc((x - 0.91) * 15.0) * 0.85;\n    return (prebeat + mainbeat + postbeat) * triIsolate((x - 0.625) * 0.8);\n}\n\nfloat test(vec2 uv)\n{\n    float delta = 0.00001;\n    float x1 = uv.x - delta;\n    float x2 = uv.x + delta;\n    float y1 = waveform(x1);\n    float y2 = waveform(x2);\n    \n    float x0 = uv.x;\n    float y0 = uv.y;\n    float d =( (y2-y1)*x0-(x2-x1)*y0+x2*y1-y2*x1 )/sqrt(pow(y2-y1, 2.0)+pow(x2-x1, 2.0));\n    \n    float t = smoothstep(0.0, 1.0, pow(abs(d), 0.5) * 8.0);\n    float w = smoothstep(0.0, 1.0, pow(abs(uv.y - y1), 0.85) * 8.0);\n\n    return min(t, min(t * w, min(t + (t * w) * 0.5, w + (t * w) * 0.5)));\n}\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float Time = fract(iTime);\n    \n\n    float light = 3.0;\n    float noise = 0.1 * rand(floor(fract(iTime * 0.1) * 10.0));\n    float delta = 1.0 * noise * sin(noise + uv.x);\n    uv.y += noise + delta;\n    float dist = test(vec2(uv.x * 1.1 + 0.2, uv.y * 4.0 - 1.5)) * 1.5;\n    \n    if (Time >= uv.x ) {\n\t\tfragColor = vec4(vec3(light, 0.0, 0.0) * (1.0 - dist),1.0);\n\n    }\n\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 tuv = vec2(Time * iResolution.x / iResolution.y, (waveform(Time * 1.1 + 0.2) + 1.5) / 4.0);\n    float dotDist = distance(vec2(uv.x, uv.y), tuv);\n    \n    if (dotDist < 0.0125) {\n        fragColor = vec4(smoothstep(0.15, 0.0, dotDist));\n    }\n       \n    uv.y -= noise + delta;        \n    \n    if (fract(uv.x * 10.0) - 0.0015 < 0.03 || fract(uv.y * 10.0) < 0.03) \n    {\n        fragColor = max(fragColor, vec4(0.1));\n    }\n}","name":"Image","description":"","type":"image"}]}