{"ver":"0.1","info":{"id":"3tG3DD","date":"1578919424","viewed":809,"name":"quick bump mapping test","username":"szczm_","description":"nothing to see here move along\n\nmade in ~1 hour, don't expect wonders","likes":16,"published":3,"flags":0,"usePreview":1,"tags":["shading","lambert","bumpmapping","normal","mapping","blinnphong","tangent","bitangent"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://github.com/hughsk/glsl-hsv2rgb\n// Used for changing the light colour\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nfloat luminance(vec3 col) {\n    return dot(col, vec3(0.299, 0.587, 0.114));\n}\n\n// Use pixel luminance for height\nfloat texelHeight(vec4 rgba) {\n    return luminance(rgba.rgb);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normal map strength\n    const float normal_strength = 7.0;\n    \n    // Bump height multiplier\n    const float height_multiplier = 4.0;\n    const float texel_offset = 0.5;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 offset = vec3(texel_offset / iChannelResolution[0].xy, 0.0);\n    \n    vec3 surfaceColor = texture(iChannel0, uv).rgb;\n\tfloat height = texelHeight(surfaceColor.rgbb) * height_multiplier;\n    vec3 worldPosition = vec3(uv, height);\n    \n    // Take a difference between the right texel and the left texel\n    float ddX = texelHeight(texture(iChannel0, uv + offset.xz))\n        \t  - texelHeight(texture(iChannel0, uv - offset.xz));\n    \n    // Take a difference between the bottom texel and the top texel\n    float ddY = texelHeight(texture(iChannel0, uv + offset.zy))\n        \t  - texelHeight(texture(iChannel0, uv - offset.zy));\n    \n    ddX *= normal_strength / texel_offset;\n    ddY *= normal_strength / texel_offset;\n    \n    // I'm probably using the wrong nomenclature here don't sue me\n    vec3 tangent   = normalize(vec3(1.0, 0.0, ddX));\n    vec3 bitangent = normalize(vec3(0.0, 1.0, ddY));\n    \n    // As easy as one two seven NaN NaN—±¼¿Ə↔ Segmentation fault\n    vec3 normal = cross(tangent, bitangent);\n    \n    vec2 lightPosition = 0.5 + 0.4 * vec2(cos(iTime), sin(iTime));\n    vec3 lightColor = hsv2rgb(vec3(mod(iTime * 0.1, 1.0), 0.1, 1.0));\n    float lightStrength = 10.0;\n    float lightHeight = 2.8;\n    \n    vec3 lightDir = normalize(vec3(lightPosition, lightHeight) - worldPosition);\n    \n    float attenuation = lightStrength / pow(distance(lightPosition, uv) + lightHeight, 2.0);\n    \n    float lambert = max(0.0, dot(lightDir, normal));\n    float blinnPhong = pow(max(dot(normalize(vec3(vec3(0.0, 0.0, 1.0)) + normal), lightDir), 0.0), 10.0);\n    \n    float ambient = 0.0;\n    float diffuse = 0.5 * lambert;\n    float specular = 0.5 * blinnPhong;\n    \n    vec3 col = ambient + (diffuse * surfaceColor + specular) * attenuation * lightColor;\n    \n    float luma = luminance(col);\n    luma *= 3.5;\n    col /= luma / (luma + 1.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}