{"ver":"0.1","info":{"id":"wsscW2","date":"1585658581","viewed":89,"name":"Meadow","username":"Hei149","description":"raymarching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.141592\n\nmat2 rotate(float ang)\n{\n    float ca = cos(ang), sa = sin(ang);\n    return mat2(ca, sa, -sa, ca);\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n    vec3 h = abs(p) - b;\n    return length(max(h, 0.0)) - min(max(h.x, max(h.y, h.z)), 0.0);\n}\n\n\nfloat rand(vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(12.4392, 44.4393))) * 95.549) * 2.0 - 1.0;\n}\n\nfloat rnd2(vec2 uv) {\n  return fract(dot(sin(uv*427.512+uv.yx*652.477),vec2(417.884)));\n  \n}\n\nfloat noise(vec2 p)\n{\n    vec2 uv = fract(p);\n    uv = uv * uv * (3.0 - 2.0 * uv);\n    p = floor(p);\n    return mix(\n        mix(rand(p), rand(p + vec2(1.0, 0.0)), uv.x),\n        mix(rand(p+vec2(0.0, 1.0)), rand(p + vec2(1.0)), uv.x),\n        uv.y\n    );\n}\n\nfloat grass(vec3 p, float s)\n{\n  p /= s;\n  p.y -= 2.0;\n  float d = sdBox(p, vec3(sin(p.y + 2.0) * 0.1, 2.0, 0.01));\n  return (d * s);\n}\n\nfloat meadow(vec3 p, float rep)\n{\n    vec2 id = floor(p.xz / rep);\n    p.xz = mod(p.xz, rep) - 0.5 * rep;\n    float scale = rnd2(id);\n    float d = grass(p, 1.0 + scale * 1.5);\n    return d;\n}\n\n\nfloat map(vec3 p)\n{\n  p.y += noise(p.xz * 0.02 + 20.) * 10.;\n  p.x += sin(p.y * 0.548 + iTime) * 0.5;\n  p.x += sin(p.y * 0.25 + iTime) * 0.6;\n  p.z += sin(p.y * 0.248 + iTime) * 0.8;\n  p.z += sin(p.y * 0.5 + iTime * 2.0) * 0.4;\n  float d = meadow(p, 2.0);\n  p.xz *= rotate(0.94);\n  p.x += 1.0;\n  d = min(d, meadow(p, 2.0));\n  p.z += 1.0;\n  p.xz *= rotate(-0.343);\n  d = min(d, meadow(p, 2.0));\n  p.xz += 1.8;\n  p.xz *= rotate(1.84);\n  d = min(d, meadow(p, 2.0));\n  \n  return min(d, p.y);\n}\n\nfloat shadow(vec3 p, vec3 ld)\n{\n    float shadow = 1.0;\n    float d = 0.03;\n    for(int i = 0; i < 32; ++i)\n    {\n        float t = map(p + d * ld);\n        d += t;\n        shadow = min(shadow, t/d * 30.0);\n    }\n    return clamp(shadow, 0.0, 1.0);\n}\n\nfloat sss(vec3 p, vec3 l, float d)\n{\n    return smoothstep(0.0, 1.0, map(p + d * l) / d);\n}\n\nvec3 norm(vec3 p)\n{\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(\n        map(p + e.xyy) - map(p - e.xyy),\n        map(p + e.yxy) - map(p - e.yxy),\n        map(p + e.yyx) - map(p - e.yyx)\n    ));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 r0 = vec3(0.0, 40.0, -90.0);\n    r0.xz *= rotate(0.5);\n    vec3 tgt = vec3(0.0);\n    r0.z += iTime * 20.0;\n    tgt.z += iTime * 20.0;\n    vec3 ww = normalize(tgt - r0);\n    vec3 uu = normalize(cross(vec3(0,1,0), ww));\n    vec3 vv = normalize(cross(ww, uu));\n\n    float zoom = 1.0;\n    vec3 rd = normalize(uv.x * uu + uv.y * vv + ww * zoom);\n\n    float d = 0.0;\n    vec3 col = vec3(0.0);\n    \n    for(int i = 0; i < 100; ++i)\n    {\n        vec3 p = r0 + d * rd;\n        float t = map(p);\n        d += t;\n        if(t < 0.01 || d > 400.0)\n\t      break;\n    }\n\n    vec3 p = r0 + d * rd;\n    float scatt = 0.0f;\n    vec3 ld = normalize(vec3(0.5, 0.5, 0.5));\n    float numStep = 10.0;\n    for(float i = 1.0; i < numStep; ++i)\n    {\n        float dist = 8.0 * (i  / numStep);\n        scatt += sss(p, ld, dist);\n    }\n    scatt *= 4.0 / numStep;\n    col = scatt * mix(vec3(0.6, 0.3, 0.1), vec3(0.3, 0.6, 0.1), 0.5 + 0.5 * rand(p.xz * 0.5));\n    vec3 n = norm(p);\n    float fog = (1.0 - (clamp(d / 400.0, 0.0, 1.0)));\n    col *= fog;\n    vec3 sky =  mix(vec3(0.5, 0.7, 1.0), vec3(0.9, 0.7, 0.1), max(0.0, pow(dot(rd, ld),2.0)));\n    col += pow((1.0f - fog), 4.0) * sky;\n    col = pow(col, vec3(0.4545));\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}