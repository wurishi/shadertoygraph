{"ver":"0.1","info":{"id":"MfjSzy","date":"1706524589","viewed":152,"name":"Dithering collection","username":"paperjack","description":"a collection of dithering functions","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float PI = 3.14159265359;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    ivec2 fragxy = ivec2(fragCoord.xy);\n\n    vec3 quantize_amount = vec3(2.0,0.0,0.0);\n    \n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col = 0.5 + 0.5*cos(uv.xyx*10.0+vec3(1,2,4));\n    vec3 delta = quantize_delta(col, quantize_amount, vec3(1.0));\n    vec3 up = quantize_up(col, quantize_amount);\n    vec3 down = quantize_down(col, quantize_amount);\n    \n    float example_size = 1.0/14.0;\n    if(uv.y>0.0 && uv.y < example_size){\n        fragColor = vec4(col,1.0);\n    } else if(uv.y> example_size && uv.y < example_size * 2.0){\n        vec3 res = vec3(0.0);\n        res.r = mix(down.r, up.r, get_bayer2_mix_amount(delta.r, fragxy));\n        res.g = mix(down.g, up.g, get_bayer2_mix_amount(delta.g, fragxy));\n        res.b = mix(down.b, up.b, get_bayer2_mix_amount(delta.b, fragxy));\n        fragColor = vec4(res,1.0);\n    } else if(uv.y> example_size * 2.0 && uv.y < example_size * 3.0){\n        vec3 res = vec3(0.0);\n        res.r = mix(down.r, up.r, get_bayer4_mix_amount(delta.r, fragxy));\n        res.g = mix(down.g, up.g, get_bayer4_mix_amount(delta.g, fragxy));\n        res.b = mix(down.b, up.b, get_bayer4_mix_amount(delta.b, fragxy));\n        fragColor = vec4(res,1.0);\n    } else if(uv.y> example_size * 3.0 && uv.y < example_size * 4.0){\n        vec3 res = vec3(0.0);\n        res.r = mix(down.r, up.r, get_bayer8_mix_amount(delta.r, fragxy));\n        res.g = mix(down.g, up.g, get_bayer8_mix_amount(delta.g, fragxy));\n        res.b = mix(down.b, up.b, get_bayer8_mix_amount(delta.b, fragxy));\n        fragColor = vec4(res,1.0);\n    } else if(uv.y> example_size * 4.0 && uv.y < example_size * 5.0){\n        vec3 res = vec3(0.0);\n        res.r = mix(down.r, up.r, get_bayer16_mix_amount(delta.r, fragxy));\n        res.g = mix(down.g, up.g, get_bayer16_mix_amount(delta.g, fragxy));\n        res.b = mix(down.b, up.b, get_bayer16_mix_amount(delta.b, fragxy));\n        fragColor = vec4(res,1.0);\n    } else if(uv.y> example_size * 5.0 && uv.y < example_size * 6.0){\n        vec3 res = vec3(0.0);\n        // DIMINISHING RETURNS!\n        res.r = mix(down.r, up.r, get_bayer32_mix_amount(delta.r, fragxy));\n        res.g = mix(down.g, up.g, get_bayer32_mix_amount(delta.g, fragxy));\n        res.b = mix(down.b, up.b, get_bayer32_mix_amount(delta.b, fragxy));\n        fragColor = vec4(res,1.0);\n    } else if(uv.y> example_size * 6.0 && uv.y < example_size * 7.0){\n        vec3 res = vec3(0.0);\n        res.r = mix(down.r, up.r, get_bluenoise_mix_amount(delta.r, fragxy));\n        res.g = mix(down.g, up.g, get_bluenoise_mix_amount(delta.g, fragxy));\n        res.b = mix(down.b, up.b, get_bluenoise_mix_amount(delta.b, fragxy));\n        fragColor = vec4(res,1.0);\n    } else if(uv.y> example_size * 7.0 && uv.y < example_size * 8.0){\n        vec3 res = vec3(0.0);\n        res.r = mix(down.r, up.r, get_scanline_mix_amount(delta.r, fragxy, 0.0*PI));\n        res.g = mix(down.g, up.g, get_scanline_mix_amount(delta.g, fragxy, 0.5*PI));\n        res.b = mix(down.b, up.b, get_scanline_mix_amount(delta.b, fragxy, 0.26*PI));\n        fragColor = vec4(res,1.0);\n    } else if(uv.y> example_size * 8.0 && uv.y < example_size * 9.0){\n        vec3 res = vec3(0.0);\n        res.r = mix(down.r, up.r, get_valvescreendither_mix_amount(delta.r, fragxy, vec3(1.0, 0.0, 0.0)));\n        res.g = mix(down.g, up.g, get_valvescreendither_mix_amount(delta.g, fragxy, vec3(0.0, 1.0, 0.0)));\n        res.b = mix(down.b, up.b, get_valvescreendither_mix_amount(delta.b, fragxy, vec3(0.0, 0.0, 1.0)));\n        fragColor = vec4(res,1.0); \n    } else if(uv.y> example_size * 9.0 && uv.y < example_size * 10.0){\n        vec3 res = vec3(0.0);\n        res.r = mix(down.r, up.r, get_random_mix_amount(delta.r, fragxy));\n        res.g = mix(down.g, up.g, get_random_mix_amount(delta.g, fragxy));\n        res.b = mix(down.b, up.b, get_random_mix_amount(delta.b, fragxy));\n        fragColor = vec4(res,1.0); \n    } else if(uv.y> example_size * 10.0 && uv.y < example_size * 11.0){\n        vec3 res = vec3(0.0);\n        res.r = mix(down.r, up.r, get_triangular_random_mix_amount(delta.r, fragxy));\n        res.g = mix(down.g, up.g, get_triangular_random_mix_amount(delta.g, fragxy));\n        res.b = mix(down.b, up.b, get_triangular_random_mix_amount(delta.b, fragxy));\n        fragColor = vec4(res,1.0); \n    } else if(uv.y> example_size * 11.0 && uv.y < example_size * 12.0){\n        vec3 res = vec3(0.0);\n        res.r = mix(down.r, up.r, get_violet_noise_mix_amount(delta.r, fragxy));\n        res.g = mix(down.g, up.g, get_violet_noise_mix_amount(delta.g, fragxy));\n        res.b = mix(down.b, up.b, get_violet_noise_mix_amount(delta.b, fragxy));\n        fragColor = vec4(res,1.0); \n    } else if(uv.y> example_size * 12.0 && uv.y < example_size * 13.0){\n        vec3 res = vec3(0.0);\n        res.r = mix(down.r, up.r, get_JJ_IGN_mix_amount(delta.r, fragxy));\n        res.g = mix(down.g, up.g, get_JJ_IGN_mix_amount(delta.g, fragxy));\n        res.b = mix(down.b, up.b, get_JJ_IGN_mix_amount(delta.b, fragxy));\n        fragColor = vec4(res,1.0); \n    } else if(uv.y> example_size * 13.0 && uv.y < example_size * 14.0){\n        vec3 res = vec3(0.0);\n        res.r = mix(down.r, up.r, get_GRI_IGN_mix_amount(delta.r, fragxy));\n        res.g = mix(down.g, up.g, get_GRI_IGN_mix_amount(delta.g, fragxy));\n        res.b = mix(down.b, up.b, get_GRI_IGN_mix_amount(delta.b, fragxy));\n        fragColor = vec4(res,1.0); \n    }\n\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float NOISE_SMALL_NUMBER = 0.00001;\nconst uint NOISE_HILBERT_LEVEL = 7U;\nconst uint NOISE_HILBERT_WIDTH = (1U << NOISE_HILBERT_LEVEL);\n\nvec3 quantize_down(vec3 n, vec3 size){\n    return floor(n * size) / (size);\n}\nvec3 quantize_up(vec3 n, vec3 size){\n    return ceil(n * size) / (size);\n}\nvec3 quantize_delta(vec3 n, vec3 size, vec3 edge_offset){\n    //vec3 up = quantize_up(n, size)-n;\n    vec3 down = n-quantize_down(n, size);\n    return 1.0-(down/(1.0/size)*edge_offset);\n}\n\nfloat quantize_down(float n, float size){\n    return floor(n * size) / (size);\n}\nfloat quantize_up(float n, float size){\n    return ceil(n * size) / (size);\n}\n\n\nconst int BAYER2_MATRIX_SIZE = 2*2;\nconst int BAYER2_MATRIX[BAYER2_MATRIX_SIZE] = int[BAYER2_MATRIX_SIZE]\n(0, 1, 3, 2);\n\nconst int BAYER4_MATRIX_SIZE = 4 * 4;\nconst int BAYER4_MATRIX[BAYER4_MATRIX_SIZE] = int[BAYER4_MATRIX_SIZE]\n(0, 4, 1, 5, 12, 8, 13, 9, 3, 7, 2, 6, 15, 11, 14, 10);\n\n\nconst int BAYER8_MATRIX_SIZE = 8 * 8;\nconst int BAYER8_MATRIX[BAYER8_MATRIX_SIZE] = int[BAYER8_MATRIX_SIZE]\n(0, 16, 4, 20, 1, 17, 5, 21, 48, 32, 52, 36, 49, 33, 53, 37, 12, 28, 8, \n24, 13, 29, 9, 25, 60, 44, 56, 40, 61, 45, 57, 41, 3, 19, 7, 23, 2, 18, \n6, 22, 51, 35, 55, 39, 50, 34, 54, 38, 15, 31, 11, 27, 14, 30, 10, 26, \n63, 47, 59, 43, 62, 46, 58, 42);\n\nconst int BAYER16_MATRIX_SIZE = 16 * 16;\nconst int BAYER16_MATRIX[BAYER16_MATRIX_SIZE] = int[BAYER16_MATRIX_SIZE]\n(0, 64, 16, 80, 4, 68, 20, 84, 1, 65, 17, 81, 5, 69, 21, 85, 192, 128, \n208, 144, 196, 132, 212, 148, 193, 129, 209, 145, 197, 133, 213, 149, \n48, 112, 32, 96, 52, 116, 36, 100, 49, 113, 33, 97, 53, 117, 37, 101, \n240, 176, 224, 160, 244, 180, 228, 164, 241, 177, 225, 161, 245, 181, \n229, 165, 12, 76, 28, 92, 8, 72, 24, 88, 13, 77, 29, 93, 9, 73, 25, \n89, 204, 140, 220, 156, 200, 136, 216, 152, 205, 141, 221, 157, 201, \n137, 217, 153, 60, 124, 44, 108, 56, 120, 40, 104, 61, 125, 45, 109, \n57, 121, 41, 105, 252, 188, 236, 172, 248, 184, 232, 168, 253, 189, \n237, 173, 249, 185, 233, 169, 3, 67, 19, 83, 7, 71, 23, 87, 2, 66, \n18, 82, 6, 70, 22, 86, 195, 131, 211, 147, 199, 135, 215, 151, 194, \n130, 210, 146, 198, 134, 214, 150, 51, 115, 35, 99, 55, 119, 39, 103, \n50, 114, 34, 98, 54, 118, 38, 102, 243, 179, 227, 163, 247, 183, 231, \n167, 242, 178, 226, 162, 246, 182, 230, 166, 15, 79, 31, 95, 11, 75, \n27, 91, 14, 78, 30, 94, 10, 74, 26, 90, 207, 143, 223, 159, 203, 139, \n219, 155, 206, 142, 222, 158, 202, 138, 218, 154, 63, 127, 47, 111, \n59, 123, 43, 107, 62, 126, 46, 110, 58, 122, 42, 106, 255, 191, 239, \n175, 251, 187, 235, 171, 254, 190, 238, 174, 250, 186, 234, 170);\n\nconst int BAYER32_MATRIX_SIZE = 32 * 32;\nconst int BAYER32_MATRIX[BAYER32_MATRIX_SIZE] = int[BAYER32_MATRIX_SIZE]\n(0, 256, 64, 320, 16, 272, 80, 336, 4, 260, 68, 324, 20, 276, 84, 340, 1, \n257, 65, 321, 17, 273, 81, 337, 5, 261, 69, 325, 21, 277, 85, 341, 768, \n512, 832, 576, 784, 528, 848, 592, 772, 516, 836, 580, 788, 532, 852, 596,\n769, 513, 833, 577, 785, 529, 849, 593, 773, 517, 837, 581, 789, 533, 853, \n597, 192, 448, 128, 384, 208, 464, 144, 400, 196, 452, 132, 388, 212, 468, \n148, 404, 193, 449, 129, 385, 209, 465, 145, 401, 197, 453, 133, 389, 213, \n469, 149, 405, 960, 704, 896, 640, 976, 720, 912, 656, 964, 708, 900, 644, \n980, 724, 916, 660, 961, 705, 897, 641, 977, 721, 913, 657, 965, 709, 901, \n645, 981, 725, 917, 661, 48, 304, 112, 368, 32, 288, 96, 352, 52, 308, 116,\n372, 36, 292, 100, 356, 49, 305, 113, 369, 33, 289, 97, 353, 53, 309, 117, \n373, 37, 293, 101, 357, 816, 560, 880, 624, 800, 544, 864, 608, 820, 564,\n884, 628, 804, 548, 868, 612, 817, 561, 881, 625, 801, 545, 865, 609, 821,\n565, 885, 629, 805, 549, 869, 613, 240, 496, 176, 432, 224, 480, 160, 416, \n244, 500, 180, 436, 228, 484, 164, 420, 241, 497, 177, 433, 225, 481, 161, \n417, 245, 501, 181, 437, 229, 485, 165, 421, 1008, 752, 944, 688, 992, 736,\n928, 672, 1012, 756, 948, 692, 996, 740, 932, 676, 1009, 753, 945, 689, 993,\n737, 929, 673, 1013, 757, 949, 693, 997, 741, 933, 677, 12, 268, 76, 332,\n28, 284, 92, 348, 8, 264, 72, 328, 24, 280, 88, 344, 13, 269, 77, 333, 29,\n285, 93, 349, 9, 265, 73, 329, 25, 281, 89, 345, 780, 524, 844, 588, 796, \n540, 860, 604, 776, 520, 840, 584, 792, 536, 856, 600, 781, 525, 845, 589,\n797, 541, 861, 605, 777, 521, 841, 585, 793, 537, 857, 601, 204, 460, 140,\n396, 220, 476, 156, 412, 200, 456, 136, 392, 216, 472, 152, 408, 205, 461,\n141, 397, 221, 477, 157, 413, 201, 457, 137, 393, 217, 473, 153, 409, 972,\n716, 908, 652, 988, 732, 924, 668, 968, 712, 904, 648, 984, 728, 920, 664,\n973, 717, 909, 653, 989, 733, 925, 669, 969, 713, 905, 649, 985, 729, 921,\n665, 60, 316, 124, 380, 44, 300, 108, 364, 56, 312, 120, 376, 40, 296, 104,\n360, 61, 317, 125, 381, 45, 301, 109, 365, 57, 313, 121, 377, 41, 297, 105, \n361, 828, 572, 892, 636, 812, 556, 876, 620, 824, 568, 888, 632, 808, 552,\n872, 616, 829, 573, 893, 637, 813, 557, 877, 621, 825, 569, 889, 633, 809, \n553, 873, 617, 252, 508, 188, 444, 236, 492, 172, 428, 248, 504, 184, 440,\n232, 488, 168, 424, 253, 509, 189, 445, 237, 493, 173, 429, 249, 505, 185,\n441, 233, 489, 169, 425, 1020, 764, 956, 700, 1004, 748, 940, 684, 1016, \n760, 952, 696, 1000, 744, 936, 680, 1021, 765, 957, 701, 1005, 749, 941, \n685, 1017, 761, 953, 697, 1001, 745, 937, 681, 3, 259, 67, 323, 19, 275, \n83, 339, 7, 263, 71, 327, 23, 279, 87, 343, 2, 258, 66, 322, 18, 274, 82,\n338, 6, 262, 70, 326, 22, 278, 86, 342, 771, 515, 835, 579, 787, 531, 851,\n595, 775, 519, 839, 583, 791, 535, 855, 599, 770, 514, 834, 578, 786, 530, \n850, 594, 774, 518, 838, 582, 790, 534, 854, 598, 195, 451, 131, 387, 211, \n467, 147, 403, 199, 455, 135, 391, 215, 471, 151, 407, 194, 450, 130, 386, \n210, 466, 146, 402, 198, 454, 134, 390, 214, 470, 150, 406, 963, 707, 899, \n643, 979, 723, 915, 659, 967, 711, 903, 647, 983, 727, 919, 663, 962, 706, \n898, 642, 978, 722, 914, 658, 966, 710, 902, 646, 982, 726, 918, 662, 51, \n307, 115, 371, 35, 291, 99, 355, 55, 311, 119, 375, 39, 295, 103, 359, 50,\n306, 114, 370, 34, 290, 98, 354, 54, 310, 118, 374, 38, 294, 102, 358, 819,\n563, 883, 627, 803, 547, 867, 611, 823, 567, 887, 631, 807, 551, 871, 615, \n818, 562, 882, 626, 802, 546, 866, 610, 822, 566, 886, 630, 806, 550, 870, \n614, 243, 499, 179, 435, 227, 483, 163, 419, 247, 503, 183, 439, 231, 487, \n167, 423, 242, 498, 178, 434, 226, 482, 162, 418, 246, 502, 182, 438, 230, \n486, 166, 422, 1011, 755, 947, 691, 995, 739, 931, 675, 1015, 759, 951, 695,\n999, 743, 935, 679, 1010, 754, 946, 690, 994, 738, 930, 674, 1014, 758, 950,\n694, 998, 742, 934, 678, 15, 271, 79, 335, 31, 287, 95, 351, 11, 267, 75, \n331, 27, 283, 91, 347, 14, 270, 78, 334, 30, 286, 94, 350, 10, 266, 74, 330, \n26, 282, 90, 346, 783, 527, 847, 591, 799, 543, 863, 607, 779, 523, 843, \n587, 795, 539, 859, 603, 782, 526, 846, 590, 798, 542, 862, 606, 778, 522,\n842, 586, 794, 538, 858, 602, 207, 463, 143, 399, 223, 479, 159, 415, 203, \n459, 139, 395, 219, 475, 155, 411, 206, 462, 142, 398, 222, 478, 158, 414, \n202, 458, 138, 394, 218, 474, 154, 410, 975, 719, 911, 655, 991, 735, 927, \n671, 971, 715, 907, 651, 987, 731, 923, 667, 974, 718, 910, 654, 990, 734, \n926, 670, 970, 714, 906, 650, 986, 730, 922, 666, 63, 319, 127, 383, 47, \n303, 111, 367, 59, 315, 123, 379, 43, 299, 107, 363, 62, 318, 126, 382, 46, \n302, 110, 366, 58, 314, 122, 378, 42, 298, 106, 362, 831, 575, 895, 639, \n815, 559, 879, 623, 827, 571, 891, 635, 811, 555, 875, 619, 830, 574, 894, \n638, 814, 558, 878, 622, 826, 570, 890, 634, 810, 554, 874, 618, 255, 511, \n191, 447, 239, 495, 175, 431, 251, 507, 187, 443, 235, 491, 171, 427, 254, \n510, 190, 446, 238, 494, 174, 430, 250, 506, 186, 442, 234, 490, 170, 426, \n1023, 767, 959, 703, 1007, 751, 943, 687, 1019, 763, 955, 699, 1003, 747, \n939, 683, 1022, 766, 958, 702, 1006, 750, 942, 686, 1018, 762, 954, 698, \n1002, 746, 938, 682);\n\nint convert_to_bayer_dither_value(float linear, int target_matrix_size){\n    return int(float(target_matrix_size) * linear);\n}\n\nint get_bayer2_dither_value(ivec2 fragcoords){ return BAYER2_MATRIX[((fragcoords.y*2)+fragcoords.x)%BAYER2_MATRIX_SIZE]; }\nint get_bayer4_dither_value(ivec2 fragcoords){ return BAYER4_MATRIX[((fragcoords.y*4)+fragcoords.x)%BAYER4_MATRIX_SIZE]; }\nint get_bayer8_dither_value(ivec2 fragcoords){ return BAYER8_MATRIX[((fragcoords.y*8)+fragcoords.x)%BAYER8_MATRIX_SIZE]; }\nint get_bayer16_dither_value(ivec2 fragcoords){ return BAYER16_MATRIX[((fragcoords.y*16)+fragcoords.x)%BAYER16_MATRIX_SIZE]; }\nint get_bayer32_dither_value(ivec2 fragcoords){ return BAYER32_MATRIX[((fragcoords.y*32)+fragcoords.x)%BAYER32_MATRIX_SIZE]; }\n\nfloat get_bayer2_mix_amount(float amount, ivec2 fragcoords){\n    if( get_bayer2_dither_value(fragcoords) > convert_to_bayer_dither_value(amount - NOISE_SMALL_NUMBER, BAYER2_MATRIX_SIZE)) return 1.0;\n    return 0.0;\n}\n\nfloat get_bayer4_mix_amount(float amount, ivec2 fragcoords){\n    if( get_bayer4_dither_value(fragcoords) > convert_to_bayer_dither_value(amount - NOISE_SMALL_NUMBER, BAYER4_MATRIX_SIZE)) return 1.0;\n    return 0.0;\n}\n\nfloat get_bayer8_mix_amount(float amount, ivec2 fragcoords){\n    if( get_bayer8_dither_value(fragcoords) > convert_to_bayer_dither_value(amount - NOISE_SMALL_NUMBER, BAYER8_MATRIX_SIZE)) return 1.0;\n    return 0.0;\n}\n\nfloat get_bayer16_mix_amount(float amount, ivec2 fragcoords){\n    if( get_bayer16_dither_value(fragcoords) > convert_to_bayer_dither_value(amount - NOISE_SMALL_NUMBER, BAYER16_MATRIX_SIZE)) return 1.0;\n    return 0.0;\n}\n\nfloat get_bayer32_mix_amount(float amount, ivec2 fragcoords){\n    if( get_bayer32_dither_value(fragcoords) > convert_to_bayer_dither_value(amount - NOISE_SMALL_NUMBER, BAYER32_MATRIX_SIZE)) return 1.0;\n    return 0.0;\n}\n\n// Inspired by paniq\nuint get_bluenoise_hilbert_index(uvec2 fragcoords) {\n\tuint i = 0U;\n\tfor( uint cl = NOISE_HILBERT_WIDTH/2U; cl > 0U; cl /= 2U ) {\n\t\tuvec2 r = uvec2(greaterThan((fragcoords & uvec2(cl)), uvec2(0U)));\n\t\ti += cl * cl * ( (3U * r.x) ^ r.y);\n\t\tif( r.y == 0U ) {\n\t\t\tif( r.x == 1U )  fragcoords = uvec2(NOISE_HILBERT_WIDTH - 1U) - fragcoords;\n\t\t\tfragcoords.xy = fragcoords.yx;\n\t\t}\n\t}\n\treturn i;\n}\n\nfloat get_bluenoise_dither_value(ivec2 fragcoords){ \n\treturn fract(1.11803398874989484820*float(get_bluenoise_hilbert_index(uvec2(fragcoords))));\n}\n\nfloat get_bluenoise_mix_amount(float amount, ivec2 fragcoords){\n    return 1.0-step(get_bluenoise_dither_value(fragcoords)+NOISE_SMALL_NUMBER, amount);\n}\n\n\nfloat get_scanline_dither_value(ivec2 fragcoords, float rotation){\n    vec2 rotated_fragcoords = vec2(\n        cos(rotation) * float(fragcoords.x) + sin(rotation) * float(fragcoords.y),\n        cos(rotation) * float(fragcoords.y) - sin(rotation) * float(fragcoords.x)\n    );\n    \n    return floor(mod(float(rotated_fragcoords.y),2.0))*0.5;\n}\n\nfloat get_scanline_mix_amount(float amount, ivec2 fragcoords, float rotation){\n    return 1.0-step(get_scanline_dither_value(fragcoords, rotation)+0.25+NOISE_SMALL_NUMBER, amount);\n}\n\n// from http://alex.vlachos.com/graphics/Alex_Vlachos_Advanced_VR_Rendering_GDC2015.pdf\nfloat get_valvescreendither_dither_value( ivec2 fragcoords, vec3 element){\n\t// Iestyn's RGB dither (7 asm instructions) from Portal 2 X360, slightly modified for VR\n\t//vec3 vDither = vec3( dot( vec2( 171.0, 231.0 ), vScreenPos.xy + iTime ) );\n    vec3 vDither = vec3( dot( vec2( 171.0, 231.0 ), vec2(fragcoords.xy) ) );\n    vDither.rgb = fract( vDither.rgb / vec3( 103.0, 71.0, 97.0 ) );\n        \n    return (vDither.r*element.r)+(vDither.g*element.g)+(vDither.b*element.b);\n}\n\nfloat get_valvescreendither_mix_amount(float amount, ivec2 fragcoords, vec3 element){\n    return 1.0-step(get_valvescreendither_dither_value(fragcoords, element)+NOISE_SMALL_NUMBER, amount);\n}\n\n\n//note: from https://www.shadertoy.com/view/4djSRW\n// This set suits the coords of of 0-1.0 ranges..\nfloat get_dither_hash11_value(float p){\n\tvec3 p3  = fract(vec3(p) * vec3(443.8975,397.2973, 491.1871));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat get_dither_hash12_value(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * vec3(443.8975,397.2973, 491.1871));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat get_triangular_random_dither_value(ivec2 fragcoords){\n    return get_dither_hash12_value( vec2(fragcoords) ) + get_dither_hash12_value(vec2(fragcoords) + 0.59374) - 0.5;\n}\n\nfloat get_triangular_random_mix_amount(float amount, ivec2 fragcoords){\n    return 1.0-step(get_triangular_random_dither_value(fragcoords)+NOISE_SMALL_NUMBER, amount);\n}\n\nfloat get_random_dither_value(ivec2 fragcoords){\n    return get_dither_hash12_value( vec2(fragcoords));\n}\n\nfloat get_random_mix_amount(float amount, ivec2 fragcoords){\n    return 1.0-step(get_random_dither_value(fragcoords)+NOISE_SMALL_NUMBER, amount);\n}\n\n\n// Thanks to Spalmer - see http://shadertoy.com/view/Wtfczs\nfloat get_violet_noise_dither_value(ivec2 fragcoords){\n    vec2 p = vec2(fragcoords) * 2.0;\n    return .5 \n        + ((get_dither_hash12_value(p + vec2(1,0)) - get_dither_hash12_value(p - vec2(1,0))) * 0.5)\n        + ((get_dither_hash12_value(p + vec2(0,1)) - get_dither_hash12_value(p - vec2(0,1))) * 0.5);\n}\n\nfloat get_violet_noise_mix_amount(float amount, ivec2 fragcoords){\n    return 1.0-step(get_violet_noise_dither_value(fragcoords)+NOISE_SMALL_NUMBER, amount);\n}\n\n// Jorge Jimenez interleaved gradient noise;\n// see https://www.shadertoy.com/view/XfBSRy\nfloat get_JJ_IGN_dither_value(ivec2 fragcoords)\n{  \n    vec3 magic = vec3( 0.06711056f, 0.00583715f, 52.9829189f );   \n    return fract(magic.z * fract(dot(vec2(fragcoords), magic.xy)));   \n}\n\nfloat get_JJ_IGN_mix_amount(float amount, ivec2 fragcoords){\n    return 1.0-step(get_JJ_IGN_dither_value(fragcoords)+NOISE_SMALL_NUMBER, amount);\n}\n\n//This, found in Valve's presentations, seem to be the same as Jorge Jimenez's\n//float get_IGN_dither_value(ivec2 fragcoords){ \n//    return fract(52.9829189*fract(0.06711056*float(fragcoords.x) + 0.00583715*float(fragcoords.y))); \n//}\n//\n//float get_IGN_mix_amount(float amount, ivec2 fragcoords){\n//    return 1.0-step(get_IGN_dither_value(fragcoords)+NOISE_SMALL_NUMBER, amount);\n//}\n\n// Golden Ratio Integer\nfloat get_GRI_IGN_dither_value(ivec2 fragcoords)\n{  \n    uvec2 umagic = uvec2(3242174889u, 2447445413u); //1/phi, 1/phi² * 2^32, replaces frac() with a static precision method     \n    return float(uint(fragcoords.x) * umagic.x + uint(fragcoords.y) * umagic.y) * exp2(-32.0);   \n}\n\nfloat get_GRI_IGN_mix_amount(float amount, ivec2 fragcoords){\n    return 1.0-step(get_GRI_IGN_dither_value(fragcoords)+NOISE_SMALL_NUMBER, amount);\n}\n\n","name":"Common","description":"","type":"common"}]}