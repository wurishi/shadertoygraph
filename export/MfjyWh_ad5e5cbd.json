{"ver":"0.1","info":{"id":"MfjyWh","date":"1722322283","viewed":32,"name":"Antialiased Radial Bar","username":"playbyan1453","description":"Confusing, anyways this is for unreal engine project I worked on.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["math","sdf","antialiasing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi      3.1415927\n#define twopi   6.2831853\n\n// Any improvements are welcomed :)\n\n// Original code:\n// float sdRadialBar(vec2 p, float ra, float wi, float t) {\n//     float si = sign(atan(-p.x, -p.y) - t + pi);\n//     float df = length(vec2(p.x, max(0.0, abs(ra - p.y) - wi * 0.5)));\n//     p = mat2(cos(t), sin(t), -sin(t), cos(t)) * p;\n//     df = min(length(vec2(p.x, max(0.0, abs(ra - p.y) - wi * 0.5))), df);\n//     return max(abs(length(p) - ra) - wi * 0.5, df * si);\n// }\n\n// FabriceNeyret2's version was much much more simpler.\n// If you are looking for exact distance my original code that you are looking for.\nfloat sdRadialBar(vec2 p, float ra, float wi, float t) {\n    return max(abs(length(p) - ra) - wi * 0.5, atan(-p.x,-p.y) - t + pi);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    float ra = 0.75;\n    float wi = 0.25;\n    \n    float t = 1.0 - abs(fract(iTime / twopi * 0.5) * 2.0 - 1.0); // Percent 0-1\n    float d = sdRadialBar(uv, ra, wi, t * twopi);\n    \n    vec3 col = vec3(1);\n         col = pow(vec3(-d/fwidth(d)), vec3(0.454545));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}