{"ver":"0.1","info":{"id":"NsGyRc","date":"1655248537","viewed":147,"name":"Blood particles","username":"boddiul","description":"hw","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Body texture\n// Write in web-console:\n// gShaderToy.SetTexture(2, {mSrc:'https://i.imgur.com/c0CyXdc.png', mType:'texture', mID:1, mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }});\n\nconst vec3 BLOOD_COLOR = vec3(1.0, 0.0, 0.0);\nconst float BLOOD_RADIUS = 8.0;\nconst float LIVE_TIME = 3.0;\n\n\nconst float TRANS_POW = 4.0;\nconst float DRAW_RADIUS = 0.075;\n\n\nfloat GetParticle(vec2 dif)\n{\n    vec2 pix = dif * iResolution.xy;\n    \n    float dist2 = dot(pix, pix);\n    if(dist2 < BLOOD_RADIUS*BLOOD_RADIUS) {\n       return 1.0;\n    }\n    return 0.0;\n}\n\nfloat transparency(float timeCreate)\n{\n    float delta = iTime - timeCreate;\n    return clamp(1.0 - pow(delta / LIVE_TIME, TRANS_POW), 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel2, uv);\n\n    for (int i = 0; i < BUFFER_SIZE; ++i) {\n        vec4 particleData = texelFetch(iChannel0, ivec2(i, 0), 0);\n        \n        if (particleData.w == 0.0) {\n            continue;\n        }\n        \n        vec2 pos = decode_vec2(particleData.x);\n        vec2 dif = pos - uv;\n        float dist = length(dif);\n        if (dist < DRAW_RADIUS) {\n            float particle = GetParticle(dif);\n            float trans = transparency(particleData.z);\n            vec3 particleColor =  vec3(particle) * BLOOD_COLOR * trans;\n            if (particleColor != vec3(0.0))\n                fragColor.rgb = tosRGB(mix(fromsRGB(particleColor), fromsRGB(fragColor.rgb), 1.0 - trans));\n        }\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const int BUFFER_SIZE = 100;\nconst float SRGB_POWER = 2.2;\nconst float QUANT_COUNT = 65535.0;\n\n\nfloat encode_vec2(vec2 v) {\n    v = clamp(v, vec2(-3.0), vec2(3.0));\n    v /= 3.0;\n    v *= 0.5;\n    v += 0.5;\n    v *= QUANT_COUNT;\n    return uintBitsToFloat(uint(v.x) << 16 | uint(v.y));\n}\n\nvec2 decode_vec2(float vi) {\n    vec2 v = vec2(floatBitsToUint(vi) >> 16u, floatBitsToUint(vi) & 0xFFFFu);\n    v /= QUANT_COUNT;\n    v -= 0.5;\n    v *= 2.0;\n    v *= 3.0;\n    return v;\n}\n\nfloat random(vec2 uv)\n{\n    return fract(sin(dot(uv,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nvec3 fromsRGB(vec3 color) \n{\n    return pow(color, vec3(SRGB_POWER));\n}\n\nvec3 tosRGB(vec3 color)\n{\n    return pow(color, vec3(1.0 / SRGB_POWER));\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float GRAVITY = 9.8;\nconst float ACC = 1.0;\n\nconst float POS_AMPL = 0.2;\n\n\nconst vec2 GUN_POS = vec2(0.0, 0.5);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 particlesData = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec2 pos = decode_vec2(particlesData.x);\n    vec2 vel = decode_vec2(particlesData.y);\n    \n    \n    bool onWall = pos.x <= 0.0 || pos.x >= 1.0;\n    \n    bool onFloor = pos.y < 0.0;\n    \n    if (!onWall && !onFloor)\n    {\n        pos += vel * iTimeDelta * POS_AMPL;\n    }\n    else if (onWall)\n    {\n        pos.y += vel.y * iTimeDelta * POS_AMPL / 6.0;\n    }\n    \n    if (!onFloor)\n    { \n        vel.y -= iTimeDelta * GRAVITY * ACC;\n    }\n    \n    \n    \n    particlesData.x = encode_vec2(pos);\n    particlesData.y = encode_vec2(vel);\n    uint bufferBegin = uint(texelFetch(iChannel1, ivec2(0, 0), 0));\n    uint bufferEnd = uint(texelFetch(iChannel1, ivec2(1, 0), 0));\n    uint idx = uint(fragCoord.x);\n    bool commonFill = (idx >= bufferBegin) && (idx < bufferEnd);\n    bool overflowFill = (bufferBegin > bufferEnd) && (idx >= bufferBegin || idx < bufferEnd);\n    \n    if ((commonFill || overflowFill)) {\n        vec2 pos = vec2(0.5, iMouse.xy.y/iResolution.xy.y);\n        \n        vec2 randK = vec2(0.25 + 0.75 * (random(vec2(fragCoord.x, 164.0))), 4.0 * random(vec2(fragCoord.x, 10.0)) - 1.0);\n        \n        \n        vec2 vel = 5.0 * normalize(pos-GUN_POS) * randK;\n        \n        \n        if (random(vec2(fragCoord.x, 200.0)) < 0.05)\n            vel.x = - vel.x;\n        \n        particlesData = vec4(encode_vec2(pos), encode_vec2(vel), iTime, 1);\n    }\n     \n    fragColor = particlesData;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const int FRAME_SPAWN = 3;\nconst float SPAWN_COUNT = 1.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uvec2 coords = uvec2(fragCoord);\n    if (coords.y == 0u && coords.x < 2u) {\n        if (iFrame % FRAME_SPAWN == 0 && coords.x == 1u) {\n            fragColor.x = float(int(texelFetch(iChannel0, ivec2(0, 0), 0).x + SPAWN_COUNT) % BUFFER_SIZE);\n        } else {\n            fragColor.x = texelFetch(iChannel0, ivec2(1, 0), 0).x;\n        }\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}