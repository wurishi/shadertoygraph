{"ver":"0.1","info":{"id":"4fjfRK","date":"1725205535","viewed":23,"name":"Eight  and Barth surfaces","username":"Efim","description":"https://mathworld.wolfram.com/BarthSextic.html\nhttps://mathworld.wolfram.com/EightSurface.html","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","implicit","barth","eight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nRendering implicit surfaces. Using raytracing and binary searchy. \nHere, these same surfaces are obtained by creating grids using an algorithm \n3D Marching Cubes: https://flightphone.github.io/paramgeometry.html\n*/\n#define PI  3.14159265359\n#define TAU 6.28318530718\n#define rot(f) mat2(cos(f), -sin(f), sin(f), cos(f))\n#define nn 64.\n#define newton 5\nfloat csurf = 0.;\nfloat period = 15.;\n\nvec3 calcSkyReflect(vec3 rd, vec3 nor)\n{\n    vec3 n = nor;\n    float d = dot(rd, nor);\n    n = nor*sign(d);\n    vec3 r = reflect(rd, n);\n    //vec2 fon = lonlat(sky*r); //get longitude and latitude\n    //vec3 col = texture(iChannel0, fon).rgb;\n    vec3 col = texture(iChannel0, r).rgb;\n    return col;\n\n}\n\nfloat glz() {\n\n    float t = iTime / period;\n    float st = mod(floor(t), 4.);\n    float res;\n    if(st == 0.)\n        res = 1.;\n    if(st == 1.)\n        res = cos(fract(t) * PI / 2.);//(1.- fract(t))*(1.- fract(t));\n    if(st == 2.)\n        res = 0.;\n    if(st == 3.)\n        res = sin(fract(t) * PI / 2.); //fract(t)*fract(t);   \n    return res;\n}\n\nfloat rottime()\n{\n    float t = iTime / period;\n    \n    float st = mod(floor(t), 4.);\n    float ct = floor(t/4.)*4.;\n    float res = ct/2.0;\n    if(st == 0.)\n        res += t-ct;\n    if(st == 1.)\n        res += 1.;    \n    if(st == 2.)\n        res += t-ct -1.;\n    if(st == 3.)\n        res += 2.;\n    return res*period;\n    \n}\n\n\n\n\nfloat eight(vec3 p) {\n    //https://mathworld.wolfram.com/EightSurface.html\n    float x = p.x, y = p.y, z = p.z, f = 1., w = 1.;\n    return -4.*(f*f*x*x - y*y)*(f*f*y*y - z*z)*(f*f*z*z - x*x) + (1. + 2.*f)*(x*x + y*y + z*z - w*w)*(x*x + y*y + z*z - w*w)*w*w - 0.01;\n}\n\nfloat barth(vec3 p)\n{\n    //https://mathworld.wolfram.com/BarthSextic.html\n    float x = p.x, y = p.y, z = p.z, a = 1.;\n    //z = clamp(z, 0., 10.);\n    return 4.*z*z*z*z + a*a*(x*x + y*y - 4.*z*z) ;\n}\n\nfloat map(vec3 p) {\n    \n    if (csurf == 0.0)\n        return eight(p);\n    else\n    if (csurf == 1.0)\n        return barth(p);\n    else       \n        return mix(eight(p), barth(p), csurf);\n    \n}\n\nvec3 calcNormal(in vec3 p) {\n    const float eps = 0.0001;\n    vec2 q = vec2(0.0, eps);\n    vec3 res = vec3(map(p + q.yxx) - map(p - q.yxx), map(p + q.xyx) - map(p - q.xyx), map(p + q.xxy) - map(p - q.xxy));\n    return normalize(res);\n}\n\nvec3 getPoint(vec3 a, vec3 b, float v0, float v1) {\n    vec3 m;\n    //binary search with  n iterations, n = newton\n    for(int i = 0; i < newton; i++) {\n        m = (a + b) * 0.5;\n        float v = map(m);\n        if(v == 0.)\n            break;\n\n        if(sign(v) * sign(v0) <= 0.) {\n            v1 = v;\n            b = m;\n        } else {\n            v0 = v;\n            a = m;\n        }\n    }\n    return m;\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l - p), r = normalize(vec3(f.z, 0, -f.x)), u = cross(f, r), c = f * z, i = c + uv.x * r + uv.y * u;\n    return normalize(i);\n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n\n//#define AA 2\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    csurf = glz();\n    float dist_infin = 1.5;\n    float hh = 2.7;\n\n    vec3 light = normalize(vec3(0.0, 1.0, -2.5)); //light\n    vec2 mo = 1.5 * cos(.5 * rottime() + vec2(0, 11));\n    if  (iMouse.z > 0.0)\n    {\n        mo = (-iResolution.xy + 2.0 * (iMouse.xy)) / iResolution.y;\n    }\n    vec3 ro = vec3(0.0, 0.0, hh); // camera\n    //camera rotation\n    ro.yz *= rot(mo.y);\n    ro.xz *= rot(-mo.x - 1.57);\n\n    const float fl = 1.5; // focal length\n    float dist = dist_infin;\n\n    vec3 bg = vec3(0.7, 0.7, 0.9);;\n    \n    //antialiasing\n    vec3 tot = vec3(0.0);\n    for(int m = 0; m < AA; m++) for(int n = 0; n < AA; n++) {\n            vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o)) / iResolution.y;\n            vec3 rd = GetRayDir(p, ro, vec3(0, 0., 0), fl); //ray direction\n            vec3 col = bg; // background  \n\n            //STEP 1. Calculating bounding sphere\n            float d = length(cross(ro, rd));\n            if(d >= dist) {\n                tot += col;\n                continue;\n            }\n            /*\n            STEP 2.\n            ray tracing inside the bounding sphere, \n            searching for a segment with different signs of the function value \n            at the ends of the segment\n            */\n            float td = abs(dot(ro, rd));\n            d = sqrt(dist * dist - d * d);\n            vec3 pos0 = ro + rd * (td - d);\n            vec3 pos1 = ro + rd * (td + d);\n            vec3 rd0 = pos1 - pos0;\n            vec3 pos = pos0;\n            float val0 = map(pos0);\n            for(float i = 1.; i < nn; i++) {\n                pos1 = pos0 + rd0 * i / (nn - 1.);\n                float val1 = map(pos1);\n                if(sign(val0) * sign(val1) <= 0.) {\n                    //different signs of the function value  at the ends of the segment\n                    //STEP 3. binary search to clarify the intersection of a ray with a surface.\n                    pos = getPoint(pos, pos1, val0, val1);\n                    vec3 nor = calcNormal(pos);\n                    col = calcSkyReflect(rd, nor);\n                    break;\n                }\n                val0 = val1;\n                pos = pos1;\n            }\n            tot += col;\n        }\n    tot = tot / float(AA) / float(AA);\n    //antialiasing\n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}