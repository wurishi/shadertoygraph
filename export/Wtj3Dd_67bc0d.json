{"ver":"0.1","info":{"id":"Wtj3Dd","date":"1561581788","viewed":114,"name":"Mandelnoise","username":"SSHantaram","description":"With fragCoord as input a noise function is used to calculate an x and y offset from a point of interest","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["random","madelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_ITERATIONS = 150;\nconst float ESCAPE_RADIUS = 10.0;\nconst float ZOOM_FACTOR = 0.1;\nconst float OFFSET_FACTOR = 1.0;\n\nfloat hash(vec3 p) {\n    \n    p  = fract( p*0.3183099+.1 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\nfloat noise( in vec3 x ) {\n    \n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(p+vec3(0,0,0)), \n                        hash(p+vec3(1,0,0)),f.x),\n                   mix( hash(p+vec3(0,1,0)), \n                        hash(p+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(p+vec3(0,0,1)), \n                        hash(p+vec3(1,0,1)),f.x),\n                   mix( hash(p+vec3(0,1,1)), \n                        hash(p+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\nfloat layeredNoise(in vec3 x) {\n    return 0.7*noise(x) + 0.24*noise(x*4.0) + 0.055*noise(x*8.0) + 0.01*noise(x*16.0) + 0.005*noise(x*32.0);\n}\n\nfloat smoothIterationCount(vec2 c) {\n    \n    float smoothCount = 0.0;\n\tvec2 z  = vec2(0.0);\n    \n    for( int i=0; i < MAX_ITERATIONS; i++ ) {\n        \n    \tz = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n        \n    \tif( dot(z,z)>(ESCAPE_RADIUS*ESCAPE_RADIUS) ) break;\n        \n    \tsmoothCount += 1.0;\n    }\n    return smoothCount - log2(log2(dot(z,z))) + 4.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 xy = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    \n    // pseudo random offset\n    float xCoord = 2.0*OFFSET_FACTOR*layeredNoise(vec3(xy + vec2(12.0, 43.0 + iTime*0.05), iTime*0.1)) - OFFSET_FACTOR;\n    float yCoord = 2.0*OFFSET_FACTOR*layeredNoise(vec3(xy + vec2(25.0, 64.0 - iTime*0.02), iTime*0.1 + 100.0)) - OFFSET_FACTOR;\n    \n    vec2 c = vec2(xCoord, yCoord);\n    c = vec2(-0.05, 0.6805) + c*ZOOM_FACTOR;\n    \n    float sl = smoothIterationCount(c);\n    \n    vec3 col = vec3(1.0, 1.0, 1.0)*sl*0.02;\n\t\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}