{"ver":"0.1","info":{"id":"st3yDn","date":"1659641080","viewed":76,"name":"MandelbrotLightning","username":"ndeshler","description":"A first pass at visualizing the mandelbrot set","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat IterateMandelbrot( in vec2 c ) {\n// Function and distance smoothing theory by Inigo Quilez\n// https://iquilezles.org/articles/msetsmooth/\n\n    const float B = 256.0;\n\n    float n = 0.0;\n    vec2 z  = vec2(0.0);\n    for( int i=0; i<200; i++ )\n    {\n        z = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c; // z = zÂ² + c\n        if( dot(z,z)>(B*B) ) break;\n        n += 1.0;\n    }\n\n    float sn = n - log2(log2(dot(z,z))) + 4.0;  // equivalent optimized smooth iteration count\n    \n    return sn;\n}\n\n\nvec3 ColorMandelbrot(in vec2 c) {\n    float r =  IterateMandelbrot(c)/10.f;\n    //vec3 color = vec3(cos(r),sin(r),sigmoid(r));\n    //vec3 color = vec3(sigmoid(r)-.5,sigmoid(r)-.5,sigmoid(r)-.5 + sin(r)*sin(r));\n    vec3 color = vec3(cos(r)*cos(r)+.5f,cos(r)*cos(r)+.5f,cos(r)*cos(r)+.5f+sin(r)*sin(r));\n    color = color/length(color);\n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy/2.) / iResolution.x;\n    vec2 origin = vec2(.745,-.186); // an interesting fractal part of the plane\n    \n    // time dependent zoom\n    uv = (uv * 5. * pow(.5, 5. * (sin(iTime/5. - 3.14/2.) + 1.)) - origin);\n    \n    fragColor = vec4(ColorMandelbrot(uv), 1.0f);\n\n}\n\n\nvec3 inMandelbrot(in vec2 c) {\n    \n    float z = 0.0f;\n    vec2 z_vec = vec2(0.0f,0.0f);\n    int iter = 0;\n    int iter_max = 50;\n    \n    while (iter < iter_max) {\n\n        z_vec = vec2(z_vec.x * z_vec.x - z_vec.y*z_vec.y, 2.0f * z_vec.x * z_vec.y) + c;\n        \n        z = length(z_vec);\n        iter += 1;    \n    }\n    \n    if (z <= 2.0f) { return vec3(0.1f, 0.1f, 0.1f); }\n    vec3 color = vec3(0.0f, log(z),0.0f);\n    return color / length(color);\n}\n\n\n\n","name":"Image","description":"","type":"image"}]}