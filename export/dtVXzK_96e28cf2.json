{"ver":"0.1","info":{"id":"dtVXzK","date":"1686234775","viewed":20,"name":"rayMarching technique","username":"Daniela1234","description":"Este código es una modificación del shader encontrado en https://www.shadertoy.com/view/MttGz7. Los cambios se hicieron con fines académicos, para ilustrar la relación entre diferentes conceptos e ilustrar otras figuras. \n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Este código ha sido modificado del código base que se puede encontrar en: \n// https://www.shadertoy.com/view/MttGz7\n\n\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.00001;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n\nstruct Result {\n  float dist;\n  vec3 color;\n};\n\nResult result;\n\n// Operación de intersección de geometría sólida constructiva en distancias calculadas por SDF.\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\n// Operación de unión de geometría sólida constructiva en distancias calculadas por SDF.\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\n// Operación de diferencia de geometría sólida constructiva en distancias calculadas por SDF.\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\n// Función de distancia con signo para un cubo centrado en el origen con ancho = altura = longitud = 2.0\nResult cubeSDF(vec3 p) {\n    vec3 d = abs(p) - vec3(1.0, 1.0, 1.0);// posición - tamaño del cubo\n    float insideDistance = min(max(d.x, max(d.y, d.z)), 0.0);//negativo, dentro del cubo,\n    float outsideDistance = length(max(d, 0.0));// o positivo que indica cuánto está el punto fuera\n    return Result(insideDistance + outsideDistance, vec3(0, 1, 0)); // VERDE\n}\n\n// Función de distancia con signo para una esfera centrada en el origen con radio 1.0;\nResult sphereSDF(vec3 p) {\n//desplazamiento para darle un aspecto ondulado\n    float displacement = sin(5.0 * p.x) * sin(5.0 * p.y) * sin(5.0 * p.z) * 0.25;\n\tfloat sphere_0 = length(p) - 1.0;\n    return Result(sphere_0 + displacement, vec3(0.0, 0.0, 1.0)); // AZUL\n}\n\n// Función de distancia con signo que describe la escena.\n// El valor absoluto del valor devuelto indica la distancia a la superficie.\n// El signo indica si el punto está dentro o fuera de la superficie,\n// siendo negativo indica que está dentro.\nResult sceneSDF(vec3 samplePoint) {\n    Result sphereDist = sphereSDF(samplePoint / 1.2);\n    sphereDist.dist *= 1.2;\n    Result cubeDist = cubeSDF(samplePoint);\n\n    // Combina las distancias\n    float combinedDist = intersectSDF(cubeDist.dist, sphereDist.dist);\n    vec3 combinedColor;\n\n    // Asigna el color basándose en cuál objeto está más cerca\n    if (combinedDist == cubeDist.dist) {\n        combinedColor = cubeDist.color;\n    } else {\n        combinedColor = sphereDist.color;\n    }\n\n    return Result(combinedDist, combinedColor);\n}\n\n// Devuelve la distancia más corta desde el punto de vista hasta la superficie de la escena a lo largo\n// de la dirección de avance. Si no se encuentra ninguna parte de la superficie entre el inicio y el final,\n// devuelve el final.\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection).dist;\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\n// Devuelve la dirección normalizada para avanzar desde el punto de vista para un solo píxel.\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n// Utilizando el gradiente de la SDF, estima la normal en la superficie en el punto p.\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)).dist - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)).dist,\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)).dist - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)).dist,\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)).dist - sceneSDF(vec3(p.x, p.y, p.z - EPSILON)).dist\n    ));\n}\n\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);    \n    return color;\n}\n\n/**\n * Return a transform matrix that will transform a ray from view space\n * to world coordinates, given the eye point, the camera target, and an up vector.\n *\n * This assumes that the center of the camera is aligned with the negative z axis in\n * view space when calculating the ray marching direction. See rayDirection.\n */\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(8.0, 5.0, 7.0);\n    \n    mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n    \n    float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n    }\n    \n    // The closest point on the surface to the eyepoint along the view ray\n    vec3 p = eye + dist * worldDir;\n    vec3 objColor = sceneSDF(p).color; // color of the nearest object\n\n    vec3 K_a = 0.2 * objColor;\n    vec3 K_d = 0.7 * objColor;\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 1.0;\n    \n    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}