{"ver":"0.1","info":{"id":"stcSW7","date":"1639213453","viewed":358,"name":"20211127_TDF2021-SS-Quarter","username":"0b5vr","description":"kill me (see L132)\n\nShader Showdown @ TokyoDemoFest 2021. Coded in 25 minutes.\n\nThe intended one: https://www.shadertoy.com/view/stcXRs\n\nhttps://tokyodemofest.jp/\n","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["3d","pathtracing","quadtree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define fs(i) (fract(sin((i)*114.514)*1919.810))\n#define lofi(i,j) (floor((i)/(j))*(j))\n\nconst float PI=acos(-1.);\nconst float TAU=PI*2.;\n\nfloat time;\nfloat seed;\n\nfloat random(){\n  seed=fs(seed);\n  return seed;\n}\n\nmat3 orthBas(vec3 z){\n  z=normalize(z);\n  vec3 up=abs(z.y)>.99?vec3(0,0,1):vec3(0,1,0);\n  vec3 x=normalize(cross(up,z));\n  return mat3(x,cross(z,x),z);\n}\n\nmat2 r2d(float t){\n  return mat2(cos(t),sin(t),-sin(t),cos(t));\n}\n\nvec3 sampleLambert(vec3 n){\n  float phi16=TAU*random();\n  float ct=sqrt(random());\n  float st=sqrt(1.0-ct*ct);\n  return orthBas(n)*vec3(\n    cos(phi16)*st,\n    sin(phi16)*st,\n    ct\n  );\n}\n\nvec4 ibox(vec3 ro,vec3 rd,vec3 s){\n  vec3 src=ro/rd;\n  vec3 dst=abs(s/rd);\n  vec3 fv=-src-dst;\n  vec3 bv=-src+dst;\n  float f=max(max(fv.x,fv.y),fv.z);\n  float b=min(min(bv.x,bv.y),bv.z);\n  if(f<0.||b<f){return vec4(1E2);}\n  vec3 n=-sign(rd)*step(fv.zxy,fv)*step(fv.yzx,fv);\n  return vec4(n,f);\n}\n\nstruct QTR{\n  vec3 cell;\n  vec3 size;\n  float len;\n  bool hole;\n};\n\nQTR qt(vec3 ro,vec3 rd){\n  QTR r;\n  r.size=vec3(1,1E3,1);\n  for(int i=0;i<4;i++){\n    r.size/=2.;\n    r.cell=lofi(ro+rd*1E-2*r.size,r.size)+r.size/2.;\n    float d1=fs(dot(vec3(.2,1.4,-2.),r.cell));\n    r.hole=(\n      r.cell.y>0.\n      || d1>.8\n    );\n    if(r.hole){break;}\n    float d2=fs(dot(vec3(4,5,6),r.cell));\n    if(d2>.5){break;}\n  }\n  \n  \n  vec3 src=(ro-r.cell)/rd;\n  vec3 dst=abs(r.size/2./rd);\n  vec3 bv=-src+dst;\n  float b=min(min(bv.x,bv.y),bv.z);\n  r.len=b;\n  \n  return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  vec2 p=uv*2.-1.;\n  p.x*=iResolution.x/iResolution.y;\n  \n  time=iTime;\n  seed=texture(iChannel0,uv*8.).x;\n  seed+=fract(time);\n  \n  vec3 col=vec3(0);\n  vec3 colRem=vec3(1);\n  \n  p.xy*=r2d(.4);\n  \n  vec3 co=vec3(0,1,2);\n  co.zx*=r2d(.2*time);\n  vec3 ct=vec3(.2,-1,0);\n  vec3 cz=normalize(co-ct);\n  \n  vec3 ro=co;\n  vec3 ro0=ro;\n  vec3 rd=orthBas(cz)*normalize(vec3(p,-2));\n  vec3 rd0=rd;\n  \n  bool shouldInit=true;\n  float samples=0.;\n  \n  for(int i=0;i<99;i++){\n    if(shouldInit){\n      shouldInit=false;\n      ro=ro0;\n      rd=rd0;\n      colRem=vec3(1);\n      samples++;\n    }\n    \n    QTR qtr=qt(ro,rd);\n    \n    vec4 isect=vec4(1E2);\n    vec3 off=vec3(0);\n    if(!qtr.hole){\n      off.y-=1.;\n      float d1=fs(dot(qtr.cell,vec3(.2,.8,.6)));\n      off.y-=sin(d1*6.+time);\n      vec3 size=vec3(qtr.size/2.-.02);\n      isect=ibox(ro-qtr.cell-off,rd,size);\n    }\n    \n    if(isect.w<1E2){\n      ro+=rd*qtr.len; // fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck\n      // intended: ro+=rd*isect.w;\n\n      if((ro-off).y>-1.*qtr.size.x){\n        col+=colRem*5.;\n        colRem*=0.;\n      }\n\n      vec3 N=isect.xyz;\n      colRem*=.3;\n     \n      rd=mix(\n        sampleLambert(N),\n        reflect(rd,N),\n        .5\n      );\n    }else{\n      ro+=rd*qtr.len;\n    }\n    \n    if(colRem.x<.01){\n      shouldInit=true;\n    }\n  }\n  \n  col/=samples;\n  col*=1.0-length(p)*.3;\n  col=vec3(\n    smoothstep(.1,.9,col.x),\n    smoothstep(.0,1.,col.y),\n    smoothstep(-.1,1.1,col.z)\n  );\n\n  fragColor = vec4(col,1);\n}\n\n","name":"Image","description":"","type":"image"}]}