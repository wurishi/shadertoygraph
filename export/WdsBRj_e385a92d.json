{"ver":"0.1","info":{"id":"WdsBRj","date":"1588619418","viewed":154,"name":"Compressible Fluid","username":"Fryer","description":"Simple compressible fluid in a single buffer.\nThe visible colors are:\n- Red: Mass.\n- Green: Temperature.\n- Blue: Momentum.\n\nBuffer A holds the following fluid state:\n- R, G: Velocity [-1..1].\n- B: Mass [0..1].\n- A: VRMS = Sqrt(Temperature / Mass) [0..1].","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["fluid","physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// = Compressible fluid =\n// © 2020 Jacob Lindberg\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Draw the fluid state.\n    // - R: Mass.\n    // - G: Temperature.\n    // - B: Momentum.\n    vec4 cell = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec2 vel = cell.xy * 2.0 - vec2(1);\n    fragColor = vec4(cell.z, cell.w * cell.w * cell.z * 2.0, cell.z * length(vel) / sqrt(2.0) * 2.0, 1.0);\n    // Add a momentum grid.\n    vec2 gridPos = fragCoord - vel * cell.z * 64.0;\n    float xGrid = max(0.0, 1.0 - abs(mod(gridPos.x * 0.5, 16.0) - 1.0));\n    float yGrid = max(0.0, 1.0 - abs(mod(gridPos.y * 0.5, 16.0) - 1.0));\n    float xGrid2 = max(0.0, 1.0 - abs(mod(gridPos.x, 16.0) - 1.0));\n    float yGrid2 = max(0.0, 1.0 - abs(mod(gridPos.y, 16.0) - 1.0));\n    fragColor += vec4(vec3(min(1.0, xGrid + yGrid + min(1.0, xGrid2 + yGrid2) * 0.5) * 0.2), 0.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// = Compressible fluid =\n// © 2020 Jacob Lindberg\n\nvec4 init(vec2 pos) {\n    // Start with a swirl.\n    vec2 cPos = pos / iResolution.xy * 2.0 - vec2(1);\n    vec2 vel = vec2(cPos.y, -cPos.x) / length(cPos) * 0.4;\n    vec4 cell = vec4(0.5 + vel.x, 0.5 + vel.y, 0.2, 0.1);\n    return cell;\n}\n\nvec4 getCell(ivec2 pos) {\n    ivec2 res = ivec2(iResolution.xy);\n    return texelFetch(iChannel0, (pos + res) % res, 0);\n}\n\nvoid addPatch(inout vec2 vel, inout float mass, inout float temp, vec2 pOff, vec2 pVel, float pMass) {\n    // Patch influence on self.\n    float hFrac = max(0.0, 1.0 - abs(pOff.x));\n    float vFrac = max(0.0, 1.0 - abs(pOff.y));\n    float frac = hFrac * vFrac;\n    float fMass = pMass * frac;\n    if (fMass == 0.0) {\n        // No influence.\n        return;\n    }\n    if (mass == 0.0) {\n        // Nothing in self.\n        vel += pVel;\n        mass += fMass;\n        return;\n    }\n    // Energy before interaction.\n    float preE = temp + dot(vel, vel) * mass + dot(pVel, pVel) * fMass;\n    // Add velocity and mass.\n    vel = (vel * mass + pVel * fMass) / (mass + fMass);\n    mass += fMass;\n    // Add dropped energy as temperature.\n    float postEk = dot(vel, vel) * mass;\n    temp = preE - postEk;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (iFrame == 0) {\n        fragColor = init(fragCoord);\n        return;\n    }\n    ivec2 pos = ivec2(fragCoord);\n    vec2 vel = vec2(0);\n    float mass = 0.0;\n    float temp = 0.0;\n    for (int x = -2; x <= 2; x++) {\n        for (int y = -2; y <= 2; y++) {\n            // Advect neighbor.\n            ivec2 oOff = ivec2(x, y);\n            vec4 other = getCell(pos + oOff);\n            vec2 oVel = other.xy * 2.0 - vec2(1);\n            vec2 nOff = vec2(oOff) + oVel;\n            // Split into patches and spread.\n            float pMass = other.z * 0.25;\n            float pVrms = other.w;\n            // Left patch.\n            vec2 pOff = nOff - vec2(pVrms, 0.0);\n            vec2 pVel = oVel - vec2(pVrms, 0.0);\n            addPatch(vel, mass, temp, pOff, pVel, pMass);\n            // Bottom patch.\n            pOff = nOff - vec2(0.0, pVrms);\n            pVel = oVel - vec2(0.0, pVrms);\n            addPatch(vel, mass, temp, pOff, pVel, pMass);\n            // Right patch.\n            pOff = nOff + vec2(pVrms, 0.0);\n            pVel = oVel + vec2(pVrms, 0.0);\n            addPatch(vel, mass, temp, pOff, pVel, pMass);\n            // Top patch.\n            pOff = nOff + vec2(0.0, pVrms);\n            pVel = oVel + vec2(0.0, pVrms);\n            addPatch(vel, mass, temp, pOff, pVel, pMass);\n        }\n    }\n    fragColor = clamp(vec4(vel * 0.5 + vec2(0.5), mass, sqrt(temp / mass)), 0.0, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}