{"ver":"0.1","info":{"id":"XXfBzX","date":"1728668310","viewed":57,"name":"Limitless Grid","username":"osmarks","description":"https://github.com/ghisguth/sunlight/tree/HEAD/limitlessgrid \"clone\"","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float lscale = 0.1;\nfloat lscaleh = 0.05;\nfloat linethick = 0.06;\nfloat linebright = 0.02;\nfloat speed = 0.03;\n\nfloat dfn(float x) {\n     if (abs(x)>lscale*100.0) return 100.0;\n    return abs(mod(x - lscaleh, lscale) - lscaleh) / lscale;\n}\n\nfloat dfn_nonlin(float x) {\n    //return x;\n    if (x < linethick) return linebright;\n    else return 0.0;\n}\n\nmat3 rotation3d(vec3 axis, float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  float oc = 1.0 - c;\n\n  return mat3(\n    oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n    oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s, \n    oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c\n  );\n}\n\nvec3 ray_direction(vec2 uv, vec3 cam, vec3 target, float zoom) {\n    vec3 f = normalize(target - cam);\n    vec3 r = normalize(cross(vec3(0.0, 1.0, 0.0), f));\n    vec3 u = cross(f, r);\n    return normalize(uv.x * r + uv.y * u + zoom * f);\n}\n\nvec3 line_plane_intersect(vec3 l0, vec3 ldir, vec3 p0, vec3 n, out float lam) {\n    lam = dot(p0 - l0, n) / dot(ldir, n);\n    vec3 isect = l0 + ldir * lam;\n    return isect;\n}\n\nvec3 yz_col = vec3(1.0, 0.0, 0.1);\nvec3 xz_col = vec3(1.0, 0.0, 0.0);\nvec3 xy_col = vec3(1.0, 0.0, 0.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * fragCoord / iResolution.xx - vec2(1.0, 1.0);\n        \n    vec3 l0 = vec3(0.0); // this cannot actually be moved off zero or some handwaves made somewhere (probably dfn(isect)) break\n    vec3 ldir = ray_direction(uv, l0, vec3(sin(speed * iTime), cos(speed * iTime), 0.1), 1.0);\n    \n    float n = 1.0;\n    vec3 bri = vec3(0.0);\n    \n    for (float n = 0.0; n <= 8.0; n += 1.0) {\n        {\n            // yz plane\n            vec3 p0 = vec3(n, 0.0, 0.0);\n            vec3 norm = vec3(1.0, 0.0, 0.0);\n            float lam;\n            vec3 isect = line_plane_intersect(l0, ldir, p0, norm, lam);\n            bri += yz_col * (dfn_nonlin(dfn(isect.y)) + dfn_nonlin(dfn(isect.z)));\n        }\n        {\n            // xz plane\n            vec3 p0 = vec3(0.0, n, 0.0);\n            vec3 norm = vec3(0.0, 1.0, 0.0);\n            float lam;\n            vec3 isect = line_plane_intersect(l0, ldir, p0, norm, lam);\n            bri += xz_col * (dfn_nonlin(dfn(isect.x)) + dfn_nonlin(dfn(isect.z)));\n        }\n        {\n            // xy plane\n            vec3 p0 = vec3(0.0, 0.0, n);\n            vec3 norm = vec3(0.0, 0.0, 1.0);\n            float lam;\n            vec3 isect = line_plane_intersect(l0, ldir, p0, norm, lam);\n            bri += xy_col * (dfn_nonlin(dfn(isect.x)) + dfn_nonlin(dfn(isect.y)));\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(bri,1.0);\n}","name":"Image","description":"","type":"image"}]}