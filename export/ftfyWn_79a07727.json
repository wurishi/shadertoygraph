{"ver":"0.1","info":{"id":"ftfyWn","date":"1647733668","viewed":117,"name":"Lorenz attractor for each pixel","username":"Masterchef365","description":"Each pixel is it's own self-contained Lorenz attractor, and each starts from a slightly different position.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["lorenz","ode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / vec4(10., 28., 148./3., 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 lorenz(vec3 p, vec3 coeff) {\n    return vec3(\n        coeff.x * (p.y - p.x), \n        p.x * (coeff.y - p.z) - p.y, \n        p.x * p.y - coeff.z * p.z\n    );\n}\n\n// Step size\nconst float h = 0.01;\n\nconst vec3 coeff_base = vec3(10., 28., 8./3.);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iTime < 4.) {\n        vec3 init = sin(vec3(uv, uv.x + uv.y));\n        fragColor = vec4(init, 1.);\n        return;\n    }\n    \n    \n    vec3 coeff = coeff_base;// + vec3(uv, 0.) / 20. - 1.;\n    \n    vec3 last = texture(iChannel0, uv).xyz;\n    \n    vec3 k1 = h * lorenz(last, coeff);\n    vec3 k2 = h * lorenz(last + k1 / 2., coeff);\n    vec3 k3 = h * lorenz(last + k2 / 2., coeff);\n    vec3 k4 = h * lorenz(last + k3, coeff);\n    \n    vec3 next = last + (k1 + 2. * k2 + 2. * k3 + k4) / 6.;\n    \n    fragColor = vec4(next,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}