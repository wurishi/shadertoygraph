{"ver":"0.1","info":{"id":"MdlcD7","date":"1488553603","viewed":386,"name":"Spinning Donuts","username":"AndyF","description":"Lattice of torus shapes with ambient lighting derived from normal direction.\nBugs: Artefacts due to rotation\nInspired by: shadertoy.com/view/XdKGWm, shadertoy.com/view/4tcGDr, and https://iquilezles.org/articles/distfunctions/distfunctions.htm","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf","lighting","fogging"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdTorus( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    return (length(q)-t.y);// * 0.5;\n}\n\nfloat sdBox( vec3 pos, vec3 size )\n{\n    vec3 d = abs(pos) - size;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nvec3 duplicate(vec3 pos, vec3 cellSize)\n{\n    return mod(pos, cellSize) - 0.5 * cellSize;\n}\n\nvec4 opRotTrans( vec3 p, mat4 m )\n{\n    return inverse(m) * vec4(p.x, p.y, p.z, 1.0);\n}\n\nfloat distfunc(vec3 p)\n{\n\tfloat the = iTime;\n\tmat2 rotMatrix = mat2(cos(the), -sin(the), sin(the), cos(the));\n\n    vec3 c = vec3(5.0);\n    vec3 q = duplicate(p, c);\n    q.yz *= rotMatrix;\n    q.xy *= rotMatrix;\n    //return sdBox(q, vec3(1.3, 1.6, 0.9));\n    return sdTorus(q, vec2(1.3, 0.5));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Create rotation matrix\n    float theta = iTime*.25;\n    mat2 rotMatrix = mat2(cos(theta), -sin(theta), sin(theta), cos(theta));\n\n    // Setup camera\n    vec3 cameraOrigin = vec3(0.0, 5.0 * cos(theta), iTime);\n    vec3 cameraTarget = vec3(0.0, 0.0, 0.0);\n    vec3 upDirection = vec3(0.0, 1.0, 0.0);\n    vec3 cameraDir = normalize(cameraTarget - cameraOrigin);\n    vec3 cameraRight = normalize(cross(upDirection, cameraOrigin));\n    vec3 cameraUp = -cross(cameraDir, cameraRight);\n\n    // Correct screen limits\n    vec2 screenPos =  (2.* fragCoord - iResolution.xy ) / iResolution.y;\n\n    // Set ray direction (and apply rotation)\n    vec3 rayDir = normalize(cameraRight * screenPos.x + cameraUp * screenPos.y + cameraDir);\n    rayDir.xz *= rotMatrix;\n\n    /** Ray Marching **/\n    const int MAX_ITER = 100; // 100 is a safe number to use, it won't produce too many artifacts and still be quite fast\n    const float MAX_DIST = 1000.0; // Make sure you change this if you have objects farther than 1000 units away from the camera\n    const float EPSILON = 0.01; // At this distance we are close enough to the object that we have essentially hit it\n\n    float totalDist = 0.0;\n    vec3 pos = cameraOrigin;\n    float dist = EPSILON;\n\n    for (int i = 0; i < MAX_ITER; i++)\n    {\n        // Either we've hit the object or hit nothing at all, either way we should break out of the loop\n        if (dist < EPSILON || totalDist > MAX_DIST)\n            break; // If you use windows and the shader isn't working properly, change this to continue;\n\n        dist = distfunc(pos); // Evalulate the distance at the current point\n        totalDist += dist;\n        pos += dist * rayDir; // Advance the point forwards in the ray direction by the distance\n    }\n\n    /** Lighting **/\n    if (dist < EPSILON)\n    {\n        vec2 eps = vec2(0.0, EPSILON);\n        // Estimate the normal on the surface\n        vec3 normal = normalize(vec3(\n            distfunc(pos + eps.yxx) - distfunc(pos - eps.yxx),\n            distfunc(pos + eps.xyx) - distfunc(pos - eps.xyx),\n            distfunc(pos + eps.xxy) - distfunc(pos - eps.xxy)));\n        vec3 ambient = (normal + vec3(1.0)) * 0.25;\t\t// Let the ambient color be defined by the normal direction :)\n        float diffuse = max(0.0, dot(-rayDir, normal));\n        float specular = pow(diffuse, 32.0);\n        vec3 color = ambient + vec3(diffuse + specular);\n        float fog = 1.0 / (1.0 + totalDist * totalDist * 0.01);\t// Simple fogging function\n        fragColor = vec4(color * fog, 1.0);\n    }\n    else\n    {\n        fragColor = vec4(0.0);\n    }\n}","name":"Image","description":"","type":"image"}]}