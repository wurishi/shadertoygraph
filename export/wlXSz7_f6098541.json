{"ver":"0.1","info":{"id":"wlXSz7","date":"1562778917","viewed":160,"name":"Saturn ring unbend","username":"Nomad1","description":"Image deformation when placed on Saturn-like rings. Evolution of shader https://www.shadertoy.com/view/wsfXDl","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["saturn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    /**** This part is specific for ShaderToy, not needed in GLSL shader ****/\n    float s_ringZoom = (1.0 + (cos(iTime)+ 1.0) * 10.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.y;\n\n    /**** Universal GLSL shader part ****/\n    const float ringWidth = (1.0 - 0.414414414414414); // constant to determine the size of central gap and ring thickness\n    const float yscale = 0.5;\n    const float orbitScale = M_PI * 2.0 / 15.0; // 24 degree sector\n    \n    // normalize and center uv\n    \n    uv -= vec2(0.5, s_ringZoom * yscale); // center point\n\n    float vlength = (length(uv) / yscale - s_ringZoom + ringWidth) / ringWidth; // radius of the new circle\n\n    // deform UV coords\n    \n    vec2 nuv = vec2((atan(uv.y, uv.x * s_ringZoom) + M_PI * 0.5) / orbitScale, vlength); // second hug. we're undoing first magic but only for X coord multiplied by 0.5\n    \n    if (step(0.0, nuv.y) * step(nuv.y, 1.0) == 0.0)\n    {\n        fragColor = vec4(0.0);\n        return;\n    }\n    \n    vec3 ringsColor = texture( iChannel0, vec2(0.0, nuv.y)).xyz;\n   \n    \n    vec4 imageColor = texture(iChannel1, nuv) * step(-.5, nuv.x) * step(nuv.x, 0.5);\n    \n\n    fragColor = vec4(mix(ringsColor, imageColor.xyz, imageColor.a) , 1.0);\n}","name":"Image","description":"","type":"image"}]}