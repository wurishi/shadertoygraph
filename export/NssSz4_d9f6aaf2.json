{"ver":"0.1","info":{"id":"NssSz4","date":"1618344470","viewed":111,"name":"Chairs from Meyzieu","username":"atutahi","description":"Chair with iq's apple tutorial as a base.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarchappletuto"],"hasliked":0,"parentid":"7sfXz8","parentname":"Rounding Corners (iq tuto)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(float n)\n{\n    return fract(sin(n) * 43758.5453);\n}\n\nfloat noise(vec3 x)\n{\n    vec3 p = floor(x);\n    vec3 k = fract(x);\n    k = k * k * (3.0 - 2.0 * k);\n    \n    float n = p.x + p.y * 57.0 + p.z * 113.0;\n    float a = hash(n);\n    float b = hash(n + 1.0);\n    float c = hash(n + 57.0);\n    float d = hash(n + 58.0);\n    \n    float e = hash(n + 113.0);\n    float f = hash(n + 114.0);\n    float g = hash(n + 170.0);\n    float h = hash(n + 171.0);\n    \n    float res = mix(mix(mix(a, b, k.x), mix(c, d, k.x), k.y),\n                    mix(mix(e, f, k.x), mix(g, h, k.x), k.y),\n                    k.z);\n    return res;\n}\n\nfloat fbm(vec3 p)\n{\n    float f = 0.;\n    f += 0.5000 * noise(p); p *= 2.02;\n    f += 0.2500 * noise(p); p *= 2.03;\n    f += 0.1250 * noise(p); p *= 2.01;\n    f += 0.0625 * noise(p);\n    \n    return f / 0.9375;\n}\n\nvec3 floorMaterial(vec3 pos, vec3 n)\n{\n    vec3 col = vec3(0.02, 0.01, 0.02);\n    \n    float f = fbm(pos * vec3(6.0, 0.0, 0.5));\n    col = mix(col, vec3(0.2, 0.05, 0.01), f);\n    \n    f = smoothstep(0.6, 1.0, fbm(pos * 48.0));\n    col = mix(col, vec3(0.15, 0.1, 0.1), f);\n    \n    return col;\n}\n\nvec3 fruitMaterial(vec3 pos, vec3 n)\n{\n    float a = atan(pos.x, pos.z);\n    float r = length(pos.xz);\n    \n    // red\n    vec3 col = vec3(1.0, 0.0, 0.0);\n    \n    // mix to green\n    float f = smoothstep(0.2, 1.0, fbm(pos));\n    col = mix(col, vec3(0.8, 1.0, 0.2), f);\n    \n    // make it dirty\n    f = smoothstep(0.0, 1.0, fbm(pos * 4.0));\n    col *= 0.8 + 0.2 * f;\n    \n    //frekles\n    f = smoothstep(0.7, 0.9, fbm(pos * 48.0));\n    col = mix(col, vec3(0.9, 0.9, 0.6), f);\n    \n    // stripes\n    f = fbm(vec3(a * 7.0, pos.y, pos.z) * 2.0);    \n    f *= smoothstep(0.4, 1.2, pos.y + 0.5 * (noise(pos.yxz) - 0.5));\n    col = mix(col, vec3(0.4, 0.2, 0.0), 0.5 * f);\n    \n    // top cap\n    f = smoothstep(0.1, 0.2, r);\n    col = mix(col, vec3(0.6, 0.6, 0.5), 1.0 - f);\n    \n    // fake ao\n    float ao = n.y * 0.5 + 0.5;\n    col *= ao;\n    \n    return col;\n}\n\nvec3 pillarMaterial(vec3 pos, vec3 n)\n{\n    vec3 col = vec3(0.75, 0.4, 0.15);\n    \n    float f = fbm(pos * vec3(0.5, 2.0, 10.0));\n    col = mix(col, vec3(0.3, 0.2, 0.1), f);\n    \n    f = smoothstep(0.6, 1.0, fbm(pos * 48.0));\n    col = mix(col, vec3(0.2, 0.2, 0.15), f);   \n    \n    return col;\n}\n\nfloat fruitShape(vec3 p)\n{\n    float f = pow(dot(p.xz, p.xz), 0.2);    \n    p.y -= 0.5 * f;\n    return length(p) - 1.0;\n}\n\nfloat floorShape(vec3 p)\n{\n    return p.y + 0.5;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nvec3 opRep( vec3 p, vec3 c)\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return q;\n}\n\nfloat pillarShape(vec3 p)\n{\n    float period = 3.0;\n    p = opRep(p, vec3(period, 0.0, period));\n\n    p.y += 0.1;\n    \n    float r = 0.012;    \n    \n    float bottomBend = p.z > 0.0 ? 0.0 : 0.135 - 0.15 * cos(abs(p.y-0.2) + 0.1);\n    \n    vec3 q = p + vec3(0.0, 0.0, bottomBend);\n    \n    // bottom box\n    float d = sdRoundBox(q, vec3(0.5, 0.5, 0.5), r);\n    \n    // feet x\n    //d = opSubtraction(    \n        sdRoundBox(q, vec3(0.4, 0.45, 0.6), r),\n        d);\n    \n    // feet y\n    //d = opSubtraction(\n        sdRoundBox(q, vec3(0.6, 0.45, 0.4), r),\n        d);\n    \n    // under seat\n    d = min(d,\n        sdRoundBox(p + vec3(0.0, -0.35, 0.0), vec3(0.45, 0.12, 0.45), r));\n    \n    float backBend = 0.6 - 0.135 * cos(p.y * 1.2 - 0.2);\n    \n    // back box\n    float backD = sdRoundBox(p + vec3(0.0, -0.9, backBend), vec3(0.5, 0.5, 0.02), r);\n    \n    // back hole\n    backD = opSubtraction(\n        sdRoundBox(p + vec3(0.0, -0.9, backBend), vec3(0.4, 0.8, 0.05), r),\n        backD);\n        \n    // back middle\n    backD = min(backD,\n        sdRoundBox(p + vec3(0.0, -0.8, backBend + cos(p.x * 0.9) - .93), vec3(0.4, 0.05, 0.002), r));\n    \n    // back top\n    backD = min(backD,\n        sdRoundBox(p + vec3(0.0, -1.3, backBend + cos(p.x * 1.1) - .9), vec3(0.4, 0.05, 0.002), r));\n    \n    d = min(d, backD);\n    \n    return d;\n}\n\nvec2 map(vec3 p)\n{\n    vec2 d1 = vec2(fruitShape(p), 1.0);    \n    vec2 d2 = vec2(floorShape(p), 2.0);\n    vec2 d3 = vec2(pillarShape(p), 3.0);\n    d1 = d3.x < d2.x ? d3 : d2;\n    return d1;\n}\n\nvec2 intersect(vec3 ro, vec3 rd)\n{\n    for (float t = 0.0; t < 128.0;)\n    {\n        vec3 pos = ro + t*rd;\n        pos = pos;\n        vec2 h = map(pos);\n        if (h.x < 0.0001) return vec2(t, h.y);\n        t += h.x;        \n    }\n    \n    return vec2(0.0);\n}\n\nvec3 calcNormal(vec3 p)\n{\n    vec3 e = vec3(0.001, 0.0, 0.0);\n    vec3 n;\n    n.x = map(p + e.xyy).x - map(p - e.xyy).x;\n    n.y = map(p + e.yxy).x - map(p - e.yxy).x;\n    n.z = map(p + e.yyx).x - map(p - e.yyx).x;\n    return normalize(n);\n}\n\nfloat softShadow(vec3 ro, vec3 rd)\n{\n    float res = 1.0;    \n    for (float t = 0.1; t < 32.0;)\n    {\n        float h = map(ro + t * rd).x;\n        if (h < 0.001) return 0.0;\n        res = min(res, 32.0 * h/t);\n        t+= h;\n    }\n    \n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 q = fragCoord/iResolution.xy;\n    vec2 p = (2.0 * q - 1.0) * vec2(1.77, 1.0);\n    \n    float rot = iTime * 0.05;\n    float zoom = 3.0 + 0.2 * sin(iTime * 0.8) * 0.5;\n    vec3 ro = zoom * vec3(cos(rot), 1.0, sin(rot));\n    vec3 ww = normalize(vec3(0.0, 0.0, 0.0) - ro);  \n    vec3 uu = normalize(cross(vec3(0.0, 1.0, 0.0), ww));\n    vec3 vv = normalize(cross(ww, uu));\n    vec3 rd = normalize(p.x * uu + (p.y + 0.2) * vv + 1.5 * ww);\n    \n    vec2 t = intersect(ro, rd);\n    vec3 col = vec3(0.8);\n    if (t.y > 0.5)\n    {\n        vec3 pos = ro + t.x * rd;\n        vec3 n = calcNormal(pos);\n        float lightRot = iTime;\n        vec3 l = normalize(vec3(cos(lightRot), 1.5, sin(lightRot)));\n        vec3 blig = vec3(-l.x, l.y, -l.z);\n        vec3 ref = reflect(rd, n);\n        \n        float con = 1.0;\n        float amb = n.y * 0.5 + 0.5;\n        float dif = max(0.0, dot(n, l));\n        float bac = max(0.0, 0.2 + 0.8 * dot(n, blig));\n        float sha = softShadow(pos, l);\n        float spe = pow(clamp(dot(l, ref), 0.0, 1.0), 8.0);\n        float rim = pow(1.0 + dot(n, rd), 2.5);\n        \n        col = con * vec3(0.1, 0.15, 0.2);\n        col += amb * vec3(0.2, 0.15, 0.2);\n        col += dif * vec3(1.0, 0.97, 0.85) * sha;\n        col += bac * vec3(1.0, 0.97, 0.85);\n       \n        if (t.y > 2.5)\n        {\n            col *= pillarMaterial(pos, n);\n        }        \n        else if (t.y > 1.5)\n        {\n            col *= floorMaterial(pos, n);\n        }\n        else\n        {\n            col *= fruitMaterial(pos, n);\n        }\n        \n        col += 0.25 * rim * amb;\n        col += 0.3 * spe * sha * amb;\n        \n        col = col * 0.1 + 0.9 * sqrt(col);\n        col *= vec3(0.9, 0.8, 0.7);\n    }\n    \n    col *= 0.2 + 0.8 * pow(16.0 * q.x*q.y*(1.0 - q.x)*(1.0-q.y), 0.2);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}