{"ver":"0.1","info":{"id":"ds2SR1","date":"1670184618","viewed":152,"name":"3d grid & rotation","username":"ChunderFPV","description":"A simple xyz grid wrapped around the observer with rotation via mouse.  In case this helps anyone.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d","mouse","grid","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S 20.0 // scale\n#define R iResolution.xy\n#define M iMouse\nmat2 rot(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); } // rotate\nvoid mainImage(out vec4 RGBA, in vec2 XY)\n{\n    vec2 m = (M.xy-.5*R)/R.y*2.; // mouse coords\n    vec2 uv = (XY-R*.5)/R.y; // screen coords\n    vec3 rd = normalize(vec3(uv, 1))*S; // 3d uv (ray direction)\n    rd.yz *= rot(-m.y*1.57); // pitch\n    rd.xz *= rot(-m.x*1.57); // yaw\n    vec3 c = vec3(.01); // background\n    vec3 g = abs(fract(rd+.5)-.5)/fwidth(rd); // xyz grid\n    c += max(vec3(0), 1.-g); // max 0 to prevent negative rgb\n    RGBA = vec4(pow(c, vec3(.4545)), 1.); // output with gamma correction\n}","name":"Image","description":"","type":"image"}]}