{"ver":"0.1","info":{"id":"4ctfWS","date":"1733435411","viewed":904,"name":"Circle For 3 Points","username":"iq","description":"Computes the circle that passes through 3 points. I'm aware there are other implementations already in Shadertoy. This is shorter and most likely faster.","likes":58,"published":3,"flags":0,"usePreview":0,"tags":["2d","circle","points"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2024 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Computes the circle that passes through 3 points\n//   .xy = center\n//   .z  = radius\n//   .w  = orientation (sign only)\nvec4 getCircle( vec2 a, vec2 b, vec2 c )\n{\n  vec2  ba = b-a;\n  vec2  cb = c-b;\n  vec2  ac = a-c;\n  float de = ba.x*cb.y-ba.y*cb.x; // zero if points are colinear\n  vec2  ce = 0.5*(a+b+vec2(ba.y,-ba.x)*dot(ac,cb)/de);\n  return vec4( ce, length(a-ce), de );\n}\n\n//-------------------------------------------------------------\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // normalized pixel coordinates\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    float px = 2.0/iResolution.y;\n\n    // animate three points (15 second loop)\n    vec2 p0 = vec2(0.3,0.0)+vec2(0.8,0.5)*sin( iTime*vec2(1.0,2.0)*6.283185/15.0 + vec2(5.0,1.0) );\n    vec2 p1 = vec2(0.3,0.0)+vec2(0.8,0.5)*sin( iTime*vec2(1.0,1.0)*6.283185/15.0 + vec2(2.0,0.0) );\n    vec2 p2 = vec2(0.3,0.0)+vec2(0.8,0.5)*sin( iTime*vec2(2.0,1.0)*6.283185/15.0 + vec2(3.0,4.0) );\n\n    // compute circle from the three points\n    vec4 cir = getCircle( p0, p1, p2 );\n\n    // draw background\n    vec3 col = vec3(1.0 - 0.1*length(p));\n\n    // draw circle\n    {\n    float d = length(p-cir.xy)-cir.z;\n    col *= 1.0 - 0.5/(1.0+64.0*max(0.0,d));\n    col = mix(col, vec3(1.0,cir.w>0.0?0.5:0.0,cir.w>0.0?0.0:0.5), smoothstep(1.5*px,0.0,d));\n    }\n    \n    // draw the three points\n    {\n    float d = min(min(length(p-p0),length(p-p1)),length(p-p2))-0.03;\n    col *= 1.0 - 0.5/(1.0+128.0*max(d,0.0));\n    col = mix(col, vec3(1.0), 1.0-smoothstep(0.0, 1.5*px, d));\n    }\n\n    // add a bit of texture\n    col += 0.02*sin(150.0*p.x)*sin(150.0*p.y);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}