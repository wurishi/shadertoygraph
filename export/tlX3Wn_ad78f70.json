{"ver":"0.1","info":{"id":"tlX3Wn","date":"1556041786","viewed":255,"name":"Grid Parallax","username":"Wuszt","description":"Simple grid","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["parallaxgrid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float CELLSIZE = 0.75f;\nconst float SPEED = 400.55f;\nconst float DIST = 0.1f;\n\nconst float OFFSET = 0.3f;\n\n#define FILL_WALLS\n\n#ifndef FILL_WALLS\nconst int ITERATIONS = 25;\n#endif\n\nvec4 Grid(vec2 uv)\n{    \n    float invertedAspect = iResolution.y / iResolution.x;\n    \n    uv.y *= invertedAspect;\n    uv.x += sin(iTime * SPEED * 1.0f / iResolution.x) * DIST;\n    uv.y += cos(iTime * SPEED * 1.0f / iResolution.x) * DIST;\n\n    float cellSize = 0.1f * CELLSIZE;\n    float thickness = 0.001f;\n\n    vec2 closest = round(uv / cellSize) * cellSize;\n    vec2 distances = abs(closest - uv);\n    distances.y *= 0.5f;\n    \n    float x = step(0.0f,thickness - distances.x);\n    float y = step(0.0f,thickness - distances.y);\n\n    return max(x,y) * vec4(1.0f,1.0f,0.5f,1.0f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 centeredUV = uv;\n    centeredUV *= 2.0f;\n    centeredUV -= 1.0f;\n    fragColor = Grid(uv) * 10.0f;\n    \n    #ifdef FILL_WALLS\n    vec3 texelSize = 1.0f / iResolution;\n    int ITERATIONS = int(OFFSET / texelSize.x);\n    #endif\n    \n    for(int i=0;i<=ITERATIONS;++i)\n    {\n        float ratio = float(i) / float(ITERATIONS);      \n        fragColor += Grid(uv + OFFSET * (0.5f * ratio + 0.5f* smoothstep(0.0f, 0.2f,ratio)) * (-centeredUV)* (1.0f - ratio));\n    }\n    \n    fragColor /= float(ITERATIONS);\n}","name":"Image","description":"","type":"image"}]}