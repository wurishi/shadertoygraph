{"ver":"0.1","info":{"id":"mdSGDD","date":"1667595159","viewed":108,"name":"Cells to spiral","username":"ChunderFPV","description":"Use mouse x to polar transform.\nA sliding grid when polar transformed produces a number spiral.  Inspired by spadge's Cool Dots: https://www.shadertoy.com/view/cdB3zm","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["spiral","dots","polar","cells","transform"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE 35.0\n#define R iResolution.xy\n#define M iMouse\n#define K(xy,n) floor(mod((xy.x-0.5+n), 3.0)/2.0)\n\nvoid mainImage(out vec4 RGBA, in vec2 XY)\n{\n    float t = iTime/10.0;\n    vec2 mc = M.xy/R.y; // mouse coords\n    vec2 sc = (XY-0.5*R)/R.y*SCALE; // screen coords\n    \n    // cartesian to polar\n    float a = atan(sc.x, sc.y); // screen arc\n    float r = length(sc); // screen radius\n    if (mc.x > 1.0) mc.x = 1.0; // limit mouse x to 1\n    if (round(mc.x*2.0)/2.0 == 0.0) mc.x = 0.0; // snap mouse x to 0 when close\n    float mxt = 1.0-mc.x; // mouse x transform\n    sc.x = (sc.x*mxt)+(a*mc.x); // x to angular\n    sc.y = (sc.y*mxt)+(r*mc.x); // y to radial\n    \n    vec2 pc = vec2(sc.x*0.955+t*round(sc.y), sc.y); // point coords\n    vec3 rgb = vec3(K(pc, 0.0), K(pc, 1.0), K(pc, 2.0)); // color\n    vec3 c = smoothstep(0.5, 0.2, length(fract(pc+0.5)-0.5))*rgb; // dots\n    \n    RGBA = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"}]}