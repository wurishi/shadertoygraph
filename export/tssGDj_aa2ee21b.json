{"ver":"0.1","info":{"id":"tssGDj","date":"1547653154","viewed":87,"name":"Ray marching experiment","username":"Keyaki","description":"Ray marching experiment.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float Epsilon = 0.001;\nconst float Pi = 3.141592;\nconst float Pi2 = 2.0 * Pi;\n\nfloat d(vec3 pos)\n{\n#if 1\n    float radius = 2.0;\n    float t = iTime;\n    \n    float t1 = t * 4.0 + pos.y;\n    float t2 = t * 0.3 + pos.y;\n    float s1 = sin( t1 );\n    float s2 = sin( t2 );\n    float c1 = cos( t1 );\n    float c2 = cos( t2 );    \n\n    float r1 = length(pos) - radius + 0.5 * s1 - 0.5 * c2;\n    float r2 = length(pos) - radius - 0.5 * c1 + 0.5 * s2 - 2.0;\n    return min(r1,  r2);\n#else\n    return length(pos) - 1.0;\n#endif\n}\n\nvec3 calcNormal(vec3 pos)\n{ \n    return normalize(vec3(\n        d( vec3( pos.x + Epsilon, pos.y, pos.z )) - d( vec3(pos.x - Epsilon, pos.y, pos.z )),\n        d( vec3( pos.x, pos.y + Epsilon, pos.z )) - d( vec3(pos.x, pos.y - Epsilon, pos.z )),\n        d( vec3( pos.x, pos.y, pos.z + Epsilon )) - d( vec3(pos.x, pos.y, pos.z - Epsilon ))\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pos = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    vec3 cameraPos = vec3(0,0,10);\n    vec3 cameraDir = vec3(0,0,-1);\n    vec3 cameraUp  = vec3(0,1,0);\n    vec3 cameraSide = normalize(cross(cameraDir, cameraUp));\n    \n    float depth = 1.0;\n    vec3 ray = normalize(cameraSide * pos.x + cameraUp * pos.y + cameraDir * depth);\n    vec3 defaultColor = mix(vec3(0.45,0.68,0.88), vec3(0.92,0.94,0.95), uv.y);\n    vec3 color = defaultColor;\n    {\n        float dist = 0.0;\n        float sum = 0.0;\n        vec3 p = cameraPos;    \n        for(int i=0; i<128; ++i)\n        {\n            dist = d(p);\n            if(dist < Epsilon)\n            {\n                vec3 normal = calcNormal(p);\n            \tcolor =  normal * 0.5 + vec3(0.5);\n            }\n            sum += dist;\n            p = cameraPos + ray * sum;\n        }\n    }\n    \n    fragColor = vec4(color,1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec4 someFunction( vec4 a, float b )\n{\n    return a+b;\n}","name":"Common","description":"","type":"common"}]}