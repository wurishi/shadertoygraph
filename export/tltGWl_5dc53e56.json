{"ver":"0.1","info":{"id":"tltGWl","date":"1577997673","viewed":391,"name":"Normal Vector visualization","username":"pythno","description":"Visualize normal vector.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["normalvector"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float line_thickness = 5.f;\n    float line_length    = 200.f;\n    float filter_bias    = 0.8f;\n    \n    vec2 A = vec2(iResolution.xy/2.f);               // Vertex Pos\n    vec2 B = iMouse.xy;                                      // Endpoint of normal\n    vec2 P = fragCoord;\n    \n    vec2 AtoB = normalize(B - A);\n    vec2 AtoP = P - A;\n    \n    float ABdotAP = dot(AtoB, AtoP);\n    \n    vec2 PP = A + (ABdotAP * AtoB);   // P projected on AB\n    float distPPtoP = length(PP - P);\n    float distAtoPP = length(PP - A);\n    \n    // anisotropic filtering\n\tfloat afwidth = filter_bias;\n    // check if P is on the ray from A to B (Vertex to Normal endpoint)\n    float is_P_between_AB = step(0.f, ABdotAP);\n    float is_AP_in_range = is_P_between_AB * step(distAtoPP, line_length);\n    float interp = is_P_between_AB * smoothstep(line_thickness - afwidth, line_thickness + afwidth, distPPtoP);\n    vec3 color = vec3(interp);\n    vec3 normal_tint = vec3(1.f, 0.f, 0.f);\n    fragColor = vec4(color + normal_tint * is_AP_in_range, 1.f);\n}","name":"Image","description":"","type":"image"}]}