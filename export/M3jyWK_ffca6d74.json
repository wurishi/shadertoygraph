{"ver":"0.1","info":{"id":"M3jyWK","date":"1727744307","viewed":13,"name":"Abstract Psychedelic Patterns","username":"froggynotacon","description":"Abstract Psychedelic Patterns","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["transparency","psychedelic","abstract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Abstract Psychedelic Patterns\n// This code is licensed under Creative Commons 0 1.0 license.  No rights reserved.\n\n#define PI 3.14159265359\n\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec2 rotate(vec2 v, float a) {\n    float s = sin(a);\n    float c = cos(a);\n    mat2 m = mat2(c, -s, s, c);\n    return m * v;\n}\n\nfloat shape(vec2 st, int n) {\n    st = st * 2. - 1.;\n    float a = atan(st.x, st.y) + PI;\n    float r = length(st);\n    float d = a / (2.*PI) * float(n);\n    return 1. - smoothstep(.4, .41, cos(floor(.5 + d) * (2.*PI/float(n)) - a) * r);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    float time = iTime * 0.2;\n    \n    vec3 color = vec3(0.0);\n    \n    for (int i = 0; i < 5; i++) {\n        float fi = float(i);\n        vec2 uv2 = uv;\n        \n        // Create swirling motion\n        uv2 = rotate(uv2 - 0.5, time * (0.1 + fi * 0.05) + fi);\n        uv2 += 0.5;\n        \n        // Distort space\n        uv2 += 0.1 * vec2(sin(uv2.y * 4.0 + time + fi), cos(uv2.x * 4.0 - time - fi));\n        \n        // Create shapes\n        float shapeValue = shape(fract(uv2 * (1.0 + fi * 0.5)), 3 + i);\n        \n        // Generate color\n        vec3 shapeColor = 0.5 + 0.5 * cos(time + fi * 2.0 + vec3(0, 2, 4));\n        \n        // Add color to the layer\n        color += shapeValue * shapeColor * (1.0 - fi * 0.15);\n    }\n    \n    // Overall color adjustment\n    color = pow(color, vec3(0.8)); // Increase contrast\n    color = mix(color, vec3(dot(color, vec3(0.299, 0.587, 0.114))), -0.4); // Slight desaturation\n    \n    // Add some \"sparkles\"\n    vec2 uv3 = uv * 20.0;\n    vec2 ipos = floor(uv3);\n    vec2 fpos = fract(uv3);\n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            vec2 neighbor = vec2(float(i), float(j));\n            vec2 point = vec2(random(ipos + neighbor));\n            point = 0.5 + 0.5 * sin(6.2831 * point + time);\n            float dist = length(neighbor + point - fpos);\n            color += 0.01 / (0.1 + dist * 8.0);\n        }\n    }\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}