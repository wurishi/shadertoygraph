{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// --- GLOBALS ---\n// sun\nvec3 sunDir = normalize(vec3(0.8, 1.0, 0.4));\n\n// ambient color\nvec3 amb = vec3(0.0, 0.01, 0.02);\n\n\n// --- GEOMETRY ---\n\n// test ray against a sphere\nfloat sphere(in vec3 ro, in vec3 rd) {\n    float t = -1.0;\n    \n    ro -= vec3(0.0, 0.5, 0.0);\n    float r = 0.5;\n    \n    // t^2 + 2 * <ro, rd> * t + |ro|^2 - r^2 = 0\n    \n    float b = dot(ro, rd);\n    float c = dot(ro, ro) - r * r;\n    float h = b * b - c;\n    \n    if (h >= 0.0)\n        t = (-b - sqrt(h));\n    \n    return t;\n}\n\n// get sphere normal in position\nvec3 sphereNormal(in vec3 point) {\n    return normalize(point - vec3(0.0, 0.5, 0.0));\n}\n\n// test ray against a plane\nfloat plane(in vec3 ro, in vec3 rd) {\n    float t = -1.0;\n    \n    // ro.y + t * rd.y = 0\n    \n    t = -ro.y / rd.y;\n    \n    vec3 p = ro + t * rd;\n    float l = length(p.xz);\n    if (l > 2.0)\n        t = -1.0;\n    \n    return t;\n}\n\n// shoot the ray into the world\nvec2 shoot(in vec3 ro, in vec3 rd) {\n    vec2 res;\n    float t = 1000.0;\n    \n    // test sphere\n    float s = sphere(ro, rd);\n    if (s > 0.0) {\n        t = s;\n        res.y = 1.0;\n    }\n    \n    // test plane\n    float p = plane(ro, rd);\n    if (p > 0.0 && p < t) {\n        t = p;\n        res.y = 2.0;\n    }\n    \n    res.x = t;\n    return res;\n}\n\n// --- LIGHTING ---\n\n// diffuse lighting\nvec3 diffuseLight(vec3 normal) {\n    return max(dot(normal, sunDir), 0.0) * vec3(1.0);\n}\n\n// specular highlights\nvec3 specularLight(vec3 normal, vec3 rd, float s) {\n    vec3 r = reflect(sunDir, normal);\n    return pow(max(dot(r, rd), 0.0), s) * vec3(1.0);\n}\n\n// --- MAIN ---\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    // screen uv\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    \n    // ray\n    float d = 2.0;\n    vec3 ro = vec3(cos(iTime * -0.2) * d, 1.0, sin(iTime * -0.2) * d);\n    vec3 ta = vec3(0.0, 0.5, 0.0);\n    \n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww, vec3(0.0, 1.0, 0.0)));\n    vec3 vv = normalize(cross(uu, ww));\n    \n    vec3 rd = normalize(uv.x * (iResolution.x / iResolution.y) * uu + uv.y * vv + 2.0 * ww);\n    \n    // shoot the ray\n    vec2 res = shoot(ro, rd);\n    \n    // background\n    vec3 color = amb;\n    \n    // objects\n    if (res.x > 0.0 && res.x < 1000.0) {\n        \n        vec3 point = ro + res.x * rd;\n        \n        if (res.y < 1.5) {\n            // sphere\n            color = vec3(0.5, 0.72, 0.92);\n            \n            vec3 normal = sphereNormal(point);\n            \n            // light\n            vec3 diff = diffuseLight(normal);\n            vec3 spe = specularLight(normal, rd, 20.0) * vec3(0.8);\n            \n            color = color * diff + amb + spe;\n        }\n        \n        else if (res.y < 2.5) {\n            // plane\n            color = mix(vec3(0.2, 0.35, 0.22), vec3(0.35, 0.33, 0.2), texture(iChannel0, point.xz * vec2(2.0, 1.0)).x);\n            \n            vec3 normal = vec3(0.0, 1.0, 0.0);\n            \n            // light\n            vec3 diff = diffuseLight(normal);\n            vec3 spe = specularLight(normal, rd, 10.0) * vec3(0.6);\n            \n            // shadow\n            float sh = 0.0;\n            float sd = 0.0;\n            for(float sx = -0.1; sx < 0.1; sx += 0.02)\n                for(float sz = -0.1; sz < 0.1; sz += 0.02) {\n                    vec2 sr = shoot(point + vec3(0.0, 0.01, 0.0), sunDir + vec3(sx, 0.0, sz));\n                    if (sr.x > 0.0 && sr.x < 1000.0)\n                        sh += 1.0;\n                    sd += 1.0;\n                }\n            sh /= sd;\n            color *= 1.0 - sh;\n            \n            color = color * diff + amb + spe * (1.0 - sh);\n        }\n            \n    }\n        \n    // gamma\n    color = sqrt(color);\n    \n    // output\n    fragColor = vec4(color, 1.0);\n    \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XllGRf","date":"1423907612","viewed":521,"name":"Simple Raytrace Sphere","username":"chuckeles","description":"My first shader. Using raytracing against a sphere and a plane.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sphere","raytrace"],"hasliked":0,"parentid":"","parentname":""}}