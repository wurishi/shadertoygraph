{"ver":"0.1","info":{"id":"wlKSR1","date":"1582221311","viewed":247,"name":"Doodling - A l'ancienne","username":"Flopine","description":"A small doodle I did with my old style/tricks. Sometimes it feels good to go back a bit ^^ ","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","tunnel","orange"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n#define PI 3.141592\n#define TAU (2.*PI)\n#define ITER 64.\n#define st (iTime*0.5)\n\nfloat hash21 (vec2 x)\n{return fract(sin(dot(x,vec2(12.4,65.14)))*1245.4);}\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y>p.x) p = p.yx;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z))) + length(max(q,0.));\n}\n\nfloat cyl (vec2 p, float r)\n{return length(p)-r;}\n\nfloat sc (vec3 p, float d)\n{\n    p = abs(p);\n    p = max(p.xyz, p.yzx);\n    return min(p.x,min(p.y,p.z))-d;\n}\n\nfloat bid;\nfloat g1 = 0.;\nfloat SDF (vec3 p)\n{\n    float per = 7.;\n    bid = floor(p.z/per);\n    p.z = mod(p.z, per)-per*0.5;\n    float anim = (mod(bid,2.)==0.) ? bid+st : bid-st; \n    p.xy *= rot(anim);\n    p.xz *= rot(PI/2.);\n    mo(p.yz, vec2(2.));\n    mo(p.xz, vec2(1.));\n    p.x -= sin(iTime)*0.6;\n    float d = max( \n        \tabs(\n        \tmax(\n                -max(-sc(p, .3), box(p, vec3(1.))),\n            \tbox(p,vec3(1.5,1.5,0.5))\n            \t)\n    \t\t   )\n        \t-0.04,\n        \tabs(p.z)-0.4\n        \t\t);\n    g1 += 0.01/(0.01+d*d);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float dith = hash21(uv);\n    \n    vec3 ro = vec3(0.001,0.001,-7.+iTime),\n        p=ro,\n    \trd = normalize (vec3(uv,1.)),\n        col = vec3(0.);\n        \n    float shad =0.;\n    bool hit = false;\n    \n    for (float i=0.;i<ITER;i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            hit = true;\n            shad = i/ITER;\n            break;\n        }\n        d *= 0.8+dith*0.15;\n        p += d*rd;\n    }\n    \n    if (hit)\n    {\n        float glow = (mod(bid,2.) == 0.) ? g1*0.2 : shad*0.5;\n        col = vec3(0.8,0.3,0.1)*glow;\n    \n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}