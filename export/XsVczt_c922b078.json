{"ver":"0.1","info":{"id":"XsVczt","date":"1525201753","viewed":90,"name":"FinalForTMT","username":"Enum81","description":"Final for graphics","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["final"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Sphere with Lighting - Exercise 1\n\n/*\n\n * Exercise\n\n * - Change the sphere to a cube\n\n * - Make the camera move up and down while still pointing at the cube\n\n * - Make the camera roll (stay looking at the cube, and don't change the eye point)\n\n * - Make the camera zoom in and out\n\n */\n\n\n\nconst int MAX_MARCHING_STEPS = 255;\n\nconst float MIN_DIST = 0.0;\n\nconst float MAX_DIST = 100.0;\n\nconst float EPSILON = 0.0001;\n\n\n\n/**\n\n * Signed distance function for a cube centered at the origin\n\n * with width = height = length = 2.0\n\n */\n\nfloat cubeSDF(vec3 p) {\n\n   // If d.x < 0, then -1 < p.x < 1, and same logic applies to p.y, p.z\n\n   // So if all components of d are negative, then p is inside the unit cube\n\n   vec3 d = abs(p) - vec3(1.0, 1.0, 1.0);\n\n\n\n   // Assuming p is inside the cube, how far is it from the surface?\n\n   // Result will be negative or zero.\n\n   float insideDistance = min(max(d.x, max(d.y, d.z)), 0.0);\n\n\n\n   // Assuming p is outside the cube, how far is it from the surface?\n\n   // Result will be positive or zero.\n\n   float outsideDistance = length(max(d, 0.0));\n\n\n\n   return insideDistance + outsideDistance;\n\n}\n\n\n\n/**\n\n * Signed distance function for a sphere centered at the origin with radius 1.0;\n\n */\n\nfloat sphereSDF(vec3 p) {\n\n   return length(p) - 1.0;\n\n}\n\n\n\n/**\n\n * Signed distance function describing the scene.\n\n *\n\n * Absolute value of the return value indicates the distance to the surface.\n\n * Sign indicates whether the point is inside or outside the surface,\n\n * negative indicating inside.\n\n */\n\nfloat sceneSDF(vec3 samplePoint) {\n\n   return sphereSDF(samplePoint);\n\n}\n\n\n\n/**\n\n * Return the shortest distance from the eyepoint to the scene surface along\n\n * the marching direction. If no part of the surface is found between start and end,\n\n * return end.\n\n *\n\n * eye: the eye point, acting as the origin of the ray\n\n * marchingDirection: the normalized direction to march in\n\n * start: the starting distance away from the eye\n\n * end: the max distance away from the ey to march before giving up\n\n */\n\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n\n   float depth = start;\n\n   for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n\n       float dist = sceneSDF(eye + depth * marchingDirection);\n\n       if (dist < EPSILON) {\n\n         return depth;\n\n       }\n\n       depth += dist;\n\n       if (depth >= end) {\n\n           return end;\n\n       }\n\n   }\n\n   return end;\n\n}\n\n\n\n\n\n/**\n\n * Return the normalized direction to march in from the eye point for a single pixel.\n\n *\n\n * fieldOfView: vertical field of view in degrees\n\n * size: resolution of the output image\n\n * fragCoord: the x,y coordinate of the pixel in the output image\n\n */\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n\n   vec2 xy = fragCoord - size / 2.0;\n\n   float z = size.y / tan(radians(fieldOfView) / 3.0);\n\n   return normalize(vec3(xy, -z));\n\n}\n\n\n\n/**\n\n * Using the gradient of the SDF, estimate the normal on the surface at point p.\n\n */\n\nvec3 estimateNormal(vec3 p) {\n\n   return normalize(vec3(\n\n       sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n\n       sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n\n       sceneSDF(vec3(p.x, p.y, p.z + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n\n   ));\n\n}\n\n\n\n/**\n\n * Lighting contribution of a single point light source via Phong illumination.\n\n *\n\n * The vec3 returned is the RGB color of the light's contribution.\n\n *\n\n * k_a: Ambient color\n\n * k_d: Diffuse color\n\n * k_s: Specular color\n\n * alpha: Shininess coefficient\n\n * p: position of point being lit\n\n * eye: the position of the camera\n\n * lightPos: the position of the light\n\n * lightIntensity: color/intensity of the light\n\n *\n\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n\n */\n\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n\n                         vec3 lightPos, vec3 lightIntensity) {\n\n   vec3 N = estimateNormal(p);\n\n   vec3 L = normalize(lightPos - p);\n\n   vec3 V = normalize(eye - p);\n\n   vec3 R = normalize(reflect(-L, N));\n\n\n\n   float dotLN = dot(L, N);\n\n   float dotRV = dot(R, V);\n\n\n\n   if (dotLN < 0.0) {\n\n       // Light not visible from this point on the surface\n\n       return vec3(0.0, 0.0, 0.0);\n\n   }\n\n\n\n   if (dotRV < 0.0) {\n\n       // Light reflection in opposite direction as viewer, apply only diffuse\n\n       // component\n\n       return lightIntensity * (k_d * dotLN);\n\n   }\n\n   return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n\n}\n\n\n\n/**\n\n * Lighting via Phong illumination.\n\n *\n\n * The vec3 returned is the RGB color of that point after lighting is applied.\n\n * k_a: Ambient color\n\n * k_d: Diffuse color\n\n * k_s: Specular color\n\n * alpha: Shininess coefficient\n\n * p: position of point being lit\n\n * eye: the position of the camera\n\n *\n\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n\n */\n\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n\n   float itm = iTime / 4.0;\n\n   const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n\n   vec3 color = ambientLight * k_a;\n\n\n\n   vec3 light1Pos = vec3(4.0 * sin(itm),\n\n                         2.0,\n\n                         4.0 * cos(itm));\n\n   vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n\n\n\n   color += phongContribForLight(k_d, k_s, alpha, p, eye,\n\n                                 light1Pos,\n\n                                 light1Intensity);\n\n\n\n   vec3 light2Pos = vec3(2.0 * sin(0.37 * itm),\n\n                         2.0 * cos(0.37 * itm),\n\n                         2.0);\n\n   vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n\n\n\n   color += phongContribForLight(k_d, k_s, alpha, p, eye,\n\n                                 light2Pos,\n\n                                 light2Intensity);   \n\n   return color;\n\n}\n\n\n\n/**\n\n * Return a transform matrix that will transform a ray from view space\n\n * to world coordinates, given the eye point, the camera target, and an up vector.\n\n *\n\n * This assumes that the center of the camera is aligned with the negative z axis in\n\n * view space when calculating the ray marching direction. See rayDirection.\n\n */\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n\n   // Based on gluLookAt man page\n\n   vec3 f = normalize(center - eye);\n\n   vec3 s = normalize(cross(f, up));\n\n   vec3 u = cross(s, f);\n\n   return mat4(\n\n       vec4(s, 0.0),\n\n       vec4(u, 0.0),\n\n       vec4(-f, 0.0),\n\n       vec4(0.0, 0.0, 0.0, 1)\n\n   );\n\n}\n\n\n//=======\n#define HASHSCALE1 .1031\nfloat rnd12( vec2 p ) {\n\n    vec3 \n    p3  = fract( vec3( p.xyx ) * HASHSCALE1 );\n    p3 += dot( p3, p3.yzx + 19.19 );\n    return fract( ( p3.x + p3.y ) * p3.z );\n}\n//=======\nfloat squared(float value) { return value * value; }\n\nfloat getAmp(float frequency) { return texture(iChannel0, vec2(frequency / 512.0, 0)).x; }\n\nfloat getWeight(float f) {\n    return (+ getAmp(f-2.0) + getAmp(f-1.0) + getAmp(f+2.0) + getAmp(f+1.0) + getAmp(f)) / 5.0; }\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n\n{\n    vec2 uvTrue = fragCoord.xy / iResolution.xy;\n    vec2 uv = -1.0 + 2.0 * uvTrue;\n    \n\tfloat lineIntensity;\n    float glowWidth;\n    vec3 color = vec3(0.0);\n    \n\tfor(float i = 0.0; i < 5.0; i++) {\n        \n\t\tuv.y += (0.2 * sin(uv.x + i/7.0 - iTime * 0.6));\n        float Y = uv.y + getWeight(squared(i) * 20.0) *\n            (texture(iChannel0, vec2(uvTrue.x, 1)).x - 0.5);\n        lineIntensity = 0.4 + squared(1.6 * abs(mod(uvTrue.x + i / 1.3 + iTime,2.0) - 1.0));\n\t\tglowWidth = abs(lineIntensity / (150.0 * Y));\n\t\tcolor += vec3(glowWidth * (2.0 + sin(iTime * 0.13)),\n                      glowWidth * (2.0 - sin(iTime * 0.23)),\n                      glowWidth * (2.0 - cos(iTime * 0.19)));\n\t}\t\n\t\n\tfragColor = vec4(color, 1.0);\n    //======\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 \n        I = fragCoord / iResolution.xy;\n\n    fragColor = I.x < .5 \n        ? mix( texture( iChannel0, I ), texture( iChannel1, I ), iMouse.y / iResolution.y )\n        : rnd12( fragCoord ) > iMouse.y / iResolution.y\n           ? texture( iChannel0, I )\n            : texture( iChannel2, I );\n    //===============\n\n   vec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord);\n\n   vec3 eye = vec3(8.0, 5.0, 7.0);\n\n\n\n   mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n\n\n\n   vec3 worldDir = (viewToWorld * vec4(viewDir, 1.0)).xyz;\n\n\n\n   float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n\n\n\n   if (dist > MAX_DIST - EPSILON) {\n\n       // Didn't hit anything\n\n       //fragColor = vec4(1, 0.0, 0.0, 0.0);//background color\n       \n\n      return;\n\n   }\n\n\n\n   // The closest point on the surface to the eyepoint along the view ray\n\n   vec3 p = eye + dist * worldDir;\n\n\n\n   vec3 K_a = vec3(0.2, 0.2, 0.2);\n\n   vec3 K_d = vec3(0.2, 0.2, 0.7);\n\n   vec3 K_s = vec3(1.0, 1.0, 1.0);\n\n   float shininess = 10.0;\n\n\n\n   //vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n\n\n\n//   fragColor = vec4(color, 1.0);\n    // estimate the surface normal at the point p\n\n  vec3 normal = estimateNormal(p);\n\n\n\n// find the u,v coordinate on the sphere using the definition of a sphere\n\n  float u = atan(normal.z, normal.x) / 3.1415*2.0 + iTime / 5.0;\n\n  float v = asin(normal.y) / 3.1415*2.0 + 0.5;\n\n\n\n// set the color to the calculated color and the texture color\n\n  fragColor.xyz = color + texture(iChannel1, vec2(u, v)).xyz;\n\n}\n","name":"Image","description":"","type":"image"}]}