{"ver":"0.1","info":{"id":"sljGW1","date":"1623854828","viewed":192,"name":"slowest grapher of all time","username":"Maximxls","description":"from no optimizations to recalculation of some values for every pixel","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define xFrom -16.\n#define xTo    16.\n#define yFrom -9.\n#define yTo    9.\n\n#define Treshold       10.\n#define axesThickness  0.05\n\n#define RADIUS 3.\n\nfloat leftSide(float x, float y)\n{\n    return RADIUS*RADIUS;\n}\n\nfloat rightSide(float x, float y)\n{\n    return x * x + y * y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Size of the screen in coordinate system units\n    vec2 span = vec2(xTo - xFrom, yTo - yFrom);\n    \n    // Pixel in coordinate system\n    vec2 point = vec2(xFrom + uv.x * span.x, yFrom + uv.y * span.y);\n    \n    // Treshold\n    vec2 tresholds = Treshold / span;\n    float treshold = min(tresholds.x, tresholds.y);\n    \n    // If point is a solution\n    bool sol = abs(leftSide(point.x, point.y) - rightSide(point.x, point.y)) < treshold;\n    \n    // If point is on axes\n    bool axes = abs(point.x) < axesThickness || abs(point.y) < axesThickness;\n    \n    float col = 1.;\n    \n    if (sol || axes) {\n        col = 0.;\n    }\n\n    // Output to screen\n    fragColor = vec4(vec3(col),1.0);\n}","name":"Image","description":"","type":"image"}]}