{"ver":"0.1","info":{"id":"4tccRj","date":"1533107741","viewed":95,"name":"iching","username":"zwwgggbest","description":"iching","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["iching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI \t\t3.14159265359\n#define TWO_PI  6.28318530718\n#define NUM     8\n\n// Reference to\n// http://thndl.com/square-shaped-shaders.html\nfloat shape(vec2 _uv, float N)\n{\n    _uv = _uv * 2. - 1.;\n    float a = atan(_uv.x/_uv.y);\n    float r = TWO_PI/N;\n    \n\treturn abs(cos(floor(.5+a/r)*r-a)*length(_uv));\n}\n\nfloat box(vec2 _uv, vec2 _size)\n{\n\treturn shape(_uv*_size, 4.);\n}\n\nfloat iching(vec2 _uv, float _val)\n{\n    //hex\n    float s[NUM];\n    _val = floor(mod(_val, pow(2., float(NUM))));\t//need 6 bits\n    \n    for(int i = 0; i < NUM; i++)\n    {\n    \ts[i] = step(1., mod(_val, 2.));\n        _val = ceil(_val/2.);\n    }\n    \n    //iching\n\t_uv *= vec2(2., float(NUM));\n    \n    vec2 fpos = fract(_uv);\n    vec2 ipos = floor(_uv);\n    \n    if(ipos.x == 1.) fpos.x = 1.-fpos.x;\n    return mix(box(fpos, vec2(0.84,1.)),\n               box(fpos-vec2(0.03,0.),vec2(1.)), s[int(ipos.y)]);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    \n    uv *= 2.;\n    vec2 ipos = floor(uv);\n    uv = fract(uv);\n    float t = ipos.x + ipos.y * 2. + iTime * 2.;\n\n    float col = mix(iching(uv, t), iching(uv, t + 1.), fract(t));\n    col = smoothstep(.7, .701, col) + smoothstep(.7, .701, box(uv, vec2(1., 1.)));\n    \n    // Output to screen\n    fragColor = vec4(vec3(col),1.0);\n}","name":"Image","description":"","type":"image"}]}