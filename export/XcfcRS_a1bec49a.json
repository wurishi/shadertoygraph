{"ver":"0.1","info":{"id":"XcfcRS","date":"1721309425","viewed":34,"name":"Bazinga","username":"pgbhz","description":"Uma bazinga.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["bazinga"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simple pseudo-random noise function\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(iTime, sin(iTime)))) * iTime);\n}\n\n// Make a circle, no big deal.\nfloat NoisyCircle(vec2 uv, vec2 p, float r, float blur) {\n    float d = length(uv - p);\n    float noise = random(uv);\n    d = mix(d, noise, .5);\n    float c = smoothstep(r, r - blur, d);    \n    return c;\n}\n\n// Make a circle, no big deal.\nfloat Circle(vec2 uv, vec2 p, float r, float blur) {\n    float d = length(uv - p);\n    float c = smoothstep(r, r - blur, d);    \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Make things symmetric...\n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n   \n    // float bazinga = random(vec2(uv) - 1.) / random(vec2(uv));\n    \n    // Colors\n    vec3 col = vec3(.1 , .2, .3);\n    \n    // Make circles\n    float c = NoisyCircle(uv, vec2(0), .4, .05);\n    c -= Circle(uv, vec2(sin(iTime), -sin(iTime)), sin(iTime * 3.0) * .5, .05);\n\n    // Output to screen\n    fragColor = vec4(vec3(c) + col, 0.0);\n}","name":"Image","description":"","type":"image"}]}