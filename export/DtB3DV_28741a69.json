{"ver":"0.1","info":{"id":"DtB3DV","date":"1673906715","viewed":153,"name":"Antipod - MAGFest #09","username":"Flopine","description":"One of the piece I made for ThronoCrigger's set at MAGFest 2023!","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","repetition","animation","glow","isometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU (2.*PI)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define noise(u) textureLod(iChannel0, u, 0.).x\n#define crep(p,c,l) p-=c*clamp(round(p/c), -l, l)\n\n#define BPM (140./60.)\n#define anim(st, sp, of, po) (TAU/st)*(floor((iTime+of)*sp),pow(fract((iTime+of)*sp), po))\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q=abs(p)-c;\n    return min(0., max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat sc (vec3 p, float d)\n{\n    p = abs(p);\n    p=max(p,p.yzx);\n    return min(p.x,min(p.y,p.z))-d;\n}\n\nfloat g1 = 0.;\nfloat prim1 (vec3 p, float o)\n{\n    float speed = BPM/4.;\n    p.xz *= rot(anim(4., speed, o, 20.));\n    p.xy *= rot(anim(4., speed, .5+o , 20.));\n    \n    float d = max(-sc(p,.5),box(p,vec3(.8)));\n    \n    float s = length(p)-.5;\n    g1 += 0.01/(0.01+s*s);\n    \n    return min(d, s);\n}\n\nfloat SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n    \n    float per = 2.5;\n    vec3 id = round(p/per);\n    crep(p, per, 2.4);\n    \n    float shape = (noise(id*.27+sin(iTime*.25)*.1+.15) < .5) ? prim1(p, length(id*.1)) : box(p,vec3(1.));\n   \n    return shape;\n}\n\nvec3 gn (vec3 p)\n{\n    vec2 eps = vec2(0.001, 0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(uv*4.8, -20.), rd=vec3(0.,0.,1.), p=ro,\n    col=vec3(0.), l=normalize(vec3(1.5, 2., -1.));\n\n    bool hit = false;\n    for(float i=0.; i<64.; i++)\n    {\n        float d = SDF(p);\n        if (d<0.01)\n        {\n            hit=true; break;\n        }\n        p += d*rd*.8;\n    }\n\n    if (hit)\n    {\n        vec3 n = gn(p);\n        float li = max(dot(n,l), 0.);\n        \n        col = mix(vec3(0.85, .3, .01),  vec3(1., .9, .5),li);\n    }\n    col += g1*.15;\n    \n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}