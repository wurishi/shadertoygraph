{"ver":"0.1","info":{"id":"XX3GRs","date":"1716861776","viewed":36,"name":"Background shader for PRISMA","username":"Jameson","description":"shader for background","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["beginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pointEffectRadius = 0.2;\nconst float moveSpeed = 0.5;\n\nvec4 point0 = vec4(0.5, -1.0, -1.0, 1.0);\nvec4 point1 = vec4(1.0, -1.0, -0.5, 1.0);\nvec4 point2 = vec4(-0.5, -1.0, 1.0, 1.0);\nvec4 point3 = vec4(-1.0, -0.5, 0.5, 1.0);\n\nvec4 PointEffect(in vec4 origColor, in vec2 uv, in vec2 point) {\n    float d = distance(uv, point);\n    // return d < pointEffectRadius ? vec4(1.0) : origColor;\n    float effect = smoothstep(pointEffectRadius, 0.0, d);\n    return mix(origColor, vec4(1.0), effect);\n    return d < pointEffectRadius ? mix(origColor, vec4(1.0), effect) : origColor;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from -1.0 to 1.0)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec4 cyan = vec4(0.2, 0.8, 0.8, 1.0);\n    vec4 solidRed = vec4(0.8, 0.2, 0.2, 1.0);\n    vec4 gray = vec4(vec3(0.2), 1.0);\n\n    vec4 finalColor = cyan;\n    float timeFactor = (iTime * moveSpeed);\n    timeFactor = mod(timeFactor, 1.0);\n    // timeFactor = 0.0;\n    finalColor = PointEffect(finalColor, uv, point0.xy + timeFactor * point0.zw);\n    finalColor = PointEffect(finalColor, uv, point1.xy + timeFactor * point1.zw);\n    finalColor = PointEffect(finalColor, uv, point2.xy + timeFactor * point2.zw);\n    finalColor = PointEffect(finalColor, uv, point3.xy + timeFactor * point3.zw);\n    fragColor = finalColor;\n}\n","name":"Image","description":"","type":"image"}]}