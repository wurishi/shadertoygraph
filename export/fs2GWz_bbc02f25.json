{"ver":"0.1","info":{"id":"fs2GWz","date":"1617260048","viewed":75,"name":"Reflective Sphere on Tiled Plane","username":"Symmetries","description":"My First Shader :D","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float theta = cos(iTime / 4.);\n    mat3 rot = mat3(\n        cos(theta), -sin(theta), 0.,\n        sin(theta), cos(theta),  0.,\n        0.,          0.,           1.\n    );\n    \n    vec3 col = vec3(0.);\n    for (int i = -2; i <= 2; i++) {\n        for (int j = -2; j <= 2; j++) {\n            vec2 st = 2. * (fragCoord.xy + vec2(i, j)/5.)/iResolution.xy - 1.;\n            st.y *= iResolution.y / iResolution.x;\n\n            vec3 p = vec3(0., 3., 0.);\n            float r = 1.;\n            vec3 w = rot * normalize(vec3(st.xy, 1.).xzy);\n\n            float a = dot(w, w);\n            float b = -2. * dot(w, p);\n            float dis = b * b - 4. * a * (dot(p, p) - r * r);    \n\n            float t = (-b - sqrt(abs(dis))) / (2. * a);\n            float cond1 = float(dis > 0. && t > 0.);\n            vec3 o = cond1 * t * w;\n            w += cond1 * (normalize(reflect(w, p - o)) - w);\n            \n            cond1 = float(w.z < 0.);\n            vec2 v = o.xy - (1. + o.z) * w.xy / w.z;\n            float cond2 = mod(floor(v.x) + floor(v.y), 2.);\n            col += cond1 * cond2 * vec3(fract(v.xy), .5).xzy\n                + (1. - cond1) * w.zzz;\n        }\n    }\n    \n    fragColor = vec4(col/25., 1.);\n}","name":"Image","description":"","type":"image"}]}