{"ver":"0.1","info":{"id":"WdjyDD","date":"1586679709","viewed":273,"name":"brownian fractals","username":"matthen","description":"brownian fractals","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["fractals","brownian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 gradient(in float t) {\t\n    vec3 a = vec3(.6, .5, .5);\n    vec3 b = vec3(.8, .9, .8);\n    vec3 c = vec3(0.9, 1., .5);\n    vec3 d = vec3(0.9, 0.1, .4);\n    return a + b * cos(6.28318 * ( c * t + d));\n}\n\nbool isParticle(in ivec2 p) {\n    p = p % ivec2(iResolution.xy);\n    return texelFetch(iChannel0, p, 0).x > 0.5;\n}\n\nfloat age(in ivec2 p) {\n    p = p % ivec2(iResolution.xy);\n    return texelFetch(iChannel0, p, 0).z;\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    float zoom = 3. - 1.3 * smoothstep(5., 10., iTime);\n \tivec2 coord = ivec2(\n        0.5 * iResolution.xy + (fragCoord - 0.5 * iResolution.xy) / zoom\n   );\n    \n    float c = float(isParticle(coord));\n    \n    fragColor.rgb = gradient( 0.2 * age(coord) - 0.2 * (1.-c));\n    fragColor.rgb *= c;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"int isParticle(in ivec2 p) {\n    p = p % ivec2(iResolution.xy);\n    if (p.x == 0 || p.y == 0) {\n    \treturn 0;   \n    }\n    return int(step(0.5, texelFetch(iChannel0, p, 0).x));\n}\n\nint isFree(in ivec2 p) {\n    p = p % ivec2(iResolution.xy);\n    return int(step(0.5, texelFetch(iChannel0, p, 0).y));\n}\n\nfloat age(in ivec2 p) {\n    p = p % ivec2(iResolution.xy);\n    return texelFetch(iChannel0, p, 0).z;\n}\n\nfloat hash11(float p) {\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * 0.1031);\n\tp3 += dot(p3, p3.yzx + 19.19);\n\treturn fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 getNext(in ivec2 p) {\n    vec3 val;\n    \n    int frame = iFrame;\n    ivec2 pp = (p + ivec2(frame % 2, frame / 2)) % 2;\n    \n    ivec4 o = ivec4(-pp.x, 1 - pp.x, -pp.y, 1 - pp.y);\n    int topLeft = isParticle(p + o.xz); \n    int topRight = isParticle(p + o.yz); \n    int bottomLeft = isParticle(p + o.xw); \n    int bottomRight = isParticle(p + o.yw); \n    int next = topLeft + 2 * topRight + 4 * bottomLeft + 8 * bottomRight;\n    \n    int topLeftF = isFree(p + o.xz); \n    int topRightF = isFree(p + o.yz); \n    int bottomLeftF = isFree(p + o.xw); \n    int bottomRightF = isFree(p + o.yw); \n    int nextF = topLeftF + 2 * topRightF + 4 * bottomLeftF + 8 * bottomRightF;\n    \n    bool isFrozen = (nextF < 15);\n    \n\tint shift = 0;\n    if (!isFrozen) {    \n        float id = float(p.x + o.x) + iResolution.y * float(p.y + o.z);\n        shift = int(4. * hash11(iTime + id));  \n        next = next << shift | (next >> (4 - shift));\n\t    nextF = nextF << shift | (nextF >> (4 - shift));\n    }\n    \n    \n    \n    val.x = float((next >> (pp.x + 2 * pp.y)) % 2);\n    val.y = float((nextF >> (pp.x + 2 * pp.y)) % 2);\n    \n    vec4 ages = vec4(\n        age(p + o.xz),\n        age(p + o.yz),\n        age(p + o.xw),\n        age(p + o.yw)\n    );\n    \n    val.z = ages[pp.x + 2 * pp.y];\n    \n    if (isFrozen && val.x > 0.5) { \n    \tval.y = 0.;   \n        val.z += 0.01; \n        val.z = min(1., val.z);\n        \n    }\n    \n    \n    \n    return val;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    \n    ivec2 p = ivec2(fragCoord);\n    \n    vec3 val;\n    \n    val = getNext(p);\n    \n    if (iFrame <= 10) {\n        vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.x;\n        \n        uv *= 10.;\n        \n        uv = fract(uv) - 0.5;\n        \n        val.x = 0.;\n        val.y = 1.;\n        val.z = 0.;\n        \n        if (length(uv) > 0.1) {\n            // is particle\n            val.x = step(0.9, hash12(fragCoord));\n            \n            \n        } else {\n            val.x = 1.;\n            val.y = 0.;\n            val.z = 1.;\n        }\n        \n  \n    }\n    \n    \n    fragColor = vec4(val, 0.);\n}","name":"Buffer A","description":"","type":"buffer"}]}