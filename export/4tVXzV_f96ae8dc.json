{"ver":"0.1","info":{"id":"4tVXzV","date":"1491387479","viewed":828,"name":"Simple 2D spectrum bar shader","username":"croxxx","description":"This is a simple shader I designed to test a FFT implementation I recently did.\nIt simply displays the FFT values as bars on the screen.","likes":4,"published":3,"flags":64,"usePreview":0,"tags":["2d","simple","sound","spectrum","visualizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4s2Gzc","filepath":"https://soundcloud.com/overwerk/canon","previewfilepath":"https://soundcloud.com/overwerk/canon","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Define some options\n    const float stepCount = 128.0;\n\tfloat barWidth = iResolution.x / stepCount;\n\n\t// Set background color\n\tvec3 color = vec3(0.1, 0.1, 0.1);\n\n\t// Draw spectrum bars\n    // Method 1: Directly use a condition\n    /*\n\tif (texture( iChannel0, vec2(floor(fragCoord.x / barWidth)/stepCount,0.25) ).x >= fragCoord.y/iResolution.y)\n\t{\n\t\tcolor = vec3((1.0/stepCount)*floor(fragCoord.x / barWidth),1.0-(1.0/stepCount)*floor(fragCoord.x / barWidth),0.5);\n\t}\n\t*/\n\n    // Method 2: Rewrite the condition to binary multiplication\n    float isInsideBar = step(fragCoord.y/iResolution.y, texture( iChannel0, vec2(floor(fragCoord.x / barWidth)/stepCount,0.25) ).x);\n    color = vec3(1.0) * isInsideBar;\n    color *= vec3((1.0/stepCount)*floor(fragCoord.x / barWidth),1.0-(1.0/stepCount)*floor(fragCoord.x / barWidth),0.5);\n    color = color * 0.90 + 0.1;\n\n    // Set the final fragment color\n\tfragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}