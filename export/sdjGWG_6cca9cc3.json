{"ver":"0.1","info":{"id":"sdjGWG","date":"1618085785","viewed":174,"name":"SoundStar","username":"atutahi","description":"Audioreactive experiment","likes":1,"published":1,"flags":64,"usePreview":0,"tags":["audioreactive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4tlXD7","filepath":"https://soundcloud.com/xavierdang/chasing-reflections","previewfilepath":"https://soundcloud.com/xavierdang/chasing-reflections","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\nfloat expStep( float x, float k, float n )\n{\n    return exp( -k*pow(x,n) );\n}\n\nfloat cubicPulse( float c, float w, float x )\n{\n    x = abs(x - c);\n    if( x>w ) return 0.0;\n    x /= w;\n    return 1.0 - x*x*(3.0-2.0*x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // create pixel coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // diag symmetry\n    // uv = length(uv.x + uv.y) < 1. ? uv : vec2(1.0 - uv.x, 1.0 - uv.y);\n    \n    // abs uv symmetry\n    // uv = abs(uv * 2. - 1.);\n    \n    vec2 coords = uv;\n    \n    uv = uv * 2. - 1.;\n    uv *= 2.;\n    uv.x += 0.6;\n    \n    float ro = length(uv) - 0.05 * sin(iTime * 3.);    \n    float angle = atan(uv.y, uv.x);  // atan2\n    vec2 range = vec2(-1. * PI, 1. * PI);  // The range of atan2 is [-pi / 1; pi / 1]\n    float theta = smoothstep(range[0], range[1], angle);  // Normalize the range of atan to [0;1]\n    theta = abs(2. * theta - 1.);   \n    theta += sin(iTime * 0.1) * 0.3;\n    \n    uv = vec2(theta, ro);\n    \n\t// first texture row is frequency data\n    \n    float fftFrequency = .1;\n    float fftCoord = sin(uv.x * fftFrequency) * uv.x;\n\tfloat fft  = texture( iChannel0, vec2(fftCoord,0.25) ).x * 1.1; \n    \n    // second texture row is the sound wave\n\tfloat wave = texture( iChannel0, vec2(uv.x,0.75) ).x * 0.1;\n\t\n    float spectrumScale = 1.;\n    float spectrum = 1.0 - smoothstep(fft - 0.2, fft, uv.y * spectrumScale);\n    \n    vec3 col = vec3(0.0);\n    \n    // add wave form    \n    float corol = (1.0 -  smoothstep( 0.0, coords.x, abs(wave - uv.y + coords.x * 0.2 + fft) ));\n    \n    // add fft    \n\tcol += vec3(1.0,fft,fft-.4) * (spectrum + corol) * (.5 + ro);\n    \n\t// output final color\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}