{"ver":"0.1","info":{"id":"WsjBz3","date":"1590519376","viewed":301,"name":"Doodling with Lynn","username":"Flopine","description":"This shader was made during an online DJ Set at Outline 2020 by LynnDrumm. You can listen to her awesome Drum&Bass sets here: https://www.twitch.tv/lynndrumm/\nTo tone things down and see the scene a bit better, comment the define CRAZYNESS at line 18","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","animation","glow","outline","vjing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n#define ITER 64.\n#define time iTime\n#define width 5.\n#define height 2.\n#define PI acos(-1.)\n#define BPM 165./60.\n\n#define CRAZYNESS\n\n// taken from YX here : https://www.shadertoy.com/view/tdlXW4\n// rough shadertoy approximation of the bonzomatic noise texture\nvec4 texNoise(vec2 uv)\n{\n    float f = 0.;\n    f += texture(iChannel0, uv*.125).r*.5;\n    f += texture(iChannel0, uv*.25).r*.25;\n    f += texture(iChannel0, uv*.5).r*.125;\n    f += texture(iChannel0, uv*1.).r*.125;\n    f=pow(f,1.2);\n    return vec4(f*.45+.05);\n}\n\nfloat hash21 (vec2 x)\n{return fract(sin(dot(x,vec2(18.4,16.4)))*1524.4);}\n\nmat2 rot( float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nvoid mo(inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if(p.y>p.x) p = p.yx;\n}\n\nfloat stmin(float a, float b, float k, float n)\n{\n    float st = k/n;\n    float u = b-k;\n    return min(min(a,b), 0.5*(u+a+abs(mod(u-a+st,2.*st)-st)));\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r,abs(p.z)-h);}\n\n\nfloat tore (vec3 p, vec2 t)\n{return length(vec2(length(p.xz)-t.x,p.y))-t.y;}\n\nfloat sid,g1=0.;\nfloat spot (vec3 p)\n{\n    float per = 10.;\n    sid = floor(p.z/per);\n    p.z = mod(p.z,per)-per*0.5;\n    p.y = abs(p.y)-height*0.9;\n    p.x = abs(p.x)-width*0.98;\n    p.z = abs(p.z)-1.;\n    float d = length(p)-0.2;\n    g1 += 0.07/(0.07+d*d);\n    return d;\n}\n\nfloat g2=0.;\nfloat pipes (vec3 p)\n{\n    float per = 10.;\n    p.z = mod(p.z,per)-per*0.5;\n    vec3 pp = p;\n    p.x = abs(p.x)-width;\n    float d = tore(p,vec2(2.,0.2));\n\n    p = pp;\n    mo(p.xy, vec2(2.5));\n    p.xz*=rot(PI/2.);\n    d = min(d, tore(p.xzy, vec2(1., 0.2)));\n\n    p = pp;\n    mo(p.xy, vec2(1.5));\n    d = min(d, cyl(p,0.1,1e10));\n\n    g2 += 0.001/(0.001+d*d);\n    return d;\n}\n\nfloat g3 = 0.;\nfloat prim1 (vec3 p)\n{\n    float per = 10.;\n    float id = floor((p.z-per*0.5)/per);\n    p.xy *= (mod(id,2.)==0.) ? rot(p.z*0.1+time) : rot(p.z*0.1-time);\n    p.z = mod(p.z-per*0.5,per)-per*0.5;\n    mo(p.xy, vec2(width*(0.1+exp(-fract(time*BPM))*0.4)));\n    p.xy *= rot(PI/4.);\n    float d = cyl(p.xzy, 0.1, height*2.);\n    g3 += 0.01/(0.01+d*d);\n    return d;\n}\n\nfloat g4 = 0.;\nfloat gem (vec3 p)\n{\n    p.z -= 5.-time*3.;\n    p.xy *= rot(time);\n    mo(p.xz, vec2(0.1));\n    mo(p.xy,vec2(0.2));\n    p.x -= exp(-fract(time*BPM));\n    p.xz *= rot(time);\n\n    float d =  dot(p,normalize(sign(p)))-0.1;\n    d = stmin(d,tore(p,vec2(0.3,0.1)),0.2,5.);\n    g4 += 0.1/(0.1+d*d);\n    return d;\n}\n\nfloat room (vec3 p)\n{\n    float per = 10.;\n    float d = -box(p,vec3(width,height,1e10));\n    vec3 pp = p;\n    p.z = mod(p.z-per*0.5,per)-per*0.5;\n    p.x = abs(p.x)-width*0.98;\n    d = min(d, box(p,vec3(1.,height, 0.5)));\n\n    p = pp;\n    p.x = abs(p.x)-width*0.98;\n    d = stmin(d, box(p,vec3(0.5,0.5,1e10)),0.5,5.);\n\n    p = pp;\n    p.y = abs(p.y)-height*0.98;\n    d = stmin(d, box(p,vec3(0.5,0.5,1e10)),0.5,3.);\n\n    return d;\n}\n\nfloat SDF (vec3 p)\n{\n    p.x+= sin(p.z*0.5)*0.5;\n    float d = min(gem(p),min(prim1(p),stmin(pipes(p),min(room(p), spot(p)),0.2,4.)));\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    float dither = hash21(uv);\n    \n    #ifdef CRAZYNESS\n    uv = mix(abs(uv)-vec2(0.2,0.3), uv, floor(sin(time*(PI/4.)*BPM)+1.));\n    uv = mix(uv*rot(PI/4.),uv*rot(-PI/4.),floor(sin(time*2.*PI*BPM)+1.));\n    #endif\n    \n    vec3 ro = vec3(0.001,0.001,-time*3.),\n        rd = normalize(vec3(uv,1.)),\n        col = vec3(0.),\n        p = ro;\n\n    float shad,d = 0.;\n    for (float i=0.; i<ITER; i++)\n    {\n        d = SDF(p);\n        if (d<0.01)\n        {\n            shad = i/ITER;\n            break;\n        }\n        d *= 0.7+dither*0.05;\n        p += d*rd;\n    }\n    \n    float t = length(ro-p);\n\n    col = vec3(shad);\n    col += (mod(sid,2.) == 0.) ? g1*vec3(0.1,0.6,0.7) : g1*vec3(0.7,0.2,0.75);\n    col += g2*0.5;\n    col += g3*0.5;\n    vec3 gemcol = mix(vec3(0.1,0.6,0.7), vec3(0.7,0.2,0.75), floor(sin(time*PI*BPM)+1.));\n    col += g4*texNoise(p.xy*0.2).r*gemcol;\n    \n    col = mix(col,vec3(0.1),1.-exp(-0.01*t*t));\n\n    fragColor = vec4(clamp(col,0.,1.), 1.);\n}","name":"Image","description":"","type":"image"}]}