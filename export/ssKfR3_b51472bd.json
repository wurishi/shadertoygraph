{"ver":"0.1","info":{"id":"ssKfR3","date":"1658626078","viewed":199,"name":"2.5-dimensional fractal","username":"stduhpf","description":"Variant of the von Koch IFS, which has a Hausdroff dimension of exactly 2.5.\nThere are some artifacts I'm not sure how to fix, if you find out how to get rid of them, let me know.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// template for ray marcher : https://www.shadertoy.com/view/WtGXDD (bigwings)\n#define AA 1\n\n#define MAX_STEPS 5000\n#define MAX_DIST 100.\n#define SURF_DIST .0005\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\n\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\nfloat sdQuad(vec3 p, vec2 s){\n    p = abs(p)-vec3(s,SURF_DIST).xzy;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec4 quadratic_Koch(vec3 p){\n    //folding\n    float s = 2.;\n    for(int i=0;i++<5;){\n        s*=.5;\n        p.y*=sign(p.x*p.z);\n        p.xz= abs(p.xz);\n        {\n        vec2 o = vec2(max(p.x,p.z),min(p.x,p.z)); //symmetry for plane x = z\n        p.xz = o;\n        }\n        p.yz*=sign(p.y+p.z); // 180 rotation around y=0,z=0\n        p.xz-=s;\n\n        \n        if(p.x+p.z<=-s){ //symmetry for plane x + z = -s;\n            p.z+=s;\n            p.xz = -p.zx;\n            p.z-=s;\n        }\n\n\n\n        if(p.y>=p.x+s){ //symmerty for plane x-y=s \n            p.x+=s;\n            p.xy = p.yx;\n            p.x-=s;\n        }\n        \n        if(p.x<p.y){// symmery for plane x=y\n           p.xy = -p.yx;\n        }\n        \n        s*=.5;\n        p.xz = abs(p.xz)-s;\n        \n    }\n    return vec4((p),s);\n}\n\n\n\nfloat GetDist(vec3 p) {\n    vec4 pp = quadratic_Koch(p);\n    float d = sdQuad(pp.xyz, vec2(pp.a));\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS*.125/sqrt(2.);\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\n\n\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.00001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nfloat ao(vec3 p, vec3 n){ //pretty bad here due to the sdf being very much inexact, but still better than nothing\n    float oc =0.;\n    float d=0.05;\n    for(int i=0;i<5;i++){\n        float h =GetDist(p+d*n);\n        oc+=(d-h)*exp2(-float(i));\n        d+=h;\n    }\n    return 1.-8.*(oc);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 acc = vec3(0);\n     #ifdef AA\n    for(float x = 0.;x<1.;x+=1./float(AA)){\n    for(float y = 0.;y<1.;y+=1./float(AA)){\n    #else\n        const float AA=1.,x=0.,y=0.;\n    #endif\n\n    vec2 uv = (fragCoord+vec2(x,y)-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    if(m.y==0.)m.y=.5;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*PI);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0),1.);\n    vec3 col = vec3(rd.y*.25+.5);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        \n        vec3 ld =  normalize(vec3(1,2,3));\n        \n        vec4 K = quadratic_Koch(p);\n        \n        vec3 base= vec3(.6,.4,.45);//pow(texture(iChannel0,K.xz+.5).rgb,vec3(2.2));\n        \n        float s = step(MAX_DIST,RayMarch(p+(n)*SURF_DIST,ld));\n        \n        float dif = max(dot(n,ld),0.)*s*1.5\n        + ao(p,n)*.05;\n        col = mix(base *vec3(dif) , vec3(s)*(r.y*.25+.5),(pow(1.-dot(-rd,n),5.)));\n    }\n    acc+=col;\n      #ifdef AA\n    }\n    }\n    acc/=float(AA*AA);\n    #endif\n    \n    acc = pow(acc, vec3(.4545));\t// gamma correction\n        \n    \n    fragColor = vec4(acc,1.0);\n}","name":"Image","description":"","type":"image"}]}