{"ver":"0.1","info":{"id":"ts3GzX","date":"1568957566","viewed":341,"name":"Game of Hexlife (Simple)","username":"redline2466","description":"Inspired by https://davidsiaw.github.io/blog/2014/11/21/hexlife/\nDraw with mouse\nOptions in Common tab","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["2d","simulation","automata","life","conway","gameoflife","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int getState(vec2 fragCoord) {\n    ivec2 pos = ivec2(fragCoord / scale);\n    if(fract(fragCoord.x / scale) > .5 && pos.y / 2 * 2 == pos.y)\n        pos.x++;\n    return int(texelFetch(iChannel0, pos, 0).x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = vec4(getState(fragCoord));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define scale 20.\n#define stepsPerSecond 20.","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"int get(ivec2 pos) {\n    return int(texelFetch(iChannel0, pos, 0).x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(get(ivec2(fragCoord)));\n    if(iMouse.z > 0.01) {\n        vec2 distance = abs(ceil(fragCoord.xy - ceil(iMouse.xy / scale)));\n        if(distance.x == 0. && distance.y == 0.) {\n            fragColor = vec4(1.);\n        }\n    } else if(floor(iTime * stepsPerSecond) > floor((iTime - iTimeDelta) * stepsPerSecond)) {\n        int sum =\n            get(ivec2(fragCoord) + ivec2(0.,1.)) +\n            get(ivec2(fragCoord) + ivec2(-1.,0.)) +\n            get(ivec2(fragCoord) + ivec2(1.,0.)) +\n            get(ivec2(fragCoord) + ivec2(0.,-1.));\n        if(int(fragCoord.y) / 2 * 2 == int(fragCoord.y)) { // even row\n            sum +=\n                get(ivec2(fragCoord) + ivec2(-1.,1.)) +\n            \tget(ivec2(fragCoord) + ivec2(-1.,-1.));\n        } else { // odd row\n            sum +=\n            \tget(ivec2(fragCoord) + ivec2(1.,1.)) +\n                get(ivec2(fragCoord) + ivec2(1.,-1.));\n        }\n           \n        if(sum < 3 || sum > 4)\n            fragColor = vec4(0.);\n        if(sum == 2 && get(ivec2(fragCoord)) == 0)\n            fragColor = vec4(1.);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}