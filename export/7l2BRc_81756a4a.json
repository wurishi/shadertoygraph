{"ver":"0.1","info":{"id":"7l2BRc","date":"1653723252","viewed":132,"name":"Circle scratches","username":"kamilzidek","description":"Some aesthetics researchs.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"wtsyzj","parentname":"Circles Lines"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\tI've learned shaders by watching Nusan's, leon, flopine, eviiiiil, iq, and other shadertoy coder's, code.\n\tThx to you, I'm learning in a way that suits me, art.\n*/\n\nfloat gg = 0.0;\n\nmat2 rot(float a)\n{\n \tfloat ca = cos(a);\n    float sa = sin(a);\n    \n    return mat2(ca, -sa, sa, ca);\n}\n\nstruct matter\n{\n \tfloat m;\n    int type;\n};\n    \nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat box(vec3 p, vec3 s)\n{\n\tp = abs(p) - s;\n    return max(p.x, max(p.y, p.z));\n}\n\nfloat lineCircle(vec3 p, float s)\n{\n    float mat01;\n\n    mat01 = sphere(p, s);\n\n    mat01 = max(mat01, -box(p + vec3(0.0, 0.0, 0.525*s), vec3(s*2.0,s*2.0, 0.5250255*s)));\n    mat01 = max(mat01, -box(p - vec3(0.0, 0.0, 0.525*s), vec3(s*2.0,s*2.0, 0.5250255*s)));\n\n    mat01 = max(mat01, -sphere(p, s*0.996));\n    \n    return mat01;\n}\n\nfloat smin(float a, float b, float h) {\n  float k=clamp((a-b)/h*0.5+0.5,0.0,1.0);\n  return mix(a,b,k) - k*(1.0-k)*h;\n}\n\nvec3 smin(vec3 a, vec3 b, float h) {\n  vec3 k=clamp((a-b)/h*0.5+0.5,0.0,1.0);\n  return mix(a,b,k) - k*(1.0-k)*h;\n}\n\n\nvec3 opRepLim( vec3 p, in vec3 c, in vec3 l)\n{\n    vec3 q = p-c*clamp(round(p/c), -l, l);\n    return q;\n}\n\nfloat opRepLim( float p, in float c, in float l)\n{\n    float q = p-c*clamp(round(p/c), 0.0, l);\n    return q;\n}\n\nfloat repeat(float p, float repeat)\n{\n    return (fract(p/repeat-0.5) - 0.5) * repeat;\n}\n\nmatter map(vec3 p)\n{\n \tmatter mat;\n    vec3 p01 = p;\n    vec3 p02 = p;\n    \n    \n    p01.z -= cos(iTime);\n    p01.z = opRepLim( p.z , 0.04 + 0.02 * abs(sin(iTime * 0.01)), 30.0);\n   \n    p01.y += sin(p.z * 4.0) * 0.05;\n    p01.x += sin(p.z * 5.0 + iTime) * 0.08;\n\n\tp02.z = opRepLim( p.z , 0.03 + 0.03 * abs(cos(iTime * 0.01)), 30.0);\n    p02.y += sin(p.z * 7.0 * sin(iTime * 0.03)) * 0.25;\n    p02.x += sin(p.z * 22.0 * cos(iTime * 0.03)) * 0.28;\n\n    mat.m = lineCircle(p01, 1.0 + clamp((p.z * 0.06), 0.0, 2.0));\n    mat.m = min(mat.m, lineCircle(p02 + vec3(0.1, 0.0, 0.0), 1.0 + clamp((p.z * 0.10), 0.0, 2.0)));\n    mat.m = min(mat.m, lineCircle(p02 - vec3(0.1, 0.0, 0.0), 1.0 + clamp((p.z * 0.10), 0.0, 2.0)));\n    \n   \tmat.m = min(mat.m, lineCircle(p02 - vec3(0.2, 0.0, 0.0), 1.0 + clamp((p.z * 0.50), 0.0, 2.0)));\n    mat.m = min(mat.m, lineCircle(p02 - vec3(0.2, 0.0, 0.0), 1.0 + clamp((p.z * 0.50), 0.0, 2.0)));\n    \n    gg += 0.155/(0.15+abs(mat.m));\n    \n    return mat;\n}\n\nvec3 normals(vec3 p)\n{\n    vec2 uv = vec2(0.01, 0.0);\n    return normalize(map(p).m - vec3(map(p - uv.xyy).m, map(p - uv.yxy).m, map(p - uv.yyx).m));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 l = normalize(vec3(3.0, 5.0, 0.0));\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y/iResolution.x, 1.0);\n        \n    vec3 o = vec3(cos(1.5) * 4.0, 0.2, sin(1.5) * 4.0), t = vec3(0.0);\n    vec3 fr = normalize(t - o);\n    vec3 ri = normalize(cross(vec3(0.0, 1.0, 0.0), fr));\n    vec3 up = normalize(cross(fr, ri));\n    vec3 dir = normalize(fr + uv.x * ri + uv.y * up);\n    vec3 p = o +dir * 0.2;\n    \n    matter mat;\n    float shad = 0.0, d = 0.0;\n    \n    vec3 col = vec3(0.0);\n    for(int i = 0; i < 200; ++i)\n    {\n\n     \tmat = map(p);\n        mat.m = abs(mat.m);\n\n        if(mat.m < 0.00002)\n        {\n            \n            mat.m = 0.1;\n\n\n            break;\n            \n        }\n        \n        col += pow(gg * 0.0065, 8.0) * vec3(0.5);\n        \n        p += dir * mat.m * 0.5;\n        d += mat.m * 0.5;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}