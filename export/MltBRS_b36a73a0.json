{"ver":"0.1","info":{"id":"MltBRS","date":"1540107692","viewed":208,"name":"test1023","username":"candy9599","description":"null","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["null"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// FRAGMENT SHADER FOR SHADERTOY\n\n// Constants.\nconst int NUM_LIGHTS = 2;\nconst int NUM_MATERIALS = 6;\nconst int NUM_PLANES = 2;\nconst int NUM_SPHERES = 4;\nconst int NUM_CONES = 1;\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.3, 0.5, 1.0 );\n\n // Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * 3.1415926535 / 180.0; \n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n// Define new struct types.\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Cone_t {\n\t// Half angle\n\tfloat cosa;\n\t// Height\n\tfloat h;\n\t// Tip position\n\tvec3 c;\n\t// Axis\n\tvec3 v;\n\tint materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n\t// Ambient coefficient.\n    vec3 k_a;   \n    // Diffuse coefficient.\n    vec3 k_d;   \n    // Reflected specular coefficient.\n    vec3 k_r;   \n    // Global reflection coefficient.\n    vec3 k_rg;  \n    // The specular reflection exponent. Ranges from 0.0 to 128.0. \n    float n;    \n};\n\n// Global scene data.\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nCone_t Cone[NUM_CONES];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\n\n// Initializes the scene.\nvoid InitScene()\n{\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 0.0;\n    Plane[0].C = 1.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 4;\n\n    // Vertical plane.\n    Plane[1].A = -1.0;\n    Plane[1].B = 0.0;\n    Plane[1].C = 0.0;\n    Plane[1].D = 5.1;\n    Plane[1].materialID = 0;\n\n    // Center silver sphere.\n    Sphere[0].center = vec3( -2., 0., 2.5);\n    Sphere[0].radius = 2.5;\n    Sphere[0].materialID = 1;\n\n    // Blue sphere.\n    Sphere[1].center = vec3( 3. * cos(iTime) - 2., 3. * sin(iTime), 1.5 );\n    Sphere[1].radius = 0.5;\n    Sphere[1].materialID = 2;\n\n    // Big sphere shell.\n    Sphere[2].center = vec3( 0., 0., 0. );\n    Sphere[2].radius = 16.;\n    Sphere[2].materialID = 4;\n  \n    // Green sphere.\n    Sphere[3].center = vec3( .5 * cos(3. * iTime) + 2., .5 * sin(3. * iTime), 0.4 );\n    Sphere[3].radius = .3;\n    Sphere[3].materialID = 5;\n\n    // Cone\n    Cone[0].cosa = 0.95;\n    Cone[0].h = 3.4;\n    Cone[0].c = vec3(2.0, 0.0, 0.0);\n    Cone[0].v = vec3(0.0, 0.0, 1.0);\n    Cone[0].materialID = 3;\n\n    // Vertical plane: Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 0.4 );\n    Material[0].k_a = 0.9 * Material[0].k_d;\n    Material[0].k_r = 1.2 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // Center sphere: Silver material.\n    Material[1].k_d = vec3( 0.5, 0.5, 0.5);\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 4.0 * Material[1].k_d;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 128.0;\n\n    // Blue sphere: Blue plastic material.\n    Material[2].k_d = vec3( 0.2, 0.2, 0.8 );\n    Material[2].k_a = 0.4 * Material[2].k_d;\n    Material[2].k_r = vec3( 0.5, 0.5, 0.5);\n    Material[2].k_rg = 0.5 * Material[2].k_r;\n    Material[2].n = 64.0;\n\n    // Cone: Gold material.\n    Material[3].k_d = vec3( 0.8, 0.7, 0.1 );\n    Material[3].k_a = 0.2 * Material[1].k_d;\n    Material[3].k_r = 2.0 * Material[1].k_d;\n    Material[3].k_rg = 0.5 * Material[1].k_r;\n    Material[3].n = 64.0;\n\n    // Horizontal plane: Red material.\n    Material[4].k_d = vec3( 0.2, 0.1, 0.1 );\n    Material[4].k_a = 0.2 * Material[0].k_d;\n    Material[4].k_r = 0.2 * Material[0].k_d;\n    Material[4].k_rg = 0.1 * Material[0].k_r;\n    Material[4].n = 128.0;\n    \n    // Green sphere: Green plastic material.\n    Material[5].k_d = vec3( 0.4, 0.8, 0.4 );\n    Material[5].k_a = 0.4 * Material[5].k_d;\n    Material[5].k_r = vec3( 0.5, 0.5, 0.5);\n    Material[5].k_rg = 0.5 * Material[5].k_r;\n    Material[5].n = 64.0;\n\n    // Light 0.\n    Light[0].position = vec3( 4.0, -2.0, 9.0 );\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = vec3( 1.0, 1.0, 1.0 );\n\n    // Light 1.\n    Light[1].position = vec3( 2.0, 8.0, 8.0 );\n    Light[1].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[1].I_source = vec3( 1.0, 1.0, 1.0 );\n}\n\n// Computes intersection between a plane and a ray.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection \n// (hitNormal).\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n// Computes intersection between a plane and a ray for shadow ray intersection.\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n// Computes intersection between a sphere and a ray.\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n\t// A vector from sphere center towards ray origin\n    vec3 V = ray.o - sph.center;\n    float a0 = dot(V,V) - sph.radius * sph.radius;\n    float DdotV = dot(ray.d, V);\n\n    if (DdotV <= 0.0) {\n    \t// When the ray shoots towards the sphere\n    \tfloat discr = DdotV * DdotV - a0;\n    \tif (discr >= 0.0) {\n    \t\t// Smaller intersection point\n    \t\tt = -DdotV - sqrt(discr);\n    \t\thitPos = ray.o + t * ray.d;\n    \t\thitNormal = normalize(hitPos - sph.center);\n    \t\treturn (t >= tmin && t<= tmax);\n    \t}\n    }\n\treturn false;\n}\n\n// Computes intersection between a sphere and a ray for shadow ray intersection.\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    // A vector from sphere center towards ray origin\n    vec3 V = ray.o - sph.center;\n    float a0 = dot(V,V) - sph.radius * sph.radius;\n    float DdotV = dot(ray.d, V);\n\n    if (DdotV <= 0.0) {\n    \t// When the ray shoots towards the sphere\n    \tfloat discr = DdotV * DdotV - a0;\n    \tif (discr >= 0.0) {\n    \t\tfloat t = -DdotV - sqrt(discr);\n    \t\treturn (t >= tmin && t<= tmax);\n    \t}\n    }\n\treturn false;\n}\n\n// Computes intersection between a cone and a ray.\nbool IntersectCone( in Cone_t cone, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    vec3 co = ray.o - cone.c;\n\n    float a = dot(ray.d, cone.v)*dot(ray.d, cone.v) - cone.cosa * cone.cosa;\n    float b = 2. * (dot(ray.d, cone.v) * dot(co, cone.v) - dot(ray.d, co) * cone.cosa * cone.cosa);\n    float c = dot(co, cone.v) * dot(co, cone.v) - dot(co, co) * cone.cosa * cone.cosa;\n\n    float det = b * b - 4. * a * c;\n    if (det < 0.) return false;\n\n    det = sqrt(det);\n    float t1 = (-b - det) / (2. * a);\n    float t2 = (-b + det) / (2. * a);\n\n    t = t1;\n    if (t < 0. || t2 > 0. && t2 < t) t = t2;\n    if (t < 0.) return false;\n\n    vec3 cp = ray.o + t * ray.d - cone.c;\n    float h = dot(cp, cone.v);\n    if (h < 0. || h > cone.h) return false;\n\n    hitPos = ray.o + t * ray.d;\n    hitNormal = normalize(cp * dot(cone.v, cp) / dot(cp, cp) - cone.v);\n\n    return (t >= tmin && t<= tmax);\n}\n\n// Computes intersection between a cone and a ray for shadow ray intersection.\nbool IntersectCone( in Cone_t cone, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 co = ray.o - cone.c;\n\n    float a = dot(ray.d, cone.v)*dot(ray.d, cone.v) - cone.cosa * cone.cosa;\n    float b = 2. * (dot(ray.d, cone.v) * dot(co, cone.v) - dot(ray.d, co) * cone.cosa * cone.cosa);\n    float c = dot(co, cone.v) * dot(co, cone.v) - dot(co, co) * cone.cosa * cone.cosa;\n\n    float det = b * b - 4. * a * c;\n    if (det < 0.) return false;\n\n    det = sqrt(det);\n    float t1 = (-b - det) / (2. * a);\n    float t2 = (-b + det) / (2. * a);\n\n    float t = t1;\n    if (t < 0. || t2 > 0. && t2 < t) t = t2;\n    if (t < 0.) return false;\n    vec3 cp = ray.o + t * ray.d - cone.c;\n    float h = dot(cp, cone.v);\n    if (h < 0. || h > cone.h) return false;\n\n    return (t >= tmin && t<= tmax);\n}\n\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow, \n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a + \n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n// Casts a ray into the scene and returns color computed at the nearest hit position.\nvec3 CastRay( in Ray_t ray, \n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg ) \n{\n    // Find whether and where the ray hits some object. \n    bool hasHitSomething = false;\n    // The ray parameter t at the nearest hit point.\n    float nearest_t = DEFAULT_TMAX;\n    // 3D position of the nearest hit point.   \n    vec3 nearest_hitPos; \n    // Normal vector at the nearest hit point.             \n    vec3 nearest_hitNormal;\n    // MaterialID of the object at the nearest hit point.          \n    int nearest_hitMatID;             \n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    // Try interesecting input ray with all the planes and spheres,\n    // and record the front-most (nearest) interesection.\n    for (int i = 0; i < NUM_SPHERES; i++ ) {\n    \t// Try intersect with spheres\n    \ttemp_hasHit = IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, DEFAULT_TMAX,\n                      temp_t, temp_hitPos, temp_hitNormal);\n\n    \t// If intersect with spheres, compare and find the nearest\n    \tif (temp_hasHit && temp_t < nearest_t) {\n    \t\thasHitSomething = true;\n    \t\tnearest_t = temp_t;\n    \t\tnearest_hitPos = temp_hitPos;\n    \t\tnearest_hitNormal = temp_hitNormal;\n    \t\tnearest_hitMatID = Sphere[i].materialID;\n    \t}\n    \t\n    }\n\n    for (int i = 0; i < NUM_PLANES; i++ ) {\n    \t// Try intersect with planes\n    \t// Use nearest_t as input tmax to determine whether the intersection point\n    \t//with planes is the nearest\n    \ttemp_hasHit = IntersectPlane(Plane[i], ray, DEFAULT_TMIN, nearest_t,\n                      temp_t, temp_hitPos, temp_hitNormal);\n\n    \t// If hit, then now the hit point is nearer than spheres if any\n    \tif (temp_hasHit && temp_t < nearest_t ) {\n    \t\thasHitSomething = true;\n    \t\tnearest_t = temp_t;\n    \t\tnearest_hitPos = temp_hitPos;\n    \t\tnearest_hitNormal = temp_hitNormal;\n    \t\tnearest_hitMatID = Plane[i].materialID;\n    \t}\n    \t\n    }\n\n    for (int i = 0; i < NUM_CONES; i++ ) {\n    \t// Try intersect with cones\n    \t// Use nearest_t as input tmax to determine whether the intersection point\n    \t//with planes is the nearest\n    \ttemp_hasHit = IntersectCone(Cone[i], ray, DEFAULT_TMIN, nearest_t,\n                      temp_t, temp_hitPos, temp_hitNormal);\n\n    \t// If hit, then now the hit point is nearer than spheres if any\n    \tif (temp_hasHit && temp_t < nearest_t ) {\n    \t\thasHitSomething = true;\n    \t\tnearest_t = temp_t;\n    \t\tnearest_hitPos = temp_hitPos;\n    \t\tnearest_hitNormal = temp_hitNormal;\n    \t\tnearest_hitMatID = Cone[i].materialID;\n    \t}\n    \t\n    }\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );\n\n    // For each light source, make a shadow ray, and check if the shadow ray\n    // intersects any of the objects.\n    Ray_t ShadowRay[NUM_LIGHTS];\n    bool inshadow[NUM_LIGHTS];\n    for (int i = 0; i < NUM_LIGHTS; i++ ) {\n    \t// Make a shadow ray (from surface to light) for each light\n    \tShadowRay[i].o = nearest_hitPos;\n    \tShadowRay[i].d = normalize(Light[i].position - ShadowRay[i].o);\n\n    \tfor (int j = 0; j < NUM_SPHERES; j++ ) {\n    \t\t// If already in shadow, inshadow[i] becomes inaccessible\n    \t\tif(!inshadow[i]) {\n    \t\t\t// The point is in shadow if the shadow ray intersects with anything\n    \t\tinshadow[i] = IntersectSphere(Sphere[j], ShadowRay[i], DEFAULT_TMIN, \n    \t\t\tdistance(nearest_hitPos, Light[i].position));\n    \t\t}\n    \t}\n    \t// If not occluded, consider intersection with planes\n    \tif (!inshadow[i]) {\n    \t\tfor(int j = 0; j < NUM_PLANES; j++ ) {\n    \t\t\t// If already in shadow, inshadow[i] becomes inaccessible\n    \t\t\tif(!inshadow[i]) {\n    \t\t\t\tinshadow[i] = IntersectPlane(Plane[j], ShadowRay[i], DEFAULT_TMIN, \n    \t\t\t\tdistance(nearest_hitPos, Light[i].position));\n    \t\t\t}\n    \t\t}\n    \t}\n\n    \t// If not occluded, consider intersection with cones\n    \tif (!inshadow[i]) {\n    \t\tfor(int j = 0; j < NUM_CONES; j++ ) {\n    \t\t\t// If already in shadow, inshadow[i] becomes inaccessible\n    \t\t\tif(!inshadow[i]) {\n    \t\t\t\tinshadow[i] = IntersectCone(Cone[j], ShadowRay[i], DEFAULT_TMIN, \n    \t\t\t\tdistance(nearest_hitPos, Light[i].position));\n    \t\t\t}\n    \t\t}\n    \t}\n\n    \tI_local += PhongLighting( ShadowRay[i].d, nearest_hitNormal, - ray.d, inshadow[i], \n    \t\tMaterial[nearest_hitMatID], Light[i] );\n    }\n\n    \n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Position the camera.\n    vec3 cam_pos = vec3( 4. * cos(iTime / 2.) + 1., 10.0, 1. * sin(iTime / 2.) + 3.);\n    vec3 cam_lookat = vec3( 0., 0., 0. );\n    vec3 cam_up_vec = vec3( 0.0, 0.0, 1.0 );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ ) \n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}