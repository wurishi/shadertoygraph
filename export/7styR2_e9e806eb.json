{"ver":"0.1","info":{"id":"7styR2","date":"1653780923","viewed":72,"name":"Cosecant + Sine RGB Basic","username":"carpany","description":"Smooth cosecant and sine function","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rgb","sine","cosecant"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n#define SCROLL_SPEED 1.0\n#define ANIMATION_SPEED 2.0\n#define LINE_BLUR 5.0\n#define SCALE 5.0\n#define AMPLITUDE 3.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy - vec2(.5)) * vec2(PI*SCALE) + vec2(SCROLL_SPEED * iTime * PI, 0.0);\n    float sinTime = sin(ANIMATION_SPEED * iTime);\n    float fX = 1.0/sin(uv.x) * AMPLITUDE * sinTime;\n    float fX2 = sin(uv.x) * AMPLITUDE * sinTime;\n    \n    float distTo = min(length(uv - vec2(uv.x, fX)), length(uv - vec2(uv.x, fX2)));\n    float color = smoothstep(-LINE_BLUR, LINE_BLUR, 1.0 - distTo);\n    fragColor = vec4(\n        color * sin(iTime), //Staggered sine functions for continuous color\n        color * sin(iTime + 2.0*PI/3.0), \n        color * sin(iTime + 4.0*PI/3.0), \n        1.0);\n}","name":"Image","description":"","type":"image"}]}