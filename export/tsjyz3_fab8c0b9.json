{"ver":"0.1","info":{"id":"tsjyz3","date":"1587086548","viewed":413,"name":"ForkDithering Hardware Filtering","username":"Carandiru","description":"fork of https://www.shadertoy.com/view/tsjyzV\nonly to demonstrate the quality difference\nawesome job Dain!\n\nupdate: further improved with a mix of 2 samples dithered in opposite directions using a single channel of blue noise","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["dithering","bilinearfiltering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// fork of https://www.shadertoy.com/view/tsjyzV\n// only to demonstrate the quality difference\n// awesome job Dain!\n\n// GPU uses 8 bit fixed point coordinates between pixels, so when zooming in like you might with a noise texture, it becomes nearest neighbor eventually\n// Here I am applying a dither to improve the situation, adjusting UV by  (1/resolution) *(1/256)*dither prior to sampling it\n\n//Left side shows artifacts from GPU 8 bit fixed point interpolation\n//Right side uses dithering to (mostly) hide the artifacts\n\n//from: https://www.shadertoy.com/view/WtfSDS\nvec3 VNoiseCell( in vec2 p ){\n\tvec2 uv = p * 100.0f;\n\n    //Fetch 4 value noises--\n    return texture(iChannel0, (uv)/float(iChannelResolution[0])).rgb;\n    \n    //make some cells using geometric average\n    //float t = r.b;//abs(r.a*r.b-r.g+r.r);\n\t//return t;//*2.0 -1.0;\n    //float geo_avg = intBitsToFloat(798731503 + (floatBitsToInt(t)>>2)); \n    //return geo_avg*2.0 -1.0;\n}\n//note: from https://github.com/Unity-Technologies/ScriptableRenderPipeline/blob/master/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/FinalPass.shader#L124\nfloat remap_pdf_tri_unity( float v )\n{\n    v = v*2.0-1.0;\n    return sign(v) * (1.0 - sqrt(1.0 - abs(v)));\n}\n\nvec2 GetFinalUV(vec2 uv){\n   return uv*(.13 + cos(iTime*.3)*.03)  + 1.1 + sin(iTime*.25)*.03; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n\n\tvec2 uv = p*vec2(iResolution.x/iResolution.y,1.0);\n    \n    float bn = texture(iChannel1, fragCoord/vec2(iChannelResolution[1].xy) ).r;\n    \n    //2 seperate trianglar mapped blue noise samples for high quality dither\n\tvec2 blueNoiseDither = vec2(bn);//vec2(remap_pdf_tri_unity(bn.x), remap_pdf_tri_unity(bn.y));\n    \n\tvec3 f = vec3(0.0);\n    float split = .5;\n    float midPt = split*(iResolution.x/iResolution.y);\n  \n    // left: noise withing dithering on UV coordinates\n\tif( p.x<split )\n\t{\n\n\t\tf = VNoiseCell( GetFinalUV(uv) );\n\t}\n    // right: dither the 8 bit fixed point GPU coordinates\n    else\t\n\t{\n        uv=uv-vec2(midPt,0.0);\n        \n        //8 bit fixed point so adjust sub pixel precision by 1/256\n    \tfloat ditherSize = (1.0/256.0);\n        \n\t\tvec3 f0 = VNoiseCell(GetFinalUV(uv) + blueNoiseDither*ditherSize);\n        vec3 f1 = VNoiseCell(GetFinalUV(uv) - blueNoiseDither*ditherSize);\n        \n        f = mix(f0, f1, vec3(0.5f));\n\t}\n\t//from: https://www.shadertoy.com/view/lsf3WH\n\t//f = 2.0 + 2.0*f;\n\t\n    //f *= smoothstep( 0.0, 0.005, abs(p.x-split) );\t\n\t\n\tfragColor = vec4( f, 1.0 );\n}","name":"Image","description":"","type":"image"}]}