{"ver":"0.1","info":{"id":"XcdXWl","date":"1714619728","viewed":36,"name":"de-saturation","username":"x5lcfd","description":"saturation of color","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["color","saturation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/4dKcWK\n\nconst float EPSILON = 1e-10;\n\nvec3 HUEtoRGB(in float hue)\n{\n    // Hue [0..1] to RGB [0..1]\n    // See http://www.chilliant.com/rgb2hsv.html\n    vec3 rgb = abs(hue * 6. - vec3(3, 2, 4)) * vec3(1, -1, -1) + vec3(-1, 2, 2);\n    return clamp(rgb, 0., 1.);\n}\n\nvec3 RGBtoHCV(in vec3 rgb)\n{\n    // RGB [0..1] to Hue-Chroma-Value [0..1]\n    // Based on work by Sam Hocevar and Emil Persson\n    vec4 p = (rgb.g < rgb.b) ? vec4(rgb.bg, -1., 2. / 3.) : vec4(rgb.gb, 0., -1. / 3.);\n    vec4 q = (rgb.r < p.x) ? vec4(p.xyw, rgb.r) : vec4(rgb.r, p.yzx);\n    float c = q.x - min(q.w, q.y);\n    float h = abs((q.w - q.y) / (6. * c + EPSILON) + q.z);\n    return vec3(h, c, q.x);\n}\n\nvec3 HSVtoRGB(in vec3 hsv)\n{\n    // Hue-Saturation-Value [0..1] to RGB [0..1]\n    vec3 rgb = HUEtoRGB(hsv.x);\n    return ((rgb - 1.) * hsv.y + 1.) * hsv.z;\n}\n\nvec3 HSLtoRGB(in vec3 hsl)\n{\n    // Hue-Saturation-Lightness [0..1] to RGB [0..1]\n    vec3 rgb = HUEtoRGB(hsl.x);\n    float c = (1. - abs(2. * hsl.z - 1.)) * hsl.y;\n    return (rgb - 0.5) * c + hsl.z;\n}\n\nvec3 RGBtoHSV(in vec3 rgb)\n{\n    // RGB [0..1] to Hue-Saturation-Value [0..1]\n    vec3 hcv = RGBtoHCV(rgb);\n    float s = hcv.y / (hcv.z + EPSILON);\n    return vec3(hcv.x, s, hcv.z);\n}\n\nvec3 RGBtoHSL(in vec3 rgb)\n{\n    // RGB [0..1] to Hue-Saturation-Lightness [0..1]\n    vec3 hcv = RGBtoHCV(rgb);\n    float z = hcv.z - hcv.y * 0.5;\n    float s = hcv.y / (1. - abs(z * 2. - 1.) + EPSILON);\n    return vec3(hcv.x, s, z);\n}\n\n\nfloat Lightness(in vec3 c)\n{\n    return ( max(max(c.r, c.g), c.b) + min(min(c.r, c.g), c.b) ) * 0.5;\n}\n\nfloat Average(in vec3 c)\n{\n    return (c.r + c.g + c.b) / 3.0;\n}\n\nfloat Luminosity(in vec3 c)\n{\n    return dot(c, vec3(0.21, 0.72, 0.07));\n}\n\n\nvec3 Draw0(vec2 InUV) {\n    vec3 UVColor = vec3(InUV.x, InUV.y, 0.0) * 10.0;\n    vec3 StepColor = (UVColor - fract(UVColor)) / 10.0;\n    return StepColor;\n\n}\n\nvec3 Draw1(vec3 InRGB) { \n    vec3 HSVColor = RGBtoHSV(InRGB);\n    HSVColor = vec3(HSVColor.r, 0.0, HSVColor.b);\n    return HSVtoRGB(HSVColor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 impos = vec2(iMouse.x < 1e-3 ? iResolution.x/2.0 : iMouse.x, iMouse.y);\n    vec2 mpos = (impos.xy/iResolution.xy);\n    \n    vec2 newuv = uv;\n    \n    vec2 lines = round(clamp(1.0-abs(uv-mpos)*iResolution.xy/2.0, 0.0, 1.0));\n    vec2 split = round(clamp(1.0-(uv-mpos)*iResolution.x/2.0, 0.0, 1.0));\n    \n    float freq = 12.0;\n    \n    vec3 color0 = Draw0(uv);\n    float l = Lightness(color0);\n    float a = Average(color0);\n    float lu = Luminosity(color0);\n    \n    // vec3 color1 = Draw1(color0);\n    vec3 color1 = vec3(l, l, l);\n    \n    vec3 color = mix(color0, color1, split.x);\n\n    color = mix(color, vec3(lines.x, .0, .0), lines.x);\n    \n    fragColor = vec4(pow(color, vec3(1./2.2)),1.0);\n}\n","name":"Image","description":"","type":"image"}]}