{"ver":"0.1","info":{"id":"fs2cRG","date":"1643697592","viewed":66,"name":"mandelbrot - mr_phiroze","username":"mr_phiroze","description":"simple mandelbrot shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 HueToRGB(float hue) {\n  vec3 h = vec3(hue, hue + 1.0/3.0, hue + 2.0/3.0);\n  return clamp(6.0 * abs(h - floor(h) - 0.5) - 1.0, 0.0, 1.0);\n}\n\nvec3 rgb_rainbow(float v) {\n  vec3 r = vec3(1.,0.,0.); float k1 = 1.0/3.0;\n  vec3 g = vec3(0.8,0.8,0.); float k2 = 2.0/3.0;\n  vec3 b = vec3(0.,0.8,0.8); float k3 = 3.0/3.0 - 0.0001;\n  vec3 k = vec3(0.,0.,1.); float k4 = 1.0;\n\n  // x < e ; x >= e == -x < -e\n  vec4 lt = step(vec4(k1,k2,k3,1.0), vec4(v));\n  vec4 gt = step(-vec4(k2,k3,1.0,10.0), -vec4(v));\n  vec4 mask = lt * gt;\n  return (mix(r, g, v) * mask.x + mix(g, b, v) * mask.y +\n          mix(b, k, v) * mask.z + mix(k, k, v) * mask.w);\n}\n\nvec2 mandel_equation(vec2 z, vec2 c) {\n  return vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    // 0..x -> -x ..x\n    vec2 uv = 2.0 * fragCoord - iResolution.xy;\n    vec2 c = uv / min(iResolution.xy.x, iResolution.xy.y);\n    vec2 z = c;\n\n    int col = 0;\n    int nmax = 256;\n    while ((col <= nmax) && (sqrt(z.x*z.x + z.y*z.y) < 2.0)) {\n      z = mandel_equation(z, c);\n      col += 1;\n    }\n\n    // Output to screen\n    float fc = smoothstep(0., float(nmax), float(col));\n    vec3 rgb = rgb_rainbow(fc);\n      //mod(vec3(col, col+nmax/4, col+nmax/2) / float(nmax), 1.0);\n    fragColor = vec4(rgb, 1.0);\n    //fragColor = vec4(HueToRGB(c.x), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}