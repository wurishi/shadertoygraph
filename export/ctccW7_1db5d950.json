{"ver":"0.1","info":{"id":"ctccW7","date":"1700483389","viewed":131,"name":"Interpolation Contrast Methods","username":"gehtsiegarnixan","description":"This shader shows a comparative exploration of contrast enhancement methods, featuring both Straight and Smooth Contrast techniques applied to different interpolation methods.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["mix","contrast","barycentric","lerp","blend","linear","interpolation","smooth","bilinear","straight"],"hasliked":0,"parentid":"-1","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nThis shader demonstrates a comparison between two methods for enhancing the \ncontrast of weights used in interpolation. A contrast function increases the \nrate of change, while meantaining normalized weights. The first is straight \ncontrast, which I may be the first to make for 3 and 4 sample interpolation, \nand the second is smooth contrast, which I have seen only a few times.\n\nSmooth interpolation operates by normalizing the weights and applying a power\nfactor to them. It is highly adaptable as it can be easily applied to any \ninterpolation technique. However, with high power values (~70+), you may start \nto encounter floating point errors.\n\nStraight contrast, on the other hand, technically modifies the coordinates. It \nworks pretty straightforwardly for linear weights. However, for higher level \ninterpolation, it becomes increasingly complex. It is faster than smooth \ncontrast and doesn't have a problem with floating point errors. \n\nThe columns, from left to right, illustrate linear interpolation with both \nStraight and Smooth Contrast, followed by barycentric interpolation with \nthe same contrasts, and finally bilinear interpolation with both contrasts \napplied.\n\nThis shader allows mouse control for the contrast on the Y-axis and enables \nyou to enlarge one of comparison pair columns by moving the X-axis to the \ncolumn center. Global constants below allow you to switch to alternate \nviews.\n*/\n\n// Enable to show the weights (Alpha); disable to show textures\n#define SHOWWEIGHTS\n\n//_____________________________Straight Contrast___________________________\n\n// Linearly increases contrast of Alpha\n// See: https://www.desmos.com/calculator/hs1nsjb32q\nfloat straightContrast(float alpha, float contrast) {\n    return clamp(contrast * (alpha - 0.5) + 0.5, 0., 1.);\n}\n\n// Straight Contrast to 3 Barycentric Weights, oh the pain\n// See: https://www.desmos.com/calculator/n23ntt1nys\nvec3 straightContrast(vec3 weights, float contrast) {\n    // Offset of weights to move towards the center\n    // InverseStraightContrast(0)*(1/3)\n    float offset = (contrast-1.) / (6. * contrast);\n\n    // Merge the offset with the diagonal offsets\n    float offsetA = min(offset, min(weights.y, weights.z) * 0.5);\n    float offsetB = min(offset, min(weights.x, weights.z) * 0.5);\n\n    // Apply the contrast to the merged weights\n    float contrastA = straightContrast(weights.x + offsetA, contrast);\n    float contrastB = straightContrast(weights.y + offsetB, contrast);\n    // No proper calculation needed as sum(weights)=1\n    float contrastC = 1. - contrastA - contrastB; \n        \n    // merge into vector\n    return vec3(contrastA, contrastB, contrastC);\n}\n\n// Straight Contrast for 4 Bilinear Weights \n// See: https://www.desmos.com/calculator/629sxxdp5g\nvec4 straightContrast(vec4 weights, float contrast) {\n    // recreate coordinates\n    float ab = weights.x + weights.y; // = UV.x\n    float ac = weights.x + weights.z; // = UV.y\n    \n    // apply contrast\n    ab = straightContrast(ab, contrast);\n    ac = straightContrast(ac, contrast);\n    \n    // recreate weights\n    return bilinearWeights(vec2(ab, ac));\n}\n\n//_____________________________Smooth Contrast_____________________________\n\n// Increases the steepness of Alpha while preserving 0-1 range and 1 sum\n// See: https://www.desmos.com/calculator/hs1nsjb32q\nfloat smoothContrast(float alpha, float contrast) {\n    // increase steepness using power\n    float powAlpha = pow(alpha, contrast);\n    float powInfAlpha = pow(1.-alpha, contrast);\n    \n    // normalize back to precentage of 1\n    return powAlpha/(powAlpha + powInfAlpha);\n}\n\n// Increases the steepness of Alpha while preserving 0-1 range and 1 sum\n// See: https://www.desmos.com/calculator/n23ntt1nys\nvec3 smoothContrast(vec3 alpha, float contrast) {\n    // increase steepness using power\n    vec3 powAlpha = pow(alpha, vec3(contrast));\n    \n    // normalize back to precentage of 1\n    return powAlpha/(powAlpha.x + powAlpha.y + powAlpha.z);\n}\n\n// Increases the steepness of Alpha while preserving 0-1 range and 1 sum\n// See: https://www.desmos.com/calculator/629sxxdp5g\nvec4 smoothContrast(vec4 alpha, float contrast) {\n    // increase steepness using power\n    vec4 powAlpha = pow(alpha, vec4(contrast));\n    \n    // normalize back to precentage of 1\n    return powAlpha/(powAlpha.x + powAlpha.y + powAlpha.z + powAlpha.w);\n}\n\n//__________________________Blending Functions_____________________________\n\n// blends between two samples using different contrast methods\nvec3 linearBlend(vec2 uv, float contrast, bool straight) {\n    // Calculate zigzag linear weight\n    float weight = abs(fract(uv.y) * 2.0 - 1.0);\n    \n    // alternate between contrast methods\n    if(straight) {\n        // contrast for this starts at 0, so to make it comparible\n        //contrast -= 1.;\n        \n        // a bit cheaper\n        weight = straightContrast(weight, contrast);\n    } else {\n        // prettier and easier to use\n        weight = smoothContrast(weight, contrast);\n    }\n    \n    // Debug view of weights\n    #ifdef SHOWWEIGHTS\n        // Apply a pretty colormap for visual clarity\n        return viridis(weight);\n    #endif\n    \n    // Apply arbitrary detail scale\n    uv *= 0.81;\n    \n    // Sample albedo textures\n    vec3 colorA = texture(iChannel0, uv).xyz;\n    vec3 colorB = bone(texture(iChannel1, uv).x);\n    \n    // Interpolation between the textures based on the final weight\n    return mix(colorA, colorB, weight);\n}\n\n// Barycentric interpolation between 3 samples using different contrast\nvec3 baryBlend(vec2 uv, float contrast, bool straight) {\n    // Create zigzag tiling for UVs\n    vec2 gridUV = abs(fract(uv) - 0.5) * 2.0;\n    \n    // Calculate barycentric weights for a square pattern\n    vec3 weights = baryWeights(gridUV);\n           \n    if(straight) {\n        // contrast for this starts at 0, so to make it comparible\n        //contrast -= 1.;\n        \n        // Apply straight contrast on weights\n        weights = straightContrast(weights, contrast);\n    } else {\n        // Apply smooth contrast on weights\n        weights = smoothContrast(weights, contrast);\n    }\n    \n    // Debug view of weights\n    #ifdef SHOWWEIGHTS\n        // Return weights / Alpha values for debugging\n        return weights;\n    #endif\n    \n    // Apply arbitrary detail scale\n    uv *= 0.81;\n    \n    // Sample albedo textures\n    vec3 colorA = texture(iChannel0, uv).xyz;\n    vec3 colorB = bone(texture(iChannel1, uv).x);\n    vec3 colorC = texture(iChannel2, uv).xyz;\n    \n    // Interpolate between the textures based on the final weights\n    return colorA * weights.x + colorB * weights.y + colorC * weights.z;\n}\n\n// Bilinear interpolation with between 4 samples using different contrast\nvec3 bilinearBlend(vec2 uv, float contrast, bool straight) {\n    // Create zigzag tiling for UVs\n    vec2 gridUV = abs(fract(uv) - 0.5) * 2.0;\n        \n    // Calculate vanilla bilinear weights\n    vec4 weights = bilinearWeights(gridUV);\n    \n    // Alternatively use smooth contrast on weights \n    if(straight) {\n        // contrast for this starts at 0, so to make it comparible\n        //contrast -= 1.;\n        \n        // Apply straight contrast on weights\n        weights = straightContrast(weights, contrast);\n        \n    } else {\n        // Apply smooth contrast on weights\n        weights = smoothContrast(weights, contrast);\n    }    \n    \n    // Debug view of weights\n    #ifdef SHOWWEIGHTS\n        // Show weights / Alpha values\n        return weights.xyz;\n    #endif\n    \n    // Apply arbitrary detail scale\n    uv *= 0.81;\n    \n    // Sample albedo textures\n    vec3 colorA = texture(iChannel0, uv).xyz;\n    vec3 colorB = bone(texture(iChannel1, uv).x);\n    vec3 colorC = texture(iChannel2, uv).xyz;\n    vec3 colorD = texture(iChannel3, uv).xyz;\n     \n    // Interpolation between the textures\n    vec3 color = colorA * weights.x + \n                 colorB * weights.y + \n                 colorC * weights.z +\n                 colorD * weights.w;\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {   \n    // Calculate UVs for the x-axis of the window\n    vec2 uv = fragCoord / iResolution.x;\n    \n    // Calculate UVs for the blend grids\n    vec2 gridUV = uv * 3.0;\n    \n    // Create a float to divide into sections for comparisons\n    float comparisonX = uv.x * 6.0;\n    \n    // Enable mouse controls when clicked; otherwise, animate\n    float contrast = 1.;\n    float pointer = 0.;\n    if (iMouse.x > 0.0) {\n        // Mouse controls\n        vec2 mouse = iMouse.xy / iResolution.xy;\n        contrast = mix(1.0, 8.0, pow(mouse.y, 2.0));\n        pointer = mouse.x * 3.0;\n    } else {\n        // Animation when no mouse input is used\n        float myTime = iTime * 1.0;\n        contrast = mix(1.0, 8.0, pow(sin(myTime) * 0.5 + 0.5, 2.0));\n    }\n    \n    // Create zigzag weights\n    float weight = abs(fract(pointer - 0.5) * 2.0 - 1.0);\n    \n    // make transitions deadzones for easier use\n    weight = straightContrast(weight, 2.);\n            \n    // Define default edge locations for the columns\n    vec2 columnEdges = vec2(2., 4.); \n    vec3 columnCenters = vec3(1., 3., 5.); \n    \n    // Mouse-controlled animations to zoom into the columns    \n    vec2 zoomColumnEdges = columnEdges;\n    vec3 zoomColumnCenters = columnCenters;\n    if (pointer <= 1.0) {\n        // Zoom into the left side        \n        zoomColumnEdges = vec2(5.2, 5.6);\n        zoomColumnCenters = vec3(2.6 ,5.4, 5.8);\n    } else if (pointer <= 2.0) {\n        // Zoom into the center column\n        zoomColumnEdges = vec2(0.4, 5.6);\n        zoomColumnCenters = vec3(0.2, 3.0, 5.8);\n    } else {\n        // Zoom into the right column\n        zoomColumnEdges = vec2(0.4, 0.8);\n        zoomColumnCenters = vec3(0.2, 0.6, 3.4);\n    }\n    \n    // Interpolate between default column edge positions and zoom\n    columnEdges = mix(columnEdges, zoomColumnEdges, weight);  \n    columnCenters = mix(columnCenters, zoomColumnCenters, weight);\n    \n    // Choose interpolation method based on the x-coordinate\n    vec3 color;\n    if (comparisonX <= columnCenters.x) {\n        // straight contrast linear interpolation\n        color = linearBlend(gridUV, contrast, true);\n           \n    } else if (comparisonX <= columnEdges.x) {\n        // smooth contrast linear interpolation\n        color = linearBlend(gridUV, contrast, false);\n    \n    } else if (comparisonX <= columnCenters.y) {\n        // straight contrast barycentric interpolation\n        color = baryBlend(gridUV, contrast, true);\n    \n    } else if (comparisonX <= columnEdges.y) {\n        // smooth contrast barycentric interpolation\n        color = baryBlend(gridUV, contrast, false);\n    \n    } else if (comparisonX <= columnCenters.z) {\n        // straight contrast bilinear interpolation\n        color = bilinearBlend(gridUV, contrast, true);\n    \n    } else {\n        // smooth contrast bilinear interpolation\n        color = bilinearBlend(gridUV, contrast, false);\n    }\n    \n    // Add lines between columns\n    float thickness = 0.005;       \n    color += step(abs(comparisonX - columnEdges.x), thickness*2.);\n    color += step(abs(comparisonX - columnEdges.y), thickness*2.);\n    color += step(abs(comparisonX - columnCenters.x), thickness);\n    color += step(abs(comparisonX - columnCenters.y), thickness);\n    color += step(abs(comparisonX - columnCenters.z), thickness);\n    \n    // Add arrows pointing at the center of columns\n    color += step(uv.y + abs(fract(comparisonX*0.5)-0.5), thickness*5.);\n    \n    // Set the output color\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//_____________________________Generic Functions________________________________\n\n// makes viridis colormap with polynimal 6\nvec3 viridis(float t) {\n    const vec3 c0 = vec3(0.274344,0.004462,0.331359);\n    const vec3 c1 = vec3(0.108915,1.397291,1.388110);\n    const vec3 c2 = vec3(-0.319631,0.243490,0.156419);\n    const vec3 c3 = vec3(-4.629188,-5.882803,-19.646115);\n    const vec3 c4 = vec3(6.181719,14.388598,57.442181);\n    const vec3 c5 = vec3(4.876952,-13.955112,-66.125783);\n    const vec3 c6 = vec3(-5.513165,4.709245,26.582180);\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\n// makes bone colormap with polynimal 6\nvec3 bone(float t) {\n    const vec3 c0 = vec3(-0.005007,-0.003054,0.004092);\n    const vec3 c1 = vec3(1.098251,0.964561,0.971829);\n    const vec3 c2 = vec3(-2.688698,-0.537516,2.444353);\n    const vec3 c3 = vec3(12.667310,-0.657473,-8.158684);\n    const vec3 c4 = vec3(-27.183124,8.398806,10.182004);\n    const vec3 c5 = vec3(26.505377,-12.576925,-5.329155);\n    const vec3 c6 = vec3(-9.395265,5.416416,0.883918);\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\n// make square tiling of barycentric weights\nvec3 baryWeights(vec2 uv) {\n    // make individual weights for pattern\n    float weightA = min(uv.x, uv.y);\n    float weightB = min(1.-uv.x, 1.-uv.y);\n    float weightC = 1. - weightA - weightB;\n    \n    // Join weights together\n    return vec3(weightA, weightB, weightC);\n}\n\n// make mirroring bilinear tiling weights\nvec4 bilinearWeights(vec2 uv) {    \n    // Invert coords as a partial of the weights\n    vec2 invUV = 1.0 - uv;\n\n    // Generate alpha values (weights) for bilinear interpolation.\n    float weightA = uv.x * uv.y;\n    float weightB = uv.x * invUV.y;\n    float weightC = invUV.x * uv.y;\n    float weightD = invUV.x * invUV.y;\n    \n    // Combine weight/alpha values. \n    return vec4(weightA, weightB, weightC, weightD);\n}\n","name":"Common","description":"","type":"common"}]}