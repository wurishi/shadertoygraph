{"ver":"0.1","info":{"id":"ml3Gzf","date":"1683321240","viewed":150,"name":"less repetitive texture tilling","username":"mdb","description":"test of offset in texture tilling","likes":2,"published":3,"flags":0,"usePreview":1,"tags":["texture","tilling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 getOffset(vec2 p){\n    return vec2(fract(sin(p.x*946336.+6.+p.y*334747.)), \n                fract(sin(p.x*756854. + p.y*95236.+1.)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv*=6.;\n    \n    float overlap = 0.1;\n    \n    float w = 0.;\n    vec3 col = vec3(0.);\n    vec2 uvf = fract(uv);\n    for(int i=-1; i<=1; i++){\n        for(int j=-1; j<=1; j++){\n            vec2 off = vec2(i, j);\n            vec2 uv2 = off+vec2((i==0)?uvf.x:1.-uvf.x, (j==0)?uvf.y:1.-uvf.y);\n            \n            \n            float weight = (1. - smoothstep(0., overlap, abs(uvf.x - uv2.x)))\n                          *(1. - smoothstep(0., overlap, abs(uvf.y - uv2.y)));\n            \n            w += weight;\n            col += weight*texture(iChannel0, uvf+getOffset(floor(uv)+off)).rgb;\n        }\n    }\n    col /= w;\n    //test\n    if(fragCoord.x/iResolution.x < 0.5) col = texture(iChannel0, uv).rgb; \n    if(abs(fragCoord.x/iResolution.x-0.5) < 0.001) col = vec3(1.000,0.808,0.478);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}