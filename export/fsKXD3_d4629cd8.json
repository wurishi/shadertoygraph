{"ver":"0.1","info":{"id":"fsKXD3","date":"1635416135","viewed":48,"name":"Sine Wave Animation","username":"SerialSniper","description":"A cool sine wave animation","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float min_thickness = 0.02;\nconst float max_thickness = 0.05;\nconst float freq = 30.0;\nconst float ampl = 0.1;\n\nfloat speed = 1.0;\nfloat thickness = 0.02;\nfloat invert = 1.0;\n\nvec3 mask(float min, float max, vec2 uv, vec3 col, vec3 background) {\n    const float tollerance = 0.000001;\n\n    float maxStep = smoothstep(max, max + tollerance, uv.y);\n    float minStep = smoothstep(min + tollerance, min, uv.y);\n    col = mix(col, background, maxStep);\n    col = mix(col, background, minStep);\n    \n    return col;\n}\n\nfloat sine(float angle, vec2 uv) {\n    return sin((angle + speed + uv.x) * freq) * invert * ampl + 0.5;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4));\n    vec3 background = vec3(0);\n    \n    speed = sin(iTime) + 1.0;\n    thickness = (cos(iTime) / 2.0 + 0.5) * (max_thickness - min_thickness) + min_thickness;\n    invert = cos(iTime);\n    \n    float wave = sine(iTime, uv) - thickness / 2.0;\n    float wave2 = sine(iTime, uv) + thickness / 2.0;\n    \n    background = mix(vec3(0), col, -cos(iTime) / 2.0 + 0.5);\n    col = mix(col, vec3(0), -cos(iTime) / 2.0 + 0.5);\n    \n    col = mask(wave, wave2, uv, col, background);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}