{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"vec3 F1(in float x, in float y, in float Scale, in float Speed)\n{   \n    x *= Scale*0.5+(0.5*sin(iTime*Speed));\n    y *= Scale*0.5+(0.5*sin(iTime*Speed));\n    \n\tfloat f = pow(x*x+y*y,3.0) - 27.0*x*x*y*y;\n    float dx = 6.0*x*pow(x*x+y*y,2.0) - 54.0*x*y*y;\n    float dy = 6.0*y*pow(x*x+y*y,2.0) - 54.0*x*x*y;\n    return vec3(f,dx,dy);\n}\n\nvec3 F2(in float x, in float y, in float Scale, in float Speed)\n{   \n    x *= Scale*0.5+(0.5*sin(iTime*Speed));\n    y *= Scale*0.5+(0.5*sin(iTime*Speed));\n    \n\tfloat f = x*x+y*y-1.0;\n    float dx = 2.0*x;\n    float dy = 2.0*y;\n    return vec3(f,dx,dy);\n}\n\nvec3 F3(in float x, in float y, in float Scale, in float Speed)\n{   \n    x *= Scale*0.5+(0.5*sin(iTime*Speed));\n    y *= Scale*0.5+(0.5*sin(iTime*Speed));\n    \n\tfloat f = pow(x*x-y,2.0) - pow(x,5.0);\n    float dx = 4.0*x*(x*x-y) - 5.0*pow(x,4.0);\n    float dy = 2.0*(x*x-y);\n    return vec3(f,dx,dy);\n}\n\nvec3 F4(in float x, in float y, in float Scale, in float Speed)\n{   \n    x *= Scale*0.5+(0.5*sin(iTime*Speed));\n    y *= Scale*0.5+(0.5*sin(iTime*Speed));\n    \n\tfloat f = x*x*x-2.0*x*x-y*y+x;\n    float dx = 3.0*x*x-4.0*x+1.0;\n    float dy = -2.0*y;\n    return vec3(f,dx,dy);\n}\n\nvec3 F5(in float x, in float y, in float Scale, in float Speed)\n{   \n    x *= Scale+(3.0*sin(iTime*Speed));\n    y *= Scale+(3.0*sin(iTime*Speed));\n    \n\tfloat f = pow(x*x+y*y-6.0*x,2.0)-x*x-y*y;\n    float dx = (4.0*x-12.0)*(x*x+y*y-6.0*x)-2.0*x;\n    float dy = 4.0*y*(x*x+y*y-6.0*x)-2.0*y;\n    return vec3(f,dx,dy);\n}\n\nvec3 F6(in float x, in float y, in float Scale, in float Speed)\n{   \n    x *= Scale+(1.5*sin(iTime*Speed));\n    y *= Scale+(1.5*sin(iTime*Speed));\n    \n\tfloat f = x*x*x*x+y*y*y*y-8.0*x*x-10.0*y*y+16.0;\n    float dx = 4.0*x*x*x-16.0*x;\n    float dy = 4.0*y*y*y-20.0*y;\n    return vec3(f,dx,dy);\n}\n\nvec3 F7(in float x, in float y, in float Scale, in float Speed)\n{   \n    x *= Scale*0.5+(0.5*sin(iTime*Speed));\n    y *= Scale*0.5+(0.5*sin(iTime*Speed));\n    \n    float a = 0.75;\n\tfloat f = pow(x*x-y*y+a,2.0)-x*x/(y*y);\n    float dx = 4.0*x*(x*x-y*y+a)-2.0*x/(y*y);\n    float dy = -4.0*y*(x*x-y*y+a)+2.0*x*x/(y*y*y);\n    return vec3(f,dx,dy);\n}\n\nvec3 F8(in float x, in float y, in float Scale, in float Speed)\n{   \n    x *= Scale*0.5+(0.5*sin(iTime*Speed));\n    y *= Scale*0.5+(0.5*sin(iTime*Speed));\n    \n    float a = 1.0;\n\tfloat f = pow(x,2.0/3.0)+pow(y,2.0/3.0)-a;\n    float dx = pow(x,-1.0/3.0);\n    float dy = pow(y,-1.0/3.0);\n    return vec3(f,dx,dy);\n}\n\nvec3 F9(in float x, in float y, in float Scale, in float Speed)\n{   \n    x *= Scale*0.75+(0.25*sin(iTime*Speed));\n    y *= Scale*0.75+(0.25*sin(iTime*Speed));    \n\n\tfloat f = pow(x*x+y*y,2.0)-x*x+y*y;\n    float dx = 4.0*x*(x*x+y*y)-2.0*x;\n    float dy = 4.0*y*(x*x+y*y)+2.0*y;\n    return vec3(f,dx,dy);\n}\n\nfloat Graph(in vec3 f, in float s)\n{\n    float Distance = abs(f.x)/length(s*f.yz);\n    return smoothstep(0.1,0.15,Distance);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = (fragCoord.xy/iResolution.yy-vec2(0.5*iResolution.x/iResolution.y,0.5));\n        \n\tvec2 grid = min(vec2(1.0,1.0),floor(abs(uv*min(iResolution.y,512.0))));\n    \n    float a = Graph(F1(uv.x,uv.y,8.0,2.0),0.16);\n    \n\tfloat b = Graph(F2(uv.x,uv.y,5.0,2.0),0.09);\n    \n    float c = Graph(F3(uv.x,uv.y,5.0,2.0),0.08);\n    \n    float d = Graph(F4(uv.x,uv.y,5.0,2.0),0.07);\n    \n    float e = Graph(F5(uv.x,uv.y,10.0,2.0),0.3);\n    \n    float f = Graph(F6(uv.x,uv.y,8.0,2.0),0.2);      \n    \n    float g = Graph(F7(uv.x,uv.y,6.0,2.0),0.08);\n    \n    float h = Graph(F8(uv.x,uv.y,4.5,2.0),0.05);      \n    \n    float i = Graph(F9(uv.x,uv.y,2.0,2.0),0.05);    \n   \n    float m = floor(fract((iTime-9.0)/24.0)*9.0);\n    \n    float graph = a;\n    \n    if (m == 0.0)\n    {graph = a;}\n    \n    else if (m == 1.0)\n    {graph = b;}\n    \n    else if (m == 2.0)\n    {graph = c;}\n    \n    else if (m == 3.0)\n    {graph = d;}\n    \n    else if (m == 4.0)\n    {graph = e;}\n    \n    else if (m == 5.0)\n    {graph = f;}\n    \n    else if (m == 6.0)\n    {graph = g;}\n    \n    else if (m == 7.0)\n    {graph = h;}\n    \n    else\n     graph = i;\n    \n    fragColor = vec4( mix(vec4(0.0,0.0,1.0,0.0),vec4(1.0),graph)*grid.x*grid.y);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsjXRd","date":"1415228078","viewed":210,"name":"Implicit Functions 2D","username":"mAlk","description":"graphical representation of various implicit functions","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["graph","function","implicit"],"hasliked":0,"parentid":"","parentname":""}}