{"ver":"0.1","info":{"id":"slVBWt","date":"1665496448","viewed":74,"name":"Simple Lighting","username":"djones9","description":"circle-sphere, lighting","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["simple","lighting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//1\nfloat size = 1.0;\n//additional lighting\nvec3 ambientcolour = vec3(1., 1., 1.);\n\n\n//3\nvec2 lightpos = vec2 (40.0, 20.0);\nint highlight = 1;\nvec3 colour = vec3(0.7, 0.3, 0.7);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //1\n    //convert the resolution of coordinates into 0-1 range\n    vec2 coord = fragCoord.xy/ iResolution.y*size;\n    \n    //5\n    if(iMouse.x >0. && iMouse.x < iResolution.x){\n        lightpos = vec2(iMouse.x*2.-iResolution.x, -iMouse.y*2.+iResolution.y);\n    }\n    \n    //6\n    // Time varying pixel color\n    vec3 bg = 0.5 + 0.5*cos(iTime+coord.xyx+vec3(0,2,4));\n    vec4 col = vec4(bg, 1.0);\n    \n    //1\n    //Generate circle\n    //create a circle in the center\n    vec2 center = vec2(0.5, 0.5);\n    float d = distance(center, coord) /0.5;\n    float a = d > 0.99 ? 1.0 - smoothstep(0.99, 1.0, d) : 1.0;\n    //to combine layers\n    col += vec4(a, a, a, 1.0); //+= from part 6\n\n    //2\n    //Make it look spherical with normals\n    //create UV coords\n    vec2 uv = (2.0 * coord - 1.0);\n    //build normal using xy and a calculated z\n    vec3 n = vec3(uv, sqrt(1.0 - clamp(dot(uv, uv), 0.0, 1.0)));\n    //generate surface normal map\n    vec3 map = 0.5 + 0.5 * n;\n    //combine with circle\n    //col*= vec4(map, 1.0); //show normal map!\n\n    //3\n    //Adding lighting and colour\n    //create light source\n    vec3 light = vec3(lightpos.x, -lightpos.y * 3.0, 100.0);\n    //normalise the light direction\n    light = normalize(light);\n   \n    //4\n    //Specularity\n    float spec = 0.0;\n    if(highlight > 0){\n        //Generate specular shine\n        vec3 r = reflect(-light, n);\n        vec3 spot = n * 10.;\n        spot.z = 400.;\n        vec3 v = normalize(spot);\n        float bounce = max(dot(r, v), 0.);\n        spec = pow(bounce, 10.);\n        spec = smoothstep(0.5, 1.0, spec);\n        spec = pow(spec, 30.) * 0.9;\n    }    \n    \n    //3\n    //use dot product to find brightness of pixel on sphere\n    float brightness = clamp (dot(light, n), 0.1, 1.0);\n    //adding colour\n    col*= vec4(colour * brightness, 1.0);\n    \n    // Output to screen\n    fragColor = col + vec4(ambientcolour/5., 1.0) +spec;  //add 'spec' in step 4\n}","name":"Image","description":"","type":"image"}]}