{"ver":"0.1","info":{"id":"Xs2BWw","date":"1500676799","viewed":234,"name":"Midnight City","username":"banthar","description":"Look around with mouse. Move with WSAD.","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["3d","raytracing","blur","city"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = vec4(0);\n    const float n = 4.0;\n    float s = 0.0;\n    for(float y=-n;y<=n;y+=1.0) {\n\t    for(float x=-n;x<=n;x+=1.0) {\n            vec4 c = texture(iChannel0, (fragCoord+vec2(x,y))/iResolution.xy);\n            float p = exp(-length(vec2(x,y)/n*2.0));\n            c *= p;\n            s += p;\n            fragColor += c;\n        }\n    }\n    fragColor /= s;\n    fragColor *= 16.0;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float tau = 6.28318530718;\n\nmat4 rotateX(float a) {\n    return mat4(\n        1,0,0,0,\n\t\t0,cos(a),-sin(a),0,\n\t\t0,sin(a),cos(a),0,\n\t\t0,0,0,1);\n}\n\n\nmat4 rotateY(float a) {\n    return mat4(\n\t\tcos(a),0,sin(a),0,\n\t\t0,1,0,0,\n\t\t-sin(a),0,cos(a),0,\n\t\t0,0,0,1\n    );\n}\n\nmat4 rotateZ(float a) {\n    return mat4(\n\t\tcos(a),-sin(a),0,0,\n\t\tsin(a),cos(a),0,0,\n\t\t0,0,1,0,\n\t\t0,0,0,1\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragCoord -= 0.5;\n    if(fragCoord.x < 3.0 ) {\n    if(iFrame == 0) {\n        if(fragCoord.x == 0.0 ) {\n    \t\tfragColor.rgb = vec3(5,0,1);\n        } else {\n    \t\tfragColor.rg = vec2(5,-1.5);\n        }\n        return;\n    }\n        \n        vec3 old_pos = texture(iChannel0, vec2(0.5,0)/iChannelResolution[0].xy).xyz;\n        vec2 old_rot = texture(iChannel0, vec2(1.5,0)/iChannelResolution[0].xy).xy;\n        vec2 old_abs_rot = texture(iChannel0, vec2(2.5,0)/iChannelResolution[0].xy).xy;\n\n        \n        vec2 rot;\n        if(iMouse.w >= 0.0) {\n        \tvec2 mouse = tau * (iMouse.xy-iMouse.zw) / min(iResolution.x,iResolution.y);\n            rot = old_abs_rot + mouse * vec2(-1,1);\n            rot.y = clamp(rot.y, -0.5*tau, 0.0);\n        } else {\n            rot = old_rot;\n            old_abs_rot = old_rot;\n        }\n\n        \n\t    vec4 v = vec4(\n\t    \ttexture(iChannel1, vec2(68.0/255.0,0)).r - texture(iChannel1, vec2(65.0/255.0,0)).r,\n\t        0,\n            texture(iChannel1, vec2(87.0/255.0,0)).r - texture(iChannel1, vec2(83.0/255.0,0)).r,\n            0\n    \t) * 0.1;\n        \n        vec3 pos = old_pos + (rotateZ(rot.x)*rotateX(rot.y)*v).xyz;\n\n        \n        if(fragCoord.x == 0.0 ) {\n    \t\tfragColor.rgb = pos;\n        } else if(fragCoord.x == 1.0 ) {\n    \t\tfragColor.rg = rot;\n        } else if(fragCoord.x == 2.0 ) {\n    \t\tfragColor.rg = old_abs_rot;\n        }\n    }\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"mat4 rotateX(float a) {\n    return mat4(\n        1,0,0,0,\n\t\t0,cos(a),-sin(a),0,\n\t\t0,sin(a),cos(a),0,\n\t\t0,0,0,1);\n}\n\nmat4 rotateZ(float a) {\n    return mat4(\n\t\tcos(a),-sin(a),0,0,\n\t\tsin(a),cos(a),0,0,\n\t\t0,0,1,0,\n\t\t0,0,0,1\n    );\n}\n\nfloat elev(vec2 pos) {\n    if(mod(pos, 2.0) == vec2(0)) {\n        vec4 q = texture(iChannel1, pos/float(iChannelResolution[1]));\n        if(q.b > .5) {\n            return floor(pow(q.r, 4.0)*22.0);\n        }\n    }\n    return .0;\n    \n}\n\nvec2 windowI(vec2 pos) {\n    float p = 0.6;\n    pos += 0.2;\n    return floor(pos)*p + max(fract(pos)-1.0+p, 0.0);\n}\n\nvec3 wall(vec3 pos) {\n    float x = (8.0*(pos.x+pos.y));\n    float z = pos.z*4.0;\n    vec2 uv = vec2(x, z);\n    vec2 fw = fwidth(uv);\n    if(!(length(fw) > 0.) && !(length(fw) < 0.)) {\n    \treturn vec3(0);\n    }\n    vec2 f = (windowI(uv+fw) - windowI(uv))/fw;\n    vec4 q = texture(iChannel1, (vec2(floor(x),floor(z))+.5)/float(iChannelResolution[1]));\n    q.g = q.r;\n    if(q.r>.5) {\n        return q.rgb*q.g*min(f.x,f.y);\n    }\n    return vec3(0,0,0);\n}\n\nvec4 city2(vec3 pos, vec3 normal) {\n    vec3 s = sign(normal.xyz);\n\tvec3 sn = (s + 1.0 ) /2.0;\n    vec2 ipos = floor(pos.xy);\n    vec3 fpos = pos - vec3(ipos,0.0);\n\n    float e0 = 0.0;\n    vec3 pos0 = vec3(0.0, 0.0, 0.0);\n    \n    const int d = 64;\n    float e = 0.0;\n    for(int i=0;i<d;i++) {\n        vec3 a = ((s+1.)/2. - s*fpos)/normal*s;\n        if(a.x >= a.y) {\n            \tfpos += normal * a.y;\n            \tfpos.y = -(s.y - 1.)/2.;\n            \tipos.y += s.y;\n        } else {\n            \tfpos += normal * a.x;\n            \tfpos.x = -(s.x - 1.)/2.;\n            \tipos.x += s.x;\n        }\n        if(fpos.z <= e) {\n            return vec4(0,0,0,1);\n        }\n        e = elev(ipos);\n        if(fpos.z <= e) {\n            vec3 pos1 = vec3(ipos,0)+fpos;\n\t\t    return vec4(wall(pos1.xyz)  / pow(distance(pos1, pos), 1.0), 1);\n        }\n    }\n\treturn mix(vec4(0),vec4(0.1,0.2,0.3,0),clamp(-normal.z+0.01,0.,1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 pos = texture(iChannel0, vec2(0.5,0.5)/iChannelResolution[0].xy).xyz;\n    vec3 rot = texture(iChannel0, vec2(1.5,0)/iChannelResolution[0].xy).xyz;\n    \n  \tvec4 screen = vec4((fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x,iResolution.y), 2.0, 1.0);\n    vec4 eyeV = normalize(rotateZ(rot.x)*rotateX(rot.y)*screen);\n\n    vec4 old = texture(iChannel2, fragCoord/iResolution.xy);\n    if(old.a<0.0) {\n        old = vec4(0,0,0,0);\n    }\n    vec4 new = city2(pos, eyeV.xyz);\n    \n    fragColor = mix(old, new, 0.5);\n}","name":"Buf B","description":"","type":"buffer"}]}