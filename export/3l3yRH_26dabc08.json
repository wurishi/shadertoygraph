{"ver":"0.1","info":{"id":"3l3yRH","date":"1608429696","viewed":381,"name":"edge detection whatever","username":"mds2","description":"some crap I was trying out","likes":2,"published":3,"flags":2,"usePreview":0,"tags":["experiment","edge","etc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float EDGE_OR_CORNER_DETECT = 0.95; // 0 for corner, 1 for edge\n\nconst float WINDOW_WIDTH = 6.0; // max 6.0\n\nconst float SHOW_BACKGROUND = 0.75; // 0.0 for no background, 1.0 for all background\n\nconst vec2 webcam_resolution = 2.0 * vec2(320.0, 240.0);\n\nvec3 YUV(in vec2 fragCoord) {\n    const mat3 to_yuvish = mat3(0.299, -0.14713, 0.615,\n                          0.587, -0.28886, -0.51499,\n                          0.114, 0.436, -0.10001);\n    return to_yuvish * texture(iChannel0, fragCoord / iResolution.xy).rgb;\n}\n\nfloat Yval(in vec2 fragCoord) {\n    return YUV(fragCoord).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    mat2 M = mat2(0.0);\n    \n    vec2 scale = iResolution.xy / min(iResolution.xy, webcam_resolution.xy);\n    \n    vec2 off = vec2(-7.0);\n    for (int i = 0; i < 13; ++i) {\n        off.y = -7.0;\n        off.x += 1.0;\n        for (int j = 0; j < 13; ++j) {\n            off.y += 1.0;\n            \n            float weight = smoothstep(WINDOW_WIDTH, 0.0, length(off));\n    \n\t    \tfloat Ix = 0.5 * (Yval(fragCoord + scale * (off + vec2(1.0, 0.0))) - \n            \t              Yval(fragCoord + scale * (off - vec2(1.0, 0.0))));\n    \t\tfloat Iy = 0.5 * (Yval(fragCoord + scale * (off + vec2(0.0, 1.0))) - \n            \t              Yval(fragCoord + scale * (off - vec2(0.0, 1.0))));\n        \n         \tM += weight * mat2(Ix * Ix, Ix * Iy, Ix * Iy, Iy * Iy);\n        }\n    }\n\n//    mat2 M = mat2(Ix * Ix, Ix * Iy, Ix * Iy, Iy * Iy);\n    \n    float A = 1.0;\n    float B = -M[0][0] - M[1][1];\n    float C = M[0][0] * M[1][1] - M[0][1] * M[1][0];\n\n    float l1 = (-B + sqrt(B * B - 4.0 * A * C)) / (2.0 * A);\n    float l2 = (-B - sqrt(B * B - 4.0 * A * C)) / (2.0 * A);\n    \n    float min_eig = min(abs(l1), abs(l2));\n    float max_eig = max(abs(l1), abs(l2));\n//\tfloat min_eig = min(l1, l2);\n    \n    float eig_to_use = mix(min_eig, max_eig, EDGE_OR_CORNER_DETECT);\n\n    // Time varying pixel color\n    vec3 col = smoothstep(vec3(0.0), vec3(0.1, 0.2, 0.3), vec3(eig_to_use));\n    vec3 raw_color = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n    \n    vec3 cent = vec3(0.47968451, \n                     0.450743, \n                     0.45227517);\n                     \n    vec3 delta = raw_color - cent;\n    \n    vec3 grayed_delta = raw_color * dot(raw_color, delta) / dot(raw_color, raw_color);\n    \n    vec3 adj = grayed_delta - delta;\n    \n    delta *= (1.0 + 20.0 * step(0.05, length(col)));\n    delta += adj;\n    \n    vec3 maxes = (step(vec3(0.0), delta) - col)/delta;\n    \n    float amount = min(maxes.x, min(maxes.y, maxes.z));\n    \n    raw_color = cent + delta * min(1.0, amount);\n\n    // Output to screen\n    fragColor = vec4(raw_color,1.0);\n}","name":"Image","description":"","type":"image"}]}