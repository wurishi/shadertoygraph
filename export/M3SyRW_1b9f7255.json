{"ver":"0.1","info":{"id":"M3SyRW","date":"1727022794","viewed":20,"name":"trippykale","username":"zohar002","description":"bug I need to fix later","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["buggyneedtofix"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 rotationX(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat3(\n        1.0, 0.0, 0.0,\n        0.0, c, -s,\n        0.0, s, c\n    );\n}\n\nmat3 rotationY(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat3(\n        c, 0.0, s,\n        0.0, 1.0, 0.0,\n        -s, 0.0, c\n    );\n}\n\nmat3 rotationZ(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat3(\n        c, -s, 0.0,\n        s, c, 0.0,\n        0.0, 0.0, 1.0\n    );\n}\n\nvec3 rotatePoint(vec3 p, vec3 angles) {\n    mat3 rotX = rotationX(angles.x);\n    mat3 rotY = rotationY(angles.y);\n    mat3 rotZ = rotationZ(angles.z);\n    return rotZ * rotY * rotX * p;\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 d = abs(p) - b;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat map(vec3 p) {\n    vec3 q = mod(p, 2.0) - 1.0;\n    return sdBox(q, vec3(0.5));\n}\n\nvec3 rayMarch(vec3 ro, vec3 rd, vec3 angles) {\n    float totalDistance = 0.0;\n    vec3 p;\n    for (int i = 0; i < 100; i++) {\n        p = ro + totalDistance * rd;\n        p = rotatePoint(p, angles);\n        float d = map(p);\n        if (d < 0.001) break;\n        totalDistance += d;\n    }\n    return p;\n}\n\nvec3 kaleidoscope(vec3 color, vec2 uv) {\n    float angle = atan(uv.y, uv.x) + iTime;\n    float radius = length(uv);\n    float k = 6.0; // Number of segments\n    angle = mod(angle, 2.0 * 3.141592 / k) * k;\n    return vec3(0.5 + 0.5 * cos(angle), 0.5 + 0.5 * cos(angle + 2.0), 0.5 + 0.5 * cos(angle + 4.0));\n}\n\nvec3 blendColors(vec3 color1, vec3 color2, float factor) {\n    return mix(color1, color2, factor);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 ro = vec3(sin(iTime) * 5.0, cos(iTime) * 5.0, -5.0 + iTime); // Animated ray origin\n    vec3 rd = normalize(vec3(fragCoord.xy / iResolution.xy * 2.0 - 1.0, 1.0)); // Ray direction\n    vec3 angles = vec3(iTime * 0.1, iTime * 0.2, iTime * 0.3); // Rotation angles\n    vec3 p = rayMarch(ro, rd, angles);\n    vec3 mazeColor = vec3(0.5 + 0.5 * cos(6.2831 * length(p) + vec3(0.0, 0.33, 0.67) + iTime));\n    vec3 kaleidoscopeColor = kaleidoscope(mazeColor, fragCoord.xy / iResolution.xy * 2.0 - 1.0);\n    vec3 blendedColor = blendColors(mazeColor, kaleidoscopeColor, 0.5); // Adjust the blending factor as needed\n    fragColor = vec4(blendedColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}