{"ver":"0.1","info":{"id":"XtGcDz","date":"1536170974","viewed":73,"name":"HomeworkPractice1","username":"elijah_green14","description":"homework","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rotate(a)  mat2(cos(a), -sin(a), sin(a), cos(a))\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    \n    //Colors\n    vec3 fgColor = vec3(0.741, 0.635, 0.471);\n\tvec3 bgColor = vec3(0.192, 0.329, 0.439);\n    \n    //Triangle barycentric coordinates defined on screen space\n    vec2 t0 = vec2(0.25, 0.25);\n\tvec2 t1 = vec2(0.75, 0.25);\n\tvec2 t2 = vec2(0.50, 0.85);\n    vec2 tCentroid  = (t0 + t1 + t2)/3.0;    \n    //Compute UV coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 v0 = t2 - t0;\n    vec2 v1 = t1 - t0;\n    vec2 v2 = uv - t0;\n\t\n    //Compute barycentric coordinates \n    float dot00 = dot(v0, v0);\n    float dot01 = dot(v0, v1);\n    float dot02 = dot(v0, v2);\n    float dot11 = dot(v1, v1);\n    float dot12 = dot(v1, v2);\n    \n    float invDenom = 1.0/(dot00 * dot11 - dot01 * dot01);\n    float baryX = (dot11 * dot02 - dot01 * dot12) * invDenom;\n    float baryY = (dot00 * dot12 - dot01 * dot02) * invDenom;\n    \n    if((baryX >= 0.0) && (baryY >= 0.0) && (baryX + baryY <= 1.0)) {\n    \tfragColor = vec4(fgColor, 1.0);\n    } else {\n        fragColor = vec4(bgColor, 1.0);\n    }\n    \n    \n    \n    \n    vec3 col = vec3(0.0);\n    \n    vec2 p = (2.0 *fragCoord.xy - iResolution.xy)/iResolution.y;\n    p *= 1.5;\n    \n    // circle measurement set up\n     vec2 m = (2.0 *iMouse.xy - iResolution.xy)/iResolution.y;\n    m *= 1.5;\n    float distFromCircle = distance(p,m);\n    float radius = 0.5f;\n    \n    vec3 normal;\n    \n    \n    \n     col = vec3(0.0);\n    float checkerSize = 20.0;\n    vec3 checkCol = vec3(0.0);\n    //cicle drawing   \n     //handle X direction\n    if(int(fragCoord.x/checkerSize) % 2 == 0){\n        if(int(fragCoord.y/checkerSize) % 2 == 0)\n        \tcheckCol = vec3(1.0);\n        \n    }\n    else // fragCoord.X % 2 == 1\n    \tif(int(fragCoord.y/checkerSize) % 2 == 1)\n       \tcheckCol = vec3(1.0);\n        \n    if(distFromCircle < radius)\n        col = checkCol;\n    \n    \n    \n    \n    \n     // oval measurement set up\n    p = ((2.0 *fragCoord.xy - iResolution.xy)/iResolution.xy)*vec2(5, 10);\n    distFromCircle = distance(p,vec2(-0.8,0.6));\n    radius = 0.5f;\n    //oval drawing    \n    if(distFromCircle < radius)\n        col = vec3(1.0);\n   \n    \n    // square darawing\n    float size = 0.08;\n    float smoothness = 2.0 / iResolution.x;\n    uv = (fragCoord.xy -0.9 * iResolution.xy) / iResolution.x * rotate(iTime / .5); // green\n\tvec2 uv2 = ((fragCoord.xy -0.2 * iResolution.xy) * rotate(iTime / 3.0)/ iResolution.xy );// red\n    \n\n    \n    // Thanks to FabriceNeyret2 for this clever snippet!\n    uv = abs(uv);\n    uv2 = abs(uv2);\n    float d = max(uv.x, uv.y);\n    float d2 = max(uv2.x, uv2.y);\n    \n    //red square output\n    fragColor += vec4(smoothstep(size, size - smoothness, d2),0,0,0);\n    //green square output\n    fragColor += vec4(0,smoothstep(.02, .02 - smoothness, d),0,0);\n   \t//white circle output\n    fragColor += vec4(col,0.0);\n\n\n}\n\n//Credits To:\n//https://www.shadertoy.com/view/llsXzn\n//https://www.shadertoy.com/view/llGcWz\n//","name":"Image","description":"","type":"image"}]}