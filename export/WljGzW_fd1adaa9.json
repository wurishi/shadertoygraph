{"ver":"0.1","info":{"id":"WljGzW","date":"1558654842","viewed":232,"name":"Circle animation 2D","username":"Gallo","description":"Circle animation","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795\n\nfloat ci(vec2 _st, float _radius, float _start, float _end, float _div)\n{\n    vec2 dist = _st-vec2(0.5);\n    float lAngle = _start + atan(dist.y, dist.x);\n    float lDivision = M_PI / _div;\n    float lMod = mod(lAngle, lDivision);\n    float lCuts = (_div > -1.0) ? ( smoothstep(lDivision, lDivision - 0.02, lMod) * \n                          smoothstep(_end - 0.02, _end, lMod)) : 1.0;\n    \n\treturn 1.-smoothstep(- 0.001 + _radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(dist,dist)*4.0)*lCuts; //smoothstep(0.48, 0.5, lMod)\n}\n\nfloat mandala(vec2 uv, float time)\n{\n    return ( ci(uv, 0.85 + sin(iTime * 2.0) * 0.05, -1.42 - time, 0.6, 3.0f) - \n            ci(uv, 0.65 + sin(iTime * 2.0) * 0.05, -1.42 - time, 0.6, 3.0f)) +\n\n        ( ci(uv, 0.7 + 0.05 + cos(time * 2.0) * 0.05, 0.2 - time, 0.7, 3.0f) - \n         ci(uv, 0.55 + 0.05 + cos(time * 2.0) * 0.05, 0.2 - time, 0.7, 3.0f)) +\n        ( ci(uv, 0.5, 0.0 + time, 0.3, 3.0f) - \n         ci(uv, 0.3, 0.0 + time, 0.3, 3.0f)) -\n        ( ci(uv, 0.46, 0.0 + time, 0.3, 3.0f) - \n         ci(uv, 0.34, 0.0 + time, 0.3, 3.0f)) +\n\n        ( ci(uv, 0.44, 0.0 - time * 0.5, 0.05, 26.0f) - \n         ci(uv, 0.36, 0.0 - time * 0.5, 0.05, 26.0f)) +\n\n        ( ci(uv, 0.25, 0.0 - time * 2.5, 0.5, 3.0f) - \n         ci(uv, 0.15, 0.0 - time * 2.5, 0.5, 3.0f)) +\n        ( ci(uv, 0.12, 0.3 + time * 1.5, 0.2, 8.0f) - \n         ci(uv, 0.07, 0.3 + time * 1.5, 0.2, 8.0f)) +\n        ( ci(uv, 0.05, 0.3 - time * 1.1, 0.4, 3.0f) - \n         ci(uv, 0.025, 0.3 - time * 1.1, 0.4, 3.0f)) +\n        ( ci(uv, 0.015, 0.5 + time * 3.1, 1.8, 1.0f) - \n         ci(uv, 0.0075, 0.5 + time * 3.1, 1.8, 1.0f));\n}\n\n/*\nfloat por(in vec2 _st, in float _radius, in float _start, in float _end)\n{\n    vec2 dist = _st-vec2(0.5);\n \n\treturn 1.-smoothstep(- 0.001 + _radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(dist,dist)*4.0);\n}\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.yy - vec2(0.4, 0.0);\n    \n    // Time varying pixel color\n    float lCircles = mandala(uv, iTime);\n        ;\n    vec3 col = vec3(lCircles);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}