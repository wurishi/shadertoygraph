{"ver":"0.1","info":{"id":"Dd3cDr","date":"1697841628","viewed":48,"name":"Bifurcation Map","username":"DigitalShadow","description":"Playing with the logistic eqation","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["chaos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float x = uv.x;\n    float r = (x*2.0)+2.0;\n    \n    float val = 1.0;\n    float tot = 0.0;\n    float minV = 1.0;\n    float maxV = 0.0;\n\n    //pre-iterate to settle values\n    for(float i=0.; i<100.;i+=1.){\n        x=r*x*(1.-x);\n    }\n    \n    //collect points\n    for(float i=0.; i<1000.; i+=1.){\n        x=r*x*(1.-x);\n        val = smoothstep(0.001,0.0, distance(uv, vec2(uv.x, x)));\n        tot += val;\n        minV = min(val, minV);\n        maxV = max(val, maxV);\n    }\n        tot = tot / 1000.;\n  \n  \n    \n    vec3 col = vec3(maxV,maxV,maxV);\n\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}