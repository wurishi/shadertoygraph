{"ver":"0.1","info":{"id":"3syczG","date":"1603071448","viewed":379,"name":"angle between two vec2 atan","username":"oO0","description":"Click mouse to better view of most left and right angle.\n\nColor is angle between 2 vectors, that ended at UV.\n\nAnti-Bisec is black line.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["test","atan","angle","atan2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI    3.14159265358\n#define TWOPI 6.28318530718\n\n\nvec3 h_to_RGB(float angle) {\n  angle /= TWOPI; //0...1\n    \n  //if(angle<0.5) angle=0.; //show relative left\n  //if(angle>0.5) angle=0.; //show relative right\n\n  if(iMouse.z>0.) //hue 240 (from R to B)\n      return clamp((abs(fract(angle/360.*240.+vec3(3.0, 2.0, 1.0)/3.0)*6.0-3.0)-1.0), 0.0, 1.0);\n  else //hue 360 (full circle)\n      return clamp((abs(fract(angle+vec3(3.0, 2.0, 1.0)/3.0)*6.0-3.0)-1.0), 0.0, 1.0);\n}\nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nfloat line(vec2 p, vec2 p0, vec2 p1) // https://www.shadertoy.com/view/4d3fWr\n{\n    vec2 a = p-p0; // the vector that we want to project on b\n    vec2 b = p1-p0; // this line is our goal.\n    \n    vec2 proj = clamp((dot(a,b)/dot(b,b)),0.0,1.0)*b; // vector projection of a onto b\n    vec2 rejc = a-proj; // vector rejection or distance in other words\n    \n    return smoothstep(0.0,1.2,1.0-dot(rejc, rejc)*1e4);\n}\n\nvec2 uvmap(vec2 uv)\n{\n    return ( 2.*uv - iResolution.xy) /iResolution.y;\n}\n\nfloat getAngle(vec2 v1, vec2 v2)\n{\n    //return atan(v1.x,v1.y) -atan(v2.x,v2.y);\n    return mod( atan(v1.x,v1.y) -atan(v2.x,v2.y), TWOPI); //0 ... TWOPI\n    //return mod( atan(v1.x,v1.y) -atan(v2.x,v2.y), TWOPI) - PI; //-pi to +pi \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = uvmap(fragCoord.xy);\n    vec2 p0 = vec2(-0.0,-0.4);\n    vec2 p_mouse = uvmap(iMouse.xy); \n    if(iMouse.x<0.1) p_mouse= vec2(0.2,0.6); //initial pos before mouse press\n    vec2 p2 = vec2(0.5,0.3);\n    \n    vec2 v1 = p0-uv;\n    vec2 v2 = p2-uv;\n    float angle = getAngle(v1,v2);\n\n    vec3 line1 = vec3(line(uv, p0, p_mouse));\n    vec3 line2 = vec3(line(uv, p_mouse, p2));\n    \n    //---------bisec\n    vec2 v1mouse = p0-p_mouse;\n    vec2 v2mouse = p2-p_mouse;\n    float angle_mouse=getAngle(v1mouse,v2mouse);\n    if(angle_mouse<PI) angle_mouse-=TWOPI;\n    float angle_bisec=angle_mouse*0.5+atan(v2mouse.x,v2mouse.y);\n    vec2 p_antibisec=vec2(sin(angle_bisec)*0.2, cos(angle_bisec)*0.2 );\n    \n    float line_antibisec=1.-line(uv, p_mouse, p_mouse+p_antibisec);\n\n    //line_median = vec3(line(uv, p_mouse, (p0+p2)*0.5));\n    //----------\n\n    fragColor = vec4(\n  \n    h_to_RGB(angle) \n    //hsv2rgb_smooth(vec3(angle*0.1,1.,1.)) \n        \n    +line1\n    +line2\n        \n    ,1.0)*line_antibisec;\n}","name":"Image","description":"","type":"image"}]}