{"ver":"0.1","info":{"id":"3sd3zM","date":"1568100555","viewed":656,"name":"Math is awesome!","username":"pixelzealot","description":"I was inspired after binge watching 3Blue1Brown especially the episode on Fourier series (https://www.youtube.com/watch?v=r6sGWTCMz2k). A bit of Python hackery to generate the coefficients and I'm pretty happy with the final effect.","likes":36,"published":1,"flags":32,"usePreview":0,"tags":["fourier","scribble","3blue1brown"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdCircle( in vec2 p, in vec2 c, in float r )\n{\n    return abs(length( p - c ) - r); \n}\n\nfloat sdLine( vec2 p, vec2 a, vec2 b ) \n{\n\tvec2 dir = b - a;\n\treturn abs( dot( normalize( vec2( dir.y, -dir.x ) ), a - p ) );\n}\n\nfloat sdLineSegment( in vec2 p, in vec2 a, in vec2 b ) \n{\n\tvec2 ba = b - a;\n    vec2 ap = a - p;\n    vec2 bp = b - p;\n    float d = abs( dot( normalize( vec2( ba.y, -ba.x ) ), ap) );\n    float d0 = dot(-bp, ba);\n    float d1 = dot(-ap, ba);\n    return d1 < 0.0 ? length(ap) : d0 > 0.0 ? length(bp) : d;\n}\n\nfloat sdTriangle( vec2 p, float radius )\n{\n\treturn max( abs(p).x * 0.866025 + p.y * 0.5, -p.y) -radius * 0.5;\n}\n\nfloat sdArrow( vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 ba = b - a;\n    float len = length(ba);\n    vec2 tangent = vec2( ba.y, -ba.x ) / len;\n    \n    vec2 ap = a - p;\n    vec2 bp = b - p;\n    \n    float d = abs( dot( tangent, ap) );\n    float d0 = dot(-bp, ba);\n    float d1 = dot(-ap, ba);\n    float line_d = d1 < 0.0 ? length(ap) : d0 > 0.0 ? length(bp) : d;\n\n    mat2 t = mat2( tangent, ba / len );\n\n    vec2 arrow_pos = b - ba*0.1;\n    vec2 q = p - arrow_pos;\n    float arrow_size = len;\n    \n    float tri_d = sdTriangle( ( inverse(t) * q ) / arrow_size, 0.1 ) * arrow_size;\n    \n\treturn min( tri_d, line_d );\n}\n\nfloat outline(float d, float thickness) \n{\n    return smoothstep( 0.0, 1.0 / iResolution.y, abs( d ) - thickness );\n}\n\nfloat outline( float d ) \n{\n\treturn outline( d, 0.0025 );\n}\n\nfloat shape( vec2 p, float numSegments, int numCoefficents, int coefficentOffset )\n{\n    float d = 4096.0f;\n  \n    vec2 uv = vec2(\n        float( coefficentOffset + numCoefficents - 1 ) + 0.5,\n    \t1.0);\n    uv /= iChannelResolution[0].xy;\n    \n    vec4 p0p1 = texture( iChannel0, uv * vec2( 1.0, 0.5 ) );\n    d = min( d, sdLineSegment( p, p0p1.xy, p0p1.zw ) );\n        \n    for (int s = 1; s < int(numSegments); s++)\n    {\n        vec4 p2p3 = texture( iChannel0, uv * vec2( 1.0, float(s) + 0.5 ) );\n        \n        d = min(d, sdLineSegment(p, p0p1.zw, p2p3.xy));\n        d = min(d, sdLineSegment(p, p2p3.xy, p2p3.zw));\n        \n        p0p1 = p2p3;\n    }\n\n    vec4 p2p3 = texture( iChannel0, uv * vec2( 1.0, numSegments + 0.5 ) );\n    d = min( d, sdLineSegment(p, p0p1.zw, p2p3.xy ) );\n        \n    return d;\n}\n\n#define CIRCLE\t0\n#define ARROW\t1\n\nstruct Hit\n{\n   \n    float d[2];\n    float param[2];\n};\n\nvoid Init( inout Hit hit )\n{\n    hit.d[0] = hit.d[1] = 4096.0;\n    hit.param[0] = hit.param[1] = 0.0;\n}\n    \nvoid process( inout Hit hit, int object, in float d, in float param)\n{\n    if (d < hit.d[object] )\n    {\n        hit.d[object] = d;\n        hit.param[object] = param;\n    }\n}\n    \nHit construction( vec2 p, float numSegments, int numCoefficents, int coefficentOffset )\n{\n    Hit hit;\n    Init(hit);\n\n    vec2 uv = vec2( 1.0, numSegments + 0.5 ) / iChannelResolution[0].xy;\n    \n    float shapeOffset = float(coefficentOffset) + 0.5;\n    \n    vec2 p0 = texture( iChannel0, uv * vec2( shapeOffset + 0.0, 1.0 ) ).xy;\n    vec2 p1 = texture( iChannel0, uv * vec2( shapeOffset + 1.0, 1.0 ) ).xy;\n\n\tfloat radius = length( p1 - p0 );\n    \n    process( hit, CIRCLE, sdCircle( p, p0, radius ), radius);\n    process( hit, ARROW, sdArrow( p, p0, p1 ), radius );\n    \n    p0 = p1;\n    \n    for (int i = 1; i < numCoefficents - 1; i++)\n    {\n        float offset = shapeOffset + float(i);\n        \n        vec2 p1 = texture( iChannel0, uv * vec2( offset + 1.0, 1.0 ) ).xy;\n        \n        float radius = length( p1 - p0 );\n        \n        process( hit, CIRCLE, sdCircle( p, p0, radius ), radius );\n        process( hit, ARROW, sdArrow( p, p0, p1 ), radius );\n\n        p0 = p1;\n    }\n    \n    return hit;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = ( 2.0 * fragCoord - iResolution.xy ) / iResolution.y; \n    vec2 mult = vec2( 1.0 / iResolution.y );\n\n    vec3 col = vec3(1.0, 1.0, 0.90);\n\n   \tvec2 rand = texture(iChannel1, fragCoord.xy / iChannelResolution[1].xy).xy;\n    \n    // Draw page background\n    vec2 grid = 2.0 * ( fract(p * 4.0) - 0.5 );\n   \tfloat grid_alpha = 1.0 - outline(grid.y, 0.024);\n    grid_alpha = clamp( grid_alpha * (rand.y), 0.0, 1.0);\n    col = mix(col, vec3(0,0,0), grid_alpha);\n\n    const float timeTaken = 10.0;\n    \n    // Calcualte fades\n \tfloat t = mod( iTime, timeTaken ) / timeTaken;\n   \n    // Which symbol to draw\n    float symbol = mod( floor( iTime / timeTaken ), 2.0 );\n    int coefficentOffset = int( symbol * 128.0 + 0.5);\n    \n    // Look-up for which symbol to render\n    float coeff_fade = 1.0 - clamp( ( t - ( 0.8 - 0.1 ) ) / 0.2, 0.0, 1.0 );\n    int numCoefficents =  int( max( 1.0, coeff_fade * 128.0) + 0.5 );\n\n    // How much of the symbol to draw\n    float seg_fade = clamp( ( t - ( 0.4 - 0.30) ) / 0.6, 0.0, 1.0 );\n    float numSegments = seg_fade * 128.0;    \n    \n    // Draw shape\n\tfloat shape_d = shape(p, numSegments, numCoefficents, coefficentOffset );\n    shape_d += dot((2.0*rand.xy-1.0), vec2( 0.0025));\n    float shape_alpha = 1.0 - outline( shape_d, 0.005 );\n    col = mix(col, vec3( 0.0, 0.0, 0.35 ), shape_alpha);\n    \n    Hit construct = construction( p, numSegments, numCoefficents, coefficentOffset );\n\n    float circle_alpha = 1.0 - outline( construct.d[CIRCLE], 0.0024 );\n    col = mix(col, vec3( 0.0, 0.0, 0.0 ), circle_alpha * 0.25 );\n\n    float construct_alpha = 1.0 - outline( construct.d[ARROW],0.0024 );\n    col = mix(col, vec3( 0.0, 0.0, 0.0 ), construct_alpha );\n        \n    // Output to screen\n    fragColor = vec4( col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float PI\t \t= 3.141592;\n\n// PI\nconst vec2 pi_coeffs[128] = vec2[128](\n    vec2(0.00018707283584912487,-1.1357436947338202),\n    vec2(0.00010680174716458825,-1.345054513475706),\n    vec2(0.00014188591282960912,2.43754357720212),\n    vec2(0.00013398657050100644,-2.5936460334301077),\n    vec2(0.00010150512449142488,1.6963208271612817),\n    vec2(0.00012420077551999873,-2.7747275542930914),\n    vec2(0.00012635905253027545,2.0182612493598797),\n    vec2(0.0002916198657458485,1.3905233744071201),\n    vec2(3.541800230423714e-05,1.0454793833127847),\n    vec2(0.00014996433809037367,-0.8529202533507975),\n    vec2(0.0001222720998529782,0.7766783663059651),\n    vec2(0.0001351712373282941,-0.007703058294829087),\n    vec2(0.0001408804855826571,-0.1624318364472867),\n    vec2(9.364972243899709e-05,-2.228590337633601),\n    vec2(0.00025266881994883935,-2.6691106067700145),\n    vec2(0.00020997561316142378,0.4320686742933535),\n    vec2(0.00015772695210993575,-1.926834832338912),\n    vec2(2.8196858839955465e-05,-1.5111494998987587),\n    vec2(8.875165950607266e-05,-0.5948419558573231),\n    vec2(0.00013349723245624043,2.324868979707078),\n    vec2(0.00014841984737435678,-0.6156349637278602),\n    vec2(0.0004153572356754234,-3.0531717550453354),\n    vec2(0.00020789745802926685,-2.985961778938552),\n    vec2(0.0002462510540953758,-1.5421416388998455),\n    vec2(0.0003780184134178725,1.3701000174722093),\n    vec2(0.00026742538806250694,1.4712609434595654),\n    vec2(0.00046458882869607345,1.5633253565750556),\n    vec2(0.0002790260791668794,2.6628987138973743),\n    vec2(0.0004622329520167795,-1.4337305459700065),\n    vec2(0.0006376475924854711,-0.018039204045686305),\n    vec2(0.00026700053497359004,0.07465094118573656),\n    vec2(0.0002089884121258304,-1.2425013883085565),\n    vec2(0.00062595755403836,2.402490642352192),\n    vec2(0.00023906787715628172,-2.451963689780786),\n    vec2(0.0005217881940734663,-1.7357520649021525),\n    vec2(0.0002735956341129398,0.26583095433533543),\n    vec2(0.0003731953717394713,2.799243105816674),\n    vec2(0.000622623978142512,0.6852988399779433),\n    vec2(0.0007465150217382321,-0.5832943119608184),\n    vec2(0.0012719704338389085,2.918153750030838),\n    vec2(0.0002754450775947802,-2.179725999394421),\n    vec2(0.00013178851277757166,2.826426457707784),\n    vec2(0.0003403057789157407,-0.632228771992248),\n    vec2(0.000767156953983172,-1.8199881530588042),\n    vec2(0.002438620500081578,1.3648198320572977),\n    vec2(0.0007386227459501825,1.6251912707569902),\n    vec2(0.0018089549140180327,-1.744266589636513),\n    vec2(0.0012007762391837533,-1.0124537235536957),\n    vec2(0.0006179356612478981,2.774736455661823),\n    vec2(0.0010169205435841852,-1.010628003283479),\n    vec2(0.000750273774085883,2.5476944838265134),\n    vec2(0.0045139703685108485,3.094922961447511),\n    vec2(0.0018937468663522605,2.910755682948216),\n    vec2(0.00615468266556322,0.7060559617478721),\n    vec2(0.006736554208935535,2.239391173643315),\n    vec2(0.003274759944343982,0.03302615672642088),\n    vec2(0.004026310621713751,-0.3367281539478807),\n    vec2(0.0036506511161518225,0.2599569578036893),\n    vec2(0.020622130709690743,-0.6981193828155506),\n    vec2(0.013581523913654399,1.793701280946182),\n    vec2(0.02125314540885298,-2.176310493584181),\n    vec2(0.09595425193242328,-2.6808149893000106),\n    vec2(0.0612671619449226,0.6864472844948725),\n    vec2(0.04684823233560857,-2.322418142147424),\n    vec2(0.04733486843665296,1.098854205339501),\n    vec2(0.2107624996087865,1.9262722554653242),\n    vec2(0.13357847828015668,2.442347557962518),\n    vec2(0.03463938251074042,-0.13048398912384965),\n    vec2(0.03630838901488338,-2.9270239820543686),\n    vec2(0.0194834327691809,-2.6642357226964264),\n    vec2(0.019921342868861817,1.4304070983119856),\n    vec2(0.0038914614584169564,0.28049253048759876),\n    vec2(0.010106302874244619,1.0170565562341782),\n    vec2(0.012880427543593715,2.1392084034188197),\n    vec2(0.0011965245047558632,-3.043585304411018),\n    vec2(0.009209288480474505,0.0197825302489321),\n    vec2(0.004899185377685474,-1.3751332968058156),\n    vec2(0.0036100812820335114,0.33469614373315704),\n    vec2(0.00273050429252753,0.9245553729734801),\n    vec2(0.002229372474937074,-3.1283592628681163),\n    vec2(0.0036659054166951425,-1.4987700205518928),\n    vec2(0.001058995024318588,-2.628458234249001),\n    vec2(0.0007452218777083042,0.765150527449686),\n    vec2(0.0014068262261646115,-0.9388958272910943),\n    vec2(0.0012367357541207004,1.8977005061779115),\n    vec2(0.001650542786505526,-2.5716411600165863),\n    vec2(0.00011759761315487548,2.9413760577430423),\n    vec2(0.0009077382061800503,2.41102735068496),\n    vec2(0.0008369748015234975,-2.6791648251416804),\n    vec2(0.0006291545936321156,1.0256854607183883),\n    vec2(0.0009375292936847947,1.8074388078922838),\n    vec2(0.0005239201293980126,1.0545099172460108),\n    vec2(0.0011035008567861163,1.1485400355532984),\n    vec2(0.0002752709346130999,-0.4140554984673353),\n    vec2(0.0006585809124940822,-1.1875447766098115),\n    vec2(0.0007330449832661743,0.24035556637783834),\n    vec2(0.00022643954455613195,-1.2559531654501848),\n    vec2(0.00034055649668588865,-0.5608412576927799),\n    vec2(0.0005043347547835759,-2.1550105428074895),\n    vec2(0.000525010028933579,3.0708710161974992),\n    vec2(0.0005148912416613993,-0.08854543685894252),\n    vec2(0.00017952451431334248,2.6117300927899634),\n    vec2(0.00031199627182531897,-2.665316789601382),\n    vec2(0.00018356526764108208,-2.343821161028347),\n    vec2(0.00026999620909990855,1.2013214901274794),\n    vec2(0.0003866442840018623,-1.1767762424969856),\n    vec2(0.00029128295493756253,2.220717101352498),\n    vec2(0.0005246491045499535,2.566204148663908),\n    vec2(2.623275106190373e-05,-1.7178940096346569),\n    vec2(0.00014755583634882045,0.2287427434636379),\n    vec2(1.578611061258392e-05,0.7431200671829403),\n    vec2(0.00030872095651449376,0.8451266448904607),\n    vec2(0.0002672482708548401,1.198519828584014),\n    vec2(0.0002091017487785592,-1.0599389019470842),\n    vec2(0.00016110679103259224,-2.1342423685337675),\n    vec2(6.127981777408583e-05,-0.44780367208146254),\n    vec2(0.00015195809773880367,-1.8490950463953548),\n    vec2(7.85013081189277e-05,0.37625102874295424),\n    vec2(1.880931321669974e-05,-2.81939515283959),\n    vec2(0.0001867060090943531,2.1741687265801755),\n    vec2(7.815070573505964e-05,0.7392465441600719),\n    vec2(0.00016703306840516608,-3.011653418887323),\n    vec2(0.00018111840055512184,-0.6433022019566113),\n    vec2(0.0001442976752382166,-0.8715012767072751),\n    vec2(9.991361130202563e-05,1.255028060766353),\n    vec2(7.500835241043598e-05,2.1742813993575645),\n    vec2(0.00013403134831023813,2.7889260622861545),\n    vec2(0.00012741458136893662,-2.0727338376719655));\n\n// Sum\nconst vec2 sum_coeffs[128] = vec2[128](\n    vec2(0.0001038275159828017,-0.004249664039733133),\n    vec2(0.00013359194696516087,1.754639440186638),\n    vec2(2.6456344513006992e-05,1.8635310475818228),\n    vec2(0.00011198345148894692,3.1041754391219487),\n    vec2(4.254344286135238e-05,-0.08947666515004934),\n    vec2(0.00023618648791917844,-2.6166232497271444),\n    vec2(6.045821813016374e-05,0.7722799885174619),\n    vec2(0.0001488177224373788,0.7825599319223602),\n    vec2(7.736259364177252e-05,2.572171518792324),\n    vec2(0.00012853462272626424,1.6017257819588997),\n    vec2(0.00016191273673570963,-1.6043345720605573),\n    vec2(0.0002164401722244352,2.0311519626491203),\n    vec2(0.00011276393763645611,-0.7001217109337141),\n    vec2(0.00016347348867202865,-2.617612414075956),\n    vec2(3.566437156010644e-05,1.5263346201776458),\n    vec2(0.0001769887617959019,2.5925998487744946),\n    vec2(6.0002261643709254e-05,-2.8212202555949615),\n    vec2(0.0002643101753436094,0.34794849755111673),\n    vec2(0.00016112515268281705,2.189971680538805),\n    vec2(0.00010474625379207536,1.9002552423527048),\n    vec2(0.00028195750790963584,-2.943408901826229),\n    vec2(0.00016808074006769487,0.16513655262139773),\n    vec2(0.00028931819149963407,-2.0611383305083777),\n    vec2(9.306948726007045e-05,2.5065993758434506),\n    vec2(9.250039145684038e-05,0.8177318807558337),\n    vec2(0.00034539163701478485,1.6919534932754445),\n    vec2(0.0003699409621377221,2.2579804986938985),\n    vec2(0.00033329105604270795,-1.0664445848720288),\n    vec2(0.0003867188026243063,2.6997208011564666),\n    vec2(7.430757806848172e-05,0.22227765000297992),\n    vec2(0.00021294614864133006,-1.6194744344794034),\n    vec2(0.00011477922298254003,-0.603000081443398),\n    vec2(0.000286289563637812,1.7563024262323537),\n    vec2(0.000551337642124639,3.019651279576049),\n    vec2(0.0004547040780283192,1.904308292522558),\n    vec2(0.00027262894037489386,-0.1368461769156725),\n    vec2(0.0004698057125458084,2.117747577692614),\n    vec2(0.0006756638530403547,-2.245497800334183),\n    vec2(0.0004919407800600264,0.8913169383396227),\n    vec2(0.0002692406231205379,-1.8155681768279333),\n    vec2(0.00013240787610440286,2.011595679391104),\n    vec2(0.00018740478977935756,-2.2688719178166674),\n    vec2(0.0009411511837263171,2.3843389383834714),\n    vec2(0.0014054447436749322,2.235061045720587),\n    vec2(0.0003449424391609727,-1.007332216180791),\n    vec2(0.0005483830953128728,-2.1840855007022784),\n    vec2(0.0006725080810825861,0.9642893694310245),\n    vec2(0.001248619564598418,-3.13775402659635),\n    vec2(0.0018115184974697865,-0.5689876436617117),\n    vec2(0.002080540305388933,1.5988898505843885),\n    vec2(0.0009761447470580262,-2.8776683546449187),\n    vec2(0.005768025333298073,2.8948172916189043),\n    vec2(0.0011042831230962753,1.1332132790124017),\n    vec2(0.0018504641269310625,-1.6896672703847606),\n    vec2(0.0015349026303718794,0.6399494508794704),\n    vec2(0.003094674060344665,0.21315393254483092),\n    vec2(0.005710522530854938,2.38968556036506),\n    vec2(0.010440689118687306,1.9328429678926173),\n    vec2(0.021361948481649528,-1.9042365302985698),\n    vec2(0.00796625122279321,0.9934966046544207),\n    vec2(0.03483964577513107,2.8143400754913706),\n    vec2(0.05347808393465294,2.0991963618607477),\n    vec2(0.04749981778467875,-1.6272668007103757),\n    vec2(0.13033824486893403,0.6809528111437618),\n    vec2(0.0051088943546976455,0.27356762987644295),\n    vec2(0.19194841229284004,2.4585389815299403),\n    vec2(0.0761449760690425,1.7490128138844072),\n    vec2(0.017249445827171368,0.7038731662596072),\n    vec2(0.06521886652247698,-2.8974960384921067),\n    vec2(0.004337374043783441,-2.2453256032758113),\n    vec2(0.004047210642101342,1.9549454004534512),\n    vec2(0.00299914864814112,1.5973153110112044),\n    vec2(0.007829215990029477,0.5471454803490002),\n    vec2(0.0031296185396981926,-3.0929129214538738),\n    vec2(0.009272819730437715,2.295216286926976),\n    vec2(0.0035922934055491336,-1.7962928680054662),\n    vec2(0.0029086624416873818,-2.2252700591748704),\n    vec2(0.0025171008032293094,-0.386486195201675),\n    vec2(0.0035686731226833024,2.480031129867108),\n    vec2(0.0017150369135448807,2.4621855489343125),\n    vec2(0.0007618990141878271,1.035044234603961),\n    vec2(0.000767748350238136,2.7872761079135295),\n    vec2(0.000883452056979585,-1.3166861876266545),\n    vec2(0.0012595692898032297,2.465157769460316),\n    vec2(0.0011965755589064425,1.086838409401669),\n    vec2(0.0017513120775892814,-2.562410978874305),\n    vec2(0.00044583930687189867,-2.69956845376444),\n    vec2(0.0008800168822460326,-1.5366988731398241),\n    vec2(0.0012064712159870847,1.7353319373078555),\n    vec2(0.0008997535988549916,1.547742376244221),\n    vec2(0.0003754242874228304,-1.683947055575713),\n    vec2(0.0010676544330301195,2.578266108616149),\n    vec2(0.0005452107918900283,-2.0976181935962845),\n    vec2(0.0003731652692762194,-1.9630847515304866),\n    vec2(0.0005904199498746932,0.08755640738393049),\n    vec2(0.0001971167344343789,2.671376337978404),\n    vec2(0.0006472292239630613,2.716869756550077),\n    vec2(0.0004316047669828418,2.5841469542438515),\n    vec2(4.707917976252079e-05,2.4112306823283554),\n    vec2(5.577387876711195e-05,1.1747425883523428),\n    vec2(0.000391289354787406,-2.174683942215709),\n    vec2(0.0003928669897737336,1.2245770908401679),\n    vec2(0.0002815538635460597,-2.937123323588319),\n    vec2(0.00011770780102065225,-3.118728950452313),\n    vec2(0.0003263257314159663,-1.138938707615603),\n    vec2(0.000309896163103438,2.668510381392633),\n    vec2(0.0003961050652115725,1.9564050436803118),\n    vec2(7.790045776035644e-05,-3.1332224947651386),\n    vec2(0.0001893318351382992,-3.028250941527699),\n    vec2(9.597511746971381e-05,-0.9271613340667273),\n    vec2(0.0002464599626557374,-2.5955787124374075),\n    vec2(0.0002099447989338157,0.2363058211324617),\n    vec2(0.00018313920174892716,1.329247221797052),\n    vec2(0.0002200759709478041,-2.917566477112965),\n    vec2(0.00026838656093829583,3.110714092154541),\n    vec2(6.557000001613699e-05,2.849677088582265),\n    vec2(7.579533664509791e-05,2.5856425196722013),\n    vec2(7.758896751637042e-05,-0.7174321228359771),\n    vec2(8.503968253497714e-06,-1.5817800733333451),\n    vec2(5.555223990487941e-05,2.442569069904248),\n    vec2(0.00016784293164250085,2.2442375651249105),\n    vec2(0.00011578577945791608,-1.6127313881786132),\n    vec2(3.224470973526594e-05,-1.8813470996750454),\n    vec2(0.0002003630056895971,2.84673428664098),\n    vec2(6.455846074631176e-05,3.08752763488432),\n    vec2(4.298379783484917e-05,-3.105278940268092),\n    vec2(8.53254193764615e-05,0.7051462300767828),\n    vec2(9.401618058014348e-05,-2.0704296256704318));    \n\nvec2 resolve( in float t, in int numCoefficents, in vec2 coeffs[128] )\n{\n    vec2 c = vec2(0.0);\n    for (int s = 0; s <= numCoefficents; s++)\n    {\n\t\tfloat radius = coeffs[s].x * 2.0;\n        float angle = coeffs[s].y + ( 2.0f * PI * float(s - 64) * t );\n        vec2 vec = radius * vec2( cos(angle), sin(angle) );\n        c += vec;\n    }\n\treturn c;    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0)\n    {\n        if (fragCoord.x < 256.0 && fragCoord.y < 129.0)\n        {\n            float y = floor( fragCoord.y );\n            float t0 = (y + 0.0) / 128.0;\n            float t1 = (y + 0.5) / 128.0;\n            \n            int c = int( fragCoord.x ) % 128;\n            \n            if ( int(fragCoord.x) <= 127 )\n            {\n            \tfragColor = vec4( resolve( t0, c, pi_coeffs ), resolve( t1, c, pi_coeffs ) );\n            }\n            else\n            {\n\t\t\t\tfragColor = vec4( resolve( t0, c, sum_coeffs ), resolve( t1, c, sum_coeffs ) );\n            }\n        }\n    }\n    else\n    {\n        fragColor = texture(iChannel0, fragCoord/iChannelResolution[0].xy);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}