{"ver":"0.1","info":{"id":"NsycRy","date":"1655448288","viewed":171,"name":"Streamlined Hexagon Pixelizor","username":"gehtsiegarnixan","description":"streamlined Hexagonal Grid math to be as fast as possible. All commented useful for other stuff. Probably only for myself when I forget how to do it in half a year. ","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["pixel","hexagon","pattern","tiling","hex","offset","pixelizor"],"hasliked":0,"parentid":"3sSGWt","parentname":"[TUT] Hexagonal Tiling"},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define sqrt3 \t\t\t1.7320508076 //sqrt(3)\n#define half_sqrt3\t\t0.8660254038 //sqrt(3)/2\n\n// if you want flat tops (hex rotated by 30deg) swap xy in hr and the p.x to p.y in hexDist\nconst vec2 r = vec2(1, sqrt3); // 1, sqrt(3)\nconst vec2 h = vec2(0.5,half_sqrt3); // 1/2, sqrt(3) /2\n\n// Hexagonal Distanstance from the 0,0 coords\nfloat hexDist(vec2 p) {\n\tp = abs(p);   \n    return max(dot(p, h), p.x);\n}\n\n// From BigWIngs \"Hexagonal Tiling\" https://www.shadertoy.com/view/3sSGWt\nvec3 hexTile(vec2 uv) {\n    vec2 a = mod(uv, r)-h;\n    vec2 b = mod(uv-h, r)-h;\n    \n    vec2 gv = dot(a, a) < dot(b,b) ? a : b; //center hex UV coords\n    \n    // float edist = .5-hexDist(gv);  // Edge distance.\n    float edist = (.5-hexDist(gv))*2.; //  Edge distance with range 0-1\n    // float cdist = dot(gv, gv); // squared distance from the center.\n    // float cdist = dot(gv, gv)*3.; // squared distance with range 0-1\n    vec2 id = uv-gv; // simple ID calculation\n    \n    return vec3(id, edist); // xy hex coords + z distance to edge\n}\n\n// returns a pixelised hexagonal grid\nvec2 hexPixelizor(vec2 uv, float gridRes, vec2 offset){\n    vec2 scaledUV = uv * gridRes;\n    vec3 hex = hexTile(scaledUV + offset);\n    \n    return (hex.xy - offset)/gridRes; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float gridRes = 64.0; //Hex Grid Resolution\n    vec2 offset = vec2(sin(iTime) ,cos(iTime)); //circular motion\n    \n    vec2 uv = fragCoord.xy / iResolution.y; //square UV map   \n    \n    vec2 hexUV = hexPixelizor(uv, gridRes, offset);\n    \n    vec4 col = texture(iChannel0, hexUV.xy);\n    fragColor = vec4(col);\n}","name":"Image","description":"","type":"image"}]}