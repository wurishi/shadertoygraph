{"ver":"0.1","info":{"id":"stjfWt","date":"1652915328","viewed":80,"name":"First 3D ray march ","username":"QuantumShader","description":"first 3d ray march","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\n// sdf of the scene. Returns distance to nearest object (0 on the surfaces)\nfloat GetDist(vec3 p)\n{\n    // define sphere coords + radius (4th component is radius)\n    vec4 s = vec4(0, 1, 6, 1);\n    \n    // get distance from p to sphere center and then \n    // subtract radius (s.w) to get distance to surface\n    float sphereDist = length(p-s.xyz) - s.w;\n    \n    // get distance to ground plane (at y=0)\n    float planeDist =  p.y;\n    \n    // decide if sphere or ground is closer\n    float d = min(sphereDist, planeDist);\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    // distance to object. === distance RayMarched\n    float dO = 0.;\n    \n    // take steps\n    for (int i=0; i<MAX_STEPS; i++)\n    {\n        // start from origin and move in ray direction\n        vec3 p = ro + rd * dO;\n        \n        // get distance to scene\n        float dS = GetDist(p);\n        dO += dS;\n        \n        // check for hit\n        if (dO>MAX_DIST || dS<SURF_DIST) break;\n        \n    }\n    \n    return dO;\n}\n\n// returns normal vector at point p using finite difference\nvec3 GetNormal(vec3 p)\n{\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    // get normal by checking how distance to object changes for tiny steps e\n    // used swizzles for conciseness\n    // note d here acts as vec3(d)\n    vec3 n = d - vec3(GetDist(p-e.xyy),\n                      GetDist(p-e.yxy),\n                      GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p)\n{\n    // set the position of the light source\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 3.;\n    \n    // get the vector pointing from the current position p to the light source\n    vec3 l = normalize(lightPos - p);\n    \n    // get surface normal vector at current position\n    vec3 n = GetNormal(p);\n    \n    // calculate how bright surface is based on angle to light\n    // clamp to 0, 1 so that dif is never negative\n    float dif = clamp(dot(n, l), 0., 1.);\n    \n    // Check for shadows\n    // Idea: Ray march from p towards the light and check if the distance \n    //       until we hit something is less than the distance to the light\n    \n    // need to shift current point out of the surface a bit (in normal direction)\n    vec3 p_adjust = p + n*SURF_DIST*2.;\n    \n    // now ray march and check if marched distance until hit is less than dist to light\n    float d = RayMarch(p_adjust, l);\n    if(d<length(lightPos-p)) dif*=.1;\n    \n    return dif;  \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    // ray origin (camera position)\n    vec3 ro = vec3(0, 1, 0);\n    // ray direction\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = RayMarch(ro, rd);\n    \n    // get 3d coord of where our ray hit the scene\n    vec3 p = ro + rd * d;\n    \n    // diffuse lighting. GetLight at point p\n    float dif = GetLight(p);\n    \n    col = vec3(dif);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}