{"ver":"0.1","info":{"id":"MlBBDw","date":"1515971411","viewed":116,"name":"sphere - raymarching","username":"Loustik","description":"first exercice to aprehend raymarching","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nbool F_sphere(vec3 pt_tmp, vec3 pos, float radius)\n{\n    if ( distance(pos, pt_tmp) <= radius)\n    {\n        return true;\n\t}\n    return false;\n\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // screen //\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    uv.x -= 0.5;\n    uv.x *= ratio;\n    uv.y -= 0.5;\n    \n    // 3D objects //\n    vec3 pixel = vec3 (uv, 0.0);\n    vec3 camera = vec3 (0.0,0.0,-1.0);\n    vec3 direction = normalize(pixel-camera);\n    vec3 obj_sphere = vec3((iMouse.x/iResolution.x-0.5)*ratio,iMouse.y/iResolution.y-0.5,1.0);\n    float radius = 1.0;\n    \n    // raymarching param\n    float stp = 0.01;\n    int maxStp = 100;\n    vec3 color = vec3 (0.0);\n    float strenght = 2.0;\n    \n\tfor (int i; i < maxStp ; i ++ )\n    {\n        vec3 pos_tmp = vec3(pixel+direction*stp*float(i));\n        bool v = F_sphere (pos_tmp, obj_sphere, radius/2.0);\n        if ( v == true)\n        {\n            color = vec3 ((1.0-stp*float(i))*strenght);\n            break;\n        }  \n\t}\n    \n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}