{"ver":"0.1","info":{"id":"4cyyR3","date":"1732139300","viewed":26,"name":"panicking","username":"hazelwu","description":"me panicking because I cannot figure out how to do this properly\nand rushing headlong into this wormhole (??!) to finish in time","likes":0,"published":1,"flags":8,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PHI = 1.61803398874989484820459; // the golden ratio\n\nfloat noise(in vec2 xy) {\n    return fract(tan(distance(xy * PHI, xy) * iTime));\n}\n\nfloat noise(in vec2 xy, in float seed) {\n    return fract(tan(distance(xy * PHI, xy) * seed));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // vec2 r = fragCoord.xy;\n    vec2 r = 2.0 * vec2(fragCoord.xy - 0.5 * iResolution.xy);\n    \n    float seed = 10.0 + iTime;\n    \n    float s = 1.5; // the side length of the square\n    vec2 square = vec2(r.x + s - mod(r.x, 2. * s), r.y + s - mod(r.y, 2. * s));\n    \n    float colorRange = 255.0 * 255.0 * 255.0 * noise(square, seed);\n    \n    float R = (colorRange / 255.0 / 255.0) / 255.0;\n    float G = mod((colorRange / 255.0), 255.0) / 255.0;\n    float B = mod(colorRange, 255.0) / 255.0;\n    \n    vec3 color = vec3(R, G, B);\n    vec3 white = vec3(1.0);\n    vec3 nightSky = vec3(0.0, 75.0, 120.0) / 255.0;\n    \n    if (colorRange < 0.9 * 255.0 * 255.0 * 255.0) {\n        color = nightSky;\n    }\n    if (colorRange > 0.99 * 255.0 * 255.0 * 255.0) {\n        color = white;\n    }\n\n    // color = vec3(noise(square, seed)); // black and white\n\n    fragColor = vec4(color,0.5);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time ) {\n\n    // aggravating siren\n    \n    float x = fract(time);\n    float y = 1.0 - x;\n    \n    vec2 sound = vec2(0.);\n    \n    if (x <= 0.75) {\n        sound.x = clamp(sin(6000. * time), -1.0, 1.0);\n    }\n\n    \n    if (y <= 0.75) {\n        sound.y = clamp(sin(10000. * time), -1.0, 1.0);\n    }\n\n    return sound;\n\n}","name":"Sound","description":"","type":"sound"}]}