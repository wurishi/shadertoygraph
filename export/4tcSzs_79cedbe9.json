{"ver":"0.1","info":{"id":"4tcSzs","date":"1481065415","viewed":139,"name":"multi triangle collision test","username":"zproxy","description":"from https://www.shadertoy.com/view/4tXXzn","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["collision","testing","bounds"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPS  .01\n#define COL0 vec3(.2, .35, .55)\n#define COL1 vec3(.9, .43, .34)\n#define COL2 vec3(.1, .6, .3)\n#define COL3 vec3(.1)\n\nfloat df_circ(in vec2 p, in vec2 c, in float r)\n{\n    return abs(r - length(p - c));\n}\n\nfloat df_line(in vec2 p, in vec2 a, in vec2 b)\n{\n    vec2 pa = p - a, ba = b - a;\n\tfloat h = clamp(dot(pa,ba) / dot(ba,ba), 0., 1.);\t\n\treturn length(pa - ba * h);\n}\n\nfloat sharpen(in float d, in float w)\n{\n    float e = 1. / min(iResolution.y , iResolution.x);\n    return 1. - smoothstep(-e, e, d - w);\n}\n\nvec3 bary(in vec3 a, in vec3 b, in vec3 c, in vec3 p)\n{\n    // The cross product of two vectors has a magnitude\n    // equal to twice the area of the triangle formed by \n    // the two vectors.\n    vec3 n = cross(b - a, c - a);    \n\tfloat area = dot(n, n);\n\t\n\tif(abs(area) < 0.0001) return vec3(0);\n\t\n\tvec3 v0 = a - p;\n\tvec3 v1 = b - p;\n\tvec3 v2 = c - p;\n\t\n\tvec3 asub = vec3(dot(cross(v1, v2), n),\n\t\t\t\t\t dot(cross(v2, v0), n),\n\t\t\t\t\t dot(cross(v0, v1), n));\n    \n\treturn asub / vec3(area);\n}\n\nbool test(in vec2 a, in vec2 b, in vec2 c, in vec2 p)\n{\n    vec3 v = bary(vec3(a.x, 0., a.y),\n                  vec3(b.x, 0., b.y),\n                  vec3(c.x, 0., c.y),\n                  vec3(p.x, 0., p.y));\n    \n    return v.x > 0. && v.y > 0. && v.z > 0.;\n}\n\n\nfloat df_bounds(in vec2 uv, in vec2 p, in vec2 a, in vec2 b, in vec2 c)\n{\n    float cp = 0.;\n    \n    float c0 = sharpen(df_circ(uv, p, \n                       (.03 + cos(15.*iTime) *.01))\n                       , EPS * 1.);\n\n    float l0 = sharpen(df_line(uv, a, b), EPS * 1.);\n    float l1 = sharpen(df_line(uv, b, c), EPS * 1.);\n    float l2 = sharpen(df_line(uv, c, a), EPS * 1.);\n\n    cp = max(c0, max(max(l0, l1),l2));\n\n    return cp;\n}\n\nvec3 scene(in vec2 uv, in vec2 a, in vec2 b, in vec2 c, in vec2 p)\n{\n    float d = df_bounds(uv, p, a, b, c);\n    return d > 0. ? COL3 : COL1;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float ar = iResolution.x / iResolution.y;\n    \n\tvec2 uv = (fragCoord.xy / iResolution.xy * 2. - 1.) * vec2(ar, 1.);\n    vec2 mc = (iMouse.xy    / iResolution.xy * 2. - 1.) * vec2(ar, 1.);\n\n    \n    \n    {\n        vec2 a1 = vec2( .73,  .75);\n        vec2 b1 = vec2(-1.45,  .65);\n        vec2 c1 = vec2( .25, -.75);\n        \n        float l1 = df_bounds(uv, mc, a1, b1, c1);\n\n        bool t10 = test(a1, b1, c1, mc);\n        bool t11 = test(a1, b1, c1, uv);    \n\n        \n        vec2 a0 = vec2( 1.73,  -1.05);\n        vec2 b0 = vec2(0.45,  .65);\n        vec2 c0 = vec2( .25, -.55);\n\n        float l0 = df_bounds(uv, mc, a0, b0, c0);\n        \n        bool t0 = test(a0, b0, c0, mc);\n        bool t1 = test(a0, b0, c0, uv);    \n\n//        vec3 col = l > 0. ? COL3 : (t1 ? COL0 : (t0 ? COL2 : COL1));        \n\n        vec3 col = \n            \n        // first triangle edges\n\t\t\tl1 > 0. ?  COL3 : \n\n        // second triangle edges\n            l0 > 0. ?  COL3 : \n        \n        (t1 || t11  ? COL0 : \n         \n         (\n             // mouse inside triangles?\n             t0 || t10 ? COL2 : COL1\n         \n         \n         ));        \n\n        fragColor = vec4(col, 1);\n    }\n}","name":"Image","description":"","type":"image"}]}