{"ver":"0.1","info":{"id":"4l2yzW","date":"1507662699","viewed":236,"name":"4D Mandelbrot","username":"mgrant8164","description":"Just a test to see how well Mandelbrot works with 4 dimensions. Use mouse to pan through the 3rd (y) and 2.5th (x) dimension.\nI have no idea what this is, so please don't criticize unless you know of a similar, mathematically correct fractal.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec4 square(vec4 p) {\n    return vec4(p.x*p.x - p.y*p.y,\n                2.*p.x*p.y - 2.*p.z*p.w - p.w*p.w,\n               2.*p.x*p.z + 2.*p.y*p.w,\n               2.*p.x*p.w - 2.*p.y*p.z);\n}\n\nvec4 squareq(vec4 q) {\n    return vec4(dot(q*q,vec4(1.,-1.,-1.,-1.)),2.*q.x*q.yzw);\n}\n\n#define MAX_ITER 150\nint mandel(vec4 c) {\n    vec4 x = vec4(0.);\n    for(int i = 0; i < MAX_ITER; i++) {\n        x = squareq(x) + c;\n        if(length(x) > 4.) return i;\n    }\n    return -1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = 2. * (iMouse.xy - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y);\n    if(iMouse.z < 0.5) mouse = vec2(0.);\n    //mouse = vec2(0.);\n\tvec2 uv = 2. * (fragCoord.xy - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y);\n    //uv /= pow(2.,iTime);//log(10.*iTime)+1.;\n    \n    int n = mandel(vec4(uv + vec2(1./4.,0.),mouse.x,mouse.y));\n    \n    if(n < 0) {\n        fragColor = vec4(0.,0.,0.,1.);\n        return;\n    }\n    \n    float c = float(n)/float(MAX_ITER);\n    \n    vec3 color = hsv2rgb(vec3(c,1.,1.));\n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}