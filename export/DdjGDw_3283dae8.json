{"ver":"0.1","info":{"id":"DdjGDw","date":"1667723457","viewed":121,"name":"Ray marcherrr","username":"bigvalthoss","description":"Ray marching sphere with rotation and deformation.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// p: point in space\n// c: center of the sphere\n// r: radius of sphere\nfloat sdSphere(in vec3 p, in vec3 c, float r)\n{\n    return length(p - c) - r;\n}\n\nfloat sdPlane( vec3 p, vec3 n, float h )\n{\n  // n must be normalized\n  return dot(p,n) + h;\n}\n\nfloat cosBetweenAB(float a, float b, float c)\n{\n    return (a - b) / 2.0 * cos(iTime / c) + (a + b) / 2.0;\n}\n\n\nmat4 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n\n    return mat4(\n        vec4(c, 0, s, 0),\n        vec4(0, 1, 0, 0),\n        vec4(-s, 0, c, 0),\n        vec4(0, 0, 0, 1)\n    );\n}\n\nfloat compositeShape(in vec3 p)\n{\n    // sphere shape boyo;\n    vec3 point = (rotateY(-iTime) * vec4(p, 1.0)).xyz;\n    \n    float dist = sdSphere(p, vec3(0.0), cosBetweenAB(0.8, 1.2, 0.5));\n    float mul = 12.0;\n    float displacement = sin(mul * point.x) * sin(mul * point.y) * sin(mul * point.z) * 0.25 * cosBetweenAB(0.4, 2.0, 1.0);\n    \n    dist = dist+displacement;\n    \n    //dist = min(dist, sdSphere(p, vec3(1.0, 0.0, 0.0), 2.0));\n    \n    // dist = min(dist, sdPlane(vec3(0.0, -3.0, 0.0), normalize(vec3(1.0, 1.0, 0.0)), 0.1));\n    \n    // slightly offset sphere\n    //dist = min(dist, sdSphere(p, vec3(1.0, 0.0, 0.0), 0.5));\n    \n    return dist;\n}\n\n\nvec3 calculate_normal(in vec3 p)\n{\n    const vec3 small_step = vec3(0.001, 0.0, 0.0);\n\n    float gradient_x = compositeShape(p + small_step.xyy) - compositeShape(p - small_step.xyy);\n    float gradient_y = compositeShape(p + small_step.yxy) - compositeShape(p - small_step.yxy);\n    float gradient_z = compositeShape(p + small_step.yyx) - compositeShape(p - small_step.yyx);\n\n    vec3 normal = vec3(gradient_x, gradient_y, gradient_z);\n\n    return normalize(normal);\n}\n\nvec3 funkEColour()\n{\n    return vec3(.5 * cos(iTime + 2.0 / 3.0 * 3.14159265) + 0.5, .5 * cos(iTime + 4.0 / 3.0 * 3.14159265) + 0.5, .5 * cos(iTime) + 0.5);\n}\n\nvec3 ray_march(in vec3 ro, in vec3 rd)\n{\n    float total_distance_traveled = 0.0;\n    const int NUMBER_OF_STEPS = 32;\n    const float MINIMUM_HIT_DISTANCE = 0.001;\n    const float MAXIMUM_TRACE_DISTANCE = 1000.0;\n\n    for (int i = 0; i < NUMBER_OF_STEPS; ++i)\n    {\n        vec3 current_position = ro + total_distance_traveled * rd;\n\n        float distance_to_closest = compositeShape(current_position);\n\n        if (distance_to_closest < MINIMUM_HIT_DISTANCE) \n        {\n            vec3 normal = calculate_normal(current_position);\n            \n            // For now, hard-code the light's position in our scene\n            vec3 light_position = vec3(0.0, -5.0, 3.0);\n            \n            vec3 direction_to_light = normalize(current_position - light_position);\n\n            float diffuse_intensity = max(0.0, dot(normal, direction_to_light));\n            \n            return funkEColour() * diffuse_intensity;\n        }\n\n        if (total_distance_traveled > MAXIMUM_TRACE_DISTANCE)\n        {\n            break;\n        }\n        total_distance_traveled += distance_to_closest;\n    }\n    return vec3(0.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 camera_position = vec3(0.0, 0.0, -3.0);\n    vec3 ro = camera_position;\n    vec3 rd = vec3(uv, 1.0);\n\n    vec3 col = ray_march(ro, rd);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}