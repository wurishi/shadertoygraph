{"ver":"0.1","info":{"id":"tsfcDf","date":"1585721745","viewed":59,"name":"logistic_difference_v0006","username":"darkczar","description":"logistic difference equation fun","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["psychedelic","trippy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// based on...\n// https://www.shadertoy.com/view/lssfW2\n\nfloat nsin(float x)\n{\n    return .5+.5*sin(x);\n}\nfloat ncos(float x)\n{\n    return .5+.5*cos(x);\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}  //https://gist.github.com/companje/29408948f1e8be54dd5733a74ca49bb9\n\nhighp float rand(vec2 co)  //from stackoverflow\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\nuint hash( uint x ) {  //http://amindforeverprogramming.blogspot.com/2013/07/random-floats-in-glsl-330.html\n\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\nfloat random( float f ) {  //http://amindforeverprogramming.blogspot.com/2013/07/random-floats-in-glsl-330.html\n\n    const uint mantissaMask = 0x007FFFFFu;\n    const uint one          = 0x3F800000u;\n   \n    uint h = hash( floatBitsToUint( f ) );\n    h &= mantissaMask;\n    h |= one;\n    \n    float  r2 = uintBitsToFloat( h );\n    return r2 - 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float r = 0.0;\n    float g = 0.0;\n    float b = 0.0;\n    vec2 xy0 = vec2(0.,0.);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord /iResolution.xy;\n    //vec2 p=uv;//(fragCoord.xy-iResolution.xy)/iResolution.y;\n    \n    vec2 xy = vec2(0.,0.);\n    // r between 3.75 and 4.0 produces chaotic behavior\n    float rr = .5*(ncos(.5*iTime))+3.5; // + .5*nsin(iTime*.5); //2.57 +nsin(iTime); //+cos(iTime);\n    xy = uv;\n    //int max_iter = int(6.0 + floor(8.0*nsin(iTime*.2)));\n    for (int i = 0; i<9; i++)\n    {\n        xy = rr*xy*(vec2(1.0,1.0)-xy + .5*nsin(.1*iTime)*vec2(sin(.5*iTime + 6.28*xy.y),cos(.5*iTime+6.28*xy.x)));\n        if(i==0)\n        {\n          xy0 = xy;  \n        }\n        if (i>1)\n            {\n                if(abs(length(xy) - length(xy0)) < .1) // try and tease out the cycles and color them\n                {\n                    r = 1.*random(float(mod(float(i),15.00)))*nsin(iTime);\n                    g = 1.*random(1.28+float(mod(float(i),15.0)));\n                    b = 1.*random((1.0 - float(mod(float(i),15.0))))*ncos(iTime);\n                } else if (dot(normalize(xy),normalize(xy0)) > .08)\n                {\n                    r = 1.*random((1.0 - float(mod(float(i),15.0))))*ncos(iTime);\n                    g = 1.0 - 1.*random(1.28+float(mod(float(i),15.0)));\n                    b = 1.*random(float(mod(float(i),15.00)))*nsin(iTime);\n                }\n            }\n    }\n    if (length(xy) > 20000.0)\n    {\n        r = nsin(iTime)*mod(length(xy),20000.0)/8000000.0;\n        g = 0.0;\n        b = ncos(iTime)*20000.0/length(xy);\n    } \n        \n        //m = (rand_point.x-prev_point.x) / ((rand_point.y-prev_point.y);\n        //line_y = m*p.x +  \n\n\n    \n    vec3 col = vec3(r, g, b);\n    float dn = col.x + col.y + col.z;\n    col /= dn;\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n    fragColor = vec4( pow(col,vec3(1./2.2)),1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}