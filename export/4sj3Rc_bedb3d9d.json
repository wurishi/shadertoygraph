{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"music","id":"XsXGRr","filepath":"/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Inspired by iq raymarched toys\n// Created by Ramon Viladomat\n\n#define STEP_REDUCTION 0.5\n#define PI 3.1415\n#define EPSILON 0.002\n\n#define REACTABLE_SCREENWIDTH 0.025\n\n#define REACTABLE_RADIUS 1.5\n#define REACTABLE_BORDER_SIZE 0.1\n\n#define REACTABLE_HEIGHT 1.5\n#define REACTABLE_BORDER_HEIGHT 0.05\n\n#define REACTABLE_LEG_AXE_DISP 1.13\n#define SCREEN_OUTPUT_RADIUS 0.03\n\n#define MODULE_SIZE 0.12\n#define MODULE_HEIGHT 0.04\n#define MODULE_RADIUS 0.07\n\n#define BPM 128.0\n\n#define WAVE_AMP 0.2\n#define WAVE_WIDTH 0.01\n\n#define UI_RADIUS 0.23\n#define UI_WIDTH  0.025\n\nvec3 module1Pos = vec3(0.25,0.0,-0.4);\nvec3 module2Pos = vec3(0.0,0.0,-1.1);\nvec3 module3Pos = vec3(-0.4,0.0,0.4);\nvec3 module4Pos = vec3(0.2,0.0,1.0);\nvec4 connection = vec4(0.25,-0.4,1.0,0.0);\n\n/////////////////////////\n// DISTANCE PRIMITIVES //\n/////////////////////////\n\nfloat distBox( in vec3 p, in vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat distSquaredCylinder( vec3 p, vec3 d, float r)\n{\n\treturn max(length(max((abs(p.xz)-(d.xz-r)),0.0))-r,abs(p.y)-d.y);\n}\n\n////////////////\n// MORPHOLOGY //\n////////////////\n\nvec2 distBody( in vec3 p )\n{\n\tfloat distXZ = length(p.xz) - REACTABLE_RADIUS;\n\t\t\n\tfloat screen = max(distXZ, abs(p.y) - REACTABLE_SCREENWIDTH);\n\t\n\tfloat borderXZ = abs(distXZ-REACTABLE_BORDER_SIZE)-REACTABLE_BORDER_SIZE;\n\tfloat border = max(borderXZ,abs(abs(p.y + REACTABLE_HEIGHT)-REACTABLE_HEIGHT) - (REACTABLE_SCREENWIDTH+REACTABLE_BORDER_HEIGHT));\n\t\n\tvec3 q = p;\n\tq.xz = abs(q.xz) - REACTABLE_LEG_AXE_DISP;\n\tq.y += REACTABLE_HEIGHT;\n\tfloat legs = distBox(q,vec3(0.05,REACTABLE_HEIGHT,0.05));\n\t\t\n\t//cloth\n\tvec3 q2 = p;\n\tq2.y += REACTABLE_HEIGHT;\n\tq2.y = abs(q2.y);\n\tfloat reduction = smoothstep(0.0,REACTABLE_HEIGHT,q2.y);\n\tfloat cloth = max(q2.y-REACTABLE_HEIGHT,distXZ + mix(0.15,0.0,reduction));\n\t\t\n\tfloat dist = min(cloth,min(min(screen,border),legs));\n\tfloat innerRadius = step(-EPSILON,distXZ);\n\tfloat mat = mix(mix(1.0,2.0,innerRadius),mix(0.0,1.0,innerRadius),step(-REACTABLE_BORDER_HEIGHT,p.y));\n\t\t\n\treturn vec2(dist,mat);\n}\n\nvec2 distModuleObject(in vec3 p)\n{\n\tp.y -= MODULE_HEIGHT;\n\treturn vec2(distSquaredCylinder(p,vec3(MODULE_SIZE,MODULE_HEIGHT,MODULE_SIZE),MODULE_RADIUS),3.0);\n}\n\nvec2 distCubeObject(in vec3 p)\n{\n\tp.y -= MODULE_SIZE;\n\treturn vec2(distBox(p,vec3(MODULE_SIZE,MODULE_SIZE,MODULE_SIZE)),3.0);\n}\n\nvec2 map( in vec3 p, out vec4 glows)\n{\t\n\tvec2 res = distBody(p);\n\n\tvec2 filterDist = distModuleObject(p-module1Pos);\n\tvec2 filterDist2 = distModuleObject(p-module3Pos);\n\tvec2 cube = distCubeObject(p-module2Pos);\n\tvec2 cube2 = distCubeObject(p-module4Pos);\n\t\n\tif (filterDist.x < res.x) res = filterDist; \n\tif (filterDist2.x < res.x) res = filterDist2; \n\tif (cube.x < res.x) res = cube; \n\tif (cube2.x < res.x) res = cube2; \n\t\n\tglows = vec4(filterDist.x,cube.x,filterDist2.x,cube2.x);\n\t\n\treturn res;\n}\n\n///////////////\n// MATERIALS //\n///////////////\n\nfloat factorObj( in vec2 p, in vec2 from, in vec2 to, float power, vec2 wavemix)\n{\n\t//Wave\n\tvec2 v = to - from; \n\tfloat len = length(v);\n\tv /= len;\n\tvec2 vv = vec2(-v.y,v.x);\n\tvec2 lp = p - from; \n\tvec2 localCoord = vec2(dot(lp,v),dot(lp,vv));\n\t\n\tfloat xBound = localCoord.x / len;\n\tfloat outOfBounds = (1.0 - step(1.0,xBound)) * step(0.0,xBound);\n\t\n\tfloat wave1 = (2.0*(texture(iChannel0, vec2(xBound, 0.75)).x - 0.5));\n\tfloat wave2 = (2.0*(texture(iChannel0, vec2(xBound*0.5, 0.75)).x - 0.5));\n\tfloat wave = WAVE_AMP*((wave1*wavemix.x)+(wave2*wavemix.y))*power*sin(3.1415*xBound);\n\t\n\tfloat factorWave = mix(0.0,0.5*(1.0 - smoothstep(0.0,WAVE_WIDTH,abs(localCoord.y+wave))),outOfBounds);\n\t\n\t//UI\n\t\n\tfloat angSin = normalize(localCoord).y;\n\tfloat distUI1 = abs((length(localCoord))-UI_RADIUS)-(UI_WIDTH*mix(1.0,0.2,step(0.0,localCoord.y)));\n\tfloat factorUI = 0.5*step(0.0,-distUI1) * step(0.3,abs(angSin)); \n\n\tfloat factorAmpUI = 0.5*(1.0 - step(0.0,length(localCoord - vec2(0.0,UI_RADIUS)) - UI_WIDTH));\n\t\n\treturn factorWave + factorUI + factorAmpUI;\n}\n\n\n\nvec4 colorScreen( in vec2 pos ) \n{\t\n\t//Beat Waves\n\tfloat modfactor = 60.0/BPM;\n\t\n\tfloat distToOutput = length(pos); \n\tfloat maxradius = 0.5*REACTABLE_RADIUS;\n\tfloat actualWaveRadius = maxradius*mod(iChannelTime[0],modfactor)/modfactor;\n\t\n\tfloat beatWeight = 0.4+0.6*(1.0 - step(0.5,mod(iChannelTime[0],4.0*modfactor)/modfactor));\n\t\n\tfloat waveValue = 1.0 - smoothstep(0.0,0.05,abs(distToOutput-actualWaveRadius));\n\tfloat factor = beatWeight * (maxradius-actualWaveRadius) * waveValue; \n\t\n\t//OUTPUT\n\tfactor = mix(1.0,factor,step(SCREEN_OUTPUT_RADIUS,distToOutput));\n\n\tfloat obj1 = factorObj(pos,module1Pos.xz,vec2(0.0), connection.z,vec2(1.0,0.0));\n\tfloat obj2 = factorObj(pos,module2Pos.xz,connection.xy,1.0,vec2(1.0,0.0));\n\tfloat obj3 = factorObj(pos,module3Pos.xz,vec2(0.0),1.0,vec2(0.5,0.5));\n\tfloat obj4 = factorObj(pos,module4Pos.xz,module3Pos.xz,1.0,vec2(0.0,1.0));\n\t\n\tfactor = factor + obj1 + obj2 + obj3 + obj4;\n\t\t\t\n\t//FINAL SCREEN MIX\n\treturn mix(vec4(0.00,0.00,0.22,0.05),vec4(0.50,0.50,0.50,0.2), factor);\n}\n\nvec4 calcColor( in vec3 pos, in vec3 nor, float material )\n{\n\tvec4 materialColor = vec4(0.0);\n\t\n\t\t if(material < 0.5) materialColor = colorScreen(pos.xz);\n\telse if(material < 1.5) materialColor = vec4(0.0,0.0,0.0,0.05);\n\telse if(material < 2.5) materialColor = vec4(0.15,0.15,0.15,0.2);\n\telse if(material < 3.5) materialColor = vec4(0.2,0.2,0.2,0.2);\n\t\t\n\treturn materialColor;\n}\n\n///////////\n// LOGIC //\n///////////\n\nvoid ComputeLogic(in vec3 ro, in vec3 rd)\n{\n\t//Intersect with the screen and move Cube\n\tmodule2Pos = ro+rd*(-ro.y/rd.y);\n\tfloat len = min(length(module2Pos.xz),(REACTABLE_RADIUS - sqrt(2.0*MODULE_SIZE*MODULE_SIZE)));\n\tmodule2Pos = normalize(module2Pos)*len;\n\t\t\n\tfloat lenToFilter = length(module1Pos.xz - module2Pos.xz);\n\tfloat lenToFilter2 = length(module3Pos.xz - module2Pos.xz);\n\tfloat lenFilter = length(module1Pos.xz);\n\tfloat lenFilter2 = length(module3Pos.xz);\n\t\n\tconnection.z = step(lenFilter,len) * step(lenToFilter,len);\n\tconnection.w = step(lenFilter2,len) * step(lenToFilter2,len);\t\n\t\n\tconnection.xy = mix(mix(vec2(0.0),module1Pos.xz,connection.z),module3Pos.xz,connection.w);\n}\n\n//////////////////////\n// MAIN RAY/SHADING //\n//////////////////////\n\nvec2 intersect( in vec3 ro, in vec3 rd, out vec4 glows)\n{\n\tglows = vec4(9999.0);\n\tvec2 res = vec2( 2.0*EPSILON, -1.0);\n    float t = 0.0;\n    for( int i=0; i<150; i++ )\n    {\n\t\tif( abs(res.x)<EPSILON ) continue;\n\t\tvec4 thisglows;\n\t\tres = map( ro+rd*t, thisglows);\n\t\tglows = min(glows,thisglows);\n\t\tt += res.x*STEP_REDUCTION;\n    }\n\tif( abs(res.x)>EPSILON ) res.y = -1.0;\n\tres.x = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec4 dummy;\n    vec3 eps = vec3(EPSILON,0.0,0.0);\n\treturn normalize( vec3( map(pos+eps.xyy,dummy).x - map(pos-eps.xyy,dummy).x, map(pos+eps.yxy,dummy).x - map(pos-eps.yxy,dummy).x, map(pos+eps.yyx,dummy).x - map(pos-eps.yyx,dummy).x) );\n}\n\nfloat softShadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n\tvec4 dummy;\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<45; i++ )\n    {\n        float h = map(ro + rd*t,dummy).x;\n        res = min( res, k*h/t );\n        t += h*STEP_REDUCTION;\n    }\n    return clamp(res,0.0,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n\t\n\t// Compute Camera\n\tfloat introFactor = smoothstep(0.0,4.0,iTime);\n\t\n\tfloat camAngle = mix(0.0,1.2*PI,introFactor);\n\tfloat camDist = mix(4.0,2.45,introFactor); \n\t\n    vec3 camPosition = vec3(camDist*sin(camAngle), 1.5, camDist*cos(camAngle));\n    vec3 camTarget\t = vec3( 0.0, -0.50, 0.0 );\n    vec3 camFront \t = normalize( camTarget - camPosition );\n    vec3 camRight \t = normalize( cross(camFront,vec3(0.0,1.0,0.0) ) );\n    vec3 camUp \t\t = normalize( cross(camRight,camFront));\n    vec3 rayDir \t = normalize( p.x*camRight + p.y*camUp + 2.0*camFront );\n\n\t// update logic\n\tvec2 mousePos = -1.0 + 2.0 * iMouse.xy/iResolution.xy;\n\tmousePos.x *= iResolution.x/iResolution.y;\n\t\n\tvec3 mouseRay = normalize( mousePos.x*camRight + mousePos.y*camUp + 2.0*camFront );\n\t\n\tif (introFactor > 1.0-EPSILON)\n\t{\n\t\tComputeLogic(camPosition,mouseRay);\n\t}\n\t\n\t// light compute\n\tvec3 lightPos1 = vec3(2.5,2.5,2.0);\n\tvec3 lightColor1 = vec3(1.0,1.0,1.0);\n\t\n\t// Start Ray\n    vec3 finalcolor = vec3(0.0);\n\tvec4 glows = vec4(0.0);\n\tfloat attenuation = 1.0;\n\tfor( int reflectCount=0; reflectCount<2; reflectCount++ )\n\t{\n\t\t// Compute color for single ray\n    \tvec2 tmat = intersect(camPosition,rayDir,glows);\n\n\t\t//glow ( use the ray min distance in order to compute real material emision )\n\t\tvec4 glowamount = pow(max(1.0 - glows,0.0),vec4(30.0));\n\t\t\n\t\tfloat beat1 = pow(texture( iChannel0, vec2( 0.01, 0.25 ) ).x * texture( iChannel0, vec2( 0.07, 0.25 ) ).x,4.0);\n\t\tfloat beat2 = 2.0*pow(texture( iChannel0, vec2( 0.15, 0.25 ) ).x * texture( iChannel0, vec2( 0.30, 0.25 ) ).x,2.0);\n\t\t\n\t\tbeat1 = 0.2+0.8*clamp(beat1,0.0,1.0);\n\t\tbeat2 = 0.2+0.8*clamp(beat2,0.0,1.0);\n\t\t\n\t\tvec3 glow = ((glowamount.x*connection.z)+glowamount.y)*beat1*vec3(0.0,0.7,0.0) +\n\t\t\t\t\tglowamount.w*beat2*vec3(0.7,0.0,0.0) +\n\t\t\t\t\tglowamount.z*vec3(0.7*beat2,0.7*mix(0.0,beat1,connection.w),0.0);\n\t\t\n\t\tfinalcolor += attenuation*glow;\t\t\t\t\n\t\t\n\t\tif (tmat.y > -0.5)\n\t\t{\n\t\t\t// results extraction\n\t\t\tvec3 position \t= camPosition + tmat.x*rayDir;\n\t\t\tvec3 normal \t= normalize(calcNormal(position));\n\t\t\tvec3 reflDir \t= reflect(rayDir,normal);\n\t\t\t\n\t\t\t// lights and materials \n\t\t\tvec4 materialColor \t= calcColor( position, normal, tmat.y );\n\t\t\t\n\t\t\tfloat ambient  \t\t= 0.7 + 0.3*normal.y;\n\t\t\tvec3 ambientColor \t= ambient*materialColor.rgb;\n\t\t\t\n\t\t\t//light 1\n\t\t\tvec3 lightDir1 \t= normalize(lightPos1 - position);\n\t\t\t\n\t\t\tfloat diffuse1  = max(dot(normal,lightDir1),0.0);\n\t\t\tfloat specular1 = pow(clamp(dot(lightDir1,reflDir),0.0,1.0),3.0);\n\t\t\tfloat shadow1   = softShadow( position, lightDir1, 0.01, 10.0 );\n\t\t\t\n\t\t\tvec3 diffuseColor1 = diffuse1*lightColor1*materialColor.rgb;\n\t\t\tvec3 specularColor1 = specular1*materialColor.w*lightColor1;\n\t\t\tvec3 ilumColor1 = shadow1*(diffuseColor1 + specularColor1);\n\t\t\t\n\t\t\t// mixing lights\n\t\t\tfinalcolor += attenuation*mix(ambientColor,ilumColor1,0.8);\n\t\t\t\n\t\t\t// prepare next ray for reflections \n\t\t\trayDir = reflDir;\n\t\t\tattenuation *= 2.0*materialColor.w;\n\t\t\tcamPosition = position + EPSILON*normal;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfinalcolor += attenuation*vec3(0.2,0.2,0.2);\n\t\t\tattenuation = 0.0;\n\t\t}\n\t\t\t\n\t}\n\t\n\t// desaturation, gamma correction and simple vignette\n\tfinalcolor = pow(mix( finalcolor, vec3(dot(finalcolor,vec3(0.33))), 0.3 ), vec3(0.45));\n\tfinalcolor *= mix(1.0,0.6,length(p)*0.5);\n\t\n    fragColor = vec4( finalcolor,1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sj3Rc","date":"1391771996","viewed":2516,"name":"Reactable Synth","username":"Ramocles","description":"Toy created to test audio channels while emulating the real reactable behavior. Reactable synth is a tangible synth interface to make music. I hope you like it. \nMouse controls the green cube (sound generator) position on the table. ","likes":51,"published":1,"flags":0,"usePreview":0,"tags":["procedural","3d","raymarching","distancefield","glow","reactable"],"hasliked":0,"parentid":"","parentname":""}}