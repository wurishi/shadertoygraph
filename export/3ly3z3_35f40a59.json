{"ver":"0.1","info":{"id":"3ly3z3","date":"1579646448","viewed":197,"name":"kalamari","username":"monsterkodi","description":"kalamari","likes":27,"published":1,"flags":16,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TOY  1\n\n#define MAX_STEPS 64\n#define MIN_DIST   0.01\n#define MAX_DIST  20.0\n#define SHADOW     0.1\n\n#define PI 3.1415926535897\n#define ZERO min(iFrame,0)\n\n#define NONE  0\n#define HEAD  1\n#define TAIL  2\n#define BULB  3\n#define PUPL  4\n\nstruct ray {\n    vec3 pos;\n    vec3 dir;\n};\n\nstruct sdf {\n    float dist;\n    vec3  pos;\n    int   mat;\n};\n\nsdf s;\nint mat;\nbool soft;\nbool animat;\nvec3 camPos;\nvec3 camTgt;\nvec3 camDir;\n\nfloat aa = 0.0;\n\nvec3 v0 = vec3(0,0,0);\nvec3 vx = vec3(1,0,0);\nvec3 vy = vec3(0,1,0);\nvec3 vz = vec3(0,0,1);\n    \nfloat rad2deg(float r) { return 180.0 * r / PI; }\nfloat deg2rad(float d) { return PI * d / 180.0; }\n\nvec3 hash33(vec3 p3)\n{\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nfloat clamp01(float v) { return clamp(v, 0.0, 1.0); }\n\nfloat gradientNoise(vec2 uv)\n{\n    return fract(52.9829189 * fract(dot(uv, vec2(0.06711056, 0.00583715))));\n}\n\n// 0000000    000   0000000   000  000000000  \n// 000   000  000  000        000     000     \n// 000   000  000  000  0000  000     000     \n// 000   000  000  000   000  000     000     \n// 0000000    000   0000000   000     000     \n\nfloat digitBin(const int x)\n{\n    return x==0?480599.0:x==1?139810.0:x==2?476951.0:x==3?476999.0:x==4?350020.0:x==5?464711.0:x==6?464727.0:x==7?476228.0:x==8?481111.0:x==9?481095.0:0.0;\n}\n\nfloat digit(vec2 vStringCoords, float fValue, float fMaxDigits, float fDecimalPlaces)\n{       \n    if ((vStringCoords.y < 0.0) || (vStringCoords.y >= 1.0)) return 0.0;\n    \n    bool bNeg = fValue < 0.0;\n    fValue = abs(fValue);\n    \n    float fLog10Value = log2(abs(fValue)) / log2(10.0);\n    float fBiggestIndex = max(floor(fLog10Value), 0.0);\n    float fDigitIndex = fMaxDigits - floor(vStringCoords.x);\n    float fCharBin = 0.0;\n    if (fDigitIndex > (-fDecimalPlaces - 1.01)) {\n        if (fDigitIndex > fBiggestIndex) {\n            if((bNeg) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;\n        } else {        \n            if (fDigitIndex == -1.0) {\n                if (fDecimalPlaces > 0.0) fCharBin = 2.0;\n            } else {\n                float fReducedRangeValue = fValue;\n                if (fDigitIndex < 0.0) { fReducedRangeValue = fract( fValue ); fDigitIndex += 1.0; }\n                float fDigitValue = (abs(fReducedRangeValue / (pow(10.0, fDigitIndex))));\n                fCharBin = digitBin(int(floor(mod(fDigitValue, 10.0))));\n            }\n        }\n    }\n    return floor(mod((fCharBin / pow(2.0, floor(fract(vStringCoords.x) * 4.0) + (floor(vStringCoords.y * 5.0) * 4.0))), 2.0));\n}\n\n//  0000000   000   000   0000000   000000000  \n// 000   000  000   000  000   000     000     \n// 000 00 00  000   000  000000000     000     \n// 000 0000   000   000  000   000     000     \n//  00000 00   0000000   000   000     000     \n\nvec4 quatAxisAngle(vec3 axis, float angle)\n{ \n    vec4 qr;\n    float half_angle = deg2rad(angle * 0.5);\n    qr.x = axis.x * sin(half_angle);\n    qr.y = axis.y * sin(half_angle);\n    qr.z = axis.z * sin(half_angle);\n    qr.w = cos(half_angle);\n    return qr;\n}\n\nvec4 quatConj(vec4 q)\n{ \n    return vec4(-q.x, -q.y, -q.z, q.w); \n}\n  \nvec4 quatMul(vec4 q1, vec4 q2)\n{ \n    vec4 qr;\n    qr.x = (q1.w * q2.x) + (q1.x * q2.w) + (q1.y * q2.z) - (q1.z * q2.y);\n    qr.y = (q1.w * q2.y) - (q1.x * q2.z) + (q1.y * q2.w) + (q1.z * q2.x);\n    qr.z = (q1.w * q2.z) + (q1.x * q2.y) - (q1.y * q2.x) + (q1.z * q2.w);\n    qr.w = (q1.w * q2.w) - (q1.x * q2.x) - (q1.y * q2.y) - (q1.z * q2.z);\n    return qr;\n}\n\nvec3 rotate(vec4 quat, vec3 p)\n{\n    vec4 conj = quatConj(quat);\n    vec4 q_tmp = quatMul(quat, vec4(p, 0));\n    return quatMul(q_tmp, conj).xyz;\n}\n\nvec3 rotate(vec4 quat, vec3 o, vec3 p)\n{\n    vec4 conj = quatConj(quat);\n    vec4 q_tmp = quatMul(quat, vec4(p-o, 0));\n    return o + quatMul(q_tmp, conj).xyz;\n}\n\n// 00000000    0000000   000000000  \n// 000   000  000   000     000     \n// 0000000    000   000     000     \n// 000   000  000   000     000     \n// 000   000   0000000      000     \n\nvec3 rotAxisAngle(vec3 position, vec3 axis, float angle)\n{ \n    vec4 qr = quatAxisAngle(axis, angle);\n    vec4 qr_conj = quatConj(qr);\n    vec4 q_pos = vec4(position.x, position.y, position.z, 0);\n    \n    vec4 q_tmp = quatMul(qr, q_pos);\n    qr = quatMul(q_tmp, qr_conj);\n    \n    return vec3(qr.x, qr.y, qr.z);\n}\n\nvec3 rotRayAngle(vec3 position, vec3 ro, vec3 rd, float angle)\n{ \n    return rotAxisAngle(position-ro, rd-ro, angle)+ro;\n}\n\n//  0000000   00000000   \n// 000   000  000   000  \n// 000   000  00000000   \n// 000   000  000        \n//  0000000   000        \n\nfloat opUnion(float d1, float d2) \n{\n    float k = 0.05;\n    float h = clamp(0.5 + 0.5*(d2-d1)/k, 0.0, 1.0);\n    return mix(d2, d1, h) - k*h*(1.0-h);\n}\n\nfloat opUnion(float d1, float k, float d2) \n{\n    float h = clamp(0.5 + 0.5*(d2-d1)/k, 0.0, 1.0);\n    return mix(d2, d1, h) - k*h*(1.0-h);\n}\n\nfloat opDiff(float d1, float d2) \n{\n    float k = 0.05;\n    float h = clamp(0.5 - 0.5*(d2+d1)/k, 0.0, 1.0);\n    return mix(d1, -d2, h) + k*h*(1.0-h); \n}\n\nfloat opDiff(float d1, float k, float d2) \n{\n    float h = clamp(0.5 - 0.5*(d2+d1)/k, 0.0, 1.0);\n    return mix(d1, -d2, h) + k*h*(1.0-h); \n}\n\nfloat opInter(float d1, float d2) \n{\n    float k = 0.05;\n    float h = clamp(0.5 - 0.5*(d2-d1)/k, 0.0, 1.0);\n    return mix(d2, d1, h) + k*h*(1.0-h);\n}\n\n//  0000000  0000000    \n// 000       000   000  \n// 0000000   000   000  \n//      000  000   000  \n// 0000000   0000000    \n\nfloat sdSphere(vec3 p, vec3 a, float r)\n{\n    return length(p-a)-r;\n}\n\nfloat sdPlane(vec3 p, vec3 a, vec3 n)\n{   \n    return dot(n, p-a);\n}\n\nfloat sdTetra(vec3 p, vec3 a, float s, float r)\n{\n    p = p - a;\n    vec3 c1 = vec3( 0, 1, 0);\n    vec3 c2 = vec3( 0.8165, -0.3333,  0.47140);\n    vec3 c3 = vec3( 0,      -0.3333, -0.94281);\n    vec3 c4 = vec3(-0.8165, -0.3333,  0.47140);\n    \n    c1 *= s;\n    c2 *= s;\n    c3 *= s;\n    c4 *= s;\n        \n    vec3 n1 = vec3( 0.0000,  0.3333,  0.942812);\n    vec3 n2 = vec3( 0.8165,  0.3333, -0.471400);\n    vec3 n3 = vec3( 0.0000, -1.0000,  0.000000);\n    vec3 n4 = vec3(-0.8165,  0.3333, -0.471400);\n    \n    float d = sdSphere(p,v0,2.0); \n    d = opDiff(d, r, sdPlane(p, c1, -n1));\n    d = opDiff(d, r, sdPlane(p, c2, -n2));\n    d = opDiff(d, r, sdPlane(p, c3, -n3));\n    d = opDiff(d, r, sdPlane(p, c4, -n4));\n  \n    return d;\n}\n\nfloat sdSocket(vec3 p, vec3 a, vec3 n, float r)\n{\n    return opDiff(opDiff(sdSphere(p, a, r), 0.2, sdPlane(p, a, -n)), 0.2, sdSphere(p, a, r-0.2));\n}\n\nfloat sdCone(vec3 p, vec3 a, vec3 b, float r1, float r2)\n{\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    float t = dot(ab,ap) / dot(ab,ab);\n    t = clamp(t, 0.0, 1.0);\n    vec3 c = a + t*ab;\n    return length(p-c)-(t*r2+(1.0-t)*r1);      \n}\n\n// 00000000  000   000  00000000  \n// 000        000 000   000       \n// 0000000     00000    0000000   \n// 000          000     000       \n// 00000000     000     00000000  \n\nvoid eye(vec3 pos, vec3 pupil, vec3 lens)\n{\n    float d = sdSphere(s.pos, pos, 0.4);\n    if (d > s.dist) return;\n    \n    d = opDiff(d, 0.05, sdSphere(s.pos, pupil, 0.2));\n\n    if (d < s.dist) { s.mat = BULB; s.dist = d; }\n    \n    d = min(d, sdSphere(s.pos, lens, 0.21));\n    \n    if (d < s.dist) { s.mat = PUPL; s.dist = d; }\n}\n\n//  0000000   00000000   00     00  \n// 000   000  000   000  000   000  \n// 000000000  0000000    000000000  \n// 000   000  000   000  000 0 000  \n// 000   000  000   000  000   000  \n\nvoid arm(vec3 pos, vec3 r, vec3 n, float aa)\n{\n    vec3 p = s.pos-pos;\n    \n    float d = 1000.0;\n    \n    d = min(d, sdSphere(p, v0, 0.25));\n    \n    n *= 0.3;\n    \n    vec3 p1 = v0;\n    vec3 p2 = p1 + n;\n    \n    float lf = 1.0;\n    float sf = 1.0;\n    float a  = -(1.0+aa)*17.0+4.5;\n    \n    for (int i = 0; i < 25; i++)\n    {\n        d = opUnion(d, sdCone(p, p1, p2, 0.2*sf, 0.2*sf*0.9));\n        p1 = p2;\n        n  = rotAxisAngle(n, r, a) * lf;\n        sf *= 0.9;\n        lf *= 0.988;\n        p2 += n;\n    }\n    \n    if (d < s.dist) { s.mat = TAIL; s.dist = d; }\n}\n\n// 000   000  00000000   0000000   0000000    \n// 000   000  000       000   000  000   000  \n// 000000000  0000000   000000000  000   000  \n// 000   000  000       000   000  000   000  \n// 000   000  00000000  000   000  0000000    \n\nvoid head(vec3 pos)\n{    \n    pos -= 0.3*vy*(aa+1.0);\n    \n    float d = sdTetra(s.pos, pos, 2.0, 0.7);\n    if (d < s.dist) { s.mat = HEAD; s.dist = d; }\n    \n    float ed = 0.8;\n    float pd = 0.4;\n    float ld = 0.2;\n    \n    vec3 left  = vec3( 0.8165,  0.3333, -0.471400);\n    vec3 right = vec3(-0.8165,  0.3333, -0.471400);\n    vec3 back  = vec3( 0.0000,  0.3333,  0.942812);\n    \n    float dpy = sdPlane(s.pos, pos, vy);\n    \n    vec3 eyel = pos + ed*left;\n    vec3 eyer = pos + ed*right;\n    vec3 eyeb = pos + ed*back;\n    \n    if (dpy > -.5)\n    {\n        float sr = 0.56;\n        d = opUnion(d, sdSocket(s.pos, eyel, left,  sr));\n        d = opUnion(d, sdSocket(s.pos, eyer, right, sr));\n        d = opUnion(d, sdSocket(s.pos, eyeb, back,  sr));\n    }\n        \n    float oo = 0.4;\n    float od = 0.8;\n    \n    vec3 arml = pos - od*vy - oo*left;\n    vec3 armr = pos - od*vy - oo*right;\n    vec3 armb = pos - od*vy - oo*back;\n    \n    vec3 armln = normalize(arml - 0.03*left  - vy);\n    vec3 armrn = normalize(armr - 0.03*right - vy);\n    vec3 armbn = normalize(armb - 0.03*back  - vy);\n    \n    if (dpy < 0.0)\n    {\n        d = opUnion(d, sdSocket(s.pos, arml, armln, 0.35));\n        d = opUnion(d, sdSocket(s.pos, armr, armrn, 0.35));\n        d = opUnion(d, sdSocket(s.pos, armb, armbn, 0.35));\n    }\n            \n    if (d < s.dist) { s.mat = HEAD; s.dist = d; }\n        \n    if (dpy > -.5)\n    {        \n        vec3 cp = camPos + 0.2*vec3(sin(iTime*5.5), -7.0*sin(iTime)*aa+sin(iTime*3.7), 0);\n        vec3 nl = normalize(cp - eyel);\n        vec3 nr = normalize(cp - eyer);\n        vec3 nb = normalize(cp - eyeb);\n        \n        eye(eyel, eyel + pd*nl, eyel + ld*nl);\n        eye(eyer, eyer + pd*nr, eyer + ld*nr);\n        eye(eyeb, eyeb + pd*nb, eyeb + ld*nb);\n    }\n        \n    if (dpy < 0.5)\n    {    \n        vec3 armlr = normalize(cross(arml, armln));\n        vec3 armrr = normalize(cross(armr, armrn));\n        vec3 armbr = normalize(cross(armb, armbn));\n            \n        float t = (aa+1.0)*15.0;\n        \n        if (animat) t *= -sin(iTime*PI-PI/4.0);\n        \n        armln = rotAxisAngle(armln, armlr, t);\n        armrn = rotAxisAngle(armrn, armrr, t);\n        armbn = rotAxisAngle(armbn, armbr, t);\n        \n        float dpl = sdPlane(s.pos, eyel, left);\n        float dpr = sdPlane(s.pos, eyer, right);\n        float dpb = sdPlane(s.pos, eyeb, back);\n        \n        if (dpl < -1.0) arm(arml, armlr, armln, aa);\n        if (dpb < -1.0) arm(armb, armbr, armbn, aa);\n        if (dpr < -1.0) arm(armr, armrr, armrn, aa);\n    }\n}\n\n// 00     00   0000000   00000000   \n// 000   000  000   000  000   000  \n// 000000000  000000000  00000000   \n// 000 0 000  000   000  000        \n// 000   000  000   000  000        \n\nfloat map(vec3 p)\n{\n    s = sdf(1000.0, p, NONE);\n         \n    head(vec3(0,1,0));\n\n    return s.dist;\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec3 n = v0;\n    for (int i=ZERO; i<4; i++)\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(p+e*0.0001);\n    }\n    return normalize(n);\n}\n\n// 00     00   0000000   00000000    0000000  000   000  \n// 000   000  000   000  000   000  000       000   000  \n// 000000000  000000000  0000000    000       000000000  \n// 000 0 000  000   000  000   000  000       000   000  \n// 000   000  000   000  000   000   0000000  000   000  \n\nfloat rayMarch(vec3 ro, vec3 rd)\n{\n    float dz = 0.0;\n    for (int i = ZERO; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + dz * rd;\n        float d = map(p);\n        dz += d;\n        if (d < MIN_DIST) return dz;\n        if (dz > MAX_DIST) break;\n    }\n    s.mat = NONE;\n    return dz;\n}\n\n//  0000000  000   000   0000000   0000000     0000000   000   000  \n// 000       000   000  000   000  000   000  000   000  000 0 000  \n// 0000000   000000000  000000000  000   000  000   000  000000000  \n//      000  000   000  000   000  000   000  000   000  000   000  \n// 0000000   000   000  000   000  0000000     0000000   00     00  \n\nfloat softShadow(vec3 ro, vec3 lp, float k)\n{\n    float shade = 1.;\n    float dist = .0035;    \n    vec3 rd = (lp-ro);\n    float end = max(length(rd), 0.001);\n    float stepDist = end/12.0;\n    rd /= end;\n    for (int i=0; i<12; i++)\n    {\n        float h = map(ro+rd*dist);\n        shade = min(shade, k*h/dist);\n        dist += clamp(h, 0.02, stepDist*2.0);\n        \n        if (h < 0.0001 || dist > end) break; \n    }\n\n    return min(max(shade, 0.0) + SHADOW, 1.0); \n}\n\n// 000      000   0000000   000   000  000000000  \n// 000      000  000        000   000     000     \n// 000      000  000  0000  000000000     000     \n// 000      000  000   000  000   000     000     \n// 0000000  000   0000000   000   000     000     \n\nfloat shiny(float rough, float NoH, const vec3 h) \n{\n    float oneMinusNoHSquared = 1.0 - NoH * NoH;\n    float a = NoH * rough;\n    float k = rough / (oneMinusNoHSquared + a * a);\n    float d = k * k * (1.0 / PI);\n    return d;\n}\n\nvec3 getLight(vec3 p, vec3 n, vec3 col)\n{\n    if (mat == NONE) return col;\n    \n    vec3 cr = cross(camDir, vec3(0,1,0));\n    vec3 up = normalize(cross(cr,camDir));\n    vec3 lp = 4.0 * (camPos + vec3(0,2.0*sin(iTime),0) + up*(5.0+cos(iTime*1.3)) + cr*2.0*sin(iTime*1.73)); \n    vec3 l = normalize(lp-p);\n \n    float ambient = 0.005;\n    float dif = clamp(dot(n,l), 0.0, 1.0);\n    \n    if (mat == PUPL || mat == TAIL)\n    {\n        dif = clamp(dot(n,normalize(mix(camPos,lp,0.1)-p)), 0.0, 1.0);\n        dif = mix(pow(dif, 16.0), 1.0*dif, 0.2);\n        dif += 1.0 - smoothstep(0.0, 0.2, dif);\n        if (mat == PUPL) ambient = 0.1;\n    }\n    else if (mat == BULB)\n    {\n        dif = mix(pow(dif, 32.0), 3.0*dif+1.0, 0.2);\n        ambient = 0.2;\n    }\n    else if (mat == HEAD)\n    {\n        float exp = soft ? 8.0 : 2.0;\n        float smx = soft ? 0.5 : 0.99;\n        \n        vec3  n2c = normalize(camPos-p);\n        vec3  bcl = normalize(n2c + l);\n        float dnh = clamp01(dot(n, bcl));\n        float shi = shiny(0.45, dnh, bcl);\n        \n        dif = clamp01(mix(pow(dif, exp), shi, smx));\n    }\n    \n    if (mat != PUPL && mat != BULB)\n    {\n        dif *= softShadow(p, lp, 4.0);        \n    }\n    \n    vec3 hl = vec3(pow(clamp01(smoothstep(0.9,1.0,dot(n, l))), 20.0));\n    \n    return col * clamp(dif, ambient, 1.0) + hl;\n}\n\n// 00000000   0000000    0000000   \n// 000       000   000  000        \n// 000000    000   000  000  0000  \n// 000       000   000  000   000  \n// 000        0000000    0000000   \n\nvec3 fog(vec3 col, vec3 bg, float dist)\n{\n    float f = smoothstep(5.0, 9.5, dist);\n    return mix(col, bg, f);\n}\n\n// 00     00   0000000   000  000   000  \n// 000   000  000   000  000  0000  000  \n// 000000000  000000000  000  000 0 000  \n// 000 0 000  000   000  000  000  0000  \n// 000   000  000   000  000  000   000  \n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_SPACE = 32;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{   \n    bool dither = true;\n    bool camrot = texelFetch(iChannel0, ivec2(KEY_RIGHT, 2), 0).x < 0.5;\n    bool water  = texelFetch(iChannel0, ivec2(KEY_LEFT,  2), 0).x < 0.5;\n    bool space  = texelFetch(iChannel0, ivec2(KEY_SPACE, 2), 0).x < 0.5;\n         soft   = texelFetch(iChannel0, ivec2(KEY_DOWN,  2), 0).x < 0.5;\n         animat = texelFetch(iChannel0, ivec2(KEY_UP,    2), 0).x < 0.5;\n        \n    if (animat) \n    {\n        float tt = 1.0-fract(iTime*0.5);\n        aa = cos(tt*tt*PI*2.0);  \n    }\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    float md = 7.0;\n    float mx = 2.0*(iMouse.x/iResolution.x-0.5);\n    float my = 2.0*(iMouse.y/iResolution.y-0.5);\n    \n    if (iMouse.z <= 0.0 && camrot)\n    {\n        mx = iTime/16.;\n        my = -0.35*sin(iTime/8.);\n        dither = true;\n    }\n    \n    camTgt = vec3(0,-0.6,0); \n    camPos = rotAxisAngle(rotAxisAngle(vec3(0,0,md), vx, 89.0*my), vy, -180.0*mx);\n    \n    #ifndef TOY\n        if (space)\n        {\n            camTgt = iCenter;\n            camPos = iCamera;\n            camPos.x *= -1.0;\n            camTgt.x *= -1.0;\n        }\n    #endif\n    \n    camDir = normalize(camTgt-camPos);\n    \n    vec3 ww = normalize(camTgt-camPos);\n    vec3 uu = normalize(cross(ww, vec3(0,1,0)));\n    vec3 vv = normalize(cross(uu, ww));\n        \n    float ss, sc;\n    if (water) \n    {\n        ss = sin(iTime*1.5+2.0*PI*uv.x) * cos(iTime*0.5+20.0*uv.y);\n        sc = cos(iTime*0.5+2.0*PI*uv.y);\n    }\n    else\n    {\n        ss = 0.0;\n        sc = 0.0;\n    }\n    \n    uv.y+=ss*0.005; uv.x+=sc*0.01; // foreground wobble\n    \n    vec3 rd = normalize(uv.x*uu + uv.y*vv + 1.0*ww);\n\n    float d = rayMarch(camPos, rd);\n    mat = s.mat;\n    \n    uv.y+=ss*0.2; uv.x+=sc*0.4; // stronger bg wobble\n\n    vec3  p = camPos + d * rd;\n    vec3  n = getNormal(p);\n        \n    vec3 col;\n    \n    vec3 bg = vec3(.001, .001, .01) * clamp(1.0-1.0*length(uv), 0., 1.);\n    \n    if      (mat == HEAD)  col = vec3(0.23,0.23,1.0); \n    else if (mat == TAIL)  col = vec3(0.2,0.2,0.9); \n    else if (mat == PUPL)  col = vec3(0.1,0.1,0.5);\n    else if (mat == BULB)  col = vec3(1.0,1.0,1.0);\n    else if (mat == NONE)  \n    {        \n        col = bg;\n    }\n\n    col = getLight(p, n, col);\n    \n    if (mat != NONE)\n    {\n        col = fog(col, bg, d);\n    }\n    \n    if (dither)\n    {\n        float dit = gradientNoise(fragCoord.xy);\n        col += vec3(dit/10000.0);\n    }\n    \n    #ifndef TOY\n    vec2  fontSize = vec2(20.0, 35.0);  \n    float isDigit = digit(fragCoord / fontSize, iFrameRate, 2.0, 0.0);\n    col = mix( col, vec3(1.0, 1.0, 1.0), isDigit);\n    #endif\n    \n    col = pow(col, vec3(1.0/2.2));\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}