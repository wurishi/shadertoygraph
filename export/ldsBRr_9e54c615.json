{"ver":"0.1","info":{"id":"ldsBRr","date":"1494699213","viewed":640,"name":"Gear Cutting","username":"zalo","description":"Testing to see whether it's cheap to cut statelessly cut involute gears using SDF style CSG.\n\nIt's an interesting approximation, but doesn't seem to be sufficient by itself.","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["gear","shape","involute"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool Racktooth( vec2 p, vec2 b ) {\n  p = vec2(p.x, p.y+b.y);\n  b = vec2(b.x*((p.y*50.0)+1.5), b.y);\n  return p == clamp(p, -b, b);\n}\n\nbool repRackteeth( vec2 p ) {\n  vec2 c = vec2(0.04,0);\n  vec2 q = mod(p,c)-0.5*c;\n  return Racktooth(q, vec2(0.006,0.01)) || (p.y == clamp(p.y, 0., 0.01));\n}\n\nbool rotatedRack( vec2 p, float radius, float angle ) {\n  float c = cos( angle );\n  float s = sin( angle );\n  vec2 q = mat2( c, -s, s, c ) * p;\n  q = vec2(q.x - (radius*angle), q.y-radius);\n  return repRackteeth(q);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = vec2( uv.x - 0.5, (uv.y - 0.5) * (iResolution.y / iResolution.x));\n    \n    float radius = 0.095493;\n    bool rack1 = rotatedRack(uv, radius, atan(-uv.x,uv.y));\n    bool rack2 = rotatedRack(uv, radius, (iTime*0.5)*2.5);\n    bool circle = length(uv)<radius; \n    \n\tfragColor = vec4((circle && !(rack1 && circle)) || rack2);\n}","name":"Image","description":"","type":"image"}]}