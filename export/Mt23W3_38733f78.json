{"ver":"0.1","info":{"id":"Mt23W3","date":"1433218518","viewed":185,"name":"Quad Test","username":"tyleeer","description":"Draw a quad","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"vec2 pixelSpaceToUVSpace(vec2 p, vec2 resolution) {\n  vec2 uv = 2.0*p/resolution-1.0;\n  if (resolution.x > resolution.y)\n      uv[0] *= resolution.x/resolution.y;\n  else\n      uv[1] *= resolution.y/resolution.x;\n  return uv;\n}\n\nvec2 closestPointToLine(vec2 p, vec2 a, vec2 b) {\n  vec2 ap = p-a;\n  vec2 ab = b-a;\n    \n  float projectedRatio = dot(ap,ab)/dot(ab,ab);\n  float t = clamp(projectedRatio,0.0,1.0);\n  \n  return a+ab*t;\n}\n\nfloat distanceToLine(vec2 p, vec2 a, vec2 b) {\n\tvec2 p_c = closestPointToLine(p,a,b);\n    return length(p-p_c);\n}\n\nint imod(int a,int b) {\n \treturn a-b*(a/b);   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = pixelSpaceToUVSpace(fragCoord.xy,iResolution.xy);   \n    float t = iTime;\n    \n    // Quad vertices\n    const int N = 4;\n    float a = 1.0*sin(t)*sin(t);\n    float b = 0.5;\n    vec2 v[N];\n    v[0] = vec2(-a,b);\n    v[1] = vec2(a,b);\n    v[2] = vec2(a,-b);\n    v[3] = vec2(-a,-b);\n\n    // settings\n    float w = 0.01;\n    vec4 backgroundColor = vec4(0.0,0.0,0.0,1.0);\n    vec4 lineColor = vec4(1.0,1.0,1.0,1.0);\n    vec4 color = backgroundColor;\n    \n    // draw each of the 4 edges\n    float D[N];\n    vec2 C[N];\n    for (int i = 0; i < N; i++) {\n        D[i] = distanceToLine(p,v[imod(i,N)],v[imod(i+1,N)]);\n        C[i] = closestPointToLine(p,v[imod(i,N)],v[imod(i+1,N)]);\n        float e1 = 1.0-smoothstep(0.0,w,D[i]); \n        color = mix(color,lineColor,e1);\n    }\n    \n    // Merge sort the distance\n    for (int i = 0; i < N-1; i++) {\n        for (int j = 0; j < N; j++) {\n            if (j > i && D[j] < D[i]) {\n                float temp = D[i];\n                D[i] = D[j];\n                D[j] = temp;\n                \n                vec2 tempv = C[i];\n                C[i] = C[j];\n                C[j] = tempv;\n            }\n        }\n    }\n    \n    // Note there is some numerical issue here.... UV is around [0,1]x[0,1]\n    if (abs(D[0]-D[1]) < 0.01 \n        && ( abs(C[0].x-C[1].x) > 0.01 || abs(C[0].y - C[1].y) > 0.01)) {\n        color = mix(color,vec4(1.0,0.0,0.0,1.0),1.0);\n    }\n    \n    fragColor = color;\n}","name":"","description":"","type":"image"}]}