{"ver":"0.1","info":{"id":"mdcczs","date":"1695351226","viewed":39,"name":"3d deformations","username":"davidmachadosf","description":"original shader was forked from FabriceNeyret2.\nI forked it trying to make yhis 3d. Its not easy...\nNow Im just experimenting with parameters to understand the algorithm and trying to get interesting results... ;-)\n\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","distortions","dots","short","golf","loopless"],"hasliked":0,"parentid":"ms3czl","parentname":"teste fusos 3d stereo"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define r  mat2(cos( iTime +vec4(0,23,15,0)))\n\nvoid mainImage( out vec4 O, vec2 U ) {\n\n    bool esq = int(U.y)%2==0; \n\n    vec2  A;\n    vec3  R = iResolution, P;\n          U = ( U+U - R.xy ) / R.y;                                // normalize coordinates\n    float s = .05565,                                              // s+s = 2Pi/72 = 5Â° steps\n          z = 1. - dot(U,U);\n    \n    // bg color is black\n    O *= 0.; \n    //O = vec4(.5,.5,0., 0.); \n    \n    // if on sphere\n    z > 0.                                                         \n      ? \n        // 3D point on front half-sphere \n        P = vec3( U, sqrt(z) ),          \n        \n        // paralax for interleaved lines stereo monitor\n        //P.x += .001*(esq?-1.:+1.),\n        \n        P.x += .7*(esq?.1:-.1),\n        \n        // rotate on sphere\n        P.yz *= r,\n        P.xz *= r,  \n        \n        \n        \n        A = vec2( atan(length(P.xy),P.z), atan(P.x,P.y) ),        // get parameterization\n        O.g = length( ( mod( A+s, s+s ) -s) \n                       // / fwidth(A) ) * 50./R.y               \n                       //* inverse(transpose(mat2(dFdx(A),dFdy(A)))) )  * 1e2/R.y  // ( precise )\n                       //* inverse(transpose(mat2(dFdx(A),dFdy(A)))) )  * 1e2/R.y  // ( precise )\n                       * 1e4/R.y)\n      : s;\n}\n\n","name":"Image","description":"","type":"image"}]}