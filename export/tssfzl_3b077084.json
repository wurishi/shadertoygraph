{"ver":"0.1","info":{"id":"tssfzl","date":"1588959821","viewed":231,"name":"Dodecahedralis I","username":"sl2c","description":"Pattern based on the hyperbolic dodecahedron with rgiht-angled edges.  Treating six of them as mirrors produces a symmetry group isomorphic to one of the hyperbolic plane, preserving the yellow fractal curve.","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["fractal","circles","hyperbolic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright 2020 Google LLC\n// SPDX-License-Identifier: Apache-2.0\n// NOT an official Google project; see Google Open Source guidelines for more info on copyright transfer\n// written by William Cadegan-Schlieper \n\nfloat tau = 6.283185307179586;\n\nbool flip(inout vec2 z, inout float ds, in vec2 c, in float r, inout float t) {\n    z -= c;\n    bool res = (dot(z,z) < r*r) ^^ (r < 0.0);\n    if (res) {\n        ds *= r * r / dot(z,z);\n        z *= r * r / dot(z,z);\n    }\n    t = min(t, (dot(z,z)-r*r)/(2.0 * r * ds));\n    z += c;\n    return res;\n}\n\nbool inside(in vec2 z, in float ds, in vec2 c, in float r, inout float t) {\n    vec2 p = z - c;\n    float res = (dot(p,p)-r*r) / (2.0 * abs(r) * ds);\n    t = min(t, abs(res));\n    return res < 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 z = 2.0 * (fragCoord - iResolution.xy * 0.5)/iResolution.y;\n    float ds = 1.0 / iResolution.y;\n    \n    vec2[12] c; float[12] r;\n    float r1 = pow(1.5 + 0.5 * sqrt(5.0) - sqrt(1.5 * sqrt(5.0) + 2.5), 0.5);\n    r[0] = r1; c[0] = vec2(0.0);\n    float r2 = r1 * sqrt(sqrt(5.0));\n    float x2 = sqrt(r1*r1+r2*r2);\n    float r3 = r2 / ( x2 * x2 - r2 * r2);\n    float x3 = -x2 / ( x2 * x2 - r2 * r2);\n    for (int i=0; i<5; i++) {\n        float theta = tau * 0.2 * float(i);\n        vec2 eit = vec2(cos(theta), sin(theta));\n        r[i+1] = r2;\n        c[i+1] = x2 * eit;\n        r[i+6] = r3;\n        c[i+6] = x3 * eit;\n    }\n    float r4 = -1.0 / r1;\n    r[11] = r4; c[11] = vec2(0.0);\n    \n    float period = -4.0 * log(r1);\n    float d = mod(iTime * 0.2, period) - period * 0.5;\n    z *= exp(-d); ds *= exp(-d);\n    \n    bool fl = false;\n    float yellow = 0.0;\n    float t = 1.0;\n    for (int i=0; i<7; i++) {\n        fl = fl ^^ flip(z, ds, c[0], r[0], t);\n        fl = fl ^^ flip(z, ds, c[2], r[2], t);\n        fl = fl ^^ flip(z, ds, c[5], r[5], t);\n        fl = fl ^^ flip(z, ds, c[7], r[7], t);\n        fl = fl ^^ flip(z, ds, c[10], r[10], t);\n        fl = fl ^^ flip(z, ds, c[11], r[11], t);\n        yellow = max(yellow, 3.0 * ds / (-r4 - r1));\n        if (yellow > 1.0) {\n            fragColor = vec4(1.0,1.0,0.0,0.0);\n            return;\n        }\n    }\n    \n    fl = fl ^^ inside(z, ds, c[1], r[1], t);\n    fl = fl ^^ inside(z, ds, c[3], r[3], t);\n    fl = fl ^^ inside(z, ds, c[4], r[4], t);\n    fl = fl ^^ inside(z, ds, c[6], r[6], t);\n    fl = fl ^^ inside(z, ds, c[8], r[8], t);\n    fl = fl ^^ inside(z, ds, c[9], r[9], t);\n    t = (1.0 - t) * 0.5;\n    if (fl) {\n        t = 1.0 - t;\n    }\n    vec3 col = vec3(t);\n    yellow = yellow * yellow;\n    col = (1.0 - yellow) * col + yellow * vec3(1.0, 1.0, 0.0);\n    fragColor = vec4(col,1.0);\n    fragColor = pow(fragColor, vec4(1.0/2.2));\n}","name":"Image","description":"","type":"image"}]}