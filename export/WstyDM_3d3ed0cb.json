{"ver":"0.1","info":{"id":"WstyDM","date":"1601085743","viewed":117,"name":"Value noise 2D sample","username":"tomoe","description":"sample code for a lecture\nL: linear interpolation\nC: Hermite interpolation\nR: 3D (position + time)\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["bd202009"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"uint k = 0x456789abu;\nuint max32 = 0xffffffffu;\nvec2 fragCoord_;  //set as a uniform variable\nuint hash11u(uint n) {\n    n ^= (n << 24);\n    n ^= (n >> 1);\n    n ^= (n << 1);\n    return n * k;\n}\nfloat hash21(vec2 p) {\n    uint n = hash11u(uint(p.x)) + uint(p.y);\n    return float(hash11u(n)) / float(max32);\n}\nfloat vnoise21(vec2 p) {\n    vec2 i = floor(p);\n    float v00 = hash21(i);\n    float v01 = hash21(i + vec2(0.0, 1.0));\n    float v10 = hash21(i + vec2(1.0, 0.0));\n    float v11 = hash21(i + vec2(1.0, 1.0));\n    vec2 f = fract(p);\n    if (fragCoord_.x > 0.33 * iResolution.x){\n        // Hermite interpolation\n        f = f * f * (3.0 -2.0 * f); \n    }\n    return mix(mix(v00, v10, f.x), mix(v01, v11, f.x), f.y);\n}\nfloat hash31(vec3 p) {\n    uint n = hash11u(hash11u(uint(p.x)) + uint(p.y)) + uint(p.z);\n    return float(hash11u(n)) / float(max32);\n}\nfloat vnoise31(vec3 p) {\n    vec3 i = floor(p);\n    float v000 = hash31(i);\n    float v001 = hash31(i + vec3(0.0, 0.0, 1.0));\n    float v010 = hash31(i + vec3(0.0, 1.0, 0.0));\n    float v011 = hash31(i + vec3(0.0, 1.0, 1.0));\n    float v100 = hash31(i + vec3(1.0, 0.0, 0.0));\n    float v101 = hash31(i + vec3(1.0, 0.0, 1.0));\n    float v110 = hash31(i + vec3(1.0, 1.0, 0.0));\n    float v111 = hash31(i + vec3(1.0, 1.0, 1.0));\n    vec3 f = fract(p);\n    f = f * f * (3.0 - 2.0 * f); // Hermite interpolation\n    float xy0 = mix(mix(v000, v100, f.x), mix(v010, v110, f.x), f.y);\n    float xy1 = mix(mix(v001, v101, f.x), mix(v011, v111, f.x), f.y);\n    return mix(xy0, xy1, f.z);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragCoord_ = fragCoord;\n    vec2 pos = fragCoord.xy /iResolution.x;\n    pos *= 15.0;\n    pos += iTime;\n    float v;\n    if (fragCoord.x < 0.66 * iResolution.x){\n        v = vnoise21(pos);\n    } else {\n        v = vnoise31(vec3(pos, iTime));\n    }\n    fragColor = vec4(vec3(v), 1.0);\n}","name":"Image","description":"","type":"image"}]}