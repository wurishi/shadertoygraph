{"ver":"0.1","info":{"id":"4d3fzl","date":"1526283786","viewed":181,"name":"Constructive_Interference_test","username":"PGrad","description":"A small test with waves","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["waves"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 getColor(vec2 center, vec2 uv);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    \n    vec3 wave1 = getColor(vec2(.9, .5), uv);\n    vec3 wave2 = getColor(vec2(.5,.3), uv);\n    \n   \tvec3 color = clamp(\n        mix(wave1 + wave2, (wave1 * wave2 * vec3(1,0,0)), .7),\n        0., 1.);\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}\n\nvec3 getColor(vec2 center, vec2 uv)\n{\n    float r = length(uv - center);\n    \n    float s = clamp( (sin(r * 60. - iTime * 5.) + 1.) * .5, 0., 1.);\n    \n    return vec3(smoothstep(.9, 1., s));\n}","name":"Image","description":"","type":"image"}]}