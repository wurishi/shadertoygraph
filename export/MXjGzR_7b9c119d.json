{"ver":"0.1","info":{"id":"MXjGzR","date":"1708137486","viewed":45,"name":"Simple Hexagonal Grid","username":"Cellulose","description":"A hexagonal grid with pointy-top hexagons 2 units wide and sqrt(3)/1.5 units tall.\nBased on this guide by redblobgames:  https://www.redblobgames.com/grids/hexagons/#pixel-to-hex","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Special thanks to Amit Patel, Red Blob Games\n// https://www.redblobgames.com/grids/hexagons/#pixel-to-hex\n\n// Round axial hexagon coordinates to nearest hexagon center in hex grid.\nvec2 hex_round(vec2 hax)\n{\n    vec3 frac = vec3(hax, -hax.x-hax.y), qrs = round(frac), diff = abs(qrs-frac);\n    if (diff.x > max(diff.y, diff.z)) return vec2(-qrs.y-qrs.z, qrs.y);\n    else if (diff.y > diff.z)         return vec2(qrs.x, -qrs.x-qrs.z);\n    else                              return vec2(qrs.xy);\n}\n\n// We use axial coordinates scaled so inner radius = 1.\n\nconst float _r3 = sqrt(3.0), _r3d3 = _r3/3.0, _r3d6 = _r3/6.0;\nvec2 xy_to_hex(vec2 xy)    {return vec2(dot(xy, vec2(.5, -_r3d6)), xy.y*_r3d3);}\nvec2 hex_to_xy(vec2 hx)    {return vec2(dot(hx, vec2(2.0, 1.0)),   hx.y*_r3);}\n\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Square grid coordinates, so the image is 15 cells high\n    vec2 uv = 15.0 * (fragCoord/iResolution.y);\n    float px = 15.0 / iResolution.y;\n    \n    // Find the hexagon this XY position lies inside.\n    vec2 hex = hex_round(xy_to_hex(uv));\n    vec2 hex_center = hex_to_xy(vec2(hex));\n    \n    // Give the hexagons random colors and color based on offset from center\n    vec3 col = vec3(.2 + .8 * rand(.1739*vec2(hex)));\n    col.rb += .2 * normalize(uv.xy - hex_center.xy);\n    col.g += .05 - .1 * length(uv.xy - hex_center.xy);\n    \n    // Square grid.\n    vec2 grid = uv;\n    grid = abs(grid-round(grid));\n    if (min(grid.x, grid.y) < 1.5*px) col *= .75;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}