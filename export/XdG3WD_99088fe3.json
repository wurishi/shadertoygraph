{"ver":"0.1","info":{"id":"XdG3WD","date":"1454417149","viewed":381,"name":"Fast Normal VS Normal Joke(V1)","username":"834144373","description":"...","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["normal","ddx","fastnormal","normaljoke","ddy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define nearPlane 1.\n#define farPlane 20.\nfloat Far;\nvec2 mo = vec2(.0);\nfloat depth(float dd,vec3 cs_dir){\n\tvec3 Ddir =  dd*cs_dir;\n    float z_buffer = Ddir.z/farPlane;// = ((farPlane*nearPlane)/(nearPlane-farPlane))*(1./Ddir.z) + farPlane/(farPlane-nearPlane);\n    return z_buffer;\n}\nvec3 Rot(vec3 p,vec3 angles){\n    vec3 c = cos(angles);\n    vec3 s = sin(angles);\n    mat3 rotX = mat3( 1.0, 0.0, 0.0, 0.0,c.x,s.x, 0.0,-s.x, c.x);\n    mat3 rotY = mat3( c.y, 0.0,-s.y, 0.0,1.0,0.0, s.y, 0.0, c.y);\n    mat3 rotZ = mat3( c.z, s.z, 0.0,-s.z,c.z,0.0, 0.0, 0.0, 1.0);\n    return p*rotX * rotY * rotZ;\n}\nfloat sphere(vec3 p,float r){\n\treturn length(p)-r;\n}\nfloat box(vec3 p,vec3 b){\n\treturn length(max(abs(p)-b,0.));\n}\nfloat obj(vec3 p){\n\treturn min(box(p-vec3(0,-1.2,0.),vec3(1.4,.5,1.3)),sphere(p,1.));\n}\nfloat dis(vec3 pos,vec3 dir){\n    float dd = 1.,d = 0.;\n    for(int i=0;i<64;++i){\n    \td = obj(pos+dir*dd);\n    \tdd += d;\n        if(d<mo.y*0.02)break;\n    }\n    return dd;\n}\nvec3 Fast_Normal(vec3 C) {\n\treturn normalize(cross(dFdy(C), dFdx(C)));\n}\nvec3 Normal(vec3 P){\n\tvec2 f = vec2(0.01,0.);\n    vec3 nDir = vec3(\n    \tobj(P+f.xyy),\n        obj(P+f.yxy),\n        obj(P+f.yyx)\n    )-obj(P);\n    return normalize(nDir);\n}\n#define time iTime\nvoid mainImage( out lowp vec4 o,in vec2 u)\n{\n    o -= o;\n\tvec2 uv = (u+u-iResolution.xy)/iResolution.y;\n    \tfloat x = u.x/iResolution.x-0.5;\n    mo = texture(iChannel0,u/iResolution.xy).xy;\n    \tmo.y = iMouse.y/iResolution.y *0.7;\n    //camera pos\n    vec3 campos = vec3(0,1.3,-4.);\n    //camerea direction\n    vec3 dir = normalize(vec3(uv,2.));\n    vec3 dir2 = Rot(dir,vec3(-0.4,time*0.,0));\n    Far = 30.;//length(vec3(uv,farPlane));\n    float dd = dis(campos,dir2);\n    //get the point depth\n    float dd2 = dir.z*dd;\n    if(dd2 < farPlane){\n    \to = vec4(0.,.3,0.4,0);\n        if(x<-0.0013+mo.x){\n            //screen space\n        \to.rgb = Fast_Normal(campos + dd*dir);\n        }\n        else if(x>0.0013+mo.x){\n            vec3 pointPos = campos + dd*dir2;\n            if(pointPos.x > 2.*sin(time/2.-1.5)){\n                //normal joke\n                o.rgb = Normal(campos + dd2*dir);\n            }\n            else{\n                //normal\n                o.rgb = Normal(pointPos);\n            }\n        }\n    }\n    else{\n        if(x>-0.0013+mo.x && x<0.0013+mo.x){\n        \to.rg += 1.;\n        }\n    \to.rgb += 1.-length(uv)/2.5;\n        o.rgb *= vec3(0.6,0.7,0.58)*1.7;\n        o.rgb = pow(o.rgb,vec3(1./2.2))/2.6;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 o, in vec2 u )\n{\n    o = texture(iChannel0,u/iResolution.xy);\n    // x = Range(-1.,+1.);\n    // -1. < buffer < +1.\n    if(iMouse.z >0.)\n    \to.x = iMouse.x/iResolution.x - 0.5;\n}","name":"Buf A","description":"","type":"buffer"}]}