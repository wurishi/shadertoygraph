{"ver":"0.1","info":{"id":"DtVfR3","date":"1702331392","viewed":54,"name":"orthogonal circles flower sdf 2x","username":"jt","description":"Two iterations of [/url=https://www.shadertoy.com/view/clGBzm]orthogonal circles flower sdf 2[/url].\nALMOST exact: still error on boundary from base to first iteration.","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["sdf","flower","circle","distance","conformal","iteration","disk","loopless","iterated","orthogonal"],"hasliked":0,"parentid":"clGBzm","parentname":"orthogonal circles flower sdf 2"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/DtVfR3 orthogonal circles flower sdf 2x, 2023 jt\n// two iterations of https://www.shadertoy.com/view/clGBzm orthogonal circles flower sdf 2\n// based on https://www.shadertoy.com/view/dldBWl orthogonal circles flower sdf\n// exact sdf for shape related to https://www.shadertoy.com/view/cltfW2 orthogonal circles flower\n// SDF exactness using https://www.shadertoy.com/view/DdX3WH Interior Distance Detect Errors\n\n// Two iterations of https://www.shadertoy.com/view/clGBzm]orthogonal circles flower sdf 2\n// ALMOST exact: still error on boundary from base to first iteration.\n\n// tags: sdf, flower, circle, distance, conformal, disk, loopless, orthogonal\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\n// Construction of the radius formula:\n// The leafs of the flower-shape are circle-arcs\n// inside the unit-circle originating at (0,-1).\n// Each circle-arc is tangential to the y axis.\n// wxmaxima:\n// circle:(x-x_0)^2+(y-y_0)^2=r^2; /* the leafs of the flower are circles */\n// origin:(0-x_0)^2+(-1-y_0)^2=r^2; /* the origin is at (0,-1) */\n// tangent:x_0=r; /* circles are tangent to y axis (orthogonal to unit circle) */\n// solve([circle, origin, tangent],[x_0,y_0,r]);\n// [[x_0=(y^2+2*y+x^2+1)/(2*x),y_0=-1,r=(y^2+2*y+x^2+1)/(2*x)]]\nfloat ortho_circle_flower_sdf(float n, vec2 p) // https://www.shadertoy.com/view/clGBzm orthogonal circles flower sdf 2 (jt)\n{\n    float slice = pi/n;\n\n    p.x = abs(p.x); // mirror horizontally\n    float r = (p.y*p.y+2.0*p.y+p.x*p.x+1.0)/(2.0*p.x); // calculate radius of circular arc leaf passing through this point\n\n    // equidistant circle segment endpoints on unit circle\n    float r0 = tan(floor(atan(r)/slice)*slice); // to angle then quantize then to length\n    float r1 = tan( ceil(atan(r)/slice)*slice); // to angle then quantize then to length\n\n    // circle center\n    vec2 c0 = vec2(r0,-1); // lower leaf\n    vec2 c1 = vec2(r1,-1); // upper leaf\n\n    // endpoints\n    float mu = atan(p.x,p.y);\n    mu = (floor(mu/slice/2.0)+0.5)*slice*2.0;\n    vec2 c = vec2(sin(mu),cos(mu));\n\n    return\n        //length(p) < 1.0; // approximate\n        dot(p, c) < 1.0 // thanks to tdhooper for fixing remaining discontinuities by changing length(p) < 1.0 to dot(p, c) < 1.0 (turns circle into polygon)\n        ?\n        min(abs(length(p-c0)-r0),abs(length(p-c1)-r1)) // circular arc leafs\n        :\n        length(p-c); // leaf endpoints\n}\n\nfloat ortho_circle_flower_sdf_iterated(vec2 p)\n{\n    float n = 11.0; // must be odd integer\n\n    float l = length(p);\n    if(l < 1.0)\n        return ortho_circle_flower_sdf(n, p);\n\n    p = -p;\n    float slice = 2.0*pi/n;\n    float mu = atan(p.x,p.y); // angle\n    float mu0 = floor(mu/slice)*slice; // quantize\n    float mu1 =  ceil(mu/slice)*slice; // quantize\n\n    vec2 p0 = mat2(cos(mu0),sin(mu0),-sin(mu0),cos(mu0))*p;\n    vec2 p1 = mat2(cos(mu1),sin(mu1),-sin(mu1),cos(mu1))*p;\n    float s = 0.5;\n    p0.y-=1.0+s;\n    p1.y-=1.0+s;\n\n    return\n        min\n        (\n            ortho_circle_flower_sdf(n,p0/s)*s,\n            ortho_circle_flower_sdf(n,p1/s)*s\n        );\n}\n\n#define map ortho_circle_flower_sdf_iterated\n\n#define EPSILON 0.001\n\n// part of sdf error detection (jt/spalmer)\nvec2 gradient(vec2 p) // NOT normalized so we can use it's length to detect errors in the SDF.\n{\n    vec2 h = vec2(EPSILON,0);\n    return (vec2(map(p+h.xy) - map(p-h.xy),\n                 map(p+h.yx) - map(p-h.yx)))/EPSILON/2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 p = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\np*=2.0;\nm*=2.0;\n    float d = map(p);\n\n    // iq's coloring\n    vec3 col = (d<0.0) ? vec3(0.6,0.8,1.0) : vec3(0.9,0.6,0.3);\n    col *= 1.0 - exp(-9.0*abs(d));\n    col *= 1.0 + 0.2*cos(128.0*abs(d));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    // iq's mouse distance visualization\n    if( iMouse.z>0.001 )\n    {\n        d = map(m);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n    // sdf error detection (jt/spalmer)\n    {\n        // Jump the distance given by the SDF at the current position\n        // along the gradient given by the SDF at the current position\n        // (direction to the nearest surface) and evaluate the SDF there.\n        // Because the SDF is supposed to describe the minimal distance to the surface,\n        // the result should be (close to) zero. (translation from math to words: jt)\n        float error = map(p - gradient(p) * map(p)); // SDF error detection suggested to me by spalmer - thanks!\n        //col += smoothstep(0.0,sqrt(EPSILON), abs(error)) * (cos(iTime*2.0*pi)*0.5+0.5); // detect both interior and exterior errors (NOTE: false alarms on some shapes)\n        col.r += smoothstep(0.0,/*sqrt*/(EPSILON), max(0.0,+error)) * (cos(iTime*2.0*pi)*0.5+0.5); // detect both interior and exterior errors (NOTE: false alarms on some shapes)\n        col.g += smoothstep(0.0,/*sqrt*/(EPSILON), max(0.0,-error)) * (cos(iTime*2.0*pi)*0.5+0.5); // detect both interior and exterior errors (NOTE: false alarms on some shapes)\n    }\n\n    // output\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}