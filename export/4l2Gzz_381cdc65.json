{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define STEPS 32\n#define PRECISION 0.01\n#define DEPTH 10.0\n//#define CROSSEYE\n\nvec3 eye = vec3(0,0,-2.5);\nvec2 uv; bool hit = false;\n\nfloat lines, dots, lineWidth = 0.001;\nfloat t;\nfloat s;\n\t\t\n// iq's magic distance function\nfloat line(vec3 p,vec3 a,vec3 b){vec3 pa=p-a,ba=b-a;float h=clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);return length(pa-ba*h)-lineWidth;}\n\n// Rotation\nmat3 rotZ(float a){float s=sin(a);float c=cos(a);return mat3(c,-s,0,s,c,0,0,0,1);}\nmat3 rotX(float a){float s=sin(a);float c=cos(a);return mat3(1,0,0,0,c,s,0,-s,c);}\nmat3 rotY(float a){float s=sin(a);float c=cos(a);return mat3(c,0,-s,0,1,0,s,0,c);}\n\n// Marching\nfloat scene(vec3);\nvec3 march(vec3 ro,vec3 rd){float t=0.0,d;hit=false;for(int i=0;i<STEPS;i++){d=scene(ro+rd*t);if(d<PRECISION){hit=true;break;}if(t>DEPTH){break;}t+=d;}return(ro+rd*t);}\nvec3 lookAt(vec3 o,vec3 t,vec2 p){vec2 uv=(2.0*p-iResolution.xy)/iResolution.xx;vec3 d=normalize(t-o),u=vec3(0,1,0),r=cross(u,d);return(normalize(r*uv.x+cross(d,r)*uv.y+d));}\n\n// Vertices\nconst vec3 lbf = vec3(-0.5,-0.5,-0.5);\nconst vec3 rbf = vec3( 0.5,-0.5,-0.5);\nconst vec3 lbb = vec3(-0.5,-0.5, 0.5);\nconst vec3 rbb = vec3( 0.5,-0.5, 0.5);\n\nconst vec3 ltf = vec3(-0.5, 0.5,-0.5);\nconst vec3 rtf = vec3( 0.5, 0.5,-0.5);\nconst vec3 ltb = vec3(-0.5, 0.5, 0.5);\nconst vec3 rtb = vec3( 0.5, 0.5, 0.5);\n\nvec3 lbfi;\nvec3 rbfi;\nvec3 lbbi;\nvec3 rbbi;\n\nvec3 ltfi;\nvec3 rtfi;\nvec3 ltbi;\nvec3 rtbi;\n\nvec3 lbf_lbfi;\nvec3 ltf_ltfi;\nvec3 lbb_lbbi;\nvec3 ltb_ltbi;\n\nvec3 rbb_lbb;\nvec3 rbf_lbf;\nvec3 rtf_ltf;\nvec3 rtb_ltb;\n\nvec3 lbfi_rbfi;\nvec3 lbbi_rbbi;\nvec3 ltfi_rtfi;\nvec3 ltbi_rtbi;\n\nvec3 rbbi_rbb;\nvec3 rbfi_rbf;\nvec3 rtfi_rtf;\nvec3 rtbi_rtb;\n\nfloat scene(vec3 p)\n{\n    #ifdef CROSSEYE\n    dots = length(p-vec3(0,1.1,0))-0.05;\n\tp *= rotX(iTime)*rotZ(0.785*iTime);\n    #else\n    p *= rotX(0.785);\n    dots = 1e10;\n    #endif\n    \n    lines = 1e10;\n\n\t// outside\n\tlines = min(lines,line(p,lbf_lbfi,rbf_lbf));\n\tlines = min(lines,line(p,lbb_lbbi,rbb_lbb));\n\tlines = min(lines,line(p,ltf_ltfi,rtf_ltf));\n\tlines = min(lines,line(p,ltb_ltbi,rtb_ltb));\n\n\tlines = min(lines,line(p,lbf_lbfi,lbb_lbbi));\n\tlines = min(lines,line(p,ltf_ltfi,ltb_ltbi));\n\tlines = min(lines,line(p,lbf_lbfi,ltf_ltfi));\n\tlines = min(lines,line(p,lbb_lbbi,ltb_ltbi));\n\n\tlines = min(lines,line(p,rbf_lbf,rbb_lbb));\n\tlines = min(lines,line(p,rtf_ltf,rtb_ltb));\n\tlines = min(lines,line(p,rbf_lbf,rtf_ltf));\n\tlines = min(lines,line(p,rbb_lbb,rtb_ltb));\n\n    // inside\n\tlines = min(lines,line(p,lbfi_rbfi,lbbi_rbbi));\n\tlines = min(lines,line(p,ltfi_rtfi,ltbi_rtbi));\n\tlines = min(lines,line(p,lbfi_rbfi,ltfi_rtfi));\n\tlines = min(lines,line(p,lbbi_rbbi,ltbi_rtbi));\n\n\tlines = min(lines,line(p,lbbi_rbbi,rbbi_rbb));\n\tlines = min(lines,line(p,lbfi_rbfi,rbfi_rbf));\n\tlines = min(lines,line(p,ltfi_rtfi,rtfi_rtf));\n\tlines = min(lines,line(p,ltbi_rtbi,rtbi_rtb));\n\n\tlines = min(lines,line(p,rbfi_rbf,rtfi_rtf));\n\tlines = min(lines,line(p,rbbi_rbb,rtbi_rtb));\n\tlines = min(lines,line(p,rbfi_rbf,rbbi_rbb));\n\tlines = min(lines,line(p,rtfi_rtf,rtbi_rtb));\n\n    // connections\n\tlines = min(lines,line(p,rtbi_rtb,rtb_ltb));\n\tlines = min(lines,line(p,rbfi_rbf,rbf_lbf));\n\tlines = min(lines,line(p,rbbi_rbb,rbb_lbb));\n\tlines = min(lines,line(p,rtfi_rtf,rtf_ltf));\n\t\n\tlines = min(lines,line(p,ltfi_rtfi,ltf_ltfi));\n\tlines = min(lines,line(p,ltbi_rtbi,ltb_ltbi));\n\tlines = min(lines,line(p,lbfi_rbfi,lbf_lbfi));\n\tlines = min(lines,line(p,lbbi_rbbi,lbb_lbbi));\n\t\n\treturn min(lines, dots);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n t = mod(iTime,1.0);\n s = (sin(iTime*0.5)+1.0)/2.0*0.15+0.15;\n \n lbfi = vec3(-0.5+s,-0.5+s,-0.5+s);\n rbfi = vec3( 0.5-s,-0.5+s,-0.5+s);\n lbbi = vec3(-0.5+s,-0.5+s, 0.5-s);\n rbbi = vec3( 0.5-s,-0.5+s, 0.5-s);\n\n ltfi = vec3(-0.5+s, 0.5-s,-0.5+s);\n rtfi = vec3( 0.5-s, 0.5-s,-0.5+s);\n ltbi = vec3(-0.5+s, 0.5-s, 0.5-s);\n rtbi = vec3( 0.5-s, 0.5-s, 0.5-s);\n\n lbf_lbfi = mix(lbf,lbfi,t);\n ltf_ltfi = mix(ltf,ltfi,t);\n lbb_lbbi = mix(lbb,lbbi,t);\n ltb_ltbi = mix(ltb,ltbi,t);\n\n rbb_lbb = mix(rbb,lbb,t);\n rbf_lbf = mix(rbf,lbf,t);\n rtf_ltf = mix(rtf,ltf,t);\n rtb_ltb = mix(rtb,ltb,t);\n\n lbfi_rbfi = mix(lbfi,rbfi,t);\n lbbi_rbbi = mix(lbbi,rbbi,t);\n ltfi_rtfi = mix(ltfi,rtfi,t);\n ltbi_rtbi = mix(ltbi,rtbi,t);\n\n rbbi_rbb = mix(rbbi,rbb,t);\n rbfi_rbf = mix(rbfi,rbf,t);\n rtfi_rtf = mix(rtfi,rtf,t);\n rtbi_rtb = mix(rtbi,rtb,t);\n\n\tuv = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.xx;\n    \n    eye *= rotX(iMouse[0]/100.0)*rotZ(iMouse[1]/100.);\n    vec3 p = march(eye,lookAt(eye,vec3(0),fragCoord));\n    \n\tvec3 col = vec3(1,1,1);\n\t\n\tif (hit == false) { col = vec3(0.0, 0.0, 0.0); }\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4l2Gzz","date":"1426663508","viewed":306,"name":"Hypercube2","username":"aki","description":"Forked from elias 4slSzs","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["tesseract","hypercube"],"hasliked":0,"parentid":"","parentname":""}}