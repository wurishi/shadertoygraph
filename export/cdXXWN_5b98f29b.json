{"ver":"0.1","info":{"id":"cdXXWN","date":"1668864036","viewed":350,"name":"Simple voxel raytracer V1","username":"NikZapp","description":"Volume of voxels with densities and colors being raytraced (no reflections, just stepping the ray).\nTODO: optimize voxel traversal and implement octree loading.","likes":7,"published":3,"flags":0,"usePreview":1,"tags":["simple","ray","voxel","raytrace","trace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float screenDist = 1.0;\nfloat rayLength = 0.001;\nfloat screenSize = 1.5;\n\nint ITER = 1000;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy) * 2.0 - vec2(1.0);\n    uv.x /= iResolution.y / iResolution.x;\n    vec3 camera_pos = (vec3(sin(iTime), cos(iTime), -3.0) * 0.1) + vec3(0.5, 0.5, 0.0);\n    vec3 ray_pos = camera_pos;\n    \n    vec3 ray_step = normalize(vec3(uv * screenSize, screenDist)) * rayLength;\n\n    vec4 color = vec4(0.0);\n    \n    for (int i = 0; i < ITER; i++) {\n        ray_pos += ray_step;\n        vec4 voxel = texture(iChannel0, ray_pos);\n        \n        // (optional) Making dense voxels more clumped \n        voxel += texture(iChannel0, ray_pos / 2.0);\n        voxel += texture(iChannel0, ray_pos / 4.0);\n        voxel += texture(iChannel0, ray_pos / 8.0);\n        voxel *= 0.25;\n        \n        // (optional) Making density more different\n        voxel.a = smoothstep(0.0, 1.0, pow(voxel.a, 10.0));\n        \n        // Compute absolute density\n        voxel.a = mix(voxel.a, 1.0, color.a) - color.a; \n        \n        // Applying color\n        color.rgb += voxel.rgb * voxel.a;\n        color.a += voxel.a;\n    }\n    \n    fragColor = color;\n    \n}","name":"Image","description":"","type":"image"}]}