{"ver":"0.1","info":{"id":"43l3Rj","date":"1707920483","viewed":35,"name":"Scottish Tartan Patterns","username":"Gfscalco","description":"An attempt at creating a Scottish Tartan Pattern.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\nfloat border_mask(in float border_width, in vec2 st, in vec2 pos, in vec2 size){\n    vec2 bl = vec2(0);\n    vec2 tr = vec2(0);\n\tfloat n_border_width = 1.0 - border_width;\n    bl = floor(st+n_border_width*(1.0-pos));\n    tr = 1.0 - ceil(st-n_border_width*(pos+size));\n\n    vec2 black_border =  bl*tr;\n    \n    float pct = black_border.x * black_border.y;\n    return pct;\n}\n\n//function that creates a box\nfloat box(in vec2 _st, in vec2 _size){\n    _size = vec2(0.5) - _size*0.5;\n    vec2 uv = smoothstep(_size,\n                        _size+vec2(0.001),\n                        _st);\n    uv *= smoothstep(_size,\n                    _size+vec2(0.001),\n                    vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\n//function that creates a cross\nfloat cross_shape(in vec2 _st, float _size){\n    return  box(_st, vec2(_size,_size/4.)) +\n            box(_st, vec2(_size/4.,_size));\n}\n\n\nvec2 rotate2D(vec2 _st, float _angle){\n    _st -= 0.5;\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    _st += 0.5;\n    return _st;\n}\n\nvec2 tile(vec2 _st, float _zoom){\n    _st *= _zoom;\n    return fract(_st);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 st = fragCoord/iResolution.xy;\n    //rotates the whole image\n    st = rotate2D(st,PI*0.15);\n    \n    vec2 st_layer_1 = st;\n\tvec2 st_layer_2 = st;\n    vec2 st_layer_3 = st;\n    \n    // Divide the space in 4\n    st_layer_1 = tile(st_layer_1,2.0);\n    st_layer_2 = tile(st_layer_2,2.0);\n    st_layer_3 = tile(st_layer_3,40.0);\n\n\n    // Use a matrix to rotate the space 45 degrees\n    st_layer_1 = rotate2D(st_layer_1,PI*0.25);\n    st_layer_2 = rotate2D(st_layer_2,PI*0.5);\n    st_layer_3 = rotate2D(st_layer_3,PI*0.1);\n    \n    float cross_1 = box(st_layer_1, vec2(1.5,0.03)) + box(st_layer_1, vec2(0.01,1.5));\n    float box_1 = box(st_layer_2-vec2(0.0,0.0), vec2(1.5,0.04)) + box(st_layer_2-vec2(0.0,0.15), vec2(1.5,0.04)) + box(st_layer_2-vec2(0.0,0.3), vec2(1.5,0.04));\n    float box_2 = box(st_layer_3-vec2(0.0,0.0), vec2(0.5,0.2));\n    float box_3 = box(st_layer_1-vec2(0.0,0.0), vec2(0.71,0.71));\n    vec3 color1 = vec3(1.0,0.0,0.0);\n    vec3 color3 = vec3(0.5,0.5,0.5);\n    vec4 background_color = vec4(0.2,0.2,0.3,1.0);\n    \n    vec4 color = vec4((1.0-cross_1 )*box_3*color3 + color1*cross_1 + vec3((box_3)*box_1*(box_2) + box_1*0.3) + box_2*(1.0-box_3) + 0.2*box_2*box_3,1.0);\n    float background_mask = 1.0-(cross_1+box_1+box_2+box_3);\n    // Output to screen\n    fragColor = vec4(clamp(background_mask*background_color,0.0,1.0)) + color;\n}","name":"Image","description":"","type":"image"}]}