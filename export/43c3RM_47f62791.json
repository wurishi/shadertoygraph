{"ver":"0.1","info":{"id":"43c3RM","date":"1716269080","viewed":39,"name":"2d sdf wobble","username":"letbonsaibe","description":"2d sdf wobble ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","wobble"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define iColor vec3(.5, 0., 0.)\n#define oColor vec3(.0, .5, 0.)\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle( in vec2 p, in vec2 c, in float r) {\n    return distance(p, c) - r;\n}\n\n\nfloat cirlceAndBox(in vec2 p) {\n    return min(sdBox(p, vec2(.5, 0.4)), sdCircle(p, vec2(0.2), 0.5));\n}\n\n\nvec2 wobble(vec2 p, float frequency, float amount)\n{\n    vec2 wobble = sin(p.yx * frequency) * amount;\n    return p + wobble;\n}\n\nfloat wobble2(vec2 p, float frequency, float amount)\n{\n    return sin(iTime*frequency + p.x * 2.0+p.y )*amount;\n}\n\nvec2 twist(in vec2 p){\n    float k =0.5 * sin(iTime); // or some other amount\n    float c = cos(k*p.x);\n    float s = sin(k*p.x);\n    mat2  m = mat2(c,-s,s,c);\n    vec2 q = m*p;\n    return vec2(q.x, p.y);\n}\n\n\n\n// shameless stolen from https://www.ronja-tutorials.com/post/034-2d-sdf-basics/\nvoid paintSdf(inout vec3 color, float dist, float  lineDistance, float lineThinkness, float subLineThinkness, float subLineCount) {\n    float distanceChange = fwidth(dist) * .5; // anti aliasing\n\n    float majorLineDistance = abs(fract(dist / lineDistance + 0.5) - 0.5) * lineDistance;\n    float majorLines = smoothstep(lineThinkness - distanceChange, lineThinkness + distanceChange, majorLineDistance);\n    float distanceBetweenSubLines = lineDistance / subLineCount;\n    float subLineDistance = abs(fract(dist / distanceBetweenSubLines + 0.5) - 0.5) * distanceBetweenSubLines;\n    float subLines = smoothstep(subLineThinkness - distanceChange, subLineThinkness + distanceChange, subLineDistance);\n    color *= majorLines;\n    color *= subLines;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    \n    // wobble1\n    float dist = sdBox(wobble(uv, 4.*sin(iTime), .2*sin(iTime+1.7)), vec2(0.5));\n    \n    // wobble2\n    dist = cirlceAndBox(uv);\n    dist += wobble2(uv, 4.0, 0.035);\n    \n    // twist\n    dist += cirlceAndBox(twist(uv));\n    //dist = cirlceAndBox(twist(uv));\n\n    \n    vec3 color = mix(iColor, oColor, step(0., dist));\n    paintSdf(color, dist, 0.5, 0.02, 0.005, 3.0);\n\n  \n  \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}