{"ver":"0.1","info":{"id":"tlsSRs","date":"1566212757","viewed":3041,"name":"Data Moshing Effect","username":"slerpy","description":"This is the effect used in the 4k intro [url=https://www.pouet.net/prod.php?which=82612]Glitch Rider[/url]","likes":80,"published":1,"flags":32,"usePreview":0,"tags":["demo","attempt","data","mashing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // fetch buffer a\n    ivec2 u = ivec2(fragCoord);\n    vec4 tex = texelFetch(iChannel0, u, 0);\n    \n    // fetch buffer b\n    if(iFrame % 8 != 0  && tex.w > 0.)u = ivec2(tex.xy);\n    fragColor = texelFetch(iChannel1, u, 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"mat2 rot(float a)\n{\n    float s=sin(a),c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat map(vec3 p)\n{\n    vec3 q = abs(fract(p)-.5);\n    q = min(q,q.zxy);\n    return max(max(q.x, q.y), q.z) - 0.1;\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    float m, t=0.1;\n    for(int i=0; i++<400;)\n        if(t+=m=map(ro+rd*t), m<0.01||t>16.)\n            break;\n    \n\treturn t;\n}\n\nmat3 camera(float t, out vec3 ro)\n{\n    // placeholder animation\n    float p = 4., mt = mod(t, p);\n    t = (t - mt) + p*smoothstep(.0, p, mt);\n    vec3 dir = vec3(cos(floor(iTime/p)),sin(floor(iTime/p)),.8);\n    ro=vec3(0.1*sin(t),0.1*cos(1.2*t),0.2*t);\n    \n    // rotation matrix for rd\n    vec3 cw=normalize(dir);\n    vec3 cu=normalize(cross(vec3(0,1,0),cw));\n    vec3 cv=normalize(cross(cw,cu));\n    return mat3(cu,cv,cw);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 u = ivec2(fragCoord);\n    vec4 last = texelFetch(iChannel0, u, 0);\n    \n    // reset after color override\n    if(last.w < .0)\n    {\n        fragColor = vec4(fragCoord, 0, iTime);\n        return;\n    }\n    \n    // main trace \n    vec3 ro, rd = camera(iTime, ro) * normalize(vec3(2.*fragCoord-iResolution.xy, iResolution.y));\n    \n    float t = trace(ro, rd);\n    vec3 p = ro + rd * t;\n    \n    // occlusion trace\n    float pt = last.w;\n    mat3 m = camera(pt, ro);\n    \n    vec3 od = ro - p;\n    float odl = length(od);\n    bool occ = trace(p, od/odl)-odl < .01;\n    \n    // back projection\n    vec2 coord = 0.5 * (od *= m, od.xy / od.z * iResolution.y + iResolution.xy);\n    \n    // out of range check\n    occ = occ || floor(coord/iResolution.xy) != vec2(0);\n    \n    // far plane check\n    if(t > 16.)occ = false;\n    \n    // occlusion check\n    if(occ || iFrame < 3)\n    {\n        vec4 rv = vec4(round(24.*p), 1);\n        for(int i=0; i<8; i++)\n            rv = fract(1e4*sin(rv)+ rv.wxyz);\n        \n        fragColor = vec4(rv.xyz, -1);\n        return;\n    }\n    \n    // output coord\n    if(iFrame % 8 == 0)pt = iTime;\n    fragColor = vec4(coord, 0, pt);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // fetch buffer a\n    ivec2 u = ivec2(fragCoord);\n    vec4 tex = texelFetch(iChannel0, u, 0);\n    \n    // manual color override\n    if(tex.w < .0)\n    {\n        fragColor = tex;\n        return;\n    }\n    \n    // fetch buffer b\n    if(iFrame % 8 == 0)u = ivec2(tex.xy);\n    fragColor = texelFetch(iChannel1, u, 0);\n}","name":"Buffer B","description":"","type":"buffer"}]}