{"ver":"0.1","info":{"id":"4t2cRt","date":"1509781213","viewed":184,"name":"Simple Ordered Dithering","username":"reallycoolguy","description":"A very basic implementation of ordered dithering","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["transparency","dither","the","dithering","alpha","to","ordered","max","sick","nasty","tubular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// References used:\n//\n// https://en.wikipedia.org/wiki/Ordered_dithering\n// http://alex-charlton.com/posts/Dithering_on_the_GPU/\n\n\n// note: scale_factor and opacity would be uniforms in a real application\n\n\n\n// Threshold Map for Ordered Dithering\nconst int map_len = 4;\nconst float map_scalar = 16.0;\nconst float map[map_len*map_len] = float[](\n    0.0/map_scalar, 8.0/map_scalar, 2.0/map_scalar, 10.0/map_scalar,\n    12.0/map_scalar, 4.0/map_scalar, 14.0/map_scalar, 6.0/map_scalar,\n    3.0/map_scalar, 11.0/map_scalar, 1.0/map_scalar, 9.0/map_scalar,\n    15.0/map_scalar, 7.0/map_scalar, 13.0/map_scalar, 5.0/map_scalar);\n\n\n// Adjust the size of the dithering pattern. Larger scale_factor = larger pattern\n// Mostly used to see effect up close. Alternatively, use positive non-integers to\n// botch the threshold map and get some screwy looking patterns. \nconst float scale_factor = 2.0;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float dither_value;\n    float opacity = float( int(iTime*3.0) % 11 ) / 10.0; // step through opacities by 0.1 \n    \n    \n    // Determine map threshold index using location of current pixel\n    int i = (int(fragCoord.x / scale_factor)) % map_len;\n    int j = (int(fragCoord.y / scale_factor)) % map_len;\n    \n    \n    // Compare map threshold value with desired opacity to determine alpha value\n    // Normally this is the quantization step, but our only values are 0 and 1 so it's trivial\n    if (map[i + j*map_len] < opacity) {\n        dither_value = 0.0;\n    }\n    else\n    {\n        dither_value = 1.0;\n    }\n    \n    fragColor = vec4(0.3*dither_value, 0.7*dither_value, 0.5*dither_value,1.0);\n}","name":"Image","description":"","type":"image"}]}