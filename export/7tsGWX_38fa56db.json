{"ver":"0.1","info":{"id":"7tsGWX","date":"1623019964","viewed":186,"name":"Refraction & Reflection - Andrew","username":"andrew741","description":"Ray marching with refraction, reflection, and specular reflection. The code is much lengthier then it should be because i was to lazy to put some things into functions.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","reflection","refraction","light","specularreflection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","previewfilepath":"/media/ap/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PERSITION 0.005\n#define MAX_DST 30.\n#define STEPS 175.\n\n\nstruct SpecularLight\n{\n    float highlight;\n    float diffuse;\n};\n\n\nSpecularLight Specular(float smoothness, vec3 normal, vec3 rd, vec3 sun_dir)\n{\n    float specularAngle = acos(dot(normalize(sun_dir - rd), normal));\n    float specularExponent = specularAngle / (1. - smoothness);\n    float specularHighlight = exp(-specularExponent * specularExponent);\n    float diffseLighting = clamp(dot(normal, sun_dir), 0., 1.);\n    return SpecularLight(specularHighlight, diffseLighting);\n}\n\n\n// from https://www.shadertoy.com/view/WtGXDD\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// from https://www.shadertoy.com/view/WtGXDD\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\nvec3 text(vec3 dir)\n{\n    vec4 t1 = texture(iChannel0, dir);\n    vec4 t2 = texture(iChannel1, dir);\n    vec3 col = t1.rgb + t2.rgb * 0.8;\n    //float col_brightness = pow((col.r + col.g + col.b) / 3., 1.);\n    //col = mix(col, vec3(0.4, 0.4, dir.y * 0.5 + 0.5), col_brightness);\n    //col = vec3(col_brightness);\n    return col;\n}\n\n\nstruct Ray\n{\n    vec3 rd;\n    vec3 ro;\n    vec3 cp;\n    vec3 cn;\n    vec4 col;\n    bool collided;\n    float closest;\n};\n\n\n// from https://www.shadertoy.com/view/WtGXDD\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\nfloat GetDst(vec3 p)\n{\n    float dst1 = sdBox(p - vec3(0., 0., 0.), vec3(1.));\n    float dst2 = p.y + 1.;\n    float dst3 = length(p - vec3(0., 2.5, 0.)) - 1.;\n    float dst4 = sdBox(p - vec3(0., 0., -2.), vec3(2., 1., 1.));\n    float dst5 = sdBox(p - vec3(3., 0., 0.), vec3(1., 2., 2.));\n    \n    return min(min(min(min(dst1, dst2), dst3), dst4), dst5);\n}\n\n\nvec4 GetCol(vec3 p)\n{\n    float dst1 = sdBox(p - vec3(0., 0., 0.), vec3(1.));\n    float dst2 = p.y + 1.;\n    float dst3 = length(p - vec3(0., 2.5, 0.)) - 1.;\n    float dst4 = sdBox(p - vec3(0., 0., -2.), vec3(2., 1., 1.));\n    float dst5 = sdBox(p - vec3(3., 0., 0.), vec3(1., 2., 2.));\n    \n    float dst = min(min(min(min(dst1, dst2), dst3), dst4), dst5);\n    \n    if (dst == dst1) return vec4(0.8, 0.8, 0.8, 0.);\n    else if (dst == dst2) return vec4(0.2, 0.8, 0.2, 1.);\n    else if (dst == dst3) return vec4(0.8, 0.8, 0.2, 2.);\n    else if (dst == dst4) return vec4(0.8, 0.2, 0.8, 3.);\n    else if (dst == dst5) return vec4(0.2, 0.8, 0.8, 4.);\n    \n    return vec4(0., 0., 0., -1.);\n}\n\n\nvec3 GetNorm(vec3 p)\n{\n\tfloat d = GetDst(p);\n    vec2 e = vec2(0.01, 0);\n    \n    vec3 normal = d - vec3(\n        GetDst(p - e.xyy),\n        GetDst(p - e.yxy),\n        GetDst(p - e.yyx));\n    \n    return normalize(normal);\n}\n\n\nRay MarchRay(vec3 rd, vec3 ro, float mult)\n{\n    vec3 p = ro;\n    float dfo = 0.;\n    bool collided = false;\n    float closest = 9999999.;\n    \n    for (float s = 0.; s < STEPS; s++)\n    {\n        float dst = GetDst(p) * mult;\n        p += rd * dst;\n        dfo += dst;\n        \n        closest = min(closest, dst);\n        \n        if (dst < PERSITION)\n        {\n            collided = true;\n            break;\n        }\n        else if (dfo > MAX_DST) break;\n    }\n    vec4 color = GetCol(p);\n    vec3 normal = GetNorm(p) * mult;\n    Ray ray = Ray(rd, ro, p, normal, color, collided, closest);\n    return ray;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    vec2 m = iMouse.xy / iResolution.xy * vec2(1., 0.62);\n    \n    float t = iTime * 2.;\n    vec3 sun_dir = normalize(vec3(sin(t), 1., cos(t)));\n    \n    // from https://www.shadertoy.com/view/WtGXDD (getting ro and rd)\n    vec3 ro = vec3(0, 4, -4);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n\n    vec3 col = text(rd).rgb;\n    \n    Ray ray = MarchRay(rd, ro, 1.);\n    if (ray.collided)\n    {\n        float highlight = 0.;\n        vec3 nd = rd;\n        float extraLight = 1.;\n        if (ray.col.a == 0.)\n        {\n            extraLight = dot(ray.cn, sun_dir) * 0.25 + 1.;\n            nd = reflect(rd, ray.cn);\n            highlight += Specular(1.15, ray.cn, rd, sun_dir).highlight;\n            ray = MarchRay(nd, ray.cp + nd * PERSITION * 4., 1.);\n            highlight += Specular(1.15, ray.cn, ray.rd, sun_dir).highlight;\n            col = ray.collided ? col : col = text(nd).rgb * extraLight + highlight;\n            if (ray.col.a == 2.)\n            {\n                float refractivness = 1.35;\n                nd = refract(rd, ray.cn, 1. / refractivness);\n                Ray nRay = MarchRay(nd, ray.cp + nd * PERSITION * 12., -1.);\n                nd = refract(nRay.rd, nRay.cn, refractivness);\n                if (dot(nd, nd) != 0.)\n                {\n                    nRay = MarchRay(nd, nRay.cp + nd * PERSITION * 12., 1.);\n                    ray = nRay;\n                    highlight += Specular(1.15, ray.cn, ray.rd, sun_dir).highlight;\n                }\n                else\n                {\n                    col = text(nRay.rd).rgb + highlight;\n                }\n            }\n        }\n        else if (ray.col.a == 2.)\n        {\n            float refractivness = 1.15;\n            nd = refract(rd, ray.cn, 1. / refractivness);\n            Ray nRay = MarchRay(nd, ray.cp - ray.cn * PERSITION * 3., -1.);\n            nd = refract(nRay.rd, nRay.cn, refractivness);\n            if (dot(nd, nd) != 0.)\n            {\n                nRay = MarchRay(nd, nRay.cp - nRay.cn * PERSITION * 3., 1.);\n                ray = nRay;\n                highlight += Specular(1.35, ray.cn, ray.rd, sun_dir).highlight;\n                if (ray.col.a == 0.)\n                {\n                    nd = reflect(rd, ray.cn);\n                    highlight += Specular(1.15, ray.cn, rd, sun_dir).highlight;\n                    ray = MarchRay(nd, ray.cp + nd * PERSITION * 4., 1.);\n                    highlight += Specular(1.15, ray.cn, ray.rd, sun_dir).highlight;\n                    col = ray.collided ? col : col = text(nd).rgb * extraLight + highlight;\n                    if (ray.col.a == 2.)\n                    {\n                        float refractivness = 1.15;\n                        nd = refract(rd, ray.cn, 1. / refractivness);\n                        Ray nRay = MarchRay(nd, ray.cp + nd * PERSITION * 12., -1.);\n                        nd = refract(nRay.rd, nRay.cn, refractivness);\n                        if (dot(nd, nd) != 0.)\n                        {\n                            nRay = MarchRay(nd, nRay.cp + nd * PERSITION * 12., 1.);\n                            ray = nRay;\n                            highlight += Specular(1.15, ray.cn, ray.rd, sun_dir).highlight;\n                        }\n                        else\n                        {\n                            col = text(nRay.rd).rgb + highlight;\n                        }\n                    }\n                }\n                else\n                {\n                    col = text(nRay.rd).rgb + highlight;\n                }\n            }\n            else\n            {\n                col = text(nRay.rd).rgb + highlight;\n            }\n        }\n        else\n        {\n            highlight += Specular(1.15, ray.cn, rd, sun_dir).highlight;\n        }\n        \n        if (ray.collided)\n        {\n            Ray lightRay = MarchRay(sun_dir, ray.cp + ray.cn * PERSITION * 2., 1.);\n            float shadow = lightRay.collided ? 0.2 : 1.;\n            \n            float light = dot(ray.cn, sun_dir)*0.5+0.5;// * 0.25 + 1.;\n            \n            if (lightRay.col.a == 2.)\n            {\n                float refractivness = 1.35;\n                nd = refract(lightRay.rd, lightRay.cn, 1. / refractivness);\n                Ray nRay = MarchRay(nd, lightRay.cp - lightRay.cn * PERSITION * 4., -1.);\n                nd = refract(nRay.rd, nRay.cn, refractivness);\n                if (dot(nd, nd) != 0.)\n                {\n                    nRay = MarchRay(nd, nRay.cp + nd * PERSITION * 4., 1.);\n                    Ray r = MarchRay(sun_dir, nRay.cp + nRay.cn * PERSITION * 4., 1.);\n                    shadow = r.collided ? 0.2 : 1.;\n                }\n                else\n                {\n                    shadow = 1.;\n                }\n            }\n            \n            //shadow = light < 1.1 ? 0.2 : shadow;\n            \n            col = ray.col.rgb * 1.2 * light * shadow * extraLight + highlight * floor(shadow);\n        }\n    }\n    \n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}