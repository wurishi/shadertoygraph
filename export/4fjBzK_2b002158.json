{"ver":"0.1","info":{"id":"4fjBzK","date":"1725206994","viewed":35,"name":"Fractal Visions","username":"SirShart","description":"Fractal vibes","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["psychedelicfractalillusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define t   iTime\n#define PI  3.1415926535897932384626\n#define TAU (2. * PI)\n#define PHI 1.6180339887498948482045\n#define EPSILON 0.01\n\n#define pos(x) ((x) * .5 + .5)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n#define sat(x) clamp(x, 0., 1.)\n\nvec3 cos_palette(vec3 a, vec3 b, vec3 c, vec3 d, float x) {\n  return a + b * cos(TAU * (c * x + d));\n}\n\nvec3 rainbow(float x) {\n  return cos_palette(vec3(.5), vec3(.5), vec3(1.), vec3(0., .33, .66), x);\n}\n\nfloat hash11(float seed) {\n  return fract(sin(seed * 123.456) * 123.456);\n}\n\nfloat _seed;\nfloat rand(void) {\n  return hash11(_seed++);\n}\n\nfloat one_periodic(float x) {\n  return sin(TAU * x);\n}\n\n// Function to create a kaleidoscopic effect\nvec2 kaleidoscope(vec2 uv, float segments) {\n    float angle = atan(uv.y, uv.x);\n    float radius = length(uv);\n    angle = mod(angle, TAU / segments);\n    angle = abs(angle - TAU / segments / 2.);\n    return vec2(cos(angle), sin(angle)) * radius;\n}\n\n// Fractal noise function\nfloat fractal(vec2 uv) {\n    float s = 1.0;\n    float d = 0.0;\n    for (int i = 0; i < 5; i++) {\n        d += abs(sin(uv.x * s + t) * cos(uv.y * s + t)) / s;\n        s *= 2.0;\n        uv *= 1.5;\n    }\n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y;\n    _seed = t + texture(iChannel0, uv).x;\n    \n    // Apply kaleidoscopic transformation\n    uv = kaleidoscope(uv, 6.0);\n\n    // Fractal-like background pattern\n    float pattern = fractal(uv * 5.0);\n\n    // Color based on fractal pattern\n    vec3 color = rainbow(pattern * 2.0 + t * 0.1);\n\n    // Adding some distortion and motion\n    uv *= 12.0;\n    vec2 id = floor(uv);\n    uv = mod(uv, 1.0) - 0.5;\n    float wave = sin(dot(id, vec2(1.0)) + t) * 0.5 + 0.5;\n\n    // Mix colors with a pattern-based factor\n    color = mix(color, rainbow(wave + pattern), 0.5 * sin(t * 2.0 + wave));\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}