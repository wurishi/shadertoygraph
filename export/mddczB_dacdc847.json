{"ver":"0.1","info":{"id":"mddczB","date":"1695381733","viewed":21,"name":"bosseye","username":"suttree","description":"x.x","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["prototype"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\nvec3 palette( in float t )\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(2.0, 1.0, 1.0);\n    vec3 d = vec3(0.50, 0.20, 0.25);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 normalizedCoord = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    //uv *= Rot(.25*iTime);\n    //uv *=.25;\n    uv *= fract(Hash21(vec2(20., 10.)));\n    \n    vec2 gv = fract(uv)-.5;\n    \n    float t = iTime*.025;\n    gv *= Rot(t);\n    \n    float d = length(uv) + 1.5-length(uv); // change colour and pattern\n    vec3 col = palette(d);\n \n    // add more effects\n    //float m = smoothstep(.7, .9, 1.-d);\n    //col += m;\n    \n    float test = fract(gv.y*gv.x);\n    col *= sin(test);\n    \n    // Make stars\n    //float rays = 1.*cos(abs(gv.x * gv.y*200.));\n    //float rays = 1.+abs(gv.x * gv.y*200.);\n    //float rays = 1.-abs(gv.x * gv.y*200.);\n    float rays = 1.-fract(gv.x * gv.y*500.);\n    col += rays;\n    \n    float angle = iTime * 0.31479;\n    for (float i = 0.; i < 24.; i += 1.) {\n        normalizedCoord = abs(normalizedCoord);\n        normalizedCoord -= 1.5;\n        normalizedCoord *= 0.5;\n        normalizedCoord *= mat2(\n            cos(angle), -sin(angle),\n            .75*sin(angle), cos(angle)\n        );\n        normalizedCoord *= Rot(cos(iTime));\n    }\n    \n    col *= vec3(\n            length(normalizedCoord) * fract(Hash21(gv)),\n            length(normalizedCoord + vec2(0.1, 0.9)),\n            length(normalizedCoord - fract(Hash21(uv))\n           )\n    );\n    \n    vec2 id = floor(uv);\n    for(int y=-1;y<1;y++) {\n        for(int x=-1;x<1;x++) {\n            vec2 offs = vec2(x, y);\n            float n = Hash21(id+offs);\n            //col *= cos(iTime*3.+n*6.2831)*.5+1.;\n        }\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}