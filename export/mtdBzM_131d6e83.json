{"ver":"0.1","info":{"id":"mtdBzM","date":"1701733148","viewed":14,"name":"100816723 - Blur Shader","username":"St0ven_","description":"A basic blur shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv = (uv - 0.5) * 2.0;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    uv *= 5.0;\n\n    float kernelSize = 0.3;\n    \n    vec3 col;\n    \n    float color = step(distance(uv, vec2(0.0, 0.0)), 1.0);\n    \n    \n    float finalColor = 0.0;  \n    \n    for(float i = -kernelSize; i <= kernelSize; i += 0.1 * kernelSize){\n        for(float j = -kernelSize; j <= kernelSize; j += 0.1 * kernelSize){\n            vec2 currUV = uv.xy - vec2(i, j);\n            \n            finalColor += step(distance(currUV, vec2(0.0, 0.0)), 1.0);\n        }\n    }\n    \n    finalColor /= 400.0;\n    \n    col.y = finalColor;\n    //col.x = color;\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}