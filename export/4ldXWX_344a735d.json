{"ver":"0.1","info":{"id":"4ldXWX","date":"1481850748","viewed":121,"name":"Shader Night - Texture","username":"inantop","description":"Shader night","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //Textures are image data that is taken as input into the shader. Below, you will see 4 \"channels\" for textures.\n    //All texture coordinates range from (0, 0) in the bottom left to (1.0, 1.0) in the top right.\n    //UV contains our normalized coordinates going from (0, 0) in the bottom left of the output to (1.0, 1.0) in the top right.\n    \n    //Therefore - let's grab the texture pixels.\n    fragColor = texture(iChannel0, uv);\n    \n    //texture takes a channel parameter and a texture coordinate parameter.\n    //If the texture coordinates provided to this function are outside the 0..1 range, the texture wrap rules apply.\n    //Try clicking the gear on iChannel1 to change its wrapping and filtering options.\n}","name":"Image","description":"","type":"image"}]}