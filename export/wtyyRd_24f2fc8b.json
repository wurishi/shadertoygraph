{"ver":"0.1","info":{"id":"wtyyRd","date":"1611673858","viewed":104,"name":"ray_marching_practice_1","username":"changwenhan","description":"first try at ray marching!\nfolding space to make infinite objects is just mind blowing\n\ncan't wait to learn more knowledge of ray marching and making more cool stuff!\n\nbased on this tutorial of The Art of Code:\nhttps://www.youtube.com/watch?v=PGtv-dBi2wE","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\n#define pi 3.14159265359\n#define twoPi 6.28318530718\n\nfloat rand(vec3 p) {\n    p = fract(p * vec3(321.456, 876.789, 432.976));\n    p += dot(p, p+32.56);\n    return fract(p.x*p.y*p.z);\n}\n\n//from kynd https://thebookofshaders.com/edit.php?log=160414040804\nfloat smoothen(float d1, float d2, float k) {\n    return -log(exp(-k * d1) + exp(-k * d2)) / k;\n}\n\n//from iq https://www.shadertoy.com/view/Xds3zN\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat GetDist(vec3 p) {\n    vec3 id = floor(p);\n    p = fract(p);\n    \n    float radius = .1;\n    vec4 sp = vec4(.5,.5,.5, radius);\n    float spDist = length(p-sp.xyz) - sp.w;\n    \n    vec4 sp2 = vec4(sin(iTime*2.+rand(id.yzy)*123.3)*.5,.5,.5, .03);\n    vec4 sp3 = vec4(1.+sin(iTime*2.+rand(id.yzy)*123.3)*.5,.5,.5, .03);\n    \n    float spDist2 = length(p-sp2.xyz) - sp2.w;\n    float spDist3 = length(p-sp3.xyz) - sp3.w;\n    \n    float totalDist = smoothen(spDist, min(spDist2, spDist3), 25.);\n    \n    return totalDist;\n    \n    \n    float line1 = sdCapsule( p, vec3(-1.,.5,.5), vec3(1.,.5,.5), .01 );\n    float line2 = sdCapsule( p, vec3(.5,-1.,.5), vec3(.5,1.,.5), .01 );\n    float line3 = sdCapsule( p, vec3(.5,.5,-1.), vec3(.5,.5,1.), .01 );\n    \n    float l = min(line1, min(line2, line3));\n \n    totalDist = smoothen(totalDist, l, 25.);\n    \n    \n    return totalDist;\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.; //dist from origin\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO; // ray\n        float dS = GetDist(p);\n        dO += dS;\n        \n        if(dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    \n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p, vec3 lO) {\n    vec3 l = normalize(lO-p); //light vector\n    vec3 n = GetNormal(p); //normal vector\n    \n    float dif = clamp(dot(l,n), 0., 1.);\n    \n    //shadow\n    //float distToLight = RayMarch(p+n*SURF_DIST*2., l);\n    //if(distToLight<length(lO-p)) dif *= .5;\n    \n    return dif;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(.0);\n    \n    vec3 ro = vec3(0., .7, 0.); //camera origin\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.)); //camera direction\n    \n    ro += vec3(.3, .3, 2.1) * iTime * .5;\n\n    //panorama projection for recording 360 video\n    //from starea https://www.shadertoy.com/view/Ms2yDK\n    //vec2 sph = fragCoord.xy / iResolution.xy * vec2(twoPi, pi);\n    //rd = vec3(sin(sph.y) * sin(sph.x), cos(sph.y), sin(sph.y) * cos(sph.x)); \n    \n    float the = iTime * 0.15;\n    mat2 rotate = mat2(cos(the), -sin(the), sin(the), cos(the));\n    \n    rd.xz *= rotate;\n    rd.yx *= rotate;\n \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d; //ray\n    \n    float dif = GetLight(p, ro);\n    \n    vec3 c1 = vec3(.1,.1,.1) * 4.;\n    vec3 c2 = vec3(.9,.9,.9);\n    \n    col = mix(c1, c2, dif);\n    \n    float far = 30.; \n    col *= smoothstep(far, 0., d); //fade out by distance\n    col = mix(col, vec3(0.161,0.161,0.161), d/far);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}