{"ver":"0.1","info":{"id":"X3KGWd","date":"1718415858","viewed":21,"name":"simple fisheye shader","username":"nextrix","description":"idk","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fisheye"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define iM iMouse\n#define R iResolution\n\n#define aspect R.x/R.y\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/R.xy - 0.5 ;\n    \n\n    // Time varying pixel color\n    \n    uv.x *= aspect;\n    \n    //uv = mix(uv, vec2(0.), mix(-1., 1.,iMouse.y/iResolution.y));\n    \n    float amnt = (iM.x/R.x > 0.5) ? mix(-1.,1.,iM.x/R.x) :  pow(dot(.5-iM.x/R.x, -2.5-(.5-iM.x/R.x)),1.);\n    \n    if (iM.z < 1.)\n        amnt = 0.;\n    \n    uv /= abs(mix(1., length(uv*2.5), amnt));\n      \n    uv.x /= aspect;\n    \n    uv+= 0.5;\n    \n    vec3 col = texture(iChannel0, fract(uv)).rgb;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}