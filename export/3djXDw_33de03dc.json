{"ver":"0.1","info":{"id":"3djXDw","date":"1554040749","viewed":86,"name":"ZicNoiceMoves","username":"Jonas44444444","description":"My first noise test.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","abstract","art"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define WEIGHT (3.0 / iResolution.x)\nconst vec3 RED = vec3(1.0,0.0,0.0);\nconst vec3 GREEN = vec3(0.0,1.0,0.0);\nconst vec3 BLUE = vec3(0.0,0.8,1.0);\nconst vec3 WHITE = vec3(1.0,1.0,0.97);\nconst vec3 YELLOW = vec3(1.0,1.0,0.0);\nconst vec3 COLOR = vec3(1.0,1.0,1.0);\n\nconst float NOICESCALE = 1.0;\nconst float PI = 3.1415926535897932384626433832795;\nconst float MAXSIZE = 0.5;\nconst float RINGOFSET = 0.1;\nconst float WIDTH = 0.0003;\nconst float SPEED = 0.5;\nconst int NROFRINGS = 4;\nconst float NROFPOINTS = 20.0;\n\n    // noice\n\nlowp vec4 permute(in lowp vec4 x){return mod(x*x*34.+x,289.);}\nlowp float snoise(in mediump vec3 v){\n  const lowp vec2 C = vec2(0.16666666666,0.33333333333);\n  const lowp vec4 D = vec4(0,.5,1,2);\n  lowp vec3 i  = floor(C.y*(v.x+v.y+v.z) + v);\n  lowp vec3 x0 = C.x*(i.x+i.y+i.z) + (v - i);\n  lowp vec3 g = step(x0.yzx, x0);\n  lowp vec3 l = (1. - g).zxy;\n  lowp vec3 i1 = min( g, l );\n  lowp vec3 i2 = max( g, l );\n  lowp vec3 x1 = x0 - i1 + C.x;\n  lowp vec3 x2 = x0 - i2 + C.y;\n  lowp vec3 x3 = x0 - D.yyy;\n  i = mod(i,289.);\n  lowp vec4 p = permute( permute( permute(\n\t  i.z + vec4(0., i1.z, i2.z, 1.))\n\t+ i.y + vec4(0., i1.y, i2.y, 1.))\n\t+ i.x + vec4(0., i1.x, i2.x, 1.));\n  lowp vec3 ns = .142857142857 * D.wyz - D.xzx;\n  lowp vec4 j = -49. * floor(p * ns.z * ns.z) + p;\n  lowp vec4 x_ = floor(j * ns.z);\n  lowp vec4 x = x_ * ns.x + ns.yyyy;\n  lowp vec4 y = floor(j - 7. * x_ ) * ns.x + ns.yyyy;\n  lowp vec4 h = 1. - abs(x) - abs(y);\n  lowp vec4 b0 = vec4( x.xy, y.xy );\n  lowp vec4 b1 = vec4( x.zw, y.zw );\n  lowp vec4 sh = -step(h, vec4(0));\n  lowp vec4 a0 = b0.xzyw + (floor(b0)*2.+ 1.).xzyw*sh.xxyy;\n  lowp vec4 a1 = b1.xzyw + (floor(b1)*2.+ 1.).xzyw*sh.zzww;\n  lowp vec3 p0 = vec3(a0.xy,h.x);\n  lowp vec3 p1 = vec3(a0.zw,h.y);\n  lowp vec3 p2 = vec3(a1.xy,h.z);\n  lowp vec3 p3 = vec3(a1.zw,h.w);\n  lowp vec4 norm = inversesqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  lowp vec4 m = max(.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.);\n  return .5 + 12. * dot( m * m * m, vec4( dot(p0,x0), dot(p1,x1),dot(p2,x2), dot(p3,x3) ) );\n}\nfloat line(vec2 p, vec2 p0, vec2 p1, float w) {\n    vec2 d = p1 - p0;\n    float t = clamp(dot(d,p-p0) / dot(d,d), 0.0,1.0);\n    vec2 proj = p0 + d * t;\n    float dist = length(p - proj);\n    dist = 1.0/dist*WEIGHT*w;\n    return min(dist*dist,1.0);\n}\nvec3 mix3(vec3 a, vec3 b, vec3 c, float t) {\n    if(t>0.5) return mix(b,c,t*2.0-1.0);\n    else return mix(a,b,t*2.0);\n}\nvec3 fragment(vec3 p) {\n    float t = sin(p.x*0.8+iTime*0.5)*0.5+0.5;\n    float fog = min(pow(p.z,3.0)*400.0,1.0);\n    return mix3(RED,GREEN,BLUE,t) * fog;\n}    \nvec2 getAnglePoint(float angle,float size)\n{\n    float x = sin(angle)*size;\n    float y = cos(angle)*size;\n    vec2 noiceVal = vec2(x*NOICESCALE/iResolution.x,y*NOICESCALE/iResolution.y);\n    float noise = snoise(vec3(noiceVal,iTime*SPEED));\n    return vec2(iResolution.x*0.5,iResolution.y*0.5)+vec2(x,y)+vec2(x,y)*noise;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float iColor = 0.0;\n\n\n    // draw circle\n    float stapsize = PI*2.0/NROFPOINTS;\n    \n    float size;\n    float ringOff;\n    float width = WIDTH *iResolution.x*iResolution.y;\n    if(iResolution.y<iResolution.x)\n    {\n        size  = MAXSIZE*iResolution.y*0.5;\n        ringOff = RINGOFSET*iResolution.y*0.5;\n    }else\n    {\n        size  = MAXSIZE*iResolution.x*0.5;\n        ringOff = RINGOFSET*iResolution.x*0.5;\n    }\n    for(int i = 0; i < NROFRINGS; i++) {\n        vec2 prefpoint = getAnglePoint(0.0,size) ;\n\t\tvec2 startPoint = prefpoint;\n        \n        for(float i = 0.0; i < PI*2.0-stapsize/2.0; i+=stapsize) {\n        \tvec2 point = getAnglePoint(i+stapsize,size);\n        \tiColor+=line(fragCoord,prefpoint,point,width);\n       \t \tprefpoint=point;\n        }\n        \n        size-=ringOff;\n    }\n   \n\tvec3 col = COLOR*iColor;\n\tfragColor = vec4(fragment(col),1.0);\n}","name":"Image","description":"","type":"image"}]}