{"ver":"0.1","info":{"id":"ftsGz8","date":"1622834853","viewed":109,"name":" Recursion in non-euclidean spac","username":"Haper","description":"Scene in scene in scene in scene in scene in scene in...(one eternity later) ... in scene","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","fractal","recursion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.   \n float SURF_DIST =.01;\nfloat fck=1.0;\n\nfloat smin(float a,float b,float k)\n{\n     float h=clamp(0.5+0.5*(b-a)/k,.0,.1);\n     return mix(b,a,h)-k*h*(1.-h);\n}\nfloat sphere(vec4 s,vec3 p)\n{\n   return length(p-s.xyz)-s.w;\n}\nfloat box(vec3 p, vec3 s)\n{\n   return length(max(abs(p)-s,0.));\n}\nfloat GetDist(vec3 p)\n{\n\nvec4 s=vec4(6,2,8,2);\nvec3 b=vec3(-3,1.,8);\nfloat bd=box(p-b,vec3(1.));\nfloat sl=sphere(s,p);\nfloat l = min(sl,p.y);\nl=min(l,bd);\n//l=sl;\nreturn l;\n}\nfloat RayLight(vec3 ro,vec3 rd)\n{\n    float dO=0.0;\n    for(int i=0; i<MAX_STEPS; i++)\n    {\n        vec3 p=ro+rd*dO;\n        float ds=GetDist(p);\n        dO+=ds;\n        if(MAX_DIST<dO || ds<SURF_DIST)\n        break;\n    }\n    return dO;\n}\nvec4 RayMarch(vec3 ro,vec3 rd,vec3 p)\n{\n    float dO=0.0;\n    int k=0;\n    int i;\n    for(i=0; i<MAX_STEPS; i++)\n    {\n        float ds=GetDist(p);\n        float fds=ds;\n        float mindist=2.0,maxdist=15.0;\n        fds=min(fds, length(p)-mindist);\n        fds=min(fds, maxdist-length(p));\n        //dO+=fds*pow(maxdist/mindist,float(k));\n        dO+=fds;\n        p+=fds*rd;\n        if(length(p)-mindist<=SURF_DIST)\n        {\n            p=normalize(p)*(maxdist-SURF_DIST*1.2);\n            k--;\n            \n        }\n        if(length(p)>=maxdist-SURF_DIST)\n        {\n            p=normalize(p)*(mindist+SURF_DIST*1.2);\n            k++;\n            fck-=0.3;\n        }\n\n        \n        if(MAX_DIST<dO || k>2 || k<-3)\n        {\n        fck=0.0;\n        break;\n        }\n\n        if(MAX_DIST<dO || ds<=SURF_DIST)\n        break;\n    }\n\n    return vec4(p,dO);\n}\nvec3 GetNormal(vec3 p)\n{\n    float d = GetDist(p);\n    vec2 e = vec2(.01,0);\n\n    vec3 n = d-vec3(\n       GetDist(p-e.xyy),\n       GetDist(p-e.yxy),\n       GetDist(p-e.yyx));\n     \n     return normalize(n);\n}\nfloat GetLight(vec3 p)\n{\n    vec3 pos = vec3(5.*sin(iTime),5,-6.*cos(iTime)+6.);\n    vec3 l=vec3(1.,2.,-1.);\n    l = normalize(l);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n,l),0.,1.);\n    float d=RayLight(p+n*SURF_DIST*1.2,l);\n    if(d<MAX_DIST)\n    dif=0.0;\n    //dif=1.;\n    return dif;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.0);\n    vec4 data = texture( iChannel0, uv);\n    \n    \n    vec3 ro = vec3(0.,2.,-6.0);\n    ro=data.xyz;\n    \n    vec3 rd = normalize(vec3(uv.xy,1.0));\n\n    //ro*=pow(0.5,iTime);\n    \n    vec4 p=RayMarch(ro,rd,ro);\n    float d = p.w;\n    d/=8.;\n    d=max(1.0,d);\n    \n    float dif = GetLight(p.xyz);\n    //dif=1.0;\n    col=vec3(dif)/d*fck;\n    col.b=max(col.b,1.2-fck);\n    \n    \n    fragColor = vec4(col,1.0); \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    if(iFrame==0)\n    fragColor = vec4(vec3(0.,2.,-6.0),1.0);\n    else if(length(texture( iChannel0, uv).xyz)<=2.0)\n    fragColor = normalize(texture( iChannel0, uv))*15.;\n    else\n    fragColor = texture( iChannel0, uv)*pow(0.99,iTimeDelta*60.);\n}","name":"Buffer A","description":"","type":"buffer"}]}