{"ver":"0.1","info":{"id":"wtcXWn","date":"1580720075","viewed":314,"name":"cheap box blur ","username":"weepy","description":"cheapish blur using the GPU to downsample. Takes only 1 lookup to do a LOD type downsample and then however many you need to smooth out the linear interpolation. In this case it's using 26 lookups per pixel in total;","likes":3,"published":1,"flags":34,"usePreview":0,"tags":["boxblurcheap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define luma(rgb) dot(rgb, vec3(0.2125, 0.7154, 0.0721))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n//    vec3 col = texture(iChannel0, uv/PX).rgb;\n    \n    vec2 px = 1./iResolution.xy;\n    \n\t\n    float size = 2.; // 3 \n    float amount = 0.;\n    vec3 col = vec3(0.);\n    \n    for(float i=-size;i<=size;i++) {\n        for(float j=-size;j<=size;j++) {\n            float s = 1.;//sqrt(i*i+j*j)/size;\n\t\t    col += s * texture(iChannel0, uv/PX(iTime) + px*vec2(i,j)).rgb;         \n            amount += s;\n        }\n        \n    }\n    \n    \n    \n\tcol /= amount;\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nfloat PX(float t) { \n    return 30. * ( sin(t*6.)+1.) + 1.; \n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n     vec2 uv = fragCoord/iResolution.xy;\n\n    \n    vec3 acc = vec3(0.);\n    float count = 0.;\n    \n    float pixelSize = PX(iTime);\n  \t  \n    vec2 numPixels = vec2(iResolution.x/pixelSize, iResolution.y/pixelSize);\n    vec2 iuv = fragCoord / numPixels  ;\n    \n    if(iuv.x >= 1. || iuv.y >= 1.) discard;    \n    \n    for(float i = 0.0; i<pixelSize;i+=1.) {\n        for(float j = 0.0; j<pixelSize;j+=1.) {\n            acc +=  texture(iChannel0, iuv + vec2(i,j)/numPixels/pixelSize).xyz;\n            count += 1.;\n        }\n     }\n\t\n\n\tvec3 tex = acc / count;\n\n    fragColor = vec4(tex,1.0);\n    \n}\n","name":"Buffer A","description":"","type":"buffer"}]}