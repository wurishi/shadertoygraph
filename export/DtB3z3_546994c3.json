{"ver":"0.1","info":{"id":"DtB3z3","date":"1673579463","viewed":59,"name":"Circle tangential to ellipse","username":"HalbFettKaese","description":"Repositions a circle on the line segment between its original position and the center of an ellipse such that it traverses the shortest distance while still remaining entirely inside the ellipse.\n\nThis is only an approximation but looks very accurate.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["eye","circle","approximation","ellipse","tangent"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SHOW_LASER_EYES false\n\nfloat ellipticDist(vec2 uv, float a, float b) {\n    return sqrt(uv.x*uv.x / (a*a) + uv.y*uv.y / (b*b));\n}\n\nfloat ellipse(vec2 uv, float a, float b) {\n    return smoothstep(1.01, 1., ellipticDist(uv, a, b));\n}\n\nfloat stepDistance(vec2 uv, float a, float b) {\n    float d = ellipticDist(uv, a, b);\n    if (d < 1.) return 0.0; // Don't move the circle if it's already inside the ellipse\n    return length(uv) * (1. - 1./d);\n}\n\nfloat line(vec2 uv, vec2 dir) {\n    float lineDist = abs(dot(uv, normalize(dir.yx) * vec2(1.0, -1.0)));\n    return smoothstep(0.02, 0.01, lineDist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = 2.;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy * 0.5)/iResolution.yy * zoom;\n    vec2 M = (iMouse.xy - iResolution.xy * 0.5)/iResolution.yy * zoom;\n    float a = 0.5;\n    float b = 0.25;\n    float r = 0.1;\n    float margin = 0.025;\n    vec2 circle;\n    if (length(M) == 0.0)\n        circle = vec2(0);\n    else {\n        //M = normalize(M) * ellipticDist(M, a, b) * b;\n\n        circle = M - normalize(M) * (stepDistance(M, a-r, b-r));\n    }\n    \n    float v = 0.1+0.9*ellipse(uv, a, b);\n    float w = ellipse(uv - circle, r, r);\n    v = mix(v, 0.0, w);\n    \n    vec3 col = vec3(v);\n    if (SHOW_LASER_EYES)\n    col.r = line(uv, M);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}