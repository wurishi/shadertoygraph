{"ver":"0.1","info":{"id":"ltccRr","date":"1531253931","viewed":136,"name":"Sound experimenters","username":"Veggiebob","description":"Experimenting with sound","likes":3,"published":1,"flags":40,"usePreview":0,"tags":["sound","wave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sinWave (float v) {\n    return sin(v)*0.5+0.5;\n}\nfloat squareWave (float v) {\n    return floor(mod(v, 2.));\n}\nfloat triangleWave (float v) {\n    return abs(mod(v, 2.)-1.);\n}\nfloat fractalTriangleWave (float v) {\n    float val = 0.;\n    float iters = 5.;\n    float m = 1.*(1.-pow(0.5, iters))/(1.-0.5);\n    for(float i = 0.; i<iters; i++){\n        val+=triangleWave(v*pow(2., i))*pow(0.5, i);\n    }\n    return min(val/m, 1.);\n}\nfloat modWave (float v) {\n    return mod(v*0.5, 1.);\n}\nfloat softWave (float v) {\n    return pow(0.5*(sin(v)+1.), 4.);\n}\nfloat fractalSinWave (float v) {\n    float val = 0.;\n    float iters = 3.;\n    float m = 1.*(1.-pow(0.5, iters))/(1.-0.5);\n    for(float i = 0.; i<iters; i++){\n        val+=sinWave(v*pow(2., i)+pow(0.5, i))*pow(0.5, i);\n    }\n    return min(val/m, 1.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rgb;//0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\tfloat y = fractalTriangleWave(uv.x*6.+iTime);//texture(iChannel1, vec2(0., 0.)).r;\n    col+=smoothstep(5./abs(uv.y-y), 0., 50.);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(min(iMouse.z, 1.));\n    vec3 past = max(texture(iChannel0, uv).rgb-0.001, 0.);\n    col = max(past, col);\n    col = max(col, 0.);\n    fragColor = vec4(col, 1.);\n}\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float sinWave (float v) {\n    return sin(v)*0.5+0.5;\n}\nfloat squareWave (float v) {\n    return floor(mod(v, 2.));\n}\nfloat triangleWave (float v) {\n    return abs(mod(v, 2.)-1.);\n}\nfloat fractalTriangleWave (float v) {\n    float val = 0.;\n    float iters = 5.;\n    float m = 1.*(1.-pow(0.5, iters))/(1.-0.5);\n    for(float i = 0.; i<iters; i++){\n        val+=triangleWave(v*pow(2., i))*pow(0.5, i);\n    }\n    return min(val/m, 1.);\n}\nfloat modWave (float v) {\n    return mod(v*0.1, 1.);\n}\nfloat softWave (float v) {\n    return pow(0.5*(sin(v)+1.), 4.);\n}\nfloat fractalSinWave (float v) {\n    float val = 0.;\n    float iters = 3.;\n    float m = 1.*(1.-pow(0.5, iters))/(1.-0.5);\n    for(float i = 0.; i<iters; i++){\n        val+=sinWave(v*pow(2., i)+pow(0.5, i))*pow(0.5, i);\n    }\n    return min(val/m, 1.);\n}\nvec2 mainSound( in int samp, float time )\n{\n    // A 440 Hz wave that attenuates quickly overt time\n    float on = texture(iChannel0, vec2(0.5)).r;\n    float fade = exp(-3.0*(time-time*on));\n    float pitch = fractalTriangleWave(time*440.*14.);\n    return vec2(fade*pitch);\n}","name":"Sound","description":"","type":"sound"}]}