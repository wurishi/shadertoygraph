{"ver":"0.1","info":{"id":"MdGyzR","date":"1520780484","viewed":186,"name":"Brick Special 1","username":"WQS33","description":"2d tiles , no anti-aliasing\ninspiration: https://www.textures.com/download/floorscheckerboard0042/97583","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","tile","bricks"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define sqrt2 1.41421356\n\nvoid rectTile(inout vec2 uv, in float VertiDiv){\n    vec2 size = vec2(1.0) / vec2(VertiDiv * iResolution.x / iResolution.y, VertiDiv);\n    vec2 index = floor(uv / size);\n    uv = fract(uv / size);\n}\n\nvoid specialBrick(in vec2 uv, float size, float borderSize, out float main, out float side, out float border)\n{\n    vec2 eva = abs(uv - vec2(0.5));\n    main = float((eva.x + eva.y - 1.0 + size * 0.5 + borderSize * sqrt2) < 0.0);\n    main *= float(max(eva.x, eva.y) < (0.5 - borderSize));\n    side = float((eva.x + eva.y - 1.0 + size * 0.5 - borderSize * sqrt2) > 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    //tile uv\n    rectTile(uv, 2.0);\n    \n    float intensityMain, intensitySide, intensityBorder;\n    \n    specialBrick(uv, 0.3, 0.01, intensityMain, intensitySide, intensityBorder);\n    \n    vec3 white = vec3(0.91, 0.96, 0.96);\n    vec3 green = vec3(0.5, 0.95, 0.5);\n    \n    vec3 col = white * intensityMain;\n    \n    vec3 col1 = green * intensitySide;\n    \n    vec3 finalcol = clamp(col + col1, vec3(0.0), vec3(1.0));\n\t\n    //vec3 col = green;\n    \n    //vec3 col = vec3(ins);\n    \n    //vec3 col = vec3(intensitySide);\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(finalcol,1.0);\n}","name":"Image","description":"","type":"image"}]}