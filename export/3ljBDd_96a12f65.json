{"ver":"0.1","info":{"id":"3ljBDd","date":"1625001025","viewed":729,"name":"Fast Blur Effect","username":"davisgamdev","description":"Experimenting with efficient gaussian blur effects across several buffers.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["gaussian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float Depth = 3.;\nconst float OffsetDist = 4.;\nconst float Samples = 8.;\n\nvec4 boxCoord = vec4(100., 100., 400., 300.);\nconst vec4 boxColor = vec4(vec3(0.8, 0.8, 1.), 0.2);\n\n#define TAU 6.28318530718\n\nvec4 RadialBlur(vec2 fragCoord, float radius) {\n    \n    if(radius <= 0.) return texture(iChannel0, fragCoord/iResolution.xy);\n    \n    vec2 offset;\n    \n    float angle = 0.;\n    \n    vec4 color = vec4(0.);\n    \n    for(float angle = 0.; angle < TAU; angle += (TAU/Samples)) {\n        \n        offset = vec2(cos(angle), sin(angle)) * radius;\n        color += texture(iChannel0, (fragCoord + offset)/iResolution.xy);\n       \t\n    }\n    \n    return color/Samples;\n    \n}\n\nvec4 FastBlur(vec2 fragCoord) {\n    \n    vec4 color;\n    vec2 offset;\n    float fib = 2.;\n    float fibTotal = 0.;\n    \n    for(float i = 1.; i <= Depth; ++i) {\n    \tfib += i;\n        color += RadialBlur(fragCoord, i * OffsetDist)/ fib;\n        fibTotal += 1./fib;\n    }\n   \n    return color/fibTotal;\n  \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    boxCoord.xy = iMouse.xy - boxCoord.zw/2.;  \n    \n    if(\n        fragCoord.x > boxCoord.x && fragCoord.y > boxCoord.y && \n        fragCoord.x < (boxCoord.x + boxCoord.z) && \n        fragCoord.y < (boxCoord.y + boxCoord.w)) {\n       \n    \tfragColor = FastBlur(fragCoord);\n        fragColor = mix(fragColor, boxColor, boxColor.w);\n        \n    }\n    else {\n        \n    \tfragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float Depth = 3.;\nconst float OffsetDist = 10.;\nconst float Samples = 8.;\n\n\nvec4 boxCoord = vec4(100., 100., 400., 300.);\nconst vec4 boxColor = vec4(vec3(0.8, 0.8, 1.), 0.1);\n\n#define TAU 6.28318530718\n\nvec4 RadialBlur(vec2 fragCoord, float radius) {\n    \n    if(radius <= 0.) return texture(iChannel0, fragCoord/iResolution.xy);\n    \n    vec2 offset;\n    \n    float angle = 0.;\n    \n    vec4 color = vec4(0.);\n    \n    for(float angle = 0.; angle < TAU; angle += (TAU/Samples)) {\n        \n        offset = vec2(cos(angle), sin(angle)) * radius;\n        color += texture(iChannel0, (fragCoord + offset)/iResolution.xy);\n       \t\n    }\n    \n    return color/Samples;\n    \n}\nvec4 FastBlur(vec2 fragCoord) {\n    \n    vec4 color;\n    vec2 offset;\n    float fib = 2.;\n    float fibTotal = 0.;\n    \n    for(float i = 1.; i <= Depth; ++i) {\n    \tfib += i;\n        color += RadialBlur(fragCoord, i * OffsetDist)/ fib;\n        fibTotal += 1./fib;\n    }\n    return color/fibTotal;\n  \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    boxCoord.xy = iMouse.xy - boxCoord.zw/2.;  \n    \n    if(\n        fragCoord.x > boxCoord.x && fragCoord.y > boxCoord.y && \n        fragCoord.x < (boxCoord.x + boxCoord.z) && \n        fragCoord.y < (boxCoord.y + boxCoord.w)) {\n       \n    \tfragColor = FastBlur(fragCoord);\n        \n        //fragColor = mix(fragColor, boxColor, boxColor.w);\n      \n    }\n    else {\n        \n    \tfragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const float Depth = 3.;\nconst float OffsetDist = 8.;\nconst float Samples = 8.;\n\n\nvec4 boxCoord = vec4(100., 100., 400., 300.);\nconst vec4 boxColor = vec4(vec3(0.8, 0.8, 1.), 0.1);\n\n#define TAU 6.28318530718\n\nvec4 RadialBlur(vec2 fragCoord, float radius) {\n    \n    if(radius <= 0.) return texture(iChannel0, fragCoord/iResolution.xy);\n    \n    vec2 offset;\n    \n    float angle = 0.;\n    \n    vec4 color = vec4(0.);\n    \n    for(float angle = 0.; angle < TAU; angle += (TAU/Samples)) {\n        \n        offset = vec2(cos(angle), sin(angle)) * radius;\n        color += texture(iChannel0, (fragCoord + offset)/iResolution.xy);\n       \t\n    }\n    \n    return color/Samples;\n    \n}\n\nvec4 FastBlur(vec2 fragCoord) {\n    \n    vec4 color;\n    vec2 offset;\n    float fib = 2.;\n    float fibTotal = 0.;\n    \n    for(float i = 1.; i <= Depth; ++i) {\n    \tfib += i;\n        color += RadialBlur(fragCoord, i * OffsetDist)/ fib;\n        fibTotal += 1./fib;\n    }\n    return color/fibTotal;\n  \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    boxCoord.xy = iMouse.xy - boxCoord.zw/2.;  \n    \n    if(\n        fragCoord.x > boxCoord.x && fragCoord.y > boxCoord.y && \n        fragCoord.x < (boxCoord.x + boxCoord.z) && \n        fragCoord.y < (boxCoord.y + boxCoord.w)) {\n       \n    \tfragColor = FastBlur(fragCoord);\n        //fragColor = mix(fragColor, boxColor, boxColor.w);\n        \n    }\n    else {\n        \n    \tfragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const float Depth = 3.;\nconst float OffsetDist = 6.;\nconst float Samples = 8.;\n\n\nvec4 boxCoord = vec4(100., 100., 400., 300.);\nconst vec4 boxColor = vec4(vec3(0.8, 0.8, 1.), 0.1);\n\n#define TAU 6.28318530718\n\nvec4 RadialBlur(vec2 fragCoord, float radius) {\n    \n    if(radius <= 0.) return texture(iChannel0, fragCoord/iResolution.xy);\n    \n    vec2 offset;\n    \n    float angle = 0.;\n    \n    vec4 color = vec4(0.);\n    \n    for(float angle = 0.; angle < TAU; angle += (TAU/Samples)) {\n        \n        offset = vec2(cos(angle), sin(angle)) * radius;\n        color += texture(iChannel0, (fragCoord + offset)/iResolution.xy);\n       \t\n    }\n    \n    return color/Samples;\n    \n}\nvec4 FastBlur(vec2 fragCoord) {\n    \n    vec4 color;\n    vec2 offset;\n    float fib = 2.;\n    float fibTotal = 0.;\n    \n    for(float i = 1.; i <= Depth; ++i) {\n    \tfib += i;\n        color += RadialBlur(fragCoord, i * OffsetDist)/ fib;\n        fibTotal += 1./fib;\n    }\n    return color/fibTotal;\n  \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    boxCoord.xy = iMouse.xy - boxCoord.zw/2.;  \n    \n    if(\n        fragCoord.x > boxCoord.x && fragCoord.y > boxCoord.y && \n        fragCoord.x < (boxCoord.x + boxCoord.z) && \n        fragCoord.y < (boxCoord.y + boxCoord.w)) {\n       \n    \tfragColor = FastBlur(fragCoord);\n        \n        //fragColor = mix(fragColor, boxColor, boxColor.w);\n      \n    }\n    else {\n        \n    \tfragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    }\n}","name":"Buffer C","description":"","type":"buffer"}]}