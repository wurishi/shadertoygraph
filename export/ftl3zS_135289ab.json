{"ver":"0.1","info":{"id":"ftl3zS","date":"1622319171","viewed":56,"name":"Hash for float 2d vectors","username":"Envy24","description":"random, hash, noise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","random","hash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \n    Hash for float vectors.\n    \n    Returns value in range [0.0; 1.0].\n*/\nfloat fhash2D(vec2 p, float enthropy /* [-1.0; -3000.0] */)\n{\n    p.x = p.x < 1.0 ? p.x + enthropy : p.x;\n    p.y = p.y < 1.0 ? p.y - enthropy : p.y;\n    \n    return fract(\n        mod((p.x*p.x*p.y)*6.004323764, p.x*45.2875349852) + \n        mod((p.y*p.y)*0.093004323764, p.y*(enthropy * 0.2340234912))\n    );\n}\n\nfloat enthropy = -1054.0; /* [-1.0; -3000.0] */\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float gray;\n\n    if (uv.x < 0.20)\n    {\n       gray = fhash2D(fragCoord, enthropy);\n    }\n    else if (uv.x >= 0.2 && uv.x < 0.4)\n    {\n       gray = fhash2D(fragCoord + iTime, enthropy);\n    }\n    else if (uv.x >= 0.4 && uv.x < 0.6)\n    {\n       gray = fhash2D(fragCoord, -iTime);\n    }\n    else if (uv.x >= 0.6 && uv.x < 0.8)\n    {\n       gray = fhash2D(fragCoord, -iTime * 100.0);\n    }\n    else\n    {\n       gray = fhash2D(fragCoord, -iTime * 1000.0);\n    }\n\n    // Output to screen\n    fragColor = vec4(gray, gray, gray, 1.0);\n}","name":"Image","description":"","type":"image"}]}