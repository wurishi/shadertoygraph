{"ver":"0.1","info":{"id":"mslXRf","date":"1669346083","viewed":119,"name":"noosphere","username":"vivavolt","description":"Swag","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["swag"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Forked from https://www.shadertoy.com/view/DsfSzN\n// blended with https://www.shadertoy.com/view/4sjXW1\n// Super messy, I have not cleaned this up at all\n\n#define NUM_LAYER 5.\n\n\n  mat2 Rot(float angle){\n      float s=sin(angle), c=cos(angle);\n      return mat2(c, -s, s, c);\n  }\n  \n  \n  mat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}\n  \n  \n  //random number between 0 and 1\n  float Hash21(vec2 p){\n      p = fract(p*vec2(123.34, 456.21));\n      p +=dot(p, p+45.32);\n      return  fract(p.x*p.y);\n  }\n  \n  float Star(vec2 uv, float flare){\n      float d = length(uv);//center of screen is origin of uv -- length give us distance from every pixel to te center\n      float m = .05/d;\n      float rays = max(0., 1.-abs(uv.x*uv.y*1000.));\n      m +=rays*flare;\n      \n      uv *=Rot(3.1415/4.);\n      rays = max(0., 1.-abs(uv.x*uv.y*1000.));\n      m +=rays*.3*flare;\n      m *=smoothstep(1., .2, d);\n      return m;\n  }\n  \n  vec3 StarLayer(vec2 uv){\n     \n     vec3 col = vec3(0.);\n     \n      vec2 gv= fract(uv)-.5; //gv is grid view\n      vec2 id= floor(uv);\n      \n      for(int y=-1; y<=1; y++){\n          for(int x=-1; x<=1; x++){\n              \n              vec2 offset= vec2(x, y);\n              float n = Hash21(id+offset);\n              float size = fract(n*345.32);\n                  float star= Star(gv-offset-(vec2(n, fract(n*34.))-.5), smoothstep(.9, 1., size)*.6);\n              vec3 color = sin(vec3(.8, 0., .7)*fract(n*2345.2)*123.2)*.5*sin(iTime)+.5;\n              color = color*vec3(.3, .1, .8+size / 50.);\n              \n              star *=sin(iTime*3.+n*6.2831)*.5+1.;\n              col +=star*size*color; \n              \n           }\n       }\n      return col;\n  }\n  \n  float vignette(vec2 uv) {\n      uv *=  1.0 - uv.yx;   //vec2(1.0)- uv.yx; -> 1.-u.yx; Thanks FabriceNeyret !\n      \n      float vig = uv.x*uv.y * 15.0; // multiply with sth for intensity\n      \n      vig = pow(vig, 0.25); // change pow for modifying the extend of the  vignette\n      return vig;\n  }\n  \n  vec3 tex(in vec2 p)\n  {\n      float frq =50.3;\n      p += 0.405;\n      return vec3(1.)*smoothstep(.9, 1.05, max(sin((p.x)*frq),sin((p.y)*frq)));\n  }\n  \n  vec3 hsv2rgb( in vec3 c )\n  {\n      vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z * mix( vec3(1.0), rgb, c.y);\n  }\n  \n  //HEALPix  (debugged and cleaned from: http://www.cse.cuhk.edu.hk/~ttwong/papers/spheremap/spheremap.html)\n  //Has several advantages, might not be as versatile as cubemapped.\n  vec3 healpix(vec3 p)\n  {\n    float a = atan(p.z, p.x) * 0.63662; \n    float h = 3.*abs(p.y);\n    float h2 = .75*p.y;\n    vec2 uv = vec2(a + h2, a - h2);\n    h2 = sqrt(3. - h);\n    float a2 = h2 * fract(a);\n      uv = mix(uv, vec2(-h2 + a2, a2), step(2., h));    \n      \n      vec3 col = tex(uv);\n      col.x = a*0.5;\n      return hsv2rgb(vec3(col.x,.8,col.z));\n  }\n  \n  vec3 sphproj(in vec3 p)\n  {\n      vec2 sph = vec2(acos(p.y/length(p)), atan(p.z,p.x));\n      \n      vec3 col = tex(sph*2.);\n      col.x = sph.x*0.4;\n      return hsv2rgb(vec3(.7,.8,col.z));\n  }\n  \n  float iSphere(in vec3 ro, in vec3 rd)\n  {\n      vec3 oc = ro;\n      float b = dot(oc, rd);\n      float c = dot(oc,oc) - 1.;\n      float h = b*b - c;\n      if(h <0.0) return -1.;\n      return -b - sqrt(h);\n  }\n  \n  float blendScreen(float base, float blend) {\n    return 1.0-((1.0-base)*(1.0-blend));\n  }\n  \n  vec3 blendScreen(vec3 base, vec3 blend) {\n    return vec3(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));\n  }\n  \n  vec3 blendScreen(vec3 base, vec3 blend, float opacity) {\n    return (blendScreen(base, blend) * opacity + base * (1.0 - opacity));\n  }\n  \n  \n  void mainImage( out vec4 fragColor, in vec2 fragCoord )\n  {\n      vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n      vec2 rawUv = fragCoord.xy / iResolution.xy;\n      float vig = vignette(rawUv);\n      float t=  iTime*.02;\n      vec2 M = vec2(0);\n      uv *=Rot(t);\n      uv +=M*4.;\n      \n      vec3 col = vec3(0.2588235294, 0.1254901961, 0.2549019608);\n      \n      for(float i =0.; i<1.; i += 1./NUM_LAYER){\n          float depth = fract(i+t);\n          float scale= mix(10.,.5, depth);\n          float fade = depth*smoothstep(1., .9, depth);\n          col += StarLayer(uv*scale+i*453.32-M)*fade;\n      }\n      fragColor = vec4(col * 0.5,1.0);\n      \n      float k = (sin(iTime / 1.0) + 1.0)/4.0 + 0.75;\n     \n      #define heartoffset vec2(sin(uv.x + iTime)*10., cos(uv.x * 10. + 0.01*sin(iTime) + iTime)*15.*(1.5-uv.y)*0.4)\n      #define heartcoord fract(((fragCoord.xy + heartoffset) - iResolution.xy/2.) / cellsize)\n      \n      //vec3 col = vec3(0.2588235294, 0.1254901961, 0.2549019608);\n  \n      \n      // Add a bit of shading to make things seem more 3-dimensional\n      //fragColor -= (heartoffset.y + heartoffset.x) * 0.01 * k * (1.-uv.y)*0.4;\n      fragColor -= vec4((1.-uv.y)*0.1*k,0,0,1.);\n      fragColor -= (vec4(uv.y, uv.y * 0.8, uv.y, 1.)) / 8.0;\n      \n      \n      vec2 p = fragCoord.xy/iResolution.xy-0.5;\n    p.x*=iResolution.x/iResolution.y;\n    vec2 um = M;\n    um.x *= iResolution.x/iResolution.y;\n      p*= 1.5;\n    \n      //camera\n    vec3 ro = vec3(0.,0.,5.);\n      vec3 rd = normalize(vec3(p,-1.5));\n      mat2 mx = mm2(iTime*.2+um.x*5.);\n      mat2 my = mm2(iTime*0.0+um.y*-2. + -.1); \n      ro.xz *= mx;rd.xz *= mx;\n      ro.xy *= my;rd.xy *= my;\n     \n      \n      col = sphproj(rd);\n      \n    //fragColor = mix(fragColor, vec4(col, 1.0), .1);\n      fragColor = vec4(blendScreen(fragColor.xyz, col * .2), 1.);\n      \n      \n      fragColor *=  vig;\n      }","name":"Image","description":"","type":"image"}]}