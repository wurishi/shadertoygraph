{"ver":"0.1","info":{"id":"4lSBDR","date":"1515229623","viewed":492,"name":"Exit routine","username":"w23","description":"Simplest, dumbest and slowest naive path tracer, coded in 2.5 hours live (mostly in Russian): https://www.youtube.com/watch?v=QDeR9vFKL8s","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["pathtracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 e = vec3(0., .001, 1.);\nvec4 noise2x4(in vec2 v) { return texture(iChannel0, v/256.); }\nfloat noise2x1l(in vec2 v) {\n    vec2 V = floor(v); v = fract(v);\n    //v *= (3. - 2.*v) * v;\n    return mix(\n        mix(noise2x4(V     ).x, noise2x4(V+e.zx).x, v.x),\n        mix(noise2x4(V+e.xz).x, noise2x4(V+e.zz).x, v.x), v.y);\n}\n\nfloat fbm(in vec2 v) {\n    return .5 * noise2x1l(v)\n        + .25 * noise2x1l(v*2.)\n        + .125 * noise2x1l(v*4.)\n        + .0625 * noise2x1l(v*8.);\n}\n\nvec3 P = vec3(0.);\nvec3 N = vec3(1.);\nvec3 E = vec3(0.);\nvec4 A = vec4(vec3(1.),1.);\n\n#define INF 1e6\n\nconst vec3 BOX_SIZE = vec3(2.5, 3., 3.) / 2.;\n\nvoid raytrace(in vec3 o, in vec3 d) {\n    P = vec3(0.);\n\tN = vec3(1.);\n\tE = vec3(0.);\n    \n    vec4 defA = vec4(vec3(.6),.9+.099*sin(iTime*1.7));\n\n    float dist = INF, cd = INF;\n    if (abs(d.y) > 1e-6) {\n        cd = (-BOX_SIZE.y - o.y) / d.y;\n        if (cd > .0 && cd < dist) {\n            dist = cd;\n            P = o + d * dist;\n            N = vec3(0., 1., 0.);\n            A = vec4(vec3(.2), 0.);\n        }\n        cd = (BOX_SIZE.y - o.y) / d.y;\n        if (cd > 0. && cd < dist) {\n            dist = cd;\n            P = o + d * dist;\n            N = vec3(0., -1., 0.);\n            A = vec4(vec3(.2), 0.);\n        }\n    }\n    \n    if (abs(d.x) > 1e-6) {\n        cd = (BOX_SIZE.x - o.x) / d.x;\n        if (cd > .0 && cd < dist) {\n            dist = cd;\n            P = o + d * dist;\n            A.xyz = vec3(.3)*smoothstep(.95,.94,mod(P.z*3.,1.));\n            A.w = .7;// + .1*fbm(P.yz*8.);\n            N = normalize(vec3(-1., 0., .1*(pow(fbm(P.yz*3.*vec2(1.,3.)),2.)*2. - 1.)));\n        }\n        cd = (-BOX_SIZE.x - o.x) / d.x;\n        if (cd > 0. && cd < dist) {\n            dist = cd;\n            P = o + d * dist;\n            A.xyz = vec3(.3)*smoothstep(.95,.94,mod(P.z*3.,1.));\n            A.w = .7;// + .1*fbm(P.yz*8.);\n            //N = normalize(vec3(1., 0., .05*(pow(fbm(P.yz*19.),1.)*2. - 1.)));\n            N = normalize(vec3(1., 0., .1*(pow(fbm(P.yz*3.*vec2(1.,3.)),2.)*2. - 1.)));\n        }\n    }\n    \n    if (abs(d.z) > 1e-6) {\n        cd = (BOX_SIZE.z - o.z) / d.z;\n        if (cd > .0 && cd < dist) {\n            dist = cd;\n            P = o + d * dist;\n            N = vec3(0., 0., -1.);\n            A = defA;\n        }\n        cd = (-BOX_SIZE.z - o.z) / d.z;\n        if (cd > 0. && cd < dist) {\n\t        A = vec4(0.);\n            dist = cd;\n            P = o + d * dist;\n            N = vec3(0., 0., 1.);\n            const float pixel_size = BOX_SIZE.x / 32.;\n            vec2 nc = P.xy/pixel_size+floor(iTime*.5)*32.;\n            E = 4.*vec3(\n                smoothstep(.8,.82,noise2x4(nc).w),\n                smoothstep(.8,.82,noise2x4(nc+e.xz*.5).w),\n                smoothstep(.8,.82,noise2x4(nc+e.xz).w)\n            );\n        }\n    }\n}\n\nvec3 colorSample(in vec3 O, in vec3 D, in float hash) {\n    vec3 albedo = vec3(1.);\n    vec3 color = vec3(0.);\n    for (int i = 0; i < 3; ++i) {\n    \traytrace(O, D);\n        color += albedo * E;\n        albedo *= A.xyz;\n        \n        O = P + N * .001;\n        vec2 s = 110. * (vec2(dot(O, vec3(1.,3.,5.))+ hash, hash + dot(O, vec3(17.,53.,119.))) + iTime);\n        vec3 nD = normalize(noise2x4(s).xyz*2. - 1.);\n        D = mix(nD, reflect(D, N), A.w);\n    }\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n   \tvec3 O = vec3(cos(iTime*.1)*.8, sin(iTime*.23)*.6, 0. + sin(iTime*.47)*.8);\n    vec3 D = normalize(vec3(uv, -1.));\n    \n    vec3 color = vec3(0.);\n    const int SAMPLES = 16;\n    for (int i = 0; i < SAMPLES; ++i)\n        color += colorSample(O, D, float(i));\n    \n    color /= float(SAMPLES);    \n    fragColor = vec4(pow(color, vec3(1./2.2)), 1.);\n}","name":"Image","description":"","type":"image"}]}