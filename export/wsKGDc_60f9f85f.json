{"ver":"0.1","info":{"id":"wsKGDc","date":"1571136440","viewed":197,"name":"Smooth Julia set with rain","username":"martytram","description":"Basic implementation of Julia set.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["julia","simple","rain","set","smoothing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER 1000.\n#define R 100.\n#define S(a,b,c) smoothstep(a,b,c)\n\n//conversion helper\nfloat f(float n, vec3 hsl){\n    float k = mod(n+hsl.x*12., 12.);\n    float a = hsl.y*min(hsl.z, 1.-hsl.z);\n    return hsl.z-a*max(min(k-3., min(9.-k, 1.)),-1.);\n}\n// hsl in range <0, 1>^3\nvec3 hsl2rgb(vec3 hsl){\n    return vec3(f(0.,hsl), f(8.,hsl), f(4.,hsl));\n}\n\nvec3 hue2rgb(float hue){\n    return hsl2rgb(vec3(hue, 1., .5));\n}\n\nvec2 Rain(vec2 uv, float t){\n    t*= 40.;\n    vec2 aspect = vec2(3.,1.);\n    vec2 st = uv*aspect;\n    \n    vec2 id = floor(st);\n    st.y+=t*.22;\n    float n = fract(sin(id.x*256.45)*85.);\n    st.y += n;\n    uv.y += n;\n    id = floor(st);\n    st = fract(st)-.5;\n    \n    t+= fract(sin(id.x*56.45+id.y*485.)*155.)*6.28;\n    \n    float y = -sin(t+sin(t+.5*sin(t)))*0.43;\n    float x = (fract(sin(id.x*384.45)*id.y*288.)-.5)*.6;\n    vec2 p1 = vec2(x, y);\n    vec2 o1 = (st-p1)/aspect;\n    float d = length(o1);\n    \n    float m1 = S(.07, .0, d);\n    \n    vec2 o2 = (fract(uv*aspect.x*vec2(1.,2.)-vec2(p1.x,0.))-.5)/vec2(1.,2.);\n    d = length(o2);\n    \n    float m2 = S(0.2*(.5-st.y), .0, d) * S(-.1, .1, st.y-p1.y);\n    \n    //if(st.x>.46 || st.y>.49) m1 = 1.;\n    \n    return vec2(m1*o1*30.+m2*o2*10.);\n}\n\nvec3 julia(float zx, float zy, float cx, float cy){\n    float iter = 0.;\n    for ( ;zx * zx + zy * zy < R*R && iter<MAX_ITER; iter += 1.){\n        float xtemp = zx*zx - zy*zy;\n        zy = 2. * zx * zy + cy;\n        zx = xtemp + cx;\n    }\n    \n    float dist = length(vec2(zx,zy));\n    float fracIter = log2(log(dist) / log(R)) - 1.;\n    iter -= fracIter;\n    vec3 col = hue2rgb(sqrt(iter/10.));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    m-=.5;\n    m*=2.;\n    uv*=2.;\n    float t = iTime;\n    t*=.7;\n    \n    vec2 rain = Rain(uv*2., t*.13);\n    rain += Rain(uv*3., t*.15) * .25;\n    uv -= rain * 0.35;\n    \n    //vec3 col = julia(uv.x, uv.y, m.x, m.y);\n    vec3 col = julia(uv.x, uv.y, .8*cos(t), .8*sin(t));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}