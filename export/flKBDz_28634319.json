{"ver":"0.1","info":{"id":"flKBDz","date":"1664369187","viewed":157,"name":"three body problem","username":"jt","description":"A toy solar system consisting of three celestial bodies sun, planet, moon.\nSimple numerical euler-method simulation of gravitational forces.\nTweak parameters in common.\nHow many cycles until your moon wanders off?\nPlease post interesting configurations :)","likes":7,"published":1,"flags":32,"usePreview":1,"tags":["simulation","solar","gravity","system","eulermethod","spektrum","threebodyproblem","sciam","kurzweil"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float render_particle(vec2 p, vec2 o, float r)\n{\n    //return 1.0 - step(5.0, length(p - o));\n    return 1.0 - smoothstep(r - 0.005, r + 0.005, length(p - o));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragCoord = 2.0 * fragCoord/iResolution.y - 1.0 ;\n    fragCoord.x -= iResolution.x / iResolution.y / 2.0;\n    fragColor = vec4(0.0);\n    for(int i = 0; i < COUNT; i++)\n    {\n        vec4 pc = texelFetch(iChannel0, ivec2(i), 0);\n        vec2 p = pc.xy;\n        vec3 c = color[i];\n        float t = render_particle(fragCoord, p, radius[i]);\n        //float t = render_particle(fragCoord, p-texelFetch(iChannel0, ivec2(PLANET), 0).xy, radius[i]); // lock camera to planet\n        fragColor = mix(fragColor, vec4(c, 1.0), vec4(t));\n    }\n    \n    fragColor = sqrt(fragColor); // gamma\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// https://www.shadertoy.com/view/flKBDz three body problem by jt\n\n// MIT license (https://www.shadertoy.com/terms) \n\n/*\n\nCopyright (c) 2022 Jakob Thomsen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n// I've learned this method as a kid from a brilliant scientific american issue\n// (German translation: Spektrum der Wissenschaft \"Computer Kurzweil\" about 1989)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    int i = int(max(floor(fragCoord.x), floor(fragCoord.y)));\n    if(iFrame == 0) // initializaton\n    {\n        fragColor = texture(iChannel1, vec2(i) / iResolution.xy) - vec4(0.0, 0.0, 0.5, 0.5);\n\n        for(int j = 0; j < COUNT; j++)\n        {\n            if(i == j)\n                fragColor = vec4(start_position[j], start_velocity[j]);\n        }\n    }\n    else\n    {\n        vec4 s0 = texelFetch(iChannel0, ivec2(i), 0);\n        vec2 position0 = s0.xy;\n        vec2 velocity0 = s0.zw;\n        vec2 acceleration0 = vec2(0);\n        for(int j = 0; j < COUNT; j++)\n        {\n            if(i != j) // don't interact with self (division by zero!)\n            {\n                vec4 s1 = texelFetch(iChannel0, ivec2(j), 0);\n                vec2 position1 = s1.xy;\n                vec2 diff = position1 - position0;\n                float distsquare = dot(diff, diff);\n                float dist = sqrt(distsquare);\n                vec2 dir = diff/dist;\n                \n                // gravity F = G*m0*m1/r^2 but here G = 1 for simplicity\n                //float force0 = mass[i]*mass[j] / distsquare;\n                //acceleration0 += force0 * dir / mass[i];\n                acceleration0 += mass[j] / distsquare * dir; // prevent division by zero for massless objects\n            }\n        }\n\n        // Euler method\n        velocity0 += acceleration0 * dt; // update velocity\n        position0 += velocity0 * dt; // update position\n\n        fragColor = vec4(position0, velocity0);\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define pi 3.1415926\n\n#define SUN 0\n#define PLANET (SUN + 1)\n#define MOON (PLANET + 1)\n#define COUNT (MOON + 1)\n\nconst vec2 start_position[COUNT] = vec2[](vec2(0.0,0.0), vec2(1.0,0.0), vec2(1.0,0.05));\nconst vec2 start_velocity[COUNT] = vec2[](vec2(0.0,-0.009), vec2(0.0,0.9), vec2(0.4,0.9));\nconst float mass[COUNT] = float[](1.0, 0.01, 0.0);\nconst float radius[COUNT] = float[](0.1, 0.02, 0.01);\nconst vec3 color[COUNT] = vec3[](vec3(1,1,0.125), vec3(0.125,0.125,1), vec3(0.66));\n\n#define dt (1.0 / 300.0)\n","name":"Common","description":"","type":"common"}]}