{"ver":"0.1","info":{"id":"DlGXzz","date":"1685889629","viewed":93,"name":"Bald Polnareff Fractal Test 1","username":"BaldPolnareff","description":"Another test, I'm just toying with random math at this point","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","animation","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y; // Normalize coordinates\n\n    // Scale and rotate the coordinate system\n    p *= mat2(cos(iTime), sin(iTime), -sin(iTime), cos(iTime));\n    p *= 5.0;\n\n    float f = 1.0;\n    for (float i = 0.; i < 7.6; i++) {\n        p = abs(p) / dot(p, p) - 0.638;\n        f *= dot(1.1*p, p);\n    }\n\n    // Apply coloring to the fractal\n    vec3 color = vec3(f * 0.1 + .007*sin(iTime + 1.2), f * 0.8 + .007*cos(iTime + 1.2), f * 0.26 + .007*sin(iTime/10. + 0.2));\n\n    // Add some variation to the coloring\n    color += 0.002 * vec3(sin(fragCoord.x * 0.1), cos(fragCoord.y * 0.05), sin(iTime * 0.3));\n\n    fragColor = 10.*vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}