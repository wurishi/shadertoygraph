{"ver":"0.1","info":{"id":"4fdBW4","date":"1733182450","viewed":180,"name":"volumetric 4d display","username":"SpencerKuan","description":"rendering scene onto a 3d screen with raymarching + volumetric voxel raycast of the screen\ninfinite domain repetition on a 3d viewport is weird","likes":14,"published":3,"flags":32,"usePreview":0,"tags":["raycast","voxel","4d","dda"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\n    modified tesseract\n\n*/\n\n#define MAX_RES min(floor(pow(iResolution[0]*iResolution[1], 1./3.)), 97.0)\n\nvec4 retrieve4(vec3 coord) {\n    int res = int(MAX_RES);\n    int index = int(coord.x)*res*res + int(coord.y)*res + int(coord.z);\n    \n    int x = index % int(iResolution[0]);\n    int y = index / int(iResolution[0]);\n    \n    return texelFetch(iChannel0, ivec2(x, y), 0);\n    \n}\n\nvec2 boxIntersect(vec3 pos, vec3 dir, vec3 bound1, vec3 bound2) {\n    float tMin = -1e20;\n    float tMax = 1e20;\n\n    if (dir.x != 0.0) {\n        float t1 = (bound1.x - pos.x) / dir.x;\n        float t2 = (bound2.x - pos.x) / dir.x;\n        tMin = max(tMin, min(t1, t2));\n        tMax = min(tMax, max(t1, t2));\n    }\n\n    if (dir.y != 0.0) {\n        float t1 = (bound1.y - pos.y) / dir.y;\n        float t2 = (bound2.y - pos.y) / dir.y;\n        tMin = max(tMin, min(t1, t2));\n        tMax = min(tMax, max(t1, t2));\n    }\n\n    if (dir.z != 0.0) {\n        float t1 = (bound1.z - pos.z) / dir.z;\n        float t2 = (bound2.z - pos.z) / dir.z;\n        tMin = max(tMin, min(t1, t2));\n        tMax = min(tMax, max(t1, t2));\n    }\n\n    if (tMin <= tMax) return vec2(tMin, tMax);\n    return vec2(-1.0, -1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord.xy - iResolution.xy*.5) / iResolution.y;\n    \n    float res = MAX_RES;\n    \n    vec3 cam = vec3(res/2., res/2., -res * 1.5);\n    vec3 dir = normalize(vec3(uv, 1.0));\n    \n    float rotX = -0.4;\n    float rotY = iTime * 0.234;\n    \n    if (iMouse.z > 0.) {\n        rotX = (iMouse.y / iResolution.y - 0.5) * 1.0 * 3.14;\n        rotY = (iMouse.x / iResolution.x - 0.5) * 2.0 * 3.14;\n        \n    }\n    \n    mat3 spin = mat3(\n        cos(rotY), 0, -sin(rotY), \n        0, 1, 0,\n        sin(rotY), 0, cos(rotY)\n    ) * mat3(\n        1, 0, 0,\n        0, cos(rotX), -sin(rotX), \n        0, sin(rotX), cos(rotX)\n    );\n    \n    cam = spin * (cam - res/2.) + res/2.;\n    dir = spin * dir;\n    \n    \n    vec2 intersection = boxIntersect(cam, dir, vec3(0), vec3(res));\n    float t = intersection.x;\n    cam = cam + dir * t - dir * 1.0;\n    \n    if (t < 0.0) {\n        fragColor = vec4(0, 0, 0, 1);\n        return;\n    }\n    \n\n    vec4 col = vec4(vec3( exp(0.1*(intersection.x - intersection.y))*0.2 ), 0);\n    \n    \n    vec3 d = vec3(\n        cam.x == 0.0 ? 1e20 : abs(1.0 / dir.x),\n        cam.y == 0.0 ? 1e20 : abs(1. / dir.y),\n        cam.z == 0.0 ? 1e20 : abs(1. / dir.z)\n    );\n    \n    vec3 grid = floor(cam);\n    vec3 steps = sign(dir);\n    \n    \n    float rx, ry, rz;\n    if (dir.x > 0.0) {\n        rx = (grid.x + 1.0 - cam.x) * d.x;\n    } else {\n        rx = (cam.x - grid.x) * d.x;\n    }\n\n    if (dir.y > 0.0) {\n        ry = (grid.y + 1.0 - cam.y) * d.y;\n    } else {\n        ry = (cam.y - grid.y) * d.y;\n    }\n\n    if (dir.z > 0.0) {\n        rz = (grid.z + 1.0 - cam.z) * d.z;\n    } else {\n        rz = (cam.z - grid.z) * d.z;\n    }\n    \n\n    int sampleX, sampleY, sampleZ;\n    float extraT = 0.0;\n    \n    // float factor = 10.0 / res;\n    // factor = 1.0; // !\n    \n    int MAX_STEPS = 3 * int(res);\n    for (int i = 0; i < MAX_STEPS; i ++) {\n        if (rx < ry && rx < rz) {\n            extraT = rx;\n            rx += d.x;\n            grid.x += steps.x;\n        } else if (ry < rz) {\n            extraT = ry;\n            ry += d.y;\n            grid.y += steps.y;\n        } else {\n            extraT = rz;\n            rz += d.z;\n            grid.z += steps.z;\n        }\n        \n        \n        if (min(min(grid.x, grid.y), grid.z) >= 0.0 && max(max(grid.x, grid.y), grid.z) < res){\n            \n            \n            //vec4 rendered4;\n            //sceneImage4d(rendered4, 2.0*grid/res - 1.0);\n            \n            vec4 tex = retrieve4(grid);\n            \n            if (tex.w > 0.0){        \n                float diff = 1.0 - col.a;\n                col += vec4(tex.xyz, 1.0) * tex.w * diff;\n                \n            }\n            \n        }\n        \n        \n \n    }\n    \n   \n    \n\n    // Output to screen\n    fragColor = vec4(col.rgb, 1.0);\n    \n    //fragColor =  (iChannel0, fragCoord.xy / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define MAX_RES min(floor(pow(iResolution[0]*iResolution[1], 1./3.)), 97.0)\n\n\nfloat sdBox( vec4 p, vec4 b )\n{\n  vec4 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,max(q.z, q.w))),0.0);\n}\n\nfloat sdf (vec4 cam) {\n    \n    vec4 s = vec4(15.0);\n    cam = cam - s * round(cam/s);\n    \n    float a = sdBox(cam, vec4(3));\n    \n    // a = length(vec2(max(0., abs(cam.w) - 4.0), max(0., length(cam.xzy) - 3.0)));\n    \n    a = max(a, -sdBox(cam, vec4(5, 5, 2., 2.)));\n    a = max(a, -sdBox(cam, vec4(5, 2., 5, 2.)));\n    a = max(a, -sdBox(cam, vec4(5, 2., 2., 5)));\n    a = max(a, -sdBox(cam, vec4(2., 5, 5, 2)));\n    a = max(a, -sdBox(cam, vec4(2, 5, 2, 5)));\n    a = max(a, -sdBox(cam, vec4(2, 2, 5, 5)));\n    \n        \n    // float b = (sin(cam.x * 2.0) * sin(cam.y * 2.0) * sin(cam.z * 2.0) * sin(cam.w * 2.0)) * 1.;\n    \n    /*a = min(a, length(cam - vec4(10, 0, 0, 10)) - 2.0);\n    a = min(a, length(cam - vec4(0, 10, 0, 20)) - 2.0);\n    a = min(a, length(cam - vec4(0, 0, 10, 30)) - 2.0);\n    a = min(a, length(cam - vec4(-10, 0, 0, 40)) - 2.0);*/\n    \n\n    // a = a + b * max(cos(iTime * 0.3), 0.0);\n    //a = a + b;\n    \n    \n\n    \n    return a;\n}\n\n\n\nvec4 render4(vec3 coord)\n{\n    vec4 cam = vec4(0, 0, 0., -7.0);\n    vec4 dir = normalize(vec4(coord, 1.0));\n    \n    \n    float rx = 0.2 * iTime;\n    mat4 rot = mat4(\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, cos(rx), -sin(rx),\n        0, 0, sin(rx), cos(rx)\n    );\n    \n    cam = rot * cam;\n    dir = rot * dir;\n    \n    \n    \n    bool didHit = false;\n    \n    float eps = 0.01;\n    float t = 0.0;\n    \n    for(int i = 0; i < 50; i ++){\n        float d = sdf(cam);\n        if (abs(d) < eps) {\n            didHit = true;\n            break;\n        }\n        \n        t += d;\n        cam = cam + dir * d;\n    }\n    \n    if (!didHit) {\n        return vec4(0, 0, 0, -1.0);\n    }\n    \n    vec3 col = vec3(0);\n    \n   \n    float depth = t * 0.5;\n    float opacity = min(1./(2.*t+1.0), 1.0);\n\n    float heatR = sin(3.14 * depth / 2.0 + 0. * 3.14 / 3.) * 0.5 + 0.5;\n    float heatG = sin(3.14 * depth / 2. + 2. * 3.14 / 3.) * 0.5 + 0.5;\n    float heatB = sin(3.14 * depth / 2. + 4. * 3.14 / 3.) * 0.5 + 0.5;\n    \n    col = vec3(heatR, heatG, heatB);\n    \n    \n    return vec4(col, opacity);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // assume 1280 * 720\n    int index = int(fragCoord.x) + int(iResolution[0]) * int(fragCoord.y);\n    \n    // transform to 97x97x97 grid??\n    \n    int res = int(MAX_RES);\n    \n    int x = index % res;\n    int y = (index / res) % res;\n    int z = (index / res / res) % res;\n    \n    fragColor = render4(vec3(x, y, z) / float(res) * 2.0 - 1.0);   \n}\n","name":"Buffer A","description":"","type":"buffer"}]}