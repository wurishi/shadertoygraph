{"ver":"0.1","info":{"id":"MtXBDr","date":"1511615022","viewed":545,"name":"[WST1] Boring stuff","username":"Foxeh","description":"First \"shader\" of mine, done for Shadertoy event in Wroclaw.\nStrong 2/10, but hey, that's a start, I guess!\n(I had fun trying things out regardless :)","likes":5,"published":1,"flags":64,"usePreview":0,"tags":["fox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MdSSzh","filepath":"https://soundcloud.com/dancewiththedead/screams-and-whispers","previewfilepath":"https://soundcloud.com/dancewiththedead/screams-and-whispers","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Title: [WTS1] Boring stuff, Author: K.K\n// This shader is prepared for the first Wroclaw Shader Competition \n// organized by Faculty of Physics and Astronomy, Khronos Chapter and SIGGRAPH Chapter from Wroclaw\n#define effect1 ((mod(t, ct) > 15.0 && mod(t, ct) < 30.0) || (mod(t, ct) > 90.0 && mod(t,ct) < 105.0))\n#define effect2 ((mod(t, ct) > 30.0 && mod(t, ct) < 45.0) || (mod(t, ct) > 105.0 && mod(t, ct) < 120.0))\n#define effect3 ((mod(t, ct) > 45.0 && mod(t, ct) < 60.0) || (mod(t, ct) > 120.0 && mod(t, ct) < 135.0))\n#define effect4 ((mod(t, ct) > 60.0 && mod(t, ct) < 75.0) || (mod(t, ct) > 135.0))\n#define rtimer (mod(t, ct) < 30.0 || (mod(t, ct) > 75.0 && mod(t, ct) < 105.0))\n#define txt1 (t > 8.5 && t < 8.65)\n#define txt2 (t> 12.8 && t < 12.95)\n#define txt3 (t> 15.7 && t < 15.85)\n#define txt4 (t > 17.1 && t < 17.25)\n#define txt5 (t > 18.1 && t < 18.25)\n#define txt6 (t > 19.3 && t < 19.65)\n#define txt7 (t > 150.0 && t < 160.0)\n#define nastyTimes (txt1 || txt2 || txt3 || txt4 || txt5 || txt6 || txt7)\n#define t iTime\n\nfloat rand(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat magic(int ch, vec2 fragCoord) {\n    return mod(rand(vec2(fragCoord.y, iTime)), 1.0);\n}\n// txt encoding done with https://github.com/knarkowicz/ShadertoyText\nfloat GlyphSDF( vec2 p, float glyph ) {\n    p = abs( p.x - .5 ) > .5 || abs( p.y - .5 ) > .5 ? vec2( 0. ) : p;\n    return 2. * ( texture( iChannel0, p / 16. + fract( vec2( glyph, 15. - floor( glyph / 16. ) ) / 16. ) ).w - 127. / 255. );\n}\t\n\nvoid Text( inout vec3 color, vec2 p ) {    \n    float glyphRatio = 2.0;\n    vec2 glyphScale = 20. * vec2( 1., glyphRatio );\n    if(txt7) { glyphScale = 7. * vec2(1., glyphRatio); }\n    vec2 t0 = floor( p / glyphScale );\n\n    uint v = 0u;\n    if(txt1) {\n        v = t0.y == 1. ? ( t0.x < 4. ? 538976288u : ( t0.x < 8. ? 538976288u : ( t0.x < 12. ? 1668248151u : 7823724u ) ) ) : v;\n        v = t0.x >= 0. && t0.x < 16. ? v : 0u;\n    } else if(txt2) {\n        v = t0.y == 1. ? ( t0.x < 4. ? 538976288u : ( t0.x < 8. ? 1180114976u : ( t0.x < 12. ? 1465196609u : 114u ) ) ) : v;\n  \t\tv = t0.x >= 0. && t0.x < 16. ? v : 0u;\n    } else if(txt3) {\n        v = t0.y == 0. ? ( t0.x < 4. ? 538976288u : 1296900128u ) : v;\n  \t\tv = t0.x >= 0. && t0.x < 8. ? v : 0u;\n    } else if(txt4) {\n        v = t0.y == 2. ? ( t0.x < 4. ? 1195854163u : ( t0.x < 8. ? 1213219154u : ( t0.x < 12. ? 1634222880u : 1919251568u ) ) ) : v;\n  \t\tv = t0.x >= 0. && t0.x < 16. ? v : 0u;\n    } else if(txt5) {\n        v = t0.y == 0. ? ( t0.x < 4. ? 1869768779u : ( t0.x < 8. ? 544436078u : ( t0.x < 12. ? 1885431875u : 7497076u ) ) ) : v;\n  \t\tv = t0.x >= 0. && t0.x < 16. ? v : 0u;\n    } else if(txt6) {\n        v = t0.y == 2. ? ( t0.x < 4. ? 544303392u : ( t0.x < 8. ? 1867522086u : 108u ) ) : v;\n        v = t0.y == 1. ? ( t0.x < 4. ? 1713381408u : ( t0.x < 8. ? 29295u : 0u ) ) : v;\n        v = t0.y == 0. ? ( t0.x < 4. ? 1684105299u : ( t0.x < 8. ? 1867805285u : 8569u ) ) : v;\n        v = t0.x >= 0. && t0.x < 12. ? v : 0u;\n    } else if(txt7) {\n        v = t0.y == 6. ? ( t0.x < 4. ? 1663069769u : ( t0.x < 8. ? 543519585u : ( t0.x < 12. ? 544567161u : ( t0.x < 16. ? 1936943469u : ( t0.x < 20. ? 975201381u : ( t0.x < 24. ? 41u : 0u ) ) ) ) ) ) : v;\n        v = t0.y == 5. ? ( t0.x < 4. ? 1868854603u : ( t0.x < 8. ? 1869881459u : ( t0.x < 12. ? 541936928u : ( t0.x < 16. ? 544370534u : ( t0.x < 20. ? 543516788u : ( t0.x < 24. ? 1852143205u : ( t0.x < 28. ? 8564u : 0u ) ) ) ) ) ) ) : v;\n        v = t0.y == 4. ? ( t0.x < 4. ? 1970235475u : ( t0.x < 8. ? 1953853300u : ( t0.x < 12. ? 1919903264u : ( t0.x < 16. ? 1195987744u : ( t0.x < 20. ? 1095911239u : ( t0.x < 24. ? 639649872u : ( t0.x < 28. ? 1919437600u : ( t0.x < 32. ? 1936682607u : 33u ) ) ) ) ) ) ) ) : v;\n        v = t0.y == 3. ? 0u : v;\n        v = t0.y == 2. ? ( t0.x < 4. ? 639660393u : ( t0.x < 8. ? 1819234336u : ( t0.x < 12. ? 1919903264u : ( t0.x < 16. ? 1634226976u : ( t0.x < 20. ? 1953654116u : ( t0.x < 24. ? 2193775u : 0u ) ) ) ) ) ) : v;\n        v = t0.y == 1. ? ( t0.x < 4. ? 1630416430u : ( t0.x < 8. ? 1629512814u : ( t0.x < 12. ? 1948281964u : ( t0.x < 16. ? 1881171304u : ( t0.x < 20. ? 1819307877u : ( t0.x < 24. ? 101u : 0u ) ) ) ) ) ) : v;\n        v = t0.y == 0. ? ( t0.x < 4. ? 538976288u : ( t0.x < 8. ? 1752637472u : ( t0.x < 12. ? 1952522351u : ( t0.x < 16. ? 1701733748u : ( t0.x < 20. ? 8548u : 0u ) ) ) ) ) : v;\n        v = t0.x >= 0. && t0.x < 36. ? v : 0u;\n    }\n\tfloat c = float( ( v >> uint( 8. * t0.x ) ) & 255u );\n    \n    p = ( p - t0 * glyphScale ) / glyphScale;\n    p.x = ( p.x - .5 ) / glyphRatio + .5;\n\n    float sdf = GlyphSDF( p, c );\n    if ( c != 0. ) {\n    \tcolor = mix( vec3( .2 ), color, smoothstep( -.04, +.04, sdf ) );\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float ct = 150.0;\n    \n    if(nastyTimes) {\n        vec2 uv = fragCoord.xy / iResolution.xy;\n        vec2 p = 2. * uv - 1.;\n        p.x *= iResolution.x / iResolution.y;    \n        p = p * 100. - vec2( -150, -78 );\n\n        float woot = mod(t, ct);\n        vec3 col = vec3(0.0);\n        if(txt4) {\n        col = vec3(tan(woot), woot/100.0, sin(woot) * tan(woot));\n        } else {\n        col = vec3(cos(woot), mod(exp(woot), 1.0), tan(cos(uv.x)) * woot/100.0);\n        }\n        if(txt7) {\n            col = vec3(0.5);\n        }\n            \n        \n        Text( col, p );\n        fragColor = vec4( col, 1. );\n    }\n    if(!nastyTimes) {\n\n        int choice = 0;\n        \n        float t1 = 2.42;\n        float rot = radians(t * 45.0);\n        vec2 m = vec2(sin(rot), cos(rot));\n        vec2 q = fragCoord.xy / iResolution.xy;\n        vec2 p = (-1.0 + 2.0 * q) * vec2(iResolution.x / iResolution.y, 1.0) * m;\n        //vec2 q = fragCoord.xy / iResolution.xy;\n        //vec2 p = 2. * q - 1. * m;\n        mat2 re = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n\n        if(mod(t, 15.0) > 7.5) {\n\n            if(mod(floor(fragCoord.y), floor(2.0)) == floor(0.0)) {\n                fragCoord.x += 40.0;\n                choice = 1;\n            } else {\n                fragCoord.x -= 40.0;\n                choice = 2;\n            }\n        }\n\n\n        if(mod(t, ct) < 30.0 || mod(t, ct) > 60.0) {\n            p = (-1.0 + 2.0 * q) * vec2(iResolution.x / iResolution.y, 1.0);\n        } else if(mod(t, ct) > 45.0 && mod(t, ct) < 60.0) {\n            m = vec2(tan(rot), sin(rot)/cos(rot));\n            p = (-1.0 + 2.0 * q) * vec2(iResolution.x / iResolution.y, 1.0) * m / 2.0;\n        }\n\n        float d = abs(sin(length(p)*10.0+0.5)) + 0.6;\n        vec2 uv = vec2(p)/d;\n\n        if(rtimer || effect4) {\n            uv *= re; \n        }\n        uv = uv * (tan(t*t1));\n\n        float woot = mod(t, ct);\n        vec3 col = vec3(sin(woot), woot/100.0, tan(woot));\n\n        if(effect1) { //15-30s 90-105\n            col = vec3(woot/100.0, sin(woot), mod(exp(woot), 1.0) * tan(woot));\n        } else if(effect2) { //30-45s 105-120\n            woot = magic(choice, fragCoord.xy);\n            uv.y -= 0.2;\n            col = vec3(cos(woot), mod(exp(woot), 1.0), tan(cos(uv.x)) * woot/100.0);\n        } else if(effect3) { //45-60s 120-135\n            woot = magic(choice, fragCoord.xy);\n            uv.y -= 0.2;\n            col = vec3(tan(woot), woot/100.0, sin(woot) * tan(woot)); \n        } else if(effect4) { //60-75s 135-150\n            woot = magic(choice, fragCoord.xy);\n            col = vec3(mod(abs(exp(woot) - exp(fragCoord.x)) * sin(woot), 1.0),\n                       woot/100.0 * magic(choice, uv.xy) * sin(uv.y),\n                       sin(uv.x / 0.5 * uv.y));\n        }\n\n\n        if(mod(t, 30.0) < 15.0 || (mod(t, ct) > 60.0 && mod(t,ct) < 75.0)) { \n            col = col * 1.5 / d * (abs(sin(5.0 + mod(t, 4.0)))) * uv.x;\n        } else {\n            col = col * 1.5 / d * (abs(sin(5.0 + mod(t, 4.0)))) * uv.y;\n        }\n        col *= -1.0;\n        if(choice == 2 ) {\n            col *= -1.0;\n        } else if(mod(t, 30.0) < 15.0 && mod(t, ct) < 45.0) {\n            col *= mod(exp(mod(t, 15.0)), 1.0);\n        } else if(effect1) {\n            if(mod(t, 15.0) < 7.5)\n                col *= cos(exp(fragCoord.y/ uv.x));\n            else col *= cos(exp(fragCoord.y / uv.y)) * sin(uv.y / uv.x) * -1.0;\n        } else if(effect4) {\n            col *= mod(floor(exp(uv.x)) * uv.y * tan(rot), 1.0) * abs(sin(uv.x / uv.y));\n        }\n        fragColor = vec4(col, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}