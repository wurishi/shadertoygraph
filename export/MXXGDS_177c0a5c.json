{"ver":"0.1","info":{"id":"MXXGDS","date":"1707867985","viewed":48,"name":"Ray of God V2","username":"Dinofox12","description":"test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized coordinates\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / min(iResolution.y, iResolution.x);\n\n    // Apply matrix transformation (rotation)\n    uv = mat2(cos(iTime), -sin(iTime), sin(iTime), cos(iTime)) * uv;\n\n    // Raymarching setup\n    vec3 rayOrigin = vec3(0.0, 0.0, -5.0);\n    vec3 rayDirection = normalize(vec3(uv, 1.5));\n    float distance = 1.0;\n    vec3 color = vec3(0.0);\n\n    // Raymarching iterations\n    for (int i = 0; i < 100; i++) \n    {\n        vec3 rayPosition = rayOrigin + distance * rayDirection;\n        float terrainHeight = sin(rayPosition.x * 6.0) + cos(rayPosition.y * 10.0); // Adjusted terrainHeight\n        float sceneDist = rayPosition.y - terrainHeight;\n\n        // Apply color modulation based on distance\n        vec3 interpolatedColor = mix(vec3(0.2, 0.7, 0.9), vec3(1.0, 0.8, 0.2), smoothstep(0.0, 0.1, abs(sceneDist)));\n\n        // Add some cool visual effects\n        interpolatedColor *= vec3(1.0, 0.8, 0.2) + 0.2 * cos(vec3(2.0, 3.0, 1.0) * iTime + uv.xyx);\n\n        // Accumulate color based on distance\n        color += interpolatedColor * 0.9;\n\n        // Increment distance\n        distance += 0.2;\n\n        // Break if close to the surface\n        if (abs(sceneDist) < 0.5) \n        {\n            break;\n        }\n    }\n\n    // Output final color\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}