{"ver":"0.1","info":{"id":"MXlBWM","date":"1728483343","viewed":27,"name":"Heart'n'hypnos","username":"vanyae","description":"Heart'n'hypnos","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["hearts","hypnosis","hypnos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dist(vec2 pol)\n{\n    pol.x = fract(pol.x);\n    if (pol.x >= pol.y)\n    {\n        pol.y += 0.5;\n        return abs(pol.x - pol.y);\n    }\n    else\n    {\n        pol.y -= 0.5;\n        return abs(pol.x - pol.y);\n    }\n}\n\nmat2 _rot(float th)\n{\n    vec2 a = sin(vec2(1.58, 0) + th);\n    return mat2(a.xy, -a.y, a.x);\n}\n\nfloat getLighting(vec2 p, vec2 lightPos)\n{\n    float lightIntensity = 1.0 / (length(p - lightPos) + 0.1);\n    return clamp(lightIntensity, 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / min(iResolution.y, iResolution.x);\n\n    float bg_intensity = 0.8 + 0.2 * sin(iTime * 2.0 + p.x * 4.0);\n    vec3 bcol = mix(vec3(0.0, 0.8, 0.0), vec3(0.0, 0.4, 0.0), p.y);\n    bcol *= (1.0 + sin(iTime + p.x * 2.0) * 0.2);\n\n    float ss = pow(mod(iTime, 1.5) / 1.5, .2) * 0.5 + 0.5;\n    ss = 1.0 + ss * 0.5 * sin(mod(iTime, 1.5) * 6.2831 * 3.0 + p.y * 0.5) * exp(-mod(iTime, 1.5) * 4.0);\n    p *= vec2(0.5, 1.5) + ss * vec2(0.5, -0.5);\n\n    p.y -= 0.25;\n    float a = atan(p.x, p.y) / 3.141593;\n    float r = length(p);\n    float h = abs(a);\n    float d = (13.0 * h - 22.0 * h * h + 10.0 * h * h * h) / (6.0 - 5.0 * h);\n\n    float s = 0.75 + 0.75 * p.x;\n    s *= 1.0 - 0.4 * r;\n    s = 0.3 + 0.7 * s;\n    s *= 0.5 + 0.5 * pow(1.0 - clamp(r / d, 0.0, 1.0), 0.1);\n\n    vec3 hcol = vec3(1.0, 0.2, 0.6) * s;\n\n    vec2 lightPos = vec2(0.5, 1.0);\n    float lighting = getLighting(p, lightPos);\n\n    vec3 col = mix(bcol, hcol * lighting, smoothstep(-0.01, 0.01, d - r));\n\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    float rotationSpeed = 7.0;\n    mat2 rot = _rot(iTime * rotationSpeed);\n\n    uv *= 2.0;\n    uv *= rot;\n\n    float rad = acos(dot(normalize(uv), vec2(1.0, 0.0)));\n    float angle = degrees(rad) / 360.0;\n    if (uv.y < 0.0)\n        angle = 1.0 - angle;\n\n    float l = length(uv);\n    vec2 polar = vec2(l, angle);\n\n    float maxSpiralRadius = d; \n    float spiralFactor = sin(polar.x * 10.0 + 5.0) * 0.05; \n\n    float spiralThickness = 0.05; \n    float d_spiral = dist(polar + vec2(min(spiralFactor, maxSpiralRadius), 0));\n\n    if (d_spiral < spiralThickness && d > r) \n    {\n        float spiralColorFactor = sin(polar.x * 10.0 + 20.0); \n        col = mix(vec3(0.0, 1.0, 0.0), vec3(0.0), smoothstep(-0.5, 0.5, spiralColorFactor));\n    }\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}