{"ver":"0.1","info":{"id":"lc3XD8","date":"1713849551","viewed":82,"name":"Neon Laser","username":"ArchaicVirus","description":"A procedural laser","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["laser"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Improved noise function using a hash\nfloat hash(float n) {\n    return fract(sin(n) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n    vec2 ip = floor(p);\n    vec2 u = fract(p);\n    u = u*u*(3.0-2.0*u);\n\n    float res = mix(\n        mix(hash(ip.x+ip.y*57.0), hash(ip.x+1.0+ip.y*57.0), u.x),\n        mix(hash(ip.x+(ip.y+1.0)*57.0), hash(ip.x+1.0+(ip.y+1.0)*57.0), u.x), u.y);\n    return res*res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Aspect ratio correction\n    uv.x *= 0.5 / 0.5;\n\n    // Define the position and thickness of the laser\n    float laserPos = 0.5;\n    float thickness = 0.030; // Core thickness\n\n    // Adding noise to create wavy effect and wisps\n    float noiseValue = noise(uv * 50.0125 + (iTime * uv.y * 40.0) * 2.5) * 0.020 * sin(uv.x * 7.115);\n\n    // Calculate distance from the center of the laser\n    float dist = abs(uv.y - laserPos);\n\n    // Glow effect using smoothstep for soft falloff\n    float glow = smoothstep(thickness, pow(thickness, iTime * dist * 0.015), dist - noiseValue * 0.395);\n\n    // Core intensity and color\n    float core = smoothstep(thickness, 0.0, dist - noiseValue) * 1.5;\n    vec3 color = vec3(0.0, 0.8, 0.1); // Green core\n\n    // Combine core and glow\n    vec3 finalColor = mix(color * core, vec3(0.0, 0.4, 0.0), glow);\n\n    // Output color\n    fragColor = vec4(finalColor, 1.0 - glow);\n}","name":"Image","description":"","type":"image"}]}