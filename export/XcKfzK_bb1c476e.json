{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"\nfloat segment(vec2 P, vec2 A, vec2 B, float r) \n{\n    vec2 g = B - A;\n    vec2 h = P - A;\n    float d = length(h - g * clamp(dot(g, h) / dot(g,g), 0.0, 1.0));\n\treturn 1. - step(r, d);\n}\n\n\nfloat circle(vec2 p, vec2 c, float r)\n{\n    return step(length(p - c), r);\n}\n\nfloat donut(vec2 p, vec2 c, float r, float w)\n{\n    return circle(p, c, r) - circle(p, c, r - w);\n}\n\nfloat gts_text(vec2 p)\n{\n    p.x = mod(p.x, 2.37);\n    \n    float gts = segment(p, vec2(0.6, 0.5), vec2(0.6, 1), 0.09);\n    gts += segment(p, vec2(0.6, 1), vec2(0.9, 1), 0.09);\n    gts += segment(p, vec2(1.2, 1), vec2(1.7, 1), 0.09);\n    gts += segment(p, vec2(1.45, 1), vec2(1.45, 0.5), 0.09);\n    float s_x = 2.2;\n    gts += max(0., donut(p, vec2(s_x, 0.75), 0.34 ,0.18) - 1. + step(p.x, s_x));\n    gts += segment(p, vec2(2.2, 1), vec2(2.27, 1), 0.09);\n    gts += segment(p, vec2(2.2, 0.5), vec2(2.27, 0.5), 0.09);\n    return gts;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    uv.x += iTime * .1;\n    float scale = 1.5;\n    uv *= scale;\n    \n    float gts = gts_text(uv);\n    \n    // Output to screen\n    fragColor = vec4(gts, gts, gts, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XcKfzK","date":"1734273422","viewed":20,"name":"test gts","username":"mihail8531","description":"gts 2025","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["textsimple"],"hasliked":0,"parentid":"","parentname":""}}