{"ver":"0.1","info":{"id":"Dt3Bzr","date":"1700848553","viewed":83,"name":"fbm and spiral","username":"nayk","description":"noise, fbm, galaxy, star","likes":4,"published":1,"flags":1,"usePreview":0,"tags":["noise","fbm","star","galaxy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*original https://www.shadertoy.com/view/dsXfDn https://www.shadertoy.com/view/lslyRn */\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n// ShaderToy GLSL Fragment Shader Code\n\nconst float PI = 3.14159265358979323846264;\n\nconst int MAX_PRIMARY_RAY_STEPS = 64; // Adjust for performance\n\n// Function to generate a continuous rainbow spectrum\nvec3 rainbowColor(float angle) {\n    // Normalize the angle to [0, 1]\n    float normalized = fract(angle / (2.0 * PI));\n\n    // Generate the rainbow spectrum based on the normalized angle\n    float red = 0.5 + 0.5 * cos(2.0 * PI * normalized);\n    float green = 0.5 + 0.5 * cos(2.0 * PI * (normalized - 0.333));\n    float blue = 0.5 + 0.5 * cos(2.0 * PI * (normalized - 0.666));\n\n    return vec3(red, green, blue);\n}\n\nvec2 rotate2d(vec2 v, float a) {\n    return vec2(v.x * cos(a) - v.y * sin(a), v.y * cos(a) + v.x * sin(a));\n}\n\nfloat sdTorus(vec3 p, vec2 t) {\n    vec2 q = vec2(length(p.xz)-t.x, p.y);\n    return length(q)-t.y;\n}\n\nfloat distanceField(vec3 p) {\n    return -sdTorus(p, vec2(4.0, 3.0));\n}\n\nvec3 castRay(vec3 pos, vec3 dir, float threshold) {\n    for (int i = 0; i < MAX_PRIMARY_RAY_STEPS; i++) {\n        float dist = distanceField(pos);\n        if (abs(dist) < threshold) break;\n        pos += dist * dir;\n    }\n    return pos;\n}\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nmat2 rotate2d(float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(\n        c, -s,\n        s, c\n    );\n}\n\nfloat noise(vec2 p)\n{\n    vec2 ip = floor(p);\n    vec2 fp = fract(p);\n    float a = hash12(ip);\n    float b = hash12(ip + vec2(1, 0));\n    float c = hash12(ip + vec2(0, 1));\n    float d = hash12(ip + vec2(1, 1));\n    \n    vec2 t = smoothstep(0.0, 1.0, fp);\n    return mix(mix(a, b, t.x), mix(c, d, t.x), t.y);\n}\n\nfloat fbm(vec2 p, int octaveCount)\n{\n    float value = 0.0;\n    float amplitude = 0.5;\n    for (int i = 0; i < octaveCount; ++i)\n    {\n        value += amplitude * noise(p);\n        p *= rotate2d(10.100);\n        p *= 3.0;\n        amplitude *= 0.55;\n    }\n    return value;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\n vec4 mousePos = (iMouse / iResolution.xyxy) * 2.0 - 1.0;\n    vec2 screenPos = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    vec3 cameraPos = vec3(0.0, 0.0, -3.8);\n     float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 10.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n  \n    dir.xy*=ma;\n    vec3 cameraDir = vec3(0.0, 0.0, 0.5);\n    vec3 planeU = vec3(1.0, 0.0, 0.0) * 0.8;\n    vec3 planeV = vec3(0.0, iResolution.y / iResolution.x * 1.0, 0.0);\n    vec3 rayDir = normalize(cameraDir + screenPos.x * planeU + screenPos.y * planeV);\n    \n    uv = 1.0 * uv ;\n    uv.x *= iResolution.x / iResolution.y;\n\n    uv += 2.0 * fbm(uv+0.8*iTime, 10) -1.0;\n      uv.xy*=ma;\n    float dist = abs(uv.x);\n    vec3 col = vec3(0.2, 0.3, 0.8) * pow(mix(0.0, 0.07, hash11(iTime)) / dist, 1.0);\n   \n    col = pow(col, vec3(1.0));\n    \n    \n    \n  \n\n\tfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\t\n\tfloat s = 0.0;\n\tfor (int i = 0; i < 90; i++)\n\t{\n\t\tvec3 p = s * vec3(uv, 0.0);\n\t\tp.xy *= ma;\n\t\tp += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1);\n\t\tfor (int i = 0; i < 8; i++)\tp = abs(p) / dot(p,p) - 0.659;\n\t\tv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\n\t\tv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\n\t\tv3 += length(p.xy*10.) * .0003;\n\t\ts  += .035;\n\t}\n\t\n\tfloat len = length(uv);\n\tv1 *= smoothstep(.7, .0, len);\n\tv2 *= smoothstep(.5, .0, len);\n\tv3 *= smoothstep(.9, .0, len);\n\t\n\tvec3 colo = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n\t\t\t\t\t(v1 + v3) * .3,\n\t\t\t\t\t v2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n\n    vec3 rayPos = castRay(cameraPos, rayDir, 0.01);\n    \n    float majorAngle = atan(rayPos.z, rayPos.x);\n    float minorAngle = atan(rayPos.y, length(rayPos.xz) - 4.0);\n    \n    float edge = mod(8.0 * (minorAngle + majorAngle + iTime) / PI, 1.0);\n    float stripe = edge < 0.7 ? smoothstep(edge, edge+0.03, 0.5) : 1.0-smoothstep(edge, edge+0.03, 0.96);\n\n    vec3 color = rainbowColor(minorAngle + majorAngle + iTime);\n\t//mouse rotation\n\n\tvec3 from=vec3(1.,.5,0.5);\n    \n\tfrom+=vec3(time*2.,time,-2.);\n\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\n    fragColor+=vec4(col*colo,1.);\n\n}\n","name":"Image","description":"","type":"image"}]}