{"ver":"0.1","info":{"id":"wdtyRB","date":"1601230698","viewed":188,"name":"Moving cutouts","username":"AntoineC","description":"A minimalist animation for a gray and slow sunday!","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["minimalist"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ----------------------------------------------------------------------------------------\n//\t\"Moving Cutouts\" by Antoine Clappier - Sep 2020\n//\n//\tLicensed under:\n//  A Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\n//\thttp://creativecommons.org/licenses/by-nc-sa/4.0/\n// ----------------------------------------------------------------------------------------\n\n#define Rot(a)   mat2(cos(a),sin(a),-sin(a),cos(a))\n\n\nvec2 Disk(vec2 uv, float radius, float eps)\n{\n    vec2  shadowTransl = 0.07*vec2(-1.0,1.0);\n    float shadowRadius = 2.0*0.09;\n    \n    float mask   = smoothstep(0.0, eps, length(uv) - radius);\n    float shadow = (1.0-0.65*smoothstep(-shadowRadius, shadowRadius, length(uv+shadowTransl) - radius));\n    \n    return vec2(mask, shadow);\n}\n\n\nfloat Paper(vec2 uv)\n{\n    uv *= 2.0;\n    \n    float   g;\n    g  = texture(iChannel0, uv*vec2(1.0,0.01)).r;\n    g *= texture(iChannel0, uv*vec2(0.01,1.0)).r;\n    g  = 0.7*g +texture(iChannel0, 0.5*uv).r;\n    return  g;\n}\n\n\nvec3 Bump(vec2 uv, float eps)\n{\n    vec2   delta = vec2(eps, 0.0);\n    float  a     = Paper(uv);\n    float  b     = Paper(uv + delta.xy);\n    float  c     = Paper(uv + delta.yx);\n    \n    vec3   n     = normalize(vec3(b-a, c-a, 7.5));\n \n    return n;\n}\n\n\nvec3 Shade(vec3 col, vec2 uv, float r, float a, float eps)\n{\n    // Get mask and shadow:\n\tvec2 ms = Disk(uv, 1.07*r, eps);\n\n    // Paper bump;\n    vec3  normal  = Bump(uv*Rot(a), eps);\n    float dif     = 0.8*dot(normal, vec3(1.0));\n\n    // Highlight cutout borders:\n    float border  = 0.15*smoothstep(0.005+eps, 0.0, length(uv) - 1.07*r);\n    dif          += border*(uv.x-uv.y);\n    \n    // Apply shadow:\n    col = mix(0.5*vec3(0.04, 0.12, 0.18), col, ms.y);\n    \n    // Apply masked texture:\n    col = mix(col, vec3(dif), ms.x);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Normalized coordinates:\n\tfloat eps = 2.0/iResolution.y;\n\tvec2  uv  = eps*(fragCoord - 0.5*iResolution.xy);\n    float t   = iTime;\n\n\t// Render:\n\tvec3 col = vec3(mix(0.99, 0.93, texture(iChannel1, 2.0*uv).r));\n\n    col = Shade(col, uv-vec2(-0.033*cos(t+2.3), 0.000           ), 0.50, 4.0, eps);\n    col = Shade(col, uv-vec2( 0.000,            0.035*sin(t+2.0)), 0.55, 1.0, eps);\n    col = Shade(col, uv-vec2( 0.033*sin(t+1.3),-0.033*cos(t+1.3)), 0.61, 2.0, eps);\n    col = Shade(col, uv-vec2(-0.036*cos(t+1.0), 0.000           ), 0.67, 3.0, eps);\n    col = Shade(col, uv,                                           0.74, 0.0, eps);\n    \n    // Grading:\n \tcol *= smoothstep(2.2, 0.7, length(uv));\n    col += smoothstep(-0.3, 1.0, uv.x-uv.y)*vec3(255.,201.,14.)*0.00020;\n    col *= step(abs(uv.x), 1.0);\n\n    fragColor = vec4(col,1.0);\n}\n\n\n\n\n","name":"Image","description":"","type":"image"}]}