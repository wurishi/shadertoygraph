{"ver":"0.1","info":{"id":"DldGD4","date":"1682446573","viewed":68,"name":"Foggy Kleinian Water Reflection","username":"gettyrandom","description":"Mashup of the few scripts I found on shadertoy.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["kleinian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RESOLUTION  iResolution\n#define TIME        iTime\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n#define BPM         (145.0*0.5)\n\nconst float planeDist = 1.0-0.82;\n\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash3(vec3 r)  {\n  return fract(sin(dot(r.xy,vec2(1.38984*sin(r.z),1.13233*cos(r.z))))*653758.5453);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\nvec2 soff(float h0) {\n  float h1 = fract(h0*8677.0);\n  return -1.0+2.0*vec2(h0, h1);\n}\n\nvec3 offset(float z) {\n  float a = z;\n  vec2 p = -mix(0.0, 0.1, smoothstep(40.0, 50.0, TIME))*(vec2(cos(a), sin(a*sqrt(2.0))) + vec2(cos(a*sqrt(0.75)), sin(a*sqrt(0.5))));\n  return vec3(p, z);\n}\n\nvec3 doffset(float z) {\n  float eps = 0.05;\n  return (offset(z + eps) - offset(z - eps))/(2.0*eps);\n}\n\nvec3 ddoffset(float z) {\n  float eps = 0.05;\n  return (doffset(z + eps) - doffset(z - eps))/(2.0*eps);\n}\n\nvec3 skyColor(vec3 ro, vec3 rd) {\n  const vec3 gcol = HSV2RGB(vec3(0.55, 0.9, 0.035));\n  vec2 pp = rd.xy;\n  return gcol/dot(pp, pp);\n}\n\nvec3 plane(vec3 ro, vec3 rd, vec3 pp, vec3 off, float aa, float n) {\n  float l = distance(ro, pp);\n  vec3 hn;\n  vec2 p = (pp-off*vec3(1.0, 1.0, 0.0)).xy;\n\n  p *= 1.0+l*l;\n\n  const float csz = 0.15;\n  const float co  = 0.33*csz;\n\n  vec3 col = vec3(0.0);\n\n  const float cnt = 5.0;\n  const float icnt = 1.0/cnt;\n  for (float i = 0.0; i < 1.0; i += icnt) {\n    vec2 cp = p;\n    vec2 cn = mod2(cp, vec2(csz));\n\n    float h0 = hash3(vec3(cn, n)+123.4+i);\n    float h1 = fract(3677.0*h0);\n\n    cp += soff(h0)*co;\n\n    float cl = length(cp);\n    float d = (cl-0.0005);\n    d = max(d, 0.0001);\n\n    vec3 bcol = 0.000005*(1.0+sin(vec3(0.0, 1.0, 2.0)+ TAU*h1));\n    bcol *= smoothstep(0.17*csz, 0.05*csz, cl)*0.15/(d*d*(l*l+0.01));\n\n    col += bcol;\n    p += icnt;\n    p *= ROT(1.0);\n  }\n\n\n  return col;\n}\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  float lp = length(p);\n  vec2 np = p + 1.0/RESOLUTION.xy;\n  float rdd = 3.0;\n\n  vec3 rd = normalize(-p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd = normalize(-np.x*uu + np.y*vv + rdd*ww);\n\n  const int furthest = 9;\n  const int fadeFrom = max(furthest-2, 0);\n\n  const float fadeDist = planeDist*float(furthest - fadeFrom);\n  float nz = floor(ro.z / planeDist);\n\n  vec3 col = skyColor(ro, rd);\n\n  // Steps from nearest to furthest plane and accumulates the color\n  for (int i = 1; i <= furthest; ++i) {\n    float pz = planeDist*nz + planeDist*float(i);\n\n    float pd = (pz - ro.z)/rd.z;\n\n    if (pd > 0.0) {\n      vec3 pp = ro + rd*pd;\n      vec3 npp = ro + nrd*pd;\n\n      float aa = 3.0*length(pp - npp);\n\n      vec3 off = offset(pp.z);\n\n      vec3 pcol = plane(ro, rd, pp, off, aa, nz+float(i));\n\n      float nz = pp.z-ro.z;\n      float fadeIn = smoothstep(planeDist*float(furthest), planeDist*float(fadeFrom), nz);\n      float fadeOut = smoothstep(0.0, planeDist*0.1, nz);\n      pcol *= fadeOut*fadeIn;\n\n      col += pcol;\n    }\n  }\n\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  float tm  = planeDist*TIME*BPM/60.0;\n  vec3 ro   = offset(tm);\n  vec3 dro  = doffset(tm);\n  vec3 ddro = ddoffset(tm);\n\n  vec3 ww = normalize(dro);\n  vec3 uu = normalize(cross(normalize(vec3(0.0,1.0,0.0)+ddro), ww));\n  vec3 vv = cross(ww, uu);\n\n  vec3 col = color(ww, uu, vv, ro, p);\n  col -= .1*vec3(0.0, 1.0, 2.0).zyx*length(pp);\n  col *= smoothstep(1.5, 0.5, length(pp));\n  col *= smoothstep(1.0, 15.0, TIME);\n  col = aces_approx(col);\n  col = sRGB(col);\n\n  return col;\n}\n\n#define NUM_LAYERS 16.0\n#define ITER 23\n#define PI 3.141592654\n#define TAU (2.0*PI)\n\nvec4 tex(vec3 p)\n{\n    float t = iTime+78.;\n    vec4 o = vec4(p.xyz,3.*sin(t*.1));\n    vec4 dec = vec4 (1.,.9,.1,.15) + vec4(.06*cos(t*.1),0,0,.14*cos(t*.23));\n    for (int i=0 ; i++ < ITER;) o.xzyw = abs(o/dot(o,o)- dec);\n    return o;\n}\n\nvec3 kleinian(vec2 uv, float scale) {\n\n    vec2 p = (2.0 * uv - iResolution.xy) / iResolution.y * scale;\n    vec3 c = vec3(0.5 * sin(iTime * 0.3) + 0.5, 0.5 * sin(iTime * 0.7) + 0.5, 0.5 * sin(iTime * 1.1) + 0.5);\n\n    vec2 t = vec2(sin(iTime * 0.2) * 0.5 + 0.5, cos(iTime * 0.1) * 0.5 + 0.5);\n    vec3 d = vec3(0.0);\n\n    for (int i = 0; i < 20; ++i) {\n        vec3 p3 = vec3(p.xy, 1.0) * scale;\n        vec4 p4 = vec4(p3.xy, p3.yz) - vec4(t.xy, t.yx);\n        vec4 c4 = vec4(c.xy, c.yz);\n\n        float r = dot(p4.xyz, p4.xyz);\n        p4 = p4 * (1.0 / r) - c4;\n\n        p = p4.xy;\n        d += p4.xyz;\n    }\n\n    vec3 col = vec3(0.0);\n    float threshold = 0.9; // Increase this value to remove black blobs\n    col.r = smoothstep(threshold, 1.0, d.x);\n    col.g = smoothstep(threshold, 1.0, d.y);\n    col.b = smoothstep(threshold, 1.0, d.z);\n\n    return col;\n}\n\n\nvec3 mashup(in vec2 uv, float depth) {\n    vec3 starFieldColor = effect(uv, vec2(depth * planeDist));\n    vec3 fractalColor = tex(vec3(uv * mix(5.0, 0.5, depth), depth * 4.0)).xyz;\n\n    float colorFactor = 0.5 + 0.5 * sin(iTime * 0.5);\n    vec3 dynamicFractalColor = mix(vec3(1.0), fractalColor, colorFactor);\n\n    float scale = 4.0; // Increase this value to zoom out further\n\n    vec3 kleinianColor = kleinian(uv, scale);\n    vec3 finalColor = mix(starFieldColor, dynamicFractalColor, smoothstep(0.0, 1.0, depth));\n\n    finalColor = mix(finalColor, kleinianColor, 0.5); // Adjust the last parameter (0.5) to control the blending intensity\n\n    return finalColor;\n}\n\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n\n    vec3 finalColor = vec3(0);\n\n    for (float depth = 0.0; depth <= 1.0; depth += 1.0 / NUM_LAYERS) {\n        vec3 layerColor = mashup(uv, depth);\n        finalColor = mix(finalColor, layerColor, smoothstep(0.0, 1.0, depth));\n    }\n\n    finalColor = aces_approx(finalColor);\n    finalColor = sRGB(finalColor);\n\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}