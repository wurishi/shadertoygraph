{"ver":"0.1","info":{"id":"XlGyRm","date":"1566442903","viewed":111,"name":"ATFogODLookup","username":"yuletian","description":"ATFogODLookup","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["atmosphericfog"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 RaySphereIntersection(vec3 RayOrigin, vec3 RayDirection, float SphereRadius)\n{\n    float a = dot(RayDirection, RayDirection);\n    float b = 2.0 * dot(RayDirection, RayOrigin);\n    float c = dot(RayOrigin, RayOrigin) - (SphereRadius * SphereRadius);\n    float d = (b*b) - 4.0*a*c;\n    if (d < 0.0) return vec2(1e5,-1e5);\n    return vec2(\n        (-b - sqrt(d))/(2.0*a),\n        (-b + sqrt(d))/(2.0*a)\n    );\n}\n\nfloat GetHeighOpticalDepthFactor(float Height, float ScaleHeigh)\n{\n\treturn exp(-Height / ScaleHeigh);\n}\n\n#define AtmosRadius 6471000.0\n#define PlanetRadius 6371000.0\n#define ScaleHeightRlh 8000.0\n#define ScaleHeightMie 1200.0\n#define SecondarySteps 1\n#define Pi 3.1415926\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float angle = uv.x;\n    float height = uv.y;\n    \n    vec3 PrimaryCurrentPos = vec3(0,0,0) + vec3(0,0,PlanetRadius+height*(AtmosRadius-PlanetRadius));\n    vec3 SunPosition = vec3(sin(angle*Pi), 0, cos(angle*Pi));\n    SunPosition = normalize(SunPosition);\n    \n    float CurrentDistance = RaySphereIntersection(PrimaryCurrentPos, SunPosition, AtmosRadius).y;\n    vec3 SecondaryPos = PrimaryCurrentPos + SunPosition * CurrentDistance * 0.5;\n    float SecondaryCurrentHeight = length(SecondaryPos) - PlanetRadius;\n    \n    \n    // Initialize the secondary ray time.\n    float jTime = 0.0;\n\n    // Calculate the step size of the secondary ray.\n    float SecondaryStepSize = RaySphereIntersection(PrimaryCurrentPos, SunPosition, AtmosRadius).y / float(SecondarySteps);\n\n    // Initialize optical depth accumulators for the secondary ray.\n    float SecondaryOdRlh = 0.0;\n    float SecondaryOdMie = 0.0;\n\n    // Sample the secondary ray.\n    for (int j = 0; j < SecondarySteps; j++) {\n\n        // Calculate the secondary ray sample position.\n        vec3 SecondaryCurrentPos = PrimaryCurrentPos + SunPosition * (jTime + SecondaryStepSize * 0.5);\n\n        // Calculate the height of the sample.\n        float SecondaryCurrentHeight = length(SecondaryCurrentPos) - PlanetRadius;\n\n        // Accumulate the optical depth.\n        SecondaryOdRlh += exp(-SecondaryCurrentHeight / ScaleHeightRlh) * SecondaryStepSize;\n        SecondaryOdMie += exp(-SecondaryCurrentHeight / ScaleHeightMie) * SecondaryStepSize;\n\n        // Increment the secondary ray time.\n        jTime += SecondaryStepSize;\n    }\n    \n    \n    /*\n    float SecondaryOdRlh = GetHeighOpticalDepthFactor(SecondaryCurrentHeight, ScaleHeightRlh) * CurrentDistance;\n    float SecondaryOdMie = GetHeighOpticalDepthFactor(SecondaryCurrentHeight, ScaleHeightMie) * CurrentDistance;\n\t*/\t\n\n    // Output to screen\n    fragColor = vec4(SecondaryOdRlh,SecondaryOdMie,0,1);\n}","name":"Image","description":"","type":"image"}]}