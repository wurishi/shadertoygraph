{"ver":"0.1","info":{"id":"XcfyDs","date":"1721744156","viewed":25,"name":"cardinal-compass-2","username":"thibaultlebrun","description":"test compass\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float size = .4;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy - .5);\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // PARAMETERS\n    float widthFactor = 12. + cos(iTime) * 2.;\n    float closeness = 1.62 + cos(iTime) * .1;\n    float rotationFactor = 0.98;\n    \n       \n    float time = iTime * (1. + sin(iTime) * 0.2);\n    BeatTime beatTime = getBeatTime(iTime);\n    \n    rotationFactor *= beatTime.beat;\n    \n    float positions[] = float[](0., PI / 2., PI, 3. * PI / 2.);\n    \n    vec3 col = beatTime.isEvenBar ? mix(vec3(1.), vec3(0.6), uv.y) :  mix(vec3(0.), vec3(0.3), uv.y);\n\n\n    for (int i = 0; i < 4; ++i) {\n        float pos = positions[i];\n        vec2 uvo = uv + vec2(-sin(time + pos) * size, -cos(time + pos)* size) * size * closeness;\n        \n        float rotation = pos + PI + mod(time, rotationFactor * 2. * PI);\n\n        vec2 rotated = rotate(uvo, rotation);\n\n        float d = sdfTriangleIsosceles(rotated, vec2(size / widthFactor, size / 2.));\n        \n        if (!beatTime.isEvenBar && !beatTime.isLastBar) {\n           d = abs(d) - abs(sin(time)) * .005;\n        }\n\n        if (d < 0.) {\n           col = beatTime.isEvenBar ? vec3(0.) : mix(0., 1., uv.y + .5) - col;\n        }\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float bpm = 124.;\n#define PI     3.14159265\n\nfloat getBeat(float time)\n{\n    return time * bpm / 60.;\n}\n\nfloat getFloatBeat(float time)\n{\n    return mod(getBeat(time), 4.);\n}\n\nint getIntBeat(float time)\n{\n    return int(getFloatBeat(time)) + 1;\n}\n\nint getIntBar(float time)\n{\n    return int(mod(getBeat(time), 16.) / 4.) + 1;\n}\n\nstruct BeatTime {\n    float beat;\n    float bar;\n    bool isEvenBeat;\n    bool isEvenBar;\n    bool isLastBeat;\n    bool isLastBar;\n};\n\nBeatTime getBeatTime(float time) {\n    float beat = float(getIntBeat(time));\n    float bar = float(getIntBar(time));\n    \n    return BeatTime(\n        beat, \n        bar,\n        mod(beat, 2.) == 0.,\n        mod(bar, 2.) == 0.,\n        beat == 4.,\n        bar == 4.\n    );  \n}\n\nvec2 rotate(vec2 uv, float th) {\n  return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n}\n\nfloat sdfTriangleIsosceles(in vec2 p, in vec2 q)\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}","name":"Common","description":"","type":"common"}]}