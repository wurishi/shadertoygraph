{"ver":"0.1","info":{"id":"lcjBzt","date":"1731258683","viewed":85,"name":"Fork Radial Visualizer","username":"ArthurTent","description":"from \"Radial Visualizer\":\n\"I combined the two new (today's) shadertoys into a visualizer, but I want to make the bars 3D extend into depth with lighting and everything, so I am going to try to tackle it.\"\n\nit's not listed on shadertoy anymore :-(","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["tunnel","fft","perlinnoise","visualizer","stars"],"hasliked":0,"parentid":"MXdGW2","parentname":"Radial Visualizer"},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Starry Infinite Tunnel\" by vovach777. https://shadertoy.com/view/l3tGDB\n// 2024-05-30 05:01:46\n\n// ver. 2\n// Endless Tunnel\n// By: Brandon Fogerty\n// bfogerty at gmail dot com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n#define PI 3.14159\n\n\nvec2 grad( ivec2 z )  // replace this anything that returns a random vector\n{\n\n    // Credits : Patricio Gonzalez Vivo, the Book of Shaders\n\n    // 2D to 1D  (feel free to replace by some other)\n    int n = z.x+z.y*11111;\n\n    // Hugo Elias hash (feel free to replace by another one)\n    n = (n<<13)^n;\n    n = (n*(n*n*15731+789221)+1376312589)>>16;\n\n    // simple random vectors\n    return vec2(cos(float(n)),sin(float(n)));                          \n}\n\nfloat noise( in vec2 p )\n{\n\n    // Credits : Patricio Gonzalez Vivo, the Book of Shaders\n\n    ivec2 i = ivec2(floor( p ));\n     vec2 f =       fract( p );\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( grad( i+ivec2(0,0) ), f-vec2(0.0,0.0) ), \n                     dot( grad( i+ivec2(1,0) ), f-vec2(1.0,0.0) ), u.x),\n                mix( dot( grad( i+ivec2(0,1) ), f-vec2(0.0,1.0) ), \n                     dot( grad( i+ivec2(1,1) ), f-vec2(1.0,1.0) ), u.x), u.y);\n}\n\n\n\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\nfloat snoise(vec3 p) {\n\n\tvec3 s = floor(p + dot(p, vec3(F3)));\n\tvec3 x = p - s + dot(s, vec3(G3));\n\n\tvec3 e = step(vec3(0.0), x - x.yzx);\n\tvec3 i1 = e*(1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n\tvec3 x1 = x - i1 + G3;\n\tvec3 x2 = x - i2 + 2.0*G3;\n\tvec3 x3 = x - 1.0 + 3.0*G3;\n\n\tvec4 w, d;\n\n\tw.x = dot(x, x);\n\tw.y = dot(x1, x1);\n\tw.z = dot(x2, x2);\n\tw.w = dot(x3, x3);\n\n\tw = max(0.6 - w, 0.0);\n\n\td.x = dot(random3(s), x);\n\td.y = dot(random3(s + i1), x1);\n\td.z = dot(random3(s + i2), x2);\n\td.w = dot(random3(s + 1.0), x3);\n\n\tw *= w;\n\tw *= w;\n\td *= w;\n\n\treturn dot(d, vec4(52.0));\n}\n\n\n\nvec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//const float PI = acos(-1.0);\nfloat map(float v, float v_min, float v_max, float out1, float out2)\n{\n    if ( v_max - v_min == 0. )\n        return out2;\n        \n     return (clamp(v,v_min,v_max) - v_min) / (v_max - v_min) * (out2-out1)+out1;\n}\n\nfloat fmod(float t,float a){\n  return fract(t/a)*a;\n}\n\nfloat angle_diff_grad(float angle1, float angle2)\n{\n    float d = abs(angle1 - angle2);\n    return d < 180. ? d : 360. - d;\n}\n\n\n#define cut_factor (0.3)\n#define black_hole_distance (20.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - iResolution.xy/2.) / min(iResolution.x, iResolution.y);\n    float distance = 2. / length(uv);\n    float angle = angle_diff_grad( map( atan(uv.y, uv.x), -PI,PI,0.,360.), 0. );\n               \n              vec2 uv2 = fragCoord/iResolution.xy;\n    uv2 = 2.*uv2 - 1.;\n    uv2.x *= iResolution.x/iResolution.y;\n    float t = iTime;\n    \n    /////////////////////////\n    \n    uv2 *= 5.;\n    t *= 1.1;\n    \n    /////////////////////////\n    vec3 colo = vec3(0);\n    float s;\n\n    const float N = 30.;\n    const float stripe_fact = 1.4;\n    const float stripe_width = 0.8; // [0..1]\n    \n    float r = length(uv2);\n    float th = (atan(uv2.y,uv2.x)+PI)/(2.*PI); // [0..1]\n    th += .1*t;\n    float ith = mod(floor(th*N)/N,1.);\n    float fth = mod(th,1./N)*N;\n    \n\n    vec3 finalColor = vec3(0);\n    float color = 0.;\n    float alpha = 0.;\n    float normal_distance = 0.;\n    if ( distance < black_hole_distance)\n    {\n        normal_distance = map(distance,0.,black_hole_distance,1.,0.);\n        alpha = pow(\n           abs( snoise(vec3(angle, map(distance,0.,black_hole_distance,0.,5.) + iTime*1.5, -iTime/4. )))\n           ,2.);\n           \n        if (alpha > cut_factor)\n        {\n           alpha = map(alpha, cut_factor, 1., 0., normal_distance * 6.);\n           color = snoise(vec3(uv.x/1.,uv.y/1., normal_distance + iTime/2.));\n           finalColor = hsv2rgb( vec3( color, normal_distance, alpha ));\n           //vec3 finalColor = vec3( noise3( vec3(uv.x*10., uv.y*10., distance) ));\n         //  fragColor = vec4( finalColor, 1.0 );\n   \n         }\n    } \n    s =  step(1., r) ; // empty core\n    s *= step(.35, abs(fth)*r ); // cones\n    \n   float samp = texture(iChannel0, vec2(ith, 0.25)).r;\n   s *= step(fract(4.*r*stripe_fact), stripe_width); // stripes\n   s *= step(1.35*r, floor( (1.5 + 8.*samp)*stripe_fact )/stripe_fact );\n\n   colo = vec3(s);\n   colo = s * hsv2rgb( vec3( ith, 1., (1.5-normal_distance )) );\n      \n   fragColor = vec4(finalColor.rgb + colo,1.0); \n    \n}\n\n","name":"Image","description":"","type":"image"}]}