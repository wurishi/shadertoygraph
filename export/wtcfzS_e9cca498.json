{"ver":"0.1","info":{"id":"wtcfzS","date":"1613249579","viewed":73,"name":"eye bob","username":"EDragon","description":"oh yeah\nI forgot I did this old thing\nwelp, time to release it just because it's somewhat cool","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tween","ease"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define s smoothstep\n#define res iResolution.xy\n#define t mod(3.*iTime,4.)\n\nmat2 rot(float a){\n    float s=sin(a),c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat ell(vec2 uv, vec4 p){\n    float minSize = min(p.z, p.w);\n    return length((uv-p.xy)/p.zw)*minSize-minSize;\n}\n\nfloat box(vec2 uv, vec2 p, vec2 size, float rotation){\n    uv -= p;\n    uv *= size;\n    uv *= rot(rotation*pi);\n    float r = step(abs(uv.x), .2);\n    float b = step(abs(uv.y), .2);\n    return r*b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy/res.xy;\n    vec2 uv1 = uv;\n    uv.x /= res.y/res.x;\n    uv -= vec2(1., .5);\n    vec2 p = vec2(.0, .0);\n    vec2 size = vec2(1., 1.);\n    float rotation = -.2;\n    \n    \n    size.y += inCubic(.0, 1., .25, t);\n    size.y -= outCubic(1., 1., .25, t);\n    size.x -= inCubic(.0, 1., .25, t);\n    size.x += outCubic(1., 1., .25, t);\n    p.x -= inOutCubic(.0, 2., .15, t);\n    p.y -= inCubic(.0, 1., abs(rotation)*.75, t);\n    p.y += outCubic(1., 1., abs(rotation)*.75, t);\n    \n    size.y += inCubic(2., 1., .25, t);\n    size.y -= outCubic(3., 1., .25, t);    \n    size.x -= inCubic(2., 1., .25, t);\n    size.x += outCubic(3., 1., .25, t);\n    p.x += inOutCubic(2., 2., .15, t);\n    p.y -= inCubic(2., 1., abs(rotation)*.75, t);\n    p.y += outCubic(3., 1., abs(rotation)*.75, t);\n    \n    rotation += inOutCubic(0., 2., abs(rotation)*2., t);\n    rotation -= inOutCubic(2., 2., abs(rotation)*2., t);\n    \n    uv -= p;\n    uv *= size;\n    uv *= rot(rotation);\n    \n    // :eyes:\n    vec3 col;\n    col += vec3(s(.2, .195, ell(uv, vec4(-.35, .0, .11, .15))));\n    col += vec3(s(.2, .195, ell(uv, vec4(.35, .0, .11, .15))));\n    col -= vec3(s(.2*.125, .195*.1, ell(uv, vec4(-.45, -.2, .1, .1))));\n    col -= vec3(s(.2*.125, .195*.1, ell(uv, vec4(.25, -.2, .1, .1))));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Shoutout to easings.net\n\n#define pi 3.1415\n#define tr start,dur,x\n#define par float start, float dur, float p, float x\n\n// writing start,dur,x everywhere gets annoying\n\nfloat c(float x){\n    return max(0., min(1., (x - .0) / (1. - .0)));\n}\n\nfloat o(float x){\n    return clamp(x,-1., .0);\n}\n\nfloat ease(float easing, float start, float dur, float x){\n    start += 1.;\n    if (x >= start - 1. && x <= start){\n        return easing;\n    }else return o(x - start) + 1.;\n}\n\nfloat linear(par){\n    start /= dur; x /= dur;\n    return p*ease(x - start,tr);\n}\n\nfloat inSine(par){\n    start /= dur; x /= dur;\n    return p*ease(1. - cos(((x - start) * pi) / 2.),tr);\n}\n\nfloat outSine(par){\n    start /= dur; x /= dur;\n    return p*ease(sin(((x - start) * pi) / 2.),tr);\n}\n\nfloat inOutSine(par){\n    start /= dur; x /= dur;\n    return p*ease(-(cos(pi * (x - start)) - 1.) / 2., tr);\n}\n\nfloat inQuad(par){\n    start /= dur; x /= dur;\n    return p*ease(pow(x - start, 2.),tr);\n}\n\nfloat outQuad(par){\n    start /= dur; x /= dur;\n    return p*ease(1. - pow(1. - (x - start), 2.),tr);\n}\n\nfloat inOutQuad(par){\n    start /= dur; x /= dur;\n    return x - (start - 1.) < 1.5 \n    ? p*ease(2. * ((x - (start * 1.)) * (x - (start * 1.))),tr)\n    : p*ease(1. - pow(-2. * (x - (start * 1.)) + 2., 2.) / 2.,tr);\n}\n\nfloat inCubic(par){\n    start /= dur; x /= dur;\n    return p*ease(pow(x - start, 3.),tr);\n}\n\nfloat outCubic(par){\n    start /= dur; x /= dur;\n    return p*ease(1. - pow( 1. - (x - start), 3.),tr);\n}\n\nfloat inOutCubic(par){\n    start /= dur; x /= dur;\n    return x - (start - 1.) < 1.5\n    ? p*ease(4. * (x - start) * (x - start) * (x - start), tr)\n    : p*ease(1. - pow(-2. * (x - start) + 2., 3.) / 2., tr);\n}\n\nfloat inQuart(par){\n    start /= dur; x /= dur;\n    return p*ease(pow(x - start, 4.),tr);\n}\n\nfloat outQuart(par){\n    start /= dur; x /= dur;\n    return p*ease(1. - pow(1. - (x - start), 4.), tr);\n}\n\nfloat inOutQuart(par){\n    start /= dur; x /= dur;\n    return x - (start - 1.) < 1.5 \n    ? p*ease(8. * pow(x - start, 4.), tr)\n    : p*ease(1. - pow(-2. * (x - start) + 2., 4.) / 2., tr);\n}\n\nfloat inQuint(par){\n    start /= dur; x /= dur;\n    return p*ease(pow(x - start, 5.),tr);\n}\n\nfloat outQuint(par){\n    start /= dur; x /= dur;\n    return p*ease(1. - pow(1. - (x - start), 5.), tr);\n}\n\nfloat inOutQuint(par){\n    start /= dur; x /= dur;\n    return x - (start - 1.) < 1.5 \n    ? p*ease(16. * pow(x - start, 5.), tr)\n    : p*ease(1. - pow(-2. * (x - start) + 2., 5.) / 2., tr);\n}\n\nfloat inExpo(par){\n    start /= dur; x /= dur;\n    return x - (start - 1.) == 0. ? 0. : \n    p*ease(pow(2., 10. * (x - start) - 10.),tr);\n}\n\nfloat outExpo(par){\n    start /= dur; x /= dur;\n    return x - (start - 1.) == 1. ? 1. \n    : p*ease(1. - pow(2., -10. * (x - start)), tr);\n}\n\nfloat inOutExpo(par){\n    start /= dur; x /= dur;\n    return x - (start - 1.) == 0.\n    ? 0.\n    : x - (start - 1.) == 1.\n    ? 1.\n    : x - (start - 1.) < 1.5\n    ? p*ease(pow(2., 20. * (x - start) - 10.) / 2., tr)\n    : p*ease((2. - pow(2., -20. * (x - start) + 10.)) / 2., tr);\n}\n\nfloat inCirc(par){\n    start /= dur; x /= dur;\n    return p*ease(c(1. - sqrt(1. - pow(x - start, 2.))), tr);\n}\n\nfloat outCirc(par){\n    start /= dur; x /= dur;\n    return p*ease(c(sqrt(1. - pow(x - start - 1., 2.))), tr);\n}\n\nfloat inOutCirc(par){\n    start /= dur; x /= dur;\n    return x - (start - 1.) < 1.5\n    ? p*ease((1. - sqrt(1. - pow(2. * x - start * 2., 1.))) / 2., tr)\n    : p*ease((sqrt(1. - pow(-2. * x + start * 2. + 2., 2.)) + 1.) / 2., tr);\n}\n\nfloat inBack(par){\n    start /= dur; x /= dur;\n    float c1 = 1.70158;\n    float c3 = c1 + 1.;\n    \n    return p*ease(c3 * (x - start) * (x - start) * (x - start) - c1 * (x - start) * (x - start), tr);\n}\n\nfloat outBack(par){\n    start /= dur; x /= dur;\n    float c1 = 1.70158;\n    float c3 = c1 + 1.;\n    \n    return p*ease(1. + c3 * pow((x - start) - 1., 3.) + c1 * pow((x - start) - 1., 2.), tr);\n}\n\nfloat inOutBack(par){\n    start /= dur; x /= dur;\n    float c1 = 1.70158;\n    float c2 = c1 * 1.525;\n    \n    return x - (start - 1.) < 1.5\n    ? p*ease((pow(2. * (x - start), 2.) * ((c2 + 1.) * 2. * (x - start) - c2)) / 2., tr)\n    : p*ease((pow(2. * (x - start) - 2., 2.) * ((c2 + 1.) * ((x - start) * 2. - 2.) + c2) + 2.) / 2., tr);\n}\n\nfloat inElastic(par){\n    start /= dur; x /= dur;\n    float c4 = (2. * pi) / 3.;\n    \n    return x - (start - 1.) == 0.\n      ? 0.\n      : x - (start - 1.) == 1.\n      ? 1.\n      : p*ease(-pow(2., 10. * (x - start) - 10.) * sin(((x - start) * 10. - 10.75) * c4), tr);\n}\n\nfloat outElastic(par){\n    start /= dur; x /= dur;\n    float c4 = (2. * pi) / 3.;\n    \n    return x - (start - 1.) == 0.\n      ? 0.\n      : x - (start - 1.) == 1.\n      ? 1.\n      : p*ease(pow(2., -10. * (x - start)) * sin(((x - start) * 10. - 0.75) * c4) + 1., tr);\n}\n\nfloat inOutElastic(par){\n    start /= dur; x /= dur;\n    float c5 = (2. * pi) / 4.5;\n    \n    return x - (start - 1.) == 0.\n      ? 0.\n      : x - (start - 1.) == 1.\n      ? 1.\n      : x - (start - 1.) < 1.5\n      ? p*ease(-(pow(2., 20. * (x - start) - 10.) * sin((20. * (x - start) - 11.125) * c5)) / 2., tr)\n      : p*ease((pow(2., -20. * (x - start) + 10.) * sin((20. * (x - start) - 11.125) * c5)) / 2. + 1., tr);\n}\n\n","name":"Common","description":"","type":"common"}]}