{"ver":"0.1","info":{"id":"4sfBz4","date":"1494955101","viewed":396,"name":"filip II","username":"srtuss","description":"Recreation of movAX13h's \"filip\" fragment shader effect.\n\nFullscreen looks best!","likes":7,"published":1,"flags":64,"usePreview":0,"tags":["raytracing","planes","quads","atmospheric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"lssSzH","filepath":"https://soundcloud.com/filipsound/filip-wooden-rocks","previewfilepath":"https://soundcloud.com/filipsound/filip-wooden-rocks","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n// recreation of the \"filip\" fragment shader, as a raytracer\n// written from scratch\n//\n// original shader idea and wonderful music by movAX13h:\n// https://www.shadertoy.com/view/4ssfzn\n//\n//\n\nvec2 rotate(vec2 p, float a)\n{\n    float co = cos(a), si = sin(a);\n    return p * mat2(co, si, -si, co);\n}\n\nfloat hash(vec2 p)\n{\n    return fract(989253. * sin(205.124 * dot(p, vec2(.1, 33.))));\n}\n\n// the floor texture\nfloat map0(vec2 uv)\n{\n    return hash(floor(uv));\n}\n\nfloat particles(out vec3 col, vec3 ro, vec3 rd, float time)\n{\n    float tm = 1e38;\n    vec3 add = vec3(0.);\n    \n    for(int i = 0; i < 100; ++i)\n    {\n        mat3 mp = mat3(1., 0., 0., 0., 1., 0., 0., 0., 1.);\n        \n        float pt = -time * 2. + float(i) * 0.06 + sin(float(i)) * .3;\n        \n        vec3 pos = vec3(\n            sin(pt * .2) * sin(pt * .4) * 4.,\n            abs(sin(pt * 1.5) * sin(pt * .5)) + .01,\n            cos(pt * .3) * 2.);\n        \n        float rt = pt * 2. + sin(float(i));\n        \n        float c0 = cos(rt), s0 = sin(rt);\n        mp *= mat3(1., 0., 0., 0., c0, -s0, 0., s0, c0);\n        float c1 = cos(rt), s1 = sin(rt);\n        mp *= mat3(c1, 0., s1, 0., 1., 0., -s1, 0., c1);\n        \n        float t = -dot(ro - pos, mp[2]) / dot(rd, mp[2]);\n        \n        if(t > 0.)\n        {\n            vec3 vsun = normalize(vec3(.2, 1., .4));\n            \n            vec3 hit = (ro - pos) + rd * t;\n            vec2 quv = vec2(dot(hit, mp[0]), dot(hit, mp[1]));\n            \n            vec3 ref = reflect(rd, mp[2]);\n            \n            float l = max(dot(mp[2], vsun), 0.) + pow(max(dot(ref, vsun), 0.), 64.);\n            \n            float size = fract(sin(float(i) * 124.123) * 12415.25323) * .1 + .001;\n            \n            float df = smoothstep(0., 0.01, max(abs(quv.x), abs(quv.y)) - size);\n            \n            col = mix(vec3(1.) * l * .5, col, df);\n            \n            //col += exp(length(quv) * -10.) * vec3(0.5, 0., 0.);\n        }\n        \n        if(i == 0)\n        {\n            float to = 1. - dot(rd, normalize(pos - ro));\n            add += vec3(1., 0.4, 0.3) * exp(to * -100.);\n        }\n        \n        tm = min(tm, t);\n    }\n    col += add;\n    return tm;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    \n    float icst = floor(iTime / 10.);\n    float cst = fract(iTime / 10.);\n    \n    float shut = smoothstep(1., .9, cst) * smoothstep(0., .1, cst);\n    \n    vec3 ro = vec3(0., .5 + sin(iTime * .7) * .3, -2.);\n    vec3 rd = normalize(vec3(uv, 1.66));\n    \n    float pn = sin(icst) * iTime * 0.3;\n    float tt = 0.;//step(.8, sin(icst));\n    \n    ro.xz = rotate(ro.xz, pn);\n    rd.xz = rotate(rd.xz, pn);\n    \n    ro.yx = rotate(ro.yx, tt);\n    rd.yx = rotate(rd.yx, tt);\n    \n\n    ro.x += cst * 2.;\n    \n    vec3 sky = vec3(abs(1. - rd.y));\n    \n    vec3 col = sky;\n    \n    float t = -ro.y / rd.y;\n    vec3 hit = ro + rd * t;\n    \n    if(t > 0.)\n    {\n        vec2 tuv = hit.xz * 3.;\n        vec2 dx = dFdx(tuv), dy = dFdy(tuv);\n    \tcol = vec3(.25) * (\n            map0(tuv) +\n            map0(tuv + dx * .5) +\n            map0(tuv + dy * .5) +\n            map0(tuv + dy * .5 + dx * .5));\n        \n        col = col * .5;\n        \n        col = mix(sky, col, exp(t * -.04));\n        \n        vec3 ref = reflect(rd, vec3(0., 1., 0.));\n        \n        ref += (sin(hit.x * 30.) + sin(hit.z * 10.)) * .002;\n        \n        vec3 colr;\n        particles(colr, hit, ref, iTime * .5);\n        \n        col += colr * .5;\n    }\n    \n    particles(col, ro, rd, iTime * .5);\n    \n    \n    col *= texture(iChannel1, uv * .1 + vec2(pn * 0.2, iTime * -.01)).x * .2 + .8;\n    \n    col *= shut;\n    \n    col *= step(abs(uv.y) - .7, 0.);\n    \n    col *= (1. - pow(abs(uv.x * .2), 2.)) * (1. - pow(abs(uv.y * .6), 2.));\n    \n    //col = pow(col, vec3(3.)) * 3.;\n    //col = pow(col, vec3(1. / 2.2));\n    \n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}