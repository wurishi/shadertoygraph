{"ver":"0.1","info":{"id":"ddd3DH","date":"1677230698","viewed":110,"name":"kaleidoscopic wonder","username":"sleeplessmonk","description":"WIP, based on ngwaves by netgrind","likes":1,"published":1,"flags":4,"usePreview":0,"tags":["fractal","audioreactive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//based on ngwaves by netgrind, I did a bunch of forks from it and then finally I redid this one where the code and approach was extensively different\n#define PI 3.14159265359\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Calculate the UV coordinates for the current pixel\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Shift UV coordinates to center the pattern\n    uv -= vec2(0.5);\n    \n    // Scale UV coordinates to fit the screen and maintain aspect ratio\n    float aspectRatio = iResolution.x / iResolution.y;\n    uv *= vec2(aspectRatio, 1.0);\n    \n    // Calculate the angle and distance from the center of the screen\n    float a = atan(uv.y, uv.x);\n    float d = length(uv);\n    \n    // Create a kaleidoscopic pattern with a sacred geometry shape\n    float numSegments = 6.0;\n    float segmentAngle = 2.0 * PI / numSegments;\n    a = mod(a + segmentAngle / 2.0, segmentAngle) - segmentAngle / 2.0;\n    a = abs(a);\n    a = mod(a + segmentAngle / 2.0, segmentAngle) - segmentAngle / 2.0;\n    \n    // Use a for loop to calculate the value of f\n    float f = 0.05;\n    for (float i = 0.0; i < numSegments; i++) {\n        // Get the audio value for this segment\n        float audio = texture(iChannel1, vec2(i / numSegments, 0.5)).r;\n        \n        // Calculate the smoothstep values\n        float s1 = -.000005;\n        float s2 = s1 + (sin(iTime - d * 666.0) * 1.1 + 0.15);\n        \n        // Calculate the value of f for this segment\n        f += smoothstep(s1, s2, sin(a * (3.0) - iTime + sin(i - iTime) * 2.5) * 0.1 * d + (d - i * 0.4)) * audio;\n    }\n    \n    // Add the time value to f\n    f += iTime;\n    \n    // Use the sin function to create psychedelic colors\n    float spread = sin(iTime) * 0.4;\n    vec3 color = sin((vec3(f - spread, f, f + spread)) * 20.0) * 0.5 + 0.5;\n    \n    // Set the final color of the pixel\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}