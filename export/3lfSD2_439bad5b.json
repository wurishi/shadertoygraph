{"ver":"0.1","info":{"id":"3lfSD2","date":"1564247073","viewed":105,"name":"Accounting+ Site Animation","username":"trianglPixl","description":"I was looking at the site for Accounting+ (https://accountingpl.us/) and saw this neat animation on their site used to border the screenshots section. I knew I had to recreate it, especially since the animation on the site doesn't loop correctly.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float topCircleCount = 11.0;\nconst vec4 topLayerColor = vec4(0.0, 0.0, 1.0, 1.0);\nconst float topLayerScreenHeight = 0.9;\nconst float topLayerSpeed = 1.0/15.0;\n\nconst float underCircleCount = 9.0;\nconst vec4 underLayerColor = vec4(0.0, 0.0, 0.0, 1.0);\nconst float underLayerScreenHeight = 0.83;\nconst float underLayerSpeed = 1.0/19.0;\n\nconst float checkerLayerCount = 6.0;\nconst vec4 checkerLayerColor1 = vec4(0.8, 0.45, 0.0, 1.0);\nconst vec4 checkerLayerColor2 = vec4(0.55, 0.25, 0.0, 1.0);\nconst vec2 checkerLayerSpeed = vec2(1.0/45.0, 1.0/30.0);\n\nconst float triangleLayerFrequency = 20.0;\nconst vec4 triangleLayerColor = vec4(0.1, 0.1, 0.1, 1.0);\nconst float triangleLayerHeight = 0.1;\nconst float triangleLayerSpeed = 1.0 / 10.0;\n\nvec4 getCurtain(vec2 fragCoord, float circleCount, vec4 color, float screenHeight, float speed)\n{\n    float layerHeight = iResolution.y * screenHeight;\n    if (fragCoord.y > layerHeight)\n    {\n        return color;\n    }\n    else\n    {\n        float layerCycle = -iTime * speed;\n        float circleDiameter = iResolution.x / circleCount;\n        float circleRadius = circleDiameter / 2.0;\n        vec2 circleCoord;\n        circleCoord.x = mod(fragCoord.x + iResolution.x * fract(layerCycle), circleDiameter)\n            - circleRadius;\n        circleCoord.y = fragCoord.y - layerHeight;\n        // I want the circles to be a little taller\n        circleCoord.y *= 0.96;\n\n        float sqrDistance = dot(circleCoord, circleCoord);\n        float sqrRadius = circleRadius * circleRadius;\n        float boundary = circleRadius + 1.0;\n        return vec4(color.rgb, color.a * smoothstep(boundary * boundary, sqrRadius, sqrDistance));\n    }\n}\n\nvec4 getChecker(vec2 fragCoord, float checkerCount, vec4 checkerColor1, vec4 checkerColor2, vec2 checkerSpeed)\n{\n    vec2 checkerCoord = floor((fragCoord / iResolution.x + checkerSpeed * -iTime) * checkerCount);\n    vec4 col = mix(checkerColor1, checkerColor2, mod(checkerCoord.x + checkerCoord.y, 2.0));\n    return col;\n}\n\nfloat sampleTriangleWave(float t, float width)\n{\n    return abs(mod(t, width) - width / 2.0);\n}\n\nvec4 getTriangle(vec2 fragCoord, float frequency, vec4 color, float height, float speed)\n{\n    float width =  iResolution.x / frequency;\n    float t = fragCoord.x - iTime * iResolution.x * speed;\n    \n    float waveHeight = sampleTriangleWave(t, width) + iResolution.y * height;\n    return vec4(color.rgb, color.a * smoothstep(waveHeight + 2.0, waveHeight, fragCoord.y));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col;\n    \n    vec4 checker = getChecker(fragCoord, checkerLayerCount, checkerLayerColor1, checkerLayerColor2, checkerLayerSpeed);\n    col = mix(col, checker.rgb, checker.a);\n    \n    vec4 bottomTriangle = getTriangle(fragCoord, triangleLayerFrequency, triangleLayerColor, triangleLayerHeight, triangleLayerSpeed);\n    col = mix(col, bottomTriangle.rgb, bottomTriangle.a);\n    \n    vec4 underLayer = getCurtain(fragCoord, underCircleCount, underLayerColor, underLayerScreenHeight, underLayerSpeed);\n    col = mix(col, underLayer.rgb, underLayer.a);\n    \n    vec4 topLayer = getCurtain(fragCoord, topCircleCount, topLayerColor, topLayerScreenHeight, topLayerSpeed);\n    col = mix(col, topLayer.rgb, topLayer.a);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}