{"ver":"0.1","info":{"id":"sdXcWs","date":"1642895670","viewed":68,"name":"Mandelbrot set - basic","username":"jfmair","description":"Basic blue Mandelbrot set.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","compute"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 complex_square(vec2 z)\n{\n    return vec2(z.x*z.x-z.y*z.y, 2.0*z.x*z.y);\n}\n\n#define MAX_ITER 255.0\n#define MAX_MAGNITUDE_SQUARED 4.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    // thanks to https://www.shadertoy.com/view/lsX3W4 for the coordinates here\n\tfloat time_wrapped = (1.0 - cos(0.2*iTime))/2.0;\n    float zoom = pow( 2.0, -10.0*time_wrapped );\n\tvec2 c = vec2(-0.05,.6805) + p*zoom;\n    float n = 0.0;\n    vec2 z = vec2(0.0);\n    \n    for (; n<MAX_ITER; n++)\n    {\n        z = complex_square(z)+c;\n        if (dot(z,z) >= MAX_MAGNITUDE_SQUARED)\n        {\n            break;\n        }\n    }\n    \n\n    // Time varying pixel color\n    vec3 col = vec3(0.0, 0.1, n/255.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}