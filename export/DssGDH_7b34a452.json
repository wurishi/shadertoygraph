{"ver":"0.1","info":{"id":"DssGDH","date":"1666077058","viewed":135,"name":"Bernard from Desmos - 2D SDF","username":"fireflame241","description":"Distance to a fractal variant of Bernard from Desmos. Automatically zooms (can be stopped with the pause button). Click and hold to draw a circle around the mouse.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// SDF for a fractal variant of Bernard from Desmos\n// Bernard is a region of high detail in some Desmos implicit graphs, see https://www.desmos.com/calculator/redbernard for example\n// Formulas exported from https://www.desmos.com/calculator/hsooqfwxrw via DesModder's GLesmos\n// with little editing, so variables do not have good names, and most calculations are inlined.\n\n// The MIT License\n// Copyright © 2022 Jared Hughes\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfloat dsm_listmin(float[3] L) {\n  float m = L[0];\n  for (int i = 1; i < 3; i++) {\n    m = min(m, L[i]);\n  }\n  return m;\n}\n\nfloat dsm_listmax(float[6] L) {\n  float m = L[0];\n  for (int i = 1; i < 6; i++) {\n    m = max(m, L[i]);\n  }\n  return m;\n}\n\nfloat _f0(float x, float y) {\n  float a = ((((3.0) * y) - (1.0)) > (0.0)) ? (1.0) : (0.0);\n  float _24 = (1.0) - a;\n  vec2 _35 = vec2(x, y);\n  float _42 = floor((log2(((1.0) - x))));\n  float _73 = _24;\n  float _103 =\n      (((0.3333333333333333) +\n        ((0.16666666666666666) *\n         ((mod(_42,2.0)==1.0 ? -1.0 : 1.0) * exp2(_42)))) < y)\n          ? (((0.0) < x) ? (1.0) : (0.0))\n          : (0.0);\n  float _126 =\n      (0.3333333333333333) *\n      (((((2.0) * _103) - (1.0)) * ((1.0) - ((3.0) * y))) +\n       (exp2(2.0*(((-0.5) * _103) +\n                         (round((((0.5) * _103) +\n                                     (0.5 * log2(((1.0) - x))))))))));\n  float _147 = ((y + x) > (0.0)) ? (1.0) : (0.0);\n  float _183 = _24;\n  float _212 = a + a - 1.0;\n  float _236 =\n      exp2(2.0*((round(((0.5 * log2((abs((x - (1.0)))))) -\n                                   ((0.5) * a)))) +\n                       ((0.5) * a)));\n  return (\n      ((((-1.0) < x) &&\n        (x <= ((1.0) -\n               (exp2(2.0 *\n                         ((round(((0.5 * log2((abs((((3.0) * y) - (1.0)))))) -\n                                      ((0.5) * _24)))) +\n                          ((0.5) * _24)))))))\n           ? (dsm_listmin(float[3](\n                 (distance(_35, (vec2(((1.0) - (exp2(_42))),\n                                      ((0.3333333333333333) +\n                                       ((0.16666666666666666) *\n                                        ((mod(_42,2.0)==1.0 ? -1.0 : 1.0) * exp2(_42)))))))),\n                 (((1.0) -\n                   (exp2(2.0*\n                       ((round((\n                            (0.5 * log2((abs((((3.0) * y) - (1.0)))))) -\n                            ((0.5) * _73)))) +\n                        ((0.5) * _73))))) -\n                  x),\n                 _126)))\n           : (((((y >= (0.0))) && ((x <= (0.0)))))\n                  ? (distance(_35, (vec2((_147 - (1.0)), _147))))\n                  : (((min(abs(x), abs(y)))) >= (1.0))\n                         ? (distance((vec2((abs(x)), (abs(y)))),\n                                     (vec2(1.0, 1.0))))\n                         : (dsm_listmax((float[6](\n                               (((1.0) -\n                                 (exp2(2.0*\n                                           ((round((\n                                                (0.5 * log2((abs((((3.0) * y) -\n                                                                   (1.0)))))) -\n                                                ((0.5) * _183)))) +\n                                            ((0.5) * _183))))) -\n                                x),\n                               ((-((1.0) - a)) - x), (x - (1.0)),\n                               ((_212 * y) - (1.0)),\n                               (-(distance(_35,\n                                           (vec2(((1.0) + ((-2.0) * _236)),\n                                                 ((0.3333333333333333) +\n                                                  ((((4.0) * _212) / (3.0)) *\n                                                   _236))))))),\n                               (-1.0 < x && x < 1.0\n                                    ? _126\n                                    : (-999999.0)))))))));\n}\n\nfloat sdBernard(in vec2 p) { return _f0(p.x, p.y); }\n\n// mainImage coloring https://www.shadertoy.com/view/3ltSW2, modified to zoom over time.\n\n// The MIT License\n// Copyright © 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    float t = iTime * 0.5;\n    if (t > 6.0) t = 6.0 + mod(t, 4.0);\n    float scl = 1.9 / exp2(t);\n    p = (p - vec2(1,1.0/3.0))*(scl - 1.0) + p;\n    m = (m - vec2(1,1.0/3.0))*(scl - 1.0) + m;\n\n\tfloat d = sdBernard(p)/scl;\n    \n\t// coloring\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    if( iMouse.z>0.001 )\n    {\n    d = sdBernard(m)/scl;\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)/scl-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)/scl-0.015));\n    }\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}