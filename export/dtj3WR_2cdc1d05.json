{"ver":"0.1","info":{"id":"dtj3WR","date":"1673176142","viewed":105,"name":"random segment tiles","username":"kastorp","description":"a lazy sunday morning killtime\nthanks @jt about color filling","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["lines","segments"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// random segments by kastorp\n// inspired by  https://www.shadertoy.com/view/Ws3GRs \n\n\n//David Hoskins Hash without sin\nfloat hash12(vec2 p)\n    {p*=.11;\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat val(vec2 x) { \n    //return .2 *sin(x.x*1.57+.87)+ .2 *sin(x.y*1.57+.87) ; //Gyroid\n    return mix(hash12(x+floor(iTime)), hash12(x+floor(iTime+1.)),fract(iTime))*.8-.4; //random\n}\n\n#define line(t) smoothstep(max(28./iResolution.y,.02),0., abs(t))\nfloat  segment(vec2 v, vec2 b) {return (-v.x*b.y+ v.y*b.x)/length(b);}\nfloat  rcorner(vec2 v,float TK ) { v+=vec2(TK);return length(max(vec2(v.x,v.y),0.0))+min(max(v.x,v.y),0.0) -TK;}\n\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n   \n    vec2 uv = 14.*(I-.5*iResolution.xy)/iResolution.y;\n    vec2 c= floor(uv+.5),lc=fract(uv+.5)-.5,k=vec2(1,0);\n    bool odd = mod(c.x,2.)!=mod(c.y,2.); \n    \n    if(odd){lc=lc.yx;k=k.yx;} // odd cells are crossed by horizontal line, even cells by a vertical line\n    //  each cell has 5 segments\n    //         B     \n    //         |           \n    //         c3            \n    //         |---c4--D           \n    //         |               \n    //         c2  <<this one is excluded        \n    // E--c5---|           \n    //         |\n    //         c1     \n    //         |         \n    //         A\n    \n    vec2 a=vec2(val(c),-.5), b=vec2(a.x,+.5),d=vec2(.5,val(c+k)),e=vec2(-.5,val(c-k));\n    float flip=1.,mx=d.y,mn=e.y;\n    if(e.y>d.y) {flip=-1.; vec2 t=a;a=b;b=t; mx=e.y;mn=d.y;} // if crossing, flip y axis\n\n\n    //colors\n    vec3  lineC1=vec3(step(uv.x,-5.5)),lineC2=vec3(step(5.5,uv.x)),lineC3=vec3(step(-5.5,uv.x)*step(uv.x,5.5)), oddC=vec3(.3,0,0),evenC=vec3(0,.3,0);    \n    if(iMouse.z<=0.) { oddC=evenC=vec3(.3);};\n            \n    //background\n    vec3 col =  (odd? oddC :evenC);  //debug brick color\n\n    //Shane asymmetric blocks \n    float c1=1.,c2=0., c3=1.,c4=1., c5=1.; \n    col += lineC1*(\n              line(lc.x - a.x)*( c1* step(lc.y-mn,0. ) \n                       + c2* step(lc.y-mx,0. )* step(0.,lc.y-mn) \n                       + c3* step(0.,lc.y-mx))\n           +  line(lc.y - d.y) * c4 * step(0.,lc.x-a.x)\n           +  line(lc.y - e.y) * c5 * step(lc.x-a.x,0.)\n       );\n     float d01 = rcorner(vec2(1,flip)*(-lc+vec2(a.x,d.y)),.0),\n           d02 = rcorner(vec2(1,flip)*(lc-vec2(b.x,e.y)),.0); \n     if((min(d01,d02)<.0)^^ odd  ^^ (flip<1.))  col+=lineC1*vec3(.2,.3,.2);  \n     \n     //skew segments \n     float d1 = segment(lc-d,a-d),\n           d2 = segment(lc-e,b-e);\n     col += lineC2* ( line(d1)+  line(d2));\n     if(((d1<0. && d2<0.) || (d1>0. && d2>0.) )^^ odd  ^^ (flip<1.))  col+=lineC2*vec3(.3,.2,.2);  \n     \n     \n     //rounded corners  \n     float d3 = rcorner(vec2(1,flip)*(-lc+vec2(a.x,d.y)),.2),\n           d4 = rcorner(vec2(1,flip)*(lc-vec2(b.x,e.y)),.2);    \n     col+= lineC3* ( line(d3)+  line(d4));     \n     if((min(d3,d4)<.0) ^^ odd  ^^ (flip<1.))  col+=lineC3*vec3(.2,.2,.3);  \n     \n    O = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}