{"ver":"0.1","info":{"id":"XX2BRR","date":"1729119669","viewed":66,"name":"simple rd","username":"shirleyquirk","description":"simple version","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["reactiondiffusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*{\n    \"CATEGORIES\": [\n        \"XXX\"\n    ],\n    \"CREDIT\": \"\",\n    \"INPUTS\": [\n        {\n            \"DEFAULT\": 0.01,\n            \"LABEL\": \"r_sides\",\n            \"MAX\": 0.5,\n            \"MIN\": 0,\n            \"NAME\": \"r_sides\",\n            \"TYPE\": \"float\"\n        },\n        {\n            \"DEFAULT\": 0.02,\n            \"LABEL\": \"r_diags\",\n            \"MAX\": 0,\n            \"MIN\": 0,\n            \"NAME\": \"r_diags\",\n            \"TYPE\": \"float\"\n        },\n        {\n            \"DEFAULT\": [\n                0.06264,\n                0.061\n            ],\n            \"LABEL\": \"kf\",\n            \"MAX\": [\n                0.07,\n                0.12\n            ],\n            \"MIN\": [\n                0.02,\n                0.002\n            ],\n            \"NAME\": \"kf\",\n            \"TYPE\": \"point2D\"\n        },\n        {\n            \"DEFAULT\": 1,\n            \"LABEL\": \"dt\",\n            \"MIN\": 0,\n            \"NAME\": \"dt\",\n            \"TYPE\": \"float\"\n        }\n    ],\n    \"ISFVSN\": \"2\",\n    \"PASSES\": [\n        {\n            \"FLOAT\": true,\n            \"PERSISTENT\": true,\n            \"TARGET\": \"previousTimeStep\"\n        },\n        {\n        }\n    ]\n}\n*/\n\n\n\n/* shader 2 looks like normal RD*/\n//out vec2 dest;\n//uniform sampler2D grid;     // previous time step\n//uniform float inv_tex_dim;  // 1 / width, 1 / height, for scaling\n//uniform vec2 ncoords_max;   // no idea\n//uniform vec2 kf;            // kill/feed rate\n//uniform float dt;\n//uniform float r_sides;\n//uniform float r_diags;\n\n#define previousTimeStep iChannel0\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{    \t//visualize it simply\n        vec2 p = fragCoord / iResolution.xy;\n    \tvec4 wastefulBuffer = texture(previousTimeStep,p);\n    \tfragColor = vec4(wastefulBuffer.x,wastefulBuffer.x,wastefulBuffer.x,1.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define previousTimeStep iChannel0\nvec4 initialize(in vec2 fragCoord){\n    vec2 p = fragCoord / iResolution.xy;\n\tfloat d = distance(p,vec2(0.5,0.5));\n\tif (d < 0.1){\n\t\treturn vec4(1.0,0.0,0.0,1.0);\n\t}else{\n\t\treturn vec4(0.0,1.0,0.0,1.0);\n\t}\n}\n//const float r_sides = 1.0 / iResolution.x;\n//const float r_diags = 1.0 / iResolution.x;\nconst vec2 kf = vec2(0.061,0.042);\nconst float dt = 1.1;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tif (iFrame == 0){\n\t\tfragColor = initialize(fragCoord);\n\t}else{\n    float r_sides = 0.0007;//1.0 / iResolution.x;\n    float r_diags = 0.0009;//1.0 / iResolution.x;\n    const float reaction_dt = 1.7;\n    const vec2 diffusion = vec2(1.0, .5);\n    const float w_sides = .18;\n    const float w_diags = .07;\n    vec2 p = fragCoord / iResolution.xy;//isf_FragNormCoord;//gl_FragCoord.xy * inv_tex_dim; //normalized position\n    vec2 p0 = p - r_sides; // bottom left of the bounding box surrounding the circle centered at p with radius r_sides\n    vec2 p1 = p + r_sides;//min(p + r_sides, ncoords_max); // top right of the bounding box surrounding the circle centered at p with radius r_sides, or ???\n    vec2 pd0 = p - r_diags; // bottom left of the bounding box surrounding the circle centered at p with radius r_diags.\n    vec2 pd1 = p + r_diags;//min(p + r_diags, ncoords_max); // top right of the bounding box surrounding the circle centered at p with radius r_sides, or ???\n    vec2 center = texture(previousTimeStep, p).xy; // value of the previous tick? X and Y\n    vec2 d = ((texture(previousTimeStep, vec2(p.x, p0.y)).xy // South\n             + texture(previousTimeStep, vec2(p0.x, p.y)).xy // West\n             + texture(previousTimeStep, vec2(p1.x, p.y)).xy // min(East or ?) \n             + texture(previousTimeStep, vec2(p.x, p1.y)).xy // min(North or ?)\n             ) * w_sides \n             + (texture(previousTimeStep, pd0).xy               // SW\n             + texture(previousTimeStep, vec2(pd1.x, pd0.y)).xy // SE clamped\n             + texture(previousTimeStep, vec2(pd0.x, pd1.y)).xy // NE clamped\n             + texture(previousTimeStep, pd1).xy                // NW clamped\n             ) * w_diags\n              - center) // 7    18  7\n                        // 18 -100 18\n                        // 7    18  7\n                        // if w_sides + diags <= 0.25 and w_centre <= 1.0\n           * diffusion; // and diffusion <= 1.0 then this will always be <= 1.0\n    // laplacian \n    // Dx ??ï¿½ X and\n    // Dy ??ï¿½ Y\n    float abb = center.x * center.y * center.y;\n    d += vec2(-abb + kf.y * (1.0 - center.x), abb - (kf.x + kf.y) * center.y) * reaction_dt;\n    //( Dx ??ï¿½ X - XYï¿½ + f( 1 - X ) )dt\n    //( Dy ??ï¿½ Y + XYï¿½ - (k + f)Y )dt\n    fragColor = vec4(clamp(center + d * dt, .0, 1.0),0,0);\n    }\n\n}","name":"Buffer A","description":"","type":"buffer"}]}