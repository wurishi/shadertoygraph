{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"vec3 Q1=vec3(0,0,0);\nvec3 Q2=vec3(1,0,0);\nvec3 Q3=vec3(0,1,0);\nvec3 Q4=vec3(1,1,0);\n\nfloat tan_fov = 1.1917;\nfloat fov = 0.8726646;\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nbool calc_light(vec3 ray_origin, vec3 ray_dir, vec3 light_pos, out float q)\n{\n\tbool found = false;\n\t\n\tvec3 d = -light_pos + ray_origin;\n\tfloat r = 0.15;\n\t\n\tfloat A = dot(ray_dir, ray_dir);\n\tfloat B = 2.0*dot(ray_dir, d);\n\tfloat C = dot(d, d) - r*r;\n\t\n\tfloat discriminant = B*B - 4.0*A*C;\n\tif( discriminant > 0.0 )\n\t{\n\t\tq = -(B + sqrt(discriminant))/(2.0*A);\n\t\tfound = (q > 0.0);\n\t}\n\treturn found;\n}\n\nbool calc_sphere(vec3 point, vec3 ray_origin, vec3 ray_dir, vec3 offset, out vec3 norm, out float q)\n{\n\tvec3 ixyz = floor(point)-offset; \n\tvec3 centre = ixyz + 0.5; //sphere centres\n\tcentre.x += rand(ixyz.xy);\n\tcentre.y += rand(ixyz.xz);\n\t//centre.z += random3(ixyz.yz);\n\t\n\tvec3 d = point - centre; //from centres of spheres to point\n\tbool found = false;\n\t\n\tfloat t;\n\n\tfloat r = 0.05 + 0.35*rand(ixyz.xy+150.0*ixyz.z);\n\t\n\tfloat A = dot(ray_dir, ray_dir);\n\tfloat B = 2.0*dot(ray_dir, d);\n\tfloat C = dot(d, d) - r*r;\n\t\n\tfloat discriminant = B*B - 4.0*A*C;\n\t\n\tif( discriminant > 0.0 )\n\t{\n\t\tt = -(B + sqrt(discriminant))/(2.0*A);\n\t\t\n\t\tvec3 p = d + t*ray_dir; //vector from centre to surface of sphere\n\t\t\n\t\tq = dot(point + t*ray_dir - ray_origin, ray_dir);\n\t\tif(q > 0.0)\n\t\t{\n\t\t\tnorm = normalize(p);\n\t\t\tfound = true;\n\t\t}\n\t}    \n\t\n\treturn found;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 ray;\n\tray.x = (2.0*fragCoord.x/iResolution.y - iResolution.x/iResolution.y);\n\tray.y = (2.0*fragCoord.y/iResolution.y - 1.0);\n\tray.z = (0.5/tan_fov) + 0.5*length(ray.xy)/(0.001+tan(fov*length(ray.xy)));\n\t\n\tray = normalize(ray);//20.0;\n\t\n\tmat3 matrix = mat3(cos(0.1*iTime),sin(0.1*iTime),0.0,\n\t\t\t\t\t-sin(0.1*iTime),cos(0.1*iTime),\n\t\t\t\t\t0.0,0.0, 0.0, 1.0);\n\tray=matrix*ray;\n\t\n\tvec3 ixyz;\n\t\n\tvec3 origin = vec3(0.6*sin(0.5*iTime), 0.6*cos(0.5*iTime),iTime);\n\tvec3 light = origin + vec3(sin(iTime)+0.3*sin(3.0*iTime), cos(iTime), 3.0+cos(iTime));\n\t\n\tvec3 sphere_colour = vec3(1.0,1.0,1.0);\n\tvec4 pixel = vec4(0.0,0.0,0.0,1.0);\n\tvec3 point;\n\tvec3 exact_point;\n\tvec3 norm;\n\tvec3 final_normal;\n\tvec3 light_ray;\n\tfloat t = 0.0;//3.0;//15.0;\n\tfloat direct = 0.0;\n\tfloat refl;\n\t\n\tbool found;\n\tint found_count = 0;\n\t\n\tfloat to_camera = 100000.0;\n\tfloat q;\n\t\n\tif(calc_light(origin, ray, light, q))\n\t{\n\t\tdirect = 1.0;\n\t\tto_camera = q;\n\t\trefl = 0.0;\n\t\tsphere_colour = vec3(1.0,1.0,1.0);\n\t\tfinal_normal = vec3(1,1,1);\n\t\texact_point = vec3(0,0,0);\n\t}\n\t\n\tfor(int n = 0; n < 20 ; n++)\n\t{\n\t\tpoint = origin + t*ray;\n\t\tif(pixel.w > 0.01)\n\t\t{\n\t\t\tif(found_count < 3)\n\t\t\t//if(true)\n\t\t\t{\n\t\t\t\tfound = false;\n\t\t\t\tif(calc_sphere(point, origin, ray, Q1, norm, q) )\n\t\t\t\t{\n\t\t\t\t\tif(q < to_camera)\n\t\t\t\t\t{\n\t\t\t\t\t\texact_point = origin+q*ray;\n\t\t\t\t\t\tlight_ray = light-exact_point;\n\t\t\t\t\t\tdirect = dot(norm, light_ray)/dot(light_ray, light_ray);\n\t\t\t\t\t\tto_camera = q;\n\t\t\t\t\t\tixyz = floor(point)-Q1;\n\t\t\t\t\t\tsphere_colour.g = 0.2 + 0.5*rand(ixyz.xy+200.0);\n\t\t\t\t\t\tsphere_colour.b = 0.2 + 0.5*rand(ixyz.xz+200.0);\n\t\t\t\t\t\tfinal_normal = norm;\n\t\t\t\t\t\trefl = 0.05;\n\t\t\t\t\t}\n\t\t\t\t\tfound=true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif(calc_sphere(point, origin, ray, Q2, norm, q) )\n\t\t\t\t{\n\t\t\t\t\tif(q < to_camera)\n\t\t\t\t\t{\n\t\t\t\t\t\texact_point = origin+q*ray;\n\t\t\t\t\t\tlight_ray = light-exact_point;\n\t\t\t\t\t\tdirect = dot(norm, light_ray)/dot(light_ray, light_ray);\n\t\t\t\t\t\tto_camera = q;\n\t\t\t\t\t\tixyz = floor(point)-Q2;\n\t\t\t\t\t\tsphere_colour.g = 0.2 + 0.5*rand(ixyz.xy+200.0);\n\t\t\t\t\t\tsphere_colour.b = 0.2 + 0.5*rand(ixyz.xz+200.0);\n\t\t\t\t\t\tfinal_normal = norm;\n\t\t\t\t\t\trefl = 0.05;\n\t\t\t\t\t}\n\t\t\t\t\tfound=true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(calc_sphere(point, origin, ray, Q3, norm, q) )\n\t\t\t\t{\n\t\t\t\t\tif(q < to_camera)\n\t\t\t\t\t{\n\t\t\t\t\t\texact_point = origin+q*ray;\n\t\t\t\t\t\tlight_ray = light-exact_point;\n\t\t\t\t\t\tdirect = dot(norm, light_ray)/dot(light_ray, light_ray);\n\t\t\t\t\t\tto_camera = q;\n\t\t\t\t\t\tixyz = floor(point)-Q3;\n\t\t\t\t\t\tsphere_colour.g = 0.2 + 0.5*rand(ixyz.xy+200.0);\n\t\t\t\t\t\tsphere_colour.b = 0.2 + 0.5*rand(ixyz.xz+200.0);\n\t\t\t\t\t\tfinal_normal = norm;\n\t\t\t\t\t\trefl = 0.05;\n\t\t\t\t\t}\n\t\t\t\t\tfound=true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif(calc_sphere(point, origin, ray, Q4, norm, q) )\n\t\t\t\t{\n\t\t\t\t\tif(q < to_camera)\n\t\t\t\t\t{\n\t\t\t\t\t\texact_point = origin+q*ray;\n\t\t\t\t\t\tlight_ray = light-exact_point;\n\t\t\t\t\t\tdirect = dot(norm, light_ray)/dot(light_ray, light_ray);\n\t\t\t\t\t\tto_camera = q;\n\t\t\t\t\t\tixyz = floor(point)-Q4;\n\t\t\t\t\t\tsphere_colour.g = 0.2 + 0.5*rand(ixyz.xy+200.0);\n\t\t\t\t\t\tsphere_colour.b = 0.2 + 0.5*rand(ixyz.xz+200.0);\n\t\t\t\t\t\tfinal_normal = norm;\n\t\t\t\t\t\trefl = 0.05;\n\t\t\t\t\t}\n\t\t\t\t\tfound=true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif((found)||(found_count != 0))found_count++;\n\t\t\t\t//if(found)found_count++;\n\t\t\t\t\n\t\t\t\t/*\n\t\t\t\tif(calc_sphere(point, origin, ray, vec3(0,0,1), norm, q) )\n\t\t\t\t{\n\t\t\t\t\tif(q < to_camera)\n\t\t\t\t\t{\n\t\t\t\t\t\tdirect = dot(norm, vec3(0.0,0.0,-1.0));\n\t\t\t\t\t\tto_camera = q;\t\n\t\t\t\t\t}\n\t\t\t\t\t//found = true;\n\t\t\t\t}\n\t\t\t\tif(calc_sphere(point, origin, ray, vec3(1,0,1), norm, q) )\n\t\t\t\t{\n\t\t\t\t\tif(q < to_camera)\n\t\t\t\t\t{\n\t\t\t\t\t\tdirect = dot(norm, vec3(0.0,0.0,-1.0));\n\t\t\t\t\t\tto_camera = q;\t\n\t\t\t\t\t}\n\t\t\t\t\t//found = true;\n\t\t\t\t}\n\t\t\t\tif(calc_sphere(point, origin, ray, vec3(0,1,1), norm, q) )\n\t\t\t\t{\n\t\t\t\t\tif(q < to_camera)\n\t\t\t\t\t{\n\t\t\t\t\t\tdirect = dot(norm, vec3(0.0,0.0,-1.0));\n\t\t\t\t\t\tto_camera = q;\t\n\t\t\t\t\t}\n\t\t\t\t\t//found = true;\n\t\t\t\t}\n\t\t\t\tif(calc_sphere(point, origin, ray, vec3(1,1,1), norm, q) )\n\t\t\t\t{\n\t\t\t\t\tif(q < to_camera)\n\t\t\t\t\t{\n\t\t\t\t\t\tdirect = dot(norm, vec3(0.0,0.0,-1.0));\n\t\t\t\t\t\tto_camera = q;\t\n\t\t\t\t\t}\n\t\t\t\t\t//found = true;\n\t\t\t\t}\n\t\t\t\t*/\n\t\t\t}\n\t\t\telse\n\t\t\t{\t\n\t\t\t\tfound_count = 0;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tdirect = direct*(1.0 - to_camera/16.0);\n\t\t\t\tif(direct<0.0)direct=0.0;\n\t\t\t\t\t\n\t\t\t\tpixel.xyz += pixel.w*(1.0-refl)*sphere_colour*direct;\n\t\t\t\tpixel.w = pixel.w*refl;\n\t\t\t\t\t\n\t\t\t\tt = -0.5;//5;\n\t\t\t\tto_camera = 10000.0;\n\t\t\t\tray = reflect(ray, final_normal);\n\t\t\t\torigin = exact_point;// + 1.01*ray;\n\t\t\t\t\n\t\t\t\tif(calc_light(origin, ray, light, q))\n\t\t\t\t{\n\t\t\t\t\tdirect = 5.0;\n\t\t\t\t\tto_camera = q;\n\t\t\t\t\trefl = 0.0;\n\t\t\t\t\tsphere_colour = vec3(1.0,1.0,1.0);\n\t\t\t\t\tfinal_normal = vec3(1,1,1);\n\t\t\t\t\texact_point = vec3(0,0,0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tt+=0.8;\t\n\t}\n\t\n\tdirect = direct*(1.0 - to_camera/16.0);\n\tif(direct<0.0)direct=0.0;\n\t\t\t\t\t\n\tpixel.xyz += pixel.w*(1.0-refl)*sphere_colour*direct;\n\tpixel.w = pixel.w*refl;\n\t//pixel.\n\t\n\t\n\t\n\t//fragColor = vec4(to_camera/20.0, to_camera/20.0, to_camera/20.0, 1.0);\n\t\n\t//sphere_colour = direct*sphere_colour;\n\t\n\t//fragColor = vec4(direct,direct,direct,1.0);\n\t//fragColor = vec4(sphere_colour,1.0);\n\t\n\tpixel.r = pow(pixel.r,0.6);\n\tpixel.g = pow(pixel.g,0.6);\n\tpixel.b = pow(pixel.b,0.6);\n\tpixel.w = 1.0;\n\tfragColor = pixel;\n\t//fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4s23zR","date":"1383255807","viewed":1889,"name":"Random spheres","username":"chalky","description":"Shiny spheres","likes":47,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","random"],"hasliked":0,"parentid":"","parentname":""}}