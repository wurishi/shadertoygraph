{"ver":"0.1","info":{"id":"NtGSWz","date":"1640549039","viewed":231,"name":"JCVD Sprite Sheet -No fullscreen","username":"Yusef28","description":"This has been done before by fabrice and crundle https://www.shadertoy.com/view/XsdBzH\nThis is my \"minimalist example\"\nYou can go full screen once but upon returning you lose data","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["sprite","sheet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0,uv).rgb;\n    \n    vec2 mousePos = floor(divisions*(vec2(iMouse.x/iResolution.x,\n                         iMouse.y/iResolution.y)));\n    \n    vec2 fragPos = floor(divisions*(vec2(fragCoord.x/iResolution.x,\n                        fragCoord.y/iResolution.y)));\n    \n    if( iMouse.z>0.5 && (length(fragPos-mousePos) < 0.001) ){\n        col *= vec3(1.,0.7,0.7);\n        }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nbool checkBoundingBox(vec2 fragCoord, float idX, float idY){\n    \n    //float idX = mod(frame,divisions);\n    //float idY = frame/divisions;\n    \n  return (   \n            fragCoord.x >= idX*stepWidth \n            //&& fragCoord.x < (idX*stepWidth+stepWidth)\n            && fragCoord.x < (idX+1.)*stepWidth\n            \n            && fragCoord.y >= idY*stepHeight \n           // && fragCoord.y < (idY*stepHeight+stepHeight));\n           && fragCoord.y < (idY+1.)*stepHeight\n           );\n           \n   /*        \n     return (\n            (fragCoord.x/iResolution.x >= idX*(stepWidth/iResolution.x))\n         && (fragCoord.x/iResolution.x < (idX+1.)*(stepWidth/iResolution.x))\n         && (fragCoord.y/iResolution.y >= idY*(stepHeight/iResolution.y))\n         && (fragCoord.y/iResolution.y < (idY+1.)*(stepHeight/iResolution.y))\n            );\n           */\n           \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.,0.,0.,1.);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if(     iFrame/int(frameStep) < int(divisions*divisions) \n         && mod(float(iFrame), frameStep) < 0.5 \n         && fragCoord.x >  0.5\n         && fragCoord.y > 0.5){\n        \n        float theFrame = float(iFrame) / frameStep;\n        \n        float idX = mod(theFrame, divisions);\n        \n        //Just needed to floor this lol\n        float idY = floor(theFrame / divisions);\n        \n        if( checkBoundingBox(fragCoord, idX, idY )){\n\n            vec2 st = vec2(\n                //(fragCoord.x-idX*stepWidth)/stepWidth,\n                //(fragCoord.y-idY*stepHeight)/stepHeight\n                \n                (fragCoord.x/iResolution.x - idX*(stepWidth/iResolution.x)),\n                (fragCoord.y/iResolution.y - idY*(stepHeight/iResolution.y))\n                \n                );\n                \n            fragColor = texture(iChannel0,st*divisions);//vec4(vec3(st.y*divisions),1.);//\n            \n            \n            }\n            \n        else{\n            fragColor = texture(iChannel1,uv);\n            }\n            \n    }else{\n        \n        vec2 prevRes = texture(iChannel1,vec2(0.05)/iResolution.xy ).xy;\n        \n        if(prevRes.x < iResolution.x){\n        \n            vec2 scaledFragCoord;\n            scaledFragCoord.x = fragCoord.x*(prevRes.x/iResolution.x);\n            scaledFragCoord.y = fragCoord.y*(prevRes.y/iResolution.y);\n            uv = scaledFragCoord.xy/iResolution.xy;\n        }\n\n        fragColor = texture(iChannel1,uv);\n        \n        if(     fragCoord.x <= 0.5\n             && fragCoord.y <= 0.5 ){\n                 fragColor.xy = iResolution.xy;\n             }\n         \n\n        }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define divisions 10. //20.\n#define asp iResolution.y/iResolution.x\n#define stepWidth iResolution.x/divisions\n#define stepHeight (iResolution.y)/divisions\n\n#define frameStep 20. //5.","name":"Common","description":"","type":"common"}]}