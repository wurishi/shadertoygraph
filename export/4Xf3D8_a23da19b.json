{"ver":"0.1","info":{"id":"4Xf3D8","date":"1708594661","viewed":33,"name":"TP1 Lifgraphique","username":"Jackenouille","description":"TP1 de lifgraphique","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["lifgraphique"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Paolo Atzeni\n\nmat3 Rz(float a)\n{\n  // Rotation matrix around z axis\n  // a : Angle\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  // Compute the ray\n  //      m : Mouse position\n  //      p : Pixel\n  // ro, rd : Ray origin and direction\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(50.,30.,10.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,9.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n// Primitives\n\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  // Sphere\n  // p : point\n  // c : center of skeleton\n  // r : radius\n  return length(p-c)-r;\n}\n\nfloat Box(vec3 p, vec3 b)\n{\n    // Box\n    // p : point\n    // b : dimensions of the box (width, height, depth)\n    vec3 d = abs(p) - b;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat Torus(vec3 p, vec2 t)\n{\n  // Torus\n  // p : point\n  // t : torus parameters (majorRadius, minorRadius)\n  vec2 q = vec2(length(p.xz) - t.x, p.y);\n  return length(q) - t.y;\n}\n\nfloat Cylinder(vec3 p, vec2 c)\n{\n    // Cylinder\n    // p : point\n    // c : cylinder parameters (radius, height)\n    vec2 d = abs(vec2(length(p.xy), p.z)) - c;\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nfloat Capsule(vec3 p, vec3 c)\n{\n    // Capsule\n    // p : point\n    // c : capsule parameters (radius, height)\n    return max(length(p.xz) - c.x, abs(p.y) - c.y);\n}\n\nfloat Plane(vec3 p, vec4 pl)\n{\n    // Plane\n    // p : point\n    // pl : plane parameters (normal, distance from origin)\n    return dot(p, pl.xyz) + pl.w;\n}\n\n// Operators\n\nfloat Union(float a,float b)\n{\n  // Union\n  // a,b : field function of left and right sub-trees\n  return min(a,b);\n}\n\nfloat Intersection(float a, float b)\n{\n  // Intersection\n  // a,b : field function of left and right sub-trees\n  return max(a,b);\n}\n\nfloat Difference(float a, float b)\n{\n  // Difference\n  // a,b : field function of left and right sub-trees\n  return max(a,-b);\n}\n\nvec3 Translate(vec3 p, vec3 t)\n{\n  // Translation operator\n  return p - t;\n}\n\nvec3 RotateY(vec3 p, float angle)\n{\n  // Rotation operator around the Y axis\n  float s = sin(angle);\n  float c = cos(angle);\n  return vec3(p.x * c - p.z * s, p.y, p.x * s + p.z * c);\n}\n\nvec3 Scale(vec3 p, vec3 s)\n{\n  // Scaling (homothety) operator\n  return p * s;\n}\n\nfloat Escalier(vec3 p){\n  float step1 = Box(p, vec3(12.0, 1.0, 1.0));\n  float step2 = Box(p - vec3(0.0, 1.0, 1.0), vec3(12.0, 1.0, 1.0));\n  float step3 = Box(p - vec3(0.0, 2.0, 2.0), vec3(12.0, 1.0, 1.0));\n  float escalier1 = Union(step1, Union(step2, step3));\n  \n  float step4 = Box(p - vec3(13,11.,0.), vec3(1.,12.,1.));\n  float step5 = Box(p - vec3(12,12.,1.), vec3(1.,12.,1.));\n  float step6 = Box(p - vec3(11,13.,2.), vec3(1.,10.,1.));\n  float escalier2 = Union(step4,Union(step5,step6));\n  \n  float step7 = Box(p - vec3(-13.,11.,0.), vec3(1.,12,1.));\n  float step8 = Box(p - vec3(-12.,12.,1.), vec3(1.,12.,1.));\n  float step9 = Box(p - vec3(-11.,11.,2.), vec3(1.,10.,1.));\n  float escalier3 = Union(step7,Union(step8,step9));\n  \n  float step10 = Box(p - vec3(0.,24.,0.), vec3(14.,1.,1.));\n  float step11 = Box(p - vec3(-1.,23.,1.), vec3(12.,1.,1.));\n  float step12 = Box(p - vec3(0.,22.,2.), vec3(12.,1.,1.));\n  float escalier4 = Union(step10,Union(step11,step12));\n  \n  float escalier = Union(escalier1, Union(escalier2, Union(escalier3, escalier4)));\n  return escalier;\n}\n\nfloat Colonnes(vec3 p){\n  float colonne1 = Cylinder(p - vec3(10.5, 2.5, 8.0), vec2(1.0,5.0));\n  float colonne2 = Cylinder(p - vec3(-10.5, 2.5, 8.0), vec2(1.0,5.0));\n  float colonne3 = Cylinder(p - vec3(10.5, 21.5, 8.0), vec2(1.0,5.0));\n  float colonne4 = Cylinder(p - vec3(-10.5, 21.5, 8.0), vec2(1.0,5.0));\n  \n  float colonne5 = Cylinder(p - vec3(0.,7.,15.), vec2(1.,2.));\n  float colonne6 = Cylinder(p - vec3(0.,19.,15.), vec2(1.,2.));\n  float colonne7 = Cylinder(p - vec3(6.,13.,15.), vec2(1.,2.));\n  float colonne8 = Cylinder(p - vec3(-6.,13.,15.), vec2(1.,2.));\n  \n  float colonnes = Union(colonne1,Union(colonne2,Union(colonne3,Union(colonne4,\n  Union(colonne5,Union(colonne6,Union(colonne7,colonne8)))))));\n  return colonnes;\n}\n\nfloat object(vec3 p)\n{\n  // Potential field of the object\n  // p : point  \n  float plan = Plane(p,vec4(0.,0.,1.,0.));\n  \n  float sol = Box(p - vec3(0.0, 13.0, 2.0), vec3(10.0, 10.0, 1.0));\n  float escalier = Escalier(p);\n  float colonnes = Colonnes(p);\n  float toit = Difference(Box(p - vec3(0.0, 12.5, 12.0), vec3(12.0, 12.0, 1.0)),Cylinder(p - vec3(0.0, 13.0, 12.0),vec2(5.,5.)));\n  float sphere = Difference(Sphere(p,vec3(0.,13.,15.),8.),Box(p - vec3(0.,12.5,11.),vec3(12.,12.,6.)));\n  float sphereTrouee = Difference(sphere, Sphere(p,vec3(0.,13.,18.),5.5));  \n  float temple = Union(sol,Union(escalier,Union(colonnes,Union(toit,sphereTrouee))));\n  \n  float objet = Union(plan,temple);\n  \n  return objet;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\nvec3 ObjectNormal(vec3 p)\n{\n  // Object normal\n  // p : point\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  // Trace ray using ray marching\n  // o : ray origin\n  // u : ray direction\n  // e : Maximum distance\n  // h : hit\n  // s : Number of steps\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\nvec3 background(vec3 d)\n{\n  // Background color\n  // d : Ray direction\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  // Shadowing\n  // p : Point\n  // n : Normal\n  // l : Light direction\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Shading and lighting\n  // p : Point\n  // n : Normal at point\n  // e : Eye direction\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\nvec3 ShadeSteps(int n)\n{\n  // Shading according to the number of steps in sphere tracing\n  // n : Number of steps\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Picture in picture\n  // pixel : Pixel\n  // pip : Boolean, true if pixel was in sub-picture zone\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=false;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}","name":"Image","description":"","type":"image"}]}