{"ver":"0.1","info":{"id":"7dlyR7","date":"1641904547","viewed":141,"name":"Box Mask","username":"nebbul","description":"draw a box mask with a smooth falloff","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["square","box","mask"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// math from Unreal engine node BoxMask-3D\nfloat boxMask(vec2 uv, vec2 pivot, vec2 bounds, float falloff)\n{\n\tvec2 p = abs(uv - pivot);\n\tp = max(p - (bounds * 0.5), 0.);\n\t\n\treturn 1.0 - min(length(p) / max(falloff, 0.00001), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // UVs\n\tvec2 uv = fragCoord.xy/iResolution.yy;\n\n    float aspect = iResolution.x / iResolution.y;\n    \n    vec2 box_position = vec2(0.5 * aspect, 0.5); // center of screen\n\n    vec2 box_bounds = vec2(0.5, 0.5);\n    float box_falloff = 0.1;\n\n    float box = boxMask(uv, box_position, box_bounds, box_falloff);\n    \n    vec3 col = mix(vec3(0.,0.,0.), vec3(1., 1., 1.), box);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}