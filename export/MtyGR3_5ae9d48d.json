{"ver":"0.1","info":{"id":"MtyGR3","date":"1475791053","viewed":366,"name":"Metaball garbage","username":"twitchingace","description":"Messing around with positive and negative coloured 2D metaballs.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","metaball","learning","gooey"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"///////////////////////////////////////////////////////////\n// Simple messing around with 2D metaballs.\n// Exploring colourization as well as negative metaballs.\n// Use ISTHRESHOLD to determine if a zeroing threshold\n//   should be applied.\n// if ISTHRESHOLD is active, use ISSOLID to limit the balls\n// to their outlines.\n///////////////////////////////////////////////////////////\n\n#define ISSOLID 1\n#define ISTHRESHOLD 0\n#define posnum 7\n#define negnum 2\n\nfloat metaball(in vec3 ball, in vec2 testPoint){\n\treturn ball.z/length(ball.xy - testPoint);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 uv = fragCoord.xy / iResolution.xx;\n    // Set up positive metaballs\n    vec3 points[posnum];\n    vec3 colours[posnum];\n    points[0] = vec3(abs(0.1 + sin(iTime)), 0.2 + 0.2 * cos(iTime), .15);\n    colours[0] = vec3(1., 0., 0.);\n    \n    points[1] = vec3(0.5, abs(0.3 + .2 * sin(iTime * 0.7 + 5.)), .1);\n    colours[1] = vec3(0., 1., 0.);\n    \n    points[2] = vec3(abs(0.4 + sin(iTime)), 0.4 - 0.2 * cos(iTime), .3);\n    colours[2] = vec3(0., 0., 1.);\n    \n    points[3] = vec3(0.43,0.25 + .1* cos(iTime), .15);\n    colours[3] = vec3(1., 1., 0.);\n    \n    points[4] = vec3(0.42 + .4* sin(iTime),0.32 - .1 * sin(iTime * .2), .2);\n    colours[4] = vec3(1., 0., 1.);\n    \n    points[5] = vec3(abs(0.12 + .3 * sin(iTime - 10.)),0.52 + .25* cos(iTime), .07);\n    colours[5] = vec3(0., 1., 1.);\n    \n    points[6] = vec3(0.2+ .25* cos(iTime),0.6 - .1 * cos(iTime + 5.), .2);\n\tcolours[6] = vec3(1., 1., 1.);        \n    \n    \n    // Set up negative metaballs\n    vec3 negPoints[negnum];\n    vec3 negColours[negnum];\n    \n    negPoints[0] = vec3(0.64, 0.25, .2);\n    negColours[0] = vec3(1.2);\n    negPoints[1] = vec3(0.34 + .3 * sin(iTime * 2.), 0.25 + .2 * sin(iTime* 0.1), .15);\n    negColours[1] = vec3(1.);\n    vec3 rgb = vec3(0.);\n    \n    // apply positive metaballs\n    for (int i = 0; i < posnum; i++){  \n    \trgb += colours[i] * metaball(points[i], uv);    \n    }\n    \n    // negative metaball application\n    for (int i = 0; i < negnum; i++){  \n    \trgb -= negColours[i] * metaball(negPoints[i], uv);    \n    }\n    \n    // Manage effects\n    #if ISTHRESHOLD == 1\n    float threshold = 0.65;\n    if (rgb.x/2. <= threshold){\n        rgb.x = 0.;\n    }\n    if (rgb.y/2. <= threshold){\n    \trgb.y = 0.;\n    }\n    if (rgb.z/2. <= threshold){\n    \trgb.z = 0.;\n    }\n   \n    \n    #if ISSOLID == 0\n    float border = 0.03;\n    if (rgb.x/2. >= threshold + border || \n        \trgb.y/2. >= threshold + border || \n        \trgb.z/2. >= threshold + border){\n        rgb = vec3(0.0);\n    }\n    #endif\n    #endif\n    \n\tfragColor = vec4(rgb/2.,1.0);\n}","name":"Image","description":"","type":"image"}]}