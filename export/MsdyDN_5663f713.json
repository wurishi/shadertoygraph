{"ver":"0.1","info":{"id":"MsdyDN","date":"1519034639","viewed":370,"name":"Perlin noise fire","username":"BenWheatley","description":"Perlin noise based fire; each octave of the Perlin noise has a slightly different speed than the others, y ~ f(log2(octive_scale)*time)","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["procedural","perlinnoise","fire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * \"Fire\" by Ben Wheatley - 2018\n * License MIT License\n * Contact: github.com/BenWheatley\n */\n\n// constants\nconst int MAX_OCTAVE = 8;\nconst float PI = 3.14159265359;\n\nfloat cosineInterpolate(float a, float b, float x) {\n\tfloat ft = x * PI;\n\tfloat f = (1.0 - cos(ft)) * 0.5;\n\t\n\treturn a*(1.0-f) + b*f;\n}\n\nfloat seededRandom(float seed) {\n    int x = int(seed);\n    x = x << 13 ^ x;\n    x = (x * (x * x * 15731 + 789221) + 1376312589);\n    x = x & 0x7fffffff;\n    return float(x)/1073741824.0;\n}\n\n// The magic constants are essentially arbitary:\n// they define the scale of the largest component of the Perlin noise\nfloat perlinNoise(float x_arg, float y_arg, float time_arg) {\n    float sum = 0.0;\n    for (int octave=0; octave<MAX_OCTAVE; ++octave) {\n        float sf = pow(2.0, float(octave));\n        float x = x_arg*sf;\n    \tfloat y = (y_arg*sf) + (1.5*time_arg*log2(sf));\n    \tfloat y_scale = 1.0*sf;\n        \n\t\tfloat x_floor = floor(x);\n\t\tfloat y_floor = floor(y);\n\t\tfloat fraction_x = x - x_floor;\n\t\tfloat fraction_y = y - y_floor;\n        \n        float t1 = seededRandom( x_floor\t+\ty_scale *  y_floor      );\n\t\tfloat t2 = seededRandom( x_floor\t+\ty_scale * (y_floor+1.0) );\n        \n        x_floor += 1.0;\n        float t3 = seededRandom( x_floor\t+\ty_scale *  y_floor      );\n\t\tfloat t4 = seededRandom( x_floor\t+\ty_scale * (y_floor+1.0) );\n        \n\t\tfloat i1 = cosineInterpolate(t1, t2, fraction_y);\n\t\tfloat i2 = cosineInterpolate(t3, t4, fraction_y);\n        \n        sum += cosineInterpolate(i1, i2, fraction_x)/sf;\n    }\n    return 2.0*sum;\n}\n\n// main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float dx = 0.5 - uv.x;\n    float dy = 0.5 - uv.y;\n    dy *= iResolution.y / iResolution.x;\n    \n    float c = perlinNoise(dx, dy, iTime);\n    // Fiddle with brightness and contrast to push it into a nice range\n    c -= 2.4;\n    c *= cos(dx*PI); // This also makes it central in the image\n    c *= 1.0-((uv.y/iResolution.y)*256.0);\n    \n    float red = c*0.9;\n    float green =  c*(dy+0.25); // This makes it more yellow towards the bottom\n    \n    fragColor = vec4(red, green, 0, 0);\n}","name":"Image","description":"","type":"image"}]}