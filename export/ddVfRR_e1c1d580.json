{"ver":"0.1","info":{"id":"ddVfRR","date":"1697843258","viewed":44,"name":"Dot Matrix Experiment","username":"shaderwho","description":"dot matrix 3 layers","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["dotmatrix"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 hash(vec2 p) {\n    p = vec2(dot(p, vec2(1017.1, 3121.7)), dot(p, vec2(29.5, 2983.3)));\n    return fract(sin(p) * 43758.5453123);\n}\n\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    vec2 u = f*f*(1.0-2.0*f);\n    float a = dot(hash(i + vec2(0.0,0.0)), f - vec2(.0,0.0));\n    float b = dot(hash(i + vec2(1.0,0.0)), f - vec2(1.0,0.0));\n    float c = dot(hash(i + vec2(0.0,1.0)), f - vec2(0.0,1.0));\n    float d = dot(hash(i + vec2(1.0,1.0)), f - vec2(1.0,1.0));\n    return mix(mix(a, b, u.x), mix(c, d, u.y), u.y);\n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    uv *= vec2(.1);\n    uv = fract(uv);\n    \n    float oscillation = (sin(iTime) + 15.0) * .9;\n    float dynamicValue = mix(2.0, 1.0, oscillation);\n    uv = uv * dynamicValue - 1.0;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    float t = sin(iTime) * 1.0 + 1.0;\n    float brightness = t * noise(uv * -50.0 + vec2(iTime, iTime));\n    brightness += 0.55 * noise(uv * 50.0 + vec2(iTime, iTime)) * noise(uv * -5.0 + vec2(iTime, iTime)); // Reduced the coefficient to 0.25\n\n    vec3 baseColor = vec3(sin(iTime * 0.3) * 0.3 + 0.3, sin(iTime * 0.2) * 0.3 + 0.3, sin(iTime * 0.4) * 0.3 + 0.3); // Reduced the base amplitude and offset\n    vec3 color = baseColor + brightness;\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}