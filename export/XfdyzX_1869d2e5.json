{"ver":"0.1","info":{"id":"XfdyzX","date":"1730958040","viewed":102,"name":"Zellij pattern 20 (music)","username":"jarble","description":"A zellij tile pattern.\nClick and drag to move around.","likes":4,"published":3,"flags":40,"usePreview":0,"tags":["fractal","music","zellij","gamelan"],"hasliked":0,"parentid":"mtXBD8","parentname":"Zellij pattern 17 (music)"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define triangle_wave(a) abs( fract( (a)*1.5 + vec2(0,.25) ) - .5 )\n\nvec3 fractal(vec2 uv,vec2 t2){\n    vec3 col = vec3(0.);\n    \n    for(int k = 0; k < 5; k++){\n        uv =\n            (uv+t2)/1.5\n            //(uv+t2*sign(uv.y-uv.x))/1.5\n        ;\n        \n        uv = abs(fract(vec2(uv+.5)*3.)-.5)/3.;\n\n        if(\n            uv.y>uv.x\n        ) uv = uv.yx;\n\n        t2 =\n            -triangle_wave(uv-.5).yx\n        ;\n        uv =\n            (t2.yx-triangle_wave(uv.yx)).yx\n        ;\n        col =\n            vec3(col.zx,max(sign(uv.y-uv.x)*sign(t2.x-t2.y),0.))\n        ;\n        \n        if(abs(uv.x)<.25)\n        uv.x -= 1./4.;\n\n        }\n        return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = vec4(0.0);\n    float t1 = .5;\n    vec2 draggedPos = texelFetch(iChannel0, ivec2(1,0), 0).xy;\n\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    uv -= draggedPos/iResolution.y/t1/2.0;\n    vec2 t2 = vec2(0.);\n    vec3 col = abs(fractal(uv,t2));\n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"int collatz(int initial, int steps){\n    //makes some interesting rhythms\n    for(int i = 0; i < steps; i++){\n        if(initial%2==0) initial /= 2;\n        else initial = initial*3+1;\n    }\n    return initial;\n}\nfloat collatz(float initial, float steps){\n    return float(collatz(int(initial),int(steps)));\n}\n\nfloat binary_digit(int n, int i){\n    return float((n >> i) & 1);\n}\n\nfloat fract1(float a){\n    return\n        8.*abs(pow(fract(-a),2.)/4.)/8.\n        //abs(fract(a)*1.125-.125)\n    ;\n}\n\nfloat m1(float a, float b, float c){\n    return floor(floor(floor(a)/b)/c);\n}\n\nfloat mod1(float a, float b){\n    /*\n    for(float i = 1.; i < mod(floor(a/8.),8.); i++){\n        a += mod(floor(a/8.),b)*i;\n    }\n    */\n    return\n        mod(a,b)\n        //mod(a/2.-mod(a*2.,b),b)\n        //mod(a+floor(a/4.),b)\n        //mod(a+floor((((b/2.+a)+1.)/2.)),b)\n        //mod(a+floor(b*13./7.),b)\n        //floor(mod(floor(a+floor(a)/8.),b))\n        //mod(a-mod(a-mod(a,5.),3.),b)\n    ;\n}\n\nvoid distort(inout float a, inout float b){\n    for(float i = 1.; i < mod(floor(a/b),3.); i++){\n        a /= 2.;\n        a += mod1(floor(a/2.),b)*i;\n    }\n}\n\nfloat fmod(float a, float b){\n    //distort(a,b);\n    //a += collatz(a,b);\n    //a += collatz(mod(a,8.)+floor(a/8.),8.);\n    \n    //a += (mod(a/8.,3.)-mod(a/8.,2.));\n        \n    //a = (a/2. + floor(a))/4.;\n    \n    //a += floor(a/b)*8.;\n    //a += mod(floor(b/2.+floor(a/4.)),4.);\n    //a /= 1.+mod(floor(a+b),2.);\n    a +=\n        //floor(a/8./8.)\n        floor((a+b)/8.)\n        //m1(a/8.,b*b+5.,b+2.)\n        //m1(a,2.*b+b,3.+b)\n    ;\n    \n    //a += mod((floor(a)+b),3.);\n    //a += m1(a,3.,7.);\n    //a += abs(mod((a),3.)-mod((a),5.));\n    //a -= mod(b/2.,2.);\n    //a += mod(floor(a/4.),4.);\n    //a /= 2.;\n    //b += floor(b/2.);\n    \n    float\n        a1 = mod1(floor(a),b),\n        a2 =\n            mod1(floor((a)/b),b)\n            //mod1(floor((floor(a/2.)*b/4.+a)/b),b)\n    ;\n    \n    return\n        mod1(a1*a2,b)\n        //mod1(a1*a2+floor(a*sign(a1-a2)),b)\n        //mod(mod(floor(a+binary_digit(int(a),2)),b)*mod(floor((a)/b),b),b)\n        //floor(mod(mod(floor(a),b)*mod(a/b,b),b))\n        //mod(floor(a/b-mod(a/b,2.)+mod(a/b,3.)),b)\n        //floor(mod(mod(floor(a/b),b)*(2.-mod(floor(a/2.),2.)),b))\n        //floor(mod(floor(a)+mod(a/8.,8.),b))\n        //mod(floor(floor(a)*1.5)+floor(floor(a)*2.)+floor(floor(a)*3.),b)\n        //floor(mod(mod(floor(a)/4.,8.)*mod(floor(a)/4.,b),b))\n        //mod(mod(floor(a+b),b*b),b)\n        //mod(mod(floor(a),b+mod(floor(a/8.),b)),b)\n        //mod(floor(a),b)\n    ;\n}\n\n\nfloat prime_rhythm(float time){\n    \n    //time += fmod(time,4.)*4.;\n    \n    //time += mod(time/8.,2.) - mod(time/8.,3.);\n    \n    //time += floor(time*2.)/2.;\n    return\n        (1.+fmod(time/2.,2.))*(1.+fmod(time/3.,2.))/(1.+fmod(time/5.,2.))/(1.+fmod(time/7.,2.))\n        //(1.+fmod(time/2.,2.))/(1.+fmod(mod(time/2./3.,3.),2.))/(1.+fmod(mod(time/2./5.,5.),2.))\n    ;\n}\n\nfloat fmod1(float a, float b){\n    //a += collatz(a/8.,8.)*4.;\n    \n    //a += (mod(a/2.,3.)-mod(a/2.,2.));\n    \n    //change the notes without changing the rhythm\n    //a += mod(-b/2.,2.);\n    \n    //a /= prime_rhythm(a);\n    \n    return\n        //fmod(a,b)\n        //fmod(a+floor(b*(2.+floor(a/2.)))/2.,b)\n        //max(fmod(a-mod(a-mod(a,5.),3.),b),fmod(a-mod(a-mod(a,3.),5.),b))\n        fmod(a,b+fmod(floor(a)/4.,2.))\n        //max(fmod(a,b),fmod(a/2.,b*2.))\n        //fmod(a+fmod(a/8.,8.),b)\n    ;\n}\n\n\n//#define fract1(a) pow(fract(a),2.)\n//#define fract1(a) pow(fract(a),1.+fract(a))\n//#define fract1(a) (1.-fract(-a)*fract(-a))\n#define fract1(a) pow(fract(a),1.+log(2.)-log(1.+fract(a)))\n//#define fract1(a) pow(fract(a),1.+pow(fract(a),2.))\n//#define fract1(a) pow(fract(a),3.)\n\nvec2 synth_(vec2 a1,vec2 a,vec2 a2,vec2 a3,vec2 nb,vec2 a4){\n    return log(a1+a*abs(a2-abs(.5-a3*vec2(fract1(nb.x*.998),fract1(nb.y)))*a4));\n}\n#define synth(a1,a,a2,a3,nb,a4) synth_(vec2(a1),vec2(a),vec2(a2),vec2(a3),vec2(nb),vec2(a4))\n\nvec2 mainSound1(int samp, float time,float scale,int instrument,float duration){\n  \n  \n  \n  float tempo1 =\n      prime_rhythm(time)\n      //prime_rhythm(time+collatz(time,time))\n  ;\n  //time += floor(time/16.*tempo1);\n  \n  //time = time + floor(time*4.)/2.;\n  \n  float s1 =\n      8.,\n\n  t =\n      s1*time/4./tempo1\n      //s1*(time + floor(time*2.))/4./tempo1\n  ,\n  \n  t4 = t/prime_rhythm(time+11.)/(1.+fmod(t/8.,2.)),\n  t1 = fmod1(t4,2.), //one half octave lower or higher\n  t5 = t*2./prime_rhythm(time+7.),\n  t3 = (1.+fmod(t5,2.)),\n  t6 = time*8./t3,\n  m3 =\n      floor(fmod1(t6,s1/2.)/2.),\n      //floor(fmod(t6+floor(time/8./tempo1),s1/2.)/2.),\n  m2 =\n      1. + fmod1(t/t3/2.,s1/2.)\n      //1. + fmod(t/t3/2.+floor(t/8.),s1/2.)\n  ;\n  vec2 a= vec2(\n      //(2.-log(fract(t)))*(2.-log(fract(t/2.)))\n      //(1.-log(fract(t/2./prime_rhythm(time+14.))/2.))*(1.-log(fract(t/prime_rhythm(time+7.))/4.))\n      \n      //sitar / bell / hurdy-gurdy / gamelan / slap bass\n      //(1.-log(.125/4.+fract1(t/2./prime_rhythm(time+14.))/4.)),(1.-log(fract1(t/prime_rhythm(time+7.))/4.))\n      -(log(1./64./4.+fract1(t/2./prime_rhythm(time+14.))/8./duration)),-(log(1./64./4.+fract1(t/prime_rhythm(time+7.))/8./duration))\n\n      \n      //piano / marimba\n      //(1.-log(fract1(t/2./prime_rhythm(time+14.))*2.)),(1.-log(fract1(t/prime_rhythm(time+7.))*2.))\n      \n      //pow(2.-log(fract(t5)),2.)\n      //pow(2.-log(fract(t6)),2.)\n      //32.*sqrt(fract(-t/2.)/2.)/2.\n      //32.*log(fract(-t/4.)/2.)/2.\n      //4.*(1.-log(pow(fract(t),2.)))\n      //2.*log((1.+(fract(-(t)/2.)*fract(-t/2.)/8.)))\n  ),\n  nb = vec2(\n      t*vec2(pow(2.,(m3+m2-t1*4.)/7.+scale))*tempo1\n  ),\n  gamelan =\n      a/16./4.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      +.5*log(1./4.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))\n      ,\n  hurdy_gurdy =\n      .125/2.*(abs(log(1./16.+a*abs(1./16.-abs(.5-vec2(fract1(nb.x*.998*2.),fract1(nb.y*2.)))/2.))-log(1./16.+a*abs(1./16.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.))))\n  ,\n  sitar =\n      a/16./2.*abs(log(1./8.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      -log(1./16.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2./4.))) \n      //log(.125+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y*2.)))/2.))\n  ,oud = a/16./2.*abs(log(.5+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      +.5*log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n  ,steel_drum = a/16./4.*abs(log(1./2.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))))\n  + log(1./8.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))      \n  ,banjo = a/16./8.*abs(log(1./2.+a*abs(1./8.-.5*abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))))\n  -log(1./2.+a*abs(abs(1./2.-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))\n  ,guitar = a/16./8.*abs(log(1./4.+a*abs(1./8.-.5*abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))))\n      -log(1./4.+.5*a*abs(abs(1./2.-vec2(fract1(nb.x*.998),fract1(nb.y))))))\n  ,synth_drum = a/16./4.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))*4.))\n  + log(1./8.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/4.)))\n  ,harp = \n      a/16./4.*abs(\n      synth(1./4.,a,1./8.,1.,nb*4.,2.)\n      + synth(1./8.,a,1./4.,1.,nb*2.,1./2.))\n  ;\n;\n  //nb *= (1.-fract(floor(-t)/2.));\n  \n  switch(instrument){\n  case 1: return gamelan;\n  case 2: return steel_drum;\n  case 3: return oud;\n  case 4: return hurdy_gurdy;\n  case 5: return banjo;\n  case 6: return guitar;\n  case 7: return synth_drum;\n  default:\n  return\n      //log(abs(.5-vec2(fract(nb.x*.998),fract(nb.y)))*a)\n      \n      //sitar\n      gamelan\n      //steel_drum\n      //oud\n\n      //hurdy-gurdy\n      //hurdy_gurdy\n      \n      //saxophone\n      //(abs(log(a/32.+.125*a*abs(1./32.-abs(.5-vec2(fract1(nb.x*.998*2.),fract1(nb.y*2.)))/2.))-log(1./16.+a*abs(1./16.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.))))\n\n      \n      //bell\n      //abs(log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*4.)))/2.))\n      //+log(1./16.+a*abs(1./16.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*4.)))/2.)))/2.\n      \n      //slap bass\n      //abs(log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*8.*.998),fract1(nb.y*8.)))/2.))\n      //+log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n      \n      //marimba\n      //(abs(log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))-log(1./4.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.))))\n      \n      //koto\n      //abs(log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.))\n      //+log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998*2.),fract1(nb.y*2.)))/2.)))/2.\n      \n      //log(abs(a/8.-abs(.5-vec2(fract(nb.x*.998),fract(nb*2.)))*a))\n      //log(abs(abs(a/4.)-abs(a/8.-abs(.5-vec2(fract(nb.x/2.+.5),fract(nb.y)))*a)))\n      \n      //abs(log(abs(.5-vec2(fract(nb*.998),fract(nb)))*a/2.))/2.\n      //log(1.+abs(a/16.-abs(.5-vec2(fract(-nb*.998),fract(-nb)))*a))\n      //abs(log(a)-abs(.5-vec2(fract(nb*.998),fract(nb)))*a)\n  ;\n  }\n}\n\nvec2 mainSound1(int samp, float time,float scale,int instrument){\n    return mainSound1(samp, time,scale,instrument,1.);\n}\n\nvec2 mainSound(int a,float b){\n    \n    //sitar\n    //return (mainSound1(a,b,6.5,1,1./2.)-mainSound1(a,b,5.5,1,1./4.));\n    //return (mainSound1(a,b,6.,1,1./4.)*2.+mainSound1(a,b,5.,1,1./4.));\n    \n    return abs(mainSound1(a,b,6.5,1,1./2.)-mainSound1(a,b,6.5,1)/2.);\n    \n    //sitar remix\n    //return (mainSound1(a,b,5.,7)-mainSound1(a,b,4.,7));\n    \n    //bagpipe remix\n    //return mainSound1(a,b/4.,7.,4)/2.+mainSound1(a,b/2.,8.,4)/2.;\n    \n    //return (mainSound1(a,b,7.,6)+mainSound1(a,b/2.,7.,6)*2.)/2.;\n\n    //return (mainSound1(a,b/2.,6.5,1)+mainSound1(a,b,6.5,2)/2.)/2.;\n    //return (mainSound1(a,b,6.5,1)+mainSound1(a,b/2.,7.5,1)+mainSound1(a,b/4.,8.5,1))/3.;\n    //return mainSound1(a,b,6.5,1)+mainSound1(a,b/2.,6.5,1)/2.+mainSound1(a,b/4.,7.5,1)/4.+mainSound1(a,b/8.,8.5,1)/8.;\n}","name":"Sound","description":"","type":"sound"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//from https://www.shadertoy.com/view/dtGGzK\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0);\n    if (floor(fragCoord) == vec2(1,0)) {\n        vec2 prevpos = texelFetch(iChannel0, ivec2(1,0), 0).zw; //previous dragged mouse pos\n        vec4 mp = texelFetch(iChannel0, ivec2(2,0), 0); //prev mouse pos\n        vec4 m = iMouse; //current mouse pos\n        \n        //if mouse button up\n        if (m.z < 0.0 && mp.z >= 0.0){\n            col = texelFetch(iChannel0, ivec2(1,0), 0).xyxy;\n        } else if (m.z >= 0.0){\n            col = vec4(m.xy - abs(m.zw) + prevpos, prevpos);\n        } else {\n            col = texelFetch(iChannel0, ivec2(1,0), 0);\n        }\n    }\n    //the last mouse position\n    if (floor(fragCoord) == vec2(2,0)) {\n        col = iMouse;\n    }\n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"}]}