{"ver":"0.1","info":{"id":"7sdfDl","date":"1657486027","viewed":84,"name":"Screen space dither","username":"DGriffin91","description":"Iestyn's RGB dither (7 asm instructions) from Portal 2 X360, slightly modified for VR","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["dither"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 screen_space_dither(vec2 frag_coord) {\n\t// Iestyn's RGB dither (7 asm instructions) from Portal 2 X360, slightly modified for VR.\n    vec3 dither = vec3(dot(vec2(171.0, 231.0), frag_coord));\n    dither = fract(dither.rgb / vec3(103.0, 71.0, 97.0));\n\t// Subtract 0.5 to avoid slightly brightening the whole viewport.\n    return vec4((dither.rgb - 0.5) / 255.0, 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    float grey = uv.x * 0.1 + 0.2;\n    \n    vec4 col = vec4(grey, grey, grey, 1.0);\n    \n    // Dither bottom two thirds\n    if (uv.y < 0.66) {\n        col = screen_space_dither(fragCoord.xy) * min(15.0 * col, vec4(1.0)) + col;\n    }\n    \n    // Quantize\n    col = floor(col * 255.0) / 255.0;\n    \n    // Contrast bottom third\n    if (uv.y < 0.33) {\n        col = pow(col * 4.0, vec4(20.0));\n    }\n\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}