{"ver":"0.1","info":{"id":"DlGSWt","date":"1686523756","viewed":34,"name":"Rectangle by 3 vertices","username":"azherebtsov","description":"Render a rectangle by 3 adjacent vertices. ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["square","rectangle","shape","primitive"],"hasliked":0,"parentid":"XtVXDV","parentname":"Rotating Rectangle"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nvec2 ZERO = vec2(0.);\nvec2 ONE = vec2(1.);\nvec2 ALIASING = vec2(.001);\n\n/*\n\nRectangle defined by 3 adjacent vertices: BAC. \n\n                _____-----B          \n          A-----\n          |\n           |\n            C\n\n*/\nvec2 A = vec2(.2, .35);\nvec2 B = vec2(.8, .35);\nvec2 C = vec2(.2, .25);\n\n\nfloat box(in vec2 _st, in vec2 _size){\n    // move vertical so that A is top left vertex\n    _st.y += _size.y; \n    vec2 uv = smoothstep(ZERO,\n                         ALIASING,\n                         _st);\n\n    uv *= smoothstep(ONE - _size,\n                     ONE - _size + ALIASING,\n                     ONE - _st);\n    return uv.x * uv.y;\n}\n\nmat2 rotate2d(vec2 _angle){\n    // asusming that _angle.x = cos(angle) and _angle.y = sin(angle)\n    return mat2(_angle.x, -_angle.y,\n                _angle.y, _angle.x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    float aspectRatio = iResolution.x / iResolution.y;\n\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= aspectRatio; // Correct for aspect ratio\n    A.x *= aspectRatio;\n    B.x *= aspectRatio;\n    C.x *= aspectRatio;\n    \n    // moving B just for fun :)\n    B.y += sin(iDate.w * 1.) * PI / 30.;\n    \n    vec3 color = vec3(0.0);\n\n    // move origin to point A\n    st -= A;\n\n    vec2 BA = B - A;\n    // computing sin and cos of the angle between AB and X axis. \n    // In a right triangle `sin = opposite/hypotenuse`,\n    // `cos = adjacent/hypotenuse`.\n    // Roatting the world around point A on that angle.\n    // Using only BA edge assuming that BAC must be a right angle.\n    st = rotate2d( vec2(BA / length(BA)) ) * st;\n\n    // Uncomment to show the coordinates of the space on the background\n    // color = vec3(st.x,st.y,0.0);\n\n    // Drawing rectangle at new origin\n    color = max(color, vec3(box(st, vec2(length(BA), length(C-A)))));\n\n    fragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}