{"ver":"0.1","info":{"id":"WdtBz7","date":"1604684156","viewed":196,"name":"Rewind Effect","username":"TundrumMax","description":"partially unfinished rewind shader","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["rewind"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//from https://www.shadertoy.com/view/lsdXDH\n#define PI 3.14159265359\n\n\nvec4 generic_desaturate(vec3 color, float factor)\n{\n\tvec3 lum = vec3(0.299, 0.587, 0.114);\n\tvec3 gray = vec3(dot(lum, color));\n\treturn vec4(mix(color, gray, factor), 1.0);\n}\n\n\nvec3 bwoow(vec2 uv) {\n \tfloat bwoow = (sin(clamp(0.0,1.0,iTime / 2.0) * 3.1415926)) * 2.0;\n    \n    float sinewave = sin(clamp(0.0,1.0,length(uv-0.5)) * 2.0);\n    \n    float bwoow2ElectricBoogaloo = (1.0-sinewave) * bwoow / 4.0;\n\tvec2 scale = (uv-0.5) * (1.0-bwoow2ElectricBoogaloo-1.0);\n    \n    return vec3(scale,bwoow);\n}\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\nfloat scanline(vec2 uv, float squish,float epsilon) {\n    float show = floor(noise(uv * vec2(5.0,50.0))+epsilon);\n    float vertical = cos(uv.y*PI*2.0 * squish + PI)*.5+.5;\n    return vertical * show;\n}\nfloat weirdVignette(vec2 uv, float power) {\n \tfloat dist = distance(uv,vec2(0.5,0.5));\n    return 1.0 / (dist * power + 1.0);\n}\nfloat distortion2(vec2 uv) {\n\tfloat one = noise(uv * vec2(0.0,10.0) + iTime * 2.0) / 1.0;\n    float two = noise(uv * vec2(0.0,20.0) + iTime * 8.0) / 2.0;\n    return one + two;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\tvec3 distort = bwoow(uv);\n    \n    float shakeSpeed = iTime * 100.0;\n    float shakeSize = 0.002;\n    vec2 shake = vec2(sin(shakeSpeed),cos(shakeSpeed)) * shakeSize * sqrt(distort.z);\n\t\n    float lines = scanline(uv +iTime * 50.0 * vec2(1.0,2.0) * 1.0,20.0,0.05);\n    \n    float timeEffects = smoothstep(0.0,1.0,iTime);\n    float timeEffects2 = smoothstep(0.0,3.0,iTime);\n    \n    float distortion = ((distortion2(uv) / 1.5) / 16.0 - 1.0 / 32.0)* timeEffects2;\n    // Output to screen\n    fragColor = (1.0-weirdVignette(uv,timeEffects2 * 2.0)) / 2.0 + weirdVignette(uv,timeEffects * 2.0) * generic_desaturate(texture(iChannel0, uv + distortion * vec2(1.0,0.0) + distort.xy + shake).rgb + lines* smoothstep(0.0,2.0,iTime),smoothstep(0.0,1.0,iTime) / 1.5);\n    //fragColor = vec4(vec3(distortion),1.0);\n}","name":"Image","description":"","type":"image"}]}