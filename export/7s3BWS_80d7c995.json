{"ver":"0.1","info":{"id":"7s3BWS","date":"1657094684","viewed":100,"name":"4D RayMarching f","username":"Proger","description":"Does anyone know how to get the surface normal of a 4D object?","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["4draymarcing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415926535;\nvec3 colorO = vec3(1);\nfloat wi = 0.0;\n\nfloat smin(float a, float b, float k)\n{\n   return log2(exp2(k * a) + exp2(k * b)) / k;\n}\n\nmat2 mrot(float a){\n  float c = cos(a);\n  float s = sin(a);\n  return mat2(c,-s,s,c);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdBox( vec4 p, vec4 b )\n{\n  vec4 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,max(q.z, q.w))),0.0);\n}\n\nfloat getDist(vec3 c){\n  vec4 p = vec4(c.xyz, wi);\n  vec4 t = p;\n  t.xw *= mrot(iTime);\n  t.zw *= mrot(iTime);\n  t.yw *= mrot(iTime);\n  return sdBox(t, vec4(1));\n}\nvec3 getNormal(vec3 p){\n  vec2 e = vec2(0.001,0);\n  float d = getDist(p);\n  vec3 n = vec3(\n    d - getDist(p-e.xyy),\n    d - getDist(p-e.yxy),\n    d - getDist(p-e.yyx)\n  );\n  return normalize(n);\n}\nvec3 RayMarch(vec3 ro, vec3 rd){\n  float dO = 0.0;\n  for(int i = 0; i < 300; i++){\n    vec3 p = ro + rd*dO;\n    float ds = getDist(p);\n    dO += ds;\n    if(dO > 10.) break;\n    if(ds < 0.001) return p;\n  }\n  return vec3(0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  wi = abs(sin(iTime / 3.));\n  float m = min(iResolution.y,iResolution.x);\n  vec2 uv = ((fragCoord.xy-.5*iResolution.xy) / m);\n  vec3 color = vec3(1,5,-6);\n  vec3 light = vec3(3.,5,-1.);\n  vec3 ro = vec3(0, 0, -6);\n  vec3 rd = normalize(vec3(uv.xy, 1));\n  ro.yz *= mrot(-iMouse.y/iResolution.y*PI*3.-PI*1.5);\n  ro.xz *= mrot(-iMouse.x/iResolution.x*PI*3.-PI*1.5);\n  rd.yz *= mrot(-iMouse.y/iResolution.y*PI*3.-PI*1.5);\n  rd.xz *= mrot(-iMouse.x/iResolution.x*PI*3.-PI*1.5);\n  vec3 d = RayMarch(ro,rd);\n  //color = vec3(max( (dot(getNormal(d), normalize(light))), 0.1));\n  color = abs(getNormal(d));\n  color = pow(color, vec3(0.4545));\n  if(d != vec3(0))fragColor = vec4(color, 1.0);\n  else fragColor = vec4(0.7,0.7,0.9,1);\n}","name":"Image","description":"","type":"image"}]}