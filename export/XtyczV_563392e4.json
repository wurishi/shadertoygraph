{"ver":"0.1","info":{"id":"XtyczV","date":"1536870386","viewed":431,"name":"Circle Vu Meter","username":"dlyr","description":"first test","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["sound","fx","vumeter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","previewfilepath":"/media/ap/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by inigo quilez - iq/2013\n// Modified by dlyr 2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n// See also:\n//\n// Input - Keyboard    : https://www.shadertoy.com/view/lsXGzf5\n// Input - Microphone  : https://www.shadertoy.com/view/llSGDh\n// Input - Mouse       : https://www.shadertoy.com/view/Mss3zH\n// Input - Sound       : https://www.shadertoy.com/view/Xds3Rr\n// Input - SoundCloud  : https://www.shadertoy.com/view/MsdGzn\n// Input - Time        : https://www.shadertoy.com/view/lsXGz8\n// Input - TimeDelta   : https://www.shadertoy.com/view/lsKGWV\n// Inout - 3D Texture  : https://www.shadertoy.com/view/4llcR4\n\n\n#define M_PI 3.1415926535897932384626433832795\nvec3 circle(vec2 uv, float radius, float offset, float subdiv, float width, float stre, float eStre){        \n    vec2 center = vec2(0.);\n    \n    vec2 p = uv-center;\n    p = vec2(cos(offset)*p.x-sin(offset)*p.y,\n             sin(offset)*p.x+cos(offset)*p.y);\n    vec2 n = normalize(p);\n    \n    float a = acos(n.x);\n    if(n.y<0.) a = 2.0*M_PI-a;\n    a /= 2.0*M_PI;\n    \n//    int tx = int(a*512.0);\n    int tx = int(a*512.0/subdiv)*int(subdiv);\n    float wave = texelFetch( iChannel0, ivec2(tx,1), 0 ).x;\n  \tfloat fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x; \n\n    radius += stre*fft;\n    float d = abs(radius-length(p));\n    \n    float edge0 = (a*512.0/subdiv-float(int(a*512.0/subdiv)));\n    float edge1 = 1.0-edge0;\n    float e = (1.-eStre*(1.0-smoothstep(0.05, 0.1, edge0*edge1)));\n    return e*(1.0-vec3(smoothstep(0.7, 0.80, smoothstep(0.0, width, d))));    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // create pixel coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float boost  = texelFetch( iChannel0, ivec2(1,0), 0 ).x; \n\n    \n    uv.x += -clamp(boost-.5, 0.0, 1.0)*3.0*\n        //(.5*cos(iTime)-.5)*\n        (uv.y)*(uv.x-0.5);\n\tuv.x = clamp(uv.x, 0., 1.);\n    \n    vec2 ruv = uv-0.5;\n    vec2 sq = cos(ruv*10.0)*sin(ruv*10.0);\n    sq = smoothstep(vec2(0.), vec2(.5), sq)*2.0-1.0;\n    \n   // sq = ruv;\n    ruv -= cos(iTime)*0.3*0.05*sq;\n    \n\truv = ruv*vec2(1, iResolution.y/iResolution.x);\n    // the sound texture is 512x2\n    int tx = int(sq.x+uv.x*512.0);\n    \n\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\tfloat fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x; \n\n    // second row is the sound wave, one texel is one mono sample\n    float wave = texelFetch( iChannel0, ivec2(tx,1), 0 ).x;\n\t\n\t// convert frequency to colors\n\tvec3 col = vec3( cos(iTime)*fft, sin(iTime)*4.0*fft*(1.0-fft), 1.0-fft ) * fft;\n\n    // add wave form on top\t\n\tcol += 1.0 -  smoothstep( 0.0, 0.01, abs(wave - uv.y) );\n    float offset = 0.1*iTime+5.0*\n        smoothstep(0.2, 5.0,\n                   (texelFetch( iChannel0, ivec2(0,0), 0 ).x+texelFetch( iChannel0, ivec2(1,0), 0 ).x)\n                  )\n        ;\n    \n    \n   col += 0.3*vec3(circle(ruv, 0.2, offset, 32.0, 0.05, 0.2, 1.0));\n   col += 0.8*vec3(circle(ruv, 0.1, 0.0, 1.0, 0.01, 0.3, 0.0));\n\n    //col = vec3(sq,0);\n    \n//col = vec3(circle(ruv, wave));\n\t// output final color\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define M_PI 3.1415926535897932384626433832795\nvec3 circle(vec2 uv, float radius, float offset, float subdiv, float width, float stre, float eStre){        \n    vec2 center = vec2(0.);\n    \n    vec2 p = uv-center;\n    p = vec2(cos(offset)*p.x-sin(offset)*p.y,\n             sin(offset)*p.x+cos(offset)*p.y);\n    vec2 n = normalize(p);\n    \n    float a = acos(n.x);\n    if(n.y<0.) a = 2.0*M_PI-a;\n    a /= 2.0*M_PI;\n    \n//    int tx = int(a*512.0);\n    int tx = int(a*512.0/subdiv)*int(subdiv);\n    float wave = texelFetch( iChannel0, ivec2(tx,1), 0 ).x;\n  \tfloat fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x; \n\n    radius += stre*fft;\n    float d = abs(radius-length(p));\n    \n    float edge0 = (a*512.0/subdiv-float(int(a*512.0/subdiv)));\n    float edge1 = 1.0-edge0;\n    float e = (1.-eStre*(1.0-smoothstep(0.05, 0.1, edge0*edge1)));\n    return e*(1.0-vec3(smoothstep(0.7, 0.80, smoothstep(0.0, width, d))));    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // create pixel coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float boost  = texelFetch( iChannel0, ivec2(1,0), 0 ).x; \n\n    \n    uv.x += boost*1.0*(.5*cos(iTime)-.5)*(uv.y)*(uv.x-0.5);\n\n    \n    vec2 ruv = uv-0.5;\n    vec2 sq = cos(ruv*10.0)*sin(ruv*10.0);\n    sq = smoothstep(vec2(0.), vec2(.5), sq)*2.0-1.0;\n    \n   // sq = ruv;\n    ruv -= cos(iTime)*0.3*0.05*sq;\n    \n\truv = ruv*vec2(1, iResolution.y/iResolution.x);\n    // the sound texture is 512x2\n    int tx = int(sq.x+uv.x*512.0);\n    \n\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\tfloat fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x; \n\n    // second row is the sound wave, one texel is one mono sample\n    float wave = texelFetch( iChannel0, ivec2(tx,1), 0 ).x;\n\t\n\t// convert frequency to colors\n\tvec3 col = vec3( fft, 4.0*fft*(1.0-fft), 1.0-fft ) * fft;\n\n    // add wave form on top\t\n\tcol += 1.0 -  smoothstep( 0.0, 0.01, abs(wave - uv.y) );\n    float offset = 0.1*iTime+5.0*\n        smoothstep(0.2, 5.0,\n                   (texelFetch( iChannel0, ivec2(0,0), 0 ).x+texelFetch( iChannel0, ivec2(1,0), 0 ).x)\n                  )\n        ;\n    \n    \n   col += 0.3*vec3(circle(ruv, 0.2, offset, 32.0, 0.05, 0.2, 1.0));\n   col += 0.8*vec3(circle(ruv, 0.1, 0.0, 1.0, 0.01, 0.3, 0.0));\n\n    //col = vec3(sq,0);\n    \n//col = vec3(circle(ruv, wave));\n\t// output final color\n\tfragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}