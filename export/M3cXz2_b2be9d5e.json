{"ver":"0.1","info":{"id":"M3cXz2","date":"1719349853","viewed":53,"name":"Aufgabe 1 - Ray Casting","username":"baelarious","description":"aufgabe 1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raycasting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Constants\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nconst float EPSILON = 0.0005;\n\n//////////////////////////////////////////////////////////////////////\n\nstruct Surface {\n    float sd; // signed distance value\n    vec3 col; // color\n};\n\nSurface sdSphere(vec3 p, float r, vec3 offset, vec3 col)\n{\n  p = (p - offset); // apply transformation matrix\n  float d = length(p) - r;\n  return Surface(d, col);\n}\n\nSurface sdBox(vec3 p, vec3 b, vec3 offset, vec3 col)\n{\n  p = (p - offset); // apply transformation matrix\n  vec3 q = abs(p) - b;\n  float d = length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n  return Surface(d, col);\n}\n\nSurface sdFloor(vec3 p, vec3 col) {\n  float d = p.y + 1.;\n  return Surface(d, col);\n}\n\n//////////////////////////////////////////////////////////////////////\n\nSurface opUnion(Surface obj1, Surface obj2) {\n  if (obj2.sd < obj1.sd) return obj2;\n  return obj1;\n}\n\nSurface scene(vec3 p) {\n  vec3 floorColor = vec3(1. + 0.7*mod(floor(p.x) + floor(p.z), 2.0));\n  \n  Surface sFloor = sdFloor(p, floorColor);\n  Surface sBox = sdBox(p, vec3(1), vec3(-2, 0.5, -4), vec3(1, 0, 0)); // left cube\n  Surface sSphere =  sdSphere(p, 1., vec3(2, 0.5, -4), vec3(0, 1, 0)); // right cube\n  \n  Surface co = opUnion(sFloor, sBox);\n  co = opUnion(co, sSphere);\n  return co;\n}\n\nSurface rayMarch(vec3 ro, vec3 rd) {\n  float depth = MIN_DIST;\n  Surface co; // closest object\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = scene(p);\n    depth += co.sd;\n    if (co.sd < PRECISION || depth > MAX_DIST) break;\n  }\n\n  co.sd = depth;\n\n  return co;\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1, -1) * EPSILON;\n    return normalize(\n      e.xyy * scene(p + e.xyy).sd +\n      e.yyx * scene(p + e.yyx).sd +\n      e.yxy * scene(p + e.yxy).sd +\n      e.xxx * scene(p + e.xxx).sd);\n}\n\nfloat softShadow(vec3 ro, vec3 rd, float mint, float tmax) {\n    float res = 1.0;\n    float t = mint;\n    for (int i = 0; i < 16; i++) {\n        float h = scene(ro + rd * t).sd;\n        if (h < EPSILON) return 0.0;\n        res = min(res, 8.0 * h / t);\n        t += clamp(h, 0.02, 0.10);\n        if (t > tmax) break;\n    }\n    return res;\n}\n\n//////////////////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = (fragCoord-.5*iResolution.xy) / iResolution.y;\n  vec3 backgroundColor = vec3(0, 0, 0);\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0, 3); // ray origin that represents camera position\n  vec3 rd = normalize(vec3(uv, -1)); // ray direction\n\n  Surface co = rayMarch(ro, rd); // closest object\n\n  if (co.sd > MAX_DIST) {\n    col = backgroundColor; // ray didn't hit anything\n  } else {\n    vec3 p = ro + rd * co.sd; // point discovered from ray marching\n    vec3 normal = calcNormal(p);\n\n    vec3 lightPosition = vec3(cos(iTime), 2, sin(iTime));\n    vec3 lightDirection = normalize(lightPosition - p);\n\n    float dif = clamp(dot(normal, lightDirection), 0., 1.) + 0.5; // diffuse reflection\n\n    float softShadow = clamp(softShadow(p, lightDirection, 0.02, 2.5), 0.1, 1.0);\n\n    col = dif * co.col * softShadow;\n  }\n\n  fragColor = vec4(col, 1.0); // Output to screen\n}","name":"Image","description":"","type":"image"}]}