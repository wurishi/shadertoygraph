{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Lanza 2014\n// Default CC of Shadertoy\n\n#define EPSILON 0.0001\n#define PI 3.14159265359\n\n// Primitives by iq\nfloat sphere( vec3 p, float radius ) {\n    return length(p) - radius;\n}\n\nfloat box( vec3 p, vec3 b )\n{\n\tvec3 d = abs(p) - b;\n\treturn min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n// polynomial smin by iq (very powerful)\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n// eye and eye lids are repeated, hence the funcs\nfloat eyeLid( vec3 p) {\n\t// up lid is a sphere cut by a bounding box\n\tfloat up = max(sphere(p, 0.2), box(p - vec3(0.0, -0.1, 0.0), vec3(0.2, 0.1,0.2)));\n\tfloat down = sphere(p, 0.18);\n\t\n\t// blink every 3 secs;\n\tif(mod( iTime, 3.0) > 0.15)\n\t\tdown =  max(sphere(p, 0.18), sphere( p + vec3( 0.0, -0.2, 0.1), 0.17));\n\treturn min( up, down);\n}\n\nfloat eye( vec3 p) {\n\treturn sphere( p, 0.16 );\n}\n\n\n// returns vec 2 : x is the distance, y the material.\nvec2 scene( vec3 p )\n{\n\tfloat crane = sphere(p, 0.6);\n\tfloat eyeLids = min(eyeLid(p - vec3(0.25, -0.1, 0.5)), eyeLid(p + vec3(0.25,0.1,-0.5)));\n    float head = smin(crane, eyeLids, 0.07);\n\thead = max( head, -box( p + vec3(0.0, -0.45, -0.65), vec3(1.0, 0.2, 0.3)));\n\tfloat nose = sphere(p - vec3(0.0, 0.1, 0.6), 0.2);\n\tfloat skin = smin(head, nose, 0.09);\n\tfloat eyes = min( eye(p - vec3(0.25, -0.1, 0.5)), eye(p + vec3(0.25,0.1,-0.5)));\n\t\n\tif( min(skin, eyes) == eyes ) // hit eyes ? switch material.\n\t\treturn vec2( eyes, 1.0);\n\t\n\treturn vec2(skin, 0.0);\n\t\n}\n\n// Get normal of a point.\nvec3 normal( vec3 p )\n{\n    vec2 n = vec2( EPSILON, 0.0 );\n    return normalize( vec3 (\n        scene( p + n.xyy ).x - scene( p - n.xyy ).x,\n        scene( p + n.yxy ).x - scene( p - n.yxy ).x,\n        scene( p + n.yyx ).x - scene( p - n.yyx ).x\n        )\n    );\n}\n\n\n// \"shadowing\" would be more accurate. Based on iq's...\nfloat lighting( vec3 p, vec3 light )\n{\n\t// march from pos to light\n\tvec3 ldir = normalize( light - p );\n\tfloat dist = scene(p).x;\n\tfloat t = dist;\n\tfloat maxt = length(light - p);\n\t\n\tfloat res = 1.0;\n\tfor(int i = 0; i < 500; i++)\n\t{\n\t\tif( t >= maxt )\n\t\t\tbreak;\n\t\t\n\t\tvec3 cp = p + ldir * t;\n\t\tdist = scene(cp).x;\n\t\t\n\t\t // has to be way less than than main march's EPSILON, otherwise I get artifacts.\n\t\tif( dist < EPSILON/1000. )\n\t\t\treturn 0.0;\n\t\t\n\t\tres = min( res, 8. * dist/t );\n\n\t\tt += dist;\n\t}\n\t\n\treturn res;\n}\n\n// TODO : clean this mess.\nvec4 march( vec3 cam, vec3 dir, vec2 crmouse )\n{\n\n    float t = scene(cam).x;\n    vec3 light = vec3(3.0 * -sin(iTime), 0.2, 1.4  * cos(iTime));\n    vec3 light2 = vec3( 0.0, 3.0, 2.0 );\n    \n\tvec4 color = vec4( 0.2, 0.2, 0.2, 1.0 );\n\t\n    for(int i=0; i < 50; i++)\n    {\n        vec3 p = cam + dir * t;\n\t\tvec2 res = scene(p);\n        float dist = res.x;\n        if( dist < EPSILON )\n        {\n            vec3 nml = normal(p);\n\t\t\tfloat shadows = lighting(p, light);\n            float l = (dot(nml, normalize(light)) * shadows) /length(p - light);\n            float l2 = dot(nml, normalize(light2));\n\n\t\t\tif( res.y < 0.5 ) {\n\t\t\t\t// material 1\n\t\t\t\tfloat red = clamp(l * 2.0, 0.0, 1.0);\n\t\t\t\tfloat green = clamp( l * 2.0, 1.0, 2.0) - 1.0;\n\t\t\t\tfloat blue = clamp( l2, 0.0, 1.0);\n\t\t\t\tcolor = vec4( red, green, blue, 1.0);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// material 2\n\t\t\t\tvec4 c = vec4(l2 + 0.2);\n\t\t\t\tvec3 eyeDir = normalize(vec3(crmouse.x - 0.5, -crmouse.y + 0.7, 3.0-cam.z*1.2)-p);\n\t\t\t\tfloat iris = dot( nml, eyeDir);\n\t\t\t\tvec2 centerToIris = (eyeDir - nml).xy; // awful approx... Good enough for the job.\n\t\t\t\t\t\n\t\t\t\tif( iris > 0.95 )\n\t\t\t\t\tc = vec4(0.0);\n\t\t\t\telse if( iris > 0.81 )\n\t\t\t\t\tc = vec4(0.9 * 7.0 * (iris - 0.81),0.7,0.3,1.0) * texture(iChannel0, vec2(\n\t\t\t\t\t\tatan(centerToIris.x, centerToIris.y)/PI, iris/6.0)).r * l2;\n\t\t\t\telse if( iris > 0.78 )\n\t\t\t\t\tc = vec4(0.0);\n\t\t\t\t\t\n\t\t\t\tfloat specl = max(0.0, dot(reflect(normalize(light),nml), dir));\n\t\t\t\tfloat specl2 = max(0.0, dot(reflect(normalize(light2),nml), dir));\n\t\t\t\tc += 5.0 *\n\t\t\t\t\tpow(specl, 190.0)  * shadows + pow(specl2, 190.0);\n\t\t\t\tc.rg *= 0.6 + 0.4 * l; \n\t\t\t\tcolor = c;\n\t\t\t}\n\t\t\t\n            return color;\n\t\t} \n\t\t// Very simple edge detection.\n\t\telse if(dist > EPSILON && dist < 0.01 ) \n\t\t{\n\t\t    color = vec4(0.0);\n\t\t}\n        \n        t += dist;\n        \n    }\n\treturn color;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n\t// face the camera until mouse moved. \n\t// Better for preview thumbnail. Marketing's everywhere.\n\tvec2 crmouse = vec2(0.5, 0.67);\n\tif( iTime > 0.0 && (iMouse.x != 0.0 || iMouse.y != 0.0))\n\t\tcrmouse = iMouse.xy/iResolution.xy;\n\t\n\t// Move the cam around the scene, with a nice ellipse, to get a bigger nose when we apporach it.\n    vec3 cam = vec3( 3.0 * cos(PI/3.0*((crmouse.x)+1.0) ), 0.0, 1.5 * sin(PI/3.0*((crmouse)+1.0)));\n    vec3 camTarget = vec3(0.0);\n\t\n\tvec2 targetFragment = vec2(             \n       fragCoord.x*2.0/iResolution.x - 1.0,\n       (fragCoord.y*2.0/iResolution.y - 1.0) * iResolution.y / iResolution.x\n\t);\n\t\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 right = normalize(cross( camTarget - cam, up));\n\t\n    // Spent some time before realizing why this is needed ^^ (and why I got silly deformation). \n\t// At this point, up is world related, not cam related.\n\tup = normalize(cross(camTarget - cam, right));\n    vec3 dir = normalize(camTarget - cam + targetFragment.x * right + targetFragment.y * up);\n    \n    fragColor =  march( cam, dir, crmouse );\n\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sXSRX","date":"1404679913","viewed":519,"name":"Big Nose","username":"Lanza","description":"Shader toy :p Use mouse to play.\n\nStill some work I want to do, and lots of approximations. But before I clean the code and go on, I'd like to now if it runs everywhere, as my previous try did not. (OS X hackintosh on Intel HD Graphics 4600 her).","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","shading","shadows","materials"],"hasliked":0,"parentid":"","parentname":""}}