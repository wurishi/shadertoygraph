{"ver":"0.1","info":{"id":"4XScWW","date":"1727248117","viewed":24,"name":"circular trail haoutnsoehutnsaoh","username":"HaleyHalcyon","description":"oeahtunaoehtnsuaoehtnusn'oe","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["otnauhaoestnuhaoestn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2 animations in 1; set to 0 or 1\n#define RADIAL 0\n\n#if RADIAL\nfloat _pause(float _t) {\n    if (_t < 0.0625) {\n        return 0.0;\n    }\n    float temp = (3.5 * _t - 0.0625);\n    return mix(\n        temp * temp * temp,\n        (_t - 0.5) * 1.2 + 0.5,\n        smoothstep(0.1, 0.11, _t)\n    );\n}\nfloat pause(float t) {\n    t = mod(t, 2.0);\n    if (t > 1.0) {\n        return 1.0 - _pause(1.0 - t * 0.5);\n    }\n    return _pause(t * 0.5);\n}\n#else\n// this is just eyeballed\nfloat backForth(float t) {\n    t = mod(t, 8.0);\n    if (t > 4.25) {\n        t = 8.5 - t;\n    }\n    \n    if (t < 0.4) return 0.0;\n    if (t < 0.6) return (t - 0.4) * (t - 0.4) * 0.75;\n    if (t < 3.8) return (t - 0.5) / 3.4;\n    if (t < 4.0) return 1.0 - (4.0 - t) * (4.0 - t) * 0.75;\n    return 1.;\n}\n#endif\n\nfloat circular(vec2 uv, float radius) {\n    // x^2 + y^2 == r^2\n    // y^2 = r^2 - x^2\n    // y = +-sqrt(r^2 - x^2)\n    float temp = radius * radius - uv.y * uv.y;\n    if (temp < 0.0) {return 1048576.;}\n    return abs(uv.x) - sqrt(temp);\n}\n\nfloat dots(vec2 uv, float t, float radius, float repeat) {\n#if RADIAL\n    float loopT = mod(t, 2.0);\n    float animIntensity = \n    1.0\n    - smoothstep(1.4, 1.6, loopT)\n    + smoothstep(1.8, 2.0, loopT)\n    ;\n    float animDistance = 1.25 * (pause(t - 1.7) + floor((t - 1.7) * 0.5));\n    vec2 circUV = uv * vec2(4.0, 16);\n#else\n    float animIntensity = (\n        smoothstep(0.3, 0.5, t) - smoothstep(3.8, 4.0, t)\n    ) - (\n        smoothstep(4.3, 4.5, t) - smoothstep(7.8, 8.0, t)\n    );\n    float animDistance = 2.0 * backForth(t + 0.1);\n    vec2 circUV = uv * 3.0;\n    circUV.x += -16.5 * cos((\n        (t - 0.2) / 8.0\n    ) * (2.0 * acos(-1.0)));\n#endif\n    // pseudorandom offset\n    circUV.x += repeat * fract(\n        1.0 +\n        5.4 * tan(0.1 + 1.9 * round(circUV.y)) +\n        8.9 * sin(0.8 * round(circUV.y))\n    );\n    // zoom distance\n    circUV.x += 128. * animDistance;\n    // make the x coords loop\n    circUV.x = mod(circUV.x, repeat) - (repeat * 0.5);\n    \n    float circDist = circular(vec2(\n        circUV.x, circUV.y - round(circUV.y)\n    ), radius);\n    \n    float blurDist = (animIntensity * animIntensity) * 12.0;\n    \n    float v = smoothstep(\n        blurDist,\n        0.0,\n        circDist\n    );\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = mod(iTime, 8.0);\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n#if RADIAL\n    uv = vec2(0.5 / length(uv), atan(uv.y, uv.x) / (2. * acos(-1.)));\n    float vClose = dots(uv + vec2(0, 9.25), t, 0.2, 64.);\n    float vMid = dots(uv * 3. + vec2(8.8, 9.45), t, 0.2, 128.);\n    float vFar = dots(uv * 8. + vec2(0.98, 12.4), t, 0.12, 128.);\n#else\n    float vClose = dots(uv + vec2(30, 3.5), t, 0.5, 64.)\n                 + dots(uv + vec2(0, 9.25), t, 0.5, 64.);\n    float vMid = dots(uv * 2.16 + vec2(1.8, 2.8), t, 0.3, 128.)\n               + dots(uv * 2.16 + vec2(8.8, 9.45), t, 0.3, 128.);\n    float vFar = dots(uv * 4.31 + vec2(0.3, 2.2), t, 0.2, 256.)\n               + dots(uv * 4.31 + vec2(0.98, 12.4), t, 0.2, 256.);\n#endif\n    vec3 col = vec3(\n        1.0, 0.4, 0.0\n    ) * vClose + vec3(\n        0.5, 0.0, 1.0\n    ) * vMid + vec3(\n        0.0, 1.0, 1.0\n    ) * vFar;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}