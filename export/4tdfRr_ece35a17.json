{"ver":"0.1","info":{"id":"4tdfRr","date":"1538474246","viewed":132,"name":"Gresycale quantization","username":"vchizhov","description":"Quantizes the color range of an image. WS - for quantization control. Space - image/video.","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["greyscalequantization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(texture(iChannel0,uv).xyz,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float keyDown(int ascii) {\n\treturn float(texture(iChannel2,vec2((.5+float(ascii))/256.,0.25)).x > 0.0);\n}\n\nbool keyHit(int ascii) {\n\treturn texture(iChannel2,vec2((.5+float(ascii))/256.,1.5/3.)).x == 1.0;\n}\n\nconst int KEY_W = 87;\nconst int KEY_S = 83;\nconst int KEY_SPACE = 32;\n\nvec3 luminance = vec3(0.2126, 0.7152, 0.0722);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool mode = bool((int(texelFetch(iChannel3, ivec2(0), 0).w>0.5) + int(keyHit(KEY_SPACE)))%2);\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 c;\n    if(mode)\n    {\n    \tc = vec3(dot(luminance,texture(iChannel0, uv).xyz));\n    }\n    else\n    {\n        c = vec3(dot(luminance,texture(iChannel1,uv).xyz));\n    }\n    float numCols = clamp(texture(iChannel3,uv).w + keyDown(KEY_W)-keyDown(KEY_S), 0.0, 254.0);\n    vec3 quantized = round(255.0*c/(255.0-numCols))*(255.0-numCols)/255.0;\n    \n    \n    if(all(equal(floor(fragCoord.xy),vec2(0))))\n    {\n        fragColor = vec4(0.0,0.0,0.0,float(mode));\n    }\n    else\n    {\n        fragColor = vec4(quantized,numCols);\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}