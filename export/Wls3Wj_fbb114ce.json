{"ver":"0.1","info":{"id":"Wls3Wj","date":"1557696336","viewed":145,"name":"Axis Aligned Bounding Hedron","username":"Wunkolo","description":"2D Implementation and visualization of Bryan McNett's Axis Aligned Bounding Octahedron\nhttps://github.com/bryanmcnett/aabo","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["collision","math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 SomePoints[5] = vec2[5](\n    vec2(  0.25,  0.17), vec2( -0.37, 0.32),\n    vec2( -0.54,  0.12), vec2( -0.01, 0.41),\n    vec2( -0.25, -0.31)\n);\n\nconst float PointRadius = 0.0125;\n\nconst vec2 Basis[3] = vec2[3](\n\tvec2(  sqrt(8.0/9.0),           0.0),\n\tvec2( -sqrt(2.0/9.0), sqrt(2.0/3.0)),\n\tvec2( -sqrt(2.0/9.0),-sqrt(2.0/3.0))\n);\n\nvec3 Project(vec2 Coord)\n{\n    return vec3(\n        dot(Coord,Basis[0]),\n        dot(Coord,Basis[1]),\n        dot(Coord,Basis[2])\n    );\n}\n\nstruct AABO\n{\n    vec3 Min;\n    vec3 Max;\n};\n\nvec3 SweepTest(AABO Bounds, vec3 Test)\n{\n    return \n        vec3(greaterThanEqual(Bounds.Min,Test))\n        - vec3(lessThanEqual(Bounds.Max,Test));\n}\nfloat LineDist(vec2 p1, vec2 p2, vec2 Point)\n{\n    float a = p1.y - p2.y;\n    float b = p2.x - p1.x;\n    return\n        abs(a * Point.x + b * Point.y + p1.x * p2.y - p2.x * p1.y)\n        / sqrt(a * a + b * b);\n}\n\nmat2 Rotation(float Angle)\n{\n\tfloat Sin = sin(Angle);\n\tfloat Cos = cos(Angle);\n\treturn mat2(Cos, -Sin, Sin, Cos);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mat2 CurRotation = Rotation(iTime * 0.25);\n    vec2 Coord = fragCoord/iResolution.xy;\n    vec2 Mouse = iMouse.xy/iResolution.xy;\n    Coord = mix(vec2(-1),vec2(1),Coord);\n    Mouse = mix(vec2(-1),vec2(1),Mouse);\n    Coord.x *= iResolution.x/iResolution.y;\n    Mouse.x *= iResolution.x/iResolution.y;\n    \n    vec3 MouseProj = Project(Mouse);\n    vec3 CoordProj = Project(Coord);\n    \n    // Draw the \"mesh\" (vertex soup)\n    float MinDist = 1e9;\n    for( uint i = 0u; i < 5u; ++i)\n    {\n        float CurDist = distance(CurRotation * SomePoints[i],Coord) - PointRadius;\n        MinDist = min(MinDist,CurDist);\n    }\n    float MouseDist = 1.0 - step(0.0,distance(Coord,Mouse) - PointRadius * 2.0);\n    float Dots = 1.0 - step(0.0,MinDist);\n    \n    // Calculate AABO of \"mesh\"\n    AABO Bounds;\n    // Project points onto basis\n    vec3 CurProject = Project(CurRotation * SomePoints[0]);\n    Bounds.Min = CurProject;\n    Bounds.Max = CurProject;\n    for( uint i = 1u; i < 5u; ++i)\n    {\n        vec3 CurProject = Project(CurRotation * SomePoints[i]);\n        Bounds.Min = min(Bounds.Min,CurProject);\n        Bounds.Max = max(Bounds.Max,CurProject);\n    }\n    vec3 MouseSweep = SweepTest(Bounds,MouseProj);\n    vec3 CoordSweep = SweepTest(Bounds,CoordProj);\n    \n    vec3 BasisLines;\n    BasisLines.r = LineDist(vec2(0.0),Basis[0],Coord);\n    BasisLines.g = LineDist(vec2(0.0),Basis[1],Coord);\n    BasisLines.b = LineDist(vec2(0.0),Basis[2],Coord);\n    BasisLines = mix(vec3(0.025),vec3(0.005),abs(CoordSweep)) - BasisLines;\n    BasisLines = step(vec3(0.0),BasisLines);\n   \n    \n    fragColor = vec4(vec3(Dots),0.0);\n    vec3 CoordBoundMax = mix(MouseSweep * -0.25,vec3(0.125),lessThanEqual(CoordProj,Bounds.Max));\n    vec3 CoordBoundMin = mix(MouseSweep * +0.25,vec3(0.125),greaterThanEqual(CoordProj,Bounds.Min));\n    fragColor.rgb += CoordBoundMax; fragColor.rgb += CoordBoundMin;\n    fragColor.rgb += BasisLines;\n    fragColor.rgb += all(equal(MouseSweep,vec3(0.0)))\n        ? vec3(0.0,MouseDist,0.0)\n        : vec3(MouseDist,0.0,0.0);\n}","name":"Image","description":"","type":"image"}]}