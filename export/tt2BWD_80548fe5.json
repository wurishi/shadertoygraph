{"ver":"0.1","info":{"id":"tt2BWD","date":"1598996181","viewed":176,"name":"Minimalism #09","username":"Flopine","description":"Ninth piece of a shader serie about minimalism, how to do small and quick artwork that are about composition and animation.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","motion","isometric","minimalism","daily"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n#define ITER 64.\n#define PI acos(-1.)\n#define TAU 6.283185\n\n#define box(p,c) (min(0.,max((abs(p)-c).x,max((abs(p)-c).y,(abs(p)-c).z)))+length(max(abs(p)-c,0.)))\n#define sphere(p,r) (length(p)-r)\n#define getnorm(p,eps) normalize(SDF(p).dist-vec3(SDF(p-eps.xyy).dist,SDF(p-eps.yxy).dist,SDF(p-eps.yyx).dist))\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define mo(p,d) p=abs(p)-d;if(p.y>p.x)p=p.yx\n\nstruct obj \n{\n    float dist;\n    int mat;\n};\n\nobj minobj (obj a, obj b) \n{\n    if (a.dist < b.dist) return a;\n    else return b;\n}\n\nfloat hash11 (float x)\t\n{return fract(sin(x)*153.53);}\n\nfloat sc (vec3 p, float d)\n{\n    p = abs(p);\n    p = max(p,p.yzx);\n    return min(p.x,min(p.y,p.z))-d;\n}\n\nobj SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n\n    float anim = (-1.+2.*hash11(iTime));\n\n    obj b1 = obj(box(p,vec3(1.2)),1); \n\n    mo(p.yz, vec2(0.6));\n    mo(p.xz,vec2(0.6));\n    p.xz += vec2(-0.2,0.2);\n    float crox = sc(p+anim*0.01,0.3);\n\n    b1.dist = max(-crox,b1.dist)-0.02;\n\n    p.y -= 2.;\n    p.xz += anim*0.02;\n    obj sp = obj(sphere(p,0.15),2);\n\n    return minobj(sp,b1);\n}\n\nfloat spec (vec3 rd, vec3 l, vec3 n, float specpow)\n{\n    vec3 h = normalize(l-rd);\n    return pow(max(dot(n,h),0.),specpow);\n}\n\nfloat fresnel (vec3 rd, vec3 n, float frepow)\n{return pow(clamp(1.-dot(-rd,n),0.,1.),frepow);}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(uv*3.5,-40.),\n        rd = vec3(0.,0.,1.),\n        persprd = normalize(vec3(uv,1.)),\n        p = ro,\n        l = vec3(-3.,5.,-8.),\n        col = (step(0.12,abs(uv.x)) <= 0.) ? vec3(0.8,0.4,0.9) : vec3(0.);\n\n    bool hit = false;\n    float shad = 0.;\n    obj scene;\n\n    for (float i=0.; i<ITER; i++)\n    {\n        scene = SDF(p);\n        if (scene.dist < 0.001)\n        {\n            hit = true;\n            shad = i/ITER;\n            break;\n        }\n        p += scene.dist*rd;\n    }\n\n    if (hit)\n    {\n        if (scene.mat == 1) \n        {\n            vec3 bn = getnorm(p,vec2(0.03,0.));\n            vec3 albedo = vec3(0.,0.,0.05);\n            col = albedo;\n            col += max(dot(bn,normalize(l)),0.)*0.05;\n            col += spec(rd,l,bn,6.)*vec3(0.4,0.5,0.95);\n        }\n\n        if (scene.mat == 2) \n        {\n            vec3 sn = getnorm(p,vec2(0.1,0.));\n            vec3 albedo = vec3(0.9,0.7,0.);\n            col = albedo;\n            col += spec(rd,l,sn,20.)*vec3(1.,0.9, 0.5);\n            col += max(dot(sn,normalize(l)),0.)*0.1;\n            col += fresnel(rd,sn,2.5)*vec3(1.,0.7, 0.);\n        }\n    }\n\n    fragColor = vec4(sqrt(col), 1.0);\n}","name":"Image","description":"","type":"image"}]}