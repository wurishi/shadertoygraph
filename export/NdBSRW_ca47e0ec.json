{"ver":"0.1","info":{"id":"NdBSRW","date":"1619706472","viewed":61,"name":"cell_automata_test","username":"johnowhitaker","description":"Testing a simple system for cellular automata","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["cellular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Draw with the mouse to see something happen\n\n// The main automata logic is in Buffer A - this is just for final rendering\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord)/iResolution.xy;\n    \n    // At the moment we simply display the output of BufferA\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec4 life(vec2 fragCoord, vec4 fragColor){\n    // Get the current cells colour\n    vec4 cell = texture(iChannel0,fragCoord/iResolution.xy);\n    fragColor=cell;\n    \n    // Count neightbours\n    int n = 0;\n    if (cell.x  > 0.5){n -= 1;} // Don't count this cell\n    for (int xo = -1; xo <= 1; xo++) {\n        for (int yo = -1; yo <= 1; yo++){\n            vec4 c = texture(iChannel0,(fragCoord+vec2(xo, yo))/iResolution.xy); // read offset texture\n            if (c.x > 0.5){n += 1;}\n        }\n    }\n    \n    // Life logic\n    if (cell.x > 0.5) {\n        if (n > 1 && n < 4) {\n            fragColor = vec4(1.0);\n        }\n        else {\n           fragColor = vec4(0.0,0.0,0.0,1.0);\n        }\n    } else {\n        if (n > 2 && n < 4) {\n            fragColor =  vec4(1.0);\n        } else {\n            fragColor = vec4(0.0);\n        }\n    }\n    \n    return fragColor;\n}\n\nvec4 simple_sand(vec2 fragCoord, vec4 fragColor){\n    vec4 cell = texture(iChannel0,fragCoord/iResolution.xy);\n    fragColor=cell;\n \n    vec4 above = texture(iChannel0,(fragCoord+vec2(0., 1.))/iResolution.xy); \n    vec4 below = texture(iChannel0,(fragCoord+vec2(0., -1.))/iResolution.xy); \n    \n    if ((above.x > 0.5)&&(cell.x < 0.5)){\n        fragColor = vec4(1.0);\n    }\n    if ((cell.x > 0.5)&&(below.x < 0.5)){\n        fragColor = vec4(0., 0., 0., 1.0);\n    }\n    \n    return fragColor;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Current colour of this pixel\n    vec4 cell = texture(iChannel0,fragCoord/iResolution.xy);\n    \n    // Update the state (switching based on time for demo\n    if (mod(iTime, 4.) < 2.){\n        fragColor=simple_sand(fragCoord, fragColor);\n    }\n    else{\n        fragColor=life(fragCoord, fragColor);\n    }\n    \n    // Mouse input - draw a white circle around the mouse\n    if (iMouse.z > 1.0){ \n        if (abs(distance(fragCoord, iMouse.xy)) < 10.){\n            fragColor=vec4(1.); // draw with mouse\n        }\n        \n    }\n    \n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}