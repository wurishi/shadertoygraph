{"ver":"0.1","info":{"id":"tdyfDd","date":"1608231427","viewed":144,"name":"Ocean Meditation","username":"mherreshoff","description":"Displays an ocean which ripples in time to peaceful low-pitched bells.  A variant of my Laplacian Ocean [ https://www.shadertoy.com/view/wsyfWt ] shader. ","likes":2,"published":1,"flags":40,"usePreview":0,"tags":["sound","ocean","laplacian","meditation","bells"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 t = texture(iChannel0, uv/2.);\n    vec3 color = mix(hsv2rgb(vec3(.62,1.,.35)), vec3(1.), pow(t.x,3.));\n    fragColor = vec4(color, 1.);\n    //fragColor = vec4(hsv2rgb(vec3(t.x,1.,1.)), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// See figure 8. of: https://www.soundonsound.com/techniques/synthesizing-bells\nfloat bell (float t, float freq) {\n    // Real bells have frequencies that are close together and create beats.\n    // We simulate this effect with a waver.\n    float waverFreq = 10.;\n    float waverAmp = 0.;\n    float water = 1. - waverAmp*(1.-sin(6.2831*t*waverFreq));\n    float r = 0.;\n#define OVERTONE(f, v, d) r += (1.-smoothstep(0., d,t))*v*sin(6.2831*t*f*freq);\n    // Bell frequencies:\n    OVERTONE(0.5, 0.2, 10.);\n    OVERTONE(2., 0.4, 6.);\n    OVERTONE(3., 0.3, 5.);\n    OVERTONE(4.2, 0.2, 4.);\n    OVERTONE(5.4, 0.05, 3.);\n    OVERTONE(6.8, 0.05, 3.);\n\n    // short-lived enharmonic frequences (these form the attack).\n    // Randomly generated.\n    float enh = 0.05;\n    OVERTONE(3.400698735057606, enh, 0.8271341522423334);\n    OVERTONE(4.293844185929293, enh, 0.8492665829578965);\n    OVERTONE(7.555427796336728, enh, 0.5929833275190881);\n    OVERTONE(6.532079424900164, enh, 0.56326708522355);\n    OVERTONE(1.8765549556134502, enh, 0.6235631870212126);\n    OVERTONE(2.240746036535839, enh, 0.6716854590452448);\n    OVERTONE(0.6359544698838242, enh, 0.7925568098716991);\n    OVERTONE(2.754298711660203, enh, 0.6330212507379609);\n    OVERTONE(7.815483094056415, enh, 0.01167181642283932);\n    OVERTONE(8.225772022697972, enh, 0.09060703356059951);\n    \n    return r;\n}\n\nvec2 mainSound( int samp, float time )\n{\n    float A = 220.;\n    float cy = 24.;\n    return vec2(\n      bell(mod(time, cy), A)+\n      bell(mod(time-6., cy), A*.666)+\n      bell(mod(time-12., cy), A*.75)+\n      bell(mod(time-18., cy), A));\n}","name":"Sound","description":"","type":"sound"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 U )\n{\n    vec3 o = vec3(1,0,-1);\n    vec2 pw = 1./iResolution.xy;\n    vec2 uv = U*pw;\n#define F(v) texture(iChannel0, uv+pw*v)\n    vec4 t = F(o.yy);\n    vec4 lap = 8.*F(o.yy)-F(o.xx)-F(o.xy)-F(o.xz)-F(o.yx)-F(o.yz)-F(o.zx)-F(o.zy)-F(o.zz);\n    \n    float dt = .1;\n    vec2 dVdt = vec2(t.y-.1*lap.x, -1.*lap.x);\n    float time = mod(iTime, 24.);\n    if (time > 6. && time < 7.) {\n      dVdt.x += .5*(1.-smoothstep(0.,0.005, length(uv-.25)));\n    }\n    O.xy = t.xy + dt*dVdt;\n    if (iFrame < 10) O = vec4(texture(iChannel1, uv).x,0,0,0);\n}","name":"Buffer A","description":"","type":"buffer"}]}