{"ver":"0.1","info":{"id":"MXBSWh","date":"1710514934","viewed":154,"name":"Precomputed Gaussian Blur","username":"Zentient","description":"A fastish 2 pass gaussian blur for denoising a SSGI implementation. Curious on shadertoy's sampling methods, this is significantly faster in ReShade","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["blur","gaussian","denoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 blur(vec2 coord)\n{\n    int gaussianK[25] = int[25]\n    (1,4,7,4,1,\n    4,16,26,16,4,\n    7,26,41,26,7,\n    4,16,26,16,4,\n    1,4,7,4,1);\n    \n    vec2 res = iResolution.xy;\n    vec3 col = vec3(0.0);\n    for(int i = 0; i < 5; i++)\n    {\n        for(int ii = 0; ii < 5; ii++)\n        {\n            int s = (i) + (ii);\n            float g = float(gaussianK[s]);\n            col += g * texture(iChannel0, (coord - 3.0 + (vec2(i, ii))) / res).rgb;\n        }\n    }\n    return 1.5 * col / 273.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 texCol = blur(fragCoord);//texture(iChannel0, uv).rgb;\n    if(uv.x < 0.5){texCol = texture(iChannel1, uv).rgb;}\n\n    // Output to screen\n    fragColor = vec4(texCol,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec3 blur(vec2 coord)\n{\n    int gaussianK[25] = int[25]\n    (1,4,7,4,1,\n    4,16,26,16,4,\n    7,26,41,26,7,\n    4,16,26,16,4,\n    1,4,7,4,1);\n    \n    vec2 res = iResolution.xy;\n    vec3 col = vec3(0.0);\n    for(int i = 0; i < 5; i++)\n    {\n        for(int ii = 0; ii < 5; ii++)\n        {\n            int s = (i) + (ii);\n            float g = float(gaussianK[s]);\n            col += g * texture(iChannel0, (coord-3.0 + vec2(i, ii)) / res).rgb;\n        }\n    }\n    return 1.5 * col / 273.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 texCol = blur(fragCoord);\n    fragColor = vec4(texCol,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}