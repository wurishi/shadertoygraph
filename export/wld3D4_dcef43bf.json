{"ver":"0.1","info":{"id":"wld3D4","date":"1576611799","viewed":472,"name":"DogBone 2D SDF","username":"BigWIngs","description":"Needed this for a logo, I suppose it could be useful to others as well.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["dogbone"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"DogBone SDF\" by Martijn Steinrucken aka BigWings/CountFrolic - 2019\n// The MIT License\n// Copyright Â© 2019 Martijn Steinrucken\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n// Facebook: https://www.facebook.com/groups/theartofcode/\n//\n// I needed something like this for a logo and I think it might\n// be useful for other things as well.\n// It is made by fitting circles together. The code could probably\n// be simpler, especially if you take just the pinch, or just the bulge.\n//\n// See comments for a slightly more compact version by IQ\n\nfloat sdDogBone(vec2 p, float w, float r, float b) {\n    // p = point to evaluate\n    // w = half distance between end points\n    // r = radius of endpoints\n    // b = bulge -> -1 = pinch to center 0 = straight >0 = bulge out\n    \n    if(abs(b)<1e-7) b = 1e-7;\t// prevent division by 0\n    float sb = sign(b);\n    \n    p = abs(p);\n    \n    vec2 ep = p-vec2(w, 0);\t\t\t// end point\n    float dE = length(ep)-r;\t\t// distance to end circle\n    float y = (w*w-r*r)/(2.*r*b);\t// height of center circle\n    vec2 cp = vec2(p.x, p.y-y);\t\t// position of center circle\n    vec2 ec = sb*(ep-cp);\t\t\t// vec from end point to center point\n    float rc = length(ec)-r*sb;\t\t// radius of center circle\n    float dC = sb*(rc-length(cp));\t// distance to center circle\n    \n    return ec.x*ep.y-ec.y*ep.x < 0. ? dE : dC;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 M = (iMouse.xy-.5*iResolution.xy)/iResolution.xy;\n    float t = iTime;\n    \n    uv *= 2.;\n    \n    float d = sdDogBone(uv, .75+sin(t)*.25, .25, sin(t));\n    \n    // coloring from IQ\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-4.0*abs(d));\n\tcol *= 0.7 + 0.2*cos(110.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}