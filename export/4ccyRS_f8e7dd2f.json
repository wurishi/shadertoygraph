{"ver":"0.1","info":{"id":"4ccyRS","date":"1731440878","viewed":51,"name":"Sample the Rainbow","username":"corncob","description":"Approximating the spectrum of visible light with various functions. Experimenting to find what works best. Motivated by investigations into chromatic aberration simulation.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sampletherainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define ROWS 11.0\n\nconst float c = (2.0 - sqrt(2.0)) / 4.0;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 filter_sum, spectrum;\n    vec2 uv = fragCoord / iResolution.xy;\n    float row = (1.0 - uv.y) * ROWS;\n    if (row < 1.0)\n    {\n        float p = 0.5 + 0.5 * sin(PI * (8.0 * uv.x * uv.x - 8.0 * uv.x + 2.0) - 0.5 * PI);\n        spectrum.g = 0.5 + 0.5 * sin(2.0 * PI * uv.x - 0.5 * PI);\n        if (uv.x < 0.5) spectrum.r = p;\n        else spectrum.b = p;\n    }\n    else if (row < 2.0)\n    {\n        float p0 = 0.5 - 0.5 * cos(8.0 * PI * (uv.x * uv.x - uv.x));\n        float p1 = 1.0 - p0;\n\n        if (uv.x < 0.5)\n        {\n            spectrum.r = p0;\n            if (uv.x < c) spectrum.b = p0 * p1;\n            else spectrum.g = p1;\n        }\n        else\n        {\n            spectrum.b = p0;\n            if (uv.x > 1.0 - c) spectrum.r = p0 * p1;\n            else spectrum.g = p1;\n        }\n\n    }else if (row < 3.0)\n    {\n        float p0 = 0.5 - 0.5 * cos(4.0 * PI * (uv.x - 0.5));\n        float p1 = 1.0 - p0;\n        float p2 = p0 * p1;\n\n        if (uv.x < 0.5) \n        {\n            spectrum.r = p0;\n            if (uv.x < 0.25) spectrum.b = p2;\n            else spectrum.g = p1;\n        }\n        else\n        {\n            spectrum.b = p0;\n            if (uv.x > 0.75) spectrum.r = p2;\n            else spectrum.g = p1;\n\n        }\n    }else if (row < 4.0)\n    {\n        float p0 = 0.5 - 0.5 * cos(2.0 * PI * (uv.x - 0.5));\n        float p1 = 1.0 - p0;\n        float p2 = p0 * p1;\n        spectrum.g = p1 * p1 + p1 * p2;\n        if (uv.x < 0.5) spectrum.r = 4.0 * p2;\n        else {spectrum.b = 3.2 * p2;spectrum.r = p0 * p2;}\n\n    } else if (row < 5.0)\n    {\n        float p0 = 0.5 - 0.5 * cos(2.0 * PI * (uv.x - 0.5));\n        float p1 = 1.0 - p0;\n        float p2 = sin(2.0 * PI * uv.x);\n        spectrum.g = p1 * p1 + p1 * p0 * p1;\n        if (uv.x < 0.5) spectrum.r = p2;\n        else {spectrum.b = -0.8*p2; spectrum.r = 0.2 * spectrum.b * p0;}\n\n    } else if (row < 6.0)\n    {\n        spectrum.g = 0.5 + 0.5 * sin(2.0 * PI * (uv.x - 0.25));\n        if (uv.x < 0.5) spectrum.r = 0.5 + 0.5 * sin(4.0 * PI * uv.x - 0.5 * PI);\n        else spectrum.b = 0.5 + 0.5 * sin(4.0 * PI * uv.x - 0.5 * PI);\n    } else if (row < 7.0)\n    {\n        spectrum.r = clamp(1.0 - 4.0 * abs(uv.x - 0.25),0.0 , 1.0);\n        spectrum.g = clamp(1.0 - 4.0 * abs(uv.x - 0.5),0.0 , 1.0);\n        spectrum.b = clamp(1.0 - 4.0 * abs(uv.x - 0.75),0.0 , 1.0);\n\n    } else if (row < 8.0)\n    {\n        float a = min(-6.0 * abs(uv.x - 0.5) + 3.0, 1.0);\n        spectrum.r = a * clamp(3.0 -6.0 * abs(uv.x), 0.0, 1.0);\n        spectrum.g = clamp(2.0 - 6.0 * abs(uv.x - 0.5), 0.0, 1.0);\n        spectrum.b = a * clamp(3.0 - 6.0 * abs(uv.x - 1.0), 0.0, 1.0);\n\n    } else if (row < 9.0)\n    {\n        vec2 div = vec2(0.325,0.675);\n        if (uv.x < div.x)\n        {\n            spectrum.r = 2.0 * smoothstep(-0.15, 0.15, uv.x) - 1.0;\n            spectrum.g = smoothstep(0.15, div.x, uv.x);\n        }\n        else if (uv.x < div.y)\n        {\n            spectrum.r = smoothstep(0.5, div.x, uv.x);\n            spectrum.g = smoothstep(0.1, div.x, uv.x);\n            spectrum.b = smoothstep(0.5, div.y, uv.x);\n        }\n        else\n        {\n            spectrum.g = smoothstep(0.9, div.y, uv.x);\n            spectrum.b = 2.0 * smoothstep(1.15, 0.85, uv.x) - 1.0;\n        }\n        spectrum.b *= 0.8;\n    } else if (row < 10.0)\n    {\n        spectrum.r = 1.0 - 16.0 * pow(uv.x - 0.25, 2.0);\n        spectrum.g = 1.0 - 8.0 * pow(uv.x - 6.5 / 12.0, 2.0);\n        spectrum.b = 0.78 * (1.0 - 16.0 * pow(uv.x - 0.75, 2.0));\n        spectrum = clamp(spectrum, 0.0, 1.0);\n    } else if (row < 11.0)\n    {\n        spectrum.r = 1.0 - 16.0 * pow(uv.x - 0.25, 2.0);\n        spectrum.g = 1.0 - 8.0 * pow(uv.x - 6.5 / 12.0, 2.0);\n        spectrum.b = 0.78 * (1.0 - 16.0 * pow(uv.x - 0.75, 2.0));\n        spectrum = clamp(spectrum, 0.0, 1.0);\n    }\n\nfragColor = vec4(spectrum, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}