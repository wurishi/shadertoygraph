{"ver":"0.1","info":{"id":"dt2BWt","date":"1694627309","viewed":17,"name":"Custom Flower v3: Wait longer!","username":"lindadaism","description":"Linda Zhu & Utkarsh Dwivedi","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"ctjfDd","parentname":"Custom Flower CIS 566 Lab 01.3"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n/*\n * Your work here!\n */\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    \n    vec2 movingUv = rotatePoint2d(uvCenter, vec2(0.0), iTime);\n    // Get pixel angle around the center\n    float a = atan(movingUv.x,movingUv.y);\n    \n    return radius + radius * sin(iTime * a * 5.0) * abs(fract(a * 0.8) - 0.5);\n}\n\nfloat computeRadius2(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    \n    vec2 movingUv = rotatePoint2d(uvCenter, vec2(0.0), -iTime);\n    // Get pixel angle around the center\n    float a = atan(movingUv.x,movingUv.y);\n    \n    return radius + 20.0 * sin(iTime) * abs(fract(a * 0.8)*-3.0-0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n    \n\tfloat radius = computeRadius(uv);\n    \n    vec3 col1 = rgb(26.0,209.0,221.0);\n    vec3 col2 = rgb(131.0,220.0,147.0);\n    vec3 col3 = rgb(188.0,0.0,208.0);\n    vec3 col4 = rgb(255.0, 255.0, 210.0);\n    vec3 col5 = rgb(255.0,255.0,255.0);\n    \n    // Background layer\n\tvec4 layer1 = vec4(col4, 1.0);\n    float bgT = smoothstep(0.0,0.5,sin(0.2*(uv.x+iTime*15.0)));\n    layer1 = mix(layer1, vec4(col2, 1.0), bgT);\n    vec4 layerPlain = circle(uv, center, 0.4 * iResolution.y, col4);\n    layer1 = mix(layer1, layerPlain, layerPlain.a);\n\t\n\t// Circle\n\n\tvec4 layer2 = circle(uv, center, radius * abs(cos(iTime)), col3);\n\t\n    // Layer 3\n    float radius2 = computeRadius2(uv);\n    vec4 layer3 = circle(uv, center, radius2 * 0.3 * abs(sin(iTime)), col1);\n    vec4 layer4 = circle(uv, center, radius2 * 0.25 * abs(sin(iTime)), col5);\n    \n\t// Blend the two\n\t//fragColor = mix(layer1, layer2, layer2.a);\n    fragColor = mix(fragColor, layer3, layer3.a);\n    fragColor = mix(fragColor, layer4, layer4.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}