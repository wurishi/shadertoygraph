{"ver":"0.1","info":{"id":"MdjyRc","date":"1493164013","viewed":170,"name":"NotAKnot1","username":"balkhan","description":"Again fooling with the DE for knots found by Knightly and DarkBeam on fractal forums.\nThe balls and pole are only here to hide artefacts. Happy to be able to use bitwise operations. ","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarchig"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define\tI_MAX\t100\n#define\tE\t\t0.0000001\n#define PI\t\t3.14\n\nmat4\tlookat(vec3 e, vec3 ta, vec3 up);\nvoid\trotate(inout vec2 v, float angle);\nfloat\tDE(vec3 p);\nvec2\tmarch(vec3 pos, vec3 dir);\nfloat\tsdCappedCylinder( vec3 p, vec2 h );\n\nfloat\tballs;\nfloat\tmind;\nmat2\trot_t;\n\n// blackbody by aiekick : https://www.shadertoy.com/view/lttXDn\n\n// -------------blackbody----------------- //\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\n\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// -------------blackbody----------------- //\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    rot_t = mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n\tvec2\tuv = fragCoord.xy / iResolution.xy;\n    vec2\tf_s = fragCoord.xy - iResolution.xy*.5;\n    f_s = iResolution.x*.1-abs(f_s);\n    f_s *= rot_t;\n\tvec3\tcol = vec3(int(iResolution.y+f_s.x )&int(iResolution.y+f_s.y ) );\n    \n    vec3\tdir = (vec3(fragCoord.xy - iResolution.xy/2.0, -iResolution.y));\n    vec3\tpos = vec3(20.0*cos(2.0+3.*iTime), 20.0*sin(2.0+3.*iTime), 69.0-2.0*cos(iTime));\n    mat4\tlook = lookat(pos, vec3(cos(2.0+iTime), 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n\n    dir = (vec4(dir.xyz, 1.)*look).xyz;\n    dir = normalize(dir);\n   \tvec2 inter = (march(pos, dir));\n    if (mind == balls && inter.y < 100. && inter.x != float(I_MAX) )\n        col.xyz = vec3(0.,0.5,.4)*inter.y*.01;\n    else if (inter.y < 100. && inter.x != float(I_MAX))\n        col.xyz = vec3(1.,0.,.4)*inter.y*.01;\n\tfragColor = vec4(col, 1.0);\n}\n\nfloat DE(vec3 p)\n{\n    p.zx *= rot_t;\n    balls = length(p-vec3(0.,0.,21.98))-4.;\n    balls = min(balls, length(p-vec3(0.,0.,-21.98))-4.);\n    balls = min(balls, sdCappedCylinder(p, vec2(2.,20.41)) ); // the poles and the balls\n\tfloat mobius;\n   \tmobius = (1.0/(9.)) * atan(PI*(p.x), PI*(p.y) );\n\tp.x = length(p.xy) - 6.28;\n    rotate(p.zx, iTime);\n\trotate(p.xz, mobius);\n\tfloat m = (1.0 - ((1.0+9.)))/(6.28);\n\tfloat angle = floor(0.5 + m * (PI/2.0-atan(p.x,p.z)))/m;\n\trotate(p.xz, angle);\n\tp.x -= 18.84;\n    mind = min(length(p.xz)-3.14, balls);\n\treturn mind;\n}\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0);\n    vec3\tp = vec3(0.0);\n    vec2\ts = vec2(0.0);\n\n    for (int i = -1; i < I_MAX; ++i)\n    {\n    \tp = pos + dir * dist.y;\n        dist.x = DE(p);\n        dist.y += dist.x;\n        if (dist.y < E || dist.y >100.)\n           break;\n        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\nmat4\tlookat(vec3 e, vec3 ta, vec3 up)\n{\n    vec3 z = normalize(e - ta);    \n    vec3 x = normalize(cross(up, z));\n    vec3 y = cross(z, x);     \n\n    mat4 orientation = mat4(\n       \t\t\t\t\t\tx.x, y.x, z.x, 0.0,\n       \t\t\t\t\t\tx.y, y.y, z.y, 0.0,\n       \t\t\t\t\t\tx.z, y.z, z.z, 0.0,\n       \t\t\t\t\t\t0.0, 0.0, 0.0, 1.0);\n\n    mat4 translation = mat4(\n         \t\t\t\t\t1.0, 0.0, 0.0, 0.0,\n         \t\t\t\t\t0.0, 1.0, 0.0, 0.0, \n         \t\t\t\t\t0.0, 0.0, 1.0, 0.0,\n\t\t\t\t\t\t\t-e.x,-e.y,-e.z, 1.0);\n\n    return (orientation * translation);\n}\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n\tvec2 d = abs(vec2(length(p.xy),p.z )) - h;\n\treturn min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n","name":"Image","description":"","type":"image"}]}