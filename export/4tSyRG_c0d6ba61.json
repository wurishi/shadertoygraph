{"ver":"0.1","info":{"id":"4tSyRG","date":"1508921159","viewed":962,"name":"free local normalization ","username":"FabriceNeyret2","description":"MIPmap (and wrap) are now available on buffers and videos !\nMeaning we can count, integrate, average, isolate frequency bands for free ! \n\nHere, normalize image mean & variance according to neighborhood","likes":12,"published":3,"flags":32,"usePreview":0,"tags":["video","filter","image","processing","integration","variance","signal","statistics","moment","whitebalance","windowed","gpmipmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// === getting windowed statistics on images : =================\n// BuffA prepares 1st moment (well, it's the image itself :-) ).   \n// BuffB prepares 2nd moment: it's the square of image\n// The moments integrated over an window size are obtained thanks to MIPmap LOD at target level.\n// A reminder than variance is M2-M1Â², and std-dev is sqrt of this.\n// \n// NB: ok, we should compute the whole stats in flat RGB space :-)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U /= iResolution.xy;\n    float l = ( .5+.5*cos(iTime) ) *.95 + .05;\n    \n    vec4 M1 = textureLod( iChannel0, U, l*8. ),          // order1 moment\n         M2 = textureLod( iChannel1, U, l*8. ),          // order2 moment\n         S = sqrt(M2-M1*M1);                             // std dev\n    \n    O =  .5 + .5 * ( texture( iChannel0, U ) - M1 ) / S; // normalize average and variance\n    \n    O = vec4( length(O.rgb) ) / 1.7; // comment for color version\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 O, vec2 U )\n{\n    O = texture( iChannel0, U / iResolution.xy );\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 O, vec2 U )\n{\n    O = texture( iChannel0, U / iResolution.xy );\n    O *= O;\n}","name":"Buf B","description":"","type":"buffer"}]}