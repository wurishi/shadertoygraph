{"ver":"0.1","info":{"id":"mttcR7","date":"1699026864","viewed":80,"name":"Ghost Lights","username":"HyPeRbLaH","description":"A copy of https://www.shadertoy.com/view/Xd2GzR but taking the standard deviation of everything in the immediate vicinity of each pixel. Added some color, and also showing the results of orbits that didn't escape.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","continuous","standarddeviation"],"hasliked":0,"parentid":"mtcyR4","parentname":"Standard Deviation Dual Complex"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2023 Charles Allen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Based on https://www.shadertoy.com/view/Xd2GzR\n// Added some color, and also showing the results of orbits that didn't escape\n\n\n//-------------- dual complex numbers --------------\n\nconst int bs = 8;\n\n// complex addition, and derivatives\nvec4 dcAdd( vec4 a, vec4 b )\n{\n    return a + b;\n}\n\n// complex multiplication, and derivatives\nvec4 dcMul( vec4 a, vec4 b )\n{\n    return vec4( a.x*b.x - a.y*b.y, \n\t\t\t\t a.x*b.y + a.y*b.x,\n\t\t\t\t a.x*b.z + a.z*b.x - a.y*b.w - a.w*b.y,\n\t\t\t\t a.x*b.w + a.w*b.x + a.z*b.y + a.y*b.z );\n}\n\n// complex squaring, and derivatives\nvec4 dcSqr( vec4 a )\n{\n    return vec4( a.x*a.x - a.y*a.y, \n\t\t\t\t 2.0*a.x*a.y,\n\t\t\t\t 2.0*(a.x*a.z - a.y*a.w),\n\t\t\t\t 2.0*(a.x*a.w + a.y*a.z) );\n}\n\nvec2 mb(vec4 c) {\n    // compute orbit\n\tfloat m2 = 0.0;\n    float co = 0.0;\n\tvec4 z = vec4( 0.0, 0.0, 0.0, 0.0 );\n    for( int i=0; i<256; i++ )\n    {\n        if( m2>1024.0 ) break;\n\t\t\t\n        // Z -> Z² + c\t\t\n\t\tz = dcAdd( dcSqr(z), c );\n\t\t\n\t\tm2 = dot( z.xy, z.xy );\n        co += 1.0;\n    }\n\n    // distance\t\n\t// d(c) = |Z|·log|Z|/|Z'|\n\tfloat d = 0.0;\n    float d2 = sqrt( dot(z.xy,z.xy)/dot(z.zw,z.zw) )*log(dot(z.xy,z.xy));\n\tif( co<256.0 ) d = d2;\n\n\t\n    return vec2(d, d2);\n}\n\n//--------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n\n    // animation\t\n\tfloat tz = 0.5 - 0.5*cos(0.125*iTime);\n    float zo = pow( 0.5, 13.0*tz );\n\t\n    float[bs] ds = float[bs](\n        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0\n    );\n    float[bs] d2s = float[bs](\n        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0\n    );\n    \n    float dt = 0.0;\n    float d2t = 0.0;\n    \n    for ( int q = 0; q < bs; ++q) {\n        float theta = float(q) * 6.2832 / float(bs);\n        vec2 a = vec2(cos(theta),sin(theta)) * 0.001 * zo;\n        vec4 c = vec4( vec2(0.385242,.359482) + p*zo + a, 1.0, 0.0 );\n        vec2 d = mb(c);\n        ds[q] = d.x;\n        d2s[q] = d.y;\n        dt += d.x;\n        d2t += d.y;\n    }\n    \n    dt /= float(bs);\n    d2t /= float(bs);\n    float std = 0.0;\n    float std2 = 0.0;\n    \n    for (int i = 0; i < bs; ++i) {\n        ds[i] = pow(dt - ds[i], 2.0);\n        d2s[i] = pow(d2t - d2s[i], 2.0);\n        std += ds[i];\n        std2 += d2s[i];\n    }\n    \n    float d = sqrt(std / float(bs));\n    float d2 = sqrt(std2 / float(bs));\n\n\t\n    // do some soft coloring based on distance\n\td = clamp( 512.0*d/zo, 0.0, 1.0 );\n\td = pow( d, 0.25 );\n    d2 = clamp(0.01*d2/zo, 0.0, 1.0);\n    d2 = pow(d2, 0.25);\n    vec3 col = vec3( d2 - d + pow(d, 4.), pow(d, 8.) + d2, d2 * 2. + pow(d, 16.) );\n    \n    // output color\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}