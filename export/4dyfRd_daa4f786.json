{"ver":"0.1","info":{"id":"4dyfRd","date":"1529948895","viewed":280,"name":"Fake reflections","username":"JohanFlod","description":"Trying to replicate some old Amiga demo scene effects. Playing around with shaders for fun. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","circles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 st; //2D plane\nvec3 col; //Color palette\nfloat xPosition;\nfloat yPosition1;\nfloat yPosition2;\nfloat yPosition3;\nfloat radius;\n\nvoid col_bg(){col = vec3(0.2,0.2,0.2);}\n\nvoid rotate (float deg)\n{\n\tfloat rad = radians(deg);\n\tmat2 rotamat = mat2(cos(rad),sin(rad),-sin(rad),cos(rad));\n\tst = rotamat * (st);\n}\n\nbool isellipse(float x_center, float y_center, float radius1, float radius2)\n{\n    bool result = false;\n    \n    if (sqrt( radius1*pow(st.x - x_center,2.0) \n             + radius2*pow(st.y - y_center,2.0)\n            ) < radius1 * radius2\n        )result = true;\n        \n    return result;\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 circle_position1;\n    vec2 circle_position2;\n    vec2 circle_position3;\n    \n    vec3 col1 = vec3(0.0);\n    vec3 col2 = vec3(0.0);\n    vec3 col3 = vec3(0.0);\n    st = fragCoord/iResolution.xy;\n    st*=5.0;\n\tcircle_position1.x = 2.5+1.5*(sin(1.5*iTime));\n    // offset in x for second sphere \n    circle_position2.x = 2.5+1.5*(sin(1.5*iTime+1.2));\n    // offset in x for third sphere\n    circle_position3.x = 2.5+1.5*(sin(1.5*iTime+2.4));\n\t\n    circle_position1.y  = 2.5+0.5*(sin(2.*iTime));\n    // offset in y for second sphere \n    circle_position2.y = 2.5+0.5*(sin(2.*iTime+1.2));\n    // offset in y for second sphere \n    circle_position3.y = 2.5+0.5*(sin(2.*iTime+2.4));\n    \n    float radius = 1.15;\n\n    float radius2 = radius*0.5;\n    \n    \n    \n    float lowerLimit = 0.0;\n    float upperLimit = 1.5;\n    \n    \n    float color = 1.0;\n    \n    col = vec3(0.2,0.2,0.2);\n  \n    \n    if (st.y < upperLimit && st.y > lowerLimit){\n        color = distance(st.y,upperLimit);\n        float perc = (color - lowerLimit) / (upperLimit - lowerLimit);\n        col = vec3(perc);\n              \n    }\n   \n \n    if(isellipse(circle_position1.x, circle_position1.y , radius, radius2))\n    {\n        \n    \tcol1 = vec3(1.0,vec2(0.0));\n    }\n    \n    // reflection of red \"sphere\"\n    if(isellipse(circle_position1.x, 1.2-0.5*circle_position1.y, radius, radius2))\n    {\n        float colour = 0.2;\n    \tcol1 = vec3(colour,0.0,0.0);\n    }\n    if(isellipse(circle_position2.x, circle_position2.y , radius, radius2))\n    {\n        float colour = 1.0;\n    \tcol2 = vec3(0.0,colour,0.0);\n    }\n    if(isellipse(circle_position2.x, 1.2-0.5*circle_position2.y , radius, radius2))\n    {\n        float colour = 0.2;\n    \tcol2 = vec3(0.0,colour,0.0);\n    }\n    if(isellipse(circle_position3.x, circle_position3.y , radius, radius2))\n    {\n        float colour = 1.0;\n    \tcol3 = vec3(0.0,0.0,colour);\n    }\n    if(isellipse(circle_position3.x, 1.2-0.5*circle_position3.y , radius, radius2))\n    {\n        float colour = 0.2;\n    \tcol3 = vec3(0.0,0.0,colour);\n    }\n\n   \n\t\n\tfragColor = vec4(col1+col+col2+col3,0.5);\n}","name":"Image","description":"","type":"image"}]}