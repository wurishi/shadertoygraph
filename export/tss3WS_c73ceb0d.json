{"ver":"0.1","info":{"id":"tss3WS","date":"1547417293","viewed":217,"name":"Futurized Eye of Sauron","username":"ziadosama","description":"Digitalized eye","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["eye","sauron","lordoftherings"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nEye of Sauron 2k19\n\nInspired by IQ\n\nZiad 13/1/2019\n\nColors can be improved\n*/\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nmat2 m =mat2(0.8,0.6, -0.6, 0.8);\n\nfloat rand(in vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(in vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n  \tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat fbm(in vec2 p){\n\tfloat f=.0;\n\tf+= .5000*noise(p); p*= m*2.02;\n\tf+= .2500*noise(p); p*= m*2.03;\n\tf+= .1250*noise(p); p*= m*2.01;\n\tf+= .0625*noise(p); p*= m*2.04;\n\t\n\tf/= 0.9375;\n\t\n\treturn f;\n}\n\n\nvoid func( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 q = fragCoord.xy/iResolution.xy;\n\tvec2 p = -0.8+ 1.5*q;\n\t//p.x *= resolution.x/resolution.y;\n\t\n\tvec3 background=smoothstep(.1,.5,vec3(.9,.4,.4));\n\t\n\tfloat r = p.y;//sqrt(dot(p,p));\n\tfloat a = atan(p.y,p.x);\n\tfloat e = sqrt((p.x)*(p.x)/(p.y+.8)/(.8-p.y) );\n\t\n\tfloat f = fbm(20.0*p);\n\t\n\tvec3 col = vec3(1.);\n\t\n\tfloat ss=sin(1.2*iTime);\n\tfloat anim =1. + 0.1*ss*clamp(1.-r,.0,1.);\n\t//float d = anim * cos(7. * p.x*iTime) * sin(7. * p.y*iTime)  * 0.9;\n\tr*= anim;\n\t\n\tif( r<0.8){\n\t\tcol = vec3(.7,0.1,0.1);\n\t\t\n\t\tfloat f = 0.4*fbm(20.*p);\n\t\t\n\t\tcol = mix( col, vec3(0.5,0.4,0.3),f);\n\t\t\n\t\tf = 1.- smoothstep(0.1,0.5,e); \n\t\tcol = mix( col, vec3(1.,1.,0.39), f );\n\t\t\n\t\ta +=.05*fbm(20.0*p);\n\t\t\n\t\tf = smoothstep( 0.2, 1., fbm(vec2(5.0*e,10.0*a)));\n\t\tcol = mix(col, vec3 (1.0,.5,.5), f);\n\t\t\n\t\tf = smoothstep( .1, .9, fbm( vec2(10.*r,15.*a)));\n\t\tcol *= .7- .5*f;\n\t\t\n\t\tf = smoothstep(0.6,0.8, r); \n\t\tcol*= .7 - .5*f;\n\t\t\n\t\tf = smoothstep(0.1,0.25, e); \n\t\tcol*= f;\n\t\t\n\t\tf = smoothstep(.5,.8, r);\n\t\tcol = mix( col,vec3(1.,.7,.39), f*.5);\n\t\t\n\t\t//f= 1. - smoothstep( .001, .07, length( p- vec2(-0.05,0.3)));\n\t\t//col += vec3(1.)*f*0.4;\n\t\t\n\t\tf = smoothstep(.7,.8, r);\n\t\tcol = smoothstep(.01,.4, mix( col,vec3(2.), .9*f));\n\t}\n\t\n\tfragColor=vec4(col*background, 1.);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    func(fragColor, fragCoord);\n}","name":"Image","description":"","type":"image"}]}