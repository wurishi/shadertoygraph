{"ver":"0.1","info":{"id":"lXyXDy","date":"1720440566","viewed":31,"name":"Dancing patterns","username":"mike2367","description":"patterns made by iterated fractals ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// code ref: https://www.shadertoy.com/view/Mss3Wf\n#define PI 3.1415926\nconst int maxIterations=15;//a nice value for fullscreen is 8\n\nfloat circleSize=1.0/(3.0*pow(2.0,float(maxIterations)));\n//generic rotation formula\nvec2 rot(vec2 uv,float a){\n\treturn vec2(uv.x*cos(a)+uv.y*sin(a),uv.y*cos(a)-uv.x*sin(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\t//normalize stuff\n\tvec2 uv=iResolution.xy;uv=-.5*(uv-2.0*fragCoord.xy)/uv.x;\n    float angle = (0.8+ 0.2* iTime*9./4.0/2.0+0.5)*9./8.0;\n\t//global rotation and zoom\n\tuv=rot(uv,angle);\n\tuv*=sin(iTime*PI  / 4.)*0.5+2.0;\n\t\n\t//mirror, rotate and scale 6 times...\n\tfloat s=1.0;\n    \n\tfor(int i=0;i<maxIterations;i++){\n\t\tuv=abs(uv)-s;\n\t\tuv=rot(uv,angle);\n        int x = int(floor(uv.x));\n        int y = int(floor(uv.y));\n        uv = uv * (0.5+1.5 *float((abs((y-x)) & (y +x))));\n\t\ts/=2.;\n\t}\n\t\n\t//draw a circle\n    vec3 colorA = vec3(0.506,0.845,0.712);\n    vec3 colorB = vec3(0.900,0.728,0.5);\n\tvec3 col = length(uv)> circleSize / 0.00001?vec3(1.,0.62,0.87) : vec3(1.0);\n    col = mix(col, colorA, sin(iTime/5.) * 0.1);\n    col = mix(col, colorB, sin(iTime/5.) * 0.3);\n\tfragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}