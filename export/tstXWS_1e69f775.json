{"ver":"0.1","info":{"id":"tstXWS","date":"1572982253","viewed":189,"name":"The hash lab","username":"oktomus","description":"From https://amindforeverprogramming.blogspot.com/2013/07/random-floats-in-glsl-330.html","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["hashrand"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nuint hash(uint x) \n{\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\n\nfloat random(uint hashed_value) \n{\n    const uint mantissaMask = 0x007FFFFFu;\n    const uint one          = 0x3F800000u;\n    \n    hashed_value &= mantissaMask;\n    hashed_value |= one;\n\n    float  r2 = uintBitsToFloat(hashed_value);\n    return r2 - 1.0;\n}\n\n\nfloat random(float f) \n{\n    return random(floatBitsToUint(f));\n}\n\nfloat random(vec2 v)\n{\n    uint hashed =\n        hash(\n            floatBitsToUint(v.x) \n            ^ hash(floatBitsToUint(v.y)));\n    return random(hashed);\n}\n\nfloat random(vec3 v)\n{\n    uint hashed =\n        hash(\n            floatBitsToUint(v.x) \n            ^ hash(floatBitsToUint(v.y))\n            ^ hash(floatBitsToUint(v.z)));\n    return random(hashed);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    float r = random(vec3(uv, iTime));\n    fragColor = vec4(r, r, r, 1.0);\n}","name":"Image","description":"","type":"image"}]}