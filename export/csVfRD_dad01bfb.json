{"ver":"0.1","info":{"id":"csVfRD","date":"1697995011","viewed":27,"name":"GeoLightRealm","username":"zhy437488627","description":"\"GeoLightRealm\" is a blend of art and technology, showcasing how mathematical precision, when fed into well-optimized graphical computations, can yield a realm teeming with light and geometric life, responsive to the viewer's control.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","softshadow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TMIN 0.1\n#define TMAX 120.\n#define RAYMARCH_TIME 128\n#define PRECISION .001\n#define AA 5\n#define R 1.2\n#define R2 0.2\n#define PI 3.14159265\n\nvec2 fixUV(vec2 uv) {\n    return (2. * uv - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\nfloat sdfSphere(vec3 p, float radius, vec3 offset) {\n    return length(p - offset) - radius;\n}\nfloat sdfPlane(vec3 p) {\n    return p.y+1.2;\n}\nfloat sdfRect(vec3 p) {\n    vec3 d = abs(p + vec3(1.3, 0.0, 2.3)) - vec3(0.3);\n    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n}\nfloat sdfMap(vec3 p) {\n    float sphereDist = sdfSphere(p, R, vec3(0.0));\n    float planeDist = sdfPlane(p);\n    float sphere2Dist = sdfSphere(p, R2, vec3(1.3, 0.0, 1.3));\n    float rectDist = sdfRect(p);\n    \n    return min(min(min(sphereDist, planeDist), sphere2Dist), rectDist);\n}\n// https://iquilezles.org/articles/rmshadows\nfloat softShadow(in vec3 ro, in vec3 rd, float k) {\n    float res = 1.0;\n    float ph = 1e20;\n    float t = TMIN;\n    while(t < TMAX) {\n        vec3 pos = ro + rd * t;\n        float h = sdfMap(pos);\n        if(h < PRECISION)\n            return 0.0;\n        float y = h * h / (2.0 * ph);\n        float d = sqrt(h * h - y * y);\n        res = min(res, k * d / max(0.0, t - y));\n        ph = h;\n        t += h;\n    }\n    return res;\n}\nvec3 calcNormal(in vec3 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * sdfMap(p + k.xyy * h) +\n        k.yyx * sdfMap(p + k.yyx * h) +\n        k.yxy * sdfMap(p + k.yxy * h) +\n        k.xxx * sdfMap(p + k.xxx * h));\n}\nvec3 norcurv(in vec3 p) {\n    vec2 e = vec2(-1., 1.) * 0.01;\n    float t1 = sdfMap(p + e.yxx), t2 = sdfMap(p + e.xxy);\n    float t3 = sdfMap(p + e.xyx), t4 = sdfMap(p + e.yyy);\n    return normalize(e.yxx * t1 + e.xxy * t2 + e.xyx * t3 + e.yyy * t4);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float t = TMIN;\n    for(int i = 0; i < RAYMARCH_TIME && t < TMAX; i++) {\n        vec3 p = ro + t * rd;\n        float d = sdfMap(p);\n        if(d < PRECISION) {\n            break;\n        }\n        t += d;\n    }\n    return t;\n}\nmat3 setCamera(vec3 ta, vec3 ro, float cr) {\n    vec3 z = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.);\n    vec3 x = normalize(cross(z, cp));\n    vec3 y = cross(x, z);\n    return mat3(x, y, z);\n}\nvec3 render(vec2 uv) {\n    vec3 color = vec3(0.01);\n    vec3 ro = vec3(4. * cos(iTime), 0., 4. * sin(iTime));\n    vec3 ta = vec3(0.0);\n    if(iMouse.z > 0.001) {\n        float m_rate_x = iMouse.x / iResolution.x * PI * 2. + 4.3;\n        float m_rate_y = iMouse.y / iResolution.y * PI * 1. + 1.6; // Add a vertical mouse rate\n        float distanceToOrigin = length(ro); // Calculate the current distance to origin\n\n        ro = normalize(vec3(2. * cos(m_rate_x), 2. * sin(m_rate_y), 2. * sin(m_rate_x))) * distanceToOrigin;\n    }\n    mat3 cam = setCamera(ta, ro, 0.0);\n    vec3 rd = normalize(cam * vec3(uv, 1.));\n    float t = rayMarch(ro, rd);\n    if(t < TMAX) {\n        vec3 p = t * rd + ro;\n        vec3 lightPos = vec3(2., 3., 0.);\n        vec3 n = calcNormal(p);\n        float diff = clamp(dot(normalize(lightPos - p), n), 0., 1.);\n        p += PRECISION * n;\n        diff *= softShadow(p, normalize(lightPos - p), 10.);\n        vec3 amb = 0.3 + 0.5 * dot(n, vec3(0., 1., 0.)) * vec3(1.);\n        return diff * vec3(sin(iTime), 0., cos(iTime)) + amb * vec3(0.5);\n    }\n     return sqrt(color);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fixUV(fragCoord);\n\n    vec3 color = vec3(0.);\n    for(int m = 0; m < AA; m++) {\n        for(int n = 0; n < AA; n++) {\n            vec2 offset = 2. * (vec2(float(m), float(n)) / float(AA) - .5);\n            vec2 uv = fixUV(fragCoord + offset);\n            color += render(uv);\n        }\n    }\n    fragColor = vec4(color / float(AA * AA), 1.);\n}","name":"Image","description":"","type":"image"}]}