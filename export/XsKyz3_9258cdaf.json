{"ver":"0.1","info":{"id":"XsKyz3","date":"1522795458","viewed":545,"name":"Fbm test","username":"ircss","description":"Continue learning from Book of Shaders. ","likes":29,"published":1,"flags":0,"usePreview":0,"tags":["fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWO_PI 6.28318530718\nvec3 random3(vec3 st)\n{\n    st = vec3( dot(st,vec3(127.1,311.7,211.2)/20.),\n            \tdot(st,vec3(269.5,183.3, 157.1)), dot(st,vec3(269.5,183.3, 17.1))  );\n   \treturn -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\nfloat noise3D(vec3 st) \n{\n\tvec3 i = floor(st) ;\n  \tvec3 f = fract(st);\n\t\t\n    vec3 u = smoothstep(0.,1.,f);\n    \n\tfloat valueNowxy01 =mix( mix( dot( random3(i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ),\n                    \t\t \t dot( random3(i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                \t\tmix( dot( random3(i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ),\n                     \t\t \t dot( random3(i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y);\n\tfloat valueNowxy02 =mix( mix( dot( random3(i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ),\n                    \t\t \t dot( random3(i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                \t\tmix( dot( random3(i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ),\n                     \t\t \t dot( random3(i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y);\n\n    float toReturn = abs(mix(valueNowxy01, valueNowxy02, u.z));\n    return pow(.2, toReturn) -0.4;;\n\n}\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n\nfloat fbm(vec2 st){\n    \n    const int n = 6;\n    float toReturn = 0.;\n    float frequencyIncrease = 2.9;\n    float amplitudeDecrese = 0.5;\n    float amplitude = 0.9;\n    float frequency = 1.;\n    \n    for(int i = 0; i < n; i++){\n        \n        float det =  float(mod(float(i),2.)==0.);\n        int signMul = (int(det)*2)-1;\n        toReturn += amplitude*noise3D(vec3(st.xy *rotate2d(float(i/n))*frequency, iTime*0.1*amplitude));\n        \n        amplitude *= amplitudeDecrese ;\n        \n        frequency *= frequencyIncrease;\n    }\n    \n    return toReturn;\n    \n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\tvec2 toCenter = vec2(0.5) - uv ;\n    float dis = length(toCenter);\n    float angle = (acos(toCenter.x*1.0/dis)/TWO_PI)*2. ;\n    //vec2 st = vec2(angle , dis );\n    vec2 st = uv;\n    // Time varying pixel color\n    float r1 = fbm( st);\n    float r2 = fbm( st*rotate2d(1.14) + vec2(1412., 124.)+r1);\n\tfloat colt = fbm( st*rotate2d(0.213) +vec2(14122., 14.)+r2);\n    // Output to screen\n    vec3 finColor = mix(vec3(r1, r2, colt), vec3(0.121, pow(min(r1,r2),2.), 0.2), colt);\n    finColor = mix(finColor, \n                   vec3(dot(finColor, vec3(0.91,abs(sin(iTime*0.2)),0.2)), dot(finColor, vec3(colt)), colt*r1), r2); \n    fragColor = vec4(finColor,1.);\n}","name":"Image","description":"","type":"image"}]}