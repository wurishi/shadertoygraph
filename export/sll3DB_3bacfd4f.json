{"ver":"0.1","info":{"id":"sll3DB","date":"1622800854","viewed":390,"name":"city nights","username":"Carandiru","description":"generation of city-like structure from noise. aerial view of urban population.\n--- this is the algorithmic version of this digital painting : https://www.hicetnunc.xyz/objkt/112020\nnice and simple pixelization from: https://www.shadertoy.com/view/4lXGzS","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["pixel","neon","gif"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// http://bit.ly/supersinfulsilicon\n\n// shader by Jason Tully is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/sll3DB\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon\n\n// algorithmic version of this digital painting : https://www.hicetnunc.xyz/objkt/112020\n\n// nice and simple pixelization from: https://www.shadertoy.com/view/4lXGzS\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 flicker = mod(vec4(iTime), vec4(0.25f, 0.618f, 0.5f, 1.0f));\n    \n    vec3 color = vec3(0);\n    vec3 layer;\n    \n    layer = textureLod(iChannel0, uv, 0.0f).rrr;\n    color += layer;\n    //color *= color;\n    color += layer * flicker.x;\n    \n    layer = textureLod(iChannel1, uv, 0.0f).r * PINK;\n    color += layer;\n    color *= color;\n    color += layer * flicker.y;\n    \n    layer = textureLod(iChannel2, uv, 0.0f).r * PINK2;\n    color += layer;\n    //color *= color;\n    color += layer * flicker.z;\n    \n    layer = textureLod(iChannel3, uv, 0.0f).r * HOT_PINK;\n    color += layer;\n    color *= color;\n    color += layer * flicker.w;\n    \n    // Output to screen\n    fragColor = vec4(mix(color, color + color * color, flicker.y),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// http://bit.ly/supersinfulsilicon\n\n// shader by Jason Tully is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/sll3DB\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon\n\n\n\n///////////////////////\n// source to transform\nfloat bg(vec2 uv)\n{\n    return texture(iChannel0, uv).r;\n}\n\n///////////////////////\n// transform effect\nfloat effect(vec2 uv, float shade, float t)\n{\n    float granularity = t*20.+10.;\n    if (granularity > 0.0) \n    {\n        vec2 d = granularity / iResolution.xy;\n\n        uv = d*(floor(uv/d) + 0.5);\n        return bg(uv);\n    }\n    return shade;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ((2.0 * fragCoord) + SPEED*iTime + 0.0f) / iResolution.xy;\n    \n    float noise;\n    {\n        noise = textureLod(iChannel0, uv, 0.0f).r;\n\n        noise = effect(uv, noise, 8.5f);\n        noise *= effect(uv, noise, 4.0f);\n\n        noise *= effect(uv, noise, 7.0f*0.25f);\n        noise *= effect(uv, noise, 2.5*0.25f);\n\n        noise *= effect(uv, noise, 1.25*0.25f);\n    }\n    fragColor = vec4(noise);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// http://bit.ly/supersinfulsilicon\n\n// shader by Jason Tully is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/sll3DB\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon\n\n\n///////////////////////\n// source to transform\nfloat bg(vec2 uv)\n{\n    return texture(iChannel0, uv).r;\n}\n\n///////////////////////\n// transform effect\nfloat effect(vec2 uv, float shade, float t)\n{\n    float granularity = t*20.+10.;\n    if (granularity > 0.0) \n    {\n        vec2 d = granularity / iResolution.xy;\n\n        uv = d*(floor(uv/d) + 0.5);\n        return bg(uv);\n    }\n    return shade;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ((2.0 * fragCoord) + SPEED*iTime + 1.0f) / iResolution.xy;\n    \n    float noise;\n    {\n        noise = textureLod(iChannel0, uv, 0.0f).r;\n\n        noise = effect(uv, noise, 8.5f);\n        noise *= effect(uv, noise, 4.0f);\n\n        noise *= effect(uv, noise, 7.0f*0.25f);\n        noise *= effect(uv, noise, 2.5*0.25f);\n\n        noise *= effect(uv, noise, 1.25*0.25f);\n    }\n    fragColor = vec4(noise);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// http://bit.ly/supersinfulsilicon\n\n// shader by Jason Tully is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/sll3DB\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon\n\n\n///////////////////////\n// source to transform\nfloat bg(vec2 uv)\n{\n    return texture(iChannel0, uv).r;\n}\n\n///////////////////////\n// transform effect\nfloat effect(vec2 uv, float shade, float t)\n{\n    float granularity = t*20.+10.;\n    if (granularity > 0.0) \n    {\n        vec2 d = granularity / iResolution.xy;\n\n        uv = d*(floor(uv/d) + 0.5);\n        return bg(uv);\n    }\n    return shade;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ((2.0 * fragCoord) + SPEED*iTime + 2.0f) / iResolution.xy;\n    \n    float noise;\n    {\n        noise = textureLod(iChannel0, uv, 0.0f).r;\n\n        noise = effect(uv, noise, 8.5f);\n        noise *= effect(uv, noise, 4.0f);\n\n        noise *= effect(uv, noise, 7.0f*0.25f);\n        noise *= effect(uv, noise, 2.5*0.25f);\n\n        noise *= effect(uv, noise, 1.25*0.25f);\n    }\n    fragColor = vec4(noise);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// http://bit.ly/supersinfulsilicon\n\n// shader by Jason Tully is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/sll3DB\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon\n\n\n///////////////////////\n// source to transform\nfloat bg(vec2 uv)\n{\n    return texture(iChannel0, uv).r;\n}\n\n///////////////////////\n// transform effect\nfloat effect(vec2 uv, float shade, float t)\n{\n    float granularity = t*20.+10.;\n    if (granularity > 0.0) \n    {\n        vec2 d = granularity / iResolution.xy;\n\n        uv = d*(floor(uv/d) + 0.5);\n        return bg(uv);\n    }\n    return shade;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ((2.0 * fragCoord) + SPEED*iTime + 3.0f) / iResolution.xy;\n    \n    float noise;\n    {\n        noise = textureLod(iChannel0, uv, 0.0f).r;\n\n        noise = effect(uv, noise, 8.5f);\n        noise *= effect(uv, noise, 4.0f);\n\n        noise *= effect(uv, noise, 7.0f*0.25f);\n        noise *= effect(uv, noise, 2.5*0.25f);\n\n        noise *= effect(uv, noise, 1.25*0.25f);\n    }\n    fragColor = vec4(noise);\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define SPEED 500.0f\n#define HOT_PINK vec3(1.0f, 0.062745f, 0.082352f)\n#define PINK vec3(0.937254f, 0.027450f, 0.521568f)\n#define PINK2 vec3(0.956862f, 0.003921f, 0.768627f)","name":"Common","description":"","type":"common"}]}