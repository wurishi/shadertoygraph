{"ver":"0.1","info":{"id":"XlVBDG","date":"1543894124","viewed":216,"name":"1999","username":"bitnenfer","description":"It's not special but it's my first one here :D","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MIN_CLIP 0.001\n#define MAX_CLIP 100.0\n#define EPSILON 0.001\n#define NO_MATERIAL 0.0\n#define MATERIAL0 1.0\n#define MATERIAL1 2.0\n#define MATERIAL2 3.0\n\nstruct RayResult\n{\n    float total;\n    float material;\n};\n\nvec2 opUnion(vec2 a, vec2 b)\n{\n    if (a.x < b.x) return a;\n    else return b;\n}\n\nvec3 opRepeate(in vec3 p, in vec3 c)\n{\n    return mod(p, c) - 0.5 * c;\n}\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nvec2 map(in vec3 p)\n{\n    vec3 p1 = p;\n    float rot = iTime;\n    float c = cos(rot);\n    float s = sin(rot);\n    float rx = p1.x * c + p1.y * s;\n    float ry = p1.x * s - p1.y * c;\n    \n        \n    p1 = opRepeate(p1 + vec3(0.0, iTime * 0.1, -iTime * 3.9), vec3(0.0, 0.0, 4.0));\n\n    p1.x = rx;\n    p1.y = ry;\n\n    vec3 p0 = opRepeate(p, vec3(0, 0, 0.25));\n    vec3 bp = p0;\n    rot = iTime;\n    c = cos(rot);\n    s = sin(rot);\n    rx = p0.y * c + p0.z * s;\n    ry = p0.y * s - p0.z * c;\n    \n    bp.y = rx;\n    bp.z = ry;\n    \n    rot = iTime * 2.0;\n    float off = 0.1;\n    vec2 sp1 = vec2(sdSphere(p0 + vec3(off + cos(-rot) * 0.1, off + sin(-rot) * 0.1, 0.0), 0.05), MATERIAL0);\n    vec2 rb1 = vec2(sdHexPrism(bp + vec3(0.02), vec2(0.03)), MATERIAL1);\n    vec2 sp2 = vec2(sdSphere(p1 + vec3(0.6), 0.1), MATERIAL2);\n    vec2 un0 = opUnion(rb1, sp1);\n    vec2 un1 = opUnion(un0, sp2);\n    \n    return un1;\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(0.0, EPSILON);\n    return normalize(vec3(\n        map(p + e.yxx).x - map(p - e.yxx).x,\n        map(p + e.xyx).x - map(p - e.xyx).x,\n        map(p + e.xxy).x - map(p - e.xxy).x\n    ));\n}\n\nvec3 getOffset(RayResult result)\n{\n    return vec3(cos(result.total) * 0.4, sin(result.total) * 0.4, iTime * 2.0);\n}\n\nRayResult raymarch(in vec3 ro, in vec3 rd)\n{\n    RayResult result;\n    result.total = MIN_CLIP;\n    \n    for (int i = 0; i < 400; ++i) \n    {   \n        vec2 step = map(getOffset(result) + ro + rd * result.total);\n        if (step.x < EPSILON)\n        {\n            result.material = step.y;\n            return result;\n        }\n        result.total += step.x * 0.7;\n        if (result.total > MAX_CLIP)\n        {\n            break;\n        }\n    }\n    \n    result.total = MAX_CLIP;\n    result.material = NO_MATERIAL;\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ((fragCoord / iResolution.xy) * 2.0 - 1.0) * vec2(iResolution.x / iResolution.y, 1.0);\n    vec2 pos = uv * 0.1;\n    vec3 bg = vec3(0.2, 0.1, 0.2);\n    vec3 color = bg;\n    \n    vec3 ro = vec3(0, 0, -1);\n    vec3 rd = vec3(pos, 1.0);\n    \n    RayResult result = raymarch(ro, rd);\n    vec3 hitPoint = getOffset(result) + ro + rd * result.total;\n    \n    if (result.total < MAX_CLIP) \n    {\n        vec3 materialColor = vec3(0.0);\n        vec3 ambientColor = vec3(0.0, 0.01, 0.04);\n        vec3 norm = normal(hitPoint);\n        vec3 dirLight0 = normalize(vec3(0.0, 1.0, -0.9));\n        vec3 dirLight1 = normalize(vec3(0.3, -1.0, 0.0));\n        float nl0 = max(dot(dirLight0, norm), 0.0);\n        float nl1 = max(dot(dirLight1, norm), 0.0);\n        \n        if (result.material == MATERIAL0)\n        {\n            materialColor = vec3(1.0, sin(result.total) * 0.5, 0.0);\n        }\n        else if (result.material == MATERIAL1)\n        {\n            materialColor = vec3(0.1,0.4,0.3);\n        }\n        else if (result.material == MATERIAL2)\n        {\n            materialColor = vec3(0.0, 0.0, 0.0);\n        }\n                    \n        color = (materialColor * nl0) + (vec3(0.1, 0.1, 0.2) * nl1) + ambientColor;\n        if (result.material == MATERIAL2)\n        {\n            color += vec3(1.0) * pow(nl0, 512.0);\n        }\n        color = mix(color, vec3(0.0), pow(1.0 - (result.total / MAX_CLIP), 20.0));\n        color = mix(bg * 10.0, color, pow(1.09 - result.total / MAX_CLIP, 1.0));\n    }\n    else \n    {\n        float value = 0.0;\n        float freq = 10.0;\n        value = sin(iTime + uv.x * freq) + \n        sin(iTime + uv.y * freq) + \n        sin(iTime + (uv.x + uv.y) * freq) + \n        cos(iTime + sqrt(length(uv - 0.5)) * freq * 2.0);;\n        vec3 c = vec3(cos(value), sin(value), sin(value * 3.14 * 2.0));\n        color = mix(color, vec3(1), clamp(pow(1.0 - length(uv), 4.0),0.1, 1.0));\n        color = mix(color, c, 1.012 - result.total / MAX_CLIP);\n        \n    }\n    \n    color = pow(color, vec3(1.0/2.2));\n    color = mix(color, vec3(0.0), pow(length(uv / (iResolution.x / iResolution.y)), 2.0));\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}