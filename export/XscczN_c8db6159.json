{"ver":"0.1","info":{"id":"XscczN","date":"1518083140","viewed":235,"name":"Poisson equation - Jacobi method","username":"Ultraviolet","description":"Solving the Poisson equation in 1D with the jacobi method.\nNote: bufs B, C, and D are duplicates (used for performing 3 steps at each frame).","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["poisson","iterative","jacobi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BG_COLOR vec3(.9)\n#define FG_COLOR_1 vec3(.6, .6, .8)\n#define FG_COLOR_2 vec3(.8, .6, .6)\n#define FG_COLOR_3 vec3(.6,.8,  .6)\n#define ST_COLOR_1 vec3(.1, .1, .2)\n#define ST_COLOR_2 vec3(.2, .1, .1)\n#define ST_COLOR_3 vec3(.1,.2,  .1)\n\nfloat PointSegDistance(vec2 p, vec2 a, vec2 b)\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nfloat valO(int n)\n{\n    return texelFetch(iChannel0, ivec2(n, 0),0).r;\n}\n\nfloat valR(int n)\n{\n    return texelFetch(iChannel1, ivec2(n, 0),0).r;\n}\n\nfloat LvalR(int n)\n{    \n    return (2.*valR(n) - valR(n+1) - valR(n-1));\n}\n\nfloat val(int n)\n{\n    //return -valO(n)/12.;\n    //return -LvalR(n)/12.;\n    //return -valR(n);\n    \n    \n    return valO(n);\n    return LvalR(n);\n    //return valR(n);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    int x = int(fragCoord.x);\n    float dx = 1./iResolution.x;\n    float v = valO(x);\n    vec2 p  = vec2(uv.x   , v       );\n    vec2 pp = vec2(uv.x+dx, valO(x+1));\n    vec2 pm = vec2(uv.x-dx, valO(x-1));\n    \n    //*\n    if(x == 0)\n        pm = pp;\n    \n    if(x == int(iResolution.x)-1)\n        pp = pm;\n\t//*/\n        \n    float dp = min(PointSegDistance(uv,p, pp),PointSegDistance(uv,p, pm));\n    \n    float stroke_alpha = clamp(mix(1., 0., dp * iResolution.y), 0., 1.);\n    float bg_alpha = clamp((v-uv.y)* iResolution.y, -1., 1.)*.5+.5;\n    \n    \n    vec3 c = mix(BG_COLOR, FG_COLOR_1, bg_alpha*.5);\n    c = mix(c, ST_COLOR_1, stroke_alpha);\n    \n    \n    \n    v = LvalR(x);\n    p  = vec2(uv.x   , v       );\n    pp = vec2(uv.x+dx, LvalR(x+1));\n    pm = vec2(uv.x-dx, LvalR(x-1));\n    \n    //*\n    if(x == 0)\n        pm = pp;\n    \n    if(x == int(iResolution.x)-1)\n        pp = pm;\n\t//*/\n        \n    dp = min(PointSegDistance(uv,p, pp),PointSegDistance(uv,p, pm));\n    \n    stroke_alpha = clamp(mix(1., 0., dp * iResolution.y), 0., 1.);\n    bg_alpha = clamp((v-uv.y)* iResolution.y, -1., 1.)*.5+.5;\n    \n    c = mix(c, FG_COLOR_2, bg_alpha*.5);\n    c = mix(c, ST_COLOR_2, stroke_alpha);\n    \n    \n    \n    \n    \n    v = abs(LvalR(x) - valO(x));\n    p  = vec2(uv.x   , v       );\n    pp = vec2(uv.x+dx, abs(LvalR(x+1) - valO(x+1)));\n    pm = vec2(uv.x-dx, abs(LvalR(x-1) - valO(x-1)));\n    \n    //*\n    if(x == 0)\n        pm = pp;\n    \n    if(x == int(iResolution.x)-1)\n        pp = pm;\n\t//*/\n        \n    dp = min(PointSegDistance(uv,p, pp),PointSegDistance(uv,p, pm));\n    \n    stroke_alpha = clamp(mix(1., 0., dp * iResolution.y), 0., 1.);\n    bg_alpha = clamp((v-uv.y)* iResolution.y, -1., 1.)*.5+.5;\n    \n    c = mix(c, FG_COLOR_3, bg_alpha*.5);\n    c = mix(c, ST_COLOR_3, stroke_alpha);\n    \n    \n    fragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ifragCoord = ivec2(floor(fragCoord));\n    \n    if(ifragCoord.y != 0)\n    {\n        fragColor = vec4(0.);\n        return;\n    }\n    \n    vec4 val = texelFetch(iChannel0, ifragCoord,0);\n    \n    if(iFrame < 2)\n    {\n        //val.x = 0.;\n        val.x = 0.5+0.2*sin(10.*fragCoord.x/iResolution.x);\n    }\n    \n    //*\n    if(iMouse.z>.5 && val.w<.5 && int(iMouse.x) == ifragCoord.x)\n    {\n        val.x = iMouse.y/iResolution.y;\n    }\n    //*/\n    \n    if(iMouse.z>.5 && val.w>.5)\n    {\n        float t = (fragCoord.x - val.y)/(iMouse.x - val.y);\n        if(0.<t && t<1.)\n            val.x = mix(val.z/iResolution.y, iMouse.y/iResolution.y, t);\n    }\n    \n    fragColor = vec4(val.x, iMouse.xyz);\n    \n    \n    \n    \n    /*\n    float xx = fragCoord.x/iResolution.x;\n    float xval = -xx * (xx+3.) * exp(xx);\n    \n    fragColor = vec4(xval);\n\t//*/\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nfloat valO(int n)\n{\n    return texelFetch(iChannel0, ivec2(n, 0),0).r;\n}\n\nfloat valR(int n)\n{\n    return texelFetch(iChannel1, ivec2(n, 0),0).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ifragCoord = ivec2(floor(fragCoord));\n    \n    if(ifragCoord.y != 0)\n    {\n        fragColor = vec4(0.);\n        return;\n    }\n    \n    int x = ifragCoord.x;\n    float F = valO(x);\n    \n    //*\n    if(ifragCoord.x == 0 || ifragCoord.x == int(iResolution.x)-1)\n    {\n        float U = valO(x);\n        fragColor = vec4(U, 0., 0., 0.);\n        return;\n    }\n\t//*/\n    \n    float Up = valR(x+1);\n    float Um = valR(x-1);\n    \n    float U = (F+(Up+Um))/2.;\n    \n    fragColor = vec4(U, 0., 0., 0.);\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\nfloat valO(int n)\n{\n    return texelFetch(iChannel0, ivec2(n, 0),0).r;\n}\n\nfloat valR(int n)\n{\n    return texelFetch(iChannel1, ivec2(n, 0),0).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ifragCoord = ivec2(floor(fragCoord));\n    \n    if(ifragCoord.y != 0)\n    {\n        fragColor = vec4(0.);\n        return;\n    }\n    \n    int x = ifragCoord.x;\n    float F = valO(x);\n    \n    if(ifragCoord.x == 0 || ifragCoord.x == int(iResolution.x)-1)\n    {\n        float U = valO(x);\n        fragColor = vec4(U, 0., 0., 0.);\n        return;\n    }\n    \n    float Up = valR(x+1);\n    float Um = valR(x-1);\n    \n    float U = (F+(Up+Um))/2.;\n    \n    fragColor = vec4(U, 0., 0., 0.);\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"\nfloat valO(int n)\n{\n    return texelFetch(iChannel0, ivec2(n, 0),0).r;\n}\n\nfloat valR(int n)\n{\n    return texelFetch(iChannel1, ivec2(n, 0),0).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ifragCoord = ivec2(floor(fragCoord));\n    \n    if(ifragCoord.y != 0)\n    {\n        fragColor = vec4(0.);\n        return;\n    }\n    \n    int x = ifragCoord.x;\n    float F = valO(x);\n    \n    if(ifragCoord.x == 0 || ifragCoord.x == int(iResolution.x)-1)\n    {\n        float U = valO(x);\n        fragColor = vec4(U, 0., 0., 0.);\n        return;\n    }\n    \n    float Up = valR(x+1);\n    float Um = valR(x-1);\n    \n    float U = (F+(Up+Um))/2.;\n    \n    fragColor = vec4(U, 0., 0., 0.);\n}","name":"Buf D","description":"","type":"buffer"}]}