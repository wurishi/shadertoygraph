{"ver":"0.1","info":{"id":"Dt2GWV","date":"1673956276","viewed":59,"name":"diamond test shader","username":"rs_creative","description":"test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nfloat getRadialFloat(vec2 vUv) {\n\n    float uActiveValue = 0.1;\n    float speed = 8.0 * uActiveValue;\n    float scale = 7.0;\n\n    vec2 uv = (vUv - 0.5) * scale;\n\n    vec2 aspect = vec2( 4., 3. );\n    uv -= 0.5;\n    uv.x *= aspect.x / aspect.y;\n    uv += 0.5;\n\n    float r = length( uv );\n    float z = ( sin( r - (iTime * speed) ) * 0.5 + 0.5 );\n\n    float sharp = step( 0.5, z );\n    float soft = smoothstep(0.0, 0.9, z );\n\n    return soft;\n}\n\nfloat sdfBox(vec2 p, vec2 size)\n{\n    vec2 d = abs(p) - size;  \n\treturn length(max(d, vec2(0))) + min(max(d.x, d.y), 0.0);\n}\n\nfloat box(vec2 _st, vec2 _size, float _smoothEdges){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 aa = vec2(_smoothEdges*0.5);\n    vec2 uv = smoothstep(_size,_size+aa,_st);\n    uv *= smoothstep(_size,_size+aa,vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat getDiamondFloat(vec2 vUv) {\n\n    float uActiveValue = 0.1;\n    float speed = 8.0 * uActiveValue;\n    float scale = 7.0;\n\n    vec2 uv = vUv;\n\n    vec2 aspect = vec2( 4., 3. );\n    uv -= 0.5;\n    uv.x *= aspect.x / aspect.y;\n    uv *= scale;\n    uv += 0.5;\n   \n \n    uv -= 0.5;\n    uv = rotate2d( PI * 0.25 ) * uv;\n    uv += 0.5;\n\n    float r = sdfBox( uv, vec2(1.0) );\n    float z = ( sin( r - (iTime * speed) ) * 0.5 + 0.5 );\n    \n    //float z = r;\n\n    float sharp = step( 0.5, z );\n    float soft = smoothstep(0.0, 1.0, z );\n\n    return soft;\n}\n\n\nfloat whenGt(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\n\nfloat whenLe(float x, float y) {\n  return 1.0 - whenGt(x, y);\n}\n\nvec3 getRadial( float x ) {\n  vec3 firstColor = vec3( 0.102, 0.451, 0.91 );\n  vec3 secondColor = vec3( 0.682, 0.796, 0.98 );\n  vec3 thirdColor = vec3( 0.824, 0.89, 0.988 );\n  vec3 fourthColor = vec3( 0.486 );\n  vec3 fifthColor = vec3( 0.196, 0.2, 0.212 );\n\n  float step1 = 0.1;\n  float step2 = 0.8;\n  float step3 = 0.9;\n  float step4 = 0.95;\n  float step5 = 0.7;\n  float step6 = 0.9;\n  float step7 = 1.0;\n\n  vec3 color = fifthColor;\n\n  // avoid conditionals\n  color = mix( color, fifthColor, 1.0 - whenLe( step5, x ) );  \n  color = mix( color, fourthColor, 1.0 - whenLe( step4, x ) );  \n  color = mix( color, thirdColor, 1.0 - whenLe( step3, x ) );  \n  color = mix( color, secondColor, 1.0 - whenLe( step2, x ) );  \n  color = mix( color, firstColor, 1.0 - whenLe( step1, x ) );\n\n  return color;\n}\n    \nfloat createCross( vec2 uv, float scale ) {\n\n    vec2 uv2 = uv;\n    \n    uv2 -= 0.5;\n    uv2 = rotate2d( -PI * 0.25 ) * uv2; \n    uv2 += 0.5;\n     \n    uv -= 0.5;\n    uv = rotate2d( PI * 0.25 ) * uv; \n    uv += 0.5;\n    \n    vec2 s = vec2( 0.2, 1.0 );\n    s *= scale;\n    \n    \n    float box1 = box( uv, s, 0.0 );\n    float box2 = box( uv2, s, 0.0 );   \n    \n    return clamp(box1 + box2, 0., 1.);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy / iResolution.xy;\n    \n    float radialFloat = getRadialFloat( st );\n    float diamondFloat = getDiamondFloat( st );\n    vec3 radial = getRadial( diamondFloat );\n    \n    st -= 0.5;\n    st.x *= iResolution.x / iResolution.y;\n    st += 0.5;\n    \n    float speed = 0.5;\n    float t = iTime * speed;\n    \n    // smooths the animation time;\n    float finalTime = fract(t) * fract(t) * fract(t); \n    \n    float maxScale = 6.0;\n    \n    // create cross and scale over time\n    float d = createCross( st, finalTime * maxScale );\n    \n    // invert the colours\n    if( mod(floor(t), 2.0) == 0.0 ) {\n        d = 1.0 - d;\n    }\n    \n    vec3 fourthColor = vec3( 0.486 );\n    vec3 fifthColor = vec3( 0.196, 0.2, 0.212 );\n    \n    vec3 color = mix( fourthColor, fifthColor, d );\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}