{"ver":"0.1","info":{"id":"XX2GR1","date":"1708202582","viewed":29,"name":"Psychedelic 3DBox Sphere","username":"Shin0155","description":"Psychedelic 3DBox Sphere","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["psychedelic3dboxspere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shadertoy uniforms\nuniform vec3 iGlobalResolution;\nuniform float iGlobalTime;\n\n\n\n\n// Constants\nconst float PI = 3.14159265359;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.001;\n\n// Hash function to generate random values\nfloat hash(vec2 p) {\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// Noise function to create distortion\nfloat noise(vec2 uv) {\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n    vec2 u = f * f * (3.0 - 2.0 * f); // Smoothstep\n    return mix(mix(hash(i + vec2(0.0, 0.0)), hash(i + vec2(1.0, 0.0)), u.x),\n               mix(hash(i + vec2(0.0, 1.0)), hash(i + vec2(1.0, 1.0)), u.x), u.y);\n}\n\n// Pulsating psychedelic color gradient\nvec3 psychedelicColor(vec2 uv, float time) {\n    float noiseFactor = noise(uv * 5.0 + time) * 0.5 + 0.5; // Noise function for color variation\n    vec3 color1 = vec3(0.5 + 0.5 * sin(time + uv.x), 0.5 + 0.5 * sin(time + uv.y), 0.5 + 0.5 * sin(time + uv.x + uv.y));\n    vec3 color2 = vec3(0.5 + 0.5 * sin(time + uv.y), 0.5 + 0.5 * sin(time + uv.x), 0.5 + 0.5 * sin(time + uv.x - uv.y));\n    vec3 color = mix(color1, color2, noiseFactor);\n    return color;\n}\n\n// Function to create a distortion texture\nvec2 distort(vec2 uv, float time) {\n    float distortionStrength = 0.1; // Adjust the strength of the distortion\n    float distortionSpeed = 0.5;\n    float noiseFactor = noise(uv * 5.0 + time * distortionSpeed) * distortionStrength;\n    uv += noiseFactor;\n    return uv;\n}\n\n// Rotation matrix\nmat2 rotate(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// SDF for a sphere\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\n// SDF for a box\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n}\n\n// SDF for a human body\nfloat sdHumanBody(vec3 p) {\n    // Rotate the body\n    p.yz *= rotate(iTime);\n    p.xz *= rotate(iTime * 0.5);\n    \n    // Body shape (box)\n    float body = sdBox(p, vec3(0.5, 1.0, 0.25));\n    \n    // Head shape (sphere)\n    float head = sdSphere(p - vec3(0.0, 1.0, 0.0), 0.5);\n    \n    // Combine body and head\n    return min(body, head);\n}\n\n// Raymarching function\nfloat raymarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    for (int i = 0; i < 64; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = sdHumanBody(p);\n        dO += dS;\n        if (dO > MAX_DIST || dS < EPSILON) break;\n    }\n    return dO;\n}\n\n// Normal calculation\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005; // or some other value\n    return normalize(e.xyy * sdHumanBody(p + e.xyy) +\n                     e.yyx * sdHumanBody(p + e.yyx) +\n                     e.yxy * sdHumanBody(p + e.yxy) +\n                     e.xxx * sdHumanBody(p + e.xxx));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Distort the UV coordinates\n    uv = distort(uv, iTime);\n    \n    // Camera setup\n    vec3 ro = vec3(0.0, 0.0, -5.0); // Ray origin\n    vec3 rd = normalize(vec3(uv, 1.0)); // Ray direction\n    \n    // Distort the ray direction\n    rd.xy = distort(rd.xy, iTime);\n    \n    // Raymarching\n    float d = raymarch(ro, rd);\n    \n    // Lighting\n    vec3 p = ro + rd * d;\n    vec3 n = calcNormal(p);\n    vec3 l = normalize(vec3(1.0, 1.0, -1.0)); // Light direction\n    \n    // Diffuse lighting\n    float diffuse = max(dot(n, l), 0.0);\n    \n    // Pulsating psychedelic color gradient\n    vec3 color = psychedelicColor(uv, iTime);\n    \n    // Apply a pulsating effect by modulating the color with a noise function\n    float pulse = noise(uv + vec2(iTime * 0.1)) * 0.5 + 0.5; // Pulse factor\n    color *= pulse;\n    \n    // Combine the pulsating color with the diffuse lighting\n    vec3 finalColor = color * diffuse;\n    \n    // Background color\n    vec3 backgroundColor = psychedelicColor(uv, iTime);\n    \n    // Combine the final color with the background color\n    vec3 finalColorWithBackground = mix(backgroundColor, finalColor, step(d, MAX_DIST));\n    \n    // Output to screen\n    fragColor = vec4(finalColorWithBackground, 1.0);\n}","name":"Image","description":"","type":"image"}]}