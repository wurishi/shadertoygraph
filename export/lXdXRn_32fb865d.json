{"ver":"0.1","info":{"id":"lXdXRn","date":"1718541479","viewed":32,"name":"Chromatic Aberration Shader yeah","username":"noClueBruh","description":"Just a simple Chromatic Aberration script you can use","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["chromaticaberration"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//not physically accurate i guess but it looks cool\nfloat d = 0.01;\nfloat strength = 1.;\n\nvec4 colorWrapper(vec2 uv) { \n    float a = 1.0;\n    a = pow(2. * distance(uv, vec2(0.5,0.5)), 2.);\n    \n    vec4 stdColor = texture(iChannel0, uv);\n    vec4 color0 = texture(iChannel0, uv + vec2(d, d));\n    vec4 outputColor = vec4(stdColor.r * (1. - a) + color0.r * a, stdColor.g, stdColor.b, stdColor.a);\n    \n    return stdColor * (1. - strength) + outputColor * strength;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = colorWrapper(uv);\n}","name":"Image","description":"","type":"image"}]}