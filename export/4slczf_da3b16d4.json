{"ver":"0.1","info":{"id":"4slczf","date":"1489177412","viewed":330,"name":"Game Maker Studio-Circles","username":"Glim888","description":"A shader for Game Maker Studio\n\nMy App´s:\nBluetooth Multiplayer: play.google.com/store/apps/details?id=com.gaming_apps.bluetooth_game_duel\nWater Physics Simulation: play.google.com/store/apps/details?id=com.gaming_apps.water_physics_simulation\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["stuff","glim888","gamemakerstudioshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define width .015\t\t//width of the circles\n#define z 1.5;\t\t\t//speed for move func()\n\n\n\nvec3 circle(in vec2 uv,in vec2 pos,in vec3 color,in float rad)\n{\n float dist = distance(uv.xy,pos.xy);  \n   \n return color*=width/abs((dist-rad));    \n}\n\nvec2 distortion(inout vec2 uv)\n{\n    float amplitude = abs(sin(iTime));\n    if(amplitude > 0.9){\n    \t//uv.x += mod(iTime,0.004);\n        uv.x *= clamp(sin(1000.0*uv.y),0.9,1.0);         \n    }\n       \n    return uv;\n}\n\n\nvec2 move(inout vec2 uv)\n{\n  uv *= sin(iTime)- z;\n    \n  return uv;  \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //scale screen + mouse to center\n\tvec2 uv = (fragCoord.xy - (iResolution.xy/2.0)) / iResolution.xy;\n\tuv *= 2.0; \n    uv.x *= iResolution.x/iResolution.y; //müssen mehr x-Werte werden (0-1.xx)\n    \n    vec2 mouse = (iMouse.xy - (iResolution.xy/2.0)) / iResolution.xy;\n    mouse*=2.0;\n    mouse.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = vec3(0.0);;\n    \n    uv = distortion(uv);\n    //uv = move(uv);\n    \n    for(int i=0; i < 100;i++)\n        {\n        float ii = float(i);\n        float rad = ii*3000.0/(iTime*300.0);\n        col += circle(uv,vec2(0.0,0.0),vec3(0.2,1.0,0.2),rad);        \n        }\n    \n    \n    \n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}