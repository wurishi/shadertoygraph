{"ver":"0.1","info":{"id":"NtfcWN","date":"1648056523","viewed":126,"name":"moon-lite","username":"Sabiri","description":"testing","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_HIT 100.\n#define MIN_HIT .001\n\n#define map(p) (length(p) - 2.)\n\nfloat distsphere(vec3 p, vec3 c, float r)\n{\n    return length(p - c) - r;\n}\n\nvec3 march(vec3 ro, vec3 rd)\n{\n    vec3 currpos;\n    vec3 lightpos = vec3(-10. * sin(iTime), 5., cos(iTime) * 3.);\n    vec3 dir;\n    float closest;\n    float t = 0.;\n    \n    for (int i = 0; i < MAX_STEPS && t < MAX_HIT; i++)\n    {\n       currpos = ro + rd * t;\n       closest = map(currpos);\n       \n       if (closest < MIN_HIT)\n       {\n           dir = normalize(currpos - lightpos);\n           return vec3(1., 1., 1.) * max(0.0, dot(currpos, dir)) * .5;\n       }\n       t += closest;\n    }\n    return vec3(0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0., 0., -6.);\n    vec3 rd = vec3(uv, 1.);\n\n    col = march(ro, rd);\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}