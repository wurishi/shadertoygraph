{"ver":"0.1","info":{"id":"X3GGzV","date":"1717874381","viewed":59,"name":" VGA Standard Signal","username":"BradyYT","description":"I did kinda steal the viperwave, but the effects is made by me","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["vga"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rgb2yiq(vec3 c){   \n\t\t\t\t\treturn vec3(\n\t\t\t\t\t\t(0.2989*c.x + 0.5959*c.y + 0.2115*c.z),\n\t\t\t\t\t\t(0.5870*c.x - 0.2744*c.y - 0.5229*c.z),\n\t\t\t\t\t\t(0.1140*c.x - 0.3216*c.y + 0.3114*c.z)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\tvec3 yiq2rgb(vec3 c){\t\t\t\t\n\t\t\t\t\treturn vec3(\n\t\t\t\t\t\t(\t 1.0*c.x +\t  1.0*c.y + \t1.0*c.z),\n\t\t\t\t\t\t( 0.956*c.x - 0.2720*c.y - 1.1060*c.z),\n\t\t\t\t\t\t(0.6210*c.x - 0.6474*c.y + 1.7046*c.z)\n\t\t\t\t\t);\n\t\t\t\t}\n        \n        vec2 Circle(float Start, float Points, float Point) \n{\n\tfloat Rad = (3.141592 * 2.0 * (1.0 / Points)) * (Point + Start);\n\t//return vec2(sin(Rad), cos(Rad));\n\t\treturn vec2(-(.3+Rad), cos(Rad));\n\n}\n\nvec3 Blur(vec2 uv, float f, float d){\n  //  d=abs(d);\n  float t = (sin(iTime*5.0+uv.y*5.0))/10.0;\n    float b = 1.0;\n   //t=sin(iTime*5.0+f)/10.0;\n    t=0.0;\n    vec2 PixelOffset=vec2(d+.0005*t,0);\n    \n    float Start = 2.0 / 14.0;\n    vec2 Scale = 0.66 * 4.0 * 2.0 * PixelOffset.xy;\n    \n    vec3 N0 = texture(iChannel0, uv + Circle(Start, 14.0, 0.0) * Scale).rgb;\n    vec3 N1 = texture(iChannel0, uv + Circle(Start, 14.0, 1.0) * Scale).rgb;\n    vec3 N2 = texture(iChannel0, uv + Circle(Start, 14.0, 2.0) * Scale).rgb;\n    vec3 N3 = texture(iChannel0, uv + Circle(Start, 14.0, 3.0) * Scale).rgb;\n    vec3 N4 = texture(iChannel0, uv + Circle(Start, 14.0, 4.0) * Scale).rgb;\n    vec3 N5 = texture(iChannel0, uv + Circle(Start, 14.0, 5.0) * Scale).rgb;\n    vec3 N6 = texture(iChannel0, uv + Circle(Start, 14.0, 6.0) * Scale).rgb;\n    vec3 N7 = texture(iChannel0, uv + Circle(Start, 14.0, 7.0) * Scale).rgb;\n    vec3 N8 = texture(iChannel0, uv + Circle(Start, 14.0, 8.0) * Scale).rgb;\n    vec3 N9 = texture(iChannel0, uv + Circle(Start, 14.0, 9.0) * Scale).rgb;\n    vec3 N10 = texture(iChannel0, uv + Circle(Start, 14.0, 10.0) * Scale).rgb;\n    vec3 N11 = texture(iChannel0, uv + Circle(Start, 14.0, 11.0) * Scale).rgb;\n    vec3 N12 = texture(iChannel0, uv + Circle(Start, 14.0, 12.0) * Scale).rgb;\n    vec3 N13 = texture(iChannel0, uv + Circle(Start, 14.0, 13.0) * Scale).rgb;\n    vec3 N14 = texture(iChannel0, uv).rgb;\n    \n    vec4 clr = texture(iChannel0, uv);\n    float W = 1.0 / 15.0;\n    \n    clr.rgb= \n\t\t(N0 * W) +\n\t\t(N1 * W) +\n\t\t(N2 * W) +\n\t\t(N3 * W) +\n\t\t(N4 * W) +\n\t\t(N5 * W) +\n\t\t(N6 * W) +\n\t\t(N7 * W) +\n\t\t(N8 * W) +\n\t\t(N9 * W) +\n\t\t(N10 * W) +\n\t\t(N11 * W) +\n\t\t(N12 * W) +\n\t\t(N13 * W) +\n    (N14 * W);\n    \n   \n    return  vec3(clr.xyz)*b;\n    }\n\n\n        \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // float d = (iResolution.x/500.0)/2.0-.1*iMouse.x/50.0;\n    float d = .1*iMouse.x/50.0;\n   // d=.1-round(mod(iTime/3.0,1.0))*.1;\n    \tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n\n    float s = (texture(iChannel1,fragCoord).r);// - texture(iChannel1,vec2(0.01+uv.y/1000.0,1.0)).r)*2.0;\n   \n        \n            float e = min(.30,pow(max(0.0,cos(uv.y*4.0+.3)-.75)*(s+0.5)*1.0,3.0))*25.0;\n     s-=pow(texture(iChannel1,vec2(0.01+(uv.y*32.0)/32.0,1.0)).r,1.0);\nuv.x+=e*abs(s*3.0);\n    float r = texture(iChannel2,vec2(mod(iTime*10.0,mod(iTime*10.0,256.0)*(1.0/256.0)),0.0)).r*(2.0*s);\n    uv.x+=abs(r*pow(min(.003,(uv.y-.15))*6.0,2.0));\n    \n    d=.051+abs(sin(s/4.0));\n    float c = max(0.0001,.002*d);\n\tvec2 uvo = uv;\n   // uv.x+=.1*d;\n    fragColor.xyz =Blur(uv,0.0,c+c*(uv.x));\n    float y = rgb2yiq(fragColor.xyz).r;\n    \n    \n    \n   uv.x+=.01*d;\n    c*=6.0;\n    fragColor.xyz =Blur(uv,.333,c);\n    // texture(iChannel0, uv);\n    float i = rgb2yiq(fragColor.xyz).g;\n    \n    \n    uv.x+=.005*d;\n    \n    c*=2.50;\n    fragColor.xyz =Blur(uv,.666,c);\n    float q = rgb2yiq(fragColor.xyz).b;\n    \n   \n    \n    fragColor.xyz=yiq2rgb(vec3(y,i,q))-pow(s+e*2.0,3.0);\n    fragColor.xyz*=smoothstep(1.0,.999,uv.x-.1);\n    \n   // fragColor.xyz-=min(0.10,pow(uv.x,3.0))*d;\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float jTime;\n\nfloat amp(vec2 p){\n    return smoothstep(1.,8.,abs(p.x));\n    \n}\nfloat pow512(float a){\n    a*=a;//^2\n    a*=a;//^4\n    a*=a;//^8\n    a*=a;//^16\n    a*=a;//^32\n    a*=a;//^64\n    a*=a;//^128\n    a*=a;//^256\n    return a*a;\n}\nfloat pow1d5(float a){\n    return a*sqrt(a);\n}\nfloat hash(vec2 uv){\n    float a = amp(uv);\n    float w = a>0.?(1.-.4*pow512(.51+.49*sin((.02*(uv.y+.5*uv.x)-jTime)*2.))):0.;\n    return a>0.?\n        a*pow1d5(texture(iChannel0,uv/iChannelResolution[0].xy).r)*w\n        :0.;\n}\n\nvec2 trinoise(vec2 uv){\n    const float sq = sqrt(3./2.);\n    uv.x *= sq;\n    uv.y -= .5*uv.x;\n    vec2 d = fract(uv);\n    uv -= d;\n    if(dot(d,vec2(1))<1.){\n        float n1 = hash(uv);\n        float n2 = hash(uv+vec2(1,0));\n        float n3 = hash(uv+vec2(0,1));\n        float nmid = mix(n2,n3,d.y);\n        float ng = mix(n1,n3,d.y);\n        float dx = d.x/(1.-d.y);\n        return vec2(mix(ng,nmid,dx),min(min((1.-dx)*(1.-d.y),d.x),d.y));\n\t}else{\n    \tfloat n2 = hash(uv+vec2(1,0));\n        float n3 = hash(uv+vec2(0,1));\n        float n4 = hash(uv+1.);\n        float nmid = mix(n2,n3,d.y);\n        float nd = mix(n2,n4,d.y);\n        float dx = (1.-d.x)/(d.y);\n        return vec2(mix(nd,nmid,dx),min(min((1.-dx)*d.y,1.-d.x),1.-d.y));\n\t}\n    return vec2(0);\n}\n\n\nvec2 map(vec3 p){\n    vec2 n = trinoise(p.xz);\n    return vec2(p.y-2.*n.x,n.y);\n}\n\nvec3 grad(vec3 p){\n    const vec2 e = vec2(.005,0);\n    float a =map(p).x;\n    return vec3(map(p+e.xyy).x-a\n                ,map(p+e.yxy).x-a\n                ,map(p+e.yyx).x-a);\n\n}\n\nvec2 intersect(vec3 ro,vec3 rd){\n    float d =0.,h=0.;\n    for(int i = 0;i<500;i++){\n        vec3 p = ro+d*rd;\n        vec2 s = map(p);\n        h = s.x;\n        d+= h*.5;\n        if(abs(h)<.003*d)\n            return vec2(d,s.y);\n        if(d>150.|| p.y>2.) break;\n    }\n    \n    return vec2(-1);\n}\n\n\nvec3 sun(vec3 rd,vec3 ld,vec3 base){\n    \n\tfloat sun = smoothstep(.21,.2,distance(rd,ld));\n    \n    if(sun>0.){\n        float yd = (rd.y-ld.y);\n\n        float a =sin(3.1*exp(-(yd)*14.)); \n\n        sun*=smoothstep(-.8,0.,a);\n\n        base = mix(base,vec3(1.,.8,.4)*.75,sun);\n    }\n    return base;\n}\nvec3 gsky(vec3 rd,vec3 ld,bool mask){\n    float haze = exp2(-5.*(abs(rd.y)-.2*dot(rd,ld)));\n    float st = mask?pow512(texture(iChannel0,(rd.xy+vec2(300.1,100)*rd.z)*10.).r)*(1.-min(haze,1.)):0.;\n    vec3 col=clamp(mix(vec3(.4,.1,.7),vec3(.7,.1,.4),haze)+st,0.,1.);\n    return mask?sun(rd,ld,col):col;\n   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor=vec4(0);\n    #ifdef AA\n    for(float x = 0.;x<1.;x+=1./float(AA)){\n    for(float y = 0.;y<1.;y+=1./float(AA)){\n    #else\n        const float AA=1.,x=0.,y=0.;\n    #endif\n    vec2 uv = (2.*(fragCoord+vec2(x,y))-iResolution.xy)/iResolution.x;\n\t\n    float dt = fract(texture(iChannel0,float(AA)*(fragCoord+vec2(x,y))/iChannelResolution[0].xy).r+iTime);\n    jTime = iTime-dt*iTimeDelta*(.5+mod(floor(fragCoord.y),2.));\n    vec3 ro = vec3(0.,1,(-2000.+jTime)*10.);\n    vec3 rd = normalize(vec3(uv,.75));//vec3(uv,sqrt(1.-dot(uv,uv)));\n    \n    vec2 i = intersect(ro,rd);\n    float d = i.x;\n    \n    vec3 ld = normalize(vec3(0,.125+.05*sin(.1*jTime),1));\n\n    float fog = d>0.?exp2(-d*.14):0.;\n    vec3 sky = gsky(rd,ld,d<0.);\n    \n    vec3 p = ro+d*rd;\n    vec3 n = normalize(grad(p));\n    \n    float diff = dot(n,ld)+.1*n.y;\n    vec3 col = vec3(.1,.11,.18)*diff;\n    \n    vec3 rfd = reflect(rd,n); \n    vec3 rfcol = gsky(rfd,ld,true);\n    \n    col = mix(col,rfcol,.05+.95*pow(max(1.+dot(rd,n),0.),5.));\n    #ifdef VAPORWAVE\n    col = mix(col,vec3(.4,.5,1.),smoothstep(.05,.0,i.y));\n    col = mix(sky,col,fog);\n    col = sqrt(col);\n    #else\n    col = mix(col,vec3(.8,.1,.92),smoothstep(.05,.0,i.y));\n    col = mix(sky,col,fog);\n    //no gamma for that old cg look\n    #endif\n    fragColor += vec4(clamp(col,0.,1.),1.);\n     #ifdef AA\n    }\n    }\n    fragColor/=float(AA*AA);\n    #endif\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float Noise21 (vec2 p, float ta, float tb) {\n    return fract(sin(p.x*ta+p.y*tb)*5678.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float t = iTime+123.; // tweak the start moment\n    float ta = t*.654321;\n    float tb = t*(ta*.123456);\n    \n    float c = Noise21(uv, ta, tb);\n    vec3 col = vec3(c);\n\n    fragColor = vec4(col,1.);\n}","name":"Buffer B","description":"","type":"buffer"}]}