{"ver":"0.1","info":{"id":"sdl3Ds","date":"1616774508","viewed":127,"name":"Alien Eyes","username":"Shapkofil","description":"Something I made while playing around with hexagon tiling. ","likes":6,"published":1,"flags":64,"usePreview":0,"tags":["alieneyeeyes2danimationsoundcloud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ltlSWN","filepath":"https://soundcloud.com/user-735274416/alien-eyes","previewfilepath":"https://soundcloud.com/user-735274416/alien-eyes","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdParabola( in vec2 pos, in float k )\n{\n    pos.x = abs(pos.x);\n    float ik = 1.0/k;\n    float p = ik*(pos.y - 0.5*ik)/3.0;\n    float q = 0.25*ik*ik*pos.x;\n    float h = q*q - p*p*p;\n    float r = sqrt(abs(h));\n    float x = (h>0.0) ?\n        pow(q+r,1.0/3.0) - pow(abs(q-r),1.0/3.0)*sign(r-q) :\n        2.0*cos(atan(r,q)/3.0)*sqrt(p);\n    return length(pos-vec2(x,k*x*x)) * sign(pos.x-x);\n}\n\nfloat cdHex(vec2 pos){\n    vec2 p = abs(pos);\n    float c = dot(p, normalize(vec2(1,1.73)));\n\n    return max(c,p.x);\n}\n\nvec4 HexTile(vec2 p){\n    vec2 rate = vec2(1,1.73);\n    vec2 hrate = .5*rate;\n    vec2 a = mod(p, rate) - hrate;\n    vec2 b = mod(p - hrate, rate) - hrate;\n\n    vec2 gv = length(a)<length(b)?a:b;\n\n    vec2 id = 2.0*(p - gv);\n    return vec4(gv,id);\n}\n\nfloat cubicPulse( float c, float w, float x )\n{\n    x = mod(x, 2.0*c);\n    x = abs(x - c);\n    if( x>w ) return 0.0;\n    x /= w;\n    return 1.0 - x*x*(3.0-2.0*x);\n}\n\nfloat saw(float x){\n    return int(floor(x))%2==0?fract(x):1.0-fract(x);\n}\n\nfloat bquant(float bl, vec4 bond){\n    return smoothstep(bond.x, bond.y, bl) - smoothstep(bond.z, bond.w, bl);\n}\n\nfloat blink(float x){\n    float bl = min(mod(iTime,x), 1.0);\n    return 1.0 - bquant(bl, vec4(0.0, .2, .28, .4));\n}\n\nfloat hash21(vec2 p){\n    //return fract( sin(p.x*184.0 + p.y*425.)*532. );\n    return length(p);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    p *= 1.75;\n\n    vec3 col = vec3(0.0);\n\n    vec4 hc = HexTile(p.yx);\n\n    vec2 pey = 4.0*hc.yx;\n    vec2 rad = vec2(.5*atan(hc.w+0.01, hc.z)/3.1415 + .5, 1.0/(length(hc.wz) + 1.0));\n    //pey = p;\n\n    pey.y = abs(pey.y);\n    float bl = min(blink(5.0 + 2.0*hash21(rad)),blink(13.0)) + 0.025*cos(iTime+hash21(0.01*hc.wz));\n    bl *= smoothstep(.05, .1, cubicPulse(1.0, pow(rad.x/16.0 + rad.y, .5), .05*iTime));\n    float sr = smoothstep(.55, 1.0, fract(.5*.05*iTime));\n    float sdEye = sdParabola(pey, -clamp(bl*bl, 0.06, 1.0)) - bl + 0.06;\n    col += smoothstep(0.015, 0.025, abs(sdEye));\n\n    float dt = floor(iTime*.8 + fract(iTime)*1.5*sr);\n    float ft = fract(iTime*.8 + fract(iTime)*1.5*sr);\n    vec2 da0 = sin(1.7*(dt+0.0)) + sin(2.3*(dt+0.0)+vec2(1.0,2.0));\n    vec2 da1 = sin(1.7*(dt+1.0)) + sin(2.3*(dt+1.0)+vec2(1.0,2.0));\n    vec2 da = mix(da0,da1,smoothstep(0.95,1.0,ft));\n    float shd = fract(.5*.05*iTime);\n    da = mix(da, vec2(0), smoothstep(.848, .85, shd));\n    col = min(col, smoothstep(-0.01, 0.0, max(length(2.0*hc.xy - .2*da) -\n                                              .3 - .5*smoothstep(.895, .9, shd),\n                                              sdEye)));\n    //col -= smoothstep(.05, .06, hc.y * (hc.z*sin(2.0*iTime) + hc.w*sin(3.0*iTime)));\n\n    fragColor = vec4(1.0-col , 1.0);\n}\n","name":"Image","description":"","type":"image"}]}