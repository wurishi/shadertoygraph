{"ver":"0.1","info":{"id":"tllXWN","date":"1563072259","viewed":231,"name":"waterly digital clock","username":"takumifukasawa","description":"all refs\niq: https://www.shadertoy.com/view/ldsyz4\nP_Malin: https://www.shadertoy.com/view/4sf3RN\nthe book of shaders: https://thebookofshaders.com/13/","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["noise","fbm","clock","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//------------------------------------------------------------------------------\n// refs.\n// the book of shaders: https://thebookofshaders.com/13/\n//------------------------------------------------------------------------------\n\n// Get random value\nfloat random(in vec2 st)\n{\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 4\nfloat fbm(in vec2 st) {\n  float value = 0.;\n  float amp = .55;\n  float freq = 0.;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += amp * noise(st);\n    st *= 6.2;\n    amp *= .2;\n  }\n  return value;\n}\n\nfloat pattern(in vec2 p) {\n  return fbm(p * 4. + iTime);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec4 color = texture(iChannel0, uv + pattern(uv) * .12);\n    \n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//--------------------------------------------------------------------------\n// refs.\n// iq: https://www.shadertoy.com/view/ldsyz4\n// P_Malin: https://www.shadertoy.com/view/4sf3RN\n//--------------------------------------------------------------------------\n\nconst int[] font = int[](0x75557, 0x22222, 0x74717, 0x74747, 0x11574, 0x71747, 0x71757, 0x74444, 0x75757, 0x75747);\nconst int[] powers = int[](1, 10, 100, 1000, 10000, 100000, 1000000);\n\nint PrintInt(in vec2 uv, in float value, const int maxDigits) {\n    if(abs(uv.y - .5) < .5) {\n        int iu = int(floor(uv.x));\n        if(iu >= 0 && iu < maxDigits) {\n            int n = (int(value) / powers[maxDigits - iu - 1]) % 10;\n            uv.x = fract(uv.x); //(uv.x-float(iu)); \n            ivec2 p = ivec2(floor(uv * vec2(4. ,5.)));\n            return (font[n] >> (p.x + p.y * 4)) & 1;\n        }\n    }\n    return 0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 p = vec2(fragCoord.xy - iResolution.xy * .5) / min(iResolution.x, iResolution.y);\n    p *= 3.8; // scale\n    \n    float h = .48; // height\n    float m = 2.; // margin\n    float b = 2.7; // begin pos x\n    \n    int hours = PrintInt(p + vec2(b, h), mod(iDate.w / (60. * 60.), 12.), 2);\n    int minutes = PrintInt(p + vec2(b - m * 1., h), mod(iDate.w / 60., 60.), 2);\n    int seconds = PrintInt(p + vec2(b - m * 2., h), mod(iDate.w, 60.), 2);\n\n    vec3 clockColor = vec3(hours + minutes + seconds);\n\n    // grid\n    vec2 pg = mod(p, 1.);\n    float gx = smoothstep(0., .05, pg.x) * smoothstep(.1, .05, pg.x);\n    float gy = smoothstep(0., .05, pg.y) * smoothstep(.1, .05, pg.y);\n    float g = clamp(gx + gy, 0., 1.);\n    // show grid\n    // fragColor = vec4(col + g, 1.0);\n    \n    vec4 buf = texture(iChannel0, uv);\n    \n    vec4 color = mix(buf, vec4(clockColor, 1.), .14);\n    \n    fragColor = color;    \n}","name":"Buffer A","description":"","type":"buffer"}]}