{"ver":"0.1","info":{"id":"md2yDd","date":"1700557889","viewed":23,"name":"Subliminal Blanks","username":"brainsandwich","description":"WIP\nPrimitive shapes flicker in and out of existence ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","flashing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdStar5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n#define PRIM_BOX     0\n#define PRIM_CIRCLE  1\n// #define PRIM_SEG     2\n#define PRIM_STAR    2\n#define PRIM_TRI     3\n\nfloat sdPrim(in vec2 p, in int prim, in vec4 args)\n{\n    switch (prim)\n    {\n        case PRIM_BOX: return sdBox(p, args.xy);\n        case PRIM_CIRCLE: return sdCircle(p, args.x);\n        // case PRIM_SEG: return sdSegment(p, args.xy, args.zw);\n        case PRIM_STAR: return sdStar5(p, args.x, args.y);\n        case PRIM_TRI: return sdEquilateralTriangle(p, args.x);\n        default:\n            break;\n    }\n    return 0.0;\n}\n\nvec3 cpal[] = vec3[](\n    vec3(0.0, 0.0, 0.0),\n    vec3(0.4, 1.0, 0.1),\n    vec3(1.0, 0.1, 0.4),\n    vec3(0.4, 0.1, 1.0),\n    vec3(1.0, 0.5, 0.1),\n    vec3(1.0, 1.0, 1.0)\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord/iResolution.xy) - 1.0;\n    uv.x *= float(iResolution.x)/float(iResolution.y);\n    \n    int m1 = iFrame % 43;\n    int m2 = (iFrame + 1) % 43;\n    int m3 = iFrame % 35;\n    int m4 = (iFrame + 1) % 35;\n    if ((m1 * m2 * m3 * m4) > 0)\n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    } else {\n        int cpi = int(floor(iTime*8.0)) % 6;\n        int cpb = (int(floor(iTime*8.0)) + 3) % 6;\n        int cpp = int(floor(iTime*8.0)) % 4;\n        float fac = step(0.0, sdPrim(uv, cpp, vec4(0.5, 0.5, 0.0, 0.0)));\n        vec3 col = mix(cpal[cpb], cpal[cpi], fac);\n\n        // Output to screen\n        fragColor = vec4(col,1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}