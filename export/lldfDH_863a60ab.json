{"ver":"0.1","info":{"id":"lldfDH","date":"1539595790","viewed":350,"name":"Ripple Medium Simulation","username":"Toster","description":"Red channel in buffer is current height of medium(or density idk)\nGreen one is previous state of medium (so that we know the direction)\nBlue one are custom obstacles for the waves\n\nYou can use code as you want Just add \"Toster\" to the credits;","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["simulation","water","ripple","wodawgrach"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy/(iResolution.xy);\n\n    fragColor = vec4(texture(iChannel0, q).r,texture(iChannel0, q).r,texture(iChannel0, q).r+texture(iChannel0, q).b,1.);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define depth 25.\n#define velPropagation 1.2\n#define dampening .98\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 pixelToUV = vec2(velPropagation)/(iResolution.xy);\n   vec3 e = vec3(pixelToUV,0.);\n   vec2 q = fragCoord.xy/iResolution.xy;\n\n   vec4 c = texture(iChannel0, q);\n   \n   float p11 = c.y;\n   \n   //getting adjacent pixels\n   float p10 = texture(iChannel0, q-e.zy).x;\n   float p01 = texture(iChannel0, q-e.xz).x;\n    \n   float p21 = texture(iChannel0, q+e.xz).x;\n   float p12 = texture(iChannel0, q+e.zy).x;\n    \n   //propagation\n   float d = ((p10 + p01 + p21 + p12 - 2.) - (p11-.5)*2.);\n   \n    if (iMouse.z > 0.) \n   {\n      // Mouse interaction:\n      d+= 1.;\n      d *= smoothstep(.1,depth,length(iMouse.xy - fragCoord.xy));\n      d-= 1.;\n \n   }\n   d *= dampening; // dampening\n   d = d*.5 + .5;\n   \n   // Put previous state as \"y\":\n   fragColor = vec4(d, c.x, c.z, 0);\n    if(c.z != 0.){\n      fragColor = vec4(0.5, 0.5, c.z, 0);\n    }\n    // clear the buffer and draw obstacles at iFrame < 2\n    if(iFrame < 2){\n        fragColor = vec4(.5,.5,0.,0.);\n        \n        //draw obstacles\n        if(fragCoord.x > 150. && fragCoord.x < 160. && fragCoord.y < 100.){\n        \tfragColor += vec4(0.,0.,1.,0.);\n        }\n        if(fragCoord.x > 150. && fragCoord.x < 160. && fragCoord.y > 120. && fragCoord.y < 150.){\n        \tfragColor += vec4(0.,0.,1.,0.);\n        }\n\n        if(fragCoord.y > 170. && fragCoord.y < 180. && fragCoord.x < 190.){\n        \tfragColor += vec4(0.,0.,1.,0.);\n        }\n        if(fragCoord.y > 170. && fragCoord.y < 180. && fragCoord.x > 210. && fragCoord.x < 230.){\n        \tfragColor += vec4(0.,0.,1.,0.);\n        }\n        if(fragCoord.y > 170. && fragCoord.y < 180. && fragCoord.x > 250.){\n        \tfragColor += vec4(0.,0.,1.,0.);\n        }\n        \n        if((fragCoord.x + ((fragCoord.y-80.)*(fragCoord.y-80.))/100.) > 500. && fragCoord.y < 180.){\n            fragColor += vec4(0.,0.,1.,0.);\n        }\n   }\n}","name":"Buffer A","description":"","type":"buffer"}]}