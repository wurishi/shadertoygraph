{"ver":"0.1","info":{"id":"lfBBR3","date":"1725251505","viewed":32,"name":"Pentagon tiling 06","username":"shadertoyjiang","description":"Animations are displayed when the mouse is on the left side of the canvas.\n\n[url=https://www.shadertoy.com/view/lcSfW1]Pentagonal radial tiling[/url]","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["tiling","pentagonal"],"hasliked":0,"parentid":"4fjfRG","parentname":"Pentagon tiling 05"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2024年9月2日\n// 第6个\n// 这个图形是唯一的，只有这一种尺寸比例。\n\n// 此图形推导借鉴：https://www.mathartroom.com/wallpaper/pentagon_tiling/type14/\n//         所有：https://www.mathartroom.com/wallpaper/pentagon_tiling/\n\nfloat dln(in vec2 a, in vec2 b, in vec2 p) {\n        b -= a;\n        p -= a;\n        float h = clamp(dot(p, b) / dot(b, b), 0., 1.);\n        return length(p - b * h);\n}\n\nvec2 frctE(vec2 po, vec2 pa, vec2 pb, vec2 p) {\n        float e = po.x, f = po.y,\n                a = pa.x - e, b = pa.y - f,\n                c = pb.x - e, d = pb.y - f,\n                g = a * d - b * c;\n        mat3 Mrst = mat3(pa - po, 0, pb - po, 0, po, 1);  // mat3(a,b,0,c,d,0,e,f,1);\n        mat3 Mdef = mat3(d, -b, 0, -c, a, 0, c * f - d * e, b * e - a * f, g) / g;\n        p = (Mdef * vec3(p, 1)).xy;\n        p = fract(p);\n        p = (Mrst * vec3(p, 1)).xy;\n        return p;\n}\n\nvoid mainImage(out vec4 O, vec2 U) {\n        O = vec4(.5);\n        vec2 R = iResolution.xy,\n                u = 8. * (U + U - R) / R.y,\n                ms = 8. * (2. * iMouse.xy - R) / R.y;\n        float r = 1., rr = r + r,\n                sf = (sqrt(57.) - 3.) / 8.,\n                cf = sqrt(1. - sf * sf),\n                cs = 1. - 2. * sf * sf,\n                sn = sqrt(1. - cs * cs),\n                ht = r + rr * cs,\n                wd = rr * sn + rr * cf;\n                \n        vec2 a = vec2(0),\n                b = vec2(0, r),\n                c = vec2(rr * sn, ht),\n                d = vec2(wd, r * sf),\n                e = vec2(wd - r * cf, 0),\n                f = d + e,\n                g = f + b,\n                h = f + c * vec2(-1, 1),\n                i = (c + d) * .5,\n                j = h + vec2(0, rr),\n                k = c + normalize(abs(d - c).yx) * e.x,\n                l = h + vec2(0, r),\n                m = l + e,\n                n = (b + c) * .5,\n                o = n + vec2(0, rr),\n                ct = (d + e) * .5;\n                \n        vec2 po = (b + c) * .5,\n                pa = po + j - b,\n                pb = vec2(c.x, -c.y - rr),\n                p = frctE(po, pa, pb, u);               \n        if (p.y < ct.y) p = ct + ct - p; // 中心对称\n        \n        float dist = 1e8;\n        dist = min(dist, dln(b, c, p));\n        dist = min(dist, dln(c, d, p));\n        dist = min(dist, dln(d, e, p));\n        dist = min(dist, dln(c, k, p));\n        dist = min(dist, dln(i, h, p));\n        dist = min(dist, dln(d, f, p));\n        dist = min(dist, dln(g, h, p));\n        dist = min(dist, dln(h, j, p));\n        dist = min(dist, dln(l, m, p));\n        dist = min(dist, dln(o, n, p));\n        dist = min(dist, dln(k, k + (j - k) * 3., p));\n        // 下面这三行非必要\n        dist = min(dist, dln(a, b, p));\n        dist = min(dist, dln(a, e, p));\n        dist = min(dist, dln(g, f + f - g, p));\n        O = vec4(.8 - .01 / dist);\n}\n\n","name":"Image","description":"","type":"image"}]}