{"ver":"0.1","info":{"id":"lcVyD1","date":"1731829210","viewed":141,"name":"Reflected Fireworks","username":"Nekodigi","description":"The afterglow dissolves into the water. Inspired by The Bund in Shanghai.","likes":8,"published":3,"flags":0,"usePreview":0,"tags":["reflection","water","night","fireworks","dark"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//* Feedback\n//! We can see refraction within water.\n//? There shouldn't be firework in the water.\n\n\n//* References\n//Firework : Rainbow Showoff(https://www.shadertoy.com/view/lscBRf)\n//Water : Cheap Water(https://www.shadertoy.com/view/MdfXzS)0\n\n\n\n#define FALLING_SPEED  0.02\n#define STRIPES_FACTOR 10.0\n#define PI \t\t\t3.14159265359\n\n#define FOV \t\t60.0\n#define EPSILON\t\t0.001\n#define MAX_STEPS\t1000\n#define MAX_DIST\t1000.0\n\n#define PLANE\t\tvec4 (0.0, 1.0, 0.0, 1.0)\n#define BOTTOM\t\tvec4 (0.0, 1.0, 0.0, 4.0)\n\nvec4 texture3D (sampler2D tex, vec3 pt, vec3 pn, float scale) {\n\treturn \n\t\ttexture (tex, pt.xy/scale) * abs (pn.z) +\n\t\ttexture (tex, pt.xz/scale) * abs (pn.y) +\n\t\ttexture (tex, pt.zy/scale) * abs (pn.x);\n}\n\nmat3 rotate_x (float fi) {\n\tfloat cfi = cos (fi);\n\tfloat sfi = sin (fi);\n\treturn mat3 (\n\t\t1.0, 0.0, 0.0,\n\t\t0.0, cfi, -sfi,\n\t\t0.0, sfi, cfi);\n}\n\nmat3 rotate_y (float fi) {\n\tfloat cfi = cos (fi);\n\tfloat sfi = sin (fi);\n\treturn mat3 (\n\t\tcfi, 0.0, sfi,\n\t\t0.0, 1.0, 0.0,\n\t\t-sfi, 0.0, cfi);\n}\n\nmat3 rotate_z (float fi) {\n\tfloat cfi = cos (fi);\n\tfloat sfi = sin (fi);\n\treturn mat3 (\n\t\tcfi, -sfi, 0.0,\n\t\tsfi, cfi, 0.0,\n\t\t0.0, 0.0, 1.0);\n}\n\nvec4 noise3v (vec2 p) {\n\treturn texture (iChannel3, p);\n}\n\nvec4 fbm3v (vec2 p) {\n\tvec4 f = vec4 (0.0);\n\tf += (vec4 (0.5000) * noise3v (p)); p *= vec2 (2.01);\n\tf += (vec4 (0.2500) * noise3v (p)); p *= vec2 (2.02);\n\tf += (vec4 (0.1250) * noise3v (p)); p *= vec2 (2.03);\n\tf += (vec4 (0.0625) * noise3v (p)); p *= vec2 (2.04);\n\tf /= vec4 (0.9375);\n\treturn f;\n}\n\nfloat dplane (vec3 pt, vec4 pl) {\n\treturn dot (pl.xyz, pt) + pl.w;\n}\t\n\nfloat map (vec3 pt) {\n\treturn dplane (pt, PLANE);\n}\n\nfloat march (vec3 ro, vec3 rd) {\n\tfloat t = 0.0;\n\tfloat d = 0.0;\n\tvec3 pt = vec3 (0.0);\n\tfor (int i = 0; i < MAX_STEPS; ++i) {\n\t\tpt = ro + rd * t;\n\t\td = map (pt); \n\t\tif (d < EPSILON || t + d >= MAX_DIST) {\t\t\t\n\t\t\tbreak;\n\t\t}\n\t\tt += d;\n\t}\n\t\n\treturn d <= EPSILON ? t : MAX_DIST;\n}\n\nfloat fresnel_step (vec3 I, vec3 N, vec3 f) {\n\treturn clamp (f.x + f.y * pow (1.0 + dot (I, N), f.z), 0.0, 1.0);\n}\n\n//get sphere\nfloat sphere(vec2 coord, vec2 pos, float r) {\n    vec2 d = pos - coord; \n    return smoothstep(60.0, 0.0, dot(d, d) - r * r);\n}\n\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec4 rainbow_tex( in vec2 fragCoord )\n{\n    //normalize pixel coordinates\n    vec2 uv         = fragCoord / iResolution.xy;\n    //pixellize uv\n    vec2 clamped_uv = (round(fragCoord / STRIPES_FACTOR) * STRIPES_FACTOR) / iResolution.xy;\n    //get pseudo-random value for stripe height\n    float value\t\t= fract(sin(clamped_uv.x) * 43758.5453123);\n    //create stripes\n    vec3 col        = vec3(0.1 - mod(uv.y * 0.5 + (iTime * (FALLING_SPEED + value / 20.0)) + value, 0.5));\n   col *= 10.;\n\t col -= texture(iChannel3, uv*5.).x * 0.2;\n\t col *= (value + 0.5);\n\t col *= hsv2rgb(vec3(value*0.1+0.02, 1.0, 1.0));\n\n\t\t//add color\n         //col       *= clamp(cos(iTime * 2.0 + uv.xyx + vec3(0, 2, 4)), 0.0, 1.0);\n    // //add glowing ends\n    // \t col \t   += vec3(sphere(fragCoord, \n    //                               vec2(clamped_uv.x, (1.0 - 2.0 * mod((iTime * (FALLING_SPEED + value / 5.0)) + value, 0.5))) * iResolution.xy, \n    //                               0.9)) / 2.0; \n    //add screen fade\n         col       *= vec3(exp(-pow(abs(uv.y - 0.5), 6.0) / pow(2.0 * 0.05, 2.0)));\n    // Output to screen\n    return vec4(col,1.0);\n}\n\nvec4 skybox (vec3 n) {\n\tn *= 1.;\n\tfloat lim = 0.6;//The value -0.1 can be improved\n\tif(n.y > lim || n.z > lim || n.y < -0.1 || n.z < -lim) return vec4(0.);\n\treturn rainbow_tex((n.zy+vec2(0.5))*iResolution.xy);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = (2.0*fragCoord.xy - iResolution.xy)/min (iResolution.x, iResolution.y) * tan (radians (FOV)/2.0);\n\tvec3 up = vec3 (0.0, 1.0, 0.0) ;\t\t\t// up \n\tvec3 fw = vec3 (1.0, 0.0, 0.0);\t\t\t// forward\n\tvec3 lf = cross (up, fw); \t\t\t\t\t// left\n\t\n\tvec3 ro = -fw * 5.0 + vec3 (0.0, 5.0, 0.0); // ray origin\n\tvec3 rd = normalize (uv.x * lf + uv.y * up + fw) ; \t\t// ray direction\n\t\n\tfloat t = march (ro, rd);\n\t//vec4 cm = texture (iChannel0, rd);\n\tvec4 cm = skybox ( rd);\n\tvec3 pt = rd*t + ro;\n\tvec3 pn = PLANE.xyz;\n\tvec3 dv = fbm3v (pt.xz/512.0+iTime/512.0).xyz-0.5;\n\tpn = normalize (pn + dv*0.2);\n\tvec3 rfl = reflect (rd, pn);\n\tfloat fs = fresnel_step (rd, pn, vec3 (0.0, 3.0, 6.0));\n\tvec4 c0 = skybox ( rfl);\n\tvec4 c1 = skybox ( normalize (rd+dv*0.1));\n\n\tfragColor = mix (mix (\n\t\tc0,\n\t\tc1,\t\t\t\n\t\t1.0 - fs), cm, smoothstep (80.0, 160.0, t));\n\t\n}\t\t","name":"Image","description":"","type":"image"}]}