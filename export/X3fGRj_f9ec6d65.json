{"ver":"0.1","info":{"id":"X3fGRj","date":"1707831747","viewed":76,"name":"Serious-looking human face","username":"Zalaxci","description":"A very serious human","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["face","skin","anime","human"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2D Random\nfloat random(in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat lineSDF(vec2 variablePoint, vec3 line) {\n    return dot(vec3(variablePoint, 1), line) / length(vec2(line));\n}\nfloat faceSDF(vec2 normalizedCoord) {\n    vec2 absPosFromCenter = abs(normalizedCoord - vec2(2.5, 1.5));\n    vec2 scaledPos = absPosFromCenter * vec2(0.9, 1.1);\n    float a2 = pow(scaledPos.x - scaledPos.y, 2.0);\n    float b = scaledPos.x + scaledPos.y;\n    return (0.6 * a2 + b - 1.5) / sqrt(2.0 * a2 + 2.0);\n}\nfloat eyeSDF(vec2 normalizedCoord, vec2 center, out vec2 scaledPos) {\n    vec2 posFromCenter = normalizedCoord - center;\n    scaledPos = posFromCenter * vec2(1.4, 1.0);\n    float ellipseApproximateSD = length(scaledPos) - 0.25;\n    float lineSD = lineSDF(posFromCenter, vec3(1.5, 4.0, -0.7));\n    return max(ellipseApproximateSD, lineSD);\n}\nfloat mouthSDF(vec2 normalizedCoord) {\n    return max(\n        abs(normalizedCoord.x - 2.4) - 0.23,\n        abs(lineSDF(normalizedCoord, vec3(1.0, -5.0, 2.0))) - 0.04 * (3.0 - normalizedCoord.x)\n    );\n}\nfloat noseSDF(vec2 normalizedCoord) {\n    vec2 posFromNostrils = normalizedCoord - vec2(2.5, 1.15),\n         posFromNoseCenter = normalizedCoord - vec2(2.5, 1.3);\n    float noseLineSD = posFromNostrils.x + 0.2 * pow(10.0, -pow(3.0 * posFromNostrils.y, 2.0));\n    return max(\n        abs(noseLineSD) - 0.025,\n        abs(posFromNoseCenter.y) - 0.2\n    );\n}\n\nfloat getTextureNoise(vec2 normalizedCoord) {\n    vec4 textureColor = texture(iChannel0, normalizedCoord);\n    return (textureColor.r + textureColor.g + textureColor.b) / 3.0;\n}\nvec4 skinTexture(vec2 normalizedCoord) {\n    float pxNoise = getTextureNoise(normalizedCoord),\n          leftPxNoise = getTextureNoise(normalizedCoord + vec2(-0.2, 0.0)),\n          rightPxNoise = getTextureNoise(normalizedCoord + vec2(0.2, 0.0)),\n          topPxNoise = getTextureNoise(normalizedCoord + vec2(0.0, -0.2)),\n          bottomPxNoise = getTextureNoise(normalizedCoord + vec2(0.0, 0.2));\n    float brightness = 0.85 + pxNoise/20.0 + (leftPxNoise + rightPxNoise + topPxNoise + bottomPxNoise)/40.0;\n    return brightness * vec4(0.93, 0.79, 0.66, 0.0);\n}\nvec4 eyeTexture(vec2 posFromCenter, vec2 normalizedMouse) {\n    float irisLeftDisplacement = pow(min(normalizedMouse.x - 1.9, 0.0), 2.0), // Αν ο κέρσορας είναι αριστερά\n          irisRightDisplacement = pow(max(normalizedMouse.x - 2.95, 0.0), 2.0), // Αν ο κέρσορας είναι δεξιά\n          irisHorizontalDispl = 0.01939 * (irisRightDisplacement - irisLeftDisplacement),\n          irisVerticalDispl = 0.07 * (normalizedMouse.y / 1.55 - 1.0) * abs(normalizedMouse.y / 1.55 - 1.0);\n    vec2 posFromPupilCenter = posFromCenter - vec2(irisHorizontalDispl, irisVerticalDispl);\n    float distanceFromPupilCenter = length(posFromPupilCenter);\n    if (\n        distanceFromPupilCenter <= 0.09 && lineSDF(posFromPupilCenter, vec3(0.5, 4.0, -0.30)) <= 0.0\n    ) return vec4(3.0 * distanceFromPupilCenter);\n    float smoothlyRadiatingDarkness = pow(2.0, -90.0 * dot(posFromPupilCenter, posFromPupilCenter)) / 1.5;\n    float totalDarkness = noise(35.0 * posFromPupilCenter) / 15.0 + smoothlyRadiatingDarkness;\n    return vec4(vec3(1.0) - vec3(totalDarkness, 0.3 * totalDarkness, totalDarkness), 0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 normalizedCoord = vec2(5.0, 3.0) * fragCoord / iResolution.xy;\n    if (mouthSDF(normalizedCoord) <= 0.0) {\n        fragColor = vec4(0.1, 0.1, 0.1, 0.0);\n        return;\n    }\n    if (noseSDF(normalizedCoord) <= 0.0) {\n        fragColor = vec4(0.1, 0.1, 0.1, 0.0);\n        return;\n    }\n    vec2 leftEyeScaledPos, rightEyeScaledPos;\n    vec2 normalizedMouse = vec2(5.0, 3.0) * iMouse.xy / iResolution.xy;\n    if (eyeSDF(normalizedCoord, vec2(1.9, 1.55), leftEyeScaledPos) <= 0.0) {\n        fragColor = eyeTexture(leftEyeScaledPos, normalizedMouse);\n        return;\n    }\n    if (eyeSDF(normalizedCoord, vec2(2.95, 1.55), rightEyeScaledPos) <= 0.0) {\n        fragColor = eyeTexture(rightEyeScaledPos, normalizedMouse);\n        return;\n    }\n    float distToFaceEdge = faceSDF(normalizedCoord);\n    if (distToFaceEdge <= 0.0) {\n        fragColor = skinTexture(normalizedCoord);\n        return;\n    }\n    fragColor = vec4(vec3(1.0 - 0.2 * pow(10.0, -distToFaceEdge)), 0.0);\n}","name":"Image","description":"","type":"image"}]}