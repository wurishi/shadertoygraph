{"ver":"0.1","info":{"id":"4tjSW3","date":"1446906548","viewed":1331,"name":"look who's there !","username":"FabriceNeyret2","description":"A very compact algorithm to draw 3D characters. \n:-D\n","likes":14,"published":3,"flags":0,"usePreview":0,"tags":["texture","short"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"vec4 tex(vec3 V, float d, out float s) {\n    s = step(abs(V.x+=d),.61);\n    V.z *= 6.*sign(d);\n    return 3.* max(texture(iChannel0,V)*s-.2, 0.);\n}\n\nvoid mainImage( out vec4 o, vec2 U )\n{\n    vec3 V = vec3(2.*U/iResolution.y-1.,1) - vec3(.8,-1.8,0);\n    float u = .85,  s1, s2;\n    o  = tex(V,-u, s1)+ tex(V, u, s2)  + (1.-s1-s2)*.82;\n    \n \tV -= o.x * .03*sin(2.*iTime+vec3(0,1.6,1));      // comment for still image\n    o  = tex(V,-u, s1)+ tex(V, u, s2)  + (1.-s1-s2)*.82;   //\n    \n}","name":"","description":"","type":"image"}]}