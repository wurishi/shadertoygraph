{"ver":"0.1","info":{"id":"lfjfDR","date":"1724830213","viewed":36,"name":"Edge_detection_f","username":"kyuuaditya","description":"good edge detection.","likes":0,"published":1,"flags":34,"usePreview":0,"tags":["edge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const mat3 dX = mat3(\n    -0.8, 0, 0.8,\n    -0.8, 0, 0.8,\n    -0.8, 0, 0.8\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 X = vec2(1., 0.) / iResolution.x;\n    vec2 Y = vec2(0., 1.) / iResolution.y;\n    \n    mat3 imageMat = mat3(\n        length(texture(iChannel0, uv - X + Y)),\n        length(texture(iChannel0, uv + Y)),\n        length(texture(iChannel0, uv + X + Y)),\n        length(texture(iChannel0, uv - X)),\n        length(texture(iChannel0, uv)),\n        length(texture(iChannel0, uv + X)),\n        length(texture(iChannel0, uv - X - Y)),\n        length(texture(iChannel0, uv -Y)),\n        length(texture(iChannel0, uv + X - Y))\n    );\n\n    // Fetch the exact texel from the texture\n    mat3 dermatX = imageMat * dX;\n    mat3 dermatY = transpose(imageMat) * dX;\n    float s = 0.;\n    \n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            s += abs(dermatX[i][j]) + abs(dermatY[i][j]);\n        }\n    }\n    s = pow(s, 2.);\n    \n    // Output to screen\n    fragColor = vec4(s, s, s, 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Convert UV coordinates to texel coordinates for the 8x8 image\n    ivec2 texSize = textureSize(iChannel0, 0);\n    ivec2 texCoord = ivec2(uv * vec2(texSize));\n\n    fragColor = vec4(texelFetch(iChannel0, texCoord, 0).xxx, 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}