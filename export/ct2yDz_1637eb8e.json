{"ver":"0.1","info":{"id":"ct2yDz","date":"1691669467","viewed":24,"name":"First Ray Marching Ball","username":"Leslie","description":"My first ray marching.\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100 // Max march steps\n#define MAX_DIST 1000. // Max distance\n#define MIN_SURFACE_DIST 0.001 // Min surface distance\n\nvec4 ball;\nvec3 nrml = vec3(0., 0., 0.);\nvec3 p;\n\nfloat rayMarch(inout vec3 ro, in vec3 rd){\n    float dist = 0.;\n    float d = 0.;\n    int steps = 0;\n\n    do\n    {\n        dist += d;\n        p = ro+dist*rd;\n        d = length(p-ball.xyz) - ball.w;\n        if(steps>MAX_STEPS || dist>MAX_DIST) {dist = -1000.; break;} // if steped too many times or marched too far set dist to infinite\n    }while(d>MIN_SURFACE_DIST);\n    if(dist>0.) nrml = normalize(p-ball.xyz);\n    return dist;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = min(iResolution.x, iResolution.y);\n    vec2 res = iResolution.xy/scale; // \n    \n    float nZoom = 2.; // near zoom; from ro to screen    \n    float fZoom = 10.+sin(iTime)*7.5;\n    float ratio = fZoom/nZoom;\n    float r = .5; // radius\n\n    ball  = vec4(vec3(res.x*ratio/2.-r-res.x*0.05, res.y*ratio/2.-r-res.y*0.05, fZoom), r); // ball.xyz is center; ball.w is radius\n    vec2 uv = (fragCoord-iResolution.xy/2.)/scale;\n    vec3 ro = vec3(0., 0., 0.); // ray origin\n    vec3 rd = normalize(vec3(uv, nZoom)); // ray direction\n    float dist = rayMarch(ro, rd); // return distance from ray origin to first intersection\n\n    \n    vec3 lit = vec3(0., 0., 10.);\n    vec3 ld = normalize(lit-p); // light direction,  sun light, assume all light rays are parallel\n    \n    float dc = max(0., dot(ld,nrml)); // diffuse coeffe\n    \n    \n    float blur = smoothstep(0., 75./scale, dot(-rd, nrml)); // get blur coeffe\n    \n    vec3 clr = vec3(192, 72, 81)/255.; // ball color\n    vec3 bClr = vec3(0.11, .1, .09); // back color\n    \n    fragColor = vec4(mix(bClr, dc*clr, blur), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}