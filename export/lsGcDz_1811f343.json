{"ver":"0.1","info":{"id":"lsGcDz","date":"1521592704","viewed":138,"name":"Voroblob!","username":"metabog","description":"Just messing around.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","voronoi","audio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 cameraTarget = vec3(0.0, 0.0, 0.0);\nvec3 upDirection = vec3(0.0, 1.0, 0.0);\n\nconst int MAX_ITER = 100; \nconst float MAX_DIST = 150.0; \nconst float EPSILON = 0.01;\nvec3 lightPosition1 = vec3(20.0,10.0,100.0);\nvec3 lightPosition2 = vec3(-200.0,100.0,-100.0);\n\nfloat wang(uint u)\n{\n    uint seed = (u*1664525u);\n    \n    seed  = (seed ^ 61u) ^(seed >> 16u);\n    seed *= 9u;\n    seed  = seed ^(seed >> 4u);\n    seed *= uint(0x27d4eb2d);\n    seed  = seed ^(seed >> 15u);\n    \n    float value = float(seed) / (4294967296.0);\n    return value;\n}\n\n//voronoi seeds\nvec3 pointgen(uint i)\n{\n    vec3 nice;\n    nice.x += cos(iTime+wang(i+3u)*3.14f*2.0f);\n    nice.y += sin(iTime+wang(i)*3.14f*2.0f);\n    nice.z += cos(iTime+wang(i+5u)*3.14f*2.0f);\n    return normalize(2.0f*nice);\n}\n\n#define MAXPOINTS 32u\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\nfloat sphere(vec3 pos, float radius)\n{\n    return length(pos) - radius;\n}\n\nfloat distfunc(vec3 pos, float ampenv)\n{    \n    float mainrad = 7.0;\n    float val = sphere(pos,mainrad);\n    \n    for(uint j = 0u; j<MAXPOINTS; j++)\n    {\n        vec3 vpos = pointgen(j)*ampenv*25.0;\n        vpos*=mainrad;  \n        val = smin(val,sphere(vpos-pos,0.4),0.9);\n    }\n    return val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec3 startPoint = vec3(cos(iTime*0.25)*15.0f, 0.0, sin(iTime*0.25)*15.0f);\n    vec3 cameraDir = normalize(cameraTarget - startPoint);\n\tvec3 cameraRight = normalize(cross(upDirection, startPoint));\n\tvec3 cameraUp = cross(cameraDir, cameraRight);\n    \n    //amplitude envelope\n    float audioEnvelope = (texture(iChannel0, vec2(iChannelTime[1],0.0))).x;\n   \tint c =0;\n  \tfor(float k = 0.0; k<0.02; k+=0.001)\n    {\n    \tc++;\n    \tfloat val = abs((texture(iChannel2, vec2(iChannelTime[1]+k,0.0))).x);\n    \taudioEnvelope+=  val*val;\n    }\n    \n    audioEnvelope = audioEnvelope/float(c);\n    \n    float totalDist = 0.0;\n\tvec3 pos = startPoint;\n\tfloat dist = EPSILON;\n    \n  \tvec2 uv = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    uv*=0.5; //FOV\n    uv.x*= iResolution.x /iResolution.y;\n    \n    uv*= iResolution.x / iResolution.y;\n    \n    vec3 rayDir = normalize(cameraRight * uv.x + cameraUp * (uv.y) + cameraDir);\n    \n    for (int i = 0; i < MAX_ITER; i++)\n\t{\n    \n    if (dist < EPSILON || totalDist > MAX_DIST)\n        break; \n\n    \tdist = distfunc(pos,audioEnvelope); \n    \ttotalDist += dist;\n    \tpos += dist * rayDir; \n\t}\n    \n\tif (dist < EPSILON)\n\t{\n    \tvec2 eps = vec2(0.0, EPSILON);\n                    \n\t\t//VORONOI!\n    \tuint minknn = MAXPOINTS;\n   \t\tfloat minval = 100000.0;\n        \n        for(uint j = 0u; j<MAXPOINTS; j++)\n    \t{\n        \tvec3 vpos = pointgen(j)*audioEnvelope*25.0;\n            vpos*=7.0f;\n            \n        \tfloat len = length(vpos-pos);\n        \tif(len<minval)\n        \t{\n        \t    minval = len;\n        \t    minknn = j;\n        \t}\n    \t}\n        \n        vec3 normal_voronoi = pointgen(minknn) + cos(minval*3.0)*1.5*audioEnvelope;\n        \n\t\tvec3 normal = normalize(vec3(\n    \tdistfunc(pos + eps.yxx,audioEnvelope) - distfunc(pos - eps.yxx,audioEnvelope),\n   \t\tdistfunc(pos + eps.xyx,audioEnvelope) - distfunc(pos - eps.xyx,audioEnvelope),\n   \t\tdistfunc(pos + eps.xxy,audioEnvelope) - distfunc(pos - eps.xxy,audioEnvelope)));\n        \n        normal += normal_voronoi;\n        \n        vec3 lightVec1 = normalize(pos - lightPosition1);\n        vec3 lightVec2 = normalize(pos - lightPosition2);\n        \n   \t\tvec3 diffuse = vec3(0.0); \n        float redLight = max(0.0, dot(-lightVec1, normal))*0.5;\n        float blueLight = max(0.0, dot(-lightVec2, normal))*0.5;\n        diffuse += vec3(redLight*1.0,0.7*redLight,0.9*redLight);\n        diffuse += vec3(blueLight*0.3,blueLight*0.6,blueLight*0.73);\n        diffuse += vec3(0.2,0.2,0.2); //ambient\n        float specular1 = pow(redLight, 16.0);\n        float specular2 = pow(blueLight, 16.0);\n\n\t\tfragColor = vec4(diffuse+specular1+specular2, 1.0);\n\t}\n\telse\n\t{\n\t\t\tfragColor = vec4(1.0);\n\t}\n}","name":"Image","description":"","type":"image"}]}