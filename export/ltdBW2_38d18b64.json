{"ver":"0.1","info":{"id":"ltdBW2","date":"1541144615","viewed":86,"name":"Test_Feedback","username":"michaelsonbritt","description":"Test of buffer feedback, A -> B, and B -> A\nEach frame blends in the previous frame","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["feedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture( iChannel0, uv );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 transAround( vec2 uv, vec2 pivot, float rot, vec2 pos )\n{\n    vec2 moved = uv + (pivot-pos);\n    vec2 v = moved-pivot;\n\tvec2 rotated = vec2(\n        v.x*cos(rot) + v.y*sin(rot),\n    \tv.x*sin(rot) - v.y*cos(rot) );\n    rotated = rotated+pivot;\n    return rotated;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pixelSize = 1.0 / iResolution.xy;\n    vec2 mouse = iMouse.xy * pixelSize;\n\n\tvec4 bg = texture( iChannel0, uv );\n    \n    float t = mod( iTime/10.0, 2.0 * 3.14159 );\n    vec2 rotUV = transAround(uv, vec2(0.5,0.5), t, mouse );\n    float noise = texture( iChannel3, rotUV ).r;\n\n    // Time varying pixel color\n    vec3 hue = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec4 fg = vec4(hue,1.0) * vec4(noise,noise,noise,1.0);\n\n    fragColor = 0.98 * bg + 0.02 * fg;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pixelSize = 1.0 / iResolution.xy;\n    vec2 mouse = iMouse.xy * pixelSize;\n\n    vec2 offset = uv - mouse;\n    float dist = sqrt( offset.x*offset.x + offset.y*offset.y );\n    float w = ( dist + 0.75 );\n    float c = clamp( 1.0 - w, 0.0, 1.0 ) / 10.0;\n\n\tvec4 proxColor = vec4(c,c,c,1.0);\n    vec4 bg = texture(iChannel0, uv );\n    \n\tfragColor = bg + proxColor;\n}","name":"Buffer B","description":"","type":"buffer"}]}