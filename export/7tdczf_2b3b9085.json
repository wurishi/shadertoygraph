{"ver":"0.1","info":{"id":"7tdczf","date":"1660420058","viewed":141,"name":"mip liquid test","username":"uiop","description":"3d rendering is unoptimized, but I tried using mip maps to help with the fluidish sim.","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["fluid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nvec3 refl(vec3 d, vec3 n){\n    return d - 2.f * n * dot(d,n);\n}\n\nvec4 raycast(vec3 pos, vec3 dir){\n    vec4 col = vec4(0);\n    vec3 p = pos;\n    vec3 d = dir;\n    float dis = 0.;\n    float amt = 1.;\n    for(int i = 0; i < 200; i++){\n        vec4 s = texture(iChannel0,p.xz*0.05,-100.0);\n        if(s.z*60.0 >= p.y+1.8){\n            col += abs(s) * amt * (50./(0.5+dis));\n            amt *= 0.99;\n            i = 200;\n            \n            vec3 norm = normalize(vec3(\n                texture(iChannel0,p.xz*0.05 + vec2(0.0001,0),-100.0).z-texture(iChannel0,p.xz*0.05 + vec2(-0.0001,0),-100.0).z,\n                texture(iChannel0,p.xz*0.05 + vec2(0,0.0001),-100.0).z-texture(iChannel0,p.xz*0.05 + vec2(0,-0.0001),-100.0).z,\n                0.0002\n                ));\n            col *= 4.*texture(iChannel1,refl(d,norm),0.0);\n            \n            \n            \n        }\n        p += d * 0.1;\n        dis += 0.1;\n    }\n    return col;\n}\n\n\nvec4 render(vec2 c){\n    // Setup ray position and direction\n    vec4 col = vec4(0,0,0,0);\n    vec3 p = vec3(0, 0, -5.5);\n    vec3 d = normalize(vec3(c,0.25));\n    if(iMouse.z > 0.){\n        d.zy *= rot(-2.* iMouse.y/iResolution.y + 0.2);\n        p.zy *= rot(-2.* iMouse.y/iResolution.y + 0.2);\n        d.xz *= rot(-3.14 * iMouse.x/iResolution.x);\n        p.xz *= rot(-3.14 * iMouse.x/iResolution.x);\n    }else{            \n        d.zy *= rot(-0.5);\n        p.zy *= rot(-0.5);\n\n        d.xz *= rot(iTime*0.5);\n        p.xz *= rot(iTime*0.5);\n    }\n    // Cast ray\n    col = raycast(p,d);\n    return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n\n\n\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.xy;\n    //vec4 i = texture(iChannel0,uv,-100.0);\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    //vec4 col = 10.*vec4(i);\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.x;\n    vec4 col = render(uv);\n    fragColor = pow(col, vec4(1./2.2));\n\n\n\n// Output to screen\n    //fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"        float it1 = 0.7; // Mip Map base\n        float it2 = 0.3; // Change velocity\n        float it3 = 0.3; // Change pressure \n        float it4 = 0.3; // Velocity from difference in pressure\n        float it5 = 0.01; // step amount\n        float it6 = 0.000001; // likelihood of drops\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    if(iFrame <= 10){\n        fragColor = 0.5*(texture(iChannel1, uv, -100.0)-0.5);\n        fragColor.z = 0.05;\n    }else{\n        vec4 col = texture(iChannel0, uv, 0.0);\n        vec4 dir = col;\n        vec2 pixelSize = 1./iResolution.xy;\n        float a = 1.0;\n        float b = 1.0;\n        for(int i = 1; i < 10; i++){\n            col += a * texture(iChannel0, uv + b * pixelSize * dir.xy, float(i));\n            a *= it1;\n            b *= 2.0;\n        }\n        vec4 outCol = texture(iChannel0, uv + col.xy * it5, 0.0);     \n        vec2 vel = vec2(0,0);\n        a = 1.0;\n        b = 0.5;\n        for(int i = 0; i < 10; i++) {\n            vec4 l = texture(iChannel0, uv - vec2(pixelSize.x * b,0), float(i));\n            vec4 r = texture(iChannel0, uv - vec2(-pixelSize.x * b,0), float(i));\n            vel.x += a * (l.z - r.z);\n            a *= it1;\n            b *= 2.0;\n            outCol.xy += -it2 * (-l.xy * l.x * l.z + r.xy * r.x * r.z) * a;\n            outCol.z += it3 * (-l.z * l.x  + r.z * r.x ) * a;\n\n        }\n        a = 1.0;\n        b = 0.5;\n        for(int i = 0; i < 10; i++){\n            vec4 l = texture(iChannel0, uv - vec2(0,pixelSize.y * b), float(i));\n            vec4 r = texture(iChannel0, uv - vec2(0,-pixelSize.y * b), float(i));\n            vel.y += a * (l.z - r.z);\n            a *= it1;\n            b *= 2.0;\n            outCol.xy += -it2 * (-l.xy * l.y * l.z + r.xy * r.y * r.z) * a;\n            outCol.z += it3 * (-l.z * l.y + r.z * r.y) * a;\n\n        }\n        outCol.xy += vel *-it4;\n        outCol.z = clamp(outCol.z,-1.0,1.0);\n        outCol.z -= 0.000001;\n        fragColor = clamp(outCol,-1.0,1.0);\n        \n    }\n    if(length(fragCoord - iMouse.xy) < 1.0){\n    //    if(iMouse.z > 0.0){\n      //  fragColor = vec4(0.1*sin(iTime*2.),0.1*cos(iTime*2.),0.2,0.0);}\n    }\n    for(int i = 0; i < 3; i++){\n    if(length(fragCoord - (100. + 100. * vec2(sin(iTime*2. + float(i)*2.1),cos(iTime*2. + float(i)*2.1)))) < 5.0){\n        fragColor += vec4(0.01*sin(2.1 +iTime*2. + float(i)*2.1),0.01*cos(2.1 + iTime*2.+ float(i)*2.1),0.002,0.0);\n    }}\n    if(sin(iTime*fragCoord.x) + cos(iTime*fragCoord.y) < -2. + it6){\n        fragColor = vec4(0.9*sin(iTime*2.),0.1*cos(iTime*2.),1.2,0.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}