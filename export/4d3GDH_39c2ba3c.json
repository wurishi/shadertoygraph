{"ver":"0.1","info":{"id":"4d3GDH","date":"1449193654","viewed":409,"name":"Inverse barycentric","username":"Abstract_Algorithm","description":"Inverse barycentric interpolation.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["triangle","barycentric","inverse","interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// from: http://ofekshilon.com/2013/01/21/geometric-inverse-application-1-barycentric-coordinates/\n\nstruct Triangle\n{\n    vec2 a,b,c;\n};\n\nbool on_side(vec2 test, vec2 v1, vec2 v2)\n{\n    return ((v2.x - v1.x)*(test.y-v1.y) - (v2.y-v1.y)*(test.x-v1.x))>=0.0;\n}\n\nbool inTri(Triangle t, vec2 p)\n{\n    bool isAB = on_side(p, t.a, t.b);\n    bool isBC = on_side(p, t.b, t.c);\n    bool isCA = on_side(p, t.c, t.a);  \n    return isAB && isBC && isCA;\n}\n\nvec3 getBary(Triangle t, vec2 pp)\n{\n    vec3 a = vec3(t.a,1.0);\n    vec3 b = vec3(t.b,1.0);\n    vec3 c = vec3(t.c,1.0);\n    vec3 p = vec3(pp,1.0);\n\n    vec3 bxc = cross(b,c);\n    vec3 axb = cross(a,b);\n    vec3 cxa = cross(c,a);\n    float denom = dot(a,bxc);\n\n    float alpha = dot(p,bxc);\n    float beta  = dot(p,cxa);\n    float gamma = dot(p,axb);\n\n    return vec3(alpha,beta,gamma)/denom;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy / iResolution.xy*2.0 - 1.0) * vec2(iResolution.x/iResolution.y,1.0);\n    fragColor = vec4(0);\n\n    Triangle t;\n    t.a = vec2(0.0, 0.8);\n    t.b = vec2(-0.6, -0.1);\n    t.c = vec2(0.5, -0.3);\n\n    vec3 col = getBary(t,p);\n    if(!inTri(t,p))\n    {\n        col *= 0.3;\n    }\n#define TEX\n#ifdef TEX\n    else\n    {\n        vec2 uv_a = vec2(0.5,0.0);\n        vec2 uv_b = vec2(0.0,1.0);\n        vec2 uv_c = vec2(1.0,1.0);\n\n        vec2 uv = col.r * uv_a\n                + col.g * uv_b\n                + col.b * uv_c;\n\n        col *= texture(iChannel0, uv).rgb;\n    }\n#endif\n    fragColor = vec4(col,1);\n}","name":"","description":"","type":"image"}]}