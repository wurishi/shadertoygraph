{"ver":"0.1","info":{"id":"WlBGR1","date":"1558386107","viewed":423,"name":"[twitch] Space Jelly","username":"NuSan","description":"Shader coded live on twitch (https://www.twitch.tv/nusan_fx)\nThe shader was made using Bonzomatic.\nYou can find the original shader here: http://lezanu.fr/LiveCode/SpaceJelly.glsl\nThe idea was to accumulate when near the surface to make the translucent p","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","fuzzy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nShader coded live on twitch (https://www.twitch.tv/nusan_fx)\nThe shader was made using Bonzomatic.\nYou can find the original shader here: http://lezanu.fr/LiveCode/SpaceJelly.glsl\n\nThe idea was to accumulate when near the surface to make the translucent parts.\n*/\n\nfloat time = 0.0;\n\nfloat box(vec3 p, vec3 s) {\n  p=abs(p)-s;\n  return max(p.x, max(p.y,p.z));\n}\n\nmat2 rot(float a) {\n  float ca=cos(a);\n  float sa=sin(a);\n  return mat2(ca,sa,-sa,ca);\n}\n\nfloat rnd(float t) {\n  return fract(sin(t*467.355)*541.988);\n}\n\nfloat curve(float t, float d) {\n  float g=t/d;\n  float it=fract(g);\n  it=smoothstep(0.,1.,it);\n  it=smoothstep(0.,1.,it);\n  it=smoothstep(0.,1.,it);\n  return mix(rnd(floor(g)), rnd(floor(g)+1.), it);\n}\n\nfloat tick(float t, float d) {\n  float g=t/d;\n  float it=fract(g);\n  it=smoothstep(0.,1.,it);\n  it=smoothstep(0.,1.,it);\n  it=smoothstep(0.,1.,it);\n  return floor(g) + it;\n}\n\nvec3 lp=vec3(0);\nfloat map(vec3 p) {\n  \n  p.xz *= rot(p.y*sin(time*12.5 + length(p.xz)*max(0.2,sin(time))*0.8)*0.02 * smoothstep(0.0,0.5,abs(fract(time*0.2)-.5)));\n    \n  float dist=100.0;\n  p = (fract(p/dist+.5)-.5)*dist;\n\n  float d=10000.0;\n  float s=8.0 + curve(time, 0.7)*10.0;\n  for(int i=0; i<5; ++i) {\n    \n    float t=tick(time, 0.8 + 0.7*float(i)) * 0.25;\n    p.xy *= rot(t);\n    p.yz *= rot(t*.7);\n    p.xy=abs(p.xy);\n    d=min(d, length(p.xz)-.1);\n    p-=s;\n    s *= 0.4;\n  } \n  \n  float d2 = box(p, vec3(1.5, 0.7, 0.3)*.5);\n  lp=p;\n    \n  return min(d, d2);\n}\n\nfloat rnd(vec2 uv) {\n  \n  return fract(dot(sin(uv*784.565 + uv.yx*568.655), vec2(438.724)));\n}\n\nvoid cam(inout vec3 p) {\n  \n  float t=time*.4 + curve(time, 1.9) * 3.0;\n  p.xy *= rot(t);\n  p.yz *= rot(t*1.2);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n  \n  uv *= 2.0/(0.7+length(uv));\n  \n  float time2 = iTime*1.0 + 23.0;\n  time = tick(time2*0.3, 1.7) + time2*0.3;\n\n  vec3 s=vec3(0,0,-50);\n  vec3 r=normalize(vec3(-uv, 0.5 + curve(time, 0.8)));\n  \n  cam(s);\n  cam(r);\n  \n  float dither = mix(1.0,rnd(uv + fract(time)),0.1);\n  \n  vec3 col = vec3(0);\n   \n  vec3 l=normalize(-vec3(1,3,2));\n  vec2 off=vec2(0.01,0.0);\n  \n  float t2 = time*10.3;\n  \n  vec3 p=s;\n  float dd=0.0;\n  for(int i=0; i<100; ++i) {\n    float d=map(p)*dither;\n    float limit = sin(p.z*0.13 + t2) * 1.5 + 2.0;\n    if(dd>200.0) break;\n    if(d<limit) {\n      float dist = 30.0;\n      vec3 lp2 = (fract(lp/dist+.5)-.5)*dist;\n      float factor = 0.02;\n      //factor = (d<0.001) ? 0.5 : 0.02;\n      vec3 n=normalize(map(p) - vec3(map(p-off.xyy), map(p-off.yxy), map(p-off.yyx)));\n      if(dot(n,l)<0.0) l=-l;\n      vec3 h=normalize(l-r);\n      float f=pow(1.0-abs(dot(n,r)), 10.0);\n      col += max(dot(n,l), 0.0) * factor * (0.3 + vec3(0.6,0.3,0.9)*5.0*pow(max(0.0,dot(n,h)), 10.0));\n      col += vec3(0.2,0.5,1.0) * 4.0 * f * factor * (n.y*.5+.5);\n      col += smoothstep(0.2,0.1, length(lp2.xz)) * factor * 10.0;\n      if(d<0.01) {\n        break;\n      }\n      d=0.2;\n    }\n    p+=r*d;\n    dd+=d;\n  }\n  float fog = pow(1.0-clamp(dd/200.0,0.0,1.0), 2.0);\n  float turn = fog*0.9 + time*.3;\n  col.xy *= rot(turn);\n  col.yz *= rot(turn*1.3);\n  col = abs(col);\n  col = mix(col, vec3(0.3,0.5,1.0)*dot(col, vec3(0.333)), 0.7);\n  \n  col *= 2.0;\n  col *= 1.2 - length(uv);\n    \n  fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}