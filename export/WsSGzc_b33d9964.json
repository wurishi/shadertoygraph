{"ver":"0.1","info":{"id":"WsSGzc","date":"1549702834","viewed":115,"name":"Korea","username":"Canysway","description":"Flag fluttering in the wind :)","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["distortion","flag","wind","korea"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float time = iTime * 3.8;\n\n    float ay = 0.03 * sin(time) + 1.5;\n    float by = 0.06 * sin(time) + 0.05;\n    float cy = 0.02 * cos(time) + 0.01;\n\n    float ax = 0.1 * cos(time) + 1.1;\n    float bx = 0.03 * cos(time) + 0.02;\n    float cx = 0.02 * sin(time) + 0.01;\n\n    float ratioY = 1.0 - (sin(((uv.x + 1.9 + (sin(iTime) + 0.5 ) * PI) * PI)/ay) * bx + cy);\n    float ratioX = 1.0 - (sin(((uv.y + 1.9 + (sin(iTime) + 1.5 ) * PI) * PI)/ax) * by + cx);    \n    \n    \n    if (uv.y < ratioY && uv.x < ratioX ){\n      uv /= vec2(ratioX, ratioY);\n      fragColor = texture(iChannel0, uv);\n    }else{\n      fragColor = vec4(0.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n#define rot(a)      mat2(cos(a), -sin(a), sin(a), cos(a))\n#define CIRCLE(U, C, R)\t\t1. - step(R, distance(C, U))\n\n\n\nfloat getBox(vec2 uv, vec2 scale, vec2 trans, float angle){\n  uv -= trans;\n  uv *= rot(PI * angle);\n  vec2 bl = step(vec2(0.), uv);\n  vec2 tr = 1. - step(scale, uv);\n  return bl.x * bl.y * tr.x * tr.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    uv.x *= ratio;\n\n    float lt1 = getBox(uv, vec2(0.23, 0.28), vec2(0.13, 0.66), 0.15);\n    float lt2 = getBox(uv, vec2(0.02, 0.4), vec2(0.153, 0.57), 0.15);\n    float lt3 = getBox(uv, vec2(0.02, 0.4), vec2(0.247, 0.57), 0.15);\n    \n    float rt1 = getBox(uv, vec2(0.23, 0.28), vec2(1.46, 0.56), -0.15);\n    float rt2 = getBox(uv, vec2(0.02, 0.4), vec2(1.627, 0.56), -0.15);\n    float rt3 = getBox(uv, vec2(0.02, 0.4), vec2(1.534, 0.56), -0.15);    \n    float rt4 = getBox(uv, vec2(0.02, 0.14), vec2(1.334, 0.66), 0.353); \n    float rt5 = getBox(uv, vec2(0.02, 0.14), vec2(1.534, 0.76), 0.353);    \n    \n    float lb1 = getBox(uv, vec2(0.23, 0.28), vec2(0.255, 0.1), -0.15);\n    float lb2 = getBox(uv, vec2(0.02, 0.4), vec2(0.325, 0.1), -0.15);\n    float lb3 = getBox(uv, vec2(0.02, 0.4), vec2(0.418, 0.1), -0.15);\n    float lb4 = getBox(uv, vec2(0.02, 0.08), vec2(0.26, 0.265), 0.352);\n    \n    float rb1 = getBox(uv, vec2(0.23, 0.28), vec2(1.34, 0.2), 0.15);\n    float rb2 = getBox(uv, vec2(0.02, 0.4), vec2(1.394, 0.17), 0.15);\n    float rb3 = getBox(uv, vec2(0.02, 0.4), vec2(1.459, 0.12), 0.15);\n    float rb4 = getBox(uv, vec2(0.02, 0.4), vec2(1.659, 0.177), -0.347);\n    \n    float c_top = uv.y > 0.5 ? CIRCLE(uv, vec2(0.5 * ratio, 0.5), 0.15 * ratio) : 0.;\n    float c_bot = uv.y <= 0.5 ? CIRCLE(uv, vec2(0.5 * ratio, 0.5), 0.15 * ratio) : 0.;\n    float c2 = CIRCLE(uv, vec2(0.425 * ratio, 0.5), 0.075 * ratio);\n    float c3 = CIRCLE(uv, vec2(0.575 * ratio, 0.5), 0.075 * ratio);\n    c_top = max(0., min(1., c_top + c2) - c3);\n    c_bot = max(0., min(1., c_bot + c3) - c2);   \n    vec4 c_color = vec4(1.,0.,0.,1.) * c_top + vec4(0.,0.,1.,1.) * c_bot;\n    \n    float bar = max(0., lt1 - lt2 - lt3) + max(0.,rt1 - rt2 - rt3 - rt4 - rt5) + \n        max(0., lb1 - lb2 - lb3 - lb4) + max(0., rb1 - rb2 - rb3 - rb4);\n    fragColor = vec4(1.);\n \n    fragColor = mix(fragColor, vec4(0.,0.,0.,1.), bar);\n    fragColor = mix(fragColor, c_color, c_color.a);\n}","name":"Buffer A","description":"","type":"buffer"}]}