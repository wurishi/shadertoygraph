{"ver":"0.1","info":{"id":"4fSGzc","date":"1704455292","viewed":47,"name":"firecrackers","username":"Efim","description":"simple firecrackers","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","sdf","fading"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI  3.14159265359\n#define TAU 6.28318530718\n\n\n// IQ's vec2 to float hash.\nfloat hash21(vec2 p){  \n    return fract(sin(mod(dot(p, vec2(27.609, 57.583)), TAU))*43758.5453); \n}\n\nfloat star(vec2 p, vec2 c, float r)\n{\n    if (abs(p.x - c.x) > r || abs(p.y - c.y) > r)\n        return 0.;\n    float pst = smoothstep(-0.001, 0.0, length(p - (c + vec2(r, r))) - r);\n    pst *=  smoothstep(-0.001, 0.0, length(p - (c + vec2(r, -r))) - r);   \n    pst *=  smoothstep(-0.001, 0.0, length(p - (c + vec2(-r, r))) - r);   \n    pst *=  smoothstep(-0.001, 0.0, length(p - (c + vec2(-r, -r))) - r);   \n    return pst;\n}\n\n\nfloat sdCosN(vec2 p, float a, float n) {\n\n    float fi = atan(p.y, p.x);\n    float L = length(p.xy);\n    float d1 = 100.;\n    float d2 = 100.;\n\n    for(float i = 0.; i < 10.; i++) {\n        if(fract(n * i) == 0. && i > 0.)\n            break;\n        float r = a * cos(n * fi + n * i * TAU);\n        d1 = min(abs(L - r), d1);\n    }\n    float f = acos(L / a) / n;\n    for(float i = 0.; i < 10.; i++) {\n\n        d2 = min(2.0 * abs(sin((fi - (f + i * TAU / n)) / 2.0)) * L, d2);\n        d2 = min(2.0 * abs(sin((fi + (f + i * TAU / n)) / 2.0)) * L, d2);\n        d2 = min(2.0 * abs(sin((fi - (f - i * TAU / n)) / 2.0)) * L, d2);\n        d2 = min(2.0 * abs(sin((fi + (f - i * TAU / n)) / 2.0)) * L, d2);\n\n    }\n    \n    float d = min(d1, d2);\n    return d*0.3;\n}\n\nvec3 hsb2rgb( in vec3 c )\n{\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return (c.z * mix( vec3(1.0), rgb, c.y));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n    vec3 col3 = vec3(1., 1., 0.75);\n    vec3 col1 = vec3(0., 0., 0.3);\n    float np[3]; float lv[3]; float ep[3];\n    np[0] = 200.; np[1] =  100.; np[2] = 50.; \n    lv[0] = 0.8; lv[1] = .9; lv[2] = .9; \n    ep[0] = 0.02; ep[1] = 0.05; ep[2] = 0.1; \n\n    vec2 p = fragCoord / iResolution.y, c = vec2(iResolution.x/iResolution.y*0.5, 0.5), pc = p-c;\n    vec3 tot = col1;\n    float r = iResolution.x/iResolution.y*0.45;\n    float w = 1., v = .3, fi = mod(atan(pc.y, pc.x), TAU), head = w*iTime;\n    float shift = mod((mod(head, TAU) - fi), TAU)/w;\n    if (head < TAU && head < fi)\n    {\n        fragColor = vec4(col1, 1.0);\n        return;\n    }\n    float d = sdCosN(pc, r, 2.);\n    for (int i = 0; i < 3; i++)\n    {\n        float npp = np[i], level = lv[i], rd = 1./npp;  \n        vec2 pp = floor(p*npp)/npp;\n        //d > -ep[i]*shift*v && \n        if (d < ep[i]*shift*v)\n        {\n            float fil = hash21(pp);\n            if (fil > level)\n            {\n                float pst = star(p, pp+rd*0.5, rd*.5);\n                pst *= exp(-shift*0.7)*(1.+cos(shift*TAU*2. + fract(fil*500.)*3.*PI))/2.;\n                vec3 col = hsb2rgb(vec3(fract(fil*1000.)*3., 1., 2.));\n                tot = mix(tot, col, pst);\n                \n            }\n        }\n    }\n  \n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}