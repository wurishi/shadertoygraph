{"ver":"0.1","info":{"id":"WddczH","date":"1600400915","viewed":159,"name":"nm-xyz-srgb gradient vs hsl","username":"meteotrix","description":"Generating a color gradient of the visible light spectrum, and comparing it to a basic hsl gradient.\nWavelength(nm) to XYZ to sRGB is at the top. HSL to RGB is at the bottom.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define slices 10.0\n\n//from the CIE 1931 2Â° standard observer table: \n//https://web.archive.org/web/20170902184202/http://www.cie.co.at/index.php/LEFTMENUE/index.php?i_ca_id=298\nvec3 nm_xyz(int i)\n{\n    switch(i)\n    {\n     \tcase 0:\n        \treturn vec3(0.001368, \t0.000039,\t0.00645);\t//380nm\n        case 1:\n        \treturn vec3(0.13438,\t0.004,\t\t0.6456); \t//420\n        case 2:\n        \treturn vec3(0.2908,\t\t0.06,\t\t1.6692); \t//460\n        case 3:\n        \treturn vec3(0.0049,\t\t0.323,\t\t0.272); \t//500\n        case 4:\n        \treturn vec3(0.2904,\t\t0.954,\t\t0.0203); \t//540\n        case 5:\n        \treturn vec3(0.9163,\t\t0.87,\t\t0.00165); \t//580\n        case 6:\n        \treturn vec3(0.85445,\t0.381,\t\t0.00019); \t//620\n        case 7:\n        \treturn vec3(0.1649,\t\t0.061,\t\t0); \t\t//660\n        case 8:\n        \treturn vec3(0.002899,\t0.001047,\t0); \t\t//720\n        case 9:\n        \treturn vec3(0.000166,\t0.00006,\t0); \t\t//760\n        default:\n        \treturn vec3(0.0);\n    }\n}\n\n//according to wikipedia: \n//https://en.wikipedia.org/wiki/SRGB#The_forward_transformation_(CIE_XYZ_to_sRGB)\nvec3 xyz_to_sRGB(vec3 xyz)\n{\n    //assuming xyz coded relative to D65\n\n    //XYZ-to-sRGB conversion matrix (taken from another site)\n    mat3x3 conv_matrix = mat3x3(\t3.2404542f, -1.5371385f, -0.4985314f,\n     \t\t\t\t\t\t\t\t-0.9692660f, 1.8760108f, 0.0415560f,\n     \t\t\t\t\t\t\t\t0.0556434f,  - 0.2040259f, 1.0572252f);\n\n    vec3 ret = xyz * conv_matrix;\n\n    //companding for gamma?\n    //nah\n\n    //companding..? for sRGB\n    ret.x = ret.x <= 0.0031308f ? (12.92f * ret.x) : (1.055f * pow(ret.x, 1.0f / 2.4f) - 0.055f);\n    ret.y = ret.y <= 0.0031308f ? (12.92f * ret.y) : (1.055f * pow(ret.y, 1.0f / 2.4f) - 0.055f);\n    ret.z = ret.z <= 0.0031308f ? (12.92f * ret.z) : (1.055f * pow(ret.z, 1.0f / 2.4f) - 0.055f);\n    //\n\n    ret.x = clamp(ret.x,0.0,1.0);\n    ret.y = clamp(ret.y,0.0,1.0);\n    ret.z = clamp(ret.z,0.0,1.0);\n\n    return ret;\n}\n\nvec3 xyz_to_srgb_lerped(float nm)\n{\n    int i = int(floor((nm - 380.0) / (400.0 / slices)));\n    \n    return mix(xyz_to_sRGB(nm_xyz(i)), xyz_to_sRGB(nm_xyz(i+1)), mod(nm-380.0,(400.0 / slices)) /40.0);\n}\n\n//acquired god-knows-where on the internet\nvec3 hsl_to_rgb(vec3 hsl) \n{\n    float H = hsl.x; //0-360\n    float S = hsl.y; //0-1\n    float L = hsl.z; //0-1\n\n    vec3 rgb = vec3(0);\n\n    float c = (1.0 - abs(2.0 * L - 1.0)) * S;\n    float x = c * (1.0 - abs(mod((H / 60.f), 2.f) - 1.0));\n    float m = L - c / 2.0;\n\n    \t\tif (0.0 <= H && H < 60.0)\t\trgb = vec3(c, x, 0);\n    else\tif (60.0 <= H && H < 120.0)\t\trgb = vec3(x, c, 0);\n    else\tif (120.0 <= H && H < 180.0)\trgb = vec3(0, c, x);\n    else\tif (180.0 <= H && H < 240.0)\trgb = vec3(0, x, c);\n    else\tif (240.0 <= H && H < 300.0)\trgb = vec3(x, 0, c);\n    else\tif (300.0 <= H && H < 360.0)\trgb = vec3(c, 0, x);\n\n    rgb += vec3(m, m, m);\n\n    return rgb;\n}\n\nvec3 nm_to_hsl(float nm)\n{\n    vec3 hsl = vec3(mix(0.0,300.0,(nm-380.0)/400.0) , 1.0, 0.5);\n    return hsl;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    int i = int(floor(uv.x * slices));\n    float nm = mix(380.0,780.0,uv.x);\n    \n    vec3 col = xyz_to_srgb_lerped(nm);\n    \n    if(uv.y < 0.5) col = hsl_to_rgb(nm_to_hsl(nm));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}