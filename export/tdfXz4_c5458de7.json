{"ver":"0.1","info":{"id":"tdfXz4","date":"1559756218","viewed":108,"name":"2D Triangle Fractal","username":"trevortheblack","description":"A rotating fractal of triangles","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shamelessly modified from IQ's \"Sierpinski - 2D\":\n// https://www.shadertoy.com/results?query=sierpinski\n\n// \"Sierpinski - 2D\" copyrighted under the MIT LICENSE:\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nconst float M_PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062;\nconst float M_ROOT_3 = 1.732050807568877293527446341505872366942805253810380628055;\nconst float M_ROOT_3_OVER_2 = 0.866025403784438646763723170752936183471402626905190314027;\n\nfloat lenSqr( in vec2 p )\n{\n    return dot(p,p);    \n}\n\n\n// Returns the distance and the address\nvec2 map( in vec2 p, in float radius, in vec2 cen, in float theta)\n{\n    // Get the outermost vertices of the sierpinski tri\n\tvec2 va = vec2( 0.0, radius);\n\tvec2 vb = vec2( radius*M_ROOT_3_OVER_2, -radius*0.5);\n\tvec2 vc = vec2(-radius*M_ROOT_3_OVER_2, -radius*0.5);\n    \n    // Account for theta\n    float cosTheta = cos(theta);\n    float sinTheta = sin(theta);\n    va = vec2(cosTheta*va.x - sinTheta*va.y, sinTheta*va.x + cosTheta*va.y); \n    vb = vec2(cosTheta*vb.x - sinTheta*vb.y, sinTheta*vb.x + cosTheta*vb.y); \n    vc = vec2(cosTheta*vc.x - sinTheta*vc.y, sinTheta*vc.x + cosTheta*vc.y); \n    \n    \n    // Account for center\n    va += cen;\n    vb += cen;\n    vc += cen;\n    \n    float a = 0.0;\n    vec2 nv; // nearest vertex\n    float dist, d, t;\n    for(int i = 0; i < 7; i++)\n    {\n        d = lenSqr(p-va); nv = va; dist = d; t = 0.0;\n        d = lenSqr(p-vb); if (d < dist)\n        { nv = vb; dist = d; t = 1.0; }\n        d = lenSqr(p-vc); if (d < dist)\n        { nv = vc; dist = d; t = 2.0; }\n        p = nv + 2.0*(p-nv);\n        a = t + a*3.0;\n  \t}\n    \n    return vec2(length(p)/pow(2.0,7.0), a/pow(3.0,7.0));\n}\n\n\n// Accepts [0,1] uv coordinates\n// Outputs to polar coords \n// With [0.5, 0.5] as the center\n//(radius, theta)\n// where radius is [0, sqrt(0.25 + (0.5*aspect_ratio)^2)]\n// theta is [-PI, PI]\nvec2 polarCoords( in vec2 uv )\n{\n    vec2 uvPrime = uv;\n    float r = length(uvPrime);\n    float theta = atan(uvPrime.y, uvPrime.x);\n    return vec2(r, theta);\n}\n\nvec2 screenToWorld(vec2 screen)\n{\n    vec2 result = 2.0 * (screen/iResolution.xy - 0.5);\n    result.x *= iResolution.x/iResolution.y;\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = screenToWorld(fragCoord);\n    \n    // Get the sierpinski triangle\n    vec2 r = map(uv, M_ROOT_3_OVER_2, vec2(0.2*cos(iTime), 0.2*sin(iTime)), iTime/2.);\n           \n    \n    vec3 col = 0.5 + 0.5*sin(M_PI*r.y + vec3(0.0,5.0,5.0));\n    col *= 1.0 - smoothstep(0.0, 0.02, r.x);\n    \n    if (length(uv) < 0.02)\n\t\tcol = vec3(1.0, 1.0, 1.0);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}