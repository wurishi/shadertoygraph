{"ver":"0.1","info":{"id":"fl3SWM","date":"1639169018","viewed":199,"name":"Black hole / eclipse 1","username":"Betalord","description":"An example of a black hole with some \"dynamic\" background. Could be seen as an eclipse as well.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["eclipse","blackhole"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: Betalord\n//\n// Noise functions taken from https://github.com/ashima/webgl-noise/blob/master/src/classicnoise2D.glsl (MIT licence)\n// Plasma effect based on this code: https://www.shadertoy.com/view/MlyGzW\n//\n// The part of the code that is mine is in public domain.\n\n#define NOISE_PERIOD 16. // needs to be an integer value\n#define PI 3.14159265359\n#define TAU 6.2831853071\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 permute(vec4 x) {\n  return mod289(((x*34.0)+10.0)*x);\n}\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec2 P, vec2 rep) {\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod(Pi, rep.xyxy); // To create noise with explicit period\n  Pi = mod289(Pi);        // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;  \n  g01 *= norm.y;  \n  g10 *= norm.z;  \n  g11 *= norm.w;  \n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\nfloat fbm_periodic(vec2 pos, int octaves, float persistence, vec2 period) {\n\tfloat total = 0., frequency = 1., amplitude = 1., maxValue = 0.;\n\tfor(int i = 0; i < octaves; ++i) {\n\t\ttotal += pnoise(pos * frequency, period) * amplitude;\n\t\tmaxValue += amplitude;\n\t\tamplitude *= persistence;\n\t\tfrequency *= 2.;\n\t}\n\treturn total / maxValue;\n}\n\nvec3 plasma(vec2 uv, float r) {\n\tfloat len = length(uv);\n\t\n\tfloat light = 0.1 / abs(len-r) * r; // we multiply by 'r' to scale it correctly when 'r' changes\n\t\n\tlight = pow(light, 0.7); // add some more power to it\n\tlight *= smoothstep(3.5*r, 1.5*r, len); // limit the light range\n    \n\treturn light * vec3(0.9, 0.65, 0.5)/*Color it a bit*/;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float BlackHoleRadius = 1.1;\n\n    // first do the rays:\n    \n    float radius = 2.0; // circle radius\n    float time = iTime * 0.15;\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv *= 5.2; // scale it a bit\n    vec3 col = vec3(1.0, 0.9, 0.7); // resulting color\n    \n    // polar coordinates:\n    float r = length(uv) / radius; // radial coordinate\n    float phi = atan(uv.y, uv.x); // angular coordinate\n    \n   \tfloat a = fbm_periodic(vec2((phi + PI)/TAU * NOISE_PERIOD, time), 5, 0.5, vec2(NOISE_PERIOD, 100.)); // we don't really need periodicy in Y direction, but anyway, we just put some random number\n\ta = (a + 1.0) * 0.5; // map it to [0..1]\n\ta *= .7; // scale it a bit\n    a = pow(a, 1.6); // \"sharpen\" it up a bit\n    \n    col *= smoothstep(a+0.81, a, r); // creates the rays\n    \n    // now do the plasma:\n    col += plasma(uv, BlackHoleRadius);\n    \n    // and finally cut out the inner area to create the black hole:\n    col *= smoothstep(BlackHoleRadius, BlackHoleRadius + 0.04/*antialiasing*/, length(uv));\n    \n    // Output to screen\n    fragColor = vec4(vec3(col), 1.0);\n}","name":"Image","description":"","type":"image"}]}