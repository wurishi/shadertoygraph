{"ver":"0.1","info":{"id":"llXXzf","date":"1438529591","viewed":395,"name":"[SIG15] EntryLevel","username":"dila","description":"Just enough time for a quick entry.","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["tunnel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const float pi = 3.14159;\n\nmat3 xrot(float t)\n{\n    return mat3(1.0, 0.0, 0.0,\n                0.0, cos(t), -sin(t),\n                0.0, sin(t), cos(t));\n}\n\nmat3 yrot(float t)\n{\n    return mat3(cos(t), 0.0, -sin(t),\n                0.0, 1.0, 0.0,\n                sin(t), 0.0, cos(t));\n}\n\nmat3 zrot(float t)\n{\n    return mat3(cos(t), -sin(t), 0.0,\n                sin(t), cos(t), 0.0,\n                0.0, 0.0, 1.0);\n}\n\nvec2 map(vec3 p)\n{\n    p.x += sin(p.z);\n    p *= zrot(p.z);\n    float d = 1000.0;\n    vec3 q = fract(p) * 2.0 - 1.0;\n    float idx = 0.0;\n    for (int i = 0; i < 3; ++i) {\n\n\t\tq = sign(q) * (1.0 - 1.0 / (1.0 + abs(q) * 0.8));\n        \n        float md = length(q) - 0.5;\n        \n        float ss = 0.5 + 0.5 * sin(p.z + md * float(i) * 6.0);\n\n        float cyl = length(p.xy) - 0.5 - ss;\n        \n        md = max(md, -cyl);\n        \n        if (md < d) {\n            d = md;\n            idx = float(i);\n        }\n    } \n    return vec2(d, idx);\n}\n\nvec3 normal(vec3 p)\n{\n\tvec3 o = vec3(0.1, 0.0, 0.0);\n    return normalize(vec3(map(p+o.xyy).x - map(p-o.xyy).x,\n                          map(p+o.yxy).x - map(p-o.yxy).x,\n                          map(p+o.yyx).x - map(p-o.yyx).x));\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n \tfloat t = 0.0;\n    for (int i = 0; i < 64; ++i) {\n     \tvec3 p = o + r * t;\n        float d = map(p).x;\n        t += d * 0.3;\n    }\n    return t;\n}\n\nvec3 _texture(vec3 p)\n{\n \tvec3 ta = texture(iChannel0, vec2(p.y,p.z)).xyz;\n    vec3 tb = texture(iChannel0, vec2(p.x,p.z)).xyz;\n    vec3 tc = texture(iChannel0, vec2(p.x,p.y)).xyz;\n    return (ta + tb + tc) / 3.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv = uv * 2.0 - 1.0;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0 - dot(uv,uv) * 0.33));\n    \n    r *= zrot(iTime * 0.25) * yrot(-sin(iTime));\n    \n    vec3 o = vec3(0.0, 0.0, 0.0);\n    o.z += iTime;\n    o.x += -sin(o.z);\n    \n    float t = trace(o, r);\n    vec3 w = o + r * t;\n    vec3 sn = normal(w);\n    vec2 fd = map(w);\n    vec3 ref = reflect(r, sn);\n    \n    vec3 diff = vec3(0.0, 0.0, 0.0);\n    if (fd.y == 0.0) {\n        diff = vec3(1.0, 0.0, 0.0);\n    } else if (fd.y == 1.0) {\n        diff = vec3(0.0, 1.0, 0.0);\n    } else if (fd.y == 2.0) {\n        diff = vec3(0.0, 0.0, 1.0);\n    } else {\n        diff = vec3(1.0, 1.0, 1.0);\n    }\n    \n    diff += _texture(w);\n    diff += texture(iChannel1, ref).xyz;\n    \n    diff = mix(diff, vec3(1.0), abs(sn.y));\n    diff = mix(vec3(0.8, 0.0, 0.0), diff, abs(sn.y));\n    \n    float prod = max(dot(sn, -r), 0.0);\n    diff *= prod;\n    \n    float fog = 1.0 / (1.0 + t * t * 0.1 + fd.x * 100.0);\n    vec3 fc = diff * fog;\n    \n\tfragColor = vec4(sqrt(fc), 1.0);\n}","name":"Image","description":"","type":"image"}]}