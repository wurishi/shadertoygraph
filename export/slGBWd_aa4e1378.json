{"ver":"0.1","info":{"id":"slGBWd","date":"1665439718","viewed":145,"name":"Artober - Working","username":"Flopine","description":"Day 10 of artober, almost a third of the job is done! I'm tired...","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","isometric","pattern","everyday","octagonal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define square(u,s) (max(abs(u.x), abs(u.y))-s)\n#define oct(u,s) (max( (abs(u.y)+abs(u.x))/sqrt(2.) , max(abs(u.x), abs(u.y)) )-s)\n\n#define dt(sp,of) fract((iTime+of)*sp)\n#define bounc(sp,of) sqrt(sin(dt(sp,of)*PI))\n\n\nstruct obj{\n    float d;\n    vec3 c;\n};\n\nobj minobj (obj a, obj b)\n{\n    if (a.d < b.d) return a;\n    else return b;\n}\n\nfloat twoD_DF (vec2 uv)\n{\n   vec2 uu = abs(fract(uv)-0.5), id, cp;\n   \n   if (uu.x + uu.y < 1.-sqrt(2.)/2.)\n   {\n       // square tiles\n       id = floor(uv);\n       cp = fract(uv)-.5;\n       return square(cp, .05);\n        \n   }\n   else \n   {\n       // octa tiles\n       id = floor(uv-.5);\n       cp = fract(uv-.5)-.5;\n       return abs(oct(cp, .25)-0.08);\n   }\n}\n\nfloat box (vec3 p, vec3 c)\n{return length(max(abs(p)-c,0.));}\n\nfloat od (vec3 p, float d)\n{return dot(p, normalize(sign(p)))-d;}\n\n// Found in iq's shader :\n// https://www.shadertoy.com/view/Xds3zN\nfloat sdOctogonPrism( in vec3 p, in float r, float h )\n{\n  const vec3 k = vec3(-0.9238795325,   // sqrt(2+sqrt(2))/2 \n                       0.3826834323,   // sqrt(2-sqrt(2))/2\n                       0.4142135623 ); // sqrt(2)-1 \n  // reflections\n  p = abs(p);\n  p.xy -= 2.0*min(dot(vec2( k.x,k.y),p.xy),0.0)*vec2( k.x,k.y);\n  p.xy -= 2.0*min(dot(vec2(-k.x,k.y),p.xy),0.0)*vec2(-k.x,k.y);\n  // polygon side\n  p.xy -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  vec2 d = vec2( length(p.xy)*sign(p.y), p.z-h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nobj SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n    vec3 pp = p;\n    \n    p.y += twoD_DF(p.xz)*0.6;\n    obj ground = obj(abs(p.y)-.2, vec3(0.99,0.6,0.9));\n   \n    p = pp;\n    float per = 3., r = 0.23;\n    vec2 id = floor((p.xz-per*.5)/per);\n    p.y -= bounc(.9, length(id)-0.025)*2.5;\n    p.xz = mod(p.xz-per*.5, per)-per*.5;\n    p.xz *= rot(dt(.8,0.)*(2.*PI));\n    \n    obj ball = obj(mix(od(p,r), box(p,vec3(r)), .35), vec3(0.,1.,0.3)) ;\n    \n    p = pp;\n    p.xz = mod(p.xz-per*.5, per)-per*.5;\n    float height = 0.1+bounc(.9, length(id));\n    obj piston = obj(sdOctogonPrism(p.xzy, 0.25, height), vec3(0.99));\n    \n    p.xz = mod(p.xz,2.)-1.;\n    obj column = obj(sdOctogonPrism(p.xzy, 0.2, 0.2), vec3(1.,.1,0.));\n    \n    obj scene = ground;\n    scene = minobj(scene, ball);\n    scene = minobj(scene, piston);\n    scene = minobj(scene, column);\n    \n    return scene;\n}\n\nvec3 gn (vec3 p)\n{\n    vec2 e = vec2(0.001,0.);\n    return normalize(SDF(p).d-vec3(SDF(p-e.xyy).d,SDF(p-e.yxy).d,SDF(p-e.yyx).d));\n}\n\nfloat AO (vec3 p, vec3 n, float e)\n{return clamp(SDF(p+e*n).d/e, 0., 1.);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 ro=vec3(uv*3.,-30.),rd=normalize(vec3(0.,0.,1.)),p=ro,\n    col=vec3(0.), l=normalize(vec3(1.,.6,-.5));\n    \n    bool hit=false; obj O;\n    \n    for (float i=0.; i<110.; i++)\n    {\n        O = SDF(p);\n        if (O.d<0.001)\n        {\n            hit=true; break;\n        }\n        p += O.d*rd*.7;\n    }\n    \n    if (hit)\n    {\n        vec3 n = gn(p);\n        float li = max(dot(n,l),0.);\n        float ao = AO(p,n,0.05) + AO(p,n,0.1) + AO(p,n,0.15); \n        col = mix(vec3(0.05,0.15,0.55), O.c, li)*ao/3.;\n    }\n    // Output to screen\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}