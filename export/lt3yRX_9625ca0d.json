{"ver":"0.1","info":{"id":"lt3yRX","date":"1533394432","viewed":400,"name":"Flower Patterns","username":"nr4","description":"Flower pattern with 2D signed distance functions for stars from https://www.shadertoy.com/view/4ldyRj\nTry changing N ;) \nWorking on proper antialiasing when adding stars with mix(.)","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","flower","spline","growth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * Flower Pattern\n * \n * Copyright (C) 2018  Alexander Kraus <nr4@z10.info>\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nconst float pi = acos(-1.);\nconst vec3 c = vec3(1.,0.,-1.);\n\n// compute distance to regular star\nfloat dstar(vec2 x, float N, vec2 R)\n{\n    float d = pi/N,\n        p0 = acos(x.x/length(x)),\n        p = mod(p0, d),\n        i = mod(round((p-p0)/d),2.);\n    x = length(x)*vec2(cos(p),sin(p));\n    vec2 a = mix(R,R.yx,i),\n    \tp1 = a.x*c.xy,\n        ff = a.y*vec2(cos(d),sin(d))-p1;\n   \tff = ff.yx*c.zx;\n    return dot(x-p1,ff)/length(ff);\n}\n\n#define A iResolution.y\n#define S(v) smoothstep(-1.5/A,1.5/A,v)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float N = 5., d = 2.*pi/N*sin(.1*iTime);\n    vec2 uv = fragCoord/A-vec2(.5*iResolution.x/A,.5), \n        k = vec2(cos(d),sin(d)),\n        t = c.zx, e;\n    mat2 R = mat2(k.x,k.y,-k.y,k.x);\n    \n    for(float i = 2.; i > .05; i = i*(.85+.1*sin(.3*iTime)))\n    {\n        uv = R*uv;\n        e = vec2(dstar(uv, N, i*vec2(1.+.5*cos(3.4221*iTime),1.+.5*sin(2.153*iTime))),i);\n        t = mix(t,e,step(-3./A,e.x));\n    }\n    e = vec2(.025-length(uv),pi); \n    \n    //set random colors\n    vec3 col = .8 + .5*cos(1.+uv.xyx+t.y*1.5e1+iTime+vec3(0.,2.,4.));\n    fragColor = vec4(col*mix(S(t.x),1.,.5)+S(-abs(t.x))+col.zxy*S(e.x)+S(-abs(e.x)),1.);\n}","name":"Image","description":"","type":"image"}]}