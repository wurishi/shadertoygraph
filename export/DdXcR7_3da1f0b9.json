{"ver":"0.1","info":{"id":"DdXcR7","date":"1686652616","viewed":117,"name":"Box sine wave - rgbguy","username":"rgbGuy","description":"SDF","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://www.youtube.com/watch?v=PGtv-dBi2wE Followed this amazing tutorial and a few other blogs\nint MAX_STEPS = 100;\nfloat SURFACE_DIST = 0.01;\nfloat MAX_DIST = 100.;\n\nfloat boxSDF(vec3 p, vec3 R, vec3 boxpos)\n{\n    return length(max(abs(p - boxpos) - R, 0.0));\n}\n\nfloat lineSDF(vec3 p, vec3 a, vec3 b, float R)\n{\n    float h = min(1.0, max(0.0, dot(p-a, b-a)/dot(b-a, b-a)));\n    return h*h*sin(iTime) + length(p-a - (b-a)*h) - R;\n}\n\n\nfloat sphereSDF(vec3 c, float r, vec3 p)\n{\n    float d = length(c-p);\n    return d - r;\n}\n\nfloat flatPlaneSDF(vec3 p)\n{ \n    //considering plane at y = -1\n    return p.y + 1.0;\n}\n\nfloat SceneSDF(vec3 p)\n{\n    float a = flatPlaneSDF(p);\n    for(int i = -2; i < 5; i++)\n    {\n        for(int j = 0; j < 2; j++)\n        {\n            a = min(a, boxSDF(p, vec3(0.1, 1. + sin(3.*iTime + float(i) + float(j)/3.), 0.1), vec3(i, -1, j + 2)));\n        }\n    }\n    return a; \n}\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    float D = 0.;\n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd*D;\n        float dS = SceneSDF(p);\n        D += dS;\n        \n        if(dS < SURFACE_DIST || D > MAX_DIST) break;\n    }\n    return D;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = SceneSDF(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = vec3(d) - vec3(\n        SceneSDF(p-e.xyy),\n        SceneSDF(p-e.yxy),\n        SceneSDF(p-e.yyx));\n    //this is tricky to understand. \n    //the normal of the surface IS the tangent of the distance field.\n    //It is the direction in which the distance increases the most.\n    //to understand this, try drawing a 2D surface, and sample sdf around a point and check.\n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(2, 3, 2);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    \n    //shadows\n    float d = RayMarch(p+n*SURFACE_DIST*2., l);\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord / iResolution.y) - vec2(0.5 * iResolution.x / iResolution.y, 0.5);\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0.7+ sin(iTime), 1. + .5*cos(iTime), -2.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, .8));\n    \n    float d = RayMarch(ro, rd);\n\n    vec3 p = ro + rd * d;\n    float dif = GetLight(p);\n    \n    col = vec3(dif);\n\n    fragColor = vec4(col/2. + 0.1,1.0);\n}","name":"Image","description":"","type":"image"}]}