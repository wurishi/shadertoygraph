{"ver":"0.1","info":{"id":"3styDf","date":"1601896764","viewed":110,"name":"Fun with Perlin Noise","username":"Ruzzyr","description":"Playing around with Perlin noise.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","simple","perlin","dynamic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))*43758.5453123);\n}\n\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy*8.;\n\tuv.x = uv.x*(iResolution.x/iResolution.y);\n\tvec2 mouse = iMouse.xy*8./iResolution.xy;\n    mouse.x = mouse.x*(iResolution.x/iResolution.y);\n    \n\tvec2 uvInterpolation = fract(uv);\n    uvInterpolation = smoothstep(0.,1.,uvInterpolation);\n    //uvInterpolation = uvInterpolation*uvInterpolation*(3.0-2.0*uvInterpolation);\n    vec2 uvFloor = floor(uv);\n    float rand = random(uv);\n    float a = random(uvFloor + vec2(0, 1));\n    float b = random(uvFloor + vec2(1, 1));\n    float c = random(uvFloor + vec2(1, 0));\n    float d = random(uvFloor + vec2(0, 0));\n    \n    // depending on either mouse click or function based on time a point will be moving across the screen.\n    float movement = 2. + length(mouse - uv);\n    if (iMouse.w  <= 0.)\n    {\n     \tvec2 coord = vec2(cos(iTime/2.)*iResolution.x/iResolution.y, sin(iTime/4.))*2.;\n    \tmovement = 2.0 + length((coord + vec2(0.5*8.*iResolution.x/iResolution.y, 0.5*8.)) - uv);\n    }\n    \n    /** Perlin Noise. */\n    float result = dot(vec2(1. - uvInterpolation.x, uvInterpolation.x), transpose(mat2(d, a, c, b))*vec2(1.-uvInterpolation.y, uvInterpolation.y));\n    //float result = mix(mix(a, b, uvInterpolation.x), mix(d, c, uvInterpolation.x), uvInterpolation.y); \n    fragColor = vec4(max(0.0, cos(result*300./movement + 0.7*pow(movement/2., 2.)*random(vec2(uv*16.)))));\n\n}","name":"Image","description":"","type":"image"}]}