{"ver":"0.1","info":{"id":"4c23DW","date":"1704244332","viewed":32,"name":"Shipp≈ç Scramble","username":"vichoeq","description":"Passing around the color slices until they come back.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","pattern","japanese"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\n#define rotate(a)           mat2( cos(a), -sin(a), sin(a), cos(a) )\n\n// Simple rainbow palette\n#define palette(t)        ( .5 + .5* cos( 6.28*( t +vec3(0,1,2)/3. ) ) )\n\n// Fetch the id of the current slice considering how it moved\n#define id_convert(p)       vec4( p.xy + p.zw - 1. , p.w, 1. - p.z)\n\nfloat sdf_shippo(vec2 uv, float r)\n{\n    #define FLT_MAX 3.402823466e+38\n    // Circle SDF\n    #define C(x,y)            ( length(uv - vec2(x,y) ) - r )\n    \n    float d = FLT_MAX;\n    \n    // SDF Union: Outer circles\n    d = min(d, C( r, r));\n    d = min(d, C(-r, r));\n    d = min(d, C( r,-r));\n    d = min(d, C(-r,-r));\n    \n    // SDF Intersection: Main Circle\n    return max(d, C(0,0));    \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{    \n    float scale = 1.9,\n           time = iTime - PI/2.,\n          angle = mod(time, PI/2.),\n         period = mod(floor(time/ (PI/2.)), 4.);\n        \n    // Screen coordinates\n    vec2 uv = scale * (fragCoord * 2. - iResolution.xy) / iResolution.y;      \n    \n    // Shift the plane\n    uv += .5*period;\n    \n    // Local coordinates\n    vec2 L = uv - round(uv);\n    L *= rotate(angle);    \n        \n    vec4 id = vec4(ceil(uv - .5),  // main coordinates (which circle is it)\n                   ceil(L));       // local coordinates (which slice is it)\n                   \n    \n    // Where is the current slice (maximum 4 iterations, after 4 it comes back)\n    for(float i = 0.; i < period; i++) id = id_convert(id);\n    \n    \n    float id_slice = .3 + hash12(id.xy+id.zw), // ID defines color and edge thickness\n         sd_shippo = sdf_shippo(L, .5) + .01,\n                 w = scale * 3./iResolution.y,\n            shippo = smoothstep(0., -w, sd_shippo),\n       shippo_edge = smoothstep(w, 0., abs(sd_shippo+.02) - .01*id_slice);\n                \n    fragColor.rgb = mix(shippo*palette(id_slice), vec3(1), shippo_edge);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n","name":"Common","description":"","type":"common"}]}