{"ver":"0.1","info":{"id":"NsjBDd","date":"1647787695","viewed":161,"name":"Light experiment","username":"ToppoT","description":"Illuminating brick wall with a light. Point and scroll with mouse.\nLight distribution. Luminosity factor and bias. Neighboring texels factor and bias. Local contrast according to luminosity variance between neighboring texels.\nPlay around with constants.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 LIGHT_COL = vec3(255., 253., 242.)/255.;\nvec3 SHADOW_COL = vec3(23., 23., 23.)/255.;\nfloat RADIUS = 0.225;\nfloat LIGHT_BRIGHTNESS = 3.25;\nfloat LIGHT_PENETRATION = 0.15;\nfloat LUMINOSITY_BIAS = 1.;\nfloat LUMINOSITY_FACTOR = 1.;\nfloat NEIGHBORING_CONTRAST_MAIN_FACTOR = 1.;\nfloat NEIGHBORING_CONTRAST_BIAS = 0.175;\nfloat NEIGHBORING_CONTRAST_FACTOR = 1.75;\nfloat NEIGHBORING_SIGMOID_LO = -0.75;\nfloat NEIGHBORING_SIGMOID_HI = 3.;\nfloat NEIGHBOR_KERNEL[9] = float[9](0.7, 1., 0.7, 1., 1., 1., 0.7, 1., 0.7);\n\nfloat NormalDistLight(float dist)\n{\n    return LIGHT_BRIGHTNESS / exp(dist * dist / RADIUS * 2.);\n}\n\nfloat SigmoidShapeLight(float dist)\n{\n    return LIGHT_BRIGHTNESS - LIGHT_BRIGHTNESS / (1. + exp(-3. / RADIUS * dist + 5.));\n}\n\nfloat Luminosity(vec3 rgbColor)\n{\n    return 0.2126 * rgbColor.r + 0.7152 * rgbColor.g + 0.0722 * rgbColor.b;\n}\n\nfloat NeighboringContrast(ivec2 fragCoord)\n{\n    fragCoord.x = fragCoord.x % 512;\n    fragCoord.y = fragCoord.y % 512;\n    vec3 color = texelFetch(iChannel0, fragCoord, 0).rgb;\n    float luminosity = Luminosity(color);\n    float avgLuminosity = luminosity;\n    float luminosityArray[9] = float[9](0., 0., 0., 0., luminosity, 0., 0., 0., 0.);\n    for (int y=-1; y<=1; y++)\n    {\n        for(int x=-1; x<=1; x++)\n        {\n            if (x==0 && y==0) continue;\n            ivec2 coord = fragCoord + ivec2(x, y);\n            coord.x = (coord.x + 512) % 512;\n            coord.y = (coord.y + 512) % 512;\n            vec3 c = texelFetch(iChannel0, coord, 0).rgb;\n            float l = Luminosity(c);\n            int index = 3 * (x+1) + (y+1);\n            luminosityArray[index] = l;\n            avgLuminosity += l;\n        }\n    }\n    avgLuminosity /= 9.;\n    \n    float luminosityVariance = 0.;\n    \n    for (int a=0; a<9; a++)\n    {\n        luminosityVariance += NEIGHBOR_KERNEL[a] * pow(avgLuminosity - luminosityArray[a], 2.);\n    }\n    \n    return luminosityVariance;\n}\n\nfloat CurveSpreadSigmoid(float value, float lo, float hi)\n{\n    lo = min(lo, -0.001f);\n    hi = max(hi, 0.001f);\n    \n    value = min(1., max(0., value));\n    float loValue = 1. / (1. + exp(-lo));\n    float hiValue = 1. / (1. + exp(-hi));\n    float avgY = (hiValue + loValue) / 2.;\n    float rangeX = hi - lo;\n    float rangeY = hiValue - loValue;\n\n    return (1. / (1. + exp(-(rangeX * value + lo))) - avgY) / rangeY + 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ar = iResolution.x / iResolution.y;\n    vec2 texResRatios = vec2( iResolution.x / 512., iResolution.y / 512.);\n    \n    vec2 m = iMouse.xy/iResolution.xy*texResRatios;\n    vec2 uv = fragCoord/iResolution.xy*texResRatios;\n    \n    float w = 1.5 * fwidth(uv.x);\n    \n    vec3 tex = texture(iChannel0, uv).rgb;\n    vec3 col = tex;// * SHADOW_COL;\n    \n    vec2 uv2 = uv;\n    uv2.x += 0.0035 * (sin(10. * uv.x + 10. * iTime) + sin(-11. * uv.x + 9. * iTime));\n    uv2.y += 0.0035 * (sin(13. * uv.y + 9. * iTime * 0.73) + sin(-12. * uv.y + 11. * iTime));\n    \n    float distFromPoint = length(uv2 - m);\n    //float lightAmount = SigmoidShapeLight(distFromPoint);\n    float lightAmount = NormalDistLight(distFromPoint);\n    float luminosity = Luminosity(tex);\n    float localContrast = NEIGHBORING_CONTRAST_MAIN_FACTOR * NeighboringContrast( ivec2(fragCoord) );\n    localContrast = CurveSpreadSigmoid(localContrast, NEIGHBORING_SIGMOID_LO, NEIGHBORING_SIGMOID_HI);\n    \n    col *= mix( SHADOW_COL, LIGHT_COL, LIGHT_PENETRATION * lightAmount + (1. - LIGHT_PENETRATION) * lightAmount *\n    (LUMINOSITY_FACTOR * pow(luminosity, LUMINOSITY_BIAS) +\n    NEIGHBORING_CONTRAST_FACTOR * pow(localContrast, NEIGHBORING_CONTRAST_BIAS)) /\n    (LUMINOSITY_FACTOR + NEIGHBORING_CONTRAST_FACTOR));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}