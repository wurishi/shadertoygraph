{"ver":"0.1","info":{"id":"flK3DD","date":"1637738606","viewed":273,"name":"canyons?","username":"kastorp","description":"done in 15 mins before work","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["extrusions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Canyons? by Kastorp\n//----------------------------\n\nvec3 erot(vec3 p, vec3 ax, float ro) { //@blackle\n    return mix(dot(p,ax)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\nfloat xt( in vec3 p, in float sdf, in float h ){//@iq\n    vec2 w = vec2( sdf, abs(p.z) - h );\n  \treturn min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\n\nfloat scene(vec3 p){\n    float z =.1, //noise zoom\n      h=.25, //slice thickness  (try .15)\n      n=6.,\n      d0=  length(p.xy)  -1.5, //disk size\n      s=texture(iChannel0,.5+p.xy*z,0.).x,\n      d=1e5;\n    float ps1= clamp(floor(-p.z/h)*h-n*h/2.,-.5,.5 -n*h), ps2=ps1+n*h;\n    for(float k = ps1;k<ps2 ;k+=h)  d=min(d, xt(p+vec3(0,0,k), max(d0,(s-k-.5)*z) ,h*.5));\n    \n   // for(float k = -.5+h;k<.5;k+=h)  d=min(d, xt(p+vec3(0,0,k), max(d0,(s-k-.5)*z) ,h*.5));\n    return d;\n\n}\n\nvec3 norm(vec3 p) {//@blackle\n    mat3 k = mat3(p,p,p)-mat3(0.01);\n    \n    return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 cam = normalize(vec3(1.5,uv));\n    vec3 init = vec3(-3.,0,0);\n    \n    float yrot =.8;\n    float zrot = 3.14 +iTime;\n    if (iMouse.z > 0.) {\n        yrot += -4.*mouse.y;\n        zrot = 4.*mouse.x;\n    }\n    cam = erot(cam, vec3(0,1,0), yrot);\n    init = erot(init, vec3(0,1,0), yrot);\n    cam = erot(cam, vec3(0,0,1), zrot);\n    init = erot(init, vec3(0,0,1), zrot);\n    \n    vec3 p = init;\n    bool hit = false;\n    for (int i = 0; i < 180 && !hit; i++) {\n        float dist = scene(p);\n        hit = dist*dist < 1e-7;\n        p+=dist*cam;\n        if (distance(p,init)>5. ||hit) break;\n    }\n    vec3 n = norm(p);\n    vec3 r = reflect(cam,n);\n\n\n    float spec = length(sin(r*.6 +.5))/sqrt(3.);\n    spec *= smoothstep(-.3,.2,scene(p+r*.2));\n    bool sh=false;\n    if(hit){\n        vec3 ld= normalize(vec3(1));\n        p+=ld*.01;\n        for (int i = 0; i < 50 && !sh; i++) {\n            float dist = scene(p);\n            sh = dist*dist < 1e-7;\n            p+=dist*ld;\n            if (dist>5.||sh) break;\n        }\n    }\n    \n    vec3 col = vec3(0.863,0.396,0.396)*spec*(sh?.4:1.) + pow(spec,8.);\n    float bgdot = length(sin(cam*8.)*.4+.6)/2.; //@blackle\n    vec3 bg = vec3(.1,.1,.11) * bgdot + pow(bgdot, 10.);\n    fragColor.xyz = hit ? col : bg;\n    fragColor = smoothstep(-.02,1.05,sqrt(fragColor)) * (1.- dot(uv,uv)*.5);\n}","name":"Image","description":"","type":"image"}]}