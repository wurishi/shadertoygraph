{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"float rand3d(vec3 co,float seed)\n{\n\treturn sin(fract((sin(dot(co ,vec3(30.233 * seed,7.233 * seed,20.2352 * seed)))) * 815150.5453)*321.321);\n}\n\nfloat Noise3d(vec3 pos,float Size,float seed)\n{\t    \n\tfloat GridX = floor(pos.x * Size);\n\tfloat NextGridX = floor( (pos.x  +(1./Size)) * Size);\n\tfloat GridY = floor(pos.y * Size);\n\tfloat NextGridY = floor( (pos.y  +(1./Size)) * Size);\n\tfloat GridZ = floor(pos.z * Size);\n\tfloat NextGridZ = floor( (pos.z  +(1./Size)) * Size);\t\n\tvec3 PosGrid = mod((pos),1./Size) * Size ;\n\t\n    PosGrid = smoothstep(0.,1.,PosGrid);\n    \n\t//FrontFace\n\tfloat CornerUpLeftFrontRandom = rand3d(vec3(GridX,GridY,GridZ),1.);\n\tfloat CornerUpRightFrontRandom = rand3d(vec3(NextGridX,GridY,GridZ),1.);\n\tfloat CornerDownLeftFrontRandom = rand3d(vec3(GridX,NextGridY,GridZ),1.);\n\tfloat CornerDownRightFrontRandom = rand3d(vec3(NextGridX,NextGridY,GridZ),1.);\n\tfloat MixUp_Front = mix(CornerUpLeftFrontRandom,CornerUpRightFrontRandom,PosGrid.x);\n\tfloat MixDown_Front = mix(CornerDownLeftFrontRandom,CornerDownRightFrontRandom,PosGrid.x);\t\t\n\t//BackFace\n\tfloat CornerUpLeftBackRandom = rand3d(vec3(GridX,GridY,NextGridZ),1.);\n\tfloat CornerUpRightBackRandom = rand3d(vec3(NextGridX,GridY,NextGridZ),1.);\n\tfloat CornerDownLeftBackRandom = rand3d(vec3(GridX,NextGridY,NextGridZ),1.);\n\tfloat CornerDownRightBackRandom = rand3d(vec3(NextGridX,NextGridY,NextGridZ),1.);\n\tfloat MixUp_Back = mix(CornerUpLeftBackRandom,CornerUpRightBackRandom,PosGrid.x);\n\tfloat MixDown_Back = mix(CornerDownLeftBackRandom,CornerDownRightBackRandom,PosGrid.x);\t\n\t//FrontFace\n\tfloat MixFrontFace = mix(MixUp_Front,MixDown_Front,PosGrid.y);\n\t//BackFace\n\tfloat MixBackFace = mix(MixUp_Back,MixDown_Back,PosGrid.y);\t\n\t//MixCube\n\tfloat MixCube = mix(MixFrontFace,MixBackFace,PosGrid.z);\t\n\treturn MixCube;\n}\n\nfloat perlinNoise3d(vec3 pos,float Size,float seed,float Iteration)\n{\n    float r =0.;\n\tfor(float i = 0.;i < Iteration;i++)\n    {\n        float freq = pow(2.,i);\n        r += Noise3d(pos,Size*freq,seed )*(1./freq);\n    }\n\treturn r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat Speed = 0.05;\n\t\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    \n    vec3 pos =vec3(uv.xy ,1.);\n    pos += (perlinNoise3d(pos + iTime*0.02,5.,1.,21. )*0.5+0.5)*0.1;\n        \n    float size = 10.;\n    float seed = 1.;\n    float iteration = 21.;\n    \n    \n    float r = perlinNoise3d(pos+ iTime*0.02,size,seed,iteration )*0.25+0.5;\n    \n\tfragColor = vec4(r,r,r,1);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MslSzS","date":"1403537074","viewed":471,"name":"3dNoise","username":"bytewave","description":"\n","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["3dnoise"],"hasliked":0,"parentid":"","parentname":""}}