{"ver":"0.1","info":{"id":"4tXfD7","date":"1512031670","viewed":156,"name":"Torus_Thingy_4","username":"balkhan","description":"torus","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","tori"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n*/\n\nfloat \tt;\n\n#define I_MAX\t\t200\n#define E\t\t\t0.001\n#define FAR\t\t\t10.\n\n#define\tFUDGE\n// artifactus disparatus !! (fudge needed cuz of high curvature distorsion)\n//#define PHONG\n\nvec4\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvec3\tcalcNormal(in vec3 pos, float e, vec3 dir);\nvoid\trotate(inout vec2 v, float angle);\nfloat\tmylength(vec2 p);\nfloat\tmylength(vec3 p);\n\nvec3\tbase;\nvec3\th;\nvec3\tvolumetric;\n\nvoid mainImage(out vec4 c_out, in vec2 f)\n{\n    h *= 0.;\n    volumetric *= 0.;\n    t = iTime;\n    vec3\tcol = vec3(0., 0., 0.);\n\tvec2\tuv  = vec2((f.x-.5*iResolution.x)/iResolution.x, (f.y-.5*iResolution.y)/iResolution.y);\n\tvec3\tdir = camera(uv);\n    vec3\tpos = vec3(-.0, .0, 25.0-sin(iTime*.125)*25.*0.-21.+2.);\n\n    vec4\tinter = (march(pos, dir));\n\n    if (inter.y == 1.)\n    {\n    \tbase = vec3(.5, .25, .8);\n\t    #ifdef PHONG\n        // substracting a bit from the ray to get a better normal\n\t\tvec3\tv = pos+(inter.w-E*10.)*dir;\n        vec3\tn = calcNormal(v, E, dir);\n        vec3\tev = normalize(v - pos);\n\t\tvec3\tref_ev = reflect(ev, n);\n        vec3\tlight_pos   = vec3(0.0, 0.0, 0.0);\n\t\tvec3\tlight_color = vec3(.0, .5, .2);\n        vec3\tvl = normalize( (light_pos - v) );\n\t\tfloat\tdiffuse  = max(0., dot(vl, n));\n\t\tfloat\tspecular = pow(max(0., dot(vl, ref_ev)), 10.8 );\n        col.xyz = light_color * (specular) + diffuse * base;\n        float\tdt = 1. - dot(n, normalize(-ev) );\n        col += smoothstep(.0, 1.0, dt)*vec3(.2, .7, .90);\n\t#else\n    \tcol.xyz = 1.*( +vec3(.3, .4, .2)*inter.w * .3-inter.x*.1 * vec3(.15, .2, .15) );\n\t#endif\n    \tcol  -= -.25 + h;\n    }\n    col += volumetric;\n    c_out =  vec4(col, h.x);\n}\n\nfloat\tscene(vec3 p)\n{\n    p.z+=sin(t*.5)*2.;\n    float\tballs = 1e5;\n    float\tlumos = 1e5;\n\tvec3\tpr;\n\n    vec2\tq;\n    \n    pr = p;\n    \n    rotate(pr.yz , iTime*.5);\n    rotate(pr.xz , iTime*1.);\n        \n    float\tata = atan(pr.x, pr.y)*1.+0.;\n    \n    q = vec2(length(pr.xy)-2., pr.z);\n    \n    rotate(q.xy, +iTime*2.+ata*2.);\n    \n    q.xy = abs(q.xy)-.25;\n    \n    rotate(q.xy, -iTime*2.+ata*1. );\n    q.x = abs(q.x)-.25;\n    rotate(q.xy, +iTime*2.+ata*8. );\n    q.xy = abs(q.xy)-.051;\n    balls = mylength(q)+(-.0405+sin( (ata*2.)-iTime*3.)*.0251);\n    \n    \n    \n    float\tlight = length(pr)-.01;\n\n\t#ifdef\tFUDGE\n    balls *= .5;\n    #endif\n    rotate(p.yx, iTime*.5);\n    #ifdef\tFUDGE\n    lumos = length(p.y-18.)-20.1;\n    h += (.251/(lumos + 10.1))*vec3(.0,.0,.5);\n    lumos = length(p.y+18.)-20.1;\n    h += (.251/(lumos + 10.1))*vec3(.0, .5, .0);\n    volumetric += .1/(light+2.1)*vec3(.085,.105,.505);\n    #else\n    lumos = length(p.y-18.)-10.1;\n    h += (.51/(lumos + 10.1))*vec3(.0,.0,.5);\n    lumos = length(p.y+18.)-10.1;\n    h += (.51/(lumos + 10.1))*vec3(.0, .5, .0);\n    volumetric += .2/(light+2.1)*vec3(.085,.105,.505);\n    #endif\n\t\n    return(balls);\n}\n\nvec4\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0, 0.0);\n    vec3\tp = vec3(0.0, 0.0, 0.0);\n    vec4\tstep = vec4(0.0, 0.0, 0.0, 0.0);\n\n    for (int i = -1; i < I_MAX; ++i)\n    {\n    \tp = pos + dir * dist.y;\n        dist.x = scene(p);\n        dist.y += dist.x*1.;\n        // log trick by aiekick\n        if (log(dist.y*dist.y/dist.x/1e5)>0. || dist.x < E || dist.y >= FAR)\n        {\n            if (dist.x < E)\n\t            step.y = 1.;\n            break;\n        }\n        step.x++;\n    }\n    step.w = dist.y;\n    return (step);\n}\n\n// Utilities\n\nfloat\tmylength(vec3 p)\n{\n\tfloat\tret = 1e5;\n    \n    p = p*p;\n    p = p*p;\n    p = p*p;\n    \n    ret = p.x + p.y + p.z;\n    ret = pow(ret, 1./8.);\n    \n    return ret;\n}\n\nfloat\tmylength(vec2 p)\n{\n\tfloat\tret = 1e5;\n    \n    p = p*p;\n    p = p*p;\n    p = p*p;\n    \n    ret = p.x + p.y;\n    ret = pow(ret, 1./8.);\n    \n    return ret;\n}\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n\treturn normalize(vec3(\n           march(pos+eps.xyy, dir).w - march(pos-eps.xyy, dir).w,\n           march(pos+eps.yxy, dir).w - march(pos-eps.yxy, dir).w,\n           march(pos+eps.yyx, dir).w - march(pos-eps.yyx, dir).w ));\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float\t\tfov = 1.;\n\tvec3\t\tforw  = vec3(0.0, 0.0, -1.0);\n\tvec3    \tright = vec3(1.0, 0.0, 0.0);\n\tvec3    \tup    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n","name":"Image","description":"","type":"image"}]}