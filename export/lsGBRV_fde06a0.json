{"ver":"0.1","info":{"id":"lsGBRV","date":"1532481262","viewed":211,"name":"Thing_9","username":"balkhan","description":"using BigWIngs's The Universe Within : https://www.shadertoy.com/view/lscczl","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","bigwings"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n* Using BigWIngs's The Universe Within : https://www.shadertoy.com/view/lscczl\n* on Buffer A\n* Buffer B is a game of life fed by Buffer A\n*/\n\n//#define dbg_life\n\n//#define TORUS_DISPL\n\nconst vec3 pink = vec3(1., .078, .576 );\n#define PI 3.14159\n\nfloat\tmylength(vec2 p);\nfloat\tmylength(vec3 p);\nvoid\trotate(inout vec2 p, float angle);\n\nvec3 h;\n\nfloat\tmap(vec3 p)\n{\n\tfloat mind, v;\n    p.y -= -3.;\n    p.z -= 5.;\n    #ifdef TORUS_DISPL\n    vec2 displ_torus = vec2(cos(p.z*.6125+iTime*2.), sin(p.z*.6125+iTime*2.))*1.;\n    #endif\n    \n    rotate(p.xz, iTime*.2);\n    rotate(p.zy, iTime*.12);\n\n    vec2 tcd;\n    vec3 np = p;\n    #ifdef TORUS_DISPL\n    np.xy += displ_torus * (cos(iTime*.25)*1.-0.);\n    #endif\n    vec2 q = vec2(length(np.xz)-5., np.y);\n    mind = length(q)-2.;\n    mind = abs(mind)+.01;\n    h += vec3(1.)*1.*1./max(.001, mind * mind*20000.1 + 15.3001);\n    tcd.x = atan(p.x, p.z)/(1.*PI)-PI*.0;\n    tcd.y = atan(q.x, q.y)/(1.*PI);\n    v = texture(iChannel1, tcd.xy*.5).x;\n    v = min(v, 1.);\n    mind -= v*.051;\n\n    float ball = 1e5;\n    \n    ball = length(p-0.*vec3(cos(iTime), .0, sin(iTime)))-10.25;\n    \n    if (ball <= .0)\n    h += vec3(0.75, .050, .05)*1./max(.01, v*v*200000.+mind*5.25*1.0*(1.+sin(iTime*.5)) + 5.751);\n    \n    ball = abs(ball)+.7501;\n    \n    mind = min(mind, ball);\n    \n    h += vec3(0.05, .10, .405)*1./max(.01, ball*ball*1.1 + 1.0751);\n\n    \n    float cy = 1e5;\n    float ppy = p.y - sin(iTime*.25)*20.;\n    cy = length(ppy)-5.5125;\n    cy = max(cy, length(p.xz)-2.5 );\n    tcd.x = atan(p.x, p.z)/PI;\n    tcd.y = ppy*.125;\n    v = texture(iChannel0, tcd.xy*1.).x;\n    \n    cy = max(cy, -(length(p.xz)-2.) );\n    cy = abs(cy)-.0050+v*.1;\n    h += vec3(0.25, .050, .805)*1./max(.01, cy*cy*2. + 5.751);\n    mind = min(mind, cy);\n    \n    ball = 1e5;\n    \n    vec3 sp = p;\n    \n    rotate(sp.xz, iTime*.5);\n    sp = abs(sp)-11.;\n    sp = abs(sp)-.5;\n    sp = abs(sp)-.5;\n    rotate(sp.yz, iTime*.5);\n    rotate(sp.xz, iTime*.5+1.5);\n    sp = abs(sp)-.5;\n    sp = abs(sp)-.5;\n    rotate(sp.yz, iTime);\n    rotate(sp.xz, iTime+1.5);\n    sp = abs(sp)-.5;\n    ball = mylength(sp.xyz)+.1;\n    mind = min(mind, ball);\n    h += vec3(.0, .27, .0)/max(.51, ball*ball*100.1+0.);\n    \n    return mind;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.yy;\n\tvec3 ro = vec3(.0, .0, -0.-20.+1.0*-10.*sin(iTime*.1) );\n    vec3 rd = vec3(uv.x, uv.y, 1.);\n    vec3 p;\n    \n    vec2 dist = vec2(.0, .0);\n    for (float i = .0; i < 200.; i++)\n    {\n        \n        p = ro + rd * dist.y;\n        dist.x = map(p)*.5;\n        dist.y += dist.x;\n    \tif (dist.x < .0001 || dist.y > 50.)\n            break ;\n    }\n    \n    vec3 col = vec3(.0,.0,.0);\n    \n    col += .5*h*vec3(.35, .7, .2);\n    #ifdef dbg_life\n    col = texture(iChannel1, fragCoord.xy/iResolution.xy).xyz- texture(iChannel0, fragCoord.xy/iResolution.xy).xyz*1.;;\n    #endif\n        \n    fragColor = vec4(col,1.0);\n}\n\nvoid rotate(inout vec2 p, float angle)\n{\n\tp = vec2(cos(angle)*p.x+sin(angle)*p.y, -sin(angle)*p.x+cos(angle)*p.y);\n}\n\nfloat\tmylength(vec3 p)\n{\n\treturn max(abs(p.x), max(abs(p.y), abs(p.z)));\n}\n\nfloat\tmylength(vec2 p)\n{\n\treturn max(abs(p.x), abs(p.y));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// The Universe Within - by Martijn Steinrucken aka BigWings 2018\n// countfrolic@gmail.com\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// After listening to an interview with Michael Pollan on the Joe Rogan\n// podcast I got interested in mystic experiences that people seem to\n// have when using certain psycoactive substances. \n//\n// For best results, watch fullscreen, with music, in a dark room.\n// \n// I had an unused 'blockchain effect' lying around and used it as\n// a base for this effect. Uncomment the SIMPLE define to see where\n// this came from.\n// \n// Use the mouse to get some 3d parallax.\n\n// Music - Terrence McKenna Mashup - Jason Burruss Remixes\n// https://soundcloud.com/jason-burruss-remixes/terrence-mckenna-mashup\n//\n// YouTube video of this effect:\n// https://youtu.be/GAhu4ngQa48\n\n#define S(a, b, t) smoothstep(a, b, t)\n#define NUM_LAYERS 1.\n\n//#define SIMPLE\n\nfloat N21(vec2 p)\n{\t// Dave Hoskins - https://www.shadertoy.com/view/4djSRW\n\tvec3 p3  = fract(vec3(p.xyx) * vec3(443.897, 441.423, 437.195));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 GetPos(vec2 id, float t) {\n    float n = N21(id);\n    float n1 = fract(n*1.);\n    float n2 = fract(n*10.);\n    float a = t+n;\n    return vec2(sin(a*n1), cos(a*n2))*.4;\n}\n\nfloat GetT(vec2 ro, vec2 rd, vec2 p) {\n\treturn dot(p-ro, rd); \n}\n\nfloat LineDist(vec3 a, vec3 b, vec3 p) {\n\treturn length(cross(b-a, p-a))/length(p-a);\n}\n\nfloat df_line( in vec2 a, in vec2 b, in vec2 p)\n{\n    vec2 pa = p - a, ba = b - a;\n\tfloat h = clamp(dot(pa,ba) / dot(ba,ba), 0., 1.);\t\n\treturn length(pa - ba * h);\n}\n\nfloat line(vec2 a, vec2 b, vec2 uv) {\n    float r1 = .04;\n    float r2 = .01;\n    \n    float d = df_line(a, b, uv);\n    float d2 = length(a-b);\n    float fade = S(1.5, .5, d2);\n    \n    fade += S(.05, .02, abs(d2-.75));\n    return S(r1, r2, d)*fade;\n}\n\nfloat NetLayer(vec2 st, float n, float t) {\n    vec2 id = floor(st)+n;\n\n    st = fract(st)-.5;\n\t\n    vec2 p = GetPos(id, t*1.0);\n    float d = length(st-p);\n    float m = 0.;\n    float sparkle = 0.;\n    \n    for(float y=-1.; y<=1.; y++) {\n    \tfor(float x=-1.; x<=1.; x++) {\n            vec2 offs = vec2(x,y);\n            vec2 p2 = offs+GetPos(id+offs, t*1.0);\n            \n            m += line(p, p2, st);\n\n            d = length(st-p2);\n            \n            float s = (.005/(d*d));\n            sparkle += s;\n    \t}\n    }\n    \n    \n    vec2 pt = vec2(0,1)+GetPos(id+vec2(0,1), t*1.0);\n    vec2 pr = vec2(1,0)+GetPos(id+vec2(1,0), t*1.0);\n    vec2 pb = vec2(0,-1)+GetPos(id+vec2(0,-1), t*1.0);\n    vec2 pl = vec2(-1,0)+GetPos(id+vec2(-1,0), t*1.0);\n    \n    m += line(pt, pr, st);\n\tm += line(pr, pb, st);\n    m += line(pb, pl, st);\n    m += line(pl, pt, st);\n    \n    float sPhase = 1.;\n    sPhase = 1.;\n    \n    return m;\n}\n\nvoid rotate(inout vec2 p, float angle)\n{\n\tp = vec2(cos(angle)*p.x + sin(angle)*p.y, -sin(angle)*p.x + cos(angle)*p.y );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    \n    float t = iTime*.251;\n    \n    float s = sin(t);\n    float c = cos(t);\n    mat2 rot = mat2(c, -s, s, c);\n    vec2 st = uv;\n    \n    float m = 0.;\n    for(float i=0.; i<1.; i+=1./NUM_LAYERS) {\n        float size = 15.;\n        \n        m +=  NetLayer(st*size*1., i, iTime*4.25);\n    }\n    vec3 col = vec3(1., 1., 1.)*m;\n    \n    fragColor = vec4(clamp(col, .0, 1.),1);\n}\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nvec2 do_life(sampler2D tex, vec2 uv, vec2 texsize)\n{\n\tvec2 ret = vec2(.0);\n\n    ret += texture(tex, vec2(uv.x , uv.y) ).xy * 1.;\n    vec2 sum = vec2(.0);\n\n    sum += texture(tex, vec2(uv.x -texsize.x, uv.y) ).xy;\n    sum += texture(tex, vec2(uv.x +texsize.x, uv.y) ).xy;\n    sum += texture(tex, vec2(uv.x , uv.y -texsize.y) ).xy;\n    sum += texture(tex, vec2(uv.x , uv.y +texsize.y) ).xy;\n    sum += texture(tex, vec2(uv.x -texsize.x, uv.y -texsize.y) ).xy;\n    sum += texture(tex, vec2(uv.x +texsize.x, uv.y -texsize.y) ).xy;\n    sum += texture(tex, vec2(uv.x +texsize.x, uv.y +texsize.y) ).xy;\n    sum += texture(tex, vec2(uv.x -texsize.x, uv.y +texsize.y) ).xy;\n    if (ret.x > .0) // alive\n    {\n    \tif (sum.x >= 2. && sum.x <=3.)\n        {\n            ret.x = 1.;\n            ret.y = 1.;\n        }\n        else\n        {\n            ret.x = .0;\n            ret.y = .0;\n        }\n    }\n    else if (ret.x <= .0)\n    {\n        if (sum.x == 3.)\n        {\n            ret.x = 1.;\n            ret.y = 1.;\n        }\n        else\n        {\n            ret.x = .0;\n            ret.y = .0;\n        }\n    }\n    return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2\tuv = (fragCoord.xy) / iResolution.xy;\n    vec2\ttexsize = 1./iResolution.xy;\n    vec4\tret = texture(iChannel1, uv);\n\n    fragColor *= .0;\n    fragColor.xy = do_life(iChannel1, uv, texsize);\n    fragColor.xy += texture(iChannel0, (uv.xy)).xy;\n    fragColor.xy = clamp(fragColor.xy, .0, 1.);\n}","name":"Buf B","description":"","type":"buffer"}]}