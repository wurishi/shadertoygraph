{"ver":"0.1","info":{"id":"wtKSDV","date":"1583685535","viewed":95,"name":"Try Spinning That's A Good Trick","username":"decstar77","description":"NA","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["spinning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n\nvec3 DrawCircle(vec2 uv, vec2 c, float r)\n{\n    float d =distance(uv, c);\n    return vec3(smoothstep(r * 2., r * 1.5, d));\n}\nvec3 DrawHollowCircle(vec2 uv, vec2 c, float r, float w)\n{\n    float d = distance(uv, c);  \n    float a1 = smoothstep(r + w/2., r, d);\n    float a2 = smoothstep(r - w/2., r - w, d);\n    return vec3(a1 - a2);    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n \tvec2 uv = (fragCoord + fragCoord - iResolution.xy) / (iResolution.y - 50.f);\n\n    // Time varying pixel color\n\tfloat t = iTime;\n    \n    vec3 col = vec3(0);    \n    vec2 center = vec2(0., 0.);\n    float raduis = 1.;\n    float diameter = raduis * 2.;\n    float h = 0.45 * sin(t * PI/2.); \n    h = 0.45f;\n    vec2 q = h * vec2(cos(PI/2. * t), sin(PI/2. * t));\n\t\n    \n    float count = 12.;\n    for (float i = .0; i < count; i++)\n    {\n        float r = radians(360./count * i);\n        vec2 point = vec2(cos(r * t), sin(r * t));\n        vec2 line_start = point;\n        vec2 line_end = q;\n\n        vec2 line_dir =  line_start - line_end;\n        float distance_to_line = abs(line_dir.y * uv.x - \n                                      line_dir.x * uv.y + \n                                      line_start.x * line_end.y - \n                                      line_start.y * line_end.x) / length(line_dir);                                                      \n\n\n\n\t\t//if (distance(line_end, point) < 0.5)\n        if (distance(uv, center) < raduis && distance(uv, point) < raduis * 0.5)\n        \tcol += smoothstep(0.01 * 2., 0.01, distance_to_line);// distance_to_line < 0.01 ? vec3(1) : vec3(0);\n        \n        col += DrawCircle(uv, line_start, 0.03);\n       \n    }\n    col += vec3(DrawCircle(uv, q, 0.03).x, 0.,0.);   \n    col += DrawHollowCircle(uv, center, raduis, 0.03);\n    //col = uv.x < min(p1.x, p2.x) ? vec3(0) : col;\n    //col = uv.x > max(p1.x, p2.x) ? vec3(0) : col;\n    //col = uv.y < min(p1.y, p2.y) ? vec3(0) : col;\n    //col = uv.y > max(p1.y, p2.y) ? vec3(0) : col;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}