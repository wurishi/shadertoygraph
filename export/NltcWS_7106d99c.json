{"ver":"0.1","info":{"id":"NltcWS","date":"1660455737","viewed":77,"name":"Line Mirror Dimension","username":"creikey","description":"Going to try different approach with voronoi, kinda meh with just lines","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mirror"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// everything here is cc0\n\nfloat signedLineDist(vec2 point, vec2 start, vec2 end) {\n    // everything relative to start point\n    point = point - start;\n    end = end - start;\n    \n    // the normal vector!\n    vec2 norm = normalize(end);\n    float tmp = norm.x;\n    norm.x = -norm.y;\n    norm.y = tmp;\n    \n    return dot(norm, normalize(point));\n}\n\nfloat aboveLine(vec2 point, vec2 start, vec2 end) {\n    if(signedLineDist(point, start, end) > 0.0) {\n        return 1.0;\n    }\n    return 0.0;\n}\n\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat aboveCircle(vec2 point, float speed, vec2 offset) {\n    float time = speed*iTime + speed*100.0; // start randomization\n    vec2 circle_vec = vec2(cos(time), sin(time));\n    vec2 p1 = offset - circle_vec;\n    vec2 p2 = offset + circle_vec;\n    \n    return aboveLine(point, p1, p2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 unmodifiedUv = fragCoord/iResolution.xy;\n    vec2 uv = unmodifiedUv;\n\n    vec3 col = vec3(1.0);\n    \n    \n    vec2 fracturedUv = vec2(0.0);\n    \n    fracturedUv += aboveCircle(uv, 0.5, vec2(0.5, 0.4))*vec2(0.1, 0.2);\n    fracturedUv += aboveCircle(uv, 0.5, vec2(0.4, 0.3))*vec2(-0.05, 0.2);\n    fracturedUv += aboveCircle(uv, 0.34, vec2(0.5, 0.8))*vec2(-0.1, 0.1);\n    fracturedUv += aboveCircle(uv, 0.45, vec2(0.2, 0.3))*vec2(0.3, -0.2);\n    fracturedUv += aboveCircle(uv, 0.1, vec2(0.4, 0.7))*vec2(-0.15, 0.12);\n    fracturedUv += aboveCircle(uv, 0.3, vec2(0.7, 0.8))*vec2(0.2, -0.3);\n    \n    fracturedUv += aboveCircle(uv, 0.34, vec2(0.4, 0.6))*vec2(-0.1, 0.1);\n    fracturedUv += aboveCircle(uv, 0.45, vec2(0.3, 0.4))*vec2(0.3, -0.2);\n    fracturedUv += aboveCircle(uv, 0.1, vec2(0.6, 0.3))*vec2(-0.15, 0.12);\n    fracturedUv += aboveCircle(uv, 0.3, vec2(0.9, 0.9))*vec2(0.2, -0.3);\n    \n    uv += fracturedUv + (hash12(fracturedUv) - 0.5)*iTime*0.1;\n\n    float dist = length(unmodifiedUv - vec2(0.5))/2.0;\n    //uv = mix(unmodifiedUv, uv, dist);\n\n    //col = texture(iChannel0, uv)\n    col = mix(texture(iChannel0, unmodifiedUv), texture(iChannel0, uv), clamp(dist, 0.0, 1.0)).rgb;\n    //col = vec3(dist);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}