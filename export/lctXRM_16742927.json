{"ver":"0.1","info":{"id":"lctXRM","date":"1713745350","viewed":41,"name":"Another one!","username":"walter023","description":"For a second I thought I can't pull this out....till remembered it's just rotation and scaling ðŸ˜…","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float threshold = 4.0;\nconst float maxIndex = 150.0;\nfloat red = 0.03;\n// IQ \nvec3 palette(in float t) {\n  vec3 a = vec3(0.618, 0.658, 0.500);\n  vec3 b = vec3(-0.082, 0.500, -0.452);\n  vec3 c = vec3(1.000, 1.000, 1.000);\n  vec3 d = vec3(0.000, 0.333, 0.667);\n  return a + b * cos(6.28318 * (c * t + d));\n}\n\nvec2 setCamera(vec2 uv) {\n  float rad = sin(iTime * .002) * 2.1;\n  float s = sin(rad);\n  float c = cos(rad);\n  uv = mat2(c, -s, s, c) * uv;\n  uv -= vec2(5.403, 0.0);\n  return uv * .31;\n}\n\nmat2 scale(vec2 by) {\n  return mat2(by.x, 0.0, 0.0, by.y);\n}\n\n// ZnÂ² + C\nvec2 Mandelbrot(vec2 uv, vec2 z) {\n  float zr = z.x * z.x - z.y * z.y;\n  float zi = 2.0 * z.x * z.y;\n  return vec2(zr, zi) + uv;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n  uv.x +=2.0;\n  uv = scale(vec2(sin(iTime * .4) + 1.0)) * uv;\n  uv = setCamera(uv);\n  vec3 finalColor = vec3(0);\n  float d = (length(uv));\n  vec2 z = uv;\n  for(float i = 0.0; i < maxIndex; i++) {\n    red += 0.025;\n    if(length(z) > threshold) {\n      finalColor = vec3(red, 0, 0);\n      break;\n    }\n    z = Mandelbrot(uv, z);\n    finalColor = palette(0.0005 / d + iTime * .1 + i * .4);\n  }\n\n  fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}