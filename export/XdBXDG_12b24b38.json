{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// References - http://www.demoscene.jp/?p=811\n//            - https://www.shadertoy.com/view/4s2XRd \nconst float eps = 0.001;\nconst float thresh = 2.0;\nconst float lowThresh = 0.25;\n\nvec3 light = normalize(vec3(-.5, 0.2, -0.2));\nvec3 light2 = normalize(vec3(.5, 0.2, 0.2));\n\n\nconst float pi = 3.14159265359;\n\n\nvec3 trans(vec3 p)\n{\n  return mod(p, 8.0)-4.0;\n}\n \nmat3 rx, ry, rz;\n\nfloat lengthN(vec3 v, float n)\n{\n  v*=rx*ry*rz;\n  vec3 tmp = pow(abs(v), vec3(n));\n  return pow(tmp.x+tmp.y+tmp.z, 1.0/n);\n}\n \nfloat distanceFunction(vec3 pos)\n{\n  //pos*=rz;  \n  return lengthN(trans(pos), 4.0) - 1.0;\n}\n \nvec3 getNormal(vec3 p)\n{\n  const float d = 0.0001;\n  return\n    normalize\n    (\n      vec3\n      (\n        distanceFunction(p+vec3(d,0.0,0.0))-distanceFunction(p+vec3(-d,0.0,0.0)),\n        distanceFunction(p+vec3(0.0,d,0.0))-distanceFunction(p+vec3(0.0,-d,0.0)),\n        distanceFunction(p+vec3(0.0,0.0,d))-distanceFunction(p+vec3(0.0,0.0,-d))\n      )\n    );\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    float movX = -100.+100.*sin(iTime*.02);\n    float movY = -155.+155.*sin(iTime*.06);\n    float movZ = -115.+115.*sin(iTime*.04);\n\n  vec2 pos = (fragCoord.xy*2.0 -iResolution.xy) / iResolution.y;\n  vec3 camPos = vec3(movX,movY,movZ);\n  vec3 camDir = vec3(0.0, 0.0, -1.0);\n  vec3 camUp = vec3(0.0, 1.0, 0.0);\n    \n  float radian = (iTime*pi)/180.0; \n\n  ry = mat3(cos(radian*12.), 0.0,-sin(radian*12.),\n            0.0, 1.0, 0.0, \n            sin(radian*12.), 0.0, cos(radian*12.)  );\n    \n  rz = mat3(cos(radian*150.),-sin(radian*150.), 0.0,\n            sin(radian*150.), cos(radian*150.), 0.0,\n            0.0, 0.0, 1.0 );\n     \n  rx = mat3(1.0, 0.0, 0.0,\n            0.0, cos(radian*13.), sin(radian*13.), \n            0.0,-sin(radian*13.), cos(radian*13.) );\n    \n        \n  camDir *= rx*ry;//*ry;//*rx;\n  camUp  *= rx*ry;//*ry;//*rx;\n\n  vec3 camSide = cross(camDir, camUp);\n  float focus = 1.8;\n  \n  vec3 rayDir = normalize(camSide*pos.x + camUp*pos.y + camDir*focus);\n \n  float t = 0.0, d;\n  vec3 posOnRay = camPos;\n \n  for(int i=0; i<48; ++i)\n  {\n    d = distanceFunction(posOnRay);\n    t += d;\n    posOnRay = camPos + t*rayDir;\n  }\n  \n  vec3 normal = getNormal(posOnRay);\n      \n  if(abs(d) < 0.001)\n  {  \n    //https://www.shadertoy.com/view/4s2XRd\n    float diffuse = clamp( dot(normal, light), 0., 1.);\n    float specular = 1.5*pow(clamp(dot(reflect(rayDir, normal), light), 0., 1.), 180.);\n    float specular2 = 1.5*pow(clamp(dot(reflect(rayDir, normal), light2), 0., 1.), 200.);\n\tvec3 brdf = 1.5*vec3(.10, .11, .11);\n\tfloat fre = 0.1*pow(clamp(1. + dot(normal, rayDir), 0., 1.), 2.);\n    brdf += 1.30*diffuse*vec3(1., .9, .75);\n\t\n\tfragColor = vec4(normal+specular+specular2+fre+brdf, 1.0);\n  }else\n  {\n    fragColor = vec4(0.0);\n  }\n} \n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdBXDG","date":"1415275040","viewed":376,"name":"CubeSpace","username":"Passion","description":"I added some camera movement and rotation to this example http://www.demoscene.jp/?p=811 and added shading from this shader https://www.shadertoy.com/view/4s2XRd -Edit- Added rotation to the reprojected cube (line 40)","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","cubes"],"hasliked":0,"parentid":"","parentname":""}}