{"ver":"0.1","info":{"id":"7ddGRj","date":"1723798860","viewed":19,"name":"diffuse_test","username":"nako","description":"study","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphere_dist(vec3 pos , vec3 center, float r){\n    return length(pos-center) - r;\n}\n\nfloat map(vec3 pos){\n    vec3 center = vec3(0.0, 0.0, 5.5);\n    float r = 3.5;\n    float d1 = sphere_dist(pos, center, r);\n    return d1;\n}\n\nvec3 calc_normal(vec3 pos){\n    vec3 normal;\n    vec3 diff = vec3(0.001, 0.0, 0.0);\n    normal.x = map(pos+diff.xyy) - map(pos-diff.xyy);\n    normal.y = map(pos+diff.yxy) - map(pos-diff.yxy);\n    normal.z = map(pos+diff.yyx) - map(pos-diff.yyx);\n    \n    return normalize(normal);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    \n    //sphere marching\n    vec3 ro = vec3(0., 0., 0.);\n    vec3 rd = vec3(uv, 1.0);\n    \n    float t = 0.0;\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n    for(int i=0; i<99; i++){\n        vec3 pos = ro + t*rd;\n        float dist = map(pos);\n        if(dist<0.0001){\n            //col = vec3(1.-dist*0.001);\n            vec3 normal = calc_normal(pos);\n            col = normal*0.5 + 0.5;\n            vec3 light = vec3(sin(5.*iTime)*3.0, cos(2.*iTime)*3.0, 0.0);\n            vec3 light_direction = normalize(light - pos);\n            float diffuse = dot(normal, light_direction);\n            col *= diffuse;\n            break;\n        }\n        t += dist;\n    }\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}