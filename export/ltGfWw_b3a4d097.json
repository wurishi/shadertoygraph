{"ver":"0.1","info":{"id":"ltGfWw","date":"1542719780","viewed":67,"name":"Ray tracer supo 1","username":"J2G8W","description":"more supo 1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cambridge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Ray\n{\n    vec3 O;\n    vec3 D;\n};\n    \nstruct Sphere\n{\n    vec3 Pos;\n    float Rad;\n}; \n\nstruct Material\n{\n    vec3 AmbientCol;\n    vec3 DiffuseCol;\n    vec3 SpecularCol;\n    \n};\n    \n//Points at light\nconst vec3 LDIR =  normalize(vec3(0.0,1.0,-1.0));\n\nvoid Grayscale(inout vec3 rgb)\n{\n   float avg = 0.3*rgb.x + 0.59*rgb.y + 0.11*rgb.z;\n    rgb = vec3(avg, avg, avg);\n}\n\n\nvoid GrayscaleInterp(inout vec3 rgb,float coeff)\n{\n   float avg = (rgb.x + rgb.y + rgb.z)/3.0;\n   vec3 gscale = vec3(avg, avg, avg);\n   rgb = mix(rgb,gscale,pow(coeff,1.5));\n}\n\nvoid Phong(vec3 L, vec3 N, vec3 V, float sh, out float d, out float s)\n{\n    d = dot(N,L); //diffuse\n   \n    //Specular\n    vec3 r = normalize(reflect(L,N));\n    s = pow(dot(-r,V),sh);  \n    s = max(0.01,s);\n    \n   \n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.0 * uv - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n\n   \n    vec3 col = vec3(0.0);\n    \n    Ray ray;\n    ray.O = vec3(0.0,0.0,-4.0);\n    ray.D = normalize(vec3(uv.x,uv.y,1.0));    \n\n    Sphere sph;\n    sph.Pos = vec3(sin(iTime)*2.0,0.0,0.0);\n    sph.Rad = 2.0;\n    \n    Material mat;\n    mat.AmbientCol = vec3(0.2,0.1,0.2);\n    mat.DiffuseCol = vec3(1.0,0.0,1.0);\n    mat.SpecularCol = vec3(1.0,1.0,1.0);\n    \n    float length = dot(ray.D,(sph.Pos-ray.O));\n    vec3 P = ray.O + length*ray.D;\n    float y = distance(P,sph.Pos);\n    float x = sqrt(sph.Rad*sph.Rad - y*y);\n    vec3 P1 = ray.O + ray.D*(length-x);\n    if (distance(P,sph.Pos) < sph.Rad){\n        col = vec3 (1);\n    } else{\n    \n    \n  \n    col += texture(iChannel0,ray.D).xyz;\n    }\n    // Output to screen\n  //  GrayscaleInterp(col,abs(length(2.0*(fragCoord.xy/iResolution.xy)-1.0)));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}