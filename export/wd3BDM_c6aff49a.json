{"ver":"0.1","info":{"id":"wd3BDM","date":"1605220831","viewed":155,"name":"Mandelbrot distance","username":"Atchafalaya","description":"impleting a distance function to the mandelbrot fractal. \nInspired by IÃ±igo Quilez's work and article https://iquilezles.org/articles/distancefractals/distancefractals.htm","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution\n\n\nfloat mandelbrotDist(vec2 c)\n{\n    vec2 z = vec2(0.);\n    vec2 dz = vec2(0.);\n    float lz2 = 0.;\n    int i = 0;\n    while (i < 1024 && lz2 < 1024.)\n    {\n        dz = vec2(1., 0.) + 2. * vec2(z.x * dz.x - z.y * dz.y, z.x * dz.y + dz.x * z.y);\n        z = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + c;\n        lz2 = dot(z, z);\n        i++;\n    }\n    \n    if (lz2 >= 1024.)\n    {\n        float lz = sqrt(lz2);\n    \t//return sqrt(dot(z, z) / dot(dz, dz)) * log(sqrt(dot(z,z)));\n        float pow2 = pow(2., 1. - float(i));\n        return (1. - pow(lz, -pow2)) / (pow2 * length(dz) / lz);\n    }\n    else\n    {\n        return -1.;\n    }\n}\n\nvec3 palette(float dist)\n{\n    if (dist < 0.)\n    {\n        return vec3(1., 0.6, 0.);\n    }\n    else \n    {\n        vec3 col = vec3(1., 0.6, 0.) * (0.8 + 0.2 * cos(100. * dist));\n        col *= 1. - (1. / (1. + 10. * dist));\n        col = mix(col, vec3(.8), smoothstep(mix(0.0005, 0.01, 0.5 + 0.5 * sin(iTime - 3.1415 / 4.)), 0., dist));\n        return col;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - R.xy) / iResolution.y;\n    \n    uv *= 1.5;\n\tuv += vec2(-0.5, 0.);\n    \n    /*\n    float t = pow(sin(iTime), 2.);\n    uv *= mix(3., 1.5, t);\n    uv /= mix(dot(uv, uv), 1., t);\n    */\n    \n    vec3 col = palette(mandelbrotDist(uv));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}