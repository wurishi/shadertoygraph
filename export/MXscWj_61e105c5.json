{"ver":"0.1","info":{"id":"MXscWj","date":"1732090906","viewed":18,"name":"complex SDF","username":"Lyrith","description":"a","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cosine based palette, 4 vec3 params\nvec3 palette(float t)\n{\n    vec3 a = vec3(1.088, 0.928, 0.928);\n    vec3 b = vec3(0.478, 0.848, 0.638);\n    vec3 c = vec3(0.903, 0.668, 0.608);\n    vec3 d = vec3(1.067, 0.797, 0.528);\n\n    return a + b*cos( 6.283185*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)/ iResolution.y;\n    vec2 uv0 = uv;\n    \n    //used to store all color data in\n    vec3 finalColor = vec3(0.0);\n\n    //fractal behavior\n    for(float i = 0.0; i< 3.; i++) {\n           \n        //get color from palette, using time, distance from original center and i which will increase each itteration, \n        //also change behavior depending on if it's an even itteration\n        vec3 col = vec3(0);\n        if (mod(i, 2.) == 0.) col = palette(length(uv0) + i*.4 + iTime /2.);\n        else col = palette(length(uv0) + i*.4 + -iTime /2.);\n    \n    \n    \n        //for each loop increase the fract value\n        uv = fract(uv * 1.7) - 0.5;\n        \n        //get the distance from the center of the uv value\n        float dist = length(uv);\n        \n        //frequency of sine waves\n        float frequency = 10.0;\n        \n        \n        //create sine wave pattern based on SDF, and animate with time, also change behavior depending on if it's an even itteration\n        if (mod(i, 2.) == 0.) dist = sin(dist * frequency + iTime)/ frequency;\n        else dist = sin(dist * frequency + -iTime)/ frequency;\n        \n        //get the absolute value of the distance, as with SDF's the inside is -1, outside is 1, and surface is 0\n        dist = abs(dist);\n        \n        //use inverse of d with small value to make the edges look like they \"glow\"\n        dist = 0.005 / dist;\n    \n        //add this itteration to the final color\n        finalColor += col * dist;\n    }\n\n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}