{"ver":"0.1","info":{"id":"XfX3R8","date":"1702769318","viewed":81,"name":"Sample SDF for digits","username":"artyom_stv","description":"An attempt to create SDF for digits","likes":3,"published":1,"flags":0,"usePreview":1,"tags":["sdf","font","digits"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright (c) 2022 Artem Starosvetskiy\n// \n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nfloat digitWidth[] = float[](\n    0.786,\n    0.4379,\n    0.7123,\n    0.7505,\n    0.8053,\n    0.7387,\n    0.7773,\n    0.6957,\n    0.7765,\n    0.7781\n);\n\nfloat sdDigit0(in vec2 p) {\n    polylineInit(vec2(0.392984, -0.017343));\n    polylineQuadLine(p, vec2(0.233277, -0.015728), vec2(0.134038, 0.087391));\n    polylineQuadLine(p, vec2(0.002317, 0.224807), vec2(0, 0.499409));\n    polylineAddLine(p, vec2(0, 0.500985));\n    polylineQuadLine(p, vec2(0.001092, 0.71373), vec2(0.082403, 0.845819));\n    polylineQuadLine(p, vec2(0.185718, 1.013583), vec2(0.392984, 1.016949));\n    polylineQuadLine(p, vec2(0.553974, 1.015338), vec2(0.65372, 0.910453));\n    polylineQuadLine(p, vec2(0.783601, 0.773482), vec2(0.785968, 0.500985));\n    polylineAddLine(p, vec2(0.785968, 0.499409));\n    polylineQuadLine(p, vec2(0.784948, 0.29495), vec2(0.709224, 0.16433));\n    polylineQuadLine(p, vec2(0.605976, -0.013537), vec2(0.392984, -0.017343));\n    polylineMove(p, vec2(0.392984, 0.128892));\n    polylineQuadLine(p, vec2(0.494494, 0.130432), vec2(0.549813, 0.22768));\n    polylineQuadLine(p, vec2(0.605132, 0.324929), vec2(0.605834, 0.499409));\n    polylineAddLine(p, vec2(0.605834, 0.500985));\n    polylineQuadLine(p, vec2(0.605132, 0.675392), vec2(0.549813, 0.772123));\n    polylineQuadLine(p, vec2(0.494494, 0.868853), vec2(0.392984, 0.870319));\n    polylineQuadLine(p, vec2(0.290956, 0.868853), vec2(0.235859, 0.772123));\n    polylineQuadLine(p, vec2(0.180762, 0.675392), vec2(0.180134, 0.500985));\n    polylineAddLine(p, vec2(0.180134, 0.499409));\n    polylineQuadLine(p, vec2(0.180762, 0.324929), vec2(0.235859, 0.22768));\n    polylineQuadLine(p, vec2(0.290956, 0.130432), vec2(0.392984, 0.128892));\n    return sdPolyline();\n}\n\nfloat sdDigit1(in vec2 p) {\n    polylineInit(vec2(0.262515, -0));\n    polylineAddLine(p, vec2(0.262515, 0.829326));\n    polylineAddLine(p, vec2(0.258179, 0.829326));\n    polylineAddLine(p, vec2(0, 0.651951));\n    polylineAddLine(p, vec2(0, 0.816318));\n    polylineAddLine(p, vec2(0.261332, 1));\n    polylineAddLine(p, vec2(0.437919, 1));\n    polylineAddLine(p, vec2(0.437919, -0));\n    polylineAddLine(p, vec2(0.262515, -0));\n    return sdPolyline();\n}\n\nfloat sdDigit2(in vec2 p) {\n    polylineInit(vec2(0.009854, -0));\n    polylineAddLine(p, vec2(0.009854, 0.121797));\n    polylineAddLine(p, vec2(0.363027, 0.466299));\n    polylineQuadLine(p, vec2(0.426764, 0.528445), vec2(0.461341, 0.570973));\n    polylineQuadLine(p, vec2(0.527892, 0.652285), vec2(0.52227, 0.719354));\n    polylineAddLine(p, vec2(0.52227, 0.720536));\n    polylineQuadLine(p, vec2(0.52078, 0.788838), vec2(0.476202, 0.830755));\n    polylineQuadLine(p, vec2(0.431624, 0.872672), vec2(0.358297, 0.873867));\n    polylineQuadLine(p, vec2(0.273909, 0.872253), vec2(0.222261, 0.824744));\n    polylineQuadLine(p, vec2(0.170612, 0.777234), vec2(0.167521, 0.703193));\n    polylineAddLine(p, vec2(0.167521, 0.698463));\n    polylineAddLine(p, vec2(0, 0.698463));\n    polylineAddLine(p, vec2(0, 0.703193));\n    polylineQuadLine(p, vec2(0.000801, 0.789671), vec2(0.041983, 0.857229));\n    polylineQuadLine(p, vec2(0.087353, 0.931498), vec2(0.169212, 0.973824));\n    polylineQuadLine(p, vec2(0.251072, 1.01615), vec2(0.356721, 1.016949));\n    polylineQuadLine(p, vec2(0.468904, 1.015975), vec2(0.550244, 0.97111));\n    polylineQuadLine(p, vec2(0.691912, 0.891623), vec2(0.696886, 0.730784));\n    polylineAddLine(p, vec2(0.696886, 0.729602));\n    polylineQuadLine(p, vec2(0.697271, 0.680183), vec2(0.682217, 0.635621));\n    polylineQuadLine(p, vec2(0.663497, 0.579903), vec2(0.611841, 0.516155));\n    polylineQuadLine(p, vec2(0.560184, 0.452408), vec2(0.466299, 0.363027));\n    polylineAddLine(p, vec2(0.24596, 0.153725));\n    polylineAddLine(p, vec2(0.24596, 0.146236));\n    polylineAddLine(p, vec2(0.712259, 0.146236));\n    polylineAddLine(p, vec2(0.712259, -0));\n    polylineAddLine(p, vec2(0.009854, -0));\n    return sdPolyline();\n}\n\nfloat sdDigit3(in vec2 p) {\n    polylineInit(vec2(0.376823, -0.017343));\n    polylineQuadLine(p, vec2(0.21813, -0.015486), vec2(0.120528, 0.055869));\n    polylineQuadLine(p, vec2(0.013454, 0.134326), vec2(0.000788, 0.268033));\n    polylineAddLine(p, vec2(0, 0.276311));\n    polylineAddLine(p, vec2(0.171068, 0.276311));\n    polylineAddLine(p, vec2(0.171857, 0.268821));\n    polylineQuadLine(p, vec2(0.180134, 0.20679), vec2(0.233938, 0.168408));\n    polylineQuadLine(p, vec2(0.287741, 0.130026), vec2(0.376429, 0.128892));\n    polylineQuadLine(p, vec2(0.464242, 0.13005), vec2(0.515914, 0.172152));\n    polylineQuadLine(p, vec2(0.567587, 0.214254), vec2(0.568782, 0.283406));\n    polylineAddLine(p, vec2(0.568782, 0.284588));\n    polylineQuadLine(p, vec2(0.561786, 0.445605), vec2(0.363816, 0.448167));\n    polylineAddLine(p, vec2(0.245171, 0.448167));\n    polylineAddLine(p, vec2(0.245171, 0.581395));\n    polylineAddLine(p, vec2(0.35948, 0.581395));\n    polylineQuadLine(p, vec2(0.443388, 0.582566), vec2(0.492708, 0.623423));\n    polylineQuadLine(p, vec2(0.542028, 0.664281), vec2(0.543161, 0.730784));\n    polylineAddLine(p, vec2(0.543161, 0.732361));\n    polylineQuadLine(p, vec2(0.539712, 0.871403), vec2(0.374852, 0.875049));\n    polylineQuadLine(p, vec2(0.209499, 0.869137), vec2(0.188412, 0.734332));\n    polylineAddLine(p, vec2(0.188017, 0.727631));\n    polylineAddLine(p, vec2(0.021679, 0.727631));\n    polylineAddLine(p, vec2(0.022073, 0.735909));\n    polylineQuadLine(p, vec2(0.03481, 0.864444), vec2(0.1284, 0.93984));\n    polylineQuadLine(p, vec2(0.22199, 1.015237), vec2(0.374852, 1.016949));\n    polylineQuadLine(p, vec2(0.530408, 1.015241), vec2(0.621002, 0.945784));\n    polylineQuadLine(p, vec2(0.713076, 0.875183), vec2(0.715018, 0.756011));\n    polylineAddLine(p, vec2(0.715018, 0.754434));\n    polylineQuadLine(p, vec2(0.713145, 0.661079), vec2(0.655104, 0.601646));\n    polylineQuadLine(p, vec2(0.597063, 0.542213), vec2(0.505321, 0.523059));\n    polylineAddLine(p, vec2(0.505321, 0.519511));\n    polylineQuadLine(p, vec2(0.617388, 0.508487), vec2(0.683189, 0.446541));\n    polylineQuadLine(p, vec2(0.74899, 0.384595), vec2(0.750493, 0.279858));\n    polylineAddLine(p, vec2(0.750493, 0.278676));\n    polylineQuadLine(p, vec2(0.749376, 0.179462), vec2(0.690222, 0.108033));\n    polylineQuadLine(p, vec2(0.588857, -0.013132), vec2(0.376823, -0.017343));\n    return sdPolyline();\n}\n\nfloat sdDigit4(in vec2 p) {\n    polylineInit(vec2(0.499015, -0));\n    polylineAddLine(p, vec2(0.499015, 0.191959));\n    polylineAddLine(p, vec2(0, 0.191959));\n    polylineAddLine(p, vec2(0, 0.344501));\n    polylineAddLine(p, vec2(0.415057, 1));\n    polylineAddLine(p, vec2(0.669294, 1));\n    polylineAddLine(p, vec2(0.669294, 0.338983));\n    polylineAddLine(p, vec2(0.805282, 0.338983));\n    polylineAddLine(p, vec2(0.805282, 0.191959));\n    polylineAddLine(p, vec2(0.669294, 0.191959));\n    polylineAddLine(p, vec2(0.669294, -0));\n    polylineAddLine(p, vec2(0.499015, -0));\n    polylineMove(p, vec2(0.16082, 0.334647));\n    polylineAddLine(p, vec2(0.501774, 0.334647));\n    polylineAddLine(p, vec2(0.501774, 0.864801));\n    polylineAddLine(p, vec2(0.497832, 0.864801));\n    polylineAddLine(p, vec2(0.16082, 0.339377));\n    polylineAddLine(p, vec2(0.16082, 0.334647));\n    return sdPolyline();\n}\n\nfloat sdDigit5(in vec2 p) {\n    polylineInit(vec2(0.363027, -0.017343));\n    polylineQuadLine(p, vec2(0.238848, -0.016064), vec2(0.151512, 0.035786));\n    polylineQuadLine(p, vec2(0.016024, 0.117671), vec2(0.000788, 0.272369));\n    polylineAddLine(p, vec2(0, 0.281435));\n    polylineAddLine(p, vec2(0.167521, 0.281435));\n    polylineAddLine(p, vec2(0.168309, 0.276311));\n    polylineQuadLine(p, vec2(0.180257, 0.212209), vec2(0.232263, 0.170871));\n    polylineQuadLine(p, vec2(0.284268, 0.129533), vec2(0.36421, 0.128104));\n    polylineQuadLine(p, vec2(0.455201, 0.12957), vec2(0.509903, 0.183731));\n    polylineQuadLine(p, vec2(0.564606, 0.237892), vec2(0.566023, 0.327158));\n    polylineAddLine(p, vec2(0.566023, 0.328341));\n    polylineQuadLine(p, vec2(0.564434, 0.415624), vec2(0.509411, 0.469354));\n    polylineQuadLine(p, vec2(0.454388, 0.523083), vec2(0.364998, 0.524635));\n    polylineQuadLine(p, vec2(0.278873, 0.523946), vec2(0.221127, 0.475365));\n    polylineQuadLine(p, vec2(0.192156, 0.45201), vec2(0.173827, 0.418605));\n    polylineAddLine(p, vec2(0.018132, 0.418605));\n    polylineAddLine(p, vec2(0.065826, 1));\n    polylineAddLine(p, vec2(0.679543, 1));\n    polylineAddLine(p, vec2(0.679543, 0.853764));\n    polylineAddLine(p, vec2(0.208514, 0.853764));\n    polylineAddLine(p, vec2(0.180922, 0.552227));\n    polylineAddLine(p, vec2(0.18447, 0.552227));\n    polylineQuadLine(p, vec2(0.25473, 0.655893), vec2(0.410721, 0.659046));\n    polylineQuadLine(p, vec2(0.509354, 0.658189), vec2(0.5842, 0.614137));\n    polylineQuadLine(p, vec2(0.73271, 0.524814), vec2(0.738668, 0.3311));\n    polylineAddLine(p, vec2(0.738668, 0.329917));\n    polylineQuadLine(p, vec2(0.737725, 0.221056), vec2(0.685642, 0.140782));\n    polylineQuadLine(p, vec2(0.584648, -0.01204), vec2(0.363027, -0.017343));\n    return sdPolyline();\n}\n\nfloat sdDigit6(in vec2 p) {\n    polylineInit(vec2(0.40402, -0.017343));\n    polylineQuadLine(p, vec2(0.312989, -0.017552), vec2(0.234838, 0.017848));\n    polylineQuadLine(p, vec2(0.129616, 0.064944), vec2(0.065679, 0.180883));\n    polylineQuadLine(p, vec2(0.001742, 0.296821), vec2(0, 0.487584));\n    polylineAddLine(p, vec2(0, 0.48916));\n    polylineQuadLine(p, vec2(0.001571, 0.73793), vec2(0.107532, 0.875865));\n    polylineQuadLine(p, vec2(0.214344, 1.014905), vec2(0.407962, 1.016949));\n    polylineQuadLine(p, vec2(0.542297, 1.015253), vec2(0.634677, 0.9506));\n    polylineQuadLine(p, vec2(0.735646, 0.879821), vec2(0.762712, 0.759559));\n    polylineAddLine(p, vec2(0.763894, 0.751675));\n    polylineAddLine(p, vec2(0.58652, 0.751675));\n    polylineAddLine(p, vec2(0.584155, 0.757982));\n    polylineQuadLine(p, vec2(0.542471, 0.865983), vec2(0.40678, 0.871108));\n    polylineQuadLine(p, vec2(0.327035, 0.87002), vec2(0.276354, 0.824551));\n    polylineQuadLine(p, vec2(0.176133, 0.726298), vec2(0.171857, 0.527789));\n    polylineQuadLine(p, vec2(0.170871, 0.512613), vec2(0.171068, 0.496255));\n    polylineAddLine(p, vec2(0.174616, 0.496255));\n    polylineQuadLine(p, vec2(0.20493, 0.566294), vec2(0.275966, 0.610761));\n    polylineQuadLine(p, vec2(0.347002, 0.655228), vec2(0.449744, 0.656681));\n    polylineQuadLine(p, vec2(0.550602, 0.655757), vec2(0.625965, 0.610477));\n    polylineQuadLine(p, vec2(0.771857, 0.520729), vec2(0.777296, 0.330311));\n    polylineAddLine(p, vec2(0.777296, 0.329129));\n    polylineQuadLine(p, vec2(0.776568, 0.235656), vec2(0.735605, 0.162097));\n    polylineQuadLine(p, vec2(0.689076, 0.078756), vec2(0.603028, 0.031162));\n    polylineQuadLine(p, vec2(0.516979, -0.016432), vec2(0.40402, -0.017343));\n    polylineMove(p, vec2(0.201419, 0.32637));\n    polylineQuadLine(p, vec2(0.202946, 0.249055), vec2(0.250238, 0.195702));\n    polylineQuadLine(p, vec2(0.307328, 0.131409), vec2(0.400867, 0.128892));\n    polylineQuadLine(p, vec2(0.477071, 0.130315), vec2(0.530793, 0.174632));\n    polylineQuadLine(p, vec2(0.598316, 0.230476), vec2(0.601104, 0.322822));\n    polylineAddLine(p, vec2(0.601104, 0.324399));\n    polylineQuadLine(p, vec2(0.599453, 0.411066), vec2(0.545034, 0.464328));\n    polylineQuadLine(p, vec2(0.490614, 0.51759), vec2(0.403232, 0.519117));\n    polylineQuadLine(p, vec2(0.315604, 0.517577), vec2(0.25946, 0.464968));\n    polylineQuadLine(p, vec2(0.203316, 0.41236), vec2(0.201419, 0.327158));\n    polylineAddLine(p, vec2(0.201419, 0.32637));\n    return sdPolyline();\n}\n\nfloat sdDigit7(in vec2 p) {\n    polylineInit(vec2(0.081198, -0));\n    polylineAddLine(p, vec2(0.519905, 0.850217));\n    polylineAddLine(p, vec2(0.519905, 0.853764));\n    polylineAddLine(p, vec2(0, 0.853764));\n    polylineAddLine(p, vec2(0, 1));\n    polylineAddLine(p, vec2(0.695704, 1));\n    polylineAddLine(p, vec2(0.695704, 0.851005));\n    polylineAddLine(p, vec2(0.268427, -0));\n    polylineAddLine(p, vec2(0.081198, -0));\n    return sdPolyline();\n}\n\nfloat sdDigit8(in vec2 p) {\n    polylineInit(vec2(0.38786, -0.017343));\n    polylineQuadLine(p, vec2(0.261726, -0.016526), vec2(0.1698, 0.026872));\n    polylineQuadLine(p, vec2(0.005762, 0.105388), vec2(0, 0.272369));\n    polylineAddLine(p, vec2(0, 0.273551));\n    polylineQuadLine(p, vec2(0.001601, 0.370098), vec2(0.062475, 0.437229));\n    polylineQuadLine(p, vec2(0.123349, 0.50436), vec2(0.224281, 0.525818));\n    polylineAddLine(p, vec2(0.224281, 0.530154));\n    polylineQuadLine(p, vec2(0.138007, 0.553828), vec2(0.087505, 0.611648));\n    polylineQuadLine(p, vec2(0.037002, 0.669467), vec2(0.035869, 0.750493));\n    polylineAddLine(p, vec2(0.035869, 0.751675));\n    polylineQuadLine(p, vec2(0.036936, 0.836817), vec2(0.090504, 0.900082));\n    polylineQuadLine(p, vec2(0.186801, 1.012463), vec2(0.38786, 1.016949));\n    polylineQuadLine(p, vec2(0.504354, 1.016038), vec2(0.588877, 0.973999));\n    polylineQuadLine(p, vec2(0.73464, 0.900358), vec2(0.73985, 0.751675));\n    polylineAddLine(p, vec2(0.73985, 0.750493));\n    polylineQuadLine(p, vec2(0.738717, 0.669467), vec2(0.688214, 0.611648));\n    polylineQuadLine(p, vec2(0.637712, 0.553828), vec2(0.551439, 0.530154));\n    polylineAddLine(p, vec2(0.551439, 0.525818));\n    polylineQuadLine(p, vec2(0.652419, 0.50436), vec2(0.713638, 0.437229));\n    polylineQuadLine(p, vec2(0.774857, 0.370098), vec2(0.776508, 0.273551));\n    polylineAddLine(p, vec2(0.776508, 0.272369));\n    polylineQuadLine(p, vec2(0.775436, 0.179266), vec2(0.718374, 0.111044));\n    polylineQuadLine(p, vec2(0.613109, -0.012938), vec2(0.38786, -0.017343));\n    polylineMove(p, vec2(0.38786, 0.586914));\n    polylineQuadLine(p, vec2(0.467112, 0.587973), vec2(0.514584, 0.627907));\n    polylineQuadLine(p, vec2(0.562057, 0.667841), vec2(0.563264, 0.733938));\n    polylineAddLine(p, vec2(0.563264, 0.73512));\n    polylineQuadLine(p, vec2(0.561983, 0.801217), vec2(0.514289, 0.841151));\n    polylineQuadLine(p, vec2(0.466594, 0.881085), vec2(0.38786, 0.882144));\n    polylineQuadLine(p, vec2(0.309125, 0.881085), vec2(0.261431, 0.841151));\n    polylineQuadLine(p, vec2(0.213737, 0.801217), vec2(0.212456, 0.73512));\n    polylineAddLine(p, vec2(0.212456, 0.733938));\n    polylineQuadLine(p, vec2(0.213663, 0.667841), vec2(0.261135, 0.627907));\n    polylineQuadLine(p, vec2(0.308608, 0.587973), vec2(0.38786, 0.586914));\n    polylineMove(p, vec2(0.38786, 0.119038));\n    polylineQuadLine(p, vec2(0.479282, 0.120332), vec2(0.535081, 0.165304));\n    polylineQuadLine(p, vec2(0.59088, 0.210275), vec2(0.592432, 0.283406));\n    polylineAddLine(p, vec2(0.592432, 0.284588));\n    polylineQuadLine(p, vec2(0.590954, 0.358334), vec2(0.535376, 0.403774));\n    polylineQuadLine(p, vec2(0.479799, 0.449214), vec2(0.38786, 0.450532));\n    polylineQuadLine(p, vec2(0.295945, 0.449214), vec2(0.24054, 0.403774));\n    polylineQuadLine(p, vec2(0.185135, 0.358334), vec2(0.183682, 0.284588));\n    polylineAddLine(p, vec2(0.183682, 0.283406));\n    polylineQuadLine(p, vec2(0.185283, 0.210275), vec2(0.241131, 0.165304));\n    polylineQuadLine(p, vec2(0.29698, 0.120332), vec2(0.38786, 0.119038));\n    return sdPolyline();\n}\n\nfloat sdDigit9(in vec2 p) {\n    polylineInit(vec2(0.374064, 1.016949));\n    polylineQuadLine(p, vec2(0.463412, 1.017149), vec2(0.540596, 0.98281));\n    polylineQuadLine(p, vec2(0.646736, 0.936195), vec2(0.71151, 0.820019));\n    polylineQuadLine(p, vec2(0.776284, 0.703842), vec2(0.778084, 0.512022));\n    polylineAddLine(p, vec2(0.778084, 0.51084));\n    polylineQuadLine(p, vec2(0.776502, 0.263102), vec2(0.671488, 0.125207));\n    polylineQuadLine(p, vec2(0.564495, -0.015281), vec2(0.370122, -0.017343));\n    polylineQuadLine(p, vec2(0.237671, -0.015707), vec2(0.145883, 0.047191));\n    polylineQuadLine(p, vec2(0.042315, 0.118323), vec2(0.015372, 0.240441));\n    polylineAddLine(p, vec2(0.013796, 0.247931));\n    polylineAddLine(p, vec2(0.191171, 0.247931));\n    polylineAddLine(p, vec2(0.193142, 0.241624));\n    polylineQuadLine(p, vec2(0.235416, 0.133819), vec2(0.370516, 0.128892));\n    polylineQuadLine(p, vec2(0.450751, 0.129993), vec2(0.501573, 0.175898));\n    polylineQuadLine(p, vec2(0.601162, 0.274031), vec2(0.605439, 0.471817));\n    polylineQuadLine(p, vec2(0.606819, 0.48719), vec2(0.607016, 0.503745));\n    polylineAddLine(p, vec2(0.60268, 0.503745));\n    polylineQuadLine(p, vec2(0.572342, 0.433682), vec2(0.501429, 0.389042));\n    polylineQuadLine(p, vec2(0.430516, 0.344403), vec2(0.328341, 0.342925));\n    polylineQuadLine(p, vec2(0.228262, 0.343835), vec2(0.153168, 0.38837));\n    polylineQuadLine(p, vec2(0.005551, 0.478144), vec2(0, 0.669294));\n    polylineAddLine(p, vec2(0, 0.670871));\n    polylineQuadLine(p, vec2(0.000722, 0.763774), vec2(0.041457, 0.837036));\n    polylineQuadLine(p, vec2(0.088017, 0.920549), vec2(0.174351, 0.968289));\n    polylineQuadLine(p, vec2(0.260685, 1.016029), vec2(0.374064, 1.016949));\n    polylineMove(p, vec2(0.374064, 0.480883));\n    polylineQuadLine(p, vec2(0.461692, 0.482423), vec2(0.517836, 0.535032));\n    polylineQuadLine(p, vec2(0.57398, 0.58764), vec2(0.575877, 0.672842));\n    polylineAddLine(p, vec2(0.575877, 0.67363));\n    polylineQuadLine(p, vec2(0.57433, 0.751962), vec2(0.525991, 0.805606));\n    polylineQuadLine(p, vec2(0.4691, 0.86867), vec2(0.376035, 0.871108));\n    polylineQuadLine(p, vec2(0.301525, 0.869759), vec2(0.248062, 0.826655));\n    polylineQuadLine(p, vec2(0.178796, 0.770668), vec2(0.175798, 0.676784));\n    polylineAddLine(p, vec2(0.175798, 0.675601));\n    polylineQuadLine(p, vec2(0.177547, 0.588934), vec2(0.232361, 0.535672));\n    polylineQuadLine(p, vec2(0.287175, 0.48241), vec2(0.374064, 0.480883));\n    return sdPolyline();\n}\n\nfloat sdDigit(in vec2 p, in int digit) {\n    switch (digit) {\n    case 0:\n        return sdDigit0(p);\n    case 1:\n        return sdDigit1(p);\n    case 2:\n        return sdDigit2(p);\n    case 3:\n        return sdDigit3(p);\n    case 4:\n        return sdDigit4(p);\n    case 5:\n        return sdDigit5(p);\n    case 6:\n        return sdDigit6(p);\n    case 7:\n        return sdDigit7(p);\n    case 8:\n        return sdDigit8(p);\n    case 9:\n        return sdDigit9(p);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    int digit = 9 - int(iTime) % 10;\n\tfloat d = sdDigit(p + vec2(digitWidth[digit] * 0.5, 0.5), digit);\n\n    vec3 col = (d > 0.0) ? vec3(0.9, 0.6, 0.3) : vec3(0.65, 0.85, 1.0);\n\tcol *= 1.0 - exp(-6.0 * abs(d));\n\tcol *= 0.8 + 0.2 * cos(140.0 * d);\n\tcol = mix(col, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, abs(d)));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Copyright (c) 2022 Artem Starosvetskiy\n// \n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat cross2d( in vec2 v0, in vec2 v1) { return v0.x*v1.y - v0.y*v1.x; }\n\n// Based on https://www.shadertoy.com/view/MlKcDD\nfloat sdSqrSignedBezier(in vec2 pos, in vec2 A, in vec2 B, in vec2 C) {\n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b))/3.0;\n    float kz = kk * dot(d,a);      \n\n    float res = 0.0;\n    float sgn = 0.0;\n\n    float p  = ky - kx*kx;\n    float q  = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float p3 = p*p*p;\n    float q2 = q*q;\n    float h  = q2 + 4.0*p3;\n\n    if( h>=0.0 ) \n    {   // 1 root\n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n\n        #if 0\n        // When p≈0 and p<0, h-q has catastrophic cancelation. So, we do\n        // h=√(q²+4p³)=q·√(1+4p³/q²)=q·√(1+w) instead. Now we approximate\n        // √ by a linear Taylor expansion into h≈q(1+½w) so that the q's\n        // cancel each other in h-q. Expanding and simplifying further we\n        // get x=vec2(p³/q,-p³/q-q). And using a second degree Taylor\n        // expansion instead: x=vec2(k,-k-q) with k=(1-p³/q²)·p³/q\n        if( abs(p)<0.001 )\n        {\n            float k = p3/q;              // linear approx\n          //float k = (1.0-p3/q2)*p3/q;  // quadratic approx \n            x = vec2(k,-k-q);  \n        }\n        #endif\n\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        vec2  q = d+(c+b*t)*t;\n        res = dot2(q);\n    \tsgn = cross2d(c+2.0*b*t,q);\n    }\n    else \n    {   // 3 roots\n        float z = sqrt(-p);\n        float v = acos(q/(p*z*2.0))/3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp( vec3(m+m,-n-m,n-m)*z-kx, 0.0, 1.0 );\n        vec2  qx=d+(c+b*t.x)*t.x; float dx=dot2(qx), sx = cross2d(c+2.0*b*t.x,qx);\n        vec2  qy=d+(c+b*t.y)*t.y; float dy=dot2(qy), sy = cross2d(c+2.0*b*t.y,qy);\n        if( dx<dy ) { res=dx; sgn=sx; } else {res=dy; sgn=sy; }\n    }\n    \n    return res*sign(sgn);\n}\n\nfloat gPolylineDistanceSqr;\nfloat gPolylineSign;\nvec2 gPolylineCurrentPoint;\n\nvoid polylineInit(in vec2 initialPoint) {\n    gPolylineDistanceSqr = 1e10;\n    gPolylineSign = 1.0;\n    gPolylineCurrentPoint = initialPoint;\n}\n\nvoid polylineMove(in vec2 p, in vec2 toPoint) {\n    gPolylineCurrentPoint = toPoint;\n}\n\n// Based on https://www.shadertoy.com/view/wdBXRW\nvoid polylineAddLine(in vec2 p, in vec2 toPoint) {\n    vec2 e = toPoint - gPolylineCurrentPoint;\n    vec2 w = p - gPolylineCurrentPoint;\n    vec2 b = w - e * clamp( dot(w, e) / dot(e, e), 0.0, 1.0 );\n    gPolylineDistanceSqr = min( gPolylineDistanceSqr, dot(b, b) );\n\n    bvec3 conditions = bvec3(\n        p.y >= gPolylineCurrentPoint.y,\n        p.y < toPoint.y, \n        e.x * w.y > e.y * w.x\n    );\n    if( all(conditions) || all(not(conditions)) ) {\n        gPolylineSign = -gPolylineSign;\n    }\n    \n    gPolylineCurrentPoint = toPoint;\n}\n\nvoid polylineQuadLine(in vec2 p, in vec2 controlPoint, in vec2 toPoint) {\n    float d = sdSqrSignedBezier(p, gPolylineCurrentPoint, controlPoint, toPoint);\n    gPolylineDistanceSqr = min(gPolylineDistanceSqr, abs(d));\n\n    bvec3 conditions = bvec3(\n        p.y >= gPolylineCurrentPoint.y,\n        p.y < toPoint.y, \n        d < 0.0\n    );\n    if( all(conditions) || all(not(conditions)) ) {\n        gPolylineSign = -gPolylineSign;\n    }\n\n    gPolylineCurrentPoint = toPoint;\n}\n\nfloat sdPolyline() {\n    return gPolylineSign * sqrt(gPolylineDistanceSqr);\n}\n","name":"Common","description":"","type":"common"}]}