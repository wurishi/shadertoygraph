{"ver":"0.1","info":{"id":"wslcR8","date":"1584177493","viewed":95,"name":"Pseudo cubic interpolation","username":"legends2k","description":"Lerping between values give a flat appearance while feeding the parameter `t` through smoothstep (cubic) or smootherstep (quintic) makes the result smooth.  It's used in algorithms like perlin noise to get a smooth interpolation between two extreme values","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fade","cubic","interpolation","hermite","smootherstep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// refer https://thebookofshaders.com/11/\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat smootherstep(float v0, float v1, float t) {\n    t = clamp((t - v0) / (v1 - v0), 0.0, 1.0);\n    return t*t*t*(t*(t*6.0 - 15.0) + 10.0);\n}\n\nconst float wiggle = 0.02;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Make bands by scaling normalized pixel coordinates\n    // with 10.\n    vec2 uv = fragCoord/iResolution.xy * 10.0;\n\t// int part\n    vec2 uv_i = floor(uv);\n    // fractional part: lerp param\n    vec2 uv_f = uv - uv_i;\n\n    // draw only in the line part\n    float val = random(vec2(uv_i.x, 1.0));\n    float val_prev = random(vec2(uv_i.x + 1.0, 1.0));\n\n    // Try changing to smoothstep or remove to see pure lerp result\n    float ht = 5.0 * mix(val, val_prev,\n                         smootherstep(0.0, 1.0, uv_f.x));\n\n    if (((uv.y + wiggle) >= ht) && ((uv.y - wiggle) <= ht))\n        fragColor = vec4(0.0, 1.0, 0.0, 1.0);\n    else\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}