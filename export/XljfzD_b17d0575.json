{"ver":"0.1","info":{"id":"XljfzD","date":"1514877337","viewed":442,"name":"Edge-Aware Blur","username":"zoweb","description":"Edge-aware blur useful for noise reduction.\nDoesn't seem to cope well between some colours, for an unknown reason.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["blur","noisereduction","edgeaware"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Higher blur sizes are slower and will make large areas of very similar colours become very flat.\n// Low blur sizes are faster and will do nothing.\n// Recommended is 5\n#define BLUR_SIZE 5\n\n// High thresholds mean that the colour has to be very similar to use it with blurring.\n// A low threshold will look more like a normal blur.\n// Recommended is .93\n#define THRESHOLD .93\n\n// The below is for a very strange look that you might get from overdone noise removal.\n// #define BLUR_SIZE 15\n// #define THRESHOLD .85\n\n// Turn this on to see outlines where there are edges.\n// A higher value means more pronounced edges. The edges will also be darker/fatter\n// when there is a greater difference.\n// Note: Use lower values with lower blurs.\n// Recommended values:\n// Blur | Edge\n//   5  |  48\n//  15  |  386\n// #define EDGES_AMNT 48.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float mouseX = iMouse.x;\n    \n    if (iMouse.z < .2) mouseX = (sin(iTime / 3.14 * 2.5) / 2. + .5) * iResolution.x;\n    \n    if (abs(fragCoord.x - mouseX) < 1.) {\n    \tfragColor = vec4(0);\n        return;\n    }\n    if (fragCoord.x < mouseX) {\n    \tfragColor = texture(iChannel0, uv);\n        return;\n    }\n    \n    vec4 newColor = vec4(0., 0., 0., 1.);\n    vec4 currentColor = texture(iChannel0, uv);\n    float totalWeight = 0.;\n    vec3 colors = vec3(0.);\n    \n    for (int y = -BLUR_SIZE; y < BLUR_SIZE; y++) {\n        for (int x = -BLUR_SIZE; x < BLUR_SIZE; x++) {\n            vec3 color = texture(iChannel0, uv + vec2(float(x), float(y)) / iResolution.xy).rgb;\n        \t\n            float weight = 1. - sqrt(\n                pow(color.r - currentColor.r, 2.) +\n                pow(color.g - currentColor.g,  2.) +\n                pow(color.b - currentColor.b, 2.));\n            \n            // threshold\n            if (weight > THRESHOLD) {\n            \tweight = 1.;\n            } else {\n            \tweight = 0.;\n            }\n            \n            totalWeight += weight;\n            \n            colors += color * weight;\n        }\n    }\n    \n    fragColor = vec4(colors / totalWeight, 1.);\n    \n#ifdef EDGES_AMNT\n    fragColor -= max(0., min(1., 1. - totalWeight / EDGES_AMNT));\n#endif\n}","name":"Image","description":"","type":"image"}]}