{"ver":"0.1","info":{"id":"Ndf3zM","date":"1615653143","viewed":231,"name":"x^y - y^x","username":"sig","description":"Formula visualization; coordinates transformed such that 0..1 -> 0..1  and  1..inf -> 1..2","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float f(float x) {\n    return step(1., x) / abs(2. - x) + (1. - step(1., x)) * x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float x = f(uv.x * 4.);\n    float y = f(uv.y * 4.);\n    \n    float z = pow(x, y) - pow(y, x);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + z*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}