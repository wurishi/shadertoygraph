{"ver":"0.1","info":{"id":"csyfzw","date":"1698026325","viewed":55,"name":"random walk & yukawa potential","username":"minHieu","description":"fe","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["brownianmotion","randomwalk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float get_t() {\n  return 20.*(float(iFrame)*0.005);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = normalize_uv(fragCoord, iResolution.xy);\n    vec4 white = vec4(1.0);\n    vec4 green = vec4(0.0476, 0.680, 0.0898,1.0);\n    \n    fragColor = get_t()*white + (1.-get_t())*green;\n    float mu = length(uv-0.5);\n    float sigma = sqrt(get_t())*0.04;\n    \n    float g = exp(-(mu*mu)/(2.*sigma*sigma));\n    fragColor = (1.-g)*white + g*green;\n    \n\n    if (true){\n        for (int i=0;i<10;i++) {\n            for (int j=0;j<30;j++) {\n                vec2 walker = texelFetch(iChannel0, ivec2(i,j), 0).xy;\n\n                if (length(uv-walker) < 0.005)\n                    fragColor = vec4(1./length(uv-walker), 0.0, 0.0, 1.0);\n            }\n        }\n    }\n    \n    \n    // fragColor = vec4(1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float PI = 3.14159;\nconst float PI2 = 6.28319;\n\n// misc function \nfloat get_t(float f) {\n  return 20.*fract(float(f)*0.005);\n}\n\n// from Alex Jacobson's Curve Inflation \n// https://www.shadertoy.com/view/7tyyzW\nint  seed = 1;\nvoid srand(int s) {\n    seed = s;\n}\nint randi(void) {\n    seed = seed * 0x343fd + 0x269ec3;\n    return (seed >> 16) & 32767;\n}\nfloat rand(void) {\n    return float(randi())/32767.0;\n}\nint hash( int n ) {\n\tn = (n << 13) ^ n;\n    return n * (n * n * 15731 + 789221) + 1376312589;\n}\nvec2 rand_circ(void) {\n    float theta = PI2*rand();\n    return vec2(cos(theta),sin(theta));\n}\n\nvec2 normalize_uv(vec2 in_uv, vec2 res) {\n    vec2 uv = in_uv/res.xy;\n    if (res.x > res.y) {\n        uv.x *= res.x / res.y;\n        uv.x += .5 * (1. - res.x / res.y);\n    } else {        \n        uv.y *= res.y / res.x;\n        uv.y += .5 * (1. - res.y / res.x);\n    }\n    return uv;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float get_t() {\n  return 20.*(float(iFrame)*0.005);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 q = ivec2(fragCoord);\n    srand(hash(q.x + hash(q.y + hash(iFrame))));\n    \n    vec2 x = normalize_uv(fragCoord, iResolution.xy);\n    float dt = 0.0001;\n    vec2 W = 2.*vec2(rand(),rand())-vec2(1.);\n    vec2 dx = vec2(0.)*dt + sqrt(2.)*sqrt(dt)*W; \n    \n    if (get_t() < 0.3)\n        fragColor = vec4(vec3(0.5),1.0);\n    else {\n        vec2 prev_x = texelFetch(iChannel0, ivec2(fragCoord), 0).xy;\n        fragColor = vec4(prev_x + dx,0.0,1.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}