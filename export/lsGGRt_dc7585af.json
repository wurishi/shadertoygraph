{"ver":"0.1","info":{"id":"lsGGRt","date":"1456309484","viewed":339,"name":"Happy Memories","username":"rohtie","description":"Using iq's IK solver: https://www.shadertoy.com/view/ldlGR7","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["ik","guy","running"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 solve(vec2 p, float upperLimbLength, float lowerLimbLength) {\n    vec2 q = p * (0.5 + 0.5 * (upperLimbLength * upperLimbLength - lowerLimbLength * lowerLimbLength) / dot(p, p));\n\n    float s = upperLimbLength * upperLimbLength / dot(q, q) - 1.0;\n\n    if (s < 0.0) { \n        return vec2(-100.0);\n    }\n        \n    return q + q.yx * vec2(-1.0, 1.0) * sqrt(s);\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat line(vec2 a, vec2 b, vec2 p) {\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    \n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    \n    return length(pa - ba * h) - 0.04;\n}\n\nfloat limb(vec2 p, vec2 target, float upperLimbLength, float lowerLimbLength) {    \n    vec2 joint = solve(target, upperLimbLength, lowerLimbLength);\n    return min(line(vec2(0.0), joint, p), line(joint, target, p));\n}\n\nfloat limb(vec2 p, vec2 target) {   \n    return limb(p, target, 0.5, 0.5);\n}\n\nfloat legs(vec2 p) {\n    float speed = 4.0;\n    \n    p.y += sin(iTime * speed) * 0.05;\n    \n    float leftLeg = limb(p,\n        vec2(-0.1 + sin(iTime * speed) * 0.4, \n             -0.7 + cos(iTime * speed) * 0.25)\n    );\n    \n    float rightLeg = limb(p,\n        vec2(-0.1 + sin(2.75 + iTime * speed) * 0.4, \n             -0.7 + cos(2.75 + iTime * speed) * 0.25)\n    );\n    \n    return smin(\n        min(leftLeg, rightLeg), \n        smin(length(p) - 0.2, \n            line(vec2(0.0), vec2(0.3, 0.7), p) - p.y * 0.2, \n            0.2\n        ),\n        0.3\n    );\n}\n\nfloat arms(vec2 p) {   \n    p.y = 1.0 - p.y;\n    p.y -= 0.25;\n    p.x -= 0.3;\n    \n    float speed = 4.0;\n    p.y += sin(iTime * speed) * 0.025;\n    \n    vec2 target = vec2(0.0, 0.5);\n    vec2 ellipse = vec2(-0.5, 0.2);\n    vec2 limbSize = vec2(0.5, 0.4);\n    \n    float leftArm = limb(p,\n        vec2(target.x - sin(iTime * speed) * ellipse.x, \n             target.y - cos(iTime * speed) * ellipse.y),\n        limbSize.x,\n        limbSize.y\n    );\n    \n    float rightArm = limb(p,\n        vec2(target.x - sin(2.75 + iTime * speed) * ellipse.x, \n             target.y - cos(2.75 + iTime * speed) * ellipse.y),\n        limbSize.x,\n        limbSize.y\n    );\n    \n    return smin(min(leftArm, rightArm), length(p) -0.15, 0.3);\n}\n\nfloat head(vec2 p) {\n    float speed = 4.0;\n    \n    p.y += sin(iTime * speed) * 0.06;\n    \n    float head = length(p) - 0.3;\n    \n    float mouth = max(length(p - vec2(0.25, 0.0)) - 0.1, p.y);\n    float eye = max(length(p - vec2(0.0, 0.06)) - 0.1, -p.y + 0.12);\n    float hat = max(length(p - vec2(-0.35, 0.06)) - 0.1, -p.y + 0.12);\n    \n    return max(min(head, hat), -min(mouth, eye));\n}\n\nfloat plant(vec2 p, vec2 target) {\n    vec2 q = p - target;\n    \n    q *= 2.0;\n    q.x += mod(iTime * 10.0, 20.0);\n    \n    return mix(cos(atan(q.x, q.y) * 2.5), length(q), 0.8) - 0.2;\n}\n\nfloat grass(vec2 p) {\n    p *= 0.5;\n    p.y -= 0.5;\n    \n    p.x += iTime * 1.5;\n    p.x = mod(p.x, 0.5);\n    p.y += 0.7;\n    \n    \n    float f = max(abs(p.x * 6.0), abs(p.y * 0.8));\n    f = min(f, max(abs(p.x * 0.4), abs(p.y * 6.8)));\n    f = min(f, max(abs(p.x * 0.4), abs((p.y - 0.25) * 6.8)));\n    \n    \n    return f - 0.2;\n}\n\nvoid mainImage( out vec4 o, in vec2 p ) {\n    p = (p / iResolution.xy) - 0.5;\n    p.x *= iResolution.x / iResolution.y; \n\n    p *= 3.0;\n    p.y += 0.2;\n    \n    float f = min(legs(p), arms(p));\n    f = smin(f, head(p - vec2(0.6, 1.1)), 0.1);\n    f = smin(f, p.y + 0.9, 0.1);\n    \n    f = min(f, plant(p, vec2(4.0, -0.8)));\n\n    p.y += sin(p.x * 0.2 + iTime);\n    \n    o.rgb = vec3(0.0) + \n        smoothstep(0.00, 0.01, f) * \n        vec3(1.6 * smoothstep(0.00, 0.01, grass(p)), p.y * 6.7, (p.y + 1.3) * 0.5);\n}\n","name":"Image","description":"","type":"image"}]}