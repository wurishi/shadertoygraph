{"ver":"0.1","info":{"id":"lfySzV","date":"1715447779","viewed":65,"name":"penrose diagrams","username":"ylegall","description":"a trippy effect inspired by penrose diagrams\nhttps://en.wikipedia.org/wiki/Penrose_diagram","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["trippy","penrose"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define SQRT2 1.41421356237\n\nfloat grid(vec2 uv, float scale) {\n    uv = sin(PI * uv * scale); \n    float v = uv.x * uv.y;\n    return smoothstep(1.,-1., v/fwidth(v));\n}\n\nvec2 fold(vec2 uv, vec2 p, vec2 dir) {\n  float d = dot(uv - p, dir);\n  uv -= 2.0 * dir * min(d, 0.0);\n  return uv;\n}\n\nvec2 penrose(vec2 uv, float scale) {\n  float x0 = scale * uv.x;\n  float y0 = scale * uv.y;\n  float x1 = 0.5 * atanh(x0 + y0);\n  float y1 = 0.5 * atanh(x0 - y0);\n  return vec2(x1 + y1, x1 - y1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 col = vec3(uv.x, uv.y, 0.0);\n\n    uv = fold(uv, vec2(-0.25, 0.25), vec2(1./SQRT2, -1./SQRT2));\n    uv = fold(uv, vec2(0.25, 0.25), vec2(-1./SQRT2, -1./SQRT2));\n    uv = fold(uv, vec2(0.25, -0.25), vec2(-1./SQRT2,1./SQRT2));\n    uv = fold(uv, vec2(-0.25, -0.25), vec2(1./SQRT2, 1./SQRT2));\n    uv *= 0.95; // don't let the pattern get too squished\n\n    uv = penrose(uv, 2.00);\n    float angle = 2.0 * PI * iTime / 6.0;\n    vec2 offset = 0.5 * vec2(cos(angle), sin(angle));\n    float c = grid(uv + offset, 4.0);\n    col = vec3(c);\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}