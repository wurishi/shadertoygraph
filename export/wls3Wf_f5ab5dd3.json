{"ver":"0.1","info":{"id":"wls3Wf","date":"1602072545","viewed":106,"name":"LearnRayMarchingGN","username":"bibiGN","description":"Learning raymarching","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotation(float radian)\n{\n    float c = cos(radian);\n    float s = sin(radian);\n    return mat2(c, s, -s, c);\n}\n\nfloat sphere(vec3 pos, float radius)\n{\n    return length(pos) - radius;\n}\nfloat cylinder(vec3 pos, float radius)\n{\n    return length(pos.xy) - radius;\n}\nfloat box(vec3 pos, float radius)\n{\n    pos = abs(pos);\n    return max(pos.x, max(pos.y, pos.z)) - radius;\n}\n\n\nfloat map(vec3 pos)\n{\n    //pos.z += iTime;\n    pos.xy *= rotation(pos.z * 0.2);\n    pos.z += iTime * .5;\t\n    //pos.yz *= rotation(iTime*0.05);\n    \n    float size = 2.5;\n    pos = mod(pos, size) - size/2.;\n    \n    float s = sphere(pos, 0.75);\n    float b = box(pos, 0.6);\n    float geometry =  max(s, b);\n    geometry = min(geometry, cylinder(pos, 0.3));\n    geometry = min(geometry, cylinder(pos.xzy, 0.3));\n    geometry = min(geometry, cylinder(pos.zyx, 0.3));\n    return geometry;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float circle = length(uv) - 0.5;\n    circle = step(0.4, circle);\n    \n    vec3 eye = vec3(0., 0., -2.);\n    vec3 ray = normalize(vec3(uv, 1.));\n    float shade = 0.;\n    int nbLoop = 20;\n    for (int i = 0; i < nbLoop; ++i)\n    {\n        float dist = map(eye);\n        if (dist < 0.001)\n        {\n            shade = 1. - float(i)/float(nbLoop);\n            break;\n        }\n        eye += ray * dist;\n    }\n    \n    fragColor = vec4(shade);\n}","name":"Image","description":"","type":"image"}]}