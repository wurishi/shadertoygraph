{"ver":"0.1","info":{"id":"wddczj","date":"1601600190","viewed":258,"name":"Webcam Background Subtraction","username":"isometriq","description":"Test for subtraction of background using webcam","likes":6,"published":1,"flags":50,"usePreview":0,"tags":["transparent","subtraction","bg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 cam = texture(iChannel0,uv);\n    vec3 bg = vec3(1.,0.,1.);\n    //vec3 bg = texture(iChannel1,uv).rgb;\n    \n    //vec3 col = cam.rgb;\n    //vec3 col = mix(cam.rgb,bg,1.-cam.a);\n    vec3 col = vec3(cam.a);\n    \n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int SPACE = 32;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 colors = vec3(0.);\n    \n    bool keypress = texelFetch( iChannel2, ivec2(SPACE,1),0 ).x > 0.5 ? true : false;\n    \n    if (iTime < 5.0 || keypress) {\n        colors = texture(iChannel0,uv).rgb;\n    } else {\n        colors = texture(iChannel1,uv).rgb;\n    }\n    \n    fragColor = vec4(colors,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec3 rgb2hsv(vec3 rgb) {\n\n    float Cmax = max(rgb.r, max(rgb.g, rgb.b));\n    float Cmin = min(rgb.r, min(rgb.g, rgb.b));\n    float delta = Cmax - Cmin;\n\n    vec3 hsv = vec3(0., 0., Cmax);\n\n    if (Cmax > Cmin)\n    {\n        hsv.y = delta / Cmax;\n\n        if (rgb.r == Cmax)\n            hsv.x = (rgb.g - rgb.b) / delta;\n        else\n        {\n            if (rgb.g == Cmax)\n                hsv.x = 2. + (rgb.b - rgb.r) / delta;\n            else\n                hsv.x = 4. + (rgb.r - rgb.g) / delta;\n        }\n        hsv.x = fract(hsv.x / 6.);\n    }\n    return hsv;\n}\n\n\nvec3 changeSaturation(vec3 color, float saturation) {\n    float luma = dot(vec3(0.213, 0.715, 0.072) * color, vec3(1.));\n    return mix(vec3(luma), color, saturation);\n}\n\nfloat grayscale(vec3 color) {\n    float gray = (color.r+color.g+color.b)/3.;\n    return gray;\n}\n\nfloat chromakey(vec3 srcColor, vec3 refColor) {\n    \n    srcColor = changeSaturation(srcColor,0.25);\n    //refColor = changeSaturation(refColor,1.);\n    \n    vec3 weights = vec3(4., 1., 2.);\n    vec3 srcColorHsv = rgb2hsv(srcColor);\n    vec3 refColorHsv = rgb2hsv(refColor);\n    \n    float dist = length(weights * (refColorHsv - srcColorHsv));\n    float gray;\n    \n    //gray = clamp(3. * dist - 1.5, 0., 1.);\n    gray = clamp(pow(dist*2.,2.)-1.0, 0., 1.);\n    \n    return gray;\n}\n\nfloat subtract(vec3 srcColor, vec3 refColor) {\n    \n    srcColor = rgb2hsv(srcColor);\n    refColor = rgb2hsv(refColor);\n    \n    // Channel weights seem to make a potential good difference\n    vec3 weights = vec3(4., 1., 2.);\n    //vec3 weights = vec3(1.);\n    \n    vec3 diff = abs(srcColor-refColor);\n    float dist = length(weights*diff);\n    \n    float gray;\n    float min=.1,max=.2;\n    if (dist < min) {gray=0.;}\n    else if (dist > max) {gray=1.;}\n    else {gray = (dist-min)/(max-min);}\n    \n    //return gray;\n    return pow(dist*3.,9.);\n    //return pow(dot(srcColor,refColor)*3.,3.);\n    //return pow(length(cross(refColor,srcColor))*12.,8.);\n}\n\nfloat correlate(vec3 srcColor, vec3 refColor) {\n    \n    //srcColor = rgb2hsv(srcColor);\n    //refColor = rgb2hsv(refColor);\n    \n    vec3 weights = vec3(1.);\n    //weights = vec3(4., 1., 2.);\n    \n    vec3 diff = srcColor-refColor;\n    diff = abs(diff * weights);\n    float dist = length(diff);\n    float gray = grayscale(srcColor);\n    \n    float dist_r = pow(diff.r*12.,9.);\n    float dist_g = pow(diff.g*3.,9.);\n    float dist_b = pow(diff.b*3.,9.);\n    //dist_r = clamp(dist_r,0.,1.);\n    //dist_g = clamp(dist_g,0.,1.);\n    //dist_b = clamp(dist_b,0.,1.);\n    float dist_gray = (dist_r+dist_g+dist_b)/3.;\n    //vec3 hsv = rgb2hsv(vec3(dist_r,dist_g,dist_b));\n    //dist_gray = grayscale(hsv);\n    return dist_gray;\n    \n    //return pow(gray*3.,9.);\n    //return dist / gray;\n    //return gray + dist_gray;\n    return gray;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 cam = texture(iChannel0,uv).rgb;\n    vec3 bg = texture(iChannel1,uv).rgb;\n    float gray;\n    \n    \n    gray = correlate(cam, bg);\n    //gray = subtract(cam, bg);\n    //gray = chromakey(cam, bg);\n    \n    \n    //fragColor = vec4(vec3(gray),1.);\n    fragColor = vec4(cam,clamp(gray,0.,1.));\n    //fragColor = vec4(cam,1.);\n    //fragColor = vec4(bg,1.);\n}","name":"Buffer B","description":"","type":"buffer"}]}