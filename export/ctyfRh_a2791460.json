{"ver":"0.1","info":{"id":"ctyfRh","date":"1701802442","viewed":183,"name":"Hexerino","username":"ChunderFPV","description":"Just fooling around with hexagons again.  Using a hex method from Fabrice because it's short & easy to pattern.","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["hexagon","tile","transform"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define H(a) (cos(radians(vec3(0, 60, 120))+(a)*6.2832)*.5+.5)  // hue\nvoid mainImage(out vec4 C, in vec2 U)\n{\n    float t = iTime/300., // num sec between ints\n          n = 6.2832,     // pi2\n          s = 6.,         // scale\n          i, p, r, k;\n    \n    vec2 R = iResolution.xy,\n         m = (iMouse.xy - R/2.)/R.y*s,  // mouse coords\n         v = (U+U-R)/R.y;               // screen coords\n    \n    if (iMouse.z < 1.) m = s*vec2(sin(t*n)*2., sin(t*n*2.)); // fig-8 movement\n    k = dot(v, v); // transformed coords\n    r = length(v); // radius\n    \n    vec3 c = vec3(0),\n         d = H(t*10. + r/2.)*.07; // color\n    \n    for(i = .2; i < 1.; i += .2)\n    {\n        vec2 u = i*v*s/k - m,       // transformed coords\n             o = vec2(.5, .866),    // hex offset\n             a = mod(u,   o+o) - o, // grid 1\n             b = mod(u-o, o+o) - o, // grid 2\n             h = dot(a,a) < dot(b,b) ? a : b, // combine grids for hex tile\n             k = abs(h);\n        \n        p = pow(length(u-h), 2.)*t; // pattern (radial moire)\n        \n        c = max(c, (1.-max(k.x, dot(k, o))*3.) // hex tile\n          * (sin(p*n)/2.+1.)     // brightness pattern\n          * (H(p+.5)*.5+.5)      // color pattern\n          * min(r*sqrt(r), 1./r) // darken center & edges\n          * pow(i, .1)           // darken hex near camera\n          * (1.3-r)              // flip outer\n          + d);                  // more color\n    }\n    \n    C = vec4(c+c*c*8., 1);\n}","name":"Image","description":"","type":"image"}]}