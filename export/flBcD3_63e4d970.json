{"ver":"0.1","info":{"id":"flBcD3","date":"1650299699","viewed":954,"name":"Submerge 3","username":"Xor","description":"A new take on [url=https://www.shadertoy.com/view/NdBBzm]Submerge[/url], but with added bokeh.","likes":69,"published":1,"flags":96,"usePreview":0,"tags":["underwater"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MlBSRz","filepath":"https://soundcloud.com/lmaodie/are-you-even-real","previewfilepath":"https://soundcloud.com/lmaodie/are-you-even-real","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Bokeh pass\n\n#define T texture(iChannel0, I/r\nvoid mainImage(out vec4 O, vec2 I)\n{\n    vec2 r = iResolution.xy,\n    p = vec2(T).a*r.y/8e2,O-=O);\n    for(float i=1.; i<16.; i+=1./i)\n    {\n        p *= -mat2(.7374, .6755, -.6755, .7374);\n        O += exp(vec4(1, T+p*i/r))/.1);\n    }\n    O = log(O.gbar*.1);O /= O.a;\n    O += T,.5-ceil(log(.5/r.y)))-.1;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"///Render water\n#define MAX 100.\n#define EPS 4e-4\n\n//Classic pseudo-random hash\nfloat hash(vec2 p)\n{\n    return fract(sin(p.x*75.3 + p.y*94.2)*4952.);\n}\n//Bi-cubic value noise\nfloat value(vec2 p)\n{\n    vec2 f = floor(p);\n    vec2 s = p-f;\n    s *= s * (3.0 - 2.0 * s);\n    vec2 o = vec2(0, 1);\n    \n    return mix(mix(hash(f+o.xx),hash(f+o.yx),s.x),\n               mix(hash(f+o.xy),hash(f+o.yy),s.x),s.y);\n}\n//Approximate SDF from fractal value noise\nfloat dist(vec3 p)\n{\n    vec2 n = p.xz*0.6+1.0;\n    mat2 m = mat2(0.6754904, 0.7373688, -0.7373688, 0.6754904)*2.0;\n    float weight = 0.3;\n    float water = 0.0;\n    float speed = 0.2;\n    for(int i = 0; i<10; i++)\n    {\n        water += smoothstep(0.1, 0.9, value(n+speed*iTime)) * weight;\n        n *= m;\n        speed *= 1.3;\n        weight *= 0.45;\n    }\n    return (water+0.5-p.y);\n}\n//Compute normals from SDF derivative\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(4,-4)*EPS;\n    return normalize(dist(p+e.yxx)*e.yxx+dist(p+e.xyx)*e.xyx+\n                     dist(p+e.xxy)*e.xxy+dist(p+e.yyy)*e.yyy);\n}\n//Render water\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 ray = normalize(vec3(fragCoord*2.0 - iResolution.xy, iResolution.x));\n    ray.yz *= mat2(cos(0.5+vec4(0,11,33,0)));\n    vec3 pos = vec3(iTime*0.2,0,0);\n    vec4 mar = vec4(pos,0);\n    \n\n    for(int i = 0; i<50; i++)\n    {\n        float stp = dist(mar.xyz);\n        mar += vec4(ray, 1) * stp;\n        \n        if (stp<EPS || mar.w>MAX) break;\n    }\n    vec3 nor = normal(mar.xyz);\n    vec3 sun = normalize(vec3(0,-1,9));\n    vec3 ref = refract(ray, nor, 1.333);\n    float spec = exp(dot(ref, sun) * 9.0 - 9.0);\n    float fog = max(1.0 - mar.w/MAX, 0.0);\n\n    fragColor = vec4(vec3(sqrt(spec) * fog),1.-2./mar.w);\n}","name":"Buffer A","description":"","type":"buffer"}]}