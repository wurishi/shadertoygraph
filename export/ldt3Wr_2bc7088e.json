{"ver":"0.1","info":{"id":"ldt3Wr","date":"1449109266","viewed":462,"name":"Quadrilateral interpolation","username":"Abstract_Algorithm","description":"quadrilateral interpolation. necessary rasterization part in the reyes.\n\nhttp://www.reedbeta.com/blog/2012/05/26/quadrilateral-interpolation-part-1/\nhttps://iquilezles.org/articles/ibilinear/ibilinear.htm","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["uv","interpolation","quadrilateral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"//      A         B\n//      #---------#\n//      |          \\\n//      |           \\\n//      #------------#\n//      D            C\n//\n// (don't make it with parallel edges or KABOOM!)\n\nstruct Quadrilateral\n{\n    vec2 a,b,c,d;\n};\n\nfloat cross2( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\nvec2 intersect(vec2 p0, vec2 p1, vec2 p2, vec2 p3)\n{\n    vec2 s1 = p1 - p0;\n    vec2 s2 = p3 - p2;\n    float t = ( s2.x * (p0.y-p2.y)-s2.y*(p0.x-p2.x)) / (-s2.x*s1.y + s1.x*s2.y);\n    return p0 + t*s1;\n}\n\nbool on_side(vec2 test, vec2 v1, vec2 v2)\n{\n    return ((v2.x - v1.x)*(test.y-v1.y) - (v2.y-v1.y)*(test.x-v1.x))>=0.0;\n}\n\nbool inQuad(Quadrilateral q, vec2 p)\n{\n    bool isAB = on_side(p, q.a, q.b);\n    bool isBC = on_side(p, q.b, q.c);\n    bool isCD = on_side(p, q.c, q.d);\n    bool isDA = on_side(p, q.d, q.a);\n    return !isCD && !isBC && !isAB && !isDA;\n}\n\n// my version (bad, has UV seams)\n// vec2 getUV(Quadrilateral q, vec2 p)\n// {\n//     vec2 a = q.a, b = q.b, c=q.c, d=q.d;\n//     vec2 r = intersect(q.a,q.d, q.c,q.b);\n//     vec2 s = intersect(q.a,q.b, q.c, q.d);\n\n//     vec2 psi = intersect(p,s, a,d);\n//     vec2 pri = intersect(p,r, a,b);\n\n//     float ab_l = length(b-a);\n//     float ad_l = length(d-a);\n//     float psia_l = length(psi-a);\n//     float pria_l = length(pri-a);\n\n//     return vec2(pria_l/ab_l, psia_l/ad_l);   \n// }\n\n// iq's version (read comment)\nvec2 getUV( Quadrilateral q, in vec2 p)\n{\n    vec2 e = q.b-q.a;\n    vec2 f = q.d-q.a;\n    vec2 g = q.a-q.b+q.c-q.d;\n    vec2 h = p-q.a;\n        \n    float k2 = cross2( g, f );\n    float k1 = cross2( e, f ) + cross2( h, g );\n    float k0 = cross2( h, e );\n    \n    float w = k1*k1 - 4.0*k0*k2;\n    \n    if( w<0.0 ) return vec2(-1.0);\n\n    w = sqrt( w );\n    \n    float v1 = (-k1 - w)/(2.0*k2);\n    float v2 = (-k1 + w)/(2.0*k2);\n    float u1 = (h.x - f.x*v1)/(e.x + g.x*v1);\n    float u2 = (h.x - f.x*v2)/(e.x + g.x*v2);\n    bool  b1 = v1>0.0 && v1<1.0 && u1>0.0 && u1<1.0;\n    bool  b2 = v2>0.0 && v2<1.0 && u2>0.0 && u2<1.0;\n    \n    vec2 res = vec2(-1.0);\n\n    if(  b1 && !b2 ) res = vec2( u1, v1 );\n    if( !b1 &&  b2 ) res = vec2( u2, v2 );\n    \n    return res;\n}\n\nvec4 paint(vec2 p, Quadrilateral q)\n{\n    vec4 col = vec4(0);\n    if(inQuad(q,p))\n    {\n        vec2 uv = getUV(q,p);\n        //col = vec4(uv, 0.5, 1.0);\n        col = vec4(uv,0.5,1.0)*texture(iChannel0, uv);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // point\n    vec2 p = (fragCoord.xy / iResolution.xy)*2.0-1.0;\n    p.x *= iResolution.x/iResolution.y;\n    fragColor = vec4(0);\n\n    // quadrilaterals\n    Quadrilateral q;\n    q.a = vec2(-0.5 ,  0.5) + vec2(0.5,0.0);\n    q.b = vec2( 0.25,  0.0) + vec2(0.5,0.0);\n    q.c = vec2( 0.5 , -0.5) + vec2(0.5,0.0);\n    q.d = vec2(-0.5 , -0.5) + vec2(0.5,0.0);\n\n    Quadrilateral qq;\n    qq.a = vec2(-0.25,  0.25) + vec2(-0.5,0.0);\n    qq.b = vec2( 0.5 ,  0.5 ) + vec2(-0.5,0.0);\n    qq.c = vec2( 0.5 , -0.5 ) + vec2(-0.5,0.0);\n    qq.d = vec2(-0.5 , -0.25) + vec2(-0.5,0.0);\n\n    // colorize pixels\n    fragColor += paint(p,q);\n    fragColor += paint(p,qq);\n}","name":"Image","description":"","type":"image"}]}