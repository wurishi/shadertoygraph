{"ver":"0.1","info":{"id":"McsSW7","date":"1705357901","viewed":63,"name":"Robot Sounds","username":"sampajama","description":"interesting","likes":1,"published":1,"flags":8,"usePreview":0,"tags":["noise","sound","music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float EPS = (5.79334e-21);\nconst float PI = (3.14159265358979323);\nconst float PHI = (1.61803398875);\nconst float SQRT1 = (1.00000000000);\nconst float SQRT2 = (1.41421356237);\nconst float SQRT3 = (1.73205080757);\n\n#define ROUNDS 20\n#define ROTL(a,b) (((a) << (b)) | ((a) >> (32 - (b))))\n#define QUARTER_ROUND(a, b, c, d) \\\n    a += b; d ^= a; d = ROTL(d,16); \\\n    c += d; b ^= c; b = ROTL(b,12); \\\n    a += b; d ^= a; d = ROTL(d, 8); \\\n    c += d; b ^= c; b = ROTL(b, 7);\n\nfloat uintBitsToUnorm(uint b)\n{\n    return float(int(b)) / float(~ 0u);\n}\n\nvec4 chacha(vec2 fragCoord)\n{\n    uint m11 = 0x65787061u; // \"expa\"\n    uint m12 = 0x6E642033u; // \"nd 3\"\n    uint m13 = 0x322D6279u; // \"2-by\"\n    uint m14 = 0x7465206Bu; // \"te k\n    \n    uint m21 = 0x65787061u; // \"expa\"\n    uint m22 = 0x6E642033u; // \"nd 3\"\n    uint m23 = 0x322D6279u; // \"2-by\"\n    uint m24 = 0x7465206Bu; // \"te k\n\n    uint m31 = floatBitsToUint(iDate.x);\n    uint m32 = floatBitsToUint(iDate.y);\n    uint m33 = floatBitsToUint(iDate.z);\n    uint m34 = floatBitsToUint(iDate.w);\n    \n    uint m41 = floatBitsToUint(fragCoord.x);\n    uint m42 = floatBitsToUint(fragCoord.y);\n    uint m43 = floatBitsToUint(fragCoord.x);\n    uint m44 = floatBitsToUint(fragCoord.y);\n    \n\n    for (int r = 0; r < ROUNDS; r += 2) \n    {\n        // EVEN ROUND\n        QUARTER_ROUND(m11, m12, m13, m14);\n        QUARTER_ROUND(m21, m22, m23, m24);\n        QUARTER_ROUND(m31, m32, m33, m34);\n        QUARTER_ROUND(m41, m42, m43, m44);\n        \n        // ODD ROUND\n        QUARTER_ROUND(m11, m22, m33, m44);\n        QUARTER_ROUND(m21, m32, m43, m14);\n        QUARTER_ROUND(m31, m42, m13, m24);\n        QUARTER_ROUND(m41, m12, m23, m34);\n    }\n\n    return vec4(\n        uintBitsToUnorm(m11) + uintBitsToUnorm(m21) + uintBitsToUnorm(m31) + uintBitsToUnorm(m41),\n        uintBitsToUnorm(m12) + uintBitsToUnorm(m22) + uintBitsToUnorm(m32) + uintBitsToUnorm(m42),\n        uintBitsToUnorm(m13) + uintBitsToUnorm(m23) + uintBitsToUnorm(m33) + uintBitsToUnorm(m43),\n        uintBitsToUnorm(m14) + uintBitsToUnorm(m24) + uintBitsToUnorm(m34) + uintBitsToUnorm(m44)\n    );\n}\n\nvec2 mainSound( int samp, float time )\n{\n    float am = 220.0;\n    float bm = am * (3.0 / 2.0);\n\n    if (fract(time / 15.0) < 0.25) {\n        bm = am * (5.0 / 4.0);\n    } else if (fract(time / 16.0) < 0.5) {\n        bm = am * (4.0 / 3.0);\n    } else if (fract(time / 17.0) < 0.75) {\n        bm = am * (7.0 / 4.0);\n    } else {\n        bm = am * (3.0 / 2.0);\n    }\n    \n    float a = am * float(samp % (32 * 44100)) / 44100.0;\n    float b = bm * float(samp % (32 * 44100)) / 44100.0;\n    \n    float t = 0.0;\n    for (float x = 1.0; x < 250.0; x += 2.0) {\n        float o = 6.0 * time;\n        float T = floor(o);\n        float l = fract(o);\n        float r1 = chacha(vec2(x, T + 0.0)).r;\n        float r2 = chacha(vec2(x, T + 1.0)).r;\n        l = l * l * (3.0 - 2.0 * l);\n        float r = (l) * r2 + (1.0 - l) * r1;\n        t += r * sin(2.0 * PI * x * a) / x;\n        t += r * sin(2.0 * PI * x * b) / x;\n    }\n    \n\n    return vec2(t / 2.0);\n}","name":"Sound","description":"","type":"sound"}]}