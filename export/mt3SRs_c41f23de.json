{"ver":"0.1","info":{"id":"mt3SRs","date":"1685815855","viewed":23,"name":"test 2 - ikxi","username":"Ikxi","description":"test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cosine-based palette\nvec3 palette (float t) {\n    vec3 a = vec3(0.328, 0.328, 3.138);\n    vec3 b = vec3(-1.012, -0.592, 0.0);\n    vec3 c = vec3(2, 2, 0.702);\n    vec3 d = vec3(4.545, 3.091, 6.995);\n    \n    return (a + b * cos(6.28318 * (c * t + d)))*.2;\n}\n\n// main function that outputs the color for each fragment (pixel)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(.0);\n \n    for (float i = 0.; i < 2.; i++) {\n        uv = fract(uv * 2.) - .5;\n\n        float d = length(uv); // returns length of a vector\n\n        vec3 col = palette(length(uv0) + iTime*.3);\n\n        float e = 3.0;\n        d = sin(d*e + iTime)/e;\n        d = abs(d);\n        d = .05 / d;\n\n        finalColor += col * d;\n    }\n    \n    fragColor = vec4(finalColor, 1.);\n}","name":"Image","description":"","type":"image"}]}