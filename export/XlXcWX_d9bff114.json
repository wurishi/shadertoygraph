{"ver":"0.1","info":{"id":"XlXcWX","date":"1506623965","viewed":193,"name":"Pixelfied Polaroid ","username":"aw","description":"Playing around post-processing.","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["pixelart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\tWill add chromatic abberation.\nvec4 AddChromaticAbberation(sampler2D tex, vec2 uv, float strength)\n{\n    vec3 color;\n    color.r = texture(tex, vec2(uv.x + strength, uv.y)).r;\n    color.g = texture(tex, uv).g;\n    color.b = texture(tex, vec2(uv.x - strength, uv.y)).b;\n\n\tcolor *= (1.0 - strength * 0.5);\n\t\n    return vec4(color, 1.0);\n}\n\n\n//\tWill ddd a vignette.\nvec4 AddVignette(vec4 color, vec2 uv, float strength, float range)\n{\n    uv *=  1.0 - uv.yx;\n    float vignette = pow(uv.x * uv.y * strength, range);    \n    return vec4(color.rgb * vec3(vignette), 1.0);\n}\n\n\n//\tDraw to screen.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy; \n    vec4 color = AddChromaticAbberation(iChannel0, uv, 0.0036);\n    color = AddVignette(color, uv, 60.0, 0.05);\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//\tWill pixelate the image by only sampling every nth pixel.\nvec2 GetPixelUV(vec2 fragCoord, vec2 resolution, float scale)\n{\n    int pixelSize = int(resolution.x / scale);\n    \n    int remainderX =  int(fragCoord.x) % pixelSize;\n    float pixelTargetX = fragCoord.x - float(remainderX);  \n    \n    int remainderY =  int(fragCoord.y) % pixelSize;\n    float pixelTargetY = fragCoord.y - float(remainderY);\n    \n    return vec2(pixelTargetX / resolution.x, pixelTargetY / resolution.y);\n}\n\n\n//\tWill reduce the precision of the color by the given value.\nvec3 BityFyColor(vec3 color, int quality)\n{\n    int bitDepth = 255 % quality;\n    \n    vec3 colorSampler = color * vec3(255);\n    vec3 remainder = vec3(int(colorSampler.r) % int(quality), int(colorSampler.g) % int(quality), int(colorSampler.b) % int(quality));\n        \n    return vec3((colorSampler - remainder) / vec3(255));\n}\n\n\n//\tWill add a sepia tone color grading.\nvec4 AddSepia(vec4 color, float strength)\n{\n    vec4 sepia;\n\tsepia.r = dot(color.rgb, vec3(0.393, 0.769, 0.189));\n\tsepia.g = dot(color.rgb, vec3(0.349, 0.686, 0.168));   \n\tsepia.b = dot(color.rgb, vec3(0.272, 0.534, 0.131));\n    sepia.a = 1.0;\n    \n    return mix(color, sepia, strength);\n}\n\n\n//\tWill add a vignette.\nvec4 AddVignette(vec4 color, vec2 uv, float strength, float range)\n{\n    uv *=  1.0 - uv.yx;\n    float vignette = pow(uv.x * uv.y * strength, range);    \n    return vec4(color.rgb * vec3(vignette), 1.0);\n}\n\n\n//\tWill generate a border.\nvec4 GenerateBorder(vec4 color, vec2 fragCoord, vec2 resolution, float size)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    if(uv.x < size || uv.x > 1.0 - size || uv.y < size || uv.y > 1.0 - size)\n    {\n        color = vec4(0, 0, 0, 1);\n    }\n    \n    return color;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;    \n    vec2 targetUV = GetPixelUV(fragCoord, iResolution.xy, 80.0);\n    \n\tvec4 color = texture(iChannel0, targetUV);\n    color = GenerateBorder(color, fragCoord, iResolution.xy, 0.01);\n    color = AddVignette(color, uv, 60.0, 0.007);\n    color = AddSepia(color, 0.2);\n    color = vec4(BityFyColor(color.rgb, 8), 1.0);\n    fragColor = color;\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//\tWill generate a simple bloom.  Based on https://www.shadertoy.com/view/lsXGWn.\nvec4 GenerateBloom(sampler2D tex, vec2 fragCoord, float size, float strength)\n{    \n\tvec4 sum = vec4(0);\n\tvec2 texcoord = fragCoord.xy/iResolution.xy;\n\tint j;\n\tint i;\n\n\t// blur in y (vertical)\n\t// take nine samples, with the distance blurSize between them\n\tsum += texture(tex, vec2(texcoord.x - 4.0 * size, texcoord.y)) * 0.05;\n\tsum += texture(tex, vec2(texcoord.x - 2.0 * size, texcoord.y)) * 0.12;\n\tsum += texture(tex, vec2(texcoord.x - size, texcoord.y)) * 0.15;\n\tsum += texture(tex, vec2(texcoord.x, texcoord.y)) * 0.16;\n\tsum += texture(tex, vec2(texcoord.x + size, texcoord.y)) * 0.15;\n\tsum += texture(tex, vec2(texcoord.x + 2.0 * size, texcoord.y)) * 0.12;\n\tsum += texture(tex, vec2(texcoord.x + 3.0 * size, texcoord.y)) * 0.09;\n\tsum += texture(tex, vec2(texcoord.x + 4.0 * size, texcoord.y)) * 0.05;\n\t\n\t// blur in y (vertical)\n\t// take nine samples, with the distance blurSize between them\n\tsum += texture(tex, vec2(texcoord.x, texcoord.y - 4.0 * size)) * 0.05;\n\tsum += texture(tex, vec2(texcoord.x, texcoord.y - 2.0 * size)) * 0.12;\n\tsum += texture(tex, vec2(texcoord.x, texcoord.y - size)) * 0.15;\n\tsum += texture(tex, vec2(texcoord.x, texcoord.y)) * 0.16;\n\tsum += texture(tex, vec2(texcoord.x, texcoord.y + size)) * 0.15;\n\tsum += texture(tex, vec2(texcoord.x, texcoord.y + 2.0 * size)) * 0.12;\n\tsum += texture(tex, vec2(texcoord.x, texcoord.y + 3.0 * size)) * 0.09;\n\tsum += texture(tex, vec2(texcoord.x, texcoord.y + 4.0 * size)) * 0.05;\n    \n    vec4 color = clamp((sum * strength), 1.0, 2.0) * texture(iChannel0, texcoord);\n    return color;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;    \n\tvec4 color = GenerateBloom(iChannel0, fragCoord, 1.0/256.0, 0.69);\n    fragColor = color;\n}","name":"Buf B","description":"","type":"buffer"}]}