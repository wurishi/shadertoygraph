{"ver":"0.1","info":{"id":"7ssGRM","date":"1615729664","viewed":201,"name":"Gyroid with Noise/Distance","username":"HellMood","description":"Rrrolas Gyroid, with noise, and mapped distance to color\n\nOriginal : https://www.shadertoy.com/view/fdl3R7","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["tag"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float twopi = 4. * asin(1.);       // 6.283\nconst float K = float(0x3d28) / 65536.;  // 0.238\nconst float dirZ = 92. / 256.;           // 0.359\n\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\n// Estimate the distance to the two parts of the complement of the gyroid surface.\n// Find out which one is the closest.\nfloat gyroid(vec3 p, out int id) {\n  float d = dot(sin(p+vec3(K*twopi)), sin(p.zxy));  // sin(p+1.501) is almost a cos\n  id = int(round(d));\n  return 0.21552 * (1.442695 - abs(d));\n}\n\n// Step along the ray. Return the position of the hit.\nvec3 trace(in vec3 pos, in vec3 dir, out int id, out int iters,out float d) {\n  iters = 23;\n  for (int i=23; i>0; i--) {\n    d = gyroid(twopi*pos, id);\n    pos += d*dir;\n    if (d < 0.041) break;\n    iters = i-1;\n  }\n  return pos;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = (fragCoord - iResolution.xy*0.5) / iResolution.x;  // x:-0.5..0.5 like in the intro\n  uv.y = -uv.y;\n  uv = floor(uv*320.) / 320.;    // simulate 320x200 pixels\n  float t = iTime * 35. / 256.;  // aim for 35 fps, period = 256 frames\n\n  int id, iters;float d;\n  vec3 pos = trace(vec3(K,0.,t), vec3(uv,dirZ), id, iters,d);\n  //vec3 pos = trace(vec3(K,0.,t), vec3(cos(t)*uv.x-sin(t)*dirZ,uv.y,sin(t)*uv.x+cos(t)*dirZ), id, iters,d);\n\n  \n  //int tex = int(4. * fract(pos.x * 16.)); // original code - removed\n  int tex =0;\n  float col = float(iters + tex);\n  col += rand(uv)*3.; // noise based on location\n  col-=d*d*d*25000.-2.; // influence colors with some f(d) to blur iteration borders\n  \n  \n  fragColor = vec4(col/32., id>0? col/64. : 0., 0., 1.);\n}\n","name":"Image","description":"","type":"image"}]}