{"ver":"0.1","info":{"id":"sslSWs","date":"1620539951","viewed":79,"name":"Sin Pattern","username":"badjano","description":"sin pattern","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sin","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.141592653589793238\n#define inv_pi 1./pi\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.x;\n    \n    //uv *= 1. + sin(iTime*3.)*0.25;\n\n    vec3 col = vec3(0.);\n    //col.x = step(length(uv),0.01);\n    // Time varying pixel color\n    float p = 1./2.;\n    float x = 4./5.;\n    int top = int(1.+acos(sin(iTime))*20.*inv_pi);\n    float inv_top = 1./float(top);\n    for (int i=1; i<=top; i++){\n        float m = 1.+pow(float(i),2.);\n        uv += m*.5;\n        vec2 sin_uv = cos(uv*pi*5.*m);\n        sin_uv = sin_uv*.5+.5;\n        float power = smoothstep(-1.5,1.5,sin(iTime));\n        col += pow(p,1.5)-pow(sin_uv.x * sin_uv.y,x) * p*1.;\n        float m2 = pow(inv_top,.01);\n        col = abs(col);\n        col = vec3(pow(col.r,m2), pow(col.g,m2), pow(col.b,m2));\n        p *= x;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}