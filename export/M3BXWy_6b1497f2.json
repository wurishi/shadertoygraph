{"ver":"0.1","info":{"id":"M3BXWy","date":"1711006623","viewed":67,"name":"Melting 3 Ellipsoids","username":"tholzer","description":"rotate surface with your mouse, \nmove mouse to the left side for auto rotation","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["distance","ellipsoid","surface","melting","union"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Melting3Ellipsoids.glsl \n\n// https://www.shadertoy.com/view/DdX3zr + https://www.shadertoy.com/view/l32XRt\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define PI 3.1415926\n\nfloat opSUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat sdEllipsoid(vec3 o, vec3 r, vec3 p) \n{\n    float k0 = length((p-o)/r);\n    float k1 = length((p-o) / (r*r));\n    return k0*(k0-1.0)/k1;\n}\n\nfloat map(vec3 p) \n{\n    float t = 0.0;\n//  t = 0.1*sin(iTime);\n    float d = DIST_MAX;\n    d = opSUnion(d, sdEllipsoid(vec3(0,0,t), vec3(1., 0.2, 1.5), p), 0.2);\n    d = opSUnion(d, sdEllipsoid(vec3(0,t,0), vec3(0.2, 1.5, 1.), p), 0.2);\n    d = opSUnion(d, sdEllipsoid(vec3(t,0,0), vec3(1.5, 1., 0.2), p), 0.2);\n    return d;\n}\n\n// without melting\nfloat map2(vec3 p) \n{\n    float d = DIST_MAX;\n    d = min(d, sdEllipsoid(vec3(0.0), vec3(1., 0.2, 1.5), p));\n    d = min(d, sdEllipsoid(vec3(0.0), vec3(0.2, 1.5, 1.), p));\n    d = min(d, sdEllipsoid(vec3(0.0), vec3(1.5, 1., 0.2), p));\n    return d;\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p ) \n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\n// search intersection distance\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    for(float t = t0; t < t1;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return t1;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = 2.0 * (fragCoord.xy) / iResolution.xy - 1.0;\n    p.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 2.0 * PI * float(iMouse.x) / float(iResolution.x);\n    float my = PI / 2.0 + PI / 2.0 * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x > 44.0) ? mx : 2.0 * PI * fract(iTime * 0.05);\n    my = (iMouse.y > 10.0) ? my : PI / 2.0;\n\n    mat2 Yaw = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 0.0, -3.8);\n    mat2 Pitch = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz = Pitch * ro.yz;\n    ro.xy = Yaw * ro.xy;\n\n    // NOTE: omitting normalization results in clipped edges artifact\n    vec3 rd = normalize(vec3(0.5 * p.xy, 1.0)); \n    rd.yz = Pitch * rd.yz;\n    rd.xy = Yaw * rd.xy;\n\n    float dist = trace(ro, rd, 0.0, DIST_MAX);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.1);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX );\n    vec3 color = (n * 0.5 + 0.5);\n    color = color * (ambient * calcAO(dst, n) + brightness) ;\n    color = mix(color, vec3(0.0), step(DIST_MAX, dist));\n    fragColor = vec4(sqrt(color), 1.0); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}