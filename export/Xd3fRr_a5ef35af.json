{"ver":"0.1","info":{"id":"Xd3fRr","date":"1523901010","viewed":484,"name":"Smooth Downsampled Box Blur","username":"Qendolin","description":"box blur + downsampeling + linear filtering\nMouse X = kernel size\nMouse Y = downampeling","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["blur","box","downsampeling","linearfiltering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 2.*floor(float(iMouse.y)/iResolution.x*MAX_DOWNAMPLE)+2.;\n    vec2 texelSize = vec2(1.)/(iChannelResolution[0].xy/scale);\n    vec2 uv = fragCoord/iResolution.xy;\n    //https://www.opengl.org/discussion_boards/showthread.php/164213-3D-linear-filtering\n    vec4 tl = texture(iChannel0, uv);\n    vec4 tr = texture(iChannel0, uv + vec2(texelSize.x, 0.0));\n    vec4 bl = texture(iChannel0, uv + vec2(0.0, texelSize.y));\n    vec4 br = texture(iChannel0, uv + vec2(texelSize.x, texelSize.y));\n    vec2 f = fract( uv * (iChannelResolution[0].xy/scale));\n    vec4 tA = mix( tl, tr, f.x );\n    vec4 tB = mix( bl, br, f.x );\n    fragColor = mix( tA, tB, f.y );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int size = int(float(iMouse.x)/iResolution.x*50.)+1;\n    \n    int samples = 0;\n    \n    float scale = 2.*floor(float(iMouse.y)/iResolution.x*MAX_DOWNAMPLE)+2.;\n    \n    for(int x = -size/2; x <= size/2; x++) {\n        for(int y = -size/2; y <= size/2; y++) {\n            samples++;\n\t\t\tfloat uvx = float(floor(fragCoord.x/scale))*scale+float(x)*scale;\n            float uvy = float(floor(fragCoord.y/scale))*scale+float(y)*scale;\n            fragColor+=texture(iChannel0, vec2(uvx,uvy)/iResolution.xy);\n        }\n    }\n    \n    fragColor /= float(samples);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define MAX_DOWNAMPLE 8.","name":"Common","description":"","type":"common"}]}