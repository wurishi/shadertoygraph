{"ver":"0.1","info":{"id":"ddG3WG","date":"1679067002","viewed":108,"name":"sdf collision attempt","username":"izutionix","description":"the idea is to march to the overlap of the two shapes (the max() of the two distance fields).\nany ideas on how to make it more reliable?","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","collision","sdf"],"hasliked":0,"parentid":"Xl2yDW","parentname":"Regular Triangle - distance 2D"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// forked from https://www.shadertoy.com/view/Xl2yDW by iq\n\n// The MIT License\n// Copyright Â© 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n\nconst int ITER = 32;\n\n// signed distance to a box\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// signed distance to an equilateral triangle\nfloat sdEquilateralTriangle(  in vec2 p )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat udSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length(pa-h*ba);\n}\n\n/*\nfloat sdEquilateralTriangle(  in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n*/\n\nvec2 o1 = vec2(-0.5); // offset1\nvec2 o2 = vec2(0.5);\n\nfloat shape1(vec2 p) {\n    //return udSegment(p, vec2(-1.), vec2(1.))-.1;\n    return sdEquilateralTriangle( p );\n}\n\nfloat shape2(vec2 p) {\n    return sdBox(p, vec2(0.75));\n}\n\nfloat getDist(vec2 p, vec2 o1, vec2 o2) {\n    return max( shape1(p+o1), shape2(p+o2) );\n}\n\nvec2 getNormal(vec2 p, vec2 o1, vec2 o2) {\n    vec2 e = vec2(.001, 0);\n    vec2 n = getDist(p,o1,o2) - \n        vec2(getDist(p-e.xy,o1,o2), getDist(p-e.yx,o1,o2));\n    \n    return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    float t = iTime + 1.;\n    p *= 2.0;\n    m *= 2.0;\n    \n    if (iMouse.xy==vec2(0.))\n    m = vec2(.5,.5); // if no mouse input\n    \n    o1 = -m;\n    o2 = vec2(sin(t),cos(t));\n    \n    float d = shape1(p+o1);\n    float b = shape2(p+o2);\n    d = max( min(b,d), -max(b,d) );\n\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol *= 1.0 - exp(-4.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(80.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n\n    if( true )//iMouse.z>0.001 )\n    {\n        vec2 p2 = o2;\n        //vec2 rp = o2;\n        //iFrame%2==0?rp=o1:rp=o2; // visualize 2 inputs\n        vec2 rd2;\n        float d2 = 0.;\n        for (int i=0; i<ITER; i++) {\n            rd2 = -getNormal(p2,o1,o2);\n            p2 += rd2 * d2;\n            d2 = max( shape1(p2+o1), shape2(p2+o2) );\n        }\n        vec2 p1 = o1;\n        vec2 rd1;\n        float d1 = 0.;\n        for (int i=0; i<ITER; i++) {\n            rd1 = -getNormal(p1,o1,o2);\n            p1 += rd1 * d1;\n            d1 = max( shape1(p1+o1), shape2(p1+o2) );\n        }\n        \n        //if (getDist(0.5*(p1+p2),o1,o2) < 0.) col *= vec3(0.,1.,0.);\n        if (d1<=0.01||d2<=0.01) {\n            col *= vec3(0.,1.,0.);\n        }\n        \n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005,\n            abs(length(p-p1)-abs(d1))-0.0025));\n        col = mix(col, vec3(0.0,0.0,1.0), 1.0-smoothstep(0.0, 0.005,\n            length(p-p1)-0.015*3.));\n\n\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005,\n            abs(length(p-p2)-abs(d2))-0.0025));\n        col = mix(col, vec3(1.0,0.0,0.0), 1.0-smoothstep(0.0, 0.005,\n            length(p-p2)-0.015*2.));\n    }\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}