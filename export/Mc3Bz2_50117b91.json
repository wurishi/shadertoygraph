{"ver":"0.1","info":{"id":"Mc3Bz2","date":"1733265803","viewed":65,"name":"proj3","username":"jaron","description":"hw3","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["hw3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nThis code creates refraction and refraction from a normal map. This is the data: \niChannel0: Normal Map \niChannel1: Environment Image (to be reflected)\niChannel2: Ks image\niChannel3: Border Image\n*/\n\n\nconst float pi=3.1416;\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\n\n\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nfloat smooth_step( float min, float max, float x )\n{\n    float t =(x - min) / (max - min);\n    t = clamp(t, 0.0, 1.0);\n    t = t * t * (3.0 - 2.0 * t); // smoothstep formula   \n    return t;\n}\n\nfloat step2( float min, float max, float x )\n{\n    float t =(x - min) / (max - min);\n    t = clamp(t, 0.0, 1.0); \n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy; //Normalized pixel coordinates\n    \n    vec4 col = vec4(0.0);\n    vec4 border_color= vec4(0.0,0.0,0.0, 1.0);\n    vec4 spec= vec4(1.0,1.0,0.0, 1.0);\n    vec4 ambi= vec4(0.10,0.20,0.70, 1.0);\n    vec4 img0 = texture(iChannel0, uv);\n    vec4 img1=  texture(iChannel1, uv);\n    vec4 Ks=texture(iChannel2, uv);\n\n \n    vec3 eye=vec3(0.0,0.0,10.0); \n    eye = eye-vec3(fragCoord,0.0);\n    eye = eye/length(eye); \n    \n    vec3 normals; \n    vec3 reflect;\n    float d=100.0;\n    vec3 lightpos = vec3(iMouse.x,iMouse.y,d/2.0);\n    vec3 dir = lightpos-vec3(fragCoord,0.0);\n    dir=dir/length(dir); \n\n\n    \n    normals= 2.0*img0.rgb - vec3(1.0); \n    normals = normals/length(normals); \n    reflect = 2.0*dot(dir,normals)*normals-dir;\n    float t= 0.5*dot(dir,normals)+0.5;\n    float s= 0.5*dot(reflect,eye)+0.5;\n    float b=1.0;\n    \n   \n    vec2 reflected_uv= (reflect.xy*d/(reflect.z+0.1)+fragCoord+lightpos.xy)/iResolution.xy;\n    vec4 reflected_env= texture(iChannel1, reflected_uv);\n   \n    \n    t=step2(0.1,0.99,t);\n    s=step2(0.99,1.0,s);\n    vec4 diff=texture(iChannel3,uv);\n    ambi = vec4(0.1, 0.2, 0.2, 0.1) * diff;\n    \n    \n    col = ambi*(1.0-t)+diff*t; \n    col= col*(1.0-Ks)+Ks*max(0.8*reflected_env,s*spec) ; \n    \n \n    fragColor = vec4(col);    // Output to screen\n}","name":"Image","description":"","type":"image"}]}