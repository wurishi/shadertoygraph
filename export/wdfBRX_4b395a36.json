{"ver":"0.1","info":{"id":"wdfBRX","date":"1588712345","viewed":196,"name":"ShATI - Arc-en-ciel","username":"Flopine","description":"My former school named ATI decided to launch an everyday challenge from 4th may to 24th may, here is the 2nd subject: rainbow :) ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","glow","rainbow","colours"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n// Shader made for Everyday ATI challenge\n\n#define PI 3.141592\n#define TAU (2.*PI)\n\nfloat hash21 (vec2 x)\n{return fract(sin(dot(x,vec2(12.4,23.4)))*145.4);}\n\nmat2 rot(float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat box (vec3 p, vec3 c)\n{return length(max(abs(p)-c,0.));}\n\nvec3 new_p;\nfloat ruban, sphere, g1=0.;\nfloat SDF (vec3 p)\n{\n    p.x = abs(p.x)-2.;\n    p.xz *= rot(PI/4.);\n\n    sphere = length(p-vec3(9.,0.5,0.8))-3.;\n    g1 += 0.1/(0.1+sphere*sphere);\n    p.x -= p.y*p.y*0.11;\n\n    p.z += sin(p.y*2.+iTime*5.)*0.2;\n\n    p.xz *= rot(p.y*0.35);\n    new_p = p;\n    ruban = box(p,vec3(2.,40.,0.1));\n    return min(sphere,ruban);\n}\n\nvec3 palette (float t, vec3 c)\n{return vec3(0.5)+vec3(0.5)*cos(TAU*(c*t+vec3(0.,0.36,0.74)));}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.1,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nfloat spec (vec3 rd, vec3 n, vec3 l)\n{\n    vec3 h = normalize(l-rd);\n    return pow(max(dot(n,h),0.), 15.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float dither = hash21(uv);\n\n    vec3 ro = vec3(3.,0.,-5.8),\n        p = ro,\n        rd = normalize(vec3(uv,1.)),\n        l = vec3(-2.,1., -3.),\n        col = vec3(0.01,0.,0.03);\n\n    float shad, d = 0.;\n    bool hit = false;\n\n    for (float i=0.; i<64.;i++)\n    {\n        d = SDF(p);\n        if (d<0.001)\n        {\n            hit = true;\n            shad = i/64.;\n            break;\n        }\n        d *= 0.7 + dither*0.1;\n        p += d*rd;\n    }\n\n    if(hit)\n    {\n        if (d == ruban) col = palette(texture(iChannel0,new_p.xx*0.02).r, vec3(1.));\n        if (d == sphere) col = vec3(0.5,0.2,0.);\n\n        vec3 n = getnorm(p);        \n        col += spec(rd,n,l);\n    }\n\n    col += g1*length(uv)*0.1;\n    \n    // Output to screen\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}