{"ver":"0.1","info":{"id":"3tBBRG","date":"1599150363","viewed":376,"name":"GaboryPerlin 3: solar flares","username":"FabriceNeyret2","description":"Cascaded version of Gabory Perlin (see [url]https://shadertoy.com/view/3lSfWW[/url] ).\nClick for multiplicative noise.\nUncomment line #53 for scale-dependent anisotropy. ","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["perlinnoise","displacement","distortion","flownoise","filament","divergencefree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// variant of https://shadertoy.com/view/3tSBRG\n// variant of https://shadertoy.com/view/3lSfWW\n// inspired from https://shadertoy.com/view/WtBBD1\n\nfloat A = .2, // Anisotropy. 1 = isotropic\n      D = 0., // favorite dir\n  phase = 0.,\n phaseY = 0.,\n      K = 0.; // seed for random numbers\n//#define D atan((p).y,(p).x)\n\n  #define C(x)       ( .5+.5*cos(3.14* (x) ) )\n  #define cross(a,b) ( (a).x*(b).y - (a).y*(b).x )\n//#define rot(a)       mat2( cos( a + vec4(0,11,33,0) ) )\n  #define hash(p,K)    fract(sin(dot(p+K, vec2(12.9898, 78.233))) * 43758.5453)\n//#define hash2(p)   ( 2.* fract( sin( (p) * mat2(127.1,311.7, 269.5,183.3) ) *43758.5453123 ) - 1. )\n  #define hash2(p)     cos( A/2.*6.28*hash(p,K) + vec2(0,11) + D + V(p)*iTime ) // variant of random gradient + rotating (= lownoise)\n//#define l(i,j)       dot( hash2(I+vec2(i,j)) , F-vec2(i,j) )       // random wavelet at grid vertex I+vec2(i,j) \n\n  #define wave(v,x,f)  cos( 6.28*( 2.*dot(x,v) + f ) )\n//#define Gabor(v,x,f) wave(v,x,f) * exp(-.5*1.*dot(x,x) )\n//                     wave        *       ~Gaussian                        * structuring the gaussian / normalization of this ( see https://www.desmos.com/calculator/jejjp1xikd )\n//#define Gabor(v,x,f) wave(v,x,f) * C(dot(x,v))  *step(abs(dot(x,v))  ,1.) * C(dot(x,v)  -phaseY) / (.25 + C(phaseY)/2.)\n  #define Gabor(v,x,f) wave(v,x,f) * C(cross(x,v))*step(abs(cross(x,v)),1.) * C(cross(x,v)-phaseY) / (.25 + C(phaseY)/2.)\n\n  #define l(i,j)       Gabor( hash2(I+vec2(i,j)), F-vec2(i,j) , phase + hash(I+vec2(i,j),2.))       // random wavelet at grid vertex I+vec2(i,j) \n  #define L(j,x)       mix( l(0,j), l(1,j), x )\n\n  #define V(p)         0.                           // flownoise rotation speed \n//#define V(p)       ( 2.*mod((p).x+(p).y,2.)- 1. ) // checkered rotation direction \n//#define V(p)         length(p)\n//#define V(p)       ( 8. - length(p) )\n\nfloat GaboryPerlin(vec2 p) {\n    vec2 I = floor(p), \n         F = fract(p), \n     //  U = F;\n     //  U = F*F*(3.-2.*F);                   // based Perlin noise\n         U = F*F*F*( F* ( F*6.-15.) + 10. );  // improved Perlin noise ( better derivatives )\n    return mix( L(0,U.x) , L(1,U.x) , U.y );  // smooth interpolation of corners random wavelets\n}\n\nfloat layer(vec2 U) {\n#if 0\n    float v = GaboryPerlin( U );              // only 1 kernel\n#else\n    float v = 0., N = 4.;\n    for ( float i = 0.; i < 5.; i++, K+=.11 ) // sum N kernels\n        v += GaboryPerlin( U ); \n    v /= 2.*sqrt(N);\n    v *= mix(127./80.,127./50.,A)/2.; // try to regularize std-dev\n#endif \n    return v;\n}\n\nfloat cascade(vec2 U) {  // --- regular additive cascade\n    float v = 0., s = .5, A0=A;\n    U += 100.;\n    for (int i=0; i<5; i++)\n     // A = mix(1.,A0,1.-.5*float(i)/4.), // octave-dependent anisotropy\n        v += layer(U)*s, U*=2., s/=2.;\n    return v;\n}\n\nfloat mul_cascade(vec2 U) { // --- multiplicativ cascade\n    float v = 1., A0=A;\n    U += 100.;\n    for (int i=0; i<5; i++)\n     // A = mix(1.,A0,1.-.5*float(i)/4.), // octave-dependent anisotropy\n        v *= 1.+layer(U), U*=2.;\n    return v;\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         S = 8. / R.yy,\n         U = ( 2.*u - R ) * S, I = floor(U);\n    \n    A = 0.;   // anisotropy\n    D = 6.28* cos(u.x/R.y+.3*iTime) * cos(u.y/R.y-.2*iTime); // fiber direction\n // phase  = iTime;  // phase, along the Gabor field direction \n // phaseY = iTime;  // orthophase, along the front direction\n    \n    U = U/8.;\n    float v = iMouse.z <= 0. \n        ? .5 + .5* cascade(U)\n        : mul_cascade(U) / 3.;\n    \n // v *= .01/fwidth(v);\n    O = v * vec4(2,1.3,1,1); // coloring\n }","name":"Image","description":"","type":"image"}]}