{"ver":"0.1","info":{"id":"csK3W3","date":"1679328431","viewed":113,"name":"electric field lines","username":"lalaoopybee","description":"drag mouse around ","likes":16,"published":1,"flags":32,"usePreview":0,"tags":["visualization","vectorfield","lic","etf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//line integral convolution\n#define STEPS 7//[3, 10]\n\n#define RAD 25.\n\nvoid mouseAnim(out vec2 a, out vec2 b){\n    if(iMouse.xy==vec2(0.)){\n        float angle=iTime*.25;\n        vec2 a0=vec2(cos(angle), sin(angle*2.))*.5+.5;\n        vec2 b0=vec2(sin(angle*2.), cos(angle*3.))*.5+.5;\n        a=a0*iResolution.xy;\n        b=b0*iResolution.xy;\n    }\n    else a=iMouse.xy, b=abs(iMouse.zw);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 ptA, ptB;\n    mouseAnim(ptA, ptB);\n\n    vec2 uv=fragCoord/iResolution.xy;\n    \n    //trace pt along line\n    vec2 pt0=fragCoord+.5;\n    vec2 dir=normalize(texture(iChannel0, uv).xy);\n    float sum=0.;\n    //forward and back\n    for(int i=-STEPS;i<=STEPS;i++){\n        vec2 pt=pt0+float(i)*dir;\n        vec2 ptUV=pt/iResolution.xy;\n        //dir=normalize(texture(iChannel0, ptUV).xy);\n        sum+=texture(iChannel1, ptUV).r;\n    }\n    float mean=sum/float(STEPS*2);\n    \n    fragColor=vec4(0.);\n    vec2 diffA=ptA-fragCoord;\n    vec2 diffB=ptB-fragCoord;\n    float ttl=RAD*RAD*(QA/dot(diffA, diffA)+QB/dot(diffB, diffB));\n    if(ttl>0.) fragColor.r=ttl;\n    else fragColor.b=abs(ttl);\n    \n    fragColor=mix(vec4(mean), fragColor*mean, .5);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define K (8.9875518*10e9)\n\nvoid mouseAnim(out vec2 a, out vec2 b){\n    if(iMouse.xy==vec2(0.)){\n        float angle=iTime*.25;\n        vec2 a0=vec2(cos(angle), sin(angle*2.))*.5+.5;\n        vec2 b0=vec2(sin(angle*2.), cos(angle*3.))*.5+.5;\n        a=a0*iResolution.xy;\n        b=b0*iResolution.xy;\n    }\n    else a=iMouse.xy, b=abs(iMouse.zw);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 ptA, ptB;\n    mouseAnim(ptA, ptB);\n\n    //kq/(dx^2+dy^2)\n    vec2 diffA=ptA-fragCoord;\n    float vA=K*QA/dot(diffA, diffA);\n    \n    vec2 diffB=ptB-fragCoord;\n    float vB=K*QB/dot(diffB, diffB);\n    \n    vec2 normA=normalize(diffA);\n    vec2 normB=normalize(diffB);\n    \n    fragColor=vec4(vA*normA+vB*normB, vA+vB, 1.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define QA 1.\n#define QB -1.","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//make sufficiently sized noise texture\n\n// MIT License...\n/* Copyright (c)2014 David Hoskins.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.*/\n\nfloat hash12(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    fragColor=vec4(hash12(fragCoord), 0., 0., 1.);\n}","name":"Buffer B","description":"","type":"buffer"}]}