{"ver":"0.1","info":{"id":"7sXSR4","date":"1618507340","viewed":59,"name":"CubeRayTracingTarasovAA","username":"fatttony","description":"Cube with fireball inside","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float EPS = 1e-5;\nconst vec3 CAMERA_POS = vec3(-1., 1.5, -8.);\nconst vec3 LIGHT1_POS = vec3(-3., 1.5, 5.);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1., 1., 1.);\nconst float LIGHT1_POWER = 20.;\n\nvec3 LIGHT2_POS = vec3(3, 0.5, 0.);\nconst float LIGHT2_RADIUS = 0.4;\nconst vec3 LIGHT2_COLOR = vec3(0.1, 1., 0.2);\nconst float LIGHT2_POWER = 10.;\n\nvec3 LIGHT3_POS = vec3(0, 2.0, 0.0);\nconst float LIGHT3_RADIUS = 0.3;\nconst vec3 LIGHT3_COLOR = vec3(0.1, 1., 0.8);\nconst float LIGHT3_POWER = 15.;\n\nvec3 randDir;\n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.) {\n        return INF;\n    }\n    normal = vec3(0., 1., 0.);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-0.8 - pos.y) / dir.y;\n    if (t <= 0.) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0., 1., 0.);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -0.8) {\n            normal = normalize(vec3(worldPos.x, 0., worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -0.8) {\n        normal = normalize(vec3(worldPos.x, 0., worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nfloat traceCube(vec3 pos, vec3 dir, out vec3 normal, vec3 shuffle, float a) {\n    float cur_t, t = -1.;\n    //y = 0.0 || y = a\n    cur_t = -(pos.y + shuffle.y) / dir.y;\n    vec3 worldPos = cur_t * dir + pos;\n    if (worldPos.x + shuffle.x > 0. && worldPos.x + shuffle.x < a &&\n        worldPos.z + shuffle.z > 0. && worldPos.z + shuffle.z < a)\n    {\n        if (cur_t < t || t < 0.)\n        {\n            t = cur_t;\n            normal = vec3(0., -1., 0.);\n        }\n    }\n    \n    cur_t = (a - (pos.y + shuffle.y)) / dir.y;\n    worldPos = cur_t * dir + pos;\n    if (worldPos.x + shuffle.x > 0. && worldPos.x + shuffle.x < a &&\n        worldPos.z + shuffle.z > 0. && worldPos.z + shuffle.z < a)\n    {\n        if (cur_t < t || t < 0.)\n        {\n            t = cur_t;\n            normal = vec3(0., 1., 0.);\n        }\n    }\n    \n    //x = 0.0 || x = a\n    cur_t = -(pos.x + shuffle.x) / dir.x;\n    worldPos = cur_t * dir + pos;\n    if (worldPos.y + shuffle.y > 0. && worldPos.y + shuffle.y < a &&\n        worldPos.z + shuffle.z > 0. && worldPos.z + shuffle.z < a)\n    {\n        if (cur_t < t || t < 0.)\n        {\n            t = cur_t;\n            normal = vec3(-1., 0., 0.);\n        }\n    }\n    \n    cur_t = (a - (pos.x + shuffle.x)) / dir.x;\n    worldPos = cur_t * dir + pos;\n    if (worldPos.y + shuffle.y > 0. && worldPos.y + shuffle.y < a &&\n        worldPos.z + shuffle.z > 0. && worldPos.z + shuffle.z < a)\n    {\n        if (cur_t < t || t < 0.)\n        {\n            t = cur_t;\n            normal = vec3(1., 0., 0.);\n        }\n    }\n    //z = 0.0 || z = a\n    cur_t = -(pos.z + shuffle.z) / dir.z;\n    worldPos = cur_t * dir + pos;\n    if (worldPos.x + shuffle.x > 0. && worldPos.x + shuffle.x < a &&\n        worldPos.y + shuffle.y > 0. && worldPos.y + shuffle.y < a)\n    {\n        if (cur_t < t || t < 0.)\n        {\n            t = cur_t;\n            normal = vec3(0., 0., -1.);\n        }\n    }\n    \n    cur_t = (a - (pos.z + shuffle.z)) / dir.z;\n    worldPos = cur_t * dir + pos;\n    if (worldPos.x + shuffle.x > 0.0 && worldPos.x + shuffle.x < a &&\n        worldPos.y + shuffle.y > 0.0 && worldPos.y + shuffle.y < a)\n    {\n        if (cur_t < t || t < 0.)\n        {\n            t = cur_t;\n            normal = vec3(0., 0., 1.);\n        }\n    }\n    if(t < 0.)\n        return INF; \n    return t;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n        \n    vec3 cubNorm;\n    float cubT = traceCube(pos, dir, cubNorm, vec3(1., 0.8, 1.), 2.);\n    if (cubT < dist)\n        return true;\n    \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + \n    //мягкие тени\n    randDir * LIGHT1_RADIUS)\n    ? 0. : LIGHT1_POWER / distSq1;\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) \n    ? 0. : LIGHT2_POWER / distSq2;\n    \n    vec3 toLight3 = LIGHT3_POS - pos;\n    float distSq3 = dot(toLight3, toLight3);\n    float att3 = isOccluded(pos, LIGHT3_POS + randDir * LIGHT3_RADIUS)\n    ? 0.0 : LIGHT3_POWER / distSq3;\n    \n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHT3_COLOR\n        + texture(iChannel1, normal).rgb * 0.1);\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1. - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 +\n    // anti-aliasing - сглаживание краёв \n    (randVals.xy - 0.5)) \n    / iResolution.x;\n    \n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0., 1., 0.);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n     //motion blur для 2 источника света\n    LIGHT2_POS = LIGHT2_POS + vec3(1.,1.,0) * randVals * 0.4;\n    LIGHT3_POS = LIGHT3_POS + vec3(1.,0.,0.) * randVals * 0.1;\n   \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    \n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    \n    \n    vec3 result = vec3(0.);\n    float opacity = 1.;\n    vec3 fogEffect = vec3(0.);\n    vec3 colorMult = vec3(1., 1., 1.);\n    \n    for (int i = 0; i < 500; ++i) {\n        vec3 currPos = CAMERA_POS + viewVec * 0.1 * float(i);\n        float sdf = sphereSdf(currPos, vec3(0., 0., 0.), 1.);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(10. * (texture(iChannel2, curPos.xz * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel2, curPos.xz * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x)\n            * 0.25 * abs(sdf), 0.1);\n            float absorbtion = prevOpacity - opacity;\n            vec3 fogColorAtPoint = texture(iChannel3, currPos * 0.5).rgb * 6.;\n            fogEffect += vec3(absorbtion) * vec3(0.2 + fogColorAtPoint.x * 2.8, fogColorAtPoint.y, 0.);\n        }\n    }\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        //реализация плоскости\n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb ;\n            normal = planeNorm;\n        }\n        //реализация 1 источника света\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n         //реализация 2 источника света\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n         //реализация 3 источника света\n        vec3 l3Norm;\n        float light3T = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_RADIUS, l3Norm);\n        if (light3T < t) {\n            t = light3T;\n            materialType = EMISSION;\n            color = LIGHT3_COLOR;\n            normal = l3Norm;\n        }\n        //реализация подставки(цилиндра)\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        //реализация куба с отступом shuffle \n        vec3 shuffle = vec3(1., 0.8, 1.);\n        vec3 cubNorm;\n        float cubT = traceCube(curPos, curDir, cubNorm, shuffle, 2.);\n        if (cubT < t) {\n            t = cubT;\n            normal = cubNorm;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(1.2, 0.8, 0.);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * EPS;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * EPS;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n    result = mix(fogEffect, fragColor.rgb, opacity);\n    fragColor = vec4(result, 1.);\n    fragColor.rgb = fragColor.rgb * colorMult;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\nfloat sphereSdf(vec3 pos, vec3 center, float radius) {\n    float scale = mix(0.25, 1.0, 0.0);\n    return length((pos - center)) - radius;\n\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}","name":"Common","description":"","type":"common"}]}