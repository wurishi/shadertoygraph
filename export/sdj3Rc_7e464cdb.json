{"ver":"0.1","info":{"id":"sdj3Rc","date":"1617770714","viewed":474,"name":"Applying Texture to Sphere","username":"inspirnathan","description":"Experiment for applying textures to spheres using information found in BigWIngs' \"Texturing SDFs\" tutorial: [url]https://www.shadertoy.com/view/tscBWn[/url]\nYou can use the mouse to move the camera around the sphere.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["texture","sphere","buffer","inspirnathan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n** Example on how to apply a texture to a sphere.\n** Inspired by BigWIngs' \"Texturing SDFs\" tutorial: https://www.shadertoy.com/view/tscBWn\n*/\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nconst float PI = 3.14159265359;\n\nmat2 rotate(float theta) {\n  float s = sin(theta), c = cos(theta);\n  return mat2(c, -s, s, c);\n}\n\nfloat sdSphere(vec3 p, float r )\n{\n  return length(p) - r;\n}\n\nfloat sdScene(vec3 p) {\n  return sdSphere(p, 1.);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float depth = MIN_DIST;\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    float d = sdScene(p);\n    depth += d;\n    if (d < PRECISION || depth > MAX_DIST) break;\n  }\n\n  return depth;\n}\n\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005;\n    float r = 2.;\n    return normalize(\n      e.xyy * sdScene(p + e.xyy) +\n      e.yyx * sdScene(p + e.yyx) +\n      e.yxy * sdScene(p + e.yxy) +\n      e.xxx * sdScene(p + e.xxx));\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n\tvec3 cd = normalize(lookAtPoint - cameraPos); // camera direction\n\tvec3 cr = normalize(cross(vec3(0, 1, 0), cd)); // camera right\n\tvec3 cu = normalize(cross(cd, cr)); // camera up\n\t\n\treturn mat3(-cr, cu, -cd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec2 m = iMouse.xy/iResolution.xy;\n\n  vec3 col = vec3(0.835, 1, 1);\n  \n  vec3 lp = vec3(0); // lookat point (aka camera target)\n  vec3 ro = vec3(0, 0, 3); // ray origin that represents camera position\n\n  ro.yz *= rotate(mix(-PI, PI, m.y));\n  ro.xz *= rotate(mix(-PI, PI, m.x));\n\n  vec3 rd = camera(ro, lp) * normalize(vec3(uv, -1)); // ray direction\n\n  float d = rayMarch(ro, rd);\n\n  vec3 p = ro + rd * d;\n  vec3 normal = calcNormal(p);\n  vec3 lightPosition = vec3(4, 4, 7);\n  vec3 lightDirection = normalize(lightPosition - p);\n\n  float diffuse = dot(normal, lightDirection) * 0.5 + 0.5;\n  \n  vec2 polarUV = vec2(atan(p.x, p.z)/PI, p.y/2.) + 0.5;\n  polarUV.x -= iTime * 0.1;\n  vec3 bufferA = texture(iChannel0, polarUV).rgb;\n  vec3 bufferB = texture(iChannel1, polarUV).rgb;\n  vec3 sphereColor = diffuse * bufferA; // Change to bufferB to see Nyan cat!\n  \n  col = mix(col, sphereColor, step(d - MAX_DIST, 0.));\n\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float sdfStar5(vec2 p, float r, float rf, vec2 offset)\n// Credit: https://iquilezles.org/articles/distfunctions2d\n{\n    p -= offset;\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    float d = length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n\n    return step(0., -d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; // <0, 1>\n    uv -= 0.5; // <-0.5,0.5>\n    uv.x *= iResolution.x/iResolution.y; // fix aspect ratio\n\n    vec3 col = vec3(1); // set background color to white\n\n    float star = sdfStar5(uv, 0.22, 0.45, vec2(-0.6, 0));\n    float star2 = sdfStar5(uv, 0.22, 0.45, vec2(-0, 0));\n    float star3 = sdfStar5(uv, 0.22, 0.45, vec2(0.6, 0));\n\n    col = mix(col, vec3(1, 0, 0), star);\n    col = mix(col, vec3(1, 0, 0), star2);\n    col = mix(col, vec3(1, 0, 0), star3);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}