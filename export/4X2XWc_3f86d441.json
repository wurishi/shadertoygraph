{"ver":"0.1","info":{"id":"4X2XWc","date":"1711233360","viewed":83,"name":"ToroidRave","username":"_TAU_","description":"Remix of the tutorial shader: https://www.youtube.com/watch?v=rA9NmBRqfjI\nRemixed to fit with a 90s black and white rave flyer aestetic","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["blackandwhite","90s","rave","toroid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float torusSDF(vec3 p, float radius){  \n     return length( vec2( length(p.xz) - 1., p.y) ) - radius;   \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    float t = iTime * .2;\n    \n    uv *= mat2(cos(t),-sin(t), sin(t), cos(t)); // camera rotation\n    \n    //camera code\n    vec3 ro = vec3(0,0,-1);  // camera position - ray origin\n    vec3 lookat = mix(vec3(0),vec3(-.7,0,-.7), sin(t*1.56)*.5+.5);// steering point of camera\n    float zoom = mix(.2, .7, sin(t)*.5+.5); // audio mod: field of view\n    \n    // we need to deine the three directions with respect to the camera POV:\n    // we use a forward vector which points toward the virtual screen, a right and an up component\n    // we use the cross product, which always yields an orthogonal vector wrt the plane defined by the input vectors\n    vec3 f = normalize(lookat-ro), // forward vector: look direction camera\n        r = normalize(cross(vec3(0,1,0), f)), //right vector: points to the right of the  forward vector\n        u = cross(f,r), // up vector: points up wrt the forward vector\n        c = ro + f*zoom, //camera center\n        i = c + uv.x * r + uv.y * u, // intersection point, where camera ray intersects the virtual screen\n        rd = normalize(i-ro);\n\n    float radius = mix(.3, .9, sin(t*.5)*.5+.5);//radius of toroid\n    // Ray Marcher\n    float dS, dO; \n    vec3 p; \n    for(int i = 0; i < 100; i++){\n        p = ro + dO*rd;\n        dS = - (torusSDF(p, radius)); //the minus is needed to get \"inside\" the torus\n        if(dS < .001) break;\n        dO += dS;\n    }\n    \n    vec3 col = vec3(0.0);\n    float speed = 5.;\n    // if the ray marcher hits something ( i.e., the dS is small )\n    // take the points on the sufrace of the torus ( p inside the if. ) and draw on the surface\n    if(dS < .001){\n        float x = atan(p.x, p.z) + t * speed;             // from -pi to pi\n        float y = atan(length(p.xz) - 1., p.y); // from -pi to pi\n        float bands = sin(sin(y*3.+ 50. * t)+x*20.); // 10. 20. modulable by audio\n        float ripples = sin((x*10.-y*30.)*3.)*.5+.5;\n        float waves = sin(x*2.-y*6.+ t * 37.);\n        \n        float b1 = smoothstep(-.2, .2, bands);\n        float b2 = smoothstep(-.2, .2, bands-.1); //.5 narrows the white part (audioMOD)\n        \n        float m = b1*(1. - b2);\n        m = max(m, ripples * b2 * max(0., waves));\n        m +=max(0., waves * .3 * b2);\n        \n        col += m;\n        col = smoothstep(.0, 0.1, col);\n        \n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}