{"ver":"0.1","info":{"id":"DdsXRl","date":"1669423063","viewed":807,"name":"STRANGER THINGS","username":"alro","description":"\"It isn't because I had a crush on you. It's because she wouldn't stop staring at you. [...] I wanted her to look at me. But she couldn't pull her eyes away from you - and your stupid hair.\"","likes":35,"published":1,"flags":96,"usePreview":0,"tags":["2d","sdf","bezier","text","glow","flicker","film","vhs","path","neon","grain","fireflies","reproduction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MscGWH","filepath":"https://soundcloud.com/user-365177788/stranger-things-main-theme?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/user-365177788/stranger-things-main-theme?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Trying to recreate the Stranger Things title logo. \n    https://www.youtube.com/watch?v=-RcPZdihrp4&t=35s\n    SVG paths are discretized into lines and imported as arrays. \n    Larger arrays can lead to long compile times (although 0.2s on MacOS)\n*/\n\n\nvec3 modulo(vec3 m, float n){\n    return mod(mod(m, n) + n, n);\n}\n\n// 5th order polynomial interpolation\nvec3 fade(vec3 t){\n    return (t * t * t) * (t * (t * 6.0 - 15.0) + 10.0);\n}\n\n#define SIZE 2048.0\n\n// https://www.shadertoy.com/view/4djSRW\nvec3 hash(vec3 p3){\n    p3 = modulo(p3, SIZE);\n    p3 = fract(p3 * vec3(0.1031, 0.1030, 0.0973));\n    p3 += dot(p3, p3.yxz + 33.33);\n    return 2.0 * fract((p3.xxy + p3.yxx) * p3.zyx) - 1.0;\n}\n\nfloat gradientNoise(vec3 p){\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n\tvec3 u = fade(f);\n    return mix( mix( mix( dot( hash(i + vec3(0.0,0.0,0.0)), f - vec3(0.0,0.0,0.0)), \n              dot( hash(i + vec3(1.0,0.0,0.0)), f - vec3(1.0,0.0,0.0)), u.x),\n         mix( dot( hash(i + vec3(0.0,1.0,0.0)), f - vec3(0.0,1.0,0.0)), \n              dot( hash(i + vec3(1.0,1.0,0.0)), f - vec3(1.0,1.0,0.0)), u.x), u.y),\n    mix( mix( dot( hash(i + vec3(0.0,0.0,1.0)), f - vec3(0.0,0.0,1.0)), \n              dot( hash(i + vec3(1.0,0.0,1.0)), f - vec3(1.0,0.0,1.0)), u.x),\n         mix( dot( hash(i + vec3(0.0,1.0,1.0)), f - vec3(0.0,1.0,1.0)), \n              dot( hash(i + vec3(1.0,1.0,1.0)), f - vec3(1.0,1.0,1.0)), u.x), u.y), u.z );\n}\n\n//---------------------------- Blur ----------------------------\n\n// Cubic B-spline weighting\nvec2 w0(vec2 a){\n    return (1.0/6.0)*(a*(a*(-a + 3.0) - 3.0) + 1.0);\n}\n\nvec2 w1(vec2 a){\n    return (1.0/6.0)*(a*a*(3.0*a - 6.0) + 4.0);\n}\n\nvec2 w2(vec2 a){\n    return (1.0/6.0)*(a*(a*(-3.0*a + 3.0) + 3.0) + 1.0);\n}\n\nvec2 w3(vec2 a){\n    return (1.0/6.0)*(a*a*a);\n}\n\n// g0 is the amplitude function\nvec2 g0(vec2 a){\n    return w0(a) + w1(a);\n}\n\n// h0 and h1 are the two offset functions\nvec2 h0(vec2 a){\n    return -1.0 + w1(a) / (w0(a) + w1(a));\n}\n\nvec2 h1(vec2 a){\n    return 1.0 + w3(a) / (w2(a) + w3(a));\n}\n\nvec4 bicubic(sampler2D tex, vec2 uv, vec2 textureLodSize, float lod){\n\t\n    uv = uv * textureLodSize + 0.5;\n    \n\tvec2 iuv = floor(uv);\n\tvec2 f = fract(uv);\n\n    // Find offset in texel\n    vec2 h0 = h0(f);\n    vec2 h1 = h1(f);\n\n    // Four sample points\n\tvec2 p0 = (iuv + h0 - 0.5) / textureLodSize;\n\tvec2 p1 = (iuv + vec2(h1.x, h0.y) - 0.5) / textureLodSize;\n\tvec2 p2 = (iuv + vec2(h0.x, h1.y) - 0.5) / textureLodSize;\n\tvec2 p3 = (iuv + h1 - 0.5) / textureLodSize;\n\t\n    // Weighted linear interpolation\n    // g0 + g1 = 1 so only one is needed for a mix\n    vec2 g0 = g0(f);\n    return mix( mix(textureLod(tex, p3, lod), textureLod(tex, p2, lod), g0.x),\n                mix(textureLod(tex, p1, lod), textureLod(tex, p0, lod), g0.x), g0.y);\n}\n\nvec4 textureBicubic(sampler2D s, vec2 uv, float lod) {\n\n    vec2 lodSizeFloor = vec2(textureSize(s, int(lod)));\n    vec2 lodSizeCeil = vec2(textureSize(s, int(lod + 1.0)));\n\n    vec4 floorSample = bicubic(s, uv, lodSizeFloor.xy, floor(lod));\n    vec4 ceilSample = bicubic(s, uv, lodSizeCeil.xy, ceil(lod));\n\n    return mix(floorSample, ceilSample, fract(lod));\n}\n\nvec4 getBlurredTexture(sampler2D s, vec2 uv, float blur){\n    float maxLod = floor(log2(iChannelResolution[0].x));\n    float lod = mix(0.0, maxLod-1.0, blur);\n    \n    return textureBicubic(s, uv, lod);\n}\n\n\n//----------------------------- Tonemapping and output ------------------------------\n\n// https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\nvec3 ACESFilm(vec3 x){\n    return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 blurredData = getBlurredTexture(iChannel0, uv, 0.45);\n\n    vec3 glow = 0.5 * blurredData.rgb;\n\n    vec3 col = glow + texture(iChannel0, uv).rgb;\n    \n    // Vignette\n    col *= smoothstep(0.65, 0.0, length(fragCoord/iResolution.xy-0.5));\n\n    uv.y /= iResolution.x/iResolution.y;\n    float noise = max(0.0, gradientNoise(vec3(512.0 * uv, 8.0 * iTime)));\n    \n    // Grain\n    col *= 1.0 - 0.3 * noise;\n    \n    // Fireflies\n    col += 0.05 * smoothstep(0.99, 1.0, 1.5 * noise);\n    \n    col = max(vec3(0), col);\n    \n    // Tonemapping\n    col = ACESFilm(col);\n\n    // Gamma\n    col = pow(col, vec3(0.4545));\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n    Copyright (c) 2022 al-ro\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\n// Discretized svg paths\n#define LENGTH0 64 \nvec2[] path0 = vec2[](vec2(125.92, 37.51), vec2(127.26, 39.62), vec2(128.37, 41.81), vec2(129.24, 44.10), vec2(129.90, 46.49), vec2(131.93, 45.77), vec2(127.35, 17.51), vec2(124.49, 19.04), vec2(122.25, 19.55), vec2(120.41, 19.55), vec2(79.53, 19.55), vec2(77.60, 19.55), vec2(76.47, 19.45), vec2(74.94, 19.15), vec2(72.70, 17.41), vec2(67.81, 45.67), vec2(69.85, 46.18), vec2(70.25, 44.73), vec2(70.83, 43.13), vec2(71.58, 41.41), vec2(72.50, 39.55), vec2(73.34, 38.04), vec2(74.18, 36.71), vec2(75.02, 35.55), vec2(75.86, 34.55), vec2(77.52, 33.06), vec2(79.14, 31.80), vec2(80.69, 30.76), vec2(82.18, 29.96), vec2(83.71, 29.37), vec2(85.39, 28.95), vec2(87.23, 28.71), vec2(89.22, 28.63), vec2(89.22, 86.69), vec2(89.20, 88.33), vec2(89.14, 89.75), vec2(89.05, 90.94), vec2(88.91, 91.89), vec2(87.18, 95.26), vec2(85.95, 96.45), vec2(84.72, 97.27), vec2(83.47, 97.75), vec2(82.18, 97.91), vec2(81.27, 98.01), vec2(81.27, 101.07), vec2(118.68, 101.07), vec2(118.68, 97.91), vec2(115.11, 97.30), vec2(112.46, 94.85), vec2(110.93, 90.77), vec2(110.78, 89.58), vec2(110.65, 88.33), vec2(110.56, 87.02), vec2(110.53, 85.67), vec2(110.53, 84.04), vec2(110.42, 28.63), vec2(112.79, 28.77), vec2(115.02, 29.17), vec2(117.12, 29.84), vec2(119.09, 30.78), vec2(120.84, 32.00), vec2(122.58, 33.53), vec2(124.28, 35.37), vec2(125.92, 37.51)); \n\n#define LENGTH1 183 \nvec2[] path1 = vec2[](vec2(284.35, 100.97), vec2(284.35, 97.81), vec2(281.69, 96.79), vec2(280.06, 94.75), vec2(279.25, 91.99), vec2(279.05, 88.52), vec2(279.15, 34.04), vec2(310.44, 77.91), vec2(311.71, 79.73), vec2(312.74, 81.34), vec2(313.54, 82.75), vec2(314.12, 83.93), vec2(314.72, 85.56), vec2(315.17, 87.22), vec2(315.45, 88.93), vec2(315.54, 90.67), vec2(315.33, 93.10), vec2(314.70, 95.02), vec2(313.65, 96.42), vec2(312.18, 97.30), vec2(310.44, 97.61), vec2(310.44, 100.77), vec2(331.04, 100.77), vec2(331.04, 97.61), vec2(328.39, 96.69), vec2(326.55, 94.65), vec2(325.74, 91.59), vec2(325.53, 88.52), vec2(325.53, 34.35), vec2(325.55, 33.18), vec2(325.61, 31.96), vec2(325.71, 30.69), vec2(325.84, 29.35), vec2(327.37, 24.76), vec2(329.61, 22.82), vec2(331.24, 22.51), vec2(331.24, 19.55), vec2(310.65, 19.55), vec2(310.65, 22.72), vec2(313.40, 23.53), vec2(315.34, 25.47), vec2(316.36, 27.92), vec2(316.56, 31.29), vec2(316.56, 32.31), vec2(316.56, 50.67), vec2(302.90, 30.16), vec2(301.98, 28.43), vec2(301.37, 25.88), vec2(301.88, 24.25), vec2(302.90, 23.02), vec2(304.12, 22.61), vec2(304.12, 19.55), vec2(265.18, 19.55), vec2(265.18, 22.72), vec2(269.16, 24.96), vec2(270.07, 28.23), vec2(270.21, 29.41), vec2(270.30, 30.65), vec2(270.36, 31.93), vec2(270.38, 33.23), vec2(270.38, 35.27), vec2(270.38, 85.06), vec2(270.34, 87.07), vec2(270.23, 88.97), vec2(270.04, 90.78), vec2(269.77, 92.50), vec2(267.83, 96.79), vec2(267.22, 96.38), vec2(265.49, 93.93), vec2(264.77, 92.40), vec2(247.03, 28.94), vec2(246.52, 27.31), vec2(246.32, 25.88), vec2(246.63, 24.55), vec2(248.87, 23.12), vec2(248.87, 19.55), vec2(218.69, 19.55), vec2(218.69, 22.61), vec2(219.61, 23.02), vec2(220.53, 24.04), vec2(220.93, 25.98), vec2(220.63, 27.82), vec2(220.02, 29.76), vec2(201.16, 87.61), vec2(199.42, 91.79), vec2(198.91, 92.50), vec2(197.38, 88.32), vec2(192.19, 74.24), vec2(186.58, 63.73), vec2(180.26, 53.63), vec2(184.23, 51.28), vec2(186.35, 49.66), vec2(188.29, 47.97), vec2(190.02, 46.21), vec2(191.57, 44.35), vec2(193.25, 41.64), vec2(194.47, 38.88), vec2(195.20, 36.01), vec2(195.45, 33.02), vec2(195.34, 30.88), vec2(194.81, 28.28), vec2(193.83, 25.99), vec2(192.41, 24.04), vec2(190.55, 22.41), vec2(188.24, 21.13), vec2(185.44, 20.20), vec2(182.17, 19.64), vec2(178.42, 19.45), vec2(130.71, 19.45), vec2(130.71, 22.61), vec2(133.16, 23.23), vec2(134.99, 25.47), vec2(135.35, 26.47), vec2(135.66, 27.78), vec2(135.88, 29.42), vec2(136.01, 31.39), vec2(136.11, 35.27), vec2(136.01, 88.52), vec2(135.60, 93.01), vec2(133.87, 95.97), vec2(132.14, 97.30), vec2(130.30, 97.71), vec2(130.30, 100.87), vec2(162.52, 100.87), vec2(162.52, 97.71), vec2(160.17, 96.99), vec2(158.03, 94.75), vec2(156.91, 91.89), vec2(156.60, 87.61), vec2(156.60, 64.65), vec2(160.17, 62.61), vec2(164.25, 69.34), vec2(165.27, 71.00), vec2(166.18, 72.61), vec2(166.99, 74.14), vec2(167.72, 75.57), vec2(173.32, 88.22), vec2(173.99, 90.09), vec2(174.47, 91.75), vec2(174.76, 93.20), vec2(174.85, 94.44), vec2(174.04, 96.69), vec2(170.67, 98.01), vec2(170.67, 100.97), vec2(192.59, 100.97), vec2(205.03, 100.97), vec2(215.22, 100.97), vec2(215.22, 97.91), vec2(212.88, 96.99), vec2(211.04, 94.85), vec2(210.74, 92.50), vec2(210.80, 90.78), vec2(210.97, 89.14), vec2(211.26, 87.57), vec2(211.66, 86.08), vec2(216.55, 69.55), vec2(217.78, 69.60), vec2(219.16, 69.76), vec2(220.72, 70.02), vec2(222.46, 70.36), vec2(224.12, 70.76), vec2(225.59, 71.19), vec2(226.84, 71.64), vec2(227.87, 72.10), vec2(230.18, 73.49), vec2(232.38, 75.24), vec2(234.46, 77.32), vec2(236.43, 79.75), vec2(238.00, 82.06), vec2(239.18, 84.26), vec2(239.99, 86.35), vec2(240.41, 88.32), vec2(240.51, 90.57), vec2(240.34, 92.62), vec2(239.82, 94.34), vec2(238.96, 95.76), vec2(237.76, 96.89), vec2(235.10, 97.91), vec2(235.10, 101.07), vec2(264.47, 101.07), vec2(270.38, 101.07), vec2(284.35, 101.07), vec2(284.35, 100.97)); \n\n#define LENGTH2 25 \nvec2[] path2 = vec2[](vec2(168.33, 48.43), vec2(166.26, 50.36), vec2(164.05, 52.04), vec2(161.68, 53.46), vec2(159.15, 54.65), vec2(156.81, 55.57), vec2(156.81, 35.16), vec2(157.32, 31.59), vec2(159.15, 29.45), vec2(160.32, 28.97), vec2(161.54, 28.62), vec2(162.81, 28.40), vec2(164.15, 28.33), vec2(165.98, 28.46), vec2(167.67, 28.86), vec2(169.20, 29.53), vec2(170.57, 30.47), vec2(171.85, 31.81), vec2(172.78, 33.37), vec2(173.34, 35.13), vec2(173.53, 37.10), vec2(173.16, 40.06), vec2(172.19, 42.96), vec2(170.59, 45.75), vec2(168.33, 48.43)); \n\n#define LENGTH3 10 \nvec2[] path3 = vec2[](vec2(230.82, 62.71), vec2(229.47, 61.93), vec2(228.15, 61.24), vec2(226.87, 60.66), vec2(225.62, 60.16), vec2(222.06, 59.24), vec2(220.02, 59.14), vec2(226.54, 36.29), vec2(234.19, 65.06), vec2(230.82, 62.71)); \n\n#define LENGTH4 97 \nvec2[] path4 = vec2[](vec2(455.31, 101.18), vec2(457.86, 101.79), vec2(460.21, 102.60), vec2(469.08, 71.49), vec2(466.73, 70.06), vec2(465.94, 72.77), vec2(464.79, 75.54), vec2(463.26, 78.35), vec2(461.33, 81.18), vec2(459.40, 83.63), vec2(457.43, 85.78), vec2(455.42, 87.65), vec2(453.38, 89.24), vec2(451.96, 90.12), vec2(450.47, 90.92), vec2(448.90, 91.65), vec2(447.26, 92.30), vec2(445.58, 92.78), vec2(443.92, 93.13), vec2(442.30, 93.35), vec2(440.73, 93.42), vec2(439.32, 93.36), vec2(437.98, 93.18), vec2(436.72, 92.86), vec2(435.54, 92.40), vec2(432.07, 89.34), vec2(430.54, 85.46), vec2(430.23, 80.87), vec2(430.23, 79.55), vec2(430.23, 77.61), vec2(430.23, 54.35), vec2(439.00, 54.35), vec2(442.67, 55.47), vec2(446.55, 58.32), vec2(447.37, 59.32), vec2(448.15, 60.47), vec2(448.90, 61.77), vec2(449.60, 63.22), vec2(450.93, 67.40), vec2(453.48, 66.89), vec2(448.89, 35.88), vec2(446.85, 36.59), vec2(446.85, 37.82), vec2(446.70, 39.50), vec2(446.25, 41.04), vec2(445.52, 42.45), vec2(444.51, 43.73), vec2(442.06, 45.37), vec2(439.41, 45.77), vec2(429.83, 45.77), vec2(429.83, 36.90), vec2(430.44, 32.51), vec2(432.48, 29.35), vec2(433.70, 28.49), vec2(435.23, 27.88), vec2(437.06, 27.53), vec2(439.20, 27.41), vec2(441.27, 27.51), vec2(443.35, 27.81), vec2(445.44, 28.31), vec2(447.56, 29.04), vec2(449.61, 29.96), vec2(451.50, 31.06), vec2(453.26, 32.34), vec2(454.90, 33.84), vec2(456.18, 35.29), vec2(457.34, 36.81), vec2(458.37, 38.40), vec2(459.29, 40.06), vec2(460.09, 41.80), vec2(460.78, 43.62), vec2(461.36, 45.52), vec2(461.84, 47.51), vec2(464.08, 45.47), vec2(459.08, 17.92), vec2(457.25, 18.64), vec2(455.42, 18.94), vec2(453.85, 19.21), vec2(452.36, 19.40), vec2(450.94, 19.52), vec2(449.60, 19.55), vec2(448.38, 19.55), vec2(403.42, 19.55), vec2(403.42, 22.72), vec2(405.77, 23.02), vec2(407.40, 24.45), vec2(408.42, 26.70), vec2(408.62, 29.96), vec2(408.62, 30.88), vec2(408.62, 88.63), vec2(408.31, 92.71), vec2(406.89, 95.87), vec2(405.46, 97.30), vec2(402.81, 98.12), vec2(402.81, 101.18), vec2(452.46, 101.18), vec2(455.31, 101.18)); \n\n#define LENGTH5 122 \nvec2[] path5 = vec2[](vec2(396.29, 64.65), vec2(396.59, 60.47), vec2(398.02, 57.51), vec2(399.07, 56.30), vec2(400.22, 55.44), vec2(401.47, 54.93), vec2(402.81, 54.75), vec2(402.81, 52.00), vec2(370.19, 52.00), vec2(370.19, 55.06), vec2(371.31, 55.06), vec2(374.88, 56.90), vec2(376.00, 58.94), vec2(376.30, 62.71), vec2(376.30, 82.10), vec2(376.19, 84.35), vec2(375.86, 86.38), vec2(375.31, 88.18), vec2(374.57, 89.75), vec2(373.36, 91.22), vec2(371.88, 92.27), vec2(370.11, 92.91), vec2(368.05, 93.12), vec2(365.62, 92.93), vec2(363.31, 92.37), vec2(361.11, 91.44), vec2(359.04, 90.14), vec2(357.08, 88.48), vec2(355.24, 86.44), vec2(353.53, 84.04), vec2(351.94, 81.28), vec2(350.72, 78.72), vec2(349.66, 76.10), vec2(348.77, 73.40), vec2(348.04, 70.64), vec2(347.47, 67.82), vec2(347.06, 64.92), vec2(346.82, 61.96), vec2(346.74, 58.94), vec2(346.74, 57.30), vec2(346.84, 55.88), vec2(347.12, 52.96), vec2(347.51, 50.18), vec2(348.00, 47.53), vec2(348.60, 45.02), vec2(349.30, 42.65), vec2(350.11, 40.42), vec2(351.02, 38.33), vec2(352.04, 36.39), vec2(353.40, 34.24), vec2(354.87, 32.39), vec2(356.46, 30.83), vec2(358.16, 29.55), vec2(359.97, 28.57), vec2(361.90, 27.87), vec2(363.95, 27.45), vec2(366.11, 27.31), vec2(369.05, 27.56), vec2(372.21, 28.30), vec2(375.58, 29.55), vec2(379.16, 31.29), vec2(380.61, 32.28), vec2(382.06, 33.58), vec2(383.52, 35.19), vec2(384.97, 37.10), vec2(386.71, 39.70), vec2(388.12, 42.13), vec2(389.20, 44.36), vec2(389.96, 46.39), vec2(391.70, 45.37), vec2(388.94, 17.41), vec2(386.60, 19.66), vec2(382.73, 20.68), vec2(378.14, 20.06), vec2(375.75, 19.49), vec2(373.49, 19.01), vec2(371.36, 18.61), vec2(369.37, 18.33), vec2(367.42, 18.12), vec2(365.41, 17.96), vec2(363.34, 17.86), vec2(361.21, 17.82), vec2(357.26, 17.97), vec2(353.48, 18.43), vec2(349.87, 19.20), vec2(346.43, 20.27), vec2(343.17, 21.66), vec2(340.10, 23.41), vec2(337.24, 25.49), vec2(334.61, 27.92), vec2(332.79, 29.97), vec2(331.15, 32.13), vec2(329.69, 34.41), vec2(328.39, 36.80), vec2(328.39, 77.91), vec2(329.27, 79.87), vec2(330.22, 81.75), vec2(331.25, 83.58), vec2(332.36, 85.36), vec2(333.97, 87.64), vec2(335.67, 89.74), vec2(337.45, 91.66), vec2(339.32, 93.40), vec2(341.28, 94.95), vec2(343.32, 96.32), vec2(345.44, 97.51), vec2(347.66, 98.52), vec2(349.57, 99.21), vec2(351.63, 99.80), vec2(353.85, 100.31), vec2(356.22, 100.73), vec2(358.74, 101.06), vec2(361.42, 101.29), vec2(364.25, 101.43), vec2(367.23, 101.48), vec2(401.08, 101.48), vec2(401.08, 98.42), vec2(398.63, 97.30), vec2(397.10, 95.26), vec2(396.29, 92.40), vec2(396.29, 89.34), vec2(396.29, 64.65)); \n\n#define LENGTH6 163 \nvec2[] path6 = vec2[](vec2(6.23, 119.64), vec2(7.96, 119.54), vec2(22.95, 121.99), vec2(26.53, 122.53), vec2(29.91, 122.91), vec2(33.10, 123.14), vec2(36.10, 123.21), vec2(38.14, 123.16), vec2(40.51, 123.01), vec2(43.11, 122.75), vec2(45.84, 122.39), vec2(48.58, 121.92), vec2(51.24, 121.36), vec2(53.71, 120.70), vec2(55.88, 119.95), vec2(58.24, 118.90), vec2(60.45, 117.75), vec2(62.51, 116.50), vec2(64.43, 115.14), vec2(66.24, 113.69), vec2(67.94, 112.13), vec2(69.54, 110.48), vec2(71.07, 108.73), vec2(72.77, 106.45), vec2(74.26, 104.06), vec2(75.53, 101.56), vec2(76.59, 98.94), vec2(77.42, 96.22), vec2(78.02, 93.39), vec2(78.39, 90.45), vec2(78.51, 87.40), vec2(78.44, 85.04), vec2(78.24, 82.69), vec2(77.88, 80.37), vec2(77.37, 78.09), vec2(76.69, 75.86), vec2(75.85, 73.69), vec2(74.82, 71.58), vec2(73.62, 69.55), vec2(72.40, 67.92), vec2(71.05, 66.42), vec2(69.58, 65.06), vec2(68.01, 63.83), vec2(64.87, 61.89), vec2(61.58, 60.26), vec2(58.19, 58.87), vec2(54.76, 57.61), vec2(39.06, 51.90), vec2(36.30, 50.96), vec2(33.60, 49.97), vec2(31.06, 48.70), vec2(28.76, 46.90), vec2(27.44, 45.17), vec2(26.58, 43.25), vec2(26.16, 41.21), vec2(26.15, 39.10), vec2(26.52, 37.00), vec2(27.23, 34.97), vec2(28.26, 33.08), vec2(29.58, 31.39), vec2(31.16, 30.02), vec2(33.03, 28.86), vec2(35.04, 27.97), vec2(37.02, 27.41), vec2(40.34, 26.90), vec2(43.46, 26.97), vec2(46.43, 27.58), vec2(49.32, 28.70), vec2(52.17, 30.30), vec2(55.04, 32.36), vec2(57.99, 34.84), vec2(61.08, 37.71), vec2(62.53, 39.51), vec2(63.85, 41.55), vec2(64.79, 43.24), vec2(65.16, 43.94), vec2(69.85, 17.62), vec2(66.08, 20.17), vec2(64.52, 20.70), vec2(62.76, 20.42), vec2(61.00, 19.76), vec2(59.45, 19.15), vec2(57.61, 18.49), vec2(55.78, 17.91), vec2(53.94, 17.38), vec2(52.11, 16.90), vec2(50.23, 16.47), vec2(48.33, 16.11), vec2(46.42, 15.81), vec2(44.50, 15.57), vec2(42.58, 15.39), vec2(40.65, 15.27), vec2(38.73, 15.19), vec2(36.82, 15.17), vec2(33.71, 15.23), vec2(30.56, 15.43), vec2(27.43, 15.81), vec2(24.38, 16.39), vec2(22.19, 17.05), vec2(19.98, 17.91), vec2(17.83, 18.90), vec2(15.81, 19.96), vec2(12.91, 21.93), vec2(10.39, 24.20), vec2(8.22, 26.74), vec2(6.37, 29.53), vec2(4.83, 32.51), vec2(3.56, 35.66), vec2(2.54, 38.94), vec2(1.75, 42.31), vec2(1.39, 44.38), vec2(1.18, 46.48), vec2(1.12, 48.58), vec2(1.21, 50.69), vec2(1.47, 52.77), vec2(1.89, 54.83), vec2(2.49, 56.86), vec2(3.28, 58.83), vec2(4.61, 61.57), vec2(6.17, 64.18), vec2(7.95, 66.63), vec2(9.93, 68.90), vec2(12.11, 70.96), vec2(14.49, 72.79), vec2(17.05, 74.37), vec2(19.79, 75.67), vec2(45.48, 84.24), vec2(46.89, 84.90), vec2(48.30, 85.88), vec2(49.57, 87.04), vec2(50.58, 88.22), vec2(51.83, 90.48), vec2(52.55, 93.00), vec2(52.78, 95.67), vec2(52.54, 98.38), vec2(51.87, 101.05), vec2(50.81, 103.56), vec2(49.38, 105.81), vec2(47.62, 107.71), vec2(44.41, 109.87), vec2(40.75, 111.23), vec2(36.79, 111.83), vec2(32.69, 111.76), vec2(28.58, 111.09), vec2(24.63, 109.89), vec2(20.97, 108.22), vec2(17.75, 106.17), vec2(16.24, 104.91), vec2(14.90, 103.51), vec2(13.71, 101.98), vec2(12.65, 100.35), vec2(11.71, 98.64), vec2(10.87, 96.86), vec2(10.10, 95.05), vec2(9.39, 93.22), vec2(9.03, 92.21), vec2(8.35, 90.30), vec2(7.70, 88.44), vec2(7.46, 87.61), vec2(3.58, 87.61), vec2(0.93, 123.21), vec2(4.60, 120.56), vec2(6.23, 119.64)); \n\n#define LENGTH7 79 \nvec2[] path7 = vec2[](vec2(536.57, 75.16), vec2(528.51, 62.20), vec2(529.11, 62.01), vec2(530.14, 61.44), vec2(531.64, 60.48), vec2(533.61, 59.14), vec2(536.36, 57.05), vec2(538.82, 54.89), vec2(540.99, 52.64), vec2(542.89, 50.26), vec2(544.04, 48.56), vec2(545.04, 46.82), vec2(545.90, 45.05), vec2(546.61, 43.25), vec2(547.16, 41.42), vec2(547.56, 39.56), vec2(547.80, 37.68), vec2(547.88, 35.78), vec2(547.68, 33.02), vec2(547.01, 29.70), vec2(545.77, 26.77), vec2(543.95, 24.27), vec2(541.56, 22.21), vec2(540.15, 21.31), vec2(538.58, 20.54), vec2(536.86, 19.89), vec2(535.00, 19.36), vec2(532.98, 18.95), vec2(530.82, 18.66), vec2(528.52, 18.49), vec2(526.07, 18.43), vec2(465.10, 18.43), vec2(465.10, 22.51), vec2(468.26, 23.33), vec2(470.61, 26.19), vec2(471.08, 27.45), vec2(471.46, 29.13), vec2(471.74, 31.25), vec2(471.93, 33.84), vec2(472.03, 38.84), vec2(471.83, 107.09), vec2(471.79, 108.78), vec2(471.69, 110.29), vec2(471.53, 111.64), vec2(471.32, 112.81), vec2(469.08, 116.68), vec2(466.83, 118.42), vec2(464.49, 118.93), vec2(464.49, 123.01), vec2(505.98, 123.01), vec2(505.98, 118.93), vec2(502.92, 118.01), vec2(500.27, 115.15), vec2(498.85, 111.48), vec2(498.65, 110.33), vec2(498.53, 109.03), vec2(498.46, 107.58), vec2(498.44, 105.97), vec2(498.44, 76.59), vec2(503.02, 73.93), vec2(508.33, 82.61), vec2(512.71, 90.67), vec2(519.95, 106.79), vec2(520.81, 109.18), vec2(521.41, 111.30), vec2(521.77, 113.16), vec2(521.88, 114.75), vec2(520.87, 117.60), vec2(516.58, 119.23), vec2(516.58, 123.01), vec2(560.52, 123.01), vec2(560.52, 119.44), vec2(556.45, 118.11), vec2(555.22, 116.99), vec2(553.86, 114.71), vec2(552.36, 111.30), vec2(550.74, 106.79), vec2(544.01, 88.73), vec2(536.57, 75.16)); \n\n#define LENGTH8 29 \nvec2[] path8 = vec2[](vec2(513.32, 55.57), vec2(510.70, 58.02), vec2(507.89, 60.16), vec2(504.89, 62.00), vec2(501.70, 63.53), vec2(498.64, 64.65), vec2(498.64, 38.43), vec2(499.25, 33.94), vec2(501.60, 31.18), vec2(503.09, 30.53), vec2(504.64, 30.09), vec2(506.26, 29.84), vec2(507.92, 29.76), vec2(510.27, 29.93), vec2(512.42, 30.45), vec2(514.36, 31.31), vec2(516.07, 32.51), vec2(517.70, 34.19), vec2(518.88, 36.18), vec2(519.60, 38.48), vec2(519.85, 41.08), vec2(519.74, 42.98), vec2(519.43, 44.85), vec2(518.91, 46.70), vec2(518.19, 48.52), vec2(517.27, 50.31), vec2(516.15, 52.09), vec2(514.83, 53.84), vec2(513.32, 55.57)); \n\n#define LENGTH9 64 \nvec2[] path9 = vec2[](vec2(148.45, 115.87), vec2(145.59, 117.40), vec2(143.35, 117.91), vec2(141.52, 117.91), vec2(100.64, 117.91), vec2(98.70, 117.91), vec2(97.58, 117.81), vec2(96.05, 117.50), vec2(93.81, 115.77), vec2(88.91, 144.23), vec2(90.95, 144.74), vec2(91.35, 143.29), vec2(91.93, 141.68), vec2(92.69, 139.92), vec2(93.60, 138.01), vec2(94.44, 136.48), vec2(95.28, 135.13), vec2(96.12, 133.96), vec2(96.97, 133.01), vec2(98.63, 131.50), vec2(100.24, 130.22), vec2(101.80, 129.18), vec2(103.29, 128.42), vec2(104.82, 127.82), vec2(106.50, 127.41), vec2(108.33, 127.17), vec2(110.32, 127.09), vec2(110.32, 185.55), vec2(110.30, 187.20), vec2(110.24, 188.61), vec2(110.15, 189.80), vec2(110.02, 190.76), vec2(108.28, 194.12), vec2(107.06, 195.31), vec2(105.82, 196.14), vec2(104.57, 196.62), vec2(103.29, 196.78), vec2(102.37, 196.88), vec2(102.37, 200.04), vec2(139.68, 200.04), vec2(139.68, 196.88), vec2(136.11, 196.27), vec2(133.46, 193.82), vec2(131.93, 189.74), vec2(131.78, 188.55), vec2(131.65, 187.29), vec2(131.56, 185.95), vec2(131.53, 184.53), vec2(131.53, 182.90), vec2(131.42, 126.99), vec2(133.80, 127.12), vec2(136.02, 127.52), vec2(138.12, 128.19), vec2(140.09, 129.13), vec2(141.90, 130.36), vec2(143.67, 131.89), vec2(145.38, 133.72), vec2(147.02, 135.87), vec2(148.36, 137.97), vec2(149.47, 140.16), vec2(150.35, 142.45), vec2(151.00, 144.84), vec2(153.04, 144.13), vec2(148.45, 115.87)); \n\n#define LENGTH10 65 \nvec2[] path10 = vec2[](vec2(193.61, 124.54), vec2(195.45, 124.95), vec2(197.79, 126.48), vec2(199.02, 129.54), vec2(199.17, 130.54), vec2(199.30, 131.85), vec2(199.39, 133.49), vec2(199.42, 135.46), vec2(199.42, 142.80), vec2(178.93, 142.80), vec2(178.93, 135.25), vec2(179.07, 132.65), vec2(179.47, 130.33), vec2(180.14, 128.28), vec2(181.07, 126.48), vec2(183.11, 124.95), vec2(185.25, 124.54), vec2(185.25, 121.48), vec2(152.32, 121.48), vec2(152.32, 124.54), vec2(154.97, 125.25), vec2(156.81, 127.09), vec2(157.83, 129.64), vec2(158.03, 133.52), vec2(158.03, 134.64), vec2(158.13, 186.68), vec2(158.09, 188.00), vec2(157.97, 189.35), vec2(157.75, 190.75), vec2(157.42, 192.19), vec2(156.09, 195.76), vec2(154.26, 197.29), vec2(152.43, 197.90), vec2(152.43, 200.96), vec2(185.15, 200.96), vec2(185.15, 197.90), vec2(183.82, 197.75), vec2(182.58, 197.29), vec2(181.45, 196.52), vec2(180.46, 195.45), vec2(179.24, 192.80), vec2(179.03, 189.33), vec2(179.03, 150.86), vec2(199.32, 150.86), vec2(199.32, 189.43), vec2(199.02, 192.80), vec2(197.89, 195.45), vec2(196.98, 196.51), vec2(195.91, 197.24), vec2(194.68, 197.66), vec2(193.31, 197.80), vec2(193.31, 200.86), vec2(226.54, 200.86), vec2(226.54, 197.80), vec2(222.46, 196.06), vec2(221.34, 193.21), vec2(220.93, 188.92), vec2(220.83, 134.95), vec2(221.14, 130.46), vec2(222.36, 126.99), vec2(224.81, 124.95), vec2(226.64, 124.54), vec2(226.64, 121.48), vec2(193.61, 121.48), vec2(193.61, 124.54)); \n\n#define LENGTH11 30 \nvec2[] path11 = vec2[](vec2(230.21, 124.54), vec2(233.17, 125.25), vec2(234.70, 126.58), vec2(236.02, 130.15), vec2(236.16, 131.24), vec2(236.25, 132.51), vec2(236.31, 133.95), vec2(236.33, 135.56), vec2(236.33, 189.23), vec2(236.02, 192.59), vec2(234.80, 195.25), vec2(233.82, 196.39), vec2(232.73, 197.22), vec2(231.53, 197.73), vec2(230.21, 197.90), vec2(230.21, 200.96), vec2(263.45, 200.96), vec2(263.45, 197.90), vec2(261.10, 197.29), vec2(259.37, 195.86), vec2(258.25, 193.00), vec2(257.84, 188.72), vec2(257.84, 135.25), vec2(258.04, 130.46), vec2(259.27, 127.09), vec2(260.69, 125.46), vec2(263.55, 124.44), vec2(263.55, 121.38), vec2(230.21, 121.38), vec2(230.21, 124.54)); \n\n#define LENGTH12 65 \nvec2[] path12 = vec2[](vec2(328.80, 195.04), vec2(327.98, 192.08), vec2(327.78, 189.12), vec2(327.78, 136.27), vec2(328.08, 131.38), vec2(329.61, 126.89), vec2(331.85, 124.95), vec2(333.49, 124.64), vec2(333.49, 121.58), vec2(312.79, 121.58), vec2(312.79, 124.64), vec2(315.64, 125.46), vec2(317.58, 127.40), vec2(318.60, 129.85), vec2(318.81, 133.11), vec2(318.81, 134.03), vec2(318.81, 151.99), vec2(305.04, 131.99), vec2(304.12, 130.36), vec2(303.51, 127.91), vec2(304.02, 126.38), vec2(305.04, 125.15), vec2(306.26, 124.75), vec2(306.26, 121.68), vec2(267.12, 121.68), vec2(267.12, 124.75), vec2(271.09, 126.99), vec2(272.01, 130.15), vec2(272.32, 134.95), vec2(272.32, 136.89), vec2(272.32, 185.55), vec2(272.28, 187.50), vec2(272.16, 189.37), vec2(271.97, 191.13), vec2(271.70, 192.80), vec2(269.67, 197.08), vec2(268.34, 197.80), vec2(266.61, 198.10), vec2(266.61, 201.16), vec2(286.49, 201.16), vec2(286.49, 198.10), vec2(283.84, 197.08), vec2(282.20, 195.14), vec2(281.39, 192.49), vec2(281.19, 189.12), vec2(281.29, 135.97), vec2(312.69, 178.82), vec2(313.95, 180.58), vec2(314.98, 182.16), vec2(315.78, 183.55), vec2(316.36, 184.74), vec2(316.97, 186.30), vec2(317.42, 187.94), vec2(317.69, 189.63), vec2(317.79, 191.37), vec2(317.57, 193.74), vec2(316.94, 195.63), vec2(315.89, 197.02), vec2(314.42, 197.90), vec2(312.69, 198.21), vec2(312.69, 201.27), vec2(333.38, 201.27), vec2(333.38, 198.21), vec2(330.73, 197.29), vec2(328.80, 195.04)); \n\n#define LENGTH13 134 \nvec2[] path13 = vec2[](vec2(454.60, 153.82), vec2(438.19, 147.70), vec2(436.18, 146.86), vec2(434.45, 145.88), vec2(433.01, 144.76), vec2(431.87, 143.52), vec2(430.23, 138.82), vec2(430.74, 135.46), vec2(431.66, 133.21), vec2(434.62, 130.15), vec2(439.31, 129.13), vec2(440.86, 129.21), vec2(442.44, 129.44), vec2(444.07, 129.82), vec2(445.73, 130.36), vec2(447.36, 131.03), vec2(448.88, 131.81), vec2(450.30, 132.71), vec2(451.64, 133.72), vec2(453.21, 135.22), vec2(454.71, 137.12), vec2(456.16, 139.43), vec2(457.56, 142.19), vec2(458.88, 145.86), vec2(461.33, 144.95), vec2(458.98, 119.13), vec2(457.05, 120.36), vec2(453.89, 121.79), vec2(453.17, 121.89), vec2(444.10, 119.85), vec2(441.94, 119.39), vec2(439.89, 119.07), vec2(437.96, 118.89), vec2(436.15, 118.83), vec2(434.79, 118.86), vec2(433.47, 118.97), vec2(432.19, 119.13), vec2(430.95, 119.34), vec2(428.48, 120.01), vec2(426.13, 120.79), vec2(423.90, 121.70), vec2(421.80, 122.73), vec2(419.82, 123.88), vec2(417.96, 125.16), vec2(416.23, 126.57), vec2(414.64, 128.11), vec2(412.99, 129.96), vec2(411.57, 131.92), vec2(410.38, 133.97), vec2(409.41, 136.13), vec2(408.66, 138.39), vec2(408.13, 140.75), vec2(407.81, 143.21), vec2(407.70, 145.76), vec2(407.95, 149.38), vec2(408.70, 152.73), vec2(409.94, 155.81), vec2(411.68, 158.62), vec2(413.69, 160.91), vec2(416.04, 162.90), vec2(418.73, 164.59), vec2(421.77, 165.96), vec2(439.82, 172.90), vec2(440.98, 173.44), vec2(442.03, 174.14), vec2(442.97, 175.01), vec2(443.79, 176.06), vec2(444.45, 177.19), vec2(444.89, 178.42), vec2(445.14, 179.75), vec2(445.22, 181.17), vec2(445.12, 183.10), vec2(444.55, 185.34), vec2(443.60, 187.31), vec2(442.29, 189.02), vec2(440.63, 190.45), vec2(438.70, 191.60), vec2(436.58, 192.43), vec2(434.27, 192.93), vec2(431.76, 193.10), vec2(429.38, 192.95), vec2(426.96, 192.50), vec2(424.52, 191.77), vec2(422.08, 190.76), vec2(419.69, 189.42), vec2(417.45, 187.84), vec2(415.38, 186.01), vec2(413.51, 183.92), vec2(412.27, 182.24), vec2(411.12, 180.26), vec2(410.05, 177.99), vec2(409.03, 175.45), vec2(408.36, 173.50), vec2(407.86, 171.77), vec2(407.51, 170.24), vec2(407.30, 168.92), vec2(404.85, 169.23), vec2(407.50, 202.18), vec2(409.03, 200.96), vec2(410.35, 200.25), vec2(411.78, 200.14), vec2(424.52, 202.08), vec2(427.57, 202.48), vec2(430.44, 202.77), vec2(433.16, 202.94), vec2(435.74, 203.00), vec2(438.90, 202.85), vec2(442.11, 202.38), vec2(445.40, 201.58), vec2(448.79, 200.45), vec2(450.83, 199.64), vec2(452.77, 198.75), vec2(454.60, 197.77), vec2(456.32, 196.71), vec2(457.94, 195.57), vec2(459.47, 194.35), vec2(460.90, 193.05), vec2(462.25, 191.68), vec2(463.68, 189.91), vec2(464.92, 188.06), vec2(465.97, 186.12), vec2(466.83, 184.09), vec2(467.50, 181.97), vec2(467.98, 179.75), vec2(468.27, 177.45), vec2(468.36, 175.04), vec2(468.13, 171.16), vec2(467.44, 167.61), vec2(466.30, 164.38), vec2(464.69, 161.47), vec2(462.74, 159.09), vec2(460.41, 157.00), vec2(457.70, 155.23), vec2(454.60, 153.82)); \n\n#define LENGTH14 122 \nvec2[] path14 = vec2[](vec2(400.16, 194.84), vec2(399.34, 191.98), vec2(399.34, 188.92), vec2(399.34, 164.74), vec2(399.65, 160.56), vec2(401.08, 157.60), vec2(402.13, 156.39), vec2(403.28, 155.53), vec2(404.53, 155.02), vec2(405.87, 154.84), vec2(405.87, 152.09), vec2(373.25, 152.09), vec2(373.25, 155.15), vec2(374.37, 155.15), vec2(377.93, 156.99), vec2(379.06, 159.03), vec2(379.36, 162.80), vec2(379.36, 182.19), vec2(379.25, 184.44), vec2(378.92, 186.47), vec2(378.37, 188.27), vec2(377.63, 189.84), vec2(376.42, 191.31), vec2(374.94, 192.36), vec2(373.17, 192.99), vec2(371.10, 193.21), vec2(368.68, 193.02), vec2(366.36, 192.46), vec2(364.17, 191.53), vec2(362.09, 190.23), vec2(360.14, 188.57), vec2(358.30, 186.53), vec2(356.59, 184.13), vec2(355.00, 181.37), vec2(353.78, 178.81), vec2(352.72, 176.19), vec2(351.83, 173.49), vec2(351.10, 170.73), vec2(350.53, 167.91), vec2(350.12, 165.01), vec2(349.88, 162.05), vec2(349.80, 159.03), vec2(349.80, 157.39), vec2(349.90, 155.97), vec2(350.18, 153.05), vec2(350.57, 150.27), vec2(351.06, 147.62), vec2(351.66, 145.11), vec2(352.36, 142.74), vec2(353.17, 140.51), vec2(354.08, 138.42), vec2(355.10, 136.48), vec2(356.46, 134.33), vec2(357.93, 132.48), vec2(359.51, 130.91), vec2(361.21, 129.64), vec2(363.03, 128.66), vec2(364.96, 127.95), vec2(367.01, 127.54), vec2(369.17, 127.40), vec2(372.11, 127.65), vec2(375.27, 128.39), vec2(378.64, 129.64), vec2(382.22, 131.38), vec2(383.67, 132.37), vec2(385.12, 133.67), vec2(386.57, 135.28), vec2(388.03, 137.19), vec2(389.77, 139.79), vec2(391.17, 142.22), vec2(392.26, 144.45), vec2(393.02, 146.48), vec2(394.76, 145.46), vec2(392.00, 117.50), vec2(389.66, 119.75), vec2(385.78, 120.77), vec2(381.20, 120.15), vec2(378.81, 119.58), vec2(376.55, 119.09), vec2(374.42, 118.70), vec2(372.43, 118.42), vec2(370.48, 118.21), vec2(368.47, 118.05), vec2(366.39, 117.95), vec2(364.27, 117.91), vec2(360.31, 118.06), vec2(356.54, 118.52), vec2(352.93, 119.29), vec2(349.49, 120.36), vec2(346.22, 121.75), vec2(343.16, 123.49), vec2(340.30, 125.58), vec2(337.67, 128.01), vec2(335.85, 130.06), vec2(334.21, 132.22), vec2(332.75, 134.49), vec2(331.45, 136.89), vec2(331.45, 178.00), vec2(332.33, 179.96), vec2(333.28, 181.84), vec2(334.31, 183.67), vec2(335.42, 185.45), vec2(337.03, 187.73), vec2(338.73, 189.83), vec2(340.51, 191.75), vec2(342.38, 193.49), vec2(344.33, 195.04), vec2(346.37, 196.41), vec2(348.50, 197.60), vec2(350.71, 198.61), vec2(352.63, 199.30), vec2(354.69, 199.89), vec2(356.91, 200.40), vec2(359.28, 200.82), vec2(361.80, 201.15), vec2(364.48, 201.38), vec2(367.31, 201.52), vec2(370.29, 201.57), vec2(404.13, 201.57), vec2(404.13, 198.51), vec2(401.69, 197.39), vec2(400.16, 194.84)); \n\n#define LENGTH15 5 \nvec2[] path15 = vec2[](vec2(83.00, 134.74), vec2(0.93, 134.74), vec2(0.93, 142.19), vec2(83.00, 142.19), vec2(83.00, 134.74)); \n\n#define LENGTH16 5 \nvec2[] path16 = vec2[](vec2(560.52, 134.74), vec2(465.20, 134.74), vec2(465.20, 142.19), vec2(560.52, 142.19), vec2(560.52, 134.74)); \n\n#define LENGTH17 5 \nvec2[] path17 = vec2[](vec2(548.60, 0.37), vec2(0.93, 0.37), vec2(0.93, 7.11), vec2(548.60, 7.11), vec2(548.60, 0.37));","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define ZERO min(0, iFrame)\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdSegment(vec2 p, vec2 a, vec2 b){\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n    // Only draw in the first frame or when the resolution changes\n    if(iFrame < 1 || texelFetch(iChannel0, ivec2(5.5), 0).rg != iResolution.xy){\n        uv -= 0.5;\n        uv.y /= iResolution.x/iResolution.y;\n\n        // Flip y-axis\n        uv.y *= -1.0;\n\n        // Zoom out\n        uv *= 750.0;\n\n        // Logo dimensions are [562, 203]\n        vec2 dim = vec2(562.0, 203.0);\n\n        uv += 0.5 * dim;\n        \n        float dist = 1e10;\n        vec3 col = vec3(0);\n\n        for(int i = ZERO; i < LENGTH0 - 1; i++){   \n            dist = min(dist, sdSegment(uv, path0[i], path0[i+1]));\n        } \n\n        for(int i = ZERO; i < LENGTH1 - 1; i++){   \n            dist = min(dist, sdSegment(uv, path1[i], path1[i+1]));\n        } \n\n        for(int i = ZERO; i < LENGTH2 - 1; i++){   \n            dist = min(dist, sdSegment(uv, path2[i], path2[i+1]));\n        } \n\n        for(int i = ZERO; i < LENGTH3 - 1; i++){   \n            dist = min(dist, sdSegment(uv, path3[i], path3[i+1]));\n        } \n\n        for(int i = ZERO; i < LENGTH4 - 1; i++){   \n            dist = min(dist, sdSegment(uv, path4[i], path4[i+1]));\n        } \n\n        for(int i = ZERO; i < LENGTH5 - 1; i++){   \n            dist = min(dist, sdSegment(uv, path5[i], path5[i+1]));\n        } \n\n        for(int i = ZERO; i < LENGTH6 - 1; i++){   \n            dist = min(dist, sdSegment(uv, path6[i], path6[i+1]));\n        } \n\n        for(int i = ZERO; i < LENGTH7 - 1; i++){   \n            dist = min(dist, sdSegment(uv, path7[i], path7[i+1]));\n        } \n\n        for(int i = ZERO; i < LENGTH8 - 1; i++){   \n            dist = min(dist, sdSegment(uv, path8[i], path8[i+1]));\n        } \n\n        for(int i = ZERO; i < LENGTH9 - 1; i++){   \n            dist = min(dist, sdSegment(uv, path9[i], path9[i+1]));\n        } \n\n        for(int i = ZERO; i < LENGTH10 - 1; i++){   \n            dist = min(dist, sdSegment(uv, path10[i], path10[i+1]));\n        } \n\n        for(int i = ZERO; i < LENGTH11 - 1; i++){   \n            dist = min(dist, sdSegment(uv, path11[i], path11[i+1]));\n        } \n\n        for(int i = ZERO; i < LENGTH12 - 1; i++){   \n            dist = min(dist, sdSegment(uv, path12[i], path12[i+1]));\n        } \n\n        for(int i = ZERO; i < LENGTH13 - 1; i++){   \n            dist = min(dist, sdSegment(uv, path13[i], path13[i+1]));\n        } \n\n        for(int i = ZERO; i < LENGTH14 - 1; i++){   \n            dist = min(dist, sdSegment(uv, path14[i], path14[i+1]));\n        } \n\n        for(int i = ZERO; i < LENGTH15 - 1; i++){   \n            dist = min(dist, sdSegment(uv, path15[i], path15[i+1]));\n        } \n\n        for(int i = ZERO; i < LENGTH16 - 1; i++){   \n            dist = min(dist, sdSegment(uv, path16[i], path16[i+1]));\n        } \n\n        for(int i = ZERO; i < LENGTH17 - 1; i++){   \n            dist = min(dist, sdSegment(uv, path17[i], path17[i+1]));\n        }\n        \n        col = vec3(dist);\n\n        // Store the size of the render\n        if(fragCoord.x == 5.5 && fragCoord.y == 5.5){\n            col = vec3(iResolution.xy, 0.0);\n        }\n\n        fragColor = vec4(col, 1.0);\n\n    }else{\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord.xy), 0);\n    }\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec3 modulo(vec3 m, float n){\n    return mod(mod(m, n) + n, n);\n}\n\n// 5th order polynomial interpolation\nvec3 fade(vec3 t){\n    return (t * t * t) * (t * (t * 6.0 - 15.0) + 10.0);\n}\n\nfloat fade(float t){\n    return (t * t * t) * (t * (t * 6.0 - 15.0) + 10.0);\n}\n\n#define SIZE 2048.0\n\n// https://www.shadertoy.com/view/4djSRW\nvec3 hash(vec3 p3){\n    p3 = modulo(p3, SIZE);\n    p3 = fract(p3 * vec3(0.1031, 0.1030, 0.0973));\n    p3 += dot(p3, p3.yxz + 33.33);\n    return 2.0 * fract((p3.xxy + p3.yxx) * p3.zyx) - 1.0;\n}\n\nfloat hash(float p){\n    p = fract(p * 0.1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat gradientNoise(vec3 p){\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n\tvec3 u = fade(f);\n    return mix( mix( mix( dot( hash(i + vec3(0.0,0.0,0.0)), f - vec3(0.0,0.0,0.0)), \n              dot( hash(i + vec3(1.0,0.0,0.0)), f - vec3(1.0,0.0,0.0)), u.x),\n         mix( dot( hash(i + vec3(0.0,1.0,0.0)), f - vec3(0.0,1.0,0.0)), \n              dot( hash(i + vec3(1.0,1.0,0.0)), f - vec3(1.0,1.0,0.0)), u.x), u.y),\n    mix( mix( dot( hash(i + vec3(0.0,0.0,1.0)), f - vec3(0.0,0.0,1.0)), \n              dot( hash(i + vec3(1.0,0.0,1.0)), f - vec3(1.0,0.0,1.0)), u.x),\n         mix( dot( hash(i + vec3(0.0,1.0,1.0)), f - vec3(0.0,1.0,1.0)), \n              dot( hash(i + vec3(1.0,1.0,1.0)), f - vec3(1.0,1.0,1.0)), u.x), u.y), u.z );\n}\n\nfloat gradientNoise(float p){\n    float i = floor(p);\n    float f = fract(p);\n\tfloat u = fade(f);\n    return mix(dot(hash(i), f), dot(hash(i + 1.0), f - 1.0), u);\n}\n\nfloat getGlow(float dist, float radius, float intensity){\n    return pow(radius/dist, intensity);\n}\n\nfloat getNoise(vec2 uv){\n    return gradientNoise(vec3(8.0 * uv, 0.2 * iTime));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float dist = texture(iChannel0, uv).r;\n\n    const vec3 red = vec3(1.0, 0.035, 0.025);\n    const vec3 redOrange = vec3(1.0, 0.12, 0.1);\n\n    vec3 col = 0.15 * red * smoothstep(1.5, 0.5, abs(dist));\n    \n    uv.y /= iResolution.x/iResolution.y;\n\n    col += 0.8 * redOrange * min(1.75, getGlow(smoothstep(0.5, 2.0, abs(dist)), 0.1, 8.0)) * max(0.0, getNoise(1.5 * uv));\n    col += red * min(1.0, getGlow(abs(dist), 0.25, 1.0)) * max(0.0, 0.3 + 0.5 * getNoise(0.5 * uv));\n    \n    // Flicker\n    col *= 1.0 + 0.45 * gradientNoise(6.0 * iTime);\n\n    fragColor = vec4(col, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}