{"ver":"0.1","info":{"id":"fl3fDH","date":"1663003733","viewed":115,"name":"Worley Noise + FMB Study 001","username":"Oneleven","description":"A study based on combination of worley noise and fractal brownian motion from TBOS\nhttps://thebookofshaders.com/12/\nhttps://thebookofshaders.com/13/","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm","worley","study","fractalbrownianmotion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n\n//FabriceNeyret2 + IQ hash\n//https://www.shadertoy.com/view/fsKBzw\nfloat hash( vec2 f )\n{   uvec2 x = uvec2( floatBitsToUint(f.x), floatBitsToUint(f.y) ),\n          q = 1103515245U * ( x>>1U ^ x.yx    );\n    return float( 1103515245U * (q.x ^ q.y>>3U) ) / float(0xffffffffU);\n}\n\nvec2 hash2d(vec2 f)\n{\n    return vec2(hash(f), hash(f + vec2(123.456, 789.987)));\n}\n\nfloat worley(vec2 uv)\n{\n    vec2 index = floor(uv);\n    uv = fract(uv);\n\n    float minDist = 2.0;\n    for (float y = -1.0; y<=1.0; y++)\n    {\n        for (float x=-1.0; x<=1.0; x++)\n        {\n            float cellHash = hash(index + vec2(x,y));\n            float cellTime = iTime * (cellHash * 2.0 + 0.1);\n            vec2 offset = vec2(cos(cellTime + cellHash*100.0), sin(cellTime + cellHash))*0.5;\n            float dist = distance(vec2(0.5)+vec2(x,y)+offset, uv);\n\n            minDist = min(minDist, dist);\n        }\n    }\n    return minDist;\n}\n\nvoid mainImage( out vec4 O, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*R)/R.y;\n    \n    float worley_plus = worley(uv*2.0);\n    float octaves = 5.0;\n    float frequency = 15.0 + sin(iTime*0.1)*10.0;\n    float amplitude = 0.65;\n    float value;\n    \n    for (float i = 0.0; i < octaves; i++)\n    {\n        value += worley(uv * frequency) * amplitude;\n        amplitude*=0.4;\n        frequency*=1.8;\n    }\n\n    float isoScale = worley_plus*30.0;\n    float disp = 1.5 * (1.0 - worley_plus);\n    vec3 col = sin(value*vec3(isoScale - disp, isoScale, isoScale + disp) + iTime*vec3(2.0))*0.5 + vec3(0.5);\n    \n    O = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}