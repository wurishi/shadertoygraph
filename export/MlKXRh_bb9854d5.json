{"ver":"0.1","info":{"id":"MlKXRh","date":"1482967359","viewed":384,"name":"Vector rotation","username":"gigatron","description":"This is the exact rotation i want :) (paranoimia logo )  thank you IQ ; \nLines mapped to iq rasterized triangle ...\ncross = crosse ","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["lines","vector","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// a perspective correct triangle rasterizer, in a shader!! :D\n\n#define t iTime\n\nmat4 setRotation( float x, float y, float z )\n{\n    float a = sin(x); float b = cos(x); \n    float c = sin(y); float d = cos(y); \n    float e = sin(z); float f = cos(z); \n\n    float ac = a*c;\n    float bc = b*c;\n\n    return mat4( d*f,      d*e,       -c, 0.0,\n                 ac*f-b*e, ac*e+b*f, a*d, 0.0,\n                 bc*f+a*e, bc*e-a*f, b*d, 0.0,\n                 0.0,      0.0,      0.0, 1.0 );\n}\nmat4 RotationAxisAngle( vec3 v, float angle )\n{\n    float s = sin( angle );\n    float c = cos( angle );\n    float ic = 1.0 - c;\n\n    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,\n                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,\n                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,\n\t\t\t     0.0,                0.0,                0.0,                1.0 );\n}\n\nmat4 setTranslation( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,     y,   z, 1.0 );\n}\n\nstruct Triangle\n{\n    vec3 a; vec2 aUV;\n    vec3 b; vec2 bUV;\n    vec3 c; vec2 cUV;\n    vec3 n;\n};\n\n\nTriangle triangles[4];\n\nvoid createCube( void )\n{\n    vec3 verts[8];\n\n    verts[0] = vec3( -1.0, -1.0, -0.0 );\n    verts[1] = vec3( -1.0, -1.0,  0.0 );\n    verts[2] = vec3( -1.0,  1.0, -0.0 );\n    verts[3] = vec3( -1.0,  1.0,  0.0 );\n    verts[4] = vec3(  1.0, -1.0, -0.0 );\n    verts[5] = vec3(  1.0, -1.0,  0.0 );\n    verts[6] = vec3(  1.0,  1.0, -0.0 );\n    verts[7] = vec3(  1.0,  1.0,  0.0 );\n\n    triangles[0].a = verts[1]; triangles[0].aUV = vec2(0.0,0.0);\n    triangles[0].b = verts[5]; triangles[0].bUV = vec2(1.0,0.0);\n    triangles[0].c = verts[7]; triangles[0].cUV = vec2(1.0,1.0);\n    triangles[0].n = vec3( 0.0, 0.0, 0.0 );\n    triangles[1].a = verts[1]; triangles[1].aUV = vec2(0.0,0.0),\n    triangles[1].b = verts[7]; triangles[1].bUV = vec2(1.0,1.0),\n    triangles[1].c = verts[3]; triangles[1].cUV = vec2(0.0,1.0),\n    triangles[1].n = vec3( 0.0, 0.0, 0.0 );\n\n    triangles[2].a = verts[5]; triangles[2].aUV = vec2(0.0,0.0);\n    triangles[2].b = verts[4]; triangles[2].bUV = vec2(1.0,0.0);\n    triangles[2].c = verts[6]; triangles[2].cUV = vec2(1.0,1.0);\n    triangles[2].n = vec3( 0.0, 0.0, 0.0 );\n    triangles[3].a = verts[5]; triangles[3].aUV = vec2(0.0,0.0);\n    triangles[3].b = verts[6]; triangles[3].bUV = vec2(1.0,1.0);\n    triangles[3].c = verts[7]; triangles[3].cUV = vec2(0.0,1.0);\n    triangles[3].n = vec3( 0.0, 0.0, 0.0 );\n\n     \n}\n\nfloat crosse( vec2 a, vec2 b )\n{\n    return a.x*b.y - a.y*b.x;\n}\n\nvec3 lig = normalize( vec3( 0.3,0.7,0.5) );\n\nvec4 bg = vec4(1.,0.,0.,0.0);\n \nvec4 l( in vec2 p, in vec2 a, in vec2 b,in float t,in vec4 c )\n{\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    float d = length( pa - ba*h );\n    \n    return smoothstep(t/iResolution.y, 0., d ) * c;\n}\n\n\n\nvec3 pixelShader( in vec3 nor, in vec2 p, in float z, in vec3 wnor )\n{\n    vec4 cl = vec4(0);\n    p *= 2.0;\n    p.y = p.y-0.5;\n    \n    vec4 tcol=vec4(p,sin(t),1.0);\n    \n    float lh=8.0;\n    // S  5 segments \n  \tcl += l(p-vec2(.1,0.6),vec2(0.0,0.0),vec2(.0,-.15),lh,tcol);\n    cl += l(p-vec2(.1,0.6),vec2(0.0,0.0),vec2(.15,0.0),lh,tcol);\n    cl += l(p-vec2(.1,0.45),vec2(0.0,0.0),vec2(.15,0.0),lh,tcol);\n    cl += l(p-vec2(.25,0.45),vec2(0.0,0.0),vec2(.0,-.17),lh,tcol);\n    cl += l(p-vec2(.1,0.28),vec2(0.0,0.0),vec2(.15,0.0),lh,tcol);\n       \n    // H \n    cl += l(p-vec2(0.3,0.6),vec2(0.0,0.0),vec2(.0,-.32),lh,tcol);\n    cl += l(p-vec2(0.30,0.45),vec2(0.0,0.0),vec2(.15,.00),lh,tcol);\n    cl += l(p-vec2(0.45,0.6),vec2(0.0,0.0),vec2(.0,-.32),lh,tcol);\n    // A\n    cl += l(p-vec2(.60,0.6),vec2(0.0,0.0),vec2(-.1,-.32),lh,tcol);\n    cl += l(p-vec2(.60,0.6),vec2(0.0,0.0),vec2(.1,-.32),lh,tcol);\n    // D\n    cl += l(p-vec2(0.75,0.6),vec2(0.0,0.0),vec2(.0,-.32),lh,tcol);\n    cl += l(p-vec2(0.75,0.6),vec2(0.0,0.0),vec2(.15,-.16),lh,tcol);\n    cl += l(p-vec2(0.75,0.28),vec2(0.0,0.0),vec2(.15,0.16),lh,tcol);\n     // E\n    cl += l(p-vec2(0.95,0.6),vec2(0.0,0.0),vec2(.0,-.32),lh,tcol);\n    cl += l(p-vec2(0.95,0.45),vec2(0.0,0.0),vec2(.15,.00),lh,tcol);\n    cl += l(p-vec2(0.95,0.6),vec2(0.0,0.0),vec2(.15,.00),lh,tcol);\n    cl += l(p-vec2(0.95,0.28),vec2(0.0,0.0),vec2(.15,.00),lh,tcol);\n    // R    \n    cl += l(p-vec2(1.15,0.6),vec2(0.0,0.0),vec2(.0,-.32),lh,tcol);\n    cl += l(p-vec2(1.15,0.6),vec2(0.0,0.0),vec2(.15,0.0),lh,tcol);\n    cl += l(p-vec2(1.15,0.45),vec2(0.0,0.0),vec2(.15,0.0),lh,tcol);\n    cl += l(p-vec2(1.30,0.6),vec2(0.0,0.0),vec2(.0,-.15),lh,tcol);\n    cl += l(p-vec2(1.15,0.45),vec2(0.0,0.0),vec2(.15,-0.17),lh,tcol);\n    // T\n    cl += l(p-vec2(1.45,0.6),vec2(0.0,0.0),vec2(.0,-.32),lh,tcol);\n    cl += l(p-vec2(1.35,0.6),vec2(0.0,0.0),vec2(.20,.00),lh,tcol);\n    // O\n    \n    cl += l(p-vec2(1.60,0.6),vec2(0.0,0.0),vec2(.0,-.32),lh,tcol);\n    cl += l(p-vec2(1.60,0.6),vec2(0.0,0.0),vec2(.15,0.0),lh,tcol);\n    cl += l(p-vec2(1.60,0.28),vec2(0.0,0.0),vec2(.15,0.0),lh,tcol);\n    cl += l(p-vec2(1.75,0.6),vec2(0.0,0.0),vec2(.0,-.32),lh,tcol);\n    //yy\n    \n    cl += l(p-vec2(1.80,0.6),vec2(0.0,0.0),vec2(.10,-.16),lh,tcol);\n    cl += l(p-vec2(1.90,0.44),vec2(0.0,0.0),vec2(.10,.16),lh,tcol);\n    cl += l(p-vec2(1.9,0.45),vec2(0.0,0.0),vec2(.0,-.17),lh,tcol);\n    \n \n    return vec3(cl.xyz);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tmat4 mdv = setTranslation( 0.0, 0.0, -1.5 ) * \n\t\t       setRotation( t*3.,t*2. , 0. )*\n               RotationAxisAngle(vec3(0.0,0.0,0.0), 0.2 );\n \n    vec2 px = fragCoord / iResolution.xy*2.-1.;\n    \n    px.x *=iResolution.x/iResolution.y;\n    \n\n   createCube();\n\t \n    float scl =mod(fragCoord.y,3.0);\n    \n    vec3 color = vec3( 0.0, 0.0, 0.0 );\n\n \n        // transform to eye space\n        vec3 ep0 = (mdv * vec4(triangles[1].a,1.0)).xyz;\n        vec3 ep1 = (mdv * vec4(triangles[1].b,1.0)).xyz;\n        vec3 ep2 = (mdv * vec4(triangles[1].c,1.0)).xyz;\n        vec3 nor = (mdv * vec4(triangles[1].n,0.0)).xyz;\n\n        // transform to clip space\n        float w0 = 1.0/ep0.z;\n        float w1 = 1.0/ep1.z;\n        float w2 = 1.0/ep2.z;\n\n        vec2 cp0 = 2.0*ep0.xy * -w0;\n        vec2 cp1 = 2.0*ep1.xy * -w1;\n        vec2 cp2 = 2.0*ep2.xy * -w2;\n\n        // fetch vertex attributes, and divide by z\n        vec2 u0 = triangles[1].aUV * w0;\n        vec2 u1 = triangles[1].bUV * w1;\n        vec2 u2 = triangles[1].cUV * w2;\n \n        vec3 di = vec3( crosse( cp1 - cp0, px - cp0 ), \n\t\t\t\t\t    crosse( cp2 - cp1, px - cp1 ), \n\t\t\t\t\t    crosse( cp0 - cp2, px - cp2 ) );\n\t\t\n  \n            // calc barycentric coordinates\n            vec3 ba = di.yzx / (di.x+di.y+di.z);\n\n            // barycentric interpolation of attributes and 1/z\n            float iz = ba.x*w0 + ba.y*w1 + ba.z*w2;\n            vec2  uv = ba.x*u0 + ba.y*u1 + ba.z*u2;\n\n            // recover interpolated attributes\n            float z = 1.0/iz;\n            uv *= z;\n \n   \t\t\t color = pixelShader( nor, uv, z, triangles[1].n );\n    \n    fragColor = vec4(color,1.0)*scl;\n}","name":"Image","description":"","type":"image"}]}