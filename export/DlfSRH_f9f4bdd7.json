{"ver":"0.1","info":{"id":"DlfSRH","date":"1674242353","viewed":98,"name":"raymarching with PBR","username":"ZeroSkyline","description":"raymarching with PBR","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","pbr"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct ray \n{\n    vec3 p;\n    float t;\n    vec3 d;\n};\nstruct hit\n{\n    float t;\n    vec3 p;\n    vec3 n;\n};\nfloat sd_sphere(vec3 p, vec3 c, float r) \n{\n    return length(p-c)-r; \n}\nfloat sdf(vec3 p)\n{\n    return sd_sphere(p, vec3(0), .5);\n}\nvec3 pixel_dir(float fov, vec2 fragCoord) \n{\n    vec3 dir;\n    dir.xy = fragCoord-iResolution.xy*.5;\n    dir.z = -iResolution.y*.5/tan(radians(fov)*.5);\n    return normalize(dir);\n}\nvec3 get_normal(vec3 p)\n{\n    float d = .0001;\n    float x = sdf(vec3(p.x+d,p.y,p.z)) - sdf(vec3(p.x-d, p.y, p.z));\n    float y = sdf(vec3(p.x,p.y+d,p.z)) - sdf(vec3(p.x, p.y-d, p.z));\n    float z = sdf(vec3(p.x,p.y,p.z+d)) - sdf(vec3(p.x, p.y, p.z-d));\n    return normalize(vec3(x,y,z));\n}\nhit marching(ray r) \n{\n    hit h;\n    float t = r.t;\n    for(int i = 0; i != 256; i++) \n    { \n        vec3 p = r.p + vec3(t) * r.d;\n        float sd = sdf(p);\n        if(sd < .0001) \n        {\n            h.n = get_normal(p); \n            h.t = t;\n            h.p = p;\n            return h;\n        } \n        t += sd; \n    }\n    return h; \n} \n\nfloat PI = 3.14159;\nfloat sq(float v)\n{\n    return v*v;\n}\nfloat specD(float r, vec3 n, vec3 h)\n{\n    float a = r*r;\n    float a2 = a*a;\n    float nh  = max(dot(n, h), 0.);\n    float nh2 = nh*nh;\n    return a2 / (PI * sq((nh2 * (a2 - 1.) + 1.)));\n}\nfloat specG(float r, vec3 n, vec3 d)\n{\n    float k = sq(r+1.);\n    float nd = max(dot(n, d), 0.);\n    return nd / (nd * (1.-k) + k);\n}\nfloat specG(float r, vec3 n, vec3 l, vec3 v)\n{\n    return specG(r, n, l) * specG(r, n, v);\n}\nvec3 fresnel(float theta, vec3 F0)\n{\n    return F0 + (1. - F0) * pow(clamp(1.-theta,0.,1.), 5.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    vec3 cam = vec3(0,0,2.);\n    vec3 l = normalize(vec3(1.));\n    \n    ray r; r.p = cam; r.t = 0.; r.d = pixel_dir(30., fragCoord);\n    \n    hit res = marching(r);\n    \n    vec3 light_c = vec3(3);\n    vec3 bg_c = vec3(.1,.2,.4);\n    vec3 mat_b = vec3(1.);\n    float mat_r = .5;\n    float mat_m = 0.;\n    if(iMouse.z>0.)\n    {\n        vec2 muv = iMouse.xy / iResolution.xy*2.-1.;\n        muv *= 3.14;\n        l = normalize(vec3(sin(muv.x), muv.y, cos(muv.x)));\n    }\n    float st = fract(iTime*.1);\n    if(st < .25)\n    {\n        float p = st*4.;\n        mat_m = p;\n        mat_r = 0.;\n    }\n    else if(st < .5)\n    {\n        float p = (st-.25)*4.;\n        mat_m = 1.;\n        mat_r = p;\n    }\n    else if(st < .75)\n    {\n        float p = (st-.5)*4.;\n        mat_m = 1.-p;\n        mat_r = 1.;\n    }\n    else\n    {\n        float p = (st-.75)*4.;\n        mat_m = 0.;\n        mat_r = 1.-p;\n    }\n    \n    if(res.t > 0.)\n    {\n        vec3 v = normalize(cam - res.p);\n        float nl = max(dot(res.n, l), 0.);\n        vec3 h = normalize(l + v);\n                \n        float D = specD(max(mat_r,.04), res.n, h);\n        float G = specG(mat_r, res.n, l, v);\n        vec3 F0 = vec3(.04);\n        F0 = mix(F0, mat_b, mat_m);\n        vec3 F = fresnel(max(dot(v, l), 0.), F0);\n        vec3 spec = (F*D*G)/( 4.*max(dot(res.n,v),0.) * max(dot(res.n,l),0.) + 0.0001);\n        \n        vec3 kS = F;\n        vec3 kD = vec3(1.) - kS;\n        kD *= 1. - mat_m;\n        \n        vec3 col = (kD * mat_b/PI + spec) * light_c * nl;\n        \n        vec3 env = ((mat_b/PI*(vec3(1.)-F0))+fresnel(max(dot(res.n,v),0.),F0)/(mat_r*mat_r+1.))*bg_c;\n        col += env;\n        \n        col = pow(col, vec3(.45));\n        \n        fragColor = vec4(col,1.);\n    }\n    else\n        fragColor = vec4(bg_c,1.);\n}","name":"Image","description":"","type":"image"}]}