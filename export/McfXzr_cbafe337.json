{"ver":"0.1","info":{"id":"McfXzr","date":"1704847550","viewed":620,"name":"wireframe stellated dodecahedron","username":"ChunderFPV","description":"Just playing around with Fabrice's wireframe code: https://www.shadertoy.com/view/XfS3DK.  The P key toggles between perspective & orthogonal view.","likes":44,"published":1,"flags":48,"usePreview":0,"tags":["3d","blur","wireframe","dodecahedron","stellated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// radial blur\n#define H(a) (cos(radians(vec3(0, 60, 120))+(a)*6.2832)*.5+.5)  // hue\n#define T(p) texture(iChannel0, mix(u, vec2(.5), p-i*p), a).rgb // scale texture\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec2 R = iResolution.xy,\n         u = U/R;\n    \n    vec3 c = texture(iChannel0, u).rgb, k;\n    \n    float l = 50.,  // loop size\n          j = 1./l, // increment size\n          a = length((U+U-R)/R.y*3.), // mipmap aa\n          b = j*4., // brightness\n          i = j;\n    \n    for (; i<=1.; i+=j)\n          k = T(1.) + T(-1.), // blur out & in\n          c += b * H(i) * k;  // brightness, color, texture\n    \n    c.r += .3-a*.1; // add red to center\n    C = vec4(tanh(c*c), 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// wireframe code from FabriceNeyret2: https://www.shadertoy.com/view/XfS3DK\n\n#define A(v) mat2(cos((v*3.1416) + vec4(0, -1.5708, 1.5708, 0)))          // rotate\n#define s(a, b) c = max(c, .006/abs(L( u, K(a, v, h), K(b, v, h) )+.02)); // segment\n\n// line\nfloat L(vec2 p, vec3 A, vec3 B)\n{\n    vec2 a = A.xy, \n         b = B.xy - a;\n         p -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);\n    return length(p - b*h) + .01*mix(A.z, B.z, h);\n}\n\n// cam\nvec3 K(vec3 p, mat2 v, mat2 h)\n{\n    p.zy *= v; // pitch\n    p.zx *= h; // yaw\n    if (texelFetch(iChannel0, ivec2(80, 2), 0).x < 1.) // P key\n        p *= 4. / (p.z+4.); // perspective view\n    return p;\n}\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec2 R = iResolution.xy,\n         u = (U+U-R)/R.y*2.5,\n         m = (iMouse.xy*2.-R)/R.y;\n    \n    float t = iTime/60.,\n          a = 1.618; // use -.618 for icosa\n    \n    if (iMouse.z < 1.) // not clicking\n        m = vec2(sin(t*6.2832)*2., sin(t*6.2832*2.)); // fig-8 movement\n    \n    mat2 v = A(m.y), // pitch\n         h = A(m.x); // yaw\n    \n    vec3 c = vec3(0);\n    \n    // stellated dodeca\n    s( vec3(-1,  a,  0), vec3( 0, -1, -a) )\n    s( vec3(-1,  a,  0), vec3( 0, -1,  a) )\n    s( vec3(-1,  a,  0), vec3( a,  0, -1) )\n    s( vec3(-1,  a,  0), vec3( a,  0,  1) )\n    s( vec3( 1,  a,  0), vec3( 1, -a,  0) )\n    s( vec3( 1,  a,  0), vec3( 0, -1, -a) )\n    s( vec3( 1,  a,  0), vec3( 0, -1,  a) )\n    s( vec3( 1,  a,  0), vec3(-a,  0, -1) )\n    s( vec3( 1,  a,  0), vec3(-a,  0,  1) )\n    s( vec3(-1, -a,  0), vec3(-1,  a,  0) )\n    s( vec3(-1, -a,  0), vec3( 0,  1, -a) )\n    s( vec3(-1, -a,  0), vec3( 0,  1,  a) )\n    s( vec3(-1, -a,  0), vec3( a,  0, -1) )\n    s( vec3(-1, -a,  0), vec3( a,  0,  1) )\n    s( vec3( 1, -a,  0), vec3( 0,  1, -a) )\n    s( vec3( 1, -a,  0), vec3( 0,  1,  a) )\n    s( vec3( 1, -a,  0), vec3(-a,  0, -1) )\n    s( vec3( 1, -a,  0), vec3(-a,  0,  1) )\n    s( vec3( 0,  1, -a), vec3( 0,  1,  a) )\n    s( vec3( 0,  1, -a), vec3( a,  0,  1) )\n    s( vec3( 0,  1, -a), vec3(-a,  0,  1) )\n    s( vec3( 0, -1, -a), vec3( 0, -1,  a) )\n    s( vec3( 0, -1, -a), vec3( a,  0,  1) )\n    s( vec3( 0, -1, -a), vec3(-a,  0,  1) )\n    s( vec3(-a,  0, -1), vec3( a,  0, -1) )\n    s( vec3(-a,  0,  1), vec3( a,  0,  1) )\n    s( vec3(-a,  0, -1), vec3( 0,  1,  a) )\n    s( vec3(-a,  0, -1), vec3( 0, -1,  a) )\n    s( vec3( a,  0, -1), vec3( 0,  1,  a) )\n    s( vec3( a,  0, -1), vec3( 0, -1,  a) )\n    \n    C = vec4(min(vec3(1), c), 1);\n}","name":"Buffer A","description":"","type":"buffer"}]}