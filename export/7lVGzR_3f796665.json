{"ver":"0.1","info":{"id":"7lVGzR","date":"1637093012","viewed":142,"name":"Two trailing methods","username":"Envy24","description":"Comparison of two trailing methods.\n\nVariation: https://www.shadertoy.com/view/ftKBDy","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["attenuate","trail","subtract","reverse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                       iResolution\n#define TEX_COORDS(P)         ( P / R.xy )                       // in range x=[0.0; 1.0], y=[0.0; 1.0]\n#define TEX0(x)               ( texture(iChannel0, x) )\n\nvoid mainImage( out vec4 O, in vec2 P )\n{\n    O = TEX0(TEX_COORDS(P));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float circleSDFSD(\n    vec2 S,\n    vec2 C,\n    float r,\n    float sm) // smoothness\n{\n    // Sample coordinates relative to circle center.\n    float _x = S.x - C.x; float _y = S.y - C.y;\n    \n    // Signed distance of squares.\n    float sds = _x * _x + _y *_y - r * r;\n    \n    float ss = sm * sm;\n    \n    // Smoothstep interpolation.\n    return smoothstep(-ss, ss, sds);\n    //return smoothstep(-ss, ss, sds * sds); // outline\n}\n\n/*  \n    Returns hash in range [0.0; 1.0].\n*/\nfloat sample1DHashUI32(uint value)\n{\n    // Pick some enthropy source values.\n    // Try different values.\n    const uint entropy0 = 12345u;\n    const uint entropy1 = 67890u;\n\n    // Calculate hash.\n\tvalue += entropy1;\n\tvalue *= 445593459u;\n\tvalue ^= entropy0;\n\n    // 1.0f / 4294967295.0f = 2.32830644e-10\n    \n    return float(value * value * value) * 2.32830644e-10;\n}\n\n/*\n    Returns hash in range [0.0; 1.0].\n*/\nfloat sample2DHashUI32(uint x, uint y)\n{\n    // Pick some enthropy source values.\n    // Try different values.\n    const uint entropy0 = 123u;\n    const uint entropy1 = 456u;\n    const uint entropy2 = 789u;\n\n    // Use linear offset method to mix coordinates.\n    uint value = y * entropy2 + x;\n\n    // Calculate hash.\n\tvalue += entropy1;\n\tvalue *= 445593459u;\n\tvalue ^= entropy0;\n    \n    // 1.0f / 4294967295.0f = 2.32830644e-10\n\n    return float(value * value * value) * 2.32830644e-10;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define R                       iResolution\n#define CENTER_NDC(P)         ( (P+P-R.xy) / R.y )               // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define TEX_COORDS(P)         ( P / R.xy )                       // in range x=[0.0; 1.0], y=[0.0; 1.0]\n#define TEX0(x)               ( texture(iChannel0, x) )\n\nvec2 rotateAroundZ(vec2 p, float a)\n{\n    float s = sin(-a);\n    float c = cos(-a);\n\n    return vec2(\n        p.x * c + p.y * s,\n        p.y * c - p.x * s);\n}\n\nfloat reverseSubtractMethod(in vec2 P)\n{\n    float t = iTime * 0.5;\n    float h = sample1DHashUI32(uint(iFrame)) / (R.x * 2.0);\n    vec2 C = rotateAroundZ(vec2(sin(t * (0.5 + h)), h), t + h);\n   \n    float dist = 1.0 - circleSDFSD(CENTER_NDC(P), C, 32.0 / R.x, 18.0 / R.y);\n    \n    vec4 color = TEX0(TEX_COORDS(P));\n    \n    return \n        dist > 0.0 ?\n            max(dist, color.r) :\n            color.r - 0.01;\n}\n\nfloat attenuateMethod(in vec2 P)\n{\n    float t = iTime * 0.5;\n    vec2 C = rotateAroundZ(vec2(sin(t * (2.0) + 100.0), 0.0), t);\n   \n    float dist = 1.0 - circleSDFSD(CENTER_NDC(P), C, 32.0 / R.x, 18.0 / R.y);\n    \n    vec4 color = TEX0(TEX_COORDS(P));\n    \n    return \n        dist > 0.0 ?\n            max(dist, color.r) :\n            color.r * 0.99;\n            //min(color.r * color.r, 0.99999); // variant.\n}\n\nvoid mainImage( out vec4 O, in vec2 P )\n{\n    O = vec4(max(reverseSubtractMethod(P), attenuateMethod(P)));\n}","name":"Buffer A","description":"","type":"buffer"}]}