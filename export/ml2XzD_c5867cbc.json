{"ver":"0.1","info":{"id":"ml2XzD","date":"1690528485","viewed":116,"name":"Fraction study","username":"ChunderFPV","description":"Mouse x: value between 0 & 1\nMouse y: zoom\nKey T: toggle between sine & linear\n\nScreen top/bottom: numerator/denominator\nThe first green and magenta bars from the left are the numerator and denominator.  Subsequent bars are the multiples.","likes":2,"published":1,"flags":16,"usePreview":0,"tags":["math","fraction","decimal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 C, vec2 U )\n{\n    float s = 15.,  // scale\n          r = 360., // max denominator from mouse\n          t = 1.+iTime/60., // sec per int\n          z, f, y, d, w;\n    \n    vec2 R = iResolution.xy,\n         m = iMouse.xy/R,\n         u, p;\n    \n    y = U.y/R.y; // screen bottom = 0, top = 1\n    d = .05/fract(y*2.); // double gradient\n    vec3 c = vec3(.1, .2, .3)*d, // background color\n         g = vec3(y, .5, 1.-y);  // gradient color\n    \n    z = 2./clamp(1.-m.y, .01, 1.);\n    s *= z; // zoom from mouse y\n    u = U/R.y*s; // coords\n    w = max(.1, length(fwidth(u))); // point size\n    u.x += 1.; // hide 0\n    if (iMouse.z > 0.) t = round(m.x*r)/r; // value from mouse\n    \n    //t = 1.8; // 9/5\n    \n    if (y > .5)    // top half of screen\n        t = 1./t,  // invert time\n        c = c.bgr; // change bg color\n    \n    f = mod(trunc(u.x)*t, 1.); // fraction\n    if (texelFetch(iChannel1, ivec2(84, 2), 0).x < 1.) // t key\n        f = sin(3.1416*f); // sine version\n    \n    c += max(0., 1.-f*(s-1.)) * d * g.brg * 2.; // bars\n    \n    u.y -= f*(s*.5-1.);      // shift y coord\n    if (y > .5) u.y -= s/2.; // shift top\n    p = 1.-abs(fract(u)-.5); // point coords\n    u.x += .5;\n    c += max(0., w/length(u-round(u*vec2(1,0)))) * g; // points\n    \n    c = mix(c, vec3(.7), D(iChannel0, (U-R)/R.y+vec2(.24, .08), 1./t, .1, 7., 4.).x); // digits\n    \n    C = vec4(c+c*c*2., 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// font code from https://www.shadertoy.com/view/7tV3zK\nvec4 char(sampler2D ic, vec2 p, int c)\n{\n    vec2 dFdx = dFdx(p/16.), dFdy = dFdy(p/16.);\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad(ic, p/16. + fract( vec2(c, 15-c/16)/16.), dFdx, dFdy );\n}\nvec4 pInt(sampler2D ic, vec2 p, float n, float d)\n{\n    vec4 v = vec4(0);\n    if (n < 0.) \n        v += char(ic, p - vec2(-.5,0), 45 ),\n        n = -n;\n    for (float i = d; i>0.; i--) \n        n /=  9.999999, // 10., // for windows :-(\n        v += char(ic, p - .5*vec2(i-1.,0), 48+ int(fract(n)*10.) );\n    return v;\n}\n\n// texture, screen coords, value, size, num left digits, num right digits\nvec3 D(sampler2D ic, vec2 uv, float v, float s, float l, float r)\n{\n    float numleft = min(log2(abs(v))/log2(10.), l-1.);\n    l = max(floor(numleft), 0.)+1.;\n    uv /= s; // size\n    if (isinf(abs(v))) return vec3(char(ic, uv*.7+vec2(.5, .3), 153).x); // infinity symbol\n    uv += vec2((l+1.)/2., .28); // center on decimal\n    vec3 d = vec3(0);\n    d += pInt(ic, uv, v, l).x; // left of decimal\n    uv.x -= l/2.;\n    d += char(ic, uv, 46).x; // decimal point\n    uv.x -= .5;\n    d += pInt(ic, uv, floor(abs(v)*pow(10., r)), r).x; // right of decimal\n    return d;\n}","name":"Common","description":"","type":"common"}]}