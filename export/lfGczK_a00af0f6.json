{"ver":"0.1","info":{"id":"lfGczK","date":"1732091307","viewed":10,"name":"Black and White Oval","username":"vitasa","description":"oval","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["oval"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ShaderToy code to render an oval (ellipse)\n\n// Signed distance function for an ellipse (oval)\nfloat sdEllipse(vec2 p, vec2 r)\n{\n    // Approximate SDF for an ellipse centered at the origin\n    float k = length(p / r) - 1.0;\n    return k * min(r.x, r.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize pixel coordinates (from -aspect ratio to aspect ratio, and -0.5 to 0.5)\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n\n    // Parameters for the ellipse\n    vec2 center = vec2(0.0, 0.0);    // Center of the ellipse\n    vec2 radii = vec2(0.3, 0.15);     // Radii along x and y axes (adjust these to change the shape)\n\n    // Compute the signed distance from the point to the ellipse\n    float d = sdEllipse(uv - center, radii);\n\n    // Smooth edges for anti-aliasing\n    float thickness = 0.005;\n    float color = smoothstep(0.0, thickness, -d);\n\n    // Set the fragment color (black silhouette on white background)\n    fragColor = vec4(vec3(color), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}