{"ver":"0.1","info":{"id":"tdScDy","date":"1587267627","viewed":102,"name":"CIS561_HW9_BSSRDF","username":"JerryYan","description":"CIS561_BSSRDF","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["hw9"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int RAY_STEPS = 256;\nconst float FOVY = 3.141569 * 0.25;\n\n// The higher the value, the smaller the penumbra\nconst float SHADOW_HARDNESS = 10.0;\n\n// Adjust these to alter where the subsurface glow shines through and how brightly\nconst float FIVETAP_K = 2.0;\nconst float AO_DIST = 0.085;\n\n// The larger the DISTORTION, the smaller the glow\nconst float DISTORTION = 0.2;\n// The higher GLOW is, the smaller the glow of the subsurface scattering\nconst float GLOW = 6.0;\n// The higher the BSSRDF_SCALE, the brighter the scattered light\nconst float BSSRDF_SCALE = 3.0;\n// Boost the shadowed areas in the subsurface glow with this\nconst float AMBIENT = 0.0;\n// Toggle this to affect how easily the subsurface glow propagates through an object\n#define ATTENUATION 0\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n    \nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\nfloat subsurface(vec3 lightDir, vec3 normal, vec3 viewVec, float thickness) {\n    vec3 scatteredLightDir = lightDir + normal * DISTORTION;\n    float lightReachingEye = pow(clamp(dot(viewVec, -scatteredLightDir), 0.0, 1.0), GLOW) * BSSRDF_SCALE;\n    float attenuation = 1.0;\n    #if ATTENUATION\n    attenuation = max(0.0, dot(normal, lightDir) + dot(viewVec, -lightDir));\n    #endif\n\tfloat totalLight = attenuation * (lightReachingEye + AMBIENT) * thickness;\n    return totalLight;\n}\n\n#define SPHERE_1_SDF sphere(pos, 1.0, vec3(0., 3., 3.))\n#define SPHERE_2_SDF sphere(pos, 2.0, vec3(4., 2., 0.))\n#define SPHERE_1_ID 1\n#define SPHERE_2_ID 2\n\n#define BACK_WALL_SDF plane(pos, vec4(0.0, 0.0, -1.0, 5.0))\n#define BACK_WALL_ID 3 \n\n#define LEFT_WALL_SDF plane(pos, vec4(1.0, 0.0, 0.0, 5.0))\n#define LEFT_WALL_ID 4\n\n#define RIGHT_WALL_SDF plane(pos, vec4(-1.0, 0.0, 0.0, 5.0))\n#define RIGHT_WALL_ID 5\n\n#define CEILING_WALL_SDF plane(pos, vec4(0.0, -1.0, 0.0, 7.5))\n#define CEILING_WALL_ID 6\n\n#define FLOOR_SDF plane(pos, vec4(0.0, 1.0, 0.0, 3.5))\n#define FLOOR_ID 7\n\n#define TALL_BOX_SDF box(rotateY(pos + vec3(2, -1, -1), 27.5 * 3.14159 / 180.0), vec3(1, 2, 1))\n#define TALL_BOX_ID 8\n\n#define SMALL_BOX_SDF box(rotateY(pos + vec3(-2, -2, -0.75), -27.5 * 3.14159 / 180.0), vec3(1, 1, 1))\n#define SMALL_BOX_ID 9\n\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj)\n{\n    t = FLOOR_SDF;\n    obj = FLOOR_ID;\n    \n    float t2;\n\n    if((t2 = TALL_BOX_SDF) < t)\n    {\n        t = t2;\n        obj = TALL_BOX_ID;\n    }\n    if((t2 = SMALL_BOX_SDF) < t)\n    {\n        t = t2;\n        obj = SMALL_BOX_ID;\n    }\n    if((t2 = SPHERE_1_SDF) < t)\n    {\n        t = t2;\n        obj = SPHERE_1_ID;\n    }\n}\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t = FLOOR_SDF;\n    \n    t = min(t, TALL_BOX_SDF);\n    t = min(t, SMALL_BOX_SDF);\n    t = min(t, SPHERE_1_SDF);\n    \n    return t;\n}\n\nfloat shadowMap3D(vec3 pos)\n{\n    float t = FLOOR_SDF;\n    t = min(t, TALL_BOX_SDF);\n    t = min(t, SMALL_BOX_SDF);\n    return t;\n}\n\n\nfloat fiveTapAO(vec3 p, vec3 n, float k) {\n    float aoSum = 0.0;\n    for(float i = 0.0; i < 5.0; ++i) {\n        float coeff = 1.0 / pow(2.0, i);\n        aoSum += coeff * (i * AO_DIST - shadowMap3D(p + n * i * AO_DIST));\n    }\n    return 1.0 - k * aoSum;\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nfloat softShadow(vec3 dir, vec3 origin, float min_t, float k) {\n    float res = 1.0;\n    float t = min_t;\n    for(int i = 0; i < RAY_STEPS; ++i) {\n        float m = shadowMap3D(origin + t * dir);\n        if(m < 0.0001) {\n            return 0.0;\n        }\n        res = min(res, k * m / t);\n        t += m;\n    }\n    // return 0.5;\n    return res;\n}\n\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec, vec3 view, float thick)\n{\n    float lambert = dot(-lightVec, n);\n    float shadow = softShadow(-lightVec, p, 0.1, 14.0);\n    vec3 lightColor = vec3(1.0, 0.88, 0.7);\n    float sss = subsurface(-lightVec, n, view, thick);\n    \n    switch(hitObj){\n        case TALL_BOX_ID:\n        return vec3(1., 1., 0.) * lambert * shadow + sss * lightColor * vec3(1., 1., 0.);\n        break;\n        case SMALL_BOX_ID:\n        return vec3(0., 1., 1.) * lambert * shadow + sss * lightColor * vec3(0., 1., 1.);\n        break;\n        case SPHERE_1_ID:\n        return vec3(1.0, 0.88, 0.7);\n        case FLOOR_ID:\n        return lambert * shadow * lightColor;\n        break;\n        case -1:\n        return vec3(0., 0., 0.);\n        break;\n    }\n    return vec3(0., 0., 0.);\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    vec3 lightPos = vec3(0., 3., 3.);\n    vec3 lightDir = normalize(isect - lightPos);\n    float thickness = fiveTapAO(isect, -nor, FIVETAP_K);\n    \n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect), thickness);\n\n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\n\nvec3 rayCast(vec3 eye, vec3 ref, vec2 ndc)\n{\n    vec3 F = ref - eye;\n    vec3 R = normalize(cross(F, vec3(0.0, 1.0, 0.0)));\n    vec3 U = normalize(cross(R, F));\n    \n    vec3 V = U * length(F) * tan(FOVY * 0.5);\n    vec3 H = R * length(F) * tan(FOVY * 0.5) * float(iResolution.x) / iResolution.y;\n    \n    vec3 p = ref + ndc.x * H + ndc.y * V;\n    \n    return normalize(p - eye);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // [-1, 1]\n    uv = uv * 2.0 - vec2(1.0, 1.0);\n    \n    vec3 eye = rotateY(vec3(0, 2, -20), iTime);\n    \n    vec3 ref = vec3(0, 0, 0);\n    \n    vec3 rayDir = rayCast(eye, ref, uv);\n    \n    Intersection isect = sdf3D(rayDir, eye);\n \n    // Output to screen\n    fragColor = vec4(isect.color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}