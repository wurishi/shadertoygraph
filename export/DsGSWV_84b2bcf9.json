{"ver":"0.1","info":{"id":"DsGSWV","date":"1681584579","viewed":111,"name":"skewed #6","username":"104","description":"fractal skewing cells","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n\nvoid mainImage( out vec4 o, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvo = uv-.5;\n    uv.x *= iResolution.x / iResolution.y;\n    o = vec4(0);\n    uv += 12.; // seed\n    \n    float a = 1.;\n\n    for (float i = 0.;i<1.;i += .1)\n    {\n        vec2 id = floor(uv);\n        vec2 p = abs(uv-id-.5); // cell position, offset to center, abs\n        float d = 1.-max(p.x,p.y)*2.; // dist to edge\n        vec4 h = hash42(id);\n        a *= d;\n        if (i-.25 > h.x) break;\n        o = mix(h,o,d); //o = h; works too but layering is prettier imo\n\n        vec4 hx = hash42(vec2(3.33,4.44)*id.x); // col hash, lazy\n        vec4 hy = hash42(vec2(3.33,4.44)*id.y); // row hash, lazy\n        hx = sign(hx-.5);\n        hy = sign(hy-.5);\n        uv.x += uv.y * hx.x* i; // skew\n        uv.y += uv.x * hy.x * i;\n        uv += hx.xy*hy.xy*iTime*.04;\n   \n        uv *= 2.;\n    }\n\n    o *= pow(a,.1);\n    o *= 1.-dot(uvo,1.5*uvo);\n    o *= 1.5;\n}\n","name":"Image","description":"","type":"image"}]}