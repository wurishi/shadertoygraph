{"ver":"0.1","info":{"id":"4lG3R3","date":"1477417885","viewed":987,"name":"LFSR Noise (Simplified)","username":"Flyguy","description":"A simplified 24-bit version of my previous LFSR noise shader. The output of this one is normalized 0.0 - 1.0 and the xyzw components are independent of one another. ","likes":8,"published":3,"flags":32,"usePreview":1,"tags":["noise","random","bits","lfsr"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define MAX_VALUE exp2(24.0)\n\n#define bit(n, b) mod(floor(n / exp2(b)), 2.0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Register state\n    vec4 reg = floor(texture(iChannel0, fragCoord/iResolution.xy) * MAX_VALUE);\n    \n    //Feedback taps\n    vec4 fb = bit(reg, 23.0)\n        \t+ bit(reg, 22.0)\n        \t+ bit(reg, 21.0)\n        \t+ bit(reg, 16.0);\n    fb = mod(fb, 2.0);\n    \n    //reg = ((reg & 0x7FFFFF) << 1) | fb\n    reg = mod(reg, float(0x800000)) * 2.0 + fb;\n    \n    //Initial conditions\n    if(any(equal(reg, vec4(0))) || iFrame < 5)\n    {\n        vec4 seed = floor(texture(iChannel1, fragCoord / iChannelResolution[1].xy) * MAX_VALUE);\n\t\treg = seed + vec4(1,3,5,7) * (fragCoord.x * fragCoord.y) + 1.0;\n    }\n    \n    fragColor = reg / MAX_VALUE;\n}","name":"Buf A","description":"","type":"buffer"}]}