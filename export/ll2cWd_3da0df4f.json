{"ver":"0.1","info":{"id":"ll2cWd","date":"1510679763","viewed":334,"name":"Your Mushroom Clouds","username":"Action","description":"Continues the work of other people. \nAdds temperature and solids. Add solids with \"a\".\n\nRemake of the very good trirop shader (https://www.shadertoy.com/view/MdSczK) and it's remake \nby Ultraviolet (https://www.shadertoy.com/view/4lScRG)","likes":14,"published":1,"flags":48,"usePreview":0,"tags":["fluid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Robert Schuetze - trirop/2017\n// Modified by Ulysse Vimont - Ultraviolet/2017\n// Modified by Action/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Note: Buffers are used for the following purposes:\n//  - Buf A performs advection (U*, C)\n//  - Buf B computes the divergence of the velocity field ( D = ∇.U*)\n//  - Buf C solves the Poisson equation ( ∇²P = ∇.U* )\n//  - Buf D substracts the pressure gradient ( U = U* - ∇.P )\n\nvoid mainImage( out vec4 fragColor, in vec2 C )\n{\n    vec2 r = iResolution.xy;\n    vec2 uv = (C-r*0.5)/r.y;\n    vec2 m = (iMouse.xy-r*0.5)/r.y;\n    if(length(iMouse)<0.01){\n        m = vec2(-0.5,0.);\n    }\n    \n    float concentration = texture(iChannel0,C/r).z;\n    float temperature = texture(iChannel1,C/r).w;\n    float pressure = texture(iChannel3,C/r).x;\n //   temperature = unpackUnorm2x16(floatBitsToUint (temperature)).x;\n    bool solid = temperature < 0. ? true: false;\n    temperature = abs(temperature);\n    \n    vec3 col;\n    \n    vec3 bkg = vec3(0.23, 0.24, 0.44);\n    vec3 con = bkg - vec3(concentration*0.3);\n    //----------------------------\n    col = con+vec3(temperature,0,0);\n\n    if (solid)\n        col = vec3(1,1,1);\n    \n    /*\n    // Frame rate indicator\n\tif(C.y>r.y-5.) {\n        float dt0 = 1./60.;\n        float dt1 = dt0/iTimeDelta;\n        if(C.x/r.x<dt1){\n\t        col = vec3(0,1,0);\n        }\n        else {\n\t        col = vec3(1,0,0);\n        }\n    }\n\t*/\n    \n    /*\n    //----------------------------\n    // visualize pressure\n    //col = 0.1*vec3(pressure,-pressure, 0.0);\n\n    float pl = texture(iChannel3,(C-vec2(-1, 0))/r).x;\n    float pr = texture(iChannel3,(C-vec2( 1, 0))/r).x;\n    float pt = texture(iChannel3,(C-vec2( 0,-1))/r).x;\n    float pb = texture(iChannel3,(C-vec2( 0, 1))/r).x;\n    vec2 grad = vec2(pr-pl,pb-pt);\n    //grad = vec2(dFdx(pressure), dFdy(pressure));\n    col = vec3(0.2+0.8*max(dot(normalize(vec3(0.0, 1.0, 1.0)), normalize(vec3(grad.x, .4, grad.y))), 0.0));\n    */\n    \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Runge-Kutta 4 backward advection\n\n// Note: Components are attributed as follow:\n//   - x : velocity field (X)\n//   - y : velocity field (Y)\n//   - z : concentration field\n//   - w : temp\n// The advection of the velocity field makes it non divergent-free, hence the next steps.\n\n#define h 2.\n\n// from IQ\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel1, (uv+ 0.5)/256.0, 0. ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nvec2 RK4(vec2 p){\n    vec2 r = iResolution.xy;\n    vec2 k1 = texture(iChannel0,p/r).xy;\n    vec2 k2 = texture(iChannel0,(p-0.5*h*k1)/r).xy;\n    vec2 k3 = texture(iChannel0,(p-0.5*h*k2)/r).xy;\n    vec2 k4 = texture(iChannel0,(p-h*k3)/r).xy;\n    return h/3.*(0.5*k1+k2+k3+0.5*k4);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 C )\n{\n    vec2 r = iResolution.xy;\n    vec2 uv = ((C-r*0.5)/r.y);\n    \n    // advection\n    vec4 buf = texture(iChannel0,(C-RK4(C))/r);\n    vec2 v = buf.xy;\n    float d = buf.z;\n    float t = buf.w;\n    bool solid = t < 0. ? true: false;\n    if (solid)\n    {\n        fragColor = vec4(0., 0., 0, buf.w);\n        return;\n    }\n//    float t = unpackUnorm2x16(floatBitsToUint(buf.w)).x;\n    \n    // set boundary velocity\n    if(C.x<2.||C.x>r.x-2.){\n    \tv.x = .0;\n    \tv.y *= .5;\n    }\n    if(r.y-2.<C.y||C.y<2.){\n    \tv.y = .0;\n    \tv.x *= .5;\n    }\n    \n    // mouse interaction\n    vec2 m = (iMouse.xy-r*0.5)/r.y;\n    \n//    if(length(iMouse.xy) < 10.0)\n//        m = vec2(pow(abs(sin(iTime*1.)), 2.)-0.5, 0.2*sin(iTime*4.)+0.2);\n    \n    // The smoke cools over time and starts to fall\n    t -= 0.0006*t+0.0003;\n    t = max(0.,abs(t));\n    \n    if(length(uv-m)<0.02 && (iMouse.z > 0.5 || length(iMouse.xy) < 10.0)){\n        \n        float r = length(uv-m)/0.02;\n        r = sqrt(1.0 - r*r);\n        {\n        \td = (d+r)*0.75+noise(vec3(C, d))*0.2;\n            t = (t+r)*0.75+ noise(vec3(C, d))*0.3;\n            solid = texelFetch( iChannel2, ivec2(65,0), 0 ).x>0.5 ? true : false;\n        }\n    }\n    \n    // Open sides\n    if(C.x<2.||C.x>r.x-2.){\n    \td = 0.;\n        t = 0.;\n    }\n    // Open top\n    if(r.y-20.<C.y){\n        d = 0.;\n        t = 0.;\n    }\n    \n //   d += d*noise(vec3(C, d))*0.2;\n //   t += t*noise(vec3(C, t))*0.3;\n //   d = clamp(d,0.,1.);\n //   t = clamp(t,0.,1.);\n    \n    t = solid ? -abs(t) : abs(t);\n    \n//    t = uintBitsToFloat (packUnorm2x16(vec2(t, 0)));\n    fragColor = vec4(v,d,t);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Created by Robert Schuetze - trirop/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Compute divergence\n\n// Note : Divergence is the right hand side of the Poisson equation:\n//   ∇²P = ∇.U*\n\nvoid mainImage( out vec4 fragColor, in vec2 C )\n{\n    vec2 r = iResolution.xy;\n    float vxl = texture(iChannel0,(C-vec2(-1, 0))/r).x;\n    float vxr = texture(iChannel0,(C-vec2( 1, 0))/r).x;\n    float vyt = texture(iChannel0,(C-vec2( 0,-1))/r).y;\n    float vyb = texture(iChannel0,(C-vec2( 0, 1))/r).y;\n    float div = (vxl-vxr+vyt-vyb)/2.;\n    fragColor = vec4(div,0,0,1);\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Created by Robert Schuetze - trirop/2017\n// \"Optimized\" by Action/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Pressure solver\n\n// Note: Pressure is the left hand side of the Poisson equation:\n//   ∇²P = ∇.U*\n// This shader performs 20 steps of the Jacobi method:\n//   P(i,j,n+1) = (P(i+1,j,n) + P(i-1,j,n) + P(i,j+1,n) + P(i,j-1,n) + D(i,j,n))/4\n// The twenty steps are performed in a single step by pre-computing a mask\n//       |0 1 0|\n//   m = |1 0 1|\n//       |0 1 0|\n// convoluted with itself 20 times (19 times for the RHS).\n// The initial guess for P is the result of the previous pass.\n//\n// NOTE: Optized by deleting about 500 lines of unimportant memory fetches.\n\nfloat rhs(int x,int y){\n    vec2 p = gl_FragCoord.xy+vec2(x,y);\n\treturn texture(iChannel0,p/iResolution.xy).x;\n}\n\n// 1/|x| - like distribution (RHS = right hand side = div(v))\nfloat TwentyStepRHS( void ){\n    float p = 0.;\n    p+=5691972.*rhs(-12,1);\n    p+=6672148.*rhs(-11,-4);\n    p+=7480032.*rhs(-11,-3);\n    p+=18513100.*rhs(-11,-2);\n    p+=15789824.*rhs(-11,-1);\n    p+=26001936.*rhs(-11,0);\n    p+=15789824.*rhs(-11,1);\n    p+=18513100.*rhs(-11,2);\n    p+=7480032.*rhs(-11,3);\n    p+=6672148.*rhs(-11,4);\n    p+=12751388.*rhs(-10,-5);\n    p+=16859024.*rhs(-10,-4);\n    p+=46169052.*rhs(-10,-3);\n    p+=48243200.*rhs(-10,-2);\n    p+=88069168.*rhs(-10,-1);\n    p+=68625984.*rhs(-10,0);\n    p+=88069168.*rhs(-10,1);\n    p+=48243200.*rhs(-10,2);\n    p+=46169052.*rhs(-10,3);\n    p+=16859024.*rhs(-10,4);\n    p+=12751388.*rhs(-10,5);\n    p+=3882736.*rhs(-9,-7);\n    p+=19495658.*rhs(-9,-6);\n    p+=29726528.*rhs(-9,-5);\n    p+=90216308.*rhs(-9,-4);\n    p+=112093952.*rhs(-9,-3);\n    p+=228013680.*rhs(-9,-2);\n    p+=219617664.*rhs(-9,-1);\n    p+=312737680.*rhs(-9,0);\n    p+=219617664.*rhs(-9,1);\n    p+=228013680.*rhs(-9,2);\n    p+=112093952.*rhs(-9,3);\n    p+=90216308.*rhs(-9,4);\n    p+=29726528.*rhs(-9,5);\n    p+=19495658.*rhs(-9,6);\n    p+=3882736.*rhs(-9,7);\n    p+=4324320.*rhs(-8,-8);\n    p+=24056318.*rhs(-8,-7);\n    p+=41569528.*rhs(-8,-6);\n    p+=140048558.*rhs(-8,-5);\n    p+=202185728.*rhs(-8,-4);\n    p+=459561168.*rhs(-8,-3);\n    p+=532099904.*rhs(-8,-2);\n    p+=850585168.*rhs(-8,-1);\n    p+=743089408.*rhs(-8,0);\n    p+=850585168.*rhs(-8,1);\n    p+=532099904.*rhs(-8,2);\n    p+=459561168.*rhs(-8,3);\n    p+=202185728.*rhs(-8,4);\n    p+=140048558.*rhs(-8,5);\n    p+=41569528.*rhs(-8,6);\n    p+=24056318.*rhs(-8,7);\n    p+=4324320.*rhs(-8,8);\n    p+=24056318.*rhs(-7,-8);\n    p+=46448688.*rhs(-7,-7);\n    p+=174151978.*rhs(-7,-6);\n    p+=286712448.*rhs(-7,-5);\n    p+=729241528.*rhs(-7,-4);\n    p+=991865088.*rhs(-7,-3);\n    p+=1792109680.*rhs(-7,-2);\n    p+=1907533696.*rhs(-7,-1);\n    p+=2460787216.*rhs(-7,0);\n    p+=1907533696.*rhs(-7,1);\n    p+=1792109680.*rhs(-7,2);\n    p+=991865088.*rhs(-7,3);\n    p+=729241528.*rhs(-7,4);\n    p+=286712448.*rhs(-7,5);\n    p+=174151978.*rhs(-7,6);\n    p+=46448688.*rhs(-7,7);\n    p+=24056318.*rhs(-7,8);\n    p+=19495658.*rhs(-6,-9);\n    p+=41569528.*rhs(-6,-8);\n    p+=174151978.*rhs(-6,-7);\n    p+=321877248.*rhs(-6,-6);\n    p+=917173928.*rhs(-6,-5);\n    p+=1436202848.*rhs(-6,-4);\n    p+=2939586856.*rhs(-6,-3);\n    p+=3736940032.*rhs(-6,-2);\n    p+=5531327920.*rhs(-6,-1);\n    p+=5284992064.*rhs(-6,0);\n    p+=5531327920.*rhs(-6,1);\n    p+=3736940032.*rhs(-6,2);\n    p+=2939586856.*rhs(-6,3);\n    p+=1436202848.*rhs(-6,4);\n    p+=917173928.*rhs(-6,5);\n    p+=321877248.*rhs(-6,6);\n    p+=174151978.*rhs(-6,7);\n    p+=41569528.*rhs(-6,8);\n    p+=19495658.*rhs(-6,9);\n    p+=12751388.*rhs(-5,-10);\n    p+=29726528.*rhs(-5,-9);\n    p+=140048558.*rhs(-5,-8);\n    p+=286712448.*rhs(-5,-7);\n    p+=917173928.*rhs(-5,-6);\n    p+=1623903168.*rhs(-5,-5);\n    p+=3762860920.*rhs(-5,-4);\n    p+=5593339456.*rhs(-5,-3);\n    p+=9567332872.*rhs(-5,-2);\n    p+=11195845888.*rhs(-5,-1);\n    p+=13625875600.*rhs(-5,0);\n    p+=11195845888.*rhs(-5,1);\n    p+=9567332872.*rhs(-5,2);\n    p+=5593339456.*rhs(-5,3);\n    p+=3762860920.*rhs(-5,4);\n    p+=1623903168.*rhs(-5,5);\n    p+=917173928.*rhs(-5,6);\n    p+=286712448.*rhs(-5,7);\n    p+=140048558.*rhs(-5,8);\n    p+=29726528.*rhs(-5,9);\n    p+=12751388.*rhs(-5,10);\n    p+=6672148.*rhs(-4,-11);\n    p+=16859024.*rhs(-4,-10);\n    p+=90216308.*rhs(-4,-9);\n    p+=202185728.*rhs(-4,-8);\n    p+=729241528.*rhs(-4,-7);\n    p+=1436202848.*rhs(-4,-6);\n    p+=3762860920.*rhs(-4,-5);\n    p+=6397998208.*rhs(-4,-4);\n    p+=12613706776.*rhs(-4,-3);\n    p+=17743206112.*rhs(-4,-2);\n    p+=25824041560.*rhs(-4,-1);\n    p+=26826818560.*rhs(-4,0);\n    p+=25824041560.*rhs(-4,1);\n    p+=17743206112.*rhs(-4,2);\n    p+=12613706776.*rhs(-4,3);\n    p+=6397998208.*rhs(-4,4);\n    p+=3762860920.*rhs(-4,5);\n    p+=1436202848.*rhs(-4,6);\n    p+=729241528.*rhs(-4,7);\n    p+=202185728.*rhs(-4,8);\n    p+=90216308.*rhs(-4,9);\n    p+=16859024.*rhs(-4,10);\n    p+=6672148.*rhs(-4,11);\n    p+=46169052.*rhs(-3,-10);\n    p+=112093952.*rhs(-3,-9);\n    p+=459561168.*rhs(-3,-8);\n    p+=991865088.*rhs(-3,-7);\n    p+=2939586856.*rhs(-3,-6);\n    p+=5593339456.*rhs(-3,-5);\n    p+=12613706776.*rhs(-3,-4);\n    p+=20720283328.*rhs(-3,-3);\n    p+=35988002440.*rhs(-3,-2);\n    p+=47530295680.*rhs(-3,-1);\n    p+=57901756420.*rhs(-3,0);\n    p+=47530295680.*rhs(-3,1);\n    p+=35988002440.*rhs(-3,2);\n    p+=20720283328.*rhs(-3,3);\n    p+=12613706776.*rhs(-3,4);\n    p+=5593339456.*rhs(-3,5);\n    p+=2939586856.*rhs(-3,6);\n    p+=991865088.*rhs(-3,7);\n    p+=459561168.*rhs(-3,8);\n    p+=112093952.*rhs(-3,9);\n    p+=46169052.*rhs(-3,10);\n    p+=7480032.*rhs(-3,11);\n    p+=18513100.*rhs(-2,-11);\n    p+=48243200.*rhs(-2,-10);\n    p+=228013680.*rhs(-2,-9);\n    p+=532099904.*rhs(-2,-8);\n    p+=1792109680.*rhs(-2,-7);\n    p+=3736940032.*rhs(-2,-6);\n    p+=9567332872.*rhs(-2,-5);\n    p+=17743206112.*rhs(-2,-4);\n    p+=35988002440.*rhs(-2,-3);\n    p+=57958224640.*rhs(-2,-2);\n    p+=91565303500.*rhs(-2,-1);\n    p+=109719615760.*rhs(-2,0);\n    p+=91565303500.*rhs(-2,1);\n    p+=57958224640.*rhs(-2,2);\n    p+=35988002440.*rhs(-2,3);\n    p+=17743206112.*rhs(-2,4);\n    p+=9567332872.*rhs(-2,5);\n    p+=3736940032.*rhs(-2,6);\n    p+=1792109680.*rhs(-2,7);\n    p+=532099904.*rhs(-2,8);\n    p+=228013680.*rhs(-2,9);\n    p+=48243200.*rhs(-2,10);\n    p+=18513100.*rhs(-2,11);\n    p+=2539344.*rhs(-2,12);\n    p+=15789824.*rhs(-1,-11);\n    p+=88069168.*rhs(-1,-10);\n    p+=219617664.*rhs(-1,-9);\n    p+=850585168.*rhs(-1,-8);\n    p+=1907533696.*rhs(-1,-7);\n    p+=5531327920.*rhs(-1,-6);\n    p+=11195845888.*rhs(-1,-5);\n    p+=25824041560.*rhs(-1,-4);\n    p+=47530295680.*rhs(-1,-3);\n    p+=91565303500.*rhs(-1,-2);\n    p+=151053077920.*rhs(-1,-1);\n    p+=226056661220.*rhs(-1,0);\n    p+=151053077920.*rhs(-1,1);\n    p+=91565303500.*rhs(-1,2);\n    p+=47530295680.*rhs(-1,3);\n    p+=25824041560.*rhs(-1,4);\n    p+=11195845888.*rhs(-1,5);\n    p+=5531327920.*rhs(-1,6);\n    p+=1907533696.*rhs(-1,7);\n    p+=850585168.*rhs(-1,8);\n    p+=219617664.*rhs(-1,9);\n    p+=88069168.*rhs(-1,10);\n    p+=15789824.*rhs(-1,11);\n    p+=3802112.*rhs(0,-12);\n    p+=26001936.*rhs(0,-11);\n    p+=68625984.*rhs(0,-10);\n    p+=312737680.*rhs(0,-9);\n    p+=743089408.*rhs(0,-8);\n    p+=2460787216.*rhs(0,-7);\n    p+=5284992064.*rhs(0,-6);\n    p+=13625875600.*rhs(0,-5);\n    p+=26826818560.*rhs(0,-4);\n    p+=57901756420.*rhs(0,-3);\n    p+=109719615760.*rhs(0,-2);\n    p+=226056661220.*rhs(0,-1);\n    p+=492400873280.*rhs(0,0);\n    p+=226056661220.*rhs(0,1);\n    p+=109719615760.*rhs(0,2);\n    p+=57901756420.*rhs(0,3);\n    p+=26826818560.*rhs(0,4);\n    p+=13625875600.*rhs(0,5);\n    p+=5284992064.*rhs(0,6);\n    p+=2460787216.*rhs(0,7);\n    p+=743089408.*rhs(0,8);\n    p+=312737680.*rhs(0,9);\n    p+=68625984.*rhs(0,10);\n    p+=26001936.*rhs(0,11);\n    p+=3802112.*rhs(0,12);\n    p+=5691972.*rhs(1,-12);\n    p+=15789824.*rhs(1,-11);\n    p+=88069168.*rhs(1,-10);\n    p+=219617664.*rhs(1,-9);\n    p+=850585168.*rhs(1,-8);\n    p+=1907533696.*rhs(1,-7);\n    p+=5531327920.*rhs(1,-6);\n    p+=11195845888.*rhs(1,-5);\n    p+=25824041560.*rhs(1,-4);\n    p+=47530295680.*rhs(1,-3);\n    p+=91565303500.*rhs(1,-2);\n    p+=151053077920.*rhs(1,-1);\n    p+=226056661220.*rhs(1,0);\n    p+=151053077920.*rhs(1,1);\n    p+=91565303500.*rhs(1,2);\n    p+=47530295680.*rhs(1,3);\n    p+=25824041560.*rhs(1,4);\n    p+=11195845888.*rhs(1,5);\n    p+=5531327920.*rhs(1,6);\n    p+=1907533696.*rhs(1,7);\n    p+=850585168.*rhs(1,8);\n    p+=219617664.*rhs(1,9);\n    p+=88069168.*rhs(1,10);\n    p+=15789824.*rhs(1,11);\n    p+=5691972.*rhs(1,12);\n    p+=2539344.*rhs(2,-12);\n    p+=18513100.*rhs(2,-11);\n    p+=48243200.*rhs(2,-10);\n    p+=228013680.*rhs(2,-9);\n    p+=532099904.*rhs(2,-8);\n    p+=1792109680.*rhs(2,-7);\n    p+=3736940032.*rhs(2,-6);\n    p+=9567332872.*rhs(2,-5);\n    p+=17743206112.*rhs(2,-4);\n    p+=35988002440.*rhs(2,-3);\n    p+=57958224640.*rhs(2,-2);\n    p+=91565303500.*rhs(2,-1);\n    p+=109719615760.*rhs(2,0);\n    p+=91565303500.*rhs(2,1);\n    p+=57958224640.*rhs(2,2);\n    p+=35988002440.*rhs(2,3);\n    p+=17743206112.*rhs(2,4);\n    p+=9567332872.*rhs(2,5);\n    p+=3736940032.*rhs(2,6);\n    p+=1792109680.*rhs(2,7);\n    p+=532099904.*rhs(2,8);\n    p+=228013680.*rhs(2,9);\n    p+=48243200.*rhs(2,10);\n    p+=18513100.*rhs(2,11);\n    p+=2539344.*rhs(2,12);\n    p+=2752228.*rhs(3,-12);\n    p+=7480032.*rhs(3,-11);\n    p+=46169052.*rhs(3,-10);\n    p+=112093952.*rhs(3,-9);\n    p+=459561168.*rhs(3,-8);\n    p+=991865088.*rhs(3,-7);\n    p+=2939586856.*rhs(3,-6);\n    p+=5593339456.*rhs(3,-5);\n    p+=12613706776.*rhs(3,-4);\n    p+=20720283328.*rhs(3,-3);\n    p+=35988002440.*rhs(3,-2);\n    p+=47530295680.*rhs(3,-1);\n    p+=57901756420.*rhs(3,0);\n    p+=47530295680.*rhs(3,1);\n    p+=35988002440.*rhs(3,2);\n    p+=20720283328.*rhs(3,3);\n    p+=12613706776.*rhs(3,4);\n    p+=5593339456.*rhs(3,5);\n    p+=2939586856.*rhs(3,6);\n    p+=991865088.*rhs(3,7);\n    p+=459561168.*rhs(3,8);\n    p+=112093952.*rhs(3,9);\n    p+=46169052.*rhs(3,10);\n    p+=7480032.*rhs(3,11);\n    p+=6672148.*rhs(4,-11);\n    p+=16859024.*rhs(4,-10);\n    p+=90216308.*rhs(4,-9);\n    p+=202185728.*rhs(4,-8);\n    p+=729241528.*rhs(4,-7);\n    p+=1436202848.*rhs(4,-6);\n    p+=3762860920.*rhs(4,-5);\n    p+=6397998208.*rhs(4,-4);\n    p+=12613706776.*rhs(4,-3);\n    p+=17743206112.*rhs(4,-2);\n    p+=25824041560.*rhs(4,-1);\n    p+=26826818560.*rhs(4,0);\n    p+=25824041560.*rhs(4,1);\n    p+=17743206112.*rhs(4,2);\n    p+=12613706776.*rhs(4,3);\n    p+=6397998208.*rhs(4,4);\n    p+=3762860920.*rhs(4,5);\n    p+=1436202848.*rhs(4,6);\n    p+=729241528.*rhs(4,7);\n    p+=202185728.*rhs(4,8);\n    p+=90216308.*rhs(4,9);\n    p+=16859024.*rhs(4,10);\n    p+=6672148.*rhs(4,11);\n    p+=29726528.*rhs(5,-9);\n    p+=140048558.*rhs(5,-8);\n    p+=286712448.*rhs(5,-7);\n    p+=917173928.*rhs(5,-6);\n    p+=1623903168.*rhs(5,-5);\n    p+=3762860920.*rhs(5,-4);\n    p+=5593339456.*rhs(5,-3);\n    p+=9567332872.*rhs(5,-2);\n    p+=11195845888.*rhs(5,-1);\n    p+=13625875600.*rhs(5,0);\n    p+=11195845888.*rhs(5,1);\n    p+=9567332872.*rhs(5,2);\n    p+=5593339456.*rhs(5,3);\n    p+=3762860920.*rhs(5,4);\n    p+=1623903168.*rhs(5,5);\n    p+=917173928.*rhs(5,6);\n    p+=286712448.*rhs(5,7);\n    p+=140048558.*rhs(5,8);\n    p+=29726528.*rhs(5,9);\n    p+=12751388.*rhs(5,10);\n    p+=19495658.*rhs(6,-9);\n    p+=41569528.*rhs(6,-8);\n    p+=174151978.*rhs(6,-7);\n    p+=321877248.*rhs(6,-6);\n    p+=917173928.*rhs(6,-5);\n    p+=1436202848.*rhs(6,-4);\n    p+=2939586856.*rhs(6,-3);\n    p+=3736940032.*rhs(6,-2);\n    p+=5531327920.*rhs(6,-1);\n    p+=5284992064.*rhs(6,0);\n    p+=5531327920.*rhs(6,1);\n    p+=3736940032.*rhs(6,2);\n    p+=2939586856.*rhs(6,3);\n    p+=1436202848.*rhs(6,4);\n    p+=917173928.*rhs(6,5);\n    p+=321877248.*rhs(6,6);\n    p+=174151978.*rhs(6,7);\n    p+=41569528.*rhs(6,8);\n    p+=19495658.*rhs(6,9);\n    p+=24056318.*rhs(7,-8);\n    p+=46448688.*rhs(7,-7);\n    p+=174151978.*rhs(7,-6);\n    p+=286712448.*rhs(7,-5);\n    p+=729241528.*rhs(7,-4);\n    p+=991865088.*rhs(7,-3);\n    p+=1792109680.*rhs(7,-2);\n    p+=1907533696.*rhs(7,-1);\n    p+=2460787216.*rhs(7,0);\n    p+=1907533696.*rhs(7,1);\n    p+=1792109680.*rhs(7,2);\n    p+=991865088.*rhs(7,3);\n    p+=729241528.*rhs(7,4);\n    p+=286712448.*rhs(7,5);\n    p+=174151978.*rhs(7,6);\n    p+=46448688.*rhs(7,7);\n    p+=24056318.*rhs(7,8);\n    p+=3882736.*rhs(7,9);\n    p+=24056318.*rhs(8,-7);\n    p+=41569528.*rhs(8,-6);\n    p+=140048558.*rhs(8,-5);\n    p+=202185728.*rhs(8,-4);\n    p+=459561168.*rhs(8,-3);\n    p+=532099904.*rhs(8,-2);\n    p+=850585168.*rhs(8,-1);\n    p+=743089408.*rhs(8,0);\n    p+=850585168.*rhs(8,1);\n    p+=532099904.*rhs(8,2);\n    p+=459561168.*rhs(8,3);\n    p+=202185728.*rhs(8,4);\n    p+=140048558.*rhs(8,5);\n    p+=41569528.*rhs(8,6);\n    p+=24056318.*rhs(8,7);\n    p+=4324320.*rhs(8,8);\n    p+=3882736.*rhs(9,-7);\n    p+=19495658.*rhs(9,-6);\n    p+=29726528.*rhs(9,-5);\n    p+=90216308.*rhs(9,-4);\n    p+=112093952.*rhs(9,-3);\n    p+=228013680.*rhs(9,-2);\n    p+=219617664.*rhs(9,-1);\n    p+=312737680.*rhs(9,0);\n    p+=219617664.*rhs(9,1);\n    p+=228013680.*rhs(9,2);\n    p+=112093952.*rhs(9,3);\n    p+=90216308.*rhs(9,4);\n    p+=29726528.*rhs(9,5);\n    p+=19495658.*rhs(9,6);\n    p+=3882736.*rhs(9,7);\n    p+=12751388.*rhs(10,-5);\n    p+=16859024.*rhs(10,-4);\n    p+=46169052.*rhs(10,-3);\n    p+=48243200.*rhs(10,-2);\n    p+=88069168.*rhs(10,-1);\n    p+=68625984.*rhs(10,0);\n    p+=88069168.*rhs(10,1);\n    p+=48243200.*rhs(10,2);\n    p+=46169052.*rhs(10,3);\n    p+=16859024.*rhs(10,4);\n    p+=12751388.*rhs(10,5);\n    p+=6672148.*rhs(11,-4);\n    p+=7480032.*rhs(11,-3);\n    p+=18513100.*rhs(11,-2);\n    p+=15789824.*rhs(11,-1);\n    p+=26001936.*rhs(11,0);\n    p+=15789824.*rhs(11,1);\n    p+=18513100.*rhs(11,2);\n    p+=7480032.*rhs(11,3);\n    p+=6672148.*rhs(11,4);\n    p+=5691972.*rhs(12,-1);\n    p+=3802112.*rhs(12,0);\n    p+=5691972.*rhs(12,1);\n    return p/1099511627776.;\n}\n\nfloat p0c(int x,int y){\n    vec2 p = gl_FragCoord.xy+vec2(x,y);\n\treturn texture(iChannel1,p/iResolution.xy).x;\n}\n\n// Gaussian - like redistribution of the previously calculated pressure p0c\nfloat TwentyStepPressure( void ){\n    float p = 0.;\n    p+=17674560.*p0c(-12,-2);\n    p+=23474025.*p0c(-12,0);\n    p+=17674560.*p0c(-12,2);\n    p+=14728800.*p0c(-11,-5);\n    p+=44186400.*p0c(-11,-3);\n    p+=75116880.*p0c(-11,-1);\n    p+=75116880.*p0c(-11,1);\n    p+=44186400.*p0c(-11,3);\n    p+=14728800.*p0c(-11,5);\n    p+=2519400.*p0c(-11,7);\n    p+=3359200.*p0c(-10,-8);\n    p+=23934300.*p0c(-10,-6);\n    p+=88372800.*p0c(-10,-4);\n    p+=187792200.*p0c(-10,-2);\n    p+=240374016.*p0c(-10,0);\n    p+=187792200.*p0c(-10,2);\n    p+=88372800.*p0c(-10,4);\n    p+=23934300.*p0c(-10,6);\n    p+=31912400.*p0c(-9,-7);\n    p+=143605800.*p0c(-9,-5);\n    p+=375584400.*p0c(-9,-3);\n    p+=600935040.*p0c(-9,-1);\n    p+=600935040.*p0c(-9,1);\n    p+=375584400.*p0c(-9,3);\n    p+=143605800.*p0c(-9,5);\n    p+=31912400.*p0c(-9,7);\n    p+=35103640.*p0c(-8,-8);\n    p+=191474400.*p0c(-8,-6);\n    p+=610324650.*p0c(-8,-4);\n    p+=1201870080.*p0c(-8,-2);\n    p+=1502337600.*p0c(-8,0);\n    p+=1201870080.*p0c(-8,2);\n    p+=610324650.*p0c(-8,4);\n    p+=191474400.*p0c(-8,6);\n    p+=210621840.*p0c(-7,-7);\n    p+=813766200.*p0c(-7,-5);\n    p+=1953038880.*p0c(-7,-3);\n    p+=3004675200.*p0c(-7,-1);\n    p+=3004675200.*p0c(-7,1);\n    p+=1953038880.*p0c(-7,3);\n    p+=813766200.*p0c(-7,5);\n    p+=210621840.*p0c(-7,7);\n    p+=191474400.*p0c(-6,-8);\n    p+=895142820.*p0c(-6,-6);\n    p+=2604051840.*p0c(-6,-4);\n    p+=4882597200.*p0c(-6,-2);\n    p+=6009350400.*p0c(-6,0);\n    p+=4882597200.*p0c(-6,2);\n    p+=2604051840.*p0c(-6,4);\n    p+=895142820.*p0c(-6,6);\n    p+=191474400.*p0c(-6,8);\n    p+=23934300.*p0c(-6,10);\n    p+=14728800.*p0c(-5,-11);\n    p+=143605800.*p0c(-5,-9);\n    p+=813766200.*p0c(-5,-7);\n    p+=2864457024.*p0c(-5,-5);\n    p+=6510129600.*p0c(-5,-3);\n    p+=9765194400.*p0c(-5,-1);\n    p+=9765194400.*p0c(-5,1);\n    p+=6510129600.*p0c(-5,3);\n    p+=2864457024.*p0c(-5,5);\n    p+=813766200.*p0c(-5,7);\n    p+=143605800.*p0c(-5,9);\n    p+=88372800.*p0c(-4,-10);\n    p+=610324650.*p0c(-4,-8);\n    p+=2604051840.*p0c(-4,-6);\n    p+=7161142560.*p0c(-4,-4);\n    p+=13020259200.*p0c(-4,-2);\n    p+=15868440900.*p0c(-4,0);\n    p+=13020259200.*p0c(-4,2);\n    p+=7161142560.*p0c(-4,4);\n    p+=2604051840.*p0c(-4,6);\n    p+=610324650.*p0c(-4,8);\n    p+=88372800.*p0c(-4,10);\n    p+=44186400.*p0c(-3,-11);\n    p+=375584400.*p0c(-3,-9);\n    p+=1953038880.*p0c(-3,-7);\n    p+=6510129600.*p0c(-3,-5);\n    p+=14322285120.*p0c(-3,-3);\n    p+=21157921200.*p0c(-3,-1);\n    p+=21157921200.*p0c(-3,1);\n    p+=14322285120.*p0c(-3,3);\n    p+=6510129600.*p0c(-3,5);\n    p+=1953038880.*p0c(-3,7);\n    p+=375584400.*p0c(-3,9);\n    p+=44186400.*p0c(-3,11);\n    p+=2945760.*p0c(-3,13);\n    p+=17674560.*p0c(-2,-12);\n    p+=187792200.*p0c(-2,-10);\n    p+=1201870080.*p0c(-2,-8);\n    p+=4882597200.*p0c(-2,-6);\n    p+=13020259200.*p0c(-2,-4);\n    p+=23273713320.*p0c(-2,-2);\n    p+=28210561600.*p0c(-2,0);\n    p+=23273713320.*p0c(-2,2);\n    p+=13020259200.*p0c(-2,4);\n    p+=4882597200.*p0c(-2,6);\n    p+=1201870080.*p0c(-2,8);\n    p+=187792200.*p0c(-2,10);\n    p+=17674560.*p0c(-2,12);\n    p+=5523300.*p0c(-1,-13);\n    p+=75116880.*p0c(-1,-11);\n    p+=600935040.*p0c(-1,-9);\n    p+=3004675200.*p0c(-1,-7);\n    p+=9765194400.*p0c(-1,-5);\n    p+=21157921200.*p0c(-1,-3);\n    p+=31031617760.*p0c(-1,-1);\n    p+=31031617760.*p0c(-1,1);\n    p+=21157921200.*p0c(-1,3);\n    p+=9765194400.*p0c(-1,5);\n    p+=3004675200.*p0c(-1,7);\n    p+=600935040.*p0c(-1,9);\n    p+=75116880.*p0c(-1,11);\n    p+=5523300.*p0c(-1,13);\n    p+=1299600.*p0c(0,-14);\n    p+=23474025.*p0c(0,-12);\n    p+=240374016.*p0c(0,-10);\n    p+=1502337600.*p0c(0,-8);\n    p+=6009350400.*p0c(0,-6);\n    p+=15868440900.*p0c(0,-4);\n    p+=28210561600.*p0c(0,-2);\n    p+=34134779536.*p0c(0,0);\n    p+=28210561600.*p0c(0,2);\n    p+=15868440900.*p0c(0,4);\n    p+=6009350400.*p0c(0,6);\n    p+=1502337600.*p0c(0,8);\n    p+=240374016.*p0c(0,10);\n    p+=23474025.*p0c(0,12);\n    p+=1299600.*p0c(0,14);\n    p+=5523300.*p0c(1,-13);\n    p+=75116880.*p0c(1,-11);\n    p+=600935040.*p0c(1,-9);\n    p+=3004675200.*p0c(1,-7);\n    p+=9765194400.*p0c(1,-5);\n    p+=21157921200.*p0c(1,-3);\n    p+=31031617760.*p0c(1,-1);\n    p+=31031617760.*p0c(1,1);\n    p+=21157921200.*p0c(1,3);\n    p+=9765194400.*p0c(1,5);\n    p+=3004675200.*p0c(1,7);\n    p+=600935040.*p0c(1,9);\n    p+=75116880.*p0c(1,11);\n    p+=5523300.*p0c(1,13);\n    p+=17674560.*p0c(2,-12);\n    p+=187792200.*p0c(2,-10);\n    p+=1201870080.*p0c(2,-8);\n    p+=4882597200.*p0c(2,-6);\n    p+=13020259200.*p0c(2,-4);\n    p+=23273713320.*p0c(2,-2);\n    p+=28210561600.*p0c(2,0);\n    p+=23273713320.*p0c(2,2);\n    p+=13020259200.*p0c(2,4);\n    p+=4882597200.*p0c(2,6);\n    p+=1201870080.*p0c(2,8);\n    p+=187792200.*p0c(2,10);\n    p+=17674560.*p0c(2,12);\n    p+=2945760.*p0c(3,-13);\n    p+=44186400.*p0c(3,-11);\n    p+=375584400.*p0c(3,-9);\n    p+=1953038880.*p0c(3,-7);\n    p+=6510129600.*p0c(3,-5);\n    p+=14322285120.*p0c(3,-3);\n    p+=21157921200.*p0c(3,-1);\n    p+=21157921200.*p0c(3,1);\n    p+=14322285120.*p0c(3,3);\n    p+=6510129600.*p0c(3,5);\n    p+=1953038880.*p0c(3,7);\n    p+=375584400.*p0c(3,9);\n    p+=44186400.*p0c(3,11);\n    p+=2945760.*p0c(3,13);\n    p+=7364400.*p0c(4,-12);\n    p+=88372800.*p0c(4,-10);\n    p+=610324650.*p0c(4,-8);\n    p+=2604051840.*p0c(4,-6);\n    p+=7161142560.*p0c(4,-4);\n    p+=13020259200.*p0c(4,-2);\n    p+=15868440900.*p0c(4,0);\n    p+=13020259200.*p0c(4,2);\n    p+=7161142560.*p0c(4,4);\n    p+=2604051840.*p0c(4,6);\n    p+=610324650.*p0c(4,8);\n    p+=88372800.*p0c(4,10);\n    p+=7364400.*p0c(4,12);\n    p+=14728800.*p0c(5,-11);\n    p+=143605800.*p0c(5,-9);\n    p+=813766200.*p0c(5,-7);\n    p+=2864457024.*p0c(5,-5);\n    p+=6510129600.*p0c(5,-3);\n    p+=9765194400.*p0c(5,-1);\n    p+=9765194400.*p0c(5,1);\n    p+=6510129600.*p0c(5,3);\n    p+=2864457024.*p0c(5,5);\n    p+=813766200.*p0c(5,7);\n    p+=143605800.*p0c(5,9);\n    p+=14728800.*p0c(5,11);\n    p+=1550400.*p0c(6,-12);\n    p+=23934300.*p0c(6,-10);\n    p+=191474400.*p0c(6,-8);\n    p+=895142820.*p0c(6,-6);\n    p+=2604051840.*p0c(6,-4);\n    p+=4882597200.*p0c(6,-2);\n    p+=6009350400.*p0c(6,0);\n    p+=4882597200.*p0c(6,2);\n    p+=2604051840.*p0c(6,4);\n    p+=895142820.*p0c(6,6);\n    p+=191474400.*p0c(6,8);\n    p+=23934300.*p0c(6,10);\n    p+=1550400.*p0c(6,12);\n    p+=2519400.*p0c(7,-11);\n    p+=31912400.*p0c(7,-9);\n    p+=210621840.*p0c(7,-7);\n    p+=813766200.*p0c(7,-5);\n    p+=1953038880.*p0c(7,-3);\n    p+=3004675200.*p0c(7,-1);\n    p+=3004675200.*p0c(7,1);\n    p+=1953038880.*p0c(7,3);\n    p+=813766200.*p0c(7,5);\n    p+=210621840.*p0c(7,7);\n    p+=31912400.*p0c(7,9);\n    p+=2519400.*p0c(7,11);\n    p+=3359200.*p0c(8,-10);\n    p+=35103640.*p0c(8,-8);\n    p+=191474400.*p0c(8,-6);\n    p+=610324650.*p0c(8,-4);\n    p+=1201870080.*p0c(8,-2);\n    p+=1502337600.*p0c(8,0);\n    p+=1201870080.*p0c(8,2);\n    p+=610324650.*p0c(8,4);\n    p+=191474400.*p0c(8,6);\n    p+=35103640.*p0c(8,8);\n    p+=3359200.*p0c(8,10);\n    p+=3695120.*p0c(9,-9);\n    p+=31912400.*p0c(9,-7);\n    p+=143605800.*p0c(9,-5);\n    p+=375584400.*p0c(9,-3);\n    p+=600935040.*p0c(9,-1);\n    p+=600935040.*p0c(9,1);\n    p+=375584400.*p0c(9,3);\n    p+=143605800.*p0c(9,5);\n    p+=31912400.*p0c(9,7);\n    p+=3695120.*p0c(9,9);\n    p+=3359200.*p0c(10,-8);\n    p+=23934300.*p0c(10,-6);\n    p+=88372800.*p0c(10,-4);\n    p+=187792200.*p0c(10,-2);\n    p+=240374016.*p0c(10,0);\n    p+=187792200.*p0c(10,2);\n    p+=88372800.*p0c(10,4);\n    p+=23934300.*p0c(10,6);\n    p+=3359200.*p0c(10,8);\n    p+=2519400.*p0c(11,-7);\n    p+=14728800.*p0c(11,-5);\n    p+=44186400.*p0c(11,-3);\n    p+=75116880.*p0c(11,-1);\n    p+=75116880.*p0c(11,1);\n    p+=44186400.*p0c(11,3);\n    p+=14728800.*p0c(11,5);\n    p+=2519400.*p0c(11,7);\n    p+=7364400.*p0c(12,-4);\n    p+=17674560.*p0c(12,-2);\n    p+=23474025.*p0c(12,0);\n    p+=17674560.*p0c(12,2);\n    p+=7364400.*p0c(12,4);\n    p+=1550400.*p0c(12,6);\n\n    return p/1099511627776.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 C )\n{ \n    float p = TwentyStepRHS()+TwentyStepPressure();\n    \n\tvec2 r = iResolution.xy;\n    // Open sides\n    if(C.x<2.||C.x>r.x-2.){\n    \tp = .0;\n    }\n    // Open top\n    if(r.y-20.<C.y){\n        p = 0.;\n    }\n    \n    fragColor = vec4(p,0,0,1);\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// Created by Robert Schuetze - trirop/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Gradient subtraction\n\n// Note: This allows the velocity field to be divergence-free\n\n#define tamb 0.\n#define a 0.3\n#define b 0.8\n#define gravity 1.\n\nvoid mainImage( out vec4 fragColor, in vec2 C )\n{\n    vec2 r = iResolution.xy;   \n    float pl = texture(iChannel0,(C-vec2(-1, 0))/r).x;\n    float pr = texture(iChannel0,(C-vec2( 1, 0))/r).x;\n    float pt = texture(iChannel0,(C-vec2( 0,-1))/r).x;\n    float pb = texture(iChannel0,(C-vec2( 0, 1))/r).x;\n    vec2 grad = vec2(pr-pl,pb-pt)/2.;\n    float pres = texture(iChannel0,C/r).x;\n    //grad = vec2(dFdx(pres), dFdy(pres));\n    vec4 bufOld = texture(iChannel1,C/r);\n    \n    // Temperature causes buoyancy against gravity. Ambient temperature is tamp.\n    // Try to find good settings.\n    float s = bufOld.z;\n    float t = bufOld.w;\n    if (t < 0.)\n    {\n\t    fragColor = vec4(0,0, s,t);\n        return;\n    }\n //   float t = unpackUnorm2x16(floatBitsToUint(bufOld.w)).x;\n    float buoyancy = (a*s-b*(abs(t)-tamb))*gravity;\n    vec2 g = vec2(0.0, buoyancy)*0.1;\n    \n    vec2 f = bufOld.xy-grad - g;\n    // Open sides\n    if(C.x<2.||C.x>r.x-2.){\n    \ts = 0.;\n        t = 0.;\n    }\n    // Open top\n    if(r.y-20.<C.y){\n        s = 0.;\n        t = 0.;\n    }\n //   t = uintBitsToFloat (packUnorm2x16(vec2(t, 0)));\n    fragColor = vec4(f, s,t);\n}","name":"Buf D","description":"","type":"buffer"}]}