{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"webcam","id":"4sf3zn","filepath":"/presets/webcam.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// MTAT.03.015 Computer Graphics\n// https://courses.cs.ut.ee/2013/cg/\n//\n// Basic ripple effect example\n\n\n// Params = (wave frequency in Hz, number of waves per unit distance)\n//\nvec2 params = vec2(2.5, 10.0);\n\t\n// Simple circular wave function\nfloat wave(vec2 pos, float t, float freq, float numWaves, vec2 center) {\n\tfloat d = length(pos - center);\n\td = log(1.0 + exp(d));\n\treturn 1.0/(1.0+20.0*d*d) *\n\t\t   sin(2.0*3.1415*(-numWaves*d + t*freq));\n}\n\n// This height map combines a couple of waves\nfloat height(vec2 pos, float t) {\n\tfloat w;\n\tw =  wave(pos, t, params.x, params.y, vec2(0.5, -0.5));\n\tw += wave(pos, t, params.x, params.y, -vec2(0.5, -0.5));\n\treturn w;\n}\n\n// Discrete differentiation\nvec2 normal(vec2 pos, float t) {\n\treturn \tvec2(height(pos - vec2(0.01, 0), t) - height(pos, t), \n\t\t\t\t height(pos - vec2(0, 0.01), t) - height(pos, t));\n}\n\n// Simple ripple effect\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tif (iMouse.z > 0.0) params = 2.0*params*iMouse.xy/iResolution.xy;\n\telse params = vec2(2.5, 10.0);\n\t\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 uvn = 2.0*uv - vec2(1.0);\t\n\tuv += normal(uvn, iTime);\n\tfragColor = texture(iChannel0, vec2(1.0-uv.x, uv.y));\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":true,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4djGzz","date":"1382808179","viewed":5502,"name":"RippleCam","username":"sleep","description":"Basic ripple effect example applied to the webcam picture","likes":55,"published":1,"flags":2,"usePreview":1,"tags":["ripples","webcam"],"hasliked":0,"parentid":"","parentname":""}}