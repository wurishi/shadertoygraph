{"ver":"0.1","info":{"id":"7stSW7","date":"1633377500","viewed":202,"name":"Lighting Examples","username":"amally","description":"Some examples of how to light a scene","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["lighting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define RED_SPH_COLOR vec3(1.0, 0.67, 0.67)\n//#define YLW_SPH_COLOR vec3(1.0, 0.88, 0.7)\n//#define CHECKER_WHITE vec3(1.0)\n//#define CHECKER_BLACK vec3(0.5)\n\n// Want materials to have an intensity of ~0.2\n// when rendering with gamma correction + more photorealism\n#define RED_SPH_COLOR vec3(0.4, 0.268, 0.268)\n#define YLW_SPH_COLOR vec3(0.4, 0.352, 0.28)\n#define CHECKER_WHITE vec3(0.4)\n#define CHECKER_BLACK vec3(0.2)\n\n#define WHITE_LIGHT vec3(1.0, 1.0, 1.0)\n#define OFFWHITE_LIGHT vec3(1.0, 0.88, 0.7)\n\n/*\n// Want sunlight to be brighter than 100% to emulate\n// High Dynamic Range\n#define SUN_KEY_LIGHT vec3(1.0, 0.88, 0.7) * 1.5\n// Fill light is sky color, fills in shadows to not be black\n#define SKY_FILL_LIGHT vec3(0.2, 0.7, 1.) * 0.2\n// Faking global illumination by having sunlight\n// bounce horizontally only, at a lower intensity\n#define SUN_AMBIENT_LIGHT vec3(1.0, 0.88, 0.7) * 0.2\n#define OUTSIDE_BACKGROUND vec3(0.2, 0.7, 1.) * 4.3\n*/\n\n// Want sunlight to be brighter than 100% to emulate\n// High Dynamic Range\n#define SUN_KEY_LIGHT vec3(0.6, 1.0, 0.4) * 1.5\n// Fill light is sky color, fills in shadows to not be black\n#define SKY_FILL_LIGHT vec3(0.7, 0.2, 0.7) * 0.2\n// Faking global illumination by having sunlight\n// bounce horizontally only, at a lower intensity\n#define SUN_AMBIENT_LIGHT vec3(0.6, 1.0, 0.4) * 0.2\n#define OUTSIDE_BACKGROUND vec3(0.7, 0.2, 0.7) * 4.3\n\n#define BORINGEST_LIGHT 1\n#define BORING_LIGHT 1\n#define OUTSIDE_LIGHT 1\n\n#define GAMMA 1\n\nvoid raycast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref) {\n    eye = rotateY(vec3(0.0, 1.0, 15.0), 3.14159 * 1.5);\n    ref = vec3(0.0, 0.0, 0.0);\n    \n    float len = tan(3.14159 * 0.125) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n}\n\n\n\n\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj)\n{\n    t = sphere(pos, 4.0, vec3(0.0, 0.0, 0.0));\n    float t2;\n    obj = 0; // 0 is center sphere\n    if((t2 = sphere(pos, 2.0, greenSpherePos)) < t) {\n        t = t2;\n        obj = 1;\n    }\n    if((t2 = box(pos + vec3(0.0, 3.0, 0.0), vec3(50.0, 1.0, 50.0))) < t) {\n        t = t2;\n        obj = 3;\n    }\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01)\n        {\n            return;\n        }\n        if(t > 50.) {\n            break;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 view) {\n    float t;\n    \n    DirectionalLight lights[3];\n    vec3 backgroundColor = vec3(0.);\n    #if BORINGEST_LIGHT\n    lights[0] = DirectionalLight(normalize(vec3(-15.0, 8.0, -1.0)),\n                                 WHITE_LIGHT);\n    lights[1] = DirectionalLight(vec3(0.), vec3(0.));\n    lights[2] = DirectionalLight(vec3(0.), vec3(0.));\n    #endif\n    #if BORING_LIGHT\n    lights[0] = DirectionalLight(normalize(vec3(-15.0, 8.0, -1.0)),\n                                 OFFWHITE_LIGHT);\n    lights[1] = DirectionalLight(vec3(0.), vec3(0.));\n    lights[2] = DirectionalLight(vec3(0.), vec3(0.));\n    #endif\n    \n    #if OUTSIDE_LIGHT\n    lights[0] = DirectionalLight(normalize(vec3(15.0, 15.0, 10.0)),\n                                 SUN_KEY_LIGHT);\n    lights[1] = DirectionalLight(vec3(0., 1., 0.),\n                                 SKY_FILL_LIGHT);\n    lights[2] = DirectionalLight(normalize(-vec3(15.0, 0.0, 10.0)),\n                                 SUN_AMBIENT_LIGHT);\n    backgroundColor = SUN_KEY_LIGHT;\n    #endif\n    \n    vec3 albedo;\n    switch(hitObj) {\n        case 0: // Red sphere\n        albedo = RED_SPH_COLOR;\n        break;\n        case 1: // Yellow sphere\n        albedo = YLW_SPH_COLOR;\n        break;\n        case 3: // Floor\n        t = floor(mod(1.0 * (sin(p.x) + sin(p.z)), 2.0));\n        albedo = mix(CHECKER_BLACK, CHECKER_WHITE, t);\n        break; // Background\n        case -1:\n        return backgroundColor;\n        break;\n    }\n    \n    vec3 color = albedo *\n                 lights[0].color *\n                 max(0.0, dot(n, lights[0].dir)) *\n                 shadow(lights[0].dir, p, 0.1);\n    for(int i = 1; i < 3; ++i) {\n        color += albedo *\n                 lights[i].color *\n                 max(0.0, dot(n, lights[i].dir));\n                 //shadow(lights[i].dir, p, 0.1);\n    }\n    #if GAMMA\n    color = pow(color, vec3(1. / 2.2));\n    #endif\n    return color;\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n    \n    vec3 backgroundColor = vec3(0.);\n    #if OUTSIDE_LIGHT\n    backgroundColor = OUTSIDE_BACKGROUND;\n    #endif\n    \n    if(t == -1.0) {\n        return Intersection(t, backgroundColor, vec3(eye + 1000.0 * dir), -1);\n    }\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    \n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, normalize(eye - isect));\n    \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 lightPos = vec3(-12.0, 4.0, 0.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // [-1, 1]\n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n    \n    Intersection aaIsects[4];\n    vec3 dir, eye, ref;\n    int idx = 0;\n    for(float i = 0.0; i < 1.0; i += 0.5) {\n        for(float j = 0.0; j < 1.0; j += 0.5) {\n            raycast(uv2 + vec2(i, j) / iResolution.xy, dir, eye, ref);\n            aaIsects[idx++] = sdf3D(dir, eye);\n        }\n    }\n    vec3 avgColor = vec3(0.0);\n    for(int i = 0; i < 4; ++i) {\n        avgColor += aaIsects[i].color;\n    }\n    avgColor *= 0.25;\n    fragColor = vec4(avgColor * step(0.0, aaIsects[0].t), 1.0);\n    float fogT = smoothstep(30.0, 50.0, distance(aaIsects[0].p, eye));\n    \n    vec3 backgroundColor = vec3(0.);\n    #if OUTSIDE_LIGHT\n    backgroundColor = OUTSIDE_BACKGROUND;\n    #endif\n    \n    fragColor.rgb = mix(fragColor.rgb, backgroundColor, fogT);\n    \n    fragColor.rgb = pow(fragColor.rgb, vec3(1.0, 1.2, 1.5));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const int RAY_STEPS = 256;\n\nconst float HALF_PI = 3.14159 * 0.5;\n\nconst vec3 greenSpherePos = vec3(-2.0, 0.0, 5.5);\n\n#define GI 0\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n\nstruct DirectionalLight\n{\n    vec3 dir;\n    vec3 color;\n};\n\n\n    \nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\nfloat torus(vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q) - t.y;\n}\n\nfloat cone(vec3 p, vec2 c)\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nvec3 rotateX(vec3 p, float amt) {\n    return vec3(p.x, cos(amt) * p.y - sin(amt) * p.z, sin(p.y) + cos(p.z));\n}\n\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t = sphere(pos, 4.0, vec3(0.0, 0.0, 0.0));\n    t = min(t, sphere(pos, 2.0, greenSpherePos));\n    t = min(t, box(pos + vec3(0.0, 3.0, 0.0), vec3(50.0, 1.0, 50.0)));\n    return t;\n}\n\nfloat shadowMap3D(vec3 pos)\n{\n    float t = sphere(pos, 4.0, vec3(0.0, 0.0, 0.0));\n    t = min(t, sphere(pos, 2.0, greenSpherePos));\n    t = min(t, box(pos + vec3(0.0, 3.0, 0.0), vec3(50.0, 1.0, 50.0)));\n    return t;\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nfloat softShadow(vec3 dir, vec3 origin, float min_t, float k) {\n    float res = 1.0;\n    float t = min_t;\n    for(int i = 0; i < RAY_STEPS; ++i) {\n        float m = shadowMap3D(origin + t * dir);\n        if(m < 0.0001) {\n            return 0.0;\n        }\n        res = min(res, k * m / t);\n        t += m;\n    }\n    return res;\n}\n\nfloat shadow(vec3 dir, vec3 origin, float min_t) {\n    return softShadow(dir, origin, min_t, 6.0);\n}","name":"Common","description":"","type":"common"}]}