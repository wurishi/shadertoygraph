{"ver":"0.1","info":{"id":"XXy3Dz","date":"1717593617","viewed":53,"name":"Color gradient blending","username":"neeh","description":"Blend multiple colors at different positions together.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["color","gradient","blending"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_POINTS 4\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec2 auv = uv;\n    auv.x *= max(iResolution.z, 1.0);\n    auv.y /= min(iResolution.z, 1.0);\n    \n    float t = iTime * 0.1;\n    float e = 2.0;\n    \n    vec2 pointPos[NUM_POINTS];\n    pointPos[0] = (0.5 + 0.5 * vec2(cos(-t), sin(-t))) * e;\n    pointPos[1] = (0.5 + 0.5 * vec2(cos(t * 1.7856), sin(t * 1.234))) * e;\n    pointPos[2] = (0.5 + 0.5 * vec2(cos(-t * 2.78633), sin(-t * 3.564))) * e;\n    pointPos[3] = (0.5 + 0.5 * vec2(cos(t * 4.567), sin(t * 3.124))) * e;\n    \n    // pointPos[0] = vec2(cos(t * 0.23849) * 0.3 + 0.25, 0.72);\n    // pointPos[1] = vec2(0.82, 0.7 + sin(t * 0.39940) * 0.2);\n    // pointPos[2] = vec2(0.8 + cos(t * 0.2339) * 0.2, 0.22);\n    // pointPos[3] = vec2(cos(t * 0.12238 + 1.8942) * 0.35 + 0.3, sin(t * 0.1837 + 120.39) * 0.5 + 0.4) * 0.4;\n    \n    vec3 pointCol[NUM_POINTS];\n    pointCol[0] = vec3(0.1, 0.6 + sin(t * 0.230) * 0.1, 0.9 + cos(t * 0.268 + 0.34) * 0.1);\n    pointCol[1] = vec3(0.376, 0.12, 0.95);\n    pointCol[2] = vec3(0.6, 0.35 ,0.75);\n    pointCol[3] = vec3(0.17, 0.17, 0.51);\n    \n    float blend = 4.0;\n    \n    vec3 col = vec3(0.0);\n    float totalWeight = 0.0;\n    for (int i = 0; i < NUM_POINTS; ++i) {\n        float dist = distance(auv, pointPos[i]);\n        float weight = 1.0 / (pow(dist, blend) + 0.01);\n\n        col += pointCol[i] * weight;\n        totalWeight += weight;\n    }\n    col /= totalWeight;\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}