{"ver":"0.1","info":{"id":"Nllyzn","date":"1647450043","viewed":120,"name":"curve bones","username":"cxm","description":"part of my old website ( legacy 2019 )\nthe website include random quadratic bezier path, concat to new point, draw geometry mesh and linear maps.\nyes, can not without three.js","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["curve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float boneLen = .15;\n\nmat2  _rot1(float a) {\n  float s = sin(a), c = cos(a);\n  return mat2(c,s,-s,c);\n}\n\nfloat mExp( vec2 p1, vec2 p2, in vec2 uv ){\n    return ( uv.y - p2.y ) * ( p1.x - p2.x ) -( ( uv.x - p2.x ) * ( p1.y - p2.y ) );\n}\n\nfloat drawLine( vec2 p1, vec2 p2, in vec2 uv ){\n    float p = mExp( p1, p2, uv );\n    \n    p = smoothstep( .0, p, length( p1 - p2 ) / max( iResolution.x, iResolution.y ) );\n    \n    float lt, rt, lb, rb;\n    \n    if( p1.x - p2.x != 0. ){\n        lt = min( p1.x, p2.x );\n        rt = max( p1.x, p2.x );\n        p *= step( lt, uv.x );\n        p *= step( uv.x, rt );\n    }\n    \n    if( p1.y - p2.y != 0. ){\n        lb = min( p1.y, p2.y );\n        rb = max( p1.y, p2.y );\n        p *= step( lb, uv.y );\n        p *= step( uv.y, rb );\n    }\n\n    \n    return p;\n}\n\nvec2 quadBezier( float t, vec2 p1, vec2 p2, vec2 c1 ){\n    return pow( 1. - t, 2. ) * p1 + 2. * t * ( 1. - t ) * c1 + t * t * p2;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3( 0. );\n    \n    float p = 0.;\n\n    vec2 p1 = vec2( .2, .1 ),\n         p2 = vec2( .7, .8 ),\n         c1 = vec2( .3 + cos( iTime ) * .3, .5 + sin( iTime ) * .5 );\n    \n    \n    for( float i = 0.; i < 30.; i++ ){\n        float ii = i / 30.;\n        \n        vec2 bone = quadBezier( ii, p1, p2, c1 );\n        \n        float s = atan( c1.y + 1., c1.x );\n        \n        p += step( length( bone - vec2( uv.x, uv.y )  ), .01 ) * .7;\n        \n        float bl = boneLen / 2.;\n        float bp1 = bl / s;\n        float bp2 = sqrt( bl * bl - bp1 * bp1 );\n        \n        float dir = s > 3.14 * .5 ? 1. : -1.;\n        bp1 *= dir;\n        bp2 *= dir;\n        \n        p += drawLine( vec2( bone.x + bp1, bone.y - bp2 ), vec2( bone.x - bp1, bone.y + bp2 ), uv );\n    }\n    \n    \n    \n    col += p;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}