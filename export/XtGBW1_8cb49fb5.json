{"ver":"0.1","info":{"id":"XtGBW1","date":"1542297874","viewed":111,"name":"organic rgb shifting","username":"marcofugaro","description":"ye","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["rgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\nfloat noise (in float st) {\n\treturn noise(vec2(st));\n}\nvec2 poltocar( vec2 pol ) {\n    return vec2( pol.x * cos(pol.y), pol.x * sin(pol.y) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float time = iTime;\n    vec2 uv = fragCoord / iResolution.st;\n    vec2 displacedUv = uv;\n    vec4 imageIn = texture(iChannel1, uv);\n    vec4 feedbackIn = texture(iChannel0, uv);\n\n    // displacedUv += poltocar( vec2(length(feedbackIn.rg), length(feedbackIn.rb)) ) * 0.0005;\n    displacedUv -= poltocar( vec2(length(feedbackIn.rg), length(feedbackIn.rb)) ) * 0.0003;\n    vec4 feedbackOut = texture(iChannel0, displacedUv);\n\n    feedbackOut.r = mod(feedbackOut.r + 0.001, 1.0);\n    feedbackOut.g = mod(feedbackOut.g - 0.001, 1.0);\n    feedbackOut.b = mod(feedbackOut.b + 0.001 * noise(time), 1.0);\n    // feedbackOut.b = mod(feedbackOut.b + (feedbackOut.r / 10.0), 1.0);\n\n    if(iFrame <= 10 || iMouse.z > 0.0){\n        fragColor = imageIn;\n    } else {\n        fragColor = feedbackOut;\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}