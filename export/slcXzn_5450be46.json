{"ver":"0.1","info":{"id":"slcXzn","date":"1638583147","viewed":133,"name":"Play around with clamping","username":"AugustYadon","description":"Just tryna have some fun. Mouse X controls the shutter to compare with effect on vs off, and Mouse Y controls the intensity of the effect","likes":1,"published":1,"flags":2,"usePreview":0,"tags":["simple","hsv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//From Sam Hocevar: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// Official HSV to RGB conversion \nvec3 hsv2rgb( in vec3 c )\n{\n\n    float intensity = 20.0*iMouse.y/iResolution.y;\n    //comment this line back in to see intensity breath\n    //intensity = (10.0* ((cos(iTime)/2.0)+0.5))+1.0;\n    float hue = round(c.x*intensity)/intensity;\n    vec3 rgb = clamp( abs(mod(hue*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\treturn (round(c.z*intensity)/intensity) * mix( vec3(1.0), rgb, round(c.y*intensity)/intensity);\n}\n\n//Linear interpolation between two colors in normalized (0..1) HSV space\nvec3 lerpHSV(in vec3 a, in vec3 b, in float x)\n{\n    float hue = (mod(mod((b.x-a.x), 1.) + 1.5, 1.)-0.5)*x + a.x;\n    return vec3(hue, mix(a.yz, b.yz, x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col = texture(iChannel0,uv).rgb;\n\n   \n    ///float luminance = sqrt( 0.299*col.r*col.r + 0.587*col.g*col.g + 0.114*col.b*col.b );\n    if(uv.x > iMouse.x/iResolution.x){\n        fragColor = vec4(hsv2rgb(rgb2hsv(col)),1.0);\n\n    }\n    else{\n        fragColor = vec4(col,1.0);\n\n    }\n    // Output to screen\n    //fragColor = vec4(hsv2rgb(rgb2hsv(col)),1.0);\n}","name":"Image","description":"","type":"image"}]}