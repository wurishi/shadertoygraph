{"ver":"0.1","info":{"id":"X3BfDw","date":"1729511271","viewed":59,"name":"Playing around 742387","username":"UndrWatrTree","description":"Testing stuff","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t) {\n    vec3 a = vec3(0.251, 0.447, 0.800);\n    vec3 b = vec3(0.724, 0.011, 0.529);\n    vec3 c = vec3(1.022, 0.087, 0.169);\n    vec3 d = vec3(-0.342, 5.643, 6.166);\n \n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nfloat f1(float x){\n    return 2.0+2.0*sin(floor(x+iTime)*4321.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 1.0 - iResolution.xy) / iResolution.y;\n    \n    // Calculate distance from center (normalized UV length)\n    float d = max(sqrt(pow(8.0,2.0)-pow(uv.x,2.0)),f1(uv.x));\n    // Use d in the palette function to get a base color\n    vec3 col = palette(d);\n    \n    // Modify d over time using sine function, scale and take the absolute value\n    d = sin(d * 8.0 + iTime) / 8.0;\n    d = abs(fract(d));\n    \n    // Further scale the value of d\n    d = 0.02 / d;\n    \n    // Apply the scaling factor to the color\n    col *= d;\n    \n    // Output the final color to the screen with an alpha value of 1.0\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}