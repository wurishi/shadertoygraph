{"ver":"0.1","info":{"id":"Nl3BRN","date":"1662711040","viewed":95,"name":"Hash uint2 to color","username":"M_cgode","description":"A basic hashing algorithm to generate a color from two input uints. \nCould be perfected as you can see a pattern appearing.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["color","hash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pixelScale = 1.0 / 8.0;\n\n// https://stackoverflow.com/a/892640\nuint hashUint2(uvec2 value)\n{\n    uint hash = 23u;\n    hash = hash * 31u + value.x;\n    hash = hash * 31u + value.y;\n    return hash;\n}\n\n// https://stackoverflow.com/a/3887197\nuint hashRemap(uint hash)\n{\n    uint h = (hash << 15u) ^ 0xffffcd7du;\n    h ^= (h >> 10);\n    h += (h << 3);\n    h ^= (h >> 6);\n    h += (h << 2) + (h << 14);\n    return (h ^ (h >> 16));\n}\n\nvec3 uintToColor(uint x)\n{\n    return vec3(\n        float((x >> 0u) & 0xffu) / 255.0,\n        float((x >> 8u) & 0xffu) / 255.0,\n        float((x >> 16u) & 0xffu) / 255.0\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uvec2 coords = uvec2(fragCoord * pixelScale);\n    \n    uint hash = hashUint2(coords);\n    hash = hashRemap(hash);\n\n    // Output to screen\n    fragColor = vec4(uintToColor(hash),1.0);\n}","name":"Image","description":"","type":"image"}]}