{"ver":"0.1","info":{"id":"4fjSWD","date":"1710016351","viewed":79,"name":"Chapman Flare 1 pass","username":"IAMDEAD","description":"123123","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["123123"],"hasliked":0,"parentid":"XfSXDD","parentname":"chapman simple"},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 mainImageA(vec2 uv)\n{\n\tuv *= vec2(iResolution.x, iResolution.y);\n    uv /= max(iResolution.x, iResolution.y);\n    vec2 circle_pos = iMouse.xy / iResolution.xy;\n  \tcircle_pos *= vec2(iResolution.x, iResolution.y);\n    circle_pos /= max(iResolution.x, iResolution.y);  \n    float circle = smoothstep(0.025, 0.0, distance(uv, circle_pos));\n\n    return vec4(circle * vec3(1.0,0.656,0.3),1.0);\n}\n\nfloat generate_starburst(vec2 uv)\n{\n    uv -= vec2(0.5);\n    uv *= vec2(iResolution.x /iResolution.y, 1.0).xy;\n\tfloat angle = atan(uv.y / uv.x);\n\tvec2 sb_uv = vec2(cos(angle), sin(angle)) / 3.14;\n    float sb_tex = texture(iChannel0, sb_uv * 64.).x;\n    return smoothstep(0.0, sb_tex, length(uv / 4.)) * length(uv / 2.); //soften it a little bit\n}\n\n//generate ghosts n shit\nvec3 generate_ghosts(vec2 uv)\n{\n    //Draw multiple 'ghosts'\n    vec3 accumulated_ghosts = vec3(0.0);\n    {\n        uv = 1.0 - uv;\n        vec2 ghostVec = (vec2(0.5) - uv) * uGhostSpacing;\n\n        for (int i = 0; i < uGhostCount; ++i) \n        {\n            vec2 suv = fract(uv + ghostVec * vec2(i));\n            float ghost_intensity = float(i) / float(uGhostCount);\n            ghost_intensity = pow(ghost_intensity, 2.0); //so each subsequent ghost has different intensity\n            float d = distance(suv, vec2(0.5));\n            float weight = 1.0 - smoothstep(0.0, 0.75, d);\n            accumulated_ghosts += mainImageA(suv).xyz * weight;\n        }\n    }\n    \n    //Create simple halo\n    vec3 accumulated_halo = vec3(0.0);\n    {\n        vec2 haloVec = vec2(0.5) - uv;\n        haloVec.x /= iResolution.y / iResolution.x;\n        haloVec = normalize(haloVec);\n        haloVec.x *= iResolution.y / iResolution.x;\n        vec2 wuv = (uv - vec2(0.5, 0.0)) / vec2(iResolution.y / iResolution.x, 1.0) + vec2(0.5, 0.0);\n        float d = distance(wuv, vec2(0.5));\n        float haloWeight = Window_Cubic(d, uHaloRadius, uHaloThickness); // cubic window function\n        haloVec *= uHaloRadius;\n        accumulated_halo += mainImageA(uv + haloVec).xyz * haloWeight;\n        \n        //add starburst\n        accumulated_halo *= generate_starburst(uv);\n    }\n\n\n    //Add all shit together\n    return (accumulated_ghosts + accumulated_halo);\n}\n\nvec4 mainImageB(vec2 uv)\n{\n    vec3 col = generate_ghosts(uv);\n    return vec4(col,1.0);\n}\n\nvec4 mainImageC(vec2 uv)\n{\n    float ca_offset = distance(uv, vec2(0.5)) * 0.0085;\n    vec3 col;\n    col.x = mainImageB(uv + ca_offset).x;\n    col.y = mainImageB(uv).y;\n    col.z = mainImageB(uv - ca_offset).z;\n \n    return vec4(col,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = mainImageA(uv).xyz * 25.0;\n \n    vec3 lf_col = mainImageC(uv).xyz ; \n    col += lf_col;\n   \n    col /= 1.0 + col;\n    col = pow(col, vec3(0.5));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define uGhostCount 6\n#define uGhostSpacing 0.35\n#define uGhostThreshold 0.7\n#define uHaloRadius 0.65\n#define uHaloThickness 0.3\n\nfloat Window_Cubic(float _x, float _center, float _radius)\n{\n    _x = min(abs(_x - _center) / _radius, 1.0);\n    return 1.0 - _x * _x * (3.0 - 2.0 * _x);\n}\n","name":"Common","description":"","type":"common"}]}