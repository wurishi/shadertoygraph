{"ver":"0.1","info":{"id":"ft33Rf","date":"1636409749","viewed":117,"name":"Grid sampling topology errors","username":"kastorp","description":"Trying to visualize when sampling a function, and then interpolating it, produces wrong topology\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Quick demonstration on how sampling function values on a grid introduces topology errors \n// The example is with bilinear interpolation, but the same would happen with marching squares ( or marching cubes in 3d)\n//  - red: a generic iso function\n//  - blue (left side): bilinear interpolation \n//  - green (right side): bilinear interpolation (keeping just topology with 2^4=16 cases)\n// The topology errors seem to occur when:\n//   - the function crosses a square side more than once\n//   - the square contains an island or an hole (ie: function not crossing any side)\n//   - the square contains a manifold ( 4 intersections, one at each side);in this case errore probability is 50%\n\n#define R iResolution.xy\nfloat S(vec2 uv){return (texture(iChannel0,uv/6.).x);}\nfloat T(vec2 uv){return floor(texture(iChannel0,uv/6.).x+.5);}\n#define SAMPLE(fn) vec4( fn(floor(uv*z)/z), fn(floor(uv*z+vec2(1,0))/z), fn(floor(uv*z+vec2(0,1))/z), fn(floor(uv*z+vec2(1,1))/z));\n#define INTERP(fn) mix(mix(fn.x,fn.y,fract(uv.x*z)),mix(fn.z,fn.w,fract(uv.x*z)),fract(uv.y*z)))\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 uv = U/R.y;\n    float z = 25. + sin(iTime*.1)*15.;\n    vec3 col=vec3(T(uv),0,0)/20./abs(.5-texture(iChannel0,uv/6.).x);\n    col=mix(vec3(1),col,smoothstep(0.,.005*z, length(.5- fract(uv*z-.5))));\n\n    vec4 f=SAMPLE(T);\n    vec4 g=SAMPLE(S);\n   \n    if(uv.x>.5*R.x/R.y) col.g=(floor(.5+INTERP(f));\n    else col.b=(floor(.5 +INTERP(g));\n\n    O = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}