{"ver":"0.1","info":{"id":"wty3z1","date":"1578274490","viewed":74,"name":"Triangulo-falsov1","username":"jorge2017a1","description":"Usar el Mouse!!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["triangulofalsov1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define PI 3.14159265358979323846264\n\n\n#define PI2 6.28318530717\n\n\nconst int CInf = 1;\nconst int CSup = 2;\nconst int CDer = 3;\nconst int CIzq = 4;\nconst int CAtras = 5;\nconst int CPlane = 6;\nconst int CLight = 7;\nconst int CSky = 8;\nconst int CPlane2 =9;\n//------------------------------------\n\n#define CR00 -0.5\n#define CR01 1.5\n#define CR02 -1.5\n#define CR03 0.5\n#define CR10 1.0\n#define CR11 -2.5\n#define CR12 2.0\n#define CR13 -0.5\n#define CR20 -0.5\n#define CR21 0.0\n#define CR22 0.5\n#define CR23 0.1\n#define CR30 0.3\n#define CR31 1.0\n#define CR32 0.2\n#define CR33 0.1\n\n#define PALE_BLUE vec3(0.25,0.25,0.35)\n#define MEDIUM_BLUE vec3(0.10,0.10,0.30)\n#define DARK_BLUE vec3(0.05,0.05,0.26)\n#define DARKER_BLUE vec3(0.03,0.03,0.20)\n\n///------------------------------------\nstruct TObj\n{\n    float tipo;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n};\n    \n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\n\n//Torus function\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n//Sphere function\nfloat sdSphere( vec3 p, float s1 )\n{\n   vec4 s = vec4(0, s1, 9, s1);\n   return  length(p-s.xyz)-s.w;   \n}\n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n//Triprism function\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n//Cone function\nfloat sdCone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\n\n///por Iq\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n  const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n  p = abs(p);\n  p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n  vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n///--------------------------------------------\n\nfloat sdOctahedron(vec3 p, float s)\n{\n    p = abs(p);\n    float m = p.x + p.y + p.z - s;\n\n    // exact distance\n    #if 0\n    \tvec3 o = min(3.0*p - m, 0.0);\n    \to = max(6.0*p - m*2.0 - o*3.0 + (o.x+o.y+o.z), 0.0);\n    \treturn length(p - s*o/(o.x+o.y+o.z));\n    #endif\n    \n    // exact distance\n    #if 1\n \t\tvec3 q;\n         if( 3.0*p.x < m ) q = p.xyz;\n    \telse if( 3.0*p.y < m ) q = p.yzx;\n    \telse if( 3.0*p.z < m ) q = p.zxy;\n        \n    else return m*0.57735027;\n        float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n        return length(vec3(q.x,q.y-s+k,q.z-k)); \n    #endif\n    \n    // bound, not exact\n    #if 0\n\t\treturn m*0.57735027;\n    #endif\n}\n\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\n\nvec2 opU(vec2 d1, vec2 d2 ) {\n  vec2 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n\nvec3 rotate_y(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t+ca, +.0, -sa,\n\t\t+.0,+1.0, +.0,\n\t\t+sa, +.0, +ca);\n}\n\nvec3 rotate_x(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t+1.0, +.0, +.0,\n\t\t+.0, +ca, -sa,\n\t\t+.0, +sa, +ca);\n}\n\n///---------------------------------------------\n\n//IQs noise\nfloat noise(vec3 rp) {\n    vec3 ip = floor(rp);\n    rp -= ip; \n    vec3 s = vec3(7, 157, 113);\n    vec4 h = vec4(0.0, s.yz, s.y + s.z) + dot(ip, s);\n    rp = rp * rp * (3.0 - 2.0 * rp); \n    h = mix(fract(sin(h) * 43758.5), fract(sin(h + s.x) * 43758.5), rp.x);\n    h.xy = mix(h.xz, h.yw, rp.y);\n    return mix(h.x, h.y, rp.z); \n}\n///----------------------\nfloat floorTex(vec3 rp) {\n    rp.x += iTime * -2.0;\n    vec2 m = mod(rp.xz, 4.0) - 2.0;\n    if (m.x * m.y > 0.0) {\n        return 0.8 + noise(rp * 4.0) * 0.16;\n    }\n    return 0.2 + noise((rp + 0.3) * 3.0) * 0.1;\n}\n///-----------------------------------------\nfloat random() \n{\n\treturn fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453);\n}\n\n\n// We use it for ray scattering.\nvec3 randomUnitVector() \n{\n\tfloat theta = random() * PI2;\n    float z = random() * 2.0 - 1.0;\n    float a = sqrt(1.0 - z * z);\n    vec3 vector = vec3(a * cos(theta), a * sin(theta), z);\n    return vector * sqrt(random());\n}\n///-----------------------------------------\n\n\nvec3 getSphereColor(int i)\n{\n    \n    float m;\n        \n\tswitch(i)\n    {\n    case 0:\n        return vec3(85./255., 205./255., 252./255.);\n    case 1:\n        //return vec3(247./255., 168./255.,  184./255.);\n        return vec3(1, 0.5, 0);\n    case 2:\n        return vec3(1.0, 1.0, 1.0);\n    case 3:\n        return vec3(247./255., 168./255.,  184./255.); \n    case 4:\n        //return vec3(85./255., 205./255., 252./255.);\n        return vec3(0, 1, 1);\n        \n    case 5:\n        return vec3(85./255., 205./255., 252./255.);\n    case 6:\n        //return vec3(247./255., 168./255.,  184./255.);\n        return  vec3(0.5, 0.8, 0.9);\n        \n    case 7:\n        return vec3(1.0, 1.0, 1.0);\n    case 8:\n        //return vec3(247./255., 168./255.,  184./255.); \n        //return vec3(55./255., 30./255.,  255./255.); \n        return vec3(0.425, 0.56, 0.9); \n    case 9:\n        //return vec3(85./255., 205./255., 252./255.); \n        return vec3(0.5, 0.6, 0.6); \n    case 10:\n        return vec3(0.0, 1.0, 0.0);\n    \n     case 12:\n        vec3 tmp;\n        tmp =glpRoRd;\n        \n        tmp=rotate_x(tmp,90.0);\n        \n        return  vec3(0.8, 1.0, 0.4) * floorTex(tmp); \n     case 13:\n        float d = 0.0;\n\t\t\t// checkerboard function that returns 0 or 1\n\t\t\td = mod(floor(glpRoRd.x)+floor(glpRoRd.z),2.0);\n\t\t\t// vary between red (0) and yellow (1)\n\t\treturn vec3(0.8 + 0.1*d, 0.3 + 0.55*d, 0.15 - 0.1*d)*0.8;\n     case 14:\n        \t// checkerboard hack\n\t\t\tvec2 cb = floor(glpRoRd.xz);\n\t\t\tfloat cb2 = mod(cb.x + cb.y, 2.0);\n        \treturn vec3(0.4 + 0.1*cb2, 0.3 + 0.85*cb2, 0.35 - 0.1*cb2)*0.8;\n        \n    } \n}\n//-------------------------------------------------\n\n// Create infinite copies of an object -  https://iquilezles.org/articles/distfunctions\nvec2 opRep( in vec2 p, in float s )\n{\n    return mod(p+s*0.5,s)-s*0.5;\n}\n\n\nfloat trianguloFalso(vec3 p, vec3 pos, float alto )\n{\n    float sdh1= sdOctahedron( p-pos,alto);\n\tfloat plane= dot(p-pos,normalize(vec3(0.,1.,0.)));  //plano xz\n    return differenceSDF(sdh1,plane);\n}   \n    \nfloat GetDist(vec3 p  ) {\t\n\n \t\n    \n    float d;\n    float dif1;\n    float dif2;\n    \n    d=999.9;\n    float planeDist = p.y;\n    \n   vec3 pp;\n    pp=p;\n    \n \n    \n    vec2 res;\n    res = vec2(9999, 0);\n    \n    \n    \n     if (res.x < planeDist)\n      { res.x = res.x;     \t} \n    else\n        { \n          res.x = planeDist;\n        if (planeDist > 0.5 )\n          { res=vec2(res.x,CSky); }\n        else\n         { \n            //res=vec2(res.x, CPlane2);\n             res=vec2(res.x, 11);\n    \n         } \n     } \n    \n    \n    float sdt1= trianguloFalso( p, vec3(5,0.,-3.0), 2.5 );\n    float sdt2= trianguloFalso( p, vec3(-5,0.,-5.0), 5. );\n    float sdt3= trianguloFalso( p, vec3(15,0.,-3.0), 8. );\n    float sdt4= trianguloFalso( p, vec3(5,0.,8.0), 5. );\n    \n    vec3 pr= rotate_y(p, iTime);\n    float sdt5= trianguloFalso( pr, vec3(0.0,4.0,0), 2.5 );\n    \n    res=opU(res, vec2(sdt1,6));\n    res=opU(res, vec2(sdt2,7));\n    res=opU(res, vec2(sdt3,8));\n    res=opU(res, vec2(sdt4,10));\n    res=opU(res, vec2(sdt5,11));\n    \n    \n    \n    d = res.x;\n    mObj.dist = res.x;\n    mObj.tipo = res.y;\n        \n    return d;\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n\tfloat dO=0.2;\n    //Determines size of shadow\n    \n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tvec3 p = ro + rd*dO;\n        \n        float dS = GetDist(p);\n        \n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) \n        {\n            gres2 = vec2(dO,dS); \n            break;\n    \t}    \n       \n        \n\t\t\n        \n    }\n    \n    return dO;\n}\n\nvec3 render(in vec3 ro, in vec3 rd)\n{\n    vec2 res = gres2; //RayMarch(ro,rd);\n    vec3 Ambient= vec3(0.1,0.1,0.1);\n         \n    float t = res.x;\n\tfloat m = res.y;\n    \n    if (mObj.tipo==12.0 )\n     { return  getSphereColor(int( mObj.tipo)) ; }\n    \n    vec3 pos = ro + t * rd;\n    vec3 normal = vec3(0,0,0);\n    vec3 col = vec3(0,0,0); \n    \n    \n    return col;\n}\n\n\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    //Determine movement of light ex. shadow and light direction and diffusion\n    lightPos.xz += vec2(sin(iTime), cos(iTime)*2.);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\nfloat GetLightv2(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    //Determine movement of light ex. shadow and light direction and diffusion\n    lightPos.xz += vec2(1, 2);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\nfloat saturate(float f)\n{\n\treturn clamp(f,0.0,1.0);\n}\n\nvec3 calcLuz(vec3 p, vec3 origin, vec3 l, vec3 n )\n{\n    \n    vec3 idiffuse=vec3(0.8);\n    vec3 ispecular=vec3(0.7);\n    vec3 lightcolor=vec3(0.7,0.8,0.5);\n    \n    vec3 v = normalize(origin-p);\n\tvec3 h = normalize(l+v);\n\tfloat NdotL = saturate(dot(n,l));\n\tfloat NdotH = saturate(dot(n,h));\n\tvec3 diffuse = NdotL*idiffuse;\n\tvec3 spec = 0.18 * pow(NdotH,40.0) * ispecular;\n\tvec3 color;\n\t\n    color = (diffuse+spec) * lightcolor;\n    return  color;\n}\n    \n\n//----------------------------------------------------\n\n// Single rotation function - return matrix\nmat2 r2(float a){ \n  float c = cos(a); float s = sin(a); \n  return mat2(c, s, -s, c); \n}\n//--------------------\n\n// iMouse pos function - take in a vec3 like ro\n// simple pan and tilt and return that vec3\nvec3 get_mouse(vec3 ro) {\n    float x = iMouse.xy==vec2(0) ? -.2 :\n    \t(iMouse.y / iResolution.y * .5 - 0.25) * PI;\n    float y = iMouse.xy==vec2(0) ? .0 :\n    \t-(iMouse.x / iResolution.x * 1.0 - .5) * PI;\n    float z = 0.0;\n\n    ro.zy *= r2(x);\n    ro.zx *= r2(y);\n    \n    return ro;\n}\n\n//----------------------------------------------------\n\nfloat max3(float a, float b, float c)//returns the maximum of 3 values\n{\n\treturn max(a,max(b,c));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    \n   \n     vec2 pp = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    float an = 10.*iMouse.x/iResolution.x;\n    float yt = iTime *1.2; // 5.*iMouse.y/iResolution.y;\n    float zoom = 2.15;\n    \n    \n    vec3 ta = vec3(5.,1.95,-10.);\n    \n    vec3 ro = vec3(-5.,2.5,10.);\n    \n    \n\tro = get_mouse(ro);\n    \n    vec3 ww = normalize( ta - ro);\n    vec3 uu = normalize( cross(ww,vec3(0.,1.,0.)));\n    vec3 vv = normalize( cross(uu,ww));\n    \n    vec3 rd = normalize( pp.x*uu + pp.y*vv + 1.8*ww );\n    \n  \n    \n    vec3 col = vec3(0);\n  \n    \n    TObj Obj;\n    \n   \n    \n    vec3 rLuz=vec3(0.5, 3.5, 4.5);\n    vec3 rLuz3=vec3(5.5, 1.5, -4.5);\n    \n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    \n  \n    \n    vec3 p = (ro + rd * d ); \n    glpRoRd=p;\n    vec3 pluz=(rLuz + rd * d );\n    vec3 pluz3=(rLuz3 + rd * d );\n    \n    \n    \n    \n    float dif = GetLight(p);\n    \n    float dif2 = abs(1.0- GetLightv2(pluz));\n    float dif3 = abs(1.0- GetLightv2(pluz3));\n    \n    vec3 colobj;\n    \n    \n    colobj=getSphereColor(int( Obj.tipo));\n   \n    dif=(dif+dif2)/2.5;\n    \n   \n    col =  ( vec3(dif)+colobj)/2.5;\n    \n    \n    fragColor = vec4(col,1.0);\n    //Background color is white\n}\n","name":"Image","description":"","type":"image"}]}