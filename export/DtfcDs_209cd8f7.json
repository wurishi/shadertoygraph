{"ver":"0.1","info":{"id":"DtfcDs","date":"1691325872","viewed":180,"name":"Infrastructure 0x00","username":"newbie2718","description":"Infrastructure 0x00","likes":22,"published":1,"flags":32,"usePreview":0,"tags":["abstract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int SAMPLE  = 8;\nconst float RGB_OFFSET = 0.0015;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 cuv = uv-0.5;\n    vec3 color = vec3(0.0);\n    \n    /*\n        \"green-pink blur\" from XT95 (modified by newbie2718):\n        https://github.com/XT95/VisualLiveSystem/blob/master/release/data/postFX/green-pink%20blur.glsl\n\n        The MIT License (MIT)\n\n        Copyright (c) 2015 XT95\n\n        Permission is hereby granted, free of charge, to any person obtaining a copy\n        of this software and associated documentation files (the \"Software\"), to deal\n        in the Software without restriction, including without limitation the rights\n        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n        copies of the Software, and to permit persons to whom the Software is\n        furnished to do so, subject to the following conditions:\n\n        The above copyright notice and this permission notice shall be included in all\n        copies or substantial portions of the Software.\n\n        THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n        SOFTWARE.\n        \n        ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    */\n    {\n        float len = length(cuv);\n        vec2 offset = cuv/len*pow(len, 4.0)*0.03;\n        for(int i = 0; i < SAMPLE; ++i)\n        {\n            color.r += texture(iChannel0, uv+offset*float(i)+RGB_OFFSET).r;\n            color.g += texture(iChannel0, uv+offset*float(i)).g;\n            color.b += texture(iChannel0, uv+offset*float(i)-RGB_OFFSET).b;\n        }\n        color /= float(SAMPLE);\n    }\n    \n    // post effect\n    color *= step(abs(uv.y*2.0-1.0), 0.8);\n    color *= pow(1.0-length(uv-0.5), 2.0);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float PI = acos(-1.0);\nconst float TWO_PI = PI*2.0;\nconst float UV_SCALE = 15.0;\nconst float EPS = 0.05;\n\nfloat random(float seed)\n{\n    return fract(mod(sin(dot(seed, 12.9898)), TWO_PI)*43758.5453);\n}\nfloat random(vec2 seed)\n{\n    return fract(mod(sin(dot(seed, vec2(12.9898, 78.233))), TWO_PI)*43758.5453);\n}\n\nvec3 calc_celluv(float suv)\n{\n    // cell id\n    float id = floor(suv);\n    float id_prev = id-1.0;\n    float id_prev_prev = id_prev-1.0;\n    \n    // Get cell-based random value.\n    float offset = random(id);\n    float offset_prev = random(id_prev);\n    float offset_prev_prev = random(id_prev_prev);\n   \n    float fuv = fract(suv);\n   \n    // Is this pixel in the first half of the cell.\n    float isFirst = step(fuv, offset_prev);\n    \n    // Calculate the cell's length.\n    float elem1 = 1.0 - mix(offset_prev, offset_prev_prev, isFirst);\n    float elem2 = mix(offset, offset_prev, isFirst);\n    float len = elem1+elem2;\n    \n    // cell local uv\n    float celluv = mix((fuv-offset_prev)/len, (elem1+fuv)/len, isFirst);\n    \n    return vec3(celluv, len, isFirst);\n}\nvec2 rotate(vec2 uv, float rad)\n{\n    float s = sin(rad);\n    float c = cos(rad);\n    return vec2(uv.x*c-uv.y*s, uv.x*s+uv.y*c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    // uv\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/min(iResolution.x, iResolution.y);\n    uv.y += sin(PI*0.5 + iTime*0.07);\n    uv = rotate(uv, -0.5);\n    uv.x += abs(uv.y)*0.5;\n    uv.x += iTime*0.07;\n    \n    // celluv.x\n    float suvx = uv.x*UV_SCALE;\n    vec3 result_x = calc_celluv(suvx);\n\n    // celluv.y\n    float r = random(floor(suvx)-result_x.z);\n    float r_scale = 1.0+floor(r*10.0);\n    float r_offset = r*1234.5678+iTime*(1.0+random(r))*0.2*mix(1.0, -1.0, step(0.5, r));\n    vec3 result_y = calc_celluv((uv.y/r_scale-r_offset)*UV_SCALE);\n    \n    // celluv\n    vec2 celllen = vec2(result_x.y, result_y.y*r_scale);\n    vec2 celluv = (vec2(result_x.x, result_y.x)*celllen*2.0-celllen)/min(celllen.x, celllen.y);\n    \n    // object\n    vec2 packet_len = celllen*0.65;\n    vec2 packet = smoothstep(celluv, celluv+EPS, packet_len)*smoothstep(-packet_len, -packet_len+EPS, celluv);\n   \n    vec3 color = vec3(packet.x*packet.y);\n    \n    // shading\n    {\n        float auvy = abs(uv.y);\n        \n        // highlight\n        vec2 luv = fragCoord.xy/iResolution.xy;\n        float highlight = pow(max(0.0, 1.0-auvy), 2.0+(1.0-luv.x)*20.0)*0.7;\n        color += highlight;\n        \n        // shadow\n        float depth = 3.0;\n        float shadow = mix(1.0, pow((depth-auvy)/depth, 3.0), step(uv.y, 0.0));\n        color *= shadow;\n    }\n    \n    fragColor = vec4(color,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}