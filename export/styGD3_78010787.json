{"ver":"0.1","info":{"id":"styGD3","date":"1638417193","viewed":80,"name":"Learning to Plot","username":"sbrown2","description":"just me plotting functions in shader, book of shaders","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["plotting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//plot takes a uv y point and a y defined using f(x) and we return their distance\nfloat plot(float space_y, float point_y){\n    return (smoothstep(space_y-.03,space_y,point_y)-smoothstep(space_y,space_y+.03,point_y));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xy;\n    uv*=iResolution.x/iResolution.y;\n    float x = uv.x;\n    float y = pow(x,2.);\n    float x2 = uv.x;\n    float y2 = sin(x);\n    //if x = y (or if pixel matches plot) color\n    float f = plot(uv.y,y);\n    float f2 = plot(uv.y,y2);\n    // Time varying pixel color\n    vec3 col = .5+0.5*cos(uv.xyx+mod(iTime,3.)*vec3(0,2,4));\n    col+=vec3(f);\n    col+=vec3(f2);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}