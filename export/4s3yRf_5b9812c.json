{"ver":"0.1","info":{"id":"4s3yRf","date":"1519665046","viewed":903,"name":"Strange cosine/sine fractal","username":"Fra32","description":"An interesting recursive function I discovered by coincidence while testing a java program I once wrote. How the mandelbrot fractal appears in here is still a mystery to me. FIXED the black noise issue","likes":6,"published":3,"flags":16,"usePreview":0,"tags":["fractal","mandelbrot","sine","cosine","complexnumbers","complexfunction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Use the mouse to move the origin. Press the down key to zoom in\n\nint view = 0; //0 for function view, 1 for iterative view\n\n/*\nThis fractal appears to be the result of taking the mandelbrot cardioid and somewhat unwrapping it from an epicycloid to a \nnormal cycloid on a rectangular strip, despite consisting entirely of trigometric functions instead of power functions like in the\noriginal fractal. The correlation is very easily visible, not just because of the countless satelite-like structures, but also\nthe periods in which the roots appear inside the cusps, following the same pattern as in the original fractal, namely with the largest\ncusp having period 2, period doubling as you go over to the cusps on a previous cusp, and the calculation of the periods as the\nsum of the 2 largest neighboring cusps.\n\n\n*/\n\nfloat pi = radians(180.);\n\n#define key(k)  texelFetch(iChannel0,ivec2(k,0),0).x\n\nvec3 hue(float h) {\n\tvec3 c = mod(h*6.0 + vec3(2, 0, 4), 6.0);\n\treturn h > 1.0 ? vec3(0.5) : clamp(min(c, -c+4.0), 0.0, 1.0);\n}\n\nfloat arg(vec2 p){\n    float arg = acos(clamp(dot(normalize(p),vec2(1,0)),-1.,1.));\n    if(p.y<0.) arg=-arg;\n    if(length(p)==0.)arg = 0.;\n    return arg;\n}\n\nvec2 timesc(vec2 a, vec2 b){\n    float arg1 = arg(a);\n    float arg2 = arg(b);\n    return vec2(cos(arg1+arg2),sin(arg1+arg2))*length(a)*length(b);\n}\nvec2 divc(vec2 a, vec2 b){\n    float arg1 = arg(a);\n    float arg2 = arg(b);\n    return vec2(cos(arg1-arg2),sin(arg1-arg2))*length(a)/length(b);\n}\nvec2 invc(vec2 c){\n\tfloat len = dot(c,c);\n    return vec2(c.x,-c.y)/len;\n    \n}\nvec2 expc(vec2 c){\n    return exp(c.x)*vec2(cos(c.y),sin(c.y));   \n}\nvec2 sinc(vec2 c){\n    vec2 a = expc(timesc(c,vec2(0,1)));\n    vec2 b = invc(a);\n    return divc((a-b),vec2(0,2));\n}\nvec2 cosc(vec2 c){\n    vec2 a = expc(timesc(c,vec2(0,1)));\n    vec2 b = invc(a);\n    return divc((a+b),vec2(2,0));\n}\n\nvec3 fractal(vec2 p){\n    float t = iTime/4.*float(1+view);\n    vec2 p2 = vec2(0);\n    int i;\n    for(i=0;i<int(iTime/4.);i++){\n    \tp2 = timesc(sinc(p),cosc(p2)); // Xn+1 = cos(Xn)*sin(c); X0 = 0\n        if(view==1&&dot(p2,p2)>100.)break;\n    }\n    vec3 col = vec3(0);\n    if(view == 0){\n    \tp = timesc(sinc(p),cosc(p2));\n   \t\tp2 = mix(p2,p,clamp(fract(iTime/4.),0.,.5)*2.);\n    \tfloat ang = arg(p2);\n    \tfloat len = length(p2);\n    \tcol = hue(ang/(2.*pi))*(1./(1.+len));\n    }else{\n        col = hue(fract(float(i)/20.));\n        if(i==int(iTime/4.)) col = vec3(0);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = 1.;\n\tif(key(40)==1.)\n    zoom *= 4.;\n    vec2 uv = ((fragCoord-iResolution.xy/2.)/zoom-iMouse.xy+iResolution.xy/2.)/iResolution.x*8.;\n\tif(iMouse.xy==vec2(0,0))\n        uv = (fragCoord-iResolution.xy/2.)/iResolution.x*8.;\n    vec3 col = fractal(uv);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}