{"ver":"0.1","info":{"id":"ldcfRs","date":"1527446449","viewed":90,"name":"testBuffer","username":"goanautix","description":"save data in buffer","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["buffertest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // get bufferA\n    vec3 col = texelFetch(iChannel1,ivec2(uv*3.0)+1,0).rgb;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// W 87\n#define wKey (texelFetch(iChannel0,ivec2(87,0),0).x)\n// A 65\n#define aKey (texelFetch(iChannel0,ivec2(65,0),0).x)\n// S 83\n#define sKey (texelFetch(iChannel0,ivec2(83,0),0).x)\n// D 68\n#define dKey (texelFetch(iChannel0,ivec2(68,0),0).x)\n//------------------------------------------------------------------------------------------\nmat3 view(vec3 eye, vec3 up, vec3 center){\n\tvec3 f = normalize(center - eye);\n    vec3 s = cross(f, up);\n    vec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\n//------------------------------------------------------------------------------------------\n\nvoid save (in ivec2 saveCoord, in vec3 value,inout vec4 fc){\n    if(int(gl_FragCoord.x)==saveCoord.x && int(gl_FragCoord.y)==saveCoord.y){\n    \tfc.xyz  = value;\n    }\n}\nvoid load (in ivec2 saveCoord, inout vec4 fc){\n    if(int(gl_FragCoord.x)==saveCoord.x && int(gl_FragCoord.y)==saveCoord.y){\n    \tfc.xyzw = texelFetch(iChannel1,saveCoord,0);\n    }\n}\nvec3 load (in ivec2 saveCoord){\n    if(int(gl_FragCoord.x)==saveCoord.x && int(gl_FragCoord.y)==saveCoord.y){\n    \treturn texelFetch(iChannel1,saveCoord,0).xyz;\n    }\n}\n//------------------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // load default if fram = 0\n    if(iFrame<=0){\n        save(camPCoord,vec3(0.0,0.0,0.0),fragColor);\n        mat3 viewMat = view(vec3(10.0,5.0,0.0),vec3(0.0,1.0,0.0),vec3(0.0,0.0,0.0));\n        save(viewMatx,viewMat[0].xyz,fragColor);\n    \tsave(viewMaty,viewMat[1].xyz,fragColor);\n    \tsave(viewMatz,viewMat[2].xyz,fragColor);\n    }else{\n        // load\n        vec2 uv = gl_FragCoord.xy/iResolution.xy;\n        load(camPCoord,fragColor);\n        //load(viewMatx,fragColor);\n        //load(viewMaty,fragColor);\n        //load(viewMatz,fragColor);\n        \n        // mouse input\n        vec2 mouse = iMouse.xy/iResolution.xy;\n        // center = 0 ; x = -270째 - +270째 ; y = -90째 - +90째\n        mouse = (mouse-0.5)*vec2(-TAU-PI,PI);\n        // rotation matix\n        mat3 ry = rY(mouse.x);\n        vec3 mXZ = (vec3(0.0,0.0,1.0)*ry);\n        mat3 rx\t= rX(mouse.y*mXZ.x);\n        mat3 rz\t= rZ(mouse.y*mXZ.z);\n        // key input\n        vec3 keys = vec3(wKey-sKey, 0.0, dKey-aKey)*ry;\n        keys *= rz*rx;\n        // get cam position - keys\n        vec3 ro = load(camPCoord)-keys;\n        // get center in front of cam position\n        vec3 center = ro + vec3(1.0,0.0,0.0); \n\t\t// create view Matrix\n        mat3 viewMat = view(ro,vec3(0.0,1.0,0.0),center)*ry*rz*rx;\n\n    \t// save values\n     \tsave(camPCoord,ro,fragColor);\n        save(viewMatx,viewMat[0].xyz,fragColor);\n    \tsave(viewMaty,viewMat[1].xyz,fragColor);\n    \tsave(viewMatz,viewMat[2].xyz,fragColor);\n    }\n    \n    \n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float PI = 3.14159265;\nconst float PIH = 1.57079633;\nconst float TAU = 6.28318531;\nconst float TAU10 = 62.8318531;\n\nconst ivec2 camPCoord = ivec2(1,1);\nconst ivec2 camCCoord = ivec2(1,2);\nconst ivec2 viewMatx  = ivec2(2,1);\nconst ivec2 viewMaty  = ivec2(2,2);\nconst ivec2 viewMatz  = ivec2(2,3);\n//-ROTATION---------------------------------------------------------------------------------\nmat3 rX(float a){\n    vec2 cs = vec2(cos(a),sin(a));\n \treturn mat3( vec3(1.0,0.0,0.0), vec3(0.0,cs.x,cs.y), vec3(0.0,-cs.y,cs.x));\n}\nmat3 rY(float a){\n    vec2 cs = vec2(cos(a),sin(a));\n \treturn mat3( vec3(cs.x,0.0,cs.y), vec3(0.0,1.0,0.0), vec3(-cs.y,0.0,cs.x));\n}\nmat3 rZ(float a){\n    vec2 cs = vec2(cos(a),sin(a));\n \treturn mat3( vec3(cs.x,cs.y,0.0), vec3(-cs.y,cs.x,0.0), vec3(0.0,0.0,1.0));\n}","name":"Common","description":"","type":"common"}]}