{"ver":"0.1","info":{"id":"4lSyRK","date":"1509083305","viewed":145,"name":"PAD Tutorial 03","username":"dpadrial","description":"a","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    // 【画面上の座標の求め方】\n    // 最初のチュートリアル項目で記載しましたが、\n    // ピクセルシェーダーは画面上の各ピクセルに対して処理内容が実行されます.\n    // \n    // このため、画面上の座標を求めることで指定位置に任意の色を表示させることが可能です。\n    // 画面上の座標は2次元テクスチャ座標で表現され、u,vの2次元ベクトルの型となります.\n    // * テクスチャ座標には1次元(u)や3次元(uvw)のものも存在しますが、ここでは割愛.\n    // \n    // 画面上の座標は最小値を0、最大値を1と定め、中央が(0.5, 0.5)となります.\n    // 規約として左下を0.0、右上を1.0と正規化することで異なる画面サイズに対応します.\n    //\n    // 座標の求め方は下記の式となります.\n    // fragCoord はスクリーン座標と呼ばれる描画座標.\n    // iResolution は画面解像度となります\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // 計算した画面座標を利用することで、デカルト座標の4象限みたいに色で分割してみましょう.\n    vec4 color = vec4(0.0);\n    \n    // 横の座標が0.5以上の時、赤成分を1.0\n    if (uv.x > 0.5) { color.x = 1.0; }\n    // 縦の座標が0.5以上の時、緑成分を1.0\n    if (uv.y > 0.5) { color.y = 1.0; }\n    \n\tfragColor = color;\n}","name":"Image","description":"","type":"image"}]}