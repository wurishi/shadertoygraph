{"ver":"0.1","info":{"id":"XdXBWl","date":"1498816110","viewed":485,"name":"Cage Transform","username":"Ultraviolet","description":"Cage deformation test based on mean value coordinates.","likes":22,"published":1,"flags":0,"usePreview":0,"tags":["deformation","meanvalue","cage"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415972\n\nvec3 textureColor(vec2 uv)\n{\n    float period = 0.4;\n    uv = mod(uv, vec2(period));\n    \n    float x = uv.x - period*0.5;\n    float y = uv.y - period*0.5;\n    \n    float pixelSizeX = 2.0/iResolution.x;\n    float pixelSizeY = 2.0/iResolution.y;\n    \n    float tx = smoothstep(0.0, 1.0, 0.5+x/pixelSizeX);\n    float ty = smoothstep(0.0, 1.0, 0.5+y/pixelSizeY);\n    float t = tx+ty-2.0*tx*ty;\n        \n    return vec3(t);\n}\n\nvec2 vertexRestPos(int i)\n{\n    vec2 pos =  2.0*(vec2(float(i!=0 && i != 3), float(i/2 != 0))-vec2(0.5));\n    \n    return pos;\n}\n\nvec2 vertexPos(int i, float t)\n{\n    float dispRad = 0.3;\n    float dispFreq = float(i+1)*0.25;\n    //float dispFreq = pow(2.0, float(i+1))*0.1;\n    if(i%2==0)\n        dispFreq *= -1.0;\n    vec2 disp = vec2(cos(2.0*M_PI*t*dispFreq), sin(2.0*M_PI*t*dispFreq))*dispRad;\n    \n    vec2 pos =  vertexRestPos(i);\n    \n    if(i == 0 && iMouse.z>0.0)\n    //if(i == 0)\n    \treturn 3.0*(iMouse.xy / iResolution.y - 0.5*vec2(iResolution.x / iResolution.y, 1.0));\n    \n    return pos+disp;\n}\n\nvec4 vertexColor(in vec2 p)\n{\n    vec4 color = vec4(1.0, 0.0, 0.0, 0.0);\n    float radius = 0.05;\n    for(int i=0; i<4; ++i)\n    {\n        if(length(vertexPos(i, iTime) - p) < radius)\n        {\n            color.a = 1.0;\n            return color;\n        }\n    }\n    return color;\n}\n\nvec2 PointSegProj(vec2 p, vec2 p0, vec2 p1)\n{\n    vec2 d = p1 - p0;\n    return mix(p0, p1, clamp(dot(p - p0, d) / dot(d, d), 0.0, 1.0));\n}\n\nfloat PointSegDistance2(vec2 p, vec2 p0, vec2 p1)\n{\n    vec2 proj = PointSegProj(p, p0, p1);\n    return dot(proj-p, proj-p);\n}\n\nvec4 segmentColor(in vec2 p)\n{\n    vec4 color = vec4(0.0, 1.0, 0.0, 0.0);\n    float radius = 0.02;\n    radius = radius*radius;\n    for(int i=0; i<4; ++i)\n    {\n        if(PointSegDistance2(p, vertexPos(i, iTime), vertexPos((i+1)%4, iTime)) < radius)\n        {\n            color.a = 1.0;\n            return color;\n        }\n    }\n    return color;\n}\n\nfloat weight(vec2 p, int i)\n{\n    vec2 p0 = vertexRestPos((i+3)%4);\n    vec2 p1 = vertexRestPos(i);\n    vec2 p2 = vertexRestPos((i+1)%4);\n    \n    vec2 d0 = p - p0; d0 = d0/length(d0);\n    vec2 d1 = p - p1; d1 = d1/length(d1);\n    vec2 d2 = p - p2; d2 = d2/length(d2);\n    \n    float epsilon = 0.000001;\n    float alpha0 = acos(epsilon/2.0 + (1.0-epsilon) * dot(d0, d1));\n    float alpha1 = acos(epsilon/2.0 + (1.0-epsilon) * dot(d2, d1));\n    \n    return (tan(alpha0*0.5) + tan(alpha1*0.5))/length(p-p1);\n}\n\nvec2 wrappDisp(vec2 p)\n{\n    vec2 d0 = vertexPos(0, iTime) - vertexRestPos(0);\n    vec2 d1 = vertexPos(1, iTime) - vertexRestPos(1);\n    vec2 d2 = vertexPos(2, iTime) - vertexRestPos(2);\n    vec2 d3 = vertexPos(3, iTime) - vertexRestPos(3);\n    \n    float w0 = weight(p, 0);\n    float w1 = weight(p, 1);\n    float w2 = weight(p, 2);\n    float w3 = weight(p, 3);\n    \n    return (d0*w0 + d1*w1 + d2*w2 + d3*w3) / (w0+w1+w2+w3);\n}\n\nvec2 inversePos(vec2 p)\n{\n    vec2 orig = p;\n    for(int i=0; i<10; ++i)\n    {\n        vec2 newPos = orig + wrappDisp(orig);\n        orig = orig + (p-newPos);\n    }\n    \n    return orig;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    uv = uv - 0.5*vec2(iResolution.x / iResolution.y, 1.0);\n    \n    float zoom = 3.0;\n    uv = uv*zoom;\n    \n    vec3 color = textureColor(uv);\n    \n    //vec2 uvWrap = uv - wrappDisp(uv);\n    vec2 uvWrap = inversePos(uv);\n    \n    color = textureColor(uvWrap);\n    \n    vec4 segCol = segmentColor(uv);\n    color = mix(color, segCol.rgb, segCol.a);\n    \n    vec4 vertCol = vertexColor(uv);\n    color = mix(color, vertCol.rgb, vertCol.a);\n        \n\n        \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}