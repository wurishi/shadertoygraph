{"ver":"0.1","info":{"id":"wtVXzh","date":"1582298780","viewed":238,"name":"Butterflies make all difference","username":"TucE","description":"Released at Fast Effect compo @ Assembly Winter 2020","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["demo","gpusound","assembly","fasteffect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nShadertoy demo: Butterflies make all difference by TucE\nReleased at Assembly Winter 2020 Fast effect compo\n\nLicensed under Creative Commons: By Attribution 4.0 License\nhttp://creativecommons.org/licenses/by/4.0/\n\nDave Hoskins' \"Warp speed\" shader in the background with some adjustments (https://www.shadertoy.com/view/Msl3WH)\nIdeas for the lighting https://www.shadertoy.com/view/tlcSDS\n\n*/\n\nvec2 hash(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973)); \n\tp3 += dot(p3, p3.yzx + 30.00);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat line( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 5.0 );\n    return length( pa - ba * h); \n}\n\nfloat light(vec2 p) {\n    float c = 1.0;\n    vec2 from = vec2(0.5, 0.5); \n    vec2 to; \t\t\t\t\t\n    \n    for (float i=0.0 ; i<20.0 ; i+=1.0) {\n        to = from + (hash(i+iTime)-vec2(0.5,0.5))*0.1;\n        c = min(c,line(p, from, to));\n        from = to;\n    }\n    \n    return c;\n}\n\nfloat time;\nvec3 Warp_Shader(in vec2 fragCoord)\n{\n\tfloat s = 0.0, v = 0.0;\n\tvec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n\tfloat t = time*0.0015;\n\tuv.x = (uv.x * iResolution.x / iResolution.y) + sin(t)*.5;\n\tfloat si = sin(t+2.17); // ...Squiffy rotation matrix!\n\tfloat co = cos(t);\n\tuv *= mat2(co, si, -si, co);\n\tvec3 col = vec3(0.0);\n\tfor (int r = 0; r < 100; r++) \n\t{\n\t\tvec3 p= vec3(0.1, 0.1, floor(time) * 0.0008) + s * vec3(uv, 0.143);\n\t\tp.z = mod(p.z,2.0);\n\t\tfor (int i=0; i < 10; i++) p = abs(p*2.04) / dot(p, p) - sin(radians(iTime+30.0));\n\t\tv += length(p*p)*smoothstep(0.0, 0.5, 0.9 - s) * .002;\n\t\tcol +=  vec3(v * 0.1, 1.1 - s * 0.1, .7 + v * 0.5) * v * 0.013;\n\t\ts += .01;\n\t}\t\n\treturn col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 aspectRatio = vec2(iResolution.x/iResolution.y, -1.0);\n    vec2 coord = aspectRatio * (uv - 0.5);\n    \n\ttime = (iTime+2.4) * 60.0;\n\n    vec3 col = Warp_Shader(fragCoord);\n\n    float c = light(uv); \n    float a = 1.0 - c * sin(radians(iTime))*30.0;\n    \n    vec3 colb = mix(vec3(0.0),vec3(0.1, 1, 1), smoothstep(0.0, 0.5, a));\n    colb = mix(colb,vec3(1.0), smoothstep(0.5, 1.0, a));\n    col = mix(col,colb, smoothstep(0.5, 1.0, a));\n    \n    fragColor = vec4(col,a);\n    \n\tif (iTime < 2.0) {\n     \tfragColor = vec4(col,a);\n    }\n\n\t\n    if (iTime > 42.0) {\n       \n    \tfragColor = vec4(255);\n    }\n    \n    if (iTime > 45.0) {\n       \n    \tfragColor = vec4(0);\n    }\n\t\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define ITERATIONS 8.0\n\nvec2 hash_audio(float p, float time)\n{\n    vec3 p3;\n\tif (time < 10.0) {\n    \tp3 = fract(vec3(p) * vec3(.9, .9, .9));  \n    }\n    else if (time > 10.0 && time < 20.0) {\n    \tp3 = fract(vec3(p) * vec3(.9, .95, .9));   \n    }\n    else if (time > 20.0 && time < 30.0) {\n    \tp3 = fract(vec3(p) * vec3(.9, 1.2, .9));   \n    }\n    else if (time > 30.0 && time < 40.0) {\n    \tp3 = fract(vec3(p) * vec3(.9, 1.3, .9));   \n    }\n    else if (time > 40.0 && time < 43.0) {\n\n       p3 = fract(vec3(p) * vec3(.9, 1.5, .9)); \n    }\n    \n    p3 += dot(p3, p3.yzx + 30.00);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n\nvec2 mainSound( in int samp,float time)\n{\n    vec2 audio = vec2(0.0);\n\n\n    for (float v = 0.0; v < ITERATIONS; v++)\n    {\n\t\taudio += hash_audio(v + time, time);\n    }\n    audio /= float(ITERATIONS);\n\n    if (time < 44.0) {\n       \n    \treturn audio*.2 * smoothstep(0.0, 2.0, time);\n    }\n    \n}","name":"Sound","description":"","type":"sound"}]}