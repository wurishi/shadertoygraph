{"ver":"0.1","info":{"id":"McKXRc","date":"1715568708","viewed":80,"name":"smooth rounded square","username":"persian_bird","description":"-","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["roundedsquare"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define half_pi 1.5707963267948966\n#define epsilon 1.192093e-07\n#define radius  1.0\n#define scale   2.5\n\n\nvec2 uv(vec2 frag_coord) {\n    return (frag_coord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\nfloat norm(float dim, vec2 uv) {\n    return pow(pow(abs(uv.x), dim) + pow(abs(uv.y), dim), 1.0 / dim);\n}\n\nfloat map(float x) {\n    return tan((half_pi * (1.0 - x)) - epsilon) + 2.0;\n}\n\nfloat my_length(vec2 uv) {\n    float p = map(0.5 * sin(iTime) + 0.5);\n    return pow(pow(abs(uv.x), p) + pow(abs(uv.y), p), 1.0 / p);\n}\n\n#define length my_length\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 uv = scale * uv(fragCoord);\n\n    float pix_width = dFdx(uv.x);\n    float d = smoothstep(-pix_width, pix_width, length(uv) - radius);\n    vec3 color = vec3(d);\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}