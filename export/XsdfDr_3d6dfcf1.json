{"ver":"0.1","info":{"id":"XsdfDr","date":"1524744557","viewed":220,"name":"Live-coding #1: Continuum 2","username":"lsdlive","description":"Live-coding session I did for a rap music set last week end.\nThis is the part 2 of the shader session, this was improvisation.\n\nThanks to Vova 365 VisParis for the music.\nThanks to la Ligne13 Salle de Concerts Saint-Denis.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","livecoding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// @lsdlive\n\n// Live-coding session I did for a rap music set last week end.\n// This is the part 2 of the shader session, this was improvisation.\n// The code below is the code as-it at the end of the show,\n// ported from atom-veda to shadertoy.\n\n// Several code snippets you will find, as it or revisited, in this shader:\n// * aiekick's phantom mode - https://www.shadertoy.com/view/MtScWW\n// * balkhan's glow - https://www.shadertoy.com/view/4t2yW1\n// * lj's short octahedron formula - \"float od = dot(q, normalize(sign(q))) - .15;\"\n// * iq & mercury's hglib sdf functions\n// https://iquilezles.org/articles/distfunctions\n// http://mercury.sexy/hg_sdf/\n// * iq's signed cross sc() - https://iquilezles.org/articles/menger\n\n// Thanks to shadertoy community & shader showdown paris, making this possible.\n\n// This is under CC-BY-NC-SA (shadertoy default licence)\n\n\nmat2 r2d(float a) {\n\tfloat c = cos(a), s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\nfloat sc(vec3 p, float d) {\n\tp = abs(p);\n\tp = max(p, p.yzx);\n\treturn min(p.x, min(p.y, p.z)) - d;\n}\n\nfloat rep(float p, float d) {\n\treturn mod(p*.5, d) - d*.5;\n}\n\nvec3 rep(vec3 p, float d) {\n\treturn mod(p*.5, d) - d*.5;\n}\n\nvoid amod(inout vec2 p, float m) {\n\tfloat a = rep(atan(p.x, p.y), m);\n\tp = vec2(cos(a), sin(a)) * length(p);\n}\n\nvoid mo(inout vec2 p, vec2 d) {\n\tp.x = abs(p.x) - d.x;\n\tp.y = abs(p.y) - d.y;\n\tif (p.y > p.x) p = p.yx;\n}\n\nfloat dt = 0.;\nfloat g = 0.;\nfloat de(vec3 p) {\n\tvec3 q = p;\n\tfloat t = iTime*8.6*2.;\n\tfloat s = t*.1 + sin(t)*.1;\n\tq.z -= dt + sin(iTime);;\n\tq.xy += vec2(cos(iTime)*sin(iTime)*.3, sin(iTime)*.3);\n\tq.xz *= r2d(iTime);\n\tq.xy *= r2d(iTime);\n\tfloat od = dot(q, normalize(sign(q))) - .1;\n\t//- texture2D(samples, vec2(0)).r; // -- atom veda audio in\n\n\tq = p;\n\tq += iTime*.4;\n\tq.xy += sin(q.z*.3)*2.;\n\tq = rep(q, 1.);\n\tfloat s1 = length(q) - .002\n\t\t- sin(iTime*30.)*.002;\n\n\tq = p;\n\tamod(p.xy, 6.28 / 5.);\n\tmo(q.xy, vec2(.3, .4));\n\tq.xy += vec2(cos(q.z + iTime)*sin(q.z)*2., sin(q.z)*1.4);\n\tfloat cyl = length(q.xy) - .05;\n\n\tmo(p.xy, vec2(.3, .1));\n\tfloat pl = p.y + .6;\n\n\tp.z = rep(p.z, 2.);\n\n\tfloat sc2 = sc(p, .4);\n\n\tmo(p.yz, vec2(.4 + sin(iTime)*.3, .4));\n\tamod(p.xy, 6.28 / 8.);\n\n\tp.x = abs(p.x) - 2.;\n\tp.xy *= r2d(3.14*.25);\n\t//p.xz*=r2d(time);\n\tfloat sc1 = sc(p, .3);\n\n\tfloat d = min(pl, sc1);\n\td = max(d, -sc2);\n\td = min(d, od);\n\td = min(d, s1);\n\td = min(d, cyl);\n\n\tg += .01 / (.01 + d*d);\n\treturn d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord / iResolution.xy - .5;\n\tuv.x *= iResolution.x / iResolution.y;\n\n\tdt = iTime*2.;\n\n\tvec3 ro = vec3(0, 0, -3. + dt);\n\tvec3 ta = vec3(0, 0, 0. + dt);\n\tvec3 fwd = normalize(ta - ro);\n\tvec3 left = cross(vec3(0, 1, 0), fwd);\n\tvec3 up = cross(fwd, left);\n\tvec3 rd = normalize(fwd + left*uv.x + up*uv.y);\n\n\trd.xy *= r2d(sin(iTime*.5)*.3);\n\n\tvec3 p;\n\tfloat t = 0., ri;\n\tfor (float i = 0.; i < 1.; i += .01) {\n\t\tri = i;\n\t\tp = ro + rd*t;\n\t\tfloat d = de(p);\n\t\t//if (d < .001) break;\n\t\td = max(abs(d), .0002);\n\t\tt += d*.3;\n\t}\n\n\tvec3 c = mix(vec3(.5, .3, .3), vec3(0), abs(p.x*p.y) + ri);\n\tc += g*.01;\n\tfragColor = vec4(c, 1.);\n}","name":"Image","description":"","type":"image"}]}