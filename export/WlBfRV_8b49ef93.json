{"ver":"0.1","info":{"id":"WlBfRV","date":"1599307256","viewed":102,"name":"Fat Mandelbrot.","username":"Logos","description":"Fat brother of Mandelbrot :)","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","complex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Robert Śmietana (Logos) - 05.09.2020\n// Bielsko-Biała, Poland, UE, Earth, Sol, Milky Way, Local Group, Laniakea :)\n\n\n//--- program parameters ---//\n\nconst float K\t= 100.0;\t\t\t// iteration count\nconst float IK\t= 1.0/K;\n\n\n//--- fractal recipe ---//\n\nvec3 getColor(vec2 p)\n{\n    float\ti = 0.0;\n    vec2\tz = vec2(0.0);\n    float\tl = 110.0 + 100.0*sin(1.6*iTime);\n    \n    \n    //- calculate iteration count -//\n    \n\tfor (; i < K; i++)\n    {\n\t\tz = cmul(z, z) + p;\n        z = rot(z, 0.05*sin(0.76*iTime + p.x - p.y));\n        z = cdiv(z, p) + p;\n        \n\t\tif (dot(z, z) > l) break;\n\t}\n\n    \n    //- return \"inside\" color -//\n    \n    if (i == 100.0) return vec3(1.0, 0.5 + z.x/p.x, 0.15 + 0.15*cos(4.0*iTime));\n    \n    \n    //- return \"outside\" color -//\n    \n    vec3\tc = ((int(i) % 2) == 0)? vec3(0.0) : vec3(1.0, 0.5, 0.0);\n    vec2\tw = rot(z, iTime);\n    \n    return\tw.x > 0.0?\n        \tw.y > 0.0?\n        \n        \tvec3(0.5) : vec3(1.0) : c;\n}\n\n\n//--- calculate pixel color ---//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    //- point coordinates -//\n    \n    float\tzoom\t= 1.5;\n    vec2\tz\t\t= zoom * (fragCoord - iResolution.xy / 2.0) / iResolution.y;\n            z\t\t= z.yx + vec2(-0.97 + 0.03*sin(1.0*iTime + 5.0*z.y), 0.03*cos(0.9*iTime + 4.0*z.x));\n    \n    \n    //- AA section -//\n    \n    float \ta\t\t=      2.0;\n    float \te\t\t= \t   1.0 / min(iResolution.x, iResolution.y);    \n    vec3\tc\t\t= vec3(0.0);\n    \n    for (float j = -a; j < a; j++)\n        for (float i = -a; i < a; i++)\n            c += getColor(z + 0.5*zoom*vec2(i, j) * (e/a)) / (4.0*a*a);\n    \n        \n    //- return final color -//\n        \n    fragColor = vec4(c, 1.0);\n    \n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 rot(vec2 z, float a)\n{\n    return vec2(z.x*cos(a) - z.y*sin(a), z.y*cos(a) + z.x*sin(a));\n}\n\n\nvec2 cmul(vec2 z1, vec2 z2)\n{\n    return vec2(z1.x*z2.x - z1.y*z2.y, z1.x*z2.y + z1.y*z2.x);\n}\n\n\nvec2 cdiv(vec2 z1, vec2 z2)\n{\n    vec2 conj = vec2(z2.x, -z2.y);\n    return cmul(z1, conj)/dot(z2, z2);\n}\n","name":"Common","description":"","type":"common"}]}