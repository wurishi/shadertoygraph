{"ver":"0.1","info":{"id":"Dt2XDW","date":"1676087564","viewed":98,"name":"Looking through the clouds","username":"ianertson","description":"Move around with the mouse :)","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["2d","terrain","clouds","map","art","world"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define T (iTime)\n#define M_PI (3.1416)\n#define TAU (M_PI * 2.0)\n#define NORM(v) (0.5+((v)*0.5))\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\nfloat smax(float a, float b, float k) { return smin(a, b, -k);}\n\nvoid getAlbedo(vec2 uv, vec2 ogUv,\n    float region,\n    float invRegion,\n    inout vec3 regionColor,\n    inout vec3 invRegionColor,\n    inout vec3 restColor\n    ) {\n\n    float crustF = textureLod(iChannel1, ogUv*0.7, 0.5).r;\n    crustF = pow(crustF, 1.6)*1.6;\n    float grassF = clamp(pow(noise2D((ogUv*25.)+vec2(29.11, 333.31578), 1.1), 3.0)*3., 0.0, 1.0);\n    grassF = mix(grassF, crustF, 0.3);\n    float shoreF = noise2D(ogUv*0.5, 16.1);\n    shoreF = clamp(pow(shoreF, 3.0), 0.0, 1.0);\n    float w = ((30.0*invRegion)+((uv.x*TAU*TAU)*(uv.y*TAU)));\n    float wavesF = NORM(cos(pow(abs(w)*0.6, 1.3)));\n    vec3 crust = vec3(0.48) * crustF;\n    vec3 waves = vec3(0.2, 0.6, 0.9);\n    waves = mix(waves, vec3(0.6, 0.8, 0.9), clamp(pow(max(0.0, 1.0 - wavesF), 2.0), 0.0, 1.0));\n    region = region*region*region;\n    float shores = smoothstep(0.01 + (shoreF*0.05), 0.00001 + (shoreF*0.05), abs(region - invRegion)*(1.0 + -(shoreF)));\n    shores = clamp(shores, 0.0, 1.0);\n    regionColor = crust;\n    invRegionColor = waves;\n    regionColor = mix(regionColor, pow(vec3(0.2 + (crustF*0.5), 0.6, 0.3), vec3(2.0)), clamp(grassF*(pow(region, 2.0)*32.), 0.0, 1.0));\n    vec3 col = mix(vec3(0.), vec3(194, 178, 128)/255.0, shores);\n    restColor = col;\n}\n\n\nvec3 getClouds(vec2 fc, vec2 uv) {\n    float n = 0.0;\n    float freq = 0.01;\n    float div = 0.0;\n    float amp = 1.0;\n    vec2 k = (fc-0.5*R.xy)/R.y;\n    float l = length(k);\n    float area = textureLod(iChannel1, ((uv*freq) + vec2(0.0281, 1.1912))*0.6,0.0).r;\n    float t = T*(0.5+(area*0.001));\n    uv += vec2(cos(t*0.2), sin(t*0.2)) + (vec2(-(t*0.2), t*0.2)*(0.5+(area*0.002)));\n    n += amp * texture(iChannel1, uv*freq).r; div += amp; amp /= 2.0; freq *= 2.0;\n    n += amp * texture(iChannel1, uv*freq).r; div += amp; amp /= 2.0; freq *= 2.0;\n    n += amp * texture(iChannel1, uv*freq).r; div += amp; amp /= 2.0; freq *= 2.0;\n    n += amp * texture(iChannel1, uv*freq).r; div += amp; amp /= 2.0; freq *= 2.0;\n    n += amp * texture(iChannel1, uv*freq).r; div += amp; amp /= 2.0; freq *= 2.0;\n    n += amp * texture(iChannel1, uv*freq).r; div += amp; amp /= 2.0; freq *= 2.0;  \n    float c = n / div;\n    c *= ((0.7+(area*0.7)))*1.4;\n    c = pow(c, 3.0);\n    c *= pow(l, 2.2);\n    return vec3(c);\n}\n\nvec3 shade(vec2 fc, vec2 uv) {\n    vec3 col = vec3(0.0);\n    vec2 ogUv = uv;\n    float region = noise2D((uv*3.)+1130.23812, 1.1);\n    float region2 = noise2D((uv), 2.);\n    float region3 = noise2D((uv)+vec2(1.2921, 9.9321), 20.0);\n    region = smax(region, region2, 0.3);\n    region = max(0.0, region - (region3*(2.0*abs(region-region2))));\n    region = clamp(pow(region, 1.6), 0.0, 1.0);\n    float regionID = floor(region*64.0);\n    float regionHash = round(hash11(regionID)*64.0) / 64.0;\n    float invRegion = pow(max(0.0, 1.0 - region), 6.0);\n    float invNoise = noise2D(((uv*4.)+9130.673517)+vec2(sin(T*0.25), cos(T*0.25)), 1.1) * max(0.0, 1.0-(region*2.5));\n    invRegion = mix(invNoise, invRegion, 0.25);\n    float t = ((T+regionHash)*(0.9+(region*0.003)))*0.5;\n    float scale = mix(1.0, 0.5, region * NORM(cos(t)));\n    uv = mix(uv, uv*scale, region);\n    vec3 regionColor = vec3(0.0);\n    vec3 invRegionColor = vec3(0.0);\n    vec3 restColor = vec3(0.);\n    getAlbedo(uv, ogUv, region, invRegion, regionColor, invRegionColor, restColor);\n    vec3 albedo = texture(iChannel0, uv).rgb;\n    col += regionColor;\n    float shade = max(0.0, smoothstep(0.2, 1.0, region));\n    float cracks = NORM(sin((invRegion*TAU*9.)));\n    col *= shade;\n    col = mix(col, invRegionColor, clamp(invRegion*(1.0-shade*16.), 0.0, 1.0));\n    col += restColor;\n    float shadows = smoothstep(pow(invRegion, 2.0), pow(region, 2.0), 0.07);\n    shadows = max(0.0, shadows - luma(col));\n    col *= smoothstep(1.0, 0.8, shadows);\n    float peak = pow(region,19.0)*64.;\n    col += peak;\n    col = mix(col, col*cracks, 0.3);\n    col += getClouds(fc, ogUv);\n    return col;\n}\n\n\nvoid mainImage( out vec4 O, in vec2 fc )\n{\n    vec3 col = vec3(0.0);\n    vec2 uv = (fc-0.5*R.xy)/R.y;\n    vec3 mouse = texture(iChannel0, vec2(0.)).xyz;\n    vec2 m = (mouse.xy-0.5*R.xy)/R.y;\n    uv *= 3.;\n    \n    if (iMouse.x > 0.05) {\n        uv += m*TAU;\n    }\n    \n    col = shade(fc, uv);\n    \n    col += (col*luma(col)) / 2.0;\n    col /= vec3(1.0) + col;\n    col = pow(max(col, 0.), vec3(1.0 / 2.2));\n    \n    O = vec4(clamp(col, 0.0, 1.0), 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// takes 1 number, returns 1 number.\nfloat hash11(float x) {\n  uint y = floatBitsToUint(x) >> 3u;\n  uint w = (~y) ^ (y >> 3u) & (~y >> 3u);\n  y ^= ((~(y << w)) ^ (y >> 3u) << (w ^ (y << w) >> 3u));\n  return float(y * 3948u) / float(0xFFFFFFFFU);\n}\n\n// takes 2 numbers, returns 1 number.\nfloat hash21(vec2 x) {\n  uvec2 y = uvec2(floatBitsToUint(hash11(x.x)), floatBitsToUint(hash11(x.y)));\n  uvec2 w = (~y) >> 3u;\n  return hash11(\n      float(\n          (98215u * ((((y.x << w.x) ^ (y.y << w.y)) << ((y.x ^ y.y) << 2812u)) +\n                     ((w.x >> y.y) << (y.x << w.y) & ~(y.x ^ y.y))))) /\n      float(0xFFFFFFFFU));\n}\n\n\n// smooth 2D noise\nfloat noise2D(vec2 p) {\n  vec2 id = floor(p);\n  vec2 lv = smoothstep(0.0, 1.0, fract(p));\n\n  return mix(mix(hash21(id), hash21(id + vec2(1, 0)), lv.x),\n             mix(hash21(id + vec2(0, 1)), hash21(id + vec2(1, 1)), lv.x), lv.y);\n}\n\n// layered smooth 2D noise\nfloat noise2D(vec2 p, float freq) {\n  float div = 0.0;\n  float amp = 1.0;\n  float n = 0.0;\n#define ADVANCE                                                                \\\n  n += amp * noise2D(p * freq);                                                \\\n  div += amp;                                                                  \\\n  amp /= 2.0;                                                                  \\\n  freq *= 2.0;\n  ADVANCE\n  ADVANCE\n  ADVANCE\n  ADVANCE\n#undef ADVANCE\n  return n / div;\n}\n\n\nfloat luma(vec3 color) {\n  return dot(color, vec3(0.299, 0.587, 0.114));\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define R iResolution.xy\n#define T (iTime)\n#define M_PI (3.1416)\n#define TAU (M_PI * 2.0)\n\n\nvoid mainImage( out vec4 O, in vec2 fc )\n{\n    vec3 col = vec3(0.0);\n    vec2 uv = fc/R.xy;\n    \n    \n    col = vec3(iMouse.xy, float(iMouse.z > 0.01));\n    vec3 old = texture(iChannel0, uv).rgb;\n    \n    if (iFrame > 1) {\n        col = mix(old, col, 0.09);\n    }\n    \n    O = vec4(col, 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}