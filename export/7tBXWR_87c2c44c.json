{"ver":"0.1","info":{"id":"7tBXWR","date":"1627403864","viewed":97,"name":"double spiral limited","username":"TLC123","description":"double spiral with limitations.\nradii must sum to distance between centers\nTried to solve limitation with quadratic curve \"middle\" piece but  failed to get perfect tangens\nOnly support Archimedean spiral for now, expand to log and hyp later\n","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","spiral","distance","saffronbun"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"double spiral \" by TLC123. https://shadertoy.com/view/ft2SRh\n// 2021-07-27 16:21:03\n// and iquilezles.org/articles/distfunctions2d\n \nfloat  smin( float a, float b,float k )\n{\n    float h =  clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 ) ;\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n  \n\nfloat f(vec2 p,vec2 from ,vec2 to,float r0,float r1,float t0,float t1,float e0,float e1)\n{\nvec2 vec=normalize(to-from); // center to center vector\n \nfloat av= atan(vec.x,vec.y) ;\n    float c = cos(-av+3.1415);\n    float s = sin(-av+3.1415);\n    mat2 rot =mat2(c,s,-s,c);\nvec2 l0=(p-from)* rot;\nvec2 l1=(p-to)* rot;\n\nfloat a0= atan(l0.x,l0.y)/(3.1415*2.) ;\nfloat a1= atan(-l1.x,-l1.y)/(3.1415*2.) ;\n\nfloat step0=.5+( a0 ) ;\nfloat step1=.5+ a1 ;\n\nfloat d=1./0.;\n \nfor (float i=fract(t0);i<= (t0);i++){\n d=min(d,abs(length  (p-from)-(( (i)-step0)/t0)*r0 ));\n}\nfor (float i=fract(t1);i<= (t1);i++){\n d=min(d,abs(length  (p-to  )-(( (i)-step1)/t1)*r1 ));\n}\n \n // the litte knob at centers\nd=smin(d,length(from-p)-r0*0.025,r0*0.1);\nd=smin(d,length(to-p)-r1*0.025,r1*0.1);\n \nreturn d;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 p =   (fragCoord*2.0-iResolution.xy)/iResolution.y;\n     \n     \n    // driver code \n \tvec2 r;\n    vec2 from = .5*vec2(-sin (iTime*0.4365  ), cos(iTime*0.3355  ));\n    vec2 to = .5*vec2(1, cos(iTime*0.8647   )*.9);\n  \n    r.x= length(from-to)- abs(sin(iTime*0.46436   ))*length(from-to)*.5-length(from-to)*.25 ;\n    r.y =length(from-to)-r.x;\n  \n    vec2 t =  3.+(2.*vec2(sin(iTime*0.513546   ), cos(iTime*0.96764   ) ));\n    t=clamp(t,.5,2.);\n  \n    // distance\n    float d=f(p,from ,to,r.x,r.y,t.x,t.y,1.,1.);\n\n    // coloring\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(128.0*abs(d));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n \n\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}