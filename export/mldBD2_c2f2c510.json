{"ver":"0.1","info":{"id":"mldBD2","date":"1701634397","viewed":101,"name":"Binary search sqrt()","username":"isaacchurchill","description":"Uses binary search to approximate the square root function.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["2d","graph","sqrt","binarysearch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Isaac Churchill\n// CC0 license\n\n#define MAX_ITERS 20\n#define TOLERANCE 0.001\n#define GRAPH_SCALE (2.0 + mod(iTime * 4.0, 30.0))\n\nfloat fake_sqrt(float x)\n{\n    if (x >= 0.0) {\n        // Binary search\n        float lower = 0.0;\n        float upper = max(x, 1.0);\n        float s = 0.0;\n        for (int i = 0; i < MAX_ITERS; i++) {\n            s = mix(lower, upper, 0.5);\n            float s_sqrd = s * s;\n            if (abs(s_sqrd - x) < TOLERANCE) {\n                return s;\n            } else if (s_sqrd < x) {\n                lower = s;\n            } else {\n                upper = s;\n            }\n        }\n        return s;\n    } else {\n        return 0.0;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n\n    \n    float aa_dist = 2.0 / iResolution.y;\n    const float line_thickness = 0.005;\n    float l = fract((uv.y + line_thickness) * GRAPH_SCALE);\n    float lines = smoothstep(0.0, aa_dist * GRAPH_SCALE, l)\n                  * smoothstep((line_thickness + aa_dist * 2.0) * -GRAPH_SCALE,\n                               (aa_dist + line_thickness) * -GRAPH_SCALE,\n                               -l);\n    l = fract((uv.x + line_thickness) * GRAPH_SCALE);\n    lines += smoothstep(0.0, aa_dist * GRAPH_SCALE, l)\n           * smoothstep((line_thickness + aa_dist * 2.0) * -GRAPH_SCALE,\n                               (aa_dist + line_thickness) * -GRAPH_SCALE,\n                        -l);\n    lines = min(lines, 1.0);\n    vec3 col = vec3(lines * 0.3);\n    \n    float s = fake_sqrt(uv.x * GRAPH_SCALE);\n    float d = abs(s - uv.y * GRAPH_SCALE);\n    float plotline_thickness = 0.002;\n    float plot = smoothstep((plotline_thickness + aa_dist * 2.0) * -GRAPH_SCALE,\n                     plotline_thickness * -GRAPH_SCALE, -d);\n    col = mix(col, vec3(1.0, 0.0, 0.0), plot);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}