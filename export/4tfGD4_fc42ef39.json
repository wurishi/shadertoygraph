{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// [2TC 15] Rotating Spiral // Characters: 175\n// http://stackoverflow.com/questions/4638317/how-to-implement-this-rotating-spiral-in-webgl\n// Converted to ShaderToy by Michael Pohoreski 2015\n// Cleaned up and slightly optimized, additional tips by yakoudbz\n\n// For fun/better precision replace log() with a different function\n// that has less discontinuity when 0.0 < length(uv) < 0.1\n// i.e.\n#define F(x) (log(x))\n//#define F(x) (x <= 0.1 ? 10.*x : log(x))\n\n// Other fun functions:\n//#define F(x) 0.5*x\n//#define F(x) (x)\n//#define F(x) pow(x,1.414213562373095)\n//#define F(x) pow(x,2.0)\n//#define F(x) pow(x,10.0)\n//#define F(x) pow(x,42.0) // Yup 42 :-)\n\n// Angles are: 15, 30, 120 degrees\n// To see how this is built ...\n//    float angle  = degrees(atan(uv.y,uv.x));\n//    float twist  = angle;\n//    float twist  = mod( angle, 30.0);\n//    float twist  = mod( angle + 30.0*iTime, 30.0);\n//    float twist  = mod( angle + 30.0*iTime - 120.0*(length(uv)), 30.0);\n//    float twist  = mod( angle + 30.0*iTime - 120.0*F(length(uv)), 30.0);\n//    float color  = float(twist > 15.0);\n//\n// If we use a normalized Tau angle, we can factor out the 30 degrees; these are equivalent:\n//    const float PI = 3.14159265358979323846264;\n//    float angle  = atan(uv.y,uv.x) * 6./PI; // convert Radians to NormalizedTau\n//    float twist = fract( angle );\n//    float twist = fract( angle + iTime );\n//    float twist = fract( angle + iTime - 4.0*length(uv));\n//    float twist = fract( angle + iTime - 4.0*F(length(uv)));\n//    float color  = float(twist > 0.5);\n//\n// Cleaned up original code:\n//    vec2  uv     = 2.0*fragCoord.xy/iResolution.xy - 1.0;\n//    float angle  = degrees(atan(uv.y,uv.x));\n//    float twist  = mod( angle + 30.0*iTime - 120.0*F(length(uv)), 30.0);\n//    float color  = float(twist > 15.0);\n//    fragColor = vec4( color, color, color, 1.0 );\n//\n// Note: yakoudbz provided this further optimized version for the case of:\n//    #define F(x) 0.5*x\n//    void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n//        vec2  p = 2.*fragCoord.xy/iResolution.xy-1.;\n//        float d = length(p);\n//        fragColor = vec4(vec3(sin(9.*(atan(p.y,p.x)-d+iTime))*smoothstep(.0,.1,d)+.5),1.);\n//    }\n//\n// Minified:\n//   p    = uv coordinates\n//   6/PI = 1.90985931710274\nvoid mainImage( out vec4 f, in vec2 w )\n{\n    vec2 p = 2.*w/iResolution.xy-1.;\n    f = vec4(vec3(float(fract(atan(p.y,p.x)*1.909859 + iTime - 4.*F(length(p))) > 0.5)), 1.);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4tfGD4","date":"1421916124","viewed":635,"name":"[2TC 15] Rotating Spiral","username":"MichaelPohoreski","description":"Rotating spiral in WebGL from StackOverflow converted to ShaderToy\nCleaned up, minified, and optimized!","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d"],"hasliked":0,"parentid":"","parentname":""}}