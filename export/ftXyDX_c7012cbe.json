{"ver":"0.1","info":{"id":"ftXyDX","date":"1675768625","viewed":63,"name":"Inlämning3","username":"EmmFloD","description":"3","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circles","motion","smoothstep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Circle(vec2 uv, vec2 pos, float radius, float sm)\n{\n    float dist = length(uv);\n    float s = smoothstep(radius, radius-sm, dist); //funktion smoothstep som returnerar float s och som går från ett högre värde(vitt) till ett lägre värde(svart) (Hoppas att jag inte har blandat ihop det)\n    return s;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) //main-funktion\n{\n    vec2 uv = (fragCoord-iResolution.xy * 0.5) / iResolution.y; //Normaliserar pixel-coordinaterna och delar med iResolution.y för att få en perfekt cirkel.\n\n   float shape = Circle(uv, vec2(.0,.0), 0.39+sin(iTime*3.)*0.1, -0.01); //Första och yttre cirkeln där minusvärdet ger ett plusvärde i smoothstep-funktionen\n\n   shape += Circle(uv, vec2(.0,.0), 0.29+sin(iTime*3.)*0.1, 0.01); //Andra och inre cirkeln som följer smoothstep-funktionen\n   //De två cirklarna ändrar storlek inom cirka 0.2-0.5 där iTime körs 3ggr fortare\n   \n    // Output\n    fragColor = vec4(vec3(shape), 1.);\n}\n","name":"Image","description":"","type":"image"}]}