{"ver":"0.1","info":{"id":"cdGBDm","date":"1698259642","viewed":106,"name":"25. Dangerous","username":"Ladus","description":"Inktober 2023 Day 25. Danger warning error, based on evangelion","likes":8,"published":1,"flags":0,"usePreview":1,"tags":["error","warning","evangelion","inktober","dangerous"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on \"Minimal Hexagonal Shader/Grid\" by leftofzen https://www.shadertoy.com/view/wtdSzX\n\n// text thanks to PrzemyslawZaworski @ https://www.shadertoy.com/view/4sBfRd\n// thanks to Fabrice Neyret for algorhitm https://www.shadertoy.com/view/llySRh\n// and thanks to otaviogood for font texture\n#define PI 3.14159265359\n#define HCE(c) U.x-=.68; errorTextMask+= char(U,64+c)\n#define HCW(c) U.x-=.68; warningTextMask+= char(U,64+c)\n\nvec4 char(vec2 p, int c) \n{\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\n\nconst vec2 s = vec2(1.7320508, 1);\n\nfloat hash21(vec2 p)\n{\n    return fract(sin(dot(p, vec2(141.13, 289.97)))*43758.5453);\n}\n\nfloat hex(in vec2 p)\n{    \n    p = abs(p);\n    return max(dot(p, s*.5), p.y); \n}\n\nvec4 getHex(vec2 p)\n{    \n    vec4 hC = floor(vec4(p, p - vec2(1, .5))/s.xyxy) + .5;\n    vec4 h = vec4(p - hC.xy*s, p - (hC.zw + .5)*s);\n    return dot(h.xy, h.xy) < dot(h.zw, h.zw) \n        ? vec4(h.xy, hC.xy) \n        : vec4(h.zw, hC.zw + .5);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 u = (fragCoord - iResolution.xy*.5)/iResolution.y; // normalize space\n    u.y *= 1.-pow(abs(u.x/2.2),2.)*2.;\n    \n    // Camera shake\n    float loopingTime = fract(iTime/8.);\n    float shakeScale = .1;    \n    u += vec2(sin(iTime*50.)*0.05 * shakeScale, sin((loopingTime+2.)*173.)*0.05 * shakeScale);\n    \n    // Hexagons\n    vec4 h = getHex(u*5.);\n    float eDist = hex(h.xy);\n\n    // Animated switching mask\n    float switchMask = clamp(floor(hash21(h.zw)+length(h.zw/(clamp(fract(iTime/8.)*16.,0.,10.)))),0.,1.);\n    \n    // Create hexagon mask shape\n    float shapes = smoothstep(0.01, 0., eDist - .5 + .04);\n    shapes -= clamp(1.-smoothstep(-0.04, -0.03, eDist - .5 + .04),0.,1.);\n    shapes = 1.-shapes;\n\n    // Error text\n    float HeaderFontSize = 12.;\n    vec2 errorTextSpace = h.xy+vec2(0.5,0.5);\n    vec4 errorTextMask = vec4(0.0);\n    vec2 position = vec2(0.03,0.4);\n    vec2 U = ( (fract(errorTextSpace)) - position)*64.0/HeaderFontSize;\n    HCE(5);HCE(18);HCE(18);HCE(15);HCE(18);\n    // warning text\n    HeaderFontSize = 11.;\n    vec2 warningTextSpace = h.xy+vec2(0.5,0.5);\n    vec4 warningTextMask = vec4(0.0);\n    vec2 warningPosition = vec2(-0.05,0.4);\n    U = ( (fract(warningTextSpace)) - warningPosition)*64.0/HeaderFontSize;\n    HCW(23);HCW(1);HCW(18);HCW(14);HCW(9);HCW(14);HCW(7);\n    \n    if(switchMask < 0.5){\n        switchMask += errorTextMask.x;\n    }\n    else {\n        switchMask -= warningTextMask.x;\n    }\n    \n    // Add colors\n    vec3 warningColor = vec3(1.,0.2,pow(length(u),2.)*0.5);\n    vec3 col = mix(warningColor*shapes, warningColor*1.-shapes, switchMask);\n    \n    fragColor = vec4(col, 1);\n   // fragColor = vec4(switchMask,switchMask,switchMask,1.);\n}","name":"Image","description":"","type":"image"}]}