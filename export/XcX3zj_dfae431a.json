{"ver":"0.1","info":{"id":"XcX3zj","date":"1703234694","viewed":65,"name":"gold trefoil knot","username":"Efim","description":"This is knot parametric curve: x = sin(t)+2sin(t),y=cos(t)-2cos(2t),z=-sin(3t)","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf","knot","trefoil"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright (c) 2023 Efim Manevich\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n\n#define PI  3.14159265359\n#define TAU 6.28318530718\n#define rot(f) mat2(cos(f), -sin(f), sin(f), cos(f))\n\nconst float dist_infin = 10.0;\n#define nn 128\nconst float eps = 0.001;\n\nvec3 sdfColor;\nvec3 resColor;\n\nvec3 col1 = vec3(0., 0.878, 0.568);\nvec3 col2 = vec3(0.7686274509803922, 0.8235294117647058, 0.8745098039215686);\nvec3 col3 = vec3(1., 0.8431, 0.);\nfloat sdfReflect = 0.5;\nfloat resReflect = 0.5;\n\nvec3 csky(vec3 p) {\n    float n = 5., m = 5., dlat = PI / n, dlon = TAU / m;\n    float lon = mod(atan(p.y, p.x), TAU), lat = atan(length(p.xy), p.z);\n    float fo = fract(lon / dlon), fa = fract(lat / dlat);\n\n    float pst = fo * fa * (1. - fo) * (1. - fa);\n    pst = smoothstep(0.0, 0.0625, pst);\n    pst = clamp(pst, 0.1, 1.0);\n    return vec3(pst);\n}\n\nint quadratic(float A, float B, float C, out vec2 x) {\n   float D = B*B - 4.0*A*C;\n   if (D < 0.0) return 0;\n   D = sqrt(D);\n   if (B < 0.0) D = -D;\n   x[0] = (-B-D)/(2.0*A);\n   x[1] = C/(A*x[0]);\n   return 2;\n}\n\nfloat knot2(vec3 p, float shift)\n{\n    float dz = .5; //knot thickness\n    p.xy *= rot(TAU/3.0*shift);\n    \n    \n    float d  = dist_infin;\n    float y = clamp(p.y, -3.0, 2. + 1./16.);\n\n    vec2 x = vec2(dist_infin);\n    int n = quadratic(-4., 1., 2. - y, x);\n    \n    for (int i = 0; i <2; i++)\n    {\n        float f = acos(x[i]);\n        float tx = sin(f) + 2.*sin(2.*f);\n        d = min(d, length(vec3(p.x - tx, p.y - y, p.z + dz*sin(3.*f))));\n        d = min(d, length(vec3(p.x + tx, p.y - y, p.z - dz*sin(3.*f))));\n    }\n    return d;\n}\n\nfloat knot3(vec3 p)\n{\n    float d = dist_infin;\n    for (float i = 0.; i < 3.; i++)\n        d = min(d, knot2(p, i));\n    return d*0.45 - 0.1;    \n}\n\nfloat map(vec3 p) {\n    if  (iMouse.z <= 0.0)\n        p.xz *= rot(iTime);\n    float d = knot3(p);\n    return d;\n   } \n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 pos) {\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * map(pos + k.xyy * h) +\n        k.yyx * map(pos + k.yyx * h) +\n        k.yxy * map(pos + k.yxy * h) +\n        k.xxx * map(pos + k.xxx * h));\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l - p), r = normalize(vec3(f.z, 0, -f.x)), u = cross(f, r), c = f * z, i = c + uv.x * r + uv.y * u;\n    return normalize(i);\n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n\n//#define AA 1\n\nvec3 calccolor(vec3 col_in, vec3 backcol, vec3 rd, vec3 light1, vec3 light2, vec3 nor) {\n    vec3 col = col_in;\n    float d = dot(rd, nor);\n    if(d < 0.0)\n        col = backcol;\n\n    nor *= -sign(d);\n    float difu1 = dot(nor, light1);\n    float difu2 = dot(nor, light2);\n    float difu = max(difu1, difu2);\n    col *= clamp(difu, 0.3, 1.0);\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 light = normalize(vec3(1.0, .0, -2.5)); //light\n    vec3 light2 = normalize(vec3(-1.0, -.0, 2.5)); //light\n    \n    resColor = col3;\n    resReflect = 0.5;\n    \n    vec2 mo = vec2(0.0, 0.0);\n    if  (iMouse.z > 0.0)\n    {\n        mo = (-iResolution.xy + 2.0 * (iMouse.xy)) / iResolution.y;\n    }\n    vec3 ro = vec3(0.0, 0.0, 6.); // camera\n    //camera rotation\n    ro.yz *= rot(mo.y * PI);\n    ro.xz *= rot(-mo.x * TAU);\n\n    const float fl = 1.5; // focal length\n    float dist = dist_infin;\n\n    vec3 b1 = vec3(0.23529411764705882, 0.4235294117647059, 0.7725490196078432), b2 = vec3(0.3686274509803922, 0.5725490196078431, 0.8941176470588236);\n    //vec3 bg = mix(b1, b2, vec3((1.0 - abs(fragCoord.x - iResolution.x / 2.) / iResolution.y * 2.) * fragCoord.y / iResolution.x));   \n    vec3 bg = mix(b2, b1*b1*b1, fragCoord.y / iResolution.y);   \n    //antialiasing\n    vec3 tot = vec3(0.0);\n    for(int m = 0; m < AA; m++) for(int n = 0; n < AA; n++) {\n            vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o)) / iResolution.y;\n            vec3 rd = GetRayDir(p, ro, vec3(0, 0., 0), fl); //ray direction\n            vec3 col = bg * bg; // background  \n            //==========================raymatch=============================\n            float td = 0.;\n            vec3 pos = vec3(0.);\n            for(int i = 0; i < nn; i++) {\n                pos = ro + rd * td;\n                float h = map(pos);\n                if(h < eps || td >= dist_infin)\n                    break;\n                td += h;\n            }\n            if(td < dist_infin) {\n                col = resColor;\n                vec3 nor = calcNormal(pos);\n\n                //reflection\n\n                vec3 psk = reflect(rd, nor);\n                vec3 c2 = csky(psk);\n\n                col = calccolor(col, col, -rd, light, light2, nor);\n                col = mix(col, c2, resReflect);\n\n                //col += c2*0.1;\n\n            }\n            //==========================raymatch=============================\n            tot += col;\n        }\n    tot = sqrt(tot) / float(AA);\n    //tot = pow(tot, vec3(0.7)) / float(AA);\n    //antialiasing\n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}