{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"struct Grid {\n\tfloat xLength;\n};\n\nstruct HexView {\n\tvec2 offset;\n\tvec2 scale;\n\tfloat hexRadius;\n\tfloat hexHeight;\n\tGrid  grid;\n};\n\t\nfloat hash(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 screenToHex(HexView view, vec2 C) {\n    // Transform from pixel space so that the center of hex\n    // (0, 0) is at the origin.\n    float x = (C.x - view.offset.x) / view.scale.x - view.hexRadius;\n    float y = (C.y - view.offset.y) / view.scale.y - view.grid.xLength * view.hexHeight / 2.0;\n\n    // Scale so that each hex is 4 units wide and 2 units high, and then translate\n    // to  put vertex 'o' at the origin.\n    //\n    // There are now three kinds of columns, shown below in (u,v)\n    // space with grid squares denoted by dotted lines:\n    //\n    //                     i=2\n    //               i=1  __ __\n    //         i=0  __ __/     \\                          .\n    //   j=0 o__:__/     \\__ __/                          .\n    //       /: :  \\__ __/.....\\.......                   .\n    //   j=1 \\:_:__/     \\__ __/.......                   .\n    //       /: :  \\__ __/.....\\.......                   .\n    //   j=2 \\:_:__/     \\__ __/.......                   .\n    //       /: :  \\__ __/.....\\.......                   .\n    //   j=3:\\:_:__/     \\__ __/.......\n    //      :/: :  \\__ __/:\n    //      :\\:_:__/: : : :\n    //      : : : : : : : :\n    //      : : : : : : : :\n    //  ... :1:2:0:1:2:0:1:  ...    \n    //\n    // Columns of type 2 and type 0 are within 2x2 squares\n    // that fill the center of a single hex.  Columns of type\n    // 1 zig-zag between three hexes.  \n    //\n    // We divide the (u,v) space into 3x2 rectangles.  In the \n    // left-most 2/3 of a rectangle we simply compute (i,j)\n    // directly from (u,v) by dividing by the size of the rectangle\n    // and shifting j down based on i.  In the last column\n    // we compute the fractional amount of the column traversed\n    // in u and the fractional amount of the rectangle traversed\n    // in v to see if we crossed either diagonal.\n\n    float r = view.hexRadius;\n\n    float u = 2.0 * x / r + 1.0;\n    float v = 2.0 * y / (r * sqrt(3.0)) + 1.0;\n\n    float i = floor(u / 3.0);\n    float j = floor((v + i) / 2.0);\n\n    // Horizontal distance of the point to the right of the third\n    // column, in (u,v) space (i.e., the \"fraction\" of the way across\n    // the column)\n    float fu = u - i * 3.0 - 2.0;\n    float fv = v - j * 2.0 + i;\n\n    if (fu > 0.0) {\n\t\t// In the diagonal zig-zag column\n\t\tif (fv < 1.0) {\n\t\t\t// In a top-diagonal square\n\t\t\tif (fu > fv) {\n\t\t\t// \"Above\" the diagonal: move one hex along the i axis to the right\n\t\t\ti += 1.0;\n\t\t\t}\n\t\t} else {\n\t\t\t// In a bottom-diagonal square\n\t\n\t\t\tif (fu + (fv - 1.0) >= 1.0) {\n\t\t\t// \"Below\" the diagonal: move one hex along both i to the right and j down\n\t\t\ti += 1.0; j += 1.0;\n\t\t\t}\n\t\t}\n    }\n\n    return vec2(i, j);\n}\n\nfloat hexGridDistance(vec2 A, vec2 B) {\n\tvec2 C  = A - B;\n\tvec2 uC = abs(C);\n\treturn sign(C.x) == sign(C.y) ? max(uC.x, uC.y) : uC.x + uC.y;\n}\n\n#define NUM_HORIZONTAL_HEXAGONS 100.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy*2.0*NUM_HORIZONTAL_HEXAGONS / iResolution.x;\n\tGrid g;\n\tg.xLength = 1.0;\n\n\tHexView view;\n\tview.hexHeight = sqrt(3.0)/2.0;\n\tview.offset = vec2(0.0);\n\tview.scale = vec2(1.0);\n\tview.hexRadius = 1.0;\n\tview.grid = g;\n\t\n\tvec2 hexID = screenToHex(view, uv);\n\tfloat x = (sin(iTime*0.4)*.5 + sin(iTime*0.73)*.2 + cos(iTime*1.23)*.3)\n\t\t*60.0+60.0;\n\tfloat y = 0.5*x+\n\t\t(sin(iTime*0.7)*.5+sin(iTime*0.82)*.2+sin(iTime*0.2)*.3)\n\t\t*35.0+35.0;\n\tvec2 markerHexID = vec2(x, y);\n\tfloat distanceFromMarker = hexGridDistance(hexID, markerHexID);\n\t\n\tfragColor = vec4(vec3(distanceFromMarker*0.04),1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Mdf3Wf","date":"1399349185","viewed":368,"name":"HexGrid","username":"Mx7f","description":"Test of a HexGrid distance function. Implementation taken from (and fixed and resubmitted to) codeheart.js.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","hexagon","hex"],"hasliked":0,"parentid":"","parentname":""}}