{"ver":"0.1","info":{"id":"MttcDs","date":"1534753365","viewed":415,"name":"single color filter","username":"guowei","description":"single color filter","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["colorfilter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rgb2hsl(vec3 color) {\n    vec3 hsl; // init to 0 to avoid warnings ? (and reverse if + remove first part)\n\n    float fmin = min(min(color.r, color.g), color.b); //Min. value of RGB\n    float fmax = max(max(color.r, color.g), color.b); //Max. value of RGB\n    float delta = fmax - fmin; //Delta RGB value\n\n    hsl.z = (fmax + fmin) / 2.0; // Luminance\n\n    if (delta == 0.0) //This is a gray, no chroma...\n    {\n        hsl.x = 0.0; // Hue\n        hsl.y = 0.0; // Saturation\n    } else //Chromatic data...\n    {\n        if (hsl.z < 0.5)\n            hsl.y = delta / (fmax + fmin); // Saturation\n        else\n            hsl.y = delta / (2.0 - fmax - fmin); // Saturation\n\n        float deltaR = (((fmax - color.r) / 6.0) + (delta / 2.0)) / delta;\n        float deltaG = (((fmax - color.g) / 6.0) + (delta / 2.0)) / delta;\n        float deltaB = (((fmax - color.b) / 6.0) + (delta / 2.0)) / delta;\n\n        if (color.r == fmax)\n            hsl.x = deltaB - deltaG; // Hue\n        else if (color.g == fmax)\n            hsl.x = (1.0 / 3.0) + deltaR - deltaB; // Hue\n        else if (color.b == fmax)\n            hsl.x = (2.0 / 3.0) + deltaG - deltaR; // Hue\n\n        if (hsl.x < 0.0)\n            hsl.x += 1.0; // Hue\n        else if (hsl.x > 1.0)\n            hsl.x -= 1.0; // Hue\n    }\n\n    return hsl;\n}\n\nfloat hue2rgb(float f1, float f2, float hue) {\n    if (hue < 0.0)\n        hue += 1.0;\n    else if (hue > 1.0)\n        hue -= 1.0;\n    float res;\n    if ((6.0 * hue) < 1.0)\n        res = f1 + (f2 - f1) * 6.0 * hue;\n    else if ((2.0 * hue) < 1.0)\n        res = f2;\n    else if ((3.0 * hue) < 2.0)\n        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n    else\n        res = f1;\n    return res;\n}\n\nvec3 hsl2rgb(vec3 hsl) {\n    vec3 rgb;\n    \n    if (hsl.y == 0.0) {\n        rgb = vec3(hsl.z); // Luminance\n    } else {\n        float f2;\n        \n        if (hsl.z < 0.5)\n            f2 = hsl.z * (1.0 + hsl.y);\n        else\n            f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n            \n        float f1 = 2.0 * hsl.z - f2;\n        \n        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n        rgb.g = hue2rgb(f1, f2, hsl.x);\n        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n    }   \n    return rgb;\n}\n\nvec3 filterColorByHue(vec3 rgbColor, vec2 hueRange) {\n\tvec3 hslColor = rgb2hsl(rgbColor);\n    //vec3 filteredColor;\n    \n    if(hslColor.x > hueRange.x && hslColor.x < hueRange.y) {\n    \t//filteredColor = rgbColor;\n        return rgbColor;\n    } else {\n    \thslColor.y = 0.0;\n        //filteredColor = hsl2rgb(hslColor);\n        //return filteredColor;\n        return hsl2rgb(hslColor);\n    }\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture(iChannel0,uv);\n    fragColor = vec4(filterColorByHue(fragColor.xyz, vec2(0.1, 0.2)), 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}