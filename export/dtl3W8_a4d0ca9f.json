{"ver":"0.1","info":{"id":"dtl3W8","date":"1671790833","viewed":135,"name":"myTestshader","username":"middle","description":"just learning shadertoy","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["firstshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst int[] font = int[](0x75557, 0x22222, 0x74717, 0x74747, 0x11574, 0x71747, 0x71757, 0x74444, 0x75757, 0x75747);\nconst int[] powers = int[](1, 10, 100, 1000, 10000, 100000, 1000000);\n\n/* \n0x75557 -> 1110101010101010111\n0x22222 -> 100010001000100010\n     1 1 1 0      ■ ■ ■ □     1 0 0 0   ■ □ □ □\n     1 0 1 0      ■ □ ■ □     1 0 0 0   ■ □ □ □\n     1 0 1 0 ->   ■ □ ■ □     1 0 0 0   ■ □ □ □\n     1 0 1 0      ■ □ ■ □     1 0 0 0   ■ □ □ □\n     1 1 1        ■ ■ ■ □     1 0 0 0   ■ □ □ □\n     \n0x75557 -> zero   0x22222->one ……\n*/\nint PrintInt( in vec2 uv, in int value, const int maxDigits )\n{\n    if( abs(uv.y-0.5)<0.5 )\n    {\n        int iu = int(floor(uv.x));\n        if( iu>=0 && iu<maxDigits )\n        {\n            int n = (value/powers[maxDigits-iu-1]) % 10;\n            uv.x = fract(uv.x);//(uv.x-float(iu)); \n            ivec2 p = ivec2(floor(uv*vec2(4.0,5.0)));\n            return (font[n] >> (p.x+p.y*4)) & 1;\n        }\n    }\n    return 0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x=uv.x*iResolution.x/iResolution.y;\n    uv.x-=iMouse.x/iResolution.y;\n    uv.y-=iMouse.y/iResolution.y;\n    //vec2 uv = fragCoord;\n    // Time varying pixel color\n    vec3 col = vec3(0.1,0.1,0.1);\n    //one pixel\n    float px =  1.0/iResolution.y;\n    \n    float center = iTime;\n    \n    //center = cos (center);\n    \n    float numb=1000.0;\n    \n    col = mix( col, vec3(0.8,0.8,0.5), 1.0-smoothstep( 0.0, px, abs(length(uv)-0.40) ) );\n    \n    col = mix( col, vec3(0.7,0.7,0.5), 1.0-smoothstep( 0.0, px, abs(uv.x) ));\n    \n    col = mix( col, vec3(0.7,0.7,0.5), 1.0-smoothstep( 0.0, px, abs(uv.y) ));\n    \n    col = mix( col, vec3(0.8,0.8,0.5), 1.0-smoothstep( 0.0, px, abs(length(vec2(uv.x+cos(center)*0.4,uv.y+sin(center)*0.4))-0.01) ) );\n    \n    col = mix( col, vec3(0.5,0.0,0.0), 1.0 - smoothstep( 0.0, px, abs(uv.x+cos(center)*0.4) ));\n    \n    \n    if(iMouse.x/iResolution.x <= 0.5)\n    \n    {\n    \n    col += vec3(0.5,0.6,0.1)*float( PrintInt( (uv-vec2(0.03,0.97- iMouse.y/iResolution.y))*50.0, int(iMouse.x/iResolution.x*numb), 5 ) );\n    \n    }\n    else\n    {\n    col += vec3(0.5,0.6,0.1)*float( PrintInt( (uv-vec2(-0.12,0.97- iMouse.y/iResolution.y))*50.0, int(iMouse.x/iResolution.x*numb), 5 ) );\n    }\n\n    if(iMouse.y/iResolution.y <= 0.5)\n     \n    {\n    \n     col += vec3(0.5,0.6,0.1)*float( PrintInt( (uv-vec2(iResolution.y/iResolution.x-0.54 - iMouse.x/iResolution.y,0.02))*50.0, int(iMouse.y/iResolution.y*numb), 5 ) );\n     \n    }\n    else\n    \n    {\n    col += vec3(0.5,0.6,0.1)*float( PrintInt( (uv-vec2(iResolution.y/iResolution.x-0.54 - iMouse.x/iResolution.y,-0.034))*50.0, int(iMouse.y/iResolution.y*numb), 5 ) );\n    }\n    \n   \n\n    // Output to screen\n    fragColor = vec4(col,0.0);\n}","name":"Image","description":"","type":"image"}]}