{"ver":"0.1","info":{"id":"tld3Dn","date":"1576096961","viewed":1025,"name":"cyberpunk girl psuedo3d","username":"Carandiru","description":"stare into her eyes and she will pop out and get you!\n\ncomments are always welcome!","likes":7,"published":3,"flags":32,"usePreview":1,"tags":["retro","anaglyph","scanline","cyberpunk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":3,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cyberpunk girl psuedo 3d - carandiru\n// http://bit.ly/supersinfulsilicon\n\n// shader by Jason Tully is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/WtSBRz\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon\n\n\n// \"sorta\" anaglyph / cyberpunk color 2d filter for retro cyberpunk effect\n// psuedo3d zoom trick is a good hack hehe\n\n// also borrowed awesome and simple text from https://www.shadertoy.com/view/WdGXWd\n\n// you can change FILL below for controlling cyberpunk coloring coverage\n#define FILL 1.5f // lower for highlighting edges, higher for whole parts\n\n\n// You may use, distribute and modify this code under the\n// terms of the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License\n// http://bit.ly/supersinfulsilicon\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n   //\n    vec3 color = texture(iChannel2, (uv)).rgb;\n    float luminance = dot(color, LUMA);\n    color.rgb = mix(vec3(0), color, aaStep( SCANLINE_INTERLEAVE * 0.5f, mod(fragCoord.y, SCANLINE_INTERLEAVE - (1.0f/iResolution.y) * 0.5f) ) );color *= 0.5f;\n    \n    color += texture(iChannel0, (uv)).rgb;\n    \n    color.rgb = color.rgb * (1.0f - (luminance / dot(color, LUMA)));\n    \n    color += texture(iChannel1, (uv)).rgb;\n    color.rgb = color.rgb * (1.0f - (luminance / dot(color, LUMA)));\n    \n    float diff = abs(dot(color, LUMA) - luminance) * FILL;\n    \n    float highlight = aaStep(0.33f + luminance, diff);\n    \n    color.rgb = color.rgb * (1.0f - (luminance / dot(color, LUMA)));\n    color.r = highlight * highlight * 0.95f;\n    color.b += color.g * 0.25f;\n    \n    \n    color.g = color.b;\n    color.b = color.r;\n    color.r = color.g;\n\n    color.g = color.b * 0.5f;\n    \n   \tcolor.g *= (1.0f + luminance);\n    \n    color = smoothstep(0.25f, 1.0f, color);\n    \n    float dither = texture(iChannel3, uv).r * (17.0f/255.0f);\n    color = mix(color - dither, color + dither, luminance);\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// cyberpunk girl psuedo 3d - carandiru\n// http://bit.ly/supersinfulsilicon\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = texture(iChannel0, (vec2(fragCoord + vec2(-1,-1)) / iResolution.xy)).rgb;\n    //fragColor.rgb = mix(vec3(0), color, aaStep( SCANLINE_INTERLEAVE * 0.5f, mod(fragCoord.y * SCALE, SCANLINE_INTERLEAVE - (1.0f/iResolution.y) * 0.5f) ) );\n\tfragColor.rgb = color;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// cyberpunk girl psuedo 3d - carandiru\n// http://bit.ly/supersinfulsilicon\n\n// shader by Jason Tully is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/WtSBRz\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon\n\n#define SCANLINE_INTERLEAVE 2.0f\n\n#define LUMA vec3(0.2126f, 0.7152f, 0.0722f)\n\nfloat aaStep(in float compValue, in float gradient){\n  float halfChange = fwidth(gradient) * 0.5f;\n  //base the range of the inverse lerp on the change over one pixel\n  float lowerEdge = compValue - halfChange;\n  float upperEdge = compValue + halfChange;\n  //do the inverse interpolation\n  return( clamp((gradient - lowerEdge) / (upperEdge - lowerEdge), 0.0f, 1.0f) );\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// cyberpunk girl psuedo 3d - carandiru\n// http://bit.ly/supersinfulsilicon\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = texture(iChannel0, (vec2(fragCoord + vec2(1,1)) / iResolution.xy)).rgb;\n   // fragColor.rgb = mix(vec3(0), color, aaStep( SCANLINE_INTERLEAVE * 0.5f, mod(fragCoord.y * SCALE, SCANLINE_INTERLEAVE - (1.0f/iResolution.y) * 0.5f) ) );\n\tfragColor.rgb = color;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// cyberpunk girl psuedo 3d - carandiru\n// http://bit.ly/supersinfulsilicon\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = 1.0f;\n\tvec2 camera = vec2(0.0f, 0.0f);\n    \n    // panning\n    float t = abs(sin(0.95f * iTime));\n    zoom = 1.0f - t * 0.59f;\n   \n    camera.x = cos(zoom) + -sin(zoom) * 0.9f;\n    camera.y = zoom - 0.6f;\n    camera.y *= camera.x;\n    camera.y = -camera.y * 14.0f;\n\n    camera = camera * 0.5f;\n\n    camera.y -= 0.1f;\n    zoom *= 2.0f - t;\n\n    vec2 uv = (vec2(fragCoord) / iResolution.xy) * zoom + camera;\n    vec3 color = texture(iChannel0, uv).rgb;\n    \n    //fragColor.rgb = mix(vec3(0), color, aaStep( SCANLINE_INTERLEAVE * 0.5f, mod(fragCoord.y * SCALE, SCANLINE_INTERLEAVE - (1.0f/iResolution.y) * 0.5f) ) );\n\tfragColor.rgb = color;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// cyberpunk girl psuedo 3d - carandiru\n// http://bit.ly/supersinfulsilicon\n\n\n// Original text shader taken from https://www.shadertoy.com/view/MstBzN by Rafbeam\nconst int CHARS[41] = int[](\n    0x00000000, \n    0x00E8FE31, \n    0x01E8FA3E, \n    0x00F8420F, \n    0x01E8C63E, \n    0x01F87A1F, \n    0x01F87A10, \n    0x00F84E2F, \n    0x0118FE31, \n    0x01F2109F, \n    0x01F0862F, \n    0x01197251, \n    0x0108421F, \n    0x01BAD6B1, \n    0x011CD671, \n    0x00E8C62E, \n    0x01E8FA10, \n    0x00E8D66E, \n    0x01E8FA31, \n    0x00F8383E, \n    0x01F21084, \n    0x0118C62E, \n    0x0118C544, \n    0x0118C6AA, \n    0x01151151, \n    0x0118A884, \n    0x01F9113F, \n    0x00ECD66E, \n    0x0046509F, \n    0x00E8991F, \n    0x00E89A2E, \n    0x00232BE2, \n    0x01F8383E, \n    0x00F87E3E, \n    0x01F11108, \n    0x00E8BA2E, \n    0x00F8FC3E, \n    0x00000004, \n    0x00000088, \n    0x00421004, \n    0x00E11004\n);\n\nvec3 character(vec3 color, vec3 background, int character, vec2 position, float size, vec2 uv)\n{\n    if((uv.x > position.x && uv.x < position.x + size) && (uv.y > position.y && uv.y < position.y + size))\n    {\n        ivec2 pixel = ivec2(ceil((uv.x-position.x)/size*5.0)-1.0, ceil((1.0-(uv.y-position.y)/size)*5.0)-1.0);\n        int bit_index = pixel.y*5 + pixel.x;\n        int bit = (CHARS[character] >> (24 - bit_index))&1;\n        if(bit > 0)\n            return color;\n    }\n    return background;\n}\n\n#define EOL 0\n#define _ 0,\n#define A 1,\n#define B 2,\n#define C 3,\n#define D 4,\n#define E 5,\n#define F 6,\n#define G 7,\n#define H 8,\n#define I 9,\n#define J 10,\n#define K 11,\n#define L 12,\n#define M 13,\n#define N 14,\n#define O 15,\n#define P 16,\n#define Q 17,\n#define R 18,\n#define S 19,\n#define T 20,\n#define U 21,\n#define V 22,\n#define W 23,\n#define X 24,\n#define Y 25,\n#define Z 26,\n\n#define DOT 37,\n#define COMMA 38,\n#define BANG 39,\n#define QUESTION 40,\n\n#define EOL1 0\n#define EOL2 EOL1,EOL1\n#define EOL3 EOL2,EOL1\n#define EOL4 EOL3,EOL1\n#define EOL5 EOL4,EOL1\n#define EOL6 EOL5,EOL1\n#define EOL7 EOL6,EOL1\n#define EOL8 EOL7,EOL1\n#define EOL9 EOL8,EOL1\n#define EOL10 EOL9,EOL1\n#define EOL11 EOL10,EOL1\n#define EOL12 EOL11,EOL1\n#define EOL13 EOL12,EOL1\n#define EOL14 EOL13,EOL1\n#define EOL15 EOL14,EOL1\n#define EOL16 EOL15,EOL1\n#define EOL17 EOL16,EOL1\n#define EOL18 EOL17,EOL1\n#define EOL19 EOL18,EOL1\n#define EOL20 EOL19,EOL1\n#define EOL21 EOL20,EOL1\n#define EOL22 EOL21,EOL1\n#define EOL23 EOL22,EOL1\n#define EOL24 EOL23,EOL1\n#define EOL25 EOL24,EOL1\n#define EOL26 EOL25,EOL1\n#define EOL27 EOL26,EOL1\n#define EOL28 EOL27,EOL1\n#define EOL29 EOL28,EOL1\n#define EOL30 EOL29,EOL1\n\n#define LEN0 EOL30\n#define LEN1 EOL29\n#define LEN2 EOL28\n#define LEN3 EOL27\n#define LEN4 EOL26\n#define LEN5 EOL25\n#define LEN6 EOL24\n#define LEN7 EOL23\n#define LEN8 EOL22\n#define LEN9 EOL21\n#define LEN10 EOL20\n#define LEN11 EOL19\n#define LEN12 EOL18\n#define LEN13 EOL17\n#define LEN14 EOL16\n#define LEN15 EOL15\n#define LEN16 EOL14\n#define LEN17 EOL13\n#define LEN18 EOL12\n#define LEN19 EOL11\n#define LEN20 EOL10\n#define LEN21 EOL9\n#define LEN22 EOL8\n#define LEN23 EOL7\n#define LEN24 EOL6\n#define LEN25 EOL5\n#define LEN26 EOL4\n#define LEN27 EOL3\n#define LEN28 EOL2\n#define LEN29 EOL1\n#define LEN30 EOL0\n\nvec3 text_color = vec3(0.0);\nvec2 uv = vec2(0.0);\nconst vec3 TEXT_COLOR = vec3(0.95);\nconst float TEXT_SIZE = 0.03;\nconst float TEXT_SIZE2 = 0.03 + 0.04/5.0;\nvec2 TEXT_POSITION = vec2(0.0);\n\nvoid text(int LINE[30]) {\n \tfor(int i = 0; i < 30; i++)\n        text_color = character(TEXT_COLOR, text_color, LINE[i], vec2(0,1) + TEXT_POSITION*vec2(1,-1) + vec2(TEXT_SIZE2 * float(i), 0.), TEXT_SIZE, uv);\n}\n\n#define TEXT(x,y) text(int[](x y));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = fragCoord/iResolution.xy;\n    \n    vec3 color = texture(iChannel0, uv).rgb;\n   \n    // text\n\t  \n    uv.x *= iResolution.x / iResolution.y;\n    \n    float move = abs(sin(iTime * 3.0f)) * 0.025f;\n    TEXT_POSITION = vec2(0.69f - move, 0.87f + move);\n    TEXT(C A L L _ M E _ N O W BANG, LEN12);\n    \n    color += text_color * (1.0f - step(1.618f, mod(iTime, 2.0f * 1.618f)));\n    \n    // fragColor.rgb = mix(vec3(0), color, aaStep( SCANLINE_INTERLEAVE * 0.5f, mod(fragCoord.y * SCALE, SCANLINE_INTERLEAVE - (1.0f/iResolution.y) * 0.5f) ) );\n\tfragColor.rgb = color;\n}","name":"Buffer D","description":"","type":"buffer"}]}