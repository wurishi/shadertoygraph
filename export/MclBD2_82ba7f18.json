{"ver":"0.1","info":{"id":"MclBD2","date":"1724410152","viewed":23,"name":"cellural_noise","username":"Tatovka","description":"flex","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["deb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CELL_SIZE 15\n#define ROW_LENGTH (int(iResolution.x)/CELL_SIZE)\nint hash(int seed){\n    seed ^= 2747636419;\n    seed *= 2654435769;\n    seed ^= seed >> 16;\n    seed *= 2654435769;\n    seed ^= seed >> 16;\n    seed *= 2654435769;\n    return seed;\n}\nvec2 rand(int seed){\n    return vec2(abs(hash(seed))%24+1, abs(hash(hash(seed)))%24+1);\n}\nvec3 randCol(float seed){\n    \n    return vec3(sin(seed*4.0+12.0), cos(seed*112.0+3.0), sin(seed));\n}\nvec2 WorldCoords(vec2 coord, int i){\n    return coord  + vec2(i % ROW_LENGTH * CELL_SIZE, i / ROW_LENGTH * CELL_SIZE);\n}\nbool comp(vec2 a, vec2 b){\n    return (int(a.x) == int(b.x) && int(a.y) == int(b.y));\n}\nvec4 getColor(vec2 fragCoord){\n    //vec3 col = vec3 (sin(iTime), cos(iTime), sin(iTime)*cos(iTime));      \n    int cell = int(fragCoord.x) / CELL_SIZE + int(fragCoord.y) / CELL_SIZE * ROW_LENGTH;\n    //if (comp(fragCoord, WorldCoords(rand(cell), cell))) return vec4(0);\n    float dist=1000.0;\n    vec3 col;\n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n        int neighbour = x + y * ROW_LENGTH;\n        float curDist = length(fragCoord - WorldCoords(rand(cell+neighbour), cell+neighbour));\n        if (curDist < dist){\n            dist = curDist;\n            col = randCol(float(hash(cell+neighbour)));\n            }\n    }\n}\n    vec3 baseColor = vec3(0.85, 0.6, 0.3);\n    return vec4(col * vec3(0.5) + baseColor*0.9,  1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = getColor(fragCoord);\n    \n}","name":"Image","description":"","type":"image"}]}