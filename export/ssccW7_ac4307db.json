{"ver":"0.1","info":{"id":"ssccW7","date":"1653577851","viewed":176,"name":"Pixel Clusters 78231","username":"SnoopethDuckDuck","description":"Very messy code, just a few ideas","likes":6,"published":3,"flags":48,"usePreview":0,"tags":["feedback","cellularautomata"],"hasliked":0,"parentid":"ss3yW8","parentname":"Flood Fill Shape Test"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 pal(in float t, in vec3 d) {\n    return 0.5 + 0.5*cos( 6.28318*(0.5*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float zm = 0.2;\n    \n    vec2 res = floor(iResolution.xy);\n    \n    vec2 f = fragCoord;vec2(abs(fragCoord.x - 0.5 * res.x) + 0.5 * res.x, fragCoord.y);\n    vec2 f2 = vec2(res.x-f.x, f.y);\n\n    vec4 col = texelFetch( iChannel0, ivec2(zm * f + 0.5 * (1.-zm) * res), 0);\n  //  vec3 col2 = texelFetch( iChannel0, ivec2(zm * f2 - vec2(1,0) + 0.5 * (1.-zm) * res), 0).rgb;\n    \n   // if (col.r >= 1.)\n     //   col *= 0.;\n    if (col.b == 1.)\n        col.rgb = vec3(0.1);\n    else if (col.rgb == vec3(0,1,0))\n        col.rgb = vec3(1);\n    else if (col.rgb == vec3(1,0,0))\n        col.rgb = vec3(0.999);\n    else\n        col.rgb = vec3(0);//pal(h21(f), 0.5 * vec3(0,1,2)/3.);\n        \n    float o = (5. / 8.) * floor(iTime/3.)+ floor(8. * uv.y)/8.;\n    if (col.rgb == vec3(0))\n        col.rgb = pal(o, 1. * vec3(0,1,2)/3.);\n    else if (col.rgb == vec3(1))\n        col.rgb = pal(o - 0., uv.x * vec3(0,1,2)/3.);\n      \n    fragColor.rgb = col.rgb;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define KEYBOARD iChannel1\n#define KEY_RESET 82\n\n#define pi 3.14159\n\nfloat pxLine(vec2 f, vec2 p, vec2 q) {\n    f -= p;\n    vec2 dir = .5 * (q - p),\n         v = step(abs(f - round(dir/dir.yx * f.yx)), vec2(0)),\n         a = step(abs(f - dir), abs(dir));  \n    return max(v.x, v.y) * a.x * a.y ;           \n}\n\nfloat getShape(vec2 f) {\n    f -= 0.5;\n    vec2 p = vec2(0);\n    float s = 0.;\n    float t = 0.01 * floor(iTime);\n    float a = 0.;\n\n    float n = 100.;\n    for (float i = 0.; i < n; i++) {\n        float j = i + t;\n        float h = h21(vec2(j , 103. + j));\n        float h2 = h21(vec2(j-10.,3. * j));\n      \n       // float m = 0.;mod(i, 2.);\n        a += 0.25 * pi * (2. * floor(h) - 1.);// * (0.25 * floor((2. + m) * h)-m);\n               \n        vec2 q = p + ceil(h2 * 4.) * vec2(cos(a), sin(a));\n        q = round(q);\n        \n        s = max(s, pxLine(f, p, q));\n        s = max(s, pxLine(vec2(-f.x-1., f.y), p, q));\n\n        p = q;\n    }     \n    return s;\n}\n\nfloat getShape2(vec2 f) {\n    \n    float t = 0.01 * floor(iTime);\n    float s = 0.;//step(d, 4.);\n    \n    for (float i = 2.; i < 15.; i++) {\n        vec2 g = f + 400. * vec2(h21(f), h21(vec2(-f.y,f.x+1.)));\n        vec2 fpos = mod(g, 2. * i) - i;\n        vec2 ipos = g - fpos;\n        s += step(length(fpos), i) * step(h21(ipos + 0.01 * floor(iTime)),0.025);\n    }\n    \n    \n    /*\n    float n = 100.;\n    for (float i = 0.; i < n; i++) {\n        float j = i + 0.01 * floor(iTime);\n        float h = h21(vec2(j+41.,1.3*j));\n        float h2 = h21(vec2(1.4 * j, j - 43.5));\n        s = max(s, step(length(f+ (15. - 30. * vec2(h,h2))), 2.));\n    }\n    */\n    return s;\n}\n\nvec3 cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 ).rgb;\n}\n\n// because im lazy\nfloat alpha(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 ).a;\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nvoid mainImage( out vec4 col, in vec2 f )\n{\n    ivec2 px = ivec2(f);\n\n    col.rgb = cell(px);\n    col.a = alpha(px);\n    \n    vec3 b = cell(px - ivec2(0,1));\n    vec3 t = cell(px + ivec2(0,1));\n    vec3 l = cell(px - ivec2(1,0));\n    vec3 r = cell(px + ivec2(1,0));\n    \n    vec3 bl = cell(px + ivec2(-1,-1));\n    vec3 tl = cell(px + ivec2(-1,1));\n    vec3 br = cell(px + ivec2(1,-1));\n    vec3 tr = cell(px + ivec2(1,1));\n        \n    float sum = b.r + t.r + l.r + r.r;\n    float sumb = b.b+t.b+l.b+r.b;\n    vec3 col2 = vec3(0);\n    \n    if (frame == 0 || key_down(KEY_RESET)) {\n        vec2 res = floor(0.5 * iResolution.xy);\n\n        col.b = 0.;\n        col.rg = vec2(1) * clamp(getShape2(f-res), 0., 1.);\n        col.a = 0.;\n        \n        //if (length(f-res) < 25. && length(f-res) > 24.)\n         //   col.r = 1.;\n\n        if (f.x < 1. || f.y < 1.)\n            col.g = 0.;\n        else\n            col.g = 1.;\n       // if (f.x < res.x && f.x > res.x - 1. && f.y < res.y && f.y > res.y - 1.)\n         //   col.g = 2.;\n        \n        return;\n    } \n    else if (frame == 1) {\n        if (col.r == 1. && sum == 0.)\n            col.r = 0.;\n    }\n    else if (frame <= 5) {\n        if (sum >= 2.)\n            col.r = 1.;\n    } \n    else if (frame <= 6) {\n        if (sum <= 2.)\n            col.r = 0.;\n    }\n    else if (frame <= 10) {\n        if (sum <= 1.)\n            col.r = 0.;\n    }\n    else if (frame <= 11) {\n        if (col.r == 0. && sum > 0.) {\n            col.b = 1.;//vec3(0,0,1);\n        }\n    }\n    else if (frame <= 12) {\n        if (col.b == 1. && sumb == 3.) {\n            col.b = 0.;\n            col.rg = vec2(1);\n        }            \n    }\n    else if (frame <= 13) {\n        if (col.b == 1. && sumb <= 1. && sum >= 3.) {\n            col.b = 0.;\n            col.rg = vec2(1);\n        }\n    }\n    else if (frame <= 14) {\n        if (col.rg == vec2(1) && sum == 3. && sumb == 0.)\n            col.b = 1.;\n    }\n    else if (frame <= 15) {\n        if (col.rg == vec2(1) && sumb > 0.)\n            col.g = 0.;\n    }\n    //*/\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec3 cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 ).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define frame iFrame % 180\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}","name":"Common","description":"","type":"common"}]}