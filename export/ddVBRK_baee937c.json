{"ver":"0.1","info":{"id":"ddVBRK","date":"1698416866","viewed":101,"name":"Trianglies","username":"FFFFFFear1","description":"U can try to play with settings numbers and totally broke the image\nIts seems fun :)","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define float2x2 mat2\n\nfloat _speedColor = -.3;\nfloat _raduis = 0.12;\nfloat _count = 60.;\nfloat _angleOffset = 45.;\nfloat _sides = 3.;\nfloat _glow = 0.005;\nfloat _angleMltiplayer = 8.;\nfloat _triangleSize = .01;\n\nvec2 _offset = vec2(0.02, 0.02);\nvec2 _uvColor = vec2(0.0);\n\nvec3 colorPalette( float t)\n{\n    vec3 a = vec3(1.468, .248, .108);\n    vec3 b = vec3(-1.312, 1.500, 0.448);\n    vec3 c = vec3(-0.732, 1.328, -.328);\n    vec3 d = vec3(-0.542, 0.118, -1.48);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat2x2 getRotationMatrix(float theta) {\n    float s = sin(theta);\n    float c = cos(theta);\n    \n    return float2x2(c,-s,s,c);\n}\n\nfloat2x2 getScaleMatrix(float scale) {\n    return float2x2(scale,0,0,scale);\n}\n\n\nfloat triangle(vec2 point, float height)\n{\n    float k = sqrt(_sides);\n    point.x = abs(point.x) - height;\n    point.y = point.y + height  / k;\n    \n    if (point.x + k * point.y > 0.) \n    {\n        point = vec2(point.x - k * point.y, -k * point.x - point.y) / 2.;\n    }\n    \n    float result = abs(point.y);\n    \n    return result;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 uvColor = uv;\n    vec3 finalColor;\n       \n    float angle;\n    vec2 offset;\n        \n    for (float i = 0.; i < _count; i++) \n    {\n        float2x2 rotateMat = getRotationMatrix(angle * _angleMltiplayer);    \n        float2x2 scaleMat = getScaleMatrix((sin(iTime) + 1.0) / 3.0 + 0.5);\n        vec2 newPos = (rotateMat * uv + _raduis);\n        newPos += offset;\n        \n        float newTriangle = triangle(newPos * scaleMat, _triangleSize) / exp(triangle(uvColor, _triangleSize));\n        \n        vec3 color = colorPalette(triangle(uvColor, _triangleSize) + i + iTime * _speedColor);\n        \n        newTriangle = pow(abs(_glow / sin(newTriangle / 2.)), 2.1);\n        \n        finalColor += newTriangle * color;\n      \n        angle += _angleOffset;\n        offset += _offset;\n    }\n    \n    fragColor = vec4(finalColor, 1.);\n}","name":"Image","description":"","type":"image"}]}