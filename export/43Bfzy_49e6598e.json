{"ver":"0.1","info":{"id":"43Bfzy","date":"1730437365","viewed":100,"name":"Fractal... trees?","username":"triggthediscovery","description":"Fun little fractal tree shader. My attempt to write something short.","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["trees"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fun little fractal tree shader.\n//\n// provided under CC0.\n\nconst float wave_speed = 0.2;\nconst float wave_freq = 6.0;\n\nvec2 tree_next(vec2 uv, float height_adj) {\n    float r_v = 0.4;\n    if (uv.x > 0.3) {uv.x -= 0.6; r_v=0.3;}\n    if (uv.x <-0.3) {uv.x += 0.6; r_v=0.5;}\n\n    float cen_a = abs(uv.x-sin(uv.y*wave_freq+iTime*wave_speed+uv.x)/50.0)*4.0;\n\n    return vec2(uv.y/(r_v*height_adj)-1.25 - (cen_a/1.8), cen_a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.y;\n    uv.x -= (iResolution.x/iResolution.y/2.0);\n    vec3 col = mix(vec3(0.7,0.8,1), vec3(0.5,0.6,1), uv.y);\n    vec2 uv_l = uv;\n    \n    for (int i=0; i<7; i++) {\n        uv = tree_next(uv, (5.0+float(i))/6.0);\n        vec2 v_p = uv.yx;\n        v_p.y = 1.7-v_p.y;\n        if (abs(v_p.x)/(v_p.y-uv_l.y) < ((3.5+float(i))/50.0) && (v_p.y-uv_l.y) > 0.0) {\n            col = vec3(0, 0.8-(abs(v_p.x)/(v_p.y-uv.y)*2.5), 0);\n            if (i<=0) col = vec3(col.g, col.g/2.0, 0);\n            break;\n        } else {\n            uv_l = uv;\n        }\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}