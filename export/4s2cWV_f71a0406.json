{"ver":"0.1","info":{"id":"4s2cWV","date":"1494335379","viewed":1002,"name":"SDF Setup","username":"kosmonaut","description":"Circle-circle intersection test for my blog entry.\n\nOn the lower left the simple approximation is used (distance to SDF, plus sample), on the right I use the technique described in the blog with circle circle intersection to find the correct vector.","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["signeddistancefields"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define SD_POINT\n//else we have a box\n\nvec2 point = vec2(0.5f, 0.7f);\n\n/*\n\nInterpolating outside of a distance field, basic 2d setup.\n\n*/\n\nfloat sdFunc(vec2 fragPos)\n{\n\n    #ifdef SD_POINT\n    \n    return length(point * iResolution.xy - fragPos);\n    \n    #endif\n    \n    float sdf_angle = 1. + iTime / 10.;\n    \n    fragPos -= point * iResolution.xy;\n    fragPos *= mat2(cos(sdf_angle),-sin(sdf_angle),sin(sdf_angle),cos(sdf_angle)); \n    vec2 d = abs(fragPos) - vec2(110.,20.);\n \treturn min(max(d.x,d.y),0.0) + length(max(d,0.0));\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sd = sdFunc(fragCoord);\n    \n    float thrshld = 0.4f * iResolution.y;\n    \n    float slider = (iMouse.z > 0. ? iMouse.x : 0.5 * iResolution.x) ;\n    \n    if((fragCoord.y < thrshld && fragCoord.x > slider && fragCoord.x < slider+1.) || (fragCoord.y > thrshld && fragCoord.y < thrshld + 1.))\n    {\n         fragColor = vec4(1.,0.,0.,1.);\n           return;\n    }\n    \n    if(fragCoord.x < slider)\n    {\n    \tif(fragCoord.y < thrshld) \n    \t{\n        \tsd = abs(fragCoord.y - thrshld) + sdFunc(vec2(fragCoord.x, thrshld));\n    \t}\n    }\n    else\n    {\n        if(fragCoord.y < thrshld) \n    \t{\n            \n            //let's do with circles\n            vec2 vec_to_limit = vec2(0, thrshld - fragCoord.y);\n            \n            float d = 1.;\n            vec2 p0 = vec2(fragCoord.x, thrshld);\n            vec2 p1 = vec2(fragCoord.x, thrshld + d);\n            float r0 = sdFunc(p0);\n            float r1 = sdFunc(p1);\n            \n            float h = 0.5 + (r0*r0 - r1*r1) / (2. * d*d);\n            \n            float r_i = sqrt(abs(r0*r0 - h*h*d*d));\n            \n            vec2 p2 = p0 + (p1-p0)*h;\n            \n            vec2 p3 = p2 + vec2(p1.y-p0.y, p1.x-p0.x) * r_i;\n            \n            sd = length(fragCoord - p3);\n    \t}\n    }\n    \n    fragColor = vec4( fract(sd / max(iResolution.x, iResolution.y) * 20.) );\n    \n    return;\n}","name":"Image","description":"","type":"image"}]}