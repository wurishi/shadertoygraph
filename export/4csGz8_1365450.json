{"ver":"0.1","info":{"id":"4csGz8","date":"1702739301","viewed":159,"name":"atom science in space","username":"nayk","description":"space,atom,stars","likes":5,"published":1,"flags":1,"usePreview":0,"tags":["space","stars","universe","atom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*original https://www.shadertoy.com/view/mtyfDK  https://www.shadertoy.com/view/DtVBRD /*original https://www.shadertoy.com/view/lslyRn,  original https://www.shadertoy.com/view/lsyXDK https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/DlycWR and other*/\n/*https://www.shadertoy.com/view/Ns3cDN*/\n#define iterations 13\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000\n\n#define brightness 0.0055\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n//get coords and direction\nvec3 dir=rd;\nvec3 from=ro;\n\n//volumetric rendering\nfloat s=0.1,fade=1.;\nvec3 v=vec3(0.);\nfor (int r=0; r<volsteps; r++) {\nvec3 p=from+s*dir*.5;\np = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\nfloat pa,a=pa=0.;\nfor (int i=0; i<iterations; i++) {\np=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.02),sin(iTime*0.02),-sin(iTime*0.02),cos(iTime*0.02));// the magic formula\na+=abs(length(p)-pa); // absolute sum of average change\npa=length(p);\n}\nfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\na*=a*a; // add contrast\nif (r>6) fade*=1.3; // dark matter, don't render near\n//v+=vec3(dm,dm*.5,0.);\nv+=fade;\nv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\nfade*=distfading; // distance fading\ns-=stepsize;\n}\nv=mix(vec3(length(v)),v,saturation); //color adjust\nfragColor = vec4(v/4.*.030,0.);\n}\nfloat nice_lucky_lovely_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nmat2 r2d(float a) {\nfloat c = cos(a), s = sin(a);\n    return mat2(\n        c, s,\n        -s, c\n    );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//get coords and direction\nvec2 uv=fragCoord.xy/iResolution.xy-.5;\n    vec2 uv2=fragCoord.xy/iResolution.xy-.5;\n        vec2 uv3=fragCoord.xy/iResolution.xy-.5;\n        vec2 uv4=fragCoord.xy/iResolution.xy-.5;\nuv.y*=iResolution.y/iResolution.x;\nvec3 dir=vec3(uv*zoom,1.);\nfloat time=iTime*speed+.25;\n    vec4 O=fragColor;\n    vec2 C=fragCoord;\n        // anim between 0.9 - 1.1\n    float anim = sin(iTime * 10.0) * 0.1 + 1.0;    \nO=vec4(0);\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    float ratio = iResolution.y / iResolution.x;\nfloat divider = float(iMouse.x / iResolution.x * 10.0) + 1.0;\nfloat intensity = float(iMouse.y / iResolution.y * 10.0) + 1.0;\n\nfloat coordX = fragCoord.x / iResolution.x;\nfloat coordY = fragCoord.y / iResolution.x;\n\nfloat ball1x = sin(iTime * 2.1) * 0.5 + 0.5;\nfloat ball1y = cos(iTime * 1.0) * 0.5 + 0.5;\nfloat ball1z = sin(iTime * 2.0) * 0.1 + 0.2;\n\nfloat ball2x = sin(iTime * 1.0) * 0.5 + 0.5;\nfloat ball2y = cos(iTime * 1.8) * 0.5 + 0.5;\nfloat ball2z = cos(iTime * 2.0) * 0.1 + 0.2;\n\nfloat ball3x = sin(iTime * 0.7) * 0.5 + 0.5;\nfloat ball3y = cos(iTime * 1.5) * 0.5 + 0.5;\nfloat ball3z = cos(iTime * 1.0) * 0.1 + 0.2;\n\nvec3 ball1 = vec3(ball1x, ball1y * ratio, ball1z);\nvec3 ball2 = vec3(ball2x, ball2y * ratio, ball2z);\nvec3 ball3 = vec3(ball3x, ball3y * ratio, ball3z);\nuv2.xy+=ball1.xy* vec2(coordX, coordY);\nuv3.xy+=ball2.xy* vec2(coordX, coordY);\nuv4.xy+=ball3.xy* vec2(coordX, coordY);\nfloat sum = 0.0;\nsum += ball1.z / distance(ball1.xy, vec2(coordX, coordY));\nsum += ball2.z / distance(ball2.xy, vec2(coordX, coordY));\nsum += ball3.z / distance(ball3.xy, vec2(coordX, coordY));\n\n    sum = pow(sum / intensity, divider);\n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n   \n    {\n        p=g*d;\n        p.z+=iTime*2.0;\n        a=10.;\n        p=mod(p-a,a*2.)-a;\n        s=2.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n           \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            p.y<p.x?p=p.zyx:p;\n           \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+cos(iTime*.3+.05*cos(iTime*.3))*.1,\n                    100,  10.+cos(iTime*.5)*5.\n                 );\n         }\n       \n         g+=e=length(p.zy)/s;\n    }\nfloat time2 = iTime;\n    float rotTime = sin(time2);\n   \n    vec3 color1 = vec3(0.8, 0.5, 0.3);\n    vec3 color2 = vec3(rotTime, 0.2, 0.3);\n   \n\n\n    vec3 destColor = vec3(2.0 * rotTime, .0, 0.5);\n    float f = 10.15;\n    float maxIt = 18.0;\n    vec3 shape = vec3(0.);\n    for(float i = 0.0; i < maxIt; i++){\n        float s = sin((time / 111.0) + i * cos(iTime*0.02+i)*0.05+0.05);\n        float c = cos((time / 411.0) + i * (sin(time*0.02+i)*0.05+0.05));\n        c += sin(iTime);\n        f = (.01) / abs(length(uv / vec2(c, s)) - 0.4);\n        f += exp(-400.*distance(uv, vec2(c,s)*0.5))*2.;\n        // Mas Particulas\n        f += exp(-200.*distance(uv, vec2(c,s)*-0.5))*2.;\n        // Circulito\n        f += (.008) / abs(length(uv/2. / vec2(c/4. + sin(time*.6), s/4.)))*0.4;\n        float idx = float(i)/ float(maxIt);\n        idx = fract(idx*2.);\n        vec3 colorX = mix(color1, color2,idx);\n        shape += f * colorX;\n       \n        // todo: sacar el sin\n        uv *= r2d(sin(iTime*0.2) + cos(i*50.*f+iTime)*f);\n    }\n   \nvec3 from=vec3(1.,.5,0.5)*O.xyz;\nfrom+=vec3(time*2.,time,-2.);\n\n\nmainVR(fragColor, fragCoord, from, dir);\n   \n            fragColor+= vec4(nice_lucky_lovely_star(uv2,anim) * vec3(0.55,0.5,0.55)*0.07, 1.0);\n             fragColor+= vec4(nice_lucky_lovely_star(uv3,anim) * vec3(0.15,0.2,0.55)*0.017, 1.0);\n              fragColor+= vec4(nice_lucky_lovely_star(uv4,anim) * vec3(0.15,0.5,0.25)*0.017, 1.0);\n                fragColor*= vec4(shape, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}