{"ver":"0.1","info":{"id":"Mtj3Dd","date":"1433845730","viewed":658,"name":"simple line drawing test","username":"shanemarks","description":"test of screenspace lines","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["testingalinedrawingsystem"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float distanceToLine(vec2 p1, vec2 p2, vec2 point) {\n    float a = p1.y-p2.y;\n    float b = p2.x-p1.x;\n    return abs(a*point.x+b*point.y+p1.x*p2.y-p2.x*p1.y) / sqrt(a*a+b*b);\n}\n\nvec2 midpoint (vec2 p1, vec2 p2)\n{\n        return vec2((p1.x+p2.x)/2., (p1.y+p2.y) /2.);\n\n}\n\n\nfloat clampToLine (vec2 p1, vec2 p2, vec2 point, float line)\n{\n   vec2 mp = midpoint(p1,p2);\n   float maxDistance = distance(mp,p1);\n   if (distance(mp,point) > maxDistance)\n   {\n       return 0.;\n   }\n   else\n   {\n       return line;\n   }\n       \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p1 = vec2(0.5,0.1);\n    vec2 p2 = vec2 (0.2,0.5);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    // get distance to line\n    float distance = distanceToLine (p1,p2,uv);\n    //line\n\tfloat radius =0.01;\n    float AA = 0.003;\n   \tfloat line =  smoothstep (radius/2.,radius/2.-AA,distance);\n    \n    line =  clampToLine(p1,p2,uv,line);\n    \n\n    float outLine = line;\n    \t\n    fragColor = vec4(1.*outLine,1.*outLine,1.*outLine,1.0);\n    \n}","name":"","description":"","type":"image"}]}