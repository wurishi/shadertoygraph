{"ver":"0.1","info":{"id":"mdVczK","date":"1698768759","viewed":99,"name":"Mouse memory test","username":"fingertwister","description":"Testing ways of keeping track of mouse position history","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["development"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Base calculation on point - line distance: \n// \n// (p - a) - dot((p - a), n) * n\n//\n// (https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line)\n//\n// The distance can never be longer than the segment length\n// The distance can never be shorter than minDist (avoids division by zero case) \n\nfloat dist2Segment2(vec2 a, vec2 b, vec2 p, float minDist) {\n    vec2 ab = b - a;\n    vec2 ap = p - a;\n    float lAb = max(minDist, length(ab)); // ensure minDist\n    vec2 n = ab / lAb;\n    float l = clamp(dot(ap, n), 0., lAb); // clamp to segment length\n    return length(ap - (l * n)); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.);//0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n \tvec4 mo = texture(iChannel0,vec2(0));\n \t\n    if (mo.z > 0. && dist2Segment2(mo.zw, mo.xy, fragCoord, 1.) < 10.) {\n    //if (mo.z > 0. && ln(fragCoord, mo.xy, mo.zw) < 10.) {\n        fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    } else {\n        // Output to screen\n        fragColor = vec4(col,1.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Store last mouse positions\n//\n// if lmb is down:\n//     xy - current xy\n//     zw - last xy (if no last xy then current xy)\n// else:\n//     xy - current xy\n//     zw - zero\n\n#define lmb (iMouse.z > 0.)\n#define previousLmb (p.z > 0.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 p = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragColor = vec4(iMouse.xy, lmb \n        ? (previousLmb \n            ? p.xy \n            : iMouse.xy)\n        : vec2(0.));\n}","name":"Buffer A","description":"","type":"buffer"}]}