{"ver":"0.1","info":{"id":"l3syRX","date":"1727262998","viewed":19,"name":"Moving Circle HW","username":"GeraDot4815","description":"используй стрелочки <--     -->","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["lesson1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 RotateZ(float a)\n{ \n    float s = sin(a);\n    float c = cos(a);\n    return mat2\n    (\n        vec2(c, -s),\n        vec2(s, c)\n    );\n}\n\nfloat sdfCircle(vec2 uv, float r, vec2 offset)\n{\n    float x = uv.x-offset.x;\n\n    float d = length(vec2(x,uv.y+0.3))-r;\n//length(max(abs(x),abs(uv.y+0.3)))-r;\n    return step(0.0,-d);\n}\n\nfloat sdfSquire(vec2 uv, float r, vec2 offset)\n{\n    float x =uv.x-offset.x;\n    float d =length(max(abs(x),abs(uv.y+0.3)))-r;\n    return step(0.0, -d);\n}\nfloat sdfBox(vec2 center, vec2 size, vec2 offset, mat2 Z)\n{\n    center-=offset;\n    center*=Z;\n    vec2 d = abs(center)-size; \n    float box = length(max(d,0.0));// + min(max(d.x,d.y),0.0);\n    return step(0.0,-box);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //UV\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=0.5;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    mat2 Z =RotateZ(iTime*2.);\n    \n    //BG\n    vec4 bgColor= texture(iChannel2, fragCoord/iResolution.xy*Z);\n    \n    //Circle\n    vec2 offset = texture(iChannel0, uv).xy;\n    float circleAlpha = sdfSquire(uv, 0.1, offset);//vec2(0,0));\n    vec4 circleCol=vec4(1.0,0.,0.,1.0);\n    \n    //dopCircle\n    float c=sdfCircle(uv, 0.1, vec2(0.,0.));\n    \n    //Box\n\n    vec2 box_offset=(texture(iChannel1, uv)).xy;\n    float boxAlpha = sdfBox(uv, vec2(0.2, 0.05), box_offset, Z);//vec2(0,0));\n    vec4 boxCol=vec4(.0,0.,1.0,1.0);\n    \n    //Color\n    vec4 col = mix(bgColor, bgColor, vec4(0.,0.,0.,1.0));\n    col = mix(col, circleCol,circleAlpha);\n    col = mix(col, boxCol,boxAlpha);\n    col = mix(col, vec4(1.,1.,1.,1.),c);\n\n    fragColor = vec4(col);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int KEY_LEFT  = 37;\nconst int KEY_RIGHT = 39;\n\n\nconst float BORDER = 0.75;\n\n\nvec2 handleKeyboard(vec2 dir) \n{\n    float velocity = 1.0 / iFrameRate;\n    \n    vec2 left = texelFetch(iChannel1, ivec2(KEY_LEFT, 0),0).x * vec2(-1, 0);\n    if(dir.x<-BORDER) left=vec2(0,0);\n\n    vec2 right = texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).x * vec2(1, 0);\n    if(dir.x>BORDER) right=vec2(0,0);\n\n    dir += (left+right)*velocity;\n\n    return dir;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 dir=texture(iChannel0, vec2(0,0)).xy;\n    if (iFrame != 0) \n    {\n    \n        dir = handleKeyboard(dir);\n    }\n    else \n    { \n        dir = vec2(0.,0.); \n    }\n    dir = handleKeyboard(dir);\n    fragColor=vec4(dir,0,0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const float G =0.01;\nconst float MIN_SPEED=0.001;\nconst float MAX_SPEED=1.0;\nconst float TOP_Y=0.5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=fragCoord/iResolution.xy;\n    vec2 pos=texture(iChannel0, uv).xy;\n    float speed=MIN_SPEED;\n    if (iFrame != 0) \n    {    \n        if (speed<MAX_SPEED) speed+=G;\n        if (pos.y>-TOP_Y)\n        {\n          pos.y-=speed;\n        }\n        else\n        {\n        speed=MIN_SPEED;\n        pos.y=TOP_Y;\n        pos.x = texture(iChannel1, sin(iTime+vec2(0.,0.))).x*2.-1.;\n        }\n    }\n    else \n    { \n        pos=vec4(0.,0.,0.,1.).xy; \n        speed=MIN_SPEED;\n    }\n    fragColor = vec4(pos,0.,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"float G(float x, float y, float sigma)\n{\n    return (1./(2.*3.1415*pow(sigma,2.)))*exp(-(pow(x,2.)+pow(y,2.))/(2.*pow(sigma,2.)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    //vec4 col = texture(iChannel0, uv);\n    \n    vec2 texelSize=1.0/vec2(textureSize(iChannel1,0));\n    \n    vec4 blur = vec4(0.);\n\n        \n    const int size=20;\n    float sigma=10.;\n    \n    int ind = size/2;\n    float sum=0.;\n    float res[size*size];\n    \n    if (iFrame != 0)\n    {\n        fragColor = texture(iChannel0, uv);\n        \n    }\n    else\n    {\n        for (int x=-ind; x<= ind; x+=1)\n        {\n            for (int y=-ind; y<= ind; y+=1)\n            {\n                float val = G(float(x) , float(y) , sigma);\n                sum+=val;\n\n                vec2 offset = vec2(float(x), float(y))*texelSize;\n                vec4 tCol=texture(iChannel1, uv+offset);\n\n                blur+=tCol*val;\n            }\n        }\n\n        blur/=sum;\n        fragColor = vec4(blur);\n        \n    }\n\n\n}\n","name":"Buffer C","description":"","type":"buffer"}]}