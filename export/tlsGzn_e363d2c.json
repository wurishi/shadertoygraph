{"ver":"0.1","info":{"id":"tlsGzn","date":"1555530147","viewed":627,"name":"Euclidian SDF Extrusion","username":"scratch13764","description":"Using the logic of a 2D box SDF to extrude 2D SDFs to 3D properly.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","sdf","font","euclidian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dist (vec2 p)\n{\n    return (texture(iChannel1, p/5.).a - .5)/32.*5.;\n}\n\nfloat extrudeDist (float d, float w, float y)\n{\n    return length(vec2(max(d, 0.), y - clamp(y, -w, w)))\n        + min(max(d, abs(y)-w), 0.);\n}\n\nfloat dist3D (vec3 p)\n{\n    float inflate = .5+.5*sin(iTime);\n    return extrudeDist(dist(p.xz), .05, p.y)-inflate*.05;\n}\n\nvec3 normal (vec3 p)\n{\n    return normalize(vec3(\n        dist3D(p + vec3(0.01,0,0)) - dist3D(p - vec3(0.01,0,0)),\n        dist3D(p + vec3(0,0.01,0)) - dist3D(p - vec3(0,0.01,0)),\n        dist3D(p + vec3(0,0,0.01)) - dist3D(p - vec3(0,0,0.01))\n    ));\n}\n\nvec3 marchRay (vec3 ro, vec3 rs)\n{\n    float d = .0;\n    float m;\n    vec3 r;\n    for (int i = 0; i <= 150 && d <= 10.; i++)\n    {\n        vec3 r = ro + rs*d;\n        m = dist3D(r);\n        if (m <= 0.001) return r;\n        d += m*.7;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    \n    float a = (-sin(iTime/5.)-1.)*.35;\n    \n    vec3 ro = vec3(iTime/5., sin(iTime/5.)*1.5-2., 0);\n    vec3 rs = normalize(vec3(uv.x, 1, uv.y));\n    rs.xy *= mat2(cos(a), -sin(a), sin(a), cos(a));\n    \n    vec3 ri = marchRay (ro, rs);\n    \n    vec3 norm = normal(ri);\n    vec4 lambert = vec4(dot(norm, normalize(vec3(0,0,2))))*.5+.5;\n    fragColor = mix(texture(iChannel0, reflect(rs, norm).xzy), lambert, .6);\n}","name":"Image","description":"","type":"image"}]}