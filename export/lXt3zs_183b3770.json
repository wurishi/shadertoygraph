{"ver":"0.1","info":{"id":"lXt3zs","date":"1716911022","viewed":46,"name":"surface of the sun","username":"cheesefollowsyou","description":"Just a ton of Brownian noise.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","cool"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = hash12(i);\n    float b = hash12(i + vec2(1.0, 0.0));\n    float c = hash12(i + vec2(0.0, 1.0));\n    float d = hash12(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * abs(noise(st));\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nvec3 gradiant (in vec3 col1, in vec3 col2, in float x) {\n    return (col2 * x) + col1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Distance between center and uv\n    float dist = distance(uv, vec2(.5));\n\n    // Time varying pixel color\n    vec3 col = vec3(gradiant(vec3(1.,0.341,0.2), vec3(0.992,0.816,0.09), fbm(uv*10.*fbm(uv*6.43+sin(iTime*.4))*fbm(uv*1.23+cos(iTime*.7)))*fbm(uv*13.72+sin(iTime*2.14*fbm(uv*.0033)))));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}