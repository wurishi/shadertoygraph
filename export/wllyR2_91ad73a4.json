{"ver":"0.1","info":{"id":"wllyR2","date":"1592537445","viewed":255,"name":"BoS - Shapes","username":"zeta","description":"https://thebookofshaders.com/07/\nToying around with bounding boxes proportions, border smoothing and simple animation.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["thebookofshaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nvec3 box(vec2 uv, vec4 bounds, float smth)  // left, right, top, bottom\n{\n    return vec3(\n        smoothstep(bounds.x, bounds.x + smth, uv.x) *\n        smoothstep(bounds.y, bounds.y + smth, 1.0 - uv.x) *\n        smoothstep(bounds.z, bounds.z + smth, 1.0 - uv.y) *\n        smoothstep(bounds.w, bounds.w + smth, uv.y)\n    );\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 m = iMouse.xy / iResolution.xy;\n    \n    vec3 c1 = vec3(250, 142, 209) / 255.0;\n    vec3 c2 = vec3(58, 0, 79) / 255.0;\n    \n    float nsquares = 20.0;\n    \n    float x = floor(uv.x * nsquares) / nsquares;\n\n    \n    float pct = (1.0 - cos(iTime + x * PI * 2.0)) / 2.0;\n    float pct_bot = (1. - cos(iTime+PI+x * PI * 2.0)) / 2.0;\n    float pct_col = (1.0 - cos(iTime + (x - PI*2.) * PI * 2.0)) / 2.0;\n    float pct_smooth = pct_col;\n    \n    vec4 bounds = vec4(x,\n                       1.0 - x - 0.03,\n                       0.3 * pct,\n                       0.3 * pct_bot);\n\n    vec3 b = box(uv, bounds, mix(0.001, 0.01, pct_smooth));\n    vec3 b_col = b * mix(c1, c2, pct_col);\n    \n    vec3 col = b_col;\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}