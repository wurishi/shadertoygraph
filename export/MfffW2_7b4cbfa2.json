{"ver":"0.1","info":{"id":"MfffW2","date":"1724377801","viewed":6,"name":"Walk on Spheres Sampling w\\ Tet ","username":"alpers_shadertoy","description":"The generalized winding number is used for the containment query, and walk-on spheres are used for sampling. Alternates between sampling with trilinear interpolation for reference.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["volume","point","finite","element","containment","query"],"hasliked":0,"parentid":"43d3zn","parentname":"Point Containment - Tetrahedron"},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2024 Nate Morrical & Alper Sahistan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#if HW_PERFORMANCE==0\n#define NUM_STEPS 16\n#else\n#define NUM_STEPS 32    \n#endif\n\n#define EXPOSURE 2.5\n\n#define EPS 1e-2\n\n//-----------------------------------------------------------------------------\n// Utils\n//-----------------------------------------------------------------------------\n\nvec3 viridis(float t) {\n    t = clamp(t, 0.0, 1.0);\n    \n    const vec3 c0 = vec3(0.2777273272234177, 0.005407344544966578, 0.3340998053353061);\n    const vec3 c1 = vec3(0.1050930431085774, 1.404613529898575, 1.384590162594685);\n    const vec3 c2 = vec3(-0.3308618287255563, 0.214847559468213, 0.09509516302823659);\n    const vec3 c3 = vec3(-4.634230498983486, -5.799100973351585, -19.33244095627987);\n    const vec3 c4 = vec3(6.228269936347081, 14.17993336680509, 56.69055260068105);\n    const vec3 c5 = vec3(4.776384997670288, -13.74514537774601, -65.35303263337234);\n    const vec3 c6 = vec3(-5.435455855934631, 4.645852612178535, 26.3124352495832);\n\n    vec3 srgb = c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n    return pow(srgb, vec3(2.2));\n}\n\nvec3 plasma(float t) {\n    t = clamp(t, 0.0, 1.0);\n\n    const vec3 c[10] = vec3[10](\n        vec3(0.050383, 0.029803, 0.527975),\n        vec3(0.274191, 0.012109, 0.622722),\n        vec3(0.447714, 0.002080, 0.660240),\n        vec3(0.610667, 0.090204, 0.619951),\n        vec3(0.740143, 0.213864, 0.524216),\n        vec3(0.846788, 0.342551, 0.420579),\n        vec3(0.928329, 0.472975, 0.326067),\n        vec3(0.983041, 0.624131, 0.227937),\n        vec3(0.991209, 0.790537, 0.149377),\n        vec3(0.940015, 0.975158, 0.131326)\n    );\n\n    // Scale t to the range [0, 9]\n    float scaledT = t * 9.0;\n    \n    // Find the indices of the two colors to interpolate between\n    int idx = int(floor(scaledT));\n    float frac = fract(scaledT);\n    \n    // Interpolate between the two colors\n    return mix(c[idx], c[idx + 1], frac);\n}\n\nvec4 over(vec4 a, vec4 b) {\n  vec4 result;\n  result.a = a.a + b.a * (1.f - a.a);\n  if (result.a == 0.f)\n    return a; // avoid NaN\n  result.rgb = (a.rgb * a.a + b.rgb * b.a * (1.f - a.a)) / result.a;\n  return result;\n}\n\n#define M_2PI 6.2831853071795865f\n#define M_GRC 0.61803398875f\n\n// Vertex positions for the element\nconst vec3 pa = vec3(sin((1.0 / 3.0) * M_2PI), -.75, cos((1.0 / 3.0) * M_2PI));\nconst vec3 pb = vec3(sin((2.0 / 3.0) * M_2PI), -.75, cos((2.0 / 3.0) * M_2PI));\nconst vec3 pc = vec3(sin((3.0 / 3.0) * M_2PI), -.75, cos((3.0 / 3.0) * M_2PI));\nconst vec3 pd = vec3( 0.0, .75, 0.0);\n\n\n//-----------------------------------------------------------------------------\n// Main functions\n//-----------------------------------------------------------------------------\n\n// Node positions, with \"y\" up and data values stored in \"w\" \nstruct Tetrahedron {\n    // Bottom triangle (counter-clockwise order)\n    vec4 v0, v1, v2;\n    \n    // Top point\n    vec4 v3;\n};\n\nTetrahedron CreateTetrahedron() {\n    Tetrahedron tet;\n    \n    float time = iTime * 10.0;\n    const float angle_offset = M_2PI / 3.0;\n\n    // Base tri\n    tet.v0 = vec4(cos(1.0 * angle_offset), -0.75, sin(1.0 * angle_offset), .5 + .5 * cos(time*0.1));\n    tet.v1 = vec4(cos(2.0 * angle_offset), -0.75, sin(2.0 * angle_offset), .5 + .5 * cos(time*0.2));\n    tet.v2 = vec4(cos(3.0 * angle_offset), -0.75, sin(3.0 * angle_offset), .5 + .5 * cos(time*0.3));\n\n    // Top point\n    tet.v3 = vec4( 0.0, .75, 0.0, .5 + .5 * cos(time*0.4));\n\n    return tet;\n}\n\nbool interpolate(vec3 P, in Tetrahedron e, out float value) {\n    float vol_all = determinant(mat3(e.v1.xyz - e.v0.xyz, e.v2.xyz - e.v0.xyz, e.v3.xyz - e.v0.xyz)); \n    if (vol_all == 0.0) return false;\n    float w0 = determinant(mat3(P - e.v1.xyz, e.v3.xyz - e.v1.xyz, e.v2.xyz - e.v1.xyz)) / vol_all;\n    if (w0 < 0.0) return false;\n    float w1 = determinant(mat3(P - e.v0.xyz, e.v2.xyz - e.v0.xyz, e.v3.xyz - e.v0.xyz)) / vol_all;\n    if (w1 < 0.0) return false;\n    float w2 = determinant(mat3(P - e.v0.xyz, e.v3.xyz - e.v0.xyz, e.v1.xyz - e.v0.xyz)) / vol_all;\n    if (w2 < 0.0) return false;\n    float w3 = determinant(mat3(P - e.v0.xyz, e.v1.xyz - e.v0.xyz, e.v2.xyz - e.v0.xyz)) / vol_all;\n    if (w3 < 0.0) return false;\n    value = e.v0.w * w0 + e.v1.w * w1 + e.v2.w * w2 + e.v3.w * w3;\n    return true;\n}\n\n\nstruct Ray {\n    vec3 o;\n    vec3 d;\n};\n\nvec3 sampleUniformSphere(vec3 seed)\n{\n    // Use time and ray origin to generate a seed\n    float tmp = dot(seed, vec3(12.9898, 78.233, 45.164)) + iTime;\n    vec3 randomDir;\n    \n    // Generate random numbers using a hash function\n    float u = fract(sin(tmp) * 43758.5453);\n    float v = fract(sin(tmp + u) * 24758.3210);\n    \n    float theta = 2.0 * 3.14159265359 * u;\n    float phi = acos(2.0 * v - 1.0);\n    \n    // Convert spherical coordinates to Cartesian coordinates\n    randomDir.x = sin(phi) * cos(theta);\n    randomDir.y = sin(phi) * sin(theta);\n    randomDir.z = cos(phi);\n    \n    return randomDir;\n}\n\nbool rayIntersectsTri(Ray ray, vec3 A, vec3 B, vec3 C, out vec3 normal, out float t, out vec3 bary)\n{\n    normal = normalize(cross(B - A, C - A));\n\n    // Calculate the plane constant d = -dot(normal, A)\n    float d = -dot(normal, A);\n\n    // Calculate the intersection point t using the plane equation\n    t = -(dot(normal, ray.o) + d) / dot(normal, ray.d);\n\n    if (t < 0.0) return false; // Intersection behind the ray origin\n\n    vec3 Q = ray.o + ray.d * t; // Hit point\n\n    float areaABC = 1.0 / dot(cross(B - A, C - A), normal);\n    float areaQBC = dot(cross(B - Q, C - Q), normal);\n    float areaAQC = dot(cross(C - Q, A - Q), normal);\n    float areaABQ = dot(cross(A - Q, B - Q), normal);\n    \n    bary = vec3(areaQBC, areaAQC, areaABQ) * areaABC;\n\n    return areaQBC >= 0.0 && areaAQC >= 0.0 && areaABQ >= 0.0;\n}\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat maxcomp( in vec2 v ) { return max(v.x,v.y); }\n\nvec3 closest2Triangle(in vec3 p, in vec3 v0, in vec3 v1, in vec3 v2, out vec3 bary)\n{\n    vec3 v10 = v1 - v0; vec3 p0 = p - v0;\n    vec3 v21 = v2 - v1; vec3 p1 = p - v1;\n    vec3 v02 = v0 - v2; vec3 p2 = p - v2;\n    vec3 nor = cross( v10, v02 );\n\n    vec3  q = cross( nor, p0 );\n    float d = 1.0/dot2(nor);\n    bary.x = d*dot( q, v02 );\n    bary.y = d*dot( q, v10 );\n    bary.z = 1.0-bary.x-bary.y;\n    \n         if( bary.x<0.0 ) { bary.z = clamp( dot(p2,v02)/dot2(v02), 0.0, 1.0 ); bary.x = 0.0; bary.y = 1.0-bary.z; }\n    else if( bary.y<0.0 ) { bary.x = clamp( dot(p0,v10)/dot2(v10), 0.0, 1.0 ); bary.y = 0.0; bary.z = 1.0-bary.x; }\n\telse if( bary.z<0.0 ) { bary.y = clamp( dot(p1,v21)/dot2(v21), 0.0, 1.0 ); bary.z = 0.0; bary.x = 1.0-bary.y; }\n    \n    return bary.x*v1 + bary.y*v2 + bary.z*v0;\n    \n}\n\n\nbool pointInsideTet(vec3 P, in Tetrahedron e)\n{\n    // Sample a random direction on the unit sphere\n    Ray ray;\n    ray.o = P;\n    ray.d = sampleUniformSphere(P);\n    \n    float minDist = 1e20;\n    float curDist = 1e20;\n    vec3 curNormal;\n    vec3 closestNormal;\n    vec3 bary;\n    \n    \n    // Find the closest face\n    //TODO if any face is hit find the closest face to the ray origin\n    if (rayIntersectsTri(ray, e.v0.xyz, e.v1.xyz, e.v2.xyz, curNormal, curDist, bary)\n        && curDist < minDist)\n    {\n        minDist = curDist;\n        closestNormal = curNormal;\n    }\n    if (rayIntersectsTri(ray, e.v0.xyz, e.v3.xyz, e.v1.xyz, curNormal, curDist, bary)\n        && curDist < minDist)\n    {\n        minDist = curDist;\n        closestNormal = curNormal;\n    }\n    if (rayIntersectsTri(ray, e.v1.xyz, e.v3.xyz, e.v2.xyz, curNormal, curDist, bary)\n        && curDist < minDist)\n    {\n        minDist = curDist;\n        closestNormal = curNormal;\n    }\n    if (rayIntersectsTri(ray, e.v2.xyz, e.v3.xyz, e.v0.xyz, curNormal, curDist, bary)\n        && curDist < minDist)\n    {\n        minDist = curDist;\n        closestNormal = curNormal;\n    }\n\n    // Now check the normal of the closest face\n    if (minDist < 1e20 && dot(closestNormal, ray.d) > 0.0)\n    {\n        return true;\n    }\n    \n    return false;\n}\n\nfloat sampleTet(vec3 P, Tetrahedron e)\n{\n    float minDist = 1e20;\n    vec3 bary;\n    Ray ray;\n    float value, dist;\n    ray.o = P;\n    for(int iteration = 0; iteration < 25; iteration++)\n    {        \n        // Find the closest face\n        vec3 p = closest2Triangle(ray.o, e.v0.xyz, e.v1.xyz, e.v2.xyz, bary);\n        dist = length(p-ray.o);\n        if (dist < minDist)\n        {\n            value = bary.x * e.v0.w + bary.y * e.v1.w + bary.x * e.v2.w; \n            minDist = dist;\n        }\n        p = closest2Triangle(ray.o, e.v0.xyz, e.v3.xyz, e.v1.xyz, bary);\n        dist = length(p-ray.o);\n        if (dist < minDist)\n        {\n            value = bary.x * e.v0.w + bary.y * e.v3.w + bary.x * e.v1.w; \n            minDist = dist;\n        }\n        p = closest2Triangle(ray.o, e.v1.xyz, e.v3.xyz, e.v2.xyz, bary);\n        dist = length(p-ray.o);\n        if (dist < minDist)\n        {\n            value = bary.x * e.v1.w + bary.y * e.v3.w + bary.x * e.v2.w; \n            minDist = dist;\n        }\n        p = closest2Triangle(ray.o, e.v2.xyz, e.v3.xyz, e.v0.xyz, bary);\n        dist = length(p-ray.o);\n        if (dist < minDist)\n        {\n            value = bary.x * e.v2.w + bary.y * e.v3.w + bary.x * e.v0.w; \n            minDist = dist;\n        }\n        \n        if(length(minDist) < EPS)\n        {\n            //enable for edge contour\n            /*if(iteration ==0)\n                return 0.0;*/\n            return value;\n        }\n        \n        ray.d = sampleUniformSphere(P);\n        ray.o += ray.d * minDist;\n    }\n}\n\n//-----------------------------------------------------------------------------\n// Execution\n//-----------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 v = -1.0 + 2.0*q;\n    v.x *= iResolution.x/ iResolution.y;\n    \n    Ray ray;\n           \n    float an = 0.25*iTime + 6.283185*iMouse.x/iResolution.x;\n    ray.o = vec3( 3.5*cos(an), 0.7, 3.5*sin(an) );\n    vec3 ta = vec3( 0.0, -0.1, 0.0 );\n    \n    // camera matrix\n    vec3 ww = normalize( ta - ray.o );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n    // create view ray\n    ray.d = normalize( v.x*uu + v.y*vv + 3.0*ww );\n    \n    // create element\n    Tetrahedron tet = CreateTetrahedron();\n        \n\tvec4 color = vec4(.0);\n\t\n    float startRayOffset = 0.0f;\n    int frame = iFrame % 64;\n    \n    float timeElapsed = mod(iTime, 40.0);\n        \n    // blue noise\n    startRayOffset = texture(iChannel0, fragCoord / 1024.0f).r;\n    startRayOffset = fract(startRayOffset + float(frame) * M_GRC);\n\t\n\t\n\tfloat zMin         = 2.0;\n    float zMax         = 5.0;\n\tfloat step         = (zMax - zMin) / float(NUM_STEPS);\n    ray.o             += ray.d * zMin + ray.d * step * startRayOffset;    \n\tint zer = int(min(iTime, 0.)); // Hack to force loop unrolling.\n    for(int i = zer; i < NUM_STEPS; i++)\n\t{\n        float value;\n        float distToClosestFace = 1e20;\n        if( timeElapsed < 20.0 && pointInsideTet(ray.o,tet))\n        {\n            vec3 rgb = plasma(sampleTet(ray.o, tet)) * EXPOSURE;\n            float density = 2.0;\n            float rho = 1.0 - exp(-density * step);\n            color = over(color, vec4(rgb, rho));\n            if (color.a > .95) break;\n        }\n        else if (timeElapsed >= 20.0 && interpolate(ray.o, tet, value)) {\n            // Colormapped value and a hardcoded optical density\n            vec3 rgb = plasma(value) * EXPOSURE;\n            float density = 2.0;\n            float rho = 1.0 - exp(-density * step);\n            color = over(color, vec4(rgb, rho));\n            if (color.a > .95) break;\n        }\n\t\tray.o += ray.d*step;\n\t}\n         \n    // Composite over a background\n    color = over(color, vec4(vec3(0.01)*(1.0-0.2*length(v)), 1.0));\n\n    color.rgb = pow(color.rgb, vec3(1.0/2.2));\n    \n    // cheap dithering\n    color.rgb += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)/512.0;\n\n    fragColor = color;\n}\n","name":"Image","description":"","type":"image"}]}