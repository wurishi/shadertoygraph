{"ver":"0.1","info":{"id":"dtXBWM","date":"1692990046","viewed":111,"name":" cosmos lense","username":"nayk","description":"lense strars","likes":4,"published":1,"flags":1,"usePreview":0,"tags":["ripplecosmosstarsgalaxyuniverse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*original https://www.shadertoy.com/view/lslyRn*/\n\n/* фнунди*/\n\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.00 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.350\nfloat sdStar(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    \n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n\tfloat h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\nconst float PI = 3.14;\n\nmat2 rotationMatrix(float angle)\n{\n\tangle *= PI / 180.0;\n    float s=sin(angle), c=cos(angle);\n    return mat2( c, s, -s, c );\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); \n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; \n\t\t\ta+=abs(length(p)-pa); \n\t\t\tpa=length(p);\n            \n            p.xy*= rotationMatrix( 10.0 * -iTime );\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); \n\t\ta*=a*a; \n\t\tif (r>6) fade*=1.-dm; \n\t\t\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; \n\t\tfade*=distfading; \n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); \n\tfragColor = vec4(v*.01,1.);\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n     float d = sdStar( uv, 1.0, 0.5 + 1.01*sin(iTime*0.11) );\n\n\tfloat w = (0.0 - (uv.x)) * (iResolution.x / iResolution.y);\n    float h = 0.0 - uv.y;\n\tfloat distanceFromCenter = sqrt(w * w + h * h);\n\t uv.xy*= rotationMatrix( 10.0 *iTime );\n\tfloat sinArg = distanceFromCenter * 10.0 + iTime * 2.0;\n\tfloat slope = cos(sinArg) ;\n\tvec3 dir=vec3(uv*zoom,1.*d)/slope*2.1;\n\tfloat time=iTime*speed+.25;\n\n\t\n\tvec3 from=vec3(1.,.5,0.5);\n\tfrom+=vec3(time*0.,time,-2.);\n\t\tfrom.xy*= rotationMatrix( 1.0 *iTime );\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n}\n","name":"Image","description":"","type":"image"}]}