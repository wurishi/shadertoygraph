{"ver":"0.1","info":{"id":"DdXXzX","date":"1695668545","viewed":44,"name":"Polar and Modular","username":"DigitalShadow","description":"Applying a polar coordinate mapping to rectangles that screenwrap","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["polar","modulus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI2 6.28318530718\n\n\nmat2 rotationMatrix(float angle){\n    angle *= PI2;\n    float s = sin(angle), c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\n//polar coordinate conversion function\nvec2 polar(vec2 uv, float zoom, vec2 offset){\n    uv = uv + offset;\n    vec2 st = vec2(atan((uv.x)/zoom, uv.y/zoom), length(uv)/zoom);\n    return vec2(st.x/(iResolution.x / iResolution.y)/2., st.y - .5);  //uses aspect ratio for smooth wrap\n}\n\n//SDF value for a 1D axis aligned band\nfloat band(float i, float min, float max, float blur){\n    return smoothstep(min-blur, min+blur, i) * smoothstep(max+blur, max-blur, i);\n}\n\n//SDF value for a 2D rectangle confined to view area and warping around edges of screen\nfloat wrapRect(vec2 i, vec2 min, vec2 max, float blur){\n    float aspect = iResolution.x / iResolution.y;\n    float x1 = band(mod(i.x, aspect), min.x, max.x, blur);\n    float y1 = band(mod(i.y, 1.), min.y, max.y, blur);\n    float x2 = band(mod(i.x - aspect, aspect) - aspect, min.x, max.x, blur);\n    float y2 = band(mod(i.y - 1., 1.) - 1., min.y, max.y, blur);\n    return (x1+x2)*(y1+y2);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //set coordinates from 0 <> 1 and account for aspect ratio\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/iResolution.y;\n    \n    vec2 uvP = polar(uv, 1.0, vec2(0.0, 0.0));\n    \n    vec2 offset = vec2(cos(iTime/4.0), sin(iTime/4.0));\n\n    //bg color\n    vec3 bg = vec3(0.0, 0.5, 0.0);\n    vec3 col1 = vec3(0.0, 0.7, 0.0);\n    \n    \n    //box coordinates\n    vec2 box1A = vec2(-0.67, 0.16);\n    vec2 box1B = vec2(-0.24, 0.51);\n    vec2 box2A = vec2(0.27, 0.64);\n    vec2 box2B = vec2(0.33, 0.86);\n    vec2 box3A = vec2(-1.0, 0.-0.25);\n    vec2 box3B = vec2(-0.28, -0.05);\n    vec2 box4A = vec2(0.07, 0.48);\n    vec2 box4B = vec2(0.48, 0.57);\n  \n    vec2 shadowOffset = vec2(-0.05, 0.05);\n    \n    //get box layer mask value\n    float box = 0.0;\n    box += wrapRect(uvP+offset, box1A, box1B, 0.0001);\n    box += wrapRect(uvP+offset, box2A, box2B, 0.0001);\n    box += wrapRect(uvP+offset, box3A, box3B, 0.0001);\n    box += wrapRect(uvP+offset, box4A, box4B, 0.0001);\n    \n    //get shadow layer mask value\n    float shadow = 0.0;\n    shadow += wrapRect(polar(uv,1.0,shadowOffset)+offset, box1A, box1B, 0.07);\n    shadow += wrapRect(polar(uv,1.0,shadowOffset)+offset, box2A, box2B, 0.07);\n    shadow += wrapRect(polar(uv,1.0,shadowOffset)+offset, box3A, box3B, 0.07);\n    shadow += wrapRect(polar(uv,1.0,shadowOffset)+offset, box4A, box4B, 0.07);\n    \n    \n   \n    \n    \n    //composite image\n    vec3 screen = bg;                 //draw background color\n    screen -= shadow * 0.15;          //subtract shadow value\n    screen = screen * (1.0 - box);    //cut out box shape\n    screen += box*col1;               //fill in box color\n\n     //non polar boxes\n    box = 0.0;\n    shadow =0.0;\n    box += wrapRect(uv+offset, box1A, box1B, 0.0001);\n    box += wrapRect(uv+offset, box2A, box2B, 0.0001);\n    box += wrapRect(uv+offset, box3A, box3B, 0.0001);\n    box += wrapRect(uv+offset, box4A, box4B, 0.0001);\n    shadow += wrapRect(uv+shadowOffset+offset, box1A, box1B, 0.07);\n    shadow += wrapRect(uv+shadowOffset+offset, box2A, box2B, 0.07);\n    shadow += wrapRect(uv+shadowOffset+offset, box3A, box3B, 0.07);\n    shadow += wrapRect(uv+shadowOffset+offset, box4A, box4B, 0.07);\n    box *= 0.7;\n    shadow *= 0.7;\n    \n    screen -= shadow * 0.15;          //subtract shadow value\n    screen = screen * (1.0 - box);    //cut out box shape\n    screen += box*col1;               //fill in box color\n\n\n\n    // Output to screen\n    fragColor = vec4(screen, 1.0);\n}","name":"Image","description":"","type":"image"}]}