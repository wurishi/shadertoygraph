{"ver":"0.1","info":{"id":"stGSDW","date":"1640750982","viewed":95,"name":"Raymarch Wheel","username":"Rockyee","description":"raymarch wheel","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["wheel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat smin(float a, float b, float k)\n{\n    float h = clamp(.5 + .5 * (b-a)/k,0., 1.);\n    return mix(b,a,h) - k*h*(1.-h);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b,  float r)\n{\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    float t = dot(ab, ap) / dot(ab, ab);\n    vec3 c = a + t * ab;\n    float x = length(p - c) - r;\n    float y = (abs(t - .5) - .5) * length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x,y), 0.);\n    \n    return e + i;\n}\n\nfloat GetDist(vec3 p) {\n\n    p.yz *= Rot(iTime * 2.);\n\n    float d1 = sdCylinder(p, vec3(.05, 0., 0.), vec3(-.05, 0., 0.), 1.) - .02;\n    float d2 = sdCylinder(p, vec3(.11, 0., 0.), vec3(-.11, 0., 0.), .88);\n    float d3 = sdCylinder(p, vec3(.05, 0., 0.), vec3(-.05, 0., 0.), .2) - .02;\n    float d = max(d1, -d2);\n    d = min(d, d3);\n    \n    \n    float d4 = sdCylinder(vec3(p.x, abs(p.y), abs(p.z)), vec3(.0, 0.924, 0.383), vec3(0), 0.04);\n    float d5 = sdCylinder(vec3(p.x, abs(p.y), abs(p.z)), vec3(.0, 0.383, 0.924), vec3(0), 0.04);\n    d = min(d, d4);\n    d = min(d, d5);\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    m.x -= 0.1;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    vec3 col = 0.12 + 0.12*cos(iTime+uv.xyx+vec3(0,2,4));\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        \n        p.yz *= Rot(iTime * 2.);\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        //col = vec3(dif);\n        \n        p *= 5.;\n        \n        vec3 colXZ = texture(iChannel0, p.xz*.5+.5).rgb;\n        vec3 colYZ = texture(iChannel0, p.yz*.5+.5).rgb;\n        vec3 colXY = texture(iChannel0, p.xy*.5+.5).rgb;\n        \n        n = abs(n);\n        \n        col = colYZ * n.x + colXZ * n.y + colXY * n.z;\n        col *= dif;\n        col = pow(col, vec3(.4545));\t// gamma correction\n    }\n    \n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}