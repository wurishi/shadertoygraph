{"ver":"0.1","info":{"id":"4fyyRw","date":"1731596637","viewed":168,"name":"lightning from space","username":"nayk","description":"source https://www.shadertoy.com/view/MdXSzS","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["space","cosmos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265358979\n#define N 20\n\n#define time iTime*0.1\n#define resolution iResolution.xy\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n vec2 uv = fragCoord/iResolution.xy-0.5;\n  vec2 uv2 = fragCoord/iResolution.xy-0.5;\n float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n \n vec3 col;\n for (float i = 0.0; i < 4.0; i++) {\n        uv2 = fract(uv2 * 1.5) - 0.5;\n\n        float d = length(uv2) * exp(-length(uv2));\n\n        col = palette(length(uv) + i*.4 + iTime*.4);\n\n}\nvec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n\n\tvec3 color1 = vec3(0.0, 0.3, 0.5);\n\tvec3 color2 = vec3(0.5, 0.0, 0.3);\n\t\n\tfloat f = 0.0;\n\tfloat g = 0.0;\n\tfloat h = 0.0;\n\t\n\tfor(float i = 0.0; i < 80.0; i++){\n\t\tif (floor( 41.0) < i)\n\t\t\tbreak;\n\t\tfloat s = sin(time * i * PI / 2.0) * 0.8;\n\t\tfloat c = cos(time * i * PI / 2.0) * 0.8;\n\t\tfloat d = abs(p.x/i + c);\n\t\tfloat e = abs(p.y + s);\n\t\tf += 0.001 / d;\n\t\tg += 0.001 / e;\n\t\th += 0.00003 / (d * e);\n\t}\n    \n    vec2 uPos = ( gl_FragCoord.xy / resolution.y );//normalize wrt y axis\n    \n\tuPos -= vec2((resolution.x/resolution.y)/2.0, 0.5);//shift origin to center\nuPos*=mat2(cos(iTime),sin(iTime), -sin(iTime),cos(iTime));\n\t\n\tfloat multiplier = 0.0005; // Grosseur\n\tconst float step = 0.006; //segmentation\n\tconst float loop = 80.0; //Longueur\n\tconst float timeSCale = 0.5; // Vitesse\n\t vec2 m = vec2(2.0 - 1.0,2.0- 1.0);\n    vec2 p3= (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n    float lambda = time*2.5;\n\n    float t3 =0.02/abs(tan(lambda) - length(p3));\n    float t2 = atan(p.y, p.x) + time;\nfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\t\n\tfloat s = 0.0;\n\tfor (int i = 0; i < 90; i++)\n\t{\n\t\tvec3 p = s * vec3(uv, cos(iTime*0.101));\n\n\t\tp += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1);\n\t\tfor (int i = 0; i < 8; i++)\tp = abs(p) / dot(p,p) - 0.659;\n\t\tv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\n\t\tv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\n\t\tv3 += length(p.xy*10.) * .0003;\n\t\ts  += .035;\n\t}\n\t\n\tfloat len = length(uv);\n\tv1 *= smoothstep(.7, .0, len);\n\tv2 *= smoothstep(.5, .0, len);\n\tv3 *= smoothstep(.9, .0, len);\n\t\n\tvec3 col2 = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n\t\t\t\t\t(v1 + v3) * .3,\n\t\t\t\t\t v2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n    vec2 something = vec2(1., (sin(time)+ 1.)*0.5);\n\n    float dotProduct = dot(vec2(t3),something)/length(p);\n\n\tvec3 blueGodColor = vec3(0.0);\n\tfor(float i=1.0;i<loop;i++){\t\t\n\t\tfloat t = time*timeSCale-step*i*i;\n\t\tvec2 point = vec2(0.75*sin(t), 0.5*sin(t))*col2.xy;\n        point*=mat2(cos(iTime),sin(iTime), -sin(iTime),cos(iTime));\n\t\tpoint += vec2(1.75*cos(t*4.0), 0.5*sin(t*3.0)) ;\n\t\tpoint /= 11. * sin(i)*dotProduct;\n\t\tfloat componentColor= multiplier/((uPos.x-point.x)*(uPos.x-point.x) + (uPos.y-point.y)*(uPos.y-point.y))/i;\n\t\tblueGodColor += vec3(componentColor/3.0, componentColor/3.0, componentColor);\n\t}\n\t\n\t\n\tvec3 color3 = vec3(0,0,0);\n\tcolor3 += pow(blueGodColor,vec3(.33,0.3,0.58)*2.);\n   \nfloat size = 0.2;\n\tfloat dist = 0.0;\n\tfloat ang = 0.0;\n\tvec2 pos = vec2(0.0,0.0);\n\tvec3 color = vec3(0.1);\n\t\n\tfor(int i=0; i<N; i++){\n\t\tfloat r = 0.4;\n\t\tang += PI / (float(N)*0.5);\n\t\tpos = vec2(cos(ang),sin(ang))*r*cos(time+ang/.1);\n\t\tdist += size / distance(pos,uv);\n\t\tvec3 c = vec3(0.05);\n\t\tcolor = c*dist*(f*g*h);\n\t}\n\tfragColor = vec4(color3*vec3(0.1,.3,1.2)*10.*col2*1., 1.0);\n    }","name":"Image","description":"","type":"image"}]}