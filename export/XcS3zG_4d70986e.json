{"ver":"0.1","info":{"id":"XcS3zG","date":"1704352971","viewed":65,"name":"Radioactive Globule","username":"vichoeq","description":"Playing around with raymarching and simplex noise. I am obsessed with the glowy effect of the iteration count <3 shoutout to kishimisu for his tutorial: https://www.youtube.com/watch?v=khblXafu7iA","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","noise","sdf","simplex","blob"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FLT_MAX 3.402823466e+38\n// Epsilon\n#define e 0.001 \n#define PI 3.14159\n#define rotate(a)           mat2( cos(a), -sin(a), sin(a), cos(a) )\n\nconst int LN = 6;\n\nvec3 LIGHTS[LN] = vec3[LN](   \n    vec3(0,0, 2),\n    vec3(0,0,-2),\n    vec3(0,2,0),\n    vec3(0,-2,0),\n    vec3(2,0,0),\n    vec3(-2,0,0)   \n);\n\nfloat map(vec3 p)\n{   \n    float noise = 0.1*snoise(vec4(2.*normalize(p), iTime*0.2)); \n    return length(p - vec3(0)) - 0.5 - noise;\n}\n\nvec3 estimateNormal(vec3 p) \n{\n    return normalize(\n    vec3(\n        map(p + vec3(e,0,0)) - map(p - vec3(e,0,0)),\n        map(p + vec3(0,e,0)) - map(p - vec3(0,e,0)),\n        map(p + vec3(0,0,e)) - map(p - vec3(0,0,e))\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Orbiting lights\n    mat2 rot = rotate(iTime*0.5);    \n    \n    LIGHTS[0].yz *= rot;\n    LIGHTS[1].yz *= rot;  \n    LIGHTS[2].xy *= rot;\n    LIGHTS[3].xy *= rot; \n    LIGHTS[4].xz *= rot;\n    LIGHTS[5].xz *= rot;     \n    \n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n\n    vec3 ro = vec3(0,0,-1);           // Ray origin\n    vec3 rd = normalize(vec3(uv, 1)); // Ray direction\n    vec3 col = vec3(0);\n    \n    float t = 0.;\n    \n    // Raymarching\n    for(float i = 0.; i < 80.; i++)\n    {\n        vec3 p = ro + rd * t;\n        \n        float d = map(p); \n        \n        t += d;       \n        \n        float glow = i / 80.;        \n        col = glow * ambientLight * 30.;\n        \n        // Collission\n        if (d < e)\n        {         \n            vec3 normal = estimateNormal(p);\n            \n            col += ambientLight * diffuseColor;\n        \n            for(int j = 0; j < LN; j++)\n            {\n                vec2 bp = BP(normal, LIGHTS[j], p, ro, 128.);\n            \n                col += (bp.x * diffuseColor + bp.y) * lightColor;\n            }\n            \n            float gamma = 2.2;\n            col = pow(col, vec3(1.0/gamma));            \n            \n            break;\n        }\n        // No collision\n        if (t > 100.)\n        {\n            \n            break;\n        }\n        \n    }     \n\n\n    // Output to screen\n    fragColor.rgb = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const vec3 lightColor = vec3(1,0.000,0) * 0.4;\nconst vec3 ambientLight = vec3(0.5, 0, 1)*0.1;\nconst vec3 diffuseColor = vec3(1);\n\n// Blinn-Phong\nvec2 BP(vec3 N, vec3 lP, vec3 vP, vec3 cP, float Y)\n{    \n    vec3 lD = normalize(lP - vP), \n         hD = normalize(lD + normalize(cP  - vP));\n    \n    float D = max(dot(N, lD), 0.0),\n          S = D*pow(max(dot(hD, N), 0.0), Y);         \n    \n    return vec2(D, S);\n}\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat permute(float x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n\n  return p;\n  }\n\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat snoise(vec4 v)\n  {\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                       -0.447213595499958); // -1 + 4 * G4\n\n// First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n// Permutations\n  i = mod289(i);\n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n  }\n","name":"Common","description":"","type":"common"}]}