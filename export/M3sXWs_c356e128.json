{"ver":"0.1","info":{"id":"M3sXWs","date":"1710167791","viewed":61,"name":"Daltonization Modification","username":"zel","description":"Modified daltonization shader used for a form of colorblind correction, research into already granted patent","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["colorblind"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modified Daltonization algorithm, used for patent https://patents.google.com/patent/US10878540B1/en?inventor=Karen+Elaine+Stevens\n// Released under EA's Patent Pledge, free to use by all.\n\n\nvec3 RgbToLms(vec3 color)\n{\n    float l = (17.8824 * color.r) + (43.5161 * color.g) + (4.11935 * color.b);\n    float m = (3.45565 * color.r) + (27.1554 * color.g) + (3.86714 * color.b);\n    float s = (0.0299566 * color.r) + (0.184309 * color.g) + (1.46709 * color.b);\n\treturn vec3(l,m,s);   \n}\n\nvec3 LmsToRgb(vec3 color)\n{\n    float r = (0.0809444479 * color.r) + (-0.130504409 * color.g) + (0.116721066 * color.b);\n    float g = (-0.0102485335 * color.r) + (0.0540193266 * color.g) + (-0.113614708 * color.b);\n    float b = (-0.000365296938 * color.r) + (-0.00412161469 * color.g) + (0.693511405 * color.b);\n\treturn vec3(r,g,b);  \n}\n\nvec4 Daltonize(vec4 color, float colorBlindProtanopiaFactor, float colorBlindDeuteranopiaFactor, float colorBlindTritanopiaFactor)\n{\n\tvec3 colorLMS = color.rgb;\n\tcolorLMS = RgbToLms(colorLMS);\n\t\n\tvec3 colorWeak;\n\t\n\tcolorWeak.r = (2.02344*colorLMS.g - 2.5281*colorLMS.b)*colorBlindProtanopiaFactor + colorLMS.r*(1.0-colorBlindProtanopiaFactor);\n\tcolorWeak.g = (0.494207*colorLMS.r + 1.24827*colorLMS.b)*colorBlindDeuteranopiaFactor + colorLMS.g*(1.0-colorBlindDeuteranopiaFactor);\n\tcolorWeak.b = (-0.395913*colorLMS.r + 0.801109*colorLMS.g)*colorBlindTritanopiaFactor + colorLMS.b*(1.0-colorBlindTritanopiaFactor);\n\t\n\tcolorWeak = LmsToRgb(colorWeak);\n\t\n\tcolorWeak = color.rgb - colorWeak;\n\t\n\tvec3  colorShift = colorWeak;\n    \n\tcolorShift.r = 0.0;\n    colorShift.g += 0.7*colorWeak.r;\n    colorShift.b += 0.7*colorWeak.r;\n        \n\tcolor.rgb += colorShift.rgb;\n\tcolor = clamp(color,0.0,1.0);\n\t\n\treturn color;\n}\n\n\n\nvec4 colorBands(vec2 uv, vec2 res)\n{\n    float pi = 3.14159;\n    float f = res.y/res.x;//-1.0;\n    uv.x = floor(uv.x*res.x+f);\n    \n    uv.y = floor(uv.y*res.y+f);\n    float period = uv.x*(pi/12.0);\n    float offset = (pi/14.0)*4.0;\n    \n    float r = clamp(sin(period+offset),0.0,1.0);\n\t\tr += clamp(sin(period-offset*3.0),0.0,1.0);\n    float g = clamp(sin(period+0.1),0.0,1.0);\n    float b = clamp(sin(period-offset),0.0,1.0);\n\n    vec4 color = vec4(r,g,b,1.0); \n    \n    return color;\n}\n\nvec4 colorChunks(vec2 uv, vec2 res)\n{\n    vec4 color = vec4(0.0,0.0,0.0,0.0);\n    if(uv.x < 0.33)\n    {\n       color = vec4(1.0,0.0,0.0,1.0);\n    }\n    else if (uv.x < 0.66)\n    {\n       color = vec4(0.0,1.0,0.0,1.0); \n        \n    }\n    else\n    {\n        \n       color = vec4(0.0,0.0,1.0,1.0);        \n    }\n    \n    return color;\n}\n\nvec4 colorTest(vec2 uv, vec2 res)\n{\n\tfloat r = 2.0*(uv.x - uv.y);\n    float g = 2.0*(1.0-uv.x - uv.y);\n    float b = 4.0*(uv.y);\n    \n    return clamp(vec4(r,g,b,1.0),0.0,1.0);\n}\n\n\nvec4 SeeRedWeak(vec4 color)\n{\n    vec3 colorOut = RgbToLms(color.rgb);\n        \n    colorOut.r = 2.02344*colorOut.g - 2.5281*colorOut.b;\n   \n    return vec4(LmsToRgb(colorOut.rgb), color.a);\n\n}\n\nvec4 SeeGreenWeak(vec4 color)\n{\n    vec3 colorOut = RgbToLms(color.rgb);\n        \n    colorOut.g = 0.494207*colorOut.r + 1.24827*colorOut.b;\n   \n    return vec4(LmsToRgb(colorOut.rgb), color.a);\n}\n\nvec4 SeeBlueWeak(vec4 color)\n{\n    vec3 colorOut = RgbToLms(color.rgb);\n        \n    colorOut.b = -0.395913*colorOut.r + 0.801109*colorOut.g;\n   \n    return vec4(LmsToRgb(colorOut.rgb), color.a);\n}\n\n\nvec4 SeeWeak(vec4 color, int weak)   \n{\n \tif(weak == 1)\n    {\n        color = SeeRedWeak(color);\n    }\n \tif(weak == 2)\n    {\n        color = SeeGreenWeak(color);\n    }\n \tif(weak == 3)\n    {\n        color = SeeBlueWeak(color);\n    }    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y = 1.0-uv.y;\n    float res = 15.0;\n\tvec4 color = colorBands(uv, vec2(res,res));\n\n    float colorBlindDaltonizeFactor = 0.9;\n    \n    if(uv.y > 0.25)\n    {\n        color.rgb = ((color.rgb - 0.5) * (1.0+colorBlindDaltonizeFactor*0.112)) + 0.5;\n        color.rgb -= 0.075*colorBlindDaltonizeFactor;\n    \n        if(uv.y > 0.75)\n        {\n    \t\tcolor = Daltonize(color, 0.0,0.0,1.0)*colorBlindDaltonizeFactor+ color*(1.0-colorBlindDaltonizeFactor);\n        }\n        else if(uv.y > 0.5)\n        {\n            color = Daltonize(color, 0.0,1.0,0.0)*colorBlindDaltonizeFactor+ color*(1.0-colorBlindDaltonizeFactor);\n        }\n        else\n        {\n            color = Daltonize(color, 1.0,0.0,0.0)*colorBlindDaltonizeFactor+ color*(1.0-colorBlindDaltonizeFactor);\n        }\n        \n        color.rgb = ((color.rgb - 0.5)) + 0.5;\n        color.rgb += 0.075*colorBlindDaltonizeFactor;\n    }\n    \n    fragColor = SeeWeak(color,0);\n\n}","name":"Image","description":"","type":"image"}]}