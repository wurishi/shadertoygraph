{"ver":"0.1","info":{"id":"mdsBzN","date":"1688546731","viewed":45,"name":"lightpool","username":"vivavolt","description":"Based on https://lo-th.github.io/Shader.lab/#alien but adding in a little movement and iridescence.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"shimmering\" by vivavolt. https://shadertoy.com/view/ddB3WR\n// 2023-07-05 08:45:11\n\n\nvec3 roty(vec3 p, float a) {\n    return p * mat3(cos(a), 0, -sin(a), 0, 1, 0, sin(a), 0, cos(a));\n}\n\nfloat map(in vec3 p) {\n\n    float res = 0.;\n    vec3 c = p;\n    for (int i = 0; i < 2; i++) \n    {\n        p = 16.0 * abs(p) / dot(p, p) - .7; \n        p.yz = vec2(p.y * p.y - p.z * p.z, 2. * abs(sin(iTime / 10.0))  * p.y * p.z);\n        res += exp(-10. * abs(dot(p, c)));\n    }\n    return res / 2.0;\n\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 raymarch(vec3 ro, vec3 rd) {\n\n    float t = 4.0;\n    vec3 col = vec3(0);\n    float c = 0.;\n    for (int i = 0; i < 16; i++) \n    {\n        t += 0.02 * exp(-1.0 * c);\n        c = map(ro + t * rd);\n        col = 0.98 * col + 0.08 * vec3(c * c, c, c * c * c);\n        col = 0.98 * col + 0.08 * vec3(c * c * c, c * c, c);\n        col = 0.98 * col + 0.08 * vec3(c, c * c * c, c * c);\n        col += c*c*c*c*pal((2.0*c*c)/5.0 + 0.1 + 0.2*sin(iTime / 5.0), vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n    }\n    return col;\n\n}\n\nvec3 normal(vec3 p) {\n\tfloat d = map(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        map(p-e.xyy),\n        map(p-e.yxy),\n        map(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat shadow(vec3 p) {\n    vec3 lightPos = vec3(4, 15, 1);\n    vec3 l = normalize(lightPos - p);\n    return dot(normal(p), l);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 vUv = fragCoord / iResolution.xy;\n    vec2 uv = ((vUv - 0.5) * 2.0) * vec2(iResolution.z, 1.0);\n\n    vec2 p = uv;//(vUv.xy - iResolution / 2.0) / (iResolution.y);\n    vec3 ro = roty(vec3(3.), iTime * 0.3 + iMouse.x);\n    vec3 uu = normalize(cross(ro, vec3(0.0, 1.0, 0.0)));\n    vec3 vv = normalize(cross(uu, ro));\n    vec3 rd = normalize(p.x * uu + p.y * vv - ro * 0.3);\n    fragColor.rgb = 0.5 * log(1.0 + raymarch(ro, rd));\n    \n    vec3 e = vec3(1.);\n    fragColor.xyz = 1./exp(pal(shadow(log(raymarch(ro, rd))), e, e, e, 0.35 * vec3(0.,0.33,0.66)));\n    \n    fragColor.a = 1.0;\n\n}","name":"Image","description":"","type":"image"}]}