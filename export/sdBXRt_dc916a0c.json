{"ver":"0.1","info":{"id":"sdBXRt","date":"1620783003","viewed":514,"name":"sine distance estimator","username":"michael0884","description":"huh","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["sdf","sine","de","huh"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.141592653;\nconst float fudgefactor = 0.6; //probably a better parameter exists \n\nfloat sinline(in vec2 p)\n{\n    p.x = p.x + pi*0.5; \n    p.y *= ((int(p.x/pi)%2 == 0)?1.0:-1.0)*sign(p.x);//reflection stuff\n    p.x = mod(p.x, pi) - pi*0.5; //repeat half periods\n    float e0 = sin(p.x) - p.y; //first estimate \n    float x1 = mix(p.x,-pi*0.5*sign(e0),abs(tanh(fudgefactor*e0/pi)));//update closest point estimate by hand\n    return 0.92*distance(p, vec2(x1, sin(x1))); //distance\n}\n\nfloat sdSphere(vec2 p, float R)\n{\n    return length(p) - R;\n}\n\nvoid mainImage( out vec4 C, in vec2 X )\n{\n    vec2 uv = 5.0*(X - iResolution.xy*0.5)/iResolution.y; \n    vec2 m = 5.0*(iMouse.xy - iResolution.xy*0.5)/iResolution.y;\n    \n    float sd = sinline(uv);\n    \n    float sdm = sinline(m);\n    \n    float l0 = smoothstep(0.02, 0.0, abs(sd)); \n    float l1 = smoothstep(0.02, 0.0, abs(sdSphere(uv - m, sdm))); \n\n    vec3 col = (cos(sd*100.0)*0.25 + 0.7)/(1.0 +25.0*sd*vec3(0.792,0.3,0.098));\n    // Output to screen\n    C = vec4(mix(col, vec3(1),max(l1,l0)),1.0);\n}","name":"Image","description":"","type":"image"}]}