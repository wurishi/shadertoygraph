{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define TAU 6.28318530717958647693\n#define E   2.71828182845904523536\n#define PHI 1.618033988749894\n\nvec2 iexp(float i) {\n    return vec2(cos(i), sin(i));\n}\n\nvec2 cmul(vec2 a, vec2 b) {\n    return vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\n\n\nfloat osc(vec2 uv, vec2 p, float f, float t) {\n    float r = length(uv-p);\n    return (sin(f*exp(0.003*r)*(TAU*r+t)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.0*uv - vec2(1.0);\n    uv.x *= iResolution.x / iResolution.y;\n\n    uv /= 0.2 + 0.7*length(uv);\n\n    float t = 0.01*iTime*TAU;\n\n    // Time varying pixel color\n    float v = (0.);\n    \n    const float N = 6.;\n    for (float i = 0.; i < N; i++) {\n        float f = TAU*i/N;\n        vec2 p = 2.5*iexp(t + f);\n\n        float a = cos(f+t * 3.);\\\n        a *=  sign(a)*a;\n        p *= a;\n        p.x += 1.5*sin(f+0.5*t);\n        \n        v += osc(uv, p, 3., 7.5*(t-f));\n    }\n    v = 0.5*v/N + 0.5;\n    \n    vec3 n = normalize(vec3(dFdx(v), dFdy(v), 2./iResolution.x)); \n        \n    vec3 col = mix(vec3(1), n, v*v);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lXdyWN","date":"1735175223","viewed":43,"name":"sleep interference ","username":"spac","description":"i need to sleep","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["interference","sleepdepreivation"],"hasliked":0,"parentid":"","parentname":""}}