{"ver":"0.1","info":{"id":"3ddGRf","date":"1568999387","viewed":73,"name":"pattern_rectangle","username":"hyunxi","description":"pattern_rectangle with scale translate and rotate","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rotate(vec3 uv,float theta)\n{\n    //rotate matrix\n    mat3 M = mat3(cos(theta),sin(theta),0,-sin(theta),cos(theta),0,0,0,1);\n    uv = M*uv;\n    return uv;\n}\n\nvec3 tranlate(vec3 uv,vec2 offset)\n{\n    //translate matrix\n    mat3 M = mat3(1.,0.,0.,0.,1.,0.,offset.x,offset.y,1.);\n    uv = M*uv;\n    return uv;\n}\n\nvec3 scale(vec3 uv,vec2 scale)\n{\n    //scale matrix\n    mat3 M = mat3(scale.x,0.,0.,0.,scale.y,0.,0.,0.,1.);\n    uv = M*uv;\n    return uv;\n}\n\nfloat band(float width, float feather, float coord )\n{\n    float c = 0.;\n    float edge1 = smoothstep(0.-width,0.-width+feather,coord);\n    float edge2 = smoothstep(0.+width+feather,0.+width,coord);\n    c = edge1 * edge2;\n    return c;\n}\n\nfloat rectangle(float theta,vec2 center, float width,float height,float feather, vec2 uv)\n{\n    uv = tranlate(vec3(uv,1.),-center).xy;\n    uv = rotate(vec3(uv,1.),-theta).xy;\n    uv = scale(vec3(uv,1.),vec2(1./.5,1./.5)).xy;\n\n    float c = 0.;\n    float b1 = band(width,feather,uv.x);\n    float b2 = band(height,feather,uv.y);\n    c = b1*b2;\n    return c;\n}\n\n\nfloat line (float pos,float coord,float pixelWidth)\n{\n    float c;\n    float p = pixelWidth;\n    float a1 = smoothstep(pos-p, pos+3.*p , coord);\n    float a2 = smoothstep(pos+3.*p, pos-p , coord);\n    return c = a1*a2;\n}\n\nfloat circle1(vec2 pos,float radius,float feature, vec2 uv)\n{\n    float d = distance(uv,pos);\n    float c = smoothstep(radius+feature,radius,d);\n    return c;\n}\n\n\nfloat debug_point(vec2 point,vec2 uv,float pixelWidth)\n{\n    float c;   \n    float d = distance(uv,point);\n    float circle = smoothstep(0.015,0.01,d); \n    float c1 = circle1(point,0.005,0.002,uv);\n    c = line (point.y,uv.y,pixelWidth)+line (point.x,uv.x,pixelWidth)+c1;\n    \n    return c ;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //ratio\n    float ratio = iResolution.x/iResolution.y;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord -iResolution.xy)/iResolution.y;\n    float pixelWidth = 1./min(iResolution.x,iResolution.y);\n    \n    float Pi = 3.14159265;\n    float theta = Pi/4.;\n    \n    float feather = 3.*pixelWidth;\n\n    vec2 center = vec2(0.5,0.1);\n    float width = .5;\n    float height = .2;\n\n    float c = rectangle(theta, center, width,height,feather,uv );\n\n    \n    c*=.5f;\n    //debug line\n    c += debug_point(center,uv,pixelWidth*1.);\n\n    vec3 col  = vec3(c);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}