{"ver":"0.1","info":{"id":"ms3cR7","date":"1694844688","viewed":48,"name":"00.test For Understanding","username":"Elawes","description":"从油管搬运的shader启蒙。","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t){\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(0.8,0.8,0.8);\n    vec3 d = vec3(0.263,0.416,0.557);\n    \n    return a + b*cos(6.28318*(c*t + d));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n//vec2为二维向量，fragColor为四维向量，包含rgb和一个表征透明度的a。\n{\n    vec2 uv = fragCoord / iResolution.xy;//对画布进行归一化处理；\n    \n    /////////////////////////////////////////////////////////////////////\n    //iResolution是一个三维向量。在此处取其二维即可。\n    //iResolution.xy等效于vec2(iResolution.x,iResolution.y);\n    //iResolution是当前分辨率的向量，保存当前画布的大小（长、宽、深度）。\n    //这种语法v.xy很常见，在任意语法上都可以使用。\n    \n    //此时的uv获得了整个平面的坐标，其x,y坐标的区间为(0,1);\n    \n    //vec相除同样可以表示两个对应量相除，彼此之间有所照应。\n    //相减同样表示对应量相减；\n    /////////////////////////////////////////////////////////////////////\n    \n    //这两步操作是使得uv坐标完成归一化，并坐落到坐标的中心；\n    uv = (uv - 0.5) * 2.0;\n    \n    uv.x *= iResolution.x/iResolution.y;//将画布规定为一个正方形；\n    \n    vec2 uv0 = uv;\n    vec3 finalcolor = vec3(0.0);\n    for(float i = 0.0;i<3.;i++){\n        ////////////////////////////////uv分屏;/////////////////////////////\n        uv = fract(uv * 2.) - .5;//分屏；\n\n\n\n\n        //////////////////////////////////实现发光效果/////////////////////////////\n        //此时uv的坐标为整个向量空间的坐标，为(-1,1)，完成了对应区间的归一化；\n        float d = length(uv) * exp(-length(uv));//等号两侧的数据形状大小相同；\n        d = abs(sin(d * 8.  + iTime) / 8.);\n        //d = sin(d * 8.  + iTime) / 8.;\n        //d = smoothstep(0.1,0.3,abs(d - 0.5));\n        d = 0.02 / d;/////////////////////////////实现发光效果最重要的一步；//////\n\n\n        /////////////////////////////////颜色变换；///////////////////////////////\n        vec3 color = palette(length(uv0) + iTime);\n        color *= d;\n\n        finalcolor += color;\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(finalcolor,1.0);//vector4的颜色要归一化处理。\n}","name":"Image","description":"","type":"image"}]}