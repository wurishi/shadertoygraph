{"ver":"0.1","info":{"id":"slVBz3","date":"1664973948","viewed":240,"name":"Flow Field Test 1","username":"SnoopethDuckDuck","description":"a little laggy, other resolutions might look weird again idk","likes":18,"published":3,"flags":48,"usePreview":0,"tags":["buffer"],"hasliked":0,"parentid":"NtyfRc","parentname":"Buffer Art Test 5"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sc = 1.;\n    vec3 col = texelFetch(iChannel0, ivec2(sc *fragCoord), 0).rgb;\n    col = 1.8 * pow(col, vec3(1.6)); \n    //col = sqrt(col);\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y; \n    col *= exp(-abs(uv.x));\n   // col = mix(col, vec3(0.5,0.5,1), 1. - exp(-abs(uv.x)));\n    //col *= 0.25 + 0.75 * clamp(uv.y + 0.75, 0., 1.25);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define KEYBOARD iChannel1\n#define KEY_RESET 82\n\nvec4 cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 );\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 f)\n{\n    vec3 col = vec3(0);\n    vec2 r = iResolution.xy;\n    vec4 e = cell(ivec2(f));\n    col.rgb = e.rgb;\n    vec2 uv = (f - 0.5 * r) / r.y;\n    float xp = exp(-0.2 * iTime);\n    float xp2 = exp(-0.1 * iTime);\n    \n    for (float i = 0.; i < 30.; i++) {\n        vec2 p = vec2(r.x * h21(vec2(iTime, 0.1 + i)), \n                      r.y * h21(vec2(0.2 * iTime, -5.1 - i)));\n        float ns = fnoise((p-0.5*r)/r.y, 5.);\n        float a = 2. * pi * ns;\n        vec2 q = p + r.y/8. * xp * vec2(cos(a), sin(a));\n        float d = seg(f, p, q);\n        float d2 = seg(f - r.y/160. * xp * vec2(-1,-2), p, q);\n        float s = xp2 * exp(-(1.-xp) * d);\n        float s2 = xp * exp(-(1.-xp) * d2);\n        vec3 pl = pal(0. + 2. * ns + 0.15 * iTime, 0.5 * vec3(0,1,2)/3.);\n        col = mix(col, xp * pl, s2);\n        col = mix(col, pl, s);       \n    }\n    //if (iFrame == 0 || key_down(KEY_RESET)) {     \n      //  col = vec3(0);\n    //}\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n\nvec3 pal(in float t, in vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n// everything under here is from iq\nfloat seg(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n//https://www.shadertoy.com/view/XdXGW8\nvec2 grad(ivec2 z) {\n    int n = z.x+z.y*11111;\n    n = (n<<13)^n;\n    n = (n*(n*n*15731+789221)+1376312589)>>16;\n    n &= 7;\n    vec2 gr = vec2(n&1,n>>1)*2.0-1.0;\n    return ( n>=6 ) ? vec2(0.0,gr.x) : \n           ( n>=4 ) ? vec2(gr.x,0.0) : gr;                            \n}\n\nfloat noise(in vec2 p) {\n    ivec2 i = ivec2(floor( p ));\n     vec2 f =       fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f); // feel free to replace by a quintic smoothstep instead\n\n    return mix( mix( dot( grad( i+ivec2(0,0) ), f-vec2(0.0,0.0) ), \n                     dot( grad( i+ivec2(1,0) ), f-vec2(1.0,0.0) ), u.x),\n                mix( dot( grad( i+ivec2(0,1) ), f-vec2(0.0,1.0) ), \n                     dot( grad( i+ivec2(1,1) ), f-vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat fnoise(vec2 uv, float sc) {\n    float f = 0.;\n\tuv *= sc;\n    mat2 m = mat2(1.6, 1.2, -1.2, 1.6);\n\tf  = 0.5000 * noise(uv); uv = m * uv;\n\tf += 0.2500 * noise(uv); uv = m * uv;\n\tf += 0.1250 * noise(uv); uv = m * uv;\n\tf += 0.0625 * noise(uv); uv = m * uv;\n\treturn 0.5 + 0.5 * f;\n}\n\n// (Replace Buffer A with this)\n// icon might work using iFrame instead of iTime\n// dont want to change the image from what it was so I've left the\n// code alone\n\n/*\nvec4 cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 f)\n{\n    vec2 r = iResolution.xy;\n    vec3 col = cell(ivec2(f)).rgb; // still works on mac? no col=vec3(0)\n    vec2 uv = (f - 0.5 * r) / r.y;\n    \n    float t = floor(60. * iTime) / 60.; // should work in icon now?\n    float xp = exp(-0.2 * t);\n    float xp2 = exp(-0.1 * t);\n    \n    if (t < 15.) {\n        for (float i = 0.; i < 30.; i++) {\n            vec2 p = vec2(r.x * h21(vec2(t, 0.1 + i)), \n                          r.y * h21(vec2(0.2 * t, -5.1 - i)));\n            float ns = fnoise((p-0.5*r)/r.y, 5.);\n            float a = 2. * pi * ns;\n            vec2 q = p + r.y/8. * xp * vec2(cos(a), sin(a));\n            float d = seg(f, p, q);\n            float d2 = seg(f - r.y/160. * xp * vec2(-1,-2), p, q);\n            float s = xp2 * exp(-(1.-xp) * d);\n            float s2 = xp * exp(-(1.-xp) * d2);\n            vec3 pl = pal(2. * ns + 0.15 * t, 0.5 * vec3(0,1,2)/3.);\n            col = mix(col, xp * pl, s2);\n            col = mix(col, pl, s);       \n        }\n    }\n    fragColor = vec4(col,1.0);\n}\n//*/\n","name":"Common","description":"","type":"common"}]}