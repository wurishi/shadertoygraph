{"ver":"0.1","info":{"id":"DdKczz","date":"1695733154","viewed":58,"name":"Tuto shader art from kishimsu ","username":"Navalia","description":"Thanks a lot for the tutorial by kishimisu on youtube (https://www.youtube.com/watch?v=f4s1h2YETNY). I added some effect and comments to understand what i was doing.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["shaderart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t) //palette for the gradient range from 0 to 1\n{\n    vec3 a = vec3(0.483 ,0.773 ,0.879);\n    vec3 b = vec3(0.585 ,0.866 ,0.806);\n    vec3 c = vec3(0.987 ,0.909 ,0.345);\n    vec3 d = vec3(3.500 ,4.242 ,0.207);\n    \n    return a + b*cos(6.28318*(c*t+d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float depth = 3.0;\n    float scale = 1.5 / pow(2.0, depth * abs(sin(iTime / depth))); //scale of the zoom w/ limited rate by pow(2.0,...)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)/iResolution.y * scale; //position of the shader\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for(float i = 0.0;i < 2.0;i++){\n    \n        uv = fract(uv * 2.5) - 0.5; //local part of the shader centred\n\n        float d = length(uv) * exp(-length(uv0)); //local center position multiplied by exp depending on global dist\n\n        vec3 col = palette(length(uv0) + i*.8 + iTime*.8); //gradient shift with time\n\n        d = sin(d * 8. + iTime)/8.; //sin of the local shape \n        d = abs(d); //abs to only have positive num which would appear black at some point\n\n        d = pow(0.01 / d, 1.5); //Glow effect using the side of the shape powered\n\n        finalColor += col * d;\n    }\n    \n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}