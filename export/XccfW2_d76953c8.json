{"ver":"0.1","info":{"id":"XccfW2","date":"1733493143","viewed":140,"name":"Arc on Arc SDF","username":"SnoopethDuckDuck","description":"Same SDF as fork but has more control (using angles instead of \"cut-height\") and is maybe more expensive. Small explanation in Common tab\n\nThanks iq for the raymarching code","likes":25,"published":3,"flags":0,"usePreview":0,"tags":["procedural","3d","raymarching","distancefield","sdf","sphere","sphere","primitives","segment","arc"],"hasliked":0,"parentid":"lfcyDM","parentname":"Segment on Sphere SDF"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// See Common for old versions\nfloat sdArcArc( vec3 p, float r, float alpha, float beta, float th )\n{\n    p.x = abs(p.x);\n    vec3 m = vec3(sin(alpha), cos(alpha), 0);\n    if (m.x*p.y > m.y*p.x) m.xy = normalize(p.xy);  \n    vec3 n = normalize(cross(m, -cross(m, p)));\n    vec2 b = vec2(cos(beta), sin(beta));\n    float l = length(p);\n    if (dot(m, p) < l * b.x) \n        return length(p - r*(b.x*m + b.y*n)) - th;   \n    return abs(l - r) - th;\n}\n\n// Exact calculation of n\nfloat sdArcArcN( vec3 p, float r, float alpha, float beta, float th )\n{\n    p.xz = abs(p.xz);\n    vec3 m = vec3(sin(alpha), cos(alpha), 0), n;\n    if (m.x*p.y > m.y*p.x) {\n        m.xy = normalize(p.xy);  \n        n = vec3(0,0,1);\n    }\n    else {\n        float c = m.y*p.x-m.x*p.y;\n        n = vec3(c*m.y, -c*m.x, p.z) / sqrt(c*c + p.z*p.z);\n    }\n    vec2 b = vec2(cos(beta), sin(beta));\n    float l = length(p);\n    if (dot(m, p) < l * b.x) \n        return length(p - r*(b.x*m + b.y*n)) - th;   \n    return abs(l - r) - th;\n}\n\nfloat map( in vec3 p )\n{\n    p.y = -p.y;\n    \n    // Parameters\n    float r = .45;                 // Radius\n    float a = 1.2 + cos(.7*iTime); // Main angle \n    float b = .6 + .5*cos(iTime);  // Second angle \n    float th = .006;               // Thickness\n    \n    return sdArcArc(p, r, a, b, th);\n}\n\n\n// The MIT License\n// Copyright Â© 2022 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, float tmin, float tmax, const float k )\n{\n\tfloat res = 1.0;\n    float t = tmin;\n    for( int i=0; i<64; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        res = min( res, k*h/t );\n        t += clamp( h, 0.01, 0.10 );\n        if( res<0.002 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n    \n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 3\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = sin(0.2*iTime);\n\tvec3 ro = vec3( 1.0*cos(an), 0.0, 1.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n        #else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // raymarch\n        const float tmax = 5.0;\n        float t = 0.0;\n        for( int i=0; i<256; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n        \n    \n        // shading/lighting\t\n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            vec3 lig = vec3(0.57703);\n            float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n            if( dif>0.001 ) dif *= calcSoftshadow( pos+nor*0.001, lig, 0.001, 1.0, 32.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif;\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Rough idea: \n// Find the closest point \"a\" on an arc to our point in space p. \n// Construct a second arc from \"a\" towards normalize(p).\n// All arcs lie on the same radius 1 sphere.\n// Return the distance from p to the closest point on this second arc.\n\n// -----\n\n// The idea could be modified so the second arcs don't share the\n// surface of a sphere with the main arc, but I haven't tried yet :)\n\n// Could also replace second arc with a different SDF e.g. line seg\n\n// -----\n\n// Now using a*b*cos(theta) = dot(a,b) instead of solving\n// simultaneous equations, it removes y=0 line artifact too\n\n//     r: radius\n// alpha: main arc angle\n//  beta: secondary arc angle\n//    th: thickness\nfloat sdArcArcOld1( vec3 p, float r, float alpha, float beta, float th )\n{\n    // Mirror in x\n    p.x = abs(p.x);\n    \n    // Find closest point \"a\" on main arc to p (on radius 1 sphere)\n    vec2 a = vec2(sin(alpha), cos(alpha));\n    if (dot(vec2(-a.y, a.x), p.xy) > 0.) a = normalize(p.xy); \n    \n    // Find basis m,n for plane spanned by vec3(a,0) and p\n    vec3 q = normalize(p); \n    vec3 m = vec3(a, 0);      \n    vec3 n = normalize(cross(m, -cross(m, q)));\n    \n    // b is last point on second arc in m-n plane\n    // (second arc goes from m towards q on radius 1 sphere, \n    //  ending at b with angle beta from m)\n    vec2 b = vec2(cos(beta), sin(beta));  \n    \n    // Find q in terms of m,n vectors. q = Q.x*m + Q.y*n\n    vec2 Q;\n    Q.y = (m.x*q.y-m.y*q.x) / (m.x*n.y-m.y*n.x);\n    Q.x = (q.x - Q.y*n.x) / m.x;    \n    \n    // Return length to closest point on second arc in m-n plane\n    // and resize the point so it lies on a radius r sphere\n    if (dot(vec2(-b.y, b.x), Q) > 0.) q = b.x*m + b.y*n;   \n    return length(p - r * q) - th;\n}\n\n\n// Compressed version\nfloat sdArcArcOld( vec3 p, float r, float alpha, float beta, float th )\n{\n    p.x = abs(p.x);\n    vec2 a = vec2(sin(alpha), cos(alpha));\n    if (dot(vec2(-a.y, a.x), p.xy) > 0.) a = normalize(p.xy);  \n    vec3 q = normalize(p);\n    vec3 m = vec3(a, 0);  \n    vec3 n = normalize(cross(m, -cross(m, q)));\n    vec2 b = vec2(cos(beta), sin(beta)); \n    vec2 Q;\n    Q.y = (m.x*q.y-m.y*q.x) / (m.x*n.y-m.y*n.x);\n    Q.x = (q.x - Q.y*n.x) / m.x;    \n    if (dot(vec2(-b.y, b.x), Q) > 0.) q = b.x*m + b.y*n;\n    return length(p - r * q) - th;\n}\n","name":"Common","description":"","type":"common"}]}