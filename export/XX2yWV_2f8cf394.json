{"ver":"0.1","info":{"id":"XX2yWV","date":"1727738367","viewed":38,"name":"Circular Fire","username":"arminkz","description":"circular fire effect using procedural noise (fBM)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm","flame","fire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 3d value noise\nfloat snoise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e3);\n\tuv *= res;\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\t\n\tvec3 f = fract(uv); f = f*f*(3.0-2.0*f);\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n\t\t      \t  uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\tvec4 r = fract(sin(v*1e-1)*1e3);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\treturn mix(r0, r1, f.z)*2.-1.;\n}\n\nfloat fbm(vec2 p) {\n    float result = 0.;\n    for(int i=1; i<=7; i++) {\n        float amp = pow(2.0,float(i));\n        result += (1.5 / amp) * snoise(vec3(p,0.5) + vec3(0.,-iTime*0.1, iTime*0.01), 16. * amp);\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    \n    float a = atan(uv.x,uv.y) / 6.2332 + .5;\n    float r = length(uv) * .4;\n\n    float intensity = 3. - 3.*length(1.5*uv); \n    intensity += fbm(vec2(a,r));\n    \n    vec3 col = vec3( max(intensity,0.),\n                     pow(max(intensity,0.),2.) * 0.4,\n                     pow(max(intensity,0.),3.) * 0.15);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}