{"ver":"0.1","info":{"id":"X3y3Wc","date":"1718294203","viewed":202,"name":"LiveArchive #06","username":"Flopine","description":"I'm digging up old shaders made during VJ sessions to archive them here! \n\nNevoke 2021 for ChibiTech","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","animation","audioreactive","vj"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n// Nevoke 2021 for ChibiTech\n\n\n#define PI acos(-1.)\n#define TAU (2.*PI)\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define crep(p,c,l) p-=(c*clamp(round(p/c),-l,l))\n#define rep(p,d) p=(mod(p,d)-d*0.5)\n#define mo(p,d) p=abs(p)-d;if(p.y>p.x)p=p.yx\n\n#define pal(c,t,d) (vec3(0.5)+vec3(0.5)*cos(TAU*(c*t+d)))\n\n#define frt(sp,off) fract((iTime+off)*sp)\n#define bouncy(sp,off) sqrt(sin(frt(sp,off)*PI))\n#define swi(sp,off) floor(sin(frt(sp,off)*TAU)+1.)\n\n\nstruct obj{\n    float d;\n    vec3 sha;\n    vec3 li;\n};\n\nobj minobj (obj a, obj b)\n{\n    if (a.d<b.d) return a; \n    else return b;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat od (vec3 p, float d)\n{return dot(p,normalize(sign(p)))-d;}\n\nobj cubes (vec3 p)\n{\n    float size = .25; \n    vec3 cid = round(p/size);\n    crep(p,size,2.);\n    float d = box(p,vec3(0.1));\n\n    return obj(d,vec3(0.,0.05,0.2),pal(length(cid),vec3(0.5),vec3(0.,0.63,0.37)));\n}\n\nobj carp (vec3 p)\n{\n    p.z -= iTime*2.;\n\n    float id = floor(p.z/1.2);\n    p.y += .5;\n    rep(p.z,1.2);\n    float d = box(p,vec3(1.5,0.05,0.5)); \n\n    return obj(d,vec3(0.,0.1,0.),pal(id,vec3(0.1),vec3(0.4,0.6,0.)));\n}\n\nobj carp2 (vec3 p)\n{\n    p.z += iTime * 2.;\n\n    float id = floor(p.z/1.2);\n    p.y += .5;\n    rep(p.z,1.2);\n    float d = box(p,vec3(1.5,0.05,0.5)); \n\n    return obj(d,vec3(0.3,0.1,0.4),vec3(1.,0.1,0.5));\n}\n\nobj prim1 (vec3 p)\n{\n    obj scene = carp(p);\n\n    float id = floor(p.z/4.);\n    p.z += iTime;\n    p.y -= bouncy(2.,id*0.1);\n    rep(p.z,4.);\n\n    return minobj(scene,cubes(p));\n}\n\nobj prim2 (vec3 p)\n{\n    p.y += sin(p.z*0.3)*0.5;\n    \n    obj scene = carp2(p);\n\n    float id = floor(p.z/6.);\n    p.y -= bouncy(2.,id*0.2)*3.;\n    rep(p.z,6.);\n    p.yz *= rot(frt(1.,0.)*TAU);\n    float d = mix(box(p,vec3(0.5)),od(p,0.6),0.5);\n\n    scene = minobj(scene,obj(d,vec3(0.,0.01,0.1),vec3(0.1,0.8,1.)));\n    \n    return scene;\n}\n\nobj SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);  \n    \n    if (swi(.5,0.) < 0.5) \n    { mo(p.xz,vec2(2.)); } \n    \n    vec3 pp=p;\n    crep(p.x,10.,4.);\n    obj scene = prim1(p);\n    \n    p=pp;\n    p.x += 5.;\n    crep(p.x,10.,4.);\n    \n    return minobj(prim2(p),scene);\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.001,0.);\n    return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n\n    float mask = step(0.4,texture(iChannel0,vec2((abs(uv.x)+abs(uv.y))*0.02, 0.25)).x*0.45);\n    uv += mask*0.07;\n\n    float size = (swi(1.,0.)<0.5)?5.:10.;\n    vec3 ro=vec3(uv*size,-20.),rd=vec3(0.,0.,1.),p=ro,col=vec3(mask),l=normalize(vec3(2.,4.,-3.));\n    bool hit = false; obj O;\n\n    for(float i=0.;i<64.;i++)\n    {\n        O = SDF(p);\n        if(O.d<0.01)\n        {\n          hit=true; break; \n        }\n        p += O.d*rd;   \n    }\n\n    if (hit)\n    {\n        vec3 n = getnorm(p);\n        float light = max(dot(n,l),0.);\n        col = mix(O.sha, O.li, light);\n    }\n\n    col = mix(col, 1.-col, mask);\n\n    fragColor = vec4(sqrt(col),1.);\n}","name":"Image","description":"","type":"image"}]}