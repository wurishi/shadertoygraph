{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// 267498000 training steps\n\n// the following code is generated by a custom C++ program.\n// ********************************************************\n\n#define NN_FLOAT_FROM_VEC4_ARR(arr, idx) ((arr)[(idx) / 4][(idx) % 4])\n\nfloat nn_activation_layer1(float v)\n{\n    return max(v, v * .01);\n}\n\nfloat nn_activation_layer2(float v)\n{\n    return max(v, v * .01);\n}\n\nfloat nn_activation_layer3(float v)\n{\n    return max(v, v * .01);\n}\n\nfloat nn_activation_layer4(float v)\n{\n    return max(v, v * .01);\n}\n\nfloat nn_activation_layer5(float v)\n{\n    return max(v, v * .01);\n}\n\nfloat nn_activation_layer6(float v)\n{\n    return max(v, v * .01);\n}\n\nfloat nn_activation_layer7(float v)\n{\n    return max(v, v * .01);\n}\n\nfloat nn_activation_layer8(float v)\n{\n    return tanh(v);\n}\n\nconst float nn_layer1_biases[20] = float[](-.3611,-2.0311,4.1073,4.5148,-.706,-7.4206,.4229,.6671,-1.3021,-.1018,-.2504,3.0776,-3.5487,-.3458,.8638,-.2039,1.1917,-.5629,-1.9945,-.1258);\nconst vec4 nn_layer1_weights[15] = vec4[](vec4(5.8009,-4.825,-.0281,-4.7525),vec4(13.0144,.0217,-15.1145,1.3382),vec4(.0112,.1276,-8.8556,.0149),vec4(-.8878,-.2363,.7505,11.2985),vec4(2.4499,-.0379,-2.0342,.6499),vec4(-.4999,-3.5248,-1.5821,.0024),vec4(.9412,1.6246,-.2985,-.6615),vec4(.2449,-.4542,-8.7376,7.3295),vec4(.0768,-3.6369,-7.0764,0.),vec4(3.7905,7.1298,.0132,-.0745),vec4(-.3039,-1.3436,5.1134,-9.1721),vec4(-.0123,-.5792,-.2984,-.6741),vec4(1.857,-14.7906,.0091,.3655),vec4(-.1887,-.8804,8.1218,-6.7568),vec4(.0052,.1642,-.7212,-2.8365));\n\nconst float nn_layer2_biases[20] = float[](-13.9675,-4.1089,-8.9789,3.4968,3.481,-.2818,-10.5206,-3.2406,2.6992,-6.6669,-.7749,6.7832,-2.3729,-6.0968,.8974,2.6362,-11.7608,-.096,-5.0265,-.392);\nconst vec4 nn_layer2_weights[100] = vec4[](vec4(1.8023,3.4692,-2.4552,5.177),vec4(-.1798,1.8319,.462,1.0783),vec4(-.458,-.491,2.6178,.5036),vec4(.9198,.7822,-1.2003,.7973),vec4(1.5684,-.0579,-.4338,.1684),vec4(-.4039,-2.074,3.0218,-.1329),vec4(-1.6819,-3.5798,-.1101,.2086),vec4(-.7245,.267,-.2187,-2.1443),vec4(-3.4143,-.267,.2926,-.0348),vec4(1.2899,-.4864,2.9813,.9246),vec4(-2.4054,1.3823,.1249,1.1372),vec4(-.7686,2.0707,.3704,-.5784),vec4(-.7758,.597,2.6984,1.6283),vec4(-.2749,.718,.8429,.2308),vec4(-1.999,1.5965,1.9275,.1208),vec4(.1401,-.6942,-.7551,-1.3639),vec4(.7218,-1.303,.0202,.3639),vec4(.1354,-.1007,.749,-.5252),vec4(1.5909,-.7738,1.3673,-.659),vec4(.93,-.01,3.3848,.1986),vec4(-.7524,2.0784,-2.7851,.0569),vec4(-.3662,-2.644,-.1227,1.2104),vec4(-.2518,-.9764,-.6387,2.0914),vec4(.7005,.6638,1.1029,.5785),vec4(4.6423,-.411,-.4638,.9322),vec4(-.6413,-1.2302,-.0594,-.3057),vec4(1.0275,.3879,1.4757,.8321),vec4(.2688,-.6845,-.9359,.2354),vec4(-.5209,.2913,.1705,.116),vec4(.0216,.3964,.086,1.3033),vec4(-.7404,1.7915,.213,1.0841),vec4(-.7687,-.4673,.099,-2.4883),vec4(-.6059,-.3938,.2376,3.5655),vec4(2.9047,.2703,-1.0808,1.0339),vec4(3.2539,.9278,-1.6352,.3097),vec4(-2.6071,1.0057,-2.3221,2.1477),vec4(1.0373,.3187,.1835,-.1981),vec4(.4038,.2202,-3.356,-1.9391),vec4(1.7819,.0814,1.2468,.6297),vec4(-2.5321,.4066,-1.1189,.3796),vec4(4.1084,-3.7418,2.7609,-.6676),vec4(-.296,-1.1956,.2207,.7659),vec4(-.7964,.5363,3.1521,-.7553),vec4(-1.021,.329,.7914,.3154),vec4(2.3032,.0463,1.0087,1.083),vec4(.5817,-.1,-1.9374,-.1276),vec4(-.2253,-3.8443,.6966,.5821),vec4(-.6507,.2525,2.4979,1.2004),vec4(1.4229,-.2599,-.0614,.7059),vec4(-1.3931,-.1553,-.6478,-1.1919),vec4(1.3667,.1911,.3258,.6008),vec4(.4631,-1.9048,-.1303,-.5206),vec4(-.6842,-.5442,-1.2528,-.7986),vec4(-2.9819,-.7966,1.5688,.2691),vec4(-3.6334,-.4715,3.2226,.2824),vec4(-.4588,.4076,.8051,-2.0478),vec4(.3656,-.3125,-.0478,-.8464),vec4(-.1668,-.2372,.1123,-1.3909),vec4(-1.037,.2548,1.5228,-.3202),vec4(2.0939,.5486,-.9198,-.1296),vec4(1.129,-.7886,-7.9139,-1.8342),vec4(-.438,-5.5665,1.5321,.1691),vec4(-.8203,-.2245,.2706,.5296),vec4(4.4748,.2918,-1.93,-.6363),vec4(.0558,-.3136,-1.9822,.6535),vec4(-2.4349,-.8862,1.1956,-.6207),vec4(.7702,1.8548,.2005,.8187),vec4(.3872,-1.3947,-.474,1.189),vec4(.4877,1.2008,.6133,-.9296),vec4(4.5358,-.1603,3.4481,-.9425),vec4(-1.1213,-.317,.941,-1.8369),vec4(-.2191,-.4682,-.0508,-.0594),vec4(.8166,-.1545,-.3591,.1212),vec4(-4.8228,.4088,.0808,.2636),vec4(-.7757,.5791,.5134,-.1934),vec4(-.8984,-1.6263,1.3236,-1.5573),vec4(-1.2842,-5.3267,.2059,-1.0744),vec4(-1.0064,-.3344,1.0602,-4.3234),vec4(3.2126,.2469,-1.2031,-.6531),vec4(.139,-.8149,-1.2761,1.0022),vec4(3.6522,1.8944,2.6728,-.9494),vec4(.8568,.6459,.305,-1.6808),vec4(-.9019,.3145,.9152,.9641),vec4(.7383,.4581,-.294,-.1347),vec4(-.2376,.3402,2.3611,.994),vec4(-.2528,.0495,.9307,.5325),vec4(.4286,.8298,.1739,.5851),vec4(-.5622,.582,1.4355,-1.2397),vec4(-1.5047,.4932,1.9741,.2017),vec4(-5.0004,-.4941,3.1887,-.2162),vec4(2.8355,-.3964,-.0169,-3.5853),vec4(1.0343,1.8795,-.3517,-.7225),vec4(-.3213,-.3721,-.2261,-.3157),vec4(-.1429,-.3562,.6736,-.2324),vec4(-1.6117,.1527,1.1327,-2.4103),vec4(-2.1097,.3782,-1.4002,2.7897),vec4(-.4862,.3338,.0584,.8288),vec4(.5269,-.0668,.984,-1.9645),vec4(1.9234,.2683,.1898,-.5814),vec4(-1.9123,-1.0291,-1.0989,1.5998));\n\nconst float nn_layer3_biases[20] = float[](-2.1351,-1.9443,2.1868,-2.0107,-.5219,-3.7355,.3967,-.7176,-2.3665,-3.2388,-1.0154,-.2478,2.8007,.1974,-.5521,-.6989,-1.6749,-1.6259,-1.4038,-.7335);\nconst vec4 nn_layer3_weights[100] = vec4[](vec4(-1.4272,.5486,-.1632,-1.8111),vec4(.1674,-.4648,-1.2111,-4.7977),vec4(-4.7404,.5732,.0338,-1.1594),vec4(.0286,1.2493,.1631,-.2648),vec4(2.0332,-2.3815,4.1024,-.3242),vec4(1.4847,-1.3065,.5898,2.7499),vec4(-5.0812,-.0358,2.043,-.6694),vec4(.2028,-.94,-1.5241,-3.1554),vec4(-.7443,1.0395,-.1082,-.4289),vec4(.8672,-1.7595,-.8323,-.5962),vec4(.7059,.0855,-2.1196,.353),vec4(.4275,-.4983,-1.1844,-.3122),vec4(.4129,-1.6141,-1.3087,1.0353),vec4(.0165,-.8631,-.7065,-.7608),vec4(1.3268,.3957,-1.5789,.1472),vec4(.4387,-1.3834,4.5737,-1.0133),vec4(-.4199,1.0892,1.6884,1.371),vec4(.6494,.2005,3.4659,-2.6787),vec4(-2.7882,-1.8702,-.6498,-1.0147),vec4(-2.8253,-.9166,-2.4447,-2.3012),vec4(-.445,-.1286,.397,-.2593),vec4(-.7924,-.3839,-.6292,-1.0396),vec4(-1.7594,.031,-.0382,-2.2757),vec4(-1.2745,.1008,.4863,-1.047),vec4(1.2645,-1.0827,-.2765,-1.9021),vec4(-.8813,-1.3567,.3533,-.9346),vec4(.0103,1.1165,-.4366,1.3364),vec4(.662,-2.0883,.9723,1.2216),vec4(-.0852,.8206,1.3844,.4941),vec4(1.4541,.0614,-.0063,.6533),vec4(.0719,1.2238,.1456,.69),vec4(-1.7123,.5447,-1.3241,.5363),vec4(-.386,-.3638,3.1181,.2926),vec4(-.0717,-1.7378,1.0853,.1105),vec4(-.9908,-.246,-.1436,-.3641),vec4(-.1703,-.5378,-1.1565,2.0873),vec4(-.5416,-.2303,.7598,-.6233),vec4(.465,-2.5013,-.2003,.2469),vec4(-.3463,-.563,.0516,-1.4698),vec4(-.109,-1.1517,-.4425,1.1136),vec4(-1.4487,-1.1824,-1.3413,-.3302),vec4(.2536,.0978,1.1801,2.4359),vec4(1.0992,.4791,-.0041,-3.071),vec4(.2652,-.3302,-.1225,-1.53),vec4(-1.5218,2.187,.7587,-.9676),vec4(.3368,3.6519,.7607,.4893),vec4(.6033,-.0368,.7218,-1.3781),vec4(-.8712,-2.5275,2.5199,.4726),vec4(-.0823,-.2498,-1.3404,-1.7295),vec4(1.9763,-1.4874,.1679,.5906),vec4(-.9851,2.2962,2.6063,-1.1131),vec4(.4349,.4728,-2.4785,-.5334),vec4(.0013,.3235,-.7672,-.3521),vec4(-1.1675,4.2866,.5235,-.4754),vec4(.6127,-2.2304,-.1174,-1.3223),vec4(-.3015,-.2302,-.4261,-.4679),vec4(.4579,-.6023,-.3315,-.0003),vec4(-.8017,.0166,.0965,-1.4877),vec4(-.522,1.0323,-.2183,.1514),vec4(-.8344,.3043,.3007,.0672),vec4(-.1277,-.9923,.1961,-.0204),vec4(.2051,-.999,-.2153,.7864),vec4(-.1877,-.7787,-.1162,1.0111),vec4(2.1898,.7328,.4566,-.7524),vec4(.7687,-.3107,-.0894,.0932),vec4(-1.1,-.8364,.6809,-2.9044),vec4(1.9402,.0598,-2.2546,1.4083),vec4(.5159,.7032,-.7434,-1.5073),vec4(-1.682,-.3013,.1712,-1.051),vec4(-.971,-.6303,-1.0734,-1.0405),vec4(.4719,1.1935,2.1067,2.3105),vec4(-3.2754,-.7791,-.3368,.0617),vec4(-1.2104,-1.8516,1.2089,-2.1359),vec4(-.309,-1.3949,-.4529,2.419),vec4(1.5439,.352,-1.4029,1.7094),vec4(-.0319,-2.2996,.261,2.3068),vec4(1.359,.1579,.2905,-.6557),vec4(.263,-1.859,.5915,-.2931),vec4(-2.3285,-1.9259,-.0592,1.4526),vec4(.4356,-.693,-.9157,-.9636),vec4(1.7209,2.839,-1.2719,-1.6752),vec4(-.5439,-.5619,-1.5731,-1.8132),vec4(-.7509,2.7415,-2.0527,.6626),vec4(-1.0708,-1.0412,-2.8386,.4352),vec4(2.137,.8553,-.5577,.5451),vec4(-5.285,1.2666,-.1116,-.0364),vec4(-.1618,-.195,-4.9815,2.151),vec4(-.481,.7595,.2192,.3343),vec4(-.5273,.6554,1.0977,.3129),vec4(1.5772,.0559,2.146,-.9916),vec4(.8755,-.8557,2.0361,-2.4182),vec4(.1558,-.1007,1.1913,-1.0151),vec4(-.3392,-.5612,-1.8459,-2.7666),vec4(.2602,-.7249,1.149,-1.2684),vec4(-.847,-1.7839,-1.9118,-1.2063),vec4(-.2117,-.5178,.8336,-1.319),vec4(-.4719,.0658,1.066,-.1782),vec4(-.0144,-.8705,-.7035,-1.0048),vec4(-1.0876,1.7471,.1277,.0082),vec4(.2663,.416,.3249,-2.7031));\n\nconst float nn_layer4_biases[20] = float[](-.3238,.0479,-1.3015,-1.1098,-4.6034,.1028,-1.9551,-4.9769,-1.9071,-3.0101,-7.2682,-2.6194,7.3633,-2.4327,-1.552,-1.0557,-4.311,1.8969,1.0542,-.7656);\nconst vec4 nn_layer4_weights[100] = vec4[](vec4(.3311,1.2941,-1.0945,-.2184),vec4(.7823,1.2264,1.0745,-.3203),vec4(-.4455,-.3446,.7721,-1.4181),vec4(-1.9318,-.1321,-.6219,-.4464),vec4(.2152,1.5772,-.0077,.6985),vec4(.457,-.036,.4859,.0727),vec4(1.4362,.3268,-.3477,-2.4247),vec4(-.6788,-1.211,.2654,.0952),vec4(-3.3889,-.408,1.9589,-2.3704),vec4(1.2513,.2363,-.4892,-.0949),vec4(-.7143,.7037,-.1645,.2046),vec4(-1.2194,.647,-.1649,.1977),vec4(.6366,1.1021,.8548,-.3459),vec4(.7761,.9901,-1.0678,.0515),vec4(-.2956,.0542,.0669,-1.1054),vec4(-1.2665,2.6061,-2.2448,1.0551),vec4(-.1817,.0997,-1.0414,-.8459),vec4(.3706,-1.7581,-.7578,.938),vec4(-.407,-.9309,-.8767,1.5304),vec4(.671,-.1693,-.7012,-.3068),vec4(-3.2612,-.3443,-.5558,-.3105),vec4(1.2039,-.167,.3367,1.3094),vec4(1.4536,-.5997,1.9903,-1.167),vec4(.1148,-.3966,-.5098,.5032),vec4(.0592,1.1652,-.2544,-1.1316),vec4(-.1633,.3672,-.2295,-.1495),vec4(-.1584,.7092,-1.3025,.5044),vec4(-.4699,.4969,.3441,1.1041),vec4(-.5626,1.6585,.4266,-.257),vec4(1.7195,-.1934,.2921,.3205),vec4(1.3689,.1628,1.0273,-.7378),vec4(.0967,.9617,1.4806,.4827),vec4(-.4372,1.124,2.5245,.4199),vec4(-.4423,1.3773,1.0384,-1.2797),vec4(-.4152,-1.3128,.1024,.4889),vec4(.3117,.3401,1.303,1.0214),vec4(1.4885,-.6708,.896,-.5971),vec4(-.4635,.0505,.9497,.7242),vec4(-2.4775,.3522,.9179,-.2052),vec4(-.0753,-1.053,-.7907,.677),vec4(-1.9605,-.1218,.7427,-1.1204),vec4(-.8255,1.5351,.9816,1.1392),vec4(.2396,.4045,-.8282,.1414),vec4(-3.244,-1.052,1.2555,-2.6272),vec4(.4654,-.0298,.886,-.5982),vec4(-1.7041,-.0006,-1.3919,-1.9882),vec4(.5421,.2933,-.1778,.3712),vec4(.8694,1.1794,-1.0439,.0794),vec4(.3113,1.7187,.0977,-1.6004),vec4(-1.6398,.5084,3.0392,1.1505),vec4(1.1935,-1.1697,-.0396,.0778),vec4(.8753,1.9103,-.1422,-1.4074),vec4(-1.4193,.0897,-1.4298,.3982),vec4(-.2113,-.2283,-.5145,-.199),vec4(.6034,.635,-.4692,.4515),vec4(2.7195,1.5837,-.841,-.0468),vec4(.0643,.9019,-3.1116,.1091),vec4(.2876,-.0515,1.647,-.3925),vec4(.7426,.2986,-.2407,-2.0122),vec4(.5999,.404,1.54,-1.5833),vec4(-.8387,1.1889,1.3228,-.95),vec4(-.7494,1.2139,1.9759,-2.1863),vec4(.9949,-2.5412,1.6318,-.0385),vec4(-1.0278,1.5483,-.6588,-1.4742),vec4(-1.254,.7451,.0361,-.1578),vec4(-.3481,-.9699,-.4486,.937),vec4(.3371,-1.6647,1.0929,-.1201),vec4(-1.5955,-1.793,-1.502,.2337),vec4(-.0312,-.105,.2478,1.5238),vec4(.5918,-1.4118,.6533,.5433),vec4(.0228,2.3206,-.0197,.7775),vec4(-.2371,.922,1.1034,-2.6894),vec4(-.2,.3558,2.1246,-.1054),vec4(-1.4755,-.1896,-.9196,-1.1153),vec4(-.6977,.0955,.3915,-1.7188),vec4(-.4977,.6182,-2.2036,.658),vec4(.7432,.0173,.0831,.0084),vec4(-3.5867,.5533,.54,.9604),vec4(-.4502,.4073,-.1888,-1.1344),vec4(.3026,2.4335,-1.3194,-.7927),vec4(.1084,-.4381,.2055,-.4621),vec4(1.1274,.1633,-1.3446,-.8101),vec4(.9251,.983,1.3195,-.6184),vec4(-.9555,-.3481,.3878,.9248),vec4(.4443,-2.4605,-.7386,-.1242),vec4(.3156,1.8992,.4055,-1.4141),vec4(-.3424,1.3265,.8365,.3699),vec4(.3227,-.1484,-.3417,.1698),vec4(-.6749,-.44,-1.3526,.5439),vec4(-2.0379,-1.7244,-1.0788,-.1782),vec4(1.2705,-.523,1.0732,.6848),vec4(1.9485,-.1047,.1114,-.2091),vec4(.1,-.4888,1.0456,.613),vec4(-.3388,-.6368,.4948,.4988),vec4(.9804,.8616,.4159,-.5001),vec4(-.6758,.5693,1.0232,-.6979),vec4(-.6269,.1389,.3389,-.0291),vec4(-.8571,-.3759,-3.2632,-.5023),vec4(.181,-1.3096,-.273,1.0621),vec4(-.3064,-1.2667,-.5514,.3412));\n\nconst float nn_layer5_biases[20] = float[](-1.6373,.391,-1.1819,1.0817,-.9721,-.4432,.5637,-.5738,-.2967,-2.5513,7.9286,4.0455,-5.0623,-1.4453,-1.4508,-.1383,.6532,-.6526,-.2272,-.1388);\nconst vec4 nn_layer5_weights[100] = vec4[](vec4(.1535,-.5078,-.2234,.2687),vec4(.9174,.2065,.6813,-.5889),vec4(.313,-.1117,.7155,-.2964),vec4(-.4909,.7137,-.2641,.7567),vec4(-.1161,.6637,.141,-.7406),vec4(-1.2427,-.6409,-.859,-.7373),vec4(-1.045,-.6784,1.2393,-.9135),vec4(-.4665,-1.2951,1.2778,-.6766),vec4(-.4913,.7688,-.4085,-1.1482),vec4(-1.2974,-2.2851,.2467,-1.4068),vec4(-1.0899,-.083,-1.1216,.5664),vec4(.2911,.6371,-2.4201,-1.5054),vec4(-1.2356,1.7166,-.0219,.982),vec4(-.823,-.4389,-1.0606,.4909),vec4(-1.1583,-1.6697,-1.458,1.4517),vec4(.0034,.9655,-.7964,-.2911),vec4(-.4278,.8438,-1.7434,-.2246),vec4(-2.5522,-1.2035,.0629,.9106),vec4(-2.8277,-.3512,-3.2324,-.8573),vec4(.0022,.424,.648,-.3424),vec4(.2355,.5347,-1.675,-.4258),vec4(.2679,-3.4371,-.4157,.8387),vec4(.2643,-.3037,.3875,.5718),vec4(.9891,-.7224,.8062,-.935),vec4(-1.3532,-.8137,-1.9284,2.2856),vec4(-.3623,.9327,-.0734,-.4777),vec4(.4495,-.0496,.3634,.1218),vec4(-.1196,-1.2648,1.0713,-1.2081),vec4(.5538,.7483,-.0556,.6416),vec4(-2.7964,-.3412,-1.2854,-.3328),vec4(.6227,-.0017,-.2377,-.6808),vec4(1.8486,-.9915,.2549,-.0048),vec4(.6013,.9313,1.47,-2.2378),vec4(.7255,.3101,.4078,-.8034),vec4(-1.3766,-1.1628,-1.8904,-.3898),vec4(1.1451,-1.4665,.43,-2.2963),vec4(.8162,.3623,.5045,-.3263),vec4(1.0085,-.9277,-.5036,-2.2346),vec4(.6664,-.3454,-.554,.9336),vec4(-1.8449,-.9181,.4772,-1.8118),vec4(.3055,-.2441,-2.2377,-.2443),vec4(.6419,-1.9088,.2035,-.1696),vec4(1.021,1.5522,.5234,-3.4979),vec4(-.0071,1.0587,-.5959,.197),vec4(-.4584,.2703,-.9976,-1.7274),vec4(-.0461,.1676,-1.4707,1.7017),vec4(-.3818,.3477,-.0785,-.8236),vec4(-.7271,-.5936,.2512,-1.4662),vec4(.2848,-1.0103,.5303,.9797),vec4(1.3647,-.6499,.8815,-1.4737),vec4(-1.0368,-1.9628,.5566,.4266),vec4(-.9303,-.6505,-.0337,-1.8194),vec4(1.3759,-.0406,1.2794,-.8616),vec4(-2.2837,1.2096,-1.0106,1.6153),vec4(-2.8681,.4167,.2145,-.1867),vec4(1.568,-1.4386,.2449,.1391),vec4(-.4515,1.0426,.2503,-.5257),vec4(-.3257,.148,-1.4649,-.4564),vec4(-.4122,-.5041,-.8164,-.9667),vec4(-.0281,-.0751,1.2147,-.3177),vec4(.5231,.2909,.4662,-.3266),vec4(.979,-.227,.5878,-.5051),vec4(-.0811,.3126,.1335,-.1732),vec4(-.1165,.1645,.0912,-.5272),vec4(-.0741,-.3049,.2691,.1937),vec4(.2335,1.6542,.9601,1.0277),vec4(-.618,-1.0005,-.4875,-1.7016),vec4(.3378,.1247,.7307,.3102),vec4(-1.8426,-.3711,-.1573,-.1731),vec4(-.3477,1.1488,.41,-1.8673),vec4(.8203,-.4214,1.5387,-.0468),vec4(.1002,.7375,-.5432,.9899),vec4(.8505,-1.0287,-.8105,.4785),vec4(.8769,.249,.1455,-1.2603),vec4(-.7676,-.0593,-.0921,-.062),vec4(.2947,-.0136,-1.3228,.7247),vec4(-1.357,1.376,-.1511,2.1083),vec4(-1.6383,-.643,.1451,-.7375),vec4(-.4991,-.87,.7007,.7742),vec4(-.3164,-.2016,-.3058,-.3123),vec4(.0972,1.4419,1.0834,-.0756),vec4(-.8687,-.2191,-1.5768,.991),vec4(-.723,-.8447,-.2235,-.6715),vec4(.407,-1.437,-.6312,.6481),vec4(.1415,.8658,-.2528,-2.0591),vec4(.7857,.5376,-.1918,-1.4574),vec4(-.3379,.1449,-5.1687,-1.1814),vec4(1.2281,-1.0143,-3.0804,.8131),vec4(.4616,-.8964,-1.2944,.1793),vec4(-.7243,-1.4013,-1.7638,.4489),vec4(-.3494,1.9023,-1.4255,.0877),vec4(-1.3448,-.6299,.2283,-.3757),vec4(-1.0053,-.8966,1.8931,.1261),vec4(-2.6043,-.3099,.113,-.2571),vec4(-.8919,-.2095,-.8243,.9984),vec4(-2.477,-.775,-.0031,-1.3297),vec4(.2292,.7962,-1.9675,.5564),vec4(.7827,1.1988,1.3075,-.29),vec4(-.1306,-.3523,.1091,-.2309),vec4(-.4204,.5161,-.7981,.4563));\n\nconst float nn_layer6_biases[20] = float[](-1.1818,-.3173,-.1664,5.2154,.0427,-3.1139,1.3828,-1.1546,-.0077,-1.6457,-.6838,2.8506,4.2215,-.9794,2.4433,-.0003,3.6427,-1.3001,.3791,-1.3122);\nconst vec4 nn_layer6_weights[100] = vec4[](vec4(.3977,-.1329,-1.0332,.0324),vec4(.9753,.8613,-1.0419,.7619),vec4(.0907,.5134,.2495,-.9843),vec4(-.753,.359,-.4813,-1.1491),vec4(.8161,-.3343,-.7904,.0703),vec4(-.7178,.1965,.4124,1.2161),vec4(.0392,.2173,-.144,.3689),vec4(.6059,1.0434,-.0711,-1.7769),vec4(.6733,1.7289,-3.4992,-.8009),vec4(.0699,-.1552,-.562,.3159),vec4(-1.3136,.2795,-.6413,.0339),vec4(-.8084,.0309,-.7504,-.8047),vec4(-.62,.4049,-1.6821,-.2746),vec4(-1.4755,1.3863,-.6341,-.7291),vec4(.5447,-.4736,-1.5837,.8868),vec4(-.0792,-1.0222,-.7123,.2572),vec4(.5476,-1.522,-.0401,.1399),vec4(-.215,.3421,-.3723,-.3241),vec4(.1483,.451,.1828,-.0467),vec4(-.0053,-.7123,-.3762,.0104),vec4(-.1679,.7778,-.3176,-.8608),vec4(.4206,-1.1702,.2,.7157),vec4(-.2934,.6514,-1.1213,-1.0015),vec4(-.418,-.1614,-.7392,.4513),vec4(-.3377,-.5722,-.5856,-1.1321),vec4(.2192,-.2834,.051,.0962),vec4(-.036,1.1281,.3507,-.1633),vec4(-.5686,.1938,-.2391,.242),vec4(-.1622,.5349,.2731,-.5395),vec4(-.5769,-.6159,.3986,.2011),vec4(-1.675,-1.2091,-.6794,.2986),vec4(-.7123,-.3814,-.318,-1.0059),vec4(-.1526,.8328,.8341,-.7282),vec4(.9814,.3157,-1.0261,-.5471),vec4(-.724,.335,.4856,.2777),vec4(-.2989,.0659,-.0096,-.3965),vec4(.4873,.6371,.2641,-.2586),vec4(-1.7965,-.2503,-.0361,.3222),vec4(.2995,.0879,.2029,.4885),vec4(.0124,-.3718,-.3967,.4708),vec4(-1.4434,.9301,-1.7165,-.3865),vec4(1.2929,.8574,.5392,-.5459),vec4(2.9098,1.3843,-.1416,-1.3129),vec4(-.8138,-.0942,.7253,.652),vec4(.6246,.3263,-1.0655,-.0346),vec4(.2626,-.31,-.4392,-.3942),vec4(.8161,.1266,-.5506,.2871),vec4(.0531,-.3497,.099,.3088),vec4(.1839,-.2304,-.4719,.506),vec4(.5648,1.2209,.0433,.4169),vec4(.2932,-.9497,.4183,.4455),vec4(.2497,.0741,-.3216,-.3499),vec4(-1.4151,.5765,-.0266,-.6828),vec4(-.9185,-.417,.1752,-.8686),vec4(.1315,-1.8533,-.5609,.3952),vec4(.0264,-1.5454,-.6833,.3833),vec4(-.3309,-.6738,.1811,.0261),vec4(.6515,.1022,.2038,-.2169),vec4(-2.9104,-.3203,.5005,-1.0583),vec4(-.2502,.6107,.2984,.5851),vec4(.5224,-.0031,.4995,-.5484),vec4(.4856,.9085,.6431,.0762),vec4(-.3598,-.3482,-.556,.364),vec4(-.3014,-.3253,-.8222,.4826),vec4(1.0179,-.5774,.5895,-.2099),vec4(-.7938,-.8829,.2242,-.1765),vec4(-.6422,1.1187,.8386,.2855),vec4(-.9686,.6237,1.1733,-1.0753),vec4(-.6098,.1761,-.95,-.1953),vec4(.6917,.6009,-.0556,.4474),vec4(-1.8777,-1.5751,.1169,.1512),vec4(.6409,-.7738,-1.6786,1.0111),vec4(.4413,-1.4267,1.0337,1.5155),vec4(-.9859,1.1014,-1.2467,.5413),vec4(.681,-.862,-.6672,-1.5116),vec4(-.7772,.7193,-1.0003,-.3259),vec4(-.3752,-1.327,-.1119,.5173),vec4(.2842,.0102,.3872,-1.0412),vec4(-1.5224,.6364,.0682,1.0548),vec4(-.0241,.5662,.2766,-1.0831),vec4(.3698,-.8321,.9477,.2458),vec4(-.4409,1.0743,-.3159,.412),vec4(-.3012,-.3209,.3319,.0579),vec4(-.4719,.091,.1327,.4288),vec4(-.241,-1.7166,.907,-.2707),vec4(-1.7995,.1529,.5301,-.7423),vec4(-1.1727,-.2256,.3474,-.983),vec4(.3296,.2523,1.503,.5226),vec4(-1.6265,.6622,-.4735,-.659),vec4(.4025,.2684,-.4405,-.4708),vec4(.4538,-.3311,.2084,-.535),vec4(.4277,-.5975,.1283,-.0698),vec4(.045,.5005,.2553,.3231),vec4(-.3946,-.0665,.2105,-.9099),vec4(.6567,1.0636,.5456,.182),vec4(.3274,-.2511,-.5732,-.3533),vec4(1.2133,-.1215,.632,.5769),vec4(.7831,-.258,.7749,-.0113),vec4(-1.5083,.1176,-1.1316,-.3496),vec4(.2842,-.0133,.0205,.4771));\n\nconst float nn_layer7_biases[20] = float[](-.6147,-2.2302,.5188,-1.4794,.7686,-.7765,.196,-.3564,.6664,-1.0028,3.1203,2.2729,-.4188,1.3959,-.9423,.1024,.768,-1.9623,.3232,-.1179);\nconst vec4 nn_layer7_weights[100] = vec4[](vec4(.6008,1.8764,.3664,-.299),vec4(-.0759,.9471,.0615,-.3586),vec4(-.1263,.3884,-.3082,-.263),vec4(-.0669,.3014,.0157,.0425),vec4(-.7451,-.0072,-.7527,-.2051),vec4(-1.3753,-.2764,-.0037,-.3751),vec4(-.5398,-.4803,-.3421,-.1514),vec4(-.2015,-1.8356,.0617,.5274),vec4(-.3133,-.0084,.505,-.2001),vec4(-.2022,-.6722,.1521,1.1008),vec4(.2019,.5271,.3512,-.2375),vec4(-.0923,-.049,-.236,.3407),vec4(.1949,-.0718,-.3678,.3082),vec4(-.2284,.5627,.2768,-.4833),vec4(-.3173,-.1517,-.1825,-.5261),vec4(-.2977,-2.3869,-1.5113,-.2588),vec4(-.287,.0301,.0067,-.3468),vec4(-1.3941,.3565,.0974,-.2148),vec4(-.1784,.2151,-.1589,-.93),vec4(-.3915,.0439,.0019,-.0416),vec4(-.496,-.069,-.1044,-.1541),vec4(-.3171,-.9875,.0487,-.0524),vec4(-.1266,-.1441,.003,.1631),vec4(-.6357,-.9292,-.1408,-.4378),vec4(-.0729,-.6304,-.0125,-.6838),vec4(-.6072,.2187,.3464,-.8561),vec4(.0751,-.2408,.8007,-.8663),vec4(-1.6141,.2893,-.3403,.3165),vec4(-.6033,-1.2109,.1594,.0979),vec4(.3047,-.4664,-.0123,-.0929),vec4(-.3384,-.7285,.6466,-.1502),vec4(-1.2615,.0211,.2225,-.1735),vec4(.2011,.2698,-.0411,-.033),vec4(-.2451,-.5938,.0727,-.1743),vec4(.0658,-.1379,.0866,.294),vec4(.2534,.6147,.1774,-.2141),vec4(.4485,.6254,-1.0358,-.504),vec4(-.8678,-.0494,.0117,.0781),vec4(.0079,1.3003,-.21,.2994),vec4(-.3325,-.2042,-.5611,.297),vec4(-.3617,.9549,.38,-.1571),vec4(-1.9093,-1.1896,.1284,.1968),vec4(-.0472,.3423,.7511,.3386),vec4(.0816,-.129,-.026,-.4863),vec4(.2184,-.1593,-.8593,-.0211),vec4(-.0027,.6413,.426,.0441),vec4(.0076,.3519,.0649,-.2969),vec4(-.6097,-.5208,-1.3331,-1.0074),vec4(.2838,-.0677,-.0164,-.0421),vec4(-.7533,-.1955,-.67,.4217),vec4(-.0471,-1.0638,-1.2337,-.1004),vec4(-.0522,.0425,-.3442,-.2346),vec4(.1519,-.0227,-.6802,-.5067),vec4(.2356,-.5879,.1431,.3564),vec4(-.213,-.074,-.2208,.3384),vec4(-.0119,1.8237,-.453,.1353),vec4(.1324,-.1558,.0923,-.4723),vec4(-.1759,-.0809,-.2262,-1.3797),vec4(.1287,.2603,.0265,-.2423),vec4(-.0942,-2.1223,-.0877,-.1092),vec4(-.4077,-1.2289,1.6646,-.0383),vec4(.1717,-.3471,-.7847,-.2296),vec4(-.4344,-.5067,.1351,-1.9288),vec4(.1797,-.5418,-.7472,1.1881),vec4(-.0916,-.1449,-.5128,.2067),vec4(-.036,.9398,.3782,.3373),vec4(.5649,-.4862,.1625,-.5568),vec4(-.7854,.0163,-.0814,-.0631),vec4(-.0676,.1011,-.5333,-.5129),vec4(-.2779,.024,-.0473,.1058),vec4(.2746,.3652,.8415,.134),vec4(-.3637,-.3515,-.0958,-.2731),vec4(-.0145,-.185,-.8115,.5031),vec4(.3016,-.2202,.3377,-.3889),vec4(-.1197,-.0295,-.022,-.3962),vec4(-.521,.1807,.481,.266),vec4(.1361,-.3126,.039,-.3364),vec4(.3315,.3281,.3318,.5711),vec4(.1193,.2507,.028,-.5562),vec4(.0075,.2753,-.819,-.8067),vec4(-.1275,-.4593,-.0666,.2489),vec4(1.0903,-.4913,-.6063,.1817),vec4(0.,-.4519,-.447,-.0036),vec4(.1774,.2234,-.0876,-.1928),vec4(-.1504,.3826,-.4938,.1282),vec4(-.1894,1.6804,.7341,-.0643),vec4(.9668,-.3329,-.2892,.3248),vec4(.1606,-.0373,-.112,.6346),vec4(-.4428,-.2626,.3028,-.325),vec4(-.2424,-1.6273,-.1865,.3404),vec4(-.0273,-.6879,1.5784,.4401),vec4(.1171,-.3529,.3802,-.8824),vec4(-.944,-.1606,.0406,-.0942),vec4(.1642,-.4051,-.543,.4952),vec4(-.073,.8301,-.1026,-.0807),vec4(.2872,-.5357,-.8453,.3492),vec4(.0652,-.5143,-.2217,-.4505),vec4(-.4705,-.1736,-.086,.1691),vec4(-.0439,1.1776,-.4684,.3263),vec4(-.4074,.4233,-.0978,-.5536));\n\nconst float nn_layer8_biases[3] = float[](.0035,-.0044,-.0055);\nconst vec4 nn_layer8_weights[15] = vec4[](vec4(.0957,.1283,.1161,-.0446),vec4(.1878,.0735,.048,.0357),vec4(.1,-.1049,.0511,.0709),vec4(-1.2025,.1849,-.0644,.0731),vec4(.0923,-.0361,.0868,-.1521),vec4(.0405,.0867,.0499,-.0499),vec4(-.0096,.0555,.0479,.2528),vec4(.0731,-.0909,.0569,.0609),vec4(-.8781,.0171,-.0476,.088),vec4(.0525,-.0695,-.1692,.2865),vec4(.029,.0426,.03,-.0582),vec4(.0038,.0435,.0431,.3384),vec4(.0461,-.0747,.0488,.0798),vec4(-.7446,.0223,-.0377,.0997),vec4(.0372,-.0597,-.1744,.1613));\n\nvec3 sample_nn(vec2 uv, float time)\n{\n    #define nn_input arr0\n    #define nn_output arr0\n\n    float arr0[20], arr1[20];\n\n    // put input layer values in the first 3 elements in the nn_input array.\n    nn_input[0] = uv.x;\nnn_input[1] = uv.y;\nnn_input[2] = time;\n\n    // layer 0 to 1 (sizes: 3 -> 20)\n    for (int n = 0; n < 20; n++)\n    {\n        float sum = 0.;\n        for (int pn = 0; pn < 3; pn++)\n        {\n            sum += arr0[pn] * NN_FLOAT_FROM_VEC4_ARR(\n                nn_layer1_weights,\n                pn + (n * 3)\n            );\n        }\n        sum += nn_layer1_biases[n];\n        arr1[n] = nn_activation_layer1(sum);\n    }\n\n    // layer 1 to 2 (sizes: 20 -> 20)\n    for (int n = 0; n < 20; n++)\n    {\n        float sum = 0.;\n        for (int pn = 0; pn < 20; pn++)\n        {\n            sum += arr1[pn] * NN_FLOAT_FROM_VEC4_ARR(\n                nn_layer2_weights,\n                pn + (n * 20)\n            );\n        }\n        sum += nn_layer2_biases[n];\n        arr0[n] = nn_activation_layer2(sum);\n    }\n\n    // layer 2 to 3 (sizes: 20 -> 20)\n    for (int n = 0; n < 20; n++)\n    {\n        float sum = 0.;\n        for (int pn = 0; pn < 20; pn++)\n        {\n            sum += arr0[pn] * NN_FLOAT_FROM_VEC4_ARR(\n                nn_layer3_weights,\n                pn + (n * 20)\n            );\n        }\n        sum += nn_layer3_biases[n];\n        arr1[n] = nn_activation_layer3(sum);\n    }\n\n    // layer 3 to 4 (sizes: 20 -> 20)\n    for (int n = 0; n < 20; n++)\n    {\n        float sum = 0.;\n        for (int pn = 0; pn < 20; pn++)\n        {\n            sum += arr1[pn] * NN_FLOAT_FROM_VEC4_ARR(\n                nn_layer4_weights,\n                pn + (n * 20)\n            );\n        }\n        sum += nn_layer4_biases[n];\n        arr0[n] = nn_activation_layer4(sum);\n    }\n\n    // layer 4 to 5 (sizes: 20 -> 20)\n    for (int n = 0; n < 20; n++)\n    {\n        float sum = 0.;\n        for (int pn = 0; pn < 20; pn++)\n        {\n            sum += arr0[pn] * NN_FLOAT_FROM_VEC4_ARR(\n                nn_layer5_weights,\n                pn + (n * 20)\n            );\n        }\n        sum += nn_layer5_biases[n];\n        arr1[n] = nn_activation_layer5(sum);\n    }\n\n    // layer 5 to 6 (sizes: 20 -> 20)\n    for (int n = 0; n < 20; n++)\n    {\n        float sum = 0.;\n        for (int pn = 0; pn < 20; pn++)\n        {\n            sum += arr1[pn] * NN_FLOAT_FROM_VEC4_ARR(\n                nn_layer6_weights,\n                pn + (n * 20)\n            );\n        }\n        sum += nn_layer6_biases[n];\n        arr0[n] = nn_activation_layer6(sum);\n    }\n\n    // layer 6 to 7 (sizes: 20 -> 20)\n    for (int n = 0; n < 20; n++)\n    {\n        float sum = 0.;\n        for (int pn = 0; pn < 20; pn++)\n        {\n            sum += arr0[pn] * NN_FLOAT_FROM_VEC4_ARR(\n                nn_layer7_weights,\n                pn + (n * 20)\n            );\n        }\n        sum += nn_layer7_biases[n];\n        arr1[n] = nn_activation_layer7(sum);\n    }\n\n    // layer 7 to 8 (sizes: 20 -> 3)\n    for (int n = 0; n < 3; n++)\n    {\n        float sum = 0.;\n        for (int pn = 0; pn < 20; pn++)\n        {\n            sum += arr1[pn] * NN_FLOAT_FROM_VEC4_ARR(\n                nn_layer8_weights,\n                pn + (n * 20)\n            );\n        }\n        sum += nn_layer8_biases[n];\n        arr0[n] = nn_activation_layer8(sum);\n    }\n\n    // the first 3 values in the nn_output array contain the output values in the last \n    // layer.\n    return vec3(nn_output[0], nn_output[1], nn_output[2]);\n\n    #undef nn_input\n    #undef nn_output\n}\n\n// end of generated code\n// ********************************************************\n\n\n\nfloat triangle_wave(float x)\n{\n    float m = mod(x, 1.);\n    if (mod(x, 2.) >= 1.)\n        return 1. - m;\n    else\n        return m;\n}\n\nvoid mainImage(out vec4 frag_col, in vec2 frag_coord)\n{\n    vec2 uv = (2. * frag_coord - iResolution.xy) / iResolution.y;\n    \n    // UV to use for the NN\n    vec2 uv01 = vec2(\n        remap(uv.x, -1.333, 1.333, 0., 1.),\n        remap(uv.y, -1., 1., 0., 1.)\n    );\n    if (any(lessThan(uv01, vec2(0.))) || any(greaterThan(uv01, vec2(1.))))\n    {\n        frag_col = vec4(vec3(0), 1);\n        return;\n    }\n    \n    // sample the neural network\n    vec3 col = sample_nn(\n        uv01,\n        1. - (cos(6.2831853 * iTime / 2.5) * .5 + .5)//triangle_wave(iTime / 2.)\n    );\n    col = max(col, 0.);\n    \n    // OETF (Linear BT.709 I-D65 -> sRGB 2.2)\n    col = pow(col, vec3(1. / 2.2));\n    \n    // output\n    frag_col = vec4(col, 1);\n}","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":"#define FUNC_REMAP(T) \\\nT remap(T v, float inp_start, float inp_end, float out_start, float out_end) \\\n{ \\\n    return out_start \\\n        + ((out_end - out_start) / (inp_end - inp_start)) * (v - inp_start); \\\n}\n\n#define FUNC_REMAP_CLAMP(T) \\\nT remap_clamp( \\\n    T v, \\\n    float inp_start, \\\n    float inp_end, \\\n    float out_start, \\\n    float out_end \\\n) \\\n{ \\\n    T t = clamp((v - inp_start) / (inp_end - inp_start), 0., 1.); \\\n    return out_start + t * (out_end - out_start); \\\n}\n\n#define FUNC_REMAP01(T) \\\nT remap01(T v, float inp_start, float inp_end) \\\n{ \\\n    return clamp((v - inp_start) / (inp_end - inp_start), 0., 1.); \\\n}\n\nFUNC_REMAP(float)\nFUNC_REMAP(vec2)\nFUNC_REMAP(vec3)\nFUNC_REMAP(vec4)\n\nFUNC_REMAP_CLAMP(float)\nFUNC_REMAP_CLAMP(vec2)\nFUNC_REMAP_CLAMP(vec3)\nFUNC_REMAP_CLAMP(vec4)\n\nFUNC_REMAP01(float)\nFUNC_REMAP01(vec2)\nFUNC_REMAP01(vec3)\nFUNC_REMAP01(vec4)","name":"Common","description":"","type":"common"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4cyfRV","date":"1734325673","viewed":3505,"name":"Neural Cat","username":"beans_please","description":"deep neural network trained to produce cat meme video","likes":35,"published":3,"flags":0,"usePreview":1,"tags":["learning","cat","deep","ai","machine","neural","network","ann","dnn"],"hasliked":0,"parentid":"","parentname":""}}