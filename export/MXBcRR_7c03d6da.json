{"ver":"0.1","info":{"id":"MXBcRR","date":"1726837781","viewed":54,"name":"Quantizing Dither Shader","username":"timerunner16","description":"Finds the closest two colors after restricting palette to a certain number of colors per channel. It then decides which color to use based on whether the value of the dithering texture is less or greater than the original normalized between the high/low.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["dither","dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// # of colors per channel\n#define PALETTE 8.0\n\nfloat getDither(vec2 coord) {\n    // Take pixel coordinates and divide by eight so 8px=1 texture repeat\n    // Replace 8 with new scale based on size of dither texture)\n    coord = coord/8.;\n    \n    // Sample only red channel to get a grayscale 0-1 value\n    return texture(iChannel0, coord).r;\n}\n\nvec3 dither(vec3 color, vec2 fragCoord) {\n    // Find quantized closest quantized color greater and lower than original color\n    vec3 lower = floor(color * PALETTE)/PALETTE;\n    vec3 upper = ceil(color * PALETTE)/PALETTE;\n    \n    // Normalize color between lower and upper color\n    vec3 n_diff = (color-lower)/(upper-lower);\n    \n    // Get dither from dither texture\n    float dither = getDither(fragCoord);\n    \n    // Compare normalized color of each channel against the dither value\n    // Lesser than dither = use lower\n    // Higher than dither = use higher\n    float d_r = n_diff.r < dither ? lower.r : upper.r;\n    float d_g = n_diff.g < dither ? lower.g : upper.g;\n    float d_b = n_diff.b < dither ? lower.b : upper.b;\n    \n    // Output resulting quantized dithered color\n    return vec3(d_r, d_g, d_b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Sample color from texture\n    vec3 col = texture(iChannel1, uv).xyz;\n\n    // Two output styles based on lmb down\n    if (iMouse.z < 0.5) {\n        // Full screen dither\n        col = dither(col, fragCoord);\n    } else {\n        // More informational version\n        // Original color on left\n        // Standard color quantization on middle\n        // Dithered color quantization on left\n        // Topbar shows how many colors per channel\n        if (uv.y < 0.9) {\n            if (uv.x > 0.333 && uv.x < 0.666) {\n                col = round(col * PALETTE)/PALETTE;\n            } else if (uv.x > 0.666) {\n                col = dither(col, fragCoord);\n            }\n        } else {\n            col = round(vec3(uv.x) * PALETTE)/PALETTE;\n        }\n    }\n    \n    //Output color to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}