{"ver":"0.1","info":{"id":"4stXzl","date":"1460921652","viewed":169,"name":"Munching Squares basic","username":"Eytoucan","description":"Munching Squares. A practice program","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//condensed version by FabriceNeyret2\nvoid mainImage( out vec4 O,  vec2 U )\n{\n\tvec2 R =  iResolution.xy;\n    U = (U-.5*R)/R.x;\n    \n    vec2 b = U * 256.+256.;\n    float p, c = 0.;\n    \n    for(float i = 16.; i>=1.; i--) \n    {\n        p = exp2(i);     \n        if (p < b.x ^^ p < b.y)  c += p;\n        b -= p*step(p,b);\n    }   \n    c=fract(c/128.);\n\tO = vec4(sin(c+ U.x*cos(U.y*1.2)), \n             tan(c+ U.y-.3)*1.1,\n             cos(c- U.y+.9),\n             1);\n}","name":"Image","description":"","type":"image"}]}