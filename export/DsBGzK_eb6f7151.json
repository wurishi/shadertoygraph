{"ver":"0.1","info":{"id":"DsBGzK","date":"1667846475","viewed":116,"name":"2D water waves","username":"yceraf","description":"ocean waves, click and increase turbulence","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","waves","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat fbm(in vec2 uv, float time) {\n\n    float value = 0.0;\n\n    // Properties\n    float lacunarity = 1.5;\n    float gain = 0.4;\n    const int octaves = 4;\n    //\n    // Initial values\n    float amplitude = 0.02;\n    float frequency = 12.0;\n    \n    // loop of octaves\n    for (int i = 0; i < octaves; i++) {\n    \n        value += amplitude * sin(uv.x * frequency + time);\n        frequency *= lacunarity;\n        amplitude *= gain;\n    \n    }\n    \n    return value;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.0);\n\n    float water_limit = 0.3;\n    float time = iTime * 1.5;\n    \n    bool click = iMouse.z > 0.0;\n    if (click) {\n        water_limit += sin(uv.x + time * 0.7) * 0.2;\n    }\n    \n    water_limit += fbm(uv, time);\n    \n    col.b = 0.4 * smoothstep(water_limit, water_limit - (1.5/iResolution.y), uv.y);\n    \n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}