{"ver":"0.1","info":{"id":"WdccDH","date":"1600811717","viewed":1519,"name":"A Colorful Intro-Black&White","username":"RupertOnTheLoose","description":"Used for Black and White Threshold tutorial","likes":3,"published":1,"flags":0,"usePreview":1,"tags":["tutorial","threshold","blackandwhite"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 BlackAndWhiteThreshold(vec3 color, float threshold)\n{\n    float bright = 0.333333 * (color.r + color.g + color.b);\n    float b = mix(0.0, 1.0, step(threshold, bright));\n    return vec3(b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 texColor = texture(iChannel0, uv);\n    \n    \n    // get gray scale or luminescence\n    float gray = 0.33 * (texColor.r + texColor.g + texColor.b);\n    \n    // mix white and black by the value of step(threshold, gray)\n    float threshold = 0.5;\n    if(gray > threshold)\n    {\n     // white\n     texColor.rgb = vec3(1.0);   \n    }\n    else\n    {\n     // black\n     texColor.rgb = vec3(0.0);\n    }\n    \n    \n    // Another way\n    texColor = texture(iChannel0, uv);\n    texColor.rgb = BlackAndWhiteThreshold(texColor.rgb, 0.5);\n\n    // Output to screen\n    fragColor = texColor;\n}","name":"Image","description":"","type":"image"}]}