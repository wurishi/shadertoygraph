{"ver":"0.1","info":{"id":"7lX3R7","date":"1719466110","viewed":54,"name":"2D Wave Simple","username":"kinokomushroom","description":"wip wave","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["wave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.1415926535\nfloat height_multiplier = 3.0;\nfloat camera_distance = 400.0;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pixel_uv = vec2(1.0, 1.0) / iResolution.xy;\n    \n    float difference_z_x = texture(iChannel0, uv + pixel_uv * vec2(1.0, 0.0)).x - texture(iChannel0, uv + pixel_uv * vec2(-1.0, 0.0)).x;\n    float difference_z_y = texture(iChannel0, uv + pixel_uv * vec2(0.0, 1.0)).x - texture(iChannel0, uv + pixel_uv * vec2(0.0, -1.0)).x;\n    vec3 x_slope = vec3(2.0, 0.0, difference_z_x * height_multiplier);\n    vec3 y_slope = vec3(0.0, 2.0, difference_z_y * height_multiplier);\n    vec3 normal = normalize(cross(x_slope, y_slope));\n    \n    vec2 center_position = iResolution.xy * 0.5;\n    vec3 camera_position = vec3(center_position, -camera_distance);\n    vec3 pixel_position = vec3(fragCoord, 0.0);\n    vec3 camera_to_pixel = normalize(pixel_position - camera_position);\n    vec3 reflected = reflect(camera_to_pixel, normal);\n    \n    float rotation = -0.5 * pi;\n    mat2 rotation_matrix = mat2(vec2(cos(rotation), sin(rotation)), vec2(-sin(rotation), cos(rotation)));\n    reflected.yz *= rotation_matrix;\n    \n    vec3 color = texture(iChannel1, reflected).xyz;\n\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define pi 3.1415926535\nfloat acceleration_multiplier = 0.5;\nfloat frequency = 1.0;\n\nfloat remap_range(float value) {\n    return value * 0.5 + 0.5;\n}\n\nfloat unmap_range(float value) {\n    return value * 2.0 - 1.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 pixel_uv = vec2(1.0, 1.0) / iResolution.xy;\n    \n    float current_position;\n    float current_velocity;\n    \n    if (iFrame == 0) {\n        current_position = 0.0;\n        current_velocity = 0.0;\n    }\n    else {\n        vec4 previous_pixels[5];\n        previous_pixels[0] = texture(iChannel0, uv);\n        previous_pixels[1] = texture(iChannel0, uv + pixel_uv * vec2(1.0, 0.0));\n        previous_pixels[2] = texture(iChannel0, uv + pixel_uv * vec2(-1.0, 0.0));\n        previous_pixels[3] = texture(iChannel0, uv + pixel_uv * vec2(0.0, 1.0));\n        previous_pixels[4] = texture(iChannel0, uv + pixel_uv * vec2(0.0, -1.0));\n\n        float previous_position = unmap_range(previous_pixels[0].x);\n        float difference_sum = unmap_range(previous_pixels[1].x) + unmap_range(previous_pixels[2].x)\n            + unmap_range(previous_pixels[3].x) + unmap_range(previous_pixels[4].x) - 4.0 * previous_position;\n        //float difference_sum = unmap_range(previous_pixels[1].x) + unmap_range(previous_pixels[2].x) - 2.0 * previous_position;\n\n        float acceleration = difference_sum * 0.5;\n        \n        if (uv.y >= 0.5) {\n            acceleration *= 1.0;\n        }\n        else {\n            acceleration *= 0.5;\n        }\n\n        float previous_velocity = unmap_range(previous_pixels[0].y);\n        current_velocity = previous_velocity + acceleration;\n        current_position = previous_position + current_velocity;\n        \n        if ((distance(fragCoord, iResolution.xy * vec2(0.2, 0.2)) <= 1.0 || distance(fragCoord, iResolution.xy * vec2(0.8, 0.8)) <= 1.0)\n            && iTime * frequency <= 1.5) {\n        //if (distance(fragCoord, iResolution.xy * vec2(0.2, 0.8)) <= 1.0 && iTime * frequency <= 1.5) {\n            current_position = pow(sin(iTime * frequency * 2.0 * pi), 4.0);\n            current_velocity = 0.0;\n        }\n        \n        if (fragCoord.x <= 1.0 || fragCoord.x >= iResolution.x - 1.0 || fragCoord.y <= 1.0 || fragCoord.y >= iResolution.y - 1.0) {\n            current_position = 0.0;\n            current_velocity = 0.0;\n        }\n    }\n    \n    fragColor = vec4(remap_range(current_position), remap_range(current_velocity), 0.0, 0.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}