{"ver":"0.1","info":{"id":"DsdGDr","date":"1677770676","viewed":63,"name":"TP01-12220944-Omer_Can_Ozturk","username":"omercanozturk","description":"Devoir du TP01-INF2012L","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["signeddistances"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//TP01\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n\n mat3 rotate = mat3(\n        vec3(0.0, -1.0, 0.0),\n        vec3(1.0, 0.0, 0.0),\n        vec3(0.0, 0.0, 1.0)\n    );\n\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(65.,25.,35.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\nfloat Tore( vec3 p, vec2 q )\n{\n  vec2 c = vec2(length(p.xz)- \n  q.x,p.y);\n  return length(c)-q.y;\n }\n \n float sdRhombus(vec3 p, float la, float lb, float h, float ra)\n{\n  p = abs(p);\n  vec2 b = vec2(la,lb);\n  float f = clamp( (dot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );\n  vec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y)-ra, p.y-h);\n  return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n \n // Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\n\n\n\n\nfloat Cylinder(vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat Box(vec3 p,vec3 b){\n    vec3 q = abs(p) -b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n\n \n}\n\nfloat Capsule( vec3 p, vec3 q, vec3 r, float rad )\n{\n  vec3 pq = p - q, rq = r - q;\n  float h = clamp( dot(pq,rq)/dot(rq,rq), 0.0, 1.0 );\n  return length( pq - rq*h ) - rad;\n}\n\n\nfloat sdPlane( vec3 p, vec3 n, float h )\n{\n  // n must be normalized\n  return dot(p,n) + h;\n}\n\n\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\nfloat Intersection(float a,float b)\n{\n  return max(a,b);\n}\n\nfloat Diff(float a,float b){\n    return max(a,-b);\n}\n    \n    \nfloat Colonne(vec3 p) //column model\n{\n     vec3 t = p;\n     vec3 q = vec3(p.x,p.y-13.5,p.z);\n     vec3 qq = vec3(p.x,p.y+13.5,p.z);\n     vec3 qqq = vec3(p.x,p.y+9.3,p.z);\n     vec3 qqqq = vec3(p.x,p.y-15.3,p.z);\n     float v = Cylinder(p,15.,3.);    \n     v = min(v,Box(q,vec3(2.4,2.4,2.4)));\n     v = min(v,Box(qq,vec3(2.4,2.4,2.4)));\n     v = min(v,Tore(qqq,vec2(1.8,1.8)));\n     v = min(v,Tore(qqqq,vec2(1.8,1.8)));\n     return v;\n    \n}\n\nfloat tankTop(vec3 p) //upper part of the tank\n{\n   \n       vec3 x = vec3(p.x,p.y,p.z-10.);\n   \n       \n       //all of these are the different coordinates of the shapes.\n       vec3 q = vec3(x.x,x.y+6.,x.z-3.);\n       vec3 qq = vec3(q.x,q.y+6.,q.z-3.);\n       vec3 ta = vec3(q.x,q.y-11.,q.z-5.);\n       vec3 qqq = vec3(x.x,x.y-6.,x.z+3.);\n       vec3 qqqq = vec3(x.x-10.,x.y-6.,x.z+3.);\n       vec3 qqqqq = vec3(x.x+10.,x.y-6.,x.z+3.);\n       vec3 qqqqqq = vec3(x.x,x.y+20.,x.z+3.);\n       vec3 f = vec3(qqqqqq.x+12.,qqqqqq.y+12.,qqqqqq.z-2.);\n\n       float y = Colonne(x);\n       float v = Box(x,vec3(12.,3.,3.));\n       v = Union(v,Box(q,vec3(12.,3.,3.)));\n       v = Union(v,Box(qq,vec3(12.,3.,3.)));\n       v = Union(v,Box(qqq,vec3(12.,3.,3.)));\n       v = Union(v,Colonne(qqqq));\n       v = Union(v,Colonne(qqqqq));\n       v = Union(v,Cylinder(ta,20.,2.));\n       v = Union(v,Box(qqqqqq,vec3(12.,13.,13.)));\n       v = Diff(v,Intersection(v,Sphere(f,vec3(12.,12.,12.),10.)));\n       v = Diff(v,Intersection(v,Cylinder(ta,20.,1.5)));\n       \n       return v;\n}\n\nfloat tankBottom(vec3 p) //bottom part of the tank\n{\n   \n   float v = Union(sdRhombus(vec3(p.x+24.,p.y+15.,p.z-4.),1.,1.,20.56,1.),sdPlane(p,vec3(0.,0.,2.),9.));\n   \n   v = Union(v,sdRhombus(vec3(p.x-24.,p.y+15.,p.z-4.),1.,1.,20.56,1.));\n   v = Union(v,Box(vec3(p.x,p.y+12.1,p.z-4.),vec3(24.,18.,1.)));\n   \n   v = Union(v,Tore(vec3(p.x+20.87,p.y-4.7,p.z-1.12),vec2(2.4,1.5)));  \n   v = Union(v,Tore(vec3(p.x+10.37,p.y-4.7,p.z-1.12),vec2(2.4,1.5)));\n   v = Union(v,Tore(vec3(p.x+0.87,p.y-4.7,p.z-1.12),vec2(2.4,1.5)));\n   v = Union(v,Tore(vec3(p.x-8.37,p.y-4.7,p.z-1.12),vec2(2.4,1.5)));\n   v = Union(v,Tore(vec3(p.x-20.87,p.y-4.7,p.z-1.12),vec2(2.4,1.5)));\n   \n   v = Union(v,Tore(vec3(p.x+20.87,p.y+30.7,p.z-1.12),vec2(2.4,1.5)));  \n   v = Union(v,Tore(vec3(p.x+10.37,p.y+30.7,p.z-1.12),vec2(2.4,1.5)));\n   v = Union(v,Tore(vec3(p.x+0.87,p.y+30.7,p.z-1.12),vec2(2.4,1.5)));\n   v = Union(v,Tore(vec3(p.x-8.37,p.y+30.7,p.z-1.12),vec2(2.4,1.5)));\n   v = Union(v,Tore(vec3(p.x-20.87,p.y+30.7,p.z-1.12),vec2(2.4,1.5)));\n   return v;\n\n}\n\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n\n    //Je n'ai pu pas cr√©er les objects differents et renderer donc j'ai fait tous les objets dans cet\n    //fonction. Effacer les commentaires pour afficher les formes svp pendant le rendu.\n\n\n    //PARTE 1- LES FORMES\n\n    //Sphere\n    \n    //float v = Sphere(p,vec3(3.,4.,5.),4.);\n    \n    //Cylinder\n    \n    //float v = Cylinder(p,12.,2.);\n    \n    //Torus\n    \n    //float v = Tore(p,vec2(5.,2.));\n    \n    //Box\n    \n    //float v = Box(p,vec3(4.,4.,4.));\n    \n    //Capsule\n    \n    //float v = Capsule(p,vec3(1.,-4.,2.),vec3(-4.,3.3,6.6),2.14);\n    \n    \n//-----------------------------------------------------------------------------------------------------------\n    \n    //PARTE 2-UNION/INTERSECTION/DIFFERENCE\n    \n    //Diff on a torus and a box\n    \n    /*\n    float v = Tore(p,vec2(4.,4.));\n    v = Diff(v,Box(p,vec3(12.,6.,6.)));\n    */\n    \n    \n    \n    //Intersection of a cylinder and a torus\n    /*\n    float v = Cylinder(p,5.,5.);\n    v = Intersection(v,Tore(p,vec2(5.,2.)));\n    */\n    \n    \n    \n   //Unions and diffs of boxes and capsules\n   \n  /* \n   \n   float v=Union(\n    Union(Box(p,vec3(4.,4.,4.)),\n    Capsule(p,vec3(-3.,-4.32,4.),vec3(3.,-4.,4.),3.)),\n    Capsule(p,vec3(3,4.32,-4),vec3(-3.,4.,-4.),3.)\n  );\n  \n  \n  v = Diff(v,Box(p,vec3(5.,2.,3.)));\n  \n  v = Union(v,Intersection(Box(p,vec3(5.,5.,5.)),Capsule(p,vec3(3,-4.32,-4),vec3(-3,-4.32,-4),3.)));\n  v = Union(v,Capsule(p,vec3(3,-4.32,4),vec3(3,4.32,-4),3.));\n  */\n    \n    \n    \n    \n    \n    \n   \n  //Delete the comments for the Union of all shapes.\n  //float v = Sphere(p,vec3(3.,5.,2.),9.);\n\n  /*\n  float v=Union(\n  Capsule(p,vec3(12.,6.,6.),vec3(1.,3.,2.),3.14)\n    ,\n    Sphere(vec3(3.,4.,9.),vec3(3.,0.,5.),3.75)\n  );\n  \n  \n  v=Union(v,\n    Box(p,vec3(3.,4.,12.))\n  );\n  \n  v=Union(v,\n    Tore(p,vec2(5.3,3.))\n  );\n  \n  v=Union(v,\n    Capsule(p,vec3(5.,3.,3.),vec3(2.,3.,4.),3.14)\n  );\n  \n  v=Union(v,\n    Sphere(p,vec3(0.,0.,-27.),24.)\n  );\n  */\n  \n  \n//---------------------------------------------------------------------------------------------------------\n\n    //PARTE 3-HIERARCHIE \n    float v = Union(tankTop(p),tankBottom(p)); //union function to put together the upper and lower parts\n   \n   \n   \n \n   \n   \n   \n   \n  \n    \n    \n   \n  \n  return v;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}","name":"Image","description":"","type":"image"}]}