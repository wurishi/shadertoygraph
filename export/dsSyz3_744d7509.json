{"ver":"0.1","info":{"id":"dsSyz3","date":"1687967317","viewed":130,"name":"bubble smiley grid","username":"johnpertoftembark","description":"bubble","likes":1,"published":1,"flags":8,"usePreview":0,"tags":["bubble"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nvec2 getCenter(float time) {\n    float speed = 0.6;\n    float zigzag = sin(time * speed) * cos(time * speed * 2.0);\n    return vec2(0.5, 0.2) + vec2(cos(time * speed), zigzag)*0.3;\n}\n\nvec2 getBubble(vec2 uv, float time) {\n    vec2 center = getCenter(time);\n    float dist = length(uv - center);\n    float factor = sin(2.0*PI*dist - time)*0.07/dist;\n    return uv + factor*(uv - center);\n}\n\nvec3 getColor(float dist) {\n    float hue = mod(dist * 3.0, 1.0);\n    float saturation = 1.0;\n    float value = 1.0;\n\n    // Convert HSV to RGB\n    int hi = int(hue * 6.0);\n    float f = hue * 6.0 - float(hi);\n    float p = value * (1.0 - saturation);\n    float q = value * (1.0 - f * saturation);\n    float t = value * (1.0 - (1.0 - f) * saturation);\n\n    vec3 color;\n\n    if (hi == 0) color = vec3(value, t, p);\n    else if (hi == 1) color = vec3(q, value, p);\n    else if (hi == 2) color = vec3(p, value, t);\n    else if (hi == 3) color = vec3(p, q, value);\n    else if (hi == 4) color = vec3(t, p, value);\n    else color = vec3(value, p, q);\n\n    return color;\n}\n\nvec3 getSmiley(vec2 uv, vec2 center, float time) {\n    vec3 color = vec3(1.0, 1.0, 0.0);\n    float eye_r = length(uv - center - vec2(-0.05, 0.05));\n    float eye_l = length(uv - center - vec2(0.05, 0.05));\n    \n    if (eye_r < 0.01 || eye_l < 0.01) {\n        color = vec3(0.0, 0.0, 0.0);\n    }\n\n    vec2 mouth_pos = uv - center;\n    vec2 mouth_offset = center - uv;\n    float angle = atan(mouth_offset.y, mouth_offset.x);\n    float dist = length(mouth_offset);\n    \n    float smile_size = sin(time) * 0.5 + 0.5; // Range 0 to 1\n    float smile_lower_angle = mix(0.0, PI / 2.0, smile_size);\n    float smile_upper_angle = mix(PI / 2.0, PI, 1.0 - smile_size);\n    \n    if (dist > 0.065 && dist < 0.07 && angle > smile_lower_angle && angle < smile_upper_angle) {\n        color = vec3(0.0, 0.0, 0.0);\n    }\n\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.y;\n    uv *= iResolution.y / iResolution.x;\n\n    vec2 bubbleUV = getBubble(uv, iTime);\n    vec2 grid_pos = mod(bubbleUV * 40.0, 1.0);\n    vec3 color = vec3(0.0);\n\n    vec2 center = getCenter(iTime);\n    float dist = length(uv - center);\n\n    if (dist < 0.1) {\n        color = getSmiley(uv, center, iTime);\n    } else if (grid_pos.x < 0.03 || grid_pos.y < 0.03) {\n        color = getColor(dist);\n    }\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265359\n\nvec2 mainSound( int samp, float time ) {\n    return vec2(0.0);\n}\n\nvec2 mainSound1( int samp, float time ) {\n    // A wavering 330 Hz wave\n    float freq = 330.0;  // Frequency \n    float speed = 6.0;   // Speed of tremolo\n    float depth = 0.5;   // Depth of tremolo\n\n    float tremolo = (1.0 + sin(2.0 * PI * time * speed) * depth);\n    return vec2( sin(2.0 * PI * freq * time * tremolo ));\n}\n\n\nvec2 mainSound2( int samp, float time ) {\n    // A helicopter-like sound\n    float freq = 20.0 - 10.0 * sin(0.1 * time); // Modulating frequency to simulate blade speed\n    float amp = 0.5 * (1.0 + sin(0.1 * time)); // Modulating amplitude to simulate blade whooshing noise\n    return vec2( sin(2.0 * PI * freq * time) * amp );\n}","name":"Sound","description":"","type":"sound"}]}