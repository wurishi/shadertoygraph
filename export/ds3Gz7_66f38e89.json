{"ver":"0.1","info":{"id":"ds3Gz7","date":"1677077065","viewed":76,"name":"Radial Segments 101","username":"gdschmdt","description":"Radial segments","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["radial","segments","jeremy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415926535897932384626433832795;\nconst float TWO_PI = 6.283185307179586476925286766559;\n\nfloat N21(vec2 p) {\n    // N21 -> noise, 2 inputs, 1 output\n    return fract(sin(p.x * 100. + p.y * 6574.)* 5647.);\n}\n\nvec2 N22(vec2 p) {\n    // N22 -> noise, 2 inputs, 2 outputs\n    // TODO\n    return vec2(0);\n}\n\n\n#define NUM_CELLS 10.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy ;\n    vec2 uvRaw = uv;\n    \n    vec3 col = vec3(0);\n    \n    uv = uv * 2.0 - 1.0;\n    \n    float aspect = iResolution.y / iResolution.x;\n    uv.y *= aspect;\n    \n    vec2 uv_r = vec2(0.0);\n    uv_r.x = 1.0 * sin(length(uv));\n    uv_r.y = 1.0 * cos(length(uv));\n    \n    col.rgb = vec3(fract(uv_r.y + iTime));\n    col.rgb = vec3(uv_r.r);\n    \n    float speed = 10.0;\n    float circleCount = 20.0;\n    float circleSegmentLength = 0.25;\n    float circleSegmentHeight = 0.2;\n    float t = floor(iTime * speed);\n    float t2 = floor(iTime * speed) / circleCount;\n    \n    // Radial movement from inside to outside\n    float circ = atan(uv_r.y, uv_r.x);\n    float y = step(1.0 - circleSegmentHeight, fract(circ + t2));\n    col.rgb = vec3(y);\n    \n    float seg = length(uv.xy);\n    float seg_y = mod(atan(uv.y, uv.x) + t, TWO_PI);\n    col.rgb -= vec3(step(circleSegmentLength * PI, seg_y));\n    \n    \n    ////////// create grid\n    /*\n    uv = uv * NUM_CELLS;\n    vec2 id = floor(uv_r); // grid cell index\n    vec2 gv = fract(uv); // grid uv\n    float cellWidth = 1.0 / NUM_CELLS;\n\n    col.rg = vec2( N21(id / NUM_CELLS));\n    //col.rg = vec2( id / NUM_CELLS);\n\n    // traverse each row, left to right, bottom to top\n    float t = iTime * 20.0;\n    vec2 mov = floor(vec2(mod(t, NUM_CELLS), mod(t / NUM_CELLS,NUM_CELLS)));\n    \n    float d = length(id - mov);\n    //d = step(0.5,d);\n    d =  1.0 - smoothstep(0.0, cellWidth, d);\n    //vec2 mov = vec2(0);\n    col = vec3(d);\n    */\n\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}