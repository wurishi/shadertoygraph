{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"\n// Infinite Grid\n//\n// Adds a grid overlay to your game that can be infinitely panned in any direction.\n//\n// Use as a visual indicator to:\n//   - place sprites in your worlds (grid snapping, for instance)\n//   - judge distance between two or more sprites\n//\n// Based on the \"Graphing\" shader by nimitz.\n// https://www.shadertoy.com/view/MdjGRy\n//\n// @author   Driklyn\n// @version  1.0.2\n// @modified 11/11/17\n// @since    02/21/14\n\n// Tip: Switch these to uniforms and allow programmers to change the values on the fly.\n\nconst int lineWidth      = 1;  // The width of each line (in pixels).\nconst int lineSpacing    = 20; // The amount of spacing between each line (in pixels).\nconst int darkenMultiple = 5;  // Multiple of which lines are darkened (e.g. every 5th line).\n\n// Tip: Make these varying (or in) variables and set them on the CPU side.\n\nfloat scale       = 2.0;       // Global sprite scale.\nvec2  translation = vec2(0.0); // Camera position.\n\n// Use Nyan Cat to simulate a moving player. Purely for this example.\nvec4 showNyanCat(vec4 col, vec2 fragCoord);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t// Simulate camera translation, just for this example.\n\ttranslation.x -= scale * 30.0 * iTime;\n\ttranslation.y -= scale * 10.0 * iTime;\n\t\n\tfloat spacing = float(lineSpacing) * scale;\n\tfloat width   = float(lineWidth)   / spacing;\n\t\n\tvec2 uv = fragCoord.xy;\n\t\n\t// Correct the coordinates by taking into account the aspect ratio (turns the grid into perfect squares).\n\tuv.x *= 1.0 / spacing;\n\tuv.y /= spacing;\n\t\n\t// Adjust the origin of each line thicker than one pixel to its center.\n\tuv.xy += (lineWidth > 1) ? width * 0.5 : width;\n\t\n\t// Make the grid resolution independent by offsetting the Y coordinates based on the current viewport height.\n\tuv.y -= (iResolution.y - 600.0) / spacing;\n\t\n\t// Apply camera translation.\n\tuv.x -= translation.x / spacing;\n\tuv.y += translation.y / spacing;\n\t\n\tfloat grid = 0.0;\n\tgrid = max(step(fract(uv.x), width), grid); // X lines (horizontal)\n\tgrid = max(step(fract(uv.y), width), grid); // Y lines (vertical)\n\t\n\tvec4 col = vec4(grid);\n\t\n\tif (col.r != 0.0 && col.g != 0.0 && col.b != 0.0) {\n\t\tfloat mx = mod(uv.x, float(darkenMultiple));\n\t\tfloat my = mod(uv.y, float(darkenMultiple));\n\t\t\n\t\t// Make lines that are a multiple of `darkenMultiple` darker than the rest.\n\t\tcol.a = (mx < width || my < width) ? 0.2 : 0.15;\n\t} else {\n\t\t// Turn all pixels that aren't apart of the grid invisible as to not cover the rest of the scene.\n\t\tcol.a = 0.0;\n\t}\n\t\n\tcol = showNyanCat(col, fragCoord);\n\t\n\tfragColor = col;\n}\n\nvec4 showNyanCat(vec4 col, vec2 fragCoord) {\n\t// Use a static resolution to prevent the cat from scaling up when entering full screen.\n\tvec2 viewport = vec2(800.0, 600.0);\n\t\n\t// Setup coordinates.\n\tvec2 uv = fragCoord.xy / viewport;\n\t\n\t// Scale down the cat.\n\tuv *= scale;\n\t\n\t// Position the cat in the bottom-left corner.\n\tuv.x += 0.5;\n\tuv.y += 0.5;\n\t\n\t// Center the cat.\n\tuv.x -= iResolution.x / viewport.x;\n\tuv.y -= iResolution.y / viewport.y;\n\t\n\t// The code below is greatly inspired by the \"Nyan Cat\" shader by iq.\n\t// https://www.shadertoy.com/view/lsX3Rr\n\t\n\tuv = clamp(uv, 0.0, 1.0);\n\t\n\tfloat frameIndex = floor(mod(iTime * 5.0, 6.0));\n\tfloat frameSize  = 40.0 / 256.0;\n\t\n\tuv.x = clamp(uv.x * frameSize + frameIndex * frameSize, 0.0, 1.0);\n\tuv.y = 1.0 - uv.y;\n\t\n\tvec4 cat = texture(iChannel0, uv);\n\t\n\tcat = mix(vec4(0.0), cat, cat.a); // Black background.\n\tcol = mix(cat,       col, col.a);\n\t\n\treturn col;\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sj3DG","date":"1392968081","viewed":745,"name":"Infinite Grid","username":"Driklyn","description":"Adds a grid overlay to your game that can be infinitely panned in any direction.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","nyan","grid","sprite","cat","infinite","infinity","editor"],"hasliked":0,"parentid":"","parentname":""}}