{"ver":"0.1","info":{"id":"ddtfzf","date":"1697492642","viewed":58,"name":"[Arflee] Edge detection by lumin","username":"arflee","description":"Simple edge detection where we take every neighbouring pixel around and determine its luminance.","likes":0,"published":1,"flags":0,"usePreview":1,"tags":["arflee"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//gShaderToy.SetTexture(0, {mSrc:'https://upload.wikimedia.org/wikipedia/ru/thumb/2/24/Lenna.png/1422px-Lenna.png', mType:'texture', mID:1, mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }});\n\n\nfloat LinearRgbToLuminance(vec3 linearRgb)\n{\n    return dot(linearRgb, vec3(0.2126729f,  0.7151522f, 0.0721750f));\n}\n\nfloat SampleLuminance(vec2 uv, sampler2D textureChannel)\n{\n    vec4 pic = texture(textureChannel, uv);\n    return pow(( pic.r + pic.g + pic.b ) / 3., 0.7);\n}\n            \nfloat SampleLuminance(vec2 uv, vec2 texelSize, float uOffset, float vOffset)\n{\n    uv += texelSize * vec2(uOffset, vOffset);\n    return SampleLuminance(uv, iChannel0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 pic = texture(iChannel0, uv);\n\n    float picLuminance = LinearRgbToLuminance(pic.rgb);\n    vec2 texelSize = 1.0 / iChannelResolution[0].rg;\n    \n    float m = SampleLuminance(uv, iChannel0);\n    float n = SampleLuminance(uv, texelSize, 0., 1.);\n    float e = SampleLuminance(uv, texelSize, 1., 0.);\n    float s = SampleLuminance(uv, texelSize, 0., -1.);\n    float w = SampleLuminance(uv, texelSize, -1., 0.);\n    float highest = max(max(max(max(n, e), s), w), m);\n    float lowest = min(min(min(min(n, e), s), w), m);\n    float contrast = highest - lowest;\n\n    fragColor = vec4(contrast);\n}","name":"Image","description":"","type":"image"}]}