{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Derivative of https://www.shadertoy.com/view/MdSGDW\n\n#define PI\t\t\t\t3.14159265359\n#define PIH\t\t\t\t(PI/2.0)\n#define PI2\t\t\t\t(PI*2.0)\n#define DRAW_RANGE\t\t64.0\nconst vec3\tMOD_OFFSET\t\t= vec3(8.0, 24.0, 14.0);\nconst vec3\tMOD_INV_OFFSET\t= 1.0 / MOD_OFFSET;\n#define OFFSET_Y\t\t4.0\n\n\nmat3 RotX(float a)\t\t\t\t\t\t\t\t{float s = sin(a); float c = cos(a); return mat3(1,0,0,0,c,s,0,-s,c);}\nmat3 RotY(float a)\t\t\t\t\t\t\t\t{float s = sin(a); float c = cos(a); return mat3(c,0,-s,0,1,0,s,0,c);}\nmat3 RotZ(float a)\t\t\t\t\t\t\t\t{float s = sin(a); float c = cos(a); return mat3(c,s,0,-s,c,0,0,0,1);}\nfloat Sub(float from, float what)\t\t\t\t{return max(from, -what);}\nfloat Add(float a, float b)\t\t\t\t\t\t{return min(a, b);}\nfloat Intersect(float a, float b)\t\t\t\t{return max(a, b);}\n\n\nfloat PropulsionTime(float s, float offset)\t\t{return iTime*16.0 + sin((iTime+offset*PI)*2.0 + PI*0.1)*s;}\nfloat BreathScale(float y, float offset)\t\t{return sin(y * PI * 0.8 + (iTime+offset*PI) * 2.0) * 0.5 + 0.5;}\n\n\nvec4 Rnd4(float i)\t\t\t\t\t\t\t\t{return sin(vec4(123.8456, 64.146543, 992.12343, 1235.01023) * i);}\n\nfloat ModRand(vec3 p)\n{\n\tp = (p + MOD_OFFSET*8.0) / MOD_OFFSET;\n\tp = sin(floor(p)*946.1235) * 0.5 + 0.5;\n\treturn sin(dot(p, vec3(123.1123, 234.123, 67.112))) * 0.5 + 0.5;\n}\n\n\nfloat JellyBody(vec3 p, float inOffset)\n{\n\tp.y\t\t\t\t\t*= 0.7 + inOffset*0.2;\n\t\n\t// Z plugged into X on purpose, this makes the shape not perfect from both sides\n\tp.z\t\t\t\t\t+= (sin(p.x * PI * 4.0)*0.5 + 0.5) * 0.06;\n\tp.x\t\t\t\t\t+= (cos(p.z * PI * 4.0)*0.5 + 0.5) * 0.06;\n\t\n\tfloat breath\t\t= pow(0.2 + BreathScale(p.y, inOffset)*0.8, 0.2);\n\tp.xz\t\t\t\t*= 0.5 + breath*0.5;\n\t\n\tfloat sphereOuter\t= (length(p) - 1.0);\n\tfloat sphereInner\t= (length(p) - 0.95);\n\tfloat hallowSphere\t= Sub(sphereOuter, sphereInner);\n\tfloat bodyLength\t= (p.y+0.5 + (1.0-clamp(breath-0.5,0.0,1.0)) * 0.4);\n\tfloat halfSpere\t\t= Sub(hallowSphere, bodyLength);\n\n\treturn halfSpere;\n}\n\n\nfloat JellyTentacle(vec3 p, float inTentacleLength, float inAnimSpeed, float inOffset)\n{\t\n\tfloat tentacleScalePos\t= clamp(abs(p.y) / inTentacleLength, 0.0, 1.0);\n\t\n\tfloat tentacleMod\t\t= pow(tentacleScalePos, 1.5) * PI2 - PropulsionTime(0.15, inOffset) * inAnimSpeed;\n\tfloat tentacleModifierX\t= cos(tentacleMod)*0.4;\n\tfloat tentacleModifierY\t= cos(tentacleMod + 12.02343)*0.4;\n\tp.x\t\t\t\t\t\t+=(tentacleScalePos * tentacleModifierX) * 2.0;\n\tp.z\t\t\t\t\t\t+=(tentacleScalePos * tentacleModifierY) * 2.0;\n\t\n\tfloat tentacleThickness\t= mix(0.15, 0.01, tentacleScalePos);\n\t\n\tp.y\t\t\t\t\t\t= abs(p.y + inTentacleLength*0.5) - inTentacleLength * 0.5;\n\n\tfloat cylinder\t\t\t= max(length(p.xz) - tentacleThickness, p.y);\n\n\treturn cylinder;\n}\n\n\nfloat JellyFish(vec3 p, float inOffset)\n{\n\t\n\tvec4 rnd\t= Rnd4(1.0 + inOffset);\n\n\tfloat d\t\t= 1000.0;\n\t\n\td\t\t\t= min(d, JellyBody(p, inOffset));\t\n\td\t\t\t= min(d, JellyTentacle(p + vec3(rnd.x, 0, rnd.y)* 0.2, 6.0+rnd.z*4.0, 1.0+rnd.w*0.5, inOffset));\n\t//d\t\t\t= min(d, JellyTentacle(p + vec3(rnd.w, 0, rnd.x)* 0.2, 6.0+rnd.y*4.0, 1.0+rnd.z*0.5, inOffset));\n\t//d\t\t\t= min(d, JellyTentacle(p + vec3(rnd.z, 0, rnd.w)* 0.2, 6.0+rnd.x*4.0, 1.0+rnd.y*0.5, inOffset));\n\t//d\t\t\t= min(d, JellyTentacle(p + vec3(rnd.y, 0, rnd.z)* 0.2, 6.0+rnd.w*4.0, 1.0+rnd.x*0.5, inOffset));\n\n\treturn d;\t\n}\n\n\n\n\nvec2 Scene(vec3 p)\n{\n\t// Create an offset\n\tfloat rnd\t\t= ModRand(p);\n\t\n\tp.y\t\t\t\t-=PropulsionTime(0.3, rnd * PI);\n\t\n\t// Instantiate\n\tp\t\t\t\t= mod(p, MOD_OFFSET)-MOD_OFFSET*0.5;\n\tp.y\t\t\t\t+=rnd * OFFSET_Y;\n\t\n\tfloat d\t\t\t= JellyFish(p, rnd);\n\n\treturn vec2(d, length(p.xz));\n}\n\n\n\nvec2 GetDepth(vec3 p, vec3 o)\n{\n\tvec2 d\t= vec2(1.0, 0.0);\n\tfloat z = 0.0;\n\t\n\tfor(int i=0; i<22; i++)\n\t{\n\t\td = Scene(p + o*z);\n\t\tif(d.x < 0.01)\n\t\t\tcontinue;\n\t\tz += max(0.01, d.x*0.8);\n\t}\n\t\n\tif(z > DRAW_RANGE)\n\t\tz = 0.0;\n\t\n\treturn vec2(z, d.y);\n}\n\n\nvec3 Normal(vec3 p, float d)\n{\t\n\tvec3 n;\n\tvec2 dn = vec2(d, 0.0);\n\tn.x\t= Scene(p + dn.xyy).x - Scene(p - dn.xyy).x;\n\tn.y\t= Scene(p + dn.yxy).x - Scene(p - dn.yxy).x;\n\tn.z\t= Scene(p + dn.yyx).x - Scene(p - dn.yyx).x;\n\treturn normalize(n);\n}\n\n\nvec3 GetRayDir(vec2 inTC, vec2 inAspectRatio)\n{\n\treturn normalize(vec3((-0.5 + inTC)*0.8 * inAspectRatio, 1.0));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\t\n\t// Construct simple ray\n\tvec2 aspect\t\t= vec2(iResolution.x/iResolution.y, 1.0);\n\tvec3 rayOrigin\t= vec3(-8.0, -8.0, -0.0);\n\tvec3 rayDir\t\t= GetRayDir(uv, aspect);\n\t\n\t\n\t// Transform camera orientation\n\tmat3 ymat\t\t= RotY(PI2 * 0.55);\n\tmat3 xmat\t\t= RotX(PI2 * 0.5);\n\tmat3 zmat\t\t= RotZ(PI2 * 0.6);\n\tmat3 mat\t\t= zmat * ymat * xmat;\n\trayOrigin\t\t= mat * rayOrigin;\n\trayDir\t\t\t= mat * rayDir;\n\t\n\t// Light\n\tvec3 lightDir\t= rayOrigin;\n\t\n\t// Background color\n\tfloat bgTrans\t= pow(mix(uv.x,uv.y, 0.5), 0.5);\n\tvec3 color\t\t= vec3(0.17,0.17,0.2) * bgTrans;\n\t\n\tvec2 result\t\t= GetDepth(rayOrigin, rayDir);\n\tif(result.x > 0.0)\n\t{\n\t\tvec3 p\t\t\t\t= rayOrigin + rayDir * result.x;\n\t\tvec3 n\t\t\t\t= Normal(p, 0.01);\n\t\tfloat liFacing\t\t= max(dot(n, normalize(lightDir)), 0.0);\n\t\tfloat liUp\t\t\t= n.y;\n\t\t\n\t\tfloat expScale\t\t= 0.0;//pow(clamp(result.y-0.2, 0.0, 1.0), 4.0);\n\t\tfloat depthFog\t\t= pow(1.0 - result.x / DRAW_RANGE, 2.0);\n\t\t\n\t\t// Fake skin / sub surface scatting\n\t\tvec3 color1\t\t\t= vec3(0.8,0.8,0.8);\n\t\tvec3 color2\t\t\t= vec3(0.4,0.33,0.33);\n\t\tfloat highLight \t= (1.0 - liFacing)*(1.0 - liFacing);\n\t\tvec3 jellyColor\t\t= mix(color2, color1, highLight);\n\t\tvec3 colorFacing\t= mix(color, jellyColor * depthFog, pow(depthFog, 0.6));\n\t\tvec3 colorUp\t\t= vec3(liUp);\n\t\tcolor\t\t\t\t= colorFacing + colorUp*pow(depthFog, 2.0) * 0.8;\n\t}\n\t\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsB3RV","date":"1390872062","viewed":409,"name":"Protozoo","username":"ptkf","description":"via https://www.shadertoy.com/view/MdSGDW","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["singletailjellyfish","germs","flagellum"],"hasliked":0,"parentid":"","parentname":""}}