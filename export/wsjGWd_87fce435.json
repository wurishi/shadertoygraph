{"ver":"0.1","info":{"id":"wsjGWd","date":"1556133438","viewed":441,"name":"Implicit CAD model","username":"J_O","description":"Simple demo of a CAD model described by implicit geometry. This is not real world model, but it contains some elements that may be used in a part designed for additive manufacturing.  Rendering is based on IQs https://www.shadertoy.com/view/Xds3zN","likes":9,"published":1,"flags":16,"usePreview":0,"tags":["csg","implicitgeometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 Jan Orend\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Based on https://www.shadertoy.com/view/Xds3zN by IQ\n\n#define AA 1   // make this 2 or 3 for antialiasing\n\n\n//------------------------------------------------------------------\n\nfloat sdPlane(vec3 p) {\n    return p.y;\n}\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 d = abs(p) - b;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat sdEllipsoid(in vec3 p, in vec3 r) // approximated\n{\n    float k0 = length(p / r);\n    float k1 = length(p / (r * r));\n    return k0 * (k0 - 1.0) / k1;\n\n}\n\nfloat sdRoundBox(in vec3 p, in vec3 b, in float r) {\n    vec3 q = abs(p) - b;\n    return min(max(q.x, max(q.y, q.z)), 0.0) + length(max(q, 0.0)) - r;\n}\n\nfloat sdTorus(vec3 p, vec2 t) {\n    return length(vec2(length(p.xz) - t.x, p.y)) - t.y;\n}\n\nfloat sdHexPrism(vec3 p, vec2 h) {\n    vec3 q = abs(p);\n\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0 * min(dot(k.xy, p.xy), 0.0) * k.xy;\n    vec2 d = vec2(length(p.xy - vec2(clamp(p.x, -k.z * h.x, k.z * h.x), h.x)) * sign(p.y - h.x), p.z - h.y);\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h) - r;\n}\n\nfloat sdRoundCone(in vec3 p, in float r1, float r2, float h) {\n    vec2 q = vec2(length(p.xz), p.y);\n\n    float b = (r1 - r2) / h;\n    float a = sqrt(1.0 - b * b);\n    float k = dot(q, vec2(-b, a));\n\n    if(k < 0.0)\n        return length(q) - r1;\n    if(k > a * h)\n        return length(q - vec2(0.0, h)) - r2;\n\n    return dot(q, vec2(a, b)) - r1;\n}\n\nfloat dot2(in vec3 v) {\n    return dot(v, v);\n}\nfloat sdRoundCone(vec3 p, vec3 a, vec3 b, float r1, float r2) {\n    // sampling independent computations (only depend on shape)\n    vec3 ba = b - a;\n    float l2 = dot(ba, ba);\n    float rr = r1 - r2;\n    float a2 = l2 - rr * rr;\n    float il2 = 1.0 / l2;\n\n    // sampling dependant computations\n    vec3 pa = p - a;\n    float y = dot(pa, ba);\n    float z = y - l2;\n    float x2 = dot2(pa * l2 - ba * y);\n    float y2 = y * y * l2;\n    float z2 = z * z * l2;\n\n    // single square root!\n    float k = sign(rr) * rr * rr * x2;\n    if(sign(z) * a2 * z2 > k)\n        return sqrt(x2 + z2) * il2 - r2;\n    if(sign(y) * a2 * y2 < k)\n        return sqrt(x2 + y2) * il2 - r1;\n    return (sqrt(x2 * a2 * il2) + y * rr) * il2 - r1;\n}\n\nfloat sdEquilateralTriangle(in vec2 p) {\n    const float k = 1.73205;//sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0 / k;\n    if(p.x + k * p.y > 0.0)\n        p = vec2(p.x - k * p.y, -k * p.x - p.y) / 2.0;\n    p.x += 2.0 - 2.0 * clamp((p.x + 2.0) / 2.0, 0.0, 1.0);\n    return -length(p) * sign(p.y);\n}\n\nfloat sdTriPrism(vec3 p, vec2 h) {\n    vec3 q = abs(p);\n    float d1 = q.z - h.y;\n    h.x *= 0.866025;\n    float d2 = sdEquilateralTriangle(p.xy / h.x) * h.x;\n    return length(max(vec2(d1, d2), 0.0)) + min(max(d1, d2), 0.);\n}\n\n// vertical\nfloat sdCylinder(vec3 p, vec2 h) {\n    vec2 d = abs(vec2(length(p.xz), p.y)) - h;\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\n// arbitrary orientation\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 pa = p - a;\n    vec3 ba = b - a;\n    float baba = dot(ba, ba);\n    float paba = dot(pa, ba);\n\n    float x = length(pa * baba - ba * paba) - r * baba;\n    float y = abs(paba - baba * 0.5) - baba * 0.5;\n    float x2 = x * x;\n    float y2 = y * y * baba;\n    float d = (max(x, y) < 0.0) ? -min(x2, y2) : (((x > 0.0) ? x2 : 0.0) + ((y > 0.0) ? y2 : 0.0));\n    return sign(d) * sqrt(abs(d)) / baba;\n}\n\nfloat sdCone(in vec3 p, in vec3 c) {\n    vec2 q = vec2(length(p.xz), p.y);\n    float d1 = -q.y - c.z;\n    float d2 = max(dot(q, c.xy), q.y);\n    return length(max(vec2(d1, d2), 0.0)) + min(max(d1, d2), 0.);\n}\n\nfloat dot2(in vec2 v) {\n    return dot(v, v);\n}\nfloat sdCappedCone(in vec3 p, in float h, in float r1, in float r2) {\n    vec2 q = vec2(length(p.xz), p.y);\n\n    vec2 k1 = vec2(r2, h);\n    vec2 k2 = vec2(r2 - r1, 2.0 * h);\n    vec2 ca = vec2(q.x - min(q.x, (q.y < 0.0) ? r1 : r2), abs(q.y) - h);\n    vec2 cb = q - k1 + k2 * clamp(dot(k1 - q, k2) / dot2(k2), 0.0, 1.0);\n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    return s * sqrt(min(dot2(ca), dot2(cb)));\n}\n\nfloat sdOctahedron(vec3 p, float s) {\n    p = abs(p);\n\n    float m = p.x + p.y + p.z - s;\n\n    vec3 q;\n    if(3.0 * p.x < m)\n        q = p.xyz;\n    else if(3.0 * p.y < m)\n        q = p.yzx;\n    else if(3.0 * p.z < m)\n        q = p.zxy;\n    else\n        return m * 0.57735027;\n\n    float k = clamp(0.5 * (q.z - q.y + s), 0.0, s);\n    return length(vec3(q.x, q.y - s + k, q.z - k));\n}\n\nfloat length2(vec2 p) {\n    return sqrt(p.x * p.x + p.y * p.y);\n}\n\nfloat length6(vec2 p) {\n    p = p * p * p;\n    p = p * p;\n    return pow(p.x + p.y, 1.0 / 6.0);\n}\n\nfloat length8(vec2 p) {\n    p = p * p;\n    p = p * p;\n    p = p * p;\n    return pow(p.x + p.y, 1.0 / 8.0);\n}\n\nfloat sdTorus82(vec3 p, vec2 t) {\n    vec2 q = vec2(length2(p.xz) - t.x, p.y);\n    return length8(q) - t.y;\n}\n\nfloat sdTorus88(vec3 p, vec2 t) {\n    vec2 q = vec2(length8(p.xz) - t.x, p.y);\n    return length8(q) - t.y;\n}\n\nfloat sdCylinder6(vec3 p, vec2 h) {\n    return max(length6(p.xz) - h.x, abs(p.y) - h.y);\n}\n\n//------------------------------------------------------------------\n\n//Substraction\nfloat opS(float d1, float d2) {\n    return max(-d2, d1);\n}\n\n//Union\nvec2 opU(vec2 d1, vec2 d2) {\n    return (d1.x < d2.x) ? d1 : d2;\n}\n\nfloat opU(float d1, float d2) {\n    return min(d1, d2);\n}\n\n//Intersection\nfloat opI(float d1, float d2) {\n    return max(d1, d2);\n}\n\nvec3 opRep(vec3 p, vec3 c) {\n    return mod(p, c);\n}\n\nfloat opSmoothUnion(float d1, float d2, float k) {\n    float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);\n    return mix(d2, d1, h) - k * h * (1.0 - h);\n}\n\nfloat opSmoothSubtraction(float d1, float d2, float k) {\n    float h = clamp(0.5 - 0.5 * (d2 + d1) / k, 0.0, 1.0);\n    return mix(d2, -d1, h) + k * h * (1.0 - h);\n}\n\nfloat opSmoothIntersection(float d1, float d2, float k) {\n    float h = clamp(0.5 - 0.5 * (d2 - d1) / k, 0.0, 1.0);\n    return mix(d2, d1, h) + k * h * (1.0 - h);\n}\n\n//deformation\nvec4 opElongate(in vec3 p, in vec3 h) {\n    vec3 q = abs(p) - h;\n    return vec4(max(q, 0.0), min(max(q.x, max(q.y, q.z)), 0.0));\n}\n\n//transformations\nvec3 rotateY(in vec3 p, float t) {\n    float co = cos(t);\n    float si = sin(t);\n    p.xz = mat2(co, -si, si, co) * p.xz;\n    return p;\n}\n\nvec3 rotateX(in vec3 p, float t) {\n    float co = cos(t);\n    float si = sin(t);\n    p.yz = mat2(co, -si, si, co) * p.yz;\n    return p;\n}\nvec3 rotateZ(in vec3 p, float t) {\n    float co = cos(t);\n    float si = sin(t);\n    p.xy = mat2(co, -si, si, co) * p.xy;\n    return p;\n}\n\nvec3 translate(in vec3 p, in vec3 translation) {\n    return p - translation;\n}\n\nvec3 mirrorX(in vec3 pos) {\n    return pos * vec3(-1.0, 1.0, 1.0);\n}\n\n//------------------------------------------------------------------\n\n#define ZERO (min(iFrame,0))\n\n//Combined Geometries\n\nfloat cell(in vec3 pos, float size, float radius) {\n    float res = 1e10;\n    float k = (0.2 + 0.2 * sin(iTime * 0.12)) * size;\n    res = opSmoothUnion(res, sdCapsule(pos, vec3(size * 0.5, size * 0.5, 0.0), vec3(size * 0.5, size * 0.5, size), radius), k);\n    res = opSmoothUnion(res, sdCapsule(pos, vec3(0.0, size * 0.5, size * 0.5), vec3(size, size * 0.5, size * 0.5), radius), k);\n    res = opSmoothUnion(res, sdCapsule(pos, vec3(size * 0.5, 0.0, size * 0.5), vec3(size * 0.5, size, size * 0.5), radius), k);\n    return res;\n}\n\nfloat lattices(in vec3 pos, float size, float radius) {\n    return cell(opRep(pos, vec3(size)), size, radius);\n}\n\nfloat flange(in vec3 pos, in vec3 size) {\n    float res = sdBox(translate(pos, size * vec3(0.5, 0.0, 0.0)), size * vec3(0.5, 1.0, 1.0));\n    res = opU(res, sdCylinder(translate(pos, size * vec3(1.0, 0.0, 0.0)), vec2(size.x * 0.6, size.y)));\n    res = opS(res, sdCylinder(translate(pos, size * vec3(1.0, 0.0, 0.0)), vec2(size.x * 0.5 * 0.6, size.y * 1.1)));\n    return res;\n}\n\nfloat base(in vec3 pos, in vec3 size) {\n\n   //base plate\n    float radius = 0.15;\n\n    float sdf = sdRoundBox(pos, size, radius);\n    float flangePos = 0.70 + 0.3 * sin(iTime * 0.2);\n    float k = 0.3 + 0.1 * sin(iTime * 0.5);\n\n    sdf = opSmoothUnion(sdf, flange(translate(pos, size * vec3(1.0, 0.0, flangePos)), vec3(1.0, size.y * 0.5, 0.5)), k);\n    sdf = opSmoothUnion(sdf, flange(translate(mirrorX(pos), size * vec3(1.0, 0.0, flangePos)), vec3(1.0, size.y * 0.5, 0.5)), k);\n    sdf = opSmoothUnion(sdf, flange(translate(pos, size * vec3(1.0, 0.0, -flangePos)), vec3(1.0, size.y * 0.5, 0.5)), k);\n    sdf = opSmoothUnion(sdf, flange(translate(mirrorX(pos), size * vec3(1.0, 0.0, -flangePos)), vec3(1.0, size.y * 0.5, 0.5)), k);\n\n    return sdf;\n}\n\nfloat model(in vec3 pos) {\n    vec3 size = vec3(1.0, 0.2, 2.0);\n\n    float k = 0.5 + 0.3 * sin(iTime * 0.5);\n    float h = 1.0 + 0.5 * (1.0 + sin(iTime * 0.2));\n    float wRatio = 0.3;\n    float holeRatio = 0.8;\n\n    float sdf = base(pos, size);\n    sdf = opSmoothUnion(sdf, sdBox(translate(pos, vec3(0.0, h * 0.5, 0.0)), vec3(size.x * wRatio, h * 0.5, size.z)), k);\n\n    float inFill = sdBox(translate(pos, vec3(0.0, h * 0.5, 0.0)), holeRatio * vec3(size.x * 2.0, h * 0.5, size.z));\n    float interSectionInill = opI(sdf, inFill);\n    sdf = opS(sdf, inFill);\n\n    float cellSize = 0.05 + 0.25 * (1.0 + sin(iTime * 0.1));\n    float latticeRadius = 0.01 + 0.005 * cos(iTime * 0.2);\n    sdf = opSmoothUnion(sdf, opI(lattices(pos, cellSize, latticeRadius), interSectionInill), k * 0.1);\n\n    sdf = opSmoothUnion(sdf, flange(rotateZ(translate(pos, vec3(0.0, h, 0)), 3.142 * 0.5), vec3(1.0, size.y * 0.5, 0.5)), k);\n    return sdf;\n}\n\n//Scene\n\nvec2 map(in vec3 pos) {\n    float color = 2.7;\n    return vec2(model(pos ), color);\n}\n\n// https://iquilezles.org/articles/boxfunctions\nvec2 iBox(in vec3 ro, in vec3 rd, in vec3 rad) {\n    vec3 m = 1.0 / rd;\n    vec3 n = m * ro;\n    vec3 k = abs(m) * rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    return vec2(max(max(t1.x, t1.y), t1.z), min(min(t2.x, t2.y), t2.z));\n}\n\nconst float maxHei = 10.0;\n\nvec2 castRay(in vec3 ro, in vec3 rd) {\n    vec2 res = vec2(-1.0, -1.0);\n\n    float tmin = 1.0;\n    float tmax = 20.0;\n\n    // raytrace floor plane\n    float tp1 = (0.0 - ro.y) / rd.y;\n    if(tp1 > 0.0) {\n        tmax = min(tmax, tp1);\n        res = vec2(tp1, 0.0);\n    }\n\n    // raymarch primitives   \n    vec2 tb = iBox(ro - vec3(0.0, 0.0, 0.0), rd, vec3(1000.0, 1000.0, 1000.0));\n    if(tb.x < tb.y && tb.y > 0.0 && tb.x < tmax) {\n        tmin = max(tb.x, tmin);\n        tmax = min(tb.y, tmax);\n\n        float t = tmin;\n        for(int i = 0; i < 70 && t < tmax; i++) {\n            vec2 h = map(ro + rd * t);\n            if(abs(h.x) < (0.00001 * t)) {\n                res = vec2(t, h.y);\n                break;\n            }\n            t += h.x;\n        }\n    }\n\n    return res;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow(in vec3 ro, in vec3 rd, in float mint, in float tmax) {\n    // bounding volume\n    float tp = (maxHei - ro.y) / rd.y;\n    if(tp > 0.0)\n        tmax = min(tmax, tp);\n\n    float res = 1.0;\n    float t = mint;\n    for(int i = ZERO; i < 16; i++) {\n        float h = map(ro + rd * t).x;\n        res = min(res, 8.0 * h / t);\n        t += clamp(h, 0.02, 0.10);\n        if(res < 0.005 || t > tmax)\n            break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 pos) {\n#if 1\n    vec2 e = vec2(1.0, -1.0) * 0.5773 * 0.0005;\n    return normalize(e.xyy * map(pos + e.xyy).x +\n        e.yyx * map(pos + e.yyx).x +\n        e.yxy * map(pos + e.yxy).x +\n        e.xxx * map(pos + e.xxx).x);\n#else\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for(int i = ZERO; i < 4; i++) {\n        vec3 e = 0.5773 * (2.0 * vec3((((i + 3) >> 1) & 1), ((i >> 1) & 1), (i & 1)) - 1.0);\n        n += e * map(pos + 0.0005 * e).x;\n    }\n    return normalize(n);\n#endif    \n}\n\nfloat calcAO(in vec3 pos, in vec3 nor) {\n    float occ = 0.0;\n    float sca = 1.0;\n    for(int i = ZERO; i < 5; i++) {\n        float hr = 0.01 + 0.12 * float(i) / 4.0;\n        vec3 aopos = nor * hr + pos;\n        float dd = map(aopos).x;\n        occ += -(dd - hr) * sca;\n        sca *= 0.95;\n    }\n    return clamp(1.0 - 3.0 * occ, 0.0, 1.0) * (0.5 + 0.5 * nor.y);\n}\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox(in vec2 p) {\n    // filter kernel\n    vec2 w = fwidth(p) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0 * (abs(fract((p - 0.5 * w) * 0.5) - 0.5) - abs(fract((p + 0.5 * w) * 0.5) - 0.5)) / w;\n    // xor pattern\n    return 0.5 - 0.5 * i.x * i.y;\n}\n\nvec3 render(in vec3 ro, in vec3 rd) {\n    vec3 col = vec3(0.0, 0.0, 0.0) + rd.y * 0.8;\n    vec2 res = castRay(ro, rd);\n    float t = res.x;\n    float m = res.y;\n    if(m > -0.5) {\n        vec3 pos = ro + t * rd;\n        vec3 nor = (m < 1.5) ? vec3(0.0, 1.0, 0.0) : calcNormal(pos);\n        vec3 ref = reflect(rd, nor);\n\n        // material        \n        col = 0.35 + 0.45 * sin(vec3(0.05, 0.08, 0.10) * (m - 1.0));\n        if(m < 1.5) {\n\n            float f = checkersGradBox(1.0 * pos.xz);\n            col = f * vec3(0.005);\n        }\n\n        // lighting\n        float occ = calcAO(pos, nor);\n        vec3 lig = normalize(vec3(-0.4, 0.7, -0.6));\n        vec3 hal = normalize(lig - rd);\n        float amb = clamp(0.5 + 0.5 * nor.y, 0.0, 1.0);\n        float dif = clamp(dot(nor, lig), 0.0, 1.0);\n        float bac = clamp(dot(nor, normalize(vec3(-lig.x, 0.0, -lig.z))), 0.0, 1.0) * clamp(1.0 - pos.y, 0.0, 1.0);\n        float dom = smoothstep(-0.2, 0.2, ref.y);\n        float fre = pow(clamp(1.0 + dot(nor, rd), 0.0, 1.0), 2.0);\n\n        dif *= calcSoftshadow(pos, lig, 0.02, 2.5);\n        dom *= calcSoftshadow(pos, ref, 0.02, 2.5);\n\n        float spe = pow(clamp(dot(nor, hal), 0.0, 1.0), 16.0) *\n            dif *\n            (0.04 + 0.96 * pow(clamp(1.0 + dot(hal, rd), 0.0, 1.0), 5.0));\n\n        vec3 lin = vec3(0.0);\n        lin += 1.30 * dif * vec3(1.00, 0.80, 0.55);\n        lin += 0.30 * amb * vec3(0.40, 0.60, 1.00) * occ;\n        lin += 0.40 * dom * vec3(0.40, 0.60, 1.00) * occ;\n        lin += 0.50 * bac * vec3(0.25, 0.25, 0.25) * occ;\n        lin += 0.25 * fre * vec3(1.00, 1.00, 1.00) * occ;\n        col = col * lin;\n        col += 9.00 * spe * vec3(1.00, 0.90, 0.70);\n\n        col = mix(col, vec3(0.0, 0.0, 0.0), 1.0 - exp(-0.0002 * t * t * t));\n    }\n\n    return vec3(clamp(col, 0.0, 1.0));\n}\n\nmat3 setCamera(in vec3 ro, in vec3 ta, float cr) {\n    vec3 cw = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.0);\n    vec3 cu = normalize(cross(cw, cp));\n    vec3 cv = (cross(cu, cw));\n    return mat3(cu, cv, cw);\n}\n\nvec4 renderScene(in vec2 fragCoord, float splitratio) {\n    vec3 Resolution = iResolution * splitratio;\n\n    vec2 mo = iMouse.xy / iResolution.xy;\n    float time = 15.0 + iTime * 0.05;\n\n    if(iTimeDelta > 0.5) {\n        int skipStep = 5;\n        int offset = iFrame % skipStep;\n        if(((int(fragCoord.x) % skipStep) == offset) || ((int(fragCoord.y) % skipStep) == offset)) {\n            discard;\n        }\n    }\n\n    // camera\t\n    vec3 ro = vec3(4.6 * cos(0.1 * time + 6.0 * mo.x), 1.0 + 2.0 * mo.y, 0.5 + 4.6 * sin(0.1 * time + 6.0 * mo.x));\n    vec3 ta = vec3(-0.5, -0.4, 0.5);\n    // camera-to-world transformation\n    mat3 ca = setCamera(ro, ta, 0.0);\n\n    vec3 tot = vec3(0.0);\n#if AA>1\n    for(int m = ZERO; m < AA; m++) for(int n = ZERO; n < AA; n++) {\n        // pixel coordinates\n            vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n            vec2 p = (-Resolution.xy + 2.0 * (fragCoord + o)) / Resolution.y;\n#else    \n            vec2 p = (-Resolution.xy + 2.0 * fragCoord) / Resolution.y;\n#endif\n\n        // ray direction\n        \n            vec3 rd = ca * normalize(vec3(p.xy, 2.0));\n\n        // render\t\n            vec3 col = render(ro, rd);\n\n\t\t// gamma\n            col = pow(col, vec3(0.4545));\n\n            tot += col;\n#if AA>1\n        }\n    tot /= float(AA * AA);\n#endif\n\n    return vec4(tot, 1.0);\n}\n\nvec4 renderSDF(in vec2 fragCoord, float splitratio) {\n    float zoom = 5.0;\n    float zHeight = 0.5;\n\n    vec2 coordInFrame = fragCoord - splitratio * vec2(iResolution.x * splitratio, 0.0);\n\n    vec2 uv = coordInFrame / (iResolution.xy) - vec2(0.5, 0.5);\n    vec3 pos = vec3(uv.x * zoom, zHeight, uv.y * zoom);\n    float d = map(pos).x;\n\n    vec3 col = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n    col *= 1.0 - exp(-4.0 * abs(d));\n    col *= 0.8 + 0.2 * cos(500.0 * d);\n    col = mix(col, vec3(1.0), 1.0 - smoothstep(0.0, 0.005, abs(d)));\n\n    return vec4(col, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    float splitratio = 1.0;\n   \n    if(fragCoord.x < iResolution.x * splitratio) {\n        fragColor = renderScene(fragCoord, splitratio);\n    } else {\n        fragColor = renderSDF(fragCoord, splitratio);\n    }\n}","name":"Image","description":"","type":"image"}]}