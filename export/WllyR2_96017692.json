{"ver":"0.1","info":{"id":"WllyR2","date":"1592506334","viewed":373,"name":"Voronoi caustics","username":"4yk4a","description":"Caustics like effect with brute force Voronoi diagram","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["voronoi","caustics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// number of cells\nconst int N = 30;\n\nconst float sqrtN = sqrt(float(N)); // small speed up\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // more or less evenly spaced cell centers\n    vec2 p[N];\n    for (int i=0; i<N; i++) {\n        float fi = float(i);\n        p[i].x = fi/float(N);\n        p[i].y = mod(fi,sqrtN)/sqrtN;\n        \n        // move centers in circles\n        p[i]+=(0.2+0.1*cos(iTime*0.03))*vec2(sin(iTime*fi*0.05),cos(iTime*fi*0.07));\n    }\n    \n    // Voronoi-like processing, find squared distance to the nearest center\n    float r = 1.0;\n    for (int i=0; i<N; i++) {\n        vec2 distance = uv-p[i]; \n        r = min(r, dot(distance,distance));\n    }\n\n    // make it closer to white\n    r *= 10.0;\n    \n    // Output to screen\n    fragColor = vec4(r,r,r,1.0);\n}","name":"Image","description":"","type":"image"}]}