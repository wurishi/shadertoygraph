{"ver":"0.1","info":{"id":"3d3fRn","date":"1608668515","viewed":87,"name":"distortion_pt1_23","username":"edwardbraed","description":"algo distortion","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["distortion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define gray(rgb) (rgb.r * 0.299 + rgb.g * 0.587 + rgb.b * 0.114)\n#define m_p 3.14155\n#define norm(a) (a + 1.0) * 0.5\n\nvec2 calcAspect(vec2 iRes)\n{\n    vec2 aspect = vec2(float(iRes.x < iRes.y) * iRes.x / iRes.y,\n\t\t\t\t\t   float(iRes.y < iRes.x) * iRes.y / iRes.x);\n    aspect.x += float(aspect.x == 0.0);\n    aspect.y += float(aspect.y == 0.0);\n    return aspect;\n}\n\nfloat rand3(vec3 n) \n{ \n\treturn fract(sin(dot(n, vec3(12.9898, 4.1414, 17.9361))) * 43758.5453);\n}\n\nfloat calcCell(vec3 pos, vec3 ipos)\n{\n    float res = 0.0;\n    float md = 1.0; // min distance\n    for(float x = 0.1; x < 1.0; x++)\n    {   \n        float ptX = rand3(ipos.xyz + x * 0.23);\n        float ptY = rand3(ipos.yxz + x * 0.16);\n        float ptZ = rand3(ipos.zxy + x * 0.09);\n        \n        md = min(md, distance(pos, ipos + vec3(ptX, ptY, ptZ)));\n    }\n    return md;\n}\n\nfloat calcCells(vec3 pos)\n{\n    float res = 1.0;\n    \n    vec3 ipos = floor(pos);\n    \n    // front side (z=-1)\n    res = min(res, calcCell(pos, ipos + vec3(-1.0, -1.0, -1.0)));\n    res = min(res, calcCell(pos, ipos + vec3( 0.0, -1.0, -1.0)));\n    res = min(res, calcCell(pos, ipos + vec3( 1.0, -1.0, -1.0)));\n    \n    res = min(res, calcCell(pos, ipos + vec3(-1.0,  0.0, -1.0)));\n    res = min(res, calcCell(pos, ipos + vec3( 0.0,  0.0, -1.0)));\n    res = min(res, calcCell(pos, ipos + vec3( 1.0,  0.0, -1.0)));\n    \n    res = min(res, calcCell(pos, ipos + vec3(-1.0,  1.0, -1.0)));\n    res = min(res, calcCell(pos, ipos + vec3( 0.0,  1.0, -1.0)));\n    res = min(res, calcCell(pos, ipos + vec3( 1.0,  1.0, -1.0)));\n    \n    // center side (z=0)\n    res = min(res, calcCell(pos, ipos + vec3(-1.0, -1.0,  0.0)));\n    res = min(res, calcCell(pos, ipos + vec3( 0.0, -1.0,  0.0)));\n    res = min(res, calcCell(pos, ipos + vec3( 1.0, -1.0,  0.0)));\n    \n    res = min(res, calcCell(pos, ipos + vec3(-1.0,  0.0,  0.0)));\n    res = min(res, calcCell(pos, ipos + vec3( 0.0,  0.0,  0.0)));\n    res = min(res, calcCell(pos, ipos + vec3( 1.0,  0.0,  0.0)));\n    \n    res = min(res, calcCell(pos, ipos + vec3(-1.0,  1.0,  0.0)));\n    res = min(res, calcCell(pos, ipos + vec3( 0.0,  1.0,  0.0)));\n    res = min(res, calcCell(pos, ipos + vec3( 1.0,  1.0,  0.0)));\n    \n    // back side   (z=1)\n    res = min(res, calcCell(pos, ipos + vec3(-1.0, -1.0,  1.0)));\n    res = min(res, calcCell(pos, ipos + vec3( 0.0, -1.0,  1.0)));\n    res = min(res, calcCell(pos, ipos + vec3( 1.0, -1.0,  1.0)));\n    \n    res = min(res, calcCell(pos, ipos + vec3(-1.0,  0.0,  1.0)));\n    res = min(res, calcCell(pos, ipos + vec3( 0.0,  0.0,  1.0)));\n    res = min(res, calcCell(pos, ipos + vec3( 1.0,  0.0,  1.0)));\n    \n    res = min(res, calcCell(pos, ipos + vec3(-1.0,  1.0,  1.0)));\n    res = min(res, calcCell(pos, ipos + vec3( 0.0,  1.0,  1.0)));\n    res = min(res, calcCell(pos, ipos + vec3( 1.0,  1.0,  1.0)));\n    \n    return res;\n}\n\n//thanks: https://www.shadertoy.com/view/XsXGD4\nvec2 dist2(vec2 uv, vec2 f, float rad, float power)\n{\n\tvec2 vf = f - uv;\n\tfloat d = length(vf);\n\treturn uv + (power * step(d, rad) * vf);\n}\n\n\nfloat waves(vec2 p, vec2 s, float t)\n{\n    p *= s * m_p;\n    return norm(sin(sin(p.x - t) - p.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 aspect = calcAspect(iResolution.xy);\n    vec2 auv = uv * aspect;\n    vec2 am = iMouse.xy / iResolution.xy * aspect;\n    \n    vec3 nPos = vec3(vec2(uv * aspect * vec2(8.0)), iTime * 0.1) * 1.5;\n    nPos.xy += vec2(iTime * 0.2);\n    \n    float w = waves(auv, vec2(10.0, 20.0), iTime * 2.0) * 0.10;\n    float c = pow(calcCells(nPos), 4.5) * 0.9;\n    float g = c + w;\n\n    vec2 rpos = dist2(auv, auv + 0.1, 1.3, g * 0.3) * 2.0;\n    \n    vec3 col = texture(iChannel0, rpos + vec2(0.03 * iTime)).xyz * 0.7;\n    \n    col += (vec3(0.16, 0.29, 0.3) * 3.3 * g);\n    \n    col += vec3(0.16, 0.29, 0.3) * 0.82;\n\n    //col = vec3(g);\n    //col = vec3(rpos, 0.0);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}