{"ver":"0.1","info":{"id":"Ntlyzl","date":"1648553323","viewed":215,"name":"controlled golden rotation","username":"Carandiru","description":"fun 150 seconds long\nso why does it do what it does at the end?\n","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["goldenratio","goldenangle"],"hasliked":0,"parentid":"sllyDr","parentname":"Distribution Golden_angle"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// fun 150 seconds long\n// so why does it do what it does at the end?\n\n#define GOLDEN_ANGLE 2.3998276806\n#define ITERATIONS 360.\n\nfloat line(vec2 st, float width)\n{\n    return smoothstep(width, 0.0, abs(st.y - st.x));\n}\n\nfloat drawPoint(vec2 uv, vec2 p, float radius)\n{\n    float d = distance(uv, p);\n    float hd = 0.5f * fwidth(d);\n    return smoothstep(0.0f, hd, radius - d);\n}\n\nmat2 rotateMatrix(float rad)\n{\n    return mat2(cos(rad), sin(rad),\n                    -sin(rad), cos(rad));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv = uv * 2.0 - 1.0;\n       \n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 startPos = vec2(0.0);\n    float step = 0.0025;\n    float rad = 0.0;\n    float result = 0.0;\n    \n    for(float i = 0.0; i < ITERATIONS; i++)\n    {\n        float moveStep = float(i);\n\n        vec2 p = startPos + vec2(step * moveStep, 0.0);\n        rad = moveStep * (GOLDEN_ANGLE + pow(GOLDEN_ANGLE, iTime * 0.1f) * iTime * (1.0f/(1.0f + i)));\n        p = rotateMatrix(rad) * p;\n        \n        result += drawPoint(uv, p, 0.0085);\n    }\n    \n    vec3 color = vec3(result);\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}