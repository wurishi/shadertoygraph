{"ver":"0.1","info":{"id":"4dSyWm","date":"1492263834","viewed":183,"name":"GRAPROG - FINALS","username":"CarebearDrew","description":"private","likes":0,"published":1,"flags":64,"usePreview":0,"tags":["privte"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"lsSGWt","filepath":"https://soundcloud.com/marshmellomusic/keepitmello","previewfilepath":"https://soundcloud.com/marshmellomusic/keepitmello","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PATTERN 1\n\n#define WOBBLE false\n#define r iResolution.xy\nvec3 red = vec3(1.0,.0,.0);\nvec3 yellow = vec3(1.0,1.0,0.);\nvec3 blue = vec3(0.0,0.0,1.0);\nvec3 white = vec3(1.0,1.0,1.0);\nvec3 orange = vec3(1.0,0.7,0.0);\nvec3 green = vec3(0.0,1.0,0.2);\nvec3 cyan = vec3(0.0,1.0,1.0);\n\nvec3 black = vec3(.0,.0,.0);\nvec3 purple = vec3(0.5,0.0,1.0);\nvec3 brown = vec3(0.930,0.493,0.502);\nvec3 grey = vec3(0.8627,0.8627,0.8627);\nvec3 cement = vec3(0.5176,0.4509,0.3529);\nvec3 cemento = vec3(0.80390,0.7725,0.7333);\nvec3 water = vec3(0.2509,0.6431,0.8745);\n\nfloat Flower(vec2 uv,vec2 shapePos, float Petals){\n    shapePos = vec2(shapePos.x,shapePos.y);\n    float dist = distance(shapePos,uv)*2.;\n    uv -= shapePos;\n    \n    float angle = atan(uv.y,uv.x);\n    float radius = cos(Petals*angle);\n    return radius;\n    \n}\n\nfloat Circle(vec2 pos,float rad, vec2 uv){\t    \n    float value = step(distance(uv,vec2(0.4)),rad);\n    \n    if(distance(pos,uv) > rad)return 0.0;\n    else return 1.0;\n    return value;\n}\n\nfloat Rectangle (vec2 size,vec2 move, vec2 uv){\n\n  \tfloat value = step(move.y,uv.y) - step(move.y+size.y,uv.y);\n    value *= step(move.x,uv.x) - step(move.x+size.x,uv.x);\n    \n    return value;\n   \n}\n\nfloat random (in vec2 uv) {\n    return fract(sin(dot(uv.xy, vec2(12.9898,78.233)))*43758.5453123);\n}\n\nfloat random2 (in vec2 uv, in vec3 seed) {\n\treturn fract(sin(dot(uv.xy, vec2(seed.x,seed.y))) * seed.z);\n}\n\nfloat Polar(vec2 uv, vec2 pos, float speed){\n    vec2 shapePos = pos;\n    float dist = distance(pos, uv)*2.;\n    \n    \n   \tuv -= shapePos;\n    float angle = atan(uv.y, uv.x);\n    float rad = cos(3.*angle);\n    float value = 1.-abs(step(cos(100.*angle - iTime * speed) , cos(110.*dist)));\n    \n    return value; \n}\n\nvec2 nc (in vec2 uv) {\n\treturn (uv / r) * 2. - 1.;\n}\n\nfloat rand(vec2 uv){\n    //return fract(sin(dot(uv, vec2(12.9898,78.233)))*10000.*iTime);\n\t//return fract(sin(dot(uv, iMouse.xy))*10000.);\n\t//return (fract(sin(dot(uv, vec2(12., 70.)))*100000.));\n    return (fract(sin(dot(uv, vec2(12., 70.)))*43758.5453123));\n}\n\n// Value noise\nfloat noise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) + \n            (c - a)* u.y * (1.0 - u.x) + \n            (d - b) * u.x * u.y;\n}\n\n// Gradient noise\nvec2 hash( vec2 x ){\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat gnoise( in vec2 p ){\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nmat2 rotate2d(float angle){\n  return mat2(cos(angle), - sin(angle), sin(angle), cos(angle));   \n}\n\nmat2 scale2d(vec2 value){\n    return mat2(value.x,0,0,value.y);\n}\n// Simplex noise\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 uv) {\n    // Initial values\n    float value = 0.0;\n    float amplitud = .5;\n    float frequency = 0.;\n    \n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitud * noise(uv);\n        uv *= 2.;\n        amplitud *= .5;\n    }\n    return value;\n}\n\nfloat swirl(vec2 uv,float Time, float tails){\n\tfloat value;\n    float angle = atan(uv.y,uv.x) + Time;\n    float k = WOBBLE ? sin(Time)*2.0 : 1.0;\n    angle -= length(snoise(uv*2.)) * k;\n    \n    value = cos(tails*angle);\n    return value;\n}\n\n#if PATTERN == 1\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    uv.x*=ratio;\n    \n    \n    float t = iTime;\n\n    float value;\n    vec3 color = vec3(value);\n    \n    color += yellow*swirl(uv,t,8.);\n   \tcolor += red*swirl(uv,t,8.);\n    \n\tfragColor = vec4(color,1.0);\n}\n\n#elif PATTERN == 2\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float t = iTime;\n    float ratio = iResolution.x / iResolution.y;\n    uv.x *=ratio;\n    \n    float radius = Flower(uv, vec2(.5*ratio,.5),8.);\n    vec2 shapePos = vec2(.5*ratio,.29*ratio);\n    float dist = distance(shapePos,uv)*2.;\n    uv -= shapePos;\n    \n    float angle = atan(uv.y,uv.x);\n    \n    radius = cos(angle*74.)*sin(angle*40.)*sin(angle*4.)*sin(angle*10.)*sin(angle*10.);\n    \n   \tvec2 uv2 = nc(fragCoord.xy) * 10.0;\n\tvec2 ipos = abs(uv2);\n  \n    //radius -= radius*abs(sin(t));\n    radius += texture(iChannel0,vec2((snoise(uv*20.+t))+dist,0.1)).x+0.1;\n  \n    float value = .1-step(radius,dist);\n    \n\tvec3 color1 = vec3(uv.x, uv.y, abs(sin(t)));\n\tvec3 color2 = vec3(random2(ipos, vec3(12.843, 78.324, 252332.0 + t)));\n    vec3 color = mix(color1, color2, vec3(0.5, 0.5, 0.5));\n    \n    color += value*color;\n\n    \n\tfragColor = vec4(color,1.0); \n   \n}\n\n#elif PATTERN == 3\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    uv.x*=ratio;\n    \n    vec2 shapePos = vec2(.5*ratio, .5);\n    uv -= shapePos;\n    float t = iTime;\n    \n    vec3 value = cemento;\n\n    value = mix(value,cement,random(uv)*.01);\n    value = mix(value,black,random(uv)*.2);\n    \n    vec3 stains = vec3(fbm((uv*8.2)*1.25))*.1;\n    \n    value = mix(value, vec3(.35,.25,.11),(smoothstep(0.03,.11,stains) - smoothstep(.11,.15,stains))*.5);\n    \n       \n    fragColor = vec4(value,1.0); \n}\n\n#elif PATTERN == 4\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float t = iTime;\n   \tfloat value;\n    vec3 color = vec3(value);\n    \n  \tvalue = Rectangle(vec2(1.,1.),vec2(0.0,0.0),uv);\n\tcolor += value*water;\n    \n    vec3 stains = vec3(fbm((uv*8.2)*1.5))*.1;\n    \n    color = mix(color, vec3(.9,.9,.9),(smoothstep(0.03,.07,stains) - smoothstep(.11,.15,stains))*.9);\n    \n\tfragColor = vec4(color,1.0);\n}\n\n#elif PATTERN == 5\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\t \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    uv.x*=ratio;\n    \n    vec2 shapePos = vec2(.5*ratio, .5);\n    uv -= shapePos;\n    float t = iTime;\n    \n    float value;\n    vec3 color = vec3(value);\n    \n    color += red*swirl(uv,t,8.);\n   \tcolor += swirl(uv*ratio, t, 8.);\n\tfragColor = vec4(color,1.0);  \n}\n\n#elif PATTERN == 6\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float t = iTime;\n   \tfloat value;\n    vec3 color = vec3(value);\n    \n    value = Flower(uv,vec2(+snoise(uv*1.+t)),1.);\n    color += water*value;\n\n\tfragColor = vec4(color,1.0);\n}\n\n#elif PATTERN == 7\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float t = iTime;\n   \tfloat value;\n    vec3 color = vec3(value);\n    \n    value = Flower(uv,vec2(snoise(uv*5.+t)),1.);\n    color += red*value;\n\tvalue = Flower(uv,vec2(snoise(uv*5.+t)),1.);\n    color += yellow*value;\n\tfragColor = vec4(color,1.0);\n}\n\n#elif PATTERN == 8\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n   \n    uv.x *= ratio;\n    float t = iTime;\n   \tfloat value;\n    vec3 color = vec3(value);\n    \n    vec2 origin = vec2(0.5*ratio, 0.5);\n    \n    vec2 tile = floor(uv);\n    uv-=origin;\n    \n    uv *= rotate2d(iTime * 1.);\n    uv +=origin;\n\n   \tvalue = Flower(uv,vec2(0.5*ratio,0.5),noise(uv*1.+t));\n    color = value*cyan;\n\t\n    value = Flower(uv,vec2(0.5*ratio,0.5),snoise(uv*1.+t));\n    color += value * green;\n\t\n    value += Polar(uv,vec2(0.5* ratio,0.5),1.0);\n    color += value*red;\n\n    \n\tfragColor = vec4(color,1.0);\n  \t\n    \n\tfragColor = vec4(color,1.0);\n}\n#endif","name":"Image","description":"","type":"image"}]}