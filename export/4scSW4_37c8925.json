{"ver":"0.1","info":{"id":"4scSW4","date":"1459219508","viewed":3321,"name":"Glazed Orb","username":"vochsel","description":"Spinning orb of some kind of substance... Aimed at a smaller raymarching setup and specific process... ","likes":52,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","raymarch","paint","fresnel","glaze","gloss"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPS 0.01\n#define MAX_ITR 100\n#define MAX_DIS 10.0\n\n#define rgb(r, g, b) vec3(float(r)/255., float(g)/255., float(b)/255.)\n\n//Distance Functions\nfloat sd_sph(vec3 p, float r) { return length(p) - r; }\n\n//Distance Map\nfloat map(vec3 p)\n{\n    vec2 u = p.xy*0.2;\n    vec2 um = u*0.3;\n    um.x += iTime*0.1;\n    um.y += -iTime*0.025;\n    float h   = texture(iChannel0, um).x;\t\t//Non twisted height\n    um.x += (um.y)*2.0;\n    \n    float hlg = texture(iChannel0, um).x;\t\t//Large details\n    float hfn = texture(iChannel0, u).x;\t\t//Fine details\n   \n    float disp = hlg*0.4 + hfn*0.1*(1.0-hlg);\t//Accumulative displacement\n    \n    return sd_sph(p, 1.5) + disp;\n}\n\n//Lighting Utils\nfloat fresnel(float bias, float scale, float power, vec3 I, vec3 N)\n{\n    return bias + scale * pow(1.0 + dot(I, N), power);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float t = iTime;\n    vec3 col = vec3(1.-length(uv-vec2(0.5))*.5);\n    \n    //Marching Setup\n    vec2 d = 1.-2.*uv;\n    d.x *= iResolution.x / iResolution.y;\n \t   \n    float tdist = 0.;\n    float dist  = EPS;\n    \n    vec3 campos = vec3(0.0, 0.0, -2.9);\n    vec3 pos = campos;\n    vec3 raydir = vec3(d.x, -d.y, 1.0);\n    \n    //Raymarching\n    for(int i = 0; i < MAX_ITR; i++)\n    {\n        if(dist < EPS || dist > MAX_DIS)\n\t\t\tbreak;\n        dist = map(pos);\n        tdist += dist;\n        pos += dist * raydir;\n    }\n    //Shading\n    if(dist < EPS)\n    {\n     \tvec3  lig = normalize( vec3(0., 0.7, -2.) );\n    \tvec2 eps = vec2(0.0, EPS);\n        vec3 normal = normalize(vec3(\n            map(pos + eps.yxx) - map(pos - eps.yxx),\n            map(pos + eps.xyx) - map(pos - eps.xyx),\n            map(pos + eps.xxy) - map(pos - eps.xxy)\n       \t));\n        float diffuse = max(0.0, dot(lig, normal)) / 1.0;\n        float specular = pow(diffuse, 256.);   \n\n        vec3 I = normalize(pos - campos);\n        float R = fresnel(0.2, 1.4, 2.0, I, normal);\n        \n        vec3 r = texture(iChannel1, reflect(raydir, normal)).rgb;\n        //Good Colors: rgb(284, 111, 1)\n        col = vec3(diffuse * rgb(84, 118, 145) + specular*0.1 + r*0.1 + R*0.5);\n    }\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}