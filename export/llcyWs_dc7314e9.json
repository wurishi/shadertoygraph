{"ver":"0.1","info":{"id":"llcyWs","date":"1534622030","viewed":98,"name":"Endless XOR Pattern","username":"LolKiller","description":"https://habr.com/post/417861/\nhttps://www.reddit.com/r/math/comments/91c35w/if_you_take_the_xor_of_a_pixels_coordinates/\nhttps://www.shadertoy.com/view/4ldyW8\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["xor","pattern","magicofnumbers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsv2rgb(vec3 c) {\n  vec3 rgb = clamp(abs(mod(c.x * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nbool is_prime(int n) {\n  if ((n <= 1) || (n % 2 == 0 && n > 2)) return false;\n  for(int i = 3; i < int(floor(sqrt(float(n)))); i+= 2)\n    if (n % i == 0) return false;\n  return true;\n}\n\nbool is_tprime(int n) {\n  if (is_prime(n)) return is_prime(n + 2) || is_prime(n - 2);\n  return false;\n}\n\nbool is_divisible(int n, int d) {\n  return n % d == 0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n  bool useHSV = true; //use magic to HSV conversion\n    \n  int magic = \n    int(fragCoord.x + iResolution.y + iTime * 16.0 /*+ iMouse.x * 20.0*/)\n    ^\t// try &, ^, |\n    int(fragCoord.y + iTime * 16.0 /*+ iMouse.y * 20.0*/);\n   \n  fragColor = is_divisible(magic, 5) \n                ? useHSV \n                  ? vec4(hsv2rgb(vec3(sin(float(magic)), 1.0, cos(float(magic)))), 1.0) \n                  : vec4(1.0, 1.0, 1.0, 1.0)\n                : vec4(0.0, 0.0, 0.0, 0.0);\n}","name":"Image","description":"","type":"image"}]}