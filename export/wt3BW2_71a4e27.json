{"ver":"0.1","info":{"id":"wt3BW2","date":"1613450149","viewed":75,"name":"Genuary 2021 – 10 – TREE (A01)","username":"endymion","description":"Trying desperately to understand fractal math. \nProps to Passion (https://www.shadertoy.com/view/Xdy3RK) for the original fractal math. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","noise","fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265359\n\n/**\n * Noise\n * @src https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83#perlin-noise\n */\n \n // Noise: Random\nfloat rand(vec2 c){\n    return fract(sin(dot(c.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// Noise: Basic noise\nfloat noise(vec2 p, float freq){\n    float unit = iResolution.x / freq;\n    vec2 ij = floor(p / unit);\n    vec2 xy = .5 * (1. - cos(PI * mod(p, unit) / unit));\n    float a = rand((ij + vec2(0., 0.)));\n    float b = rand((ij + vec2(1., 0.)));\n    float c = rand((ij + vec2(0., 1.)));\n    float d = rand((ij + vec2(1., 1.)));\n    float x1 = mix(a,b,xy.x);\n    float x2 = mix(c,d,xy.x);\n    return mix(x1,x2,xy.y);\n}\n\n/**\n * Fractional Brownian Motion\n * @src https://thebookofshaders.com/13/\n */\nfloat fbm(in vec2 _st, in int octaves) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n    for (int i = 0; i < octaves; ++i) {\n        v += a * noise(_st, 2000. + abs(1000. * sin(iTime * 0.009)));\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\n/**\n * Fractal, aka. black magic\n * @src https://www.shadertoy.com/view/Xdy3RK\n * @author Passion, 2016\n */\n// 2D Rotation\nmat2 rot(float deg){    \n    return mat2(cos(deg),-sin(deg),\n                sin(deg), cos(deg));\n}\n    \n// The Fractal\nvec2 fractal(vec2 uv, float time, int iterations) {    \n    for(int i = 0; i<iterations; i++){\n        uv = abs(uv) / dot(uv, uv);\n        uv.x = abs(uv.x + cos(time * .6) * .5);\n        uv.x = abs(uv.x - .8);\n        uv = abs(rot(-time * .3) * uv);\n        uv.y = abs(uv.y - .5);\n        uv.y = abs(uv.y + .03 +sin(time) * .25);\n    }\n    uv = abs(uv) / float(iterations);\n    \n    return uv;\n}\n \n/**\n * HSB to RGB\n * All components are in the range [0…1], including hue.\n * @src https://stackoverflow.com/a/17897228\n */\nvec3 hsb2rgb(in vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n/**\n * Map range to new range\n */\nfloat map(float value, float min1, float max1, float min2, float max2) {\n    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\n/**\n * Simplex noise\n * @src https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83#simplex-noise\n */\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return map(130.0 * dot(m, g), -1., 1., 0., 1.);\n}\n\n/** \n * Get color\n */\nvec3 getColor(in vec2 point, in vec3 colorA, in vec3 colorB) {\n    float dist = point.x / (point.x + point.y);\n    return mix(colorA, colorB, dist);\n}\n\n/**\n * @main\n */\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Time\n    float k2 = 0.5; // getLPD8Value(LPD8_K2);\n    float time = iTime * (k2 + 0.05);\n    \n    // Center uv coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n   \n    // Rotation\n    float k3 = 0.55; // getLPD8Value(LPD8_K3);\n    uv *= rot(time * (.1 + .5 * k3));\n    \n    // Fractal\n    float k1 = 0.2; // getLPD8Value(LPD8_K1);\n    uv = fractal(uv, time, int(floor(1. + 10. * k1)));\n    \n    // Colors\n    float k5 = 0.3; //getLPD8Value(LPD8_K5);\n    float k6 = 0.75; //getLPD8Value(LPD8_K6);\n    float k7 = 0.6; //getLPD8Value(LPD8_K7);\n    float k8 = 0.6; //getLPD8Value(LPD8_K7);\n    \n    vec3 color = getColor(uv, vec3(k5, k7, uv.x), vec3(k6, k8, uv.y));\n    \n    // Noise\n    float pixelNoise = snoise(uv * 300.);\n    \n    fragColor = vec4(hsb2rgb(vec3(\n        color.x,\n        color.y,\n        color.z * 1.6 + pixelNoise * 0.1\n    )), 1.);\n}","name":"Image","description":"","type":"image"}]}