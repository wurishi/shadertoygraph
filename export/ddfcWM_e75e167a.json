{"ver":"0.1","info":{"id":"ddfcWM","date":"1686851552","viewed":60,"name":"Caleido","username":"samsim","description":"Caleido script ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","palette","material"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 palette(float t)\n{\n\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(1.568, 0.500,0.278);\n    vec3 c = vec3(2.388, 1.000, 1.000);\n    vec3 d = vec3(0.000, 0.333, 0.667);\n\n    \n    return a + b * cos(6.28318 * (c * t + d));\n\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.xy;\n\n    //Prevent the scaling \n    //uv.x *= iResolution.x / iResolution.y;\n    // Shift the origin into (0,0)\n    // Update the corner coordinates in order to have (1,1)\n    //uv = (uv -0.5) * 2.0;\n    \n    //in one step\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy )/iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    //iteration for creating multiple pattern\n    for (float i = 0.0; i < 6.0; i++){\n        //add space fration and obv center it like before\n     uv = fract(uv * (0.5 + i / 3.)) - 0.5 ;\n    \n    float d = length(uv) * sin(-length(uv0) + i);\n    \n    vec3 col = palette(length(uv0) + i * 0.2 + iTime * 0.4);\n    \n    d= sin(d * 8. + (iTime * i) / 6.)/8.;\n    d = abs(d);\n    //adding pow increase the contrast\n    d = pow(0.01/d, 1.2);\n    \n    finalColor +=  col * d;\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(finalColor,1);\n}","name":"Image","description":"","type":"image"}]}