{"ver":"0.1","info":{"id":"MftSRf","date":"1714319786","viewed":140,"name":"Cello: Alife","username":"JupiterDude","description":"An attempt at an artificial life simulator, similar to Conway's Game of Life, but a different premise which includes \"food\" (in green)\n\nControls:\n* Press <space> to reset.\n* LMB zoom & pan - Microscope mode!\n* See Buffer A for configuration values.","likes":8,"published":1,"flags":48,"usePreview":0,"tags":["artificiallife"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.y > 10.0 && fragCoord.y < (iResolution.y - 10.0) &&\n        fragCoord.x > 10.0 && fragCoord.x < (iResolution.x - 10.0) )\n    {\n    \n        if (iMouse.z > 0.0) {\n            float cx = iMouse.x;\n            float cy = iMouse.y;\n            fragCoord -= vec2(cx, cy);\n            fragCoord /= 4.0;\n            fragCoord += vec2(cx, cy);\n        }\n        // fragColor = texelFetch( iChannel0, ivec2(fragCoord), 0);\n        fragColor = texture( iChannel0, (fragCoord + vec2(.5, .5)) / iResolution.xy);\n        if (fragColor.r == 0.0) {\n            fragColor = vec4(\n                fragCoord.y / iResolution.y / 2.0,\n                fragColor.g,\n                fragCoord.x / iResolution.x / 2.0,\n                1.0);\n        }else{\n            // fragColor = vec4( 1.0 - fragColor.r, 1.0, 1.0, 1.0 );\n            fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n        }\n        \n    } else {\n        fragColor = vec4(1.0, 0.6, .25, 1.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define INIT_LIKELIHOOD 0.05      // Chance that an initial cell is alive; (0.05)\n#define BIRTH_MIN       2.5       // (2.5)\n                                  // 2.25 life may die\n                                  // 2.75 life may die\n#define BIRTH_MAX       6.0       // (6.0)\n#define FERTILE_GROUND  0.25      // Energy (green channel) required for a cell to come to life. (.25)\n#define ALGAE_GROWTH    0.000525     // Amount of energy to add to energy cells with each frame. (.001)\n                                  // Is this GPU-specific as not all GPUs have the same internal bit depth?\n#define LIFE_COST       1.25      // (1.25)\n#define BIRTH_IMPACT    0.08715   // (0.08715)\n\nfloat cell( in ivec2 p )\n{\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 ).r;\n}\n\nvec4 init( vec2 fragCoord ) {\n\n    float a = gold_noise(fragCoord, fract(iTime) * .8 + .2);\n    if (isnan(a)) a = 0.01;\n    float b = gold_noise(fragCoord, fract(iTime * 2.9) * 1.3);\n    if (isnan(b)) b = 0.01;\n    \n    vec4 fragColor = vec4(\n        0.0,\n        a,\n        b,\n        1.0);\n\n    if (gold_noise(fragCoord, fract(iTime+.2)) < INIT_LIKELIHOOD) {\n        fragColor.r = .5 + (.5*gold_noise(fragCoord, fract(iTime+.2)));\n    }\n    return fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // INITIALIZE?\n    if( iFrame==0 || keypressed(32) ) {\n        fragColor = init(fragCoord);\n        return;\n    }\n    \n    vec4 t = texelFetch( iChannel0, ivec2(fragCoord), 0);\n    \n    // Credit: idea from iq, https://www.shadertoy.com/view/XstGRf\n    ivec2 px = ivec2( fragCoord );\n\tfloat k = cell(px+ivec2(-1,-1)) + cell(px+ivec2(0,-1)) + cell(px+ivec2(1,-1))\n            + cell(px+ivec2(-1, 0)) + cell(px)*0.5         + cell(px+ivec2(1, 0))\n            + cell(px+ivec2(-1, 1)) + cell(px+ivec2(0, 1)) + cell(px+ivec2(1, 1));    \n    \n    // TODO: Clean this up...\n    // TODO: Add more weight to current cell (px)?\n    // TODO: Make B and/or A channel into consideration...\n    if (k > BIRTH_MIN &&\n        k < BIRTH_MAX &&\n        t.g > FERTILE_GROUND) {\n        \n        t.r = t.g * k * LIFE_COST; // Why does making LIFE_COST smaller increase life?\n        t.g = gold_noise(fragCoord, fract(iTime + .3)) * k * BIRTH_IMPACT;\n           \n    } else if (t.r > 1.0) {\n        // t.b = fract(t.r + ALGAE_GROWTH/10.0);\n        t.r = 0.0;\n    } else {\n        t.r = 0.0;\n    }\n\n    if (t.r == .0) {\n        t.r = 0.0;\n        t.g = fract(t.g + ALGAE_GROWTH);\n    }\n    fragColor = t;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define keypressed(ascii) ( texelFetch(iChannel3,ivec2(ascii,1),0).x > 0. )\n\n#define qrand(uv, n) (floor( gold_noise(uv, n) * 10.0) / 10.0)\n\n// gold_noise from dcerisano at  \n// Gold Noise ©2015 dcerisano@standard3d.com\n// - based on the Golden Ratio\n// - uniform normalized distribution\n// - fastest static noise generator function (also runs at low precision)\n// - use with indicated fractional seeding method\n// NOTE: Sometimes this random number generator creates obviously aliased / moire\n// patterns. Still, usually it works good. Need something better here.\n\nconst float PHI = 1.61803398874989484820459; // Φ = Golden Ratio \n\nfloat gold_noise(in vec2 xy, in float seed)\n{\n    // return fract(tan(distance(atan(xy*PHI), xy)*seed)*xy.x);\n    return fract(tan(distance(atan(xy*PHI) * seed, xy)*seed)*xy.x);\n}\n\nfloat gold_noise2( in vec2 xy, in float seed )\n{\n    return .5 + .5 * sin(cos(sin(xy.x * seed)*xy.y*seed)*xy.x*seed); // fract(fract(sin(xy.x * seed)*12138.5453123) + fract(cos(xy.y*seed)*13138.5453123) * seed);\n}\n\n\n\n","name":"Common","description":"","type":"common"}]}