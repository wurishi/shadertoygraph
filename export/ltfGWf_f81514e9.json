{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// by Nikos Papadopoulos, 4rknova / 2015\n// WTFPL\n\n// Emboss kernel\n//  3  0  0\n//  0 -1  0\n//  0  0 -1\n\nvec3 texsample(const int x, const int y, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n\tuv = (uv + vec2(x, y)) / iChannelResolution[0].xy;\n\treturn texture(iChannel0, uv).xyz;\n}\n\nvec3 texfilter(in vec2 fragCoord)\n{\n    vec3 sum = texsample(-1, -1, fragCoord) *  3.\n             + texsample( 0,  0, fragCoord) * -1.\n             + texsample( 1,  1, fragCoord) * -1.;\n    \n\treturn sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float u = fragCoord.x / iResolution.x;\n    float m = iMouse.x / iResolution.x;\n    \n    float l = smoothstep(0., 1. / iResolution.y, abs(m - u));\n    \n    vec2 fc = fragCoord.xy;\n    fc.y = iResolution.y - fragCoord.y;\n    \n    vec3 cf = texfilter(fc);\n    vec3 cl = texsample(0, 0, fc);\n    vec3 cr = (u < m ? cl : cf) * l;\n    \n    fragColor = vec4(cr, 1);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ltfGWf","date":"1425603794","viewed":1296,"name":"Filter: Emboss","username":"4rknova","description":"A simple emboss filter","likes":7,"published":3,"flags":0,"usePreview":1,"tags":["convolution"],"hasliked":0,"parentid":"","parentname":""}}