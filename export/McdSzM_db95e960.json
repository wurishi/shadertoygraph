{"ver":"0.1","info":{"id":"McdSzM","date":"1713748355","viewed":41,"name":"blue Ã¶yster cult","username":"matheusfs2","description":"test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hash3( vec2 p )\n{\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)), \n\t\t\t\t   dot(p,vec2(269.5,183.3)), \n\t\t\t\t   dot(p,vec2(419.2,371.9)) );\n\treturn fract(sin(q)*43758.5453);\n}\n\nfloat voronoise( in vec2 p, float u, float v )\n{\n\tfloat k = 1.0+63.0*pow(1.0-v,6.0);\n\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n\tvec2 a = vec2(0.0,0.0);\n    for( int y=-2; y<=2; y++ )\n    for( int x=-2; x<=2; x++ )\n    {\n        vec2  g = vec2( x, y );\n\t\tvec3  o = hash3( i + g )*vec3(u,u,1.0);\n\t\tvec2  d = g - f + o.xy;\n\t\tfloat w = pow( 1.0-smoothstep(0.0,1.414,length(d)), k );\n\t\ta += vec2(o.z*w,w);\n    }\n\t\n    return a.x/a.y;\n}\n\nfloat drawStars(vec2 uv)\n{\n    vec2 offset = uv;\n    // Linear\n    //offset -= vec2(fract(iTime*0.2)); \n    \n    // Senoidal\n    //offset -= vec2(sin(iTime*0.5));\n    \n    //offset = vec2(mod(offset.x, 0.2), mod(offset.y, 0.2));\n    offset = vec2(hash3(offset));\n    \n    float radius = smoothstep(0.01, 0.1, hash3(offset));\n    return mix(0.0, 1.0, offset.x > 0.0 && offset.x < radius && offset.y > 0.0 && offset.y < radius);\n}\n\nfloat drawMoon(vec2 uv)\n{\n    vec2 offset = uv;\n    offset.x += 0.2;\n    offset.y -= 0.2;\n    float outerCircle = float(length(offset) < 0.05);\n    float innerCircle = float(length(offset - 0.02) < 0.05);\n    \n    return outerCircle - innerCircle;\n}\n\nfloat drawGrid(vec2 uv)\n{\n    vec2 offset = uv;\n    offset.x -= sin(iTime*0.5); \n    offset.x *= smoothstep(-0.5, 0.2, offset.y);\n    offset = vec2(mod(offset.x, 0.2), mod(offset.y, 0.2));\n\n    float horizontal = mix(0.0, 1.0, offset.x > -0.5 && offset.x < 0.5 && offset.y > 0.0 && offset.y < 0.005);\n    float vertical   = mix(0.0, 1.0, offset.y > -0.5 && offset.y < 0.5 && offset.x > 0.0 && offset.x < 0.005);\n    return horizontal + vertical;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n\n    vec3 col = vec3(0.0);\n    \n    float stars = drawStars(uv);\n    float grid = drawGrid(uv);\n    float moon = drawMoon(uv);\n    float circle = smoothstep(0.44, 0.45, length(uv));\n    \n    col += vec3(stars);\n    //col += vec3(grid);\n    //col += vec3(moon);\n    //col += vec3(circle);\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}