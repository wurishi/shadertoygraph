{"ver":"0.1","info":{"id":"4fX3R2","date":"1703239532","viewed":131,"name":"2D Terrain With Shadows","username":"ramansinghdhiman","description":"A 2D terrain shader with basic shadow calculation, giving it 3D look. :)","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["3d","noise","terrain","shadows","new"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random(vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(53.25546, 95.64359))) * 95657.164138);\n}\n\nfloat vnoise(vec2 uv, float scale)\n{\n    uv *= scale;\n    vec2 lv = smoothstep(0.0, 1.0, fract(uv));\n    vec2 li = floor(uv);\n    float b = mix(random(li), random(li + vec2(1.0, 0.0)), lv.x);\n    float t = mix(random(li + vec2(0.0, 1.0)), random(li + vec2(1.0, 1.0)), lv.x);\n    return mix(b, t, lv.y);\n}\n\nfloat fbm(vec2 uv, float scale)\n{\n    float n = vnoise(uv, scale);\n    n += vnoise(uv, scale * 2.0) / 2.0;\n    n += vnoise(uv, scale * 4.0) / 4.0;\n    n += vnoise(uv, scale * 8.0) / 8.0;\n    n += vnoise(uv, scale * 16.0) / 16.0;\n    n += vnoise(uv, scale * 32.0) / 32.0;\n    n += vnoise(uv, scale * 64.0) / 64.0;\n    n += vnoise(uv, scale * 128.0) / 128.0;\n    n += vnoise(uv, scale * 256.0) / 256.0;\n    return n / 2.0;\n}\n\nvec3 getColor(float h)\n{\n    if(h > 0.6)\n        return vec3(0.9, 1.0, 0.9921);\n    else if(h > 0.45)\n        return vec3(0.1647, 0.4313, 0.1803);\n    else if(h > 0.3)\n        return vec3(0.5882, 0.4980, 0.2784);\n    else\n        return vec3(0.3015, 0.6545, 0.85);\n}\n\nfloat getHeight(vec2 uv)\n{\n    float n = fbm(uv, 5.0);\n    n = mix(-0.4, 1.0, n);\n    return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv += 0.5;\n    \n    float h = getHeight(uv);\n    \n    vec2 l = 0.5 + vec2(sin(iTime * 0.1), cos(iTime * 0.1));\n    \n    vec3 lightPos = vec3(l, 10.0);\n    \n    float lit = 1.0;\n    for(int i = 0; i < 20; i++)\n    {\n        vec3 uv3 = vec3(uv, clamp(h, 0.3, 1.0));\n        vec3 dir = normalize(lightPos - uv3);\n        vec3 ns = uv3 + (dir * float(i) * 0.025);\n        \n        if(uv3.z < getHeight(ns.xy))\n        {\n            lit = 0.75 + distance(uv3, ns) * 0.5;\n            lit = clamp(lit, 0.0, 1.0);\n            break;\n        }\n    }\n    \n    vec3 col = getColor(h) * lit;\n    col = mix(col * 0.5, col, 1.0 + (1.0 - distance(lightPos.xy, uv)));\n    \n    float w = (sin(iTime + h * 200.0) + 1.0) / 2.0;\n    \n    if(h < 0.3 && h > 0.0)\n        col = mix(col, col * 1.25, w * pow(smoothstep(0.0, 0.3, h), 32.0));\n        \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}