{"ver":"0.1","info":{"id":"mtdBz7","date":"1701106838","viewed":77,"name":"Cocentric Wave Rainbow","username":"sguzman","description":"A variant of the shader tutorial found at https://www.youtube.com/watch?v=f4s1h2YETNY","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["circlesinrainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// If the shader is being compiled for OpenGL ES\n#ifdef GL_ES \nprecision mediump float;\n#endif\n// Set the precision of floating point numbers to medium\n\n// Declare a 2D vector uniform for the mouse position\nuniform vec2 u_mouse;\n// Declare a 2D vector uniform for the screen resolution\nuniform vec2 u_resolution;\n// Declare a float uniform for the elapsed time\nuniform float u_time;\n\n// Palette function\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n// Main function, the entry point of the shader\nvoid mainImage( out vec4 FragColor, in vec2 FragCoord ) {\n    vec2 uv = FragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= u_resolution.x / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n\n    uv += 2.0;\n    uv = fract(uv);\n    uv -= 0.5;\n\n    float d = length(uv);\n\n    vec3 col = palette(length(uv0) + iTime);\n\n    d = sin(d * 8.0 + u_time) / 8.0;\n    d = abs(d);\n    d = 0.02 / d;\n\n    finalColor = col * d;\n\n    FragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}