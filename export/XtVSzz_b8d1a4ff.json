{"ver":"0.1","info":{"id":"XtVSzz","date":"1482593019","viewed":1290,"name":"Lens Distortion","username":"ptrgags","description":"Finally made a magnifying glass that distorts the image around the edges like real glass.","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid","distortion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float grid(vec2 uv, float grid_scale, float line_thickness) {\n    vec2 box_uv = fract(grid_scale * uv);\n    vec2 grid_vec = 1.0 - smoothstep(0.0, line_thickness, box_uv);\n    \n    return 1.0 - dot(grid_vec, vec2(1.0));\n}\n\n/*\n * Fitzgibbon's approximation of Barrel/Pincushion distortion. \n * Formula and explanation found at:\n * http://marcodiiga.github.io/radial-lens-undistortion-filtering\n * \n * r     - distance from the center of distortion\n * alpha - distortion parameter. negative for barrel distortion,\n * \t\t   positive for pincushion distortion.\n */\nvec2 lens_distortion(vec2 r, float alpha) {\n    return r * (1.0 - alpha * dot(r, r));\n    \n}\n\nvec2 zoom_point(vec2 uv, vec2 point, float zoom) {\n    //translate so the point is at the origin, scale, and translate back to the point\n    return (uv - point) / zoom + point;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Centered UV Coordinates accounting for aspect ratio.\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    //Same but for mouse coordinates\n    vec2 mouse_uv = iMouse.xy / iResolution.y;\n    \n    //Fix thumbnail\n    if (mouse_uv == vec2(0.0))\n        mouse_uv = vec2(0.5);\n    \n    //scale of the un-zoomed grid\n    float grid_size = 20.0;\n    \n    //Draw the main grid at regular size\n    fragColor = vec4(grid(uv, grid_size,  0.1));\n    \n    //Radius from the mouse that represents the size\n    //of the magnifying glass\n    float lens_radius = 0.3;\n    \n    //Outline of the magnifying glass\n    float mouse_dist = distance(uv, mouse_uv);\n    if (mouse_dist < lens_radius + 0.01)\n        fragColor = vec4(0.0);\n    \n    //zoom in and distort space around the mouse\n    if (mouse_dist < lens_radius) {\n        float zoom = 2.0;\n        \n        //Distort space inside the lens with pincushion distortion\n        vec2 distortion = lens_distortion(uv - mouse_uv, 2.5);\n        \n        //Zoom in, keeping the distortion effect\n        vec2 zoomed = zoom_point(uv + distortion, mouse_uv, 2.0 * zoom);\n        \n        //Draw the grid with zoom and distortion\n        float brightness = grid(zoomed, grid_size, 0.1);\n        fragColor = vec4(brightness);\n    }\n}","name":"Image","description":"","type":"image"}]}