{"ver":"0.1","info":{"id":"DsjfDG","date":"1690088509","viewed":18,"name":"程安絮2D基础教学_线段_宽度_向量_子坐标系","username":"Leslie","description":"采用向量算法实现的线段，比原来的方法简单了很多，果然向量才是最适合2D图形的。","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 感谢https://www.shadertoy.com/user/elenzil老哥的帮助\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 red=vec3(1.,0.,0.);\n    vec3 blue=vec3(0.,0.,1.);\n\n    float width=25.0;\n    vec2 ptStart=vec2(50.,50.);\n    vec2 ptEnd=vec2(600.,300.);\n\n    // 线段起点到终点的距离，也就是线段的长度\n    float lineLen=distance(ptStart,ptEnd);\n    // 与线段同方向的单位向量\n    vec2 uvLine=(ptEnd-ptStart)/lineLen;\n    // 与线段垂直的单位向量，uvLine顺时针旋转90度所得\n    vec2 uvRt=vec2(-uvLine.y,uvLine.x);\n    // 以ptStart为起点，fragCoord为终点的向量\n    vec2 vFrag=fragCoord-ptStart;\n\n    // fragCoord点到uvRt所在直线的垂直距离\n    float ptToLine=dot(vFrag,uvRt);\n    // fragCoord点到线段的垂直距离\n    float ptToRt=dot(vFrag,uvLine);\n\n    // 将布尔值转换为浮点值，如条件成立则kClr为1.；否则kClr为0.\n    float kClr=float(abs(ptToLine)<width/2. && ptToRt>=0. && ptToRt<=lineLen);\n    // 混合蓝、红两种颜色，如kClr为0.则完全取蓝色，如kClr为1.则完全取红色\n    vec3 clr=mix(blue,red,kClr);\n    // 用混合所得颜色填充所有像素\n    fragColor=vec4(clr,1.);\n}\n","name":"Image","description":"","type":"image"}]}