{"ver":"0.1","info":{"id":"tlKcRm","date":"1610733631","viewed":321,"name":"Cubic BÃ©zier Curve (1D)","username":"Tech_","description":"Heres I a little function you can use in your own project!","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["math","bezier","curve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float CubicBezier(float x, vec4 u)\n{\n    return u.x * pow(1.0 - x, 3.0)\n         + 3.0 * u.y * pow(1.0 - x, 2.0) * x\n         + 3. * u.z * pow(1.0 - x, 2.0) * pow(x, 2.0)\n         + u.w * pow(x, 3.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    uv.x -= 0.35;\n    uv.y *= 2.0;\n    \n    vec4 bezierU = vec4(0.0, 1.0, 0.0, 1.0);\n    \n    uv.y -= CubicBezier(clamp(uv.x, 0.0, 1.0), bezierU);\n\n    vec3 color;\n    color += smoothstep(0.03, 0.02, distance(uv.y, 0.5) * 2.0) * smoothstep(0.0, 0.1, 1. - distance(uv.x, 0.5) * 2.);\n\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}