{"ver":"0.1","info":{"id":"43scWl","date":"1726829908","viewed":44,"name":"smart perlin text hlsl","username":"oleg304","description":"using [url]https://shadertoy.com/view/3d3GzS[/url] on text\n.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","perlin","short","artefact","paradoxical","textperception"],"hasliked":0,"parentid":"tsdGWs","parentname":"smart perlin blend on text"},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// start HLSL->GLSL -----------------------------------------------------------------\n#define float2   vec2\n#define float3   vec3\n#define float4   vec4\n#define lerp     mix\n#define atan2    atan\n#define frac     fract\n#define fmod     mod\n#define ddx     dFdx\n#define ddy     dFdy\n#define float2x2 mat2   \n#define float3x3 mat3\n#define mul(a, b) a*b \n#define SamplerState float\n#define Texture2D float\n#define Texture2DSample(iChannel0, texSampl, uv) texture(iChannel0, uv)\n// float3 rg = Texture2DSample(tex, texSampl, uv);\n#define ddx dFdx\n#define ddy dFdy\n#define saturate(oo) clamp(oo, 0.0, 1.0)\n// static const int constArray[4] = { 1, 2, 3, 4 };\n\nint CAPS=0; float dist = 1e5;\n// end HLSL->GLSL -----------------------------------------------------------------\n\n\n//struct Func {\n\n#define T(u)(2.*texture(iChannel0,(u)/1e3).r -1.)\n//#define T(u) ( 2.*Texture2DSample(tex,texSample,(u)/1e3 ).r -1.)\n#define B(T) (1.-abs(T))\n#define keyToggle(a)(texelFetch(iChannel1,int2(a,2),0).x>0.)\n//#define keyToggle(a)(Texture2DSample(tex1,tex1Sample,int2(a,2),0).x>0.)\n#define low CAPS=32;\n#define caps CAPS=0;\n#define spc  U.x-=.45;\n#define C(c) spc dist=min(dist,ch(U,64+CAPS+c).a);\n//#define C(c) spc dist=min(dist,ch(U,c).a);\n\n\nfloat2x2 rot(float a){float ca=cos(a),sa=sin(a); return float2x2(ca,sa,-sa,ca);}\n\nfloat4 ch(float2 p, int c) {\n    if(p.x<.0||p.x>1.||p.y<0.||p.y>1.) return float4(0.,0.,0.,1e5);\n    // if(c<112){c+=32;}// ascii code\n\treturn \n    textureGrad(iChannel1,p/16.+frac(float2(c,15-c/16)/16.),ddx(p/16.),ddy(p/16.));\n    // UE!!! fix y position\n    // Texture2DSampleGrad(tex1,tex1Sampl,p16+frac(float2(c,14-c/16.+frac(c/16.))/16.),ddx(p16),ddy(p16));}\n    \n}\n\nfloat N(float2 u0, float2 u1, float a) { \n\tfloat2x2 M = rot(80.7);                        \n    float v=0., S=0., s=1.;    \n    for (float k=0.; k<10.; k++){ \n      float2 x0 =10.*mul(M,u0/s), x1=10.*mul(M,u1/s);\n      float t1=T(x1), t=lerp(1.,t1,a)/sqrt(a*a+(1.-a)*(1.-a)),b=B(t)-.5; \n \t  v +=(.5+b)*s; S+=s; M*=M; s/=2.; \n\t}\n    return v/S;\n}\n\nfloat res (float2 U, float time, float amp, Texture2D t0, SamplerState t0s, Texture2D t1, SamplerState t1s, float4 txt0, float4 txt1){   \n   // iTime = time, amplitude = amp; tex = t0; texSampl = t0s;; tex1 = t1; tex1Sampl = t1s;   \n    U = (U-float2(-.2,.2))*2.;\n    CAPS=0; dist = 1.; txt0*=100.;txt1*=100.;\n    int txt[8]=int[8](64,64,64,64,64,64,64,64);\n    // int txt[8]={64,64,64,64,64,64,64,64};\n    for(int i=0;i<4;i++){txt[i]=int(txt0[i]); txt[i+4]=int(txt1[i]);}\n    caps C(txt[0]) low C(txt[1])C(txt[2])C(txt[3])C(txt[4])C(txt[5])C(txt[6])C(txt[7]) // \"Noise\" // low 64 - space high 63 - space\n    float T=iTime,v,e=.1, mask=smoothstep(e,-e, dist-.5); // tunes text transition           \n    float4 O = float4(0.,0.,0.,0.);\n    v = N(U+float2(0.,.2*T), U-float2(0.,.2*T)+10., mask); // smart perlin  \n\n   return v; \n}\n\n//int CAPS; float iTime, dist, amplitude; Texture2D tex,tex1; SamplerState texSampl, tex1Sampl; }; \n//Func f; return f.res(tc, t0, amp, col, tex, texSampler, tex1, tex1Sampler, txt0, txt1);\n\n//---------------------------------------------------------------------------------\n//// HLSL -> ShaderToy\nvoid mainImage(out float4 fragColor, in float2 fragCoord) {    \n    float2 uv\t= fragCoord.xy / iResolution.y;\n    Texture2D tex;\n    float a = res(uv, iTime, .9, tex, 1., tex, 1.,vec4(.14,.15,.09,.19),vec4(.05,.04,.64,.64));\n    float amp = .9;\n    float v = smoothstep(.7-amp,.7+amp,a);    \n    //v = pow(v,1.6) ;  // antialiasing + to SRGB    \n    fragColor.rgb = 2.*vec3(.1,.7,.01)*v;\n    fragColor.a =a;\n}","name":"Image","description":"","type":"image"}]}