{"ver":"0.1","info":{"id":"432fW1","date":"1729545444","viewed":39,"name":"raymarching to infinity","username":"TheSwaGiraffe","description":"Idk what I did to my colors but I think this looks cool","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    this is a great video on raymarching go check it out\n    https://www.youtube.com/watch?v=khblXafu7iA&t=122s\n*/\nvec3 camPos = vec3(0., 5., -2.5);\nfloat focalLength = 1.;\nfloat smin(float a, float b, float k)\n{\n    float h = max(k-abs(a-b), 0.)/k;\n    return min(a, b) - h*h*h*k*(1./6.);\n}\n\nfloat smax( float a, float b, float k ) {\n    float h = max( k-abs(a-b), 0.0 )/k;\n\treturn max( a, b ) + h*h*k*(1./4.);\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.)) + min(max(q.x,max(q.y,q.z)),0.);\n}\nfloat sceneSDF(vec3 p)\n{\n    vec3 q = p;\n    q.x -= iTime;\n    q.xyz = mod(q.xyz - 2., 4.) - 2.;\n    float sphere = length(q) -.75;\n    q = p;\n    q.y -= iTime *.25;\n    q.xz = mod(q.xz - 2., 4.) -2.;\n    q.y = mod(q.y - 4., 8.) -4.;\n    float box = sdBox(q,vec3(.75));\n    float ground = p.y + .75;\n    return smin(smin(box, sphere, 1.5), ground, .2);\n}\n\nfloat march(vec3 ro, vec3 rd)\n{\n    vec3 p = ro + rd;\n    return sceneSDF(p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)/ iResolution.y;\n    vec3 rd = normalize(vec3(uv, focalLength));\n    float totalDist = 0.;\n    vec3 ro = camPos;\n    ro.y += sin(iTime/2.5)*2.5;\n    //march\n    for(int i = 0; i < 80; i++){\n        float dist = march(ro, rd * totalDist);\n        totalDist += dist;\n        if(dist > 100. || dist < .01){break;}\n    }\n    //take distance and turn it into a grayscale color\n    vec3 col = vec3(pow(totalDist, .25) -1.5)/1.5;\n    //add weird colors to make it look less bland\n    col *= vec3(.9,.9,.9) + vec3(uv * .1, sin(iTime/2.) * .1);\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}