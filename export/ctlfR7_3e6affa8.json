{"ver":"0.1","info":{"id":"ctlfR7","date":"1693108643","viewed":32,"name":"Sketch #8: Value Noise Slime","username":"MOONtyzoo","description":"This is mainly value noise practice. The values at each corner interpolate between new random positions every second to create the movement.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sketch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random(float x)\n{\n    return fract(439029.0*sin(x));\n}\n\nfloat random(vec2 uv)\n{\n    return fract(439029.0*sin(dot(uv, vec2(85.3876, 9.38532))));\n}\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nfloat smoothmix(float a, float b, float x)\n{\n    return (1.0-smoothstep(0.0, 1.0, x))*a + smoothstep(0.0, 1.0, x)*b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    /*\n        Control variables\n    */\n    float sampleNum = 30.0;\n    \n    /*\n        Create sample points\n        \n        At each point there is a random value (or \"height\") that interpolates\n        from one value to the next after every second.\n        \n        Quadrants 1, 2, 3, 4 correspond to letters d, c, a, b\n    */\n    vec2 uv_i = floor(uv*sampleNum);\n    vec2 uv_f = fract(uv*sampleNum);\n    float time_i = floor(iTime);\n    float time_f = fract(iTime);\n    \n    float a1 = random(uv_i + 0.234*time_i);\n    float b1 = random(uv_i + vec2(1.0, 0.0) + 0.234*time_i);\n    float c1 = random(uv_i + vec2(0.0, 1.0) + 0.234*time_i);\n    float d1 = random(uv_i + vec2(1.0, 1.0) + 0.234*time_i);\n    \n    float a2 = random(uv_i + 0.234*(time_i + 1.0));\n    float b2 = random(uv_i + vec2(1.0, 0.0) + 0.234*(time_i + 1.0));\n    float c2 = random(uv_i + vec2(0.0, 1.0) + 0.234*(time_i + 1.0));\n    float d2 = random(uv_i + vec2(1.0, 1.0) + 0.234*(time_i + 1.0));\n    \n    float a = mix(a1, a2, time_f);\n    float b = mix(b1, b2, time_f);\n    float c = mix(c1, c2, time_f);\n    float d = mix(d1, d2, time_f);\n    \n    /*\n        Interpolate between the sample points across space\n        \n        smoothmix is like mix but uses smoothstep\n    */\n    float ab = smoothmix(a, b, uv_f.x);\n    float cd = smoothmix(c, d, uv_f.x);\n    float val = smoothmix(ab, cd, uv_f.y);\n    \n    /*\n        Coloring\n    */\n    vec3 HSV = vec3(max(val, 0.25), smoothstep(0.5, 0.45, val), 0.85*smoothstep(0.5, 0.45, val) + 0.15);\n    \n    fragColor = vec4(hsv2rgb(HSV), 1.0);\n}","name":"Image","description":"","type":"image"}]}