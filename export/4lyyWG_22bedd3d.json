{"ver":"0.1","info":{"id":"4lyyWG","date":"1537401389","viewed":1067,"name":"Sphere Project - Chameleon","username":"rlarp","description":"Sphere Project #1- An arrangement of spheres that change color according to the most previous background color. (like a chameleon). ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sphere","color","spheres","chameleon","hypnosis","changing","mindtwister"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a){\n    return mat2(cos(a), -sin(a),\n                sin(a), cos(a));\n}\n\nfloat sphere(vec3 p, float radius){\n    return length(p)-radius;\n}\n\nfloat map(vec3 p)\n{\n    float radius = 0.25;\n    vec3 q = fract(p) * 1.5 - 0.5;\n    \n    return sphere(q, radius);\n}\n\nfloat trace(vec3 origin, vec3 r) \n{\n  float t = 0.0;\n    for (int i = 0; i < 128; ++i) {\n        vec3 p = origin + r * t;\n        float d = map(p);\n        t += d * 0.5;\n        }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv = uv *2.-2.; \n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 color = vec3(sin(iTime), cos(iTime), 0.7);\n    \n   \tfloat FOV = 3.;\n   \tvec3 ray = normalize(vec3(uv, FOV));\n    \n    // Rotate Y towards Z\n    ray.yz *= rot(iTime*0.1);\n    ray.zx *= rot(iTime*0.1);\n    \n    vec3 origin = vec3(0.0, 0.0, iTime);\n    float t = trace(origin, ray);\n    \n    \n    float linearFog = 2.0 / (1.0 - t*0.2);\n    float expFog = 3. / (t*t*0.1);\n    \n    vec3 fc = vec3(expFog);\n    \n    fragColor = vec4(fc,0.5);\n    \n    fragColor = vec4((fc+color),3.0);\n    fragColor = vec4(cos(fc+color),sin(iTime));\n    \n\n}\n","name":"Image","description":"","type":"image"}]}