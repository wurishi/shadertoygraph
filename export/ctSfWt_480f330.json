{"ver":"0.1","info":{"id":"ctSfWt","date":"1694645656","viewed":267,"name":"Simple Cloud Shader","username":"yumcyawiz","description":"Render clouds using ray marching.","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["volume","raymarch","cloud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14;\n\n// https://www.shadertoy.com/view/XslGRr\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\n    x = p + f;\n    return textureLod(iChannel0,(x+0.5)/32.0,0.0).x*2.0-1.0;\n}\n\n// https://www.shadertoy.com/view/XslGRr\nfloat map( in vec3 p, int oct )\n{\n\tvec3 q = p - vec3(0.0,0.1,1.0)*iTime;\n    float g = 0.5+0.5*noise( q*0.3 );\n    \n\tfloat f;\n    f  = 0.50000*noise( q ); q = q*2.02;\n    f += 0.25000*noise( q ); q = q*2.23;\n    f += 0.12500*noise( q ); q = q*2.41;\n    f += 0.06250*noise( q ); q = q*2.62;\n    f += 0.03125*noise( q ); \n    \n    f = mix( f*0.1-1.5, f, g*g ) + 0.1;\n    return 2.5*f - 0.5 - p.y;\n}\n\n// scattering coefficient of cloud\nvec3 cloudScattering(vec3 p)\n{\n    return vec3(1e-1 * clamp(map(p, 5), 0.0, 1.0));\n}\n\nfloat phaseHG(float c, float g)\n{\n    return (1.0 - g * g) / (4.0 * PI * pow(1.0 + g * g - 2.0 * g * c, 1.5));\n}\n\nfloat phaseDraine(float c, float alpha, float g)\n{\n    return 1.0 / (4.0 * PI) * (1.0 - g * g) / pow(1.0 + g * g - 2.0 * g * c, 3.0 / 2.0) * (1.0 + alpha * c * c) / (1.0 + alpha * (1.0 + 2.0 * g * g) / 3.0);\n}\n\n// An Approximate Mie Scattering Function for Fog and Cloud Rendering\n// https://research.nvidia.com/labs/rtr/approximate-mie/publications/approximate-mie.pdf\nfloat phaseMie(float c)\n{\n    float d = 30.0;\n    float gHG = exp(-0.0990567 / (d - 1.67154));\n    float gD = exp(-2.20679 / (d + 3.91029) - 0.428934);\n    float alpha = exp(3.62489 - 8.29288 / (d + 5.52825));\n    float wD = exp(-0.599085 / (d - 0.641583) - 0.665888);\n    return (1.0 - wD) * phaseHG(c, gHG) + wD * phaseDraine(c, alpha, gD);\n}\n\nvec3 transmittance(vec3 org, vec3 dir)\n{    \n    vec3 tr = vec3(1.0);\n    vec3 p = org;\n    float s = 1.0;\n    for(int i = 0; i < 20; ++i)\n    {\n        p += s * dir;\n        if(p.y > 1.0) break;\n        \n        vec3 mu_e = 1.1 * cloudScattering(p);\n        tr *= exp(-s * mu_e);\n        \n        s *= 1.09;\n    }\n    \n    return tr;\n}\n\n// https://www.shadertoy.com/view/wl2SDt\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.43;\n    float d = 0.59;\n    float e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\nvec3 aces_tonemap(vec3 color){\t\n\tmat3 m1 = mat3(\n        0.59719, 0.07600, 0.02840,\n        0.35458, 0.90834, 0.13383,\n        0.04823, 0.01566, 0.83777\n\t);\n\tmat3 m2 = mat3(\n        1.60475, -0.10208, -0.00327,\n        -0.53108,  1.10813, -0.07276,\n        -0.07367, -0.00605,  1.07602\n\t);\n\tvec3 v = m1 * color;    \n\tvec3 a = v * (v + 0.0245786) - 0.000090537;\n\tvec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n\treturn pow(clamp(m2 * (a / b), 0.0, 1.0), vec3(1.0 / 2.2));\t\n}\n\n// https://www.shadertoy.com/view/MsVSWt\nvec3 getSky(vec3 v)\n{\n    float atmosphere = sqrt(clamp(1.0 - v.y, 0.0, 1.0));\n    vec3 skyColor = vec3(0.2,0.4,0.8);\n    \n    float scatter = 0.0;\n    scatter = 1.0 - clamp(scatter,0.8,1.0);\n    \n    vec3 scatterColor = mix(vec3(1.0),vec3(1.0,0.3,0.0) * 1.5,scatter);\n    return 1.0 * mix(skyColor,vec3(scatterColor),atmosphere / 1.3);\n}\n\n// https://www.shadertoy.com/view/MsVSWt\nvec3 getSun(vec3 v, vec3 sunDir)\n{\n\tfloat sun = max(pow(dot(v, sunDir), 128.0), 0.0);\n    sun = clamp(sun,0.0,1.0);\n    \n    float glow = sun;\n    glow = clamp(glow,0.0,1.0);\n    \n    sun = pow(sun,100.0);\n    sun *= 100.0;\n    sun = clamp(sun,0.0,1.0);\n    \n    glow = pow(glow,16.0) * 1.0;\n    glow = pow(glow, 2.0 * v.y);\n    glow = clamp(glow,0.0,1.0);\n    \n    sun *= pow(dot(v.y, v.y), 1.0 / 1.65);\n    \n    glow *= pow(dot(v.y, v.y), 1.0 / 2.0);\n    \n    sun += glow;\n    \n    vec3 sunColor = vec3(1.0,0.6,0.05) * sun;\n    \n    return 20.0 * vec3(sunColor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy / 2.0) / iResolution.y;\n    \n    vec3 camPos = vec3(0, 0, 0);\n    vec3 camForward = normalize(vec3(0, 0, -1));\n    vec3 camRight = normalize(cross(camForward, vec3(0, 1, 0)));\n    vec3 camUp = normalize(cross(camRight, camForward));\n    \n    // generate camera ray\n    vec3 org = camPos;\n    vec3 dir = normalize(uv.x * camRight + uv.y * camUp + camForward - org);\n    \n    float phi = 0.25 * PI * cos(0.4 * iTime) - 0.5 * PI;\n    float theta = 0.48 * PI;\n    vec3 sunDir = normalize(vec3(cos(phi) * sin(theta), cos(theta), sin(phi) * sin(theta)));\n    \n    // render\n    float phaseM = phaseMie(dot(dir, sunDir));\n    \n    vec3 color = vec3(0.0);\n    float s = 1.0;\n    vec3 p = org + dir;\n    vec3 tr = vec3(1.0);\n    for(int i = 0; i < 30; ++i)\n    {\n        p += s * dir;\n        if(p.y > 1.0) break;\n        \n        vec3 mu_s = cloudScattering(p);\n        vec3 mu_e = 1.1 * mu_s;\n        tr *= exp(-s * mu_e);\n        \n        // 1st-order in-scattering\n        color += tr * transmittance(p, sunDir) * phaseM * mu_s * s * (getSky(sunDir) + getSun(sunDir, sunDir));\n        \n        // ambient\n        vec3 lightDir = normalize(vec3(0, 1, -1));\n        color += tr * transmittance(p, lightDir) * mu_s * s * getSky(lightDir);\n        \n        s *= 1.09;\n    }\n    color += tr * (getSky(dir) + getSun(dir, sunDir));\n    \n    // post process\n    float exposure = 1.3;\n    color *= exposure;\n    color = ACESFilm(color);\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}