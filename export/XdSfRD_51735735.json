{"ver":"0.1","info":{"id":"XdSfRD","date":"1499742498","viewed":449,"name":"Procedural Thingy","username":"Ebanflo","description":"Just messing around, mouse enabled","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["procedural","2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define numVertices int(iMouse.y) + 16\n//#define otherVersion\n\nfloat sqDist(vec2 p1, vec2 p2){return dot(p1 - p2, p1 - p2);}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 begin;\n    vec2 end;\n    fragColor = vec4(0);\n    for(int n = 0; n < numVertices; n++){\n        vec2 p1a = texture(iChannel0, vec2(float(n) / iResolution.x, 0)).xy;\n        vec2 p1b = texture(iChannel1, vec2(float(n) / iResolution.x, 0)).xy;\n        vec2 p1 = mix(p1a, p1b, fract(iTime));\n\t\t\n        vec2 p2a = texture(iChannel0, vec2(float(n + 1) / iResolution.x, 0)).xy;\n        vec2 p2b = texture(iChannel1, vec2(float(n + 1) / iResolution.x, 0)).xy;\n        vec2 p2 = mix(p2a, p2b, fract(iTime));\n        #ifdef otherVersion\n    \tfloat d = sqDist(p1, uv) + sqDist(p2, uv) - sqDist(p1, p2);\n        #else \n        float d = distance(p1, uv) + distance(p2, uv) - distance(p1, p2);\n        #endif\n    \tif(d < .0001) fragColor = vec4(p1, p2);\n        \n        if(n == 0) begin = p1;\n        if(n == numVertices - 1) end = p2;\n    }\n    #ifdef otherVersion\n    float d = sqDist(begin, uv) + sqDist(end, uv) - sqDist(begin, end);\n    #else\n    float d = distance(begin, uv) + distance(end, uv) - distance(begin, end);\n    #endif\n   \tif(d < .0001) fragColor = vec4(begin, end);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 hash22(vec2 p)//Dave Hoskins - https://www.shadertoy.com/view/4djSRW\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    if(fragCoord.y < 2.0) fragColor.xy = hash22(fragCoord + floor(iTime));\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 hash22(vec2 p)//Dave Hoskins - https://www.shadertoy.com/view/4djSRW\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    if(fragCoord.y < 2.0) fragColor.xy = hash22(fragCoord + ceil(iTime));\n}","name":"Buf B","description":"","type":"buffer"}]}