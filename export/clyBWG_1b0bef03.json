{"ver":"0.1","info":{"id":"clyBWG","date":"1702410208","viewed":79,"name":"multiply rings","username":"nayk","description":"stars, colorful,ring,circle, glow","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["colorful","circle","ring","glow","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* originals https://www.shadertoy.com/view/csVcWV */\n#define speed 1.5\n#define sc .75\n#define offset .35\n#define blend .1\n\nmat2 rotate(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat smin(float a, float b, float k)\n{\n    float h = max(k-abs(a-b), 0.0)/k;\n    return min(a,b)-h*h*k*(1.0/4.0);\n}\n\nvec2 target(float stage, float ring)\n{\n    vec2 o = vec2(0.);\n    float p = 0.;\n   \n    if (stage <= 0.)\n    {\n        p = (mod(ring, 2.)*2.-1.)*offset;\n        o = vec2(0.,p);\n    }\n    else if (stage <= 1.)\n    {\n        p = (step(1.5,mod(ring,4.))*2.-1.)*offset;\n        o = vec2(p,p*.5);\n    }\n    else if(stage <= 2.)\n    {\n        p = (step(3.5,mod(ring,8.))*2.-1.)*offset;\n        o = vec2(-p, p*.5);\n    }\n    else if(stage <= 3.)\n    {\n        p = (step(1.5,mod(ring,4.))*2.-1.)*offset;\n        o = vec2(-p,-p*.5);\n    }\n    else if (stage <=4.)\n    {\n        p = (step(3.5,mod(ring,8.))*2.-1.)*offset;\n        o = vec2(p, -p*.5);\n    }\n    else if (stage <=5.)\n    {\n        p = (mod(ring,2.)*2.-1.)*offset;\n        o = vec2(0.,-p);\n    }\n\n    return o;\n}\n\nvoid motion(float stage, float prog, inout float scale, float ring, out float t, out vec2 p)\n{\n    float change = sc;\n\n    if(stage >= 3.)\n    {\n        change = 1./sc;\n    }\n   \n    p = target(stage,ring);\n    t = smoothstep(0.,1.,prog - stage);\n    scale = mix(scale, scale * change, t);\n    p = p * t;\n}\n\nvoid steps(float prog, float ring, out vec2 cur, out float val)\n{\n    float scale = .35;\n\n    cur = vec2(0.);\n    val = scale;\n    for(float i = 0.; i < 6.; i++ )\n    {\n        float t = 0.;\n        vec2 p = vec2(0.);\n        motion(i, prog, scale, ring, t ,p);\n        cur += p;\n        val = mix(val, scale, t);\n    }\n       \n}\n\n\n\n#define speed 1.5\n#define sc .75\n#define offset .35\n#define blend .1\n\nmat2 rotate2(float a)\n{\n    float s = -sin(a);\n    float c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat smin2(float a, float b, float k)\n{\n    float h = max(k-abs(a-b), 0.0)/k;\n    return min(a,b)-h*h*k*(1.0/4.0);\n}\n\nvec2 target2(float stage, float ring)\n{\n    vec2 o = vec2(0.);\n    float p = 0.;\n   \n    if (stage <= 0.)\n    {\n        p = (mod(ring, 2.)*2.-1.)*offset;\n        o = vec2(0.,p);\n    }\n    else if (stage <= 1.)\n    {\n        p = (step(1.5,mod(ring,4.))*2.-1.)*offset;\n        o = vec2(p*2.,p*.5);\n    }\n    else if(stage <= 2.)\n    {\n        p = (step(3.5,mod(ring,8.))*2.-1.)*offset;\n        o = vec2(p, -p*1.5);\n    }\n    else if(stage <= 3.)\n    {\n        p = (step(8.5,mod(ring,4.))*2.-1.)*offset;\n        o = vec2(p,p*.5);\n    }\n    else if (stage <=4.)\n    {\n        p = (step(1.5,mod(ring,8.))*2.-1.)*offset;\n        o = vec2(p, -p*.5);\n    }\n    else if (stage <=5.)\n    {\n        p = (mod(ring,2.)*2.-1.)*offset;\n        o = vec2(0.,-p);\n    }\n\n    return o;\n}\n\nvoid motion2(float stage, float prog, inout float scale, float ring, out float t, out vec2 p)\n{\n    float change = sc;\n\n    if(stage >= 3.)\n    {\n        change = 1./sc;\n    }\n   \n    p = target2(stage,ring);\n    t = smoothstep(0.,1.,prog - stage);\n    scale = mix(scale, scale * change, t);\n    p = p * t;\n}\n\nvoid steps2(float prog, float ring, out vec2 cur, out float val)\n{\n    float scale = .35;\n\n    cur = vec2(0.);\n    val = scale;\n    for(float i = 0.; i < 6.; i++ )\n    {\n        float t = 0.;\n        vec2 p = vec2(0.);\n        motion2(i, prog, scale, ring, t ,p);\n        cur += p;\n        val = mix(val, scale, t);\n    }\n       \n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor-= fragColor;\n    fragCoord = (fragCoord+fragCoord-iResolution.xy)/iResolution.y;\n\n    fragCoord = fragCoord*rotate(iTime*.25);\n    vec4 fragColor2 =  fragColor;\n     vec2 fragCoord2 =  fragCoord;\n     fragColor2 -= fragColor;\n    fragCoord2= (fragCoord+fragCoord-iResolution.xy)/iResolution.y;\n\n    fragCoord2 = fragCoord*-rotate2(iTime*1.25);\n   \n    float prog = mod(iTime * speed, 6.);\n    float c = 1.;\n   \n    for(float i = 0.; i < 8.; i++)\n    {\n        vec2 cur = vec2(0.);\n        float val = 0.;\n        steps(prog, i, cur, val);\n        val = length(fragCoord+cur)-val;\n        c = smin(c, val, blend);        \n    }\n\n    c = pow(0.01 / abs(c), 1.2);\n    vec3 col = c * (cos(vec3(0,1,2) + iTime)+1.2);\n   \n    fragColor = vec4(col,1.);\n    float prog2 = mod(iTime * speed, 6.);\n    float c2 = 1.;\n   \n    for(float i = 0.; i < 8.; i++)\n    {\n        vec2 cur2= vec2(0.);\n        float val = 0.;\n        steps(prog2, i, cur2, val);\n        val = length(fragCoord2+cur2)-val;\n        c2 = smin(c2, val, blend);        \n    }\n\n    c2 = pow(0.01 / abs(c2), 1.2);\n    vec3 col2 = c2 * (cos(vec3(0,1,2) + iTime)+1.2);\n   \n    fragColor = vec4(col+col2,1.);\n}\n","name":"Image","description":"","type":"image"}]}