{"ver":"0.1","info":{"id":"4Xfczl","date":"1726525094","viewed":44,"name":"Beware the rectangle","username":"Juliena","description":"You can jump and have the score","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["game"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"makeStr1f(printScore) _int(i) _end\n\nconst float font_size = 9.;\n\nfloat Circle(vec2 uv, vec2 pos, float r)\n{\n    return length(uv - pos) - r <= 0. ? 1. : 0.;\n}\n\nfloat Rect(vec2 uv, vec2 pos, float width, float height)\n{\n    return smoothstep(pos.x - width / 2., pos.x - width / 2. + .001, uv.x) *\n            smoothstep(pos.x + width / 2. + .001, pos.x + width / 2., uv.x) *\n            smoothstep(pos.y - height / 2., pos.y - height / 2. + .001, uv.y) *\n            smoothstep(pos.y + height / 2. + .001, pos.y + height / 2., uv.y);\n}\n\nfloat Score(vec2 uv, float score)\n{\n    uv += 0.5;\n    uv.x += 0.3;\n    uv *= font_size;        // Scale font with font_size\n    uv.y -= font_size - 1.;\n    return printScore(uv, score);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec2 circlePos = texelFetch(iChannel0, CircleAddress, 0).xy;\n\n    float circle = Circle(uv, circlePos, CircleRadius);\n    \n    vec4 rectData = texelFetch(iChannel0, RectAddress, 0);\n    vec2 rectPos = rectData.xy;\n    float scoreData = rectData.z;\n    \n    float rect = Rect(uv, rectPos, RectSize.x, RectSize.y);\n    \n    col += circle;\n    col += rect;\n    \n    float score = Score(uv, scoreData);\n    \n    col += score;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int KEY_LEFT  = 37;\nconst int KEY_RIGHT = 39;\nconst int SPACEBAR = 32;\n\nconst float horVelocity = .03;\nconst float minVerVelocity = .002;\nconst float maxVerVelocity = .03;\n\nconst float rectVelocity = .01;\nconst float maxRectVelocity = .1;\n\nconst float borderX = .75;\n\nconst float jumpMaxHeight = .3;\n\nbool checkData (vec2 pos, ivec2 address)\n{\n    return ivec2(pos) == address;\n}\n\nvec2 handleArrows()\n{\n    \n    vec2 left = texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).x * vec2(-1., 0.);\n    vec2 right = texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).x * vec2(1., 0.);\n    \n    return (left + right);\n}\n\nvec2 handleJumping(vec2 circleOffset, vec2 dir)\n{\n    if (circleOffset.y <= 0. + infCircleOffset.y)\n    {\n        float newJump = texelFetch(iChannel1, ivec2(SPACEBAR, 0), 0).x;\n        return vec2(0., 1.) * newJump;\n    }\n    if (circleOffset.y >= .3 + infCircleOffset.y)\n    {\n        return vec2(0., -1.);\n    }\n    return dir;\n}\n\nbool checkCollision(vec2 circleOffset, vec2 rectOffset)\n{   \n    vec2 dist = circleOffset - rectOffset;\n    if (abs(dist.y) <= CircleRadius + RectSize.y / 2. && abs(dist.x) <= CircleRadius + RectSize.x / 2.)\n        return true;\n    \n    vec2 distDir = dist / abs(dist);\n    \n    vec2 nearestCorner = rectOffset + distDir * RectSize / 2.;\n    return distance(nearestCorner, circleOffset) <= CircleRadius;\n}\n\nfloat countSpeed(float speed)\n{\n    return speed * 60. / iFrameRate;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (checkData(fragCoord, CircleAddress))\n    {\n        vec4 data = texelFetch(iChannel0, CircleAddress, 0);\n        vec2 circleOffset = data.xy;\n        if (iFrame == 0)\n            circleOffset = infCircleOffset;\n        float accel = texelFetch(iChannel0, RectAddress, 0).w;\n        circleOffset += handleArrows() * countSpeed(horVelocity + accel);\n        circleOffset.x = circleOffset.x <= -borderX ? -borderX : circleOffset.x >= borderX \n                ? borderX : circleOffset.x;\n        \n        vec2 dir = data.zw;\n        dir = handleJumping(circleOffset, dir);\n        circleOffset += dir * max(mix(maxVerVelocity, minVerVelocity, (circleOffset.y - infCircleOffset.y)/jumpMaxHeight), 0.);\n        \n        fragColor = vec4(circleOffset, dir);\n    }\n    else if (checkData(fragCoord, RectAddress))\n    {\n        vec4 data = texelFetch(iChannel0, RectAddress, 0);\n        vec2 rectOffset = data.xy;\n        if (iFrame == 0)\n            rectOffset = infRectOffset;\n        float score = data.z;\n        float accel = data.w;\n        rectOffset.y -= countSpeed(min(rectVelocity + accel, maxRectVelocity));\n        if (rectOffset.y <= -1. + infRectOffset.y)\n        {\n            rectOffset.y = 0. + infRectOffset.y;\n            rectOffset.x = mix(-.6, .6, fract(sin(iTime) * 43758.5453));\n            score ++;\n            accel += 0.001;\n        }\n        vec2 circleOffset = texelFetch(iChannel0, CircleAddress, 0).xy;\n        \n        if (checkCollision(circleOffset, rectOffset))\n        {\n          rectOffset.y = 0. + infRectOffset.y;\n          rectOffset.x = mix(-.5, .5, fract(sin(iTime) * 43758.5453));\n          score = 0.;\n          accel = 0.;\n        }\n        fragColor = vec4(rectOffset, score, accel);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const ivec2 CircleAddress = ivec2(0, 0);\nconst ivec2 RectAddress = ivec2(0, 1);\n\n\nconst float CircleRadius = 0.1;\nconst vec2 RectSize = vec2(.4, .1);\n\nconst vec2 infCircleOffset = vec2(.0, -.3);\nconst vec2 infRectOffset = vec2(.0, .4);\n\n/// SETTINGS ///\n\n// Set to the iChannel containing the alphabet texture\n#define FONT_TEXTURE iChannel1\n\n// Horizontal character spacing (default: 0.5)\n#define CHAR_SPACING 0.44\n\n\n/// STRING CREATION ///\n\n#define makeStr1f(func_name) float func_name(vec2 u, float i) { _print\n\n// Terminate a string\n#define _end    ); return d; }\n\n\n/// SPECIAL FUNCTIONS ///\n\n// Dynamic digit\n// i: [0-9]\n#define _dig(i) _ 48+int(i)\n\n/// CHARACTER DEFINITIONS ///\n\n// Digits (48-57)\n#define _0 _ 48\n#define _1 _ 49\n#define _2 _ 50\n#define _3 _ 51\n#define _4 _ 52\n#define _5 _ 53\n#define _6 _ 54\n#define _7 _ 55\n#define _8 _ 56\n#define _9 _ 57\n\n\n/// Internal functions ///\n\n// Start\n#define _print  float d = 0.; (u.x += CHAR_SPACING\n\n// Update\n#define _       ); u.x -= CHAR_SPACING; d += _char(FONT_TEXTURE, u,\n\n#define _int(x) ); d += _integer(FONT_TEXTURE, u, x); (0\n\n// Print character\nfloat _char(sampler2D s, vec2 u, int id) {\n    vec2 p = vec2(id%16, 15. - floor(float(id)/16.));\n         p = (u + p) / 16.;\n         u = step(abs(u-.5), vec2(.5));\n    return texture(s, p).r * u.x * u.y;\n}\n\nfloat _integer (sampler2D FONT_TEXTURE, inout vec2 u, float n) \n{\n    float d = 0., N = 1.;\n    \n    for (float x = n; x >= 10.; x /= 10.) \n        N++;\n        \n    for (float i = 0.; i < N; i++) {        \n        float magnitude = pow(10., N-i-1.);\n        float leftDigit = floor(n / magnitude);\n        n -= leftDigit * magnitude;\n        \n        (0 _dig (leftDigit) );\n    }\n    \n    return d;\n}","name":"Common","description":"","type":"common"}]}