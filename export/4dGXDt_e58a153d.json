{"ver":"0.1","info":{"id":"4dGXDt","date":"1467295840","viewed":100,"name":"centric light","username":"stanleyerror","description":"centric light","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["centriclight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int SAMPLE_NUM = 55;\n\nfloat rand( vec2 uv)\n{\n    return fract( sin(dot(uv.xy+fract(iTime), \n                                         vec2(12.9898, 78.233)))* 43758.5453 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float decay=0.96815;\n    float exposure=0.21;\n    float density=0.526;\n    float weight=0.58767;\n    float global_decay = 1.0;\n       \n\tvec4 color = texture(iChannel1, uv) * 0.305104;\n    //vec2 light_pos = 0.5 - vec2(sin(iTime*.7)*.3,-cos(iTime*.2)*.3);\n    vec2 light_pos = vec2(0.5, 0.0);\n    vec2 dir = (uv - light_pos) / float(SAMPLE_NUM) * 0.52;\n\n    //uv += dir * rand(uv);\n    \n    for (int i = 0; i < SAMPLE_NUM; ++i)\n    {\n        uv -= dir;\n\t\tvec4 sample = texture(iChannel1, uv) * global_decay * weight * 0.305104;\n\t\tcolor += sample;\n        global_decay *= decay;\n    }\n\n\tfragColor = color * exposure;\n    //fragColor = vec4(uv, 0, 1);\n    //fragColor = texture(iChannel1, fragCoord.xy / iResolution.xy); return;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// sphere's\nfloat map(vec3 p){\n    p=abs(mod(p,8.)-4.);\n    return max(max(p.x, p.y), p.z) - 1.;\n}\n// rotation\nmat2 rot(float deg){    \n    return mat2(cos(deg),-sin(deg),\n                sin(deg), cos(deg));\n        \n}\n// raymarch\nfloat trace(vec3 o, vec3 r, inout vec3 hitPos){\n    float t = 0.0;\n    for(int i = 0; i<20; i++){\n        vec3 p = o+r * t;\n        float d = map(p);\n        t += d*0.5;\n    }\n    return t;\n}\n// main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //screen coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    //init to avoid errors\n    fragColor = vec4(0.0);\n    //cam origin\n    vec3 o = vec3(0.0, 0.0,-9.0);\n    o.y += iTime*2.;\n    //o.xz*=rot(iTime*.2);\n    //o.yz*=rot(iTime*.575);\n    //ray\n    vec3 r = normalize(vec3(uv + vec2(0., 1.), 1.0));\n    //r.xy*=rot(iTime*.33); //.25\n    r.xz*=rot(-iTime*.5); //.15\n    //unused for now\n    vec3 hitPos = vec3(0.0);\n    //raymarch\n    float t = trace(o, r, hitPos);\n    \n    float fog = 1.0 / (1.0 + t * t * 0.075);\n    vec3 fc = vec3(fog);\n    float d = map(o+r*t);\n    \n    if(abs(d)<.5)\n        fragColor = vec4(fc,1.0);\n    else{\n        //vec2 light_source = vec2(-.7+sin(iTime*.7)*.3 , -1.);\n        //float lp = 0.5 - length((uv-light_source));\n        //fragColor = vec4(lp*2.5)*vec4(vec3(.7 + .3 * sin(iTime)),1.);      //vec4(.4,.8,.3,1.0);\n        fragColor = vec4(vec3(-.4*uv.y+.2),1.);      //vec4(.4,.8,.3,1.0);\n    }\n}","name":"Buf B","description":"","type":"buffer"}]}