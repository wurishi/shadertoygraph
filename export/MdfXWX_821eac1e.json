{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define PI2 6.28318530718\n#define RES 0.02\n#define trunc(a) float(int(a))\n\nfloat n2f(float note)\n{\n   return 55.0*pow(2.0,(note-3.0)/12.); \n}\n\nfloat note(float nr)\n{\n    if (nr<=15.)  return -1.;\n    if (nr<=16.)  return 31.;\n    if (nr<=17.)  return 56.;\n    \n    if (nr<=22.)  return 55.;\n    if (nr<=23.)  return -1.;\n    \n    if (nr<=24.)  return 58.;\n    if (nr<=25.)  return 42.;\n    if (nr<=30.)  return 43.;\n    \n    if (nr<=33.)  return -1.;\n    \n    if (nr<=34.5)  return 43.;\n    if (nr<=35.5)  return 39.;\n    if (nr<=37.0)  return 31.;\n    if (nr<=39.0)  return 34.;\n    if (nr<=39.5)  return 32.;\n    if (nr<=40.5)  return 31.;\n    if (nr<=41.0)  return -1.;\n    if (nr<=42.5)  return 31.;\n    if (nr<=43.0)  return 44.;\n    if (nr<=46.0)  return 43.;\n    \n    return -1.0;\n}\n\nvec2 getSample(float time, float tt, float FM)\n{\n    tt -= mod(tt,RES);\n\n    float note1 = note(tt);\n    float note2 = note(tt+0.5);\n    if (note1 <0.0)\n        return vec2(0.0,50.0);\n    \n    float stepper = smoothstep(0.2,0.4,mod(tt,0.5));\n    \n    float note = mix(note1,note2,stepper);\n    \n    float f = n2f(note);\n    float angle = PI2*f*time;\n    return vec2(sin(angle+FM*sin(angle*2.)),f);\n}\n\nvec3 theramin(float time, float tt)\n{\n    tt = mod(tt,48.0);\n    tt += 1.33;\n    float FM = 0.0;\n    if (tt>=32.)\n        FM = PI2/2.;\n        \n    float ssample;\n    float col = 0.0;\n    float ta = mod(tt-RES/2.0,RES)-RES/2.0;\n    float halfSin = RES/4.0;//4.0/frequency;\n    if (abs(ta)<halfSin)\n    {\n        float sample1 = getSample(time,tt-RES/2.0,FM).x;\n        float sample2 = getSample(time,tt+RES/2.0,FM).x;\n        ssample = mix(sample1,sample2,smoothstep(-halfSin,halfSin,ta));\n        if (sample1!=sample2)\n          col = 1.0;\n    }\n    else\n        ssample = getSample(time,tt,FM).x;\n    \n    return vec3( ssample,col,  getSample(time,tt,FM).y);\n}\n\nvec3 DoSound(float time)\n{\n    float tt = time *2.4;\n    return theramin(time,tt);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    \n    float freq = DoSound(iTime-0.0125).z;\n        \n    float timePos = iTime-mod(iTime,1./freq*1.0033)-0.0125+uv.x/45.0;\n    if (iMouse.z>0.0)\n      timePos = uv.x*0.01*iMouse.y/100.0+5.5+iMouse.x/250.0;\n    \n    vec3 snd = DoSound(timePos)*0.4;;\n    \n    vec3 color = 1.0-vec3(smoothstep(0.004,0.06,distance(vec2(uv.x,snd.x),uv))); \n    color.b = snd.y;\n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":"#define PI2 6.28318530718\n#define RES 0.02\n#define trunc(a) float(int(a))\n\nfloat n2f(float note)\n{\n   return 55.0*pow(2.0,(note-3.0)/12.); \n}\n\nvec2 bass(float time, float tt, float note)\n{\n    if (tt<0.0)\n      return vec2(0.0);\n\n    float freqTime = 6.2831*time*n2f(note);\n    \n    return vec2(( sin(     freqTime\n                      +sin(freqTime)*7.0*exp(-2.0*tt)\n                     )+\n                  sin(     freqTime*2.0\n                      +cos(freqTime*2.0)*1.0*sin(time*3.14)\n                      +sin(freqTime*8.0)*0.25*sin(1.0+time*3.14)\n                    )*exp(-2.0*tt)+\n                  cos(     freqTime*4.0\n                      +cos(freqTime*2.0)*3.0*sin(time*3.14+0.3)\n                    )*exp(-2.0*tt)\n                )\n                \n                *exp(-1.0*tt) );\n}\n\nvec2 duhduh(float time, float tt)\n{\n   float bn = 0.0;\n   tt = mod(tt,48.0);\n   if (tt>=16.0)\n      if (tt>=40.0)\n         bn -= 5.0;\n      else\n         if (mod(tt,8.0)>=4.0)\n            bn -= 5.0;\n       \n   tt = mod(tt,8.0);\n   if (tt <4.0)\n     tt = mod(tt,2.0);\n   else\n     tt = mod(tt,4.0);\n   return bass(time,tt-3.0,bn+3.)+\n          bass(time,tt-2.0,bn+3.)+\n          bass(time,tt-1.0,bn+0.)+\n          bass(time,tt-0.0,bn+0.);\n}\n\nvec2 duhduh2(float time, float tt)\n{\n   float bn = 0.0;\n   tt = mod(tt,48.0);\n   if (tt>=16.0)\n      if (tt>=40.0)\n         bn -= 5.0;\n      else\n         if (mod(tt,8.0)>=4.0)\n            bn -= 5.0;\n       \n   int ti = int(mod(tt,8.0)/2.0);\n   tt = mod(tt,2.0);\n   if (ti == 0)\n     return bass(time,tt-0.83,bn+12.0)+\n            bass(time,tt-0.50,bn+12.0)+\n            bass(time,tt-0.17,bn+12.0);\n    \n   if (ti == 3)\n     return bass(time,tt-0.66,bn+15.)+\n            bass(time,tt-0.0,bn+15.);\n    \n   return bass(time,tt-0.66,bn+12.)+\n          bass(time,tt-0.0,bn+12.);\n}\n\nfloat note(float nr)\n{\n    if (nr<=15.)  return -120.;\n    if (nr<=16.)  return 31.;\n    if (nr<=17.)  return 56.;\n    \n    if (nr<=22.)  return 55.;\n    if (nr<=23.)  return -120.;\n    \n    if (nr<=24.)  return 58.;\n    if (nr<=25.)  return 42.;\n    if (nr<=30.)  return 43.;\n    \n    if (nr<=33.)  return -120.;\n    \n    if (nr<=34.5)  return 43.;\n    if (nr<=35.5)  return 39.;\n    if (nr<=37.0)  return 31.;\n    if (nr<=39.0)  return 34.;\n    if (nr<=39.5)  return 32.;\n    if (nr<=40.5)  return 31.;\n    if (nr<=41.0)  return -120.;\n    if (nr<=42.5)  return 31.;\n    if (nr<=43.0)  return 44.;\n    if (nr<=46.0)  return 43.;\n    \n    return -120.0;\n}\n\nfloat getSample(float time, float tt, float FM)\n{\n    tt -= mod(tt,RES);\n\n    float note1 = note(tt);\n    float note2 = note(tt+0.5);\n    if (note1 <0.0)\n        return 0.0;\n    \n    float stepper = smoothstep(0.1,0.5,mod(tt,0.5));\n    \n    float note = mix(note1,note2,stepper);\n    \n    float angle = PI2*n2f(note)*time;\n    return sin(angle+FM*sin(angle*2.033));\n}\n\nvec2 theramin(float time, float tt)\n{\n    tt = mod(tt,48.0);\n    tt += 1.33;\n    float FM = 0.0;\n    if (tt>=32.)\n        FM = PI2/2.;\n        \n    float ssample;\n    float ta = mod(tt-RES/2.0,RES)-RES/2.0;\n    float halfSin = RES/4.0;//4.0/frequency;\n    if (abs(ta)<halfSin)\n    {\n        float sample1 = getSample(time,tt-RES/2.0,FM);\n        float sample2 = getSample(time,tt+RES/2.0,FM);\n        ssample = mix(sample1,sample2,smoothstep(-halfSin,halfSin,ta));\n    }\n    else\n        ssample = getSample(time,tt,FM);\n    \n    return vec2( ssample);\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    float tt = time *2.4;\n    \n    float d1 = clamp(duhduh(time,tt).x,-0.8,0.8)*1.3+\n               clamp(duhduh(time,tt-0.33).x,-0.5,0.5)*1.4+\n               clamp(duhduh(time,tt-0.66).x,-0.3,0.3)*2.0;\n    \n    float d2 = clamp(duhduh2(time,tt).x,-0.8,0.8)*.3+\n               clamp(duhduh2(time,tt-0.33).x,-0.8,0.8)*.2+\n               clamp(duhduh2(time,tt-0.66).x,-0.8,0.8)*.1;\n    \n    return 0.2*vec2(d1+0.5*d2,d2+0.5*d1)\n          +0.3*(\n            theramin(time,tt-0.75)*vec2(0.2,0.4)\n           +theramin(time,tt)*vec2(0.6,0.4)\n           +theramin(time,tt-0.506)*vec2(0.4,0.2)\n           +theramin(time,tt-1.00)*vec2(0.1,0.2));\n}","name":"Sound","description":"","type":"sound"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":true,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdfXWX","date":"1407767629","viewed":981,"name":"Who?","username":"Andre","description":"Trying to recreate a version of the 80's original. It's very difficult to do an accurate frequency sweep without pause in a stateless shader. The wave forms never match up in phase so i mixed them 50 times a second (blue area is mixed). Use mouse to find.","likes":23,"published":1,"flags":8,"usePreview":0,"tags":["sound","proceduralsound","theme","drwho"],"hasliked":0,"parentid":"","parentname":""}}