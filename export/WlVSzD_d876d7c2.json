{"ver":"0.1","info":{"id":"WlVSzD","date":"1582306008","viewed":130,"name":"Failed wave equation","username":"stduhpf","description":"A failed attempt at doing a wave simulation i decided to share because of the cool patterns.\nI got[url=https://www.shadertoy.com/view/wlKXRW] better results[/url] by using laplacian interpolation instead of derivating twice over two frames;","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["glitch","diffusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    float lin = texture(iChannel0,vec2(uv.x,.5)).r;\n    \n    \n    // Output to screen\n    fragColor = texture(iChannel0,uv).rrrr;\n    fragColor.r=max(fragColor.r,smoothstep(.02,.01,abs(uv.y-.5-lin*.2)));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 getGradient(vec2 p,int c){\n    vec2 dxh = vec2(5.5,0.);\n    float dfx = texture(iChannel0,(p+dxh)/iResolution.xy)[c]-texture(iChannel0,(p-dxh)/iResolution.xy)[c];\n    float ddx = dfx/dxh.x;\n    float dfy = texture(iChannel0,(p+dxh.yx)/iResolution.xy)[c]-texture(iChannel0,(p-dxh.yx)/iResolution.xy)[c];\n    float ddy = dfy/dxh.x;\n    \n    return vec2(ddx,ddy);\n}\n\n\nvec2 dsmoothstep(float edge0, float edge1, float t){\n\tt = clamp((t - edge0) / (edge1 - edge0), 0.0, 1.0);\n\treturn vec2(t*t*(3.0-2.0*t),6.0*t*(1.0-t));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float dt = 0.01;\n    vec4 tmp = texture(iChannel0,fragCoord/iResolution.xy);\n\tfloat u = tmp.x;    \n    float dudt = tmp.a;\n    \n    vec2 ddudx2 = vec2(getGradient(fragCoord,1).x,getGradient(fragCoord,2).y);\n    vec2 dudx = getGradient(fragCoord,0);\n    \n    u+=dudt*dt;\n    \n    dudt+=200.*dot(ddudx2,vec2(1.))*dt; //i should have done this before adding dudt to e\n    \n    if(iFrame<2){\n        vec2 c = fragCoord-iResolution.xy*.5;\n        float ph = length(c)*.1;\n        vec2 mask = dsmoothstep(200.,0.,length(c));\n     \tu=cos(ph)*mask.x;\n        dudt = (-sin(ph)*mask.x+cos(ph)*mask.y);\n    }\n    \n    fragColor = vec4(u,dudx,dudt);\n}","name":"Buffer A","description":"","type":"buffer"}]}