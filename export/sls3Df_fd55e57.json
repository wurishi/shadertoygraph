{"ver":"0.1","info":{"id":"sls3Df","date":"1623228694","viewed":163,"name":"dissolve_210607","username":"intrometa","description":"dissolve sample","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["dissolve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float unity_noise_randomValue (vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(12.9898, 78.233)))*43758.5453);\n}\n\nfloat unity_noise_interpolate (float a, float b, float t)\n{\n    return (1.0-t)*a + (t*b);\n}\n\nfloat unity_valueNoise (vec2 uv)\n{\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n    f = f * f * (3.0 - 2.0 * f);\n\n    uv = abs(fract(uv) - 0.5);\n    vec2 c0 = i + vec2(0.0, 0.0);\n    vec2 c1 = i + vec2(1.0, 0.0);\n    vec2 c2 = i + vec2(0.0, 1.0);\n    vec2 c3 = i + vec2(1.0, 1.0);\n    float r0 = unity_noise_randomValue(c0);\n    float r1 = unity_noise_randomValue(c1);\n    float r2 = unity_noise_randomValue(c2);\n    float r3 = unity_noise_randomValue(c3);\n\n    float bottomOfGrid = unity_noise_interpolate(r0, r1, f.x);\n    float topOfGrid = unity_noise_interpolate(r2, r3, f.x);\n    float t = unity_noise_interpolate(bottomOfGrid, topOfGrid, f.y);\n    return t;\n}\n\n// https://docs.unity3d.com/Packages/com.unity.shadergraph@10.4/manual/Simple-Noise-Node.html\nvoid Unity_SimpleNoise_float(vec2 UV, float Scale, out float Out)\n{\n    float t = 0.0;\n\n    float freq = pow(2.0, float(0));\n    float amp = pow(0.5, float(3-0));\n    t += unity_valueNoise(vec2(UV.x*Scale/freq, UV.y*Scale/freq))*amp;\n\n    freq = pow(2.0, float(1));\n    amp = pow(0.5, float(3-1));\n    t += unity_valueNoise(vec2(UV.x*Scale/freq, UV.y*Scale/freq))*amp;\n\n    freq = pow(2.0, float(2));\n    amp = pow(0.5, float(3-2));\n    t += unity_valueNoise(vec2(UV.x*Scale/freq, UV.y*Scale/freq))*amp;\n\n    Out = t;\n}\n\nvoid Unity_Remap_float(float In, vec2 InMinMax, vec2 OutMinMax, out float Out)\n{\n    Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);\n}\n\nvec3 rgb(float r, float g, float b) {\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // designed effect: start with a circle on grey background, and dissovle to whole black\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // params\n    float threshold = sin(iTime - 3.14 * 1.5); // offset by 3/2 PI\n    vec4 borderColor = vec4(1.0, 1.0, 0.0, 1.0);\n    \n    vec3 bgColor = vec3(0.0, 0.0, 0.0);\n    vec4 fgColor = vec4(rgb(210.0, 222.0, 228.0), 1.0);\n    // params - simple shape\n    vec2 uv_n = uv;\n    float ratio = iResolution.x / iResolution.y;\n    uv_n.x *= ratio;\n    fgColor = length(vec2(0.5 * ratio, 0.5) - uv_n) < 0.3 ? vec4(rgb(225.0, 95.0, 60.0), 1.0) : fgColor;\n    // params - simple shape end\n    \n    float noiseScale = 43.44;\n    // params end\n\n    float noise;\n    vec3 col = fgColor.rgb;\n    Unity_SimpleNoise_float(uv, noiseScale, noise); // generate noise\n    Unity_Remap_float(threshold, vec2(-1.0, 1.0), vec2(0.0, 1), threshold);\n    float alpha = step(noise, threshold); // alpha clip threshold\n    col += borderColor.rgb * step(threshold - noise, 0.05); // add border\n    fragColor = mix(vec4(bgColor, 1.0), vec4(col, 1.0), alpha); // blend\n}","name":"Image","description":"","type":"image"}]}