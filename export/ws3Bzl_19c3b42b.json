{"ver":"0.1","info":{"id":"ws3Bzl","date":"1605748622","viewed":617,"name":"Fractal Traps","username":"Kali","description":"A shader I made 7 years ago with the program \"Fragmentarium\" by Syntopia. ","likes":45,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//orbit traps from julia version of fractal formula z=(z+1/z+c)*-scale;\n\n#define zoom 5.\n#define offset vec2(0.3,0.2)\n\n#define iterations 27\n#define scale -.4\n#define julia vec2(2.2,0.75)\n\n#define orbittraps vec3(.8,.5,-.01)\n#define trapswidths vec3(.2,.2,.3)\n\n#define trap1color vec3(1.00,0.30,0.10)\n#define trap2color vec3(1.00,0.50,0.10)\n#define trap3color vec3(0.10,0.20,1.00)\n\n#define trapsbright vec3(1.,.8,.7)\n#define trapscontrast vec3(5.,10.,5.)\n\n#define trapsfreq vec3(5.,8.,20.)\n#define trapsamp vec3(.03,.03,.01)\n#define trapspeeds vec3(20.,20.,40.)\n\n#define saturation .6\n#define brightness .9\n#define contrast 1.35\n#define minbright .3\n\n#define antialias 3. \n\n\nvec2 rotate(vec2 p, float angle) {\nreturn p*mat2(cos(angle),sin(angle),-sin(angle),cos(angle));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    vec3 aacolor=vec3(0.);\n    vec2 uv=fragCoord / iResolution.xy - 0.5;\n    float aspect=iResolution.x/iResolution.y;\n    vec2 pos=uv;\n    pos.x*=aspect;\n    float t=iTime*.07;\n    float zoo=.005+pow(abs(sin(t*.5+1.4)),5.)*zoom;\n    pos=rotate(pos,t*1.2365);\n    pos+=offset;\n    pos*=zoo; \n    vec2 pixsize=1./iResolution.xy*zoo;\n    pixsize.x*=aspect;\n    float av=0.;\n    vec3 its=vec3(0.);\n    for (float aa=0.; aa<16.; aa++) {\n        vec3 otrap=vec3(1000.);\n        if (aa<antialias*antialias) {\n            vec2 aacoord=floor(vec2(aa/antialias,mod(aa,antialias)));\n            vec2 z=pos+aacoord*pixsize/antialias;\n            for (int i=0; i<iterations; i++) {\n                vec2 cz=vec2(z.x,-z.y);\n                z=z+cz/dot(z,z)+julia;\n                z=z*scale;\n                float l=length(z);\n                vec3 ot=abs(vec3(l)-orbittraps+\n                    (sin(pos.x*trapsfreq/zoo+t*trapspeeds)+\n                     sin(pos.y*trapsfreq/zoo+trapspeeds))*trapsamp);\n                if (ot.x<otrap.x) {\n                    otrap.x=ot.x;\n                    its.x=float(iterations-i);  \n                }\n                if (ot.y<otrap.y) {\n                    otrap.y=ot.y;\n                    its.y=float(iterations-i);  \n                }\n                if (ot.z<otrap.z) {\n                    otrap.z=ot.z;\n                    its.z=float(iterations-i);  \n                }\n            }\n        }\n        otrap=pow(max(vec3(0.),trapswidths-otrap)/trapswidths,trapscontrast);\n        its=its/float(iterations);\n        vec3 otcol1=otrap.x*pow(trap1color,3.5-vec3(its.x*3.))*max(minbright,its.x)*trapsbright.x;\n        vec3 otcol2=otrap.y*pow(trap2color,3.5-vec3(its.y*3.))*max(minbright,its.y)*trapsbright.y;\n        vec3 otcol3=otrap.z*pow(trap3color,3.5-vec3(its.z*3.))*max(minbright,its.z)*trapsbright.z;\n        aacolor+=(otcol1+otcol2+otcol3);\n    }\n    aacolor=aacolor/(antialias*antialias)+.15;\n    vec3 color=mix(vec3(length(aacolor)),aacolor,saturation)*brightness;\n    color=pow(color,vec3(contrast));        \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}