{"ver":"0.1","info":{"id":"WldGz2","date":"1576912752","viewed":447,"name":"PostProcessing-Sharpening","username":"lypion","description":"PostProcessing, Sharpening of image, Sharpen filter based Gaussian filter","likes":5,"published":1,"flags":0,"usePreview":1,"tags":["postprocessing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n---Base---\n\tThis one is based on the Gaussian Blur one:https://www.shadertoy.com/view/3ltGz2\n\n---Main Content---\n\t1. Postprocessing of image. Use sharpening filter to sharpen the image\n*/\n\n\n\nfloat CalGaussianFilterValue(float sigma, float param)\n{\n    return 0.3989f * exp(-param * param * 0.5f / (sigma * sigma)) / sigma;\n}\n\n/*\nThis is a sharpening filter function. We do this by subtracting a fraction\n\"alpha\" of a blurred image from the original. With a rescaling to avoid \nchanging the overall brightness, we have\nf(sigma, alpha, param) = (1 + alpha) * impluse - alpha * GaussianFilter(sigma, param);\nwhere the \"impluse\" is the discrete impluse function\n*/\nfloat CalSharpenFilterValue(float sigma, float alpha, float param)\n{\n    //when param is equal to 0.0, the impluse function value is 1, otherwise 0\n    float impluse = 0.0;\n    if(abs(param) < 0.00001)\n        impluse = 1.0;\n    float gaussianValue = CalGaussianFilterValue(sigma, param);\n    return (1.0 + alpha) * impluse - alpha * gaussianValue;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //the range we sample the filter\n    const int range = 4;\n    //you can change the value to change the level of sharpen\n    //so does the range variable\n    const float alpha = 3.0;\n    //the total number of sample points\n    const int samplePointCount = 2 * range + 1;\n    const float sigma = 4.0;\n    float kernel[samplePointCount];\n    for(int i = 0; i <= range; i++)\n    {\n        kernel[i] = kernel[samplePointCount - i - 1] = CalSharpenFilterValue(sigma, alpha, float(i - range));\n    }\n\n    //store the total value of the kernel array, for keeping the brightness of the image\n    float total = 0.0;\n    for(int i = 0; i < samplePointCount; i++)\n    {\n        total += kernel[i];\n    }\n\n    vec3 finalCol = vec3(0.0);\n    for(int h = -range; h <= range; h++)\n    {\n        for(int v = -range; v <= range; v++)\n        {\n            vec2 uv = (fragCoord + vec2(h, v)) / iResolution.xy;\n            finalCol += (kernel[v + range] * kernel[h + range] * texture(iChannel0, uv)).rgb;\n        }\n    }\n\n    fragColor = vec4(finalCol / (total * total), 1.0);\n}","name":"Image","description":"","type":"image"}]}