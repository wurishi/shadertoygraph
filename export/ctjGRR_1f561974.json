{"ver":"0.1","info":{"id":"ctjGRR","date":"1672873060","viewed":77,"name":"Genuary 2023 Day 1","username":"qw","description":"perfect loop\nGenuary 2023 , Day 1","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["perfectloop","genuary1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI (3.1415926535897932384626433832795028841971f)\n#define PI2 (2.f * PI)\n\nfloat line_segment(in vec2 p, in vec2 a, in vec2 b) {\n\tvec2 ba = b - a;\n\tvec2 pa = p - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n\treturn length(pa - h * ba);\n}\n\nfloat distDrawInfinite(in vec2 p, float offset1, float offset2)\n{\n    float timeVal = (iTime * 5.0f) / PI2;\n    float time1 = timeVal - offset1;\n    float time2 = timeVal - offset2;\n\n    // Circle 1\n    vec2 center1 = vec2(-0.25,0.0);\n    float circle1Size = 0.2f;\n    float circle1Time = (time1 * PI2 );\n    float circle1Time2 = (time2 * PI2 );\n    vec2 c1pos1 = center1 + vec2(cos(circle1Time) * circle1Size, sin(circle1Time) * circle1Size);\n    vec2 c1pos2 = center1 + vec2(cos(circle1Time2) * circle1Size, sin(circle1Time2) * circle1Size);\n  \n    float thickness = 0.02f;\n   \n    /////////////\n    // Circle 2\n    vec2 center2 = vec2(0.25,0.0);\n    float circle2Size = 0.2f;\n    float circle2Time = (time1 * PI2) - PI;\n    float circle2Time2 = (time2 * PI2) - PI;\n    \n    vec2 c2pos1 = center2 + vec2(cos(-circle2Time) * circle2Size, sin(-circle2Time) * circle2Size);\n    vec2 c2pos2 = center2 + vec2(cos(-circle2Time2) * circle2Size, sin(-circle2Time2) * circle2Size);\n   \n   \n    float sineTimeVal = sin( ((time1) * PI ) );\n    float sineTimeVal2 = sin( ((time2) * PI ) );\n    \n    float mixVal = smoothstep(-0.5f, 0.5f, sineTimeVal);\n    float mixVal2 = smoothstep(-0.5f, 0.5f, sineTimeVal2);\n    vec2 pos1 = mix(c1pos1, c2pos1, mixVal);\n    vec2 pos2 = mix(c1pos2, c2pos2, mixVal2);;\n    \n    return line_segment(p, pos1, pos2) - thickness;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 pos = (fragCoord - iResolution.xy * .5) / iResolution.y;\n\n    float d = 0.0f;\n    float offsetStartToEnd = 0.03f ;\n    float offsetBetweenSegments = 0.05f;\n    for(int i = 0; i < 20; i+=2)\n    {\n        float d1 = distDrawInfinite(pos, \n            float(i) * (offsetStartToEnd + offsetBetweenSegments),\n            ( float(i) * (offsetStartToEnd + offsetBetweenSegments) + offsetStartToEnd)  );\n        d = min(d,d1);\n    }\n    \n    //AA\n    float pixelWidth = 1.5/iResolution.y;\n    vec3 col = vec3(smoothstep(pixelWidth,0., abs(d) ));\n    \n    // edges\n    col *= step(pos.x,.5f) * step(-.5f,pos.x);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}