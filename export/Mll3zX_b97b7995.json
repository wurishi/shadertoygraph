{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"\n// ALL TAKEN FROM IQs AMAZING SITE / TUTORIALS / SHADERS:\n// https://iquilezles.org/www/index.htm\n// https://www.shadertoy.com/user/iq\n\n\nconst float MAX_TRACE_DISTANCE = 10.0;           // max trace distance\nconst float INTERSECTION_PRECISION = 0.01;        // precision of the intersection\nconst int NUM_OF_TRACE_STEPS = 80;\n\t\n\n//----\n// Camera Stuffs\n//----\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 0.3 + 10.0*mouseX;\n\tcamPos = vec3(3.5*sin(an),1.0,3.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n\n\n\n// checks to see which intersection is closer\n// and makes the y of the vec2 be the proper id\nvec2 opU( vec2 d1, vec2 d2 ){\n    \n\treturn (d1.x<d2.x) ? d1 : d2;\n    \n}\n\n//--------------------------------\n// Modelling \n//--------------------------------\nvec2 map( vec3 pos ){  \n    \n   \tvec2 res = vec2(length( pos ) - 1. , 0.0 );\n    \n   \treturn res;\n    \n}\n\n//--------------------------------\n// Modelling \n//--------------------------------\nvec2 map2( vec3 pos ){  \n    \n    vec3 offset =  vec3( (5. +sin( iTime ))/ 5. , 1. + .1 * sin( pos.x * 40.) , 1. );\n   \tvec2 res = vec2(length( pos * offset)  - .5 , 0.0 );\n    \n   \treturn res;\n    \n}\n\n\n\nvec2 calcIntersection( in vec3 ro, in vec3 rd ){\n\n    \n    float h =  INTERSECTION_PRECISION*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    float id = -1.;\n    \n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ){\n        \n        if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n\t   \tvec2 m = map( ro+rd*t );\n        h = m.x;\n        t += h;\n        id = m.y;\n        \n    }\n\n    if( t < MAX_TRACE_DISTANCE ) res = t;\n    if( t > MAX_TRACE_DISTANCE ) id =-1.0;\n    \n    return vec2( res , id );\n    \n}\n\n\nvec2 calcIntersection2( in vec3 ro, in vec3 rd ){\n\n    \n    float h =  INTERSECTION_PRECISION*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    float id = -1.;\n    \n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ){\n        \n        if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n\t   \tvec2 m = map2( ro+rd*t );\n        h = m.x;\n        t += h;\n        id = m.y;\n        \n    }\n\n    if( t < MAX_TRACE_DISTANCE ) res = t;\n    if( t > MAX_TRACE_DISTANCE ) id =-1.0;\n    \n    return vec2( res , id );\n    \n}\n\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t  \n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n    \n    vec2 res = calcIntersection( ro , rd  );\n    \n    \n    vec3 col = vec3( 0. , 0. , 0. ); \n  \n    vec3 light = vec3( 2. , 2. , 0. ); \n    // If we have hit something lets get real!\n    if( res.y > -.5 ){\n\t\t   \n        vec3 pos = ro + rd * res.x;\n        vec3 nor = calcNormal(pos );\n        vec3 lightDir = normalize(light - pos);\n\n        float lamb = max( 0., dot( nor , lightDir ) );\n\n        \n        float match = max( 0., dot( -nor , rd ) );\n\n   \n    \t  col = vec3(pow(1. - match , 4. ) ) * lamb * (nor * .5 + .5);\n        \n        vec3 refr = refract( rd , nor , 1. );\n\n\n        vec3 lightRefr = normalize(refract( lightDir , nor , 1. ));\n        \n        vec3 rf = normalize( refr );\n        \n       vec2 res2 = calcIntersection2( pos + rf*.01 , rf );\n       \n        if( res2.y > -.5 ){\n            \n            vec3 pos2 = pos + rf*.01 + rf * res2.x;\n        \t  vec3 nor2 = calcNormal(pos2 );\n\n            float lamb = max( 0., dot( nor2 , lightRefr ) );\n\n    \t\t\n            col += nor2 * .5 + .5;\n            \n       \t\t//col = vec3( 1. , 0. , 0. );\n        \t\n        }\n        \n        \n    }\n    // apply gamma correction\n    col = pow( col, vec3(0.4545) );\n\n    fragColor = vec4( col , 1. );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Mll3zX","date":"1424017100","viewed":282,"name":"SHADE A DAY ( 2 / 14 / 2015 )","username":"cabbibo","description":"Trying to think about transparency works with raytracing","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["transparency","raytrace"],"hasliked":0,"parentid":"","parentname":""}}