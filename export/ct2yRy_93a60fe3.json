{"ver":"0.1","info":{"id":"ct2yRy","date":"1691941429","viewed":54,"name":"Sketch #6: Truchet Wave","username":"MOONtyzoo","description":"Inspired by what I learned here: https://thebookofshaders.com/09/\n\nSine wave visualized by using a truchet tile pattern that morphs when near the amplitude.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sketch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nmat2 rotate2D(in float angle)\n{\n    return mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle));\n}\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy) / iResolution.y;\n    /*\n        Control variables\n    */\n    float tileSize = 0.05;\n    float waveSize = 7.0;\n    float waveSpeed = 2.0;\n    float wavePower = 2.0; // The power to which the wave is raised. Shortens length of compressions.\n    \n    /*\n        Create the wave used for tile animation\n    */\n    float tile = tileSize*floor(uv.x/tileSize); // sampled 1x1 tile count\n    float wave = 0.5*sin(waveSize*tile - waveSpeed*iTime) + 0.5;\n    wave = pow(wave, wavePower);\n    \n    /*\n        Create and index tiles like so\n        \n        3 || 2\n        ======\n        0 || 1\n        \n        and use index to rotate the tile\n    */\n    vec2 tileUv = fract(uv/tileSize);\n    float index = 3.0*floor(mod(uv.y/tileSize, 2.0));\n    index += -(2.0*step(1.0, index)-1.0)*floor(mod(uv.x/tileSize, 2.0));\n    float angle = -index*PI/2.0 - wave*PI/2.0;\n    tileUv = (tileUv - 0.5)*rotate2D(angle) + 0.5;\n    \n    /*\n        Coloring\n    */\n    vec3 HSV;\n    HSV[0] = index/5.0 + 2.0*wave/5.0;\n    HSV[1] = 0.5;\n    HSV[2] = smoothstep(0.0, 0.1, tileUv.y - tileUv.x);\n    HSV[2] *= 0.7*wave + 0.3;\n    fragColor = vec4(hsv2rgb(HSV), 1.0);\n}","name":"Image","description":"","type":"image"}]}