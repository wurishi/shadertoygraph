{"ver":"0.1","info":{"id":"XctGD8","date":"1711834902","viewed":64,"name":"Wasisdas","username":"FujiAple","description":"Prac","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["prac"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define myPi 3.141592654f\nvec2 centre; float r;\nconst int n = 5;\nint vert_num[n] = int[n](3, 3, 3, 3, 3);\nint vert_ind[n] = int[n](0, 3, 6, 9, 12);\nconst int m = 15;\n#define pi (acos(-1.))\nconst vec3 A = vec3(0.2, 0.2, 0.);\nconst vec3 B = vec3(0.4, 0.2, 0.);\nconst vec3 C = vec3(0.3, (sqrt(6.) + 3.)/15., -sqrt(3.)/30.);\nconst vec3 D = vec3(0.3, 0.2, -sqrt(3.)/10.);\nconst vec3 O = vec3(0.3, (sqrt(6.) + 3.)/60., -sqrt(3.)/30.);\nconst vec3 H = vec3(0.3, 0.2, -sqrt(3.)/30.);\nvec3 vert_coords[m] = vec3[m](A, B, C, D, A, C, B, D, C, A, D, B, vec3(0.1, 0.2, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.3, 0.0, 0.0)); \n\nfloat z[3] = float[3](1., 0., 100.);\nvoid setCircle(){\n    r = 0.1;\n    centre = vec2(0.4 + (r*sin(iTime) - r*sin(2.0*iTime)), 0.3 + (r*cos(iTime) - r*cos(2.0*iTime))/0.8);\n    return;\n}\n\nbool left_turn(in vec3 a, in vec3 b, in vec2 uv){\n    bool flag = false;\n    if((b.x - a.x) * (uv.y - a.y) - (uv.x - a.x) * (b.y - a.y) > 0.0) flag = true;\n    return flag;\n}\n\nbool left_turn2(in vec2 a, in vec2 b, in vec2 uv){\n    bool flag = false;\n    if((b.x - a.x) * (uv.y - a.y) - (uv.x - a.x) * (b.y - a.y) > 0.0) flag = true;\n    return flag;\n}\n\nbool tetrahedron(in int i, in vec2 uv){\n    int j;\n    bool flag = true;\n    for(j = 0; j < vert_num[i]-1 && flag; j++){\n        flag = left_turn(vert_coords[vert_ind[i] + j], vert_coords[vert_ind[i] + j + 1], uv);}\n    flag = flag && left_turn(vert_coords[vert_ind[i] + j], vert_coords[vert_ind[i]], uv);\n    return flag;\n}\n\nbool in_square(in vec2 uv){\n    float x = 0.1 * cos(iTime) * cos(iTime) * cos(iTime);\n    float y = 0.1 * sin(iTime) * sin(iTime) * sin(iTime);\n    vec2 coords[4] = vec2[](vec2(x + 0.7, y + 0.4), vec2(x + 0.7, y + 0.6), vec2(x + 0.5, y + 0.6), vec2(x + 0.5, y + 0.4)); \n    //for(int i = 0; i < 4; i++){\n        //coords[i].y  = coords[i].y * cos(pi/3.0) + coords[i].y * sin(pi/3.0);\n        //z[2] = z[2] * (-1.0 * sin(pi/3.0)) + z[2] * cos(pi/3.0);\n    //}\n    int j;\n    bool flag = false;\n    if(uv.y <= coords[1].y && uv.y >= coords[3].y){\n        if(uv.x <= coords[0].x && uv.x >= coords[2].x){\n            flag = true;\n        }\n    }\n    return flag;\n}\n   \nbool inCircle(in vec2 centre, in float r, in vec2 xy){\n    bool flag = false;\n    if ((xy.x - centre.x)*(xy.x - centre.x) + (xy.y - centre.y)*(xy.y - centre.y) <= r*r) flag = true;\n    return flag;\n}\n\nbool square_din(in vec2 uv){\n    float z = 0.1 + 0.02 * sin(iTime*0.2);\n    float y = sin(iTime)*0.2;\n    vec2 coords[4] = vec2[4](vec2(0.05, 0.1 + y), vec2(0.2, 0.1 + y), vec2(0.15, 0.3 + y), vec2(0.1, 0.2 + y));\n    int j;\n    bool flag = false;\n    if(uv.y <= coords[3].y && uv.y >= coords[1].y){\n        if(uv.x <= coords[2].x && uv.x >= coords[0].x){\n            flag = true;\n        }\n    }\n    return flag;\n}\n\nbool z_figure(in vec2 uv){\n    float z_square = cos(iTime) + uv.y*5.;\n    if (z_square > z[0]) return true;\n    else return false;\n}\n\nvec4 init_colour(in vec2 uv, int i){\n    if(i == 0) {\n        vec4 colour = vec4(0,0.0,0.0,1.0); \n        colour.r = (uv.x - centre.x)*15. ;\n        colour.g = (uv.x + centre.x)*15.;\n        return colour;\n    }\n    if(i == 1) {\n    vec4 colour = vec4(0,0.0,0.0,1.0); \n        colour.r = (uv.x - 0.5 - 0.1 * cos(iTime) * cos(iTime) * cos(iTime))*5.;\n        colour.b = (uv.x - 0.1 * cos(iTime) * cos(iTime) * cos(iTime))*5. - 0.5; \n        return colour;\n    }\n}\n\nfloat get_z(int i, vec2 uv){\n    vec3 p0 = vert_coords[vert_ind[i]];\n    vec3 p1 = vert_coords[vert_ind[i] + 1];\n    vec3 p2 = vert_coords[vert_ind[i] + 2];\n    vec3 n = cross(p1 - p0, p2 - p0);\n    float d = (n.x * p0.x + n.y * p0.y + n.z *p0.z);\n    float z = (d - n.x * uv.x - n.y * uv.y) / n.z;\n    return z;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord/iResolution.xy;\n    vec4 BGcol = vec4(20.0*sin(100.0*xy.y) + 20.0*cos(100.0*xy.x), 150./255., 230./255., 1.0);\n    fragColor = vec4(BGcol);\n    \n    setCircle();\n    int j;\n    if(z_figure(xy)) {\n        if(square_din(xy)) fragColor = vec4(0.0, 0.3, 0.5, 1.0);\n        if(tetrahedron(4, xy)) fragColor = vec4(123./255.,5.0*sin(100.0*xy.y) + 12.0*cos(100.0*xy.x), 238./255., 1.0);\n    }\n    else {\n        if(tetrahedron(4, xy)) fragColor = vec4(123./255.,5.0*sin(100.0*xy.y) + 12.0*cos(100.0*xy.x), 238./255., 1.0);\n        if(square_din(xy)) fragColor = vec4(0.0, 0.3, 0.5, 1.0);\n    }\n    /*mat3 M = mat3(vec3(cos(iTime), 0., sin(iTime)), vec3(0., 1., 0.), vec3(-1.*sin(iTime), 0., cos(iTime)));\n    for(j = 0; j < 12; j++){\n        vert_coords[j] = M * (vert_coords[j] - H) + H;\n    }*/\n    \n    mat3 M = mat3(vec3(1, 0., 0.), vec3(0., cos(iTime), -1.*sin(iTime)), vec3(0., sin(iTime), cos(iTime)));\n    for(j = 0; j < 12; j++){\n        vert_coords[j] = M * (vert_coords[j] - H) + H;\n    }\n    \n    int i;\n    \n    float z_max = -100.;\n    int i_max = -1;\n    float z_tmp;\n    for(i = 0; i < 4; i++){\n        if(tetrahedron(i, xy)){\n            z_tmp = get_z(i, xy);\n            if(z_tmp > z_max) {\n                z_max = z_tmp;\n                i_max = i;\n            }\n        }\n    }\n    if(i_max == 0) fragColor = vec4(0.0, 1.0, 0.4, 1.0);\n    if(i_max == 1) fragColor = vec4(0.3, 0.8, 0.5, 1.0);\n    if(i_max == 2) fragColor = vec4(0.6, 0.3, 0.5, 1.0);\n    if(i_max == 3) fragColor = vec4(0.2, 0.3, 0.5, 1.0);\n    if(inCircle(centre, r, xy)) if(z_max < z[1]) fragColor = init_colour(xy, 0);\n    /*for(i = 0; i < 4; i++){\n        if(tetrahedron(i, xy)){\n            z_tmp = get_z(i);\n            if(z_tmp > z[1]) if(inCircle(centre, r, xy)) fragColor = init_colour(xy, 0);\n        }\n    }*/\n    \n    \n    /*vec3 a = vert_coords[0];\n    vec3 b = vert_coords[1];\n    vec3 d = vert_coords[3];\n    if(a.z > b.z && a.z > d.z) {\n        if(tetrahedron(0, xy)) fragColor = vec4(0.0, 1.0, 0.4, 1.0);\n        if(tetrahedron(1, xy)) fragColor = vec4(0.3, 0.8, 0.5, 1.0);\n    }\n    if(b.z > a.z && b.z > d.z){\n        if(tetrahedron(0, xy)) fragColor = vec4(0.0, 1.0, 0.4, 1.0);\n        if(tetrahedron(2, xy)) fragColor = vec4(0.6, 0.3, 0.5, 1.0);\n    }\n    if(d.z > a.z && d.z > b.z){\n        if(tetrahedron(1, xy)) fragColor = vec4(0.3, 0.8, 0.5, 1.0);\n        if(tetrahedron(2, xy)) fragColor = vec4(0.6, 0.3, 0.5, 1.0);\n    }\n    if(A.z == B.z) if(tetrahedron(0, xy)) fragColor = vec4(0.0, 1.0, 0.4, 1.0);\n    if(B.z == D.z) if(tetrahedron(2, xy)) fragColor = vec4(0.6, 0.3, 0.5, 1.0);\n    if(A.z == D.z) if(tetrahedron(1, xy)) fragColor = vec4(0.3, 0.8, 0.5, 1.0);*/\n    \n   // if(inCircle(centre, r, xy)) fragColor = init_colour(xy, 0);\n    if(in_square(xy)) fragColor = init_colour(xy, 1);\n}","name":"Image","description":"","type":"image"}]}