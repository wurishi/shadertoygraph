{"ver":"0.1","info":{"id":"ssVfzy","date":"1658437979","viewed":129,"name":"Recursive braiding","username":"rodgzilla","description":"Braids made of braids. The code is much cleaner than my previous iterations of this concept.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","braids"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time 1. * iTime\n#define ZPOS -100. + 50. * time\n\nfloat PI = acos(-1.);\n\nmat2 rot2d(float a){\n  float c = cos(a), s = sin(a);\n  \n  return mat2(c, s, -s, c);\n}\n\nfloat cyl(vec3 p, vec3 c){\n  return length(p.xy - c.xy) - c.z;\n}\n\nvec3 thread(vec3 p, float m, float r, float n, float xm, float ym, float i) {\n    p.z += (i * 2. * PI) / (m * n);\n    p.x += xm * sin(p.z * m);\n    p.y += ym * sin(p.z * m * (n - 1.));\n    \n    return p;\n}\n\nfloat recbraid(vec3 p, float m, float r) {\n    float d = 10.;\n    float n1 = 3.;\n    float n2 = 3.;\n    float n3 = 5.;\n    float xm = 1.;\n    float ym = 1.;\n\n\n    for (float i = 0.; i < n1; i += 1.) {\n        vec3 p1 = thread(p, m * .5, r, n1, 20., 20., i);\n        \n        for (float j = 0.; j < n2; j += 1.) {\n            vec3 p2 = thread(p1, m, r, n2, 10., 10., j);\n            \n            for (float k = 0.; k < n3; k += 1.) {\n                vec3 p3 = thread(p2, m * 4.5, r, n3, 2., 1., k);\n                \n            \n                d = min(d, cyl(p3, vec3(0, 0, r)));\n            }\n        }\n    }\n\n    return d;    \n}\n\n\nfloat map(vec3 p) {\n    float d = 1000.;\n    float z = p.z;\n    \n    p.xy *= rot2d(time * .2);\n    vec3 shift = vec3(0, -45, 0);\n    shift.xy *= rot2d(time * .2);\n\n    d = min(d, recbraid(p - shift, .025 , .5));\n    \n    return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0., ZPOS);\n  vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n  rd.yz *= rot2d(-.3);\n\n  float d = 0.;\n  vec3 glow = vec3(0);\n\n  for (int i = 0; i < 100; i++) {\n    vec3 p = ro + d * rd;\n    float ds = map(p);\n    \n    if (ds < 0.01 || ds > 100.) {\n      break;\n    }\n    d += ds * .7;\n  }\n  \n  vec3 p = ro + d * rd;\n  vec2 e = vec2(0.01, 0);\n  vec3 n = normalize(map(p) - \n    vec3(\n      map(p - e.xyy),\n      map(p - e.yxy),\n      map(p - e.yyx)\n    )\n  );\n\n  vec3 lp = ro;\n  vec3 tl = lp - p;\n  vec3 tln = normalize(tl);\n  float dif = dot(tln, n);\n  \n  col = vec3(dif);\n  fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}