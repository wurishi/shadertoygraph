{"ver":"0.1","info":{"id":"wlKBWK","date":"1615161303","viewed":264,"name":"Mythic Bird Attractor","username":"Mrpalland","description":"Exploration of rendering the 'Mythic Bird' iterative function.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","interactive","demo","attractor","graph","function","iterative"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Evan Nave 2021\n// Iterative Functions in GLSL: https://www.shadertoy.com/view/MtBGDW\n// Iterative Function Guide: https://www.shadertoy.com/view/3tyfWt\n// 'Mythic Bird' Graph: http://www.atomosyd.net/spip.php?article98\n#define SCALE 20.0\n#define ITERATION 80\n#define PI 3.14159265359\n\nfloat g(float x, float u){\n    return u*x + ((2.*(1. - u)*pow(x, 2.)) / (1. + pow(x, 2.)));\n}\n\n//Mythic Bird\nvec2 mythicEQ(vec2 c,float t){\n\tvec4 z = vec4(c.x*1.6, -c.y, 0.0, 0.0);\n\tvec3 zi = vec3(0.0);\n    vec4 ms = iMouse / iResolution.x;\n    \n    float a = 0.0009;\n    float b = 0.005 - 0.5;\n    float u = -0.801;\n    \n    //Animation\n    u += cos(t*0.1 + 15.7)*0.25 + 0.25;\n    \n    if(ms.z > 0.0){ u =  -0.801 + cos(ms.x*PI*2.0 + 15.7 + PI)*0.25 + 0.25; }\n    \n    float m = -3.5;\n    \n\tfor(int i=0; i<ITERATION; i++){\n\t\tzi.x = z.y + g(z.x, u) + a*z.y*(1. - b*pow(z.y, 2.) + m);\n\t\tzi.y = -z.x + g(zi.x, u);\n        if(length(zi.xy)>80.0)break;\n\t\tz.w++;\n\t\tz.xyz=zi;\n\t}\n\tz.w/=float(ITERATION);\n\treturn 1.0-z.wx;\n}\n\nmat2 rotate2D(float x){\n    return mat2(cos(x), -sin(x), sin(x), cos(x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\tvec3 col = vec3(0.);\n    float rt = -iTime*0.1 + 0.5;\n    \n    //Grid UVs and offset correction for Mythic Bird rotation\n    vec2 gv = fract(uv*2.0*rotate2D(rt)) -0.5;\n    vec2 rc = vec2(cos(rt)*0.1, sin(rt)*0.1);\n    \n    //Mythic Bird\n    float mb = mythicEQ(rotate2D(rt)*(uv + rc)*SCALE,iTime).x;\n    \n    mb = 1.0 - mb;\n    mb = smoothstep(0.00, 1., mb);\n    mb = pow(mb, 1.0);\n    mb *= 1.0 - length(uv*0.9) + mb*0.5;\n    \n    col = vec3(mb*0.1, mb*0.5, mb*0.9);\n    \n    //Radial Mask\n    float cm = length(uv) + 0.1 - 0.2*mb/0.005;\n    cm = smoothstep(0., 3., cm);\n    col = mix(col, vec3(0.1, 0.5, 0.5), cm + 0.2 - mb*mb);\n    \n    //Dots to make it pretty\n    float circles = 1.0 - smoothstep(0., 0.02, length(gv) - 0.2 + (1.0 - length(uv*0.6)) - 0.2);\n    col = mix(col, col*1.1, circles);\n    \n    //Gamma\n    col = pow(col, vec3(0.64545));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}