{"ver":"0.1","info":{"id":"NlsBzN","date":"1650589564","viewed":127,"name":"Drawing a solid circle","username":"bzm3r","description":"Using a signed distance field. ","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["sdf","tutorial","circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // set the default background to white\n    vec3 col = vec3(1.0, 1.0, 1.0);\n    \n    // the position of the pixel that will be painted is stored in fragCoord\n    vec2 p = fragCoord;\n    \n    // the center of the circle\n    vec2 center = vec2(0.25 * iResolution.x, 0.75 * iResolution.y);\n\n    float radius = 100.0;\n    // play around with this to get a feel for how it controls anti-aliasing\n    float smooth_cutoff = 0.01;\n    \n    // smoothstep(x, y, z) returns:\n    //      0 if z < x, \n    //      1 if z > y,\n    //      a \"smoothened\" (Hermite interpolated) value between 0 and 1 if x < z < y\n    // this is where the SDF magic happens: length(p - center) is a distance\n    col *= smoothstep(radius, radius * (1.0 + smooth_cutoff), length(p - center));\n\n    // set the colour of pixels in the fragment to be col, with alpha 1.0\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}