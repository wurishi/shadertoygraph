{"ver":"0.1","info":{"id":"wljcRd","date":"1595182505","viewed":174,"name":"Impact crater","username":"vegardno","description":"Very simple impact crater model from heightmap","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","moon","heightmap","bumpmapping","crater","impact"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// crater function\n\nconst float radius = .3;\nconst float bottom = .6;\n\nfloat bowl(float r)\n{\n    // y = ax² + c\n    const float c = -bottom;\n    const float a = bottom / (radius * radius);\n    \n    float y = a * r * r + c;\n    return clamp(y, -1., 0.);\n}\n\nfloat ridge(float r)\n{\n    return smoothstep(.0, .7, 1. * (.5 - clamp(r, radius, .5)));\n}\n\n// uv in [-1, 1]²\n// result in [-1, 1]\nfloat height(vec2 uv)\n{\n\t// custom interpolation to avoid discontinuities\n    int n = 43;\n    float a = float(n) * (atan(uv.y, uv.x) + radians(180.)) / radians(360.);\n    ivec2 size = textureSize(iChannel0, 0);\n    ivec2 mid = size / 2;\n    float noise = .14 * (mix(texelFetch(iChannel0, mid + ivec2(int(round(a - .5)), 0), 0).x,\n                            texelFetch(iChannel0, mid + ivec2((int(round(a + .5))) % n, 0), 0).x,\n                            smoothstep(-.3, 1.3, fract(a))) - .5) * clamp(length(uv), 0., .5);\n\n    float r = length(uv) + noise;\n    return .05 * texture(iChannel1, 1.3 * uv).r + min(\n    \tbowl(r) + ridge(r),\n        .13 + .14 * texture(iChannel2, .5 + 2. * uv).r);\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 normal(vec2 uv)\n{\n    const float eps = 0.001; // or some other value\n    const vec2 h = vec2(eps,0);\n    return normalize( vec3( height(uv-h.xy) - height(uv+h.xy),\n                            2.0*h.x,\n                            height(uv-h.yx) - height(uv+h.yx) ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float scale = 1.2;\n    vec2 uv = scale * (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\n#if 0\n    vec3 col = vec3(.5 + .5 * height(uv));\n#else\n    float t = radians(20.) * iTime;\n    vec3 col = vec3(.2, 0, 0)\n        + vec3(1) * max(0., dot(normal(uv), normalize(vec3(cos(t), sin(t), .4))))\n        + vec3(0) * height(uv);\n#endif\n\n#if 0 // overlay slice graphs\n    col = mix(col, vec3(1., 0., 0.), smoothstep(2. * scale / iResolution.y, 0., abs(uv.y - .5 * bowl(abs(uv.x)))));\n    col = mix(col, vec3(0., 0., 1.), smoothstep(2. * scale / iResolution.y, 0., abs(uv.y - .5 * ridge(abs(uv.x)))));\n    col = mix(col, vec3(1., 1., 1.), smoothstep(2. * scale / iResolution.y, 0., abs(uv.y - .5 * height(vec2(uv.x, 0.)))));\n    col = mix(col, vec3(1., 1., 1.), smoothstep(2. * scale / iResolution.y, 0., abs(length(uv) - .5)));\n#endif\n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}