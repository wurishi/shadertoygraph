{"ver":"0.1","info":{"id":"Mc3yRs","date":"1731014062","viewed":50,"name":"GHOST","username":"Secretstar","description":"Ghost","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["ghost"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Funzione di supporto per smooth min\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalizza le coordinate\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Aggiungi un movimento più complesso e variabile\n    float time = iTime * 0.5;\n    vec2 ghostPos = vec2(\n        cos(time * 1.2) * 0.4 + sin(time * 0.9) * 0.1,\n        sin(time * 1.1) * 0.4 + cos(time * 0.7) * 0.15\n    );\n    \n    // Aggiungi distorsione ondulata\n    uv -= ghostPos;\n    uv.x += sin(uv.y * 10.0 + time * 2.0) * 0.02;\n    uv.y += cos(uv.x * 8.0 + time * 1.5) * 0.015;\n    \n    // Forma base più complessa\n    float ghost = length(uv - vec2(0.0, 0.1)) - 0.22;\n    \n    // Corpo più elaborato con multiple onde\n    float bodyWave = sin(uv.x * 12.0 + time * 2.5) * 0.03 +\n                     sin(uv.x * 16.0 + time * 1.8) * 0.02;\n    float bodyPulse = sin(time * 1.8) * 0.02;\n    float body = length(vec2(uv.x * (1.0 + sin(uv.y * 4.0) * 0.12), \n                            uv.y + 0.12 + bodyWave + bodyPulse)) - 0.22;\n    \n    // Sfuma il collegamento tra testa e corpo\n    ghost = smin(ghost, body, 0.12);\n    \n    // Occhi più elaborati con movimenti\n    vec2 eyeUV = uv - vec2(-0.06, 0.13);\n    float leftEye = length(eyeUV) - 0.035 - sin(time * 3.0) * 0.005;\n    float leftPupil = length(eyeUV - vec2(0.01, -0.01 - sin(time * 4.0) * 0.003)) - 0.015;\n    \n    eyeUV = uv - vec2(0.06, 0.13);\n    float rightEye = length(eyeUV) - 0.035 - sin(time * 3.2) * 0.005;\n    float rightPupil = length(eyeUV - vec2(-0.01, -0.01 - sin(time * 4.2) * 0.003)) - 0.015;\n    \n    // Bocca ovale nera con movimento ondulante\n    vec2 mouthUV = uv - vec2(0.0, 0.05); \n    float mouth = length(vec2(mouthUV.x * 1.5 + sin(time * 2.8) * 0.01, mouthUV.y)) - 0.02;\n    \n    // Effetto nebuloso intorno al fantasma\n    float fog = 0.0;\n    for(int i = 0; i < 8; i++) {\n        float angle = float(i) * 3.14159 * 2.0 / 8.0;\n        vec2 offset = vec2(cos(angle), sin(angle)) * 0.22;\n        fog += smoothstep(0.22, 0.0, length(uv - offset * (0.5 + sin(iTime + float(i)) * 0.25)));\n    }\n    \n    // Parte inferiore più elaborata e nebulosa\n    float bottom = -1.0;\n    for(int i = 0; i < 7; i++) {\n        float x = float(i) * 0.08 - 0.24;\n        float wave = sin(iTime * 1.8 + float(i) * 3.14) * 0.05;\n        float size = 0.07 + sin(iTime + float(i)) * 0.012;\n        bottom = max(bottom, smoothstep(0.035, 0.0, length(uv - vec2(x, -0.18 + wave)) - size));\n    }\n    \n    // Effetti di luce e ombra\n    vec3 col = vec3(0.0);\n    float ghostShape = smoothstep(0.01, -0.01, ghost);\n    ghostShape = max(ghostShape, bottom);\n    \n    // Gradiente di colore per effetto spettrale\n    vec3 ghostColor = mix(\n        vec3(0.7, 0.78, 1.0),  // Blu più chiaro\n        vec3(0.95, 0.95, 1.0), // Bianco spettrale\n        uv.y + 0.5\n    );\n    \n    // Aggiungi luminescenza interna\n    float innerGlow = smoothstep(0.35, 0.0, ghost) * 0.6;\n    ghostColor += vec3(0.25, 0.35, 0.45) * innerGlow;\n    \n    // Applica il colore base del fantasma\n    col += ghostColor * (ghostShape + fog * 0.24);\n    \n    // Aggiungi gli occhi e la bocca\n    col *= 1.0 - smoothstep(0.01, -0.01, leftEye) * 0.85;\n    col *= 1.0 - smoothstep(0.01, -0.01, rightEye) * 0.85;\n    col *= 1.0 - smoothstep(0.01, -0.01, mouth) * 1.0;\n    \n    // Aggiungi le pupille\n    col *= 1.0 - smoothstep(0.01, -0.01, leftPupil);\n    col *= 1.0 - smoothstep(0.01, -0.01, rightPupil);\n    \n    // Effetto di bagliore\n    float glow = smoothstep(0.35, 0.22, ghost) * 0.8;\n    col += vec3(0.45, 0.55, 0.8) * glow * (0.6 + sin(iTime) * 0.15);\n    \n    // Sfondo con nebbia atmosferica\n    vec3 bgColor = vec3(0.08, 0.1, 0.13);\n    bgColor += fog * vec3(0.06, 0.08, 0.12);\n    \n    // Miscela il fantasma con lo sfondo\n    float alpha = ghostShape * (0.85 + fog * 0.15);\n    col = mix(bgColor, col, alpha);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}