{"ver":"0.1","info":{"id":"lcfXRH","date":"1704925617","viewed":103,"name":"Simple Halftone Experiment","username":"jcarrano","description":"Each circle's area is proportional to the image intensity. The color is saturated to avoid applying the intensity twice.\nThe dot screen is calculated by two different methods:\n\n- Left half uses \"perfect\" circles.\n- Right half uses egg-carton function","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["screen","dithering"],"hasliked":0,"parentid":"MfXXRH","parentname":"Simplest dither"},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// If 1, do not use a downsampled (and thus unique) radius per circle\n#define CHEAT_RADIUS 0\n\n#define NON_UNIFORM_COLOR 0\n\n\n#define M_PI 3.1415926535897932384626433832795f\n\nconst int diameter = 16;\nconst int downsample = diameter;\nconst float aa_width = 0.5/float(diameter);\n\n\nfloat improveImage(float grayLevel)\n{\n    float contrastFixed = (grayLevel - 0.1f)*1.2f;\n    return clamp(contrastFixed, 0.0, 1.0);\n}\n\nfloat balls(float grayLevel, ivec2 coord)\n{\n    vec2 coordblock = vec2(abs((coord % diameter) - diameter/2) + 1)/float(diameter);\n    float area = 2.0*(coordblock.x*coordblock.x + coordblock.y*coordblock.y);\n    \n    // The anti-aliasing is best done by using the radius (i.e. sqrt(area), but this\n    // formula is approximate and avoids one sqrt.\n    \n    float edge_width = 2.0*sqrt(grayLevel)*aa_width;\n    float edge_low = max(0.0, grayLevel - edge_width);\n    float edge_hi = grayLevel + edge_width;\n    return 1.0 - smoothstep(edge_low, edge_hi, area);\n}\n\n// Alternative implementation, gives the same result as balls(...)\nfloat balls2(float grayLevel, ivec2 coord)\n{\n    vec2 coordblock = fract(vec2(coord)/float(diameter)) - 0.5;\n    float radius = length(coordblock) + sqrt(2.0)/float(diameter);\n    \n    float grayRadius = sqrt(grayLevel)*0.75;\n    float edge_low = max(0.0, grayRadius - aa_width);\n    float edge_hi = grayRadius + aa_width;\n    return 1.0 - smoothstep(edge_low, edge_hi, radius);\n}\n\n\nfloat eggCartonBalls(float grayLevel, vec2 coord)\n{\n    // Scale so that it matches the other screen functions.\n    const float b = (sqrt(2.0)*M_PI)/float(diameter);\n    float eggCarton0 = (sin(coord.x*b) + sin(coord.y*b))*0.45f;\n    float eggCarton = sqrt(abs(eggCarton0));\n    \n    return smoothstep(1.0-grayLevel, 1.1-grayLevel, eggCarton);\n}\n\nfloat grayScale(vec4 col)\n{\n    return (col.r + col.g + col.b) / 3.0;\n}\n\nvec3 saturate(vec4 col)\n{\n    return col.rgb/max(max(col.r, col.g), col.b);\n}\n\nvec4 removeGreenScreen(vec4 col)\n{\n    float greenness = col.g - max(col.r, col.b);\n    float mask = (1.0 - smoothstep(0.1, 0.3, greenness));\n    \n    return vec4(col.rgb * mask, mask*col.a);\n}\n\nmat2 rot45 = mat2(sqrt(2.0), -sqrt(2.0), sqrt(2.0), sqrt(2.0))/2.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 fragCoordR = fragCoord/float(downsample);\n#if NON_UNIFORM_COLOR == 0\n    vec2 colorCoordR = trunc(fragCoordR);\n#else\n    vec2 colorCoordR = fragCoordR;\n#endif\n\n#if CHEAT_RADIUS == 0\n    vec2 radiusCoordR = trunc(fragCoordR);\n#else\n    vec2 radiusCoordR = fragCoordR;\n#endif\n\n    vec3 iResolutionR = iResolution/float(downsample);\n    \n    vec4 color = texture(iChannel0, colorCoordR/iResolutionR.xy);\n    color = removeGreenScreen(color);\n    float gray = grayScale(removeGreenScreen(texture(iChannel0, radiusCoordR/iResolutionR.xy)));\n\n    float ball;\n    if (fragCoord.x < iResolution.x*0.5) {\n        ball = balls(improveImage(gray), ivec2(fragCoord));\n    } else {\n        // The rotation and translation are only here so that both screens match\n        // and we can compare them.\n        ball = eggCartonBalls(improveImage(gray), rot45*vec2(fragCoord + vec2(diameter/2, 0)) );\n    }\n\n    // Output to screen/\n    fragColor = vec4(saturate(color)*ball, color.a*ball);\n}","name":"Image","description":"","type":"image"}]}