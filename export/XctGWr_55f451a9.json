{"ver":"0.1","info":{"id":"XctGWr","date":"1711569941","viewed":30,"name":"BestenFallsKongenial 002","username":"Bestenfalls","description":"the second are 3 sinewave with variable wavelenghts between 0 and 10 ( iMouse x,y,z ) \n\nim open for suggestions / solutions. \n\nthanks","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test","sinewaves"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Scale iMouse values from 0 to 640 down to a range from 0 to 10\n    float mouseX = iMouse.x * 10.0 / 640.0;\n    float mouseY = iMouse.y * 10.0 / 640.0;\n    float mouseZ = iMouse.z * 10.0 / 640.0;\n\n    // Calculate first sinusoidal amplitude based on time\n    float amplitude1 = sin(iTime);\n\n    // Calculate y-coordinate of the first sinusoidal line (centered)\n    float y1 = 0.5 + amplitude1 * 0.5 * sin(uv.x * 2.0 * 3.14159 * mouseX);\n\n    // Calculate second sinusoidal amplitude based on time\n    float amplitude2 = sin(2.0 * iTime);\n\n    // Calculate y-coordinate of the second sinusoidal line (centered)\n    float y2 = 0.5 + amplitude2 * 0.5 * sin(uv.x * 2.0 * 3.14159 * mouseY);\n\n    // Calculate third sinusoidal amplitude based on time\n    float amplitude3 = sin(3.0 * iTime);\n\n    // Calculate y-coordinate of the third sinusoidal line (centered)\n    float y3 = 0.5 + amplitude3 * 0.5 * sin(uv.x * 2.0 * 3.14159 * mouseZ);\n\n    // Decay factor for colors over time\n    float decayFactor = exp(-0.5 * iTime);\n\n    // Blend factor for blending between current color and background color\n    float blendFactor = 0.5 + 0.5 * sin(iTime);\n\n    // Calculate blended colors for each line\n    vec3 blendedColor1 = mix(vec3(1.0, 0.0, 0.0), vec3(0.0), decayFactor * blendFactor);\n    vec3 blendedColor2 = mix(vec3(0.0, 1.0, 0.0), vec3(0.0), decayFactor * blendFactor);\n    vec3 blendedColor3 = mix(vec3(0.0, 0.0, 1.0), vec3(0.0), decayFactor * blendFactor);\n\n    // Output to screen (color the lines)\n    vec3 color;\n    if (abs(uv.y - y1) < 0.01) {\n        color = blendedColor1; // Blended color for the first line\n    } else if (abs(uv.y - y2) < 0.01) {\n        color = blendedColor2; // Blended color for the second line\n    } else if (abs(uv.y - y3) < 0.01) {\n        color = blendedColor3; // Blended color for the third line\n    } else {\n        color = vec3(0.0); // Black background\n    }\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}