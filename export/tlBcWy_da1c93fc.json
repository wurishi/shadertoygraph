{"ver":"0.1","info":{"id":"tlBcWy","date":"1595246665","viewed":581,"name":"4-point linear gradient","username":"dukesoft_official","description":"simple example code for glassbeaver","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["gradient","linear","smooth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Linear function for replacing smoothstep\nfloat linstep(float edge0, float edge1, float x) {\n    return clamp((x-edge0)/(edge1-edge0), 0., 1.);\n}\n\n\nfloat calcPos(float a, vec4 pts) {\n    return smoothstep(pts.x,pts.y,a)*smoothstep(pts.w,pts.z,a);\n}\n\nfloat calcPosLinear(float a, vec4 pts) {\n    return linstep(pts.x,pts.y,a)*linstep(pts.w,pts.z,a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    \n    \n    // if initial points are not in range of 0 - 1 you can multiply each component by the scale factor of the outer points\n    \n\tvec4 pts = vec4(0.2, 0.3, 0.6, 1.0); // middle part returns 1, outside parts are smooth gradients\n    \n    //xy.x is the input variable (point on the line)\n\n    //fragColor = vec4(calcPos(xy.x, pts)); // This is a smoother version (smoothstep)\n    fragColor = vec4(calcPosLinear(xy.x, pts)); // Linear falloff\n    \n}","name":"Image","description":"","type":"image"}]}