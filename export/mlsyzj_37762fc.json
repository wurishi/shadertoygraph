{"ver":"0.1","info":{"id":"mlsyzj","date":"1690969555","viewed":64,"name":"Advanced Cell Noise","username":"sjz1","description":"When cell noise becomes fractal...\nit can be used to generate biomes","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise","cell"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash( float n )\n{\n  return fract(cos(n)*41415.92653);\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 w = fract(x);\n    vec2 u = w*w*(3.0-2.0*w);\n    float n = 176.74*p.x + 317.0*p.y ;\n    return mix( mix(hash(n+  0.0),hash(n+  1.0),u.x),\n                     mix(hash(n+317.07),hash(n+318.07),u.x),u.y);   \n}\nmat3 randM(vec2 pos,float b){\n    pos=floor(pos);mat3 m0;\n    const int K=10;//The number of different colors\n    for(int i=0;i<=2;i++)\n        for(int j=0;j<=2;j++)\n            m0[i][j]=b==0.?floor(noise(pos+vec2(i,j))*float(K))/float(K-1):\n                            noise(pos+vec2(i,j))+max(b,0.)*float(i)+max(-b,0.)*float(j);\n    return m0;\n}\nvec2 CellNoise(vec2 pos,int iteration){\n    vec2 p0;p0=floor(pos);vec2 p1;\n    mat3 m0x,m1x,m0y,m1y,m0,m1;\n    m0x=randM(p0,1.);m0y=randM(p0,-1.);m0=randM(p0,0.);\n    m0x+=p0.x-1.;m0y+=p0.y-1.;\n    int step=iteration;\n    float d00=1e10;\n    for(int k=0;k<step;k++)\n    {\n        p1=floor(pos*pow(3.,float(k+1)));\n        m1x=randM(p1+vec2(60.90,8),1.);m1y=randM(p1,-1.);\n        float s0=pow(3.,float(-k-1));\n        m1x-=1.;m1x*=s0;m1x+=p1.x*s0;\n        m1y-=1.;m1y*=s0;m1y+=p1.y*s0;\n        for(int i=0;i<=2;i++){\n            for(int j=0;j<=2;j++){\n                vec2 a=vec2(m1x[i][j],m1y[i][j]);\n                float d=1e10;\n                for(int i0=0;i0<=2;i0++){\n                    for(int j0=0;j0<=2;j0++){\n                        vec2 b=vec2(m0x[i0][j0],m0y[i0][j0]);\n                        float d1=distance(a,b);float tmp=float(d<d1);\n                        d=min(d,d1);m1[i][j]=tmp*(m1[i][j]-m0[i0][j0])+m0[i0][j0];\n                    }}\n\n            }}\n        m0x=m1x;m0y=m1y;m0=m1;\n    }\n    float tmp0=0.;float d=1e10;\n    for(int i=0;i<=2;i++){\n        for(int j=0;j<=2;j++){\n            vec2 a=vec2(m1x[i][j],m1y[i][j]);\n            float d1=distance(a,pos);float tmp=float(d<d1);\n            d=min(d,d1);tmp0=tmp*(tmp0-m1[i][j])+m1[i][j];\n        }}\n    return vec2(tmp0,d);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y*=iResolution.y/iResolution.x;\n\n    vec2 final=CellNoise(uv*5.,1+int(floor(mod(iTime,5.))));\n    vec3 col =vec3(final.x);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}