{"ver":"0.1","info":{"id":"MtfBzB","date":"1512277611","viewed":115,"name":"Nibble Extraction","username":"BigotedSJW","description":"not sure why I'm bothering to publish this, but yeah. Looks like 32bit integers are not truncated down to 24 bits like I feared.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","simple","bitoperations"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const ivec2 bits = ivec2(0x01234567,0x89ABCDEF);\n\nint lookup4(in ivec2 fakeb64, in int pos)\n{  pos &= 0xF;\n \tint shiftby = ((~pos & 7)) << 2;\n\tif((pos & 8) == 8){\treturn (fakeb64.y >> shiftby) & 0xf;}\n \telse\t\t\t  { return (fakeb64.x >> shiftby) & 0xf;}\n}\t//int lookup8(in ivec4 fakeb128, in int pos);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / (iResolution.xy);\n    uv += vec2(sin(iTime + uv.y*3.14159), 0.)/16.;\n    int x = int(uv.x*32.);\n\tfragColor = vec4(  lookup4(bits,x) ) / 15.; //normalize from 0..15 to 0...1.0\n    //thanks Fabrice\n         \n}\n/*\nint lookup8(in ivec4 fakeb128, in int pos)\n{  pos &= 0x3F;\n \t\n \tint shiftby = ((~pos & 7)) << 2;\n\tswitch(0x30 & pos) //bad bug, wrong bits\n    { \tcase 0x00:\treturn (fakeb128.x >> shiftby) & 0xf;\tbreak;\n    \tcase 0x10:\treturn (fakeb128.y >> shiftby) & 0xf;\tbreak;\n     \tcase 0x20:\treturn (fakeb128.z >> shiftby) & 0xf;\tbreak;\n     \tcase 0x30:\treturn (fakeb128.w >> shiftby) & 0xf;\tbreak;\n    }\n \treturn -1;\n}*/","name":"Image","description":"","type":"image"}]}