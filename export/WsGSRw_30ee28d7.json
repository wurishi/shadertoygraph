{"ver":"0.1","info":{"id":"WsGSRw","date":"1573573825","viewed":64,"name":"luthersTestNoise","username":"Luther","description":"Just playing with noise","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["test","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec4 getNoise(in vec2 uv, in vec2 noiseUVscale, in float noiseBrightness, float zoffset)\n{\n     vec4 noise = texture(iChannel1, vec3(uv * noiseUVscale,zoffset + iTime * 0.1)) * noiseBrightness;\n     return noise;\n}\n\nvec4 getMultiNoise(in vec2 uv, in vec2 noiseUVscale, in float noiseBrightness, in float brightMul,in float freqMul, in float animSpeed, in float animSpeedScale )\n{\n    int octaves = 4;\n    vec2 sScale = noiseUVscale.xy;\n    float brightness = noiseBrightness;\n    float cAnimSpeed = animSpeed;\n    float zOffset = iTime * cAnimSpeed;\n    vec4 anoise = vec4(0,0,0,0);\n    for (int i = 0; i < octaves; ++i)\n    {\n     \tvec4 noise = texture(iChannel1, vec3(uv * sScale,zOffset)) * brightness;\n    \tanoise += noise;\n        sScale *= freqMul;\n        brightness *= brightMul;\n        zOffset = iTime * cAnimSpeed;\n        cAnimSpeed*= animSpeedScale;\n    }\n    //anoise /= float(octaves);\n    return anoise;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float ratio = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 scaleFactor = getScaleFactor(iResolution.xy);\n    vec4 noise =  getMultiNoise(uv, vec2(0.02, 0.02), 1.0, 0.6, 7.0, 0.01, 4.0) * 0.7;\n    float n2  = (((noise.x + noise.y + noise.z + noise.w) / 4.0) - 0.5) * 2.0;\n    \n    //fragColor = vec4(noise.xyz, 1.0);\n    fragColor = vec4(n2,n2,n2, 1.0);\n        \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float m_chromatic_aberration_amount = 0.7; //= 0, range(0, 1)\nfloat m_coef1 = -12.108;\nfloat m_coef2 = 22.126;\nfloat m_coef3 = 5.8857;\nfloat m_coef4 = 0.18;\n#define PI 3.141592654\nfloat gaussCurve(float x, float a, float b, float c)\n{\n\tfloat e = 2.71828;\n\tfloat x_b = x-b;\n\tx_b*=x_b;\n\tfloat _2c2 = 2.0*c*c;\t\n\n\treturn a * pow(e, -(x_b / _2c2));\n}\n\n\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n//borred from https://www.shadertoy.com/view/XdfGDH\n\n\nmat2 rotmatz2x2Scale(float r, vec2 s)\n{\n    lowp float ca = cos(r);\n    lowp float sa = sin(r);\n\treturn mat2( ca * s.x, -sa *s.y \n\t\t\t\t,sa *s.x, ca * s.y);\n    \n}\n\nvec2 getScaleFactor(vec2 iResolution)\n{\n    return vec2(iResolution.x / 512.0, iResolution.y / 288.0);\n}\n\nvec4 blur( sampler2D samp,vec2 c, vec2 fragCoord, float angle, vec2 scale, vec2 iResolution )\n{\n\t\t\n\t\t//declare stuff\n\t\tconst int mSize = 11;\n\t\tconst int kSize = (mSize-1)/2;\n\t\tfloat kernel[mSize];\n\t\tvec3 final_colour = vec3(0.0);\n    \tvec2 cscale = c * 12.0;\n\t\tvec2 kernel_scale = scale * getScaleFactor(iResolution);\n    \n    \tmat2 kernel_matrix = rotmatz2x2Scale(angle, kernel_scale);\n\t\t//create the 1-D kernel\n\t\tfloat sigma = 7.0;\n\t\tfloat Z = 0.0;\n\t\tfor (int j = 0; j <= kSize; ++j)\n\t\t{\n\t\t\tkernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n\t\t}\n\t\t\n\t\t//get the normalization factor (as the gaussian has been clamped)\n\t\tfor (int j = 0; j < mSize; ++j)\n\t\t{\n\t\t\tZ += kernel[j];\n\t\t}\n\t\t\n\t\t//read out the texels\n\t\tfor (int i=-kSize; i <= kSize; ++i)\n\t\t{\n\t\t\tfor (int j=-kSize; j <= kSize; ++j)\n\t\t\t{\n            \t//int j = 0;\n            \tvec2 uv= (fragCoord.xy+vec2(float(i),float(j))*kernel_matrix) / iResolution.xy;\n\t\t\t\tfinal_colour += kernel[kSize+j]*kernel[kSize+i]*texture(samp, uv).rgb;\n            \n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\treturn vec4(final_colour/(Z * Z), 1.0);\n\t\n}\n\nvec2 getChromaValues(vec2 uv)\n{    \n    vec2 abvec = uv - vec2(0.5,0.5);\n    float dist = length(abvec);    \n    float fval = gaussCurve(1.0 - dist, m_coef1,m_coef2,m_coef3);\n    abvec *= m_chromatic_aberration_amount * fval;\n    return abvec;\n}\nvec4 ChromaticAberration(sampler2D samp,vec2 sampuv, vec2 uv, float chromatic_aberration_amount, vec2 noise)\n{   \n    vec3 channel_scaling = vec3(0,1,2) * chromatic_aberration_amount;\n    vec2 abvec = getChromaValues(uv);   \n   \n    abvec += noise.xy;\n    vec3 res = vec3(0,0,0);\n    vec4 central_samp = texture(samp, sampuv);\n    const int steps = 15;   \n    \n    for (int i = 0; i < steps; ++i)\n    {\n        float cx = float(i) / float(steps);\n    \tres.r += texture(samp, sampuv.st + abvec * cx * channel_scaling.r).r;    \n    \tres.g += texture(samp, sampuv.st + abvec * cx * channel_scaling.g).g;\n    \tres.b += texture(samp, sampuv.st + abvec * cx * channel_scaling.b).b;\n    }\n    res /= float(steps * 2);\n    \n    res.rgb += central_samp.rgb * 0.4;\n    \n    return vec4(res.rgb, 1);\n}\n\n\n","name":"Common","description":"","type":"common"}]}