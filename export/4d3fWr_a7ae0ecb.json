{"ver":"0.1","info":{"id":"4d3fWr","date":"1524622871","viewed":676,"name":"line segment drawing 3","username":"akhgary","description":"as a new comer I found it extremely hard to find a way to draw a line seg. Im not good at geometry so i could not search for the right content. \n\nfinally after a bunch of crawling in internet i came to find the right terms and understand how this works.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["line","plot","vector","drawing","segment","linesegment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// vector projection and rejection:\n// https://en.wikipedia.org/wiki/Vector_projection\n//\n// thanks to\n// https://stackoverflow.com/a/48630348/4767498\n// ===================\n//\n// say you have two vectors \"a\" and \"b\" (in two directions).\n// you travel a distance in line \"a\".\n// what scalar projection indicates is how far you traveled in direction of \"b\".\n// vector projection is simply the vector with that scale or magnitude.\n//\n// ===================\n//\n// now say you want to draw line \"b\". \n// now you have bunch of points coming from fragments of your screen.\n// so you will get bunch of lines (call it \"a\") going throw these points.\n// not all of these points are in right direction of the line \"b\".\n//\n// so what you should look for is how far we are from the vector \"a\" to vector \"b\"\n// this is called \"vector rejection\".\n// length of vector rejection basically tells the \n// distance from any point to line \"b\" that you want to draw.\n//\n// ===================\n//\n// using the distance you can give a brightness value to each pixel. \n// the closer you are, the brighter that pixel should be.\n//\n// if you clamp scalar projection from 0 to 1 \n// you will limit this infinite line to a line segment.\n// remember that vector projection is scalar projection times \"unit\" vector of \"b\"\n// unit vector has always length of 1. thats why clamping from 0 to 1 gives you a semgent.\n// as you go further from the line segment \"b\", you get bigger distances.\n//\n// ===================\n//\n// as an optimization instead of length(recj) \n// we calculate dot(rejc,rejc) which is equal to length(rejc)^2. \n// it should not matter too much because we are already tempering the\n// distance value with thickness etc to get our desired result.\n\nfloat line(vec2 p, vec2 p0, vec2 p1)\n{\n    vec2 a = p-p0; // the vector that we want to project on b\n    vec2 b = p1-p0; // this line is our goal.\n    \n    vec2 proj = clamp((dot(a,b)/dot(b,b)),0.0,1.0)*b; // vector projection of a onto b\n    vec2 rejc = a-proj; // vector rejection or distance in other words\n    \n    return smoothstep(0.0,1.2,1.0-dot(rejc, rejc)*1e4);\n}\n\nvec2 uvmap(vec2 uv)\n{\n    return ( 2.*uv - iResolution.xy) /iResolution.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = uvmap(fragCoord.xy);\n    vec2 p0 = vec2(0);\n    vec2 p1 = uvmap(iMouse.xy);\n\n    vec3 col = vec3(line(uv, p0, p1));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}