{"ver":"0.1","info":{"id":"4XsBDr","date":"1728362796","viewed":23,"name":"oct72024","username":"brendanluu","description":"breathe","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["popart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float capsuleSDF(vec2 p, vec2 a, vec2 b, float r) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h) - r;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize pixel coordinates\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Animation parameters\n    float time = iTime;\n    float animationSpeed = 0.006;\n    float maxHeight = 18.;\n    float minRadius = 0.001;\n    float maxRadius = 0.71;\n    float rippleWidth = 0.0007;\n    \n    // Calculate the current phase of the animation\n    float phase = fract(time * animationSpeed);\n    \n    // Number of ripples\n    const int numRipples = 80;\n    \n    float ripple = 0.0;\n    for (int i = 0; i < numRipples; i++) {\n        float t = fract(phase + float(i) / float(numRipples));\n        float currentHeight = t * maxHeight;\n        float currentRadius = mix(minRadius, maxRadius, smoothstep(0.0, 0.1, t));\n        \n        // Define capsule parameters\n        vec2 a = vec2(0.0, -currentHeight/2.0);\n        vec2 b = vec2(0.0, currentHeight/2.0);\n        \n        // Calculate signed distances to capsules\n        float d1 = capsuleSDF(uv, a, b, currentRadius);\n        float d2 = capsuleSDF(uv.yx, a, b, currentRadius);\n        \n        // Combine distances using smooth minimum function\n        float k = .01; // Controls the smoothness of the blend\n        float d = -log(exp(-d1/k) + exp(-d2/k)) * k;\n        \n        // Create ripple effect\n        float sdf = abs(d) - rippleWidth;\n        ripple = max(ripple, 1.0 - smoothstep(0.0, 0.09, sdf));\n    }\n    \n    // Set color (gray)\n    vec3 rippleColor = vec3(1.5);  // Medium gray, adjust as needed\n    \n    // Output color with black background and gray ripples\n    fragColor = vec4(rippleColor * ripple, 1.0);\n}","name":"Image","description":"","type":"image"}]}