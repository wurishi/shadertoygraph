{"ver":"0.1","info":{"id":"XfVGD1","date":"1712715443","viewed":114,"name":"Fast Mipmap Blur","username":"shraiwi","description":"A decent-looking blurring method that uses 4 mipmap lookups instead of directly sampling the texture. Should be a fair bit faster than other methods.","likes":2,"published":1,"flags":0,"usePreview":1,"tags":["blur","fast","mipmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 sampleBlur(in sampler2D iSampler, in vec2 uv, in float blur) {\n    const float s = 0.5;\n    \n    // weigh each lod based on the blur amount (0-4)\n    vec4 w = vec4(0.0, 1.0, 2.0, 3.0) * s - blur * s;\n    w = exp(-(w*w));\n    \n    w *= 1.0 / (w.x + w.y + w.z + w.w);\n    \n    vec4 lodBase = vec4(0.0, 1.0, 2.0, 3.0) + blur;\n    \n    vec4 lod0 = textureLod(iSampler, uv, lodBase.x);\n    vec4 lod1 = textureLod(iSampler, uv, lodBase.y);\n    vec4 lod2 = textureLod(iSampler, uv, lodBase.z);\n    vec4 lod3 = textureLod(iSampler, uv, lodBase.w);\n    \n    return lod0 * w.x \n        + lod1 * w.y \n        + lod2 * w.z \n        + lod3 * w.w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float blur = sin(iTime)*2.0+2.0;\n    \n    vec4 color = sampleBlur(iChannel0, uv, blur);\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}