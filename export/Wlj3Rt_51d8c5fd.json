{"ver":"0.1","info":{"id":"Wlj3Rt","date":"1560880904","viewed":145,"name":"Wooden mandelbrot set","username":"matistjati","description":"A mandelbrot set rendering colored by combining distance estimation and texture indexing","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float escapeRadius = 128.;\n\nconst vec2 origin = vec2(-0.05,.6805);\n#define experimental 0\n\nvec2 cMul(vec2 a, vec2 b)\n{\n\treturn vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\n\nvec2 cPow(vec2 z, float p)\n{\n\n    float r = pow(length(z),abs(p));\n\n   \tfloat theta = atan(z.y, z.x)*p;\n   \n    return r*vec2(cos(theta), sin(theta));\n}\n\nfloat dist(vec2 pos, out vec2 lastPos, out vec2 derivative, out float iter)\n{\n    vec2 z = vec2(0.0);\n    vec2 dz = vec2(0.0);\n#if experimental\n\tfloat maxIter = abs(sin(iTime*0.5)*100.)+10.;\n#else\n\tconst float maxIter = 1024.;\n#endif\n    \n#if experimental\n    float power = abs(sin(iTime*0.1)*3.);\n#else\n    const float power = 2.;\n#endif\n    \n    float m2;\n    float i=0.;\n    for(;i<maxIter;i++)\n    {\n        dz = 2.* mat2(z,-z.y,z.x) * dz + 1.;\n\t\tz = cPow(z,power)-abs(pos);\n        \n        m2 = dot(z,z);\n        if( m2>escapeRadius)\n            break;\n    }\n\n\tderivative = dz;\n    iter = i/maxIter;\n    lastPos = z;\n    return sqrt( m2/dot(dz, dz))*0.5f*log(m2);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat tz = 0.5-0.5*cos(0.225*iTime);\n    float zoom = pow( 0.5, 13.0*tz );\t\n    \n\tvec2 uv = (2. * fragCoord - iResolution.xy ) / iResolution.y;\n    \n    vec2 c = origin + uv*zoom;\n\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    vec2 z=vec2(0.,0.);\n    float iterations = 0.;\n    vec2 dz = vec2(0.,0.);\n    float d = abs(dist(c, z, dz, iterations));\n    \n    float t = clamp(pow(4.*d/zoom,.2),0.,1.);\n\n    fragColor = vec4((1.-t)*vec3(0.56, 0.3,0.1),1.);\n\tif (iterations==1.) fragColor = vec4(texture(iChannel0, z, 0.0).xyz, 1.);\n}","name":"Image","description":"","type":"image"}]}