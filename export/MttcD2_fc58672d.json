{"ver":"0.1","info":{"id":"MttcD2","date":"1534229096","viewed":311,"name":"A quine, deconstructed","username":"gpfault","description":"This is an expanded version of @reinder's awesome quine shader that shows more of what's going on. Full explanation here: https://gpfault.net/posts/shader-quine.txt.html\n\nOriginal version: https://www.shadertoy.com/view/llcyD2","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["text","font","quine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int character_idx;\n\nivec2 pixel_offset;\n\nuint[] data = uint[ 151](0x007a995eu,0x0083f840u,0x009a9c40u,0x006e5840u,0x0043f4dcu,    \n0x006659c0u,0x0066595eu,0x000c5661u,0x006a595au,0x007a9a66u,0x00f14938u,0x0062493fu,0x00924918u,    \n0x00fe4918u,0x00a2cb18u,0x00145f84u,0x3813813cu,0x0003d100u,0x0087f840u,0x0066bb5au,0x0085e000u,    \n0x00330604u,0x00010800u,0x00020000u,0x00624918u,0x00f2081cu,0x00024784u,0x0001e840u,0x0085e100u,    \n0x000047a1u,0x00014800u,0x00894200u,0x00214880u,0x0023e208u,0x00008208u,0x00f2081cu,0x00024784u,    \n0x0087f000u,0x0003f840u,0x00918624u,0x000ccc00u,0x00916724u,0x00a3b9d8u,0x00514514u,0x00310a24u,    \n0x00e0423cu,0x001a9080u,0x00024000u,0x00c766e3u,0x00c8d17fu,0x0052ca00u,0x0083f040u,0x0003f000u,    \n0x0000413cu,0x00000000u,0x00000000u,0x2cd9ab51u,0x0c39545eu,0x1978dd82u,0x2695ab51u,0x36af6336u,    \n0x256ad459u,0x26045076u,0xfefbefd4u,0x2d45979bu,0x1950ed9au,0x0bd9ab51u,0x1a3b571bu,0x0cdadd59u,    \n0x208262e5u,0x299d7354u,0x2c5cd846u,0x019c0a9bu,0x1165d799u,0x145766adu,0x0ad9ab51u,0x366ad456u,    \n0x1ab5158bu,0x1171b3f6u,0x2b4766adu,0x3678a8acu,0x3565a3b5u,0x007d1dadu,0x0b811d34u,0x1902702eu,    \n0x253143afu,0x0f845a11u,0x30460826u,0x00a86a45u,0x1b64f0e7u,0x2d45975eu,0x1b52dd9au,0x366ad45cu,    \n0x038acad1u,0x11ad8586u,0x35782070u,0x2dd5968eu,0x3401f476u,0x01811db4u,0x00b80048u,0x18bd9027u,    \n0x0eb80aebu,0x19027014u,0x2bad8bdbu,0x0050eb81u,0x1b6470a7u,0x01aeb62fu,0x0050eb80u,0x1b6430a7u,    \n0x01aeb62fu,0x0050eb81u,0x1b646067u,0x253143afu,0x26081a11u,0x14da0836u,0x1b622254u,0x2ad9b129u,    \n0x1b64f9c0u,0x1161575eu,0x11290d8du,0x132904adu,0x1a65850eu,0x0430e576u,0x0e5562b6u,0x1b2f608cu,    \n0x2bb172dcu,0x18c8ec51u,0x1845a673u,0x0b8ac5edu,0x2b35eb17u,0x0230e551u,0x2c79b2d4u,0x289d736bu,    \n0x17354845u,0x296c8a2cu,0x3035e189u,0x0c39546bu,0x08585502u,0x15aca79bu,0x0d50430eu,0x34160b17u,    \n0x209d72f4u,0x2e5c0204u,0x2f6409c0u,0x03580515u,0x1b185585u,0x216d4b61u,0x04201515u,0x010c4587u,    \n0x1b6c4196u,0xfefbf75eu);\n\nuint glyph(uint id){\n  int shift_amount = pixel_offset.x * 6 + pixel_offset.y;\n  return data[id]>>shift_amount & 0x1u;\n}\n\nuint text_segment(int start, int len, int offset) {\n  int i = character_idx - start;\n  if (i < 0 || i > len) { return 0u; }\n  else {\n    uint element_data = data[i/5 + offset];\n    uint glyph_id = element_data >> i%5*6&0x3fu;\n\treturn glyph(glyph_id);\n  }\n}\n\n#define ARRAY_ELEMENT_STRING_LEN 12\n#define PREFIX_LEN 36\nuint array_segment() {\n  int i = character_idx - PREFIX_LEN,   // relative position in array\n      o = i % ARRAY_ELEMENT_STRING_LEN; // relative position in array element\n  if(i<0||i>1810) {\n    return 0x0u;\n  } else if (o==0) {\n    return glyph(0x0u); // 0\n  } else if(o==1) {\n    return glyph(0x27u); // 1\n  } else if (o==10) {\n    return glyph(0x23u); //u\n  } else if(o==11) {\n    return glyph(0x16u); //,\n  } else {\n    int elem_idx = i/12;\n    return glyph(data[elem_idx] >> ((9-o)*4) & 0xfu);\n  }\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord){\n  fragCoord.y=iResolution.y-fragCoord.y;\n  ivec2 pixel_coord =ivec2(fragCoord);\n  character_idx = pixel_coord.x/5+(pixel_coord.y/8)*96;\n  pixel_offset = pixel_coord % ivec2(5,8);\n  if (pixel_offset.y > 5 || fragCoord.x > 480.) {\n      fragColor = vec4(.0);\n  \n  } else {\n    fragColor = vec4(text_segment(0,35,56) + \n                     array_segment() + \n                     text_segment(1847,431,64));\n  }\n}","name":"Image","description":"","type":"image"}]}