{"ver":"0.1","info":{"id":"wtK3WW","date":"1579126456","viewed":73,"name":"mandelbread","username":"404universe","description":"A simple Mandelbrot Set renderer","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["procedural"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int maxdepth = 1 << 16;\nconst vec2 coord = vec2(-0.235125, 0.827215);\nconst float width = 16.0 / 4.0;\nconst float height = 9.0 / 4.0;\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 color(in float iter) {\n\tfloat h = 360.0 * iter / float(maxdepth);\n    return hsv2rgb(vec3(h, vec2(1.0)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mat3 shift = mat3(width,        0.0,           0.0,\n                      0.0,          height,        0.0,\n                      -width / 2.0, -height / 2.0, 1.0);\n    mat3 scale = mat3(1.0 / pow(2.0, iTime), 0.0, 0.0,\n                      0.0, 1.0 / pow(2.0, iTime), 0.0,\n                      coord, 1.0);\n    mat3 transform = scale * shift;\n    \n    vec2 coord = (transform * vec3(fragCoord / iResolution.xy, 1.0)).xy;\n    vec2 z = vec2(0.0, 0.0);\n    int depth = 0;\n    for(; depth < maxdepth; ++depth) {\n    \tz = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + coord;\n        if (length(z) > 4.0) {\n            break;\n        }\n    }\n    \n    if (depth < maxdepth) {\n        vec3 color = color(float(depth));\n        fragColor = vec4(color.bgr, 1.0);\n    } else {\n        fragColor = vec4(vec3(0.0), 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}