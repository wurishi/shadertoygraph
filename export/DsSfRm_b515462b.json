{"ver":"0.1","info":{"id":"DsSfRm","date":"1689589030","viewed":27,"name":"Duck!","username":"cosmo_brain","description":"duckduckduck","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["duck"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define S(a, b, t) smoothstep(a, b, t)\n#define CLAMP(x, a, b) max(min(x, b), a)\n#define TAU (3.1415926*2.)\n#define PI 3.1415926\n\nvec2 rotate(vec2 v, float theta) {\n    float s = sin(theta);\n    float c = cos(theta);\n    mat2x2 rotation = mat2x2(c, s, -s, c);\n    return rotation * v;\n}\n\nfloat map(float x, float min1, float max1, float min2, float max2) {\n    return (x-min1)/(max1-min1) * (max2-min2) + min2;\n}\n\nfloat circle(vec2 uv, float radius, float blur) {\n    return S(blur, -blur, length(uv)-radius);\n}\n\n\nfloat rectangle(vec2 uv, float width, float height, float blur) {\n    float horizontal = S(blur, -blur, abs(uv.y)-height/2.);\n    float vertical = S(blur, -blur, abs(uv.x)-width/2.);\n    return vertical*horizontal;\n}\n\nfloat semicircle(vec2 uv, float radius, float theta, float blur) {\n    uv = rotate(uv, -theta);\n    float diameter = S(-blur, blur, uv.y);\n    float curve = circle(uv, radius, blur);\n    return curve * diameter;\n}\n\nfloat tail(vec2 uv, float blur) {\n    float left = S(-blur, blur, uv.x-.25);\n    float right = S(blur, -blur, uv.x-1.);\n    float top = S(blur, -blur, uv.y-sin(TAU*uv.x)/13. - .5);\n    float bottom = S(-blur, blur, uv.y-pow(max(0., 2.*(uv.x-.5)), 5.8)/2.);\n    return left*right*top*bottom;\n}\n\nfloat lowerBeak(vec2 uv, float blur) {\n    float right = S(blur, -blur, uv.x-1.);\n    float left = S(-blur, blur, uv.x+sin(3./2. * PI * uv.y*uv.y));\n    float top = S(blur, -blur, uv.y);\n    float bottom = S(-blur, blur, uv.y+1.);\n    return right*left*bottom*top;\n}\n\nfloat topBeakOld(vec2 uv, float blur) {\n    float right = S(blur, -blur, uv.x-1.); \n    float left = S(-blur, blur, uv.x + sin(3./2. * PI * (uv.y+.20*uv.x)*(uv.y+.20*uv.x)));\n    float bottom = S(-blur, blur, uv.y);\n    float top = S(blur, -blur, uv.y-1.);\n\n    float exclusionRight = S(-blur, blur, uv.y-.8);\n    float exclusionTop = S(-blur, blur, uv.x-.5);\n    float exclusion = exclusionRight * exclusionTop;\n    \n    return right*left*top*bottom * (1. - exclusion);\n}\n\nfloat topBeak(vec2 uv, float blur) {\n    float top = S(blur, -blur, uv.y-1.);\n    float to_square = sqrt(uv.x+.1-.1*uv.y) - .5;\n    float bottom = S(-blur, blur, uv.y-to_square*to_square*4.);\n    return max(top*bottom, rectangle(uv-vec2(.5, 1.5), 1., 1.5, blur));\n}\n\nfloat body(vec2 uv, float blur) {\n    float height = (sin(PI/2.)/13. + .5)/2.;\n\n    float front = semicircle(uv-vec2(0.22, height)*vec2(1./(3.*height), 1.), height, PI/2., blur);\n    float back = tail(uv, blur);\n    return max(back, front);\n}\n\nvec4 eye(vec2 uv, float blur) {\n    vec3 col = vec3(0.);\n\n    float whites = circle(uv, 0.05, blur);\n    col = mix(col, vec3(1.), whites);\n    float pupil = circle(uv, 0.035, blur);\n    col = mix(col, vec3(0.), pupil);\n    float highlight = circle(uv-vec2(-0.01, 0.01), 0.01, blur);\n    col = mix(col, vec3(1.), highlight);\n    \n    return vec4(col.rgb, max(max(whites, pupil), highlight));\n}\n\nfloat fire(vec2 uv, float time, float blur) {\n    float width = 0.4*sin(PI*sqrt(uv.y));\n    float offset = 0.1*uv.y*sin(0.75*TAU*uv.y + time);\n    float sides = S(blur, -blur, abs(uv.x-offset)-width);\n    return sides*S(blur, -blur, abs(uv.y-.5)-.5);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float t = iTime*2.;\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xy;\n    uv.x /= iResolution.y/iResolution.x;\n    uv *= 1.2;\n    uv += vec2(0., 0.05);\n\n    vec3 bodyColour = vec3(245, 213, 5)/255.;\n    vec3 beakColour = vec3(242, 129, 7)/255.;\n    vec3 armColour = vec3(245, 213, 5)/255.;\n    // vec3 armColour = vec3(245, 197, 5)/255.;\n\n    float blur = 0.002;\n\n    vec3 col = vec3(0.);\n\n    // trying a duck\n    col = mix(col, beakColour, lowerBeak((uv - vec2(-0.55, 0.3))*10.*vec2(1.3, 1.), blur));\n    col = mix(col, beakColour, topBeak(rotate(uv - vec2(-0.625, 0.33), 90.*PI/180.)*10., blur));\n    \n    col = mix(col, bodyColour, circle(uv+vec2(.5, .5)-vec2(0.3, 0.8), 0.3, blur)); // head\n    col = mix(col, bodyColour, body(uv+vec2(.5, .5), blur));\n\n    vec2 offset = vec2(-0.2, 0.05);\n    float correctionWidth = 0.5;\n    float correctionHeight = 0.15;\n    float headTailFix = rectangle(uv-offset, correctionWidth*0.9, correctionHeight, blur);\n    headTailFix *= 1.-circle(uv-offset-vec2(correctionWidth/2., 0.), correctionHeight/2., blur);\n    headTailFix *= 1.-circle(uv-offset-vec2(-correctionWidth/2., 0.), correctionHeight/2., blur);\n    col = mix(col, vec3(bodyColour), headTailFix);\n\n    // col = mix(col, vec3(bodyColour)*.7, body((uv-vec2(-.12, -.37))/.5, blur));\n    col = mix(col, vec3(0.), tail((uv-vec2(-.12, -.37))/.5, blur));\n    col = mix(col, armColour, tail((uv-vec2(-.09, -.36))/.45, blur));\n    col = mix(col, armColour, rectangle(uv-vec2(0.0, -.23), 0.05, 0.26, blur));\n    col = mix(col, bodyColour, rectangle(uv-vec2(0.0, -.23)-vec2(-0.026/2., 0.), 0.035, 0.27, blur));\n    col = mix(col, armColour, semicircle(uv-vec2(0.04/2.-0.026/2., -.23), 0.26/2., 90.*PI/180., blur));\n\n    // vec4 leftEye = eye(, blur);\n    uv = (uv-vec2(-.275, .35))/1.7;\n    float whites = circle(uv, 0.05, blur*.5);\n    col = mix(col, vec3(1.), whites);\n    float pupil = circle(uv, 0.035, blur*.5);\n    col = mix(col, vec3(0.), pupil);\n    float highlight = circle(uv-vec2(-0.014, 0.014), 0.01, blur*.5);\n    col = mix(col, vec3(1.), highlight);\n    // col = mix(col, leftEye.rgb, leftEye.a);\n    uv = (uv*1.7+vec2(-.275, .35));\n\n    vec2 firePosition = vec2(0.48, -0.02);\n    col = mix(col, vec3(1., 0., 0.), fire(rotate((uv-firePosition)*7., 45.*PI/180.), t, blur));\n    col = mix(col, beakColour, fire(rotate((uv-firePosition)*10., 45.*PI/180.), t, blur));\n    col = mix(col, vec3(240, 207, 24)/255., fire(rotate((uv-firePosition)*15., 45.*PI/180.), t, blur));\n    col = mix(col, vec3(245, 223, 100)/255., fire(rotate((uv-firePosition)*20., 45.*PI/180.), t, blur));\n\n    // col += vec3(topBeak(rotate(uv*10., 90.*PI/180.), blur));\n\n\n    // col += vec3(1., 0., 0.)*circle(uv, 0.1, blur);\n    \n    fragColor = vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"}]}