{"ver":"0.1","info":{"id":"3dKXWK","date":"1575013030","viewed":327,"name":"Animated 2D Grid","username":"foez","description":"wanted to draw a 3d grid, had no idea how to do it so tried doing it in 2d","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    float a = iResolution.x/iResolution.y;\n   \n\n    vec3 col = vec3(0);\n    float time = iTime;\n\t\n    float pw = 2./iResolution.y;\n    // comment the next two lines to get the grid without animation\n  \tuv.y += sin((uv.x/a)*3.14*5.+10.*sin(time*2.))*0.1;\n    uv *= rot(time*0.1);\n    \n    vec2 gv = (fract(uv*2.)-0.5)/2.;\n\n    col += smoothstep(0., 2.*pw, abs(abs(gv.y)-0.25));\n    col *= smoothstep(0., 2.*pw, abs(abs(gv.x)-0.25));\n    if(uv.x > 0. && uv.y > 0.) {\n        col *= vec3(0.95, 0.5, 0.5); \n    }\n    \n    if(uv.x < 0. && uv.y < 0.) {\n        col *= vec3(234, 255, 208)/256.0;\n    }\n    \n    if(uv.x > 0. && uv.y < 0.) {\n        col *= vec3(149, 225, 211)/256.0;\n    }\n    \n    if(uv.x < 0. && uv.y > 0.) {\n        col *= vec3(252, 227, 138)/256.0;\n    }\n     \n    \n    col = pow(col, vec3(1./2.2) );\n   \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}