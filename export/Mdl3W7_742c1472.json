{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"video","id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define PI 3.14159265358979323846264\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat tcz=iTime*70.0;\n\tvec2 rp=((fragCoord.xy/iResolution.xy)-vec2(0.5))*2.0;\n    vec2 p=(rp.xy*vec2(iResolution.x/iResolution.y,1.0))*1.25;  \n\tvec2 n=p;\n\tfloat lp=length(p*0.5);\n\tfloat ln=length(n);\n\tfloat r=(lp>0.5)?(1.0/(ln*ln)):(2.0*asin(ln)/PI);\n\tfloat phi=atan(n.y,n.x);\n\tvec2 coord=(vec2(r*cos(phi),r*sin(phi))*0.5)+vec2(0.5);\n\tvec2 tp=vec2(fract(coord.x),fract(coord.y));\n\tvec2 cp=(tp-vec2(0.5))*2.0;\n    vec3 c=vec3((sin(tcz*PI/(3.0*80.0))*0.5)+0.5,(sin(tcz*PI/(3.0*40.0))*0.5)+0.5,(sin(tcz*PI/(3.0*20.0))*0.5)+0.5);\n\tvec2 t=vec2((sin(tcz*PI/(3.0*128.0))*8.0)+(tcz/(3.0*2.0)),(sin(tcz*PI/(3.0*64.0))*8.0)-(tcz/(3.0*1.0)));\n\tc*=abs(sin(((cp.x*16.0)-(t.y/(3.0*2.0)))*PI))*abs(sin(((cp.y*16.0)+(t.x/(3.0*4.0)))*PI))*vec3(1.0,1.0,1.0);\n\tc*=(abs(sin(((cp.x*4.0)-(t.x/(3.0*2.0)))*PI))*abs(sin(((cp.y*4.0)+(t.y/(3.0*4.0)))*PI))*abs(sin((tcz/(3.0*16.0))*PI)))+\n\t   (abs(sin(((cp.x*2.0)-(t.x/(3.0*2.0)))*PI))*abs(sin(((cp.y*2.0)+(t.y/(3.0*4.0)))*PI))*abs(sin((tcz/(3.0*8.7))*PI)))+\n\t   (abs(sin(((cp.x*1.0)-(t.x/(3.0*2.0)))*PI))*abs(sin(((cp.y*1.0)+(t.y/(3.0*4.0)))*PI))*abs(sin((tcz/(3.0*5.3))*PI)));\n\tc*=texture(iChannel0, tp).xyz;\n\tfragColor=vec4(clamp(c,0.0,1.0)*((lp>0.5)?(lp*0.5):1.0),1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Mdl3W7","date":"1372431468","viewed":2143,"name":"Club disco sphere","username":"BeRo","description":"Just something what I did originally in my own 64k tool .marchfabrik with different input uniforms, so these are mapped here (example: rp => ((gl_FragCoord.xy/iResolution.xy)-vec2(0.5))*2.0 ).","likes":17,"published":3,"flags":0,"usePreview":0,"tags":["2d","sphere","club","disco"],"hasliked":0,"parentid":"","parentname":""}}