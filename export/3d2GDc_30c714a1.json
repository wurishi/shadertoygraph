{"ver":"0.1","info":{"id":"3d2GDc","date":"1550179809","viewed":173,"name":"Polarization Filters Comparison","username":"saabi","description":"Comparing three non-polarizing 50% filters with three polarizing filters. Use the mouse to change the middle polarizing filter.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["educational","physics","polarization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define GAMMA vec3(2.1)\n// gamma for my old laptop\n//#define GAMMA vec3(2.4,2.05,1.5)\n\n\nconst vec3 unpolarized = vec3(0.0, 0.0, 1.0);\n\nfloat theta[] = float[](0.,PI/4.0,PI/2.0);\n\nvec3 intensity(vec3 l, float t) {\n    float u = atan2(l.y,l.x);\n    float a = pow(cos(t-u),2.0)*length(l.xy) + l.z/2.0;\n    return vec3(cos(t)*a,sin(t)*a,0.0);\n}\n\nfloat brightness(vec3 l) {\n    return length(l.xy)+l.z;\n}\n\nvec3 polarizerVenn(vec2 uv, vec2 c) {\n\ttheta[1] = (iMouse.x/iResolution.x)*PI+PI/4.;\n\n    // light intensity\n    vec3 l = unpolarized;\n    for (int i=0; i<3; i++) {\n\t    l = circle(uv+rotate(vec2(0.3,0.),float(i*2)*PI/3.)+c,0.5)<0.0? intensity(l,theta[i]) : l;\n    }\n    vec3 col = vec3(1.0) * brightness(l);\n    //col = l; //uncomment for polarization coordinates\n    \n    // polarization angle indicators\n    for (int i=0; i<3; i++) {\n\t    col = mix(col, vec3(0.,0.,1.),rectangle(rotate(uv+rotate(vec2(0.3,0.),float(i*2)*PI/3.)+c,theta[i]), vec2(.5,.01))<0.?1.:0.);\n    }\n\n    // char output\n    l = unpolarized;\n    for (int i=0; i<3; i++) {\n\t    l =  intensity(l,theta[i]);\n    }\n\n    int digits = int(brightness(l) * 1000.0 + 0.5);\n\tint digit100ths  = digits - ((digits/10)*10); // integer mod 10\n    digits /= 10;\n\tint digit10ths  = digits - ((digits/10)*10); // integer mod 10\n    digits /= 10;\n    int digit1s     = digits - ((digits/10)*10); // integer mod 10\n\n    vec3 textColor = vec3(1.-brightness(l));\n    vec2 gvFontSize = vec2(16.0/iResolution.y, 30.0/iResolution.y); // Multiples of 4x5 work best\n\tcol = Char( gvFontSize, col, textColor, uv-vec2(.75,-.05), float(digit1s)); // 1's place\n\tcol = Char( gvFontSize, col, textColor, uv-vec2(.75,-.05), float(digit10ths)); // 1's place\n\tcol = Char( gvFontSize, col, textColor, uv-vec2(.75,-.05), 46.0); // 1's place\n\tcol = Char( gvFontSize, col, textColor, uv-vec2(.75,-.05), float(digit100ths)); // 1's place\n\n    return col;\n}\n\nvec3 simpleFilterVenn(vec2 uv, vec2 c) {\n    vec3 col = vec3(1.0);\n    for (int i=0; i<3; i++) {\n\t    col *= vec3(circle(uv+rotate(vec2(0.3,0.),float(i*2)*PI/3.)+c,0.5)<0.0? 0.5 : 1.0);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // setup coordinate system\n    vec2 uv = fragCoord/iResolution.xy;\n    uv *= 2.0;\n    uv -= 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n\n    // render filters\n    vec3 col = simpleFilterVenn(uv, vec2(0.85,0.0));\n    col *= polarizerVenn(uv, vec2(-0.85,0.0));\n\n    // gamma correct and output\n    fragColor = vec4(gamma(col,GAMMA),1.0);\n    //fragColor = vec4(gamma(col,vec3(1.)),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// color\nvec3 gamma(vec3 col, vec3 gamma) {\n    return vec3(pow(col.r,1.0/gamma.r),pow(col.g,1.0/gamma.g),pow(col.b,1.0/gamma.b));\n}\n\n#define PI 3.1415926\n\n// trig\nfloat atan2(in float y, in float x)\n{\n    bool s = (abs(x) > abs(y));\n    return mix(PI/2.0 - atan(x,y), atan(y,x), s);\n}\n\n// coordinate transforms\nvec2 rotate(vec2 p, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return vec2(c*p.x + s*p.y, c*p.y - s*p.x);\n}\n\nvec2 translate(vec2 p, vec2 c) {\n    return p - c;\n}\n\nvec2 scale(vec2 p, float s) {\n    return p / s;\n}\n\n// 2D SDFs\nfloat circle(vec2 uv, float r) {\n    return length(uv)-r;\n}\nfloat rectangle(vec2 p, vec2 hs) {\n    vec2 componentWiseEdgeDistance = abs(p) - hs;\n    float outsideDistance = length(max(componentWiseEdgeDistance, vec2(0.0)));\n    float insideDistance = min(max(componentWiseEdgeDistance.x, componentWiseEdgeDistance.y), 0.0);\n    return outsideDistance + insideDistance;\n}\n\n// Jason Allen Doucette\n// http://xona.com/jason/\n//\n// Monitor Gamma\n// May 25, 2016\n\n// ---- TEXT -------------------------------------------\n\n// ---- 8< ---- 8< ---- 8< ---- 8< ---- 8< ---- 8< ----\n// ---- GLSL NUMBER PRINTING --------------------------------\n// ---- @P_Malin --------------------------------\n\n// Creative Commons CC0 1.0 Universal (CC-0) \n// https://www.shadertoy.com/view/4sBSWW\n\nconst float gvFontSpacing = 0.0;\n\nfloat DigitBin(const in int x)\n{\n    if (x < 10)\n        return // originals:\n           x==0 ? 480599.0\n          :x==1 ? 139810.0\n          :x==2 ? 476951.0\n          :x==3 ? 476999.0\n          :x==4 ? 350020.0\n          :x==5 ? 464711.0\n          :x==6 ? 464727.0\n          :x==7 ? 476228.0\n          :x==8 ? 481111.0\n          :       481095.0;\n#ifndef DEBUG_DISABLE_TEXT\n    else\n    if (x < 78)\n        return // Glyphs added by Michael Pohoreski\n           x==42 ?  21072.0 // *\n          :x==45 ?   3840.0 // -\n          :x==46 ?      2.0 // .\n          :x==61 ?  61680.0 // =\n          :x==65 ? 434073.0 // A\n          :x==66 ? 497559.0 // B\n          :x==67 ? 921886.0 // C\n          :x==68 ? 498071.0 // D\n          :x==69 ? 988959.0 // E\n          :x==70 ? 988945.0 // F\n          :x==71 ? 925086.0 // G\n          :x==72 ? 630681.0 // H\n          :x==73 ? 467495.0 // I\n          :x==74 ? 559239.0 // J\n          :x==75 ? 611161.0 // K\n          :x==76 ?  69919.0 // L\n          :        653721.0 // M\n          ;\n    else\n    if (x < 91)\n        return // Glyphs added by Michael Pohoreski\n           x==78 ? 638361.0 // N\n          :x==79 ? 432534.0 // O\n          :x==80 ? 497425.0 // P\n          :x==81 ? 432606.0 // Q\n          :x==82 ? 497561.0 // R\n          :x==83 ? 923271.0 // S\n          :x==84 ? 467490.0 // T\n          :x==85 ? 629142.0 // U\n          :x==86 ? 349474.0 // V\n          :x==87 ? 629241.0 // W\n          :x==88 ? 628377.0 // X\n          :x==89 ? 348706.0 // Y\n          :        475671.0;// Z\n#endif\n    return 0.0;\n}\n\n// ---- 8< ---- 8< ---- 8< ---- 8< ---- 8< ---- 8< ----\n\n// ---- 8< ---- 8< ---- 8< ---- 8< ---- 8< ---- 8< ----\n// ---- TEXT RENDERING --------------------------------\n// ---- @MichaelPohoreski --------------------------------\n\nvec2 gvPrintCharXY = vec2( 0.0, 0.0 );\n\nvec3 Char( vec2 gvFontSize, vec3 backgroundColor, vec3 textColor, vec2 fragCoord, float fValue )\n{\n    vec2 vStringCharCoords = (fragCoord.xy - gvPrintCharXY) / gvFontSize;\n    if ((vStringCharCoords.y < 0.0) || (vStringCharCoords.y >= 1.0)) return backgroundColor;\n    if ( vStringCharCoords.x < 0.0)                                  return backgroundColor;\n\n    float fCharBin = (vStringCharCoords.x < 1.0) ? DigitBin(int(fValue)) : 0.0;\n\n    // Auto-Advance cursor one glyph plus some extra padding\n    float fAdvance = gvFontSpacing; \n    gvPrintCharXY.x += gvFontSize.x + fAdvance;\n        \n    float a = floor(\n        mod(\n            (fCharBin / pow(\n                2.0, \n                floor(fract(vStringCharCoords.x) * 4.0) + \n                (floor(vStringCharCoords.y * 5.0) * 4.0))), \n            2.0)\n    );\n    return mix( backgroundColor, textColor, a );\n}\n","name":"Common","description":"","type":"common"}]}