{"ver":"0.1","info":{"id":"DlSczc","date":"1693253055","viewed":45,"name":"Red Mandelbrot Set","username":"c0b0w","description":"\nhttps://www.youtube.com/watch?v=6z7GQewK-Ks&list=PLRqwX-V7Uu6ZiZxtDDRCi6uhfTH4FilpH&index=2\nhttps://darkeclipz.github.io/fractals/","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 getBackgroundColor(vec2 uv) {\n  uv = uv * 0.5 + 0.5; // remap uv from <-0.5,0.5> to <0.25,0.75>\n  vec3 gradientStartColor = vec3(1., 118/255, 33/255);\n  vec3 gradientEndColor = vec3(0., 222/255, 0.6);\n  \n  \n  return mix(gradientStartColor, gradientEndColor, uv.y); // gradient goes from bottom to top\n}\n\n\n\nvec2 multiplicationVectorielle(vec2 a, vec2 b) {\n    mat2 matriceA = mat2(a.x, a.y, -a.y, a.x);\n    return matriceA * b;\n}\n\n// values and ideas found on : http://framy.free.fr/travaux_mathematiques.htm\n// Code inspired by : https://darkeclipz.github.io/fractals/\n// { Z0 = 0\n// { Zn+1 = Z^2n + C\nvec3 mandelbrotSet(vec2 uv) {\n    vec2 z = vec2(0); // vecteur avec la partie réelle en X et imaginaire en Y\n    vec2 c = uv * 2.;\n    c.x -= 0.5;\n    float i = 0.;\n    float N = 64.; // Nombre d'itérations\n    float B = 4.;  // Nombre qui définit si l'itération tend vers l'infini\n    \n    for(i = 0.; i < N; i++) {\n        z = multiplicationVectorielle(z, z) + c; // multiplication matricielle, z devient z^2n + c\n        if (dot(z, z) > B*B) {// Module de z => |z| = Racine(a^2 + b^2),Si cette distance pythagoricienne > B^2 alors on considère que ca tends vers l'infini\n            break;\n        }\n    }\n    \n    if (i == N) {\n        i = 0.;\n    }    \n    \n    return vec3(i/N, 0., 0.); \n}\n\n\nvec3 drawScene(vec2 uv) {\n  // vec3 col = getBackgroundColor(uv);\n  \n  // float circle = sdCircle(uv, 0.1, vec2(0, 0));\n  // float square = sdSquare(uv, 0.1, vec2(0.3, 0));\n  \n  vec3 col = vec3(uv.x, uv.y, 200./255.); \n  \n  \n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy; // <0, 1>\n  uv -= 0.5; // draw in the center <-0.5,0.5> \n  uv.x *= iResolution.x/iResolution.y; // fix aspect ratio\n\n  // vec3 col = drawScene(uv);\n  vec3 col = mandelbrotSet(uv);\n\n  fragColor = vec4(col,1.0); // Output to screen\n}","name":"Image","description":"","type":"image"}]}