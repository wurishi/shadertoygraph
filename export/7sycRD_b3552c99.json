{"ver":"0.1","info":{"id":"7sycRD","date":"1654549644","viewed":167,"name":"Sky Coral","username":"Hyeve","description":"I rewrote my lighting code! Again! It's not making a huge difference here, to be fair, but it now handles a lot of things better, and actually has functional distance fog.","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarching","transparency","glass","reflections","crystal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//See the common tab for fps control.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nvec2 uv=vec2(0);\nvec3 cp,cn,cr,ss,oc,gl=vec3(0),vb,ro,rd,so,ld;\nvec4 fc=vec4(0),cc=vec4(0);\nfloat tt,cd,sd,md,io,oa,td=0.;\nint es=0,ec=0,fi=1;\n\nfloat bx(vec3 p,vec3 s){vec3 q=abs(p)-s;return min(max(q.x,max(q.y,q.z)),0.)+length(max(q,0.));}\nfloat gy(vec3 p, vec3 s){return (abs(dot(sin(p*s.x),cos((p*s.y).zxy)))-s.z)/(max(s.x,s.y)*1.8);}\nfloat smin(float a, float b, float k){float h=clamp(0.5+0.5*(b-a)/k,0.,1.);return mix(b,a,h)-k*h*(1.-h);}\n\nfloat mp(vec3 p)\n{\n\t\tvec3 pp = p;\n\n\t\t\n\t\n\t\tp.xy *= rot(tt*0.1);\n\t\n\t\tp.yz *= rot(sin(tt*0.5)*0.1);\n\n\t\tfloat py = length((abs(p)-6.).xy)-0.5;\n\t\n\t\tp.z += tt*3.;\n\t\n\t\tp.z = mod(p.z, 20.)-10.;\n\t\tp.x = abs(p.x) - 6.;\n\t\n\t\tfloat by = bx(p,vec3(0.1,25.,5.));\n\t\t\n\n\t\tp=pp;\n\t\n\t\tfloat an = (sin(tt*0.5)+2.5);\n\t\tp.z += (5.-an) * 3.;\n\t\n\t\tp.xz *= rot(tt*0.1);\n\t\n\t\tsd = gy(p+tt*vec3(0.1,-0.2,0.3), vec3(2.,2,cos(tt*0.3)*0.2+0.3));\n\t\t\n        float cl = length(p) - an;\n    \n        for(float i = 1.; i < 4.; i++)\n        {\n            p.x = abs(p.x) - 1.5;\n            p.xy *= rot(i+tt*0.5);\n            p.xz *= rot(i+tt*0.3+2.);\n            cl = smin(cl, length(p) - an * i / 4.,1.);\n        }\n        \n        \n\t\tsd = max(sd, cl);\n\t\tsd = min(sd,py);\n\t\tsd = min(sd,by);\n\n\t\tsd=abs(sd)-0.001;\n\t\n\t\tif(sd<0.01)\n\t\t{\t\n\t\t\tio=by<sd+0.01?-1.:1.1;\n\t\t\toc=normalize(p*p);\n\t\t\tss=vec3(max(1.-py+pp.z*0.05,0.15)*2.)*vec3(1,0.1,1);\n\t\t\toa=0.1;\n\t\t\tec=2;\t\n\n\t\t}\n\t\treturn sd;\n}\n\nvoid nm(){mat3 k=mat3(cp,cp,cp)-mat3(.001);cn=normalize(mp(cp)-vec3(mp(k[0]),mp(k[1]),mp(k[2])));cn=normalize(cn);}\nvoid shtr(){so=cp+cn*0.05;md=64.;for(cd=0.;cd<64.;cd+=mp(cp=ro+cn*0.05-ld*cd)){if(sd<md&&sd<cd)md=sd;if(sd<0.0001)break;}}\nvoid tr(){for(cd=0.;cd<64.;){cd+=mp(cp=ro+rd*cd);td+=sd;if(sd<0.001)break;}nm();}\n\n\nvoid px(vec3 rd)\n{\n  vec3 bg=cc.rgb=vec3(0.85,0.9,1.1)-length(uv)*0.3+gl;\n\tif(cd<64.)\n\t{cc.a=oa;ld=normalize(cp-vec3(5, 10, -15));\n\tfloat df=max(dot(cn,-ld),0.),sp=max(1.-length(cross(rd+ld,cn)*0.8),0.)*(1.2-oa)*0.5,\n\tfo=exp(-pow(0.023*td,4.)),ao=1.-clamp(mp(cp+cn*.1)/.1,0.,1.);\n\tvec3 fr=pow(1.-abs(dot(rd,-cn)),3.)*mix(cc.rgb,oc,0.);\n  cc.rgb=(oc*df+fr+sp+ss)-ao*0.1;\n\tshtr();cc.rgb-=(1.-clamp(md/0.05,0.,1.))*0.2;\n\tcc.rgb = mix(bg, cc.rgb, fo);}\n\telse cc.a=1.;cc.rgb+=gl;\n\tcc.rgb*=max(max(cc.r,max(cc.g,cc.b)),1.);\n}\n\nvoid render(vec2 frag, vec2 res, float time, out vec4 col)\n{\n  uv=vec2(frag.x/res.x,frag.y/res.y);\n  uv-=0.5;uv/=vec2(res.y/res.x,1);\n\ttt=mod(time+8.,100.);\n\t\n  ro=vec3(0.,0,-40);\n\trd=normalize(vec3(uv*0.5,1.));\n\t\n\tfor(int i=0;i<20;i++)\n  {\n\t\ttr();ro=cp-cn*(io<0.?-0.01:0.01);\n\t\tcr=refract(rd,cn,i%2==0?1./io:io);\n    if((length(cr)==0.&&es<=0)||io<0.)\n\t\t{i++;cr=reflect(rd,cn);es=(io<0.?es:ec);}\n\t\tpx(rd);if(max(es,0)%3==0) rd=cr;\n\t\tes--;fc=fc+vec4(cc.rgb*cc.a,cc.a)*(1.-fc.a);\n\t\tif(fc.a>=1.)break;\n  }\n  col=fc/fc.a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(mod(float(iFrame), 60./FPS) < 1. || iFrame < 5) render(fragCoord.xy,iResolution.xy,iTime,fragColor);\n    else fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//fps control for performance. Assumes the refresh rate of your monitor is 60hz\n//(120hz monitor set to 30 here will actually run at 60fps)\n#define FPS 30.","name":"Common","description":"","type":"common"}]}