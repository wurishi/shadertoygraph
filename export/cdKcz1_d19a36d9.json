{"ver":"0.1","info":{"id":"cdKcz1","date":"1695927342","viewed":64,"name":"First Fractal Shader","username":"darkpanix","description":"Practicing fractals","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 Palette(float t){\n\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.00, 0.33, 0.67);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y; \n    \n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 6.0; i++){\n         uv = fract(uv * 1.5) - 0.5; \n    \n        float d = length(uv) * exp(-length(uv0)); \n    \n        vec3 col = Palette(length(uv0) + i*0.4 + iTime * 0.4);\n    \n        d = sin(d * 8.0 + iTime)/ 8.0;\n        d = abs(d);\n \n        d = pow(0.01 / d, 1.5);\n    \n        finalColor += col * d;   \n    }\n    \n   \n\n    //fragColor = vec4(uv, 0.0, 1.0);\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}