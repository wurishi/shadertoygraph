{"ver":"0.1","info":{"id":"ftVBz3","date":"1664944891","viewed":193,"name":"Basic Pixel Coordinate","username":"nllorcajr","description":"Playing around with coordinates and sine functions ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["basicpixelmapping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//thebookofshaders ploting line, replace vec2 UV with singgle coordinate only\nfloat plot(float st, float pct){\n  float line =   smoothstep( pct-0.02, pct, st) - smoothstep( pct, pct+0.02, st);\n  return line;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Colors\n    vec3 col = vec3(0);\n    vec3 Color2 = vec3(1.000,0.796,0.361);\n    vec3 Color3 = vec3(0.988,0.192,0.404);\n    vec3 Color4 = vec3(1.000,0.510,0.400);\n    vec3 Color5 = vec3(0.976,1.000,0.502);\n    vec3 Color6 = vec3(0.945,0.035,0.612);\n    vec3 Color7 = vec3(0.259,0.894,0.247);\n    vec3 Color8 = vec3(0.694,0.969,0.451);\n    vec3 Color9 = vec3(0.039,0.941,0.941);\n    \n    vec3 Border = vec3(0.757,0.424,0.635);\n    \n    // gradients based on math functions\n    float Shape = 1.; \n    \n    // Full sine period\n    if (uv.x < .5 && uv.y > .5)\n    {   \n        Shape = plot(uv.y,  .75 + sin( uv.x / (0.318 / 4.)) * .25); \n        col = mix(Color2, Color3, sin( uv.x ) * 2.);           \n        col = vec3(col  * (1. - Shape ) + Shape * Border);\n    }\n    // Half 0 - 1 range\n    else if (uv.x < .5 && uv.y < .5)\n    {       \n        Shape = plot(uv.y, sin( uv.x / (0.318 * .5)) * .5); \n        col = mix(Color4, Color5, sin( uv.x / (0.318 * .5) ));          \n        col = vec3(col  * (1. - Shape ) + Shape * Border);\n    }        \n    else if (uv.y > .5 && uv.x > .5)\n    {     \n        Shape = plot(uv.y, .5 + abs(sin( uv.x / (0.318 * .25))) *.5   ); \n        col = mix(Color6, Color7, .5 + abs(sin( uv.x / (0.318 * .25))) *.5   );\n        col = vec3(col  * (1. - Shape ) + Shape * Border);\n    } \n    else\n    {   \n        Shape = plot(uv.x,  .75 + sin( uv.y / (0.318 / 4.)) * .25); \n        col = col = mix(Color8, Color9, sin( uv.y ) * 2.);                 \n        col = vec3(col  * (1. - Shape ) + Shape * Border);\n    }\n    \n    // borderlines\n    if(abs(uv.x - .5) < .004) col = Border;\n    if(abs(uv.x - .0015) < .004) col = Border;\n    if(abs(uv.x - .998) < .004) col = Border;\n    if(abs(uv.y - .5)< 0.006 &&  uv.x > 0.) col = Border;\n    if(abs(uv.y - .0019)< 0.006 &&  uv.x > 0.) col = Border;\n    if(abs(uv.y - .998)< 0.006 &&  uv.x > 0.) col = Border;\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}