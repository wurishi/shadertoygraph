{"ver":"0.1","info":{"id":"mdtcWn","date":"1694960232","viewed":60,"name":"RayMarching: Color Interpolation","username":"AlexanderPopescu","description":"raymarcher but the smoothmin function also interpolates the color of the material","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarchingcolor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision mediump float;\n\nconst float FOV = 1.0;\nconst int MAX_STEPS = 1000;\nconst float MAX_DIST = 1000.0;\nconst float HIT_THRESHOLD = 0.0001;\n\nstruct sceneReturn\n{\n    float x;\n    vec3 y;\n};\n\nfloat SDFsphere(vec3 p, vec3 spherePos, float sphereRadius)\n{\n    return length(p - spherePos) - sphereRadius;\n}\n\nfloat SDFplane(vec3 p, vec3 planePos, vec3 planeNormal)\n{\n    return dot(p - planePos, planeNormal);\n}\n\nfloat SDFrectangularprism(vec3 p, vec3 prismPos, vec3 prismSize)\n{\n    vec3 q = abs(p - prismPos) - prismSize;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat lerp(float a, float b, float t)\n{\n    return a + t * (b - a);\n}\n\nvec3 vlerp(vec3 a, vec3 b, float t)\n{\n    return a + t * (b - a);\n}\n\nvec4 Blend( float a, float b, vec3 colorA, vec3 colorB, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    float blendDistance = lerp( b, a, h ) - k*h*(1.0-h);\n    vec3 blendColor = vlerp(colorB,colorA,h);\n    return vec4(blendColor, blendDistance);\n}\n\nsceneReturn combine(float distanceA, float distanceB, vec3 colorA, vec3 colorB, int operation, float smoothness) {\n    //https://github.com/SebLague/Ray-Marching/blob/master/Assets/Scripts/SDF/Raymarching.compute\n    float distance = distanceA;\n    vec3 color = colorA;\n\n    if (operation == 0) {\n        if (distanceB < distanceA) {\n            distance = distanceB;\n            color = colorB;\n        }\n    } \n    // Blend\n    else if (operation == 1) {\n        vec4 blend = Blend(distanceA,distanceB,colorA,colorB, smoothness);\n        distance = blend.w;\n        color = blend.xyz;\n    }\n    // Cut\n    else if (operation == 2) {\n        // max(a,-b)\n        if (-distanceB > distance) {\n            distance = -distanceB;\n            color = colorB;\n        }\n    }\n    // Mask\n    else if (operation == 3) {\n        // max(a,b)\n        if (distanceB > distance) {\n            distance = distanceB;\n            color = colorB;\n        }\n    }\n\n    return sceneReturn(distance,color);\n}\n\n\n\nsceneReturn scene(vec3 p)\n{\n    //returns vec2 where vec2.x is the distance and vec2.y is the object\n    //you can have special materials with negative colors but they will not work with color interpolation, see getmaterial function to see what materials are available\n\n    float smoothness = 1.0;\n\n    //sphere in center\n    vec3 spherePos = vec3(0.0, sin(iTime) * 2.0 - 1.0, 0.0);\n    float sphereRadius = 1.0;\n    vec3 sphereId = vec3(1.0,0.0,0.0);\n    float sphereDist = SDFsphere(p, spherePos, sphereRadius);\n\n   //plane under it\n    vec3 planePos = vec3(0.0, -1.0, 0.0);\n    vec3 planeNormal = vec3(0.0, 1.0, 0.0);\n    vec3 planeId = vec3(1.0,1.0,1.0);\n    float planeDist = SDFplane(p, planePos, planeNormal);\n    \n    //return union\n\n    //smooth union\n    return combine(sphereDist, planeDist, sphereId, planeId, 1, smoothness);\n\n}\n\nsceneReturn rayMarch(vec3 rayOrigin, vec3 rayDirection)\n{\n    //returns vec2 where vec2.x is the distance and vec2.y is the object\n    sceneReturn result;\n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = rayOrigin + rayDirection * result.x;\n        sceneReturn dist = scene(p);\n        result.x += dist.x;\n        result.y = dist.y;\n        if (dist.x < HIT_THRESHOLD || result.x > MAX_DIST)\n        {\n            break;\n        }\n    }\n    return result;\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec2 e = vec2(HIT_THRESHOLD, 0.0);\n    vec3 normal = vec3(\n        scene(p + e.xyy).x - scene(p - e.xyy).x,\n        scene(p + e.yxy).x - scene(p - e.yxy).x,\n        scene(p + e.yyx).x - scene(p - e.yyx).x);\n    return normalize(normal);\n}\n\nvec3 getMaterial(vec3 hitPos, vec3 id)\n{\n    //if no negatives id is color, else its special material\n    if (id.x >= 0.0 && id.y >= 0.0 && id.z >= 0.0)\n    {\n        return id;\n    }\n\n    if (id == vec3(-1.0,-1.0,-1.0))//checkerboard\n    {\n        return vec3(0.2 + 0.4 * mod(floor(hitPos.x) + floor(hitPos.z), 2.0));\n    }\n    else\n    {\n        return vec3(1.0, 1.0, 1.0);\n    }\n}\n\nvec3 light(vec3 hitPos, vec3 rayDirection, vec3 color)\n{\n    vec3 lightPos = vec3(20.0, 30.0, -30.0);\n    vec3 light = normalize(lightPos - hitPos);\n    vec3 normal = getNormal(hitPos);\n    vec3 view = -rayDirection;\n    vec3 reflect = reflect(-light, normal);\n\n    //phong lighting\n\n    vec3 specularColor = vec3(0.5);\n    vec3 specular = specularColor * pow(clamp(dot(reflect, view), 0.0, 1.0), 10.0);\n    vec3 diffuse = color * clamp(dot(light, normal), 0.0, 1.0);\n    vec3 ambient = color * 0.05;\n\n    //shadows\n    //value to fix noise on front of objects\n    float small_number = 0.01;\n    sceneReturn result = rayMarch(hitPos + normal * small_number, light);\n    if (result.x < length(lightPos - hitPos))\n    {\n        return ambient;\n    }\n    \n    return diffuse + ambient + specular;\n\n}\n\nmat3 camera(vec3 rayOrigin, vec3 lookAt)\n{\n    vec3 camForward = normalize(vec3(lookAt - rayOrigin));\n    vec3 camRight = normalize(cross(vec3(0,1,0), camForward));\n    vec3 camUp = cross(camForward, camRight);\n\n    return mat3(camRight,camUp,camForward);\n}\n\nvec3 render(in vec2 uv, in vec3 rayOrigin, in vec3 rayDirection)\n{\n    vec3 background_color = vec3(0.6, 0.9, 1.0);\n    vec3 color = vec3(0.0);\n\n    //raymarch\n    sceneReturn result = rayMarch(rayOrigin, rayDirection);\n    if (result.x < MAX_DIST)\n    {\n        //hit\n        vec3 hitPos = rayOrigin + rayDirection * result.x;\n        vec3 material = getMaterial(hitPos, result.y);\n        color += light(hitPos, rayDirection, material);\n\n        //add fog effect\n        color = mix(color, background_color, 1.0 - exp(-0.0008 * result.x * result.x));\n    }\n    else\n    {\n        color += background_color - max(0.95 * rayDirection.y, 0.0);\n    }\n\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    //normalize coordinate system so that 0,0 is in the center of the screen\n    vec2 uv = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    \n    //color for this pixel\n    vec3 color = vec3(1.0);\n\n    float orbitDistance = 3.0;\n\n    //calculate ray for the camera to this pixel\n    vec3 rayOrigin = vec3(sin(iTime) * orbitDistance, sin(iTime) + 0.1, cos(iTime) * orbitDistance);\n    vec3 lookAtPosition = vec3(0.0,sin(iTime), 0.0);\n\n    vec3 rayDirection = camera(rayOrigin, lookAtPosition) * normalize(vec3(uv, FOV));\n\n    color = render(uv, rayOrigin, rayDirection);\n\n    //post processing\n    \n    //gamma correction\n    color = pow(color, vec3(0.4545));\n\n    //send it out\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}