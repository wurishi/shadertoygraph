{"ver":"0.1","info":{"id":"7ss3DX","date":"1616746899","viewed":610,"name":"Super Mario Kart","username":"linlin64","description":"Use the directional arrows to drive\n\nSprite loading : https://github.com/knarkowicz/ShadertoySprite\nMario sprites : http://www.mariouniverse.com/sprites-snes-smk/\nCar physic : https://asawicki.info/Mirror/Car%20Physics%20for%20Games","likes":15,"published":1,"flags":48,"usePreview":1,"tags":["game","projection","perspective","mario","mode7","mariokart","kart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float SHIFT_TRACK_ONLY_ON_POSITIVE_X = 128.0;\n\nPlayer getPlayer() {\n       // Steer/angle/anglespeed\n       vec4 data1 = texelFetch(iChannel0, ivec2(0,0),0);\n       float steer = data1.x;\n       float angle = data1.y;\n       float angleSpeed = data1.z;\n\n       // Speed\n       vec3 speed = texelFetch(iChannel0, ivec2(1,0),0).xyz;\n       \n       // Position\n       vec3 position = texelFetch(iChannel0, ivec2(2,0),0).xyz;\n\n   //vec4 data = texelFetch(iChannel0, ivec2(0,0),0).xyzw;\n   return Player(vec3(position.x, position.y, position.z), angle);\n}\n\nCamera getCamera() {\n   vec4 data = texelFetch(iChannel1, ivec2(0,0),0).xyzw;\n   return Camera(vec3(data.x, data.y, data.z), data.w);\n}\n\nvoid selectTextureIndexAndFlip(vec4 toadPos, Camera camera, out int textureIndex, out bool flip) {\n    // Camera orientation\n    vec2 camOrientation = vec2(cos(camera.yaw), sin(camera.yaw));\n\n    // Toad orientation\n    vec2 toadOrientation = vec2(cos(toadPos.w), sin(toadPos.w));\n    \n    // Select texture\n    float dotBetweenCamDirAndToadDir = dot(camOrientation, toadOrientation);\n    if (dotBetweenCamDirAndToadDir >= 0.9238) {\n        textureIndex = 0;\n    } else if (dotBetweenCamDirAndToadDir < 0.9238 && dotBetweenCamDirAndToadDir >= 0.3826) {\n        textureIndex = 1;\n    } else if (dotBetweenCamDirAndToadDir < 0.3826 && dotBetweenCamDirAndToadDir >= -0.3826) {\n        textureIndex = 2;\n    } else if (dotBetweenCamDirAndToadDir < -0.3826 && dotBetweenCamDirAndToadDir >= -0.9238) {\n        textureIndex = 3;\n    } else {\n        textureIndex = 4;\n    }\n\n    // Should be flipped\n    vec2 camPerpOrientation = vec2(-camOrientation.y, camOrientation.x);\n    flip = dot(camPerpOrientation, toadOrientation) < 0.0 ? false : true;\n}\n\nbool displayToad(vec4 toadPos, float x, float y, Camera camera, float D, mat2 rotation, float horizon, out vec4 texel) {\n    // Select texture and also if the texture should be flipped\n    bool shouldBeFlipped;\n    int textureIndex;\n    selectTextureIndexAndFlip(toadPos, camera, textureIndex, shouldBeFlipped);\n\n    vec2 speed = texelFetch(iChannel0, ivec2(1,0),0).zx;\n    float derap = texelFetch(iChannel0, ivec2(1,0),0).w;\n    if(derap == 1.0) {\n        textureIndex = 1;\n        \n       vec4 data1 = texelFetch(iChannel0, ivec2(0,0),0);\n       float angle = data1.y;\n       vec2 headcarperp = vec2(-sin(angle),cos(angle));\n       if (dot(headcarperp, speed) > 0.0) {\n            shouldBeFlipped = true;\n       } else {\n            shouldBeFlipped = false;\n       }\n    }\n\n\n    // Get toad screen position\n    vec2 toadShiftCam = vec2(camera.pos.x - toadPos.x, camera.pos.z - toadPos.z);\n    vec2 toadrot = toadShiftCam * rotation;\n    float tempToadScreenX = D * toadrot.x / toadrot.y;\n    float tempToadScreenY = camera.pos.y * D / toadrot.y + horizon;\n    \n    // Zoom factor to width/height texture\n    float squareDistFromCamera = toadShiftCam.x*toadShiftCam.x + toadShiftCam.y*toadShiftCam.y;\n    float invratio = 0.3 + (squareDistFromCamera-64.0) * 0.2/324.0;\n\n    // Right position on screen\n    vec2 toadScreenPosition = vec2(floor((tempToadScreenX - x)*invratio+15.0), floor((tempToadScreenY - y)*invratio));\n\n    if(displayToad(shouldBeFlipped, textureIndex, ivec2(toadScreenPosition), texel)) {\n        return true;\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 screenHalfSize = iResolution.xy * 0.5;\n\n    float x = screenHalfSize.x - fragCoord.x;\n    float y = iResolution.y - fragCoord.y;\n\n    float horizon = screenHalfSize.y;\n    float D = screenHalfSize.y;\n\n    Player player = getPlayer();\n\n    vec2 toadCameraShift;\n    toadCameraShift.x = sin(player.yaw) * 8.0;\n    toadCameraShift.y = cos(player.yaw) * 8.0;\n    \n    Camera camera = getCamera();\n\n    float c = cos(camera.yaw);\n    float s = sin(camera.yaw);\n\n    mat2 rotation = mat2(vec2(c, -s), vec2(s, c));\n\n    if (y < horizon) {\n        // sky\n        fragColor = vec4(0.635,0.749,0.969,1);\n        return;\n    } else {\n        // Projection mode7\n        float delta = camera.pos.y / (y - horizon);\n        vec2 textureTemp = vec2(x, D) * delta;        \n\n        vec2 uv = rotation * textureTemp - camera.pos.xz;\n        uv.x += SHIFT_TRACK_ONLY_ON_POSITIVE_X;\n        vec2 flooruv = vec2(floor(uv.x), floor(128.0-uv.y));\n        fragColor = getPixel(ivec2(flooruv));\n    }\n\n    // Controlled player\n    vec4 firstPlayer = vec4(player.pos.xyz, player.yaw);\n\n    // 1st computer\n    vec3 pos2 = texelFetch(iChannel0, ivec2(5,0),0).xyz;\n    float angle2 = texelFetch(iChannel0, ivec2(3,0),0).y;\n    vec4 secondPlayer = vec4(pos2, angle2);\n\n    // 2nd computer\n    vec3 pos3 = texelFetch(iChannel0, ivec2(8,0),0).xyz;\n    float angle3 = texelFetch(iChannel0, ivec2(6,0),0).y;\n    vec4 thirdPlayer = vec4(pos3, angle3);\n\n    // Compute square toad distance from camera\n    vec4 pos[3];\n    float dist[3];\n    pos[0] = firstPlayer;\n    pos[1] = secondPlayer;\n    pos[2] = thirdPlayer;\n    /*vec3 campos[3];\n    for (int i = 0; i < 3; ++i) {\n        campos[i] = pos[i].xyz - camera.pos;\n        vec3 ps = campos[i];\n        dist[i] = ps.x * ps.x + ps.y * ps.y + ps.z * ps.z;\n    }*/\n\n    // Sort Toads\n    vec4 ord = texelFetch(iChannel2, ivec2(3,0),0).xyzw;\n    int order[3];\n    order[0] = int(ord.x);\n    order[1] = int(ord.y);\n    order[2] = int(ord.z);\n    /*bool swapped = true;\n    int j = 0;\n    float tmp;\n    for (int c = 0; c < 3; c--)\n    {\n        if (!swapped)\n            break;\n        swapped = false;\n        j++;\n        for (int i = 0; i < 3; i++)\n        {\n            if (i >= 3 - j)\n                break;\n            if (dist[i] < dist[i + 1])\n            {\n                tmp = dist[i];\n                dist[i] = dist[i + 1];\n                dist[i + 1] = tmp;\n                swapped = true;\n\n                int temp = order[i];\n                order[i] = order[i + 1];\n                order[i + 1] = temp;\n            }\n        }\n    }*/\n\n    // Display Toads\n    for(int i = 0; i < 3; ++i) {\n        /*if (i != 0) {\n            continue;\n        }*/\n    \n        vec4 position = pos[order[i]];\n        vec4 texel;\n        if (displayToad(position, x, y, camera, D, rotation, horizon, texel)) {\n            // Rolling palette\n            if (order[i] == 1) {\n                if(texel.x > 0.90 && texel.y < 0.5 && texel.z < 0.5) {\n                    texel = vec4(1.0, 1.0, 0.0, 1.0);\n                }\n            }\n            if (order[i] == 2) {\n                if(texel.x > 0.90 && texel.y < 0.5 && texel.z < 0.5) {\n                    texel = vec4(0.0, 1.0, 0.0, 1.0);\n                }\n            }\n            fragColor = texel;\n        }\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Handle player and computer position, orientation and moving\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nconst vec2 checkpoints[12] = vec2[] (\n    vec2(128 - 459/4, -259/4),\n    vec2(128 - 455/4, -202/4),\n    vec2(128 - 109/4, -32/4),\n    vec2(128 - 60/4, -48/4),\n    vec2(128 - 35/4, -95/4),\n    vec2(128 - 41/4, -347/4),\n    vec2(128 - 77/4, -368/4),\n    vec2(128 - 242/4, -294/4),\n    vec2(128 - 275/4, -307/4),\n    vec2(128 - 353/4, -442/4),\n    vec2(128 - 427/4, -459/4),\n    vec2(128 - 469/4, -423/4)\n);\nconst int checkpointNumber = 12;\n\nconst vec4 startComputerPositionAndOrientation[] = vec4[] (\n    vec4(12, 0, -73, 3.14),\n    vec4(12, 0, -79, 3.14)\n);\n\nconst vec4 startPlayerPositionAndOrientation = vec4(9,0,-76,3.14);\n\nconst float velocityByFrame = 0.3;\n\nconst float minimalSquareDistToGoToNextCheckpoint = 10.0;\n\nbool isPressed(int key) {\n   return bool(texelFetch( iChannel0, ivec2(key,0),0 ).x);\n}\n\nbool updateComputer(vec2 fragCoord, int idx, out vec4 color) {\n    int index = idx;\n    float indexfloat = float(index);\n    if (fragCoord.x >= indexfloat && fragCoord.x < indexfloat + 3.0\n        && fragCoord.y >= 0.0 && fragCoord.y < 1.0) {\n        // Get computer position and orientation\n        //vec4 data = texelFetch(iChannel1, ivec2(index,0),0);\n        vec2 shift = texelFetch(iChannel3, ivec2(idx/3,0),0).xy;\n\n       //vec4 data1 = texelFetch(iChannel1, ivec2(index,0),0);\n       //float angle = data1.y;\n\n       vec3 position = texelFetch(iChannel1, ivec2(index + 2,0),0).xyz;\n\n        // Get game state\n        int gameState = int(texelFetch(iChannel2, ivec2(1,0),0).y);\n\n        // Get targeted checkpoint index\n        int targetedCheckpointIndex = int(texelFetch(iChannel1, ivec2(index + 1,0),0 ).x);\n\n        // Initialise position, orientation and targeted checkpoint\n        if (position.x == 0.0) {\n            position = startComputerPositionAndOrientation[idx/3-1].xyz;\n            targetedCheckpointIndex = 1;\n        }\n\n        // Get targeted checkpoint position\n        vec2 targetedCheckpointPosition = checkpoints[targetedCheckpointIndex];\n        \n        // Moving to targetedCheckpointPosition\n        vec2 dir = targetedCheckpointPosition - position.xz;\n        vec2 normalizedDir = normalize(dir);\n        if (gameState == 2) {\n            position.xz += normalizedDir * velocityByFrame;\n        }\n        position.xz += shift;\n\n        // Compute computer angle\n        vec2 angleZeroDir = vec2(0,-1);\n        vec2 perpAngleZeroDir = vec2(-angleZeroDir.y, angleZeroDir.x);\n        vec2 dirAfterMoving = targetedCheckpointPosition - position.xz;\n        vec2 normalizedDirAfterMoving = normalize(dirAfterMoving);\n        float angle = acos(dot(normalizedDirAfterMoving, angleZeroDir));\n        bool isRightSide = dot(normalizedDirAfterMoving, perpAngleZeroDir) > 0.0 ? true : false;\n        if (isRightSide) {\n            angle = -angle;\n        }\n\n        // Check whether computer should target next checkpoint\n        float squareDist = dirAfterMoving.x * dirAfterMoving.x + dirAfterMoving.y * dirAfterMoving.y;\n        if (squareDist < minimalSquareDistToGoToNextCheckpoint) {\n            targetedCheckpointIndex += 1;\n            if (targetedCheckpointIndex >= checkpointNumber) {\n               targetedCheckpointIndex = 0;\n            }\n        }\n\n        // Save position and orientation\n        /*if (fragCoord.x >= indexfloat && fragCoord.x < indexfloat + 1.0\n            && fragCoord.y >= 0.0 && fragCoord.y < 1.0) {\n            color = data;\n            return true;\n        }*/\n       if (fragCoord.x >= indexfloat && fragCoord.x < indexfloat + 1.0\n           && fragCoord.y >= 0.0 && fragCoord.y < 1.0) {\n           color = vec4(0, angle, 0, 0.0);\n           return true;\n       }\n       /*if (fragCoord.x >= indexfloat + 1.0 && fragCoord.x < indexfloat + 2.0\n           && fragCoord.y >= 0.0 && fragCoord.y < 1.0) {\n           color = vec4(0);//vec4(speed, derap);\n           return true;\n       }*/\n       if (fragCoord.x >= indexfloat + 2.0 && fragCoord.x < indexfloat + 3.0\n           && fragCoord.y >= 0.0 && fragCoord.y < 1.0) {\n           color = vec4(position, 0.0);\n           return true;\n       }\n        \n        // Save next checkpoint\n        if (fragCoord.x >= indexfloat + 1.0 && fragCoord.x < indexfloat+2.0\n            && fragCoord.y >= 0.0 && fragCoord.y < 1.0) {\n            color = vec4(targetedCheckpointIndex,0,0,0);\n            return true;\n        }\n    }\n    return false;\n}\n\nbool updatePlayer(vec2 fragCoord, out vec4 color) {\n   if (fragCoord.x >= 0.0 && fragCoord.x < 3.0\n       && fragCoord.y >= 0.0 && fragCoord.y < 1.0) {\n       // Steer/angle/anglespeed\n       vec4 data1 = texelFetch(iChannel1, ivec2(0,0),0);\n       float steer = data1.x;\n       float angle = data1.y;\n       float angleSpeed = data1.z;\n\n       // Speed\n       vec3 speed = texelFetch(iChannel1, ivec2(1,0),0).xyz;\n       \n       // Position\n       vec3 position = texelFetch(iChannel1, ivec2(2,0),0).xyz;\n\n       // Collision other players and walls\n       vec2 shift = texelFetch(iChannel3, ivec2(0,0),0).xy;\n\n       // Get game state\n       int gameState = int(texelFetch(iChannel2, ivec2(1,0),0).y);\n       \n       float derap = 0.0;\n\n       \n       vec3 playerPos = vec3(position.x, 0, position.y);\n       if (playerPos.x == 0.0) {\n           steer = 0.0;\n           angle = -3.14;\n           angleSpeed = 0.0;\n\n           speed = vec3(0,0,0);\n\n            position = vec3(9.0,0,-76.0);\n       }\n       \n       if (gameState == 2) {\n           float gravity = 9.81;\n           float mass = 1200.0;\n           float inertiaScale = 1.0;\n           float cgToFrontAxle = 1.25;\n           float cgToRearAxle = 1.25;\n           float tireGrip = 10.0;\n           float engineForce = 8000.0;\n           float maxSteer = 0.6;\n           float cornerStiffnessFront = 10.0;\n           float cornerStiffnessRear = 10.2;\n           float airResist = 2.5;\n           float rollResist = 8.0;\n\n           float inertia = mass * inertiaScale;\n           float wheelBase = cgToFrontAxle + cgToRearAxle;\n           float axleWeightRatioFront = cgToRearAxle / wheelBase; // % car weight on the front axle\n           float axleWeightRatioRear = cgToFrontAxle / wheelBase; // % car weight on the rear axle\n\n           float sn = sin(angle);\n           float cs = cos(angle);\n           \n           vec2 LocalVelocity;\n           LocalVelocity.x = cs * speed.z + sn * speed.x;\n           LocalVelocity.y = -sn * speed.z + cs * speed.x;\n\n           float axleWeightFront = mass * (axleWeightRatioFront * gravity);\n           float axleWeightRear = mass * (axleWeightRatioRear * gravity);\n\n           float yawSpeedFront = cgToFrontAxle * angleSpeed;\n           float yawSpeedRear = -cgToRearAxle * angleSpeed;\n\n           float steerInput = 0.0;\n           if(isPressed(KEY_RIGHT)) {\n               steerInput = 1.0;\n           } else if(isPressed(KEY_LEFT)) {\n               steerInput = -1.0;\n           }\n\n            float steertemp = 0.0;\n            float dt1 = iTimeDelta;\n\n            if( abs(steerInput) > 0.001 )\n            {\n                //  Move toward steering input\n                steertemp = clamp(steer + steerInput * dt1 * 2.0, -1.0, 1.0); // -inp.right, inp.left);\n            }\n            else\n            {\n                //  No steer input - move toward centre (0)\n                if( steer > 0.0 )\n                {\n                    steertemp = max(steer - dt1 * 1.0, 0.);\n                }\n                else if( steer  < 0.0 )\n                {\n                    steertemp = min(steer + dt1 * 1.0, 0.);\n                }\n            }\n            \n            float avel = min(length(speed), 250.0f);  // m/s\n            steer = steertemp * (1.0 - (avel / 280.0));\n            \n            float steerAngle = steer * maxSteer;\n\n/*yawSpeedFront =0.0;\nyawSpeedRear =0.0;\nLocalVelocity.x =0.0;\nLocalVelocity.y =0.0;*/\n            float slipAngleFront = 0.0;\n            float slipAngleRear = 0.0;\n            if (LocalVelocity.x != 0.0) {\n                slipAngleFront = atan(LocalVelocity.y + yawSpeedFront, abs(LocalVelocity.x)) - sign(LocalVelocity.x) * steerAngle;\n                slipAngleRear  = atan(LocalVelocity.y + yawSpeedRear,  abs(LocalVelocity.x));\n            }\n\n            float tireGripFront = tireGrip;\n            float tireGripRear = tireGrip;\n            \n           float frictionForceFront_cy = clamp(-cornerStiffnessFront * slipAngleFront, -tireGripFront, tireGripFront) * axleWeightFront;\n           float frictionForceRear_cy = clamp(-cornerStiffnessRear * slipAngleRear, -tireGripRear, tireGripRear) * axleWeightRear;\n\n           float throttle = 0.0;\n           if(isPressed(KEY_UP)) {\n               throttle = -1.0;\n           } else if(isPressed(KEY_DOWN)) {\n               throttle = 1.0;\n           }\n           \n           float throttleengine = throttle * engineForce;\n\n            float tractionForce_cx = throttleengine;// - brake * GMath.sign(this.velocity_c.x);\n            float tractionForce_cy = 0.0;\n\n            float dragForce_cx = -rollResist * LocalVelocity.x - airResist * LocalVelocity.x * abs(LocalVelocity.x);\n            float dragForce_cy = -rollResist * LocalVelocity.y - airResist * LocalVelocity.y * abs(LocalVelocity.y);\n\n            float totalForce_cx = dragForce_cx + tractionForce_cx;\n            float totalForce_cy = dragForce_cy + tractionForce_cy + cos(steerAngle) * frictionForceFront_cy + frictionForceRear_cy;\n\n            if (isSandPixel(ivec2(128.0-position.x, 128.0+position.z))) {\n                totalForce_cx += -25.0 * LocalVelocity.x * abs(LocalVelocity.x); \n                totalForce_cy += -25.0 * LocalVelocity.y * abs(LocalVelocity.y);\n            }\n\n            vec2 accellocal;\n            accellocal.x = totalForce_cx / mass;  // forward/reverse accel\n            accellocal.y = totalForce_cy / mass;  // sideways accel\n\n            float test= (tractionForce_cy + cos(steerAngle) * frictionForceFront_cy + frictionForceRear_cy)/mass;\n            if (abs(test) > 20.0) {\n                derap = 1.0;\n            } else {\n                derap = 0.0;\n            }\n\n\n            // acceleration in world coordinates\n            vec2 accelworld;\n            accelworld.x = cs * accellocal.x - sn * accellocal.y;\n            accelworld.y = sn * accellocal.x + cs * accellocal.y;\n\n            float dt = iTimeDelta;\n            // update velocity\n            vec3 newSpeed = speed;\n            newSpeed.x += accelworld.y * dt;\n            newSpeed.z += accelworld.x * dt;\n\n            float angularTorque = (frictionForceFront_cy * cos(steerAngle) + tractionForce_cy) * cgToFrontAxle - frictionForceRear_cy * cgToRearAxle;\n\n            float angularAccel = angularTorque / inertia;\n\n            float newAngleSpeed = angleSpeed;\n            newAngleSpeed += angularAccel * dt;\n            float newAngle = angle;\n            newAngle += newAngleSpeed * dt;\n            \n            vec3 newPosition = position;\n            newPosition.x += newSpeed.x * dt;\n            newPosition.z += newSpeed.z * dt;\n\n            vec2 uv1 = vec2(128.0-newPosition.x, 128.0+newPosition.z);\n            /*vec2 uv2 = vec2(newPosition.x - 2.0, newPosition.z + 0.8);\n            vec2 uv3 = vec2(newPosition.x + 2.0, newPosition.z - 0.8);\n            vec2 uv4 = vec2(newPosition.x - 2.0, newPosition.z - 0.8);*/\n            /*bool t1 = isBoundryPixel(ivec2(uv1));*/\n            /*bool t2 = isBoundryPixel(ivec2(uv2));\n            bool t3 = isBoundryPixel(ivec2(uv3));\n            bool t4 = isBoundryPixel(ivec2(newPosition.xz));*/\n            if (isBoundryPixel(ivec2(uv1))\n             /*|| isBoundryPixel(ivec2(uv2))\n             || isBoundryPixel(ivec2(uv3))\n             || isBoundryPixel(ivec2(uv4))*/) {\n                //position -= speed * 0.016;\n                speed.x = 0.0;\n                speed.z = 0.0;\n                angleSpeed = 0.0;\n                //vec2 playerDir = vec2(sin(newAngle), cos(newAngle));\n                //shift += playerDir * 1.0;\n            } else {\n                if(length(speed) < 1.0 && throttle == 0.0 )\n                {\n                    speed.x = 0.0;\n                    speed.y = 0.0;\n                    speed.z = 0.0;\n                    angleSpeed = 0.0;\n                } else {\n                    speed = newSpeed;\n                    position = newPosition;\n                    angleSpeed = newAngleSpeed;\n                    angle = newAngle;\n                }\n            }\n       }\n       \n       position.xz += shift;\n\n       if (fragCoord.x >= 0.0 && fragCoord.x < 1.0\n           && fragCoord.y >= 0.0 && fragCoord.y < 1.0) {\n           color = vec4(steer, angle, angleSpeed, 0.0);\n           return true;\n       }\n       if (fragCoord.x >= 1.0 && fragCoord.x < 2.0\n           && fragCoord.y >= 0.0 && fragCoord.y < 1.0) {\n           color = vec4(speed, derap);\n           return true;\n       }\n       if (fragCoord.x >= 2.0 && fragCoord.x < 3.0\n           && fragCoord.y >= 0.0 && fragCoord.y < 1.0) {\n           color = vec4(position, 0.0);\n           return true;\n       }\n       //color = data;\n       return true;\n   }\n   return false;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n   vec4 color;\n   if (updatePlayer(fragCoord, color)) {\n       fragColor = color;\n       return;\n   }\n   if (updateComputer(fragCoord, 3, color)) {\n       fragColor = color;\n       return;\n   }\n   if (updateComputer(fragCoord, 6, color)) {\n       fragColor = color;\n       return;\n   }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Handle camera et game state\n\nPlayer getPlayer() {\n       // Steer/angle/anglespeed\n       vec4 data1 = texelFetch(iChannel0, ivec2(0,0),0);\n       float steer = data1.x;\n       float angle = data1.y;\n       float angleSpeed = data1.z;\n\n       // Speed\n       vec3 speed = texelFetch(iChannel0, ivec2(1,0),0).xyz;\n       \n       // Position\n       vec3 position = texelFetch(iChannel0, ivec2(2,0),0).xyz;\n\n   //vec4 data = texelFetch(iChannel0, ivec2(0,0),0).xyzw;\n   return Player(vec3(position.x, position.y, position.z), angle);\n}\n\nCamera getCamera() {\n   vec4 data = texelFetch(iChannel1, ivec2(0,0),0).xyzw;\n   return Camera(vec3(data.x, data.y, data.z), data.w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.x >= 0.0 && fragCoord.x < 2.0\n        && fragCoord.y >= 0.0 && fragCoord.y < 1.0) {\n        Player player = getPlayer();\n\n        vec4 camera = texelFetch(iChannel1, ivec2(0,0),0).xyzw;\n        vec2 info = texelFetch(iChannel1, ivec2(1,0),0).xy;\n        int pathNextIndex = int(info.x);\n        int state = int(info.y);\n\n        if (camera.x == 0.0) {\n            camera = vec4(10,5,-30,0);\n            pathNextIndex = 1;\n            state = 0;\n        }\n\n        if (state == 0) {\n            // Camera moving\n            vec3 point = vec3(player.pos.xyz) + vec3(-sin(player.yaw) * 8.0, 5.0, -cos(player.yaw) * 8.0);\n            \n            vec3 camToTarget = point - camera.xyz;\n            vec3 norm = normalize(camToTarget);\n            camera.xyz += norm * 0.3;\n\n            vec3 newCamToTarget = point - camera.xyz;\n            float squareDist = newCamToTarget.x * newCamToTarget.x + newCamToTarget.y * newCamToTarget.y;\n            if (squareDist < 0.01) {\n                state = 1;\n            }\n        } else if (state == 1) {\n            camera.w += 0.05;\n            if (camera.w > 3.14) {\n                state = 2;\n            }\n            vec2 toadCameraShift;\n            toadCameraShift.x = sin(camera.w) * 8.0;\n            toadCameraShift.y = cos(camera.w) * 8.0;\n\n            camera.xz = player.pos.xz + toadCameraShift;\n            camera.y = 5.0;\n        } else {\n            vec2 toadCameraShift;\n            toadCameraShift.x = sin(player.yaw) * 8.0;\n            toadCameraShift.y = cos(player.yaw) * 8.0;\n\n            camera.w = player.yaw;\n            camera.xz = player.pos.xz + toadCameraShift;\n            camera.y = 5.0;\n        }\n\n        if (fragCoord.x >= 0.0 && fragCoord.x < 1.0\n            && fragCoord.y >= 0.0 && fragCoord.y < 1.0) {\n            fragColor = camera;\n            return;\n        }\n        if (fragCoord.x >= 1.0 && fragCoord.x < 2.0\n            && fragCoord.y >= 0.0 && fragCoord.y < 1.0) {\n            fragColor = vec4(0, state, 0, 0);\n            return;\n        }\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Handle collision\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 camera = texelFetch(iChannel2, ivec2(0,0),0).xyzw;\n\n    int xint = int(fragCoord.x);\n    int yint = int(fragCoord.y);\n    \n    if(xint >= 4 || yint > 0) {\n        return;\n    }\n    \n    vec4 pos[3];\n    for(int i = 0; i < 3; ++i) { \n        pos[i] = texelFetch(iChannel0, ivec2(i * 3+2,0),0);\n    }\n\n    if (xint < 3) {\n        vec2 shift = vec2(0,0);\n\n        /*// Boundary\n        vec2 uv = pos[xint].xz;\n        uv.y = uv.y+128.0;\n        uv.x = 128.0-uv.x;\n        if (isBoundryPixel(ivec2(uv))) {\n            vec2 playerDir = vec2(sin(pos[xint].w), cos(pos[xint].w));\n            shift += playerDir * 1.0;\n        }*/\n\n        // Between players\n        for(int i = 0; i < 3; ++i) {\n            if (i == xint) {\n                continue;\n            }\n\n            vec2 vector = pos[xint].xz - pos[i].xz;\n            float squaredist = vector.x * vector.x + vector.y * vector.y;\n            if (squaredist < 1.0) {\n                vec2 norm = normalize(vector);\n                shift += (sqrt(squaredist) * norm)/2.0;\n            }\n        }\n\n        fragColor = vec4(shift.x,shift.y,0.0,0.0);\n        return;\n    }\n    \n    if (xint == 3) {\n        // Compute square toad distance from camera\n        float dist[3];\n        vec3 campos[3];\n        for (int i = 0; i < 3; ++i) {\n            campos[i] = pos[i].xyz - camera.xyz;\n            vec3 ps = campos[i];\n            dist[i] = ps.x * ps.x + ps.y * ps.y + ps.z * ps.z;\n        }\n\n        // Sort Toads\n        int order[3];\n        order[0] = 0;\n        order[1] = 1;\n        order[2] = 2;\n    \n        bool swapped = true;\n        int j = 0;\n        float tmp;\n        for (int c = 0; c < 3; c--)\n        {\n            if (!swapped)\n                break;\n            swapped = false;\n            j++;\n            for (int i = 0; i < 3; i++)\n            {\n                if (i >= 3 - j)\n                    break;\n                if (dist[i] < dist[i + 1])\n                {\n                    tmp = dist[i];\n                    dist[i] = dist[i + 1];\n                    dist[i + 1] = tmp;\n                    swapped = true;\n\n                    int temp = order[i];\n                    order[i] = order[i + 1];\n                    order[i + 1] = temp;\n                }\n            }\n        }\n        \n        fragColor = vec4(order[0], order[1], order[2], 0.0);\n    }\n\n }","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"void displayBackKart(inout vec3 color, vec2 p)\n{\n    uint v = 0u;\n\tv = p.y == 31. ? 0u : v;\n\tv = p.y == 30. ? 0u : v;\n\tv = p.y == 29. ? (p.x < 8. ? 0u : (p.x < 16. ? 286261248u : (p.x < 24. ? 1u : 0u))) : v;\n\tv = p.y == 28. ? (p.x < 8. ? 0u : (p.x < 16. ? 1717637120u : (p.x < 24. ? 278u : 0u))) : v;\n\tv = p.y == 27. ? (p.x < 8. ? 0u : (p.x < 16. ? 1718014224u : (p.x < 24. ? 73062u : 0u))) : v;\n\tv = p.y == 26. ? (p.x < 8. ? 0u : (p.x < 16. ? 1718017489u : (p.x < 24. ? 1957222u : 0u))) : v;\n\tv = p.y == 25. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 1718476134u : (p.x < 24. ? 23518678u : 0u))) : v;\n\tv = p.y == 24. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 3722304870u : (p.x < 24. ? 23518685u : 0u))) : v;\n\tv = p.y == 23. ? (p.x < 8. ? 1627389952u : (p.x < 16. ? 3722304870u : (p.x < 24. ? 375840221u : 0u))) : v;\n\tv = p.y == 22. ? (p.x < 8. ? 1627389952u : (p.x < 16. ? 1725816278u : (p.x < 24. ? 376298973u : 0u))) : v;\n\tv = p.y == 21. ? (p.x < 8. ? 1627389952u : (p.x < 16. ? 1718476246u : (p.x < 24. ? 376298966u : 0u))) : v;\n\tv = p.y == 20. ? (p.x < 8. ? 1627389952u : (p.x < 16. ? 1718017501u : (p.x < 24. ? 383638886u : 0u))) : v;\n\tv = p.y == 19. ? (p.x < 8. ? 3238002688u : (p.x < 16. ? 1718017501u : (p.x < 24. ? 484302182u : 0u))) : v;\n\tv = p.y == 18. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 1718017500u : (p.x < 24. ? 30268774u : 0u))) : v;\n\tv = p.y == 17. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 1718476236u : (p.x < 24. ? 30203350u : 0u))) : v;\n\tv = p.y == 16. ? (p.x < 8. ? 0u : (p.x < 16. ? 1724697793u : (p.x < 24. ? 1887436u : 0u))) : v;\n\tv = p.y == 15. ? (p.x < 8. ? 0u : (p.x < 16. ? 3435970832u : (p.x < 24. ? 72908u : 0u))) : v;\n\tv = p.y == 14. ? (p.x < 8. ? 0u : (p.x < 16. ? 286331136u : (p.x < 24. ? 4369u : 0u))) : v;\n\tv = p.y == 13. ? (p.x < 8. ? 0u : (p.x < 16. ? 2290649872u : (p.x < 24. ? 112776u : 0u))) : v;\n\tv = p.y == 12. ? (p.x < 8. ? 0u : (p.x < 16. ? 1431657393u : (p.x < 24. ? 1815893u : 0u))) : v;\n\tv = p.y == 11. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 286349755u : (p.x < 24. ? 29070609u : 0u))) : v;\n\tv = p.y == 10. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 1717965209u : (p.x < 24. ? 26808678u : 0u))) : v;\n\tv = p.y == 9. ? (p.x < 8. ? 286261248u : (p.x < 16. ? 859006481u : (p.x < 24. ? 286352947u : 1u))) : v;\n\tv = p.y == 8. ? (p.x < 8. ? 3346071552u : (p.x < 16. ? 1145324572u : (p.x < 24. ? 2093040708u : 23u))) : v;\n\tv = p.y == 7. ? (p.x < 8. ? 3239121152u : (p.x < 16. ? 286331153u : (p.x < 24. ? 470880529u : 4369u))) : v;\n\tv = p.y == 6. ? (p.x < 8. ? 393705232u : (p.x < 16. ? 3435973649u : (p.x < 24. ? 1896991948u : 96119u))) : v;\n\tv = p.y == 5. ? (p.x < 8. ? 340018192u : (p.x < 16. ? 858923458u : (p.x < 24. ? 1093407267u : 83012u))) : v;\n\tv = p.y == 4. ? (p.x < 8. ? 286331152u : (p.x < 16. ? 3435971020u : (p.x < 24. ? 298589388u : 69905u))) : v;\n\tv = p.y == 3. ? (p.x < 8. ? 286331152u : (p.x < 16. ? 572662218u : (p.x < 24. ? 296489506u : 69905u))) : v;\n\tv = p.y == 2. ? (p.x < 8. ? 286331152u : (p.x < 16. ? 572694982u : (p.x < 24. ? 292297250u : 69905u))) : v;\n\tv = p.y == 1. ? (p.x < 8. ? 286331152u : (p.x < 16. ? 3435971379u : (p.x < 24. ? 288570572u : 69905u))) : v;\n\tv = p.y == 0. ? (p.x < 8. ? 17895680u : (p.x < 16. ? 286331153u : (p.x < 24. ? 269553937u : 4369u))) : v;\n    v = p.x >= 0. && p.x < 30. ? v : 0u;\n\n    float i = float((v >> uint(4. * p.x)) & 15u);\n    color = i == 1. ? vec3(0, 0.16, 0.16) : color;\n    color = i == 2. ? vec3(0.47, 0, 0) : color;\n    color = i == 3. ? vec3(0.63, 0, 0) : color;\n    color = i == 4. ? vec3(0.16, 0.28, 0.28) : color;\n    color = i == 5. ? vec3(0, 0, 0.88) : color;\n    color = i == 6. ? vec3(0.97, 0, 0) : color;\n    color = i == 7. ? vec3(0.28, 0.41, 0.41) : color;\n    color = i == 8. ? vec3(0, 0.5, 0.97) : color;\n    color = i == 9. ? vec3(0.66, 0.47, 0.35) : color;\n    color = i == 10. ? vec3(0.38, 0.97, 0.38) : color;\n    color = i == 11. ? vec3(0.88, 0.66, 0.53) : color;\n    color = i == 12. ? vec3(0.78, 0.91, 0.91) : color;\n    color = i == 13. ? vec3(0.97) : color;\n}\n\nvoid displaySideBackKart(inout vec3 color, vec2 p)\n{\n    uint v = 0u;\n\tv = p.y == 31. ? (p.x < 8. ? 0u : (p.x < 16. ? 285212672u : (p.x < 24. ? 17u : 0u))) : v;\n\tv = p.y == 30. ? (p.x < 8. ? 0u : (p.x < 16. ? 1712390144u : (p.x < 24. ? 4582u : 0u))) : v;\n\tv = p.y == 29. ? (p.x < 8. ? 0u : (p.x < 16. ? 3865448704u : (p.x < 24. ? 1175278u : 0u))) : v;\n\tv = p.y == 28. ? (p.x < 8. ? 0u : (p.x < 16. ? 3999688208u : (p.x < 24. ? 31878894u : 0u))) : v;\n\tv = p.y == 27. ? (p.x < 8. ? 0u : (p.x < 16. ? 4008078864u : (p.x < 24. ? 23488238u : 0u))) : v;\n\tv = p.y == 26. ? (p.x < 8. ? 0u : (p.x < 16. ? 4008636129u : (p.x < 24. ? 375809646u : 0u))) : v;\n\tv = p.y == 25. ? (p.x < 8. ? 0u : (p.x < 16. ? 4008636129u : (p.x < 24. ? 375809646u : 0u))) : v;\n\tv = p.y == 24. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 4008633966u : (p.x < 24. ? 3597035118u : 1u))) : v;\n\tv = p.y == 23. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 4008601190u : (p.x < 24. ? 3597035246u : 1u))) : v;\n\tv = p.y == 22. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 4008076902u : (p.x < 24. ? 3731255022u : 1u))) : v;\n\tv = p.y == 21. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 4008076902u : (p.x < 24. ? 502197998u : 0u))) : v;\n\tv = p.y == 20. ? (p.x < 8. ? 0u : (p.x < 16. ? 4008076897u : (p.x < 24. ? 501149422u : 0u))) : v;\n\tv = p.y == 19. ? (p.x < 8. ? 0u : (p.x < 16. ? 4008601185u : (p.x < 24. ? 18734574u : 0u))) : v;\n\tv = p.y == 18. ? (p.x < 8. ? 0u : (p.x < 16. ? 3740198416u : (p.x < 24. ? 29433309u : 0u))) : v;\n\tv = p.y == 17. ? (p.x < 8. ? 0u : (p.x < 16. ? 3722301696u : (p.x < 24. ? 30056721u : 0u))) : v;\n\tv = p.y == 16. ? (p.x < 8. ? 0u : (p.x < 16. ? 286330880u : (p.x < 24. ? 1118489u : 0u))) : v;\n\tv = p.y == 15. ? (p.x < 8. ? 0u : (p.x < 16. ? 1503236352u : (p.x < 24. ? 117925u : 0u))) : v;\n\tv = p.y == 14. ? (p.x < 8. ? 0u : (p.x < 16. ? 1431655696u : (p.x < 24. ? 1887397u : 0u))) : v;\n\tv = p.y == 13. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 1431638289u : (p.x < 24. ? 30198949u : 0u))) : v;\n\tv = p.y == 12. ? (p.x < 8. ? 1627389952u : (p.x < 16. ? 1431397990u : (p.x < 24. ? 449628693u : 0u))) : v;\n\tv = p.y == 11. ? (p.x < 8. ? 907018240u : (p.x < 16. ? 1427518259u : (p.x < 24. ? 296395093u : 0u))) : v;\n\tv = p.y == 10. ? (p.x < 8. ? 286331136u : (p.x < 16. ? 1427391505u : (p.x < 24. ? 772871509u : 4370u))) : v;\n\tv = p.y == 9. ? (p.x < 8. ? 3715594000u : (p.x < 16. ? 1410404829u : (p.x < 24. ? 786240853u : 100210u))) : v;\n\tv = p.y == 8. ? (p.x < 8. ? 567559184u : (p.x < 16. ? 1373494578u : (p.x < 24. ? 584126737u : 84034u))) : v;\n\tv = p.y == 7. ? (p.x < 8. ? 3520139536u : (p.x < 16. ? 487728093u : (p.x < 24. ? 571766647u : 120850u))) : v;\n\tv = p.y == 6. ? (p.x < 8. ? 567349520u : (p.x < 16. ? 488496418u : (p.x < 24. ? 289948740u : 99345u))) : v;\n\tv = p.y == 5. ? (p.x < 8. ? 2983268624u : (p.x < 16. ? 487727650u : (p.x < 24. ? 3779334417u : 82206u))) : v;\n\tv = p.y == 4. ? (p.x < 8. ? 3709931776u : (p.x < 16. ? 488317661u : (p.x < 24. ? 290263313u : 4369u))) : v;\n\tv = p.y == 3. ? (p.x < 8. ? 285212672u : (p.x < 16. ? 333307153u : (p.x < 24. ? 21500177u : 0u))) : v;\n\tv = p.y == 2. ? (p.x < 8. ? 0u : (p.x < 16. ? 269553920u : (p.x < 24. ? 1315089u : 0u))) : v;\n\tv = p.y == 1. ? (p.x < 8. ? 0u : (p.x < 16. ? 0u : (p.x < 24. ? 69905u : 0u))) : v;\n\tv = p.y == 0. ? 0u : v;\n    v = p.x >= 0. && p.x < 30. ? v : 0u;\n\n    float i = float((v >> uint(4. * p.x)) & 15u);\n    color = i == 1. ? vec3(0, 0.16, 0.16) : color;\n    color = i == 2. ? vec3(0.47, 0, 0) : color;\n    color = i == 3. ? vec3(0.63, 0, 0) : color;\n    color = i == 4. ? vec3(0.16, 0.28, 0.28) : color;\n    color = i == 5. ? vec3(0, 0, 0.88) : color;\n    color = i == 6. ? vec3(0.97, 0, 0) : color;\n    color = i == 7. ? vec3(0.28, 0.41, 0.41) : color;\n    color = i == 8. ? vec3(0.47) : color;\n    color = i == 9. ? vec3(0, 0.5, 0.97) : color;\n    color = i == 10. ? vec3(0.66, 0.47, 0.35) : color;\n    color = i == 11. ? vec3(0.38, 0.97, 0.38) : color;\n    color = i == 12. ? vec3(0.88, 0.66, 0.53) : color;\n    color = i == 13. ? vec3(0.78, 0.91, 0.91) : color;\n    color = i == 14. ? vec3(0.97) : color;\n}\n\nvoid displaySideKart(inout vec3 color, vec2 p)\n{\n    uint v = 0u;\n\tv = p.y == 31. ? (p.x < 8. ? 0u : (p.x < 16. ? 286261248u : 0u)) : v;\n\tv = p.y == 30. ? (p.x < 8. ? 0u : (p.x < 16. ? 3721465856u : (p.x < 24. ? 17u : 0u))) : v;\n\tv = p.y == 29. ? (p.x < 8. ? 0u : (p.x < 16. ? 3722301712u : (p.x < 24. ? 4573u : 0u))) : v;\n\tv = p.y == 28. ? (p.x < 8. ? 0u : (p.x < 16. ? 3597065569u : (p.x < 24. ? 91869u : 0u))) : v;\n\tv = p.y == 27. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 1717988822u : (p.x < 24. ? 1498589u : 0u))) : v;\n\tv = p.y == 26. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 1717987037u : (p.x < 24. ? 1498582u : 0u))) : v;\n\tv = p.y == 25. ? (p.x < 8. ? 3506438144u : (p.x < 16. ? 1717987037u : (p.x < 24. ? 23977430u : 0u))) : v;\n\tv = p.y == 24. ? (p.x < 8. ? 1627389952u : (p.x < 16. ? 1717987037u : (p.x < 24. ? 30268886u : 0u))) : v;\n\tv = p.y == 23. ? (p.x < 8. ? 1712324608u : (p.x < 16. ? 1717988829u : (p.x < 24. ? 30203357u : 0u))) : v;\n\tv = p.y == 22. ? (p.x < 8. ? 1712324608u : (p.x < 16. ? 3597065693u : (p.x < 24. ? 1887709u : 0u))) : v;\n\tv = p.y == 21. ? (p.x < 8. ? 1712324608u : (p.x < 16. ? 3722304989u : (p.x < 24. ? 1121485u : 0u))) : v;\n\tv = p.y == 20. ? (p.x < 8. ? 1627389952u : (p.x < 16. ? 3453869533u : (p.x < 24. ? 1642780u : 0u))) : v;\n\tv = p.y == 19. ? (p.x < 8. ? 3238002688u : (p.x < 16. ? 483253725u : (p.x < 24. ? 1645457u : 0u))) : v;\n\tv = p.y == 18. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 2434588124u : (p.x < 24. ? 1686459u : 0u))) : v;\n\tv = p.y == 17. ? (p.x < 8. ? 0u : (p.x < 16. ? 2568080577u : (p.x < 24. ? 72635u : 0u))) : v;\n\tv = p.y == 16. ? (p.x < 8. ? 0u : (p.x < 16. ? 286920976u : (p.x < 24. ? 104857u : 0u))) : v;\n\tv = p.y == 15. ? (p.x < 8. ? 0u : (p.x < 16. ? 2612109568u : (p.x < 24. ? 4369u : 0u))) : v;\n\tv = p.y == 14. ? (p.x < 8. ? 0u : (p.x < 16. ? 3149470224u : (p.x < 24. ? 4539u : 0u))) : v;\n\tv = p.y == 13. ? (p.x < 8. ? 1114112u : (p.x < 16. ? 3149470224u : (p.x < 24. ? 105403u : 0u))) : v;\n\tv = p.y == 12. ? (p.x < 8. ? 23465984u : (p.x < 16. ? 2576438689u : (p.x < 24. ? 104891u : 0u))) : v;\n\tv = p.y == 11. ? (p.x < 8. ? 372510720u : (p.x < 16. ? 286610769u : (p.x < 24. ? 17961369u : 0u))) : v;\n\tv = p.y == 10. ? (p.x < 8. ? 323230912u : (p.x < 16. ? 357913941u : (p.x < 24. ? 371335697u : 0u))) : v;\n\tv = p.y == 9. ? (p.x < 8. ? 286376208u : (p.x < 16. ? 3512030549u : (p.x < 24. ? 371335901u : 17u))) : v;\n\tv = p.y == 8. ? (p.x < 8. ? 393294640u : (p.x < 16. ? 3243595089u : (p.x < 24. ? 308421324u : 375u))) : v;\n\tv = p.y == 7. ? (p.x < 8. ? 1145511104u : (p.x < 16. ? 3423670545u : (p.x < 24. ? 1896943900u : 5956u))) : v;\n\tv = p.y == 6. ? (p.x < 8. ? 1216626992u : (p.x < 16. ? 286820372u : (p.x < 24. ? 1142458497u : 84100u))) : v;\n\tv = p.y == 5. ? (p.x < 8. ? 2168996144u : (p.x < 16. ? 2290933012u : (p.x < 24. ? 1142808024u : 98632u))) : v;\n\tv = p.y == 4. ? (p.x < 8. ? 2227716544u : (p.x < 16. ? 3722261268u : (p.x < 24. ? 286331165u : 99528u))) : v;\n\tv = p.y == 3. ? (p.x < 8. ? 2361934080u : (p.x < 16. ? 286331156u : (p.x < 24. ? 285212673u : 6273u))) : v;\n\tv = p.y == 2. ? (p.x < 8. ? 1216614400u : (p.x < 16. ? 1u : (p.x < 24. ? 268435456u : 273u))) : v;\n\tv = p.y == 1. ? (p.x < 8. ? 286326784u : 0u) : v;\n\tv = p.y == 0. ? 0u : v;\n    v = p.x >= 0. && p.x < 30. ? v : 0u;\n\n    float i = float((v >> uint(4. * p.x)) & 15u);\n    color = i == 1. ? vec3(0, 0.16, 0.16) : color;\n    color = i == 2. ? vec3(0.47, 0, 0) : color;\n    color = i == 3. ? vec3(0.63, 0, 0) : color;\n    color = i == 4. ? vec3(0.16, 0.28, 0.28) : color;\n    color = i == 5. ? vec3(0, 0, 0.88) : color;\n    color = i == 6. ? vec3(0.97, 0, 0) : color;\n    color = i == 7. ? vec3(0.28, 0.41, 0.41) : color;\n    color = i == 8. ? vec3(0.47) : color;\n    color = i == 9. ? vec3(0.66, 0.47, 0.35) : color;\n    color = i == 10. ? vec3(0, 0.5, 0.97) : color;\n    color = i == 11. ? vec3(0.88, 0.66, 0.53) : color;\n    color = i == 12. ? vec3(0.78, 0.91, 0.91) : color;\n    color = i == 13. ? vec3(0.97) : color;\n}\n\nvoid displaySideFrontKart(inout vec3 color, vec2 p)\n{\n    uint v = 0u;\n\tv = p.y == 31. ? (p.x < 8. ? 0u : (p.x < 16. ? 285212672u : (p.x < 24. ? 1u : 0u))) : v;\n\tv = p.y == 30. ? (p.x < 8. ? 0u : (p.x < 16. ? 3423666176u : (p.x < 24. ? 284u : 0u))) : v;\n\tv = p.y == 29. ? (p.x < 8. ? 0u : (p.x < 16. ? 1825313024u : (p.x < 24. ? 71270u : 0u))) : v;\n\tv = p.y == 28. ? (p.x < 8. ? 0u : (p.x < 16. ? 1724697616u : (p.x < 24. ? 1861222u : 0u))) : v;\n\tv = p.y == 27. ? (p.x < 8. ? 0u : (p.x < 16. ? 1724696161u : (p.x < 24. ? 29779558u : 0u))) : v;\n\tv = p.y == 26. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 1825334886u : (p.x < 24. ? 29779558u : 0u))) : v;\n\tv = p.y == 25. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 3435947622u : (p.x < 24. ? 382494310u : 0u))) : v;\n\tv = p.y == 24. ? (p.x < 8. ? 1627389952u : (p.x < 16. ? 3435947622u : (p.x < 24. ? 382520524u : 0u))) : v;\n\tv = p.y == 23. ? (p.x < 8. ? 1627389952u : (p.x < 16. ? 3435972198u : (p.x < 24. ? 483183820u : 0u))) : v;\n\tv = p.y == 22. ? (p.x < 8. ? 2969567232u : (p.x < 16. ? 3150761062u : (p.x < 24. ? 466402235u : 0u))) : v;\n\tv = p.y == 21. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 297516236u : (p.x < 24. ? 466293009u : 0u))) : v;\n\tv = p.y == 20. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 420592571u : (p.x < 24. ? 28414361u : 0u))) : v;\n\tv = p.y == 19. ? (p.x < 8. ? 0u : (p.x < 16. ? 446241713u : (p.x < 24. ? 28418474u : 0u))) : v;\n\tv = p.y == 18. ? (p.x < 8. ? 0u : (p.x < 16. ? 2863304976u : (p.x < 24. ? 1157802u : 0u))) : v;\n\tv = p.y == 17. ? (p.x < 8. ? 0u : (p.x < 16. ? 447385856u : (p.x < 24. ? 106922u : 0u))) : v;\n\tv = p.y == 16. ? (p.x < 8. ? 0u : (p.x < 16. ? 2862157824u : (p.x < 24. ? 72209u : 0u))) : v;\n\tv = p.y == 15. ? (p.x < 8. ? 0u : (p.x < 16. ? 2568069376u : (p.x < 24. ? 18487705u : 0u))) : v;\n\tv = p.y == 14. ? (p.x < 8. ? 0u : (p.x < 16. ? 296397328u : (p.x < 24. ? 447320337u : 0u))) : v;\n\tv = p.y == 13. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 430614801u : (p.x < 24. ? 429464234u : 0u))) : v;\n\tv = p.y == 12. ? (p.x < 8. ? 1627389952u : (p.x < 16. ? 429494550u : (p.x < 24. ? 290527513u : 1u))) : v;\n\tv = p.y == 11. ? (p.x < 8. ? 822083584u : (p.x < 16. ? 286332241u : (p.x < 24. ? 1897500945u : 23u))) : v;\n\tv = p.y == 10. ? (p.x < 8. ? 856756480u : (p.x < 16. ? 2568050001u : (p.x < 24. ? 297570705u : 4372u))) : v;\n\tv = p.y == 9. ? (p.x < 8. ? 293041936u : (p.x < 16. ? 2446071125u : (p.x < 24. ? 2988577057u : 83009u))) : v;\n\tv = p.y == 8. ? (p.x < 8. ? 289686593u : (p.x < 16. ? 465285461u : (p.x < 24. ? 572592678u : 1537809u))) : v;\n\tv = p.y == 7. ? (p.x < 8. ? 286345281u : (p.x < 16. ? 287027473u : (p.x < 24. ? 3138462241u : 1328145u))) : v;\n\tv = p.y == 6. ? (p.x < 8. ? 286344321u : (p.x < 16. ? 1145115016u : (p.x < 24. ? 572242708u : 1118491u))) : v;\n\tv = p.y == 5. ? (p.x < 8. ? 3239136129u : (p.x < 16. ? 2005145628u : (p.x < 24. ? 572662343u : 1118491u))) : v;\n\tv = p.y == 4. ? (p.x < 8. ? 286332944u : (p.x < 16. ? 1212619969u : (p.x < 24. ? 1713512980u : 69910u))) : v;\n\tv = p.y == 3. ? (p.x < 8. ? 1118464u : (p.x < 16. ? 347541776u : (p.x < 24. ? 291923473u : 1u))) : v;\n\tv = p.y == 2. ? (p.x < 8. ? 0u : (p.x < 16. ? 293670912u : (p.x < 24. ? 1118481u : 0u))) : v;\n\tv = p.y == 1. ? (p.x < 8. ? 0u : (p.x < 16. ? 286261248u : (p.x < 24. ? 1u : 0u))) : v;\n\tv = p.y == 0. ? 0u : v;\n    v = p.x >= 0. && p.x < 30. ? v : 0u;\n\n    float i = float((v >> uint(4. * p.x)) & 15u);\n    color = i == 1. ? vec3(0, 0.16, 0.16) : color;\n    color = i == 2. ? vec3(0.47, 0, 0) : color;\n    color = i == 3. ? vec3(0.63, 0, 0) : color;\n    color = i == 4. ? vec3(0.16, 0.28, 0.28) : color;\n    color = i == 5. ? vec3(0, 0, 0.88) : color;\n    color = i == 6. ? vec3(0.97, 0, 0) : color;\n    color = i == 7. ? vec3(0.28, 0.41, 0.41) : color;\n    color = i == 8. ? vec3(0.47) : color;\n    color = i == 9. ? vec3(0.66, 0.47, 0.35) : color;\n    color = i == 10. ? vec3(0.88, 0.66, 0.53) : color;\n    color = i == 11. ? vec3(0.78, 0.91, 0.91) : color;\n    color = i == 12. ? vec3(0.97) : color;\n}\n\nvoid displayFrontKart(inout vec3 color, vec2 p)\n{\n    uint v = 0u;\n\tv = p.y == 31. ? 0u : v;\n\tv = p.y == 30. ? 0u : v;\n\tv = p.y == 29. ? (p.x < 8. ? 0u : (p.x < 16. ? 286326784u : 0u)) : v;\n\tv = p.y == 28. ? (p.x < 8. ? 0u : (p.x < 16. ? 1431638272u : (p.x < 24. ? 17u : 0u))) : v;\n\tv = p.y == 27. ? (p.x < 8. ? 0u : (p.x < 16. ? 1431657233u : (p.x < 24. ? 4533u : 0u))) : v;\n\tv = p.y == 26. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 1431657403u : (p.x < 24. ? 113589u : 0u))) : v;\n\tv = p.y == 25. ? (p.x < 8. ? 1358954496u : (p.x < 16. ? 1431657403u : (p.x < 24. ? 1424309u : 0u))) : v;\n\tv = p.y == 24. ? (p.x < 8. ? 1358954496u : (p.x < 16. ? 1431681973u : (p.x < 24. ? 1399739u : 0u))) : v;\n\tv = p.y == 23. ? (p.x < 8. ? 1427111936u : (p.x < 16. ? 3149642677u : (p.x < 24. ? 22371259u : 0u))) : v;\n\tv = p.y == 22. ? (p.x < 8. ? 1427111936u : (p.x < 16. ? 2863311803u : (p.x < 24. ? 22395834u : 0u))) : v;\n\tv = p.y == 21. ? (p.x < 8. ? 1427111936u : (p.x < 16. ? 286333627u : (p.x < 24. ? 22395809u : 0u))) : v;\n\tv = p.y == 20. ? (p.x < 8. ? 3037724672u : (p.x < 16. ? 428970411u : (p.x < 24. ? 22788633u : 0u))) : v;\n\tv = p.y == 19. ? (p.x < 8. ? 2969567232u : (p.x < 16. ? 428971802u : (p.x < 24. ? 1810809u : 0u))) : v;\n\tv = p.y == 18. ? (p.x < 8. ? 2701131776u : (p.x < 16. ? 2576979729u : (p.x < 24. ? 1708409u : 0u))) : v;\n\tv = p.y == 17. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 2434374001u : (p.x < 24. ? 71577u : 0u))) : v;\n\tv = p.y == 16. ? (p.x < 8. ? 0u : (p.x < 16. ? 304191857u : (p.x < 24. ? 6041u : 0u))) : v;\n\tv = p.y == 15. ? (p.x < 8. ? 0u : (p.x < 16. ? 357669136u : (p.x < 24. ? 409u : 0u))) : v;\n\tv = p.y == 14. ? (p.x < 8. ? 0u : (p.x < 16. ? 2434373393u : (p.x < 24. ? 4473u : 0u))) : v;\n\tv = p.y == 13. ? (p.x < 8. ? 268435456u : (p.x < 16. ? 2039968153u : (p.x < 24. ? 104727u : 0u))) : v;\n\tv = p.y == 12. ? (p.x < 8. ? 1895825408u : (p.x < 16. ? 286333337u : (p.x < 24. ? 1546641u : 0u))) : v;\n\tv = p.y == 11. ? (p.x < 8. ? 1895825408u : (p.x < 16. ? 2576947607u : (p.x < 24. ? 1538449u : 0u))) : v;\n\tv = p.y == 10. ? (p.x < 8. ? 285212672u : (p.x < 16. ? 1897338737u : (p.x < 24. ? 1120113u : 0u))) : v;\n\tv = p.y == 9. ? (p.x < 8. ? 1091637520u : (p.x < 16. ? 286368020u : (p.x < 24. ? 286540058u : 273u))) : v;\n\tv = p.y == 8. ? (p.x < 8. ? 291923553u : (p.x < 16. ? 2971382202u : (p.x < 24. ? 1712433947u : 5734u))) : v;\n\tv = p.y == 7. ? (p.x < 8. ? 288568113u : (p.x < 16. ? 286335514u : (p.x < 24. ? 856793378u : 4915u))) : v;\n\tv = p.y == 6. ? (p.x < 8. ? 2165379345u : (p.x < 16. ? 554836513u : (p.x < 24. ? 286790178u : 4369u))) : v;\n\tv = p.y == 5. ? (p.x < 8. ? 2167616273u : (p.x < 16. ? 554836513u : (p.x < 24. ? 857215522u : 4403u))) : v;\n\tv = p.y == 4. ? (p.x < 8. ? 291923473u : (p.x < 16. ? 2702879402u : (p.x < 24. ? 1712433834u : 4454u))) : v;\n\tv = p.y == 3. ? (p.x < 8. ? 1362309905u : (p.x < 16. ? 554836522u : (p.x < 24. ? 857055778u : 4403u))) : v;\n\tv = p.y == 2. ? (p.x < 8. ? 1360072976u : (p.x < 16. ? 572662298u : (p.x < 24. ? 286630178u : 273u))) : v;\n\tv = p.y == 1. ? (p.x < 8. ? 286331152u : (p.x < 16. ? 1431655765u : (p.x < 24. ? 286348629u : 273u))) : v;\n\tv = p.y == 0. ? (p.x < 8. ? 1118464u : (p.x < 16. ? 286331153u : (p.x < 24. ? 285217041u : 17u))) : v;\n    v = p.x >= 0. && p.x < 30. ? v : 0u;\n\n    float i = float((v >> uint(4. * p.x)) & 15u);\n    color = i == 1. ? vec3(0, 0.16, 0.16) : color;\n    color = i == 2. ? vec3(0.47, 0, 0) : color;\n    color = i == 3. ? vec3(0.16, 0.28, 0.28) : color;\n    color = i == 4. ? vec3(0, 0, 0.88) : color;\n    color = i == 5. ? vec3(0.97, 0, 0) : color;\n    color = i == 6. ? vec3(0.28, 0.41, 0.41) : color;\n    color = i == 7. ? vec3(0.66, 0.47, 0.35) : color;\n    color = i == 8. ? vec3(0.38, 0.97, 0.38) : color;\n    color = i == 9. ? vec3(0.88, 0.66, 0.53) : color;\n    color = i == 10. ? vec3(0.78, 0.91, 0.91) : color;\n    color = i == 11. ? vec3(0.97) : color;\n}\n\nbool displayToad(bool flip, int texturetest, in ivec2 uv, out vec4 texel){\n    if(uv.x >= 0 \n        && uv.x < 30 \n        && uv.y >= 0 \n        && uv.y < 30) {\n        if (flip) {\n            uv.x = 29-uv.x;\n        }\n        vec3 color = vec3(1,0,1);\n        if (texturetest == 0) {\n            displayBackKart(color, vec2(uv));\n        } else if (texturetest == 1) {\n            displaySideBackKart(color, vec2(uv));\n        } else if (texturetest == 2) {\n            displaySideKart(color, vec2(uv));\n        } else if (texturetest == 3) {\n            displaySideFrontKart(color, vec2(uv));\n        } else {\n            displayFrontKart(color, vec2(uv));\n        }\n        if (color.x == 1.0 && color.z == 1.0) {\n            return false;\n        }\n        texel = vec4(color, 1.0);\n        return true;\n    }\n    return false;\n}\n\nvoid Track(inout vec3 color, vec2 p)\n{\n    uint v = 0u;\n\tv = p.y == 127. ? (p.x < 8. ? 858989090u : (p.x < 16. ? 1145359564u : (p.x < 24. ? 858989090u : (p.x < 32. ? 1145359564u : (p.x < 40. ? 858989090u : (p.x < 48. ? 1145359564u : (p.x < 56. ? 858989090u : (p.x < 64. ? 1145359564u : (p.x < 72. ? 1145359564u : (p.x < 80. ? 858989090u : (p.x < 88. ? 1145359564u : (p.x < 96. ? 286466594u : 286331153u)))))))))))) : v;\n\tv = p.y == 126. ? (p.x < 8. ? 2290649220u : (p.x < 16. ? 2290649224u : (p.x < 24. ? 2290649224u : (p.x < 32. ? 2290649224u : (p.x < 40. ? 2290649224u : (p.x < 48. ? 2290649224u : (p.x < 56. ? 2290649224u : (p.x < 64. ? 2290649224u : (p.x < 72. ? 2290649224u : (p.x < 80. ? 2290649224u : (p.x < 88. ? 2290649224u : (p.x < 96. ? 286492808u : 286331153u)))))))))))) : v;\n\tv = p.y == 125. ? (p.x < 8. ? 2863311492u : (p.x < 16. ? 2863311530u : (p.x < 24. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286501546u : 286331153u)))))))))))) : v;\n\tv = p.y == 124. ? (p.x < 8. ? 2863311492u : (p.x < 16. ? 2863311530u : (p.x < 24. ? 2005580458u : (p.x < 32. ? 2826401655u : (p.x < 40. ? 2863311531u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286501546u : 286331153u)))))))))))) : v;\n\tv = p.y == 123. ? (p.x < 8. ? 2863311492u : (p.x < 16. ? 2863311530u : (p.x < 24. ? 1431656378u : (p.x < 32. ? 1431655765u : (p.x < 40. ? 2863311733u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 287091370u : 286331153u)))))))))))) : v;\n\tv = p.y == 122. ? (p.x < 8. ? 2863311500u : (p.x < 16. ? 3131746986u : (p.x < 24. ? 1431655767u : (p.x < 32. ? 1431655765u : (p.x < 40. ? 2863363413u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 287091370u : 286331153u)))))))))))) : v;\n\tv = p.y == 121. ? (p.x < 8. ? 2863311500u : (p.x < 16. ? 1521134250u : (p.x < 24. ? 1431655765u : (p.x < 32. ? 1431655765u : (p.x < 40. ? 2876593493u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 287091370u : 286331153u)))))))))))) : v;\n\tv = p.y == 120. ? (p.x < 8. ? 2863311500u : (p.x < 16. ? 1437248170u : (p.x < 24. ? 1431655765u : (p.x < 32. ? 1431655765u : (p.x < 40. ? 1968526677u : (p.x < 48. ? 2863311531u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 287091370u : 286331153u)))))))))))) : v;\n\tv = p.y == 119. ? (p.x < 8. ? 2863311500u : (p.x < 16. ? 1432005290u : (p.x < 24. ? 1431655765u : (p.x < 32. ? 1431655765u : (p.x < 40. ? 1431655765u : (p.x < 48. ? 2863311733u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286567082u : 286331153u)))))))))))) : v;\n\tv = p.y == 118. ? (p.x < 8. ? 2863311491u : (p.x < 16. ? 1431677610u : (p.x < 24. ? 1431655765u : (p.x < 32. ? 1431655765u : (p.x < 40. ? 1431655765u : (p.x < 48. ? 2863363413u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286567082u : 286331153u)))))))))))) : v;\n\tv = p.y == 117. ? (p.x < 8. ? 2863311491u : (p.x < 16. ? 1431657130u : (p.x < 24. ? 1431655765u : (p.x < 32. ? 1431655765u : (p.x < 40. ? 1431655765u : (p.x < 48. ? 2876593493u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286567082u : 286331153u)))))))))))) : v;\n\tv = p.y == 116. ? (p.x < 8. ? 2863311491u : (p.x < 16. ? 1431655866u : (p.x < 24. ? 1431655765u : (p.x < 32. ? 1431655765u : (p.x < 40. ? 1431655765u : (p.x < 48. ? 1968526677u : (p.x < 56. ? 2863311531u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286567082u : 286331153u)))))))))))) : v;\n\tv = p.y == 115. ? (p.x < 8. ? 2863311491u : (p.x < 16. ? 1431655802u : (p.x < 24. ? 1431655765u : (p.x < 32. ? 1431655765u : (p.x < 40. ? 1431655765u : (p.x < 48. ? 1431655765u : (p.x < 56. ? 2863311733u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286436010u : 286331153u)))))))))))) : v;\n\tv = p.y == 114. ? (p.x < 8. ? 2863311490u : (p.x < 16. ? 1431655771u : (p.x < 24. ? 1431655765u : (p.x < 32. ? 1431795573u : (p.x < 40. ? 1431655765u : (p.x < 48. ? 1431655765u : (p.x < 56. ? 2863363413u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286436010u : 286331153u)))))))))))) : v;\n\tv = p.y == 113. ? (p.x < 8. ? 2863311490u : (p.x < 16. ? 1431655767u : (p.x < 24. ? 3681899861u : (p.x < 32. ? 2916998621u : (p.x < 40. ? 1431655767u : (p.x < 48. ? 1438995797u : (p.x < 56. ? 2876593605u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286436010u : 286331153u)))))))))))) : v;\n\tv = p.y == 112. ? (p.x < 8. ? 3131746946u : (p.x < 16. ? 1431655765u : (p.x < 24. ? 2881332565u : (p.x < 32. ? 3148524202u : (p.x < 40. ? 1431656411u : (p.x < 48. ? 1431655765u : (p.x < 56. ? 1968526677u : (p.x < 64. ? 2863311531u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286436010u : 286331153u)))))))))))) : v;\n\tv = p.y == 111. ? (p.x < 8. ? 2058005122u : (p.x < 16. ? 1431655765u : (p.x < 24. ? 2863324501u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 1431821738u : (p.x < 48. ? 3310703957u : (p.x < 56. ? 1431655765u : (p.x < 64. ? 2863311733u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286501546u : 286331153u)))))))))))) : v;\n\tv = p.y == 110. ? (p.x < 8. ? 1537911428u : (p.x < 16. ? 1431655765u : (p.x < 24. ? 2863311573u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 1474144938u : (p.x < 48. ? 1431655765u : (p.x < 56. ? 1431655765u : (p.x < 64. ? 2863363413u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286501546u : 286331153u)))))))))))) : v;\n\tv = p.y == 109. ? (p.x < 8. ? 1521134212u : (p.x < 16. ? 1431655765u : (p.x < 24. ? 2863311547u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 3182078634u : (p.x < 48. ? 1438995799u : (p.x < 56. ? 1431655877u : (p.x < 64. ? 2876593493u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286501546u : 286331153u)))))))))))) : v;\n\tv = p.y == 108. ? (p.x < 8. ? 1487579780u : (p.x < 16. ? 1431655765u : (p.x < 24. ? 2863311533u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 1431656378u : (p.x < 56. ? 1431655765u : (p.x < 64. ? 1968526684u : (p.x < 72. ? 2863311531u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 3435375274u : (p.x < 104. ? 572802124u : (p.x < 112. ? 3435344690u : (p.x < 120. ? 572802124u : 3435344690u))))))))))))))) : v;\n\tv = p.y == 107. ? (p.x < 8. ? 1470802564u : (p.x < 16. ? 1968526677u : (p.x < 24. ? 3435834027u : (p.x < 32. ? 572802124u : (p.x < 40. ? 2863310898u : (p.x < 48. ? 1431812778u : (p.x < 56. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 72. ? 2863311733u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 2290657962u : (p.x < 104. ? 2290649224u : (p.x < 112. ? 2290649224u : (p.x < 120. ? 2290649224u : 3364391048u))))))))))))))) : v;\n\tv = p.y == 106. ? (p.x < 8. ? 1438296716u : (p.x < 16. ? 3579139413u : (p.x < 24. ? 272280235u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310897u : (p.x < 48. ? 1471851178u : (p.x < 56. ? 1549096277u : (p.x < 64. ? 1431657564u : (p.x < 72. ? 2863363413u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 1252698794u))))))))))))))) : v;\n\tv = p.y == 105. ? (p.x < 8. ? 1437248140u : (p.x < 16. ? 3579139413u : (p.x < 24. ? 289057450u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310897u : (p.x < 48. ? 3131746986u : (p.x < 56. ? 1431655767u : (p.x < 64. ? 1431655765u : (p.x < 72. ? 2876593493u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 1252698794u))))))))))))))) : v;\n\tv = p.y == 104. ? (p.x < 8. ? 1435150988u : (p.x < 16. ? 3579139413u : (p.x < 24. ? 289057450u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310897u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 1431656378u : (p.x < 64. ? 3310703964u : (p.x < 72. ? 1968555349u : (p.x < 80. ? 2863311531u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 1252698794u))))))))))))))) : v;\n\tv = p.y == 103. ? (p.x < 8. ? 1434102412u : (p.x < 16. ? 3075822933u : (p.x < 24. ? 289057450u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863311041u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 1431812778u : (p.x < 64. ? 1431655765u : (p.x < 72. ? 1431655765u : (p.x < 80. ? 2863311733u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 1252698794u))))))))))))))) : v;\n\tv = p.y == 102. ? (p.x < 8. ? 1434102403u : (p.x < 16. ? 3075822933u : (p.x < 24. ? 288008874u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863311041u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 1471851178u : (p.x < 64. ? 1431655765u : (p.x < 72. ? 1431655877u : (p.x < 80. ? 2863363413u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 715827882u))))))))))))))) : v;\n\tv = p.y == 101. ? (p.x < 8. ? 1434102403u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 288008874u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863311041u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 3131746986u : (p.x < 64. ? 1431655767u : (p.x < 72. ? 1431655765u : (p.x < 80. ? 2876593493u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 715827882u))))))))))))))) : v;\n\tv = p.y == 100. ? (p.x < 8. ? 1434102403u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 288008874u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863311041u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 3310704570u : (p.x < 72. ? 1431684437u : (p.x < 80. ? 1968526677u : (p.x < 88. ? 2863311531u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 715827882u))))))))))))))) : v;\n\tv = p.y == 99. ? (p.x < 8. ? 1434102403u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 288008874u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310913u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 1431812778u : (p.x < 72. ? 1431655765u : (p.x < 80. ? 1431655877u : (p.x < 88. ? 2863311733u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 715827882u))))))))))))))) : v;\n\tv = p.y == 98. ? (p.x < 8. ? 1434102402u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 290106026u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310913u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 1471851178u : (p.x < 72. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 88. ? 2863363413u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 984263338u))))))))))))))) : v;\n\tv = p.y == 97. ? (p.x < 8. ? 2004527746u : (p.x < 16. ? 2809624439u : (p.x < 24. ? 290106026u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310913u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 3131746986u : (p.x < 72. ? 3310703959u : (p.x < 80. ? 1431684549u : (p.x < 88. ? 2876593493u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 984263338u))))))))))))))) : v;\n\tv = p.y == 96. ? (p.x < 8. ? 2004527746u : (p.x < 16. ? 2809624439u : (p.x < 24. ? 290106026u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310913u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 1431656378u : (p.x < 80. ? 1431655765u : (p.x < 88. ? 1968526677u : (p.x < 96. ? 2863311531u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 984263338u))))))))))))))) : v;\n\tv = p.y == 95. ? (p.x < 8. ? 2625284738u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 290106026u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310881u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 1431812778u : (p.x < 80. ? 1431655877u : (p.x < 88. ? 1431655765u : (p.x < 96. ? 2863311733u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 984263338u))))))))))))))) : v;\n\tv = p.y == 94. ? (p.x < 8. ? 1719315076u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 298494634u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310881u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 1471851178u : (p.x < 80. ? 1431655765u : (p.x < 88. ? 1431655765u : (p.x < 96. ? 2863363413u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 3400182442u))))))))))))))) : v;\n\tv = p.y == 93. ? (p.x < 8. ? 2004527748u : (p.x < 16. ? 2809624476u : (p.x < 24. ? 298494634u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310881u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 3131746986u : (p.x < 80. ? 1431655767u : (p.x < 88. ? 1431655765u : (p.x < 96. ? 2876593493u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 3400182442u))))))))))))))) : v;\n\tv = p.y == 92. ? (p.x < 8. ? 2004527748u : (p.x < 16. ? 2809633894u : (p.x < 24. ? 298494634u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310881u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 1431656378u : (p.x < 88. ? 1431655765u : (p.x < 96. ? 1968526677u : (p.x < 104. ? 2863311531u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 3400182442u))))))))))))))) : v;\n\tv = p.y == 91. ? (p.x < 8. ? 2625284740u : (p.x < 16. ? 2807391829u : (p.x < 24. ? 298494634u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310897u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 1431812778u : (p.x < 88. ? 1431655765u : (p.x < 96. ? 1431655765u : (p.x < 104. ? 2863311733u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 3400182442u))))))))))))))) : v;\n\tv = p.y == 90. ? (p.x < 8. ? 1719315084u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 289057450u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310897u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 1471851178u : (p.x < 88. ? 1431655765u : (p.x < 96. ? 1431655765u : (p.x < 104. ? 2863363413u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 1252698794u))))))))))))))) : v;\n\tv = p.y == 89. ? (p.x < 8. ? 2004527756u : (p.x < 16. ? 2812049271u : (p.x < 24. ? 289057450u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310897u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 3131746986u : (p.x < 88. ? 1431655767u : (p.x < 96. ? 1431655765u : (p.x < 104. ? 2876593493u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 1252698794u))))))))))))))) : v;\n\tv = p.y == 88. ? (p.x < 8. ? 2004527756u : (p.x < 16. ? 2808510364u : (p.x < 24. ? 289057450u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310897u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 1431656378u : (p.x < 96. ? 1431655765u : (p.x < 104. ? 1968526677u : (p.x < 112. ? 2863311531u : (p.x < 120. ? 2863311530u : 1252698794u))))))))))))))) : v;\n\tv = p.y == 87. ? (p.x < 8. ? 1434102412u : (p.x < 16. ? 2807387494u : (p.x < 24. ? 289057450u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863311041u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 1431812778u : (p.x < 96. ? 1431655765u : (p.x < 104. ? 1431655765u : (p.x < 112. ? 2863311733u : (p.x < 120. ? 2863311530u : 1252698794u))))))))))))))) : v;\n\tv = p.y == 86. ? (p.x < 8. ? 1434102403u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 288008874u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863311041u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 1471851178u : (p.x < 96. ? 1431655765u : (p.x < 104. ? 1431655765u : (p.x < 112. ? 2863363413u : (p.x < 120. ? 2863311530u : 715827882u))))))))))))))) : v;\n\tv = p.y == 85. ? (p.x < 8. ? 2625284739u : (p.x < 16. ? 2812049271u : (p.x < 24. ? 288008874u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863311041u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 3131746986u : (p.x < 96. ? 1431655767u : (p.x < 104. ? 1431655765u : (p.x < 112. ? 2876593493u : (p.x < 120. ? 2863311530u : 715827882u))))))))))))))) : v;\n\tv = p.y == 84. ? (p.x < 8. ? 1719315075u : (p.x < 16. ? 2808510327u : (p.x < 24. ? 288008874u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863311041u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 1431656378u : (p.x < 104. ? 1431655765u : (p.x < 112. ? 1968526677u : (p.x < 120. ? 2863311531u : 715827882u))))))))))))))) : v;\n\tv = p.y == 83. ? (p.x < 8. ? 1434102403u : (p.x < 16. ? 2807388613u : (p.x < 24. ? 288008874u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310913u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 1431812778u : (p.x < 104. ? 1431655765u : (p.x < 112. ? 1431655765u : (p.x < 120. ? 2863311733u : 715827882u))))))))))))))) : v;\n\tv = p.y == 82. ? (p.x < 8. ? 1434102402u : (p.x < 16. ? 2807387749u : (p.x < 24. ? 290106026u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310913u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 1471851178u : (p.x < 104. ? 1431655765u : (p.x < 112. ? 1431655765u : (p.x < 120. ? 2863363413u : 984263338u))))))))))))))) : v;\n\tv = p.y == 81. ? (p.x < 8. ? 2625284738u : (p.x < 16. ? 2812049271u : (p.x < 24. ? 290106026u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310913u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 3131746986u : (p.x < 104. ? 1431655767u : (p.x < 112. ? 1431655765u : (p.x < 120. ? 2862962005u : 984263338u))))))))))))))) : v;\n\tv = p.y == 80. ? (p.x < 8. ? 1719315074u : (p.x < 16. ? 2808510327u : (p.x < 24. ? 290106026u : (p.x < 32. ? 286331153u : (p.x < 40. ? 857875009u : (p.x < 48. ? 1154272307u : (p.x < 56. ? 857875012u : (p.x < 64. ? 1154272307u : (p.x < 72. ? 857875012u : (p.x < 80. ? 1154272307u : (p.x < 88. ? 2820809284u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 1431656378u : (p.x < 112. ? 1431655765u : (p.x < 120. ? 2857719125u : 984263338u))))))))))))))) : v;\n\tv = p.y == 79. ? (p.x < 8. ? 1434102402u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 290106026u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 286331153u : (p.x < 72. ? 286331153u : (p.x < 80. ? 286331153u : (p.x < 88. ? 2821787921u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 1431812778u : (p.x < 112. ? 1431655765u : (p.x < 120. ? 2773833045u : 984263338u))))))))))))))) : v;\n\tv = p.y == 78. ? (p.x < 8. ? 1434102404u : (p.x < 16. ? 2807387548u : (p.x < 24. ? 298494634u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 286331153u : (p.x < 72. ? 286331153u : (p.x < 80. ? 286331153u : (p.x < 88. ? 2821787921u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 1471851178u : (p.x < 112. ? 1431655765u : (p.x < 120. ? 1431655765u : 3400182443u))))))))))))))) : v;\n\tv = p.y == 77. ? (p.x < 8. ? 2004527748u : (p.x < 16. ? 2809624422u : (p.x < 24. ? 298494634u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 286331153u : (p.x < 72. ? 286331153u : (p.x < 80. ? 286331153u : (p.x < 88. ? 2821787921u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 3131746986u : (p.x < 112. ? 1431655767u : (p.x < 120. ? 1431655765u : 3400182439u))))))))))))))) : v;\n\tv = p.y == 76. ? (p.x < 8. ? 2004527748u : (p.x < 16. ? 2809624439u : (p.x < 24. ? 298494634u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 286331153u : (p.x < 72. ? 286331153u : (p.x < 80. ? 286331153u : (p.x < 88. ? 2821787921u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 1431656410u : (p.x < 120. ? 1431655765u : 3400182453u))))))))))))))) : v;\n\tv = p.y == 75. ? (p.x < 8. ? 1434102404u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 298494634u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 286331153u : (p.x < 72. ? 286331153u : (p.x < 80. ? 286331153u : (p.x < 88. ? 3435204881u : (p.x < 96. ? 572802124u : (p.x < 104. ? 2831364914u : (p.x < 112. ? 1431821738u : (p.x < 120. ? 1431655765u : 3400182437u))))))))))))))) : v;\n\tv = p.y == 74. ? (p.x < 8. ? 1434102412u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 289057450u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 286331153u : (p.x < 72. ? 286331153u : (p.x < 80. ? 286331153u : (p.x < 88. ? 286331153u : (p.x < 96. ? 286331153u : (p.x < 104. ? 2831225105u : (p.x < 112. ? 1440590506u : (p.x < 120. ? 1431655765u : 1252698757u))))))))))))))) : v;\n\tv = p.y == 73. ? (p.x < 8. ? 2004527756u : (p.x < 16. ? 2809624439u : (p.x < 24. ? 289057450u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 286331153u : (p.x < 72. ? 286331153u : (p.x < 80. ? 286331153u : (p.x < 88. ? 286331153u : (p.x < 96. ? 286331153u : (p.x < 104. ? 2831225105u : (p.x < 112. ? 1572514474u : (p.x < 120. ? 1431655765u : 1252698741u))))))))))))))) : v;\n\tv = p.y == 72. ? (p.x < 8. ? 2004527756u : (p.x < 16. ? 2809624439u : (p.x < 24. ? 289057450u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 286331153u : (p.x < 72. ? 286331153u : (p.x < 80. ? 286331153u : (p.x < 88. ? 286331153u : (p.x < 96. ? 286331153u : (p.x < 104. ? 2831225105u : (p.x < 112. ? 2880088746u : (p.x < 120. ? 1431655765u : 1252698741u))))))))))))))) : v;\n\tv = p.y == 71. ? (p.x < 8. ? 1434102412u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 289057450u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 286331153u : (p.x < 72. ? 286331153u : (p.x < 80. ? 286331153u : (p.x < 88. ? 286331153u : (p.x < 96. ? 286331153u : (p.x < 104. ? 2822836497u : (p.x < 112. ? 3668617898u : (p.x < 120. ? 1431655765u : 1252698741u))))))))))))))) : v;\n\tv = p.y == 70. ? (p.x < 8. ? 1551542915u : (p.x < 16. ? 2807389276u : (p.x < 24. ? 288008874u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 286331153u : (p.x < 72. ? 286331153u : (p.x < 80. ? 286331153u : (p.x < 88. ? 286331153u : (p.x < 96. ? 286331153u : (p.x < 104. ? 2822836497u : (p.x < 112. ? 3668617898u : (p.x < 120. ? 1431655767u : 715827829u))))))))))))))) : v;\n\tv = p.y == 69. ? (p.x < 8. ? 2004527747u : (p.x < 16. ? 2809624439u : (p.x < 24. ? 288008874u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 286331153u : (p.x < 72. ? 286331153u : (p.x < 80. ? 286331153u : (p.x < 88. ? 286331153u : (p.x < 96. ? 286331153u : (p.x < 104. ? 2822836497u : (p.x < 112. ? 3668617898u : (p.x < 120. ? 1431655767u : 715827829u))))))))))))))) : v;\n\tv = p.y == 68. ? (p.x < 8. ? 2004527747u : (p.x < 16. ? 2809624439u : (p.x < 24. ? 288008874u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 286331153u : (p.x < 72. ? 286331153u : (p.x < 80. ? 286331153u : (p.x < 88. ? 286331153u : (p.x < 96. ? 286331153u : (p.x < 104. ? 2822836497u : (p.x < 112. ? 3668617898u : (p.x < 120. ? 1431655767u : 715827829u))))))))))))))) : v;\n\tv = p.y == 67. ? (p.x < 8. ? 1434102403u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 288008874u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 286331153u : (p.x < 72. ? 286331153u : (p.x < 80. ? 286331153u : (p.x < 88. ? 286331153u : (p.x < 96. ? 286331153u : (p.x < 104. ? 2820739345u : (p.x < 112. ? 3668617898u : (p.x < 120. ? 2004318071u : 715827831u))))))))))))))) : v;\n\tv = p.y == 66. ? (p.x < 8. ? 1434102402u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 290106026u : (p.x < 32. ? 286331153u : (p.x < 40. ? 1145184801u : (p.x < 48. ? 859622596u : (p.x < 56. ? 1145184803u : (p.x < 64. ? 859622596u : (p.x < 72. ? 1145184803u : (p.x < 80. ? 859622596u : (p.x < 88. ? 1145184803u : (p.x < 96. ? 287100100u : (p.x < 104. ? 2820739345u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2004318071u : 984263287u))))))))))))))) : v;\n\tv = p.y == 65. ? (p.x < 8. ? 2004527746u : (p.x < 16. ? 2809624439u : (p.x < 24. ? 290106026u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2290649137u : (p.x < 48. ? 2290649224u : (p.x < 56. ? 2290649224u : (p.x < 64. ? 2290649224u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286501546u : (p.x < 104. ? 2820739345u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 1431655767u : 984263285u))))))))))))))) : v;\n\tv = p.y == 64. ? (p.x < 8. ? 2004527746u : (p.x < 16. ? 2809624439u : (p.x < 24. ? 290106026u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310897u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286501546u : (p.x < 104. ? 2820739345u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 1431655767u : 984263285u))))))))))))))) : v;\n\tv = p.y == 63. ? (p.x < 8. ? 1434102402u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 290106026u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310897u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286501546u : (p.x < 104. ? 2821787921u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2004318071u : 984263287u))))))))))))))) : v;\n\tv = p.y == 62. ? (p.x < 8. ? 1434102404u : (p.x < 16. ? 2814756293u : (p.x < 24. ? 298494634u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310897u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286501546u : (p.x < 104. ? 2821787921u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2004318071u : 3400182391u))))))))))))))) : v;\n\tv = p.y == 61. ? (p.x < 8. ? 2004527748u : (p.x < 16. ? 2809624439u : (p.x < 24. ? 298494634u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863311041u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286436010u : (p.x < 104. ? 2821787921u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 1431655767u : 3400182389u))))))))))))))) : v;\n\tv = p.y == 60. ? (p.x < 8. ? 2004527748u : (p.x < 16. ? 2809624439u : (p.x < 24. ? 298494634u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863311041u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2004323002u : (p.x < 72. ? 2863315591u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286436010u : (p.x < 104. ? 2821787921u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 1431655767u : 3400182389u))))))))))))))) : v;\n\tv = p.y == 59. ? (p.x < 8. ? 1434102404u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 298494634u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863311041u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 3131746986u : (p.x < 64. ? 1431655767u : (p.x < 72. ? 2864141653u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286436010u : (p.x < 104. ? 2831225105u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2004318071u : 3400182391u))))))))))))))) : v;\n\tv = p.y == 58. ? (p.x < 8. ? 1434102412u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 288568106u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863311041u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 1471851178u : (p.x < 64. ? 1431655765u : (p.x < 72. ? 2857719125u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286436010u : (p.x < 104. ? 2831225105u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 3722304989u : 1252698845u))))))))))))))) : v;\n\tv = p.y == 57. ? (p.x < 8. ? 2004527756u : (p.x < 16. ? 2809624439u : (p.x < 24. ? 286330922u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310913u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 1431812778u : (p.x < 64. ? 1431655765u : (p.x < 72. ? 2773833045u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286567082u : (p.x < 104. ? 2831225105u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 1431655767u : 1252698741u))))))))))))))) : v;\n\tv = p.y == 56. ? (p.x < 8. ? 2004527756u : (p.x < 16. ? 2809624439u : (p.x < 24. ? 286331178u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310913u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 1431656378u : (p.x < 64. ? 1431655765u : (p.x < 72. ? 1431655765u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286567082u : (p.x < 104. ? 2831225105u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 1431655767u : 1252698741u))))))))))))))) : v;\n\tv = p.y == 55. ? (p.x < 8. ? 1434102412u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 286331178u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2863310913u : (p.x < 48. ? 3131746986u : (p.x < 56. ? 1431655767u : (p.x < 64. ? 1431655765u : (p.x < 72. ? 1431655765u : (p.x < 80. ? 2863311525u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286567082u : (p.x < 104. ? 2822836497u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2004597687u : 1252698743u))))))))))))))) : v;\n\tv = p.y == 54. ? (p.x < 8. ? 1434102403u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 3435204938u : (p.x < 32. ? 572732220u : (p.x < 40. ? 2863310914u : (p.x < 48. ? 1471851178u : (p.x < 56. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 72. ? 1431655877u : (p.x < 80. ? 2863311701u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286567082u : (p.x < 104. ? 2822836497u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2004318071u : 715827831u))))))))))))))) : v;\n\tv = p.y == 53. ? (p.x < 8. ? 2004527747u : (p.x < 16. ? 2809624439u : (p.x < 24. ? 2294354250u : (p.x < 32. ? 2290649224u : (p.x < 40. ? 2863311496u : (p.x < 48. ? 1431812778u : (p.x < 56. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 72. ? 1431655765u : (p.x < 80. ? 2863310677u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 287091370u : (p.x < 104. ? 2822836497u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 1431655767u : 715827829u))))))))))))))) : v;\n\tv = p.y == 52. ? (p.x < 8. ? 2004527747u : (p.x < 16. ? 2809624439u : (p.x < 24. ? 2822836554u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 1431656378u : (p.x < 56. ? 1431655765u : (p.x < 64. ? 3310703957u : (p.x < 72. ? 1431684549u : (p.x < 80. ? 2863314261u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 287091370u : (p.x < 104. ? 2822836497u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 3148174679u : 715827834u))))))))))))))) : v;\n\tv = p.y == 51. ? (p.x < 8. ? 1434102403u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 2822836554u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 3131746986u : (p.x < 48. ? 1431655767u : (p.x < 56. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 72. ? 1431655765u : (p.x < 80. ? 2863297877u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 287091370u : (p.x < 104. ? 2820739345u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2004318071u : 715827831u))))))))))))))) : v;\n\tv = p.y == 50. ? (p.x < 8. ? 1434102402u : (p.x < 16. ? 2807387477u : (p.x < 24. ? 2822836682u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 1471851178u : (p.x < 48. ? 1431655765u : (p.x < 56. ? 1431655765u : (p.x < 64. ? 1467438421u : (p.x < 72. ? 1431655877u : (p.x < 80. ? 2863355221u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 287091370u : (p.x < 104. ? 2820739345u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2004318071u : 984263287u))))))))))))))) : v;\n\tv = p.y == 49. ? (p.x < 8. ? 2004527746u : (p.x < 16. ? 3078059895u : (p.x < 24. ? 2822836682u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 1431812778u : (p.x < 48. ? 1431655765u : (p.x < 56. ? 1431655765u : (p.x < 64. ? 3722304085u : (p.x < 72. ? 1431655767u : (p.x < 80. ? 2863093077u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286501546u : (p.x < 104. ? 2820739345u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 1432009639u : 984263285u))))))))))))))) : v;\n\tv = p.y == 48. ? (p.x < 8. ? 2004527746u : (p.x < 16. ? 3078059895u : (p.x < 24. ? 2820739530u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 1431656378u : (p.x < 48. ? 1431655765u : (p.x < 56. ? 1431655765u : (p.x < 64. ? 2863312346u : (p.x < 72. ? 1431655901u : (p.x < 80. ? 2864010581u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286501546u : (p.x < 104. ? 2820739345u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 1431655767u : 984263285u))))))))))))))) : v;\n\tv = p.y == 47. ? (p.x < 8. ? 1434102402u : (p.x < 16. ? 3075822933u : (p.x < 24. ? 2820739530u : (p.x < 32. ? 3131746986u : (p.x < 40. ? 1431655767u : (p.x < 48. ? 1431655765u : (p.x < 56. ? 3663025493u : (p.x < 64. ? 2863311533u : (p.x < 72. ? 1431657146u : (p.x < 80. ? 2859816277u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286501546u : (p.x < 104. ? 2821787921u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2004318071u : 984263287u))))))))))))))) : v;\n\tv = p.y == 46. ? (p.x < 8. ? 1434102404u : (p.x < 16. ? 3075822933u : (p.x < 24. ? 2820739386u : (p.x < 32. ? 1471851178u : (p.x < 40. ? 1431655765u : (p.x < 48. ? 1431655765u : (p.x < 56. ? 2914473301u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 1431657898u : (p.x < 80. ? 2874496341u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286501546u : (p.x < 104. ? 2821787921u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 3149363063u : 3400182395u))))))))))))))) : v;\n\tv = p.y == 45. ? (p.x < 8. ? 1434102404u : (p.x < 16. ? 3579139413u : (p.x < 24. ? 2820879162u : (p.x < 32. ? 1431812778u : (p.x < 40. ? 1431655765u : (p.x < 48. ? 1431655765u : (p.x < 56. ? 2863314773u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 1431677866u : (p.x < 80. ? 2807387477u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286436010u : (p.x < 104. ? 2821787921u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 1431655767u : 3400182389u))))))))))))))) : v;\n\tv = p.y == 44. ? (p.x < 8. ? 1434102404u : (p.x < 16. ? 3042268501u : (p.x < 24. ? 2861074570u : (p.x < 32. ? 1431656381u : (p.x < 40. ? 1431655765u : (p.x < 48. ? 1431655765u : (p.x < 56. ? 2863311543u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 1431689898u : (p.x < 80. ? 3042268501u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286436010u : (p.x < 104. ? 2821787921u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 1431655767u : 3400182389u))))))))))))))) : v;\n\tv = p.y == 43. ? (p.x < 8. ? 1434102404u : (p.x < 16. ? 1431655765u : (p.x < 24. ? 3686509277u : (p.x < 32. ? 1431655767u : (p.x < 40. ? 1431655765u : (p.x < 48. ? 3075822933u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 1431808682u : (p.x < 80. ? 1968526677u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 286436010u : (p.x < 104. ? 2831225105u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2004597687u : 3400182391u))))))))))))))) : v;\n\tv = p.y == 42. ? (p.x < 8. ? 1434102412u : (p.x < 16. ? 1431655765u : (p.x < 24. ? 1471012261u : (p.x < 32. ? 1431655765u : (p.x < 40. ? 1431655765u : (p.x < 48. ? 2864141653u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 1432070826u : (p.x < 80. ? 1431655765u : (p.x < 88. ? 2863311531u : (p.x < 96. ? 286436010u : (p.x < 104. ? 2831225105u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2004318071u : 1252698743u))))))))))))))) : v;\n\tv = p.y == 41. ? (p.x < 8. ? 1434102412u : (p.x < 16. ? 1431655765u : (p.x < 24. ? 1431655765u : (p.x < 32. ? 1431655765u : (p.x < 40. ? 1431655765u : (p.x < 48. ? 2863314773u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 1434102442u : (p.x < 80. ? 1431655765u : (p.x < 88. ? 2863311527u : (p.x < 96. ? 286567082u : (p.x < 104. ? 2831225105u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 1431655767u : 1252698741u))))))))))))))) : v;\n\tv = p.y == 40. ? (p.x < 8. ? 1434102412u : (p.x < 16. ? 1431655765u : (p.x < 24. ? 1431655765u : (p.x < 32. ? 1431655765u : (p.x < 40. ? 1431655765u : (p.x < 48. ? 2863311543u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 1438296746u : (p.x < 80. ? 1431655765u : (p.x < 88. ? 2863311541u : (p.x < 96. ? 286567082u : (p.x < 104. ? 2831225105u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 3148174679u : 1252698746u))))))))))))))) : v;\n\tv = p.y == 39. ? (p.x < 8. ? 1434102412u : (p.x < 16. ? 1431655765u : (p.x < 24. ? 1431655765u : (p.x < 32. ? 1431655765u : (p.x < 40. ? 3075822933u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 1470802602u : (p.x < 80. ? 1431655765u : (p.x < 88. ? 2863311477u : (p.x < 96. ? 286567082u : (p.x < 104. ? 2822836497u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2004318071u : 1252698743u))))))))))))))) : v;\n\tv = p.y == 38. ? (p.x < 8. ? 1434102403u : (p.x < 16. ? 1431655765u : (p.x < 24. ? 1431655765u : (p.x < 32. ? 1431655765u : (p.x < 40. ? 2864141653u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 1537911466u : (p.x < 80. ? 1431655765u : (p.x < 88. ? 2863311701u : (p.x < 96. ? 286567082u : (p.x < 104. ? 2822836497u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2004318071u : 715827831u))))))))))))))) : v;\n\tv = p.y == 37. ? (p.x < 8. ? 1435150979u : (p.x < 16. ? 1431655765u : (p.x < 24. ? 1431655765u : (p.x < 32. ? 1431655765u : (p.x < 40. ? 2863314773u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2058005162u : (p.x < 80. ? 1431655765u : (p.x < 88. ? 2863310677u : (p.x < 96. ? 287091370u : (p.x < 104. ? 2822836497u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 1432009639u : 715827829u))))))))))))))) : v;\n\tv = p.y == 36. ? (p.x < 8. ? 1437248131u : (p.x < 16. ? 1431655765u : (p.x < 24. ? 1431655765u : (p.x < 32. ? 1431655765u : (p.x < 40. ? 2863311543u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 3131746986u : (p.x < 80. ? 1431655765u : (p.x < 88. ? 2863314261u : (p.x < 96. ? 287091370u : (p.x < 104. ? 2822836497u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 1431655767u : 715827829u))))))))))))))) : v;\n\tv = p.y == 35. ? (p.x < 8. ? 1438296707u : (p.x < 16. ? 1431655765u : (p.x < 24. ? 1431655765u : (p.x < 32. ? 3075822933u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 1431655767u : (p.x < 88. ? 2863297877u : (p.x < 96. ? 287091370u : (p.x < 104. ? 2820739345u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2004318071u : 715827831u))))))))))))))) : v;\n\tv = p.y == 34. ? (p.x < 8. ? 1470802562u : (p.x < 16. ? 1431655765u : (p.x < 24. ? 1431655765u : (p.x < 32. ? 2864141653u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 1431655771u : (p.x < 88. ? 2863355221u : (p.x < 96. ? 287091370u : (p.x < 104. ? 2820739345u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 3149363063u : 984263291u))))))))))))))) : v;\n\tv = p.y == 33. ? (p.x < 8. ? 1537911426u : (p.x < 16. ? 1431655765u : (p.x < 24. ? 1431655765u : (p.x < 32. ? 2863314773u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 1431655802u : (p.x < 88. ? 2863093077u : (p.x < 96. ? 286501546u : (p.x < 104. ? 2820739345u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 1431655767u : 984263285u))))))))))))))) : v;\n\tv = p.y == 32. ? (p.x < 8. ? 2863311490u : (p.x < 16. ? 1431655765u : (p.x < 24. ? 1431655765u : (p.x < 32. ? 2863311543u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 1431655866u : (p.x < 88. ? 2864010581u : (p.x < 96. ? 286501546u : (p.x < 104. ? 2820739345u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 1431655767u : 984263285u))))))))))))))) : v;\n\tv = p.y == 31. ? (p.x < 8. ? 2863311490u : (p.x < 16. ? 1431655803u : (p.x < 24. ? 3075822933u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 1431656362u : (p.x < 88. ? 2859816277u : (p.x < 96. ? 286501546u : (p.x < 104. ? 2820739345u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2004318071u : 984263287u))))))))))))))) : v;\n\tv = p.y == 30. ? (p.x < 8. ? 2863311492u : (p.x < 16. ? 2004396970u : (p.x < 24. ? 2864351095u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 1431657386u : (p.x < 88. ? 2874496341u : (p.x < 96. ? 286501546u : (p.x < 104. ? 2821787921u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2004318071u : 3400182391u))))))))))))))) : v;\n\tv = p.y == 29. ? (p.x < 8. ? 2863311492u : (p.x < 16. ? 2863311530u : (p.x < 24. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 1431665322u : (p.x < 88. ? 2807387477u : (p.x < 96. ? 286436010u : (p.x < 104. ? 2821787921u : (p.x < 112. ? 3668617898u : (p.x < 120. ? 1431655767u : 3400182389u))))))))))))))) : v;\n\tv = p.y == 28. ? (p.x < 8. ? 2863311492u : (p.x < 16. ? 2863311530u : (p.x < 24. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 1431681706u : (p.x < 88. ? 3042268501u : (p.x < 96. ? 286436010u : (p.x < 104. ? 2821787921u : (p.x < 112. ? 3668617898u : (p.x < 120. ? 1431655767u : 3400182389u))))))))))))))) : v;\n\tv = p.y == 27. ? (p.x < 8. ? 2863311492u : (p.x < 16. ? 2863311530u : (p.x < 24. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 1431808682u : (p.x < 88. ? 1968526677u : (p.x < 96. ? 286436010u : (p.x < 104. ? 2821787921u : (p.x < 112. ? 3668617898u : (p.x < 120. ? 1431655765u : 3400182389u))))))))))))))) : v;\n\tv = p.y == 26. ? (p.x < 8. ? 2863311500u : (p.x < 16. ? 2863311530u : (p.x < 24. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 1432070826u : (p.x < 88. ? 1431655765u : (p.x < 96. ? 1145219757u : (p.x < 104. ? 2831994052u : (p.x < 112. ? 3685395114u : (p.x < 120. ? 1431655765u : 1252698741u))))))))))))))) : v;\n\tv = p.y == 25. ? (p.x < 8. ? 2863311500u : (p.x < 16. ? 2863311530u : (p.x < 24. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 1434102442u : (p.x < 88. ? 1431655765u : (p.x < 96. ? 2290657979u : (p.x < 104. ? 2861074568u : (p.x < 112. ? 3148524202u : (p.x < 120. ? 1431655765u : 1252698741u))))))))))))))) : v;\n\tv = p.y == 24. ? (p.x < 8. ? 2863311500u : (p.x < 16. ? 2863311530u : (p.x < 24. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 1438296746u : (p.x < 88. ? 1431655765u : (p.x < 96. ? 2863311573u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2074782378u : (p.x < 120. ? 1431655765u : 1252698741u))))))))))))))) : v;\n\tv = p.y == 23. ? (p.x < 8. ? 2863311500u : (p.x < 16. ? 2863311530u : (p.x < 24. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 1470802602u : (p.x < 88. ? 1431655765u : (p.x < 96. ? 2863311797u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 1571465898u : (p.x < 120. ? 1431655765u : 1252698741u))))))))))))))) : v;\n\tv = p.y == 22. ? (p.x < 8. ? 2863311491u : (p.x < 16. ? 2863311530u : (p.x < 24. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 1537911466u : (p.x < 88. ? 1431655765u : (p.x < 96. ? 2863324501u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 1522182826u : (p.x < 120. ? 1431655765u : 715827829u))))))))))))))) : v;\n\tv = p.y == 21. ? (p.x < 8. ? 2863311491u : (p.x < 16. ? 2863311530u : (p.x < 24. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2058005162u : (p.x < 88. ? 1431655765u : (p.x < 96. ? 2866652501u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 1438493354u : (p.x < 120. ? 1431655765u : 715827829u))))))))))))))) : v;\n\tv = p.y == 20. ? (p.x < 8. ? 2863311491u : (p.x < 16. ? 2863311530u : (p.x < 24. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 3131746986u : (p.x < 88. ? 1431655765u : (p.x < 96. ? 3181729109u : (p.x < 104. ? 2863311531u : (p.x < 112. ? 1431821243u : (p.x < 120. ? 1431655765u : 715827845u))))))))))))))) : v;\n\tv = p.y == 19. ? (p.x < 8. ? 2863311491u : (p.x < 16. ? 2863311530u : (p.x < 24. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 40. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 56. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 1431655767u : (p.x < 96. ? 1968526677u : (p.x < 104. ? 3722304987u : (p.x < 112. ? 1431656365u : (p.x < 120. ? 1431655765u : 715827877u))))))))))))))) : v;\n\tv = p.y == 18. ? (p.x < 8. ? 1145315874u : (p.x < 16. ? 859032780u : (p.x < 24. ? 1145315874u : (p.x < 32. ? 859032780u : (p.x < 40. ? 1145315874u : (p.x < 48. ? 859032780u : (p.x < 56. ? 1145315874u : (p.x < 64. ? 2863320268u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 1431655771u : (p.x < 96. ? 1431655765u : (p.x < 104. ? 1467446613u : (p.x < 112. ? 1431655765u : (p.x < 120. ? 1431655765u : 984263349u))))))))))))))) : v;\n\tv = p.y == 17. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 2863280401u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 1431655802u : (p.x < 96. ? 1431655765u : (p.x < 104. ? 1431655765u : (p.x < 112. ? 1431655765u : (p.x < 120. ? 1431655765u : 984263335u))))))))))))))) : v;\n\tv = p.y == 16. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 2863280401u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 1431655866u : (p.x < 96. ? 1431655765u : (p.x < 104. ? 1431655765u : (p.x < 112. ? 1431655765u : (p.x < 120. ? 1431655765u : 984263339u))))))))))))))) : v;\n\tv = p.y == 15. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 2863280401u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 1431657130u : (p.x < 96. ? 1431655765u : (p.x < 104. ? 1431655765u : (p.x < 112. ? 1431655765u : (p.x < 120. ? 2773833045u : 984263338u))))))))))))))) : v;\n\tv = p.y == 14. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 2863280401u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 1431677610u : (p.x < 96. ? 1431655765u : (p.x < 104. ? 1431655765u : (p.x < 112. ? 1431655765u : (p.x < 120. ? 2857719125u : 3400182442u))))))))))))))) : v;\n\tv = p.y == 13. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 2863276305u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 1432005290u : (p.x < 96. ? 1431655765u : (p.x < 104. ? 1431655765u : (p.x < 112. ? 1431655765u : (p.x < 120. ? 2862962005u : 3400182442u))))))))))))))) : v;\n\tv = p.y == 12. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 2863276305u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 1437248170u : (p.x < 96. ? 1431655765u : (p.x < 104. ? 1431655765u : (p.x < 112. ? 1431655765u : (p.x < 120. ? 2863289685u : 3400182442u))))))))))))))) : v;\n\tv = p.y == 11. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 2863276305u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 1521134250u : (p.x < 96. ? 1431655765u : (p.x < 104. ? 1431655765u : (p.x < 112. ? 1431655765u : (p.x < 120. ? 2863310165u : 3400182442u))))))))))))))) : v;\n\tv = p.y == 10. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 2863276305u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 3131746986u : (p.x < 96. ? 1431655767u : (p.x < 104. ? 1431655765u : (p.x < 112. ? 1431655765u : (p.x < 120. ? 2863311733u : 1252698794u))))))))))))))) : v;\n\tv = p.y == 9. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 2863284497u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 1431800506u : (p.x < 104. ? 3318072773u : (p.x < 112. ? 2826261845u : (p.x < 120. ? 2863311531u : 1252698794u))))))))))))))) : v;\n\tv = p.y == 8. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 2863284497u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 2327489194u : (p.x < 104. ? 2004318071u : (p.x < 112. ? 2863376503u : (p.x < 120. ? 2863311530u : 1252698794u))))))))))))))) : v;\n\tv = p.y == 7. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 2863284497u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 1252698794u))))))))))))))) : v;\n\tv = p.y == 6. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 2863284497u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 715827882u))))))))))))))) : v;\n\tv = p.y == 5. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 2863317265u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 715827882u))))))))))))))) : v;\n\tv = p.y == 4. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 2863317265u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 715827882u))))))))))))))) : v;\n\tv = p.y == 3. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 2863317265u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 715827882u))))))))))))))) : v;\n\tv = p.y == 2. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 2863317265u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 984263338u))))))))))))))) : v;\n\tv = p.y == 1. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 2863317265u : (p.x < 72. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 88. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 104. ? 2863311530u : (p.x < 112. ? 2863311530u : (p.x < 120. ? 2863311530u : 984263338u))))))))))))))) : v;\n\tv = p.y == 0. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : (p.x < 56. ? 286331153u : (p.x < 64. ? 858992913u : (p.x < 72. ? 1145315874u : (p.x < 80. ? 859032780u : (p.x < 88. ? 1145315874u : (p.x < 96. ? 859032780u : (p.x < 104. ? 1145315874u : (p.x < 112. ? 859032780u : (p.x < 120. ? 1145315874u : 859032780u))))))))))))))) : v;\n    v = p.x >= 0. && p.x < 128. ? v : 0u;\n\n    float i = float((v >> uint(4. * p.x)) & 15u);\n    color = vec3(0, 0.53, 0);\n    color = i == 1. ? vec3(0, 0.66, 0) : color;\n    color = i == 2. ? vec3(0.72, 0, 0) : color;\n    color = i == 3. ? vec3(0, 0.82, 0) : color;\n    color = i == 4. ? vec3(0, 0.13, 0.97) : color;\n    color = i == 5. ? vec3(0.38) : color;\n    color = i == 6. ? vec3(0.6, 0.6, 0) : color;\n    color = i == 7. ? vec3(0.44) : color;\n    color = i == 8. ? vec3(0.56, 0.5, 0.35) : color;\n    color = i == 9. ? vec3(0.97, 0.53, 0) : color;\n    color = i == 10. ? vec3(0.63, 0.56, 0.38) : color;\n    color = i == 11. ? vec3(0.69, 0.63, 0.44) : color;\n    color = i == 12. ? vec3(0.85, 0.78, 0.22) : color;\n    color = i == 13. ? vec3(0.69) : color;\n}\n\nvec4 getPixel(in ivec2 uv) {\n    if(uv.x >= 0 \n        && uv.x < 128 \n        && uv.y >= 0 \n        && uv.y < 128) {\n        vec3 color = vec3(0,0,0);\n        Track(color, vec2(uv));\n        return vec4(color, 1.0);\n    }\n    return vec4(0,0.66,0,1);\n}\n\nvoid Boundary(inout vec3 color, vec2 p)\n{\n    uint v = 0u;\n\tv = p.y == 127. ? 2863311530u : v;\n\tv = p.y == 126. ? (p.x < 16. ? 1431655766u : (p.x < 32. ? 1431655765u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 125. ? (p.x < 16. ? 1431655766u : (p.x < 32. ? 1431655765u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 124. ? (p.x < 16. ? 1431655766u : (p.x < 32. ? 21u : (p.x < 48. ? 1431655764u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 123. ? (p.x < 16. ? 1431655766u : (p.x < 32. ? 1u : (p.x < 48. ? 1431655744u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 122. ? (p.x < 16. ? 357913942u : (p.x < 32. ? 0u : (p.x < 48. ? 1431655424u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 121. ? (p.x < 16. ? 89478486u : (p.x < 32. ? 0u : (p.x < 48. ? 1431650304u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 120. ? (p.x < 16. ? 22369622u : (p.x < 32. ? 0u : (p.x < 48. ? 1431568384u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 119. ? (p.x < 16. ? 5592406u : (p.x < 32. ? 0u : (p.x < 48. ? 1430257664u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 118. ? (p.x < 16. ? 1398102u : (p.x < 32. ? 0u : (p.x < 48. ? 1409286144u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 117. ? (p.x < 16. ? 349526u : (p.x < 32. ? 0u : (p.x < 48. ? 1073741824u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 116. ? (p.x < 16. ? 87382u : (p.x < 32. ? 0u : (p.x < 48. ? 0u : (p.x < 64. ? 1431655764u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 115. ? (p.x < 16. ? 87382u : (p.x < 32. ? 0u : (p.x < 48. ? 0u : (p.x < 64. ? 1431655744u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 114. ? (p.x < 16. ? 21846u : (p.x < 32. ? 0u : (p.x < 48. ? 0u : (p.x < 64. ? 1431655424u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 113. ? (p.x < 16. ? 21846u : (p.x < 32. ? 0u : (p.x < 48. ? 0u : (p.x < 64. ? 1431650304u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 112. ? (p.x < 16. ? 5462u : (p.x < 32. ? 89477120u : (p.x < 48. ? 0u : (p.x < 64. ? 1431568384u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 111. ? (p.x < 16. ? 5462u : (p.x < 32. ? 1431655680u : (p.x < 48. ? 5u : (p.x < 64. ? 1430257664u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 110. ? (p.x < 16. ? 1366u : (p.x < 32. ? 1431655744u : (p.x < 48. ? 85u : (p.x < 64. ? 1409286144u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 109. ? (p.x < 16. ? 1366u : (p.x < 32. ? 1431655760u : (p.x < 48. ? 1365u : (p.x < 64. ? 1073741824u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 108. ? (p.x < 16. ? 1366u : (p.x < 32. ? 1431655764u : (p.x < 48. ? 87381u : (p.x < 64. ? 0u : (p.x < 80. ? 1431655764u : (p.x < 96. ? 2857719125u : 2863311530u)))))) : v;\n\tv = p.y == 107. ? (p.x < 16. ? 1366u : (p.x < 32. ? 2863311188u : (p.x < 48. ? 1398106u : (p.x < 64. ? 0u : (p.x < 80. ? 1431655744u : (p.x < 96. ? 1431655765u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 106. ? (p.x < 16. ? 342u : (p.x < 32. ? 2863311188u : (p.x < 48. ? 22369626u : (p.x < 64. ? 0u : (p.x < 80. ? 1431655424u : (p.x < 96. ? 1431655765u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 105. ? (p.x < 16. ? 342u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 357913946u : (p.x < 64. ? 0u : (p.x < 80. ? 1431650304u : (p.x < 96. ? 1431655765u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 104. ? (p.x < 16. ? 342u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1u : (p.x < 80. ? 1431568384u : (p.x < 96. ? 1431655765u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 103. ? (p.x < 16. ? 342u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 21u : (p.x < 80. ? 1430257664u : (p.x < 96. ? 1431655765u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 102. ? (p.x < 16. ? 342u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 341u : (p.x < 80. ? 1409286144u : (p.x < 96. ? 1431655765u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 101. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 5461u : (p.x < 80. ? 1073741824u : (p.x < 96. ? 1431655765u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 100. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 87381u : (p.x < 80. ? 0u : (p.x < 96. ? 1431655764u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 99. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1398101u : (p.x < 80. ? 0u : (p.x < 96. ? 1431655744u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 98. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 22369621u : (p.x < 80. ? 0u : (p.x < 96. ? 1431655424u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 97. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 357913941u : (p.x < 80. ? 0u : (p.x < 96. ? 1431650304u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 96. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1u : (p.x < 96. ? 1431568384u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 95. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 21u : (p.x < 96. ? 1430257664u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 94. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 341u : (p.x < 96. ? 1409286144u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 93. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 5461u : (p.x < 96. ? 1073741824u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 92. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 87381u : (p.x < 96. ? 0u : (p.x < 112. ? 1431655764u : 2505397589u))))))) : v;\n\tv = p.y == 91. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1398101u : (p.x < 96. ? 0u : (p.x < 112. ? 1431655744u : 2505397589u))))))) : v;\n\tv = p.y == 90. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 22369621u : (p.x < 96. ? 0u : (p.x < 112. ? 1431655424u : 2505397589u))))))) : v;\n\tv = p.y == 89. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 357913941u : (p.x < 96. ? 0u : (p.x < 112. ? 1431650304u : 2505397589u))))))) : v;\n\tv = p.y == 88. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 1u : (p.x < 112. ? 1431568384u : 2505397589u))))))) : v;\n\tv = p.y == 87. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 21u : (p.x < 112. ? 1430257664u : 2505397589u))))))) : v;\n\tv = p.y == 86. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 341u : (p.x < 112. ? 1409286144u : 2505397589u))))))) : v;\n\tv = p.y == 85. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 5461u : (p.x < 112. ? 1073741824u : 2505397589u))))))) : v;\n\tv = p.y == 84. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 87381u : (p.x < 112. ? 0u : 2505397588u))))))) : v;\n\tv = p.y == 83. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 1398101u : (p.x < 112. ? 0u : 2505397568u))))))) : v;\n\tv = p.y == 82. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 22369621u : (p.x < 112. ? 0u : 2505397248u))))))) : v;\n\tv = p.y == 81. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 357913941u : (p.x < 112. ? 0u : 2505396224u))))))) : v;\n\tv = p.y == 80. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 96. ? 1431657130u : (p.x < 112. ? 1u : 2505392128u))))))) : v;\n\tv = p.y == 79. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 96. ? 1431657130u : (p.x < 112. ? 21u : 2505375744u))))))) : v;\n\tv = p.y == 78. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 96. ? 1431657130u : (p.x < 112. ? 341u : 2505310208u))))))) : v;\n\tv = p.y == 77. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 96. ? 1431657130u : (p.x < 112. ? 5461u : 2505310208u))))))) : v;\n\tv = p.y == 76. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 96. ? 1431657130u : (p.x < 112. ? 87381u : 2505048064u))))))) : v;\n\tv = p.y == 75. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 112. ? 350890u : 2505048064u))))))) : v;\n\tv = p.y == 74. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 112. ? 5593770u : 2505048064u))))))) : v;\n\tv = p.y == 73. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 112. ? 22370986u : 2505048064u))))))) : v;\n\tv = p.y == 72. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 112. ? 89479850u : 2505048064u))))))) : v;\n\tv = p.y == 71. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 112. ? 89479850u : 2505048064u))))))) : v;\n\tv = p.y == 70. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 112. ? 357915306u : 2505048064u))))))) : v;\n\tv = p.y == 69. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 112. ? 357915306u : 2505048064u))))))) : v;\n\tv = p.y == 68. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 112. ? 357915306u : 2505048064u))))))) : v;\n\tv = p.y == 67. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 112. ? 357915306u : 2505048064u))))))) : v;\n\tv = p.y == 66. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 2863311530u : (p.x < 80. ? 2863311530u : (p.x < 96. ? 2863311530u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 65. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 64. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 63. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 62. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 61. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 60. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 87381u : (p.x < 80. ? 1431655680u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 59. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311189u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 5461u : (p.x < 80. ? 1431654400u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 58. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311529u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 341u : (p.x < 80. ? 1431650304u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 57. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311529u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 21u : (p.x < 80. ? 1431633920u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 56. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311529u : (p.x < 48. ? 1431655770u : (p.x < 64. ? 1u : (p.x < 80. ? 1431568384u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 55. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311529u : (p.x < 48. ? 357913946u : (p.x < 64. ? 0u : (p.x < 80. ? 1431306240u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 54. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 2863311529u : (p.x < 48. ? 22369626u : (p.x < 64. ? 0u : (p.x < 80. ? 1430257664u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 53. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 1431657129u : (p.x < 48. ? 1398101u : (p.x < 64. ? 0u : (p.x < 80. ? 1430257664u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 52. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 1431657129u : (p.x < 48. ? 87381u : (p.x < 64. ? 0u : (p.x < 80. ? 1426063360u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 51. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 1431657129u : (p.x < 48. ? 5461u : (p.x < 64. ? 0u : (p.x < 80. ? 1426063360u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 50. ? (p.x < 16. ? 1073742166u : (p.x < 32. ? 1431657129u : (p.x < 48. ? 341u : (p.x < 64. ? 0u : (p.x < 80. ? 1409286144u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 49. ? (p.x < 16. ? 342u : (p.x < 32. ? 1431657129u : (p.x < 48. ? 21u : (p.x < 64. ? 0u : (p.x < 80. ? 1409286144u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 48. ? (p.x < 16. ? 342u : (p.x < 32. ? 1431657129u : (p.x < 48. ? 1u : (p.x < 64. ? 1430257664u : (p.x < 80. ? 1342177280u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 47. ? (p.x < 16. ? 342u : (p.x < 32. ? 357915305u : (p.x < 48. ? 0u : (p.x < 64. ? 1431568384u : (p.x < 80. ? 1342177281u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 46. ? (p.x < 16. ? 342u : (p.x < 32. ? 22370985u : (p.x < 48. ? 0u : (p.x < 64. ? 1431650304u : (p.x < 80. ? 1073741825u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 45. ? (p.x < 16. ? 342u : (p.x < 32. ? 1399465u : (p.x < 48. ? 0u : (p.x < 64. ? 1431655680u : (p.x < 80. ? 1073741829u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 44. ? (p.x < 16. ? 342u : (p.x < 32. ? 21844u : (p.x < 48. ? 0u : (p.x < 64. ? 1431655760u : (p.x < 80. ? 5u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 43. ? (p.x < 16. ? 342u : (p.x < 32. ? 80u : (p.x < 48. ? 0u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 85u : (p.x < 96. ? 2857719125u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 42. ? (p.x < 16. ? 342u : (p.x < 32. ? 0u : (p.x < 48. ? 1342177280u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 85u : (p.x < 96. ? 2857719124u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 41. ? (p.x < 16. ? 342u : (p.x < 32. ? 0u : (p.x < 48. ? 1426063360u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 341u : (p.x < 96. ? 2857719124u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 40. ? (p.x < 16. ? 342u : (p.x < 32. ? 0u : (p.x < 48. ? 1431306240u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 341u : (p.x < 96. ? 2857719120u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 39. ? (p.x < 16. ? 342u : (p.x < 32. ? 0u : (p.x < 48. ? 1431633920u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1365u : (p.x < 96. ? 2857719120u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 38. ? (p.x < 16. ? 342u : (p.x < 32. ? 0u : (p.x < 48. ? 1431654400u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1365u : (p.x < 96. ? 2857719104u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 37. ? (p.x < 16. ? 342u : (p.x < 32. ? 0u : (p.x < 48. ? 1431655680u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 5461u : (p.x < 96. ? 2857719104u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 36. ? (p.x < 16. ? 342u : (p.x < 32. ? 0u : (p.x < 48. ? 1431655760u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 5461u : (p.x < 96. ? 2857719040u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 35. ? (p.x < 16. ? 342u : (p.x < 32. ? 0u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 21845u : (p.x < 96. ? 2857719040u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 34. ? (p.x < 16. ? 1366u : (p.x < 32. ? 1342177280u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 21845u : (p.x < 96. ? 2857718784u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 33. ? (p.x < 16. ? 1366u : (p.x < 32. ? 1426063360u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 87381u : (p.x < 96. ? 2857718784u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 32. ? (p.x < 16. ? 5462u : (p.x < 32. ? 1431306240u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 87381u : (p.x < 96. ? 2857717760u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 31. ? (p.x < 16. ? 21846u : (p.x < 32. ? 1431633920u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 349525u : (p.x < 96. ? 2857717760u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 30. ? (p.x < 16. ? 349526u : (p.x < 32. ? 1431654400u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 349525u : (p.x < 96. ? 2857713664u : (p.x < 112. ? 1431657130u : 2505048064u))))))) : v;\n\tv = p.y == 29. ? (p.x < 16. ? 1431655766u : (p.x < 32. ? 1431655765u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1398101u : (p.x < 96. ? 2857713664u : (p.x < 112. ? 357915306u : 2505048064u))))))) : v;\n\tv = p.y == 28. ? (p.x < 16. ? 1431655766u : (p.x < 32. ? 1431655765u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1398101u : (p.x < 96. ? 2857697280u : (p.x < 112. ? 357915306u : 2505048064u))))))) : v;\n\tv = p.y == 27. ? (p.x < 16. ? 1431655766u : (p.x < 32. ? 1431655765u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 5592405u : (p.x < 96. ? 2857697280u : (p.x < 112. ? 357915306u : 2505048064u))))))) : v;\n\tv = p.y == 26. ? (p.x < 16. ? 1431655766u : (p.x < 32. ? 1431655765u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 5592405u : (p.x < 96. ? 2857631744u : (p.x < 112. ? 89479850u : 2505048064u))))))) : v;\n\tv = p.y == 25. ? (p.x < 16. ? 1431655766u : (p.x < 32. ? 1431655765u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 22369621u : (p.x < 96. ? 1431568384u : (p.x < 112. ? 89478485u : 2505048064u))))))) : v;\n\tv = p.y == 24. ? (p.x < 16. ? 1431655766u : (p.x < 32. ? 1431655765u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 22369621u : (p.x < 96. ? 1431306240u : (p.x < 112. ? 89478485u : 2505048064u))))))) : v;\n\tv = p.y == 23. ? (p.x < 16. ? 1431655766u : (p.x < 32. ? 1431655765u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 89478485u : (p.x < 96. ? 1431306240u : (p.x < 112. ? 22369621u : 2505048064u))))))) : v;\n\tv = p.y == 22. ? (p.x < 16. ? 1431655766u : (p.x < 32. ? 1431655765u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 89478485u : (p.x < 96. ? 1426063360u : (p.x < 112. ? 22369621u : 2505048064u))))))) : v;\n\tv = p.y == 21. ? (p.x < 16. ? 1431655766u : (p.x < 32. ? 1431655765u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 357913941u : (p.x < 96. ? 1342177280u : (p.x < 112. ? 5592405u : 2505048064u))))))) : v;\n\tv = p.y == 20. ? (p.x < 16. ? 1431655766u : (p.x < 32. ? 1431655765u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 357913941u : (p.x < 96. ? 0u : (p.x < 112. ? 21845u : 2505048064u))))))) : v;\n\tv = p.y == 19. ? (p.x < 16. ? 1431655766u : (p.x < 32. ? 1431655765u : (p.x < 48. ? 1431655765u : (p.x < 64. ? 1431655765u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 0u : (p.x < 112. ? 0u : 2505048064u))))))) : v;\n\tv = p.y == 18. ? (p.x < 16. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 1437248170u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 0u : (p.x < 112. ? 0u : 2505048064u))))))) : v;\n\tv = p.y == 17. ? (p.x < 16. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 1437248170u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 1u : (p.x < 112. ? 0u : 2505310208u))))))) : v;\n\tv = p.y == 16. ? (p.x < 16. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 1437248170u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 1u : (p.x < 112. ? 0u : 2505310208u))))))) : v;\n\tv = p.y == 15. ? (p.x < 16. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 1437248170u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 5u : (p.x < 112. ? 0u : 2505375744u))))))) : v;\n\tv = p.y == 14. ? (p.x < 16. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 1437248170u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 21u : (p.x < 112. ? 0u : 2505392128u))))))) : v;\n\tv = p.y == 13. ? (p.x < 16. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 1437248170u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 85u : (p.x < 112. ? 0u : 2505396224u))))))) : v;\n\tv = p.y == 12. ? (p.x < 16. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 1437248170u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 341u : (p.x < 112. ? 0u : 2505397248u))))))) : v;\n\tv = p.y == 11. ? (p.x < 16. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 1437248170u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 1365u : (p.x < 112. ? 0u : 2505397504u))))))) : v;\n\tv = p.y == 10. ? (p.x < 16. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 1437248170u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 5461u : (p.x < 112. ? 0u : 2505397568u))))))) : v;\n\tv = p.y == 9. ? (p.x < 16. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 1437248170u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 87381u : (p.x < 112. ? 0u : 2505397588u))))))) : v;\n\tv = p.y == 8. ? (p.x < 16. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 1437248170u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 22369621u : (p.x < 112. ? 1409286144u : 2505397589u))))))) : v;\n\tv = p.y == 7. ? (p.x < 16. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 1437248170u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 1431655765u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 6. ? (p.x < 16. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 1437248170u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 1431655765u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 5. ? (p.x < 16. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 1437248170u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 1431655765u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 4. ? (p.x < 16. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 1437248170u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 1431655765u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 3. ? (p.x < 16. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 1437248170u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 1431655765u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 2. ? (p.x < 16. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 1437248170u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 1431655765u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 1. ? (p.x < 16. ? 2863311530u : (p.x < 32. ? 2863311530u : (p.x < 48. ? 2863311530u : (p.x < 64. ? 1437248170u : (p.x < 80. ? 1431655765u : (p.x < 96. ? 1431655765u : (p.x < 112. ? 1431655765u : 2505397589u))))))) : v;\n\tv = p.y == 0. ? 2863311530u : v;\n    v = p.x >= 0. && p.x < 128. ? v : 0u;\n\n    float i = float((v >> uint(2. * p.x)) & 3u);\n    color = vec3(0);\n    color = i == 1. ? vec3(0, 0, 1) : color;\n    color = i == 2. ? vec3(1, 0, 0) : color;\n}\n\nbool isSandPixel(in ivec2 uv) {\n    if(uv.x >= 0 \n        && uv.x < 128 \n        && uv.y >= 0 \n        && uv.y < 128) {\n        vec3 color = vec3(0,0,0);\n        Boundary(color, vec2(uv));\n        if (color.x == 0.0 && color.y == 0.0 && color.z > 0.9) {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool isBoundryPixel(in ivec2 uv) {\n    if(uv.x >= 0 \n        && uv.x < 128 \n        && uv.y >= 0 \n        && uv.y < 128) {\n        vec3 color = vec3(0,0,0);\n        Boundary(color, vec2(uv));\n        if (color.x > 0.9) {\n            return true;\n        }\n    }\n    return false;\n}\n\nstruct Player {\n    vec3 pos;\n    float yaw;\n};\n\nstruct Camera {\n    vec3 pos;\n    float yaw;\n};","name":"Common","description":"","type":"common"}]}