{"ver":"0.1","info":{"id":"l3BSWt","date":"1711211935","viewed":150,"name":"Fast 2D Global Illumination","username":"Zentient","description":"Use mouse to draw onscreen. A 2D implementation of my DAMP RT screenspace lighting shader for ReShade. Noticably slower on ShaderToy, fullscreen recommended.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["raytracing","occlusion","screenspace"],"hasliked":0,"parentid":"M3sXDH","parentname":"2D Screen Space Ray Tracing"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//2D implementation of DAMP RT (Depth Aware Mipmapped Ray Tracing)\n//Shader can be found here: https://github.com/Zenteon/ZN_FX/blob/main/Shaders/ZN_GI.fx\n//Note: Still work in progress and subject to change. Currently only simulates one ray, meaning in this case it's providing direct light\nvec3 ACESFilm(vec3 x)\n{\nfloat a = 2.51f;\nfloat b = 0.03f;\nfloat c = 2.43f;\nfloat d = 0.59f;\nfloat e = 0.14f;\nreturn clamp((x*(a*x+b))/(x*(c*x+d)+e), 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 liM = texture(iChannel0, uv).rgb;\n    liM = 0.01 * liM;\n    vec3 GI = texture(iChannel1, uv, 0.0).rgb;\n    \n    vec3 col = GI + liM;\n    col = ACESFilm(col);\n    col = pow(col, vec3(1.0) / 2.2);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Buffer A is lightmap\nvec3 draw(vec2 coord)\n{\n    if(iMouse.xy == vec2(0.0))\n    {\n        if(distance(vec2(iResolution.xy / 2.0), coord) <= 10.0)\n        {\n            return vec3(0.5, 0.0, 1.0);\n        }\n    }\n    if(distance(iMouse.xy, coord) <= 15.0)\n    {\n        vec3 col = 0.5 + 0.5 * vec3(sin(iTime), sin(2.09 + iTime), sin(4.18 + iTime));\n        col = normalize(col) / 0.577;\n        col = clamp(col, 0.0, 1.0);\n        return col;\n    }\n    return vec3(0.0, 0.0, 0.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 temp = texture(iChannel0, uv).rgb;\n    vec3 lum = draw(fragCoord);\n    if(temp == vec3(0.0)) {lum += temp;}\n    else {lum = temp;}\n    lum = clamp(lum, 0.0, 1.0);\n    fragColor = vec4(lum,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Buffer B is occlusion\nfloat draw(vec2 coord)\n{\n    if(distance(iMouse.xy, coord) <= 15.0)\n    {\n        return 1.0;\n    }\n    return 0.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    float temp = texture(iChannel0, uv).r;\n    float lum = draw(fragCoord);\n    lum += temp;\n    lum = clamp(lum, 0.0, 1.0);\n    \n    fragColor = vec4(lum, lum, lum,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\n//Traces rays in the lightmap\nconst float rayL = 7.0;//How many lods are used\nconst int rayT = 0; //Additional steps per lod\nconst float stLod = 0.0;//starting lod value\nvec3 sampGI(vec2 coord, vec2 offset)\n{\n    vec2 res = iResolution.xy;\n    vec2[8] dir; //Clockwise from verticle\n    dir[0] = vec2(0.0, 1.0);\n    dir[1] = vec2(0.7071);\n    dir[2] = vec2(1.0, 0.0);\n    dir[3] = vec2(0.7071, -0.7071);\n    dir[4] = vec2(0.0, -1.0);\n    dir[5] = vec2(-0.7071);\n    dir[6] = vec2(-1.0, 0.0);\n    dir[7] = vec2(-0.7071, 0.7071);\n    float includeNoise;\n    if(distance(coord, vec2(0.0)) < distance(coord, vec2(1.0) + 1.0)) {includeNoise = 1.0;}\n    //Radial Ray casting\n    float rayS;\n    vec3 ac;\n    \n    vec3 lightMap;\n    float occCol;\n    for(int i = 0; i < 8; i++)\n    {\n        vec2 rayP;\n        for(rayS = stLod; rayS <= rayL; rayS++)\n        {\n            \n            for(int ii = 0; ii <= rayT; ii++)\n            {\n                rayP += 0.5 * pow(2.0, rayS) * ((0.6 * includeNoise * offset + dir[i]) / res);\n                lightMap = 0.2 * texture(iChannel0, coord + rayP, rayS).rgb;\n                occCol = texture(iChannel1, coord + rayP, rayS).r;\n                ac += lightMap * pow(2.0, rayS);\n                \n            }\n            if(occCol > 0.01 * rayS) {break;}//Terminates ray when it hits a surface\n        }\n        \n    }\n    return ac / (8.0 * rayL);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 tex = texture(iChannel0, uv, 0.0).rgb;\n    vec2 offset = 1.0 - texture(iChannel2, fragCoord / 1024.0).rg;\n    vec3 col = tex;\n    col = sampGI(uv, 2.0 * (offset - 0.5));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}