{"ver":"0.1","info":{"id":"XdsfD8","date":"1522256291","viewed":189,"name":"Orange","username":"sfbatchelor","description":"Experiment in raymarching shadow colours. I tried to make the feeling of eerie natural movement just with trig funcs and a sphere.\n","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["mouse","raymarch","shadow","abstract","interaction","smooth","union","click","softshadow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON1 0.1\n#define EPSILON2 0.0001\n\n\nfloat sdPlane(vec3 p, vec3 n, float distanceFromOrigin) {\n\treturn dot(p, n) + distanceFromOrigin;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n// The \"Round\" variant uses a quarter-circle to join the two objects smoothly:\nfloat fOpUnionRound(float a, float b, float r) {\n\tvec2 u = max(vec2(r - a,r - b), vec2(0));\n\treturn max(r, min (a, b)) - length(u);\n}\n\n// polynomial smooth min (k = 0.1);\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat map(vec3 p)\n{\n    float bgPlane = sdPlane(p, normalize(vec3(0,0,-1)), 1. );\n    vec3 sp1Pos = p+ vec3(cos(iTime*0.3)*57.,sin(iTime*0.56)*36., 30. + sin(iTime*0.115)*100.); \n    float sp1 = sdSphere(sp1Pos, 100.);\n    float o = smin(sp1, bgPlane, 0.9);\n    o = min(o, fOpUnionRound(sp1, bgPlane, 0.2));\n    \n        \n \treturn o;   \n}\n\nvec3 getNorm(vec3 p) {\n    return normalize(vec3(\n        map(vec3(p.x + EPSILON2, p.y, p.z)) - map(vec3(p.x - EPSILON2, p.y, p.z)),\n        map(vec3(p.x, p.y + EPSILON2, p.z)) - map(vec3(p.x, p.y - EPSILON2, p.z)),\n        map(vec3(p.x, p.y, p.z  + EPSILON2)) - map(vec3(p.x, p.y, p.z - EPSILON2))\n    ));\n}\n\n\nfloat ss( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0000;\n    for( float t=mint; t < maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<0.0001 )\n            return 0.0000;\n        res = min( res, k*h/t );\n        t += h;\n    }\n    return res;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 blue = vec4(0.03,0.,1.,1.);\n    vec4 orange = vec4(0.8,0.39,0.387,1.);\n    vec4 shcol = blue; \n\n    \n\tvec2 uv = ((fragCoord.xy*2.) / iResolution.xy) -1.;\n    // Blue/ Orange blend - bit too pinched in the corners still\n    float i1, i2, o1, o2;\n    float inner = mix(0.7, 0.78, sin(iTime));\n    float outer = mix(1.4, 1.2, sin (iTime));\n    float mixvalX = smoothstep(inner, outer, length(uv.x));\n    float mixvalY = smoothstep(inner, outer, length(uv.y));\n    float mixval = mixvalX+mixvalY;\n    fragColor = mix(orange, blue, mixval);\n    \n  \n    // cam setup\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 eye = vec3(0.,0., -550.);\n    vec3 up = vec3(0.,1.,0.);\n    vec3 interest = vec3 (0.);\n    vec3 lookDir = normalize(eye - interest); \n    vec3 right = cross(up, lookDir);\n    float f = 2.9;\n    vec3 p = eye + f*lookDir + uv.x*right + uv.y*up;\n    vec3 rayDir = normalize(eye - p);\n    \n    // interact\n    float xm = iMouse.x - (iResolution.x/2.);\n    float ym = iMouse.y - (iResolution.y/2.);\n    xm *= -1.;\n    ym *= 1.;\n    if(iMouse.z < .5)\n    {\n        xm = sin(iTime*0.8)*380.;\n        ym = cos(iTime*0.7)*300.;\n    }\n    \n    vec3 light = vec3( xm, ym, -800.5);\n    vec3 lightDir = normalize(light - interest);\n    \n    float far = 1000.;\n    float near = 0.;\n    float t = 0.;\n    float d = 0.;\n    int maxS = 190;\n    \n    // raymarch\n    for(int i = 0; i < maxS; i++)\n    {\n        d = map(p + rayDir*t);\n        if(d <= EPSILON1)\n        {\n            vec3 hit = p + rayDir*t; \n            vec3 n = getNorm(hit);\n            float pn = ss(hit, lightDir, 0., 3000., 1.8);\n            fragColor = mix(mix(fragColor, shcol, (1.-pn)), fragColor, pn);\n            break;\n        }\n        \n        t += d;\n        if(t >= far)\n        {\n         \tbreak;   \n        }\n        \n    }\n          \n}","name":"Image","description":"","type":"image"}]}