{"ver":"0.1","info":{"id":"cd3SW2","date":"1688200399","viewed":50,"name":"metaball demo","username":"shicz86","description":"metaball algorithm","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["metaballalgorithm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FILL_CELL_WITH_COLOR\n\nconst int BALL_COUNT = 5;\nconst float CELL_SIZE = 10.;\nconst float BORDER_WIDTH = 1.0;\nconst vec3 BORDER_COLOR = vec3(0.5, 0.8, 0.2);\nconst float SQUARE_SIZE = CELL_SIZE*0.25;\nconst float BALL_RADIUS = 100.0;\nconst float BALL_BORDER_WIDTH = 2.0;\n\nvec2 balls[BALL_COUNT];\n\n// Initialize the ball positions and velocities\nvoid initBalls() {\n    for (int i = 0; i < BALL_COUNT; ++i) {\n        float angle = float(i) / float(BALL_COUNT) * 2.0 * 3.141592;\n        vec2 ballPos = 0.5 * iResolution.xy + vec2(cos(angle), sin(angle)) * 0.25 * iResolution.y;\n        vec2 ballSpeed = vec2(cos(angle + 1.5), sin(angle + 1.5)) * 150.0;\n        balls[i] = ballPos + ballSpeed * sin(iTime * 0.5);\n    }\n}\n\n// Check if a point is inside any of the balls\nbool isInsideAnyBall(vec2 point) {\n    for (int i = 0; i < BALL_COUNT; ++i) {\n        if (distance(point, balls[i]) < BALL_RADIUS) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    initBalls();\n\n    vec2 uv = fragCoord;\n\n    // Set the background color to black\n    vec3 color = vec3(0.0);\n\n    // Get the mouse position in screen space\n    vec2 mousePosition = iMouse.xy;\n\n    // Calculate the grid offset based on the mouse position\n    vec2 gridOffset = mod(mousePosition, CELL_SIZE);\n\n    // Draw the grid with the offset\n    vec3 gridColor = BORDER_COLOR;\n    float lineWidth = BORDER_WIDTH;\n    float lineX = mod(uv.x - gridOffset.x, CELL_SIZE);\n    float lineY = mod(uv.y - gridOffset.y, CELL_SIZE);\n\n    if (lineX < lineWidth || lineY < lineWidth) {\n        color = gridColor;\n    }\n\n    // Draw a square in the center of each cell\n    vec2 cellCenter = (floor((uv - gridOffset) / CELL_SIZE) + vec2(0.5)) * CELL_SIZE + gridOffset;\n    vec2 squareCenterOffset = abs(uv - cellCenter);\n\n    if (squareCenterOffset.x < SQUARE_SIZE / 2.0 && squareCenterOffset.y < SQUARE_SIZE / 2.0) {\n        color = isInsideAnyBall(cellCenter) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 1.0, 1.0);\n    }\n\n#ifdef FILL_CELL_WITH_COLOR\n    if (isInsideAnyBall(cellCenter)) {\n        color = vec3(0.0, 1.0, 0.0);\n    }\n#endif\n\n    // Draw moving balls and their borders\n    for (int i = 0; i < BALL_COUNT; ++i){\n        vec2 ballPos = balls[i];\n        float dist = distance(uv, ballPos);\n\n        // Draw the ball borders\n        if (dist < BALL_RADIUS + BALL_BORDER_WIDTH && dist > BALL_RADIUS - BALL_BORDER_WIDTH) {\n            color = vec3(1.0, 0.0, 0.0);\n        }\n    }\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}