{"ver":"0.1","info":{"id":"tsXyWX","date":"1585690220","viewed":146,"name":"Rainbow Embers","username":"copperTones","description":"Loosely based off of a [url=https://www.youtube.com/watch?v=M4cV0nCIZoc]rock-paper-scissors[\\url] cellular automaton, but continuous.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["rainbow","cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 color, in vec2 coord) {\n    float hue = texture(iChannel0, coord/iResolution.xy).x;\n    color.rgb = cos(6.2831*(hue+vec3(0, -1, 1)/3.))+.5;//easy method\n    color = smoothstep(-.5, 1., color);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define RANGE 1\n#define UPPER .12\n#define LOWER .1\n#define MUTATE .05\n\nfloat hash1( uint n ) {\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return float( n & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\nvoid mainImage(out vec4 cell, in vec2 coord) {\n    uvec3 p = uvec3(coord/1., iFrame);\n    float rand = hash1(p.x + 1920U*p.y + 1920U*1080U*p.z);\n    if (iFrame == 0) {\n    \tcell = vec4(rand);\n    } else {//next frame math\n    \tcell = texture(iChannel0, coord/iResolution.xy);\n        cell.z = 0.;//max diff\n        for (int x = -RANGE; x < RANGE+1; x++)\n        for (int y = -RANGE; y < RANGE+1; y++) {//greatest value in range\n            vec2 g = vec2(x, y);\n            float o = texture(iChannel0, (coord+g)/iResolution.xy).x;\n            \n            float diff = cell.x - o;\n            diff = fract(diff+10.);\n            if (LOWER < diff && diff < UPPER && diff > cell.z) {\n                cell.y = o;\n                cell.z = diff;\n            }\n        }\n        cell = vec4(cell.y + MUTATE*(rand-.5));//mutate\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}