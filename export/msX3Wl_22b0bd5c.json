{"ver":"0.1","info":{"id":"msX3Wl","date":"1666982641","viewed":68,"name":"Integral Plotter (Explicit)","username":"Envy24","description":".","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["graph","integral","plotter","explicit","definite","indefinite"],"hasliked":0,"parentid":"stVcDz","parentname":"Minimal Plotter"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* This method works for explicit ( y=f(x) ) and implicit ( d=f(x,y,...) ) functions. */\n#define R                         ( iResolution )\n#define AR                        ( R.x / R.y )                      // Aspect ratio.\n#define UNIT                      ( 8.0 / R.y )                      // Affects AA and thickness\n#define SMAA(x)                   ( smoothstep(UNIT, 0., x) )\n#define SCENE_SCALE               ( 1.5 )\n\nfloat vertical_line(vec2 NDC, float x0) { return SMAA(abs(NDC.x-x0)); }\nfloat horizontal_line(vec2 NDC, float y0) { return SMAA(abs(NDC.y-y0)); }\nfloat y_axis(vec2 NDC) { return SMAA(abs(NDC.x)); }\nfloat x_axis(vec2 NDC) { return SMAA(abs(NDC.y)); }\nfloat draw_explicit_func(vec2 NDC, float fx, float dfdx)\n{\n    float sdf = NDC.y - fx;\n    return SMAA(abs(sdf) / sqrt(1.0 + dfdx * dfdx)); // absolute value / arclenght over unit length interval\n}\n\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin)\n{\n    /**/\n    vec2 M = \n        iMouse.z > 0. ?\n            iMouse.xy - R.xy * 0.5 : // map xy from [0; R.x][0; R.y] to [-R.x/2; R.x/2][-R.y/2; R.y/2]\n            vec2(0);                 // supress mouse offset\n    SC -= M;                         // apply mouse offset\n    /**/\n    SC = 2. * SC - R.xy;             // map xy from [0; R.x][0; R.y] to [-R.x; R.x][-R.y; R.y]\n    SC /= R.y;                       // map xy from [-R.x; R.x][-R.y; R.y] to [-AR; AR][-1; 1]\n    SC *= scale;                     // map xy from [-AR;AR][-1;1] to [-AR*scale; AR*scale][-scale; scale]\n    \n    return SC - origin;              // shift to new origin.\n}\n\nvec3 colorize_area_under_curve(\n    vec2 NDC,\n    float fx,\n    float dfdx,\n    vec2 range,\n    vec3 color)\n{\n    float sign = \n        fx > 0. ? 1. : -1.;\n    float sdf = (NDC.y - fx);\n\n    vec3 c =\n        (fx >= 0. && NDC.y < 0.) ||\n        (fx < 0. && NDC.y >= 0.) ?\n            color :\n            mix( color, vec3(1,0,1), SMAA(sign*sdf / sqrt(1.0 + dfdx * dfdx)) );\n            \n    return \n        NDC.x >= min(range.x, range.y) &&\n        NDC.x <= max(range.x, range.y) ?\n            c :\n            color;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = map_to_centered_ndc(SC, SCENE_SCALE, vec2(0));\n\n    vec3 color = vec3(1.);\n \n/* Define explicit function and derivative. */\n#define func(x) ( 1./(x) )\n#define dfdx(x) ( -1./((x)*(x)) )\n/**\n#define func(x) ( 1./((x)*(x)) )\n#define dfdx(x) ( -2./((x)*(x)*(x)) )\n/**\n#define FREQ ( 3. )\n#define func(x) ( sin(FREQ*(x)) )\n#define dfdx(x) ( FREQ*cos(FREQ*(x)) )\n/*Numeric derivative*\n#define DX ( 0.01 )\n#define dfdx(x) ( ( func((x)+DX) - func(x) ) / DX )\n/**/     \n    float fx = func(NDC.x), deriv = dfdx(NDC.x);\n\n    \n    float l = sinOSC(-AR * SCENE_SCALE, AR * SCENE_SCALE, iTime*0.3),\n          r = sinOSC(-AR * SCENE_SCALE, AR * SCENE_SCALE, iTime);\n    vec2 range = vec2(l, r);\n    \n    /* Ranges */\n    color -= vertical_line(NDC, l)*.5;  color -= vertical_line(NDC, r)*.5;\n    \n    /* Area under curve. */\n    color = colorize_area_under_curve(NDC, fx, deriv, range, color);\n      \n    /* Explicit function y=f(x) */\n    color = mix(color, vec3(0,1,0), draw_explicit_func(NDC, fx, deriv));\n    \n    /* Coordinates axis */\n    color -= x_axis(NDC); color -= y_axis(NDC);\n\n    /* Cells */\n#define CELL_SIZE 1\n         NDC = mod(NDC, vec2(CELL_SIZE)); \n         color -= vertical_line(NDC, 0.)*.2;  color -= horizontal_line(NDC, 0.)*.2; // comment this line if you not use mod\n         color -= vertical_line(NDC, -1.)*.2; color -= horizontal_line(NDC, -1.)*.2;         \n         color -= vertical_line(NDC, 1.)*.2;  color -= horizontal_line(NDC, 1.)*.2; \n    /* */ \n        \n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}","name":"Common","description":"","type":"common"}]}