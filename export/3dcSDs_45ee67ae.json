{"ver":"0.1","info":{"id":"3dcSDs","date":"1573099639","viewed":105,"name":"Codevember #6 - Music Vis","username":"desertsky","description":"Lightrun Vis!","likes":5,"published":1,"flags":64,"usePreview":0,"tags":["fft","audio","audiovisual","lightrun"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"lls3DX","filepath":"https://soundcloud.com/user-107012861/lightrun03","previewfilepath":"https://soundcloud.com/user-107012861/lightrun03","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float wave;\nfloat fft;\n\nfloat vmax(vec2 v) {\n\treturn max(v.x, v.y);\n}\n\nfloat vmax(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\nfloat vmax(vec4 v) {\n\treturn max(max(v.x, v.y), max(v.z, v.w));\n}\n\t\n\nfloat sphere(in vec3 pos) {\n\tvec3 cen = vec3(0.,0.2,0.);\n\treturn length(cen* fft*5.-pos) -.35*fft*3.5;\n}\n\nfloat fBox(vec3 p, vec3 b) {\n    vec3 cen = vec3(-0.4,1.-2.*fft,-.7);\n\tvec3 d = abs(p)+cen - b;\n\treturn length(max(d, vec3(.3))) + vmax(min(d, vec3(0.)));\n}\n\n\n\nfloat map(vec3 p) {\n    \np = mod(p+2.,4.) - 2.;\n//return length(p) -.35;\n    float s = sphere(p); \n\tfloat b = fBox(p, vec3(1.));\n    return min(s,b);\n}\n\nvec3 GetNormal(vec3 p) \n{\n\tvec2 e = vec2(.001,0);\n    float d = map(p);\n    vec3 n = d - vec3(\n    \tmap(p-e.xyy),\n        map(p-e.yxy),\n        map(p-e.yyx)\n    );\n    return normalize(n);\n}\n\nfloat CastRay(in vec3 ro, vec3 rd) {\n  \n    float t = 0.0;\n        \n    for (int i = 0; i < 120; i++) {\n    \n        vec3 pos = ro + rd * t;\n\n        float h = map(pos);\n        \n        if(h<.001) break;\n        t+=h;\n        if(t>20.0) break;\n    }\n    return t;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.*fragCoord -iResolution.xy)/iResolution.y;\n    \n    //from https://www.shadertoy.com/view/Xds3Rr\n    int tx = int(p.x/3.);\n\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\t fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x; \n\n    // second row is the sound wave, one texel is one mono sample\n    wave = texelFetch( iChannel0, ivec2(tx,1), 0 ).x;\n    \n    vec3 ro = vec3(\n    0., \n    2.,\n    iTime*3.4);\n     vec3 ta = vec3(0.,0.,0.);\n\n    vec3 ww = normalize(ta - ro); //forward\n\n    vec3 uu = normalize (cross(ww,vec3(0,1,0))); // right?\n\n    vec3 vv = normalize(cross(uu,ww) ); // up?\n    vec3 rd = normalize(p.x*uu + p.y*vv + 1.5*ww);\n\n    vec3 col = (vec3(0.65,0.75,0.9)-0.5*rd.y)/1.5;\n\t\n    \n\tfloat t = CastRay(ro,rd);\n    \n    \n    \n    \n    if(t<20.) {\n    \n        //base \n        col = vec3(.99*p.x+fft,.36,p.y+fft/8.);\n\n    \tvec3 pos = ro + t * rd;\n \n    \n        vec3 sun_dir = vec3(1,1,0);\n    \tvec3 nor = GetNormal(pos);\n        float sun_dif = clamp(dot(nor,sun_dir),0.,1.);\n        col += sun_dif;\n        //col+= vec3(.3+fft*2.,.3+fft*.5,.3+fft*2.);\n            \n    }\n    \n    //prettier without faux-gamma\n    //col = pow(col, vec3(.4545));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}