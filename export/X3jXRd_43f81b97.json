{"ver":"0.1","info":{"id":"X3jXRd","date":"1710963940","viewed":79,"name":"Replacement Looping (1D)","username":"incre_ment","description":"Replacement looping in 1D using domain repetition (no for-loops).\nEach primitive replaces the next from t=0 to t=1.\nOriginally used this technique in Processing, and learned from a @Bleuje tutorial: \nhttps://bleuje.com/tutorial4/","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["domainrepetition","looping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Replacement looping in 1D using domain repetition (no for-loops).\n// Each primitive replaces the next from t=0 to t=1.\n// Originally used this technique in Processing, and learned from a \n// @Bleuje tutorial: https://bleuje.com/tutorial4/\n\nfloat PI = 3.14159256;\nfloat TAU = 2.0*3.14159256;\n\nfloat func(float xVal){\n  return 4.*sin(xVal);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.);\n    \n    float tt = fract(iTime);\n    \n    float scale = 12.;\n    uv*= scale;\n    \n    // Cells -> 0,1,2,3,4...\n    float xCellID = floor(uv.x);\n    \n    // each x-cell ranges from 0 -> 1\n    uv.x = fract(uv.x);\n    \n    // Compute x values (motion) for current and neighbor in each x-dir\n    // Technically, all this neighbor checking could be a for-loop.\n    float x = mix(xCellID, xCellID + 1., tt);\n    float x2 = mix(xCellID - 1., xCellID + 0., tt);\n    float x3 = mix(xCellID + 1., xCellID + 2., tt);\n    \n    // scale the x values to desired fuction (func) input.\n    x *= TAU/scale;\n    x2 *= TAU/scale;\n    x3 *= TAU/scale;\n\n    // Calculate the circle SDF of all three (current and neighbors) and take the min\n    float circ1 = length(uv - vec2(tt,func(x))) - .4;\n    float circ2 = length(uv - vec2(tt,func(x2)) + vec2(1.0,0.)) - .4;\n    float circ3 = length(uv - vec2(tt,func(x3)) + vec2(-1.0,0.)) - .4;\n    float circ_min = min(circ1, min(circ2, circ3));\n\n    // DEBUG\n    // col += uv.x;    \n\n    float w = 20./iResolution.y;\n    col += smoothstep(w,-w,circ_min);\n    fragColor = vec4( col, 1.0 );;\n}","name":"Image","description":"","type":"image"}]}