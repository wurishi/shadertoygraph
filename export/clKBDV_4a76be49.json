{"ver":"0.1","info":{"id":"clKBDV","date":"1702519029","viewed":27,"name":"Fork SDF Intersection Detection","username":"kurrycat","description":"WIP\nFind out whether signed distance fields intersect. Should work with all bound sdfs, but pretty slow\nWhen not clicking shows whether an intersection was found for the object being at the position of that pixel","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"dtGBWD","parentname":"SDF Intersection Detection test"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Uncomment to show scene\n//#define SHOW_SCENE\n\nfloat map_world(vec2 p) {\n    float d = sdRoundBox(p - vec2(-0.0), vec2(1.2, 0.9), vec4(0.1));\n    d = abs(d) - 0.07;\n    float c = sdStar(p - vec2(-0.8), 0.4, 5, 3.5);\n    d = max(d, -c);\n    float d2 = sdRoundBox(p - vec2(0.3), vec2(0.4), vec4(0.1));\n    d2 = abs(d2) - 0.07;\n    float d3 = sdSegment(p, vec2(-0.6), vec2(0.4));\n    float d4 = sdCircle(p - vec2(-0.5, 0.2), 0.05);\n    \n    float t = d;\n    t = min(t, d2);\n    t = min(t, d3);\n    t = min(t, d4);\n    return t;\n}\n\nfloat map(vec2 p, vec2 test_p) {\n    float c = sdStar(p - test_p, 0.2, 5, 3.5);\n    //c = abs(c) - 0.1;\n    float c2 = sdCircle(p - test_p - vec2(0.1), 0.1);\n    c = max(c, -c2);\n    \n    float t = map_world(p);\n#ifndef SHOW_SCENE\n    t = max(t, c);\n#else\n    t = min(t, c);\n#endif\n    return t;\n}\n\nvec2 grad_world(vec2 p, float EPSILON) {\n    vec2 v = vec2(\n            map_world(vec2(p.x + EPSILON, p.y)) - map_world(vec2(p.x - EPSILON, p.y)),\n            map_world(vec2(p.x, p.y + EPSILON)) - map_world(vec2(p.x, p.y - EPSILON))\n    );\n    float l = length(v);\n    return l == 0.0 ? vec2(0.0) : v / l;\n}\n\nvec2 grad(vec2 p, vec2 test_p, float EPSILON) {\n    vec2 v = vec2(\n            map(vec2(p.x + EPSILON, p.y), test_p) - map(vec2(p.x - EPSILON, p.y), test_p),\n            map(vec2(p.x, p.y + EPSILON), test_p) - map(vec2(p.x, p.y - EPSILON), test_p)\n    );\n    float l = length(v);\n    return l == 0.0 ? vec2(0.0) : v / l;\n}\n\nstruct Step {\n    vec2 last_p;\n    vec2 p;\n    vec2 last_grad;\n    vec2 grad;\n    float dt;\n};\n\nstruct Result {\n    vec2 p;\n    bool found;\n};\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n#ifndef SHOW_SCENE\n    vec2 test_p = iMouse.z > 0.001 ? m : p;\n#else\n    vec2 test_p = iMouse.z > 0.001 ? m : vec2(0.0);\n#endif\n\n\tfloat d = map(p, test_p);\n\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    // should be the maximum possible distance to an intersection to be efficient, but can be bigger\n    // circle radius: 0.3 -> 0.61\n    const float MAX_DT = 0.61;\n    const float MAX_DT_SQR = MAX_DT * MAX_DT;\n    const float MIN_DT = 1.0e-4f;\n    const float EPSILON = MIN_DT / 10.0;\n \n    d = map(test_p, test_p);\n    //col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-test_p)-abs(d))-0.0025));\n    //col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-test_p)-0.015));\n\n#ifndef SHOW_SCENE\n    Result res = Result(vec2(0.0), false);\n    vec3 p_col = vec3(0.0, 1.0, 0.0);\n    if (d < MAX_DT / 2.0) {\n        vec2 p_grad = grad(test_p, test_p, EPSILON);\n\n        float dot_p = dot(p_grad, vec2(1.0, 0.0));\n        float angle = atan(-p_grad.y, dot_p);\n\n        // Align right vectors with gradient (rotation from\n        mat2 align_mat = mat2(\n            cos(angle), -sin(angle),\n            sin(angle), cos(angle)\n        );\n\n        mat2 mats[2] = mat2[2](align_mat, ROT45*align_mat);\n\n        Step steps[8];\n        for (int i = 0; i < 8; i++) {\n            vec2 grad = vec2(float(((i/2)-1) % 2), float(((i/2)-2) % 2));\n            grad = mats[i % 2] * grad;\n            vec2 p = test_p - grad * d;\n            steps[i] = Step(test_p, p, grad, grad, map(p, test_p));\n        }\n\n        const int points = 11;\n        int loops = int(iTime * 1.5) % points;\n        loops = 5;    \n        for (int loop = 0; !res.found && loop < loops; loop++) {\n            for (int i = 0; i < 8; i++) {\n                float n_d = sdSegment(p, steps[i].last_p, steps[i].p);\n                col = mix(col, vec3(1.0, 1.0, 0.0), 1.0-smoothstep(0.0, 0.005, abs(n_d))-0.0005);\n                col = mix(col, vec3(1.0, 1.0, 0.0), 1.0-smoothstep(0.0, 0.005, length(p-steps[i].p) - 0.003));\n\n                vec2 g = grad(steps[i].p, test_p, steps[i].dt);\n                g = face_same_dir(steps[i].last_grad, g);\n                steps[i].last_grad = steps[i].grad;\n                steps[i].grad = g;\n                steps[i].last_p = steps[i].p;\n                steps[i].p -= steps[i].grad * steps[i].dt;\n                steps[i].dt = map(steps[i].p, test_p);\n\n                if (!res.found && steps[i].dt <= MIN_DT) {\n                    res = Result(steps[i].p, true);\n                    p_col = vec3(1.0, 0.0, 0.0);\n                    col = mix(col, vec3(0.0, 1.0, 0.0), 1.0-smoothstep(0.0, 0.005, length(p-steps[i].p) - 0.007));\n                }\n            }\n        }\n    } else {\n        p_col = vec3(0.0, 0.0, 1.0);\n    }\n    \n    if (iMouse.z <= 0.001) {\n        col = p_col;\n    }\n#endif\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 face_same_dir(vec2 normal, vec2 v) {\n    float d = dot(v, normal);\n    return normal.x == 0.0 && normal.y == 0.0 || v.x == 0.0 && v.y == 0.0 || d == -1.0 ? \n        vec2(0.0)\n        : d < 0.0 ? normalize(v + normalize(v - d * normal)) : v;\n}\n\nconst float SQRT2HALFS = sqrt(2.0) / 2.0;\nconst mat2 ROT45 = mat2(SQRT2HALFS, -SQRT2HALFS, SQRT2HALFS, SQRT2HALFS);\nconst mat2 ROT90 = mat2(0.0, 1.0, -1.0, 0.0);\n\n//sdf functions from iq:\n\n// The MIT License\n// Copyright Â© 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), \n// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, \n// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: \n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org\n\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n// and iquilezles.org/articles/distfunctions2d\n\n\n// b.x = width\n// b.y = height\n// r.x = roundness top-right  \n// r.y = roundness boottom-right\n// r.z = roundness top-left\n// r.w = roundness bottom-left\nfloat sdRoundBox( in vec2 p, in vec2 b, in vec4 r ) \n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdCircle(in vec2 p, in float r) {\n    return length(p) - r;\n}\n\nfloat sdStar( in vec2 p, in float r, in int n, in float m)\n{\n    // next 4 lines can be precomputed for a given shape\n    float an = 3.141593/float(n);\n    float en = 3.141593/m;  // m is between 2 and n\n    vec2  acs = vec2(cos(an),sin(an));\n    vec2  ecs = vec2(cos(en),sin(en)); // ecs=vec2(0,1) for regular polygon\n\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n    p -= r*acs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);\n    return length(p)*sign(p.x);\n}","name":"Common","description":"","type":"common"}]}