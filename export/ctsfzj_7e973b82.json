{"ver":"0.1","info":{"id":"ctsfzj","date":"1693210042","viewed":45,"name":"Red cell","username":"zma","description":"Playing grid with noise and get this :)   resource:[url]https://thebookofshaders.com/12/[/url]","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","grid","pt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 random2(vec2 st){\n//    st = vec2( dot(st,vec2(127.1,311.7)),\n//              dot(st,vec2(269.5,183.3)) );\n      st *= mat2(127.1,311.7,269.5,183.3);\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\n\n#define OCTAVES 6\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 2.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * (noise(st));\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 st = fragCoord.xy/iResolution.xy;\n    \n    st*=10.;\n   \n    float t = iTime;\n    float r = 0.37;\n    //st *= noise(st+distance( st+t, c));\n        \n    vec3 color =vec3(0.);\n    \n    //grid\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    \n    float min_d = 1.;\n    \n    \n    for(int y = -1; y <= 1; y++){\n       for(int x = -1; x <= 1; x++){\n           vec2 neighbour = vec2 (float(x), float(y));\n           vec2 point = random2(i + neighbour);\n           //movement\n           point = 0.5 + abs(0.5*sin(t + 1.57*point));\n           \n           vec2 diff = point + neighbour - f;\n           float dist = length(diff);\n           min_d = min(min_d, dist+fbm(point));\n     \n       }\n       }\n    \n    \n    \n       \n    //color\n    vec3 orangecell = vec3(0.7, 0.2, 0.);\n        \n    color = (1.-min_d)*orangecell;\n   \n    \n    fragColor = vec4(color,1);\n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}