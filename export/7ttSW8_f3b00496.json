{"ver":"0.1","info":{"id":"7ttSW8","date":"1639057044","viewed":191,"name":"Debris","username":"_pwd_","description":"Feels like debris in watery motion. Click to turn around. ","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","deformation","cells"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Based on @glktÂ´s \"Alien Core\"\n// https://www.shadertoy.com/view/4tcXRr\n//\n//\n// -> adding my 50 cents...\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n\nvec3 rotateY(vec3 v, float t){\n    float cost = cos(t); float sint = sin(t);\n    return vec3(v.x * cost + v.z * sint, v.y, -v.x * sint + v.z * cost);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n\nfloat noise(vec3 p){\n    \n    float t = iTime;\n    vec3 np = normalize(p);\n    \n    // kind of bi-planar mapping\n    float a = texture(iChannel0,t/20.+np.xy).x;      \n    float b = texture(iChannel0,t/20.+.77+np.yz).x;\n    \n    a = mix(a,.5,abs(np.x));\n    b = mix(b,.5,abs(np.z));\n    \n    float noise = a+b-.4;    \n    noise = mix(noise,.5,abs(np.y)/2.);\n        \n    return noise;\n}\n\n\nvec3 cellpos;\nvec3 signvec;\nvec3 subpos;\nfloat fsign;\n\nfloat cells(vec3 pos) {\n\n    cellpos=pos-floor(pos);\n\n    signvec=2.0*step(0.5,cellpos)-1.0;\n    fsign=signvec.x*signvec.y*signvec.z;\n\n    subpos=abs(abs(cellpos-0.5)-0.25);\n\n    return fsign*(max(max(subpos.x,subpos.y),subpos.z)-0.25);\n}\n\n\n\nfloat map(vec3 p){\n    \n    float d = (-.5*length(p)+1.5)+.5 + cells(p)*5.15;    \n    float m = .75; float s = .23;    \n    \n    d = smin(d, max( abs(p.z)-s, abs(p.x+p.y/1.)-.07 ) + cells(p)*0.21, m + sin(iTime) * 0.01);\n    \n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n\tvec2 uv = fragCoord.xy * 2.0 / iResolution.xy - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 ray = normalize(vec3(1.*uv.x,1.*uv.y,2.5));\n        \n    vec3 color = vec3(0.);    \n    const int rayCount = 2048;\n    \n    // Raymarching\n    float t = 0.;\n    for (int r = 1; r <= rayCount; r++)\n    {\n        // Ray Position\n        vec3 p = vec3(0,0,-3.) + ray * t;        \n        \n        // Rotation \n       \tp = rotateY(p, iMouse.x/iResolution.x * 2.* 3.14);  \n        p = rotateY(p,iTime/3.);\n        \n        // Deformation \n    \tfloat mask = max(0.,(1.-length(p/3.)));\n    \tp = rotateY(p,mask*sin(iTime/2.)*1.2);        \n        p.y += sin(iTime+p.x)*mask*.5;\n        p.z += sin(iTime+p.x)*mask*1.5;\n        p *= 1.1+(sin(iTime/2.)*mask*.3);\n\n        // distance\n        float d =  map(p);   \n        \n        //color\n        if(d<0.01 || r == rayCount )\n        {                 \n            \n            float iter = float(r) / float(rayCount);\n            float ao = (1.-iter);\n            ao*=ao;\n            ao = 1.-ao;\n                        \n            float mask = max(0.,(.2-length(p/2.)));                       \n            color += 2.*vec3(.1,.5,.2) * max(0.,(noise(p)*14.-12.6)) * mask;            \n            color += vec3(.1,.5,.6) * ao * 6.;            \n            color += vec3(.17,.2,.84)*(t/18.);\n                        \n            break;          \n        }\n        \n        t +=  d *.1;        \n    }\n    \n    // vignetting effect by Ippokratis\n    // https://www.shadertoy.com/view/lsKSWR\n    uv = fragCoord.xy / iResolution.xy;\n    uv *=  1.0 - uv.yx; \n    float vig = uv.x*uv.y * 20.0;    \n    vig = pow(vig, 0.25);        \n    color *= vig;\n    \n    //color adjustement\n    color.y *= 1.8;\n    color.x *= 1.5;\n    \n\tfragColor = vec4(color, 1);\n}","name":"Image","description":"","type":"image"}]}