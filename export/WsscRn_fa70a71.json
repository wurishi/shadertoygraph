{"ver":"0.1","info":{"id":"WsscRn","date":"1584006846","viewed":103,"name":"triangle from scratch","username":"HaleyHalcyon","description":"experiment","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["experiment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265;\n\nbool checkLine(vec2 pos, float r, float angle)\n{\n    angle = mod(angle, 2.0 * PI);\n    if (angle == 0.0) {\n        return (pos[0] <= r);\n    }\n    if (angle == PI) {\n        return (-r <= pos[0]);\n    }\n    if (angle == PI / 2.0) {\n        return (pos[1] <= r);\n    }\n    if (angle == 1.5 * PI) {\n        return (-r <= pos[1]);\n    }\n    float b = r / sin(angle);\n    float m = -1.0 / tan(angle);\n    if (b < 0.0) {\n        return (m * pos[0] + b < pos[1]);\n    } else {\n        return (m * pos[0] + b > pos[1]);\n    }\n}\n\nbool triangle(vec2 point, vec2 center, float r, float angle)\n{\n    vec2 pos = point - center;\n    if (checkLine(pos, r, angle) && checkLine(pos, r, angle + PI / 1.5) && checkLine(pos, r, angle - PI / 1.5)) {\n        return true;\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates\n    float scale = min(iResolution.x, iResolution.y);\n    vec2 uv = fragCoord / scale;\n\tuv -= iResolution.xy / scale / 2.;\n    uv *= 2.;\n\n    // Time varying pixel color\n    vec3 colTriangle = vec3(1.0);\n    vec3 col = vec3(0.0);\n    \n    vec2 center = vec2(sin(iTime * 1.4), cos(iTime * 1.75));\n    \n    if (triangle(uv, center, 0.2, PI * iTime)) {\n        col = vec3(1.0);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}