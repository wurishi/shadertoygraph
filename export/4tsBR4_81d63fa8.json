{"ver":"0.1","info":{"id":"4tsBR4","date":"1511176363","viewed":155,"name":"Interactive Basics","username":"Sedawrath","description":"Walkthrough","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["walkthrough"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.youtube.com/watch?v=bigjgiavOM0\n\nfloat sdBand(float t, float s, float e, float b) {\n    float s1 = smoothstep(s-b, s+b, t);\n    float s2 = smoothstep(e+b, e-b, t);\n    return s1 * s2;\n    \n}\n\nfloat sdRectangleBlur(vec2 uv, vec2 p, float w, float h, float b){\n    uv -= p;\n    float r = 0.0;\n    r += sdBand(uv.x, -w/2.0, +w/2.0, b);\n    r *= sdBand(uv.y, -h/2.0, +h/2.0, b);\n\treturn r;\n}\n\nfloat sdSphereBlur(vec2 uv, vec2 p, float r, float b) {\n    \n    float d = length(uv-p);\n    return smoothstep(r, r - b, d);\n}\n\nvec2 CorrectAspectRatio(vec2 vec, vec2 iRes)\n{\n    vec = (( vec / iRes.xy) * 2.0) - 1.0;\n    vec.x *= iRes.x / iRes.y;\n    return vec;\n}\n\nconst float INVERSE_MAX_UINT = 1.0 / 4294967295.0;\n \n// The GPU version of rand()\nfloat rand(uint seed, float range)\n{\n    uint i = (seed ^ 12345391u) * 2654435769u;\n    i ^= (i << 6u) ^ (i >> 26u);\n    i *= 2654435769u;\n    i += (i << 5u) ^ (i >> 12u);\n    return float(range * float(i)) * INVERSE_MAX_UINT;\n}\n \n// Helper function for rand()\nfloat ra(uint seed)\n{\n    return rand(seed++, 2.0) - 1.0;\n}\n\nvec3 Colouring(vec2 uv, vec2 p, float iMd)\n{\n    uv = uv-p;\n    \n    uint seed = uint(length(uv) / 0.1);\n    vec3 c = vec3(0.0);\n    vec3 r = vec3(ra(seed++), ra(seed++), ra(seed++));\n    \n    r = (r / .5) * (sin(1./iTime) + 1.0);\n    \n    // Warps perspective of colours\n    c.r = r.r * (uv.x+1.0);//* sin(r.r * iTime);\n    c.g = r.g * (uv.y+1.0);//* cos(r.g * iTime);\n    c.b = c.r + r.b;// * (0.1 * sin(length(c - uv.xyx) * iTime));\n    \n    c /= length(c) * sin(iTime);\n    \n    c.r /= mod(c.g, c.r);\n    c.g /= mod(c.b, c.g);\n    c.b /= mod(c.r, c.b);\n    c -= 0.5;\n   \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // UV definition\n    float m = 0.0;\n    vec3 c = vec3(0.0);\n    \n\tvec2 uv = CorrectAspectRatio(fragCoord.xy, \tiResolution.xy);\n    vec2 iM = CorrectAspectRatio(iMouse.xy, \tiResolution.xy);\n    float iMDelta = length(iM.xy - uv.xy) * 4.0;\n    \n    vec2 p = vec2(sin(iTime), cos(iTime)) * .01;\n    c = Colouring(uv, p, iMDelta);\n    \n    \n    uv = sin(uv - p) * (iMDelta);\n    \n    m += sdSphereBlur(uv, vec2(0.0), 1.0, 0.1);\n    \n\t\n    m -= 1.0;\n    \n    c = (c*m) + 1.0;\n\tfragColor = vec4(vec3(c),1.0);\n}","name":"Image","description":"","type":"image"}]}