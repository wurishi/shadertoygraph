{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Created by vincent francois - cyanux/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Fast rotation algorithm with  -1.0 <= t <= 1.0\n// I simply used a limited development of Taylor (Taylor series in english..)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy  - vec2(0.5);\n\tfloat t = mod(iTime, 2.0) - 1.0;\n\t// Taylor series of cosinus and sinus\t\n\tfloat COS = 1.0 - t*t*0.5;\n\tfloat SIN = t - t*t*t*0.167;\n\t// Traditionnal formulas\n\tvec2 pt = vec2(uv.x*COS-uv.y*SIN, uv.x*SIN+uv.y*COS);\n\t// Drawing\t\n\tif(abs(pt.x + 0.24) + abs(pt.y) < 0.025) {\n\t\tfragColor = vec4(0.5);\n\t\treturn;\n\t}\t\t\n\tfloat d = abs(pt.x)+abs(pt.y);\t\n\tif(d < 0.25) {\n\t\tfragColor = vec4(mod(d * 10.0, 1.0));\n\t\treturn;\n\t}\t\n\t// Reuse unnecessary variables (t, pt and d)\n\tt = mod(iTime, 0.8) + 0.2;\n\tpt = mod(uv, vec2(0.02)) - 0.5 * vec2(0.02);\n\td = min(pow(pow(abs(pt.x), t) + pow(abs(pt.y), t), 1.0 / t) - 0.01, 0.0);\n\tif(d != 0.0) fragColor = vec4(uv.y + 0.25);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldXSD7","date":"1402173939","viewed":198,"name":"FastRotation","username":"cyanux","description":"Fast rotation algorithm with  -1.0 <= t <= 1.0. I simply used a limited development of Taylor (Taylor series in english...)\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["math","rotation"],"hasliked":0,"parentid":"","parentname":""}}