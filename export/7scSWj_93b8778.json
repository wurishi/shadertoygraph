{"ver":"0.1","info":{"id":"7scSWj","date":"1633947764","viewed":63,"name":"ðŸŽ® Kukoos - Lost Pets ðŸŽ®","username":"rmmcal","description":"Fan-art","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["kukoos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////////////////////////////////////////////////////////////\n//       ...  ðŸŽ® Kukoos - Lost Pets ðŸŽ®  ...             ////\n/////////////////////////////////////////////////////////////\n//  Fan Art by Rodrigo Cal (twitter: @rmmcal)\n// - Published: 2021/10\n// - https://www.shadertoy.com/view/7scSWj\n/////////////////////////////////////////////////////////////\n\nconst float pi = 3.1415926;\nconst float pi2 = 2.*pi;\nconst float rad = pi/180.;\n\n///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\n// https://iquilezles.org/articles/distfunctions\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); \n}\n\n///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\n\nmat2 rotate(float x){\n    float c = cos(x);\n    float s = sin(x);\n    return mat2(c,s,-s,c);\n}\n\nfloat dist(vec3 p)\n{\n    float d = 100.;\n    p.xz *= rotate(cos(iTime)*.4);    \n    p -= vec3(0.,-0.5,0.);\n    \n    float t = cos(iTime*8.)*.05;\n    float t2 = cos(iTime*9.)*.05;\n    float t3 = cos(iTime*12.)*.05;\n    float t4 = cos(iTime*9.)*.2+.8;\n    float t5 = cos(iTime*3.)*.2-.2;\n   \n    vec3 pr = vec3(sign(p.x),1.0,1.0);  // repeat x\n    vec3 pr1 = vec3(sign(p.x),1.+t2,1); // repeat x ani1\n    vec3 pr2 = vec3(sign(p.x),1.+t3,1); // repeat x ani2   \n    vec3 pa = p*pr2+vec3(0.,-cos(p.x)*0.7+.5,0.); // pos repeat\n\n    vec3 ph = vec3(-2.7,-2.6 + t,0.5); // pos hand\n    vec3 pf = p*pr+vec3(-0.7,1.9,0.2); // pos foot\n    pf += vec3(0., cos(sign(p.x) + t3)-.5,0.);\n\n    vec3 m1 = vec3(1.,cos(p.x*3.+.2 +t5 )*+t4,1.); // mouth ani 1\n    vec3 m2 = vec3(0.,-.2,0.);                     // mouth ani 2\n    vec3 pm = vec3(0.,.5,0.);                      // mouth \n\n\n    // body\n    d = opSmoothUnion(d, sdCapsule(p*vec3(1.,pow(abs(p.y),.5)/1.5,1.), vec3(0.), vec3(0., 1.3, 0.0), 1.5), 1.5);\n\n    // face\n    d = opSmoothUnion(d, sdCapsule((p-vec3(0.,1.,0.))*vec3(1.,pow(abs(p.y),1.)/1.5,1.), vec3(0.,-.3,-0.1), vec3(0., .6, -0.1), 1.44), .0);\n\n    //eye\n    d = opSmoothUnion(d, sdCapsule(p*pr1, vec3(0.25, 1.2, -1.5), vec3(0.25, 1.0, -1.5), 0.15), .06);\n\n    // eyebrow\n    d = opSmoothUnion(d, sdCapsule(p*pr1 + vec3(0.,-0.1+cos(abs(p.x)*2.+2.-t)*.5+.5,0.), vec3(0.6, 1.6, -1.35), vec3(0.25, 1.6, -1.5), 0.1), .03);\n\n    // arm\n    d = opSmoothUnion(d, sdCapsule(pa, vec3(2.7, 2.6, -.5), vec3(.55, -.6, -.5), 0.25), .33);\n\n    //clothes\n    d = opSmoothUnion(d, sdCapsule(pa, vec3(2.3, 2.0, -.5), vec3(.55, -.6, -.5), 0.3), .01);\n\n    // hand\n    d = opSmoothUnion(d, sdSphere((pa+ph),  0.4), .2);\n\n    // foot\n    d = opSmoothUnion(d, opSmoothSubtraction(pf.y, sdSphere(max(vec3(-100.,0.,-100.), pf),  0.6), .2 ), .15);\n\n    // mouth\n    d = opSmoothSubtraction(sdCapsule((p-pm)/m1 -m2, vec3(0.2, 0.0, -1.5),  vec3(-0.2, 0.0, -1.5), 0.15), d, .06);\n\n    // tooth\n    d = opSmoothUnion(d, sdCapsule(p*pr, vec3(0.2, .6, -1.4), vec3(0.2, 0.45, -1.4), 0.06), .02);\n\n    // ear\n    d = opSmoothUnion(d, sdSphere((p*pr +vec3(-1.7,-1.4 + t*.1, .2)) * vec3(.4,.4, 1.),  0.1), .13);\n\n\n    return d;\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec2 d = vec2(0., 0.01);\n    float x = dist(p-d.yxx);\n    float y = dist(p-d.xyx);\n    float z = dist(p-d.xxy);\n    return normalize(vec3(x,y,z)-dist(p));\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pc = (uv-.5)*vec2(1, iResolution.y/iResolution.x);\n    vec3 p = vec3(0,0.,-10);\n    vec3 d = normalize(vec3(pc,1.0));\n    \n    d *= setCamera(p, vec3(0.,0.,0.),0.);\n    \n    vec3 c=vec3(0.0);\n    float t = 0.;\n    for (int i = 0 ; i < 30; i++)\n    {\n        float h=dist(p); \n        if (h < 0.01)\n         break;\n        t+=h;\n        p += d*h;\n    }\n     \n    c += getNormal(p).z;\n    fragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"}]}