{"ver":"0.1","info":{"id":"MXSfWy","date":"1732180476","viewed":68,"name":"с днем ​​рождения","username":"sedenion","description":"for my mother's birthday\n\nhow can i reduce compile time ?","likes":6,"published":1,"flags":0,"usePreview":1,"tags":["alphabet","birthday","letter","cyrillic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// for my mother's birthday\n\n#define MAX_DIST 40.\n#define MIN_DIST 0.005\n#define MAX_ITER 50\n\nuint murmurHash11(uint src) {     // https://www.shadertoy.com/view/ttc3zr\n    const uint M = 0x5bd1e995u;\n    uint h = 1190494759u;\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\n// 1 output, 1 input\nfloat hashM(float src) {\n    uint h = murmurHash11(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\n\nfloat wave(vec2 p, float i){\n    p = p*rotateX2D(i*1.1);\n    float b = sin( 2.*sin(p.x*hashM(1.5*i)/(1.+i))*(i+1.) + sin(p.x/(1.+i))*(i+1.) +p.y +sin(p.y) +iTime*hashM(i*1.5)*5.);\n    return 0.3*pow(3.,b);\n}\n\n\nfloat fbm(vec2 uv){\n    float fbmNoise = 0.0;\n    float amplitude = .5;\n    float frequency = 1.5;\n    int octaves = 5;\n    \n    for(int i = 0; i< octaves + min(0, iFrame); i++){\n        fbmNoise += amplitude*wave(uv,float(i));\n        amplitude *= 0.5; \n        uv *= frequency;\n    }\n    \n    return fbmNoise*0.2;\n}\n\nfloat sdParticles(vec3 pos)\n{   \n    const float mult = 8.;\n   \n    vec3 p = pos;\n    p.x = p.x-round(p.x/mult)*mult;\n    p.z = -p.z-abs(round(p.z/mult)*mult);\n    p.y += sin(pos.x);\n    float shiftX = sin(round(pos.x/mult)/mult)*(iTime*3.+5474.145);\n    float shiftZ = sin(round(pos.z/mult)/mult)*(3.+5474.145);\n\n    p.y+=-30.*(fract(shiftX)+fract(shiftZ));\n    \n    float d = length(p) - pow(fract(-shiftX)+fract(-shiftZ),2.)*0.5 ;\n    \n    d = d*0.5;\n    \n    d = min(d,sdHeart((pos+vec3(sin(iTime)*2.+8.,-10.-fract(iTime*0.5)*20.,-7))*rotateY(iTime*2.5)));\n    d = min(d,sdHeart((pos+vec3(cos(iTime)*2.-8.,-10.-fract(iTime*0.5+0.5)*20.,-7))*rotateY(iTime*2.5)));\n\n    return d*0.5;\n}\n\n#define shsin(x) sin(iTime+x)*0.5\n\nvec2 letters(vec3 p){\n    vec2 res = vec2(sdC(p+    vec3(-5,-2.-0.85+shsin(0.),0)), 0);\n    \n    res = opU(res,vec2(sdD(p+ vec3(-1.3,-2.+shsin(1.),0)), 1));\n    res = opU(res,vec2(sdN(p+ vec3( 1,-2.+shsin(2.),0)), 2));\n    res = opU(res,vec2(sdE(p+ vec3( 3,-2.+shsin(3.),0)), 3));\n    res = opU(res,vec2(sdM(p+ vec3( 5,-2.+shsin(4.),0)), 4));\n    \n    res = opU(res,vec2(sdR(p+ vec3( -7.5,2.+shsin(5.),0)), 5));\n    res = opU(res,vec2(sdO(p+ vec3( -5.5,2.-0.85+shsin(6.),0)), 6));\n    res = opU(res,vec2(sdZH(p+vec3( -3.4,2.+shsin(7.),0)), 7));\n    res = opU(res,vec2(sdD(p+ vec3( -0.8,2.+shsin(8.),0)), 8));\n    res = opU(res,vec2(sdE(p+ vec3( 1.5, 2.+shsin(9.),0)), 9));\n    res = opU(res,vec2(sdN(p+ vec3( 3.4, 2.+shsin(10.),0)), 10));\n    res = opU(res,vec2(sdI(p+ vec3( 5.5, 2.+shsin(11.),0)), 11));\n    res = opU(res,vec2(sdJA(p+vec3( 7.5, 2.+shsin(12.),0)), 12));\n    return res;\n}\n\nvec2 map(vec3 p){\n    vec2 res = letters(p);\n    \n    float d = p.y-fbm(p.xz)+3.5;\n    res = opU(res, vec2(d,13));\n    \n    res = opsU(res,vec2(sdParticles(2.*p-vec3(0,-20.,-1)),14), 0.5); \n    \n    return res;\n}\n\nvec2 rayMarch(vec3 ro, vec3 rd){\n    float ttDist = 0.;\n    float mat = -1.;\n    for(int i = 0; i<MAX_ITER  + min(0, iFrame); i++){\n\n        vec3 pos =  ro+ttDist*rd;\n        vec2 res = map(pos);\n        float dist = res.x;\n        ttDist+=dist;\n        mat = res.y;\n        if (abs(dist) < MIN_DIST || ttDist > MAX_DIST) {\n            //ttDist-=MIN_DIST;\n            break;\n        };\n    }\n    return vec2(ttDist, mat);\n}\n\nfloat softShadow(vec3 ro,vec3 rd, float mint, float maxt, float w )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<4  + min(0, iFrame) && t<maxt; i++ )\n    {\n        float h = letters(ro + t*rd).x;\n        res = min( res, h/(w*t) );\n        t += clamp(h, 0.005, 0.50);\n        if( res<-1.0 || t>maxt ) break;\n    }\n    res = max(res,-1.0);\n    return 0.25*(1.0+res)*(1.0+res)*(2.0-res);\n    // https://iquilezles.org/articles/rmshadows/\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005;\n    return normalize(\n      e.xyy * map(p + e.xyy).x +\n      e.yyx * map(p + e.yyx).x +\n      e.yxy * map(p + e.yxy).x +\n      e.xxx * map(p + e.xxx).x);\n}\n\nvec3 getRayDirection(vec2 uv, vec3 origin, vec3 direction){\n    float focalLength = 1.;\n    float vfov = 90.; //vertical field of view\n    \n    float h = focalLength * tan(radians(vfov)/2.); // half of vertical sensor size\n    \n    vec3 fixedUp = vec3(0,1,0);\n    vec3 front = normalize(direction - origin);\n    vec3 right = -normalize(cross(front, fixedUp));\n    vec3 up = cross(front, right);  \n    \n    return normalize(h*uv.x*right + h*uv.y*up + front*focalLength);\n}\n\nvec3 lightPos = vec3(2,3,2)*1.5;\nvec3 sunDir = normalize(vec3(0,0.3,-1));\nvec3 bg = vec3(1,0.5,1)*1.5;\n\nvec3 getMat(float id){\n    return (vec3(cos(id*2.+iTime)+1.5,0.,cos(id*1.+iTime)+1.5))/2.;\n}\n\nvec3 getSun(vec3 direction){\n    vec3 color = vec3(0);\n    vec3 dir = normalize(direction);\n    float v = max(0.,dot(dir, sunDir));\n\n    // sun bloom\n    color += vec3(v)*0.05;\n    // sun\n    color += pow(v,100.)*1.5;\n    return color;\n}\n\nvec3 getSky(vec3 direction){\n    vec3 dir = normalize(direction);\n    float v = max(0.,dot(dir, sunDir));\n    // background\n    vec3 color = mix(vec3(0.7,0.4,0.8),vec3(0.6,0.3,0.7), direction.y);\n    // sun bloom\n    color += getSun(direction);\n    return color;\n}\n\n\n\nvec3 getColor(vec2 res, vec3 p, vec3 n, vec3 ro, vec3 rd){\n    vec3 col = vec3(0);\n    if(res.x<MAX_DIST){\n        vec3 lightDir = normalize(p-lightPos);\n        col += vec3(max(0., dot(-lightDir, n)))*0.3;\n        \n        float specular = pow(max(dot(reflect(lightDir,n),normalize(ro-p)),0.), 50.);\n\n        if(res.y>-0.5 && res.y <12.5){\n            // letters\n            col += getMat(res.y)*0.7;\n            col+=specular*5.;\n        }else if(res.y<13.5){\n            // waves\n            col *= vec3(2.,.7,2.);\n            col+=specular;\n        }else{\n            // particles\n            col += vec3(1,0,1);\n            col+=specular*10.;\n        }\n        \n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = 2.*fragCoord/iResolution.xy - 1.;\n    uv.x*=iResolution.x/iResolution.y;\n    vec3 col = vec3(0);\n    \n    vec2 mouse = vec2(0.);\n    if(iMouse.z > 0.)\n        mouse = -(iMouse.xy / iResolution.xy - 0.5)*0.5; // position de la souris\n    \n    vec3 ro = rotateY(mouse.x*10.)*vec3(0,1.5+sin(iTime),7.+mouse.y*100.);\n    vec3 rd = getRayDirection(uv,ro,vec3(0));\n    \n//-------- pass 1\n    vec2 res = rayMarch(ro, rd);\n    \n    vec3 p = ro+res.x*rd;\n    vec3 n = calcNormal(p);\n    \n    float sh = clamp(softShadow(p, lightPos, 0.01, 5., 3.0), 0.4, 1.);\n    \n    col = getColor(res, p, n, ro, rd);\n//-------- pass 2\n    vec3 reflDir = reflect(normalize(rd), n);\n    p=p+0.01*n;\n    vec2 res2 = rayMarch(p,reflDir);\n    \n    p = p+res2.x*reflDir;\n    n = calcNormal(p);\n    \n    col += getColor(res2, p, n, ro, rd)*.5;\n    col += getSky(reflDir)*.1;\n    col += getSun(reflDir)*3.;\n    \n    col*=sh;\n    \n    col=mix(col, getSky(rd), 1.-exp(-0.005 * res.x * res.x));\n    col = pow(col, vec3(1.0/2.2));\n    // float fresnel = (0.04 + (1.0-0.04)*(pow(1.0 - max(0.0, dot(-normal, rd)), 5.0)));\n    \n    uv = fragCoord.xy / iResolution.xy;\n    uv *=  1.0 - uv.yx;\n    float vig = pow(uv.x*uv.y *30.0, 0.1);\n    \n    fragColor = vec4(col*vig,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159\n#define SM 0.1\n#define TH 0.25\n\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\nmat2 rotateX2D(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(\n        vec2(c, -s),\n        vec2(s, c)\n    );\n}\n\nvec2 opU( vec2 d1, vec2 d2 ) {\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n\n\nfloat smin( float d1, float d2, float k ) {\n    //https://iquilezles.org/articles/distfunctions/\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n\nvec2 opsU( vec2 d1, vec2 d2, float s ) {\n    float tmp = smin(d1.x, d2.x,s);\n    if(tmp<d1.x-0.1){\n        return vec2(tmp, d2.y);\n    }\n    return vec2(tmp, d1.y);\n}\n\nfloat sdHeart(vec3 p) {\n    vec3 tr = p;\n    tr.y-=1.;\n    tr.z*=2.;\n    \n    float distort = abs(atan(2.*tr.x,0.5*tr.y));\n    \n    float res = length(tr.xyz)-distort;\n    res = max(res, p.z-0.4);\n    res = max(res, -p.z-0.4);\n\n    return res*0.5;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r ) {\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat sdCappedTorus( vec3 p, vec2 sc, float ra, float rb) {\n    //https://www.shadertoy.com/view/tl23RK\n    p.x = abs(p.x);\n    float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\n\n\nfloat sdC(vec3 p){\n    // с\n    p.x*=1.2;\n    return sdCappedTorus(p*rotateZ(PI/2.), vec2(sin(2.1),cos(2.1)), 0.85, TH );\n}\n\nfloat sdD(vec3 p){\n    // д\n    vec3 p2 = p;\n    p2.x = abs(p2.x);\n    \n    float \n    res = smin(sdCapsule(p, vec3(-0.9,0,0),vec3(0.9,0,0),TH),sdCapsule(p2, vec3(1.,-0.5,0),vec3(1.,0,0),TH),SM);\n    res = smin(res, sdCapsule(p, vec3(0.7,0.1,0),vec3(0.35,1.6,0),TH),SM);\n    res = smin(res, sdCapsule(p, vec3(0.3,1.7,0),vec3(-0.7,1.7,0),TH),SM);\n    res = smin(res, sdCapsule(p, vec3(-0.75,1.6,0),vec3(-0.75,0.1,0),TH),SM);\n    return res;\n}\n\nfloat sdN(vec3 p){\n    // н\n    vec3 p2 = p;\n    p2.x = abs(p2.x);\n    float res = smin(sdCapsule(p2, vec3(0.7,1.7,0),vec3(0.7,0,0),TH), sdCapsule(p, vec3(0.6,0.85,0),vec3(-0.6,0.85,0),TH),SM);\n    return res;\n}\n\nfloat sdE(vec3 p){\n    // е\n    float\n    res = smin(sdCapsule(p, vec3(0.7,1.6,0),vec3(0.7,0.1,0),TH),sdCapsule(p, vec3(0.6,0.85,0),vec3(-0.5,0.85,0),TH),SM);\n    res = smin(res,sdCapsule(p, vec3(0.6,.0,0),vec3(-0.5,.0,0),TH),SM);\n    res = smin(res,sdCapsule(p, vec3(0.6,1.7,0),vec3(-0.5,1.7,0),TH),SM);\n    return res;\n}\n\nfloat sdM(vec3 p){\n    // м\n    vec3 p2 = p;\n    p2.x = abs(p2.x);\n    float res = smin(sdCapsule(p2, vec3(1.,1.7,0),vec3(1.,0,0),TH),sdCapsule(p, vec3(0.9,1.7,0),vec3(0.03,0,0),TH),SM);\n    res = smin(res,sdCapsule(p, vec3(-0.9,1.7,0),vec3(-0.03,0,0),TH),SM);\n    return res;\n}\n\nfloat sdR(vec3 p){\n    // р\n    vec3 p2 = p;\n    p2.x = abs(p2.x);\n    float res = smin(sdCapsule(p, vec3(0.5,1.7,0),vec3(0.5,-0.5,0),TH),sdCappedTorus((p-vec3(0,1.05,0))*rotateZ(-PI/2.), vec2(sin(PI/1.5),cos(PI/1.5)), 0.65,TH ),SM);\n    return res;\n}\n\nfloat sdO(vec3 p) {\n    // о\n    p.x*=1.2;\n    float x = length(p.xy)-0.85;\n    float y = p.z;\n    float res = length(vec2(x,y));\n    \n    return res-TH;\n}\n\nfloat sdZH(vec3 p){\n    // ж\n    float res = smin(sdCapsule(p, vec3(1.,1.7,0),vec3(-1.,0,0),TH),sdCapsule(p, vec3(0,1.7,0),vec3(0,0,0),TH),SM);\n    res = smin(res,sdCapsule(p, vec3(-1.,1.7,0),vec3(1.,0,0),TH),SM);\n    return res;\n}\n\nfloat sdI(vec3 p){\n    // и\n    vec3 p2 = p;\n    p2.x = abs(p2.x);\n    float res = smin(sdCapsule(p2, vec3(0.7,1.7,0),vec3(0.7,0,0),TH), sdCapsule(p, vec3(0.6,0.5,0),vec3(-0.6,1.2,0),TH),SM);\n    return res;\n}\n\nfloat sdJA(vec3 p){\n    // я\n    float res = smin(sdCapsule(p, vec3(-0.5,1.7,0),vec3(-0.5,0.,0),TH),sdCappedTorus((p-vec3(0,1.2,0))*rotateZ(PI/2.), vec2(sin(PI/1.3),cos(PI/1.3)), 0.5,TH ),SM);\n    res = smin(res,sdCapsule(p, vec3(-0.1,0.6,0),vec3(0.5,0.,0),TH),SM);\n    return res;\n}\n\n","name":"Common","description":"","type":"common"}]}