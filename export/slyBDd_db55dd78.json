{"ver":"0.1","info":{"id":"slyBDd","date":"1665451326","viewed":235,"name":"Afterimage","username":"Empio","description":"Stores frames in a buffer at a fixed frame rate to be redrawn several times.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["buffer","multipass","afterimage"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 CHROMA = vec3(0.0509804, 0.6392157, 0.1490197);\nconst vec3 WEIGHT = vec3(0.299, 0.587, 0.114);\nconst float THRESHOLD = 0.165;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 previousColour = texture(iChannel0, uv).rgb;\n    vec3 currentColour = texture(iChannel1, uv).rgb;\n        \n    vec3 colour = currentColour;\n    \n    // dodgy but cheap chroma key, doesn't need to be accurate\n    vec3 diff = (CHROMA - currentColour) * WEIGHT;\n    float alpha = dot(diff, diff);\n    \n    // return afterimage if the current colour is too similar to the chroma key\n    if (alpha < THRESHOLD * THRESHOLD)\n        colour = (previousColour + CHROMA) * 0.5;\n        \n    fragColor = vec4(colour, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// afterimage buffer\n\nconst int AFTERIMAGE_DELAY_FRAMES = 15;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 colour;\n\n    // return current frame or stored frame\n    if ((iFrame % AFTERIMAGE_DELAY_FRAMES) == 0)\n        colour = texture(iChannel0, uv).rgb;\n    else\n        colour = texture(iChannel1, uv).rgb;\n        \n    fragColor = vec4(colour, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// store current frame in buffer\n// the afterimage buffer will read from this\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 colour = texture(iChannel0, uv).rgb;\n\n    fragColor = vec4(colour, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}