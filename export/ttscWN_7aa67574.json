{"ver":"0.1","info":{"id":"ttscWN","date":"1592146947","viewed":53,"name":"Jelly Terrain","username":"mgjunior","description":"simple terrain 101","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["terrain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MaxIteration =64;\nconst float PI = 3.14;\nconst float epsilon = 0.001;\nfloat degreeToRad(float degree){\n    return degree*PI/180.0;\n}  \n\n// 高度圖\nfloat terrain(vec3 p){\n    float height =35.0*sin(0.05*p.x)*cos(0.1*p.z);\n    //+11.5*sin(0.2*p.x)*cos(0.2*p.z);\n   \n\n   float wave = 0.05*max(0.,sin(5.*height));\n\n   return height+wave;\n}\n\n\nvec3 getNormal(vec3 p){\n    float delta =0.01;\n    vec3 n =cross(\n        vec3(delta,terrain(p+vec3(delta,0.0,0.0))-terrain(p),0.0),\n        vec3(0.0,terrain(p+vec3(0.0,0.0,delta))-terrain(p),delta)\n    );\n    return normalize(n);\n}\n\nstruct Ray\n{\n    vec3 original;\n    vec3 dir;\n};\n\nRay[4] createRayDiff(vec3 eye, vec3 xAxis,vec3 yAxis,vec3 p){\n    vec2[4] multisampleDiff;\n    float x = 0.5;\n    float y =0.5;\n\tmultisampleDiff[0]=vec2(x,y)/iResolution.y;   \n    multisampleDiff[1]=vec2(-y,x)/iResolution.y; \n    multisampleDiff[2]=vec2(-x,-y)/iResolution.y;\n    multisampleDiff[3]=vec2(y,-x)/iResolution.y;\n\n    Ray[4] rays;\n    for(int i=0;i<4;++i){\n        rays[i].original =p+( multisampleDiff[i].x*xAxis + multisampleDiff[i].y*yAxis );\n        rays[i].dir =normalize(rays[i].original-eye);\n    }\n\n    return rays;\n}\n\nvec3 shading(Ray ray){\n    vec3 ballCenter =vec3(0.0,0.0,-50.0);  \n    float ballR =15.0;\n    vec3 shadingColor = vec3(0.0,0.0,0.0);\n\n    float t =1.0;\n    // ray marching\n    for(int i=0;i<MaxIteration;++i){\n        vec3 pos = ray.original+ t* ray.dir;\n        float terrainHeight = terrain(pos);\n        float h =pos.y- terrainHeight;\n          \n        if(h<(0.002*t)){// intersect method from iq's Elevated\n            vec3 normal = getNormal(pos);\n            float frontLight =max(0.0,dot(normal,vec3(0.0,0.0,1.0)));\n            float backLight =max(0.0,dot(normal,vec3(0.0,0.0,-1.0)));\n            vec3 orange =vec3(1.0,0.5,0.0);\n            vec3 aqua =vec3(0.0,1.0,1.0);\n            float height = 0.05*max(0.,sin(5.*pos.y));\n            shadingColor = frontLight* orange+backLight*aqua+vec3(height);\n            break;\n        }\n        \n        // intersect method from iq's Elevated\n        // better than brute force\n        t +=0.25*(pos.y -terrainHeight);\n    }\n\n    return shadingColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // weight (from -1 to 1)\n    vec2 weight = fragCoord/iResolution.xy;\n    weight= weight*2.0-1.0;\n\n    vec3 lookAt =vec3(0.0,0.0,-50.0);\n    vec3 move =iTime*vec3(0.0,0.0,-1.0);\n    vec3 eye = lookAt+vec3(0.0,25.0,0.0)+35.0*vec3(cos(0.15*iTime),0.0,sin(0.15*iTime))+move;\n    \n    vec3 zAsix = normalize(eye-lookAt);\n    vec3 yAxis = vec3(0.0,1.0,0.0);\n    vec3 xAxis = normalize(cross(yAxis,zAsix));\n    \n    // view frustum 的近平面\n    float fovDegree =90.0;\n    float halfFov = degreeToRad(0.5*fovDegree);\n    float tanH = tan(halfFov);\n    float tanW = tanH*iResolution.x/iResolution.y;\n\n    vec3 pointOnPlane = eye-zAsix+ xAxis*weight.x*tanW+yAxis*weight.y*tanH;\n    \n    float A =0.025*sin(0.5*iTime);\n    //pointOnPlane+=vec3(A*sin(10.*weight.y+5.*iTime),0.,0.);\n    pointOnPlane+=vec3(A*sin(10.*weight.y+5.*iTime),A*cos(10.*weight.x+5.*iTime),0.);\n\n    // Antialiasing: 射出多條ray，最後取平均\n    Ray[4] rays =createRayDiff(eye,xAxis,yAxis,pointOnPlane);\n    \n    vec3 color= vec3(0.0,0.0,0.0);\n    for(int i=0;i<1;++i) // 只射1條\n        color += shading(rays[i]);\n    // color *=0.25;\n\n    fragColor = vec4(color,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}