{"ver":"0.1","info":{"id":"cstfD2","date":"1697657013","viewed":64,"name":"TensorPatterns: fungal waves","username":"Boogaloo","description":"Yet another TensorPatterns automaton","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["automata","cellular","tensor"],"hasliked":0,"parentid":"csdBD2","parentname":"finetuned 2"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;    \n    \n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"mat3 mats[9];\n\nfloat cutit(float inp){\nreturn clamp(inp, 0., 1.);\n}\n\nfloat checkX(float x){\nif(x<1.){\nreturn iResolution.x-1.;\n}\nif(x>iResolution.x-1.){\nreturn 1.;\n}\nreturn x;\n}\n\nfloat checkY(float y){\nif(y<1.){\nreturn iResolution.y-1.;\n}\nif(y>iResolution.y-1.){\nreturn 1.;\n}\nreturn y;\n}\n\n//activation function\nfloat act(float x){\nreturn cutit(abs(sin(x)));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\nfloat ra = -.3;\nfloat rb = .36;\nfloat rc = .25;\n\nfloat ga = -.3;\nfloat gb = .36;\nfloat gc = .25;\n\nfloat ba = -.678;\nfloat bb = .859;\nfloat bc = -.752;\n\nfloat d = -.05;\nfloat e = .05;\nfloat f = .05;\n\n\n\n//The configuration tensor (change these values for different patterns):\nmats[0] = mat3(ra, d, -d, -d, ga, d, d, -d, ba);\nmats[1] = mat3(rb, e, -e, -e, gb, e, e, -e, bb);\nmats[2] = mat3(ra, d, -d, -d, ga, d, d, -d, ba);\nmats[3] = mat3(rb, e, -e, -e, gb, e, e, -e, bb);\nmats[4] = mat3(rc, f, -f, -f, gc, f, f, -f, bc);\nmats[5] = mat3(rb, e, -e, -e, gb, e, e, -e, bb);\nmats[6] = mat3(ra, d, -d, -d, ga, d, d, -d, ba);\nmats[7] = mat3(rb, e, -e, -e, gb, e, e, -e, bb);\nmats[8] = mat3(ra, d, -d, -d, ga, d, d, -d, ba);\n      \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 rtot = vec3(0.,0.,0.);\n    int ind = 0;    \n    \n//the convolution kernel is just the Moore neighborhood of a given cell\n//take the RGB values as vectors and apply a matrix transform specified via the configuration tensor, then sum\n    for(float i = -1.0; i <= 1.0; i += 1.0)\n    {\n        for( float j = -1.0; j <= 1.0; j += 1.0)\n        {\n            vec4 data = texelFetch(iChannel0, ivec2(checkX(fragCoord.x+i),checkY(fragCoord.y+j)), 0);\n        \trtot += mats[ind]*data.rgb;\n            ind++;\n        }\n    }\n    \n    \n    vec3 rfin = vec3(act(rtot.x), act(rtot.y), act(rtot.z));    \n   \n//initialize cells\n    if(iFrame < 2) {\n    if(abs(uv.x-.5)<.001 && abs(uv.y-.5)<.002){\n    rfin = vec3(1.,1.,1.);\n    }else{\n    rfin = vec3(0.,0.,0.);}\n    }\n\n//paint on pixels manually with the mouse\n    if(iMouse.z > 0.0 && abs(fragCoord.x-iMouse.x)<1.0 && abs(fragCoord.y-iMouse.y)<1.0){\n    rfin = vec3(1.0,1.0,1.0);\n    }\n      \n    \n    fragColor = vec4(rfin,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//anti-flicker buffer\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;    \n    vec4 col1 = texture(iChannel0, uv);\n    vec4 col2 = texture(iChannel1, uv);\n    fragColor = (col1+col2)*.55;\n}","name":"Buffer B","description":"","type":"buffer"}]}