{"ver":"0.1","info":{"id":"NsdSDM","date":"1644413917","viewed":90,"name":"Visual Remapping","username":"stuwatt193","description":"Graphic to try and show how a Cylindrical Remap works with triangle wave time signal","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["gyroid"],"hasliked":0,"parentid":"-1","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.1415926;\nconst float tau = 6.2831852;\n\nvec3 hsl2rgb(in vec3 c)\n{\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0,0.0,1.0);\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec2 rotate(in vec2 p, in float ang)\n{\n    vec2 pOut;\n    pOut.x = cos(ang)*p.x - sin(ang)*p.y;\n    pOut.y = sin(ang)*p.x + cos(ang)*p.y;\n    return pOut;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float width = 10.0;\n    float period = 40.0;\n    vec3 col;\n    float d;\n    float xMap;\n    float yMap;\n    float z = 1.0;\n    \n    float s = 0.5;\n    float l = 0.5;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 screenCoord = fragCoord.xy - iResolution.xy/2.0;\n    vec2 p = width * screenCoord/min(iResolution.x,iResolution.y);\n\n    // Time point\n    float timeFrac = mod(iTime,period)/period;\n    timeFrac = acos(cos(2.0*pi*iTime/period))/pi;\n    float ang = pi*timeFrac;\n    //ang = pi;\n    \n    // Wave Period\n    vec2 wp = vec2(1.0,0.2);\n    \n    \n    // Polar Coordinates\n    float r = sqrt(p.x*p.x + p.y*p.y);\n    float theta = atan(p.y,p.x);\n      \n    vec2 pRotP = rotate(p,-ang);\n    vec2 pRotN = rotate(p,ang);\n    \n    float yOffset = 5.0*timeFrac;\n        \n    if(theta>ang && p.y>0.0)\n    {\n        xMap = pRotP.x;\n        yMap = pRotP.y+ yOffset;\n    }\n    else if(theta<(-ang) && p.y<0.0)\n    {\n        xMap = pRotN.x;\n        yMap = pRotN.y - yOffset;\n    }\n    else\n    {\n        xMap = r;\n        yMap = theta/pi/wp.y;\n    }\n    \n\n    // Apply Wave Period\n    float x = mod(xMap,wp.x)*tau/wp.x;\n    float y =  mod(yMap,wp.x)*tau/wp.x;\n    \n    //Apply TPMS\n    d = sin(x)*cos(y) + sin(y)*cos(z) + sin(z)*cos(x);\n\n    // Turn to colour\n    col = hsl2rgb(vec3(d,s,l));\n\n    // Highlight lines\n    if(4.95<abs(yMap) && abs(yMap)<5.05){col = vec3(0.0,0.0,0.0);}\n    if(3.95<abs(yMap) && abs(yMap)<4.05){col = vec3(0.0,0.0,0.0);}\n    if(2.95<abs(yMap) && abs(yMap)<3.05){col = vec3(0.0,0.0,0.0);}\n    if(1.95<abs(yMap) && abs(yMap)<2.05){col = vec3(0.0,0.0,0.0);}\n    if(0.95<abs(yMap) && abs(yMap)<1.05){col = vec3(0.0,0.0,0.0);}\n    if(-0.05<abs(yMap) && abs(yMap)<0.05){col = vec3(0.0,0.0,0.0);}\n    if(3.9<xMap && xMap<4.1)\n    {\n        col = vec3(0.0,0.0,0.0);\n    }\n    \n    // Color angle line\n    if(ang-0.01<abs(theta) && abs(theta)<ang+0.01)\n    {\n        col = vec3(0.0,0.0,1.0);\n    }\n    \n    if(r<0.1)\n    {\n        col = vec3(1.0,0.0,0.0);\n    }\n    \n    // Apply color\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}