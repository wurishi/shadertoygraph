{"ver":"0.1","info":{"id":"ms3GDn","date":"1677279684","viewed":80,"name":"TP1: Modélisation formes simples","username":"Lidia","description":"Lidia Cruz Pérez p2212260","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tp1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// TP1: Modélisation formes simples \n// Lidia Cruz Pérez p2212260\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(35.,5.,20.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(6.,-1.,3.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n/*------------------------------------------------------------*/\n\n\n// OPERATORS ---------------------------------------------------\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n// Intersection\n// a,b : field function of left and right sub-trees\nfloat Intersection(float a, float b)\n{\n    return max(a,b);\n}\n\n// Complement \nfloat Complement(float a) \n{\n    return -a;\n}\n\n// Difference \n// a,b : field function of left and right sub-trees\nfloat Difference(float a, float b)\n{\n    return Intersection(a, Complement(b));\n}\n\n// Symmetric difference\n// a,b : field function of left and right sub-trees\nfloat SymmetricDifference(float a, float b) \n{\n    return Difference(Union(a,b), Intersection(a,b));\n}\n\n\n// PRIMITIVES --------------------------------------------------\n\n// Sphere\n// p : point\n// c : center \n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Plane\n// p: point\n// o: a point in the plane\n// n: normal vector (must be normalized)\nfloat Plane(vec3 p, vec3 o, vec3 n)\n{\n    return dot((p-o),n);\n}\n\n// SemiSphere\n// p: point\n// c: center\n// r: radius\n// n: normal vector of plane intersecting the whole sphere (must be normalized)\nfloat SemiSphere(vec3 p, vec3 c, float r, vec3 n)\n{\n    float sp = Sphere(p,c,r);\n    float pl = Plane(p,c,n);\n    return Intersection(sp,pl);\n}\n\n// Box\n// p: point\n// a: (xmax,ymin,zmin)\n// b: (xmin,ymax,zmax)\nfloat Box(vec3 p, vec3 a, vec3 b)\n{\n\n  float pl1 = Plane(p,a,vec3(1.,0.,0.));\n  float pl2 = Plane(p,b,vec3(-1.,0.,0.));\n  float pl3 = Plane(p,a,vec3(0.,-1.,0.));\n  float pl4 = Plane(p,b,vec3(0.,1.,0.));\n  float pl5 = Plane(p,a,vec3(0.,0.,-1.));\n  float pl6 = Plane(p,b,vec3(0.,0.,1.));  \n  \n  float v;\n  v = Intersection(pl1,pl2);\n  v = Intersection(v,pl3);\n  v = Intersection(v,pl4);\n  v = Intersection(v,pl5);\n  v = Intersection(v,pl6);\n  \n  return v;\n}\n\n// Cube\n// p: point\n// a: (xmax,ymin,zmin)\n// l: length side\nfloat Cube(vec3 p, vec3 a, float l) \n{\n    return Box(p,a,vec3(a.x-l,a.y+l,a.z+l));\n}\n\n// Cylinder\n// p: point\n// c: center of the base that is closest to the origin of coordinates\n// r: radius\n// h: height\n// pl: plane containing the bases (1: XY, 2: XZ and 3: YZ)\nfloat Cylinder(vec3 p, vec3 c, float r, float h, int pl)\n{\n    float ci, pl1,pl2;\n    if (pl == 1) {\n        ci = length(p.xy-c.xy)-r;\n        pl1 = Plane(p,c,vec3(0.,0.,-1.));\n        pl2 = Plane(p,vec3(c.x,c.y,c.z+h),vec3(0.,0.,1.));\n    } else if (pl == 2) {\n        ci = length(p.xz-c.xz)-r;\n        pl1 = Plane(p,c,vec3(0.,-1.,0.));\n        pl2 = Plane(p,vec3(c.x,c.y+h,c.z),vec3(0.,1.,0.));\n    } else {\n        ci = length(p.yz-c.yz)-r;\n        pl1 = Plane(p,c,vec3(-1.,0.,0.));\n        pl2 = Plane(p,vec3(c.x+h,c.y,c.z),vec3(1.,0.,0));        \n    }\n    float v;\n    v = Intersection(ci,pl1);\n    v = Intersection(v,pl2);\n    \n    return v;\n}\n\n// Tube\n// p: point\n// c: center of the base that is closest to the origin of coordinates\n// r1: major radius\n// r2: minor radius\n// h: height\n// pl: plane containing the bases (1: XY, 2: XZ and 3: YZ)\nfloat Tube(vec3 p, vec3 c, float r1, float r2, float h, int pl)\n{\n    float outterCylinder = Cylinder(p,c,r1,h,pl);\n    float innerCylinder = Cylinder(p,c,r2,h,pl);\n    return Difference(outterCylinder,innerCylinder);\n}\n\n\n// Capsule\n// p: point\n// c: \"south pole\" of the lower dome \n// r: radius\n// h: height\n// pl: plane containing the bases of the cylinder (1: XY, 2: XZ and 3: YZ)\nfloat Capsule(vec3 p, vec3 c, float r, float h,int pl) \n{\n    float ci, ssp1,ssp2;\n    if (pl == 1) {\n        ci = Cylinder(p,vec3(c.x,c.y,c.z+r),r,h-r-r,1);\n        ssp1 = SemiSphere(p,vec3(c.x,c.y,c.z+r),r, vec3(0.,0.,1.));\n        ssp2 = SemiSphere(p,vec3(c.x,c.y,c.z+h-r),r, vec3(0.,0.,-1.));\n    } else if (pl == 2) {\n        ci = Cylinder(p,vec3(c.x,c.y+r,c.z),r,h-r-r,2);\n        ssp1 = SemiSphere(p,vec3(c.x,c.y+r,c.z),r, vec3(0.,1.,0.));\n        ssp2 = SemiSphere(p,vec3(c.x,c.y+h-r,c.z),r, vec3(0.,-1.,0.));\n    } else {\n        ci = Cylinder(p,vec3(c.x+r,c.y,c.z),r,h-r-r,3);\n        ssp1 = SemiSphere(p,vec3(c.x+r,c.y,c.z),r, vec3(1.,0.,0.));\n        ssp2 = SemiSphere(p,vec3(c.x+h-r,c.y,c.z),r, vec3(-1.,0.,0.));    \n    }\n    \n    float v;\n    v = Union(ci,ssp1);\n    v = Union(v,ssp2);\n    \n    return v;\n}\n\n// Torus\n// p: point\n// c: center\n// r: inner radius\n// w: width torus (major radius – minor radius)\n// pl: plane containing the torus (1: XY, 2: XZ and 3: YZ)\nfloat Torus(vec3 p, vec3 c, float r, float w, int pl)\n{ \n    float a, b;\n    if (pl == 1) {\n        a = length(p.xy-c.xy)-r;\n        b = length(vec2(a,p.z-c.z))-w;\n    } else if (pl == 2) {\n        a = length(p.xz-c.xz)-r;\n        b = length(vec2(a,p.y-c.y))-w;        \n    } else {\n        a = length(p.yz-c.yz)-r;\n        b = length(vec2(a,p.x-c.x))-w;    \n    } \n    \n    return b;  \n}\n\n\n// PRISMS -----------------------------------------------------------\n\n// Pyramid (only with the base in the XY plane)\n// p: point\n// c: center of the base\n// h: height\n// l: length base side\n// o: orientation (1: vertex up, 2: vertex down)\nfloat Pyramid(vec3 p,vec3 c, float h, float l, int o)\n{\n    float pyramid, base, plane1,plane2,plane3,plane4;\n    vec3 vertex;\n    if (o == 1) {\n        vertex = vec3(c.x,c.y,c.z+h);\n        base = Plane(p,c,vec3(0.,0.,-1.));\n        plane1 = Plane(p,vertex,normalize(vec3(h,h,l)));\n        plane2 = Plane(p,vertex,normalize(vec3(h,-h,l)));\n        plane3 = Plane(p,vertex,normalize(vec3(-h,-h,l)));\n        plane4 = Plane(p,vertex,normalize(vec3(-h,h,l)));\n    } else {\n        vertex = vec3(c.x,c.y,c.z-h);\n        base = Plane(p,c,vec3(0.,0.,1.));\n        plane1 = Plane(p,vertex,normalize(vec3(h,h,-l)));\n        plane2 = Plane(p,vertex,normalize(vec3(h,-h,-l)));\n        plane3 = Plane(p,vertex,normalize(vec3(-h,-h,-l)));\n        plane4 = Plane(p,vertex,normalize(vec3(-h,h,-l)));\n    }\n\n    pyramid = Intersection(base,plane1);\n    pyramid = Intersection(pyramid,plane2);\n    pyramid = Intersection(pyramid,plane3);\n    pyramid = Intersection(pyramid,plane4);\n\n    return pyramid;   \n}\n\n// Octahedron (only with the base in the XY plane)\n// p: point\n// c: center \n// s: half-heigth\n// l: length base side\nfloat Octahedron(vec3 p,vec3 c, float s, float l) \n{\n    float octahedron;   \n    float pyramid1 =  Pyramid(p,c,s,l,1);\n    float pyramid2 =  Pyramid(p,c,s,l,2);\n    octahedron = Union(pyramid1, pyramid2);\n    \n    return octahedron;\n}\n\n\n// OBJECTS ----------------------------------------------------------\n\n// Column\n// p: point\n// c: center of the lowest base\n// r: radius\n// h: height\nfloat Column(vec3 p, vec3 c, float r, float h) \n{   \n    float column = Cylinder(p,c,r,h,1);\n    float capitel = Box(p, vec3(c.x+r+0.2,c.y-r-0.2,c.z+h), vec3(c.x-r-0.2,c.y+r+0.2,c.z+h+0.2));\n    return Union(column, capitel);\n}\n\n// SCENARIOS ---------------------------------------------------------\n\n// All the primitives together\nfloat Primitives(vec3 p)\n{  \n  float primitives;\n  \n  float plane = Plane(p, vec3(0.,0.,-2.),vec3(0.,0.,1.));\n  float sphere = Sphere(p,vec3(0.,0.,0.),2.);\n  float semiSphere = SemiSphere(p,vec3(0.,0.,3.),1.,vec3(0.,0.,1.));\n  float box = Box(p,vec3(0.,0.,3.),vec3(-1.,6.,5.));\n  float cube = Cube(p,vec3(0.,3.,5.),1.);\n  \n  float cylinderXY = Cylinder(p,vec3(0.,0.,4.),2.,2.,1);\n  float cylinderXZ = Cylinder(p,vec3(0.,6,4.),3.,2.,2);\n  float cylinderYZ = Cylinder(p,vec3(0.,4.,4.),1.,2.,3);\n  \n  float tubeXY = Tube(p,vec3(0.,10.,6.),1.,.5,2.,1);\n  float tubeXZ = Tube(p,vec3(0.,8,4.),2.,1.,3.,2);\n  float tubeYZ = Tube(p,vec3(2.,4.,4.),.8,.4,2.,3);\n  \n  float capsuleXY = Capsule(p,vec3(0.,0.,6.),2.,6.,1);\n  float capsuleXZ = Capsule(p,vec3(0.,2.,9.),1.,7.,2);\n  float capsuleYZ = Capsule(p,vec3(0.,6.,9.),.6,10.,3);\n  \n  float torusXY = Torus(p, vec3(0.,0.,11.),2.,.5,1);\n  float torusXZ = Torus(p, vec3(0.,0.,10.),2.,.5,2);\n  float torusYZ = Torus(p, vec3(0.,0.,10.),2.,.5,3);\n  \n  float column = Column(p, vec3(9.,6.,9.6),0.5,1.);\n  \n  primitives = Union(sphere,plane);\n  primitives = Union(primitives,semiSphere);\n  primitives = Union(primitives,box);\n  primitives = Union(primitives,cube);\n  primitives = Union(primitives,cylinderXY);\n  primitives = Union(primitives,cylinderXZ);\n  primitives = Union(primitives,cylinderYZ);\n  primitives = Union(primitives,tubeXY);\n  primitives = Union(primitives,tubeXZ);\n  primitives = Union(primitives,tubeYZ);\n  primitives = Union(primitives,capsuleXY);\n  primitives = Union(primitives,capsuleXZ);\n  primitives = Union(primitives,capsuleYZ);\n  primitives = Union(primitives,torusXY);\n  primitives = Union(primitives,torusXZ);\n  primitives = Union(primitives,torusYZ);\n  primitives = Union(primitives,column);\n  \n  return primitives;\n  \n}\n\n// Puppets, a ladder and a dog\n\n// Dummy\nfloat Dummy(vec3 p) \n{\n  float dummy;\n\n  float leftFoot = SemiSphere(p,vec3(1.,-1.5,-5.),2., vec3(0.,0.,-1.));\n  float rightFoot = SemiSphere(p,vec3(1.,1.5,-5.),2., vec3(0.,0.,-1.));\n  dummy = Union(leftFoot, rightFoot);\n\n  float leftLeg = Cylinder(p,vec3(0.,-1.5,-5.),1., 4.,1);\n  float rightLeg = Cylinder(p,vec3(0.,1.5,-5.),1., 4.,1);\n  dummy = Union(dummy, leftLeg);\n  dummy = Union(dummy, rightLeg);\n\n  float body = Capsule(p,vec3(0.,0.,-2.),3.,12.,1);\n  dummy = Union(dummy, body);  \n\n  float leftArm = Capsule(p,vec3(0.,-3.,4.),1.,7.,3);\n  float rightArm = Capsule(p,vec3(0.,3.,4.),1.,7.,3);\n  dummy = Union(dummy, leftArm);\n  dummy = Union(dummy, rightArm);\n\n  float mouth = Sphere(p, vec3(2.4,0.,6.5),.8);\n  dummy = Difference(dummy, mouth);\n  \n  float leftEye = Sphere(p, vec3(2.3,-1,8),.5);\n  float rightEye = Sphere(p, vec3(2.3,1,8),.5);\n  dummy = Union(dummy, leftEye);\n  dummy = Union(dummy, rightEye);\n\n  float head = Torus(p, vec3(0.,0.,7.),3.,.6,3);\n  float leftEar = Cylinder(p,vec3(0.,-4.,7.),1.,1.,2);\n  float leftEar1 = Cylinder(p,vec3(0.,-4.8,7.),.5,.5,2);\n  float rightEar = Cylinder(p,vec3(0.,3.,7.),1.,1.,2);\n  float rightEar1 = Cylinder(p,vec3(0.,4.3,7.),.5,.5,2);\n  float headphones = Union(head,leftEar);\n  headphones = Union(headphones,rightEar);\n  headphones = Union(headphones,leftEar1);\n  headphones = Union(headphones,rightEar1);\n  dummy = Union(dummy, headphones);\n\n  float key1 = Cylinder(p,vec3(-5.,0.,3.),0.5,2.,3);\n  float key2 = Cylinder(p,vec3(-5.,-1.,3.),0.5,2.,2);\n  float key3 = Cylinder(p,vec3(-5.,0.,2.),0.5,2.,1);\n  float key = Union(Union(key1,key2),key3);\n  dummy = Union(dummy, key);  \n\n  float aux1 = Torus(p, vec3(10,0.,6.),1.5,.2,1);\n  float aux2 = Torus(p, vec3(10,0.,6.),1.5,.2,2);\n  float aux3 = Torus(p, vec3(10,0.,6.),1.5,.2,3);\n  float mysteriousObject = Union(Union(aux1,aux2),aux3);\n  dummy = Union(dummy,mysteriousObject);\n\n  return dummy;   \n}\n\n// Dummy on stairs\nfloat DummyStairs(vec3 p)\n{\n  float figure;\n  \n  float stairs;\n  \n  float step1 = Box(p,vec3(-10.,-25.,-5.),vec3(-15.,-8.,-2.));\n  float window1 = Box(p,vec3(-10.,-24.,-4.),vec3(-15.,-9.,-3.));\n  float step2 = Box(p,vec3(-10.,-25.,-2.),vec3(-15.,-12.,1.));\n  float window2 = Box(p,vec3(-10.,-24.,-3.),vec3(-15.,-13.,0.));\n  float step3 = Box(p,vec3(-10.,-25.,1.),vec3(-15.,-16.,4.));\n  float window3 = Box(p,vec3(-10.,-24.,0.),vec3(-15.,-17.,3.));\n  float step4 = Box(p,vec3(-10.,-25.,4.),vec3(-15.,-20.,7.));\n  float window4 = Box(p,vec3(-10.,-24.,3.),vec3(-15.,-21.,6.));\n   \n  stairs = Union(step1, step2);\n  stairs = Union(stairs, step3);\n  stairs = Union(stairs, step4);\n  stairs = Difference(stairs,window1);\n  stairs = Difference(stairs,window2);\n  stairs = Difference(stairs,window3);\n  stairs = Difference(stairs,window4);\n  \n  float dummy;\n  \n  float body = Capsule(p,vec3(-12.,-17,3.),1.5,5.,1);\n  \n  float leftArm = Capsule(p,vec3(-10.,-17,4.),.5, 2.5,1);\n  float rightArm = Capsule(p,vec3(-14,-17.,4.),.5, 2.5,1);\n  dummy = Union(body, leftArm);\n  dummy = Union(dummy, rightArm);  \n    \n  float leftLeg = Cylinder(p,vec3(-12.8,-16.5,4),.5,2.5,2);\n  float rightLeg = Cylinder(p,vec3(-11.2,-16.5,4),.5,2.5,2);\n  dummy = Union(dummy,leftLeg);\n  dummy = Union(dummy,rightLeg);\n    \n  float leftFoot = SemiSphere(p,vec3(-13,-14.,4.5),.8, vec3(0.,1.,0.));\n  float rightFoot = SemiSphere(p,vec3(-11,-14.,4.5),.8, vec3(0.,1.,0.));  \n  dummy = Union(dummy, leftFoot);\n  dummy = Union(dummy, rightFoot);\n  \n  float leftEye = Sphere(p, vec3(-11.5,-15.8,7.2),.2);\n  float rightEye = Sphere(p, vec3(-12.5,-15.8,7.2),.2);\n  dummy = Union(dummy, leftEye); \n  dummy = Union(dummy, rightEye);  \n  \n  float hat = Pyramid(p,vec3(-12,-17,8),2.5,1.,1);\n  dummy = Union(dummy, hat);\n  \n  figure = Union(stairs,dummy);\n \n  return figure;\n}\n\n// Dog\nfloat Dog(vec3 p)\n{\n    float dog;\n    \n    float body = Capsule(p, vec3(3., 8., -1.5), 1.3, 6.5, 2);\n    \n    float head = Sphere(p, vec3(3.,8.,0.),2.);\n    dog = Union(body,head);\n    \n    float tail;\n    float tail1 = SemiSphere(p, vec3(3,15.,-1.5),.5,vec3(0.,1.,0.));\n    float tail2 = SemiSphere(p, vec3(3,15.,-2.),.5,vec3(0.,-1.,0.));\n    tail = Union(tail1,tail2);\n    dog = Union(dog,tail);\n    \n    float leg1 = Cylinder(p,vec3(3.6,10.5,-4.5), .5, 3.,1);\n    float foot1 = SemiSphere(p,vec3(3.6,10.,-5.),1., vec3(0.,0.,-1.));\n    dog = Union(dog,leg1);\n    dog = Union(dog, foot1);\n    float leg2 = Cylinder(p,vec3(2.2,9.5,-4.5), .5, 2.5,1);\n    float foot2 = SemiSphere(p,vec3(2.2,9,-5.),1., vec3(0.,0.,-1.));\n    dog = Union(dog,leg2);\n    dog = Union(dog, foot2);\n    float leg3 = Cylinder(p,vec3(3.6,13.5,-4.5), .5, 3.,1);\n    float foot3 = SemiSphere(p,vec3(3.6,13,-5.),1., vec3(0.,0.,-1.));\n    dog = Union(dog,leg3);\n    dog = Union(dog, foot3);\n    float leg4 = Cylinder(p,vec3(2.2,12.5,-4.5), .5, 2.5,1);\n    float foot4 = SemiSphere(p,vec3(2.2,12.,-5.),1., vec3(0.,0.,-1.));\n    dog = Union(dog,leg4);\n    dog = Union(dog, foot4);\n    \n    \n    return dog;\n}\n\n// Greek temple with a fountain\n\n// Temple\nfloat Temple(vec3 p) \n{\n    float temple;\n    \n    float floor;\n    float step1 = Box(p,vec3(15.,-10.,0.),vec3(-15.,10.,.5));\n    float a = Box(p,vec3(15.,-2.,.2),vec3(-13.,2.,.5));\n    float step2 = Box(p,vec3(13.,-8.,.5),vec3(-13.,8.,1.));\n    float b = Box(p,vec3(15.,-2.,.8),vec3(-5.,2.,1.));\n    float step3 = Box(p,vec3(11.,-6.,1.),vec3(-11.,6.,1.5));\n    float c = Box(p,vec3(15.,-2.,1.3),vec3(-13.,2.,1.5));\n    \n    floor = Union(step1,step2);\n    floor = Union(floor,step3);\n    floor = Difference(floor,a);\n    floor = Difference(floor,b);\n    floor = Difference(floor,c);\n    \n    float columns;\n    \n    float column1 = Column(p,vec3(10.5,-5.5,1.5),.4,5.);\n    float column2 = Column(p,vec3(10.5,-3.5,1.5),.4,5.);\n    float column3 = Column(p,vec3(10.5,-1.5,1.3),.4,5.2);\n    float column4 = Column(p,vec3(10.5,1.5,1.3),.4,5.2);\n    float column5 = Column(p,vec3(10.5,3.5,1.5),.4,5.);\n    float column6 = Column(p,vec3(10.5,5.5,1.5),.4,5.);\n    \n    float column7 = Column(p,vec3(-10.5,-5.5,1.5),.4,5.);\n    float column8 = Column(p,vec3(-10.5,-3.5,1.5),.4,5.);\n    float column9 = Column(p,vec3(-10.5,-1.5,1.3),.4,5.2);\n    float column10 = Column(p,vec3(-10.5,1.5,1.3),.4,5.2);\n    float column11 = Column(p,vec3(-10.5,3.5,1.5),.4,5.);\n    float column12 = Column(p,vec3(-10.5,5.5,1.5),.4,5.);\n    \n    float column13 = Column(p,vec3(8.5,-5.5,1.5),.4,5.);\n    float column14 = Column(p,vec3(6.5,-5.5,1.5),.4,5.);\n    float column15 = Column(p,vec3(4.5,-5.5,1.5),.4,5.);\n    float column16 = Column(p,vec3(2.5,-5.5,1.5),.4,5.);\n    float column17 = Column(p,vec3(.5,-5.5,1.5),.4,5.);\n    float column18 = Column(p,vec3(-2.5,-5.5,1.5),.4,5.);\n    float column19 = Column(p,vec3(-4.5,-5.5,1.5),.4,5.);\n    float column20 = Column(p,vec3(-6.5,-5.5,1.5),.4,5.);\n    float column21 = Column(p,vec3(-8.5,-5.5,1.5),.4,5.);\n   \n    float column22 = Column(p,vec3(8.5,5.5,1.5),.4,5.);\n    float column23 = Column(p,vec3(6.5,5.5,1.5),.4,5.);\n    float column24 = Column(p,vec3(4.5,5.5,1.5),.4,5.);\n    float column25 = Column(p,vec3(2.5,5.5,1.5),.4,5.);\n    float column26 = Column(p,vec3(.5,5.5,1.5),.4,5.);\n    float column27 = Column(p,vec3(-2.5,5.5,1.5),.4,5.);\n    float column28 = Column(p,vec3(-4.5,5.5,1.5),.4,5.);\n    float column29 = Column(p,vec3(-6.5,5.5,1.5),.4,5.);\n    float column30 = Column(p,vec3(-8.5,5.5,1.5),.4,5.);\n    \n    columns = Union(column1,column2);\n    columns = Union(columns,column3);\n    columns = Union(columns,column4);\n    columns = Union(columns,column5);\n    columns = Union(columns,column6);\n    columns = Union(columns,column7);\n    columns = Union(columns,column8);\n    columns = Union(columns,column9);\n    columns = Union(columns,column10);\n    columns = Union(columns,column11);\n    columns = Union(columns,column12);\n    columns = Union(columns,column13);\n    columns = Union(columns,column14);\n    columns = Union(columns,column15);\n    columns = Union(columns,column16);\n    columns = Union(columns,column17);\n    columns = Union(columns,column18);\n    columns = Union(columns,column19);\n    columns = Union(columns,column20);\n    columns = Union(columns,column21);\n    columns = Union(columns,column22);\n    columns = Union(columns,column23);\n    columns = Union(columns,column24);\n    columns = Union(columns,column25);\n    columns = Union(columns,column26);\n    columns = Union(columns,column27);\n    columns = Union(columns,column28);\n    columns = Union(columns,column29);\n    columns = Union(columns,column30);\n    \n    temple = Union(floor, columns);    \n    \n    return temple;\n}\n\n// Fountain\nfloat Fountain(vec3 p) \n{\n    float fountain;\n    \n    float base = Box(p, vec3(1.,-1.,1.5), vec3(-1,1,1.8));\n    float column = Cylinder(p, vec3(0.,0.,1.8), 0.5, 1.,1);\n    float cup = SemiSphere(p,vec3(0.,0.,3.5), 1., vec3(0.,0.,1.));\n    float border = Torus(p,vec3(0.,0.,3.5),1.,0.2,1);\n    float hole = SemiSphere(p,vec3(0.,0.,3.5), .9, vec3(0.,0.,1.));\n    \n    fountain = Union(base, column);\n    fountain = Union(fountain,cup);\n    fountain = Union(fountain,border);\n    fountain = Difference(fountain,hole);\n    \n    return fountain;\n}\n\n\n// CREATION OF THE OBJECTS -----------------------------------------\n  \n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n    \n  vec3 origin = vec3(0.,0.,0.);\n  \n  // All the operators \n  \n  float cubeOp = Box(p,vec3(-2.,-1.,-7.),vec3(-12.,7.,1.));\n  float cubeOp1 = Box(p,vec3(-2.,-6.,-2.),vec3(-7.,2.,6.));\n  float un = Union(cubeOp,cubeOp1); \n  float inter = Intersection(cubeOp,cubeOp1);\n  float diff = Difference(cubeOp,cubeOp1);\n  float symDiff = SymmetricDifference(cubeOp,cubeOp1);\n  symDiff = Difference(symDiff,Plane(p,vec3(-2.,-2.,-7.),vec3(-1.,0.,0.)));\n\n  // All the primitives forms\n  \n  float sphere = Sphere(p,origin,5.);\n  float semiSphere = SemiSphere(p,origin,5.,vec3(0.1,0.3,0.4));\n  float box = Box(p,vec3(0.,-10,-6.),vec3(-10.,10.,5.));\n  float cube = Cube(p,vec3(10.,-5.,2.),5.);\n  float cylinder1 = Cylinder(p,origin,2.,5.,1);\n  float cylinder2 = Cylinder(p,vec3(0.,5.,2.),2.,5.,2);\n  float cylinder3 = Cylinder(p,vec3(-5.,-7.,2.),2.,5.,3);\n  float column = Column(p,vec3(10.,0.,2.),.8,6.);\n  float tube1 = Tube(p,origin,3.,2.,4.,1);\n  float tube2 = Tube(p,vec3(0.,7.,2.),3.,2.,4.,2);\n  float tube3 = Tube(p,vec3(-5.,-8.,2.),3.,2.,4.,3);\n  float capsule1 = Capsule(p,vec3(0.,-1.,-1.),1.5,8.,1);\n  float capsule2 = Capsule(p,vec3(0.,2.,1.),1.5,8.,2);\n  float capsule3 = Capsule(p,vec3(-6,-6.,1.),1.5,8.,3);\n  float torus1 = Torus(p,vec3(0.,0.,0.),2.,0.4,1);\n  float torus2 = Torus(p,vec3(0.,5.,0.),2.,0.4,2);\n  float torus3 = Torus(p,vec3(0.,-7.,0.),2.,0.4,3);\n  \n  // Displaying all the primitives forms  \n  \n  float scene1 = Primitives(p);\n  \n  // All the prism\n   \n  float pyramidUp = Pyramid(p,vec3(0.,0.,0.),7.,4.,1);\n  float pyramidDown = Pyramid(p,vec3(-3.,4.,7.),7.,4.,2);\n  float octahedron = Octahedron(p,origin,6.,3.);\n  \n  // Displaying all the scenes\n  \n  float scene2;\n  \n  float dummy = Dummy(p);\n  float dummyStairs = DummyStairs(p);\n  float dog = Dog(p);\n\n  scene2 = Union(dummy, dummyStairs);\n  scene2 = Union(scene2, dog);\n  \n  float scene3;\n  \n  float temple = Temple(p);\n  float fountain = Fountain(p);\n  \n  scene3 = Union(temple,fountain);\n  \n  return scene3;\n}\n\n\n/*------------------------------------------------------------*/\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec4 someFunction( vec4 a, float b )\n{\n    return a+b;\n}","name":"Common","description":"","type":"common"}]}