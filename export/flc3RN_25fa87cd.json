{"ver":"0.1","info":{"id":"flc3RN","date":"1635767218","viewed":93,"name":"Obfuscated rotating triangle","username":"curvedcubes","description":"It's somewhere in there behind all the coordinate distortions and patterns, I promise!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["triangle","checkerboard","chromatic","aberration","impulse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141596\n\nvec2 rot(vec2 p, float an){\n\tmat2x2 rota = mat2x2( cos(an), -sin(an), \n\t\t\t\t\t\t  sin(an), cos(an)  );\n\treturn rota*p;\n}\n\n// checks if pixel is inside tri with angles an and (distance of lines from origin)==a\nbool tri(vec2 p, vec3 an, float a){\n\tbool tri = true;\n\tfor(int i=0; i<3 && tri; i++){ \n\t\ttri = p.y > -a; // loop break = pixel.y not less then a from origin\n\t\tp = rot(p, radians(an[i])); // rotation for next side\n\t}\n\treturn tri;\n}\n\n// absolute sort of triangle wave as time\nfloat time(){\n\treturn abs(0.3*tan(sin((iTime-1.0)/3.))+0.5);\n}\n\n// coordinate weirdness\nvec2 weird(vec2 uv){\n\tuv *= 1.0+length(uv);\n\treturn mix(vec2(uv.x, uv.y*sin(10.*uv.y)), vec2(uv.x*cos(10.*uv.x), uv.y), time()); // idk it's fun\n}\n\n// checkerboard pattern\nfloat pattern(vec2 p, float a){\n\treturn abs(mod(floor(a*p.x), 2.0)-mod(floor(a*p.y), 2.0));\n}\n\n// iq's exponential impulse\nfloat impulse(float x, float k){\n\tx += 1.0/k;\n\tfloat h = k*x;\n\treturn h*exp(1.0-h);\n}\t\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tvec3 col = vec3(0);\n\tfloat t;\n\tfor(int i=0; i<3; i++){\n\t\tvec2 uv = (gl_FragCoord.xy-0.5*iResolution.xy)/iResolution.y;\n\t\t\n\t\tfloat d = distance(time(), 0.5); // at time()==0.5, the animation tips\n\t\tfloat boing = max(0.5*impulse((time()-0.5)*20., 4.0+float(i)), -1.0); // aberation impulse param\n\t\tuv *= sqrt(d*0.3*float(i)+1.0) - boing + 0.01*boing*boing*(3.0-2.0*boing); // aberation & scale animation\n\t\t\n\t\tvec2 orig = uv;\n\t\tuv *= 2.;\n\t\tuv += (mod(uv, 0.06)-0.06); // tiling, broken glass sorta effect\n\t\tuv = weird(uv);\n\t\t\n\t\tbool tri = tri(rot(uv, 1.1*iTime), vec3(120), 0.5); // rotating triangle\n\t\tcol[i] = tri ? pattern(uv, 1.0) : 0.0; // tweak second pattern argument for different effects\n\t\tcol[i] = mix(col[i], col[i] * clamp(pattern(gl_FragCoord.xy, 0.333)*abs(1.0/length(uv)), 0.0, 1.0), 1.0/length(orig)); // mini pattern\n\t}\n\tfragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}