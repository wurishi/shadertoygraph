{"ver":"0.1","info":{"id":"3tBfDD","date":"1598908920","viewed":123,"name":"Minimalism #08","username":"Flopine","description":"Eighth piece of a shader serie about minimalism, how to do small and quick artwork that are about composition and animation.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","animation","motion","minimalism","daily"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU 6.2831853\n\n#define BPM (120./60.)\n#define dt(speed) fract(iTime*speed)\n#define SwitchAnim(speed) (floor(sin(dt(speed)*TAU))+1.)\n#define AnimOutExpoLoop(speed) easeOutExpo(abs(2.*dt(speed)-1.))\n#define AnimOutExpo(speed) easeOutExpo(dt(speed))\n\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(0.07,fwidth(val-thre)))\n#define circle(puv,s) (length(puv)-s)\n#define square(puv,s) (max(abs(puv.x),abs(puv.y))-s)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n\nfloat easeOutExpo (float x)\n{ \treturn x >= 1. ? 1. : 1. - pow(2., -10. * x); }\n\nfloat equitri (vec2 p, float r)\n{\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/sqrt(3.);\n    if (p.x+sqrt(3.)*p.y>0.) p=vec2(p.x-sqrt(3.)*p.y,-sqrt(3.)*p.x-p.y)/2.;\n    p.x -= clamp( p.x, -2.*r, 0. );\n    return -length(p)*sign(p.y);\n}\n\nfloat frame (vec2 uv)\n{\n    vec2 uu = uv;\n    uv.y += 0.6;\n    float size = 0.3;\n    float mask = 1.;\n    float offset = 0.;\n    uv.x = abs(uv.x);\n    vec2 suv = uv * vec2(1.,2.5);\n    for (int i=0; i<3; i++)\n    {\n        mask *= AAstep(0.01,square(suv,size));\n        suv.x -= AnimOutExpoLoop(BPM/2.+offset)*size*2.;\n        offset += 5.;\n        size -= 0.08;\n    }\n    vec2 cuv = uu;\n    cuv.y -= 0.25;\n    cuv *= rot(AnimOutExpo(BPM/2.+PI/8.)*PI);\n    cuv.y = abs(cuv.y)-0.3;\n    mask *= AAstep(0.02,abs(circle(cuv,0.25)))*AAstep(0.01,equitri(cuv,0.2));\n\n    uu.x = (SwitchAnim(BPM/4.+PI/4.) >= 1.)? uu.x : -uu.x;\n    return (uu.x <=0.) ? mask : (1.-mask);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    vec3 col = mix(vec3(0.7,0.4,0.5),vec3(0.9,0.9,0.35),frame(uv));\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}