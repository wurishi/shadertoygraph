{"ver":"0.1","info":{"id":"XtB3zc","date":"1430763055","viewed":803,"name":"Nyan Cat Music","username":"mfelician","description":"Second trial of doing some Nyan!\nIt's shame that the audio is not allowed to run for 10 hours here! :D","likes":12,"published":1,"flags":8,"usePreview":0,"tags":["music","audio","rainbow","nyancat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"float ct;\nvec2 pix;\nconst float scale = 0.33;\nconst float animLength = 6.0 / 10.0; \n\nvec4 getCatPix(vec2 pos){\n        \n    const int FRAMES = 6;\n    const int FRAME_WIDTH = 40;\n    const int TEXT_WIDTH = 256;\n    const int TEXT_HEIGHT = 32;\n    \n    pos = clamp(pos, vec2(0.0), vec2(1.0));\n    \n    int currentFrame = int(mod(ct / animLength * float(FRAMES), float(FRAMES)));        \n    vec2 normTextPos = vec2((pos.x / float(FRAMES)) + float(currentFrame)/float(FRAMES), pos.y);              \n    vec2 textPos = vec2(mix(0.0, 240.0/256.0 , normTextPos.x), 1.0-normTextPos.y);    \n\tvec4 color = texture(iChannel0, textPos);\n    return color;\n}\n\nvec4 getCatAt(vec2 pos, float scale){\n    return getCatPix(pix/scale + pos);\n}\n\nvec4 getSky(vec2 pos){\n    \n    pos.x += ct;\n    \n    float res = 16.0;\n    \n    pos = vec2(float(int(pos.x * res)) / res, float(int(pos.y * res)) / res);\n    \n    int pp = 10;\n    pos = pos * 0.1;\n    \n    float shade = texture(iChannel1, pos).x;\n    vec4 color = vec4(shade / 4.0, shade / 4.0, shade, 1.0);\n    return color;\n}\n\nvec2 getCatPos(){\n    //const float jumpLen = 0.4;\n    \n    float jump = 0.0;\n    \n    float x = mod(ct, animLength) / animLength;\n    \n    jump += smoothstep(0.3, 0.5, x) * 0.2 * scale;\n    jump += (1.0-smoothstep(0.5, 0.6, x)) * 0.2 * scale;\n        \n    \n        \n    return \n        vec2(-1.9, -0.68) +\n        vec2( 0.10 * sin(ct * 2.0), 0.0) +\n        //vec2(0.0, 0.1 * sin(ct*.3))+\n        vec2(0.0, jump);\n}\n\nvec4 getRainbow(){\n    const float fr = 90.0;\n    const float h = 0.024;\n    \n    float s = sin(pix.x * fr + ct*60.0) * 0.01;\n    \n    vec4 rb = vec4(0.0);\n\n    if (pix.x < 0.8){\n        rb = mix(rb, vec4(1.0,0.0,0.0,1.0), step(0.3 + 0.0 * h + s, pix.y) - step(0.3+1.0 * h + s, pix.y));\n        rb = mix(rb, vec4(1.0,0.6,0.0,1.0), step(0.3 + 1.0 * h + s, pix.y) - step(0.3+2.0 * h + s, pix.y));\n        rb = mix(rb, vec4(1.0,1.0,0.0,1.0), step(0.3 + 2.0 * h + s, pix.y) - step(0.3+3.0 * h + s, pix.y));\n        rb = mix(rb, vec4(0.2,1.0,0.0,1.0), step(0.3 + 3.0 * h + s, pix.y) - step(0.3+4.0 * h + s, pix.y));\n        rb = mix(rb, vec4(0.0,0.6,1.0,1.0), step(0.3 + 4.0 * h + s, pix.y) - step(0.3+5.0 * h + s, pix.y));\n        rb = mix(rb, vec4(0.4,0.2,1.0,1.0), step(0.3 + 5.0 * h + s, pix.y) - step(0.3+6.0 * h + s, pix.y));\n    }\n    \n    return rb;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \tct = iTime;   \n \n    \n    \n    pix = (fragCoord.xy / iResolution.xy);\n    \n    vec4 col = getCatAt(getCatPos(), scale);\n    col = mix(getRainbow(), col, col.a);\n    col = mix(getSky(pix), col, col.a);\n    \n    \n    \n    fragColor = col;\n\n}","name":"","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define fade (1.0 / 40.00)\nfloat ct; // current time\n\n// just like sin\nfloat saw(float x){\n    return fract( x );\n}\n\n// freq\n// at time\nfloat piano( float f, float t )\n{\n    float y  = \n        0.4 * fract(f * t)\n        * clamp( 1.0 -  0.0078 * f * t, 0.0, 1.0 ); // argh...\n    \n\treturn y;\t\n}\n\n\n// http://en.wikipedia.org/wiki/Musical_note\nfloat noteTofreq( in float x ) {\t\n    return 440.0 * pow( 2.0, x / 12.0 ); \n}\n\n\n\nfloat b = 0.0; // temp variable storing the full additive length\nfloat n = 0.0; // note\nfloat s1 = 0.0; // start of the sund\n// length\n// note\nvoid N1(int l_, int n_){\n    \n    if( ct > b ){\n        s1 = b;\n        n = float(n_);\n    }\n    b += float(l_);\n}\n\n\nfloat b2 = 0.0; // temp variable storing the full additive length\nfloat n2 = 0.0; // note\nfloat s2 = 0.0; // start of the sund\n// length\n// note\nvoid N2(int l_, int n_){\n    \n    if( ct > b2 ){\n        s2 = b2;\n        n2 = float(n_);\n    }\n    b2 += float(l_);\n}\n\nfloat boostBass(float note){\n    return 0.0;\n}\n\nfloat calcSound()\n{\n\n    \n    \nN1(6,18);\nN2(18,-10);\nN1(6,19);\nN1(12,21);\nN1(12,14);\nN2(18,-10);\nN1(6,18);\nN1(6,19);\nN1(6,21);\nN2(18,-10);\nN1(6,14);\nN1(6,28);\nN1(6,42);\nN1(6,28);\nN2(18,-10);\nN1(6,13);\nN1(12,14);\nN1(12,21);\nN2(18,-10);\nN1(6,18);\nN1(6,19);\nN1(12,21);\nN2(18,-10);\nN1(12,14);\nN1(6,28);\nN2(18,-10);\nN1(6,13);\nN1(6,14);\nN1(6,28);\nN1(6,31);\nN2(18,-10);\nN1(6,42);\nN1(6,31);\nN1(6,28);\nN1(12,21);\nN2(12,-17);\nN1(12,23);\nN2(12,-5);\nN1(6,18);\nN2(12,-15);\nN1(6,18);\nN2(12,-3);\nN1(6,2);\nN1(6,17);\nN2(12,-18);\nN1(6,16);\nN1(6,2);\nN2(12,-6);\nN1(12,2);\nN2(12,-13);\nN1(12,16);\nN2(12,-1);\nN1(12,17);\nN2(12,-20);\nN1(6,17);\nN2(12,-8);\nN1(6,16);\nN1(6,2);\nN2(12,-15);\nN1(6,16);\nN1(6,18);\nN2(12,-3);\nN1(6,21);\nN1(6,23);\nN2(12,-34);\nN1(6,18);\nN1(6,21);\nN2(12,-22);\nN1(6,16);\nN1(6,18);\nN2(12,-34);\nN1(6,2);\nN1(6,16);\nN2(12,-22);\nN1(6,2);\nN1(12,18);\nN2(12,-17);\nN1(12,21);\nN2(12,-5);\nN1(6,23);\nN2(12,-15);\nN1(6,18);\nN1(6,21);\nN2(12,-3);\nN1(6,16);\nN1(6,18);\nN2(12,-18);\nN1(6,2);\nN1(6,17);\nN2(12,-6);\nN1(6,18);\nN1(6,17);\nN2(12,-13);\nN1(6,16);\nN1(6,2);\nN2(12,-1);\nN1(6,16);\nN1(12,17);\nN2(12,-20);\nN1(6,2);\nN2(12,-8);\nN1(6,16);\nN1(6,18);\nN2(12,-15);\nN1(6,21);\nN1(6,16);\nN2(12,-3);\nN1(6,18);\nN1(6,16);\nN2(12,-34);\nN1(6,2);\nN1(12,16);\nN2(12,-22);\nN1(12,2);\nN2(12,-34);\nN1(12,16);\nN2(12,-22);\nN1(12,21);\nN2(12,-17);\nN1(12,23);\nN2(12,-5);\nN1(6,18);\nN2(12,-15);\nN1(6,18);\nN2(12,-3);\nN1(6,2);\nN1(6,17);\nN2(12,-18);\nN1(6,16);\nN1(6,2);\nN2(12,-6);\nN1(12,2);\nN2(12,-13);\nN1(12,16);\nN2(12,-1);\nN1(12,17);\nN2(12,-20);\nN1(6,17);\nN2(12,-8);\nN1(6,16);\nN1(6,2);\nN2(12,-15);\nN1(6,16);\nN1(6,18);\nN2(12,-3);\nN1(6,21);\nN1(6,23);\nN2(12,-34);\nN1(6,18);\nN1(6,21);\nN2(12,-22);\nN1(6,16);\nN1(6,18);\nN2(12,-34);\nN1(6,2);\nN1(6,16);\nN2(12,-22);\nN1(6,2);\nN1(12,18);\nN2(12,-17);\nN1(12,21);\nN2(12,-5);\nN1(6,23);\nN2(12,-15);\nN1(6,18);\nN1(6,21);\nN2(12,-3);\nN1(6,16);\nN1(6,18);\nN2(12,-18);\nN1(6,2);\nN1(6,17);\nN2(12,-6);\nN1(6,18);\nN1(6,17);\nN2(12,-13);\nN1(6,16);\nN1(6,2);\nN2(12,-1);\nN1(6,16);\nN1(12,17);\nN2(12,-20);\nN1(6,2);\nN2(12,-8);\nN1(6,16);\nN1(6,18);\nN2(12,-15);\nN1(6,21);\nN1(6,16);\nN2(12,-3);\nN1(6,18);\nN1(6,16);\nN2(12,-34);\nN1(6,2);\nN1(12,16);\nN2(12,-22);\nN1(12,2);\nN2(12,-34);\nN1(12,16);\nN2(12,-22);\nN1(12,2);\nN2(12,-5);\nN1(6,9);\nN2(12,-1);\nN1(6,11);\nN1(12,2);\nN2(12,-10);\nN1(6,9);\nN2(12,7);\nN1(6,11);\nN1(6,2);\nN2(12,-6);\nN1(6,16);\nN1(6,18);\nN2(12,-3);\nN1(6,2);\nN1(6,19);\nN2(12,-10);\nN1(6,18);\nN1(6,19);\nN2(12,6);\nN1(6,21);\nN1(12,2);\nN2(12,-8);\nN1(12,2);\nN2(12,-5);\nN1(6,9);\nN2(12,-1);\nN1(6,11);\nN1(6,2);\nN2(12,-10);\nN1(6,9);\nN1(6,19);\nN2(12,-22);\nN1(6,18);\nN1(6,16);\nN2(12,-6);\nN1(6,2);\nN1(6,9);\nN2(12,-3);\nN1(6,6);\nN1(6,7);\nN2(12,-10);\nN1(6,9);\nN1(12,2);\nN2(12,-5);\nN1(6,9);\nN2(12,-1);\nN1(6,11);\nN1(12,2);\nN2(12,-10);\nN1(6,9);\nN2(12,7);\nN1(6,11);\nN1(6,2);\nN2(12,-6);\nN1(6,2);\nN1(6,16);\nN2(12,-3);\nN1(6,18);\nN1(6,2);\nN2(12,-10);\nN1(6,9);\nN1(6,11);\nN2(12,6);\nN1(6,9);\nN1(12,2);\nN2(12,-8);\nN1(6,2);\nN2(12,-5);\nN1(6,1);\nN1(6,2);\nN2(12,-1);\nN1(6,9);\nN1(6,11);\nN2(12,-10);\nN1(6,2);\nN1(6,19);\nN2(12,-22);\nN1(6,18);\nN1(6,19);\nN2(12,-6);\nN1(6,21);\nN1(12,2);\nN2(12,-3);\nN1(12,1);\nN2(12,-10);\nN1(12,2);\nN2(12,-5);\nN1(6,9);\nN2(12,-1);\nN1(6,11);\nN1(12,2);\nN2(12,-10);\nN1(6,9);\nN2(12,7);\nN1(6,11);\nN1(6,2);\nN2(12,-6);\nN1(6,16);\nN1(6,18);\nN2(12,-3);\nN1(6,2);\nN1(6,19);\nN2(12,-10);\nN1(6,18);\nN1(6,19);\nN2(12,6);\nN1(6,21);\nN1(12,2);\nN2(12,-8);\nN1(12,2);\nN2(12,-5);\nN1(6,9);\nN2(12,-1);\nN1(6,11);\nN1(6,2);\nN2(12,-10);\nN1(6,9);\nN1(6,19);\nN2(12,-22);\nN1(6,18);\nN1(6,16);\nN2(12,-6);\nN1(6,2);\nN1(6,9);\nN2(12,-3);\nN1(6,6);\nN1(6,7);\nN2(12,-10);\nN1(6,9);\nN1(12,2);\nN2(12,-5);\nN1(6,9);\nN2(12,-1);\nN1(6,11);\nN1(12,2);\nN2(12,-10);\nN1(6,9);\nN2(12,7);\nN1(6,11);\nN1(6,2);\nN2(12,-6);\nN1(6,2);\nN1(6,16);\nN2(12,-3);\nN1(6,18);\nN1(6,2);\nN2(12,-10);\nN1(6,9);\nN1(6,11);\nN2(12,6);\nN1(6,9);\nN1(12,2);\nN2(12,-8);\nN1(6,2);\nN2(12,-5);\nN1(6,1);\nN1(6,2);\nN2(12,-1);\nN1(6,9);\nN1(6,11);\nN2(12,-10);\nN1(6,2);\nN1(6,19);\nN2(12,-22);\nN1(6,18);\nN1(6,19);\nN2(12,-6);\nN1(6,21);\nN1(12,2);\nN2(12,-3);\nN1(12,16);\nN2(12,-10);\n\n\n  return \n      piano( noteTofreq( n ), (ct-s1) * fade) \n      + 0.5 * piano( noteTofreq( n2 ), (ct-s2) * fade);\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    // hardcoded music length :( anyways.. 60 sec limit is in ShaderToy\n    float maxt = 42.35;\n    ct = mod(time,maxt) / fade; \n    \n    vec2 y = vec2(calcSound());\n    return y;\n}\n","name":"","description":"","type":"sound"}]}