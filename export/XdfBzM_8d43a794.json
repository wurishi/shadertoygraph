{"ver":"0.1","info":{"id":"XdfBzM","date":"1495208536","viewed":287,"name":"Sampling depends on texcoords","username":"dawken","description":"This may be totally obvious to seasoned graphic devs, but it slightly surprised me. I generate a time dependent integer delta that I use to perturb texture coordinates. One would expect GL_REPEAT to kick in. Nope. Remember when doing screenshot testing.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["texture","artifact","sscce"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n  Shows that texture(sample, texcoords) directly depends on texcoords and not only transitively\n  via the color of the sampled texel(s).\n\n  See https://gamedev.stackexchange.com/questions/140099/unstable-sampled-color-in-glsl-shader\n*/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Texture coordinates.\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Introduce an integer error on texture coordinates.\n    vec2 err = 10.0 * vec2(cos(iTime), sin(iTime));\n    vec2 iErr = floor(err);\n    \n    // Sample RGB from uv and uv + iErr.\n    vec3 sample1 = texture(iChannel0, uv).rgb;\n    vec3 sample2 = texture(iChannel0, uv + iErr).rgb;\n    \n    // Create a grayscale level proportional to the RGB difference.\n    float diffMeasure = 256.0 * length(sample1 - sample2);\n    \n    // Overlay exaggerated error on top of actual texture.\n    vec3 color = sample1 / 2.0 + vec3(diffMeasure, diffMeasure, diffMeasure);\n    \n    // Output combined image.\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}