{"ver":"0.1","info":{"id":"4sGBR3","date":"1529660541","viewed":252,"name":"Mini Soccer 2018","username":"lzjseed","description":"Mini Soccer 2018.Welcome to world cup of Russia 2018！！","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["football","soccer","2018","worldcup"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Soccer 2018\n\n#define mul(a,b) ((b)*(a))\n#define saturate(a) clamp(a,0.0,1.0)\n#define float2 vec2\n#define float3 vec3\n#define float4 vec4\n#define fixed3 vec3\n#define fixed4 vec4\n#define lerp   mix\n#define fmod   mod\n\nvoid sincos(float a,out float b,out float c)\n{\n    b = sin(a);\n    c = cos(a);\n}\n\n#define RadToDeg(a) ((a) * 180.0 / 3.1415926)\n#define DegToRad(a) ((a) * 3.1415926 / 180.0)\n\nfloat Hex(vec2 p,float r,float d)\n{    \n    p = abs(p);\n\n    float s,c;\n    sincos(DegToRad(d),s,c);\n\n    return smoothstep(r * 0.98,r,max(p.x*s + p.y*c,p.y));\n    //return smoothstep(r * 0.98,r,max(p.x*.866025 + p.y*.5,p.y));\n}\n\nfloat Octagon(vec2 p,float r)\n{    \n    p = abs(p);\n\n    float a45 = 0.70710678;\n\n    return smoothstep(r * 0.98,r,max(p.x*a45 + p.y*a45,max(p.y,p.x)));  \n}\n\nfloat Pentagon(vec2 p,float r)\n{\n    float len = length(p);\n    vec2 up = vec2(0.0,1.0);\n\n    float a = max(acos(dot(normalize(p),up)),0.0001);\n\n    // 72 degree\n    float d = fmod(a,1.256637);\n\n    // cos(36)\n    float l = 0.80902 * r;\n\n    // cos(36 - d)\n\n    float nl = l / (cos(0.628319 - d));\n\n    return smoothstep(nl * 0.98,nl,len);\n}\n\nfloat Goal(vec2 p,vec2 s)\n{\n    float t1 = 1.-smoothstep(s.x*0.98,s.x,abs(p.x));\n    float t2 = 1.-smoothstep(s.y*0.98,s.y,abs(p.y));\n    return (1.-t1 * t2);\n}\n\nfloat Goal2(vec4 p,vec4 s)\n{\n    return saturate(Goal(p.xy,s.xy) + (1.-Goal(p.zw,s.zw)));\n}\n\nfloat Circle(vec2 p,float r)\n{\n    return smoothstep(r * 0.98,r,length(p));\n}\n\nfloat Circle2(vec2 p,vec2 r)\n{\n    float t1 = smoothstep(r.x * 0.98,r.x,length(p));\n    float t2 = 1.-smoothstep(r.y * 0.98,r.y,length(p));\n    return 1.-(t1 * t2);\n}\n\nfloat RadiansLine(vec2 p,vec2 r,vec2 dir,float a)\n{\n    float theta = acos(dot(normalize(p),dir));\n    theta = max(theta,0.001);\n\n    return (theta < a ? Circle2(p,r) : 1.0);\n}\n\nfloat Line(float y)\n{\n    return smoothstep(0.,0.1,abs(y));\n}\n\nvec2 rotMul(vec2 p,float d)\n{\n    float s,c;\n    sincos(DegToRad(d),s,c);\n    mat2 rot = mat2(c,-s,s,c);\n\n    return mul(rot,p);\n}\n\nfloat  inRect(float pos,vec2 range)\n{\n    return pos >= range.x && pos <= range.y ? 1.0 : 0.0;\n}\n\nfloat DrawDigit(float n,vec2 pos,float size)\n{\n    if(pos.x < 0.) return 0.;\n    if(pos.y < 0.) return 0.; \n    if(pos.x > size) return 0.;\n    if(pos.y > 2.*size) return 0.;\n\n    float res1 = inRect(pos.x,vec2(size*0.1,size*0.9));\n    float res2 = inRect(pos.x,vec2(0,size*0.2));\n    float res3 = inRect(pos.x,vec2(size*0.8,size));\n    float t[7];\n\tt[0] = t[1] = t[2] = t[3] = t[4] = t[5] = t[6] = 1.;\n    \n    if(n < 1.) t[1] = 0.;\n    else if(n < 2.) t[0] = t[1] = t[2] = t[3] = t[4] = 0.;\n    else if(n < 3.) t[4] = t[5] = 0.;\n    else if(n < 4.) t[3] = t[4] = 0.;\n    else if(n < 5.) t[0] = t[2] = t[3] = 0.;\n    else if(n < 6.) t[3] = t[6] = 0.;\n    else if(n < 7.) t[6] = 0.;\n    else if(n < 8.) t[0] = t[1] = t[3] = t[4] = 0.;\n    else if(n < 9.) t[1] = 1.;\n    else if(n < 10.) t[3] = 0.;\n\n    if(res1 > 0.)\n    {\n        if(t[0] > 0. && pos.y >= 0. && pos.y <= size * 0.2)\n        {\n            return 1.;\n        }\n\n        if(t[1] > 0. && pos.y >= size * 0.9 && pos.y <= size * 1.1)\n        {\n            return 1.;\n        }\n\n        if(t[2] > 0. && pos.y >= size * 1.8 && pos.y <= size * 2.)\n        {\n            return 1.;\n        }\n    }\n    \n    if(res2 > 0.)\n    {\n        if(t[3] > 0. && pos.y >= size * 0.1 && pos.y <= size)\n        {\n            return 1.;\n        }\n\n        if(t[4] > 0. && pos.y >= 1.1 * size && pos.y <= size * 1.9)\n        {\n            return 1.;\n        }\n    }\n\n    if(res3 > 0.)\n    {\n        if(t[5] > 0. && pos.y >= size * 0.1 && pos.y <= size)\n        {\n            return 1.;\n        }\n\n        if(t[6] > 0. && pos.y >= 1.1 * size && pos.y <= size * 1.9)\n        {\n            return 1.;\n        }\n    }\n    \n    return 0.;\n}\n\nfloat DrawNumber(float n,vec2 pos,vec3 offset)\n{\n    float k = log2(max(n,1.))/ log2(10.);\n    \n    float count = 1. + floor(k);\n\n    vec2 org = pos - offset.xy;\n\n    float id = floor(org.x / (offset.z + 1.));\n    float t = 0.;\n    if(id >= 0. && id < count)\n    {\n        float dig = floor(n / pow(10.,count - id - 1.));\n\n        dig = mod(dig,10.);\n\n        t = DrawDigit(dig,vec2(org.x - id*(offset.z + 1.),org.y),offset.z);                    \n    }\n\n    return t;\n}\n\nvec3 pow3(vec3 a,float b)\n{\n    return vec3(pow(a.x,b),pow(a.y,b),pow(a.z,b));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2   uv = fragCoord.xy / iResolution.xy;\n    vec2   pos = uv * 2. - 1.;\n    float  offset = 5.;\n    vec2   canvasPos = pos*vec2(15.,8.);\n    vec2   orgScreenPos = canvasPos;\n    orgScreenPos = rotMul(orgScreenPos,90.);\n    \n    //football court\n    vec3   bg = vec3(0.,1.,0.);\n\n    float k1 = mod(floor(uv.y*17.),2.);\n    float k2 = mod(floor(uv.x*17.),2.);\n\t\n    vec2 absPos = orgScreenPos;\n    absPos.y = abs(absPos.y);\n    bg = vec3(0.,0.8,0.2) * (k1 * 0.5 + k2 * 0.5 + 1.) * 0.5;\n    bg = lerp(vec3(1,1,1),bg,Line(absPos.y));\n    bg = lerp(vec3(1,1,1),bg,Line(absPos.y - (offset+7.77)));\n    bg = lerp(vec3(1,1,1),bg,Circle2(absPos,vec2(2,2.1)));\n    \n    float2 goalPos = absPos - float2(0,offset+8.5);\n    bg = lerp(fixed3(1,1,1),bg,Goal2(float4(goalPos,goalPos+float2(0,0.3)),float4(3,0.7,3.-0.3,0.7)));\n    \n    goalPos = absPos - float2(0,offset+7.-0.97);\n    bg = lerp(fixed3(1,1,1),bg,Goal2(float4(goalPos,goalPos+float2(0.025,0.02)),float4(6,1.8,6.-0.1,1.8-0.1)));\n\n    goalPos = absPos - float2(0,offset+7.-0.03);\n    bg = lerp(fixed3(1,1,1),bg,Goal2(float4(goalPos,goalPos+float2(0.025,0.02)),float4(4,0.8,4.-0.1,0.8-0.1)));\n\n    goalPos = absPos - float2(0,offset+7.-1.37);\n    bg = lerp(fixed3(1,1,1),bg,RadiansLine(goalPos,float2(2,2.1),float2(0,-1),DegToRad(47.5)));\n\n    // football\n    float2 screenPos = orgScreenPos;\n    float scale = 0.;\n    //football animation\n    float ani_1 = sin(iTime);\n    float ani_2 = sin(iTime * 2.);\n    float ani_3 = sin(iTime/4.);\n    float ani_4 = sin(iTime/2.);\n    \n    ani_1 = max(ani_1,0.);\n    ani_2 = (1.-step(ani_1,0.)) * max(ani_2,0.);\n\n    screenPos.y += sign(ani_4)*ani_1 * 14.;\n    screenPos.x += ani_1 * ani_3 * 3.;\n    screenPos = rotMul(screenPos,(1.-step(ani_1,0.))*iTime*100.);\n    scale = ani_2*1.;\n    float r = 0.1 + scale;\n    float hexR = r * 0.9;\n    float penR = r * 0.85065;\n    float ballR = penR*3. - 0.16*r;\n    float2 axis = hexR*float2(0,0.80902 + 0.866025);\n\n    fixed4 color = fixed4(bg,1);\n    color.rgb = lerp(fixed3(0.,0.,0.),color.rgb,Circle(screenPos,ballR));\n    \n    for(float j = 0.;j < 5.;j ++)\n    {\n        float2 p1 = rotMul(screenPos,j * 72.) + axis;\n        color.rgb = lerp(fixed3(1,1,1),color.rgb,Hex(p1,hexR*0.98,54.));\n    }\n    \n    float t = smoothstep(ballR*0.98-0.01*r,ballR*0.98+0.02*r,length(screenPos));\n    color.rgb = lerp(color.rgb,bg,t);\n    color.rgb = lerp(fixed3(0,0,0),color.rgb,Pentagon(screenPos,penR));\n\n    //title\n    fixed3 fontColor = fixed3(0,0,0);\n    float text = 2018.;\n    t = DrawNumber(text,canvasPos,float3(-3.8 + 0.2,4.4 - 0.2,1));\n    color.rgb = lerp(color.rgb,fontColor,t);\n    fontColor = fixed3(1,1,1);\n    t = DrawNumber(text,canvasPos,float3(-3.8,4.4,1));\n    color.rgb = lerp(color.rgb,fontColor,t);\n    \n    color.rgb = pow3(color.rgb,2.2) + 0.45 * color.rgb;\n\n    fragColor = color;\n}\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}