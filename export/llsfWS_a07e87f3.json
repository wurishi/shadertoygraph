{"ver":"0.1","info":{"id":"llsfWS","date":"1513206618","viewed":1171,"name":"JPEG DCT","username":"Loeizd","description":"Trying to make JPEG DCT compression following wikipedia (https://en.wikipedia.org/wiki/JPEG#JPEG_codec_example) without multipass.\nUnsuccessful for the moment. Any help much appreciated!","likes":3,"published":1,"flags":0,"usePreview":1,"tags":["fourier","dct","jpeg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159265359\n#define cuv int(u) * int(squareResolution) + int(v)\n\nint[] q = int[] (\n  16,  11,  10,  16,  24,  40,  51,  61,\n  12,  12,  14,  19,  26,  58,  60,  55,\n  14,  13,  16,  24,  40,  57,  69,  56,\n  14,  17,  22,  29,  51,  87,  80,  62,\n  18,  22,  37,  56,  68, 109, 103,  77,\n  24,  35,  55,  64,  81, 104, 113,  92,\n  49,  64,  78,  87, 103, 121, 120, 101,\n  72,  92,  95,  98, 112, 100, 103,  99\n);\n\n/*\nfloat drawpx (float x, float y, vec2 coord)\n{\n  return (trunc(coord.x) == x && trunc(coord.y) == y) ? 1. : 0. ;    \n}\n*/\n\nfloat alpha (float u)\n{\n    return (u == 0.) ? 0.7071 /*1./sqrt(2.)*/ : 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = vec2(trunc(fragCoord.x), trunc(fragCoord.y)) / iResolution.xy;\n    \n    float squareResolution = 8.0;\n    \n    //draw 1 dot every 8px square\n    float px8 = 1. - clamp( mod(trunc(fragCoord.x), squareResolution) + mod(trunc(fragCoord.y), squareResolution), 0., 1. );\n    \n    //--------\n    //JPEG NOW\n    //--------\n    \n    vec2 offset = vec2(squareResolution*trunc(fragCoord.x / squareResolution), squareResolution*trunc(fragCoord.y / squareResolution));\n    float[] G = float[] (\n        0., 0., 0., 0., 0., 0., 0., 0.,\n        0., 0., 0., 0., 0., 0., 0., 0.,\n        0., 0., 0., 0., 0., 0., 0., 0.,\n        0., 0., 0., 0., 0., 0., 0., 0.,\n        0., 0., 0., 0., 0., 0., 0., 0.,\n        0., 0., 0., 0., 0., 0., 0., 0.,\n        0., 0., 0., 0., 0., 0., 0., 0.,\n        0., 0., 0., 0., 0., 0., 0., 0.\n    );\n    float sum = 0.;\n    float f = 0.;\n    float su = mod(trunc(fragCoord.x), squareResolution);\n    float sv = mod(trunc(fragCoord.y), squareResolution);\n   \n    //DCT Encode  \n    \n    //fill dct array\n    for (float u = 0.; u < squareResolution; u++)\n    {\n        for (float v = 0.; v < squareResolution; v++)\n    \t{\n            //compute sums\n   \t\t\tfor (float x = 0.; x < squareResolution; x++)\n   \t\t\t{\n   \t\t\t    for (float y = 0.; y < squareResolution; y++)\n  \t\t\t  \t{\n  \t\t\t        float g = texture(iChannel0, (vec2(x, y) + offset) / iResolution.xy).x;\n                    g = g * 255. - 128.;\t\t           \n \t\t\t        sum += g\n \t\t\t             * cos((2. * x + 1.) * u * pi / 16.) \n \t\t\t             * cos((2. * y + 1.) * v * pi / 16.); \n \t\t\t       }\n \t\t\t}\n            \n            //quantize and dequantize here\n            G[cuv] = round( /**/.25 * alpha(u) * alpha(v) * sum /**// float(q[cuv])) * float(q[cuv]);\n    \t}\n    }\n    \n    //inverseDCT Decode\n       \n    //compute sums\n    for (float u = 0.; u < squareResolution; u++)\n    {\n        for (float v = 0.; v < squareResolution; v++)\n    \t{            \n            f += alpha(u) * alpha(v) * G[cuv] \n                * cos((2. * su + 1.) * float(u) * pi / 16.) \n                * cos((2. * sv + 1.) * float(v) * pi / 16.);\n    \t}\n    }\n    \n    f *= .25;\n    f = round(f) + 128.;\n    f /= 255.;\n    \n    f = clamp(f, 0., 1.);//just for the red dots \n\tfragColor = mix(vec4(f, f, f, 0.), vec4(texture(iChannel0, uv).x), floor(uv.x + 1. - iMouse.x/iResolution.x)) + mix(vec4(px8, -px8, -px8, 0.), vec4(0.), floor(1.-uv.y + 0.5));\n}","name":"Image","description":"","type":"image"}]}