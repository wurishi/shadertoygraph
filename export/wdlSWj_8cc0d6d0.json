{"ver":"0.1","info":{"id":"wdlSWj","date":"1552244832","viewed":61,"name":"Task1_MG","username":"KopyDP","description":"mg","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\n\nfloat sdTorus(vec3 p, vec2 r) {\n\tfloat x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\n\nfloat Distation(vec3 p) {\n    float planeDist = p.y;\n    float elipsoid = sdEllipsoid(p - vec3(-0.26, 2.,10.), vec3(1.5, 1,2));\n    float capsule = sdCapsule(p, vec3(1.3, .5, 6), vec3(2., 1.5, 6), .3); \n    float tor = sdTorus(p-vec3(-0.2,.5,6), vec2(0.8, .2));\n    float box = udBox(p-vec3(-2, 1, 5.5), vec3(.5, 0.3, .4)); \n    float cylinder = sdHexPrism(p-vec3(-4,1,6), vec2(0.5,0.5));\n    return min(min(min(min(min(cylinder, planeDist),tor),box), capsule), elipsoid);\n\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = Distation(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\n\nvec3 Givenormal(vec3 p) {\n\tfloat d = Distation(p);\n    vec3 normal = d - vec3(\n        Distation(p-vec2(.001, 0).xyy),\n        Distation(p-vec2(.001, 0).yxy),\n        Distation(p-vec2(.001, 0).yyx));\n    return normalize(normal);\n}\n\nvec3 GetLight(vec3 p) {\n    vec3 lp = vec3(-2, 5, 6);\n    lp.xz += vec2(sin(iTime), cos(iTime))*3.;\n    vec3 l = normalize(lp-p);\n    vec3 n = Givenormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<length(lp-p)) dif *= .1;\n  \n    vec3 lp2 = vec3(1, 4, -1);\n    vec3 l2 = normalize(lp2-p);\n    vec3 n2 = Givenormal(p);\n    float dif2 = clamp(dot(n2, l2), 0., 2.);\n    float d2 = RayMarch(p+n*SURF_DIST*2., l2);\n    if(d2<length(lp2-p)) dif *= .1;\n    \n  \n    if (udBox(p-vec3(-2, 1, 5.5), vec3(.5, 0.3, .4)) < SURF_DIST)\n\t\treturn ((dif2+dif)/2.)*vec3(1.,0.,0.);\n    if (sdEllipsoid(p - vec3(-0.26, 2.,10.), vec3(1.5, 1,2)) < SURF_DIST)\n        return  ((dif2/(length(p-lp2)*length(p-lp2))+dif/(length(p-lp)*length(p-lp)))*11.)*vec3(0.,1.,0.);\n    if ((sdCapsule(p, vec3(1.3, .5, 6), vec3(2., 1.5, 6), .4)) < SURF_DIST)\n        return  ((dif2/(length(p-lp2)*length(p-lp2))+dif/(length(p-lp)*length(p-lp)))*11.)*vec3(0.,0.,1.);\n    if (sdHexPrism(p-vec3(-4,1,6), vec2(0.5,0.5)) < SURF_DIST)\n        return  ((dif2/(length(p-lp2)*length(p-lp2))+dif/(length(p-lp)*length(p-lp)))*11.)*vec3(0.,1.,1.);\n    if (sdTorus(p-vec3(-0.2,.5,6), vec2(0.8, .2)) < SURF_DIST)\n        return  ((dif2/(length(p-lp2)*length(p-lp2))+dif/(length(p-lp)*length(p-lp)))*11.)*vec3(1.,1.,.2);\n    else\n        return ((dif2/(length(p-lp2)*length(p-lp2))+dif/(length(p-lp)*length(p-lp)))*11.)*vec3(1.,1.,1.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    \n    vec3 view_origin = vec3(-1, 2.3, 0.1);\n    vec3 view_direction = normalize(vec3(uv.x-.1, uv.y-.1, 1.3));\n    float distation = RayMarch(view_origin, view_direction);\n    vec3 p = view_origin + view_direction * distation;\n    \n    fragColor = vec4(GetLight(p),1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}