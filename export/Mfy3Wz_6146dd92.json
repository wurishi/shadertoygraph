{"ver":"0.1","info":{"id":"Mfy3Wz","date":"1712601726","viewed":38,"name":"prak2Z","username":"la","description":"dad","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["dad"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 rotate(vec2 a, float angle) {\nfloat c = cos(angle);\nfloat s = sin(angle);\nreturn vec2(a.x * c - a.y * s, a.x * s + a.y * c);\n}\n\nfloat cube(vec3 p, vec3 size) {\nvec3 d = abs(p) - size;\nreturn min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\nfloat scene(vec3 p) {\nvec3 boxSize = vec3(1.0, 2.0, 0.5); \nfloat d = cube(p, boxSize); \nd = min(d, sphere(p - vec3(0.0, 0.0, -3.0), 1.0)); \nd = min(d, sphere(p - vec3(0.0, 0.0, 3.0), 1.0)); \n\nreturn d;\n}\n\nvoid cameraspin(inout vec3 p) {\np.yz = rotate(p.yz, 0.3);\np.xz = rotate(p.xz, iTime * 0.5);\n}\n\nvoid mainImage(out vec4 out_color, in vec2 fragCoord) {\nvec2 resolution = iResolution.xy;\nfloat time = iTime;\nvec2 circle1 = vec2(0.5 + 0.3 * cos(time), 0.5 + 0.3 * sin(time));\nvec2 circle2 = vec2(0.8 + 0.2 * cos(2.0 * time), 0.8 + 0.2 * sin(2.0 * time));\nvec3 color1 = vec3(sin(18.0 * time + fragCoord.x * 0.2), 0.1, 1.0);\nvec3 color2 = vec3(cos(18.0 * time + fragCoord.x * 0.2), 0.8, 1.0);\nfloat distance1 = length(fragCoord - resolution * circle1);\nfloat distance2 = length(fragCoord - resolution * circle2);\nfloat circleRadius = 0.1 * resolution.x;\nvec3 backgroundColor = 0.6 + 0.1 * cos(18.0 * time + fragCoord.xxx * 0.1 + length(fragCoord.xx) * 0.1);\nvec3 finalColor = backgroundColor;\n\nif (distance1 < circleRadius) {\nfinalColor = color1;\n}\nif (distance2 < circleRadius) {\nfinalColor = color2;\n}\n\nvec2 uv = (fragCoord.yx / iResolution.yx - 0.5) * vec2(iResolution.y / iResolution.x, 1.0);\nvec3 cam = vec3(0.5, 1.0, -55.0);\nvec3 dir = normalize(vec3(uv, 4.0));\ncameraspin(cam);\ncameraspin(dir);\nfloat t;\nint i;\nvec3 color = vec3(1, 1, 1);\nfor (i = 0; i < 1000; ++i) {\nfloat k = scene(cam + dir * t);\nt += k;\nif (k < 0.1) {\nvec3 h = cam + dir * t;\nvec2 o = vec2(0.001, 0);\nvec3 n = normalize(vec3(\nscene(h + o.xyy) - scene(h - o.xyy),\nscene(h + o.yxy) - scene(h - o.yxy),\nscene(h + o.yyx) - scene(h - o.yyx)\n));\nout_color.rgb = finalColor + vec3(10.0, 10.0, 10.2);\nreturn;\n}\n}\nout_color.rgb = finalColor;\n}\n","name":"Image","description":"","type":"image"}]}