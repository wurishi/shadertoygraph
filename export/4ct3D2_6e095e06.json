{"ver":"0.1","info":{"id":"4ct3D2","date":"1712170944","viewed":48,"name":"Shadertoy prak1.5","username":"Deminsas","description":"prak1.5","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sigmashader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int m = 3; // Количество полигонов в аппроксимации\nconst int vertexCount = 4;//количество вершин\nvec3 polygons[m*vertexCount];// Массив для хранения вершин полигонов;каждый полигон - квадрат\nvec3 position[m] = vec3[](vec3(0.5, 0.5, 0.3), vec3(0.5, 0.5, 0.5), vec3(0.65, 0.5, 0.7));//массив начальных положений\nvec3 colAr[m] = vec3[](vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)); // Цвета для полигонов\nvec3 BGcol = vec3(0.1, 0.1, 0.1); // Цвет фона\n\nvoid initPolygons(out vec3 polygons[m*vertexCount], in float time){\n    float width = 0.2; // ширина полигонов\n    float height = 0.2; // высота полигонов\n    for(int i = 0; i < m; i++){\n        polygons[i*4 + 0] = position[i] + vec3(-width/2.0, -height/2.0, 0); // левый верхний\n        polygons[i*4 + 1] = position[i] + vec3(width/2.0, -height/2.0, 0); // правый верхний\n        polygons[i*4 + 2] = position[i] + vec3(width/2.0, height/2.0, 0); // правый нижний\n        polygons[i*4 + 3] = position[i] + vec3(-width/2.0, height/2.0, 0); // левый нижний\n    }\n}\nbool pointInPolygon(vec2 testPoint, int num) {\n    bool result = false;\n    int j = vertexCount-1;\n    for (int i = 0; i < vertexCount; i++) {\n        if ((polygons[num+i].y > testPoint.y) != (polygons[num+j].y > testPoint.y) &&\n            (testPoint.x < (polygons[num+j].x-polygons[num+i].x) * (testPoint.y-polygons[num+i].y) / (polygons[num+j].y-polygons[num+i].y) + polygons[num+i].x)) {\n                result = !result;\n            }\n        j = i;\n    }\n    return result;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = gl_FragCoord.xy / iResolution.xy;\n    vec3 col = BGcol;\n    position[0] = vec3(0.5 + 0.25*cos(1.0 * iTime), 0.5 + 0.25*sin(1.0 * iTime), position[0].z);\n    position[1] = vec3(0.5 - 0.25*cos(2.0 * iTime), 0.5 - 0.25*sin(2.0 * iTime), position[1].z);\n    position[2] = vec3(0.65, 0.5 + 0.2*sin(3.0 * iTime), position[2].z);\n    initPolygons(polygons, iTime);\n    int polDepthIndex = -1;\n    for(int i = 0; i < m; i++) {\n        if (pointInPolygon(uv, i*vertexCount)) {\n            if (polDepthIndex < 0) {polDepthIndex = i; col = position[polDepthIndex];}\n            else { if (position[i].z > position[polDepthIndex].z) {polDepthIndex = i; col = position[polDepthIndex];}\n            }\n        }\n    }\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}