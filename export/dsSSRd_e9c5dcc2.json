{"ver":"0.1","info":{"id":"dsSSRd","date":"1670707629","viewed":216,"name":"Abstract painting #4","username":"thom_bahm","description":"Trying to make a Pollock like painting. Heavily Inspired by thebookofshaders: https://thebookofshaders.com/11/","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","random"],"hasliked":0,"parentid":"msBXzt","parentname":"Abstract painting #3"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Based on https://thebookofshaders.com/edit.php#11/wood.frag\n//scale the painting\n#define paintScale 1.5\n#define timeScale 0.5\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\n// Gradient Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/XdXGW8\nfloat noise2(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    // Smooth Interpolation\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n\nmat2 rotate2d(float angle){\n    return mat2(cos(angle),-sin(angle),\n                sin(angle),cos(angle));\n}\n\nfloat lines(in vec2 pos, float b){\n    float scale = 10.0;\n    pos *= scale;\n    return smoothstep(0.0,.5+b*.5,\n                    abs((sin(pos.x*1.)+b*2.0))*0.95);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates <-0.5, 0.5>\n    vec2 uv = fragCoord / iResolution.y;\n    #if 1\n    uv += noise(uv*3.);\n    uv += iTime * 0.1;\n    # else\n    uv += iTime * 0.1;\n    #endif\n    uv *= paintScale;\n    float pattern = lines(uv,0.5);\n    //pattern = 1.; //makes it look better when scaled\n    vec3 col = vec3(0.0);\n    for (float i = 0.; i < 10.; i ++) {\n        float n = noise2(uv*i);\n        float pix = 1.5*fwidth(n); //i/iResolution.y;\n        col += smoothstep(0., pix, n-.15);\n        col -= smoothstep(0., pix, n-.18);\n    }\n    //These lines give some cool color:\n    col.xy *= rotate2d(noise2(uv));\n    col.xz *= rotate2d(noise2(vec2(uv.y)));\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}