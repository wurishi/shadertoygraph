{"ver":"0.1","info":{"id":"4fsGz4","date":"1702823570","viewed":32,"name":"Mirror ball projection","username":"silica163","description":"mirror ball projection","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["vfx","projection","ball","mirror","reflect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv *= 1.;\n    uv.x = fract(uv.x);\n    //uv.y -= .5;\n\n    if(fragCoord.x < iResolution.x/2.){\n        fragColor = texture(iChannel0,uv);\n    } else {\n        fragColor = texture(iChannel1,uv);\n   }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"mat3 rotx(float a){\n    return mat3(1, 0, 0, 0, sin(a),cos(a),0,-cos(a),sin(a));\n}\n\nmat3 roty(float a){\n    return mat3(sin(a),0,cos(a),0,1,0,-cos(a),0,sin(a));\n}\n\nmat3 rotz(float a){\n    return mat3(sin(a),cos(a),0,-cos(a),sin(a),0,0,0,1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv = uv *2.-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 1.1;\n    \n    vec2 m = iMouse.xy / iResolution.xy;\n    m = m*2.-1.;\n    vec2 ra = vec2(PI/2.+m.x*PI,PI/2.+m.y*PI*.5);\n    \n    mat3 rx = mat3(\n    1,0,0,\n    0,sin(ra.y),cos(ra.y),\n    0,-cos(ra.y),sin(ra.y)\n    );\n    \n    mat3 ry = mat3(\n    sin(ra.x), 0, cos(ra.x),\n    0, 1, 0,\n    -cos(ra.x), 0, sin(ra.x)\n    );\n    \n    vec3 ref = vec3(0,0,0);\n    \n    float fb = length(uv);\n    \n    ref.z = (1.-fb*.1)+cos(fb*PI);\n    ref.xy = normalize(uv)*sin(fb*PI);\n    \n    fragColor = vec4(fract(ref),1);\n    fragColor.rg = uv;\n    fragColor = texture(iChannel0,ref*rx*ry)* step(length(uv),1.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float MAX = 10.,MIN = .001,STEP = 64.;\n\nfloat dist(vec3 rp){\n    return length(rp) - 1.;\n}\n\nvec3 normal(vec3 p){\n    vec2 e = vec2(0,MIN*10.);\n    return normalize(vec3(\n        dist(p+e.yxx),\n        dist(p+e.xyx),\n        dist(p+e.xxy)\n    ));\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv = uv *2.-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 1.1;\n    \n    vec2 m = iMouse.xy / iResolution.xy;\n    m = m*2.-1.;\n    \n    vec2 ra = vec2(PI/2.+m.x*PI,PI/2.+m.y*PI*.5);\n    \n    mat3 rx = mat3(\n    1,0,0,\n    0,sin(ra.y),cos(ra.y),\n    0,-cos(ra.y),sin(ra.y)\n    );\n    \n    mat3 ry = mat3(\n    sin(ra.x), 0, cos(ra.x),\n    0, 1, 0,\n    -cos(ra.x), 0, sin(ra.x)\n    );\n    \n    vec3 c = vec3(0);\n    \n    vec3 ro = vec3(uv,2)*rx*ry;\n    float rl = 0.;\n    float hit = 0.;\n    vec3 rd = normalize(vec3(uv,0)*rx*ry-vec3(ro));\n    vec3 rp = ro + rd*rl;\n    \n    for(float i = 0.; i < STEP; i++){\n        rp = ro + rd * rl;\n        float d = dist(rp);\n        \n        rl += d;\n        if(d >= MAX)break;\n        if(d <= MIN)hit = 1.;\n    }\n    vec3 N = normal(rp);\n    vec3 ref = reflect(rd,N);\n    fragColor = texture(iChannel0,ref)*hit;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"struct Ray {\n\tvec3 o;\n\tvec3 p;\n\tvec3 dir;\n\tfloat dist;\n    float hit;\n};\n\nfloat dist(vec3 p){\n\tfloat d = 100.;\n   \n    d= min(d,length(p - 1.) -.5);\n    \n    vec3 cu = abs(p-vec3(0,0,0))-1.;\n    \n    d = (length(max(cu,0.)) + min(0.,max(cu.x,max(cu.y,cu.z))));\n\t\n\treturn -d;\n}\nvoid march(inout Ray r){\n\tfor(int i = 0;i<64;i++){\n\t\tr.p = r.o + r.dist*r.dir;\n\t\tfloat d = dist(r.p);\n        r.dist += d;\n\t\tif(abs(d) <= .001){\n            r.hit = 1.;\n            break;\n        }\n        if(d > 100.)break;\n\t}\n}\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    // Ray direction as color\n    vec3 col = 0.5 + 0.5*rayDir;\n\n    // Output to cubemap\n    fragColor = vec4(mod(rayDir,.5)*2.,1.0);\n    fragColor = vec4(fract(rayDir),1.0);\n    fragColor = vec4(rayDir,1.0);\n    \n    Ray r = Ray(vec3(0),vec3(0),rayDir,0.,0.);\n    march(r);\n    //fragColor = vec4(vec3(dist(rayDir)),1.0);\n    fragColor = vec4(vec3(1./r.dist),1.0);\n}","name":"Cube A","description":"","type":"cubemap"}]}