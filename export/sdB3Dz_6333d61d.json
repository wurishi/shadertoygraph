{"ver":"0.1","info":{"id":"sdB3Dz","date":"1617223542","viewed":110,"name":"sunset landscape","username":"loipesmas","description":"2D landscape painting using some sin, cos, circles and value noise","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","landscape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat random2f(in vec2 q)\n{\n    return fract(cos(dot(q,vec2(143.543,56.32131)))*46231.56432);\n}\n\nfloat noise(vec2 st)\n{\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    \n    float a = random2f(i);\n    float b = random2f(i + vec2(1.,0.));\n    float c = random2f(i + vec2(0., 1.));\n    float d = random2f(i + vec2(1., 1.));\n    \n    vec2 u = f * f * (3. - 2. * f);\n    \n    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n// From Inigo Quilez\nfloat value_noise(in vec2 uv)\n{\n    float f = 0.;\n    uv *= 8.0;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    f  = 0.5000*noise( uv ); uv = m*uv;\n    f += 0.2500*noise( uv ); uv = m*uv;\n    f += 0.1250*noise( uv ); uv = m*uv;\n    f += 0.0625*noise( uv ); uv = m*uv;\n    return f;\n}\n\n#define AA 1\n\n\nconst vec3 mount1col = vec3(0.3,0.2,0.15);\nconst vec3 mount2col = vec3(0.6,0.3,0.15);\nconst vec3 bgcol1 = vec3(0.6,0.4,0.4);\nconst vec3 bgcol2 = vec3(0.9,0.5,0.3);\nconst vec3 suncol1 = vec3(0.9,0.3,0.2);\nconst vec3 suncol2 = vec3(1.,0.9,0.5);\nconst vec3 cloudcol = vec3(0.9,0.7,0.6);\n\nvec3 render(in vec2 uv)\n{\n    vec3 color = vec3(0.);\n    \n    float mount1 = 0.7+0.09*sin(uv.x*10.)*sin(uv.x*10.)+sin(uv.x*50.618+53.)*.015+sin(uv.x*123.618+12.)*.005+sin(uv.x*54.)*sin(uv.x*54.)*0.01;\n    float m1ss = (smoothstep(mount1,mount1+0.003, 1.-uv.y));\n    \n    float mount2 = 0.8+0.09*sin(uv.x*6.+0.5)*sin(uv.x*6.+0.5)+sin(uv.x*50.618+25.)*.015+sin(uv.x*123.618+12.)*.005;\n    float m2ss = (smoothstep(mount2,mount2+0.002, 1.-uv.y));\n    \n    float sun = sqrt(pow(uv.x-0.85,2.)+pow(uv.y-0.1,2.));\n    float sunr = 0.45;\n    float sunss = smoothstep(sun, sun+0.0, sunr);\n    vec3 suncol = mix(suncol2, suncol1, 0.8-(uv.y));\n    \n    float cloudss = smoothstep(0.75,0.2,1.-uv.y);\n    vec3 cloudcolor = mix(cloudcol, suncol1, 0.7*(1.-uv.y+0.3));\n    \n    float cloud_val1 = (value_noise(uv*vec2(1.,7.)+vec2(1.,0.)*-iTime*0.010));\n    float cloud_val2 = (value_noise(uv*vec2(2.,8.)+vec2(2.,.2)*-(iTime)*0.02));\n    float cloud_val3 = (value_noise(uv*vec2(1.,5.)+vec2(1.,0.)*-(iTime)*0.005));\n    float cloud_val = sqrt(cloud_val2*cloud_val1);\n    cloud_val = sqrt(cloud_val3*cloud_val);\n    \n    // Hard(er)-edged clouds\n    cloud_val = smoothstep(0.48,0.5,cloud_val);\n    \n    color = (bgcol1*uv.y+bgcol2*(1.-uv.y));\n    color = mix(color, suncol, sunss);\n    color = mix(color, mount1col, m1ss);\n    color = mix(color, mount2col, m2ss);\n    color = mix(color, cloudcolor, cloud_val*cloudss);\n    \n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 color = vec3(0.);\n    for (int i = -AA; i < AA + 1; ++i)\n    {\n        for (int j = -AA; j < AA + 1; ++j)\n        {\n            vec2 p = vec2(float(i),float(j))/(iResolution.xy*float(2*AA+1));\n            color += render(uv+p);\n        }\n    \n    }\n    color /= pow(float(2*AA+1),2.);\n    \n    fragColor.rgb = color;\n}","name":"Image","description":"","type":"image"}]}