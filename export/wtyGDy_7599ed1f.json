{"ver":"0.1","info":{"id":"wtyGDy","date":"1579732828","viewed":77,"name":"pastel color pattern","username":"anedroid","description":"test","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323846\n\nvec2 rotate2D(vec2 _st, float _angle){\n    _st -= 0.5;\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    _st += 0.5;\n    return _st;\n}\n\nvec2 tile(vec2 _st, float _zoom){\n    _st *= _zoom;\n    return fract(_st);\n}\n\nfloat box(vec2 _st, vec2 _size, float _smoothEdges){\n    _size = vec2(0.4)-_size*0.5;\n    vec2 aa = vec2(_smoothEdges*0.5);\n    vec2 uv = smoothstep(_size,_size+aa,_st);\n    uv *= smoothstep(_size,_size+aa,vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nfloat check(vec2 _st){\n    float ratio = (sin(iTime * PI * 0.5)+1.0) / 2.0;\n    vec2 v_ratio = vec2(cos(iTime* PI)*0.5+0.5, sin(iTime*PI)*0.5 + 0.5);\n    v_ratio = vec2(fract(iTime));\n    float res = step(v_ratio.x, _st.x);\n    float res2 = step(v_ratio.y, _st.y);\n    float res3 = step(_st.x, v_ratio.x);\n    float res4 = step(_st.y, v_ratio.y);\n    return res * res2 + res3 * res4;\n}\n\nvec2 scale(vec2 _st, vec2 _scale)\n{\n\treturn mat2(_scale.x, 0.0,\n               0.0, _scale.y) * _st;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 color = vec3(0.0);\n\n    uv = tile(uv,3.0);\n    \n    vec2 uv2 = fragCoord/iResolution.xy;\n    uv2 = tile(uv2,4.0);\n\n\tuv = rotate2D(uv, iTime * PI);\n\n    vec3 pink = vec3(1.000,0.604,0.887);\n    vec3 white = vec3(1.0);\n    vec3 waterblue = vec3(0.545,0.933,1.000);\n    \n    vec3 pattern = vec3(box(uv,vec2(0.5),0.01));\n    vec3 rev_pattern = vec3(1.0) - pattern;\n        \n    color += pattern * pink;\n    color += rev_pattern * waterblue;\n    \n    vec3 checkpattern = vec3(check(uv2));\n    vec3 rev_checkpattern = vec3(1.0) - checkpattern;\n    vec3 color2 = checkpattern * pink + rev_checkpattern;\n    \n    vec3 result = color2 * color;\n\n    fragColor = vec4(result,1.0);\n}","name":"Image","description":"","type":"image"}]}