{"ver":"0.1","info":{"id":"MflXD4","date":"1705296683","viewed":214,"name":"Runawaycircle","username":"banni","description":"Just learning how to manipulate rays in raymarching","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarched"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat sdPlane(vec3 p, float h)\n{\n    float offset = smoothstep(1., 0., abs(p.x * .6)) * .5;\n    float k = smoothstep(1., 0., p.z - iTime * 34.01);\n    offset *= k;\n    \n    float noiseOffset = sin(p.x) * sin(p.z) * .1;\n    return p.y + h + offset - noiseOffset;\n}\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nvec3 map(vec3 p)\n{\n    vec3 ps = p;\n    ps -= vec3(0,.3,iTime * 34.);\n    ps -= vec3(0,.05 * sin(iTime * 22.), .0);\n    \n    float angle2 = -0.7 * sin(iTime * .1);\n    ps.xy *= mat2(cos(angle2), -sin(angle2), sin(angle2), cos(angle2));    \n    float angle = iTime * 5.;\n    ps.zy *= mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    float d = sdSphere(ps,1.2);\n    vec3 q = p;\n    q.x = abs(q.x);\n    q.xz = mod(q.zx, 5.) - 2.5;\n    float d3 = min(d,sdSphere(q - vec3(2.,-.3,0),.2));\n    float d2 = sdPlane(p,.3);\n    float cols = d3 < d ? 1. : sin(atan(ps.z, ps.y) * 5.);\n    d = min(d,d3);\n    vec3 f = d < d2 ? vec3(d,.0,cols) : vec3(d2,1.,0.);\n    return f;\n}\n\nvec3 calcNormal(vec3 p)\n{\n    vec2 e = vec2(.001, .0);\n    return normalize(\n        vec3(\n            map(p+e.xyy).x - map(p-e.xyy).x,\n            map(p+e.yxy).x - map(p-e.yxy).x,\n            map(p+e.yyx).x - map(p-e.yyx).x\n        )\n    );\n}\n\nfloat softShadow(vec3 ro, vec3 light_dir)\n{\n    vec3 rd = light_dir;\n    float res = 1.;\n    float t= .1;\n    for(int i = 0; i < 100; i++)\n    {\n        vec3 p2 = ro + rd * t;\n        float d = map(p2).x;\n        res = min(res, 2. * d/t);\n        if (d < .001)\n        {\n            return 0.;\n        }\n        t += d;\n    }\n    \n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0,2,-20) + vec3(0,0,iTime * 33.9);\n    vec3 rd = normalize(vec3(uv,5.));\n    \n    float t = 0.;\n    \n    for(t = 0.; t<200.;)\n    {\n        vec3 p = ro + rd * t;\n        p.x += (t * t * .0005) * sin(iTime * .1);\n        p.y -= (t * t * .001);\n        vec3 d = map(p);\n        \n        if (d.x < .001)\n        {\n            vec3 n = calcNormal(p);\n            vec3 light_dir = normalize(vec3(5,3,-7));\n            float diff = max(.0, dot(n, light_dir));\n            vec3 matcol = d.y < .5 ? vec3(1,0,0) : vec3(0.1,.2,0.1);\n            if (d.y < .5)\n            {\n                matcol *= d.z;\n            }\n            float shadow = softShadow(p, light_dir);\n            col = vec3(diff) * matcol * shadow;\n            break;\n        }\n        t += d.x;\n    }\n    col = pow(col, vec3(.4545));\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}