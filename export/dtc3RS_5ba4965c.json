{"ver":"0.1","info":{"id":"dtc3RS","date":"1682607741","viewed":100,"name":"Fork illusion 1 altunenes 256","username":"altunenes","description":"Playing with  Fabrice's codex :D \nthe key point is the edges, maybe very very thin edges might be enough to maintain the illusion with the background modulation.\nillusory zoom in/zoom out maybe?? :)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["illusion","perception"],"hasliked":0,"parentid":"dt3GDM","parentname":"illusion 11e"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = 5.*( 2.*u - R ) / R.y,\n         I = floor(U)+.5,\n         F = fract(U)-.5,\n         H = fract(1e4*sin(I*mat2(R-3.,R+1.)));\n\n    float p = 3./R.y, l = length(F), L = length(U), i = length(I);\n\n    float oscillation = 0.2 * sin(2.0 * 3.14159 * 1.0 * iTime) + 0.5; // Reduced the flash frequency\n    vec4 discColor = vec4(.2+.5* sin(l > .4 - 3.*p* abs(dot(U,F))/L/l ? 3.*l - sign(L-i)- - 3.28*H.y -12.*iTime* sign(H.x-.5) : 0. ));\n    vec4 bgColor = mix(vec4(0.5, 0.5, 0.5, 1), vec4(0, 0, 0, 1), oscillation);\n\n    vec4 finalColor = mix(bgColor, discColor, smoothstep(0.,-p, l-.4));\n\n    // Apply the approximate sRGB conversion (sqrt) as suggested\n    O = vec4(sqrt(finalColor.rgb), finalColor.a);\n}","name":"Image","description":"","type":"image"}]}