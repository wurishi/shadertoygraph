{"ver":"0.1","info":{"id":"M3SGzd","date":"1708724257","viewed":77,"name":"cat cat cat cat cat cat cat cat","username":"Nazlbit","description":"cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf","cat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float ellipse_sdf(const vec2 uv, const vec2 pos, const vec2 size)\n{\n    return length((uv - pos)/size) - 1.;\n}\n\nfloat cross2d(const vec2 a, const vec2 b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n\nfloat triangle_sdf(const vec2 uv, const vec2 a, const vec2 b, const vec2 c)\n{\n    if(dot(uv-a, b-a) < 0. && dot(uv-a, c-a) < 0.)\n        return length(uv - a);\n    if(dot(uv-b, a-b) < 0. && dot(uv-b, c-b) < 0.)\n        return length(uv - b);\n    if(dot(uv-c, b-c) < 0. && dot(uv-c, a-c) < 0.)\n        return length(uv - c);\n    vec3 xyz = vec3(cross2d(normalize(b-a), uv-a), cross2d(normalize(c-b), uv-b), cross2d(normalize(a-c), uv-c)) * sign(cross2d(c-a, b-a));\n    return max(max(xyz.x, xyz.y), xyz.z);\n}\n\nfloat cat_sdf(const vec2 uv)\n{\n    float contour = ellipse_sdf(uv, vec2(0), vec2(0.3, 0.25));\n    float left_ear  = triangle_sdf(uv, vec2(-0.08, 0.21), vec2(-0.3, 0), vec2(-0.35, 0.4));\n    left_ear *= left_ear + 0.03;\n    float right_ear  = triangle_sdf(uv, vec2(0.08, 0.21), vec2(0.3, 0), vec2(0.35, 0.4));\n    right_ear *= right_ear + 0.03;\n    float left_eye = ellipse_sdf(uv, vec2(-0.12, 0.05), vec2(0.06));\n    left_eye *= ellipse_sdf(uv, vec2(-0.12 + sin(iTime)*0.03, 0.05), vec2(0.004, 0.04));\n    float right_eye = ellipse_sdf(uv, vec2(0.12, 0.05), vec2(0.06));\n    right_eye *= ellipse_sdf(uv, vec2(0.12 + sin(iTime)*0.03, 0.05), vec2(0.004, 0.04));\n    float left_cheek = ellipse_sdf(uv, vec2(-0.05, -0.1), vec2(0.07, 0.055));\n    float right_cheek = ellipse_sdf(uv, vec2(0.05, -0.1), vec2(0.07, 0.055));\n    float nose = triangle_sdf(uv, vec2(0, -0.075), vec2(0.05, -0.04), vec2(-0.05, -0.04));\n    float whisker1 = triangle_sdf(uv, vec2(0.085, -0.1), vec2(0.085, -0.105), vec2(0.5, -0.11));\n    float whisker2 = triangle_sdf(uv, vec2(0.075, -0.12), vec2(0.074, -0.125), vec2(0.4, -0.18));\n    float whisker3 = triangle_sdf(uv, vec2(0.076, -0.08), vec2(0.078, -0.085), vec2(0.37, -0.05));\n    float whisker4 = triangle_sdf(uv, vec2(-0.08, -0.1), vec2(-0.085, -0.105), vec2(-0.5, -0.11));\n    float whisker5 = triangle_sdf(uv, vec2(-0.075, -0.12), vec2(-0.074, -0.125), vec2(-0.4, -0.18));\n    float whisker6 = triangle_sdf(uv, vec2(-0.076, -0.08), vec2(-0.078, -0.085), vec2(-0.37, -0.05));\n    float whiskers = min(min(min(min(min(whisker1, whisker2), whisker3), whisker4), whisker5), whisker6);\n    float face = min(contour * left_eye * right_eye * min(left_cheek, right_cheek), nose);\n    return min(min(right_ear, left_ear), face) * whiskers;\n}\n\nvoid mainImage( out vec4 result, in vec2 coords )\n{\n    vec2 uv = (coords - iResolution.xy * 0.5) / iResolution.y;\n\n    result = vec4(cat_sdf(uv) < 0.);\n    result.w = 1.;\n}","name":"Image","description":"","type":"image"}]}