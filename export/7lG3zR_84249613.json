{"ver":"0.1","info":{"id":"7lG3zR","date":"1637056643","viewed":126,"name":"My first 2D SDF line","username":"Jpg3D","description":"Just that. Trying to derive a line LOL","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["simple","sdf","line"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 lerp(vec3 colorone, vec3 colortwo, float value)\n{\n\treturn (colorone + value*(colortwo-colorone));\n}\n#define lineSpeed 0.2\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 50.0*(fragCoord-0.5)/iResolution.x; //Center the UV and make it bigger\n    //P1 and P2 are point 1 and point 2 positions\n    vec2 p1 = vec2(22.0+sin(iTime*1.123456789*lineSpeed)*12.5,15.0+sin(iTime*1.3210987654*lineSpeed)*10.0);\n    vec2 p2 = vec2(33.0+sin(iTime*1.987654321*lineSpeed)*12.5,15.0+sin(iTime*1.6789012345*lineSpeed)*10.0);\n    vec2 dir = normalize(p2-p1);\n    \n    float h = min(1.0,max(0.0,dot(dir,uv-p1)/length(p1-p2))); //from 0.0 to 1.0 wich point is closer p1 or p2\n    float d = length((uv-p1)-h*(p2-p1));//<- This line is possibly why scientist believe in god.\n    //The SDF is already on d\n    float mask = smoothstep(0.95,1.05,d);\n    \n    //Add it some color\n    vec3 color1=vec3(0.0,0.0,1.0);\n    vec3 color2=vec3(0.0,1.0,1.0);\n    \n    vec3 color3=vec3(1.0,0.0,1.0);\n    vec3 color4=vec3(1.0,1.0,0.0);\n    \n    vec3 bg1=vec3(0.0,0.5,0.75);\n    vec3 bg2=vec3(0.0,0.75,1.0);\n    \n    fragColor = vec4(lerp(lerp(color1,color2,d),lerp(color3,color4,d),h)*(1.0-mask)+mask*lerp(bg1,bg2,(sin(-iTime*8.0-d*3.1415)*0.5+0.5)),1.0);\n    \n}\n\n\n\n/*\n//This is the old version. It should be easier to understand.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5)/iResolution.x*100.0;\n\n    vec2 p1 = vec2(35.0+sin(iTime+1.123456789)*25.0,30.0+sin(iTime*1.3210987654)*20.0);\n    vec2 p2 = vec2(65.0+sin(iTime-1.987654321)*25.0,30.0+sin(iTime*1.6789012345)*20.0);\n    vec2 dir = normalize(p2-p1);\n\n    float d1 = length(p1-uv); //<-Distance to point 1\n    float d2 = length(p2-uv); //<-Distance to poinr 2\n    \n    float d3 = length(dot(vec2(dir.y,-dir.x),uv-p1)); //<-Distance to line center\n    \n    float d;\n    float ll = dot(dir,uv-p1)/length(p1-p2); //line length? This line was a pure faith act\n    if(ll<0.0||ll>1.0){\n        d = smoothstep(0.9,1.1,min(d1,d2));\n    }else{\n        d = smoothstep(0.9,1.1,d3);\n    }\n    \n    fragColor = vec4(d,d,d,1.0);\n}\n\n*/\n\n\n ","name":"Image","description":"","type":"image"}]}