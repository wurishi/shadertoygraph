{"ver":"0.1","info":{"id":"wl2GDw","date":"1559849893","viewed":464,"name":"Painting round brush","username":"badjano","description":"Simple brush drawing on buffer.\nalt -> color picker\n[, ] -> brush_size","likes":11,"published":1,"flags":48,"usePreview":0,"tags":["painting","paint","draw","drawing","buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// there's nothing here\n// read buffer A for drawing code\n// read buffer B for palette\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0,fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define BRUSH_SIZE 75.0\n#define HARDNESS 0.25\n#define MOD3 vec3(.1031,.11369,.13787)\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\n\nfloat fbm(vec3 p)\n{\n    float r = 0.;\n    float m = 0.5;\n    for (int i=0; i<5;i++){\n        r += perlin_noise(p) * m;\n        p *= 2.;\n        m *= 0.5;\n    }\n    return r;\n}\n\nbool keyPress(int ascii) {\n\treturn (texture(iChannel2,vec2((.5+float(ascii))/256.,0.25)).x > 0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float limit = iResolution.x -100.;\n    vec2 scale = vec2(1.) / iResolution.xy;\n    vec2 uvLimit = vec2(limit-1.,iResolution.y) * scale;\n    vec2 uv = fragCoord.xy * scale;\n    float ratio = iResolution.x/iResolution.y;\n    float value = 0.;\n    if ( !keyPress(18) && iMouse.z > 0.5 && iMouse.x < limit){\n        float b2 = 1.+texture(iChannel1,vec2(0.,1.)).x;\n        float h2 = pow(HARDNESS,3.)/b2;\n        float d = distance(h2*iMouse.xy,h2*fragCoord);\n        d = pow(d,0.25);\n        d = b2*BRUSH_SIZE*h2-d;\n        vec2 uv2 = uv * vec2(ratio,1.);\n        \n        d *= pow(fbm(vec3(uv2,iTime*10.)*20.)*.5+.5,2.);\n        value = clamp(d,0.,1.);\n    }\n    \n    const int _size = 5;\n    if ( false ){\n        vec4 col = vec4(0.);\n        float perc = 1./pow(float(_size) * 2. + 1.,2.);\n        for (int i=-_size; i<=_size; i++){\n            for (int j=-_size; j<=_size; j++){\n                vec2 iv = vec2(float(i),float(j)) * scale;\n                col += texture(iChannel0,clamp(uv + iv,vec2(0.),uvLimit)) * perc;\n            }\n        }\n\n        if ( fragCoord.x > limit ){\n            fragColor = texture(iChannel1,uv);\n        } else {\n            fragColor = mix(col,texture(iChannel1,vec2(0.,0.)),value);\n        }\n    } else {\n        vec2 col = vec2(0.);\n        float perc = 1./pow(float(_size) * 2. + 1.,2.);\n        for (int i=-_size; i<=_size; i++){\n            for (int j=-_size; j<=_size; j++){\n                vec2 iv = vec2(float(i),float(j)) * scale;\n                vec4 c = texture(iChannel0,clamp(uv + iv,vec2(0.),uvLimit));\n                col += length(c) * perc * iv;\n            }\n        }\n\n        if ( fragCoord.x > limit ){\n            fragColor = texture(iChannel1,uv);\n        } else {\n            vec4 final = mix(texture(iChannel0,clamp(uv + col.xy,vec2(0.),uvLimit)),texture(iChannel1,vec2(0.,0.)),value);\n            fragColor = clamp(final,0.,1.);\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec4 getColor(vec2 p){\n    float y = 2.-(p.x - (iResolution.x -100.))/50.;\n\tp = vec2(p.y/iResolution.y,clamp(y,0.,1.));\n    vec3 rgb = hsv2rgb(vec3(p.x,1.,p.y));\n    return vec4(mix(rgb,vec3(1.),clamp(y-1.,0.,1.)),1.);\n}\n\nbool keyPress(int ascii) {\n\treturn (texture(iChannel2,vec2((.5+float(ascii))/256.,0.25)).x > 0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float limit =iResolution.x -100.;\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    if ( fragCoord.x > limit ){ // draw palette\n        fragColor = getColor(fragCoord);\n    } else if ( uv.y > 0.5 ){\n        float x = texture(iChannel1,uv).x;\n        if ( keyPress(219) ){\n\t        x -= 0.02;\n        } else if( keyPress(221) ){\n            x += 0.02;\n        }\n        fragColor = vec4(clamp(x,-10.,10.));\n    } else if ( iMouse.w > 0.5 ) {\n        if ( iMouse.x > limit ){\n\t        fragColor = getColor(iMouse.xy);\n        } else if ( keyPress(18) ){\n\t        fragColor = texture(iChannel0,iMouse.xy/iResolution.xy);\n        } else {\n            discard;\n        }\n    } else if ( fragCoord.x <= limit ){\n        discard;\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}