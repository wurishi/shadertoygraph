{"ver":"0.1","info":{"id":"McsfD4","date":"1723815929","viewed":50,"name":"Halftone screen","username":"werls","description":"Grid-based technique to create a halftone screen effect, representing the input image using circles. The radius of each circle varies according to the brightness of the original image.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["circles","grid","filter","effect","halftone","halftone","dots","dotscreen"],"hasliked":0,"parentid":"lX2XWK","parentname":"Dot screen"},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define GRID_SIZE 64. // Grid size constant\n\n// Function to generate pseudo-random value based on 2D coordinates\nfloat Hash21(vec2 p) {\n    return fract(sin(dot(p.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n// Function to rotate a vector by a given angle\nvec2 rotate(vec2 v, float angle) {\n    float cos_a = cos(angle);\n    float sin_a = sin(angle);\n    return vec2(v.x * cos_a - v.y * sin_a, v.x * sin_a + v.y * cos_a);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    // Setup\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y; // Normalized coordinates\n    vec2 uv_img = fragCoord / iResolution.xy; // Normalized image coordinates\n\n    // Rotate the uv coordinates by 45 degrees for grid calculation\n    vec2 rotated_uv = rotate(uv, radians(45.0));\n    \n    vec2 id = floor(rotated_uv * GRID_SIZE); // Grid cell index\n    \n    // Offset odd rows by half the grid size\n    if (mod(id.y, 2.0) == 1.0) {\n        rotated_uv.x += 0.5 / GRID_SIZE;\n    }\n    \n    vec2 gv = fract(rotated_uv * GRID_SIZE); // Grid cell vector\n    \n    float t = iTime * 5.; // Time variable\n\n    vec3 avg = vec3(0.); // Initialize average color\n    \n    // Loop through neighboring pixels\n    for (float y = -1.; y <= 1.; y++) {\n        for (float x = -1.; x <= 1.; x++) {\n            vec2 offset = vec2(x, y) / GRID_SIZE; // Offset from current pixel\n            if (mod(id.y + y, 2.0) == 1.0) { // Apply horizontal offset for staggered rows\n                offset.x += 0.5 / GRID_SIZE;\n            }\n            vec3 c = texture(iChannel0, uv_img + offset).rgb; // Color of neighboring pixel\n            avg += c; // Accumulate color values\n        }\n    }\n    \n    avg /= 9.; // Average color calculation\n    \n    // Calculate brightness of the average color\n    float brightness = dot(avg, vec3(0.299, 0.587, 0.114));\n    \n    float radius = 0.1 + brightness; // Circle radius based on brightness\n    \n    // Calculate distance from the center of the grid cell to draw the circle\n    float circle = length(gv - 0.5) - radius * 0.6;\n    \n    // Declare and initialize col as vec3 before adding to it\n    vec3 col = vec3(0.); // Initialize output color\n    \n    col += smoothstep(radius * 0.01, radius * 0.01 - 0.08, circle); // Circle drawing\n    \n    // Output color\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}