{"ver":"0.1","info":{"id":"wsXSWM","date":"1551378697","viewed":119,"name":"Fractal Matrix Blending","username":"ptrgags","description":"On a whim, I decided to try my \"Blending Matrices\" idea (bilinearly interpolating 4 matrcies) but use a buffer to iteratively apply the deforrmation.\n\nChanged the animation start to ~10 seconds in  an attempt to get a screenshot.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["fractals","blending","matrices"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.1415\n#define START_TIME 10.0\n\nmat2 rotate(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(c, s, -s, c);\n}\n\nmat2 scale(float sx, float sy) {\n    return mat2(sx, 0, 0, sy);\n}\n\n/**\n * I guess glsl doesn't have mix(mat2, mat2, float)?\n */\nmat2 mix_mat(mat2 a, mat2 b, float t) {\n    return (1.0 - t) * a + t * b;\n}\n\nmat2 blended_transform(vec2 uv) {\n    // Four arbitrary transformations, one at each corner.\n    mat2 bottom_left = rotate(-PI / 6.0 - iTime - START_TIME);\n    mat2 top_left = scale(0.5, 0.5);\n    mat2 top_right = rotate(PI / 6.0 + iTime - START_TIME);\n    mat2 bottom_right = mat2(1.0, 1.0, -1.0, 2.0);\n    \n    mat2 blended_left = mix_mat(bottom_left, top_left, uv.y);\n    mat2 blended_right = mix_mat(bottom_right, top_right, uv.y);\n    return mix_mat(blended_left, blended_right, uv.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    \n    vec4 initial_texture = texture(iChannel1, uv);\n    \n    vec2 warped_uv = blended_transform(uv) * uv;\n    \n    vec4 warped = texture(iChannel0, warped_uv);\n    \n    vec4 selected_color = mix(initial_texture, warped, float(iTime > START_TIME));\n    \n    \n    \n    fragColor = selected_color;\n}","name":"Buffer A","description":"","type":"buffer"}]}