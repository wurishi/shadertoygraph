{"ver":"0.1","info":{"id":"DdSGDD","date":"1667580273","viewed":248,"name":"CheapFire01","username":"Del","description":"Cheap(ish) fire effect - left mouse to see non polar coords","likes":15,"published":3,"flags":0,"usePreview":0,"tags":["fbm","fire","polar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Cheap(ish) tweakable flat / polar burn effect\n\n//#define USE_PROCEDURAL\n\n// noise, IQ - https://www.shadertoy.com/view/4sfGzS\n#ifdef USE_PROCEDURAL\n//float hash(vec3 p)  // replace this by something better\n//{\n//    p  = fract( p*0.3183099+.1 );\n//\tp *= 17.0;\n//    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n//}\n\n#define UI0 1597334673U\n#define UI1 3812015801U\n//#define UI2 uvec2(UI0, UI1)\n#define UI3 uvec3(UI0, UI1, 2798796415U)\n//#define UI4 uvec4(UI3, 1979697957U)\n#define UIF (1.0 / float(0xffffffffU))\n\nfloat hash(vec3 p)\n{\n\tuvec3 q = uvec3(ivec3(p)) * UI3;\n\tuint n = (q.x ^ q.y ^ q.z) * UI0;\n\treturn float(n) * UIF;\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(i+vec3(0,0,0)), \n                        hash(i+vec3(1,0,0)),f.x),\n                   mix( hash(i+vec3(0,1,0)), \n                        hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(i+vec3(0,0,1)), \n                        hash(i+vec3(1,0,1)),f.x),\n                   mix( hash(i+vec3(0,1,1)), \n                        hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n#else\nfloat noise( in vec3 x )\n{\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (i.xy+vec2(37.0,17.0)*i.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+1.5)/256.0, 0.0).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n#endif\n\nfloat mNoise( in vec3 pos )\n{\n    vec3 q = pos;\n    const mat3 m = mat3( 0.20,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n                    \n    float amplitude = .65;\n    float f  = amplitude*noise( q );\n    q = m*q*2.11;\n    float scale = 2.02;\n    for (int i = 0; i < 3; ++i)\n    {    \n    \tf += amplitude * noise( q );\n        q = m*q*scale;        \n        amplitude *= 0.5;\n        \n    }\n    return f;\n}\n\n\n\nvec2 polarMap(vec2 uv, float shift, float inner)\n{\n    float px = 1.0 - fract(atan(uv.y, uv.x) / 6.28 + 0.25) + shift;\n    float py = (sqrt(uv.x * uv.x + uv.y * uv.y) * (1.0 + inner * 2.0) - inner) * 2.0;\n    return vec2(px, py);\n}\n\n// shane?\nvec3 firePalette(float i)\n{\n\n    float T = 1400. + 1400.*i; // Temperature range (in Kelvin).\n    vec3 L = vec3(7.4, 5.6, 4.4); // Red, green, blue wavelengths (in hundreds of nanometers).\n    L = pow(L,vec3(5.0)) * (exp(1.43876719683e5/(T*L))-1.0);\n    return 1.0-exp(-5e8/L); // Exposure level. Set to \"50.\" For \"70,\" change the \"5\" to a \"7,\" etc.\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n\t\n\tvec2 uv = p;\n    uv.x = abs(uv.x); // mirror\n    \n    // tweak as you like...\n    float inner = 0.0;\n    float shift = 0.0;\n    float hrepeat = 16.0;\n    uv = polarMap(uv*1.4,shift,inner);\n    uv.x *= hrepeat;\n\t\n    if (iMouse.z>0.5)\n        uv = vec2(p.x*4.0,p.y+0.9); // use nonpolar uv\n    \n\tfloat t = iTime * 0.2;\n\tfloat fval = uv.y;\n\tuv = vec2(uv.x, uv.y - t) * 2.55;\n\tfval = fval + 0.67 + (mNoise(vec3(uv, t*1.1)) * 0.33);\n    vec3 color = firePalette(2.4-fval);\n\tfragColor = vec4(color.xyz,1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}