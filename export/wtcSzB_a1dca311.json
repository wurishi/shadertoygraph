{"ver":"0.1","info":{"id":"wtcSzB","date":"1581201750","viewed":514,"name":"Squares Analytic Motion Blur ","username":"fizzer","description":"Analytic (linear) motion blur of a square. It is pretty much based on the same idea as IQ's motion-blurred discs (see [url]https://www.shadertoy.com/view/MdSGDm[/url])","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["motionblur","square","analytic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n// Analytic Linear Motion Blur Series:\n//\n// Self-Intersecting Polygon (XOR Rule) - https://www.shadertoy.com/view/tltXRS\n// Concave Polygon - https://www.shadertoy.com/view/tldSzS\n// Square - https://www.shadertoy.com/view/wtcSzB\n// Checkerboard - https://www.shadertoy.com/view/tlcXRX\n//\n\nvec2 screenToSquareTransform(vec2 p, float t, float i)\n{\n    float a = t * 2. + cos(t + i) + i / 3.;\n    mat2 m = mat2(cos(a), sin(a), -sin(a), cos(a));\n    vec2 o = vec2(cos(t * 2. * 2. + i * 5.5) / 2., sin(t * 2.9 * 2. + i * 1.27) * .25);\n    o.y += cos(t / 4. + i) * .1;\n    return m * (p - o) * (3. + sin(t - i) * 1.5) * 8.;\n}\n\nfloat integrateSquare(vec2 pa, vec2 pb)\n{\n    vec2 d = pb - pa, sd = sign(d);\n    \n    vec2 t0 = (-sd - pa) / d;\n    vec2 t1 = (+sd - pa) / d;\n    \n    vec2 i = clamp(vec2(max(t0.x, t0.y), min(t1.x, t1.y)), 0., 1.);\n    \n    return max(0., i.y - i.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n\n    float t = iTime;\n    \n    vec3 col = vec3(1. / 9.);\n\n  \tfor(int i = 0; i < 15; ++i)\n    {\n        vec2 pa = screenToSquareTransform(uv, t, float(i));\n        vec2 pb = screenToSquareTransform(uv, t - 1. / 30., float(i));\n\n        float is = integrateSquare(pa, pb);\n\n        col = mix(col, mix(vec3(1, .5, .1), vec3(1), fract(float(i) * 1.629)), is);\n    }\n    \n    fragColor = vec4(pow(col, vec3(1. / 2.2)),1.0);\n}","name":"Image","description":"","type":"image"}]}