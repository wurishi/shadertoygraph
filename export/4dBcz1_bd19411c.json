{"ver":"0.1","info":{"id":"4dBcz1","date":"1490796467","viewed":301,"name":"Edge Detection Filter","username":"TsinglW","description":"Prewitt (left) and Sobel (right) Edge Detection Filter.\n\nGithub:[url]https://github.com/ROOOO/Shadertoy[/url]","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["sobel","edge","prewitt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Prewitt\nconst int PGx[9] = int[](-1, 0, 1, -1, 0, 1, -1, 0, 1);\nconst int PGy[9] = int[](-1, -1, -1, 0, 0, 0, 1, 1, 1);\n// Sobel\nconst int SGx[9] = int[](-1, 0, 1, -2, 0, 2, -1, 0, 1);\nconst int SGy[9] = int[](-1, -2, -1, 0, 0, 0, 1, 2, 1);\nconst vec2 vUV[9] = vec2[](\n    vec2(-1.0, -1.0), vec2(0.0, -1.0), vec2(1.0, -1.0),\n    vec2(-1.0, 0.0), vec2(0.0, 0.0), vec2(1.0, 0.0),\n    vec2(-1.0, 1.0), vec2(0.0, 1.0), vec2(1.0, 1.0));\nfloat x;\n\nvec4 line(vec2 uv) {\n    float d = abs(uv.x - x / iResolution.x);\n    return vec4(0.0, 0.0, 0.0, d < 0.003 ? 1.0 : 0.0);\n}\n\nfloat luminance(vec4 color) {\n    return 0.2125 * color.r + 0.7154 * color.g + 0.0721 * color.b;\n}\n\nfloat sobel(vec2 fragCoord, sampler2D mainTex) {\n    float texColor = 0.0;\n    float edgeX = 0.0;\n    float edgeY = 0.0;\n    for (int i = 0; i < 9; ++i) {\n        texColor = luminance(texture(mainTex, (fragCoord + vUV[i]) / iResolution.xy));\n        if (fragCoord.x < iMouse.x) {\n            edgeX += float(PGx[i]) * texColor;\n            edgeY += float(PGy[i]) * texColor;        \n        } else {\n            edgeX += float(SGx[i]) * texColor;\n            edgeY += float(SGy[i]) * texColor;                \n        }\n    }\n    return 1.0 - abs(edgeX) - abs(edgeY);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 edgeCol = vec4(1.0, 1.0, 1.0, 1.0);\n    vec4 bgCol = vec4(0.3, 0.3, 0.3, 1.0);\n    x = iMouse.z > 0.0 ? iMouse.x : iResolution.x / 2.0; \n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float edge = sobel(fragCoord, iChannel0);\n    vec4 withEdgeCol = mix(edgeCol, texture(iChannel0, uv), edge);\n    vec4 onlyEdgeCol = mix(edgeCol, bgCol, edge);\n    fragColor = mix(withEdgeCol, onlyEdgeCol, 0.5);\n    \n    vec4 cl = line(uv);\n    fragColor = mix(fragColor, cl, cl.a);\n}","name":"Image","description":"","type":"image"}]}