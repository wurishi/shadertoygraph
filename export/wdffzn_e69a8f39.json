{"ver":"0.1","info":{"id":"wdffzn","date":"1587598885","viewed":57,"name":"Penumbra Shadows_HaoyuSui","username":"HaoyuSui","description":"Penumbra Shadows","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["penumbrashadows"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int RAY_STEPS = 256;\nconst float HALF_PI = 3.14159 * 0.5;\n\n\n// The higher the value, the smaller the penumbra\nconst float SHADOW_HARDNESS = 6.0;\n\n// 0 for penumbra shadows, 1 for hard shadows\n#define HARD_SHADOW 0\n\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n    \n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\n\n\nvoid sceneMap3D(vec3 pos, out float t, out int hitObj, vec3 lightPos)\n{   \n    t = plane(pos, vec4(0.0, 1.0, 0.0, 2.5));  \n    hitObj = 0;\n    \n    float t2;\n        \n    if((t2 = box(rotateY(pos + vec3(-2.2, -2.0, -3), -27.5 * 3.14159 / 180.0), vec3(1.5, 3.0, 1.5))) < t)  // large box\n    {\n        t= t2;\n        hitObj = 1;\n    }\n    if((t2 = box(rotateY(pos + vec3(2.2, -2.0, -3), 27.5 * 3.14159 / 180.0), vec3(1.5, 1.5, 1.5))) < t)  // small box\n    {\n        t= t2;\n        hitObj = 2;\n    }\n}\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t = plane(pos, vec4(0.0, 1.0, 0.0, 2.5));\n    t = min(t, box(rotateY(pos + vec3(-2.2, -2.0, -3), -27.5 * 3.14159 / 180.0), vec3(1.5, 3.0, 1.5)));\n    t = min(t, box(rotateY(pos + vec3(2.2, -2.0, -3), 27.5 * 3.14159 / 180.0), vec3(1.5, 1.5, 1.5)));\n    \n    return t;\n}\n\nfloat sceneMap3D(vec3 pos, vec3 lightPos)\n{\n    float t = plane(pos, vec4(0.0, 1.0, 0.0, 2.5));\n    t = min(t, box(rotateY(pos + vec3(-2.2, -2.0, -3), -27.5 * 3.14159 / 180.0), vec3(1.5, 3.0, 1.5)));\n    t = min(t, box(rotateY(pos + vec3(2.2, -2.0, -3), 27.5 * 3.14159 / 180.0), vec3(1.5, 1.5, 1.5)));\n    \n    return t;\n}\n\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj, vec3 lightPos)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, hitObj, lightPos);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n    // No intersection\n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightDir)\n{   \n    switch(hitObj)\n    {   \n        case 0:  // floor\n        return vec3(1.0, 0.88, 0.7);\n        break;\n        \n        case 1:  // large box\n        return vec3(1.0, 0.67, 0.67);\n        break;\n        \n        case 2:  // small box\n        return vec3(0.67, 1.0, 0.67);\n        break;\n       \n        \n        case -1:\n        return vec3(0., 0., 0.);\n        break;\n        \n    }\n    return vec3(0.0);\n}\n\nfloat hardShadow(vec3 dir, vec3 origin, float min_t) {\n    float t = min_t;\n    for(int i = 0; i < RAY_STEPS; ++i) {\n        float m = sceneMap3D(origin + t * dir);\n        if(m < 0.0001) {\n            return 0.0;\n        }\n        t += m;\n    }\n    return 1.0;\n}\n\nfloat softShadow(vec3 dir, vec3 origin, float min_t, float k) {\n    float res = 1.0;\n    float t = min_t;\n    for(int i = 0; i < RAY_STEPS; ++i) {\n        float m = sceneMap3D(origin + t * dir);\n        if(m < 0.0001) {\n            return 0.0;\n        }\n        res = min(res, k * m / t);\n        t += m;\n    }\n    return res;\n}\n\nfloat shadow(vec3 dir, vec3 origin, float min_t) {\n    #if HARD_SHADOW\n    return hardShadow(dir, origin, min_t);\n    #else\n    return softShadow(dir, origin, min_t, SHADOW_HARDNESS);\n    #endif\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye, vec3 lightPos)\n{\n    \n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj, lightPos);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n\n    vec3 lightDir = rotateY(normalize(vec3(0.4, -1.0, 1.0)), sin(iTime) * 0.5);\n    \n    float shadow = softShadow(-lightDir, isect, 0.1, SHADOW_HARDNESS);\n    \n    vec3 surfaceColor = shadow * computeMaterial(hitObj, isect, nor, lightDir);\n\n    \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\nvoid raycast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref)\n{\n    \n    eye = vec3(0.0, 3.0, -20.0);\n    ref = vec3(0.0, 3, 0.0);\n    \n    vec3 look = normalize(ref - eye);\n    vec3 right = normalize(cross(look, vec3(0.0, 1.0, 0.0)));\n    vec3 up = cross(right, look);\n    \n    float tanFovV = tan(3.14159 * 0.125);\n    float len = distance(ref, eye);\n    float aspect = float(iResolution.x) / float(iResolution.y);\n    \n    vec3 V = up * len * tanFovV;\n    vec3 H = right * len * aspect * tanFovV;\n    \n    vec3 p =ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Light\n\tvec3 lightPos = rotateY(vec3(0.0, 8.0, -3.0), sin(iTime) * 0.5);\n    \n    //Normalized pixel coordinate (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    //[-1, 1]\n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n    \n    vec3 dir, eye, ref;\n    // Cast ray\n    raycast(uv2, dir, eye, ref);\n    \n    // Intersection\n    Intersection isect;\n    \n    isect = sdf3D(dir, eye, lightPos);\n    \n\t \n    \n    //Output color\n    fragColor = vec4(isect.color, 1.0);\n}","name":"Image","description":"","type":"image"}]}