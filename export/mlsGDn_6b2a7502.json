{"ver":"0.1","info":{"id":"mlsGDn","date":"1671636460","viewed":50,"name":"shadertoy tutorial Part3","username":"samui","description":"A rotating red square. https://inspirnathan.com/posts/49-shadertoy-tutorial-part-3","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(vec2 uv, float th) {\n    return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n}\n\nvec3 sdfSquare(vec2 uv, float size, vec2 offset) {\n    vec2 delta = uv - offset;\n    vec2 rotated = rotate(delta, iTime);\n    float d = max(abs(rotated.x), abs(rotated.y)) - size;\n    \n    return d > 0. ? vec3(1.) : vec3(1., 0., 0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec2 offset = vec2(0.);\n\n    // Time varying pixel color\n    vec3 col = sdfSquare(uv, 0.2, offset);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}