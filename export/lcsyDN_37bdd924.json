{"ver":"0.1","info":{"id":"lcsyDN","date":"1721161754","viewed":24,"name":"Checkbox component","username":"Illithid","description":"Shader for an animated checkbox","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["checkbox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Checkbox appearance constants\n#define CHECKBOX_SCALE 0.5\n#define BORDER_WIDTH 2.0\n#define CORNER_RADIUS 3.0\n#define CHECKMARK_SCALE 0.7\n#define CHECKMARK_THICKNESS_RATIO 0.2\n#define GLOW_SIZE_RATIO 0.1\n#define BLUR_AMOUNT 0.00001\n\n// Animation constants\n#define ANIMATION_CYCLE_DURATION 0.8  // Total duration of one animation cycle in seconds\n\n// Colors\n#define COLOR_BORDER vec4(0.35, 0.35, 0.35, 1.0)\n#define COLOR_BACKGROUND vec4(0.22, 0.22, 0.22, 1.0)\n#define COLOR_CHECKMARK vec4(0.12, 0.53, 0.90, 1.0)\n\nfloat calculateBlur(float shape, float blur) {\n    float wa = clamp(-shape / fwidth(shape), 0.0, 1.0);\n    float wb = (blur > 0.001) ? clamp(-shape / blur, 0.0, 1.0) : 1.0;\n    return wa * wb;\n}\n\nvec4 fillShape(vec4 result, float shape, float blur, vec4 color) {\n    vec4 source = vec4(color.rgb * color.a, color.a);\n    float f = calculateBlur(shape, blur);\n    return source * f + result * (1.0 - source.a * f);\n}\n\nvec4 strokeShape(vec4 result, float shape, float blur, vec4 color, float width) {\n    float f = calculateBlur(abs(shape) - width, blur);\n    vec4 source = vec4(color.rgb * color.a, color.a);\n    return source * f + result * (1.0 - source.a * f);\n}\n\nfloat drawRoundedRect(vec2 pos, float x, float y, float w, float h, float r) {\n    vec2 p = pos - vec2(x, y);\n    vec2 size = vec2(0.5 * w, 0.5 * h);\n    vec2 bp = max(abs(p - size) - (size - vec2(2.0 * r)), vec2(0.0));\n    return length(bp) - 2.0 * r;\n}\n\nfloat drawAnimatedLine(vec2 pos, vec2 start, vec2 end, float thickness, float progress) {\n    vec2 pa = pos - start;\n    vec2 ba = end - start;\n    float lineLength = length(ba);\n    vec2 dir = ba / lineLength;\n    vec2 animatedEnd = start + dir * lineLength * progress;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, progress);\n    vec2 perp = pa - ba * h;\n    return length(perp) - thickness * 0.5;\n}\n\nvec4 drawCheckbox(vec2 pos, vec2 center, float size, float progress) {\n    vec4 result = vec4(0.0);\n    float shape;\n\n    // Draw the border\n    shape = drawRoundedRect(pos, center.x - size/2.0 - BORDER_WIDTH, center.y - size/2.0 - BORDER_WIDTH, \n                            size + 2.0 * BORDER_WIDTH, size + 2.0 * BORDER_WIDTH, CORNER_RADIUS);\n    result = fillShape(result, shape, BLUR_AMOUNT, COLOR_BORDER);\n\n    // Draw the main checkbox area\n    shape = drawRoundedRect(pos, center.x - size/2.0, center.y - size/2.0, size, size, CORNER_RADIUS);\n    result = fillShape(result, shape, BLUR_AMOUNT, COLOR_BACKGROUND);\n\n    // Draw the checkmark\n    float checkSize = size * CHECKMARK_SCALE;\n    float thickness = checkSize * CHECKMARK_THICKNESS_RATIO;\n    vec2 p1 = center + vec2(-checkSize * 0.4, checkSize * 0.1);\n    vec2 p2 = center + vec2(-checkSize * 0.1, -checkSize * 0.3);\n    vec2 p3 = center + vec2(checkSize * 0.5, checkSize * 0.4);\n\n    if (progress < 0.5) {\n        shape = drawAnimatedLine(pos, p1, p2, thickness, progress * 2.0);\n    } else {\n        shape = min(drawAnimatedLine(pos, p1, p2, thickness, 1.0),\n                    drawAnimatedLine(pos, p2, p3, thickness, (progress - 0.5) * 2.0));\n    }\n    result = fillShape(result, shape, BLUR_AMOUNT, COLOR_CHECKMARK);\n\n    // Add a subtle glow effect\n    float glowSize = thickness * GLOW_SIZE_RATIO;\n    vec4 glowColor = vec4(COLOR_CHECKMARK.rgb * 0.5, 0.5);\n    result = strokeShape(result, shape, BLUR_AMOUNT, glowColor, glowSize);\n\n    return result;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 center = iResolution.xy * 0.5;\n    float size = min(iResolution.x, iResolution.y) * CHECKBOX_SCALE;\n\n    float t = mod(iTime, ANIMATION_CYCLE_DURATION) / ANIMATION_CYCLE_DURATION;\n    float progress = smoothstep(0.0, 1.0, t);\n\n    fragColor = drawCheckbox(fragCoord, center, size, progress);\n}","name":"Image","description":"","type":"image"}]}