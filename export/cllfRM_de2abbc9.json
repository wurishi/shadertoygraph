{"ver":"0.1","info":{"id":"cllfRM","date":"1692741188","viewed":68,"name":"the power of sdfs","username":"01000001","description":"I saw Mr. Quilez's recent shader https://www.shadertoy.com/view/dljyDc and wanted to try it out myself but with buffers for performance. This shader seems to work best with objects that do not have many pointy parts.  Even a square is pushing it. ","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["thing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, vec2 U ){\n    O = sqrt(texture(iChannel0, U/iResolution.xy));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int samples = 4;\nfloat boxDF( in vec2 p, in vec2 b ) \n{\n    vec2 q = abs(p)-b;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\nfloat sdf(vec2 p){\n    return \n    /*\n    length(p)-1.;\n    /*/boxDF(p, vec2(1));\n    //*/\n}\n\nconst uint k = 1103515245U;\nvec3 hash( uvec3 x ){\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n//hash by IQ https://www.shadertoy.com/view/XlXcW4\nvec2 point(uvec3 x){\n    return hash(x).xy*2.-1.;\n}\n\nvoid mainImage( out vec4 O, vec2 U ){\n\n    vec2 r  = iResolution.xy;\n    O       = iFrame < 20?vec4(0):texture(iChannel0, U/r);\n    O      *= 0.99;\n    vec2 uv = (2.*U-r)/r.y;\n    \n    for (int i = 0; i < samples; i++){\n        vec2 p  = point(uvec3(iFrame + i, -iFrame + i, i<<iFrame));\n        p.x *= r.x/r.y;\n        float s = 1.7;    \n        float d = length(p - uv)*s-abs(sdf(p*s));\n        O      += smoothstep(2.*s/r.y, 0., abs(d))*.2;\n    }\n    O       = vec4(max(0., O.x));\n}","name":"Buffer A","description":"","type":"buffer"}]}