{"ver":"0.1","info":{"id":"cdX3RM","date":"1665790722","viewed":88,"name":"Primitive particles","username":"Oneleven","description":"This is a study shader inspired by \"Rainier mood\" by Zavie https://www.shadertoy.com/view/ldfyzl\nI tried to create it from scratch without looking into code of source shader. I've also added texture sampling to make it a bit different.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["grid","particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n//grid paratemeers\n#define BORDER 1.0\n#define FEATHER 0.01\n#define DENSITY 10.0\n\n//particle parameters\n#define LIFETIME 2.00\n#define MINSIZE 0.5\n#define MAXSIZE 2.0\n\n//Hash without Sine by Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec2 map(vec2 value, vec2 min1, vec2 max1, vec2 min2, vec2 max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat rect(vec2 pos, vec2 size, vec2 uv) {\n    vec2 b1 = smoothstep(pos-size*0.5 - FEATHER, pos-size*0.5 + FEATHER, uv);\n    vec2 b2 = 1.0 - smoothstep(pos+size*0.5 - FEATHER, pos+size*0.5 + FEATHER, uv);\n    return b1.x*b1.y*b2.x*b2.y;\n}\n\nvec3 rectUV(vec2 pos, vec2 size, vec2 uv) {\n    vec2 min1 = pos - size * 0.5;\n    vec2 max1 = pos + size * 0.5;\n    float mask = rect(pos, size, uv);\n    \n    return vec3(map(uv, min1, max1, vec2(0.0), vec2(1.0)), mask) ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord * DENSITY/iResolution.y;\n    uv+=vec2(2.0, 0.6) * iTime;\n    vec2 index = floor(uv);\n    uv = fract(uv);\n    \n    vec3 r = vec3(0.0);\n    for (float y = -BORDER; y <= BORDER; y++)\n    {\n        for (float x = -BORDER; x<=BORDER; x++)\n        {\n            vec2 i = index + vec2(x,y);\n            \n            //change particle pos and size each cycle\n            float localTime = (iTime + hash12(i) * 2.0)/LIFETIME;\n            float iteration = floor(localTime);\n            float amp = cos(localTime * 2.0 * PI + PI) * 0.499 + 0.501;\n            \n            vec3 rLoc = rectUV(hash22(i + vec2(iteration)) + vec2(x,y), vec2(mix(MINSIZE, MAXSIZE, hash12(i + iteration))) * amp, uv);\n            r = mix(r, rLoc, rLoc.z);\n        }\n    }\n    vec3 col = texture(iChannel0, r.xy).rgb * r.z;\n    \n    //Quick uncoment for debugging \n    //col = vec3(uv, 0);\n    //col = hash32(index);\n    //col = vec3(r);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}