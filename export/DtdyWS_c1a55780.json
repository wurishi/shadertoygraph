{"ver":"0.1","info":{"id":"DtdyWS","date":"1699598539","viewed":35,"name":"Dolphin_Simple_3D","username":"dolphin","description":"simple 3d sphere","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["glsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord -.5*iResolution.xy)/iResolution.y;\n    \n    // define the camera position\n    // x horizontal\n    // y vertical\n    // z camera distance to the screen\n    vec3 p_cam = vec3(0., 0., -2.); // camera position\n    vec3 p_scr = vec3(uv, 0.); // screen position\n    \n    \n    // a geometry sphere in 3d\n    //////////////////////////////////////////\n    // object position (is changed with time)\n    float t = iTime;\n    vec3 p_obj = vec3(3.*cos(t), sin(t), 9.+ 3.*sin(t));\n    \n    // radius of the sphere\n    float r = .5;\n    //////////////////////////////////////////\n    \n    vec3 v_sc = p_scr-p_cam;\n    vec3 v_oc = p_obj-p_cam;\n    \n    vec3 v_orth = v_oc - dot(v_sc, v_oc)/(length(v_sc)*length(v_sc)) * v_sc;\n    float dist = length(v_orth);\n        \n    // rasterization\n    float blur = distance(p_obj, p_cam)/iResolution.y;\n    float a = 1. - smoothstep(r, r+blur, dist);\n    \n    // really simple shading -> not even phong-shading\n    a *= (1.-0.5*dist/r);\n\n    // Output to screen\n    fragColor = vec4(vec3(a),1.0);\n}","name":"Image","description":"","type":"image"}]}