{"ver":"0.1","info":{"id":"dlfSWN","date":"1674758207","viewed":100,"name":"UV Tranformations + SDF","username":"twisterge","description":"Some UV transformation tests","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592654\n\nfloat sdfCircle(in vec2 p, float r) {\n    return length(p) - r;\n}\n\n\nfloat scene(in vec2 p) {\n    return sdfCircle(p, 0.6);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float rot = sin(iTime * 0.78) * PI / 18.0;\n    vec2 scale = vec2((sin(iTime) * 0.5 + 0.5) * 7.0 + 1.0);\n    vec2 pos = vec2(iTime, 0.0);\n\n    float aspect = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    uv -= 0.5;\n    uv.x *= aspect;\n    \n    mat2 xform = \n        mat2(scale.x, 0.0, 0.0, scale.y) *\n        mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n        \n    uv = xform * uv;\n    uv += pos;\n    \n    uv = mod(uv + 0.5, 1.0);\n    \n    vec2 p = uv * 2.0 - 1.0;\n    float v = step(1.0, 1.0 - scene(p));\n\n    // Output to screen\n    fragColor = vec4(vec3(v), 1.0);\n}","name":"Image","description":"","type":"image"}]}