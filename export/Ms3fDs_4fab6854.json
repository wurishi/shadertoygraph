{"ver":"0.1","info":{"id":"Ms3fDs","date":"1527201470","viewed":150,"name":"Lines&Dots2","username":"lowww","description":"Original: https://www.shadertoy.com/view/Md3BDl\nIn this shader, I've added @FabriceNeyret2 suggestions from the original link.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["lines","random","shader","art"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define width 8.0\n#define height 8.0\n#define thickness 0.01\n\n// from https://www.shadertoy.com/view/4dcfW8\nfloat drawLine(vec2 p, vec2 a,vec2 b) {\n\tp -= a, b -= a;\n\tfloat h = clamp(dot(p, b) / dot(b, b), 0.0, 1.0);\n\treturn length(p - b * h);\n}\n\nfloat rand(vec2 co){\n\treturn fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord / iResolution.y;\n\tfloat color = 0.0;\n\n\t// divide the screen in square steps\n\tfloat stepW = 1.0 / width;\n\tfloat stepH = 1.0 / height;\n\n\tint x = int(uv.x * width);\n\tint y = int(uv.y * height);\n\n\tvec2 p = vec2(float(x) * stepW, float(y) * stepH);\n\n\t// draw lines\n\tvec2 a = p;\n\tvec2 b = vec2(p.x + stepW, p.y + stepH);\n\n\tif (rand(p) > 0.5) { \n\t\ta.x = p.x + stepW;\n\t\tb.x = p.x;\n\t}\n\t\n\tfloat distance = drawLine(uv, a, b);\n\tfloat line = smoothstep(thickness / 2.0, thickness / 2.0 - (1.0 / iResolution.y), distance);\n\tcolor += line;\n\n\tfragColor = vec4(color);\n}","name":"Image","description":"","type":"image"}]}