{"ver":"0.1","info":{"id":"sdXSRf","date":"1619032982","viewed":297,"name":"interesting pattern","username":"sympou","description":"currently experimenting with multiple neighborhoods cellular automata.\ni like this arrangement !\ni found the palette here :\nhttps://www.shadertoy.com/view/lt2GDc","likes":11,"published":3,"flags":48,"usePreview":0,"tags":["cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    float val = texelFetch( iChannel0, ivec2(fragCoord), 0 ).r;\n   \n    vec3 col = pal(val,vec3(0.5),vec3(0.55),vec3(0.45),vec3(0.00,0.10,0.20) + 0.47 );\n\n    fragColor = vec4( col, 1.0 );\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float radius = 10.0;\nint eyes = 11;\nfloat PI2 = 6.28318530718;\n\nfloat hash1( float n ) {\n    return fract(sin(n)*138.5453123);\n}\n\nfloat Cell( in vec2 p ) {   \n    p /= iResolution.xy;\n    p = fract(p);\n    return texture(iChannel0, p).r; \n}\n\nconst int KEY_SPACE = 32;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 coords = vec2( fragCoord );\n    float pixel = Cell(coords);\n    \n    float random = hash1(fragCoord.x*13.0+hash1(fragCoord.y*71.1)+mod(iTime,10000.));\n\n    float valMax = 0.0;\n    float valMin = 1.0;\n    float average = 0.0;\n    \n    float fraction = PI2/float(eyes);\n    for (int i = 0; i<eyes; i++) {\n        \n        float ang = fraction*float(i);//+random*PI2;\n        vec2 dir = vec2(cos(ang),sin(ang));\n        vec2 xy = coords + dir * radius;\n        \n        float value = Cell(xy);\n        \n        average += value;\n        valMax = max(valMax, value);\n        valMin = min(valMin, value);\n    }\n    average = average/(float(eyes));\n    //float average2 = (valMin + valMax)*0.5;\n    \n    float diff = valMax - valMin;\n\n    float finalPix = pixel;\n\n    if (diff>0.25) {\n        //chaos\n        finalPix = pixel - sign(average-0.5)*0.01; //0.025\n    } else {\n        //order\n        finalPix = pixel + sign(average-0.5)*0.1;  //0.015\n    }\n    \n    \n    //blurring\n    finalPix = mix(finalPix,average,0.13);\n    //finalPix = mix(finalPix,average2,0.2);\n         \n    if( iFrame==0 || texelFetch( iChannel1, ivec2(KEY_SPACE,1),0 ).x > 0.0 ) finalPix = random;\n    \n\tfragColor = vec4(finalPix,0,0,1);\n} ","name":"Buffer A","description":"","type":"buffer"}]}