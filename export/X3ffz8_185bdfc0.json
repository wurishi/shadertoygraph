{"ver":"0.1","info":{"id":"X3ffz8","date":"1728049679","viewed":28,"name":"Crazy Planets","username":"providerofsauce","description":"Planets and waves","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["procedural"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_CIRCLES 10 // Number of circles to draw\n#define BASE_DISTANCE 0.1 // Base distance for the circle movement\n#define SPEED_FACTOR 0.1 // Speed factor to control movement speed\n\n// Function to create a rainbow gradient background\nvec3 rainbowBackground(vec2 uv) {\n    // Create a ripple effect using sine waves based on the UV coordinates and time\n    float wave = tan(uv.y * 10.0 + iTime * 3.0);\n    // Another wave just for fun\n    float wave2 = tan(uv.x * 10.0 + iTime * 3.0);\n    // Blend both waves\n    float finalWave = tan(wave * 0.5 + wave2 * 0.5);\n\n    // Create a rainbow effect by interpolating colors\n    return vec3(finalWave, 1.0 - finalWave, 0.5 + 0.5 * tan(iTime + finalWave * 6.28318));\n}\n\n// Circle drawing function\nvec3 drawCircle(vec2 uv, vec2 position, float radius, vec3 color) {\n    // Calculate the distance to the circle's position\n    float distance = length(uv - position);\n    // Check if inside the circle\n    float insideCircle = step(distance, radius);\n    // Blend the color based on the step\n    return mix(vec3(0.0, 0.0, 0.0), color, insideCircle);\n}\n\n// Random float function from ChatGPT\nfloat randomFloat(float min, float max) {\n    return min + fract(sin(dot(gl_FragCoord.xy + float(iTime), vec2(12.9898, 78.233))) * 43758.5453) * (max - min);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Create a centered UV for easier object drawing\n    vec2 centeredUV = uv - 0.5;\n    centeredUV.x *= iResolution.x / iResolution.y;\n\n    // Get rainbow background\n    vec3 backgroundColor = rainbowBackground(uv);\n\n    // Initialize final color with the semi-transparent background color\n    vec3 finalColor = mix(backgroundColor, vec3(0.0, 0.0, 0.0), 0.9);\n    // Draw multiple circles moving around\n    for (int i = 0; i < NUM_CIRCLES; i++) {\n  \n        // Random angle between 0 and 2 pi\n       float angle = float(i) * (6.28318 / float(NUM_CIRCLES));\n\n        // Calculate position using trig functions for circular movement\n        float radius = BASE_DISTANCE + float(i) * 0.05; // Set different distances based on index\n        vec2 position = vec2(cos(angle + iTime * SPEED_FACTOR) * radius, sin(angle + iTime * SPEED_FACTOR) * radius);\n\n        // Random radius and color for each circle\n        float circleRadius = 0.02 + float(i) * 0.005;\n        vec3 color = vec3(0.5 + 0.5 * cos(float(i) + iTime), 0.5 + 0.5 * sin(float(i) + iTime), 0.5 + 0.5 * sin(float(i) + iTime));\n\n        // Draw the circle\n        finalColor += drawCircle(centeredUV, position, circleRadius, color);\n    }\n\n    // Output the final color with full opacity (alpha = 1.0)\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}