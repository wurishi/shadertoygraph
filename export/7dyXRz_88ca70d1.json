{"ver":"0.1","info":{"id":"7dyXRz","date":"1634240690","viewed":48,"name":"Blobs experiment","username":"AlexXIIs","description":"Simple blobs, operations with colors.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["blob","wyvill"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Common\n\n\n// Hashing function\n// Returns a random number in [-1,1]\nfloat Hash(float seed)\n{\n  return fract(sin(seed)*43758.5453);\n}\n\n// Cosine direction\nvec3 Cosine(in float seed,in vec3 nor)\n{\n  float u=Hash(78.233+seed);\n  float v=Hash(10.873+seed);\n  \n  // method 3 by fizzer: http://www.amietia.com/lambertnotangent.html\n  float a=6.2831853*v;\n  u=2.*u-1.;\n  return normalize(nor+vec3(sqrt(1.-u*u)*vec2(cos(a),sin(a)),u));\n}\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 rotate_z(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n// m : Mouse position\n// p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m,in vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.8;\n  \n  ro=vec3(40.,0.,0.);\n  ro*=rotate_z(3.*3.14*m.x);\n  \n  vec3 ta=vec3(0.,0.,1.);\n  vec3 ww=normalize(ta-ro);\n  vec3 uu=normalize(cross(ww,vec3(0.,0.,1.)));\n  vec3 vv=normalize(cross(uu,ww));\n  rd=normalize(p.x*uu+p.y*vv+le*ww);\n}\n\n// Main\n\nconst int Steps=1000;\nconst float Epsilon=.05;// Marching epsilon\nconst float T=.5;\n\nconst float rA=10.;// Maximum and minimum ray marching or sphere tracing distance from origin\nconst float rB=40.;\n\n// Transforms\nvec3 rotateX(vec3 p,float a)\n{\n  float sa=sin(a);\n  float ca=cos(a);\n  return vec3(p.x,ca*p.y-sa*p.z,sa*p.y+ca*p.z);\n}\n\nvec3 rotateY(vec3 p,float a)\n{\n  float sa=sin(a);\n  float ca=cos(a);\n  return vec3(ca*p.x+sa*p.z,p.y,-sa*p.x+ca*p.z);\n}\n\nvec3 rotateZ(vec3 p,float a)\n{\n  float sa=sin(a);\n  float ca=cos(a);\n  return vec3(ca*p.x+sa*p.y,-sa*p.x+ca*p.y,p.z);\n}\n\nvec3 translateX(vec3 p, float a)\n{\n  return vec3(p.x+a, p.y, p.z);\n}\n\nvec3 translateY(vec3 p, float a)\n{\n  return vec3(p.x, p.y+a, p.z);\n}\n\nvec3 translateZ(vec3 p, float a)\n{\n  return vec3(p.x, p.y, p.z+a);\n}\n\n// Smooth cubic falloff function\n// x : distance\n// R : radius\nfloat falloff(float x,float R)\n{\n  float u=clamp(x/R,0.,1.);\n  float v=(1.-u*u);\n  return v*v*v;\n}\n\n// Primitives\n\n// Point skeleton\n// p : point\n// c : center of skeleton\n// e : energy associated to skeleton\n// R : radius\nfloat point(vec3 p,vec3 c,float e,float R)\n{\n  return e*falloff(length(p-c),R);\n}\n\nvec4 Segment(vec3 a, vec3 b, vec3 p, vec3 color)\n{\n    vec3 c = b-a;\n    vec3 u = c/sqrt(pow(c.x,2.)+pow(c.y,2.)+pow(c.z,2.));\n    float l = dot(p-a, u);\n    float v;\n    \n    if(l < 0.)\n      v = sqrt(pow(p.x-a.x,2.)+pow(p.y-a.y,2.)+pow(p.z-a.z,2.));\n    else if(l > 0. && l < sqrt(pow(c.x,2.)+pow(c.y,2.)+pow(c.z,2.)))\n      v = sqrt(pow(p.x-a.x,2.)+pow(p.y-a.y,2.)+pow(p.z-a.z,2.)-pow(l,2.));\n    else\n      v = sqrt(pow(p.x-b.x,2.)+pow(p.y-b.y,2.)+pow(p.z-b.z,2.));\n      \n    return vec4(falloff(v,0.5), color);\n}\n\nvec4 Circle(vec3 p, vec3 c, vec3 u, float R, vec3 color)\n{\n  vec3 n = p-c;\n  float h = dot(n, u);\n  float d = dot(n, n);\n  float y = d - dot(h,h);\n  y = R - sqrt(y);\n  //float v=pow(p.x-c.x,2.)+pow(p.y-c.y,2.)+pow(p.z-c.z,2.) - R;\n\n  return vec4(falloff(sqrt(y*y+h*h), 1.), color);\n}\n\nvec4 Sphere(vec3 p, vec3 c, float R, vec3 color)\n{\n  p.z=-p.z;\n  float v=point(p,c,1.,R);\n\n  return vec4(v, color);\n}\n\nvec4 Box(vec3 a, vec3 b, vec3 p, vec3 color)\n{\n  float dx;\n  float dy;\n  float dz;\n  \n  if(p.x > b.x)\n      dx = p.x - b.x;\n  else if(p.x < a.x)\n      dx = -p.x + a.x;\n  else\n      dx = 0.;   \n  if(p.y > b.y)\n      dy = p.y - b.y;\n  else if(p.y < a.y)\n      dy = -p.y + a.y;\n  else\n      dy = 0.;   \n  if(p.z > b.z)\n      dz = p.z - b.z;\n  else if(p.z < a.z)\n      dz = -p.z + a.z;\n  else\n      dz = 0.;   \n  \n  float v = sqrt(pow(dx,2.) + pow(dy,2.) + pow(dz,2.));\n  \n  return vec4(falloff(v, 0.5), color);\n}\n\n// Operators\n\n// Blending\n// a,b : field function of the sub-trees\nfloat Blend(float a,float b)\n{\n  return a+b;\n}\n\nvec4 ColorBlend(vec4 a,vec4 b)\n{\n  return vec4(a.x+b.x, ((a.yzw*a.x+b.yzw*b.x)/(a.x+b.x)));\n}\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nfloat Union(float a,float b)\n{\n  return max(a,b);\n}\n\nvec4 ColorUnion(vec4 a,vec4 b)\n{\n  vec3 color;\n  if(a.x>b.x)\n    color = a.yzw;\n  else\n    color = b.yzw;\n  return vec4(max(a.x,b.x), color);\n}\n\nfloat Intersection(float a,float b)\n{\n  return min(a,b);\n}\n\n\n// Potential field of the object\n// p : point\nvec4 Object(vec3 p)\n{\n  vec3 a = vec3(0., 0., -7.);\n  vec3 b = vec3(4., 4., -6.);\n  vec3 c = vec3(0., 0., 6.);\n  vec3 d = vec3(4., 4., 7.);\n  vec3 socleCenter1 = vec3(2.,2.,6.);\n  vec3 socleCenter2 = vec3(2.,2.,-6);\n  vec3 circleCenter1 = vec3(2.,2.,5.);\n  vec3 circleCenter2 = vec3(2.,2.,-5.);\n  vec3 ballCenter1 = vec3(2.,2.,2.);\n  vec3 ballCenter2 = vec3(2.,2.,-2.);\n  vec3 segment1 = vec3(2.,2.,5.);\n  vec3 segment2 = vec3(2.,2.,-5.);\n  vec3 n = vec3(0,0,1.);\n  float R = 3.5;\n  float RCircles = 2.;\n  vec3 colorBall1 = vec3(0.6,0.1,0.);\n  vec3 colorBall2 = vec3(0.3,0.,0.5);\n  vec3 colorCircle1 = vec3(0.6,0.1,0.);\n  vec3 colorCircle2 = vec3(0.3,0.,0.5);\n  vec3 grey = vec3(0.8,0.8,0.8);\n  \n  circleCenter1.z += sin(0.7*iTime)*4.-5.;\n  circleCenter2.z += cos(0.7*iTime)*4.+5.;\n  \n  ballCenter1.z += sin(0.7*iTime)*3.-3.;\n  ballCenter2.z += cos(0.7*iTime)*3.+3.;\n  ballCenter1.x += sin(5.*iTime)*2.;\n  ballCenter1.y += cos(5.*iTime)*2.;\n  ballCenter2.x -= cos(5.*iTime)*2.;\n  ballCenter2.y -= sin(5.*iTime)*2.;\n  \n  RCircles = RCircles + sin(0.5*iTime)-0.5;\n  \n  vec4 socle1 = ColorUnion(Box(a,b,p,grey), Sphere(p,socleCenter1,R,grey));\n  vec4 socle2 = ColorUnion(Box(c,d,p,grey), Sphere(p,socleCenter2,R,grey));\n  vec4 frame = ColorUnion(socle1, socle2);\n  vec4 circles = ColorBlend(Circle(p,circleCenter1,n,RCircles,colorCircle1),Circle(p,circleCenter2,n,RCircles,colorCircle2));\n  vec4 balls = ColorBlend(Sphere(p,ballCenter1,2.,colorBall1),Sphere(p,ballCenter2,2.,colorBall2));\n  vec4 w = ColorBlend(circles, balls);\n  w = ColorBlend(w, Segment(segment1,segment2,p,grey));\n  vec4 v = ColorUnion(frame, w);\n  \n  v.x = v.x-T;\n  return v;\n}\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p,out vec3 obj_color)\n{\n  float eps=.0001;\n  vec3 n;\n  vec4 V=Object(p);\n  float v = V.x;\n  obj_color = V.yzw;\n  n.x=Object(vec3(p.x+eps,p.y,p.z)).x-v;\n  n.y=Object(vec3(p.x,p.y+eps,p.z)).x-v;\n  n.z=Object(vec3(p.x,p.y,p.z+eps)).x-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// h : hit\n// s : Number of steps\nfloat Trace(vec3 o,vec3 u,float rB,out bool h,out int s)\n{\n  h=false;\n  \n  // Don't start at the origin, instead move a little bit forward\n  float t=rA;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=Object(p).x;\n    // Hit object\n    if(v>0.)\n    {\n      s=i;\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=Epsilon;\n    // Escape marched far away\n    if(t>rB)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float rB,out bool h,out int s)\n{\n  h=false;\n  \n  // Don't start at the origin, instead move a little bit forward\n  float t=rA;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=Object(p).x;\n    // Hit object\n    if(v>0.)\n    {\n      s=i;\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,abs(v)/4.);\n    // Escape marched far away\n    if(t>rB)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Ambient occlusion\n// p : Point\n// n : Normal\n// a : Number of smaples\nfloat AmbientOcclusion(vec3 p,vec3 n,int a)\n{\n  if(a==0){return 1.;}\n  \n  float ao=0.;\n  \n  for(int i=0;i<a;i++)\n  {\n    vec3 d=Cosine(581.123*float(i),n);\n    \n    int s;\n    bool h;\n    float t=SphereTrace(p,d,10.,h,s);\n    if(!h){ao+=1.;}\n    else if(t>5.)\n    {\n      ao+=1.;\n    }\n  }\n  \n  ao/=float(a);\n  return ao;\n}\n\n// Background color\nvec3 background(vec3 rd)\n{\n  return mix(vec3(.652,.451,.995),vec3(.552,.897,.995),rd.z*.5+.5);\n}\n\nfloat Light(vec3 p,vec3 n)\n{\n  // point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  vec3 l=normalize(lp-p);\n  \n  // Not even Phong shading, use weighted cosine instead for smooth transitions\n  float diff=pow(.5*(1.+dot(n,l)),2.);\n  \n  bool h;\n  int s;\n  float t=SphereTrace(p+.1*n,l,100.,h,s);\n  if(!h)\n  {\n    return diff;\n  }\n  return 0.;\n}\n\nfloat SmoothLight(vec3 p,vec3 n,int a)\n{\n  if(a==0)\n  return 1.;\n  \n  // point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  vec3 l=normalize(lp-p);\n  \n  float lo=0.;\n  \n  for(int i=0;i<a;i++)\n  {\n    vec3 d=Cosine(581.123*float(i),n);\n    d=normalize(l+d*.15);\n    int s;\n    bool h;\n    float t=SphereTrace(p,d,10.,h,s);\n    if(!h){lo+=1.;}\n    else if(t>100.)\n    {\n      lo+=1.;\n    }\n  }\n  \n  lo/=float(a);\n  return lo;\n  \n}\n\n// Shading and lighting\n// p : point,\n// n : normal at point\nvec3 Shade(vec3 p,vec3 n)\n{\n  vec3 c=.25+.25*background(n);\n  c+=.15*AmbientOcclusion(p+.1*n,n,0)*vec3(1.,1.,1.);\n  c+=.35*Light(p,n);\n  return c;\n}\n\n// Shading with number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return .5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Position\n  vec3 pt=ro+t*rd;\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Compute normal\n    vec3 obj_color;\n    vec3 n=ObjectNormal(pt, obj_color);\n    \n    // Shade object with light\n    rgb=Shade(pt,n) * obj_color;\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}