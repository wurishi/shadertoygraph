{"ver":"0.1","info":{"id":"NtX3DX","date":"1622937705","viewed":113,"name":"Truchet Shader","username":"ryanwinstead","description":"Move your mouse while holding down click to see the shader change!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["truchet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Author: Ryan Winstead\n// Title: Truchet shader\n\n//Instructions: To interact with the shader, hold left mouse button down and\n//              move your mouse across the canvas.\n\nfloat hash21(vec2 p) {\n    p = fract(p*vec2(12231.34, 235.345));\n    p += dot(p,p+5.23);\n    return fract(p.x*p.y);   \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n\n    //Screensetup\n    vec2 st = gl_FragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    st = st-vec2(.5); //Placing origin in middle of squares\n    //*****\n    \n    float zoom =10.0;\n    \n\n  \t//zoom += iTime/6.0;\n\t  st +=iTime*.006;\n\n    vec3 color = vec3(0.0);\n    st*=zoom; //Decides number of squares on screen\n    vec2 grid = fract(st)-.5; //Puts origin of each square in center of square\n    vec2 id = floor(st);\n\n    // grid.x*=-1.0;//Flips lines across x axis\n    \n    float n = hash21(id); // Returns random number between 0 and 1\n    \n    \n    \n    if(n<.5) grid.x *= -1.0;\n    float width = iMouse.y/8000.;\n    float dist = abs(abs(grid.x + grid.y)-.5); //Rectangular maze\n    float mask = smoothstep(.01,-.01, dist-width); //rect maze\n\n    \n    \n    //Circular pattern\n    vec2 C_st = grid - sign(grid.x + grid.y + .000001)*.5;\n    //dist = length(C_st)-.5;\n    //mask = smoothstep(.01,-.01, abs(dist)-width);\n    \n    float angle = atan(C_st.x, C_st.y); // returns between -pi to pi\n\n    float alternate = mod(id.x +id.y, 2.0)*2.0-1.0; \n    float flow = sin(iTime+alternate*angle*iMouse.x/100.);\n    // color +=n;\n    color += flow*mask;\n    \n//    color.rg=grid;\n    \n     //if(grid.x>.48 || grid.y>.48) co/lor = vec3(1,0,0); //Red lines\n    \n\n\n     fragColor = vec4(color*vec3(10.,iMouse.x/6.,iMouse.x),1.0);\n\n}","name":"Image","description":"","type":"image"}]}