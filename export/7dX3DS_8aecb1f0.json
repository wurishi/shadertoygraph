{"ver":"0.1","info":{"id":"7dX3DS","date":"1616446776","viewed":167,"name":"water wake approximation","username":"Aman","description":"Use mouse to change source speed\nlazy implementation of https://www.youtube.com/watch?v=95sQcSulRFM","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["interactive","wake"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float g = 9.8;\n\nfloat dispersion(float wavelength) {\n    return sqrt(g * wavelength / (2.0 * 3.14159));\n}\n\n\nfloat wave(vec2 x, vec2 origin, float wavelength, float t) {\n    float d = length(x - origin);\n    float disp = dispersion(wavelength);\n    float off = sin(t * disp + (d / wavelength));  \n    return pow(off, 1.0) * exp(-(d * 0.001));\n}\n\n\nfloat waves(vec2 uv) {\n    float t = -iTime * 0.5;\n    float h = 0.0;\n    float max_speed = dispersion(100.0) * 30.0;\n    float source_speed = mix(0.0, max_speed, max(0.001, iMouse.x) / iResolution.x);\n    // 10 wavelengths\n    for(int j = 1; j < 10; j++) {\n        // 40 sources\n        for(int i = 0; i < 40; i++) {\n            float wavelength = mix(10.0, 100.0, float(j) / 10.0);\n            float disp = dispersion(wavelength);\n            float xoff = mix(0.0, source_speed * 10.0, float(i) / 40.0) + 80.0 * source_speed * 0.1;\n            vec2 source_loc = vec2(xoff, 0);\n            h += wave(uv, source_loc, wavelength, t - source_loc.x / source_speed) * mix(0.2, 1.0, float(i) / 40.0);\n            \n        }\n    }\n    \n    return h;\n}\n\nfloat sdf(vec3 p) {\n    vec2 uv = p.xz;\n    float h = waves((uv + vec2(7.0, 0.0)) * 200.0);\n    float plane = max(p.y + 0.5, 0.0);\n    return plane + h * 0.005 - 0.3;\n}\n\n\n\nbool march(vec3 ro, vec3 rd, out vec3 hit) {\n    float tot = 0.0;\n    float over = 1.0;\n    for(int i = 0; i < 50; i++) {\n        float d = sdf(ro) * over;\n        tot += d;\n        over *= 1.01;\n        if(d < (0.001 * tot)) {\n            hit = ro;\n            return true;\n        }\n        ro += rd * d;\n    }\n    return false;\n}\n\nvec3 estimateNormal(vec3 p) {\n    vec2 k = vec2(1.0, -1.0);\n    float eps = 0.001;\n    return normalize(k.xyy * sdf(p + k.xyy * eps)\n                   + k.yxy * sdf(p + k.yxy * eps)\n                   + k.yyx * sdf(p + k.yyx * eps)\n                   + k.xxx * sdf(p + k.xxx * eps));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    \n    vec3 ro = vec3(0.0, 9.0, -10.0);\n    vec3 rays = vec3(uv, 2.0);\n    rays = mix(rays, vec3(0.0, -1.0, 0.0), 0.6);\n    vec3 rd = normalize(rays);\n    vec3 hit;\n    \n    vec3 col;\n    if(march(ro, rd, hit)) {\n        vec3 normal =  estimateNormal(hit);\n        float spec = pow(-dot(normal, rd), 1.0);\n        col = texture(iChannel0, normal).rgb;\n        col *= max(0.2, spec);\n    } else {\n        col = vec3(0.0);\n    }\n    \n    \n\n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}