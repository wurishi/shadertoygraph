{"ver":"0.1","info":{"id":"slVBDD","date":"1664643262","viewed":230,"name":"rainbow_circles","username":"minghir","description":"Few colors on circles. Learning.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["rainbowcircle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 colors[8]= vec3[](\nvec3(148, 0, 211),//\t\tViolet\nvec3(75, 0, 130),//\t\tIndigo\nvec3(0, 0, 255),//\t\tBlue\nvec3(0, 255, 0),//\t\tGreen\nvec3(255, 255, 0),//\tYellow\nvec3(255, 127, 0),//\tOrange\nvec3(255, 0 , 0),//\t\tRed\nvec3(0, 0 , 0)//\t\t\n);\n\n\n//https://www.shadertoy.com/view/3lVGWt\nconst float PI = 3.14;\nmat2 rotationMatrix(float angle)\n{\n\tangle *= PI / 180.0;\n    float s=sin(angle), c=cos(angle);\n    return mat2( c, -s, s, c );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float pixel = 1.5/iResolution.y;\n    uv *= rotationMatrix(iTime*20.);//rotate\n    uv=((sin(uv)-.5)/cos(uv-0.2))+abs(cos(iTime)*sin(iTime))/3.;//distort\n    uv.x +=0.4;\n   \n    vec3 col = vec3(0.);\n    int j=0;\n    for(float i=0.;i<=0.16*7.;i+=0.16)\n    {\n        //float r = 1.5-i;//circle size\n        float r = 1.16-i*.8+abs(sin(iTime)*cos(iTime)*1.3);//circle size\n        float c = length(uv+vec2(0.,0.5))-(r/2.5-i/8.);//circle\n        col = mix(vec3(j<=2),col,smoothstep(.0,2.*pixel,(c)));//white or black circle line\n        col = mix(colors[j++]/255.,col,smoothstep(.0,pixel,c));//color circle\n    }\n   \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}