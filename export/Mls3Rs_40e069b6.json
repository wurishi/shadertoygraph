{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#ifdef GL_ES\n  precision mediump float;\n#endif\n\n//change this to whatever you want\nconst int NUM_OF_DOTS_ACROSS = 20;\nconst float DOT_SIZE = 20.0;\n\n//changing this might cause sides of dots to get cut off etc\nconst float SQUARE_SIZE = DOT_SIZE * (float(NUM_OF_DOTS_ACROSS) / 2.0);\n\nvec3 yourColorCodeHere() {\n    //Taken from \"https://www.shadertoy.com/view/MtlGRs\", optimized slightly.\n    const float PI_DIV_4 = 0.785398163;\n    return vec3(abs(sin(iTime)),abs(cos(iTime)),abs(sin(iTime + PI_DIV_4)));\n}\n\nfloat yourDotCodeHere(vec2 origin) {\n    //Just a quick example to look like \"https://www.shadertoy.com/view/MtlGRs\", change this whatever you like.\n    float rad = cos(iTime * 2.0) * 0.4 + 0.5;\n    rad = max(rad, 0.4);\n    float smoothness = cos(iTime) * 0.5 + 0.5;\n    return smoothstep(rad, rad - smoothness, length(origin));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy - iMouse.xy;\n    vec2 grid = fract(uv / DOT_SIZE) * 2.0 - 1.0;\n    vec2 square = abs(uv / SQUARE_SIZE);\n    float squareMask = 1.0 - step(1.0, max(square.x, square.y));\n    float dotMask = yourDotCodeHere(grid);\n    vec3 color = yourColorCodeHere() * squareMask * dotMask;\n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Mls3Rs","date":"1424502932","viewed":307,"name":"Better \"Efficiency Dots\"","username":"Hex","description":"A more efficient remake of https://www.shadertoy.com/view/MtlGRs","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["dots"],"hasliked":0,"parentid":"","parentname":""}}