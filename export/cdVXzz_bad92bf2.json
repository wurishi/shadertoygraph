{"ver":"0.1","info":{"id":"cdVXzz","date":"1680656251","viewed":102,"name":"ChatGPT 4 Generated \"Cube\"","username":"david_poj","description":"I asked ChatGPT 4 the following prompt \"Write code in Shader Toy that uses ray marching to generate a cube with global lighting\". This is what it generated.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ai"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nmat4 lookAt(vec3 eye, vec3 target, vec3 up) {\n    vec3 z = normalize(eye - target);\n    vec3 x = normalize(cross(up, z));\n    vec3 y = cross(z, x);\n\n    mat4 view = mat4(1.0);\n    view[0][0] = x.x; view[0][1] = y.x; view[0][2] = z.x;\n    view[1][0] = x.y; view[1][1] = y.y; view[1][2] = z.y;\n    view[2][0] = x.z; view[2][1] = y.z; view[2][2] = z.z;\n    view[3][0] = -dot(x, eye);\n    view[3][1] = -dot(y, eye);\n    view[3][2] = -dot(z, eye);\n\n    return view;\n}\n\nmat4 perspective(float fov, float aspect, float near, float far) {\n    float tanHalfFov = tan(radians(fov) / 2.0);\n    mat4 projection = mat4(0.0);\n    projection[0][0] = 1.0 / (aspect * tanHalfFov);\n    projection[1][1] = 1.0 / tanHalfFov;\n    projection[2][2] = -(far + near) / (far - near);\n    projection[2][3] = -1.0;\n    projection[3][2] = -2.0 * far * near / (far - near);\n    return projection;\n}\n\nfloat sdfCube(vec3 p, float size) {\n    return length(max(abs(p) - size, 0.0));\n}\n\nvec3 getNormal(vec3 p, float eps) {\n    return normalize(vec3(\n        sdfCube(p + vec3(eps, 0.0, 0.0), 1.0) - sdfCube(p - vec3(eps, 0.0, 0.0), 1.0),\n        sdfCube(p + vec3(0.0, eps, 0.0), 1.0) - sdfCube(p - vec3(0.0, eps, 0.0), 1.0),\n        sdfCube(p + vec3(0.0, 0.0, eps), 1.0) - sdfCube(p - vec3(0.0, 0.0, eps), 1.0)\n    ));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Camera parameters\n    vec3 camPos = vec3(0.0, 3.0, 11.1);\n    camPos *= rotateY(iTime);\n  \n    vec3 camTarget = vec3(0.0, 0.0, 0.0);\n    vec3 camUp = vec3(0.0, 1.0, 0.0);\n    \n    \n    // View and projection matrices\n    mat4 view = lookAt(camPos, camTarget, camUp);\n    mat4 proj = perspective(45.0, iResolution.x / iResolution.y, 1.0, 100.0);\n    mat4 invViewProj = inverse(proj * view);\n    \n    // Ray direction\n    \n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    //vec2 p = (fragCoord.xy + 0.5)/iResolution.xy;\n    vec4 rayStart = invViewProj * vec4(p, 0.0, 1.0);\n    vec4 rayEnd = invViewProj * vec4(p, 1.0, 1.0);\n    vec3 rayDir = normalize(rayEnd.xyz / rayEnd.w - rayStart.xyz / rayStart.w);\n    \n    // Ray march\n    float t = 0.0;\n    float maxDist = 10.0;\n    int steps = 100;\n    float hitDist = 0.0;\n    vec3 hitPos = vec3(0.0);\n    vec3 normal = vec3(0.0);\n    for (int i = 0; i < steps; i++) {\n        hitDist = sdfCube(rayStart.xyz + t*rayDir, 1.0);\n        if (hitDist < 0.001 || t > maxDist) break;\n        t += hitDist;\n    }\n    if (t >= maxDist) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    hitPos = rayStart.xyz + t*rayDir;\n    normal = getNormal(hitPos, 0.01);\n    \n    // Lighting\n    vec3 lightPos = vec3(3.0, 3.0, 3.0);\n    vec3 lightColor = vec3(1.0, 1.0, 1.0);\n    vec3 ambientColor = vec3(0.2, 0.2, 0.2);\n    vec3 diffuseColor = vec3(1.0, 0.5, 0.1);\n    vec3 specularColor = vec3(1.0, 1.0, 1.0);\n    vec3 eyePos = camPos;\n    vec3 eyeDir = normalize(hitPos - eyePos);\n    vec3 lightDir = normalize(lightPos - hitPos);\n    vec3 halfwayDir = normalize(lightDir + eyeDir);\n    float ambient = ambientColor.x;\n    float diffuse = max(dot(normal, lightDir), 0.0);\n    float specular = pow(max(dot(normal, halfwayDir), 0.0), 32.0);\n    vec3 color = (ambient + diffuse)*diffuseColor*lightColor + specular*specularColor*lightColor;\n    \n    // Output\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}