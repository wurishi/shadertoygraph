{"ver":"0.1","info":{"id":"3lcfRM","date":"1612388156","viewed":70,"name":"fork- ShyGuys in SMB2","username":"jorge2017a1","description":"fork- ShyGuys in SMB2","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["forkshyguysinsmb2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//modificado por jorge2017a1v //// por jorge2017a1 ...jorge flores p.!!!\n///fork- ShyGuys in SMB2\n//https://www.shadertoy.com/view/wl3cWS\n// ShyGuys in SMB2\n///Created by IWBTShyGuy in 2021-01-04\n\n\n\n\nconst int SCREEN_BLOCK = 8;\nconst int GROUND_HEIGHT = 1;\nconst float SHYGUY_VELOCITY = 6.5;\n\nconst float fSCREEN_BLOCK = float(SCREEN_BLOCK);\n\nconst vec4 BACKGROUND = vec4(60, 188, 252, 255) / 255.0;\n\n\n\n///------------------\n\n#define PI 3.14159265359\n#define PI2 PI*2.0\n\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\n//https://www.shadertoy.com/view/wl3cWS\n// ShyGuys in SMB2\n\n\n// ---------------- Ground Tile ---------------- //\nconst int N_GBD = 10;\nconst ivec2 groundBlockDot[N_GBD] = ivec2[](\n    ivec2(2, 0), ivec2(11, 1), ivec2(6, 2), ivec2(15, 3), ivec2(3, 4),\n    ivec2(10, 5), ivec2(0, 6), ivec2(5, 6), ivec2(13, 6), ivec2(8, 7)\n);\n\n\nconst vec4 LIGHT_BROWN = vec4(248, 184, 0, 255) / 255.0;\nconst vec4 DARK_BROWN = vec4(83, 48, 0, 255) / 255.0;\n\nvec4 groundTile(in vec2 uv) \n{\n    uv.y = 1.0 - uv.y;\n    \n    uv *= 16.0;\n    ivec2 st = ivec2(floor(uv));\n    st %= ivec2(16, 8);\n    \n    for (int i = 0; i < N_GBD; i++) {\n        if (st == groundBlockDot[i])\n            return DARK_BROWN;\n    }\n    return LIGHT_BROWN;\n    //return vec4(1.0);\n}\n\n\n\nconst vec4 BLACK = vec4(0, 0, 0, 1);\nconst vec4 SEMI_WHITE = vec4(252, 252, 252, 255) / 255.0;\n\nconst vec4 LIGHT_GREEN = vec4(128, 208, 16, 255) / 255.0;\nconst vec4 MIDDLE_GREEN = vec4(0, 168, 0, 255) / 255.0;\nconst vec4 DARK_GREEN = vec4(0, 80, 0, 255) / 255.0;\n\n\n// ---------------- Grass Tile ---------------- //\nvec4 grassTile(in vec2 uv) {\n    uv.y = 1.0 - uv.y;\n    ivec2 iuv = ivec2(uv * 16.0);\n    \n    switch (iuv.y) \n    {\n    case 0: case 15:\n        return DARK_GREEN;\n        \n    case 2: switch (iuv.x) \n    {\n        case 12: case 14: return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    \n    case 3: switch (iuv.x) {\n        case 5: case 13: return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 4: switch (iuv.x) {\n        case 2: case 3: case 5: case 7: case 8:\n            return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 5: switch (iuv.x) {\n        case 3: case 4: case 5: case 6: case 7:\n            return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 6: switch (iuv.x) {\n        case 4: case 5: case 6: return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 10: switch (iuv.x) {\n        case 5: case 14: return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 11: switch (iuv.x) {\n        case 1: case 5: case 10: case 14:\n            return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 12: switch (iuv.x) {\n        case 3: case 4: case 7: case 8: case 12: case 15:\n            return LIGHT_GREEN;\n        default: return MIDDLE_GREEN;\n    }\n    case 13: switch (iuv.x) {\n        case 3: return LIGHT_GREEN;\n        case 1: case 5: case 10: case 14:\n            return DARK_GREEN;\n        default: return MIDDLE_GREEN;\n    }\n    case 14: switch (iuv.x) {\n        case 0: case 3: case 7: case 8: case 12:\n            return MIDDLE_GREEN;\n        default: return DARK_GREEN;\n    }\n    default:\n        return LIGHT_GREEN;\n    }\n}\n\n\n\n\n///--------------------------------\n// ---------------- Tree ---------------- //\nconst vec4 STEM_BROWN = vec4(200, 76, 12, 255) / 255.0;\n\nvec4 stem(in vec2 uv) {\n    ivec2 iuv = ivec2(uv * 16.0);\n    switch (iuv.x) {\n        case 7: return STEM_BROWN;\n        case 6:\n        case 8:\n        case 9: return BLACK;\n        default: return vec4(0);\n    }\n}\n\nconst int LEAF_BITMAP[256] = int[](\n    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n    0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,\n    0,0,1,2,2,2,1,0,1,3,3,3,1,0,0,0,\n    0,0,1,1,2,2,2,1,3,3,3,3,3,1,0,0,\n    0,0,0,0,1,2,2,1,3,3,1,1,1,1,0,0,\n    0,0,1,1,1,1,2,1,3,1,0,0,0,0,0,0,\n    0,1,3,3,3,3,1,3,3,1,1,1,1,1,0,0,\n    1,3,3,3,3,3,1,3,1,2,2,2,2,2,1,0,\n    1,3,1,1,1,3,3,1,2,2,2,2,2,2,2,1,\n    1,1,0,0,0,1,3,1,2,2,2,1,1,1,2,1,\n    0,0,0,0,0,1,3,1,2,2,1,0,0,0,1,1,\n    0,0,1,1,1,1,3,1,2,1,1,1,1,1,0,0,\n    0,1,2,2,2,2,1,1,1,3,3,3,3,3,1,0,\n    1,2,2,2,2,2,2,1,3,3,3,3,3,3,3,1,\n    1,2,2,1,1,1,2,1,3,1,1,1,3,3,3,1,\n    1,1,1,0,0,0,1,1,1,1,0,0,1,1,1,1\n);\n\nint readLeafBitMap(in vec2 uv) {\n    uv.y = 1.0 - uv.y;\n    uv *= 16.0;\n    return LEAF_BITMAP[int(uv.y) * 16 + int(uv.x)];\n}\n\nvec4 leaf(in vec2 uv)\n{\n    switch (readLeafBitMap(uv)) \n    {\n        case 1: return BLACK;\n        case 2: return LIGHT_GREEN;\n        case 3: return MIDDLE_GREEN;\n        default: return vec4(0);\n    }\n}\n\n\n\n\n///--------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n   // vec2 uv = fragCoord/iResolution.xy;\n   vec2 uv = ((2.0 * fragCoord - iResolution.xy) / iResolution.y + 1.0) / 2.0;\n    \n   \n    \n    \n    uv.x=uv.x+iTime*0.125;\n   \n    float tt=mod(iTime,14.0);\n    uv.x=mod(uv.x, tt);\n    \n    vec3 colOut=vec3(0.5,0.3,1.0);\n\n    \n    uv *= fSCREEN_BLOCK;\n    ivec2 iuv = ivec2(floor(uv));\n    \n   \n   vec4 fcol=vec4(0.0);\n   \n    uv = fract(uv);\n     vec2 uv2=uv;\n    uv2.x=mod(uv.x,2.0);\n    \n    if (iuv.y < GROUND_HEIGHT) fcol = groundTile(uv);\n    else if (iuv.y == GROUND_HEIGHT) fcol = grassTile(uv);\n    else if (iuv.x == SCREEN_BLOCK - 2)\n    {\n        fcol = stem(uv);\n    } else if (iuv.x == SCREEN_BLOCK - 3) \n    {\n        if (iuv.y < SCREEN_BLOCK - 3) \n        {\n            fcol = stem(uv);\n        } else if (iuv.y == SCREEN_BLOCK - 3) {\n            fcol = leaf(uv);\n        }\n    }\n    \n    \n    \n   if (iuv.x == SCREEN_BLOCK + 3) \n    {\n        if (iuv.y < SCREEN_BLOCK - 3) \n        {\n            fcol = stem(uv);\n        } else if (iuv.y == SCREEN_BLOCK - 3) {\n            fcol = leaf(uv);\n        }\n    }\n    \n    \n    \n    \n     \n   if (iuv.x == SCREEN_BLOCK + 6) \n    {\n        if (iuv.y < SCREEN_BLOCK - 3) \n        {\n            fcol = stem(uv);\n        } else if (iuv.y == SCREEN_BLOCK - 3) {\n            fcol = leaf(uv);\n        }\n    }\n    \n    \n    \n    \n    if (iuv.x == SCREEN_BLOCK + 10)\n    {\n        fcol = stem(uv);\n    } else if (iuv.x == SCREEN_BLOCK + 10) \n    {\n        if (iuv.y < SCREEN_BLOCK + 10) \n        {\n            fcol = stem(uv);\n        } else if (iuv.y == SCREEN_BLOCK + 10) {\n            fcol = leaf(uv);\n        }\n    }\n    \n    \n     if (fcol.w == 0.0) fcol = BACKGROUND;\n    colOut=fcol.xyz;\n    \n    vec4 color =vec4(colOut, 1.0);\n  \tfragColor = color;\n\n}\n\n\n","name":"Image","description":"","type":"image"}]}