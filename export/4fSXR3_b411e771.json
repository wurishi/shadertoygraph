{"ver":"0.1","info":{"id":"4fSXR3","date":"1706587324","viewed":81,"name":"readwrite transform","username":"tsengkweiming","description":"readwrite transform","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ransform"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Read coordinates\nvec2 readLeftBottom = vec2(0.2, 2.0/3.0);\nvec2 readRightBottom = vec2(0.4, 2.0/3.0);\nvec2 readLeftTop = vec2(0.2, 1);\nvec2 readRightTop = vec2(0.4, 1);\n\n// Write coordinates\nvec2 writeLeftBottom = vec2(0.5, 0.1);//vec2(1.0, 0);\nvec2 writeRightBottom = vec2(0.75, 0.5);//vec2(1, 1);\nvec2 writeLeftTop = vec2(0.25,0.5);//vec2(2.0/3.0, 0);\nvec2 writeRightTop = vec2(0.5,0.9);//vec2(2.0/3.0, 1);\n\n// Function to calculate the transformation matrix\nmat3 calculateMatrix(vec2 rb, vec2 rt, vec2 lb, vec2 lt) {\n    vec2 scaleX = rb - lb;\n    vec2 scaleY = lt - lb;\n    vec2 trans = lb;\n    mat3 scaleTranslate = mat3(\n        vec3(scaleX.x, scaleX.y, 0),\n        vec3(scaleY.x, scaleY.y, 0),\n        vec3(trans.x, trans.y, 1)\n    );\n    return scaleTranslate;\n}\n\nbool isInsideWriteRegion(vec2 uv) {\n    // Check if UV is within the write region\n    return uv.x >= 0.0 && uv.x <= 1.0 && uv.y >= 0.0 && uv.y <= 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Calculate transformation matrices\n    mat3 readMatrix = calculateMatrix(readRightBottom, readRightTop, readLeftBottom, readLeftTop);\n    mat3 writeMatrix = calculateMatrix(writeRightBottom, writeRightTop, writeLeftBottom, writeLeftTop);\n\n    // Calculate inverse of readMatrix to map from read region to unit square\n    mat3 readInverse = inverse(readMatrix);\n    mat3 writeInverse = inverse(writeMatrix);\n\n    // Transform UV from write region to read region\n    vec3 transformedUV = readMatrix * writeInverse * vec3(uv, 1);\n\n    // Sample texture using transformed UV\n    vec3 col = texture(iChannel0, transformedUV.xy).xyz;\n    //fragColor = vec4(col, 1.0);\n\n    vec3 writeSpaceUV = writeInverse * vec3(uv, 1);\n    // Check if the transformed UV is within the write region\n    if (isInsideWriteRegion(writeSpaceUV.xy)) {\n        // Sample texture using transformed UV\n        vec3 col = texture(iChannel0, transformedUV.xy).xyz;\n        fragColor = vec4(col, 1.0);\n    } else {\n        // Set color to black if outside write region\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}