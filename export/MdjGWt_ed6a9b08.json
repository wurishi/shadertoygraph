{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// KALI FRACTAL\nvec3 kali( vec3 v , vec3 s ){\n\tfloat m = 0.0;\n\tfor( int i = 0; i < 5 ; i ++){\n\tv.x = abs(v.x);\n\tv.y = abs(v.y); \n\tv.z = abs(v.z);\n\tm = v.x * v.x + v.y * v.y + v.z * v.z;\n\tv.x = v.x / m + s.x;\n\tv.y = v.y / m + s.y;\n\tv.z = v.z / m + s.z;\n    }\n\treturn v;\n}\n\n\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n\n\n\n\nfloat r;\n\nfloat map( in vec3 p )\n{\n\t\n\n\tvec4 a = texture(iChannel0 ,  vec2(abs(p.x) , abs(p.y) ));\n\tfloat t1 = .5 + .5*sin(  iTime * .3);\n\tfloat t2 = .5 + .5*sin(  iTime * .2);\n\tfloat t3 = .5 + .5*sin(  iTime * .1);\n\t\n\t//p *= t1;\n\tfloat noise = .9 * snoise( vec3( p.x , p.y , t1 ));\n\tfloat noise1 = .9 * snoise( vec3( p.x * 5. , p.y * 5. , t2 ));\n\tfloat noise2 = .9 * snoise( vec3( p.x * 10. , p.y * 10. , t3 ));\n\tfloat noise3 = .9 * snoise( vec3( p.x * 40. , p.y * 40. , t1 ));\n\n\t\n\t//float noise2\n\t\n\tfloat e = r * noise*noise1*noise2*noise3;\n\t\n    return  max( e + a.x * .01 + length(p) -1.0 , -2.0 );\n}\n\nvec3 calcNormal( in vec3 p )\n{\n\n\tvec3 e = vec3(0.001,0.0,0.0);\n\treturn normalize( vec3(map(p+e.xyy) - map(p-e.xyy),\n\t\t\t\t\t\t   map(p+e.yxy) - map(p-e.yxy),\n\t\t\t\t\t\t   map(p+e.yyx) - map(p-e.yyx) ) );\n\t\t\t\t\t\t   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tvec2 p = -1.0 + 2.0*uv;\n\t\n\tp.x *= iResolution.x/iResolution.y;\n\n    //r = 2.0*texture( iChannel0, uv ).x;\n\tr = 1.0;\n\tvec3 ro = vec3(0.0, 0.0, 2.0 );\n\tvec3 rd = normalize( vec3( p, -1.0 ) );\n\t\n\t\n\tvec3 col = vec3(0.0);\n\t\n\t\n\tfloat tmax = 10.0;\n\tfloat h = 1.0;\n\tfloat t = 0.0;\n\tfor( int i=0; i<100; i++ )\n\t{\n\t\tif( h<0.00001 || t>tmax ) continue;\n\t\th = map( ro + t*rd );\n\t\tt += h;\n\t}\n\t\n\t\n\tif( t<tmax )\n\t{\n\t\tvec3 pos = ro + t*rd;\n\t\tvec3 nor = calcNormal( pos );\n\t\tcol = vec3(1.0, 1.0, 1.0 );\n\t\t//col *= dot( nor, vec3(0.57703) );\n\t\t\n\t\tvec3 nReduce = nor * .4;\n\t\tvec3 c = nReduce + vec3( .5 , .5 , .5 );\n\t\tvec3 kCol = kali( vec3( -c.x  , -c.y , -c.z ) , vec3( -.5 , -.5 , -.5 ) );\n\t\tcol = normalize( vec3( .5  , .4 , .9 ) + kCol );\n\t\tcol *= dot( nor, vec3(0.57703) );\n\t}\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdjGWt","date":"1395286708","viewed":380,"name":"[SH2014] Simplex_Fractal 3D","username":"cabbibo","description":"3D Simplex fractal","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal","simplex"],"hasliked":0,"parentid":"","parentname":""}}