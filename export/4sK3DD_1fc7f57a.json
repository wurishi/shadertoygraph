{"ver":"0.1","info":{"id":"4sK3DD","date":"1454551531","viewed":349,"name":"My SSRR attempt","username":"jackdavenport","description":"I tried to create a SSRR shader, and the actual reflection part got me. Can anybody help me work out how to do it?","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["raymarcher","ssrr"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel1, uv);\n    \n    if(fragColor.a > 0.) {\n        \n        float rf = fragColor.a;\n    \tvec3   n = texture(iChannel0, uv).xyz;\n        vec3  ld = vec3((fragCoord - iResolution.xy * .5) / iResolution.y,1.);\n     \tvec3  rd = reflect(ld, n);\n        \n        vec3 p  = rd * 15.;\n        vec2 tc = (1. - uv - vec2(0.,.5)) * vec2(1.,1.);\n        vec3 rc = texture(iChannel1, vec2(1. - tc.x, tc.y)).xyz;\n        \n        fragColor.xyz = mix(fragColor.xyz, rc, rf);\n        \n    }\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define MAX_ITERATIONS 128\n#define MIN_DISTANCE .001\n\n#define FAR_PLANE 100.\n\nstruct Ray { vec3 ori; vec3 dir;};\nstruct Dst { float dst; int id; };\nstruct Hit { vec3 p; int id;    };\n    \nDst distSphere(vec3 p, vec3 pos, float r) {\n \n    return Dst(length(pos - p) - r, 0);\n    \n}\n\nDst distFloor(vec3 p, float y) {\n \n    return Dst(p.y - y, 1);\n    \n}\n\nDst minDst(Dst a, Dst b) {\n \n    if(a.dst < b.dst) return a;\n    return b;\n    \n}\n\nDst distScene(vec3 p) {\n \n    Dst dst = distSphere(p, vec3(0.), 1.);\n    dst = minDst(dst, distFloor(p, -1.));\n    \n    return dst;\n    \n}\n\nHit raymarch(Ray ray) {\n \n    vec3 p = ray.ori;\n    int id = -1;\n    \n    for(int i = 0; i < MAX_ITERATIONS; i++) {\n     \n       \tDst dst = distScene(p);\n        p += ray.dir * dst.dst;\n        \n        if(dst.dst < MIN_DISTANCE) {\n         \n            id = dst.id;\n            break;\n            \n        }\n        \n    }\n    \n\tif(id == -1) p = ray.ori - ray.dir * .01;    \n    return Hit(p,id);\n    \n}\n\nvec3 calcNormal(vec3 p) {\n \n    vec2 eps = vec2(.001, 0.);\n    vec3   n = vec3(distScene(p + eps.xyy).dst - distScene(p - eps.xyy).dst,\n                    distScene(p + eps.yxy).dst - distScene(p - eps.yxy).dst,\n                    distScene(p + eps.yyx).dst - distScene(p - eps.yyx).dst);\n    return normalize(n);\n    \n}\n\nvec4 shade(Ray ray) {\n \n    Hit scn = raymarch(ray);\n    vec3 col = vec3(0.);\n    \n    if(scn.id != -1) {\n     \n        col = calcNormal(scn.p);\n        \n    }\n    \n    return vec4(col, distance(scn.p,ray.ori) / FAR_PLANE);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    \n    vec3 ori = vec3(0.,0.,-4.);\n    vec3 dir = vec3(uv, 1.);\n    \n    fragColor = shade(Ray(ori,dir));\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"struct Ray { vec3 ori; vec3 dir;};\n\nvec3 calcLighting(vec3 p, vec3 n) {\n \n    vec3 ld = normalize(vec3(45.,40.,-35.));\n    float d = max(dot(ld,n), 0.);\n    \n    return vec3(.95,.8,.8) * d;\n    \n}\n\nvec3 getNormal(vec2 uv) {\n \n    return texture(iChannel3, uv).xyz;\n    \n}\n\nvec4 shade(Ray ray) {\n \n    vec2 screenUV = gl_FragCoord.xy / iResolution.xy;\n    float d = texture(iChannel3,screenUV).a;\n    \n    if(d < 0.001) {\n     \n        vec4 col = texture(iChannel0, ray.dir);\n        col.a = 0.;\n        \n        return col;\n        \n    }\n    \n    vec3 p = ray.ori + ray.dir * d;\n    vec3 col = texture(iChannel0, ray.dir).xyz;\n    \n    vec2 uv = mod(p.xz * 10., 1.);\n   \tcol = texture(iChannel1, uv).xyz;\n    col *= calcLighting(p, getNormal(screenUV));\n    \n    return vec4(col, .4);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    \n    vec3 ori = vec3(0.,0.,-4.);\n    vec3 dir = vec3(uv, 1.);\n    \n    fragColor = shade(Ray(ori,dir));\n}","name":"Buf B","description":"","type":"buffer"}]}