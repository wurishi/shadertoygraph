{"ver":"0.1","info":{"id":"fltyDB","date":"1660650231","viewed":187,"name":"doublej - perlin fog","username":"boudartjj","description":"Fractal Brownian Motion\nfeel free to play with the parameters in the code (from line 38 to 45)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","noise","perlin","fog"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 random(vec2 uv){\n    uv = vec2( dot(uv, vec2(127.1,311.7) ),\n               dot(uv, vec2(269.5,183.3) ) );\n    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);\n}\n\nfloat noise(vec2 uv, float seed_h, float seed_v) {\n\n    uv.x = uv.x + seed_h;\n    uv.y = uv.y + seed_v;\n    \n    vec2 uv_index = floor(uv);\n    vec2 uv_fract = fract(uv);\n\n    vec2 blur = smoothstep(0.0, 1.0, uv_fract);\n\n    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),\n                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),\n                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),\n                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) + 0.5;\n}\n\n\nfloat fbm(vec2 uv, float seed_h, float seed_v, int octaves, float amplitude, float frequency) {\n\tfloat value = 0.0;\n\t\n    for(int i = 0; i < octaves; i++) {\n        value += amplitude * noise(frequency * uv, noise(uv.xy, seed_h, seed_h) - 0.5, noise(uv.yx, seed_v, seed_v));\n        amplitude *= 0.5;\n        frequency *= 2.0;\n    }\n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // animation parameters - feel free to play with them\n    float horizontal_speed = 0.05;\n    float vertical_speed = 0.0;\n    float horizontal_oscillation_factor = 0.25;\n    float vertical_oscillation_factor = 0.25;\n    int octaves = 5;\n    float amplitude = 0.5;\n    float frequency = 2.0;\n    vec3 color = vec3(0.0, 0.9, 0.7);\n    \n    \n    float horizontal_seed = iTime * horizontal_oscillation_factor;\n    float vertical_seed = iTime * vertical_oscillation_factor;\n   \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.x;\n\n    // noise\n    uv.x = uv.x - iTime * horizontal_speed;\n    uv.y = uv.y + iTime * vertical_speed;\n    float noise = fbm(uv, horizontal_seed, vertical_seed, octaves, amplitude, frequency);\n    vec3 col = color * noise;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}