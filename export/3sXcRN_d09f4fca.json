{"ver":"0.1","info":{"id":"3sXcRN","date":"1584221579","viewed":149,"name":"Sol LeWitt","username":"Sasquatch5","description":"A shader interpretation of Sol LeWitt's \"Complex Form with Black and White Bands\"","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["sollewitt","blackandwhitebands"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float lineScale = 1.0/30.0;\nfloat cellBorderScale = 1.0/15.0;\nvec3 stripColor = vec3(228.0/255.0,230.0/255.0,229.0/255.0);\nvec3 bgColor = vec3(55.0/255.0,55.0/255.0,53.0/255.0);\n\nfloat maxDistance = 7.0;\nfloat movementSpeed = 0.05;\n\n#define ANIMATE\n\nvec2 hash2( vec2 p )\n{\n    // procedural white noise\t\n\treturn fract(sin(vec2(dot(p,vec2(127.1,314.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvec4 voronoi( in vec2 x )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n\tfloat cellIndex;\n    float md = maxDistance;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime * movementSpeed + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n            cellIndex = o.g;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = maxDistance;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime * movementSpeed + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>0.00001 )\n        md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n\n    return vec4( md, mr,cellIndex);\n}\n\nfloat getBorderDistance(vec2 uv)\n{\n    float aspect = (iResolution.y / iResolution.x);\n    vec2 borderUV = uv;\n    borderUV.y /= aspect;\n    borderUV.x -= 0.5;\n    borderUV.y -= 0.5;\n    borderUV = abs(borderUV);\n    borderUV = 1.0-borderUV;\n    borderUV.x -= aspect /2.578;\n    float maxDistance = min(borderUV.x,borderUV.y * aspect);\n    maxDistance *= 35.0;\n    maxDistance -= 9.8;\n    maxDistance /= 1.5;\n    return maxDistance;\n}\n\nfloat getFrameBorders(vec2 uv)\n{\n\tfloat borderDistance = getBorderDistance(uv);\n    borderDistance -= 3.14159 / 1.47;\n    borderDistance *= step(borderDistance,-0.9);\n    borderDistance = abs(sin(borderDistance*4.0));\n    borderDistance -= 0.15;    \n    borderDistance = smoothstep(0.45,0.55,borderDistance);\n\treturn 1.0-borderDistance;\n}\n\n\nfloat getCellBorders(vec4 voronoi)\n{\n    return smoothstep(0.04,0.05,voronoi.r);\n}\n\nfloat getInternalCellLines(vec2 uv, vec4 v)\n{\n    float dir = pow(v.w/10.0,0.75)* 3.14159 * 2.0;\n    \n    float sinDir = sin(dir);\n    float cosDir = cos(dir);\n   \tmat2 rotMatrix = mat2(cosDir,sinDir,-sinDir,cosDir);\n    \n    vec2 voronoiUV = uv;\n    voronoiUV = rotMatrix * (voronoiUV);\n    voronoiUV /= lineScale;\n    return voronoiUV.x; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xx;\n    \n    vec4 voronoi = voronoi(maxDistance *  uv); \n    \n    float lineOpacity = 1.0;\n    \n    //internal cel strips\n    lineOpacity = smoothstep(0.45,0.55,abs(fract(getInternalCellLines(uv,voronoi))-0.5)*2.0);\n\t\n    //cell borders\n    lineOpacity = min(lineOpacity,getCellBorders(voronoi));\n\n    //frame borders\n    float borderCutoff = smoothstep(0.51,0.49,getBorderDistance(uv)-0.66);\n    lineOpacity = mix(lineOpacity,getFrameBorders(uv),borderCutoff);\n    \n    \n    vec3 col = mix(bgColor,stripColor,lineOpacity);\n\n    fragColor = vec4(col,1.0);\n\n}","name":"Image","description":"","type":"image"}]}