{"ver":"0.1","info":{"id":"Nd3GDl","date":"1630814851","viewed":312,"name":"SID meets AY - Flashparty 2021","username":"Kali","description":"Part of the visuals I made for the \"SID meets AY\" performance @ Flashparty 2021\nMusic mix by uctumi","likes":11,"published":1,"flags":64,"usePreview":0,"tags":["set"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XtlSWj","filepath":"https://soundcloud.com/paul-andrew-212279850/pungas-radio-set-2021","previewfilepath":"https://soundcloud.com/paul-andrew-212279850/pungas-radio-set-2021","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat det=.005, maxdist=50., pi=3.1416, gl=0.;\n\nfloat hash12(vec2 p)\n{\n    p*=1000.;\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nmat2 rot(float a)\n{\n    float s=sin(a), c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\n\n//---Chess -----------------------------------------------------------\n\n\n#define PI 3.1416\nconst float det2=.005;\nconst float max_dist=5.;\nfloat obj_id;\nvec3 light_dir2;\n\n// polynomial smooth min (k = 0.1);\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\nfloat de2(vec3 p) {\n    p.z+=.2;\n    vec3 sphp=p;\n    sphp.y+=.1;\n    sphp.xy*=rot(sin(iTime)*.3);\n    float sph=100.;\n    \n    for (float a=0.; a<PI*2.; a+=PI/10.) {\n        float an=a-iTime*.5;\n        sphp.xz=p.xz+vec2(cos(an),sin(an));\n\t\tsphp.y+=sin(an*PI)*.5;\n        sph=smin(sph,length(sphp)-.2,.3);    \n    }\n\tsph*=.5;\n    float spec=texture(iChannel0,vec2(p.x*.05+.5,0.)).r;\n    float flo=p.y+.7-spec*.3;\n    float d=smin(sph,flo,.2);\n    float d2=min(sph,flo);\n    obj_id=step(flo,d2);\n    return d;\n}\n\nvec3 normal2(vec3 p) {\n\tvec3 d=vec3(0.,det*2.,0.);\n    return normalize(vec3(de2(p+d.yxx),de2(p+d.xyx),de2(p+d.xxy))-de2(p));\n}\n\nfloat shadow2(vec3 from) {\n    float td=.1,sh=1.,d;\n    for (int i=0; i<30; i++) {\n\t\tvec3 p=from-light_dir2*td;\n        d=de2(p);\n        td+=d;\n\t\tsh=min(sh,20.*d/td);\n\t\tif (sh<.001) break;\n    }\n    return clamp(sh,0.,1.);\n}\n\nfloat ao2(vec3 p, vec3 n) {\n\tfloat st=.02;\n\tfloat ao=0.;\n\n    for(float i=0.; i<6.; i++ ) {\n        float td=st*i;\n        float d=de2(p+n*td);\n        ao+=max(0.,(td-d)/td);\n    }\n    return clamp(1.-ao*.15,0.,1.);\n}\n\nfloat is_id(float id1, float id2) {\n\treturn step(abs(id1-id2),.1);\n}\n\n\nvec3 color(vec3 p, float id) {\n    vec3 col=vec3(0.);\n\tfloat lin=mod(floor(p.x*3.)+floor(p.z*3.),2.);\n    col+=vec3(lin)*is_id(obj_id,1.);\n\treturn col;\n}\n\n\nvec3 light(vec3 p, vec3 dir, vec3 n, vec3 col){\n    float aoc=ao2(p,n);\n    float sh=shadow2(p);\n\tfloat amb=.25;\n    float diff=max(0.,dot(light_dir2,-n))*.7*sh;\n\tvec3 ref=reflect(dir,n);\n    float spec=pow(max(0.,dot(light_dir2,-ref)),5.)*.7*sh;\n    return col*(amb+diff)*aoc+spec;\n}\n\n\nvec4 march2(vec3 from, vec3 dir) {\n\tfloat d, tot_dist, id;\n    vec3 p, col=vec3(0.);\n    float foc=1.;\n    float min_d=100.;\n    float g=0.;\n    for (int i; i<100; i++) {\n    \tp=from+dir*tot_dist;\n        d=de2(p);\n    \ttot_dist+=d;\n        min_d=min(d,min_d);\n        if (d<det || tot_dist>max_dist) break;\n        g+=(1.-obj_id);\n    }\n    vec3 back_col;;\n    if (d<det2) {\n    \tp-=dir*det2*2.;\n        id=obj_id;\n        vec3 n=normal2(p);\n     \tcol=color(p,id);\n        col=light(p,dir,n,col);\n    } else {\n    \ttot_dist=max_dist;\n        p=from+dir*tot_dist;\n        back_col=smoothstep(0.,4.,vec3(p.y+1.))*step(7.,mod(gl_FragCoord.y,10.));\n        back_col+=pow(max(0.,dot(dir,light_dir2)),5.);\n    }\n    float norm_dist=tot_dist/max_dist;\n    col=mix(col,back_col,norm_dist);\n\tcol+=g*g*.0001;\n    col*=1.+abs(p);\n    return vec4(col,norm_dist);\n\n}\n\n\n\nvec4 mainImage2( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=fragCoord/iResolution.xy;\n    uv-=.5;\n    uv.x*=iResolution.x/iResolution.y;\n    vec3 dir=normalize(vec3(uv,1.3));\n    vec3 from=vec3(0.,(sin(iTime*.2)-1.)*.2,-3.2+sin(iTime*.3));\n    float t=iTime*.2;\n    from.xz*=rot(t);\n    dir.xz*=rot(t);\n\tlight_dir2=normalize(vec3(1.,-0.5,0.));\n\tlight_dir2.xz*=rot(iTime*.5);\n    vec4 col=march2(from, dir)*min(1.,iTime);\n    fragColor=col;\n    return fragColor;\n}\n\n// -- occasional spectators ------------------------------------------------------------------\n\n\nfloat s;\nfloat t;\nvec3 ot;\nvec3 colo=vec3(0);\n\nfloat de3(vec3 p) \n{\n  float z=p.z;\n  ot=vec3(100);\n  colo=p;\n  float sc=1.;\n  p.xy*=rot(p.z*.1);\n  p=abs(15.-mod(p,30.))-1.;\n  for (int i=0; i<8; i++) {\n    p.xy*=rot(1.);\n    p.yz*=rot(t*10.);\n    ot=min(ot,abs(p.xyz));\n    p.xy=abs(p.xy+5.)-abs(p.xy-5.)-p.xy;\n    float s=1.5;\n    sc*=s;\n    p=p*s;\n  }\n  colo=exp(-15.*ot);\n  return (length(p)/sc-.5)*.8;\n  \n}\n\n\nvec3 march3(vec3 from, vec3 dir) {\n  float d, td=0.;\n  vec3 p, c=vec3(0.);\n  for (int i=0; i<50; i++) \n  {\n    p=from+dir*td;\n    d=de3(p);\n    td+=max(.01,abs(d));\n    c+=colo*exp(-.1*td);\n  }\n  return (c*c*.05);\n  \n}\n \nvec4 mainImage3( out vec4 fragColor, in vec2 fragCoord )\n{\n  t=floor(iTime*10.)*.001;\n  s=texture(iChannel0,vec2(.3)).r;\n  vec2 uv = vec2(gl_FragCoord.x / iResolution.x, gl_FragCoord.y / iResolution.y);\n  uv-=.5;\n  uv.x*=iResolution.x/iResolution.y;\n  if (fract(t*4.)<.5) t+=floor(length(uv)*4.-t*100.); else t+=floor(length(uv.y+uv.x)*1.5-t*100.);\n  vec3 dir=normalize(vec3(uv,.5+s*.5));\n  vec3 from=vec3(cos(t*.5)*2.,sin(t)*2.,t*200.);\n  from.xy*=rot(t*100.);\n  dir.yz*=rot(smoothstep(-.5,.5,sin(t*10.))*10.);\n  vec3 c = march3(from,dir);\n  c=abs(cross(c,dir));\n  c.xy*=rot(t*50.+s*20.);\n  fragColor = vec4(c,1.);\n  return fragColor;\n}\n\n\n\n//-gumball----------------------------------------------------------------------------\n\nfloat det3=.005, maxdist3=50.,sphit=0.,t2;\nvec3 g=vec3(0.), from, blobcol=vec3(1.,.3,.5);\nfloat sou;\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nfloat hash(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\n\nvec3 path(float t)\n{\n    vec3 p=vec3(vec2(sin(sin(t*.1)),cos(t*.05))*10.,t);\n    p.x+=pow(smoothstep(.2,.5,abs(.5-fract(t*.01))),3.)*10.;\n    return p;\n}\n\nvec3 fractal2(vec2 p)\n{\n    p=abs(5.-mod(p,10.))-5.;\n    float ot=1000., it;\n    for (int i=0; i<8; i++)\n    {\n        p=abs(p)/(p.x*p.y)-1.;\n        float d=abs(p.y)+fract(abs(p.x)*.1+iTime*.3+float(i)*.25+sou*.5);\n        if (ot>d) {\n            ot=d;\n            it=float(i);\n        }\n    }\n    ot=exp(-10.*ot);\n    return hsv2rgb(vec3(it*.02+.6,.8,ot));\n//    return vec3(ot*ot*ot,ot*ot,ot);\n}\n\nfloat box2(vec3 p, vec3 l)\n{\n    vec3 c=abs(p)-l;\n    return length(max(vec3(0.),c))+min(0.,max(c.x,max(c.y,c.z)));\n}\n\nfloat road(vec3 p)\n{\n    float s=sign(p.y);\n    p.y=-abs(p.y)-3.;\n    float z=p.z;\n    float d=p.y+3.;\n    p.z=mod(p.z,20.)-10.;\n    float der=1., sc=1.2;\n    for (int i=0; i<4; i++)\n    {\n        p=abs(p)-1.;\n        p.xz*=rot(radians(s*-45.));\n        p.xy*=rot(radians(45.));\n    }\n    d=max(d, -box2(p,vec3(5.,5.,10.)));\n    return d*.7;\n}\n\nfloat de4(vec3 p)\n{\n    float sph=length(p-path(t2+10.))-1.5-length(sin(p))*.5;\n    p.xy-=path(p.z).xy;\n    float roa=road(p);\n    float d=min(sph,roa);\n    if (d==sph) sphit=1.; else sphit=0.;\n    return d;\n}\n\nvec3 normal4(vec3 p)\n{\n    vec2 e=vec2(0.,det);\n    return normalize(vec3(de4(p+e.yxx),de4(p+e.xyx),de4(p+e.xxy))-de4(p));\n}\n\nvec3 shade(vec3 p)\n{\n    vec3 n=normal4(p);\n    p.xy-=path(p.z).xy;\n    if(sphit>.5) p.y-=t2;\n    vec3 col=fractal2(p.xy)*abs(n.z)+fractal2(p.xz)*abs(n.y)+fractal2(p.yz)*abs(n.x);\n    //col*=sphit;\n    return col;\n}\n\nvec3 march4(vec3 from, vec3 dir)\n{\n    vec3 p, col=vec3(0.);\n    float d, td=0.;\n    for (int i=0; i<80; i++)\n    {\n        p=from+td*dir;\n        d=de4(p)*(1.-hash(gl_FragCoord.xy+iTime)*.1);\n        if (d<det3 || td>maxdist3) break;\n        td+=d;\n        if (d<1.5) g+=shade(p)/(1.+d*d)*exp(-.001*td*td)*.5*step(5.,td)+sphit*.03*blobcol;\n    }\n    if (d<det) {\n        vec3 n=normal4(p);\n        g+=abs(n.x)*.3*exp(-.002*td*td)+sphit*blobcol;\n        vec3 ref=reflect(normalize(dir-vec3(.5,1.,0.)),n);\n        g+=pow(max(0.,dot(ref,n)),20.)*sphit*.7;\n    } else\n    {\n        td=maxdist;\n      //  g+=dir.y*vec3(1.,.6,.5)*.5;\n    }\n    return g;\n}\n\nmat3 lookat(vec3 dir, vec3 up) \n{\n\tdir=normalize(dir);vec3 rt=normalize(cross(dir,normalize(up)));\n    return mat3(rt,cross(rt,dir),dir);\n}\n\n\nvec4 mainImage4( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    t2=iTime*7.;\n    float inv=0.;\n    if (mod(iTime,15.)<8.) from=path(t2); else from=path(floor(t2+20.)),inv=.7;\n    uv*=rot(iTime*inv);\n    vec3 adv=path(t2+1.);\n    vec3 dir=normalize(vec3(uv,.7));\n    dir=lookat(adv-from,vec3(0.,1.,0.))*dir;\n    //from.xz*=rot(t);\n    //dir.xz*=rot(t);\n    //dir.xy*=rot(-(adv-from).x*.5);\n    vec3 col=abs(inv-march4(from, dir));\n    \n    // Output to screen\n    fragColor=vec4(col,1.0);\n    return fragColor;\n}\n\n\n//------------------------------------------------------\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=fragCoord/iResolution.xy-.5;\n    sou = texture(iChannel0,vec2(.0,.7)).r;\n    float tt=mod(iTime,300.);\n    vec4 col1=mainImage2(fragColor, fragCoord);\n    vec4 col2=mainImage3(fragColor, fragCoord);\n    fragColor = col1+col2*.5;\n}","name":"Image","description":"","type":"image"}]}