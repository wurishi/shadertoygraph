{"ver":"0.1","info":{"id":"WsVSzV","date":"1574456469","viewed":2972,"name":"Fast CRT","username":"kbjwes77","description":"Return to tradition with a simple and relatively efficient CRT shader. Customizable warp and scanline effects.","likes":14,"published":1,"flags":0,"usePreview":1,"tags":["retro","tv","crt","warp","scanline","curve","monitor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float warp = 0.75; // simulate curvature of CRT monitor\nfloat scan = 0.75; // simulate darkness between scanlines\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n\t{\n    // squared distance from center\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 dc = abs(0.5-uv);\n    dc *= dc;\n    \n    // warp the fragment coordinates\n    uv.x -= 0.5; uv.x *= 1.0+(dc.y*(0.3*warp)); uv.x += 0.5;\n    uv.y -= 0.5; uv.y *= 1.0+(dc.x*(0.4*warp)); uv.y += 0.5;\n\n    // sample inside boundaries, otherwise set to black\n    if (uv.y > 1.0 || uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0)\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n    else\n    \t{\n        // determine if we are drawing in a scanline\n        float apply = abs(sin(fragCoord.y)*0.5*scan);\n        // sample the texture\n    \tfragColor = vec4(mix(texture(iChannel0,uv).rgb,vec3(0.0),apply),1.0);\n        }\n\t}","name":"Image","description":"","type":"image"}]}