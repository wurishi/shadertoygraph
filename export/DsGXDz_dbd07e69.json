{"ver":"0.1","info":{"id":"DsGXDz","date":"1680916039","viewed":86,"name":"Learning shaders (basic)","username":"spooneystone","description":"Just learning","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["basic","blackandwhite"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 Circle(vec2 uv,float r, vec3 col){\n\n    float d = length(uv);\n    r = sin(iTime * 2.5) * 0.01 +  r ;\n    float c = smoothstep(r,r-0.009,d);\n    col *= c;\n    return col;\n}\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( fragCoord -.5*iResolution.xy ) / iResolution.y;\n    \n    vec3 x1 = vec3( uv.x + .6);\n    vec3 x2 = vec3(-uv.x + .6);\n    vec3 y1 = vec3( uv.y + .6);\n    vec3 y2 = vec3(-uv.y + .6);\n    \n    vec3 fill =(x1 * x2) + (y1 * y2) * 2.;\n    vec3 a;\n    vec3 c;\n    float x = 10.;\n    float y = 6.;\n     for(float i=0.; i < x; i++){\n        for (float r=0.; r < y; r++)  {\n      c +=Circle(vec2(uv.x + 1. - (i*.2),uv.y - .5 + (r*.2)),0.095,vec3(1,1,0));\n      \n      \n    }\n    }\n     x = 13.;\n     y = 8.;\n     for(float i=0.; i < x; i++){\n        for (float r=0.; r < y; r++)  {\n      \n      a += Circle(vec2(uv.x + 1.5 - (i*.2),uv.y - .4 + (r*.2)),0.035,vec3(0,0,1));\n      \n    }\n    }\n    \n    c += a;\n   \n  \n    fragColor = vec4(vec3( fill * c ),1.0);\n} ","name":"Image","description":"","type":"image"}]}