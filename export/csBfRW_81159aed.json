{"ver":"0.1","info":{"id":"csBfRW","date":"1689461340","viewed":80,"name":"Triangle strips","username":"snflwrfld","description":"triangles","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["2d","triangles","loop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWO_PI 6.2831853\n\n#define BIG_FLOAT 100000.\n\nfloat h11(float seed) {\n    return fract(cos(seed*1179.30)*09384.7+173.812);\n}\n\nvec3 palette( in float t )\n{\n    // https://iquilezles.org/articles/palettes/\n    vec3 a = vec3(.5);\n    vec3 b = vec3(.5);\n    vec3 c = vec3(2.,1.,0.);\n    vec3 d = vec3(.5,.2,.25);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat sdEquilateralTriangle(  in vec2 p, in float r )\n{\n    // https://www.shadertoy.com/view/Xl2yDW\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nmat2 rot(float th) {\n    return mat2(cos(th),sin(th),-sin(th),cos(th));\n}\n\nfloat threeTrianglesSDF (vec2 p, float t) {\n    \n    float tri_dist = BIG_FLOAT;\n    vec2 uv_tri = p;\n    \n    float SHRINK_FACTOR = .38;\n    \n    t = mod(t,13.)-5.2;\n    \n    // LEFT TRI\n    uv_tri.x = p.x + .6; uv_tri.y = -p.y + .3;\n    uv_tri /= 1. - SHRINK_FACTOR*(smoothstep(0.,1.,t) - smoothstep(2.,3.,t));\n    uv_tri = rot(TWO_PI/3. * smoothstep(1.,2.,t)) * uv_tri;\n    tri_dist = min(tri_dist,sdEquilateralTriangle(uv_tri,.5));\n    \n    // MID TRI\n    uv_tri = p;\n    uv_tri /= 1. - SHRINK_FACTOR*(smoothstep(.5,1.5,t) - smoothstep(2.5,3.5,t));\n    uv_tri = rot(TWO_PI/3. * smoothstep(1.5,2.5,t)) * uv_tri;\n    tri_dist = min(tri_dist,sdEquilateralTriangle(uv_tri,.5));\n   \n    // RIGHT TRI\n    uv_tri.x = p.x - .6; uv_tri.y = -p.y + .3;\n    uv_tri /= 1. - SHRINK_FACTOR*(smoothstep(1.,2.,t) - smoothstep(3.,4.,t));\n    uv_tri = rot(TWO_PI/3. * smoothstep(2., 3., t)) * uv_tri;\n    tri_dist = min(tri_dist,sdEquilateralTriangle(uv_tri,.5));\n    \n    return tri_dist;\n}\n\nfloat triangleBannerSDF(vec2 p, float t) {\n    float ix = floor(p.x/1.2);\n    p.x = mod(p.x,1.2) -.6;\n    \n    //t = mod(iTime,13.)-5.2;\n    \n    return threeTrianglesSDF( p , t - ix);\n}\n\nvec3 col_strips(vec2 uv) {\n    float t = iTime;\n    \n    \n    uv = rot(.5)*uv;\n    \n    float row_margin = 1.2;\n    float iy = floor(uv.y/row_margin);\n    float time_factor = 1. + h11(iy);\n    uv.y = mod(uv.y,row_margin) - (row_margin/2.);\n    float tri_dist = triangleBannerSDF(uv , t*time_factor);\n    \n    \n    vec3 col = vec3(1.);\n    col *= 1. - smoothstep(0.,0.01,tri_dist);\n    col *= palette(.2) * smoothstep(-.2,-.195,tri_dist);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy * 2. -1.;\n    uv *= 3.;\n    uv.x *= iResolution.x/iResolution.y;\n\n    vec3 col = col_strips(uv);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}