{"ver":"0.1","info":{"id":"mdsfzn","date":"1688429503","viewed":100,"name":"Multipass pixel art scaler","username":"sh1boot","description":"Going to try making a vector field for every pixel, then use that to define sharper upscaling edges.  This is the first part of that effort.","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["vectorfield","pixelscaling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 getvec(vec2 uv) {\n    uv = fract(uv / iChannelResolution[1].xy) * iChannelResolution[1].xy;\n    return texture(iChannel0, fract((vec2(uv) + 0.5 / SubDiv) / iChannelResolution[0].xy));\n}\n\nvec4 getpix(ivec2 uv) {\n    return texture(iChannel1, fract((vec2(uv) + 0.5) / iChannelResolution[1].xy));\n}\n\n// gShaderToy.SetTexture(1, {mSrc:'https://i.postimg.cc/2m6hY0vm/test-original.gif', mType:'texture', mID:1, mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }});\n// gShaderToy.SetTexture(1, {mSrc:'https://i.postimg.cc/csh04MYG/r-place.png', mType:'texture', mID:1, mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }});\n\nfloat aastep(float f, float threshold) {\n    float margin = clamp(fwidth(f) * 0.7, 0.0, 0.1);\n    return smoothstep(threshold - margin, threshold + margin, f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord ) * Scale + 0.5 * iTime;\n    vec2 iuv = round(uv * SubDiv) / SubDiv;\n    vec2 fuv = uv - iuv;\n    vec2 vf = getvec(iuv).xy;\n    float len = length(vf.xy);\n    bool aimless = len < 0.0001;\n    float dir = aimless ? 0.0 : atan(vf.y, vf.x) * 0.5;\n    vf = vec2(cos(dir), -sin(dir));\n    fuv = vec2(vf.x * fuv.x - vf.y * fuv.y,  \n               vf.x * fuv.y + vf.y * fuv.x);\n    fragColor = getpix(ivec2(iuv));\n    fragColor.a = 1.0;\n    if (aimless) {\n        fragColor *= 1.0 - aastep(length(fuv.xy), .15 / SubDiv);\n    } else {\n        fragColor.a *= 1.0 - aastep(abs(fuv.y), .1 / SubDiv);\n        float clip = len * 0.5;\n        clip = clamp(clip, 0.15, 0.45);\n        fragColor.a *= 1.0 - aastep(abs(fuv.x), clip / SubDiv);\n    }\n    fragColor = fragColor * fragColor.a + vec4(0.25) * (1.0 - fragColor.a);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 getpix(ivec2 uv) {\n    return texture(iChannel1, fract((vec2(uv) + 0.5) / iChannelResolution[1].xy));\n}\n\nfloat match(vec3 p, vec3 q) {\n    return max(0.0, 1.0 - distance(p, q) * MatchDerate);\n}\n\nvec2 invdist(vec2 uv) {\n    // TODO: probably gaussian would be better.\n    return uv / dot(uv, uv);\n}\n\n\nvec2 csq(vec2 v) {\n    return vec2(v.x * v.x - v.y * v.y, 2.0 * v.x * v.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (all(lessThan(fragCoord.xy, iChannelResolution[1].xy))) {\n      ivec2 uv = ivec2(fragCoord);\n\n      vec3 p = getpix(uv).rgb;\n      \n      vec2 acc = vec2(0);\n      for (int y = -Radius; y <= Radius; ++y) {\n          for (int x = -Radius; x <= Radius; ++x) {\n              if (x == 0 && y == 0) continue;\n              if (abs(x) + abs(y) > Radius * 3 / 2) continue;\n              ivec2 o = ivec2(x, y);\n              vec3 q = getpix(uv + o).rgb;\n              acc += csq(invdist(vec2(o))) * match(p, q);\n          }\n      }\n      p.rg = acc;\n      fragColor = vec4(p, 1.0);\n    } else {\n      fragColor = vec4(0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const int Radius = 2;\nconst float MatchDerate = 16.0;\nconst float Scale = 1.0 / 20.0;\nconst float SubDiv = 1.0;\n\nconst float FilterCorner = 4./64.;\nconst float FilterEdge = 6./64.;\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 getvec(ivec2 uv) {\n    uv = ivec2(fract(vec2(uv) / iChannelResolution[1].xy) * iChannelResolution[1].xy);\n    return texture(iChannel0, fract((vec2(uv) + 0.5) / iChannelResolution[0].xy));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (all(lessThan(fragCoord.xy, iChannelResolution[1].xy))) {\n      ivec2 uv = ivec2(floor(fragCoord));\n\n      vec4 acc = vec4(0);\n      for (int y = -1; y <= 1; ++y) {\n          for (int x = -1; x <= 1; ++x) {\n              float scale = FilterCorner;\n              if (x == 0 || y == 0) scale = FilterEdge;\n              if (x == 0 && y == 0) scale = 1.0 - 4.0 * (FilterCorner + FilterEdge);\n              acc += getvec(uv + ivec2(x, y)) * scale;\n          }\n      }\n      fragColor = acc;\n    } else {\n      fragColor = vec4(0);\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}