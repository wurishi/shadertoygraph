{"ver":"0.1","info":{"id":"MtXfWS","date":"1525558956","viewed":162,"name":"koosh","username":"dahart","description":"A spikey koosh ball made by raymarching through spherical coordinates","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","ball","spherical","spike","koosh"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// A Koosh ball\n// Most of this code from one of IQ's ray marching samples\n// The main test/modification here is to use a mod function\n// in spherical coordinates so that each ray march step\n// only has to test against one spike.\n// For fun I added a warp to make the spikes droop\n// downward, to test mixing mixing operations \n// in world space and sphere space.\n\n#define AA 2\n\n//------------------------------------------------------------------\n\nfloat N(float t) {\n\treturn fract(sin(t*10234.324)*123423.23512);\n}\nvec3 N31(float p) {\n    //  3 out, 1 in... DAVE HOSKINS\n   vec3 p3 = fract(vec3(p) * vec3(.1031,.11369,.13787));\n   p3 += dot(p3, p3.yzx + 19.19);\n   return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nfloat N2(vec2 p)\n{\t// Dave Hoskins - https://www.shadertoy.com/view/4djSRW\n\tvec3 p3  = fract(vec3(p.xyx) * vec3(443.897, 441.423, 437.195));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//------------------------------------------------------------------\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\n// remove r from n, i.e., project n onto plane with normal r\nvec3 remove(vec3 n, vec3 r) {\n    return n - r * dot(n, r) / dot(r, r);\n}\n\n// A generalized cylinder primitive\nfloat sdFatLine(vec3 p, vec3 a, vec3 b, float ra, float rb) {\n    vec3 d = b - a;\n    float t = dot(p - a, d) / dot(d, d);\n    t = min(1.0, max(0.0, t));\n    vec3 cp = a + t * d;\n    float cr = ra + t * (rb - ra);\n    return length(p - cp) - cr;\n}\n\n//------------------------------------------------------------------\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec3 cartesian2Sphere(vec3 sp) {\n    float r = length(sp);\n    float dec = acos(sp.y / r);\n    float heading = atan(sp.z, sp.x);\n    //vec2 pp = vec2(0.5, 0.5) + vec2(cos(heading), sin(heading)) * dec;\n    //return vec3(pp, r);\n    return vec3(heading, dec, r);\n}\n\n// octahedral map\nconst float pi = 3.1415927;\nvec3 uv2sphere(vec2 uv) {\n    uv = 2. * uv - 1.;\n    float d = 1. - (abs(uv.x) + abs(uv.y));\n    float r = 1. - abs(d);\n    // Compute  phi in  first  quadrant (branchless , except  for  the\n    // div -by-zero  test), using  sign(u) to map  the  result  to the\n    // correct  quadrant  below\n    float phi = (r == 0.) ? 0. : (pi / 4.) * ((abs(uv.y) - abs(uv.x)) / r + 1.);\n    float omrr = 1. - r * r;\n    float f = r * sqrt(1. + omrr);\n    float x = f * sign(uv.x) * cos(phi);\n    float y = f * sign(uv.y) * sin(phi);\n    float z = sign(d) * omrr;\n    return vec3(x,y,z);\n}\n\n//------------------------------------------------------------------\n\n\n// signed distance function returns (approximate) signed euclidian distance to nearest object from pos\n// overestimates express as holey objects\nvec2 map( in vec3 pos )\n{\n    vec2 res = vec2(1.0f, 0.0f);\n        \n\tres = opU( res, vec2( sdSphere(    pos-vec3( 0.0, 0.0, 0.0), 2.0 ), 46.9 ) );\n    \n    vec2 rep = vec2(0.15, 0.15);\n    vec3 d = vec3(0.0, 0.0, 1.0);\n    vec3 p = vec3(0.0*rep, 0.0);\n    vec3 p0 = (p);\n    vec3 p1 = (p+d);\n    float r = 0.01;\n    \n    vec3 pp = pos + 0.5 * smoothstep(2.0, 4.0, length(pos.xz)) * vec3(0.0, 1.0, 0.0);\n    \n    pp = cartesian2Sphere(pp);\n\n    vec2 offset = vec2(N2(floor(pp.xz)), N2(floor(pp.xz + vec2(5.0, 15.0))));\n    pp += vec3(rep * offset * 0.5, 0.0);\n    pp.z -= 2.01; // push hair base out to surface of sphere\n\n    pp = opRep(pp, vec3(rep, 0.0));\n\n    res = opU( res, vec2( sdFatLine(pp, p0, p1, r, 0.0) ) );\n\n    return res;\n}\n\n// castRay returns a vec2 pair: ray time to intersection, material id\nvec3 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0; // front plane\n    float tmax = 12.0; // back plane\n   \n    float t = tmin;\n    float m = -1.0; // material\n    \n    const int MAX_STEPS = 256; // may need higher threshold, due to heavily non-linear, non-uniform warpa\n    const float step = 1.f; // may need partial step (< 1.f), due to non-linear, non-uniform warps\n    \n    int i;\n    for( i=0; i<MAX_STEPS; i++ ) \n    {\n\t    float precis = 0.00005*t;\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += step * res.x; \n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec3( t, m, i );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// sample a tet at the intersection point to calculate a normal\n// TODO: we may be able to remove one eval of map() here by passing in the last one from the ray cast\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec3 res = castRay(ro,rd);\n    //return vec3(res.z / 256.);// visualize # iters\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        if( m<1.5 ) {\n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.1 + 0.1*f*vec3(1.0);\n        }\n\n        // lighitng        \n        float occ = 1.0;//calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.2, 0.7, -0.3) );\n        vec3  lig2 = normalize( vec3(0.2, 0.7, 0.3) );\n\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float dif2 = clamp( dot( nor, lig2 ), 0.0, 1.0 );\n\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= 0.8 + 0.2 * softshadow( pos, lig, 0.02, 2.5 );\n        dom *= 0.8 + 0.2 * softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 3.00*dif*vec3(1.00,0.80,0.55);\n        lin += 3.00*dif2*vec3(1.00,0.80,0.55);\n\n\t\tlin += 1.00*spe*vec3(1.00,0.90,0.70)*dif;\n        //lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;\n        //lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;\n        //lin += 0.50*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = iTime;\n    const float camDist = 4.0;\n    \n    vec3 tot = vec3(0.0);\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n\n\t\t// camera\t\n        vec3 ro = vec3( -0.0+camDist*cos(0.1*time + 6.0*mo.x), \n                       0.0 + 3.0*mo.y, 0.0 + camDist*sin(0.1*time + 6.0*mo.x) );\n        vec3 ta = vec3( -0.0, -0.0, 0.0 );\n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta, 0.0 );\n        // ray direction\n        vec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n        // render\t\n        vec3 col = render( ro, rd );\n\n\t\t// gamma\n        col = 2.0 * col / (col + 1.0);\n        //col = pow( col, vec3(0.4545) );\n\n        tot += col;\n    }\n    tot /= float(AA*AA);\n    \n    fragColor = vec4( tot, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}