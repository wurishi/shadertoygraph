{"ver":"0.1","info":{"id":"XlSBWR","date":"1515191630","viewed":144,"name":"4/2018","username":"rimina","description":"This shader is part of my daily shader challenge. It is pretty much the same as yesterday's shader (3/2018). I continued from it and figured out things that were wrong. Also added some shading & fog.\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sierpinski","dailyshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 64\n#define FAR 100.0\n#define EPSILON 0.001\n\nfloat sgn(float x) {\n\treturn (x<0.0)?-1.0:1.0;\n}\n\nfloat dist(vec3 p){\n    //return length(p)-1.0;\n    vec3 pp = p;\n    float scale = 2.0;\n    float offset = 8.0;\n    \n    int n = 0;\n    for(int i= 0; i < 20; ++i){\n        ++n;\n        if(pp.x+pp.y < 0.0){\n            pp.xy = -pp.yx;\n        }\n        if(pp.x+pp.z < 0.0){\n            pp.xz = -pp.zx;\n        }\n        if(pp.y+pp.z < 0.0){\n            pp.zy = -pp.yz;\n        }\n        pp = pp*scale-offset*(scale-1.0);\n        \n    }\n    \n    return length(pp)*pow(scale, -float(n));\n}\n\nvec3 normals(vec3 p){\n    vec3 eps = vec3(0.1, 0.0, 0.0);\n    return normalize(vec3(\n        dist(p+eps.xyy)-dist(p-eps.xyy),\n        dist(p+eps.yxy)-dist(p-eps.yxy),\n        dist(p+eps.yyx)-dist(p-eps.yyx)\n    ));\n}\n\n//Ambien occlusion & shadow coeffience function modified from\n//las's (Mercury) and dechipher's (YUP) methods from pouet raymarching thread\n//PRAMETERS:\n//  p = position,\n//  n = normals (ao) or unit vector of light direction (shadow)\n//  k = constant\n\nfloat ambientOcclusion(vec3 p, vec3 n, float k){\n    float s = sgn(k);\n    float o = s*.5+.5;\n    for(float i = 0.; i < 6.; ++i){\n        o -= (i*k - dist(p+n*i*k*s))/exp2(i);\n    }\n    return max(min(o, 1.), 0.);\n}\n\nvec3 color(vec3 p, vec3 ld){\n    vec3 n = normals(p);\n   \tvec3 col = ambientOcclusion(p, n, 0.5)*vec3(0.6, 0.3, 0.6)+vec3(0.5, 0.3, 0.8);\n    \n    return ambientOcclusion(p, ld, 0.25)*col;\n}\n\nvec3 fog(vec3 col, vec3 p, vec3 ro){\n    float dist = length(p-ro);\n\tfloat fogAmount = 1.0 - exp( -dist*0.07);\n    return mix(col, vec3(1.0), fogAmount);\n}\n\n\n\nvec3 march(vec3 ro, vec3 rd){\n    \n    float t = 0.0;\n    vec3 p = ro;\n    for(int i = 0; i < STEPS; ++i){\n        float d = dist(p);\n        t += d;\n        p += rd*d;\n        \n        if(d < EPSILON || t > FAR){\n            break;\n        }\n    }\n    \n    vec3 col = vec3(0.0);\n    if(t <= FAR){\n       col = color(p, vec3(0.0, -1.0, 0.0));\n    }\n    return fog(col, p, ro);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    q = -1.0+2.0*q;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(cos(iTime*0.25)*9.0, 1.0, sin(iTime*0.25)*9.0);\n    vec3 rt = vec3(0.0, 0.0, 0.0);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    \n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, up));\n    vec3 y = normalize(cross(x,z));\n    \n    vec3 rd = mat3(x,y,z)*vec3(q.xy, radians(50.0));\n    rd = normalize(rd);\n    \n    vec3 col = march(ro, rd);\n    col = pow(col, 1.0/vec3(2.2));\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}