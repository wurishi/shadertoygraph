{"ver":"0.1","info":{"id":"tsScWy","date":"1589633878","viewed":90,"name":"Deranged Cube","username":"ChainComplex","description":"Some glitch aesthetics. ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["pretenditwasplanned"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"# define TRACING 0\n\n# define t_max 90.\n# if TRACING\n# define MAX_STEPS 10000\n# else\n# define MAX_STEPS 300\n# endif\n\n# define tile 4.\n\nfloat sdf(in vec3 q){\n    float dot23_to_dot45 = mix(.25, .45, abs(sin(iTime/3.31 + 1.)));\n    float dot18_to_dot45 = mix(0.18, .45, abs(sin(iTime/2.31 - 4.5)));\n    float dist = length(1.1*q*sin(1./max(vec3(dot18_to_dot45), abs(q)))) - dot23_to_dot45*length(q); \n    return 0.75*abs(dist);\n}\n\nvec3 normal( in vec3 pos)\n{\n    vec2 e = vec2(0.0001,0.0);\n    pos = (mod(pos + tile, 2.*tile) - tile);\n    return normalize( vec3( \n        sdf( pos + e.xyy) - sdf( pos - e.xyy),\n\t\tsdf( pos + e.yxy) - sdf( pos - e.yxy),\n\t\tsdf( pos + e.yyx) - sdf( pos - e.yyx) ) ); \n}\n\nvoid rot(in float a, inout vec2 p){\n    float s = sin(a), c = cos(a); p = vec2(c*p.x + s*p.y, -s*p.x + c*p.y);\n}\n\nfloat castRay(in vec3 pos, in vec3 rd, out int num_steps){    \n    float t = 0.;\n    float h = 0.;\n    float rt = 0.005;\n    int i = 0;\n    for (; i < MAX_STEPS && t < t_max; i++){\n        pos = ((mod(pos + tile, 2.*tile)) - tile);\n        h = sdf(pos);\n        if (h<0.01) break;\n\t   #if TRACING\n        t += rt;\n        pos += rt*rd;\n\t   #else\n        t += h;\n        pos += h*rd;\n\t   #endif        \n    }\n    num_steps = i;\n    //if (i == MAX_STEPS) return -1.;\n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){   \n    \n    vec2 uv = fragCoord/iResolution.xy;\n \tuv -= vec2(0.5);\n \tuv.x *= iResolution.x / iResolution.y; \n    vec2 p = uv;\n    vec3 ro = vec3(p, 1.);\n  \tvec2 m = iMouse.xy/iResolution.xy - 0.5; \t\n \trot(2.5*m.y, ro.yz);\n \trot(5.*m.x, ro.xz);\n \tro.z -= 1.;\n \tvec3 rd = normalize(ro - vec3(0., 0., -1.));\n \tro += max(mod(iTime, tile * 10.) - tile * 5., 0.) * vec3(.8, 1.2, .8);\n    //ro.z += 3.*iTime*min(tile, 1.);\n \tro.z -= 5.5;\n    ro.y += 2.5;\n    \n    int ns;\n    float d = castRay(ro, rd, ns);\n    vec3 col = vec3(0.);\n    if (d > t_max - .01) {\n        col += .1*vec3(1., 1., 0.)*dot(normal(ro + d*rd), normalize(vec3(0.8, 0.6, -0.1)))* (0.5 + sin(5.*length(uv)));\n        col += vec3(sin(d))/3. ; \n        //col = vec3(0.);\n    }\n    else{\n        col += vec3(sin(d))/4.;\n        \n        if(ns < MAX_STEPS){\n            vec3 n = normal(ro + d*rd);\n            col += abs(0.2*(2.*n.z + n.y));\n            col += 1.*vec3(0.7, 0., 0.)*(dot(normal(ro + d*rd), normalize(vec3(0.8, 0.6, -0.1))));\n    \t}  \n    \telse \n        \tcol = vec3(sin(d))/4.; \n    }\n    fragColor = vec4(col, 1.);\n} ","name":"Image","description":"","type":"image"}]}