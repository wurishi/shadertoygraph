{"ver":"0.1","info":{"id":"tstfDs","date":"1606335778","viewed":235,"name":"Non-RGB chromatic aberration","username":"noby","description":"Simple example.","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["post","fx","chromab"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord){\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord){\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Hue function from netgrind(?)\nvec3 hue(vec3 color, float shift){\n    const vec3  kRGBToYPrime = vec3 (0.299, 0.587, 0.114);\n    const vec3  kRGBToI     = vec3 (0.596, -0.275, -0.321);\n    const vec3  kRGBToQ     = vec3 (0.212, -0.523, 0.311);\n    const vec3  kYIQToR   = vec3 (1.0, 0.956, 0.621);\n    const vec3  kYIQToG   = vec3 (1.0, -0.272, -0.647);\n    const vec3  kYIQToB   = vec3 (1.0, -1.107, 1.704);\n    float   YPrime  = dot (color, kRGBToYPrime);\n    float   I      = dot (color, kRGBToI);\n    float   Q      = dot (color, kRGBToQ);\n    float   hue     = atan (Q, I);\n    float   chroma  = sqrt (I * I + Q * Q);\n    hue += shift;\n    Q = chroma * sin (hue);\n    I = chroma * cos (hue);\n    vec3    yIQ   = vec3 (YPrime, I, Q);\n    color.r = dot (yIQ, kYIQToR);\n    color.g = dot (yIQ, kYIQToG);\n    color.b = dot (yIQ, kYIQToB);\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    #ifdef ANIMATE\n    fragColor = vec4(hue(texelFetch(iChannel0, ivec2(fragCoord), 0).rgb, iTime), 1.0);\n    #else\n    fragColor = vec4(hue(texelFetch(iChannel0, ivec2(fragCoord), 0).rgb, HueShiftScalar), 1.0);\n    #endif\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const float Gamma = 1.0;\n\nconst int N = 10;\nvec3 chromab(sampler2D t, vec2 UV){\n\tvec2 uv = 1.0 - 2.0 * UV;\n\tvec3 c = vec3(0);\n\tfloat rf = 1.0;\n\tfloat gf = 1.0;\n    float bf = 1.0;\n\tfloat f = 1.0/float(N);\n\tfor(int i = 0; i < N; ++i){\n\t\tc.r += f*pow(texture(t, 0.5-0.5*(uv*rf) ).r, Gamma);\n\t\tc.g += f*pow(texture(t, 0.5-0.5*(uv*gf) ).g, Gamma);\n\t\tc.b += f*pow(texture(t, 0.5-0.5*(uv*bf) ).b, Gamma);\n\t\tbf *= 0.98;\n\t\tgf *= 0.99;\n        rf *= 0.995;\n\t}\n\treturn c;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = chromab(iChannel0, uv);\n    fragColor.rgb = pow(col, vec3(1.0/Gamma));\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// Hue function from netgrind(?)\nvec3 hue(vec3 color, float shift){\n    const vec3  kRGBToYPrime = vec3 (0.299, 0.587, 0.114);\n    const vec3  kRGBToI     = vec3 (0.596, -0.275, -0.321);\n    const vec3  kRGBToQ     = vec3 (0.212, -0.523, 0.311);\n    const vec3  kYIQToR   = vec3 (1.0, 0.956, 0.621);\n    const vec3  kYIQToG   = vec3 (1.0, -0.272, -0.647);\n    const vec3  kYIQToB   = vec3 (1.0, -1.107, 1.704);\n    float   YPrime  = dot (color, kRGBToYPrime);\n    float   I      = dot (color, kRGBToI);\n    float   Q      = dot (color, kRGBToQ);\n    float   hue     = atan (Q, I);\n    float   chroma  = sqrt (I * I + Q * Q);\n    hue += shift;\n    Q = chroma * sin (hue);\n    I = chroma * cos (hue);\n    vec3    yIQ   = vec3 (YPrime, I, Q);\n    color.r = dot (yIQ, kYIQToR);\n    color.g = dot (yIQ, kYIQToG);\n    color.b = dot (yIQ, kYIQToB);\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    #ifdef ANIMATE\n    fragColor = vec4(hue(texelFetch(iChannel0, ivec2(fragCoord), 0).rgb, -iTime), 1.0);\n    #else\n    fragColor = vec4(hue(texelFetch(iChannel0, ivec2(fragCoord), 0).rgb, -HueShiftScalar), 1.0);\n    #endif\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define ANIMATE\n\nconst float HueShiftScalar = 0.6;\n","name":"Common","description":"","type":"common"}]}