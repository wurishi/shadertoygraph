{"ver":"0.1","info":{"id":"3djcWG","date":"1622373923","viewed":129,"name":"dof 2D","username":"pixel","description":"depth of field shader (WIP)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["dof","field","depth","of"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float RAD = 0.0174533;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // base textures\n    vec3 tex1 = texture(iChannel0, uv).rgb;\n    vec3 tex2 = texture(iChannel1, uv).rgb;\n\n    // settings\n    float passes = 16.0;\n    float angles = 32.0;\n    float scatter = 0.331; // unused\n    float amount = length(tex2.rgb) * 0.05; // using tex color as amount\n    \n    // blur\n    vec3 blur = vec3(tex1);\n    for (float ii = 0.0; ii < passes; ii+= 1.0)\n    {\n        float theta = ii / passes;\n        for (float i = 0.0; i < angles; i+=1.0)\n        {\n            float phi = (i / (angles)) * RAD * 360.0;\n            float xx = uv.x + sin(phi) * amount * theta;\n            float yy = uv.y + cos(phi) * amount * theta;\n            //if (xx > 0.0 && yy > 0.0 && xx < 1.0 && yy < 1.0)\n            //{\n                vec2 uvBlur = vec2(xx, yy);\n                vec3 texBlur = texture(iChannel0, uvBlur).rgb;\n                blur += texBlur;\n            //}\n        }\n    }\n    blur = blur / vec3(passes*angles + 1.0);\n\n    // Output to screen\n    fragColor = vec4(blur,1.0);\n}","name":"Image","description":"","type":"image"}]}