{"ver":"0.1","info":{"id":"4Xc3Rn","date":"1715958292","viewed":153,"name":"Beverly Hills Cop - Axel F","username":"jorge2017a2","description":"Beverly Hills Cop - Axel F---https://www.youtube.com/watch?v=PPkcFUImo40","likes":17,"published":1,"flags":8,"usePreview":0,"tags":["2d","mickey","beverlyhillscopaxelf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a2\n//17-may-2024\n//Beverly Hills Cop - Axel F\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n\n#define S(d,b) smoothstep(antialiasing(1.5),0. , d - (b) )\n#define S2(d,b) smoothstep(8.0*antialiasing(1.5),0.,d - (b) )\n#define S3(d,b) smoothstep(1.0/antialiasing(0.5),0. , d - (b) )\n\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\n\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n#define POLY(N) (in vec2 p, in vec2[N] v) {const int n=v.length();float d=dot(p-v[0],p-v[0]);float s=1.;for(int i=0,j=n-1;i<n;j=i,i++){vec2 e=v[j]-v[i];vec2 w=p-v[i];vec2 b=w-e*clamp(dot(w,e)/dot(e,e),0.,1.);d=min(d,dot(b,b));bvec3 cond=bvec3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);if(all(cond)||all(not(cond))) s=-s;}return s*sqrt(d);}\n\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\n\nfloat Sdf_I(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat Sdf_U(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat Sdf_D(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\n\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nvec3 DrawFigSolo(vec3 pColObj, vec3 colOut, float distObj ) \n{  colOut = mix(colOut,pColObj ,S( distObj,0.0)); return colOut; }\n\n\nvec3 DFB(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S3( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0),S3(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\n\n\nvec4 cabeza(vec2 p, vec3 colout)\n{\nvec2 A,B, med;\nfloat dfin;\nfloat d1, r1;\n\n\nA=vec2(0.69589,0.38356);\nr1=0.34247;\n d1=sdCircle(p-A,r1);\n\n\nA=vec2(0.69863,0.20274);\nmed=vec2(0.36986,0.1726);\nfloat d2=sdEllipse(p-A,med);\n\n\nA=vec2(0.61096,0.23014);\nmed=vec2(0.29589,0.1726);\nfloat d3=sdEllipse(p-A,med);\n\n\nA=vec2(0.78082,0.23014);\nmed=vec2(0.29589,0.1726);\nfloat d4=sdEllipse(p-A,med);\n\n\nA=vec2(0.69589,0.05205);\nr1=0.11233;\nfloat d5=sdCircle(p-A,r1);\n\n\n\ndfin=Sdf_U(d1,d2);\ndfin=Sdf_U(dfin,d3);\ndfin=Sdf_U(dfin,d4);\ndfin=Sdf_U(dfin,d5);\nvec3 col1=vec3(255., 214.0, 191.0)/255.0;\n//colout= DFB(vec3(1.0), colout, dfin);\ncolout= DFB(col1, colout, dfin);\n\nreturn vec4(colout,dfin);\n}\n\nvec3 pelo(vec2 p, vec3 colout, float dist)\n{\n    \n    \nvec2 A,B, med;\nfloat dfin;\nfloat d1, r1 ;\n\nA=vec2(0.34521,0.7726);\nr1=0.18082;\n d1=sdCircle(p-A,r1);\n\n\nA=vec2(1.03836,0.77534);\nr1=0.18082;\nfloat d2=sdCircle(p-A,r1);\n\n\nA=vec2(0.69589,0.37808);\nr1=0.34521;\nfloat d3=sdCircle(p-A,r1);\n\n\nA=vec2(0.94795,-0.01918);\nr1=0.34521;\nfloat d4=sdCircle(p-A,r1);\n\n\nA=vec2(0.43836,-0.01918);\nr1=0.34521;\nfloat d5=sdCircle(p-A,r1);\n\n\nA=vec2(0.60822,0.46575);\nmed=vec2(0.14247,0.2274);\nfloat d6=sdEllipse(p-A,med);\n\n\nA=vec2(0.7863,0.46575);\nmed=vec2(0.14247,0.2274);\nfloat d7=sdEllipse(p-A,med);\n\n\nA=vec2(0.69863,0.24658);\nr1=0.07671;\nfloat d8=sdCircle(p-A,r1);\n\n\ndfin=Sdf_U(d1,d3);\ndfin=Sdf_U(dfin,d2);\ndfin=Sdf_D(dfin,d4);\ndfin=Sdf_D(dfin,d5);\ndfin=Sdf_D(dfin,d6);\ndfin=Sdf_D(dfin,d7);\ndfin=Sdf_D(dfin,d8);\ncolout= DFB(vec3(0.0), colout, dfin);\n    \nreturn colout;\n}\n\n\nvec3 ojo(vec2 p, vec3 colout)\n{\n    \n    \nvec2 A,B, med;\nfloat dfin;\nfloat d1, r1 ;\n\nA=vec2(0.60822,0.47123);\nmed=vec2(0.14247,0.2274);\n d1=sdEllipse(p-A,med);\n\n\nA=vec2(0.7863,0.47123);\nmed=vec2(0.14247,0.2274);\nfloat d2=sdEllipse(p-A,med);\n\n\n\n//linea gesto nariz\nA=vec2(0.69315,0.20822);\nmed=vec2(0.16712,0.11507);\nfloat d2a=sdEllipse(p-A,med);\n\n\n\ndfin=Sdf_U(d1,d2);\ndfin=Sdf_D(dfin,d2a);\n//colout= DFB(vec3(1.0), colout, dfin);\nvec3 col1=vec3(255., 214.0, 191.0)/255.0;\n//colout= DFB(col1, colout, dfin);\ncolout= DrawFigSolo(col1, colout, dfin);\n\n\n\nA=vec2(0.60822,0.43288);\nmed=vec2(0.05753,0.12055);\nfloat d3=sdEllipse(p-A,med);\ncolout= DFB(vec3(1.0), colout, d3);\n\nA=vec2(0.7863,0.43288);\nmed=vec2(0.05753,0.12055);\nfloat d4=sdEllipse(p-A,med);\ncolout= DFB(vec3(1.0), colout, d4);\n\nA=vec2(0.60822,0.37534);\nmed=vec2(0.03014,0.06027);\nfloat d5=sdEllipse(p-A,med);\ncolout= DFB(vec3(0.0), colout, d5);\n\nA=vec2(0.7863,0.37534);\nmed=vec2(0.03014,0.06027);\nfloat d6=sdEllipse(p-A,med);\ncolout= DFB(vec3(0.0), colout, d6);\n\n    return colout;\n    \n}\n\n\nvec3 nariz(vec2 p, vec3 colout)\n{\n    \nvec2 A,B, med;\nfloat dfin;\nfloat d1, r1 ;\nvec2 p0=p;\n\n//linea\nA=vec2(0.69863,0.2274);\nmed=vec2(0.11233,0.06027);\n\n\nd1=sdEllipse(p-A,med);\ncolout= DFB(vec3(0.0), colout, d1);\n\n\n//linea gesto nariz\nA=vec2(0.69315,0.20822);\nmed=vec2(0.16712,0.11507);\nif(p.y>0.27  )\n{\nfloat d2=sdEllipse(p-A,med);\nd2=abs(d2)-0.001;\ncolout= DFB(vec3(0.0), colout, d2);\n}\n\n    return colout;\n}\n\n\nvec3 boca(vec2 p, vec3 colout)\n{\n\nvec2 A,B, med;\nfloat dfin;\nfloat d1, r1 ;\nvec2 p0=p;\n\n//gesto sonrisa centro\nA=vec2(0.69315,0.20274);\nmed=vec2(0.26301,0.11507);\n d1=sdEllipse(p-A,med);\nif(p.y>-0.5 && p.y<0.65*0.25 )\n{\nfloat d1a=sdEllipse(p-A,med);\nd1a=abs(d1a)-0.001;\ncolout= DFB(vec3(0.0), colout, d1a);\n}\n\n\n//gesto der\nA=vec2(0.43562,0.15342);\nmed=vec2(0.06301,0.04384);\np.y-=0.04;\nif(p.y>0.15*0.5 && p.y<0.3*0.5 )\n{\n\nfloat d2=sdEllipse(p-A,med);\nd2=abs(d2)-0.001;\ncolout= DFB(vec3(0.0), colout, d2);\n}\n\n\n\np=p0;\n\n///gesto izq\nA=vec2(0.9589,0.15342);\nmed=vec2(0.06301,0.04384);\np.y-=0.04;\nif(p.y>0.15*0.5 && p.y<0.3*0.5 )\n{\nfloat d3=sdEllipse(p-A,med);\nd3=abs(d3)-0.001;\ncolout= DFB(vec3(0.0), colout, d3);\n}\n\np=p0;\n\nA=vec2(0.69589,0.07945);\nr1=0.08767;\nfloat d4=sdCircle(p-A,r1);\n\nA=vec2(0.67123,-0.00274);\nr1=0.04932;\nfloat d5=sdCircle(p-A,r1);\n\nA=vec2(0.72877,0.0);\nr1=0.04932;\nfloat d6=sdCircle(p-A,r1);\n\n//boca inferior\ndfin=Sdf_U(d6,d5);\ndfin=Sdf_I(d4,dfin);\ndfin=Sdf_D(dfin,d1);\nd4=Sdf_D(d4,d1);\ncolout= DFB(vec3(0.0), colout, d4);\ncolout= DFB(vec3(1.0,0.0,0.0), colout, dfin);\n\n\nreturn colout;\n}\n\nvec3 mickey(vec2 p, vec3 colout)\n{\n    vec4 tmp;\n    float dist;\n    \n    tmp= cabeza(p,colout);\n    colout=tmp.xyz; \n    dist=tmp.w;\n    \n    colout=pelo(p, colout,dist);\n    colout=ojo(p,colout);\n    colout= nariz(p,colout);\n    colout=boca(p,colout);\n    \n    return colout;\n}\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   vec2 uv = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n    uv-=vec2(-0.8,-0.4);\n    float esc=1.0;\n    uv*=esc;\n    vec2 uv0=uv;\n    vec3 col;\n    if(uv.y<0.18)\n    {\n     //col=vec3(0.0);\n     uv.y-=4.0;\n     uv.x+=3.0;\n     col = 0.5 + 0.5*cos(iTime+floor(uv.xyx)+vec3(0,2,4));\n    } \n    else\n     col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    uv=uv0;\n    \n    //col= mickey(uv,col);\n    uv.x=mod(uv.x-iTime,2.0);\n    col= mickey(uv,col);\n    col=pow(col,  vec3(0.554545));\n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//iq\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\n\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\n\n\n\n\n//Quadratic Bezier - exact   (https://www.shadertoy.com/view/MlKcDD)\n\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"//Referencia de sonido \n//IQ,AeroShark333, Gaz ,etc. muchos :)\n///Beverly Hills Cop - Axel F - Piano Tutorial with Sheet Music.\n//https://www.youtube.com/watch?v=PPkcFUImo40\n\n\n#define PI acos(-1.)\n#define PIH (PI*.5)\n#define TAU (PI*2.)\n#define TWO_PI 6.2831\n\n\nconst float ttotal=30.0; \nconst float pi = 3.1415927;\nconst float tau = 6.283185;\nfloat ms;\nfloat mresp;\nfloat mtime;\nfloat mtempo;\n\n\n//https://www.shadertoy.com/view/ss3cDN\n// Created by AeroShark333\nfloat squareWave750( float f, float x)\n{ return (min(1.0, floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 3.0 ))); }\n\nfloat squareWave500( float f, float x)\n{ return (floor( 2.0 * floor( f * x ) - floor( 2.0 * f * x ) + 1.0 )); }\n\nfloat squareWave250( float f, float x)\n{ return (max(0.0, floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 1.0 ))); }\n\nvec2 squareWave250( vec2 f, float x)\n{ return (max(vec2(0.0), floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 1.0 ))); }\n\nfloat triangleWave500( float q, float x)\n{ float f = 1.0-2.0*abs(0.5-mod(q*x,1.0));  return (f); }\n\nfloat triangleWave250( float q, float x)\n{ float f = max(0.0,1.0-2.0*abs(0.5-2.0*mod(q*x,1.0))); return (f); }\n\nfloat convertBassFreq (float f)\n{ return (f/2.0); }\n\nfloat  sawf(float t , float freq)\n{  return fract(t * freq) - 0.5; }\n\nfloat wave1( float x, float dxdt, in vec2 v, float t , float w)\n{   float f2;\n    float sampleX=0.0;\n    float f=w;\n    sampleX =squareWave250(f,t)*triangleWave250(f,t) *exp(-2.5*t);\n    f2=(sampleX+sawf(t,f));\n    float fx=f2*1.5;\n    return fx;\n}\n\n\nfloat D3(float ton, float tid, float toff)\n{   vec3 n3;\n    float resp;\n    n3=vec3(ton,tid, toff);\n    \n    \n    if(ms>=ton && ms<=toff)\n    {      // lower one octave\n      n3.y -=12.; //12 notas\n      //n3.y +=12.; //12 notas\n\n      // compute note frequency and time  \n      float f = 440.0*pow( 2.0, float(n3.y-69.)/12.0 );\n      float t = mtime - float(n3.x)/mtempo;\n      if( n3.x==0.0 ) return 0.0;\n\n      // prepare wave parameters\n      float w = tau*f;\n      \n      float dwdt = w/iSampleRate; // derivative\n\n      // mix between bandlimited and raw saw waves  \n      vec2 v = smoothstep(-0.2,0.2,sin(t*vec2(1.0,0.5)) );\n      // build instrument\n\n      float f1,y;\n      f1=wave1(w*t,1.00*dwdt,v,t,w);\n      float wf  = 0.4*f1;\n      y=f1*wf;\n      float offset=n3.x;\n       y*=exp(-1.0/n3.z * (t -offset) );\n        \n       mresp+=y;\n    }\n    \n}\n\n\n\nfloat SoundIq(float time)\n{ ///referencia de notas musicales... iq \n  time = mod( time+1.0, ttotal);\n // tune\n  float tempo = 0.5;\n  float s = time*tempo;\n vec3 n3=vec3(0.0);\n \n //variables globales\n ms=s;\n mresp=0.0;\n mtime=time;\n mtempo=tempo;\n\n\nD3(0.000,53.0,0.250); D3(0.250,56.0,0.438); D3(0.438,53.0,0.563); D3(0.563,53.0,0.625); D3(0.625,56.0,0.750); D3(0.750,53.0,0.875);\n D3(0.875,51.0,1.000); D3(1.000,53.0,1.250); D3(1.250,60.0,1.438); D3(1.438,53.0,1.563); D3(1.563,53.0,1.625); D3(1.625,61.0,1.750);\n D3(1.750,60.0,1.875); D3(1.875,56.0,2.000); D3(2.000,53.0,2.125); D3(2.125,60.0,2.250); D3(2.250,65.0,2.375); D3(2.375,53.0,2.438);\n D3(2.438,51.0,2.563); D3(2.563,51.0,2.625); D3(2.625,48.0,2.750); D3(2.750,55.0,2.875); D3(2.875,53.0,3.625); D3(4.125,53.0,4.375);\n D3(4.375,56.0,4.563); D3(4.563,53.0,4.688); D3(4.688,53.0,4.750); D3(4.750,58.0,4.875); D3(4.875,53.0,5.000); D3(5.000,51.0,5.125);\n D3(5.125,53.0,5.375); D3(5.375,60.0,5.563); D3(5.563,53.0,5.688); D3(5.688,53.0,5.750); D3(5.750,61.0,5.875); D3(5.875,60.0,6.000);\n D3(6.000,56.0,6.125); D3(6.125,53.0,6.250); D3(6.250,60.0,6.375); D3(6.375,65.0,6.500); D3(6.500,53.0,6.563); D3(6.563,51.0,6.688);\n D3(6.688,51.0,6.750); D3(6.750,48.0,6.875); D3(6.875,55.0,7.000); D3(7.000,53.0,7.750); D3(8.250,29.0,8.500); D3(8.500,41.0,8.688);\n D3(8.688,27.0,8.813); D3(8.813,39.0,8.875); D3(8.875,24.0,9.000); D3(9.000,36.0,9.125); D3(9.125,27.0,9.250); D3(9.250,29.0,9.500);\n D3(9.500,41.0,9.688); D3(9.875,24.0,9.938); D3(9.938,36.0,10.063); D3(10.063,39.0,10.188); D3(10.188,41.0,10.313); D3(10.313,25.0,10.563);\n D3(10.563,37.0,10.750); D3(10.750,27.0,10.875); D3(10.875,39.0,10.938); D3(10.938,24.0,11.063); D3(11.063,36.0,11.188); D3(11.188,27.0,11.313);\n D3(11.313,29.0,11.563); D3(11.938,41.0,12.000); D3(12.000,36.0,12.125); D3(12.125,34.0,12.250); D3(12.250,32.0,12.375); D3(12.375,29.0,12.625);\n D3(12.688,41.0,12.875); D3(12.875,27.0,13.000); D3(13.000,39.0,13.063); D3(13.063,24.0,13.188); D3(13.250,36.0,13.375); D3(13.375,27.0,13.500);\n D3(13.500,29.0,13.750); D3(13.750,41.0,13.938);\n\n \n  return mresp;\n}\n\nvec2 mainSound( in int samp, float time )\n{ float t1=mod(time, ttotal);\n  float y= SoundIq(t1)*0.5;\n  return vec2(y);\n}   \n\n","name":"Sound","description":"","type":"sound"}]}