{"ver":"0.1","info":{"id":"tt2BRK","date":"1599387471","viewed":401,"name":"easy adaptive sampling : Day107","username":"FabriceNeyret2","description":"Application of [url]https://shadertoy.com/view/3ljfRG[/url]\noversample only near the drawing. Left: none, for reference.\nMouse.x : ref separator  \nSPACE: show where oversampling is done ( B&W area - colors where LOD#0 )","likes":12,"published":3,"flags":48,"usePreview":0,"tags":["antialiasing","sampling","optimization","adaptive","gpmipmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// variant of https://shadertoy.com/view/3l2BzV\n// variant of https://shadertoy.com/view/WtjBzV\n// adapted from https://shadertoy.com/view/3ljfRG\n\n#define N 5      // pixel oversampling NxN ( only where necessary )\n#define eps 1e-2 // similarity threshold, is case of continuous mask\n\n//#define T(U,l)          texelFetch(iChannel0, ivec2(U)>>l, l)\n  #define T(U,l)          textureLod(iChannel0, (U)/R, float(l-1) )\n  #define keyToggle(a)  ( texelFetch(iChannel3,ivec2(a,2),0).x > 0.)\n\n\nvoid mainImage(out vec4 O, vec2 u) {\n    O -= O;\n    vec2 U = ( u - R/2. ) / R.y;\n    float n = float(N),\n          m = T( u, 3 ).w,             // check neighborhood. Here: LOD #2 of mask\n          s = iMouse.z>0. ? iMouse.x : R.x/2.;\n\n    if ( u.x > s\n      // && m !=0. && m!= 1.) {        // neighborhood does not agree\n         && abs(m-T(u,0).w) > eps ) {  // why ? otherwise, inside don't work in fullscreen\n // if ( true ) {                      // for bench: always oversample\n        for (int k=0; k<N*N; k++) {    // --- oversampling\n            vec2 D = ( vec2(k%N,k/N) - float(N-1)/2. ) / n; // subpixel\n            O += f( U +  D/R.y , iTime );\n        }\n        O /= n*n;\n    }\n    else                               // LOD#0 is ok\n        O = T( u, 0 ),\n        O = keyToggle(32)              // SPACE: show red/blue where not oversampled\n        ? O.w == 1. ? O+vec4(1,0,0,1) : O+vec4(0,0,1,1)\n        : O;\n      \n    if ( abs(u.x-s) < 1. ) O = vec4(1,0,0,1); // red separator\n    O = pow( O, vec4(1./2.2) );        // to sRGB\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// --- custom function or image or render\n\n#define R  iResolution.xy\n\n// --- hexamaze https://www.shadertoy.com/view/ll2cRR\n\n// from adaptation of Jeyko Day107 https://www.shadertoy.com/view/WdXfRs\nfloat E(float p) {\n    return   p < 0.  ? 0.\n           : p > .5  ? 1.\n           : p > .25 ? p = 1.-p-p , 1. - 2.*p*p\n           :           8.*p*p; \n}\n\n#define S(v) smoothstep(0.,.5/360., .0015 - length(v*z) )\n\nvec4 f( vec2 U , float T )\n{\n    vec2 p;\n\n    float t = mod(.8*T, 3.5), r=1.57, x = U.x, z,m, i = 0.,\n          A = E(t), B = E(t-1.), C = E(t-2.),\n          b = r + .1*(A-C);\n    \n    U *= mat2( cos( r*( A+C + vec4(0,-1,1,0) ) ))\n      * ( 1. - dot(U,U)*.05 );   \n    U.x += .2* (A -B-B + C);\n    \n  //vec3 p = vec3(U,1) / dot(U,U);   \n    z = dot(U,U); p = U/z;\n    p.x -= sin( r* (A -B-B -C) ) *5.9;\n    \n    for(; i < 20.; i++) {\n        p *= m = (2. - i/20. ) / clamp( dot(p,p), .1, 20. );\n        z /= m;\n        p = abs( mod(p.yx - b, b+b)  - b );\n        if(i == 2.) p.x -= 1.1 + ( B+C - pow(A,.6)*2. ) /4.; \n    }\n    \n    t *= 1.8;\n    vec3 O =  S( p.x ) * vec3(1.9,.9,.6)   \n            + S( min(p.y, p.x) )\n            * pow( abs( sin( ( U.x + sin( (U.y-U.x)/.1 - t) ) /1.8) ), 6.)\n            * max( 2.* sin( vec3(8,8,5) + sin(x + t) ) , 0. );\n    return vec4( O, step(.1,length(O) ) );\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// --- evaluate the function everywhere at pixel resolution\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec2 U = ( u - R/2. ) / R.y;\n    O = f(U, iTime);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}