{"ver":"0.1","info":{"id":"Wl33Ds","date":"1577910894","viewed":530,"name":"glitchfire","username":"lor","description":"A music visualizer with a pretty satisfying ratio of coolness to lines of code!","likes":11,"published":1,"flags":96,"usePreview":0,"tags":["2d","music","audio","visualizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0,uv);\n    fragColor *= 1.0 - min(min(fragColor.r, fragColor.g), min(1.0, fragColor.b));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdtGzn","filepath":"https://soundcloud.com/isaacdunbar/onion-boy","previewfilepath":"https://soundcloud.com/isaacdunbar/onion-boy","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // Each pixel corresponds to two frequencies based on x and y coordinate, mirrored around the center\n    float freq1 = pow(abs(uv.y - 0.5) * 2.,2.);\n    float freq2 = pow(abs(uv.x - 0.5) * 2.,2.);\n    \n    // Get the amplitude of the two given frequencies\n    float sound1 = texture(iChannel0,vec2(freq1,0))[0];\n    float sound2 = texture(iChannel0,vec2(freq2,0))[0];\n    \n    // Remove the low amplitudes and increase \"contrast\"\n    sound1 = clamp((sound1 - 0.5) * 2.,0.,1.);\n    sound2 = clamp((sound2 - 0.5) * 2.,0.,1.);\n    \n    // Use the amplitudes to generate an offset vector\n    vec2 offset = (vec2(sound1-0.5,sound2-0.5)) * 0.06;\n    \n    // Get the color of the pixel from the previous frame offset by that vector\n    vec3 old = clamp(texture(iChannel1,uv+offset).xyz,0.,1.);\n\n    // Combine with the time varying pixel color\n    fragColor = vec4((old * 3. + col)/2.,1.);\n    \n    // Fade over time, faster if there's no sound on the vertical axis, and also faster near the top and bottom\n    fragColor *= (sound1 + 0.2 - freq1*0.2);\n}","name":"Buffer A","description":"","type":"buffer"}]}