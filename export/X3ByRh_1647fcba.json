{"ver":"0.1","info":{"id":"X3ByRh","date":"1726883871","viewed":16,"name":"naive tree","username":"jt","description":"Working on a fractal tree.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","raymarch","tree","lsystem"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/X3ByRh naive tree, 2024 by jt\n\n// Working on a fractal tree.\n\n// tags: tree, fractal, l-system, raymarch\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 500u\n\n#define pi 3.1415926\n#define tau (pi+pi)\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\nfloat cone( vec3 p, vec3 a, vec3 b, float r1, float r2 ) // https://iquilezles.org/articles/distfunctions/\n{\n  // sampling independent computations (only depend on shape)\n  vec3  ba = b - a;\n  float l2 = dot(ba,ba);\n  float rr = r1 - r2;\n  float a2 = l2 - rr*rr;\n  float il2 = 1.0/l2;\n\n  // sampling dependant computations\n  vec3 pa = p - a;\n  float y = dot(pa,ba);\n  float z = y - l2;\n  float x2 = dot2( pa*l2 - ba*y );\n  float y2 = y*y*l2;\n  float z2 = z*z*l2;\n\n  // single square root!\n  float k = sign(rr)*rr*rr*x2;\n  if( sign(z)*a2*z2>k ) return  sqrt(x2 + z2)        *il2 - r2;\n  if( sign(y)*a2*y2<k ) return  sqrt(x2 + y2)        *il2 - r1;\n                        return (sqrt(x2*a2*il2)+y*rr)*il2 - r1;\n}\n\nfloat line(vec3 p, vec3 a, vec3 b) // based on https://iquilezles.org/articles/distfunctions/\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n    return length(pa - ba*h);\n}\n\n#define alpha radians(135.0)\n#define beta radians(120.0)\n\nfloat branch0(vec3 p)\n{\n    //mat3 X = mat3(1,0,0,0,cos(mu),sin(mu),0,-sin(mu),cos(mu));\n    mat3 Y = mat3(cos(alpha),0,-sin(alpha),0,1,0,-sin(alpha),0,-cos(alpha));\n    mat3 Z = mat3(cos(beta),sin(beta),0,-sin(beta),cos(beta),0,0,0,1);\n    float s = 0.04;\n    vec3 c = vec3(0,0,0.5);\n    return length(p-c)-0.5;\n    return\n         min\n         (\n             min\n             (\n                 cone(p, c,c+Z*Y*vec3(0,0,0.5), s/2.0, 0.0),\n                 cone(p, c,c+Z*Z*Y*vec3(0,0,0.5), s/2.0, 0.0)\n             ),\n             min\n             (\n                 cone(p, c,c+Z*Z*Z*Y*vec3(0,0,0.5), s/2.0, 0.0),\n                 cone(p, vec3(0),c, s, s/2.0)\n             )\n         );\n}\n\nfloat branch1(vec3 p)\n{\n    //mat3 X = mat3(1,0,0,0,cos(mu),sin(mu),0,-sin(mu),cos(mu));\n    mat3 Y = mat3(cos(alpha),0,-sin(alpha),0,1,0,-sin(alpha),0,-cos(alpha));\n    mat3 Z = mat3(cos(beta),sin(beta),0,-sin(beta),cos(beta),0,0,0,1);\n    float s = 0.04;\n    vec3 c = vec3(0,0,0.5);\n    return\n         min\n         (\n             min\n             (\n                 branch0(Y*Z*(p-c)/0.5)*0.5,\n                 branch0(Y*Z*Z*(p-c)/0.5)*0.5\n             ),\n             min\n             (\n                 branch0(Y*Z*Z*Z*(p-c)/0.5)*0.5,\n                 cone(p, vec3(0),c, s, s/2.0)\n             )\n         );\n}\n\nfloat branch2(vec3 p)\n{\n    //mat3 X = mat3(1,0,0,0,cos(mu),sin(mu),0,-sin(mu),cos(mu));\n    mat3 Y = mat3(cos(alpha),0,-sin(alpha),0,1,0,-sin(alpha),0,-cos(alpha));\n    mat3 Z = mat3(cos(beta),sin(beta),0,-sin(beta),cos(beta),0,0,0,1);\n    float s = 0.04;\n    vec3 c = vec3(0,0,0.5);\n    return\n         min\n         (\n             min\n             (\n                 branch1(Y*Z*(p-c)/0.5)*0.5,\n                 branch1(Y*Z*Z*(p-c)/0.5)*0.5\n             ),\n             min\n             (\n                 branch1(Y*Z*Z*Z*(p-c)/0.5)*0.5,\n                 cone(p, vec3(0),c, s, s/2.0)\n             )\n         );\n}\n\nfloat branch3(vec3 p)\n{\n    //mat3 X = mat3(1,0,0,0,cos(mu),sin(mu),0,-sin(mu),cos(mu));\n    mat3 Y = mat3(cos(alpha),0,-sin(alpha),0,1,0,-sin(alpha),0,-cos(alpha));\n    mat3 Z = mat3(cos(beta),sin(beta),0,-sin(beta),cos(beta),0,0,0,1);\n    float s = 0.04;\n    vec3 c = vec3(0,0,0.5);\n    return\n         min\n         (\n             min\n             (\n                 branch2(Y*Z*(p-c)/0.5)*0.5,\n                 branch2(Y*Z*Z*(p-c)/0.5)*0.5\n             ),\n             min\n             (\n                 branch2(Y*Z*Z*Z*(p-c)/0.5)*0.5,\n                 cone(p, vec3(0),c, s, s/2.0)\n             )\n         );\n}\n\nvec4 map(vec3 p)\n{\n    return vec4(vec3(1),min(p.z,branch2(p)));\n    //return vec4(vec3(1),min(p.z,branch3(p)));\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h).w\n            +\n            k.yyx * map(p + k.yyx*h).w\n            +\n            k.yxy * map(p + k.yxy*h).w\n            +\n            k.xxx * map(p + k.xxx*h).w\n        );\n}\n\nvec4 trace(vec3 ro, vec3 rd, float t0, float t1) // pass on running out of iterations\n{\n    // NOTE: Limited number of iterations to avoid stalling\n    //       when ray passes closely (just above EPSILON)\n    //       in parallel to a surface.\n    uint i;\n    vec4 h = vec4(0);\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        h = map(ro + rd * t);\n        if(h.w < EPSILON)\n            return vec4(h.xyz,t);\n        t += h.w;\n    }\n\n    return vec4(h.xyz,t); // stop on running out of iterations\n    //return vec4(0,0,0,t1); // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).w < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).w;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).w;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-2.5);\n    vec3 rd = normalize(vec3(I.xy, 2.5)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    ro.z += 0.5;\n\n    //vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 lightdir = normalize(vec3(2.0,1.0, 3.0));\n\n    vec4 result = trace(ro, rd, 0.0, DIST_MAX);\n    vec3 color = result.xyz;\n    float dist = result.w;\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n\n        color = n * 0.5 + 0.5;\n\n        vec3 ambient = vec3(0.05);\n        float brightness = max(dot(lightdir, n), 0.0) * 2.0;\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, 25.0);\n        color *= (ambient * calcAO(dst, n)) + brightness;\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        vec3 fog_color = vec3(0);\n        color = mix(fog_color, vec3(color), exp(-pow(dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        color *= 0.0;\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    color = sqrt(color); // approximate gamma\n\n    //color += hash32(I*123.0)/255.0; // dither to remove banding in the background\n\n    o = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}