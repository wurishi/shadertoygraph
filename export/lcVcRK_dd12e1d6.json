{"ver":"0.1","info":{"id":"lcVcRK","date":"1732116618","viewed":350,"name":"new universe","username":"nayk","description":" source fractal by gaz, and star nest by kali","likes":26,"published":3,"flags":0,"usePreview":0,"tags":["galaxy","universe"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 POS,NOR;\nfloat SIZE;\n\nvec3 rotate(vec3 p,vec3 n,float a)\n{\n\tn = normalize(n);\n    vec3 v = cross(p, n), u = cross(v, n); \n    return u * cos(a) + v * sin(a) + n * dot(p, n);   \n}\n\nfloat map(vec3 p)\n{\n\tp-=POS;\n    vec3 u = normalize(cross(NOR, vec3(0,1,0)));\n    p *= mat3(u, cross(NOR, u), NOR);\n    float w= abs(length(p.xy)-SIZE)-0.3;\n    vec2 d = vec2(w, abs(p.z)-0.05);\n    return length(max(d,0.0))-0.1;\n}\n\nvec3 calcNormal(vec3 p){\n \tvec2 e = vec2(1, -1) * 0.002;\n  \treturn normalize(\n    \te.xyy*map(p+e.xyy)+e.yyx*map(p+e.yyx)+ \n    \te.yxy*map(p+e.yxy)+e.xxx*map(p+e.xxx)\n\t);\n}\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n#define Q(p) p *= 2.*r(round(atan(p.x, p.y) * 4.) / 4.)\n#define r(a) mat2(cos(a + asin(vec4(0,1,-1,0))))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\tvec3 rd = normalize(vec3(p,-2));\n\tvec3 ro = vec3(0,0,20);\n\tvec3 col = vec3(0.2);\n    \n    vec4 o=fragColor;\n    vec2 u=fragCoord;\n    vec2 v2 = iResolution.xy;\n         u = .2*(u+u-v2)/v2.y;    \n         \n    vec4 z2 = o = vec4(1,2,3,0);\n     \n   \n    for (float a = .5, t = iTime, i; \n         ++i < 19.; \n         o += (1. + cos(z2+t)) \n            / length((1.+i*dot(v2,v2)) \n                   * sin(1.5*u/(.5-dot(u,u)) - 9.*u.yx + t))\n         )  \n        v2 = cos(++t - 7.*u*pow(a += .03, i)) - 5.*u,                 \n        u += tanh(40. * dot(u *= mat2(cos(i + .02*t - vec4(0,11,33,0)))\n                           ,u)\n                      * cos(1e2*u.yx + t)) / 2e2\n           + .2 * a * u\n           + cos(4./exp(dot(o,o)/1e2) + t) / 3e2;\n              \n     o = 25.6 / (min(o, 13.) + 164. / o) \n       - dot(u, u) / 250.;\n       \n    vec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n          Q(p.xy);\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.02),sin(iTime*0.02),-sin(iTime*0.02), cos(iTime*0.02));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.031*o.xyz,1.);\t\n\tfloat z=50.0;\n\tfloat itr =20.0;\n\tfor (float j=1.0; j<=itr;j++)\n\t{\n\t\t\n\t    \n \t\tNOR = normalize(vec3(1,5,3));\n\t\tNOR = rotate(NOR,normalize(vec3(2,1,3)), iTime*0.2 * j*0.4);\n\t\tNOR = rotate(NOR,normalize(vec3(1,1,6)), -iTime*3.2 / j*0.3);\n\t\tSIZE=0.5*j+5.5*cos(iTime);\n\t\tif (length(cross(rd,POS-ro))<SIZE+0.5)\n\t\t{\n\t\t\tfloat ITR = 100.0;\n\t\t\tvec3 p =ro;\n\t\t\tfloat t=0.0,x;\n\t\t\tfloat i;\n \t\t\tfor( i = 0.0; i < ITR; i++)\n  \t\t\t{\n\t    \t\tt += x =map(p);\n       \t\t\tif(x < 0.001 || t > 50.0) break;\n\t\t\t\tp+=rd*x;\n  \t\t\t}\n  \t\t\tif(x < 0.001)\n  \t\t\t{\n\t\t\t\tif(t<z)\n\t\t\t\t{\n\t\t\t\t \tvec3 nor = calcNormal(p);\n\t\t\t\t\tvec3 li = normalize(vec3(0.3,0.5,0.8));\n\t\t\t\t\tcol=  pow(1.0 - i / ITR, 3.0)*(vec3(1.5)*(1.0-0.3*j/itr)); \n\t\t\t\t\tcol *= clamp(dot(nor, li), 0.3, 1.0);\n        \t\t\tcol *= max(0.5 + 0.5 * nor.y, 0.0);\n        \t\t\tcol += pow(clamp(dot(\n                        reflect(normalize(p - ro), nor), li), 0.0, 1.0), 20.0);\n       \t\t\t\tcol = clamp(col*v*0.01*o.xyz,0.0,1.0)*o.xyz*10.;\n\t\t\t\t\tz=t;\n\t\t\t\t}\n\n\t\t\t}\t\n\t\t}\n\t}   \n\tcol = pow(col, vec3(0.8)); \n\tfloat t=iTime * 5.0;\n\tcol +=vec3(1,0.5,0)* sin(p.y*500.0-t)*sin(p.x*300.0- t) *0.2;\n\tcol *= clamp(2.4-length(p),0.0,1.0);\n\tfragColor=vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}