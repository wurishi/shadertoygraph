{"ver":"0.1","info":{"id":"wsKXzG","date":"1574425759","viewed":252,"name":"How to hang Mondrian's painting?","username":"bitless","description":"Do you know how to hang Mondrian's painting right way? I'm absolutely not.","likes":30,"published":1,"flags":0,"usePreview":0,"tags":["2d","font","mondrian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: bitless\n// Title: How to hang Mondrian's painting right way?\n// Thanks to Patricio Gonzalez Vivo & Jen Lowe for \"The Book of Shaders\"\n// and Fabrice Neyret (FabriceNeyret2) for https://shadertoyunofficial.wordpress.com/\n// and Inigo Quilez (iq) for  https://iquilezles.org/www/index.htm and Graphtoy\n// and whole Shadertoy community for inspiration.\n\n\n////////////////////////////////////////////////////////////////////////////\n//https://www.shadertoy.com/view/llySRh\n//find many other tricks here: https://shadertoyunofficial.wordpress.com/\n\n\nint char_id = -1; vec2 char_pos, dfdx, dfdy; \nvec4 char(vec2 p, int c) {\n    vec2 dFdx = dFdx(p/16.), dFdy = dFdy(p/16.);\n  if ( p.x>.25&& p.x<.75 && p.y>-0.12&& p.y<1. )  // normal char box\n //   if ( p.x>.25&& p.x<.75 && p.y>.1&& p.y<.85 ) // thighly y-clamped to allow dense text\n        char_id = c, char_pos = p, dfdx = dFdx, dfdy = dFdy;\n    return vec4(0);\n}\nvec4 draw_char() {\n    int c = char_id; vec2 p = char_pos;\n    return c < 0 \n        ? vec4(0,0,0,1e5)\n        : textureGrad( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                       dfdx, dfdy );\n}\n\n// --- chars\nint CAPS=0;\n#define low CAPS=32;\n#define caps CAPS=0;\n#define spc  U.x-=.5;\n#define C(c) spc O+= char(U,64+CAPS+c);\n////////////////////////////////////////////////////////////////////////////\n\n\n\n#define PI 3.1415926\n#define FALL_ST 1.5\n#define FALL_TIME 1.5\n\n// rotation matrix \n// a - angle\n#define rot(a)      mat2( cos(a), -sin(a), sin(a), cos(a) )\n\n\n// box function\n// p - current point\n// lb - left/bottom point\n// rt - right/top point\n// w - border smoothness\nfloat box(vec2 p, vec2 lb, vec2 rt, float w) {\n    vec2 r = smoothstep(vec2(w), vec2(0.), abs(p*2.-(rt+lb))-(rt-lb));\n    return r.x*r.y;\n}\n\n// line function\n// p - current point\n// x - line center\n// t - line thickness\n// w - smoothness\nfloat line(float p, float x, float t, float w) {\n    float r = smoothstep(0., w, abs(p-x)-t/2.);\n    return r;\n}\n\n// dumping turn\n// t - current time\n// k - coof\nfloat sinc(float t, float k )\n{\n    return sin(t*k-PI/2.)*exp(-t/.75)+1.;\n}\n\n// rebound movement\n// t - current time\n// st_t - start time\n// l - movement duration\nfloat move (float t, float st_t, float l) {\n    return step(abs(t-st_t-l/2.), l/2.)*abs(cos((t-st_t)*5.)*(l+st_t-t)/FALL_TIME);\n}\n\n// box distance field\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d, vec2(0.))) + min(max(d.x, d.y), 0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 g = fragCoord.xy;\n    vec2 r = iResolution.xy;\n    vec2 st = (g+g-r)/min(r.x, r.y);\n    \n    float sm = 2.5/min(r.x, r.y); //smoothness\n\n    vec2 U;\n    vec2 ch;\n    vec4 O = vec4(0.);\n\n    float lc = mod(iTime, 20.); // local time cycle\n    \n    // subtitles ////////////////////////////\n    if (lc < 1.5) {U = ( st - vec2(-1.1,-1.) ) * 5.;  caps C(15) low C(11)C(1)C(25)C(-52)C(31) C(14)C(15)C(23)C(31) C(9)C(20)C(0)C(19)C(31) C(7)C(15)C(15)C(4);}     // \"Okay, now it's good\"\n    else if (lc>2.5 && lc < 4.5) {U = ( st - vec2(-.35,-1.) ) * 5.;  caps C(14) low C(15)C(16)C(5)C(-50);}     // \"Nope.\"\n    else if (lc>7.5 && lc < 10.5) { U = ( st - vec2(-0.65,-1.) ) * 5.;  caps C(14) low C(15)C(20)C(31) C(1)C(7)C(1)C(9)C(14)C(-63)}   // \"Note again!\"\n    else if (lc>12.5 && lc < 14.5) {U = ( st - vec2(-0.65,-1.) ) * 5.;  caps C(4) low C(1)C(13)C(13)C(5)C(4) C(31)C(9)C(20)C(-63)}   // \"Dammed it!\"\n    else if (lc>17.5 && lc < 19.5) {    U = ( st - vec2(-0.65,-1.) ) * 5.;  caps C(23) low C(8)C(1)C(20)C(31) C(1)C(31) C(-50)C(-50)C(-50)}   // \"What a ...\"\n    ch = draw_char().xw;\n    /////////////////////////////////////\n\n    vec3 color = mix(vec3(.631, .647, .675), vec3(.965, .969, .851), clamp(st.y, -.5, .5)); //background\n    color = mix(color, vec3(1.), smoothstep(2., 0., length(st-vec2(-.75, .25)))*.5); //background lighting\n    \n    // Scale\n    st *= .7;\n\n    float a = -PI/2.*(floor((lc-5.)/5.)+sinc(mod(lc, 5.)*1.5, 1.)); //rotation angle\n\n    st.y -= .05;\n    st *= rot(a);\n    st += .5;\n    \n    float d1, d2, d3, c;\n    \n    d1 = -.629*(step(lc, FALL_ST)+move(lc, FALL_ST, FALL_TIME)+(1.-move(lc, 10.+FALL_ST, FALL_TIME))*step(10.+FALL_ST, lc));\n    d2 = -.557*(step(lc, FALL_ST)+move(lc, FALL_ST, FALL_TIME)+(1.-move(lc, 10.+FALL_ST, FALL_TIME))*step(10.+FALL_ST, lc))-.072;\n    d3 = -.448*(step(lc, 5.+FALL_ST)+move(lc, 5.+FALL_ST, FALL_TIME)+(1.-move(lc, 15.+FALL_ST, FALL_TIME))*step(15.+FALL_ST, lc))-.270;\n\n    c = sdBox(vec2(.5)+vec2(.03, -.03)*rot(a)-st, vec2(.899, 1.)*.5); //painting shadow\n    color = mix(color, vec3(0.), smoothstep(.1, 0., c)*.4);\n\n    c = box (st, vec2(.023, -.044), vec2(.976, 1.044), sm); //outer border\n    color =  mix(color, vec3(.0), c);\n\n    c = box (st, vec2(.027, -.04), vec2(.973, 1.04), sm); //painting border\n    color =  mix(color, vec3(.447, .439, .482), c);\n\n    color = mix(color, vec3(.988, .980, .922), box(st, vec2(.067, 0.), vec2(.933, 1.), sm)); //painting background\n    color = mix(color, vec3(.659, .016, .004), box(st+vec2(0., d1), vec2(.067, 0.), vec2(.265, .372), sm)); //red rectangle\n    color = mix(color, vec3(.890, .784, .161), box(st+vec2(0., d2), vec2(.903, 0.), vec2(.933, .372), sm)); //yellow rectangle\n    color = mix(color, vec3(.063, .302, .588), box(st+vec2(d3, 0.), vec2(0.), vec2(.216, .058), sm)); //blue rectangle\n    \n\t// black stripes    \n    c = line(st.x, .261, .028, sm);\n    c *= line(st.x, .716, .028, sm);\n    c *= line(st.x, .903, .028, sm);\n    c *= line(st.y, .631, .028, sm);\n    c *= line(st.y, .826, .028, sm);\n    c *= 1.-box(st, vec2(.11, .632), vec2(.146, 1.01), sm);\n    c *= 1.-box(st, vec2(.257, .055), vec2(.935, .083), sm);\n    c = (1.-c) * box (st, vec2(.065, -.002), vec2(.936, 1.002), sm);\n    color = mix (color, vec3(0.), c );\n\n    c = box (st, vec2(.064, -.003), vec2(.937, 1.003), sm)-box (st, vec2(.067, .0), vec2(.934, 1.), sm); //inner border\n    color =  mix(color, vec3(0.0), c);\n    \n    color = mix(color, vec3(1.0), ch.x); //subtitles\n    color = mix(color, vec3(0.0), smoothstep ( sm*2., 0., abs(0.51-ch.y)-0.01)*0.55); //subtitles border\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}