{"ver":"0.1","info":{"id":"cl3GRn","date":"1681826736","viewed":63,"name":"julia set movement","username":"turska","description":"Julia set,fractal,complex plane","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["fractal","juliaset","complexplane"],"hasliked":0,"parentid":"NdSGRG","parentname":"Julia Set Basic"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ITR 200\n#define PI 3.1415926\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n    \n    \nfloat julia(vec2 uv){\n    int j;\n    for(int i=0;i<ITR;i++){\n        j++;\n        vec2 c=vec2(-0.345,0.654);\n\n        uv=vec2(uv.x*uv.x-uv.y*uv.y,2.0*uv.x*uv.y)+c;\n        if(length(uv)>float(ITR)){\n            break;\n        }\n    }\n    \n    float res;\n    if (float(j) >= float(ITR)) {\n        res = float(j)/float(ITR);\n    }\n    \n    res = float(j) + 1. - log(log2(length(uv)));\n    return res/float(ITR);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    vec3 target = texelFetch( iChannel0, ivec2(0,0), 0 ).xyz;\n    float ar = iResolution.x/iResolution.y;\n\t//vec2 uv=(2.0*fragCoord.xy-iResolution.xy)/iResolution.y + target.xy;\n    vec2 uv=vec2(fragCoord.x/iResolution.y*target.z - target.z/2.*ar, (1.-fragCoord.y/iResolution.y)*target.z - target.z/2.) + target.xy;\n\n\tfloat f=julia(uv);\n    vec3 col = hsv2rgb(vec3(f, 1, 1.-f));\n\tfragColor=vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Numbers are based on JavaScript key codes: https://keycode.info/\nconst int KEY_LEFT  = 65;\nconst int KEY_UP    = 87;\nconst int KEY_RIGHT = 68;\nconst int KEY_DOWN  = 83;\nconst int KEY_SHIFT = 16;\nconst int KEY_CONTROL = 17;\n\nvec3 handleKeyboard(vec3 offset) {\n    float velocity = 1. / 100.; // This will cause offset to change by 0.01 each time an arrow key is pressed\n    \n    // texelFetch(iChannel1, ivec2(KEY, 0), 0).x will return a value of one if key is pressed, zero if not pressed\n    vec2 left = texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).x * vec2(-1, 0);\n    vec2 up = texelFetch(iChannel1, ivec2(KEY_UP,0), 0).x * vec2(0, -1);\n    vec2 right = texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).x * vec2(1, 0);\n    vec2 down = texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).x * vec2(0, 1);\n    float zoom = max(texelFetch(iChannel1, ivec2(KEY_SHIFT, 0), 0).x/1.05, (texelFetch(iChannel1, ivec2(KEY_CONTROL, 0), 0).x*1.05));\n    \n    offset += vec3((left + up + right + down) * velocity, 0);\n    if (zoom > 0.) {\n        offset.z*=zoom;\n    }\n    \n    \n    return offset;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Return the offset value from the last frame (zero if it's first frame)\n    vec3 offset = texelFetch( iChannel0, ivec2(0, 0), 0).xyz;\n    \n    // Pass in the offset of the last frame and return a new offset based on keyboard input\n    offset = handleKeyboard(offset);\n    if (offset.z == 0.) {\n        offset.z = 1.;\n    }\n\n    // Store offset in the XY values of every pixel value and pass this data to the \"Image\" shader and the next frame of Buffer A\n    fragColor = vec4(offset, 0);\n}","name":"Buffer A","description":"","type":"buffer"}]}