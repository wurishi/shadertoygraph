{"ver":"0.1","info":{"id":"cdlSRH","date":"1668547201","viewed":324,"name":"Webcam: Water","username":"stephan","description":"reflection poc","likes":3,"published":1,"flags":2,"usePreview":0,"tags":["reflection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float waterLine = 0.33;\n    \n    // Reveser x-axis as first thing for easier webcam understanding\n    fragCoord.x = iResolution.xy.x - fragCoord.x;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 input_pixel = fragCoord/iResolution.xy;\n    \n    bool below_water_line = input_pixel.y < waterLine;\n    if(below_water_line)\n    {\n        float distance_to_waterline = (waterLine - input_pixel.y) / waterLine;\n        input_pixel.y = waterLine + (waterLine - input_pixel.y) * 2.0;\n        \n        float speed = 5.0;\n        float wave_height = distance_to_waterline * 200.0  * (iResolution.xy.y / 1000.0);\n        float wave_width = distance_to_waterline * 0.03;\n        \n        input_pixel.x += cos(iTime*speed + fragCoord.y / wave_height) * wave_width;\n    }\n    \n    // get pixel information from uv location\n    vec4 texColor = texture(iChannel0, input_pixel);\n    \n    texColor *= 1.5;\n    \n    // Output to screen\n    fragColor = texColor;\n    \n    // Draw vertical line at water level\n    if(abs(input_pixel.y - waterLine) < 0.002)\n    {\n        fragColor *= 0.8;\n    }\n    \n    \n}","name":"Image","description":"","type":"image"}]}