{"ver":"0.1","info":{"id":"NlBcWm","date":"1649757020","viewed":53,"name":"Crazy LightRay","username":"pumpjam","description":"Crazy LightRay","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lightray"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RAY_WIDTH 2.0\n#define BLOOM_RADIUS 180.0\n#define RAY_COL vec3(0.4, 1.0, 1.0)\n\n#define LEFT_NUM 6\n#define Right_NUM 12\n\n#define FRQ 5.0\n\nfloat hash(float x)\n{\n\treturn fract(sin(x*12.9898)*43758.5453123); //decent hash for noise generation\n}\n\nfloat hash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }\n\nfloat noise(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n\n\t// Four corners in 2D of a tile\n\tfloat a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    // Simple 2D lerp using smoothstep envelope between the values.\n\t// return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tmix(c, d, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tsmoothstep(0.0, 1.0, f.y)));\n\n\t// Same code, with the clamps in smoothstep and common subexpressions\n\t// optimized away.\n    vec2 u = f * f * (4.0 - 1.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat plot(vec2 uv, float o) {    \n    return step(1.0 / iResolution.x, abs(uv.y - uv.x - o));\n}\n\nfloat distancea(vec2 uv, float r, float o) {\n    return abs(uv.x + r * uv.y - o - 0.25) / sqrt(2.0);\n}\n\nfloat distanceb(vec2 uv, float r, float o) {\n    return abs(uv.x + r * uv.y - o - 0.75) / sqrt(2.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uvs = fragCoord/iResolution.xy;\n    \n    float rayw = RAY_WIDTH / iResolution.x;\n    float bloomr = BLOOM_RADIUS / iResolution.x;\n\n    float rxlspos = 0.15;\n    float rxrspos = 0.6;\n\n    vec3 col = vec3(.0);\n    \n    float st = 0.1;\n    \n    float seed = sin(iTime * FRQ);\n    \n    float baseRL = 1.0 + cos(iTime) * noise(vec2(0.5, 0.5));\n    \n    float baseRR = cos(iTime / 2.0) * -noise(vec2(0.5, 1.0));\n    \n    for (int i = 0; i < LEFT_NUM; i++) {\n        col = mix(RAY_COL, col, clamp(.0, 1.0, pow(distancea(uvs, (baseRL - st * (-6.0 * sin(float(i) * iTime))) * seed, 0.)/bloomr, .3 * hash(iTime))));\n    }\n    \n    for (int i = 0; i < Right_NUM; i++) {\n        col = mix(RAY_COL, col, clamp(.0, 1.0, pow(distanceb(uvs, (baseRR + st * (5.0 * tan(float(i)))) * seed, 0.)/bloomr, .1)));\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}