{"ver":"0.1","info":{"id":"td3czf","date":"1601414161","viewed":1208,"name":"Infinity loader","username":"munrocket","description":"Infinity loader","likes":50,"published":1,"flags":0,"usePreview":0,"tags":["bezier","glow","lemniscate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_2_PI 6.28318530\n\n#define SCALE 1.3\n#define SPEED 0.5\n#define POINTS 15.\n#define LENGTH 0.6\n#define RADIUS 0.08\n#define FADING 0.28\n#define GLOW 1.5\n\n// optimized 2d version of https://www.shadertoy.com/view/ldj3Wh\nvec2 sdBezier(vec2 pos, vec2 A, vec2 B, vec2 C)\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n\n    float kk = 1.0 / dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n\n    vec2 res;\n\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n\n    h = sqrt(h);\n    vec2 x = (vec2(h, -h) - q) / 2.0;\n    vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n    float t = clamp(uv.x+uv.y-kx, 0.0, 1.0);\n\n    return vec2(length(d+(c+b*t)*t),t);\n}\n\nvec2 leminiscate(float t){\n    float x = SCALE * cos(t) / (1.0 + sin(t) * sin(t));\n    float y = SCALE * sin(t) * cos(t) / (1.0 + sin(t) * sin(t));\n    return vec2(x, y);\n}\n\n// inspired by https://www.shadertoy.com/view/wdy3DD\nfloat map(vec2 pos){\n    float t = fract(-SPEED * iTime);\n    float dl = LENGTH / POINTS;\n    vec2 p1 = leminiscate(t * M_2_PI);\n    vec2 p2 = leminiscate((dl + t) * M_2_PI);\n    vec2 c = (p1 + p2) / 2.0;\n    float d = 1e9;\n    \n    for(float i = 2.0; i < POINTS; i++){\n        p1 = p2;\n        p2 = leminiscate((i * dl + t) * M_2_PI);\n        vec2 c_prev = c;\n        c = (p1 + p2) / 2.;\n        vec2 f = sdBezier(pos, c_prev, p1, c);\n        d = min(d, f.x + FADING * (f.y + i) / POINTS);\n    }\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (2.*fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n\t\n    float dist = map(uv);\n    \n    vec3 col = vec3(0.2, 0.5, 1.0) * pow(RADIUS/dist, GLOW);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}