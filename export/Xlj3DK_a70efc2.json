{"ver":"0.1","info":{"id":"Xlj3DK","date":"1432513427","viewed":428,"name":"SphereFlake","username":"dila","description":"Sphere flake test.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["sphere","flake"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const float pi = 3.14159;\n\nmat3 xrot(float t)\n{\n    return mat3(1.0, 0.0, 0.0,\n                0.0, cos(t), -sin(t),\n                0.0, sin(t), cos(t));\n}\n\nmat3 yrot(float t)\n{\n    return mat3(cos(t), 0.0, -sin(t),\n                0.0, 1.0, 0.0,\n                sin(t), 0.0, cos(t));\n}\n\nmat3 zrot(float t)\n{\n    return mat3(cos(t), -sin(t), 0.0,\n                sin(t), cos(t), 0.0,\n                0.0, 0.0, 1.0);\n}\n\nvec4 map(vec3 p)\n{\n    float d = 1000.0;\n    \n    vec3 ip = p;\n    \n    float bs = 1.0;\n    \n    float r = 0.0;\n    \n    for (int i = 0; i < 4; ++i) {\n\n        vec3 q = ip;\n        \n        float nbs = bs;\n        bs *= 0.3;\n        \n        vec3 s = clamp(q, -nbs, nbs); \n        float fd = length(q) - nbs;\n        \n        vec3 aip = abs(ip);\n        vec3 n = ip / max(aip.x,max(aip.y,aip.z));\n        \n        aip = abs(n);\n        n -= sign(n) * min(aip.x,min(aip.y,aip.z));\n        \n\t\tip -= sign(n) * nbs;\n        \n        if (fd < d) {\n            d = fd;\n            r = float(i)/3.0;\n        }\n\t}\n    \n    return vec4(d,vec3(r));\n}\n\nvec3 normal(vec3 p)\n{\n\tvec3 o = vec3(0.01, 0.0, 0.0);\n    return normalize(vec3(map(p+o.xyy).x - map(p-o.xyy).x,\n                          map(p+o.yxy).x - map(p-o.yxy).x,\n                          map(p+o.yyx).x - map(p-o.yyx).x));\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n \tfloat t = 0.0;\n    for (int i = 0; i < 32; ++i) {\n        vec3 p = o + r * t;\n        float d = map(p).x;\n        t += d * 0.5;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    mat3 pc = yrot(iTime) * xrot(iTime) * zrot(iTime);\n    \n    vec3 r = normalize(vec3(uv, 1.0 - dot(uv, uv) * 0.0));\n    r *= pc;\n\tvec3 o = vec3(0.0, 0.0, -2.5);\n    o *= pc;\n    \n    float t = trace(o, r);\n    vec3 w = o + r * t;\n    vec4 mp = map(w);\n    float fd = mp.x;\n    vec3 sn = normal(w);\n    float prod = max(dot(sn,-r),0.0);\n\n    vec3 wa = vec3(1.0, 1.0, 0.0);\n    vec3 wb = vec3(0.0, 0.0, 1.0);\n    vec3 wc = vec3(0.54, 0.27, 0.07);\n\n    float k = pow(mp.y, 2.0);\n    k = smoothstep(0.0, 1.0, k);\n\n    vec3 ba = mix(wa, wb, k);\n    vec3 bb = mix(wb, wc, k);\n    vec3 bc = mix(ba, bb, k);\n\n    vec3 ref = reflect(sn, -r);\n    vec3 texf = texture(iChannel0, ref).xyz;\n    vec3 diff = bc * mix(vec3(1.0), texf, 1.0-prod);\n    \n    float fog = 1.0 / (1.0 + t * t * 0.01 + fd * 100.0);\n\n    vec3 back = texture(iChannel0, r).xyz;\n    \n    vec3 fc = mix(back, diff, fog);\n        \n\tfragColor = vec4(fc,1.0);\n}","name":"","description":"","type":"image"}]}