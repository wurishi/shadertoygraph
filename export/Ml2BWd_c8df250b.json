{"ver":"0.1","info":{"id":"Ml2BWd","date":"1523277885","viewed":79,"name":"First Ray Marching","username":"tomon9086","description":"My first ray-marching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphere_sdf(vec3 coord, float r) {\n    return length(coord) - r;\n}\n\nvec3 getEyeDirection(vec2 uv, float fovy){\n    uv = 2.0 * uv - vec2(1.0);\n    vec3 direction = vec3(uv, 1.0 / tan(fovy));\n    return normalize(direction);\n}\n\nfloat sdf(vec3 coord) {\n    return sphere_sdf(coord, 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/vec2(iResolution.y, iResolution.y);\n\n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    // fragColor = vec4(col,1.0);\n    \n    vec3 eyePos = vec3(0, 0, -3);\n    vec3 ray = eyePos;\n    vec3 color = vec3(0, 0, 0);\n    \n    int repeat = 64;\n    \n    for(int i = 0; i < repeat; i++) {\n        float l = sdf(ray);\n        if(l < 0.001) {\n            //color = vec3(1.0 / sqrt(1.0 - float(i * i)), 1.0 / sqrt(1.0 - float(i * i)), 1.0 / sqrt(1.0 - float(i * i)));\n            color = vec3(repeat / i, repeat / i, repeat / i);\n            break;\n        }\n        ray += getEyeDirection(uv, 0.707) * sdf(ray);\n    }\n    fragColor = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}