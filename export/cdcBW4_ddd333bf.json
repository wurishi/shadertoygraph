{"ver":"0.1","info":{"id":"cdcBW4","date":"1697181402","viewed":65,"name":"Line integral convolution","username":"oAsAo","description":"LIC of pendulum equation + i animated it to flooow.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["flow","lic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 uv_of(vec2 fragCoord) {\n    return fragCoord/iResolution.xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Blur image a bit for aa purposes\n    fragColor = (\n        texture(iChannel0, uv_of(fragCoord+vec2(-1, -1)))+\n        2.0*texture(iChannel0, uv_of(fragCoord+vec2(0, -1)))+\n        texture(iChannel0, uv_of(fragCoord+vec2(1, -1)))+\n        2.0*texture(iChannel0, uv_of(fragCoord+vec2(-1, 0)))+\n        4.0*texture(iChannel0, uv_of(fragCoord))+\n        2.0*texture(iChannel0, uv_of(fragCoord+vec2(1, 0)))+\n        texture(iChannel0, uv_of(fragCoord+vec2(-1, 1)))+\n        2.0*texture(iChannel0, uv_of(fragCoord+vec2(0, 1)))+\n        texture(iChannel0, uv_of(fragCoord+vec2(1, 1)))  \n    ) / 16.0;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const float L = 0.04;\nconst int SAMPLES = 40;\nconst float SAMPLES_INV = 1.0/float(SAMPLES);\n\nvec2 flow(vec2 uv) {\n    vec2 a = (uv-vec2(0.5, 0.5));\n    a = 3.0*vec2(3.14*a.x, a.y);\n    a = vec2(iResolution.x/iResolution.y *a.x, a.y);\n    a = vec2(a.y, -0.6*a.y-0.5*sin(a.x));\n    return a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    // Init pixels to their own uvs, then move opposite of flow with time.\n    // this way if we sample from texture in the same point after some time,\n    // we will get texture from up the stream, like it floated along.\n    // The texture does disappear after some time because of this effect.\n    if (iFrame == 0 || iMouse.z > 0.5) {\n        fragColor = vec4(uv.x,uv.y,0.0,1.0);\n    }\n    else {\n        vec2 r = vec2(texture(iChannel1, uv).x, texture(iChannel1, uv).y);\n        r -= 0.2 * SAMPLES_INV * L * flow(r);\n        fragColor = vec4(r.x,r.y,0.0,1.0);\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const float L = 0.05;\nconst int SAMPLES = 10;\nconst float SAMPLES_INV = 1.0/float(SAMPLES);\nconst float PI = 3.14159265;\n\n\nvec2 flow(vec2 uv) {\n    // Definition of the vector field.\n    vec2 a = (uv-vec2(0.5, 0.5));\n    a = 3.0*vec2(3.14*a.x, a.y);\n    a = vec2(iResolution.x/iResolution.y *a.x, a.y);\n    a = vec2(a.y, -0.6*a.y-0.5*sin(a.x));\n    return a;\n}\n\nfloat k(float s) {\n    // Shape of the blur. From -L/2 to L/2. In this case it's a box blur.\n    return 1.0;\n}\n\nvec4 D(vec2 r) {\n    // This corresponds to the integral i found on wikipedia. I think.\n    vec3 sum = vec3(0.0);\n\n    vec2 r_neg = r;\n    vec2 r_pos = r;\n    vec2 offset = vec2(0);\n    \n    for (int i=0; i < SAMPLES/2; i++) {\n        sum += k(-float(i) * SAMPLES_INV * L) * texture(iChannel0, r_neg + offset).rgb;\n        sum += k(float(i) * SAMPLES_INV * L) * texture(iChannel0, r_pos + offset).rgb;\n        r_neg -= SAMPLES_INV * L * normalize(flow(r_neg));\n        r_pos += SAMPLES_INV * L * normalize(flow(r_pos));\n    }\n\n    return vec4(sum / float(SAMPLES), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv_floaty = vec2(texture(iChannel1, uv).x, texture(iChannel1, uv).y);\n    fragColor = D(uv_floaty);\n}","name":"Buffer C","description":"","type":"buffer"}]}