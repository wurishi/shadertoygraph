{"ver":"0.1","info":{"id":"4s2cDK","date":"1493862662","viewed":232,"name":"Space Glider","username":"Tup","description":"Experimenting with a way to draw planets in a \"low poly\" game. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float RADIUS = 0.4; // normalized window\nfloat AA     = 2.0;  // pixels\n\nvec4 SURFACE    = vec4(0.0, 0.75, 0.0, 1.0);\nvec4 SPACE      = vec4(0.0, 0.0 , 0.0, 0.0);\nvec4 ATMOSPHERE = vec4(0.0, 0.75, 1.0, 0.5);\n\nfloat DARK  = 0.5;  // Minnaert parameter\n\nfloat TERM  = 0.05; // width of terminator (as percentage of planet radius)\n\nfloat HAZE = 0.25; // radius of atmospheric haze (as percentage of planet radius)\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float tscale = 5.0;\n    float ct     = cos(iTime / tscale);\n    float st     = sin(iTime / tscale);\n\tvec3  LIGHT = normalize(vec3(ct, st/5.0, st));\n\n    float rez    = min(iResolution.x, iResolution.y);\n    vec2  center = iResolution.xy / 2.0;\n    vec2  v      = (fragCoord.xy - center) / rez;\n    float l      = length(v);\n    float diff   = l - RADIUS;\n\n    float pixels = AA / rez;\n    float aa     = 1.0 - smoothstep(-pixels, 0.0, diff);\n\n    vec3 n = vec3(v / RADIUS, 0.0);\n    vec4 s;\n    if (length(n) < 1.0) {\n    \tn = vec3(n.xy, sqrt(1.0 - n.x*n.x - n.y*n.y));\n    \n\t\tfloat lambert  = dot(n, LIGHT);\n\t\tfloat minnaert = pow(lambert, DARK);\n\t\tfloat toon     = smoothstep(-TERM, TERM, minnaert - 0.5);\n        \n\t    s = aa*mix(0.10*SURFACE, SURFACE, toon);\n    }\n    else {\n        s = SPACE;\n    }\n\n    vec3 p = vec3(v / RADIUS, 0.0);\n    vec4 a;\n    if (length(p) < 1.0)\n    \tp = vec3(p.xy, sqrt(1.0 - p.x*p.x - p.y*p.y));\n    else\n    \tp = normalize(p);\n\n    p = p - vec3(0.0, 0.0, RADIUS + HAZE*RADIUS);\n    \n    float haze      = smoothstep(0.0, HAZE*RADIUS, diff);\n    float backlight = dot(p, LIGHT);\n        \n\ta = clamp(backlight, 0.0, 1.0)*mix(ATMOSPHERE.w*ATMOSPHERE, SPACE, haze);\n    \n    fragColor =  s+a;\n}\n","name":"Image","description":"","type":"image"}]}