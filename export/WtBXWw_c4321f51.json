{"ver":"0.1","info":{"id":"WtBXWw","date":"1566313769","viewed":3027,"name":"Fast Atmospheric Scattering","username":"bearworks","description":"From Photorealistic Real-Time Outdoor Light Scattering by Hoffmann and Preetham","likes":36,"published":1,"flags":0,"usePreview":0,"tags":["sky","scattering","atmosphere","rayleigh","mie"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Based on Naty Hoffmann and Arcot J. Preetham. Rendering out-door light scattering in real time.\n//http://renderwonk.com/publications/gdm-2002/GDM_August_2002.pdf\n\n#define fov tan(radians(60.0))\n\n#define cameraheight 5e1 //50.\n\n#define Gamma 2.2\n\n#define Rayleigh 1.\n#define Mie 1.\n#define RayleighAtt 1.\n#define MieAtt 1.2\n\n//float g = -0.84;\n//float g = -0.97;\nfloat g = -0.9;\n\n#if 1\nvec3 _betaR = vec3(1.95e-2, 1.1e-1, 2.94e-1); \nvec3 _betaM = vec3(4e-2, 4e-2, 4e-2);\n#else\nvec3 _betaR = vec3(6.95e-2, 1.18e-1, 2.44e-1); \nvec3 _betaM = vec3(4e-2, 4e-2, 4e-2);\n#endif\n\n\nconst float ts= (cameraheight / 2.5e5);\n\nvec3 Ds = normalize(vec3(0., 0., -1.)); //sun \n\nvec3 ACESFilm( vec3 x )\n{\n    float tA = 2.51;\n    float tB = 0.03;\n    float tC = 2.43;\n    float tD = 0.59;\n    float tE = 0.14;\n    return clamp((x*(tA*x+tB))/(x*(tC*x+tD)+tE),0.0,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tfloat AR = iResolution.x/iResolution.y;\n    float M = 1.0; //canvas.innerWidth/M //canvas.innerHeight/M --res\n    \n    vec2 uvMouse = (iMouse.xy / iResolution.xy);\n    uvMouse.x *= AR;\n    \n   \tvec2 uv0 = (fragCoord.xy / iResolution.xy);\n    uv0 *= M;\n\t//uv0.x *= AR;\n    \n    vec2 uv = uv0 * (2.0*M) - (1.0*M);\n    uv.x *=AR;\n    \n    if (uvMouse.y == 0.) uvMouse.y=(0.7-(0.05*fov)); //initial view \n    if (uvMouse.x == 0.) uvMouse.x=(1.0-(0.05*fov)); //initial view\n    \n\tDs = normalize(vec3(uvMouse.x-((0.5*AR)), uvMouse.y-0.5, (fov/-2.0)));\n    \n\tvec3 O = vec3(0., cameraheight, 0.);\n\tvec3 D = normalize(vec3(uv, -(fov*M)));\n\n\tvec3 color = vec3(0.);\n    \n\tif (D.y < -ts) {\n\t\tfloat L = - O.y / D.y;\n\t\tO = O + D * L;\n        D.y = -D.y;\n\t\tD = normalize(D);\n\t}\n    else{\n     \tfloat L1 =  O.y / D.y;\n\t\tvec3 O1 = O + D * L1;\n\n    \tvec3 D1 = vec3(1.);\n    \tD1 = normalize(D);\n    }\n    \n      float t = max(0.001, D.y) + max(-D.y, -0.001);\n\n      // optical depth -> zenithAngle\n      float sR = RayleighAtt / t ;\n      float sM = MieAtt / t ;\n\n  \t  float cosine = clamp(dot(D,Ds),0.0,1.0);\n      vec3 extinction = exp(-(_betaR * sR + _betaM * sM));\n\n       // scattering phase\n      float g2 = g * g;\n      float fcos2 = cosine * cosine;\n      float miePhase = Mie * pow(1. + g2 + 2. * g * cosine, -1.5) * (1. - g2) / (2. + g2);\n        //g = 0;\n      float rayleighPhase = Rayleigh;\n\n      vec3 inScatter = (1. + fcos2) * vec3(rayleighPhase + _betaM / _betaR * miePhase);\n\n      color = inScatter*(1.0-extinction); // *vec3(1.6,1.4,1.0)\n\n        // sun\n      color += 0.47*vec3(1.6,1.4,1.0)*pow( cosine, 350.0 ) * extinction;\n      // sun haze\n      color += 0.4*vec3(0.8,0.9,1.0)*pow( cosine, 2.0 )* extinction;\n    \n\t  color = ACESFilm(color);\n    \n      color = pow(color, vec3(Gamma));\n    \n\t  fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}