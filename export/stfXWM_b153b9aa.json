{"ver":"0.1","info":{"id":"stfXWM","date":"1625783490","viewed":195,"name":"Gyroidal Morphoma R","username":"Taron","description":"BigWIngs incredible tutorial on gyroids and demo code here made me goof around a little and end up with this organic weirdness.\nHere's his gyroid example: https://www.shadertoy.com/view/WtKSRz\nHere's his template: https://www.shadertoy.com/view/WtGXDD","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","gyroid"],"hasliked":0,"parentid":"7lXXW4","parentname":"Gyroidal Morphoma"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Gyroidal Morphoma\" \n// Based on Martijn Steinrucken aka The Art of Code/BigWings - 2020\n// https://www.shadertoy.com/view/WtKSRz\n//\n// I feel a little funny, almost just adjusting a shader, but this one's too much fun!\n// I've added some simple gloss and reflection, besides the organic wobbles.\n// If you want to truly learn something, check out his amazing tutorials on youtube (The Art of Code)!\n// And, Martijn, if you read this: I'm a fan and bow before your excellence, especially your teaching style.\n// Technically I may know much of it for almost 30 years, but the finesse and virtuosity of you is a pleasure \n// to watch and utterly inspiring!\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat Gyroid(vec3 p, float offset, float scale){\n    p *=scale;\n    offset +=.025*p.y;\n    return (dot(sin(p),cos(p.zxy))+offset)/scale;\n}\n\nfloat getGyroids(vec3 p){\n    p.z -=iTime*.25;\n    float gyroid = Gyroid(p,1.2,10.);\n    gyroid -= 0.5*Gyroid(p+vec3(0.15,0.,-0.05),1.2,19.79);\n    gyroid += 0.25*Gyroid(p+vec3(7.15+iTime*.1,0.,-0.05*gyroid),1.,29.39);\n    gyroid += 0.125*Gyroid(p+vec3(-2.15,0.3-gyroid,0.05),.9,49.99);\n    gyroid += 0.065*Gyroid(p+vec3(-0.05,0.1,7.15+gyroid),0.95,79.99);\n    return gyroid;\n\n}\n\nfloat GetDist(vec3 p) {\n    float box = sdBox(p, vec3(2.));\n    p.xy *= Rot(p.z*.73);\n    float gyroid = getGyroids(p);\n    \n    \n    float d = max(gyroid*0.6, box);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0., 0., -1.);\n    ro.yz *= Rot(-m.y*3.14+0.15);\n    ro.xz *= Rot(-m.x*6.2831-3.15);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        float dif = n.y*.5+.5;\n        col = vec3(dif);\n        \n        // gloss and pseudo reflections below 0.5y\n        if(p.y<0.5){\n            vec3 r = reflect(rd, n);\n            float refl = 0.;\n            float m = RayMarch(p-n*.005, r);\n            if(m<MAX_DIST){\n                vec3 rn = GetNormal(ro+r*m);\n                refl = rn.y*.5+.5;\n            }\n\n            vec3 spec = pow(max(0.,dot(vec3(0.,1.,0.),r)),53.3)*.5+min(1.,refl)*vec3(0.02,0.15,0.21);\n            col +=spec *max(0.,min(1.,0.5-p.y*2.5));\n        }\n     }\n    \n    col = pow(col, vec3(0.4545,1.0545,1.4545));\t// colored gamma correction\n    col = mix(col, mix(vec3(0.1,0.15,0.3),vec3(0.1,0.15,0.3)*10.,rd.y*.3),min(1.0,d*.5)); // fog\n    col = mix(col, vec3(0.24,0.03,0.02),length(uv)); // vignette\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}