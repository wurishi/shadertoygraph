{"ver":"0.1","info":{"id":"dt23Dd","date":"1674207842","viewed":123,"name":"Mystic Icosphere","username":"Mojomajor","description":"https://phaser.io/examples/v3/view/display/shaders/shader-test-2","likes":6,"published":1,"flags":64,"usePreview":0,"tags":["marble","icosphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"llBXWV","filepath":"https://soundcloud.com/distantworldtransmissions/cignol-near-earth-objects","previewfilepath":"https://soundcloud.com/distantworldtransmissions/cignol-near-earth-objects","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//@machine_shaman\n//precision mediump float;\n\n#define time iTime\n#define mouse iMouse\n// define resolution iResolution;\n\n\nfloat noise(vec2 st){\n    return fract(sin(dot(vec2(12.23,74.343),st))*43254.);  \n}\n\n#define pi acos(-1.)\nfloat noise2D(vec2 st){\n  \n  //id,fract\n  vec2 id =floor(st);\n  vec2 f = fract(st);\n  \n  //nachbarn\n  float a = noise(id);\n  float b = noise(id + vec2(1.,0.));\n  float c = noise(id + vec2(0.,1.));\n  float d = noise(id + vec2(1.));\n  \n  \n  //f\n  f = smoothstep(0.,.5,f);\n  \n  //mix\n  float ab = mix(a,b,f.x);\n  float cd = mix(c,d,f.x);\n  return mix(ab,cd,f.y);\n}\n\nmat2 rot45 = mat2(0.707,-0.707,0.707,0.707);\n\nmat2 rot(float a){\n  float s = sin(a); float c = cos(a);\n  return mat2(c,-s,s,c);\n}\nfloat fbm(vec2 st, float N, float rt){\n    st*=3.;\n \n  float s = .5;\n  float ret = 0.;\n  for(float i = 0.; i < N; i++){\n     \n      ret += noise2D(st)*s; st *= 2.9; s/=2.; st *= rot((pi*(i+1.)/N)+rt*8.);\n      st.x += iTime/10.;\n  }\n  return ret;\n  \n}\n\n#define FOV 90.\n#define imod(n, m) n - (n / m * m)\n\n#define VERTICES 12\n#define FACES 20\n\nfloat iX = .525731112119133606;\nfloat iZ = .850650808352039932;\n\nvoid icoVertices(out vec3[VERTICES] shape) {\n    shape[0] = vec3(-iX,  0.0,    iZ);\n    shape[1] = vec3( iX,  0.0,    iZ);\n    shape[2] = vec3(-iX,  0.0,   -iZ);\n    shape[3] = vec3( iX,  0.0,   -iZ);\n    shape[4] = vec3( 0.0,  iZ,    iX);\n    shape[5] = vec3( 0.0,  iZ,   -iX);\n    shape[6] = vec3( 0.0, -iZ,    iX);\n    shape[7] = vec3( 0.0, -iZ,   -iX);\n    shape[8] = vec3(  iZ,   iX,  0.0);\n    shape[9] = vec3( -iZ,   iX,  0.0);\n    shape[10] = vec3(  iZ,  -iX,  0.0);\n    shape[11] = vec3( -iZ,  -iX,  0.0);\n}\n\nmat2 rotate(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat line(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float t = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * t);\n}\n\nvec3 v[12];\nvec2 p[12];\n\n// using define trick to render different triangles\n// not possible in loop on glslsandbox\n#define tri(a, b, c) min(min(min(d, line(uv, p[a], p[b])), line(uv, p[b], p[c])), line(uv, p[c], p[a]))\nfloat inverseLerp(float v, float minValue, float maxValue) {\n  return (v - minValue) / (maxValue - minValue);\n}\n\nfloat remap(float v, float inMin, float inMax, float outMin, float outMax) {\n  float t = inverseLerp(v, inMin, inMax);\n  return mix(outMin, outMax, t);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    //vec2 uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y;\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv.y += .08 * sin(uv.x + time);\n\n    //uv = floor(uv * 500.) / 500.;\n    uv = floor(uv * remap(sin(time),-1.,1.,500.,1000.)) / remap(cos(time),-1.,1.,500.,1000.);\n    uv *= 2.9;\n\n    float t = 0.001 + abs(uv.y);\n    float scl = 1. / t;\n    vec2 st = uv * scl + vec2(0, scl + time);\n\n    // setup vertices\n    icoVertices(v);\n\n    // project\n    for (int i = 0; i < 12; i++) {\n        v[i].xz *= rotate(time * 0.5);\n        float scl = 1.0 / (1. + v[i].z * 0.2);\n        float dist = distance(v[i].xyz, vec3(0, 0, -3));\n        p[i] = v[i].xy * scl;// - vec2(0, 0);\n    }\n\n    // ico faces\n    float d = 1.0;\n    d = min(d, tri(0,  4,  1));\n    d = min(d, tri(0,  9,  4));\n    d = min(d, tri(9,  5,  4));\n    d = min(d, tri(4,  5,  8));\n    d = min(d, tri(4,  8,  1));\n    d = min(d, tri(8,  10, 1));\n    d = min(d, tri(8,  3,  10));\n    d = min(d, tri(5,  3,  8));\n    d = min(d, tri(5,  2,  3));\n    d = min(d, tri(2,  7,  3));\n    d = min(d, tri(7,  10, 3));\n    d = min(d, tri(7,  6,  10));\n    d = min(d, tri(7,  11, 6));\n    d = min(d, tri(11, 0,  6));\n    d = min(d, tri(0,  1,  6));\n    d = min(d, tri(6,  1,  10));\n    d = min(d, tri(9,  0,  11));\n    d = min(d, tri(9,  11, 2));\n    d = min(d, tri(9,  2,  5));\n    d = min(d, tri(7,  2,  11));\n\n    // color the scene\n    vec3 col = vec3(0);\n\n    col += mix(vec3(0), .5 + .5 * cos(time + st.x + 2. * st.y + vec3(0, 1, 2)), sign(cos(st.x * 10.)) * sign(cos(st.y * 20.))) * t * t;\n    //col += smoothstep(0.3, 0., d);\n    col *= smoothstep(0.0, 0.1, d);\n    col += smoothstep(0.1, 0., d) * (.5 + .5 * cos(time + d * 20. + vec3(33, 66, 99)));\n    col += abs(.01 / d);\n\n    // thanks for the dithering effect :)\n    col += floor(uv.y - fract(dot(fragCoord.xy, vec2(0.5, 0.75))) * 5.0) * 0.1;\n    float fa1 = fbm(uv*rot(sin(uv.x)*0.001) ,5., 3.);\n  \n  \n  \n  float fb1 = fbm(st ,5., 5.);\n  \n  float fa2 = fbm(st+sin(st.x*15.) + fa1*5. ,4., 8.);\n  float fb2 = fbm(st + fb1 , 5., 6.);\n \n  float fa3 = fbm(st*1.5 + fa2 ,5., 1.);\n  float fb3 = fbm(st + fa2, 3., 2.);\n  \n  vec3 col2 = vec3(0);\n  float circle = (fa3);\n  \n  //salt stained marble thing\n  //metal blue\n  col2=mix(col2,vec3(0.1,0.3,0.6),pow(fa3*2.4,1.5));\n  \n  //metal red\n  col2=mix(col2,vec3(0.9,0.3,0.3),clamp(pow(fb2*.7,1.9),0.,1.));\n  \n  //black\n  //col2=mix(col2,vec3(0.,0.,0.),clamp(pow(fa2*2.,9.),0.,1.)*0.3);\n  \n  //gold\n  col2=mix(col2,vec3(0.9,0.6,0.3),clamp(pow(fa2*1.5,20.)*0.7,0.,1.));\n  \n  //black\n col2=mix(col2,vec3(0.),clamp(pow(fb1*1.6,1.)*0.8,0.,1.));\n  \n  //white\n  col2=mix(col2,vec3(0.99),clamp(pow(fb2*1.4-0.05,20.),0.,1.));\n \n  col2.yz *= rot(-0.12);\n\n    fragColor = vec4(col*col2, 1.);\n    //fragColor = vec4(col2, 1.);\n}","name":"Image","description":"","type":"image"}]}