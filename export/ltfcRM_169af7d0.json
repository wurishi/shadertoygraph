{"ver":"0.1","info":{"id":"ltfcRM","date":"1504012367","viewed":622,"name":"RGB Halftone","username":"atomek","description":"Realtime RGB halftone","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["rgb","halftone"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415926535897932384626433832795;\nconst float PI180 = float(PI / 180.0);\n\nfloat sind(float a)\n{\n\treturn sin(a * PI180);\n}\n\nfloat cosd(float a)\n{\n\treturn cos(a * PI180);\n}\n\nfloat added(vec2 sh, float sa, float ca, vec2 c, float d)\n{\n\treturn 0.5 + 0.25 * cos((sh.x * sa + sh.y * ca + c.x) * d) + 0.25 * cos((sh.x * ca - sh.y * sa + c.y) * d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Halftone dot matrix shader\n\t// @author Tomek Augustyn 2010\n\t\n\t// Ported from my old PixelBender experiment\n\t// https://github.com/og2t/HiSlope/blob/master/src/hislope/pbk/fx/halftone/Halftone.pbk\n\t\n\t// Hold and drag horizontally to adjust the threshold\n\n\tfloat threshold = 0.75;\n\n\tfloat ratio = iResolution.y / iResolution.x;\n\tfloat coordX = fragCoord.x / iResolution.x;\n\tfloat coordY = fragCoord.y / iResolution.x;\n\tvec2 dstCoord = vec2(coordX, coordY);\n\tvec2 srcCoord = vec2(coordX, coordY / ratio);\n\tvec2 rotationCenter = vec2(0.5, 0.5);\n\tvec2 shift = dstCoord - rotationCenter;\n\n    float dotSize = 6.0;//clamp(float(iMouse.x / iResolution.x) + 2.6, 3.0, 10.0);\n\tfloat angle = 30.0;\n    \n    vec3 rasterPattern = vec3(\n        added(shift, sind(angle + 00.0), cosd(angle), rotationCenter, PI / dotSize * 680.0),\n        added(shift, sind(angle + 30.0), cosd(angle), rotationCenter, PI / dotSize * 680.0),\n        added(shift, sind(angle + 60.0), cosd(angle), rotationCenter, PI / dotSize * 680.0)\n    );\n\t\n\tvec4 srcPixel = texture(iChannel0, srcCoord);\n       \n\tfragColor = vec4(\n        (rasterPattern.r * threshold + srcPixel.r - threshold) / (1.0 - threshold),\n        (rasterPattern.g * threshold + srcPixel.g - threshold) / (1.0 - threshold),\n        (rasterPattern.b * threshold + srcPixel.b - threshold) / (1.0 - threshold),\n        1.0\n   \t);\n}\n    ","name":"Image","description":"","type":"image"}]}