{"ver":"0.1","info":{"id":"fsB3DD","date":"1617389818","viewed":45,"name":"Noise and UV Mapping_HW09","username":"roamingsci","description":"This is a practice using noise functions to generate height fields and textures.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","cornellbox","uvmapping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define IDBackWall 1\n#define IDLeftWall 2\n#define IDRightWall 3\n#define IDCeilingWall 4\n#define IDFloorWall 5\n#define IDLongCube 6\n#define IDSphere 7\nconst int RAY_STEPS = 256;\nconst float FOVY = 3.141569 * 0.25;\nconst float PI = 3.1415926;\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n\nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\nvec2 sphereUV(vec3 center, float r, vec3 p)\n{\n    vec3 pDir = normalize(p - center);\n    vec3 worldUp = vec3(0.0, 1.0, 0.0);\n    float theta = acos(dot(pDir, worldUp));\n    // If p is located at the positive part of z axis, then phi is 0-180.\n    // If p is located at the negative part of z axis, then phi is 180-360.\n    vec3 xzDir = normalize(vec3(pDir.x, 0.0, pDir.z));\n    float phi = acos(dot(xzDir, vec3(1.0, 0.0, 0.0)));\n\n    if(pDir.z < 0.0)\n    {\n        phi = phi + PI;\n    }\n\n    return vec2(theta / PI, phi / (2.0 * PI));\n}\n\nvoid planeUVAxis(in vec3 p, in vec3 n, out vec3 u, out vec3 v)\n{\n    vec3 worldUp = vec3(0.0, 1.0, 0.0);\n    u = normalize(cross(worldUp, n));\n    v = normalize(cross(n, u));\n}\n\nvec2 planeUV(vec3 origin, vec3 n, vec3 p)\n{\n    vec3 uAxis;\n    vec3 vAxis;\n    planeUVAxis(origin, n, uAxis, vAxis);\n    vec3 diff = p - origin;\n    float uVal = dot(diff, uAxis);\n    float vVal = dot(diff, vAxis);\n    return vec2(uVal, vVal);\n}\n\nvec3 random3( vec3 p ) {\n    return fract(sin(vec3(dot(p,vec3(127.1, 311.7, 191.999)),\n                          dot(p,vec3(269.5, 183.3, 765.54)),\n                          dot(p, vec3(420.69, 631.2,109.21))))\n                 *43758.5453);\n}\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nfloat random1( vec2 p ) {\n    return fract(sin(dot(p,vec2(127.1,311.7)))*43758.5453);\n}\n\nfloat WorleyNoise(vec2 uv) {\n    // Tile the space\n    uv *= 1.0;\n    vec2 uvInt = floor(uv);\n    vec2 uvFract = fract(uv);\n    float minDist = 1.0; // Minimum distance initialized to max.\n\n    // Search all neighboring cells and this cell for their point\n    for(int y = -1; y <= 1; y++) {\n        for(int x = -1; x <= 1; x++) {\n            vec2 neighbor = vec2(float(x), float(y));\n\n            // Random point inside current neighboring cell\n            vec2 point = random2(uvInt + neighbor);\n\n            // Animate the point\n            point = 0.5 + 0.5 * sin(iTime + 6.2831 * point); // 0 to 1 range\n\n            // Compute the distance b/t the point and the fragment\n            // Store the min dist thus far\n            vec2 diff = neighbor + point - uvFract;\n            float dist = length(diff);\n            minDist = min(minDist, dist);\n        }\n    }\n    return minDist;\n}\n\nfloat snow(vec2 p) {\n    return pow(cos(WorleyNoise(p * 1.6 + 0.0026 * iTime)), 100.0);\n}\n\nfloat snow2(vec2 p) {\n    return pow(cos(WorleyNoise(p * 0.8 + 0.0031 * iTime)), 100.0);\n}\n\nfloat snow3(vec2 p) {\n    return pow(cos(WorleyNoise(p * 0.4 + 0.0036 * iTime)), 100.0);\n}\n\nfloat snow4(vec2 p) {\n    return pow(cos(WorleyNoise(p * 0.2 + 0.0041 * iTime)) , 100.0);\n}\n\n#define FBM_OCTAVES 4\n\nfloat mySmootherStep(float a, float b, float t) {\n    t = t*t*t*(t*(t*6.0 - 15.0) + 10.0);\n    return mix(a, b, t);\n}\n\nfloat bilerpNoise(vec2 uv) {\n    vec2 uvFract = fract(uv);\n    float ll = random1(floor(uv));\n    float lr = random1(floor(uv) + vec2(1,0));\n    float ul = random1(floor(uv) + vec2(0,1));\n    float ur = random1(floor(uv) + vec2(1,1));\n\n    float lerpXL = mySmootherStep(ll, lr, uvFract.x);\n    float lerpXU = mySmootherStep(ul, ur, uvFract.x);\n\n    return mySmootherStep(lerpXL, lerpXU, uvFract.y);\n}\n\nfloat fbm(vec2 uv) {\n    float amp = 0.5;\n    float freq = 8.0;\n    float sum = 0.0;\n    for(int i = 0; i < FBM_OCTAVES; i++) {\n        sum += bilerpNoise(uv * freq) * amp;\n        amp *= 0.5;\n        freq *= 2.0;\n    }\n    return sum * cos(iTime * 0.5);\n}\n\nfloat surflet3D(vec3 p, vec3 gridPoint)\n{\n    vec3 t3 = abs(p - gridPoint);\n\n    float tX = 1.0 - 6.0 * pow(t3.x, 5.0) - 15.0* pow(t3.x, 4.0) + 10.0 * pow(t3.x, 3.0);\n    float tY = 1.0 - 6.0 * pow(t3.y, 5.0) - 15.0 * pow(t3.y, 4.0) + 10.0 * pow(t3.y, 3.0);\n    float tZ = 1.0 - 6.0 * pow(t3.z, 5.0) - 15.0 * pow(t3.z, 4.0) + 10.0 * pow(t3.z, 3.0);\n\n    vec3 t = vec3(tX, tY, tZ);\n\n    vec3 gradient = random3(gridPoint);\n    vec3 diff = p - gridPoint;\n    float height = dot(diff, gradient);\n    return height * t.x * t.y * t.z;\n}\n\nfloat PerlinNoise3D(vec3 p)\n{\n    float surfletSum = 0.0;\n    vec3 pXLYLZL = floor(p);\n\n    for(int dx = 0; dx <= 1; ++dx)\n    {\n        for(int dy = 0; dy <= 1; ++dy)\n        {\n            for(int dz = 0; dz <= 1; ++dz)\n            {\n                surfletSum += surflet3D(p, pXLYLZL + vec3(dx, dy, dz));\n            }\n        }\n    }\n\n    return surfletSum * sin(iTime * 0.5);\n}\n\n// use a cosine color palette for noise color\nvec3 a = vec3(0.888, 0.548, 0.648);\nvec3 b = vec3(0.541, 0.883, 0.895);\nvec3 c = vec3(1.402, 1.414, 1.605);\nvec3 d = vec3(0.587, 2.017, 2.287);\n\nvec3 colorPalette(float t)\n{\n    return a + b * cos(2.0 * PI * (t * c + d));\n}\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj)\n{\n    // Initialize to back wall sdf\n    t = plane(pos, vec4(0.0, 0.0, -1.0, 5.0));\n    obj = IDBackWall;\n\n    float t2;\n    // Check left wall\n    if((t2 = plane(pos, vec4(1.0, 0.0, 0.0, 5.0))) < t)\n    {\n        t = t2;\n        obj = IDLeftWall;\n    }\n    // Check right wall\n    if((t2 = plane(pos, vec4(-1.0, 0.0, 0.0, 5.0))) < t)\n    {\n        t = t2;\n        obj = IDRightWall;\n    }\n    // Check top ceiling wall\n    if((t2 = plane(pos, vec4(0.0, -1.0, 0.0, 7.5))) < t)\n    {\n        t = t2;\n        obj = IDCeilingWall;\n    }\n    // Check floor wall\n    if((t2 = plane(pos, vec4(0.0, 1.0, 0.0, 2.5))) < t)\n    {\n        t = t2;\n        obj = IDFloorWall;\n    }\n    // Check for long cube\n    if((t2 = box(rotateY(pos + vec3(0, 1, -2), -27.5 * 3.14159 / 180.0), vec3(1.5, 4, 1.5))) < t)\n    {\n        t = t2;\n        obj = IDLongCube;\n    }\n    // Check for sphere\n    if((t2 = sphere(pos, 1.3, vec3(-3.5 * sin(iTime), 0.6 + 2.0 * cos(iTime), 3.5 * cos(iTime)))) < t)\n    {\n        t = t2;\n        obj = IDSphere;\n    }\n}\n\nfloat sceneMap3D(vec3 pos)\n{\n    // find the smallest t value for marching\n    float t = plane(pos, vec4(0.0, 0.0, -1.0, 5.0));\n\n    t = min(t, plane(pos, vec4(1.0, 0.0, 0.0, 5.0)));\n    t = min(t, plane(pos, vec4(-1.0, 0.0, 0.0, 5.0)));\n    t = min(t, plane(pos, vec4(0.0, -1.0, 0.0, 7.5)));\n    t = min(t, plane(pos, vec4(0.0, 1.0, 0.0, 2.5)));\n    t = min(t, box(rotateY(pos + vec3(0, 1, -2), -27.5 * 3.14159 / 180.0), vec3(1.5, 4, 1.5)));\n    t = min(t, sphere(pos, 1.3, vec3(-3.5 * sin(iTime), 0.6 + 2.0 * cos(iTime), 2.0 + 3.5 * cos(iTime))));\n\n    return t;\n}\n\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n    // If there is no object in 256 steps\n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec, vec3 view)\n{\n    // Use noise function to color the objects\n    float lambert = dot(-lightVec, n);\n    switch(hitObj){\n        case IDLongCube:\n        vec3 noise3D = vec3(random3(p));\n        float perlinNoise = PerlinNoise3D(noise3D);\n        vec3 perlinColor = colorPalette(perlinNoise);\n        return perlinColor * lambert;\n        break;\n        case IDSphere:\n        vec2 uv = sphereUV(vec3(-3.5 * sin(iTime), 0.6 + 2.0 * cos(iTime), 3.5 * cos(iTime)), 1.3, p);\n        float fbmUV = fbm(uv);\n        vec3 fbmColor = colorPalette(fbmUV);\n        return fbmColor * lambert;\n        break;\n        case IDBackWall:\n        // Compute Back Wall UV coordinate:\n        vec3 norBackWall = vec3(0.0, 0.0, -1.0);\n        vec2 backWallUV = planeUV(norBackWall * 5.0, norBackWall, p);\n        float snowSum = 0.845566 + snow(backWallUV) + snow2(backWallUV) + snow3(backWallUV) + snow4(backWallUV);\n        return  vec3(1., 1., 1.) * snowSum * lambert;\n        break;\n        case IDLeftWall:\n        // red left wall\n        return vec3(0.25, 1., 0.5) * lambert;\n        break;\n        case IDRightWall:\n        // Green right wall\n        return vec3(1., 0.5, 0.25) * lambert;\n        break;\n        case IDCeilingWall:\n        // Black ceiling\n        return vec3(1., 1., 1.) * lambert;\n        break;\n        case IDFloorWall:\n        return vec3(1., 1., 1.) * lambert;\n        break;\n        case -1:\n        return vec3(0., 0., 0.);\n        break;\n    }\n    return vec3(0., 0., 0.);\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    // Set the light as a point light\n    vec3 lightPos = vec3(0., 6., -3);\n\n    vec3 lightDir = normalize(isect - lightPos);\n\n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));\n\n\n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\n\nvec3 rayCast(vec3 eye, vec3 ref, vec2 ndc)\n{\n    vec3 F = ref - eye;\n    vec3 R = normalize(cross(F, vec3(0.0, 1.0, 0.0)));\n    vec3 U = normalize(cross(R, F));\n\n    vec3 V = U * length(F) * tan(FOVY * 0.5);\n    vec3 H = R * length(F) * tan(FOVY * 0.5) * float(iResolution.x) / iResolution.y;\n\n    vec3 p = ref + ndc.x * H + ndc.y * V;\n\n    return normalize(p - eye);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized PIxel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // [-1, 1]\n    uv = uv * 2.0 - vec2(1.0, 1.0);\n\n    vec3 eye = vec3(0, 3, -20);\n\n    vec3 ref = vec3(0, 0, 100);\n\n    vec3 rayDir = rayCast(eye, ref, uv);\n\n    Intersection isect = sdf3D(rayDir, eye);\n\n    // Output to screen\n    fragColor = vec4(isect.color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}