{"ver":"0.1","info":{"id":"7lj3DD","date":"1623948878","viewed":171,"name":"vec4(1,1,1,vec4(1,1,1,1))","username":"Xor","description":"Demonstrating a fun shader golfing hack.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Here's a quick demonstration of some odd vector behavior.\n    This is a neat trick for shader code golfing because it means you\n    don't have to worry about the extra components in a vector.\n    All the extra components just get discarded.\n\n    For example, you can make a tiny Sierpinski fractal like so:\n    \n    int(p.x) & int(p.y) => int(p) & int(p.y)\n\n    That brings it from 18 characters to only 16!\n*/\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n   fragColor = vec4(1,1,1,vec4(1,1,1,vec4(1,1,1,vec4(1,1,1,vec4(1,1,1,vec4(1,1,1,1))))));\n}","name":"Image","description":"","type":"image"}]}