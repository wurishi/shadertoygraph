{"ver":"0.1","info":{"id":"wlffW2","date":"1597746368","viewed":179,"name":"Animated Circle Robin","username":"9robin3","description":"Animated Circle Robin","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["animatedcricle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    float radius = 0.3;\n\n    //For something that goes from low to high, use multiply on UVs to set start size:\n    float radialGradient = length(uv) * 5.;\n\n    //For something that goes from high to low, use division on UVs to set start size: \n    //float radialGradient = length(uv) / 5.;\n\n    //Set the time of the animation / transition\n    //float animTime = iTime * 2.;\n\n    //Use this to make the circle stop growing, and repeat, loop after it reached\n    //its max threshold value (fract is the one that handles the stop and loop):\n    float animTime = pow(fract(iTime * .7), 1.);\n    \n    //Smoothstep to change whats visible of the circle over input (parameter 3), \n    //In this case input is radialGradient\n\n    //This code makes the circle go from small to big, min = max and vice versa!\n    float myCircle = smoothstep(0.5 + animTime, 0.02 + animTime, radialGradient);\n\n    //This code makes the circle go from big to small, min = min and vice versa!\n    //float myCircle = smoothstep(0.5 - animTime, 0.02 - animTime, radialGradient);\n\n     \n    vec3 col = vec3(0.0,1.0,0.0);\n    vec3 circleCol =  myCircle * col;\n   \n    // Output to screen\n    fragColor = vec4(circleCol,myCircle);\n}","name":"Image","description":"","type":"image"}]}