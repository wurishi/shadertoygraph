{"ver":"0.1","info":{"id":"4llSDf","date":"1440234301","viewed":646,"name":"AR Experiment","username":"jackdavenport","description":"A raytracer which picks textures from the webcam to use as reflections. Move sphere with mouse. Comment out line 2 to disable fresnel blending. If anyone knows a better way, please comment! Based on the PS4 Playroom AR bot: http://i.imgur.com/V8HquNn.gif","likes":3,"published":1,"flags":2,"usePreview":0,"tags":["test","raytracer","ar","augmented","reality"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FRESNEL\n\nstruct Ray {\n  \n    vec3 origin;\n    vec3 direction;\n    \n};\n    \nstruct RaycastHit {\n      \n    vec3 point;\n    vec3 normal;\n    float det;\n    int type;\n        \n};\n\nRaycastHit intersectSphere(vec3 position, float radius, const Ray ray) {\n    \n\tfloat a = dot(ray.direction, ray.direction);\n    float b = 2. * dot(ray.direction, ray.origin - position);\n    float c = dot(ray.origin - position, ray.origin - position) -(radius * radius);\n    float det = (b * b) - 4. * a * c;\n\n\tfloat lambda = (-b -sqrt(det)) / (2. * a);\n\tvec3 p = ray.origin + lambda * ray.direction;\n\tvec3 n = p - position;\n    \n    RaycastHit hit;\n    hit.point = p;\n    hit.normal = normalize(n);\n    hit.det = det;\n    hit.type = (det >= 0. && lambda >= 0.) ? 0 : -1;\n    \n    return hit;\n        \n}\n\nvec3 reflectCam(vec3 pos, vec3 normal, vec2 uv, Ray ray) {\n \n    vec3 ref = reflect(ray.direction, normal);\n   \t\n    float scale = .3;\n    float u = normal.x + 1.;\n    float v = normal.z;\n    \n    vec2 ruv = vec2(mod(u * scale, 1.), mod(v * scale, 1.));\n    return texture(iChannel0, ruv).xyz;\n    \n}\n    \nvec4 shade(Ray ray, vec2 uv) {\n\n    vec3 spherePos = vec3(0.,0.,4.);\n    \n    if(iMouse.z > 0.) {\n     \n        vec2 m = iMouse.xy / iResolution.xy;\n        spherePos = vec3(-3. + (m.x * 6.), -1.5 + (m.y * 3.), 4.);\n        \n    }\n    \n    RaycastHit sphere = intersectSphere(spherePos,.6,ray);\n    \n    if(sphere.type >= 0) {\n     \n        float texScale = 1.;\n        float u = sphere.normal.x;\n        float v = sphere.normal.z;\n        \n        // Fresnel borrowed from TekF's Bouy Shader\n        // Source: https://www.shadertoy.com/view/XdsGDB\n        #ifdef FRESNEL\n        \tfloat ndotr = dot(sphere.normal,ray.direction);\n\t\t\tfloat fresnel = pow(1. - abs(ndotr),2.);\n\t\t\tfresnel = mix( .001, 1.0, fresnel );\n        #endif\n        \n        vec2 st = vec2(mod(u * texScale, 1.), mod(v * texScale, 1.));\n        vec3 color = texture(iChannel1, st).xyz;\n        \n        float m = .8;\n        \n        #ifdef FRESNEL\n        \tm = fresnel;\n        #endif\n        \n        color = mix(color, reflectCam(sphere.point, sphere.normal, st, ray), m);\n        return vec4(color,1.);\n        \n    }\n    \n    return texture(iChannel0, uv);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 ruv = (fragCoord.xy - iResolution.xy / 2.) / iResolution.y;\n    Ray ray = Ray(vec3(0.,0.,0.),vec3(ruv.x,ruv.y,1.));\n    \n\tfragColor = shade(ray, uv);\n   \n}","name":"Image","description":"","type":"image"}]}