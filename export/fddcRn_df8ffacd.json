{"ver":"0.1","info":{"id":"fddcRn","date":"1652978491","viewed":71,"name":"Horloge Eclipse","username":"LoganOracio","description":"Just rotating stuff","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["clockwork","hologerie"],"hasliked":0,"parentid":"7tjyRG","parentname":"Horlogerie 1"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265365897932384626433832;\n\nfloat circle_dist(float a, float b)\n{\n    return min(abs(a-b),min(abs(a+2.*PI-b),abs(a-2.*PI-b)));\n}\nmat2 rotate(float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(c, -s, s, c);\n}\nfloat pingpong(float a, float b) {\n\tif (b == 0.0) {\n\t\treturn 0.0f;\n\t} else {\n\t\treturn abs(fract((a - b) / (b * 2.0)) * b * 2.0 - b);\n\t}\n}\nvec2 polar_(vec2 uv)\n{\n    return vec2(length(uv),atan(-uv.x,-uv.y));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float TIME = iDate.a;\n    \n    //TIME = iTime*1000.0; //UNCOMMENT TO TEST ANIMATION AT FASTER SPEED\n    \n    vec2 uv = ( 2.* fragCoord - iResolution.xy ) / iResolution.y;\n    vec2 polar = vec2(length(uv),atan(-uv.x,-uv.y));\n    \n    float seconde = fract(TIME/60.0)*2.*PI;\n    float troteuse = circle_dist(floor(polar.y/0.10471975512)*0.10471975512,seconde-0.05235987755);\n    \n    troteuse = .1/(smoothstep(0.,4.*PI,troteuse)+0.01);\n    troteuse = (.054-polar.x*.05)*(troteuse);\n    \n    float second_lines = abs(fract(polar.y/0.10471975512)-.5)+2.;\n    \n    troteuse = 9.*max(troteuse,.0077*second_lines);\n    float temp = 480./(2.*PI);\n    seconde = -floor(seconde*temp)/temp;\n    vec2 uv2 = rotate(seconde)*uv*3.0;\n    troteuse = min(troteuse,max(abs(uv2.x)+.14,abs(uv2.y-.3)-.45));\n    \n    float final = troteuse;\n    \n    float minute = -fract(TIME/3600.0)*2.*PI;\n    \n    uv2 = rotate(minute)*uv*3.0;\n    vec2 polarm = vec2(length(uv2),atan(-uv2.x,-uv2.y));\n    float grande = abs(polar.x - .516)+(.14+smoothstep(.5,10.,abs(polarm.y))*.2);\n    \n    grande = min(grande,max(abs(uv2.x)+.13,abs(uv2.y+-.4)-.4));\n    \n    final = min(final,grande);\n    \n    float heure = -fract(TIME/43200.0)*2.*PI;\n    uv2 = rotate(heure)*uv*3.0;\n    \n    float petite = max(abs(uv2.x)+.13,abs(uv2.y+-.2)-.2);\n    \n    final = min(final,petite);\n    fragColor = vec4(final);\n    fragColor = vec4(smoothstep(.7,-.7,(final-.15)/fwidth(final)));\n}","name":"Image","description":"","type":"image"}]}