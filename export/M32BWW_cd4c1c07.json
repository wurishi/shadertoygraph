{"ver":"0.1","info":{"id":"M32BWW","date":"1729478932","viewed":231,"name":"Sitar synthesizer 9","username":"jarble","description":"A sitar synthesizer.","likes":5,"published":3,"flags":8,"usePreview":0,"tags":["fractal","music","mosaic","rug"],"hasliked":0,"parentid":"M3fSzf","parentname":"Red and white mosaic (music)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\nconst float scale = 1.5;\n\n\nvoid transform(inout vec2 uv, inout vec2 t2, inout vec3 col,inout float c1){\n\n        //uv.x -= sign(uv.y)/4.;\n        //uv.y += sign(uv.x)/4.;\n        uv.x -= 1./2.;\n        uv = (uv+t2)/scale;\n        \n        \n        //if(uv.y>-1./4.)\n        uv = ((vec2(uv+vec2(.5,1.5))*scale)-.5)/scale;\n\n        //else uv.x -= 1./4.;\n        \n        t2 = triangle_wave(uv+.5);\n        uv =\n            t2/2.-triangle_wave(uv.yx)\n        ;\n        uv.y += 1./2.;\n        {t2.x = (t2.x+1.*sign(t2.y-t2.x)); }\n                        \n        \n}\n\nvec3 fractal(vec2 uv){\n    vec3 col = vec3(0.);\n    vec2 t2 = vec2(0.);\n    float c1=0.;\n    for(int k = 0; k < 12; k++){\n        \n        c1 =\n            max(abs(t2.y-t2.x)/2.,c1)\n            //max(sign(t2.x-t2.y)/2.,c1)\n        ;\n        transform(uv,t2,col,c1);\n        c1 =\n            max(1.-abs(2.*c1-1.),0.)\n        ;\n        col.x =\n            c1\n        ;\n        if(t2.y<t2.x)\n        col =\n            //abs(col-(1.-(c1*(t2.y-t2.x))))\n            //abs(col/2.-((c1*(t2.y-t2.x))))\n            abs(col/2.-(1.+(c1)))\n            \n            //abs(col-(1.-(c1)/2.)) //rug pattern\n            \n            //vec3(1.+c1)\n        ;\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    float t1 = 6.;\n    \n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv.xy += iTime/t1/12.;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec3 col1 = fractal(uv);\n    fragColor = vec4(col1/2.,1.0);\n    //fragColor = pow(fragColor ,vec4(1./1.8)); //gamma correction\n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//remix of https://www.shadertoy.com/view/mtSBzV\n\nfloat fmod(float a, float b){\n\n    a +=\n        floor(mod(b/2.,2.))\n        //floor(mod(a/2.,2.))\n    ;\n    float\n    a2 = mod(floor(a),b),\n    a3 =\n        mod(floor(a/b),b)\n    ;\n    return\n        mod(mod(a2*a3/b,b)*b,5.)\n        //mod(mod((a2-a3)/b/2.,b*2.)*b*2.,5.)\n    ;\n}\n\n\nfloat prime_rhythm(float time){\n    return\n        (1.+fmod(time/5.,2.))/(1.+fmod(time/3.,2.))\n    ;\n}\n\n\n#define fract1(a) (1.-fract(-a)*fract(-a))\n\n\nvec2 note1(vec2 rhythm,float attack,float duration){\nreturn vec2(\n      //-log(attack+.5/duration*fract1(rhythm.x))\n      -log(attack+.5/duration*fract1(rhythm.y))\n      //(-log(attack+.5/duration*fract1(rhythm.x))),(-log(attack+.5/duration*fract1(rhythm.y)))\n  );\n}\n\nvec2 sitar(vec2 a,vec2 nb){ \n  return\n  a/16./2.*abs(log(1./8.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  -log(1./16.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2./4.))) \n  ;\n}\n\n\nvec2 sitar1(vec2 a,vec2 nb){ \n    return\n        //sitar(a,nb)\n        sitar(a,nb)+sitar(a/2.,nb*2.)/2.\n    ;\n}\n\n#define instrument1 instrument2\n\n\nvec2 mainSound1(int samp, float time,float scale,int instrument,float duration){\n  float s1 =\n      8.,\n  tempo1 =\n      prime_rhythm(time)\n      //prime_rhythm(time/2.)/prime_rhythm(time)\n  ,\n  t = s1*time/4./tempo1,\n  t4 = t/prime_rhythm(time+11.)/(1.+fmod(t/8.,2.)),\n  t1 = fmod(t4,2.),\n  t5 = t*2./prime_rhythm(time+7.),\n  t3 = (1.+fmod(t5,2.)),\n  t6 = time*8./t3,\n  m3 =\n      floor(fmod(t6+mod(t6/8.,3.)-mod(t6/8.,2.),s1/2.)/2.),\n  m2 =\n      1. + fmod(t/t3/2.,s1/2.)\n  ,attack=1./64.*4.;\n  vec2\n  rhythm=\n      //t*vec2(1./2./prime_rhythm(time+14.),1./prime_rhythm(time+7.))\n      t*vec2(1./prime_rhythm(time+7.))\n      //t*vec2(1./prime_rhythm(time+7.))\n  ,a=\n      //note1(rhythm,attack,duration)*duration/2.\n      (note1(rhythm,attack,duration)*duration/2./2.+note1(rhythm,attack,duration/2.)*duration/2.)\n  ,\n  nb = vec2(\n      t*pow(2.,(m3+m2-(t1)*4.)/7.+scale)*tempo1\n  ),\n  nb1 = vec2(t*pow(2.,(4.+t1*4.)/7.+scale))*tempo1\n  ;\n  //nb /= tempo1;\n  return\n      //instrument1(a/2.,nb,instrument)/2.-instrument1(a,nb,instrument)\n      //instrument1(a,nb,instrument)-instrument1(a*a,nb/2.,instrument)/4.\n      \n      //2.*abs(abs(sitar1(a,nb*2.)-sitar1(a*a,nb))-sitar1(a*a,nb)/2.)\n      \n      //less distortion\n      //abs(abs(sitar1(a,nb*2.)/2.-sitar1(a*a,nb))-sitar1(a/2.,nb*2.))\n\n      sitar1(a*a,nb)-sitar1(a,nb*2.)\n\n\n      //abs(abs(sitar1(a,nb*2.)-sitar1(a*a,nb))-sitar1(a/2.,nb*2.))\n      //abs(abs(sitar1(a,nb*2.)*1.5-sitar1(a*a,nb))-sitar1(a,nb*2.)/2.)\n      //sitar1(a/2.,nb*2.)+abs(sitar1(a,nb*2.)-sitar1(a*a,nb))\n\n      \n      //instrument1(a/2.,nb,instrument)-instrument1(a,nb/2.,instrument)\n  ;\n}\n\nvec2 mainSound1(int samp, float time,float scale,int instrument){\n    return mainSound1(samp, time,scale,instrument,1.);\n}\n\nvec2 mainSound(int a,float b){\n    float\n        scale2 = 7.-3./7.,\n        scale1=scale2-1.\n    ;\n    return\n        (mainSound1(a,b,scale1,4,2.)-mainSound1(a,b,scale1,4,1.))/2.\n        +(mainSound1(a,b,scale1,4,2.)-mainSound1(a,b,scale1-1.,4,1.))/4.\n    ;\n}","name":"Sound","description":"","type":"sound"}]}