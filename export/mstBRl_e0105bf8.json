{"ver":"0.1","info":{"id":"mstBRl","date":"1697548739","viewed":49,"name":"Captain Kaleidoscope","username":"CaptainCoder","description":"Captain Coder's first shader with FuleSnabel!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["kaleidoscope"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 q = fragCoord/iResolution.xy;\n    q = -1.0 + 2.0*q;\n\n    // Time varying pixel color\n    // vec2 uv = -1. + 2. * inData.v_texcoord;\n    // vec2 q = inData.v_texcoord*2 - 1;\n    q.x = abs(q.x);\n//    q.y = abs(q.y);\n    q.x += sin(time)/2.0;\n    q.y += cos(time)/3.0;\n    q *= ROT(time/3.0);\n    // Uses RGB values\n    vec3 col = vec3(0);\n    \n    // Distance Field: \n    // Function that given a point tells you the distance to\n    // the surface of the object\n//    float d = length(q) - 0.5;\n    float d = sdEquilateralTriangle(q, 1.0);\n    if (d < 0.0) \n    {\n        col = 0.5 + sin(vec3(0, 1, 2) + time + d*10.0);\n//        col = vec3(1, .5 * sin(time*5), 1);    \n    }\n    \n    col += sin(d*20.0);\n    \n    fragColor = vec4(col, 1.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}