{"ver":"0.1","info":{"id":"4ljBWd","date":"1517589849","viewed":814,"name":"wave greek frieze 0: tuto","username":"FabriceNeyret2","description":"unpacked version of one single (animated) spiral.\nBase for greek+frieze shaders  [url]https://www.shadertoy.com/results?query=greek+frieze[/url]","likes":23,"published":3,"flags":0,"usePreview":0,"tags":["waves","patterns","2tweets","short","greek","frieze"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Base for greek+frieze shaders  https://www.shadertoy.com/results?query=greek+frieze\n\nvoid mainImage( out vec4 O,vec2 u ) \n{\n    O -= O;\n    vec2 R = iResolution.xy,\n         U = ( u+u - R ) / R.y,                // normalize coordinates\n         N = floor(U);                         // tile number\n    U = fract(U)-.5;                           // local tile coords in [-.5,.5]Â²\n    \n    float v, d = length(U),                    // distance to tile center\n          t = 30.*sin( ( iTime - N.x ) / 5. ), // note the time delay with position\n          a = t * max(0.,.5-d );               // angle ~time, and decrease with d\n    U *= mat2(cos(a),-sin(a),sin(a),cos(a));   // rotate frame by angle(t,d)\n    v = U.y;                                   // pre-distortion pattern = vertical gradient.\n\n    O += u.x < R.x/2.                          // Display:\n        ? 5.*v                                 //  left: simple gradient\n        : smoothstep(-1.,1.,v/fwidth(v) );     //  right: ased clamp\n}\n    \n        \n\n/**  // 152 chars   golfed version\n\n#define mainImage(O,u)            \\\n\tvec2 U = u/iResolution.y;     \\\n    U.y = dot( cos( (2.*(iTime)+7.) * max(0.,.5-length(U = (U)-.5)) - vec2(33,0) ), U); \\\n\tO += smoothstep(-1.,1.,U/fwidth(U)).y\n        \n\n/**/","name":"Image","description":"","type":"image"}]}