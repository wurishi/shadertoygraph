{"ver":"0.1","info":{"id":"Ws3XWS","date":"1572716261","viewed":141,"name":"2D Checkerboard","username":"npreis1999","description":"This is a 2D Checkerboard.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["checkerboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Draw a rectangle with the given size\nfloat box(vec2 uv, vec2 size, float smoothEdges)\n{\n    size = vec2(0.0) - size * 0.5;\n    vec2 aa = vec2(smoothEdges * 0.5);\n    vec2 box = smoothstep(size, size + aa, uv);\n    box *= smoothstep(size, size + aa, vec2(1.0) - uv);\n    return box.x * box.y;\n}\n\n//Create alternating tiles\nvec3 altTile(vec2 tile)\n{\n    vec3 shape = vec3(0.0);\n    vec3 black_tile = vec3(0.0, 0.0, 0.0);\n    vec3 white_tile = vec3(1.0, 1.0, 1.0);\n    \n    float index = 0.0;\n    \n    index = mod(floor(tile.x) + floor(tile.y),2.0);\n    tile = fract(tile);\n    \n    //Determine if even or odd\n    if(index == 0.0)\n    {\n        //set this location to a white tile\n        shape = vec3(box(tile, vec2(0.5, 0.5), 0.05)) * white_tile;\n    }\n    else \n    {\n        //set this location to a black tile\n        shape = vec3(box(tile, vec2(0.5, 0.5), 0.05)) * black_tile;\n    }\n    return shape;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv *= 8.0;\n    \n    // Output to screen\n    fragColor = vec4(altTile(uv), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}