{"ver":"0.1","info":{"id":"4ccBz4","date":"1732741977","viewed":95,"name":"Gradient Pixel with Magnifier","username":"LastfahrerLudwig","description":"Two-ways gradient with pixel-like pattern in-between. Added magnifier that is controllable with the mouse input (left-click). The border displays the current color in the position of the cursor.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["screen","pixel","gradient","magnifyer","magnifyingplass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shader by LastfahrerLudwig on Shadertoy. Distribute however you see fit\n\n#define BLACK vec3(0,0,0)\n#define WHITE vec3(1,1,1)\n\n#define SPHERE_SIZE 0.6\n#define MAGNIFICATION_STRENGTH 2. \n#define SIZE_BORDER_MAGNIFIER 0.95 // Should be between 0 (large) and 1 (non-existent)\n\nfloat sphere(vec2 uv, vec2 position, float size) {\n    return smoothstep(SIZE_BORDER_MAGNIFIER * size, size, length(uv - position));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;    \n    // Normalize uvs to [-1,1]\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec2 mouse_pos = iMouse.xy/iResolution.xy;\n    mouse_pos = mouse_pos * 2. - 1.;\n    mouse_pos.x *= iResolution.x/iResolution.y;\n    // If mouse is not pressed, animate magnifying glass\n    if(iMouse.z <= 0.) {\n        mouse_pos = vec2(sin(0.1*iTime), 0.03*sin(iTime * 0.4));\n    }\n    \n    vec3 sphere = 1. - vec3(sphere(uv, mouse_pos, SPHERE_SIZE));\n    \n    if(sphere.x > 0. && MAGNIFICATION_STRENGTH != 1.) {\n        vec2 uv_vec = uv - mouse_pos;\n        uv = mouse_pos + uv_vec / MAGNIFICATION_STRENGTH;\n        if (sphere.x < 1.) {\n            uv = mouse_pos;\n        }\n    }\n    \n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    if (sphere.x > 0.) {\n        vec2 uv_to_pixel = (uv + 1.) / 2.0 * iResolution.xy;\n        uv_to_pixel.x /= float(iResolution.x/iResolution.y);\n        col = mod(uv_to_pixel.x, 10.) < 5. || mod(uv_to_pixel.y, 10.) < 5. ? BLACK : WHITE;\n    } else {\n        col = mod(fragCoord.x, 10.) < 5. || mod(fragCoord.y, 10.) < 5. ? BLACK : WHITE;\n    }\n\n    bool isWhite = col == WHITE ? true : false;\n\n    col *= (sin(iTime + vec3(uv, clamp(uv.x - uv.y, 0., 1.))) + 1.) / 2.;\n    \n    if (!isWhite) {\n        col = (sin(-iTime * 0.5 - vec3(uv, clamp(uv.y - uv.x, 0., 1.))) + 1.) / 2.;\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}