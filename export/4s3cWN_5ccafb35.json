{"ver":"0.1","info":{"id":"4s3cWN","date":"1518805942","viewed":914,"name":"white noise LOD (on sphere)","username":"FabriceNeyret2","description":"For some application (expressive rendering, NPR, data visualization...), one want to keep screen-space variance of surface noise.\nLeft: simple MIPmap.  Right: preserving screen-space variance.\n\n( The strange pattern at distance is in the texture data ! )","likes":11,"published":3,"flags":0,"usePreview":0,"tags":["noise","mipmap","screenspace","npr","variance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define T(U) textureLod(iChannel0, U, v)\n//#define tex(U,v) T(U)       // color noise\n//#define tex(U,v) T(U).rrrr  // B&W noise ( ugly look at coarse MIPmap levels )\n  // Scrambles r,g,b,a fields to fix most of the ugly look in base data MIPmap\n//#define tex(U,v) .5+ vec4( T(U).r + T(U+.5).g + T(U+vec2(.5,0)).b  + T(U+vec2(0,.5)).a -2. ) /2.  \nconst float a = 1.3; mat2 R = mat2(cos(a),-sin(a),sin(a),cos(a));\n  #define tex(U,v) .5+ vec4( T(R*U).r + T(U).g + T(U*R).b  + T(U*R*R).a -2. ) /2.  \n\nvec4 texLod(vec2 U, float n) \n{\n    //if ( n < 0. ) return texture(iChannel0, U).rrrr;\n    // below reproduces ordinary MIPmap when n < 0.\n    \n    float v = max( 0., log2( 256.* max(length(dFdx(U)),length(dFdy(U)) ) )); \n          \n    vec4 s = tex(U, v);                            // MIPmap of white noise\n    if ( n > 0. ) s = .5 + (s-.5)* exp2(v);        // restore std dev\n    return s;\n}\n\n// sphere from https://shadertoy.com/view/XstXzs\nvoid mainImage( out vec4 O, vec2 u ) {\n    float s = 2.+ 1.5*sin(iTime);\n    vec2 R = iResolution.xy,\n  \t     U = (u+u - R ) / R.y,  \n         V = U *= s;\n    V.x = acos( V.x / cos( V.y = asin(V.y) )) - iTime;\n    O =  mix( texLod(U, U.x),                      // background\n              texLod(V, U.x) ,                     // sphere\n              smoothstep(0.,3.*s/R.y,1.-length(U)) // AA transition \n            );\n    //if (O.x>1.) O = vec4(1,0,0,0);\n    //if (O.x<0.) O = vec4(0,1,0,0);\n}\n","name":"Image","description":"","type":"image"}]}