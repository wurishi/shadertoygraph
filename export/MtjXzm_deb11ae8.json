{"ver":"0.1","info":{"id":"MtjXzm","date":"1442656941","viewed":1085,"name":"Holographic Projection","username":"weston","description":"A blue hologram projecting from an origin","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Borrowed from https://www.shadertoy.com/view/4dX3WN\n\nvec3 rgb2hsv(vec3 rgb)\n{\n\tfloat Cmax = max(rgb.r, max(rgb.g, rgb.b));\n\tfloat Cmin = min(rgb.r, min(rgb.g, rgb.b));\n    float delta = Cmax - Cmin;\n\n\tvec3 hsv = vec3(0., 0., Cmax);\n\t\n\tif (Cmax > Cmin)\n\t{\n\t\thsv.y = delta / Cmax;\n\n\t\tif (rgb.r == Cmax)\n\t\t\thsv.x = (rgb.g - rgb.b) / delta;\n\t\telse\n\t\t{\n\t\t\tif (rgb.g == Cmax)\n\t\t\t\thsv.x = 2. + (rgb.b - rgb.r) / delta;\n\t\t\telse\n\t\t\t\thsv.x = 4. + (rgb.r - rgb.g) / delta;\n\t\t}\n\t\thsv.x = fract(hsv.x / 6.);\n\t}\n\treturn hsv;\n}\n\nfloat chromaKey(vec3 color)\n{\n\tvec3 backgroundColor = vec3(0.157, 0.576, 0.129);\n\tvec3 weights = vec3(4., 1., 2.);\n\n\tvec3 hsv = rgb2hsv(color);\n\tvec3 target = rgb2hsv(backgroundColor);\n\tfloat dist = length(weights * (target - hsv));\n\treturn 1. - clamp(3. * dist - 1.5, 0., 1.);\n}\n\n//based on Mario scan line:\n\nvec3 Scanline(vec3 color, vec2 uv)\n{\n   float scanline    = clamp( 0.95 + 0.05 * cos( 3.14 * ( uv.y + 0.008 * iTime ) * 240.0 * 1.0 ), 0.0, 1.0 );\n   float grille    = 0.85 + 0.15 * clamp( 1.5 * cos( 3.14 * uv.x * 640.0 * 1.0 ), 0.0, 1.0 );    \n   return color * scanline * grille * 1.2;\n}\n\n//from tv flickering: https://www.shadertoy.com/view/4tSGzy\n\nfloat rand(vec2 seed) {\n    float dotResult = dot(seed.xy, vec2(12.9898,78.233));\n    float sin = sin(dotResult) * 43758.5453;\n    return fract(sin);\n}\n\n//mine:\n\nvec3 makeBlue(vec3 i)\n{\n    return vec3(0.0, 0.0, (i.r + i.g + i.b)/3.0);\n}\n\nvec3 edgeSample(vec2 uv)\n{    \n  if(uv.x > 1.0) return vec3(0.0);\n  if(uv.x < 0.0) return vec3(0.0);\n  if(uv.y > 1.0) return vec3(0.0);\n  if(uv.y < 0.0) return vec3(0.0);\n  vec3 c = texture(iChannel0, clamp(uv,0.0,1.0)).rgb;\n  float incrustation = chromaKey(c);\n  //color = changeSaturation(color, 0.5);\n  c = mix(c, vec3(0.0), incrustation);\n  return c;\n}\n\nvec3 a(vec2 uv, float y, vec2 emmitPoint)\n{\n   //y=0.5;\n   //emmitPoint = vec2(mod(iTime, 1.0),-(mod(iTime, 1.0)));\n\n   uv -= emmitPoint;\n   y -= emmitPoint.y;\n   float ym = y;\n\n   vec2 centre = vec2(0.0, y);\n   vec2 scale = vec2(2.0, 2.0 * (0.5/y));\n\n   vec2 n = (uv - centre)*scale * vec2(1.0,-1.0);\n   \n   vec2 n2 = vec2(n.x * (1.0/(1.0-n.y)), n.y);\n   \n   vec2 uv2 = n2 * vec2(1.0,-1.0) / scale + centre;\n   \n   uv2 += emmitPoint;\n   y += emmitPoint.y;\n   \n   uv2.y = y;\n   \n   vec3 c = edgeSample(uv2);\n   \n   c *= clamp(((ym+0.2)-uv.y)/ym, 0.0, 1.0);\n   \n   return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = fragCoord.xy / iResolution.xy;\n    \n   //Invert for video\n   uv = vec2(uv.x,1.0-uv.y);\n    \n   uv = (uv - vec2(0.5,0.0)) * 1.5 + vec2(0.5,-0.5);\n    \n   vec2 uvFlicker = uv;\n   \n   //flicker\n   uvFlicker.x += rand(vec2(0,uv.y)*(iTime)) * 0.005;\n   uvFlicker.y += rand(vec2(0,uv.x)*(iTime)) * 0.005;\n    \n   vec3 c = vec3(0.0);\n   \n   float inc = 0.2;\n   vec2 projectionPoint = vec2(0.0,-0.5);\n   \n   for(float i=0.0;i<=1.0;i += 0.2){\n      c += a(uv, i, projectionPoint) * inc * 3.0;\n   }\n   \n   c += Scanline(edgeSample(uvFlicker)*1.5, uv);\n   \n   fragColor = vec4(makeBlue(c), 1.0);\n}","name":"Image","description":"","type":"image"}]}