{"ver":"0.1","info":{"id":"wtcSD8","date":"1580840687","viewed":126,"name":"Chaos Window","username":"bignobody","description":"I watched this Numberphile video on The Feigenbaum Constant ( https://www.youtube.com/watch?v=ETrYE4MdoLQ ) which talks about the Logistic Map equation. I wanted to try and make something pretty with it and this is what I came up with.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["chaos","logisticmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat logmap(float l, float v)\n{\n\treturn l*v*((1.0)-v);   \n}\n\nfloat iterate(vec2 uv, float toff)\n{\n\tint maxI = 128;\n    int i = 0;\n    float le = 0.0;\n    float x = uv.x;\n    while (i < maxI)\n    {\n\t\tx = logmap( 2.5+sin(iTime+toff), x+uv.y);\n        le = x;\n        if (le < 0.0001)\n        {\n            return le;\n        }\n        i ++;\n    }\n    return le;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord-0.5 * iResolution.xy)/iResolution.y;\n\tuv *= 2.6;\n    float off = (sin(iTime)*0.5+0.5)*0.1;\n\tvec3 col = vec3(pow(iterate(abs(uv),-off),4.0),pow(iterate(abs(uv),0.0),4.0),pow(iterate(abs(uv),off),4.0));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}