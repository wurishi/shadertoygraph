{"ver":"0.1","info":{"id":"tlj3RR","date":"1558330502","viewed":161,"name":"Hypnotic Owl","username":"mosaic","description":"Learning how to use different colour channels, fract and mirror effect\n\nOwl? Frog? Garfield the cat? What shapes do you see","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat random(vec2 st) {\n\treturn fract(sin(dot(st, vec2(15.13123, 45.56251))) * 45666.12) *2.-1.;\n}\n\nfloat noise2(vec2 st) {\n\tvec2 i = floor(st);\n\tvec2 f = fract(st);\n\t// Create grid to spread out our noise\n\tfloat a = random(i);\n\tfloat b = random(i + vec2(1.0, 0.0));\n\tfloat c = random(i + vec2(0.0, 1.0));\n\tfloat d = random(i + vec2(1.0, 1.0));\n\t// Create our hermite cubic interpolation\n\tvec2 h = f * f * (3.0 - 2.0 * f);\n\t// Do our bilinear interpolation:\n\treturn \tmix(a, b, h.x) + \n\t\t\t(c - a) * h.y * (1.0 - h.x) +\n\t\t\t(d - b) * h.x * h.y;\n}\nfloat fbm(vec3 p){\n\tfloat amp = 2.0;\n\tfloat fbm = 0.;\n\tfloat scale = 2.0;\n\tfor(int i = 0; i < 5; i++){\n\t\tfbm += noise2(p.xy) * amp;\n\t\tp *= scale;\n\t\tamp *= 0.5;\n\t}\n\treturn fbm/12.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st  = fragCoord/iResolution.y;\n    \n    //this line creates the  mirror\n \tst.x = 0.8 - abs(0.9 - st.x );\n    \n    float blue = distance(st,vec2(0.2,0.4))*3.;\n    \n    float red = distance(st,vec2(0.5,0.7))*3.;\n    \n    float yellow =distance(st,vec2(0.4,0.2))*3.;\n\n    \n    vec3 colour= vec3(blue,red,yellow)-(iTime)/5.;\n    \n       \n    //uncomment line 52 and comment out line 53 for fbm effect\n   // colour = fract(colour*1.1+fbm(st.xxx))/vec3(0.31);\n    colour = fract(colour*1.1)/vec3(0.31);\n    \n    \n    // Output to screen\n    fragColor = 1.-vec4(colour,1.0);\n}\n","name":"Image","description":"","type":"image"}]}