{"ver":"0.1","info":{"id":"4lKyDm","date":"1536598710","viewed":325,"name":"kraft","username":"k0rzun1n","description":"kraft paper texture procedural shader","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["procedural","texture","paper","dirt","fibers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);}\nfloat snoise(vec2 v)\n{\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    // First corner\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n\n    // Other corners\n    vec2 i1;\n    //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n    //i1.y = 1.0 - i1.x;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    // x0 = x0 - 0.0 + 0.0 * C.xx ;\n    // x1 = x0 - i1 + 1.0 * C.xx ;\n    // x2 = x0 - 1.0 + 2.0 * C.xx ;\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n\n    // Permutations\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n    // Compute final noise value at P\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\nfloat sdLine( vec2 p, vec2 a, vec2 b, float r )\n{\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\nvec2 opRep( vec2 p, vec2 c )\n{ \n    return mod(p,c)-0.5*c;\n}\nvec2 opRepFlip( vec2 p, vec2 c )\n{ \n    vec2 fpc = floor(p/c);\n    float flip = mod((fpc.x + fpc.y), 2.);\n    vec2 ret = p - c*(fpc + 0.5);\n    if(flip >= 1.)return ret.yx;\n    return ret;\n}\nvec2 opWarp( vec2 p )\n{ \n// return vec2(sin(p.x+2.*p.y),sin(p.y+p.x));\nreturn vec2(p.x+0.1*sin(20.*p.y),p.y);\n}\n\nfloat nnoise( in vec2 uv ){return 0.5 + 0.5*snoise(uv);} //norm [0,1]\nfloat rnoise( in vec2 uv ){return 1. - abs(snoise(uv));} //ridge\nfloat fbm( vec2 x , int oct ) \n{\n    float f = 1.98;  // could be 2.0\n    float s = 0.49;  // could be 0.5\n    float a = 0.0;\n    float b = .9;\n    for( int i=0; i < 10; i++ )\n    {\n        if(i >= oct) break;\n        float n = nnoise(x);\n        a += b * n;          // accumulate values\t\t\n        b *= s;\n        x *= f;\n    }\n    return a;\n}\nfloat fbmr( vec2 x, int oct ) \n{\n    float f = 1.98;  // could be 2.0\n    float s = 0.9;  // could be 0.5\n    float a = 0.0;\n    float b = .4; //0.5\n    for( int i=0; i < 10; i++ )\n    {\n        if(i >= oct) break;\n        float n = rnoise(x);\n        a += b * n;          // accumulate values\t\t\n        b *= s;\n        x *= f;\n    }\n    return a;\n}\nfloat fbm2( in vec2 p )\n{\n    vec2 q = vec2( fbm( p + vec2(0.0,0.0) ,2 ),\n                    fbm( p + vec2(5.2,1.3) ,2) );\n\n    return fbmr( p + 2.9*q ,3); //4.0\n}\nfloat fbm3( in vec2 p )\n{\n    vec2 q = vec2( fbm( p + vec2(0.0,0.0) ,2),\n                    fbm( p + vec2(5.2,1.3) ,2) );\n\n    vec2 r = vec2( fbm( p + 4.0*q + vec2(1.7,9.2) ,2), //4q\n                    fbm( p + 4.0*q + vec2(8.3,2.8) ,2) );\n    // r = normalize(r);\n    return fbmr( p*2.0 + .4*r , 3); //4.0\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat aspect = iResolution.x/iResolution.y;\n    float nVal, n, len;\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec2 vUv = uv;\n    vUv *= iResolution.y/666.;\n    vUv.x *= aspect;\n    vUv.x += iTime/50.;\n    vec2 c,luv,nuv = vUv*7.;\n    //nuv += rnd;\n\n    //background\n    n = fbm3(nuv);\n    nVal = 2.9*(n-0.06);\n    // nVal = 2.5*(n-0.2);\n    nVal *= 1.-0.35*clamp(abs(vUv.y-0.5)-0.1,0.,1.);\n    nVal *= 1.-0.65*smoothstep(0.27,0.45,(clamp(snoise(3.9*nuv)*nnoise(12.2*nuv)*rnoise(9.2*nuv),0.,1.)));\n    n = nVal = clamp(nVal,0.,1.);\n    nVal *= 1.14-1.5*clamp(abs(uv.y-0.5)-0.25,0.,1.);\n    // nVal *= (0.85+.1*rnoise(21.*nuv)*rnoise(17.*nuv));\n    nVal *= (0.9+.1*abs(snoise(14.*nuv)));\n    nVal *= (0.9+.1*abs(snoise(24.*nuv)));\n    nVal *= (0.86+.14*nnoise(41.*nuv));\n    // nVal *= (0.87+0.04*nnoise(0.6*nuv));\n    nVal *= (0.95+0.05*fbm(1.2*nuv,2));\n    \n    //white spots\n    // nVal += (1.-n)*2.7*nnoise(3.*nuv)*clamp(snoise(1.3*nuv),0.,1.); \n    // nVal += (1.-n)*1.72*nnoise(4.*nuv)*nnoise(6.3*nuv); \n    nVal += (1.-n)* smoothstep(0.5,1.,1.72*nnoise(3.*nuv)*nnoise(4.3*nuv)); \n\n    vec2 d1,d2;\n    d1 = vec2(rnoise(1.45*nuv),rnoise(1.45*nuv+vec2(-7.2,6.9)));\n    \n    nuv+=22.;\n    float lm = 0.6;\n    //lines 1\n    luv = nuv;\n    luv += 0.08*d1;\n    luv += 0.85 * vec2(snoise(.22*luv), snoise(.22*luv + vec2(4.2,-9.1)));\n    c = vec2(1.585);\n    len = 0.04;\n    n = sdLine( \n        opRepFlip(luv,c)\n    ,vec2(-c.x*len,-len),vec2(c.x*len,len),0.0001);\n    nVal *= lm+(1.-lm)*smoothstep(0.,0.01,n);\n    \n    //lines 2\n    luv = nuv + vec2(-13.2,15.1);\n    luv += 0.09*d1;\n    luv += 0.85 * vec2(snoise(.22*luv), snoise(.22*luv + vec2(11.2,-9.1)));\n    c = vec2(1.79);\n    len = 0.04; \n    n = sdLine( \n        opRepFlip(luv,c)\n    ,vec2(-c.x*len,len),vec2(c.x*len,-len),0.0001);\n    nVal *= lm+(1.-lm)*smoothstep(0.,0.01,n);\n    \n    //lines 3\n    luv = nuv + vec2(27.2,-21.5);\n    luv += 0.09*d1;\n    luv += 0.85 * vec2(snoise(.22*luv), snoise(.22*luv + vec2(-17.2,8.7)));\n    c = vec2(2.07);\n    len = 0.085; \n    n = sdLine( \n        opRepFlip(luv,c)\n    ,vec2(-c.x*len,0),vec2(c.x*len,0),0.0001);\n    nVal *= lm+(1.-lm)*smoothstep(0.,0.01,n);\n    \n    //lines 3.2\n    luv = nuv + vec2(-17.8,-28.5);\n    luv += 0.09*d1;\n    luv += 0.85 * vec2(snoise(.22*luv), snoise(.22*luv + vec2(-17.2,8.7)));\n    c = vec2(1.87);\n    len = 0.095; \n    n = sdLine( \n        opRepFlip(luv,c)\n    ,vec2(-c.x*len,0),vec2(c.x*len,0),0.0001);\n    nVal *= lm+(1.-lm)*smoothstep(0.,0.01,n);\n    \n    vec3 tint = vec3(1.,0.9,0.7);\n    fragColor = vec4(vec3(nVal)*tint,1.);//vec4(vUv, 0.0, 1.0);\n  }","name":"Image","description":"","type":"image"}]}