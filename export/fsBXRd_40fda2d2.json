{"ver":"0.1","info":{"id":"fsBXRd","date":"1621704612","viewed":146,"name":"Parallax Occlusion Template","username":"omegasbk","description":"Template for Darko's Gamedev Cookbook Parallax Occlusion tutorial ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["template"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Made by Darko Supe (omegasbk)\n// This is a starter template for the parallax occlusion lesson\n// Sub here youtube.com/c/DarkoSupe for educational videos\n\nstruct Camera\n{\n    vec3 position;\n    vec3 direction;\n    float focalDistance;\n};\n\nCamera camera = Camera(\n    vec3(0., -0.4, -.3), \n    vec3(1., 0., 1.),\n    0.5);\n    \nstruct Material \n{\n    float diffuse;\n    float specular;\n    float shininess;\n    float ambience;\n    float reflection;\n};\n\nconst Material material = Material(0.4, 0.2, 76.8, 0.8, 0.04);\n\nstruct Plane \n{\n    vec3 position;\n    vec3 normal;\n    vec3 color;\n    Material material;\n};\n\nPlane plane = Plane(\n    vec3(0., -0.3, 0.), \n    vec3(0., 1., 0.), \n    vec3(0.2, 0.2, 0.2), \n    material);\n    \nstruct PointLight\n{\n    vec3 position;\n    float intensity;\n};\n\nPointLight light = PointLight(\n    vec3(0., 1.5, 0.), // position\n    10.);              // intensity\n\nvec3 getLitColor(in vec3 viewDir, in vec3 surfacePointPosition, in vec3 objectColor, in PointLight pointLight, in vec3 surfaceNormal, in Material material)\n{\n    vec3 lightVector = surfacePointPosition - pointLight.position;\n    vec3 lightDir = normalize(lightVector);   \n    \n   \tfloat lightIntensity = (pow(0.1, 2.) / pow(length(lightVector), 2.)) * pointLight.intensity;\n    \n    float coeff = -dot(lightDir, surfaceNormal);     \n    \n    vec3 ambient = material.ambience * objectColor;\n        \n    vec3 diffuse = material.diffuse * max(coeff, 0.) * objectColor * lightIntensity;\n       \n    vec3 halfwayDir = normalize(lightDir + viewDir);  \n    vec3 specular = pow(max(-dot(surfaceNormal, halfwayDir), 0.0), material.shininess) * material.specular * objectColor * lightIntensity;\n    \n    vec3 color = ambient + diffuse + specular;\n    \n    return color;\n}\n\nbool intersectPlane(in Plane plane, in vec3 origin, in vec3 rayDirection, out float t, out vec3 pHit) \n{    \n    // Assuming vectors are all normalized\n    float denom = dot(plane.normal, rayDirection); \n    if (denom < 1e-6) \n    { \n        vec3 p0l0 = plane.position - origin; \n        t = dot(p0l0, plane.normal) / denom; \n        \n        if (t >= 0.)\n        {\n            pHit = origin + rayDirection * t;\n            return true;\n        }             \n    } \n \n    return false; \n} \n\nfloat getDepth(vec2 coord)\n{\n    // TODO\n    return 0.;\n}\n\nvec3 getParallax(vec3 pHit, vec3 direction)\n{        \n    // TODO\n    return pHit;\n}\n\nvec3 rayTrace(vec3 origin, vec3 direction)\n{\n    float dist;\n    vec3 pHit;\n\n    Plane parallaxPlane = plane; \n    \n    if (intersectPlane(parallaxPlane, origin, direction, dist, pHit))\n    {    \n        // TODO\n    }\n    \n    return texture(iChannel0, direction).rgb;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n     // Normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x *= (iResolution.x / iResolution.y); \n    \n    float rotation = iTime / 3.;\n    camera.position = vec3(cos(rotation), 0., sin(rotation)) * camera.focalDistance;\n    camera.direction = normalize(vec3(0., (iMouse.y / 200.) - 2., 0.) - camera.position);\n    vec3 right = normalize(cross(camera.direction, vec3(0., 1., 0.)));\n    vec3 up = cross(right, camera.direction);\n   \tvec3 dir =  normalize(uv.x * right + uv.y * up + camera.direction);\n    \n    light.position = camera.position;\n                 \n    vec3 finalColor = rayTrace(camera.position, dir); \n     \n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}