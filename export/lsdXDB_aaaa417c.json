{"ver":"0.1","info":{"id":"lsdXDB","date":"1461379416","viewed":128,"name":"basicRT","username":"DimitryK","description":"Implementing a raytracer using the geometric solution to the ray-sphere intersection.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["basic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Sphere{\n \tvec3 origin;\n    float radius;\n};\n    \nstruct Ray{\n  \tvec3 origin;\n    vec3 dir;\n};      \n\nstruct RayIntersect{\n    Sphere sp;\n    vec3 ip0;\n    vec3 ip1;\n    bool is_intersecting;\n};\n\n\nRayIntersect myIntersect( in Sphere sphere, in Ray ray)\n{\n    RayIntersect Ri = RayIntersect(sphere, vec3(0.0), vec3(0.0), false);\n    vec3 L = sphere.origin - ray.origin;\n    \n    float r2 = sphere.radius * sphere.radius;\n    \n    float tca = dot(L, ray.dir);\n    \n    if (tca < 0.0) return Ri;\n    \n    float d2 = dot(L, L) - tca*tca;\n    \n    if (d2 > r2) return Ri;\n    \n    Ri.is_intersecting = true;\n    \n    float tch = sqrt( r2 - d2 );\n    float t0 = tca - tch;\n    float t1 = tca + tch;\n    \n    Ri.ip0 = ray.origin + ray.dir * t0;\n    Ri.ip1 = ray.origin + ray.dir * t1;\n    \n    return Ri;\n}\n\n\nvec3 diffuse ( vec3 lp, RayIntersect Ri, vec3 color)\n{\n\tvec3 ld = normalize(lp - Ri.sp.origin);\n    vec3 n = normalize(Ri.ip0 - Ri.sp.origin);\n    \n    return color * max(0.0, dot(n, ld));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x = uv.x * 2.0 - 1.0;\n    uv.y = uv.y * 2.0 - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    \n    // Ray origin = ro, direction = rd\n    Ray ray = Ray(vec3(0.0, 0.0, -2.0), normalize( vec3( uv, 1.0) ));\n    Sphere sp = Sphere(vec3(0.0, 0.0, 0.0), 1.);\n    \n    // Intersect with the scene\n    //float id = intersect( ro, rd );\n    \n    \n    vec3 col = vec3(1.0);\n    vec3 amb = vec3(145.0, 221.0, 221.0) / 255.0 * 0.12;\n    \n    RayIntersect intersect = myIntersect( sp, ray);\n    \n    vec2 mo = iMouse.xy/iResolution.xy;\n\t\t \n\tfloat time = 15.0 + iTime;\n    \n    vec3 litePos = vec3( -0.5+3.5*cos(0.75*time),\n                         1.0,\n                         0.5 + 3.5*sin(0.75*time) );\n    \n    \n    \n    if (intersect.is_intersecting == true){\n        col = diffuse(litePos, intersect, col)*0.7 + amb;\n        fragColor = vec4(min(col, 1.0),1.0);\n    }\n    else{\n        fragColor = vec4(0.0, 0.0, 0.0 ,1.0);\n    }\n\t\n}","name":"Image","description":"","type":"image"}]}