{"ver":"0.1","info":{"id":"NtffRs","date":"1651272569","viewed":191,"name":"Noisy Banner","username":"incre_ment","description":"Noisy Banner\nInitial Version: Apr 29, 2022\nUses a 3D Simplex Noise implementation by nikat:\nhttps://www.shadertoy.com/view/XsX3zB","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","loop","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Noisy Banner\n// Initial Version: Apr 29, 2022\n// Uses a 3D Simplex Noise implementation by nikat:\n// https://www.shadertoy.com/view/XsX3zB\n\nfloat PI = 3.14159256;\nfloat TAU = 2.0*3.14159256;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n   vec2 uv = ( fragCoord - .5* iResolution.xy ) /iResolution.y;\n   vec3 col = vec3(0);  \n   for(float i=-.3; i<.3; i+=0.03){\n     float curve = 0.05*sin((10.0 * uv.x) - iTime + \n       2.*TAU*simplex3d(vec3(sin(iTime + 5.*uv.x), cos(iTime+ 5.*uv.y), i*1.3)));\n     col += vec3(pow(3.0,-abs(uv.y-curve+i + \n       .2*simplex3d(vec3(sin(iTime + 5.*uv.x), cos(iTime+ 5.*uv.x), i*1.3)))*150.0));\n     }\n   fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// 3d simplex noise from https://www.shadertoy.com/view/XsX3zB\n\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n","name":"Common","description":"","type":"common"}]}