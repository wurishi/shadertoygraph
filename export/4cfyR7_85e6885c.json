{"ver":"0.1","info":{"id":"4cfyR7","date":"1720911690","viewed":27,"name":"very simple Voronoise","username":"ProfessorPixels","description":"It's just simple voronoise, there are many optimisations to be made though.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","voronoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"a hexagon grid\" by ProfessorPixels. https://shadertoy.com/view/XcfczM\n// 2024-07-13 22:50:46\n\n// Fork of \"better template\" by ProfessorPixels. https://shadertoy.com/view/l3yGRV\n// 2024-07-13 22:04:27\n\n#define sx 10.\n#define sy 10.\n#define r .5\nvec2 h(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nvoid mainImage(out vec4 O,vec2 F)\n{\n    F*=vec2(sy,sx)/iResolution.xy;\n    F-=.5;\n    F.x+=.25;\n    float d = 20.;\n    for (float n;n<sx;n++)\n    {\n        for (float m;m<sy;m++)\n        {\n            float l = length(F-vec2(m,n)-h(vec2(m,n))*r);\n            if (l<d)\n            {\n                d=l;\n                O.rg = h(vec2(m,n));\n            }\n        }\n    }\n    O.b=0.;\n}","name":"Image","description":"","type":"image"}]}