{"ver":"0.1","info":{"id":"cd23Rz","date":"1667134257","viewed":170,"name":"F3-F2 Voronoi discontinuity","username":"Sapra","description":"This is a problem found when doing F3-F2. Does anyone know how to solve this?\n\nEdit: 10-31\nIt is 2:31 nighttime, and finally, I've found the solution. Fucking finally, I had to get the minimum of the two values, instead of just one","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","iq","problem"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Based on IQ algorithm, but modified to be F3-F2\n\n#define ANIMATE\n\nvec2 hash2( vec2 p )\n{\n    // procedural white noise\t\n\treturn fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\n//---------------------------------------------------------------\nvec3 voronoi( in vec2 x )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n\tvec2 mg2, mr2;\n\n    float md = 8.0;\n    float md2 = 8.0;\n    \n    \n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime*o );\n        #endif\t\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md2 = md;\n            md = d;\n            mr2 = mr;\n            mr = r;\n            mg2 = mg;\n            mg = g;\n        } else if( d<md2 )\n        {\n            md2 = d;\n            mr2 = r;\n            mg2 = g;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg+ vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime*o );\n        #endif\t\n        vec2 r = g + o - f;\n\n        if( dot(mr2-r,mr2-r)>0.00001 &&  dot(mr-r,mr-r)>0.00001)\n        {\n            md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n            md = min( md, dot( 0.5*(mr2+r), normalize(r-mr2) ) );\n        }\n    }\n    \n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg2+ vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime*o );\n        #endif\t\n        vec2 r = g + o - f;\n\n        if( dot(mr2-r,mr2-r)>0.00001 &&  dot(r,r)>md2)\n        {\n            md = min( md, dot( 0.5*(mr2+r), normalize(r-mr2) ) );\n        }\n    }\n\n    return vec3( md, mr );\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy/iResolution.xx;\n    \n    p *= 8.0;\n    vec3 c = voronoi( p );\n\n\t// isolines\n    vec3 col = c.x*(0.5 + 0.5*sin(64.0*c.x))*vec3(1.0);\n    // borders\t\n    col = mix( vec3(1.0,0.6,0.0), col, smoothstep( 0.04, 0.07, c.x ) );\n    // feature points\n\tfragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}