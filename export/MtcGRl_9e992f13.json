{"ver":"0.1","info":{"id":"MtcGRl","date":"1471654169","viewed":4818,"name":"Fast pseudo-3d Perlin noise","username":"LukeRissacher","description":"Thought I'd share a little discovery (I'm not the first) - by rotating the gradient vectors in 2d-Perlin over time, you can get smooth-morphing noise similar to 3d Perlin over z for clouds, lava etc. at half the GPU cost. (click for fractal iterations)","likes":36,"published":1,"flags":0,"usePreview":0,"tags":["2d","perlin","optimization","flownoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 GetGradient(vec2 intPos, float t) {\n    \n    // Uncomment for calculated rand\n    //float rand = fract(sin(dot(intPos, vec2(12.9898, 78.233))) * 43758.5453);;\n    \n    // Texture-based rand (a bit faster on my GPU)\n    float rand = texture(iChannel0, intPos / 64.0).r;\n    \n    // Rotate gradient: random starting rotation, random rotation rate\n    float angle = 6.283185 * rand + 4.0 * t * rand;\n    return vec2(cos(angle), sin(angle));\n}\n\n\nfloat Pseudo3dNoise(vec3 pos) {\n    vec2 i = floor(pos.xy);\n    vec2 f = pos.xy - i;\n    vec2 blend = f * f * (3.0 - 2.0 * f);\n    float noiseVal = \n        mix(\n            mix(\n                dot(GetGradient(i + vec2(0, 0), pos.z), f - vec2(0, 0)),\n                dot(GetGradient(i + vec2(1, 0), pos.z), f - vec2(1, 0)),\n                blend.x),\n            mix(\n                dot(GetGradient(i + vec2(0, 1), pos.z), f - vec2(0, 1)),\n                dot(GetGradient(i + vec2(1, 1), pos.z), f - vec2(1, 1)),\n                blend.x),\n        blend.y\n    );\n    return noiseVal / 0.7; // normalize to about [-1..1]\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    // Mouse up: show one noise channel\n    if (iMouse.z <= 0.0) {\n        float noiseVal = 0.5 + 0.5 * Pseudo3dNoise(vec3(uv * 10.0, iTime));\n        fragColor.rgb = vec3(noiseVal);\n    }\n    \n    // Mouse down: layered noise\n    else {\n\t\tconst int ITERATIONS = 10;\n        float noiseVal = 0.0;\n        float sum = 0.0;\n        float multiplier = 1.0;\n        for (int i = 0; i < ITERATIONS; i++) {\n            vec3 noisePos = vec3(uv, 0.2 * iTime / multiplier);\n            noiseVal += multiplier * abs(Pseudo3dNoise(noisePos));\n            sum += multiplier;\n            multiplier *= 0.6;\n            uv = 2.0 * uv + 4.3;\n        }\n        noiseVal /= sum;\n        \n        // Map to a color palette\n        fragColor.rgb = 0.5 + 0.5 * cos(6.283185 * (3.0 * noiseVal + vec3(0.15, 0.0, 0.0)));\n    }\n}","name":"Image","description":"","type":"image"}]}