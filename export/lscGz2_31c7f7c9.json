{"ver":"0.1","info":{"id":"lscGz2","date":"1450971417","viewed":603,"name":"City Maker","username":"phi16","description":"animation","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define M(x,y) res = mel(res,C(x,y))\n\nstruct C{\n    float d;\n    int t;\n};\n    \nC mel(C c,C d){\n    if(c.t != -1 && c.d < d.d)return c;\n    else return d;\n}\n    \nC sub(C c,C d){\n    return C(max(c.d,-d.d),c.t);\n}\n\nfloat random(vec2 p){\n    return texture(iChannel0,mod((p+vec2(0.5,0.5))/256.,1.)).x;\n}\n\nfloat hash( float n ) { return fract(sin(n)*753.5453123); } // https://www.shadertoy.com/view/4sfGzS\nfloat noise1( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\nfloat noise(vec3 p){\n    float f = 0.0;\n    vec3 q = 8.0*p;\n    f  = 0.5000*noise1( q ); q = m*q*2.01;\n    f += 0.2500*noise1( q ); q = m*q*2.02;\n    f += 0.1250*noise1( q ); q = m*q*2.03;\n    f += 0.0625*noise1( q ); q = m*q*2.01;\n    return f;\n}\n\nfloat box(vec3 p,vec3 b){\n    vec3 d = abs(p)-b;\n    return min(max(d.x,max(d.y,d.z)),0.)+length(max(d,0.));\n}\n\nC dist(vec3 p){\n    vec3 q = p;\n    q.xz = mod(q.xz,1.)-0.5;\n    C res = C(0.,-1);\n    \n    M(p.y,1);\n    vec3 pp = p;\n    pp.z = mod(pp.z+10.,20.)-10.;\n    M(box(pp-vec3(iTime*5.-10000.,4.,0),vec3(10000.,0.02,0.02)),5);\n    M(box(pp-vec3(iTime*5.-10000.+2.,5.,2.),vec3(10000.,0.02,0.02)),7);\n    M(box(pp-vec3(iTime*5.-10000.-3.,6.,5.),vec3(10000.,0.02,0.02)),2);\n    M(box(pp-vec3(iTime*5.-10000.-2.,4.5,-3.),vec3(10000.,0.02,0.02)),3);\n    M(box(pp-vec3(iTime*5.-10000.+1.,7.,-4.),vec3(10000.,0.02,0.02)),6);\n    float hei = random(floor(p.xz))*1.6+0.5;\n    hei *= smoothstep(-10.,10.,iTime*5.-floor(p.x)+random(vec2(floor(p.z),0.5))*12.-3.+pow(abs(floor(p.z)),0.8));\n    if(hei>0.)M(box(q-vec3(0,hei,0),vec3(0.3,hei,0.3)),0);\n    res = sub(res, C(box(q-vec3(0,hei*2.,0),vec3(0.25,0.05*smoothstep(-10.,2.,iTime*5.-floor(p.x)),0.25)),0));\n    hei = 2.1 * smoothstep(-10.,10.,iTime*5.-floor(p.x-8.)+random(vec2(floor(p.z),0.5))*12.-3.+pow(abs(floor(p.z)),0.8));\n    if(hei>0.)M(box(q-vec3(1,0,0)-vec3(0,hei,0),vec3(0.3,hei,0.3)),0);\n    if(hei>0.)M(box(q-vec3(0,0,1)-vec3(0,hei,0),vec3(0.3,hei,0.3)),0);\n    if(hei>0.)M(box(q-vec3(-1,0,0)-vec3(0,hei,0),vec3(0.3,hei,0.3)),0);\n    if(hei>0.)M(box(q-vec3(0,0,-1)-vec3(0,hei,0),vec3(0.3,hei,0.3)),0);\n    return res;\n}\n\nvec3 normal(vec3 p){\n    vec2 e=vec2(0.001,0);\n    return normalize(vec3(\n        dist(p+e.xyy).d-dist(p-e.xyy).d,\n        dist(p+e.yxy).d-dist(p-e.yxy).d,\n        dist(p+e.yyx).d-dist(p-e.yyx).d));\n}\n\nfloat ao(vec3 p,vec3 n){\n    float a = 0.;\n    float d = 1./6.;\n    for(float i=1.;i<6.;i++){\n    \ta += max(0.,dist(p+n*i*d).d) / (i*d) * pow(2.,-i);\n    }\n    return a * 0.5 + 0.5;\n}\n\nvec3 color(vec3 p, vec3 v){\n    float d = 0.001;\n    int maxIter = 100;\n    C c=C(0.,-1);\n    float cubeNearest = -1.;\n    vec3 pos;\n    for(int i=0;i<80;i++){\n        pos = p+d*v;\n        C ci=dist(pos);\n        float rd = ci.d;\n        if(2 <= ci.t && ci.t <= 10){\n        \tif(cubeNearest<0. || cubeNearest > rd)cubeNearest = rd;\n        }\n        if(abs(rd) < 0.001*max(1.,d/10.)){\n            maxIter=i;\n            c=ci;\n            break;\n        }\n        d += rd;\n    }\n    vec3 n = normal(pos);\n    if(c.t == 1 || c.t==-1 && v.y < 0.)c = C(-p.y/v.y,1), d = c.d, pos = p+c.d*v, n = vec3(0,1,0);\n    vec3 col = vec3(0);\n    if(c.t==-1)col = v*0.5+0.5;\n    else if(c.t == 0){\n        vec3 light = normalize(vec3(1,1,1));\n        float hei = random(floor(pos.xz))*1.6+0.5;\n        hei *= smoothstep(-10.,10.,iTime*5.-floor(pos.x)+random(vec2(floor(pos.z),0.5))*12.-3.+pow(abs(floor(pos.z)),0.8));\n        vec3 hdif = vec3(0,-hei*2.,0);\n        \n        vec3 col1 = vec3(1,0.95,0.8);\n        vec3 grad = vec3(noise(pos+hdif),noise(pos+hdif+1.5),noise(pos+hdif+2.2))*2.-1.;\n        grad = normalize(n + grad*2.);\n        col1 *= 0.9 + 0.1 * dot(light,grad);\n        vec3 bc = vec3(mod(pos.xz,1.)-0.5,pos.y).xzy-vec3(0,hei,0), bs = vec3(0.3,hei,0.3);\n        vec3 ap = bs-abs(bc);\n        vec3 bp = vec3(0.015);\n        if((ap.x<bp.x && ap.y<bp.y) || (ap.z<bp.z && ap.y<bp.y) || (ap.x<bp.x && ap.z<bp.z))col1 *= 0.1;\n        \n        vec3 col2 = vec3(0);\n        float rColor = random(floor(pos.xz)*2.);\n        if(rColor < 0.3)col2 = mix(vec3(0.7,0.3,0.2),vec3(0.8,0.7,0.6),rColor*10./3.);\n        else col2 = mix(vec3(0.3,0.3,0.3),vec3(0.8,0.8,0.8),(rColor-0.3)*10./7.);\n        col2 += max(0.,dot(light,n))*0.4;\n        \n        vec3 col3 = col2;\n        vec3 posi = abs(mod(pos+hdif+0.05,vec3(0.1,0.1,0.1))-0.05)*20.;\n        vec3 ri = mod(pos+hdif,1.);\n        if(pos.y < hei*2.-0.05 && (ri.x > 0.25 && ri.x < 0.75 || ri.z > 0.25 && ri.z < 0.75)){\n            float ep = max(posi.x,max(posi.y,posi.z));\n            if(ep < 0.65){\n                col3 = texture(iChannel1,reflect(v,n)).xyz * 0.5 + 0.5;\n                col3 *= 2.0 - exp(ep-0.65);\n            }else if(ep < 0.7){\n                col3 *= max(0.,dot(normalize(posi),light))*0.4;\n            }\n        }else if(ri.x > 0.25 && ri.x < 0.75 && ri.z > 0.25 && ri.z < 0.75){\n            col3 *= 0.3;\n        }\n        if(posi.y > 0.7)col3 *= 1. + (posi.y-1.)*3. * max(smoothstep(0.35,0.1,abs(ri.x-0.5)),smoothstep(0.35,0.1,abs(ri.z-0.5)));\n        \n        float level = smoothstep(-5.,9.,iTime*5.-floor(pos.x)+random(vec2(floor(pos.z),0.5))*6.-3.);\n        float level2 = smoothstep(-1.,9.,iTime*5.-floor(pos.x)+random(vec2(floor(pos.z),0.5))*6.-3.);\n        col2 = mix(col2,col3,level2);\n        col = mix(col2,col1,smoothstep(level-0.3,level+0.7,noise(pos+hdif)));\n        col *= ao(pos,n);    }else if(c.t == 1){\n        col = vec3(0.8,0.8,0.8);\n        if(max(abs(mod(pos.x,1.)),abs(mod(pos.z,1.))) > 0.9)col *= 0.8;\n        col *= min(1.,ao(pos,n));\n    }else if(c.t >= 2 && c.t <= 10){\n        float d = (iTime*5.+float(c.t-5)-0.04) - pos.x;\n        if(d < 0.)return vec3(1,1,1);\n        return vec3(0.8,0.8,5)/(d+1.);\n    }\n    if(cubeNearest > 0. && cubeNearest < 0.2)col += (1.-pow(cubeNearest*5.,0.5))*0.5;\n    col += pow(max(0.,(dot(v,vec3(1,0,0))-0.8)*10./2.),9.);\n    return col;\n}\n\nvec4 sampleImage(vec2 coord){\n\tvec2 R = iResolution.xy, uv = (2.*coord - R)/R.y;\n    vec3 p=vec3(iTime*5.-sin(iTime/4.)*1.,4.2,0);\n    vec3 rv=vec3(1,0,0);\n    vec2 bi = vec2(random(vec2(iTime*256.,0.)),random(vec2(-iTime*256.,1.)));\n    uv += bi/60.*800./iResolution.x;\n    vec3 v=vec3(1,uv.y-0.1,uv.x);\n    v = normalize(v);\n    float spd = 2.;\n    float rot = (iTime*spd + sin(iTime*spd/2.))/8.+0.1;\n    v.xz *= mat2(cos(rot),-sin(rot),sin(rot),cos(rot));\n    rv.xz *= mat2(cos(rot),-sin(rot),sin(rot),cos(rot));\n    p -= rv;\n\treturn vec4(color(p,v),1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    const float p = 1.;//sampling\n    for(float i=0.;i<1.;i+=1./p){\n        fragColor += sampleImage(fragCoord+vec2(cos(i*2.*3.1415),sin(i*2.*3.1415))/2.)/p;\n    }\n}","name":"","description":"","type":"image"}]}