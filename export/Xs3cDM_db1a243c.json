{"ver":"0.1","info":{"id":"Xs3cDM","date":"1595439584","viewed":79,"name":"Learning Fractal Ray Tracing","username":"deliaev","description":"Learning Fractal Ray Tracing","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\nfloat sdCross( in vec3 p )\n{\n  float da = sdBox(p.xyz,vec3(9999.0,1.0,1.0));\n  float db = sdBox(p.yzx,vec3(1.0,9999.0,1.0));\n  float dc = sdBox(p.zxy,vec3(1.0,1.0,9999.0));\n  return min(da,min(db,dc));\n}\nvec3 map( in vec3 p )\n{\n   float d = sdBox(p,vec3(1.0));\n   vec3 res = vec3( d, 1.0, 0.0);\n\n   float s = 1.0;\n   for( int m=0; m<4; m++ )\n   {\n      vec3 a = mod( p*s, 2.0 )-1.0;\n      s *= 3.0;\n      vec3 r = abs(1.0 - 3.0*abs(a));\n\n      float da = max(r.x,r.y);\n      float db = max(r.y,r.z);\n      float dc = max(r.z,r.x);\n      float c = (min(da,min(db,dc))-1.0)/s;\n\n      if( c>d )\n      {\n          d = c;\n          res = vec3( d, 0.2*da*db*dc, (1.0+float(m))/4.0 );\n       }\n   }\n\n   return res;\n}\nvec3 intersect( in vec3 ro, in vec3 rd ) //RAY TRACING ALGO\n{\n    for(float t=0.0; t<10.0; )\n    {\n        vec3 h = map(ro + rd*t); //vec3 dist = sceneSDF(eye + depth * viewRayDirection);\n        if( h.x<0.001 ) \t\t\t//if dist.x < EPSILON\n            return vec3(t,h.yz);\t//return depth\n        t += h.x;\t\t\t\t//viewRay += \"safe distance\"\n    }\n    return vec3(-1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n\n    float ctime = iTime;\n    // CAMERA\n    //ray origin\n    vec3 ro = 2.1*vec3(2.5*sin(0.25*ctime),1.0+1.0*cos(ctime*.13),2.5*cos(0.25*ctime));\n    vec3 ww = normalize(vec3(0.0) - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    //ray direction\n    vec3 rd = normalize( p.x*uu + p.y*vv + 2.5*ww );\n\n    vec3 col = intersect( ro, rd );\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}