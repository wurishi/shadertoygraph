{"ver":"0.1","info":{"id":"3djfWm","date":"1590256889","viewed":163,"name":"Bokeh tree background","username":"pohlt","description":"I'm shooting for something like this: https://www.istockphoto.com/de/video/bokeh-abstrakte-baum-hintergrund-gm826252336-134111413\n\nNot there yet, as you can see. Any input is appreciated.","likes":1,"published":1,"flags":64,"usePreview":0,"tags":["bokeh","background"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MlS3zK","filepath":"https://soundcloud.com/maltempoeffects/25-1-meadow-summer-day","previewfilepath":"https://soundcloud.com/maltempoeffects/25-1-meadow-summer-day","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision lowp float;\n\n\n#define PI 3.14159265358979\n#define R 0.07\n#define D 0.05\n\n\nconst vec3 base_colors[] = vec3[](\n    vec3(1.0, 5.0, 0.0),\n    vec3(2.0, 2.0, 9.0),\n    vec3(5.0, 4.0, 2.0),\n    vec3(4.0, 4.0, 5.0)\n);\n\n\n// from https://www.shadertoy.com/view/lsf3WH\nfloat hash(vec2 p) {\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0, 0.0) ), \n                     hash( i + vec2(1.0, 0.0) ), u.x),\n                mix( hash( i + vec2(0.0, 1.0) ), \n                     hash( i + vec2(1.0, 1.0) ), u.x), u.y);\n}\n\n\n// from https://www.shadertoy.com/view/MsKGWz\nfloat hash12(vec2 p) {\n    float h = dot(p,vec2(127.1, 311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\n\n\n// from https://www.shadertoy.com/view/MsKGWz\nfloat hash5(float x) {\n    return fract(sin(x)*43758.5453+0.4);\n}\n\n\nfloat disc(vec2 c, vec2 pos) {\n    pos -= c;\n    float d = length(pos / R);\n    if (d > 1.0+D) {\n        return 0.0;\n    }\n    else {\n        float a = atan(pos.y, pos.x);\n        float dm = d + 0.03*(cos(a*5.0+2.5)+1.0);\n        return (0.02+0.01*(\n            ((dm < 1.0+D) ? smoothstep(0.0, 1.0, dm) : 0.0) -\n            smoothstep(1.0, 1.0+D, dm)))*\n            (0.75+0.25*noise(75.0*pos*mat2( 1.6,  1.2, -1.2,  1.6 )));\n    }\n}\n    \n    \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.y/iResolution.x;\n    uv.y *= aspect;\n\tvec3 col = mix(vec3(0.02, 0.05, 0.00),\n                   vec3(0.10, 0.20, 0.05),\n                   dot(vec2(0.6, 0.6/aspect), uv)+\n                   //0.4*noise(20.0*uv)-0.2+\n                   0.2*hash12(uv)-0.1);\n    \n    for (float i=100.0; i>0.0; i--) {\n        int m = int(i) & 3;\n        float x = 1.1*hash5(2.0*i+3.0)-0.05;\n        float y = 1.1*hash5(5.0*i)-0.05;\n        float dx = 0.05*sin(0.3*iTime+0.01*i) + 0.05*sin(0.4*iTime+0.01*i);\n        float dy = 0.03*sin(0.2*iTime+0.100*i) + 0.03*sin(0.3*iTime+0.100*i);\n        float b = pow((1.0+cos(0.75*iTime+0.1*i)), 0.5) * (0.7+0.3*cos(0.51*iTime+0.03*i));\n        col += (base_colors[m] + 2.0*vec3(hash5(x), hash5(y), hash5(x+y))) *\n            disc(vec2(x+dx, (y+dy)*aspect), uv) * b;\n    }\n\n    // tone mapping and gamma\n    fragColor = vec4(pow(col/(col+1.0), vec3(1.0)/2.2), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}