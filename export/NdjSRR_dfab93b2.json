{"ver":"0.1","info":{"id":"NdjSRR","date":"1619549802","viewed":82,"name":"2D portal/shadow shader concept","username":"ribbon","description":"shader for creating seamless portals, walls that obscure visibility, shadows, ect. via masking an overlapping texture based on viewing target position","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//In implementation, this should be a uniform input. Normalized position on-screen of where the object is\n//Best results maintain that pointB is CCW of pointA and it should work in any direction or angle\n//Can easily be extended to 3 points by adding another sign from point B to C\nvec2 pointB = vec2(0.3, 0.4);\nvec2 pointA = vec2(0.5, 0.4);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //source texture to mask. In implementation would overlay the screen and this shader would be used to determine alpha instead of color\n    vec4 source = texture(iChannel0, uv);\n    //the player position. Set here to move proceedurally. Would also be a uniform in a game implementation\n    vec2 camera = vec2(cos(iTime), sin(iTime));\n    \n    //ensures the portal orientation remains correct when the camera is on the other side\n    float mainsign = sign((pointB.x - pointA.x) * (camera.y - pointA.y) - (pointB.y - pointA.y) * (camera.x - pointA.x));\n    \n    //check to see if the point is on the correct side of each of the 3 lines.\n    //UV in this case is the point being tested for visibility.\n    //portal point A to B\n    float sign1 = sign((pointB.x - pointA.x) * (uv.y - pointA.y) - (pointB.y - pointA.y) * (uv.x - pointA.x)) * (mainsign * -1.0);\n    //portal point A to center\n    float sign2 = sign((camera.x - pointA.x) * (uv.y - pointA.y) - (camera.y - pointA.y) * (uv.x - pointA.x)) * (mainsign * -1.0);\n    //portal point B to center\n    float sign3 = sign((camera.x - pointB.x) * (uv.y - pointB.y) - (camera.y - pointB.y) * (uv.x - pointB.x)) * mainsign;\n    //returns the lowest value of all 3 sign functions. Basically an && operator\n    float cond = min(sign1, min(sign2, sign3));\n    //multiply the conditional by the source colors. (will multiply them by 0.0 or -1.0 if there is a sign that doesn't work)\n    fragColor = vec4(source.rgb * cond, 1.0);\n}","name":"Image","description":"","type":"image"}]}