{"ver":"0.1","info":{"id":"l32Szh","date":"1728047090","viewed":20,"name":"Cube.Cube.Cube","username":"Stenator","description":"Cube","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//float t=  iTime;\n\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n#define rand(x) float(fract(sin(x*4.9862)))\n\n\nfloat Cube(vec3 p, vec3 size){\n\n  vec3 q = abs(p) - size;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\nfloat Map(vec3 p) {\n    float map= 0.;\n\n    p.xy*= rot(iTime);\n    p.yz*= rot(iTime); \n    map= Cube(p, vec3(0.5));\n\n    //Multi Cube\n    for(float i; i<7.;i++){\n        \n        float n= i+iTime*0.1;\n        vec3 offset= p+( vec3(rand(n+4.65),rand(n+56.65),rand(n+1.65))*2.-1.)*2.;\n        offset.yx*=rot(iTime);\n        offset.zy*=rot(iTime);\n        map= min(map, Cube(offset, vec3(0.2)));  \n    }\n\n    return map;\n}\n\n\nvec3 Norm(vec3 p){\n    vec2 e = vec2(0.01,0.);\n    return -normalize(vec3(Map(p-e.xyy),Map(p-e.yxy),Map(p-e.yyx))- \n    vec3(Map(p+e.xyy),Map(p+e.yxy),Map(p+e.yyx)));\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv =(fragCoord-.5*iResolution.xy)/iResolution.xx;\n\n    vec3 ro = vec3(0,0,-5);\n    vec3 rd = vec3(uv.x,uv.y,1);\n\n    vec3 col= vec3(0.1,0.025,0.06);\n    vec3 p= ro;\n    float dist= 0.;\n    float bloom =0.;\n\n\n    for(int i=0; i<128 ;i++) {\n\n\n\n        //dist=sdf(p);\n        dist= Map(p);\n        \n        //Glow!!\n        bloom +=0.02*(1.-clamp(dist/1.5,0.,1.));       \n        if(distance(p,ro)>20.){\n        break;\n        /*Alors le bloom c'est juste une accumulation\n        avec un if qui break quand on part trop loin!!\n        On ajoute *(1.-clamp(dist/1.5,0.,1.)) pour controller le glow  \n        (genre lorsque l'on est pr√®s en dist du mesh)\n         */\n        }\n\n        \n            if(dist<0.02) {\n\n                vec3 N= -Norm(p);\n                col= vec3(dot(N, vec3(0.,0.,1.)))*0.6;\n                col+= vec3(dot(N, vec3(0.,-1.,0.)));\n                //col*=vec3(0.4,0.6,0.2);\n                //col/=2.;               \n                //vec3(1.);\n\n            }\n\n\n        p=+ p+dist * rd;\n\n\n\n    }\n    col+= clamp(bloom,0.,.4)*vec3(0.8,0.6,0.6);\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}