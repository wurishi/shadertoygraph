{"ver":"0.1","info":{"id":"4lGczG","date":"1536690812","viewed":124,"name":"Exp.fract","username":"tqle","description":"fraction","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["experiments"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Rotate\nmat2 rot(float a){\n    return mat2(cos(a), -sin(a),\n                sin(a), cos(a));\n}\n\n\n// SDF Sphere\nfloat sphere(vec3 p, float radius){\n    return length(p)-radius;\n}\n\n\n// Map distance to all objects in the scene\nfloat map(vec3 p)\n{\n    float radius = 2.5;\n    \n    // Transform coordinate space so spheres repeat\n    //vec3 q = fract(p) * 2.0 - 1.0;\n    float size = 2.;\n    float halfSize = size/2.;\n\tvec3 q = mod(p+halfSize, size)*size-halfSize;\n    \n    // Signed distance of sphere\n    return sphere(q, radius);\n}\n\n\nfloat trace(vec3 origin, vec3 r) \n{\n  float t = 0.0;\n    for (int i = 0; i < 7; ++i) {\n        vec3 p = origin + r * t;\n        float d = map(p);\n        t += abs(d)*abs(d) - cos(abs(t+2.0))*7.5;\n        }\n    return t+2.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv = uv *2.-1.; // Remap the space to -1. to 1.\n    uv.x *= iResolution.x/iResolution.y;\n    \n    \t\n   \tfloat FOV = 2.0;\n   \tvec3 ray = normalize(vec3(uv, FOV));\n    \n    // Rotate Y towards Z\n    ray.yz *= rot(iTime*0.2);\n    ray.zx *= rot(iTime*0.1);\n    \n    vec3 origin = vec3(0.0, 0.0, sin(iTime));\n    float t = trace(origin, ray);\n    \n    \n    float linearFog = 1.5 / (1.0 - t*0.2);\n    float expFog = 2.0 / (t*t*0.1);\n    \n    vec3 fc = vec3(linearFog);\n\n    // Output pixels to screen\n    //fragColor = vec4(fc,1.0*iTime);\n    \n    // Try oscilating the final pixels\n    fragColor = vec4(cos(fc*fc - 10.0),1.0);\n}","name":"Image","description":"","type":"image"}]}