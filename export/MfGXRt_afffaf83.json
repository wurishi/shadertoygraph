{"ver":"0.1","info":{"id":"MfGXRt","date":"1715604101","viewed":52,"name":"scaling of bifurcation diagram","username":"StarySky","description":"A scale of bifurcation diagram","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","bifurcationdiagram"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define inititer 512\n#define extraiter 512\n#define thickness 0.02\n#define alpha exp(-0.1*(40.-40.*cos(iTime/10.)))\n#define AA 4\nfloat bump(float x, float r){\n    return r * (1.-x)*x;\n    // change your own bump function \n    // which is defined on domain [0, 1]\n    // and with value in [0, r/4]\n}\n\nvec2 fixUV(vec2 uv){\n    return (uv-iResolution.xy*0.5)/max(iResolution.x, iResolution.y);\n}\n\nvec2 camera(vec2 uv) {\n    return uv*4. * alpha + (1.-alpha)*vec2(3.5705, 0.891)+alpha*vec2(2., 0.5);\n}\n\nvec3 drawing(vec2 uv){\n    float rs = uv.x;\n    rs = max(min(rs, 4.), 0.);\n    float y = 0.5;\n    vec3 col = pow(vec3(.7,0.94,.85),vec3(1./float(AA)));\n    float dis;\n    for (int i=0; i<=inititer; i++) {\n        y = bump(y, rs);\n    }\n    for (int i=0; i<=extraiter; i++) {\n        float dis = abs(uv.y - y);\n        col = min(col, vec3(smoothstep(0., thickness*1.*alpha*pow(1.8,-abs(uv.x)), dis)));\n        y = bump(y, rs);\n    }\n\n    if (uv.x<0. || uv.x>4.){\n        col = vec3(1.);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fixUV(fragCoord);\n    uv = camera(uv);\n    vec3 col=vec3(1.);\n    float dx = 1./iResolution.x * 4.*alpha;\n    for (int i=0; i<AA; i++) {\n        col *= drawing(uv + vec2(float(i)*dx/float(AA), 0.));\n    }\n    // Time varying pixel color\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}