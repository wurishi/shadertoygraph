{"ver":"0.1","info":{"id":"ftSyDd","date":"1650390133","viewed":315,"name":"Cuniculum Experimentum","username":"incre_ment","description":"Another experiment using particle angle (using atan) and distance based rotation.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["tunnel","loop","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Updated Apr 20, 2022\n// Made updates based on feedback from IQ and FN.\n\n\nfloat PI = 3.14159256;\nfloat TAU = 2.*3.14159256;\n\n\nvec2 rotation(in float angle,in vec2 pos,in vec2 center)\n{\n    mat2 rotation = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    return vec2((pos-center)*rotation);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1), also centered.\n    vec2 uv = ( fragCoord - .5* iResolution.xy ) /iResolution.y;\n    \n    vec3 col = vec3(0);\n     \n     \n    // Get distance to center\n    // float d = distance(uv,vec2(0.,0.));\n    float d = length(uv);\n    \n    \n    // Distance-based rotation  (Old version)\n    // vec2 uvRot = rotation((PI/2.)/d, uv, vec2(0.,0.)); \n    // float a = atan(uvRot.y, uvRot.x);  \n    \n    // Distance-based rotation (New Version) -- thanks IQ and FN\n    float a = atan(uv.y, uv.x) + (PI/2.)/d;\n    \n    // Original Version\n    // col+=mix(col, \n    //          vec3(smoothstep(-.4,.4,sin(TAU*iTime+8.*a))),\n    //          smoothstep(.0,.55,d));\n   \n    // FN Perfect AA Variation\n    float v = sin(TAU*iTime+8.*a); \n    col =  vec3( smoothstep(-.8,.8,v/fwidth(v) )*  smoothstep(.0,.55,d) ); \n   \n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}