{"ver":"0.1","info":{"id":"msGBRW","date":"1697969258","viewed":71,"name":"Base Density Map: Bubble2","username":"anonymous_bear","description":"some random density map for potential future use","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["ray","raymarch","vfx","densityfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// MIT License with Attribution Requirement\n//\n// Copyright (2023) [Akalouis]\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n// 1. The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// 2. The name of the author [Akalouis] must be prominently displayed and attributed in any final product or derivative work that includes or uses any portion of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define TIME iTime\nvec3 fade(vec3 t) {\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n}\n\nfloat grad(int hash, float x, float y, float z) {\n    int h = hash & 15;\n    float u = h < 8 ? x : y;\n    float v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n}\n\nfloat noise(vec3 p) {\n    vec3 floorP = floor(p);\n    vec3 fracP = fract(p);\n    vec3 fadeP = fade(fracP);\n    \n    int A = int(floorP.x) & 255;\n    int B = int(floorP.y) & 255;\n    int C = int(floorP.z) & 255;\n\n    // Hashing function. Replace this with a better one if needed\n    int AA = A, AB = A + 1, BA = B, BB = B + 1, CA = C, CB = C + 1;\n\n    float a = grad(AA + BA + CA, fracP.x, fracP.y, fracP.z);\n    float b = grad(AB + BA + CA, fracP.x - 1.0, fracP.y, fracP.z);\n    float c = grad(AA + BB + CA, fracP.x, fracP.y - 1.0, fracP.z);\n    float d = grad(AB + BB + CA, fracP.x - 1.0, fracP.y - 1.0, fracP.z);\n    float e = grad(AA + BA + CB, fracP.x, fracP.y, fracP.z - 1.0);\n    float f = grad(AB + BA + CB, fracP.x - 1.0, fracP.y, fracP.z - 1.0);\n    float g = grad(AA + BB + CB, fracP.x, fracP.y - 1.0, fracP.z - 1.0);\n    float h = grad(AB + BB + CB, fracP.x - 1.0, fracP.y - 1.0, fracP.z - 1.0);\n\n    float lerpA = mix(a, b, fadeP.x);\n    float lerpB = mix(c, d, fadeP.x);\n    float lerpC = mix(e, f, fadeP.x);\n    float lerpD = mix(g, h, fadeP.x);\n\n    float lerpE = mix(lerpA, lerpB, fadeP.y);\n    float lerpF = mix(lerpC, lerpD, fadeP.y);\n\n    return mix(lerpE, lerpF, fadeP.z);\n}\nmat2 rotationMatrix(float angle) {\n    float cosValue = cos(angle);\n    float sinValue = sin(angle);\n    return mat2(cosValue, -sinValue, sinValue, cosValue);\n}\n\nfloat bubbleDensityMap(vec3 position) {\n    position.xy *= rotationMatrix(TIME * 0.13);\n    position.yz *= rotationMatrix(sin(TIME * 0.135)*0.1);\n    position.xz *= rotationMatrix(cos(TIME * 0.14)*0.1);\n    position.xyz *= 8.0;\n    position.xyz += noise(position + vec3(TIME)) * 1.75;  // Disturb position with noise\n\n    vec3 harmonics = vec3(\n        sin(position.x + 2.0*sin(TIME * 0.5)) * 0.5,\n        sin(position.y + 2.0*sin(TIME * 0.6)) * 0.5,\n        sin(position.z + 2.0*sin(TIME * 0.7)) * 0.5\n    );\n    harmonics = abs(harmonics);\n    \n    vec3 center = vec3(0.0, 0.0, 70.0);\n    \n    float density = 0.0;\n    density +=\n        //length(position.xy)\n        10.0/(1.0+1.0*length(center-position))\n        *1.85*dot(harmonics, vec3(0.34, 0.33, 0.33));  // Weighted sum of harmonics\n        ;\n    return density;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 normalizedCoord = fragCoord.xy / iResolution.y - vec2(0.9, 0.5);\n    vec3 rayDir = normalize(vec3(normalizedCoord, 1.0));\n    vec3 color = vec3(0.0);\n    \n    float travel_distance = 2.5;\n\n    const int RAYMARCH_ITER = 5;\n    for (int i = 0; i <= RAYMARCH_ITER; i++)\n    {\n        vec3 rayPos = vec3(0.0, 0.0, 5.0) + rayDir * travel_distance;\n        float rayDensity = bubbleDensityMap(rayPos);\n        float raystep = max(0.1,min(rayDensity, 1.0));\n        \n        vec3 light = vec3(0.1, 0.3, 0.4);\n        color += rayDensity  *  light*raystep;\n\n        travel_distance += raystep;\n    }\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}