{"ver":"0.1","info":{"id":"mlySzm","date":"1685997925","viewed":108,"name":"Basic grid traversal","username":"Krafpy","description":"Animated colorful 2D grid traversal. Move the origin point around with the mouse.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid","raycast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a){\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\n\nvec2 cell(vec2 p, vec2 size){\n    return floor(p/size)*size;\n}\n\nvec2 traceGrid(vec2 ro, vec2 rd, vec2 size, vec2 uv){\n    float eps = 0.0001;\n    \n    float dst = 10000.;\n    float crossed = 0.;\n    vec2 uvc = cell(uv, size);\n    \n    for(int k = 0; k < 30; ++k){\n        vec2 i = cell(ro, size);\n        vec2 d = i + max(sign(rd)*size,0.) - ro;\n        vec2 t = d/rd;\n        ro = ro + (min(t.x,t.y)+eps)*rd;\n        \n        dst = min(dst, distance(ro, uv));\n        crossed = max(crossed, float(all(equal(i,uvc))));\n    }\n    \n    return vec2(dst, crossed);\n}\n\n// from https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 background(vec2 uv, vec2 size, float crossed){\n    vec2 i = cell(uv, size);\n    vec2 p = (uv - i) - 0.5*size;\n    vec2 q = size*0.5 - abs(p);\n    float d = min(q.x,q.y);\n    vec3 c = vec3(0.);\n    \n    vec3 cols[4] = vec3[4](\n        vec3(1.,0.72,0.3),\n        vec3(0.95,0.4,0.67),\n        vec3(0.64,0.34,0.81),\n        vec3(0.17,0.82,0.88)\n    );\n    vec3 lcol = cols[int(hash12(floor(uv/size)*10.)*4.)];\n    lcol = lcol*crossed + (1.-crossed)*vec3(0.2);\n    float k = 15.*crossed + (1.-crossed)*20.;\n    c = lcol * exp(-k*distance(uv, i+size*0.5));\n    float b = step(0.005, d);\n    c = c*b + vec3(0.2, 0.2, 0.3)*(1.-b);\n    \n    return clamp(c, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec2 ro = iMouse.xy / iResolution.xy;\n    ro -= 0.5;\n    ro.x *= iResolution.x/iResolution.y;\n    vec2 rd = normalize(vec2(1.));\n    rd *= rot(0.5*iTime);\n    \n    float t1 = mod(iTime, 12.);\n    float t2 = mod(iTime-3., 12.);\n    \n    float fx = smoothstep(0.,1.,t1)*smoothstep(7.,6.,t1);\n    float fy = smoothstep(0.,1.,t2)*smoothstep(7.,6.,t2);\n    vec2 size = mix(vec2(0.1), vec2(0.2), vec2(fx, fy));\n    \n    vec2 trace = traceGrid(ro, rd, size, uv);\n    \n    col = background(uv, size, trace.y);\n    \n    \n    float forward = dot(uv-ro,rd);\n    float sf = step(0.,forward);\n    float ldst = length(uv-ro - forward*rd);\n    col *= mix(1., smoothstep(0., 0.015, ldst), sf);\n    col = mix(col, vec3(1.,0.,0.), sf* step(ldst,0.005));\n    \n    col *= smoothstep(0., 0.03, trace.x);\n    col = mix(col, vec3(0.,1.,0.), step(trace.x, 0.013));\n    col *= trace.y + (1.-trace.y)*exp(-7.*trace.x);\n    \n    float d0 = distance(uv, ro);\n    col *= smoothstep(0., 0.05, d0);\n    col = mix(col, vec3(0.9,0.8,0.), step(d0, 0.02));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}