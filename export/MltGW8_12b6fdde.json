{"ver":"0.1","info":{"id":"MltGW8","date":"1469179911","viewed":345,"name":"Box Blur JamesC","username":"jamjar121212","description":"A simple 2 stage box blur with customisable kernel size","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["2d","blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int KERNEL_SIZE = 101;\n\nvoid blurVertical(in vec2 fragCoord, out vec4 finalColor)\n{          \n   int topMostIndex = -((KERNEL_SIZE - 1) / 2);\n    \n   vec4 colorAccumulator = vec4(0.0);\n    \n   for (int i = 0; i < KERNEL_SIZE; i++) {\n        float currentIndex = float(topMostIndex + i);\n        vec2 uv = vec2(fragCoord.x, fragCoord.y + float(i));\n               uv = uv.xy / iResolution.xy;\n        colorAccumulator += texture(iChannel0, uv);\n    }\n    \n    colorAccumulator *= 1.0 / float(KERNEL_SIZE);\n    finalColor = colorAccumulator;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 verticalColor = vec4(0.0);\n    \n    blurVertical(fragCoord.xy, verticalColor);\n    \n    fragColor = verticalColor;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int KERNEL_SIZE = 101;\n\nvoid blurHorizontal(in vec2 fragCoord, out vec4 finalColor)\n{          \n   int leftMostIndex = -((KERNEL_SIZE - 1) / 2);\n    \n   vec4 colorAccumulator = vec4(0.0);\n    \n   for (int i = 0; i < KERNEL_SIZE; i++) {\n        float currentIndex = float(leftMostIndex + i);\n        vec2 uv = vec2(fragCoord.x + float(i), fragCoord.y);\n               uv = uv.xy / iResolution.xy;\n        colorAccumulator += texture(iChannel0, uv);\n    }\n    \n    colorAccumulator *= 1.0 / float(KERNEL_SIZE);\n    finalColor = colorAccumulator;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 horizontalColor = vec4(0.0);\n    \n    blurHorizontal(fragCoord.xy, horizontalColor);\n    \n    fragColor = horizontalColor;\n}","name":"Buf A","description":"","type":"buffer"}]}