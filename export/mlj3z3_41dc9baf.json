{"ver":"0.1","info":{"id":"mlj3z3","date":"1673652222","viewed":156,"name":"Antipod - MAGFest #07","username":"Flopine","description":"One of the piece I made for ThronoCrigger's set at MAGFest 2023! ","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarching","animation","chromatic","isometric","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 centered_uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 rgb = vec3(texture(iChannel0, (uv*.99+.01)-length(centered_uv*0.9)*0.007).r,\n                     texture(iChannel0, (uv*.99+.01)-length(centered_uv*0.95)*0.004).g,\n                     texture(iChannel0, (uv*.99+.01)+length(centered_uv*0.92)*0.002).b\n                 );\n    \n    fragColor = vec4(sqrt(rgb), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI acos(-1.)\n#define TAU (2.*PI)\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a));\n\n#define BPM (140./60.)\n#define t (iTime*BPM)\n#define anim(x) clamp(abs(x-2.)-1.,0.,1.)\n#define dt(off) fract(t+off)\n\nfloat cube (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n        \nfloat SDF (vec3 p)\n{  \n    p.yz *= rot(-atan(1./sqrt(2.)));    \n    p.xz *= rot(PI/4.);\n    \n    vec2 center = floor(p.xz)+.5;\n    vec2 a = anim(dt(0.))*mod(ceil(vec2(1.,0.)-t),2.);\n    p.xz += (mod(length(center) ,2.)>.5)? a:-a;\n    p.xz = fract(p.xz)-.5;\n    float d = cube(p,vec3(.4)); \n    \n    return d;\n}\n\nvec3 gn (vec3 p, float e)\n{\n    vec2 eps = vec2(e,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 ro=vec3(uv*3.5,-30.), rd=vec3(0.,0.,1.),p=ro, col=vec3(0.);\n    bool hit=false;\n    float shad=0.;\n    for (float i=0.; i<64.;i++)\n    {\n        float d = SDF(p);\n        if(d<0.001)\n        {\n            hit=true;shad=i/64.;break;\n        }\n        p += d*rd;\n    }\n\n    if (hit)\n    {\n        vec3 n1 = gn(p,1e-1);\n        vec3 n2 = gn(p,1e-3);\n        // thanks 0b5vr for this trick <3\n        float edgemask = clamp(smoothstep(0.2,0.25,length(n1-n2)),0.0,1.);\n    \n        col += edgemask;\n    }\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}