{"ver":"0.1","info":{"id":"M3KGRV","date":"1717943511","viewed":27,"name":"RandomInTile","username":"yabadabu","description":"Another pseudo random generation, this time the world units are divided in cells of 16x16 = 256 numbers, and order of the values inside each cell is permuted randomly per tile, meaning there is only one instance of each value in each big cell\n\nIt's still ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat hash(float n) {\n    return fract(sin(n) * 43758.5453123);\n}\n\nfloat hash2d(vec2 p) {\n    // Use a high-precision sine function to create a pseudo-random value\n    vec3 a = fract(sin(vec3(p.x, p.y, p.x + p.y)) * vec3(43758.5453, 83758.5453, 18758.5453));\n    return fract(a.x + a.y + a.z);\n}\n\nint permute(int x, float num) {\n    return int(mod(hash(float(x)) * num, num));\n}\n\nint square8x8[64] = int[64](\n  1,63,24,42,17,47,8,58,62,4,43,21,46,20,59,5,44,22,61,3,60,6,45,19,23,41,2,64,7,57,18,48,16,50,25,39,32,34,9,55,51,13,38,28,35,29,54,12,37,27,52,14,53,11,36,30,26,40,15,49,10,56,31,33\n);\n \nint shuffle( int k ) {\n  return square8x8[ k ] - 1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float tile_size = 8.0;\n    vec2 aspect_ratio = vec2( 1.0, iResolution.y / iResolution.x ) * tile_size;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * aspect_ratio;\n    vec2 world_tile = floor( uv );\n    \n    // This is just for the background color of the big tile\n    vec2 tile = vec2( hash( world_tile.x + world_tile.y * 124.02 ), hash( world_tile.y + world_tile.x * 12321.02));\n    \n    // Add random per tile\n    float base = hash2d( world_tile.xy );\n    \n    float ndivs = 8.0;\n    int nsubcells = int(ndivs * ndivs);\n    int frame_to_view = int(floor(iTime * 4.0 )) % nsubcells;\n    \n    // 0..1,0..1\n    vec2 in_cell = fract( uv );\n    \n    // 0..N-1/N, 0..N-1/N\n    vec2 in_cell_sections = floor( in_cell * ndivs ) / ndivs;\n    \n    float linear_in_cell = (in_cell_sections.x + in_cell_sections.y * ndivs ) * ndivs;\n    int ilinear_in_cell = int( linear_in_cell );\n    \n    int tile_id = int(base*ndivs*ndivs) % nsubcells;\n    \n    ilinear_in_cell = ( ilinear_in_cell + tile_id ) % nsubcells;\n    \n    int ipermuted = shuffle(ilinear_in_cell );\n    \n    /*\n    if( (tile_id & 1) == 1 ) {\n      ipermuted = ( ipermuted * 13 ) % nsubcells;\n      ipermuted = shuffle( ipermuted );\n    }  \n    if( (tile_id & 2) != 0 ) {\n      ipermuted = nsubcells - 1 - ipermuted;\n      ipermuted = shuffle( ipermuted );\n    }\n    */\n    ipermuted = shuffle( ( ipermuted +  tile_id ) % nsubcells ) % nsubcells;\n    \n    bool highlighted = (frame_to_view == ipermuted)\n         //|| ((frame_to_view + 1) == ipermuted)\n      ;\n    \n    vec3 ocolor = vec3(tile,0);\n    //ocolor = vec3(1,1,1);\n    if( highlighted )\n        ocolor = vec3(1,1,1) - ocolor;\n\n    fragColor = vec4(float(ipermuted)/(ndivs*ndivs),0,0,1);\n    fragColor = vec4(ocolor,1.0);\n}","name":"Image","description":"","type":"image"}]}