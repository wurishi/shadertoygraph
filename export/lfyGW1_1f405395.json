{"ver":"0.1","info":{"id":"lfyGW1","date":"1712687417","viewed":79,"name":"Metal Abstract","username":"elifront","description":"metal sphere noise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sphere","metal","amoeba"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float EPSILON = 0.001;\n\nfloat sdNoisySphere(vec3 p, float s) {\n    float a = 10.;\n    float b = 10.;\n    float c = 20.;\n    return length(p) - s + sin(a * p.x + iTime) * sin(b * p.y - iTime) * sin(c * p.z - iTime) * sin(iTime) * 0.3;\n}\n\nvec2 sceneSDF(vec3 p) {\n    return vec2(sdNoisySphere(p, 1.), 1.);\n}\n\n// Estimate normal using gradient\nvec3 getNormalFromP(vec3 p) {\n    float x = sceneSDF(vec3(p.x + EPSILON, p.y, p.z)).x - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)).x;\n    float y = sceneSDF(vec3(p.x, p.y + EPSILON, p.z)).x - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)).x;\n    float z = sceneSDF(vec3(p.x, p.y, p.z + EPSILON)).x - sceneSDF(vec3(p.x, p.y, p.z - EPSILON)).x;\n    return normalize(vec3(x, y, z));\n}\n\n// Phong shading\nfloat phongShading(vec3 normalizedSurfacePos, vec3 normalizedLightDir, vec3 normalizedDirectionToCamera, float lightAmbient, float lightDiffuse, float lightSpecular, float materialAmbient, float materialDiffuse, float materialSpecular) {\n    float ambient = lightAmbient * materialAmbient;\n\n    // diffuse component\n    float diff = max(dot(normalizedSurfacePos, normalizedLightDir), 0.);\n    float diffuse = materialDiffuse * diff * lightDiffuse;\n    //\n    // // specular component\n    vec3 r = reflect(-normalizedLightDir, normalizedSurfacePos);\n    float spec = max(dot(r, normalizedDirectionToCamera), 0.);\n    float specular = materialSpecular * spec * lightSpecular;\n    //\n    float color = ambient + diffuse + specular;\n\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord.xy * 2. - iResolution.xy) / iResolution.y;\n    vec2 um = iMouse.xy / iResolution.xy * 10. - 5.;\n\n    vec3 ro = vec3(0, 0, -3); // ray origin\n    float fov = .5;\n    vec3 rd = normalize(vec3(uv * fov, 1)); // ray direction\n    vec3 col;\n    float t = 0.;\n\n    // Raymarching\n    for (int i = 0; i < 80; i++) {\n        vec3 p = ro + rd * t;\n        float d = sceneSDF(p).x;\n        t += d;\n        if (d < EPSILON * 10. || t > 100.) break;\n    }\n\n    if (t < 100.) {\n        vec3 p = ro + rd * t;\n        vec3 normal = getNormalFromP(p);\n        float id = sceneSDF(p).y;\n\n        // Surface properties\n        float materialAmbient = 0.5;\n        float materialDiffuse = 0.5;\n        float materialSpecular = 0.6;\n\n        // Light properties\n        float lightAmbient = 0.1;\n        float lightDiffuse = 1.;\n        float lightSpecular = 1.;\n\n        // vec3 lightPos = vec3(0., 0., (sin(u_time * 2.) - .7) * 10.);\n        vec3 lightPos = vec3(um.x, um.y, -3.);\n        vec3 lightDir = normalize(lightPos - p);\n        vec3 viewDir = normalize(-rd);\n\n        col = vec3(phongShading(normal, lightDir, viewDir, lightAmbient, lightDiffuse, lightSpecular, materialAmbient, materialDiffuse, materialSpecular));\n\n        col *= vec3(.7, .6, .8);\n    } else {\n        col = vec3(0.0);\n    }\n\n    fragColor = vec4(col, 1);\n}\n\n\n","name":"Image","description":"","type":"image"}]}