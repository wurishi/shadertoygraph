{"ver":"0.1","info":{"id":"4fB3Dc","date":"1705625143","viewed":96,"name":"Ai Refinement","username":"iNutted","description":"Depiction of how AI receives and refines data.\n\nInterestingly, an image/screenshot of this breaks Ai's vision.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ai"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// GLSL Fragment Shader: Dynamic Visualization of AI Data Interaction\n\n// Function to generate a pseudo-random number based on a coordinate\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// Function to create a dynamic grid pattern\nvec3 dynamicGrid(vec2 uv, float time) {\n    vec2 grid_uv = fract(uv) - 0.5;\n    vec2 id = floor(uv);\n    float noise = rand(id + time); // Random value based on grid ID and time\n    float intensity = smoothstep(0.45, 0.55, abs(grid_uv.x - noise)) * smoothstep(0.45, 0.55, abs(grid_uv.y - noise));\n    return vec3(intensity);\n}\n\n// Main image rendering function\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates from -1 to 1\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Time variable for animation\n    float time = iTime * 0.1;\n\n    // Apply a dynamic grid pattern over the static grid\n    vec3 col = dynamicGrid(uv * 10.0, time);\n\n    // Create a visual effect representing data being processed\n    vec2 center = vec2(0.5) - uv;\n    float dist = length(center);\n    float pulse = sin(time * 10.0 + dist * 10.0) * 0.5 + 0.5;\n    col *= pulse; // Modulate the grid intensity with the pulse\n\n    // Output the final color\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}