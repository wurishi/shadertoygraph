{"ver":"0.1","info":{"id":"lf3cRs","date":"1731016101","viewed":108,"name":"Arcadia Of Morozoff","username":"sobayaOnJupiter","description":"Practice of 2D Folding\nMorozoff is a sweets production founded in Kobe. The package design of \"Arcadia\" sold in Morozoff is a little similar pattern to this GLSL.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["sobayaspecial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* https://www.shadertoy.com/view/XsX3zB\n *\n * The MIT License\n * Copyright Â© 2013 Nikita Miropolskiy\n * \n * ( license has been changed from CCA-NC-SA 3.0 to MIT\n *\n *   but thanks for attributing your source code when deriving from this sample \n *   with a following link: https://www.shadertoy.com/view/XsX3zB )\n *\n * ~\n * ~ if you're looking for procedural noise implementation examples you might \n * ~ also want to look at the following shaders:\n * ~ \n * ~ Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n * ~\n * ~ Noise shaders by iq:\n * ~     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n * ~     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n * ~     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n * ~     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n * ~     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n * ~     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n * ~     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n * ~     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n * ~     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n * ~     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n * ~ \n *\n */\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\n/* const matrices for 3d rotation */\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n\n/* directional artifacts can be reduced by rotating each octave */\nfloat simplex3d_fractal(vec3 m) {\n    return   0.5333333*simplex3d(m*rot1)\n\t\t\t+0.2666667*simplex3d(2.0*m*rot2)\n\t\t\t+0.1333333*simplex3d(4.0*m*rot3)\n\t\t\t+0.0666667*simplex3d(8.0*m);\n}\n\n\n\n\n\n//////////////////////////////////\n//\n//  Noise Kokomade\n//\n//////////////////////////////////\n\n\n\n\n\nvec3 originalPicture(vec2 uv,int depth)\n{\n    float interval = 1.0/64.0;\n    bool lines = mod(uv.x+uv.y+interval*0.25*sqrt(2.), interval) < interval/3.0;\n    bool circles = mod(length(uv)+interval/4.0, interval) < interval/2.0;\n    return circles ? vec3(1.,0.6+0.2*mod(float(depth),3.)*0.,0. ) : vec3(0.,0.,0.);\n}\n\nvec2 foldByDepth(vec2 uv, int depth)\n{\n    vec2 result = uv;\n    float freq = float(1 << depth);\n    float size = 1.0 / freq;\n    result.x = mod(result.x, size);\n    result.x = result.x < size / 2.0 ? result.x : size - result.x;\n    //result.x = result.x * freq;\n    result.y = mod(result.y, size);\n    result.y = result.y < size / 2.0 ? result.y : size - result.y;\n    return result;\n}\n\nvec2 leftDownByDepth(vec2 uv, int depth)\n{\n    vec2 result = uv;\n\n    float freq = float(1 << depth);\n    float size = 1.0 / freq;\n\n    result.x -= mod(result.x, size);\n    result.y -= mod(result.y, size);\n    \n    return result;\n}\n\nvec2 rotate2d(vec2 v, float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return vec2(v.x*c - v.y*s, v.x*s + v.y*c);\n}\n\nfloat signedPow(float x, float a) {return sign(x)*pow(abs(x),a);}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0, 0, 0, 1);\n\n    vec2 uv = fragCoord/iResolution.xy * pow(0.95 + 0.15*sin(iTime*0.13),4.0);\n    uv.x *= (iResolution.x/iResolution.y);\n    \n    vec2 p = uv;\n    vec2 center = vec2((iTime - cos(iTime*0.13)/0.13)*0.2,2.5);\n    p += center;\n    \n    p = rotate2d(p-center,(iTime - cos(iTime*0.13))*0.06) + center;\n    //p += 0.5;\n    //p += 0.00*vec2(simplex3d(vec3(uv+iTime*0.03, iTime*0.21)), simplex3d(vec3(uv.yx+iTime*0.03, iTime*0.181+100.0)));\n    \n    \n\n    vec2 toSee = p;\n\n    int depth = 0;\n    for (int j = 0; j < 6; j++)\n    {\n        vec2 uv = p;\n\n        float jj = float(j);\n        float r = simplex3d(vec3(leftDownByDepth(p, j)*10.0, 0.) + vec3(jj*10., jj*10., iTime/(jj+1.)))*0.5+0.5;\n        if (r < pow(0.05*jj,0.35)+0.02)\n        {\n            break;\n        }\n        depth++;\n    }\n\n    toSee = foldByDepth(toSee, depth);\n    col.xyz = originalPicture(toSee, depth);\n\t\n\tfragColor = col ;\n\treturn;\n}","name":"Image","description":"","type":"image"}]}