{"ver":"0.1","info":{"id":"wtjBRW","date":"1598449480","viewed":159,"name":"Minimalism #03","username":"Flopine","description":"Third piece of a shader serie about minimalism, how to do small and quick artwork that are about composition and animation.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","animation","minimalist"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU 6.2831853\n\n#define time(speed) fract(iTime*speed)\n#define bouncy(speed) (abs(sqrt(sin(time(speed)*PI))))\n#define AnimOutExpo(speed) easeOutExpo(time(speed))\n\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(0.07,fwidth(val-thre)))\n#define circle(puv,s) (length(puv)-s)\n#define square(puv,s) (max(abs(puv.x),abs(puv.y))-s)\n#define line(puv,s) (abs(puv)-s)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define mo(puv,s) puv=abs(puv)-s; if(puv.y>puv.x) puv=puv.yx\n#define xor(a,b) ((1.-b)*a+(1.-a)*b)\n\nfloat easeOutExpo (float x) \n{\n\treturn x == 1. ? 1. : 1. - pow(2., -10. * x);\n}\n\nfloat frame (vec2 uv)\n{\n    vec2 uu = uv;\n    float per = 4.;\n    \n    // crossing lines\n    float mask = AAstep(0.01,line(uu.x,0.01));\n    mask *= AAstep(0.01,line(uu.y,0.01));\n    \n    // repetition, mirror\n    mo(uv,vec2(0.));\n\n    //animation\n    float sp = 0.2;\n    float swit = sign(sin(time(sp)*TAU));\n    float anim = (time(sp)*2.-1.)*sign(sin(time(sp*0.5)*TAU));\n    uv = (swit <= 0.) ? uv-vec2(bouncy(sp*2.)*1.2,0.) : uv*rot(AnimOutExpo(sp)*PI*1.03);\n  \n    uu = uv;\n    \n    // star\n    mo(uv,vec2(0.2));\n \tmask *= AAstep(0.01,line(uv.x+uv.y*1.8,0.05));\n    //circles\n    uv -= 0.2;\n    mask *= AAstep(0.02, abs(circle(uv,0.1)));\n    \n    // outside square\n    mask *= AAstep(0.015,abs(square(uu,0.65)));\n    \n    // inside squares\n    mask *= AAstep(0.015,abs(square(uu,0.2)));\n    uu *= rot(PI/4.);\n    mask *= AAstep(0.015,abs(square(uu,0.13)));\n    \n    return mask;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(frame(uv*2.));\n    col = xor(col,vec3(0.,0.,0.15));\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}