{"ver":"0.1","info":{"id":"MflyRr","date":"1720726594","viewed":54,"name":"brilliant geometry","username":"netfetti","description":"I was experimenting with code as I am a newbie, and I came up with this interesting shader. ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","shapes","geometry","transforming"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nfloat timeScale = 0.3;\nfloat brilliance = 1.2;\nfloat colorShift = 1.0;\nfloat zoom = -6.0;\nfloat depth = -.2;\nint iterations = 7;\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\nmat2 rotate2d(float angle) {\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nfloat map(vec3 p) {\n    float d = length(p) - 1.0;\n    float t = iTime * timeScale;\n    \n    for (int i = 0; i < 10; i++) {\n        if (i >= iterations) break;\n        \n        p.xy *= rotate2d(t * 0.1 + float(i) * 0.2);\n        p = abs(p) - vec3(brilliance * 0.5);\n        p.yz *= rotate2d(t * 0.2 - float(i) * 0.1);\n        \n        float sphere = sdSphere(p, 0.3 * brilliance);\n        d = min(d, sphere);\n        \n        // Add brilliant effect\n        d += sin(p.x * 10.0 + t) * sin(p.y * 10.0 + t) * sin(p.z * 10.0 + t) * 0.03 * brilliance;\n    }\n    \n    return d;\n}\n\nvec3 calcNormal(vec3 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy*map(p + k.xyy*h) + \n                     k.yyx*map(p + k.yyx*h) + \n                     k.yxy*map(p + k.yxy*h) + \n                     k.xxx*map(p + k.xxx*h));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y);\n    uv *= zoom;\n    \n    vec3 ro = vec3(0.0, 0.0, -3.0 + 2.0 * depth);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    \n    float t = 0.0;\n    for(int i = 0; i < 100; i++) {\n        vec3 p = ro + rd * t;\n        float d = map(p);\n        if(abs(d) < 0.001) break;\n        t += d;\n        if(t > 20.0) break;\n    }\n    \n    vec3 p = ro + rd * t;\n    vec3 n = calcNormal(p);\n    \n    float fresnel = pow(1.0 - max(dot(n, -rd), 0.0), 3.0);\n    \n    vec3 color = hsv2rgb(vec3(\n        fract(length(p) * 0.1 + colorShift + iTime * timeScale * 0.1),\n        0.8,\n        fresnel + brilliance * 0.2\n    ));\n    \n    color += pow(fresnel, 4.0) * brilliance;\n    \n    vec2 distortedUV = uv * 0.5 + 0.5;\n    vec3 texColor = texture(iChannel0, distortedUV).rgb;\n    color = mix(color, texColor, 0.3);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}