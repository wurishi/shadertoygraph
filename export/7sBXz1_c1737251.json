{"ver":"0.1","info":{"id":"7sBXz1","date":"1619642760","viewed":86,"name":"Switch Automata","username":"SnoopethDuckDuck","description":"\"Switches\" patterns in waves, thought it looked cool (better in full screen)\n\npress r to reset ","likes":5,"published":1,"flags":48,"usePreview":0,"tags":["cellularautomata"],"hasliked":0,"parentid":"fsXSWl","parentname":"3 behaviour automata"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code forked from Inigo Quilez's game of life shader\n// https://www.shadertoy.com/view/XstGRf\n// Reset code stolen from somewhere else - sorry!\n// (Press R to reset shader)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n//fragColor = vec4( 1. - step(3. * texelFetch( iChannel0, ivec2(fragCoord), 0 ).x ,0.5));\nfragColor = vec4(3. * texelFetch( iChannel0, ivec2(fragCoord), 0 ).x );\n\n\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define KEYBOARD iChannel1\n#define KEY_RESET 82\n\n\nfloat Cell( in ivec2 p )\n{\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n   // return (texelFetch(iChannel0, p, 0 ).x > 0.5 ) ? 1 : 0;\n   return texelFetch(iChannel0, p, 0 ).x;\n}\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*138.5453123);\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nfloat S(float x)\n{\nreturn step(0.5,x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2( fragCoord );\n    \n    if (key_down(KEY_RESET)) {\n    // if you want a random reset, uncomment\n    \n    float f =  hash1(fragCoord.x*13.0+ 10.131 * iTime + hash1(fragCoord.y*73.1));\n    \n    float x= (fragCoord.x )/ iResolution.y - 0.375;\n    float y = fragCoord.y / iResolution.y;\n    vec2 dir = vec2(x,y) - 0.5;\n    float d = length(dir);\n    float m =0.15;\n    //float f = max(step(fract(3. * abs(x-0.5)),0.004),\n   // step(fract(3. * abs(y-0.5)),0.004) )*       \n   // hash1(fragCoord.x*13.0+ 10.131 * iTime + hash1(fragCoord.y*73.1));\n//float f =   0.5 * (1. -d) * hash1(fragCoord.x*13.0+ 10.131 * iTime + hash1(fragCoord.y*73.1));\nf = step(d,0.05);\n\n\n    fragColor = vec4( f, 0.0, 0.0, 0.0 );\n        return;\n    }\n    \n  // center cell\n  float e = Cell(px); \n\n  // neighbour cells\n  float t = Cell(px + ivec2(0,-1));\n  float b = Cell(px + ivec2(0,1));\n  float l = Cell(px + ivec2(-1,0));\n  float r = Cell(px + ivec2(1,0));   \n\n float tl = Cell(px + ivec2(-1,-1));\n float tr = Cell(px + ivec2(1,-1));\n float bl = Cell(px + ivec2(-1,1));\n float br = Cell(px + ivec2(1,1));\n\n  float t2 = Cell(px + ivec2(0,-2));\n  float b2 = Cell(px + ivec2(0,2));\n  float l2 = Cell(px + ivec2(-2,0));\n  float r2 = Cell(px + ivec2(2,0));   \n\n\nfloat q = hash1(fragCoord.x*13.0+ 10.131 * iTime + hash1(fragCoord.y*73.1));\n\n\n\n\nif (S(t) + S(b) + S(l) + S(r) + S(tl) + S(tr) + S(bl) + S(br) == 1. && e < 1.)\ne = 400.;// 1. * step(0.5, 1. * q);\nelse if (e > 1.)\ne -= 1.;\nelse if (e > 0. && e < 2.)\n{\nif (tl * tr > 0. || tl * bl > 0. || bl * br >0. || tr * br > 0.)\ne = 0.;\nelse if (t * l > 0. || t * r > 0. || b * l > 0. || b * r > 0.)\ne = 0.;\nelse if (t2 * b2 > 0. || l2 * r2 > 0.)\ne = 0.;\n\n}\n//e = step(0.5,e);\n// e = max(min(e,1.),0.); \n \n \n  float f = e;\n   if( iFrame==0 ) \n   {   \n //   f = hash1(fragCoord.x*13.0 + hash1(fragCoord.y*73.1));\n      float x= fragCoord.x / iResolution.y - 0.375;\n    float y = fragCoord.y / iResolution.y;\n    vec2 dir = vec2(x,y) - 0.5;\n    float d = length(dir);\n    float m =0.3;\n// f = (1. - d/m) *  step(d,m)\n//*hash1(fragCoord.x*13.0+ 10.131 * iTime + hash1(fragCoord.y*73.1));\nf = step(d,0.05);\n\n\n}\n    \n\tfragColor = vec4( f, 0.0, 0.0, 0.0 );\n}","name":"Buffer A","description":"","type":"buffer"}]}