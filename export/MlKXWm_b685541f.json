{"ver":"0.1","info":{"id":"MlKXWm","date":"1484693681","viewed":1175,"name":"Distance Blobs","username":"cacheflowe","description":"A wannabe reaction-diffusion, but not at all :-P ","likes":19,"published":3,"flags":0,"usePreview":0,"tags":["blobs","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime * 1.;\t\t\t\t\t\t\t\t\t// adjust time\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\t// center coordinates\n    float timeOsc = sin(time) * 0.05;\t\t\t\t\t\t\t\t// oscillation helper\n    float dist = 0.;\t\t\t\t\t\t\t\t\t\t\t\t// start distance count from 0\n    for(float i=10.; i < 60.; i++) {\t\t\t\t\t\t\t\t// create x control points\n        float rads = timeOsc + i;\t\t\t\t\t\t\t\t\t// get rads for control point\n        vec2 ctrlPoint = vec2(sin(rads), cos(rads));\t\t\t\t// control points in a circle \n        ctrlPoint *= abs(cos(rads)) * 5.;\t\t\t\t\t\t\t// oscillate control point radius - the magic happens w/abs()\n        dist += sin(i + 35. * distance(uv, ctrlPoint));\t\t\t\t// sum up oscillated distance between control points\n    }\n\tfragColor = vec4(vec3(dist),1.0);\n}","name":"Image","description":"","type":"image"}]}