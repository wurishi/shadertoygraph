{"ver":"0.1","info":{"id":"WltcWB","date":"1609883070","viewed":102,"name":"sea and stone","username":"regis","description":"The sea. You can move with the mouse.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","sea","water","stone"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 tpos = vec4(0.0, 0.0, 0.0, 0.0);\nfloat angle_tpos;\nbool done = false;\n\nmat2 Rot(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// from iq\nfloat Noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n  \tf = f*f*(3.0-2.0*f);\n  \tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n  \tvec2 rg = textureLod( iChannel0, (uv+0.5)/256.0, 0.0).yx;\n  \treturn mix( rg.x, rg.y, f.z );\n}\n\n// ref https://www.shadertoy.com/view/Xs33Df\nfloat Noise3D(in vec3 p){\n    const vec3 s = vec3(7, 157, 113);\n\tvec3 ip = floor(p); // Unique unit cell ID.\n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n\tp -= ip; // Cell's fractional component.\n    p = p*p*(3. - 2.*p);\n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); // Range: [0, 1].\n\t\n}\n\nfloat FBM( in vec3 p )\n{\n    float n = 0.0;\n    n += 0.50000*Noise( p*1.0 );\n    n += 0.25000*Noise( p*2.0 );\n    n += 0.12500*Noise( p*4.0 );\n    n += 0.06250*Noise( p*8.0 );\n    n += 0.03125*Noise( p*16.0 );\n    return n/0.984375;\n}\n\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.)-0.1;\n    \n    return e+i;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return -(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r);\n}\n\nfloat Box(vec3 p, vec3 sc, float r){\n    return length(max(abs(p)-sc, 0.))-r;\n}\n\nvec3 add_tpos(vec3 tp){\n    return vec3(tp.x+tpos.x, tp.y+tpos.y, tp.z+tpos.z);\n    \n}\n\nvec3 rot_y(vec3 tp, float a){\n    tp.xz *= Rot(a);\n    return tp;\n\n}\n\nfloat noi(vec3 p){ \n  vec3 f=floor(p),s=vec3(7,157,113);\n  p-=f; vec4 h=vec4(0,s.yz,s.y+s.z)+dot(f,s);;\n  p=p*p*(3.-2.*p);\n  h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n  h.xy=mix(h.xz,h.yw,p.y);\n  return mix(h.x,h.y,p.z);  \n}\n\n\n\nvec2 GetDist(vec3 p, vec2 uv){\n\n\n    \n    \n    vec4 s = vec4(1.0,0.0, 2.0,1.0);\n    vec4 s2 = vec4(2.0 ,0.0, 6.0, 0.2);\n    vec4 s3 = vec4(3.0,7.0, 5.0,0.5);\n    \n    \n    \n    vec2 d=vec2(0.0);;\n    float pd = dot(p, vec3(0.0, 1.0, 0.0));\n    \n    \n    pd = pd - noi(p*0.91+iTime)*0.5;// -sin(p.x+iTime*2.0)*0.2-cos(p.z+iTime*2.0)*0.1+sin(p.y*3.0+iTime)*0.1;//- length(texture(iChannel0, (uv*.03) ).rgb)*.8;\n    \n    vec3 sp = (p)-s.xyz;\n     sp.y += sin(iTime)*0.5;\n    float sd = length((sp))-s.w;\n    \n    \n    \n    //sd -= noi(sp) - noi(sp*15.)*0.1;\n    \n    \n    vec3 sp2 = (p)-s2.xyz;\n    sp2.y += sin(iTime)*0.1;\n    float sd2 = length((sp2))-s2.w;\n    \n    \n    vec3 bx = vec3(7.0, 0.0, 4.);\n    vec3 bp = p-bx;\n    vec3 sc = vec3(1.0, 1.0, 0.5);\n    \n    bp.y += sin(iTime*0.5);\n    //bp -= noi(bp) - noi(bp*15.)*0.1;\n           \n    float dbv = Box(bp, sc, 0.5);\n        \n    vec3 b1 = vec3(-7.0, 1.0, 15.0);\n    vec3 b2 = vec3(-7.0, 1.0, -2);\n    \n    float balle = sdCylinder(p, b1, b2, 4.0);\n    balle -= noi(p) - noi(p*5.)*0.1;\n    \n    b1 = vec3(20.0, 1.0, 15.0);\n    b2 = vec3(20.0, 1.0, -2);\n    \n    float balle2 = sdCylinder(p, b1, b2, 4.0);\n    balle2 -= noi(p/2.5) ;//- noi(p*2.)*0.1;\n    \n    vec3 sp3 = (p)-s3.xyz;\n    //sp3.y += sin(iTime)*0.1;\n    float sd3 = length((sp3))-s3.w;\n    \n      \n      if(sd < sd2){\n          d.x = sd;\n          d.y = -1.0;\n       }\n       else\n       {\n           d.x = sd2;\n          d.y = 0.0;\n       }\n       if(dbv < d.x){\n          d.x = dbv;\n          d.y = 1.0;\n       }\n            \n       if(pd < d.x){\n          d.x = pd;\n          d.y = 2.0;\n       }\n       \n       if(balle < d.x){\n          d.x = balle;\n          d.y = 3.0;\n       }\n       \n       if(balle2 < d.x){\n          d.x = balle2;\n          d.y = 5.0;\n       }\n       \n       if(sd3 < d.x){\n          d.x = sd3;\n          d.y = 4.0;\n       }\n       \n      \n   // \n    return d;\n    \n    \n}\n\nvec3 RayMarch2(vec3 eye, vec3 viewRayDirection, vec2 uv){\n    vec3 t = vec3(0.);\n    float max = -100000.0;\n    vec2 dd;\n    float depth = 0.0, end = 10.0;\n    for (int i = 0; i < 100; i++) {\n        dd = GetDist(eye + t.x * viewRayDirection, uv);\n        t.y = dd.x;\n        \n        \n            \n        if (t.y < 0.01) {\n           t.z = dd.y;\n           return t;\n        }\n        t.x += t.y;\n        \n        \n\n        if (t.x >= 70.0) {\n            t.z = dd.y;\n            return t;\n        }\n    }\n    \n    \n    \n    t.z = dd.y;\n    \n    \n    return t;\n\n\n}\n\n\n\n\nfloat GetLight(vec3 p, vec2 uv, vec3 lg, out vec3 n){\n    vec3 lightpos = lg;\n    //lightpos.xz += vec2(sin(iTime), cos(iTime));\n    vec3 l = normalize(lightpos-p);\n    \n    vec2 d = GetDist(p, uv);\n    vec2 e = vec2(0.01, 0);\n    \n    \n    float dd = d.x;\n    n = d.x - vec3(\n        GetDist(p-e.xyy, uv).x,\n        GetDist(p-e.yxy, uv).x,\n        GetDist(p-e.yyx, uv).x);\n    \n    n = normalize(n);\n    \n    float dif = dot(refract(l,n, 0.9), l);\n    //float dif = clamp(dot(n, l), 0., 1.);\n    //vec2 dd = RayMarch2(p+n*.01, l, uv);\n   //if(dd.x < length(lightpos-p))dif *= 0.1;\n    return dif ;\n\n}\n\nvec3 GetLightM(vec3 p, vec2 uv, vec3 lg, out vec3 n, vec3 ro, vec3 rd){\n    vec3 lightpos = lg;\n    lightpos.xz += vec2(sin(iTime), cos(iTime));\n    vec3 l = normalize(lightpos-p);\n    \n    vec2 d = GetDist(p, uv);\n    vec2 e = vec2(0.01, 0);\n    \n    \n   // float dd = d.x;\n    n = d.x - vec3(\n        GetDist(p-e.xyy, uv).x,\n        GetDist(p-e.yxy, uv).x,\n        GetDist(p-e.yyx, uv).x);\n    \n    n = normalize(n);\n    \n    float dif = clamp(dot(n, l), .0, 1.);\n  \n    vec3 dd = RayMarch2(p+n*.01, l, uv);\n    p = ro + reflect(n, l) * dd.x;\n   \n    //lightpos-p\n    if(dd.x < length(vec3(1.0, 1.0, 1.0)-p/2.0)){\n        if(dd.z == -1.0){\n            return vec3(dif)*vec3(1.0, 0.1, 1.0);\n        }\n        else if(dd.z == 1.0){\n            return vec3(dif)*vec3(1.0, 0.0, 0.0);\n        }\n        if(dd.z == 0.0){\n            return vec3(dif)*vec3(0.0, 1.0, 0.0);\n        }\n        else if(dd.z == 3.0)\n        {\n             vec3 colXZ = texture(iChannel1, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel1, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel1, p.xy*0.1).rgb;\n             \n             vec3 col = (colYZ * n.x + colXZ * n.y + colXY*n.z)*vec3(dif);\n             col += vec3(0.0, 0.8, 0.8);\n            return col;\n             \n        }\n        else if(dd.z == 5.0){\n        \n            vec3 colXZ = texture(iChannel1, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel1, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel1, p.xy*0.1).rgb;\n             \n             vec3 col = (colYZ * n.x + colXZ * n.y + colXY*n.z)*vec3(dif);\n              col -= vec3(0.0, 0.4, 0.4);\n             return col;\n        }\n        else\n            return vec3(dif);\n            \n     }\n     else\n         return vec3(dif);\n\n}\n\n\nvec3 lightDir = normalize( vec3(0.5,0.6,0.) );\nconst mat2 m2 = mat2( 0.60, -0.80, 0.80, 0.60 );\n//ref: https://www.shadertoy.com/view/Msdfz8\nvec3 Cloud(vec3 bgCol,vec3 ro,vec3 rd,vec3 cloudCol,float spd)\n{\n    vec3 col = bgCol;\n    float t = iTime * 0.15* spd;\n    vec2 sc = ro.xz + rd.xz*((3.)*40000.0-ro.y)/rd.y;\n    vec2 p = 0.00002*sc;\n    float f = 0.0;\n  \tfloat s = 0.5;\n  \tfloat sum =0.;\n  \tfor(int i=0;i<5;i++){\n    \tp += t;t *=1.5;\n    \tf += s*textureLod( iChannel0, p/256.0, 0.0).x; p = m2*p*2.02;\n    \tsum+= s;s*=0.6;\n  \t}\n    float val = f/sum; \n    col = mix( col, cloudCol, smoothstep(0.5,0.8,val) );\n    return col;\n}\nvec3 RayMarchCloud(vec3 ro,vec3 rd){\n    vec3 col = vec3(0.0,0.0,0.0);  \n    float sundot = clamp(dot(rd,lightDir),0.0,1.0);\n    \n     // sky      \n    col = vec3(0.2,0.5,0.85)*1.1 - rd.y*rd.y*0.5;\n    col = mix( col, 0.85*vec3(0.7,0.75,0.85), pow( 1.0-max(rd.y,0.0), 4.0 ) );\n    // sun\n    col += 0.25*vec3(1.0,0.7,0.4)*pow( sundot,5.0 );\n    col += 0.25*vec3(1.0,0.8,0.6)*pow( sundot,64.0 );\n    col += 0.4*vec3(1.0,0.8,0.6)*pow( sundot,512.0 );\n    // clouds\n    col = Cloud(col,ro,rd,vec3(1.0,0.95,1.0),1.);\n            // .\n    col = mix( col, 1.5*vec3(0.0,0.5,1.0), pow( 1.0-max(rd.y,0.0), 16.0 ) );\n    return col;\n}\n\n\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity, vec2 uv) {\n    \n    vec2 d = GetDist(p, uv);\n    vec2 e = vec2(0.01, 0);\n    \n    \n    vec3 N = d.x - vec3(\n        GetDist(p-e.xyy, uv).x,\n        GetDist(p-e.yxy, uv).x,\n        GetDist(p-e.yyx, uv).x);\n    \n    N = normalize(N);\n    //vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye, vec2 uv) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity,\n                                  uv);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity,\n                                  uv);    \n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    \n    //iMouse.xy / iResolution.xy\n    \n    vec3 ro = vec3(0, 3.0, -4.);\n    //ro.xz *= Rot(iTime);\n   //ro.y = sin(iTime)*0.5+0.5;\n    vec3 lookat = vec3((iMouse.x/iResolution.x)*10.0, (iMouse.y/iResolution.y)*30.0, 10.0);//vec3(0.0, 1.5, 0.0);\n    float zoom = 1.0;    \n    vec3 f = normalize(lookat-ro),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f, r),\n        c = ro + f * zoom,\n        i = c + uv.x * r + uv.y * u,\n        rd = normalize(i-ro);\n        \n    \n        \n     vec3 t;\n     float dO, dif, dif2, dif3, difT;\n     vec3 p;\n     \n  \n     \n     t = RayMarch2(ro, rd, uv);\n     p = ro + rd * t.x;\n     \n    vec3 n1, n2, n3, nl1;\n    float alpha = 1.0;\n    vec3 diff = GetLightM(p, uv, vec3(-10.0, 5, -6), n1, ro, rd);\n    vec3 diff2 = GetLightM(p, uv, vec3(20.0, 5., 3.0), n2, ro, rd);\n    dif = GetLight(p, uv, vec3(-10.0, 5, -6), nl1);\n    //dif2 = GetLight(p, uv, vec3(5.0, 5, 0), n2);\n    dif3 = GetLight(p, uv, vec3(10.0, 1.0, 3.0), n3);\n    //phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye)\n    vec3 ph = phongIllumination(vec3(1.0), vec3(dif), vec3(1.0, 1.0, 0.0), 50.0, p, ro, uv);\n    \n     if(t.y >= 0.1){\n         //col = vec3(0.0, 0.8, 1.0);\n         col = RayMarchCloud(ro, rd);\n         \n     }\n     else{\n     \n                  \n         if(t.z == 0.0){\n             col = diff * vec3(0.0, 1.0, 1.0);//vec3(dif)* vec3(0.0, 1.0, 0.0)+ vec3(dif2)* vec3(0.0, 1.0, 0.0);\n         }\n         else if(t.z == 1.0){\n             col = diff* vec3(1.0, 0.0, 0.0);//vec3(dif)* vec3(1.0, 0.0, 0.0)+ vec3(dif2)* vec3(1.0, 0.0, 0.0);\n         }\n         else if(t.z == 2.0){\n             alpha = 1.0;\n             // col += mix(vec3(0.0, 0.8, 1.0), vec3(dif)* vec3(0.0, 1.0, 1.0), pow(smoothstep(0., 1.0, dif),2.0) );\n            col = mix(diff * vec3(1.0, 0.5, 0.5), diff2 * vec3(1.0, 0.5, 0.5), exp(vec3(0.4)) );\n             //col += mix(vec3(0.0, 0.1, 0.1), vec3(dif)* vec3(0.0, 1.0, 1.0), vec3(0.8) );\n             //pow(smoothstep(0., 1.0, dif),2.0)\n            col += normalize(vec3(0.1, 0.5, 0.5));\n         }\n         else if(t.z == -1.0){\n             col = vec3(dif)*vec3(1.0, 0.1, 1.0);//vec3(dif)* vec3(1.0, 0.1, 1.0)+ vec3(dif2)* vec3(1.0, 0.1, 1.0);\n         }\n         else if(t.z == 3.0){\n             vec3 colXZ = texture(iChannel1, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel1, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel1, p.xy*0.1).rgb;\n             \n             col = (colYZ * nl1.x + colXZ * nl1.y + colXY*nl1.z)*vec3(dif);\n             \n             //col = vec3(dif)* vec3(1.0, 0.5, 0.5) + vec3(dif2)* vec3(1.0, 0.5, 0.5);\n         }\n         else if(t.z == 4.0){\n             \n             col = vec3(dif3)* vec3(1.0, 0.5, 0.5) + vec3(dif3)*texture(iChannel1, uv+iTime*0.01).rgb;\n         }\n         else if(t.z == 5.0){\n             vec3 colXZ = texture(iChannel1, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel1, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel1, p.xy*0.1).rgb;\n             \n             col = (colYZ * n3.x + colXZ * n3.y + colXY*n3.z)*vec3(dif3);\n             \n             //col = vec3(dif)* vec3(1.0, 0.5, 0.5) + vec3(dif2)* vec3(1.0, 0.5, 0.5);\n         }\n         \n         \n         vec2 j = uv*3.0;\n         j.x += 0.0;\n         j.y += .1;\n         float sparkle = 1./dot(j,j);\n                \n         col += vec3(dif)*(sparkle*sin(mod(iTime*10.0, 3.1415))*0.01) ;\n    \n         \n         \n         \n     }\n     \n   \n    // Output to screen\n    fragColor = vec4((col),alpha);\n}\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Created by inigo quilez - iq/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n// Basic utility functions (sdfs, noises, shaping functions)\n// and also the camera setup which is shaded between the\n// background rendering code (\"Buffer A\" tab) and the character\n// rendering code (\"Image\" tab)\n\n\n\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return min(a, b) - h*h*0.25/k;\n}\n\n// https://iquilezles.org/articles/smin\nfloat smax( float a, float b, float k )\n{\n    k *= 1.4;\n    float h = max(k-abs(a-b),0.0);\n    return max(a, b) + h*h*h/(6.0*k*k);\n}\n\n// https://iquilezles.org/articles/smin\nfloat smin3( float a, float b, float k )\n{\n    k *= 1.4;\n    float h = max(k-abs(a-b),0.0);\n    return min(a, b) - h*h*h/(6.0*k*k);\n}\n\nfloat sclamp(in float x, in float a, in float b )\n{\n    float k = 0.1;\n\treturn smax(smin(x,b,k),a,k);\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat opOnion( in float sdf, in float thickness )\n{\n    return abs(sdf)-thickness;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat opRepLim( in float p, in float s, in float lima, in float limb )\n{\n    return p-s*clamp(round(p/s),lima,limb);\n}\n\n\nfloat det( vec2 a, vec2 b ) { return a.x*b.y-b.x*a.y; }\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x-a.y*b.y; }\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdTorus( in vec3 p, in float ra, in float rb )\n{\n    return length( vec2(length(p.xz)-ra,p.y) )-rb;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb)\n{\n    p.x = abs(p.x);\n    float k = (sc.y*p.x>sc.x*p.z) ? dot(p.xz,sc) : length(p.xz);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdSphere( in vec3 p, in float r ) \n{\n    return length(p)-r;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdEllipsoid( in vec3 p, in vec3 r ) \n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox( in vec3 p, in vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min( max(max(d.x,d.y),d.z),0.0) + length(max(d,0.0));\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdArc( in vec2 p, in vec2 scb, in float ra )\n{\n    p.x = abs(p.x);\n    float k = (scb.y*p.x>scb.x*p.y) ? dot(p.xy,scb) : length(p.xy);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k );\n}\n\n#if 1\n// http://research.microsoft.com/en-us/um/people/hoppe/ravg.pdf\n// { dist, t, y (above the plane of the curve, x (away from curve in the plane of the curve))\nvec4 sdBezier( vec3 p, vec3 va, vec3 vb, vec3 vc )\n{\n  vec3 w = normalize( cross( vc-vb, va-vb ) );\n  vec3 u = normalize( vc-vb );\n  vec3 v =          ( cross( w, u ) );\n  //----  \n  vec2 m = vec2( dot(va-vb,u), dot(va-vb,v) );\n  vec2 n = vec2( dot(vc-vb,u), dot(vc-vb,v) );\n  vec3 q = vec3( dot( p-vb,u), dot( p-vb,v), dot(p-vb,w) );\n  //----  \n  float mn = det(m,n);\n  float mq = det(m,q.xy);\n  float nq = det(n,q.xy);\n  //----  \n  vec2  g = (nq+mq+mn)*n + (nq+mq-mn)*m;\n  float f = (nq-mq+mn)*(nq-mq+mn) + 4.0*mq*nq;\n  vec2  z = 0.5*f*vec2(-g.y,g.x)/dot(g,g);\n//float t = clamp(0.5+0.5*(det(z,m+n)+mq+nq)/mn, 0.0 ,1.0 );\n  float t = clamp(0.5+0.5*(det(z-q.xy,m+n))/mn, 0.0 ,1.0 );\n  vec2 cp = m*(1.0-t)*(1.0-t) + n*t*t - q.xy;\n  //----  \n  float d2 = dot(cp,cp);\n  return vec4(sqrt(d2+q.z*q.z), t, q.z, -sign(f)*sqrt(d2) );\n}\n#else\nfloat det( vec3 a, vec3 b, in vec3 v ) { return dot(v,cross(a,b)); }\n\n// my adaptation to 3d of http://research.microsoft.com/en-us/um/people/hoppe/ravg.pdf\n// { dist, t, y (above the plane of the curve, x (away from curve in the plane of the curve))\nvec4 sdBezier( vec3 p, vec3 b0, vec3 b1, vec3 b2 )\n{\n    b0 -= p;\n    b1 -= p;\n    b2 -= p;\n    \n    vec3  d21 = b2-b1;\n    vec3  d10 = b1-b0;\n    vec3  d20 = (b2-b0)*0.5;\n\n    vec3  n = normalize(cross(d10,d21));\n\n    float a = det(b0,b2,n);\n    float b = det(b1,b0,n);\n    float d = det(b2,b1,n);\n    vec3  g = b*d21 + d*d10 + a*d20;\n\tfloat f = a*a*0.25-b*d;\n\n    vec3  z = cross(b0,n) + f*g/dot(g,g);\n    float t = clamp( dot(z,d10-d20)/(a+b+d), 0.0 ,1.0 );\n    vec3 q = mix(mix(b0,b1,t), mix(b1,b2,t),t);\n    \n    float k = dot(q,n);\n    return vec4(length(q),t,-k,-sign(f)*length(q-n*k));\n}\n#endif\n\n// https://iquilezles.org/articles/distfunctions\nvec2 sdSegment(vec3 p, vec3 a, vec3 b)\n{\n    vec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn vec2( length( pa - ba*h ), h );\n}\n\n// https://iquilezles.org/articles/distfunctions\nvec2 sdSegmentOri(vec2 p, vec2 b)\n{\n\tfloat h = clamp( dot(p,b)/dot(b,b), 0.0, 1.0 );\n\treturn vec2( length( p - b*h ), h );\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdFakeRoundCone(vec3 p, float b, float r1, float r2)\n{\n    float h = clamp( p.y/b, 0.0, 1.0 );\n    p.y -= b*h;\n\treturn length(p) - mix(r1,r2,h);\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCone( in vec3 p, in vec2 c )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n\n  vec2 a = q - c*clamp( (q.x*c.x+q.y*c.y)/dot(c,c), 0.0, 1.0 );\n  vec2 b = q - c*vec2( clamp( q.x/c.x, 0.0, 1.0 ), 1.0 );\n  \n  float s = -sign( c.y );\n  vec2 d = min( vec2( dot( a, a ), s*(q.x*c.y-q.y*c.x) ),\n\t\t\t    vec2( dot( b, b ), s*(q.y-c.y)  ));\n  return -sqrt(d.x)*sign(d.y);\n}\n\n\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdRhombus(vec3 p, float la, float lb, float h, float ra)\n{\n    p = abs(p);\n    vec2 b = vec2(la,lb);\n    float f = clamp( (ndot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );\n\tvec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y)-ra, p.y-h);\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\n// https://iquilezles.org/articles/distfunctions\nvec4 opElongate( in vec3 p, in vec3 h )\n{\n    vec3 q = abs(p)-h;\n    return vec4( max(q,0.0), min(max(q.x,max(q.y,q.z)),0.0) );\n}\n//-----------------------------------------------\n\n// ray-infinite-cylinder intersection\nvec2 iCylinderY( in vec3 ro, in vec3 rd, in float rad )\n{\n\tvec3 oc = ro;\n    float a = dot( rd.xz, rd.xz );\n\tfloat b = dot( oc.xz, rd.xz );\n\tfloat c = dot( oc.xz, oc.xz ) - rad*rad;\n\tfloat h = b*b - a*c;\n\tif( h<0.0 ) return vec2(-1.0);\n    h = sqrt(h);\n\treturn vec2(-b-h,-b+h)/a;\n}\n\n// ray-infinite-cone intersection\nvec2 iConeY(in vec3 ro, in vec3 rd, in float k )\n{\n\tfloat a = dot(rd.xz,rd.xz) - k*rd.y*rd.y;\n    float b = dot(ro.xz,rd.xz) - k*ro.y*rd.y;\n    float c = dot(ro.xz,ro.xz) - k*ro.y*ro.y; \n        \n    float h = b*b-a*c;\n    if( h<0.0 ) return vec2(-1.0);\n    h = sqrt(h);\n    return vec2(-b-h,-b+h)/a;\n}\n\n//-----------------------------------------------\n\nfloat linearstep(float a, float b, in float x )\n{\n    return clamp( (x-a)/(b-a), 0.0, 1.0 );\n}\n\nvec2 rot( in vec2 p, in float an )\n{\n    float cc = cos(an);\n    float ss = sin(an);\n    return mat2(cc,-ss,ss,cc)*p;\n}\n\nfloat expSustainedImpulse( float t, float f, float k )\n{\n    return smoothstep(0.0,f,t)*1.1 - 0.1*exp2(-k*max(t-f,0.0));\n}","name":"Common","description":"","type":"common"}]}