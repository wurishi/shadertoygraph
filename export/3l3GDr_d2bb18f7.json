{"ver":"0.1","info":{"id":"3l3GDr","date":"1576187733","viewed":207,"name":"Chasing Aliens","username":"NivBehar","description":"Chasing Aliens","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["aliens"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//    Inspired by The Art Of Code (BigWings) torus tutorial:\n//    https://www.youtube.com/watch?v=rA9NmBRqfjI&t=316s\n//    I used a lot of his tutorials for this one, a really great channel!!\n\n# define time iTime\n# define soundWave texture(iChannel0, vec2(0.10, 0.2)).x\n# define beat smoothstep(0.,10., soundWave)*30.\n\nvec2 mainSound( in int samp,float time)\n{\n    time=mod(time-5.,12.);\n\treturn vec2( fract(sin(6.2831*440.0*time)*100.)*exp(-1.0*time))*min(1.,time);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 ret1 = texture(iChannel0, uv, 0.0).xyz;\n    vec3 ret2 = ret1;\n    vec2 uv1 = uv*1. + time*0.; //0.3;\n    vec2 dz = vec2(0.05, 0.37);\n    \n    uv1 = .25*cos(uv1 + 4.96 + time*0.5) -2.*dz;;\n    vec3 dots = vec3(0.1 + clamp(0., 1., .03/length(uv1) ) );    \n\n    ret1 = (-ret1/5.) + 6.*dots*(-0.08+ret1);\n    vec3 ret = ret1*5.;\n\n    vec2 texc = 0.4 + 0.6*ret.xy;\n    vec3 col;\n    col.x = 2.7 + 1.5*sin(time);\n    col.y = 1.5 + 0.3*sin(time);\n    col.z = 2.2 + 1.6*cos(time*0.789);\n    col = vec3(2.2,1.2,1.3 + 0.3*sin(time));\n    vec4 aa = texture(iChannel2, texc);\n    aa.x *= col.x;\n    aa.y *= col.y;\n    aa.z *= col.z;\n    aa.xyz -= 0.45;\n    ret *= aa.xyz;\n    \n    //ret*=2.;\n\n    //ret = texture(iChannel0, uv, 0.0).xyz; // original Buffer A look\n    \n    fragColor = vec4(ret,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"# define MaxSteps 1000 // max steps for ray marching\n# define time iTime\n\nfloat GetSpaceship1xzSpeed()  {return 2.*time;}\nfloat GetSpaceship2xzSpeed()  {return 1.*time;}\nvec3  GetTorusPos()           {return vec3(0.,0.,0.);}\nvec2  GetTorusSize()          {return vec2(2.2, 1.6);}\nfloat GetTorusRotSpeed()      {return 0.4*time + sin(time*0.8) + cos(time*0.8) + 2.*cos(5.*sin(0.1*time*0.8));}\n\nvec3  GetBottom1Pos()         {return vec3(cos(GetSpaceship1xzSpeed())*1.8,0.5*cos(time*0.7),sin(GetSpaceship1xzSpeed())*1.8);;}\nfloat GetBottom1Rad()         {return 0.3;}\nvec3  GetSphere1Pos()         {return GetBottom1Pos() + vec3(0.,-0.02,0.);}\nfloat GetSphere1Rad()         {return 0.17;}\nvec3  GetHeadBot1Pos()        {return GetSphere1Pos() + vec3(0., -GetSphere1Rad()*0.7, 0.);}\nvec3  GetHeadBot1Size()       {return vec3(0.2, GetSphere1Rad()*0.8, 0.2);}\nfloat GetSpaceship1SmallRot() {return 0.3*sin(time);}\n\nvec3  GetBottom2Pos()         {return vec3(cos(GetSpaceship2xzSpeed()+3.)*2.2,0.5*cos(time*0.7+3.),sin(GetSpaceship2xzSpeed() + 3.)*2.2);}\nfloat GetBottom2Rad()         {return 0.3;}\nvec3  GetSphere2Pos()         {return GetBottom2Pos() + vec3(0.,-0.02,0.);}\nfloat GetSphere2Rad()         {return 0.15;}\nvec3  GetHeadBot2Pos()        {return GetSphere2Pos() + vec3(0., -GetSphere2Rad()*0.7, 0.);}\nvec3  GetHeadBot2Size()       {return vec3(0.2, GetSphere2Rad()*0.8, 0.2);}\nfloat GetSpaceship2SmallRot() {return 0.3*cos(time*1.5);}\n\n\nfloat GetCameraxzSpeed()      {return time*1.5;}\nvec3  GetCamLookAt()          {return vec3(sin(time)*0.3, cos(time)*0.3, 0. );}\nvec3  GetCamPos()             {return vec3(0., 0., -1.3);}\n    \nfloat outin = -1.; //camera outside of the torus = 1., inside of the torus = -1.\nfloat dBox(vec3 p, vec3 s) \n{\n    \treturn length(max(abs(p)-s, 0.));\n}\nfloat sdTorus(vec3 p, vec2 r) {\n    float x = length(p.xz)-r.x;\n    return outin*(length(vec2(x, p.y))-r.y);\n}\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\nvec3 RotX (vec3 p, float speed)\n{   \n    float ss = sin(speed), cc = cos(speed);\n    return vec3(p.x, p.y*cc + p.z*-ss,  p.y*ss + p.z*cc);\n}\nvec3 RotY (vec3 p, float speed)\n{   \n    float ss = sin(speed), cc = cos(speed);\n    return vec3(p.x*cc + p.z*ss, p.y, p.x*-ss + p.z*cc);\n}\nvec3 RotZ (vec3 p, float speed)\n{   \n    float ss = sin(speed), cc = cos(speed);\n    return vec3(p.x*cc  + p.y*-ss, p.x*ss + p.y*cc, p.z);\n}\nvec3 GetSpaceshipNewPos(vec3 SsPos, vec3 RotAround, float RotSpeed, vec3 CurrPos)\n{     \n    vec3 SsNewPos = RotAround + CurrPos;\n    SsNewPos = RotZ(CurrPos, -GetTorusRotSpeed() + 3.14159);\n    SsNewPos = RotZ(CurrPos, RotSpeed);\n    SsNewPos = RotX(CurrPos, RotSpeed);\n    SsNewPos = RotY(CurrPos, RotSpeed); \n    return SsNewPos; }\n\nvec2 GetDist(vec3 p)\n{\n    vec3 pnew = p;\n    pnew = RotZ(pnew, GetTorusRotSpeed());\n    float td = sdTorus(pnew + GetTorusPos() + vec3(2.,0.,0.), GetTorusSize());\n    vec3 spaceshiprotatearound = pnew + GetTorusPos() + vec3(GetTorusSize().x/2.,0.,0.) + vec3(1.,0.,0.);\n\n    vec3 spaceshippos = spaceshiprotatearound + GetBottom1Pos();          //spaceship 1\n    spaceshippos = RotZ(spaceshippos, -GetTorusRotSpeed() + 3.14159);\n    spaceshippos = RotZ(spaceshippos, GetSpaceship1SmallRot());\n    spaceshippos = RotX(spaceshippos, GetSpaceship1SmallRot());\n    spaceshippos = RotY(spaceshippos, GetSpaceship1SmallRot()); \n    float bottomd = sdSphere(spaceshippos, GetBottom1Rad());    \n    \n    vec3 sphereposnew = spaceshippos + vec3(0,0.04,0);\n    vec3 headbotposnew = sphereposnew + vec3(0,GetSphere1Rad()*0.3, 0);\n    float sd = sdSphere(sphereposnew, GetSphere1Rad());              \n    float headbotd = dBox(headbotposnew, GetHeadBot1Size());\n    float headd = max(headbotd, sd);\n    vec3 bottomscale = vec3(1,5,1);\n    vec3 bottomsquash = (spaceshippos)*bottomscale;\n    float maxscale = max(bottomscale.x,bottomscale.y);\n    maxscale = max(maxscale,bottomscale.z);\n    bottomd = sdSphere(bottomsquash, GetBottom1Rad());\n    float spaceship = min(headd,bottomd/maxscale);                    // end of spaceship 1\n\n    vec3 spaceship2pos = spaceshiprotatearound + GetBottom2Pos();        //spaceship 2\n    spaceship2pos = RotZ(spaceship2pos, -GetTorusRotSpeed() + 3.14159);\n    spaceship2pos = RotZ(spaceship2pos, GetSpaceship2SmallRot());\n    spaceship2pos = RotX(spaceship2pos, GetSpaceship2SmallRot());\n    spaceship2pos = RotY(spaceship2pos, GetSpaceship2SmallRot());\n    float bottom2d = sdSphere(spaceship2pos, GetBottom2Rad());    \n    \n    vec3 sphere2posnew = spaceship2pos + vec3(0,0.04,0);\n    vec3 headbot2posnew = sphere2posnew + vec3(0,GetSphere2Rad()*0.3, 0);\n    float sd21 = sdSphere(sphere2posnew, GetSphere2Rad());              \n    float headbot2d = dBox(headbot2posnew, GetHeadBot2Size());\n    float head2d = max(headbot2d, sd21);\n    vec3 bottom2scale = vec3(1,5,1);\n    vec3 bottom2squash = (spaceship2pos)*bottom2scale;\n    float maxscale2 = max(bottom2scale.x,bottom2scale.y);\n    maxscale2 = max(maxscale2,bottom2scale.z);\n    bottom2d = sdSphere(bottom2squash, GetBottom2Rad());\n    float spaceship2 = min(head2d,bottom2d/maxscale2);                // end of spaceship 2\n\n    vec2 toreturn;\n\n    float shape = min(min(spaceship, spaceship2),td);\n    //shape = min(spaceship, spaceship2); // see only the spaceships\n    //shape = min(spaceship2,td);\n    if( shape == spaceship) { toreturn = vec2(spaceship,2); }\n    else if ( shape == spaceship2) { toreturn = vec2(spaceship2,3); }\n    else if ( shape == td) { toreturn = vec2(td,1); }\n   \n    return toreturn;\n}\n\nvec3 RayMarch(vec3 ro, vec3 rd) \n{\n    vec2 dS;\n    float dO;\n    vec3 p;  \n    for(int i = 0; i<MaxSteps; i++)\n    {\n        p = ro + rd * dO;\n        dS = GetDist(p);\n        if(dS.x < 0.0001) {break;}\n        dO += dS.x;\n    }     \n    return vec3(dO,dS);\n}\n\nfloat dist(vec2 a, vec2 b) { return sqrt(pow(a.x-b.x,2.) + pow(a.y-b.y,2.));}\n\nvec3 toruscol(vec3 p, vec3 tpos, float rotspeed,vec2 uv)\n{\n    vec3 col = vec3(0.);\n    float x = atan(p.x + tpos.x, p.z + tpos.z) - rotspeed;\n    float y = atan(length(p.xz + tpos.xz)-1., p.y + tpos.y);\n    \n    vec3 tex = texture(iChannel0, vec2(x,y), 0.0).xyz;\n    float bands = sin(y*20. + x*15.) * tex.z;\n    float ripples = sin((x*50.-y*50.)*2.)*0.5 + 0.5;\n    //ripples *= tex.z;\n    float waves = sin(x*1. - y*6. + 3.*time);\n    float b1 = smoothstep(-.5, .5, bands);\n    float b2 = smoothstep(-.5, .5, bands-.5);\n    float m = b1*(1.-b2);\n    m = max(m, ripples*b2*max(0.,waves*10.));\n    col = vec3(m) * 1.2;// * tex;\n    col *= vec3(m*1.1, 0.7, 1.6);\n    \n    return col*1.1;\n}\n\nvec3 spaceshipcol(vec3 p, vec3 tpos, float rotspeed)\n{\n    vec3 col = vec3(0.);\n    float x = atan(p.x + tpos.x ,p.z + tpos.z) - time*.7  - 0.*rotspeed;\n    float y = atan(length(p.xz + tpos.xz)-(1. + 0.*0.5*sin(time)), p.y + tpos.y);\n    vec3 tex = texture(iChannel0, vec2(x,y), 0.0).xyz;\n    float bands = sin(y*50. + x*20.);\n    float waves = sin(x*20. - y*32. + time*20.)*tex.x*2.;\n    float b1 = smoothstep(-0.2, 0.2, bands);\n    float m3 = b1*waves;\n    col = 1.*vec3(m3, m3, m3*m3);\n    col += 0.5*waves*vec3(.6,0.,m3); //0.5*q2*waves*vec3(1.,0.,0.);\n    return col;\n}\n\nvec3 GetNormal(vec3 p)\n{\n    float d = GetDist(p).x;\n    vec2 e = vec2(.01, 0.);\n    vec3 n = d-vec3(GetDist(p-e.xyy).x, \n                        GetDist(p-e.yxy).x, \n                        GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nfloat GetLight(vec3 p, vec3 lightpos)\n{\n    float lightpower = .3;\n    float shadowstrength = 0.5;\n    vec3 l = normalize(lightpos - p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l*lightpower), 0., 1.);\n    //dif *= dot(n,l);\n    float d = (RayMarch(p + n*0.2, l)).x;\n    if(d < length(lightpos-p)) {dif *= shadowstrength;}\n    return dif;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 LightPos = GetCamPos();\n\n    vec3 ret;\n    \n    float rotspeed = 0.;\n    \n    vec3 col = vec3(0.,0.,0.);\n \n    vec3 lookat = GetCamLookAt();\n\n    float zoom = 0.8;\n    vec3 ro = GetCamPos();\n\n    vec3 F = normalize(lookat-ro); // Forward\n    vec3 R = normalize(cross(vec3(0., 1., 0.), F)); //Right\n    vec3 U = cross(F, R); //Up\n\n    vec3 C = ro + F*zoom;\n    vec3 I = C + uv.x*R + uv.y*U;\n    vec3 rd = normalize(I-ro);\n\n    vec3 d = RayMarch(ro,rd);\n    vec3 p = ro + rd*d.x;\n    \n    float dif = GetLight(p, LightPos); //***\n  \n    vec3 pnew = p;\n    pnew = RotZ(pnew, GetTorusRotSpeed());     \n    vec3 spaceshiprotatearound = pnew + GetTorusPos() + vec3(1.,0.,0.) + vec3(GetTorusSize().x/2.,0.,0.) ;\n    if(d.z == 1.)\n    {        \n        ret = toruscol(pnew, GetTorusPos() + vec3(2.,0.,0.), GetCameraxzSpeed(), uv);\n        ret *= dif; //***\n    }\n    else if(d.z == 2.)\n    {\n        vec3 spaceshipposnew = spaceshiprotatearound + GetBottom1Pos();\n        spaceshipposnew = RotZ(spaceshipposnew, -GetTorusRotSpeed() + 3.14159);\n        spaceshipposnew = RotZ(spaceshipposnew, GetSpaceship1SmallRot());\n        spaceshipposnew = RotX(spaceshipposnew, GetSpaceship1SmallRot());\n        spaceshipposnew = RotY(spaceshipposnew, GetSpaceship1SmallRot());     \n        ret = spaceshipcol(vec3(0.,0.,0.), spaceshipposnew, GetSpaceship1xzSpeed());  \n        ret *= dif*5.; //***\n\n    }\n    else if(d.z == 3.)\n    {\n        vec3 spaceship2posnew = spaceshiprotatearound + GetBottom2Pos();\n        spaceship2posnew = RotZ(spaceship2posnew, -GetTorusRotSpeed() + 3.14159);\n        spaceship2posnew = RotZ(spaceship2posnew, GetSpaceship2SmallRot());\n        spaceship2posnew = RotX(spaceship2posnew, GetSpaceship2SmallRot());\n        spaceship2posnew = RotY(spaceship2posnew, GetSpaceship2SmallRot());\n        ret = spaceshipcol(vec3(0.,0.,0.), spaceship2posnew, GetSpaceship2xzSpeed());  \n        ret *= dif*5.; //***\n    }\n\n    fragColor = vec4(ret,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}