{"ver":"0.1","info":{"id":"fdVcDW","date":"1654894740","viewed":73,"name":"Squares 2300.10.6.22","username":"Bzzrt","description":"Overlapping squares - forced","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["squares","bzzrt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//background color function currently not used\nvec3 getbackgroundColor(vec2 uv) {\n    uv += 0.5; //remap uv from <-0.5, 0.5> to <0, 1>\n    vec3 gradientStartColor = vec3(1., 0., 1.);\n    vec3 gradientEndColor = vec3(0., 1., 1.);\n    return mix(gradientStartColor, gradientEndColor, uv.y); //the gradient bottom to top\n}\n//\n\n// square function\nfloat sdfSquare(vec2 uv, float size, vec2 offset) {\n  float x = uv.x - offset.x;\n  float y = uv.y - offset.y;\n\n  return max(abs(x), abs(y)) - size;\n}\n\n//drawScene function\nvec3 drawScene(vec2 uv) {\n  vec3 col = vec3(1); // using white background for now\n  float square1 = sdfSquare(uv, 0.9, vec2(0, 0)); //defining red square1  \n  float square1_0 = sdfSquare(uv, 0.85, vec2(0, 0)); //defining square1\n  float square1_1 = sdfSquare(uv, 0.845, vec2(0, 0)); //defining square1_1\n  float square1_2 = sdfSquare(uv, 0.815, vec2(0, 0)); //defining square1_2\n  float square1_3 = sdfSquare(uv, 0.810, vec2(0, 0)); //defining square1_3\n  float square1_4 = sdfSquare(uv, 0.805, vec2(0, 0)); //defining square1_4\n  float square2 = sdfSquare(uv, 0.8, vec2(0, 0)); //defining green square2\n  float square2_1 = sdfSquare(uv, 0.65, vec2(0, 0)); //defining square2_1\n  float square2_2 = sdfSquare(uv, 0.6, vec2(0, 0)); //defining square2_2\n  float square2_3 = sdfSquare(uv, 0.59, vec2(0, 0)); //defining square2_3\n  float square2_4 = sdfSquare(uv, 0.585, vec2(0, 0)); //defining square2_4\n  float square3 = sdfSquare(uv, 0.58, vec2(0, 0)); //defining blue square3\n  float square3_1 = sdfSquare(uv, 0.56, vec2(0, 0));\n  float square3_2 = sdfSquare(uv, 0.555, vec2(0, 0));\n  float square3_3 = sdfSquare(uv, 0.552, vec2(0, 0));\n  float square4 = sdfSquare(uv, 0.55, vec2(0, 0)); //defining black square4\n  float square4_1 = sdfSquare(uv, 0.473, vec2(0, 0));\n  float square5 = sdfSquare(uv, 0.47, vec2(0, 0)); //defining yellow square5\n  float square5_1 = sdfSquare(uv, 0.44, vec2(0, 0));\n  float square5_2 = sdfSquare(uv, 0.43, vec2(0, 0));\n  float square5_3 = sdfSquare(uv, 0.415, vec2(0, 0));\n  float square5_4 = sdfSquare(uv, 0.412, vec2(0, 0));\n  float square6 = sdfSquare(uv, 0.41, vec2(0, 0)); //defining magenta square6\n  float square6_1 = sdfSquare(uv, 0.259, vec2(0, 0));\n  float square6_2 = sdfSquare(uv, 0.255, vec2(0, 0));\n  float square6_3 = sdfSquare(uv, 0.252, vec2(0, 0));\n  float square7 = sdfSquare(uv, 0.25, vec2(0, 0)); //defining aquablue square7\n  float square7_1 = sdfSquare(uv, 0.06, vec2(0, 0));\n  float square7_2 = sdfSquare(uv, 0.055, vec2(0, 0));\n  float square7_3 = sdfSquare(uv, 0.053, vec2(0, 0));\n  float square8 = sdfSquare(uv, 0.05, vec2(0, 0)); //defining white square8\n  \n  col = mix(vec3(1, 0, 0), col, step(0., square1));//red\n  col = mix(vec3(1, 0.6, 0.9), col, step(0., square1_0));\n  col = mix(vec3(0.5, 0.1, 0.2), col, step(0., square1_1));\n  col = mix(vec3(0.4, 0.4, 0.8), col, step(0., square1_2));\n  col = mix(vec3(0.9, 0.9, 0.5), col, step(0., square1_3));\n  col = mix(vec3(0.9, 0.1, 1.0), col, step(0., square1_4));\n  col = mix(vec3(0, 1, 0), col, step(0., square2)); //green\n  col = mix(vec3(0.8, 0.8, 0.8), col, step(0., square2_1));\n  col = mix(vec3(0.7, 0.7, 0.1), col, step(0., square2_2));\n  col = mix(vec3(0.6, 0.2, 0.6), col, step(0., square2_3));\n  col = mix(vec3(0.6, 0.9, 0.8), col, step(0., square2_4));\n  col = mix(vec3(0, 0, 1), col, step(0., square3)); //blue\n  col = mix(vec3(0, 0.5, 0.3), col, step(0., square3_1));\n  col = mix(vec3(0.9, 0.3, 0.5), col, step(0., square3_2));\n  col = mix(vec3(0.5, 0.2, 0.2), col, step(0., square3_3));\n  col = mix(vec3(0, 0, 0), col, step(0., square4)); //black\n  col = mix(vec3(0.7, 0.8, 0), col, step(0., square4_1));\n  col = mix(vec3(1, 1, 0), col, step(0., square5)); //yellow\n  col = mix(vec3(0.8, 0.8, 0.6), col, step(0., square5_1));\n  col = mix(vec3(1, 0.5, 0), col, step(0., square5_2));\n  col = mix(vec3(0.6, 0.3, 0.1), col, step(0., square5_3));\n  col = mix(vec3(0.6, 0.8, 0.8), col, step(0., square5_4));\n  col = mix(vec3(1, 0, 1), col, step(0., square6)); //magenta\n  col = mix(vec3(1, 0.8, 0.1), col, step(0., square6_1));\n  col = mix(vec3(0, 1, 0), col, step(0., square6_2));\n  col = mix(vec3(0.7, 0.7, 0), col, step(0., square6_3));\n  col = mix(vec3(0, 1, 1), col, step(0., square7)); //aquablue\n  col = mix(vec3(0, 0.4, 0), col, step(0., square7_1));\n  col = mix(vec3(0.9, 0.9, 1), col, step(0., square7_2));\n  col = mix(vec3(0.5, 0.4, 1), col, step(0., square7_3));\n  col = mix(vec3(0.5, 0.5, 0.5), col, step(0., square8)); //white\n  \n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy; //uv <0, 1>\n    uv -= 0.5; // uv <-0.5, 0.5>\n    uv.x *= iResolution.x/iResolution.y; //fix aspect ratio\n    \n\n    // Call drawScene function\n    vec3 col = drawScene(uv);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}