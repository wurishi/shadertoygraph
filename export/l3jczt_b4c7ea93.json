{"ver":"0.1","info":{"id":"l3jczt","date":"1727709644","viewed":103,"name":"bounding sphere binary tree","username":"jt","description":"Experimenting with ray-marching in a tree structure of nested bounding spheres.\nClick to visualize leaf bounding spheres (also visualized at the start for preview image).\n","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["volume","raymarch","sphere","tree","bvh","intersect","bounding","hierarchy"],"hasliked":0,"parentid":"XXByzt","parentname":"bounding sphere pair"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/l3jczt bounding sphere binary tree, 2024 by jt\n// based on https://www.shadertoy.com/view/XXByzt bounding sphere pair\n\n// Experimenting with ray-marching in a tree structure of nested bounding spheres.\n// Click to visualize leaf bounding spheres (also visualized at the start for preview image).\n\n// tags: bounding, volume, sphere, raymarch, intersect, tree, bvh, hierarchy\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// comment-out to see entire nested spheres structure\n#define SHOW_ONLY_LEAF_SPHERES\n\n// Heap navigation:\n//     up = (index-1)>>1\n//     left = (index<<1)+1\n//     right = (index<<1)+2\n\n//#define BOUNDING_SPHERE_LEVELS 2u\n#define BOUNDING_SPHERE_LEVELS 3u\n#define BOUNDING_SPHERE_NODE_COUNT ((1u << BOUNDING_SPHERE_LEVELS) - 1u)\n#define BOUNDING_SPHERE_LEAF_BASE ((1u << (BOUNDING_SPHERE_LEVELS - 1u)) - 1u)\n#define BOUNDING_SPHERE_LEAF_COUNT (1u << (BOUNDING_SPHERE_LEVELS - 1u))\n\nvec4 bounding_spheres[BOUNDING_SPHERE_NODE_COUNT]; // ugly global variable in case array arguments are copied instead of being passed by reference.\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 500u\n\n#define pi 3.1415926\n#define tau (pi+pi)\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nvec4 enclosing_sphere(vec4 s0, vec4 s1) // https://www.shadertoy.com/view/lX2yzc enclosing sphere pair (jt)\n{\n    float d = length(s1.xyz - s0.xyz);\n\n    if(d < s0.w - s1.w) return s0; // special case: second circle contained in first\n    if(d < s1.w - s0.w) return s1; // special case: first circle contained in second\n\n    float t = (s0.w + d + s1.w) / 2.0;\n\n    return vec4(mix(s0.xyz, s1.xyz, (t - s0.w) / d), t);\n}\n\nvec2 bounding_sphere_intersect(vec3 ro, vec3 rd, vec4 s) // modified https://iquilezles.org/articles/intersectors/\n{\n    vec3 oc = ro - s.xyz;\n    float b = dot(oc, rd);\n    float c = dot(oc, oc) - s.w*s.w;\n    float h = b*b - c;\n    if(h < 0.0) return vec2(DIST_MAX); // no intersection\n    h = sqrt(h);\n    return vec2(-h, +h) - b;\n}\n\nbool bounding_sphere_inside(vec3 p, vec4 s)\n{\n    return length(p-s.xyz) <= s.w+EPSILON;\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat box(vec3 p, vec3 b) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat cylinder(vec3 p, float r, float h) // based on https://iquilezles.org/articles/distfunctions/\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - vec2(r,h);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat longitudes(uint n, vec3 p) // https://www.shadertoy.com/view/DlVBzy latitudes and longitudes (jt)\n{\n    p.xy = p.yx; // hack to align with interior\n    float slice = 2.0*pi/float(n);\n\n    float mu = atan(p.x,p.y);\n    float mu0 = floor(mu/slice)*slice;\n    float mu1 =  ceil(mu/slice)*slice;\n    mat3 m0 = mat3(sin(mu0),cos(mu0),0,cos(mu0),-sin(mu0),0,0,0,1);\n    mat3 m1 = mat3(sin(mu1),cos(mu1),0,cos(mu1),-sin(mu1),0,0,0,1);\n\n    vec3 q0 = m0 * p;\n    vec3 q1 = m1 * p;\n\n    return min(length(vec2(length(q0.xz)-1.0, q0.y)),length(vec2(length(q1.xz)-1.0, q1.y)));\n}\n\nfloat latitudes(uint n, vec2 p) // https://www.shadertoy.com/view/DlVBzy latitudes and longitudes (jt)\n{\n    n = n*2u-1u;\n\n    float slice = 2.0*pi/float(n);\n\n    float mu = atan(p.x,p.y);\n    float mu0 = floor(mu/slice)*slice-slice/2.0;\n    float mu1 =  ceil(mu/slice)*slice-slice/2.0;\n    vec2 c0 = vec2(sin(mu0),cos(mu0));\n    vec2 c1 = vec2(sin(mu1),cos(mu1));\n\n    return min(length(p-c0),length(p-c1));\n}\n\nfloat latitudes(uint n, vec3 p)\n{\n    return latitudes(n, vec2(length(p.xy),p.z));\n}\n\nfloat grid_sphere(vec3 p, float r) // https://www.shadertoy.com/view/DlVBzy latitudes and longitudes\n{\n    return min(longitudes(12u,p/r)*r,latitudes(12u,p/r)*r);\n}\n\nfloat grid_sphere(vec3 p, vec4 s)\n{\n    return grid_sphere(p - s.xyz, s.w);\n}\n\nvec4 combine(vec4 a, vec4 b)\n{\n    return a.w < b.w ? a : b;\n}\n\nvec4 intersect(vec4 a, vec4 b)\n{\n    return a.w > b.w ? a : b;\n}\n\nvec4 offset(vec4 c, float d)\n{\n    return vec4(c.xyz,c.w-d);\n}\n\nvec4 anim()\n{\n    return vec4(sin(tau*iTime/10.0));\n}\n\n// 0\n\n// 1, 2\n/*\nvec4 map1(vec3 p)\n{\n    vec4 combined = vec4(vec3(0), DIST_MAX);\n    combined = combine(combined, vec4(vec3(0,0,1),box(p-vec3(-1,0,0),vec3(0.5))));\n    //combined = combine(combined, vec4(vec3(1,1,0),grid_sphere(p,1.5) - 0.01));\n    combined = combine(combined, vec4(vec3(1,1,0),sphere(p,0.5)));\n    return combined;\n}\n\nvec4 map2(vec3 p)\n{\n    vec4 combined = vec4(vec3(0), DIST_MAX);\n    combined = combine(combined, vec4(vec3(0,1,0),box(p-vec3(+1,0,0),vec3(0.5))));\n    combined = combine(combined, vec4(vec3(1,0,1),grid_sphere(p,0.5) - 0.01));\n    return combined;\n}\n*/\nvec4 map3(vec3 p)\n{\n    vec4 combined = vec4(vec3(0), DIST_MAX);\n    combined = combine(combined, vec4(vec3(0,0,1),box(p-vec3(-1.0+anim().x,0,0),vec3(0.5))));\n    combined = combine(combined, vec4(vec3(1,1,0),sphere(p-vec3(anim().x,0,0),0.5)));\n    return combined;\n}\n\nvec4 map4(vec3 p)\n{\n    vec4 combined = vec4(vec3(0), DIST_MAX);\n    combined = combine(combined, vec4(vec3(1,0,0),cylinder(p-vec3(0,-1.0+anim().y,0), 0.25, 0.25)));\n    return combined;\n}\n\nvec4 map5(vec3 p)\n{\n    vec4 combined = vec4(vec3(0), DIST_MAX);\n    combined = combine(combined, vec4(vec3(0,1,0),box(p-vec3(+1,0,+anim().z),vec3(0.5))));\n    combined = combine(combined, vec4(vec3(1,0,1),grid_sphere(p-vec3(0,0,+anim().z),0.5) - 0.01));\n    return combined;\n}\n\nvec4 map6(vec3 p)\n{\n    vec4 combined = vec4(vec3(0), DIST_MAX);\n    combined = combine(combined, vec4(vec3(1,1,1),cylinder((p-vec3(0,0,1)-anim().w).xzy, 0.25, 0.25)));\n    return combined;\n}\n\nvec4 map_switch_internal(vec3 p, uint index)\n{\n    switch(index)\n    {\n    // level 0\n    //case 0u:\n\n    // level 1\n/*\n    case 1u: return map1(p);\n    case 2u: return map2(p);\n*/\n    // level 2\n    case 3u: return map3(p);\n    case 4u: return map4(p);\n    case 5u: return map5(p);\n    case 6u: return map6(p);\n    }\n\n    return vec4(vec3(0), DIST_MAX);\n}\n\nvec4 map_specific(vec3 p, uint index)\n{\n    vec4 combined = vec4(vec3(0), DIST_MAX);\n\n    // debug\n    if(iMouse.z > 0.0 || iTime < 15.0) // enable at beginning for preview image, later on mouse-click\n#ifdef SHOW_ONLY_LEAF_SPHERES\n        if(index >= BOUNDING_SPHERE_LEAF_BASE) // show only leaf spheres\n#endif\n            if(bounding_spheres[index].w > 0.0)\n                combined = combine(combined, vec4(vec3(1,1,1),grid_sphere(p,bounding_spheres[index]-vec4(0,0,0,0.02)) - 0.01)); // NOTE: shrink sphere slightly to make sure it is inside bounding sphere\n\n    return combine(combined, map_switch_internal(p, index));\n}\n\nvec4 map_generic(vec3 p)\n{\n    vec4 combined = vec4(vec3(0), DIST_MAX);\n\n    uint index_stack[BOUNDING_SPHERE_NODE_COUNT]; // reserve size for worst case: entire tree\n    uint stack_pointer = 0u;\n    index_stack[stack_pointer++] = 0u; // start at root\n\n    while(stack_pointer > 0u)\n    {\n        stack_pointer--;\n        uint index = index_stack[stack_pointer];\n\n        if(bounding_sphere_inside(p, bounding_spheres[index]))\n        {\n            combined = combine(combined, map_specific(p, index));\n\n            if(index < BOUNDING_SPHERE_LEAF_BASE) // node is not a leaf\n            {\n                index_stack[stack_pointer++] = (index<<1u)+1u;\n                index_stack[stack_pointer++] = (index<<1u)+2u;\n            }\n        }\n    }\n\n    return combined;\n}\n\n// based on https://iquilezles.org/articles/normalsSDF tetrahedron normals\n/*\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h).w\n            +\n            k.yyx * map(p + k.yyx*h).w\n            +\n            k.yxy * map(p + k.yxy*h).w\n            +\n            k.xxx * map(p + k.xxx*h).w\n        );\n}\n*/\n\n// adapted https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    vec3 ks[4] = vec3[4](k.xyy, k.yyx, k.yxy, k.xxx);\n    vec3 s = vec3(0);\n    for(int i = 0; i < 4; i++)\n    {\n        float d = DIST_MAX;\n\n        uint index_stack[BOUNDING_SPHERE_NODE_COUNT]; // reserve size for worst case: entire tree\n        uint stack_pointer = 0u;\n        index_stack[stack_pointer++] = 0u; // start at root\n\n        while(stack_pointer > 0u)\n        {\n            stack_pointer--;\n            uint index = index_stack[stack_pointer];\n\n            // NOTE: Determine inside which sphere(s) by position WITHOUT epsilon offsets...\n            if(bounding_sphere_inside(p, bounding_spheres[index]))\n            {\n                // NOTE: ...but sample WITH epsilon offsets, so all samples of one normal are from the same maps\n                d = min(d, map_specific(p + ks[i]*h, index).w);\n\n                if(index < BOUNDING_SPHERE_LEAF_BASE) // node is not a leaf\n                {\n                    index_stack[stack_pointer++] = (index<<1u)+1u;\n                    index_stack[stack_pointer++] = (index<<1u)+2u;\n                }\n            }\n        }\n\n        s += ks[i] * d;\n    }\n\n    return normalize(s);\n}\n\nvec4 trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    // NOTE: Limited number of iterations to avoid stalling\n    //       when ray passes closely (just above EPSILON)\n    //       in parallel to a surface.\n    uint i = 0u;\n\n    vec4 nearest = vec4(vec3(0), DIST_MAX);\n\n    uint index_stack[BOUNDING_SPHERE_NODE_COUNT]; // reserve size for worst case: entire tree\n    uint stack_pointer = 0u;\n    index_stack[stack_pointer++] = 0u; // start at root\n\n    // NOTE: currently UNSORTED traversal TODO: sort\n    while(stack_pointer > 0u)\n    {\n        stack_pointer--;\n        uint index = index_stack[stack_pointer];\n\n        vec2 current_bounds = bounding_sphere_intersect(ro, rd, bounding_spheres[index]);\n        //if(current_bounds.x < DIST_MAX)\n        if(current_bounds.x < nearest.w) // ignore everything further away than current result\n        {\n            if(index < BOUNDING_SPHERE_LEAF_BASE) // node is not a leaf\n            {\n                index_stack[stack_pointer++] = (index<<1u)+1u;\n                index_stack[stack_pointer++] = (index<<1u)+2u;\n            }\n#ifdef SHOW_ONLY_LEAF_SPHERES\n            else // leaf -> ray-march NOTE: remove this line to render interior nodes, too\n#endif\n            {\n                vec4 h = vec4(0);\n                float t;\n\n                current_bounds = clamp(current_bounds,t0,t1);\n                for(t = current_bounds.x; t < current_bounds.y && i < ITER_MAX; i++)\n                //for(t = current_bounds.x+EPSILON; t < current_bounds.y && i < ITER_MAX; i++)\n                {\n                    h = map_specific(ro + rd * t, index);\n                    if(h.w < EPSILON)\n                    {\n                        if(t < nearest.w) nearest = vec4(h.xyz,t);\n                        break;\n                    }\n                    t += h.w;\n                }\n            }\n        }\n    }\n\n    return nearest;\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).w < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map_generic(ro + rd*t).w;\n        if(h < EPSILON)\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// based on https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO(vec3 pos, vec3 nor, uint index)\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map_generic(pos + h*nor).w;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if(occ > 0.35) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (I + I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-4.0);\n    vec3 rd = normalize(vec3(I.xy, 2.5)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n\n    //vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 lightdir = normalize(vec3(2.0,1.0, 3.0));\n    /*\n    bounding_spheres[BOUNDING_SPHERE_LEAF_BASE + 0u] = vec4(-1,0,0,1.5);\n    bounding_spheres[BOUNDING_SPHERE_LEAF_BASE + 1u] = vec4(+1,0,0,1);\n    */\n    bounding_spheres[BOUNDING_SPHERE_LEAF_BASE + 0u] = vec4(-1.0+anim().x,0,0,1.5);\n    bounding_spheres[BOUNDING_SPHERE_LEAF_BASE + 1u] = vec4(0,-1.0+anim().y,0,0.5);\n    bounding_spheres[BOUNDING_SPHERE_LEAF_BASE + 2u] = vec4(+1,0,+anim().z,1);\n    bounding_spheres[BOUNDING_SPHERE_LEAF_BASE + 3u] = vec4(vec3(0,0,1)+anim().w,0.5);\n\n    // construct enclosing spheres\n    //for(uint level = BOUNDING_SPHERE_LEVELS - 1u; level > 0u; level--)\n    for(uint j = 1u; j < BOUNDING_SPHERE_LEVELS; j++)\n    {\n        uint level = BOUNDING_SPHERE_LEVELS - j;\n        uint node_count = (1u << (level - 1u));\n        uint node_base = (1u << (level - 1u)) - 1u;\n        uint leaf_base = (1u << level) - 1u;\n        for(uint i = 0u; i < node_count; i++)\n        {\n            bounding_spheres[node_base + i] = enclosing_sphere(bounding_spheres[leaf_base + 2u * i + 0u],bounding_spheres[leaf_base + 2u * i + 1u]);\n        }\n    }\n\n    vec4 result = trace(ro, rd, 0.0, DIST_MAX);\n    vec3 color = result.xyz;\n    float dist = result.w;\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        //vec3 n = normal(dst); // standard normals\n        vec3 n = normal(ro + rd * (dist-EPSILON)); // reduce edge-glint by normal-backoff as suggested by elenzil\n\n        //color = n * 0.5 + 0.5;\n\n        vec3 ambient = vec3(0.1);\n        float brightness = max(dot(lightdir, n), 0.0) * 2.0;\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, 25.0);\n        color *= (ambient * calcAO(dst, n, 0u/*index*/)) + brightness;\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        vec3 fog_color = vec3(0);\n        color = mix(fog_color, vec3(color), exp(-pow(dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        color = vec3(0);\n    }\n//    #if BOUNDING_SPHERE_LEAF_BASE + 3u == 6u\n//    color = vec3(0,1,0);\n//    #endif\n    color = tanh(color); // roll-off overly bright colors\n    color = sqrt(color); // approximate gamma\n\n    //color += hash32(I*123.0)/255.0; // dither to remove banding in the background\n\n    o = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}