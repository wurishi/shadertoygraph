{"ver":"0.1","info":{"id":"ldVXzy","date":"1465220011","viewed":145,"name":"Test_3_rgb_hsl","username":"qufangliu","description":"//Try to convert RGB to HSL\n//Try to convert HSL to RGB","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["rgb","hsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//RGB:Red Green Blue -> çº¢ç»¿è“\n//HSL:Hue Saturation Lightness -> è‰²ç›¸ é¥±å’Œåº¦ äº®åº¦\n\n//Try to convert RGB to HSL\nvec3 RGBToHSL(vec3 rgb)\n{\n\tvec3 HSL = vec3(0.0, 0.0, 0.0);\n\tfloat RGB_Max = max(rgb.x, max(rgb.y, rgb.z));\n\tfloat RGB_Min = min(rgb.x, min(rgb.y, rgb.z));\n\t//H\n\tif (RGB_Max == RGB_Min)\n\t{\n\t\tHSL.x = 0.0;\n\t}\n\telse if (RGB_Max == rgb.x)\n\t{\n\t\tHSL.x = 60.0 * (rgb.y - rgb.z) / (RGB_Max - RGB_Min);\n\t\tif (HSL.x < 0.0)\n\t\t{\n\t\t\tHSL.x = HSL.x + 360.0;\n\t\t}\n\t}\n\telse if (RGB_Max == rgb.y)\n\t{\n\t\tHSL.x = 60.0 * (rgb.z - rgb.x) / (RGB_Max - RGB_Min) + 120.0;\n\t}\n\telse if (RGB_Max == rgb.z)\n\t{\n\t\tHSL.x = 60.0 * (rgb.x - rgb.y) / (RGB_Max - RGB_Min) + 240.0;\n\t}\n\t//L\n\tHSL.z = (RGB_Max + RGB_Min) / 2.0;\n\t//S\n\tif (HSL.z == 0.0 || RGB_Max == RGB_Min)\n\t{\n\t\tHSL.y = 0.0;\n\t}\n\telse if (HSL.z > 0.0 && HSL.z <= 0.5)\n\t{\n\t\tHSL.y = (RGB_Max - RGB_Min) / (RGB_Max + RGB_Min);\n\t}\n\telse if (HSL.z > 0.5)\n\t{\n\t\tHSL.y = (RGB_Max - RGB_Min) / (2.0 - (RGB_Max + RGB_Min));\n\t}\n\n\treturn HSL;\n}\n\n//Try to convert HSL to RGB\nvec3 HSLToRGB(vec3 hsl)\n{\n\tvec3 RGB = vec3(0.0, 0.0, 0.0);\n\tif (hsl.y == 0.0)\n\t{\n\t\tRGB = vec3(hsl.z, hsl.z, hsl.z);\n\t}\n\telse \n\t{\n\t\tfloat q = 0.0;\n\t\tfloat p = 0.0;\n\t\tfloat h = 0.0;\n\n\t\tif (hsl.z < 0.5)\n\t\t{\n\t\t\tq = hsl.z * (1.0 + hsl.y);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tq = hsl.z + hsl.y - (hsl.z * hsl.y);\n\t\t}\n\n\t\tp = 2.0 * hsl.z - q;\n\t\th = hsl.x / 360.0;\n\n\t\tfloat t_R = h + 1.0 / 3.0;\n\t\tfloat t_G = h;\n\t\tfloat t_B = h - 1.0 / 3.0;\n\n\t\tif (t_R > 1.0)\n\t\t{\n\t\t\tt_R = t_R - 1.0;\n\t\t}\n\t\telse if (t_R < 0.0)\n\t\t{\n\t\t\tt_R = t_R + 1.0;\n\t\t}\n\n\t\tif (t_G > 1.0)\n\t\t{\n\t\t\tt_G = t_G - 1.0;\n\t\t}\n\t\telse if (t_G < 0.0)\n\t\t{\n\t\t\tt_G = t_G + 1.0;\n\t\t}\n\n\t\tif (t_B > 1.0)\n\t\t{\n\t\t\tt_B = t_B - 1.0;\n\t\t}\n\t\telse if (t_B < 0.0)\n\t\t{\n\t\t\tt_B = t_B + 1.0;\n\t\t}\n\t\t//R\n\t\tif (t_R < 1.0 / 6.0)\n\t\t{\n\t\t\tRGB.x = p + ((q - p) * 6.0 * t_R);\n\t\t}\n\t\telse if (t_R < 0.5)\n\t\t{\n\t\t\tRGB.x = q;\n\t\t}\n\t\telse if (t_R < 2.0 / 3.0) \n\t\t{\n\t\t\tRGB.x = p + ((q - p) * 6.0 * (2.0 / 3.0 - t_R));\n\t\t}\n\t\telse \n\t\t{\n\t\t\tRGB.x = p;\n\t\t}\n\t\t//G\n\t\tif (t_G < 1.0 / 6.0)\n\t\t{\n\t\t\tRGB.y = p + ((q - p) * 6.0 * t_G);\n\t\t}\n\t\telse if (t_G < 0.5)\n\t\t{\n\t\t\tRGB.y = q;\n\t\t}\n\t\telse if (t_G < 2.0 / 3.0) \n\t\t{\n\t\t\tRGB.y = p + ((q - p) * 6.0 * (2.0 / 3.0 - t_G));\n\t\t}\n\t\telse \n\t\t{\n\t\t\tRGB.y = p;\n\t\t}\n\t\t//B\n\t\tif (t_B < 1.0 / 6.0)\n\t\t{\n\t\t\tRGB.z = p + ((q - p) * 6.0 * t_B);\n\t\t}\n\t\telse if (t_B < 0.5)\n\t\t{\n\t\t\tRGB.z = q;\n\t\t}\n\t\telse if (t_B < 2.0 / 3.0) \n\t\t{\n\t\t\tRGB.z = p + ((q - p) * 6.0 * (2.0 / 3.0 - t_B));\n\t\t}\n\t\telse \n\t\t{\n\t\t\tRGB.z = p;\n\t\t}\n\t}\n\n\treturn RGB;\n}\n\n\n//Test convert\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n\n    if (fragCoord.x > 260.0)\n    {\n        vec3 rgb1 = fragColor.xyz;\n    \tvec3 hsl = RGBToHSL(rgb1);\n        hsl.z = 0.7;\n        vec3 rgb2 = HSLToRGB(hsl);\n        fragColor = vec4(rgb2, 1.0);\n    }   \n    \n}\n    \n    \n    ","name":"Image","description":"","type":"image"}]}