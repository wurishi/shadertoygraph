{"ver":"0.1","info":{"id":"3sfyDs","date":"1585813952","viewed":274,"name":"SimpleCloud","username":"zchajax","description":"A simple cloud shader","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","noise","cloud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat noise(in vec3 p)\n{\n    p += iTime * .2;\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n    \n    f = f * f * (3. - 2. * f);\n    \n    vec2 uv = (i.xy + vec2(37., 239.) * i.z) + f.xy;\n    vec2 rg = textureLod(iChannel0, (uv + .5) / 256., 0.).yx;\n    \n    return -1. + 2. * mix(rg.x, rg.y, f.z);\n}\n\nfloat map( in vec3 p )\n{ \n\tvec3 q = p - vec3(0., 0., 1.);\n\tfloat f;\n    f  = 0.50000*noise( q ); q = q*2.02;\n    f += 0.25000*noise( q ); q = q*2.03;\n    f += 0.12500*noise( q ); q = q*2.01;\n    f += 0.06250*noise( q ); q = q*2.02;\n    f += 0.03125*noise( q );\n\treturn clamp(1.5 - p.y - 2. + 1.75 * f, 0., 1.);\n}\n\nvec4 raymarch( in vec3 ro, in vec3 rd, in vec3 bgcol)\n{\n\tvec4 sum = vec4(0.);\n\n\tfloat t = 0.1;\n\n    for(int i = 0; i < 100; i++)\n\t{\n        vec3 pos = ro + t * rd;\n       \tif(sum.a > .99 ) break;\n       \tfloat den = map( pos );\n       \tif( den > .01 )\n       \t{\n            vec4  col = vec4( mix( vec3(1., .99, .98), vec3(.25, .3, .35), den ), den);\n         \tcol.w *= .4;\n         \tcol.rgb *= col.a;\n         \tsum += col * (1.-sum.a);\n        }\n        \n        t += max(.05, .02 * t);\n\t}\n    \n    return clamp( sum, 0., 1. );\n}\n\nvec4 render( in vec3 ro, in vec3 rd)\n{\n \t// sky\n\tvec3 col = vec3(.6, .71, .75) - rd.y * .2 * vec3(1., .5, 1.) + .15 * .5;\n\n    // clouds    \n    vec4 res = raymarch( ro, rd, col);\n    col = col * (1. - res.w) + res.xyz;\n    \n    return vec4(col, 1.);\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    // camera\n    vec3 ro = 4.0 * normalize(vec3(sin(3.0 * m.x), 0.4 * m.y, cos(3.0 * m.x)));\n\tvec3 ta = vec3(0., -1., 0.);\n    mat3 ca = setCamera(ro, ta, 0.);\n    \n    // ray\n    vec3 rd = ca * normalize( vec3(p.xy,1.5));\n    \n    fragColor = render(ro, rd);\n}","name":"Image","description":"","type":"image"}]}