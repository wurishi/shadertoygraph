{"ver":"0.1","info":{"id":"3tKBz1","date":"1613887745","viewed":165,"name":"Finite Repetition","username":"oneshade","description":"Reinventing the wheel to understand, I'm pretty sure its exact.","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["sdf","repetition","exact","limited","finite"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// i: repeat interval\n// b: repetition bounds\n// Note: b must be evenly divisible by i!\nvec2 repFinite(in vec2 p, in vec2 i, in vec2 b) {\n    return p - 0.5 * i - clamp(i * floor(p / i + 0.5), -b, b);\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    vec2 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(0.0, max(q.x, q.y));\n}\n\nfloat map(in vec2 p) {\n    float t = iTime;\n    vec2 i = vec2(1.0 + 0.5 * sin(t));\n\n    t *= 0.25;\n    vec2 r = mod(vec2(floor(3.0 + 3.0 * cos(t)), floor(3.0 + 3.0 * sin(t))), 3.0);\n\n    p = repFinite(p, i, i * r) + 0.5 * i;\n    return sdBox(p, vec2(0.1));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 2.0 / iResolution.y;\n    float time = iTime * 2.0;\n\n    float d = map(uv);\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(140.0 * d);\n\tcolor = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, abs(d)));\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}