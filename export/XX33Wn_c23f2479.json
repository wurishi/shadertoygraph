{"ver":"0.1","info":{"id":"XX33Wn","date":"1716299976","viewed":118,"name":"Flip Page Perspective","username":"houyy","description":"Perspective","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["perspective"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec2 rotate(vec2 v, vec2 o, float a) {\n    float s = sin(a);\n    float c = cos(a);\n    mat2 m = mat2(c, -s, s, c);\n    return m * (v-o) + o;\n}\n\nvec2 TransformPlane(vec2 uv, vec2 center, float XRot, float YRot) {\n  uv = uv*2.0-1.0;\n  center = center*2.0-1.0;\n  // First Rotate around Y axis\n  vec2 RayDirection =  vec2(uv.x, 0.0);\n  vec2 A1 = vec2(0.0, -1.0);\n//   vec2 A1 = vec2(-1.0, 0.0);\n  vec2 B1 = RayDirection - A1;\n  vec2 C1 = rotate(vec2(-1.0, 0.0), vec2(center.x, 0.0), YRot);\n  vec2 D1 = rotate(vec2( 1.0, 0.0), vec2(center.x, 0.0), YRot) - C1;\n  // calculate intersection point\n  float u = ( (C1.y + 1.0) * D1.x - C1.x * D1.y ) / (D1.x*B1.y-D1.y*B1.x);\n  // position on the plane:\n  float sx = u * B1.x;\n  float sy = u * uv.y;\n  // Now Rotate around X axis\n  if(XRot == 0.0){\n    return vec2(sx, sy)*0.5+0.5;\n  }\n  RayDirection = vec2(sy, 0.0);\n  vec2 B2 = RayDirection - A1;\n  vec2 C2 = rotate(vec2(-1.0, 0.0), vec2(center.y, 0.0), XRot);\n  vec2 D2 = rotate(vec2( 1.0, 0.0), vec2(center.y, 0.0), XRot) - C2;\n  // calculate intersection point\n  float v = ( (C2.y + 1.0) * D2.x - C2.x * D2.y ) / (D2.x*B2.y-D2.y*B2.x);\n  // final position on the plane:\n  return vec2(v * sx, v * B2.x )*0.5+0.5; \n}\n\n#define PI 3.14159265\n\nfloat normpdf(float x, float sigma){\n\treturn 0.39894 * exp(-0.5 * x * x / (sigma * sigma)) / sigma;\n}\nvec4 motionBlur1(vec2 tc, vec2 direction) {\n\tfloat sigma = 28.0;\n\tfloat weight = normpdf(0.0, sigma);\n\tvec4 retCol = texture(iChannel0, tc);\n\tretCol *= weight;\n\tfloat sum = weight;\n\t// float radius = 0.03 * strength;\n\tfloat radius = 0.03 * 0.1;\n\t\n\tfor(float j = 1.0; j < 15.0; j += 1.0)\n\t{\n\t\tweight = normpdf(j / 10.0 * 25.0, sigma);\n\t\tfloat offset = radius * j;\n\t\tvec2 uv = tc + direction * offset;\n\t\tretCol += texture(iChannel0, uv) * weight;\n\t\tsum += weight;\n\n\t\tuv = tc - direction * offset;\n\t\tretCol += texture(iChannel0, uv) * weight;\n\t\tsum += weight;\n\t}\n\n\tretCol /= sum;\n\tretCol = clamp(retCol, 0.0, 1.0);\n\t\n\treturn retCol;\n}\nvec4 motionBlur2(vec2 tc, vec2 direction) {\n\tfloat sigma = 28.0;\n\tfloat weight = normpdf(0.0, sigma);\n\tvec4 retCol = texture(iChannel1, tc);\n\tretCol *= weight;\n\tfloat sum = weight;\n\t// float radius = 0.03 * strength;\n\tfloat radius = 0.03 * 0.1;\n\t\n\tfor(float j = 1.0; j < 15.0; j += 1.0)\n\t{\n\t\tweight = normpdf(j / 10.0 * 25.0, sigma);\n\t\tfloat offset = radius * j;\n\t\tvec2 uv = tc + direction * offset;\n\t\tretCol += texture(iChannel1, uv) * weight;\n\t\tsum += weight;\n\n\t\tuv = tc - direction * offset;\n\t\tretCol += texture(iChannel1, uv) * weight;\n\t\tsum += weight;\n\t}\n\n\tretCol /= sum;\n\tretCol = clamp(retCol, 0.0, 1.0);\n\t\n\treturn retCol;\n}\nfloat easeInQuart(float x){\n\treturn pow(x, 5.0);\n}\nvec2 scale(vec2 uv, vec2 center, vec2 amp)\n{\n\treturn (uv - center)*amp + center;\n\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 tc = fragCoord/iResolution.xy;\n  float progress = mod(iTime, 5.0) / 5.0;\n  fragColor = vec4(0.0);  \n\n  if(progress < 0.5){\n\t\tfloat bellTime = progress * 2.0;\n\t\tbellTime = easeInQuart(bellTime);\n\t\tfloat rotateX = radians(15.0)*bellTime;\n\t\tvec2  uv = tc;\n\t\tfloat rotateY = 0.0;\n\t\t// vec2 center = vec2(0.5, 0.10)*vec2(bellTime, 1.0);\n\t\tvec2 center = vec2(0.5, 0.1);\n\t\tuv = scale(uv, vec2(0.5, 0.05), vec2(1.0, 1.0 + 0.2*uv.y*bellTime));\n\n\t\tvec2 transformUV = TransformPlane(uv, center, rotateX, rotateY);\n\t\tvec2 speed = (transformUV - vec2(0.5, 0.1))*vec2(bellTime)*vec2(0.8);\n\n      \tfragColor = motionBlur1(transformUV, speed);\n  }else{\n\t\tfloat bellTime = 1.0-(progress-0.5)*2.0;\n\t\tbellTime = easeInQuart(bellTime);\n\t\tfloat rotateX = radians(-10.0)*bellTime;\n\t\tvec2  uv = tc;\n\t\tfloat rotateY = 0.0;\n\t\tvec2 center = vec2(0.5, 0.90)*vec2(bellTime, 1.0);\n\t\t// uv = scale(uv, vec2(0.5, 0.9), vec2(1.0, 1.0 + 0.9*(1.0 - uv.y)*bellTime));\n\n\t\tvec2 transformUV = TransformPlane(uv, center, rotateX, rotateY);\n\t\tvec2 speed = (transformUV - vec2(0.5, 0.90))*vec2(bellTime)*vec2(0.8);\n\n      \tfragColor = motionBlur2(transformUV, speed);\n  \t}\n}\n","name":"Image","description":"","type":"image"}]}