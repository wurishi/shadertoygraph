{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"/*\n * Fast hack for shadertoy hackaton, copy-paste galore, don't\n * judge me over code quality, please :P\n *\n *\n */\n\nfloat r;\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)+s;\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x+q.y*0.57735,q.y*1.1547)-h.x);\n}\n\nvec3 rotate (vec3 vec, float angleX, float angleY, float angleZ)\n{\n\tmat3 rotateX = mat3(1.0, 0.0, 0.0,\n                        0.0, cos(angleX), -sin(angleX),\n                        0.0, sin(angleX), cos(angleX));\n    mat3 rotateY = mat3(cos(angleY), 0.0, sin(angleY),\n                        0.0, 1.0, 0.0,\n                        -sin(angleY), 0.0, cos(angleY));\n    mat3 rotateZ = mat3(cos(angleZ), -sin(angleZ), 0.0,\n                        sin(angleZ), cos(angleZ), 0.0,\n                        0.0, 0.0, 1.0);\n\t\t\t\t\t\t\n\treturn vec * rotateX * rotateY * rotateZ;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nconst float PI = 3.141592;\n\nfloat map( in vec3 p )\n{\n\tvec3 rotP = rotate(p, -0.4, 0.5, 0.0);\n\t\n\trotP.y *= 1.3;\n\t\n\tvec3 rotP2 = rotate(rotP,0.0,2.04,0.0);\n\t\n\t\n\tfloat sphere = 0.1 + sdSphere( rotP, -0.6 );\n\tfloat box1 = udRoundBox( rotP2-vec3(0.0,0.4,0.4), vec3(0.5,0.25,0.01), 0.1 );\n\tfloat box2 = udRoundBox( rotP2-vec3(0.0,0.4,0.4), vec3(0.12,0.6,0.1), 0.01 );\n\tfloat box3 = udRoundBox( rotP2-vec3(0.0,1.3,0.4), vec3(0.6,0.2,0.15), 0.1 );\n\tfloat box4 = udRoundBox( rotP2-vec3(0.0,0.0,0.4), vec3(0.6,0.4,0.2), 0.1 );\n\tfloat box5 = udRoundBox( rotP2-vec3(0.0,0.0,0.4), vec3(0.7,0.3,0.6), 0.05 );\n\tfloat box6 = udRoundBox( rotP2-vec3(0.0,0.0,-0.2), vec3(0.2,0.2,0.6), 0.03 );\n\tfloat box7 = udRoundBox( rotP2-vec3(0.0,0.0,-1.3), vec3(0.1,0.1,0.1), 0.03 );\n\tfloat prism = sdHexPrism( rotate(rotP,PI/2.0,0.0,0.0), vec2(1.0, 0.025) );\n\tfloat prism2 = sdHexPrism( rotate(rotP,PI/2.0,0.0,0.0), vec2(1.3, 0.025) );\n\tfloat prism3 = sdHexPrism( rotate(rotP,PI/2.0,0.0,0.0), vec2(1.4, 0.025) );\n\tfloat torus = sdTorus   ( rotate(rotP,0.0,0.0,0.0), vec2(1.001, 0.15) );\n\tfloat tri = sdTriPrism ( rotate(rotP,PI/2.0,0.0,0.0), vec2(2.1, 0.1 ) );\n\t\n\t\n\tfloat a = tri; // smin( torus,tri,32.0);\n\t//float b = smin( a, prism2, 32.0);\n\t//float c = smin( b, prism3, 32.0);\n\tfloat d = smin( a, box1, 32.0 );\n\tfloat e = smin( d, box2, 32.0 );\n\tfloat f = smin( e, box3, 32.0 );\n\tfloat g = smin( f, box4, 32.0 );\n\tfloat h = smin( g, box5, 32.0 );\n\tfloat i = smin( h, box6, 32.0 );\n\tfloat j = smin( i, box7, 32.0 );\n\t\n\treturn j;\t\n}\n\nvec3 calcNormal( in vec3 p )\n{\n\tvec3 e = vec3(0.001,0.0,0.0);\n\treturn normalize( vec3(map(p+e.xyy) - map(p-e.xyy),\n\t\t\t\t\t\t   map(p+e.yxy) - map(p-e.yxy),\n\t\t\t\t\t\t   map(p+e.yyx) - map(p-e.yyx) ) );\n\t\t\t\t\t\t   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tvec2 p = -1.0 + 2.0*uv;\n\t\n\tp.x *= iResolution.x/iResolution.y;\n\n    r = 2.0*texture( iChannel0, vec2(0.01,0.25) ).x;\n\tvec3 ro = vec3(0.0, 0.0, 2.4 );\n\tvec3 rd = normalize( vec3( p, -1.0 ) );\n\t\n\t\n\tvec3 col = vec3(1.0);\n\t\n\t\n\tfloat tmax = 10.0;\n\tfloat h = 1.0;\n\tfloat t = 0.0;\n\tfor( int i=0; i<50; i++ )\n\t{\n\t\tif( h<0.00001 || t>tmax ) continue;\n\t\th = map( ro + t*rd );\n\t\tt += h;\n\t}\n\t\n\t\n\tif( t<tmax )\n\t{\n\t\tvec3 pos = ro + t*rd;\n\t\tvec3 nor = calcNormal( pos );\n\t\tcol = vec3(0.0);\n\t\tcol += vec3(1.0,1.0,0.8)*max(dot( nor, vec3(0.57703) ),0.0);\n\t\tcol += vec3(1.0,1.0,1.0)*0.8*max(dot( nor, vec3(0.0,-0.57703,0.6) ), 0.0);\n\t\t//col *= nor;\n\t}\n\t\n\tvec2 q = fragCoord.xy / iResolution.xy;\n\t\n\t// vigneting\n    col *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.25 );\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldjGWt","date":"1395286706","viewed":311,"name":"[SH2014] I want spaceships","username":"shash","description":"I want my flying car, my spaceship, my empire and stuff :P","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["spaceships"],"hasliked":0,"parentid":"","parentname":""}}