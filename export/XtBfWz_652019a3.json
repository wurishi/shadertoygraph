{"ver":"0.1","info":{"id":"XtBfWz","date":"1515343646","viewed":639,"name":"Cellular automaton waves","username":"LuisRodriguezRuiz","description":"From the original equation by Rudy Rucker, a factor to prevent the ca from getting attracted to extreme values has been added.   ","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["wave","cellularautomaton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec4 color1=vec4(1.0);\n    vec4 color2=vec4(0.1,0.1,0.5,1.0);\n    \n    float value=texture(iChannel0,fragCoord.xy/iResolution.xy).x/3.;\n    fragColor=mix(color1,color2,value); \n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0,fragCoord.xy/iResolution.xy);\n}\n\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0,fragCoord.xy/iResolution.xy);\n}\n  ","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"float wave=0.1;\nfloat nonLinearity=0.2;\nconst float degree=3.;\nconst float maxLimit=3.;\n\n\nfloat rnd(vec2 seed)\n{\n    return fract(sin(dot(seed.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nfloat getNeighborValue(vec2 pos)\n{   \n  \n  return texture(iChannel0,pos/iResolution.xy).x;  \t\n}\n\n\n\n\nfloat getDerivativeNeighborValue(vec2 pos1, vec2 pos2,float p) \n{\n\n    return pow(texture(iChannel0,pos2/iResolution.xy).x-texture(iChannel0,pos1/iResolution.xy).x,p);\n}\n        \n  \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    \t float waveValue;\n         float prevValue = texture(iChannel1,fragCoord.xy/iResolution.xy).x;        \n     \t\n         float currentValue = texture(iChannel0,fragCoord.xy/iResolution.xy).x;\t\t\n\t\t\n         if(iFrame==0)        \n             waveValue=rnd(fragCoord.xy);\n         else\n         { \n                   \n            float neighborsValue=(getNeighborValue(fragCoord.xy+vec2(0,-1))+\n                                  getNeighborValue(fragCoord.xy+vec2(0,1))+\n                                  getNeighborValue(fragCoord.xy+vec2(-1,0))+\n                                  getNeighborValue(fragCoord.xy+vec2(1,0)))/4.;\n             \n            float derNeighborsValue=getDerivativeNeighborValue(fragCoord,fragCoord+vec2(0,-1),degree)+\n                                    getDerivativeNeighborValue(fragCoord,fragCoord+vec2(0,1),degree)+\n                                    getDerivativeNeighborValue(fragCoord,fragCoord+vec2(-1,0),degree)+\n                             \t    getDerivativeNeighborValue(fragCoord,fragCoord+vec2(1,0),degree);\n             \n            \n            // Original transition rule\n            waveValue=2.0*currentValue-prevValue+2.0*wave*(neighborsValue-currentValue+nonLinearity*derNeighborsValue);\n            // This factor is driven by an oscillator and attracts the values of the ca to \n            // intermediate values.\n            waveValue-=0.0037*sin(0.1*6.28*iTime+20.0)*(fract(waveValue)-0.5);\n            waveValue=clamp(waveValue,0.,maxLimit);\n           \n         }\n              \n        fragColor=vec4(waveValue);\n    \t                                           \n}\n","name":"Buf C","description":"","type":"buffer"}]}