{"ver":"0.1","info":{"id":"ttBGRz","date":"1567968857","viewed":150,"name":"cube twist with synthesis","username":"shadyLane","description":"cube twist with sequence","likes":6,"published":1,"flags":8,"usePreview":0,"tags":["cubetwistwithsequence"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotate(float a) { \n    float c=cos(a), s=sin(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat box(vec3 pos, float size) {\n\treturn max(abs(pos.x), max(abs(pos.y), abs(pos.z))) - size;   \n}\nfloat map(vec3 pos) {\n    pos.yz *= rotate(iTime*0.3 + pos.x);\n    pos.x = mod(pos.x, .8) - 0.4;\n    pos.xz *= rotate(iTime*0.5 + pos.y);\n      \n\treturn box(pos, 0.25);\n}                   \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n\t\n    float circle = length(uv) - 0.5;\n    circle = smoothstep( 0., 0.01, circle);\n    \n    vec3 eye = vec3(0., 0., -10.);\n    vec3 ray = normalize(vec3(uv, 0.) - eye);\n    vec3 shade = vec3(0., 0., 0.);\n    \n    for (int i = 20; i > 0; --i) {\n    \tfloat d = map(eye);\n        if (d < 0.001) {\n            shade = vec3(float(i)/20.);\n            break;\n        }\n        eye += ray * d;\n    }\n    \n    // Output to screen\n    fragColor = vec4(shade,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"mat4x4 melo = mat4x4( -12,  3,  7, 10,\n                       14, 12,  8,  7,\n                       11,  0, -12, 0,\n                       10, 12,  19, 7);\n\nmat4x4 bass = mat4x4( -24, -12,-24, -12,\n                      -24, -12,-24, -12,\n                      -21, -9, -21, -9,\n                      -19, -7, -19, -7\n                    );\n\nmat4x4 bip = mat4x4( 31, 27, 26 ,24,\n                     31, 27, 26 ,24,\n                     31, 27, 26 ,24,\n                     31, 27, 26 ,24);\n\n\nfloat mtof(float m) {\n    return 440. * pow(2., (m-70.)/12.);\n}\n\nfloat seq(float t, float l, mat4x4 sequence) {\n    \n    t = mod(t, l); \n    float steplength = l/16.;\n\n    int step = int(floor(t * 16. / l));\n    \n    float stepval = sequence[step/4][step%4];\n\n    return mtof(stepval + 60.);\n}\n\nfloat square(float t, float f) {\n\treturn floor(sin(6.2831*f*t)*5.)* 0.2;\n}\n\nvec2 mainSound( in int samp, float time ) {\n\n    \n    float t1 = mod(time, 3.);\n    float kick = mod(time, 3./8.);\n    float t2 = mod(time, 3./16.);\n    float t3 = mod(time, 3./32.);\n    \n    float freq = seq(time, 3., melo);\n    float freqB = seq(time, 12., bass);\n    float freqBip = seq(time, 1.5, bip);\n    \n    float sound = square(time, freq)*exp(-10.0*t2);\n    sound += square(time, freqB);\n    sound += square(time, freqBip)*exp(-30.0*t3) * 0.5;\n    sound += clamp( sin( exp(-kick*15.) * 100. + 50.) * exp(-kick*.1) * 1., -.8, 0.8) * 1.5;\n    return vec2( sound * 0.3 );\n}","name":"Sound","description":"","type":"sound"}]}