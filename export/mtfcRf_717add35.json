{"ver":"0.1","info":{"id":"mtfcRf","date":"1690995733","viewed":57,"name":"terrain attempt (broken)","username":"dokso","description":"i'm currently trying to learn raymarching and shaders, but i cannot seem to be able to fix this issue with weird artifacts in my terrain (move your mouse)\n\nany help in the comments would be highly appreciated!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","noise","phong","terrain","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON 0.00001\n#define MAX_DIST 100.0\n#define MIN_DIST 0.1\n#define MAX_RAYS 512\n#define PI 3.1415926535897932384626433832795028841971693993751\n\nfloat N21(vec2 v) {\n\tfloat noise = dot(v, vec2(123.4, 234.5));\n\tnoise = fract(sin(noise) * 45432.212);\n\treturn noise;\n}\n\nfloat noise(vec2 v, float scale) {\n\tvec2 s = v * scale;\n\tvec2 frac = smoothstep(0.0, 1.0, fract(s));\n\tvec2 id = floor(s);\n\n\tfloat bl = N21(id);\n\tfloat br = N21(id + vec2(1.0, 0.0));\n\tfloat tl = N21(id + vec2(0.0, 1.0));\n\tfloat tr = N21(id + vec2(1.0, 1.0));\n\n\tfloat b = mix(bl, br, frac.x);\n\tfloat t = mix(tl, tr, frac.x);\n\tfloat bt = mix(b, t, frac.y);\n\n\treturn bt;\n}\n\nfloat fbnoise(vec2 v) {\n\tfloat n = noise(v, 4.0);\n\tn += noise(v, 8.0) * 0.5;\n\tn += noise(v, 16.0) * 0.25;\n\tn /= 1.75;\n\n\treturn n;\n}\n\nstruct Surface {\n\tfloat dist;\n\tfloat specular;\n\tfloat roughness;\n\tvec3 color;\n};\n\nSurface minSurface(Surface a, Surface b) {\n\tif (b.dist < a.dist) return b;\n\treturn a;\n}\n\nSurface map(vec3 samplePos) {\n\tSurface[] objects = Surface[] (\n\t\tSurface(\t\t\t\t// help VVVVVVVVVVVV\n\t\t\tsamplePos.y + 0.5 - fbnoise(samplePos.xz) * 0.5, // dist\n\t\t\t0.3, // specular\n\t\t\t0.5, // roughness\n\t\t\tmix(vec3(0.3, 0.2, 0.2), vec3(0.3, 0.8, 0.6), smoothstep(0.6, 0.7, samplePos.y + 1.0))//vec3(sign(sin(samplePos.x * 4.0) * sin(samplePos.z * 4.0)) * 0.5 + 0.5) // color\n\t\t)//,\n\t\t// Surface(\n\t\t// \tlength(samplePos) - 0.2, // dist\n\t\t// \t0.5, // specular\n\t\t// \t0.5, // roughness\n\t\t// \tvec3(1.0) // color\n\t\t// )\n\t);\n\n\tSurface closest;\n\tclosest.dist = MAX_DIST;\n\tfor (int i = 0; i < objects.length(); i++) {\n\t\tclosest = minSurface(closest, objects[i]);\n\t}\n\n\treturn closest;\n}\n\nvec3 estNormal(vec3 samplePos) {\n\tvec2 e = vec2(EPSILON, 0.0);\n\tfloat d = map(samplePos).dist;\n\n\treturn normalize(vec3(\n\t\td - map(samplePos - e.xyy).dist,\n\t\td - map(samplePos - e.yxy).dist,\n\t\td - map(samplePos - e.yyx).dist\n\t));\n}\n\nSurface march(vec3 ro, vec3 rd) {\n\tfloat t = MIN_DIST;\n\n\tfor (int i = 0; i<MAX_RAYS && t<MAX_DIST; i++) {\n\t\tSurface closest = map(ro+rd*t);\n\t\tfloat dist = closest.dist;\n\t\tt += dist;\n\n\t\tif (dist < EPSILON) {\n\t\t\treturn Surface(t, closest.specular, closest.roughness, closest.color);\n\t\t}\n\t}\n\n\treturn Surface(MAX_DIST, 0.0, 0.0, vec3(0.0));\n}\n\nvec3 material = vec3(0.18);\nvec3 sunColor = vec3(6.0, 5.0, 4.0);\nvec3 sunDir = normalize(vec3(0.0, 1.0, 2.0));\nvec3 skyColor = vec3(0.5, 0.8, 1.2);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec2 mouseP = (2.0 * iMouse.xy - iResolution.xy) / iResolution.xy;\n\n\tfloat pitch = mouseP.x * PI + PI;\n\n\tvec3 camPos = vec3(sin(pitch), mouseP.y * 0.5 + 0.4, cos(pitch));\n\tvec3 lookAt = vec3(0, mouseP.y * 0.5 + 0.4, 0);\n\tvec3 forward = normalize(lookAt - camPos);\n\tvec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), forward));\n\tvec3 up = cross(forward, right);\n\n\tvec3 rayDir = normalize(forward + right * uv.x + up * uv.y);\n\n\tSurface surface = march(camPos, rayDir);\n\tfloat dist = surface.dist;\n\tvec3 col = vec3(0.0, 0.5, 1.0) * pow(2.0, 1.0 - rayDir.y);\n\tif (dist < MAX_DIST) {\n\t\tvec3 hit = camPos + rayDir * dist;\n\t\tvec3 normal = estNormal(hit);\n\n\t\tfloat sunShadow = step(MAX_DIST, march(hit + normal * EPSILON, sunDir).dist);\n\t\tfloat ambient = max(dot(normal, vec3(0.0, 1.0, 0.0)), 0.0);\n\t\tfloat diffuse = max(dot(normal, sunDir), 0.0) * sunShadow;\n\t\tfloat specular = pow(max(dot(rayDir, reflect(sunDir, normal)), 0.0), 1.0 + (1.0 - surface.roughness) * 63.0) * surface.specular * sunShadow;\n\t\t\n\t\tcol = vec3(0.0);\n\t\tcol += material * surface.color * skyColor * ambient;\n\t\tcol += material * surface.color * sunColor * diffuse;\n\t\tcol += material * sunColor * specular;\n\t}\n\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}