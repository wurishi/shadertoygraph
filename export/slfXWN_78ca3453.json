{"ver":"0.1","info":{"id":"slfXWN","date":"1625714714","viewed":57,"name":"Hello Shader (Diffusion)","username":"MickRoss","description":"First attempt at diffusion","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["beginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 color = texture(iChannel0, uv);\n    fragColor = vec4(color.xyz, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; // coordinates normalized from 0 - 1\n    \n    //Note: default texture() returns a vec4, for rgba\n    vec3 color = texture(iChannel0, uv).xyz;\n    color += texture(iChannel1, uv).xyz;\n    vec3 neighborSum = vec3(0.);\n    \n    for (float i = -1.0; i <= 1.0; i += 2.0) {\n        vec2 translateX = vec2(i, 0.) / iResolution.xy;\n        vec2 translateY = vec2(0., i) / iResolution.xy;\n        neighborSum += texture(iChannel0, uv + translateX).xyz;\n        neighborSum += texture(iChannel0, uv + translateY).xyz;\n        \n        neighborSum += texture(iChannel1, uv + translateX).xyz;\n        neighborSum += texture(iChannel1, uv + translateY).xyz;\n    }\n    \n    vec3 neighborAverage = neighborSum/4.;\n    color = neighborAverage;\n    \n    // create a white circle in the middle of defined origin to start\n    if (iFrame < 1) {\n    \n        uv -= .5; // redefine origin to center\n        uv.x *= iResolution.x/iResolution.y; //this is the aspect ratio of the screen\n\n\n        float d = length(uv); // provides the distance from the origin\n        float radius = 0.3;\n\n        float c = smoothstep(radius, radius - 0.01, d);\n\n        // Output to screen\n        color = vec3(c);\n    \n    \n    // white rectangular region\n    /*\n        if (uv.x < 0.7 && uv.y > 0.5) {\n        color = vec3(1., 1., 1.);\n        } else {\n        color = vec3(0., 0., 0.);\n        }\n    */\n    \n    \n    }\n    \n\n    fragColor = vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n    float boxSize = 5.;\n    \n    //Draw a red square where mouse last was\n    if(abs(iMouse.x-fragCoord.x) < boxSize && abs(iMouse.y-fragCoord.y) < boxSize) {\n        col = vec3(1.,0.,0.);\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}