{"ver":"0.1","info":{"id":"X33Gzr","date":"1719539782","viewed":60,"name":"Color Transformation Tensor","username":"Data_chan","description":"Uses a 4x4x4 tensor to transform a vec4. I thought \"Well matrix transformation is cool why dont I use a tensor?\" and I made this. NOTE: Currently the tensor values are preset, and you can edit them if you wish to :3","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["matrix","tensor","horribleabomination"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//I don't even know how to use it fully, and I do not recommend to use it because it has very little use. \n//The code is quite odd and the inputs are unintuitive, I started working on this a while ago and finally finished it.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 out_color;\n    vec4 in_color;\n    vec4 tensor_in;\n    \n    tensor_in = texture(iChannel0, uv);\n    \n    mat4x4 redMat;\n    \n    redMat[0] = vec4(1.0, 0.0, 0.0, 0.0);  //outputs to red  \n    redMat[1] = vec4(0.0, 0.0, 0.0, 0.0);  //outputs to green\n    redMat[2] = vec4(0.0, 0.0, 0.0, 0.0);  //outputs to blue \n    redMat[3] = vec4(0.0, 0.0, 0.0, 0.0);  //outputs to alpha\n    \n    mat4x4 greenMat;\n    \n    greenMat[0] = vec4(0.0, 0.0, 0.0, 0.0);  //outputs to red  \n    greenMat[1] = vec4(0.0, 1.0, 0.0, 0.0);  //outputs to green\n    greenMat[2] = vec4(0.0, 0.0, 0.0, 0.0);  //outputs to blue \n    greenMat[3] = vec4(0.0, 0.0, 0.0, 0.0);  //outputs to alpha\n    \n    mat4x4 blueMat;\n        \n    blueMat[0] = vec4(0.0, 0.0, 0.0, 0.0);  //outputs to red  \n    blueMat[1] = vec4(0.0, 0.0, 0.0, 0.0);  //outputs to green\n    blueMat[2] = vec4(0.0, 0.0, 1.0, 0.0);  //outputs to blue \n    blueMat[3] = vec4(0.0, 0.0, 0.0, 0.0);  //outputs to alpha\n    \n    mat4x4 alphaMat;\n    \n    alphaMat[0] = vec4(0.0, 0.0, 0.0, 0.0);  //outputs to red  \n    alphaMat[1] = vec4(0.0, 0.0, 0.0, 0.0);  //outputs to green\n    alphaMat[2] = vec4(0.0, 0.0, 0.0, 0.0);  //outputs to blue \n    alphaMat[3] = vec4(0.0, 0.0, 0.0, 1.0);  //outputs to alpha\n    \n    \n    mat4x4 outMat;\n    \n    //color processing\n    \n    //first we primary-inate it.\n    \n    redMat[0] = redMat[0]*tensor_in;\n    redMat[1] = redMat[1]*tensor_in;\n    redMat[2] = redMat[2]*tensor_in;\n    redMat[3] = redMat[3]*tensor_in;\n    \n    greenMat[0] = greenMat[0]*tensor_in;\n    greenMat[1] = greenMat[1]*tensor_in;\n    greenMat[2] = greenMat[2]*tensor_in;\n    greenMat[3] = greenMat[3]*tensor_in;\n    \n    blueMat[0] = blueMat[0]*tensor_in;\n    blueMat[1] = blueMat[1]*tensor_in;\n    blueMat[2] = blueMat[2]*tensor_in;\n    blueMat[3] = blueMat[3]*tensor_in;\n    \n    alphaMat[0] = alphaMat[0]*tensor_in;\n    alphaMat[1] = alphaMat[1]*tensor_in;\n    alphaMat[2] = alphaMat[2]*tensor_in;\n    alphaMat[3] = alphaMat[3]*tensor_in;\n    \n    //Next we treat each column of each matrix as a vec4. Then, we can get the value from it. This compresses it from tensor4x4x4 to mat4x4\n    //At the same time, we also output the results to secondaryMat\n    \n    mat4x4 secondaryMat;\n    \n    secondaryMat[0] = vec4(\n                            max(max(redMat[0].x, redMat[0].y), max(redMat[0].z, redMat[0].w)),\n                            max(max(redMat[1].x, redMat[1].y), max(redMat[1].z, redMat[1].w)),\n                            max(max(redMat[2].x, redMat[2].y), max(redMat[2].z, redMat[2].w)),\n                            max(max(redMat[3].x, redMat[3].y), max(redMat[3].z, redMat[3].w))\n                            );\n    secondaryMat[1] = vec4(\n                            max(max(greenMat[0].x, greenMat[0].y), max(greenMat[0].z, greenMat[0].w)),\n                            max(max(greenMat[1].x, greenMat[1].y), max(greenMat[1].z, greenMat[1].w)),\n                            max(max(greenMat[2].x, greenMat[2].y), max(greenMat[2].z, greenMat[2].w)),\n                            max(max(greenMat[3].x, greenMat[3].y), max(greenMat[3].z, greenMat[3].w))\n                            );\n    secondaryMat[2] = vec4(\n                            max(max(blueMat[0].x, blueMat[0].y), max(blueMat[0].z, blueMat[0].w)),\n                            max(max(blueMat[1].x, blueMat[1].y), max(blueMat[1].z, blueMat[1].w)),\n                            max(max(blueMat[2].x, blueMat[2].y), max(blueMat[2].z, blueMat[2].w)),\n                            max(max(blueMat[3].x, blueMat[3].y), max(blueMat[3].z, blueMat[3].w))\n                            );\n    secondaryMat[3] = vec4(\n                            max(max(alphaMat[0].x, alphaMat[0].y), max(alphaMat[0].z, alphaMat[0].w)),\n                            max(max(alphaMat[1].x, alphaMat[1].y), max(alphaMat[1].z, alphaMat[1].w)),\n                            max(max(alphaMat[2].x, alphaMat[2].y), max(alphaMat[2].z, alphaMat[2].w)),\n                            max(max(alphaMat[3].x, alphaMat[3].y), max(alphaMat[3].z, alphaMat[3].w))\n                            );\n\n    //output code\n    \n    vec4 tensor_out = (\n                        secondaryMat[0]+\n                        secondaryMat[1]+\n                        secondaryMat[2]+\n                        secondaryMat[3]);\n    \n    \n    \n    //dimension compression code\n\n\n    \n    \n    //outMat = outMat*secondaryMat;\n    \n    //tensor_out = outMat[0]+outMat[1]+outMat[2]+outMat[3];\n    \n    // Output to screen\n    fragColor = vec4(tensor_out);\n}","name":"Image","description":"","type":"image"}]}