{"ver":"0.1","info":{"id":"ws3GzH","date":"1567762874","viewed":173,"name":"Truchet wave","username":"TheRomanOne","description":"Marching Truchet attempt\nThanks to BugWings - The Art of Code\nhttps://www.youtube.com/watch?v=2R7h76GoIJM","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["truchetwave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPS 0.01\n#define MAX_DIST 1000.\n\n// Big thanks to BigWings!!!\n\nmat2x2 rot(float ang)\n{\n    ang *= 3.141592654/180.;\n \tfloat c = cos(ang),\n          s = sin(ang);\n    \n    return mat2x2(c, s, -s, c);\n}\n\nfloat hash21(vec2 p)\n{\n\tp = fract(p*vec2(234.34, 435.345));\n    p += dot(p, p+34.23);\n    return fract(p.x*p.y);\n}\n\nfloat getMaze(vec2 uv, float width)\n{\n    uv *= rot(iTime*10.);\n    //uv *= 5.;\n\tuv.y += 2.*iTime;\n\n    if(hash21(floor(uv)) < .5)\n       uv *= rot(90.);\n       \n    vec2 fv = fract(uv), rfv = fract(-uv);\n    float lfv = length(fv), lrfv = length(rfv);\n    \n    if(lfv < .5 + width && lfv > .5 - width ||\n       lrfv < .5 + width && lrfv > .5 - width)\n        return 1.;   \n    return 0.;\n}\n\nfloat map(vec3 p)\n{\n \tfloat pl = p.y + 1. - getMaze(p.xz, .05)/5.;   \n    return pl + sin(p.x)*cos(p.z)/2.;\n}\n\nvec3 getNormal(vec3 p)\n{\n \treturn normalize(vec3(\n        map(p + vec3(EPS, 0, 0)) - map(p - vec3(EPS, 0, 0)),\n        map(p + vec3(0, EPS, 0)) - map(p - vec3(0, EPS, 0)),\n        map(p + vec3(0, 0, EPS)) - map(p - vec3(0, 0, EPS))\n        ));\n}\n\nfloat lighting(vec3 p)\n{\n    vec3 normal = getNormal(p);\n    \n    vec3 light = normalize(vec3(1, 2, -1));\n    \n    //light.yz *= rot(iMouse.y/2.);\n    light.xz *= rot(iMouse.x/2.);\n    \n    float c = max(0.2, dot(normal, light));\n    \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 ro = vec3(0, 5, -10);\n    vec3 ta = vec3(0);\n    vec3 fw = normalize(ta - ro);\n    vec3 ri = normalize(vec3(-fw.z, 0, fw.x));\n\tvec3 up = cross(ri, fw);\n    \n    float FOV = .57;\n    vec3 rd = normalize(mat3x3(ri, up, fw) * vec3(FOV * uv, 1.));\n        \n    vec3 col;\n    \n    float d, dst;\n    vec3 ray;\n    for(int i = 0; i < 256; i++)\n    {\n        ray = ro + rd * d;\n     \tdst = map(ray);\n        if(dst < EPS || d > MAX_DIST)\n            break;\n        d += dst * .1;\n    }\n    \n    if(d < MAX_DIST)\n    \tcol = vec3(lighting(ray));\n    \n\t\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}