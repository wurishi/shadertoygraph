{"ver":"0.1","info":{"id":"432yzz","date":"1726862725","viewed":68,"name":"Velvet Rings","username":"thedarkbunny","description":"Messing with glow effects and Catmull-Rom splines.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["glow","practice","hanoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_STEPS = 64;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 1e-6;\n\n\nconst vec3 d1[60] = vec3[60](vec3(0,1,0.2), vec3(0.034899496702501,0.999390827019096,0.2), vec3(0.898794046299167,0.438371146789077,0.6), vec3(0.809016994374947,-0.587785252292473,-1), vec3(0.788010753606722,-0.615661475325658,-1), vec3(0.766044443118978,-0.642787609686539,-1), vec3(0.743144825477394,-0.669130606358858,-1), vec3(0.719339800338651,-0.694658370458997,-1), vec3(0.694658370458997,-0.719339800338651,-1), vec3(0.669130606358858,-0.743144825477394,-1), vec3(-0.342020143325669,-0.939692620785908,0.6), vec3(-0.99026806874157,-0.139173100960066,-0.6), vec3(-0.994521895368273,-0.104528463267653,-0.6), vec3(-0.997564050259824,-0.0697564737441256,-0.6), vec3(-0.999390827019096,-0.0348994967025008,-0.6), vec3(-1,-1.83772268236293E-16,-0.6), vec3(-0.999390827019096,0.0348994967025004,-0.6), vec3(-0.997564050259824,0.0697564737441252,-0.6), vec3(-0.406736643075801,0.913545457642601,0.6), vec3(0.615661475325658,0.788010753606722,-0.6), vec3(0.642787609686539,0.766044443118978,-0.6), vec3(0.669130606358858,0.743144825477394,-0.6), vec3(0.694658370458997,0.719339800338651,-0.6), vec3(0.719339800338651,0.694658370458997,-0.6), vec3(0.743144825477394,0.669130606358858,-0.6), vec3(0.766044443118978,0.642787609686539,-0.6), vec3(0.927183854566787,-0.374606593415912,0.6), vec3(0.104528463267654,-0.994521895368273,-0.2), vec3(0.0697564737441251,-0.997564050259824,-0.2), vec3(0.0348994967025011,-0.999390827019096,-0.2), vec3(1.22514845490862E-16,-1,-0.2), vec3(-0.0348994967025009,-0.999390827019096,-0.2), vec3(-0.0697564737441248,-0.997564050259824,-0.2), vec3(-0.104528463267653,-0.994521895368273,-0.2), vec3(-0.927183854566787,-0.374606593415913,0.6), vec3(-0.766044443118978,0.642787609686539,-0.6), vec3(-0.743144825477394,0.669130606358858,-0.6), vec3(-0.719339800338651,0.694658370458997,-0.6), vec3(-0.694658370458998,0.719339800338651,-0.6), vec3(-0.669130606358859,0.743144825477394,-0.6), vec3(-0.64278760968654,0.766044443118978,-0.6), vec3(-0.615661475325658,0.788010753606722,-0.6), vec3(0.4067366430758,0.913545457642601,0.6), vec3(0.997564050259824,0.0697564737441252,-0.6), vec3(0.999390827019096,0.0348994967025011,-0.6), vec3(1,6.1257422745431E-17,-0.6), vec3(0.999390827019096,-0.0348994967025012,-0.6), vec3(0.997564050259824,-0.0697564737441253,-0.6), vec3(0.994521895368273,-0.104528463267653,-0.6), vec3(0.99026806874157,-0.139173100960065,-0.6), vec3(0.342020143325668,-0.939692620785908,0.6), vec3(-0.669130606358858,-0.743144825477394,-1), vec3(-0.694658370458997,-0.719339800338651,-1), vec3(-0.719339800338651,-0.694658370458998,-1), vec3(-0.743144825477394,-0.669130606358858,-1), vec3(-0.766044443118978,-0.642787609686539,-1), vec3(-0.788010753606722,-0.615661475325658,-1), vec3(-0.809016994374947,-0.587785252292473,-1), vec3(-0.898794046299167,0.438371146789077,0.6), vec3(-0.0348994967025008,0.999390827019096,0.2));\nconst vec3 d2[60] = vec3[60](vec3(0,1,-0.2), vec3(0.034899496702501,0.999390827019096,-0.2), vec3(0.0697564737441253,0.997564050259824,-0.2), vec3(0.104528463267653,0.994521895368273,-0.2), vec3(0.139173100960065,0.99026806874157,-0.2), vec3(0.17364817766693,0.984807753012208,-0.2), vec3(-0.743144825477394,0.669130606358858,0.6), vec3(-0.961261695938319,-0.275637355816999,-1), vec3(-0.970295726275996,-0.241921895599668,-1), vec3(-0.978147600733806,-0.20791169081776,-1), vec3(-0.984807753012208,-0.17364817766693,-1), vec3(-0.99026806874157,-0.139173100960066,-1), vec3(-0.994521895368273,-0.104528463267653,-1), vec3(-0.997564050259824,-0.0697564737441256,-1), vec3(-0.999390827019096,-0.0348994967025008,-1), vec3(-1,-1.83772268236293E-16,-1), vec3(-0.999390827019096,0.0348994967025004,-1), vec3(-0.997564050259824,0.0697564737441252,-1), vec3(-0.994521895368273,0.104528463267653,-1), vec3(-0.99026806874157,0.139173100960065,-1), vec3(-0.984807753012208,0.17364817766693,-1), vec3(-0.978147600733806,0.207911690817759,-1), vec3(-0.694658370458997,-0.719339800338651,0.6), vec3(0.241921895599668,-0.970295726275996,-0.6), vec3(0.20791169081776,-0.978147600733806,-0.6), vec3(0.17364817766693,-0.984807753012208,-0.6), vec3(0.139173100960065,-0.99026806874157,-0.6), vec3(0.104528463267654,-0.994521895368273,-0.6), vec3(0.0697564737441251,-0.997564050259824,-0.6), vec3(0.0348994967025011,-0.999390827019096,-0.6), vec3(1.22514845490862E-16,-1,-0.6), vec3(-0.0348994967025009,-0.999390827019096,-0.6), vec3(-0.0697564737441248,-0.997564050259824,-0.6), vec3(-0.104528463267653,-0.994521895368273,-0.6), vec3(-0.139173100960066,-0.99026806874157,-0.6), vec3(-0.17364817766693,-0.984807753012208,-0.6), vec3(-0.207911690817759,-0.978147600733806,-0.6), vec3(-0.241921895599668,-0.970295726275996,-0.6), vec3(0.694658370458997,-0.719339800338651,0.6), vec3(0.978147600733806,0.207911690817759,-1), vec3(0.984807753012208,0.17364817766693,-1), vec3(0.99026806874157,0.139173100960065,-1), vec3(0.994521895368273,0.104528463267654,-1), vec3(0.997564050259824,0.0697564737441252,-1), vec3(0.999390827019096,0.0348994967025011,-1), vec3(1,6.1257422745431E-17,-1), vec3(0.999390827019096,-0.0348994967025012,-1), vec3(0.997564050259824,-0.0697564737441253,-1), vec3(0.994521895368273,-0.104528463267653,-1), vec3(0.99026806874157,-0.139173100960065,-1), vec3(0.984807753012208,-0.17364817766693,-1), vec3(0.978147600733806,-0.207911690817759,-1), vec3(0.970295726275996,-0.241921895599668,-1), vec3(0.961261695938319,-0.275637355816999,-1), vec3(0.743144825477394,0.669130606358859,0.6), vec3(-0.17364817766693,0.984807753012208,-0.2), vec3(-0.139173100960065,0.99026806874157,-0.2), vec3(-0.104528463267653,0.994521895368273,-0.2), vec3(-0.0697564737441256,0.997564050259824,-0.2), vec3(-0.0348994967025008,0.999390827019096,-0.2));\nconst vec3 d3[60] = vec3[60](vec3(0,1,-0.6), vec3(0.034899496702501,0.999390827019096,-0.6), vec3(0.0697564737441253,0.997564050259824,-0.6), vec3(0.104528463267653,0.994521895368273,-0.6), vec3(0.139173100960065,0.99026806874157,-0.6), vec3(0.17364817766693,0.984807753012208,-0.6), vec3(0.207911690817759,0.978147600733806,-0.6), vec3(0.241921895599668,0.970295726275996,-0.6), vec3(0.275637355816999,0.961261695938319,-0.6), vec3(0.309016994374947,0.951056516295154,-0.6), vec3(0.342020143325669,0.939692620785908,-0.6), vec3(0.374606593415912,0.927183854566787,-0.6), vec3(0.4067366430758,0.913545457642601,-0.6), vec3(0.438371146789077,0.898794046299167,-0.6), vec3(0.999390827019096,0.0348994967025009,0.6), vec3(0.5,-0.866025403784439,-1), vec3(0.469471562785891,-0.882947592858927,-1), vec3(0.438371146789078,-0.898794046299167,-1), vec3(0.4067366430758,-0.913545457642601,-1), vec3(0.374606593415912,-0.927183854566787,-1), vec3(0.342020143325669,-0.939692620785908,-1), vec3(0.309016994374948,-0.951056516295154,-1), vec3(0.275637355816999,-0.961261695938319,-1), vec3(0.241921895599668,-0.970295726275996,-1), vec3(0.20791169081776,-0.978147600733806,-1), vec3(0.17364817766693,-0.984807753012208,-1), vec3(0.139173100960065,-0.99026806874157,-1), vec3(0.104528463267654,-0.994521895368273,-1), vec3(0.0697564737441251,-0.997564050259824,-1), vec3(0.0348994967025011,-0.999390827019096,-1), vec3(1.22514845490862E-16,-1,-1), vec3(-0.0348994967025009,-0.999390827019096,-1), vec3(-0.0697564737441248,-0.997564050259824,-1), vec3(-0.104528463267653,-0.994521895368273,-1), vec3(-0.139173100960066,-0.99026806874157,-1), vec3(-0.17364817766693,-0.984807753012208,-1), vec3(-0.207911690817759,-0.978147600733806,-1), vec3(-0.241921895599668,-0.970295726275996,-1), vec3(-0.275637355816999,-0.961261695938319,-1), vec3(-0.309016994374947,-0.951056516295154,-1), vec3(-0.342020143325668,-0.939692620785909,-1), vec3(-0.374606593415912,-0.927183854566787,-1), vec3(-0.4067366430758,-0.913545457642601,-1), vec3(-0.438371146789078,-0.898794046299167,-1), vec3(-0.469471562785891,-0.882947592858927,-1), vec3(-0.5,-0.866025403784439,-1), vec3(-0.999390827019096,0.0348994967025004,0.6), vec3(-0.438371146789078,0.898794046299167,-0.6), vec3(-0.406736643075801,0.913545457642601,-0.6), vec3(-0.374606593415913,0.927183854566787,-0.6), vec3(-0.342020143325669,0.939692620785908,-0.6), vec3(-0.309016994374948,0.951056516295154,-0.6), vec3(-0.275637355816999,0.961261695938319,-0.6), vec3(-0.241921895599668,0.970295726275996,-0.6), vec3(-0.20791169081776,0.978147600733806,-0.6), vec3(-0.17364817766693,0.984807753012208,-0.6), vec3(-0.139173100960065,0.99026806874157,-0.6), vec3(-0.104528463267653,0.994521895368273,-0.6), vec3(-0.0697564737441256,0.997564050259824,-0.6), vec3(-0.0348994967025008,0.999390827019096,-0.6));\nconst vec3 d4[60] = vec3[60](vec3(0,1,-1), vec3(0.034899496702501,0.999390827019096,-1), vec3(0.0697564737441253,0.997564050259824,-1), vec3(0.104528463267653,0.994521895368273,-1), vec3(0.139173100960065,0.99026806874157,-1), vec3(0.17364817766693,0.984807753012208,-1), vec3(0.207911690817759,0.978147600733806,-1), vec3(0.241921895599668,0.970295726275996,-1), vec3(0.275637355816999,0.961261695938319,-1), vec3(0.309016994374947,0.951056516295154,-1), vec3(0.342020143325669,0.939692620785908,-1), vec3(0.374606593415912,0.927183854566787,-1), vec3(0.4067366430758,0.913545457642601,-1), vec3(0.438371146789077,0.898794046299167,-1), vec3(0.469471562785891,0.882947592858927,-1), vec3(0.5,0.866025403784439,-1), vec3(0.529919264233205,0.848048096156426,-1), vec3(0.559192903470747,0.829037572555042,-1), vec3(0.587785252292473,0.809016994374947,-1), vec3(0.615661475325658,0.788010753606722,-1), vec3(0.642787609686539,0.766044443118978,-1), vec3(0.669130606358858,0.743144825477394,-1), vec3(0.694658370458997,0.719339800338651,-1), vec3(0.719339800338651,0.694658370458997,-1), vec3(0.743144825477394,0.669130606358858,-1), vec3(0.766044443118978,0.642787609686539,-1), vec3(0.788010753606722,0.615661475325658,-1), vec3(0.809016994374947,0.587785252292473,-1), vec3(0.829037572555042,0.559192903470747,-1), vec3(0.848048096156426,0.529919264233205,-1), vec3(-2.45029690981724E-16,1,0.6), vec3(-0.848048096156426,0.529919264233205,-1), vec3(-0.829037572555042,0.559192903470747,-1), vec3(-0.809016994374948,0.587785252292473,-1), vec3(-0.788010753606722,0.615661475325658,-1), vec3(-0.766044443118978,0.642787609686539,-1), vec3(-0.743144825477394,0.669130606358858,-1), vec3(-0.719339800338651,0.694658370458997,-1), vec3(-0.694658370458998,0.719339800338651,-1), vec3(-0.669130606358859,0.743144825477394,-1), vec3(-0.64278760968654,0.766044443118978,-1), vec3(-0.615661475325658,0.788010753606722,-1), vec3(-0.587785252292473,0.809016994374947,-1), vec3(-0.559192903470747,0.829037572555041,-1), vec3(-0.529919264233205,0.848048096156426,-1), vec3(-0.5,0.866025403784438,-1), vec3(-0.469471562785892,0.882947592858927,-1), vec3(-0.438371146789078,0.898794046299167,-1), vec3(-0.406736643075801,0.913545457642601,-1), vec3(-0.374606593415913,0.927183854566787,-1), vec3(-0.342020143325669,0.939692620785908,-1), vec3(-0.309016994374948,0.951056516295154,-1), vec3(-0.275637355816999,0.961261695938319,-1), vec3(-0.241921895599668,0.970295726275996,-1), vec3(-0.20791169081776,0.978147600733806,-1), vec3(-0.17364817766693,0.984807753012208,-1), vec3(-0.139173100960065,0.99026806874157,-1), vec3(-0.104528463267653,0.994521895368273,-1), vec3(-0.0697564737441256,0.997564050259824,-1), vec3(-0.0348994967025008,0.999390827019096,-1));\nconst vec3 dh[60] = vec3[60](vec3(0,1,-1.6), vec3(0.034899496702501,0.999390827019096,0.6), vec3(0.898794046299167,0.438371146789077,1), vec3(0.809016994374947,-0.587785252292473,-0.6), vec3(0.927183854566787,0.374606593415912,1), vec3(0.17364817766693,0.984807753012208,0.2), vec3(-0.743144825477394,0.669130606358858,1), vec3(-0.961261695938319,-0.275637355816999,-0.6), vec3(-0.275637355816999,-0.961261695938319,1), vec3(0.669130606358858,-0.743144825477394,-0.6), vec3(-0.342020143325669,-0.939692620785908,1), vec3(-0.99026806874157,-0.139173100960066,-0.2), vec3(-0.587785252292473,0.809016994374947,1), vec3(0.438371146789077,0.898794046299167,-0.2), vec3(0.999390827019096,0.0348994967025009,1), vec3(0.5,-0.866025403784439,-0.6), vec3(-0.529919264233205,-0.848048096156426,1), vec3(-0.997564050259824,0.0697564737441252,-0.2), vec3(-0.406736643075801,0.913545457642601,1), vec3(0.615661475325658,0.788010753606722,-0.2), vec3(-0.342020143325669,0.939692620785908,1), vec3(-0.978147600733806,0.207911690817759,-0.6), vec3(-0.694658370458997,-0.719339800338651,1), vec3(0.241921895599668,-0.970295726275996,-0.2), vec3(0.951056516295154,-0.309016994374947,1), vec3(0.766044443118978,0.642787609686539,-0.2), vec3(0.927183854566787,-0.374606593415912,1), vec3(0.104528463267654,-0.994521895368273,0.2), vec3(0.898794046299167,-0.438371146789078,1), vec3(0.848048096156426,0.529919264233205,-0.6), vec3(-2.45029690981724E-16,1,1), vec3(-0.848048096156426,0.529919264233205,-0.6), vec3(-0.898794046299167,-0.438371146789078,1), vec3(-0.104528463267653,-0.994521895368273,0.2), vec3(-0.927183854566787,-0.374606593415913,1), vec3(-0.766044443118978,0.642787609686539,-0.2), vec3(-0.951056516295154,-0.309016994374948,1), vec3(-0.241921895599668,-0.970295726275996,-0.2), vec3(0.694658370458997,-0.719339800338651,1), vec3(0.978147600733806,0.207911690817759,-0.6), vec3(0.342020143325669,0.939692620785908,1), vec3(-0.615661475325658,0.788010753606722,-0.2), vec3(0.4067366430758,0.913545457642601,1), vec3(0.997564050259824,0.0697564737441252,-0.2), vec3(0.529919264233205,-0.848048096156426,1), vec3(-0.5,-0.866025403784439,-0.6), vec3(-0.999390827019096,0.0348994967025004,1), vec3(-0.438371146789078,0.898794046299167,-0.2), vec3(0.587785252292472,0.809016994374948,1), vec3(0.99026806874157,-0.139173100960065,-0.2), vec3(0.342020143325668,-0.939692620785908,1), vec3(-0.669130606358858,-0.743144825477394,-0.6), vec3(0.275637355816999,-0.961261695938319,1), vec3(0.961261695938319,-0.275637355816999,-0.6), vec3(0.743144825477394,0.669130606358859,1), vec3(-0.17364817766693,0.984807753012208,0.2), vec3(-0.927183854566787,0.374606593415913,1), vec3(-0.809016994374947,-0.587785252292473,-0.6), vec3(-0.898794046299167,0.438371146789077,1), vec3(-0.0348994967025008,0.999390827019096,0.6));\n\nvec3 crSpline(in vec3 a, in vec3 b, in vec3 c, in vec3 d, in float x){\n    vec4 mult = vec4(0.,1.,0.,0.)+x*(vec4(-0.5,0.,0.5,0.)+x*(vec4(1.,-2.5,2.,-0.5)+x*vec4(-0.5,1.5,-1.5,0.5)));\n    return a*mult.x+b*mult.y+c*mult.z+d*mult.w;\n}\n\n\n\n//https://www.shadertoy.com/view/3s3GDn\nfloat getGlow(float dist, float radius, float intensity){\n\treturn pow(radius / max(dist, 1e-6), intensity);\t\n}\n\n\n//----------------------------- Camera ------------------------------\n\nvec3 rayDirection(float fieldOfView, vec2 fragCoord) {\n    vec2 xy = fragCoord - iResolution.xy / 2.0;\n    float z = (0.5 * iResolution.y) / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n//https://www.geertarien.com/blog/2017/07/30/breakdown-of-the-lookAt-function-in-OpenGL/\nmat3 lookAt(vec3 camera, vec3 targetDir, vec3 up){\n    vec3 zaxis = normalize(targetDir);    \n    vec3 xaxis = normalize(cross(zaxis, up));\n    vec3 yaxis = cross(xaxis, zaxis);\n\n    return mat3(xaxis, yaxis, -zaxis);\n}\n\n//https://iquilezles.org/articles/distfunctions\nfloat torusSDF( vec3 p, vec2 t ){\n  vec2 q = vec2(length(p.xz) - t.x, p.y);\n  return length(q) - t.y;\n}\nfloat sphereSDF( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat d1sdf(vec3 p, float t){\n    int node = int(t)%60;\n    float ft = fract(t);\n    vec3 d1p = crSpline(d1[node],d1[(node+1)%60],d1[(node+2)%60],d1[(node+3)%60], ft ).xzy * 0.5;\n    return torusSDF(p - d1p, vec2(0.15235625, 0.08820625));\n}\n\nfloat d2sdf(vec3 p, float t){\n    int node = int(t)%60;\n    float ft = fract(t);\n    vec3 d2p = crSpline(d2[node],d2[(node+1)%60],d2[(node+2)%60],d2[(node+3)%60], ft ).xzy * 0.5;\n    return torusSDF(p - d2p, vec2(0.21650625, 0.08820625));\n}\n\nfloat d3sdf(vec3 p, float t){\n    int node = int(t)%60;\n    float ft = fract(t);\n    vec3 d3p = crSpline(d3[node],d3[(node+1)%60],d3[(node+2)%60],d3[(node+3)%60], ft ).xzy * 0.5;\n    return torusSDF(p - d3p, vec2(0.28065625, 0.08820625));\n}\n\nfloat d4sdf(vec3 p, float t){\n    int node = int(t)%60;\n    float ft = fract(t);\n    vec3 d4p = crSpline(d4[node],d4[(node+1)%60],d4[(node+2)%60],d4[(node+3)%60], ft ).xzy * 0.5;\n    return torusSDF(p - d4p, vec2(0.34480625, 0.08820625));\n}\n\nfloat dhsdf(vec3 p, float t){\n    int node = int(t)%60;\n    float ft = fract(t);\n    vec3 dhp = crSpline(dh[node],dh[(node+1)%60],dh[(node+2)%60],dh[(node+3)%60], ft ).xzy * 0.5;\n    //return sphereSDF(p - dhp, 0.116548056);\n    return sphereSDF(p - dhp, 0.116548056*smoothstep(1.,0.9781476,cos( (iTime+0.5) * 0.20943951 ) )  );\n}\n\n\nfloat getSDF(vec3 position) {\n    \n    float res = dhsdf(position,iTime*2.);\n    \n    res = min(res,d1sdf(position,iTime*2.));\n    res = min(res,d2sdf(position,iTime*2.));\n    res = min(res,d3sdf(position,iTime*2.));\n    res = min(res,d4sdf(position,iTime*2.));\n    \n    return res;\n    \n    //return torusSDF(vec3(0.), vec2(1.0, 0.01));\n\n}\n\n\n// https://www.shadertoy.com/view/7stGWj\nfloat distanceToScene(vec3 cameraPos, vec3 rayDir, float start, float end, inout vec3 glow) {\n\t\n    // Start at a predefined distance from the camera in the ray direction\n    float depth = start;\n    \n    // Variable that tracks the distance to the scene at the current ray endpoint\n    float dist;\n    \n    vec3 rph;\n    \n    // For a set number of steps\n    for (int i = 0; i < MAX_STEPS; i++) {\n        \n        rph = cameraPos + depth * rayDir;\n        \n        // Get the SDF value at the ray endpoint, giving the maximum \n        // safe distance we can travel in any direction without hitting a surface\n        dist = getSDF(rph);\n        \n        // Calculate the glow at the current distance using the distance based glow function\n        // Accumulate this value over the whole view ray\n        // The smaller the step size, the smoother the final result\n        glow += getGlow(dhsdf(rph,iTime*2.), 1e-3, 0.55) * vec3(0.42187, 0.42188, 0.42188);\n        glow += getGlow(d1sdf(rph,iTime*2.), 1e-3, 0.55) * vec3(0.7527, 0.30726, 0.33037);\n        glow += getGlow(d2sdf(rph,iTime*2.), 1e-3, 0.55) * vec3(0.4685, 0.44226, 0.15231);\n        glow += getGlow(d3sdf(rph,iTime*2.), 1e-3, 0.55) * vec3(0.11945, 0.52672, 0.52401);\n        glow += getGlow(d4sdf(rph,iTime*2.), 1e-3, 0.55) * vec3(0.38939, 0.38244, 0.78471);\n        \n        \n        // If the distance is small enough, we have hit a surface\n        // Return the depth that the ray travelled through the scene\n        if(dist < EPSILON){\n            return depth;\n        }\n        \n        // Else, march the ray by the sdf value\n        depth += dist;\n        \n        // Test if we have left the scene\n        if(depth >= end){\n            return end;\n        }\n    }\n    \n    // Return max value if we hit nothing but remain in the scene after max steps\n    return end;\n}\n\nvec3 snorm(vec3 p){\n    return normalize(vec3(\n        ( getSDF(vec3(p.x + EPSILON, p.y, p.z)) - getSDF(vec3(p.x - EPSILON, p.y, p.z)) ) ,\n        ( getSDF(vec3(p.x, p.y + EPSILON, p.z)) - getSDF(vec3(p.x, p.y - EPSILON, p.z)) ) ,\n        ( getSDF(vec3(p.x, p.y, p.z  + EPSILON)) - getSDF(vec3(p.x, p.y, p.z - EPSILON) ) )\n    ));\n\n\n\n}\n\n// https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\nvec3 ACESFilm(vec3 x){\n    return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), 0.0, 1.0);\n}\n\nvoid mainImageBase( out vec4 fragColor, in vec2 fragCoord ){\n\n    // Get the default direction of the ray (along the negative Z direction)\n    vec3 rayDir = rayDirection(60.0, fragCoord);\n    \n    //----------------- Define a camera -----------------\n\n    vec3 cameraPos = vec3(0., 1., 2.);\n    \n    vec3 target = -normalize(cameraPos);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    \n    // Get the view matrix from the camera orientation\n    mat3 viewMatrix = lookAt(cameraPos, target, up);\n    \n    //---------------------------------------------------\n\n    // Transform the ray to point in the correct direction\n    rayDir = viewMatrix * rayDir;\n\n    // Initialize glow to 0\n    //float glow = 0.0;\n    vec3 col = vec3(0.);\n    \n    // Find the distance to where the ray stops, pass in the glow variable to be accumulated\n    float dist = distanceToScene(cameraPos, rayDir, MIN_DIST, MAX_DIST, col);\n    \n    // Dist can now be used to render surfaces in the scene. We will only render the glow\n  \n    //vec3 glowColour = vec3(0.2, 0.5, 1.0);\n    \n    // Glow now holds the value from the ray marching\n    //vec3 col = glow * glowColour;\n    \n    //vec3 col = glow\n    \n    col *= 0.1;\n    \n    \n    if(dist < MAX_DIST){\n        vec3 hitDir = snorm(rayDir*dist+cameraPos);\n        //col *= max(0.,0.001 - dot(rayDir,hitDir));\n           col *= vec3(pow(1.-abs( dot(rayDir,hitDir) ),5.) );\n    \n        //col *= 0.;\n    }\n\n    // Tonemapping\n    col = ACESFilm(col);\n\n    // Gamma\n    col = pow(col, vec3(0.4545));\n        \n    fragColor = vec4(col, 1.0);\n}\n\n\n// === easy adaptive sampling. === https://shadertoyunofficial.wordpress.com/2021/03/09/advanced-tricks/\n//                           more: https://www.shadertoy.com/results?query=easy+adaptive+sampling\nvoid mainImage(out vec4 O, vec2 U) {\n    mainImageBase(O,U);\n    if ( fwidth(length(O)) > .01 ) {  // difference threshold between neighbor pixels\n        vec4 o;\n        for (int k=0; k < 9; k+= k==3?2:1 )\n          { mainImageBase(o,U+vec2(k%3-1,k/3-1)/3.); O += o; }\n        O /= 9.;\n      //O.r++;                        // uncomment to see where the oversampling occurs\n    }\n}\n","name":"Image","description":"","type":"image"}]}