{"ver":"0.1","info":{"id":"NlXfR4","date":"1650563648","viewed":192,"name":"Color Automata 2","username":"SnoopethDuckDuck","description":"Press r to reset\n\nPrimary colors don't look so great but the behaviours are kind of interesting","likes":6,"published":3,"flags":48,"usePreview":0,"tags":["feedback","cellularautomata"],"hasliked":0,"parentid":"7tjyzc","parentname":"Color Automata"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = texelFetch( iChannel0, ivec2(1. * fragCoord), 0 ).rgb;\n    col += 0.5;\n    col *= 2.5 * col * col;\n    vec3 e = vec3(0.5);\n    vec3 col2 = pal(0.75 + 0.5 * length(col), col,  min(col,1.-col), e, 2.5 * col);\n    vec3 col3 = pal(-0.25 + 0.5 * length(col), col, min(col,1.-col), e, 0.6 * vec3(1));\n    col = 1. * mix(col, col2, step(0. * iResolution.x, fragCoord.x));\n    //col = mix(col, col3, step(fragCoord.x, 0.5 * iResolution.x));\n    \n    fragColor.rgb = vec3(col);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define KEYBOARD iChannel1\n#define KEY_RESET 82\n\n\nvec3 Cell( in ivec2 p )\n{\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n   // return (texelFetch(iChannel0, p, 0 ).x > 0.5 ) ? 1 : 0;\n   return texelFetch(iChannel0, p, 0 ).rgb;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2( fragCoord );\n    \n    if (iFrame == 0 || key_down(KEY_RESET)) {\n        vec2 f = fragCoord + 0.01 * iTime; \n        float o = 0.01;\n        vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n        float s = step(abs(length(uv)-0.), 0.1);\n        fragColor.rgb = (vec3(h21(f-o), h21(f), h21(f+o)) - 0.5);\n        float h = h21(f + 113.);\n        if (h < 0.995)\n            fragColor.rgb = vec3(0);\n        //fragColor *= s;\n        return;\n    }\n    \n    // center cell\n    vec3 e = Cell(px); \n\n    // neighbour cells\n    vec3 t = Cell(px + ivec2(0,-1));\n    vec3 b = Cell(px + ivec2(0,1));\n    vec3 l = Cell(px + ivec2(-1,0));\n    vec3 r = Cell(px + ivec2(1,0));   \n\n    vec3 h = 0.5 * (l+r);\n    vec3 v = 0.5 * (t + b);  \n    vec3 k = max(h,v); // \"average\" of neighbours\n   // vec3 k = 0.5 *(h+v);\n    k = 0.25 * (l + r + t + b);\n    \n    // difference between center and average\n    vec3 j = abs(e - k);\n\n    if (dot(e,k) < 1.) e = 1.12 * j + 0.9 * k;\n   // e -= 0.0025;\n    //if (dot(j, k) < 0.1) e += 0.001 * (k.yzx - 0.);\n    \n    e = clamp(e, 0., 1.);\n\tfragColor = vec4( e, 0.0 );\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Flicker reduction.\n// This CA tends to produce structures that flicker between two states.\n// Code here copies CA output on odd frames and stays unchanged on even.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    if (iFrame % 2 == 1)\n        fragColor.rgb = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;\n    else\n        fragColor.rgb = texelFetch(iChannel1, ivec2(fragCoord), 0).rgb;\n}","name":"Buffer B","description":"","type":"buffer"}]}