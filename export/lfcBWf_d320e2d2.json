{"ver":"0.1","info":{"id":"lfcBWf","date":"1733556145","viewed":91,"name":"3D Koch curve","username":"vanshika","description":"turning a koch curve into 3d\nArt of code tutorial https://www.youtube.com/watch?v=__dSLc7-Cpo","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","koch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec2 N(float angle){\n    return vec2(sin(angle), cos(angle));\n}\n\nvec2 Koch(vec2 uv){\n    uv *= 1.25;\n    uv.x = abs(uv.x);\n    uv.y += tan((5./6.)*3.1415)*.5;\n    \n    vec2 n = N((5./6.)*3.1415); \n    float d = dot(uv-vec2(.5,0),n);\n    uv -= n*max(0.,d)*2.;\n        \n    n = N((2./3.)*3.1415);\n    float scale=1.;\n    uv.x+=.5;\n    for (int i=0; i < 4; i++) {\n        uv *=3.; \n        scale*=3.;\n        uv.x -= 1.5; \n    \n        uv.x = abs(uv.x);\n        uv.x -= .5;\n        d = dot(uv, n);\n        uv -= min(0.,dot(uv,n))*n*2.; \n    }\n    uv/=scale;\n    return uv;\n}\n\nfloat GetDist(vec3 p) {\n    float d = sdBox(p, vec3(1));\n    \n    vec2 xz = Koch(vec2(length(p.xz), p.y));\n    vec2 yz = Koch(vec2(length(p.yz), p.x));\n    vec2 xy = Koch(vec2(length(p.xy), p.z));\n    d = max(xy.y, max(yz.y, xz.y));\n    d = mix(d, length(p)-.5, .8-sin(iTime)*.5);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 3.);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n        \n        col = n*.5+.5;\n        col *= texture(iChannel0, r).rgb;\n    }\n    \n    col = pow(col, vec3(.45));\t\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}