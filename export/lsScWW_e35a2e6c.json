{"ver":"0.1","info":{"id":"lsScWW","date":"1492056206","viewed":121,"name":"3 Object.Box,Floor,Sphere","username":"sw","description":"Light changes in X direction","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float sdBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\nfloat sdFloor(vec3 p){\n    return dot(p, vec3(0.0, 1.0, 0.0)) + 1.0;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdAll(vec3 p)\n{\n    vec3 boxPos=vec3(5,0,10);\n    vec3 spherePos=vec3(0,0,3);\n\n    float d1 = sdBox(p+boxPos,vec3(1,1,1));\n    float d2 = sdFloor(p);\n    float d3 = sdSphere(p+spherePos,1.0);\n    return min(min(d1,d2),d3);\n    //return d3;\n    //return d1;\n}\n\nvec3 getNormal(vec3 p){\n    float d = 0.0001;\n    return normalize(vec3(\n        sdAll(p + vec3(  d, 0.0, 0.0)) - sdAll(p + vec3( -d, 0.0, 0.0)),\n        sdAll(p + vec3(0.0,   d, 0.0)) - sdAll(p + vec3(0.0,  -d, 0.0)),\n        sdAll(p + vec3(0.0, 0.0,   d)) - sdAll(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // fragment position\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    // light\n    vec2 mouse=iMouse.xy/iResolution.xy;\n\tvec3 lightDir = normalize(vec3(mouse.x, mouse.y, 0.577));\n    \n    // camera\n    vec3 cPos = vec3(0.0, 0.0,  0.0);\n    vec3 cDir = vec3(0.0,  0.0, -1.0);\n    vec3 cUp  = vec3(0.0,  1.0,  0.0);\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 1.0; \n    \n    // ray\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n    \n    // marching loop\n    float distance = 0.0;\n    float rLen = 0.0;     \n    vec3  rPos = cPos; \n    for(int i = 0; i < 256; i++){\n        distance = sdAll(rPos);\n        rLen += distance;\n        rPos = cPos + ray * rLen;\n    }\n    \n    // hit check\n    if(abs(distance) < 0.001){\n        vec3 SurfaceColor=vec3(0.2,0.4,0.9);\n        \n        float offsetX=sin(iTime);\n\t\tvec3 lightDir = vec3( 0, 0.57, 0.57);\n        lightDir.x=offsetX;\n        lightDir=normalize(lightDir);\n        \n        float lighing=dot( lightDir, getNormal(rPos)); \n        fragColor.xyz = SurfaceColor * lighing;\n    }else{\n        fragColor = vec4(vec3(0.0), 1.0);\n    }\n\n}","name":"Image","description":"","type":"image"}]}