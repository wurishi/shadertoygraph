{"ver":"0.1","info":{"id":"3tyGzK","date":"1642369026","viewed":113,"name":"Raymarched torus ","username":"hZzAaa","description":"Followed tutorial by Art Of Code","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","torus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tfloat t = iTime*.2;\n    \n    vec3 ro = vec3(0, 0, -1);\n    vec3 lookat = vec3(0);\n    float zoom = .5;\n    \n    vec3 f = normalize(lookat-ro);\n    vec3 r = normalize(cross(vec3(0,1,0), f));\n    vec3 u = cross(f, r);\n    vec3 c = ro + f * zoom;\n    vec3 i = c + uv.x * r + uv.y * u;\n    vec3 rd = normalize(i-ro);\n                  \n    float dS, dO = 0.;\n    vec3 p;\n    \n    for(int i = 0; i<100; i++)\n    {\n        p = ro + rd * dO;\n        dS = -(length(vec2(length(p.xz)-1., p.y)) - .75);\n        if(dS<.001) break;\n        dO += dS;\n    }\n\n    vec3 col = vec3(0);\n    //col = rd;\n    \n    if (dS<.001)\n    {\n        \n        // Poloidal and toroidal angles: Normalized to integer ranges.\n        float polAng = atan(p.z, p.x)/6.2831;\n        float torAng = atan(p.y, length(p.xz) - 1.)/6.2831; // See distance field.\n\n        // Vertical (on the torus center) and horizontal line patterns.\n        // Linear triangle waves, instead of sin based waves.\n        float linePat = fract((torAng*8. + polAng*24. + t)) - .5;\n        float linePat2 = fract(((torAng*24. - polAng*8.)*8. - t*6.)) - .5;\n        linePat = abs(linePat) - .25;\n        linePat2 = abs(linePat2) - .25;\n\n        // Wave mask, based on the horizontal line pattern.\n        float waves = sin((torAng*24. - polAng*8.)*6.2831/4. - t*12.)*.5 + .5;\n\n        // Masking the horizontal pattern on alternate vertical columns. \n        linePat2 = max(linePat2, linePat);\n\n        // Gradient based smoothing factors for each pattern.\n        float sf = fwidth(linePat);\n        float sf2 = fwidth(linePat2);\n\n        // Vertical stripes.\n        col = mix(vec3(0), vec3(1), 1. - smoothstep(-sf, sf, linePat));\n\n        // Horizontal.\n        vec3 wCol = vec3(.6)*smoothstep(-sf2, sf2, linePat2)*(waves);\n        //vec3 wCol = vec3(1, .2, .6)*smoothstep(-sf2, sf2, linePat2)*(waves);\n        col = mix(col, wCol, 1. - smoothstep(-sf, sf, linePat + .06));\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}