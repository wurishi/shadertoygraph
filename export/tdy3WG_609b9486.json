{"ver":"0.1","info":{"id":"tdy3WG","date":"1570827767","viewed":118,"name":"Moire fluid effect","username":"jstrom2002","description":"playing with the fluid-like motion effects you can get from shifting Moire patterns. this is my first shadertoy.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fbm","fluid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 m2 = mat2(0.8, 0.6, -0.4, 0.8);\nmat3 m3 = mat3(0.00, 0.80, 0.60,\n\t\t-0.80, 0.36, -0.48,\n\t\t-0.60, -0.48, 0.64);\n\nmat3 m3i = mat3(0.00, -0.80, -0.60,\n\t0.80, 0.36, -0.48,\n\t0.60, -0.48, 0.64);\nvec3 noised(vec2 p) {//noise with derivatives\n\tfloat res = 0.;\n\tvec2 dres = vec2(0.);\n\tfloat f = 1.;\n\tmat2 j = m2;\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tp = m2 * p*f + .6;\n\t\tf *= 1.2;\n\t\tfloat a = p.x + sin(2.*p.y);\n\t\tres += sin(a);\n\t\tdres += cos(a)*vec2(1., 2.*cos(2.*p.y))*j;\n\t\tj *= m2 * f;\n\n\t}\n\treturn vec3(res, dres) / 3.;\n}\nvec4 fbmd_8(in vec3 x)\n{\n\tfloat f = 1.92;\n\tfloat s = 0.5;\n\tfloat a = 0.0;\n\tfloat b = 0.5;\n\tvec3  d = vec3(0.0);\n\tmat3  m = mat3(1.0, 0.0, 0.0,\n\t\t0.0, 1.0, 0.0,\n\t\t0.0, 0.0, 1.0);\n\tfor (int i = 0; i < 7; i++)\n\t{\n\t\tvec4 n = vec4(noised(x.xy).xyz,1);\n\t\ta += b * n.x;          // accumulate values\t\t\n\t\td += b * m*n.yzw;      // accumulate derivatives\n\t\tb *= s;\n\t\tx = f * m3*x;\n\t\tm = f * m3i*m;\n\t}\n\treturn vec4(a, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 coord = (-iResolution.xy + 2.0*(fragCoord+1.0)) / iResolution.y;\n\n\t// Set the camera\n\tfloat speed = 21.0;\n\tvec3 direction = normalize(vec3(coord, 1.0));\n\tvec3 origin = vec3(\n        1325.0 + iTime * speed, \n        1225.0 + iTime * speed, \n        1225.0 + iTime * speed\n    );\n\tvec3 forward = -origin;\n\tvec3 up = vec3(sin(iTime * 0.3), 2.0, 0.0);\n\tmat3 rotation;\n\trotation[2] = normalize(forward);\n\trotation[0] = vec3(1, 0, 0);\n\trotation[1] = vec3(0, 1, 0);\n\tdirection = rotation * direction;\n\n\tfloat zoom = 0.3025;\n\tvec3 tempCol;\n\tvec3 temp = noised(origin.xy*direction.xy * zoom);\n\tif (dot(temp, temp) > 1.9) { tempCol += temp; }\n\ttempCol *= fbmd_8(origin*direction * zoom).xzy;\n\ttempCol += 0.7;\n\ttempCol *= vec3(0.1, 0.7, 1.0);\n\tfragColor = vec4(tempCol, 1);\n}","name":"Image","description":"","type":"image"}]}