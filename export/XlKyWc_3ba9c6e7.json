{"ver":"0.1","info":{"id":"XlKyWc","date":"1537981246","viewed":766,"name":"fwidth() artifacts","username":"elenzil","description":"exploring some artifacts with fwidth().\ninspired by discussion at [url]https://www.shadertoy.com/view/ltyyW3[/url].\nleft of red is fwidth(), right of red is dFdy()-based.\nleft of green is naive distance fn's, right of green is delayed distancification. :P","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["aliasing","fwidth","artifacts"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord - (iResolution.xy * 0.5);\n\n    float radius    = iResolution.y * 0.3;\n    float lineWidth = sin(iTime) * 10.0 + 12.0;\n    \n\n    float c = 0.0;\n    \n    // since we're using fWidth(), dFdx() we need to respect the pixel clusters.\n    // hence testing half resolution.\n    if (floor(uv.x / 2.0) < floor(uv.y / 2.0)) {\n        // approach one:\n        // fairly naive.\n\n        float dist;\n        if (sin(iTime * 0.2) > 0.0) {\n            dist     = abs(length(uv) - radius);\n        }\n        else {\n            // more complex function from @fabriceneyret2\n            dist     = abs( cos(10.*atan(uv.y,uv.x)) );\n            vec2 uv2 = uv + 20.*sin(.1*uv.yx);\n            dist     = abs( cos(5.*atan(uv2.y,uv2.x)) );\n        }\n\n\n        float fw;\n        if (uv.x <= -uv.y) {\n            fw = fwidth(dist);\n        }\n        else {\n            fw = length(vec2(dFdx(dist), dFdy(dist)));\n        }\n\n        c = smoothstep(1.0, 0.0, dist / fw / lineWidth);\n\n    }\n    else {\n        // approach two:\n        // avoid taking abs() of values prior to the hardware-supported derivatives.\n        float dist;\n        if (sin(iTime * 0.2) > 0.0) {\n            dist     = length(uv) - radius;\n        }\n        else {\n            // more complex function from @fabriceneyret2\n            dist     = ( cos(10.*atan(uv.y,uv.x)) );\n            vec2 uv2 = uv + 20.*sin(.1*uv.yx);\n            dist     = ( cos(5.*atan(uv2.y,uv2.x)) );\n        }\n\n\n        float fw;\n        if (uv.x <= -uv.y) {\n            fw = fwidth(dist);\n        }\n        else {\n            fw = length(vec2(dFdx(dist), dFdy(dist)));\n        }\n\n        c = smoothstep(1.0, 0.0, abs(dist) / fw / lineWidth);\n    }\n    \n    \n    vec3 col = vec3(c);\n    \n    col.r += smoothstep(2.0, 0.0, abs(uv.x + uv.y));\n\n    col.g += smoothstep(2.0, 0.0, abs(uv.x - uv.y));\n\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}