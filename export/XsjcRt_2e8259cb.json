{"ver":"0.1","info":{"id":"XsjcRt","date":"1493332271","viewed":217,"name":"Chaos Game","username":"chronos","description":"As seen in Numberphile: https://www.youtube.com/watch?v=kbKtFN71Lfs","likes":5,"published":1,"flags":48,"usePreview":0,"tags":["2d","fractal","triangle","random","sierpinski"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Only for coloring vertices,\n// independent from chaos game\nvec2 vertexA = vec2( .1, .1);//\nvec2 vertexB = vec2( .9, .2);//\nvec2 vertexC = vec2( .6, .9);//\n///////////////////////////////\n\nvec4 lookup(vec2 fragCoord, vec2 offset) {\n    vec2 uv = (fragCoord.xy + offset)/ iResolution.xy;\n    return texture(iChannel0, uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 tex = lookup(fragCoord, vec2(0.0));\n    \n    float A = smoothstep(0.01, 0.0, length(uv-vertexA));\n    float B = smoothstep(0.01, 0.0, length(uv-vertexB));\n    float C = smoothstep(0.01, 0.0, length(uv-vertexC));\n    \n\tfragColor = vec4(vec3(A, B, C) + tex.r, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define POINTWIDTH 1.\n\nvec2 vertexA = vec2( .1, .1);\nvec2 vertexB = vec2( .9, .2);\nvec2 vertexC = vec2( .6, .9);\n\n\nvec4 lookup(vec2 fragCoord, vec2 offset) {\n    vec2 uv = (fragCoord + offset)/ iResolution.xy;\n    return texture(iChannel0, uv);\n}\n\n#define HASHSCALE1 .1031\nfloat hash11(float p) // from https://www.shadertoy.com/view/4djSRW\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat drawpoint(vec2 pos, vec2 fragCoord) {\n    return clamp(1.-length(iResolution.xy*pos-fragCoord)/POINTWIDTH, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 previous = lookup(fragCoord, vec2(0.0));\n    \n    float rnd = hash11(iTime);\n    vec2 vertexSelect\n        = vertexA * (1.-step(1./3.,rnd))\n        + vertexB * (1.-step(2./3.,rnd)) * step(1./3., rnd)\n        + vertexC * step(2./3., rnd);\n      \n    vec2 vertex = (previous.yz + vertexSelect) / 2.;\n    float marks = clamp(previous.r+drawpoint(vertex, fragCoord), 0.0, 1.0);\n    \n    const vec2 spacebar = vec2(32.5/256.0,0.5);\n    if(texture(iChannel1, spacebar).r > 0.1) marks = 0.0;\n    \n    fragColor = vec4(marks, vertex.x, vertex.y, 1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}