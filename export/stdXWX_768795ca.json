{"ver":"0.1","info":{"id":"stdXWX","date":"1639914721","viewed":199,"name":"Grid Plot","username":"pdcxs","description":"A simple program that illustrates the coordinate system.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid","coordinatesystem"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 NumberPlane(vec2 uv) {\n    vec3 col = vec3(0.);\n\n    // In each cell,\n    // the coordinate changes from 0 to 1 and then to 0.\n    // Then, the boundaries of adjacent cells will be 0,\n    // and the coordinate will be continuousã€‚\n    vec2 cell = 1. - 2. * abs(fract(uv) - .5);\n\n    if(abs(uv.y) <= fwidth(uv.y)) {\n        col.r = 1.;\n    } else if(abs(uv.x) <= fwidth(uv.x)) {\n        col.g = 1.;\n    } else if(\n        // Because the slope of the cell has been doubled,\n        // `fwidth` should be multiplied by two.\n        cell.x < 2. * fwidth(uv.x) ||\n        cell.y < 2. * fwidth(uv.y)) {\n        col = vec3(1.);\n    }\n\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = 3. * (2. * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    fragColor = vec4(NumberPlane(uv), 1.);\n}","name":"Image","description":"","type":"image"}]}