{"ver":"0.1","info":{"id":"dl3czS","date":"1699354346","viewed":29,"name":"Well-eye","username":"jcfuuc","description":"Csak egy kis játék","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["nothing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(vec2 uv, float th) {\n  return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n}\n\n/*vec3 getBackgroundColor(vec2 uv) {\n  uv = uv * 0.5 + 0.5; // remap uv from <-0.5,0.5> to <0.25,0.75>\n  vec3 gradientStartColor = vec3(1., 0., 1.);\n  vec3 gradientEndColor = vec3(0., 1., 1.);\n  return mix(gradientStartColor, gradientEndColor, uv.y); // gradient goes from bottom to top\n}*/\n\n// ne linear gradient legyen és ez is változzon\nvec3 getBackgroundColor(vec2 uv) {\n  return 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(2,3,1));\n}\n\n// forgó négyzet (eltolással)\nfloat sdSquare(vec2 uv, float size, vec2 os) {\n\n  vec2 offset = vec2(sin(iTime*2.)*os.x, cos(iTime*2.)*os.y);\n\n  float x = uv.x - offset.x;\n  float y = uv.y - offset.y;\n  vec2 rotated = rotate(vec2(x,y), iTime);\n\n  return max(abs(rotated.x), abs(rotated.y)) - size;\n}\n\n// kör (eltolással)\nfloat sdCircle(vec2 uv, float r, vec2 offset) {\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    \n    float d = length(vec2(x, y)) - r;\n    \n    return d ;//> 0. ? vec3(0.0) : 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0,2,4));\n}\n\n// cucc, ami ismétli a (jelenleg) négyzeteket végtelenül\nfloat opRep(vec2 p, float r, vec2 c)\n{\n  // az 'r' r-edetileg radius volt körhöz, de négyzetméretnek is jó\n  \n  vec2 q = mod(p+0.5*c,c)-0.5*c;\n  \n  /* TODO? felváltva kör és négyzet\n  if (mod(p.x,2) == 0){\n      return sdCircle(q, r, vec2(0));\n  }\n  else{\n      return sdSquare(q, r, vec2(0));\n  }*/\n  return sdSquare(q, r, vec2(0.1));\n}\n\nvec3 drawScene(vec2 uv) {\n  vec3 col = getBackgroundColor(uv);\n  \n\n  float res; \n  res = opRep(uv, 0.05, vec2(0.2, 0.2));\n  res = step(0., res);\n  // alapból marad a bgcolor, kivéve ha alakzat van ott\n  col = mix( 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0,2,4)), col, res);\n  \n  // TODO: az alakzatok mászkálhatnának a képernyőn (egyenesen/körkörösen/hullámzóan)\n  \n  \n  // TODO: minden alakzat legyen ugyanolyan színű, ne attól függjön, hogy hol van\n\n  return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy; // <0, 1>\n  uv -= 0.5; // <-0.5,0.5>\n  uv.x *= iResolution.x/iResolution.y; // fix aspect ratio\n\n  // ez a fontos, ami kirajzolja a dolgokat\n  vec3 col = drawScene(uv);\n\n  fragColor = vec4(col,1.0); // Output to screen\n}\n","name":"Image","description":"","type":"image"}]}