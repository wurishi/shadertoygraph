{"ver":"0.1","info":{"id":"ll3yDN","date":"1559779851","viewed":530,"name":"Circle Fitting","username":"BigWIngs","description":"An old doodle I had lying around: making a spline by concatenating arcs. ","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["circlefitting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Circle Fitting 1 by Martijn Steinrucken aka BigWings - 2019\n// countfrolic@gmail.com  Twitter: @The_ArtOfCode\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// This is an old doodle I had lying around. It is my attempt to come up with some sort of spline by\n// fitting arcs together. You can move the mouse to see the thing in action.\n// I figure that a reliable way to connect two arbitrary points which two arbitrary tangents by using\n// circle arcs would be very useful for many applications.\n// Perhaps the community can build on this, so I figured I'd make it public.\n\n/*\n\nSteps for fitting arcs into a spline\n\n1) Pick first arc the way you want\n2) draw line through arc center and end point. \n   New arc center has to be on this line to keep spline derivative smooth\n3) Pick end point for next arc, could be anywhere except for the line tangent\n   to the current arc end point\n4) Mark center between current arc end point and new point\n5) Draw line perpendicular through this center.\n   New arc center has to be on this line in order for it to go through both points.\n6) Find intersection between lines of steps 2 and 5\n7) Draw arc at the new center point with radius of the distance between center and new point\n8) Go to step 2 to add the next arc.\n\nThere are always two splines going through all the points (the arcs, and the anti arcs)\nYou can choose which one you like best, probably the shortest one\nYou can't indivdually control spline derivatives at each point. Since we are building this\nthing out of cirlces, you might get unintended loops.\nYou can change the way the spline flows by changing the type of arc you use to connect the\nfirst two points.\n*/\n\n\n#define S(a,b,t) smoothstep(a,b,t)\n\n#define SHOW_HELPERS .7\n#define THICKNESS .01\nfloat circle(vec2 uv, vec2 p, float r, float w) {\n\tp -= uv;\n    float d = smoothstep(w, w*.5, abs(r-length(p)));\n    return d;\n}\n\nfloat arc(vec2 uv, vec2 p, vec2 a, vec2 b, float r, float w) {\n\tvec2 c = (a+b)/2.;\n    \n    return .1;\n}\n\nfloat point(vec2 uv, vec2 p, float r) {\n\treturn S(r, r*.8, length(uv-p));\n}\n\nvec2 R(vec2 a) {\n   return vec2(-a.y,a.x);\n}\n\nfloat lineseg(vec2 p, vec2 a, vec2 b,  float w) {\n    \n    vec2 pa = p - a, ba = b - a;\n\tfloat h = clamp(dot(pa,ba) / dot(ba,ba), 0., 1.);\t\n\tfloat d = length(pa - ba * h);\n\n    return S(w, w*.8, d);\n}\n\nfloat line(vec2 p, vec2 a, vec2 b,  float w) {\n    \n    vec2 pa = p - a, ba = b - a;\n\tfloat h = dot(pa,ba) / dot(ba,ba);\t\n\tfloat d = length(pa - ba * h);\n\n    return S(w, w*.8, d);\n}\n\n\n\nvec2 LineIntersect(vec2 a, vec2 b, vec2 c, vec2 d) {\n    float e = (b.x-a.x)*(d.y-c.y)-(b.y-a.y)*(d.x-c.x);\n    float r = ((a.y-c.y)*(d.x-c.x)-(a.x-c.x)*(d.y-c.y)) / e;\n    \n    vec2 p = a+r*(b-a);\n    \n    return p;\n}\n\nfloat Side(vec2 a, vec2 b, vec2 p){\n     return sign( ((b.x - a.x)*(p.y - a.y) - (b.y - a.y)*(p.x - a.x)) );\n}\nvec3 getCircle(vec2 p1, vec2 p2, vec2 p3) {\n\tfloat a = p1.x*(p2.y-p3.y)-p1.y*(p2.x-p3.x)+p2.x*p3.y-p3.x*p2.y;\n    float p1d = (p1.x*p1.x+p1.y*p1.y);\n    float p2d = (p2.x*p2.x+p2.y*p2.y);\n    float p3d = (p3.x*p3.x+p3.y*p3.y);\n    \n    float b = p1d*(p3.y-p2.y) + p2d*(p1.y-p3.y) + p3d*(p2.y-p1.y);\n    float c = p1d*(p2.x-p3.x) + p2d*(p3.x-p1.x) + p3d*(p1.x-p2.x);\n    float d = p1d*(p3.x*p2.y-p2.x*p3.y) + p2d*(p1.x*p3.y-p3.x*p1.y)+p3d*(p2.x*p1.y-p1.x*p2.y);\n    \n    vec2 p = vec2(-b/(2.*a), -c/(2.*a));\n    float r = length(p-p1);\n    return vec3(p, r);\n}\n\nvec4 fitArc(vec2 uv, vec2 lastCenter, vec2 start, vec2 end,  float side) {\n\tvec2 mid = (start+end)/2.;\n    vec2 perpendicular = (end-start).yx*vec2(-1,1);\n    vec2 arcCenter = LineIntersect(lastCenter, start, mid, mid+perpendicular);\n    float radius = length(start-arcCenter);\n    \n    float dist = length(uv-arcCenter)-radius;\n    dist = abs(dist);\t// signed or unsigned distance\n    \n    float mask = S(.02, 0.01, dist);\n    \n    perpendicular = (end-arcCenter).yx*vec2(-1,1);\n    vec2 maskPos = arcCenter+(mid-arcCenter)*2.;\n    \n    float r = length(end-maskPos);\n    float m = S(r, r-.001, length(maskPos-uv)); \n    \n    side = Side(end, start, arcCenter)*side;\n    if(side>0.) m = 1.-m;\n   \n    mask *= m;\n    \n    mask += lineseg(uv, start, end, .005);\n    mask += point(uv, arcCenter, .01);\n    return vec4(arcCenter, radius, mask);\n}\n\nvec3 circle3(vec2 uv, vec2 A, vec2 B, vec2 C, float dist) {\n     vec2 d = (A+B)/2.;\n    vec2 ab = B-A;\n    \n    vec2 e = (B+C)/2.;\n    vec2 bc = C-B;\n    \n    \n    vec2 f = d + vec2(-ab.y, ab.x)*dist;\n    vec2 g = e + vec2(-bc.y, bc.x);\n\n    vec2 p = LineIntersect(f, B, e, g);\n    \n    vec2 pe = p-e;\n    vec2 df = d-f;\n    \n    vec2 fb = B-f;\n    vec2 maskPos = LineIntersect(B, B+vec2(-fb.y, fb.x), g, p);\n    float r = length(B-maskPos);\n    float mask = S(r, r-.001, length(maskPos-uv)); \n    \n    float side = Side(A, B, maskPos);\n    if(side<0.) mask = 1.-mask;\n   // if(fract(iTime)<.5) mask = 1.-mask;\n    vec3 col = vec3(0);\n    col += circle(uv, p, length(p-B), THICKNESS)*max(SHOW_HELPERS*.2, mask);\n    \n    maskPos = LineIntersect(B, B+vec2(-fb.y, fb.x), d, f);\n    \n    r = length(B-maskPos);\n    mask = S(r, r-.001, length(maskPos-uv)); \n    if(dist<0.) mask = 1.-mask;\n   // if(fract(iTime)<.5) mask = 1.-mask;\n    col += circle(uv, f, length(f-B), THICKNESS)*max(SHOW_HELPERS*.2, mask);\n    \n    \n    vec3 helpers = vec3(0.);\n    helpers += point(uv, p, .015)*vec3(0,1,1);\n    helpers += lineseg(uv, A, B, .002)*.25;\n    helpers += lineseg(uv, B, C, .002)*.25;\n    helpers += lineseg(uv, d, f, .002)*.125;\n    helpers += line(uv, e, g, .002)*.125;\n    helpers += line(uv, f, B, .002)*vec3(1,1,0)*.1;\n    helpers += point(uv, d, .01)*vec3(0,1,0);\n    helpers += point(uv, e, .01);\n    helpers += point(uv, f, .01)*vec3(1,.5,0);\n    \n   \n    \n    //col += line(uv, f, B, .002)*vec3(1,1,0)*.5;\n    \n    vec2 n = R(B-f);\n    helpers += point(uv, B+n, .03)*vec3(1,0,1);\n    helpers += point(uv, B-n, .03)*vec3(1,0,1);\n    \n    helpers += lineseg(uv, B+n, B-n, .002)*vec3(1,1,0)*.5;\n     col += SHOW_HELPERS*helpers;\n    \n    return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tuv *= 2.;\n    vec2 M = iMouse.xy/iResolution.xy;\n    vec2 m = (iMouse.xy-.5*iResolution.xy)/iResolution.y;\n    m *= 2.;\n    \n    vec3 col = vec3(0);\n    \n    float t = iTime;\n    vec2 p1 = vec2(-1.5,0);// +sin(vec2(.6, .1)*t)*vec2(.25,.5);\n    vec2 p2 = vec2(-.5,0);// + sin(vec2(.7, .2)*t)*vec2(.25,1.);\n    vec2 p3 = vec2(0,sin(iTime)*.2);// +sin(vec2(-.5, -.4)*t)*vec2(.25,.5);\n    vec2 p4 = vec2(.5,0)+p3;//sin(vec2(-.55, -.84)*t)*.5+vec2(.8,0)*0.;\n    vec2 p5 = vec2(1.5,0);//sin(vec2(-.25, -.14)*t)*.5+vec2(.8,0)*0.;\n    \n    if(iMouse.x>20.) p2 = m;\n    col.r += point(uv, p1, .02);\n    col.g += point(uv, p2, .02);\n    col.b += point(uv, p3, .02);\n   \tcol.rg += point(uv, p4, .02);\n    col.rb += point(uv, p5, .02);\n    \n    float s = 1.;//sin(t)*10.;\n    col += circle3(uv, p1, p2, p3, M.x*3.)*vec3(.1, .8, .8);\n    //col += circle3(uv, p4, p3, p2, 0.1)*vec3(.8,.8,.1);\n    //col += circle3(uv, p3, p4, p5, (m.y-.5)*10.)*vec3(.8,.1,.8);\n    \n    float side = -1.;\n    \n    vec4 a = fitArc(uv, vec2(-1.,2), p1, p2,side);\n    float d = a.a;\n    a = fitArc(uv, a.xy, p2, p3,-side);\n    d += a.a;\n    //d = min(d, a.a);\n     a = fitArc(uv, a.xy, p3, p4,side);\n    d += a.a;\n    //d = min(d, a.a);\n    a = fitArc(uv, a.xy, p4, p5,-side);\n    d+=a.a;//d = min(d, a.a);\n    \n   //  col += d*.1;//S(.02, 0.01, d)*vec3(.1, .8, .8);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}