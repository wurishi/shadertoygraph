{"ver":"0.1","info":{"id":"stKGzG","date":"1637924472","viewed":317,"name":"connected components in truchet2","username":"FabriceNeyret2","description":"Find the connected component.  \naccelerated variant of [url]https://shadertoy.com/view/7ty3zG[/url] \n( front still have slow propag sometime. could it be improved ? )\n\nclick to restart a new truchet tiling.  Scale N in Common.","likes":15,"published":3,"flags":32,"usePreview":0,"tags":["flood","short","connected","truchets"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// accelerated variant of https://shadertoy.com/view/7ty3zG\n// ( see BuffA from line 33 )\n\n#define hue(v)  vec4( .6 + .6 * cos( .5+(v)  + vec3(0,23,21)  ) , 1 )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 U = N * u / R.y + 8.*iTime, I = floor(U), F = fract(U);\n         \n    O = T(I);                                          // cell states \n    O.w > 0. ? F = vec2(1.-F.y,F.x) : F;\n    \n    O =   smoothstep(N*1.5/R.y,0.,abs(min(length(F),length(1.-F))-.5) - .05 ) // truchet drawing\n        * hue( O[ F.x+F.y < 1. ? 1 : 2 ] );            // coloring\n         \n // if (iMouse.z>0.) O += (1.-O.w)*.3*mod(I.x+I.y,2.); // debug: draw tiles\n // O += .3*T(I).w;\n} ","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define H(p)  fract(sin(dot(p, vec2(12.9898, 78.233))-iTime) * 43758.5453)\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    if ( iFrame < 1 || iMouse.z>0.) {         // --- init: create truchet\n        vec2 I = u-.5;                        // store truchet data\n        O.w = step(.5,H(I));                  // random axis\n        O.y = 1.+I.x+4096.*I.y;               // id of tile segment #1\n        O.z = -O.y;                           // id of tile segment #2\n        return;\n    }\n    \n    u -= .5;\n    O = T(u);                                 // previous state\n // if (u.x > N*R.x/R.y || u.y > N) return;   // propagate only visible tiles\n    \n    vec4 T;                                   // --- propagate id along connections\n#define left       T(u+vec2(1,0)).y\n#define right      T(u-vec2(1,0)).z\n#define bot      ( T = T(u+vec2(0,1)), T.w<1. ? T.y : T.z )\n#define top      ( T = T(u-vec2(0,1)), T.w<1. ? T.z : T.y )\n//#define min(a,b) ( abs(a) < abs(b) ? a : b ) // may this boost ?\n    if (O.w<1.) { // tile contains:  \\     new id = min(connections)\n        O.y = min( O.y, min( right, top ));\n        O.z = min( O.z, min( left , bot ));\n    }\n    else {        // tile contains:  /     new id = min(connections)\n        O.y = min( O.y, min( right, bot ));\n        O.z = min( O.z, min( left , top ));\n    }\n    \n                  // --- shortcut: go check if the id is itself updated\n#define source(v) ( i = int(abs(v))-1, T = T(vec2( i%4096, i/4096 )), \\\n                    v>0. ?  T.y : T.z )\n    int i;\n    O.y = source(O.y);\n    O.z = source(O.z);\n} ","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float N = 60.; // vertical number of tiles\n\n#define R    iResolution.xy\n#define T(U) texelFetch( iChannel0, ivec2(U+R)%ivec2(R), 0 )","name":"Common","description":"","type":"common"}]}