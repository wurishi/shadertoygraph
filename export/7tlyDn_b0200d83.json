{"ver":"0.1","info":{"id":"7tlyDn","date":"1648121515","viewed":111,"name":"2D rounded rect w/outline&light","username":"gabdib","description":"2D rounded rect with outline and light effect","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","rectangle","outline"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n* Referernce: https://www.shadertoy.com/view/WtdSDs\n*/\n\n// How soft the edges should be (in %). Higher values could be used to simulate a drop shadow.\nfloat edgeSoftness  = 0.01;\n\n// The radius of the corners (in pixels)\nfloat u_borderRadius = 50.0;\n\nvec4 rectangleColor = vec4(0.0, 0.8, 0.0, 1.0);\nfloat textureColorMix = 0.0;\n\nfloat u_shadowSoftness =  5.0;\nvec2 u_shadowOffset = vec2(0.0, 5.0);\nvec4 u_shadowColor = vec4(0.4, 0.4, 0.4, 1.0);\n\nvec4 u_lightColor = vec4(1.0);\nfloat u_lightWidth = 10.0;\nfloat u_lightAlphaScale = 0.9;\nfloat u_lightAlphaMin = 0.3;\n\nvec4 u_borderColor = vec4(0.0, 0.0, 0.0, 1.0);\nfloat u_borderWidth = 1.0;\n\n// from https://iquilezles.org/articles/distfunctions\nfloat roundedBoxSDF(vec2 CenterPosition, vec2 Size, float Radius) {\n    return length(max(abs(CenterPosition)-Size+Radius,0.0))-Radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 uv = fragCoord;\n    vec3 u_resolution = iResolution;\n    \n    // The pixel space scale of the rectangle.\n    vec2 size = vec2(300.0, 300.0);\n    \n    // the pixel space location of the rectangle\n    vec2 location;\n    location.x = (u_resolution.x - size.x) * 0.5;\n    location.y = (u_resolution.y - size.y) * 0.5;\n    \n    vec2 halfSize = size * 0.5;\n    vec2 centerPosition = uv.xy - location - halfSize;\n    \n    // Calculate distance to edge\n    float distance = roundedBoxSDF(centerPosition, halfSize, u_borderRadius);\n    \n    // Smooth the result (free antialiasing)\n    float totSoftness = size.x * edgeSoftness;\n    float halfBorderWidth = u_borderWidth * 0.5;\n    float halfTotSoftness = totSoftness * 0.5;\n    float halfLightWidth = u_lightWidth * 0.5;\n    float smoothedAlpha =  1.0-smoothstep(0.0, size.x * edgeSoftness, distance);\n    \n    // Return the resultant shape\n    vec4 color = mix(rectangleColor, texture(iChannel0, fragCoord.xy / u_resolution.xy), textureColorMix);\n    vec4 quadColor = mix(vec4(1.0), color, smoothedAlpha);\n    \n    // Create light effect\n    float lightAlpha = 1.0 - max(smoothstep(0.8, 0.9, fragCoord.y / u_resolution.y), u_lightAlphaMin);\n    vec4 qlMixedColor = mix(mix(quadColor, u_lightColor, u_lightAlphaScale), quadColor, lightAlpha);;\n    \n    // Apply a drop shadow effect\n    float shadowDistance = roundedBoxSDF(centerPosition + u_shadowOffset, halfSize, u_borderRadius);\n    float shadowAlpha = 1.0-smoothstep(-u_shadowSoftness, u_shadowSoftness, shadowDistance);\n    vec4 qsMixedColor = mix(quadColor, u_shadowColor, (shadowAlpha - smoothedAlpha) * step(halfBorderWidth, distance));\n    \n   // Get outline color with opacity\n   vec4 qoMixedColor = u_borderColor * u_borderColor.a;\n   \n   // Outline anti-aliasing\n   float outlineAlpha = smoothstep(-totSoftness -halfBorderWidth, -halfBorderWidth, distance - halfTotSoftness)\n                      * smoothstep(totSoftness + halfBorderWidth, halfBorderWidth, distance - halfTotSoftness);\n       \n   // Light anti-aliasing\n   float finalLightAlpha = 1.0 - smoothstep(-totSoftness -halfLightWidth, -halfLightWidth,\n                                            distance + halfTotSoftness + halfBorderWidth)\n                               * smoothstep(totSoftness, 0.0, distance + halfTotSoftness + halfBorderWidth);\n       \n   fragColor = mix(qlMixedColor, mix(qsMixedColor, qoMixedColor, outlineAlpha), finalLightAlpha);\n}","name":"Image","description":"","type":"image"}]}