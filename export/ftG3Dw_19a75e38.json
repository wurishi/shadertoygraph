{"ver":"0.1","info":{"id":"ftG3Dw","date":"1637769264","viewed":269,"name":"Chamfered Box SDF","username":"TheTurk","description":"Distance function for a chamfered box.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","sdf","rectangle","distance","box","rect","primitive","octagon","chamfer","chamfered"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float box(vec2 position, vec2 halfSize, float chamferRadius) {\n   position = abs(position) - halfSize;\n   vec2 d1 = vec2(max(position.x + chamferRadius, 0.0), position.y);\n   vec2 d2 = vec2(position.x, max(position.y + chamferRadius, 0.0));\n   float k = clamp((position.x - position.y + chamferRadius) * 0.5, 0.0, chamferRadius);\n   vec2 d3 = position + vec2(chamferRadius - k, k);\n   float s = sign(max(d3.x, d1.y));\n   return sqrt(min(min(dot(d1, d1), dot(d2, d2)), dot(d3, d3))) * s;\n}\n\nfloat box(vec2 position, vec2 halfSize, vec2 chamferRadius) {\n   position = abs(position) - halfSize;\n   vec2 d1 = vec2(max(position.x + chamferRadius.x, 0.0), position.y);\n   vec2 d2 = vec2(position.x, max(position.y + chamferRadius.y, 0.0));\n   position.x += chamferRadius.x; \n   vec2 end = vec2(chamferRadius.x, -chamferRadius.y);\n   vec2 d3 = position - end * clamp(dot(position, end) / dot(end, end), 0.0, 1.0);\n   float s = sign(max(d3.x, d1.y));\n   return sqrt(min(min(dot(d1, d1), dot(d2, d2)), dot(d3, d3))) * s;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    vec2 halfSize = vec2(0.55);\n    float chamferRadius = ((cos(iTime + 1.0) + 1.0) * 0.5) * 0.55 / (sqrt(2.0) + 1.0) * sqrt(2.0);\n    float d = box(position, halfSize, chamferRadius);\n\n    // same colorization that Inigo Quilez uses in his shaders\n    vec3 color = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n    color *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(120.0 * d);\n    color = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 3.0, (abs(d) - 0.003) * iResolution.y));\n    if (iMouse.z > 0.0) {\n        vec2 mousePosition = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n        float d = box(mousePosition, halfSize, chamferRadius);\n        color = mix(color, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 3.0, abs(length(position - mousePosition) - abs(d)) * iResolution.y - 1.0));\n    }\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}