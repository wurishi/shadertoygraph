{"ver":"0.1","info":{"id":"WtlyD4","date":"1592101684","viewed":104,"name":"\"little fox\" (japanese song)","username":"darkfox","description":"fork song.\nreference:https://www.youtube.com/watch?v=ovSRRQ7pAks","likes":6,"published":1,"flags":8,"usePreview":0,"tags":["sound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159\n\n// palette.\n#define GREEN vec3(0.13, 0.69, 0.29)\n#define RED vec3(1.0, 0.4, 0.3)\n#define BLUE vec3(0.4, 0.6, 1.0)\n#define ORANGE vec3(0.9, 0.6, 0.05)\n\n// space.\n#define Ch_sp 127\n// double quotation.\n#define Ch_dq 168\n// period, comma, apostrophe.\n#define Ch_prd 46\n#define Ch_com 44\n#define Ch_apt 39\n\n// notes.\n#define Ch_n8 10\n\n// small alphabets.\n#define Ch_a 97\n#define Ch_b 98\n#define Ch_c 99\n#define Ch_d 100\n#define Ch_e 101\n#define Ch_f 102\n#define Ch_g 103\n#define Ch_h 104\n#define Ch_i 105\n#define Ch_j 106\n#define Ch_k 107\n#define Ch_l 108\n#define Ch_m 109\n#define Ch_n 110\n#define Ch_o 111\n#define Ch_p 112\n#define Ch_q 113\n#define Ch_r 114\n#define Ch_s 115\n#define Ch_t 116\n#define Ch_u 117\n#define Ch_v 118\n#define Ch_w 119\n#define Ch_x 120\n#define Ch_y 121\n#define Ch_z 122\n\n// draw character\nvec2 getCodePos(float code){\n    return vec2(mod(code, 16.0), 15.0 - floor(code / 16.0));\n}\n\nvec4 getCharLU(int charCode, vec2 p, vec2 lu, vec2 size, vec4 col){\n    // size: right, down.\n    float code = float(charCode);\n    if(p.x < lu.x || p.x > lu.x + size.x || p.y > lu.y || p.y < lu.y - size.y){\n        return vec4(0.0);\n    }\n\n    vec2 co = vec2(p.x - lu.x, lu.y - p.y) / size;\n    co.y = 1.0 - co.y;\n\n    vec4 tex = texture(iChannel0, (co + getCodePos(code)) / 16.0);\n    if(tex.r < 0.5 * (tex.g + tex.b)){ return vec4(0.0); }\n    return col;\n}\n\nvec4 Ch(vec2 p, int CharCode, float x, float y){\n    return getCharLU(CharCode, p, vec2(x, y), vec2(0.08, 0.1), vec4(ORANGE, 1.0));\n}\n\n// draw paw.\nvec4 paw(vec2 p, float r, float dir){\n    float big = 1.0 - step(r, length(p));\n    float small = 0.0;\n    float itv = pi * 0.1;\n    vec2 u;\n    for(float i = -3.0; i <= 3.0; i += 2.0){\n        u = vec2(cos(dir + itv * i), sin(dir + itv * i));\n        small += 1.0 - step(r * 0.5, length(p - 2.2 * r * u));\n    }\n    if(big + small == 1.0){ return vec4(ORANGE, 1.0); }\n    return vec4(0.0);\n}\n\n// white keys(16)\n// y:0.0～0.4\nvoid drawWhiteKey(in vec2 p, inout vec3 col, float n, bool isPressed){\n    vec2 pos = vec2((n * 2.0 + 1.0) / 32.0, 0.2);\n    vec2 size = vec2(0.9 / 32.0, 0.2);\n    if(abs(p.x - pos.x) > size.x || abs(p.y - pos.y) > size.y){ return; }\n    if(isPressed){ col = RED; return; }\n    col = vec3(0.9);\n}\n\n// black keys(17)\n// y:0.18～0.4\nvoid drawBlackKey(in vec2 p, inout vec3 col, float n, bool isPressed){\n    vec2 pos = vec2(n / 16.0, 0.29);\n    vec2 size = vec2(0.8 / 32.0, 0.11);\n    if(abs(p.x - pos.x) > size.x || abs(p.y - pos.y) > size.y){ return; }\n    if(isPressed){ col = BLUE; return; }\n    col = vec3(0.1);\n}\n\n\nfloat getCurrentNote(){\n    float prevTerm = 0.0;\n    for(int i = 0; i < note_count; i++){\n        // a bit shorten.\n        if(prevTerm < iTime && iTime < prevTerm + sus[i] * unit * 0.85){\n            return float(notes[i]);\n        }\n        prevTerm = term[i] * unit;\n    }\n    return -1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 p = fragCoord.xy / iResolution.xy;\n    vec2 st = fragCoord.xy / min(iResolution.x, iResolution.y);\n\n    vec3 col = mix(ORANGE, vec3(1.0), p.y); // background.\n\n    float cur = getCurrentNote(); // current note.\n\n    for(float n = 0.0; n < 16.0; n += 1.0){\n        drawWhiteKey(p, col, n, n == cur);\n    }\n    for(float n = 0.0; n < 17.0; n += 1.0){\n        if(mod(n, 7.0) == 0.0 || mod(n, 7.0) == 4.0){ continue; }\n        drawBlackKey(p, col, n, n - 0.5 == cur);\n    }\n    \n    int title[13] = int[13](Ch_n8, Ch_dq,\n                            Ch_l, Ch_i, Ch_t, Ch_t, Ch_l, Ch_e, Ch_sp,\n                            Ch_f, Ch_o, Ch_x, Ch_dq);\n    \n    vec4 texts = vec4(0.0);\n\n    for(int i = 0; i < 13; i++){\n        texts += Ch(st, title[i], 0.1 + 0.04 * float(i), 0.9);\n    }\n    \n    texts += paw(st - vec2(0.4, 0.6), 0.02, pi * 0.1);\n    texts += paw(st - vec2(0.5, 0.65), 0.02, pi * 0.1);\n    texts += paw(st - vec2(0.6, 0.6), 0.02, pi * 0.1);\n    texts += paw(st - vec2(0.7, 0.65), 0.02, pi * 0.1);\n    \n    texts += paw(st - vec2(0.9, 0.65), 0.02, pi * 0.1);\n    texts += paw(st - vec2(1.0, 0.7), 0.02, pi * 0.1);\n    texts += paw(st - vec2(1.1, 0.65), 0.02, pi * 0.1);\n    \n    fragColor = mix(vec4(col, 1.0), texts, texts.a);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define TAU 6.2831\n\nfloat squ(float x){\n    x = fract(x);\n    return smoothstep(0.48, 0.52, x) * 2.0 - 1.0;\n}\n\nvec2 squWave(float time, float freq, float m){\n  return vec2(squ(freq * time)) * exp(-m * time);\n}\n\nvec2 sound(float t, float freq, float span){\n    return squWave(t, freq, 1.6 / span);\n}\n\nvec2 mainSound( in int samp,float time){\n    vec2 wv = vec2(0.0);\n    float prevTerm = 0.0;\n    float frequency;\n    \n    for(int i = 0; i < note_count; i++){\n        if(time < term[i] * unit){\n            frequency = 440.0 * pow(2.0, getExponent(notes[i]) / 12.0);\n            wv += sound(time - prevTerm, frequency, sus[i] * unit);\n            break;\n        }\n        prevTerm = term[i] * unit;\n    }\n    return wv;\n}\n","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"// common constants, functions, etc...\n\n// keyboard code. (sharp key is fractional.)\nconst float _RA = 2.0;\nconst float _RASP = 2.5;\nconst float _SI = 3.0;\nconst float DO = 4.0;\nconst float DOSP = 4.5;\nconst float RE = 5.0;\nconst float RESP = 5.5;\nconst float MI = 6.0;\nconst float FA = 7.0;\nconst float FASP = 7.5;\nconst float SO = 8.0;\nconst float SOSP = 8.5;\nconst float RA = 9.0;\nconst float RASP = 9.5;\nconst float SI = 10.0;\nconst float DO_ = 11.0;\nconst float DOSP_ = 11.5;\nconst float RE_ = 12.0;\nconst float RESP_ = 12.5;\nconst float MI_ = 13.0;\n\n// song data\n\nconst int note_count = 44;\nconst float BPM = 120.0;\nconst float unit = 60.0 / BPM;\n\n// terminal time of each segment.\nconst float term[note_count] =\n        float[note_count](0.5, 1.0, 1.5, 2.0, 3.0, 4.0,\n                          4.5, 5.0, 5.5, 6.0, 8.0,\n                          8.5, 9.0, 9.5, 10.0, 12.0,\n                          12.5, 13.0, 13.5, 14.0, 14.5, 15.0, 15.5, 16.0,\n                          16.5, 17.0, 17.5, 18.0, 18.5, 19.0, 20.0,\n                          20.5, 21.0, 21.5, 22.0, 22.5, 23.0, 23.5, 24.0,\n                          24.5, 25.0, 25.5, 26.0, 28.0);\n\nconst float sus[note_count] =\n        float[note_count](0.5, 0.5, 0.5, 0.5, 0.75, 0.75,\n                          0.5, 0.5, 0.5, 0.5, 1.0,\n                          0.5, 0.5, 0.5, 0.5, 1.0,\n                          0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,\n                          0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,\n                          0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,\n                          0.5, 0.5, 0.5, 0.5, 1.0);\n\n\nconst float notes[note_count] =\n        float[note_count](DO, RE, MI, FA, SO, SO,\n                          RA, FA, DO_, RA, SO,\n                          RA, FA, DO_, RA, SO,\n                          SO, FA, FA, FA, FA, MI, MI, MI,\n                          MI, RE, MI, RE, DO, MI, SO,\n                          SO, FA, FA, FA, FA, MI, MI, MI,\n                          MI, RE, RE, MI, DO);\n\n// 鍵盤の番号からオクターブの指数を出すための若干美しくない処理\nconst float array_w[7] = float[7](-4.0, -2.0, 0.0, 2.0, 3.0, 5.0, 7.0);\nconst float array_b[7] = float[7](0.0, -3.0, -1.0, 1.0, 0.0, 4.0, 6.0); //0:dummy.\n\n// get exponent. 0:white key, 1:black key.\n// これを440.0に掛ける\nfloat getExponent(float index){\n    float r, q;\n    int diffType = 0;\n    if(fract(index) > 0.25){ index += 0.5; diffType = 1; }\n    for(int i = 0; i < 7; i++){\n        r = mod(index, 7.0);\n        q = floor(index / 7.0);\n        if(float(i) == r){\n            return 12.0 * q - 12.0 + (diffType == 0 ? array_w[i] : array_b[i]);\n        }\n    }\n    return 0.0;\n}","name":"Common","description":"","type":"common"}]}