{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"float aspectRatio;\nvec2 mid;\n\nvec2 distort(vec2 p, float power) {\n    // Convert to polar coords:\n    float theta  = atan(p.y, p.x);\n    float radius = length(p);\n\n    // Distort:\n    radius = pow(radius, power);\n\n    // Convert back to Cartesian:\n    p.x = radius * cos(theta);\n    p.y = radius * sin(theta);\n\n    return p;\n}\n\nvec4 textureaspectCompensated(sampler2D channel, vec2 pixel) {\n    vec2 uv = vec2(pixel.x * iResolution.y/iResolution.x, pixel.y);\n    return texture(channel, uv);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 pixel = fragCoord.xy;\n\n    aspectRatio = iResolution.x/iResolution.y;\n    mid = vec2(aspectRatio, 1.0) / 2.0;\n\n    vec2 uv = fragCoord.xy;\n    uv /= -iResolution.xy; // normalize and invert\n\n    // Take aspect ratio into account.\n    uv.x *= aspectRatio;\n\n    // Put origo at the center of the viewport.\n    uv += mid;\n\n    fragColor = textureaspectCompensated(iChannel0, distort(uv, 10.*cos(iTime/10.))*8.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ls2XWD","date":"1412353187","viewed":256,"name":"Barrel Bounce","username":"togi","description":"Simple barrel distortion bouncing back and forth.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","zoom"],"hasliked":0,"parentid":"","parentname":""}}