{"ver":"0.1","info":{"id":"sdG3zw","date":"1631242320","viewed":125,"name":"palette washing spirals","username":"HaleyHalcyon","description":"a","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["perlinnoise"],"hasliked":0,"parentid":"fsKGRD","parentname":"blotchy spirals"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU (6.283185307)\n\n// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.\nuint hash(uint x) {\n    x &= 65535u;\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x & 65535u;\n}\n// fade function defined by ken perlin\nvec2 fade(vec2 t) {\n  return t * t * t * (t * (t * 6. - 15.) + 10.);\n}\n// corner vector\nvec2 cvec(vec2 uv, float time) {\n  uint x = uint(mod(uv.x, 256.));\n  uint y = uint(mod(uv.y, 256.));\n  float n = (float(hash(x + hash(y))) / 65535. + time) * TAU;\n  return vec2(\n      sin(n), cos(n)\n  );\n}\n// perlin generator\nfloat perlin(vec2 uv, float offset) {\n  vec2 i = floor(uv);\n  vec2 f = fract(uv);\n\n  vec2 u = fade(f);\n  offset = fract(offset);\n\n  return\n  mix(\n    mix(\n      dot( cvec(i + vec2(0.0,0.0), offset ), f - vec2(0.0,0.0) ),\n      dot( cvec(i + vec2(1.0,0.0), offset ), f - vec2(1.0,0.0) ),\n    u.x),\n    mix(\n      dot( cvec(i + vec2(0.0,1.0), offset ), f - vec2(0.0,1.0) ),\n      dot( cvec(i + vec2(1.0,1.0), offset ), f - vec2(1.0,1.0) ),\n    u.x),\n  u.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float time = fract(iTime / 2.5);\n  // Normalized pixel coordinates (from 0 to 1)\n  float scale = min(iResolution.x, iResolution.y);\n  vec2 uv = (gl_FragCoord.xy - 0.50 * iResolution.xy) / scale;\n  float dist = log(uv.x * uv.x + uv.y * uv.y);\n  float angle = atan(uv.y, uv.x) / TAU;\n\n  float noise = perlin(uv * 10.5, time);\n  noise += 0.5 * perlin(uv * 34.0, -2. * time);\n  noise *= max(0.0, dist * 0.2 + 2.);\n  \n  float dark = smoothstep(\n      0.0, 0.4, (0.2 + length(uv)) * sin(TAU * 2. * time + 0.6 * dist) + 0.3 * noise\n  );\n  \n  const vec3 colBaseL = vec3(92, 128, 1) / 255.;\n  const vec3 colSp1L = vec3(124, 181, 24) / 255.;\n  const vec3 colSp2L = vec3(251, 176, 45) / 255.;\n  \n  const vec3 colBaseD = vec3(50, 13, 109) / 255.;\n  const vec3 colSp1D = vec3(0, 36, 0) / 255.;\n  const vec3 colSp2D = vec3(251, 97, 7) / 255.;\n  \n  vec3 colBase = mix(colBaseL, colBaseD, dark);\n  vec3 colSp1  = mix(colSp1L,  colSp1D, dark);\n  vec3 colSp2  = mix(colSp2L,  colSp2D, dark);\n  \n  float spiral1 = step(fract(0.2 * noise + 2. * angle + 0.5 * dist + time), 0.4);\n  float spiral2 = step(fract(0.2 * noise + 2. * angle + 0.5 * dist + 2. * time + 0.5), 0.2);\n  \n  vec3 col = mix(\n      mix(\n          colBase, colSp1, spiral1\n      ), colSp2, spiral2\n  );\n  // Output to screen\n  fragColor = vec4(\n    col, 1.0\n  );\n}","name":"Image","description":"","type":"image"}]}