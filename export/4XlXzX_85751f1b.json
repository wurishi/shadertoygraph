{"ver":"0.1","info":{"id":"4XlXzX","date":"1709779884","viewed":66,"name":"Fading Geometric Square","username":"Shin0155","description":"Fading Geometric Square","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fadinggeometricsquare"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Fading Geometric Square\n\n#define MAX_ITER 100\n#define MAX_MARCHING_STEPS 255\n#define MIN_DIST 0.0\n#define MAX_DIST 60.0\n#define EPSILON 0.001\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat scene(vec3 p) {\n    vec3 offset = vec3(0.0, 0.0, iTime * 0.5);\n    p.xy *= rot(iTime * 0.3);\n    p -= offset;\n\n    float d = sdBox(p, vec3(2.0, 2.0, 2.0));\n\n    float k = sin(p.x * 10.0 + iTime * 3.0) * sin(p.y * 10.0 + iTime * 3.0) * sin(p.z * 10.0 + iTime * 3.0) * 0.25;\n    d = abs(d) - k * 0.5;\n\n    return d;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float depth = MIN_DIST;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = scene(ro + depth * rd);\n        if (dist < EPSILON) {\n            return depth;\n        }\n        depth += dist;\n        if (depth >= MAX_DIST) {\n            return MAX_DIST;\n        }\n    }\n    return MAX_DIST;\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(EPSILON, 0.0);\n    vec3 n = vec3(scene(p + e.xyy) - scene(p - e.xyy),\n                  scene(p + e.yxy) - scene(p - e.yxy),\n                  scene(p + e.yyx) - scene(p - e.yyx));\n    return normalize(n);\n}\n\nvec3 getColor(vec3 p, vec3 rd) {\n    vec3 col = vec3(0.0);\n    float dist = rayMarch(p, rd);\n    if (dist < MAX_DIST) {\n        vec3 q = p + dist * rd;\n        vec3 n = getNormal(q);\n        vec3 light = normalize(vec3(1.0, 1.0, 1.0));\n        float diffuse = max(dot(n, light), 0.0);\n        vec3 color1 = vec3(0.8, 0.2, 0.6);\n        vec3 color2 = vec3(0.2, 0.8, 0.4);\n        col = mix(color1, color2, diffuse);\n        col *= sin(dist * 10.0 + iTime * 3.0) * 0.5 + 0.5;\n    }\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0.0, 0.0, -5.0);\n    vec3 rd = normalize(vec3(uv, 1.0));\n\n    vec3 col = getColor(ro, rd);\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}