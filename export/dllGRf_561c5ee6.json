{"ver":"0.1","info":{"id":"dllGRf","date":"1672180819","viewed":84,"name":"rect hole","username":"Dragon3DGraff","description":"rect hole","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["recthole"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rect (vec2 uv, float size) {\nfloat x =  (iResolution.x*0.5 -  iResolution.x* size) / iResolution.x;\nfloat y = (iResolution.y*0.5 -  iResolution.x* size) / iResolution.y;\n\nvec2 leftBottom = step(vec2(x, y), uv);\nvec2 topRight = step(vec2(x, y), 1.0 - uv);\n\nreturn leftBottom.x*leftBottom.y*topRight.x*topRight.y;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //uv *= 0.5;\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    float rectangle = rect(uv, 0.2);\n    float rectangleInner = rect(uv, clamp(0.2*abs(sin(iTime)), 0.02, 0.19));\n    col.x = rectangle-rectangleInner;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}