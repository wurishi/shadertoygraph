{"ver":"0.1","info":{"id":"XsXBWf","date":"1498414796","viewed":1274,"name":"Deformed fractal","username":"lherm","description":"Busting my shader chops","likes":11,"published":1,"flags":4,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define eps .002\n#define far 40.\n#define time iTime\n#define PI 3.1415926\n\n#define fft texture(iChannel0, vec2(.25, 0.)).r\n\nmat2 r2(float a) {float c = cos(a), s = sin(a); return mat2(c, -s, s, c);}\n\nvoid distort(inout vec3 p)\n{\n    p += dot(p, p.yzx)*.01;\n    p += dot(p, p.zxy)*.01;\n    p += dot(p, p.xyx)*.01;\n    p += dot(p, p.yxy)*.01;\n    if (p.x<p.y){ p.xy = p.yx;}\n\tif (p.x<p.z){ p.xz = p.zx;}\n\tif (p.y<p.z){ p.yz = p.zy;}\n}\n\nfloat trap;\n\nfloat map(vec3 p)\n{\n    float d = 0.;\n    float s = 6. + fft;\n    for (int i = 0; i < 3; i++)\n    {\n        p = -abs(p) + .5;\n        p.xz *= r2(PI / 4. + time + fft);\n        p.yz *= r2(PI / 8. + time + fft);\n        distort(p);\n        d = max(-d, length(max(abs(p) -s, 0.)));\n        s *= .2;\n        trap = sin(dot(p, p/p));\n    }\n    return d;\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    float t = 0., m;\n    \n    for (int i = 0; i < 128; i++)\n    {\n        vec3 p = ro + rd * t;\n        m = map(p);\n        t += m;\n        if (m < eps || t > far) break;\n    }\n    return t;\n}\n\nvec3 calcNormal(vec3 p)\n{\n    vec2 e = vec2(eps, 0);\n    return normalize(vec3(\n        map(p+e.xyy)-map(p-e.xyy),\n        map(p+e.yxy)-map(p-e.yxy),\n        map(p+e.yyx)-map(p-e.yyx)\n        ));\n}\n\nvec3 doColor(vec3 ro, vec3 rd, vec3 p, vec3 n, vec3 lp, float t)\n{\n    vec3 col = vec3(0.),\n         objCol = vec3(trap, trap/dot(p,p), trap*trap)*5.,\n         ld = lp - p;\n    if (t < far)\n    {\n        float len = length(ld);\n        ld /= len;\n        float diff = max(dot(ld, n), 0.),\n              atten = (1./len*len),\n              amb = .25,\n              spec = pow(max(dot(reflect(-ld, n), -rd), 0.), 8.);\n        col = objCol * (((diff + amb*.2)+spec*.1)+atten*.1);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 f, in vec2 g )\n{\n\tvec2 R = iResolution.xy, u = (g+g-R)/R.y;\n    vec3 ro = vec3(0, 0, 1),\n         rd = normalize(vec3(u, -1)),\n         p = ro-ro,\n         col = p,\n         n = p,\n         lp = vec3(1, 3, 5);\n    float t = trace(ro, rd);\n    p = ro + rd * t;\n    n = calcNormal(p);\n    col = doColor(ro, rd, p, n, lp, t);\n    f = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}