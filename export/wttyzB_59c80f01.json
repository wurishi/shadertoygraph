{"ver":"0.1","info":{"id":"wttyzB","date":"1609419302","viewed":207,"name":"Afterlife","username":"Flopine","description":"Last image of 2020! Hope 2021 will be better... ","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarching","noise","chroma","glitch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = fragCoord.xy/iResolution.xy;\n  vec2 centered_uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n\n  fragColor = vec4(texture(iChannel0, uv*0.98).r,\n                  texture(iChannel0, uv*0.99).g,\n                  texture(iChannel0, uv*0.98).b,\n                  1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define hash21(x) fract(sin(dot(x,vec2(12.4,31.4)))*1467.4)\n\n#define PI acos(-1.)\n\n#define time iTime\n#define dt(speed) fract(time*speed)\n\n\nfloat sc (vec3 p, float d)\n{\n  p = abs(p);\n  p = max(p,p.yzx);\n  return min(p.x,min(p.y,p.z))-d;\n}\n\nfloat sdf(vec3 p)\n{\n  p.xy *= rot(sin(p.z+dt(0.3)*(2.*PI)));\n  float per = 5.;\n  p = mod(p,per)-per*0.5;\n  float d = sc(p,0.2);\n  return d;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n  float dither = hash21(uv);\n  vec3 ro = vec3 (0.001,0.001,-5.), rd = normalize(vec3(uv,1.)), p = ro, col = vec3(0.);\n\n  float shad,t=0.; bool hit=false;\n\n  for(float i=0.;i<64.;i++)\n  {\n    p = ro+t*rd;\n    float d = sdf(p);\n    if(d<0.001) {hit = true; shad = i/64.; break;}\n    d = abs(d)-0.001;\n    d *= 0.3+dither*0.05;\n    t += d;\n  }\n  if (hit) col = vec3(1.-shad); \n  \n  fragColor = vec4(sqrt(col),1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}