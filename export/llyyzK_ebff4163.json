{"ver":"0.1","info":{"id":"llyyzK","date":"1536901622","viewed":104,"name":"Homestuck Aspect Mind","username":"dahart","description":"Homestuck Aspect Mind. use mouse to scrub time.\nhttps://www.reddit.com/r/homestuck/comments/7e5fzf/mind_pixel_art/","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","animation","pixelart","aspect","homestuck","mind","yokcos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// https://www.reddit.com/r/homestuck/comments/7e5fzf/mind_pixel_art/ (found via https://www.reddit.com/user/yokcos700/posts?sort=top)\n// https://g.redditmedia.com/wsQ2RZgpaaI7gJ6iN1qSvxvE9PgloyPJ6sycUDtNhM0.gif?fm=mp4&mp4-fragmented=false&s=fe1f38884e7c869d01de06e032900290\n// https://www.reddit.com/r/PixelArt/comments/7j0h0t/homestuck_aspects_oc/\n// http://mspaintadventures.wikia.com/wiki/Aspect\n// http://mspaintadventures.wikia.com/wiki/Aspect?file=ZodiacAspects.png\n\n//#define PIXELATE\n\nconst vec3 white  = vec3(1., 1., 1.);\n\nconst vec3 mindGreen   = vec3(.2, .8, .5);\n    \n\n// https://iquilezles.org/articles/smin\nvec2 sminT( vec2 a, float b, float bt, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a.x)/k, 0.0, 1.0 );\n    return mix( vec2(b, bt), a, h ) - k*h*(1.0-h);\n}\n\n// d1 union d2\nvec2 sdAddT( vec2 d1, float d2, float t2 )\n{\n    if (d1.x < d2) return d1;\n    return vec2(d2, t2);\n}\n\nvec4 neurons(vec2 uv, float time, float dx) {\n    vec4 color = nop.yyyy;\n    \n    vec2 d = vec2(1., .5); // d.x=distance d.y=time\n    \n    if (uv.x < -.15 && uv.y > -.35) \n    {\n    \td = sdAddT(d, sdFatLine2(uv, vec3(-.25, 0., .01), vec3(-.33, .01, .01)), .50);\n            d = sdAddT(d, sdFatLine2(uv, vec3(-.36, .01, .01), vec3(-.35, 0.27, .01)), .60);\n                d = sdAddT(d, sdFatLine2(uv, vec3(-.35, 0.27, .01), vec3(-.51, 0.29, .01)), .70);\n                    d = sdAddT(d, sdFatLine2(uv, vec3(-.35, 0.27, .01), vec3(-.23, 0.40, .01)), .80);\n                        d = sdAddT(d, sdFatLine2(uv, vec3(-.20, 0.40, .01), vec3(-.18, 0.51, .01)), .90);\n                        d = sminT(d, sdCircle(uv-vec2(-.21, 0.41), .03), .90, .02);\n                    d = sminT(d, sdCircle(uv-vec2(-.35, 0.27), .03), .80, .02);\n            d = sdAddT(d, sdFatLine2(uv, vec3(-.36, .01, .01), vec3(-.45, -0.3, .01)), .60);\n                d = sdAddT(d, sdFatLine2(uv, vec3(-.45, -0.3, .01), vec3(-.51, -0.32, .01)), .70);\n                d = sminT(d, sdCircle(uv-vec2(-.45, -0.29), .03), .70, .02);\n        d = sminT(d, sdCircle(uv-vec2(-.36, .01), .03), .50, .02);\n        //color += .1;// show bound\n    }\n    \n    if (uv.x < .16 && uv.y < -.2) \n    {\n        d = sdAddT(d, sdFatLine2(uv, vec3(-.06, -.20, .01), vec3(-.10, -.35, .01)), .5);\n            d = sdAddT(d, sdFatLine2(uv, vec3(-.08, -.35, .01), vec3(-.15, -.55, .01)), .6);\n            \td = sdAddT(d, sdFatLine2(uv, vec3(-.10, -.35, .01), vec3(.12, -.43, .01)), .7);\n                    d = sdAddT(d, sdFatLine2(uv, vec3(.12, -.43, .01), vec3(.12, -.52, .01)), .8);\n                    d = sminT(d, sdCircle(uv-vec2(.12, -.43), .03), .8, .02);\n            \td = sdAddT(d, sdFatLine2(uv, vec3(-.10, -.35, .01), vec3(-.36, -.42, .01)), .7);\n                    d = sdAddT(d, sdFatLine2(uv, vec3(-.36, -.42, .01), vec3(-.51, -.43, .01)), .8);\n                    d = sminT(d, sdCircle(uv-vec2(-.36, -.42), .03), .8, .02);\n        \td = sminT(d, sdCircle(uv-vec2(-.10, -.35), .03), .6, .02);\n        //color += .1;// show bound\n    }\n    \n    if (uv.x > 0.2) \n    {\n        d = sdAddT(d, sdFatLine2(uv, vec3(.24, .05, .01), vec3(.37, .09, .01)), .5);\n        \td = sdAddT(d, sdFatLine2(uv, vec3(.37, .09, .01), vec3(.40, .33, .01)), .6);\n                d = sdAddT(d, sdFatLine2(uv, vec3(.40, .33, .01), vec3(.50, .34, .01)), .7);\n                d = sdAddT(d, sdFatLine2(uv, vec3(.40, .33, .01), vec3(.25, .37, .01)), .7);\n        \t\td = sminT(d, sdCircle(uv-vec2(.40, .33), .03), .7, .02);\n                \td = sdAddT(d, sdFatLine2(uv, vec3(.25, .37, .01), vec3(.25, .51, .01)), .8);\n                    d = sminT(d, sdCircle(uv-vec2(.25, .37), .03), .8, .02);\n        \n        \td = sdAddT(d, sdFatLine2(uv, vec3(.37, .09, .01), vec3(.44, -.05, .01)), .6);\n                d = sdAddT(d, sdFatLine2(uv, vec3(.44, -.05, .01), vec3(.34, -.27, .01)), .7);\n                d = sminT(d, sdCircle(uv-vec2(.44, -.05), .03), .7, .02);\n                \td = sdAddT(d, sdFatLine2(uv, vec3(.34, -.27, .01), vec3(.42, -.45, .01)), .70);\n                    d = sminT(d, sdCircle(uv-vec2(.34, -.27), .03), .8, .02);\n                \t\td = sdAddT(d, sdFatLine2(uv, vec3(.42, -.45, .01), vec3(.51, -.47, .01)), .9);\n                \t\td = sdAddT(d, sdFatLine2(uv, vec3(.42, -.45, .01), vec3(.38, -.51, .01)), .9);\n                    d = sminT(d, sdCircle(uv-vec2(.42, -.45), .03), .8, .02);\n            d = sminT(d, sdCircle(uv-vec2(.37, .09), .03), .6, .02);\n        //color += .1;// show bound\n    }\n    \n    if (d.x < 0.) color = comp(color, premult(mix(mindGreen, white, L(d.y, d.y+.1, time)), S(0., -dx, d.x)));\n    \n    return color;\n}\n\nvec4 mindSymbol(vec2 uv, float a, float r, float time, float dx) \n{\n    float fa = mod(a-.1, tau/3.)+.1;\n    vec2 fuv = r*a2d(fa);\n    vec4 color = vec4(0.);\n    vec2 auv = vec2(abs(uv.x), uv.y);\n    \n    if (r > .15) {\n        vec3 outerColor = mix(mindGreen, white, (fract(time+.5)));\n        const vec3[] pts = vec3[16](\n            vec3(vec2(.00, .23), .03),\n            vec3(vec2(.05, .29), .025),\n            vec3(vec2(.14, .31), .025),\n            vec3(vec2(.08, .34), .024),\n            vec3(vec2(-.00, .355), .02),\n            vec3(vec2(-.10, .335), .013),\n            vec3(vec2(-.19, .27), .00),\n            v30,v30,v30,v30,v30,v30,v30,v30,v30\n        );\n        const int npts = 7;\n\n        // scythe-like hooks\n        vec4 d = sdCurve(fuv, npts, pts);\n        if (d.x < dx) color = comp(color, premult(outerColor, S(0., -dx, d.x)));\n\n        // outer ring\n        d.x = length(uv - vec2(.0, .0)) - .25;\n        // horns\n        d.x = min(d.x, sdFatLine2(auv, vec3(.17, .17, .03), vec3(.22, .22, 0.01)));\n        color = comp(color, premult(outerColor, S(0., -dx, d.x)));\n        //color += .1; // show bound\n    }\n    if (r < .27) {\n        vec3 middleColor = mix(mindGreen, white, (fract(time + .4)));\n        \n        float d = length(uv - vec2(.0, .0)) - .18;\n        d -= .08 * L(-.13, .13, fa-2.25+3.*r);\n        //float dxx = 1.5*fwidth(d);\n        color = comp(color, premult(middleColor, S(0., -dx, d)));\n        //color += .1; // show bound        \n        if (r < .17) {\n            vec3 innerColor = mix(mindGreen, white, (fract(time + .3)));\n            float d = length(uv - vec2(.0, .0)) - .12;\n            d -= .03 * L(-.13, .13, fa-2.1+2.5*r);\n            //dxx = 1.5*fwidth(d);\n            color = comp(color, premult(innerColor, S(0., -dx, d)));\n            //color += .1; // show bound        \n        }\n\n        vec4 dd = sdBezier(auv, vec3(.03, -.07, .00), vec3(.12, -.07, .07), vec3(.22, -.035, .0));\n        color = comp(color, premult(mindGreen*.4, S(0., -dx, dd.x)*S(.45, .50, time)*S(1., .55, time)));\n    }\n    \n    return color;\n}\n\nvec4 squiggles( vec2 uv, float time, float a, float r, float dx )\n{\n    time += .5;\n    float timeOffset = floor(time);\n    const float timeSlices = 30.;\n    const float width = .008;\n        \n    const float nrays = 30.;\n    float qa = (a/tau+.5) * (nrays);\n    float qi = floor(qa);\n\n    const float power = 3.;\n    const float scale = 2.;\n\n    float ti1 = floor(fract(time + 0./timeSlices) * timeSlices);\n\tfloat ti2 = floor(fract(time + 1./timeSlices) * timeSlices);\n\tfloat ti3 = floor(fract(time + 2./timeSlices) * timeSlices);\n    \n    // background\n    vec4 color = vec4(.0);\n    if (time < 0.) return color;\n    if (ti3 < ti2) return color;\n    if (ti2 < ti1) return color;\n    \n    ivec2 texSize = textureSize( iChannel0 , 0 );\n    float ts = float(texSize.x);\n    \n    float index0 = float(qi*nrays);\n    vec4 rnd0 = texture(iChannel0, vec2((index0+timeOffset+.5)/ts, 0.5));\n    float lifetime = floor(fract(rnd0.x*rnd0.x*.5) * timeSlices);\n    if (ti3 > lifetime) return color;\n    \n    float index = float(qi*nrays/*+ti2*/);\n    vec4 rnd1 = texture(iChannel0, vec2((index+timeOffset+.5)/ts, (ti1+.5)/ts));\n    vec4 rnd2 = texture(iChannel0, vec2((index+timeOffset+.5)/ts, (ti2+.5)/ts));\n    vec4 rnd3 = texture(iChannel0, vec2((index+timeOffset+.5)/ts, (ti3+.5)/ts));\n\n    float age1 = ti1/lifetime;\n    float age2 = ti2/lifetime;\n    float age3 = ti3/lifetime;\n    float ageDamp1 = 1. - age1;\n    float ageDamp2 = 1. - age2;\n    float ageDamp3 = 1. - age3;\n    float ageMargin1 = ageDamp1 / 2.;\n    float ageMargin2 = ageDamp2 / 2.;\n    float ageMargin3 = ageDamp3 / 2.;\n    \n    float qu1 = (( (qi-.0+rnd1.x*ageDamp1+ageMargin1) / nrays) - .5) * tau;\n    float qu2 = (( (qi-.0+rnd2.x*ageDamp2+ageMargin2) / nrays) - .5) * tau;\n    float qu3 = (( (qi-.0+rnd3.x*ageDamp3+ageMargin3) / nrays) - .5) * tau;\n\n    float rv1 = pow( (ti1+rnd1.y)/10., 1./power ) / scale;\n    float rv2 = pow( (ti2+rnd2.y)/10., 1./power ) / scale;\n    float rv3 = pow( (ti3+rnd3.y)/10., 1./power ) / scale;\n\n    vec2 qruv1 = rv1 * a2d(qu1);\n    vec2 qruv2 = rv2 * a2d(qu2);\n    vec2 qruv3 = rv3 * a2d(qu3);\n\n    vec2 pa = qruv1;\n    vec2 pb = qruv2;\n    vec2 pc = qruv3;\n    \n    vec4 d = sdBezier( \n        uv, \n        vec3(.5*(pa+pb), width), \n        vec3(pb        , width),\n        vec3(.5*(pb+pc), width));\n    \n    // Try to get rid of POV overlap artifacts. \n    // This might be specific to my mac's display gamma.\n    float blend = 10. * dx;\n    float bias = blend * -0.1; \n    float alpha = .75*S(1., .75, age2);\n    \n    float aa = S(0., -dx, d.x);\n    float blendIn = S(-blend+bias, blend+bias, d.w);\n    float blendOut = S(1.+blend-bias, 1.-blend-bias, d.w);\n    if (d.x < dx) color = comp(color, premult(vec4(vec3(1.), alpha*aa)));\n\n    return color;\n}\n\nvec4 Mind( vec2 uv, float time, float dx )\n{\n    const vec2 center = vec2(.5, .5);\n\n    vec2 tuv = uv - center;\n    float r = length(tuv);\n    float a = d2a(tuv);//atan(tuv.x, tuv.y)+pi+iTime;    \n    \n    float phaseTime = fract(time);\n    float phaseTimeEaseOut = sqrt(1.-sqr(1.-phaseTime));\n    float phaseTimeEaseOutFast = sqrt(1.-sqr(1.-min(phaseTime/.5, 1.)));\n        \n    float t = sqrt(1. - sqr(1. - clamp(phaseTime/.7, 0., 1.)))*.5 + .5;\n\n    // background\n    vec4 color = vec4(mindGreen*(.4+.5*L(.3, .8, phaseTime)), 1.);\n    \n    // neurons\n    if (r > .24) {\n        color = comp(color, neurons(tuv, phaseTime, dx));\n        //color.r += .5; // show bound\n    }\n\n    // electric squiggles\n    if (uv.x >= 0.0 && uv.x <= 1.0) {\n        color = comp(color, squiggles(tuv, time, a, r, dx));\n    }\n\n    // symbol\n    if (r < .4) {\n        color = comp(color, mindSymbol(tuv, a, r, phaseTime, dx));\n        //color += .1; // show bound\n    }\n\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float margin = .5 * (iResolution.x - iResolution.y);\n\tvec2 uv = 1.*(fragCoord.xy - X*margin) / iResolution.yy;\n    float mouseU = (iMouse.x - margin) / (iResolution.x - 2.*margin);\n    float time = iTime + mouseU;\n    float dx = fwidth(length(uv)) * 1.5;\n    \n#ifdef PIXELATE\n\tuv = floor(uv * 64.) / 64.;\n    time = floor(time * 16.) / 16.;\n#endif // PIXELATE\n\n    \n\tfragColor = vec4(0.);\n    if (uv.x >= 0.0 && uv.x <= 1.0) fragColor = Mind(uv, time, dx);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n#define S(a,b,t) smoothstep(a,b,t)\n#define unlerp(a,b,t) ((t-a)/(b-a))\n#define v30 vec3(0.)\n\n// lump between a and b. \n// returns 0 when t is outside [a,b]\n// returns 1 at t=(a+b)/2.\n// smoothstep from center to either end (t==a, t==b)\nfloat L(float a, float b, float t) {\n    float u = unlerp(a, b, t);\n    return S(0., 1., 2.*u) * S(0., 1., 2. - u*2.);\n}\n\n// take [0, 1], return [0, .5] + [.5, 0]\nfloat mirror(float x) { return .5-abs(x-.5); }\n\nfloat N(float t) {\n\treturn fract(sin(t*10234.324)*123423.23512);\n}\n\n// remove r from n, i.e., project n onto plane with normal r\nvec3 remove(vec3 n, vec3 r) {\n    return n - r * dot(n, r) / dot(r, r);\n}\nvec2 remove(vec2 n, vec2 r) {\n    return n - r * dot(n, r) / dot(r, r);\n}\n\nvec2 rot90(vec2 v) {\n    return vec2(v.y, -v.x);\n}\n\nconst vec2 X = vec2(1., 0.);\nconst vec3 nop = vec3(-1., 0., 1.);\nconst float pi = 4. * atan(1.); //3.14159265358979323;\nconst float tau = 8. * atan(1.); //2. * pi;\nconst float maxFloat = intBitsToFloat(0x7f7fffff);\n\nvec4 premult(vec4 color) {\n    return vec4(color.rgb * color.a, color.a);\n}\n\nvec4 premult(vec3 rgb, float alpha) {\n    return vec4(rgb * alpha, alpha);\n}\n\nvec4 comp(vec4 bg, vec4 fg) {\n    return fg + bg * (1. - fg.a);\n}\n    \nvec4 comp(vec4 bg, vec3 fg, float a) {\n    return vec4(fg + bg.rgb * (1. - a), bg.a + a);\n}\n    \nvec3 comp(vec3 bg, vec3 fg, float a) {\n    return fg + bg * (1. - a);\n}\n\n//https://www.shadertoy.com/view/ltXSDB\n// Solve cubic equation for roots\nvec3 solveCubic(float a, float b, float c)\n{\n    float p = b - a*a / 3., p3 = p*p*p;\n    float q = a * (2.*a*a - 9.*b) / 27. + c;\n    float d = q*q + 4.*p3 / 27.;\n    float offset = -a / 3.;\n    if(d >= 0.) { \n        float z = sqrt(d);\n        vec2 x = (vec2(z, -z) - q) / 2.;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1./3.));\n        return vec3(offset + uv.x + uv.y);\n    }\n    float v = acos(-sqrt(-27. / p3) * q / 2.) / 3.;\n    float m = cos(v), n = sin(v)*1.732050808;//sqrt(3.);\n    return vec3(m + m, -n - m, n - m) * sqrt(-p / 3.) + offset;\n}\n\n// Test if point p crosses line (a, b), returns sign of result\nfloat testCross(vec2 a, vec2 b, vec2 p) {\n    return sign((b.y-a.y) * (p.x-a.x) - (b.x-a.x) * (p.y-a.y));\n}\n\n// Determine which side we're on (using barycentric parameterization)\nfloat signBezier(vec2 A, vec2 B, vec2 C, vec2 p)\n{ \n    vec2 a = C - A, b = B - A, c = p - A;\n    vec2 bary = vec2(c.x*b.y-b.x*c.y,a.x*c.y-c.x*a.y) / (a.x*b.y-b.x*a.y);\n    vec2 d = vec2(bary.y * 0.5, 0.0) + 1.0 - bary.x - bary.y;\n    return mix(sign(d.x * d.x - d.y), mix(-1.0, 1.0, \n        step(testCross(A, B, p) * testCross(B, C, p), 0.0)),\n        step((d.x - d.y), 0.0)) * testCross(A, C, B);\n}\n\n//https://www.shadertoy.com/view/ltXSDB\n// Find the signed distance from a point to a bezier curve\n// returns a vec4: (dist to boundary, dist to curve, sign, parameter [0-1])\nvec4 sdBezier(vec2 p, vec3 A, vec3 B, vec3 C)\n{    \n    //B = (4.0 * B - A - C) / 2.0;\n    // handle instability when B is midpoint between A and C\n    //B = vec3(mix(B.xy + vec2(1e-4), B.xy, abs(sign(B.xy * 2.0 - A.xy - C.xy))), B.z);\n    \n    vec3 a = B - A;\n    vec3 b = A - B * 2.0 + C;\n    vec3 c = a * 2.0;\n    vec2 d = A.xy - p;\n    \n    vec3 k = vec3(3.*dot(a.xy,b.xy),2.*dot(a.xy,a.xy)+dot(d.xy,b.xy),dot(d.xy,a.xy)) / dot(b.xy,b.xy);      \n    vec3 t = clamp(solveCubic(k.x, k.y, k.z), 0., 1.);\n    vec3 it = vec3(1.0) - t;\n\n    vec3 pos0 = A + (c + b*t.x)*t.x;\n    vec3 pos1 = A + (c + b*t.y)*t.y;\n    vec3 pos2 = A + (c + b*t.z)*t.z;\n\n    float dis0 = length(pos0.xy - p) - pos0.z;\n    float dis1 = length(pos1.xy - p) - pos1.z;\n    float dis2 = length(pos2.xy - p) - pos2.z;\n    \n\tfloat minT = t.x;\n    vec3 minP = pos0;\n\tfloat minDis = dis0;\n\tif (dis1 < minDis) { minDis = dis1; minT = t.y; minP = pos1; }\n\tif (dis2 < minDis) { minDis = dis2; minT = t.z; minP = pos2; }\n            \n    return vec4(minDis, minDis + minP.z, signBezier(A.xy, B.xy, C.xy, p), minT);\n}\n\nfloat sdBezierMin2(vec2 p, vec3 a, vec3 b, vec3 c, float dist) {\n    vec4 d = sdBezier(p, a, b, c);\n    if (d.x < dist) return d.x;\n    else return dist;\n}\n\nfloat sdBezier2(vec2 p, vec3 a, vec3 b, vec3 c) {\n    vec4 d = sdBezier(p, a, b, c);\n    return d.x;\n}\n\n// returns a vec4: (dist to boundary, dist to curve, sign, parameter [0-1])\nvec4 sdCurve(vec2 p, int n, vec3[16] pts) {\n    int nn = n - 1;\n    vec4 d = vec4(maxFloat);    \n    vec3 pp1 = mix(pts[0], pts[1], -0.001), pp2;\n    float oofn = 1.0 / (float(n));\n    for (int i = 0; i < nn; i++) {\n        pp2 = 0.5 * (pts[i] + pts[i+1]);\n        vec4 e = sdBezier(p, pp1, pts[i], pp2);\n        pp1 = pp2;\n        if (e.x < d.x) d = vec4(e.xyz, (e.w+float(i))*oofn);\n    }\n    pp2 = pts[nn];\n    vec4 e = sdBezier(p, pp1, pts[nn], pp2);\n    if (e.x < d.x) d = vec4(e.xyz, (e.w+float(nn))*oofn);\n\n    // signBezier fails on the first & last segments, here's a patch\n    if (d.w <= oofn) {\n        d.z = dot(p - pts[0].xy, rot90( pts[0].xy - pts[1].xy ) ) < 0. ? 1. : -1.;\n    }\n    else if (d.w >= 1.-oofn) {\n    \td.z = dot(p - pts[nn].xy, rot90( pts[nn-1].xy - pts[nn].xy ) ) < 0. ? 1. : -1.;\n    }\n\n    return d;\n}\n\n// 2 output vectors: curvePoint, curveTangent\nvoid evalBezier(float t, vec2 a, vec2 b, vec2 c, out vec2 curvePoint, out vec2 curveTangent) {\n    t = clamp(t, 0., 1.);\n    curvePoint = mix(mix(a, b, t), mix(b, c, t), t);\n    curveTangent = 2. * (( a + c - 2. * b ) * t + ( b - a ));\n}\n\n// 2 output vectors: curvePoint, curveTangent\nvoid evalCurve(float t, int n, vec3[16] pts, out vec2 curvePoint, out vec2 curveTangent) {\n    float nt = clamp(t, 0.0001, .9999) * float(n);\n    int j = int(nt);\n    int i = max(0, j - 1);\n    int k = min(n-1, j + 1);\n    float tSegment = nt - float(j);\n    \n    vec2 a = pts[i].xy;\n    vec2 b = pts[j].xy;\n    vec2 c = pts[k].xy;\n    \n    a = mix(a, b, .5);\n    c = mix(b, c, .5);\n    \n    curvePoint = mix(mix(a, b, tSegment), mix(b, c, tSegment), tSegment);\n  \tvec2 ba = b-a;\n   \tcurveTangent = 2. * (( c - b - ba ) * tSegment + ( ba ));\n}\n\nstruct Hit {\n    float dBound;\n    float dCurve;\n    float sign;\n    vec2 pos;\n    vec2 tangent;\n    vec3 normal;\n    vec2 uv;\n};\n\n// vec4 d is the same format as return from sdBezier: vec4( dBound, dCurve, sign, param )\nvec2 calcBezierUv(float dBound, float dCurve, float sign, float param) {\n    return vec2(param, .5 + .5 * sign * dCurve / (abs(dBound) + dCurve));\n}\n\nHit calcBezierHit(vec2 uv, vec3 a, vec3 b, vec3 c) {\n    Hit hit;\n    vec4 d = sdBezier(uv, a, b, c);\n    hit.dBound = d.x;\n    hit.dCurve = d.y;\n    hit.sign = d.z;\n    hit.uv = calcBezierUv(d.x, d.y, d.z, d.w);\n    evalBezier(d.w, a.xy, b.xy, c.xy, hit.pos, hit.tangent);\n    float z = sin(hit.uv.y * pi);\n    hit.normal = normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n    return hit;\n}\n\nHit calcCurveHit(vec2 uv, int n, vec3[16] pts) {\n    Hit hit;\n    vec4 d = sdCurve(uv, n, pts);\n    hit.dBound = d.x;\n    hit.dCurve = d.y;\n    hit.sign = d.z;\n    hit.uv = calcBezierUv(d.x, d.y, d.z, d.w);\n    evalCurve(d.w, n, pts, hit.pos, hit.tangent);\n    float z = sin(hit.uv.y * pi);\n    hit.normal = normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n    return hit;\n}\n\nvec3 calcCurveRoundNormal(vec2 uv, Hit hit) {\n    float z = sin(hit.uv.y * pi);\n    return normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n}\n\nvec3 calcCurveTentNormal(vec2 uv, Hit hit) {\n    float z = abs(hit.uv.y);\n    return normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n}\n\n// a & b are two points w/ radius. a.xy = 2d point, a.z = radius\n// u=along curve v=perpendicular\nfloat sdFatLine2All(vec2 p, vec3 a, vec3 b, out float distToCurve, out vec2 uv) {\n    vec2 d = b.xy - a.xy;\n    vec2 pd = p - a.xy;\n    float t = dot(pd, d) / dot(d, d);\n    t = min(1.0, max(0.0, t));\n    vec2 cp = a.xy + t * d;\n    \n    vec2 n = p - cp;\n    distToCurve = length(n);\n    \n    // remember a.z & b.z are radius\n    float cr = mix(a.z, b.z, t);\n    float v = .5 + .5 * dot(vec2(-pd.y, pd.x), normalize(d)) / cr;\n    uv = vec2(t, v);\n\n    float distToBoundary = distToCurve - cr;\n    \n    return distToBoundary;\n}\n\nfloat sdFatLine2(vec2 p, vec3 a, vec3 b)\n{\n    float dummy_dc;\n    vec2 dummy_uv;\n    return sdFatLine2All(p, a, b, dummy_dc, dummy_uv);\n}\n\nmat2 rot(float a)\n{\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(c, s, -s, c);\n}\n\nfloat remap(float v, float min1, float max1, float min2, float max2) {\n    return min2 + (max2 - min2) * (v - min1) / (max1 - min1);\n}\n\nfloat bias(float x, float b) { return pow(x,log(b)/log(0.5)); }\n\nfloat gain(float x, float g) { return (x<0.5) ? bias(2.*x,1.-g)/2. : 1. - bias(2.-2.*x,1.-g)/2.; }\n\nfloat aaFloor(float x) {\n    float dx = 2. * length(vec2(dFdx(x), dFdy(x)));\n    float fx = fract(x), idx = 1. - dx;\n    return (fx < idx) ? x - fx : remap(fx, idx, 1., x-fx, x);\n}\n\nfloat aaFract(float x) {\n    float dx = 2. * length(vec2(dFdx(x), dFdy(x)));\n    float fx = fract(x), idx = 1. - dx;\n    return (fx < idx) ? fx : remap(fx, idx, 1., fx, 0.);\n}\n\nfloat stairs(float x, float steps) {\n    return floor(x * steps) / steps;\n}\n\nfloat stairs2(float x, float steps) {\n    return round(x * steps) / steps;\n}\n\nfloat escalator(float x, float steps, float time) {\n    float dx = 1. / steps;\n    x = remap(x, 0., 1., -dx/2., 1.+dx/2.) + dx/2.;\n    float ex = (x - time*dx) * steps;\n    float ey = (aaFloor(ex) + time) * dx;\n    return clamp(ey, 0., 1.);\n}\n\nvec2 escalatorId(float x, float steps, float time) {\n    float dx = 1. / steps;\n    x = remap(x, 0., 1., -dx/2., 1.+dx/2.) + dx/2.;\n    float ex = (x - time*dx) * steps;\n    float id = floor(ex);\n    float ey = (aaFloor(ex) + time) * dx;\n    return vec2(clamp(ey, 0., 1.), id);\n}\n\nfloat saw(float x) {\n    float mx = mod(x,1.);\n    return 2. * min(mx, 1.-mx);\n}\n\nfloat dline(vec2 p, vec2 lp, vec2 ld) {\n    return dot(p-lp, ld);\n}\n\nfloat sqr(float x) { return x*x; }\n\nfloat d2a (vec2 d) {\n    return atan(d.y, d.x);\n}\n\nvec2 a2d (float a) {\n    return vec2(cos(a), sin(a));\n}\n\nfloat sdEdgeNormal(vec2 x, vec2 p, vec2 normal) {\n    return dot(x-p, normal);\n}\n\nfloat sdEdgePoints(vec2 x, vec2 p1, vec2 p2) {\n    return dot(x-p1, normalize(rot90(p2 - p1)));\n}\n\n\n// lots of distance functions from IQ\n// https://iquilezles.org/articles/distfunctions\n\nfloat sdBox3( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdBox2( vec2 p, vec2 b )\n{\n  vec2 d = abs(p) - b;\n  return min(max(d.x,d.y),0.) + length(max(d,0.));\n}\n\nfloat udRoundBox( vec2 p, vec2 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat udBox( vec2 p, vec2 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat sdCircle( vec2 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat sdCapsule2All( vec2 p, vec2 a, vec2 b, float r, out float distToCenter, out vec2 uv, out vec2 pCenter )\n{\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    distToCenter = length( pa - ba*h );\n    float distToBoundary = distToCenter - r;\n    return distToBoundary;\n}\n\nfloat sdCapsule2( vec2 p, vec2 a, vec2 b, float r )\n{\n    vec2 dummy_pc, dummy_uv;\n    float dummy_dc;\n    return sdCapsule2All(p, a, b, r, dummy_dc, dummy_uv, dummy_pc);\n}\n\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n// d1 minus d2\nfloat sdSubtract( float d1, float d2 )\n{\n    return max(d1, -d2);\n}\n\n// d1 union d2\nfloat sdUnion( float d1, float d2 )\n{\n    return min(d1, d2);\n}\n","name":"Common","description":"","type":"common"}]}