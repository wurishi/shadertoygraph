{"ver":"0.1","info":{"id":"wdcXRn","date":"1571285864","viewed":2114,"name":"Blinn Phong Shading Model","username":"rishipandey125","description":"First GLSL project. Implemented a basic Blinn Phong Shading Model. Building my skills in GLSL and Shaders to further understand CG in Film/Animation.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["phong"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 background(vec3 rd) {\n\tfloat sky = max(0.0, dot(rd, vec3(0.0, 1.0, 0.0)));//sky gradient\n\tvec3 sky_color = vec3(0.5,0.8,1.0);//sky color\n\treturn pow(sky, 1.0)*sky_color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = vec3(.6);\n    vec2 cord = fragCoord/iResolution.xy;\n    vec3 center = vec3(0.5,0.5,5.0);\n    float radius = 0.3;\n    float aspect_ratio = iResolution.x/iResolution.y;\n    cord.x *= aspect_ratio;\n    center.x *= aspect_ratio;\n    if (length(cord-vec2(center.x,center.y)) <= radius) {\n      color = vec3(0.8,0.3,1);\n      vec3 camera = vec3(0.5,0.5,0);\n      vec3 point_light = vec3(10.0*sin(iTime*0.5),5.0,-1);\n      float z = center.z - sqrt(pow(radius,2.0)-pow(cord.y-center.y,2.0));\n      vec3 curr = vec3(cord,z);\n      vec3 normal = normalize(curr-center);\n      vec3 light = normalize(point_light-curr);\n      vec3 view = normalize(camera-curr);\n      vec3 h = normalize(light+view);\n      vec3 ambient = .1*color;\n      vec3 diffuse = vec3(max(dot(normal,light),0.0));\n      vec3 specular = vec3(max(0.2*pow(dot(normal,h),200.0),0.0));\n      color *= ambient+diffuse+specular;\n    } else {\n      color = background(vec3(cord,0));\n    }\n    fragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}