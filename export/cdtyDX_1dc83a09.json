{"ver":"0.1","info":{"id":"cdtyDX","date":"1695588409","viewed":17,"name":"angular noise test","username":"ylegall","description":"radial noise test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","atan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.28318530718\n#define PI 3.14159265359\n\nconst float rows = 5.0;\nconst int len = 1;\nconst float cols = rows;\nconst float twist = 0.0;\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec2 cell_pos(int col, int row) {\n  vec2 cell_uv = vec2(col, row) / vec2(cols, rows);\n  vec2 cell_center = cell_uv + vec2(0.5/cols, 0.5/rows);\n  \n  // jitter center points:\n  // float angle = TAU * (cell_center.x + cell_center.y + 0.5 * iTime);\n  // float radius = 0.1 / rows;\n  // vec2 center = cell_center + radius * vec2(cos(angle), sin(angle));\n  \n  vec2 center = cell_center;\n  \n  return center;\n}\n\nfloat cell_angle(int col, int row) {\n//   float dist = distance(vec2(col, row), vec2(rows/2.0, cols/2.0));\n//   float dist = (col + 0.5)/cols + (row + 0.5)/rows;\n//   float angle = atan(col, row) / PI;\n//   angle = 0.5 + 0.5 * angle;\n//   return angle + dist;\n  \n  float t = iTime / 5.0;\n  int parity = (col % 2) + (row % 2);\n  t += 0.5 * float(row % 2);\n  t += rand(vec2(col, row));\n  if (parity % 2 == 0) {\n    return 1.0 - t;\n  } else {\n    return t;\n  }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord / iResolution.xy;  // normalized uvs\n  uv.x *= iResolution.x / iResolution.y; // fix aspect ratio\n  ivec2 coord = ivec2(int(uv.x * cols), int(uv.y * rows));\n  \n  \n  float total = 0.0;\n  float total_dist = 0.0;\n  for (int i=-len; i<=len; i++) {\n    for (int j=-len; j<=len; j++) {\n      ivec2 ncoord = ivec2(coord.x + j, coord.y + i);\n      vec2 npos = cell_pos(ncoord.x, ncoord.y);\n      float ndist = 0.25 - distance(uv, npos);\n      float angle = atan(uv.y-npos.y, uv.x-npos.x);\n      angle += TAU * cell_angle(ncoord.x, ncoord.y);\n      angle = 0.5 + 0.5 * sin(angle + twist * ndist);\n      \n      ndist = smoothstep(0.05, 0.25, ndist);\n      total += (ndist * angle);\n      total_dist += ndist;\n    }\n  }\n  total /= total_dist;\n  total = pow(total, 2.0);\n  float dist = total;\n\n  fragColor = vec4(dist, dist, dist, 1.0);\n}","name":"Image","description":"","type":"image"}]}