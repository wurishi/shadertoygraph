{"ver":"0.1","info":{"id":"ds23Rz","date":"1667159322","viewed":247,"name":"Artober - Growing up","username":"Flopine","description":"Day 25 of october's challenge... yeaaaah I'm super late but am trying my best XD","likes":25,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","reactiondiffusion","ortho","grayscott"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nfloat SDF (vec3 p)\n{\n    p.yz *= rot(PI/4.);\n    float aratio = iResolution.y/iResolution.x;\n    float gs = texture(iChannel0, p.xz*vec2(aratio, 1.)*.25+.5).y*0.25;\n    p.y += gs;\n    \n    return abs(p.y)-0.1;\n}\n\nvec3 gn (vec3 p)\n{\n    vec2 eps = vec2(0.01,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nfloat AO (vec3 p, vec3 n, float e)\n{return clamp(SDF(p+e*n)/e, 0., 1.);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 cuv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(cuv*1., -20.), rd=vec3(0.,0.0,1.),p=ro,\n    col=vec3(0.);\n    \n    bool hit=false;\n    for (float i=0.; i<50.; i++)\n    {\n        float d = SDF(p);\n        d = max(abs(d*.25), 0.01);\n        p += d*rd;\n    }\n    \n    float t = length(ro-p);\n    vec3 n = gn(p);\n    float ao = AO(p,n,0.05)+AO(p,n,0.1)+AO(p,n,0.25);\n    col = vec3(ao);\n\n    col = mix(col, vec3(0.05, 0.5, 0.5), 1.-exp(-0.004*t*t)); \n    \n    fragColor = vec4(sqrt(col), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 laplacian (vec2 p, vec2 current)\n{\n    vec2 res = iResolution.xy,\n    sum_a = vec2(0.),\n    \n    up = p+vec2(0.,1.)/res,\n    down = p+vec2(0.,-1.)/res,\n    left = p+vec2(-1.,0.)/res,\n    right = p+vec2(1.,0.)/res,\n    \n    upright = p+vec2(1.,1.)/res,\n    upleft = p+vec2(-1.,1.)/res,\n    downright = p+vec2(1.,-1.)/res,\n    downleft = p+vec2(-1.,-1.)/res;\n    \n    sum_a -= current;\n    sum_a += texture(iChannel0, up).xy*0.2;\n    sum_a += texture(iChannel0, down).xy*0.2;\n    sum_a += texture(iChannel0, left).xy*0.2;\n    sum_a += texture(iChannel0, right).xy*0.2;\n    \n    sum_a += texture(iChannel0, upright).xy*0.05;\n    sum_a += texture(iChannel0, upleft).xy*0.05;\n    sum_a += texture(iChannel0, downright).xy*0.05;\n    sum_a += texture(iChannel0, downleft).xy*0.05;\n    \n    return sum_a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy,\n    centered_uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    if (iTime < .5 || iFrame == 0)\n    {\n        fragColor = vec4(1., init_state(centered_uv), 0., 1.);\n        return;\n    }\n\n    vec2 c = texture(iChannel0, uv).xy,\n    l =laplacian(uv, c);\n    \n    float new_a = (da*l.x -c.x*c.y*c.y + f*(1.-c.x) )*dt,\n    new_b = (db*l.y +c.x*c.y*c.y - (k+f)*c.y)*dt;\n\n    vec2 new_agents = vec2(new_a, new_b)+c;\n\n    fragColor = vec4(new_agents, 0., 1.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 laplacian (vec2 p, vec2 current)\n{\n    vec2 res = iResolution.xy,\n    sum_a = vec2(0.),\n    \n    up = p+vec2(0.,1.)/res,\n    down = p+vec2(0.,-1.)/res,\n    left = p+vec2(-1.,0.)/res,\n    right = p+vec2(1.,0.)/res,\n    \n    upright = p+vec2(1.,1.)/res,\n    upleft = p+vec2(-1.,1.)/res,\n    downright = p+vec2(1.,-1.)/res,\n    downleft = p+vec2(-1.,-1.)/res;\n    \n    sum_a -= current;\n    sum_a += texture(iChannel0, up).xy*0.2;\n    sum_a += texture(iChannel0, down).xy*0.2;\n    sum_a += texture(iChannel0, left).xy*0.2;\n    sum_a += texture(iChannel0, right).xy*0.2;\n    \n    sum_a += texture(iChannel0, upright).xy*0.05;\n    sum_a += texture(iChannel0, upleft).xy*0.05;\n    sum_a += texture(iChannel0, downright).xy*0.05;\n    sum_a += texture(iChannel0, downleft).xy*0.05;\n    \n    return sum_a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy,\n    centered_uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    if (iTime < .5 || iFrame == 0)\n    {\n        fragColor = vec4(1., init_state(centered_uv), 0., 1.);\n        return;\n    }\n\n    vec2 c = texture(iChannel0, uv).xy,\n    l =laplacian(uv, c);\n    \n    float new_a = (da*l.x -c.x*c.y*c.y + f*(1.-c.x) )*dt,\n    new_b = (db*l.y +c.x*c.y*c.y - (k+f)*c.y)*dt;\n\n    vec2 new_agents = vec2(new_a, new_b)+c;\n\n    fragColor = vec4(new_agents, 0., 1.);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define da 1.\n#define db 0.5\n#define f 0.055\n#define k 0.062\n#define dt 1.\n\n#define iTime mod(iTime, 20.)\n\nfloat init_state (vec2 uv)\n{\n    uv = fract(uv-.5)-.5;\n    return step( max( abs(uv.x), dot(abs(uv), normalize(vec2(1., sqrt(3.)))) ), .1); \n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec2 laplacian (vec2 p, vec2 current)\n{\n    vec2 res = iResolution.xy,\n    sum_a = vec2(0.),\n    \n    up = p+vec2(0.,1.)/res,\n    down = p+vec2(0.,-1.)/res,\n    left = p+vec2(-1.,0.)/res,\n    right = p+vec2(1.,0.)/res,\n    \n    upright = p+vec2(1.,1.)/res,\n    upleft = p+vec2(-1.,1.)/res,\n    downright = p+vec2(1.,-1.)/res,\n    downleft = p+vec2(-1.,-1.)/res;\n    \n    sum_a -= current;\n    sum_a += texture(iChannel0, up).xy*0.2;\n    sum_a += texture(iChannel0, down).xy*0.2;\n    sum_a += texture(iChannel0, left).xy*0.2;\n    sum_a += texture(iChannel0, right).xy*0.2;\n    \n    sum_a += texture(iChannel0, upright).xy*0.05;\n    sum_a += texture(iChannel0, upleft).xy*0.05;\n    sum_a += texture(iChannel0, downright).xy*0.05;\n    sum_a += texture(iChannel0, downleft).xy*0.05;\n    \n    return sum_a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy,\n    centered_uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    if (iTime < .5 || iFrame == 0)\n    {\n        fragColor = vec4(1., init_state(centered_uv), 0., 1.);\n        return;\n    }\n\n    vec2 c = texture(iChannel0, uv).xy,\n    l =laplacian(uv, c);\n    \n    float new_a = (da*l.x -c.x*c.y*c.y + f*(1.-c.x) )*dt,\n    new_b = (db*l.y +c.x*c.y*c.y - (k+f)*c.y)*dt;\n\n    vec2 new_agents = vec2(new_a, new_b)+c;\n\n    fragColor = vec4(new_agents, 0., 1.);\n}","name":"Buffer C","description":"","type":"buffer"}]}