{"ver":"0.1","info":{"id":"stBXzt","date":"1628353712","viewed":170,"name":"Fluid Morphing","username":"omegasbk","description":"Fluid SDF","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["sdf","morphing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Made by Darko Supe (omegasbk)\n// 7.8.2021.\n// This example shows how easy it is to \n// morph shapes using signed distance function \n// interpolation.\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .005\n\n#define PI 3.14159265359\n\nconst vec3 lightPosition = vec3(0, 3, 4);\nconst vec3 lightColor    = vec3(0.2, 0.2, 0.2) * 2.;\n\nfloat getDistSphere(in vec3 p) \n{\n    p.y += sin(iTime) * 1.25;\n\n    vec4 s = vec4(0, 0, 0, .4);\n    \n    float sphereDist = length(p - s.xyz) - s.w;    \n    return sphereDist;\n}\n\nfloat getDistCube(in vec3 p) \n{\n    vec3 b = vec3(0.5);\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat smoothUnion(float d1, float d2, float k) \n{\n    float h = clamp(0.5 + 0.5 * (d2-d1) / k, 0.0, 1.0);\n    return mix(d2, d1, h) - k * h * (1.0  -h); \n}\n\nfloat getDist(in vec3 p)\n{\n    float delta = texture(iChannel1, (p.xy + p.xz + p.yz) / 4.).r;\n\n    return smoothUnion(getDistSphere(p), getDistCube(p), 1.5);\n}\n\nvec3 getNormal(in vec3 p) \n{\n    int body;\n    float d = getDist(p);\n    \n    vec2 e = vec2(.01, 0); \n    \n    vec3 n = d - vec3(\n        getDist(p - e.xyy), \n        getDist(p - e.yxy), \n        getDist(p - e.yyx));\n        \n    return normalize(n);\n}\n\nfloat rayMarch(in vec3 ro, in vec3 rd)\n{\n    float dO = 0.;\n    \n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd * dO;\n        float dS = getDist(p);\n        dO += dS;\n        \n        if (dO > MAX_DIST || dS < SURF_DIST) \n            break;\n    }\n    \n    return dO;\n}\n\nvec3 getLight(in vec3 p, in vec3 rd)\n{    \n\tvec3 normal = getNormal(p);\n    vec3 lightDir = normalize(p - lightPosition);\n    \n    float cosa = pow(0.5+0.5*dot(normal, -lightDir), 3.0);\n    float cosr = max(dot(-rd, reflect(lightDir, normal)), 0.0);\n    \n    vec3 ambiant = vec3(0.42);\n    vec3 diffuse = vec3(0.8 * cosa);\n    vec3 phong = vec3(0.5 * pow(cosr, 16.0));\n    \n    return lightColor * (ambiant + diffuse + phong);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime * 3.;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0., 0., 0.);\n    \n    // Camera movement\n    float focalLength = 4.;\n    float rotation = iTime / 2.;\n    ro = vec3(cos(rotation), 0., sin(rotation)) * focalLength;\n    vec3 rd = normalize(vec3(0.) - ro);\n    vec3 right = normalize(cross(rd, vec3(0., 1., 0.)));\n    vec3 up = cross(right, rd);\n   \trd =  normalize(uv.x * right + uv.y * up + rd);\n        \n    int body;\n    float d = rayMarch(ro, rd);\n    if (d < MAX_DIST)\n    {\n        vec3 p = ro + rd * d;   \n        \n        vec3 n = getNormal(p);\n        col = vec3(getLight(p, rd)) * 2.; \n        vec3 reflected = mix(texture(iChannel1, (p.xy + p.xz + p.yz) / 4.).rgb, \n                             texture(iChannel0, reflect(rd, n)).rgb, \n                             1. - texture(iChannel0, reflect(rd, n)).r / 3.);\n        col = mix(col, reflected, 0.95);\n    }\n    else\n    {\n        col = texture(iChannel0, rd).rgb;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}