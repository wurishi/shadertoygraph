{"ver":"0.1","info":{"id":"XtV3W3","date":"1477151115","viewed":1472,"name":"1 Byte binary/decimal counter","username":"rush_2112","description":"1 Byte binary/decimal counter 000 to 255 and repeat!","likes":22,"published":1,"flags":0,"usePreview":0,"tags":["binary","font","counter","digits","decimal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool bits[8];\nfloat rnd(vec2 inval){\n    return fract(sin(dot(inval.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat on_at(vec2 grid_num, int col, int row) {\n\tfloat rv = 0.0;\n\trv = float(grid_num.x == float(col) && grid_num.y == float(row));\t\t\n\treturn rv;\t\n}\n\nfloat dstate(int digit, vec2 gn) {\n\tfloat is0, is1, is2, is3, is4, is5, is6, is7, is8, is9;\n\tfloat shape0, shape1, shape2, shape3, shape4, shape5;\n\tfloat shape6, shape7, shape8, shape9;\n\tfloat rval = 0.0;\n\t\n\tis0 = float(digit == 0);\n\tis1 = float(digit == 1);\n\tis2 = float(digit == 2);\n\tis3 = float(digit == 3);\n\tis4 = float(digit == 4);\t\n\tis5 = float(digit == 5);\n\tis6 = float(digit == 6);\n\tis7 = float(digit == 7);\n\tis8 = float(digit == 8);\n\tis9 = float(digit == 9);\t\t\n\t\t\n\tshape0 = on_at(gn, 2,1) +\n\t\t\ton_at(gn, 3, 1) +\n\t\t\ton_at(gn, 4, 1) +\t\t\t\t\t\n\t\t\ton_at(gn, 1, 2) +\t\t\n\t\t\ton_at(gn, 1, 3) +\t\t\n\t\t\ton_at(gn, 1, 4) +\t\t\n\t\t\ton_at(gn, 1, 5) +\t\t\n\t\t\ton_at(gn, 1, 6) +\t\t\n\t\t\ton_at(gn, 1, 7) +\t\t\t\t\n\t\t\ton_at(gn, 5, 2) +\t\t\n\t\t\ton_at(gn, 5, 3) +\t\t\n\t\t\ton_at(gn, 5, 4) +\t\t\n\t\t\ton_at(gn, 5, 5) +\t\t\n\t\t\ton_at(gn, 5, 6) +\t\t\n\t\t\ton_at(gn, 5, 7) +\t\t\n\t\t\ton_at(gn, 2, 8) +\n\t\t\ton_at(gn, 3, 8) +\n\t\t\ton_at(gn, 4, 8);\t\t\t\t\t\t\n\tshape0 = float(shape0 > 0.0);\t\n\t\n\tshape1 = on_at(gn, 2,1) +\n\t\t\ton_at(gn, 3, 1) +\n\t\t\ton_at(gn, 4, 1) +\t\t\t\t\t\n\t\t\ton_at(gn, 3, 2) +\t\t\n\t\t\ton_at(gn, 3, 3) +\t\t\n\t\t\ton_at(gn, 3, 4) +\t\t\n\t\t\ton_at(gn, 3, 5) +\t\t\n\t\t\ton_at(gn, 3, 6) +\t\t\n\t\t\ton_at(gn, 3, 7) +\t\t\t\t\n\t\t\ton_at(gn, 3, 8) +\t\t\t\t\n\t\t\ton_at(gn, 2, 7);\t\t\t\t\t\t\n\tshape1 = float(shape1 > 0.0);\t\n\t\n\tshape2 = on_at(gn, 1, 1) +\n\t\t\ton_at(gn, 2, 1) +\n\t\t\ton_at(gn, 3, 1) +\n\t\t\ton_at(gn, 4, 1) +\n\t\t\ton_at(gn, 5, 1) +\t\t\t\n\t\t\ton_at(gn, 2, 1) +\t\t\t\n\t\t\ton_at(gn, 1, 2) +\n\t\t\ton_at(gn, 2, 3) +\n\t\t\ton_at(gn, 3, 4) +\n\t\t\ton_at(gn, 4, 5) +\n\t\t\ton_at(gn, 5, 6) +\n\t\t\ton_at(gn, 5, 7) +\t\t\t\n\t\t\ton_at(gn, 2, 8) +\n\t\t\ton_at(gn, 3, 8) +\n\t\t\ton_at(gn, 4, 8) +\t\t\t\n\t\t\ton_at(gn, 1, 7);\t\t\t\n\tshape2 = float(shape2 > 0.0);\n\t\n\tshape3 = on_at(gn, 1, 2) +\n\t\t\ton_at(gn, 2, 1) +\n\t\t\ton_at(gn, 3, 1) +\n\t\t\ton_at(gn, 4, 1) +\t\t\t\n\t\t\ton_at(gn, 5, 2) +\n\t\t\ton_at(gn, 5, 3) +\n\t\t\ton_at(gn, 5, 4) +\t\t\t\n\t\t\ton_at(gn, 5, 6) +\n\t\t\ton_at(gn, 5, 7) +\t\t\t\n\t\t\ton_at(gn, 3, 5) +\n\t\t\ton_at(gn, 4, 5) +\t\t\t\n\t\t\ton_at(gn, 2, 8) +\n\t\t\ton_at(gn, 3, 8) +\n\t\t\ton_at(gn, 4, 8) +\n\t\t\ton_at(gn, 1, 7);\t\t\t\n\tshape3 = float(shape3 > 0.0);\n\t\n\tshape4 = on_at(gn, 4, 1) +\n\t\t\ton_at(gn, 4, 2) +\n\t\t\ton_at(gn, 4, 3) +\n\t\t\ton_at(gn, 4, 4) +\n\t\t\ton_at(gn, 4, 5) +\n\t\t\ton_at(gn, 4, 6) +\n\t\t\ton_at(gn, 4, 7) +\n\t\t\ton_at(gn, 4, 8) +\t\t\t\n\t\t\ton_at(gn, 1, 4) +\n\t\t\ton_at(gn, 2, 4) +\n\t\t\ton_at(gn, 3, 4) +\n\t\t\ton_at(gn, 4, 4) +\n\t\t\ton_at(gn, 5, 4) +\t\t\t\n\t\t\ton_at(gn, 1, 5) +\n\t\t\ton_at(gn, 2, 6) +\n\t\t\ton_at(gn, 3, 7);\n\tshape4 = float(shape4 > 0.0);\n\t\n\tshape5 = on_at(gn, 2, 1) +\n\t\t\ton_at(gn, 3, 1) +\n\t\t\ton_at(gn, 4, 1) +\n\t\t\ton_at(gn, 1, 2) +\t\t\t\n\t\t\ton_at(gn, 5, 2) +\n\t\t\ton_at(gn, 5, 3) +\n\t\t\ton_at(gn, 5, 4) +\t\t\t\n\t\t\ton_at(gn, 1, 5) +\n\t\t\ton_at(gn, 2, 5) +\n\t\t\ton_at(gn, 3, 5) +\n\t\t\ton_at(gn, 4, 5) +\t\t\t\n\t\t\ton_at(gn, 1, 6) +\n\t\t\ton_at(gn, 1, 7) +\n\t\t\ton_at(gn, 1, 8) +\t\t\t\n\t\t\ton_at(gn, 2, 8) +\n\t\t\ton_at(gn, 3, 8) +\n\t\t\ton_at(gn, 4, 8) +\n\t\t\ton_at(gn, 5, 8);\n\tshape5 = float(shape5 > 0.0);\n\t\n\tshape6 = on_at(gn, 2, 1) +\n\t\t\ton_at(gn, 3, 1) +\n\t\t\ton_at(gn, 4, 1) +\n\t\t\ton_at(gn, 5, 2) +\n\t\t\ton_at(gn, 5, 3) +\n\t\t\ton_at(gn, 5, 4) +\t\t\t\n\t\t\ton_at(gn, 1, 2) +\n\t\t\ton_at(gn, 1, 3) +\n\t\t\ton_at(gn, 1, 4) +\n\t\t\ton_at(gn, 1, 5) +\n\t\t\ton_at(gn, 1, 6) +\t\t\t\n\t\t\ton_at(gn, 2, 5) +\n\t\t\ton_at(gn, 3, 5) +\n\t\t\ton_at(gn, 4, 5) +\n\t\t\ton_at(gn, 2, 7) +\n\t\t\ton_at(gn, 3, 8) +\n\t\t\ton_at(gn, 4, 8);\n\tshape6 = float(shape6 > 0.0);\n\t\n\tshape7 = on_at(gn, 2, 1) +\n\t\t\ton_at(gn, 2, 2) +\n\t\t\ton_at(gn, 3, 3) +\n\t\t\ton_at(gn, 3, 4) +\n\t\t\ton_at(gn, 4, 5) +\n\t\t\ton_at(gn, 4, 6) +\n\t\t\ton_at(gn, 5, 7) +\n\t\t\ton_at(gn, 5, 8) +\t\t\t\n\t\t\ton_at(gn, 1, 8) +\n\t\t\ton_at(gn, 2, 8) +\n\t\t\ton_at(gn, 3, 8) +\n\t\t\ton_at(gn, 4, 8);\n\tshape7 = float(shape7 > 0.0);\n\t\n\tshape8 = on_at(gn, 2, 1) +\n\t\t\ton_at(gn, 3, 1) +\n\t\t\ton_at(gn, 4, 1) +\t\t\t\n\t\t\ton_at(gn, 1, 2) +\n\t\t\ton_at(gn, 1, 3) +\n\t\t\ton_at(gn, 1, 4) +\t\t\t\n\t\t\ton_at(gn, 5, 2) +\n\t\t\ton_at(gn, 5, 3) +\n\t\t\ton_at(gn, 5, 4) +\t\t\t\n\t\t\ton_at(gn, 2, 5) +\n\t\t\ton_at(gn, 3, 5) +\n\t\t\ton_at(gn, 4, 5) +\t\t\t\n\t\t\ton_at(gn, 1, 6) +\n\t\t\ton_at(gn, 1, 7) +\t\t\t\n\t\t\ton_at(gn, 5, 6) +\n\t\t\ton_at(gn, 5, 7) +\t\t\t\n\t\t\ton_at(gn, 2, 8) +\n\t\t\ton_at(gn, 3, 8) +\n\t\t\ton_at(gn, 4, 8);\n\tshape8 = float(shape8 > 0.0);\n\t\n\tshape9 = on_at(gn, 2, 1) +\n\t\t\ton_at(gn, 3, 1) +\t\t\t\n\t\t\ton_at(gn, 4, 2) +\n\t\t\ton_at(gn, 5, 3) +\t\t\t\n\t\t\ton_at(gn, 2, 4) +\n\t\t\ton_at(gn, 3, 4) +\n\t\t\ton_at(gn, 4, 4) +\n\t\t\ton_at(gn, 5, 4) +\t\t\t\n\t\t\ton_at(gn, 5, 5) +\n\t\t\ton_at(gn, 5, 6) +\n\t\t\ton_at(gn, 5, 7) +\t\t\t\n\t\t\ton_at(gn, 1, 5) +\n\t\t\ton_at(gn, 1, 6) +\n\t\t\ton_at(gn, 1, 7) +\t\t\t\n\t\t\ton_at(gn, 2, 8) +\n\t\t\ton_at(gn, 3, 8) +\n\t\t\ton_at(gn, 4, 8);\t\t\t\t\t\t\n\tshape9 = float(shape9 > 0.0);\n\t\n\trval = shape0 * is0 +\n\t\t\tshape1 * is1 +\n\t\t\tshape2 * is2 +\n\t\t\tshape3 * is3 + \n\t\t\tshape4 * is4 + \n\t\t\tshape5 * is5 + \n\t\t\tshape6 * is6 + \n\t\t\tshape7 * is7 + \n\t\t\tshape8 * is8 + \n\t\t\tshape9 * is9;\t\t\t\t\n\treturn rval;\t\n}\n\nfloat bin_digit(int clock, vec2 grid_num) {\n\tbool isActive = false;\n\tfloat rv = 0.0;\n\t\t\n\tisActive = \n\t\t\tgrid_num.x == 7.0 && bits[0] ||\n\t\t\tgrid_num.x == 6.0 && bits[1] ||\n\t\t\tgrid_num.x == 5.0 && bits[2] ||\n\t\t\tgrid_num.x == 4.0 && bits[3] ||\n\t\t\tgrid_num.x == 3.0 && bits[4] ||\n\t\t\tgrid_num.x == 2.0 && bits[5] ||\n\t\t\tgrid_num.x == 1.0 && bits[6] ||\n\t\t\tgrid_num.x == 0.0 && bits[7];\t\t\t\n\treturn float(isActive);\n}\n\nfloat dist_to_line(vec2 pt1, vec2 pt2, vec2 testPt)\n{\n  vec2 lineDir = pt2 - pt1;\n  vec2 perpDir = vec2(lineDir.y, -lineDir.x);\n  vec2 dirToPt1 = pt1 - testPt;\n  return abs(dot(normalize(perpDir), dirToPt1));\n}\n\nfloat frame(vec2 pix, vec2 pos, vec2 size, float scale) {\n\tvec2 rpix, uv;\n\tfloat is_inside, is_core;\n\tfloat rv = 0.0;\n\tvec2 dist_to_edge;\n\tfloat ew_px = 8.0 * scale;\n\tfloat shine_px = 2.0;\n\tfloat isShadow;\n\tfloat shiner;\n\tfloat d;\n\tfloat show;\n\t\n\t// Area check\n\trpix = pix - pos;\n\tis_inside = float(rpix.x >= 0.0 && rpix.x < size.x && \n\t\t\t\t  rpix.y >= 0.0 && rpix.y < size.y);\n\tis_core = float(rpix.x > ew_px && rpix.x < size.x - ew_px &&\n\t\t\t\t\trpix.y > ew_px && rpix.y < size.y - ew_px);\n\t\t\n\t// Basic frame\n\tdist_to_edge = min(rpix, size-rpix);\n\tfloat v = min(dist_to_edge.x, dist_to_edge.y);\n\t//rv = 1.0 - smoothstep(0.0, ew_px, v);\t\n\trv = 0.7 * (1.0 - step(ew_px, v));\n\t\n\t// Shine A\n\td = dist_to_line(vec2(0.0, size.y), vec2(ew_px, size.y - ew_px), rpix);\n\tshiner = 1.0 - smoothstep(0.0, shine_px, d);\n\tshow = float(rpix.x < ew_px);\n\trv += shiner * 3.0 * show;\n\t\n\t// Shine B\n\td = dist_to_line(vec2(ew_px, size.y - ew_px), vec2(ew_px, ew_px), rpix);\n\tshiner = 1.0 - smoothstep(0.0, shine_px, d);\n\tshow = float(rpix.y > ew_px && rpix.y < size.y - ew_px);\n\trv += shiner * 3.0 * show;\n\t\n\t// Shine C\n\td = dist_to_line(vec2(0.0, size.y - ew_px), vec2(size.x, size.y - ew_px), rpix);\n\tshiner = 1.0 - smoothstep(0.0, shine_px, d);\n\tshow = float(rpix.x > ew_px && rpix.x < size.x - ew_px);\n\trv += shiner * 3.0 * show;\t\n\trv = clamp(rv, 0.0, 1.0);\n\t\n\t// Shadow\n\tbool a = (rpix.x >= rpix.y) && (rpix.y <= ew_px);\n\tbool b = (size.x - rpix.x  <= size.y - rpix.y) && (rpix.x >= size.x - ew_px);\n\tisShadow = float(a || b);\n\trv = rv - isShadow * 0.25;\n\t\n\trv = clamp(rv, 0.0, 1.0);\n\treturn rv * is_inside * (1.0 - is_core);\n}\n\nfloat bar_counter(int clock, vec2 pix, vec2 pos, vec2 size) {\n\tvec2 rpix;\n\tvec2 grids, grid_num;\n\tvec2 spacing;\n\tvec2 cell_min, cell_max, cell_uv;\n\tvec4 rc = vec4(0.0);\n\tfloat d;\n\tfloat on_level, on_off, off_level, brightness, light_level;\n\tfloat is_inside;\n\tfloat algo;\n\t\n\trpix = pix - pos;\n\tis_inside = float(rpix.x >= 0.0 && rpix.x < size.x && \n\t                  rpix.y >= 0.0 && rpix.y < size.y);\n\t\n\tgrids = vec2(8.0, 1.0);\n\tspacing = size / grids;\t\n\tgrid_num = floor(rpix / spacing);\n\tcell_min = grid_num * spacing;\n\tcell_max = cell_min + spacing;\n\tcell_uv = (rpix - cell_min) / (cell_max - cell_min);\n\tcell_uv = (2.0 * cell_uv) - 1.0;\t\n\t\n\t// Base level\n\tvec2 ev = abs(cell_uv);\n\tfloat d_to_edge = 1.0 - max(ev.x, ev.y);\n\tfloat base_cut = 0.10;\n\tfloat base_level = 0.12 * smoothstep(0.0, base_cut, d_to_edge);\t\n\t\t\t\n\t// Light level\n\td = length(cell_uv);\n\ton_level = 1.0;\n\toff_level = 0.125;\n\ton_off = bin_digit(clock, grid_num);\n\tbrightness = (on_level * on_off) + ( off_level * (1.0 - on_off)); // One or the other only\n\tlight_level = (brightness*2.5) * (1.0 - sqrt(d));\t\n\tlight_level = clamp(light_level, 0.0, 1.0);\n\t\n\talgo = (0.001 + base_level + light_level) * is_inside;\t\n\treturn algo;\t\n}\n\nfloat disp(int digit, vec2 pix, vec2 pos, vec2 size) {\n\tvec2 rpix;\n\tvec2 grids, grid_num;\n\tvec2 spacing;\n\tvec2 cell_min, cell_max, cell_uv;\n\tvec4 rc = vec4(0.0);\n\tfloat d;\n\tfloat on_level, on_off, off_level, brightness, light_level;\n\tfloat is_inside;\n\tfloat algo;\n\t\n\trpix = pix - pos;\n\tis_inside = float(rpix.x >= 0.0 && rpix.x < size.x && \n\t                  rpix.y >= 0.0 && rpix.y < size.y);\n\t\n\tgrids = vec2(7.0, 10.0);\n\tspacing = size / grids;\t\n\tgrid_num = floor(rpix / spacing);\n\tcell_min = grid_num * spacing;\n\tcell_max = cell_min + spacing;\n\tcell_uv = (rpix - cell_min) / (cell_max - cell_min);\n\tcell_uv = (2.0 * cell_uv) - 1.0;\t\n\t\t\t\n\t// Light level\n\td = length(cell_uv);\n\ton_level = 1.0;\n\toff_level = 0.125;\n\ton_off = dstate(digit, grid_num);\n\tbrightness = (on_level * on_off) + ( off_level * (1.0 - on_off)); // One or the other only\n\tlight_level = (brightness*2.5) * (1.0-sqrt(d));\t\n\tlight_level = clamp(light_level, 0.0, 1.0);\n\t\n\talgo = (0.001 + light_level) * is_inside;\n\t\n\treturn algo;\t\n}\n\nfloat background(vec2 pix, vec2 size) {\n\tvec2 rpix;\n\tvec2 grids, grid_num;\n\tvec2 spacing;\n\tvec2 cell_min, cell_max, cell_uv;\t\n\tfloat algo;\n\t\n\tgrids = vec2(300.0, 200.0);\n\tspacing = size / grids;\t\n\tgrid_num = floor(pix / spacing);\n\tcell_min = grid_num * spacing;\n\tcell_max = cell_min + spacing;\n\tcell_uv = (pix - cell_min) / (cell_max - cell_min);\n\tcell_uv = (2.0 * cell_uv) - 1.0;\t\n\t\t\t\n\talgo = 0.50 + (0.08 * rnd(grid_num * 0.01234));\n\t\t\n\treturn algo;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 fc = vec4(0.0);\n    vec2 reso = iResolution.xy;\n    vec2 pix = fragCoord;    \t\t\n\tvec2 uv = pix / reso;\t\n\tvec2 pos, size;\n\tfloat hwa = 10.0 / 7.0;\n\tvec2 info_size;\t\n\tfloat info[24];\t\n\tvec2 bar_pos, bar_size;\n\t//\n\tvec4 info_c = vec4(0.0);\n\tvec4 bar_c = vec4(0.0);\n\tvec4 bar_fr_c = vec4(0.0);\n\tvec4 decimal_fr_c = vec4(0.0);\n\tvec4 bin_c = vec4(0.0);\n\tvec4 dpa_c = vec4(0.0); \n\tvec4 dpb_c = vec4(0.0);\n\tvec4 dpc_c = vec4(0.0);\n\t//\n\tvec2 fr_ext, fr_size, fr_pos;\t\t\n\tvec2 decimal_pos, decimal_size;\t\n\tfloat frame_slower, clock;\t\n\tint d1, d10, d100;\n\tfloat cval;\n\tfloat px, py;\n\tfloat info_py;\n\tfloat isBackground;\n\tfloat fval;\n\tfloat scale = 1.0;\n\t\n\t// Clock\n\tcval = mix(30.0, 1.0, 50.0 * 0.01);\n\tframe_slower = floor(float(iFrame) / cval);\n\tclock = mod(frame_slower, 256.0);\n\t// Scale\n\tscale = 0.70;\n\t\n\t// Bits\n\tbits[0] = !(mod(floor(clock / 1.0), 2.0) == 0.0);\n\tbits[1] = !(mod(floor(clock / 2.0), 2.0) == 0.0);\n\tbits[2] = !(mod(floor(clock / 4.0), 2.0) == 0.0);\n\tbits[3] = !(mod(floor(clock / 8.0), 2.0) == 0.0);\n\t//\n\tbits[4] = !(mod(floor(clock / 16.0), 2.0) == 0.0);\n\tbits[5] = !(mod(floor(clock / 32.0), 2.0) == 0.0);\n\tbits[6] = !(mod(floor(clock / 64.0), 2.0) == 0.0);\n\tbits[7] = !(mod(floor(clock / 128.0), 2.0) == 0.0);\t\n\t\n\t\n\t// LEDs\n\tbar_size.x = 0.92 * reso.x * scale;\n\tbar_size.y = bar_size.x / 8.0;\n\tbar_pos.x = (reso.x / 2.0) - (bar_size.x / 2.0);\n\tbar_pos.y = reso.y * 0.25;\n\tif (pix.y >= bar_pos.y && pix.y <= bar_pos.y + bar_size.y) {\n\t\tbar_c = vec4(bar_counter(int(clock), pix, bar_pos, bar_size));\n\t}\n\t\t\n\t// LED Bar frame\n\tfr_ext = bar_size * vec2(0.02, 0.20);\n\tfr_size = bar_size + fr_ext;\n\tfr_pos = bar_pos - (fr_ext / 2.0);\t\t\n\tif (pix.y >= fr_pos.y && pix.y <= fr_pos.y + fr_size.y) {\n\t\tbar_fr_c = vec4(frame(pix, fr_pos, fr_size, scale)) * vec4(1.0, 1.0, 1.0, 1.0);\t\t\n\t}\n\t\n\t// Info digits\n\tinfo_size.x = 1.32 * ((bar_size.x / 8.0) / 3.0);\n\tinfo_size.y = info_size.x * hwa;\t\n\tinfo_py = bar_pos.y + bar_size.y + (12.0 * scale);\t\t\n\tif (pix.y >= info_py && pix.y <= info_py + info_size.y) {\t\t\n\t\tfval = 0.0;\n\t\tfval += disp(1, pix, vec2(bar_pos.x + (-0.029 * bar_size.x), info_py), info_size);\n\t\tfval += disp(2, pix, vec2(bar_pos.x + ( 0.012 * bar_size.x), info_py), info_size);\n\t\tfval += disp(8, pix, vec2(bar_pos.x + ( 0.060 * bar_size.x), info_py), info_size);\t\t\n\t\tfval += disp(6, pix, vec2(bar_pos.x + ( 0.130 * bar_size.x), info_py), info_size);\t\t\n\t\tfval += disp(4, pix, vec2(bar_pos.x + ( 0.180 * bar_size.x), info_py), info_size);\t\t\n\t\tfval += disp(3, pix, vec2(bar_pos.x + ( 0.255 * bar_size.x), info_py), info_size);\t\t\n\t\tfval += disp(2, pix, vec2(bar_pos.x + ( 0.305 * bar_size.x), info_py), info_size);\t\t\n\t\tfval += disp(1, pix, vec2(bar_pos.x + ( 0.383 * bar_size.x), info_py), info_size);\t\t\n\t\tfval += disp(6, pix, vec2(bar_pos.x + ( 0.428 * bar_size.x), info_py), info_size);\t\t\n\t\tfval += disp(8, pix, vec2(bar_pos.x + ( 0.532 * bar_size.x), info_py), info_size);\t\t\n\t\tfval += disp(4, pix, vec2(bar_pos.x + ( 0.655 * bar_size.x), info_py), info_size);\t\t\n\t\tfval += disp(2, pix, vec2(bar_pos.x + ( 0.785 * bar_size.x), info_py), info_size);\t\t\n\t\tfval += disp(1, pix, vec2(bar_pos.x + ( 0.910 * bar_size.x), info_py), info_size);\t\t\n\t\tinfo_c = vec4(fval) * vec4(1.0, 1.0, 0.0, 1.0);\t\t\n\t}\n\t\n\t// Binary digits\n\tvec2 bin_size;\n\tbin_size.x = bar_size.x / 8.0;\n\tbin_size.y = bin_size.x * (10.0 / 7.0);\t\n\tpy = bar_pos.y - (reso.y * 0.25 * scale);\t\n\tif (pix.y >= py && pix.y <= py + bin_size.y) {\n\t\tfloat fv = 0.0;\n\t\tfor (int idx = 0; idx < 8; idx++) {\n\t\t\tpx = bar_pos.x + (7.5 * scale) + (float(idx) * bin_size.x);\t\t\n\t\t\tfv += disp(int(bits[7-idx]), pix, vec2(px, py), bin_size * 0.70);\n\t\t}\n\t\tbin_c = vec4(fv) * vec4(1.0);\n\t}\n\t\n\t// Decimal counter\n\tdecimal_size.x = 0.12 * reso.x * scale;\n\tdecimal_size.y = decimal_size.x * (10.0 / 7.0);\t\n\tpy = bar_pos.y + (reso.y * 0.55 * scale);\n\tif (pix.y >= py && pix.y <= py + decimal_size.y) {\n\t\td1 = int(mod(floor(clock), 10.0));\n\t\td10 = int(mod(floor(clock / 10.0), 10.0));\n\t\td100 = int(mod(floor(clock / 100.0), 10.0));\t\t\n\t\tpx = (reso.x / 2.0) - (1.5 * decimal_size.x);\n\t\tdpa_c = vec4(disp(d100, pix, vec2(px, py), decimal_size)); // 100x\t\n\t\tpx = (reso.x / 2.0) - (0.5 * decimal_size.x);\n\t\tdpb_c = vec4(disp(d10, pix, vec2(px, py), decimal_size)); // 10x\t\n\t\tpx = (reso.x / 2.0) + (0.5 * decimal_size.x);\n\t\tdpc_c = vec4(disp(d1, pix, vec2(px, py), decimal_size)); // 1x\n\t}\n\t\n\t// Decimal frame\n\tvec2 all_size = decimal_size;\n\tall_size.x *= 3.0;\n\tfr_ext = all_size * vec2(0.06, 0.14);\n\tfr_size = all_size + fr_ext;\t\n\tpx = (reso.x / 2.0) - (1.5 * decimal_size.x);\n\tfr_pos = vec2(px, py) - (fr_ext / 2.0);\t\t\n\tif (pix.y >= fr_pos.y && pix.y <= fr_pos.y + fr_size.y) {\n\t\tdecimal_fr_c = vec4(frame(pix, fr_pos, fr_size, scale)) * vec4(1.0, 1.0, 1.0, 1.0);\n\t}\n\t\t\t\t\n\t// Final gather\n\tfc = info_c;\n\tfc += bar_c + bar_fr_c;\n\tfc += bin_c;\n\tfc += (dpa_c + dpb_c + dpc_c) * vec4(1.0, 1.0, 0.0, 1.0);\n\tfc += decimal_fr_c;\t\n\tfc += vec4(background(pix, reso)) * vec4(0.0, 0.5, 0.0, 1.0) * float(fc.a == 0.0);\n\n\tfragColor = fc;\n}\n\n","name":"Image","description":"","type":"image"}]}