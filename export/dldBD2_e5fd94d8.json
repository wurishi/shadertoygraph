{"ver":"0.1","info":{"id":"dldBD2","date":"1701633985","viewed":34,"name":"Sphere-Octopinski","username":"tholzer","description":"KIFS experiment part 2.1","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","fractal","raymarcher","sierpinsky"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Sphere-pinski\" by isaacchurchill. https://shadertoy.com/view/dtdfWB\n// 2023-12-03 19:54:32\n// Sphere-Octopinski.glsl\n// tags: 3d, raymarching, fractal, raymarcher, sierpinsky\n\nconst float MAX_DEEP = 9.;\nconst int   MAX_MARCHES = 300;\nconst float RAYMARCH_THRESHOLD = 0.001;\nconst float NORMAL_EPSILON = 0.001;\n\nmat2 rot_xy(float theta)\n{\n  float c=cos(theta), s=sin(theta);\n  return mat2(c,s,-s,c);\n}\n\nvec3 palette(float iter)\n{\n  return 0.5 + 0.5 * sin(iter + vec3(0, 1, 2));\n}\n\nvec4 union_de(vec4 a, vec4 b)\n{\n  return (b.w < a.w) ? b : a;\n}\n\nfloat box3d_de(vec3 p, vec3 sizes)\n{\n    vec3 temp = abs(p) - sizes;\n    return length(max(temp, 0.0)) + min(max(max(temp.x, temp.y), temp.z), 0.0);\n}\n\nfloat fractal_de(vec3 p, out float iter)\n{\n    float scale = 2.0;\n    float max_i = min(MAX_DEEP, floor(mod(iTime + 6.0, 16.)) + 1.0);\n    float s = 1.0;\n    float d = 1e6;\n    const float thickness = 0.05;\n    const float r = thickness / 2.0;\n    const float a = (1. - thickness) / 2.0;\n    for (float i = 0.0; i < max_i; i++) \n    {   p = abs(p);\n        if (p.x > p.y)  p.xy = p.yx;\n        if (p.y < p.z)  p.yz = p.zy;\n        if (p.x > p.z)  p.xz = p.zx;\n        float d1 = (length(p) - 0.5) * s;\n        if (d1 < d) iter = i;\n        d = min(d, d1);\n        p -= vec3(0.0, 0.5, 0.0);\n        p *= scale;\n        s /= scale;\n    }\n    return d;\n}\n\nfloat dist_estim(vec3 p, out vec3 col)\n{\n    float iter = 0.0;\n    float scale = 0.4;\n    float fractal = fractal_de(p / scale, iter) * scale;\n    vec3 plane_col = vec3(0.5);\n    if ((mod(p.x, 1.0) > 0.5) != (mod(p.z, 1.0) > 0.5)) {\n        plane_col = vec3(1.0);\n    }\n    vec4 de = vec4(palette(iter), fractal);\n    de = union_de(de, vec4(plane_col, abs(p.y + 0.4)));\n\n    col = de.xyz;\n    return de.w;\n}\n\nvec3 calc_normal(vec3 p)\n{\n    const vec2 eps = vec2(0.0, NORMAL_EPSILON);\n    vec3 temp = vec3(0.0);\n    return normalize(vec3(\n        dist_estim(p + eps.yxx, temp),\n        dist_estim(p + eps.xyx, temp),\n        dist_estim(p + eps.xxy, temp))\n      - dist_estim(p, temp));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\tuv = uv * 1.8 - 0.84;\n    uv.x *= iResolution.x / iResolution.y;\n    // camera steering\n    vec2 rot = (iMouse.xy / iResolution.xy - 0.5) * 4.0;\n    rot.y = rot.y*0.2 - 0.65;\n    vec3 ray_dir = normalize(vec3(uv, 2.0));\n    mat2 yz_mat = rot_xy(rot.y);\n    mat2 xz_mat = rot_xy(rot.x+0.08*cos(iTime));\n    ray_dir.yz *= yz_mat;\n    ray_dir.xz *= xz_mat;\n    vec3 ray_endpoint = vec3(0.0, 0.0, -1.0);\n    ray_endpoint.yz *= yz_mat;\n    ray_endpoint.xz *= xz_mat;\n    \n    vec3 col = vec3(0.5, 0.5, 0.7);\n    vec3 light_dir = normalize(vec3(0.3, 1.0, -0.5));\n    for (int march = 0; march < MAX_MARCHES; march++) \n    {   vec3 surface_col = vec3(0.0);\n        float dist = dist_estim(ray_endpoint, surface_col);\n        if (dist < RAYMARCH_THRESHOLD)\n        {   vec3 norm = calc_normal(ray_endpoint);\n            float intensity = max(dot(norm, light_dir), 0.0);\n            vec3 light_col = vec3(0.9);\n            vec3 ambient = vec3(0.1);\n            col = surface_col * (light_col * intensity + ambient);\n            break;\n        }\n        ray_endpoint += ray_dir * dist * 0.5;\n    }\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}