{"ver":"0.1","info":{"id":"fdcBDS","date":"1657066536","viewed":80,"name":"Hex in circle","username":"mikeeu","description":"A hexagon in a circle","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n#define TWO_PI 6.2831853\n\n// https://www.shadertoy.com/view/fd3SRf\nfloat sdHexagon( vec2 p, float s, float r ) {\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*s, k.z*s), s);\n    return length(p)*sign(p.y) - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy*0.5)/iResolution.y;\n\n    float h = smoothstep(0.333, 0.336, length(uv));\n\n    vec3 col = vec3(h);\n    \n    // time scale\n    float t = iTime;\n    t *= 1.75;\n    \n    // squaring creates snapping effect\n    float ft = fract(t) * fract(t);\n    \n    // this and next index\n    float i = mod(floor(t), 12.0);\n    float j = mod(floor(t) + 1., 12.0);\n    \n    \n    // outer angle of this and next step\n    float ao = (TWO_PI / 12.) * i;\n    float aon = (TWO_PI / 12.) * j;\n    \n    // translate uv\n    // mix between this and next step\n    uv.x += mix(sin(ao), sin(aon), ft) * 0.175;\n    uv.y += mix(cos(ao), cos(aon), ft) * 0.175;\n\n    // angle of the inner rotating hex\n    float a = ft * PI / 3.;\n    // 2d rotation matrix\n    mat2 rotation = mat2(cos(a), sin(a), -sin(a), cos(a));\n    uv.xy *= rotation;\n    \n    float hs = smoothstep(0.105, 0.1, sdHexagon(uv, 0.15, -0.1));\n    col = max(col, hs);\n    \n    // brighten\n    col += 0.2;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}