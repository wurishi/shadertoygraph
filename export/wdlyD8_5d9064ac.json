{"ver":"0.1","info":{"id":"wdlyD8","date":"1584729030","viewed":88,"name":"Cheshire eye from nature","username":"solquemal","description":"Experimenting ray marching technique","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Boundaries\n#define MAX_STEPS 32\n#define MAX_DIST 10.\n#define SURF_DIST .001\n\n//Auxiliar functions\nfloat opSubtraction( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//Scene and trace\n\nfloat scene(vec3 ray){\n    float radius = 0.3;\n    vec3 modSpace;\n    \n    float s = sdSphere(vec3(ray.xy,ray.z/1.2),0.55);\n    float sr = sdSphere(vec3(ray.x/0.5+sin(iTime)*0.02,ray.y/1.8,0.),0.22);\n \n    modSpace = vec3(ray.z,2.,ray.x);\n    ray = mod(ray, modSpace)-0.5*modSpace;\n    \n    float s2 = sdSphere(ray,radius);\n    \n\treturn min(opSubtraction(sr,s),s2);\n}\n\n\nvec3 trace(vec3 rayOrigin, vec3 dir) {\n\tfloat walk=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = rayOrigin + dir*walk;\n        float dS = scene(p);\n        walk += dS;\n        if(walk>MAX_DIST || dS<SURF_DIST) break;\n    }\n\n    return hsv2rgb(vec3((1.-walk)/1.9));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    uv = (uv*2.5) - vec2(2.5,1.2);\n    \n    vec3 camOrigin = vec3(0.,0.,-1.4);  \n    vec3 rayOrigin = vec3(camOrigin.xy + uv, camOrigin.z + 1.5);\n    \n    \n    \n    //Experimenting rotations\n    rayOrigin.yz *= Rot(-uv.y*sin(iTime/2.));\n    rayOrigin.xz *= Rot(-uv.x*cos(iTime/2.));\n\n\tvec3 dir = normalize(rayOrigin-camOrigin);\n    \n    \n    fragColor = vec4(trace(rayOrigin, dir),1.);\n}","name":"Image","description":"","type":"image"}]}