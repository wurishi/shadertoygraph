{"ver":"0.1","info":{"id":"fdfSWX","date":"1619298682","viewed":72,"name":"berber_cube_minecraft","username":"berberkirill","description":"реализована базовая часть а так же некоторые дополнительные часть:\n1) Мягкие тени\n2) Окружение в виде текстурированного куб-мапа\n3) Анти-алиасинг","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["cube","cmc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(5.1, 3.6, -6.3);\n\n\n//const vec3 LIGHT1_POS = vec3(-3, 1.5, 5);\nvec3 LIGHT1_POS = vec3(-4, 1.8, 3); // размывание\nconst float LIGHT1_RADIUS = 0.7;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 0.6);\n\n//const vec3 LIGHT2_POS = vec3(2, 1.0, -1);\nvec3 LIGHT2_POS = vec3(3.5, 0.7, -1); //размывание\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.9, 0.3, 0.9);\n\n//const vec3 LIGHT2_POS = vec3(2, 1.0, -1);\nvec3 LIGHT3_POS = vec3(-4.5, 1.4, -1); //размывание\nconst float LIGHT3_RADIUS = 0.35;\nconst vec3 LIGHT3_COLOR = vec3(0.19, 0.19, 0.9);\n\nconst float CUBE_LENGTH = 1.0;\n\nvec3 randDir;\n\n\n//(CAMERA_POS + t * viewVec).y == -1\n// t = (-1.0 - CAMERA_POS.y) / viewVec.y;\n    \nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal){ // позиция камеры и направление \n    float t = (-1.4 - pos.y) / dir.y;\n    if ( t <= 0.0){\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0){\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal){\n    //dot(pos + t * dir, pos + t * dir) == r * r\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t  + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    \n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    \n    float D = b * b - a * c;\n    if(D < 0.0){\n        return INF;\n    }\n    float t = (-b - sqrt(D));\n    if (t > 0.0){\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if(t < 0.0){\n        return INF;\n    }\n    \n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal){\n    float t = (-1.0 - pos.y) / dir.y;\n    if ( t <= 0.0){\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if(dot(worldPos.xz, worldPos.xz) < 2.0){\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    //dot(pos + t * dir, pos + t * dir) == r * r\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t  + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 2.0;\n    \n    float D = b * b - a * c;\n    if(D < 0.0){\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    \n    \n    if (t > 0.0){\n       worldPos = t * dir + pos;\n           if(worldPos.y < -1.0){\n               normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n               return t;   \n            }\n    }\n    t = (-b + sqrt(D)) / a;\n    if(t < 0.0){\n        return INF;\n    }\n    \n    worldPos = t * dir + pos;\n    if(worldPos.y < -1.0){\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;   \n    }\n    \n    return INF;\n}\n\n\n\nfloat traceCube(vec3 pos, vec3 dir, float a, out vec3 normal) {\n    \n    \n    vec3 l = vec3(a, a, a);\n    float k = a;\n    \n    vec3 tmin = (l - pos) / dir;\t\t\n    vec3 tmax = (-l - pos) / dir;\n    vec3 minxyz = tmin;\n    vec3 maxxyz = tmax;\n    \n    if (tmin.x < tmax.x){\n        minxyz.x = tmin.x;\n        maxxyz.x = tmax.x;\n    }else{\n        minxyz.x = tmax.x;\n        maxxyz.x = tmin.x;\n    }\n    if (tmin.y < tmax.y){\n        minxyz.y = tmin.y;\n        maxxyz.y = tmax.y;\n    }else{\n        minxyz.y = tmax.y;\n        maxxyz.y = tmin.y;\n    }\n    if (tmin.z < tmax.z){\n        minxyz.z = tmin.z;\n        maxxyz.z = tmax.z;\n    }else{\n        minxyz.z = tmax.z;\n        maxxyz.z = tmin.z;\n    }\n  \t\n    float max_xy;\n    float min_xy;\n    if (maxxyz.x < maxxyz.y){\n        min_xy = maxxyz.x;\n    } else{\n        min_xy = maxxyz.y;\n    }\n    if (minxyz.x > minxyz.y){\n        max_xy = minxyz.x;\n    } else{\n        max_xy = minxyz.y;\n    }\n    float far;\n    float near;\n    if (min_xy < maxxyz.z){\n        far = min_xy;\n    }else{\n        far = maxxyz.z;\n    }\n    if (max_xy > minxyz.z){\n        near = max_xy;\n    }else{\n        near = minxyz.z;\n    }\n    \n    \n    \n    float check;\n    if (far > near){\n        check = near;\n    }else{\n        check = INF;\n    }\n    \n    float delta = 1e-6;\n    if (check > 0.0) {\n        vec3 coord = pos + dir * check;\t\t\n\n        \n        if (coord.x <= -k + delta \n                && coord.x >= -k - delta) {\n            normal = vec3(-1, 0, 0);   \n        } \n        else if (coord.x >= k - delta \n                && coord.x <= k + delta) {\n            normal = vec3(1, 0, 0);    \n        } \n        else if (coord.z <= -k + delta \n                && coord.z >= -k - delta) {\n            normal = vec3(0, 0, -1);   \n        } \n        else if (coord.z >= k - delta \n                && coord.z <= k + delta) {\n            normal = vec3(0, 0, 1);   \n        } \n        else if (coord.y >= k - delta\n                && coord.y <= k + delta) {\n            normal = vec3(0, 1, 0);   \n        } \n        else if (coord.y <= -k + delta\n                && coord.y >= -k - delta) {\n            normal = vec3(0, -1, 0);\n        } \t\n        return check;\n    }   \n       \n    return INF;\n}\n\n\n\nbool isOccluded(vec3 pos, vec3 target){\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceCube(pos, dir, CUBE_LENGTH, sphNorm);\n    if (sphT < dist){\n        return true;\n    }\n    \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    if (cylT < dist){\n        return true;\n    }\n    return false;\n}\n\n\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal){\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0: 30.0f / distSq1;\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0: 10.0f / distSq2; //более тусклый\n    \n    vec3 toLight3 = LIGHT3_POS - pos;\n    float distSq3 = dot(toLight3, toLight3);\n    float att3 = isOccluded(pos, LIGHT3_POS + randDir * LIGHT3_RADIUS) ? 0.0: 20.0f / distSq3;\n    \n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHT3_COLOR\n        + texture(iChannel1, normal).rgb * 0.1 \n        );\n}\n\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2){\n    if( dot(v, normal) < 0.0){\n        normal = -normal;\n    }\n    float cosA =dot(v, normal);\n    float sinA = sqrt(1.0 - cosA* cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if(sinB > 1.0)\n    {\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    \n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x){\n    return x * x;\n}\n\nfloat rand( float frame){\n    \n    return fract(sin( dot(vec3(frame), vec3(12.9898, 78.233, 45.5432) )) * 43758.5453);\n}\n\nvec3 createMinecraft(vec2 fragCoord){\n    vec4 res;\n    vec3 d = vec3(fragCoord,1)/iResolution-0.5, p, c, f, g=d, o, y=vec3(0.1, 2, 0.7);\n            o.y = 3.*cos((o.x=.3)*(o.z=0.5));\n\n            for( float i=.0; i<9.; i+=.01 ) {\n                f = fract(c = o += d*i*.1), p = floor( c )*.3;\n                if( cos(p.z) + sin(p.x) > ++p.y ) {\n                    g = (f.y-.04*cos((c.x+c.z)*40.)>.8?y:f.y*y.yxz) / i;\n                    break;\n                }\n            }\n     res.xyz = g;\n     return res.xyz;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    \n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0)/iResolution.x;\n    \n    \n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    \n    vec3 viewVec = normalize(front + right *uv.x + up * uv.y);\n    vec3 LIGHT2_POS = LIGHT2_POS + vec3(1, 1, 1) * randVals.x * 0.04; //размывание\n    vec3 LIGHT1_POS = LIGHT1_POS + vec3(1, 1, 1) * randVals.x * 0.04; //размывание\n    vec3 LIGHT3_POS = LIGHT3_POS + vec3(1, 1, 1) * randVals.x * 0.04; //размывание\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float AIR_N = 1.0;\n    const float GLASS_N = 1.5;\n    float n1 = AIR_N;\n    //float n2 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 1.03;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for(int i = 0; i < 10; ++i){\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        \n        vec3 planeNorm;          \n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t){ //пересечение с плоскостью\n            t = planeT;\n            materialType = DIFFUSE; //EMISSION\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n            //if(randVals.y < 0.1){\n            //    materialType = REFLECTION;\n            //}\n        }\n        \n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm); //источник 1\n        if (light1T < t){ //пересечение с сферой 1\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t){ //пересечение с сферой 2\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        vec3 l3Norm;\n        float light3T = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_RADIUS, l3Norm);\n        if (light3T < t){ //пересечение с сферой 3\n            t = light3T;\n            materialType = EMISSION;\n            color = LIGHT3_COLOR;\n            normal = l3Norm;\n        }\n        \n        //vec3 sphNorm;\n        //float sphT = traceSphere(curPos/* - vec3(-1, 0.5, 2)*/, curDir, 1.0, sphNorm);\n        //if (sphT < t){ //пересечение с шаром \n        //    t = sphT;\n        //    normal = sphNorm;\n        //   if(randVals.x < GLASS_R){ //комбинирование рефракции и рефлекции\n        //        materialType = REFLECTION;\n        //    } else{\n        //        materialType = REFRACTION;\n        //   }\n            \n        //}\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t){ //пересечение с подставкой\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        \n        \n        vec3 cubeNorm;\n        float cubeT = traceCube(curPos, curDir, CUBE_LENGTH, cubeNorm);\n        \n        if (cubeT < t) {\n            vec3 worldPos = t * curDir + curPos;\n            \n            t = cubeT;\n            normal = normalize(cubeNorm);\n            //color = normal;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n                if(dot(curDir, normal) > 0.0){\n                    nEnter = AIR_N;\n                }else{\n                    nEnter = GLASS_N;\n                }\n                    \n            }\n        }\n        \n        \n        \n        vec3 minecraftNorm;\n        float minecraftT = traceCube(curPos, curDir, 0.65, minecraftNorm);\n        if (minecraftT < t) {\n            vec3 worldPos = t * curDir + curPos;\n            t = minecraftT;\n            normal = minecraftNorm;\n            materialType = EMISSION;\n            \n            /*if (randVals.x < DIAMOND_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult = vec3(1, 0, 0);\n                materialType = REFRACTION;\n                if(dot(curDir, normal) > 0.0){\n                    nEnter = GLASS_N;\n                }else{\n                    nEnter = DIAMOND_N;\n                }\n                    \n            }*/\n            \n            color += 1.0 * createMinecraft(fragCoord);\n        }\n        \n        \n        if (t != INF){ // пересечение\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if(materialType == EMISSION){\n                fragColor.rgb = color * colorMult; //color\n                break;\n            } else if(materialType == DIFFUSE){\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if(materialType == REFLECTION){\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if(materialType == REFRACTION){\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        }\n        else{\n            fragColor = texture(iChannel1, curDir);\n        }       \n        \n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}