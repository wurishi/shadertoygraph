{"ver":"0.1","info":{"id":"dsGGRt","date":"1678926086","viewed":127,"name":"hyperbolic hill","username":"izutionix","description":"what [url=https://www.shadertoy.com/view/ftcyW8]iq's 1/x distance[/url] looks like in 3d\n(using [url=https://www.shadertoy.com/view/WtGXDD]BigWIngs's raymarching template[/url] )","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["sharp","hill","peak","hyperbole"],"hasliked":0,"parentid":"WtGXDD","parentname":"RayMarching starting point"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// forked from \"RayMarching starting point\" by Martijn Steinrucken aka The Art of Code/BigWings\n\n#define MAX_STEPS 1000\n#define MAX_DIST 1000.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdOOX( in vec2 p )\n{\n    p = (p.x>p.y) ? p.yx : p.xy;\n    \n    float x2 = p.x*p.x/16.0;\n    float y2 = p.y*p.y/16.0;\n    float r = (4.0-p.x*p.y)/12.0;\n    float q = x2 - y2;\n    float h = q*q + r*r*r;\n    float u;\n    if( h<0.0 )\n    {\n        float m = sqrt(-r);\n        u = m*cos( acos(q/(r*m))/3.0 );\n    }\n    else\n    {\n        float m = pow(sqrt(h)-q,1.0/3.0);\n        u = (m - r/m)/2.0;\n    }\n    float w = sqrt( u + x2 );\n    float b = p.y - x2*p.x*2.0;\n    float t = p.x/4.0 - w + sqrt( 2.0*x2 - u + b/w/4.0 );\n    \n    float d = length( p-vec2(t,1.0/t) );\n    \n    return p.x*p.y < 1.0 ? d : -d;\n}\n\nfloat sdOOX3d( vec3 p)\n{\n    vec2 q = vec2(length(p.xz), p.y);\n    return -sdOOX(q); \n}\n\nfloat GetDist(vec3 p) {\n    p += vec3(0,3,0);\n    float  d = sdOOX3d(p);\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=-.001;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float t = T/4.+17.;\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    if (dot(m,vec2(1.))==0.) { // if no mouse input detected\n        m = vec2(0.6, 0.2);\n        //t += 17.;\n    }\n\n    vec3 ro = vec3(0, -2, -3);\n    //ro.yz *= Rot(-1.*m.y*PI+1.);\n    //ro.xy += m.xy;\n    //ro.xz *= Rot(-1.*m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(2.*m.x*TAU-TAU, 2.*m.y*TAU-PI, 0), .75);\n    ro.xz += 1.5*vec2(sin(t),cos(t));\n    vec3 col = vec3(1);\n   \n    float d = RayMarch(ro, rd);\n    if (d<0.) d = MAX_DIST;\n    \n    vec3 p = vec3(0.);\n    if(d<MAX_DIST) {\n        p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        float dif = dot(n, normalize(vec3(5,2,3)))*.5+.5;\n        col = mix(0.3*vec3(.125, .25, .5), vec3(1.), dif);\n    }\n    \n    float height = p.y+3.;\n    vec3 fog = 1.-exp(-d/vec3(50./d, 9., 4.)/10.*d);\n    \n    col = mix(col, vec3(1.), .5*exp(-height*4.)); // ground fog\n    col = col+fog - col*fog;\n    vec3 sky = exp(-max(rd.y, 0.)*vec3(1.,.2,.5).rbg*4.);\n    if(d<MAX_DIST) sky = mix( sky, vec3(1.), vec3(exp(-height/3.)) ); // blend sky based on height\n    \n    col *= mix(sky, vec3(1), exp(-d/5.));\n    \n    //col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}