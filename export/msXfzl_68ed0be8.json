{"ver":"0.1","info":{"id":"msXfzl","date":"1689067352","viewed":62,"name":"1d perlin noise with color","username":"maxlyj","description":"Create it for 1d perlin noise with color.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["perlinnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 hash2( vec2 p )\n{\n    // procedural white noise\t\n\treturn fract(sin(vec2(dot(p,vec2(123.4,432.1)),dot(p,vec2(567.8,876.5))))*12345.6);\n}\n\nvec2 get_gradient(vec2 pos)\n{\n    float pi = 3.141592;\n    float angle = hash2(pos).x * 2.0 * pi;\n    return vec2(cos(angle), sin(angle));\n}\n\nfloat perlin_noise1d(vec2 uv, float cells_count)\n{\n    vec2 pos_in_grid = uv * cells_count;\n    vec2 cell_pos_in_grid = floor(pos_in_grid);\n    vec2 lp = ( pos_in_grid - cell_pos_in_grid ); //local position in cell\n    vec2 blend = lp * lp * lp *(lp * (lp * 6.0 - 15.0) + 10.0); // Fade function\n    \n    vec2 left_top = cell_pos_in_grid + vec2(0, 1);\n    vec2 right_top = cell_pos_in_grid + vec2(1, 1);\n\n    float left_top_dot = dot(pos_in_grid - left_top, get_gradient(left_top));\n    float right_top_dot = dot(pos_in_grid - right_top, get_gradient(right_top));\n\n    float noise_value = mix(left_top_dot, right_top_dot, blend.x);\n\n    return (0.3 + 0.5 * (noise_value/0.7));\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.y;\n    vec2 time2 = iTime + vec2(0.0,0.0);\n    uv.x += iTime;\n    vec3 col = (0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4))) * perlin_noise1d((uv), 1.0f);\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}