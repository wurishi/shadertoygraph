{"ver":"0.1","info":{"id":"mslyDf","date":"1687280776","viewed":55,"name":"Big Colorful Pattern","username":"Rens","description":"Used kishimisu's tutorial \"An introduction to Shader Art Coding\" as a foundation for creating this.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","beginner","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \nI followed kishimisu's tutorial in order to create this.\nI recommend checking it out, it's a great video.\nThe tutorial can be found here https://youtu.be/f4s1h2YETNY\n*/\n\nvec3 palette(float t) {\n    vec3 a = vec3(0.892, 0.725, 0.000);\n    vec3 b = vec3(0.878, 0.278, 0.968);\n    vec3 c = vec3(0.332, 0.518, 0.545);\n    vec3 d = vec3(2.440, 5.043, 0.732);\n    \n    return a + b*cos(6.28318*(c*t+d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 5.0; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n\n        float d = length(uv) * exp(-length(uv0)) * 0.7;\n\n        float colorChangeSpeed = 0.3;\n\n        vec3 col = palette(length(uv0) + colorChangeSpeed * (i + iTime));\n\n        float frequency = 17.0;\n\n        // Sidenote: the stroke width decreases with each iteration\n        d = sin(d * frequency + iTime) / (frequency - i * 3.0);\n        \n        d = abs(d);\n\n        d = pow(0.0085 / d, 1.4);\n\n        finalColor += col * d;\n    }\n\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}