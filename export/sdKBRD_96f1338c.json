{"ver":"0.1","info":{"id":"sdKBRD","date":"1657784883","viewed":142,"name":"Circular Pulse","username":"itan","description":"colourful circular pulse","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat Circle(vec2 uv, vec2 pos, float r, float b)\n{\n    uv -= pos;\n    float d = length(uv);\n    return (1.0 - smoothstep(r, r - b, d)) * (1.0 - smoothstep(r, r + b, d));\n}\n\nfloat Pulse(vec2 uv, float t)\n{\n    float offset = 0.4;\n    uv.x += offset * sin(t);\n    uv.y += offset * cos(t);\n    \n    float r = 1.0  * (sin(t) + 1.0);\n    float v = max(sin(t)  - sin(t - 1.0), 0.0);\n    return v * Circle(uv, vec2(0.0), r, r * r / 2.8);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    vec2 origin = vec2(0.5, 0.5);\n\n    uv = (uv - origin) * 2.0;\n    uv.x = uv.x * aspect;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    vec3 color = vec3(1.0);\n\n    float mask = 0.0;\n    \n    for(int i = 0; i < 7; i++)\n    {\n        float t = iTime + float(i);\n        mask += Pulse(uv, t);\n    }    \n    color = col * mask;\n\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}