{"ver":"0.1","info":{"id":"Xl2yWh","date":"1508363517","viewed":840,"name":"Procedural urban landscape","username":"PrzemyslawZaworski","description":" ","likes":18,"published":1,"flags":64,"usePreview":0,"tags":["procedural","raymarching","noise","tutorial","beginner","city","art","buildings"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"lssSDl","filepath":"https://soundcloud.com/mikko-tarmia/penumbra-black-plague-ambient-track","previewfilepath":"https://soundcloud.com/mikko-tarmia/penumbra-black-plague-ambient-track","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shader code:\n// The MIT License https://opensource.org/licenses/MIT\n// Copyright Â© 2017 Przemyslaw Zaworski\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//#define colorize\n\nmat3 rotationX( float x) \n{\n\treturn mat3\n\t(\n\t\t1.0,0.0,0.0,\n\t\t0.0,cos(x),sin(x),\n\t\t0.0,-sin(x),cos(x)\n\t);\n}\t\t\t\n\nfloat hash (vec2 n) \n{ \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414)))*43758.5453);\n}\n\nvec3 hash3( vec2 p )\n{\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)), dot(p,vec2(419.2,371.9)) );\n\treturn fract(sin(q)*43758.5453);\n}\n\nfloat map (vec3 p)\n{\n\tvec2 u = floor(p.xz*0.005*64.0)/64.0;\n\tfloat h = hash(u);\n\th = p.y - 8.0 * h * h;\n\treturn max( min( h, 0.2), p.y-8.0 );\n}\n\t\t\t\nvec4 color (vec3 ro)\n{\n   \tfloat m = ro.y/8.0;\n    #ifdef colorize\n    return vec4( hash3(floor(ro.xz*0.005*64.0)/64.0)*m,1.0);\n    #endif\n\tvec4 buildings = vec4 (m,m,m,1.0);\n\tvec4 grass = vec4(0,0.1,0,1);\n\treturn mix(buildings,grass,step(ro.y,0.1));\n}\n\t\t\t\nvec4 raymarch (vec3 ro, vec3 rd)\n{\n\tfor (int i=0; i<256; i++)\n\t{\n\t\tfloat t = map(ro);\n\t\tif ( t<0.001 ) return color(ro);\n\t\tro+=t*rd;\n\t}\n\treturn vec4(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(iTime*10.0,25,0);\n    vec3 rd = normalize(vec3(uv,2.0)*rotationX(5.65));\n\tfragColor = raymarch(ro,rd);\n}","name":"Image","description":"","type":"image"}]}