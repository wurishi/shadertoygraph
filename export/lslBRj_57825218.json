{"ver":"0.1","info":{"id":"lslBRj","date":"1497035970","viewed":166,"name":"Colory sphery fractal","username":"Kikkers","description":"Colors, spheres","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["colors","spheres"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265\n#define TAU (2*PI)\n#define PHI (sqrt(5)*0.5 + 0.5)\n\n// Clamp to [0,1] - this operation is free under certain circumstances.\n// For further information see\n// http://www.humus.name/Articles/Persson_LowLevelThinking.pdf and\n// http://www.humus.name/Articles/Persson_LowlevelShaderOptimization.pdf\n#define saturate(x) clamp(x, 0, 1)\n\nfloat fOpIntersectionRound(float a, float b, float r) {\n\tvec2 u = max(vec2(r + a,r + b), vec2(0));\n\treturn min(-r, max (a, b)) + length(u);\n}\n\nfloat fOpDifferenceRound (float a, float b, float r) {\n\treturn fOpIntersectionRound(a, -b, r);\n}\n\nfloat fSphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\n// Plane with normal n (n is normalized) at some distance from the origin\nfloat fPlane(vec3 p, vec3 n, float distanceFromOrigin) {\n\treturn dot(p, n) + distanceFromOrigin;\n}\n\nfloat vmax(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\n// Cheap Box: distance to corners is overestimated\nfloat fBoxCheap(vec3 p, vec3 b) { //cheap box\n\treturn vmax(abs(p) - b);\n}\n\n// Box: correct distance to corners\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax(min(d, vec3(0)));\n}\n\n// Box: correct distance to corners\nfloat fBoxChamfer(vec3 p, vec3 b, float c) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax(min(d, vec3(0))) - c;\n}\n\n// Repeat in three dimensions\nvec3 pMod3(inout vec3 p, vec3 size) {\n\tvec3 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5, size) - size*0.5;\n\treturn c;\n}\n\n\n\n#define EPSILON 0.0001\n#define MAX_MARCHING_STEPS 255\n#define MIN_DIST 0.1\n#define MAX_DIST 15.0\n\n//float global\n/**\n * Signed distance function describing the scene.\n * \n * Absolute value of the return value indicates the distance to the surface.\n * Sign indicates whether the point is inside or outside the surface,\n * negative indicating inside.\n */\nfloat sceneSDF(vec3 p, out int depth) {\n    float boxSize = 0.85;\n    float chamfer = 0.01;\n    vec3 boxBounds = vec3(boxSize, boxSize, boxSize);\n    \n    pMod3(p, boxBounds * 2.0);\n    //pMod3(p, boxBounds * 20.0);\n    \n    //float box = fBoxChamfer(p, boxBounds, chamfer);\n    float box = fBoxCheap(p, boxBounds);\n    \n    \n    float spheres = 1000.0;\n    vec3 sphereOffset = vec3(0);\n    float sphereSize = 1.0;\n    depth = 0;\n    for(int i = 0; i < 9; ++i) {\n        float newSphere = fSphere(p, sphereSize);\n        if (newSphere < spheres)\n        {\n            depth = i;\n            spheres = newSphere;\n        }\n    \tboxBounds *= 0.5;\n        p += boxBounds + vec3(sin(iTime * 0.2) * 0.1);\n        sphereSize *= 0.4 + sin(iTime * 0.17) * 0.05;\n    \tpMod3(p, boxBounds * 2.0);\n    }\n    \n    return fOpDifferenceRound(box, spheres, chamfer);\n}\n\n/**\n * Return the normalized direction to march in from the eye point for a single pixel.\n * \n * fieldOfView: vertical field of view in degrees\n * size: resolution of the output image\n * fragCoord: the x,y coordinate of the pixel in the output image\n */\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nvec3 normal( vec3 p )\n{\n    vec2 e = vec2(0.005, -0.005);\n    int depth;\n    return normalize(\n        e.xyy * sceneSDF(p + e.xyy, depth) + \n        e.yyx * sceneSDF(p + e.yyx, depth) + \n        e.yxy * sceneSDF(p + e.yxy, depth) + \n        e.xxx * sceneSDF(p + e.xxx, depth));\n}\n\n/**\n * Return the shortest distance from the eyepoint to the scene surface along\n * the marching direction. If no part of the surface is found between start and end,\n * return end.\n * \n * eye: the eye point, acting as the origin of the ray\n * marchingDirection: the normalized direction to march in\n * start: the starting distance away from the eye\n * end: the max distance away from the ey to march before giving up\n */\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end, out int hit) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection, hit);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n   \nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n   \n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = normal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);    \n    return color;\n}\n     \n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = (fragCoord.xy - iResolution.xy/2.0) / min(iResolution.xy.x, iResolution.xy.y);\n    \n    float t = iTime * 0.1;\n    float camDist = 3.0;\n    vec3 campos = vec3(camDist * sin(t*0.37),2.5*sin(t*0.59),-camDist*cos(t*0.73));\n    vec3 camtar = vec3(0.0,0.0,0.0);\n    \n    mat3 camMat = calcLookAtMatrix( campos, camtar, 0.0 );\n\tvec3 camdir = normalize( camMat * vec3(xy,1.0) );\n    \n    int hit;\n    float dist = shortestDistanceToSurface(campos, camdir, MIN_DIST, MAX_DIST, hit);\n    float fog = (MAX_DIST - dist) / MAX_DIST;\n    fog *= fog;\n    \n    vec3 fogColor = vec3(0.3, 0.5, 0.7);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        fragColor = vec4(fogColor, 1.0);\n\t\treturn;\n    }\n    \n    vec3[6] colors;\n    colors[0] = vec3(0.6, 1.0, 0.3);\n    colors[1] = vec3(1.0, 0.0, 0.6);\n    colors[2] = vec3(0.0, 0.5, 1.0);\n    colors[3] = vec3(0.4, 0.3, 0.4);\n    colors[4] = vec3(0.0, 0.9, 0.3);\n    colors[5] = vec3(0.9, 0.9, 0.2);\n    \n    // The closest point on the surface to the eyepoint along the view ray\n    vec3 p = campos + dist * camdir;\n    \n    vec3 K_a = vec3(0.2, 0.2, 0.2);\n    vec3 K_d = colors[hit % 6];//vec3(0.7, 0.5, 0.6);\n    vec3 K_s = fogColor;\n    float shininess = 10.0;\n    \n    //vec3 color = normal(p);\n    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, campos);\n    fragColor = vec4(color * fog + fogColor * (1.0 - fog), 1.0);    \n}\n","name":"Image","description":"","type":"image"}]}