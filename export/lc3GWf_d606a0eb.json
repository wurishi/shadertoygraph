{"ver":"0.1","info":{"id":"lc3GWf","date":"1713569638","viewed":71,"name":"Maxy's Conway's Game of Life","username":"max_strater","description":"Conway's Game of Life (https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)\nPress space to reset\nGreen channel is 1.0 for alive and 0.0 for dead\nRed channel sticks around for a while after a cell dies\nBlue channel emanates from cell births","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["automata","life","cellular","conway"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n * Random number generator with a vec2 seed\n *\n * Credits:\n * http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0\n * https://github.com/mattdesl/glsl-random\n */\nhighp float rand(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\n//https://www.shadertoy.com/view/wlfyW8\nbool getKeyState(int keyCode, int stateType){\n    return bool(texelFetch(iChannel1, ivec2(keyCode, stateType), 0).x);\n}\n\n// Green channel is 1.0 for alive and 0.0 for dead\n// Red channel sticks around for a while after a cell dies\n// Blue channel emanates from cell births\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (iFrame == 1 || getKeyState(32,1)) { // Press spacebar to reset\n        // initialize to random state\n        vec2 seed = iTime + fragCoord;\n        highp float r = rand(seed);\n        if (r < 0.25) {\n            fragColor = vec4(0.0, 1.0, 0.0, 1.0);\n        } else {\n            fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    } else {\n        vec3 color = vec3(0.0, 0.0, 0.0);\n    \n        vec3 c_ = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;\n        vec3 n_ = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(0, 1), 0).rgb;\n        vec3 ne = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(1, 1), 0).rgb;\n        vec3 _e = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(1, 0), 0).rgb;\n        vec3 se = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(1, -1), 0).rgb;\n        vec3 s_ = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(0, -1), 0).rgb;\n        vec3 sw = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(-1, -1), 0).rgb;\n        vec3 _w = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(-1, 0), 0).rgb;\n        vec3 nw = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(-1, 1), 0).rgb;\n        \n        color.b = max(max(max(n_.b, _e.b), s_.b), _w.b) - 0.02;\n        \n        int liveNeighbors =\n            int(n_.g) +\n            int(ne.g) +\n            int(_e.g) +\n            int(se.g) +\n            int(s_.g) +\n            int(sw.g) +\n            int(_w.g) +\n            int(nw.g);\n\n        if (c_.g == 1.0) {\n            // Alive\n            if (liveNeighbors == 2 || liveNeighbors == 3) {\n                color.g = 1.0;\n            } else {\n                color.g = 0.0;\n            }\n        } else {\n            // Dead\n            if (liveNeighbors == 3) {\n                color.g = 1.0;\n                color.b = 1.0;\n            } else {\n                color.g = 0.0;\n            }\n        }\n        if (color.g < 1.0) {\n            // Don't let live cells have any red because green looks better than yellow.\n            color.r = clamp(c_.g + c_.r, 0.0, 1.0) - 0.001;\n        }\n        fragColor = vec4(color, 1.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}