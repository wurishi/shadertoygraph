{"ver":"0.1","info":{"id":"7dsSDN","date":"1618697703","viewed":49,"name":"312_satvaldina_v0v0","username":"ziptitap","description":"Задание 2: Ведьмин шар.\nФорма кристалла: Шар.\nСцена внутри: Огненный шар.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["raytraycer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenUV = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, screenUV) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec3 CAMERA_POS = vec3(0, 1.2, -6);\nconst float INF = 1e10;\nconst vec3 LIGHT1_POS = vec3(-3, 1.5, 5);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec4 LIGHT1_COLOR = vec4(1, 1, 1, 1);\nvec3 LIGHT2_POS = vec3(3, 0.5, 3);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec4 LIGHT2_COLOR = vec4(0.7,0,1, 1);\nvec3 randDir;\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.15 - pos.y) / dir.y;\n    if (t <= 0.0) \n        return INF;\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) \n        return INF;\n    \n    normal = vec3(0,1,0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r*r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) \n        return INF;\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 1.0)  {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 1.0;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y < -1.0){\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y < -1.0){\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin(dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist; \n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist) {\n        return true;\n    }\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n       \n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 7.0f / distSq2;\n    return color * (\n        max(0.0f, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0f, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + textureLod(iChannel0, normal, 10.0) * 0.5).rgb;\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat sdfFog(vec3 pos)\n{\n    return length(pos) - 0.75;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir) {\n    float t = sdfFog(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 0.0;\n    for(int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE +t) * dir;\n        float sdf = sdfFog(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(0.5, 2.5, 4.5) * totalAbs, 1.0 - opacity);\n}\n\nfloat snoise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e3);\n\t\n\tuv *= res;\n\t\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\t\n\tvec3 f = fract(uv); f = f*f*(3.0-2.0*f);\n\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n\t\t      \t  uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\n\tvec4 r = fract(sin(v*1e-1)*1e3);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\treturn mix(r0, r1, f.z)*2.-1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0)/iResolution.x;\n\n    vec3 forward = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(forward, up));\n    up = normalize(cross(right, forward));\n    vec3 viewVec = normalize(forward + uv.x * right + uv.y * up);\n    \n   vec3 curPos = CAMERA_POS;\n   const float DIAMOND_N = 3.5;\n   const float GLASS_N = 1.5;\n   const float AIR_N = 1.0;\n   float n1 = AIR_N;\n   float n2 = GLASS_N;\n   float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n   float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    const int FIRE = 4;\n    int materialType;\n    vec3 color;\n    vec4 colorMult = vec4(1, 1, 1, 1);\n    float mult = 1.0;\n    bool isSph1 = false;\n\n    for (int i = 0; i < 7; ++i) {\n        vec3 normal = vec3(0, 0, 0);\n        float nEnter = AIR_N;\n        float t = INF;\n        \n        float planeT = tracePlane(curPos, viewVec, normal);\n        if (planeT < t) {\n            t = planeT;\n            vec3 pos = curPos + t * viewVec;\n            color = texture(iChannel2, pos.xz * 0.2).rgb;\n            normal = vec3(0, 1, 0);\n            materialType = DIFFUSE;\n        }\n        float light1T = traceSphere(curPos - LIGHT1_POS, viewVec, LIGHT1_RADIUS, normal);\n        if (light1T < t) {\n            t = light1T;\n            color = LIGHT1_COLOR.rgb * 5.0;\n            materialType = EMISSION;\n        }\n        \n        float light2T = traceSphere(curPos - LIGHT2_POS, viewVec, LIGHT2_RADIUS, normal);\n        if (light2T < t) {\n            t = light2T;\n            color = LIGHT2_COLOR.rgb;\n            materialType = EMISSION;\n        }\n        vec3 sph1Norm;\n        float sphT = traceSphere(curPos, viewVec, 1.0, sph1Norm);\n        if (sphT < t) {\n            isSph1 = true;\n            t = sphT;\n            normal = sph1Norm;\n            if (GLASS_R * 3.0 > randVals.x * 0.5) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n                if (dot(viewVec, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        vec3 sph2Norm;\n        vec3 tmp = vec3(curPos.x, curPos.y+0.5, curPos.z-1.0); \n        float sph2T = traceSphere(curPos + tmp* randVals * 0.1, viewVec, 0.4, sph2Norm);\n        if (sph2T < t) {\n            t = sph2T;\n            normal = sph2Norm;\n            materialType = FIRE;\n            colorMult = vec4(0.5, 0.5, 0.5, 0.5);\n        }\n        vec3 cylNormal = normal;\n        float cylT = traceCylinder(curPos, viewVec, cylNormal);\n        if (cylT < t) {\n            t = cylT;\n            vec3 pos = curPos + t * viewVec;\n            color = texture(iChannel1, pos.xz * pos.y).rgb;\n            normal = cylNormal;\n            materialType = DIFFUSE;\n        }\n        if (t != INF) {\n            if (materialType == EMISSION) {\n                fragColor.rgb = color;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb += colorMult.a * computeLight(curPos + t * viewVec, color, normal);\n                break;\n            } else if (materialType == REFLECTION) {\n                curPos += viewVec * t;\n                fragColor.rgb += colorMult.a * computeLight(curPos + t * viewVec, color, normal);\n                viewVec = reflect(viewVec, normal);\n                curPos += viewVec * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curPos += viewVec * t;\n                viewVec = refraction(viewVec, normal, n1, nEnter);\n                curPos += viewVec * 1e-5;\n                n1 = nEnter;\n                if (isSph1 == true) {\n                    vec4 fog = sampleFog(curPos, viewVec);\n                    fragColor.rgb += fog.rgb * fog.a * colorMult.a;\n                    colorMult.a *= 1.0 - fog.a;\n                } \n            } else if (materialType == FIRE) {\n                curPos += viewVec * t;\n                vec2 p = -.5 + fragCoord.xy / iResolution.xy;\n                p.x *= iResolution.x/iResolution.y;\n                float clr = 2.1 - (5.7 * length(2.0*p));\n                float power = pow(2.0, float(i));\n                clr += (1.5 / power) * snoise(curPos, power*16.);\n                fragColor += vec4(clr * 0.5 , pow(max(clr, 0.0), 2.0) * 0.1, -0.1, 1.0);\n            }\n        } else {\n            fragColor += colorMult * texture(iChannel0, viewVec) * 0.3;\n            break;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenUV = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, screenUV) + texture(iChannel1, screenUV);\n}","name":"Buffer B","description":"","type":"buffer"}]}