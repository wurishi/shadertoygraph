{"ver":"0.1","info":{"id":"WlsSW2","date":"1564352791","viewed":447,"name":"quasirandom distribution","username":"TekF","description":"Place points according to the optimal quasirandom sequence (basically the 2D version of the golden ratio). Based on this: http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/","likes":11,"published":3,"flags":0,"usePreview":0,"tags":["2d","distribution","quasirandom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int n = 2000; // maximum number\nconst float rate = 2.;\nconst float acceleration = .2; // increase in rate per second\nconst float lineThickness = 2.2;\nconst float colours = .05; // proportion of cells to colour in\nconst bool wrap = true;\nconst bool border = true;\n\nconst vec2 quasi2 = vec2(.754877666247,.569840290998); // from http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\n\nvoid mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    \n    if ( border && abs(uv.x) > .5 )\n    {\n        fragColour = vec4(.8);\n        return;\n    }\n    \n    float penOut = lineThickness/iResolution.y;\n    float penIn = (lineThickness-2.8)/iResolution.y;\n    \n    float t = 3. + rate*iTime + 0.5*acceleration*iTime*iTime;\n    \n    fragColour = vec4(0,0,0,1);\n\n    float scale = 1.;\n    \n    float closest = 1e38;\n    float closest2 = 1e38;\n    for ( int i=0; i < n; i++ )\n    {\n        if ( float(i) > t ) break;\n        \n        vec2 pos = fract(quasi2*float(i+1));\n\n\t\tif ( wrap )\n        {\n        \t// wrap the pattern based on what pixel we're drawing\n            pos += floor(uv+.5-pos);\n        }\n        else\n        {\n            pos = fract(pos+.5)-.5; // centre the pattern\n        }\n        \n        vec3 col = sin(vec3(1,2,3)+vec3(7,11,5)*(float(i*(1+i/30))))*.5+.5;\n        if ( fract(col.y*64.) > colours ) col = vec3(1);\n\n        float l = length(pos-uv);\n        \n        // animate the last one\n        l += smoothstep(1.,0.,t-float(i)) * .65/sqrt(t);\n\n\t\tif ( l < closest )\n        {\n            if ( closest < closest2 ) closest2 = closest;\n            closest = l;\n\t\t\tfragColour.rgb = col; // *(1.-l*sqrt(float(n)));\n        }\n        else if ( l < closest2 )\n        {\n            closest2 = l;\n        }\n        fragColour.rgb = mix(fragColour.rgb,vec3(0),smoothstep(penOut,penIn,length(pos-uv)));\n    }\n    \n    // cell borders\n    fragColour.rgb *= smoothstep(penIn,penOut,(closest2-closest));//*scale);\n}\n","name":"Image","description":"","type":"image"}]}