{"ver":"0.1","info":{"id":"4tVSz1","date":"1482947756","viewed":190,"name":"2D super-sampling test","username":"public_int_i","description":"2D super-sampling test, left: super-sampling, right: no anti-aliasing.\nThis is a more organised version of my 'TSAA study' shader.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["test","study","sampling","super"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Ethan Alexander Shulman 2016\n\n//Image - Display comparison between temporal super-sampling(left) and no AA(right).\n\n//Use mouse X to move the comparison slider.\n\n\n\n//2d scene\nvec3 scene(vec2 uv) {\n    const float depsilon = 1e-3;\n    \n    vec3 c = vec3(0.);\n    \n    \n    uv *= 2.5;\n    float lev = log(length(uv));\n    uv *= lev;\n    if (abs(length(uv)-.3+cos(atan(uv.y,uv.x)*32.)*.03)-.02 < depsilon) {\n        c = abs(vec3(cos(lev*2.9835),sin(lev*13.98234),cos(lev*6.98234)));\n    }\n    \n    return c;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy,\n         nuv = (fragCoord*2.-iResolution.xy)/iResolution.x;\n    \n    //comparison slider\n    float csliderX = cos(iTime)*.5+.5;\n    if (iMouse.w > 0.) csliderX = iMouse.x/iResolution.x;\n    \n    if (uv.x-csliderX < 0.) {\n        vec4 s = texture(iChannel0, uv);\n     \tfragColor = s/s.w;\n    } else {\n        fragColor = vec4(scene(nuv),1.);\n    }    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Ethan Alexander Shulman 2016\n\n//Buf A - Render the 2D scene at half resolution and view jittered by 1/2 pixel(full res).\n\n\nfloat timeSeed() {\n    float tseed = floor(iDate.w);\n    return fract(tseed*.73624+fract(iDate.w-tseed*.0928275)*1974.3252);\n}\n\n\n\n//hash functions - only works with seeds between 0-1\nfloat hash2(vec2 s) {\n    vec4 v = s.xyyx;\n    float r = 0.;\n    for (int i = 1; i < 2; i++) {\n        r += dot(v,vec4(1.32974,29.12984,538.3498,39873.92834));\n        v = v.xxyz*(1.+fract(v+r));\n    }\n    return fract(r);\n}\nfloat hash3(vec3 s) {\n    vec4 v = s.xyzx;\n    float r = 0.;\n    for (int i = 1; i < 2; i++) {\n        r += dot(v,vec4(1.32974,29.12984,538.3498,39873.92834));\n        v = v.xxyz*(1.+fract(v+r));\n    }\n    return fract(r);\n}\nfloat hash4(vec4 s) {\n    vec4 v = s;\n    float r = 0.;\n    for (int i = 1; i < 2; i++) {\n        r += dot(v,vec4(1.32974,29.12984,538.3498,39873.92834));\n        v = v.xxyz*(1.+fract(v+r));\n    }\n    return fract(r);\n}\n\n\n\n//2d scene\nvec3 scene(vec2 uv) {\n    const float depsilon = 1e-3;\n    \n    vec3 c = vec3(0.);\n    \n    \n    uv *= 2.5;\n    float lev = log(length(uv));\n    uv *= lev;\n    if (abs(length(uv)-.3+cos(atan(uv.y,uv.x)*32.)*.03)-.02 < depsilon) {\n        c = abs(vec3(cos(lev*2.9835),sin(lev*13.98234),cos(lev*6.98234)));\n    }\n    \n    return c;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 R = iResolution.xy/2.;\n    \n    vec2 uv = fragCoord.xy / R;\n    if (uv.x >= 1. || uv.y >= 1.) return;\n    \n    //pixel jitter\n    float tseed = timeSeed();\n    vec2 jitter = vec2(hash2(vec2(tseed)),\n                       hash2(vec2(cos(tseed*512.346)*.5+.5)))-0.5;\n    vec2 nuv = ((fragCoord+jitter)*2.-R)/R.x;\n    \n    vec3 c = scene(nuv);\n    \n    fragColor = vec4(c,1.);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Ethan Alexander Shulman 2016\n\n//Buf B - Temporal super-sampling convolution.\n\n\n\n\nfloat timeSeed() {\n    float tseed = floor(iDate.w);\n    return fract(tseed*.73624+fract(iDate.w-tseed*.0928275)*1974.3252);\n}\n\n\n\n//hash functions - only works with seeds between 0-1\nfloat hash2(vec2 s) {\n    vec4 v = s.xyyx;\n    float r = 0.;\n    for (int i = 1; i < 2; i++) {\n        r += dot(v,vec4(1.32974,29.12984,538.3498,39873.92834));\n        v = v.xxyz*(1.+fract(v+r));\n    }\n    return fract(r);\n}\nfloat hash3(vec3 s) {\n    vec4 v = s.xyzx;\n    float r = 0.;\n    for (int i = 1; i < 2; i++) {\n        r += dot(v,vec4(1.32974,29.12984,538.3498,39873.92834));\n        v = v.xxyz*(1.+fract(v+r));\n    }\n    return fract(r);\n}\nfloat hash4(vec4 s) {\n    vec4 v = s;\n    float r = 0.;\n    for (int i = 1; i < 2; i++) {\n        r += dot(v,vec4(1.32974,29.12984,538.3498,39873.92834));\n        v = v.xxyz*(1.+fract(v+r));\n    }\n    return fract(r);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame < 30) {\n        //init blank\n        fragColor = vec4(0.);\n        return;\n    }\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n    //pixel jitter\n    float tseed = timeSeed();\n    vec2 jitter = vec2(hash2(vec2(tseed)),\n                       hash2(vec2(cos(tseed*512.346)*.5+.5)))-0.5;\n    \n    \n    vec4 r = texture(iChannel1, uv);\n    vec2 muv = fragCoord-0.5;\n    \n    for (int x = -1; x < 2; x++) {\n        for (int y = -1; y < 2; y++) {\n            vec2 suv = floor(fragCoord/2.)+vec2(x,y);\n            vec3 c = texture(iChannel0, (suv+0.5)/iResolution.xy).xyz;\n            float portion = max(0., 1.-(length(suv*2.+jitter-muv)/1.41));\n            r += vec4(c,1.)*portion;\n        }\n    }\n    \n    fragColor = r;//texture(iChannel0, uv/2.);\n}","name":"Buf B","description":"","type":"buffer"}]}