{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// twitter: @eddbiddulph\n\nvec3 cam_origin;\nmat3 cam_rotation;\nvec2 frag_coord;\n\nvec3 rotateX(float a, vec3 v)\n{\n\treturn vec3(v.x, cos(a) * v.y + sin(a) * v.z, cos(a) * v.z - sin(a) * v.y);\n}\n\nvec3 rotateY(float a, vec3 v)\n{\n\treturn vec3(cos(a) * v.x + sin(a) * v.z, v.y, cos(a) * v.z - sin(a) * v.x);\n}\n\nfloat torusDistance(vec3 p, float inner_radius, float outer_radius)\n{\n\tvec3 ring_p = vec3(normalize(p.xy) * outer_radius, 0.0);\n\treturn distance(p, ring_p) - inner_radius;\n}\n\nvec2 orbIntensity(vec3 p)\n{\n\t// return a value to create some nice shapes out of particles\n\tvec3 ofs = vec3(0.0, 0.0, 0.0);\n\tfloat d0 = torusDistance(p - ofs, 0.5, 5.0);\n\tfloat d1 = torusDistance(rotateY(3.1415926 * 0.5, p) - ofs, 1.3, 8.0);\n\tfloat d2 = torusDistance(rotateX(0.2, rotateY(3.1415926, p)) - ofs, 1.5, 20.0);\n\tfloat amb = smoothstep(0.8, 1.0, cos(p.x * 10.0) * sin(p.y * 5.0) * cos(p.z * 7.0)) * 0.02;\n\tfloat wave = step(abs(p.y + 10.0 +  cos(p.z * 0.1) * sin(p.x * 0.1 + iTime) * 4.0), 1.0) * 0.3;\n\treturn vec2(max(max(1.0 - step(4.0, length(p)), step(d0, 0.0)), step(d1, 0.0)) + amb + step(d2, 0.0) * 0.1 + wave,\n\t\t\t\tstep(0.3, wave));\n}\n\nvec3 project(vec3 p)\n{\n\t// transpose the rotation matrix. unfortunately tranpose() is not available.\n\tmat3 cam_rotation_t = mat3(vec3(cam_rotation[0].x, cam_rotation[1].x, cam_rotation[2].x),\n\t\t\t\t\t\t\t   vec3(cam_rotation[0].y, cam_rotation[1].y, cam_rotation[2].y),\n\t\t\t\t\t\t\t   vec3(cam_rotation[0].z, cam_rotation[1].z, cam_rotation[2].z));\n\t\n\t// transform into viewspace\n\tp = cam_rotation_t * (p - cam_origin);\n\t\n\t// project\n\treturn vec3(p.xy / p.z, p.z);\n}\n\nvec3 orb(float rad, vec3 coord)\n{\n\t// return the orb sprite\n\treturn 4.0 * (1.0 - smoothstep(0.0, rad, length((coord.xy - frag_coord)))) *\n\t\t\tvec3(1.0, 0.6, 0.3) * clamp(coord.z, 0.0, 1.0);\n}\n\nvec3 traverseUniformGrid(vec3 ro, vec3 rd)\n{\n\tvec3 increment = vec3(1.0) / rd;\n\tvec3 intersection = ((floor(ro) + round(rd * 0.5 + vec3(0.5))) - ro) * increment;\n\n\tincrement = abs(increment);\n\tro += rd * 1e-3;\n\t\n\tvec3 orb_accum = vec3(0.0);\n\t\n\t// traverse the uniform grid\n\tfor(int i = 0; i < 50; i += 1)\n\t{\n\t\tvec3 rp = floor(ro + rd * min(intersection.x, min(intersection.y, intersection.z)));\n\t\t\n\t\tvec2 orb_intensity = orbIntensity(rp);\n\n\t\t// get the screenspace position of the cell's centerpoint\t\t\t\t\t\t\t\t\t\t   \n\t\tvec3 coord = project(rp + vec3(0.5));\n\t\t\n\t\tfloat rmask = smoothstep(0.0, 0.1, distance(frag_coord, coord.xy));\n\t\t\n\t\t// calculate the initial radius\n\t\tfloat rad = 0.5 / coord.z * (1.0 - smoothstep(0.0, 50.0, length(rp)));\n\t\t\n\t\t// adjust the radius\n\t\trad *= 0.5 + 0.5 * sin(rp.x + iTime * 5.0) * cos(rp.y + iTime * 10.0) * cos(rp.z);\n\t\t\n\t\torb_accum += orb(rad, coord) * orb_intensity.x * mix(1.0, rmask, orb_intensity.y);\n\t\t\n\t\t// step to the next ray-cell intersection\n\t\tintersection += increment * step(intersection.xyz, intersection.yxy) *\n\t\t\t\t\t\t\t\t\tstep(intersection.xyz, intersection.zzx);\n\t}\n\t\n\treturn orb_accum;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// get the normalised device coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfrag_coord = uv * 2.0 - vec2(1.0);\n\tfrag_coord.x *= iResolution.x / iResolution.y;\n\n\t// zoom in\n\tfrag_coord *= 1.5;\n\n\tcam_origin = rotateX(iTime * 0.3,\n\t\t\t\t\t\t rotateY(iTime * 0.5, vec3(0.0, 0.0, -10.0 + 5.0 * cos(iTime * 0.1))));\n\t\n\t// calculate the rotation matrix\n\tvec3 cam_w = normalize(vec3(cos(iTime) * 10.0, 0.0, 0.0) - cam_origin);\n\tvec3 cam_u = normalize(cross(cam_w, vec3(0.0, 1.0, 0.0)));\n\tvec3 cam_v = normalize(cross(cam_u, cam_w));\n\t\n\tcam_rotation = mat3(cam_u, cam_v, cam_w);\n\t\n\tvec3 ro = cam_origin,rd = cam_rotation * vec3(frag_coord, 1.0);\n\t\n\t// render the particles\n\tfragColor.rgb = traverseUniformGrid(ro, rd);\n\tfragColor.rgb = sqrt(fragColor.rgb * 0.8);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sX3R4","date":"1363123477","viewed":2284,"name":"Particle Tracing","username":"fizzer","description":"This shader renders a large number of particles by traversing a uniform grid and projecting the centerpoint of each grid cell. This projection is then used as the origin for a particle sprite.","likes":81,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","particles"],"hasliked":0,"parentid":"","parentname":""}}