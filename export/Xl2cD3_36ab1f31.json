{"ver":"0.1","info":{"id":"Xl2cD3","date":"1513573628","viewed":98,"name":"PAD_1109_01","username":"fuzzy_guard","description":"practice","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 RGBtoHSV(vec4 rgb);\nvec4 HSVtoRGB(vec4 hsv);\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 tex01 = texture(iChannel0,uv);\n    vec4 tex02 = texture(iChannel1,uv);\n    const float pi = 3.1415926;\n    \n    // \tフィルタ効果の設定\n    //\n    //  0:normal\n    //  1:average\n    //  2:multiply\n    //  3:screen\n    //  4:darken\n    //  5:lighten\n    //  6:difference\n    //  7:negation\n    //  8:exclusion\n    //  9:overlay\n    // 10:hard light\n    // 11:soft light(photoshop)\n\t// 12:soft light(pegtop)\n    // 13:dodge\n    // 14:inverse dodge\n    // 15:soft dodge\n    // 16:burn\n    // 17:inverse burn\n    // 18:soft burn\n    // 19:quadratic(reflect)\n    // 20:quadratic(glow)\n    // 21:quadratic(freeze)\n    // 22:quadratic(heat)\n    // 23:additive\n    // 24:additive(subtractive)\n    // 25:additive(stamp)\n    // 26:interpolation\n    // 27:logical(XOR)\n    // 28:logical(AND)\n    // 29:logical(OR)\n    // 30:Red(RGB)\n    // 31:Green(RGB)\n    // 32:Blue(RGB)\n    // 33:Hue(HSL)\n    // 34:Saturation(HSL)\n    // 35:Color(HSL)\n    // 36:Lumniosity(HSL)\n    \n    //画面を種類分分割    \n    //int filter_mode = int(uv.x * 37.0 );\n    \n    //2秒ごとにフィルタ切り替え\n    int filter_mode = int(mod(iTime*0.5,37.0));\n    \n    //計算用変数\n    float num01 = 1.0;\n    float num02 = 2.0;\n    float num_half = 0.5;\n    \n    //結果代入用\n    vec4 result = vec4(0,0,0,0);\n    \n    //filter_modeに応じて処理変更\n    switch(filter_mode){\n    \t\n        case 0:\n        \tresult = tex01;\n        \tbreak;\n        case 1:\n        \tresult = ( tex01 + tex02 ) / num02 ;\n        \tbreak;\n        case 2:\n        \tresult = tex01 * tex02;\n        \tbreak;\n        case 3:\n        \tresult = num01 - ( num01 - tex01 ) * ( num01 - tex02 );\n        \tbreak;\n        case 4:\n        \tresult = tex02;\n            if( tex01.x < tex02.x){\n                result.x = tex01.x;\n\t        }\n            if( tex01.y < tex02.y){\n                result.y = tex01.y;\n\t        }\n            if( tex01.z < tex02.z){\n                result.z = tex01.z;\n\t        }\n        \tbreak;\n        case 5:\n        \tresult = tex02;\n            if( tex01.x > tex02.x){\n                result.x = tex01.x;\n\t        }\n            if( tex01.y > tex02.y){\n                result.y = tex01.y;\n\t        }\n            if( tex01.z > tex02.z){\n                result.z = tex01.z;\n\t        }\n        \tbreak;\n        case 6:\n        \tresult = abs( tex01 - tex02 );\n        \tbreak;\n        case 7:\n        \tresult = num01 - abs( num01 - tex01 - tex02);\n        \tbreak;\n        case 8:\n      \t\tresult = tex01 + tex02 - num02 * tex01 * tex02;\n        \tbreak;\n        case 9:\n\t        if( tex01.x < num_half ){\n                result.x = num02 * tex01.x * tex02.x;\n            }\n            else{\n                result.x = num01 - num02 * ( num01 - tex01.x )*( num01 - tex02.x );\n            }\n\t        if( tex01.y < num_half ){\n                result.y = num02 * tex01.y * tex02.y;\n            }\n            else{\n                result.y = num01 - num02 * ( num01 - tex01.y )*( num01 - tex02.y );\n            }\n\t        if( tex01.z < num_half ){\n                result.z = num02 * tex01.z * tex02.z;\n            }\n            else{\n                result.z = num01 - num02 * ( num01 - tex01.z )*( num01 - tex02.z );\n            }       \n        \tbreak;\n        case 10:\n        \tif( tex02.x < num_half ){\n        \t\tresult.x = num02 * tex01.x * tex02.x;\n            }\n        \telse{\n                result.x = num01 - num02 * ( num01 - tex01.x )*( num01 - tex02.x );\n        \t}\n        \tif( tex02.y < num_half ){\n        \t\tresult.y = num02 * tex01.y * tex02.y;\n            }\n        \telse{\n                result.y = num01 - num02 * ( num01 - tex01.y )*( num01 - tex02.y );\n        \t}\n        \tif( tex02.z < num_half ){\n        \t\tresult.z = num02 * tex01.z * tex02.z;\n            }\n        \telse{\n                result.z = num01 - num02 * ( num01 - tex01.z )*( num01 - tex02.z );\n        \t}\n        \tbreak;\n        case 11:\n            if( tex02.x < num_half ){\n                result.x = num02 * tex01.x * tex02.x + tex01.x * tex01.x * ( num01 - num02 * tex02.x );\n            }\n\t        else{\n                result.x = sqrt( tex01.x ) * ( num02  *  tex02.x  -  num01 ) + ( num02  *  tex01.x ) * ( num01  -  tex02.x );\n    \t    }\n            if( tex02.y < num_half ){\t\n                result.y = num02 * tex01.y * tex02.y + tex01.y * tex01.y * ( num01 - num02 * tex02.y );\t\n            }\t\n\t        else{\n                result.y = sqrt( tex01.y ) * ( num02  *  tex02.y  -  num01 ) + ( num02  *  tex01.y ) * ( num01  -  tex02.y );\t\n    \t    }\n            if( tex02.z < num_half ){\t\n                result.z = num02 * tex01.z * tex02.z + tex01.z * tex01.z * ( num01 - num02 * tex02.z );\t\n            }\t\n\t        else{\n                result.z = sqrt( tex01.z ) * ( num02  *  tex02.z  -  num01 ) + ( num02  *  tex01.z ) * ( num01  -  tex02.z );\t\n    \t    }\n        \tbreak;\n//        case 12:\n//        \tresult = ( num01 - tex01 ) * tex01 * tex02 + tex01 * ( num01 - ( num01 - tex01 ) * ( num01 - tex02 ));\n\t\t\tbreak;\n        case 13:\n        \tresult = tex01 / ( num01 - tex02 );\n        \tbreak;\n        case 14:\n        \tresult = tex02 / ( num01 - tex01 );\n        \tbreak;\n        case 15:\n            if( tex01.x + tex02.x < num01 ){\n                result.x = num_half * tex01.x / ( num01 - tex02.x );\n            }\t\n            else{\n                result.x = num01 - num_half + ( num01 - tex02.x ) / tex01.x;\n            }\n            if( tex01.y + tex02.y < num01 ){\n                result.y = num_half * tex01.y / ( num01 - tex02.y );\n            }\t\n            else{\n                result.y = num01 - num_half + ( num01 - tex02.y ) / tex01.y;\n            }\n            if( tex01.z + tex02.z < num01 ){\n                result.z = num_half * tex01.z / ( num01 - tex02.z );\n            }\t\n            else{\n                result.z = num01 - num_half + ( num01 - tex02.z ) / tex01.z;\n            }\n        \tbreak;\n        case 16:\n        \tresult = num01 - ( num01 - tex01 ) / tex02;\n        \tbreak;\n        case 17:\n        \tresult = num01 - ( num01 - tex02 ) / tex01;\n        \tbreak;\n        case 18:\n            if( tex01.x + tex02.x < num01 ){\n                result.x = num_half * tex02.x / ( num01 - tex01.x );\n            }\n            else{\n                result.x = num01 - num_half * ( num01 - tex01.x ) / tex02.x;\n            }\n            if( tex01.y + tex02.y < num01 ){\n                result.y = num_half * tex02.y / ( num01 - tex01.y );\n            }\n            else{\n                result.y = num01 - num_half * ( num01 - tex01.y ) / tex02.y;\n            }\n            if( tex01.z + tex02.z < num01 ){\n                result.z = num_half * tex02.z / ( num01 - tex01.z );\n            }\n            else{\n                result.z = num01 - num_half * ( num01 - tex01.z ) / tex02.z;\n            }\n\t\t\tbreak;\n        case 19:\n        \tresult = tex01 * tex01 / ( num01 - tex02 );\n        \tbreak;\n        case 20:\n        \tresult = tex02 * tex02 / ( num01 - tex01 );\n        \tbreak;\n        case 21:\n        \tresult = num01 - ( num01 - tex01 ) * ( num01 - tex01 ) / tex02;\n        \tbreak;\n        case 22:\n        \tresult = num01 - ( num01 - tex02 ) * ( num01 - tex02 ) / tex01;\n        \tbreak;\n        case 23:\n        \tresult = tex01 + tex02;\n        \tbreak;\n        case 24:\n        \tresult = tex01 + tex02 - num01;\n        \tbreak;\n        case 25:\n        \tresult = tex01 + num02 * tex02 - num01;\n        \tbreak;\n        case 26:\n        \tresult = num_half - num_half * num_half * cos(pi * tex01 ) - num_half * num_half * cos(pi * tex02 );\n        \tbreak;\n        case 27:\n            tex01.x = step( num_half , tex01.x );\n            tex02.x = step( num_half , tex02.x );\n            if( tex01.x + tex02.x == num01 ){\n                result.x = num01 ;\n            }\n            else{\n                result.x = 0.0;\n            }\n            tex01.y = step( num_half , tex01.y );\n            tex02.y = step( num_half , tex02.y );\n        \tif( tex01.y + tex02.y == num01 ){\n                result.y = num01 ;\n            }\n            else{\n                result.y = 0.0;\n            }\n            tex01.z = step( num_half , tex01.z );\n            tex02.z = step( num_half , tex02.z );\n        \tif( tex01.z + tex02.z == num01 ){\n                result.z = num01 ;\n            }\n            else{\n                result.z = 0.0;\n            }\n\t\t\tbreak;\n        case 28:\n        \ttex01.x = step( num_half , tex01.x );\n            tex02.x = step( num_half , tex02.x );\n            if( tex01.x + tex02.x > num01 ){\n                result.x = num01 ;\n            }\n            else{\n                result.x = 0.0;\n            }\n            tex01.y = step( num_half , tex01.y );\n            tex02.y = step( num_half , tex02.y );\n        \tif( tex01.y + tex02.y > num01 ){\n                result.y = num01 ;\n            }\n            else{\n                result.y = 0.0;\n            }\n            tex01.z = step( num_half , tex01.z );\n            tex02.z = step( num_half , tex02.z );\n        \tif( tex01.z + tex02.z > num01 ){\n                result.z = num01 ;\n            }\n            else{\n                result.z = 0.0;\n            }\n\t\t\tbreak;\n        case 29:\n        \ttex01.x = step( num_half , tex01.x );\n            tex02.x = step( num_half , tex02.x );\n            if( tex01.x + tex02.x >= num01 ){\n                result.x = num01 ;\n            }\n            else{\n                result.x = 0.0;\n            }\n            tex01.y = step( num_half , tex01.y );\n            tex02.y = step( num_half , tex02.y );\n        \tif( tex01.y + tex02.y >= num01 ){\n                result.y = num01 ;\n            }\n            else{\n                result.y = 0.0;\n            }\n            tex01.z = step( num_half , tex01.z );\n            tex02.z = step( num_half , tex02.z );\n        \tif( tex01.z + tex02.z >= num01 ){\n                result.z = num01 ;\n            }\n            else{\n                result.z = 0.0;\n            }\n\t\t\tbreak;\n        case 30:\n        \tresult = tex01;\n        \tresult.x = tex02.x;\n\t\t\tbreak;\n        case 31:\n        \tresult = tex01;\n        \tresult.y = tex02.y;\n\t\t\tbreak;\n        case 32:\n        \tresult = tex01;\n        \tresult.z = tex02.z;\n\t\t\tbreak;\n        case 33:\n        \tresult.x = HSVtoRGB(RGBtoHSV(tex02)).x;\n        \tresult.y = HSVtoRGB(RGBtoHSV(tex01)).y;\n        \tresult.z = HSVtoRGB(RGBtoHSV(tex01)).z;\n            break;\n        case 34:\n        \tresult.x = HSVtoRGB(RGBtoHSV(tex01)).x;\n        \tresult.y = HSVtoRGB(RGBtoHSV(tex02)).y;\n        \tresult.z = HSVtoRGB(RGBtoHSV(tex01)).z;\n            break;\n        case 35:\n        \tresult.x = HSVtoRGB(RGBtoHSV(tex02)).x;\n        \tresult.y = HSVtoRGB(RGBtoHSV(tex02)).y;\n        \tresult.z = HSVtoRGB(RGBtoHSV(tex01)).z;\n            break;\n        case 36:\n        \tresult.x = HSVtoRGB(RGBtoHSV(tex01)).x;\n        \tresult.y = HSVtoRGB(RGBtoHSV(tex01)).y;\n        \tresult.z = HSVtoRGB(RGBtoHSV(tex02)).z;\n            break;\n                \n        default:\n        \tresult = tex01;\n        \tbreak;\n        \t\n    };\n        \n    fragColor = result;\n}\n\n//RGBをHSVに変換\nvec4 RGBtoHSV(vec4 rgb){\n\n    float max = rgb.x > rgb.y ? rgb.x : rgb.y;\n    max = max > rgb.z ? max : rgb.z;\n    float min = rgb.x < rgb.y ? rgb.x : rgb.y;\n    min = min < rgb.z ? min : rgb.z;\n    float h = max - min;\n\n    if (h > 0.0) {\n        if (max == rgb.x) {\n            h = (rgb.y - rgb.z) / h;\n            if (h < 0.0) {\n                h += 6.0;\n            }\n        } else if (max == rgb.y) {\n            h = 2.0 + (rgb.z - rgb.x) / h;\n        } else {\n            h = 4.0 + (rgb.x - rgb.y) / h;\n        }\n    }\n\n    h /= 6.0;\n    float s = (max - min);\n    if (max != 0.0)\n        s /= max;\n    float v = max;\n\n    vec4 hsv = vec4(h,s,v,1.0);\n\n    return hsv;\n\n}\n\n//HSVをRGBに変換\nvec4 HSVtoRGB(vec4 hsv){\n    float r = hsv.z;\n    float g = hsv.z;\n    float b = hsv.z;\n    if (hsv.y > 0.0f) {\n        hsv.x *= 6.0f;\n        int i = int(hsv.x);\n        float f = hsv.x - float(i);\n        switch (i) {\n            default:\n            case 0:\n                g *= 1.0 - hsv.y * (1.0 - f);\n                b *= 1.0 - hsv.y;\n                break;\n            case 1:\n                r *= 1.0 - hsv.y * f;\n                b *= 1.0 - hsv.y;\n                break;\n            case 2:\n                r *= 1.0 - hsv.y;\n                b *= 1.0 - hsv.y * (1.0 - f);\n                break;\n            case 3:\n                r *= 1.0 - hsv.y;\n                g *= 1.0 - hsv.y * f;\n                break;\n            case 4:\n                r *= 1.0 - hsv.y * (1.0 - f);\n                g *= 1.0 - hsv.y;\n                break;\n            case 5:\n                g *= 1.0 - hsv.y;\n                b *= 1.0 - hsv.y * f;\n                break;\n        }\n    }\n    vec4 rgb = vec4(r,g,b,1.0);\n    return rgb;\n}","name":"Image","description":"","type":"image"}]}