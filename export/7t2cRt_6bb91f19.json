{"ver":"0.1","info":{"id":"7t2cRt","date":"1650131332","viewed":85,"name":"Whitehole flare zgevis test","username":"Dubswitcher","description":"Built for use with ZGameEditor Visualizer.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["distort","random","flare"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Input variables\n\nfloat alpha = 1.0;\nfloat miximg = 1.0;\nfloat hue = 0.5;\nfloat satur = 1.2;\nfloat value = 1.5;\nfloat horiz = 0.0;\nfloat verti = 0.0;\nfloat bands = 20.;\nfloat qual = 20.0;\nfloat sharp = 0.5;\nfloat seed = 12.0;\nfloat chrom = 0.6;\nfloat dist = -1.0;\nfloat coreS = -0.6;\nfloat coreB = 5.0;\nfloat trimS = -0.5;\nfloat trimB = 2.0;\n\n//---------------------\n\nconst float pi = 3.14159265;\n\nfloat hash (in vec2 uv) {\n    vec3 p = vec3(dot(uv.xy,vec2(123.,456.)),dot(uv.xy,vec2(789.,112.)),dot(uv.xy,vec2(345.,678.)));\n    return fract(dot(fract(sin(p*10.)*5000.),vec3(987.,654.,321.)));\n}\n\nfloat ease (in float p) {\n    return pow(p,2.)*(3.-2.*p);\n}\n\nvec2 polar (vec2 p) {    \n    return vec2 (1.-sqrt(p.x*p.x+p.y*p.y),(atan(p.y,p.x)/pi+1.)/2.);\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.,-1./3.,2./3.,-1.);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.,2./3.,1./3.,3.);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat starburst (in vec2 sq, in float rot, in float sd, in float e) {\n    vec2 p = polar(sq);\n    p.y = fract(p.y+rot);\n    vec2 ramp = vec2(p.yy);\n    ramp.y = fract(ramp.y+(1./bands));\n    ramp = floor(ramp*bands)/bands;\n    float o = mix(hash(ramp.xx+sd),\n                  hash(ramp.yy+sd),\n                  ease(fract(p.y*bands)));\n    return pow(o,e);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;\n    vec2 rd = vec2(fragCoord.x/res.y-res.x/res.y/2.,\n                   fragCoord.y/res.y-0.5);\n    rd += vec2(horiz,verti);\n    vec2 uv = fragCoord/res;\n    vec3 col;\n    vec3 layerCol;\n    float count;\n    for (float i = 0.; i < qual; i += 1.) {\n        layerCol = vec3(\n            hash(vec2(i/bands/3.+seed)),\n            hash(vec2(i/bands/3.+seed+0.3333)),\n            hash(vec2(i/bands/3.+seed+0.6666))\n        );\n        col += vec3(starburst(rd,\n                              iTime/8.*((i*2.-qual)/qual),\n                              seed/bands+i,\n                              1./sharp)) * mix(vec3(1.),layerCol,chrom);\n        count += 1.;\n    }\n    col /= count;\n    \n    float sp = polar(rd).x;\n    float flare = sp+coreS;\n    float trim = (sp+trimS)*trimB;\n    \n    col = rgb2hsv(col);\n    col = vec3(col.x + (hue-0.5), col.y * satur,\n               col.z * value + ease(clamp(flare,0.,1.))*coreB);\n    float bri = col.z;\n    col = hsv2rgb(col);\n    col *= ease(clamp(trim+bri,0.,1.));\n    \n    bri = (col.r+col.g+col.b)/3.;\n    \n    col *= alpha;\n    col += texture(iChannel0,uv+rd*dist*bri).rgb*miximg;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}