{"ver":"0.1","info":{"id":"XfdGzs","date":"1712029654","viewed":32,"name":"Hard Project 3 Marc Garcia ","username":"Markas09","description":"Hard","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["education"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Background color (blue and green gradient)\n    vec3 backgroundColor = mix(vec3(0.0, 0.7, 0.0), vec3(0.0, 0.5, 1.0),  uv.y);\n\n    // Calculate the size of each cell\n    vec2 cellSize = 1.0 / vec2(10.0, 9.0);\n\n    // Determine the row and column index\n    vec2 gridIndex = floor(uv / cellSize);\n\n    // Calculate the position of the center of the current cell\n    vec2 cellCenter = (gridIndex + 0.5) * cellSize;\n\n    // Determine the size of the squares (take the minimum dimension of the cell)\n    float squareSize = min(cellSize.x, cellSize.y) * 0.5; // Adjust size as needed\n\n    // Calculate half the side length of the square\n    float halfSquareSize = squareSize / 2.0;\n\n    // Determine if the current pixel is inside the square\n    float insideSquare = step(cellCenter.x - halfSquareSize, uv.x) *\n                         step(uv.x, cellCenter.x + halfSquareSize) *\n                         step(cellCenter.y - halfSquareSize, uv.y) *\n                         step(uv.y, cellCenter.y + halfSquareSize);\n\n    // Set the color of the square to white\n    vec3 squareColor = vec3(1.0);\n\n    // Set the color to black if the pixel is outside the square\n    squareColor *= insideSquare;\n\n    // Blend background color with square color\n    vec3 finalColor = mix(backgroundColor, squareColor, insideSquare);\n\n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}