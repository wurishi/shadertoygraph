{"ver":"0.1","info":{"id":"ltVcRK","date":"1537294038","viewed":80,"name":"HW-01","username":"D4VID","description":"An adjustable checkerboard pattern","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["square","bw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Apparently there is also a one-line solution:\n//#define mainImage(o,u) o+=9./sin(u.x*.1)/sin(u.y*.1)\n//But I have no clue how it works, so I am not using it ... also because plagarism\n\n//That one-liner, as well as 2 lines in the code below were seen by me here:\n//https://www.shadertoy.com/view/4sGczD\n\n//I must give the person who made that shader credit, because I would not have been able to complete\n// the assignment in a clean way without those lines.\n\nconst float sideLength = 20.0; //Adjust the size of the boxes, which also \n\t\t\t\t\t\t\t   //changes the overall number of rows and cols.\nvec2 boxSize = vec2 (sideLength, sideLength); //Dimentions of the field. Scale from 5 to 40,\n\t\t\t\t\t\t\t\t\t\t\t  // otherwise some boxes will get cut off.\nvec4 white = vec4 (1.0, 1.0, 1.0, 1.0); //Box color\nvec4 black = vec4 (0.0, 0.0, 0.0, 0.0); //BG color\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n //float aspectRatio = iResolution.y / iResolution.x;\n    //uv.y *= aspectRatio;\n    \n    \nvec2 m = mod(fragCoord, 2.0 * boxSize); //Line 1\n    \n    if(m.x < boxSize.x && m.y < boxSize.y || m.x >= boxSize.x && m.y >= boxSize.y)//Line 2\n    {\n        fragColor = white;\n    }\n    else \n    {   \n        fragColor = black;\n    }\n\n}","name":"Image","description":"","type":"image"}]}