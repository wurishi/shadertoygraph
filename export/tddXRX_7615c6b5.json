{"ver":"0.1","info":{"id":"tddXRX","date":"1572530522","viewed":195,"name":"Demuss: Brick Wall","username":"Demuss","description":"Brick wall with some shading and detail ( cracks planned )","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["wall","brick","demuss"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hash3( vec2 p )\n{\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)), \n\t\t\t\t   dot(p,vec2(269.5,183.3)), \n\t\t\t\t   dot(p,vec2(419.2,371.9)) );\n\treturn fract(sin(q)*43758.5453);\n}\n\nfloat iqnoise( in vec2 x, float u, float v )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\t\t\n\tfloat k = 1.0+63.0*pow(1.0-v,6.0);\n\t\n\tfloat va = 0.0;\n\tfloat wt = 0.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2( float(i),float(j) );\n\t\tvec3 o = hash3( p + g )*vec3(u,u,1.0);\n\t\tvec2 r = g - f + o.xy;\n\t\tfloat d = dot(r,r);\n\t\tfloat ww = pow( 1.0-smoothstep(0.0,sqrt(2.),sqrt(d)), k );\n\t\tva += o.z*ww;\n\t\twt += ww;\n    }\n\t\n    return va/wt;\n}\nfloat random(vec2 uv)\n{\n\t return fract(sin(dot(uv.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n \n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0)); \n    \n    vec2 u = smoothstep(0.,1.,f);\n \n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvec2 hash( vec2 x ) \n{\n    const vec2 k = vec2( 0.9183099, 0.2678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat noiseSmooth( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\t\n\tvec2 u = f*f*(3.0-2.0*f);\n    float n =  mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n    return 0.5 + 0.5*n;\n}\n\nvec3 GetCol(vec2 uv, float x, float y)\n{\n    float aspect = x/y;\n    \n    float v = floor(uv.y*y)/y;\n    float a = v/aspect/2.;//position\n    float u = floor((uv.x+a)*x)/x+random(vec2(v));\n\treturn vec3(u);\n}\n\nvec3 Cracks(vec2 uv, vec3 remove, float size)\n{\n    vec2 p = vec2(0.0,1.0) + vec2(1.0,-1.0)*vec2(1.,1.);\n\tp = p*p*(3.0-2.0*p);\n\tp = p*p*(3.0-2.0*p);\n\tp = p*p*(3.0-2.0*p);\n    \n\tfloat f = iqnoise( 24.0*uv, p.x, p.y );\n\tfloat l = iqnoise( 24.0*uv+vec2(size), p.x, p.y );\n    float a = f - l;\n    a *= 100.;\n    a = clamp(a, 0., 1.);\n    \n    f = iqnoise( 64.0*uv, p.x, p.y );\n\tl = iqnoise( 64.0*uv+vec2(0.01), p.x, p.y );\n    float a1 = f - l;\n    a1 *= 100.;\n    a1 = clamp(a1, 0., 1.);\n    \n    vec3 cracks = vec3(a+a1);\n    \n    cracks = clamp(cracks-remove, 0., 1.);  \n    \n    return cracks;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;// + (iTime/16.*vec2(1.,0.));\n\n    vec2 pixelSize = vec2(1.0, 1.0) / vec2(128, 128); //pixelAmount by x and y\n\tvec2 pixelId = floor(uv / pixelSize);\n       \n    vec2 leftBot = pixelId * pixelSize;\n   \tvec2 rightBot = vec2((pixelId.x + 1.0) * pixelSize.x, pixelId.y * pixelSize.y);\n    vec2 leftTop = vec2(pixelId.x * pixelSize.x, (pixelId.y + 1.0) * pixelSize.y);\n    vec2 rightTop = (pixelId + 1.0) * pixelSize;\n    vec2 center = (pixelId + 0.5) * pixelSize;\n    \n    //pixelization of uv\n    //uv = (leftBot + rightBot + leftTop + rightTop + center)/5.0;\n    \n    float x = 8.;\n    float y = 16.;\n    \n \tvec3 col = GetCol(uv, x, y);  \n    float size = 0.005;\n    vec3 col2 = GetCol(uv+vec2(size), x, y);\n\t\t\n    float a = abs(col.x - col2.x);\n    \n    if( a != 0. )\n    {\n\t\ta = 1.;\n    }\n    \n    float g = clamp(noise(uv*128.)/2.+noiseSmooth(uv*128.)/4. - a, 0., 1.); \n    vec3 color = clamp(vec3(209./255., 65./255., 6./255.) - vec3(a), 0., 1.)+ g/10.;\n     \n    color += (clamp(a, 0. ,1.) * vec3(209./255., 160./255., 120./255.))*0.95;\n    \n    //changing color space from 256 to n \n    float n = 64.;\n    color = floor(color*n)/n; \n    \n    //small gradient on each brick ( from up to bottom )\n    float v = floor(uv.y*y)/y;\n    v *= y;\n    float c = (uv.y * y) - v;\n    c /= 6.;\n    c -= 0.05;\n    c = clamp(c-a, 0., 1.);\n    color += c;\n    \n    //cracks: big and weak \n    float cracksMask = noiseSmooth(uv*4.);\n    cracksMask = smoothstep(0.75, 0.25, cracksMask);\n   \tcolor += Cracks(uv*2.5, vec3(a), 0.01)/16. * cracksMask;\n    \n    //Cracks: smaller and stronger ( like from hammer or something )\n    cracksMask = noiseSmooth(uv*8.);\n    cracksMask = smoothstep(0.5, 0.1, cracksMask);\n   \tcolor += Cracks(uv*2.5, vec3(a), 0.1)/4. * cracksMask;\n    \n    //bleached areas\n    float ageing = pow(noiseSmooth(uv*4.), 2.);\n    ageing /= 4.;\n    color += ageing;\n    \n    //changing color space from 256 to n \n    color = floor(color*n)/n; \n     \n    //color = vec3(uv.x, uv.y, 0.);\n    \n    // Output to screen\n    fragColor = vec4(color*0.95,1.0);\n}","name":"Image","description":"","type":"image"}]}