{"ver":"0.1","info":{"id":"DsBfDD","date":"1691612365","viewed":69,"name":"Starry Ripples [Stars 1.0 Var 3]","username":"sagescherrytree","description":"Swirly star shader thing hehe.\nApologies if this may hurt your eyes.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["ripples","noisefunctions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Noise\nfloat hash( float n ) {\n    return fract(sin(n)*7586.5453);\n}\n\nfloat noise( in vec3 x ) { // in [0,1]\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.-2.*f);\n\n    float n = p.x + p.y*57. + 113.*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.), hash(n+  1.),f.x),\n                        mix( hash(n+ 57.), hash(n+ 58.),f.x),f.y),\n                    mix(mix( hash(n+113.), hash(n+114.),f.x),\n                        mix( hash(n+170.), hash(n+171.),f.x),f.y),f.x);\n    return res;\n}\n\nfloat fbm(float x, float y) {\n    float total = 0.0;\n    float persistence = 0.5f;\n    //int octaves = 8;\n    float freq = 2.f;\n    float amp = 0.5f;\n    for(int i = 1; i <= 6; i++) {\n        total += noise(vec3(x * freq, y * freq, 1.0)) * amp;\n\n        freq *= 2.f;\n        amp *= persistence;\n    }\n    return total;\n}\n\nfloat sfbm(in vec3 x) {\n    return fbm(x.x, x.y) * 2.0 - 1.0;\n}\n\nfloat rippleNoise(float dist, float rippleIntensity, float rippleScale) {\n    return rippleScale * (sin(dist * rippleIntensity - iTime * 10.0) / (dist * rippleIntensity));\n}\n\n// Colour changer function\nvec3 maths(vec2 uv) {\n    vec3 color = vec3(0.0);\n      for(float i = 0.0; i < 128.0; i+=1.0)\n      {\n        float phase = sin(i*546.13 + 1.0)*0.5 + 0.5;\n        float size = pow( sin(i*651.74 + 5.0)*0.5 + 0.5, 4.0 );\n        float pox =  sin(i*0.55 + 4.1) * iResolution.x / iResolution.y;\n        float rad = size + sin(phase+size)/1.5;\n        vec2  pos = vec2( pox + sin(iTime/20.+ phase + size), -1.0-rad + (2.0+3.0*rad)*mod(phase + 0.2*(iTime/8.) * (0.5+size),1.0));\n        float dis = length(uv - pos);\n        vec3  col = mix( vec3(0.194*sin(iTime/6.0)+0.3,0.2,0.3*phase), vec3(1.1*sin(iTime/9.0)+0.3,0.2*phase,0.4), 0.5+0.5*sin(i));\n        float f = length(uv-pos)/rad;\n        f = sqrt(clamp(1.0 + (sin((iTime)*size)*0.5)*f,0.0,1.0));\n        color += col.zyx *(1.0-smoothstep( rad*0.15, rad, dis ));\n      }\n      color *= sqrt(1.5-0.5*length(uv));\n      return color;\n}\n\n// UV transform.\nvec2 uvTransform(vec2 uv, vec2 uv0) {\n    // === RIPPLES ===\n\tvec2 rPos1 = vec2(-0.5, -0.7);\n\tvec2 rPos2 = vec2(0.3, 0.7);\n\tvec2 rPos3 = vec2(0.5, -0.5);\n\tvec2 rPos4 = vec2(0.01, 0.01);\n    vec2 rPos5 = vec2(0.8, -0.2);\n\tfloat rStr1 = 12.0;\n\tfloat rStr2 = 8.0;\n\tfloat rStr3 = 5.0;\n\tfloat rStr4 = 65.0;\n    float rStr5 = 10.0;\n\t\n\t// === FINAL ===\n\tfloat rLength1 = length(uv + rPos1); // distance of current pixel from ripple center\n\tfloat rLength2 = length(uv + rPos2); // distance of current pixel from ripple center\n\tfloat rLength3 = length(uv + rPos3); // distance of current pixel from ripple center\n\tfloat rLength4 = length(uv + rPos4); // distance of current pixel from ripple center\n    float rLength5 = length(uv + rPos5);\n\tvec2 result = uv0\n\t\t+ (rPos1 / rLength1) * cos(rLength1 * rStr1 -iTime * (rStr1 / 3.0)) * (rStr1 / 400.0)\n\t\t+ (rPos2 / rLength2) * cos(rLength2 * rStr2 -iTime * (rStr2 / 3.0)) * (rStr2 / 400.0)\n\t\t+ (rPos3 / rLength3) * cos(rLength3 * rStr3 -iTime * (rStr3 / 3.0)) * (rStr3 / 400.0)\n\t\t+ (rPos4 / rLength4) * cos(rLength4 * rStr4 -iTime * (rStr4 / 3.0)) * (rStr4 / 400.0)\n        + (rPos5 / rLength5) * cos(rLength5 * rStr5 -0.5 * iTime * (rStr5 / 3.0)) * (rStr5 / 400.0);\n    return result;\n}\n\n// Main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv0 = fragCoord.xy / iResolution.xy;\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // UV transform.\n    uv = uvTransform(uv, uv0);\n\n    vec3 col = vec3(1.0);\n    \n    col = maths(uv);\n    \n    for (float i = 0.0; i < 32.0; i+=1.0) {\n        float d = 1.5 * sfbm(0.05 * vec3(fbm(uv.x, 0.01*(cos(iTime)) * uv.y)));\n        d = abs(d);\n        d = 0.1 / d;\n        col *= pow(hash(0.5 * d), 0.01);\n    }\n    \n    col *= sqrt(1.5 - 0.5*length(uv));\n     \n    // Apply a ripple shader.\n    float intensity = 0.0;\n    for (int x = 0; x < 2; x++) {\n        for (int y = 0; y < 2; y++) {\n            // Random place on screen space?\n            vec2 centre = vec2(0.375 + float(x) * 0.25, 0.375 + float(y) * 0.25);\n            float dist = distance(col.xy, centre);\n            intensity += rippleNoise(dist, 42.  + 100. * float(x), 2.5 + 5. * float(y));\n        }\n    }\n    intensity *= 5.5;\n    \n    fragColor = vec4(col.x * intensity, col.y * intensity, col.z * intensity,1.0);\n}","name":"Image","description":"","type":"image"}]}