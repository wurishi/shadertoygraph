{"ver":"0.1","info":{"id":"lltyW7","date":"1532932194","viewed":155,"name":"Two Tigers","username":"archibate","description":"Two Tigers. interesting to be implemented in GPU.\ncheck the 'Sound' for more wave shapes.","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["sound","music","frequency"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool char(out vec4 o, in vec2 off, int ch)\n{\n    if (off.x <= 0. || off.y <= 0. || off.x > 32. || off.y > 64.)\n        return false;\n    ivec2 xy;\n    xy.x = ch % 16;\n    xy.y = 15 - ch / 16;\n    vec2 uv = vec2(xy * 64);\n    off.x += 16.;\n    uv = (uv + off) / 1024.;\n    vec4 col = texture(iChannel0, uv);\n    if (col.r >= .6)\n        o = vec4(vec3(col.r), 1.);\n    return true;\n}\n\nvoid msgSoundIn(out vec4 o, in vec2 p)\n{\n    p *= 1.5;\n    #define Char(o, p, ch) if (char(o, p, ch)) return; p.x -= 32.;\n    Char(o, p, 0x53);\n    Char(o, p, 0x6F);\n    Char(o, p, 0x75);\n    Char(o, p, 0x6E);\n    Char(o, p, 0x64);\n    Char(o, p, 0x20);\n    Char(o, p, 0x69);\n    Char(o, p, 0x6E);\n    Char(o, p, 0x21);\n}\n\nvoid msgSongName(out vec4 o, in vec2 p)\n{\n    p *= 1.5;\n    #define Char(o, p, ch) if (char(o, p, ch)) return; p.x -= 32.;\n    Char(o, p, 0x54);\n    Char(o, p, 0x77);\n    Char(o, p, 0x6F);\n    Char(o, p, 0x20);\n    Char(o, p, 0x54);\n    Char(o, p, 0x69);\n    Char(o, p, 0x67);\n    Char(o, p, 0x65);\n    Char(o, p, 0x72);\n    Char(o, p, 0x73);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    msgSoundIn(fragColor, fragCoord);\n    \n    fragCoord.y -= iResolution.y - 32. * 1.5;\n    msgSongName(fragColor, fragCoord);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define waver_sin(x) sin(6.2831 * (x))\n\nfloat waver_smrect(float x)\n{\n    x = mod(x, 1.);\n    if (x > .5)\n        x = 1. - x;\n    return smoothstep(0., .5, x);\n}\n\nfloat waver_rect(float x)\n{\n    x = mod(x, 1.);\n    if (x > .5)\n        x = 1. - x;\n    return step(.25, x);\n}\n\n/** try changing the wave shape here! **/\n#define waver waver_rect // try smrect or sin\n\nvec2 mainSound( in int samp,float time)\n{\n    float h = 0.0;\n    float t0 = 0.0;\n    \n#define LEN(len) (0.5 * float(len))\n#define W(len) t0 += LEN(len);\n#define B +7\n#define D +14\n#define H +21\n    \n    float L[7 B];\n    L[0] = 262.;\n    L[0 B] = 277.;\n    L[1] = 294.;\n    L[1 B] = 311.;\n    L[2] = 330.;\n    L[2 B] = 330.;\n    L[3] = 349.;\n    L[3 B] = 370.;\n    L[4] = 392.;\n    L[4 B] = 415.;\n    L[5] = 440.;\n    L[5 B] = 466.;\n    L[6] = 494.;\n    L[6 B] = 494.;\n    \n#define SFD(f, len, dec) \\\n    if (t0 < time && time < t0 + LEN(len)) { \\\n    \th += waver(float(f) * time) * exp(-(dec) * (time - t0)); \\\n    }\n#define SLMT(l, m, len) SFD(L[(l)-1] * (m), len, 3.0)\n#define MMMSC(f) ((f) / (7 B) == 1 ? .5 : f / (7 B) == 2 ? 2. : 1.)\n#define ST(f, len) SLMT(f % (7 B), MMMSC(f), len)\n#define S1(f) ST(f, 1.3)\n    \n    time = mod(time, LEN(36.));\n    \n    S1(1); W(1);\n    S1(2); W(1);\n    S1(3); W(1);\n    S1(1); W(1);\n    \n    S1(1); W(1);\n    S1(2); W(1);\n    S1(3); W(1);\n    S1(1); W(1);\n    \n    S1(3); W(1);\n    S1(4); W(1);\n    S1(5); W(2);\n    \n    S1(3); W(1);\n    S1(4); W(1);\n    S1(5); W(2);\n    \n    S1(5); W(.5);\n    S1(6); W(.5);\n    S1(5); W(.5);\n    S1(4); W(.5);\n    S1(3); W(1);\n    S1(1); W(1);\n    \n    S1(5); W(.5);\n    S1(6); W(.5);\n    S1(5); W(.5);\n    S1(4); W(.5);\n    S1(3); W(1);\n    S1(1); W(1);\n    \n    S1(2); W(1);\n    S1(5 D); W(1);\n    S1(1); W(2);\n    \n    S1(2); W(1);\n    S1(5 D); W(1);\n    S1(1); W(2);\n    \n    return vec2(h);\n}","name":"Sound","description":"","type":"sound"}]}