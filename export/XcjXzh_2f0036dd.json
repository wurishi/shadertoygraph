{"ver":"0.1","info":{"id":"XcjXzh","date":"1706026951","viewed":77,"name":"winter snowman","username":"ElisabetTorch","description":"snowman, snowstorm and snow","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["snowmantexture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// константы\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nconst float EPSILON = 0.0005;\nconst float PI = 3.14159265359;\n\n// константы для раскраски снеговика\nconst vec3 COLOR_BACKGROUND = vec3(.73, .86, .96);\nconst vec3 COLOR_AMBIENT = vec3(0.0, 0.20, 0.8) * 0.3;\nconst vec3 COLOR_BODY = vec3(1.15);\nconst vec3 COLOR_EYE = vec3(0);\nconst vec3 COLOR_NOSE = vec3(0.8, 0.3, 0.1);\nconst vec3 COLOR_ARM = vec3(0.2);\n\nstruct Surface \n{\n  float sd; // signed distance\n  vec3 col; // diffuse color\n};\n\nSurface opUnion(Surface d1, Surface d2) \n{ // Function overloading of float opUnion\n  if (d2.sd < d1.sd) return d2;\n  return d1;\n}\n\nmat2 rotate2d(float angle) \n{ //поворот камеры вдоль осей ОХ и ОУ\n  float sin = sin(angle), cos = cos(angle);\n  return mat2(cos, -sin, sin, cos);\n}\n\nfloat opUnion(float d1, float d2) \n{ // фун-ия объединения 2х сфер\n  return min(d1, d2);\n}\n\nSurface opSmoothUnion( Surface d1, Surface d2, float k ) \n{\n  Surface s;\n  float h = clamp( 0.5 + 0.5*(d2.sd-d1.sd)/k, 0.0, 1.0 );\n  s.sd = mix( d2.sd, d1.sd, h ) - k*h*(1.0-h);\n  s.col = mix( d2.col, d1.col, h ) - k*h*(1.0-h);\n\n  return s;\n}\n/* k - коэффициент сглаживания\n* mix - Функция mix() создает новое значение, которое находится между двумя данными значениями x и y. \n* Она делает это, используя коэффициент a, который определяет, насколько сильно нужно учитывать каждое из этих значений. \n* Чем больше a, тем ближе полученное значение будет к y, а чем меньше a, тем ближе оно будет к x.\n*/\n\nvec3 opFlipX(vec3 p) \n{ // меняет знак компонента x \n  p.x *= -1.;\n  return p;\n}\n\n// Создание 3D модели - сферы\nfloat sdfSphere(vec3 p, float r, vec3 offset)\n{ // сферы\n    return length(p - offset) - r;\n}\n\nfloat sdfCone( vec3 p, vec2 c, float h, vec3 offset ) // Использована форма SDF конуса из списка 3D SDF-файлов Иниго Квилеза\n{ // нос снеговика\n  p -= offset;\n  float q = length(p.xy);\n  return max(dot(c.xy,vec2(q,p.z)),-h-p.z);\n}\n\nfloat sdfLine( vec3 p, vec3 a, vec3 b, float r, vec3 offset )\n{ // создание веточки - руки снеговика\n  p -= offset;\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nSurface sdfArm(vec3 p) \n{ // используется для создания формы веточки или руки снеговика\n  float mainBranch = sdfLine(p, vec3(0, 0.5, 0), vec3(0.8, 0, 0.), 0.05, vec3(-1.5, -0.5, 0));\n  float smallBranchBottom = sdfLine(p, vec3(0, 0.1, 0), vec3(0.5, 0, 0.), 0.05, vec3(-2, 0, 0));\n  float smallBranchTop = sdfLine(p, vec3(0, 0.3, 0), vec3(0.5, 0, 0.), 0.05, vec3(-2, 0, 0));\n  \n  float d = opUnion(mainBranch, smallBranchBottom);\n  d = opUnion(d, smallBranchTop);\n  return Surface(d, COLOR_ARM);\n}\n\nSurface body(vec3 p) \n{\n  Surface bottomSnowball = Surface(sdfSphere(p, 1., vec3(0, -1, 0)), COLOR_BODY);\n  Surface topSnowball = Surface(sdfSphere(p, 0.75, vec3(0, 0.5, 0)), COLOR_BODY);\n  \n  return opSmoothUnion(bottomSnowball, topSnowball, 0.2);\n}\n\nSurface sdfEye(vec3 p) \n{\n  float d = sdfSphere(p, .1, vec3(-0.2, 0.6, 0.7));\n  return Surface(d, COLOR_EYE);\n}\n\nSurface nose(vec3 p) \n{\n  float noseAngle = radians(75.);\n  float d = sdfCone(p, vec2(sin(noseAngle), cos(noseAngle)), 0.5, vec3(0, 0.4, 1.2));\n  return Surface(d, COLOR_NOSE);\n}\n\nSurface snowman(vec3 p) \n{\n  Surface body = body(p);\n  Surface leftEye = sdfEye(p);\n  Surface rightEye = sdfEye(opFlipX(p));\n  Surface nose = nose(p);\n  Surface leftArm = sdfArm(p);\n  Surface rightArm = sdfArm(opFlipX(p));\n\n  Surface co = body;\n  co = opUnion(co, leftEye);\n  co = opUnion(co, rightEye);\n  co = opUnion(co, nose);\n  co = opUnion(co, leftArm);\n  co = opUnion(co, rightArm);\n  \n  return co;\n}\n\n\nSurface sdFloor(vec3 p) \n{\n  float snowFloor = p.y + 1.8 + texture(iChannel0, p.xz).x * 0.07;\n  vec3 snowFloorCol = 0.85 * mix(vec3(1.5), vec3(1), texture(iChannel0, p.xz/90.).x);\n  return Surface(snowFloor, snowFloorCol);\n}\n\nSurface scene(vec3 p)\n{\n   return opUnion(snowman(p), sdFloor(p));\n}\n\nSurface rayMarching(vec3 ro, vec3 rd) {\n  float depth = MIN_DIST; // глубина\n  //float d; // расстояние, пройденное лучом\n  Surface co; // closest object\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = scene(p);\n    depth += co.sd;\n    if (co.sd < PRECISION || depth > MAX_DIST) break;\n  }\n  \n  co.sd = depth;\n  \n  return co;\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1, -1) * EPSILON;\n    return normalize(\n      e.xyy * scene(p + e.xyy).sd +\n      e.yyx * scene(p + e.yyx).sd +\n      e.yxy * scene(p + e.yxy).sd +\n      e.xxx * scene(p + e.xxx).sd);\n}\n\n// Функция, которая используется для определения нашей модели камеры с точкой обзора\nmat3 cam(vec3 cameraPos, vec3 lookAtPoint) {\n\tvec3 cd = normalize(lookAtPoint - cameraPos);\n\tvec3 cr = normalize(cross(vec3(0, 1, 0), cd));\n\tvec3 cu = normalize(cross(cd, cr));\n\t\n\treturn mat3(-cr, cu, -cd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord / iResolution.xy;\n  uv -= .5;\n  uv.x *= iResolution.x/iResolution.y;\n  vec2 mouseUV = iMouse.xy/iResolution.xy;\n  \n  if (mouseUV == vec2(0.0)) mouseUV = vec2(0.5); // центрирование мыши при загрузке страницы\n\n  vec3 col = vec3(0);\n  vec3 lp = vec3(0);\n  vec3 ro = vec3(0, 0, 3); // начало луча, представляющее положение камеры\n  \n  float camRadius = 2.;\n  ro.yz = ro.yz * camRadius * rotate2d(mix(-PI/2., PI/2., mouseUV.y));\n  ro.xz = ro.xz * rotate2d(mix(-PI, PI, mouseUV.x)) + vec2(lp.x, lp.z);\n\n  vec3 rd = cam(ro, lp) * normalize(vec3(uv, -1)); // ray direction. Направление луча\n\n  //float d = rayMarching(ro, rd); // значение расстояния до ближайшего объекта\n  Surface co = rayMarching(ro, rd);\n\n  if (co.sd > MAX_DIST) {\n    col = COLOR_BACKGROUND; // луч ни во что не попал\n  } else {\n    vec3 p = ro + rd * co.sd; // p — контрольная точка; ro- ray origin; rd- ray direction\n    vec3 normal = calcNormal(p); // surface normal\n\n    vec3 lightPosition = vec3(0, 2, 2);\n    vec3 lightDirection = normalize(lightPosition - p) * .65; // Значение 0,65 используется для некоторого снижения интенсивности освещения\n\n    float dif = clamp(dot(normal, lightDirection), 0., 1.) * 0.5 + 0.5; \n    col = dif * co.col + COLOR_AMBIENT;\n    \n    col += texture(iChannel1, fragCoord/iResolution.xy).rgb;\n    col = mix(col, COLOR_BACKGROUND, 1.0 - exp(-0.00005 * co.sd * co.sd * co.sd)); // fog\n   \n  }\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n** Buffer A\n** Credit: This buffer contains code forked from \"snow snow\" by changjiu: https://www.shadertoy.com/view/3ld3zX\n*/\n\nfloat SIZE_RATE = 0.1;\nfloat XSPEED = 0.5;\nfloat YSPEED = 0.75;\nfloat LAYERS = 10.;\n\nfloat Hash11(float p)\n{\n  vec3 p3 = fract(vec3(p) * 0.1);\n  p3 += dot(p3, p3.yzx + 19.19);\n  return fract((p3.x + p3.y) * p3.z); \n}\n\nvec2 Hash22(vec2 p)\n{\n  vec3 p3 = fract(vec3(p.xyx) * 0.3);\n  p3 += dot(p3, p3.yzx+19.19);\n  return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec2 Rand22(vec2 co)\n{\n  float x = fract(sin(dot(co.xy ,vec2(122.9898,783.233))) * 43758.5453);\n  float y = fract(sin(dot(co.xy ,vec2(457.6537,537.2793))) * 37573.5913);\n  return vec2(x,y);\n}\n\nvec3 SnowSingleLayer(vec2 uv,float layer){\n  vec3 acc = vec3(0.0,0.0,0.0);\n  uv = uv * (2.0 + layer);\n  float xOffset = uv.y * (((Hash11(layer)*2.-1.)*0.5+1.)*XSPEED);\n  float yOffset = YSPEED * iTime;\n  uv += vec2(xOffset,yOffset);\n  vec2 rgrid = Hash22(floor(uv)+(31.1759*layer));\n  uv = fract(uv) - (rgrid*2.-1.0) * 0.35 - 0.5;\n  float r = length(uv);\n  float circleSize = 0.04*(1.5+0.3*sin(iTime*SIZE_RATE));\n  float val = smoothstep(circleSize,-circleSize,r);\n  vec3 col = vec3(val,val,val)* rgrid.x ;\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n  vec3 acc = vec3(0,0,0);\n  for (float i = 0.; i < LAYERS; i++) {\n    acc += SnowSingleLayer(uv,i); \n  }\n\n  fragColor = vec4(acc,1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}