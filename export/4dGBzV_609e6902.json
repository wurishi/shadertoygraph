{"ver":"0.1","info":{"id":"4dGBzV","date":"1529486970","viewed":199,"name":"Verzweigungen ","username":"schnaader","description":"Es werden immer _alle_ Verzweigungen durchlaufen, d.h. in diesem Beispiel gibt es keine Beschleunigung, auch wenn ein großer Teil des Bildes nicht gefiltert wird","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["branching","pitfall"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Portiert von https://github.com/MzHub/gpuakf/blob/master/glsl/kuwahara.glsl\n// Zentrale Region des Tomita-Tsuji-Filters hinzugefügt\n\n// Damit die zentrale Region zentriert ist, sollte der Radius gerade sein\n// Radius 2 -> 5x5 Filter, Radius 4 -> 9x9 Filter, ... Radius n -> (2n+1)x(2n+1) Filter\nconst int radius = 20;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    // Bildkoordinaten des aktuellen Pixels -> (u,v) von 0 .. 1\n    vec2 src_size = vec2 (iResolution.x, iResolution.y);\n    vec2 uv = fragCoord.xy / src_size;\n    \n \tif (fragCoord.x < iMouse.x)\n\t{\n        vec3 c = texture(iChannel0, uv).rgb;\n\t\tfragColor = vec4(c, 1.0);\n    } else {\n\n        // Anzahl der Pixel einer Region\n        float n = float((radius + 1) * (radius + 1));\n\n        // Summen und Summenquadrate der Regionen (in Burger: (17.4 S_1,k, 17.5 S_2,k)\n        // Zu beachten: Jeweils Vektoren mit 3 Elementen für die einzelnen Farbkanäle RGB\n        vec3 m[5];\n        vec3 s[5];\n        for (int k = 0; k < 5; ++k) {\n            m[k] = vec3(0.0);\n            s[k] = vec3(0.0);\n        }\n\n        // Werte für die fünf Regionen berechnen\n\n        for (int j = -radius; j <= 0; ++j)  {\n            for (int i = -radius; i <= 0; ++i)  {\n                vec3 c = texture(iChannel0, uv + vec2(i,j) / src_size).rgb;\n                m[0] += c;\n                s[0] += c * c;\n            }\n        }\n\n        for (int j = -radius; j <= 0; ++j)  {\n            for (int i = 0; i <= radius; ++i)  {\n                vec3 c = texture(iChannel0, uv + vec2(i,j) / src_size).rgb;\n                m[1] += c;\n                s[1] += c * c;\n            }\n        }\n\n        for (int j = 0; j <= radius; ++j)  {\n            for (int i = 0; i <= radius; ++i)  {\n                vec3 c = texture(iChannel0, uv + vec2(i,j) / src_size).rgb;\n                m[2] += c;\n                s[2] += c * c;\n            }\n        }\n\n        for (int j = 0; j <= radius; ++j)  {\n            for (int i = -radius; i <= 0; ++i)  {\n                vec3 c = texture(iChannel0, uv + vec2(i,j) / src_size).rgb;\n                m[3] += c;\n                s[3] += c * c;\n            }\n        }\n\n        for (int j = -radius / 2; j <= radius / 2; ++j) {\n          for (int i = -radius / 2; i <= radius / 2; ++i) {\n                vec3 c = texture(iChannel0, uv + vec2(i,j) / src_size).rgb;\n                m[4] += c;\n                s[4] += c * c;\n          }\n        }\n\n        // Region mit der kleinsten Varianz finden und deren Mittelwert als neuen Pixelwert nutzen\n\n        float min_sigma2 = 100.0;\n        for (int k = 0; k < 5; ++k) {\n\n            // Tatsächliche Mittelwerte und Varianzen der Regionen berechnen\n            // Analog zu (17.3) in Burger\n            m[k] /= n;\n            s[k] = abs(s[k] / n - m[k] * m[k]);\n\n            // \"Totale Varianz\"\n            float sigma2 = s[k].r + s[k].g + s[k].b;\n\n            if (sigma2 < min_sigma2) {\n                min_sigma2 = sigma2;\n                // Neuen Pixelwert setzen\n                fragColor = vec4(m[k], 1.0);\n            }\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}