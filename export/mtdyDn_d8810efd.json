{"ver":"0.1","info":{"id":"mtdyDn","date":"1699084587","viewed":62,"name":"Square & Centered Line Intersect","username":"FatalSleep","description":"Efficiently finds the point of intersection between some line x1,y1 and x2,y2 where x1,y1 is center within a square. Use the mouse + left-click to move the line.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["intersection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox( in vec2 p, in vec2 b) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 center = iResolution.xy * 0.5;\n    vec2 mouse = iMouse.xy;\n    vec2 xy1 = iResolution.xx * 0.35;\n    vec2 xy2 = iResolution.xx * 0.75;\n    float sqrlen = xy2.x - xy1.x;\n    \n    ///////////////////////////////////////////////////////////////////////////\n    /*\n        For some line x1,y1,x2,y2 and some square centered at x1,y1 with\n        a length of N, find the long-side of the triangle formed by x1,y1\n        and x2,y2. Then find scalar of 1/2 of N and the long leg of the\n        triangle, then project backwards x2,y2 towards x1,y1 by that scalar.\n    */\n    /*Alternate Method:\n    vec2 offset = mouse;\n    vec2 difference = offset - center;\n    float quadrant = step(abs(difference.x), abs(difference.y));\n    \n    vec2 project;\n    project.x = mix(offset.x, center.x, quadrant);\n    project.y = mix(center.y, offset.y, quadrant);\n    \n    float len = abs((project.x + project.y) - (center.x + center.y));\n    float scalar = (sqrlen * 0.5) / len;\n    vec2 intersect = center + (difference * scalar);\n    */\n    vec2 offset = mouse;\n    vec2 difference = offset - center;\n    vec2 intersect = center + ((difference / max(abs(difference.x), abs(difference.y))) * sqrlen * 0.5);\n    ///////////////////////////////////////////////////////////////////////////\n    \n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    \n    if (abs(sdBox(fragCoord-center, vec2(sqrlen*0.5))) <= 1.0) col = vec3(1.0);\n    if (distance(fragCoord, offset) < 16.0) col = vec3(0.0, 1.0, 0.0);\n    if (distance(fragCoord, intersect) < 16.0) col = vec3(1.0, 0.0, 0.0);\n    if (distance(fragCoord, center) < 16.0) col = vec3(0.0, 0.0, 1.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}