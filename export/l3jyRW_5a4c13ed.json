{"ver":"0.1","info":{"id":"l3jyRW","date":"1727056743","viewed":31,"name":"Wavy checkboard","username":"franco1234811","description":"Wavy checkboard","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["distortion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define OFFSET_SCALE_X 0.2f\n#define OFFSET_SCALE_Y 0.2f\n\n#define OFFSET_FREQUENCY_X 2.2f\n#define OFFSET_FREQUENCY_Y 3.2f\n\n#define OFFSET_SPEED_X 0.2f\n#define OFFSET_SPEED_Y 0.2f\n\n#define FALL_SPEED 0.13f\n\n#define CELL_COUNT 16.0f\n\n#define TWO_PI 2.0f * 3.1415926535f\n\nvec3 sampleColor(float t)\n{\n    return vec3(\n        sin(t * TWO_PI + 0.25f) * 0.5f + 0.5f,\n        sin(t * TWO_PI + 1.5f) * 0.5f + 0.5f,\n        sin(t * TWO_PI + 2.5f) * 0.5f + 0.5f);\n}\n        \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect_ratio = iResolution.x / iResolution.y;\n    \n    uv /= aspect_ratio;\n    uv.y += iTime * FALL_SPEED;\n    \n   \n    vec2 uv_offset = vec2(\n        sin(uv.y * OFFSET_FREQUENCY_X + iTime * OFFSET_SPEED_X * TWO_PI) * OFFSET_SCALE_X,\n        sin(uv.x * OFFSET_FREQUENCY_Y + iTime * OFFSET_SPEED_Y * TWO_PI) * OFFSET_SCALE_Y);\n        \n    vec2 distorted_uv = uv + uv_offset;\n       \n    // Calculates T, used to select color\n    float i = floor(distorted_uv.x * CELL_COUNT);\n    float j = floor(distorted_uv.y * CELL_COUNT);\n    float t = floor(mod(i + j, 2.0));\n\n    // Color\n    vec3 color_a = sampleColor((iTime + i) * 0.1f);\n    vec3 color_b = sampleColor((iTime + i) * 0.1f + 0.05f);\n    vec3 col = mix(color_a, color_b, t);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}