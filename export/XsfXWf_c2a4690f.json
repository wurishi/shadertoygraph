{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define PI2 6.28318530718\n#define speed 8.0\n\nvec2 RandomTune(float time)\n{\n    float ts = mod(time*speed,8.0);\n    ts += 8.0*float(int(abs(time*speed/32.0-16.0)));\n    float ti = float(int(ts));\n    \n    float note = float(int(\n        sin(0.125*ti)\n        *4.0+\n        cos(0.133333333333333333333*ti)\n        *6.0\n            ));\n    \n    // Test tone ladder\n    //float note = float(int(ts/8.0));\n    \n    // Black keys only\n    float nt = mod(note,12.0);\n    if (nt<5.0)\n      nt -= 1.0;\n    \n    if (mod(nt,2.0)==0.0)\n      note-=1.0;//return vec2(0.0);\n    \n    if (sin(ti*3.33)>0.8)\n      return vec2(-100.0);\n    \n    float decay = 15.0-mod(ts,1.0)*30.0;\n    \n    return vec2(note,decay);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 sound1 = RandomTune(iTime);\n    vec2 sound2 = RandomTune(iTime-12.375);\n    vec2 sound3 = RandomTune(iTime*0.5);\n    vec2 sound4 = RandomTune(iTime*0.25);\n    sound3.x -= 12.0;\n    sound4.x -= 24.0;\n    \n    uv.x = uv.x*36.0-28.0;\n    uv.y -= 0.5;\n    uv.y *= 18.0;\n    \n    float i1 = clamp(1.0-distance(uv,sound1),0.0,1.0);\n    float i2 = clamp(1.0-distance(uv,sound2),0.0,1.0);\n    float i3 = clamp(1.0-distance(uv,sound3),0.0,1.0);\n    float i4 = clamp(1.0-distance(uv,sound4),0.0,1.0);\n        \n    fragColor = vec4(i1+i4,i2,i3+i4,1.0);\n}","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":"#define PI2 6.28318530718\n#define speed 8.0\n\nvec2 RandomTune(float FMMod, float time)\n{\n    float ts = mod(time*speed,8.0);\n    ts += 8.0*float(int(abs(time*speed/32.0-16.0)));\n    float ti = float(int(ts));\n    \n    float note = float(int(\n        sin(0.125*ti)\n        *4.0+\n        cos(0.133333333333333333333*ti)\n        *6.0\n            ));\n    \n    float nt = mod(note,12.0);\n    if (nt<5.0)\n      nt -= 1.0;\n    \n    if (mod(nt,2.0)==0.0)\n      note -= 1.0;\n    \n    if (sin(ti*3.33)>0.8)\n      return vec2(0.0);\n    \n    float freq = 440.0*pow(2.0,note/12.0);\n    float decay = 1.0-pow(mod(ts,1.0),0.5*(6.0-FMMod)-cos(time)/2.0);\n       \n    float wav = sin(freq*PI2*time+  // base freq\n                    (3.124+7.14*sin(time/PI2))\n                    *sin(FMMod*freq*PI2*time)// FM Modulation\n                   )*decay; //Fade nod\n    return vec2(wav*sin(time),wav*cos(time));\n}\n\nvec2 mainSound( in int samp,float time)\n{\n  return 0.25*(\n      RandomTune(4.00,time)+ \n      RandomTune(3.00,time+0.125).yx*0.9+ \n      RandomTune(1.50,time-12.375)+ \n      RandomTune(0.50,time*0.5).yx+\n      RandomTune(0.50,time*0.25));\n}","name":"Sound","description":"","type":"sound"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":true,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsfXWf","date":"1407191156","viewed":717,"name":"Procedural Music","username":"Andre","description":"Sorry still busy, added instruments like base and bell. And created another music piece :)","likes":21,"published":1,"flags":8,"usePreview":0,"tags":["procedural","music","fmsynth"],"hasliked":0,"parentid":"","parentname":""}}