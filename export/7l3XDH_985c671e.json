{"ver":"0.1","info":{"id":"7l3XDH","date":"1640101143","viewed":73,"name":"Test2 - 2D circles","username":"gorplex","description":"this fork was used for reference https://www.shadertoy.com/view/7lcXWH\n\nsimple oscillating circles","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test","demo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define NUM_CIRCLES 32\n#define CIRCLE_SPEED 4.0\n#define DESATURATE 0.4\n\nvec3 niceColors(int index)\n{\n\tvec3 COLOR_MASKS[16];\n\tCOLOR_MASKS[0] = vec3( 0.20, 0.30, 1.0 );\n  \tCOLOR_MASKS[1] = vec3( 0.53, 0.85, 0.25 );\n  \tCOLOR_MASKS[2] = vec3( 1.0, 0.56, 0.15 );\n  \tCOLOR_MASKS[3] = vec3( 1.0, 0.0, 0.3 );\n  \tCOLOR_MASKS[4] = vec3( 0.05, 0.55, .30 );\n\tCOLOR_MASKS[5] = vec3( 0.5, 1.0, .40 );\n  \tCOLOR_MASKS[6] = vec3( 1.0, 0.15, 1.0 );\n  \tCOLOR_MASKS[7] = vec3( .20, .30, 0.5 );\n  \tCOLOR_MASKS[8] = vec3( .350, 1.0, 0.5 );\n  \tCOLOR_MASKS[9] = vec3( .70, .60, 0.5 );\n  \tCOLOR_MASKS[10] = vec3( .34, 1., 0.5 );\n  \tCOLOR_MASKS[11] = vec3( .20, .50, 0.5 );\n  \tCOLOR_MASKS[12] = vec3( 0.60, .10, 0.65 );\n  \tCOLOR_MASKS[13] = vec3( .40, .40, 0.85 );\n  \tCOLOR_MASKS[14] = vec3( 1.0, .30, 0.35 );\n  \tCOLOR_MASKS[15] = vec3( 1.0, 0.0, 0.5 );\n    return COLOR_MASKS[index%16];\n}\n\nfloat cosMaxMin(float x, float mx, float mn)\n{\n    return (mx-mn)*(0.5*cos(x)+0.5)+mn;\n}\n\nvec3 circle(vec2 coord, vec2 p, float r, int i) {\n    if(length(coord-p) < r)\n    {\n        return niceColors(i);\n    }\n    return vec3(0.0);\n}\n\nvec3 movingCircle(vec2 coord, int i)\n{\n    //psudo-random frequency mods\n    float sizeRate = cosMaxMin(5.0*float(i),1.0,0.1)*0.001*CIRCLE_SPEED;\n    float xRrate = cosMaxMin(3.0*float(i),1.0,0.1)*0.001*CIRCLE_SPEED;\n    float yRrate = cosMaxMin(2.0*float(i),1.0,0.1)*0.001*CIRCLE_SPEED;\n\n\n    float maxR = 0.18;\n    float r = cosMaxMin(sizeRate*float(iFrame)+float(i), maxR, 0.03);\n    vec2 p = vec2(cosMaxMin(xRrate*float(iFrame)+float(i), 1.0-maxR/2.0, maxR/2.0), cosMaxMin(yRrate*float(iFrame)+float(i), 1.0-maxR/2.0, maxR/2.0));\n    p.x *= iResolution.x/iResolution.y;\n    return circle(coord, p, r, i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n    vec2 uvn = uv;\n\tuvn.x *= aspect;\n    \n    vec3 col = vec3(0.0);\n\n    \n    for(int i;i<NUM_CIRCLES;i++)\n    {\n        col += DESATURATE*movingCircle(uvn, i);\n    }\n\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}