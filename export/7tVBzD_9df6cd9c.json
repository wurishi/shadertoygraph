{"ver":"0.1","info":{"id":"7tVBzD","date":"1664200378","viewed":156,"name":"Tempest Shaders - underwater","username":"rinrin","description":"https://github.com/Rinrin0413/Tempest_Shaders/blob/master/source/shaders/hlsl/terrain.fragment.hlsl#L366","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["caustics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(vec2 p) {\n    vec3 p3 = fract(vec3(p.xyx) * 0.13); \n    p3 += dot(p3, p3.yzx + 3.33); \n    return fract((p3.x + p3.y) * p3.z); \n}\n\nfloat noise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    // Four corners in 2D of a tile\n    float a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n    // Smooth Interpolation\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat saturate(float x) { return clamp(x, 0.0, 1.0) ;}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\nvec3 diffuse = vec3(0., 0., 0.);\nvec2 uv = fragCoord/iResolution.xy;\n\ndiffuse.rgb = vec3(\n    smoothstep(\n        .66,\n        1.,\n        abs(saturate(abs(\n            noise(uv.xy*.8) - noise(uv.xy*.4 + vec2(iTime*1.8 + uv.x*1.6 + uv.y*.4, iTime + uv.x/10.))\n        )) -1.)\n    )\n);\n\nfragColor = vec4(diffuse,1.);\n\n}\n","name":"Image","description":"","type":"image"}]}