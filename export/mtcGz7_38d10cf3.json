{"ver":"0.1","info":{"id":"mtcGz7","date":"1682223201","viewed":61,"name":"Acre study voronoi 2023/04/23","username":"Acre","description":"It may be used for a variety of expressions.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","voronoi","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec2 m = (iMouse.xy*2.0 -iResolution.xy)/ min(iResolution.x, iResolution.y);\n    vec3 col= vec3(1.0);\n    float a,b,c,d;\n    vec3 water=vec3(0.0,0.74,1.0);\n    float AA=3.0/min(iResolution.x, iResolution.y);\n    Voronoi(p+vec2(0.0,iTime*0.1),vec2(3.0),vec2(3.0),a,b,c,d);\n    \n    if(fragCoord.y > 0.5 * iResolution.y)\n    {\n        col=vec3(1.0);\n        if(fragCoord.x < 0.33 * iResolution.x)\n        {\n            col =mix(col,water, smoothstep(AA*4.0,0.0,abs(c)));\n        }\n        else if(fragCoord.x < 0.66 * iResolution.x)\n        {\n            col =vec3(abs(cos(cos(iTime*0.3)*60.0*c)));    \n        }\n        else\n        {\n            col =vec3(abs(cos(cos(iTime*0.3)*60.0*d)));    \n        }\n    }\n    else\n    { \n        col=vec3(0.0);\n        if(fragCoord.x < 0.33 * iResolution.x)\n        {\n            col =mix(col,water, smoothstep(AA*4.0,0.0,abs(length(p-m)-c*6.0)));\n        }\n        else if(fragCoord.x < 0.66 * iResolution.x)\n        {\n            col =mix(col,water, smoothstep(AA*4.0,0.0,abs(length(p+vec2(.0,.5))- sin(c)/c+0.5)));\n        }\n        else\n        {\n            col =mix(col,water,smoothstep( AA, 0.0, d));\n        }\n    }\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 voronoi_noise_randomVector(vec2 UV, vec2 offset)\n{\n\tmat2 m = \tmat2(15.27, 47.63, 99.41, 89.98);\n\tUV = fract(sin(UV* m) * 46839.32);\n\treturn vec2(sin(UV.y * +offset.x) * 0.5 + 0.5, cos(UV.x * offset.y) * 0.5 + 0.5);\n}\nvoid Voronoi(vec2 UV, vec2 AngleOffset, vec2 CellDensity, out float Out, out float Cells, out float Lines,out float Points)\n{\n\tvec2 g = floor(UV * CellDensity);\n\tvec2 f = fract(UV * CellDensity);\n\t\n\tfloat res = 8.0;\n\tfloat md=8.0;\n    vec2 mr;\n\tfor (int y = -1; y <= 1; y++)\n \t{\n\t    for (int x = -1; x <= 1; x++)\n\t\t{\n\t\t    vec2 lattice = vec2(x, y);\n            vec2 offset = voronoi_noise_randomVector(lattice + g, AngleOffset);\n            vec2 r = lattice +offset -f;\n\t\t    float d = dot(r,r);\n\n\t\t\tif (d < res)\n\t\t\t{\n\t\t\t    res = d;\n                mr=r;\n\t\t\t}\n\t\t}\n\t}\n    res = 8.0;\n\tfor (int y = -1; y <= 1; y++)\n \t{\n\t    for (int x = -1; x <= 1; x++)\n\t\t{\n\t\t    vec2 lattice = vec2(x, y);\n            vec2 offset = voronoi_noise_randomVector(lattice + g, AngleOffset);\n            vec2 r = lattice +offset -f;\n\t\t    float d = dot(r,r);\n\n\t\t\tif (d < res)\n\t\t\t{\n\t\t\t    res = d;\n\t\t\t    Out = res;\n\t\t\t    Cells = offset.x;\n\t\t\t}\n\t\t\tif( dot(mr-r,mr-r)>0.00001)\n\t\t\t{\n                md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n\t\t\t}\n\t\t}\n\t}\n\n    Lines = md;\n    Points=res;\n    //Lines = mix(1.0, 0.0, smoothstep( 0.0, 0.1, md ));\n\t//Points =smoothstep( 0.1, 0.0, res );\n}\n\nfloat sdCircle( in vec2 p, in float r ) \n{\n    return length(p)-r;\n}","name":"Common","description":"","type":"common"}]}