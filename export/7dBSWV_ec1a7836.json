{"ver":"0.1","info":{"id":"7dBSWV","date":"1621075644","viewed":233,"name":"mirror_","username":"mdb","description":"ray tracing reflection on a dirty miror","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = texture(iChannel0, uv).xyz;\n    col = pow(col, vec3(1.8));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159265359\n#define SAMPLES 64\n\n// pseudo random numbers////////////////////////////////////////////////\nuint seed = 0u;\nvoid hash(){\n    seed ^= 2747636419u;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n}\nvoid initRandomGenerator(vec2 uv){\n    seed = uint(uv.y*iResolution.x + uv.x) + uint(iTime*6000000.0);\n}\nfloat random(){\n    hash();\n    return float(seed)/4294967295.0;\n}\n\nvec3 newDir(vec3 n){\n    float teta = random()*2.0*PI;\n    float z = random()*2.0-1.0;\n    vec3 v = vec3(sqrt(1.0-z*z)*cos(teta), sqrt(1.0-z*z)*sin(teta), z); \n    if (dot(n, v)<0.0);\n        return -v;\n    return v;\n}\n////////////////////////////////////////////////////////////////////////\n\nvec2 box(vec3 ro, vec3 rd, vec3 up, vec3 down){\n        \n        vec3 dirfrac = 1.0 / rd;\n        vec3 tdown = (down - ro)*dirfrac;\n        vec3 tup = (up - ro)*dirfrac;\n\n        float tmin = max(max(min(tdown.x, tup.x), min(tdown.y, tup.y)), min(tdown.z, tup.z));\n        float tmax = min(min(max(tdown.x, tup.x), max(tdown.y, tup.y)), max(tdown.z, tup.z));\n\n        // if tmax < 0, ray (line) is intersecting AABB, but the whole AABB is behind us\n        if (tmax < 0.0) return vec2(-1.0);\n\n        // if tmin > tmax, ray doesn't intersect AABB\n        if (tmin > tmax) return vec2(-1.0);\n\n        return vec2(tmin, tmax);\n}\n\n\nvec3 getScene(vec3 ro, vec3 rd){\n    \n    vec3 n = vec3(-1.0, 0.0, 0.0);\n    float t = box(ro, rd, vec3(1.0, 5.5, 8.0), vec3(0.9, -5.5, -8.0)).x;\n    if (t < 0.0) return vec3(0.0);\n    \n    ro = ro + t*rd;\n\n    vec2 uv = ro.zy * 2.0;\n    float weight = texture(iChannel1, uv).x;\n    weight = pow(weight*1.9, 1.4);\n    \n    if(random() < clamp(1.0 - weight, 0.0, 0.8)){\n        float x = ro.x;\n        float depth = 0.03;\n        ro += rd*depth;\n        ro.x = x;\n        uv = ro.zy * 2.0;\n        weight = texture(iChannel1, uv).x;\n        weight = pow(weight*1.4, 1.4);\n    }\n    \n    weight = clamp(weight, 0.2, 0.55);\n    \n    //light\n    vec3 rVec = reflect(rd, n);\n    vec3 col = vec3(0.0);\n    for(int i = 0; i < SAMPLES; i++){\n        vec3 nVec = newDir(n);\n        rd = mix(rVec, nVec, weight);\n        rd = normalize(rd);\n        t = box(ro, rd, vec3(0.5, 1.0, 2.0), vec3(-0.8, 0.97, -0.5)).x;\n        if (t > 0.0) col += vec3(6.0);\n    }\n    col /= float(SAMPLES);\n                   \n    \n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col;\n    initRandomGenerator(fragCoord);\n    \n    //get ray\n    uv = uv*2.0-1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    float t = iTime*0.6;\n    vec3 camPos = vec3(sin(t*0.5)*0.2, sin(t + 3.0)*0.3, -0.1-0.5*(1.0 + sin(t*0.5)));\n    vec3 target = vec3(0.4, 0.0, 0.0);\n    vec3 dir0 = normalize(target-camPos);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 right = normalize(cross(up, dir0));\n    up = cross(dir0, right);\n    vec2 off = vec2(random(),random()) / iResolution.y;\n    uv += off;\n    vec3 rd = normalize(dir0 + right*uv.x + up*uv.y);\n    \n    col = getScene(camPos, rd);\n    vec3 last = texture(iChannel0,  fragCoord/iResolution.xy).xyz;\n    float weight = 0.3;\n    col = mix(last, col, weight);\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}