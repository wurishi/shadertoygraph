{"ver":"0.1","info":{"id":"wtKXRW","date":"1582313272","viewed":78,"name":"Product of chance","username":"suraimu752","description":"Not what I wanted to do.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat sdBox(vec3 p, vec3 size){\n    return length(max(abs(p) - size, 0.)) - .05;\n}\n\nfloat grid(vec3 p){\n    // return length(vec3(2.5) - abs(p)) - .5;\n    float r = abs(p.z - 2.5);\n    if(r < 0.001){\n        // r = 100.;\n    }\n    return r;\n}\n\nvec3 trans(vec3 p){\n    float m = 5.;\n    vec3 q = mod(p, m) - m * .5;\n    q.x += (rand(floor(p.yz * .2)) * 2. - 1.) * .4;\n    q.y += (rand(floor(p.zx * .2)) * 2. - 1.) * .4;\n    q.z += (rand((floor(p.xz * .2) + floor(p.yy * .2)) * .01) * 2. - 1.) * 3.9;\n    // q.y += (rand(floor(p.xz * .2)) * 2. - 1.) * .4;\n    return q;\n}\n\nfloat dist(vec3 p){\n    return sdBox(trans(p), vec3(1.8, 1.8, .5));\n}\n\nvec3 getNormal(vec3 p){\n    float d = 0.001;\n    return normalize(vec3(\n        dist(p + vec3(d, 0., 0.)) - dist(p + vec3(-d, 0., 0.)),\n        dist(p + vec3(0., d, 0.)) - dist(p + vec3(0., -d, 0.)),\n        dist(p + vec3(0., 0., d)) - dist(p + vec3(0., 0., -d))\n    ));\n}\n\nvec3 rotateX(vec3 p, float th){\n    return p * mat3(\n        1, 0, 0,\n        0, cos(th), -sin(th),\n        0, sin(th), cos(th)\n    );\n}\nvec3 rotateY(vec3 p, float th){\n    return p * mat3(\n        cos(th), 0, sin(th),\n        0, 1, 0,\n        -sin(th), 0, cos(th)\n    );\n}\nvec3 rotateZ(vec3 p, float th){\n    return p * mat3(\n        cos(th), -sin(th), 0,\n        sin(th), cos(th), 0,\n        0, 0, 1\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    vec3 lightDir = normalize(vec3(.3, .5, -1.5));\n\n    vec3 col = vec3(0.);\n\n    vec3 screen = vec3(uv, 0.), cpos = vec3(0, 0, -.3);\n    vec3 v = normalize(screen - cpos), p = cpos;\n    \n    p += vec3(0., 0., iTime);\n\n    float d;\n\n    for(int i = 0; i < 2000; i++){\n        d = dist(p) * .2;\n        p += v * d;\n        if(d < 0.001) {\n            vec3 normal = getNormal(p);\n            col = vec3(1.) * max(0., dot(normal, lightDir));\n            break;\n        }\n    }\n\n    fragColor = vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"}]}