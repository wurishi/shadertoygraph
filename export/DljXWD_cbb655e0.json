{"ver":"0.1","info":{"id":"DljXWD","date":"1676093939","viewed":110,"name":"CRT Tubey","username":"jpweeks","description":"CRT Effect\n\nTook some stuff from â€“ https://www.shadertoy.com/view/ldjGzV","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["crt","tubes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.141592653589793;\n\nfloat quantGradient(float value, float step) {\n  float scaled = value * step;\n  float diff = fract(scaled);\n  return (scaled - diff) / step;\n}\n\nfloat band(float x, float count) {\n    return sin(x * 2.0 * count * PI - PI * 0.5) * 0.5 + 0.5;\n}\n\nvec2 screenDistort(vec2 uv) {\n\tuv -= vec2(0.5, 0.5);\n\tuv = uv * (1.0 + 1.5 * uv.x * uv.x * uv.y * uv.y);\n\tuv += vec2(0.5, 0.5);\n\treturn uv;\n}\n\nfloat vignette(vec2 uv) {\n    float vigAmt = 1.5 + 0.05 * sin(iTime + 5.0 * cos(iTime * 5.0));\n    return (1.0 - vigAmt * (uv.y - 0.5) * (uv.y - 0.5)) *\n        (1.0 - vigAmt * (uv.x - 0.5) * (uv.x - 0.5));\n}\n\nfloat scanline(vec2 uv, float offset, float size, float speed, float interval) {\n    float y = uv.y - mod(iTime * speed + offset, interval);\n    float s0 = smoothstep(0.0, 0.01, y);\n    float s1 = smoothstep(0.01 + size, 0.02 + size, y);\n    return s0 - s1;\n}\n\nvec3 crtEffect(vec2 uv, float mask) {\n    float bandCountX = 120.0;\n    float bandCountY = 140.0;\n    vec2 channelStep = vec2(60.0, 30.0) *\n        (1.0 - mask * 0.9) / iResolution.xy;\n\n    vec2 uvR = uv;\n    vec2 uvG = uv + channelStep;\n    vec2 uvB = uv + channelStep * 2.0;\n    \n    float bandR = band(uvR.x, bandCountX) * band(uvR.y, bandCountY);\n    float bandG = band(uvG.x, bandCountX) * band(uvG.y, bandCountY);\n    float bandB = band(uvB.x, bandCountX) * band(uvB.y, bandCountY);\n\n    float colR = texture(iChannel0, uvR).r;\n    float colG = texture(iChannel0, uvG).g;\n    float colB = texture(iChannel0, uvB).b;\n    \n    return vec3(colR * bandR, colG * bandG, colB * bandB);\n}\n\nvec3 vignetteEffect(vec2 uv, float mask) {\n    return vec3(-(1.0 - mask)) * vec3(0.8, 0.7, 0.2) * 1.6;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = screenDistort(uv);\n    uv.x += scanline(uv, 0.1, 0.03, 0.5, 5.0) * 0.01;\n    uv.x += scanline(uv, 0.3, 0.0, 0.8, 3.0) * 0.01;\n    \n    float mask = vignette(uv);\n    vec3 colorOut = crtEffect(uv, mask);\n    colorOut *= 1.6;\n    colorOut += vignetteEffect(uv, mask);\n\n    fragColor = vec4(colorOut, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}