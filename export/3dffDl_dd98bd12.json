{"ver":"0.1","info":{"id":"3dffDl","date":"1589234887","viewed":82,"name":"MandelToast99","username":"janekx21","description":"fast and simple","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["mangelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct complex {\n    float r;\n    float i;\n};\n\ncomplex mul(complex a, complex b) {\n    return complex(a.r*b.r - a.i*b.i, a.i*b.r + a.r*b.i);\n}\n\ncomplex add(complex a, complex b) {\n    return complex(a.r + b.r, a.i + b.i);\n}\n\ncomplex mandel(complex z, complex c) {\n    return add(mul(z, z), c);\n}\n\nfloat lensq(in complex value) {\n    return value.r * value.r + value.i * value.i;\n}\n\nfloat itterNumber(complex c, int lim) {\n    complex value = complex(0.0,0.0);\n    float i = 0.0;\n    while (true) {\n        if (i > float(lim)) return -1.0;\n        value = mandel(value, c);\n        \n        if (lensq(value) > 4.0) {\n        \tbreak;\n        }\n        i += 1.0;\n    }\n    \n    float d = value.r * value.r + value.i * value.i;\n    return i - log2(log2(d)) + 4.0;\n}\n\nvec3 hsl2rgb (in vec3 c ) {\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec3 mandelColor(vec2 pos) {\n    int steps = 400;\n    \n    vec3 col = vec3(0,0,0);\n    float ret = itterNumber(complex(pos.x, pos.y), steps);\n    if (ret > 0.0) {\n        col = hsl2rgb(vec3(ret / float(40.0), smoothstep(-1.0, 1.0, sin(ret * .2)) * .5 + .5, .5));\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    \n    float zoom = 1.0 / (exp(iTime)+.1);\n    \n    \n    vec3 col = vec3(0,0,0);\n    float count = 0.0;\n    for (float x = -1.0; x <= 1.0; x+=1.0) {\n        for (float y = -1.0; y <= 1.0; y+=1.0) {\n            vec2 uv = (fragCoord + vec2(x,y)*.125)/iResolution.xy * 2.0 - 1.0;\n            uv.x *= iResolution.x / iResolution.y;\n            uv = rot(uv, iTime * .1 + 1.0);\n            uv *= zoom;\n\n            vec2 mouse = texture(iChannel0, vec2(0,0)).zw;\n\n            uv += mouse * 4.0 - 2.0;\n            \n            \n            col += mandelColor(uv);\n            count += 1.0;\n        }\n    }\n    col /= count;\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 prev = texture(iChannel0, vec2(0,0)).zw;\n    \n    if (iTime < .1) prev = vec2(.5,.5);\n    \n    float zoom = 1.0 / (exp(iTime)+.1);\n    \n    vec2 mouse = iMouse.xy / iResolution.xy;\n    vec2 last = texture(iChannel0, vec2(0,0)).xy;\n    vec2 delta = mouse - last;\n    \n    delta = rot(delta, iTime * .1 + 1.0);\n    \n    delta *= zoom;\n    fragColor = vec4(mouse, delta + prev);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec2 rot (vec2 value, float angle) {\n    mat2 rotation = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    return rotation * value;\n}","name":"Common","description":"","type":"common"}]}