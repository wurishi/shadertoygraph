{"ver":"0.1","info":{"id":"wlKGDt","date":"1580220762","viewed":317,"name":"JuliaLand","username":"lucasassone","description":"A Julia fractal landscape with raymarching","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","fractal","julia","landscape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nint julia(vec2 c, vec2 z) {\n\tz.y = mod(z.y + 0.9, 1.8) - 0.9;\n\tint counter = 0;\n\twhile(counter < 600) {\n\t\tz = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n\t\tif (length(z) > 2.) break;\n\t\tcounter++;\n\t}\n\treturn counter;\n}\n\nvec3 skycol(int counter) {\n\tfloat val = 2.0 * log(float(counter + 3)) - 3.891 - 1.570;\n\tfloat red = sin(0.5 * val) * 0.20 + 0.80;\n\tfloat gre = sin(0.5 * val) * 0.20 + 0.80;\n\tfloat blu = sin(0.5 * val) * 0.10 + 0.90;\n\treturn vec3(red, gre, blu);\n}\n\nvec3 gndcol(int counter) {\n\tfloat val = 2.0 * log(float(counter + 3)) - 3.891 - 1.570;\n\tfloat red = sin(1.3 * val) * 0.250 + 0.350;\n\tfloat gre = sin(1.1 * val) * 0.282 + 0.518;\n\tfloat blu = sin(1.0 * val) * 0.694 + 0.306;\n\treturn vec3(red, gre, blu) * (0.8 + 0.3 * sin(0.1 * float(counter)));\n}\n\n\nconst vec3 camera = vec3(0.0, 0.3, 0.6);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (gl_FragCoord.xy - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y) + vec2(0.0, 0.5);\n\n\tfloat den = camera.z / (camera.z - uv.y);\n\tvec2 r = 0.02 * vec2(uv.x * den, camera.y * abs(den));\n\n\tint counter;\n\tvec3 color;\n\tfloat t2 = 0.080 * iTime;\n\tfloat t3 = 0.004 * iTime;\n\n\tif(den > 0.0) {\n\t\tcounter = julia(vec2(-0.8, 0.156), r + vec2(0.0, t2));\n\t\tcolor = gndcol(counter);\n\t\tif (counter < 100) {\n\t\t\tint counter0 = julia(vec2(-0.8, 0.156), vec2(-r.x, r.y + 0.9 + t3));\n\t\t\tcolor = mix(0.7 * skycol(counter0), color, float(counter) / 100.0);\n\t\t}\n\t} else {\n\t\tcounter = julia(vec2(-0.8, 0.156), r + vec2(0.0, 0.9 + t3));\n\t\tcolor = skycol(counter);\n\t}\n    \n    // postprocessing\n    // fog\n    float fog = 0.9 * fract(r.y / (r.y + 0.04));\n    color = mix(color, vec3(1.00, 0.90, 0.70), fog);\n    // vignette\n    color *= cos(uv.x) * cos(2.0 * (uv.y - 0.5)) + 0.2;\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}