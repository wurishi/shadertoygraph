{"ver":"0.1","info":{"id":"NtlSzr","date":"1625085975","viewed":31,"name":"Poligonal Face(x)","username":"DimKA3102","description":"Don't work","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["poligon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float _(float a, float b, float c){\n                  return max(a,max(b,c));\n        }\n             \n        float L(vec2 p, vec2 P0, vec2 P1){\n                float a = -(P1.y-P0.y);\n                float b =  (P1.x-P0.x);\n                float d =  P0.x*P1.y- P0.y*P1.x; \n                float x = p.x;\n                float y = p.y;\n                \n                 return a*x + b*y + d;\n        }\n    \n    float T(vec2 p, vec2 P0, vec2 P1, vec2 P2){\n          return  _(\n                     L(p, P0, P1),\n                     L(p, P1, P2), \n                     L(p, P2, P0)\n                   );   \n    }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//  digitalized Pi profile                      \n vec2 P[56];\n       P[ 0] = vec2(-0.99687 ,      0.71875);\n       P[ 1] = vec2(-0.93437 ,   0.70313);\n       P[ 2] = vec2(-0.88438 ,   0.70313);\n       P[ 3] = vec2(-0.8375  ,   0.70313);\n       P[ 4] = vec2(-0.79063 ,      0.68125);\n       P[ 5] = vec2(-0.75    ,   0.66250);\n       P[ 6] = vec2(-0.70937 ,    0.65625);\n       P[ 7] = vec2(-0.68125 ,    0.64063);\n       P[ 8] = vec2(-0.65312 ,    0.62187);\n       P[ 9] = vec2(-0.61562 ,    0.59062);\n       P[10] = vec2(-0.59688 ,    0.55000);\n       P[11] = vec2(-0.6     ,      0.52187);\n       P[12] = vec2(-0.625   ,    0.50937);\n       P[13] = vec2(-0.64375 ,    0.49375);\n       P[14] = vec2(-0.64063 ,    0.47500);\n       P[15] = vec2(-0.63125 ,    0.44688);\n       P[16] = vec2(-0.625   ,   0.41563);\n       P[17] = vec2(-0.61562 ,    0.40312);\n       P[18] = vec2(-0.61562 ,    0.38125);\n       P[19] = vec2(-0.62187 ,    0.36250);\n       P[20] = vec2(-0.62813 ,    0.34375);\n       P[21] = vec2(-0.61875 ,    0.31250);\n       P[22] = vec2(-0.60938 ,    0.28750);\n       P[23] = vec2(-0.6     ,   0.26875);\n       P[24] = vec2(-0.58437 ,    0.24375);\n       P[25] = vec2(-0.58125 ,    0.20937);\n       P[26] = vec2(-0.58437 ,    0.19062);\n       P[27] = vec2(-0.60625 ,    0.18750);\n       P[28] = vec2(-0.62187 ,    0.18437);\n       P[29] = vec2(-0.62813 ,    0.16562);\n       P[30] = vec2(-0.61875 ,    0.14375);\n       P[31] = vec2(-0.6375  ,   0.12500);\n       P[32] = vec2(-0.64063 ,    0.10625);\n       P[33] = vec2(-0.65    ,   0.090625);\n       P[34] = vec2(-0.66875 ,    0.078125);\n       P[35] = vec2(-0.66875 ,    0.053125);\n       P[36] = vec2(-0.66562 ,    0.040625);   \n       P[37] = vec2(-0.675   ,   0.0062500);\n       P[38] = vec2(-0.69375 ,    -0.015625);\n       P[39] = vec2(-0.71875 ,    -0.028125);\n       P[40] = vec2(-0.74687 ,    -0.034375);\n       P[41] = vec2(-0.77187 ,    -0.034375);\n       P[42] = vec2(-0.80312 ,    -0.034375);\n       P[43] = vec2(-0.83437 ,    -0.034375);\n       P[44] = vec2(-0.86875 ,    -0.043750);\n       P[45] = vec2(-0.87813 ,    -0.062500);\n       P[46] = vec2(-0.89063 ,    -0.087500);\n       P[47] = vec2(-0.90625 ,    -0.10313);\n       P[48] = vec2(-0.92188 ,    -0.12813);\n       P[49] = vec2(-0.9375  ,   -0.16563);\n       P[50] = vec2(-0.99687 ,    -0.17500);\n       P[51] = vec2(-0.99687 ,    0.012500);\n       P[52] = vec2(-1       ,      0.20625);\n       P[53] = vec2(-0.9875  ,   0.37500);\n       P[54] = vec2(-0.99687 ,    0.52500);\n       P[55] = vec2(-0.99687 ,    0.71562);\n   \n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 p = 1.0 - 2.0* fragCoord/iResolution.xy;\n    //vec2 m = 1.0 - 2.0* iMouse.xy/iResolution.xy;\n\n     float x = p.x * iResolution.x/iResolution.y;\n     float y = p.y ;\n    /* \n     float mx = m.x * iResolution.x/iResolution.y;\n     float my = m.y ;\n           \n            x/=mx;\n            y/=my;\n            \n            p.x=x;\n            p.y=y;\n   */\n\n      float  z = 1.0e25; //infinity?\n              for(int i=0;i<40-4;i++)\n                z = min(z, T(p,  P[i],P[i+1], P[i+3]) );   \n       float     f = 1.25/z; \n\n    // Time varying pixel color\n               vec3 col = vec3(1.0, 1.0, 1.0);\n                if(f >= 0.0)col.g = sin(iTime/10.0);\n                   else     col.r = f;\n                \n\n    // Output to screen\n                 fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}