{"ver":"0.1","info":{"id":"ttG3DR","date":"1578645262","viewed":436,"name":"Draw A Tree ","username":"shackle","description":"If nothing, please reset time. ","likes":12,"published":3,"flags":32,"usePreview":0,"tags":["tree","grow","leaves"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    // Output to screen\n    fragColor = vec4(texture(iChannel0,uv).xyz,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.141592654\n\nuint GetIndex(vec2 fragCoord,vec2 iResolution)\n{\n    fragCoord-=0.5;\n    return uint(fragCoord.y * iResolution.x + fragCoord.x);\n}\nvec2 GetUV(uint index,vec2 iResolution)\n{\n    float y=floor(float(index)/iResolution.x);\n    float x=float(index)-y*iResolution.x;\n    return (vec2(x,y)+0.5)/iResolution.xy;\n}\n// setting\n// if FPS is low, the time_rate should be small;\nconst float time_rate=30.0;\nconst float time_begin=0.5;\nconst uint branch=2U;\nconst float stop_thre=0.2;\nconst float atten=0.8;\nconst float leaf_size=0.5;","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nfloat RadicalInverse(uint Base, uint i)\n{\n    float Digit, Radical, Inverse;\n    Digit = Radical = 1.0 / float(Base);\n    Inverse = 0.0;\n    while (i > 0U) {\n        Inverse += Digit * float(i % Base);\n        Digit *= Radical;\n\n        i /= Base;\n    }\n    return Inverse;\n}\n\nvec2 Rot(vec2 v, float angle)\n{\n    return vec2(v.x * cos(angle) + v.y * sin(angle),\n        v.y * cos(angle) - v.x * sin(angle));\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 uv=fragCoord/iResolution.xy;\n   \n    float kt=iTime*time_rate;\n    //if(kt<time_begin)    \n    if(iFrame<2)\n    {\n        fragColor=vec4(0.0);\n        return;\n    }\n    kt-=time_begin;\n\n    vec4 preData=texture(iChannel0,uv);\n    if(preData.y>0.0)\n    {\n        fragColor=preData;\n        return;\n    }\n\n    uint drawIndex = uint(kt);\n    uint locIndex=GetIndex(fragCoord,iResolution.xy);\n    if(drawIndex!=locIndex)\n    {\n        fragColor=preData;\n        return;\n    }\n    else if(drawIndex<1U)\n    {\n        fragColor=vec4(0.0,0.0,0.0,1.0);\n        return;\n    }\n    else if(drawIndex<branch)\n    {\n        fragColor=vec4(0.0,0.3-0.15*float(drawIndex)/float(branch),0.0,1.0);\n        return;\n    }\n    uint rootIndex=drawIndex/branch;\n    vec4 rootData=texture(iChannel0,GetUV(rootIndex,iResolution.xy));\n\n    float rd0=RadicalInverse(2U,drawIndex)*2.0-1.0;//[-1,1]\n    float rd1=RadicalInverse(3U,drawIndex)*0.6+0.4;//[0.4,1]\n\n    vec2 dir=rootData.zw;\n    dir=atten*Rot(dir,0.15*PI*rd0);\n\n    vec2 pos=rootData.xy+dir*0.25*rd1;\n    \n\n    fragColor=vec4(pos,dir);\n    // fragColor=vec4(1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nfloat SDF_line(vec2 P,vec2 O,vec2 D)\n{\n    vec2 OP=P-O;\n    vec2 OH=dot(OP,D)*D;\n    vec2 HP=OP-OH;\n    return length(HP);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 uv=fragCoord/iResolution.xy;\n    vec2 loc=uv-vec2(0.5,0.0);\n    loc.x*=iResolution.x/iResolution.y;\n\n    float kt=iTime*0.8*time_rate;\n    kt=mod(kt,time_rate+pow(2.0,1.0+ceil(log(stop_thre)/log(atten))));\n\n    //if(kt<time_begin)    \n    if(iFrame<2||kt<time_begin)\n    {\n        fragColor=vec4(vec3(0.0),1.0);\n        return;\n    }\n    kt-=time_begin;\n    vec4 preColor=texture(iChannel0,uv);\n\n    uint drawIndex = uint(kt);\n    float progress=fract(kt);\n    progress=smoothstep(0.0,0.4,progress);\n\n    vec4 data=texture(iChannel1,GetUV(drawIndex,iResolution.xy));\n    vec4 rootData=texture(iChannel1,GetUV(drawIndex/branch,iResolution.xy));\n\n    vec2 dir=data.zw;\n    vec2 root=rootData.xy;\n    vec2 target=data.xy+dir*0.01;\n\n    target=mix(root,target,progress);\n    float len=distance(target,root);\n\n\n    vec3 f=vec3(0.0);\n\n    float p=length(dir);\n\n    if(p>stop_thre)\n    {   \n        float d0=distance(loc,root)+distance(loc,target)-len;\n        float d1=SDF_line(loc,root,normalize(dir));\n        f=vec3(0.7,0.4,0.35)*smoothstep(0.005,-0.00,max(d1,d0));\n    }else if(p>atten*stop_thre)\n    {\n        float kfm=0.8;\n        float d0=distance(loc,root)+kfm*distance(loc,target);\n        f=vec3(0.557,1.0,0.514)*smoothstep(kfm+leaf_size,kfm,d0/len);\n    }\n    \n    // float f=smoothstep(0.01,-0.00,distance(uv,target));\n\n    fragColor=max(preColor,vec4(vec3(f),1.0));\n}","name":"Buffer B","description":"","type":"buffer"}]}