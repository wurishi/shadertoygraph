{"ver":"0.1","info":{"id":"4l2fzK","date":"1516528067","viewed":244,"name":"Curl noise test 2","username":"AsGreyWolf","description":"Curl noise test 2","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 background = vec3(texture(iChannel0, uv).z, 0.0, 0.0);\n    vec3 prev = texture(iChannel1, uv).xyz;\n    fragColor = vec4(background+prev, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nfloat bilinear(float tl, float tr, float bl, float br, float x, float y){\n\treturn mix(mix(tl, tr, x), \n               mix(bl, br, x), y);\n}\nfloat quintic(float t){\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n}\nfloat triquintic(float tl1, float tr1, float bl1, float br1, float tl2, float tr2, float bl2, float br2, float x, float y, float z){\n\tx = quintic(x);\n    y = quintic(y);\n    return mix(bilinear(tl1, tr1, bl1, br1, x, y),\n               bilinear(tl2, tr2, bl2, br2, x, y),\n               quintic(z));\n}\nconst vec3 patches[] = vec3[12](\n    vec3(0,1,1),\n    vec3(0,1,-1),\n    vec3(0,-1,1),\n    vec3(0,-1,-1),\n    vec3(1,0,1),\n    vec3(1,0,-1),\n    vec3(-1,0,1),\n    vec3(-1,0,-1),\n    vec3(1,1,0),\n    vec3(1,-1,0),\n    vec3(-1,1,0),\n    vec3(-1,-1,0)\n);\nfloat rand(vec3 c){\n\tvec3 r = texelFetch(iChannel0, ivec2(c.xy+c.z), 0).xyz;\n    return r[int(c.z) % 3];\n}\nvec3 randV(vec3 c){\n    return patches[int(rand(c) * 12.0)];\n}\nfloat perlin(vec3 c){\n    vec3 cell = floor(c);\n    vec3 dc = c-cell;\n    float tl1 = dot(dc, randV(cell));\n    float tr1 = dot(dc - vec3(1, 0, 0), randV(cell + vec3(1, 0, 0)));\n    float bl1 = dot(dc - vec3(0, 1, 0), randV(cell + vec3(0, 1, 0)));\n    float br1 = dot(dc - vec3(1, 1, 0), randV(cell + vec3(1, 1, 0)));\n    float tl2 = dot(dc - vec3(0, 0, 1), randV(cell + vec3(0, 0, 1)));\n    float tr2 = dot(dc - vec3(1, 0, 1), randV(cell + vec3(1, 0, 1)));\n    float bl2 = dot(dc - vec3(0, 1, 1), randV(cell + vec3(0, 1, 1)));\n    float br2 = dot(dc - vec3(1, 1, 1), randV(cell + vec3(1, 1, 1)));\n    return triquintic(tl1, tr1, bl1, br1, tl2, tr2, bl2, br2, dc.x, dc.y, dc.z);\n}\nfloat perlin5(vec3 c){\n    float amplitude = 1.0;\n    float v = 0.0;\n    float m = 0.0;\n    for(int i=0;i<5;i++){\n        v+=perlin(c)*amplitude;\n        m+=amplitude;\n        amplitude/=2.0;\n        c*=2.0;\n    }\n    return v;\n}\nfloat ramp(float r){\n\treturn clamp(r*(15.0 + r*r*(-10.0 + 3.0*r*r))/8.0, -1.0, 1.0);\n}\nvec3 curl(vec3 c){\n\tfloat U = perlin5(c);\n    // U *= ramp(max(0.0, length(c.xy)-5.0));\n    return vec3(dFdy(U), -dFdx(U), U);\n}\nfloat timeFactor(float T){\n    float t = iTime/T;\n    t -= floor(t);\n    t *= 2.0;\n    if(t<=1.0)\n        return t;\n    return 2.0-t;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float size = 0.1;\n\tvec2 uv = fragCoord.xy/iResolution.xy / size;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 cur = curl(vec3(uv, timeFactor(5.0)*2.0));\n    fragColor = vec4(cur.xy*50.0*iTimeDelta*40.0+0.5, cur.z*0.5+0.5, 1.0);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float src(vec2 pos){\n    //return step(abs(dot(pos-0.5, pos-0.5)-0.25), 0.001);\n    return step(abs(pos.x+pos.y - 1.0), 0.001) + \n           step(abs(-pos.x+pos.y),      0.001);\n}\nconst vec2 dps[9] = vec2[9](\n\tvec2(0,1),\n    vec2(1,1),\n    vec2(1,0),\n    vec2(1,-1),\n    vec2(0,-1),\n    vec2(-1,-1),\n    vec2(-1,0),\n    vec2(-1,1),\n    vec2(0,0)\n);\nfloat move(ivec2 pos, int k){\n    vec2 dir = texelFetch(iChannel0, pos, 0).xy-0.5;\n    int maxi=-1;\n    float maxdot = 1000000.0;\n    for(int i=0;i<9;i++){\n        vec2 to = dir - dps[i];\n        float dist = dot(to,to);\n        if(dist<maxdot){\n            maxdot = dist;\n            maxi = i;\n        }\n    }\n    if(maxi==k) return texelFetch(iChannel1, pos, 0).x;\n    return 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord / iResolution.xy;\n    float w = src(uv);\n    for(int i=0;i<9;i++){\n        w += move(ivec2(fragCoord + dps[i]), i);\n    }\n    //float power = 1.0/mix(8.0,1.0,min(1.0,texelFetch(iChannel2, ivec2(2,0), 0).x*1.1));\n    //if(w<0.5)\n     //   fragColor = vec4(texelFetch(iChannel1, ivec2(fragCoord), 0).xyz/2.7, 1.0);\n\t//else\n        fragColor = vec4(vec3(min(w, 1.0)),1.0);\n}","name":"Buf B","description":"","type":"buffer"}]}