{"ver":"0.1","info":{"id":"l3c3DM","date":"1716644589","viewed":75,"name":"Cairo Tiling Lear","username":"letbonsaibe","description":"Cairo Tiling  base on https://www.youtube.com/watch?v=51LwM2R_e_o&ab_channel=TheArtofCode\n\nthe art of code","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["cairo","titling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653\n\n\nvec3 hash23(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n// first is distance, yz is tileId\nvec3 Cairo(vec2 uv, float angle) {\n    vec2 cellId = floor(uv);\n    float check = mod(cellId.x + cellId.y, 2.);\n\n    uv = fract(uv);\n    uv = 2.0 * uv - 1.0;\n    vec2 p = abs(uv);\n    if (check == 1.0) p.xy = p.yx;\n\n\n    vec2 n = vec2(sin(angle), cos(angle));\n    float d = dot(p - 1.0, n); //slanted line\n\n\n    vec2 tileId = cellId;\n\n\n    if (check == 0.0) {\n        if (d > 0.0 ) {\n            if (uv.x < 0.) {\n                tileId.x -= .5;\n            } else {\n                tileId.x += .5;\n            }\n        } else {\n            if (uv.y < 0.) {\n                tileId.y -=.5;\n            } else {\n                tileId.y += .5;\n            }\n        }\n    } else {\n        if (d < 0.0 ) {\n            if (uv.x < 0.) {\n                tileId.x -=.5;\n            } else {\n                tileId.x += .5;\n            }\n        } else {\n            if (uv.y < 0.) {\n                tileId.y -=.5;\n            } else {\n                tileId.y += .5;\n            }\n        }\n    }\n\n\n\n\n    d = min(d, p.x);  //straight line\n    d = max(d, -p.y); //straight line\n    d = abs(d);\n    d = min(d, dot(p - 1.0, vec2(n.y, -n.x)));\n\n    return vec3(d, tileId);\n}\n\n\nvoid wave(float dist, inout vec3 color) {\n    color *= .8  + 0.2 * sin(dist * 50.0 - iTime * 5.0);\n}\n\n\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // uv belongs [-1.0, 1.0]\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    // mouse belongs [0, 1], grow from west south\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    vec3 col = vec3(0.0);\n     float scale = 1.0 ;\n    uv *= scale;\n    \n    float tt = iTime * 0.3;\n    \n    // rotate\n    uv *= mat2(cos(tt), -sin(tt), sin(tt), cos(tt));\n    \n    // shearing is bad\n    // uv *= mat2(1., sin(tt+0.2), cos(tt+0.3), 1.) \n\n        // angle belongs [0.5PI, PI]\n    float k = mix(mouse.y, abs(sin(iTime * .5)), step(iMouse.z, 0.));\n    float angle = (k*.5 + .5) * PI;\n    \n    \n    vec3 carioTile = Cairo(uv, angle);\n    float d = carioTile.x;\n    vec2 tileId = carioTile.yz;\n\n    float thinkness = 0.01;\n    col += smoothstep(d - fwidth(d), d + fwidth(d), thinkness);\n\n\n    col += hash23(tileId);\n    wave(d, col);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}