{"ver":"0.1","info":{"id":"stjyzK","date":"1649954257","viewed":121,"name":"Golden Liquid","username":"nelsonkuang","description":"Liquid learning","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["liquid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Inspired and referenced from\n// https://wallisc.github.io/rendering/2020/05/02/Volumetric-Rendering-Part-1.html\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nconst float PI = 3.1415926535897932384626433832795;\nconst mat3 m3 = mat3(0.00, 0.80, 0.60, -0.80, 0.36, -0.48, -0.60, -0.48, 0.64);\n\nstruct Material {\n  vec3 ambientColor; // k_a * i_a\n  vec3 diffuseColor; // k_d * i_d\n  vec3 specularColor; // k_s * i_s\n  float alpha; // shininess\n};\n\nstruct Surface {\n  int id; // id of object\n  float sd; // signed distance value from SDF\n  Material mat; // material of object\n};\n\nMaterial gold() {\n  vec3 aCol = 0.5 * vec3(0.7, 0.5, 0);\n  vec3 dCol = 0.6 * vec3(0.7, 0.7, 0);\n  vec3 sCol = 0.6 * vec3(1, 1, 1);\n  float a = 5.;\n\n  return Material(aCol, dCol, sCol, a);\n}\n\nMaterial silver() {\n  vec3 aCol = 0.4 * vec3(0.8);\n  vec3 dCol = 0.5 * vec3(0.7);\n  vec3 sCol = 0.6 * vec3(1, 1, 1);\n  float a = 5.;\n\n  return Material(aCol, dCol, sCol, a);\n}\n\nMaterial checkerboard(vec3 p) {\n  vec3 aCol = vec3(1. + 0.7 * mod(floor(p.x) + floor(p.z), 2.0)) * 0.3;\n  vec3 dCol = vec3(0.3);\n  vec3 sCol = vec3(0);\n  float a = 1.;\n\n  return Material(aCol, dCol, sCol, a);\n}\n\nmat3 identity() {\n  return mat3(vec3(1, 0, 0), vec3(0, 1, 0), vec3(0, 0, 1));\n}\n\nmat2 rotate2d(float theta) {\n  float s = sin(theta), c = cos(theta);\n  return mat2(c, -s, s, c);\n}\n\nSurface sdFloor(vec3 p, float offset, Material mat) {\n  float d = p.y - offset;\n  return Surface(1, d, mat);\n}\n\nSurface sdSphere(vec3 p, float r, vec3 offset, Material mat, mat3 transform, vec3 transformOrigin) {\n  p = (p - offset) * transform - transformOrigin;\n  return Surface(3, length(p) - r, mat);\n}\n\nSurface opUnion(Surface obj1, Surface obj2) {\n  if(obj2.sd < obj1.sd)\n    return obj2; // The sd component of the struct holds the \"signed distance\" value\n  return obj1;\n}\n\nSurface sdSmoothUnion(Surface obj1, Surface obj2, float k) {\n  float d1 = obj1.sd;\n  float d2 = obj2.sd;\n\n  Material mat = obj1.mat;\n\n  float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);\n\n  return Surface(4, mix(d2, d1, h) - k * h * (1.0 - h), mat);\n}\n\nfloat hash1(float n) {\n  return fract(n * 17.0 * fract(n * 0.3183099));\n}\n\nfloat noise(in vec3 x) {\n  vec3 p = floor(x);\n  vec3 w = fract(x);\n\n  vec3 u = w * w * w * (w * (w * 6.0 - 15.0) + 10.0);\n\n  float n = p.x + 317.0 * p.y + 157.0 * p.z;\n\n  float a = hash1(n + 0.0);\n  float b = hash1(n + 1.0);\n  float c = hash1(n + 317.0);\n  float d = hash1(n + 318.0);\n  float e = hash1(n + 157.0);\n  float f = hash1(n + 158.0);\n  float g = hash1(n + 474.0);\n  float h = hash1(n + 475.0);\n\n  float k0 = a;\n  float k1 = b - a;\n  float k2 = c - a;\n  float k3 = e - a;\n  float k4 = a - b - c + d;\n  float k5 = a - c - e + g;\n  float k6 = a - b - e + f;\n  float k7 = -a + b + c - d + e - f - g + h;\n\n  return -1.0 + 2.0 * (k0 + k1 * u.x + k2 * u.y + k3 * u.z + k4 * u.x * u.y + k5 * u.y * u.z + k6 * u.z * u.x + k7 * u.x * u.y * u.z);\n}\n\nfloat fbm_4(in vec3 x) {\n  float f = 2.0;\n  float s = 0.5;\n  float a = 0.0;\n  float b = 0.5;\n  for(int i = min(0, iFrame); i < 4; i++) {\n    float n = noise(x);\n    a += b * n;\n    b *= s;\n    x = f * m3 * x;\n  }\n  return a;\n}\n\nSurface sdScene(vec3 p) {\n  vec3 fbmCoord = (p + 2.0 * vec3(iTime, 0.0, iTime)) / 1.5f;\n\n  Surface floorObj = sdFloor(p, -1., checkerboard(p));\n  Surface leftSphereObj = sdSphere(p, 5.6, vec3(-8.0, 2.0 + 20.0 * sin(iTime), -1), gold(), identity(), vec3(0)); // identity\n  Surface midSphereObj = sdSphere(p, 5.6, vec3(8.0, 8.0 + 12.0 * cos(iTime), 3), gold(), identity(), vec3(0));\n  Surface rightSphereObj = sdSphere(p, 8., vec3(5.0 * sin(iTime), 3.0, 0), gold(), identity(), vec3(0));\n\n  Surface co = sdSmoothUnion(leftSphereObj, midSphereObj, 3.0);\n  co = sdSmoothUnion(co, rightSphereObj, 3.0);\n  co.sd += 7.0 * fbm_4(fbmCoord / 3.2);\n\n  co = opUnion(co, floorObj);\n\n  return co;\n}\n\nSurface rayMarch(vec3 ro, vec3 rd, float start, float end) {\n  float depth = start;\n  Surface co; // closest object\n\n  for(int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = sdScene(p);\n    depth += co.sd;\n    if(co.sd < PRECISION || depth > end)\n      break;\n  }\n\n  co.sd = depth;\n\n  return co;\n}\n\nvec3 calcNormal(in vec3 p) {\n  vec2 e = vec2(1., -1.) * .0005; // epsilon\n  return normalize(e.xyy * sdScene(p + e.xyy).sd +\n    e.yyx * sdScene(p + e.yyx).sd +\n    e.yxy * sdScene(p + e.yxy).sd +\n    e.xxx * sdScene(p + e.xxx).sd);\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n  vec3 up = vec3(0, 1, 0);\n  vec3 cd = normalize(lookAtPoint - cameraPos); // camera direction\n  vec3 cr = normalize(cross(up, cd)); // camera right\n  vec3 cu = normalize(cross(cd, cr)); // camera up\n\n  return mat3(-cr, cu, -cd); \n}\n\nvec3 phong(vec3 lightDir, vec3 normal, vec3 rd, Material mat) {\n  // ambient\n  vec3 ambient = mat.ambientColor;\n\n  // diffuse\n  float dotLN = clamp(dot(lightDir, normal), 0., 1.);\n  vec3 diffuse = mat.diffuseColor * dotLN;\n\n  // specular\n  float dotRV = clamp(dot(reflect(lightDir, normal), -rd), 0., 1.);\n  vec3 specular = mat.specularColor * pow(dotRV, mat.alpha);\n\n  return ambient + diffuse + specular;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\n  vec2 mouseUV = iMouse.xy / iResolution.xy; // Range: <0, 1>\n\n  vec3 backgroundColor = vec3(.835, 1, 1);\n\n  vec3 col = vec3(0);\n\n  vec3 lp = vec3(0, .5, -4); // lookat point - middle box\n\n  vec3 ro = vec3(0, 5, 0);\n\n  float cameraRadius = 3.;\n  ro.yz = ro.yz * cameraRadius * rotate2d(mix(PI / 2., 0., mouseUV.y)); // remap mouseUV.y to <pi/2, 0> range\n  ro.xz = ro.xz * rotate2d(mix(-PI, PI, mouseUV.x)) + vec2(lp.x, lp.z); // remap mouseUV.x to <-pi, pi> range\n\n  vec3 rd = camera(ro, lp) * normalize(vec3(uv, -1)); // ray direction\n\n  Surface co = rayMarch(ro, rd, MIN_DIST, MAX_DIST); // closest object\n\n  if(co.sd > MAX_DIST) {\n    col = backgroundColor; // ray didn't hit anything\n  } else {\n    vec3 p = ro + rd * co.sd; // point on sphere or floor we discovered from ray marching\n    vec3 normal = calcNormal(p);\n\n      // light #1\n    vec3 lightPosition1 = vec3(-8, -6, -5);\n    vec3 lightDirection1 = normalize(lightPosition1 - p);\n    float lightIntensity1 = 0.9;\n\n      // light #2\n    vec3 lightPosition2 = vec3(1, 1, 1);\n    vec3 lightDirection2 = normalize(lightPosition2 - p);\n    float lightIntensity2 = 0.5;\n\n      // final color of object\n    col = lightIntensity1 * phong(lightDirection1, normal, rd, co.mat);\n    col += lightIntensity2 * phong(lightDirection2, normal, rd, co.mat);\n  }\n\n  // Output to screen\n  fragColor = vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"}]}