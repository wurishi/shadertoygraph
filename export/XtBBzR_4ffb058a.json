{"ver":"0.1","info":{"id":"XtBBzR","date":"1514593829","viewed":1168,"name":"Dreaming Cube Snake","username":"slerpy","description":"Quick and dirty","likes":31,"published":3,"flags":0,"usePreview":0,"tags":["raytracing","colors","fun","foggy","rainbow","trippy","experimental","bored"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ITER 28\n\nmat2 rot(float a){ float s=sin(a), c=cos(a); return mat2(c,s,-s,c); }\nfloat box(vec3 p, float r){ return length(max(abs(p)-r,0.)); }\n\nfloat map(vec3 p)\n{   \n    float s = sin( iTime + .6*p.z )/4.;\n    p.xy *= rot( s );\n    p.xy += .5 + vec2( -s, s );\n    \n    vec3 q = abs( p-round(p) );\n    float d = min(min(length(q.xy), length(q.xz)), length(q.yz)) - .01;\n    d = min(d, box(q, .05));\n    q = vec3(.0, ( p.xy - vec2(2.5, 0.5) ) * rot( p.z+iTime ) );\n    d = min(d, box(q, .25));\n    \n    return d;\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n\tvec3  R = iResolution.xyy,\n         rd = normalize(vec3(U-.5*R.xy, R.y)),\n\t     ro = vec2(.0, iTime).xxy;\n    \n    //uint xor = ( (uint(U.x) ^ uint(U.y)) - uint(iFrame) ) % uint(R.x);\n    //if(xor != 0u)discard;\n    \n    rd.xz *= rot(.6);\n    \n    float t=.0, m;\n    for( int i=0; ++i < ITER; ) {\n    \tt += map(ro+rd*t)/2.;\n    }\n    \n    O = vec4( cos(t*rd.z + iTime - .5),\n              exp(-t/6.),\n              1.-exp(-t/4.), \n              1 );\n}","name":"Image","description":"","type":"image"}]}