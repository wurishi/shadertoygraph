{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//---------------------------------------------------------------\n// number rendering code below by P_Malin\n//\n// https://www.shadertoy.com/view/4sf3RN\n//---------------------------------------------------------------\n#define kCharBlank 12.0\n#define kCharMinus 11.0\n#define kCharDecimalPoint 10.0\n#define FONT_RATIO vec2(4.0, 5.0)\n#define FONT_SCALE 40.0\n#define DIGITS 1.0\n#define DECIMAL 2.0\n\n#define COLUMN_COUNT 6.0\n#define LINE_COUNT 4.0\n#define EDGE_SIZE 8.0 // %age of the screen\n#define EDGE_COLOR vec3(0.0)\n\n//MacBeth Palete from wikipedia: http://en.wikipedia.org/wiki/ColorChecker\n//Row1: Natural colors\n\t//Dark skin\t\t3 YR 3.7/3.2\t0.400 0.350 10.1\t#735244\n#define DARK_SKIN\t\t\tvec3(115.0,\t82.0,\t68.0)\t/ 255.0\n\t//Light skin\t2.2 YR 6.47/4.1\t0.377 0.345 35.8\t#c29682\n #define LIGHTSKIN\t\t\tvec3(194.0,\t150.0,\t130.0)\t/ 255.0\n\t//Blue sky\t\t4.3 PB 4.95/5.5\t0.247 0.251 19.3\t#627a9d\n#define BLUESKY \t\t\tvec3(98.0,\t122.0,\t157.0)\t/ 255.0\n\t//Foliage\t\t6.7 GY 4.2/4.1\t0.337 0.422 13.3\t#576c43\n#define FOLIAGE \t\t\tvec3(87.0,\t108.0, \t67.0)\t/ 255.0\n\t//Blue flower\t9.7 PB 5.47/6.7\t0.265 0.240 24.3\t#8580b1\n#define BLUEFLOWER \t\t\tvec3(133.0,\t128.0,\t177.0)\t/ 255.0\n\t//Bluish green\t2.5 BG 7/6\t\t0.261 0.343 43.1\t#67bdaa\n#define BLUISHGREEN\t\t\tvec3(103.0,\t189.0,\t170.0)\t/ 255.0\n\n//Row2: Miscellaneous colors\n\t//Orange\t\t5 YR 6/11\t\t0.506 0.407 30.1\t#d67e2c\n#define ORANGE \t\t\t\tvec3(214.0,\t126.0,\t44.0)\t/ 255.0\n\t//Purplish blue\t7.5 PB 4/10.7\t0.211 0.175 12.0\t#505ba6\n#define PURPLISHBLUE\t\tvec3(80.0,\t91.0,\t166.0)\t/ 255.0\n\t//Moderate red\t2.5 R 5/10\t\t0.453 0.306 19.8\t#c15a63\n#define MODERATERED \t\tvec3(193.0,\t90.0,\t90.0)\t/ 255.0\n    //Purple\t\t5 P 3/7\t\t\t0.285 0.202 6.6\t\t#5e3c6c\n#define PURPLE \t\t\t\tvec3(94.0,\t60.0,\t108.0)\t/ 255.0\n\t//Yellow green\t5 GY 7.1/9.1\t0.380 0.489 44.3\t#9dbc40\n#define YELLOWGREEN \t\tvec3(157.0,\t188.0,\t64.0)\t/ 255.0\n\t//Orange Yellow\t10 YR 7/10.5\t0.473 0.438 43.1\t#e0a32e\n#define ORANGEYELLOW\t \tvec3(224.0,\t163.0,\t46.0)\t/ 255.0\n\n//Row3: Primary and seconday colors\n\t//Blue\t\t\t7.5 PB 2.9/12.7\t0.187 0.129 6.1\t\t#383d96\n#define BLUE \t\t\t\tvec3(56.0,\t61.0,\t150.0)\t/ 255.0\n\t//Green\t\t\t0.25 G 5.4/9.6\t0.305 0.478 23.4\t#469449\n#define GREEN \t\t\t\tvec3(70.0,\t148.0,\t73.0)\t/ 255.0\n\t//Red\t\t\t5 R 4/12\t\t0.539 0.313 12.0\t#af363c\n#define RED \t\t\t\tvec3(175.0,\t54.0,\t60.0)\t/ 255.0\n\t//Yellow\t\t5 Y 8/11.1\t\t0.448 0.470 59.1\t#e7c71f\n#define YELLOW \t\t\t\tvec3(231.0,\t199.0,\t31.0)\t/ 255.0\n\t//Magenta\t\t2.5 RP 5/12\t\t0.364 0.233 19.8\t#bb5695\n#define MAGENTA \t\t\tvec3(187.0,\t86.0,\t149.0)\t/ 255.0\n\t//Cyan\t\t\t5 B 5/8\t\t\t0.196 0.252 19.8\t#0885a1\n#define CYAN \t\t\t\tvec3(8.0,\t133.0, \t161.0)\t/ 255.0\n\n//Row4: Grayscale colors\n    //White\t\t\tN 9.5/\t\t\t0.310 0.316 90.0\t#f3f3f2\n#define WHITE \t\t\t\tvec3(243.0,\t243.0,\t243.0)\t/ 255.0\n    //Neutral 8\t\tN 8/\t\t\t0.310 0.316 59.1\t#c8c8c8\n#define NEUTRAL8 \t\t\tvec3(200.0, 200.0,\t200.0)\t/ 255.0\n    //Neutral 6.5\tN 6.5/\t\t\t0.310 0.316 36.2\t#a0a0a0\n#define NEUTRAL65\t\t\tvec3(160.0,\t160.0,\t160.0)\t/ 255.0\n    //Neutral 5\t\tN 5/\t\t\t0.310 0.316 19.8\t#7a7a79\n#define NEUTRAL5\t\t\tvec3(122.0,\t122.0,\t122.0)\t/ 255.0\n    //Neutral 3.5\tN 3.5/\t\t\t0.310 0.316 9.0\t\t#555555\n#define NEUTRAL35\t\t\tvec3(85.0,\t85.0,\t85.0)\t/ 255.0\n    //Black\t\t\tN 2/\t\t\t0.310 0.316 3.1\t\t#343434\n#define BLACK\t\t\t\tvec3(52.0,\t52.0,\t52.0)\t/ 255.0\n//--------------------------------------------------------------\n\nvec3 GetMacBethColorCOLUMN_COUNT6(const in float yDist)\n{\n    float compareY = LINE_COUNT;\n    \n    if(yDist > --compareY)\n        return BLUISHGREEN;\n\telse if(yDist > --compareY)\n\t\treturn ORANGEYELLOW;\n\telse if(yDist > --compareY)\n\t\treturn CYAN;\n\telse\n\t\treturn BLACK;\n}\n\nvec3 GetMacBethColorCOLUMN_COUNT5(const in float yDist)\n{\n    float compareY = LINE_COUNT;\n    \n    if(yDist > --compareY)\n        return BLUEFLOWER;\n\telse if(yDist > --compareY)\n\t\treturn YELLOWGREEN;\n\telse if(yDist > --compareY)\n\t\treturn MAGENTA;\n\telse\n\t\treturn NEUTRAL35;\n}\n\nvec3 GetMacBethColorCOLUMN_COUNT4(const in float yDist)\n{\n    float compareY = LINE_COUNT;\n    \n    if(yDist > --compareY)\n        return FOLIAGE;\n\telse if(yDist > --compareY)\n\t\treturn PURPLE;\n\telse if(yDist > --compareY)\n\t\treturn YELLOW;\n\telse\n\t\treturn NEUTRAL5;\n}\n\nvec3 GetMacBethColorCOLUMN_COUNT3(const in float yDist)\n{\n    float compareY = LINE_COUNT;\n    \n    if(yDist > --compareY)\n        return BLUESKY;\n\telse if(yDist > --compareY)\n\t\treturn MODERATERED;\n\telse if(yDist > --compareY)\n\t\treturn RED;\n\telse\n\t\treturn NEUTRAL65;\n}\n\nvec3 GetMacBethColorCOLUMN_COUNT2(const in float yDist)\n{\n    float compareY = LINE_COUNT;\n    \n    if(yDist > --compareY)\n        return LIGHTSKIN;\n\telse if(yDist > --compareY)\n\t\treturn PURPLISHBLUE;\n\telse if(yDist > --compareY)\n\t\treturn GREEN;\n\telse\n\t\treturn NEUTRAL8;\n}\n\nvec3 GetMacBethColorCOLUMN_COUNT1(const in float yDist)\n{\n    float compareY = LINE_COUNT;\n    \n    if(yDist > --compareY)\n        return DARK_SKIN;\n\telse if(yDist > --compareY)\n\t\treturn ORANGE;\n\telse if(yDist > --compareY)\n\t\treturn BLUE;\n\telse\n\t\treturn WHITE;\n}\n\nfloat PrintValue(const in vec2 vStringCharCoords, const in float fValue);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 mUV = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    vec3 mColor = vec3(1.0);\n    \n    if(mUV.x < 0.0 || mUV.x > 1.0)\n    {\n        mColor = EDGE_COLOR;\n    }\n    if(mod(fragCoord.y + (EDGE_SIZE/2.0) * ratio, iResolution.y / LINE_COUNT) < EDGE_SIZE * ratio\n       || mod(fragCoord.x + (EDGE_SIZE/2.0) * ratio, iResolution.x / COLUMN_COUNT) < EDGE_SIZE * ratio)\n    {\n        //Edges\n\t\tmColor = EDGE_COLOR;\n\t}\n    else\n    {\n        float xDist = COLUMN_COUNT * mUV.x;\n        float compareX = COLUMN_COUNT;\n        \n        if(xDist > --compareX)\n            mColor = GetMacBethColorCOLUMN_COUNT6(LINE_COUNT * mUV.y);\n\t\telse if(xDist > --compareX)\n            mColor = GetMacBethColorCOLUMN_COUNT5(LINE_COUNT * mUV.y);\n\t\telse if(xDist > --compareX)\n            mColor = GetMacBethColorCOLUMN_COUNT4(LINE_COUNT * mUV.y);\n\t\telse if(xDist > --compareX)\n            mColor = GetMacBethColorCOLUMN_COUNT3(LINE_COUNT * mUV.y);\n\t\telse if(xDist > --compareX)\n            mColor = GetMacBethColorCOLUMN_COUNT2(LINE_COUNT * mUV.y);\n\t\telse \n            mColor = GetMacBethColorCOLUMN_COUNT1(LINE_COUNT * mUV.y);\n    }\n    \n    float contrast = 1.0;\n    float brightness = 0.5;\n    if (iMouse.z > 0.0)\n    {\n        contrast = (iMouse.x/iResolution.x * 2.0);\n        brightness = iMouse.y/iResolution.y;\n        \n    }\n    mColor = (mColor - 0.5) * contrast + brightness;\n    float contrastText = PrintValue((mUV - vec2(0.35,0.94)) * FONT_SCALE, contrast);\n    float BrightnessText = PrintValue((mUV - vec2(0.5,0.94)) * FONT_SCALE, brightness * 2.0);\n    mColor = mix(mColor, vec3(2.0) - exp(brightness*brightness), contrastText + BrightnessText);\n\n    fragColor = vec4(mColor, 1.0);\n}\n\n\n//---------------------------------------------------------------\n// number rendering code below by P_Malin\n//\n// https://www.shadertoy.com/view/4sf3RN\n//---------------------------------------------------------------\nfloat InRect(const in vec2 vUV, const in vec4 vRect)\n{\n\tvec2 vTestMin = step(vRect.xy, vUV.xy);\n\tvec2 vTestMax = step(vUV.xy, vRect.zw);\t\n\tvec2 vTest = vTestMin * vTestMax;\n\treturn vTest.x * vTest.y;\n}\n\nfloat SampleDigit(const in float fDigit, const in vec2 vUV)\n{\n\tconst float x0 = 0.0 / FONT_RATIO.x;\n\tconst float x1 = 1.0 / FONT_RATIO.x;\n\tconst float x2 = 2.0 / FONT_RATIO.x;\n\tconst float x3 = 3.0 / FONT_RATIO.x;\n\tconst float x4 = 4.0 / FONT_RATIO.x;\n\t\n\tconst float y0 = 0.0 / FONT_RATIO.y;\n\tconst float y1 = 1.0 / FONT_RATIO.y;\n\tconst float y2 = 2.0 / FONT_RATIO.y;\n\tconst float y3 = 3.0 / FONT_RATIO.y;\n\tconst float y4 = 4.0 / FONT_RATIO.y;\n\tconst float y5 = 5.0 / FONT_RATIO.y;\n\n\t// In this version each digit is made of up to 3 rectangles which we XOR together to get the result\n\t\n\tvec4 vRect0 = vec4(0.0);\n\tvec4 vRect1 = vec4(0.0);\n\tvec4 vRect2 = vec4(0.0);\n\t\t\n\tif(fDigit < 0.5) // 0\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); vRect1 = vec4(x1, y1, x2, y4);\n\t}\n\telse if(fDigit < 1.5) // 1\n\t{\n\t\tvRect0 = vec4(x1, y0, x2, y5); vRect1 = vec4(x0, y0, x0, y0);\n\t}\n\telse if(fDigit < 2.5) // 2\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); vRect1 = vec4(x0, y3, x2, y4); vRect2 = vec4(x1, y1, x3, y2);\n\t}\n\telse if(fDigit < 3.5) // 3\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); vRect1 = vec4(x0, y3, x2, y4); vRect2 = vec4(x0, y1, x2, y2);\n\t}\n\telse if(fDigit < 4.5) // 4\n\t{\n\t\tvRect0 = vec4(x0, y1, x2, y5); vRect1 = vec4(x1, y2, x2, y5); vRect2 = vec4(x2, y0, x3, y3);\n\t}\n\telse if(fDigit < 5.5) // 5\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); vRect1 = vec4(x1, y3, x3, y4); vRect2 = vec4(x0, y1, x2, y2);\n\t}\n\telse if(fDigit < 6.5) // 6\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); vRect1 = vec4(x1, y3, x3, y4); vRect2 = vec4(x1, y1, x2, y2);\n\t}\n\telse if(fDigit < 7.5) // 7\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); vRect1 = vec4(x0, y0, x2, y4);\n\t}\n\telse if(fDigit < 8.5) // 8\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); vRect1 = vec4(x1, y1, x2, y2); vRect2 = vec4(x1, y3, x2, y4);\n\t}\n\telse if(fDigit < 9.5) // 9\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); vRect1 = vec4(x1, y3, x2, y4); vRect2 = vec4(x0, y1, x2, y2);\n\t}\n\telse if(fDigit < 10.5) // '.'\n\t{\n\t\tvRect0 = vec4(x1, y0, x2, y1);\n\t}\n\telse if(fDigit < 11.5) // '-'\n\t{\n\t\tvRect0 = vec4(x0, y2, x3, y3);\n\t}\t\n\t\n\tfloat fResult = InRect(vUV, vRect0) + InRect(vUV, vRect1) + InRect(vUV, vRect2);\n\t\n\treturn mod(fResult, 2.0);\n}\n\nfloat PrintValue(const in vec2 vStringCharCoords, const in float fValue)\n{\n\tfloat fAbsValue = abs(fValue);\n\t\n\tfloat fStringCharIndex = floor(vStringCharCoords.x);\n\t\n\tfloat fLog10Value = log2(fAbsValue) / log2(10.0);\n\tfloat fBiggestDigitIndex = max(floor(fLog10Value), 0.0);\n\t\n\t// This is the character we are going to display for this pixel\n\tfloat fDigitCharacter = kCharBlank;\n\t\n\tfloat fDigitIndex = DIGITS - fStringCharIndex;\n\tif(fDigitIndex > (-DECIMAL - 1.5))\n\t{\n\t\tif(fDigitIndex > fBiggestDigitIndex)\n\t\t{\n\t\t\tif(fValue < 0.0)\n\t\t\t{\n\t\t\t\tif(fDigitIndex < (fBiggestDigitIndex+1.5))\n\t\t\t\t{\n\t\t\t\t\tfDigitCharacter = kCharMinus;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\t\t\n\t\t\tif(fDigitIndex == -1.0)\n\t\t\t{\n\t\t\t\tif(DECIMAL > 0.0)\n\t\t\t\t{\n\t\t\t\t\tfDigitCharacter = kCharDecimalPoint;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(fDigitIndex < 0.0)\n\t\t\t\t{\n\t\t\t\t\t// move along one to account for .\n\t\t\t\t\tfDigitIndex += 1.0;\n\t\t\t\t}\n\n\t\t\t\t// This is inaccurate - I think because I treat each digit independently\n\t\t\t\t// The value 2.0 gets printed as 2.09 :/\n\t\t\t\tfloat fDigitValue = (fAbsValue / (pow(10.0, fDigitIndex)));\n\t\t\t\tfDigitCharacter = mod(floor(fDigitValue+0.0001), 10.0);\n\t\t\t}\n\t\t}\n\t}\n\tvec2 vCharPos = vec2(fract(vStringCharCoords.x), vStringCharCoords.y);\n\n\treturn SampleDigit(fDigitCharacter, vCharPos);\t\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4djXRw","date":"1410315018","viewed":640,"name":"Macbeth ColorChecker","username":"Polytopes","description":"Macbeth ColorChecker used for color calibration especially used in photography. \nWhen clicking, mouse position controls:\n- On X, the contrast\n- On Y the brightness","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["calibration","macbeth","colorchecker"],"hasliked":0,"parentid":"","parentname":""}}