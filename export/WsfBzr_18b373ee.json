{"ver":"0.1","info":{"id":"WsfBzr","date":"1587614007","viewed":119,"name":"cis 561 hw09 Subsurface ","username":"sireesha98","description":"Subsurface Scattering \nComment out SCATTER_RING to switch subsurface scattering to the hexagonal Prism  ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["hw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int RAY_STEPS = 256;\nconst float HALF_PI = 3.14159 * 0.5;\n\n// Adjust these to alter where the subsurface glow shines through and how brightly\nconst float FIVETAP_K = 2.0;\nconst float AO_DIST = 0.085;\n\n// The larger the DISTORTION, the smaller the glow\nconst float DISTORTION = 0.2;\n// The higher GLOW is, the smaller the glow of the subsurface scattering\nconst float GLOW = 4.0;\n// The higher the BSSRDF_SCALE, the brighter the scattered light\nconst float BSSRDF_SCALE = 5.0;\n// Boost the shadowed areas in the subsurface glow with this\nconst float AMBIENT = 0.0;\n// Toggle this to affect how easily the subsurface glow propagates through an object\n#define ATTENUATION 0\n\n\n#define SCATTER_RING \n\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n    \n    vec3 rotateX(in vec3 p, float a) {\n\tfloat c = cos(a); float s = sin(a);\n\treturn vec3(p.x, c * p.y - s * p.z, s * p.y + c * p.z);\n}\n\n    \nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\n\nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\nfloat torus(vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q) - t.y;\n}\n\nfloat cone(vec3 p, vec2 c)\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCone(vec3 p, vec3 a, vec3 b, float ra, float rb)\n{\n    float rba  = rb-ra;\n    float baba = dot(b-a,b-a);\n    float papa = dot(p-a,p-a);\n    float paba = dot(p-a,b-a)/baba;\n\n    float x = sqrt( papa - paba*paba*baba );\n\n    float cax = max(0.0,x-((paba<0.5)?ra:rb));\n    float cay = abs(paba-0.5)-0.5;\n\n    float k = rba*rba + baba;\n    float f = clamp( (rba*(x-ra)+paba*baba)/k, 0.0, 1.0 );\n\n    float cbx = x-ra - f*rba;\n    float cby = paba - f;\n    \n    float s = (cbx < 0.0 && cay < 0.0) ? -1.0 : 1.0;\n    \n    return s*sqrt( min(cax*cax + cay*cay*baba,\n                       cbx*cbx + cby*cby*baba) );\n}\n\n// c is the sin/cos of the desired cone angle\nfloat sdSolidAngle(vec3 pos, vec2 c, float ra)\n{\n    vec2 p = vec2( length(pos.xz), pos.y );\n    float l = length(p) - ra;\n\tfloat m = length(p - c*clamp(dot(p,c),0.0,ra) );\n    return max(l,m*sign(c.y*p.x-c.x*p.y));\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n       length(p.xy - vec2(clamp(p.x, -k.z*h.x, k.z*h.x), h.x))*sign(p.y - h.x),\n       p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nvec3 rotateZ(vec3 p, float a) {\n\tfloat c = cos(a); float s = sin(a);\n\treturn vec3(c * p.x - s * p.y, s * p.x + c * p.y, p.z);\n}\n\n#define SOLIDANGLE_SDF sdSolidAngle(pos-vec3( 0.0,1.20,-2.0), vec2(3,4)/5.0, 1.4 )\n#define TORUS_SDF  sdTorus( rotateZ( (pos-vec3( 0.0,0.25, -2.0)), 90.f), vec2(1.20, .2))\n#define HEXPRISM_SDF sdHexPrism(  rotateY( (pos-vec3(0.0,-0.5, 1.25)), 90.), vec2(1.25,0.5) )\n\nfloat sceneMap3D(vec3 pos, vec3 lightPos)\n{\n    float t = SOLIDANGLE_SDF;\n    t = min(t, sphere(pos, 2.0, lightPos));\n    t = min(t, TORUS_SDF);\n    t = min(t, HEXPRISM_SDF);\n    t = min(t, box(pos + vec3(0.0, 3.0, 0.0), vec3(50.0, 1.0, 50.0)));\n    return t;\n}\n\nfloat shadowMap3D(vec3 pos)\n{\n    float t =  SOLIDANGLE_SDF;\n    t = min(t, TORUS_SDF);\n    t = min(t, HEXPRISM_SDF);\n    t = min(t, box(pos + vec3(0.0, 3.0, 0.0), vec3(50.0, 1.0, 50.0)));\n    return t;\n}\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj, vec3 lightPos)\n{\n    t =  SOLIDANGLE_SDF;\n    float t2;\n    obj = 0; // 0 is center sphere\n    if((t2 = sphere(pos, 2.0, lightPos)) < t) {\n        t = t2;\n        obj = 1;\n    }\n    if((t2 = box(pos + vec3(0.0, 3.0, 0.0), vec3(50.0, 1.0, 50.0))) < t) {\n        t = t2;\n        obj = 3;\n    }\n    if((t2 = TORUS_SDF) < t) {\n        t = t2;\n        obj = 4;\n    }\n        if((t2 = HEXPRISM_SDF) < t) {\n        t = t2;\n        obj = 5;\n    }\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj, vec3 lightPos)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        sceneMap3D(pos, m, hitObj, lightPos);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeNormal(vec3 pos, vec3 lightPos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx, lightPos) - sceneMap3D(pos - epsilon.yxx, lightPos),\n                            sceneMap3D(pos + epsilon.xyx, lightPos) - sceneMap3D(pos - epsilon.xyx, lightPos),\n                            sceneMap3D(pos + epsilon.xxy, lightPos) - sceneMap3D(pos - epsilon.xxy, lightPos)));\n}\n\nfloat fiveTapAO(vec3 p, vec3 n, float k) {\n    float aoSum = 0.0;\n    for(float i = 0.0; i < 5.0; ++i) {\n        float coeff = 1.0 / pow(2.0, i);\n        aoSum += coeff * (i * AO_DIST - shadowMap3D(p + n * i * AO_DIST));\n    }\n    return 1.0 - k * aoSum;\n}\n\nfloat softShadow(vec3 dir, vec3 origin, float min_t, float k) {\n    float res = 1.0;\n    float t = min_t;\n    for(int i = 0; i < RAY_STEPS; ++i) {\n        float m = shadowMap3D(origin + t * dir);\n        if(m < 0.0001) {\n            return 0.0;\n        }\n        res = min(res, k * m / t);\n        t += m;\n    }\n    return res;\n}\n\nfloat shadow(vec3 dir, vec3 origin, float min_t) {\n    return softShadow(dir, origin, min_t, 6.0);\n}\n\nfloat subsurface(vec3 lightDir, vec3 normal, vec3 viewVec, float thickness) {\n    vec3 scatteredLightDir = lightDir + normal * DISTORTION;\n    float lightReachingEye = pow(clamp(dot(viewVec, -scatteredLightDir), 0.0, 1.0), GLOW) * BSSRDF_SCALE;\n    float attenuation = 1.0;\n    #if ATTENUATION\n    attenuation = max(0.0, dot(normal, lightDir) + dot(viewVec, -lightDir));\n    #endif\n\tfloat totalLight = attenuation * (lightReachingEye + AMBIENT) * thickness;\n    return totalLight;\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 light, vec3 view, float thick) {\n    \n    #ifdef SCATTER_RING \n    float t;\n    switch(hitObj) {\n        case 0:\n        // Diamond\n        vec3 color = vec3(0.80, 0.88, 0.97) * vec3(0.80, 0.80, 0.97) * max(0.0, dot(n, light)) * shadow(light, p, 0.1);\n        return color + vec3(0.80, 0.88, 0.97) * subsurface(light, n, view, thick) * vec3(1.0, 0.88, 0.7);\n        break;\n        case 1:\n        // Back sphere\n        return vec3(0.91, 0.96, 0.97);\n        break;\n        case 3:\n        // Floor\n        t = floor(mod(0.5 * (sin(p.x) + sin(p.z)), 3.0));\n        vec3 checker = mix(vec3(1.5), vec3(0.5), t);\n        return vec3(1.0, 0.88, 0.7) * checker * max(0.0, dot(n, light)) * shadow(light, p, 0.1);\n        break;\n        //Torus or Ring \n        case 4:\n        color = vec3(0.80, 0.88, 0.97) * vec3(0.80, 0.80, 0.97) * max(0.0, dot(n, light)) * shadow(light, p, 0.1);\n        return color + vec3(0.60, 0.68, 0.97) * subsurface(light, n, view, thick) * vec3(1.0, 0.88, 0.7);\n        break;\n        case 5:\n        // Hex Prism \n        return vec3(0.7, 0.27, 0.2) * max(0.0, dot(n, light)) * shadow(light, p, 0.1);;\n        case -1:\n        // Background\n        return vec3(0.0);\n        break;\n    }\n    return vec3(1.0); \n    #else \n        float t;\n    switch(hitObj) {\n        case 0:\n        // Diamond\n        return vec3(0.80, 0.88, 0.97) * max(0.0, dot(n, light)) * shadow(light, p, 0.1);\n        break;\n        case 1:\n        // Back sphere\n        return vec3(0.91, 0.96, 0.97);\n        break;\n        case 3:\n        // Floor\n        t = floor(mod(0.5 * (sin(p.x) + sin(p.z)), 3.0));\n        vec3 checker = mix(vec3(1.5), vec3(0.5), t);\n        return vec3(1.0, 0.88, 0.7) * checker * max(0.0, dot(n, light)) * shadow(light, p, 0.1);\n        break;\n        //Torus or Ring \n        case 4:\n        return vec3(0.80, 0.88, 0.97) * max(0.0, dot(n, light)) * shadow(light, p, 0.1);\n        case 5:\n        // HexPrism\n        vec3 color = vec3(0.6, 0.27, 0.2) * vec3(0.5, 0.27, 0.2) * max(0.0, dot(n, light)) * shadow(light, p, 0.1);\n        return color + vec3(0.6, 0.27, 0.2) * subsurface(light, n, view, thick) * vec3(1.0, 0.88, 0.7);\n        break;\n        case -1:\n        // Background\n        return vec3(0.0);\n        break;\n    }\n    #endif\n    \n}\n\nIntersection sdf3D(vec3 dir, vec3 eye, vec3 lightPos)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj, lightPos);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect, lightPos);\n    vec3 lightDir = normalize(lightPos - isect);\n    float thickness = fiveTapAO(isect, -nor, FIVETAP_K);\n    \n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect), thickness);\n    \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\n\nvoid raycast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref) {\n    eye = rotateY(vec3(0.0, 1.0, 10.0), 3.14159 * 1.5);\n    ref = vec3(0.0, 0.0, 0.0);\n    \n    float len = tan(3.14159 * 0.125) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec3 lightPos = rotateZ(vec3(6.0, 5.0, -1.0), sin(iTime) * 0.7);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // [-1, 1]\n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n    \n    Intersection aaIsects[4];\n    vec3 dir, eye, ref;\n    int idx = 0;\n    for(float i = 0.0; i < 1.0; i += 0.5) {\n        for(float j = 0.0; j < 1.0; j += 0.5) {\n            raycast(uv2 + vec2(i, j) / iResolution.xy, dir, eye, ref);\n            aaIsects[idx++] = sdf3D(dir, eye, lightPos);\n        }\n    }\n    vec3 avgColor = vec3(0.0);\n    for(int i = 0; i < 4; ++i) {\n        avgColor += aaIsects[i].color;\n    }\n    avgColor *= 0.25;\n    fragColor = vec4(avgColor * step(0.0, aaIsects[0].t), 1.0);\n    float fogT = smoothstep(30.0, 50.0, distance(aaIsects[0].p, eye));\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.0), fogT);\n}","name":"Image","description":"","type":"image"}]}