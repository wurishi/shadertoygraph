{"ver":"0.1","info":{"id":"NdtXR8","date":"1632615438","viewed":281,"name":"Rainbow screensaver animation","username":"takumif","description":" ","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["colorful","animation","background","rainbow","screensaver"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cosine based palette, 4 vec3 params\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float time = iTime*0.2;\n    \n    // Calculate two points on screen.\n    \n    vec2 c1 = vec2(sin(time)*0.5, cos(iTime)*0.7);\n    vec2 c2 = vec2(sin(time*0.7)*0.9, cos(iTime*0.65)*0.6);\n    \n    //Determine length to point 1 & calculate color.\n    float d1 = length( uv - c1);\n    vec3 col1 = palette( d1+time,vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67));\n\t\n    //Determine length to point 2 & calculate color.\n    float d2 = length( uv - c2);\n    vec3 col2 = palette( d2+time,vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67));\n\n    \n    // Output to screen\n    fragColor = vec4( (col1+col2) / 2.0 ,1.0);\n}","name":"Image","description":"","type":"image"}]}