{"ver":"0.1","info":{"id":"4XS3WR","date":"1708335591","viewed":18,"name":"student","username":"ZeroDR","description":"学习","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["student"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 drawCircle(vec2 pos,float radius)\n{\n    vec3 col = vec3(0.0,0.0,0.0);\n    float dis = length(pos);   //计算pos点距离圆形的距离，所以可以直接length计算;\n    float c = smoothstep(radius,radius+.01,dis);\n    return vec3(c); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //// Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.xy;\n    ////float color = step(0.5,uv.x);\n    //// Output to screen\n    ////fragColor = vec4(vec3(step(0.5,fract(uv.x*4.0))), 1.0);\n    \n    //uv -= 0.5;\n    //uv.x *= iResolution.x/iResolution.y;\n    \n    // fragColor = vec4(drawCircle(uv,0.3),1.0);\n    \n    vec2 xy = fragCoord/iResolution.xy;\n    vec4 c = texture(iChannel0,xy);\n    float cc = c.r + c.g + c.b;\n    float cm = cc / 3.0;\n    \n    c.r = abs(cos(iTime))*cm + abs(sin(iTime))*c.r;\n    c.g = abs(cos(iTime))*cm + abs(sin(iTime))*c.g;\n    c.b = abs(cos(iTime))*cm + abs(sin(iTime))*c.b;\n    \n    \n    //c.r += abs(sin(iTime));\n    //c.b += abs(cos(iTime));\n    //c.a += abs(sin(iTime));\n    \n    fragColor = c;\n    \n    /* \n    // 圆形\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;  //矫正纹理坐标，使得x与y轴单位长度一致\n    float l = length(fract(uv*5.0)-vec2(0.5));\n    float radius = 0.5*(sin(iTime) * 0.5 + 0.5);\n    vec3 c = vec3(step(radius,l));\n    fragColor = vec4(c,1.0);\n    */\n    \n    /*\n    // 环形\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;  //矫正纹理坐标，使得x与y轴单位长度一致\n    float l = fract((length(uv) - iTime*0.5)*5.0);\n    float radius = 0.5;//0.5*(sin(iTime) * 0.5 + 0.5);\n    vec3 c = vec3(step(radius,l));\n    fragColor = vec4(c,1.0);\n    */\n    \n    /*\n    // 大小圆\n    uv -= 0.5;\n    float s = iResolution.x / iResolution.y;\n    uv.x *= s;\n    float l = length(fract(uv*10.0) - vec2(0.5));\n    \n    float radius = 0.5*(sin(iTime + uv.x + uv.y) * 0.5 + 0.5);\n    \n    vec3 color = vec3(step(radius,l));\n    \n    fragColor = vec4(color, 1.0);\n    */\n    \n    /*\n    // mix\n    vec3 color1 = vec3(1.0,1.0,0.0);\n    vec3 color2 = vec3(0.0,1.0,1.0);\n    \n    //float mixer = fract(uv.x*5.0);\n    \n    //uv -= 0.5;\n    //float s = iResolution.x / iResolution.y;\n    //uv.x *= s;\n    \n    //float mixer = length(uv);\n    \n    // 对角线渐变\n    float mixer1 = (uv.x+uv.y);\n    float mixer2 = 2.0 - (uv.x+uv.y);\n    //float mixer = mixer1*mixer2;\n    float mixer = min(mixer1,mixer2);\n    \n    vec3 color = mix(color1,color2,mixer);\n    fragColor = vec4(color,1.0);\n    */\n    \n    \n    /*\n    // 棋盘\n    //uv -= 0.5;\n    float s = iResolution.x / iResolution.y;\n    uv.x *= s;\n    vec3 color1 = vec3(1.0,1.0,0.0);\n    vec3 color2 = vec3(0.0,1.0,1.0);\n    \n    vec3 mask1 = vec3(step(0.5,fract(uv.x*3.0)));\n    vec3 mask2 = vec3(step(0.5,fract(uv.y*3.0)));\n    vec3 mixer = abs(mask1 - mask2);\n    vec3 color = mix(color1,color2,mixer);\n    fragColor = vec4(color,1.0);\n    */\n}","name":"Image","description":"","type":"image"}]}