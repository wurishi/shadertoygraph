{"ver":"0.1","info":{"id":"XsKBRw","date":"1528059862","viewed":417,"name":"Everything will be fine","username":"Gaktan","description":"Got this thing by accident while trying to combine two shaders that totally cannot work together. Result is much better than excpeted.\n\nI'll just leave this here","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","kaleidoscope","trippy","mirror","rotation","symmetry","void"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fun to experiment with exposed parameters\n// Better to watch while listening to music\n\n#define KALEIDOSCOPE_SPEED_X    9.0*0.01\n#define KALEIDOSCOPE_SPEED_Y  -20.0*0.001\n#define KALEIDOSCOPE_SPLITS     25.0\n\n#define PI 3.14159265359\n\nvec2 kaleidoscope(vec2 uv, vec2 offset, float splits)\n{\n    // XY coord to angle\n    float angle = atan(uv.y, uv.x);\n    // Normalize angle (0 - 1)\n    angle = ((angle / PI) + 1.0) * 0.5;\n    // Rotate by 90°\n    angle = angle + 0.25 * iTime * 0.05;\n    // Split angle \n    angle = mod(angle, 1.0 / splits) * splits;\n    \n    // Warp angle\n    angle = -abs(2.0*angle - 1.0) + 1.0;\n    \n    angle = angle*0.1;\n    \n    // y is just dist from center\n    float y = length(uv);\n    \n    angle = angle * (y*3.0);\n    \n    return vec2(angle, y) + offset;\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n  // Íñigo Quílez\n  // https://www.shadertoy.com/view/MsS3Wc\n  vec3 rgb = clamp(abs(mod(c.x*6.+vec3(0.,4.,2.),6.)-3.)-1.,0.,1.);\n  rgb = rgb * rgb * (3. - 2. * rgb);\n  return c.z * mix(vec3(1.), rgb, c.y);\n}\n\n#define RAYS 20.0\n#define ROTATION_SPEED \t\t\t0.05\n#define SPINNING_SPEED \t\t\t0.1\n#define COLOR_SHIFTING_SPEED \t0.5\n\n// Here's where the accident comes into place\n// Abomination that makes no sense if we already have polar coordinates\n// But hey, it gives pretty results\nvec3 radialThing(vec2 uv)\n{\n    vec2 center = vec2(0.0, 0.5) * sin(iTime*0.1);\n    \n    float c = distance(uv, center);\n    \n    vec3 res = vec3(0.0, 0.0, 0.0);\n\n    vec2 pos = (uv - center);\n\n    // Cartesian to polar coordinates\n    float t = atan(pos.y, pos.x);\n    float t2 = (t + PI) / (PI*2.0);\n\n    // Spin with distance\n    t2 += c * sin(iTime * SPINNING_SPEED) * 0.5;\n\n    // Rotation\n    t2 = mod(t2 + (iTime * ROTATION_SPEED), 1.0);\n\n    // Rays\n    float angle = mod(t2, 1.0 / RAYS);\n    angle = ceil(angle * 2.0 * RAYS);\n\n    float colorShiftingSpeed = iTime * COLOR_SHIFTING_SPEED;\n\n    // Yuck\n    vec3 color1 = hsv2rgb(vec3((cos(colorShiftingSpeed + c * 0.2 + (t2*PI*2.0)) + 1.0), 0.8, 1.0));\n    vec3 color2 = hsv2rgb(vec3((cos((colorShiftingSpeed + 1.32) + c * 0.2 + (t2*PI*2.0)) + 1.0), 0.8, 1.0));\n    vec3 color = mix(color2, color1, angle);\n\n    res = color;\n\n#if 1\n    res.rgb = res.rgb * (1.0 - c);\n    res.rgb = res.rgb * smoothstep(-1.5, 1.0, c*10.0);\n#endif\n    \n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Mobile friendly UVs\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float time = iTime;\n    \n    // Start with a good color\n    time += 1207.0;\n    \n    vec2 A = vec2(time * KALEIDOSCOPE_SPEED_X * 0.005, \n                  time * KALEIDOSCOPE_SPEED_Y * 0.005);\n    \n\tuv = kaleidoscope(uv, A, KALEIDOSCOPE_SPLITS);\n\n\tfragColor.rgb = radialThing(uv);\n}","name":"Image","description":"","type":"image"}]}