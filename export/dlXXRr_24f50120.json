{"ver":"0.1","info":{"id":"dlXXRr","date":"1674195513","viewed":175,"name":"color triangle","username":"Carandiru","description":"an inquiry into color","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["light","color","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define SCALE (pow(GOLDEN_RATIO_ZERO, pi + pow(GOLDEN_RATIO, GOLDEN_RATIO_ZERO)))\n\n//                                       range[0.5 --- 1.0]\nfloat grid2( in vec2 uv, in float scale, in float thick ) // perfect, derived from https://www.shadertoy.com/view/ft2Bzw\n{\n    vec2 tile = floor(uv/scale);\n    vec2 tile_coord = fract(uv/scale) * 2.0 - 1.0;\n    \n    float max_norm = max(abs(tile_coord.x), abs(tile_coord.y)) * thick;\n    float square = smoothstep(0.5 - 2.0 * fwidth(max_norm), 0.5, max_norm);\n    \n    return(square);\n}\nfloat line(float width, float offset, float magnitude, float pixelwidth) {\n    float mid = 0.5f + offset;\n    return (smoothstep(mid - width, mid - width + pixelwidth, magnitude) - \n            smoothstep(mid + width, mid + width + pixelwidth, magnitude));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = SCALE;\n    vec2 uv = ((fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y);\n\n    vec3 color = vec3(0);\n        \n    float bn = textureLod(iChannel0, fragCoord.xy/1024.0f, 0.0f).r;\n    \n    vec3 select = vec3(cos(iTime), sin(iTime), 0.0f);\n    select.z = abs(select.x - select.y) + bn * (7.0f/255.0f);\n    \n\n    float light_distance = 2.0f * sin(iTime);\n    \n    vec3 light[3] = vec3[3]( vec3(-light_distance, -light_distance, packColor(abs(select.xyz))),\n                             vec3( 0.0f,            light_distance, packColor(abs(select.zxy))),\n                             vec3( light_distance, -light_distance, packColor(abs(select.yzx))));\n    \n    uv *= 2.0f;\n    \n    float d = 0.0f;\n    \n    for (int i = 0 ; i < light.length() ; ++i) {\n        d = distance(uv, light[i].xy);\n        color += unpackColor(light[i].z) / (d*d + 1.0f);\n    }\n    vec3 current = color; \n    \n    float g = grid2(uv, scale, grid_width) * 0.25f;\n    color *= (1.0f - g);\n    \n    float intensity = 0.5f;\n    float pixelwidth = 1.0f / (iResolution.x);\n    float l = 0.0f;\n    \n    l = line(line_width, 0.5f + uv.y, current.r, pixelwidth) * intensity;\n    color += vec3(l,0,0) * l;\n    l = line(line_width, 0.5f + uv.y, current.g, pixelwidth) * intensity;\n    color += vec3(0,l,0) * l;\n    l = line(line_width, 0.5f + uv.y, current.b, pixelwidth) * intensity;\n    color += vec3(0,0,l) * l;\n    \n    fragColor = vec4(pow(color, vec3(2.0f)),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define pi (3.141592653589793)\n#define GOLDEN_RATIO (1.61803398874989484820)\n#define GOLDEN_RATIO_ZERO (0.61803398874989484820)\n\n#define line_width (0.0125)\n#define grid_width (0.525)\n\nconst int  FFT_BASS = 2; //46 Hz / 23 Hz\n\nconst int  FFT_MID = 15; //345 Hz / 23 Hz\n\nconst int  FFT_TRE = 500; //11500 Hz / 23 Hz\n\n// these functions are available in GLSL 4.0+\nvec4 _unpackUnorm4x8(in uint a)\n{\n    vec4 c = vec4(0);\n    c.a = float((a >> 24u)&0xffu) / 255.0;\n    c.b = float((a >> 16u)&0xffu) / 255.0;\n    c.g = float((a >> 8u)&0xffu) / 255.0;\n    c.r = float((a >> 0u)&0xffu) / 255.0;\n    \n    return(c);\n}\nuint _packUnorm4x8(in vec4 a)\n{\n    uint c = 0u;\n    c |= ((uint(a.a * 255.0)&0xffu) << 24u);\n    c |= ((uint(a.b * 255.0)&0xffu) << 16u);\n    c |= ((uint(a.g * 255.0)&0xffu) << 8u);\n    c |= ((uint(a.r * 255.0)&0xffu) << 0u);\n    \n    return(c);\n}\n\n// color packing\nvec3 unpackColor(in float fetched) {\n\n\treturn( _unpackUnorm4x8(uint(fetched)).rgb );\n}\nfloat packColor(in vec3 pushed) {\n\t\n\treturn(float(_packUnorm4x8(vec4(pushed,0.0f))));\n}","name":"Common","description":"","type":"common"}]}