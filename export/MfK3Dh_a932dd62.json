{"ver":"0.1","info":{"id":"MfK3Dh","date":"1712711216","viewed":66,"name":"ghastly","username":"MadMath123","description":"mandelbrot tutorail kinda","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n/*\nMandelbrot Set\n\nFor each point (x,y) on screen, it becomes the imaginary number x+iy.\nThe imaginary number z is set to 0, then iteratively set to z^2+c.\nIf z end up being infinite, I shade the pixel white. (Of course, you can't\niterate infinitely many times, so you instead iterate a high number of times, \nthen see if it's more than a certain number.)\n\n\n*/\nvec2 squareVec(vec2 z, vec2 c){\n    //z = z.x + i * z.y\n    //return z^2 + c\n    // = return (z.x + i * z.y)^2 + c\n    // = return z.x^2 - z.y^2 + 2 * i * z.x * z.y + c\n    // = return vec2(z.x^2 - z.y^2 + c.x, 2 * z.x * z.y + c.y)\n    return vec2(z.x*z.x - z.y*z.y + c.x, 2. * z.x * z.y + c.y);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y * 4.;\n    vec2 og = vec2(sin(iTime/2.),cos(iTime/2.))*(texture(iChannel0,vec2(0.,0.)).x+texture(iChannel0,vec2(0.05,0.)).x)/2.;\n    int i = 0;\n    for(int k = 0; i < 256; i ++){\n        og = squareVec(og,uv);\n        if(length(og)>2.){break;}\n    }\n    // Output to screen\n    fragColor = vec4(vec3(1.-pow(33./32.,-float(i))),1.0);\n}","name":"Image","description":"","type":"image"}]}