{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"video","id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"\n// From\n// https://github.com/timsawtell/Greenscreen/blob/master/GreenScreen/Shaders/greenScreen.fsh\nvec4 removeGreenScreen(vec4 inColor)\n{\n   // Calculate the average intensity of the texel's red and blue components\n   lowp float rbAverage = inColor.r * 0.7 + inColor.b * 0.7;\n   \n   // Calculate the difference between the green element intensity and the\n   // average of red and blue intensities\n   lowp float gDelta = inColor.g - rbAverage;\n   \n   // If the green intensity is greater than the average of red and blue\n   // intensities, calculate a transparency value in the range 0.0 to 1.0\n   // based on how much more intense the green element is\n   inColor.a = 1.0 - smoothstep(0.00, 0.90, gDelta);\n   \n   // Use the cube of the of the transparency value. That way, a fragment that\n   // is partially translucent becomes even more translucent. This sharpens\n   // the final result by avoiding almost but not quite opaque fragments that\n   // tend to form halos at color boundaries.\n   inColor.a = inColor.a * inColor.a * inColor.a;\n      \n   return inColor;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float s=0.,v=0.;\n    for (int r=0; r<150; r++) {\n        vec3 p=vec3(vec2(.1,.2)+s*fragCoord.xy*0.001,fract(s+floor(iTime*25.)*.01));\n\t\t\n        for (int i=0; i<10; i++) p=abs(p)/dot(p,p)-.5;\n        v+=length(p*p)*(2.-s)*.001;\n        s+=.01;\n    }\n\t\n\tvec4 videoPixel = texture(iChannel0, fragCoord.xy / iResolution.xy);\n\tvec4 videoPixelFiltered = removeGreenScreen(videoPixel);\n\t\n   \tfragColor = vec4(v) * vec4(0.5,0.8,0.4,1.) * (1. - videoPixelFiltered.a) + videoPixel * videoPixelFiltered.a;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldl3DH","date":"1369460037","viewed":590,"name":"Britney in space","username":"BobJelly","description":"Inspired by Smaller Cosmos from Kali :)","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["fractal","volumetric","britney"],"hasliked":0,"parentid":"","parentname":""}}