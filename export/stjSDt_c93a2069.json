{"ver":"0.1","info":{"id":"stjSDt","date":"1628908079","viewed":320,"name":"Fire using noise","username":"Peace","description":"Simple fire shader","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["fire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 n) {\n    return fract(sin(cos(dot(n, vec2(12.9898,12.1414)))) * 83758.5453);\n}\n\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat fbm(vec2 n, int octaves) {\n    float t, amp = 1.0, norm = 0.0;\n    for (int i = 0; i < octaves; i++) {\n        t += noise(n) * amp;\n        norm += amp;\n        amp *= 0.5;\n        n *= 2.0;\n    }\n    return t / norm;\n}\n\nvec3 getColor(float v)\n{\n    v = clamp(v, 0.0, 1.0);\n    vec3 c = vec3(0);\n    c.r = smoothstep(0.0, 0.4, v);\n    c.g = smoothstep(0.0, 1.0, v);\n    c.b = smoothstep(0.65, 0.9, v) * .8;\n    return pow(c, vec3(0.6));\n}\n\n#define SPEED 1.\n#define BANDS 256.\n#define SPEED 1.\n#define NOISE_DETAIL 16\n#define STRETCH 1.\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 nuv = uv * vec2(1.0,iResolution.y / iResolution.x) * 24.0;\n    uv.y /= STRETCH;\n    float b = fbm(nuv + vec2(uv.y * sin(iTime * 1.0 * SPEED) * 1.25, -iTime * 3.0 * SPEED), NOISE_DETAIL);\n    b += max(1.0 - uv.y * 2.5, -1.0);\n    b /= 1.6;\n    vec3 col = vec3(getColor(b));\n    col = vec3(ivec3(col * BANDS)) / (BANDS - 1.0);\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}