{"ver":"0.1","info":{"id":"llyfWm","date":"1542764354","viewed":168,"name":"Cellular Noise T2GPU","username":"vespina","description":"Basado en 2's celular noise de book of shaders. Cambian lso colores de las celulas y se mueven, ademas de toda la grilla se mueve de lado a lado.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["celularnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rando( vec2 p ) {\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)),\n                   dot(p,vec2(269.5,183.3)),\n                   dot(p,vec2(419.2,371.9)) );\n    return fract(sin(q)*43758.5453);\n}\nvec3 random3(vec2 c) {\n    float j = 4096.0*sin(dot(vec3(c,(c.x*c.y)),vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\nfloat celularnoise( in vec2 x) {\n    //Numero y su fracion\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    \n    float k = 50.;// on este valor funciona bien\n\tvec3 o=vec3(0.);\n    float va = 0.0;\n    float wt = 0.0;\n    for (int j=-1; j<=1; j++) {\n        for (int i=-1; i<=1; i++) {\n            //Celula vecinas\n            vec2 g = vec2(float(i),float(j));\n            //Random(ruido)\n\t\t\tvec3 o = random3(p + g);\n            //Animate Cells(cambia forma y color durante el tiempo)\n            o = 0.5+0.5*sin(iTime+10.*o);\n            //celula vecina menos el la fraccion del vector visto, mas un numero \"random\"(f(n)=sin)\n            vec2 r = g - f + o.xy;\n            //distancia entre celulas\n            float d = dot(r,r);\n            //tamaÃ±o desde el centro, busque y con smothstep funcionaba\n            float ww = pow( 1.0-smoothstep(0.0,sqrt(2.),sqrt(d)), k );\n            //ww por el numero \"random\"(f(n)=sin)\n            //fraccion para la suma del centro de cada celula ponderada por el random o.z iterada\n            va += o.z*ww;\n            wt += ww;\n        }\n    }\n\n    return va/wt;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    vec3 color = vec3(0.0);\n\t//Scale\n    float s=5.;\n    //Translate point;\n    st.x+=sin(iTime*0.3)*3.;\n    //estos eran de prueba\n    //st.y+=(1.+cos(iTime))/s;\n    //st.x+=iTime/s;\n    //Scale st.\n    st *= s;\n    //aplica celularnoise\n    float n = celularnoise(st);\n\t//printea\n    fragColor = vec4(vec3(n),1.0);\n}\n","name":"Image","description":"","type":"image"}]}