{"ver":"0.1","info":{"id":"lfsXzs","date":"1705616743","viewed":115,"name":"Base Webcam","username":"davidmachadosf","description":"glitchy cam","likes":1,"published":1,"flags":2,"usePreview":0,"tags":["glitch","webcam","cam","mirror","netgrind"],"hasliked":0,"parentid":"XtSGRG","parentname":"ngMir5"},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define PI 3.1415\n\nfloat uniform_to_widthNanometers (float u){\n    return 380. + 400.*(1.-u);\n}\n\n\n\nfloat uniform_to_freqTeraHertz (float u){\n    return (384. + 405.*u)*1.e3;\n}\n\nvec4 paletteReal( float w ) {\n    \n    float red, green, blue;\n\n    if (w >= 380. && w < 440.) {\n        red   = -(w - 440.) / (440. - 380.);\n        green = 0.;\n        blue  = 1.;\n    }\n    else \n    if (w >= 440. && w < 490.) {\n        red   = 0.;\n        green = (w - 440.) / (490. - 440.);\n        blue  = 1.;\n    }\n    else \n    if (w >= 490. && w < 510.) {\n        red   = 0.;\n        green = 1.;\n        blue  = -(w - 510.) / (510. - 490.);\n    }\n    else \n    if (w >= 510. && w < 580.) {\n        red   = (w - 510.) / (580. - 510.);\n        green = 1.;\n        blue  = 0.;\n    }\n    else \n    if (w >= 580. && w < 645.) {\n        red   = 1.;\n        green = -(w - 645.) / (645. - 580.);\n        blue  = 0.;\n    }\n    else \n    if (w >= 645. && w < 781.) {\n        red   = 1.;\n        green = 0.;\n        blue  = 0.;\n    }\n    else {\n        red   = 0.;\n        green = 0.;\n        blue  = 0.;\n    }\n\n\n    // Let the intensity fall off near the vision limits\n    float factor;\n    if (w >= 380. && w < 420.)\n        factor = .3 + .7*(w - 380.) / (420. - 380.);\n    else \n    if (w >= 420. && w < 701.)\n        factor = 1.;\n    else \n    if (w >= 701. && w < 781.)\n        factor = .3 + .7*(780. - w) / (780. - 700.);\n    else\n        factor = 0.;\n\n    float gamma = .8;\n    float R = (red   > 0. ? 255.*pow(red   * factor, gamma) : 0.);\n    float G = (green > 0. ? 255.*pow(green * factor, gamma) : 0.);\n    float B = (blue  > 0. ? 255.*pow(blue  * factor, gamma) : 0.); \n    \n    return vec4(R/255.,G/255.,B/255.,1.);\n}\n\nvec4 paletteRealUniform( float u ) {\n    return paletteReal(uniform_to_widthNanometers(u));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    float i = iTime;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n    vec4 c = texture(iChannel0,uv);\n    //float d = length(fragCoord.xy-iResolution.xy*.5)*iMouse.y*.0001;\n    //c.rgb = sin(cos(mod(c.rgb,n.rgb)*PI*2.0+d)*PI*2.0+i+2.0*d);\n    \n    //fragColor = c*abs(sin(iTime/.5));\n    //fragColor = vec4(.2*c.r +  .7*c.g + .1*c.b);\n    \n    float u = .2*c.r +  .7*c.g + .1*c.b;\n    fragColor = paletteRealUniform(1.-u); \n}","name":"Image","description":"","type":"image"}]}