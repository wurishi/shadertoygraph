{"ver":"0.1","info":{"id":"dttGWl","date":"1683357169","viewed":44,"name":"Bijective Distortion","username":"fungi","description":"using simplex noise to distort the image space.\nevery point has a unique mapping.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["simplex"],"hasliked":0,"parentid":"ml3GWs","parentname":"Distorted Glass"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise1( in vec2 p )\n{\n    // noise by IQ\n    // https://www.shadertoy.com/view/4s23zz\n    \n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nfloat noise2(in vec2 p)\n{\n    return\n        0.500*noise1(p*1.0)\n       +0.250*noise1(p*2.0)\n       +0.125*noise1(p*4.0)\n    ;\n}\n\nvec2 noise3(in vec2 p)\n{\n    return vec2(noise2(p), noise2(p + 20.0));\n}\n\nvec2 t1(in vec2 p)\n{\n    return p + 1.2 * noise3(0.05 * p);\n}\n\nvec2 transform(in vec2 p)\n{\n    return t1(t1(t1(t1(t1(p - 3.0 * iTime) + iTime * 4.0) - 1.0 * iTime)));\n}\n\nvec2 deriv(in vec2 p)\n{\n    float delta = 0.001;\n    float inv_delta = 1000.0;\n    vec2 t0 = transform(p);\n    vec2 t1 = transform(p + vec2(delta, 0.0));\n    vec2 t2 = transform(p + vec2(0.0, delta));\n    return vec2(length(t1 - t0) * inv_delta, length(t2 - t0) * inv_delta);\n}\n\nbool flipped(in vec2 p)\n{\n    float delta = 0.01;\n    vec3 t0 = vec3(transform(p), 0.0);\n    vec3 t1 = vec3(transform(p + vec2(delta, 0.0)), 0.0);\n    vec3 t2 = vec3(transform(p + vec2(0.0, delta)), 0.0);\n    return cross(t1 - t0, t2 - t0).z < 0.0;\n}\n\n\n\nvoid Image(out vec4 fragColor, in vec2 uv)\n{\n    vec2 p = uv * 10.0;\n    float g = 0.14;\n    vec3 col;\n    vec2 f = (0.5 - abs(0.5 - fract(transform(p)))) / deriv(p);\n    if (dot(f,f) < g*g) {\n        col = vec3(0.3, 0.3, 0.3);\n    } else if (flipped(p)) {\n        col = vec3(1.0, 0.0, 1.0);\n    } else {\n        col = vec3(1.0, 1.0, 1.0);\n    }\n    fragColor = vec4(col,1.0);\n}\n\n\n\n// AA copied from here:\n// https://www.shadertoy.com/view/7sSGDW\nconst int aa = 2;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 total = vec4(.0);\n    /*MSAA*/\n    for(int i = 0; i <aa;i++)\n    for(int j = 0; j <aa;j++)\n    {\n    \t/*offset the uv for MSAA*/\n    \tvec2 uv = (fragCoord+vec2(float(i),float(j))/float(aa)-.5)/iResolution.xy - vec2(.5);\n    \tuv.x *= iResolution.x/iResolution.y;\n    \t\n        vec4 outColor;\n        Image(outColor, uv);\n        total += outColor;\n    }\n    total /= float(aa*aa);\n    \n    /*Output to screen*/\n    fragColor = total;\n}","name":"Image","description":"","type":"image"}]}