{"ver":"0.1","info":{"id":"MX3GzH","date":"1716094326","viewed":56,"name":"Convolution Blur and Sharpen","username":"HaydenS","description":"Use convolution to blur or sharpen a image","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["blur","convolution","sharpen"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // get frame data from buffer A\n    \n    vec4 frameData = texture(iChannel0, uv);\n    \n    fragColor = vec4(frameData.rgb, 1.0);\n    \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 convolute(in mat3 filterKernel, in vec2 uvCoord){\n        \n    // Offset for the neighboring pixels\n    float Xoffset = 1.0 / iResolution.x;\n    float Yoffset = 1.0 / iResolution.y;\n    \n    vec3 colorSum = vec3(0.0);\n    float scalarSum = 0.0;\n    \n    \n    // Loop over the kernel\n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            vec2 offsetCoord = uvCoord + vec2(float(i) * Xoffset, float(j) * Yoffset);\n            vec3 pixelColorAtCoord = texture(iChannel0, offsetCoord).rgb;\n            float scalar = float(filterKernel[i+1][j+1]);\n            \n            vec3 addend = pixelColorAtCoord*scalar;\n            colorSum += addend;\n            scalarSum += float(scalar);\n            \n        }\n    }\n\n    // Average the sum\n    vec3 color = colorSum / scalarSum;\n    \n    return color;\n\n}\n\nmat3 boxBlur = mat3(\n    1.0, 2.0, 1.0,\n    2.0, 4.0, 2.0,\n    1.0, 2.0, 1.0\n);\n\nmat3 sharpen = mat3(\n    0.0, -1.0, 0.0,\n    -1.0, 5.0, -1.0,\n    0.0, -1.0, 0.0\n);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // get previousData\n    vec4 previousFrameData = texture(iChannel0,uv);\n    \n    // Initial Condition\n    if(iFrame == 0) {\n        \n        uv = uv*2.0 - 1.0;\n        \n        // aspect ratio 1x1\n        uv.x *= iResolution.x / iResolution.y;\n\n        // palette\n        vec3 a = vec3(1.000, 0.500, 0.500);\n        vec3 b = vec3(0.500, 0.500, 0.500);\n        vec3 c = vec3(0.750, 1.000, 0.667);\n        vec3 d = vec3(0.800, 1.000, 0.333);\n\n        // function\n        float z = 2.0*sin(4.0*uv.x)*cos(4.0*uv.y) / (exp( pow(uv.x,2.0) + pow(uv.y,2.0) ));\n\n\n\n        vec3 color = palette(z, a, b, c, d);\n        fragColor = vec4(color, 1.0);\n        \n        return;\n    }\n    \n    \n    // Find color of next frame\n    vec3 color;\n    \n    if (iFrame%1==0){\n    \n    // set filer kernel here\n    \n        color = convolute(boxBlur, uv);\n        \n    } else {\n        color = previousFrameData.rgb;\n    }\n\n    fragColor = vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}