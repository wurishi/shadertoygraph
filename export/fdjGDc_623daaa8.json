{"ver":"0.1","info":{"id":"fdjGDc","date":"1618576992","viewed":107,"name":"Mandelbrot test modified","username":"Sem1337","description":"m","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","kaleidoscope"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ITERS 267.\n#define PI 3.1415926\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 frag = fragCoord;\n    vec2 res = iResolution.xy;\n    uv -= 0.5;\n    //uv = abs(uv);\n    //uv = rotate(uv, PI * 0.25);\n    //uv = abs(uv);\n\n    \n\n\n    float tz = 0.6 - 0.45*cos(0.115*iTime);\n    float zoom = pow( 0.5, 13.0*tz );\n\n    // -0.05 , 0.6805\n    vec2 c = vec2(-0.04952,.6746265) + uv * zoom;\n    vec2 z;\n    float r = 20.;\n    float r2 = r*r;\n    float iter;\n    vec2 zPrev;\n    for(iter = 0.; iter < ITERS ; iter++) {\n        zPrev = rotate(z, iTime * 4.);\n        z = vec2(z.x * z.x - z.y * z.y, 2.*z.x*z.y) + c;\n        if(dot(z, zPrev) > r2) break;\n    }\n    float angle = atan(z.y,z.x);\n    if (iter == ITERS) {\n        vec3 col = vec3(0.3,0.8,0.3);\n        col *= sin(length(z)*25.)*0.3 + 1.;\n        fragColor = vec4(col, 1.0);\n        return;\n    }\n    float dist = length(z);\n    float fracIter = (dist-r) / (r2-r);\n    fracIter = log(dist) / log(r) - 1.;\n    iter += (fracIter + 3.) * (fracIter + 3.);\n    \n    float m  = sqrt(iter / ITERS);\n    vec3 col =  0.5 * cos(vec3(PI / 20. + (sin(iTime * 0.15)*0.5 + 0.5) ,0.45,0.05) * m * 100.) + 0.5;\n    \n    col *= vec3(smoothstep(5.,0.,fracIter));\n    \n    col *= 1. + sin(angle * 2.)*0.2;\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}