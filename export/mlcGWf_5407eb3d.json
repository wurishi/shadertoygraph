{"ver":"0.1","info":{"id":"mlcGWf","date":"1683222033","viewed":56,"name":"Sector of a circle gradient","username":"alx","description":"A simple shader for a spotlight or something","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","gradient","geometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float kInvPi = 1.0 / 3.141592;\nfloat dist(vec2 p0, vec2 pf){return inversesqrt((pf.x-p0.x)*(pf.x-p0.x)+(pf.y-p0.y)*(pf.y-p0.y));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n    // center of circle\n    vec2 point = iMouse.xy;\n    //color\n    vec3 color = vec3( 1.0, .0, 1.0 );\n    //luminosity\n    float lumin = 20.0;\n    // arc of sector (0.0-1.0)\n    float arc = .2;\n    // offset of sector (0.0-1.0)\n    float offset = .1;\n   \n    // Create an gradient circle.\n    float circle = dist(point,fragCoord)* lumin;\n    \n   \n    \n    // Calculate angle, so we can draw sectors, too.\n\tfloat angle = atan(fragCoord.x- point.x, fragCoord.y - point.y ) * kInvPi * .5;\n\tangle = fract( angle - offset );\n    \n    // Only draw a portion (sector) of the circle.\n    float wa =  fwidth( angle );\n    float sector = smoothstep( arc + wa, arc - wa, angle);\n    circle *= sector;\n   \n    // Let's define the circle's color now.\n    vec3 rgb = clamp(circle * color , .0, 1.0);     \n    \n    // Output final color.\n    fragColor = vec4( rgb, .0);  \n}","name":"Image","description":"","type":"image"}]}