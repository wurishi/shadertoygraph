{"ver":"0.1","info":{"id":"DtVGDV","date":"1684697454","viewed":36,"name":"Chladni-inspired Pattern Generat","username":"calin1","description":"This shader creates dynamic, Chladni-inspired patterns using sinewaves. While it doesn't calculate the vibration modes of a physical system like actual Chladni figures, it mimics the aesthetics by modulating the sine waves based on the angular and radial ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sinewave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Create a Chladni-like pattern influenced by a noise texture with a non-linear transformation\nfloat chladniPattern(float frequency, float phase, vec2 uv, float time, float noise) {\n    // Polar coordinates\n    float angle = atan(uv.y, uv.x) + pow(noise, 2.0) * 2.0;\n    float radius = length(uv) + pow(noise, 2.) * 2.0;\n    \n    // Chladni pattern with frequency and phase affected by the noise\n    return sin((frequency + noise * 5.0) * angle + time + noise * phase) + sin((2.0 * frequency + noise * 10.0) * radius - time);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates\n    vec2 uv = fragCoord / iResolution.xy - vec2(1);\n    \n    // Sample the noise texture at the current UV coordinates\n    float noise = texture(iChannel0, uv).r;\n    \n    // Scale and bias the noise to the range [-1, 1]\n    noise = noise * 1.0 - 1.0;\n\n    // Call the Chladni pattern function multiple times with different frequencies and phases\n    float pattern = chladniPattern(-1.0, 31.0, uv, iTime, noise) + chladniPattern(1.0, 51.0, uv, iTime, noise);\n    \n    // Normalize the pattern to [0, 1] range\n    pattern = pattern * 0.25 + 0.5; // The scaling factor here is halved (from 0.5 to 0.25) because we've added together two patterns\n    \n    fragColor = vec4(vec3(pattern), 1.0);\n}","name":"Image","description":"","type":"image"}]}