{"ver":"0.1","info":{"id":"lljcz3","date":"1509601571","viewed":141,"name":"demo_02 heatbeat","username":"jzllove9","description":"从shader女神的博文中找来的shader效果，link：http://blog.csdn.net/candycat1992/article/details/44040273","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["demo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.131593;\nconst float smoothlevel = 0.1;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //background\n    vec2 p = ( 2. * fragCoord.xy - iResolution.xy) / min(iResolution.y, iResolution.x);\n    \n    p.y -= 0.25;\n    \n    vec3 bcol = vec3( 1.0, 0.8, 0.7 - 0.07 * p.y ) * ( 1.0 - 0.25 * length(p) );\n           \n    //animate\n    float tt = mod(iTime, 1.5) / 1.5;\n    float ss = pow(tt, 0.2) * 0.5 + 0.5;\n    ss = 1.0 + ss * 0.5 * sin(tt * PI * 2.0 * 3.0 + p.y * 0.5) * exp(-tt * 4.0);\n    p *= vec2(0.5, 1.5) + ss * vec2(0.5, -0.5);\n    \n    //shape\n    float a = atan(p.x, p.y)/PI;\n    float r = length(p);\n    float h = abs(a);\n    float d = ( 13. * h - 22. * h * h + 10. * h * h * h ) / ( 6. - 5. * h ); //通过数学公式进行的形状约束，使其成为桃心的形状\n    \n    //color 变量s用来约束颜色，使其约束在shape内部并且有渐变的效果\n    float s = 1.0 - 0.5 * clamp(r/h, 0.0, 1.0); //本句其实是没用的，因为后面s直接被赋值了\n    s = 1.0 + 0.75 * p.x;\n    s *= 1.0 - 0.25 * r;\n    s = 0.5 + 0.6 * s;\n   \ts *= 0.5 + 0.5 * pow( 1.0 - clamp(r/d, 0.0, 1.0) , 0.1);\n\n    \n    vec3 hcol = vec3(1.0, 0.5 * r, 0.3) * s; \n    vec3 col = mix( bcol, hcol, smoothstep( -smoothlevel , smoothlevel , d - r) );\n     \n\tfragColor = vec4( col,1.0 );\n}","name":"Image","description":"","type":"image"}]}