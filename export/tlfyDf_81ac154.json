{"ver":"0.1","info":{"id":"tlfyDf","date":"1593266237","viewed":156,"name":"Visual Enhancer","username":"scry","description":"yesss\nuncomment line 47 for extra fun (but don't do it if photosensitive)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float c = length(uv-0.5);\n    float tt = iTime;\n    float n1 = mod(noise(uv*950.)*100.,1.)*100.;\n    float n2 = noise(uv+n1+tt*0.1);\n    vec3 col = vec3(1.-(n2*1.));\n    col *= 0.99;\n    col += 0.0;\n    vec3 c2 = 1.-col;\n    float fn = noise(uv);\n    float f =(sin((tt*3.14)*9.+sin(tt*.4)*44.)+1.)*0.1;\n    float s =(sin(tt*0.04)+1.);\n    f = f+0.95;\n    s += 1.;\n    col = fract(col*1.02);\n    col *= 0.2;\n    //col *= f; //fast flicker for dreamachine effect\n    //https://en.wikipedia.org/wiki/Dreamachine\n    col *= s*0.5;\n    col *= 0.95 +sin(c*10.+tt)*0.08;\n    col += (sin(uv.y*6.+tt*0.033)*0.5+0.5)*.04;\n    \n    //col = mix(col,c2,f);\n    //col = mod(col,1.);\n    //gl_FragColor = vec4(col,1.);\n    // Normalized pixel coordinates (from 0 to 1)\n    \n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}