{"ver":"0.1","info":{"id":"Wd2fzh","date":"1589492813","viewed":129,"name":"Math heart","username":"mikelsv","description":"Idea from https://coub.com/view/2dsqe9 ","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["heart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Math heart\n// Idea from: https://coub.com/view/2dsqe9\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy / 2.) / iResolution.y;\n    uv.y += .1;\n\n    // Scale\n    uv *= 6.;    \n    \n    // Potision\n    float pos = mod(iTime * PULSE_TIME, 10.);\n    float val = 0.;\n\n\tpos *= .1;\n    val = max(sin(PI * pos * 1.) * 6., sin(PI * pos * 2.) * 8.);\n    \n    // Heart extension\n    float x = uv.x;\n    float z = val;// mod(iTime, 10.);    \n    float y = pow(x * x, 2. / 3.) + 0.9 * sqrt(3.3 - x * x) * sin(z * PI * x);\n    \n    val = length(uv - vec2(x, y));\n    val = smoothstep(0.5, 0., val);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n                 \t\n\tcol *= val;\n                     \n    // Output to screen\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( in int samp, float time ){\n    // Potision\n    float pos = mod(time * PULSE_TIME, 10.);\n    float val;\n    \n    pos *= .1;        \n    val = max(sin(PI * pos * 1.) * 6., sin(PI * pos * 2.) * 8.);\n    \n    // To sound\n    val = sin(6.2831 * 26.26 * val * .2) * exp(-3.0 * val);\n    \n    return vec2(val);// vec2(tick(val, 120.));\n    \n    // A 440 Hz wave that attenuates quickly overt time\n   // return vec2( sin(6.2831*440.0*val * 0.2)*exp(-3.0*val) );\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"#define PI 3.141592653589793\n\nconst float PULSE_TIME = 4.0;","name":"Common","description":"","type":"common"}]}