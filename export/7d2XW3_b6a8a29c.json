{"ver":"0.1","info":{"id":"7d2XW3","date":"1623102272","viewed":69,"name":"test octahedron","username":"wakkko","description":"Little compilation of basic knowledge gathered. Makes for simple testing.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","octahedron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\nconst float DEG2RAD = 3.14159265359/180.0;\n\n\n/**\n * Rotation matrix around the X axis.\n */\nmat3 rotate2X(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n/**\n * Rotation matrix around the Y axis.\n */\nmat3 rotate2Y(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n/**\n * Rotation matrix around the Z axis.\n */\nmat3 rotate2Z(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n\nvec3 translate(vec3 p, vec3 t)\n{\n\treturn p - t;\n}\n\nvec3 rotateX(vec3 p, float a)\n{\n\ta = -a * DEG2RAD;\n\tfloat c = cos(a), s = sin(a);\n\treturn mat3(1.0, 0.0, 0.0, 0.0, c, -s, 0.0, s, c) * p;\n}\nvec3 rotateY(vec3 p, float a)\n{\n\ta = -a * DEG2RAD;\n\tfloat c = cos(a), s = sin(a);\n\treturn mat3(c, 0.0, s, 0.0, 1.0, 0.0, -s, 0.0, c) * p;\n}\nvec3 rotateZ(vec3 p, float a)\n{\n\ta = -a * DEG2RAD;\n\tfloat c = cos(a), s = sin(a);\n\treturn mat3(c, -s, 0.0, s, c, 0.0, 0.0, 0.0, 1.0) * p;\n}\n\n\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\n\n\nfloat opU( float d1, float d2 )\n{\n\treturn (d1<d2) ? d1 : d2;\n}\n\nfloat sceneSDF(vec3 samplePoint) { // objets dans la ma^p\n   vec3 oct1 = samplePoint +  vec3(-2.0, sin(iTime), 0.0);\n   oct1 = rotateY(oct1,iTime * 10.0) ;\n   float d1 = sdOctahedron(oct1, 1.0);\n   \n   vec3 oct2 = samplePoint +  vec3(2.0, sin(iTime), 0.0);\n   oct2 = rotateY(oct2,iTime * 10.0) ;\n   float d2 = sdOctahedron(oct2, 1.0);\n   \n   \n   //samplePoint = rotateY(iTime / 2.0) * samplePoint;\n   //samplePoint = samplePoint +  vec3(0.0, sin(iTime), 0.0);\n   return opU(d1,d2);\n}\n\nfloat Scene(vec3 p)\n{\n\n    int NUM_ITERATIONS = 15;\n    float SCALE = 2.0;\n    float C_X = 1.0;\n    float C_Y = 0.0;\n    float C_Z = 0.0;\n    float ROT1_X = 0.0;\n    float ROT1_Y = 0.0;\n    float ROT1_Z = 0.0;\n    \n    float ROT2_X = 0.0;\n    float ROT2_Y = 0.0;\n    float ROT2_Z = 0.0;\n    \n\n\tvec3 z = p;\n\tfloat b = 10000.0;\n\tfloat t = 0.0;\n\n\tfor (int i = 0; i < 30; ++i) {\n\t\tif (i == NUM_ITERATIONS) {\n\t\t\tbreak;\n\t\t}\n\t\tz = rotateX(z, ROT1_X);\n\t\tz = rotateY(z, ROT1_Y);\n\t\tz = rotateZ(z, ROT1_Z);\n\n\t\tif (z.x + z.y < 0.0) { z.xy = -z.yx; }\n\t\tif (z.x + z.z < 0.0) { z.xz = -z.zx; }\n\t\tif (z.x - z.y < 0.0) { z.xy = z.yx; }\n\t\tif (z.x - z.z < 0.0) { z.xz = z.zx; }\n\n\t\tz = rotateX(z, ROT2_X);\n\t\tz = rotateY(z, ROT2_Y);\n\t\tz = rotateZ(z, ROT2_Z);\n\n\t\tz = SCALE * z - (SCALE-1.0) * vec3(C_X, C_Y, C_Z);\n\n\t\tfloat m = dot(z, z);\n\t\tb = min(m, b);\n\t\tt = float(i+1);\n\t\tif (m >= 8.0) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn (length(z)-2.0) * pow(SCALE, -t);\n}\n\n\n/**\n * Return the shortest distance from the eyepoint to the scene surface along\n * the marching direction. If no part of the surface is found between start and end,\n * return end.\n * \n * eye: the eye point, acting as the origin of the ray\n * marchingDirection: the normalized direction to march in\n * start: the starting distance away from the eye\n * end: the max distance away from the ey to march before giving up\n */\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection); //croise l'item ?\n        //float dist = Scene(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\n\n// Return the normalized direction to march in from the eye point for a single pixel.\n// de la cam ligne passe au pixel courant et continue tout droit jusqua que potentiellement rencontre un objet dans la scene \nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n\n\n//LUMIERES\n\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);    \n    return color;\n}\n\n\n//movement de cam\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //cam\n   \tvec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(0.0, 0.0, 10.0);\n    mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));   \n    vec3 worldDir = (viewToWorld * vec4(dir, 0.0)).xyz;\n    \n    \n    \n    float dist = shortestDistanceToSurface(eye, dir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n    }\n    \n     vec3 p = eye + dist * worldDir;\n    \n    vec3 K_a = vec3(0.2, 0.2, 0.2);\n    vec3 K_d = vec3(0.7, 0.2, 0.2);\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 10.0;\n    \n    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}