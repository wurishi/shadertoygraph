{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"\n// Original here >> https://www.shadertoy.com/view/4slGW7\n\n#define INTENSITY 100.0\n#define GLOW 2.0\n\n// ratio should be calculated from the screenratio, lazy me:\n#define RATIO 0.6\n\nvec3 blob(vec2 point, vec2 uv, vec3 color) {\n\n\tfloat d = 1.0 / distance(vec2(uv.x, uv.y * RATIO), point);\n\t\n    \td = pow(d / INTENSITY, GLOW);\n    \n\treturn vec3(color.r * d, color.g * d, color.b * d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Can this be calculated outside of main?\n    vec2 pixelPitch = 1.0 / iResolution.xy; \n    \n\tvec4 color = vec4(1.0, 1.0, 1.0, 1.0);\n    \n    vec2 coords = iMouse.xy * pixelPitch; \n    \n    \tcoords.y *= RATIO;\n    \n\t\tcolor.rgb -= blob(coords, uv, vec3(1.0, 1.0, 1.0));\n    \n\tfragColor = color;\n    \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"llXGDB","date":"1424779804","viewed":433,"name":"Glow Sphere (controllable)","username":"Loadus","description":"Simple glow sphere, controllable via mouse (thinking about doing a sketching app on Android that uses a pixel shader to draw, should be interesting ...). Almost correct, just a bit of tweaking needed.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["glow","draw","controllable"],"hasliked":0,"parentid":"","parentname":""}}