{"ver":"0.1","info":{"id":"MXK3Dw","date":"1717753502","viewed":56,"name":"Perlin Noise Waves","username":"saxha","description":"waves","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["waves","perlin","visual","wallpaper"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Generate noise\nfloat noise(vec2 p) {\n    return fract(sin(dot(p, vec2(127.1, 364.7))) * 43758.5453123);\n}\n\n// Smooth noise function\nfloat smoothNoise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    f = f * f * (3.0 - 2.0 * f);\n\n    float n00 = noise(i);\n    float n10 = noise(i + vec2(1.0, 0.0));\n    float n01 = noise(i + vec2(0.0, 1.0));\n    float n11 = noise(i + vec2(1.0, 1.0));\n\n    float nx0 = mix(n00, n10, f.x);\n    float nx1 = mix(n01, n11, f.x);\n\n    return mix(nx0, nx1, f.y);\n}\n\n// Function to create waves\nfloat waves(vec2 p, float scale) {\n    float n = smoothNoise((iTime/4. + iDate.w/10.) + p * scale);\n    return n + distance((gl_FragCoord.xy / iResolution.xy), vec2(1.1));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Set up the normalized coordinates\n    vec2 uv = fragCoord / iResolution.y;\n    uv *= 2.;\n    \n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Compute color based on distance\n    vec3 bgColor = col;\n    vec3 waveColor = mix(vec3(0.), bgColor, distance(uv, vec2(2.))/4.);\n\n    // Create waves effect \n    float v = sin(waves(uv, 2.)*10.);\n    float waves = smoothstep(-1., 1., v / fwidth(v));\n    vec3 color = mix(bgColor, waveColor, waves);\n\n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}