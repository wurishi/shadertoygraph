{"ver":"0.1","info":{"id":"Xtdczf","date":"1533497738","viewed":215,"name":"Swastikas","username":"shaderv44","description":"Swastikas","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define sqrt2 1.41421356237\n#define pi 3.14159265359\n\nfloat distanceToLine(vec2 start, vec2 end, vec2 uv) {\n    vec2 n = normalize(end-start);\n    float l = length(end-start);\n    float q = length(dot(n, uv-start));\n\tif (q > l || dot(n, uv-start) < 0.0) return 99999.0;\n    else return length((dot(n, uv-start)*n - (uv - start)));\n}\n\nfloat distanceToSwastika(vec2 pos, float scale, float rot, vec2 uv) {\n\tfloat d = scale;\n    vec2 right = scale*vec2(cos(rot), sin(rot));\n    vec2 up = scale*vec2(sin(rot), -cos(rot));\n    return \n    min(distanceToLine(pos, pos+right, uv),\n   \tmin(distanceToLine(pos+right, pos+right+up, uv),\n    min(distanceToLine(pos, pos+up, uv), \n    min(distanceToLine(pos + up, pos-right+up, uv),\n    min(distanceToLine(pos, pos-right, uv),\n    min(distanceToLine(pos+up, pos-right+up, uv), \n    min(distanceToLine(pos-right,pos-right-up, uv), \n    min(distanceToLine(pos, pos-up, uv),\n        distanceToLine(pos-up, pos+right-up, uv)))))))));\n}\n\nfloat distanceToThing(vec2 uv) {\n    vec2 pos = vec2(0.5,0.5);\n    float rot = iTime*0.5;\n    float scale = 0.2;\n\tfloat distance = distanceToSwastika(vec2(0.5,0.5), scale,rot, uv);\n    for (int i = 0; i < 4; i++) {\n        vec2 p = pos + sqrt2 * scale * vec2(cos(rot+float(i)*pi/2.0+pi/4.0),sin(rot+float(i)*pi/2.0+pi/4.0));\n        distance = min(distance, distanceToSwastika(\n            p,\n            scale/4.0,\n            rot*2.0, \n            uv)\n        );\n        for (int j = 0; j < 4; j++) {\n            vec2 p2 = sqrt2 * (scale/4.0)\n                * vec2(cos(rot*2.0+float(i)*pi/2.0+pi/4.0+float(j)*pi/2.0),\n                       sin(rot*2.0+float(i)*pi/2.0+pi/4.0+float(j)*pi/2.0));\n        \tdistance = min(distance, distanceToSwastika(\n                p + p2,\n                scale/8.0,\n                rot*4.0, \n                uv)\n            );\n            for (int k = 0; k < 4; k++) {\n                vec2 p3 = sqrt2 * (scale/8.0)\n                    * vec2(cos(rot*4.0+float(i)*pi/2.0+pi/4.0+float(j)*pi/2.0+float(k)*pi/2.0),\n                           sin(rot*4.0+float(i)*pi/2.0+pi/4.0+float(j)*pi/2.0+float(k)*pi/2.0));\n                distance = min(distance, distanceToSwastika(\n                    p+p2+p3,\n                    scale/24.0,\n                    rot*8.0, \n                    uv)\n                              );\n            }\n        }\n    }\n    return distance;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(-0.4,0.0)+fragCoord/iResolution.y;\n    float D = distanceToThing(uv);\n    float d = D;\n    if (d < 0.005) fragColor = vec4(1.0);\n    else fragColor = vec4(1.0-length(uv - vec2(0.5,0.5)),0.0,1.0-length(uv - vec2(0.5,0.5)),1.0);\n}","name":"Image","description":"","type":"image"}]}