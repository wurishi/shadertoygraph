{"ver":"0.1","info":{"id":"fttcD8","date":"1659710443","viewed":140,"name":"Funky Mycelium","username":"drmelon","description":"Cellular automata continues.","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["game","automata","life","cellular","conway","of"],"hasliked":0,"parentid":"NltyD8","parentname":"Tiny Games Of Life (3 Channels)"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float zoomScale = 1.0 + (iMouse.x / iResolution.x);\n    \n    // Output to screen\n    fragColor = texture(iChannel0, uv / zoomScale);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvec4 funkyMycelium(int channel, vec2 fragCoord)\n{\n    int channelEat = channel + 1;\n    if(channelEat == 3)\n    {\n      channelEat = 0;\n    }\n    \n    int channelKilledBy = channel - 1;\n    if(channelKilledBy == -1)\n    {\n         channelKilledBy = 2;\n    }\n    \n    vec4 fragColor;\n    \n    // Get original noise texture to start cellular sim.\n    vec4 initialNoise = texture(iChannel1, fragCoord/iResolution.xy);\n\n    // Only start after 10f.\n    if(iFrame < 10)\n    {\n        fragColor = initialNoise;\n    }\n    else\n    {\n        // Get cell value last frame.\n        vec2 uv = fragCoord/iResolution.xy;\n        vec4 lastFrame = texture(iChannel0, uv);\n        \n        \n        // Get all 8 neighbour cells.\n        vec2 Left = vec2(-1.0, 0.0);\n        vec2 Top = vec2(0.0, -1.0);\n    \n        vec4 leftNeighbour = texture(iChannel0, (fragCoord + Left)/iResolution.xy);\n        vec4 rightNeighbour = texture(iChannel0, (fragCoord - Left)/iResolution.xy);\n        vec4 topNeighbour = texture(iChannel0, (fragCoord + Top)/iResolution.xy);\n        vec4 bottomNeighbour = texture(iChannel0, (fragCoord - Top)/iResolution.xy);\n        vec4 leftTopNeighbour = texture(iChannel0, (fragCoord + Left + Top)/iResolution.xy);\n        vec4 rightTopNeighbour = texture(iChannel0, (fragCoord - Left + Top)/iResolution.xy);\n        vec4 rightBottomNeighbour = texture(iChannel0, (fragCoord - Top - Left)/iResolution.xy);\n        vec4 leftBottomNeighbour = texture(iChannel0, (fragCoord - Top + Left)/iResolution.xy);\n        \n        // Count living cells.\n        float count = 0.0;\n        if(leftNeighbour[channel] > 0.5)\n        {\n            count = count + 0.1;\n        } \n        if(rightNeighbour[channel] > 0.5)\n        {\n            count = count + 0.1;\n        } \n        if(topNeighbour[channel] > 0.5)\n        {\n            count = count + 0.1;\n        } \n        if(bottomNeighbour[channel] > 0.5)\n        {\n            count = count + 0.1;\n        } \n        if(leftTopNeighbour[channel] > 0.5)\n        {\n            count = count + 0.1;\n        } \n        if(rightTopNeighbour[channel] > 0.5)\n        {\n            count = count + 0.1;\n        } \n        if(leftBottomNeighbour[channel] > 0.5)\n        {\n            count = count + 0.1;\n        } \n        if(rightBottomNeighbour[channel] > 0.5)\n        {\n            count = count + 0.1;\n        } \n    \n        // If 2 or 3 living neighbours, live, else die.\n        if(lastFrame[channel] > 0.3 + (sin(iTime*1.3)*0.2))\n        {\n            if(count >= 0.1 && count <= 0.4)\n            {\n                fragColor[channel] = lastFrame[channel] + 0.1;\n            }\n            else\n            {\n                fragColor[channel] = lastFrame[channel] - 0.2;\n            }\n        }\n        else\n        {\n            // If dead, and 3 living neighbours, get born.\n            if(count == 0.3)\n            {\n               fragColor[channel] = lastFrame[channel] + 0.1 + (cos(iTime*5.2)*0.05);\n            }\n        }\n        \n        // Red eats Green, Green eats Blue, Blue eats Red.\n        if(lastFrame[channelEat] > 0.1 && lastFrame[channel] > 0.3)\n        {\n           fragColor[channel] += 0.15 * count;\n        }\n        if(lastFrame[channelKilledBy] > 0.1 && lastFrame[channel] > 0.3)\n        {\n           fragColor[channel] -= 0.15;\n        }\n        \n    }\n    \n    return fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    fragColor.r = clamp(funkyMycelium(0, fragCoord).r, 0.0, 1.0);\n    fragColor.g = clamp(funkyMycelium(1, fragCoord).g, 0.0, 1.0);\n    fragColor.b = clamp(funkyMycelium(2, fragCoord).b, 0.0, 1.0);\n   \n    \n    fragColor.a = 1.0;\n}\n","name":"Buffer A","description":"","type":"buffer"}]}