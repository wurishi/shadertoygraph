{"ver":"0.1","info":{"id":"4Xffzl","date":"1728753534","viewed":93,"name":"NeonPulse: Rhythmic Glow Visuali","username":"nilberlin","description":"kkdkssdkKey Features:\n• Beat-sensitive concentric circles that expand and contract with the music\n• Smooth, vibrant color transitions inspired by neon aesthetics\n• Dynamic central glow that intensifies with the bass\n• Subtle background texture for added d","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["audiovisualizergenerativeartshaderartmusicvisualizationcreativecodingneonaestheticsbeatsyncdigitalartvjingsha"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGzn","filepath":"/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","previewfilepath":"/media/ap/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nfloat noise(vec2 p) {\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec3 smoothColor(float t) {\n    return 0.5 + 0.5 * cos(6.28318 * (t + vec3(0.0, 0.33, 0.67)));\n}\n\n// Beat-Detektor Funktion\nfloat detectBeat(float time) {\n    float kick = texture(iChannel0, vec2(0.05, 0.0)).x; // Niedrige Frequenzen für Kick\n    float kickTrigger = step(0.5, kick); // Trigger, wenn Kick über 0.5 ist\n    return kickTrigger * exp(-fract(time * 2.0) * 3.0); // Abklingende Pulsation\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    float time = iTime * 0.5; // Erhöhte Geschwindigkeit für schnellere Bewegungen\n    vec3 color = vec3(0.0);\n    \n    // Audio reaktive Variablen\n    float bass = texture(iChannel0, vec2(0.1, 0.0)).x;\n    float mid = texture(iChannel0, vec2(0.5, 0.0)).x;\n    float treble = texture(iChannel0, vec2(0.9, 0.0)).x;\n    \n    // Beat-Detektion\n    float beat = detectBeat(time);\n    \n    // Schnellere pulsierende Kreise mit Beat-Reaktion\n    for (float i = 0.0; i < 3.0; i++) {\n        float r = 0.3 + 0.2 * sin(time * (1.5 + i * 0.5) + i * PI / 1.5);\n        r += 0.1 * bass + 0.05 * beat; // Verstärkte Bass- und Beat-Reaktivität\n        vec2 pos = uv * (1.0 + beat * 0.1); // Leichte Verzerrung beim Beat\n        float d = length(pos) - r;\n        vec3 col = smoothColor(i * 0.3 + time * 0.2);\n        color += col * (0.015 / (abs(d) + 0.01)) * smoothstep(0.0, -0.02, d);\n    }\n    \n    // Subtiles Hintergrundrauschen mit Beat-Einfluss\n    float n = noise(uv * (3.0 + beat * 2.0) + time);\n    color += vec3(n * 0.04 * (1.0 + beat));\n    \n    // Sanfter Farbverlauf basierend auf Audio und Beat\n    vec3 gradientColor = smoothColor(length(uv) + time * 0.2 + beat * 0.1);\n    color = mix(color, gradientColor, 0.3 + 0.2 * mid + 0.1 * beat);\n    \n    // Verstärkter Glanzeffekt beim Beat\n    vec3 glowColor = smoothColor(time * 0.3);\n    color += glowColor * pow(1.0 - length(uv), 4.0) * (0.2 + 0.3 * beat);\n    \n    // Sanfte Farbkorrektur\n    color = pow(color, vec3(0.8)); // Leichte Gammakorrektur\n    color = mix(color, vec3(length(color)), 0.1); // Leichte Entsättigung\n    \n    // Finale Anpassung der Helligkeit mit Beat-Boost\n    color *= 0.8 + 0.2 * beat; // Helligkeit erhöht sich beim Beat\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec4 someFunction( vec4 a, float b )\n{\n    return a+b;\n}","name":"Common","description":"","type":"common"}]}