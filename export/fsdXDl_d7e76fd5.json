{"ver":"0.1","info":{"id":"fsdXDl","date":"1634167557","viewed":74,"name":"goldenRatioHash (floats only)","username":"Envy24","description":"Left side  : hash without seed\nRight side: hash with seed","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","random","hash","golden","ratio","uniformdistribution"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R  iResolution\n#define MX (iMouse.x / R.x + 0.1)\n\n/*\n    Hash with uniform distribution.\n    Works fine for range [0.1; 1e6].\n    Not always look good.\n \n    For 8388608 tested samples in range [0.0; 1.0] shows this statistics:\n        Histogram with 0.1 column width:\n            854844 825298 823153 824903 829215 834342 840773 844517 846493 865070\n            \n\n        Shannon enthropy                  =3.321747\n        Area of unit circle (Monte-Carlo) =3.119030\n        Mathematical expectation          =0.502320\n        Dispersion                        =0.084333\n        Standart deviation                =0.290402\n    \n    return value in range [0.0; 1.0].\n*/\nfloat goldenRatioHash(float x)\n{\n    float y = (100. + x);\n    float m = mod(1e3 * y, 11.67115450f);\n    float f = fract(m * (m * y));\n    float a = (f - m) * 6.18034029f;\n\n    return fract(a * fract(a * fract(a)));\n}\n\nfloat goldenRatioHash2(vec2 p, float w)\n{ \n    return goldenRatioHash(clamp(p.y * w + p.x, 0.1, 1e6));\n}\n\nfloat goldenRatioHashWithSeed(float x, float seed)\n{\n    float y = (100. + x);\n    float m = mod(1e3 * y, 11.67115450f * seed);\n    float f = fract(m * (m * y));\n    float a = (f - m) * 6.18034029f;\n\n    return fract(a * fract(a * fract(a)));\n}\n\nfloat goldenRatioHash2WithSeed(vec2 p, float w, float seed)\n{ \n    return goldenRatioHashWithSeed(clamp(p.y * w + p.x, 0.1, 1e6), seed);\n}\n\nvoid mainImage( out vec4 O, in vec2 P )\n{\n    vec2 uv = P/R.xy;\n    //vec2 uv = abs(P+P-R.xy)/R.y;\n    \n    // Left side?\n    if (uv.x < 0.5) { O = vec4(goldenRatioHash2(uv * MX * 1e3, R.x)); }\n    else { O = vec4(goldenRatioHash2WithSeed(uv * MX * 1e2, R.x, GOLDEN_RATIO)); }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define GOLDEN_RATIO 1.61803401\n\n/*\n    Returns float in range [0.0; 1.0].\n*/\nfloat oldGoldenRatioHash(vec2 p)\n{\n    float xyg = (p.x + 1.61803401f) * (p.y - 161.03401f); \n    float a = (xyg * xyg * xyg) * 10001.0 * (p.x + p.y);\n    \n    return a - floor(a);\n    //return fract(a);      // black screen.\n}\n\nfloat goldenRatioHash_(float x)\n{\n    float m = mod(1e6 * x, 6.123f * 1.61803401f);\n    float f = fract(m * (m * x));\n    float a = (f - m) * 6.18034029;\n\n    return fract(a * fract(a * fract(a * m)));\n}","name":"Common","description":"","type":"common"}]}