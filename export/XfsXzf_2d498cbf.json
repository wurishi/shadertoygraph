{"ver":"0.1","info":{"id":"XfsXzf","date":"1705532594","viewed":63,"name":"Radial Gradient Using Chebyshev","username":"chrisnoelnz","description":"Using Chebyshev distance to get a square stepped gradient that radiates from the center.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["radial","gradient","stepped"],"hasliked":0,"parentid":"XtXyWH","parentname":"Radial Gradient Steps"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 Color1 = vec4(0, 0, 1, 1),\n     Color2 = vec4(1);\n\nfloat StepSize = 32.,\n         Dither = 4.;\n\n//https://www.shadertoy.com/view/lscGDr\nvec3 dithered( vec3 color,  vec2 uv,  float dither)\n{\n    vec3 magic = vec3( .06711056, .00583715, 52.9829189 );\n    return dither > 0.\n      ? clamp(color \n              + dither/255. \n                * ( fract( magic.z * fract( dot( uv, magic.xy ) ) ) - .5 )\n             , 0., 1. )\n      : color;\n}\n\nfloat stepped( float s,  float scale,  float steps)\n{\n    return steps > 0. \n      ? floor( s / scale * steps) / (steps-1.) \n      : s;\n}\n\n#define chebyshevDistance(d)  max(abs(d).x, abs(d).y)\n// make the number of steps relative to the shortest side of the viewport\n#define numSteps(s) min(iResolution.x, iResolution.y) / s\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = ( u - .5* R ) / R.y;  \n\n\tfloat dist = chebyshevDistance( U ),\n             s = stepped( dist, 1., numSteps( StepSize ) );\n    \n    O = mix(Color1, Color2, clamp(s, 0., 1.));\n\tO.rgb = dithered(O.rgb, u, Dither);\n}","name":"Image","description":"","type":"image"}]}