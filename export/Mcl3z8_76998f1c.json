{"ver":"0.1","info":{"id":"Mcl3z8","date":"1702761934","viewed":25,"name":"galaxy and stars ","username":"nayk","description":"galaxy,stars,colorful","likes":0,"published":1,"flags":1,"usePreview":0,"tags":["colorful","galaxy","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*originals https://www.shadertoy.com/view/DtGyWh/*originals https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/MdXSzS */\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.3-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\n#define PI 3.14159265359\n#define TWO_PI 2. * PI\n#define ITERATIONS 30.\n\nvec4 k_orb(vec2 uv, float size, vec2 position, vec3 color, float contrast) {\n  return pow(vec4(size / length(uv + position) * color, 1.), vec4(contrast));\n}\n\nvec3 k_rainbow(float progress, float stretch, float offset) {\n  return vec3(cos(vec3(-2, 0, -1) * TWO_PI / 3. + TWO_PI * (progress * stretch) + offset) * 0.5 + 0.5);\n}\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nmat2 k_rotate2d(float a) {\n  return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\n    vec4 O = fragColor;\n    vec2 C =  fragCoord ;\nO=vec4(0);\n uv.x *= iResolution.x/iResolution.y;\n  uv *= 0.08;\n  uv /= dot(uv, uv);\n  uv *= k_rotate2d(time); \n  fragColor = vec4(0.);\n  vec2 uv2= (fragCoord.xy / iResolution.xy) - .5;\n  // so slow :(\n  float s = 0.3;\n  for (float i = 0.; i < ITERATIONS; i++) {\n    uv.x += s*1.5 * cos(0.53 * uv.y);\n    uv.y += s*0.84 * cos(0.42 * uv.x + time/.015);\n    vec3 color = k_rainbow(i / (ITERATIONS * 25.0), sin(iTime*0.5+uv.y*0.15)*4., iTime*0.5);\n    fragColor += k_orb(uv, 2.2, vec2(0, 0), color, 0.7);\n  }\n  vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n          \n                     \n    for (float i = 0.0; i < 4.0; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n\n        float d = length(uv) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n\n        d = cos(d*8. + iTime)/8.;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n        finalColor += col * d;\n    }\n    float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv2.xy) + 1.207)) * 12.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n   fragColor.xyz = 1. - abs(1.-log(abs(fragColor.xyz)));\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p=g*d;\n       \n        p.z+=-iTime*2.5;\n        a=30.;\n        p=mod(p-a,a*2.)-a;\n        s=2.;\n        for(int i=0;i++<8;){\n            p=.23-abs(p);\n            \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            p.y<p.x?p=p.zyx:p;\n           \n            s*=e=1.5+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    10.+cos(iTime*.3+.5*cos(iTime*.3))*3.,\n                    120,\n                    4.+cos(iTime*.5)*5.\n                 );\n         }\n      \n         g+=e=length(p.yx)/s;\n    }\n\n \n\n\tfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\t\n\tfloat s2 = 0.0;\n\tfor (int i = 0; i < 90; i++)\n\t{\n\t\tvec3 p = s2 * vec3(uv2, 0.0);\n\t\t\n\t\tp += vec3(.22, .3, s2 - 1.5 - sin(iTime * .13) * .1)+O.xyz;\n\t\tfor (int i = 0; i < 8; i++)\tp = abs(p) / dot(p,p) - 0.659;\n\t\tv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\n\t\tv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\n\t\tv3 += length(p.xy*10.) * .0003;\n\t\ts2  += .035;\n\t}\n\t\n   \n\tfloat len = length(uv2);\n\tv1 *= smoothstep(.74, .0, len);\n\tv2 *= smoothstep(.5, .2, len);\n\tv3 *= smoothstep(.5, .1, len);\n\t\n\tvec3 col2 = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n\t\t\t\t\t(v1 + v3) * .3,\n\t\t\t\t\t v2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n     vec4 fragColor2=vec4(min(pow(abs(col2), vec3(1.2)), 1.0), 1.0);          \n\tvec3 from=vec3(1.,.5,0.5)+fragColor2.xyz;\n\tfrom+=vec3(time*2.,time,-2.);\n\t\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\n  \n    fragColor*=fragColor2;\n    \n   \n}\n","name":"Image","description":"","type":"image"}]}