{"ver":"0.1","info":{"id":"7d2GDG","date":"1617913264","viewed":104,"name":"Thursday","username":"xernobyl","description":"A shader a day for a week. Thursday.\nFixing yesterday's shader.\n\nNow with very few artifacts!!!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ashaderadayforaweek"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float height(vec3 p) {\n  return ((sin(p.z) + cos(p.x)) * 0.5) * 2.0;\n}\n\n\nvec3 height_normal(vec3 p) {\n  vec2 t = vec2(-0.5 * sin(p.x), 0.5 * cos(p.z));\n  return normalize(vec3(-t.x, sqrt(1.0 - t.x * t.x - t.y * t.y), -t.y));\n}\n\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n  return a + b * cos(6.28318 * (c * t + d));\n}\n\n\nvec3 sRGB(vec3 linear)\n{\n  vec3 a = 12.92 * linear;\n  vec3 b = 1.055 * pow(linear, vec3(1.0 / 2.4)) - 0.055;\n  vec3 c = step(vec3(0.0031308), linear);\n  return mix(a, b, c);\n}\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord) {\n  // camera movement\t\n  vec3 up = vec3(sin(sin(iTime)), cos(sin(iTime)), 0.0);\n  vec3 ray_origin = vec3(sin(iTime) * 8.0, 0.0, -10.0 * iTime);\n  vec3 target = vec3(0.0, 0.0, -10.0 * iTime + 1.0 * (cos(iTime)));\n  \n  // camera matrix\n  vec3 cw = normalize(target - ray_origin);\n  vec3 cu = normalize(cross(cw, up));\n  vec3 cv = normalize(cross(cu, cw));\n  \n  vec2 uv = (2.0 * frag_coord - iResolution.xy) / iResolution.y;\n\n  vec3 ray_dir = (uv.x * cu + uv.y * cv - 1.0 * cw); // normalize for non plane paralel rays\n  \n  vec3 ray_pos = ray_origin;\n  \n  float total_distance = 1.0;\n  float previous_distance = total_distance;\n  int object = 0;\n  float previous_height;\n  float step_height = 999999999.9999999;\n  \n  const float max_dist = 10000000.0;\n  bool inside = false;\n  bool previous_inside = false;\n  float base_step_size = 0.025;\n  \n  for (int it = 0; it < 256; ++it) {\n    inside = false;\n    float step_size = base_step_size * total_distance;\n    total_distance += step_size;\n    \n    ray_pos = ray_origin + total_distance * ray_dir;\n\n    previous_height = step_height;\n    step_height = height(ray_pos);\n    \n    float d = ray_pos.y - step_height + 4.0;\n    \n    if (abs(d) <= 0.001 * total_distance) {\n      object = 1;\n      break;\n    }\n    \n    if (d < 0.0) {\n      inside = true;\n    }\n    \n    d = -ray_pos.y - step_height + 4.0;\n    \n    if (abs(d) <= 0.001 * total_distance) {\n      object = 2;\n      break;\n    }\n\n    if (d < 0.0) {\n      inside = true;\n    }\n\n    if (inside) {\n      base_step_size = -0.5 * abs(base_step_size);\n    }\n    else {\n      if (previous_inside) {\n        base_step_size = -0.5 * base_step_size;\n      }\n    }\n    \n\n    if (total_distance >= max_dist) {\n      break;\n    }\n\n    previous_distance = total_distance;\n    previous_inside = inside;\n  }\n  \n  \n  vec3 n = height_normal(ray_pos);\n  \n  \n  vec3 fog = pal(iTime, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );;\n  \n  if (object == 0) {\n    frag_color = vec4(sRGB(fog), 0.0);\n    return;\n  }\n  \n  float fog_factor = saturate(total_distance * total_distance / 5000.0);\n  \n  if (object == 1) {\n    vec3 col = pal(step_height / 2.0 - iTime, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n    col = mix(saturate(-dot(n, ray_dir)) * col, fog, fog_factor);\n    frag_color = vec4(sRGB(col), 0.0);\n    return;\n  }\n  \n  if (object == 2) {\n    n.y = -n.y;\n    vec3 col = pal(step_height / 2.0 + iTime, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,0.7,0.4),vec3(0.0,0.15,0.20) );\n    col = mix(saturate(-dot(n, ray_dir)) * col, fog, fog_factor);\n    frag_color = vec4(sRGB(col), 0.0);\n    return;\n  } \n}\n","name":"Image","description":"","type":"image"}]}