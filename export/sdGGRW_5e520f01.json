{"ver":"0.1","info":{"id":"sdGGRW","date":"1631242069","viewed":76,"name":"zooming into the stars","username":"HaleyHalcyon","description":"brdb","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["crrhr"],"hasliked":0,"parentid":"tlscz7","parentname":"inward spikes and slow rotation"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define HEX(x) vec3((ivec3(x) >> ivec3(16, 8, 0)) & 255) / 255.\nfloat smootherstep(float edge0, float edge1, float x) {\n  // Scale, and clamp x to 0..1 range\n  x = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n  // Evaluate polynomial\n  return x * x * x * (x * (x * 6. - 15.) + 10.);\n}\n\nfloat softsquare(float x) {\n    float x2 = abs(2. * fract(x) - 1.);\n    return smoothstep(0.1, 0.9, x2);\n}\n\nvec3 gradient(float r) {\n    float mix0 = smootherstep(0.00, 0.25, r);\n    float mix1 = smootherstep(0.25, 0.50, r);\n    float mix2 = smootherstep(0.50, 0.75, r);\n    float mix3 = smootherstep(0.75, 1.00, r);\n    \n    vec3 color0 = HEX(0x8000E8);\n    vec3 color1 = vec3(1.);\n    vec3 color2 = HEX(0xEB0072);\n    vec3 color3 = vec3(0.);\n    \n    return (\n        color0 * (mix0 - mix1) +\n        color1 * (mix1 - mix2) +\n        color2 * (mix2 - mix3) +\n        color3 * (mix3 - mix0 + 1.)\n    );\n}\n\nfloat spikes(float x) {\n    x = 1. - abs(sin(x));\n    return x * x;\n}\n\nfloat dither(float raw, vec2 pos) {\n    const float steps = 8.;\n    float grid = mod(pos.x+pos.y+1., 2.) + 0.5*mod(pos.x, 2.);\n    \n    return floor(raw * steps + 0.25 * grid) / steps;\n}\n\n// length of one loop. default 2.5\n#define LOOPLEN 8.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float time = fract(0.5 + iTime / LOOPLEN);\n    const float PI = 3.14159265;\n    float hue = time * 2. * PI;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    float scale = distance(iResolution.x, iResolution.y);\n    vec2 uv = fragCoord / scale;\n\tuv -= vec2(iResolution.x / scale, iResolution.y / scale) / 2.;\n    uv *= 2.0;\n    \n    float dist = log(uv.x*uv.x+uv.y*uv.y);\n    float angle = atan(uv.y, uv.x);\n    const float spokes = float(4) / 2.;\n    const float spokes2 = float(81) / 2.;\n    \n    float s1 = spikes(angle * spokes  + time * 2. * PI);\n    float s2 = spikes(angle * spokes2 - time * 2. * PI);\n    \n    vec3 color = gradient(\n    //    dither(\n        fract(\n        (2.8 * dist * cos(3.0 * (time - 0.5)))\n        + (3. * tan((time - 0.5) * 2.8))\n        \n        - 0.8 * s1\n        - 0.3 * s2\n        )\n    //    , fragCoord)\n    );\n    // Output to screen\n    fragColor = vec4(\n        color,\n        1\n    );\n}","name":"Image","description":"","type":"image"}]}