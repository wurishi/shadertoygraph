{"ver":"0.1","info":{"id":"MXXGWB","date":"1708483276","viewed":61,"name":"Translate - Orbit","username":"davidkimighty","description":"studying translate uv","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["orbit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEP 64\n#define MAX_DISTANCE 100.\n#define EPSILON 0.001\n\n#define L vec3(1., 0.7, 0.8)\n\nvec2 pos_1 = vec2(0);\nvec2 pos_2 = vec2(0);\nvec2 pos_3 = vec2(0);\nvec2 pos_4 = vec2(0);\n\nfloat circle(vec2 p, float r)\n{\n    return length(p)-r;\n}\n\nfloat map(vec2 pos)\n{\n    float c1 = circle(pos+pos_1, 0.1);\n    float c2 = circle(pos+pos_2, 0.05);\n    float c3 = circle(pos+pos_3, 0.2);\n    float c4 = circle(pos+pos_4, 0.03);\n    return min(min(c1, c2), min(c3, c4));\n}\n\nfloat raymarch(vec2 ro, vec2 rd)\n{\n    float td = 0.;\n    for (int i = 0; i < MAX_STEP; i++)\n    {\n        float d = map(ro+rd*td);\n        td += d*0.05;\n        if (td < EPSILON || td > MAX_DISTANCE) break;\n    }\n    td = smoothstep(EPSILON, 0.009, td/MAX_DISTANCE);\n    return td;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy) / iResolution.y;\n\n    vec2 ro = uv-vec2(0);\n    vec2 rd = uv-vec2(0);\n\n    pos_1 = uv+vec2(cos(-iTime*0.25), sin(-iTime*0.25))*1.5;\n    pos_2 = uv+vec2(cos(-iTime*0.15+1.), sin(-iTime*0.15+1.))*1.8;\n    pos_3 = uv+vec2(cos(iTime*0.05+2.), sin(iTime*0.05+2.))*3.;\n    pos_4 = uv+vec2(cos(iTime*0.16+3.), sin(iTime*0.16+3.))*2.1;\n    \n    float sun_size = pow(circle(rd, 0.), -5.)*0.01;\n    vec3 sun = L*smoothstep(-0.5, 7., sun_size);\n    \n    float dist = raymarch(ro, -rd);\n    float shadow = smoothstep(-1., 1.5, dist);\n    \n    vec3 planets = L*smoothstep(0., -0.05, circle(ro+pos_1, 0.19));\n    planets += L*smoothstep(0., -0.05, circle(ro+pos_2, 0.1));\n    planets += L*smoothstep(0., -0.05, circle(ro+pos_3, 0.24));\n    planets += L*smoothstep(0., -0.05, circle(ro+pos_4, 0.09));\n    \n    vec3 col = sun*shadow+planets;\n    float gamma = 2.2;\n    col = pow(col, vec3(1./gamma));\n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}