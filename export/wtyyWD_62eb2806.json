{"ver":"0.1","info":{"id":"wtyyWD","date":"1611020004","viewed":383,"name":"Hard exterior ","username":"Plento","description":"Experiment with triplanar mapping and raymarching.","likes":19,"published":3,"flags":0,"usePreview":0,"tags":["3d","triplanar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Cole Peterson\n\n#define R iResolution.xy\n#define m vec2(R.x/R.y*(iMouse.x/R.x-.5),iMouse.y/R.y-.5)\n#define ss(a, b, t) smoothstep(a, b, t)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n#define tex(chan, p) texture(chan, p)\n\n// Get color from triplanar map. Not sure if this is 100% correct?\nvec3 trimap(vec3 p, vec3 n){\n    vec3 yz = tex(iChannel0, p.yz).xyz;\n    vec3 xz = tex(iChannel0, p.xz).xyz;\n    vec3 xy = tex(iChannel0, p.xy).xyz;\n   \n    n /= (n.x + n.y + n.z);\n    return yz*n.x + xz*n.y + xy*n.z;\n}\n\n\nvoid trn(inout vec3 p){\n    p.xz *= rot(.5);\n}\n\n// value for morphing/ color\nfloat val(vec3 p){return .5 + .5*cos(length(p)*15. - (iTime*.75 + 2. ));  }\n\n\nfloat map(vec3 p){\n    float d = 999.;\n    vec3 n = normalize(p);\n    \n    trn(p);\n    trn(n);\n    \n    float h = trimap((p+iTime*.2)*.26, abs(n)).x;\n    float r = 1. + h *.7;\n    \n    float dis = length(p)-r;\n    float reg = length(p)-1.;\n    \n    d = mix(dis, reg, val(p));\n    \n    return d;\n}\n\n\nvec3 normal( in vec3 pos ){\n    vec2 e = vec2(0.002, -0.002);\n    return normalize(\n        e.xyy * map(pos + e.xyy) + \n        e.yyx * map(pos + e.yyx) + \n        e.yxy * map(pos + e.yxy) + \n        e.xxx * map(pos + e.xxx));\n}\n\nconst float pi = 3.14159;\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    vec3 rd = normalize(vec3(uv, 1.));\n    vec3 ro = vec3(0., .0, -3.1);\n    \n    \n    float d = 0.0, t = 0.0, ns = 0.;\n    \n    for(int i = 0; i < 64; i++){\n    \td = map(ro + rd*t); \n        \n        if(d < 0.001 || t > 100.) break;\n        t += d * .5;\n        ns++;\n    }\n    \n    vec3 p = ro + rd*t;\n    vec3 n = normal(p);\n    \n    vec3 lp = vec3(-0.5, 0.5, -3.);\n    vec3 ld = normalize(lp-p);\n    \n    float dd = length(p - lp);\n    float fal = 3.5 / (dd*dd);\n    float dif = max(dot(n, ld), .01);\n    float spec = pow(max(dot( reflect(-ld, n), -rd), 0.), 23.);\n    \n    trn(p);\n    \n    vec3 ref = reflect(rd, n);\n    vec3 cm = tex(iChannel1, ref).xyz;\n    vec3 mm = .5+.5*cos(vec3(1., 2., 3.0)*(iTime-2.)*.08+vec3(4., .8, .4));\n    vec3 mat = mix(cm*.7, mm*2.8, val(p)*0.1);\n    \n    vec3 col = mat * dif * fal;\n    col += spec * vec3(.9, .7, .7)*.5;\n    \n    col *= max(ss(25., 8., ns), .06);\n    col = mix(vec3(.01)*abs(u/R).y, col, exp(-t*t*t*.001));\n    \n    f = vec4(pow(max(col, 0.), vec3(1./2.2)), 1);\n}\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}