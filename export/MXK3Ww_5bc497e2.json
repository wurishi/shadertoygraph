{"ver":"0.1","info":{"id":"MXK3Ww","date":"1717750058","viewed":55,"name":"rotator triangle","username":"nnew","description":"from you are? combination shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["triangle","rotate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n#define PARTICLE_NUMBER 80.\n\nfloat grow(vec2 uv,float growWidth,float filmWidth){\n    //发光效果的本质是定义了一个矩形，矩形内通过x和y的坐标去进行渐变\n    if(abs(uv.y) > growWidth)return 0.;\n    float y = uv.y / growWidth;\n    float d = abs(uv.x / filmWidth);\n    return sqrt(1. - y * y) / (d) * .1;\n}\nfloat star(vec2 uv,float growWidth,float filmWidth){\n    //通过旋转矩阵去生成其他两条光带 +-60度\n    //二维矩阵\n    vec2 rotUV1 = mat2(\n        cos(PI / 3.),-sin(PI / 3.),\n        sin(PI / 3.),cos(PI / 3.)\n    ) * uv;\n    vec2 rotUV2 = mat2(\n        cos(PI / 3.),sin(PI / 3.),\n        -sin(PI / 3.),cos(PI / 3.)\n    ) * uv;\n    return grow(uv,growWidth,filmWidth) + grow(rotUV1,growWidth,filmWidth) +grow(rotUV2,growWidth,filmWidth) ;\n}\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n#define time iTime\n#define resolution iResolution.xy\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nfloat map(vec2 p, float r) {\nreturn length(p) - r;\n}\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    vec2 uv = fragCoord / iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\nfloat t2 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\nfloat si = sin(t2);\nfloat co = cos(t2);\nmat2 ma = mat2(co, si, -si, co);\n    uv*=ma;\n    vec2 p =   (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y)*6.;\nfloat d = 0.5;\np.xy*=ma;\nfor (int i = 0; i < 4; i++) {\nd = min(d, map(p, 1.0));\n       \np *= rot(time / 4.0);\np = abs(p) * 2.5 - 5.0;\n}\n\nd = min(d, map(p, 4.0));\n\n\n    float t = iTime;\n\n    vec3 color = vec3(0.);\n    for(float i = 0.; i < PARTICLE_NUMBER; i+=1.){\n        float t = i / PARTICLE_NUMBER;\n        float a = t * 2. * PI + iTime * .1;\n        //定义环形的方法（数学真伟大）\n        vec3 pos=vec3(\n            sin(a)+2.0*sin(2.0*a),\n            cos(a)-2.0*cos(2.0*a),\n            -sin(3.0*a))*0.01;\n        float a1 = .1 * iTime;\n\n        //整体再旋转\n        pos.xy *= mat2(\n            cos(a1),-sin(a1),\n            sin(a1),cos(a1)\n        ) * 30.;\n       \n       //简单加一下颜色，毕竟只白色还是差点意思\n        color += star(uv + pos.xy,.02,.3) * abs(vec3(\n            sin(i + .123),sin(i + .412),sin(i + .789)\n        ));\n    }\n    fragColor = vec4(color,1.);\n    fragColor*= vec4((d * 2.0, d * d, d)+vec3(2.,3.,1.), 1);\n}\n\n\n","name":"Image","description":"","type":"image"}]}