{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define PI 3.1415927\n\n\nconst mat4 oppm = mat4(1.0, 0.0,  0.0, 1.0, \n                 0.0, 1.0,  0.0, 1.0,\n                 0.0, 0.0, -1.0, 1.0,\n                 1.0, 1.0,  1.0, 1.0);   \nconst mat4 dppm = mat4(0.75, 0.5, 0.5, 0.625, \n                 0.5,  1.0, 0.0, 0.5, \n                 0.0,  0.0, 0.0, 1.0,\n                 1.0,  1.0, 1.0, 1.0);\nconst mat4 dppmi = inverse(dppm);\nconst mat4 tppm = dppmi * oppm;\n\nconst mat4 oppp = mat4(1.0, 0.0, 0.0, 1.0, \n                       0.0, 1.0, 0.0, 1.0,\n                       0.0, 0.0, 1.0, 1.0,\n                       1.0, 1.0, 1.0, 1.0);   \nconst mat4 dppp = mat4(0.75, 0.5, 1.0, 0.625, \n                       0.5,  1.0, 1.0, 0.5, \n                       0.0,  0.0, 0.0, 1.0,\n                       1.0,  1.0, 1.0, 1.0);\nconst mat4 dpppi = inverse(dppp);\nconst mat4 tppp = dpppi * oppp;\n\nconst mat4 ompm = mat4(-1.0, 0.0,  0.0, 1.0, \n                        0.0, 1.0,  0.0, 1.0,\n                        0.0, 0.0, -1.0, 1.0,\n                        1.0, 1.0,  1.0, 1.0);   \nconst mat4 dmpm = mat4(0.25, 0.5, 0.5, 0.375, \n                       0.5,  1.0, 0.0, 0.5, \n                       0.0,  0.0, 0.0, 1.0,\n                       1.0,  1.0, 1.0, 1.0);\nconst mat4 dmpmi = inverse(dmpm);\nconst mat4 tmpm = dmpmi * ompm;\n\nconst mat4 ompp = mat4(-1.0, 0.0, 0.0, 1.0, \n                        0.0, 1.0, 0.0, 1.0,\n                        0.0, 0.0, 1.0, 1.0,\n                        1.0, 1.0, 1.0, 1.0);   \nconst mat4 dmpp = mat4(0.25, 0.5, 0.0, 0.25, \n                       0.5,  1.0, 1.0, 0.75, \n                       0.0,  0.0, 0.0, 1.0,\n                       1.0,  1.0, 1.0, 1.0);\nconst mat4 dmppi = inverse(dmpp);\nconst mat4 tmpp = dmppi * ompp;\n\nconst mat4 ommp = mat4(-1.0,  0.0, 0.0, 1.0, \n                        0.0, -1.0, 0.0, 1.0,\n                        0.0,  0.0, 1.0, 1.0,\n                        1.0,  1.0, 1.0, 1.0);   \nconst mat4 dmmp = mat4(0.25, 0.0, 0.0, 0.125, \n                       0.5,  0.0, 1.0, 0.5, \n                       0.0,  0.0, 0.0, 1.0,\n                       1.0,  1.0, 1.0, 1.0);\nconst mat4 dmmpi = inverse(dmmp);\nconst mat4 tmmp = dmmpi * ommp;\n\nconst mat4 ommm = mat4(-1.0,  0.0,  0.0, 1.0, \n                        0.0, -1.0,  0.0, 1.0,\n                        0.0,  0.0, -1.0, 1.0,\n                        1.0,  1.0,  1.0, 1.0);   \nconst mat4 dmmm = mat4(0.25, 0.0, 0.5, 0.25, \n                       0.5,  0.0, 0.0, 0.25, \n                       0.0,  0.0, 0.0, 1.0,\n                       1.0,  1.0, 1.0, 1.0);\nconst mat4 dmmmi = inverse(dmmm);\nconst mat4 tmmm = dmmmi * ommm;\n\nconst mat4 opmm = mat4(1.0,  0.0,  0.0, 1.0, \n                       0.0, -1.0,  0.0, 1.0,\n                       0.0,  0.0, -1.0, 1.0,\n                       1.0,  1.0,  1.0, 1.0);   \nconst mat4 dpmm = mat4(0.75, 1.0, 0.5, 0.75, \n                       0.5,  0.0, 0.0, 0.25, \n                       0.0,  0.0, 0.0, 1.0,\n                       1.0,  1.0, 1.0, 1.0);\nconst mat4 dpmmi = inverse(dpmm);\nconst mat4 tpmm = dpmmi * opmm;\n\nconst mat4 opmp = mat4(1.0,  0.0, 0.0, 1.0, \n                       0.0, -1.0, 0.0, 1.0,\n                       0.0,  0.0, 1.0, 1.0,\n                       1.0,  1.0, 1.0, 1.0);   \nconst mat4 dpmp = mat4(0.75, 1.0, 1.0, 0.875, \n                       0.5,  0.0, 1.0, 0.5, \n                       0.0,  0.0, 0.0, 1.0,\n                       1.0,  1.0, 1.0, 1.0);\nconst mat4 dpmpi = inverse(dpmp);\nconst mat4 tpmp = dpmpi * opmp;\n\n\nvec3 S3fromUV(in vec2 uv) {\n  vec2 st = vec2(2.0, 1.0) * uv + vec2(-1.0, 0.0);\n  float pl = st.x + st.y;\n  float mi = st.x - st.y;\n  if (st.x > 0.0) {\n    if (pl > 1.0) {\n      if (mi < 0.0) {\n        // + + + octant\n        return normalize((vec4(uv, 0.0, 1.0) * tppp).xyz);\n      } else {\n        // + - + octant\n        return normalize((vec4(uv, 0.0, 1.0) * tpmp).xyz);\n      }\n    } else {\n      if (mi < 0.0) {\n         // + + - octant\n        return normalize((vec4(uv, 0.0, 1.0) * tppm).xyz);\n      } else {\n         // + - - octant\n        return normalize((vec4(uv, 0.0, 1.0) * tpmm).xyz);\n      }\n    }\n  } else {\n    if (pl > 0.0) {\n      if (mi < -1.0) {\n        // - + + octant\n        return normalize((vec4(uv, 0.0, 1.0) * tmpp).xyz);\n      } else {\n        // - + - octant\n        return normalize((vec4(uv, 0.0, 1.0) * tmpm).xyz);\n      }\n      \n    } else {\n      if (mi > -1.0) {\n        // - - - octant\n        return normalize((vec4(uv, 0.0, 1.0) * tmmm).xyz);\n      } else {\n        // - - + octant\n        return normalize((vec4(uv, 0.0, 1.0) * tmmp).xyz);\n      }\n    }\n  }\n  return normalize(vec3(st, 0.5));\n}\n\n\nfloat pill(in vec3 a, in vec3 b, in vec3 x) {\n  vec3 xa = x-a;\n  if (a == b) {\n    return length(xa);\n  }\n  vec3 ba = b-a;\n  vec3 dir = normalize(ba);\n  float proj = dot(xa, dir);\n  if (proj <= 0.0) {\n    return length(xa);\n  } else if (proj >= length(b-a)) {\n    return length(x-b);\n  } else {\n    vec3 p = normalize(a + proj * dir);\n    return length(x-p);\n  }\n}\n\nvec3 background(in vec3 xyz) {\n  vec3 sky = 0.5 + 0.5* xyz;\n  if (xyz.y < 0.0) {\n    float a = xyz.y + 0.1 * sin(xyz.y * 100.0);\n    return \n      mix(vec3(0.5, 0.5, 1.0), vec3(0.1, 0.3, 1.0), a)\n      + 0.5 * sky;\n  }\n  float h = 0.2 * (1.0 + sin(xyz.x * 12.0 + 64.0) * cos(xyz.z * 27.0 + 31.0));\n  if (xyz.y < h) {\n    float a = xyz.y + 0.01 * sin(xyz.y * 100.0);\n    return mix(vec3(0.3, 0.2, 0.1), vec3(1.0, 1.0, 1.0), 2.0 * a);\n  }\n  return sky;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 xyz = S3fromUV(uv);\n    vec3 col = background(xyz);\n    \n    vec2 mxy1 = iMouse.xy / iResolution.xy;\n    vec2 mxy2 = abs(iMouse.zw) / iResolution.xy;\n    \n    if( iMouse.z <= 0.0 )  {\n      mxy1 = vec2(0.5 * sin(iTime) + 0.5, 0.5 * cos(iTime * 1.938) + 0.5);\n      mxy2 = vec2(0.5 * sin(iTime - 0.1) + 0.5, 0.5 * cos((iTime - 0.1) * 1.938) + 0.5);;\n    }\n    \n    if (length(mxy1 - uv) < 0.01) {\n      fragColor = vec4(1.0, 0.2, 0.2, 1.0);\n      return;\n    }\n    if (length(mxy2 - uv) < 0.01) {\n      fragColor = vec4(0.2, 0.2, 1.0, 1.0);\n      return;\n    }\n    \n    \n    vec3 mxyz1 = S3fromUV(mxy1);\n    vec3 mxyz2 = S3fromUV(mxy2);\n    \n    \n    float d = pill(mxyz1, mxyz2, xyz);\n    float intensity = smoothstep(0.20, 0.125, d);\n    col = max(col, vec3(intensity));\n   \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"csGGDW","date":"1678564866","viewed":38,"name":"S3 Painting - Octohedron","username":"mattdeeds","description":"The canvas represents a octohedral stereographic mapping of a sphere.  Click to draw a circle on the sphere.  Area is roughly constant, but angles are not preserved. The octohedral mapping is very cheap to compute.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["paint","skysphere"],"hasliked":0,"parentid":"dt2SRz","parentname":"S3 Painting - Stereographic"}}