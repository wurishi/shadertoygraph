{"ver":"0.1","info":{"id":"7l2cWW","date":"1649735303","viewed":161,"name":"Soft min test","username":"pdcxs","description":"just for study","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","softmin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA 3\n#define PRECISION .0001\n#define MAX_DIST 20.\n#define MIN_DIST .01\n#define MAX_ITER 128\n\nvec2 fixUV(in vec2 uv) {\n    return (2. * uv - iResolution.xy) / iResolution.y;\n}\n\nfloat sdfSphere(in vec3 p, in float r) {\n    return length(p) - r;\n}\n\nfloat sdfPlane(in vec3 p) {\n    return p.y;\n}\n\n// https://iquilezles.org/articles/smin\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat map(in vec3 p) {\n    float d = sdfSphere(p - vec3(0., 1., 0.), 1.);\n    d = smin(d, sdfPlane(p), 1. + 0.5 * sin(0.57 * iTime));\n    return d;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * map(p + k.xyy * h) +\n        k.yyx * map(p + k.yyx * h) +\n        k.yxy * map(p + k.yxy * h) +\n        k.xxx * map(p + k.xxx * h));\n}\n\nfloat rayMarch(in vec3 ro, in vec3 rd) {\n    float t = MIN_DIST;\n    for(int i = 0; i < MAX_ITER && t < MAX_DIST; i++) {\n        vec3 p = ro + t * rd;\n        float d = map(p);\n        if(d < PRECISION) {\n            break;\n        }\n        t += d;\n    }\n    return t;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(in vec3 ro, in vec3 rd, float k) {\n    float res = 1.0;\n    float ph = 1e20;\n    for(float t = MIN_DIST; t < MAX_DIST;) {\n        float h = map(ro + rd * t);\n        if(h < PRECISION)\n            return 0.0;\n        float y = h * h / (2.0 * ph);\n        float d = sqrt(h * h - y * y);\n        res = min(res, k * d / max(0.0, t - y));\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\nmat3 setCamera(vec3 ta, vec3 ro, float cr) {\n    vec3 z = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.);\n    vec3 x = normalize(cross(z, cp));\n    vec3 y = cross(x, z);\n    return mat3(x, y, z);\n}\n\n// https://iquilezles.org/articles/nvscene2008/rwwtt.pdf\nfloat calcAO(vec3 p, vec3 n) {\n    float occ = 0.0;\n    float sca = 1.0;\n    for(float i = 0.; i < 5.; i += 1.) {\n        float h = 0.01 + 0.03 * i;\n        float d = map(p + n * h);\n        occ += (h - d) * sca;\n        sca *= 0.95;\n        if(occ > 0.35)\n            break;\n    }\n    return clamp(1. - 3. * occ, 0., 1.) * (.5 + .5 * n.y);\n}\n\nvec3 render(in vec2 uv) {\n    vec3 color = vec3(0.);\n\n    // set camera\n    vec3 target = vec3(0.);\n    float camHigh = 2.;\n    float camRad = 2.5;\n    vec3 camLoc = vec3(camRad * cos(0.2 * iTime), camHigh, camRad * sin(0.2 * iTime));\n    mat3 camMat = setCamera(target, camLoc, 0.);\n\n    // calc rayMarching\n    vec3 rd = normalize(camMat * vec3(uv, 1.));\n    float t = rayMarch(camLoc, rd);\n\n    // set light\n    vec3 lightLoc = vec3(3., 5., 0.);\n    vec3 lightColor = vec3(1.);\n    vec3 ambColor = vec3(0.23);\n\n    if(t < MAX_DIST) {\n        // calc light\n        vec3 p = camLoc + rd * t;\n        vec3 n = calcNormal(p);\n        vec3 ambDirect = vec3(0., 1., 0.);\n        float dif = clamp(dot(normalize(lightLoc - p), n), 0., 1.);\n        float amb = 0.5 + 0.5 * dot(n, normalize(ambDirect));\n\n        // calc shadow\n        float shadow = softshadow(p, normalize(lightLoc - p), 7.);\n        color = amb * ambColor + dif * lightColor * shadow;\n\n        // calc AO\n        float ao = calcAO(p, n);\n        color *= ao;\n    }\n\n    return sqrt(color);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 col = vec3(0.);\n\n    for(int x = 0; x < AA; x++) {\n        for(int y = 0; y < AA; y++) {\n            vec2 offset = vec2(float(x) / float(AA) - .5, float(y) / float(AA) - .5);\n            col += render(fixUV(fragCoord + offset));\n        }\n    }\n    col /= float(AA * AA);\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}