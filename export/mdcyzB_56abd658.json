{"ver":"0.1","info":{"id":"mdcyzB","date":"1695181784","viewed":28,"name":"cubo XYZ","username":"chaoticgenious","description":"just a cube","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalizar las coordenadas\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Configurar una perspectiva 3D sencilla\n    vec3 ro = vec3(0.0, 0.0, -5.0); // Punto de vista\n    vec3 ta = vec3(0.0); // Punto de objetivo\n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(vec3(0.0, 1.0, 0.0), ww));\n    vec3 vv = normalize(cross(ww, uu));\n    vec3 rd = normalize(uv.x*uu + uv.y*vv + 1.5*ww);\n\n    // Rotación del cubo en 3D\n    float ang = iTime;\n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, cos(ang), -sin(ang), 0.0, sin(ang), cos(ang));\n    mat3 rotY = mat3(cos(ang), 0.0, sin(ang), 0.0, 1.0, 0.0, -sin(ang), 0.0, cos(ang));\n    mat3 rot = rotX * rotY;\n\n    // Dibujar un cubo giratorio más grande\n    vec3 col = vec3(0.0);\n    vec3 p = ro;\n    for(int i = 0; i < 64; ++i)\n    {\n        p += 0.1 * rd;\n        vec3 q = rot * p * 1.2;\n        float d = length(max(abs(q) - 0.7, 0.0));\n        if(d < 0.01)\n        {\n            col = vec3(0.5 + 0.5 * sin(iTime), 0.5 + 0.5 * sin(iTime + 2.0), 0.5 + 0.5 * cos(iTime));\n            break;\n        }\n    }\n\n    // Plano moviéndose de derecha a izquierda\n    float plane = mod(p.y + iTime, 1.0) - 0.5;\n    col += max(0.0, -plane);\n\n    // Líneas de fondo en 3 capas\n    col += 0.1 * sin(10.0 * uv.y + iTime);\n    col += 0.1 * sin(20.0 * uv.y + 2.0 * iTime) * vec3(1.0, 0.0, 0.0);\n    col += 0.1 * sin(30.0 * uv.y + 3.0 * iTime) * vec3(0.0, 1.0, 0.0);\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}