{"ver":"0.1","info":{"id":"Ns2Bzm","date":"1645967730","viewed":121,"name":"Base Cartesian","username":"glaudiston","description":"This sample target to define and use the screen as a cartesian coord. \nI am learning from ArtOfCode youtube videos so don't expect too much.\n\nRef:\nhttps://www.youtube.com/watch?v=u5HAYVHsasc\nhttps://www.youtube.com/watch?v=GgGBR4z8C9o","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["artofcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 Circle(vec2 uv, vec2 p, float r, float blur)\n{\n    uv -= p;\n    float d = length(uv);\n    float c = smoothstep( r, r-blur, d);\n    \n    return vec4(vec3(c),c);\n}\n\nvec4 DrawSquare(vec2 uv, vec4 pos, float blur)\n{\n    float s = \n        (\n        // left line\n        smoothstep( pos.x-blur, pos.x, uv.x )-\n        // right line\n        smoothstep( pos.z, pos.z+blur, uv.x )\n        ) * (\n        // top line\n        smoothstep( pos.y-blur, pos.y, uv.y )-\n        // bottom line\n        smoothstep( pos.w, pos.w+blur, uv.y )\n        );\n    return vec4(vec3(s), s);\n}\n\nvec4 DrawCartesian(vec2 uv)\n{\n    float vx,vy;\n    float ls = .28125;\n    float lx = iResolution.x * ls;\n    float ly = iResolution.y * ls;\n    if ( round(uv.x * lx) == .0) vx = .3; else vx = 0.;\n    if ( round(uv.y * ly) == .0) vy = .3; else vy = 0.;\n    \n    return vec4(vec3(vx+vy), 1.);\n}\n\nvec4 Smiley(vec2 uv, vec2 pos, float size)\n{\n    uv -= pos;\n    uv /= size;\n\n    vec4 body = Circle(uv, vec2(0.), 0.4, 0.05);\n    vec4 mouth = \n        -Circle(uv, vec2(.00,-.06), 0.23, 0.02)\n        +Circle(uv, vec2(.00,-.01), 0.23, 0.02);\n    \n    vec4 leftEye = -Circle(uv, vec2(-.13,.12), 0.07, 0.02);\n    vec4 rightEye = -Circle(uv, vec2(.13,.12), 0.07, 0.02);\n\n    body += mouth;\n    body = min(body, 1.);\n    body += leftEye;\n    body += rightEye;\n\n    return vec4(vec3(1.,1.,0.) * vec3(body), body);\n}\n\nvec2 setCartesianCoordinates(vec2 fragCoord)\n{\n    // Premises: horizontal screen\n    // Normalized cartesian coordinates from y=-1 to 1\n    vec2 uv = (fragCoord/iResolution.xy - 0.5);\n    uv.x *= (iResolution.x/iResolution.y) * 2.;\n    uv.y *= 2.;\n    return uv;\n}\n\nvec4 getCartesianMouse()\n{\n    // Wrap mouse into screen cartesian coords\n    vec4 m = iMouse;\n    m.y = ((m.y / iResolution.y ) -.5 ) *2.;\n    m.x = ((m.x / iResolution.x * (iResolution.x / iResolution.y) ) -.5 ) *2.;\n    float offSetXY = 1.-(iResolution.x / iResolution.y);\n    m.x += offSetXY;\n    return m;\n}\n\nfloat remap(vec2 refRange, vec2 targetRange, float revVal){\n    return (revVal-refRange.x) / (refRange.y-refRange.x) * (targetRange.y-targetRange.x) + targetRange.x;\n}\n\nvec4 smoke(vec2 uv, vec4 m) {\n    uv.y += sin(uv.x * 8. - iTime) *.1;\n    float blur = remap(vec2(-.9, m.x), vec2(.01, 1.), uv.x );\n    vec3 b = vec3(DrawSquare(uv, vec4(-.9, 0., m.x , m.y), blur));\n    vec4 box = vec4(b, b.x);\n    return box;\n}\n\nvec4 draw0(vec2 uv, vec2 pos, float blur){\n    return DrawSquare(uv, vec4(pos.x, pos.y, pos.x+.3, pos.y+.3), blur) -\n           DrawSquare(uv, vec4(pos.x+.1, pos.y+.1, pos.x+.2, pos.y+.2), blur);\n}\nvec4 draw1(vec2 uv, vec2 pos, float blur){\n    return DrawSquare(uv, vec4(pos.x, pos.y, pos.x+.3, pos.y+.3), blur) \n          - DrawSquare(uv, vec4(pos.x, pos.y+.1, pos.x+.1, pos.y+.2), blur)\n          - DrawSquare(uv, vec4(pos.x+.2, pos.y+.1, pos.x+.3, pos.y+.3), blur);\n}\nvec4 draw2(vec2 uv, vec2 pos, float blur){\n    return DrawSquare(uv, vec4(pos.x, pos.y, pos.x+.3, pos.y+.3), blur) \n          - DrawSquare(uv, vec4(pos.x, pos.y+.175, pos.x+.15, pos.y+.225), blur)\n          - DrawSquare(uv, vec4(pos.x+.15, pos.y+.05, pos.x+.3, pos.y+.1), blur);\n}\nvec4 draw3(vec2 uv, vec2 pos, float blur){\n    return DrawSquare(uv, vec4(pos.x, pos.y, pos.x+.3, pos.y+.3), blur) \n          - DrawSquare(uv, vec4(pos.x, pos.y+.175, pos.x+.15, pos.y+.225), blur)\n          - DrawSquare(uv, vec4(pos.x, pos.y+.05, pos.x+.15, pos.y+.1), blur);\n}\nvec4 draw4(vec2 uv, vec2 pos, float blur){\n    return DrawSquare(uv, vec4(pos.x, pos.y, pos.x+.3, pos.y+.3), blur) \n          - DrawSquare(uv, vec4(pos.x+.1, pos.y+.2, pos.x+.2, pos.y+.3), blur)\n          - DrawSquare(uv, vec4(pos.x, pos.y, pos.x+.15, pos.y+.1), blur);\n}\nvec4 draw5(vec2 uv, vec2 pos, float blur){\n    return DrawSquare(uv, vec4(pos.x, pos.y, pos.x+.3, pos.y+.3), blur) \n          - DrawSquare(uv, vec4(pos.x+.15, pos.y+.175, pos.x+.3, pos.y+.225), blur)\n          - DrawSquare(uv, vec4(pos.x, pos.y+.05, pos.x+.15, pos.y+.1), blur);\n}\nvec4 draw6(vec2 uv, vec2 pos, float blur){\n    return DrawSquare(uv, vec4(pos.x, pos.y, pos.x+.3, pos.y+.3), blur) \n          - DrawSquare(uv, vec4(pos.x+.1, pos.y+.2, pos.x+.3, pos.y+.3), blur)\n          - DrawSquare(uv, vec4(pos.x+.1, pos.y+.075, pos.x+.2, pos.y+.1), blur);\n}\nvec4 draw7(vec2 uv, vec2 pos, float blur){\n    return DrawSquare(uv, vec4(pos.x, pos.y, pos.x+.3, pos.y+.3), blur) \n          - DrawSquare(uv, vec4(pos.x, pos.y, pos.x+.2, pos.y+.2), blur);\n}\nvec4 draw8(vec2 uv, vec2 pos, float blur){\n    return DrawSquare(uv, vec4(pos.x, pos.y, pos.x+.3, pos.y+.3), blur) \n          - DrawSquare(uv, vec4(pos.x+.1, pos.y+.2, pos.x+.2, pos.y+.25), blur)\n          - DrawSquare(uv, vec4(pos.x+.1, pos.y+.05, pos.x+.2, pos.y+.1), blur);\n}\nvec4 draw9(vec2 uv, vec2 pos, float blur){\n    return DrawSquare(uv, vec4(pos.x, pos.y, pos.x+.3, pos.y+.3), blur) \n          - DrawSquare(uv, vec4(pos.x+.1, pos.y+.2, pos.x+.2, pos.y+.25), blur)\n          - DrawSquare(uv, vec4(pos.x, pos.y, pos.x+.15, pos.y+.1), blur);\n}\n\n\nvec4 drawDigit(vec2 uv, vec2 pos, int iv, float blur){\n    vec4 s;\n    switch (iv){\n    case 0: s = draw0(uv, pos, blur);\n        break;\n    case 1: s = draw1(uv, pos, blur);\n        break;\n    case 2: s = draw2(uv, pos, blur);\n        break;\n    case 3: s = draw3(uv, pos, blur);\n        break;\n    case 4: s = draw4(uv, pos, blur);\n        break;\n    case 5: s = draw5(uv, pos, blur);\n        break;\n    case 6: s = draw6(uv, pos, blur);\n        break;\n    case 7: s = draw7(uv, pos, blur);\n        break;\n    case 8: s = draw8(uv, pos, blur);\n        break;\n    case 9: s = draw9(uv, pos, blur);\n        break;\n    }\n    \n    return s;\n}\n\nvec4 drawDecimalDigits(vec2 uv, vec2 pos, float v, float digitWidth, float digitPos, int iv, float blur){\n    vec4 s;\n    uv /=.9;\n    pos /= .9;\n    pos.x +=.1;\n    iv = int(v*10.);\n    s += drawDigit(uv, vec2(pos.x+digitWidth*digitPos++, pos.y), abs(iv), blur);\n    v -= float(iv) / 10.;\n    \n    iv = abs(int(v*100.));\n    if ( iv > 0 ) {\n        uv /=.9;\n        pos /= .9;\n        pos.x +=.1;\n        s += drawDigit(uv, vec2(pos.x+digitWidth*digitPos++, pos.y), abs(iv), blur);\n        // I don't know why I can't just use the bellow line, it fails to compile without report the reason.\n        // I do think it's because some recursive limitation;\n        // s += drawDecimalDigits(uv, pos, v, digitWidth, digitPos, iv, blur);\n    }\n    return s;\n}\n\nvec4 drawNumber(vec2 uv, vec2 pos, float v, float blur){\n    float digitWidth = .35;\n    float digitPos = 0.;\n    uv /= .4;\n    pos /= .4;\n    vec4 s;\n    // draw negative signal\n    if ( v < 0. ) {\n        s += DrawSquare(uv, vec4(pos.x-.2, pos.y+.15, pos.x-.1, pos.y+.2), blur);\n    }\n    // draw integer digits (for now only supports 1 int dig)\n    int iv = int(v);\n    s += drawDigit(uv, vec2(pos.x+digitWidth*digitPos++, pos.y), abs(iv), blur);\n    v -= float(iv);\n    // draw dot\n    s += DrawSquare(uv, vec4(pos.x+digitWidth, pos.y, pos.x+digitWidth+.1, pos.y+.1), blur);\n    digitPos++;\n    pos.x -= .22;\n    // draw 2 decimal digits\n    s += drawDecimalDigits(uv, pos, v, digitWidth, digitPos, iv, blur);\n    return s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = setCartesianCoordinates(fragCoord);\n    vec4 m = getCartesianMouse();\n    \n    vec4 grid = DrawCartesian(uv);\n    vec4 smiley = Smiley(uv, vec2(m.x,m.y), .5);\n\n    vec4 mask = grid;\n    vec4 smoke = smoke(uv, m);\n    vec4 printMousePosX = drawNumber(uv, vec2(m.x-.5,m.y), m.x, .03);\n    vec4 printMousePosY = drawNumber(uv, vec2(m.x+.2,m.y), m.y, .03);\n    \n    mask = mix(mask, smoke, smoke.a);\n    mask = mix(mask, smiley, smiley.a);\n    mask = mix(mask, printMousePosX, printMousePosX.a);\n    mask = mix(mask, printMousePosY, printMousePosY.a);\n    fragColor = mask;\n}","name":"Image","description":"","type":"image"}]}