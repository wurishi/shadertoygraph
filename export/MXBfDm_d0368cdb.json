{"ver":"0.1","info":{"id":"MXBfDm","date":"1731619013","viewed":29,"name":"raymarchedScene","username":"TheSwaGiraffe","description":"raymarched scene with anaglyph affect. Mouse interactive","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    this is a great video on raymarching go check it out\n    https://www.youtube.com/watch?v=khblXafu7iA&t=122s\n*/\nconst float e = 2.7182818284590452353602874713527;\nvec3 pickColor(float d1, float d2, vec3 c1, vec3 c2, float gradient)\n{\n    return mix(c1, c2, clamp((d1 - d2)/gradient, 0., 1.));\n}\nfloat degtorad = 0.01745329251;\nvec3 rgb(int r, int g, int b)\n{\n    return vec3(r,g,b)/255.;\n}\nvec4 rgba(int r, int g, int b, float a)\n{\n    return vec4(r, g, b, a * 255.)/255.;\n}\nmat2 rot2D(float a) {\n\tfloat c = cos(a), s = sin(a);\n\treturn mat2(c,s,-s,c);\n}\n\nvec3 shade(vec3 normal, vec3 lightDir, vec3 surfCol, vec3 ambient)\n{\n    float diffuse = max(0., dot(normal, -lightDir));\n    return surfCol * (clamp(vec3(diffuse) + ambient, 0., 1.));\n}\nvec3 camPos = vec3(0., 1.5, -4.5);\nfloat focalLength = 1.;\nfloat smin(float a, float b, float k)\n{\n    float h = max(k-abs(a-b), 0.)/k;\n    return min(a, b) - h*h*h*k*(1./6.);\n}\n\nfloat smax( float a, float b, float k ) {\n    float h = max( k-abs(a-b), 0.0 )/k;\n\treturn max( a, b ) + h*h*k*(1./4.);\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.)) + min(max(q.x,max(q.y,q.z)),0.);\n}\nfloat Sphere(vec3 p){return length(p + vec3(0,sin(-iTime) * 1.25,0)) -.5;}\nfloat Box(vec3 p){return smax(sdBox(p, vec3(.75)), -(length(p) - .75), .5);}\nfloat Ground(vec3 p){\n    return p.y + .75 + sin(length(p.xz) - iTime);\n}\nfloat sceneSDF(vec3 p)\n{\n    float sphere = Sphere(p);\n    float box = Box(p);\n    float ground = Ground(p);\n    return smin(smin(box, sphere, .5), ground, .2);\n}\nvec3 getnorm(vec3 p)\n{\n    vec3 q = ceil(p*75.)/75.;\n    vec2 eps = vec2(0.001,0.);\n    vec3 norm = normalize(sceneSDF(p)-vec3(sceneSDF(p-eps.xyy),sceneSDF(p-eps.yxy),sceneSDF(p-eps.yyx)));\n    return norm;\n}\nfloat march(vec3 ro, vec3 rd)\n{\n    vec3 p = ro + rd;\n    return sceneSDF(p);\n}\nvec3 image(vec2 fragCoord, float offset)\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)/ iResolution.y;\n    vec3 rd = normalize(vec3(uv, focalLength));\n    rd.yz *= rot2D(-iMouse.y/iResolution.y);\n    rd.xz *= rot2D(iTime);\n    float totalDist = 0.;\n    vec3 ro = camPos - offset;\n    ro.yz *= rot2D(-iMouse.y/iResolution.y);\n    ro.xz *= rot2D(iTime);\n    //march\n    for(int i = 0; i < 1000; i++){\n        float dist = march(ro, rd * totalDist);\n        totalDist += dist;\n        if(totalDist > 1000. || dist < .01){break;}\n    }\n    if(totalDist > 1000.){return rgb(0, 225, 255);}\n    //take distance and turn it into a grayscale color\n    vec3 p = ro + rd * totalDist;\n    vec3 col = vec3(pow(totalDist, .25) -1.5)/1.5;\n    vec3 lightDir = vec3(1,-1, 1);\n    vec3 sCol = pickColor(Ground(p), smin(Box(p), Sphere(p), .5), vec3(.3,.5,texture(iChannel0, p.xz / 10.).r), pickColor(Box(p), Sphere(p), rgb(255,165,0), rgb(255,0,255), 1.5), .2);\n    col = (shade(getnorm(p), lightDir, sCol, vec3(.25)));\n    // Output to screen\n    return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    float offset = iMouse.x/iResolution.x - .5;\n    fragColor = vec4(image(fragCoord, offset).r, image(fragCoord, -offset).gb, 1.);\n}\n","name":"Image","description":"","type":"image"}]}