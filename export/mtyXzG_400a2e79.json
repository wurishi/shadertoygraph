{"ver":"0.1","info":{"id":"mtyXzG","date":"1686163883","viewed":99,"name":"Swelling circles","username":"ReasonMaster","description":"Swelling circles with simplex noise","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["glowswellfractalcirclessimplexsimplexnoisenoisenoisealgorithm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvec3 palette( in float t ) {\n    vec3 a = vec3(-0.382, 0.498, 0.478);\n    vec3 b = vec3(-1.302, -0.312, -0.312);\n    vec3 c = vec3(-0.502, 1.298, 1.080);\n    vec3 d = vec3(0.038, 0.068, 0.128);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    float d0 = length(uv);\n    \n    \n    \n    float n = abs(snoise(vec2(iTime * .1, uv.y * .6) * 3.));\n    \n    uv = fract(uv * ((n * .3) + (((1. - d0) * ((sin(iTime * .5) * 4.) + 2.)) + 2.))) - .5;\n    \n    float d = length(uv);\n    \n    vec3 pCol = palette(d0 + (n * 1.5) - 1.) * .5;\n    \n    \n    d = fract(d * 2.);\n    d -= .2;\n    d = abs(d);\n    d = (.01 + (n * (2. - d0) * .08)) / d;\n    \n    //d = step(.9, d);\n    // Time varying pixel color\n    vec3 col = vec3(d);\n    col *= pCol;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}