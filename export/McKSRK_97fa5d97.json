{"ver":"0.1","info":{"id":"McKSRK","date":"1715473865","viewed":68,"name":"dotted lines: Gabor Version ","username":"altunenes","description":"Track the red ball as it moves, and notice how the gabors seem to shift. :)\ninspiration:\nhttps://journals.sagepub.com/doi/10.1068/p6383","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["illusion","vision","gabor","perception"],"hasliked":0,"parentid":"XcKXRV","parentname":"dotted lines: motion illusion"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// After coding the original, I thought that the effect could be strengthened \n// through the Gabors, and I think it strengthened for me. :-)\n// original:https://www.shadertoy.com/view/XcKXRV\n// inspiration: https://journals.sagepub.com/doi/10.1068/p6383 && https://michaelbach.de/ot/mot-dottedLines/index.html\n#define PI 3.14\nfloat GaborPatch(vec2 uv, float theta, float lambda, float sigma, float gamma, float psi) {\n    float xp = uv.x * cos(theta) - uv.y * sin(theta);\n    float yp = uv.x * sin(theta) + uv.y * cos(theta);\n    float envelope = exp(-((xp * xp) + (gamma * gamma * yp * yp)) / (2.0 * sigma * sigma));\n    float carrier = cos(2.0 * PI * xp / lambda + psi);\n    return envelope * carrier;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord / iResolution.xy) - 0.5; \n    vec3 color = vec3(0.5); \n    //totally experimental (based on my perception) :)\n    float lambda = 0.06;\n    float sigma = 0.03;  \n    float gamma = 1.0;\n    float psi = PI / 2.0;\n    // float psi = iTime*5.5; (reverse effect ;-)\n    for (int i = 0; i < 2; i++) {\n        float sign = i == 0 ? 1.3 : -1.3;\n        for (float t = -0.6; t <= 0.6; t += 0.05) { \n            vec2 linePos = vec2(1.8 * t - 0.6, t * sign * (iResolution.y / iResolution.x));\n            float theta = sign * PI / 2.0; \n            vec2 patchUV = uv - linePos;\n            float gabor = GaborPatch(patchUV, theta, lambda, sigma, gamma, psi);\n            color += 0.5 * vec3(gabor); \n        }\n    }\n    float ballX = sin(iTime * 1.5) * 0.3 + 0.1; \n    float distance = length(uv - vec2(ballX, 0.0));\n    float ball = smoothstep(0.02,0.01, distance);\n    vec3 red = vec3(1.0, 0.0, 0.0); \n    color = mix(color, red, ball);\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}