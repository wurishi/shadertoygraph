{"ver":"0.1","info":{"id":"dsGcR1","date":"1695770758","viewed":94,"name":"Smoothstepped animation","username":"makscee","description":"Simple way to make animation out of timed translations via smoothstep function","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["sdf","smoothstep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.141592653589793\nvec2 rotate(vec2 vec, float rot)\n{\n    float s = sin(rot), c = cos(rot);\n    return vec2(vec.x*c-vec.y*s, vec.x*s+vec.y*c);\n}\n\nfloat sd_box( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime - .5;\n    float w = 0.01 + smoothstep(6., 6.5, t) - smoothstep(7., 7.5, t);\n    vec2 uv = (fragCoord - iResolution.xy * .5) /iResolution.yy;\n    float s = smoothstep(.0, .5, t) * .1\n        + smoothstep(2., 2.5, t) * .1\n        - smoothstep(4., 4.5, t) * .2\n        + smoothstep(5., 5.5, t) * .3\n        - smoothstep(7., 7.5, t) * .3\n        ;\n    uv = rotate(uv, smoothstep(1., 1.5, t) * pi * .25\n        + smoothstep(3., 3.5, t) * pi * .25\n        + smoothstep(5., 5.5, t) * pi * .25\n        );\n    float v = min(smoothstep(-w, w, sd_box(uv, vec2(s))), smoothstep(w, -w, sd_box(uv, vec2(s))));\n    fragColor = vec4(vec3(v),1.0);\n}","name":"Image","description":"","type":"image"}]}