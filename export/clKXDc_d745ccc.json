{"ver":"0.1","info":{"id":"clKXDc","date":"1686427220","viewed":348,"name":"electricity, I guess","username":"mufenz","description":"blue","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["electricity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\nfloat hash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }\n\nfloat noise(vec3 x) {\n    const vec3 step = vec3(110, 241, 171);\n\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n \n    // For performance, compute the base input to a 1D hash from the integer part of the argument and the \n    // incremental change to the 1D based on the 3D -> 1D wrapping\n    float n = dot(i, step);\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\n               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n \n    vec3 col = vec3(0.0);\n    float pinch = uv.x*(1.0-uv.x);\n    \n    float masterheight = (uv.y-0.5)*15.0-sin(iTime*2.0+uv.x*10.0)-sin(iTime*10.0+uv.x*25.0)*0.8+-sin(iTime*2.0+uv.x*45.0)*0.6;\n    masterheight *= pow(abs(pinch),0.1)*-0.02;\n    \n    for(int i = 0; i<3; i++) {\n        float noiseofs = noise(vec3(uv.x*35.0, iTime*15.0, float(i)*10.0))*2.0-1.0;\n\n        float offset = 0.5;\n        offset+=noiseofs*0.1*pinch;\n\n        float invHeight = 15.0;\n        invHeight /= pow(pinch,3.0);\n\n        float func = (uv.y-offset+masterheight)*invHeight-sin(iTime*6.0+uv.x*20.0+float(i)*4.0);\n        func *= 3.0;\n\n        float blue = 3.0/(pow(abs(func),0.4));\n\n        col.b += blue*0.4;\n        col.g += blue*0.2;\n    }\n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}