{"ver":"0.1","info":{"id":"7tXXW8","date":"1625557707","viewed":89,"name":"Basic star","username":"hostilenode","description":"A basic star shader, meant to be applied on a square.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["star","mit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// MIT License - Copyright Â© 2021 Pedro Nunes\n\nconst float kStarSize = 0.1;\nconst float kStarBrightness = 1.0; // Value >= 0.0 and < 4.0\nconst vec3 kStarColor = vec3(1.0, 0.7, 0.0);\n\nfloat getGlow(vec2 uv)\n{\n    // Gentle slope for the glow:\n    // https://www.desmos.com/calculator/fjwv1ctp4h\n    float pi = 3.14159;\n    float x = min(length(uv), 1.);\n    float l = cos(x*pi) / 2. + 0.5; \n    l = (l + (1.-x))/2.;\n    return l;\n}\n\nfloat getIntensity(vec2 uv)\n{\n    float x = min(length(uv), 1.);   \n    return pow(1. - (x - kStarSize), 4. - kStarBrightness);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    \n    // Center the UVs in the middle of the surface so we are working\n    // in -1 to 1, with 0 being the center of the star.\n    vec2 centerUV = 2. * (uv - vec2(0.5));\n\n    vec3 glowColor = kStarColor * getGlow(centerUV); \n    vec3 intensityColor = vec3(1.) * getIntensity(centerUV);\n    vec3 col = mix(glowColor, intensityColor, intensityColor.r);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}