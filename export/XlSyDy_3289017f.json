{"ver":"0.1","info":{"id":"XlSyDy","date":"1509928008","viewed":123,"name":"Raymarcher 3: terrain","username":"aaecheve","description":"tutorial terrain raymarching","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["cc7615","raymarchinf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Alejandro Echeverria - 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec3 color = vec3(1.0, 0.5, 0.1);\nvec3 lDir = vec3(0.0, 1.0, 0.0);\nvec3 lColor = vec3(1.0,1.0,1.0);\n\nfloat amp = 1.5;\nfloat numOctaves = 2.0;\n\n// value noise\nfloat noise(vec2 x )\n{\n    vec2 f = fract(x);\n    vec2 u = f*f*(3.0-2.0*f);\n\n    vec2 p = floor(x);\n\tfloat a = textureLod( iChannel0, (p+vec2(0.5,0.5))/256.0, 0.0 ).x;\n\tfloat b = textureLod( iChannel0, (p+vec2(1.5,0.5))/256.0, 0.0 ).x;\n\tfloat c = textureLod( iChannel0, (p+vec2(0.5,1.5))/256.0, 0.0 ).x;\n\tfloat d = textureLod( iChannel0, (p+vec2(1.5,1.5))/256.0, 0.0 ).x;\n    \n\treturn a+(b-a)*u.x+(c-a)*u.y+(a-b-c+d)*u.x*u.y;\n}\n\n\n\nfloat function(vec2 p)\n{\n    float val = 0.0;\n    for(float i=0.0; i< numOctaves; i+=1.0)\n    \tval += pow(amp,-i) * noise(pow(amp, i) * p);\n    return val;\n}\n\n\nfloat sdFunction(vec3 p)\n{\n    return p.y - function(p.xz);\n}\n\nfloat map( in vec3 pos )\n{\n    return sdFunction(pos);\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 100.0;\n    float delta = 0.1;\n    \n\tfloat precis = 0.002;\n    float resT= tmin;\n    float m = -1.0;\n    for( float t=tmin; t<tmax; t+= delta )\n    {\n\t    float res = map(ro+rd*t);\n        if( res <precis) {\n            resT = t - 0.5 * delta;\n        \tm = 1.0;\n            break;\n        }\n    }\n\n    return vec2( resT, m );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy) - map(pos-eps.xyy),\n\t    map(pos+eps.yxy) - map(pos-eps.yxy),\n\t    map(pos+eps.yyx) - map(pos-eps.yyx) );\n\treturn normalize(nor);\n}\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0);\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    \n    //hit\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        \n        // lighting\n\t\tfloat dif = clamp( dot( nor, lDir ), 0.0, 1.0 );\n        col = color*dif*lColor;\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, in vec3 up )\n{\n\tvec3 w = normalize(ta-ro);\n\tvec3 u = normalize( cross(w,up) );\n\tvec3 v = normalize( cross(u,w) );\n    return mat3( u, v, w );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n    \n    numOctaves = mo.x * 10.0;\n    amp = mo.y * 2.0;\n\t\t \n\t// camera\t\n\tvec3 ro = vec3( 0.0, 10.0, 16.0);\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    vec3 up = vec3 (0.0, 1.0, 0.0);\n\t\n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, up);\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy, 2.0) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n    fragColor=vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}