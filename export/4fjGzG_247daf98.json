{"ver":"0.1","info":{"id":"4fjGzG","date":"1704419063","viewed":83,"name":"2D Gravity Sim","username":"thesage1014","description":"If the sim doesn't start when first loading, press reset. Point info stored in buffer along y=0. I imagine it may not work on all systems because of negative buffer values and precise texel fetching.\n\nWould be cool to implement 3d and quadtrees","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["simulation","gravity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://github.com/thesage1014\n// RESTART SIM WHEN STARTING OR CHANGING PARAMETERS ( ALT + DOWNARROW )\n// MASS IS ASSUMED TO BE EQUAL FOR ALL BODIES\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Copy buffer\n    vec4 col = (texelFetch(iChannel0,ivec2(fragCoord),0));\n\n    // Output to screen\n    fragColor = col*10.;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// https://github.com/thesage1014\n// RESTART SIM WHEN STARTING OR CHANGING PARAMETERS ( ALT + DOWNARROW )\n// MASS IS ASSUMED TO BE EQUAL FOR ALL BODIES\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //#define SHADED\n    const int count = 800; // COUNT MUST BE <= RESOLUTION WIDTH\n    const float fcount = float(count);\n    const float mass = 800./fcount; // MAKE SURE SIM ALWAYS HAS REASONABLE TOTAL MASS\n    const float maxvel = .1;\n    const float trails = .98;\n    const float brightness = 1000000.;\n    const float dotsize = .0035;\n    float id = floor(fragCoord.x);\n    if(iFrame < 8) { // INITIALIZE\n        if(fragCoord.y > 1.) {\n            fragColor = vec4(0.);\n        } else {\n            if (id < fcount) {\n                // COLOR DATA STORES BODY (POS.X, POS.Y, VEL.X, VEL.Y)\n                fragColor = vec4(cos(id)/10.+.5, sin(id*2.)/10.+.5, .0, .0);\n            }\n        }\n    } else { // EACH FRAME\n        vec4 old = (texelFetch(iChannel0,ivec2(fragCoord),0));\n        fragColor = old;\n        vec2 uv = fragCoord/iResolution.xy;\n        if(fragCoord.y > 1.0) { // DRAW DEBUG PREVIEW WITH REST OF BUFFER\n            fragColor *= trails;\n            for(int i=0; i<count; i++) {\n                vec4 body = texelFetch(iChannel0,ivec2(i,0),0);\n                vec2 diff = body.xy - uv.xy;\n                if (length(diff) < dotsize) {\n                    float str = clamp(1./length(diff*brightness),-.5,.5);\n                    #ifdef SHADED\n                    fragColor += (diff*str*1000.0).xxxx;\n                    #endif\n                    fragColor += vec4(str)+body.wzwz;\n                }\n            }\n        } else { // GRAVITY LOGIC\n            if( fragCoord.x < fcount ) {\n                vec2 veladd = vec2(0.);\n                    for(int i=0; i<count; i++) {\n                        if( i != int(id)) {\n                            vec4 body = texelFetch(iChannel0,ivec2(i,0),0);\n                            vec2 diff = body.xy - old.xy;\n                            float str = clamp(1./length(diff*1000000000.),-10.,10.);\n                            veladd += diff*str;\n                        }\n                    }\n\n                    veladd = normalize(veladd) * clamp(length(veladd),0.,maxvel);\n                    fragColor.xy += (fragColor.zw + veladd) * mass;\n                    fragColor.zw += veladd * mass;\n                }\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}