{"ver":"0.1","info":{"id":"3sjXDh","date":"1553626211","viewed":237,"name":"Drop Impact on a Solid Surface","username":"MoltenQwartz","description":"Simulation of water droplets hitting a solid surface.\nWe can have a pretty good close form solution for the profile of a drop impacting and spreading on a solid surface","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["simulation","water","droplet","impact"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://people.maths.bris.ac.uk/~majge/retractionPOF.pdf\n// http://www.off-ladhyx.polytechnique.fr/people/josserand/papier/annrev.pdf\n// https://www.researchgate.net/publication/258661354_Spreading_dynamics_of_drop_impacts\n\nconst int NDroplets = 30;\nconst vec2 dropletUVPos[NDroplets] = vec2[](\nvec2(0.436031,0.501581), vec2(0.423547,0.111569), vec2(0.453239,0.26699), \nvec2(0.815673,0.924419), vec2(0.0226986,0.313017), vec2(0.174258,0.453433),\nvec2(0.408085,0.233295), vec2(0.91921,0.474745), vec2(0.0135368,0.911714),\nvec2(0.778153,0.390637), vec2(0.257558,0.0772851), vec2(0.569454,0.832701),\nvec2(0.262737,0.211211), vec2(0.30801,0.471577), vec2(0.781463,0.392764), \nvec2(0.278776,0.908572), vec2(0.51161,0.479434), vec2(0.523552,0.221627),\nvec2(0.988079,0.741381), vec2(0.178634,0.155069), vec2(0.586289,0.823556),\nvec2(0.660606,0.889636), vec2(0.519263,0.563728), vec2(0.474654,0.487724),\nvec2(0.974624,0.0858092), vec2(0.605884,0.444089), vec2(0.790726,0.0957065),\nvec2(0.867111,0.367446), vec2(0.792375,0.319052), vec2(0.392994,0.0308541));\n    \n    \nconst float deltaTime[NDroplets] = float[](\n16.2616, 14.1047, 12.7014, 17.219, 16.4117, 16.5616, 18.3943, \n19.1071, 17.9323, 19.1383, 12.7135, 16.6305, 13.1771, 16.4899,\n15.4864, 12.3044, 15.9527, 18.3372, 12.268, 18.2772, 14.1241,\n16.9782, 12.1193, 17.3486, 13.0258, 16.317, 12.8056, 16.94, 13.0454,\n17.7878);\n\nconst float dropletSizesDelta[NDroplets] = float[](\n0.522874, 0.768016, 0.424533, 0.40368, 0.981766, 0.9371, 0.86986,\n0.0205862, 0.0598045, 0.960639, 0.458194, 0.205621, 0.769871,\n0.626017, 0.604965, 0.529476, 0.852081, 0.0480453, 0.112271,\n0.192868, 0.325125, 0.571701, 0.551602, 0.916609, 0.958534,\n0.0347382, 0.653168, 0.823736, 0.584742, 0.679072);\n\n//#define displayNormalMap\n#define normalStrength 20.0\n#define simulationSpeed 5.0\n#define dropletSizes  20.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float globalH = 0.0;\n    const int NDroplets = 10;\n\n    for(int i = 0; i < NDroplets; i++)\n    {\n        vec2 uv_droplets = dropletUVPos[i];\n        float r = length(uv_droplets-uv);\n        r *= 20.0 / dropletSizesDelta[i];\n\n        \n        float t = mod(simulationSpeed * iTime, deltaTime[i]);\n        \n        \n        float h = 1.0/(t*t) * 1.0/pow(1.0 + 0.625*(r/t)*(r/t),6.0);\n        globalH += h;//min(globalH+h,1.0);\n    }\n\tglobalH = min(globalH,1.0);\n    \n    float dHdx = normalStrength*dFdx(globalH);\n    float dHdy = normalStrength*dFdy(globalH);\n\tvec3 N = vec3(dHdx,dHdy,1.0);\n    N = normalize(N);\n\n    // Output to screen\n    fragColor = vec4(globalH);\n    #ifdef displayNormalMap\n        fragColor = vec4(0.5*N+0.5,0.0);\n    #endif\n}","name":"Image","description":"","type":"image"}]}