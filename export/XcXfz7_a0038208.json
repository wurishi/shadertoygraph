{"ver":"0.1","info":{"id":"XcXfz7","date":"1723494055","viewed":28,"name":"Flight Over a Colorful Lines","username":"4two","description":"Endless Flight Over a Colorful Fractal Landscape","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["flight","hills"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ShaderToy Shader - Endless Flight Over a Colorful Fractal Landscape\n/*\n\nCopyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/ \n\n#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n\n// Function to create fractal noise for landscape height\nfloat fractalNoise(vec2 p) {\n    float scale = 1.0;\n    float intensity = 0.6;\n    float height = 0.7;\n    for (int i = 0; i < 6; i++) { // 6 layers of noise for depth\n        height += intensity * sin(scale * (p.x + iTime * 0.1) + sin(p.y + iTime * 0.1));\n        p *= 1.0; // Frequency scaling\n        intensity *= 0.6; // Amplitude scaling\n    }\n    return height;\n}\n\n// Raymarching function to find surface intersection\nfloat raymarch(vec3 ro, vec3 rd) {\n    float dist = 0.0;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + dist * rd;\n        float d = p.y - fractalNoise(p.xz);\n        if (d < SURF_DIST) return dist;\n        dist += d;\n        if (dist > MAX_DIST) break; // Escape if too far\n    }\n    return -1.0;\n}\n\n// Function to calculate normal using finite differences\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(0.01, 0.0);\n    float h = fractalNoise(p.xz);\n    vec3 n = normalize(vec3(\n        fractalNoise(p.xz + e.xy) - h,\n        50.0 * e.x,\n        fractalNoise(p.xz + e.yx) - h\n    ));\n    return n;\n}\n\n// Main rendering function\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Camera setup\n    vec3 ro = vec3(0.0, 5.0, -iTime * 5.0); // Camera position moving forward\n    vec3 rd = normalize(vec3(uv, -0.5)); // Ray direction\n\n    // Raymarching\n    float t = raymarch(ro, rd);\n\n    // Background color\n    vec3 color = vec3(0.2, 0, 0); // Sky color\n\n    // If hit, calculate color and normal\n    if (t > 0.0) {\n        vec3 pos = ro + t * rd;\n        vec3 normal = calcNormal(pos);\n        \n        // Calculate height-based color\n        float heightColor = fractalNoise(pos.xz);\n        vec3 baseColor = 0.5 + 0.5 * cos(vec3(1.0, 0.5, 0.2) * heightColor + vec3(0.0, 2.0, 4.0));\n\n        // Lighting calculations\n        float diff = max(dot(normal, vec3(0.0, 1.0, 0.0)), 0.0);\n        baseColor *= diff;\n\n        color = baseColor;\n    }\n\n    // Output final color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}