{"ver":"0.1","info":{"id":"ftsSRS","date":"1625956638","viewed":141,"name":"ZX Spectrumize RGB","username":"bennett","description":"Mapping video to ZX Spectrum pixels, input more than welcome. It's definitely not perfect\n\n","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","texture","lod"],"hasliked":0,"parentid":"flXSDn","parentname":"ZX Spectrumizer"},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 pal[8] = vec3[8](\nvec3(0.,0.,0.),\nvec3(1.,0.,0.),\nvec3(0.,1.,0.),\nvec3(0.,0.,1.),\nvec3(1.,1.,0.),\nvec3(0.,1.,1.),\nvec3(1.,0.,1.),\nvec3(1.,1.,1.)\n);\n\nfloat mainPixelScale = 4.;\nfloat colorPixelScale = 32.;\n\n\n//from https://www.shadertoy.com/view/MdjBRy\nvoid contrastAdjust( inout vec3 color, in float c) {\n    float t = 0.5 - c * 0.5; \n    color.rgb = color.rgb * c + t;\n}\n\nfloat dim = 0.7843;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = mainPixelScale*(floor(fragCoord.xy/mainPixelScale)+vec2(0.5,0.5)) / iResolution.xy; \n    vec2 bayerUV = uv*iResolution.xy/(mainPixelScale*8.);\n\n    float bright = 1.0;\n    \n    //color pixels are 8x8 the small pixels\n    vec2 center_cell = colorPixelScale*(floor(fragCoord.xy/colorPixelScale) + vec2(0.5,0.5))/ iResolution.xy;\n    vec3 target_col = textureLod( iChannel0, center_cell, colorPixelScale ).xyz;\n    float cellbrightness = target_col.r;\n    \n    //boost contrast to increase the odds of a good match\n    contrastAdjust(target_col,1.5);\n  \n    //small pixels\n    vec3 col = textureLod(iChannel0,uv,mainPixelScale).rgb;\n    contrastAdjust(col,1.2);\n    //dither small pixels - via https://www.shadertoy.com/view/MllSzj\n    float bayer = pow(texture(iChannel1, bayerUV).r,0.8);\n    if (bayer < col.r){\n        col=vec3(1,1,1);\n    }\n    else {\n        col=vec3(0,0,0);\n    }\n\n    //find the two colors that will match the target color best, given the dither pattern\n    vec3 nearest1 =vec3(1.,0.,0.);\n    vec3 nearest2 = vec3(1,0,0.);\n    float nearestdist = 999999.;\n\n    for (int b=0; b<2; b++){ //one bitplane for brightness\n        if (b==0) bright = 1.;\n        else bright = dim;\n        \n        for (int i=0; i<8; i++){ //3 bitplanes for color\n            for (int j=0; j<8; j++){\n\n                //find color dyad with closest average to target color\n                float d = distance(target_col,mix(pal[j]*bright,pal[i]*bright,cellbrightness) );\n                if (d<nearestdist){\n                    nearestdist=d;\n                    nearest1=pal[i]*bright;\n                    nearest2=pal[j]*bright;\n                }\n            }        \n        }\n     }\n    \n    //figure out which of the two is brighter\n    vec3 lightest =nearest1;\n    vec3 secondlightest = nearest2;\n\n    //see if this a light or a dark pixel relative to the bayer dither\n    vec3 outcol = secondlightest;\n    if (col.r > 0.5) outcol = lightest;\n       \n\tfragColor = vec4(outcol,1.0);\n}","name":"Image","description":"","type":"image"}]}