{"ver":"0.1","info":{"id":"dtVBzh","date":"1701857413","viewed":34,"name":"Coordinate System Quadrants","username":"vrcomputing","description":"Visualize the fragment shaders coordinate system's quadrants","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["coordinates","quadrants"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{        \n    bool L = fragCoord.x < iResolution.x / 2.0;\n    bool R = !L;\n    bool T = fragCoord.y > iResolution.y / 2.0;\n    bool B = !T;\n\n    if(T && L) fragColor = vec4(1.0, 0.0, 0.0, 1.0); // red\n    if(T && R) fragColor = vec4(0.0, 1.0, 0.0, 1.0); // green\n    if(B && L) fragColor = vec4(0.0, 0.0, 1.0, 1.0); // blue\n    if(B && R) fragColor = vec4(1.0, 1.0, 0.0, 1.0); // yellow\n    \n    // NOTE:\n    // Normalize coordinates into [-1,+1]x[-1,+1] space with (0,0) at the center:\n    //\n    // vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.xy;\n    //\n    // Thereby the following holds: \n    //   L = uv.x < 0.0\n    //   R = uv.x >= 0.0\n    //   T = uv.y > 0\n    //   B = uv.y <= 0\n}","name":"Image","description":"","type":"image"}]}