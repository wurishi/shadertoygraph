{"ver":"0.1","info":{"id":"3sSBRh","date":"1589425668","viewed":181,"name":"Lightness Smoothing","username":"wnu","description":"Create an animated look to the image/video by smoothing layers of lightness together","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926538\n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec3 rgb2hsl2(vec3 c){\n\tfloat cMin=min(min(c.r,c.g),c.b),\n\t      cMax=max(max(c.r,c.g),c.b),\n\t      delta=cMax-cMin;\n\tvec3 hsl=vec3(0.,0.,(cMax+cMin)/2.);\n\tif(delta!=0.0){ //If it has chroma and isn't gray.\n\t\tif(hsl.z<.5){\n\t\t\thsl.y=delta/(cMax+cMin); //Saturation.\n\t\t}else{\n\t\t\thsl.y=delta/(2.-cMax-cMin); //Saturation.\n\t\t}\n\t\tfloat deltaR=(((cMax-c.r)/6.)+(delta/2.))/delta,\n\t\t      deltaG=(((cMax-c.g)/6.)+(delta/2.))/delta,\n\t\t      deltaB=(((cMax-c.b)/6.)+(delta/2.))/delta;\n\t\t//Hue.\n\t\tif(c.r==cMax){\n\t\t\thsl.x=deltaB-deltaG;\n\t\t}else if(c.g==cMax){\n\t\t\thsl.x=(1./3.)+deltaR-deltaB;\n\t\t}else{ //if(c.b==cMax){\n\t\t\thsl.x=(2./3.)+deltaG-deltaR;\n\t\t}\n\t\thsl.x=fract(hsl.x);\n\t}\n\treturn hsl;\n}\n\n\nvec3 sfloor( vec3 v, int n){\n    vec3 o = v;\n    for(int i = 0; i<n; i++){\n    \to = o - sin(2.*PI*o)/(2.*PI);\n    }\n    return o;\n}\n\nfloat sfloor( float v, int n){\n    float o = v;\n    for(int i = 0; i<n; i++){\n    \to = o - sin(2.*PI*o)/(2.*PI);\n    }\n    return o;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 R = iResolution.xy;\n    vec2 uv = (fragCoord)/R;\n    \n    float m =6.;\n\tint r = 2;\n    float n = 0.;\n    float f = 0.;\n    vec3 fV = vec3(0.);\n    \n    vec3 tVal = texture(iChannel0, uv.xy).xyz;\n    tVal = rgb2hsl2(tVal);\n    \n    for(int i = -r;i<r+1;i++){\n        for(int j = -r;j<r+1;j++){\n    \n    vec3 val = texture(iChannel0, uv.xy+vec2(float(i)/R.x,float(j)/R.y)).xyz;\n       \n    val = rgb2hsl2(val);\n   \n    val = clamp(sfloor(val*(m-0.5)-0.25,1),0.0,m-1.)/(m-1.);\n            \n    fV += val;\n    n += 1.;\n            \n        }}\n    fV /= n;\n    tVal.y = fV.y;\n    fV = clamp(sfloor(fV*(m-0.5)-0.25,2),0.0,m-1.)/(m-1.);\n    tVal.z = fV.z;\n    tVal = hsl2rgb(tVal);\n    \n    vec3 col = tVal;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}