{"ver":"0.1","info":{"id":"MlGyWV","date":"1537744682","viewed":214,"name":"Concentric Distance","username":"ramagosula","description":"Draw Concentric circles based off their distance. naiive supersample.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int numCenters = 8;\nvec2 centers[numCenters] = \nvec2[](\n    vec2 (0.2,0.7),\n    vec2 (0.4,0.3),\n    vec2 (0.9,0.6),\n    vec2 (0.8,0.1),\n    vec2 (0.45,0.2),\n    vec2 (0.91,0.7),\n    vec2 (1.0,0.3),\n    vec2 (0.5,0.5)\n);\nfloat height[numCenters] = float[](\n    0.7,0.6,0.5,0.3,0.9,0.4,0.6,0.5\n   );\n\nfloat stripePatternAA ( float v, float frequency, float thresh )\n{\n   //float aaf = fwidth(v);\n   float dst = step(thresh,abs(sin(v*frequency)));\n   float aaf = length(vec2(dFdx(dst), dFdy(dst)));\n   float radius = 0.4;\n  \n  //return abs(sin(v*frequency));\n  return step(thresh,abs(sin(v*frequency))); \n\n   //return aaf;\n   //return smoothstep(radius - aaf, radius, v);\n    \n}\n\nfloat stripePattern ( float v, float frequency, float thresh )\n{\n   float dst = abs(sin(v*frequency)) - thresh;\n   float aaf = fwidth(dst);\n   return smoothstep(-aaf,aaf,dst);\n}\n\nfloat SDF(vec2 p)\n{\n    vec2 center = vec2(0.5,0.5);\n        \n    float envelope = 1.0;\n    for (int i = 0; i < numCenters; i++)\n    {\n     \tenvelope = min(envelope,(1.0/height[i])*distance(p,centers[i]));   \n    }    \n    return envelope;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.yy;\n\n    vec3 norm = vec3(1,1,1);\n    \n    //float envelope = SDF(uv);\n    //vec3 col = norm*stripePattern(envelope,30.0, 1.0-envelope);\n    \n    centers[numCenters-1] = iMouse.xy/iResolution.yy;\n        \n    float envelope = SDF(uv);\n\n    float density = 30.0;\n    \n    float pattern = stripePattern(envelope,density, 1.0-envelope);\n    \n    vec3 col = norm*pattern;\n    \n    vec3 inner = vec3(0.0,0.0,0.0);\n    vec3 outer = vec3(1.0,0.6,0.0);\n    col = (1.0-col) * inner + col*outer;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}