{"ver":"0.1","info":{"id":"DtjyWD","date":"1691786246","viewed":66,"name":"integer division - rounding down","username":"jt","description":"The following expression implements integer division rounded [b]down[/b] (instead of towards zero)\n[code](a > 0 && b < 0) ? ((a - 1) / b) - 1 : (a < 0 && b > 0) ? (a + 1) / b - 1 : a / b[/code]\nCan this be implemented concisely for ivec4?\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["round","integer","division","codegolf","down"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/DtjyWD integer division - rounding down, 2023 by jt\n// Often I require integer division to round down instead of towards zero.\n\n// Corresponding strictly positive integer modulo: https://www.shadertoy.com/view/DljcWD\n\n// tags: round, integer, division, down, codegolf\n\n// Is there a shorter way to implement integer-division that always rounds DOWN?\nint div_floor(int a, int b)\n{\n    return (a > 0 && b < 0) ? ((a - 1) / b) - 1 : (a < 0 && b > 0) ? (a + 1) / b - 1 : a / b; // codegolf this line\n    //return (a ^ b) < 0 && a != 0 ? (1 - abs(a)) / abs(b) - 1 : a / b; // fenix found this at https://blog.demofox.org/2022/07/21/rounding-modes-for-integer-division/\n    //return a * b < 0 // golfed version by Fabrice\n    //           ? (1 - abs(a)) / abs(b) - 1 \n    //           : a / b; \n}\n/*\n// Problem: this fails for large ints\nivec4 div_floor(ivec4 a, ivec4 b)\n{\n    return ivec4(floor(vec4(a) / vec4(b)));\n}\n*/\nivec4 div_floor(ivec4 a, ivec4 b) // vector version thanks to Fabrice\n{\n    ivec4  S = (sign(abs(a*b))-sign(a*b))/2; // 0 if a*b >= 0\n    return S * ((1 - abs(a)) / abs(b) - 1)+(1-S)*(a / b); // emulates ()?:\n}\n\nvoid mainImage( out vec4 c, in vec2 I)\n{\n    I -= iResolution.xy / 2.0;\n    c = vec4(div_floor(int(I.x),int(I.y))&1);\n    //c = vec4(div_floor(ivec4(I.x),ivec4(I.y))&1);\n    //c = vec4((int(I.x)/int(I.y))&1);\n}\n\n// Check alternative expressions using something like this (e.g. in https://www.onlinegdb.com/ )\n/*\n#include <stdio.h>\n#include <math.h>\n#include <limits.h>\n\nint div1(int a, int b) // original function\n{\n    return (a > 0 && b < 0) ? ((a - 1) / b) - 1 : (a < 0 && b > 0) ? (a + 1) / b - 1 : a / b; \n}\n\nint sign(int a)\n{\n    return a > 0 ? +1 : a < 0 ? -1 : 0;\n}\n\nint min(int a, int b)\n{\n    return a < b ? a : b;\n}\n\nint div2(int a, int b) // new function\n{\n    //return (int)(floor((float)a / (float)b)); // works for small numbers, will fail for very large ints\n    return (a ^ b) < 0 && a != 0 ? (1 - abs(a)) / abs(b) - 1 : a / b; // https://blog.demofox.org/2022/07/21/rounding-modes-for-integer-division/\n}\n\nint main()\n{\n    int c = 0;\n    for(int a = -6; a <= +6; a++)\n        for(int b = -5; b <= +5; b += 2)\n            if(div1(a,b)!=div2(a,b))\n            {\n                printf(\"%d / %d = %d != %d\\n\", a, b, div1(a,b), div2(a,b));\n                c++;\n            }\n\n    // testing all combinations takes too long so just try some extreme cases\n\n    {\n        int a = INT_MAX;\n        int b = +3;\n        if(div1(a,b)!=div2(a,b))\n        {\n            printf(\"%d / %d = %d != %d\\n\", a, b, div1(a,b), div2(a,b));\n            c++;\n        }\n    }\n\n    {\n        int a = INT_MIN;\n        int b = +3;\n        if(div1(a,b)!=div2(a,b))\n        {\n            printf(\"%d / %d = %d != %d\\n\", a, b, div1(a,b), div2(a,b));\n            c++;\n        }\n    }\n\n    {\n        int a = INT_MAX;\n        int b = -3;\n        if(div1(a,b)!=div2(a,b))\n        {\n            printf(\"%d / %d = %d != %d\\n\", a, b, div1(a,b), div2(a,b));\n            c++;\n        }\n    }\n\n    {\n        int a = INT_MIN;\n        int b = -3;\n        if(div1(a,b)!=div2(a,b))\n        {\n            printf(\"%d / %d = %d != %d\\n\", a, b, div1(a,b), div2(a,b));\n            c++;\n        }\n    }\n\n    if(!c)\n        printf(\"match!\\n\");\n    else\n        printf(\"%d differences\\n\", c);\n\n    return 0;\n}\n*/\n","name":"Image","description":"","type":"image"}]}