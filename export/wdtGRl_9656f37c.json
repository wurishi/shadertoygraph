{"ver":"0.1","info":{"id":"wdtGRl","date":"1569209308","viewed":1365,"name":"Parallax Occlusion Material ","username":"viclw17","description":"Shader Study based on https://www.shadertoy.com/view/Xs2cDz\n","likes":30,"published":1,"flags":0,"usePreview":1,"tags":["parrallax"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on https://www.shadertoy.com/view/Xs2cDz\n// layers\nconst float steps = 128.0;\n// Slight jitter to alleviate banding. Relies slightly on camera movement.\n#define JITTER 1\n// Slight screen distortion.\n#define DISTORTION 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Screen coordinates.   \n\tvec2 texcoord = (fragCoord.xy - iResolution.xy*.5)/iResolution.y; \n    \n    #if DISTORTION\n    texcoord *= sqrt(1.+dot(texcoord, texcoord)*1.); \n    #endif\n       \n    #if JITTER\n    float jitter = fract(sin(fract(iTime) + dot(texcoord, vec2(41.97, 289.13)))*43758.5453)*min(.25 + length(texcoord), 1.);\n\t#else\n    float jitter = 1.;\n    #endif\n    \n\tvec3 color;\n    vec2 uv;\n    float time = iTime/5.;\n    \n\tfor ( int i = 0; i < int(steps); i++ )\n\t{\n\t\t\n\t\tfloat depth = (float(i) + jitter) / steps;\n \n        uv = texcoord * depth;\n\t\t\n        // Camera movement to hide the artifacts. \n\t\tcolor = texture(iChannel0, uv + vec2(time, 0.)).rgb;\n        color = vec3(color.r);\n        \n\t\t// Reducing the heightmap to distance plane ratio.\n\t\tif ( 1.-dot(color, vec3(0.33333)*0.2) < depth) break; // 0.1*(sin(iTime*2.)+1.)\n\n\t}\n    \n    // Fake directional derivative-based lighting to bring out the surface a little more.\n    float diff = max(color.r - texture(iChannel0, uv + vec2(time, 0.) - .005).r, 0.)*3.;\n    float diff2 = max(color.r - texture(iChannel0, uv + vec2(time, 0.) + .005).r, 0.)*3.;\n    // Surface color.\n    color *= vec3(.5)*color; \n    // Two fake lights.\n    color += vec3(.4, .7, 1.)*diff*diff*5. + vec3(1, .7, .4)*diff2*diff2*5.; \n   \n    color += jitter * .04 - .02; \n    \n   \t// Gamma correction.\n\tfragColor = vec4(sqrt(max(color, 0.)),1.0); \n}","name":"Image","description":"","type":"image"}]}