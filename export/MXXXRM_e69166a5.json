{"ver":"0.1","info":{"id":"MXXXRM","date":"1732597600","viewed":29,"name":"Voronoi PostProcessing playgroun","username":"audifax","description":"voronoi post","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\n#define PI 3.14159265359\n#define threshold 0.55\n#define padding 0.2\n#define METHOD 2\n\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1) \n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mouseC = iMouse.xy / iResolution.xy;\n    vec4 video = texture(iChannel0, uv);\n    float maxrb = max( video.r, video.b );\n    float k = step( .00001, 1.-clamp( (video.g-maxrb)*5.0, 0.0, 1.0 ) );\n\n    //divide uv coord for tiling\n    float def = float( floor(map(mouseC.x, 0., 1., 16., 200.)) );\n    //get global tile coordinate of uv\n    //and tile coordinate of uv\n    vec2 i_st = floor(def*uv);\n    vec2 f_st = fract(def*uv);\n\n    vec2 localPoint = vec2(0.);\n    float dist = 1.5;\n    float maxK = 0.000001;\n    int maxSearch = 3;\n    \n    //for each adjacent neighboring tiles\n    for(int i=-maxSearch;i<maxSearch;i++) {\n        for(int j=-maxSearch;j<maxSearch;j++) {\n            vec2 neighborTile = vec2(float(i), float(j));\n            //get tile random point in tile coordinate\n            vec2 randomPt = random2(i_st +  neighborTile);\n            \n            //animate\n            //randomPt = 0.5 + 0.5*sin(iTime + 96.2831*randomPt);\n            \n            //get vector difference between random point and px\n            //so as to calculate distance between the 2\n            vec2 pxToPt = neighborTile + randomPt - f_st;\n            float lDist = length(pxToPt);\n            \n            vec4 tVideo = texture(iChannel0, (i_st + neighborTile + randomPt) / def);\n            float tMaxrb = max( tVideo.r, tVideo.b );\n            float tK = 1.-clamp( (tVideo.g-tMaxrb)*5.0, 0.0, 1.0 );\n            \n            if ( lDist < dist && tK >= maxK) {\n                // Keep the closer distance\n                dist = lDist;\n                maxK = tK;\n                // Kepp the position of the closer point\n                localPoint = i_st + neighborTile + randomPt;\n            }\n        }\n    }\n\n    vec4 cellular = texture(iChannel0, (localPoint) / def);\n\n\n    fragColor = mix(video, cellular, k);\n    \n    //fragColor = cellular;\n    //fragColor = vec4(localPoint, 0., 1.);\n    //fragColor += 1.-step(.05, dist);\n    //fragColor.r += 1.-step(0.01, f_st.x) + 1.-step(0.01, f_st.y);\n    \n    //fragColor.r += step(.99, f_st.x) + step(.99, f_st.y);\n}","name":"Image","description":"","type":"image"}]}