{"ver":"0.1","info":{"id":"ltGfDd","date":"1559835794","viewed":164,"name":"Text Printer","username":"rmccampbell7","description":"Functions for string handling and printing using int arrays.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["text","strings"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SL 16\n\n#define BOTLEFT vec2(0)\n#define BOTRIGHT vec2(iResolution.x, 0)\n#define TOPLEFT vec2(0, iResolution.y)\n#define TOPRIGHT iResolution.xy\n#define CENTER (iResolution.xy / 2.)\n#define CENTERX (iResolution.x / 2.)\n#define CENTERY (iResolution.y / 2.)\n\nconst vec2 ASPECT = vec2(.8, 1);\n\nconst int[SL] EMPTY = int[SL](0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\nconst int[SL] SPACE = int[SL](32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n\nvec2 fsize(float size) { return ASPECT * size; }\n\nvec2 fpos(vec2 pos, vec2 anchor, vec2 offset, float size) {\n    return (pos - anchor) / fsize(size) - offset;\n}\n\nfloat print(vec2 pos, int char) {\n    if (pos.x < 0.05 || pos.y < 0.05 || pos.x >= 0.95 || pos.y >= 0.95)\n        return 0.;\n    vec2 cell = vec2(char % 16, 15 - char / 16);\n    pos = (pos - .5)*ASPECT + .5;\n    vec4 pix = texture(iChannel0, (cell + pos) / 16., -1.);\n    return pix.r;\n}\n\nfloat print(vec2 pos, int[SL] s) {\n    if (pos.x < 0. || pos.y < 0. || pos.x >= float(SL) || pos.y >= 1.)\n        return 0.;\n    int ind = int(pos.x);\n    int char = s[ind];\n    char = char > 0 ? char : 32;\n    return print(fract(pos), char);\n}\n\nfloat print_num(vec2 pos, float n, int before, int after, bool signed) {\n    int len = before + after + int(after > 0) + int(signed);\n    if (pos.x < 0. || pos.y < 0. || pos.x >= float(len) || pos.y >= 1.)\n        return 0.;\n    int ind = int(pos.x) - int(signed);\n    int char;\n    if (signed && ind == -1) {\n        char = n < 0. ? 45 : 32; // '-' : ' '\n    } else if (ind == before) {\n        char = 46; // '.'\n    } else {\n        float rounded = round(abs(n) * pow(10., float(after)));\n        int power = ind - (before + after) - int(ind > before);\n        int dig = int(fract(rounded * pow(10., float(power))) * 10.);\n        char = dig + 0x30; // '0'\n    }\n    return print(fract(pos), char);\n}\n\nfloat print_num_r(vec2 pos, float n, int before, int after, bool signed) {\n    int len = before + after + int(after > 0) + int(signed);\n    return print_num(pos + vec2(len, 0), n, before, after, signed);\n}\n\nint[SL] num2str(float n) {\n    int[SL] s = EMPTY;\n    int i = 0;\n    if (n < 0.) {\n        s[i++] = 45; // '-'\n        n = -n;\n    }\n    int e = max(int(log2(n)/log2(10.)+1e-6), 0);\n    float p10 = pow(10., float(e));\n    for (; i<SL; i++) {\n        int d = int(n / p10);\n        s[i] = d + 0x30; // '0'\n        n = mod(n, p10);\n        if (e <= 0 && n < 1e-3)\n            break;\n        if (e == 0 && i+1 < SL)\n            s[++i] = 46; // '.'\n        e--;\n        p10 /= 10.;\n    }\n    return s;\n}\n\nint[SL] strcat(int[SL] s1, int[SL] s2) {\n    int[SL] s = EMPTY;\n    int j = 0;\n    for (int i=0; i<SL; i++, j++)\n        if ((s[j] = s1[i]) == 0) break;\n    for (int i=0; j<SL; i++, j++)\n        if ((s[j] = s2[i]) == 0) break;\n    return s;\n}\n\nint[SL] substr(int[SL] s, int i0, int i1) {\n    int[SL] s2 = EMPTY;\n    for (int i=i0, j=0; i<i1; i++, j++) {\n        s2[j] = s[i];\n    }\n    return s2;\n}\n\nint strlen(int[SL] s) {\n    for (int i=0; i<SL; i++)\n        if (s[i] == 0) return i;\n    return SL;\n}\n\nfloat printr(vec2 pos, int[SL] s) {\n    return print(pos + vec2(strlen(s), 0), s);\n}\n\nint[SL] str(int c0) { return int[SL](c0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); }\nint[SL] str(int c0, int c1) { return int[SL](c0, c1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); }\nint[SL] str(int c0, int c1, int c2) { return int[SL](c0, c1, c2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); }\nint[SL] str(int c0, int c1, int c2, int c3) { return int[SL](c0, c1, c2, c3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); }\nint[SL] str(int c0, int c1, int c2, int c3, int c4) { return int[SL](c0, c1, c2, c3, c4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); }\nint[SL] str(int c0, int c1, int c2, int c3, int c4, int c5) { return int[SL](c0, c1, c2, c3, c4, c5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); }\nint[SL] str(int c0, int c1, int c2, int c3, int c4, int c5, int c6) { return int[SL](c0, c1, c2, c3, c4, c5, c6, 0, 0, 0, 0, 0, 0, 0, 0, 0); }\nint[SL] str(int c0, int c1, int c2, int c3, int c4, int c5, int c6, int c7) { return int[SL](c0, c1, c2, c3, c4, c5, c6, c7, 0, 0, 0, 0, 0, 0, 0, 0); }\nint[SL] str(int c0, int c1, int c2, int c3, int c4, int c5, int c6, int c7, int c8) { return int[SL](c0, c1, c2, c3, c4, c5, c6, c7, c8, 0, 0, 0, 0, 0, 0, 0); }\nint[SL] str(int c0, int c1, int c2, int c3, int c4, int c5, int c6, int c7, int c8, int c9) { return int[SL](c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, 0, 0, 0, 0, 0, 0); }\nint[SL] str(int c0, int c1, int c2, int c3, int c4, int c5, int c6, int c7, int c8, int c9, int c10) { return int[SL](c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, 0, 0, 0, 0, 0); }\nint[SL] str(int c0, int c1, int c2, int c3, int c4, int c5, int c6, int c7, int c8, int c9, int c10, int c11) { return int[SL](c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, 0, 0, 0, 0); }\nint[SL] str(int c0, int c1, int c2, int c3, int c4, int c5, int c6, int c7, int c8, int c9, int c10, int c11, int c12) { return int[SL](c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, 0, 0, 0); }\nint[SL] str(int c0, int c1, int c2, int c3, int c4, int c5, int c6, int c7, int c8, int c9, int c10, int c11, int c12, int c13) { return int[SL](c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, 0, 0); }\nint[SL] str(int c0, int c1, int c2, int c3, int c4, int c5, int c6, int c7, int c8, int c9, int c10, int c11, int c12, int c13, int c14) { return int[SL](c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, 0); }\nint[SL] str(int c0, int c1, int c2, int c3, int c4, int c5, int c6, int c7, int c8, int c9, int c10, int c11, int c12, int c13, int c14, int c15) { return int[SL](c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    //                H   e    l    l    o    ,\n    int[] hello = str(72, 101, 108, 108, 111, 44);\n    //                W   o    r    l    d    !\n    int[] world = str(87, 111, 114, 108, 100, 33);\n    //col += print((fragCoord-vec2(60,160))/fsize(40.), strcat(strcat(hello, SPACE), world));\n    col += print(uv*vec2(20,9)-vec2(3.5,4), strcat(strcat(hello, SPACE), world));\n    // col += print(uv*vec2(20,9)-vec2(6,2), num2str(-123.456));\n    col += print_num(uv*vec2(20,9)-vec2(6,2), -123.456, 3, 3, true);\n\n    col += print((fragCoord-TOPLEFT)/fsize(36.)-vec2(0,-1), num2str(iResolution.x));\n    col += print((fragCoord-TOPLEFT)/fsize(36.)-vec2(0,-2), num2str(iResolution.y));\n    col += print((fragCoord-TOPLEFT)/fsize(36.)-vec2(0,-3), num2str(iFrameRate));\n    int[] datestr = strcat(strcat(strcat(num2str(iDate.y+1.), str(47)),\n                                  strcat(num2str(iDate.z), str(47))),\n                                         num2str(iDate.x));\n    col += printr(fpos(fragCoord,TOPRIGHT,vec2(0,-1),36.), datestr);\n    col += printr(fpos(fragCoord,TOPRIGHT,vec2(-5,-2),36.), num2str(iMouse.x));\n    col += printr(fpos(fragCoord,TOPRIGHT,vec2(-5,-3),36.), num2str(iMouse.y));\n    col += printr(fpos(fragCoord,TOPRIGHT,vec2(0,-2),36.), num2str(iMouse.z));\n    col += printr(fpos(fragCoord,TOPRIGHT,vec2(0,-3),36.), num2str(iMouse.w));\n\n    col += print((fragCoord-vec2(10,10))/10., substr(hello, 0, 5));\n\n    // col += print((uv-.5)*vec2(10,5)+.5, 88); // X\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}