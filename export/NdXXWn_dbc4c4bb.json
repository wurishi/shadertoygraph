{"ver":"0.1","info":{"id":"NdXXWn","date":"1618700161","viewed":86,"name":"Whitch cristal","username":"PluzhnikovaDari","description":"None","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"7dS3Wh","parentname":"Magic ball 2"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(2.0, 1.5, -6);\nconst vec3 CAMERA_POS_2 = vec3(1.0, 1.5, -3);\nconst vec3 LIGHT1_POS = vec3(-4, 1.6, 3);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(1, 0.5, 2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.0, 0.9, 0.9);\n\n\n\nvec3 randDir;\n\nconst vec3 LIGHT3_POS = vec3(-0.5, 0.7, -1);\n\n\nconst vec3 v1 = vec3(0.577350, 0.577350, -0.577350);\nconst vec3 v2 = vec3(0.577350, -0.577350, -0.577350);\nconst vec3 v3 = vec3(0.577350, 0.577350, 0.577350);\nconst vec3 v4 = vec3(0.577350, -0.577350, 0.577350);\nconst vec3 v5 = vec3(-0.577350, 0.577350, -0.577350);\nconst vec3 v6 = vec3(-0.577350, -0.577350, -0.577350);\nconst vec3 v7 = vec3(-0.577350, 0.577350, 0.577350);\nconst vec3 v8 = vec3(-0.577350, -0.577350, 0.577350);\nconst vec3 v9 = vec3(0.356822 , 0.000000 , -0.934172);\nconst vec3 v10 = vec3(-0.356822,  0.000000,  -0.934172);\nconst vec3 v11 = vec3(0.356822 , 0.000000 , 0.934172);\nconst vec3 v12 = vec3(-0.356822,  0.000000,  0.934172);\nconst vec3 v13 = vec3(0.934172 , 0.356822 , 0.000000);\nconst vec3 v14 = vec3(0.934172 , -0.356822,  0.000000);\nconst vec3 v15 = vec3(-0.934172,  0.356822,  0.000000);\nconst vec3 v16 = vec3(-0.934172,  -0.356822, 0.000000);\nconst vec3 v17 = vec3(0.000000 , 0.934172 , -0.356822);\nconst vec3 v18 = vec3(0.000000 , 0.934172 , 0.356822);\nconst vec3 v19 = vec3(0.000000 , -0.934172,  -0.356822);\nconst vec3 v20 = vec3(0.000000 , -0.934172,  0.356822);\n\nconst float a = 0.15;\n\nconst vec3 BUILDING_CENTRE = vec3(0, 0, 0);\nconst vec3 BUILDING_COLOR = vec3(1, 0, 0);\n\nconst vec3 BuildingA = vec3(-1.8 * a, -a, a) + BUILDING_CENTRE;\nconst vec3 BuildingB = vec3(-1.8 * a, -a, -a) + BUILDING_CENTRE;\nconst vec3 BuildingC = vec3(2.0 * a, -a, -a) + BUILDING_CENTRE;\nconst vec3 BuildingD = vec3(2.0 * a, -a, a) + BUILDING_CENTRE;\n\nconst vec3 BuildingK = vec3(-2.0 * a, a, a) + BUILDING_CENTRE;\nconst vec3 BuildingL = vec3(-2.0 * a, a, -a) + BUILDING_CENTRE;\nconst vec3 BuildingM = vec3(2.0 * a, 2.5 * a, -a) + BUILDING_CENTRE;\nconst vec3 BuildingN = vec3(2.0 * a, 2.5 * a, a) + BUILDING_CENTRE;\n\nconst vec3 WINDOW_CENTRE = vec3(0, 0, -0.1);\n\nconst vec3 WINDOW1A = vec3(-1.04 * a, 0.0, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW1B = vec3(-0.28 * a, 0.0, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW1C = vec3(-0.28 * a, 1.2 * a, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW1D = vec3(-1.04 * a, 1.2 * a, -a) + WINDOW_CENTRE;\n\n\nconst vec3 WINDOW2A = vec3(0.48 * a, 0.0, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW2B = vec3(1.24 * a, 0.0, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW2C = vec3(1.24 * a, 1.2 * a, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW2D = vec3(0.48 * a, 1.2 * a, -a) + WINDOW_CENTRE;\n\n\n// (CAMERA_POS + t * viewVec).y == -1\n// t = (-1 - CAMERA_POS.y) / viewVec.y;\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n\n\nfloat traceDodecahedron(vec3 pos, vec3 dir, out vec3 normal, vec3 Vretex1, vec3 Vretex2, vec3 Vretex3, vec3 Vretex4, vec3 Vretex5, vec3 norm) {\n    vec3 centre = vec3(0.0, 0.0, 0.0);\n    \n    float t = (0.79470012 - norm.x * pos.x - norm.y * pos.y - norm.z * pos.z) / (norm.x * dir.x + norm.y * dir.y + norm.z * dir.z);\n    if (t <= 0.0) {\n        return INF;\n    }\n    float dot_const = 0.333;\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xyz, Vretex1.xyz) <= dot_const || dot(worldPos.xyz, Vretex2.xyz) <= dot_const\n        || dot(worldPos.xyz, Vretex3.xyz) <= dot_const || dot(worldPos.xyz, Vretex4.xyz) <= dot_const\n        || dot(worldPos.xyz, Vretex5.xyz) <= dot_const) {\n        return INF;\n    }\n    normal = normalize(cross(Vretex1 - Vretex2, Vretex1 - Vretex3));\n    if (dot(normal, centre) < 0.0) {\n        normal = -normal;\n    }\n    return t;\n}\n\n\nfloat traceSquare(vec3 pos, vec3 dir, out vec3 normal, vec3 Vretex1, vec3 Vretex2, vec3 Vretex3, vec3 Vretex4) {\n    vec3 norm = normalize(cross(Vretex1 - Vretex4, Vretex3 - Vretex4)); \n    float dirnorm = dot(dir, norm);\n\tfloat t = dot(Vretex4 - pos, norm) / dirnorm;\n    if (t < 0.0){\n        return INF;\n    }\n    vec3 worldPos = pos + t * dir;\n    vec3 norm1 = normalize(cross(Vretex2 - Vretex1, worldPos - Vretex1));\n    vec3 norm2 = normalize(cross(Vretex3 - Vretex2, worldPos - Vretex2));\n    vec3 norm3 = normalize(cross(Vretex4 - Vretex3, worldPos - Vretex3));\n    vec3 norm4 = normalize(cross(Vretex1 - Vretex4, worldPos - Vretex4));\n    if (dot(norm1 - norm, norm1 - norm) > 1.0 || dot(norm2 - norm, norm2 - norm) > 1.0\n        || dot(norm3 - norm, norm3 - norm) > 1.0 || dot(norm4 - norm, norm4 - norm) > 1.0){\n        return INF;\n    }\n    return t;\n}\n\n\n\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.5\n    );\n}\n\nvec3 refraction(vec3 v_in, vec3 normal, float n1, float n2) {\n    if (dot(v_in, normal) < 0.0)\n        normal = -normal;\n    float cosA = dot(v_in, normal) / length(v_in) / length(normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v_in - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.0) {\n        return reflect(v_in, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return tang * sinB + normal * cosB;\n}\n\n\n\nfloat pow2(float x) {\n    return x * x;\n}\n\n\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\n\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - 0.75;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 5.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(0.55, 0.09, 0.36) * totalAbs, 1.0 - opacity);\n}\n\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 params[12];\n    params[0] = vec3(-0.8507, 0.0000, -0.5257);\n    params[1] = vec3(0.0000, 0.5257, -0.8507);\n    params[2] = vec3(0.8507, -0.0000, 0.5257);\n    params[3] = vec3(-0.5257, -0.8507, -0.0000);\n    params[4] = vec3(0.8507, 0.0000, -0.5257);\n    params[5] = vec3(0.0000, 0.5257, 0.8507);\n    params[6] = vec3(-0.8507, -0.0000, 0.5257);\n    params[7] = vec3(0.5257, 0.8507, 0.0000);\n    params[8] = vec3(0.0000, -0.5257, -0.8507);\n    params[9] = vec3(0.0000, -0.5257, 0.8507);\n    params[10] = vec3(0.5257, -0.8507, -0.0000);\n    params[11] = vec3(-0.5257, 0.8507, 0.0000);\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.5) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float BUILDING_R = 0.0;\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    float mult = 1.0;\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        \n        \n        vec3 NormDod;\n        float planeDod = traceDodecahedron(curPos, curDir, NormDod, v6, v16, v15, v5, v10, params[0]);\n        if (planeDod < t) {\n            t = planeDod;\n            normal = NormDod;\n            vec3 worldPos = t * curDir + curPos;\n           if (randVals.x < GLASS_R * 10.0) {\n                materialType = REFLECTION;\n            } else if (randVals.x < GLASS_R * 20.0) {\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                vec4 fog = sampleFog(worldPos, viewVec);\n                color = fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            \n            //vec3 worldPos = t * curDir + curPos;\n            \n        }\n        planeDod = traceDodecahedron(curPos, curDir, NormDod, v9, v10, v5, v17, v1, params[1]);\n        if (planeDod < t) {\n            t = planeDod;\n            normal = NormDod;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            if (randVals.x < GLASS_R * 10.0) {\n                materialType = REFLECTION;\n            } else if (randVals.x < GLASS_R * 20.0) {\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                vec4 fog = sampleFog(worldPos, viewVec);\n                color = fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            \n            //vec3 worldPos = t * curDir + curPos;\n            \n        }\n        planeDod = traceDodecahedron(curPos, curDir, NormDod, v3, v11, v4, v14, v13, params[2]);\n        if (planeDod < t) {\n            t = planeDod;\n            normal = NormDod;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            if (randVals.x < GLASS_R * 10.0) {\n                materialType = REFLECTION;\n            } else if (randVals.x < GLASS_R * 20.0) {\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                vec4 fog = sampleFog(worldPos, viewVec);\n                color = fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            \n            //vec3 worldPos = t * curDir + curPos;\n            \n        }\n        planeDod = traceDodecahedron(curPos, curDir, NormDod, v16, v6, v19, v20, v8, params[3]);\n        if (planeDod < t) {\n            t = planeDod;\n            normal = NormDod;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            if (randVals.x < GLASS_R * 10.0) {\n                materialType = REFLECTION;\n            } else if (randVals.x < GLASS_R * 20.0) {\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                vec4 fog = sampleFog(worldPos, viewVec);\n                color = fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            \n            //vec3 worldPos = t * curDir + curPos;\n            \n        }\n        planeDod = traceDodecahedron(curPos, curDir, NormDod, v13, v14, v2, v9, v1, params[4]);\n        if (planeDod < t) {\n            t = planeDod;\n            normal = NormDod;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            if (randVals.x < GLASS_R * 10.0) {\n                materialType = REFLECTION;\n            } else if (randVals.x < GLASS_R * 20.0) {\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                vec4 fog = sampleFog(worldPos, viewVec);\n                color = fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            \n            //vec3 worldPos = t * curDir + curPos;\n            \n        }\n        planeDod = traceDodecahedron(curPos, curDir, NormDod, v12, v11, v3, v18, v7, params[5]);\n        if (planeDod < t) {\n            t = planeDod;\n            normal = NormDod;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            if (randVals.x < GLASS_R * 10.0) {\n                materialType = REFLECTION;\n            } else if (randVals.x < GLASS_R * 20.0) {\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                vec4 fog = sampleFog(worldPos, viewVec);\n                color = fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            \n            //vec3 worldPos = t * curDir + curPos;\n            \n        }\n        planeDod = traceDodecahedron(curPos, curDir, NormDod, v12, v7, v15, v16, v8, params[6]);\n        if (planeDod < t) {\n            t = planeDod;\n            normal = NormDod;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            if (randVals.x < GLASS_R * 10.0) {\n                materialType = REFLECTION;\n            } else if (randVals.x < GLASS_R * 20.0) {\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                vec4 fog = sampleFog(worldPos, viewVec);\n                color = fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            \n            //vec3 worldPos = t * curDir + curPos;\n            \n        }\n        planeDod = traceDodecahedron(curPos, curDir, NormDod, v17, v18, v3, v13, v1, params[7]);\n        if (planeDod < t) {\n            t = planeDod;\n            normal = NormDod;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            if (randVals.x < GLASS_R * 10.0) {\n                materialType = REFLECTION;\n            } else if (randVals.x < GLASS_R * 20.0) {\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                vec4 fog = sampleFog(worldPos, viewVec);\n                color = fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            \n            //vec3 worldPos = t * curDir + curPos;\n            \n        }\n        planeDod = traceDodecahedron(curPos, curDir, NormDod, v2, v19, v6, v10, v9, params[8]);\n        if (planeDod < t) {\n            t = planeDod;\n            normal = NormDod;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            if (randVals.x < GLASS_R * 10.0) {\n                materialType = REFLECTION;\n            } else if (randVals.x < GLASS_R * 20.0) {\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                vec4 fog = sampleFog(worldPos, viewVec);\n                color = fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            \n            //vec3 worldPos = t * curDir + curPos;\n            \n        }\n        planeDod = traceDodecahedron(curPos, curDir, NormDod, v20, v4, v11, v12, v8, params[9]);\n        if (planeDod < t) {\n            t = planeDod;\n            normal = NormDod;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            if (randVals.x < GLASS_R * 10.0) {\n                materialType = REFLECTION;\n            } else if (randVals.x < GLASS_R * 20.0) {\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                vec4 fog = sampleFog(worldPos, viewVec);\n                color = fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            \n            //vec3 worldPos = t * curDir + curPos;\n            \n        }\n        planeDod = traceDodecahedron(curPos, curDir, NormDod, v20, v19, v2, v14, v4, params[10]);\n        if (planeDod < t) {\n            t = planeDod;\n            normal = NormDod;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            if (randVals.x < GLASS_R * 10.0) {\n                materialType = REFLECTION;\n            } else if (randVals.x < GLASS_R * 20.0) {\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                vec4 fog = sampleFog(worldPos, viewVec);\n                color = fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            \n            //vec3 worldPos = t * curDir + curPos;\n            \n        }\n        planeDod = traceDodecahedron(curPos, curDir, NormDod, v5, v15, v7, v18, v17, params[11]);\n        if (planeDod < t) {\n            t = planeDod;\n            normal = NormDod;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            if (randVals.x < GLASS_R * 10.0) {\n                materialType = REFLECTION;\n            } else if (randVals.x < GLASS_R * 20.0) {\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                vec4 fog = sampleFog(worldPos, viewVec);\n                color = fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            \n            //vec3 worldPos = t * curDir + curPos;\n            \n        }\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        vec3 squareNorm;\n        float squareT = traceSquare(curPos, curDir, squareNorm, BuildingA, BuildingB, BuildingC, BuildingD);\n        if (squareT < t) {\n            vec3 worldPos = t * curDir + curPos;\n            t = squareT;\n            materialType = EMISSION;\n            normal = squareNorm;\n            color = BUILDING_COLOR;\n        }\n        squareT = traceSquare(curPos, curDir, squareNorm, BuildingA, BuildingB, BuildingK, BuildingL);\n        if (squareT < t) {\n            vec3 worldPos = t * curDir + curPos;\n            t = squareT;\n            materialType = EMISSION;\n            normal = squareNorm;\n            color = BUILDING_COLOR;\n        }\n        squareT = traceSquare(curPos, curDir, squareNorm, BuildingA, BuildingD, BuildingK, BuildingN);\n        if (squareT < t) {\n            vec3 worldPos = t * curDir + curPos;\n            t = squareT;\n            materialType = EMISSION;\n            normal = squareNorm;\n            color = BUILDING_COLOR;\n        }\n        squareT = traceSquare(curPos, curDir, squareNorm, BuildingC, BuildingB, BuildingL, BuildingM);\n        if (squareT < t) {\n            vec3 worldPos = t * curDir + curPos;\n            t = squareT;\n            materialType = EMISSION;\n            normal = squareNorm;\n            color = BUILDING_COLOR;\n        }\n        squareT = traceSquare(curPos, curDir, squareNorm, BuildingD, BuildingC, BuildingM, BuildingN);\n        if (squareT < t) {\n            vec3 worldPos = t * curDir + curPos;\n            t = squareT;\n            materialType = EMISSION;\n            normal = squareNorm;\n            color = vec3(0.3, 0, 0);\n        }\n        squareT = traceSquare(curPos, curDir, squareNorm, BuildingK, BuildingL, BuildingM, BuildingN);\n        if (squareT < t) {\n            vec3 worldPos = t * curDir + curPos;\n            t = squareT;\n            materialType = EMISSION;\n            normal = squareNorm;\n            color = vec3(0.1, 0.1, 0.1);\n        }\n        \n        \n        \n        \n        vec3 windowNorm;\n        float windowT = traceSquare(curPos, curDir, windowNorm, WINDOW1A, WINDOW1B, WINDOW1C, WINDOW1D);\n        if (windowT < t) {\n            t = windowT;\n            materialType = EMISSION;\n            normal = windowNorm;\n            color = vec3(0.8, 0.8, 0);\n        }\n        windowT = traceSquare(curPos, curDir, windowNorm, WINDOW2A, WINDOW2B, WINDOW2C, WINDOW2D);\n        if (windowT < t) {\n            t = windowT;\n            materialType = EMISSION;\n            normal = windowNorm;\n            color = vec3(0.8, 0.8, 0);\n        }\n        \n        \n        \n        \n        \n        \n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        vec3 sphNorm;\n        float sph2T = traceSphere(curPos - LIGHT3_POS, curDir, 0.25, sphNorm);\n        if (sph2T < t) {\n            t = sph2T;\n            normal = sphNorm;\n            if (randVals.x < DIAMOND_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(1, 1, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = DIAMOND_N;\n                } else {\n                    nEnter = AIR_N;\n                }\n            }\n        }\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n            \n        }\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}