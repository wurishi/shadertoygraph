{"ver":"0.1","info":{"id":"tlGfR1","date":"1613864680","viewed":232,"name":"Dappled light","username":"JeanArthurDeda","description":"Dappled light through leaves on a windy day","likes":18,"published":1,"flags":32,"usePreview":0,"tags":["light","gaussian","dappled"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Slow & hacked away \"simulation\" of Dappled light.\n// When light passes through the leaves, all the small openings between the overlapping\n// leaves act as spot lights (due to the pinhole lighting effect) generating \n// what is known as the Dappled light. \n// Claude Monet used this in his Garden Path 1901\n// https://drawpaintacademy.com/wp-content/uploads/2019/07/Claude-Monet-Garden-Path-1901.jpg\n// Other references:\n// https://www.edwardtufte.com/bboard/images/0002pS-4115.jpg\n// https://www.edwardtufte.com/bboard/images/0002pS-4108.jpg\n// The effect is quite lovely during a sun eclipse.\n\n\n// ================\n// Primitives by IQ\n// ================\n\n// Antialiasing: number of samples in x and y dimensions\n#define AA 1   // make this 1 if your machine is too slow\n\n// Distance from p to plane (at y = 0)\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\n// Distance from p to box whose half-dimensions are b.x, b.y, b.z\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n// Distance from p to sphere of radius s (centered at origin)\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\n// subtract primitive 2 from primitive 1, where d1 is distance to primitive 1.\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\n// union primitives 1 and 2\n// d1 is a vec2 where .x is the distance, and .y is the color/material code.\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n// intersection of two primitives\nfloat opI( float d1, float d2 )\n{\n    return max(d1, d2);\n}\n\n// Smooth minimum (polynomial smin())\n// See https://iquilezles.org/articles/smin\nfloat opBlend( float d1, float d2 ) {\n    const float k = 0.1;\n    float h = clamp( 0.5+0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n//------------------------------------------------------------------\n// Return (x,y) where x is minimum distance from pos to objects in the scene, and\n// y is the material of the closest object.\nvec2 map( in vec3 pos )\n{\n    vec2 res = opU( vec2( sdPlane(     pos), 95. ),\n\t                vec2( sdBox(       pos-vec3(.0, .5, 2.), vec3(3.,0.5,.03) ), 10.9 ) );\n    res = opU     ( vec2( sdBox(       pos-vec3(.3, .55, 2.), vec3(.03,.55,.5) ), 30.9), res);\n    res = opU     ( vec2( sdBox(       pos-vec3(-.5, .55, 2.), vec3(.03,.55,.5) ), 30.9), res);\n    res = opU     ( vec2( sdBox(       pos-vec3(-1.5, .55, 2.), vec3(.03,.55,.5) ), 30.9), res);\n    res = opU     ( vec2( sdBox(       pos-vec3(1.1, .55, 3.1), vec3(.5,.55,.03) ), 30.9), res);\n    res = opU     ( vec2( sdBox(       pos-vec3(1.5, 1., 2.), vec3(.5,1.,1.) ), 10.9), res);\n    return res;\n}\n\n// Cast a ray from origin ro in direction rd until it hits an object.\n// Return (t,m) where t is distance traveled along the ray, and m\n// is the material of the object hit.\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n   \n#if 1\n    // bounding volume\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<64; i++ )\n    {\n\t    float precis = 0.0005*t;\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n// Cast a shadow ray from origin ro (an object surface) in direction rd\n// to compute soft shadow in that direction. Returns a lower value\n// (darker shadow) when there is more stuff nearby as we step along the shadow ray.\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// Compute normal vector to surface at pos, using central differences method?\nvec3 calcNormal( in vec3 pos )\n{\n    // epsilon = a small number\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    \n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n    /*\n\tvec3 eps = vec3( 0.0005, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n\t*/\n}\n\n// compute ambient occlusion value at given position/normal\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec2 mirror(vec2 m)\n{\n    vec2 f = fract(m*0.5)*2.;\n    return vec2(1.)-abs(vec2(1.)-f);\n}\n\nfloat calcShadow(vec3 pos, vec3 lig, vec3 ds, vec3 dlig, vec2 size)\n{\n    vec3 y = cross(dlig, vec3(1.,0.,0.))*size.y;\n    vec3 x = cross(y, dlig)*size.s;\n    vec2 m = vec2 (dot(pos-ds,x), dot(pos-ds,y));\n    float s = texture(iChannel0, mirror(m)).x;\n    return min(s,softshadow( pos, lig, 0.02, 2.5 ));\n}\n\n// Figure out color value when casting ray from origin ro in direction rd.\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    // background sky color gradient\n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    // cast ray to nearest object\n    vec2 res = castRay(ro,rd);\n    float t = res.x; // distance\n\tfloat m = res.y; // material code\n    if( m > -0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor ); // reflected ray\n        \n        // material        \n\t\tcol = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        // lighting        \n        float occ = calcAO( pos, nor ); // ambient occlusion\n        occ = 1.-(1.-occ)*.5;\n\t\tvec3  lig = normalize( vec3(-0.4, 0.7, 0.6) ); // sunlight\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 ); // ambient light\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 ); // diffuse reflection from sunlight\n        // backlight\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y ); // dome light\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 ); // fresnel\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0); // specular reflection\n        vec3 dlig = normalize (vec3(.5, -1., .6));\n        vec3 ds = vec3 (-1.5,0.,1.35);\n        dif *= calcShadow (pos, lig, ds, dlig, vec2(.8));\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.30*dif*vec3(1.00,0.80,0.55);\n\t\tlin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;\n        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;\n//        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\n        // mix in fog?\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\n// Compute camera-to-world transformation.\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta - ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat time = 15.0 + iTime;\n\n    \n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n\n\t\t// camera (ro = ray origin)\t\n        vec3 ro = vec3( 0., 1.0 , 4.0);\n        vec3 ta = vec3( 0., 0.0, 0.5 );\n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta, 0.0 );\n        // ray direction\n        vec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n        // render\t\n        vec3 col = render( ro, rd );\n\n\t\t// gamma\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    \n    fragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Generate leaves\n// The higher the level the more blurred\nvec2 rotate(vec2 v, vec2 o, float a) \n{\n\tfloat s=sin(a);\n\tfloat c=cos(a);\n\tmat2 m=mat2(c,-s,s,c);\n\treturn o+(v-o)*m;\n}\n\nfloat leaves(vec2 fragCoord, float s, float r)\n{\n    vec2 map=fragCoord/iResolution.xy;\n    float t=cos(iTime*.5+r);\n    vec2 f=vec2(1,iResolution.y/iResolution.x)*(1.+r);\n    vec2 m = rotate(map*f,vec2(2.-r*2.)*f,cos (t)*cos(t*.5));\n    float sh=smoothstep(.31+.1*(1.-r),r*.3,texture (iChannel0, m).x);\n    return min(s,sh);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(leaves(fragCoord,1.,0.));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Generate leaves\n// The higher the level the more blurred\nvec2 rotate(vec2 v, vec2 o, float a) \n{\n\tfloat s=sin(a);\n\tfloat c=cos(a);\n\tmat2 m=mat2(c,-s,s,c);\n\treturn o+(v-o)*m;\n}\n\nfloat leaves(vec2 fragCoord, float s, float r)\n{\n    vec2 map=fragCoord/iResolution.xy;\n    float t=cos(iTime*.5+r);\n    vec2 f=vec2(1,iResolution.y/iResolution.x)*(1.+r);\n    vec2 m = rotate(map*f,vec2(2.-r*2.)*f,cos (t)*cos(t*.5));\n    float sh=smoothstep(.31+.1*(1.-r),r*.3,texture (iChannel0, m).x);\n    return min(s,sh);\n}\n\n// Gaussian blur the shadow to for the light pinholes\n// Exagerated Gausian blur from https://www.shadertoy.com/view/Xltfzj\nfloat gaussian(vec2 fragCoord)\n{\n    float Pi = 6.28318530718; // Pi*2\n    \n    // GAUSSIAN BLUR SETTINGS {{{\n    float Directions = 16.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)\n    float Quality = 2.; // BLUR QUALITY (Default 4.0 - More is better but slower)\n    float Size = 15.0; // BLUR SIZE (Radius)\n    // GAUSSIAN BLUR SETTINGS }}}\n   \n    vec2 Radius = Size/iResolution.xy;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Pixel colour\n    float s = texture(iChannel1, uv).x;\n    \n    // Blur calculations\n    for( float d=0.0; d<Pi; d+=Pi/Directions)\n\t\tfor(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)\n\t\t\ts += texture( iChannel1, uv+vec2(cos(d),sin(d))*Radius*i).x;\n    \n    // Output to screen\n    s /= Quality * Directions - 15.0;\n    return s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(leaves(fragCoord, gaussian(fragCoord), 0.5));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Generate leaves\n// The higher the level the more blurred\nvec2 rotate(vec2 v, vec2 o, float a) \n{\n\tfloat s=sin(a);\n\tfloat c=cos(a);\n\tmat2 m=mat2(c,-s,s,c);\n\treturn o+(v-o)*m;\n}\n\nfloat leaves(vec2 fragCoord, float s, float r)\n{\n    vec2 map=fragCoord/iResolution.xy;\n    float t=cos(iTime*.5+r);\n    vec2 f=vec2(1,iResolution.y/iResolution.x)*(1.+r);\n    vec2 m = rotate(map*f,vec2(2.-r*2.)*f,cos (t)*cos(t*.5));\n    float sh=smoothstep(.31+.1*(1.-r),r*.3,texture (iChannel0, m).x);\n    return min(s,sh);\n}\n\n// Step 2: Gaussian blur the shadow to for the light pinholes\n// Exagerated Gausian blur from https://www.shadertoy.com/view/Xltfzj\nfloat gaussian(vec2 fragCoord)\n{\n    float Pi = 6.28318530718; // Pi*2\n    \n    // GAUSSIAN BLUR SETTINGS {{{\n    float Directions = 16.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)\n    float Quality = 2.; // BLUR QUALITY (Default 4.0 - More is better but slower)\n    float Size = 15.0; // BLUR SIZE (Radius)\n    // GAUSSIAN BLUR SETTINGS }}}\n   \n    vec2 Radius = Size/iResolution.xy;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Pixel colour\n    float s = texture(iChannel1, uv).x;\n    \n    // Blur calculations\n    for( float d=0.0; d<Pi; d+=Pi/Directions)\n\t\tfor(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)\n\t\t\ts += texture( iChannel1, uv+vec2(cos(d),sin(d))*Radius*i).x;\n    \n    // Output to screen\n    s /= Quality * Directions - 15.0;\n    return s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(leaves(fragCoord, gaussian(fragCoord), 1.));\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// Gaussian blur the shadow to for the light pinholes\n// Detailed Gausian blur from https://www.shadertoy.com/view/Xltfzj\nfloat gaussian(vec2 fragCoord)\n{\n    float Pi = 6.28318530718; // Pi*2\n    \n    // GAUSSIAN BLUR SETTINGS {{{\n    float Directions = 16.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)\n    float Quality = 2.; // BLUR QUALITY (Default 4.0 - More is better but slower)\n    float Size = 15.0; // BLUR SIZE (Radius)\n    // GAUSSIAN BLUR SETTINGS }}}\n   \n    vec2 Radius = Size/iResolution.xy;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Pixel colour\n    float s = texture(iChannel0, uv).x;\n    \n    // Blur calculations\n    for( float d=0.0; d<Pi; d+=Pi/Directions)\n\t\tfor(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)\n\t\t\ts += texture( iChannel0, uv+vec2(cos(d),sin(d))*Radius*i).x;\n    \n    // Output to screen\n    s /= Quality * Directions - 15.0;\n    return s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(gaussian(fragCoord));\n}","name":"Buffer D","description":"","type":"buffer"}]}