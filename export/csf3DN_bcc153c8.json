{"ver":"0.1","info":{"id":"csf3DN","date":"1666622232","viewed":74,"name":"cat cube","username":"Retard_Gaming","description":"p","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 c(float x, float y, float z) {\n    float d = 4.;\n    \n    float a1 = iTime;\n    \n    float a2 = iTime + 3.1415926/4.;\n    \n    float dist = sqrt(x*x+y*y);\n    float angle = atan(y,x)+a1;\n    \n    float s1 = sin(angle);\n    float c1 = cos(angle);\n    \n    float s2 = sin(a2);\n    float c2 = cos(a2);\n    \n    float s = d - c2*dist*s1+s2*z;\n    \n    float _x = dist*c1;\n    float _y = dist*s2*s1+z*c2;\n    \n    if (s < 0.) {\n        return vec2(1./0.);\n    } \n    return vec2(_x,_y)/s;\n}\n\n\n// this will map a texture to four vertices\n// will not work if a.x=d.x and b.x=c.x\nvec2 uvQuad(vec2 a, vec2 b, vec2 c, vec2 d, vec2 p) {\n    vec2 s = a-b+c-d;\n    vec2 ba = b - a;\n    vec2 da = d - a;\n    vec2 pa = p - a;\n    \n    float a1 = ba.y*s.x-s.y*ba.x;\n    float b1 = (s.y*pa.x-pa.y*s.x)+(ba.y*da.x-da.y*ba.x);\n    float c1 = pa.x*da.y-pa.y*da.x;\n    \n    float u = (-b1-sqrt(b1*b1 - 4.*a1*c1))/(2.*a1);\n    float v = (pa.x-ba.x*u)/(s.x*u+da.x);\n    \n    return vec2(u,v);\n}\n\nfloat point(vec2 pos, vec2 uv) {\n    return ceil(clamp(0.02-distance(pos, uv), 0., 1.));\n\n}\n\nfloat triangleArea(vec2 a, vec2 b, vec2 c) {\n    return 0.5*(a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y));\n}\n\nfloat pointInsideQuad(vec2 a, vec2 b, vec2 c, vec2 d, vec2 p) {\n    vec2 uv = uvQuad(a, b, c, d, p);\n    \n    if (uv.x >= 0. && uv.x <= 1. && uv.y >= 0. && uv.y <= 1.) {\n        return 1.;\n    } else {\n        return 0.;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord + vec2(iResolution.y - iResolution.x, 0.)/2.)/iResolution.y*2. - 1.;\n        \n    vec3 col;\n    \n    vec2 p1 = c(-1.,1.,-1.);\n    vec2 p2 = c(1.,1.,-1.);\n    vec2 p3 = c(1.,1.,1.);\n    vec2 p4 = c(-1.,1.,1.);\n    \n    vec2 uv2 = uvQuad(p1,p2,p3,p4,uv);\n    col += texture(iChannel0, uv2).rgb;\n    col *= pointInsideQuad(p1,p2,p3,p4,uv);\n    \n    p1 = c(-1.,1.,1.);\n    p2 = c(1.,1.,1.);\n    p3 = c(1.,-1.,1.);\n    p4 = c(-1.,-1.,1.);\n    \n    uv2 = uvQuad(p1,p2,p3,p4,uv);\n    col += texture(iChannel0, uv2).rgb*pointInsideQuad(p1,p2,p3,p4,uv);\n    \n    p1 = c(1.,1.,-1.);\n    p2 = c(1.,-1.,-1.);\n    p3 = c(1.,-1.,1.);\n    p4 = c(1.,1.,1.);\n    \n    uv2 = uvQuad(p1,p2,p3,p4,uv);\n    col += texture(iChannel0, uv2).rgb*pointInsideQuad(p1,p2,p3,p4,uv);\n    \n    p1 = c(1.,-1.,-1.);\n    p2 = c(-1.,-1.,-1.);\n    p3 = c(-1.,-1.,1.);\n    p4 = c(1.,-1.,1.);\n    \n    uv2 = uvQuad(p1,p2,p3,p4,uv);\n    col += texture(iChannel0, uv2).rgb*pointInsideQuad(p1,p2,p3,p4,uv);\n    \n    p1 = c(-1.,-1.,-1.);\n    p2 = c(-1.,1.,-1.);\n    p3 = c(-1.,1.,1.);\n    p4 = c(-1.,-1.,1.);\n    \n    uv2 = uvQuad(p1,p2,p3,p4,uv);\n    col += texture(iChannel0, uv2).rgb*pointInsideQuad(p1,p2,p3,p4,uv);\n    \n    p1 = c(1.,-1.,-1.);\n    p2 = c(1.,1.,-1.);\n    p3 = c(-1.,1.,-1.);\n    p4 = c(-1.,-1.,-1.);\n    \n    uv2 = uvQuad(p1,p2,p3,p4,uv);\n    col += texture(iChannel0, uv2).rgb*pointInsideQuad(p1,p2,p3,p4,uv);\n    \n    if (col.r == 0. && col.g == 0. && col.b == 0.) {\n        col += texture(iChannel1, fragCoord/iResolution.xy).rgb;\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}