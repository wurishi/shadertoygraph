{"ver":"0.1","info":{"id":"msdGDn","date":"1677153545","viewed":57,"name":"Lunch","username":"Alexis7777777","description":".","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["table"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(37.,0.,15.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\nfloat Union(float a,float b)\n{\n  return min(a,b); //formule vue en cours\n}\n\nfloat Intersection(float a,float b)\n{\n  return max(a,b); //formule vue en cours\n}\n\nfloat Difference(float a,float b)\n{\n  return max(a, -b); //formule vue en cours\n}\n\nfloat SmoothUnion(float a, float b, float k ) \n{\n    float h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h); //formule vue en cours\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\n\n/*float Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}*/\n\n// Cylindre\n// p : point\n// c : first extremity\n// d : second extremity\n// r : radius\n\nfloat cylindre(vec3 p,vec3 centre1, vec3 centre2, float r)\n{\n  vec3 norme = normalize(centre1-centre2);\n  float longueur = length(p-centre2), scalaire = dot((p-centre2), norme);\n    \n  return max(max(sqrt(longueur*longueur - scalaire*scalaire) - r,dot((p-centre1), norme)),\n  -1.*dot((p-centre2), norme)); //formule vue en cours\n}\n\n// Half-sphere\n// p : point\n// c : center\n// d : norm\n// r : radius\n\n/*\nfloat demisphere(vec3 p, vec3 c, vec3 d, float r)\n{\n   return max(length(p-c)-r, dot((p-c), d));\n}\n\n// Capsule\n// p : point\n// c : first extremity\n// d : second extremity\n// r : radius\n*/\n\n/*\nfloat capsule(vec3 p, vec3 c, vec3 d, float rayon)\n{\n  float v = cylindre(p, c, d, rayon);\n  v = hUnion(v, demisphere(p, c, normalize(d-c), rayon), 0.03);\n  v = Union(v, demisphere(p, d, normalize(c-d), rayon), 0.03);\n  return v; //Un cylindre uni avec deux demi-sphère\n}\n*/\n\n// Plan\n// p : point\n// c : a point on the plan\n// d : norm of the plan\n\nfloat plan(vec3 p, vec3 c, vec3 d)\n{\n    return dot((p-c), d); //formule donnée en cours\n}\n\n// Box\n// p : point\n// c : center of the box\n// s : dimensions of the box\n\nfloat boite(vec3 p, vec3 c, vec3 s)\n{\n    vec3 q = abs(p-c) - s;\n    float dist = max(max(q.x, q.y), q.z);\n    if(q.x > 0.0 && q.y > 0.0 && q.z > 0.0)\n    {\n        dist = length(q);\n    }\n    return dist; //formule vue en cours\n}\n\n// Pyramid\n// p : point\n// c : center of the box who includes the pyramid\n// s : dimensions of this box \n\n/*\nfloat Pyramide(vec3 p, vec3 pos, vec3 size)\n{\n    float v = boite(p, pos, size) ;\n    float face1 = plan(p, normalize(vec3(0., -1./size.y, 1./size.z)), pos) ; \n    float face2 = plan(p, normalize(vec3(-1./size.x, 0., 1./size.z)), pos) ;\n    float face3 = plan(p, normalize(vec3(1./size.x, 0. , 1./size.z)), pos) ; \n    float face4 = plan(p, normalize(vec3(0., 1./size.y, 1./size.z)), pos) ; \n    return Intersection(v, Intersection(Intersection(face1, face2), Intersection(face3, face4)));\n    //une boite coupéé par des plans\n}\n*/\n\n// Cone\n// p : point\n// a : center of bigger circle\n// b : center of smaller circle\n// ra : radius of bigger circle\n// rb : radius of smaller circle \n\nfloat cone(vec3 p, vec3 a, vec3 b, float ra, float rb)\n{\n    float diffr  = rb-ra;\n    float baba = dot(b-a,b-a);\n    float papa = dot(p-a,p-a); \n    float paba = dot(p-a,b-a)/baba;\n\n    float x = sqrt( papa - paba*paba*baba );\n\n    float cax = max(0.0,x-((paba<0.5)?ra:rb));\n    float cay = abs(paba-0.5)-0.5;\n\n    float k = diffr*diffr + baba;\n    float f = clamp( (diffr*(x-ra)+paba*baba)/k, 0.0, 1.0 );\n\n    float cbx = x-ra - f*diffr;\n    float cby = paba - f;\n    \n    float s = (cbx < 0.0 && cay < 0.0) ? -1.0 : 1.0;\n    \n    return s*sqrt( min(cax*cax + cay*cay*baba,\n                       cbx*cbx + cby*cby*baba));\n    //fonction trouvée sur internet, j'ai ajouter moi même les paramètres ra et rb pour mes assietes\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\n\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n  float i, j;\n  \n  float table = cylindre(p, vec3(-8., -5., -6.),  vec3(-8., -5., 1.), 0.3);      // 4 pieds de la table\n  table = Union(table, cylindre(p, vec3(8., -5., -6.),  vec3(8., -5., 1.), 0.3));\n  table = Union(table, cylindre(p, vec3(8., 5., -6.),  vec3(8., 5., 1.), 0.3));\n  table = Union(table, cylindre(p, vec3(-8., 5., -6.),  vec3(-8., 5., 1.), 0.3));\n  table = Union(table, boite(p, vec3(0., 0., 1.),  vec3(10., 6.25, 0.2)));           //planche de la table\n  \n  float verre = Union(cylindre(p, vec3(-3., 2., 1.21),  vec3(-3., 2., 1.32), 0.5),   //support du verre\n                cylindre(p, vec3(-3., 2., 1.32),  vec3(-3., 2., 1.8), 0.07));   //tige du verre\n  verre = Union(verre,Difference(cone(p, vec3(-3., 2., 1.8), vec3(-3., 2., 2.3), 0.07, 0.65),\n                         cone(p, vec3(-3., 2., 1.8), vec3(-3., 2., 2.3), 0.02, 0.6)));   //cone du verre\n  \n  float bouteilles = SmoothUnion(cylindre(p, vec3(3., -4., 1.21),  vec3(3., -4., 2.2), 0.3), //union de deux cylindre pour faire une bouteille\n                           cylindre(p, vec3(3., -4., 2.3),  vec3(3., -4., 3.), 0.15), 0.3);\n                           \n  bouteilles = Union(bouteilles, SmoothUnion(cylindre(p, vec3(-6., 3.5, 1.21),  vec3(-6., 3.5, 3.2), 0.5), //une autre bouteille\n                           cylindre(p, vec3(-6., 3.5, 3.35),  vec3(-6., 3.5, 4.5), 0.2), 0.4));\n                           \n  float sol = plan(p, vec3(0., 0., -6.2), vec3(0., 0., 1.)); //sol de la pièce\n  \n  for(i=-3.;i<4.;i++) //création d'un carrelage lisse \n  {\n      for(j=-3.;j<4.;j++)\n      {\n      sol = SmoothUnion(sol, boite(p, vec3(5.*i, 5.*j, -6.1),  vec3(2.3, 2.3, 0.1)), 0.4);\n      }\n  }\n  \n  float assietes = SmoothUnion(\n  Difference(cone(p, vec3(0., 3., 1.8), vec3(0., 3., 1.3), 2., 1.2), //partie haute de l'assiete 1\n             cone(p, vec3(0., 3., 1.8), vec3(0., 3., 1.3), 1.9, 1.1)),\n             cylindre(p, vec3(0., 3., 1.21),  vec3(0., 3., 1.3), 1.2), 0.1); //partie basse de l'assiete 1\n  \n  assietes = Union(assietes, SmoothUnion(\n  Difference(cone(p, vec3(0., -3., 1.8), vec3(0., -3., 1.3), 2., 1.2), //partie haute de l'assiete 1\n             cone(p, vec3(0., -3., 1.8), vec3(0., -3., 1.3), 1.9, 1.1)),\n             cylindre(p, vec3(0., -3., 1.21),  vec3(0., -3., 1.3), 1.2), 0.1)); //partie basse de l'assiete 1\n  \n  float chaises = Union(cylindre(p, vec3(-2., 6., -6.),  vec3(-2., 6., -2), 0.3), //pieds de la chaise 1\n  cylindre(p, vec3(-2., 10., -6.),  vec3(-2., 10., 3.), 0.3));\n  chaises = Union(chaises, cylindre(p, vec3(2., 6., -6.),  vec3(2., 6., -2), 0.3));\n  chaises = Union(chaises, cylindre(p, vec3(2., 10., -6.),  vec3(2., 10., 3.), 0.3));\n  \n  chaises = Union(chaises, boite(p, vec3(0., 8., -1.75),  vec3(2.5, 2.5, 0.25))); //assise de la chaise 1\n  chaises = Union(chaises, boite(p, vec3(0., 10., 1.8),  vec3(2., 0.15, 1.2))); //dossier de la chaise 1\n  \n  chaises = Union(chaises, cylindre(p, vec3(-2., -6., -6.),  vec3(-2., -6., -2), 0.3)); //pieds de la chaise 2\n  chaises = Union(chaises, cylindre(p, vec3(-2., -10., -6.),  vec3(-2., -10., 3.), 0.3));\n  chaises = Union(chaises, cylindre(p, vec3(2., -6., -6.),  vec3(2., -6., -2), 0.3));\n  chaises = Union(chaises, cylindre(p, vec3(2., -10., -6.),  vec3(2., -10., 3.), 0.3));\n  \n  chaises = Union(chaises, boite(p, vec3(0., -8., -1.75),  vec3(2.5, 2.5, 0.25))); //assise de la chaise 2\n  chaises = Union(chaises, boite(p, vec3(0., -10., 1.8),  vec3(2., 0.15, 1.2))); //dossier de la chaise 2\n  \n  float v = Union(Union(Union(chaises, table), Union(verre, bouteilles)), Union(sol, assietes));\n  \n  return v;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(50.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=false;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}","name":"Image","description":"","type":"image"}]}