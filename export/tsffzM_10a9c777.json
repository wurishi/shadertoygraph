{"ver":"0.1","info":{"id":"tsffzM","date":"1587906331","viewed":187,"name":"spec amb diffuse lighting","username":"bradjamesgrant","description":"I'm a noob who forgets this stuff all the time. Hopefully helps someone else when searching for lighting examples\n\n28/05 - normalize l when doing dot prods","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["specularambientdiffuselighting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//off makes unlit surfaces still show bit of colour\nfloat diffuse(vec3 n, vec3 l){\n    l = normalize(l);\n    float off = 0.03;\n\treturn max(0.,dot(n,l)*.9)+off;\n}\n\n//higher s = larger effect area\n//higher e = more defined spec\n//higher m = scaled down overall lighting\nfloat spec(vec3 n, vec3 ro, vec3 rd, vec3 l,vec3 p){\n    l = normalize(l);\n    vec3 v = rd;\n    vec3 r = reflect(l,n);\n    float s = 0.15;\n    float e = 10.;\n    float m = 2.;\n    \n    //clamp before exp or you get light on both sides..\n    return pow(clamp(dot(v,r)-s,0.,1.),e)/m;\n}\n\n\nfloat map(vec3 p){\n    float c =length(p)-0.25;\n    \n\treturn c;\n   \n}\n\nvec3 calcNormal(vec3 p){\n\tvec2 e = vec2(0.001,0.);\n    return normalize(vec3(map(p+e.xyy)-map(p-e.xyy),\n                     map(p+e.yxy)-map(p-e.yxy),\n                     map(p+e.yyx)-map(p-e.yyx)));\n}\n\nvec3 castRay(vec3 ro, vec3 rd, vec3 l){\n\n    float t = 0.;\n    for(int i = 0; i<100; i++){\n    \tvec3 p = ro + t*rd;\n        float d = map(p);\n        t+=d;\n\t\tif(d>10.)\n            break;\n        if(d<0.01*t*.5){\n\t\t\tvec3 amb = vec3(0.4,0.5,0.6);\n            float ll = length(p-l);\n            float att=1.0/(1.0+0.1*ll+0.01*ll*ll);\n            vec3 n =calcNormal(ro + t*rd); \n        \treturn att*amb*vec3(diffuse(n, l)+spec(n,ro,rd,l, p) );\n            break;\n        }\n    }\n    return vec3(0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.x;\n \t\n   \n    vec3 ro = vec3(0.,0.,-1.);\n    \n    vec3 cf = -ro;\n    vec3 cs = cross(cf,vec3(0.,1.,0.));\n    vec3 cu = cross(cf, cs);\n\t                   \n   \tvec3 uuv = -ro*.1+uv.x*cs + uv.y*cu;\n    \n    vec3 rd = uuv-ro;\n    \n\n    vec3 p = vec3(0.);\n    float t = 0.;\n   \tfloat d = 0.;\n    vec3 l = vec3(sin(iTime),-1.,cos(iTime));\n    vec3 col = castRay(ro,rd, l);\n    \n   \n    \n    \n   \n    \n    fragColor = vec4(col,0.);\n}","name":"Image","description":"","type":"image"}]}