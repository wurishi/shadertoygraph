{"ver":"0.1","info":{"id":"l3XyDB","date":"1726609664","viewed":10,"name":"from kishimisu youtube","username":"remilandais","description":"based on https://www.youtube.com/watch?v=f4s1h2YETNY&t=1191s","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\n\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.283185*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //Translate so that center is (0.0,0.0)\n    //Then ensure coordinates are contained between -1 and 1\n    uv = (uv - 0.5)*2.0;\n    \n    //Ensure we are independant of aspect ratio\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float d = length(uv);\n     vec3 col = palette( d + iTime, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n\n    //d -= 0.5;\n    d = sin(d*8.0 + iTime)/8.0;\n    d = abs(d);\n    \n    //d = step(0.1,d);\n    \n    //d = smoothstep(0.0,0.1,d);\n    \n    //glow effect\n    d = 0.02/d;\n    // add color\n    \n    \n    \n    \n    \n\n    \n    col *=d;\n    \n    \n    // Output to screen\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}