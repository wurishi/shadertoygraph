{"ver":"0.1","info":{"id":"7tVGzh","date":"1637180000","viewed":82,"name":"mat4 Mandelbrot ","username":"akohdr","description":"A bit of un-golfing expressing Mandelbrot loop as single mat4 application with pleasant Julia-esque morph.\n\n","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","matrix"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Andrew Wild - akohdr/2021\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define USE_MAT4  // comment for mat3 version\n\nvoid mainImage( out vec4 k, vec2 c )\n{\n   // change of coordinates from screen to complex plane\n   c -= iResolution.xy/2.; c/= iResolution.y/2.4; \n   \n   // center the mandelbrot\n   c -= vec2(.5,0); \n   \n   // initialize\n   vec4 z = vec4(1);\n   \n   // temporal adjustment of initial condition produces the morph\n   float t = max(0.,2. - 2.4*sin(iTime/3.));\n   z *= vec4(t,-t,1,1);\n   \n   // main loop as single mat4/mat3 transform foregoing usual escape orbit check\n   for(int i=18; i>0; i--)\n   \n#ifdef USE_MAT4\n          z *= mat4( z.x,-z.y,   0, c.x,\n                     z.y, z.x,   0, c.y,\n                       0,   0,   1,   0,\n                       0,   0,   0,   1);\n   // swizzle z into rgba colour (blue/yellow)\n   k = z.rrgb;\n#else\n      z.rgb *= mat3( z.x,-z.y, c.x,\n                     z.y, z.x, c.y,\n                       0,   0,   1);\n   // swizzle z into rgba colour (red/green)\n   k = z.grra;\n#endif\n}\n\n\n/* Golf versions from other thread \n   (no anim, no centering or correct scaling)\n   \nvoid mainImage( out vec4 o, vec2 c )\n{\n    for(o-=o;o.a++<18.; o.gb=mat2(-o.b,o.ggb)*o.bg+c/2e2-2.);\n}\n\n\nvoid mainImage( out vec4 z, vec2 c )\n{\n    int i=21;\n    \n    c/=2e2; c-=2.;\n    z = vec4(0,0,1,0);\n    \n    while(--i>0)\n     z = mat4(mat3(z.xyw,\n                  -z.y,z.xw,\n                   c,1\n                  )) * z;\n}\n*/\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Minimal Golf Mandelbrot version SPIR-V\n\n; SPIR-V\n; Version: 1.0\n; Generator: Khronos Glslang Reference Front End; 1\n; Bound: 60\n; Schema: 0\n               OpCapability Shader\n          %1 = OpExtInstImport \"GLSL.std.450\"\n               OpMemoryModel Logical GLSL450\n               OpEntryPoint Fragment %4 \"main\"\n               OpExecutionMode %4 OriginLowerLeft\n               OpSource GLSL 110\n               OpName %4 \"main\"\n               OpName %14 \"mainImage(vf4;vf2;\"\n               OpName %12 \"o\"\n               OpName %13 \"c\"\n          %2 = OpTypeVoid\n          %3 = OpTypeFunction %2\n          %6 = OpTypeFloat 32\n          %7 = OpTypeVector %6 4\n          %8 = OpTypePointer Function %7\n          %9 = OpTypeVector %6 2\n         %10 = OpTypePointer Function %9\n         %11 = OpTypeFunction %2 %8 %10\n         %22 = OpTypeInt 32 0\n         %23 = OpConstant %22 3\n         %24 = OpTypePointer Function %6\n         %27 = OpConstant %6 1\n         %29 = OpConstant %6 18\n         %30 = OpTypeBool\n         %32 = OpConstant %22 2\n         %36 = OpTypeVector %6 3\n         %39 = OpTypeMatrix %9 2\n         %40 = OpConstant %6 0\n         %51 = OpConstant %6 200\n         %55 = OpConstant %6 2\n          %4 = OpFunction %2 None %3\n          %5 = OpLabel\n               OpFunctionEnd\n         %14 = OpFunction %2 None %11\n         %12 = OpFunctionParameter %8\n         %13 = OpFunctionParameter %10\n         %15 = OpLabel\n         %16 = OpLoad %7 %12\n         %17 = OpLoad %7 %12\n         %18 = OpFSub %7 %17 %16\n               OpStore %12 %18\n               OpBranch %19\n         %19 = OpLabel\n         %25 = OpAccessChain %24 %12 %23\n         %26 = OpLoad %6 %25\n         %28 = OpFAdd %6 %26 %27\n               OpStore %25 %28\n         %31 = OpFOrdLessThan %30 %26 %29\n               OpLoopMerge %20 %19 None\n               OpBranchConditional %31 %21 %20\n         %21 = OpLabel\n         %33 = OpAccessChain %24 %12 %32\n         %34 = OpLoad %6 %33\n         %35 = OpFNegate %6 %34\n         %37 = OpLoad %7 %12\n         %38 = OpVectorShuffle %36 %37 %37 1 1 2\n         %41 = OpCompositeExtract %6 %38 0\n         %42 = OpCompositeExtract %6 %38 1\n         %43 = OpCompositeExtract %6 %38 2\n         %44 = OpCompositeConstruct %9 %35 %41\n         %45 = OpCompositeConstruct %9 %42 %43\n         %46 = OpCompositeConstruct %39 %44 %45\n         %47 = OpLoad %7 %12\n         %48 = OpVectorShuffle %9 %47 %47 2 1\n         %49 = OpMatrixTimesVector %9 %46 %48\n         %50 = OpLoad %9 %13\n         %52 = OpCompositeConstruct %9 %51 %51\n         %53 = OpFDiv %9 %50 %52\n         %54 = OpFAdd %9 %49 %53\n         %56 = OpCompositeConstruct %9 %55 %55\n         %57 = OpFSub %9 %54 %56\n         %58 = OpLoad %7 %12\n         %59 = OpVectorShuffle %7 %58 %57 0 4 5 3\n               OpStore %12 %59\n               OpBranch %19\n         %20 = OpLabel\n               OpReturn\n               OpFunctionEnd\n*/","name":"Common","description":"","type":"common"}]}