{"ver":"0.1","info":{"id":"7sXXDN","date":"1618692238","viewed":60,"name":"313_sorokin_v1v6","username":"kitkote","description":"Magic cube with water inside the cube\n1) Anti-aliasing\n2) Hard & Soft shadows\n3) Cubemap\n","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["cg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nconst float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(-7.0 , 3, -7);\nconst vec3 LIGHT1_POS = vec3(-2, 1.5, 1);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 0.1, 1);\n\nconst vec3 LIGHT2_POS = vec3( 1, 1, -1.5);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.1, 0.1, 1);\nvec3 randDir;\n\nstruct Square {\n    vec3 v[4];\n};\n\nstruct Cube {\n    vec3 p[3];\n};\n\n\nfloat pow2(float x) {\n    return x * x;\n}\n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-2. - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if ( abs(worldPos.x) >= 10.0f || abs(worldPos.z) >=10.0f ) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 3.0) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 3.0f;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n\nfloat traceSide(vec3 pos, vec3 dir, vec3 p0, vec3 p1, vec3 p2, out vec3 normal) {\n    normal = normalize(cross(p2 - p0, p1 - p0));\n    float d = dot(normal, dir);\n    if (abs(d) <  0.0001f) {\n        return INF;\n    }\n    float t = dot(p0 - pos, normal) / d;\n    return t < 0.0 ? INF : t;\n}\n\n#define orient(a, b, c, normal) dot(cross(b - a, c - a), normal)\n\nfloat traceSquare(vec3 pos, vec3 dir, Square s, out vec3 normal) {\n    float t = traceSide(pos, dir, s.v[0], s.v[1], s.v[3], normal);\n    if (t == INF) {\n        return INF;\n    }\n    vec3 q = pos + dir * t;\n    float o1 = orient(q, s.v[0], s.v[1], normal);\n    float o2 = orient(q, s.v[1], s.v[2], normal);\n    float o3 = orient(q, s.v[2], s.v[3], normal);\n    float o4 = orient(q, s.v[3], s.v[0], normal);\n    if (o1 * o2 > 0.0 && o2 * o3 > 0.0 && o3 * o4 > 0.0) {\n        return t;\n    }\n    return INF;\n}\n\nfloat traceCube(vec3 pos, vec3 dir, Cube cube, out vec3 normal) {\n    vec3 p0 = cube.p[0];\n    vec3 p1 = cube.p[1];\n    vec3 p2 = cube.p[2];\n    vec3 a = p2 - p0;\n    vec3 b = p1 - p0;\n    vec3 c = normalize(cross(a, b)) * length(a);\n    vec3 p3 = p2 + b;\n    vec3 p4 = p0 + c;\n    vec3 p5 = p4 + b;\n    vec3 p6 = p4 + a;\n    vec3 p7 = p6 + b;\n    Square s1 = Square(vec3[4](p0, p1, p3, p2));\n    Square s2 = Square(vec3[4](p0, p4, p6, p2));\n    Square s3 = Square(vec3[4](p3, p6, p7, p3));\n    Square s4 = Square(vec3[4](p3, p7, p5, p1));\n    Square s5 = Square(vec3[4](p1, p5, p4, p0));\n    Square s6 = Square(vec3[4](p4, p5, p7, p6));\n    Square s[6] = Square[6](s1, s2, s3, s4, s5, s6);\n    float t = INF;\n    vec3 normTmp;\n    for (int i = 0; i < s.length(); i++) {\n        float tt = traceSquare(pos, dir, s[i], normTmp);\n        if ( tt < t) {\n            t = tt;\n            normal = normTmp;\n        }\n    }\n    return t;\n}\n\n\n\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\n\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float WATER_N = 1.33;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float WATER_R = pow2(GLASS_N - WATER_N) / pow2( GLASS_N + WATER_N);\n\n   \n   Cube cube = Cube(vec3[3](\n    vec3(-1.0, -0.99, -1.0), \n    vec3(1.0, -0.99, -1.0), \n    vec3(-1.0, -0.99, 1.0)\n));\n\n   \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        vec3 cubeNorm;\n        float cubeT = traceCube(curPos, curDir, cube, cubeNorm);\n        if (cubeT < t) {\n            t = cubeT;\n            normal = -cubeNorm;\n            if (randVals.x < GLASS_R* 2.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(1, 0.9, 0.8);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter =   WATER_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        \n\n        float sph2T = traceSphere(curPos, curDir, 0.55, cubeNorm);\n        if (sph2T < t) {\n            t = sph2T;\n            normal = -cubeNorm;\n            if (randVals.x < WATER_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(0.5, 1, 0.5);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                } else {\n                    nEnter = WATER_N;\n                }\n            }\n        }\n      \n          \n       \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-3;\n            } else if (materialType == REFRACTION) {\n              curDir = refraction(curDir, normal, n1, nEnter);\n              curPos = worldPos + curDir * 1e-3;\n              n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}\n","name":"Buffer B","description":"","type":"buffer"}]}