{"ver":"0.1","info":{"id":"Wtl3z8","date":"1555630347","viewed":127,"name":"Differential Julia","username":"rory618","description":"Using automatic differentiation to find the local translation caused by varying the value c. This technique can be expanded to allow for varying parameters of a fractal while zoomed in but following the same feature you zoomed into. Use mouse to vary c","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["2d","fractal","ad"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R (iResolution.xy)\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    float scale = 2.;\n    vec2 s = (iMouse.xy-R.xy/2.)/R.y*scale;\n\tvec2 c = (i-R.xy/2.)/R.y*scale;\n    \n    float col=0.;\n    \n    vec2 z = vec2(c);\n    for(int i = 0; i < 32; i++){\n         z = mat2(z,-z.y,z.x)*z + s;\n        if(length(z) > 2.){\n            col = float(i);\n            break;\n        }\n    }\n    \n    //Optional direct overlay\n\to =  0.0*vec4(sin(.25*log(1.+col)*vec3(3,4,5)),1.0);\n    \n\n    o += texture(iChannel0, i/R.xy);\n    \n\n}\n\n/*\n                                                     \n                    Explination:                                               \n                                                                                                \n       Firstly, let z = F(s,c,N) be the                                                  \n     result z_N of iterating z_n+1 = z_n ^ 2 + c                                               \n     times, with z_0 = s. Iterative formulas                                               \n     for dz/ds and dz/dc can be derived easily.                                               \n                                                                                                \n         Starting with z_0:                                               \n                                                                                                                                               \n     dz_0/ds = d/ds (s) = 1\n     dz_0/dc = d/dc (s) = 0                                               \n                                                 \n          The general case z_n+1, using chain rule \n          to depend on previous iteration:\n  \n     dz_n+1/ds = d/ds (z_n+1) = d/ds (z_n ^ 2 + c) = 2*z_n*dz_n/ds\n     dz_n+1/dc = d/dc (z_n+1) = d/dc (z_n ^ 2 + c) = 2*z_n*dz_n/dc + 1\n  \n  \n       Now the effect of the starting location and \n     seed parameter on the resulting z value can \n     be computed along with z itself.\n  \n       Introduce the known quantity dc/dt, the variation \n     of the seed parameter over time. Additionally, the \n     values dz/dt and ds/dt are important and will be \n     found. ds/dt is a variation in the starting value of\n     z which is a scaled pixel coordinate, so a non zero\n     ds/dt represents a sliding translation. If the sliding \n     translating exactly matches the way the shape of the\n     fractal evolves as c changes over time, then the \n     translation is following the local structure of the \n     fractal, and the value z does not change, thus dz/dt = 0\n  \n          Expanding dz/dt in terms of its partial derivatives gives:\n  \n     dz/dt = dz/dc dc/dt + dz/ds ds/dt = 0\n  \n          All but one quantity here is unknown, so the local\n          translation ds/dt is found by rearranging:\n  \n     -(dz/dc dc/dt)/(dz/ds) = ds/dt\n  \n         Advecting a completely different image by ds/dt demonstrates\n      that the approach works.\n\n\n          Summary/general approach\n        Solve for all partial derivatives of a fractals orbit endpoint wrt\n      the parameters and the pixel coordinate (this starting parameter only\n      in the case of a julia set). Then solve for ds/dt in terms of the known\n      quantities using the expansion of dz/dt.\n\n\n*/","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 julia(vec2 c, vec2 s){\n    vec2 z = vec2(c);\n    for(int i = 0; i < 256; i++){\n         z = mat2(z,-z.y,z.x)*z + s;\n        if(length(z) > 2.){\n            return vec3(z,i+1);\n        }\n    }\n    return vec3(z,0);\n}\n\n#define R (iResolution.xy)\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    float scale = 2.;\n    vec2 c = (iMouse.xy-R.xy/2.)/R.y*scale;\n\tvec2 s = (i-R.xy/2.)/R.y*scale;\n    \n    vec2 dcdt = (iMouse.xy-texture(iChannel0, vec2(0)).xy )/R.y*scale;\n    \n    float col=0.;\n    \n    vec2 z = vec2(s);\n    vec2 dzdc = vec2(0);\n    vec2 dzds = vec2(1,0);\n    for(int i = 0; i < 32; i++){\n        \n        dzdc = vec2(1,0) + 2.*cprod(z,dzdc);\n        dzds = 2.*cprod(z,dzds);\n        z = csqr(z) + c;\n        if(length(z) > 2.){\n            col = float(i);\n            break;\n        }\n    }\n    \n    //z_ = vec2(1,-1)*z_/dot(z_,z_);\n    \n    vec2 dsdt = -cdivide(cprod(dzdc,dcdt),dzds);\n    \n    //vec2 dzdt = mat2(z_,-z_.y,z_.x)*c_;\n    \n    //col = atan(z_.y,z_.x);\n    \n\to =  vec4(sin(.25*log(1.+col)*vec3(3,4,5)),1.0);\n    \n    o = vec4(R.y*1.*dsdt+.5,0,1);\n    o.xy = dsdt*R.y/scale;\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n#define R (iResolution.xy)\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    if(iFrame<3 || texture(iChannel1,vec2(0)).xyz==vec3(0)){\n    \to = texture(iChannel0, i/R.xy);\n    } else {\n        vec4 oMouse = texture(iChannel3, vec2(0));\n        if(iMouse.z>0. && oMouse.z>0.){\n        \to = texture(iChannel1, (i - texture(iChannel2, i/R.xy).xy)/R.xy);\n    \t} else {\n            o = texture(iChannel1, i/R.xy);\n        }\n        if(i.x<1. || i.t<1.||i.y+1.>R.y||i.x+1.>R.x){\n\n            o = vec4(0.5 + 0.5*cos(iTime+(i/R.xy).xyx+vec3(0,2,4)),1.0);\n        }\n    }\n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec2 cprod(vec2 a, vec2 b){\n    return vec2(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);\n}\nvec2 csqr(vec2 a){\n    return cprod(a,a);\n}\nvec2 conj(vec2 z) {\n    return vec2(1,-1)*z;\n}\nfloat cabs(vec2 z) {\n    return sqrt(cprod(z,conj(z)).x);\n}\nfloat cabs2(vec2 z) {\n    return cprod(z,conj(z)).x;\n}\nvec2 cinv(vec2 z){\n    return conj(z)/cabs2(z);\n}\nvec2 cdivide(vec2 a, vec2 b){\n    return cprod(a,cinv(b));\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\n#define R (iResolution.xy)\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    o = iMouse;\n    \n}","name":"Buffer C","description":"","type":"buffer"}]}