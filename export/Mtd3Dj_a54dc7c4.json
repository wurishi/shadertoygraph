{"ver":"0.1","info":{"id":"Mtd3Dj","date":"1471797037","viewed":105,"name":"Necromurlok - Centers","username":"Necromurlok","description":"Centers","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["kernel","core","centers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CORES 8.0\n#define CORECENTERRADIUS 0.2\n#define CORERADIUS 0.05\n#define CENTER vec2(0.0, 0.0)\n#define PI (3.1415926535897932384626433832795)\n#define CORESTEP ((2.0 * PI) / CORES)\n#define COREDELAY CORESTEP * 2.0\n#define CORESPEED 2.0\n#define SPLITVIEWPORT 4.0\n\nfloat texel; // = SPLITVIEWPORT / (iResolution.x < iResolution.y ? iResolution.x : iResolution.y); //min(iResolution.x, iResolution.y, 2.0));\nfloat texelPowered; // = (texel * texel);\n\nfloat line(in vec2 uv, in vec2 p0, in vec2 p1)\n{\n    vec2 line = p1 - p0;\n    vec2 dir = uv - p0;\n    \n    float h = clamp(dot(dir, line) / dot(line, line), 0.0, 1.0);\n    dir -= line * h;\n    \n    return 1.0 - smoothstep(-texelPowered, texelPowered, dot(dir, dir) - texelPowered * 0.025);\n}\n\nfloat circle(in vec2 uv, in vec2 center, in float radius)\n{\n    vec2 d = uv - center;\n    return 1.0 - smoothstep(0.0, texelPowered, abs(dot(d, d) - (radius * radius)) - texelPowered * 8.0);\n}\n\nvec2 getCoreCenter(float core)\n{\n   return vec2(sin(CORESTEP * core ) * CORECENTERRADIUS, cos(CORESTEP * core) * CORECENTERRADIUS);\n    \n}\n\nvec2 getCoreLocation(vec2 coreCenter, float core)\n{\n    float time = (iTime * CORESPEED) + (core * COREDELAY);\n    \n    return coreCenter + vec2(sin(time) * CORERADIUS, cos(time) * CORERADIUS);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    texel = SPLITVIEWPORT / (iResolution.x < iResolution.y ? iResolution.x : iResolution.y); //min(iResolution.x, iResolution.y, 2.0));\n    texelPowered = (texel * texel);\n\tvec2 uv = (mod(fragCoord.xy * SPLITVIEWPORT, iResolution.xy) - (iResolution.xy * 0.5)) / iResolution.xx;\n    \n    float fragIntensity = 0.0;\n    \n//    float texelSize = 1.0 / (iResolution.x < iResolution.y ? iResolution.x : iResolution.y);\n    \n    for (float c = 0.0; c < CORES; c += 1.0)\n    {\n        vec2 parentCoreCenter = getCoreCenter(c);\n        vec2 parentCoreLocation = getCoreLocation(parentCoreCenter, c);\n        for (float cp = 1.0; cp < CORES - 1.0; cp += 1.0)\n        {\n            float currentCore = mod(c + cp, CORES);\n            fragIntensity = max(fragIntensity, line(uv, parentCoreLocation, getCoreLocation(getCoreCenter(currentCore), currentCore)));\n            \n        }\n        fragIntensity = max(fragIntensity, circle(uv, parentCoreCenter, CORERADIUS)); \n    }\n\tfragColor = vec4(vec3(fragIntensity),1.0);\n}","name":"Image","description":"","type":"image"}]}