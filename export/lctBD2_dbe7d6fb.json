{"ver":"0.1","info":{"id":"lctBD2","date":"1733515323","viewed":58,"name":"Linear Cubic Quintic samplers","username":"Beherith","description":"Dissatisfied with linear texture filtering on magnificatoin, I overrode the calculations. Happy with the results","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["texturesampler"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 CubicSampler(vec2 uvsin, vec2 texdims){\n    vec2 r = uvsin * texdims - 0.5;\n    vec2 tf = fract(r);\n    vec2 ti = r - tf;\n    tf = tf * tf * (3.0 - 2.0 * tf);\n    return (tf + ti + 0.5)/texdims;\n}\n\nvec2 QuinticSampler(vec2 uvsin, vec2 texdims){\n    vec2 r = uvsin * texdims - 0.5;\n    vec2 tf = fract(r);\n    vec2 ti = r - tf;\n    tf = tf * tf * tf * (tf * (6.0 * tf - 15.0) + 10.0);\n    return (tf + ti + 0.5)/texdims;\n}\n\nvec2 OctalSampler(vec2 uvsin, vec2 texdims){\n    vec2 r = uvsin * texdims - 0.5;\n    vec2 tf = fract(r);\n    vec2 ti = r - tf;\n    tf = tf * tf * (3.0 - 2.0 * tf);\n    tf = tf * tf * tf * (tf * (6.0 * tf - 15.0) + 10.0);\n    return (tf + ti + 0.5)/texdims;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float pos = fragCoord.x/iResolution.x;\n    vec2 ts = vec2(64.0,64.0);\n    vec3 col = vec3(0.0);\n\n    uv *= 0.125;\n    // Left to right: biliear, cubic, quintic, octal\n    if (pos > 0.75){\n        uv = OctalSampler(uv, ts);\n    }else \n    if (pos > 0.5){\n        uv = QuinticSampler(uv, ts);\n    }else \n    if (pos > 0.25){\n        uv = CubicSampler(uv, ts);\n    }else {\n        uv = uv;\n    }\n    \n    col = texture(iChannel0, uv).rrr;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}