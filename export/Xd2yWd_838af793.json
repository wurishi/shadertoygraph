{"ver":"0.1","info":{"id":"Xd2yWd","date":"1494389210","viewed":330,"name":"Simulating B&W Film Stock","username":"jimhejl","description":"No look up tables. Just matching the response of physical film with curve-fitting. There's a whole art to making color images 'appear' authentic to B&W film stock. So this project is in pursuit of that.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["filmic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// linear exposure \nconst float E = 2.0;\n\n\n/*--------------------------------------- PostFilmic_IlfordFp4Push ---\n |\n |  Function PostFilmic_IlfordFp4Push            \n |\n |  Purpose: This function approximates the black and white film stock \n |  \"Ilford FP4\" pushed to 400 ISO. It is typical for noir style. This \n |  tonal transformation does not approximate gamma2.2, so an explicit \n |  sRGB transform should be performed before display. I secretly love\n |  it when my function comment text formatting is perfectly justified\n |\n |  Parameters:\n |      float3 c   (IN) -- Color pixel in linear space\n |      float2 uv  (IN) -- Screen space UV for vignette\n |\n |  Returns:  Filmic remapped pixel in gamma 1.0 space\n |\n |   05-04-17   v1.1   Jim Hejl\n *-------------------------------------------------------------------*/\nvec3 PostFilmic_IlfordFp4Push(vec3 c, vec2 uv)\n{\n   // Ilford measured coefficients\n   const vec3 cb = vec3( 0.0307479,  0.00030400, -0.04458630);\n   const vec3 de = vec3(-0.0095000, -0.00162400, -0.01736670);\n   const vec3 df = vec3( 0.1493590,  0.21412400,  1.85780000);\n   \n   \t// Quick approximation of overall response curve in linear space\n    // I'm factoring this power shape out of the channel response curves\n    // because it improves the curve fit\n   c = c * c; \n   \n   // evaluate color channels\n   vec3 ax = vec3(2.36691,5.14272,0.49020)*c;\n   vec3 pn = (c*(ax+cb)+de);\n   vec3 pd = (c*(ax+vec3(0.022,0.004,-0.10543))+df);\n   \n   // collapse color channels\n   float  pr = dot(clamp(pn/pd,0.0,1.0),vec3(.5));\n \n   // vignette\n   float pv = pow(1.0 - dot(uv-.5, uv-.5), -1.758) + -.13;\n   return vec3(mix(pr,pr*pr,pv*pr));   // done\n}\n\n//---------------------------------------------------------------------------------\n\nvec3 linear_srgb(vec3 x) \n{\n    return mix(1.055*pow(x, vec3(1./2.4)) - 0.055, 12.92*x, step(x,vec3(0.0031308)));\n}\n\nvec3 srgb_linear(vec3 x) \n{\n    return mix(pow((x + 0.055)/1.055,vec3(2.4)), x / 12.92, step(x,vec3(0.04045)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    // sample and move to linear space\n    vec3 color;\n    color = texture(iChannel0, uv).rgb;\t\t\t\t\n    color = srgb_linear(color)*E;\t\t\t\t\t\n\n\n    // apply Ilford Fp4 simulation\n    color = PostFilmic_IlfordFp4Push(color,uv);\n\n    // back to sRGB  \n    color = clamp(linear_srgb(color), 0.0, 1.0);\t \n\n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}