{"ver":"0.1","info":{"id":"wtBcDm","date":"1594521893","viewed":98,"name":"perlin noodleys expanded","username":"surgery_waves","description":"alsdf","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["idklol"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float twopi = radians(360.);\n\nfloat random (in vec2 st, vec2 coeff, float scaler) {\n    return fract(sin(dot(st.xy, coeff) * scaler));\n    }\n                 \nfloat noise (in vec2 st, vec2 coeff, float scaler) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i, coeff, scaler);\n    float b = random(i + vec2(1.0, 0.0), coeff, scaler);\n    float c = random(i + vec2(0.0, 1.0), coeff, scaler);\n    float d = random(i + vec2(1.0, 1.0), coeff, scaler);\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n\n                 \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 uvhalf = uv.xy / 2. * 0.5;\n    \n    float centerDist = distance(uv.xy, uvhalf);\n    \n    float bill = cos(fract(0.142 * iTime)*twopi);\n    float gaffigan = sin(fract(iTime * 0.0014) * twopi + centerDist);\n            \n    float pos = noise(uv.xy + 0.3 * 0.4 + 1.3 * sin(dot(1.-uv.yx, vec2(centerDist)) * centerDist + fract(iTime * 0.075161) * radians(360.)), \n                      vec2(431.51,3330.311),\n                      23.21 + centerDist);\n  \n    // Time varying pixel color\n    vec3 col = iTime * pos / centerDist * vec3(uv.xy + pos*0.3 + 5., sin(centerDist * 4. * radians(360.)) + bill * 0.2) + vec3(0.10,0.3,0);\n\n    // Output to screen\n    fragColor = vec4(1. / col * vec3(0.33 * gaffigan * bill + 0.251,\n                                0.144 + centerDist * bill,\n                                pow(gaffigan, 0.5) / centerDist),\n                     1.0);\n}","name":"Image","description":"","type":"image"}]}