{"ver":"0.1","info":{"id":"MttSRl","date":"1481251046","viewed":228,"name":"Red Pill Blue Pill","username":"Passion","description":"Pill capsules.","likes":6,"published":1,"flags":64,"usePreview":0,"tags":["raymarch","cubemap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"lsS3WW","filepath":"https://soundcloud.com/michael-wittering/call-of-duty-modern-warfare-2","previewfilepath":"https://soundcloud.com/michael-wittering/call-of-duty-modern-warfare-2","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_STEPS 64\n#define EPS 0.001\n#define MAX_DIST 10.0\n\n#define CAP_R .50\n#define CAP_C .50\n\nconst vec3 luma = vec3(0.299, 0.587, 0.114);\n// used for the reflected and refracted cubemaps\nvec4 applyGreyScale(in vec4 color){\n    float grey = dot(color.rgb, luma);\n    return vec4(vec3(grey), 1.0);\n}\n//\nmat3 lookAt(vec3 origin, vec3 target, float roll) {\n  vec3 rr = vec3(sin(roll), cos(roll), 0.0);\n  vec3 ww = normalize(target - origin);\n  vec3 uu = normalize(cross(ww, rr));\n  vec3 vv = normalize(cross(uu, ww));\n\n  return mat3(uu, vv, ww);\n}\n\nmat2 r2D(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(s, c, -c, s);\n}\n\n// Capsule: A Cylinder with round caps on both sides - was fCapsule\n// mercury.sexy/hg_sdf/\nfloat map(vec3 p, float r, float c) {\n    p.x-= -1.;\n    p.yz*=r2D(iTime);  \n    \n\tfloat c1 = mix(length(p.xz) - r, length(vec3(p.x, abs(p.y) - c, p.z)) - r, step(c, abs(p.y)));\n    \n    p.x -= 2.;\n    p.yz*=r2D(iTime);\n    p.xz*=r2D(iTime);  \n    p.zx*=r2D(-iTime*2.5);\n    float c2 = mix(length(p.xz) - r, length(vec3(p.x, abs(p.y) - c, p.z)) - r, step(c, abs(p.y)));\n\t\n    return min(c1, c2);\n}\n\nfloat trace(vec3 o, vec3 r){\n    float t = 0.0;\n    for(int i = 0; i < NUM_STEPS; i++){\n        vec3 p = o+r * t;\n        float d = map(p, CAP_R, CAP_C);\n        if(d < EPS || t > MAX_DIST)\n            break;\n        t += d *0.75;\n    }\n    return t;\n}\n\nvec3 getNormal(vec3 p){\n    vec2 e = vec2(EPS, 0.0);\n    return normalize((vec3(map(p+ e.xyy, CAP_R, CAP_C), \n                 \t  \t   map(p+ e.yxy, CAP_R, CAP_C),\n                 \t  \t   map(p+ e.yyx, CAP_R, CAP_C)) - map(p, CAP_R, CAP_C))/ e.x);\n}\n\nvec3 hash33(vec3 p){ \n    float n = sin(dot(p, vec3(7, 157, 113)));    \n    return fract(vec3(2097152, 262144, 32768)*n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    fragColor=vec4(0.0);\n    \n    vec3 l = normalize(vec3(0.2, 0.8, 0.3));\n    float time = iTime;\n    \n    float zS = .4*sin(time)*.5 + .5;\n    \n    vec3 o = vec3(zS+sin(-time)*3., sin(time), zS+cos(-time)*3.);\n    mat3 camMat = lookAt(o, vec3(0.0), sin(time*.3)*cos(time*.7));\n\n    vec3 r = camMat * vec3(uv, 1.0-dot(uv,uv)*.15);\n    \n    float c = .0;\n    c = max(c + dot(hash33(vec3(r))*2.-1., vec3(0.1)), 0.);\n    \n    float hit = trace(o, r);\n    vec3 sp = o+r * hit;\n    float d = map(sp, CAP_R, CAP_C);\n    \n    vec3 n = getNormal(sp);\n    \n    vec3 bg = vec3(0.0);\n    float fog = smoothstep(0.2, 0.5, hit*.03);    \n    \n    vec3 incident = normalize(sp - o);  \n\n    vec3 reflected = normalize(reflect(incident,n)); //, 1.31\n    vec3 refracted = normalize(refract(incident,n,1.31));\n    \n    reflected.y*=-1.;\n    refracted.y*=-1.;\n    \n    vec4 mm = applyGreyScale(texture(iChannel0, reflected));\n    vec4 m1 = applyGreyScale(texture(iChannel0, refracted));\n    \n    if(d < EPS){\n        float dif = clamp(dot(n, l), 0.15, 1.0);\n        vec3 hv = normalize(l - r);\n        float spec = pow(max(dot(n, hv), 0.0), 80.0);\n        fragColor = mix(mm*m1+vec4(dif)*vec4(1.0+sin(time), .0, -sin(time), 1.0) + \n                        spec, vec4(bg, 1.0), fog) + -c;\n    }\n    else\n        fragColor = vec4(texture(iChannel1, vec3(r.x,r.y*-1.,r.z))) + -c;\n    \n    if(abs(uv.y) > .8)\n        fragColor = vec4(0.0);\n}\n","name":"Image","description":"","type":"image"}]}