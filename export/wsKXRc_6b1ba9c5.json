{"ver":"0.1","info":{"id":"wsKXRc","date":"1574668481","viewed":1640,"name":"Height Blend","username":"granito","description":"A height blend shader demonstration. *Height map and Normal map generated from input textures in BufA/BufB.","likes":10,"published":3,"flags":32,"usePreview":0,"tags":["normalmap","heightmap","heightblend","textureblend"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //sample textures A+B for diffuse\n    vec2 uv = fragCoord/1024.;\n    vec4 ch0 = texture(iChannel0, uv);\n    vec4 ch1 = texture(iChannel1, uv);\n    //sample buffers (normal + height)\n    uv = fragCoord/iResolution.xy;\n    vec4 nh0 = texture(iChannel2, uv);\n    vec4 nh1 = texture(iChannel3, uv);  \n    \n    //lighting setup\n    vec3 lightdir = normalize(vec3(sin(iTime*0.2),-cos(iTime*0.2),0.25)); //grazing light orbiting surface\n    float lightgrad = distance(-lightdir.xy, uv - 0.5);\n    \n    //do the height stuff\n\tfloat heightwave = sin(iTime*0.4 - uv.x * 2.5);     \n    float heightblend = 1. - smoothstep( 0., .15, max(nh0.w + heightwave ,nh1.w) - nh1.w  );\n    float heightblendNRM = 1. - smoothstep( 0., .6, max(nh0.w + heightwave ,nh1.w) - nh1.w  ); //softer mask for normal blending  \n\n    //blend diffuse maps\n    fragColor = mix( ch0, ch1, heightblend);\n    fragColor = mix( fragColor, vec4(0.5), 0.5);\n    \n    //tint maps\n    fragColor *= mix( vec4(1.,0.7,0.6,1.), vec4(0.75,1.,0.75,1.), heightblend);\n\n    //prepare normals\n    vec3 mixnormal = mix( nh0.xyz, nh1.xyz, heightblendNRM);\n    \n    //apply lighting\n    float ndotl = dot( mixnormal , lightdir);\n    vec3 ambient = vec3(.5) * pow(mix( nh0.w, nh1.w, heightblend),0.5);\n    fragColor.xyz *= vec3(ndotl * lightgrad) + ambient;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Texture A : Normal(RGB) + Height(A)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/1024.;\n    fragColor = GenerateNormalHeightMultipass( iChannel0, uv, iResolution.xy);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Texture B : Normal(RGB) + Height(A)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/1024.;\n    fragColor = GenerateNormalHeightMultipass( iChannel0, uv, iResolution.xy);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const vec3 GrayscaleWeights = vec3(0.2125,0.7154,0.0721);\n\n// Sample map to generate Normal map and Height map\nvec4 GenerateNormalHeight (sampler2D tex, vec2 uv, vec2 res, float width)\n{\n    vec2 texelSize = 1. / (res * width);\n    vec4 h;\n    h[0] = dot(GrayscaleWeights, texture(tex, uv + vec2(texelSize * vec2( 0,-1)) ).rgb);\n    h[1] = dot(GrayscaleWeights, texture(tex, uv + vec2(texelSize * vec2(-1, 0)) ).rgb);\n    h[2] = dot(GrayscaleWeights, texture(tex, uv + vec2(texelSize * vec2( 1, 0)) ).rgb);\n    h[3] = dot(GrayscaleWeights, texture(tex, uv + vec2(texelSize * vec2( 0, 1)) ).rgb);\n    vec3 n;\n    n.y = h[0] - h[3];\n    n.x = h[1] - h[2];\n    n.z = .25;\n    float height = dot(GrayscaleWeights, texture(tex, uv).rgb);\n    return vec4(normalize(n), height);\n}\n\n// Multipass version of above\nvec4 GenerateNormalHeightMultipass (sampler2D tex, vec2 uv, vec2 res)\n{\n    float dist = 0.5;\n    vec4 multi;\n\tmulti += GenerateNormalHeight(tex, uv, res, 1. * dist);\n\tmulti += GenerateNormalHeight(tex, uv, res, 2.5 * dist);\n\tmulti += GenerateNormalHeight(tex, uv, res, 5. * dist);\n\tmulti += GenerateNormalHeight(tex, uv, res, 10. * dist);    \n    multi *= 0.25;\n    return multi;\n}\n\nfloat saturate (float x)\n{\n    return clamp( x, 0., 1.);\n}\n","name":"Common","description":"","type":"common"}]}