{"ver":"0.1","info":{"id":"stB3zy","date":"1624123896","viewed":114,"name":"loading animation","username":"dstratonov","description":"loading animation","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circles","simple","animation","loading"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float innerRadius = 0.45;\nfloat outterRadius = 0.5;\nfloat segmentAngle = 0.7;\nfloat PI = 3.14;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 resultColor = vec3(1.0);\n    vec2 uv = fragCoord/iResolution.xy;\n    float pix = 1./iResolution.y;\n    float x = sin(iTime);\n    float y = cos(iTime) * abs(cos(iTime));\n    \n    vec2 movingPoint = vec2(x, y);\n    float distToCenter = distance(uv, vec2(0.5, 0.5));\n    \n    vec2 newUv = uv - vec2(0.5, 0.5);\n    float cosA = dot(newUv, movingPoint) / (length(newUv) * length(movingPoint));\n    segmentAngle *= abs(y);\n    \n    float coefForDist = smoothstep(innerRadius - pix, innerRadius + pix, distToCenter) * smoothstep(distToCenter - pix, distToCenter + pix, outterRadius);\n    float coefForAngle = smoothstep(cosA - pix, cosA + pix, segmentAngle) * smoothstep(-segmentAngle - pix, -segmentAngle + pix, cosA);\n    \n    resultColor = vec3(1.0) * (1.0 - coefForDist * coefForAngle);\n \n    fragColor = vec4(resultColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}