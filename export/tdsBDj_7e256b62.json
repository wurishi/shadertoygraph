{"ver":"0.1","info":{"id":"tdsBDj","date":"1589147455","viewed":176,"name":"Rain by Darko","username":"omegasbk","description":"Basic rain shader\nMade by following a tutorial on The Art of Code youtube channel","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["rain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Documentation \n// Function for drops sin(x + sin(x + sin(x) * .5))\n\n\n\nvec2 Rain(vec2 uv, float t)\n{    \n    t *= 30.;\n    //uv *= 2. /* zoom */;\n    \n    // Aspect ratio - make a vertical rectangle\n    vec2 a = vec2(3., 1.);    \n    vec2 st = uv * a;\n    \n    vec2 id = floor(st);\n\t\n    // Sync with the y offset so it looks like the raindrop stays still \n    st.y += t * .21;    \n    \n    // Make the raindrops a bit pseudo-randomly positioned\n    st.y += sin(id.x*76.34) * 768.34;\n    \n    // Make the time variable\n    id = floor(st);\n    t += fract(sin(id.x*64.34 + id.y*14.52) * 768.34) * 6.214;\n    \n    // Tiled uv that is between -0.5 and 0.5, with custom aspect ratio\n    st = fract(st) - .5;\n        \n    // Drop offset\n    float y = -sin(t + sin(t + sin(t) * 0.5)) * 0.43 /* 0.43 - Fix to keep the drop inside */;\n    vec2 p1 = vec2(0., y);\n     \n    // Distance of the pixel from the tile center\n    vec2 o1 = (st-p1)/a;\n    float d = length(o1);    \n    \n    float m1 = smoothstep(.06, .01, d);\n    \n    // Trail drops calculation\n    vec2 trailDistanceVar = vec2(0., fract(sin(id.x * .4)));\n    \n    vec2 o2 = (fract((uv - trailDistanceVar) * a.x * vec2(1., 2.)) - 0.5) / vec2(1., 2.);\n    d = length(o2);\n    d += fract(sin(id.x * .4)) * 0.0001;\n    \n    float m2 = smoothstep(.3 * (0.5 - st.y), .0, d) * smoothstep(-.1, .1, st.y - p1.y);\n        \n    //if (st.x > .46) m1 = 1.;\n    //if (st.y > .48) m1 = 1.;\n    \n    return vec2(m1 * o1 * 30. + m2 * o2 * 5.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    // Fix aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n   \n    float t = iTime * .05 + iMouse.x;    \n    \n    vec2 rainDistort = Rain(uv * 5., t) * .5;\n    rainDistort += Rain(uv * 7., t) * .21;\n    \n    uv.x += sin(uv.x*70.)*.005 * 454.;\n    uv.y += sin(uv.x*20.)*.005;    \n\n    vec2 resultPos = uv - rainDistort + 0.5;\n       \n    vec3 col = texture(iChannel0, resultPos).rgb;\n    \n    //vec3 col = vec3(uv+rainDistort);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}