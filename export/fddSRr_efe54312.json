{"ver":"0.1","info":{"id":"fddSRr","date":"1632503985","viewed":81,"name":"Messin Around With Sound","username":"FrostBT","description":"Ray marcher + sound = nice.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarcher"],"hasliked":0,"parentid":"NsdXRn","parentname":"Ray Marcher Proto"},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"ShaderToy Tutorial - Ray Marching for Dummies!\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// This shader is part of a tutorial on YouTube\n// https://youtu.be/PGtv-dBi2wE\n//\n// Modified by FrostBT\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\n#define NUM_LIGHTS 3\nvec3[] lightDirs = vec3[NUM_LIGHTS] (\n    vec3(1, .2, -1),\n    vec3(-1, .3, -1),\n    vec3(0, .1, 1)\n);\n\nvec3[] lightCols = vec3[NUM_LIGHTS] (\n    vec3(1.2, .7, .4),\n    vec3(.8, .8, 1.),\n    vec3(.5)\n);\n\n\nfloat GetDist(vec3 p) {\n    float intensity = 0.;\n    for(int i = 0; i <= 4; i++)\n    {\n        intensity += texelFetch( iChannel0, ivec2(i,0), 0 ).x;\n    }\n\tvec4 s = vec4(0, 1, 0, intensity*.2);\n    \n    p.x = mod(p.x + 4., 8.) - 4.;\n    p.z = mod(p.z + 4., 8.) - 4.;\n    float sphereDist = length(p-s.xyz)-s.w;\n    float planeDist = p.y;\n    \n    float d = min(sphereDist, planeDist);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST) {\n            dO = MAX_DIST;\n            break;\n        } else if(dS<SURF_DIST) {\n            break;\n        }\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetSun(vec3 p, vec3 lightAngle, vec3 lightCol) {\n    vec3 l = normalize(lightAngle);\n    vec3 n = GetNormal(p);\n    \n    // Shadow\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<MAX_DIST) dif = 0.;\n    \n    return lightCol * dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    float mouseX = iMouse.x/iResolution.x;\n    float mouseY = iMouse.y/iResolution.x;\n    vec3 focus = vec3(0, 1, 0);\n    vec3 ro = vec3((-sin(mouseX)+.5)*8., (-sin(mouseY)+.5)*4. + 2., -5);\n    vec3 at = ro - focus;\n    \n    // Point camera at origin\n    vec3 camZ = -normalize(at);\n    vec3 camX = cross(vec3(0, 1, 0), camZ);\n    vec3 camY = -cross(camX, camZ);\n    \n    vec3 rd = normalize(uv.x*camX + uv.y*camY + camZ);\n    fragColor = vec4(normalize(uv.x*camX + uv.y*camY + camZ),1.);\n\n    // Distance\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    vec3 lights = vec3(0);\n    for (int iLight = 0; iLight < NUM_LIGHTS; iLight++) {\n      lights += GetSun(p, lightDirs[iLight], lightCols[iLight]);\n    }\n    col = vec3(lights);\n    \n    \n    // Sky color\n    vec3 sky = vec3(0);\n    for (int iLight = 0; iLight < NUM_LIGHTS; iLight++) {\n      float amount = clamp(dot(rd, lightDirs[iLight]), 0., 1.);\n      sky += amount * lightCols[iLight];\n    }\n    \n    // Fade off\n    col = mix(col, sky, d/MAX_DIST);\n    \n    // Gamma correction\n    col = pow(col, vec3(.4545));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}