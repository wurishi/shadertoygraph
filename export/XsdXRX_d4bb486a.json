{"ver":"0.1","info":{"id":"XsdXRX","date":"1460583197","viewed":1210,"name":"New PBR Model (Slime Ball)","username":"Yoshimaster96","description":"This shader, instead of using diffuse and specular, uses IOR, absorption, and scattering coefficients, leading to SSS-like results. Also, as a result, it supports transparency.\n\n[EDIT] Made customization easier!","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["ball","slime","model","new","pbr","based","physically"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 r0 = vec3(0.04,0.04,0.04); //reflection at normal incidence\nfloat ior = 1.5; //index of refraction\nvec3 mu_a = vec3(4.0,1.0,4.0); //absorption coefficient, \"inverse\" rgb\nfloat mu_s = 4.0; //scattering coefficient, float\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0); //initialize fragColor for some devices\n    vec2 uv = (-1.0 + 2.0*gl_FragCoord.xy / iResolution.xy) * \n  vec2(iResolution.x/iResolution.y, 1.0); //find 2D coordinate\n    if(length(uv)<1.0)\n    {\n        vec3 nrm = vec3(uv,sqrt(1.0-pow(length(uv),2.0))); //find 3D coordinate and normal\n        vec4 fres = vec4(r0+(vec3(1.0)-r0)*pow(1.0-nrm.z,5.0),1.0); //schlick fresnel factor\n        vec4 refl = texture(iChannel0,reflect(vec3(0.0,0.0,-1.0),nrm)); //reflection\n        vec4 refr = texture(iChannel0,refract(vec3(0.0,0.0,-1.0),nrm,1.0/ior)); //refraction\n        vec4 absorb = vec4(exp2(-2.0*nrm.z*mu_a),1.0); //amount not absorbed\n        float scatter = exp2(-2.0*nrm.z*mu_s); //amount not scattered\n        fragColor = fres*refl+((vec4(1.0)-fres)*refr*absorb*vec4(scatter))+\n            ((vec4(1.0)-fres)*absorb*vec4(1.0-scatter)); //final color\n    }\n    else fragColor = texture(iChannel0,normalize(vec3(uv,-1.0))); //if background, shoot ray\n}","name":"Image","description":"","type":"image"}]}