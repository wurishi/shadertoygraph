{"ver":"0.1","info":{"id":"XXSfWD","date":"1729444502","viewed":36,"name":"Dumb Temporal Dithering","username":"sampajama","description":"Uses the simplest form of high discrepancy noise to attempt to do temporal dithering.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["simple","dithering","temporal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI (3.1415926535897932384)\n#define TAU (2.0 * PI)\n\n#define loop(x) (acos(cos(TAU * fract(x))) / PI)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float x_mul = sqrt(2.0);\n    float y_mul = sqrt(3.0);\n    float t_mul = (1.0 - sqrt(5.0)) / 2.0;\n    \n    float bright = loop(\n        x_mul * fragCoord.x +\n        y_mul * fragCoord.y + \n        t_mul * float(iFrame)\n    );\n\n    // Output to screen\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    \n    fragColor = round(\n        pow(fragColor, vec4(2.2))\n        + bright - 0.5\n    );\n}","name":"Image","description":"","type":"image"}]}