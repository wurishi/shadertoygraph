{"ver":"0.1","info":{"id":"stSXDR","date":"1627408283","viewed":345,"name":"data flowing animation","username":"yasuo","description":"data flowing","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(234.56,789.34));\n    p+=dot(p,p+34.56);\n    return fract(p.x+p.y);\n}\n\nvec3 randomPlot(vec2 p, vec3 col, float t){\n    p*=20.0;\n    p.x+=t;\n    vec2 gv = fract(p)-0.5;\n    vec2 id = floor(p);\n    gv.y = id.y;\n    \n    float n = Hash21(id);\n    float w = clamp(0.25*(n*2.0),0.1,1.0);\n    float d = B(gv,vec2(w,0.02));\n    float cn = clamp(n,0.5,1.0);\n    col = mix(col,vec3(cn,cn,cn),S(d,0.0));\n    return col;\n}\n\nconst float speeds[14] = float[](2., 3., 6., 3.5, 5., 7., 4.5, 7.5, 8.0, 9., 2.5, 6.5,10.0,5.3);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.0);\n    \n    float index = 0.07;\n    for(int i = 0; i<14; i++){\n        vec2 pos = uv+vec2(index,-0.5+(index));\n        col = randomPlot(pos, col, iTime*speeds[i]);\n        index+=0.07;\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}