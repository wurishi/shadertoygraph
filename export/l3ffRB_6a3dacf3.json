{"ver":"0.1","info":{"id":"l3ffRB","date":"1733035646","viewed":95,"name":"rndc","username":"pb","description":"play with mouse","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["noise","raymarch","fbm","color"],"hasliked":0,"parentid":"fsKyRt","parentname":"swirling colored gas cloud"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// philip.bertani@gmail.com\n\n#define oct 5  //number of fbm octaves\n#define pi  3.14159265\n\nfloat random(vec2 p) {\n    //a random modification of the one and only random() func\n    return fract( sin( dot( p, vec2(12., 90.)))* 1e5 );\n}\n\n\n//the noise function everyone uses\nfloat noise(vec3 p) {\n    vec2 i = floor(p.yz);\n    vec2 f = fract(p.yz);\n    float a = random(i + vec2(0.,0.));\n    float b = random(i + vec2(1.,0.));\n    float c = random(i + vec2(0.,1.));\n    float d = random(i + vec2(1.,1.));\n    vec2 u = f*f*(3.-2.*f); //smoothstep here, it also looks good with u=f\n    \n    return mix(a,b,u.x) + (c-a)*u.y*(1.-u.x) + (d-b)*u.x*u.y;\n\n}\n\n\nmat3 rxz(float an){\n    float cc=cos(an),ss=sin(an);\n    return mat3(cc,0.,-ss,\n                0.,1.,0.,\n                ss,0.,cc);                \n}\nmat3 ryz(float an){\n    float cc=cos(an),ss=sin(an);\n    return mat3(1.,0.,0.,\n                0.,cc,-ss,\n                0.,ss,cc);\n}   \n\n\nfloat fbm3d(vec3 p) {\n    float v = 0.;\n    float a = .5;\n    vec3 shift = length(p.yz)*vec3(.5);    //major change\n    float angle = pi/5.; \n    for (int i=0; i<oct; i++) {\n        v += a * noise(p);\n        p = rxz(-angle) * p * 2. + shift;\n        a *= .65;\n    }\n    return v;\n}\n\n\nvec3 get_color(vec3 p) {\n    vec3 q;\n    q.x = fbm3d(p);\n    q.y = fbm3d(p.yzx);\n    q.z = fbm3d(p.zxy);\n\n    float f = fbm3d(p + q);\n    \n    return q*f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float tt = mod(iTime / 8.,20.);\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 mm = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    vec3 rd = normalize( vec3(uv, -2.) );  \n    vec3 ro = vec3(0.,0.,0.);\n    \n    float delta = 2.*pi/30.;\n    float initm = -.5 * delta;\n    mat3 rot = rxz(-mm.x*delta) * ryz(-mm.y*delta);\n    \n    ro -= rot[2]*iTime/8.;\n    \n    rd = rot * rd;\n    \n    vec3 p = ro + rd;\n    \n    vec3 cc = vec3(0.);\n\n    float stepsize = .4;\n    float totdist = stepsize;\n    \n    for (int i=0; i<6; i++) {\n       vec3 cx = get_color(p);\n       p += stepsize*rd;\n       cc += exp(-totdist/1.2)* cx;\n       totdist += stepsize;\n       rd = ryz(.1)*rd;\n    }\n    \n    cc = 3.*cc*cc*(3.-2.*cc);\n\n    fragColor = vec4(cc,1.0);\n    \n    fragColor = iResolution.x/2.*fwidth(fragColor*fragColor/100.); //major change\n}\n\n","name":"Image","description":"","type":"image"}]}