{"ver":"0.1","info":{"id":"stffW2","date":"1659842864","viewed":181,"name":"breathing kaleidoscope","username":"HaleyHalcyon","description":"a","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["gridkaleidoscope"],"hasliked":0,"parentid":"7lfBWj","parentname":"kaleidoscope arbitrary sides 1"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU (6.283185307)\n#define HEX(x) (vec3((x >> 16) & 255, (x >> 8) & 255, x & 255) / 255.)\n\nvec3 color(float x){\n    const int colorCount = 10;\n    vec3[] c = vec3[](\n        vec3(0),\n        HEX(0x270051),\n        HEX(0x3f0cd7),\n        HEX(0x0889eb),\n        HEX(0x41b1b0),\n        HEX(0x89d97d),\n        HEX(0xd6fd58),\n        HEX(0xfef38f),\n        HEX(0xfffce5),\n        vec3(1)\n    );\n    x *= float(colorCount);\n    int lo = int(floor(x));\n    \n    return mix(\n        c[lo],\n        c[(lo + 1) % colorCount],\n        smoothstep(0.0, 1., fract(x))\n    );\n}\n\nfloat zigzag(float x) {\n    return 1. - (abs(1. - mod(x, 2.0)));\n}\n\n#define REP 10. // how many pairs of reflections do you want\n\n// i am dumb and i can't think of a better way to do this than converting to polar coords and back\nvec2 kaleido(vec2 uv, float tx_rot, float circ_rot) {\n    float r = length(uv);\n    float theta = atan(uv.y, uv.x);\n    theta = zigzag(\n        REP * 2. * (\n            theta + circ_rot\n        ) / TAU\n    ) * TAU / (REP * 2.) + tx_rot;\n    uv = r * vec2(\n        cos(theta), sin(theta)\n    );\n    return uv;\n}\n\nfloat sway(float time) {\n    return //smoothstep(0., 1.,\n    mix(\n        sin(TAU * (0.5 - time) * (0.5 - time)),\n        sin(TAU * (time - 0.5) * (time - 0.5))\n    , step(time, 0.5))\n    //)\n    ;\n}\n\nvec3 spiral(vec2 uv, float time) {\n    float logr = (uv.x * uv.x + uv.y * uv.y < 0.1) ? 0.0 : log(length(uv));\n    float theta = (uv.y == 0.0 && uv.x == 0.0) ? 0.0 : atan(uv.y, uv.x);\n    return color(\n        zigzag(2.0 * (\n            1.0 * logr + 6. * theta / TAU\n        )) * 0.4 + sway(time) * 0.5\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / length(iResolution.xy);\n    float time = fract(iTime / 8.0);\n    vec2 uv_kal = kaleido(uv, time * TAU, 3.0 * time * TAU / REP);\n    float scale = 6.0 + sway(time) * 24.0;\n    vec3 colSpiral = spiral(\n        (round(uv_kal * scale)) / 8., time\n    );\n    float lines = step(0.97 - scale * 0.003, max(zigzag(2. * scale * uv_kal.x), zigzag(2. * scale * uv_kal.y)));\n\n    fragColor = vec4(mix(colSpiral, color(sway(time+0.5) * 0.9), lines), 1.0);\n}","name":"Image","description":"","type":"image"}]}