{"ver":"0.1","info":{"id":"7tlSWX","date":"1626715640","viewed":102,"name":"Space Ocean","username":"HyPeRbLaH","description":"Mandelbrot, but rotate c around z by an animated angle.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","waves","mandelbrot","ocean"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define II 128.0\n#define pi 3.14\n\nvec2 mul(vec2 a, vec2 b)\n{\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nvec2 stehp(vec2 z, vec2 c, float i)\n{\n    float l = length(c);\n    float t =(l + (iTime + 30.0) * 0.75) * i;\n    vec2 z2 = mul((c - z), vec2(cos(t), sin(t))) + z;\n    return mul(z, z2) + c;\n}\n\nfloat iter(vec2 c, float q)\n{\n    vec2 z = vec2(0, 0);\n    \n    float i = 0.0;\n    \n    for (; i < q; ++i)\n    {\n        z = stehp(z, c, i / q);\n        if (length(z) > 4.0)\n        {\n            break;\n        }\n    }\n    \n    return i / q;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float m = min(iResolution.x, iResolution.y);\n    vec2 uv1 = fragCoord - vec2(-0.25, -0.25);\n    vec2 uv2 = fragCoord - vec2(0.25, -0.25);\n    vec2 uv3 = fragCoord - vec2(0.25, 0.25);\n    vec2 uv4 = fragCoord - vec2(-0.25, 0.25);\n    \n    uv1 = 2.0*(uv1 - 0.5 * iResolution.xy)/m;\n    uv2 = 2.0*(uv2 - 0.5 * iResolution.xy)/m;\n    uv3 = 2.0*(uv3 - 0.5 * iResolution.xy)/m;\n    uv4 = 2.0*(uv4 - 0.5 * iResolution.xy)/m;\n    \n    float theta = pi * 0.5;\n    uv1 = mul(uv1, vec2(cos(theta), sin(theta)));\n    uv2 = mul(uv2, vec2(cos(theta), sin(theta)));\n    uv3 = mul(uv3, vec2(cos(theta), sin(theta)));\n    uv4 = mul(uv4, vec2(cos(theta), sin(theta)));\n    \n    float scale = 16.0;\n    vec2 pos = vec2(-.8, 0.125);\n    \n    \n    uv1 /= scale;\n    uv1 += pos;\n    uv2 /= scale;\n    uv2 += pos;\n    uv3 /= scale;\n    uv3 += pos;\n    uv4 /= scale;\n    uv4 += pos;\n    \n    float c1 = iter(uv1, II);\n    float c2 = iter(uv2, II);\n    float c3 = iter(uv3, II);\n    float c4 = iter(uv4, II);\n    \n    float c = (c1 + c2 + c3 + c4) * 0.25;\n\n    // Output to screen\n    fragColor = vec4(c, c * c - sin(iTime / pi + pi) * 0.1 + 0.1, c * c * c - sin(iTime / 1.414) * 0.1 + 0.1, 1.0);\n}","name":"Image","description":"","type":"image"}]}