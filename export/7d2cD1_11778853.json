{"ver":"0.1","info":{"id":"7d2cD1","date":"1643485408","viewed":130,"name":"Arch Subdivision Bridge","username":"jt","description":"Building a bridge based on rodolphito's Square minus Circle [url]https://www.shadertoy.com/view/stlXWH[/url] and extruding my arches subdivision 2d sdf [url]https://www.shadertoy.com/view/sd2cD1[/url]. Both 2d and 3d sdf should be exact.\n","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["sdf","distance","subdivision","architecture","bridge","construction","arches","arch","exact","extrude","building","3dify","squareminuscircle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/7d2cD1 Arch Subdivision Bridge 2022-1-29 by Jakob Thomsen \n// Previous version: https://www.shadertoy.com/view/sd2yD1 square minus circle subdiv 3d\n// Tweaking rodolphito's Square minus Circle https://www.shadertoy.com/view/stlXWH\n// to produce a subdivision of arches https://www.shadertoy.com/view/sd2cD1 arches subdivision 2d sdf\n// and extrude (both 2d and 3d sdf should be exact).\n\n// tags: subdivision, exact, sdf, distance, architecture, bridge, construction, arches, arch, extrude, building, 3dify, squareminuscircle\n\n#define EPSILON 0.001\n#define DIST_MAX 500.0\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat halfspace(vec3 p, float d)\n{\n    return p.z - d;\n}\n\n// https://www.shadertoy.com/view/stlXWH Square minus Circle - distance by rodolphito\n// The MIT License\n// Copyright Â© 2021 Rodol Phito\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nfloat square_minus_circle(vec2 p, float r) \n{\n    float b = 0.0;\n    p = abs(p); p = (p.y>p.x) ? p.yx : p.xy;\n    if (p.y<0.0) return length(p-vec2(1.,0.0));\n    return max(length(max(p-1.0,0.0)) + min(p.x-1.0,0.0), r - length(p));\n}\n\nfloat arch_subdiv2d(vec2 p) // by jt\n{\n    float s = exp2(ceil(-log2(p.y))); // scale\n    vec2 l = fract(p*s); // local coordinates\n    float c = step(1.0, mod(p.x*s,2.)); // choose left-right\n    l.y = 1.0 - l.y;\n    float d = square_minus_circle(l-vec2(c,0.), 0.9)/s; // arches\n    d = min(d, l.y /s); // fix sdf\n    return (p.y < 0.0) ? -p.y : d;\n}\n\nfloat arch_subdiv3d(vec3 p)\n{\n    p.z *= -1.0;\n    p.z += 1.0;\n    float dp = p.y; // distance to plane\n    float df = arch_subdiv2d(p.xz); // distance to 2d SDF\n    //return sqrt(dp*dp+df*df); // 3dify/sweep/insulate as in https://www.shadertoy.com/view/7dByz1\n    \n    // extrusion as discribed in https://iquilezles.org/articles/distfunctions\n    float h = 0.25;\n    vec2 w = vec2(df, abs(p.y) - h);\n    return min(max(w.x,w.y), 0.0) + length(max(w, 0.0));\n}\n\nfloat map(vec3 p)\n{\n    return\n        min\n        (\n            arch_subdiv3d(p),\n            halfspace(p, -1.0)\n        );\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h)\n            +\n            k.yyx * map(p + k.yyx*h)\n            +\n            k.yxy * map(p + k.yxy*h)\n            +\n            k.xxx * map(p + k.xxx*h)\n        );\n}\n\n// adapted from https://iquilezles.org/articles/rmshadows\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    if(t0 < 1.0)\n    {\n        for(float t = t0; t < 1.0;)\n        {\n            float h = map(ro + rd * t);\n            if(h < EPSILON)\n                return t;\n            t += h;\n        }\n        t0 = 1.0;\n    }\n\n    for(float t = t0; t < t1;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON * t) // optimization: coarser epsilon in the distance\n            return t;\n        t += h;\n    }\n\n    return t1;\n}\n\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    float t = trace(ro, rd, t0, t1);\n    return t < t1 ? 0.0 : 1.0;\n    //return t < t1 - EPSILON ? 0.0 : 1.0; // in case of shadow-errors try this\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 ndc = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    ndc.x *= iResolution.x / iResolution.y;\n    vec2 m = length(iMouse.xy) <= 10. // click in lower left corner...\n           ? pi * vec2(2.0 * fract(iTime * 0.01), 2.5 / 4.0) // ...for demo mode\n           : pi * vec2(2.0 * iMouse.x / iResolution.x, 0.5 + 0.5 * iMouse.y / iResolution.y); // mouse look\n\n    mat2 R = mat2(cos(m.x), sin(m.x), -sin(m.x), cos(m.x));\n    vec3 ro = vec3(0.0, 0.0,-5.0);\n    mat2 S = mat2(cos(m.y), sin(m.y), -sin(m.y), cos(m.y));\n    ro.yz = S * ro.yz;\n    ro.xy = R * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz = S * rd.yz;\n    rd.xy = R * rd.xy;\n\n    float dist = trace(ro, rd, 0.0, DIST_MAX);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(0.0,-1.0, 1.0));\n    vec3 ambient = vec3(0.4);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX * 0.1/*optimization*/); \n    vec3 color = vec3(1.0);\n    color *= (n * 0.5 + 0.5);\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n    color = mix(color, vec3(0.0), dist/DIST_MAX); // tweak light & colors \n    color *= clamp(dst.z+1.5, 0.0, 1.0); // tweak light & colors \n\n    fragColor = (dist < DIST_MAX) ? vec4(color, 1.0) : vec4(0.0);\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}