{"ver":"0.1","info":{"id":"WsSGWR","date":"1548605036","viewed":411,"name":"dFdx dFdy lighting","username":"Kushulain","description":"2 light sources rendered using normal calculation with dFdx() & dFdy() functions.\nHandy but too bad it does downsampling.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["ray","lighting","marching","dfdx","dfdy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rz2(float a){float c=cos(a),s=sin(a);return mat2(c,s,-s,c);}\n\nfloat rayDist = 1000.0;\nvec3 rayColor = vec3(0.0,0.0,0.0);\n\n\nfloat sphere(vec3 ray,vec3 pos, float radius)\n{\n    return length(ray-pos) - radius;\n}\n\nfloat cube(vec3 ray, vec3 pos, float size)\n{\n    ray = abs(ray-pos) - size;\n    return max(max(ray.x,ray.y),ray.z);\n}\n\nvoid map(vec3 pos)\n{\n    pos.xz *= rz2(iTime*.1 + 3.1*iMouse.x / iResolution.y);\n    pos.yz *= rz2(iTime*.1 + 3.1*iMouse.y / iResolution.y);\n    \n    pos = abs(pos);\n    //pos = abs(1.-mod(pos,2.));\n    rayDist = cube(pos,vec3(0.2),0.15);\n    rayDist = max(rayDist,sphere(pos,vec3(0.1),0.3));\n    rayDist = min(rayDist,sphere(pos,vec3(0.4),0.1));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.yy;\n\n    \n    vec3 ro = vec3(0.,0.,-2.);\n    vec3 rd = normalize(vec3(uv.x,uv.y,1.));\n    vec3 mp=ro+rd;\n                \n\tint i;\n    for (i=0;i<50;i++){\n        map(mp);\n        if(abs(rayDist)<.00001)\n            break;\n        mp+=rd*rayDist;\n    }\n    \n    float ma=1.-float(i)/50.;\n    \n    //(screen space normal calculation)\n    vec3 normal = normalize(cross(dFdy(mp),dFdx(mp)));\n    \n    //cam direction (screen space)\n    mp = vec3(0.,0.,-1);\n    \n    vec3 lightPOV = vec3(0.707);\n    lightPOV.xy *= rz2(iTime*3.3);\n    lightPOV.xz *= rz2(iTime*5.);\n    \n    vec3 lightPOV2 = vec3(0.707);\n    lightPOV2.xy *= rz2(iTime*1.3);\n    lightPOV2.xz *= rz2(iTime*2.);\n    \n    //diffuse\n    vec3 finalCol = max(0.,dot(normal,lightPOV)) * vec3(0.,.5,1.);\n    finalCol +=  max(0.,dot(normal,lightPOV2)) * vec3(1.,.5,0.);\n    \n    //specular\n    finalCol += pow(max(0.,dot(normal,normalize(lightPOV+mp))),20.) * vec3(0.,.5,.8);\n    finalCol += pow(max(0.,dot(normal,normalize(lightPOV2+mp))),20.) * vec3(.8,.5,0.);\n    \n    finalCol *= ma;\n    \n    fragColor = vec4(finalCol,1.0);\n    \n    //displays normal\n    //fragColor = vec4(normal*0.5+0.5,1.0) * ma;\n}","name":"Image","description":"","type":"image"}]}