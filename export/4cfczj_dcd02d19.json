{"ver":"0.1","info":{"id":"4cfczj","date":"1721294412","viewed":192,"name":"fire red,blue","username":"laside777","description":"red fire with blue not optimized","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Ported shader code for Shadertoy\n\n// Uniforms\nconst float inten = 3.0;\nconst bool doDiv = true;\n//uniform float iTime; // Assuming this is provided as a uniform in Shadertoy\n//uniform vec2 iResolution; // Resolution of the screen in Shadertoy\n\n// Constants\nconst float PI = 3.1416;\n\n// Utility functions\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n    return mod289(((x * 34.0) + 1.0) * x);\n}\n\nfloat snoise(vec3 v) { \n    const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    vec3 i = floor(v + dot(v, C.yyy));\n    vec3 x0 = v - i + dot(i, C.xxx);\n\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min(g.xyz, l.zxy);\n    vec3 i2 = max(g.xyz, l.zxy);\n\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy;\n    vec3 x3 = x0 - D.yyy;\n\n    i = mod289(i);\n    vec4 p = permute(permute(permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0)) + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n\n    float n_ = 0.142857142857; // 1.0/7.0\n    vec3 ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_);\n\n    vec4 x = x_ * ns.x + ns.yyyy;\n    vec4 y = y_ * ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4(x.xy, y.xy);\n    vec4 b1 = vec4(x.zw, y.zw);\n\n    vec4 s0 = floor(b0) * 2.0 + 1.0;\n    vec4 s1 = floor(b1) * 2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n    vec3 p0 = vec3(a0.xy, h.x);\n    vec3 p1 = vec3(a0.zw, h.y);\n    vec3 p2 = vec3(a1.xy, h.z);\n    vec3 p3 = vec3(a1.zw, h.w);\n\n    vec4 norm = inversesqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n    m = m * m;\n\n    return 42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));\n}\n\n// Noise stack function\nfloat noiseStack(vec3 pos, int octaves, float falloff) {\n    float noise = snoise(pos);\n    float off = 1.0;\n    \n    for (int i = 1; i < octaves; ++i) {\n        pos *= 2.0;\n        off *= falloff;\n        noise = (1.0 - off) * noise + off * snoise(pos);\n    }\n    \n    return (1.0 + noise) / 2.0;\n}\n\n// Noise stack with UV function\nvec2 noiseStackUV(vec3 pos, int octaves, float falloff, float diff) {\n    float displaceA = noiseStack(pos, octaves, falloff);\n    float displaceB = noiseStack(pos + vec3(3984.293, 423.21, 5235.19), octaves, falloff);\n    return vec2(displaceA, displaceB);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float time = iTime;\n    vec3 rightColor = vec3(0.0, 0.2, 1.0);\n\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float xpart = uv.x;\n    float ypart = uv.y;\n\n    float clip = 1.4;\n    float ypartClip = uv.y / clip;\n    float ypartClippedFalloff = clamp(2.0 - ypartClip, 0.0, 1.0);\n    float ypartClipped = min(ypartClip, 1.0);\n    float ypartClippedn = 1.0 - ypartClipped;\n\n    float xfuel = 1.0 - abs(2.0 * xpart - 1.0);\n\n    float timeSpeed = 0.5;\n    float realTime = timeSpeed * time;\n\n    vec2 coordScaled = 0.01 * fragCoord - 0.02 * vec2(200.0, 0.0);\n    vec3 position = vec3(coordScaled, 0.0) + vec3(1223.0, 6434.0, 8425.0);\n    vec3 flow = vec3(4.1 * (0.5 - xpart) * pow(ypartClippedn, 4.0), -2.0 * xfuel * pow(ypartClippedn, 64.0), 0.0);\n    vec3 timing = realTime * vec3(0.0, -1.7, 1.1) + flow;\n\n    vec3 displacePos = vec3(1.0, 0.5, 1.0) * 2.4 * position + realTime * vec3(0.01, -0.7, 1.3);\n    vec3 displace3 = vec3(noiseStackUV(displacePos, 2, 0.4, 0.1), 0.0);\n\n    vec3 noiseCoord = (vec3(2.0, 1.0, 1.0) * position + timing + 0.4 * displace3) / 1.0;\n    float noise = noiseStack(noiseCoord, 3, 0.4);\n\n    float flames = pow(ypartClipped, 0.3 * xfuel) * pow(noise, 0.3 * xfuel);\n\n    float f = ypartClippedFalloff * pow(1.0 - flames * flames * flames, 8.0);\n    float fff = f * f * f;\n    vec3 fireLeft = inten * vec3(f, fff, fff);\n\n    float fRight = ypartClippedFalloff * pow(1.0 - flames * flames * flames, 1.3);\n    float fffRight = fRight * fRight * fRight;\n    vec3 fireRight = inten * rightColor * vec3(fRight, fffRight, fffRight * fffRight);\n\n    vec3 fire = fireLeft;\n\n    if (doDiv) {\n        float mixFactor = smoothstep(0.4, 0.8, xpart);\n        fire = mix(fireLeft, fireRight, mixFactor);\n    } else {\n        fire = fireLeft;\n    }\n\n    vec4 color = vec4(1.0, 1.0, 1.0, 1.0); // Assuming default white color for Shadertoy\n\n    fragColor = vec4(fire, 1.0);\n}\n\n//void main() {\n    //mainImage(gl_FragColor, gl_FragCoord.xy);\n//}","name":"Image","description":"","type":"image"}]}