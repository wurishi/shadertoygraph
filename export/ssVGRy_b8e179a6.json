{"ver":"0.1","info":{"id":"ssVGRy","date":"1631763138","viewed":132,"name":"hexagon grid tdhgdhctdgdhg","username":"HaleyHalcyon","description":"grid","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// square root of 3 because hexagon stuff\n#define SQRT3 (1.7320508)\n// converts rgb hex code to a vec3\n#define HEX(x) (vec3((x >> 16) & 255, (x >> 8) & 255, x & 255) / 255.)\n// calculate the distance from the center of a hexagon\nfloat hex(vec2 uv) {\n    // loop around to tile\n    uv = abs(\n        mod(\n            uv + vec2(1.0, SQRT3),\n            vec2(2., SQRT3 * 2.)\n        ) - vec2(1.0, SQRT3)\n    );\n    // vector from the center to the midpoint of the top right side\n    const vec2 s = vec2(1, SQRT3) * 0.5;\n    // return whichever is closer:\n    // distance towards the top right side,\n    // or distance towards the right side\n    // (i.e. absolute value of x coordinate)\n    return max(\n        dot(uv, s),\n        uv.x\n    );\n}\n\n// map the range [0, 1) to stripes of colors\n#define COLOR_COUNT 4\n// uniforms can't be declared inside a function\n// so sadly it is out here\nconst vec3 color[COLOR_COUNT] = vec3[](\n    HEX(0x000000),\n    HEX(0x300060),\n    HEX(0x8000C0),\n    HEX(0xFF66FF)\n);\nconst float thres[COLOR_COUNT] = float[](\n    0.0, // ignored\n    0.4,\n    0.7,\n    0.9\n);\nvec3 colorize(float value) {\n    value = fract(value);\n    vec3 color_out = color[0];\n    for (int i = 1; i < COLOR_COUNT; i++) {\n        if (value > thres[i]) {\n            color_out = color[i];\n        } else {\n            return color_out;\n        }\n    }\n    return color_out;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = fract(iTime / 2.);\n    // Scales coords so that the diagonals are all dist 1 from center\n    float scale = length(iResolution.xy);\n    vec2 uv = (fragCoord / scale\n\t- (iResolution.xy / scale / 2.)) * 8.;\n    \n    float dist = \n        min(\n            // grid with a hexagon centered at the screen\n            hex(uv),\n            // grid with 4 hexagons surrounding the center\n            hex(uv + vec2(1.0, SQRT3))\n        );\n    vec3 col = colorize(\n        dist * dist - time\n    );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}