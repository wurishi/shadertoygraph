{"ver":"0.1","info":{"id":"mssSR2","date":"1669239525","viewed":63,"name":"ComputerGraphics_Homework","username":"makif","description":"A basic shader that color and shape change over time. Over time, the number of circles inside increases.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["homework"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n\n\treturn d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\n\nfloat sdStar(in vec2 p, in float r, in int n, in float m) // m=[2,n]\n{\n    // these 4 lines can be precomputed for a given shape\n    float an = 3.141593/float(n);\n    float en = 3.141593/m;\n    vec2  acs = vec2(cos(an),sin(an));\n    vec2  ecs = vec2(cos(en),sin(en)); // ecs=vec2(0,1) and simplify, for regular polygon,\n\n    // reduce to first sector\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n\n    // line sdf\n    p -= r*acs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\n\n\nfloat sig(float x)\n{\n    return 1.0/(1.0 + exp(-15.0*x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= (iResolution.y/iResolution.x);\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    float d = sdStar( p, 0.7, 12, 5.0 );\n    \n    vec2 ra = 0.4 + 0.3*cos(vec2(0.0,1.57) + 0.0 );\n    float d1 = sdCircle(uv-vec2(0.5,0.3),0.1);\n\tfloat d2 = sdRhombus( p, ra );\n    float val = mix(d, d1, 0.5 + 0.5*cos(iTime));\n    vec3 inside = mix(vec3(0.5 + 0.8*cos(d1),0.0,0.0) * (0.5 + 0.2*cos(val*iTime)), vec3(0.0,0.5 + 0.8*cos(d1),0.0) * (0.5 + 0.2*cos(val*iTime)),0.5 + 0.5*cos(0.5 * iTime));\n    vec3 col = mix(inside, vec3(0.0,0.0,9),step(0.0, val));\n \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}