{"ver":"0.1","info":{"id":"4tBBzG","date":"1516155604","viewed":802,"name":"Verbose Raytrace Quad","username":"zalo","description":"Simply raytraces a plane in the most verbose way possible\n\nUseful for calculating perspective transformations","likes":7,"published":3,"flags":0,"usePreview":1,"tags":["raytrace","plane"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float plane( in vec3 norm, in vec3 po, in vec3 ro, in vec3 rd ) {\n    float de = dot(norm, rd);\n    de = sign(de)*max( abs(de), 0.001);\n    return dot(norm, po-ro)/de;\n}\n\nvec2 raytraceTexturedQuad(in vec3 rayOrigin, in vec3 rayDirection, in vec3 quadCenter, in vec3 quadRotation, in vec2 quadDimensions) {\n    //Rotations ------------------\n    float a = sin(quadRotation.x); float b = cos(quadRotation.x); \n    float c = sin(quadRotation.y); float d = cos(quadRotation.y); \n    float e = sin(quadRotation.z); float f = cos(quadRotation.z); \n    float ac = a*c;   float bc = b*c;\n\t\n\tmat3 RotationMatrix  = \n\t\t\tmat3(\t  d*f,      d*e,  -c,\n                 ac*f-b*e, ac*e+b*f, a*d,\n                 bc*f+a*e, bc*e-a*f, b*d );\n    //--------------------------------------\n    \n    vec3 right = RotationMatrix * vec3(quadDimensions.x, 0.0, 0.0);\n    vec3 up = RotationMatrix * vec3(0, quadDimensions.y, 0);\n    vec3 normal = cross(right, up);\n    normal /= length(normal);\n    \n    //Find the plane hit point in space\n    vec3 pos = (rayDirection * plane(normal, quadCenter, rayOrigin, rayDirection)) - quadCenter;\n    \n    //Find the texture UV by projecting the hit point along the plane dirs\n    return vec2(dot(pos, right) / dot(right, right),\n                dot(pos, up)    / dot(up,    up)) + 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //Screen UV goes from 0 - 1 along each axis\n    vec2 screenUV = fragCoord/iResolution.xy;\n    vec2 p = (2.0 * screenUV) - 1.0;\n    float screenAspect = iResolution.x/iResolution.y;\n    p.x *= screenAspect;\n    \n    //Normalized Ray Dir\n    vec3 dir = vec3(p.x, p.y, 1.0);\n    dir /= length(dir);\n    \n    //Define the plane\n    vec3 planePosition = vec3(0.0, 0.0, 0.5);\n    vec3 planeRotation = vec3(0.4*cos(0.3*iTime), 0.4*sin(0.6*iTime), 0.0);\n    vec2 planeDimension = vec2(-screenAspect, 1.0);\n    \n    vec2 uv = raytraceTexturedQuad(vec3(0), dir, planePosition, planeRotation, planeDimension);\n\t\n    //If we hit the rectangle, sample the texture\n    if(abs(uv.x - 0.5) < 0.5 && abs(uv.y - 0.5) < 0.5) {\n\t  fragColor = vec4(texture(iChannel0, uv).xyz, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}