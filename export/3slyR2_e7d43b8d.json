{"ver":"0.1","info":{"id":"3slyR2","date":"1585164670","viewed":302,"name":"Twisting triangles","username":"elefAntti","description":"Using slice renderer to draw prismatic, out of focus shapes","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["minimalistic","prismatic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define GammaValue 0.5\n#define VignetteStrength 1.1\n#define FocalLength 2.0\n\nfloat smax(float a, float b)\n{\n    return log(exp(a) + exp(b));\n}\n\nmat3 rot_y(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    \n    return mat3(c, 0.0 , -s,\n              0.0, 1.0, 0.0,\n               s, 0.0, c);\n}\n\nfloat prism( vec3 pos )\n{\n    vec3 side1 = vec3(0.0, -1.0, 0.0);\n    vec3 side2 = normalize(vec3(0.0, 1.0, 2.0));\n    vec3 side3 = normalize(vec3(0.0, 1.0, -2.0));\n    float r = 2.0;\n    return smax(dot(pos, side1) - r, \n               smax(dot(pos, side2) - r, \n                   dot(pos, side3) - r));\n}\n\nfloat distModel( vec3 pos, float time )\n{\n    float r = length(pos.xz);\n\treturn prism(rot_y(time + r * 0.3)*pos + (r - 5.0) * vec3(0.0, 0.4, 0.0));\n}\n\nfloat rayTrace( vec2 fragCoord, float time, float offset )\n{\n    vec2 position = fragCoord * -2.0 + 1.0;\n\n    vec3 rayDir = normalize(vec3( position, FocalLength + offset));\n\n    vec3 cameraPos = vec3( 0, 1.0, -20.0 );\n\n    float angle = time * 0.1;\n    vec3 normal = rot_y(-time) * vec3(cos(angle), sin(angle), 0.0);\n    float scale = abs(dot(rayDir, normal));\n\n    if(scale < 0.001)\n    {\n        return 0.0;\n    }\n    else\n    {\n        rayDir *=  1.0/scale;\n        vec3 curPos = cameraPos;\n        float fMinDist = 1000.0;\n        float stepLen = length(rayDir);\n        float totalIntensity = 0.0;\n        for(int i = 1; i < 30; ++i)\n        {\n            curPos += rayDir;\n            float fDistance = distModel( curPos, time );\n            fMinDist = min( fMinDist, abs(fDistance));\n            float intensity = smoothstep(.5, 0.05, abs(fDistance));\n            intensity *= exp(-(float(i) * stepLen)/10.0);\n            totalIntensity += intensity;\n        }\n        return totalIntensity;\n    }\n}\n\nvec3 rtMain(in vec2 uv, in float time)\n{\n    return vec3(\n        rayTrace(uv, time, 0.0f),\n        rayTrace(uv, time, 0.05f),\n        rayTrace(uv, time, 0.1f));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.y/iResolution.x;\n    vec2 uv = (fragCoord/iResolution.xy - vec2(0.5f)) * vec2(1.0, aspect) + vec2(0.5);\n    // Time varying pixel color\n    vec3 color = rtMain(uv, iTime * 0.3);\n\n    //Gamma\n    color.rgb = pow(color.rgb, vec3(GammaValue));\n\n    //Saturate channels\n    color.rgb = min(color.rgb, vec3(1.0));\n\n\n    //Vignette\n    color.rgb *= pow(1.0 - length(uv - vec2(0.5, 0.5)) * VignetteStrength, 0.5); \n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}