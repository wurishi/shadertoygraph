{"ver":"0.1","info":{"id":"Mf3cDl","date":"1731333563","viewed":15,"name":"liquidámbar","username":"Visualarte","description":"liquido textura ámbar primer shader ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["liquidez"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shader adaptado para Synesthesia con parámetros controlables\nuniform float uZoom;          // Control de zoom\nuniform float uFrequency;      // Control de frecuencia de ruido\nuniform float uFluidez;        // Control de distorsión de fluidez\nuniform float uSpeed;          // Control de velocidad de movimiento de cámara\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalizar las coordenadas\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0; // Transformar a rango [-1, 1]\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Parámetros de zoom y cámara\n    float zoom = uZoom; // Controlar el \"zoom\" o escala de la textura desde Synesthesia\n    vec2 cameraPos = vec2(sin(iTime * uSpeed), cos(iTime * uSpeed)) * 0.5; // Movimiento de cámara controlado por uSpeed\n    vec2 pos = (uv + cameraPos) * zoom;\n\n    // Parámetros de frecuencia y desplazamiento para fluidez\n    float time = iTime * 0.15;\n    float frequency = uFrequency; // Frecuencia controlable para el ruido\n    float turbulence = 0.0;\n\n    // Función de ruido fractal (fbm) para efecto líquido\n    for (int i = 0; i < 8; i++) {\n        float layer = sin(pos.x * frequency + time) * cos(pos.y * frequency + time);\n        turbulence += layer * 0.5; // Reducir la intensidad para suavizar el efecto\n        pos = pos * 1.2 + layer;   // Pequeña distorsión acumulada para efecto de flujo\n        frequency *= 1.3;          // Incrementar la frecuencia para añadir detalle\n    }\n\n    // Efecto adicional de distorsión para fluidez controlable\n    pos += uFluidez * vec2(sin(time + pos.y * 2.0), cos(time + pos.x * 2.0));\n\n    // Mapear el valor de turbulencia a colores oscuros y destellos de naranja\n    vec3 colorDark = vec3(0.05, 0.0, 0.0); // Oscuro\n    vec3 colorBright = vec3(1.0, 0.5, 0.2); // Naranja brillante\n\n    // Crear el efecto de mezcla de colores\n    float intensity = clamp(turbulence * 0.6, 0.0, 1.0); \n    vec3 color = mix(colorDark, colorBright, intensity);\n\n    // Asignar el color al fragmento\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}