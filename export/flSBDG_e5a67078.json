{"ver":"0.1","info":{"id":"flSBDG","date":"1652700240","viewed":467,"name":"Haru86_ray_220516","username":"Haru86_","description":"Haru86_ray_220516","likes":14,"published":1,"flags":40,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col=vec3(0.0);\n    vec2 uv=fragCoord.xy/iResolution.xy;\n    \n    col=texture(iChannel0,uv).rgb;\n    //col=texture(iChannel1,uv).rgb;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nvec2 mainSound( int samp, float time )\n{\n    float s=DrawWave(time).x;\n    return vec2(s);\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Raymarching Buffer\n\n#define time iTime\n#define resolution iResolution\n\n#define MAX_MARCH 128\n#define PI 3.14159265\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\nfloat Cube(vec3 p,vec3 s){\n  return length(max(abs(p)-s,0.0));\n}\n\nvec3 ifs(vec3 p){\n  p=abs(p);\n\n  for(int i=0;i<6;i++){\n    p=abs(p)-0.35;\n    p.xy*=rot(0.25);\n    p.xz*=rot(1.95);\n    p.yz*=rot(0.98);\n\n    p.xy=(p.x<p.y)? p.yx : p.xy;\n    p.xz=(p.x<p.z)? p.zx : p.xz;\n    p.yz=(p.y<p.z)? p.zy : p.yz;\n  }\n\n  return p;\n}\n\nfloat map(vec3 p){\n\n  vec3 pt=p;\n\n  pt.z-=time;\n  float k=1.25;\n  vec3 id=floor(pt/k)*k;\n  pt=mod(pt,k)-k*0.5;\n  pt.xy*=rot(PI/4.0);\n  float baseCube=Cube(pt,vec3(0.5));\n\n  //\n  pt=mod(pt,2.0)-1.0;\n  pt=ifs(pt);\n  float subCube=Cube(pt,vec3(0.3));\n\n  float d=max(baseCube,subCube);\n\n  return d;\n}\n\nvec3 gn(vec3 p){\n  vec2 e=vec2(0.001,0.0);\n  return normalize(vec3(\n      map(p+e.xyy)-map(p-e.xyy),\n      map(p+e.yxy)-map(p-e.yxy),\n      map(p+e.yyx)-map(p-e.yyx)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec3 col=vec3(1.0);\n  vec2 uv=fragCoord.xy/resolution.xy;\n\n  vec2 st=(gl_FragCoord.xy*2.0-resolution.xy)/min(resolution.x,resolution.y);\n  st*=rot(time*0.1);\n\n  vec3 ro=vec3(cos(time)*0.25,sin(time)*0.25,1.0);\n  vec3 ta=vec3(0.0);\n  \n  vec3 cdir=normalize(ta-ro);\n  vec3 cside=normalize(cross(cdir,vec3(0.0,1.0,0.0)));\n  vec3 cup=normalize(cross(cdir,cside));\n  \n  vec3 rd=normalize(st.x*cside+st.y*cup+cdir*1.0);\n\n  int marchingNum=0;\n  float d,t,acc=0.0;\n  for(int i=0;i<MAX_MARCH;i++){\n    d=map(ro+rd*t);\n    marchingNum=i;\n    if(d<0.001||t>1000.0)break;\n    t+=d;\n    acc+=exp(-3.0*d);\n    marchingNum=MAX_MARCH-1;\n  }\n\n  if(d<0.001){\n    float glow=0.0;\n    const float s = 0.0075;\n    vec3 n0=gn(ro+rd*t);\n    vec3 n1=gn(ro+rd*t+vec3(sign(n0.x)*s,0.0,0.0));\n    vec3 n2=gn(ro+rd*t+vec3(0.0,sign(n0.y)*s,0.0));\n\n    glow=max(0.0,dot(n0,rd));\n\n    float emw=0.8;\n    if(dot(n0, n1)<emw || dot(n0, n2)<emw) {\n             glow += 4.5;\n         }\n\n    glow *= min(1.0,\n      4.0-(4.0*float(marchingNum) / float(MAX_MARCH-1))\n    );\n\n    col=acc*vec3(0.5,0.2,.6)*0.075+vec3(1.0)*glow*acc;\n    //col=vec3(st,1.0);\n\n    vec3 refro=ro+rd*t;\n    rd=reflect(rd,n0);\n    ro=refro;\n    t=0.1;\n    float acc2=0.0;\n\n    for(int i=0;i<64;i++){\n      d=map(ro+rd*t);\n      if(d<0.001)break;\n      t+=d;\n      acc2+=exp(-3.0*d);\n    }\n\n    col+=vec3(0.4,0.25,0.8)*acc2*0.025;\n  }\n\n\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Sound  Debug Buffer\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=fragCoord.xy/iResolution.xy;\n    float domainID=floor(uv.y*2.0);\n    uv.y=fract(uv.y*2.0);\n    uv=uv*2.0-1.0;\n\n    vec3 col = vec3(0.0);\n    float memoryWidth=.005;\n    \n    // メイントラックの表示\n    float maintime= uv.x*memoryWidth+iTime;\n    vec4 wave=DrawWave(maintime);\n    float mainwave=wave.x;\n    mainwave*=0.5;\n    \n    // サンプラーの波の表示\n    float samplertime= uv.x*wave.w+wave.z;\n    float samplerwave=DrawWave(samplertime).y;\n    samplerwave*=0.5;\n    \n    // 出力\n    if(domainID >= 0.0 && domainID < 1.0){\n        float v = uv.y - samplerwave;\n        col=vec3(1.0-abs(v)/fwidth(v));\n    }else{\n        float v = uv.y - mainwave;\n        col=vec3(1.0-abs(v)/fwidth(v));\n    }\n   \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":" #define PI 3.14159265\n\n// サンプラーサウンドのデバッグ(ただの試し弾き)\n #define dso(sound,useMet) debugSound(sound,ds,isd,t,beat,beatf,useMet)\n // サンプラー波形のデバッグ\n #define DebugSampler(sampler,o,w) dsw=sampler; samplerOffset=o;samplerWidth=w\n\n #define BPM 200.0\n \n #define saturate(i) clamp(i,-1.0,1.0)\n #define b2t(i) ((i)/BPM*60.0)\n #define Scale(i) 440.0*pow(2.0,i/12.0)\n \n float rand(float time)\n{\n    return fract(sin(time*1e3)*1e6)-0.5;\n}\n\n// ---------------------------\n// 基礎的な音\n\nfloat sine(float _phase){\n    return sin(2.0*PI*_phase);\n}\n\nfloat saw(float phase){\n    return 2.0*fract(phase)-1.0;\n}\n\n\n// ------------------------------\n\nfloat kick(float _phase,float s){\n    if(_phase<0.0)return 0.0;\n    return sin(_phase * s - exp(-_phase * 40.0)*500.0) * exp(-_phase * 5.0);\n}\n\n\n\nfloat hihat(float _seed,float _dec){\n    return rand(_seed)*exp(-_dec);\n}\n\n// -------------------------------\n\n// サンプラーサウンドのデバッグ(ただの試し弾き)\nvoid debugSound(float sound,inout float o,out bool isDebug,float t,float beat,float beatf,bool useMet){\n    o=sound;\n    isDebug=true;\n}\n\nfloat mel[8]=float[8](0.0,1.0,11.0,-1.0,13.0,9.0,3.0,0.0);\nfloat mel2[3]=float[3](-6.0,0.0,6.0);\n//float ryth[]\n\nvec4 DrawWave(float time){\n    // 試し弾き用\n    bool isd=false; // isDebugMode\n    float ds=0.0;   // サンプラーサウンド\n    float dsw=0.0;  // サンプラーの波形\n    float samplerOffset=0.0;\n    float samplerWidth=1.0;\n    \n    //\n    float t=mod(time,30.0);\n    float beat=t*(BPM/60.0)-8.0; \n    float beati=floor(beat);\n    float beatf=fract(beat);\n    \n    float s=0.0;\n    \n    //\n    \n    s+=kick(b2t(mod(beat,2.0)),Scale(mel[int(floor(mod(beat,8.0)))]))*0.5;\n    s+=hihat(t,b2t(mod(beat,1.0))*100.0 )*0.5;\n    \n   /* if(beat >32.0){\n      s+=sine(Scale(3.0+mel2[int(floor(mod(beat*0.5,3.0)))])*t+sin(b2t(mod(beat,4.0))))*0.1;\n      s+=sine(Scale(1.0+mel2[int(floor(mod(beat*0.5,3.0)))])*t+sin(b2t(mod(beat,4.0))))*0.1;\n      s+=sine(Scale(5.0+mel2[int(floor(mod(beat*0.5,3.0)))])*t+sin(b2t(mod(beat,4.0))))*0.1;\n    }*/\n    \n    DebugSampler(saw(t),0.0,10.01);\n    \n    if(isd){\n        return vec4(saturate(ds),saturate(dsw),samplerOffset,samplerWidth);\n    }else{\n        return vec4(saturate(s),saturate(dsw),samplerOffset,samplerWidth);\n    }\n}","name":"Common","description":"","type":"common"}]}