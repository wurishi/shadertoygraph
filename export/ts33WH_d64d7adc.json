{"ver":"0.1","info":{"id":"ts33WH","date":"1568345689","viewed":396,"name":"Radiosity experiment","username":"DarkWyvren","description":"if you see a black screen press reset time or go full screen.","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["2d","gi","raytrace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float gamma = 2.2;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tfloat exposure = 0.5;\n    float gamma = 2.2;\n    // Time varying pixel color\n    vec3 color = texture(iChannel0,fragCoord.xy / iResolution.xy).rgb;\n\tvec3 mapped = vec3(1.0) - exp(color * exposure);\n    // Gamma correction \n    mapped = pow(mapped, vec3(1.0 / gamma));\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.1415926535\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n        vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat pusedoangle(vec2 d){\n    float p = d.x/(abs(d.x)+abs(d.y)); // -1 .. 1 increasing with x\n    return sign(d.y)*(1.0-p);\n}\n\nfloat getArcFill(float r,vec2 p ,vec2 c){\n\treturn asin(r/ distance(p,c));\n}\n\n\nfloat circlesdf(vec2 p ,float r){\n\treturn length(p)-r;\n}\nfloat sdBox( vec2 p, vec2 b )\n{\n  vec2 d = abs(p) - b;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat sdf(vec2 p){\n   \tfloat minm = 9999.;\n    for(int i = 0;i<10;i++){\n        vec4 tex = texture(iChannel1,(vec2(float(i)+sin(iTime*0.1)+1.,10.0+cos(iTime*0.1)) / 64.0));\n    \tminm = min(minm, sdBox(p-tex.xy*iResolution.xy ,vec2(tex.zw*tex.zw*iResolution.y)*0.3 ));\n    }\n    return minm;\n}\n\nfloat sdfLight(vec2 p){\n   \tfloat minm = 9999.;\n    \n    vec4 tex = texture(iChannel1,(vec2(30.0+sin(iTime*0.1)+1.,10.0+cos(iTime*0.1)) / 64.0));\n    minm = min(minm, sdBox(p-tex.xy*iResolution.xy ,vec2(tex.zw*tex.zw*iResolution.y)*0.3 ));\n    \n    return minm;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    vec4 color = vec4(0.0); \n    float ssdf = sdf(fragCoord.xy);\n    float lsdf = sdfLight(fragCoord.xy);\n    vec4 randtex = texture(iChannel1,fragCoord*0.1/iResolution.xy);\n    if(ssdf<lsdf){   \n    \tcolor = vec4(vec3(1.0),ssdf);\n        if(randtex.a>0.5){\n        \tcolor = vec4(vec3(1.0,0.0,0.0),ssdf);\n        }\n    }else{\n    \tcolor = vec4(2.8*randtex.rgb,lsdf);\n    }\n    \n    \n\tfragColor =  vec4(color);\n \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define PI 3.14159265358979323846\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n        vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat pusedoangle(vec2 d){\n    float p = d.x/(abs(d.x)+abs(d.y)); // -1 .. 1 increasing with x\n    return sign(d.y)*(1.0-p);\n}\n\nfloat getArcFill(float r,vec2 p ,vec2 c){\n\treturn asin(r/ distance(p,c));\n}\n\n\nfloat circlesdf(vec2 p ,float r){\n\treturn length(p)-r;\n}\nfloat sdBox( vec2 p, vec2 b )\n{\n  vec2 d = abs(p) - b;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat sdf(vec2 p){\n   \tfloat minm = 9999.;\n    minm = texture(iChannel2,p/iResolution.xy).a;\n    return minm;\n}\n\n\n\nfloat trace(vec2 raydir,vec2 raypos,out bool hit){\n    float dist = 0.;\n    hit=false;\n    for(int i = 0;i<200;i++){\n    \tfloat dd = sdf(raypos);\n        \n        if(dd<=1.){\n            hit= true;\n        \treturn dist;\n        }\n        \n        \n        raypos+=raydir*dd;\n        dist+=dd;\n        \n        if(sdBox(raypos,iResolution.xy)>0.){\n        \tbreak;\n        }\n    }\n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    //vec4 previous_color =texture(iChannel0,(fragCoord.xy / iResolution.xy));\n    \n    \n    //code here\n    \n    \n    vec3 color = vec3(max(0.0,5.0*sin(iTime)+1.0)); \n    float rr = random(vec2(fragCoord.xy+vec2(iTime)));\n    vec2 rro = vec2(0.0);\n    float angoff = 0.0;\n    if((iMouse.z>0.)){\n    \trr+=mod(iDate.w,1.0);\n        angoff=mod(rr,1.0)-0.2;\n        rro = 1.0*vec2(random(vec2(rr,1.0+rr))) - vec2(0.5);\n        color = min(color,vec3(0.8)); \n    }\n    bool hit = false;\n    float ang2 = iTime*0.1+angoff;\n    vec2 dir = normalize(vec2(sin(ang2),cos(ang2)));\n    float d = trace(dir,fragCoord.xy+rro ,hit);\n    if(hit){\n        color =vec3(0.0); \n    }\n    \n\tfragColor =  vec4(color,1.0) ;\n \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define PI 3.14159265358979323846\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n        vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat pusedoangle(vec2 d){\n    float p = d.x/(abs(d.x)+abs(d.y)); // -1 .. 1 increasing with x\n    return sign(d.y)*(1.0-p);\n}\n\nfloat getArcFill(float r,vec2 p ,vec2 c){\n\treturn asin(r/ distance(p,c));\n}\n\n\nfloat circlesdf(vec2 p ,float r){\n\treturn length(p)-r;\n}\nfloat sdBox( vec2 p, vec2 b )\n{\n  vec2 d = abs(p) - b;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat sdf(vec2 p){\n   \tfloat minm = 9999.;\n    minm = texture(iChannel2,p/iResolution.xy).a;\n    return minm;\n}\n\n\nfloat getLight(vec2 raypos){\n\treturn texture(iChannel3,raypos/iResolution.xy).r;\n}\nfloat trace(vec2 raydir,vec2 raypos,out bool hit){\n    float dist = 0.;\n    hit=false;\n    for(int i = 0;i<200;i++){\n    \tfloat dd = sdf(raypos);\n        \n        if(dd<=1.){\n            hit= true;\n        \treturn dist;\n        }\n        \n        \n        raypos+=raydir*dd;\n        dist+=dd;\n        \n        if(sdBox(raypos,iResolution.xy)>0.){\n        \tbreak;\n        }\n    }\n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n     vec4 previous_color =texture(iChannel0,(fragCoord.xy / iResolution.xy));\n    \n   float rr = random(vec2(fragCoord.xy+vec2(iTime)));\n    vec2 rro = vec2(0.0);\n    //code here\n    if((iMouse.z>0.)){\n    \trr+=mod(iDate.w*3.14,1.0);\n        \n        rro = 1.0*vec2(random(vec2(rr,1.0+rr))) - vec2(0.5);\n    }\n    \n    vec3 color = vec3(getLight(fragCoord.xy)); \n    if(sdf(fragCoord.xy)<0.0){\n        \n    \t//color = vec3(0.0);\n        \n    }\n    bool hit = false;\n    float ang2 = iTime*0.1;\n    vec2 dir = normalize(vec2(sin(ang2),cos(ang2)));\n    int matd = 0;\n    float d = trace(dir,fragCoord.xy+rro ,hit);\n     if(sdf(fragCoord.xy)<0.0){\n        \tcolor = vec3(0.2)*texture(iChannel2,fragCoord.xy /iResolution.xy).rgb; \n        }\n    bool hit2 = false;\n    vec3 accum = vec3(0.0);\n    float samples = 20.;\n    for(float i = 0.;i<samples;i++){\n        float ang = (rr+i/samples)*2.0*PI;\n        vec2 dir2 = vec2(sin(ang),cos(ang));\n        float d2 = trace(dir2,fragCoord.xy,hit2);\n        if(hit2){\n            vec2 raypos = (fragCoord.xy+dir2*d2);\n            vec3 surfacecol = texture(iChannel2,raypos /iResolution.xy).rgb;\n            accum+=vec3(max(surfacecol-vec3(1.0),vec3(0.0)))/samples;\n            accum+=normalize(surfacecol)*getLight(raypos-dir2 )/samples;\n        }else{\n            accum+=vec3(0.5)/samples;\n        }\n    }\n    color += accum;\n    \t\n    \n             \n   \tfloat temp = previous_color.w+1.0;\n    \n    //if(iMouse.z > 0.0 )\n    \n    float mixf = 1.0/temp;\n    if(!(iMouse.z>0.)){\n        temp = 1.0;   \n\t\tmixf = 0.5;\n    }\n\tfragColor =  vec4(mix(color,previous_color.rgb,1.0-mixf),temp) ;\n}","name":"Buffer C","description":"","type":"buffer"}]}