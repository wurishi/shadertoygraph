{"ver":"0.1","info":{"id":"DdGXWW","date":"1681081536","viewed":56,"name":"XOR Pattern (Procedural Texture)","username":"Xonatron","description":"XOR pattern is created by a bitwise exclusive XOR on the x and y coordinates of the texture.\nHere, I have broken down how to create it in GLSL step-by-step.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["procedural","texture","xor","pattern","xorpattern","texturepattern","procedualtexture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Matthew Doucette, Xona Games\n// https://xona.com/\n// Friday, April 9th, 2023\n// ----------------------------\n\n// constants\n//#define RANGE 256\n//#define RANGE 512\n#define RANGE 1024\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // convert coordinates from float to int\n    int x = int(fragCoord.x);\n    int y = int(fragCoord.y);\n\n    // wrap coordinate range to 0..RANGE (e.g. 0..255)\n    x = x % RANGE;\n    y = y % RANGE;\n\n    // calculate xor (^) between coordinates (e.g. 0..255)\n    // and covert int to float (e.g. 0..255 to 0.0..255.0)\n    float xor = float(x ^ y);\n    \n    // convert xor range to 0.0..1.0 (e.g. 0.0..255.0 to 0.0..1.0)\n    xor = xor / float(RANGE - 1);\n    \n    // calculate pixel colour\n    vec4 rgba;\n    rgba.r = xor;\n    rgba.g = xor;\n\trgba.b = xor;\n    rgba.a = 1.0;\n    \n    // set pixel colour\n    fragColor = rgba;\n}\t\n","name":"Image","description":"","type":"image"}]}