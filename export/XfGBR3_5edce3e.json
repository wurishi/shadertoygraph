{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"\nconst float deg_to_rad = 3.1415926/180.0;\nconst float fov = 120.0 * deg_to_rad;\n\nstruct Sphere{\n    vec3 center;\n    float radii;\n};\nSphere spheres[5]=Sphere[5](\n    Sphere(vec3(0,0,4.8), 2.0),\n    Sphere(vec3(2.0,0,4.8), 2.0),\n    Sphere(vec3(-2.0,0,4.8), 2.0),\n    Sphere(vec3(0,2.0,4.8), 2.0),\n    Sphere(vec3(0,-2.0,4.8), 2.0)\n);\nfloat sdf_of_sphere(vec3 p_c, float r_c, vec3 p){\n    return length(p-p_c)-r_c;\n}\nfloat sdf(vec3 p){\n    float dist = sdf_of_sphere(spheres[0].center, spheres[0].radii, p);\n    for(int i=1;i<5;i++){\n        dist = min(dist, sdf_of_sphere(spheres[i].center, spheres[i].radii, p));\n    \n    }\n    return dist;\n}\n\nconst float delta = 0.01;\nconst int maxSteps = 600;\nconst float maxDepth = 5.0;\nfloat rayMarch(vec3 origin, vec3 dir){\n    vec3 p = origin;\n    float depth = 0.0;\n    for(int i=0;i<maxSteps;i++){\n        if(sdf(p)<delta)return min(maxDepth, depth)/maxDepth;\n        p += dir*delta;\n        depth += delta;\n    }\n    return 1.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.xx;\n    \n    vec3 dir = normalize(vec3(uv, 1.0/tan(fov/2.0)));\n    \n    \n    // Output to screen\n    fragColor = vec4(vec3(rayMarch(vec3(0.0), dir)), 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XfGBR3","date":"1734240799","viewed":28,"name":"RayMarch of five balls","username":"JAMERES","description":"After a year of zero computer graphics, this is what he gets in half an hour","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","sdf","review"],"hasliked":0,"parentid":"","parentname":""}}