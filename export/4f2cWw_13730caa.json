{"ver":"0.1","info":{"id":"4f2cWw","date":"1722423380","viewed":52,"name":"GameOfLife Relive","username":"dosusang","description":"I've modified the game rules so that blocks that die will respawn after a certain period of time, preventing the entire world from gradually dying.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["2d","simulation","automata","life","conway","gameoflife","multipass"],"hasliked":0,"parentid":"XstGRf","parentname":"GameOfLife"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// @iq\n// I implemented three variants of Conway's Game of Life with\n// three different interpretations: the regular one, as low\n// pass filter and as a high pass filter. Tweak line 11 in\n// Bufer A to see them all. More info here:\n// https://iquilezles.org/articles/gameoflife/\n\n// @dosusang\n// I've modified the game rules so that blocks that die will respawn\n// after a certain period of time, preventing the entire world from gradually dying.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 status = texelFetch( iChannel0, ivec2(fragCoord), 0 ).xy;\n    vec3 t = mix(vec3(0.3,0.1,0.3),vec3(0.3,0.8,0.05), status.y);\n    vec3 c = mix(t, vec3(1.0,0.8,0.4), status.x);\n    \n    fragColor = vec4(c, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// @iq\n// I implemented three variants of Conway's Game of Life with\n// three different interpretations: the regular one, as low\n// pass filter and as a high pass filter. Tweak line 11 to see\n// them all. More info here:\n// https://iquilezles.org/articles/gameoflife/\n\n\n// @dosusang\n// I've modified the game rules so that blocks that die will respawn\n// after a certain period of time, preventing the entire world from gradually dying.\n\nint cell( in ivec2 p )\n{\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return (texelFetch(iChannel0, p, 0 ).x > 0.5 ) ? 1 : 0;\n}\n\nfloat dieTime( in ivec2 p )\n{\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 ).y;\n}\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*138.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2( fragCoord );\n\n    // traditional\n\tint k =   cell(px+ivec2(-1,-1)) + cell(px+ivec2(0,-1)) + cell(px+ivec2(1,-1))\n            + cell(px+ivec2(-1, 0))                        + cell(px+ivec2(1, 0))\n            + cell(px+ivec2(-1, 1)) + cell(px+ivec2(0, 1)) + cell(px+ivec2(1, 1));\n    int e = cell(px);\n    \n    float td = dieTime(px);\n    bool relive = false;\n    \n    if(e == 0) {\n        td += 0.001;\n        if(td > 1.0) relive = true;\n    } else {\n        td = 0.0;\n    }\n    \n    \n    float f = ( ((k==2)&&(e==1)) || (k==3) || relive) ? 1.0 : 0.0;\n    \n\n    if( iFrame==0 ) f = step(0.5, hash1(fragCoord.x*13.0+hash1(fragCoord.y*71.1)));\n\t\n\tfragColor = vec4( f, td, 0.0, 0.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}