{"ver":"0.1","info":{"id":"WtGyDy","date":"1611700195","viewed":109,"name":"Tutorial part 4","username":"shellshear","description":"Following along with shadertoy tutorial from The Art of Code to make a sin wave that blurs out to the right","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Band(float t, float start, float end, float blur)\n{\n    float step1 = smoothstep(start-blur, start+blur, t);\n    float step2 = smoothstep(end+blur, end-blur, t);\n    \n    return step1 * step2;\n}\n\nfloat Rect(vec2 uv, float left, float right, float bottom, float top, float blur)\n{\n    return Band(uv.x, left, right, blur) * Band(uv.y, bottom, top, blur);\n}\n\n\n// Remap v to be 0 at a and 1 at b\nfloat remap_simple(float a, float b, float v)\n{\n    return (v-a)/(b-a);\n}\n\n// Remap v so that output is linearly c at a and d at b\nfloat remap(float a, float b, float c, float d, float v)\n{\n    return (d-c)*remap_simple(a,b,v) + c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // Normalized pixel coordinates (from 0 to 1)\n   vec2 uv = fragCoord/iResolution.xy;\n   float t = iTime + .5*sin(iTime);\n   \n   uv -= 0.5;\n   uv.x *= iResolution.x / iResolution.y;\n   \n   float x = uv.x;\n   float m = sin(x*8.+t*4.) *.1;\n   float y = uv.y-m;\n   //float m = (x-.5)*(x+.5); // Parabola going through -.5 and .5\n   //float y = uv.y-m*m*4.; // Derivative of parabola\n   //x+=y*y;\n   //y+=x;\n   \n   //float blur = .1*(x+.5); // blur = 0 at -.5, max as it goes right\n   float blur = remap(-.5,.5, .01,.2, x);\n   blur = pow(blur*4.,3.);\n   float mask = Rect(vec2(x,y), -.5, .5, -.1,.1, blur);\n   vec3 col = vec3(1.,1.,1.) * mask;\n   \n   fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}