{"ver":"0.1","info":{"id":"ts2BzD","date":"1589655778","viewed":140,"name":"ShATI - Os","username":"Flopine","description":"My former school named ATI decided to launch an everyday challenge from 4th may to 24th may, here is the 13th subject: bone :)","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","raymarching","bone"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n// Shader made for Everyday ATI challenge\n\n#define TAU 6.2831853071\n#define width 0.1\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(.05,fwidth(val-thre)))\n#define dt mod(iTime+TAU/4.,TAU)\n#define anim easeOutExpo(sin(dt)*0.5)\n\nfloat easeOutExpo(float x)\n{ return x == 1. ? 1. : 1. - pow(2., -10. * x);}\n\nmat2 rot(float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if(p.y>p.x) p = p.yx;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sphe (vec3 p, float r)\n{return length(p)-r;}\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r,abs(p.z)-h);}\n\nfloat boneX (vec3 p,float height)\n{\n    float c1 = cyl(p.yzx, width, height);\n    p.xz = abs(p.xz)-vec2(height*1.1,width*1.2);    \n    return smin(c1,sphe(p,width*1.2), 0.3);\n}\n\nfloat boneY (vec3 p, float height)\n{\n    float c1 = cyl(p.xzy, width, height);\n    p.xy = abs(p.xy)-vec2(width*1.2,height*1.1);    \n    return smin(c1,sphe(p,width*1.2), 0.3);\n}\n\nfloat boneZ (vec3 p, float height)\n{\n    float c1 = cyl(p, width, height);\n    p.yz = abs(p.yz)-vec2(width*1.2,height*1.1);    \n    return smin(c1,sphe(p,width*1.2), 0.3);\n}\n\nfloat SDF (vec3 p)\n{\n    vec3 pp = p;\n    p.xz = abs(p.xz)-1.;\n    float d = boneY(p,1.);\n    \n    p = pp;\n    p.yz = abs(p.yz)-1.;\n    d  = min(d,boneX(p,0.7));\n    \n    p = pp;\n    p.xy = abs(p.xy)-1.;\n    d = min(d, boneZ(p,0.7));\n\n    return d;\n}\n\nvec3 background (vec2 uv)\n{\n    uv = abs(uv);\n    return vec3(1.-AAstep(0.68, max(uv.x, uv.y)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(0.01,0.01,-3.),\n        p = ro,\n        rd = normalize(vec3(uv,1.)),\n        col = vec3(1.);\n    \n    float shad = 0.;\n    bool hit = false;\n    for (float i=0.; i<28.;i++)\n    {\n        float d = SDF(p);\n        if(d<0.01)\n        {\n            hit = true;\n            shad = i/28.;\n            break;\n        }\n        p += d*rd*0.6;\n    }   \n    if (hit)\n    {\n        col = vec3(shad);\n    }\n    \n    float uuY =  (fragCoord/iResolution.xy).y-anim;\n    col = mix(background(uv),col*vec3(0.8,0.8,0.9)*background(uv),clamp(AAstep(0.,uuY),0.,1.));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}