{"ver":"0.1","info":{"id":"lllyW4","date":"1504884591","viewed":132,"name":"Spade sign","username":"rougier","description":"Spade sign","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf","csg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Python and OpenGL for Scientific Visualization\n// 2017 Nicolas P. Rougier\n// See also http://jcgt.org/published/0003/04/01/\n\nconst float M_SQRT_2 = 1.41421356237309504880168872420969808;\n\nfloat spade(vec2 P, float size)\n{\n   float s = size * 0.85 / 3.5;\n   float x = M_SQRT_2/2.0 * (P.x + P.y) + 0.4*s;\n   float y = M_SQRT_2/2.0 * (P.x - P.y) - 0.4*s;\n   float r1 = max(abs(x),abs(y)) - s;\n   float r2 = length(P - M_SQRT_2/2.0*vec2(+1.0,+0.2)*s) - s;\n   float r3 = length(P - M_SQRT_2/2.0*vec2(-1.0,+0.2)*s) - s;\n   float r4 = min(min(r1,r2),r3);\n   const vec2 c1 = vec2(+0.65, 0.125);\n   const vec2 c2 = vec2(-0.65, 0.125);\n   float r5 = length(P-c1*size) - size/1.6;\n   float r6 = length(P-c2*size) - size/1.6;\n   float r7 = P.y - 0.5*size;\n   float r8 = 0.1*size - P.y;\n   float r9 = max(-min(r5,r6), max(r7,r8));\n   return min(r4,r9);\n}\n\n// Blue or red color according to distance d\nvec4 color(float d)\n{\n    vec3 white = vec3(1.0, 1.0, 1.0);\n    vec3 blue  = vec3(0.1, 0.4, 0.7);\n    vec3 color = white - sign(d)*blue;\n    color *= (1.0 - exp(-4.0*abs(d))) * (0.8 + 0.2*cos(140.0*d));\n    color = mix(color, white, 1.0-smoothstep(0.0,0.02,abs(d)) );\n    return vec4(color, 1.0);\n}\n\n\n// Move circles using mouse\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 p = 2.0*(gl_FragCoord.xy/max(iResolution.x, iResolution.y))-1.0;\n    p = p * vec2(1.0,-1.0) - vec2(0.0,0.4);\n    fragColor = color(spade(p, 1.0));\n}","name":"Image","description":"","type":"image"}]}