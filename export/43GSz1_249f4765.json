{"ver":"0.1","info":{"id":"43GSz1","date":"1719867642","viewed":56,"name":"lofty 3x1x1 space bricks pattern","username":"jt","description":"A lofty, symmetric \"brickwork\" of 3x1x1 bricks,\nconnected by T crossings in alternating dimensions.\nThe gaps between the bricks allow for all diagonals to pass through,\nso if realized as a building, sunlight can reach into the structure.\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["voxels","space","pattern","dda","brick","bricks","architecture","structure","symmetric","brickwork","3x1x1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/43GSz1 lofty 3x1x1 space bricks pattern, 2024 by jt\n\n// A lofty, symmetric \"brickwork\" of 3x1x1 bricks,\n// connected by T crossings in alternating dimensions.\n// The gaps between the bricks allow for all diagonals to pass through,\n// so if realized as a building, sunlight can reach into the structure.\n\n// NOTE: This is a subset of a mucube\n//       https://en.wikipedia.org/wiki/Regular_skew_apeirohedron\n//       and also possibly related to https://en.wikipedia.org/wiki/Laves_graph\n\n// NOTE: For clarity this version is unlit, with a focus on the structure.\n\n// Related to: https://www.shadertoy.com/view/l3GGR3 seven direction pencil structure\n\n// tags: voxels, dda, space, brick, bricks, symmetric, architecture, 3x1x1, brickwork, pattern, structure\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nbool spacebricks_pillars(ivec3 cell, ivec3 limit) // https://www.shadertoy.com/view/43GSz1 lofty achiral 3x1x1 space bricks (jt)\n{\n    limit = 4 * limit + 3;\n    if(any(lessThan(cell,-limit)) || any(greaterThan(cell,+limit)))\n        return false;\n\n    ivec3 local = cell & 3;\n    return local.xy == ivec2(0,0) && local.z != 0;\n}\n\nuint spacebricks(ivec3 cell) // https://www.shadertoy.com/view/43GSz1 lofty achiral 3x1x1 space bricks (jt)\n{\n    ivec3 limit = ivec3(1,1,1);\n\n    ivec3 local = cell & 3;\n\n    if(spacebricks_pillars(cell.xyz+ivec3(0,2,0), limit.xyz)) return 4u;\n    if(spacebricks_pillars(cell.xyz+ivec3(2,0,2), limit.xyz)) return 7u - 4u;\n\n    if(spacebricks_pillars(cell.yzx+ivec3(0,2,0), limit.yzx)) return 2u;\n    if(spacebricks_pillars(cell.yzx+ivec3(2,0,2), limit.yzx)) return 7u - 2u;\n\n    if(spacebricks_pillars(cell.zxy+ivec3(0,2,0), limit.zxy)) return 1u;\n    if(spacebricks_pillars(cell.zxy+ivec3(2,0,2), limit.zxy)) return 7u - 1u;\n\n    return 0u;\n}\n\n#define BLACK vec3(0)\n#define GREY vec3(0.5)\n#define RED vec3(1,0,0)\n#define GREEN vec3(0,1,0)\n#define YELLOW vec3(1,1,0)\n#define BLUE vec3(0,0,1)\n#define MAGENTA vec3(1,0,1)\n#define CYAN vec3(0,1,1)\n#define WHITE vec3(1,1,1)\n\n#define COLORS vec3[](GREY,RED,GREEN,YELLOW,BLUE,MAGENTA,CYAN,WHITE)\n\nvec3 code(uint c)\n{\n    //return COLORS[c % 8u]; // % sometimes breaks on windows\n    return COLORS[c & 7u];\n}\n\n#define MAX_RAY_STEPS 64\n\nvoid mainImage(out vec4 fragColor, in vec2 I)\n{\n    bool demo = max(iMouse.x, iMouse.y) < 5.0;\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // thanks Fabrice for reminding me (repeatedly) to use this nice one-liner :D\n    vec3 rd = normalize(vec3(I.x, 2.0, I.y)); // must be normalized!\n    vec3 ro = vec3(0.0,-25.0, 0.0);\n\n    float mx = -2.0 * pi * float(iMouse.x) / R.x;\n    float my = -pi / 2.0 + pi * float(iMouse.y) / R.y;\n    //mx = !demo ? mx : +pi / 4.0 + 2.0 * pi * fract(iTime * 0.01);\n    mx = !demo ? mx : +pi / 2.0 + 2.0 * pi * fract(iTime * 0.01);\n    my = !demo ? my : -pi / 5.0;\n\n    mat3 M = yaw_pitch_roll(mx, my, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n\n    vec3 color = vec3(0.0);\n\n    {\n        // Based on https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 (somewhat reduced)\n        // \"The raycasting code is somewhat based around a 2D raycasting toutorial found here:\n        //  http://lodev.org/cgtutor/raycasting.html\" (fb39ca4)\n        bvec3 mask;\n        ivec3 cell = ivec3(floor(ro));\n        vec3 dd = 1.0 / abs(rd);\n        ivec3 rs = ivec3(sign(rd));\n        vec3 sd = (sign(rd) * (vec3(cell) - ro) + (sign(rd) * 0.5) + 0.5) * dd;\n        for (int i = 0; i < MAX_RAY_STEPS; i++)\n        {\n            uint q = spacebricks(cell);\n            if(q > 0u)\n            {\n                color = code(q);\n                break;\n            }\n\n            mask = lessThanEqual(sd.xyz, min(sd.yzx, sd.zxy));\n            sd += vec3(mask) * dd;\n            cell += ivec3(vec3(mask)) * rs;\n        }\n\n        color *= mask.x ? vec3(0.25) : mask.y ? vec3(0.5) : mask.z ? vec3(1.0) : vec3(0.0);\n    }\n\n    fragColor = vec4(sqrt(color), 1.0); // gamma corrected\n}\n","name":"Image","description":"","type":"image"}]}