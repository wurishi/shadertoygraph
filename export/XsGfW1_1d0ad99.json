{"ver":"0.1","info":{"id":"XsGfW1","date":"1528509686","viewed":405,"name":"Raymarching - YYYY","username":"minujeong","description":"Simple sketch trying to get used to raymarching.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FAR     80.0\n#define NRM_OFS 0.001\n\nfloat sphere(vec3 p, float radius)\n{\n  return length(p) - radius;\n}\n\nfloat capsule(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat box(vec3 p, vec3 b)\n{\n    return length(max(abs(p) - b, 0.0));\n}\n\nfloat rbox(vec3 p, vec3 b, float r)\n{\n\treturn length(box(p, b)) - r;\n}\n\nfloat blend(float a, float b, float k)\n{\n    float h = clamp(0.5 + 0.5 * (a - b) / k, 0.0, 1.0);\n    return mix(a, b, h) - k * h * (1.0 - h);\n}\n\nfloat world(vec3 p)\n{\n    float a = mod(iTime * 1.25, 3.141592 * 2.0);\n    mat3 rx = mat3(\n        cos(a), 0, sin(a),\n        0, 1, 0,\n        -sin(a), 0, cos(a)\n    );\n    p = rx * p;\n    \n    float bax = 0.06;\n    float baz = 0.13;\n    mat3 bodyrmat = mat3(\n        1, 0, 0,\n        0, cos(bax), -sin(bax),\n        0, sin(bax), cos(bax)\n    ) * mat3(\n        cos(baz), -sin(baz), 0,\n        sin(baz), cos(baz), 0,\n        0, 0, 1\n    );\n\n    \n    float chest = blend(\n        sphere(p + vec3(0.05, 0.12, 0.14), 0.06),\n        sphere(p + vec3(-0.25, 0.12, 0.14), 0.06),\n        0.1\n    );\n    \n    float heap = blend(\n        sphere(p + vec3(0.08, 0.72, -0.24), 0.13),\n        sphere(p + vec3(-0.08, 0.78, -0.24), 0.13),\n        0.05\n    );\n    \n    float arms = min(\n        blend(\n        \tcapsule(p, vec3(0.33, 0.18, 0.12), vec3(0.56, -0.22, 0.16), 0.13),\n            capsule(p, vec3(0.56, -0.24, 0.16), vec3(0.32, -0.65, -0.12), 0.13),\n            0.02\n        ),\n        min(\n            blend(\n                capsule(p, vec3(-0.29, 0.15, -0.04), vec3(-0.45, -0.05, -0.4), 0.13),\n                capsule(p, vec3(-0.45, -0.05, -0.4), vec3(-0.32, 0.45, -0.37), 0.13),\n                0.02\n            ),\n            capsule(\n                p,\n                vec3(-0.32, 0.52, -0.37),\n                vec3(-0.44, 0.72, -0.25),\n                0.12\n            )\n        )\n    );\n    \n    float legs = min(\n        blend(\n            capsule(p, vec3(0.26, -0.82, 0.14), vec3(0.15, -1.52, -0.08), 0.19),\n            capsule(p, vec3(0.15, -1.57, -0.08), vec3(0.17, -2.2, -0.12), 0.18),\n            0.05\n        ),\n        blend(\n            capsule(p, vec3(-0.26, -0.82, 0.14), vec3(-0.16, -1.35, -0.08), 0.19),\n            capsule(p, vec3(-0.16, -1.40, -0.08), vec3(-0.14, -2.2, 0.16), 0.18),\n            0.05\n        )\n    );\n    float pelvis = sphere(p + vec3(-0.04, 0.65, -0.07), 0.16);\n    legs = blend(legs, blend(heap, pelvis, 0.5), 0.2);\n    \n    float body = blend(\n        rbox(\n            bodyrmat * (p + vec3(-0.05, 0.22, -0.05)),\n            vec3(0.16, 0.42, 0.07),\n            0.09),\n        chest,\n        0.4\n    );\n    float head = blend(\n        sphere(p + vec3(-0.05, -0.87, 0.06), 0.35),\n        sphere(p + vec3(0.05, -0.65, 0.18), 0.06),\n        0.4\n    );\n    float torso = blend(body, head, 0.15);\n    float statue = blend(torso, legs, 0.1);\n\treturn blend(statue, arms, 0.06);\n}\n\nfloat raymarch(vec3 o, vec3 r)\n{\n    float t = 0.0;\n    vec3 p = vec3(0, 0, 0);\n    float d = 0.0;\n    float ad = 0.0;\n    for (int i = 0; i < 128; i++)\n    {\n        p = o + r * t;\n        d = world(p);\n        ad = abs(d);\n        if (ad < 0.01)\n        {\n            return t;\n        }\n        t += d;\n    }\n    \n    return FAR;\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(NRM_OFS, 0);\n    float d1 = world(p + e.xyy), d2 = world(p - e.xyy);\n    float d3 = world(p + e.yxy), d4 = world(p - e.yxy);\n    float d5 = world(p + e.yyx), d6 = world(p - e.yyx);\n    \n    return normalize(vec3(\n        d1 - d2,\n        d3 - d4,\n        d5 - d6\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    vec3 o = vec3(0.0, -0.5, -5.7);\n    vec3 r = normalize(vec3(uv, 1.15));\n    vec3 l = normalize(vec3(0, -5, 5));\n    vec3 h = vec3(r + l) * 0.5;\n    \n    float d = raymarch(o, r);\n    if (d < FAR)\n    {\n        vec3 n = normal(o + r * d);\n        float ndl = 1.0 - clamp(dot(n, l), -1.0, 0.0);\n        float ndh = - clamp(dot(n, h), -1.0, 0.0);\n        \n        vec3 color = mix(\n            vec3(0.02, 0.01, 0.03),\n            vec3(0.75, 0.5, 0.7),\n            ndl\n        );\n        color += pow(ndh, 52.0) * normalize(vec3(2, 1, 10)) * 10.0;\n        fragColor = vec4(mix(color, n, 0.3), 1.0);\n    }\n    else\n    {\n    \tfragColor = vec4(0.3, 0.3, 0.5, 1.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}