{"ver":"0.1","info":{"id":"lsKSDy","date":"1466449980","viewed":421,"name":"Cartoon raytracer test","username":"stduhpf","description":"Just a little test, not really convincing. Mouse enabled.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raytrcing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sph(vec3 p,float r)\n{\n    return length(p)-r-sin(-10.*p.y)/10.;\n}\n\nfloat hplane(vec3 p,float h)\n{\n    return p.y-h;\n}\n\n\nvec2 un(vec2 a, vec2 b)\n{\n    float t =  min(a,b).x;\n    float m = b.y;\n    if(a.x==t)\n        m=a.y;\n    return vec2(t,m);\n}\n\n\n\nvec2 map(vec3 pos)\n{\n    vec2 map = vec2(sph(pos-vec3(0,0,0),.5),1.);\n    map = un(map,vec2(hplane(pos,-1.),2.));\n\n    return map;\n}\nvec2 intersect(vec3 ro, vec3 rd,float n)\n{\n    float f=0.;\n    for(int i = 0; i <200; i++)\n    {\n        vec2 h = map(ro+f*rd);\n            if(h.x<0.01)\n                return vec2(f,h.y);\n               \tif(f > n)\n           break;\n        \n            f+=h.x*.8;\n    }\n    return vec2(0);\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(.001,0);\n    vec3 n=  vec3 (map(p+e.xyy).x-map(p-e.xyy).x,map(p+e.yxy).x-map(p-e.yxy).x,map(p+e.yyx).x-map(p-e.yyx).x);\n    return normalize(n);\n}\nfloat calcshadow(vec3 orig, vec3 rd,float dist)\n{\n    float f=1.02;\n    for(int i = 0; i <200; i++)\n    {\n        float h = map(orig+f*rd).x;\n            if(h<0.01)\n                return 0.;\n               \tif(f > dist)\n           break;\n        f+=h*.8;\n    }\n    return 1.;\n}\n\nfloat getl( float i , vec2 uv,float mat)\n{\n    float l = i;\n    i-=1.;\n    i/=2.;\n    float p = uv.x-uv.y+3.*mat;\n    int n = int(abs(4.*i));\n    i*=0.;\n        i+=smoothstep(0.,1.,(cos(100.*p)-.9)*7.);\n    if( n>0)\n        i += smoothstep(0.,1.,(cos(100.*p+3.14159)-.9)*7.);\n    if( n>1){\n        i += smoothstep(0.,1.,(cos(100.*p+1.57)-.9)*7.);\n         i += smoothstep(0.,1.,(cos(100.*p+4.7124)-.9)*7.);\n    }\n    return (floor(2.*l+2.)/3.)*clamp(0.,1.,1.-i);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\tvec2 uv = fragCoord.xy / iResolution.x- vec2(.5,.5+(iResolution.y-iResolution.x)/(2.*iResolution.x));\n    vec2 mse =iMouse.xy/iResolution.x-vec2(.5,.5+(iResolution.y-iResolution.x)/(2.*iResolution.x));\n    mse*=8.;\n    if(iMouse.xy==vec2(0))\n        mse*=0.;\n    mat3 rdroty = mat3(1,0,0,0,cos(mse.y),sin(mse.y),0,-sin(mse.y),cos(mse.y));\n    mat3 rdrotx = mat3(cos(mse.x),0,sin(mse.x),0,1,0,-sin(mse.x),0,cos(mse.x));\n    vec3 ro = vec3(0,0,-2)*rdroty*rdrotx;\n    vec3 rd = normalize(vec3(2.*(uv),1.)*rdroty*rdrotx);\n    vec3 ld=normalize(vec3(2,.8,-1));\n \n  \n        vec3 col = vec3(.5);\n    vec2 istc = intersect(ro,rd,20.);\n    if(istc.y>0.)\n    {\n        vec3 pos = ro+istc.x*rd;\n        vec3 nor = normal(pos);\n        float diff = clamp(0.,1.,dot(nor,ld));\n        float amb = .1;\n        vec3 ref = reflect(rd,nor);\n        diff*= clamp(0.,1.,calcshadow(pos,ld,100.));\n\n       float diffl = getl(diff,uv,istc.y);\n\t\t\n        float light = diffl;\n        col = vec3 (light-abs(fwidth(istc.x)));\n    }\n \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}