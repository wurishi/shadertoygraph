{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/*\n  Written by Alan Wolfe\n  http://demofox.org/\n  http://blog.demofox.org/\n\n  These are not bandlimited wave forms so probably sound pretty harsh to the ear!\n  I'll do bandlimited wave forms later.\n\n  More info here:\n  http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/\n\n  There's probably some better ways to do this without so much branching logic, but\n  doing it this way for clarity.  If you know of better branchless ways, feel free to\n  comment!!\n*/\n\n#define TWO_PI \t\t\t6.2831\n\n// the frequency of the tone\n#define TONE_FREQUENCY \t440.0  //A4\n\n// in orbits per second\n#define SOUND_ORBIT_RATE 0.1\n\n//========================= DRIVER CODE\nfloat makeSound(float time)\n{   \n    // make it fade in over time to avoid a startup \"pop\"\n    float envelope = max(min(iTime,1.0), 0.0);\n    \n\treturn sin(TONE_FREQUENCY*TWO_PI*time) * envelope;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspectRatio = iResolution.y / iResolution.x;\n    vec2 rawPercent = (fragCoord.xy / iResolution.xy);\n    vec2 percent = rawPercent;\n    percent.x /= 256.0;\n    percent.y = (percent.y) * 2.2 - 1.1;\n    \n    float timeOffset = iTime / 200.0;\n    float value = makeSound(percent.x + timeOffset);\n    \n    float volumeLeft  = cos(SOUND_ORBIT_RATE*TWO_PI*iTime);\n    float volumeRight = sin(SOUND_ORBIT_RATE*TWO_PI*iTime);\n    \n    rawPercent.x /= aspectRatio;\n    rawPercent.x += aspectRatio;\n    rawPercent.x -= 0.5 / aspectRatio;\n    vec2 orbitLocationPercent = vec2(\n        cos(SOUND_ORBIT_RATE*TWO_PI*iTime*2.0 + 3.14) * 0.45 + 0.5,\n        sin(SOUND_ORBIT_RATE*TWO_PI*iTime*2.0 + 3.14) * 0.45 + 0.5\n    );\n\n    // left channel\n    if (abs(percent.y-(value * volumeLeft)) < 0.01)\n        fragColor = vec4(1.0,0.0,0.0,1.0);\n    // right channel\n    else if (abs(percent.y-(value * volumeRight)) < 0.01)\n        fragColor = vec4(0.0,0.0,1.0,1.0);\n    // orbit ball\n    else if (distance(rawPercent,orbitLocationPercent) < 0.05)\n        fragColor = vec4(0.0,1.0,0.0,1.0);\n    // background\n    else\n\t\tfragColor = vec4(0.0,0.0,0.0,1.0);\n}","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":"/*\n  Written by Alan Wolfe\n  http://demofox.org/\n  http://blog.demofox.org/\n\n  These are not bandlimited wave forms so probably sound pretty harsh to the ear!\n  I'll do bandlimited wave forms later.\n\n  More info here:\n  http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/\n\n  There's probably some better ways to do this without so much branching logic, but\n  doing it this way for clarity.  If you know of better branchless ways, feel free to\n  comment!!\n*/\n\n#define TWO_PI \t\t\t6.2831\n\n// the frequency of the tone\n#define TONE_FREQUENCY \t440.0  //A4\n\n// in orbits per second\n#define SOUND_ORBIT_RATE 0.1\n\n//========================= DRIVER CODE\nfloat makeSound(float time)\n{\n    return sin(TONE_FREQUENCY*TWO_PI*time);\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    // generate a mono channel sound\n    float monoSound = makeSound(time);\n    \n    // make it fade in over time to avoid a startup \"pop\"\n    float envelope = max(min(time,1.0), 0.0);\n    \n    // calculate the volume for the left and right channel\n    float volumeLeft  = cos(SOUND_ORBIT_RATE*TWO_PI*time) * envelope;\n    float volumeRight = sin(SOUND_ORBIT_RATE*TWO_PI*time) * envelope;\n    \n    // return our mono sound as a stereo sound, using it for both channels\n    return vec2(monoSound * volumeLeft, monoSound * volumeRight);\n}","name":"Sound","description":"","type":"sound"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":true,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dsSD2","date":"1406998801","viewed":338,"name":"3d Stereo Orbit Sound","username":"demofox","description":"Making a mono sound and playing it through the left and right channels, but modulating the left and right channel volumes.\nA pretty ghetto effect, I'm sure there are plenty things that could make it sound better.  If you know of any, please comment! (:","likes":9,"published":1,"flags":8,"usePreview":0,"tags":["3d","sound","sine","stereo"],"hasliked":0,"parentid":"","parentname":""}}