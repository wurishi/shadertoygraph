{"ver":"0.1","info":{"id":"3lcfWN","date":"1612725060","viewed":330,"name":"FBM Fire","username":"abelu","description":"FMB fire","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 3\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .52;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\n\n#define DETAILS 0.04\n#define SPEED 100.0\n#define FORCE 0.5\n#define SHIFT 0.6\n\nvec3 fire(in vec2 fragCoord) {\n    vec2 seed = vec2(\n        fragCoord.x + sin(iTime),\n        fragCoord.y - iTime * SPEED\n    ) * DETAILS;\n\n    float noise1 = fbm(seed);\n    float noise2 = (fbm(seed + noise1 + iTime) - SHIFT) * FORCE;\n\n    float noise3 = fbm(vec2(noise1, noise2)) * FORCE;\n    float noise4 = fbm(vec2(noise2, noise1));\n\n    vec2 coords = fragCoord.xy/iResolution.xy;\n    coords = vec2(coords.x, coords.y * 0.5);\n\n    float shape = 1.0 - smoothstep(\n        0.0,\n        0.4,\n        length(coords - vec2(0.5, 0.0))\n    );\n\n    const vec3 red = vec3(0.8, 0.0, 0.1);\n    const vec3 yellow = vec3(0.8, 0.8, 0.1);\n    const vec3 darkRed = vec3(0.3, 0.0, 0.2);\n    const vec3 dark = vec3(0.1, 0.1, 0.2);\n\n    float opacity = shape - noise2 + noise4 * shape - noise3 *\n      (1.0 + sin(iTime * 3.) * 0.2 - shape);\n\n    vec3 color1 = mix(red, darkRed, noise3 + SHIFT - shape);\n    vec3 color2 = mix(red, yellow, noise3 + SHIFT);\n    vec3 color3 = mix(darkRed, dark, noise4 + SHIFT);\n\n    return (color1 + color2 + color3) * opacity;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  fragColor = vec4(fire(fragCoord), 1.0);\n}","name":"Image","description":"","type":"image"}]}