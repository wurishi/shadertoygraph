{"ver":"0.1","info":{"id":"4st3WS","date":"1452414667","viewed":1108,"name":"Positioned Buffer Writing","username":"Hamneggs","description":"Making my own way of writing multiple things to a buffer.","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["buffer","multipass","positional","writing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"/**\n * Illustrates using a multi-pass framebuffer to store data.\n * License: Creative Commons CC0 1.0 Universal (CC-0)\n *\n * This simply draws the framebuffer texture to the screen.\n * Note though, that it's zoomed in. Each square is actually a single\n * pixel in the framebuffer.\n */\n\n#define DATA_BUFFER iChannel0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(DATA_BUFFER,uv*.1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define BUFFER iChannel0\n\n// Current buffer size for loading data.\n#define BUFF_RES iChannelResolution[0].xy\n\n// Reads a texel. We don't really need component-wise read functions.\nvec4 readTexel(in sampler2D buffer, in vec2 pos )\n{\n    return texture(buffer, (pos+.5)/BUFF_RES);\n}\n\n// All of these methods check to see if the current fragment is\n// at the position of the pixel we want to save to.\n// Why? Because we can load from any pixel, but only write to \n// the one at the current fragment's position.\n\n// Writes a single component of a pixel in a buffer.\nvoid write1( inout float buffer, in float val, in vec2 pos, in vec2 fragCoord)\n{\n    vec2 offset = abs(pos-floor(fragCoord));\n    buffer = mix( val, buffer, step(.01,max(offset.x,offset.y)) );\n}\n\n// Writes two components of a pixel in a buffer.\nvoid write2( inout vec2 buffer, in vec2 val, in vec2 pos, in vec2 fragCoord)\n{\n    vec2 offset = abs(pos-floor(fragCoord));\n    buffer = mix( val, buffer, step(.01,max(offset.x,offset.y)) );\n}\n\n// Writes three of the components.\nvoid write3( inout vec3 buffer, in vec3 val, in vec2 pos, in vec2 fragCoord)\n{\n    vec2 offset = abs(pos-floor(fragCoord));\n    buffer = mix( val, buffer, step(.01,max(offset.x,offset.y)) );\n}\n\n// Writes all components of a texel (at once).\nvoid write4( inout vec4 buffer, in vec4 val, in vec2 pos, in vec2 fragCoord)\n{\n    vec2 offset = abs(pos-floor(fragCoord));\n    buffer = mix( val, buffer, step(.01,max(offset.x,offset.y)) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 buff = texture(BUFFER, uv);\n    write1(buff.r, \t1.0, \t\tvec2(10.0, 5.0), fragCoord);\n    write2(buff.rb, vec2(1.0), \tvec2(15.0, 5.0), fragCoord);\n    write3(buff.rgb,vec3(1.0), \tvec2(20.0, 5.0), fragCoord);\n    write4(buff, \tvec4(1.0), \tvec2(25.0, 5.0), fragCoord);\n    fragColor = buff;\n}","name":"Buf A","description":"","type":"buffer"}]}