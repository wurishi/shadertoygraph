{"ver":"0.1","info":{"id":"XcBBRz","date":"1724535504","viewed":249,"name":"Irregular Gyroids","username":"Xor","description":"Here's a neat little formula I've found for creating aperiodic patterns that almost look like Simplex noise for a tiny fraction of the cost.","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["noise","raymarch","gyroid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    \"Irregular Gyroids\" by @XorDev\n\n    Here's a neat little formula I've found for creating aperiodic patterns\n    that almost look like Simplex noise for a tiny fraction of the cost.\n*/\nfloat map(vec3 p)\n{\n    //Scaling factor (the less rational is generally better)\n    float S = exp(cos(floor(iTime)));//1.618;\n    //Gyroid with cos scaled separately\n    float d = dot(sin(p), cos(p.yzx*S)) + p.y;\n    //Correct for scaling factor\n    return d*inversesqrt(1.+S*S);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Ray direction\n    vec3 d = normalize(vec3(fragCoord,0)-iResolution.xyy*.5);\n    //Rotate pitch down\n    d.yz *= mat2(.8,.6,-.6,.8);\n    \n    //Camera moving forward\n    vec3 p = vec3(9,5,-iTime);\n    \n    //Raymarch loop with 100 iterations\n    for(float i = 0.0; i<100.0; i++)\n        //Step forward\n        p += d*map(p);\n    \n    //Highlight edges using derivatives\n    float e = length(fwidth(p)*iResolution.y);\n    //Color and tonemap with tanh\n    fragColor = tanh(e/vec4(60,40,20,1));\n}","name":"Image","description":"","type":"image"}]}