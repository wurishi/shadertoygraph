{"ver":"0.1","info":{"id":"flyBzm","date":"1664368927","viewed":110,"name":"Planet  Earth Shader","username":"sysrpl","description":"A rendering of the planet earth","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["earth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nImage credits: Nasa, http://visibleearth.nasa.gov/\n\n\nA simple method to load custom image textures in Shadertoy\n----------------------------------------------------------\n\nThe idea is to call directly the SetTexture function found in Shadertoy js code.\n\nHere is how to loads the three textures needed for this shader:\n\tOpen the javascript console of your browser:\n\tThen copy the following lines in the console to load custom 2048x2048 textures:\n\n\ngShaderToy.SetTexture(0, {mSrc:'https://cache.getlazarus.org/images/earth/earth_daymap.jpg', mType:'texture', mID:1, mSampler:{ filter: 'linear', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }});\ngShaderToy.SetTexture(1, {mSrc:'https://cache.getlazarus.org/images/earth/earth_nightmap.jpg', mType:'texture', mID:1, mSampler:{ filter: 'linear', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }});\n\n\nHere is a list of available earth textures:\n\n\thttps://cache.getlazarus.org/images/earth/earth_clouds.jpg\n\thttps://cache.getlazarus.org/images/earth/earth_daymap.jpg\n\thttps://cache.getlazarus.org/images/earth/earth_nightmap.jpg\n\thttps://cache.getlazarus.org/images/earth/earth_normal_map.png\n\thttps://cache.getlazarus.org/images/earth/earth_specular_map.png\n\nAdd '2k_' in front of the names to get higher resolution textures:\n\ngShaderToy.SetTexture(0, {mSrc:'https://cache.getlazarus.org/images/earth/2k_earth_daymap.jpg', mType:'texture', mID:1, mSampler:{ filter: 'linear', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }});\ngShaderToy.SetTexture(1, {mSrc:'https://cache.getlazarus.org/images/earth/2k_earth_nightmap.jpg', mType:'texture', mID:1, mSampler:{ filter: 'linear', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }});\n\nPress return to execute and load the textures.\n\n\nUsing your own images:\n - The first argument of gShaderToy.SetTexture() is the iChannel index from 0 to 3\n - The second argument defines the url and additional parameters of the texture.\n - Your images must be hosted on a server (such as Dropbox) that allows direct link \n   from a different domain in javascript. Otherwise, you will get an error message:\n   \"'example.com has been blocked from loading by Cross-Origin Resource Sharing policy\"\n\n*/\n\n#define PI 3.14159265359\n#define d2r(a) ((a) * 180.0 / PI)\n\nconst float edge = 0.99;\nconst float scale = 0.8;\nconst float tilt = 0.4;\nvec4 sun = vec4(-1., 0., 1., 1.);\n\n// rotate on the X axis\nmat4 rotateX(float angle ) {\n    return mat4(\n    1., 0., 0., 0.,\n    0., cos(angle), -sin(angle), 0.,\n    0., sin(angle), cos(angle), 0.,\n    0., 0., 0., 1);\n}\n \n// rotate on the Y axis\nmat4 rotateY(float angle) {\n  return mat4(\n    cos(angle), 0., sin(angle), 0.,\n    0., 1.0, 0., 0.,\n    -sin(angle), 0., cos(angle), 0.,\n    0., 0., 0., 1);\n}\n \n// rotate on the Z axis\nmat4 rotateZ(float angle) {\n    return mat4(\n    cos(angle), -sin(angle), 0., 0.,\n    sin(angle), cos(angle), 0., 0.,\n    0., 0., 1, 0.,\n    0., 0., 0., 1);\n}\n \nvec4 equator(vec3 point) {\n    vec4 green = vec4(0.0, 1.0, 0.0, 1.0);\n    float a = 0.0;\n    if (abs(point.y) < 0.005)\n        a += smoothstep(0.005, 0., abs(point.y));\n    if (abs(point.z) < 0.005)\n        a += smoothstep(0.005, 0., abs(point.z));\n    if (distance(point.xz, vec2(0.0)) < 0.025)\n        a += smoothstep(0.025, 0.02, distance(point.xz, vec2(0.0)));\n    green.a = clamp(a, 0., 1.);\n    return green;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    //scale += 1.0 + sin(iTime);\n    //fragCoord = fragCoord / scale;\n    vec2 res = iResolution.xy;\n    vec2 center = iResolution.xy / 2.0;\n    fragCoord = (fragCoord - center) / scale + center;\n\tfloat ratio = res.x / res.y;\n    // create uv coordinates\n\tvec2 uv = vec2(ratio, 1.0) * (2.0 * fragCoord.xy / res.xy - 1.0);\n    // smooth out the edge\n    float a = distance(uv, vec2(0));\n    a = a > edge ? smoothstep(edge, 1.0, a) : 0.0;\n    // create normal\n    vec3 n = vec3(uv, sqrt(1.0 - clamp(dot(uv, uv), 0.0, 1.0)));\n    // create normal colors\n    vec4 v = vec4(n, 1.0);\n    v.x = -v.x;\n    //v = rotateY(PI / -2.0) * rotateX(tilt) * v;\n    v = rotateY(-iTime / 6.0) * rotateX(tilt) * v;\n    sun = rotateY(-iTime / 6.0) * rotateX(tilt) * sun;\n    vec4 eye = vec4(0., 0.,- 1., 1.);\n    eye = rotateY(-iTime / 6.0) * rotateX(tilt) * eye;\n    uv.x = 0.5 + atan(v.z, v.x) / (2.0 * PI);\n    uv.y = 0.5 + asin(v.y) / PI;\n    vec4 diffuse = texture(iChannel0, uv);\n    vec4 night = texture(iChannel1, uv);\n    vec4 e = equator(v.xyz);\n    vec3 s =  normalize(sun.xyz);\n    float b = clamp(dot(v.xyz, s), 0., 1.);\n    s = reflect(v.xyz, -s);\n    float r = dot(eye.xyz, s);\n    vec4 color = diffuse * b  + night * smoothstep(0.3, 0., b); // // mix(night, diffuse, b);\n    color.rgb = color.rgb; // + vec3(1.0) * pow(r, 80.);\n    color.rgb = mix(color.rgb, e.rgb, e.a);\n    // smooth out the edges\n    color.rgb = mix(color.rgb, vec3(0.0), a);\n    // final result    \n\tfragColor = vec4(color.rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}