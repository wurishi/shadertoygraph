{"ver":"0.1","info":{"id":"sdyfRh","date":"1657641499","viewed":80,"name":"Spaghetti of Darkness","username":"Mojomajor","description":"green sphere/sun VS dark tentacles","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["circlenoisefbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define time iTime *.5\n#define tau 6.2831853\n#define PI 3.141592\nfloat random (in vec2 _st) {\n            return fract(sin(dot(_st.xy,\n                                vec2(12.9898*sin(time),78.233)))*\n                43758.5453123);\n        }\nfloat noise (in vec2 _st) {\n            vec2 i = floor(_st);\n            vec2 f = fract(_st);\n\n            // Four corners in 2D of a tile\n            float a = random(i);\n            float b = random(i + vec2(1.0, 0.0));\n            float c = random(i + vec2(0.0, 1.0));\n            float d = random(i + vec2(1.0, 1.0));\n\n            vec2 u = f * f * (3.0 - 2.0 * f);\n\n            return mix(a, b, u.x) +\n                    (c - a)* u.y * (1.0 - u.x) +\n                    (d - b) * u.x * u.y;\n        }\nmat2 makem2(in float theta){float c = cos(theta);float s = sin(theta);return mat2(c,-s,s,c);}\nfloat fbm(in vec2 p)\n{\t\n\tfloat z=2.;\n\tfloat rz = 0.;\n\tvec2 bp = p;\n\tfor (float i= 1.;i < 6.;i++)\n\t{\n\t\trz+= abs((noise(p)-0.5)*2.)/z;\n\t\tz = z*2.;\n\t\tp = p*2.;\n\t}\n\treturn rz;\n}\n\nfloat dualfbm(in vec2 p)\n{\n    //get two rotated fbm calls and displace the domain\n\tvec2 p2 = p*.1;\n\tvec2 basis = vec2(fbm(p2-time*0.2),fbm(p2+time*1.38));\n\tbasis = (basis-.5)*.2;\n\tp += basis;\n\t\n\t//coloring\n\treturn fbm(p*makem2(time*0.01));\n}\n\n\n// circle\n// half circle\n// arc\n//\n\nvec4 circle(vec2 uv, float blur,vec3 color, vec3 baseColor) {\n    float radius = 0.25;\n    float d = sqrt(dot(uv,uv));\n    float borderThickness = blur;\n    float t1 = 1.0 - smoothstep(radius-borderThickness, radius, d);\n    float t2 = 1.0 - smoothstep(radius, radius+borderThickness, d);\n    return vec4(mix(color, baseColor, t1), t2);\n\n}\n\nfloat circleBOS(in vec2 _st, in float _radius){\n    vec2 dist = _st-vec2(0.5);\n\treturn 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(dist,dist)*4.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // center 0\n    uv -= 0.5;\n    // aspect fix\n    uv.x *= iResolution.x/iResolution.y;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(time+uv.xyx+vec3(0,2,4));\n    \n    // mirror\n    //uv.x= abs(uv.x);\n    \n    vec4 col = vec4( 0.0);\n    // center 0\n    uv-=0.5;\n    //uv*=10.;\n    \n    float d = length(uv);\n    float blur = 0.009*abs(sin(time)/10.+.5)/noise(uv);\n    \n    float fm = dualfbm(vec2(d/blur,0.9));\n    \n    //col = vec4(vec3(smoothstep(0.1+blur,0.01-blur,d*fm)),1.);\n    // polar coordinates\n    \n    //uv.y+=1.;\n    \n    col += circle(uv, 0.1, vec3(1.0,.0,1.),vec3(1.,1.,0.));\n    vec2 st = vec2(atan(uv.x,uv.y), length(uv));\n    st *= 70.4;\n    //col.rgb *= texture( iChannel0, st*noise(uv) ).xyz;\n    col*=2.2;\n    \n    \n    // light scratches\n    col += vec4(vec3(circleBOS(uv+0.5,fm)),1.);\n    \n    // space color candy\n    col.r = smoothstep(0.5+blur,0.49-blur,d*fm);\n    //col.g = smoothstep(0.3+blur,0.29-blur,d*fm);\n    \n    col.b = smoothstep(0.2+blur,0.19-blur,d*fm);\n    \n    // dark pulsar\n    col.rgb*=vec3(max(abs(sin(time)*cos(time)),0.5*fm));\n    \n    uv.x= abs(uv.x);\n    col.rgb *= 1.5 + 0.5*cos(time+uv.xyx+vec3(1,2,4));\n    col.rgb*=1.5;\n    //uv *= 0.10;\n    \n    \n    // Output to screen\n    fragColor = vec4(col);\n}","name":"Image","description":"","type":"image"}]}