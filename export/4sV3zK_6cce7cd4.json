{"ver":"0.1","info":{"id":"4sV3zK","date":"1455380152","viewed":936,"name":"WangTiles : PrimeGenerator","username":"phi16","description":"http://grahamshawcross.com/2012/10/12/wang-tiles-and-turing-machines/\nThis program can be used for this prime generator only...\ndrag to zoom","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int read(int p,int q){\n    vec3 v = texture(iChannel0,(vec2(q,p)+0.5)/iResolution.xy).xyz;\n    return int(v.x*4.) + int(v.y*4.)*4 + int(v.z*4.)*4*4;\n}\nint tile(int x,int y){\n    return read(x,y)-1;\n}\nint imod(int x,int y){\n    return x - x / y * y;\n}\nvoid writeF(int s,inout vec4 fragColor){\n    int r = s - s / 4 * 4;\n    s -= r;s /= 4;\n    int g = s - s / 4 * 4;\n    s -= r;s /= 4;\n    int b = s - s / 4 * 4;\n    fragColor = vec4(float(r)/4.,float(g)/4.,float(b)/4.,1);\n}\n#define write(x) writeF(x,fragColor)\n\n#define TileNum 30\n#define ColorNum 13\nint tileData(int t){ // u*n^3 + r*n^2 + d*n + l\n    if(t==0)return 455;\n    if(t==1)return 21307;\n    if(t==2)return 4702;\n    if(t==3)return 9477;\n    if(t==4)return 2379;\n    \n    if(t==5)return 366;\n    if(t==6)return 4746;\n    if(t==7)return 11169;\n    if(t==8)return 9478;\n    if(t==9)return 2422;\n    if(t==10)return 2380;\n    \n    if(t==11)return 405;\n    if(t==12)return 11402;\n    if(t==13)return 11234;\n    if(t==14)return 16134;\n    if(t==15)return 13446;\n    if(t==16)return 13430;\n    \n    if(t==17)return 2756;\n    if(t==18)return 23845;\n    if(t==19)return 3703;\n    if(t==20)return 24480;\n    if(t==21)return 24470;\n    \n    if(t==22)return 2764;\n    if(t==23)return 2720;\n    if(t==24)return 14576;\n    if(t==25)return 6800;\n    if(t==26)return 6777;\n    \n    if(t==27)return 13788;\n    if(t==28)return 13770;\n    if(t==29)return 6842;\n    return 0;\n}\nint up(int t){\n    return imod(tileData(t)/ColorNum/ColorNum/ColorNum,ColorNum);\n}\nint right(int t){\n    return imod(tileData(t)/ColorNum/ColorNum,ColorNum);\n}\nint down(int t){\n    return imod(tileData(t)/ColorNum,ColorNum);\n}\nint left(int t){\n    return imod(tileData(t),ColorNum);\n}\n\nfloat cap(vec2 p,vec2 a,vec2 b){ // https://iquilezles.org/articles/distfunctions\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);\n    return length(pa-ba*h);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    fragCoord.y = iResolution.y - fragCoord.y;\n    fragCoord/=pow(8.,(smoothstep(0.2,0.8,iMouse.y/iResolution.y)))*4.;\n    fragCoord.y-=1.;\n    int x = int(fragCoord.x);\n    int y = int(fragCoord.y);\n    if(fragCoord.y<0.){\n        int t = read(x,0)-1;\n        if(t==5){\n            vec2 d = vec2(fragCoord.x - float(x)-0.5, 0.4 - (fragCoord.y + 0.5)) * 1.5;\n            float ne = cap(d,vec2(0,0),vec2(0,2));\n            ne = min(ne,cap(d,vec2(0,0),vec2(-0.5,0.5)));\n            ne = min(ne,cap(d,vec2(0,0),vec2(0.5,0.5)));\n            fragColor = vec4(vec3(ne<0.1),1.);\n        }else fragColor=vec4(0.);\n    }else{\n        int t = read(x,y)-1;\n        float dx = fragCoord.x - float(x);\n        float dy = fragCoord.y - float(y);\n        write(0);\n        if(t!=-1){\n            if(dx > dy && 1.-dx > dy)write(up(t));\n            if(dx > dy && 1.-dx < dy)write(right(t));\n            if(dx < dy && 1.-dx < dy)write(down(t));\n            if(dx < dy && 1.-dx > dy)write(left(t));\n        }else fragColor = vec4(0.);\n    }\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"int read(int p,int q){\n    vec3 v = texture(iChannel0,(vec2(q,p)+0.5)/iResolution.xy).xyz;\n    return int(v.x*4.) + int(v.y*4.)*4 + int(v.z*4.)*4*4;\n}\nvoid writeF(int s,inout vec4 fragColor){\n    int r = s - s / 4 * 4;\n    s /= 4;\n    int g = s - s / 4 * 4;\n    s /= 4;\n    int b = s - s / 4 * 4;\n    fragColor = vec4(float(r)/4.,float(g)/4.,float(b)/4.,1);\n}\n#define tiling(x) writeF((x)+1,fragColor)\n\nint imod(int x,int y){\n    return x - x / y * y;\n}\n\n#define TileNum 30\n#define ColorNum 13\nint tileData(int t){ // u*n^3 + r*n^2 + d*n + l\n    if(t==0)return 455;\n    if(t==1)return 21307;\n    if(t==2)return 4702;\n    if(t==3)return 9477;\n    if(t==4)return 2379;\n    \n    if(t==5)return 366;\n    if(t==6)return 4746;\n    if(t==7)return 11169;\n    if(t==8)return 9478;\n    if(t==9)return 2422;\n    if(t==10)return 2380;\n    \n    if(t==11)return 405;\n    if(t==12)return 11402;\n    if(t==13)return 11234;\n    if(t==14)return 16134;\n    if(t==15)return 13446;\n    if(t==16)return 13430;\n    \n    if(t==17)return 2756;\n    if(t==18)return 23845;\n    if(t==19)return 3703;\n    if(t==20)return 24480;\n    if(t==21)return 24470;\n    \n    if(t==22)return 2764;\n    if(t==23)return 2720;\n    if(t==24)return 14576;\n    if(t==25)return 6800;\n    if(t==26)return 6777;\n    \n    if(t==27)return 13788;\n    if(t==28)return 13770;\n    if(t==29)return 6842;\n    return 0;\n}\nint tile(int x,int y){\n    return read(x,y)-1;\n}\nint up(int x,int y){\n    if(y==0)return 0;\n    int t = tile(x,y-1);\n    if(t==-1)return -1;\n    return imod(tileData(t)/ColorNum,ColorNum);\n}\nint right(int x,int y){\n    if(x==int(iResolution.y)-1)return -1;\n    int t = tile(x+1,y);\n    if(t==-1)return -1;\n    return imod(tileData(t),ColorNum);\n}\nint down(int x,int y){\n    if(y==int(iResolution.x)-1)return -1;\n    int t = tile(x,y+1);\n    if(t==-1)return -1;\n    return imod(tileData(t)/ColorNum/ColorNum/ColorNum,ColorNum);\n}\nint left(int x,int y){\n    if(x==0)return 0;\n    int t = tile(x-1,y);\n    if(t==-1)return -1;\n    return imod(tileData(t)/ColorNum/ColorNum,ColorNum);\n}\nbool valid(int t,int u,int r,int d,int l){\n    int iu = imod(tileData(t)/ColorNum/ColorNum/ColorNum,ColorNum);\n    int ir = imod(tileData(t)/ColorNum/ColorNum,ColorNum);\n    int id = imod(tileData(t)/ColorNum,ColorNum);\n    int il = imod(tileData(t),ColorNum);\n    if(u!=-1 && iu!=u)return false;\n    if(r!=-1 && ir!=r)return false;\n    if(d!=-1 && id!=d)return false;\n    if(l!=-1 && il!=l)return false;\n    return true;\n}\n\nbool condi(int x,int i){\n    bool e = i==0||i==1||i==3||i==4||i==17;\n    if(x==0){\n        return e;\n    }else{\n        return !e;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int x = int(fragCoord.y);\n    int y = int(fragCoord.x);\n    if(iFrame==0)tiling(-1);\n    else if(tile(x,y)>=0)tiling(tile(x,y));\n    else{\n        int u = up(x,y);\n        int r = right(x,y);\n        int d = down(x,y);\n        int l = left(x,y);\n        int hit = -1;\n        \n\t\tfor(int i=0;i<TileNum;i++){\n            if(valid(i,u,r,d,l) && condi(x,i) && (y==1 && (i==1 || i==2 || i==6 || i==7 || i==12 || i==13) || y!=1 && !(i==1 || i==2 || i==6 || i==7 || i==12 || i==13))){\n                if(hit!=-1){\n                    hit=-1;\n                    break;\n                }\n                hit=i;\n            }\n        }\n        if(hit==-1 && y>1){\n            if(l==1 && d==1){\n                if(left(x,y-1)==1)hit=10;\n                if(left(x,y-1)==4)hit=8;\n                if(left(x,y-1)==3)hit=10;\n                if(left(x,y-1)==8)hit=8;\n            }\n            if(l==3 && d==1)hit=23;\n            if(l==1 && d==6){\n                if(left(x,y-1)==1)hit=16;\n                if(left(x,y-1)==4)hit=14;\n                if(left(x,y-1)==3)hit=16;\n                if(left(x,y-1)==8)hit=14;\n            }\n            if(l==3 && d==6)hit=15;\n            if(u==1 && r==3){\n                if(x==0)hit=17;\n                else hit=23;\n            }\n            if(r==1 && u==1){\n                if(x==0)hit=4;\n                if(right(x,y+1)==4)hit=9;\n                else hit=10;\n            }\n        }\n        tiling(hit);\n    }\n}\n","name":"Buf A","description":"","type":"buffer"}]}