{"ver":"0.1","info":{"id":"ctsBzX","date":"1693273067","viewed":63,"name":"juggling circle-shuffle","username":"Ash_K","description":"distance to 3 juggling circles used to shuffle a vec3 repeatedly, colors are accidental","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf","triangle","colorful","circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float TAU = 6.283185307;\n\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat mirror(in float val, in float period){\n\n    return abs(mod(length(val), 2.0 * period) - period)/period;\n}\n\n\nvec3 shuffle( in vec3 uv, in float s){\n    float rad1 = sin(iTime*4.0 * s);\n    vec2 centre1 = (vec2(sin(iTime * s), cos(iTime * s)) * rad1);\n    \n    float rad2 = sin(s * iTime*4.0 + TAU/3.0);\n    vec2 centre2 = (vec2(sin(s * iTime + TAU/3.0), cos(s * iTime + TAU/3.0)) * rad2);\n    float rad3 = sin(s * iTime*4.0 - TAU/1.5);\n    vec2 centre3 = (vec2(sin(s * iTime + TAU/1.5), cos(s * iTime + TAU/1.5)) * rad3);\n    \n    vec3 uv2 = vec3(0.0);\n    uv2.x = mirror(length(uv.yz - centre1), 1.0);\n    uv2.y = mirror(length(uv.xz - centre2), 1.0);\n    uv2.z = mirror(length(uv.xy - centre3), 1.0);\n\n\n    float circles_xy = mirror(sdEquilateralTriangle(uv2.xy, 0.5), 1.0);\n    float circles_yz = mirror(sdEquilateralTriangle(uv2.yz, 0.5), 1.0);\n    float circles_zx = mirror(sdEquilateralTriangle(uv2.zx, 0.5), 1.0);\n    return vec3(circles_xy, circles_yz, circles_zx);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = (uv - vec2(0.5)) * 2.0 * vec2(iResolution.x/iResolution.y, 1.0);\n    \n    \n    float spd = 0.2;\n    \n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    float rad1 = sin(spd * iTime*4.0);\n    vec2 centre1 = (vec2(sin(spd * iTime), cos(spd * iTime)) * rad1);\n    \n    float rad2 = sin(spd * iTime*4.0 + TAU/3.0);\n    vec2 centre2 = (vec2(sin(spd * iTime + TAU/3.0), cos(spd * iTime + TAU/3.0)) * rad2);\n    float rad3 = sin(spd * iTime*4.0 - TAU/1.5);\n    vec2 centre3 = (vec2(sin(spd * iTime + TAU/1.5), cos(spd * iTime + TAU/1.5)) * rad3);\n    \n    vec3 uv2 = vec3(0.0);\n    uv2.x = mirror(length(uv - centre1), 1.0);\n    uv2.y = mirror(length(uv - centre2), 1.0);\n    uv2.z = mirror(length(uv - centre3), 1.0);\n    \n    vec3 out1 = shuffle(uv2, 0.05);\n    \n    out1 = shuffle(out1.zyx, 0.30);\n    out1 = shuffle(out1.xyz, 0.05);\n    out1 = shuffle(out1.xzy, 0.15);\n\n    // Output to screen\n    fragColor = vec4(mix(out1, uv2, 0.0), 1.0);\n    //fragColor = vec4(uv2, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}