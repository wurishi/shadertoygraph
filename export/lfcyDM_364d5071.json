{"ver":"0.1","info":{"id":"lfcyDM","date":"1730738510","viewed":211,"name":"Segment on Sphere SDF","username":"SnoopethDuckDuck","description":"See common for short explanation, it's a simple technique similar to a line segment sdf :)\n\nThanks to iq for all the borrowed code","likes":22,"published":3,"flags":0,"usePreview":0,"tags":["procedural","3d","raymarching","distancefield","sdf","sphere","sphere","primitives","segment","cut"],"hasliked":0,"parentid":"7tVXRt","parentname":"CutHollowSphere - distance 3D"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2022 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n// r = sphere's radius\n// h = cutting's plane's position\n// t = thickness\nfloat sdCutHollowSphere( vec3 p, float r, float h, float t )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    float w = sqrt(r*r-h*h);\n    \n    return ((h*q.x<w*q.y) ? length(q-vec2(w,h)) : \n                            abs(length(q)-r) ) - t;\n}\n\n// m = max angle \n// r = sphere's radius\n// h = cutting's plane's position\n// t = thickness\nfloat sdSegmentSphere( vec3 p, float m, float r, float h, float t )\n{\n    // Mirror in z for easier calculation\n    p.z = abs(p.z); \n    \n    // Angle in y-z plane, clamped to max angle m\n    float a = min(atan(p.z, -p.y), m);\n    \n    // Rotate in y-z so each p corresponds to the case in\n    // sdCutHollowSphere() i.e. sphere-cap at bottom of sphere\n    p.yz *= mat2(cos(a), -sin(a), sin(a), cos(a));\n    \n    // Return sphere-cap. Done!\n    return sdCutHollowSphere(p, r, h, t);\n}\n\nfloat map( in vec3 p )\n{\n    // Rotate so it looks cool\n    // p.xy *= rot(iTime);\n    // p.yz *= rot(iTime/3.);\n    \n    // Parameters: max angle, sphere radius, cut height, thickness\n    float m = (.5 + .5*cos(.6*iTime)) * 3.14159;\n    float r = .4;\n    float h = mix(-.33, -.398, .5 + .5 * cos(.4*iTime));\n    float t = .01;\n    \n    return sdSegmentSphere(p, m, r, h, t);\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, float tmin, float tmax, const float k )\n{\n\tfloat res = 1.0;\n    float t = tmin;\n    for( int i=0; i<64; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        res = min( res, k*h/t );\n        t += clamp( h, 0.01, 0.10 );\n        if( res<0.002 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n    \n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 3\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = sin(0.2*iTime);\n\tvec3 ro = vec3( 1.0*cos(an), 0.0, 1.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n        #else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // raymarch\n        const float tmax = 5.0;\n        float t = 0.0;\n        for( int i=0; i<256; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n        \n    \n        // shading/lighting\t\n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            vec3 lig = vec3(0.57703);\n            float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n            if( dif>0.001 ) dif *= calcSoftshadow( pos+nor*0.001, lig, 0.001, 1.0, 32.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif;\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Rough idea: \n// Find the closest point on an arc, then draw a \n// sphere-cap sdf around that point\n\n// It's similar to a segment sdf where you'd find the closest point \n// on the segment, then draw a circle around that point\n\n// ---\n\n// > All the relevant code is in sdSegmentSphere() and map()\n// > The arc lies in the y-z plane with it's bottom at negative y\n// > The cut height parameter \"h\" used in sdCutHollowSphere() is\n//   slightly unwieldy, an angle-based parameter might be better\n// > Suggestions / improvements are appreciated :)","name":"Common","description":"","type":"common"}]}