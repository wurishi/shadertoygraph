{"ver":"0.1","info":{"id":"stS3zW","date":"1623424295","viewed":128,"name":"Rainbow Melting","username":"playmobil","description":"A simple but yet nice and colorful effect.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["colorful","fluid","loop","rainbow","melting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Rainbow Melting - By Sandro Benigno - Jun, 2021\n\n#define PI radians(180.)\n\n//2D Rotation Matrix\nmat2 rotate2D(float a){\n    return mat2(-sin(a), cos(a),\n                 cos(a), sin(a));\n}\n\n//Using polar coords calc in a creative way\nvec2 wave(vec2 v, float r){\n    return vec2(r*cos(v.x),r*sin(v.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 st = fragCoord/iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n\n    //Time tunning\n    float tmp = iTime / 2.0;\n\n    //Normalizing ST coords (centered origin)\n    st = st * 2.0 - 1.0;\n    //Correcting the aspect ratio\n    st.x *= ratio;\n\n    //Rotating by matrix multiplying\n    st *= rotate2D(0.75 * PI * tmp/4.);\n\n    //Zooming in/out\n    st *= sin(iTime/4.0 * PI) + 2.0;\n\n    //Applying the distortion\n    st = wave(st*6.0,0.3);\n\n    //Base Color\n    vec3 c = vec3(0.0);\n\n    //Shapping block\n    float dist = distance(st,vec2(cos(tmp*2.0)/2.0,sin(tmp*2.0)/2.0));\n    float r = 0.6;\n    float mask = smoothstep(r+0.5,r-0.5,dist);\n    float distfrac = fract(pow(dist,-1.5)+tmp*4.0);\n\n    //Coloring with some fractional offsets\n    c.r = fract((1.0 - distfrac)*5.2) * ( 1.0 - mask);\n    c.g = fract((1.0 - distfrac)*2.0) * ( 1.0 - mask);\n    c.b = fract((1.0 - distfrac)*1.5) * ( 1.0 - mask);\n\n    // Output to screen\n    fragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"}]}