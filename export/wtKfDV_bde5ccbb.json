{"ver":"0.1","info":{"id":"wtKfDV","date":"1616410644","viewed":103,"name":"Project R-26 B prototype","username":"eimink","description":"Prototype of shader used in 4k intro \"Project R-26 B\" @ Assembly Winter '21. 1st place in intro compo.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf","fakeglow"],"hasliked":0,"parentid":"wlyfWV","parentname":"DJ Visuals with broken sdf"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float E = 0.0001;\nconst float FAR = 40.0;\nconst int STEPS = 64;\n\nvec3 glow = vec3(0.0);\n\nfloat speed = 2.0;\n\n\nfloat noise(vec3 p)\n{\n\tvec3 ip=floor(p);\n    p-=ip; \n    float s1 = smoothstep(41.,41.+(iTime*0.01),sin(iTime));\n    float s2 = smoothstep(157.,157.+(iTime*0.01),cos(iTime));\n    float s3 = smoothstep(353.,353.+(iTime*0.01),sin(iTime));\n    vec3 s=vec3(s1,s2,s3);\n    vec4 h=vec4(0.,s.yz,s.y+s.z)+dot(ip,s);\n    p=p*p*(3.-2.*p); \n    h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n    h.xy=mix(h.xz,h.yw,p.y);\n    return mix(h.x,h.y,p.z); \n}\n\nfloat noise2(vec3 p)\n{\n\tvec3 ip=floor(p);\n    p-=ip; \n    vec3 s=vec3(11,313,701);\n    vec4 h=vec4(0.,s.yz,s.y+s.z)+dot(ip,s);\n    p=p*p*(3.-2.*p); \n    h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n    h.xy=mix(h.xz,h.yw,p.y);\n    return mix(h.x,h.y,p.z); \n}\n\nvoid rot(inout vec2 p, float a) {\n    p = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat box (vec3 p, vec3 r){\n    vec3 d = abs(p) - r;\n    return length(max(d,0.0) + min(max(d.x, max(d.y, d.z)), 0.0));\n}\n\nfloat oct( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat scene(vec3 p)\n{\n    vec3 pp = p;\n    vec3 ppp = p;\n    for (int i = 0; i < 4; ++i)\n    {\n        rot(pp.yz,2.);\n        rot(pp.xy,1.);\n        rot(pp.xz,1.);\n        pp = abs(pp) - float(i)*vec3(1.,1.,1.);\n        \n    }\n    float a = oct(pp,1.0);\n    float b = box(pp,vec3(1.,2.,1.));\n    rot(ppp.xz,iTime-17.);\n    float c = box(ppp,vec3(.2,.2,.2));\n    float d = oct(ppp,.2);\n    float e = mix(c,d,cos(3.+iTime*0.25));\n    e = max(e,0.001);\n    float r = 0.;\n    glow += vec3(.0,.2,.6)*0.01/(0.9+abs(noise2(ppp)));\n    if (iTime < 17.) {\n    glow += vec3(0.7,0.3,0.0)* 0.01 / (0.09+abs(a));\n     r = min(a,abs(b))-noise2(pp);\n    }\n    else {\n    glow += vec3(.6+cos(iTime*2.)*0.3,.0,.6+sin(iTime)*0.2)*0.01/(0.9+abs(d));\n    glow += vec3(0.7,0.3,0.0)* 0.01 / (0.09+abs(a));\n    r = min(e,min(a,abs(b))-noise2(pp));\n    }\n    return abs(r);\n}\n\nfloat march(in vec3 ro, in vec3 rd, out vec3 p)\n{\n    p = ro;\n    float t = E;\n    for (int i = 0; i < STEPS; ++i) {\n        float d = scene(p);\n        t += d;        \n        if (d < E || t > FAR) {\n            break;\n        }\n        p += rd*d;\n    }\n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 cp;\n    if (iTime < 23.) {\n        cp = vec3(0.,1.0,22.-(iTime));\n        rot(cp.xy,iTime);\n    }\n    else {\n        cp = vec3(0.,1.0,-1.);\n        rot(cp.xz,iTime);\n        rot(cp.xy,iTime);\n    }\n    vec3 ct = vec3(0,0,-1);\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = -1.0+2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n\n    vec3 cf = normalize(ct-cp);\n    vec3 cr = normalize(cross(vec3(0.0,1.0,0.0),cf));\n    vec3 cu = normalize(cross(cf,cr));\n    \n    vec3 rd = normalize(mat3(cr,cu,cf)*vec3(q,radians(45.0)));\n   \n    vec3 col = vec3(1.);\n    vec3 p = vec3(0);\n    float t = march(cp,rd,p);\n    if (t < FAR) {\n            col = vec3(.2,.4,.8)*length(dot(cp,p))*0.01;       \n    }\n    \n    \n    col += glow;\n    float outs;\n    float ss = modf(iTime,outs);\n    if (mod(ss,2.) < 0.05){\n        col += glow;\n    }\n    col = smoothstep(0.0,1.0,col);\n    col *= (1.0-vec3(t/FAR));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}