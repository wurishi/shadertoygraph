{"ver":"0.1","info":{"id":"clSBDV","date":"1694482117","viewed":22,"name":"lisergic v03","username":"davidmachadosf","description":"interessante.mas ainda caÃ³tico, tentando descobrir como posso melhorar isto...","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3dmath"],"hasliked":0,"parentid":"ctSBDV","parentname":"lisergic v02"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.141592;\n\n\nconst float scaleZoom  =  1. ;\nconst float complexity =  17. ;\n\nconst float vRot       =   .5;\nconst float vZoom      =  .1;\n\n\n\n\nvec3 prismaPalette( float t ) {\n    \n    float w = 380. + 400.*(1.-t);\n    float red, green, blue;\n\n    if (w >= 380. && w < 440.) {\n        red   = -(w - 440.) / (440. - 380.);\n        green = 0.;\n        blue  = 1.;\n    }\n    else \n    if (w >= 440. && w < 490.) {\n        red   = 0.;\n        green = (w - 440.) / (490. - 440.);\n        blue  = 1.;\n    }\n    else \n    if (w >= 490. && w < 510.) {\n        red   = 0.;\n        green = 1.;\n        blue  = -(w - 510.) / (510. - 490.);\n    }\n    else \n    if (w >= 510. && w < 580.) {\n        red   = (w - 510.) / (580. - 510.);\n        green = 1.;\n        blue  = 0.;\n    }\n    else \n    if (w >= 580. && w < 645.) {\n        red   = 1.;\n        green = -(w - 645.) / (645. - 580.);\n        blue  = 0.;\n    }\n    else \n    if (w >= 645. && w < 781.) {\n        red   = 1.;\n        green = 0.;\n        blue  = 0.;\n    }\n    else {\n        red   = 0.;\n        green = 0.;\n        blue  = 0.;\n    }\n\n\n    // Let the intensity fall off near the vision limits\n    float factor;\n    if (w >= 380. && w < 420.)\n        factor = .3 + .7*(w - 380.) / (420. - 380.);\n    else \n    if (w >= 420. && w < 701.)\n        factor = 1.;\n    else \n    if (w >= 701. && w < 781.)\n        factor = .3 + .7*(780. - w) / (780. - 700.);\n    else\n        factor = 0.;\n\n    float gamma = .8;\n    float R = (red   > 0. ? 255.*pow(red   * factor, gamma) : 0.);\n    float G = (green > 0. ? 255.*pow(green * factor, gamma) : 0.);\n    float B = (blue  > 0. ? 255.*pow(blue  * factor, gamma) : 0.); \n    \n    return vec3(R/255.,G/255.,B/255.);\n    //return vec3(r,0.,b);\n}\n\n\nvec4 function_Trantor(in vec2 uv, in float t){\n\n    float dist = length(uv);\n    \n    vec3  finalColor = vec3(0.0); // rgb black\n    \n    for (float i=0.; i<complexity; i++) {\n\n        float theta = 7.*PI*(i/7.);\n        float sin_t = sin(theta);\n        float cos_t = cos(theta);\n\n        mat2 m = mat2(    \n                   cos_t, -1.5*sin_t, \n                .5*sin_t,      cos_t);\n\n        uv *= m;\n        uv = fract(1.5*uv) - .5;\n\n        float d = length(uv) * exp(-dist);\n\n        d = cos(8.*d + t)/5.;\n        d = abs(d);\n        d = pow(.01/d, 1.2);\n\n        //vec3 col = palette(dist + .1*i + .2*t);\n        vec3 col = prismaPalette(dist + .1*i + .002*t);\n        finalColor += col*d;\n    }  \n    \n    return vec4(finalColor, 1.0);\n}\n\nvec4 function_TrantorWaves(in vec2 uv, in float t){\n\n    float dist = length(uv);\n    \n    vec3  finalColor = vec3(0.0); // rgb black\n    \n    for (float i=0.; i<complexity; i++) {\n\n        float theta = 7.*PI*(i/77.);\n        float sin_t = sin(theta);\n        float cos_t = cos(theta);\n\n        mat2 m = mat2(    \n                   cos_t, -1.5*sin_t, \n                .5*sin_t,      cos_t);\n\n        uv *= m;\n        uv = fract(1.5*uv) - .5;\n\n        float d = length(uv) * exp(-dist);\n\n        d = cos(8.*d + t)/3.;\n        d = abs(d);\n        d = pow(.01/d, 1.2);\n\n        //vec3 col = palette(dist + .01*i + .2*t);\n        vec3 col = prismaPalette(.5*(1.+cos(dist + .01*i + .2*t)));\n        finalColor += col*d;\n    }  \n    \n    return vec4(finalColor, 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    float x = fragCoord.x; \n    float y = fragCoord.y;\n    float z = 0.;\n    float t = iTime;\n    \n    bool  isLeftEye = int(y)%2==0;\n    \n    \n    float zoom  = 1.0 + scaleZoom*sin(vZoom*t);\n    float rho   = vRot*t;\n    float sin_r = sin(rho);\n    float cos_r = cos(rho);\n    mat2  rot   = mat2( \n                   cos_r, -sin_r, \n                   sin_r,  cos_r );\n        \n    vec2  uv = (2.*fragCoord - iResolution.xy) / iResolution.y;\n    uv /= zoom;  // camera zoom\n    uv *= rot;   // camera rotation\n    \n    //fragColor = function_Trantor(uv,t);\n    fragColor = function_TrantorWaves(uv,t);\n}\n\n","name":"Image","description":"","type":"image"}]}