{"ver":"0.1","info":{"id":"DtjBWt","date":"1694629370","viewed":22,"name":"Fork Flower puz yuezh - new","username":"yuezh","description":"Try to match the given flower patterns!\n\nBrownie points: how do you change the color of the flower from the center?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"NsVBzy","parentname":"Flower puzzle"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n#define PI 3.14159\n\nfloat rand(float co) { return fract(sin(co*(104.5458)) * 47453.5453); }\n\nfloat triangle_wave(float x, float half_period, float amplitude) {\n    if (abs(x) >= half_period) return 0.0;\n    return (half_period  - abs(x))* (amplitude / half_period);\n}\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n/*\n * Your work here!\n */\nfloat computeRadius(vec2 uv, float angleOffset)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    \n    float deg = a / PI * 180.0; //[-180, 180]\n    float frac = fract(deg / 18.0);\n    \n    float res = 1.0 + 0.3 * cos(frac * 2.0 * PI + angleOffset * rand(floor(deg / 18.0) * 1.0));\n    \n    return radius * res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n    \n    // Background layer\n\tvec4 layer1 = vec4(rgb(0.0, 79.0, 174.0), 1.0);\n\t\n\t// Circle\n\tvec4 centerColor = circle(uv, center, 30.0, rgb(132.0, 119.0, 40.0));\n    centerColor = mix(circle(uv, center, 54.0, rgb(189.0, 98.0, 27.0)), centerColor, centerColor.a);\n    \n    float radius = computeRadius(uv, 7.0);\n    vec3 targetColor;\n    \n    float d = length(center - uv);\n    \n    if (d < 60.0) {\n        targetColor = rgb(229.0, 102.0, 5.0);\n    } else if (d > 70.0) {\n        targetColor = rgb(243.0, 175.0, 28.0);\n    } else {\n        targetColor = mix(rgb(229.0, 102.0, 5.0), rgb(243.0, 175.0, 28.0), (d - 60.0) / 10.0);\n    }\n    vec4 flowerColor = circle(uv, center, computeRadius(uv, 7.0), targetColor);\n    \n    flowerColor = mix(circle(uv, center, computeRadius(uv, 2.0), rgb(186.0, 135.0, 8.0)), flowerColor, flowerColor.a);\n    flowerColor = mix(circle(uv, center, computeRadius(uv, -4.0), rgb(186.0, 135.0, 8.0)), flowerColor, flowerColor.a);\n    flowerColor = mix(flowerColor, centerColor, centerColor.a);\n    if (uv.y < center.y - 65.0 && abs(uv.x - center.x) < 7.0) {\n        flowerColor = mix(vec4(rgb(0.0, 128.0, 0.0), 1.0), flowerColor, flowerColor.a);\n    }\n    \n    // leaf\n    vec2 leaf_center = center - vec2(0., 120.0);\n    float leaf_direction = -2.0 * PI / 3.0;\n    float leaf_length = triangle_wave(atan(uv.x - leaf_center.x, uv.y - leaf_center.y) - leaf_direction, PI / 3.0, 90.0);\n    if (length(leaf_center - uv) < leaf_length) {\n        fragColor = mix(vec4(rgb(0.0, 128.0, 0.0), 1.0), flowerColor, flowerColor.a);\n        return;\n    }\n    \n    leaf_center = center - vec2(0., 140.0);\n    leaf_direction = PI / 2.0;\n    leaf_length = triangle_wave(atan(uv.x - leaf_center.x, uv.y - leaf_center.y) - leaf_direction, PI / 3.0, 90.0);\n    if (length(leaf_center - uv) < leaf_length) {\n        fragColor = mix(vec4(rgb(0.0, 128.0, 0.0), 1.0), flowerColor, flowerColor.a);\n        return;\n    }\n    \n\t// Blend the two\n    \n\tfragColor = mix(layer1, flowerColor, flowerColor.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}