{"ver":"0.1","info":{"id":"DlB3R3","date":"1732597612","viewed":25,"name":"MySobel","username":"audifax","description":"just playing with the sobel filter","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["sobel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float offset = .001;\nmat3 vSobelOp = mat3(\n    -1., 0., 1.,\n    -2., 0., 2.,\n    -1., 0., 1.\n);\nmat3 hSobelOp = mat3(\n    1., 2., 1.,\n    0., 0., 0.,\n    -1., -2., -1.\n);\nfloat greyScale(vec4 color) {\n    float maximum = max(color.r, max(color.g, color.b));\n    float minimum = min(color.r, min(color.g, color.b));\n    //return 0.2989 * color.r + 0.5870 * color.g + 0.1140 * color.b;\n    //return (color.r + color.g + color.b) / 3.;\n    return (maximum + minimum) / 2.;\n}\nfloat sobelOperator(vec2 uv) {\n    float topLeft = greyScale(texture(iChannel0, uv + vec2(-offset, offset)));\n    float midLeft = greyScale(texture(iChannel0, uv + vec2(-offset, 0.)));\n    float bottomLeft = greyScale(texture(iChannel0, uv + vec2(-offset, -offset)));\n    float top = greyScale(texture(iChannel0, uv + vec2(0., offset)));\n    float center = greyScale(texture(iChannel0, uv));\n    float bottom = greyScale(texture(iChannel0, uv + vec2(0., -offset)));\n    float topRight = greyScale(texture(iChannel0, uv + vec2(offset, offset)));\n    float midRight = greyScale(texture(iChannel0, uv + vec2(offset, 0.)));\n    float bottomRight = greyScale(texture(iChannel0, uv + vec2(offset, -offset)));\n    \n    float vSobel = topLeft * vSobelOp[0][0] + top * vSobelOp[0][1] + topRight * vSobelOp[0][2]\n       + midLeft * vSobelOp[1][0] + center * vSobelOp[1][1] + midRight * vSobelOp[1][2]\n       + bottomLeft * vSobelOp[2][0] + bottom * vSobelOp[2][1] + bottomRight * vSobelOp[2][2];\n    \n    float hSobel = topLeft * hSobelOp[0][0] + top * hSobelOp[0][1] + topRight * hSobelOp[0][2]\n       + midLeft * hSobelOp[1][0] + center * hSobelOp[1][1] + midRight * hSobelOp[1][2]\n       + bottomLeft * hSobelOp[2][0] + bottom * hSobelOp[2][1] + bottomRight * hSobelOp[2][2];\n    \n    float gSobel = sqrt(pow(vSobel, 2.) + pow(hSobel, 2.));\n    return gSobel;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 blur = texture(iChannel0, uv);\n    float sobel = sobelOperator(uv);\n    fragColor = sobel * blur;\n    //fragColor = blur;\n    //fragColor = vec4(sobel);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float blurOffset = .000001;\nmat3 blurOp = mat3(\n    1., 2., 1.,\n    2., 4., 2.,\n    1., 2., 1.\n);\nvec4 blurOperator(vec2 uv) {\n\n    vec4 topLeft = texture(iChannel0, uv + vec2(-blurOffset, blurOffset));\n    vec4 midLeft = texture(iChannel0, uv + vec2(-blurOffset, 0.));\n    vec4 bottomLeft = texture(iChannel0, uv + vec2(-blurOffset, -blurOffset));\n    vec4 top = texture(iChannel0, uv + vec2(0., blurOffset));\n    vec4 center = texture(iChannel0, uv);\n    vec4 bottom = texture(iChannel0, uv + vec2(0., -blurOffset));\n    vec4 topRight = texture(iChannel0, uv + vec2(blurOffset, blurOffset));\n    vec4 midRight = texture(iChannel0, uv + vec2(blurOffset, 0.));\n    vec4 bottomRight = texture(iChannel0, uv + vec2(blurOffset, -blurOffset));\n    \n    vec4 blur = topLeft * blurOp[0][0] + top * blurOp[0][1] + topRight * blurOp[0][2]\n       + midLeft * blurOp[1][0] + center * blurOp[1][1] + midRight * blurOp[1][2]\n       + bottomLeft * blurOp[2][0] + bottom * blurOp[2][1] + bottomRight * blurOp[2][2];\n    \n    return blur / 20.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 blur = blurOperator(uv);\n\n    // Output to screen\n    //fragColor = vec4(vec3(greyScale(texture(iChannel0, uv))),1.0);\n    fragColor = blur;\n}","name":"Buffer A","description":"","type":"buffer"}]}