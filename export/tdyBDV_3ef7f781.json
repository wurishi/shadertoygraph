{"ver":"0.1","info":{"id":"tdyBDV","date":"1608383272","viewed":67,"name":"Shader book Start","username":"PoSma40k","description":"Start","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["start"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//if you need for a filled circle define SHAPE == 1\n//if you need a circle , SHAPE == 2\n//to shot a grid coordinate system, SHAPE == 3\n//build in function: smoothstep; SHAPE == 4\n#define SHAPE 9\n\n#if SHAPE == 1\nvoid mainImage(out vec4 fragColor, in vec2 fragCoords)\n{\n    vec2 r = (fragCoord.xy/iResolution.xy);\n    vec4 outcolor = vec4(1.0);\n    \n    vec2 cc = vec2(iMouse.x, iMouse.y);\n    float cr1 = 80.0;\n    float cr2 = 75.0;\n    \n    vec2 d = cc - fragCoords;\n    vec4 c1 = (d.x*d.x + d.y*d.y) <= cr1*cr1 ? vec4(1.0) : vec4(0.0);\n    vec4 c2 = (d.x * d.x + d.y * d.y) >= cr2*cr2 ? vec4(1.0) : vec4(0.0);\n   \n    outcolor *= c1;\n    outcolor *= c2;\n    \n    fragColor = outcolor;\n}\n#endif\n\n#if SHAPE == 2\nvoid mainImage(out vec4 fragColor, in vec2 fragCoords)\n{\n    vec4 outcolor = vec4(1.0);\n    \n    vec2 cc = vec2(iMouse.x, iMouse.y);\n    float cr1 = 80.0;    \n    \n    vec2 d = cc - fragCoords;\n    vec4 c1 = (d.x*d.x + d.y*d.y) <= cr1*cr1 ? vec4(1.0) : vec4(0.0);\n    \n    outcolor *= c1;\n  \n    fragColor = outcolor;\n}\n#endif\n\n#if SHAPE == 3\nvoid mainImage(out vec4 color, in vec2 coords)\n{\n   vec4 c = vec4(1.0);//out color\n   int n = 40;//step for grid\n   int nc = 5; //coords thickness\n   \n   vec4 gC = vec4(0.0, 1.0, 0.0, 1.0);\n   vec4 rC = vec4(1.0, 0.0, 0.0, 1.0);\n   vec4 ca = vec4(0.0, 0.0, 1.0, 1.0);\n   \n   int cx = int(coords.x)%(n);\n   int cy = int(coords.y)%(n);\n   \n   c *= float(cx) + gC;\n   c *= float(cy) + rC;\n   \n   int xc = int(coords.x)%int(iResolution.x/2.0);\n   int yc = int(coords.y)%int(iResolution.y/2.0);\n   \n   c *= float(xc * yc) + ca;\n   \n   color = c ;\n}\n#endif\n\n#if SHAPE == 4\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n    vec2 uv = coord.xy/iResolution.xy;\n    uv -= 0.5f;\n    uv.x *= iResolution.x/iResolution.y;  \n    float d = length(uv);\n    //float d = sqrt((uv.x*uv.x) + (uv.y*uv.y));\n    float r = 0.3;\n    float time = 0.01*sin(iTime*5.) + 0.01;\n    float c = step(r + time, d);\n    //float c = smoothstep(r, r + time, d);\n    color = vec4(vec3(c), 1.);\n}\n#endif\n\n#if SHAPE == 5\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n    vec2 uv = coord.xy/iResolution.xy;\n    //uv.x *= iResolution.x/iResolution.y;\n    vec3 c = vec3(1);\n    \n    float pct = smoothstep(0.02, 0.0, abs(uv.x-uv.y));\n    c = (1.0-pct)*c;\n    \n    color = vec4(c, 1.0);\n}\n#endif\n\n#if SHAPE == 6\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n    vec2 uv = coord.xy/iResolution.xy; \n    uv -= 0.5f;\n    uv.x *= iResolution.x/iResolution.y;\n    float r = 0.3;\n    vec3 c = vec3(1.);\n    \n    c = vec3(step(r, length(uv))); \n    \n    color = vec4(c, 1.);\n}\n#endif\n\n#if SHAPE == 7\nfloat CircleSmooth(vec2 uv, float r, float blur, vec2 pos)\n{\n    float d = length(uv - pos);\n    float c = smoothstep(r, r-blur,d);\n    return c;\n}\nfloat CircleStep(vec2 uv, float r, vec2 pos)\n{\n    float d = length(uv - pos);\n    float c = step(d,r);\n    return c;\n}\n\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n    vec2 uv = coord.xy/iResolution.xy; \n    uv -= 0.5f;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    float mask = CircleStep(uv, 0.4,vec2(0.0));\n    mask-= CircleStep(uv, 0.07, vec2(0.15, 0.15)) + CircleStep(uv, 0.07, vec2(-0.15, 0.15));\n    \n    float mouth = CircleStep(uv, 0.3, vec2(0.0));\n    mouth -= CircleStep(uv, 0.3, vec2(0.0, 0.1));\n    mask -= mouth;\n    \n    col = vec3(mask) * vec3(1., 1., 0.);\n    color = vec4(col, 1.);\n}\n#endif\n\n#if SHAPE == 8 \nfloat CircleSmooth(vec2 uv, float r, float blur, vec2 pos)\n{\n    float d = length(uv - pos);\n    float c = smoothstep(r, r-blur,d);\n    return c;\n}\nfloat CircleStep(vec2 uv, float r, vec2 pos)\n{\n    float d = length(uv - pos);\n    float c = step(d,r);\n    return c;\n}\n\nfloat Smiley(vec2 uv, vec2 p , float size)\n{\n    uv -= p;\n    uv /= size;\n    float mask = CircleStep(uv, 0.4,vec2(0.0));\n    mask-= CircleStep(uv, 0.07, vec2(0.15, 0.15)) + CircleStep(uv, 0.07, vec2(-0.15, 0.15));\n    float mouth = CircleStep(uv, 0.3, vec2(0.0));\n    mouth -= CircleStep(uv, 0.3, vec2(0.0, 0.1));\n    mask -= mouth;\n    return mask;\n}\n\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n    vec2 uv = coord.xy/iResolution.xy; \n    uv -= 0.5f;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 col = vec3(0.);\n    \n    float mask = Smiley(uv, vec2(0., 0.), 1.);\n    \n    col = vec3(mask) * vec3(0., 1., 0.);\n    color = vec4(col, 1.);\n}\n#endif\n\n\n\n#if SHAPE == 9\n\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n    vec2 uv = coord.xy/iResolution.xy; \n    uv -= 0.5f;\n    uv.x *= iResolution.x/iResolution.y;\n    float col = 0.;\n    \n    vec2 pos = vec2(0.2, 0.1);\n    \n    float x = step(0.2, uv.y + pos.y) + step(0.2, -uv.y - pos.y);\n    float y = step(0.2, uv.x + pos.x) + step(0.2, -uv.x - pos.x);\n    \n    col += x;\n    col += y;\n  \n    color = vec4(vec3(col), 1.);\n}\n#endif\n\n\n#if SHAPE == 1//teampla0te\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n    \n}\n#endif","name":"Image","description":"","type":"image"}]}