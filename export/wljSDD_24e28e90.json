{"ver":"0.1","info":{"id":"wljSDD","date":"1565956413","viewed":104,"name":"raymarchingpractice001(1h)","username":"Hirai_worthless","description":"1hour","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float PI = 3.14159265;\nvec2 path(float t){\n\tfloat x = sin(t) + cos(t / 2.) + sin(t / 4.);\n    float y = sin(t) + sin(t/2.) + cos(t/4.);\n    return vec2(x,y)/4.;\n}\nmat2 genRot(float val){\n    return mat2(cos(val),-sin(val),sin(val),cos(val));\n}\nvec3 modCell(vec3 p,vec3 c){\n\tp.x = (fract(p.x / c.x + 0.5) - 0.5) * c.x;\n    p.y = (fract(p.y / c.y + 0.5) - 0.5) * c.y;\n    p.z = (fract(p.z / c.z + 0.5) - 0.5) * c.z;\n    return p;\n}\n\nvec2 pmod(vec2 p,float c){\n    p.xy *= genRot(PI/c);\n\tfloat at = atan(p.y/p.x);\n    float r = length(p);\n    at = mod(at,PI * 2. / c);\n    vec2 re = vec2(cos(at) * r,sin(at) * r);\n    re.xy *= genRot(-PI/c);\n    return re;\n}\nfloat roomsize = 7.5;\nvec2 map(vec3 p){\n    p.xy += path(p.z);\n    //p = modCell(p,vec3(roomsize));\n    p = modCell(p,vec3(vec2(roomsize),2.0));\n    p.xy *= genRot(iTime);\n    p.xy = pmod(p.xy,12.);\n\tvec2 sp = vec2(length(p - vec3(3.0,0.,0.)) - 0.5,1.0);\n    vec3 q = p;\n    q.xz -= vec2(3.0,0.);\n    q.xy *= genRot(iTime);\n    float cyl = length(q.xz) - 0.25;\n    cyl = max(cyl,-length(p.xy) + 1.);\n    cyl = max(cyl,length(p.xy) - 3.00);\n    cyl = min(cyl,length(p.xy - vec2(3.,0.)) - 0.1);\n    return vec2(cyl,0.0);\n}\nvec2 trace(vec3 r,vec3 o){\n    float t = 0.0;\n    float id = -1.0;\n    for(int i = 0; i < 128; i++){\n    \tvec3 p = o + r * t;\n        vec2 d = map(p);\n        t += d.x * 0.5;\n        id = d.y;\n    }\n    return vec2(t,id);\n}\n\nvec3 ray (vec2 uv,float z){\n vec3 r = normalize(vec3(uv,z));\n    r.xz *= genRot(-PI/6.);\n    r.yz *= genRot(-PI / 8.);\n    r.xy *= genRot(iTime /1.);\n    return r;\n}\nvec3 cam (float t){\n\tvec3 c = vec3(roomsize/2.,roomsize/2.,-6.5 + iTime * 8.0);\n    return c;\n}\n\nvec3 getColor(vec3 r, vec3 o, vec2 data){\n    float t = data.x;\n    vec3 p = o + r * t;\n    vec3 col1 = vec3(sin(p.x) * 0.5 + 0.75,sin(p.y) * 0.5 + 0.75,sin(p.z) * 0.5 + 0.75);\n    vec3 col2 = vec3(cos(p.x) * 0.5 + 0.75,cos(p.y) * 0.5 + 0.75,cos(p.z) * 0.5 + 0.75);\n\tfloat fog = 1./(1. + t * t * 0.01);\n    float a = sin(p.z - iTime * 4.) * 0.5 + 0.5;\n    col1 = mix(col1,col2,a);\n    col1 = mix(col1,vec3(sin(iTime) * 0.5 + 0.5),1. - fog);\n    return col1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy * 2. - iResolution.xy)/iResolution.y;\n    vec3 o = cam(iTime);\n    vec3 r = ray(uv,1.5);\n    vec2 data = trace(r,o);\n    \n    // Time varying pixel color\n    vec3 col =getColor(r,o,data);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}