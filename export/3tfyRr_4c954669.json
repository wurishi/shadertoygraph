{"ver":"0.1","info":{"id":"3tfyRr","date":"1591213687","viewed":89,"name":"The simplest 3D TheArtOfCode","username":"stradiotto","description":"This example was copied from Youtube - ShaderToy Tutorial - The simplest 3D, from The Art Of Code, to understand how to render a single point in 3D space","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["crossproduct","pointtoraylinedistance","smoothsteptoavoidblurring"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n1) This is the example from Youtube - ShaderToy Tutorial - The simplest 3D\nhttps://www.youtube.com/watch?v=dKA5ZVALOhs&list=PLGmrMu-IwbguU_nY2egTFmlg691DN7uE5&index=11\n\n2) To make the point fixed in space, in the code, \nuncomment the first definition of vec3 p, \nand comment the second definition of vec3 p\n\n3) To just make the normal circular movement of vec3 p,\ncomment line (2) and uncomment line (3)\n\n4) To remove the blurring effect from the point, uncomment line (4)\n\n*/\n\nfloat DistLine(vec3 ro, vec3 rd, vec3 p)\n{\n    return length(cross(p-ro, rd)) / length(rd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;    \n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 ro = vec3(0., 0., -1.);\n    vec3 rd = vec3(uv.x, uv.y, 0.) - ro;\n    \n    \n    //vec3  p = vec3(0., 0., 3.); //(1)\n    vec3  p = vec3(\n        4.* sin(iTime), \n        1.* sin(4. * iTime) + .3 * cos(8.5 * iTime), //(2)\n        //0., //(3)\n        8. + 4.* cos(iTime)\n    );\n    \n\tfloat d = DistLine(ro, rd, p);\n    \n    d = smoothstep(.1, .09, d); //(4)\n    \n    fragColor = vec4(d);\n}","name":"Image","description":"","type":"image"}]}