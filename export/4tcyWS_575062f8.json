{"ver":"0.1","info":{"id":"4tcyWS","date":"1533758921","viewed":149,"name":"throbby rainbow","username":"pixlpa","description":"Very simple shape generator with some sin motion applied for a little organic appeal.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","simple","flat","animated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Signed normalized\n    uv = uv*2.-1.;\n    // with aspect ratio applied\n    uv *= vec2(iResolution.x/iResolution.y,1.);\n\n    // Output to screen\n    fragColor = rainbow(uv,iTime*3.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec4 rainbow( vec2 st, float time )\n{\n   \t//band thickness\n    float thick = 0.4;\n    //start distance\n    float off = 0.1;\n    //drop UVs down to center the rainbow\n    vec2 lower = clamp(st + vec2(0.,0.5),vec2(-2,0.),vec2(2.));\n    \n    //distance from center (for a nice arc)\n    float rbg = length(lower);\n\t//angle\n    float angle = atan(lower.x,lower.y);\n    \n    //animate the gradient a little\n    rbg += sin(angle*2.+time*1.3)*0.1*thick;\n    rbg += sin(rbg*3.1+time)*0.2*thick;\n    //band logic\n    float band1 = step(0.5*thick+off,rbg)*step(rbg,1.*thick+off);\n    float band2 = step(1.0*thick+off,rbg)*step(rbg,1.5*thick+off);\n    float band3 = step(1.5*thick+off,rbg)*step(rbg,2.*thick+off);\n    float band4 = step(2.*thick+off,rbg)*step(rbg,2.5*thick+off);\n    float band5 = step(2.5*thick+off,rbg)*step(rbg,3.*thick+off);\n    float block = step(-0.75,st.y);\n    \n    //apply colors to bands\n    //it's not ROYGBIV but this is cartoons\n    //there's an unused \"band\" but whatever 4 seemed ok\n    vec4 rb = vec4(1.,0.,0.,1.)*band1;\n    rb += vec4(1.,0.8,0.,1.)*band2;\n    rb += vec4(0.7,1.,0.2,1.)*band3;\n    rb += vec4(0.,0.7,1.,1.)*band4;\n    rb *= block;\n    \n    return rb;\n}","name":"Common","description":"","type":"common"}]}