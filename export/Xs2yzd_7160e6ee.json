{"ver":"0.1","info":{"id":"Xs2yzd","date":"1493460630","viewed":162,"name":"Lights, Cameras, Ladders","username":"space928","description":"idk","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int MARCHSTEPS =  64;\nfloat MAX_DIST = 16.;\nfloat EPSILON = 0.01;\nvec3 pos = vec3(0.0, 0.0, -2.8);\nvec3 posTime = vec3(0.0, 2.0, 0.0);\nvec3 lightDir = vec3(0.2,0.4,0.4);\nfloat pi = 3.14159265;\nfloat aoDist = 1.;\nint aoSamples = 32;\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{   \n  vec3 q = vec3(p.x, fract(p.y) * 2.0 - 1.0, p.z);\n    \n  return length(max(abs(q)-b,0.0))-r;\n}\n\nfloat sphere(vec3 p)\n{\n    vec3 q = fract(p/2.) * 2.0 - 1.0;\n    \n    return length(q) - 0.3;\n}\n\nmat3 rotY(float x)\n{\n    return mat3(cos(x), 0., sin(x),\n                0., 1., 0.,\n                -sin(x), 0., cos(x));\n}\n\nfloat map(vec3 p)\n{\n    float d =  udRoundBox(p + vec3(-1., .0, 1.), vec3(.2, 1., .2), 0.05);\n    d = min(d, udRoundBox(p + vec3(-1., .0, -1.), vec3(.2, 1., .2), 0.05));\n    d = min(d, udRoundBox(p + vec3(1., .0, -1.), vec3(.2, 1., .2), 0.05));\n    d = min(d, udRoundBox(p + vec3(1., .0, 1.), vec3(.2, 1., .2), 0.05));\n\n    d = min(d, udRoundBox(p + vec3(-1., .0, .0), vec3(.2, .2, 1.), 0.05));\n    d = min(d, udRoundBox(p + vec3(1., 0., .0), vec3(.2, .2, 1.), 0.05));\n    d = min(d, udRoundBox(p + vec3(0., 0., -1.), vec3(1., .2, 0.2), 0.05));\n    d = min(d, udRoundBox(p + vec3(0., 0., 1.), vec3(1., .2, 0.2), 0.05));\n\n    d = min(d, sphere(p));\n    \n    return d;\n}\n\nfloat trace(vec3 o, vec3 r) {\n    float t = 0.0;\n    \n    for( int i=0;i<MARCHSTEPS;i++ ) {\n        vec3 p = o + r * t;\n        \n        p *= rotY(iTime);\n        \n        float d = map(p);\n        \n        if(t > MAX_DIST) {\n            t = -1.0;\n            break;\n        }\n        \n        t += d;\n    }\n    return t;\n}\n\nfloat ambientOcclusion(vec3 p, vec3 n) {\n    float ao = 0.;\n    for (int i = 1; i <= aoSamples; i++) {\n        vec3 poisson = vec3(poissonDisk[i].x,\n            sqrt(1.-poissonDisk[i].x*poissonDisk[i].x - poissonDisk[i].y*poissonDisk[i].y),\n            poissonDisk[i].y);\n            \n        vec3 v = normalize(n+poisson);\n    \n        float dist = trace(p, v);\n        if(dist != -1. && dist <= aoDist)\n            ao += 1.;\n    }\n    return 1. - ao/float(aoSamples);\n}\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        map(vec3(p.x + EPSILON, p.y, p.z)) - map(vec3(p.x - EPSILON, p.y, p.z)),\n        map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\n        map(vec3(p.x, p.y, p.z  + EPSILON)) - map(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nmat3 getCamera(vec3 z) {\n\tvec3 x = normalize(cross(vec3(0.0, 1.0, 0.0), z));\n    return mat3(x, cross(z, x), z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0));\n    vec3 o = pos + (iTime*posTime);\n    vec3 t = vec3(trace(o, r));\n    vec3 p = (o+r*t)*rotY(iTime);\n    vec3 nrm = estimateNormal(p);\n    //nrm *= mat3(rotY(iTime));\n    \n    vec3 fog = vec3(1., 0., 1.);\n    \n    if(t == vec3(-100.)) {\n        fog = texture(iChannel0, normalize((getCamera(normalize(r+o)+vec3(sin(-iTime), -1., cos(-iTime))) * normalize(vec3(uv, -1.0))))).xyz;\n    } else {\n        //t *= hsv2rgb(vec3(fract(iTime/4.0), 1.0, 1.0));\n                  \n        fog = 1.0 / (1.0 + t * t * 0.05);\n        fog *= clamp(dot(lightDir, nrm), 0., 1.) + vec3(0.1,0.1,0.15);\n        fog *= hsv2rgb(vec3(fract(iTime/4.0), 1.-fog.r, 1.5));\n        fog = vec3(ambientOcclusion(p, nrm));\n        //fog = nrm;\n    }\n    \n    vec3 ao = vec3(0.);\n    for (int i = 1; i <= aoSamples; i++) {\n        vec3 poisson = vec3(poissonDisk[i].x,\n            sqrt(1.-poissonDisk[i].x*poissonDisk[i].x - poissonDisk[i].y*poissonDisk[i].y),\n            poissonDisk[i].y);\n            \n        vec3 v = normalize(nrm+poisson);\n        ao += v;\n    }\n    //\n    fog = ao/float(aoSamples);\n    //fog = nrm;\n    \n    fragColor = vec4(fog,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2[] poissonDisk = vec2[](\n    vec2(-0.613392, 0.617481),\n    vec2(0.170019, -0.040254),\n    vec2(-0.299417, 0.791925),\n    vec2(0.645680, 0.493210),\n    vec2(-0.651784, 0.717887),\n    vec2(0.421003, 0.027070),\n    vec2(-0.817194, -0.271096),\n    vec2(-0.705374, -0.668203),\n    vec2(0.977050, -0.108615),\n    vec2(0.063326, 0.142369),\n    vec2(0.203528, 0.214331),\n    vec2(-0.667531, 0.326090),\n    vec2(-0.098422, -0.295755),\n    vec2(-0.885922, 0.215369),\n    vec2(0.566637, 0.605213),\n    vec2(0.039766, -0.396100),\n    vec2(0.751946, 0.453352),\n    vec2(0.078707, -0.715323),\n    vec2(-0.075838, -0.529344),\n    vec2(0.724479, -0.580798),\n    vec2(0.222999, -0.215125),\n    vec2(-0.467574, -0.405438),\n    vec2(-0.248268, -0.814753),\n    vec2(0.354411, -0.887570),\n    vec2(0.175817, 0.382366),\n    vec2(0.487472, -0.063082),\n    vec2(-0.084078, 0.898312),\n    vec2(0.488876, -0.783441),\n    vec2(0.470016, 0.217933),\n    vec2(-0.696890, -0.549791),\n    vec2(-0.149693, 0.605762),\n    vec2(0.034211, 0.979980),\n    vec2(0.503098, -0.308878),\n    vec2(-0.016205, -0.872921),\n    vec2(0.385784, -0.393902),\n    vec2(-0.146886, -0.859249),\n    vec2(0.643361, 0.164098),\n    vec2(0.634388, -0.049471),\n    vec2(-0.688894, 0.007843),\n    vec2(0.464034, -0.188818),\n    vec2(-0.440840, 0.137486),\n    vec2(0.364483, 0.511704),\n    vec2(0.034028, 0.325968),\n    vec2(0.099094, -0.308023),\n    vec2(0.693960, -0.366253),\n    vec2(0.678884, -0.204688),\n    vec2(0.001801, 0.780328),\n    vec2(0.145177, -0.898984),\n    vec2(0.062655, -0.611866),\n    vec2(0.315226, -0.604297),\n    vec2(-0.780145, 0.486251),\n    vec2(-0.371868, 0.882138),\n    vec2(0.200476, 0.494430),\n    vec2(-0.494552, -0.711051),\n    vec2(0.612476, 0.705252),\n    vec2(-0.578845, -0.768792),\n    vec2(-0.772454, -0.090976),\n    vec2(0.504440, 0.372295),\n    vec2(0.155736, 0.065157),\n    vec2(0.391522, 0.849605),\n    vec2(-0.620106, -0.328104),\n    vec2(0.789239, -0.419965),\n    vec2(-0.545396, 0.538133),\n    vec2(-0.178564, -0.596057));","name":"Common","description":"","type":"common"}]}