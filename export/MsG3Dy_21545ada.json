{"ver":"0.1","info":{"id":"MsG3Dy","date":"1456172138","viewed":690,"name":"Yin Yang Redux 121 chars","username":"GregRostami","description":"This is an update to our attempts to make a Yin Yang in ONE TWEET!<br/>All of the amazing reductions were done with some BIG help from Fabrice and coyote:<br/>https://www.shadertoy.com/view/ldVGzK<br/>","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["short","2tc","onetweet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 121 chars - Fabrice uses the optimizations from coyote and a bit of BLACK magic!!\n/**/\nvoid mainImage(out vec4 o, vec2 u) {\n    vec2 R = iResolution.xy, i = (u+u-R)/R.y,\n         a = i*i; a+=a.x; R = abs(i)-a;\n    o += a.y>1. ? .5 : 9./ (R.y-.23) / i[R.y>0. ? 1:0]; }\n/**/\n\n// 126 chars - Using #define trick plus a few other optimizations.\n/**\n#define mainImage(o,u)\t\t\t\t\t\\\nvec2 R=iResolution.xy, i = (u+u-R)/R.y;\t\\\nfloat a = dot(i,i), b = abs(i.y);\t\t\\\no += (a>1. ? .5 : 9./(b-a-.23)/(b>a ? -i.y : i.x))\n/**/\n    \n// 138 chars - Added REAL centering code. Regardless of aspect ratio, it's always centered.\n// Super Fabrice helped me save 2 more chars ... :)\n/**\nvoid mainImage(out vec4 o,vec2 i)\n{\n\tfloat a = dot(i = (i + i - (o.xy=iResolution.xy) )/o.y , i), b = abs(i.y);\n    o += (a>1. ? .5 : 9./(b-a-.23)/(b>a ? -i.y : i.x))-o;\n}\n/**/\n\n// Small Spin version - 172 chars:\n/*\nvoid mainImage(out vec4 o,vec2 i)\n{\n    float t=iDate.w, c=cos(t), s=sin(t),\n    a = dot(i=mat2(-c,s,s,c)*(2.*i/iResolution.y-1.) ,i), b = abs(i.y);\n    o += (a>1. ? .5 : 9./(b-a-.23)/(b>a ? i.y : i.x))-o;\n}\n*/\n\n// 136 chars - An updated version of the Yin Yang shader that Fabrice, coyote and I size optimized.\n// The Yin Yang now has a grey background and spins clockwise ... and still under ONE TWEET!\n// Thanks to Fabrice, we saved another 5 chars!!\n/*\nvoid mainImage(out vec4 o,vec2 i)\n{\n\ti/=iResolution.y*.5;\n    i.x -= .8;\n\tfloat a = dot(--i,i), b = abs(i.y);\n    o += ( a>1. ? .5 : 9./(b-a-.23)/(b>a ? -i.y : i.x)) - o;\n}\n*/\n\n// 129 chars - As the TITANS of optimization (Fabrice & coyote) battle, another 2 chars vanish!\n// A BIG thank you to coyote and Fabrice ... this is an algorithmic MIRACLE!!\n/*\nvoid mainImage(out vec4 o,vec2 i)\n{\n\ti/=iResolution.y*.5;\n    i.x-=.8;\n\tfloat a = dot(--i,i), b = abs(i.y);\n    o += 9./(b>a ? (b-a-.23)*i.y : --a*i.x)-o;\n}\n*/\n\n// 121 chars - Not centerd version ... Fabrice, once again did the IMPOSSIBLE!!\n/*\nvoid mainImage(out vec4 o,vec2 i)\n{\n    float a = dot(i=2.*i/iResolution.y-1. ,i), b = abs(i.y);\n    o += 9./(b>a ? (b-a-.23)*i.y : --a*i.x) - o;\n}\n*/\n\n// Here it is centered with Fabrice's optimization - 131 chars (-3 chars because of coyote)\n/*\nvoid mainImage(out vec4 o,vec2 i)\n{\n\ti/=iResolution.y*.5;\n    i.x-=.8;\n    float a = dot(--i,i), b = abs(i.y)-a;\n\to += --a*(b>0.? i.y : i.x )*(b-.23)*1e6 -o;\n}\n*/\n\n// 138 chars - coyote magically made another character disappear \n/*\nvoid mainImage(out vec4 o,vec2 i)\n{\n    float a = dot(i=2.*i/iResolution.y-1. ,i), b = abs(i.y)-a;\n\to = vec4( --a*(b-.23) * (i.x+i.y + sign(b)*(i.y-i.x)) > 0. );\n}\n*/\n\n// Original version at 139 chars by Greg Rostami\n/*\nvoid mainImage(out vec4 o,vec2 i)\n{\n    float a = dot(i=2.*i/iResolution.y-1. ,i), b = abs(i.y)-a;\n\to = o-o+sign( --a*(b-.23) * (i.x+i.y + sign(b)*(i.y-i.x)) );\n}\n*/","name":"Image","description":"","type":"image"}]}