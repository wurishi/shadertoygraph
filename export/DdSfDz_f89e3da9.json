{"ver":"0.1","info":{"id":"DdSfDz","date":"1689586339","viewed":49,"name":"SDF - Step Union v Stairs Union","username":"JohnKaz","description":"Based on https://www.shadertoy.com/view/3ltSW2 by iq\n\nunion with a square step. More accurate corner distances (sort of) but causes some distortion around it.\nLeft is Step Union, right is stairs union by Mercury https://mercury.sexy/hg_sdf/","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","distance","union"],"hasliked":0,"parentid":"mdjBzD","parentname":"SDF - Inverted Round Union"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2023 João Desager\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Step Union\n\n// SDF primitives taken from:\n// and iquilezles.org/articles/distfunctions2d\n\n\nfloat sdCircle( in vec2 p, in float r ) \n{\n    return length(p)-r;\n}\n\nfloat sdCircle2( in vec2 p, in vec2 o, in float r ) \n{\n    return length(p-o)-r;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// not as good as the inverted round corner, more artifacts\n// this pattern should work for any 2D SDF placed in 4 that is sharper than a circle, and symmetric along Y=X\nfloat sdStepCorner(in vec2 p, in float r)\n{\n    vec2 ar = vec2(r,0.0);\n    \n    // 1. mirror space around Y=X line\n    if (p.x-p.y < 0.0)\n        p = p.yx;\n    \n    // 2. flip distance to corner point when in 3rd quadrant (relative to the corner)\n    float sign = 1.0;\n    if ( (p.y < 0.0) && (p.x-r < 0.0) )\n         sign = -1.0;\n\n    // 3. interior distances\n    float corn = sign*length(p-ar);\n    \n    // 4. exterior distances (for a and b > 0.0)\n    vec2 d = vec2(0.0, 0.0);\n    float box = 0.0;\n    if ( (p.y > 0.0) && (p.x > 0.0) )\n        d = p-r;\n        box = length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n\n    return min(corn, box);\n}\n\nfloat opStepUnion(in float a, in float b, in float r)\n{\n    vec2 p = vec2(a,b);\n    \n    float corn = sdStepCorner(p, r);\n    \n\treturn min(min(a,b), corn);\n}\n\n// from Mercury https://mercury.sexy/hg_sdf/\n// a lot simpler but doesn't produce true distances at the intersections\n// The \"Stairs\" flavour produces n-1 steps of a staircase:\n// much less stupid version by paniq\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2.0 * s)) - s)));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    float rad = (0.5 + 0.5*sin(iTime)) * 0.2;\n\n\n\tfloat d1 = sdCircle2(p, vec2(0,0.4), 0.5);\n    d1 = sdBox( p, vec2(0.5, 0.8));\n    \n    float d = opStepUnion(d1, sdBox( p, vec2(1.0, 0.5) ), rad);\n    \n    // left is Step Union, right is Mercury's stairs variant\n    if (p.x > 0.0)\n        d = fOpUnionStairs(d1, sdBox( p, vec2(1.0, 0.5) ), rad*2.0, 2.0);\n    \n    //uncomment to visualize the corner SDF\n    //d = sdStepCorner(p, 0.2);\n    \n\t// coloring, iq style\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    if( iMouse.z>0.001 )\n    {\n    d1 = sdCircle2(m, vec2(0,0.4), 0.5);\n    d1 = sdBox( m, vec2(0.5, 0.8));\n    \n    d = opStepUnion(d1, sdBox( m, vec2(1.0, 0.5) ), rad);\n    \n    // left is Step Union, right is Mercury's stairs variant\n    if (p.x > 0.0)\n        d = fOpUnionStairs(d1, sdBox( m, vec2(1.0, 0.5) ), rad*2.0, 2.0);\n        \n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}