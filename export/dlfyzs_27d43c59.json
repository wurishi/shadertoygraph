{"ver":"0.1","info":{"id":"dlfyzs","date":"1704249071","viewed":43,"name":"Fork tiles, int blubbers12 565","username":"blubbers122","description":"Definitely some squares. The math is almost certainly more complicated than it needs to be - I'm refusing to think too hard today.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","cineshader"],"hasliked":0,"parentid":"mdBSRt","parentname":"tiles, interesting patterns"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect_ratio = iResolution.y/iResolution.x;\n\tvec2 uv = fragCoord.xy / iResolution.x;\n    \n    //center effect so it's not in bottom left\n    uv -= vec2(0.5, 0.5 * aspect_ratio);\n    \n    \n    \n    //rotation based on time\n    float rot = radians(0. -iTime); // radians(45.0*sin(iTime));\n    \n    \n    \n    //rotate the points with matrix\n    mat2 rotation_matrix = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n   \tuv = rotation_matrix * uv;\n    \n    \n    \n    //\"zoom\" on effect\n    vec2 scaled_uv = 33.0 * uv;\n    \n    \n    // get 0.0 - 1.0\n    vec2 tile = fract(scaled_uv);\n    \n    \n    \n    float tile_dist = min(min(tile.x, 1.0-tile.x), min(tile.y, 1.0-tile.y));\n    \n    \n    float square_dist = length(floor(scaled_uv));\n    \n    \n    \n    float edge = sin(iTime-square_dist*20.);\n    \n    \n    \n    edge = mod(edge * edge, edge / edge);\n\n\n\n    \n    float value = mix(tile_dist, 1.0-tile_dist, step(1.0, edge));\n    \n    \n    \n    \n    edge = pow(abs(1.0-edge), 1.2) * 0.5;\n    \n    // adds rim to squares\n    value = smoothstep( edge-0.1, edge, 0.9*value);\n    \n    \n    value += square_dist*.1;\n    value *= 0.6;\n    fragColor = vec4(pow(value, 8.1), pow(value, 4.2), pow(value, 1.2), 1.5);\n}","name":"Image","description":"","type":"image"}]}