{"ver":"0.1","info":{"id":"mt2fR1","date":"1693792175","viewed":58,"name":"Merkaba Star - Metamere","username":"Metamere","description":"A cool traditional form constructed from two tetrahedrons facing in opposite directions. It fits within a cube nicely. Also, it is a stellated octahedron.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["math","sdf","tetrahedron"],"hasliked":0,"parentid":"Ws23zt","parentname":"Tetrahedron SDF"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi (acos(-1.))\n\nconst vec3 color = vec3(.1,.7,.6);\n                \nvec2 rotate(vec2 a, float b)\n{\n    float c = cos(b);\n    float s = sin(b);\n    return vec2(\n        a.x * c - a.y * s,\n        a.x * s + a.y * c\n    );\n}\n\nfloat scene(vec3 p)\n{\n    return (min(max(abs(p.x+p.y)-p.z,abs(p.y-p.x)+p.z),\n                max(abs(p.x+p.y)+p.z,abs(p.y-p.x)-p.z)\n               )-1.)/sqrt(3.);\n}\n\nvec3 trace(vec3 cam, vec3 dir)\n{\n    float t;\n    for(int i = 0; i < 100; ++i)\n    {\n        float k = scene(cam+dir*t);\n        t += k;\n        if (k < .001)\n        {\n            vec3 h = cam+dir*t;\n    \t\tvec2 o = vec2(.001, 0);\n    \t\tvec3 n = normalize(vec3(\n        \t\tscene(h+o.xyy)-scene(h-o.xyy),\n        \t\tscene(h+o.yxy)-scene(h-o.yxy),\n        \t\tscene(h+o.yyx)-scene(h-o.yyx)\n    \t\t));\n\n\t\t\tif (iMouse.z > 0.)\n    \t\t{\n        \t\treturn n*.5+.5;\n    \t\t}\n    \t\telse\n    \t\t{\n\t\t        const vec3 lightdir = normalize(vec3(1,5,2));\n                \n\t\t        float light = dot(n,lightdir)*.5+.5;\n\t\t\n\t\t        return light * color;\n    \t\t}\n        }\n    }\n    return vec3(1);\n}\n\nvoid cameraspin(inout vec3 p)\n{\n    p.xy = rotate(p.xy, iTime*.6);\n    p.yz = rotate(p.yz, iTime*.6);\n    p.xz = rotate(p.xz, iTime*.1);\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy - .5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 cam = vec3(0,0,-15.);\n    vec3 dir = normalize(vec3(uv,4));\n    \n    cameraspin(cam);\n    cameraspin(dir);\n\n    out_color.rgb = trace(cam,dir);\n    if (iMouse.z <= 0.)\n    {\n    \tout_color.rgb *= pow(color, vec3(2.*dot(uv,uv)));\n    \tout_color.rgb = pow(out_color.rgb,vec3(.45));\n    }\n}","name":"Image","description":"","type":"image"}]}