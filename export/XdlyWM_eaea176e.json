{"ver":"0.1","info":{"id":"XdlyWM","date":"1488452837","viewed":173,"name":"3D text rendering","username":"rimina","description":"Based on https://www.shadertoy.com/view/4ssSDn and http://www.claudiocc.com/the-1k-notebook-part-i/","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["textrendering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define LENGTH 15\n#define MAXD 100.\n\n#define FAR 80.0\n#define FAR_R 60.0\n#define STEPS 36\n#define GAMMA vec3(2.2)\n\nint text[LENGTH];\n\n/*\nA = 65,\nB = 66,\nC = 67,\nD = 68,\nE = 69,\nF = 70,\nG = 71,\nH = 72,\nI = 73,\nJ = 74,\nK = 75,\nL = 76,\nM = 77,\nN = 78,\nO = 79,\nP = 80,\nQ = 81,\nR = 82,\nS = 83,\nT = 84,\nU = 85,\nV = 86,\nW = 87,\nX = 88,\nY = 89,\nZ = 90,\n*/\n\n// iq's renamed sdCapsule in 2d\nfloat line( vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - .1;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r ){\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat sdf(vec3 p){\n    \n    //d = COMGI\n    //k = AMIKO\n    //r = MGI\n\t//i = GHN\n    //m = MGHNHIO\n    //n = MGIO\n    //a = GIOMJL\n    \n\t// d \n\ttext[0] = 67;\n\ttext[1] = 79;\n\ttext[2] = 77;\n\ttext[3] = 71;\n    text[4] = 73;\n\t\n\t// k\n\ttext[5] = 65;\n\ttext[6] = 77;\n\ttext[7] = 73;\n\ttext[8] = 75;\n\ttext[9] = 79;\n    \n    text[10] = 71; //71, 79, 75, 77, 73\n\ttext[11] = 79;\n\ttext[12] = 75;\n\ttext[13] = 77;\n\ttext[14] = 73;\n    \n    vec3 offset1 = vec3(2.5, 4, 0.0);\n    vec3 offset2 = vec3(0.0, 4, 0.0);\n    vec3 offset3 = vec3(-2.5, 4, 0.0);\n    vec3 offset4 = vec3(-1.25, 1.5, 0.0);\n    vec3 offset5 = vec3(1.25, 1.5, 0.0);\n\t\n\tfloat d = MAXD;\n    float r = 0.15;\n    \n    for (int i=1;i<LENGTH;i++) {\n        \n        if(i < 5){\n            float p0 = float(text[i-1])-65.;\n            float p1 = float(text[i])-65.;\n\n            vec3 c0 = vec3(mod(p0, 3.), -floor(p0/3.), 0.0);\n            vec3 c1 = vec3(mod(p1, 3.), -floor(p1/3.), 0.0);\n            d = min(d, sdCapsule(p-offset1, c0, c1, r));\n\n            vec3 c01 = vec3(mod(p0, 3.), -floor(p0/3.), 0.0);\n            vec3 c11 = vec3(mod(p1, 3.), -floor(p1/3.), 0.0);\n            d = min(d, sdCapsule(p-offset3, c01, c11, r));\n        }\n        else if(i >= 6 && i < 10){\n            float p0 = float(text[i-1])-65.;\n            float p1 = float(text[i])-65.;\n\n            vec3 c0 = vec3(mod(p0, 3.), -floor(p0/3.), 0.0);\n            vec3 c1 = vec3(mod(p1, 3.), -floor(p1/3.), 0.0);\n            d = min(d, sdCapsule(p-offset2, c0, c1, r));\n        }\n        else if(i >= 11){\n            float p0 = float(text[i-1])-65.;\n            float p1 = float(text[i])-65.;\n\n            vec3 c0 = vec3(mod(p0, 3.), -floor(p0/3.), 0.0);\n            vec3 c1 = vec3(mod(p1, 3.), -floor(p1/3.), 0.0);\n            d = min(d, sdCapsule(p-offset4, c0, c1, r));\n\n            vec3 c01 = vec3(mod(p0, 3.), -floor(p0/3.), 0.0);\n            vec3 c11 = vec3(mod(p1, 3.), -floor(p1/3.), 0.0);\n            d = min(d, sdCapsule(p-offset5, c01, c11, r));\n        }\n\t}\n    return d;\n    \n}\n\n\n\nvec3 march(in vec3 ro, in vec3 rd, inout float t){\n\n    vec3 p = ro+rd;\n    for(int i = 0; i < STEPS; ++i){\n        float d = sdf(p);\n        t += d;\n        p += rd*d;\n        \n        if(d < 0.01 || t > FAR){\n            break;\n        }\n        \n    }\n    return p;\n}\n\n\n// Functio to set camera\n// o = camera origin\n// target = camera target (lookAt)\n// cr = right angle\nmat3 setCamera(vec3 o, vec3 target, float cr ){\n\tvec3 cw = normalize(target-o);//z\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);//up\n\tvec3 cu = normalize( cross(cw,cp) );//x\n\tvec3 cv = normalize( cross(cu,cw) );//y\n\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 v = -1.0+2.0*uv;\n    v.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(cos(iTime*0.5)*8.5, 0.0, sin(iTime*0.5)*8.5);\n    vec3 rt = vec3(0.0, 0.0, 0.0);\n    \n    mat3 cam = setCamera(ro, rt, 0.);\n    vec3 rd = normalize(cam*vec3(v.xy, radians(90.)));\n    \n    float t = 0.01;\n    vec3 p = march(ro, rd, t);\n    \n    if(t > FAR){\n        fragColor = vec4(1.0);\n    }\n    else{\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n    \n\t\n\t/*vec2 p = 100.*uv;// + .02 * sin(5. * iTime * vec2(uv) + 10.*6.28*uv);\n\tvec2 offset1 = vec2(1.4, 5.5);\n    vec2 offset2 = vec2(1.4*2.7, 5.5);\n    vec2 offset3 = vec2(1.4*4.3, 5.5);\n\t\n\tfloat d = MAXD;\n    \n    for (int i=1;i<LENGTH;i++) {\n        \n        if(i < 5){\n            float p0 = float(text[i-1])-65.;\n            float p1 = float(text[i])-65.;\n\n            vec2 c0 = offset1+vec2(mod(p0, 3.), -floor(p0/3.));\n            vec2 c1 = offset1+vec2(mod(p1, 3.), -floor(p1/3.));\n            d = min(d, line(p, c0, c1));\n\n            vec2 c01 = offset3+vec2(mod(p0, 3.), -floor(p0/3.));\n            vec2 c11 = offset3+vec2(mod(p1, 3.), -floor(p1/3.));\n            d = min(d, line(p, c01, c11));\n        }\n        else if(i >= 6){\n             float p0 = float(text[i-1])-65.;\n            float p1 = float(text[i])-65.;\n\n            vec2 c0 = offset2+vec2(mod(p0, 3.), -floor(p0/3.));\n            vec2 c1 = offset2+vec2(mod(p1, 3.), -floor(p1/3.));\n            d = min(d, line(p, c0, c1));\n        }\n\t}\n    \n\tvec3 color = vec3(smoothstep(0., .05, d));\t\n\tfragColor = vec4(color,1.0);*/\n\t\n}","name":"Image","description":"","type":"image"}]}