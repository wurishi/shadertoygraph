{"ver":"0.1","info":{"id":"DdVBDy","date":"1698614748","viewed":28,"name":"SpectralLoss","username":"Lehdari","description":"Advanced loss function formulation for fourier-transformed signals. Intended to be used in reconstruction tasks trying to recover high-frequency components of a signal, such as image super-resolution. Inspired by the article https://tinyurl.com/3v3htpve","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["ml","loss","fouries"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.14159265359;\n\nfloat loss(in vec2 p, in vec2 t)\n{\n    float eps = 1.0e-8;\n    float pLen = length(p) + eps;\n    float tLen = length(t) + eps;\n    \n    float ampLoss = (pLen - tLen)*(pLen - tLen);\n    float phaseDiff = (1.0/pi)*acos(clamp(dot(p / pLen, t / tLen), -1.0+eps, 1.0-eps));\n    float dirDiff = 0.5 - 0.5*(dot(p, t) / dot(t, t));\n    float a = clamp(1.0 - pLen / tLen, 0.0, 1.0);\n    a *= a;\n    float phaseLoss = (1.0 - a) * phaseDiff*phaseDiff + a * dirDiff;\n    \n    return ampLoss + phaseLoss*tLen;\n}\n\nvec2 lossGradient(in vec2 p, in vec2 t)\n{\n    float eps = 1.0e-4;\n    float gx = (loss(p+vec2(eps, 0.0), t) - loss(p-vec2(eps, 0.0), t)) / (2.0*eps);\n    float gy = (loss(p+vec2(0.0, eps), t) - loss(p-vec2(0.0, eps), t)) / (2.0*eps);\n    \n    return vec2(gx, gy);\n}\n\nvec3 colorGradient(float x)\n{\n    x = clamp(x, 0.0, 1.0);\n    return vec3(x*x, 0.05 + 1.8*x - 0.9*x*x, 0.2 + 2.0*x - 2.0*x*x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord*2.0 - iResolution.xy)/iResolution.yy;\n    vec2 pMouse = (iMouse.xy*2.0 - iResolution.xy)/iResolution.yy;\n\n    //if (iMouse.z > 0.0) {\n    //    vec2 g = lossGradient(p, pMouse);\n    //    fragColor = vec4(g*0.25+0.5, 0.0, 1.0);\n    //}\n    //else {\n        float l = loss(p, pMouse);\n        fragColor = vec4(colorGradient(l), 1.0);\n    //}\n}","name":"Image","description":"","type":"image"}]}