{"ver":"0.1","info":{"id":"cdfcWj","date":"1687190471","viewed":44,"name":"Moving Koch","username":"SUBAUX","description":"Its just like, pshhh.. you know?","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["koch","cock"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c,-s,s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec2 N(float angle) {\n\n    return vec2(sin(angle), cos(angle));\n}\n\n\nvec2 koch(vec2 uv){\n     uv.x = abs(uv.x);\n    \n    vec3 col = vec3(0);\n    float d;\n    \n    float angle = 0.;\n    vec2 n = N((5./6.)*3.1415);\n    \n    uv.y += tan((5./6.)*(PI))*.5;\n   \td = dot(uv-vec2(.5, 0), n);\n    uv -= max(0.,d)*n*2.;\n    \n    float scale = 1.;\n    \n    n = N((2./3.)*3.1415);\n    uv.x += .5;\n    for(int i=0; i < 5; i++) {\n        uv *= 3.;\n        scale *= 3.;\n        uv.x -= 1.5;\n        \n        uv.x = abs(uv.x);\n        uv.x -= .5;\n        d = dot(uv, n);\n        uv -= min(0.,d)*n*2.;\n    }\n    uv /= scale;\n    return uv;\n    }\nfloat GetDist(vec3 p) {\n    float d = sdBox(p, vec3(1));\n    /*\n    //streight intersecrion\n    vec2 xy = koch(p.xy);\n    vec2 yz = koch(p.yz);\n    vec2 xz = koch(p.xz);\n    d = max(xy.y, max(yz.y,xz.y));\n    */\n    \n    vec2 xz = koch(vec2(length(p.xz), p.y));\n    vec2 yz = koch(vec2(length(sin(abs(T))*p.yz), p.x));\n    vec2 xy = koch(vec2(length(cos(abs(T))*p.xy), p.z));\n    d = max(xy.y, max(yz.y,xz.y));\n    \n    d = mix(d, length(p)-.5,cos(T*1.5)*.5);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p =ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.00001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy*T), GetDist(p-e.yxy*T),GetDist(p-e.yyx*T));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 3.5);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+1.5;\n        col = vec3(dif);\n        \n        col = n*.5+.5;\n        col *= texture(iChannel0, r).rgb;\n    }\n    //col *= 0.;\n    //vec2 st = koch(uv)*4.;\n   // col = vec3(st.y);\n    col = pow(col, vec3(.545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}