{"ver":"0.1","info":{"id":"7dsGWN","date":"1616457690","viewed":61,"name":"Simple Raymarcher by me","username":"Insidious_Scripter","description":"A 3d shader... Working on adding keyboard input. PLS HELPPPPP!!!!!!!!!!!!! lol","likes":1,"published":1,"flags":16,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nbool KeyPressed(int KEY){\n\n    return texelFetch(iChannel0, ivec2(KEY, 0), 0).x > 0.5;\n}\n\n//SHAPES\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r){\n\n    vec3 ab = b - a;\n    vec3 ap = p - a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t * ab;\n    return length(p - c) - r;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r){\n\n    vec3 ab = b - a;\n    vec3 ap = p - a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t * ab;\n    \n    float x = length(p - c) - r;\n    float y = (abs(t - 0.5) - 0.5) * length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return e + i;\n}\n\nfloat sdTorus(vec3 p, vec2 r){\n\n    float x = length(p.xz) - r.x;\n    return length (vec2(x, p.y)) - r.y;\n}\n\nfloat dBox(vec3 p, vec3 s){\n\n    return length(max(abs(p) - s, 0.));\n}\n\nfloat GetDist(vec3 p) {\n    \n    float size = cos(sin(iTime));\n    vec4 s = vec4(-1.5, 1., 10., size * .7);\n    \n    \n    float sphereDist = length(p - s.xyz) - s.w;\n    float planeDist = p.y;\n    \n    float cd = sdCapsule(p, vec3(.5, 1, 7), vec3(.5, 2, 7), size / 2.);\n    float td = sdTorus(p - vec3(3, .5, 6), vec2 (size, size / 3.));\n    float bd = dBox(p - vec3(-3, .5, 6), vec3(size / 2.));\n    float cyld = sdCylinder(p, vec3(-5, 1, 7), vec3(-5, 2, 6.5), size / 2.);\n    \n    float d = min(cd, planeDist);\n    d = min(d, td);\n    d = min(d, bd);\n    d = min(d, sphereDist);\n    d = min(d, cyld);\n    \n    return d;\n}\n//LOOPING\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    \n    for(int i = 0; i < MAX_STEPS; i++) {\n      vec3 p = ro + rd * dO;\n      float dS = GetDist (p);\n      dO += dS;\n      if(dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p - e.xyy),\n        GetDist(p - e.yxy),\n        GetDist(p - e.yyx));\n        \n    return normalize(n);\n}\n//LIGHTING\nfloat GetLight(vec3 p){\n    \n    vec3 lightPos = vec3(0, 6, 5);\n    //lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p + n * SURF_DIST * 2.1, l);\n    if(d < length(lightPos - p)) dif *= .1;\n    return dif;\n\n}\n\n//FINAL IMAGE/CAMERA SETTINGS\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\n    float ry;\n    float rx;\n    \n    vec4 m = iMouse / iResolution.x;\n    vec2 rot;\n    rx = m.x - .45 + uv.x / 3.;\n    ry = m.y - .25 + uv.y / 3.;\n\n\n    float sz;\n    float sx;\n    if(KeyPressed(38))\n    {\n        sz += 1.;\n    }\n    else if(KeyPressed(40))\n    {\n        sz -= 1.;\n    }\n    else sz = sz;\n    if(KeyPressed(39))\n    {\n        sx += 1.;\n    }\n    else if(KeyPressed(37))\n    {\n        sx -= 1.;\n    }\n        \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(sx, 2, sz);\n    vec3 rd = normalize(vec3(uv.x - rx, uv.y - ry, .8));\n    \n\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p);\n    col = vec3(dif);\n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}