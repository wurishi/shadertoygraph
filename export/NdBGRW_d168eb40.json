{"ver":"0.1","info":{"id":"NdBGRW","date":"1616986734","viewed":275,"name":"Adjustable Squircle","username":"marcelliino","description":"Squircle with adjustable size and radius","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["circle","square","squircle","roundedrectangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float squircle(vec2 uv, vec2 size, float radius){\n radius = 1.0/radius/min(size.x, size.y);\n float shape = length(pow(abs(uv/size), radius * size));\n return smoothstep(-1.0, 1.0, (shape-1.0)/min(1.0, fwidth(shape)));\n}\n\n#define blur 1.5/iResolution.y\n\nfloat roundedRect(vec2 uv, vec2 size, float radius){\nradius = radius*min(size.x, size.y);\nvec2 d = abs(uv)-(size-radius);\nfloat shape = length(max(d, vec2(0.0)))+min(max(d.x, d.y),  0.0);\nreturn smoothstep(radius-blur, radius+blur, shape);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = ( 2.0 * fragCoord - iResolution.xy ) / iResolution.y;\n    \n    vec3 col = vec3(0.75);\n    \n    float t = iTime/1.25;\n    vec2 r = vec2(sin(t), cos(t))*0.5+0.5;;\n    vec2 s = vec2(0.75);\n    \n    col.r = squircle(uv, s, r.x);\n    col.r = max(col.r, 1.0-squircle(uv/0.99, s, r.x));\n    \n    col.g = roundedRect(uv, s, r.y);\n    col.g = max(col.g, 1.0-roundedRect(uv/0.99, s, r.y));\n    \n    fragColor = vec4(1.0-col,1.0);\n}","name":"Image","description":"","type":"image"}]}