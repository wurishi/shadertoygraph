{"ver":"0.1","info":{"id":"cdVBDt","date":"1698769319","viewed":266,"name":"Taste of the Divine II","username":"ElSolem","description":"Summoning Token : https://www.shadertoy.com/view/dsGBDd\nxy = p.x / p.y :: secret sauce\nhttps://cineshader.com/view/cdVBDt","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["infinity","summoning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float d){\n\treturn mix(vec3(0.0,3.02,1.24),vec3(1.,0.01,1.2),d);\n}\n\nvec2 rotate(vec2 p,float a){\n\tfloat c = cos(a);\n    float s = sin(a);\n    return p*mat2(c,s,-s,c);\n}\n\nfloat map(vec3 p){\n    for( int i = 0; i<66; ++i){\n        float t = iTime*0.006;\n        p.xz =rotate(p.xz,t);\n        p.xy =rotate(p.xy,t*1.0);\n        p.xz = abs(p.xz);\n        p.xz-=.16;\n\t}\n\treturn dot(sign(p),p)/6.;\n}\n\nvec4 rm (vec3 ro, vec3 rd){\n    float t = 1.;\n    vec3 col = vec3(0.006);\n    float d;\n    for(float i =0.; i<36.; i++){\n\t\tvec3 p = ro + rd*t;\n        d = map(p)*.98;\n        if(d<0.07){\n            break;\n        }\n        if(d>22.){\n        \tbreak;\n        }\n        //col+=vec3(3.6,3.8,3.8)/(400.*(d));\n        col+=palette(length(p)*.1)/(222.*(d));\n        t+=d;\n    }\n    return vec4(col,1./(d*20.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Convert pixel coordinates to a normalized range (-1 to 1)\n    vec2 p = (2.0*fragCoord-iResolution.xy)/min(iResolution.y,iResolution.x);\n\n    // Calculate the value of xy using your equation\n    float xy = p.x / p.y;\n\n    // Define a threshold for plotting the point\n    float threshold = 2.; // Adjust this value as needed // air: 1.0, water: 1.33, glass: 1.5, diamond: 2.4\n\n    // Check if xy is within the threshold to plot the point\n    if (abs(xy) < abs(threshold))\n    {\n    vec2 uv = (fragCoord-(iResolution.xy/2.))/iResolution.x;\n\tvec3 ro = vec3(55.,55.,-13.);\n    ro.xz = rotate(ro.xz,iTime);\n    vec3 cf = normalize(-ro);\n    vec3 cs = normalize(cross(cf,vec3(7,3.,17.)));\n    vec3 cu = normalize(cross(cf,cs));\n    \n    vec3 uuv = ro+cf*3. + uv.x*cs + uv.y*cu;\n    \n    vec3 rd = normalize(uuv-ro);\n    \n    vec4 col = rm(ro,rd);\n    \n    \n    fragColor = col;\n    }\n    else\n    {\n    vec2 uv = (fragCoord-(iResolution.xy/2.))/iResolution.x;\n\tvec3 ro = vec3(55.,55.,-13.);\n    ro.xz = rotate(ro.xz,iTime);\n    vec3 cf = normalize(-ro);\n    vec3 cs = normalize(cross(cf,vec3(7,3.,17.)));\n    vec3 cu = normalize(cross(cf,cs));\n    \n    vec3 uuv = ro+cf*3. + uv.x*cs + uv.y*cu;\n    \n    vec3 rd = normalize(uuv-ro);\n    \n    vec4 col = rm(ro,rd);\n    \n    \n    fragColor = col;\n    }\n    }","name":"Image","description":"","type":"image"}]}