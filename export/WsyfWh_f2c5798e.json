{"ver":"0.1","info":{"id":"WsyfWh","date":"1606989504","viewed":189,"name":"Several types of stella","username":"gaz","description":"3d","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI atan(1.)*4.\n#define TAU atan(1.)*8.\n\nvoid lookAt(inout vec3 rd,vec3 ro,vec3 ta,vec3 up){\n    vec3 w=normalize(ta-ro),u=normalize(cross(w,up));\n    rd=rd.x*u+rd.y*cross(u,w)+rd.z*w;\n}\n\nvoid rot(inout vec3 p,vec3 a,float t){\n\ta=normalize(a);\n\tvec3 u=cross(a,p),v=cross(a,u);\n\tp=u*sin(t)+v*cos(t)+a*dot(a,p);   \n}\n\n// https://shadertoy.com/view/ltf3W2\n#define sabs(p,k)sqrt(p*p+k)\n\n// https://www.shadertoy.com/view/MsKGzw\n// smoothing type\nvoid sfold(inout vec3 p, float n, float k) \n{\n    float c=cos(PI/n),s=sqrt(.75-c*c);\n    vec3 v=vec3(-.5,-c,s);\n    for(int i=0;i<5;i++)\n    {\n        p.xy=sabs(p.xy,k);\n        float g=dot(p,v);\n        p-=(g-sabs(g,k))*v;\n    }\n}\n\n// https://www.shadertoy.com/view/WdfcWr\nvoid sfold(inout vec2 p,float n, float k)\n{\n    float h=floor(log2(n)),a=TAU*exp2(h)/n;\n    for(float i=0.;i<h+2.;i++)    {\n\t \tvec2 v=vec2(-cos(a),sin(a));\n\t\tfloat g=dot(p,v);\n \t\tp-=(g-sabs(g,k))*v;\n \t\ta*=.5;\n    }\n}\n\n// p-=2.*min(0.,dot(p,v))*v;\n// smooth type\nvoid sfold(inout vec2 p, vec2 v, float k)\n{\n    float g=dot(p,v);\n    p-=(g-sabs(g,k))*v;\n}\n\n// if(p.x<p.y)p.xy=p.yx;\n// smooth type\nvoid sfold90(inout vec2 p, float k)\n{\n    vec2 v=normalize(vec2(1,-1));\n    float g=dot(p,v);\n    p-=(g-sabs(g,k))*v;\n}\n\nfloat de0(vec3 p)\n{\n    float k=1e-3;\n    p.z = sabs(p.z,k);\n\tsfold(p.xy,5.,k);\n    vec3 v = normalize(vec3(2,1,3));\n    return dot(p,v)-.6;\n}\n\nfloat de1(vec3 p)\n{\n    float k=5e-3;\n    p=sabs(p,k);\n    sfold90(p.xz,k);\n\tsfold90(p.yz,k);\n    vec3 v = normalize(vec3(1,1,-1));\n    return dot(p,v)-.7;\n}\n\nfloat de2(vec3 p)\n{\n    float k=5e-4;\n\tfloat n = 4.;\n    sfold(p,n,k);\n    vec3 v = normalize(vec3(1));\n    return dot(p,v)-1.;\n}\n\nfloat de3(vec3 p)\n{\n    float k=5e-4;\n\tfloat n = 5.;\n    sfold(p,n,k);\n    vec3 v = normalize(vec3(0,1,1));\n    return dot(p,v)-1.;\n}\n\nfloat de4(vec3 p)\n{\n    float k=5e-4;\n\tfloat n = 5.;\n    sfold(p,n,k);\n    vec3 v = normalize(vec3(1));\n    return dot(p,v)-1.;\n}\n\nfloat de5(vec3 p)\n{\n    float k=3e-3;\n    p=sabs(p,k);\n    sfold90(p.xz,k);\n\tsfold90(p.yz,k);\n    sfold90(p.xy,k);\n    vec3 v = normalize(vec3(1,0,1));\n    return dot(p,v)-1.;\n}\n\nfloat de6(vec3 p)\n{\n    float k=1e-3;\n    p=sabs(p,k);\n    sfold90(p.xz,k);\n\tsfold90(p.yz,k);\n    sfold90(p.xy,k);\n    vec3 v = normalize(vec3(2,3,1));\n    return dot(p,v)-.9;\n}\n\nfloat de7(vec3 p)\n{\n    float k=3e-3;\n    p=sabs(p,k);\n    sfold90(p.xz,k);\n\tsfold90(p.yz,k);\n    sfold90(p.xy,k);\n    vec3 v = normalize(vec3(1,2,-1));\n    return dot(p,v)-.9;\n}\n\nfloat map(in vec3 p)\n{\n\trot(p,vec3(cos(iTime*.3),sin(iTime*.3),1),iTime*.5);\n\tswitch(int(mod(iTime,8.))) {\n    case 0: return de0(p); break;\n    case 1: return de1(p); break;\n    case 2: return de2(p); break;\n    case 3: return de3(p); break;\n    case 4: return de4(p); break;\n    case 5: return de5(p); break;\n    case 6: return de6(p); break;\n    case 7: return de7(p); break;\n    }\n    return 1.;\n}\n\nvec3 calcNormal(vec3 p)\n{\n  vec3 n=vec3(0);\n  for(int i=0; i<4; i++){\n    vec3 e=.001*(vec3(9>>i&1, i>>1&1, i&1)*2.-1.);\n    n+=e*map(p+e);\n  }\n  return normalize(n);\n}\n\nfloat march(vec3 ro, vec3 rd, float near, float far)\n{\n    float t=near,d;\n    for(int i=0;i<70;i++)\n    {\n        t+=d=map(ro+rd*t);\n        if (d<.001) return t;\n        if (t>=far) return far;\n    }\n    return far;\n}\n\nvec3 doColor(vec3 p)\n{\n    return vec3(.3,.5,.8)+cos(p)*.5+.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy*2.-iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0,0,5);\n    vec3 rd = normalize(vec3(uv,2));\n    vec3 ta =vec3(0);\n    lookAt(rd,ro,ta,vec3(0,1,0));    \n    vec3 col= vec3(0);\n\tconst float maxd=50.;\n    float t=march(ro,rd,0.,maxd);\n    if(t<maxd)\n    {\n        vec3 p=ro+rd*t;\n        col=doColor(p); \n        vec3 n=calcNormal(p);      \n\t\tvec3 lightPos=ro+vec3(2,5,2);\n    \tvec3 li=lightPos-p;\n\t\tfloat len=length(li);\n\t\tli/=len;\n\t\tfloat dif=clamp(dot(n,li),0.,1.);\n        col*=max(dif,.2);\n        float rimd=pow(clamp(1.-dot(reflect(-li,n),-rd),0.,1.),2.5);\n\t\tfloat frn=rimd+2.2*(1.-rimd);\n    \tcol*=frn*.6;\n        col*=max(.5+.5*n.y,.3);\n        col*=exp2(-2.*pow(max(0.,1.-map(p+n*.8)/.8),2.));\n        col+=vec3(.8,.6,.2)*pow(clamp(dot(reflect(rd,n),li),0.,1.),10.);\n    }\n    fragColor.xyz=col;\n}","name":"Image","description":"","type":"image"}]}