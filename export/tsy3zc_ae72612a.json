{"ver":"0.1","info":{"id":"tsy3zc","date":"1570643488","viewed":148,"name":"ShaderTober - Husky","username":"Flopine","description":"A small doodle with inktober's theme \"Husky\". He can follow your mouse, try it! :) ","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","mouse","interaction","inktober","husky"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and others to sprout :)  https://twitter.com/CookieDemoparty\n\n#define PI 3.141592\n#define anim (2.*(iMouse.xy/iResolution.xy)-1.)\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat xor (float a, float b)\n{return (1.-a)*b + (1.-b)*a;}\n\nfloat head (vec2 uv)\n{\n    uv.y +=0.2;\n    float c = step(length(uv), 1.8);\n    float uux = abs(uv.x)-0.5, uuy = uv.y;\n    uuy -= .5+sin(uux*PI)*0.5;\n    vec2 uu = vec2(uux,uuy);\n    \n    return xor(step(uu.y, -0.2),c)*c;\n}\n\nfloat ear (vec2 uv)\n{\t\n    uv.x = abs(uv.x)-0.2;\n    uv.x += sin(uv.y*1.5+PI);\n    return step(uv.x + uv.y,0.2) * step(-0.4,uv.y);\n}\n\nfloat ears (vec2 uv)\n{\n    uv.y -= 0.75;\n    uv.x = abs(uv.x) -1.7;\n    uv *= rot(-PI/4.);\n    uv *= rot(sin(iTime)*0.2);\n    return ear(uv);\n}\n\nfloat face (vec2 uv)\n{\n\n   \tuv -= clamp(anim,vec2(-0.4,-0.53),vec2(0.4,0.15));\n    uv.x = abs(uv.x);\n    vec2 uu = uv;\n    \n    uv += vec2(-0.9,0.3);\n    float c = step(length(uv), 0.2);\n    \n    uv = uu;\n    uv.y += 0.6;\n    float n = step(uv.x - uv.y,0.2)*step(uv.y,0.05);\n    \n    uv = uu;\n    uv.y += .8;\n    uv.y -= uv.x * uv.x ;\n    float m = step(abs(uv.x*0.9 + uv.y), 0.05)*step(-0.5,uv.y);\n    return c+n+m;\n}\n\nfloat outline (vec2 uv)\n{\n    uv.y += 0.1;\n    return step(length(uv),1.8) * step(1.7,length(uv));\n}\n\nfloat background (vec2 uv)\n{\n    float per = .9;\n    uv *= rot(iTime);\n    uv *= sin(iTime*0.3)*0.5+0.8;\n    uv = mod(uv,per)-per*0.5;\n    uv.x = abs(uv.x)-0.05;\n    uv *= rot(-PI/4.);\n    return step(length(uv*vec2(1.,0.5)),0.1);\n}\n\nvec3 husky (vec2 uv)\n{\n    uv *= 2.;\n    vec3 col = vec3(1.);\n    col -= vec3(0.4,0.3,0.3)*clamp(ears(uv)+head(uv),0.,1.);\n    col -= vec3(1.)*face(uv);\n    col -= vec3(1.)*outline(uv);\n\tcol -= vec3(0.,1.,1.)*clamp(background(uv)-(step(length(uv), 1.8)+ears(uv)),0.,1.);\n    return clamp(col,0.,1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.*(fragCoord/iResolution.xy)-1.;\n\n    uv.x *= iResolution.x/iResolution.y;\n   \n    vec3 col = husky(uv);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}