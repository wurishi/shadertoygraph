{"ver":"0.1","info":{"id":"4cjGzR","date":"1703752454","viewed":32,"name":"phind: test1","username":"AIFunnyTests","description":"prompt:  complex shapes and patterns","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ai","phind"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nconst float EPSILON = 0.0005;\nconst float PI = 3.14159265359;\nconst vec3 COLOR_BACKGROUND = vec3(.741, .675, .82);\nconst vec3 COLOR_AMBIENT = vec3(0.42, 0.20, 0.1);\n\nmat2 rotate2d(float theta) {\n float s = sin(theta), c = cos(theta);\n return mat2(c, -s, s, c);\n}\n\nfloat sdSphere(vec3 p, float r, vec3 offset)\n{\n return length(p - offset) - r;\n}\n\nfloat scene(vec3 p) {\n return min(sdSphere(p, 1., vec3(0, 0, 0)), sdSphere(p, 1., vec3(2, 0, 0)));\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n float depth = MIN_DIST;\n float d; // distance ray has travelled\n\n for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n   vec3 p = ro + depth * rd;\n   d = scene(p);\n   depth += d;\n   if (d < PRECISION || depth > MAX_DIST) break;\n }\n \n d = depth;\n \n return d;\n}\n\nvec3 calcNormal(in vec3 p) {\n   vec2 e = vec2(1, -1) * EPSILON;\n   return normalize(\n     e.xyy * scene(p + e.xyy) +\n     e.yyx * scene(p + e.yyx) +\n     e.yxy * scene(p + e.yxy) +\n     e.xxx * scene(p + e.xxx));\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n\tvec3 cd = normalize(lookAtPoint - cameraPos);\n\tvec3 cr = normalize(cross(vec3(0, 1, 0), cd));\n\tvec3 cu = normalize(cross(cd, cr));\n\t\n\treturn mat3(-cr, cu, -cd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n vec2 mouseUV = iMouse.xy/iResolution.xy;\n \n if (mouseUV == vec2(0.0)) mouseUV = vec2(0.5); // trick to center mouse on page load\n\n vec3 col = vec3(0);\n vec3 lp = vec3(0);\n vec3 ro = vec3(0, 0, 3); // ray origin that represents camera position\n \n float cameraRadius = 2.;\n ro.yz = ro.yz * cameraRadius * rotate2d(mix(-PI/2., PI/2., mouseUV.y));\n ro.xz = ro.xz * rotate2d(mix(-PI, PI, mouseUV.x)) + vec2(lp.x, lp.z);\n\n vec3 rd = camera(ro, lp) * normalize(vec3(uv, -1)); // ray direction\n\n float d = rayMarch(ro, rd); // signed distance value to closest object\n\n if (d > MAX_DIST) {\n   col = COLOR_BACKGROUND; // ray didn't hit anything\n } else {\n   vec3 p = ro + rd * d; // point discovered from ray marching\n   vec3 normal = calcNormal(p); // surface normal\n\n   vec3 lightPosition = vec3(0, 2, 2);\n   vec3 lightDirection = normalize(lightPosition - p) * .65; // The 0.65 is used to decrease the light intensity a bit\n\n   float dif = clamp(dot(normal, lightDirection), 0., 1.) * 0.5 + 0.5; // diffuse reflection mapped to values between 0.5 and 1.0\n\n   col = vec3(dif) + COLOR_AMBIENT;   \n }\n\n fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}