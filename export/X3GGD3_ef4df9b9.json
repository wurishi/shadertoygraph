{"ver":"0.1","info":{"id":"X3GGD3","date":"1718291527","viewed":29,"name":"geometric continuity ","username":"letbonsaibe","description":"curious about  g0,g1,g2 continuity","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf","g1","continuity","g2","g0"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n\n// SDF FUNCTION FROM IQ\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\nfloat sdRoundedBox( in vec2 p, in vec2 b, in vec4 r )\n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\nvec2 rotate(vec2 p, float angle) {\n    return mat2(\n        cos(angle), -sin(angle),\n        sin(angle), cos(angle)\n    ) * p;\n}\n\n\nfloat sdArrow(vec2 p, vec2 sp, float angle)\n{\n    float d1 = sdCircle(p-sp, 0.01);\n    float arrowLength = .2;\n    vec2 ep = sp + arrowLength * vec2(cos(angle), sin(angle));\n    float d2 = sdSegment(p, sp, ep);\n    float d3 = sdTriangleIsosceles(rotate(p - ep, 3.1415926 *.5 +angle), vec2(0.02,0.04));\n    return min(d3, min(d1, d2));\n}\n\n\n\n\n\n\nfloat line(float d, float width) { \n    return clamp(width-abs(d)/fwidth(d), 0., 1.);\n}\n\nfloat fill(float d) {\n    return smoothstep(-fwidth(d), fwidth(d), -d) > 0. ? 1.0 : 0.0;\n}\n\n\n\n\nvec3 g1OnBox(vec2 wh, float t) {\n    t = mod(t, 4.0);\n    if (t < 2.0) {\n        float y =  t * wh.y * .5;\n        return vec3(-wh.x, y, PI);\n    } else {\n        float x =  (t - 2.0) * .2 - wh.x;\n        return vec3( x, wh.y, .5*PI);\n    } \n}\n\nvec3 g2ONRoundBox(vec2 wh, float r, float t) {\n    t = mod(t, 5.0);\n    if (t < 1.0) {\n        float y =  t * wh.y * .5;\n        return vec3(-wh.x, y, PI);\n    } else if  (t >= 1.0 && t< (1.0 + PI / 2.0)) {\n        float t2 = PI - t + 1.0;\n        vec2 p = vec2(-wh.x+r+cos(t2)*r, wh.y - r + sin(t2)*r);\n        return vec3(p, t2);\n    } else {\n        float t3 = t - PI / 2.0 - 1.0;\n        return vec3(-wh.x + r + t3*.1, wh.y, PI *.5);\n    }\n    \n\n\n    return vec3(0.);\n}\n\n\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    float t = iTime * 3.1415926;\n    vec3 color = vec3(0.0);\n    float frame = mod(iTime, 10.0);\n    \n    vec2 wh = vec2(.5, .3);\n\n    vec2 off1 = vec2(-.8, .4);\n    float d = sdBox(uv - off1, wh);\n    color = mix(color, vec3(1.), line(d, 1.0)); \n    vec3 motion = g1OnBox(wh, t);\n    float d2 = sdArrow(uv, motion.xy+off1, motion.z);\n    color = mix(color, vec3(1.), fill(d2)); \n\n\n    vec2 off2 = vec2(.8, .4);\n    float r = wh.y * .5;\n    d = sdRoundedBox(uv - off2, wh, vec4(r));\n    color = mix(color, vec3(1.), line(d, 1.0)); \n    motion = g2ONRoundBox(wh, r, t);\n    d2 = sdArrow(uv, motion.xy+off2, motion.z);\n    color = mix(color, vec3(1.), fill(d2)); \n\n     \n     \n\n\n\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}