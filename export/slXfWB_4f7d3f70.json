{"ver":"0.1","info":{"id":"slXfWB","date":"1719906013","viewed":58,"name":"Seperate buffers FDM","username":"Masterchef365","description":"Use different buffers for the FDM, each with its own speed of light. Released for fun","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["wave","fdm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    vec2 u = texture(iChannel0, uv).xy;\n    bool obstacle = texture(iChannel1, uv).x > 0.;\n    \n    u *= 20.;\n    \n    vec3 color;\n    /*if (u > 0.) {\n        color = vec3(1., 0.1, 0.1) * u;\n    } else {\n        color = vec3(0.1, 0.4, 1.) * -u;\n    }*/\n    color = vec3(abs(u.x), (abs(u.x) + abs(u.y)) * 0.2, abs(u.y));\n    \n \n    \n    if (obstacle) color = vec3(0.5);\n   \n   \n    fragColor = vec4(color, 1.);\n    //fragColor = texture(iChannel0, uv);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Simulation\n\n//const float c = 1.; // Courant number\n\nconst vec2 c = vec2(0.5, 1.);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = coord_to_uv(fragCoord, iResolution.xy);\n    \n    // Border\n    const float border = 1.;\n    bool in_border = any(lessThan(fragCoord, vec2(border)))\n        || any(greaterThan(fragCoord, iResolution.xy - vec2(border)));\n    \n    // Obstacles\n    if (in_border) {\n        fragColor = vec4(0.);\n        return;\n    }\n\n    // Initialization\n    if (iFrame <= 1) {\n        float k = float(length(uv) < 0.1);\n        fragColor = vec4(k);\n        return;\n    }\n    \n    // Compute kernel\n    vec2 buf_uv = fragCoord.xy / iResolution.xy;\n    vec4 center_prev = texture(iChannel0, buf_uv);\n    vec2 center = center_prev.xy;\n    vec2 prev = center_prev.zw;\n    bool obstacle = texture(iChannel1, buf_uv).x > 0.;\n\n    vec2 up = texture(iChannel0, (fragCoord.xy + vec2(0, 1)) / iResolution.xy).xy;\n    vec2 down = texture(iChannel0, (fragCoord.xy + vec2(0, -1)) / iResolution.xy).xy;\n\n    vec2 right = texture(iChannel0, (fragCoord.xy + vec2(-1, 0)) / iResolution.xy).xy;\n    vec2 left = texture(iChannel0, (fragCoord.xy + vec2(1, 0)) / iResolution.xy).xy;\n    \n    vec2 next;\n    \n    // Solve differential equation\n    vec2 ddy = (up - 2. * center + down);\n    vec2 ddx = (right - 2. * center + left);\n    \n    if (iFrame <= 1) {\n        // n = 1 special case\n        next = center - .5 * c * (ddy + ddx);\n    } else {\n        next = -prev + 2. * center + .5 * c * (ddy + ddx);\n    }\n  \n    if (obstacle) next = vec2(0.);\n    \n    fragColor = vec4(next, center);\n}\n\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Drawing obstacles\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = coord_to_uv(fragCoord, iResolution.xy);\n\n    // Mouse interaction\n    vec2 mouse_pos_uv = coord_to_uv(iMouse.xy, iResolution.xy);\n    bool mouse_circ = (iMouse.z > 0.) && distance(mouse_pos_uv, uv) < 0.1;\n    \n    // Compute kernel\n    vec3 center_prev = texture(iChannel0, fragCoord.xy / iResolution.xy).xyz;\n    bool obstacle = center_prev.x > 0.;\n\n    \n    fragColor = vec4(mouse_circ || obstacle, vec3(1));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec2 coord_to_uv(vec2 coord, vec2 res) {\n    vec2 uv = coord / res.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= res.x / res.y;\n    return uv;\n}","name":"Common","description":"","type":"common"}]}