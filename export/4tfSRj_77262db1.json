{"ver":"0.1","info":{"id":"4tfSRj","date":"1437767399","viewed":3750,"name":"2D Vector field visualizer","username":"nmz","description":"The RGB coloring is trying to show the underlying gradient field.\n\nSimple version: https://www.shadertoy.com/view/XlfSRj","likes":82,"published":1,"flags":0,"usePreview":0,"tags":["2d","visualization","vectorfield","vecotr","visulizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"//2D Vector field visualizer by nmz (twitter: @stormoid)\n\n/*\n\tThere is already a shader here on shadertoy for 2d vector field viz, \n\tbut I found it to be hard to use so I decided to write my own.\n*/\n\n#define time iTime\n\nconst float arrow_density = 1.5;\nconst float arrow_length = .45;\n\nconst vec3 luma = vec3(0.2126, 0.7152, 0.0722);\n\nfloat f(in vec2 p)\n{\n    return sin(p.x+sin(p.y+time*0.1)) * sin(p.y*p.x*0.1+time*0.2);\n}\n\n\n//---------------Field to visualize defined here-----------------\nvec2 field(in vec2 p)\n{\n\tvec2 ep = vec2(.05,0.);\n    vec2 rz= vec2(0);\n\tfor( int i=0; i<7; i++ )\n\t{\n\t\tfloat t0 = f(p);\n\t\tfloat t1 = f(p + ep.xy);\n\t\tfloat t2 = f(p + ep.yx);\n        vec2 g = vec2((t1-t0), (t2-t0))/ep.xx;\n\t\tvec2 t = vec2(-g.y,g.x);\n        \n        p += .9*t + g*0.3;\n        rz= t;\n\t}\n    \n    return rz;\n}\n//---------------------------------------------------------------\n\nfloat segm(in vec2 p, in vec2 a, in vec2 b) //from iq\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp(dot(pa,ba)/dot(ba,ba), 0., 1.);\n\treturn length(pa - ba*h)*20.*arrow_density;\n}\n\nfloat fieldviz(in vec2 p)\n{\n    vec2 ip = floor(p*arrow_density)/arrow_density + .5/arrow_density;   \n    vec2 t = field(ip);\n    float m = pow(length(t),0.5)*(arrow_length/arrow_density);\n    vec2 b = normalize(t)*m;\n    float rz = segm(p, ip, ip+b);\n    vec2 prp = (vec2(-b.y,b.x));\n    rz = min(rz,segm(p, ip+b, ip+b*0.65+prp*0.3));\n    return clamp(min(rz,segm(p, ip+b, ip+b*0.65-prp*0.3)),0.,1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy-0.5;\n\tp.x *= iResolution.x/iResolution.y;\n    p *= 10.;\n\t\n    vec2 fld = field(p);\n    vec3 col = sin(vec3(-.3,0.1,0.5)+fld.x-fld.y)*0.65+0.35;\n    col = mix(col,vec3(fld.x,-fld.x,fld.y),smoothstep(0.75,1.,sin(time*0.4)))*0.85;\n    float fviz = fieldviz(p);\n    \n    #if 1\n    col = max(col, 1.-fviz*vec3(1.));\n    #else\n    if (dot(luma,col) < 0.5)\n    \tcol = max(col, 1.-fviz*vec3(1.));\n    else\n        col = min(col, fviz*vec3(1.));\n    #endif\n\tfragColor = vec4(col,1.0);\n}","name":"","description":"","type":"image"}]}