{"ver":"0.1","info":{"id":"3tl3Ds","date":"1558099010","viewed":74,"name":"My first 3d shader","username":"icecreamsandwich","description":"Learned how to manipulate a point in 3d space and visualize it from this tutorial: https://www.youtube.com/watch?v=dKA5ZVALOhs","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["point","3dspace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DistLine(vec3 camera, vec3 cameraDistToPixel, vec3 point) {\n\treturn length(cross(point-camera, cameraDistToPixel))/length(cameraDistToPixel);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // make origin in center of the screen\n    uv -= .5;\n    \n    // adjusting screen to aspect ratio\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 camera = vec3(.0, .0, -2.0);\n    vec3 cameraDistToPixel = vec3(uv.x, uv.y, 0.0) - camera;\n\n    float time = iTime;\n    \n    vec3 point = vec3(sin(time), .0, 3.*cos(time)+2.);\n    float distanceToPoint = DistLine(camera, cameraDistToPixel, point);\n    if (distanceToPoint > .1) {\n    \tdistanceToPoint = 0.0;\n    } else {\n    \tdistanceToPoint = 1.0;\n    }\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(distanceToPoint, col);\n}","name":"Image","description":"","type":"image"}]}