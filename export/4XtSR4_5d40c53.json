{"ver":"0.1","info":{"id":"4XtSR4","date":"1718712238","viewed":107,"name":"Modern Night Vision","username":"curiouspers","description":"just a quick test\nwith primitive adaptive brightness - if you have a very dark room it will make you more visible\njump scare warning if you're in a completely dark room","likes":3,"published":1,"flags":2,"usePreview":0,"tags":["nightvision","nightvision","nw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// reference https://youtu.be/UAeJHAFjwPM?t=373\n\n// try changing this to 0 or 2\n#define TYPE 1\n#define adaptiveBrightness 1\n#define VIGNETTE 1\n#define SHOW_ORIGINAL 0\n\nconst vec3 lum = vec3(0.2125, 0.7154, 0.0721);\n\nconst vec3 greenCol = vec3(0.435,0.808,0.333); // like old night vision goggles\nconst vec3 whiteCol = vec3(0.580,0.878,0.976); // like new and fancy analogue white fosphorous googles\n\nconst float pixels = 0.2;//;iMouse.x/100.;//mod(iTime * 10., 50.);\n\n\n#if TYPE < 1 || TYPE > 1\n    const vec3 useCol = greenCol;\n    const float mixinPixelezation = 0.5;\n#else\n    const vec3 useCol = whiteCol;\n    const float mixinPixelezation = 0.0;\n#endif\n\nconst float minBlur = 0.0;\nconst float blurIterations = 4.;\nconst float blurDistance = 0.03;\nconst float ANALOGUE_NOISE = ((useCol == whiteCol) ? 1. : 0.);\n\n    \n    \nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvec4 blurTex(in sampler2D tex, in vec2 uv, float off, float it, float lod){\n    float subpx = 8.*it;\n    vec4 fullRes =  texture(tex, uv+vec2(0,0),   lod) / max(1., subpx+1.);\n    float i = 0.;\n    for (i = 0.; i<it; i++){\n        float o = off*i;\n        fullRes += texture(tex, uv+vec2(0,o),   lod)/subpx;\n        fullRes += texture(tex, uv+vec2(o,o),   lod)/subpx;\n        fullRes += texture(tex, uv+vec2(o,0),   lod)/subpx;\n        fullRes += texture(tex, uv+vec2(o,-o),  lod)/subpx;\n        fullRes += texture(tex, uv+vec2(0,-o),  lod)/subpx;\n        fullRes += texture(tex, uv+vec2(-o,-o), lod)/subpx;\n        fullRes += texture(tex, uv+vec2(-o,0),  lod)/subpx;\n        fullRes += texture(tex, uv+vec2(-o,o),  lod)/subpx;\n    }\n    return fullRes;\n}\n\nvec4 nw(sampler2D tex, vec2 uv, vec2 fragCoord){\n    \n    float resScale = 1440./iResolution.y;\n    float noisePixels = (pixels < 1. ? pixels : pixels*0.2)*resScale;\n\n    vec4 fullRes = texture(tex, uv, 0.0);\n    float vignette = (VIGNETTE > 0) ? pow(1.-dot(uv-0.5, uv-0.5),2.2)*1.2 : 1.;\n    float blurVignette = clamp(1.-pow(vignette,1.4), 0.,1.)+minBlur;\n    vignette = pow(vignette, 3.);\n    \n    vec4 fullResBlur = blurTex(tex,uv, blurDistance/blurIterations*blurVignette, blurIterations, 0.); //(sin(iTime*1.)*0.5*10.+0.5*10.)\n    \n    //return vec4(blurVignette);\n    fullRes = fullResBlur;\n    vec4 pixelRes = textureLod(tex, floor(fragCoord* pixels) / iResolution.xy / pixels, 0.0);\n    vec4 fragColor = mix(pixelRes, fullRes, 1.-mixinPixelezation);\n    \n    float mul = 1.2;\n    if (adaptiveBrightness>0) {\n        vec3 averageBrightness = textureLod(tex, vec2(0.5,0.5), 8.0).rgb;\n        averageBrightness += textureLod(tex, vec2(0.3,0.5), 8.0).rgb;\n        averageBrightness += textureLod(tex, vec2(0.7,0.5), 8.0).rgb;\n        averageBrightness += textureLod(tex, vec2(0.5,0.3), 8.0).rgb;\n        averageBrightness += textureLod(tex, vec2(0.5,0.7), 8.0).rgb;\n        \n        averageBrightness += textureLod(tex, vec2(0.3,0.3), 8.0).rgb;\n        averageBrightness += textureLod(tex, vec2(0.7,0.7), 8.0).rgb;\n        averageBrightness += textureLod(tex, vec2(0.7,0.3), 8.0).rgb;\n        averageBrightness += textureLod(tex, vec2(0.3,0.7), 8.0).rgb;\n        float brightness = dot(averageBrightness.rgb, lum)*0.5;\n        if (uv.y >0.98 && uv.x >0.49 && uv.x <0.51)\n            return vec4(brightness,brightness,brightness, 1.);\n            \n        mul = mix(pow(brightness,-1.5), mul, brightness);\n//        if (brightness > 0.9)\n//            return vec4(1,0,0,1);\n    }\n    fragColor*=mul;\n    \n    \n    float grey = dot(fragColor.rgb,lum);\n    fragColor.rgb = vec3(grey);\n    \n    \n    vec2 noiseUv = floor(fragCoord* noisePixels) / iResolution.xy / noisePixels;\n    float noiseTime = mod(iTime*1.,10.);\n    float noise = random(uv/resScale+noiseTime);\n    float highNoise = 0.;\n    if (ANALOGUE_NOISE < 1.)\n        highNoise = pow(random(noiseUv+noiseTime),1000.)*1.;\n    else{\n        highNoise = textureLod(iChannel1, uv*noisePixels*8./resScale+mod(vec2(float(iFrame)/1.55, -float(iFrame)/10.),100.5), 1.).x;\n        highNoise = pow(highNoise,28.)*30.;\n    }\n    highNoise += highNoise * vignette * 10.;\n        float h = grey;\n        vec3 rgb = clamp( abs(mod(-h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n        \n     \n     vec3 col1 = vec3(0.686,0.302,1.000);\n     vec3 col2 = vec3(0.702,0.071,0.580);\n     vec3 col3 = vec3(0.886,0.282,0.318);\n     vec3 col4 = vec3(0.980,0.922,0.224);\n     vec3 col5 = vec3(1.000,1.000,1.000);     \n     rgb = mix(vec3(0),col1, smoothstep(0.0, 0.01, h));\n     rgb = mix(rgb,col2, smoothstep(0.3, 0.5, h));\n     rgb = mix(rgb,col3, smoothstep(0.5, 0.6, h));\n     rgb = mix(rgb,col4, smoothstep(0.6, 0.9999, h));\n     rgb = mix(rgb,col5, smoothstep(0.9999, 1., h));\n     \n        vec3 color = TYPE < 2 ? useCol : rgb;\n    return vec4((fragColor.rbg+noise*0.2+highNoise)*color*vignette, 1);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; \n    \n    // Original\n    if (SHOW_ORIGINAL > 0 && uv.x < sin(iTime)*.5+0.5 || iMouse.z>0.)\n        fragColor = texture(iChannel0, uv);\n    else\n        fragColor = nw(iChannel0, uv, fragCoord);\n}","name":"Image","description":"","type":"image"}]}