{"ver":"0.1","info":{"id":"WtVXRt","date":"1583411714","viewed":135,"name":"MetaCircles","username":"loni852","description":"asd","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["circles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float Count = 6.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (-iResolution.xy+3.0*fragCoord.xy)/iResolution.y;\n\n    vec2 metaBalls[int(Count)];\n    \n     float MBRadius = 0.04+((sin(iTime)/2.0)+0.5)*0.05;\n    \n    vec2 MB = vec2(0.8,0.6);\n    \n    \n    //Circles ==\n    //float MBtoUV =   MBRadius/( sqrt ( ( uv.x - MB.x ) * ( uv.x - MB.x ) + ( uv.y - MB.y ) * ( uv.y - MB.y ) ) );\n    \n    \n    //Squares ==\n    //float MBtoUV =   MBRadius/(abs(uv.x - MB.x) + abs( uv.y - MB.y));\n    \n    \n    //Implement Donuts M(x,y) = Radius_1 / |Radius_2 - sqrt( (x-x0)^2 + (y-y0)^2 )|\n    float MBtoUV = MBRadius / abs(MBRadius+0.5 - ( sqrt ( ( uv.x - MB.x ) * ( uv.x - MB.x ) + ( uv.y - MB.y ) * ( uv.y - MB.y ) ) ));\n    \n    \n    \n    float finalcolor =  MBtoUV;\n    \n    for(float i = .0; i < Count; i++){\n    \tvec2 MB2 = vec2(0.8+sin(iTime+i),0.6+cos(iTime+i));\n        \n        \n        //Circles ==\n        float MBtoUV2 = MBRadius/( sqrt ( ( uv.x - MB2.x ) * ( uv.x - MB2.x ) + ( uv.y - MB2.y ) * ( uv.y - MB2.y ) ) );\n        \n        //Squares ==\n        //float MBtoUV2 =   MBRadius/(abs(uv.x - MB2.x+sin(iTime)) + abs( uv.y - MB2.y));\n        \n        //Donut\n        //float MBtoUV2 = MBRadius / abs(MBRadius+0.5 - ( sqrt ( ( uv.x - MB2.x ) * ( uv.x - MB2.x ) + ( uv.y - MB2.y ) * ( uv.y - MB2.y ) ) ));\n        \n        finalcolor +=  MBtoUV2;\n    \n    }\n    \n    if (finalcolor >= 0.0 && finalcolor <= 10.5){\n    \tfinalcolor *= 0.5;\n    }\n    else {\n    \tfinalcolor *= 0.0;\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    //vec3 col = mix(vec3(0.0,0.0,0.0),vec3(finalcolor,finalcolor,0.0),smoothstep(0.7,0.99,finalcolor));\n\tvec3 col = vec3(finalcolor,finalcolor,0.0);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}