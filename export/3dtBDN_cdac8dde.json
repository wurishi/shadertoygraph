{"ver":"0.1","info":{"id":"3dtBDN","date":"1605128147","viewed":475,"name":"Tixy Land","username":"Xor","description":"Recreated @aemkey's \"Tixy Land\" in ShaderToy. Try the original here: https://tixy.land","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["golf","tixyland"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Recreated @aemkey's \"Tixy Land\" in ShaderToy using shader syntax.\n//Play around with the original here: https://tixy.land\n\n#define tixy(t,i,x,y) cos((x*x-x*4.-y*8.+y*y)*.1+8.-t)\n\n// .01/cos(i*(i+y)+t/3.)\n// tan(x/max(x-8.,y-8.,7.-x,7.-y)-t*4.)\n\n/*\n\tWhile some codes (like this one) will work on tixy.land too,\n\tthere are plenty of syntax and function name differences.\n\tYou can't use floats and ints interchangably for example.\n\tStill thought it was fun to try though!\n*/\n\n\n\n\n\n//You can fiddle with dot count here:\n#define count 16.\n\n//Render with the result:\nvoid mainImage( out vec4 color, in vec2 coord )\n{\n    float s = 1.2/iResolution.y;\n    vec2 u = (coord-.5*iResolution.xy)*s;\n    u.y = -u.y;\n    \n    float square = step(abs(u.x),.5)*step(abs(u.y),.5);\n    vec2 cell = floor((u+.5)*count);\n    float index = cell.x+cell.y*count;\n    float tixel = float(tixy(iTime,index,cell.x,cell.y));\n    \n    float dist = length(fract(u*count)-.5)*count/.5;\n    float radius = count*min(abs(tixel),1.);\n    \n    vec3 col = tixel<0. ? vec3(255,34,68)/255. : vec3(1);\n    col *= clamp((radius-dist)/s/count/count/2.,0.,1.)*square;\n\n    color = vec4(col,1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define hypot(x,y) sqrt(x*x+y*y)\n#define max(a,b,c,d) max(max(a,b),max(c,d))","name":"Common","description":"","type":"common"}]}