{"ver":"0.1","info":{"id":"ctKGRR","date":"1689024148","viewed":49,"name":"KoH","username":"iyo","description":"BigWIngs Raymarching preset + Inigo Quilez SDF Primitives (And some love)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","vaporwave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdGyroid(vec3 p, float scale, float thickness,float bias)\n{\n    p *= scale;\n    return abs(dot(sin(p), cos(p.zxy))-bias)/scale-thickness;\n\n}\n\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    const float k = sqrt(3.0);\n    h.x *= 0.5*k;\n    p.xy /= h.x;\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p.xy=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    float d1 = length(p.xy)*sign(-p.y)*h.x;\n    float d2 = abs(p.z)-h.y;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n\n\nfloat GetDist(vec3 p) {\n    //p.z += iTime*1.5;\n    //p.y -= iTime*1.5;\n    //p.x -= iTime*1.5;\n    p.x += 10.;\n    float auroTri = sdTriPrism(p, vec2(3.242, 42420));\n    float g1 = sdGyroid(p, .357, .0003785 ,.000357);\n    float g2 = sdGyroid(p, 2.53, .0000000000553 ,.0016);\n    float circ = sdSphere(p, 20.);\n    float octo = sdOctahedron(p, 10.);\n    float g = min(g1, g2*5.);//union\n    g1 += g2;\n    float f = min(abs(max(g, circ*auroTri)), max(g, circ));\n    float octoTrans = min(f, octo);\n    float d = cos(abs(sin(octoTrans)));\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(20, 3, -.3);\n    ro.yz *= Rot(-iTime*.2);\n    ro.xz *= Rot(-iTime*.2);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), .5);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;  \n        col = abs(vec3(n.x+(mod(iTime*6., .12)), n.y*1.1, n. z*12.55205));\n        col += abs(dif*dif)/(iTime*.1);\n        col = min(sin((dif*col)*1.414), cosh(dif*col*3.));\n        \n    }\n\n    \n    fragColor = vec4(col,1.0);\n\n}","name":"Image","description":"","type":"image"}]}