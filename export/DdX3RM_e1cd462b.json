{"ver":"0.1","info":{"id":"DdX3RM","date":"1666236546","viewed":75,"name":"conical hollow","username":"jt","description":"A conical hollow or inverse cone - exact euclidean distance but not optimized.\nUsed e.g. [url=https://www.shadertoy.com/view/cslGD7]here[/url].\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf","cone","distance","inverse","euclidean","exact","hollow","conical"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/DdX3RM conical hollow by jt\n// based on https://www.shadertoy.com/view/DdX3z4 euclidean distance sdf debugger by jt\n\n// tags: sdf, cone, distance, inverse, euclidean, exact, hollow, conical\n\n// TODO: cleanup and simplify implementation (e.g. remove cap from cone)\n\n// MIT License, as in https://www.shadertoy.com/terms\n\n/*\n\nCopyright (c) 2022 Jakob Thomsen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n#define AA 1\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\n#define pi 3.1415926\n\nfloat slice_z()\n{\n    return cos(iTime*0.5); // TWEAK SLICE-PLANE HERE\n}\n\n// based on https://iquilezles.org/articles/distfunctions/\nfloat line( vec3 p, vec3 a, vec3 b )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat halfspace(vec3 p)\n{\n    return p.z;\n}\n\nfloat slice(vec3 p)\n{\n    return p.z + slice_z();\n}\n/*\nfloat cone( vec3 p, vec2 c )\n{\np.z = -p.z-1.;\n    // c is the sin/cos of the angle\n    vec2 q = vec2( length(p.xy), -p.z );\n    float d = length(q-c*max(dot(q,c), 0.0));\n    return d * ((q.x*c.y-q.y*c.x<0.0)?-1.0:1.0);\n}\n*/\nfloat cone( in vec3 p, in vec2 c, float h )\n{\n    vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n    vec2 w = vec2( length(p.xy), p.z );\n    vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n    float k = sign( q.y );\n    float d = min(dot( a, a ),dot(b, b));\n    float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n    return sqrt(d)*sign(s);\n}\n\nfloat sphere(vec3 p, float s)\n{\n    return length(p) - s;\n}\n\nfloat circle( vec3 p, float r )\n{\n    return length(vec2(length(p.xy)-r,p.z));\n}\n\nfloat cylindrical_hollow(vec3 p, float r)\n{\n    return\n        p.z -2.+length(p.xy)< 0.0 ? max(halfspace(p), -cone(vec3(0,0,-2)-p, vec2(1), 50.0)) :\n        length(p.xy) >= r ? halfspace(p) :\n        circle(p, r);\n}\n\nfloat map(vec3 p) // PLACE SDF TO DEBUG HERE\n{p=p.zyx;\n    return cylindrical_hollow(p,2.0);\n}\n\nvec3 gradient(vec3 p) // NOT normalized so we can use it's length to detect errors in the SDF.\n{\n    vec2 h = vec2(EPSILON,0);\n    return (vec3(map(p+h.xyy) - map(p-h.xyy),\n                 map(p+h.yxy) - map(p-h.yxy),\n                 map(p+h.yyx) - map(p-h.yyx)))/EPSILON/2.0;\n}\n\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    for(float t = t0; t < t1;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return t1;\n}\n/*\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    if(t0 < 1.0)\n    {\n        for(float t = t0; t < 1.0;)\n        {\n            float h = map(ro + rd * t);\n            if(h < EPSILON)\n                return t;\n            t += h;\n        }\n        t0 = 1.0;\n    }\n\n    for(float t = t0; t < t1;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON * t) // optimization: coarser epsilon in the distance\n            return t;\n        t += h;\n    }\n\n    return t1;\n}\n*/\n\nvec4 trace_slice(vec3 ro, vec3 rd)\n{\n    vec3 planecolor = vec3(0);\n    // z = ro.z+d*rd.z\n    // z-ro.z = d*rd.z\n    // (z-ro.z)/rd.z = d\n    float dist = (slice_z()-ro.z)/rd.z;\n    if(dist > 0.0)\n    {\n        vec3 dst = ro + rd * dist;\n        float d = map(dst);\n        float n = length(normalize(gradient(dst)));\n        \n        d /= 5.0; // SCALE SDF VISUALIZATION\n\n        // iq's sdf visualization colors\n        planecolor = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n        planecolor *= 1.0 - exp(-24.0 * abs(d));\n        planecolor *= 0.8 + 0.2 * cos(240.0*d);\n        planecolor = mix(planecolor, vec3(1.0), 1.0 - smoothstep(0.0, 0.01, abs(d)));\n\n        planecolor = mix(planecolor, vec3(0,1,0), smoothstep(1.0,1.0-EPSILON, n)); // normal too small? GREEN\n        planecolor = mix(planecolor, vec3(1,0,0), smoothstep(1.0,1.0+EPSILON, n)); // normal too large? RED\n        planecolor = mix(planecolor, vec3(0,0,1), smoothstep(0.0+EPSILON,0.0, n)); // normal zero? BLUE\n\n        // The error detection is basically, quoting spalmer,\n        // \"one iteration of snap-point-to-(nearest-)surface algorithm\".\n        // Jump the distance given by the SDF at the current position\n        // along the gradient given by the SDF at the current position\n        // (direction to the nearest surface) and evaluate the SDF there.\n        // Because the SDF is supposed to describe the distance to the surface,\n        // the result should be (close to) zero.\n        float error = map(dst - gradient(dst) * map(dst)); // SDF error detection thanks to spalmer!\n        //planecolor += smoothstep(0.0, sqrt(EPSILON),-error) * (cos(iTime*2.0*pi)*0.5+0.5); // SDF interior otherwise broken? WHITE, BLINKING (can cause false alarms)\n        //planecolor += smoothstep(0.0, sqrt(EPSILON),+error) * (cos(iTime*2.0*pi)*0.5+0.5); // SDF exterior otherwise broken? WHITE, BLINKING (can cause false alarms)\n        planecolor += smoothstep(0.0,sqrt(EPSILON), abs(error)) * (cos(iTime*2.0*pi)*0.5+0.5); // SDF interior/exterior otherwise broken? WHITE, BLINKING\n    }\n    \n    return vec4(planecolor, dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 o = ivec2(0);\n    vec3 sum = vec3(0);\n    for(o.y = 0; o.y < AA; o.y++)\n    {\n        for(o.x = 0; o.x < AA; o.x++)\n        {\n            vec2 uv = (fragCoord.xy + vec2(o) - vec2(AA-1)*0.5) / iResolution.xy;\n            vec2 ndc = 2.0 * uv - 1.0;\n            ndc.x *= float(iResolution.x) / float(iResolution.y);\n            vec2 m = vec2(1.25*pi + pi/2.0 * float(iMouse.x) / float(iResolution.x),\n                          pi / 1.5 + pi / 4.0 * float(iMouse.y) / float(iResolution.y));\n            if (iMouse.x < 10.0 && iMouse.y < 10.0)\n                m = vec2(-pi/4.0-pi/2.0 * (cos(iTime * 0.25)*0.5+0.5),\n                         1.25 * pi / 2.0);\n\n            mat2 yaw = mat2(vec2(cos(m.x), sin(m.x)), vec2(-sin(m.x), cos(m.x)));\n            vec3 ro = vec3(0.0, 0.5, -5.0 );\n            mat2 pitch = mat2(vec2(cos(m.y), sin(m.y)), vec2(-sin(m.y), cos(m.y)));\n            ro.yz = pitch * ro.yz;\n            ro.xy = yaw * ro.xy;\n\n            vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n            rd.yz = pitch * rd.yz;\n            rd.xy = yaw * rd.xy;\n\n            vec4 slice = trace_slice(ro, rd);\n            vec3 scenecolor = vec3(0);\n\n            float dist = trace(ro, rd, 0.0, DIST_MAX);\n            if(dist < DIST_MAX)\n            {\n                if(slice.w < 0.0)\n                    slice.w = DIST_MAX;\n                bool above = dist < slice.w;\n                if(above) // view only part above plane (comment-out to view whole shape)\n                {\n                    vec3 dst = ro + rd * dist;\n                    vec3 n = normalize(gradient(dst)); // NOTE: for debugging purpose normal returns the unchanged vector which is unnormalized in case of errors!\n\n                    //vec3 lightdir = normalize(vec3(1, 1, 1));\n                    vec3 lightdir = normalize(vec3(0, 0, 1));\n                    vec3 ambient = vec3(0.1);\n                    float diffuse = max(dot(lightdir, n), 0.0);\n                    float specular = pow(max(dot(normalize(lightdir - rd), n), 0.0), 50.0);\n\n                    scenecolor = vec3(.1); // object color\n                    scenecolor = /*specular+*/ (ambient + diffuse) * scenecolor;\n\n                    {\n                        // transform normal to local coordinates\n                        n.xy = n.xy*yaw;\n                        n.yz = n.yz*pitch;\n                        scenecolor = max(scenecolor, smoothstep(0.8, 1.0, length(n.xy))); // rim-light\n                    }\n\n                    scenecolor = 0.5*sqrt(scenecolor); // approximate gamma\n                }\n            }\n\n            vec3 planecolor = 1.5*slice.xyz*exp2(-slice.w*slice.w/20.0); // workaround: \"fog\" hides moiree pattern\n\n            vec3 color = scenecolor + planecolor; // TRANSPARENT\n            //vec3 color = mix(scenecolor, planecolor, step(slice.w, dist)); // SOLID\n            sum += color;\n        }\n    }\n\n    fragColor = vec4(sum/float(AA*AA), 1.0);\n}","name":"Image","description":"","type":"image"}]}