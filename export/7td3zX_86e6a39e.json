{"ver":"0.1","info":{"id":"7td3zX","date":"1636899455","viewed":163,"name":"Filters, interpolation","username":"Envy24","description":"Filters comparison:\n     nearest, bilinear, biquadratic, bicubic, biquartic.\n\nTrilinear interpolation template can be found in \"Common\" tab.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["filters","bicubic","linear","cubic","quadratic","quartic","trilinear","bilinear","nearest","resample","biquadratic","biquartic","rescale"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R         iResolution\n#define center(x) ( (x+x-R.y) / R.y )\n#define TEX0(x)   ( texture(iChannel0, x) )\n\nvec4 nearest(in vec2 P)\n{\n    return TEX0(round(P)/R.xy);\n}\n\n/*\n    1D interpolation methods.\n*/\n\nvec4 linear(in vec4 P0, in vec4 P1, float t)\n{\n    return P0 + t * (P1 - P0);\n}\n\nvec4 quadratic(in vec4 P0, in vec4 P1, in vec4 P2, float t)\n{\n    float tt = t * t;\n    float w0 = 2.0 * tt - 3.0 * t + 1.0;\n    float w1 = -4.0 * tt + 4.0 * t;\n    float w2 = 2.0 * tt - t;\n\n    return w0 * P0 + w1 * P1 + w2 * P2;\n}\n\nvec4 cubic(in vec4 P0, in vec4 P1, in vec4 P2, in vec4 P3, float t)\n{\n    float tt = t * t;\n    float ttt = t * t * t;\n    float w0 = -4.5 * ttt + 9.0 * tt - 5.5 * t + 1.0;\n    float w1 = 13.5 * ttt - 22.5 * tt + 9.0 * t;\n    float w2 = -13.5 * ttt + 18.0 * tt - 4.5 * t;\n    float w3 = 4.5 * ttt - 4.5 * tt + t;\n\n    return w0 * P0 + w1 * P1 + w2 * P2 + w3 * P3;\n}\n\nvec4 quartic(in vec4 P0, in vec4 P1, in vec4 P2, in vec4 P3, in vec4 P4, float t)\n{\n    float tt = t * t;\n    float ttt = t * t * t;\n    float tttt = t * t * t * t;\n    float w0 = (32.0 / 3.0) * tttt - (80.0 / 3.0) * ttt + (70.0 / 3.0) * tt - (25.0 / 3.0) * t + 1.0;\n    float w1 = -(128.0 / 3.0) * tttt + 96.0 * ttt - (208.0 / 3.0) * tt + 16.0 * t;\n    float w2 = 64.0 * tttt - 128.0 * ttt + 76.0 * tt - 12.0 * t;\n    float w3 = -(128.0 / 3.0) * tttt + (224.0 / 3.0) * ttt - (112.0 / 3.0) * tt + (16.0 / 3.0) * t;\n    float w4 = (32.0 / 3.0) * tttt - 16.0 * ttt + (22.0 / 3.0) * tt - t;\n\n    return w0 * P0 + w1 * P1 + w2 * P2 + w3 * P3 + w4 * P4;\n}\n\n/*\n    2D interpolation methods.\n*/\n\nvec4 bilinear(in vec2 P, float u, float v)\n{\n    vec2 invR = (1.0 / R.xy);\n\n    vec4 s0 = TEX0(P * invR);\n    vec4 s1 = TEX0((P + vec2(1.0, 0.0)) * invR);\n    vec4 s2 = TEX0((P + vec2(0.0, 1.0)) * invR);\n    vec4 s3 = TEX0((P + vec2(1.0, 1.0)) * invR);\n\n    return linear(\n        linear(s0, s1, u),\n        linear(s2, s3, u),\n        v);\n}\n\nvec4 biquadratic(in vec2 P, float u, float v)\n{\n    vec2 invR = (1.0 / R.xy);\n\n    vec4 s0 = TEX0(P * invR);\n    vec4 s1 = TEX0((P + vec2(0.5, 0.0)) * invR);\n    vec4 s2 = TEX0((P + vec2(1.0, 0.0)) * invR);\n    \n    vec4 s3 = TEX0((P + vec2(0.0, 0.5)) * invR);\n    vec4 s4 = TEX0((P + vec2(0.5, 0.5)) * invR);\n    vec4 s5 = TEX0((P + vec2(1.0, 0.5)) * invR);\n    \n    vec4 s6 = TEX0((P + vec2(0.0, 1.0)) * invR);\n    vec4 s7 = TEX0((P + vec2(0.5, 1.0)) * invR);\n    vec4 s8 = TEX0((P + vec2(1.0, 1.0)) * invR);\n\n    return quadratic(\n        quadratic(s0, s1, s2, u),\n        quadratic(s3, s4, s5, u),\n        quadratic(s6, s7, s8, u),\n        v);\n}\n\nvec4 bicubic(in vec2 P, float u, float v)\n{\n    vec2 invR = (1.0 / R.xy);\n\n    vec4 s0 = TEX0(P * invR);\n    vec4 s1 = TEX0((P + vec2(0.33, 0.0)) * invR);\n    vec4 s2 = TEX0((P + vec2(0.66, 0.0)) * invR);   \n    vec4 s3 = TEX0((P + vec2(1.0, 0.0)) * invR);\n    \n    vec4 s4 = TEX0((P + vec2(0.0, 0.33)) * invR);\n    vec4 s5 = TEX0((P + vec2(0.33, 0.33)) * invR);    \n    vec4 s6 = TEX0((P + vec2(0.66, 0.33)) * invR);\n    vec4 s7 = TEX0((P + vec2(1.0, 0.33)) * invR);\n    \n    vec4 s8 = TEX0((P + vec2(0.0, 0.66)) * invR);\n    vec4 s9 = TEX0((P + vec2(0.33, 0.66)) * invR);\n    vec4 s10 = TEX0((P + vec2(0.66, 0.66)) * invR);\n    vec4 s11 = TEX0((P + vec2(1.0, 0.66)) * invR);\n    \n    vec4 s12 = TEX0((P + vec2(0.0, 1.0)) * invR);\n    vec4 s13 = TEX0((P + vec2(0.33, 1.0)) * invR);\n    vec4 s14 = TEX0((P + vec2(0.66, 1.0)) * invR);\n    vec4 s15 = TEX0((P + vec2(1.0, 1.0)) * invR);\n\n    return cubic(\n        cubic(s0,  s1,  s2,  s3,  u),\n        cubic(s4,  s5,  s6,  s7,  u),\n        cubic(s8,  s9,  s10, s11, u),\n        cubic(s12, s13, s14, s15, u),\n        v);\n}\n\nvec4 biquartic(in vec2 P, float u, float v)\n{\n    vec2 invR = (1.0 / R.xy);\n\n    vec4 s0 = TEX0(P * invR);\n    vec4 s1 = TEX0((P + vec2(0.25, 0.0)) * invR);\n    vec4 s2 = TEX0((P + vec2(0.5, 0.0)) * invR);   \n    vec4 s3 = TEX0((P + vec2(0.75, 0.0)) * invR);\n    vec4 s4 = TEX0((P + vec2(1.0, 0.0)) * invR);\n    \n    vec4 s5 = TEX0((P + vec2(0.0, 0.25)) * invR);\n    vec4 s6 = TEX0((P + vec2(0.25, 0.25)) * invR);\n    vec4 s7 = TEX0((P + vec2(0.5, 0.25)) * invR);   \n    vec4 s8 = TEX0((P + vec2(0.75, 0.25)) * invR);\n    vec4 s9 = TEX0((P + vec2(1.0, 0.25)) * invR);\n    \n    vec4 s10 = TEX0((P + vec2(0.0, 0.5)) * invR);\n    vec4 s11 = TEX0((P + vec2(0.25, 0.5)) * invR);\n    vec4 s12 = TEX0((P + vec2(0.5, 0.5)) * invR);   \n    vec4 s13 = TEX0((P + vec2(0.75, 0.5)) * invR);\n    vec4 s14 = TEX0((P + vec2(1.0, 0.5)) * invR);\n    \n    vec4 s15 = TEX0((P + vec2(0.0, 0.75)) * invR);\n    vec4 s16 = TEX0((P + vec2(0.25, 0.75)) * invR);\n    vec4 s17 = TEX0((P + vec2(0.5, 0.75)) * invR);   \n    vec4 s18 = TEX0((P + vec2(0.75, 0.75)) * invR);\n    vec4 s19 = TEX0((P + vec2(1.0, 0.75)) * invR);\n    \n    vec4 s20 = TEX0((P + vec2(0.0, 1.0)) * invR);\n    vec4 s21 = TEX0((P + vec2(0.25, 1.0)) * invR);\n    vec4 s22 = TEX0((P + vec2(0.5, 1.0)) * invR);   \n    vec4 s23 = TEX0((P + vec2(0.75, 1.0)) * invR);\n    vec4 s24 = TEX0((P + vec2(1.0, 1.0)) * invR);\n\n    return quartic(\n        quartic(s0,  s1,  s2,  s3,  s4,  u),\n        quartic(s5,  s6,  s7,  s8,  s9,  u),\n        quartic(s10, s11, s12, s13, s14, u),\n        quartic(s15, s16, s17, s18, s19, u),\n        quartic(s20, s21, s22, s23, s24, u),\n        v);\n}\n\nvec2 remap(in vec2 P)\n{\n    float scale = 0.08;\n    vec2 carOrigin = vec2(352.0, 148.0);\n    return P * scale + carOrigin;\n}\n\nvoid mainImage( out vec4 O, in vec2 P )\n{\n    float filterIdx = mod(iTime * 1.0, 5.0);\n\n    if (filterIdx < 1.0)      { O = nearest(remap(P));               return; }\n    else if (filterIdx < 2.0) { O = bilinear(remap(P), 0.5, 0.5);    return; }\n    else if (filterIdx < 3.0) { O = biquadratic(remap(P), 0.5, 0.5); return; }\n    else if (filterIdx < 4.0) { O = bicubic(remap(P), 0.5, 0.5);     return; }\n    else                      { O = biquartic(remap(P), 0.5, 0.5);   return; }\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/**\nTYPE linear(float u)\n{\n    TYPE s0 = // some value s0;\n    TYPE s1 = // some value s1;\n\n    return s0 + u * (s1 - s0);\n}\n\nTYPE bilinear(float u, float v)\n{\n    TYPE s0 = // some value s0;\n    TYPE s1 = // some value s1;\n    TYPE s2 = // some value s2;\n    TYPE s3 = // some value s3;\n    \n    return linear(\n        linear(s0, s1, u),\n        linear(s2, s3, u),\n        v);\n}\n\nTYPE trilinear(float u, float v, float w)\n{\n    TYPE s0 = // some value s0;\n    TYPE s1 = // some value s1;\n    TYPE s2 = // some value s2;\n    TYPE s3 = // some value s3;\n    TYPE s4 = // some value s4;\n    TYPE s5 = // some value s5;\n    TYPE s6 = // some value s6;\n    TYPE s7 = // some value s7;\n\n    return linear(\n        linear(\n            linear(s0, s1, u),\n            linear(s2, s3, u),\n            v),\n        linear(\n            linear(s4, s5, u),\n            linear(s6, s7, u),\n            v),\n        w);\n}\n\n// e.t.c\n/**/","name":"Common","description":"","type":"common"}]}