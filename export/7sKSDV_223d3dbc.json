{"ver":"0.1","info":{"id":"7sKSDV","date":"1635348037","viewed":134,"name":"Gaussian Filtered Checkerboard","username":"oneshade","description":"Applying a gaussion filter to a checkerboard.","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["2d","blur","filter","checkerboard","gaussian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.desmos.com/calculator/l3buctrt3l\n\n// Error function approximation\nfloat erf(in float x) {\n    return sign(x) * sqrt(1.0 - exp2(-1.787776 * x * x));\n}\n\n// Gaussian filtered checkerboard\n// Works for filter widths between 0 and 3\n// Increase k to allow for larger filter widths\nconst float k = 4.0; // k → ∞\nfloat gchecker(in vec2 p, in vec2 w) {\n    p = mod(p, 2.0);\n    float s = 1.0 - 2.0 * mod(k, 2.0);\n    float u = 0.0, v = 0.0;\n    for (float n=-k; n <= k; n++) {\n        u += s * erf((p.x - n) / w.x);\n        v += s * erf((p.y - n) / w.y);\n        s = -s;\n    }\n\n    return (1.0 - u * v) / 2.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    vec2 w = mix(vec2(0.001), vec2(0.5), 0.5 - 0.5 * vec2(cos(0.5 * iTime), sin(iTime)));\n    fragColor = vec4(gchecker(uv, w));\n}","name":"Image","description":"","type":"image"}]}