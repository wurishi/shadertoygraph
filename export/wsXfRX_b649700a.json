{"ver":"0.1","info":{"id":"wsXfRX","date":"1588785210","viewed":122,"name":"Beamform","username":"akohdr","description":"Example of beamforming with line of phased oscillators.  \nMultiple transmitting arrays toggle and sweep to visualize interference patterns.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["waves","beamforming"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Andrew Wild - akohdr/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//#define COLOUR\n\nvec4 beamform(in vec2 p,\t// fragCoord\n                  int n,\t// no. array elements\n                float fs,\t// sweep rate\n                float wl,\t// wavelength\n                float ws)\t// wave speed\n{\n\tvec2 c = (p-vec2(.5,0)*iR.xy)/iR.y;\n    vec4 k = abs(c.x)<.004 ? RED : BLK;\n\n    float i,d;\n    for(int j=0; j<n; i = float(2*++j))\n        k = (d=length(c - wl*PI2*vec2(i,1)))<.005 ? GRN:\n            sin(d/(wl*(float(j+1)/PI*24.)) - i*sin(fs*wT) - ws*wT)/exp(exp(d))+k;\n    return k;\n}\n\n#define TOGGLE(p,t) *usqr(p*t)\nvoid mainImage( out vec4 k, vec2 p )\n{    \n    float t = iT/10.;\n//\tp = p*1.8 - .4*iR;\t// zoom out\n    \n    k  = beamform(p,\t12,\t1.2,\t.008,\t12.) TOGGLE(2.,t);\n    k += beamform(iR-p,\t6,\t1.3,\t.008,\t12.) TOGGLE(3.,t);\n    \n    p = (p-iR/2.).yx*vec2(1,-1)+iR/2.;\n\n    k += beamform(p,\t12,\t1.5,\t.008,\t12.) TOGGLE(5.,t);\n\tk += beamform(iR-p,\t6,\t1.7,\t.008,\t12.) TOGGLE(7.,t);\n\n#ifdef COLOUR\n    float j = sum(k-.5), a = abs(j);\n    k = a>4. ? BLU : j>2. ? WHT : a*(j>0. ? RED : BLK);\n#endif\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Created by Andrew Wild - akohdr/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define iR iResolution.xy\n#define iM iMouse.xy\n#define iT iTime\n#define wT (float(iFrame)/60.)\n\n#define O4  vec4(1,2,3,4)\n#define U4  vec4(1)\n#define BLK vec4(0,0,0,0)\n#define RED vec4(1,0,0,0)\n#define GRN vec4(0,1,0,0)\n#define BLU vec4(0,0,1,0)\n#define ORG vec4(1,.5,.1,0)\n#define VIO vec4(1,0,1,0)\n#define YEL vec4(1,1,0,0)\n#define WHT vec4(1,1,1,0)\n\n#define PI12 0.261799387799149436538553615273291907016430783281258818414578716\n#define PI8  0.392699081698724154807830422909937860524646174921888227621868074\n#define PI4  0.785398163397448309615660845819875721049292349843776455243736148\n#define PI3  1.047197551196597746154214461093167628065723133125035273658314864\n#define PI2  1.570796326794896619231321691639751442098584699687552910487472296\n#define PI   3.141592653589793238462643383279502884197169399375105820974944592\n#define TAU  6.283185307179586476925286766559005768394338798750211641949889185\n#define Rt2  1.732050807568877293527446341505872366942805253810380628055806979\n#define Rt3  1.414213562373095048801688724209698078569671875376948073176679738\n\n#define SC(a) vec2(sin(a),cos(a))\n#define CS(a) vec2(cos(a),sin(a))\n#define ROT2(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define uf(x) mod(x,1.)\n#define ufn(x) (.5+.5*(x))\n#define pfn(x) mod(x,TAU)\n#define usin(x) ufn(sin(x))\n#define uvc(x) clamp(x,vec4(-1),vec4(1))\n#define sum(v) dot(v,U4)\n\n#define rusaw(x) uf(x)\n#define lusaw(x) (1.-rusaw(x))\n#define lsaw(x) (2.*lusaw((x)/TAU)-1.)\n#define rsaw(x) (2.*rusaw((x)/TAU)-1.)\n#define saw(x) lsaw(x)\n#define usaw(x) ufn(saw(x))\n\n#define sqr(x) (2.*floor(lsaw(x))+1.)\n#define usqr(x) ufn(sqr(x))\n#define fsqr(x) (1.+2.*floor(sin(x)))\n#define ssqr(x) (clamp(2.*sin(x),-1.,1.))\n#define qsqr(x,a,m) (clamp(m*tri(x)+a,0.,1.))\n#define psqr(x,a) qsqr(x,a,PI)\n#define Qsqr(x,a,m) (clamp(m*tri(x)+a,-1.,1.))\n\n#define ssin(x) sin(PI*(sin((x))+sin((x)/2.)))\n#define tri(x) (2.*abs(saw((x)-PI2))-1.)\n#define utri(x) ufn(tri(x))\n#define triu(x) (2.*utri((x)/TAU)-1.)\n#define stri(x) (tan(sin(x))/PI2)\n\n#define sinc(x) (sin(x)/(x))\n#define ssinc(x) sinc(mod((x),4.5*TAU)-PI+.1)\n\n","name":"Common","description":"","type":"common"}]}