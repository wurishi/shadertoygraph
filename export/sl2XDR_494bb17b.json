{"ver":"0.1","info":{"id":"sl2XDR","date":"1627491242","viewed":190,"name":"Pychedelic marching","username":"Loutrinator","description":"A psychedelic raymarching shader.","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","psychedelic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 color(float t){\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(2.0, 1.0, 0.0);\n    vec3 d = vec3(0.50, 0.20, 0.25);\n    \n    return a + b * cos(3.141592654*2.0*(c*t+d));\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nmat2 rot (float angle)\n{\n  return mat2(cos(angle),-sin(angle),sin(angle),cos(angle));\n}\nvec3 repeat(vec3 p,float  r){\n    return(mod(p,r)-r/2.);\n}\nfloat sdf(vec3 pos){\n    float repeatDist = 5.0;\n    \n    vec3 spherePos = pos;\n    vec3 littleSphere = pos;\n    vec3 smallestSphere = pos;\n    \n    //Rotating the little spheres\n    //littleSphere.xy *= rot(-iTime*0.1);\n    \n    //moving spheres\n    spherePos.z -= iTime*5.0;\n    //littleSphere.z += iTime*4.0;\n    smallestSphere.z += iTime*5.0;\n    \n    //FIRST GROUP OF SPHERES\n    float bigSphereRadius = 0.3 + abs(sin(iTime*2.0))*0.7;\n    float sphereDist = length(repeat(spherePos,10.0))-bigSphereRadius*2.0;\n    \n    //SECOND GROUP OF SPHERES\n    float littleSphereDist = length(repeat(littleSphere+7.5/2.0,7.5))-1.0;\n    \n    //cutting a cylinder inside the incoming sphere\n    float cylinder = length(pos.xy)-0.8;\n    littleSphereDist = max(-cylinder,littleSphereDist);\n    \n    //THIRD GROUP OF SPHERES\n    float smallestRepeat = 3.0 + abs(sin(iTime*4.0))*0.3;\n    //fixing the Z position of the repeat\n    vec3 smallestSpace = repeat(smallestSphere,smallestRepeat);\n    smallestSpace.z = repeat(smallestSphere,5.0).z;\n    float smallestSphereDist = length(smallestSpace)-0.1;\n    \n    //mixing the 3 sphere distances\n    return min(littleSphereDist,min(smallestSphereDist,sphereDist));\n    //return littleSphereDist;\n}\nvec3 getNormal (vec3 p)\n{\n  vec2 e = vec2(0.001,0);\n  return normalize(vec3(\n    sdf(p+e.xyy)-sdf(p-e.xyy),\n    sdf(p+e.yxy)-sdf(p-e.yxy),\n    sdf(p+e.yyx)-sdf(p-e.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    fragColor = vec4(0,0,0,1);\n\n    // camera position\n    vec3 eye = vec3(0,0,0);\n    eye.z +=iTime*5.0;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv*2.-1.;\n    uv.x *=iResolution.x/iResolution.y;\n    \n    float dither = hash12(uv*1000.+iTime);\n    float ditherPercent = 0.1;\n    \n    // ray\n    vec3 ray = normalize(vec3(uv, 1));\n    float rotationSpeed = 0.3;\n    ray.xy *= rot(iTime*rotationSpeed);\n\n    vec3 pos = eye;\n    \n    // raymarching\n    const int count = 20;\n    for (int index = count; index > 0; --index)\n    {\n        float dist = sdf(pos);\n        if (dist < 0.1)\n        {\n            vec3 normal = getNormal(pos);\n            vec3 orange = vec3(0.0,1.,1.);\n            float shade = dot(normal,vec3(0,0,-1));\n            fragColor = vec4(color(shade),1);\n            break;\n        }\n        pos += ray * dist * ((1.0-ditherPercent)+ditherPercent*dither);\n    }\n    fragColor = max(fragColor, texture(iChannel0,fragCoord/iResolution.xy)*0.9);\n}","name":"Buffer A","description":"","type":"buffer"}]}