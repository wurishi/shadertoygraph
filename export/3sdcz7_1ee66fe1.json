{"ver":"0.1","info":{"id":"3sdcz7","date":"1600681136","viewed":113,"name":"koch flake uv folding test","username":"HalbFettKaese","description":"just trying out what I can do","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["koch","kochflake","uvfolding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Line {\n\tvec2 o;\n    vec2 dir;\n};\n    \nvec2 ProjectLineSegment(Line line, vec2 p, float boundLower, float boundUpper) {\n\tvec2 dir = normalize(line.dir);\n    return line.o + dir * clamp(dot(dir, p - line.o), boundLower, boundUpper);\n}\n    \nvec2 ProjectLine(Line line, vec2 p) {\n    vec2 dir = normalize(line.dir);\n\treturn line.o + dir * dot(dir, p - line.o);\n}\n\nbool CheckDirection(Line line, vec2 p) {\n\treturn cross(vec3(line.dir, 0.), vec3(line.o - p, 0.)).z < 0.;\n}\n\nvoid ReflectUV(Line line, inout vec2 uv) {\n    if (CheckDirection(line, uv)) {\n    \tvec2 pr = ProjectLine(line, uv);\n    \tuv = pr + (pr - uv);\n    }\n}\n\nvec2 NormalizeScreenCoords(vec2 uv, float zoom) {\n\tuv -= iResolution.xy / 2.;\n    uv /= max(iResolution.x, iResolution.y);\n    return uv * zoom;\n}\n\nvoid Curve(inout vec2 uv) {\n    \n    ReflectUV(Line(vec2(0), vec2(0, 1)), uv);\n    \n    float angle = radians(30.);\n    \n    Line reflectionLine = Line(vec2(.5, 0), vec2(sin(angle), cos(angle)));\n    \n    ReflectUV(reflectionLine, uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0);\n    \n    float z = 12.;\n    \n    vec2 uv = NormalizeScreenCoords(fragCoord, z);\n    \n    \n    vec4 M = vec4(NormalizeScreenCoords(iMouse.xy, 1.), NormalizeScreenCoords(iMouse.zw, 1.));\n    \n    uv.y -= sin(radians(60.));\n    \n    float angle = radians(-120.);\n    \n    Line reflectionLine = Line(vec2(1.5, 0), vec2(sin(angle), cos(angle)));\n    \n    ReflectUV(reflectionLine, uv);\n    \n    angle = radians(300.);\n    \n    reflectionLine = Line(vec2(-1.5, 0), vec2(sin(angle), cos(angle)));\n    \n    ReflectUV(reflectionLine, uv);\n    \n    Curve(uv);\n    \n    for (int i = 0; i < 1; i++) {\n    \t\n    \tuv.x -= 1.;\n    \t\n    \tuv *= 3.;\n    \t\n    \tz *= 3.;\n    \t\n    \tCurve(uv);\n    }\n    \n    // Line(M.zw, M.xy - M.zw)\n    \n    Line line = Line(vec2(-1.5, 0.), vec2(3., 0.));\n    \n    float lineIntensity = smoothstep(z / max(iResolution.x, iResolution.y), 0., distance(uv, ProjectLineSegment(line, uv, 0., length(line.dir))));\n\n    uv /= z;\n    uv -= M.xy + .5;\n\n    // Time varying pixel color\n    col = texture(iChannel0, uv).rgb;\n    \n    col += vec3(lineIntensity);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}