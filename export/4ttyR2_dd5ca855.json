{"ver":"0.1","info":{"id":"4ttyR2","date":"1533232773","viewed":394,"name":"Height Flow Rendered","username":"pixlpa","description":"Using Height Flow feedback to generate bump maps","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["lighting","bump","feedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float bumpFunc(vec2 st){\n    float center = length((st-(iMouse.xy/iResolution.xy*2.-vec2(1.))));\n    return texture(iChannel0,st*2.*vec2(iResolution.y/iResolution.x,1.)*0.5+0.5).r+smoothstep(1.3,0.,center)*0.85;\n}\n\n//LIGHTING and BUMP section adapted from https://www.shadertoy.com/view/4l2XWK\n\nvec3 bumpMap(vec3 st){\n    vec3 sp = st;\n    vec2 eps = vec2(4./iResolution.y, 0.);\n    float f = bumpFunc(sp.xy); // Sample value multiplied by the amplitude.\n    float fx = bumpFunc(sp.xy-eps.xy); // Same for the nearby sample in the X-direction.\n    float fy = bumpFunc(sp.xy-eps.yx); // Same for the nearby sample in the Y-direction.\n\n\tconst float bumpFactor = 0.5;\n    fx = (fx-f)/eps.x; // Change in X\n    fy = (fy-f)/eps.x; // Change in Y.\n    return vec3(fx,fy,0.)*bumpFactor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n  \n\n    // VECTOR SETUP - surface postion, ray origin, unit direction vector, and light postion.\n    vec3 sp = vec3(uv, 0); // Surface position.\n    vec3 rd = normalize(vec3(uv, 1.)); // Direction vector from the origin to the screen plane.\n    vec3 lp = vec3(iMouse.xy/iResolution.xy*2.-vec2(1.), -0.5); // Light position\n\tvec3 sn = vec3(0., 0., -1); // Plane normal. Z pointing toward the viewer.\n    \n    // Using the gradient vector, \"vec3(fx, fy, 0),\" to perturb the XY plane normal \",vec3(0, 0, -1).\" \n    sn = normalize( sn + bumpMap(sp));           \n   \n    \n    // LIGHTING\n\t// Determine the light direction vector, calculate its distance, then normalize it.\n\tvec3 ld = lp - sp;\n\tfloat lDist = max(length(ld), 0.001);\n\tld /= lDist;  \n    float atten = 1./(1.0 + lDist*lDist*0.05);\n\n\t// Diffuse value.\n\tfloat diff = max(dot(sn, ld), 0.);  \n    // Specular highlighting.\n    float spec = pow(max(dot( reflect(-ld, sn), -rd), 0.), 5.);\n    \n    //reflections\n    vec3 ref = reflect( vec3(sp.xy,bumpFunc(sp.xy)*0.8), sn );\n  \tfloat m = 2. * sqrt(pow( ref.x, 2. ) +\n    \t\t\tpow( ref.y, 2. ) +\n    \t\t\tpow( ref.z + 1., 2. ));\n  \tvec2 tcx = ref.xy / m + .5;\n    vec3 env_color = texture(iChannel1,tcx).rgb;\n    vec3 color = diff*0.45*vec3(0.25,0.9,1.)+vec3(0.95,0.67,0.29)*spec*1.85+pow(env_color,vec3(3.9))*3.95;\n    fragColor = vec4(color,1.);\n    //fragColor = vec4(vec3(bumpFunc(sp.xy)),1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define samples 8.0\n#define PI 3.14159265359\n#define offset 2.0\n#define strength 10.5\n#define warp 2.\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\n// Value Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/lsf3WH\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = smoothstep(0.,1.,f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 aspect = vec2(iResolution.x/iResolution.y,1.);\n    vec2 accumxy = vec2(0.,0.);\n\n    for( float i=0.0;i<samples;i++){\n        vec2 tc = vec2(sin(PI*2.*i/samples),cos(PI*2.*i/samples));\n        float energy = dot(texture(iChannel0,(fragCoord+tc*offset)/iResolution.xy),vec4(0.333,0.333,0.333,0.));\n        energy += dot(texture(iChannel0,(fragCoord+tc*2.*offset)/iResolution.xy),vec4(0.333,0.333,0.333,0.));\n        accumxy += tc*energy/2.;\n    }\n    vec2 shift = warp*vec2(noise((uv+vec2(0.,iTime*0.1))*4.*aspect),noise((uv+vec2(0.,iTime*0.1+21.))*4.*aspect));\n\n    // Output to screen\n    fragColor = texture(iChannel0,uv+(accumxy*strength*sin(iTime*0.5)+vec2(0.,0.5)+shift)/iResolution.xy);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = mix(vec4(0.5),mix(texture(iChannel0,uv),texture(iChannel1,uv),0.03),1.02);\n}","name":"Buffer B","description":"","type":"buffer"}]}