{"ver":"0.1","info":{"id":"tlBXzG","date":"1566347826","viewed":344,"name":"Rayman Raving Rabbid","username":"Gallo","description":"Rayman Raving Rabbid","likes":20,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","character","rayman","rabbid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 r = texture(iChannel0, uv);\n\t\n    // gamma\n    r = clamp(r,0.0,1.0);\n\tr = vec4( pow( r , vec4(1.9/2.2)));    \n    \n    fragColor =  r;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 David Gallardo @galloscript\n// Just modeling over Original IQ Raymarching example https://www.shadertoy.com/view/Xds3zN\n\n#define M_PI 3.142\n#if HW_PERFORMANCE==0\n#define AA 0\n#else\n#define AA 1  // make this 2 or 3 for antialiasing\n#endif\n\n//------------------------------------------------------------------\n\n#define ZERO (min(iFrame,0))\n\n//------------------------------------------------------------------\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n\nvec3 opCheapBend( in vec3 p, float k )\n{\n    float c = cos(k*p.x);\n    float s = sin(k*p.x);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*p.xy,p.z);\n    return q;\n}\n\n\nfloat opSmoothUnion( float d1, float d2, float k ) \n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nvec3 opMirrorX(in vec3 pos)\n{\n    vec3 lPos = pos;\n    lPos.x = abs(lPos.x);\n    return lPos;\n}\n\nvec3 opMirrorY(inout vec3 pos)\n{\n    pos.y = abs(pos.y);\n    return pos;\n}\n\nvec3 opMirrorZ(inout vec3 pos)\n{\n    pos.z = abs(pos.z);\n    return pos;\n}\n\nvec2 map( in vec3 pos )\n{\n    vec2 res = vec2( 1e10, 0.0 );\n\t\n    \n    vec3 lHeadStart = rotation(X_AXIS, -0.1) * rotation(Z_AXIS, -0.1) * (pos - vec3(-0.03, 0.7, 0.0)); // rotation(X_AXIS, -0.1) * rotation(Z_AXIS, -0.1) *\n    //vec3 lHeadStart = pos - vec3(0.0, 0.7, 0.0); \n    //Main Head\n    float   lHead = sdEllipsoid( lHeadStart, vec3(0.165, 0.15, 0.165));\n    lHead = opSmoothUnion(lHead, sdEllipsoid( lHeadStart - vec3(0.0, -0.15, 0.00), vec3(0.15, 0.2, 0.15)), 0.1);\n    float   lTorso = sdEllipsoid( pos - vec3(0.0, 0.26, 0.0), vec3(0.2, 0.22, 0.18));\n    //Ears\n    vec3 lEarsPos = rotation(Z_AXIS, 0.22) * opMirrorX(lHeadStart * vec3(1.0, 0.9, 1.0));\n    float lEars = sdRoundCone( lEarsPos - vec3(0.07, 0.14, 0.0), 0.04, 0.075, 0.15 );\n    \n\tfloat lEarsCutter =  sdBox(lEarsPos -  vec3(0.09, 0.26, -0.11), vec3(0.1, 0.15, 0.1));\n    \t  lEarsCutter =  min(lEarsCutter, sdBox(lEarsPos -  vec3(0.09, 0.26, 0.11), vec3(0.1, 0.15, 0.1)));\n    \t  lEars = max(lEars, -lEarsCutter);\n    lHead = opSmoothUnion(lHead, lEars, 0.02);\n    float lBody = opSmoothUnion(lHead, lTorso, 0.04);\n    \n    //lLegs\n    float lLegs = sdCylinder( opMirrorX(pos) - vec3(0.09, 0.0, 0.0), vec2(0.07, 0.2) );\n    lBody = opSmoothUnion(lBody, lLegs, 0.07);\n    \n    //Arms\n    float lArms  = sdEllipsoid( rotation(Z_AXIS, -0.28) * (opMirrorX(pos) - vec3(0.18, 0.28, 0.0)), vec3(0.06, 0.12, 0.06));\n    lBody = fOpIntersectionRound(lBody, -lArms, 0.02);\n    //Arms Top\n    lArms  = opSmoothUnion(lArms, sdEllipsoid( rotation(Z_AXIS, -0.28) * (opMirrorX(pos) - vec3(0.125, 0.35, 0.0)), vec3(0.065, 0.08, 0.065)), 0.04);\n    //Hands\n    float lHands  = sdEllipsoid( rotation(Z_AXIS, -0.2) * (opMirrorX(pos) - vec3(0.235, 0.19, 0.0)), vec3(0.026, 0.065, 0.045));\n    \t  lHands  = min(lHands, sdEllipsoid( (opMirrorX(pos) - vec3(0.2, 0.17, -0.035)), vec3(0.012, 0.02, 0.012)));\n    lArms = opSmoothUnion(lArms, lHands, 0.02);\n    lBody = opSmoothUnion(lBody, lArms, 0.008);\n    \n    \n    \n    //Mouth Cavity\n    float lMouthCavity = sdEllipsoid( rotation(Z_AXIS, -0.2) * (lHeadStart - vec3(0.04, -0.1, -0.105)), vec3(0.065, 0.04, 0.07));\n    float lMouthCavity2 = sdEllipsoid( rotation(Z_AXIS, 0.2) * (lHeadStart - vec3(-0.04, -0.1, -0.105)), vec3(0.065, 0.04, 0.07));\n    float lMouthCavity3 = sdEllipsoid( lHeadStart - vec3(0.0, -0.11, -0.105), vec3(0.07, 0.03, 0.07));\n    lMouthCavity = opSmoothUnion(lMouthCavity, lMouthCavity2, 0.03);\n    lMouthCavity = opSmoothUnion(lMouthCavity, lMouthCavity3, 0.02);\n    lBody = fOpIntersectionRound(lBody, -lMouthCavity, 0.01);\n    lMouthCavity = max(lBody + 0.001, lMouthCavity) - 0.002;\n    res = opU( res, vec2( lBody, 3.0) );\n    res = opU( res, vec2( lMouthCavity, 6.0) );\n    \n    \n    //Labios\n    float lLabios = sdEllipsoid( lHeadStart - vec3(0.0, -0.09, -0.1), vec3(0.13, 0.08, 0.25));\n    \t  lLabios = opSmoothUnion(lLabios, sdEllipsoid( lHeadStart - vec3(0.0, -0.12, -0.1), vec3(0.12, 0.08, 0.25)), 0.02);\n    lLabios = max(lLabios, lBody);\n    res = opU( res, vec2( lLabios, 2.0) );\n    \n    //Teeth\n    float lTeeth = sdRoundBox(rotation(Z_AXIS, -0.02) * (opMirrorX(lHeadStart) - vec3(0.044, -0.068, -0.14)), vec3(0.01, 0.015, 0.001), 0.012);\n    res = opU( res, vec2( lTeeth, 3.0 ) );\n    \n    //Tripa\n    float lTripa = sdEllipsoid( pos - vec3(0.0, 0.27, -0.1), vec3(0.12, 0.145, 0.12));\n    lTripa = max(lTripa, lBody);\n    res = opU( res, vec2( lTripa, 2.0) );\n    \n    //Inner Ears\n    float lInnerEars = sdRoundCone( lEarsPos - vec3(0.07, 0.18, 0.0), 0.03, 0.05, 0.11 );\n    float lInnerEarsCutter =  sdBox(lEarsPos -  vec3(0.09, 0.26, -0.12), vec3(0.1, 0.15, 0.1));\n    \t  lInnerEarsCutter =  min(lInnerEarsCutter, sdBox(lEarsPos -  vec3(0.09, 0.26, 0.1), vec3(0.1, 0.15, 0.1)));\n    \t  lInnerEars = max(lInnerEars, -lInnerEarsCutter);\n        //sdEllipsoid( lEarsPos - vec3(0.09, 0.26, -0.02), vec3(0.04, 0.08, 0.03));\n    lInnerEars = max(lInnerEars, lBody);\n    res = opU( res, vec2( lInnerEars, 2.0) );\n    \n    //Eyes\n    vec3 lEyePos = opMirrorX(lHeadStart) - vec3(0.1, 0.0, -0.17);\n    float lEyelids = sdSphere( lEyePos, 0.036 );\n    float \tlEyeCutter = sdBox( rotation(X_AXIS, 0.2) * lEyePos - vec3(0.0, 0.05, -0.055), vec3(0.05, 0.05, 0.05));\n    \t\tlEyeCutter = min(lEyeCutter, sdBox( rotation(X_AXIS, 0.5) * lEyePos - vec3(0.0, 0.05, -0.055), vec3(0.05, 0.05, 0.05)));\n    lEyelids = fOpIntersectionRound(lEyelids, -lEyeCutter, 0.004);\n    res = opU( res, vec2( lEyelids, 2.0) );\n    \n    float lEyeSpheres = sdSphere( lEyePos, 0.033 );\n    res = opU( res, vec2( lEyeSpheres, 5.0) );\n    //res = opU( res, vec2( lEyeCutter, 4.0) );\n    \n    //Plunger\n\tfloat lPlungerWood = sdRoundCone( rotation(X_AXIS, M_PI * -0.5) * (pos - vec3(0.216, 0.148, -0.21)), 0.012, 0.016, 0.35 );\n    res = opU( res, vec2( lPlungerWood, 27.0) );\n    \n    vec3 lRubberPos = pos - vec3(0.216, 0.148, -0.31);\n    float lPlungerRubber = sdSphere( lRubberPos, 0.1);\n    \t  lPlungerRubber = max(lPlungerRubber, -sdSphere( lRubberPos - vec3(0.0, 0.0, 0.0), 0.085));\n    \t  lPlungerRubber = max(lPlungerRubber, -sdBox(  lRubberPos - vec3(0.0, 0.00, -0.12), vec3(0.2, 0.2, 0.1)));\n          lPlungerRubber = min(lPlungerRubber, sdTorus(rotation(X_AXIS, M_PI * -0.5) * (lRubberPos - vec3(0.0, 0.0, -0.02)), vec2(0.091, 0.017)));\n    res = opU( res, vec2( lPlungerRubber, 28.0) );\n    \n    //Debug reference\n    //float lFront = sdSphere(pos - vec3(0.0, 0.66, -0.5), 0.08);\n    //res = opU( res, vec2( lFront, 4.0) );\n    return res;\n}\n\n// https://iquilezles.org/articles/boxfunctions\nvec2 iBox( in vec3 ro, in vec3 rd, in vec3 rad ) \n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\treturn vec2( max( max( t1.x, t1.y ), t1.z ),\n\t             min( min( t2.x, t2.y ), t2.z ) );\n}\n\nconst float maxHei = 0.8;\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    vec2 res = vec2(-1.0,-1.0);\n\n    float tmin = 1.0;\n    float tmax = 20.0;\n\n    // raytrace floor plane\n    float tp1 = (0.0-ro.y)/rd.y;\n    if( tp1>0.0 )\n    {\n        tmax = min( tmax, tp1 );\n        res = vec2( tp1, 1.0 );\n    }\n    //else return res;\n    \n    // raymarch primitives   \n    vec2 tb = iBox( ro-vec3(0.8,0.8,-0.8), rd, vec3(4.0,4.0,4.0) );\n    if( tb.x<tb.y && tb.y>0.0 && tb.x<tmax)\n    {\n        tmin = max(tb.x,tmin);\n        tmax = min(tb.y,tmax);\n\n        float t = tmin;\n        for( int i=0; i<70 && t<tmax; i++ )\n        {\n            vec2 h = map( ro+rd*t );\n            if( abs(h.x)<(0.0001*t) )\n            { \n                res = vec2(t,h.y); \n                 break;\n            }\n            t += h.x;\n        }\n    }\n    \n    return res;\n}\n\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n    // bounding volume\n    float tp = (maxHei-ro.y)/rd.y; if( tp>0.0 ) tmax = min( tmax, tp );\n\n    float res = 1.0;\n    float t = mint;\n    for( int i=ZERO; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        float s = clamp(8.0*h/t,0.0,1.0);\n        res = min( res, s*s*(3.0-2.0*s) );\n        t += clamp( h, 0.02, 0.10 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n#if 1\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n#else\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.0005*e).x;\n    }\n    return normalize(n);\n#endif    \n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) * (0.5+0.5*nor.y);\n}\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox( in vec2 p, in vec2 dpdx, in vec2 dpdy )\n{\n    // filter kernel\n    vec2 w = abs(dpdx)+abs(dpdy) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5)-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\n\nvec3 calcColor(float m, vec3 pos, vec3 nor, vec3 ro, vec3 rd, in vec3 rdx, in vec3 rdy)\n{\n\tif( m<1.5 )\n\t{ \t// project pixel footprint into the plane\n\t    vec3 dpdx = ro.y*(rd/rd.y-rdx/rdx.y);\n\t    vec3 dpdy = ro.y*(rd/rd.y-rdy/rdy.y);\n\t    float f = checkersGradBox( 5.0*pos.xz, 5.0*dpdx.xz, 5.0*dpdy.xz );\n\t    return 0.15 + f*vec3(0.05);\n\t}\n    else if(m < 2.5)\n    { \t//Skin\n    \treturn vec3(1.0, 0.807, 0.705) * 0.3;\n    }\n    else if(m < 3.5)\n    { \t//White Hair\n        return vec3(0.980, 0.980, 0.980) * 0.9;\n    }\n    else if(m < 4.5)\n    { \t//Black\n        return vec3(0.0, 0.0, 0.0);\n    }\n    else if(m < 5.5)\n    { \t//Eyes\n        vec3 lFrontVector = -Z_AXIS;\n        vec3 lDiffVector =  nor;\n        \n        float lOuterCircle =  smoothstep(0.83, 0.9, dot(lDiffVector,  lFrontVector + vec3(0.0, -0.2, 0.0)));\n        float lBlueCircle =  smoothstep(0.82, 0.84, dot(lDiffVector,  lFrontVector + vec3(0.0, -0.2, 0.0)));\n        lOuterCircle = 1.0 - max(lOuterCircle, 1.0 - lBlueCircle);\n        float lBlackCircle = 1.0 - smoothstep(0.94, 0.98, dot(lDiffVector, lFrontVector + vec3(0.0, -0.2, 0.0)));\n        //float lBlackCircle = 1.0 - smoothstep(0.94, 0.98, dot(lDiffVector, lFrontVector + vec3(0.0, -0.2, 0.0)));\n        vec3 lInner = mix(vec3(1.0, 1.0, 1.0) * 0.6, vec3(0.01, 0.2, 1.0), lBlueCircle) * lBlackCircle;\n        return mix(lInner, vec3(0.0, 0.0, 0.0), lOuterCircle);\n    }\n    else if(m < 6.5)\n    { \t//Inner Mouth\n        return vec3(0.745, 0.070, 0.062) * 0.2;\n    }\n    else if(m < 7.5)\n    { \t//Teeth\n        return vec3(0.980, 0.980, 0.980) * 0.7;\n    }\n    else if(m < 27.5)\n    { \t//Wood\n        //return vec3(0.745, 0.270, 0.062) * 0.2;\n        return texture(iChannel0,  (abs(nor.xy) + pos.zx) * 3.0).rgb * 2.1;\n    }\n    else if(m < 28.5)\n    { \t//Plunger\n        return vec3(0.745, 0.0, 0.0) * 0.8;\n    }\n    \n    return vec3(0.0, 0.0, 0.0);\n}\n\n\nvec3 render( in vec3 ro, in vec3 rd, in vec3 rdx, in vec3 rdy )\n{ \n    vec3 col = vec3(0.7, 0.7, 0.9) - max(rd.y,0.0)*0.3;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = (m<1.5) ? vec3(0.0,1.0,0.0) : calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n        col = calcColor(m, pos, nor, ro, rd, rdx, rdy);\n\n\n        // lighting\n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.5, 0.4, -0.6) );\n        vec3  hal = normalize( lig-rd );\n\t\tfloat amb = sqrt(clamp( 0.5+0.5*nor.y, 0.0, 1.0 ));\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.2, 0.2, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n        \n        dif *= calcSoftshadow( pos, lig, 0.02, 2.5 );\n        dom *= calcSoftshadow( pos, ref, 0.02, 2.5 );\n\n\t\tfloat spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),16.0)*\n                    dif *\n                    (0.04 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 5.0 ));\n\n\t\tvec3 lin = vec3(0.0);\n        if(m < 2.5 && m > 1.5)\n        {   //Gallo: trick for skin color, make shadows more yellowish\n            //Skin\n            lin += mix(vec3(2.0, 0.574, 0.488) * 0.45 , col,  dif) * 2.0;\n            //exagerated fresnel like in 3D movie\n            lin += 3.0*fre*vec3(1.00,1.00,1.00)*occ;\n            lin += 1.80*dif*vec3(1.30,1.00,0.70);\n        }\n        else if(m > 2.5 && m < 3.5)\n    \t{ \t//White Hair\n        \tlin += mix(vec3(0.980, 0.980, 0.980) * 0.5, col,  dif);\n            lin += 0.5*fre*vec3(1.00,1.00,1.00)*occ;\n    \t}\n        else if(m > 4.5 && m < 5.5)\n        {\n            lin += 1.10*vec3(1.00,1.00,1.00);\n        }\n        else if(m > 26.5 && m < 27.5)\n        {\n            //Wood\n            lin += mix(vec3(0.980, 0.854, 0.268) * 0.25 , col,  dif) * 2.0;\n        }\n        else if(m > 27.5 && m < 28.5)\n        {\n            //Plunger\n            lin += mix(vec3(0.980, 0.054, 0.068) * 0.2 , col,  dif) * 2.0;\n        }\n        else \n        {\n        \tlin += 1.80*dif*vec3(1.30,1.00,0.70);\n        }\n        \n        if(m > 4.5 && m < 5.5)\n        {\n            col += 20.50*spe*vec3(1.10,0.90,0.70);\n        }\n        \n        lin += 0.55*amb*vec3(0.40,0.60,1.15)*occ;\n        if( m < 1.5 )\n        {\n        \tlin += 0.85*dom*vec3(0.40,0.60,1.30)*occ;\n        }\n        //lin += 0.55*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\t\tcol += 0.50*spe*vec3(1.10,0.90,0.70);\n\n        col = mix( col, vec3(0.7,0.7,0.9), 1.0-exp( -0.0001*t*t*t ) );\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = -20.0 + iTime*1.5;\n\n    // camera\t\n    vec3 ro = vec3( 1.6*cos(0.1*time + 12.0*mo.x),  0.5 + 2.0*mo.y, 1.6*sin(0.1*time + 12.0*mo.x) );\n    vec3 ta = vec3( 0.0, 0.4, 0.0 );\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n\n        // ray direction\n        vec3 rd = ca * normalize( vec3(p,2.0) );\n\n         // ray differentials\n        vec2 px = (-iResolution.xy+2.0*(fragCoord.xy+vec2(1.0,0.0)))/iResolution.y;\n        vec2 py = (-iResolution.xy+2.0*(fragCoord.xy+vec2(0.0,1.0)))/iResolution.y;\n        vec3 rdx = ca * normalize( vec3(px,2.0) );\n        vec3 rdy = ca * normalize( vec3(py,2.0) );\n        \n        // render\t\n        vec3 col = render( ro, rd, rdx, rdy );\n\n\t\t// gamma\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    \n    fragColor = vec4( tot, 1.0 );\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//Raymarching utility functions\n    \n\nconst vec3 X_AXIS = vec3(1,0,0);\nconst vec3 Y_AXIS = vec3(0,1,0);\nconst vec3 Z_AXIS = vec3(0,0,1);\n\n\n// Shortcut for 45-degrees rotation\nvoid pR45(inout vec2 p) {\n\tp = (p + vec2(p.y, -p.x))*sqrt(0.5);\n}\n\n// Repeat space along one axis. Use like this to repeat along the x axis:\n// <float cell = pMod1(p.x,5);> - using the return value is optional.\nfloat pMod1(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\n// The \"Columns\" flavour makes n-1 circular columns at a 45 degree angle:\nfloat fOpUnionColumns(float a, float b, float r, float n) {\n\tif ((a < r) && (b < r)) {\n\t\tvec2 p = vec2(a, b);\n\t\tfloat columnradius = r*sqrt(2.)/((n-1.)*2.+sqrt(2.));\n\t\tpR45(p);\n\t\tp.x -= sqrt(2.)/2.*r;\n\t\tp.x += columnradius*sqrt(2.);\n\t\tif (mod(n,2.) == 1.) {\n\t\t\tp.y += columnradius;\n\t\t}\n\t\t// At this point, we have turned 45 degrees and moved at a point on the\n\t\t// diagonal that we want to place the columns on.\n\t\t// Now, repeat the domain along this direction and place a circle.\n\t\tpMod1(p.y, columnradius*2.);\n\t\tfloat result = length(p) - columnradius;\n\t\tresult = min(result, p.x);\n\t\tresult = min(result, a);\n\t\treturn min(result, b);\n\t} else {\n\t\treturn min(a, b);\n\t}\n}\n\n// The \"Stairs\" flavour produces n-1 steps of a staircase:\n// much less stupid version by paniq\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2. * s)) - s)));\n}\n\n// first object gets a v-shaped engraving where it intersect the second\nfloat fOpEngrave(float a, float b, float r) {\n\treturn max(a, (a + r - abs(b))*sqrt(0.5));\n}\n\nfloat fOpIntersectionRound(float a, float b, float r) {\n\tvec2 u = max(vec2(r + a,r + b), vec2(0));\n\treturn min(-r, max (a, b)) + length(u);\n}\n\n// polynomial smooth min (k = 0.1);\nfloat smin2( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n\t\n// power smooth min (k = 8);\nfloat smin3( float a, float b, float k )\n{\n    a = pow( a, k ); b = pow( b, k );\n    return pow( (a*b)/(a+b), 1.0/k );\n}\n\n\n// exponential smooth min (k = 32);\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\n\n//------------------------------------------------------------------\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r ) // approximated\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n    \n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0)) - r\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb)\n{\n    p.x = abs(p.x);\n    float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n       length(p.xy - vec2(clamp(p.x, -k.z*h.x, k.z*h.x), h.x))*sign(p.y - h.x),\n       p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/(dot(ba,ba)), 0.1, 0.9 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdRoundCone( in vec3 p, in float r1, float r2, float h )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(q,vec2(-b,a));\n    \n    if( k < 0.0 ) return length(q) - r1;\n    if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n    return dot(q, vec2(a,b) ) - r1;\n}\n\nfloat dot2(in vec3 v ) {return dot(v,v);}\nfloat sdRoundCone(vec3 p, vec3 a, vec3 b, float r1, float r2)\n{\n    // sampling independent computations (only depend on shape)\n    vec3  ba = b - a;\n    float l2 = dot(ba,ba);\n    float rr = r1 - r2;\n    float a2 = l2 - rr*rr;\n    float il2 = 1.0/l2;\n    \n    // sampling dependant computations\n    vec3 pa = p - a;\n    float y = dot(pa,ba);\n    float z = y - l2;\n    float x2 = dot2( pa*l2 - ba*y );\n    float y2 = y*y*l2;\n    float z2 = z*z*l2;\n\n    // single square root!\n    float k = sign(rr)*rr*rr*x2;\n    if( sign(z)*a2*z2 > k ) return  sqrt(x2 + z2)        *il2 - r2;\n    if( sign(y)*a2*y2 < k ) return  sqrt(x2 + y2)        *il2 - r1;\n                            return (sqrt(x2*a2*il2)+y*rr)*il2 - r1;\n}\n\nfloat sdEquilateralTriangle(  in vec2 p )\n{\n    const float k = 1.73205;//sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x + k*p.y > 0.0 ) p = vec2( p.x - k*p.y, -k*p.x - p.y )/2.0;\n    p.x += 2.0 - 2.0*clamp( (p.x+2.0)/2.0, 0.0, 1.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    float d1 = q.z-h.y;\n    h.x *= 0.866025;\n    float d2 = sdEquilateralTriangle(p.xy/h.x)*h.x;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\n// vertical\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// arbitrary orientation\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 pa = p - a;\n    vec3 ba = b - a;\n    float baba = dot(ba,ba);\n    float paba = dot(pa,ba);\n\n    float x = length(pa*baba-ba*paba) - r*baba;\n    float y = abs(paba-baba*0.5)-baba*0.5;\n    float x2 = x*x;\n    float y2 = y*y*baba;\n    float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n    return sign(d)*sqrt(abs(d))/baba;\n}\n\n// rounded cylinder\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n    vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\n// vertical\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    float d1 = -q.y-c.z;\n    float d2 = max( dot(q,c.xy), q.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat sdCone( in vec3 p, in float h, in float r1, in float r2 )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    vec2 k1 = vec2(r2,h);\n    vec2 k2 = vec2(r2-r1,2.0*h);\n    vec2 ca = vec2(q.x-min(q.x,(q.y < 0.0)?r1:r2), abs(q.y)-h);\n    vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCone(vec3 p, vec3 a, vec3 b, float ra, float rb)\n{\n    float rba  = rb-ra;\n    float baba = dot(b-a,b-a);\n    float papa = dot(p-a,p-a);\n    float paba = dot(p-a,b-a)/baba;\n\n    float x = sqrt( papa - paba*paba*baba );\n\n    float cax = max(0.0,x-((paba<0.5)?ra:rb));\n    float cay = abs(paba-0.5)-0.5;\n\n    float k = rba*rba + baba;\n    float f = clamp( (rba*(x-ra)+paba*baba)/k, 0.0, 1.0 );\n\n    float cbx = x-ra - f*rba;\n    float cby = paba - f;\n    \n    float s = (cbx < 0.0 && cay < 0.0) ? -1.0 : 1.0;\n    \n    return s*sqrt( min(cax*cax + cay*cay*baba,\n                       cbx*cbx + cby*cby*baba) );\n}\n\n\n\nfloat sdOctahedron(vec3 p, float s)\n{\n    p = abs(p);\n    float m = p.x + p.y + p.z - s;\n\n    // exact distance\n    #if 0\n    vec3 o = min(3.0*p - m, 0.0);\n    o = max(6.0*p - m*2.0 - o*3.0 + (o.x+o.y+o.z), 0.0);\n    return length(p - s*o/(o.x+o.y+o.z));\n    #endif\n    \n    // exact distance\n    #if 1\n \tvec3 q;\n         if( 3.0*p.x < m ) q = p.xyz;\n    else if( 3.0*p.y < m ) q = p.yzx;\n    else if( 3.0*p.z < m ) q = p.zxy;\n    else return m*0.57735027;\n    float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n    return length(vec3(q.x,q.y-s+k,q.z-k)); \n    #endif\n    \n    // bound, not exact\n    #if 0\n\treturn m*0.57735027;\n    #endif\n}\n\n\n//------------------------------------------------------------------\n\n\n//------------------------------------------------------------------\nmat3 rotation(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return inverse(mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, \n \t\t\t\t\t\toc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  \n \t\t\t\t\t\toc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c));\n}\n\nmat2 rotation2D(float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    \n    return mat2(c, s, -s, c);\n}","name":"Common","description":"","type":"common"}]}