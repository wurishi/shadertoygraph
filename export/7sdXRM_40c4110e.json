{"ver":"0.1","info":{"id":"7sdXRM","date":"1632887111","viewed":52,"name":"soeca","username":"Cookie","description":"eca with second order rules","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["eca"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel0, coord).rgb;\n        \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float GRID_N = 400.;\nconst float PIXEL_SIZE = 1./ GRID_N;\n\nconst float rulesColWidth = 0.02; // col to display 02 rules\n\nint startRule = 110; // initial o1 rule\n\n#define ENABLE_O2 1\n#define AUDIO_AS_A_RULE 0\n\n// there are no chars, so o2 rules maps as follows: {0:' '}, {1:'<'}, {2:'>'}, {3:'+'}, {4:'-'}, {5:'|'}, {6:'!'}\nconst int o2N = 4;\nconst int o2Rules[o2N] = int[](4, 5, 3, 6); // o2 rules !! DOES NOT APPLIED WHEN SELECTED OPTION AUDIO_AS_A_RULE\n\n\n// first row init types\n#define AUDIO_AS_AN_INPUT 0\n#define CENTER 1\n#define ALTER 0\n\n\n#define RYTHMIC_BAR 1\n\n// how to init first line\nfloat firstLine(vec2 coord)\n{\n#if AUDIO_AS_AN_INPUT\n\n    // sample prev value if delayed\n    const float samplingRate = 2.; \n    if(iFrame % int(GRID_N/samplingRate) > 0) // to have dalay by all lines for cycle use %\n        return texture(iChannel1, coord).r;\n\n    // an actual audio sample\n    return float(texture(iChannel0, coord).r > 0.5 );\n\n#elif CENTER\n    return float(floor(coord.x * GRID_N) == floor(GRID_N/2.));\n#elif ALTER\n    return float(int(coord.x * GRID_N) & 1);\n#endif\n    return 0.;\n}\n\n// sample 3 cells in 'pixel' as binary 1 or 0\nivec3 sampleNeighboursBool(sampler2D sampler, vec2 coord)\n{\n   float th = 0.9;\n   return ivec3(texture(sampler, coord - vec2(PIXEL_SIZE, 0)).r > th, \n                texture(sampler, coord).r > th,\n                texture(sampler, coord + vec2(PIXEL_SIZE, 0)).r > th);\n}\n\n// o1 rule\nint applyO1Rule(ivec3 neigh, int rule)\n{\n    int bitN = neigh.z | neigh.y << 1 | neigh.x << 2;\n    return (rule >> bitN) & 1;\n}\n\n// -------- o2 rules ---------\nconst int ACTIVE_BITS = 8;\nint circShift(int val, int shift)\n{\n    if(shift < 0)\n        val = (val << (ACTIVE_BITS + shift)) | (val >> shift);\n    else \n        val = (val >> (ACTIVE_BITS - shift)) | (val << shift);\n    \n    return val & ~(~0 << ACTIVE_BITS);\n}\nint circAdd(int val, int n)\n{\n   val += n;\n   int limit = 256;\n   if (val >= limit)\n       val -= limit - 1;\n   else if(val < 0)\n       val = limit + val;\n   return val;\n}\n\nint reverse(int val) {\n   val =  (val & 0xF0) >> 4 | (val & 0x0F) << 4;\n   val =  (val & 0xCC) >> 2 | (val & 0x33) << 2;\n   return (val & 0xAA) >> 1 | (val & 0x55) << 1;\n}\n\nint bitNot(int val) {\n    return ~val;\n}\n// ----------------------------------\n\n// rule selection\nvoid applyO2Rule(inout int o1Rule, int o2Rule)\n{\n    switch (o2Rule) {\n       case 1: // '<'\n           o1Rule = circShift(o1Rule,  1); break;\n       case 2: // '>'\n           o1Rule = circShift(o1Rule, -1); break;\n       case 3: // '+'\n           o1Rule = circAdd(o1Rule, 1);  break;\n       case 4: // '-'\n           o1Rule = circAdd(o1Rule, -1);  break;\n       case 5: // '|'\n           o1Rule = reverse(o1Rule);  break;\n       case 6: // '!'\n           o1Rule = bitNot(o1Rule);  break;\n       }\n}\n\nint applyAllO2Rules(int o1Rule)\n{\n#if ! AUDIO_AS_A_RULE\n   for(int i = 0; i < o2N; i++){\n       applyO2Rule(o1Rule, o2Rules[i]);\n   }\n#endif\n   return o1Rule;\n}\n\n// sample transformed o1 rule from texture\nint getRule(vec2 coord, float line_h)\n{\n#if AUDIO_AS_A_RULE\n    //sample prev value if delayed\n    const float audioSamplingRate = floor(GRID_N/1.8);\n    float intPart;\n    if( modf(float(iFrame) / audioSamplingRate, intPart) > 1./audioSamplingRate)\n        return int(texture(iChannel1, vec2(0., coord.y)).r * 255.);\n        \n    // rule sampling from audio\n    return int(texture(iChannel0, vec2(0., coord.y)).r * 255.);\n#endif\n    // normalized float texture (unfortunately shadertoy doesn't have integers buff)\n    return int(texture(iChannel1, vec2(0., coord.y + line_h)).r * 255.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ratio = iResolution.x/iResolution.y;\n    vec2 pixelsN = iResolution.xy /  vec2(GRID_N, GRID_N/ratio);\n\n    // center coord (to avoid sampling errors on edges)\n    fragCoord = floor(fragCoord/pixelsN) * pixelsN + pixelsN/2.;\n    \n    vec2 coord = fragCoord/iResolution.xy;\n    \n    // line height (ratio correction to match x size)\n    float line_h = pixelsN.y/iResolution.y;\n    \n    int rule = startRule;\n  \n #if ENABLE_O2\n \n    // sample precalculated rule on prev line\n    if(fragCoord.y < iResolution.y - pixelsN.y)\n        rule = getRule(coord, line_h);\n    \n    // store o2 rule for the next step \n    if(coord.x < rulesColWidth){\n        int nextRule = rule;\n        if(fragCoord.y < iResolution.y - pixelsN.y)\n            nextRule = applyAllO2Rules(nextRule);\n        // store rule in r component and color code g and b for better color visualization\n        fragColor = vec4( vec3(nextRule, nextRule>>4, nextRule&0xF)/vec3(255., 16., 16.), 1.);\n        return;\n    }\n    \n    // skip pixel if next to the rules column\n    if(coord.x < rulesColWidth + PIXEL_SIZE){\n        return;\n    }\n    \n #endif\n    \n    // init first line \n    if(fragCoord.y > iResolution.y - pixelsN.y)\n    {\n        float p = firstLine(coord);\n        fragColor = vec4(p, p, p, 1.); // todo: rules for fancy colors\n        return;\n    }\n    \n    // cells for o1\n    ivec3 col = sampleNeighboursBool(iChannel1, coord + vec2(0, pixelsN.y/iResolution.y));\n    int p = applyO1Rule(col, rule);\n    \n    fragColor = vec4(vec3(p), 1.); // todo: rules for fancy colors\n \n #if RYTHMIC_BAR\n     float samples = 40.;\n     float ampl = texture(iChannel0, vec2(floor(coord.y * samples)/samples, 0.)).r;\n     \n     if(fragCoord.x/iResolution.x > 0.97)\n         fragColor.rgb = mix(vec3(0, 0, 1), vec3(0,1,0), ampl);\n #endif\n}\n","name":"Buffer A","description":"","type":"buffer"}]}