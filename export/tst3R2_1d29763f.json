{"ver":"0.1","info":{"id":"tst3R2","date":"1568927770","viewed":571,"name":"Word Clock","username":"AntoineC","description":"Display current time. The corner dots indicate the number of minutes to add to the written time. Drag mouse to change time.","likes":28,"published":1,"flags":0,"usePreview":0,"tags":["2d","text","clock"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ----------------------------------------------------------------------------------------\n//\t\"Word Clock\" by Antoine Clappier - Sep 2019\n//\n//\tLicensed under:\n//  A Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\n//\thttp://creativecommons.org/licenses/by-nc-sa/4.0/\n// ----------------------------------------------------------------------------------------\n\n#define Tau 6.28318530718\n\nconst int[] ClockChars = int[]\n(\n\t0x49, 0x54, 0x4a, 0x49, 0x53, 0x4f, 0x58, 0x42, 0x54, 0x45, 0x4e, \n\t0x48, 0x41, 0x4c, 0x46, 0x51, 0x53, 0x48, 0x41, 0x44, 0x45, 0x52, \n\t0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x57, 0x54, 0x4f, 0x59, \n\t0x54, 0x57, 0x45, 0x4e, 0x54, 0x59, 0x2d, 0x46, 0x49, 0x56, 0x45, \n\t0x50, 0x41, 0x53, 0x54, 0x4c, 0x54, 0x4f, 0x56, 0x54, 0x57, 0x4f, \n\t0x4f, 0x4e, 0x45, 0x53, 0x49, 0x58, 0x54, 0x48, 0x52, 0x45, 0x45, \n\t0x53, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, \n\t0x54, 0x45, 0x4e, 0x46, 0x4f, 0x55, 0x52, 0x4e, 0x49, 0x4e, 0x45, \n\t0x45, 0x4c, 0x45, 0x56, 0x45, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x54, \n\t0x46, 0x49, 0x56, 0x45, 0x41, 0x4f, 0x43, 0x4c, 0x4f, 0x43, 0x4b\n);\n\nconst int[] Quinques = int[] ( 0x000, 0x734, 0x803, 0x027, 0x036, 0x03b, 0x014 );\nconst int[] Hours = int[] ( 0x566, 0x053, 0x843, 0x655, 0x374, 0x094, 0x353, 0x065, 0x685, 0x774, 0x073, 0x086 );\nconst int It = 0x002;\nconst int Is = 0x302;\nconst int Shader = 0x516;\nconst int Toy = 0x823;\nconst int To = 0x542;\nconst int Past = 0x044;\nconst int Oclock = 0x596;\n\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\n// Draw an ascii glyph:\nfloat Glyph(int char, vec2 uv)\n{\n    if(any(lessThan(vec4(uv,1,1), vec4(0,0,uv))))\n    {\n        return 0.0;\n    }\n    \n    float g = texture(iChannel0, 0.0625*(uv + vec2(char - char/16*16,15 - char/16))).w;\n    return smoothstep(0.51, 0.51 - 20.0/(1.0*iResolution.y) , g);\n}\n\n\n\nfloat WordToChar(int x, int y, int word)\n{\n    int wordX = word >> 8;\n    int wordY = (word >> 4) & 0xF;\n    int wordLen = word & 0xF;\n\n    return (y == wordY) && ((x >= wordX) && (x < wordX + wordLen)) ? 1.0 : 0.0;\n}\n\n\nfloat Led(int tx, int ty, int hour, int minute)\n{\n    \n    int quinque = minute / 5;\n    \n    // Convert time to leds:\n    float pulse1 = (4.0 + cos(Tau*iTime))/4.0;\n    float pulse2 = mod(iDate.w, 60.0);\n    pulse2 = pulse2 < 0.5 ? 0.4*sin(Tau*pulse2/1.0) : 0.0;\n        \n    float led = 0.0;\n    led += WordToChar(tx, ty, quinque <  7 ? Quinques[quinque] : Quinques[12 - quinque]);\n    led += WordToChar(tx, ty, quinque == 0 ? 0 : (quinque < 7 ? Past : To));\n    led += WordToChar(tx, ty, quinque <  7 ? Hours[hour % 12] : Hours[(hour+1) % 12]);\n    led += WordToChar(tx, ty, quinque == 0 ? Oclock : 0);\n    led += WordToChar(tx, ty, It    ) * pulse1;\n    led += WordToChar(tx, ty, Is    ) * pulse1;\n    led += WordToChar(tx, ty, Shader) * pulse2;\n    led += WordToChar(tx, ty, Toy   ) * pulse2;\n    \n    return led;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Tiling:\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    uv *= 1.35;\n    \n    vec2 tf    = vec2(11.0, 10.0)*(uv + vec2(0.5));\n    vec2 ti    = floor(tf);\n         tf   -= ti + vec2(0.5);\n    vec2 ratio = vec2(1.0, 11.0/10.0);\n    \n    int tx     = int(ti.x);\n    int ty     = int(9.0-ti.y);\n    int index  = tx + 11*ty;\n    \n    float du   = 11.0/(1.0*iResolution.y);\n    \n    // Time:\n    float time    = iMouse.z > 0.0 ? 12.0*3600.0*iMouse.x/iResolution.x : iDate.w;\n    int   hour    = int(time / 3600.0);\n    int   minute  = int(time / 60.0  ) % 60;\n    int   quinque = minute / 5;\n    \n    // Convert time to leds:\n    float led = Led(tx, ty, hour, minute);\n    \n    // Clock:\n    float shape0 = step(1.0, step(ti.x, -1.0)+step(11.0, ti.x) + step(ti.y, -1.0)+step(10.0, ti.y));\n    float shape1 = step(1.0, step(ti.x, -2.0)+step(12.0, ti.x) + step(ti.y, -2.0)+step(11.0, ti.y));\n    \n    // Glyph:\n    float scale = 1.0;\n    float g = Glyph(ClockChars[index], vec2(0.5) + scale*tf*ratio);\n    g *= 1.0-shape0;\n    \n    // Minutes leds:\n    int min5 = minute % 5;\n    float mLed = 0.0;\n    mLed += (tx == 11 && ty == -1 && min5 > 0) ? smoothstep(0.10, 0.10-du, length(tf*ratio)) : 0.0;\n    mLed += (tx == 11 && ty == 10 && min5 > 1) ? smoothstep(0.10, 0.10-du, length(tf*ratio)) : 0.0;\n    mLed += (tx == -1 && ty == 10 && min5 > 2) ? smoothstep(0.10, 0.10-du, length(tf*ratio)) : 0.0;\n    mLed += (tx == -1 && ty == -1 && min5 > 3) ? smoothstep(0.10, 0.10-du, length(tf*ratio)) : 0.0;\n   \n    \n    // Adapted from: \"wave greek frieze (165 chars)\" by FabriceNeyret2\n    vec3 back;\n    back = 0.6*vec3(0.4,0.6,0.7)*(1.0-0.4*length( 1.9*uv ));\n    vec2 suv = 8.0*(uv + 1.0);\n    suv = fract(suv) - 0.5;\n    float a = 12.0 * max(0.0, 1.0 - 2.0*length(suv));\n    suv *= mat2(cos(a), -sin(a), sin(a), cos(a));\n\tback *= 0.88 + 0.12*smoothstep(-1.,1.,suv.y/fwidth(uv.y));\n    back *= 0.1+0.9*smoothstep(0.0, 0.15, sdBox(uv+vec2(-0.05, 0.05), vec2(0.5)));\n    back *= 1.7;\n    \n    // Shading:\n    float spec = smoothstep(0.0, 1./iResolution.y, dot(uv+vec2(1.0, -0.02), vec2(-0.15, 1.0)));\n    spec *= 1.0-pow(min(length(0.6*(uv+vec2(1.0, -0.0))), 1.0), 2.0);\n    spec *= 0.07;\n\n    \n    vec3 ledColor = vec3(1.0, 235.0/255.0, 180.0/255.0);\n    vec3 ledLight = 1.5*(1.0-scale*1.5*length(tf))*ledColor;\n    vec3 clock = g*mix(vec3(0.09), ledLight, led + mLed);\n\tclock += 0.8*mLed*ledColor + spec*vec3(0.5, 0.8, 0.99);\n    \n    \n    // Leaks:\n    float leak = 0.0;\n    leak += g*Led(tx, ty+1, hour, minute)*(1.0-min(1.0,scale*0.9*length(tf+vec2(0.0, 1.0))));\n    leak += g*Led(tx, ty-1, hour, minute)*(1.0-min(1.0,scale*0.9*length(tf+vec2(0.0, -1.0))));\n    leak += g*Led(tx+1, ty, hour, minute)*(1.0-min(1.0,scale*0.9*length(tf+vec2(-1.0, 0.0))));\n    leak += g*Led(tx-1, ty, hour, minute)*(1.0-min(1.0,scale*0.9*length(tf+vec2(1.0, 0.0))));\n    clock += 0.22*leak*ledColor;\n    \n    vec3 col = mix(clock, back, shape1);\n \n        \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}