{"ver":"0.1","info":{"id":"lcsBWH","date":"1723728385","viewed":25,"name":"Lines intersection experiments","username":"dsd","description":"The left bottom circle is mouse controlled. Blue circle marks intersection between two lines.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["circles","lines","rotations","intrsections"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float asr = 16./9.;\n\nvec2 xy;\nvec3 col;\n\nvec2 nx(vec2 v) {\n    return vec2(v.x*asr, v.y);\n}\n\nvoid smst(float var_to_compare, float var_compare_with, vec3 var_col) {\n    float d = fwidth(var_to_compare);\n    float a = smoothstep(var_to_compare - d, var_to_compare + d, var_compare_with);\n    col = mix(col, var_col, a);\n}\n\nvoid draw_circ(vec2 p, float r, vec3 c) {\n    smst(length(p - xy), r, c);\n}\n\nvoid draw_lst_circ(vec2 ps[4], float r, vec3 c) {\n    for(int i = 0; i < ps.length(); i++) \n        draw_circ(ps[i], r, c);\n}\n\nvoid draw_line(vec2 p1, vec2 p2, float thick, vec3 c) {\n    vec2 xyp = xy - p1, pp = p2 - p1;\n    float t = dot(xyp, pp)/dot(pp, pp);\n    vec2 o = p1 + pp*clamp(t, 0., 1.);\n    smst (length(xy - o), thick/2., c);\n}\n\n\nfloat det(vec2 v1, vec2 v2) {\n    return v1.x*v2.y - v1.y*v2.x;\n}\n\n\nvoid p_cross(vec2 ps[4], float r, vec3 p_col) {\n    vec2\n        p02 = ps[0] - ps[2],\n        p13 = ps[1] - ps[3];\n        \n    float d = det(p02, p13);  //equals 0 if lines are parallel\n        \n    if (d != 0.) {\n        float\n            d02 = det(ps[0], ps[2]),\n            d13 = det(ps[1], ps[3]),\n            cx = d02*p13.x - d13*p02.x,\n            cy = d02*p13.y - d13*p02.y,\n            \n            len_p20 = length(ps[2] - ps[0]),\n            len_p30 = length(ps[3] - ps[1]);\n        \n        vec2 c = vec2(cx, cy)/d;            //cross point\n        \n        if (length(c - ps[0]) < len_p20     //check if cross point in \n            && length(ps[2] - c) < len_p20  //borders of two lines\n            && length(c - ps[1]) < len_p30\n            && length(ps[3] - c) < len_p30)  \n                draw_circ(c, r, p_col);\n    }\n}\n\nvec2 center(vec2 p1, vec2 p2) {\n    return (p1 + p2)/2.;\n}\n\nvec2 rotate(vec2 p, vec2 c, float f) {\n    mat2 r_mat = mat2(cos(f), -sin(f), sin(f), cos(f));\n    return c + (p - c)*r_mat;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    xy = nx(uv);\n\n    col = vec3(uv.x);\n    \n    float thick = .012;\n    vec3 l_col = vec3(0., 1., 0.);\n\n    float rad = .03;\n    vec3 p_col = vec3(1., 0., 1.);\n    \n    vec2 points[4];\n    points[0] = nx(iMouse.xy/iResolution.xy);\n    points[1] = nx(vec2(.3, .7));\n    points[2] = nx(vec2(.9, .8));  \n    points[3] = nx(vec2(.7, .3)); \n    \n    vec2 cent_p13 = center(points[1], points[3]);\n    float rf = iTime/2.;\n    \n    points[1] = rotate(points[1], cent_p13, rf);\n    points[3] = rotate(points[3], cent_p13, rf);\n    \n    draw_line(points[0], points[2], thick, l_col);\n    draw_line(points[1], points[3], thick, l_col);\n    \n    draw_lst_circ(points, rad, p_col);\n    \n    p_cross(points, rad, vec3(0., 0., 1.));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}