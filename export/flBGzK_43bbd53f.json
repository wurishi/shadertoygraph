{"ver":"0.1","info":{"id":"flBGzK","date":"1624216197","viewed":164,"name":"A Remote Scene","username":"icezee","description":"A scene to demo texture and displacement. To read more:\nhttps://towardsdatascience.com/a-random-walk-in-real-time-computer-graphics-6f4315537464?sk=8913af23f08a8d2ddc928907f0f88cb1","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["learn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * A Remote Scene \n * a simple technical exercise for texture and displacement\n * icezee 06.19.2021\n */\n\n// Most utility functions are from https://iquilezles.org/\n\n\n// Basic utility functions (sdfs, noises, shaping functions)\n// and also the camera setup which is shaded between the\n// background rendering code (\"Buffer A\" tab) and the character\n// rendering code (\"Image\" tab)\n\n\n// \"p\" point apply texture to\n// \"n\" normal at \"p\"\n// \"k\" controls the sharpness of the blending in the\n//     transitions areas.\n// \"s\" texture sampler\nvec4 boxmap( in sampler2D s, in vec3 p, in vec3 n, in float k )\n{\n    // project+fetch\n\tvec4 x = texture( s, p.yz );\n\tvec4 y = texture( s, p.zx );\n\tvec4 z = texture( s, p.xy );\n    \n    // and blend\n    vec3 m = pow( abs(n), vec3(k) );\n\treturn (x*m.x + y*m.y + z*m.z) / (m.x + m.y + m.z);\n}\n\n\nfloat smin( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return min(a, b) - h*h*0.25/k;\n}\nfloat smax( float a, float b, float k )\n{\n    k *= 1.4;\n    float h = max(k-abs(a-b),0.0);\n    return max(a, b) + h*h*h/(6.0*k*k);\n}\nfloat noise1f( sampler2D tex, in vec2 x )\n{\n    return texture(tex,(x+0.5)/64.0).x;\n}\nfloat fbm1f( sampler2D tex, in vec2 x )\n{\n    float f = 0.0;\n    f += 0.5000*noise1f(tex,x); x*=2.01;\n    f += 0.2500*noise1f(tex,x); x*=2.01;\n    f += 0.1250*noise1f(tex,x); x*=2.01;\n    f += 0.0625*noise1f(tex,x);\n    f = 2.0*f-0.9375;\n    return f;\n}\n\nfloat map( in vec3 p ) \n{\n    float d = length(p) - 0.25;\n    float d2 = length(p - vec3(0.35,-0.12,0.35)) - 0.4;\n    float d3 = length(p - vec3(0.45, 0.3, 0.25)) - 0.35;\n\n    \n    d = smin(d, d2, 0.23);\n    d = smax(d, -d3, 0.06);\n    float d_ground = p.y + 0.25;\n        \n    float noi = fbm1f(iChannel1, 5.*p.xz);\n    d_ground -= 0.1*noi;\n\n    d = smin(d, d_ground,0.15);\n    \n    return d;\n}\n\n\nvec3 calcNormal( in vec3 pos ) \n{\n    vec2 e = vec2(0.0001,0.0);\n    return normalize( \n        vec3(map(pos+e.xyy)-map(pos-e.xyy),\n             map(pos+e.yxy)-map(pos-e.yxy),\n             map(pos+e.yyx)-map(pos-e.yyx)) \n    );\n    \n}\n\nfloat castRay( in vec3 ro, vec3 rd )\n{\n    float t = 0.0;\n    for( int i=0; i<100; i++)\n    {\n        vec3 pos = ro + t*rd;\n        \n        float h = map(pos);\n        if(h<0.001) break;\n        t += h;\n        if(t>20.0) break;\n    }\n    if(t>20.0) t=-1.0;\n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n\n    //float an = 0.1*iTime;\n    float an = 10.0*iMouse.x/iResolution.x;\n\n    vec3 ro = vec3(1.2*sin(an),0.126,1.2*cos(an));\n    vec3 ta = vec3(-0.15,0.0,0.0);\n    \n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0,1,0)) );\n    vec3 vv = normalize( cross(uu,ww) );\n    \n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n   \n\n\n    vec3 col = vec3(0.465,0.75,0.99) - 0.7*rd.y;\n    //    vec3 col = 1.2*vec3(0.3,0.65,0.75) -rd.y;// max(rd.y,0.0)*0.5;\n\n    col = mix( col, vec3(0.7,0.75,0.8), exp(-10.0*rd.y) );\n    float t = castRay( ro, rd );\n    \n    if( t>0.0) \n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n        \n        // \"normal white\" material should be around 0.2 gray\n        //vec3 mate = vec3(0.2,0.2,0.2);\n        \n        vec3 mate = boxmap(iChannel0, pos * 2.9, nor, 2.0).xyz;\n        float noi = fbm1f(iChannel1, .01*pos.xz);\n        mate = 0.85*mate + 0.15*noi;\n        \n        \n        // lighting\n        vec3 sun_dir = normalize( vec3(0.8,0.4,0.2) );\n        float sun_dif = clamp( dot(nor, sun_dir), 0.0,1.0 );\n        float sun_sha = step(castRay( pos+nor*0.001, sun_dir ), 0.0);\n        float sky_dif = clamp( 0.5 + 0.5*dot(nor, vec3(0.0,1.0,0.0)), 0.0,1.0 );\n        float bou_dif = clamp( 0.5 + 0.5*dot(nor, vec3(0.0,-1.0,0.0)), 0.0,1.0 );\n        \n        // key light ~= 10\n        // fill light ~= 1\n        col  = mate*vec3(7.0,5.0,3.0)*sun_dif*sun_sha *0.25;\n        col += mate*vec3(0.5,0.8,0.9)*sky_dif;\n        col += mate*vec3(0.7,0.3,0.2)*bou_dif;\n    }\n    \n    col = pow( col, vec3(0.4545) );\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}