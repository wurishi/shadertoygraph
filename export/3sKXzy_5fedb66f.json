{"ver":"0.1","info":{"id":"3sKXzy","date":"1574326393","viewed":857,"name":"the flag of Romania - 002","username":"catafest","description":"the next step into the learning area with the flag:\n- the shadertoy has defined iResolution and now we can use iTime;\n- mathematical domain established by UV can be modified with glsl and mathematical functions;\n- see comments from source code\n","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["flag","romania","catafest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// learning process area step by step \n// the gl_FragColor is a vec4 type of float values in the range 0 to 1.\n// because the values are from 0 to 1  this can used in many ways with for domain and range\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // define a vec2 and uv can be divide to create waves \n    // use this to see the difference \n    // vec2 valul = vec2(0.01,1.0);\n    vec2 valul = vec2(0.5,1.0);\n    // define a vec2 this vector will be the vector of shadow\n    vec2 unghi_valul = vec2(0.5,1.0);\n    // this float will speed the animation with iTime\n    float viteza = 3.0;\n    // with the dot we can calculate the dot product of two vectors and result can be a shadow\n    // the result of unghi can be changed when change the vectors and vectors math rules\n    float unghi = dot(uv/valul, unghi_valul) - iTime * viteza;\n    // the output can be used with sin to create a shadow wave\n    // fill the screen with red\n    fragColor = vec4(1,0,0,0) * sin(unghi);\n    // fill the 2/3 of size with yellow color\n    if(uv.x<(1.0/1.5))\n    fragColor = vec4(1,1,0,0)  * sin(unghi);\n    // fill the last 1/3 with the blue color \n    if(uv.x<1.0/3.0)\n    fragColor = vec4(0,0,1,0)  * sin(unghi);\n}\n","name":"Image","description":"","type":"image"}]}