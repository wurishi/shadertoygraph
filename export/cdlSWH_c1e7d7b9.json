{"ver":"0.1","info":{"id":"cdlSWH","date":"1668945535","viewed":96,"name":"Learning-circles","username":"codingbutter","description":"playing with circles","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["circles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 500\n#define MAX_DIST 150.\n#define SURF_DIST .0005\nconst vec4[4] MATERIALS = vec4[4](\n    vec4(vec3(.2),1.), //BASE\n    vec4(vec3(0,.5,0),.99),//BARS\n    vec4(vec3(1,.7,.3),.99),//BALLS\n    vec4(vec3(0,0,.5),.3)//LINE\n);\nconst int MAT_BASE=0;\nconst int MAT_BARS=1;\nconst int MAT_BALL=2;\nconst int MAT_LINE=3;\n\nconst float lightStr = .002;\nconst float lightDist =24.;\nvec4 lights[4] = vec4[4](\n   vec4(0,lightDist,-lightDist,lightStr),\n   vec4(0,lightDist,lightDist,lightStr),\n   vec4(0,lightDist,lightDist,lightStr),\n   vec4(0,lightDist,-lightDist,lightStr)\n);\nfloat lerp(float a, float b, float t){\n    return a + (b-a) * t;\n}\n   \n\nmat2 Rot(float a){\n    float s= sin(a);\n    float c = cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat rand(float co) { \n    return fract(sin(co*(91.2358)) * 47453.5453);\n}\n\nfloat DistLine(vec3 ro, vec3 rd, vec3 p){\n    return length(cross(p-ro,rd))/length(rd);\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r){\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t= dot(ab,ap) / dot(ab,ab);\n    t = clamp(t,0.,1.);\n    \n    vec3 c = a + t*ab;\n    \n    return length(p-c)-r;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r){\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t= dot(ab,ap) / dot(ab,ab);\n    //t = clamp(t,0.,1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x,y),0.));\n    float i = min(max(x,y),0.);\n    return e+i;\n}\n\nfloat sdTorus(vec3 p, vec2 r){\n    float x = length(p.xz)-r.x;\n    return length(vec2(x,p.y))-r.y;\n}\n\nfloat sdBox(vec3 p, vec3 s){\n    p = abs(p)-s;\n    return length(max(p,0.))+min(max(p.x,max(p.y,p.z)),0.);\n}\n\nfloat sdBox(vec2 p, vec2 s){\n    p = abs(p)-s;\n    return length(max(p,0.))+min(max(p.x,p.y),0.);\n}\n\nfloat dSphere(vec3 p,vec4 s){\n    return length(p-s.xyz)-s.w;\n}\n\nfloat sdLineSeg(vec3 p, vec3 a, vec3 b){\n    vec3 ap = p-a,ab=b-a;\n    float t = clamp(dot(ap,ab)/dot(ab,ab),0.,1.);\n    vec3 c = a + ab*t;\n    return length(p-c);\n}\n\nvec2 sdBall(vec3 p,float radius,float a){\n    p.y -=1.01;\n    p.xy *= Rot(a);\n    p.y +=1.01;\n    float ball =  length(p)-radius;\n    float ring = length(vec2(length(p.xy-vec2(0.,.15))-.05,p.z))-.01;\n    p.z = abs(p.z);\n    float line = sdLineSeg(p,vec3(0,.15,0),vec3(0,1.01,.4))-.005;\n    ball = min(ball,ring);\n    float d = min(ball,line);\n    return vec2(d,d==ball?MAT_BALL:MAT_LINE);\n}\n\nvec2 Min(vec2 a,vec2 b){\n    return a.x<b.x?a:b;\n}\n\nvec2 GetDist(vec3 p){\n\n   float a = sin(iTime*4.)*1.2;\n   float base = sdBox(p,vec3(1,.1,.5))-.1;\n   base = max(base,-p.y);\n   float bar = length(vec2(sdBox(p.xy,vec2(.8,1.4))-.15,abs(p.z)-.4))-.04;\n   float d = min(base,bar);\n   float ballSize = .15;\n   float moveD = ballSize*2.05;\n   float midA = a*.03; \n   vec2 b1 = sdBall(p-vec3(-moveD*2.,.5,0),ballSize,max(0.,a)),\n   b2 = sdBall(p-vec3(-moveD,.5,0),ballSize,max(0.,midA*1.5)), \n   b3 = sdBall(p-vec3(0,.5,0),ballSize,midA), \n   b4 = sdBall(p-vec3(moveD,.5,0),ballSize,min(0.,midA*1.5)),\n   b5 = sdBall(p-vec3(moveD*2.,.5,0),ballSize,min(0.,a));\n   vec2 ball = Min(b1,Min(b2,Min(b3,Min(b4,b5))));\n   d = min(ball.x,d);\n   d = max(d,-p.y);\n   \n   int mat = -1;\n   if(d==base)\n       mat = MAT_BASE;\n   else if(d==bar)\n       mat = MAT_BARS;\n   else if(d==ball.x)\n       mat = int(ball.y);\n\n    \n    return vec2(d,mat);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    int mat = -1;\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        vec2 objD = GetDist(p);\n        mat = int(objD.y);\n        dO += objD.x;\n        if(dO>MAX_DIST || objD.x<SURF_DIST) break;\n    }\n    \n    return vec2(dO,mat);\n}\n\nvec3 GetNormal(vec3 p){\n    float d = GetDist(p).x;\n    vec2 e = vec2(.01,0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x ,\n        GetDist(p-e.yxy).x ,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvoid addLight(inout float dif,vec3 p,vec4 light) {\n    \n    vec3 lightPos= light.xyz;\n    lightPos.xz *= Rot(iTime*.1);\n   \n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float sd = dot(n, l);\n            \n    float d = RayMarch(p+n*SURF_DIST*1.2,l).x;\n\n    if(d<length(lightPos-p)){\n         sd *= .1;\n    }\n    \n    dif += sd*.5;\n    \n}\n\nvec3 camera(vec2 uv,vec3 ro,vec3 lookat,float zoom){\n    vec3 f = normalize(lookat-ro);\n    vec3 r = cross(vec3(0.,1.,0.), f);\n    vec3 u = cross(f,r);\n    vec3 c = ro + f*zoom;\n    vec3 i = c + uv.x*r + uv.y*u;\n    return normalize(i-ro);\n}\n\nvec3 Render(inout vec3 ro,inout vec3 rd,inout vec3 ref){\n    vec3 col = texture(iChannel0,rd).rgb;\n\n    vec2 dMat = RayMarch(ro,rd);\n   \n    ref = vec3(0);\n    if(dMat.x<MAX_DIST){\n        vec3 p = ro + rd * dMat.x;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd,n);\n        float fresnel = pow(clamp(1.-dot(n,-rd),0.,1.),3.);\n        \n        float lighting = 0.;\n        for(int i=0;i<lights.length();i++){\n            addLight(lighting,p,lights[i]);\n            \n        }\n        col += lighting;\n        vec4 mat = MATERIALS[int(dMat.y)];\n        vec3 dif = mat.xyz * lighting;\n        float metalness = mat.w;\n        col = dif;\n        ref = vec3(dif)*(metalness);\n        if(int(dMat.y)==MAT_BASE)\n            ref = vec3(mix(.01,.5,fresnel));\n        \n        ro = p+n*SURF_DIST*3.;\n        rd = r;\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.y-.5;\n    if(iMouse.xy==vec2(0)){\n        m = vec2(0);\n    }\n    vec3 ro = vec3(0,2,2);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(iTime*.2);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    float zoom = 1.4;\n    vec3 lookat = vec3(0.,.5,0.),\n    rd = camera(uv,ro,lookat,zoom),\n    ref = vec3(0),\n    fil = vec3(1),\n    \n    col = Render(ro,rd,ref);\n\n    const int NUM_BOUNCES = 12;\n        for(int i=0;i<NUM_BOUNCES;i++){\n            fil *= ref;\n            vec3 bounce = fil*Render(ro,rd,ref);\n            col+=bounce;\n        }\n\n    col = pow(col,vec3(.4545));\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}