{"ver":"0.1","info":{"id":"7tyXWW","date":"1640930018","viewed":204,"name":"Voronoi with JFA","username":"coposuke","description":"Voronoi with Jump Flooding Algorithm.","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["voronoi","jump","flooding","jfa"],"hasliked":0,"parentid":"7ttSzr","parentname":"Jump Flooding in 2Frame"},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec4 getcolor(vec2 fragCoord, sampler2D buffer, vec2 iResolution)\n{\n    vec3 seed = jumpFlooding_ZW(fragCoord, buffer, iResolution.xy, 1.0);\n    \n    // center\n    vec4 color = vec4(0.0);\n    float count = 0.0;\n    const float RANGE = 10.0;\n    for(float x = -RANGE; x <= RANGE; x++)\n    {\n        for(float y = -RANGE; y <= RANGE; y++)\n        {\n            vec2 luv = seed.xy + vec2(x, y) / iResolution.xy;\n            float e = step(1e-3, texture(iChannel1, luv).y);\n            count = 0.0 < e ? count + 1.0 : count;\n            color = 0.0 < e ? color + texture(iChannel2, luv) : color;\n        }\n    }\n    \n    return color / count;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0.0);\n    color += getcolor(fragCoord, iChannel0, iResolution.xy);\n    \n    bool useAA = false;\n    if(useAA)\n    {\n        // AA\n        for(float x = -1.0; x <= 1.0; x+=2.0)\n        {\n            for(float y = -1.0; y <= 1.0; y+=2.0)\n            {\n                vec2 uv = fragCoord + vec2(x, y);\n                color += getcolor(uv, iChannel0, iResolution.xy);\n            }\n        }\n\n        fragColor = color / 5.0;\n    }\n    else\n    {\n        // Non AA\n        fragColor = color;\n    }\n    \n    // debug show circle\n    //fragColor.rg += texture(iChannel1, fragCoord / iResolution.xy).rg;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float STEP = 8.0;\nconst float ITER = 1.0;\n\nvec3 jumpFlooding_Compare(vec2 seed, vec2 self, vec2 currentSeed, float currentDist)\n{\n    float dist = distance(seed, self);\n\n    bool isEmpty = 0.0 >= seed.x + seed.y;\n    bool isFarther = currentDist <= dist;\n    \n    if(isEmpty || isFarther)\n        return vec3(currentSeed, currentDist);\n    else\n        return vec3(seed, dist);\n}\n\nvec3 jumpFlooding_XY(in vec2 fragCoord, sampler2D channel, vec2 resolution, float stepLength)\n{\n    vec3 data = vec3(-1.0, -1.0, 1e+5);\n    vec2 self = fragCoord / resolution.xy;\n\n    for(float x = -ITER; x <= ITER; x++)\n    {\n        for(float y = -ITER; y <= ITER; y++)\n        {\n            vec2 neighbor = fragCoord + vec2(x, y) * stepLength;\n            vec4 pointPosition = texture(channel, neighbor / resolution.xy);\n            data = jumpFlooding_Compare(pointPosition.xy, self, data.xy, data.z); // XY(x,y)\n        }\n    }\n\n    return data;\n}\n\nvec3 jumpFlooding_ZW(in vec2 fragCoord, sampler2D channel, vec2 resolution, float stepLength)\n{\n    vec3 data = vec3(-1.0, -1.0, 1e+5);\n    vec2 self = fragCoord / resolution.xy;\n\n    for(float x = -ITER; x <= ITER; x++)\n    {\n        for(float y = -ITER; y <= ITER; y++)\n        {\n            vec2 neighbor = fragCoord + vec2(x, y) * stepLength;\n            vec4 pointPosition = texture(channel, neighbor / resolution.xy);\n            data = jumpFlooding_Compare(pointPosition.zw, self, data.xy, data.z); // ZW(x,y)\n        }\n    }\n\n    return data;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Jump Flooding : init A.xy\n//                 D.xy -> A.zw\n\nconst float PI = 3.14159265358979;\nconst float TAU = PI * 2.0;\n\nfloat hash(vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nvec2 initialize(in vec2 fragCoord)\n{\n    const float NUM = exp2(2.0);\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    vec2 iuv = floor(uv * NUM);\n    vec2 luv = vec2(0.0);\n\n    // resize\n    iuv += (iuv.y < 0.0 ? 1.0 : 0.0);\n    iuv = max(vec2(exp2(0.5)), abs(iuv));\n    float scale = exp2(floor(log2(abs(iuv.y / 4.0))));\n    uv /= scale;\n\n    iuv = floor(uv * NUM);\n\n    // gap\n    float odd = fract(iuv.y * 0.5) * 2.0 - 0.5;\n    uv.x += sign(odd) * 0.0333;\n    \n    iuv = floor(uv * NUM);\n    luv = fract(uv * NUM) * 2.0 - 1.0;\n    \n    // center noise\n    vec2 noise = vec2(hash(iuv), hash(iuv + vec2(148.2)));\n    float radian = sqrt(noise.y);\n    float angle = noise.x * TAU;\n\n    radian = sin(radian * TAU + iTime) * 0.5;\n    luv.x += sin(angle) * radian;\n    luv.y += cos(angle) * radian;\n\n    return step(length(luv), (1.0 / scale) * 0.1) * vec2(fragCoord / iResolution.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0);\n    \n    color.xy = initialize(fragCoord);\n\n    float stepLength = pow(2.0, STEP - 4.0);\n    color.zw = jumpFlooding_XY(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n    \n    fragColor = color;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Jump Flooding : A.xy -> B.xy\n//                 A.zw -> B.zw\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0);\n    float stepLength = 0.0;\n    \n    stepLength = pow(2.0, STEP - 1.0);\n    color.xy = jumpFlooding_XY(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n\n    stepLength = pow(2.0, STEP - 5.0);\n    color.zw = jumpFlooding_ZW(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n    \n    fragColor = color;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Jump Flooding : B.xy -> C.xy\n//                 B.zw -> C.zw\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0);\n    float stepLength = 0.0;\n    \n    stepLength = pow(2.0, STEP - 2.0);\n    color.xy = jumpFlooding_XY(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n\n    stepLength = pow(2.0, STEP - 6.0);\n    color.zw = jumpFlooding_ZW(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n    \n    fragColor = color;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// Jump Flooding : C.xy -> D.xy\n//                 C.zw -> D.zw\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0);\n    float stepLength = 0.0;\n    \n    stepLength = pow(2.0, STEP - 3.0);\n    color.xy = jumpFlooding_XY(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n\n    stepLength = pow(2.0, STEP - 7.0);\n    color.zw = jumpFlooding_ZW(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n    \n    fragColor = color;\n}","name":"Buffer D","description":"","type":"buffer"}]}