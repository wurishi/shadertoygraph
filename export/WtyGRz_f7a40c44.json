{"ver":"0.1","info":{"id":"WtyGRz","date":"1578061571","viewed":112,"name":"Simple Smooth Hash","username":"creikey","description":"A simple smooth hash for quick and dirty procedural things.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["simple","hash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash11(float p)\n{\n    p = fract(p * 0.1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat smoothhash( float x )\n{\n    //float previous = hash11(float(int(x) - 1));\n    //float current = hash11(float(int(x)));\n    //return mix(previous, current, fract(x));\n    return mix(hash11(floor(x)), hash11(ceil(x)), fract(x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float time = iTime*5.0;\n    uv.x *= 50.0; // to simulate real world 3d units\n    vec3 col = vec3(smoothhash(uv.x + time));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}