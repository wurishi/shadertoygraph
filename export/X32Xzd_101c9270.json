{"ver":"0.1","info":{"id":"X32Xzd","date":"1710958207","viewed":59,"name":"Exploring Depths of Mandelbrot","username":"vohawan","description":"Exploring Depths of Mandelbrot following the tutorial of Arne at https://arnestenkrona.github.io/blog/2021/03/04/Mandelbrot-in-Shadertoy","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 palette[ 8 ] = vec3[8](   vec3( 0.0, 0.0, 0.0 ),\n                                vec3( 0.5, 0.5, 0.5 ),\n                                vec3( 1.0, 0.5, 0.5 ),\n                                vec3( 0.5, 1.0, 0.5 ),\n                                vec3( 0.5, 0.5, 1.0 ),\n                                vec3( 0.5, 1.0, 1.0 ),\n                                vec3( 1.0, 0.5, 1.0 ),\n                                vec3( 1.0, 1.0, 0.5 ) );\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float depth = 9.0;\n    float scale = 1.0 / pow(2.0, depth * abs(sin(iTime / depth)));\n    vec2 offset = vec2(0.25, 0.0);\n\n    float aspectRatio = iResolution.x / iResolution.y;\n    float x = scale * 2.0 * (2.0 * (fragCoord.x / iResolution.x) - 1.0) + offset.x;\n    float y = scale * 2.0 * (1.0 / aspectRatio) * (2.0 * (fragCoord.y / iResolution.y) - 1.0) + offset.y;\n    \n    int iteration_limit=400;\n    float divergence_threshold=200.0;\n    \n    bool diverged = false;\n    float x0 = x;\n    float y0 = y;\n    int i;\n    \n    for(i=0;i<iteration_limit;i++){\n        if(x*x + y*y > divergence_threshold*divergence_threshold){\n        diverged=true;\n        break;\n        }\n        \n        float xtemp= x*x -y*y + x0;\n        y = 2.0 * x * y + y0;\n        x = xtemp;\n        \n        \n    }\n    \n    \n    vec3 col;\n\n    if(diverged){\n        int nPalette = 8;\n            float smoothed = log2(log2(x*x + y*y) / 2.0);\n            float fColorIndex = (sqrt(float(i) + 10.0 - smoothed));\n\n            float colorLerp = fract(fColorIndex);\n            colorLerp = colorLerp*colorLerp*(3.0-2.0*colorLerp);\n            int colorIndexA = int(fColorIndex) % nPalette;\n            int colorIndexB = (colorIndexA + 1) % nPalette;\n\n            col = mix(palette[colorIndexA], palette[colorIndexB], colorLerp);\n    }\n    else{\n        col = vec3(0.0, 0.0, 0.0); // black\n    }\n    \n    fragColor=vec4(col,1.0);\n\n       \n    \n    // output color to screen\n    //fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}