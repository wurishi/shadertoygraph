{"ver":"0.1","info":{"id":"XcjBRK","date":"1725204288","viewed":22,"name":"Musical Cube of Dots","username":"Peregrine","description":"2024-03-19, basic study...","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sound","balls"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPS          0.01\n#define FREQ         .5\n#define MIN_DOT_SIZE .001\n#define MAX_DOT_SIZE .2\n#define PI           3.1415926535\n#define R            2.\n#define t            iTime\n\n#define pos(x)     ((x) * .5 + .5)\n#define sat(x)     clamp(x, 0., 1.)\n#define rot(a)     mat2(cos(a), -sin(a), sin(a), cos(a))\n#define _min(a, b) (a.x < b.x ? a : b)\n#define _max(a, b) (a.x > b.x ? a : b)\n\nfloat map(float x, float source_min, float source_max, float target_min, float target_max) {\n  return target_min + (x - source_min) * (target_max - target_min) / (source_max - source_min);\n}\n\nvec3 rep(vec3 p, vec3 periods, vec3 limits) {\n  //return mod(p + .5 * periods, periods) - .5 * periods;\n  return p - periods * clamp(round(p/periods), -limits, limits);\n}\n\nfloat sdf_dot(vec3 p, float r) {\n  return length(p) - r;\n}\n\nfloat sdf_box(vec3 p, vec3 s) {\n  vec3 q = abs(p) - s;\n  return max(q.x, max(q.y, q.z));\n}\n\nfloat one_periodic(float x) {\n  return map(sin(2. * PI * x), -1., 1., MIN_DOT_SIZE, MAX_DOT_SIZE - 0.06);\n}\n\nfloat offset(vec3 p) {\n  return length(p);\n}\n\nfloat sound(vec2 uv, float amp) {\n  return clamp(amp * texture(iChannel1, uv).x, 0.01, 1.);\n}\n\nfloat noise(float x, float y) {\n  return texture(iChannel0, vec2(x, y)).x;\n}\n\nvec3 full_rot(vec3 p, float f) {\n  p.xz *= rot(t * f * FREQ);\n  p.yz *= rot(t * f * FREQ);\n  p.xy *= rot(t * f * FREQ);\n  return p;\n}\n\nvec2 map(vec3 p) {\n  vec2 d = vec2(100., -1.);\n  vec3 op = p;\n  \n  p = full_rot(p, -.25);\n  \n  vec3 p_rep2 = rep(p + vec3(10./2.), vec3(10.), vec3(100.));\n  vec2 balls = vec2(sdf_dot(p_rep2, 0.05 + sound(vec2(1.), .25)), 1.);\n  \n  vec2 hole = vec2(sdf_dot(p, 3.5), 2.);\n  \n  p = full_rot(p, 1.);\n  \n  vec3 p_rep = rep(p, vec3(MAX_DOT_SIZE), vec3(10.));\n  vec2 cube_of_dots = \n    vec2(sdf_dot(p_rep, \n                 one_periodic(t - offset(p) - sound(vec2(0.), 1.8))), 3.);\n  \n  d = _min(d, balls);\n  d = _max(d, -hole);\n  d = _min(d, cube_of_dots);\n  return d;\n}\n\nvec3 get_normal(vec3 p) {\n  vec2 e = EPS * vec2(1., -1);\n  return normalize(\n    e.xyy * map(p + e.xyy).x +\n    e.yxy * map(p + e.yxy).x +\n    e.yyx * map(p + e.yyx).x +\n    e.xxx * map(p + e.xxx).x\n  );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = 2. * (fragCoord.xy - .5 * iResolution.xy) / iResolution.y;\n  vec3 c = vec3(0.),\n       ro = vec3(0., 0., -5.),\n       rd = normalize(vec3(uv, 1.)),\n       p = ro,\n       n,\n       g = vec3(0.);\n  vec2 d;\n  \n  for (int i = 0; i < 128 && distance(ro, p) < 100.; i++) {\n    d = map(p);\n    if (d.x < EPS) {\n      n = get_normal(p);\n      if (d.y == 1.)\n        c = mix(vec3(1.), vec3(0.), p.z/100.) + g;\n      if (d.y == 3.)\n        c = mix(vec3(1., 0., .5), vec3(0., 0., 0.), log(offset(p)));\n      break;\n    }\n    g += 1. - sat(10./d.x);\n    p += rd * d.x;\n  }\n\n  fragColor = vec4(c, 1.);\n}\n","name":"Image","description":"","type":"image"}]}