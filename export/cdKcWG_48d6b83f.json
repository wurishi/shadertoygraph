{"ver":"0.1","info":{"id":"cdKcWG","date":"1698235505","viewed":164,"name":"Scatterbrained Machine","username":"Reva","description":"A feedback loop of sharpen and blur","likes":2,"published":1,"flags":34,"usePreview":0,"tags":["camera","feedbackloop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 st = (uv - 0.5)*2.0;\n    st*= 1.0;\n    uv = st/2.0 + 0.5;\n\n    fragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 offset [9];\nfloat kernel [9];\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 step = 2.0 / iResolution.xy;\n    vec2 st = (uv - 0.5)*2.0;\n    st*= 1.0;\n    uv = st/2.0 + 0.5;\n    \n    offset[0] = vec2(-step.x, -step.y);\n    offset[1] = vec2(0.0, -step.y);\n    offset[2] = vec2(step.x, -step.y);\n    \n    offset[3] = vec2(-step.x, 0.0);\n    offset[4] = vec2(0.0, 0.0);\n    offset[5] = vec2(step.x, 0.0);\n    \n    offset[6] = vec2(-step.x, step.y);\n    offset[7] = vec2(0.0, step.y);\n    offset[8] = vec2(step.x, step.y);\n    \n    kernel[0] = -0.25; kernel[1] = 0.05; kernel[2] = -0.25;\n    kernel[3] = 0.05; kernel[4] = 0.8; kernel[5] = 0.05;\n    kernel[6] = -0.25; kernel[7] = 0.05; kernel[8] = -0.25;\n    \n    vec4 sum = texture(iChannel0, uv);\n    \n    for (int i = 0; i < 9; i++) {\n        vec4 color = mix(texture(iChannel0, uv + offset[i]),texture(iChannel1,uv),0.0);\n        sum += color * kernel[i];\n    }\n\n\n    if(iFrame%800 == 0|| iMouse.z > 0.0){\n        fragColor = texture(iChannel1,uv);\n    }else{\n        fragColor = mix(clamp(sum,vec4(0.0),vec4(1.0)),texture(iChannel1,uv),0.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 offset [9];\nfloat kernel [9];\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nmat2 rotate2d(float angle){\n    return mat2(cos(angle),-sin(angle),\n                sin(angle),cos(angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 step = 0.5 / iResolution.xy;\n    vec2 st = (uv - 0.5)*2.0;\n    st *= 0.998;\n    //st *= rotate2d(noise(vec2(iTime,uv.x))*0.02);\n    //st *= rotate2d(0.002);\n    uv = st/2.0 + 0.5;\n    \n    offset[0] = vec2(-step.x, -step.y);\n    offset[1] = vec2(0.0, -step.y);\n    offset[2] = vec2(step.x, -step.y);\n    \n    offset[3] = vec2(-step.x, 0.0);\n    offset[4] = vec2(0.0, 0.0);\n    offset[5] = vec2(step.x, 0.0);\n    \n    offset[6] = vec2(-step.x, step.y);\n    offset[7] = vec2(0.0, step.y);\n    offset[8] = vec2(step.x, step.y);\n    \n    \n    kernel[0] = 1.0; kernel[1] = 1.0; kernel[2] = 1.0;\n    kernel[3] = 1.0; kernel[4] = 2.8; kernel[5] = 1.0;\n    kernel[6] = 1.0; kernel[7] = 1.0; kernel[8] = 1.0;\n    \n    vec4 sum = vec4(0.0);\n    \n    for (int i = 0; i < 9; i++) {\n        vec4 color = texture(iChannel0, uv + offset[i]);\n        sum += color * kernel[i];\n    }\n\tsum /= 9.0;\n    \n    //fragColor = texture(iChannel0,uv);\n\n    fragColor = clamp(sum , vec4(0.0), vec4(1.0));\n}","name":"Buffer B","description":"","type":"buffer"}]}