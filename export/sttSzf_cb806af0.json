{"ver":"0.1","info":{"id":"sttSzf","date":"1639531318","viewed":181,"name":"Portal emancipation grill","username":"andersonwebdev","description":"Learning about noise","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","noise","water","cellular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 random(vec2 st) {\n    float x = fract(sin(dot(st.xy,vec2(3.,72.233)))*43758.5453123);\n    float y = fract(x * 77.0);\n    return vec2(x,y);\n}\n\nfloat smoothNoise(vec2 uv) {\n    \n    vec2 repeatedUv = smoothstep(0.0, 1.0, fract(uv));\n    \n    vec2 tileCoords = floor(uv);\n\n    float x1 = random(tileCoords).x;\n    float x2 = random(tileCoords + vec2(1.0, 0.0)).x;\n    \n    float xValues = mix(x1, x2, repeatedUv.x);\n    \n    float y1 = random(tileCoords + vec2(0 ,1)).x;\n    float y2 = random(tileCoords + vec2(1, 1)).x;\n    \n    float yValues = mix(y1, y2, repeatedUv.x);\n    \n    return mix(xValues, yValues, repeatedUv.y);\n}\n\nfloat cellularNoise(vec2 uv, float size) {\n    vec2 repeatedUv = fract(uv * size);\n    vec2 uvCoords = floor((uv * size));\n    \n    vec2 point = vec2(0.5);\n    \n    float dist = 1.0;\n    float currentDistance = 0.0;\n    \n    for(float i = -1.0; i <= 1.0; i++) {\n        for(float j = -1.0; j <= 1.0; j++) {\n            vec2 neighborTile = vec2(i,j);\n            \n            point = random(neighborTile + uvCoords);\n            \n            point += sin(iTime * 1.5 * point) * 0.3;\n            \n            currentDistance = distance(point + neighborTile, repeatedUv);\n            \n            dist = min(dist, currentDistance);\n        }\n    }\n    \n    return dist;\n}\n\nfloat border(vec2 uv) {\n    float col = 0.02 / uv.x;\n\n    col += 0.02 / uv.y;\n    col = smoothstep(0.1, 1.0, col);\n    \n    return col * .4;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float noise = smoothNoise(uv * 9.0) * 0.05;\n    uv += noise;\n    \n    vec2 movingUv = uv;\n    movingUv.y += iTime * 0.07;\n    movingUv += noise;\n    \n    \n    float cells1 = cellularNoise(movingUv, 3.0);\n    cells1 = pow(cells1, 6.0) * 0.5;\n    \n    float cells2 = cellularNoise(movingUv, 6.0);\n    cells2 = pow(cells2, 5.0) * 0.1;\n    \n    float cells = cells1 + cells2;\n    \n    float borders = border(1.05 - uv) + border(uv);\n    \n    vec3 blue = vec3(0.259,0.729,1.000);\n    \n    vec3 color = blue*(borders + cells);\n    color += blue * 0.1;\n\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}