{"ver":"0.1","info":{"id":"4ld3W2","date":"1471717369","viewed":1119,"name":"super cool music visualizer","username":"hopskotchrainbow","description":"It's an interactive visualizer with a glass sphere. Click and drag to set the coordinate.","likes":3,"published":3,"flags":96,"usePreview":0,"tags":["visualization","music","media"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void rotateXY(inout vec2 vec, float angle) {\n    float rad = radians(angle);\n    vec2 res = vec2(vec.x*cos(rad)+vec.y*sin(rad),vec.x*sin(rad)-vec.y*cos(rad));\n    vec = res;\n}\nvoid rotateUV(inout vec3 vec, vec2 angle) {\n    rotateXY(vec.zy, angle.x);\n    rotateXY(vec.xz, angle.y);\n}\n\n\nvec4 load(float index) {\n    vec2 res = iChannelResolution[3].xy;\n    index = floor(index);\n    vec2 pos = vec2(mod(index,res.x),floor(index/res.x));\n   \treturn texture(iChannel3, pos.xy/res);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 tex = texture(iChannel0, uv);\n    vec4 mousec = load(0.0);\n    vec2 hw = uv-0.5;\n    hw *= 2.0;\n    vec3 norm = vec3(hw, 1.0);\n    vec2 ixy = mousec.zw;\n    ixy -= 0.5;\n    ixy *= vec2(360.0,180.0);\n    rotateUV(norm, vec2(ixy.y,ixy.x));\n    float l = length(hw);\n    vec4 col = texture(iChannel2, norm);\n    vec4 t2c = texture(iChannel0, vec2(20./256.,0.25));\n    l *= 2.4-t2c.r*0.6;\n    vec4 hdy = texture(iChannel0, vec2(uv.x, 0.0));\n    hdy += texture(iChannel0, vec2(uv.x, 0.1));\n    hdy /= 2.0;\n    if (l < 1.0) {\n        float s = sqrt(1.0-l);\n        float eq = 1./sqrt(s);\n        vec3 enorm = vec3(hw/eq, -s*(0.8+tex.r*0.2));\n        enorm = normalize(enorm);\n        vec3 gnorm = enorm;\n        rotateUV(enorm,vec2(ixy.y,ixy.x));\n        vec3 fnorm = normalize(norm);\n        vec4 tex = texture(iChannel1, (enorm.xy-0.5)/vec2(radians(360.0),radians(180.0))+0.5);\n        vec3 refl = refract(fnorm, enorm,0.8-((tex.r+tex.g+tex.b)/3.0)*0.3);\n        col = texture(iChannel2, refl);\n    }\n    if (uv.y < hdy.r*0.2) {\n        col = vec4(0.2,0.4,0.5,1.0);\n    }\n\tfragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Mdj3Rh","filepath":"https://soundcloud.com/waterflame89/flyboy-gabbergirl","previewfilepath":"https://soundcloud.com/waterflame89/flyboy-gabbergirl","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 rc = fragCoord/iResolution.xy;\n    vec2 pixsize = 1.0/iResolution.xy;\n    vec4 fragh = texture(iChannel0, vec2(rc.x, 0.25));\n    vec4 fragb = texture(iChannel1, rc+vec2(0,-pixsize.y));\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n    if (rc.y < (pixsize.y)) {\n\t\tfragColor = fragh;\n    } else {\n        fragColor = fragb;\n    }\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 tex = texture(iChannel0, uv);\n    fragColor = tex;\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void save(in vec2 fragCoord, vec4 data, float index, out vec4 result) {\n    index = floor(index);\n    vec2 res = iResolution.xy;\n    vec2 pos = vec2(mod(index,res.x),floor(index/res.x));\n    if (distance(pos,fragCoord) < 1.0) {\n        result = data;\n    }\n}\nvec4 load(float index) {\n    vec2 res = iResolution.xy;\n    index = floor(index);\n    vec2 pos = vec2(mod(index,res.x),floor(index/res.x));\n   \treturn texture(iChannel0, pos.xy/res);\n}\n\nfloat encodeVector(vec2 f) {\n    f = f-65536.;\n    return f.x*4294967296.+f.y;\n}\nvec2 decodeVector(float f) {\n    float fy = mod(f, 4294967296.);\n    float fx = f/4294967296.;\n    return vec2(fx, fy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 tex = texture(iChannel0, uv);\n    fragColor = tex;\n    vec4 mousedata = load(0.0);\n    vec4 restore = load(2.0);\n    int r = 0;\n    vec2 hxy = iMouse.xy-iResolution.xy;\n    hxy -= 0.5;\n    vec2 delta = mousedata.xy-iMouse.xy;\n    mousedata.xy = iMouse.xy;\n    delta *= radians(1.0/5.0);\n    if (iMouse.z > 0.2) {\n        vec2 current = mousedata.zw;\n        current += delta;\n        mousedata.zw = current;\n    }\n    save(fragCoord, mousedata, 0.0, fragColor);\n}","name":"Buf C","description":"","type":"buffer"}]}