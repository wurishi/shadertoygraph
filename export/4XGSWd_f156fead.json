{"ver":"0.1","info":{"id":"4XGSWd","date":"1720604502","viewed":52,"name":"fire attempt using ray marching","username":"akr51","description":"Playing around trying to create a fire effect","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define ITR 120\n#define MAX 80.0\n#define SRF 0.001\n\n\n\nvec3 pal(vec3 a, vec3 b, vec3 c, vec3 d, float t)\n{\n\n    \n    return a + b * cos(c * (t + d));\n\n\n}\n\n\nfloat map(vec3 sp)\n{\n    sp.x = mod(sp.x + 0.2, 2.5) - 1.25;\n    sp *= 0.7;\n    sp.y += 3.5;\n    sp.y *= 0.25;\n    return length(sp) - 1.0;\n\n}\n\n\n\nfloat mrch(vec3 ro, vec3 rd)\n{\n\n\n    float d0 = 0.0;\n    for (int i = 0; i < ITR; ++i)\n    {\n    \n    \n        vec3 sp = ro + rd * d0;\n        float ds = map(sp);\n        d0 += ds;\n        \n        if (d0 > MAX || abs(ds) < SRF) break;\n    \n    \n    }\n    \n    \n    return d0;\n\n\n}\n\n\n\nvec3 dir(vec2 uv, vec3 r0, vec3 fx)\n{\n\n\n\n    vec3 w = normalize(fx - r0);\n    vec3 u = normalize(cross(w, vec3(0.0, 1.0, 0.0)));\n    vec3 v = normalize(cross(u, w));\n    return mat3(u, v, w) * normalize(vec3(uv, 2.5));\n    \n\n}\n\n\n\n\nvec3 nml(vec3 p)\n{\n\n\n    vec2 d = vec2(0.001, 0.0);\n    return normalize(map(p) - vec3(map(p - d.xyy), map(p - d.yxy), map(p - d.yyx)));\n    \n\n}\n\n\n\nfloat lighting(vec3 sp, vec3 lp)\n{\n\n\n    vec3 l = normalize(lp - sp);\n    vec3 n = nml(sp);\n    float df = clamp(dot(n, l), 0.0, 1.0);\n    float ds = mrch(sp + n * 0.02, l);\n    \n    if (ds < length(lp - sp))\n    {\n    \n    \n        df *= 0.1;\n        \n    \n    }\n    \n    \n    return df;\n\n\n}\n\n\n\nvoid mainImage(out vec4 c_out, in vec2 u)\n{\n    \n    \n    vec2 rr = iResolution.xy, uv = (u + u - rr) / rr.y;\n    vec3 r0 = vec3(0.0, 0.5, -5.0 -(cos(iTime) * 0.5 + 0.5) * 0.1);\n    vec3 fx = vec3(0.0, cos(iTime) * 0.5 + 0.5, sin(iTime));\n    \n    uv.x *= 0.3;\n    uv.y *= 0.6;\n    \n    float tscale = 0.9;\n    float ampscale = 0.8;\n    \n    uv.x += cos(uv.y * 6.0 + iTime * 23.0) * 0.018 * ampscale;\n    uv.x *= (1.0 + sin(uv.y * 2.5 + iTime * 29.4 * tscale) * 0.01 * ampscale);\n    uv.y *= (1.0 + cos(uv.x * 2.7 + iTime * 31.1 * tscale) * 0.01 * ampscale);\n    uv.x -= sin(uv.y * 3.0 + iTime * 41.5 * tscale) * 0.01 * ampscale;\n    uv.x += cos(uv.y * 5.0 + iTime * 53.2 * tscale) * 0.055 * ampscale;\n    uv.y -= cos(uv.x * 11.0 + iTime * 41.1 * tscale) * 0.5 * ampscale;\n    uv.y -= cos(uv.x * 41.0 + iTime * 311.2 * tscale) * 0.1 * ampscale;\n    uv.y += cos(uv.x * 23.0 + iTime * 31.1 * tscale) * 0.14 * ampscale;\n    uv.y -= sin(uv.x * 31.0 + iTime * 43.0 * tscale) * 0.16 * ampscale;\n    \n    vec3 rd = dir(uv, r0, fx);\n    \n   \n    vec3 a = vec3(0.2, 0.2, 0.2);\n    vec3 b = vec3(0.5,  0.25, 0.23);\n    vec3 c = vec3(7.0,  1.1, 0.76);\n    vec3 d = vec3(1.0, 1.0, 1.75);\n    \n    \n    float d0 = mrch(r0, rd);\n    \n    vec3 cl = vec3(0.0);\n    \n    if (d0 > 0.0)\n    {\n    \n        vec3 hp = r0 + rd * d0;\n        cl += lighting(hp, vec3(-0.2, 0.065, -2.0)) * pal(a, b, c, d, d0);\n        \n    }\n\n    cl = pow(cl, vec3(3.0)) * 22.0;\n    c_out = vec4(cl, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}