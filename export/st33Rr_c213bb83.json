{"ver":"0.1","info":{"id":"st33Rr","date":"1676701986","viewed":107,"name":"/grids/elemental","username":"_fov","description":"Elemental grids, based and inspired by https://www.shadertoy.com/view/MsGyWK","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["fire","water","earth","grids","air","elements"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_OCTAVES 4\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\n\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < NUM_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n// -------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 V = fragCoord / iResolution.xy;\n    vec2 U = (fragCoord + fragCoord - iResolution.xy) / iResolution.x;\n    vec3 color = vec3(1.);\n    \n    float t = .8*iTime;\n    \n    fragColor.rgb = vec3(0.);\n\n    if (U.x < -0.5) {\n      // earth\n      color = vec3(0.5,1.0,0.7);\n      U.x += -0.18 * U.y;\n      if(U.y<=0.0) {\n        U.x += 0.24 * U.y;\n      }\n      U.y += 0.09 * U.x;\n      if(U.x>-0.75) {\n        U.y -= 0.21 * (U.x+0.75);\n      }\n      U.x += 0.1;\n    } else if (U.x < 0.0) {\n      // water\n      U.y += 0.04 * cos(t- V.x * 50. + V.y * 30.) * (V.y*V.y + 0.2);\n      U.y = clamp(U.y, -1.0, 0.45);\n      U.x -= 0.095;\n      color = vec3(0.5,0.7,1.0);\n    } else if (U.x < 0.5) {\n      // fire\n      U += 2. * max(0.5-.5*length(U),0.)\n         * vec2( fbm(vec3(U, t)), fbm(vec3(U + 5., t)) )\n         * vec2(V.y*V.y);\n      U.x -= .2 * V.y;\n      U.y -= 0.25*mod(t, 1.25);\n      U.x = (U.x - 0.25) * (V.y +.35) + 0.25;\n      U.x = clamp(U.x, 0.1, 0.4);\n      color = vec3(1.0,0.7,0.5);      \n    } else {\n      // air\n      U.x += 0.2*sin(t) * cos(V.y/5.) * V.y*V.y;\n      U.x = clamp(U.x, 0.6, 0.9);\n      color = vec3(1.0,1.0,0.7);\n    }\n    \n    U = sin(50.*U); \n    U = smoothstep(1.5,0.0,abs(U)/fwidth(U));\n    \n    fragColor += U.x + U.y;\n    fragColor.rgb *= color;\n    /*\n    if(V.x < 0.5) {\n     fragColor.rgb = vec3(V.y +.35);\n    } else {\n     fragColor.rgb = vec3(cos(2. + V.y*3.1415)/2. + 1.);\n    }\n    */\n}","name":"Image","description":"","type":"image"}]}