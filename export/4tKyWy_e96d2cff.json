{"ver":"0.1","info":{"id":"4tKyWy","date":"1537671704","viewed":109,"name":"Sphere Project- Time Travel","username":"tiff","description":"sphere project- mimicking objects traveling through a tunnel in super speed","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sphereproject"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// SDF Sphere\nfloat sphere(vec3 p, float radius){\n    return length(p)-radius;\n}\n\n// Map distance to all objects in the scene\nfloat map(vec3 p)\n{\n    float radius = 0.7;\n    \n    // Transform coordinate space so spheres repeat\n    vec3 q = fract(p) * 2.5 - 1.;\n\n\n    // Signed distance of sphere\n    return sphere(q, radius);\n}\n\n\nfloat trace(vec3 origin, vec3 r) \n{\n  float t = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 p = origin + r * t;\n        float d = map(p);\n        t += d/0.7;\n    }\n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv *2.-1.; // Remap the space to -1. to 1.\n    uv.x *= iResolution.x/iResolution.y; // Correct aspect ratio\n    \n    vec3 color = -1.0 + -0.5*cos(iTime+uv.xyx+vec3(0,0,1));\n\n   \tvec3 ray = normalize(vec3(uv, 1.5));\n    vec3 origin = vec3(0, sin(iTime/8.0), tan(iTime/3.0)); //iTime creates the movement\n    float t = trace(origin, ray);\n    float linearFog =  1.0 / (0.7 - t*0.25);\n    \n    vec3 fc = vec3(t/linearFog)/abs(tan(color));\n    // Output pixels to screen\n    fragColor = vec4(fc, -cos(color));\n}","name":"Image","description":"","type":"image"}]}