{"ver":"0.1","info":{"id":"NdjcWy","date":"1644014967","viewed":98,"name":"Buggy ray marching","username":"ElMehdiBouamama","description":"Buggy ray marching test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarchingbuggy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float distance_from_sphere(in vec3 p, in vec3 c, float r)\n{\n    return length(p - c) - r;\n}\n\nhighp float rand(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\nfloat map_the_world(in vec3 p)\n{\n    float displacement = sin(5. * p.x) * sin(5.0 * p.y) * sin(5.0 * p.z) * 0.25 - p.z * log(abs(cos(iTime))/6. + .1);\n    float sphere_0 = distance_from_sphere(p, vec3(0.0), 1.0);\n    return sphere_0 + displacement;\n}\n\nvec3 calculate_normal(in vec3 p)\n{\n    const vec3 small_step = vec3(0.001, 0.0, 0.0);\n\n    float gradient_x = map_the_world(p + small_step.xyy) - map_the_world(p - small_step.xyy);\n    float gradient_y = map_the_world(p + small_step.yxy) - map_the_world(p - small_step.yxy);\n    float gradient_z = map_the_world(p + small_step.yyx) - map_the_world(p - small_step.yyx);\n\n    vec3 normal = vec3(gradient_x, gradient_y, gradient_z);\n\n    return normalize(normal);\n}\n\nvec3 raymarch(in vec3 ro, in vec3 rd) {\n    float total_distance_traveled = 0.0;\n    const int NUMBER_OF_STEPS = 64;\n    const float MINIMUM_HIT_DISTANCE = 0.004;\n    const float MAXIMUM_TRACE_DISTANCE = 1000.0;\n\n    for (int i = 0; i < NUMBER_OF_STEPS; ++i)\n    {\n        // Calculate our current position along the ray\n        vec3 current_position = ro + total_distance_traveled * rd;\n\n        // assume that the sphere is centered at the origin and has unit radius\n        float distance_to_closest = map_the_world(current_position);\n\n        if (distance_to_closest < MINIMUM_HIT_DISTANCE) \n        {\n            vec3 normal = calculate_normal(current_position);\n\n            // For now, hard-code the light's position in our scene\n            vec3 light_position = vec3(2., -5.0, - 3.);\n\n            // Calculate the unit direction vector that points from\n            // the point of intersection to the light source\n            vec3 direction_to_light = normalize(current_position - light_position);\n\n            float diffuse_intensity = max(0.0, dot(normal, direction_to_light));\n\n            return vec3(1.0, 0.0, 0.0) * diffuse_intensity;\n        }\n        \n\n        if (total_distance_traveled > MAXIMUM_TRACE_DISTANCE) // miss\n        {\n            break;\n        }\n\n        // accumulate the distance traveled thus far\n        total_distance_traveled += distance_to_closest;\n    }\n\n    // If we get here, we didn't hit anything so just\n    // return a background color (black)\n    return vec3(0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(0,0,5);\n    vec3 rd = vec3(uv, -1.0);\n    \n\n    // Time varying pixel color\n    vec3 col = raymarch(ro, rd);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}