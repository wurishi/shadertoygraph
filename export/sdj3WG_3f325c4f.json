{"ver":"0.1","info":{"id":"sdj3WG","date":"1617907766","viewed":163,"name":"pow(x,1.0/2.2) approximation","username":"edubart","description":"Gamma correction approximation, see details in the comments.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["approximation","gamma","pow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2021 Eduardo Bart (https://github.com/edubart)\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// Approximating pow(x,1.0/2.2), the usual gamma correction.\n// It results in a 1.5x speed up (in my GPU).\n//\n// In blue, pow(x,1.0/2.2)\n// In yellow, the approximation.\n//\n// See also the inverse (from IQ) https://www.shadertoy.com/view/WlG3zG\n\n// Set to 1 to measure performance\n#define DISPLAY_OR_MEASURE 0\n\nfloat gamma_correction( float x )\n{\n    // The original, uncomment this to measure performance.\n    //return pow(x, 0.45454545);\n\n    // Square root approximation, accurate and 1.5x faster than pow (in my GPU).\n    return 1.12661*sqrt(x) - 0.126615*x;\n   \n    // Power series ratio approximation (found with stochastic gradient descent).\n    // This doesn't use square root, but it's about the same performance as pow (in my GPU).\n    //return (x*(9.035 *x + 2.10837))/(x*(4.45034*x+6.55697)+0.147032);\n    \n    // This is inaccurate, but used anyway sometimes and probably the best performance.\n    //return sqrt(x);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n#if DISPLAY_OR_MEASURE==0\n    float dx = 1.0/iResolution.y;\n    vec2  p = ( vec2((iResolution.y-iResolution.x)/2.0,0.0)+fragCoord)/iResolution.y;\n\n    vec3 col = vec3(0.0);\n    if( p.x>0.0 && p.x<1.0 )\n    {\n        col = vec3( 0.2 + 0.02*mod(floor(p.x*10.0)+floor(p.y*10.0),2.0) );\n        // yellow: pow(x,1.0/2.2)\n        {\n        float y = pow( p.x, 1.0/2.2 );\n        float dy = pow(p.x-dx,1.0/2.2) - y;\n        float di = abs(p.y-y)/sqrt(dx*dx+dy*dy);\n        col = mix( col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 1.5, di ) );\n        }\n        // blue: approximation\n        {\n        float y = gamma_correction( p.x );\n        float dy = gamma_correction(p.x-dx) - y;\n        float di = abs(p.y-y)/sqrt(dx*dx+dy*dy);\n        col = mix( col, vec3(0.0,0.4,0.8), 1.0-smoothstep( 0.0, 2.0, di ) );\n        }\n    }\n#else    \n    // measure performance\n    float x = fragCoord.x/iResolution.x + min(iTime,0.1);\n\n    vec3 col = vec3(0.0);\n\n    float f = 0.0;\n    uint num = 100000u+min(uint(iFrame),0u);\n    for( uint i=0u; i<num; i++ )\n    {\n        float g = x+f*0.0000001;\n        f += gamma_correction(g);\n    }\n    col.x = f/float(num);\n#endif\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}