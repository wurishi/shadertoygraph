{"ver":"0.1","info":{"id":"llK3Wt","date":"1477511827","viewed":1488,"name":"roll waves","username":"FabriceNeyret2","description":"You have 2 seconds to go fullscreen if you wish.\n\nRoll waves are nice waves pattern often seen on roads or windows during rain. Nice complex effect for very simple cause.\nExample images: https://www.google.fr/search?q=roll+waves&tbm=isch\n","likes":11,"published":3,"flags":32,"usePreview":0,"tags":["2d","simulation","pattern","short","fluids","rollwaves"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// see also https://www.shadertoy.com/view/Xt3Xzn\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    O = mix (vec4(0,0,1,1), vec4(1), 1.2*texture(iChannel0, U/iResolution.xy) );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define T(x,y) texture( iChannel0, fract((U+vec2(x,y))/R) )\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    vec2 R = iResolution.xy;\n\n    if ( iFrame < 100 || U.y/R.y > .98 )       // init : random heights (e.g., rain)\n    {                                                    // .1* iDate.w\n        O = texture( iChannel1, U/iChannelResolution[1].xy + iDate.w ).rrrr;  // .x = h in mm\n     // O = texture( iChannel1, (.1*U+777.*iTime)/iChannelResolution[1].xy );  // .x = h in mm\n     // O = .3 + .7*O;\n        return;\n    }\n    \n // O-=O;\n // for (float i = -10.; i<=10.; i++)\n //     O += T(i,0) * (.5+.5*cos(i*.3))/10. ;\n    O = ( T(-1,0) + T(0,0) + T(1,0) )/3. ;     // average h a bit laterally ( linear fetch do some vertical average as well)\n    float v = sqrt(9.81*O.x/1e3);              // v = sqrt(g.h)   in m/s \n    // or via de ChÃ©zy formula v = C.sqrt(h.slope) ; C = h^1/6 / n ; n =  Manning's roughness coefficient ~ 0.01 to 0.03\n    O = T(0,2e3*v/60.);                        // h(x,t+dt) = h(x-v.dt,t)   ( why 2e3 instead of R.y ? )\n    // Note that Eulerian + pull tends to overblur the phenomena\n}\n","name":"Buf A","description":"","type":"buffer"}]}