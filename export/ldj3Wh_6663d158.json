{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// The MIT License\n// Copyright © 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Intersecting quadratic Bezier segments in 3D. Used Microsoft's paper as\n// pointed out by tayholliday in https://www.shadertoy.com/view/XsX3zf. Since\n// 3D quadratic Bezier segments are planar, the 2D version can be used to compute\n// the distance to the 3D curve.\n\n// Related Shaders:\n//     Cubic     Bezier - 2D BBox : https://www.shadertoy.com/view/XdVBWd \n//     Cubic     Bezier - 3D BBox : https://www.shadertoy.com/view/MdKBWt\n//     Quadratic Bezier - 2D BBox : https://www.shadertoy.com/view/lsyfWc\n//     Quadratic Bezier - 3D BBox : https://www.shadertoy.com/view/tsBfRD\n\n// List of other 3D SDFs: https://www.shadertoy.com/playlist/43cXRl\n//\n// and https://iquilezles.org/articles/distfunctions\n\n\t\n#define AA 1\n\n// method 0 : approximate http://research.microsoft.com/en-us/um/people/hoppe/ravg.pdf\n// method 1 : exact       https://www.shadertoy.com/view/ltXSDB\n#define METHOD 1\n\n// uv=0 : do not compute V, just U\n// uv=1 : comptue U and V\n#define COMPUTE_UV 1\n\n// texture 0: checkers\n// texture 1: organic\n#define TEXTURE 0\n\n\n\n//-----------------------------------------------------------------------------------\n\n// b(t) = (1-t)^2*A + 2(1-t)t*B + t^2*C\nvec3 bezier( vec3 A, vec3 B, vec3 C, float t )\n{\n    return (1.0-t)*(1.0-t)*A + 2.0*(1.0-t)*t*B + t*t*C;\n}\n// b'(t) = 2(t-1)*A + 2(1-2t)*B + 2t*C\nvec3 bezier_dx( vec3 A, vec3 B, vec3 C, float t )\n{\n    return 2.0*(t-1.0)*A + 2.0*(1.0-2.0*t)*B + 2.0*t*C;\n}\n// b\"(t) = 2*A - 4*B + 2*C\nvec3 bezier_dx_dx( vec3 A, vec3 B, vec3 C, float t )\n{\n    return 2.0*A - 4.0*B + 2.0*C;\n}\n\n#if METHOD==1\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\nvec2 sdBezier(vec3 pos, vec3 A, vec3 B, vec3 C)\n{    \n    vec3 a = B - A;\n    vec3 b = A - 2.0*B + C;\n    vec3 c = a * 2.0;\n    vec3 d = A - pos;\n\n    float kk = 1.0 / dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n\n    vec2 res;\n\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float q2 = q*q;\n    float h = q2 + 4.0*p3;\n\n    if(h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h, -h) - q) / 2.0;\n        \n        #if 1\n        // When p≈0 and p<0, h-q has catastrophic cancelation. So, we do\n        // h=√(q²+4p³)=q·√(1+4p³/q²)=q·√(1+w) instead. Now we approximate\n        // √ by a linear Taylor expansion into h≈q(1+½w) so that the q's\n        // cancel each other in h-q. Expanding and simplifying further we\n        // get x=vec2(p³/q,-p³/q-q). And using a second degree Taylor\n        // expansion instead: x=vec2(k,-k-q) with k=(1-p³/q²)·p³/q\n        if( abs(p)<0.001 )\n        {\n          //float k = p3/q;              // linear approx\n            float k = (1.0-p3/q2)*p3/q;  // quadratic approx \n            x = vec2(k,-k-q);  \n        }\n        #endif\n        \n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp(uv.x+uv.y-kx, 0.0, 1.0);\n\n        // 1 root\n        res = vec2(dot2(d+(c+b*t)*t),t);\n        \n        //res = vec2( dot2( pos-bezier(A,B,C,t)), t );\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3 t = clamp( vec3(m+m,-n-m,n-m)*z-kx, 0.0, 1.0);\n        \n        // 3 roots, but only need two\n        float dis = dot2(d+(c+b*t.x)*t.x);\n        res = vec2(dis,t.x);\n\n        dis = dot2(d+(c+b*t.y)*t.y);\n        if( dis<res.x ) res = vec2(dis,t.y );\n    }\n    \n    res.x = sqrt(res.x);\n    return res;\n}\n\n#endif\n\n#if METHOD==0\n\n    #if 1\n    // http://research.microsoft.com/en-us/um/people/hoppe/ravg.pdf\n    // { dist, t, y (above the plane of the curve, x (away from curve in the plane of the curve))\n\tfloat det( vec2 a, vec2 b ) { return a.x*b.y - a.y*b.x; }\n    vec2 sdBezier( vec3 p, vec3 va, vec3 vb, vec3 vc )\n    {\n      vec3 w = normalize( cross( vc-vb, va-vb ) );\n      vec3 u = normalize( vc-vb );\n      vec3 v =          ( cross( w, u ) );\n\n      vec2 m = vec2( dot(va-vb,u), dot(va-vb,v) );\n      vec2 n = vec2( dot(vc-vb,u), dot(vc-vb,v) );\n      vec3 q = vec3( dot( p-vb,u), dot( p-vb,v), dot(p-vb,w) );\n            \n      float mq = det(m,q.xy);\n      float nq = det(n,q.xy);\n      float mn = det(m,n);\n      float k1 = mq + nq;\n        \n      vec2  g = (k1+mn)*n + (k1-mn)*m;\n    //float f = -4.0*mq*nq - (mn-mq+nq)*(mn-mq+nq);\n      float f = -(mn*mn + 2.0*mn*(nq-mq)) - k1*k1;\n      vec2  z = 0.5*f*vec2(g.y,-g.x)/dot(g,g);\n    //float t = clamp( 0.5 + 0.5*det(z-q.xy,m+n)/mn, 0.0 ,1.0 );\n      float t = clamp( 0.5 + 0.5*(det(z,m+n)+k1)/mn, 0.0 ,1.0 );\n        \n      vec2 cp = m*(1.0-t)*(1.0-t) + n*t*t - q.xy;\n      return vec2(sqrt(dot(cp,cp)+q.z*q.z), t );\n    }\n    #else\n    // my adaptation to 3d of http://research.microsoft.com/en-us/um/people/hoppe/ravg.pdf\n    // { dist, t, y (above the plane of the curve, x (away from curve in the plane of the curve))\n    vec2 sdBezier( vec3 p, vec3 b0, vec3 b1, vec3 b2 )\n    {\n        b0 -= p;\n        b1 -= p;\n        b2 -= p;\n       \n        vec3 b01 = cross(b0,b1);\n        vec3 b12 = cross(b1,b2);\n        vec3 b20 = cross(b2,b0);\n        \n        vec3 n =  b01+b12+b20;\n        \n        float a = -dot(b20,n);\n        float b = -dot(b01,n);\n        float d = -dot(b12,n);\n\n        float m = -dot(n,n);\n        \n      //vec3  g = b*(b2-b1) + d*(b1-b0) + a*(b2-b0)*0.5;\n        vec3  g =  (d-b)*b1 + (b+a*0.5)*b2 + (-d-a*0.5)*b0;\n        float f = a*a*0.25-b*d;\n        vec3  k = b0-2.0*b1+b2;\n        float t = clamp((a*0.5+b-0.5*f*dot(g,k)/dot(g,g))/m, 0.0, 1.0 );\n        \n        return vec2(length(mix(mix(b0,b1,t), mix(b1,b2,t),t)),t);\n    }\n    #endif\n \n#endif\n\n//-----------------------------------------------------------------------------------\n\nvec3 hash3( float n ) { return fract(sin(vec3(n,n+7.3,n+13.7))*1313.54531); }\n\nvec3 noise3( in float x )\n{\n    float p = floor(x);\n    float f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    return mix( hash3(p+0.0), hash3(p+1.0), f );\n}\n\n//-----------------------------------------------------------------------------------\n\nvec3 map( vec3 p )\n{\n    vec3 a = vec3(0.0,-1.0,0.0);\n    vec3 b = vec3(0.0, 0.0,0.0);\n    vec3 c = vec3(0.0, 0.5,-0.5);\n\tfloat hm = 0.0;\n\tfloat id = 0.0;\n    float am = 0.0;\n    \n    float dm = length(p-a);\n    \n    vec3 pb = vec3(1.0,0.0,0.0);\n    float off = 0.0;\n    for( int i=0; i<8; i++ )\n\t{\t\n        //vec3 bboxMi = min(a,min(b,c))-0.3;\n    \t//vec3 bboxMa = max(a,max(b,c))+0.3;\n        \n        vec2 h = sdBezier( p, a, b, c );\n        float kh = (float(i) + h.y)/8.0;\n\n\n        #if COMPUTE_UV==1\n            vec3 bb = normalize(cross(b-a,c-a));\n            vec3 qq = bezier(a,b,c,h.y);\n            vec3 tq = normalize(bezier_dx(a,b,c,h.y));\n            vec3 nq = normalize(cross(bb,tq));\n            vec2 uv = vec2(dot(p-qq,nq),dot(p-qq,bb));\n            float ad = acos( dot(pb,bb) );\n            if( i==3 ) ad = -ad; // hack\n            off += ad;\n            float ka = atan(uv.y,uv.x) - off;\n            pb = bb;\n        #else\n            float ka = 0.0;\n        #endif\n        \n        // thickness\n        float ra = 0.3 - 0.28*kh + 0.3*exp(-15.0*kh);\n        float d = h.x - ra; // not accurate sdf, should use a cone better\n        if( d<dm ) { dm=d; hm=kh; am = ka;}\n\t\t\n        // grow next segment\n        vec3 na = c;\n\t\tvec3 nb = c + (c-b);\n\t\tvec3 dir = normalize(-1.0+2.0*hash3( id+13.0 ));\n\t\tvec3 nc = nb + 1.0*dir*sign(-dot(c-b,dir));\n\t\tid += 3.71;\n\t\ta = na;\n\t\tb = nb;\n\t\tc = nc;\n\t}\n\n\treturn vec3( dm*0.5, hm, am );\n}\n\nfloat map2( in vec3 pos )\n{\n    return min( pos.y+1.0, map(pos).x );\n}\n\nvec4 intersect( in vec3 ro, in vec3 rd )\n{\n    vec4 res = vec4( -1.0 );\n\n    float maxd = 12.0;\n    \n    // plane\n    float tp = (-1.0-ro.y)/rd.y;\n    if( tp>0.0 )\n    {\n        vec3 pos = ro + rd*tp;\n        res = vec4( tp, 0.025*length(pos.xz), 0.0, 0.0 );\n        maxd = tp;\n    }\n\n    // tentacle\n\tconst float precis = 0.001;\n    float t = 2.0;\n\tfloat l = 0.0;\n    float m = 0.0;\n    for( int i=0; i<128; i++ )\n    {\n\t    vec3 h = map( ro+rd*t );\n        if( h.x<precis || t>maxd ) break;\n        t += h.x;\n\t\tl = h.y;\n        m = h.z;\n    }\n    if( t<maxd ) res = vec4( t, l, 1.0, m );\n\n    return res;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.002,0.0,0.0);\n\n    float f = map(pos).x;\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - f,\n           map(pos+eps.yxy).x - f,\n           map(pos+eps.yyx).x - f ) );\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n    float res = 1.0;\n    float t = mint;\n\tfloat h = 1.0;\n    for( int i=0; i<32; i++ )\n    {\n        h = map(ro + rd*t).x;\n        res = min( res, k*h/t );\n\t\tt += clamp( h, 0.02, 2.0 );\n        if( res<0.0001 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<8; i++ )\n    {\n        float h = 0.02 + 0.5*float(i)/7.0;\n        float d = map2( pos + h*nor );\n        occ += max(h-d,0.0)*sca;\n        sca *= 0.9;\n    }\n    return clamp( 1.5 - occ, 0.0, 1.0 );\n}\n\n// https://iquilezles.org/articles/filterableprocedurals\nfloat gridTexture( in vec2 p, vec2 w )\n{\n    \n    vec2 i = (abs(fract((p-0.5*w)*0.5)-0.5)-\n                  abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    return 0.5 - 2.0*i.x*i.y;  \n}\n\n// https://iquilezles.org/articles/filterableprocedurals\nfloat gridTexture( in float p, in float dpdx, in float dpdy )\n{\n    float w =  0.01 + max(abs(dpdx),abs(dpdy));\n    float i = (abs(fract((p-0.5*w)*0.5)-0.5)-\n               abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    return 0.5 - 2.0*i;  \n}\n\n// https://iquilezles.org/articles/filteringrm\nvoid calcPxy( in vec3 ro, in vec3 rd, in vec3 rdx, in vec3 rdy, in float t, in vec3 nor, out vec3 dpdx, out vec3 dpdy )\n{\n    dpdx = ro + t*rdx*dot(rd,nor)/dot(rdx,nor);\n    dpdy = ro + t*rdy*dot(rd,nor)/dot(rdy,nor);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    \n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n#else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n#endif\n\n        //-----------------------------------------------------\n        // camera\n        //-----------------------------------------------------\n\n        float an = 1.0 - 0.15*iTime;\n\n        vec3 ro = vec3(1.0+6.0*sin(an),1.0,5.0*cos(an));\n        vec3 ta = vec3(1.0,0.0,0.0);\n\n        // camera matrix\n        vec3 ww = normalize( ta - ro );\n        vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n        vec3 vv = normalize( cross(uu,ww));\n\n        // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 3.0*ww );\n\n        // ray differentials\n        vec2 px = (2.0*(fragCoord+vec2(1.0,0.0))-iResolution.xy)/iResolution.y;\n        vec2 py = (2.0*(fragCoord+vec2(0.0,1.0))-iResolution.xy)/iResolution.y;\n        vec3 rdx = normalize( px.x*uu + px.y*vv + 3.0*ww );\n        vec3 rdy = normalize( py.x*uu + py.y*vv + 3.0*ww );\n        vec3 drddx = rdx;\n        vec3 drddy = rdy;\n\n        //-----------------------------------------------------\n        // render\n        //-----------------------------------------------------\n\n        vec3 col = clamp( vec3(0.95,0.95,1.0) - 0.75*rd.y, 0.0, 1.0 );\n        const vec3 lig = normalize(vec3(-0.2,0.6,0.9));\n        float sun = pow( clamp( dot(rd,lig), 0.0, 1.0 ), 8.0 );\n        col += 0.7*vec3(1.0,0.9,0.8)*pow(sun,4.0);\n        col *= 0.9;\n        vec3 bcol = col;\n\n        // raymarch\n        vec4 tmat = intersect(ro,rd);\n        float t = tmat.x;\n        if( tmat.z>-0.5 )\n        {\n            // geometry\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            if( tmat.z<0.5 )\n                nor = vec3(0.0,1.0,0.0);\n            vec3 ref = reflect( rd, nor );\n\n\n            // derivatives\n            vec3 dposdx;\n            vec3 dposdy;\n            calcPxy( ro, rd, rdx, rdy, t, nor, dposdx, dposdy );\n\n\n            // materials\n            vec3 mate = vec3(1.0);\n            vec2 uv = tmat.yw;\n            #if COMPUTE_UV==1\n                if( tmat.z>0.5 )\n                {\n                    uv.y = mod(uv.y,6.283185);\n                    uv = uv*vec2(10.0,1.0/6.283185) - vec2(0.4*iTime,0.0);\n                    #if TEXTURE==0\n                    //mate *= 0.5*gridTexture(uv*6.0);\n                    mate *= smoothstep(-0.02,0.02,sin(uv.x*6.283185*4.0)*sin(uv.y*6.283185*4.0));\n                    #else\n                    vec3 te = texture(iChannel0,uv).xyz;\n                    mate *= sqrt(te*te*te);\n                    #endif\n                }\n                else\n                {\n                    #if TEXTURE==0\n                          uv.x = 0.025*length(pos.xz);\n                    float dudx = 0.025*length(dposdx.xz) - uv.x;\n                    float dudy = 0.025*length(dposdy.xz) - uv.x;\n                    mate *= 0.5*gridTexture(uv.x*65.0, dudx*65.0, dudy*65.0);\n                    #else\n                    uv = pos.xz*0.2;\n                    vec3 te = texture(iChannel0,uv).xyz;\n                    mate *= sqrt(te*te*te);\n                    #endif\n                }\n            #else\n                mate *= 0.5*gridTexture(uv.x*80.0);\n            #endif\n            \n            \n            \n\n            float occ = calcAO( pos, nor );\n\n            // lighting\n            float sky = clamp(0.5+0.5*nor.y,0.0,1.0);\n            float dif = max(dot(nor,lig),0.0);\n            float bac = max(0.5 + 0.5*dot(nor,-lig),0.0);\n            float sha = 0.0; if( dif>0.001 ) sha=softshadow( pos+0.01*nor, lig, 0.0005, 32.0 );\n            float fre = clamp( 1.0 + dot(nor,rd), 0.0, 1.0 );\n            float spe = max( 0.0, pow( clamp( dot(lig,reflect(rd,nor)), 0.0, 1.0), 8.0 ) );\n\n            // lights\n            vec3 brdf = vec3(0.0);\n            brdf += 2.5*dif*vec3(1.00,0.90,0.80)*sha;\n            brdf += 1.0*sky*vec3(0.15,0.20,0.30)*occ;\n            brdf += 1.5*bac*vec3(0.10,0.10,0.10)*occ;\n            brdf += 1.0*fre*fre*vec3(1.00,1.00,1.00)*(0.1+0.9*occ*dif);\n\n            // surface-light interacion\n            col = mate.xyz* brdf;\n            col += spe*vec3(1.0,0.95,0.9)*sha*(0.1+0.9*fre*fre*fre)*occ;\n\n            // fog\n            col = mix( col, bcol, smoothstep(10.0,20.0,t) );\n        }\n\t\tcol += 0.4*vec3(1.0,0.8,0.7)*sun;\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n    \t\n    // gamma\n\ttot = pow( clamp(tot,0.0,1.0), vec3(0.45) );\n\n\tfragColor = vec4( tot, 1.0 );\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldj3Wh","date":"1387452122","viewed":11516,"name":"Quadratic Bezier - distance","username":"iq","description":"Intersecting quadratic Bezier segments in 3D. Used Microsoft's paper as pointed out by tayholliday in https://www.shadertoy.com/view/XsX3zf. Since 3D quadratic Bezier segments are planar, the 2D version can be used to compute the distance to 3D curves.","likes":117,"published":3,"flags":0,"usePreview":0,"tags":["procedural","3d","raymarching","distancefield","bezier","quadratic"],"hasliked":0,"parentid":"","parentname":""}}