{"ver":"0.1","info":{"id":"wsfXzH","date":"1550586451","viewed":318,"name":"Noisy grid deformation","username":"Simplyfire","description":"first I made a grid and then I only showed parts of it based on noise and then I displaced the whole thing based on the same noise so it has a kind of a 3d feel to it","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["noise","grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: Krab\t\n// Title: Functions\n\n#define PI 3.14159265359\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\nfloat cubicPulse( float c, float w, float x )\n{\n    x = abs(x - c);\n    if( x>w ) return 0.0;\n    x /= w;\n    return 1.0 - x*x*(3.0-2.0*x);\n}\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\nfloat snoise(vec3 p) {\n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n    vec4 w, d;\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n    w = max(0.6 - w, 0.0);\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n    w *= w;\n    w *= w;\n    d *= w;\n    return dot(d, vec4(52.0));\n}\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 rgb( in vec3 hsb){\n    vec3 rgb = clamp(abs(mod(hsb.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return hsb.z * mix(vec3(1.0), rgb, hsb.y);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float t = iTime;\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 color = vec3(0.);\n        \n    float noiseScl = 10.5;\n    float n = snoise(vec3(uv.x*noiseScl, uv.y*noiseScl, t));\n    \n    uv += .08*n;\n    \n    float modScl = .05;\n    uv = mod(uv, modScl);\n    float pulseX = cubicPulse(modScl*.5, 0.012, uv.x);\n    float pulseY = cubicPulse(modScl*.5, 0.012, uv.y);\n    \n    float pct = 0.;\n    pct += n*pulseX;\n    pct += n*pulseY;\n    pct = smoothstep(0., 1.0, pct);\n    pct = clamp(pct, .0, 1.);\n    \n    color += rgb(vec3(.6+pct*0.6, 1., pct));\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}