{"ver":"0.1","info":{"id":"3dyyRh","date":"1602176026","viewed":2033,"name":"Output Number for Debugging","username":"cyangreen","description":"Since I didn't find anything like this, I thought I create a kind of debugging/logging shader, which I'd like to share. Improvements are welcome.","likes":11,"published":1,"flags":0,"usePreview":1,"tags":["number","debug","log"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define BLACK vec3(0)\n#define WHITE vec3(1)\n#define GRAY vec3(.5)\n#define RED vec3(1.,.3,.3)\n#define BLUE vec3(.3,.3,1.)\n#define GREEN vec3(.3,1.,.3)\n#define YELLOW vec3(1.,1.,.3)\n\n// From: https://www.shadertoy.com/view/4sBfRd\nvec4 char(vec2 p, int c) {\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\n\n// From: https://www.shadertoy.com/view/Md23DV\nfloat disk(vec2 r, vec2 center, float radius) {\n    return 1. - smoothstep(radius - .002, radius + .002, length(r - center));\n}\n\n// Modified from: https://www.shadertoy.com/view/Md23DV\nfloat coordinateGrid(vec2 r) {\n\tfloat result;\n\tfor(float i = -2.; i <= 2.; i += .1) for(int j = 0; j < 2; j++) {\n\t\tresult += 1. - smoothstep(.0, .003, abs(r[j] - i));\n\t\tif(mod(i, 2.) < .01) result += 1. - smoothstep(.0, .004, abs(r[j] - i - 1.));\n\t\tif(abs(i) < .01) result += 1. - smoothstep(.0, .005, abs(r[j]));\t\n\t}\n\treturn result;\n}\n\nfloat printNumber(vec2 fragCoord, float number) {\n\tfloat fontSize = 16.;\n\t// init digits\n\tint digits[12];\n\t// numbers start at 48 in font map\n\tfor(int i = 0; i <= 9; i++) digits[i] = 48 + i;\n\tdigits[10] = 46; // .\n\tdigits[11] = 45; // -\n\n\tint a[15]; // array for digits of number\n\tint c = 0; // counter for array = length\n\tfloat tmp = abs(number);\n\t// do not display numbers higher than this due to precision issues\n\tif (tmp > 999999.) {\n\t\twhile(c < 8) a[c++] = 11; // --------\n\t} else {\n\t\tif(number < 0.) a[c++] = 11; // add - if number is negative\n\t\tint v; // current digit\n\t\tbool f; // true if first digit > 0 found\n\t\tfor(int i = 8; i >= -4; i--) {\n\t\t\tv = int(tmp / pow(10., float(i))); // calculate digit\n\t\t\t// omit leading zeros\n\t\t\tif(v > 0 || f) {\n\t\t\t\ta[c++] = v; // add digits 0-9\n\t\t\t\ttmp -= float(v) * pow(10., float(i)); // subtract\n\t\t\t\tf = true;\n\t\t\t}\n\t\t\t//decimal point\n\t\t\tif(i == 0 && abs(number) < 1.) a[c++] = 0; // add 0\n\t\t\tif(i == 0) a[c++] = 10; // add .\n\t\t}\n\t\twhile(a[c-1] == 0) c--; // strip 0\n\t\tif(a[c-1] == 10) c--; // strip .\n\t}\n\t// coordinate system that starts at bottom left\n\t// which is independent of aspect ratio\n\tvec2 p = fragCoord.xy / iResolution.y;\n\tfloat result;\n\t// output number\n\tfor(int i = 0; i < c; i++) {\n\t\tresult += char(p * 256. / fontSize + vec2(-.5 * float(i), 0.0), digits[a[i]]).x;\n\t}\n\treturn result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 r = (fragCoord.xy * 2. - iResolution.xy) / iResolution.y;\n\n\tvec3 col;\n\n\tfloat radius = sin(iTime * .3) * .3 + .1; \n\tcol = mix(col, BLUE, disk(r, vec2(.1, .1), radius) );\n\tcol = mix(col, YELLOW, disk(r, vec2(-.1, -.1), radius * -1.) );\n\tcol = mix(col, RED, coordinateGrid(r) / 3.);\n\n\tcol = mix(col, GREEN, printNumber(fragCoord, radius));\n\n\tfragColor = vec4(col, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}