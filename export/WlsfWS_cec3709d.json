{"ver":"0.1","info":{"id":"WlsfWS","date":"1597614381","viewed":125,"name":"circle in circle","username":"solquemal","description":"Apollonian casket","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractals2dapollo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(vec2 space, vec2 center, float amount){\n    return vec2(cos(amount) * (space.x - center.x) + sin(amount) * (space.y - center.y),\n        cos(amount) * (space.y - center.y) - sin(amount) * (space.x - center.x));\n}\n\nfloat reflection(inout vec2 pos, float angle){\n    vec2 normal = vec2(cos(angle),sin(angle));\n    float d = dot(pos, normal);\n    pos -= normal*min(0.,d)*2.;\n    return smoothstep(0.1,0.,abs(d));\n}\nvec3 cosPalette(  float t,  vec3 a,  vec3 b,  vec3 c, vec3 d ){\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat apollonian(vec2 z){\n    float s =1.;\n    float PI =3.14;\n    \n    for(int i=0;i<10;i++){\n        float f = 2. / dot(z,z);     \n        z *= f; s *= f;\n        \n        reflection(z,-PI/2.);\n        z= rotate(z,vec2(0.),PI/2.);\n        z.y = 2.*fract(z.y*0.5) - 1.;\n        \n    }\n\n    return (length(z)-.3)/s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    vec2 uv = (fragCoord.xy / iResolution.xy * 2.0 -1.0) \n        \t\t* vec2(iResolution.x/iResolution.y, 1.0);\n    vec2 pos = uv *1.5;\n    vec4 color;\n    \n    vec3 a = vec3(0.2);  \n    vec3 b = vec3(0.5);  \n    vec3 c = vec3(3.,1.5,2.);     \n     vec3 d = vec3(.1,0.17,0.23); \n    \n    float cir = 1.5-length(pos);\n    float t = min(cir, apollonian(pos));\n    color.rgb = cosPalette(t +iTime*0.041,a,b,c,d);\n\n    \n    fragColor = color;\n}\n","name":"Image","description":"","type":"image"}]}