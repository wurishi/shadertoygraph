{"ver":"0.1","info":{"id":"4lGczt","date":"1537286237","viewed":488,"name":"polar rose animation","username":"huttarl","description":"Work in progress:\nExploring the problem shown at https://brilliant.org/practice/why-complete-this-exploration/?p=3:\ngraph of r = cos(n theta).\nChange the constant n to explore how the function works.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["animation","graph","function","polar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/** Given the family of polar equations r = cos(n theta),\n \thow is the number of \"petals\" related to n?\n\t\n\tIt comes down to, what is the period of cos(n theta),\n\tand the period of r, for a given n? And what is\n\ttheir combined period?\n\n\tTODO: manipulate n derived from iTime,\n\tthat gives extra time to interesting values like 1/k, k/2,\n\tetc. Display n as a fraction when it is an interesting value.\n\n\tOR better: control n using mouse clicks. Could use\n\tvertical and horizontal sliders to control integers a and b\n\tand let n = a/b.\n*/\n\n// Set n to the fraction you want to test:\nconst float n = 1./2.;\n// Or animate over time:\n// const float n = iTime * 0.1;\n\n// Increasing this makes things more cluttered but lets you explore\n// more complex roses.\nconst float maxTurns = 5.;\n\nconst float twoPi = 2. * 3.1415926536;\n\n/** Distance to polar graph r = cos(n * theta). \n  \tDoesn't compute true distance (TODO). */\nfloat dRose(in float theta, in float r, in float n) {\n    float result = 2.;\n    // Check values of theta + 2pi * i.\n    for (float i = 0.; i < maxTurns; i += 1.) {\n\t\t// With extra turns counterclockwise:\n        result = min(result, abs(r - cos(n * (theta + twoPi * i))));\n\t\t// With extra turns clockwise:\n    \tresult = min(result, abs(r - cos(n * (theta - twoPi * i))));\n        // Negative r:\n    \tresult = min(result, abs(-r - cos(n * (theta + twoPi * (i - .5)))));\n    \tresult = min(result, abs(-r - cos(n * (theta - twoPi * (i - .5)))));\n        \n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = (fragCoord - iResolution.xy * .5)/iResolution.y * 2.2;\n\n\tfloat theta = atan(p.y, p.x);\n    // Actual r\n    float r = length(p);\n    \n\tfloat d = dRose(theta, r, n);\n    vec3 col = vec3(smoothstep(0., .015, abs(d)));\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}