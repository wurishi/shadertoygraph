{"ver":"0.1","info":{"id":"3scyzB","date":"1601239513","viewed":137,"name":"MoonSet","username":"ShelveAndMind","description":"The landscape of a moonset","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["landscape","moon","night","dark","moonset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Y_NOISE = .3;\nfloat NOISE_ZOOM = .75;\nfloat MAX_HEIGHT = .25;\nfloat CRATER_ZOOM = 1.;\nfloat CRATER_ZOOM2 = .3;\nfloat LAKE_ZOOM = 1.;\nfloat Y_LAKE = .28;\n\nvec2 N22(vec2 n) {\n    vec2 rn;\n    rn.x = fract(sin(n.x*1542.164+n.y*9817.162)*193.54);\n    rn.y = fract(sin(n.x*7164.638+n.y*4872.076)*424.87);\n    return rn;\n}\nfloat Moon(vec2 uv, vec2 c, float r) {\n    float distMoon = length(uv-c);\n    float moon = smoothstep(r, r*.8, distMoon);\n    moon += .2/(distMoon+.2);\n    //Craters\n    if (distMoon < r) {\n        vec4 channel0 = texture(iChannel0, vec2(uv.x*CRATER_ZOOM, uv.y*CRATER_ZOOM));\n        vec4 channel02 = texture(iChannel0, vec2(uv.x*CRATER_ZOOM2+.3, uv.y*CRATER_ZOOM2+.75));\n        float n = length(channel0.xyz)*length(channel02.xyz);\n        n *= 1.-smoothstep(0., r, distMoon);\n        if (n>.12) moon = .0;\n    }\n    return moon;\n}\nfloat Stars(vec2 uv, float n, float r) {\n    vec2 gv = fract(uv*n);\n    vec2 id = floor(uv*n);\n    vec2 c = N22(id)*.8+.1;\n    float dC = length(gv-c);\n    float s = smoothstep(.1*r, 0.02*r, dC);\n    return s;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x /= iResolution.y/iResolution.x;\n    \n    vec3 col = vec3(0);\n    \n    vec2 center = vec2(.2, .1);\n    float radius = .25;\n    \n    float moon = Moon(uv, center, radius);\n    float stars = Stars(uv, 5., .35);\n    stars += Stars(uv, 10., .3);\n    stars += Stars(uv, 15., .2);\n    \n    if (uv.y > 0.) {\n        col += moon;\n        col += stars;\n        \n        //Darken landscape\n        vec4 channel0 = texture(iChannel0, vec2(uv.x*NOISE_ZOOM, Y_NOISE));\n        float n = length(channel0.xyz);\n        n *= smoothstep(radius, radius*2., abs(uv.x-center.x));\n        if (uv.y < n*.5*MAX_HEIGHT)\n            col = vec3(0.);\n        else if (moon != 0.){\n            //Gradiente\n            col += vec3(0, 0, .1);\n        \tcol += vec3(0., 0., .2*smoothstep(.5, 0., uv.y));\n            col += .5*smoothstep(.2, 0., abs(uv.y))*vec3(.3, .3, 1);\n        }\n        else {\n            vec4 channel02 = texture(iChannel0, vec2(uv.x*NOISE_ZOOM, uv.y*NOISE_ZOOM));\n            col = vec3(length(channel02.xyz))+vec3(.4);\n        }\n    }\n    else {\n        vec4 channel0 = texture(iChannel0, vec2(uv.y*LAKE_ZOOM, Y_LAKE));\n        float lakeMax = center.x+radius*.3+(center.x + radius + length(channel0.xyz))*smoothstep(0., -.3,uv.y);\n        channel0 = texture(iChannel0, vec2(uv.y*LAKE_ZOOM, Y_LAKE+.42));\n        float lakeMin = center.x-radius*.3+(center.x - radius - length(channel0.xyz))*smoothstep(0., -.3,uv.y);\n        if (uv.x > lakeMin && uv.x < lakeMax || uv.y < -.29) { \n            col = vec3(.2, .2, .6);\n    \t}\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}