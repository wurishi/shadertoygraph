{"ver":"0.1","info":{"id":"4fXczX","date":"1721376219","viewed":30,"name":"AARBF - AMR Grids","username":"natevm","description":"Sample code for implementing \"attribute aware\" radial basis functions on AMR grid cells, similar to what's described in this paper:\nhttps://www.sci.utah.edu/publications/Mor2023a/AARBF.pdf\n\nThe technique generalizes with a closest point to brick query\n\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["volume","point","range","rbf","query","aarbf","amr"],"hasliked":0,"parentid":"lflyzj","parentname":"AARBF - Particles (Range Query)"},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2024 Nate Morrical\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// The code below shows how to implement the AA-RBF interpolant from this paper:\n//   https://www.sci.utah.edu/publications/Mor2023a/AARBF.pdf\n// but for AMR grid cells, similar to the RBF scheme used in this paper:\n//   https://www.willusher.io/publications/exabrick/\n\n// The bulk of the method is in the \"interpolate\" function below\n\n// More point containment queries here: https://www.shadertoy.com/playlist/fXdfzX\n\n#if HW_PERFORMANCE==0\n#define NUM_STEPS 8\n#else\n#define NUM_STEPS 64    \n#endif\n\n#define NUM_GRIDS 3\n\n#define RES_1 1\n#define RES_2 2\n#define RES_3 3\n\nstruct Grid {\n    vec3 center;\n    vec3 extents;\n    \n    float value;\n    float radius;\n    \n    ivec3 res;\n};\n\n\n#define DENSITY 4.0\n#define RADIUS 1.0\n\n#define EXPOSURE 1.0\n\n// Attribute colormap\nvec3 viridis(float t) {\n    t = clamp(t, 0.0, 1.0);\n    \n    const vec3 c0 = vec3(0.2777273272234177, 0.005407344544966578, 0.3340998053353061);\n    const vec3 c1 = vec3(0.1050930431085774, 1.404613529898575, 1.384590162594685);\n    const vec3 c2 = vec3(-0.3308618287255563, 0.214847559468213, 0.09509516302823659);\n    const vec3 c3 = vec3(-4.634230498983486, -5.799100973351585, -19.33244095627987);\n    const vec3 c4 = vec3(6.228269936347081, 14.17993336680509, 56.69055260068105);\n    const vec3 c5 = vec3(4.776384997670288, -13.74514537774601, -65.35303263337234);\n    const vec3 c6 = vec3(-5.435455855934631, 4.645852612178535, 26.3124352495832);\n\n    vec3 srgb = c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n    return pow(srgb, vec3(2.2));\n}\n\n// Density transfer function\nfloat densityMap(float phi) {\n    return clamp(phi, 0.0, 1.0);\n    //if (phi < .5) return 0.0;\n    //return clamp((phi - .5)/.5, 0.0, 1.0);\n}\n\n// Evaluates the RBF \"φ^\" (from Eq. 1)\nfloat evaluateRBF(vec3 x, float r, vec3 p, float sigma) {\n    r = max(r, 1e-3f);\n    return exp(-.5 * pow((distance(x, p) * sigma) / r, 2.f));\n}\n\n// If the point is guaranteed to be always outside of the box, you can\n// use closestPointToBoxExterior() instead.\nvec3 closestPointToBoxExterior( vec3 p, vec3 b )\n{\n    return p-sign(p)*max(abs(p)-b,0.0);\n}\n\n// Tests if a point at the location \"x\" is within range of the query point.\n// Used to determine the piecewise \"φ\" (from Eq. 2.)\nbool inRange(vec3 x, float r, vec3 p) {\n    vec3 d = p - x;\n    r = max(r, 1e-3f);\n    if (dot(d,d) <= r*r) return true;\n    return false;\n}\n\n#define M_2PI 6.2831853071795865f\n#define M_GRC 0.61803398875f\n\n\n// Particle positions, with \"y\" up and data values stored in \"w\" \nvec4 interpolate(vec3 P, in Grid grids[NUM_GRIDS]) {    \n    // The accumulated density value \"Φ\" (from Eq. 3)\n    float phiSum = 0.0; \n    \n    // The accumulated density-weighted color value, ∑ θ*φ (in Eq. 4)\n    vec3 thetaSum = vec3(0.0); \n    \n    int count = 0;\n    \n    int cellOffset = 0;\n        \n    for (int i = 0; i < NUM_GRIDS; ++i) {\n        \n        float t = float(i) / float(NUM_GRIDS);\n        float r = grids[i].radius;//RADIUS * (.5 + .5 * t);\n        vec3 c = grids[i].center;\n        vec3 e = grids[i].extents;\n        \n        vec3 cp = closestPointToBoxExterior(P - c, e);\n        cp += grids[i].center;\n        \n        if (inRange(cp, r, P)) \n        {\n            count++;\n            \n            float phi = evaluateRBF(cp, r, P, 2.f); //1.0;\n            \n            vec3 bl = c - e;\n            vec3 diag = e * 2.0;\n            vec3 pc = (cp - bl) / (diag);\n            ivec3 cell = min(ivec3(pc * vec3(grids[i].res)), grids[i].res-1);\n            int idx = cell.z + cell.y * grids[i].res.z + cell.x * grids[i].res.z * grids[i].res.y;\n            int numCells = grids[i].res.x * grids[i].res.y * grids[i].res.z;\n            float ct = float(idx) / float(numCells);\n            float it = float(i) / float(NUM_GRIDS);\n            \n            float t = .1 + it + (1.0 / float(NUM_GRIDS) * fract(ct * 10.0 * cos(iTime * .1)));\n            \n            vec3 theta = viridis(smoothstep(0.0, 1.0, t));\n\n            phiSum += phi;\n            thetaSum += theta * phi;\n        }\n    }\n    \n    // If no particles were in range, return a background field value\n    if (phiSum == 0.0) return vec4(0.0);\n\n    // Return weighted average color \"Θ\" (From Eq. 4) in the XYZ and \n    // the transformed density value (explained at end of sec 3.1.3) in W.\n    return vec4(thetaSum / phiSum, densityMap(phiSum));\n}\n\n\n//-----------------------------------------------------------------------------\n// Utils\n//-----------------------------------------------------------------------------\n\nvec4 over(vec4 a, vec4 b) {\n  vec4 result;\n  result.a = a.a + b.a * (1.f - a.a);\n  if (result.a == 0.f)\n    return a; // avoid NaN\n  result.rgb = (a.rgb * a.a + b.rgb * b.a * (1.f - a.a)) / result.a;\n  return result;\n}\n\n\n\n// Vertex positions for the element\n\n//-----------------------------------------------------------------------------\n// Main functions\n//-----------------------------------------------------------------------------\n\nGrid[NUM_GRIDS] CreateGrids() {\n    Grid[NUM_GRIDS] grids;\n        \n    float offset = 1.0 + 2.0 * smoothstep(0.0, 1.0, .5 + .5 * cos(iTime));\n    float rbfRad = smoothstep(1.0, 0.0, .5 + .5 * cos(iTime)); \n    \n    // A\n    grids[0].center = vec3(.0, -.5, .0) * offset;\n    grids[0].extents = vec3(1.0, .5, 1.0);\n    grids[0].value = .5 + .5 * cos(iTime * 1.1);\n    grids[0].radius = (.5 / float(RES_1)) * rbfRad;\n    grids[0].res = ivec3(2, 1, 2) * RES_1;\n    \n    \n    // B\n    grids[1].center = vec3(.5, +.5, .0) * offset;\n    grids[1].extents = vec3(0.5, .5, 1.0);\n    grids[1].value = .5 + .5 * cos(iTime * 1.2);\n    grids[1].radius = (.25 / float(RES_2)) * rbfRad;\n    grids[1].res = ivec3(2, 2, 4) * RES_2;\n    \n    \n    // C\n    grids[2].center = vec3(-.5, +.5, .0) * offset;\n    grids[2].extents = vec3(0.5, .5, 1.0);\n    grids[2].value = .5 + .5 * cos(iTime * 1.3);\n    grids[2].radius = (.125 / float(RES_3)) * rbfRad;\n    grids[2].res = ivec3(4, 4, 8) * RES_3;\n    \n    return grids;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 v = -1.0 + 2.0*q;\n    v.x *= iResolution.x/ iResolution.y;\n           \n    float an = 1.57 + ((iMouse.z > 0.0) ? 6.283185*iMouse.x/iResolution.x : 0.25*iTime);\n    vec3 ro = vec3( 3.5*cos(an), 0.7, 3.5*sin(an) ) * 2.0;\n    vec3 ta = vec3( 0.0, -0.1, 0.0 );\n    \n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n    // create view ray\n    vec3 rd = normalize( v.x*uu + v.y*vv + 3.0*ww );\n        \n    // create grids    \n    Grid[NUM_GRIDS] grids = CreateGrids();\n    \n\tvec4 color = vec4(.0);\n\t\n    float startRayOffset = 0.0f;\n    int frame = iFrame % 64;\n        \n    // blue noise \n    // (inspired by the STBN used in section 3.3.)\n    startRayOffset = texture(iChannel0, fragCoord / 1024.0f).r;\n    startRayOffset = fract(startRayOffset + float(frame) * M_GRC);\n\t\n\t\n\tfloat zMin         = 4.0;\n    float zMax         = 10.0;\n\tfloat step         = (zMax - zMin) / float(NUM_STEPS);\n    vec3 p             = ro + rd * zMin + rd * step * startRayOffset;    \n\tint zer = int(min(iTime, 0.)); // Hack to force loop unrolling.\n    for(int i = zer; i < NUM_STEPS; i++)\n\t{\n        vec4 value = interpolate(p, grids);\n        \n        // Colormapped value and a hardcoded optical density\n        vec3 rgb = value.rgb * EXPOSURE;\n        float density = value.a * DENSITY;\n        float rho = 1.0 - exp(-density * step);\n        color = over(color, vec4(rgb, rho));\n        if (color.a > .95) break;\n\n        p += rd*step;\n\t}\n         \n    // Composite over a background\n    color = over(color, vec4(vec3(0.01)*(1.0-0.2*length(v)), 1.0));\n\n    color.rgb = pow(color.rgb, vec3(1.0/2.2));\n    \n    // cheap dithering\n    color.rgb += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)/512.0;\n\n    fragColor = color;\n\n}\n","name":"Image","description":"","type":"image"}]}