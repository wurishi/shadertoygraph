{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define PI2 6.28318530718\n\nfloat smin( float a, float b, float k ) {\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\nmat2 rotate (float angle) {\n \treturn mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle));   \n}\n\n\nfloat cilinder (vec3 p) {\n    p.y -= 1.0;\n\treturn length(p.xy) - 1.25;   \n}\n\nfloat sphere (vec3 p) {\n    return length(p) - 7.0;\n}\n\nvec2 scene (vec3 p) {\n    float m = 9999.0;\n    for (int i = 0; i < 6; ++i) {\n        vec3 pos = p;\n        pos.y += cos(pos.x * 0.25 + iTime*4.0) * 2.0;\n        pos.y -= 8.0 * exp(-dot(pos.xz, pos.xz) * 0.0125);\n        pos.x += sin(pos.z * 0.25 + iTime*4.0) * 2.0;\n        pos.xz = pos.xz * rotate(float(i)*PI2/6.0);\n     \tm = min(m, cilinder(pos));   \n    }\n    \n    float s = sphere(p-vec3(0.0, 9.0, 0.0));\n    float blend = smin(m, s, 0.25);\n    \n    float plane = p.y+7.0;\n    \n    vec2 ret = vec2(min(blend, plane), blend > plane ? 1.0 : 0.0);\n    \n \treturn ret;   \n}\n\nvec3 normal (vec3 p) {\n \tvec2 eps = vec2(0.001, 0.0);\n    return normalize(vec3(\n    \tscene(p + eps.xyy).x - scene(p - eps.xyy).x,\n        scene(p + eps.yxy).x - scene(p - eps.yxy).x,\n        scene(p + eps.yyx).x - scene(p - eps.yyx).x\n    ));\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv*2.0-1.0;\n \tuv.x *= iResolution.x / iResolution.y;\n    \n    vec3 color = vec3(0.0);\n    \n    vec3 ro = vec3(uv, 0.0);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    \n    ro.y = 12.0;\n    float r = 24.0 + 8.0*sin(iTime);\n    ro.z = -r * cos(iTime * 0.25);\n    ro.x = -r * sin(iTime * 0.25);\n    rd.xz *= rotate(-iTime * 0.25);\n    \n    float h = 0.0;\n    float last = 9999.0;\n    for (int i = 0; i < 100; ++i) {\n    \tif (h > 1000.0) break;\n        vec3 p = ro + h * rd;\n        vec2 dist = scene(p);\n        if (dist.x < 0.5) {\n         \t last = dist.x;  \n        } else {\n            if (last < 0.5) {\n                color = vec3(0.0, 0.0, 0.0);\n                break;\n            } else last = 9999.0;\n        }\n        h += max(0.01, dist.x);\n        \n        if (dist.x < 0.001) {\n            vec3 n = normal(p);\n            float sun = clamp(dot(n, vec3(0.0, 1.0, 0.0)), 0.0, 1.0);\n            float fog = exp(-length(ro-p) * 0.0125);\n            color = vec3(1.0);\n            if (dist.y > 0.5) {\n                    color = vec3(1.0);//texture(iChannel1, p.xz*0.025).rgb;\n                \t// hard shadow\n                \tfloat sh = 0.1;\n                \tfloat shadow = 1.0;\n               \t \tfor (int i = 0; i < 32; ++i) {\n    \t\t\t\t\tif (sh > 16.0) break;\n                        vec3 pp = p + sh*vec3(0.0, 1.0, 0.0);\n                        float sc = scene(pp).x;\n                        sh += max(0.01, sc);\n                        if (sc < 0.0001) {\n                            shadow = 0.0;\n                            break;\n                        } else {\n                         \tshadow = min(2.0*sc/sh, shadow);   \n                        }\n                    }\n                color*=mix(0.05, 1.0, shadow);\n                \n             \t   /*color += rand(floor(p.xz * 0.125)) * 0.25;\n             \t   color += rand(floor(p.xz * 0.25)) * 0.25;\n             \t   color += rand(floor(p.xz * 0.5)) * 0.25;\n             \t   color += rand(floor(p.xz)) * 0.25;*/\n            } else {\n                color = vec3(1.0);//texture(iChannel0, p.xz * 0.01).rgb;//vec3(1.0, 0.7, 0.28);\n             \tfloat spec = pow(clamp(dot(n, normalize(ro-p)), 0.5, 1.0), 8.0);\n                //color += spec*4.0;\n            }\n            color *= mix(0.125, 1.0, sun) * fog;\n         \tbreak;   \n        }\n    }\n    \n\tfragColor = vec4(pow(color, vec3(1.0/1.678)), 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MtfGDf","date":"1425733911","viewed":240,"name":"raymarching german 2","username":"germangb","description":"experiment #2\n\nsoft shadows\nhttps://iquilezles.org/articles/rmshadows/rmshadows.htm","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""}}