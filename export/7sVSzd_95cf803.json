{"ver":"0.1","info":{"id":"7sVSzd","date":"1635165721","viewed":294,"name":"Simple Circle (Learning Shaders)","username":"George_Takei","description":"A simple circle.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License (MIT)\n//\n// Copyright (c) 2021 George_Takei\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n#define DefaultColor vec4(0.0, 0.0, 0.0, 1.0)\n#define Radius float(0.3)\n#define Fade float(0.005)\n#define AdjustedCenter vec2(-0.5, -0.5)\n\nvec3 DrawCircle(vec2 uv, float radius, float fade)\n{\n    // Determine the length of the point away from the \"center\" of the circle.\n    float uvLength = length(uv);\n    // Apply color to any coordinate that lies within the circle.\n    // Black if coord is outside and white if it is inside the circle.\n    // The smoothstep function applies the fade to the circle.\n    // The min value is the radius, and max value is the radius minus\n    // the \"fade\" variable.\n    // This means the fade is applied within the bounds of the circle.\n    vec3 circle = vec3(smoothstep(radius, radius - fade, uvLength));\n    \n    return vec3(circle);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Change center of plane before messing with its aspect ratio.\n    // (0, 0) coordinate is located at bottom left of viewport.\n    uv += AdjustedCenter;\n    // Adjust viewport/plane aspect ratio from rectangular to square.\n    vec2 aspect = vec2(iResolution.x / iResolution.y, iResolution.y / iResolution.y);\n    // Apply adjusted aspect ratio to uv coordinates.\n    uv *= aspect;\n    \n    // Draw circle and return color value.\n    vec3 circle = DrawCircle(uv.xy, Radius, Fade);\n    \n    fragColor = vec4(circle, 1.0);\n}","name":"Image","description":"","type":"image"}]}