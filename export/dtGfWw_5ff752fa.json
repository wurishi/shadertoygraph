{"ver":"0.1","info":{"id":"dtGfWw","date":"1702451401","viewed":42,"name":"POV: You're in the Menger Sponge","username":"noahsk","description":"just a little toying around with 3d fractals, enjoy!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal","menger","shader","sponge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Raymarching distance function for a Menger Sponge\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n}\n\nfloat mengerSponge(vec3 p) {\n    const int iterations = 4;\n    float scale = 3.0;\n    float s = 1.0;\n    \n    for (int i = 0; i < iterations; ++i) {\n        vec3 a = mod(p * s, 2.0) - 1.0;\n        s *= 3.0;\n        vec3 r = abs(1.0 - 3.0 * abs(a));\n\n        float da = max(r.x, r.y);\n        float db = max(r.y, r.z);\n        float dc = max(r.z, r.x);\n        float c = (min(da, min(db, dc)) - 1.0) / s;\n\n        if (c > 0.0) {\n            return c;\n        }\n    }\n\n    return 0.0;\n}\n\n// Ray marching main loop\nfloat rayMarch(vec3 ro, vec3 rd, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < 100; i++) {\n        float dist = mengerSponge(ro + rd * depth);\n        if (dist < 0.001 * depth) break;\n        depth += dist;\n        if (depth >= end) break;\n    }\n    return depth;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    float lt = cos(iTime);\n    float tt = sin(iTime);\n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, -4.0);\n    ro = ro + vec3(0.0, 0.0, 2.0 * lt);\n    vec3 ta = vec3(0.0, 0.0, 0.0);\n\n    vec3 cf = normalize(ta - ro);\n    vec3 cr = normalize(cross(vec3(0.0, 1.0, 0.0), cf));\n    vec3 cu = cross(cf, cr);\n\n    float fov = 0.5;\n    vec3 rd = normalize(uv.x * cr + uv.y * cu + fov * cf);\n\n    float t = rayMarch(ro, rd, 0.1, 5.0);\n\n    vec3 col;\n    if (t < 5.0) {\n        col = 0.5 + 0.5 * cos(3.0 + t * 10.0 + vec3(0.0, 0.5, 1.0));\n    } else {\n        col = vec3(0.12, 0.11, 0.13);\n    }\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}