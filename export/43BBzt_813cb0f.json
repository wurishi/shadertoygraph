{"ver":"0.1","info":{"id":"43BBzt","date":"1729792577","viewed":35,"name":"Zernike Aberrations","username":"Paganosama","description":"Zernike Aberrations","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["zernike"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize fragment coordinates to [-1, 1]\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = 2.0 * uv - 1.0;\n\n    // Mouse input and mapping to normalized coordinates\n    vec2 mousePos = iMouse.xy / iResolution.xy;\n\n    // Zernike coefficients (36 terms)\n    float zernike_coeffs[18];\n\n    // Subdivide the screen into 36 vertical regions (each for a different coefficient)\n    for (int i = 0; i < 18; i++) {\n        if (mousePos.y > float(i) / 18.0 && mousePos.y < float(i + 1) / 18.0) {\n            // Adjust the coefficient based on the horizontal mouse position\n            zernike_coeffs[i] = (mousePos.x - 0.5) * 2.0;  // Mouse X position controls value (-1 to 1)\n        } else {\n            // Default value for other coefficients\n            zernike_coeffs[i] = 0.0;\n        }\n    }\n\n    // Zernike polynomial calculations for the first 36 terms\n    float zernike = 0.0;\n    \n    // Z0: Piston\n    zernike += zernike_coeffs[0] * 1.0;  \n    \n    // Z1, Z2: Tilt X, Tilt Y\n    zernike += zernike_coeffs[1] * 2.0 * uv.x;  // Tilt X\n    zernike += zernike_coeffs[2] * 2.0 * uv.y;  // Tilt Y\n    \n    // Z3: Defocus\n    zernike += zernike_coeffs[3] * (2.0 * uv.x * uv.x + 2.0 * uv.y * uv.y - 1.0);  // Defocus\n    \n    // Z4, Z5: Astigmatism\n    zernike += zernike_coeffs[4] * (uv.x * uv.x - uv.y * uv.y);  // Astigmatism X\n    zernike += zernike_coeffs[5] * (2.0 * uv.x * uv.y);  // Astigmatism Y\n    \n    // Z6, Z7: Coma\n    zernike += zernike_coeffs[6] * (3.0 * uv.x * uv.x * uv.x - 2.0 * uv.x);  // Coma X\n    zernike += zernike_coeffs[7] * (3.0 * uv.y * uv.y * uv.y - 2.0 * uv.y);  // Coma Y\n    \n    // Z8, Z9: Trefoil\n    zernike += zernike_coeffs[8] * (uv.x * uv.x * uv.x - 3.0 * uv.x * uv.y * uv.y);  // Trefoil X\n    zernike += zernike_coeffs[9] * (3.0 * uv.x * uv.x * uv.y - uv.y * uv.y * uv.y);  // Trefoil Y\n    \n    // Z10: Spherical Aberration\n    zernike += zernike_coeffs[10] * (6.0 * uv.x * uv.x * uv.x * uv.x + 6.0 * uv.y * uv.y * uv.y * uv.y - 6.0 * (uv.x * uv.x + uv.y * uv.y) + 1.0);\n\n    // Z11, Z12: Secondary Astigmatism\n    zernike += zernike_coeffs[11] * (uv.x * uv.x * uv.x * uv.x - uv.y * uv.y * uv.y * uv.y);  // Secondary Astigmatism X\n    zernike += zernike_coeffs[12] * (4.0 * uv.x * uv.y * (uv.x * uv.x - uv.y * uv.y));  // Secondary Astigmatism Y\n\n    // Z13, Z14: Secondary Coma\n    zernike += zernike_coeffs[13] * (5.0 * uv.x * uv.x * uv.x * uv.x * uv.x - 4.0 * uv.x * uv.x * uv.x);  // Secondary Coma X\n    zernike += zernike_coeffs[14] * (5.0 * uv.y * uv.y * uv.y * uv.y * uv.y - 4.0 * uv.y * uv.y * uv.y);  // Secondary Coma Y\n\n    // Z15, Z16: Secondary Trefoil\n    zernike += zernike_coeffs[15] * (uv.x * uv.x * uv.x * uv.x * uv.x - 10.0 * uv.x * uv.y * uv.y * uv.y * uv.x);  // Secondary Trefoil X\n    zernike += zernike_coeffs[16] * (10.0 * uv.x * uv.x * uv.x * uv.y - uv.y * uv.y * uv.y * uv.y * uv.y);  // Secondary Trefoil Y\n\n    // Z17: Secondary Spherical Aberration\n    zernike += zernike_coeffs[17] * (20.0 * uv.x * uv.x * uv.x * uv.x * uv.x * uv.x + 20.0 * uv.y * uv.y * uv.y * uv.y * uv.y * uv.y - 30.0 * uv.x * uv.x * uv.x * uv.x - 30.0 * uv.y * uv.y * uv.y * uv.y + 12.0 * uv.x * uv.x + 12.0 * uv.y * uv.y - 1.0);\n\n    // Z18 - Z35: Continue for higher order Zernike terms...\n    // For each term, adjust based on Zernike polynomial definitions.\n\n    // Apply the Zernike effect to distort the image\n    float aberration = 0.5 + zernike;  // Scale the aberration effect\n\n    // Output final color\n    vec3 color = vec3(1.0) * aberration;\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}