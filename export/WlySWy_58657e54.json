{"ver":"0.1","info":{"id":"WlySWy","date":"1583446558","viewed":91,"name":"Sequin Shader","username":"evilMia","description":"Sequin shader test for midterm project","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["midterm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 numSequines = vec2(4.0, 4.0);\n\nvec4 sequineColor = vec4(1.0, 0, 0, 1.0);\nvec4 sequineColorB = vec4(0.0, 1.0, 0.0, 1.0);\n\nvec2 getCenterOffset(){\n    return (1.0 / (numSequines * 2.0));\n}\n\n\nvec2 getRemappedCenter(vec2 currentUV){\n    vec2 newUV = currentUV * numSequines; //.6 becomes 1.2 \n    newUV = ceil(newUV); // 1.2 becomes 2\n    newUV = newUV / numSequines; // 2 becomes 1\n   \n    //Get every other row of sequines \n    float test = newUV.y * numSequines.y;\n    if(mod(test, 2.0) != 0.0 ){\n        \n        //On the second row of sequines\n        sequineColor = vec4(0.0, 0.0, 1.0, 1.0);\n        \n        //Bucket the output for the second row. \n        //.4 becomes . 75 \n        //.6 becomes .75 \n        //1.2 becomes 1.25\n        //.8 becomes 1.25\n        float k = 1.0 / (numSequines.x * 2.0);\n        float offsetX = (ceil((newUV.x + k) * numSequines.x) / numSequines.x) - k;\n        \n        \n        newUV.x = offsetX;\n    }\n    \n    \n    return newUV - getCenterOffset();\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    \n    \n    \n    \n    vec2 center = getRemappedCenter(uv);\n    \n\tfloat radius = ((1.0 / numSequines.y) / 2.0) + .02;\n    \n    //Normilize everything \n    float aspectRatio = iResolution.x /iResolution.y;\n\tuv.x *= aspectRatio;\n    \n    \n    \n    center.x *= aspectRatio;\n    \n    \n    \n    float checker = step(length(uv-center), radius);\n    \n    \n    // Output to screen\n    fragColor = sequineColor * checker\t;\n}","name":"Image","description":"","type":"image"}]}