{"ver":"0.1","info":{"id":"dlScRt","date":"1692151616","viewed":96,"name":"AntiAlias checkerboard","username":"Blindman67","description":"Experimenting with shaders and shader toy. Very basic ray traced plane with checkerboard. Multi sample anti-aliasing and distance blending to reduce aliasing artifacts.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["antialias"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nbool overBG = false;\n\n\nvec3 rayTrace(in Ray ray){\n    Ray pl = Ray(vec3(0,0,0), vec3(0,-1,0));\n    float dist = abs(plane(ray, pl));\n    if (dist < MAX_DIST) {\n        overBG = false;\n        vec3 p = floor((pl.origin + ray.dir * dist) * CHECKER_SIZE);        \n        vec3 col = vec3(0.2 + 0.4 * mod(p.x + p.z, 2.0));\n        if (dist > MAX_DIST - BLEND_DIST) {\n            float m = pow((dist - (MAX_DIST - BLEND_DIST)) / BLEND_DIST, BLEND_CURVE);\n            return mix(col, vec3((0.2 + 0.4) * 0.5), m);\n        }\n        return col;\n    }\n    overBG = true;\n    return BG_Color - max(0.95 * ray.dir.y, 0.0);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 origin = vec3(1.0, -10.0, -10.0);\n    Ray ray = Ray(origin, vec3(0));\n    uint count = 0u;\n    vec3 col = vec3(0);\n    vec2 subPx = vec2(0);    \n    vec2 px = 1.0 / iResolution.xy;\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;    \n    mat3 vmat = lookMouse(2.0 * iMouse.xy  / iResolution.xy);\n\n    for (subPx.y = 0.0; subPx.y < 1.0; subPx.y += AA_STEP) {\n        for (subPx.x = 0.0; subPx.x < 1.0; subPx.x += AA_STEP) {\n            ray.dir = normalize(vmat * vec3(uv + px * subPx, 2.0));\n            col += rayTrace(ray);   \n            if (count == 0u && overBG) {\n                fragColor = vec4(col, 1.0);\n                return;\n            }\n            count ++;\n        }\n    }\n  \n    fragColor = vec4(col * AA_SAMPLES, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define MAX_DIST 330.0\n#define MIN_DIST 0.01\n#define RAY_STEP_LEN 200.0\n#define MAX_STEPS 100\n#define ANTI_ALIAS 3.0\n#define BLEND_DIST 200.0\n#define CHECKER_SIZE 0.2\n#define BLEND_CURVE 0.75\n\nconst float INV_255 = 1.0 / 255.0;\nconst float PI = 3.14159;\nconst float TAU = PI * 2.0;\nconst float AA_STEP = 1.0 / ANTI_ALIAS;\nconst float AA_SAMPLES = 1.0 / (ANTI_ALIAS * ANTI_ALIAS);\nconst vec3 BG_Color = vec3 (0.45, 0.76, 1.0);\n\nstruct Ray{\n    vec3 origin;\n    vec3 dir;\n};\nvec3 RGB2Color(float R, float G, float B) { return vec3(R * INV_255, G * INV_255, B * INV_255); }\nfloat plane(Ray ray, Ray plane){\n    float d = dot(plane.dir, ray.dir);\n    return d > MIN_DIST ? dot(plane.origin - ray.origin, plane.dir) / d : MAX_DIST;\n}\nmat3 camMatrix(in float yaw, in float pitch) {\n    vec3 forward = normalize(vec3(sin(yaw), sin(pitch), cos(yaw)) * cos(pitch));\n    vec3 right = normalize(cross(vec3(0, 1, 0), forward));   \n    return mat3(right, cross(forward, right), forward);\n}\nmat3 lookMouse(in vec2 unitMouse) {\n    return camMatrix((unitMouse.x * 1.0 + 0.0) * PI, (unitMouse.y * 0.5 + 0.5) * PI);\n}","name":"Common","description":"","type":"common"}]}