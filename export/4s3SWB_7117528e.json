{"ver":"0.1","info":{"id":"4s3SWB","date":"1461104389","viewed":1287,"name":"Intergalactic Transmissionnnnn!","username":"drone1","description":"First time messing around w/ audio and web cam stuff. Some really messy code, just playing around.","likes":16,"published":1,"flags":10,"usePreview":0,"tags":["2d","audio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define ENABLE_AA\n\n#ifdef ENABLE_AA\n#define AA_ITER_COUNT 9\n#define AA_ITER_COUNT_SQRT 3.0\n#else\n#define AA_ITER_COUNT 1\n#define AA_ITER_COUNT_SQRT 1.0\n#endif\n     \nvec2 hash( float n )\n{\n    return fract( sin( vec2( n, n + 1.0 ) ) * 2342.2343 );\n}\n\nvec3 render( vec2 uv )\n{\n    vec2 og_uv = uv;\n    \n    float time = iTime;\n    time += 50.0 * smoothstep( 0.0, 4.0, iTime );\n    \n    vec3 col = texture( \n        iChannel0,\n        uv + vec2( sin( uv.x * 1.0 * time ) * .1,\n                   cos( uv.y * 1.0 * time ) * .12 )\n    ).rgb;\n    \n    float a = mix( 100.0, 200.0, .5 + 0.5 * sin( time * 0.31 ) );\n    float b = mix( 22.0, 50.0, .5 + 0.5 * sin( time * 0.2 ) );\n    float f = mix( a, b, smoothstep( 0.5, 0.0, abs( ( uv.x - 0.5 ) * ( uv.y ) ) ) );\n    float t = cos( uv.x * f ) * sin( uv.y * f );\n    col = 0.95 * col + 0.05 * step( -0.3, t ) * t;\n    \n    float x = mix( 0.01, 1.0, 0.5 + 0.5 * sin( 1000.0 * time ) );\n    uv += x * ( -1.0 + 2.0 * hash( 234.0 + time * uv.x + uv.y * 1000.0 ) );\n    float tt = 0.5 + 0.5 * sin( 0.1 * time );\n    col = mix( texture( iChannel0, uv ).rgb, col, tt );\n    \n    col.r *= 3.0;\n    col.g *= 2.1;\n    col.b += 0.1;\n    \n    float edge = smoothstep( 0.95 * sqrt( 2.0 ), 0.0, length( -1.0 + 2.0 * og_uv ) );\n    col *= 0.5 + 0.5 * edge;\n    \n    col = 0.8 * col + 0.2 * texture( iChannel1, uv + vec2( 0.2, 0.3 ) * time ).rgb;\n    \n    col -= 0.5 * ( 0.5 + 0.5 * sin( og_uv.y * 700.0 ) * sin( 300.0 * og_uv.x + 34234.0 ) );\n    \n    col *= 0.95 + 0.2 * smoothstep( 0.1, sqrt( 2.0 ), edge );\n    \n    col.r += 0.21 * smoothstep( 0.0, 1.0, og_uv.x );\n    col.g += 0.08 * smoothstep( 0.0, 0.3, 1.0 - og_uv.x * og_uv.y );\n    col.b -= 0.32 * smoothstep( 0.25, 1.0, og_uv.x * og_uv.y );\n    \n    uv = og_uv + .1 * hash( floor( ( 0.01 * time + 1.0 + og_uv.y ) * 10.0 ) * floor( ( 1.0 + og_uv.x ) * 10.0 ) );\n    col *= 1.0 - 0.2 * texture( iChannel2, uv ).rgb;\n                     \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3( 0.0 );\n    float aspect = iResolution.x / iResolution.y;\n    \n#ifdef ENABLE_AA\n\tfor ( int i = 0; i < AA_ITER_COUNT; ++i )\n#else\n    int i = 0;\n#endif\n\n    {\n        vec2 offset = vec2( float(i) / AA_ITER_COUNT_SQRT, mod( float(i), AA_ITER_COUNT_SQRT ) ) / AA_ITER_COUNT_SQRT;\n        vec2 uvs = ( fragCoord.xy + offset ) / iResolution.xy;\n        vec2 uv = fragCoord.xy / iResolution.xy;\n        col += render( uvs );\n    }\n\n    col /= float( AA_ITER_COUNT );\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"XsfGRr","channel":0}],"code":"float kick( float time )\n{\n    float x = sin(6.2831*80.0*time)*exp(-20.0*time);\n    x *= 0.8;\n    x += 0.8 * sin( 0.5 + 6.2831*55.0*time)*exp(-10.0*time);  \n    return x;\n}\n\nfloat hash( float x )\n{\n    return fract( 0.5 + 0.5 * sin( dot( vec2( x, x + 1.0 ), vec2( 23452343.23423, 97878.22343 ) ) ) );\n}\n\n#define BOOP( pitch_, note_offset_ ) 0.16 * step( sixteenth_3, time ) * sin( 888.0 - 0.5 * 6.2831 * ( pitch_ ) * time ) * exp( -30.0 * mod( ( note_offset_ ) + og_time, m * 0.25 ) );\n#define PLAY_AT_BAR( bar_ ) step( ( bar_ - 1.0 ) * bar_length, og_time )\n\n#define LOOP_BARS 32.0\n\nvec2 mainSound( in int samp, float time )\n{    \n    float m = 0.5;\n    float sixteenth_1 = mod( time, m * 0.25 );\n    float sixteenth_2 = mod( time, m * 0.50 );\n    float sixteenth_3 = mod( time, m * 0.75 );\n    float bar_length = m * 3.0;\t// bar length in seconds\n    \n    float og_time = mod( time, bar_length * LOOP_BARS );\n\n    time = mod( time, m );\n    float y = 0.0;\n    float x = kick( time );\n        \n    // bass (using kick)\n    x += kick( time + sixteenth_3 );\n    \n    x += hash( 0.00001 * time ) * 0.005;\t// distortion\n   \n    if ( time > sixteenth_2 ) {\n\t}\n    else if ( time > sixteenth_3 ) {\n        x *= 2.0 * smoothstep( sixteenth_3, m, time );\n    }\n \n    // hh\n    float hh_amp = 0.5;\n    x += hh_amp * .05 * hash( time ) * sin( 0.5 * 6.2831 * 8000.0 * time ) * exp( -40.0 * mod( og_time, m * 0.25 ) );\n    x += hh_amp * 0.025 * hash( time + 0.2 ) * sin( 23423.0 + 0.5 * 6.2831 * 16000.0 * time ) * exp( -40.0 * mod( og_time, m * 0.25 ) );\n    x += hh_amp * .05 * hash( time - 34324.0 ) * sin( 888.0 - 0.5 * 6.2831 * 4001.0 * time ) * exp( -40.0 * mod( og_time, m * 0.25 ) );\n\n    float pitch = 3000.0 + time * 1000.0;\n    pitch *= mix( 0.85, 1.0, PLAY_AT_BAR( 17.0 ) );\n    pitch *= mix( 1.0, 0.5, PLAY_AT_BAR( 25.0 ) );\n    x += PLAY_AT_BAR( 17.0 ) * BOOP( pitch, 0.0 );\n    float b = 0.5 * PLAY_AT_BAR( 0.0 ) * BOOP( pitch * .888, 2.25 * sixteenth_1 );\n    x += 0.05 * b;\n    y += 0.10 * b;\n   \n    return vec2( x, x + y );\n}","name":"Sound","description":"","type":"sound"}]}