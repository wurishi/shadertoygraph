{"ver":"0.1","info":{"id":"Xst3D7","date":"1450140503","viewed":185,"name":"Basic Raytracing","username":"pbobak","description":"My first go at making a raytracer, thanks to: https://www.youtube.com/watch?v=9g8CdctxmeU","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raytracer","basic","colours"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float intersectSphere(in vec3 ro, in vec3 rd, in vec4 sph)\n{\n    // a sphere centered at the origin has equation |xyz| = r\n    // meaning, |xyz|^2 = r^2, meaning <xyz, xyz> = r^2\n    // now, xyz = ro + t*rd, therefore |ro|^2+|t*rd|^2 + 2<ro, rd> t - r^2 = 0\n\t// |rd| = 1 (normalized) so equation reduce to |ro|^2+ t^2 + 2<ro, rd> t - r^2 = 0\n    // which is a quadratic equation, so\n\n    vec3 oc = ro - sph.xyz;\n    float b = 2.0 *dot(oc, rd);\n    float c = dot(oc,oc) - sph.w*sph.w;\n    float h = b*b - 4.0 *c;\n    if(h <0.0) return -1.0; //no intersection\n\n    //pick smaller one(i.e, close one)\n    //not (-b+sqrt(h)) /2\n    float t = (-b - sqrt(h))/ 2.0;\n    return t;\n}\n\nvec3 normalSphere(in vec3 pos, in vec4 sph)\n{\n    //sphere center at (l, m, n) radius r\n    //normal at intersect point N= ( (x-l)/r, (y-m)/r, (z-n)/r )\n    return (pos - sph.xyz)/sph.w;\n}\n\nfloat intersectPlane(in vec3 ro, in vec3 rd)\n{\n    //equation of a plane, y=0 = ro.y+t*rd.y\n    // t = -ro.y/rd.y\n    return -ro.y/rd.y;\n}\n\nvec3 normalPlane(in vec3 pos)\n{\n\t// normal of plane\n    return vec3(0.0, 1.0, 0.0);\n}\n\nvec4 sph1 = vec4(0.0, 0.4, 0.0, 0.4);//sphere center\nfloat intersect(in vec3 ro, in vec3 rd, out float resT)\n{\n    resT = 1000.0;\n    float id = -1.0;\n    float tSphere = intersectSphere(ro, rd, sph1);\n    float tPlane = intersectPlane(ro, rd);\n    if (tSphere > 0.0)\n    {\n        id = 1.0;\n        resT = tSphere;\n    }\n    if (tPlane > 0.0 && tPlane < resT)\n    {\n        id = 2.0;\n        resT = tPlane;\n    }\n    \n    return id;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 light = normalize(vec3(0.57703));\n\tvec2 uv = (fragCoord.xy / iResolution.xy);\n\n    // ray origin & direction\n    vec3 rayOrigin = vec3(0.0, 0.5, 3.0);\n    vec3 rayDirection = normalize(vec3( (-1.0 +2.0*uv) *vec2(1.78, 1.0), -1.0));\n    \n    // moving & transforming\n    //sph1.x = 0.5 * sin(iTime);\n    //sph1.y = sph1.w + 0.5 * cos(iTime * uv.x);\n    \n\t// intersections\n    float t;\n    float id = intersect(rayOrigin, rayDirection, t);\n    \n    vec3 baseColor = vec3(uv,0.5+0.5*sin(iTime));\n    vec3 color = baseColor;\n    //vec3 color = vec3(0.05);\n    if (id > 0.5 && id < 1.5)\n    {\n        // hit the sphere\n        vec3 position = rayOrigin + t * rayDirection;\n        vec3 normal = normalSphere(position, sph1);\n        float diffuse = clamp(dot(normal, light), 0.0, 1.0);\n        float ambient = 0.5 + 0.5 * normal.y;\n        color = (baseColor * diffuse * ambient) +\n            (vec3(0.7, 0.7, 0.7)*ambient * vec3(0.7));\n    }\n    else if (id > 1.5)\n    {\n        // hit the plane\n        vec3 position = rayOrigin + t * rayDirection;\n        vec3 normal = normalPlane(position);\n        float amb = smoothstep(0.0, 3.0* sph1.w, length(position.xz-sph1.xz));\n        vec3 pureColor = vec3(sqrt(baseColor.x), baseColor.y, baseColor.z);\n        color = vec3(amb* 0.5 * pureColor);\n    }\n    \n    // color = color * 0.5*sin(iTime);\n\tfragColor = vec4(color, 1.0);\n}","name":"","description":"","type":"image"}]}