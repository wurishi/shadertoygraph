{"ver":"0.1","info":{"id":"sldBDs","date":"1663868762","viewed":173,"name":"Fake caustic with worley ","username":"Oneleven","description":"A quick study shader based on worley noise","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["fake","caustic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define PI 3.141592\n#define T iTime\n\n//FabriceNeyret2 + IQ hash\n//https://www.shadertoy.com/view/fsKBzw\nfloat hash( vec2 f )\n{   uvec2 x = uvec2( floatBitsToUint(f.x), floatBitsToUint(f.y) ),\n          q = 1103515245U * ( x>>1U ^ x.yx    );\n    return float( 1103515245U * (q.x ^ q.y>>3U) ) / float(0xffffffffU);\n}\n\nvec2 hash2d(vec2 f)\n{\n    return vec2(hash(f), hash(f + vec2(123.456, 789.987)));\n}\n\nfloat worley(vec2 uv)\n{\n    vec2 index = floor(uv);\n    uv = fract(uv);\n\n    float minDist = 2.0;\n    for (float y = -1.0; y<=1.0; y++)\n    {\n        for (float x=-1.0; x<=1.0; x++)\n        {\n            float cellHash = hash(index + vec2(x,y));\n            float cellTime = iTime * (cellHash * 2.0 + 0.1);\n            vec2 offset = vec2(cos(cellTime + cellHash*100.0), sin(cellTime + cellHash))*0.5;\n            float dist = distance(vec2(0.5)+vec2(x,y)+offset, uv);\n\n            minDist = min(minDist, dist);\n        }\n    }\n    return minDist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uvBase = fragCoord/iResolution.y;\n    \n    //Use separate uv's for noise and background\n    vec2 uv = uvBase;\n    uv += T * vec2( -0.07, 0.03);\n    uv += sin(uv * PI * vec2(1.0, 0.5) + vec2(PI, 0.0) + T * 2.2)*vec2(0.03, 0.01);\n\n    float value = worley(uv * 10.0) * worley(uv * 12.0);\n    value = smoothstep(0.01, 1.0, value);\n    \n    vec3 col = cos(PI*(uvBase.x * vec3(0.3, 0.3, 0.4) + vec3(-0.8, 1.45, -.4)))*vec3(0.5, 0.5, 0.2) + vec3(0.2, 0.3, 0.5);\n    col += value*vec3(0.4, 0.35, .25) * uvBase.x;\n    \n    //Quick uncoment for debug purposes\n    //col = vec3(value);\n    //col = vec3(uvBase.x);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}