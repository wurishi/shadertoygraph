{"ver":"0.1","info":{"id":"XcsGDH","date":"1703020382","viewed":10,"name":"Greyscale Ramp","username":"Electrice","description":"The provided shader is a simple grayscale ramp with adjustable steps and movement.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ramp","movement","greyscale","broadcast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shader for a grayscale ramp with adjustable steps and movement\n// Copyright (c) Electrice 2023\n// This shader is open and can be used by anyone.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Screen size\n    vec2 resolution = iResolution.xy;\n\n    // Number of grayscale steps (adjustable)\n    //For 8-bit grayscale, it represents 256 levels (0 to 255).\n    //For 10-bit grayscale, it represents 1024 levels (0 to 1023).\n    //For 12-bit grayscale, it represents 4096 levels (0 to 4095).\n    float numSteps = 10.0;\n\n    // Movement speed (adjustable)\n    float speed = 100.0;\n\n    // Calculate grayscale value based on the moving position\n    float grayValue = mod((fragCoord.x + iTime * speed), resolution.x) / resolution.x;\n\n    // Scale the grayscale value according to the number of grayscale steps\n    grayValue = floor(grayValue * numSteps) / (numSteps - 1.0);\n\n    // Set the color based on the grayscale value\n    fragColor = vec4(vec3(grayValue), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}