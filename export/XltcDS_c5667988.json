{"ver":"0.1","info":{"id":"XltcDS","date":"1533878832","viewed":140,"name":"Moon Rocks","username":"Veggiebob","description":"Flying through yet another 3d noise world","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["fractal","noise","buffer","flying"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//some noise 3d\nvec3 SDF (vec3 p){\n    return vec3(noise3d(p, iChannel2)-threshold, 0., 0.);\n}\n//Credit to Jamie Wong http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/#surface-normals-and-lighting\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        SDF(vec3(p.x + EPSILON, p.y, p.z)).x - SDF(vec3(p.x - EPSILON, p.y, p.z)).x,\n        SDF(vec3(p.x, p.y + EPSILON, p.z)).x - SDF(vec3(p.x, p.y - EPSILON, p.z)).x,\n        SDF(vec3(p.x, p.y, p.z  + EPSILON)).x - SDF(vec3(p.x, p.y, p.z - EPSILON)).x\n    ));\n}\nvec2 rotate2d (vec2 uv, float angle) {\n    float ang = atan(uv.y, uv.x);\n    float l = length(uv);\n    return vec2(cos(ang+angle)*l, sin(ang+angle)*l);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float tx = uv.x;\n    uv-=0.5;\n    uv.x*=iResolution.x/iResolution.y;\n    uv*=2.;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    mouse-=0.5;\n    //mouse*=7.;\n    vec3 camera = texture(iChannel0, vec2(0.)).xyz;//this is to get the player position\n    vec3 ray = vec3(uv.x, 1., uv.y);//vec3(cos(uv.x+mouse.x), uv.y+sin(mouse.y), sin(uv.x+mouse.x));\n    ray.yz = rotate2d(ray.yz, -mouse.y*4.);\n    ray.xz = rotate2d(ray.xz, mouse.x*5.);\n    vec3 col = vec3(0.);\n    \n    vec3 p = vec3(0.);\n    float t = 0.;\n    float th = threshold;\n    for(int i = 0; i<128; i++){\n        p = camera+ray*t;\n    \tfloat d = noise3d(p, iChannel2)-th;\n        //if(uv.x>0.)d=noise3d(p)-th;else d=texture(iChannel2, p).r+0.5-threshold;\n        t+=d*0.1;\n        if(d<EPSILON||t>1.){\n            break;\n        }\n    }\n    vec3 normal = estimateNormal(p);\n    col+=dot(-ray, normal)*0.3;\n    col += texture(iChannel1, p.xz).rgb*0.4;\n    col += texture(iChannel1, p.xy).rgb*0.4;    //overlays the texture on all 3 planes to get rid of weird stretched lines\n    col += texture(iChannel1, p.yz).rgb*0.2;\n    //col.g*=col.g*1.5;\n    //col.b*=0.9;\n    //col.r*=col.r;\n    //float n = noise3d(p*5.);\n    float fog = 1.0 / (1.0 + t*t*9.9);\n    col*=fog;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define threshold 0.9\n#define EPSILON pow(10., -2.)\n#define noise_iterations 5.\nfloat noise3d(vec3 pos, sampler3D t) {//add sampler2D t\n    float total = 0.;\n    for(float i = 0.; i<noise_iterations; i++){\n        //total+=nose(pos*pow(2., i))*pow(0.5, i);\n        total+=texture(t, pos*pow(2., i)*0.05).r*pow(0.5, i);\n    }\n    return total*1.0;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if(uv.x<0.01&&uv.y<0.01){\n        vec2 mouse = iMouse.xy/iResolution.xy-0.5;\n        mouse*=7.;\n        vec3 prev = texture(iChannel0, vec2(0., 0.)).rgb;//setting player position\n        if(prev.rgb==vec3(0.)){\n            prev = vec3(1.);\n        }\n        vec3 next = vec3(cos(mouse.x)*0.01, sin(mouse.y)*0.02, sin(mouse.x)*0.01);\n        float checkDist = 5.;\n        vec3 check = vec3(-0.1);\n        //collisions\n        if(noise3d(prev+vec3(next.x, 0., 0.)*checkDist, iChannel1)>threshold){\n            check.x = 1.;\n        }\n        if(noise3d(prev+vec3(0., next.y, 0.)*checkDist, iChannel1)>threshold){\n            check.y = 1.;\n        }\n        if(noise3d(prev+vec3(0., 0., next.z)*checkDist, iChannel1)>threshold){\n            check.z = 1.;\n        }\n        prev+=next*check;\n        fragColor = vec4(prev, 1.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}