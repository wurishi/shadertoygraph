{"ver":"0.1","info":{"id":"XldBD8","date":"1542719464","viewed":964,"name":"Two-dimensional Spirals","username":"nr4","description":"Distance to a spiral.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","spiral","antialiasing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * Two-dimensional Spirals\n * \n * Copyright (C) 2018  Alexander Kraus <nr4@z10.info>\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nconst float pi = acos(-1.);\nconst vec3 c = vec3(1.,0.,-1.);\n\n// hash function\nfloat r(vec2 a0)\n{\n    return fract(sin(dot(a0.xy ,vec2(12.9898,78.233)))*43758.5453);\n}\n\n// distance to spiral\nfloat dspiral(vec2 x, float a, float d)\n{\n    float p = atan(x.y, x.x),\n        n = floor((abs(length(x)-a*p)+d*p)/(2.*pi*a));\n    p += (n*2.+1.)*pi;\n    return -abs(length(x)-a*p)+d*p;\n}\n\n#define A iResolution.y\n#define B 3./Y\n#define S(v) smoothstep(-1.5/A,1.5/A,v)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float a = .125, aa = .5*a; // tile size\n    vec2 uv = fragCoord/A+.5,\n        x = mod(uv, a)-aa, y = uv-x; // we want many spirals\n\n    //random number of edges and random rotation\n    float p = (-7.5+15.*r(y))*iTime,\n        k = cos(p), s = sin(p), k2 = cos(p-pi), s2 = sin(p-pi),\n    \td = dspiral(mat2(k,s,-s,k)*x, 5.e-3*(.75+.5*r(y+1.)), 4.e-4*(.75+.5*r(y+2.)));\n    \n    //set random colors\n    vec3 col = .5 + .5*cos(p+uv.xyx+vec3(0.,2.,4.));\n    fragColor = vec4(col*mix(S(d),1.,.5)+S(-abs(d)),1.);\n    \n    //add borders\n    vec2 v = smoothstep(-aa,-aa+1.5/A,x)*smoothstep(aa,aa-1.5/A,x);\n    fragColor *= v.x*v.y;\n}","name":"Image","description":"","type":"image"}]}