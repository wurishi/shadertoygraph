{"ver":"0.1","info":{"id":"ttc3W2","date":"1695672523","viewed":34,"name":"Spirodoodle","username":"degraffenried","description":"implementing spirodoodle in shadertoy","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["linedrawing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n   \n\n    vec4 texColor = texture(iChannel0,uv) ;\n    \n    fragColor = texColor;\n    \n  \n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nconst float TWO_PI = 2.0 * 3.14159265359;\nconst float PI = 3.14159265359;\nconst float numberToPlot = 62.0;\nconst float rot = radians((360.0 / numberToPlot));\nconst float ms = radians(60.0);\nconst float t = 0.0099;\nconst float u = 0.019;\n\nmat2 r2d(float a) {\n\tfloat c = cos(a), s = sin(a);\n\t// https://en.wikipedia.org/wiki/Rotation_matrix\n    // https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)#Matrix_constructors\n    return mat2(\n        c, s, // column 1\n        -s, c // column 2\n    );\n}\n\n\nvec2 refl(vec2 p,vec2 o,vec2 n)\n{\n\treturn 2.0 * o + 2.0 * n * dot(p - o, n) - p;\n}\n\n\nfloat distanceToSegment( vec2 a, vec2 b, vec2 p )\n{\n\tvec2 pa = p - a, ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    \n    vec3 col = texture(iChannel0, fragCoord.xy / iResolution.xy).xyz;\n    vec3 last = texture(iChannel0, vec2(0,0)).xyz;\n    \n    \n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float aspect = iResolution.y / iResolution.x;\n    uv.x /= aspect;\n    \n    \n    vec4 m = iMouse / iResolution.xyxy;\n    m.xz /= aspect;\n    \n    \n    if (m.xy == m.zw){\n        last.xy = m.xy;   \n    }\n    \n\n    //pixel (0,0) saves the current position.\n    if(floor(fragCoord) == vec2(0,0))\n    {\n        if(iFrame == 0) //Setup initial conditions.\n    \t{\n    \t\tfragColor = vec4(0,0,0, 0);\n    \t}\n        else //Save current position.\n        {\n    \t\tfragColor.xyzw = m.xyzw;\n        }\n    }\n    else\n    {\n        \n        \n        if( m.z > 0.0 )\n        {\n\n            vec3 col2 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n            \n            \n            for(float i = 0.0; i < numberToPlot; i ++){\n\n\n                vec2 xy1 = (r2d(rot*i) * (m.xy - 0.5)) + 0.5;\n                vec2 xy2 = (r2d(rot*i) * (last.xy - 0.5)) + 0.5;\n\n                vec2 mrxy1 = refl(m.xy, vec2(0.50), vec2(0.5, sqrt(0.75)));\n                vec2 mrxy2 = refl(last.xy, vec2(0.50), vec2(0.5, sqrt(0.75)));\n\n\n\n                mrxy1 = (r2d(rot*(i) + ms) * (mrxy1 - 0.5)) + 0.5;\n                mrxy2 = (r2d(rot*(i) + ms) * (mrxy2 - 0.5)) + 0.5;\n\n\n\n                float d = distanceToSegment( xy1, xy2, uv ) / 0.5;\n                col = mix( col, col2, 1.0 - smoothstep(t, u, d) );\n\n\n                d = distanceToSegment( mrxy1, mrxy2,  uv ) / 0.5;\n                col = mix( col, col2, 1.0 - smoothstep(t, u, d) );\n\n\n            }\n        }\n        \n        //Sound.mainSound( in int samp,0.1);\n        \n        fragColor = vec4( col, 1.0 );\n    }\n    \n\t\n    \n\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}