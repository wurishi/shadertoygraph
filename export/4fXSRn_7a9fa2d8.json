{"ver":"0.1","info":{"id":"4fXSRn","date":"1704833886","viewed":103,"name":"TestShader09012024","username":"Scruffy","description":"Test","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t)\n{\n    vec3 a = vec3(0.938, 0.328, 0.718);\n    vec3 b = vec3(0.659, 0.438, 0.328);\n    vec3 c = vec3(0.388, 0.388, 0.296);\n    vec3 d = vec3(2.538, 2.478, 0.168);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec2 rotateUV(vec2 uv, float rotation)\n{\n    float mid = 0.5;\n    return vec2(\n        cos(rotation) * (uv.x - mid) + sin(rotation) * (uv.y - mid) + mid,\n        cos(rotation) * (uv.y - mid) - sin(rotation) * (uv.x - mid) + mid\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 1.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColour = vec3(0.);\n    \n    for (float i = 0.; i < 36.; i++)\n    {\n        uv = rotateUV(uv, iTime*.1);\n        uv = fract(uv*1.1)-.5;\n        uv = rotateUV(uv, iTime*.1);\n\n        float d = length(uv);\n        vec3 col = palette(length(uv0) + i*.1 + d + iTime);\n\n        d = sin(d*4.+iTime)/4.;\n        d = abs(d);\n\n        d = .02/d;\n        \n        finalColour += col * d * .1 - (i*.0002);\n    }\n    \n    fragColor = vec4(finalColour,1.0);\n    //fragColor = vec4(uv.x,uv.y,0.,1.0);\n}","name":"Image","description":"","type":"image"}]}