{"ver":"0.1","info":{"id":"WljSW1","date":"1565775154","viewed":3608,"name":"Art : A mirror donut slice","username":"Gijs","description":"Move the camera with WASD+QE+Space+Shift+Mouse. If the camera gets stuck it means you're too close to the edge of the donut.","likes":10,"published":1,"flags":48,"usePreview":0,"tags":["3d","raymarching","reflection","mirror","donut"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//post\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 buf = texture(iChannel0,fragCoord.xy / iResolution.xy);\n    \n    vec3 col = buf.xyz/buf.w;\n    col = pow(col,vec3(1./GAMMA)); \n    \n\tfragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Variables and such\n\n\n//constants\n    #define PI  3.14159\n    #define TAU 6.28318\n\n//Render\n\t#define DETAIL       1.\n    #define MAX_STEPS    512\n    #define MAX_DEPTH    16\n    #define MAX_MARCH    30.\n\n//Torus\n\t#define TORUS_MAJOR_RADIUS      2.\n\t#define TORUS_MINOR_RADIUS      1.\n\t#define TORUS_COLOR             vec3(.9);\n\t#define TORUS_SURFACE_THICKNESS 0.05\n\n//Ball\n\t#define BALL_POSITION vec3(0,0,TORUS_MAJOR_RADIUS)\n\t#define BALL_RADIUS   TORUS_MINOR_RADIUS/2.\n\t#define BALL_COLOR    vec3(.75,.25,.25)\n\n//Lighting\n\t#define SUN_VECTOR    vec3(0.57735026919)\n\t#define SUN_COLOR     vec3(1)\n\t#define AMBIENT_COLOR vec3(.1)\n\t#define SKY_COLOR     vec3(.45,.56,1.) \n\n//Camera\nconst float ZOOM                    = .5;\nconst float MOVEMENT_SPEED          = 3.;\nconst float MAX_SPEED               = 8.;\nconst float MIN_SPEED               = 1e-4;\nconst vec3  CAMERA_LOOK             = vec3(-1,0,-TORUS_MAJOR_RADIUS);\nconst vec3  CAMERA_POSITION         = vec3(1,0,-TORUS_MAJOR_RADIUS);\nconst float CAMERA_SENSITIVITY      = 0.003;\nconst float CAMERA_ROLL_SENSITIVITY = 1.;\n\n//Post\n\t#define GAMMA 2.2\n\n//rotates vector around another\nvec3 rotate(vec3 p, float angle, vec3 v){\n\tfloat c = cos(angle);\n\tvec3 s = sin(angle) * v;\n\tvec3 d =  (1.0 - c) * v;\n    return dot(p,d)*v + p*mat3(c,-s.z,s.y, s.z,c,-s.x, -s.y,s.x,c);\n}\n\n\nfloat torus(vec3 p){\n    vec2 q = vec2(length(p.xz)-TORUS_MAJOR_RADIUS,p.y);\n    return max(abs(length(q)-TORUS_MINOR_RADIUS)-TORUS_SURFACE_THICKNESS,p.x);\n}\n\n\nfloat getDistance(vec3 p){\n    float distance = MAX_MARCH;\n\n    float donutDistance = torus(p);\n    distance = min(distance,donutDistance);\n    \n    \n    float ballDistance = length(p-BALL_POSITION)-BALL_RADIUS;\n    distance = min(distance,ballDistance);\n    \n    return distance;\n}\n\nvec4 getMaterial(vec3 p){\n    float distance = MAX_MARCH;\n    vec3  color    = vec3(1);\n    int   material = 0;\n    \n    float ballDistance = length(p-BALL_POSITION)-BALL_RADIUS;\n    if(ballDistance<distance){\n    \tdistance = ballDistance;\n    \tcolor    = BALL_COLOR;\n        material = 0;\n\t}\n    \n    float donutDistance = torus(p);\n\tif(donutDistance<distance){\n    \tdistance = donutDistance;\n    \tcolor    = TORUS_COLOR;\n        material = 1;\n\t}\n\t\n    return vec4(material,color);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//the raymarching\n\nfloat hash( uint n ) {\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return uintBitsToFloat( (n>>9U) | 0x3f800000U ) - 1.0;\n}\n\nvec3 getNormal(vec3 p, float eps){\n    eps = max(eps,1e-7);\n    vec2 k = vec2(1,-1);\n    vec2 d = k*eps;\n    return normalize( k.xyy*getDistance( p + d.xyy ) + \n                      k.yyx*getDistance( p + d.yyx ) + \n                      k.yxy*getDistance( p + d.yxy ) + \n                      k.xxx*getDistance( p + d.xxx ) );\n}\n\nvoid raymarch(in vec3 p, in vec3 d, float eps, inout int steps, inout float dis, inout float meps, inout float t){\n\tfor (;steps<MAX_STEPS;steps++){\n\t\tdis = getDistance(p + d*t);     \n        t += dis;\n        meps = abs(t)*eps;\n\n\t\tif(dis<meps){\n            t -= (meps-dis);\n            break;\n        }\n        \n        if(t>MAX_MARCH) break;\n\t}\n}\n\nvec3 raymarcher(vec3 p, vec3 d, float eps){ \n    \n    vec3 a = vec3(1.);\n    \n    for(int depth=0; depth<MAX_DEPTH; depth++){\n        int   steps = 0;\n        float dis = 0.;\n        float meps = 0.;\n        float t = 0.;\n        raymarch(p,d,eps,steps,dis,meps,t);\n        vec3 hitPos    = p + d*t;\n\n\n        if(dis<meps){\n\n            vec4 hitMaterial  = getMaterial(hitPos);\n            vec3 hitColor = hitMaterial.yzw;\n            vec3 hitNormal = getNormal(hitPos,meps);\n            vec3 reflectDir = reflect(d,hitNormal);\n\n            if(hitMaterial.x==0.){\n\n                float diffuse   = max(dot(hitNormal,SUN_VECTOR),0.);\n\n                float specular  = diffuse>0. ? pow(max(dot(reflectDir,SUN_VECTOR),0.),32.) : 0.;\n\n                vec3 c = hitColor*SUN_COLOR*diffuse + hitColor*AMBIENT_COLOR + SUN_COLOR*specular*.3;\n\n                return a *= c;\n                    \n            }else if(hitMaterial.x==1.){ \n\n\t\t\t\ta *= hitColor;\n                p = hitPos;\n                d = reflectDir;\n                \n            }\n\n        }else{\n\n            return a *= SKY_COLOR; \n\n        }\n    }\n    \n    return a;\n}\n\n\nvoid mainImage(out vec4 fragcolor, in vec2 fragCoord ){\n    float minResolution = min(iResolution.x,iResolution.y);\n    float eps = DETAIL/minResolution;\n    \n    //camera\n    vec3 cameraPosition = texelFetch(iChannel1,ivec2(0,0),0).rgb;\n  \tvec3 cameraForward  = texelFetch(iChannel1,ivec2(1,0),0).rgb;\n    vec3 cameraRight    = texelFetch(iChannel1,ivec2(2,0),0).rgb;\n    vec3 cameraUpward   = texelFetch(iChannel1,ivec2(3,0),0).rgb;\n\n    //Seed\n    uvec2 up  = uvec2(fragCoord);\n    uvec2 res = uvec2(iResolution);\n    uint seed =  up.x + res.x*up.y + res.x*res.y*uint(iFrame);\n    \n    //Scaling\n    vec2 p = fragCoord + vec2(hash(seed++),hash(seed++))-.5;//anti-aliasing\n    vec2 sp  = (p*2.-iResolution.xy)/minResolution;\n     \n   \t//Pixel Ray\n\tvec3 direction = normalize(cameraForward+sp.x*cameraRight+sp.y*cameraUpward);\n    \n    //Final\n    fragcolor = vec4(\n        raymarcher(\n            cameraPosition,\n            direction,\n            eps\n        ),1.0);\n    \n    if(!(texture(iChannel1,vec2(0)).w>.0)){//No movement detected so keep previous frames\n    \tfragcolor += texture(iChannel0,fragCoord/iResolution.xy);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//This buffer handles the Camera\n//if ANY movement is done fragColor.w becomes 1 for ALL pixels\n\n//makes sure that three 3 dimensional vectors are orthonormal\nvoid GramSchmidt33(inout vec3 a, inout vec3 b, inout vec3 c){\n    a = normalize(a);\n    b = b - dot(b,a)*a;\n    b = normalize(b);\n    c = c - dot(c,a)*a - dot(c,b)*b;\n    c = normalize(c);\n}\n\nvoid rot(inout vec3 a, inout vec3 b, float angle){\n    float c = cos(angle);\n    float s = sin(angle);\n    a =  c*a + s*b;\n    b = -s*a + c*b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    ivec2 p = ivec2(fragCoord);\n    \n    if(p.x>4 || p.y > 0) return;\n    \n    vec3 cameraPosition = texelFetch(iChannel0,ivec2(0,0),0).rgb;\n  \tvec3 cameraForward  = texelFetch(iChannel0,ivec2(1,0),0).rgb;\n    vec3 cameraRight    = texelFetch(iChannel0,ivec2(2,0),0).rgb;\n    vec3 cameraUpward   = texelFetch(iChannel0,ivec2(3,0),0).rgb;\n    vec3 mouseOld       = texelFetch(iChannel0,ivec2(4,0),0).rgb;\n    \n    if(iFrame==0){\n        cameraPosition  = CAMERA_POSITION;\n        cameraForward   = normalize(CAMERA_LOOK-cameraPosition);\n        cameraRight     = normalize(cross(vec3( 0, 1, 0),cameraForward));\n        cameraUpward    = normalize(cross(cameraForward,cameraRight));\n        mouseOld        = vec3(iMouse.xy, 0);\n    } \t\t\n    \n    bool forward     = texelFetch(iChannel1,ivec2(87,0),0).x + texelFetch(iChannel1,ivec2(38,0),0).x >0.;\n    bool left        = texelFetch(iChannel1,ivec2(65,0),0).x + texelFetch(iChannel1,ivec2(37,0),0).x >0.;\n    bool backward    = texelFetch(iChannel1,ivec2(83,0),0).x + texelFetch(iChannel1,ivec2(40,0),0).x >0.;\n    bool right       = texelFetch(iChannel1,ivec2(68,0),0).x + texelFetch(iChannel1,ivec2(39,0),0).x >0.;\n    bool rollleft    = texelFetch(iChannel1,ivec2(81,0),0).x > 0.;\n    bool rollright   = texelFetch(iChannel1,ivec2(69,0),0).x > 0.;\n    bool down        = texelFetch(iChannel1,ivec2(16,0),0).x + texelFetch(iChannel1,ivec2(34,0),0).x > 0.;\n    bool up          = texelFetch(iChannel1,ivec2(32,0),0).x + texelFetch(iChannel1,ivec2(33,0),0).x > 0.;\n    bool mouseLeft   = iMouse.z>0.;\n    bool interaction = forward||left||backward||right||rollleft||rollright||down||up||mouseLeft;\n    \n    float stepSize = clamp(\n        getDistance(cameraPosition)*MOVEMENT_SPEED,\n        MIN_SPEED,\n        MAX_SPEED\n    )*iTimeDelta*ZOOM;\n    \n    //Translation\n    cameraPosition += (cameraForward*(float(forward) - float(backward)) +\n        \t\t       cameraRight  *(float(right)   - float(left)    ) +\n        \t           cameraUpward *(float(up)      - float(down)    )\n                      )*stepSize;\n    \n    //Roll\n    float r = (float(rollleft)-float(rollright))*iTimeDelta*CAMERA_ROLL_SENSITIVITY;\n    rot(cameraRight, cameraUpward , r);\n    \n    //Pitch & Yaw\n    if(mouseLeft){\n        if(mouseOld.z==0.){\n            mouseOld.xy = iMouse.zw;\n            mouseOld.z = 1.;\n        }\n\t\tvec2 s = iMouse.xy-mouseOld.xy;\n        rot(cameraForward, cameraUpward, s.y*CAMERA_SENSITIVITY);\n        rot(cameraForward, cameraRight , s.x*CAMERA_SENSITIVITY);\n    }else{\n    \tmouseOld.z = 0.;   \n    }\n    \n    GramSchmidt33(cameraForward, cameraUpward, cameraRight);\n    \n    if(p.x==0){\n    \tfragColor.rgb = cameraPosition;\n    }else if(p.x==1){\n        fragColor.rgb = cameraForward;\n    }else if(p.x==2){\n        fragColor.rgb = cameraRight;\n    }else if(p.x==3){\n        fragColor.rgb = cameraUpward;\n    }else if(p.x==4){\n        fragColor.rgb = vec3(iMouse.xy, mouseOld.z);\n    }\n    \n    fragColor.w = float(interaction);\n}","name":"Buffer B","description":"","type":"buffer"}]}