{"ver":"0.1","info":{"id":"sdjfDG","date":"1647013128","viewed":80,"name":"cubemappig","username":"Passo2018","description":"a piggy cubmap reflection","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TMIN 0.02\n#define TMAX 150.\n#define RAYMARCH_TIME 128\n#define PRECISION .001\n#define AA 4\n#define PI 3.1415926\n\nvec2 fixuv(in vec2 c) {\n    return (2. * c - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\n\nfloat sdSphere (in vec3 p,float r,in vec3 cen){\n    return length(p-cen) - r;\n}\n\nfloat sdSmoothUnion( float d1, float d2, float k ) \n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat sdPlane(in vec3 p)\n{\n    return p.y+1.;\n}\n\nfloat sdCapsule(vec3 p ,vec3 a ,vec3 b, float r){\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n\n    float t = dot(ab,ap)/dot(ab,ab);\n    t = clamp(t,0.,1.);\n    \n    vec3 c = a + t*ab;\n    float d = length(p-c)- r;\n    return d;\n}\n\nfloat smUni( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nvec2 opU (vec2 a, vec2 b){\n    return a.x < b.x ? a : b;\n}\n\nfloat map(in vec3 p){\n    float d = sdSphere(p,2.,vec3(0.,0.1,0.));\n    float d1 = sdSphere(p,.1,vec3(0.1,0.7,-1.95));\n    float d3 = sdSphere(p,.1,vec3(1.3,0.6,-1.2));\n    float d2 = sdSphere(p,.3,vec3(1.,0.1,-2.));\n    float cp = sdCapsule(p,vec3(2.,0.,1.),vec3(1.,0.,1.),0.7);\n    float cd = sdCapsule(p,vec3(-2.,0.,-1.),vec3(-1.,0.,-1.),0.7);\n\n    d = smUni(d,cp,0.6);\n    d = smUni(d,cd,0.6);\n    d = smUni(d,d1,0.6);\n    d = smUni(d,d2,0.6);\n    d = smUni(d,d3,0.6);\n   // d = min(d,sdPlane(p));\n    return d;\n}\n\n\nvec3 calcNormal( in vec3 p ) // for function f(p)\n{\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.001 + 0.15*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 1.5*occ, 0.0, 1.0 );    \n}\n\nfloat rayMarching(in vec3 ro, in vec3 rd){\n    float t = TMIN;\n    for (int i = 0; i < RAYMARCH_TIME && t < TMAX; i++){\n        vec3 p = ro + t * rd;\n        float d = map(p);\n        if (d < PRECISION ){\n            break;\n        }\n        t += d;\n    }\n    return t;\n}\n\nmat3 setCamera(vec3 ta, vec3 ro, float cr){\n\n    vec3 z = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr),cos(cr),0.);\n    vec3 x = normalize(cross(z, cp));\n    vec3 y = cross(x,z);\n    return mat3(x, y, z);\n}\n\nfloat softShadow(in vec3 ro, in vec3 rd,float k){\n    float t = TMIN;\n    float res = 1.;\n    float ld = 1e20;\n   for(int i = 0; i < RAYMARCH_TIME ; i++) {\n        vec3 p = ro + t * rd;\n        float d = map(p);\n        //res = min(res, k*d/t);\n        float y = (i==0) ? 0.0 : d*d/(2.0*ld); \n        float l = sqrt(d*d-y*y);\n        res = min(res, k*l/max(0.0,t-y));\n        ld = d;\n        t += d;\n        if(d < PRECISION || t > TMAX)\n            break;\n    }\n    return res;\n}\n\nvec3 render(vec2 uv){\n    vec3 color = vec3 (0.);\n     vec3 ro = vec3(0.,3., 4.);\n\n  \n        float theta = iMouse.x / iResolution.x * 2. * PI;\n        float thetab = iMouse.y / iResolution.y * 2. * PI;\n        ro = vec3(4.*cos(theta), 10.*sin(thetab),4.*sin(theta));\n\n   \n    vec3 ta = vec3(0.);\n    mat3 cam = setCamera(ta, ro, 0.);\n    \n    vec3 rd = normalize(cam * vec3(uv, 1.));\n    float t = rayMarching(ro, rd);\n    \n    if(t > TMAX){\n     vec3 color = texture(iChannel0,rd).rgb;\n     return color;}\n    if(t < TMAX)\n    {\n        vec3 p = ro + t*rd; //location\n        vec3 n = calcNormal(p);\n        vec3 light = vec3(2,3,0.);\n        float dif = clamp(dot(normalize(light - p),n), 0., 1.) ;\n        vec3 cm = 1.5*vec3(.5)*textureLod(iChannel0,reflect(rd,n),6.).rgb;\n        float fresnel = pow(clamp(1. - dot(n,-rd),0.,1.),5.);\n        //shadow\n        p +=  PRECISION * n;\n        float st = softShadow(p,normalize(light - p),7.);\n        dif *= st;\n        float shadow = rayMarching(p,n);\n    if(shadow<length(light-p)) dif*=.1;\n\n        \n        float ao = calcAO(p,calcNormal(p));\n        float amb = 0.1* dot(n,vec3(0.,1.,0.));\n       color = vec3(dif) + vec3(amb) - vec3(0.01 * ao) + cm*0.7 + fresnel;\n      \n    }\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{   \n    vec3 color = vec3(0.);\n    for(int m = 0; m < AA; m++)\n    {\n        for (int n = 0; n < AA; n++){\n            vec2 offset = 2.*(vec2(float(m),float(n))/float(AA) - 0.5);\n            vec2 uv = fixuv(fragCoord + offset);\n            color += render(uv); //相当于把render上下左右A平方大小像素的color值都加起来，最终是A平方个\n        }\n    }\n   \n    \n    color = color / float(AA * AA);//除去这个归一化颜色的数量，\n    fragColor = vec4(color , 1.);\n\n}","name":"Image","description":"","type":"image"}]}