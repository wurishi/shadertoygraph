{"ver":"0.1","info":{"id":"McXXDM","date":"1705331605","viewed":144,"name":"Cubic Julia (Paul Bourke)","username":"MisterSirCode","description":"A neat take on the mandelbrot / julia. https://paulbourke.net/fractals/cubicjulia/\n\nPart of my Simple Fractals playlist: [URL]https://www.shadertoy.com/playlist/NfSGW3[/URL]","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["fractal","julia","mandelbrot","paul","bourke"],"hasliked":0,"parentid":"fscyzB","parentname":"10 Line Mandelbrot"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 frac = texture(iChannel0, fragCoord / iResolution.xy).xy;\n    fragColor = vec4(1.0 / vec3(1.2, .7, .2) * pow(frac.x, 1.7), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float cAbs(vec2 z) {\n    return length(z);\n}\n\nfloat cArg(vec2 a) {\n    return atan(a.y, a.x);\n}\n\nvec2 cExp(vec2 z) {\n    return exp(z.x) * vec2(cos(z.y), sin(z.y));\n}\n\nvec2 cLog(vec2 a) {\n    return vec2(log(cAbs(a)), cArg(a));\n}\n\nvec2 cPow(vec2 z, float a) {\n    return cExp(cLog(z) * a);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 hash21(float p) {\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 sampler(vec2 p, float itr) {\n    vec2 z = p;\n    float l = 0.0;\n    vec2 c = vec2(1.0008875, 0.0);\n    for (l = 0.0; l < itr; l += 1.0) {\n        z = cPow(z, 3.0) - cPow(-z, 2.00001) + c;\n        if(dot(z, z) > 65536.0) break;\n    }\n    l = l - log(log(dot(z, z))) + 4.;\n    return vec3(l, z);\n}\n\nvec2 diskPt(vec2 p) {\n    return sqrt(p.x) * vec2(sin(6.2832*p.y), cos(6.2832*p.y));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 res = iResolution.xy;\n    vec4 pr = texture(iChannel0, fragCoord / res);\n    vec2 uv = (((2. * fragCoord - res) / res.y) + vec2(0.15, 0)) * 1.2;\n    float itr = 10000.0;\n    float ct = pr.w; // grab current time from last frame\n    if (res != pr.yz)\n        ct = 0.0;\n    uv += 1.15 * diskPt(hash21(mod(iTime, 1000.))) / res;\n    \n    vec3 fr = sampler(uv, itr);\n    fr.x = pow(fr.x / itr * 5.0, 0.4);\n    fr.x = clamp(fr.x, 0., 1.);\n    \n    float cfr = mix(fr.x, pr.x, .99);\n    cfr = mix(fr.x, cfr, clamp(ct, 0.0, 1.0));\n    \n    ct += 0.01;\n    \n    fragColor = vec4(vec3(cfr, res), ct);\n}","name":"Buffer A","description":"","type":"buffer"}]}