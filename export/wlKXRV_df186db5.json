{"ver":"0.1","info":{"id":"wlKXRV","date":"1583173004","viewed":93,"name":"1/2020 grid","username":"rimina","description":"Something very simple to get my daily shader routine going ;)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 q = 2.0*uv-1.0;\n    q.x *= (iResolution.x/iResolution.y);\n\n    bool xt = false;\n    bool yt = false;\n    float t = sin(iTime*0.5)*300.0;\n    vec3 col = vec3(1.0);\n    if(cos(q.x*t) > -0.5 && cos(q.x*t*0.25) < 0.5){\n        col = fract(cos(q.x))*vec3(0.5)+vec3(0.5, 0.2, 0.3);\n        xt = true;\n    }\n    if(cos(q.y*t) > -0.5 && cos(q.y*t*0.25) < 0.5){\n        col = fract(sin(q.y))*vec3(0.5)+vec3(0.5, 0.2, 0.3);\n        yt = true;\n    }\n    if(xt && yt){\n        col = vec3(1.);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}