{"ver":"0.1","info":{"id":"wtySDd","date":"1583848746","viewed":342,"name":"Optimized Multi XOR sorting","username":"michael0884","description":"Now the performance is O(N*(log2²(N)/2 + 2log2(N))) or something like that. ","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["2d","sorting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Multi XOR sorting simplified II\" by iq. https://shadertoy.com/view/WlyXDt\n// 2020-03-10 13:40:56\n\n// Fork of \"Multi XOR sorting simplified\" by michael0884\n// https://www.shadertoy.com/view/WlySDt\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 p = ivec2(fragCoord);\n    \n    fragColor = texelFetch(iChannel0,p,0);\n    \n    if( p.x>=N && p.x<2*N )\n    {\n        p.x -= N;\n\t\tint id = p.y*N + p.x;\n        if( id<(M-1) )\n        {\n            vec4 v0 = getData(iChannel0,id+0);\n            vec4 v1 = getData(iChannel0,id+1);\n            fragColor = vec4((v0.x>v1.x)?1:0,\n                             (v0.y>v1.y)?1:0,\n                             (v0.z>v1.z)?1:0,\n                             (v0.w>v1.w)?1:0);\n        }\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 sort(ivec2 p)\n{\n    //step and substep\n    int pas, ste;\n    for(pas = S+4, ste = iFrame%(P); ste >= pas; ste -= pas, pas--); //black magic\n    ste = (pas - 1 - ste)%S;\n    // pair ids\n    int id0 = p.y*N + p.x;  \t\t//this pixel id\n    int id1 = id0^((1<<(ste+1))-1); //pair pixel id, by flipping first n bits, n - is the substep\n        \n\t// move data sorted\n    vec4 v0 = getData(iChannel0,id0);\n    vec4 v1 = getData(iChannel0,id1);\n    return (id0>id1) ? max(v0,v1) : min(v0,v1);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    ivec2 p = ivec2(fragCoord);\n    \n    if( max(p.x,p.y)>=N ) return;\n  //if( iFrame==0 ) { fragColor = texelFetch(iChannel1,2*p,0); return; }\n    if( (iFrame%(P))==0 ) { fragColor = texelFetch(iChannel1,2*p,0); return; }\n  //if( iFrame>N ) return;\n\n    fragColor = sort(p);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define N   256\n#define M 65536 // N² = total number of texels\n#define S    16 // log2(M) = 2·log2(N)\n#define P    128+32// log2(M)²/2 + 2log2(M) - total number of passes\nvec4 getData( sampler2D ch, int id )\n{\n\treturn texelFetch(ch, ivec2(id%N,id/N), 0);\n}\n","name":"Common","description":"","type":"common"}]}