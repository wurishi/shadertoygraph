{"ver":"0.1","info":{"id":"ttsfRj","date":"1597213352","viewed":602,"name":"Fast Fluid Simulation For Gas","username":"yuletian","description":"Fast Fluid for gas","likes":13,"published":1,"flags":32,"usePreview":0,"tags":["fluidicsimulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simple and Fast Fluid Simulation\n// ref : https://hal.inria.fr/inria-00596050/document\n// Vorticity Confinement from:\n//     Softology`s Blog https://softologyblog.wordpress.com/2019/03/13/vorticity-confinement-for-eulerian-fluid-simulations/\n// thanks nimitz and Softology it was amazing.\n// Simple and Fast Fluid Simulation Shader Toy\n// the bufferA do fluid simulation, bufferB simply do some material advert to visualize the fluid.\n// author : yuletian\n\n// Rec K = 0.2\n// Rec Dt = 0.15\n// Rec v = 0.55\n// Rec VorticityAmount = 0.73\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float SplitCoord = (iMouse.x == 0.0) ? iResolution.x/2. + iResolution.x*cos(iTime*.5) : iMouse.x;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if(fragCoord.x<SplitCoord)\n    {\n        fragColor = textureLod(iChannel1, uv, 0.0);\n    }\n    else\n    {\n        fragColor = textureLod(iChannel0, uv, 0.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Simple and Fast Fluid Simulation\n// ref : https://hal.inria.fr/inria-00596050/document\n// Vorticity Confinement from:\n//     Softology`s Blog https://softologyblog.wordpress.com/2019/03/13/vorticity-confinement-for-eulerian-fluid-simulations/\n// thanks nimitz and Softology it was amazing.\n// Simple and Fast Fluid Simulation Shader Toy\n// the bufferA do fluid simulation, bufferB simply do some material advert to visualize the fluid.\n// author : yuletian\n\n// Rec K = 0.2\n// Rec Dt = 0.15\n// Rec v = 0.55\n// Rec VorticityAmount = 0.73\n\nvec4 SimulateFluid(sampler2D FluidTex, float K, float v, float Dt, float DensityInit, float VorticityAmount, vec2 ExternalForce, vec2 TexUV, vec2 TexSize)\n{\n    // prepare factor\n    float CentralScale = 0.5;\n    float S = K / Dt;\n    \n    // fetch neighbor fluid info\n    vec4 FluidC = textureLod(FluidTex, TexUV/TexSize, 0.0);\n    vec4 FluidR = textureLod(FluidTex, (TexUV + vec2(1., 0.))/TexSize, 0.0);\n    vec4 FluidL = textureLod(FluidTex, (TexUV + vec2(-1., 0.))/TexSize, 0.0);\n    vec4 FluidU = textureLod(FluidTex, (TexUV + vec2(0., 1.))/TexSize, 0.0);\n    vec4 FluidD = textureLod(FluidTex, (TexUV + vec2(0., -1.))/TexSize, 0.0);\n    \n    // Dvelocity/Dx, Dvelocity/dy\n    vec4 FluidDx = (FluidR - FluidL)*CentralScale;\n    vec4 FluidDy = (FluidU - FluidD)*CentralScale;\n    \n    float DivVelocity = FluidDx.x + FluidDy.y;\n    vec2 DelDensity = vec2(FluidDx.z, FluidDy.z);\n    \n    // Mass conservation\n    float OldDensity = FluidC.z;\n    float NewDensity = OldDensity - Dt * dot(vec3(DelDensity, DivVelocity), FluidC.xyz);\n    NewDensity = clamp(NewDensity, 0.7f, 3.0f);\n    \n    // Momentum conservation\n    // --- slove for the equation`s right hand side\n    vec2 PresurePart = -(S * DelDensity / DensityInit);\n    vec2 VelocityLaplacian = FluidR.xy + FluidL.xy + FluidU.xy + FluidD.xy - 4.0*FluidC.xy;\n    vec2 ViscosityPart = v * VelocityLaplacian;\n    \n    // --- back trace for velocity\n    vec2 BackTracePos = TexUV - Dt * FluidC.xy;\n    vec4 AdvertData = textureLod(FluidTex, BackTracePos/TexSize, 0.0);\n    vec2 NewVelocity = AdvertData.xy;\n    NewVelocity += Dt * (ViscosityPart/NewDensity + PresurePart/NewDensity + ExternalForce/NewDensity - AdvertData.xy * vec2(FluidDx.x, FluidDy.y));\n    NewVelocity = max(vec2(0), abs(NewVelocity)-1e-4)*sign(NewVelocity); //velocity decay\n    \n    // --- vorticity confinement\n    float NewCurl = (FluidU.x - FluidD.x + FluidL.y - FluidR.y);\n    vec2 Vort = vec2(abs(FluidD.w) - abs(FluidU.w), abs(FluidR.w) - abs(FluidL.w));\n    float VortLength = length(Vort) + 1e-5;\n    Vort *= VorticityAmount/VortLength;\n    NewVelocity.xy += Dt * Vort * NewCurl;\n    \n    // Solve boundary\n    vec2 UV = TexUV / TexSize;\n    NewVelocity.y *= smoothstep(.5,.48,abs(UV.y-0.5)); //Boundaries\n    NewVelocity.x *= smoothstep(.5,.48,abs(UV.x-0.5)); //Boundaries\n    \n    vec4 OutData = vec4(NewVelocity, NewDensity, NewCurl);\n    // clamp for stable\n    OutData = clamp(OutData, vec4(vec2(-10), 0.1 , -10.), vec4(vec2(10), 4.0 , 10.));\n\n    return OutData;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Simple and Fast Fluid Simulation\n// ref : https://hal.inria.fr/inria-00596050/document\n// Vorticity Confinement from:\n//     Softology`s Blog https://softologyblog.wordpress.com/2019/03/13/vorticity-confinement-for-eulerian-fluid-simulations/\n// thanks nimitz and Softology it was amazing.\n// Simple and Fast Fluid Simulation Shader Toy\n// the bufferA do fluid simulation, bufferB simply do some material advert to visualize the fluid.\n// author : yuletian\n\n// Rec K = 0.2\n// Rec Dt = 0.15\n// Rec v = 0.55\n// Rec VorticityAmount = 0.73\n\nfloat DotSelf(vec2 p)\n{\n    return dot(p,p);\n}\n\nvec2 point1(float t) \n{\n    t *= 0.62;\n    return vec2(0.4,0.5 + sin(t)*0.2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float InitDensity = 1.;\n    \n    vec2 ExtForce = vec2(0.0, 0.0);\n    \n    // fill mouse presure\n    vec2 Dir = fragCoord - iMouse.xy;\n    float DisMouse = length(Dir);\n    if(DisMouse < 10.0 && iMouse.z >= 1.0)\n    {\n        Dir = normalize(Dir);\n        ExtForce = 50. * Dir;\n    }\n    \n    // fill other presure\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    ExtForce.xy += 0.75*vec2(.0003, 0.00015)/(DotSelf(uv-point1(iTime))+0.0001);\n    \n    vec4 SimulateResult = SimulateFluid(iChannel0, 0.2, 0.55, 0.19, InitDensity, 0.3, ExtForce, fragCoord, iResolution.xy);\n    \n    // fill condition\n    if (iFrame < 20)\n    {\n        SimulateResult = vec4(0., 0., InitDensity, 0.0);\n    }\n    \n    fragColor = SimulateResult;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Simple and Fast Fluid Simulation\n// ref : https://hal.inria.fr/inria-00596050/document\n// Vorticity Confinement from:\n//     Softology`s Blog https://softologyblog.wordpress.com/2019/03/13/vorticity-confinement-for-eulerian-fluid-simulations/\n// thanks nimitz and Softology it was amazing.\n// Simple and Fast Fluid Simulation Shader Toy\n// the bufferA do fluid simulation, bufferB simply do some material advert to visualize the fluid.\n// author : yuletian\n\n// Rec K = 0.2\n// Rec Dt = 0.15\n// Rec v = 0.55\n// Rec VorticityAmount = 0.73\n\nfloat DotSelf(vec2 p)\n{\n    return dot(p,p);\n}\n\nvec2 point1(float t) \n{\n    t *= 0.62;\n    return vec2(0.4,0.5 + sin(t)*0.2);\n}\n\n// this guy only used to visualize..\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 SampleOut = textureLod(iChannel0, uv, 0.0);\n    // trace back\n    vec4 AdvertData = textureLod(iChannel1, uv-0.15*SampleOut.xy*(1./iResolution.xy), 0.0);\n    \n    // fill mouse color\n    float DisMouse = length(fragCoord - iMouse.xy);\n    if(DisMouse < 10.0 && iMouse.z >= 1.0)\n    {\n        AdvertData = vec4(1.0, 0.0, 0.0, 0.0);\n    }\n    AdvertData += length(0.75*vec2(.0003, 0.00015)/(DotSelf(uv-point1(iTime))+0.0001))*vec4(0.02,0.0,0.0,0.0);\n    \n    fragColor = AdvertData;\n}","name":"Buffer B","description":"","type":"buffer"}]}