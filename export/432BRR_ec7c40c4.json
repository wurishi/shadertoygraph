{"ver":"0.1","info":{"id":"432BRR","date":"1729116580","viewed":29,"name":"ship-ship2","username":"bb9","description":"2","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Функция для рисования треугольника\nfloat triangle(vec2 uv, vec2 p0, vec2 p1, vec2 p2) {\n    vec3 u = vec3(p1 - p0, 0.0);\n    vec3 v = vec3(p2 - p0, 0.0);\n    vec3 w = vec3(uv - p0, 0.0);\n    float d = dot(cross(u, v), vec3(0.0, 0.0, 1.0));\n    float s = sign(d);\n    return s * step(0.0, dot(cross(u, w), vec3(0.0, 0.0, 1.0))) *\n               step(0.0, dot(cross(v, w), vec3(0.0, 0.0, 1.0))) *\n               step(0.0, -dot(cross(u - v, w), vec3(0.0, 0.0, 1.0)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n   \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n \n    float waveHeight = 0.1; \n    float waveSpeed = 5.0; // Скорость волны\n    float frequency = 10.0; // Частота волны\n\n    // Время анимации\n    float time = iTime * waveSpeed;\n\n    \n    float wave = cos(time*0.5)*sin(uv.x * frequency + time*0.8) * waveHeight*0.6;\n\n    \n    float boatY = 0.22 + wave; // Высота лодки \n\n    // Рисуем воду\n    vec3 waterColor = vec3(0.2, 0.3, 0.9); // Цвет воды\n    fragColor = vec4(waterColor, 1.0);\n\n \n uv = fragCoord / iResolution.xy;\n\n    \n    vec2 center = vec2(0.5, 0.3); \n\n    // Радиус круга\n    float radius = 0.3;\n\n   \n    float stretchFactorX = 1.5; // 0.5 означает сжатие в 2 раза по X\n\n    \n    vec2 scaledUV = vec2((uv.x - center.x) * stretchFactorX + center.x, uv.y);\n\n    \n    float dist = distance(scaledUV, center);\n\n    \n    if(dist < radius)\n    {\n        \n        float t = dist / radius;\n\n       \n        vec3 sunsetColor = mix(vec3(1.0, 0.5, 0.0), vec3(1.0, 0.2, 0.0), t); // Градиент от оранжевого к красному\n\n        fragColor = vec4(sunsetColor, 1.0); // Применяем цвет градиента\n    }\n    \n    \n    if (uv.y < boatY)//волна рас\n    {\n        vec3 boatColor = vec3(0.0, 0.4, 1.0); \n        float boatWidth = 1.0; \n        if (uv.x > 0.5 - boatWidth && uv.x < 0.5 + boatWidth)\n        {\n            fragColor = vec4(boatColor, 1.0); \n        }\n    }\n    wave = sin((uv.x+0.1) * frequency + time*1.1) * waveHeight*cos(time*0.5);\n     boatY = 0.14 + wave;//волна два\n    \n    if (uv.y < boatY)\n    {\n        vec3 boatColor = vec3(0.1, 0.5, 1.0); \n        float boatWidth = 1.0; \n        if (uv.x > 0.5 - boatWidth && uv.x < 0.5 + boatWidth)\n        {\n            fragColor = vec4(boatColor, 1.0); \n        }\n    }\n    \n    \n    wave = cos(time*0.2)*time*0.001*sin((uv.x+0.67) * frequency + time*0.5) * waveHeight*0.3;\n   \n   uv = fragCoord / iResolution.xy;\n  \n    boatY = 0.5 ;\n    \n    \n    \n    \n    \n    \n    uv.y = 1.0 - uv.y;\n    float boatBaseWidth = 0.2; // Ширина лодки\n    float boatHeight = 0.8; \n    float triangleHeight = 0.1; // Высота треуг\n\n    \n\n\n   \n    \n   \n    \n    \n    \n    uv.y = 1.0 - uv.y;\n    \n    \n    //корабль 2\n    // Получаем нормализованные координаты пикселя\n    uv = fragCoord / iResolution.xy;\n    \n    \n    vec2 startPos = vec2(-0.3, 0.13);  // Начальная позиция (x, y)\n    vec2 endPos = vec2(0.6, 0.17);    // Конечная позиция (x1, y1)\n    \n    // Время анимации\n    time = mod(iTime, 3.0); \n    vec2 rectPos = mix(startPos, endPos, time / 2.0); \n\n    // Размеры прямоугольника\n    vec2 rectSize = vec2(0.4, 0.1);\n    vec2 rectSize1 = vec2(0.35, 0.1);\n    vec2 rectSize3 = vec2(0.35, 0.1);\n    vec2 rectSize4 = vec2(0.35, 0.1);\n\n    // Проверяем, находится ли текущий фрагмент внутри прямоугольника\n    if (uv.x >= rectPos.x && uv.x <= rectPos.x + rectSize.x &&\n        uv.y >= rectPos.y && uv.y <= rectPos.y + rectSize.y)\n    {\n        fragColor = vec4(1.0, 0.4, 0.1, 0.6); // Красный цвет для прямоугольника\n    }\n    if (uv.x >= rectPos.x+0.03 && uv.x <= rectPos.x + rectSize1.x &&\n        uv.y >= rectPos.y-0.05 && uv.y <= rectPos.y + rectSize1.y-0.1)\n    {\n        fragColor = vec4(0.8, 0.5, 0.2, 0.6); // Красный цвет для прямоугольника\n    }\n    \n    if (uv.x >= rectPos.x+0.1 && uv.x <= rectPos.x + rectSize3.x-0.05 &&\n        uv.y >= rectPos.y*1.5+rectPos.x*0.2+0.05 && uv.y <= rectPos.y + rectSize3.y+0.26)\n    {\n        fragColor = vec4(1.0, 1.0, 1.0, 0.0); // Красный цвет для прямоугольника\n    }\n    if (uv.x >= rectPos.x+0.195 && uv.x <= rectPos.x + rectSize4.x-0.145 &&\n        uv.y >= rectPos.y+0.08 && uv.y <= rectPos.y + rectSize4.y+0.25)\n    {\n        fragColor = vec4(0.8, 0.7, 0.2, 0.6); // Красный цвет для прямоугольника\n    }\n    \n    \n    \n    \n    time = iTime * waveSpeed;\n     wave = sin((uv.x+0.5) * frequency + time*1.1) * waveHeight*cos(time*0.3)*0.8;\n    boatY = 0.15 + wave;\n    time = iTime * waveSpeed;\n    if (uv.y < boatY)\n    {\n        vec3 boatColor = vec3(0.0, 0.3, 1.0); \n        float boatWidth = 1.0; \n        if (uv.x > 0.5 - boatWidth && uv.x < 0.5 + boatWidth)\n        {\n            fragColor = vec4(boatColor, 1.0); \n        }\n    }\n}","name":"Image","description":"","type":"image"}]}