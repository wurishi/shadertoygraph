{"ver":"0.1","info":{"id":"tlySD3","date":"1583707236","viewed":121,"name":"7/2020","username":"rimina","description":"Continuum of my daily shader thing. I started to work on this shader 2nd of March and am still continuing. Slow progress is still progress right! Yesterday's version: https://www.shadertoy.com/view/3tKXWV","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","wip"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 128\n#define E 0.001\n#define gamma vec3(2.2)\n\nconst vec3 AMBIENT = vec3(0.2, 0.4, 0.64);\nconst vec3 LC1 = vec3(0.3, 0.6, 0.8);\nconst vec3 LC2 = vec3(0.6, 0.4, 0.3);\nconst vec3 FOG = vec3(0.64, 0.62, 0.6);\n\nstruct Material{\n    vec3 lambertian;\n    vec3 specular;\n    float shininess;\n    bool reflective;\n    bool refractive;\n};\n\n\nMaterial getGroundMaterial(){\n    Material mat;\n    mat.lambertian = vec3(0.1, 0.4, 0.5);\n    mat.specular = FOG;\n    mat.shininess = 4.0;\n    mat.reflective = true;\n    mat.refractive = false;\n    \n    return mat;\n}\n\nMaterial getBlockMaterial(in vec2 id){\n    vec2 s = smoothstep(vec2(0.2), vec2(0.8), id);\n    \n    Material mat;\n    mat.lambertian = vec3(s.x, s.y, s.x);\n    mat.specular = vec3(s.y, id.x, s.x);\n    mat.shininess = 40.0;\n    mat.reflective = mod(id.x, 2.0) == 0.0;\n    mat.refractive = false;\n    \n    return mat;\n}\n\n// 3D noise function (IQ)\nfloat noise(vec3 p){\n\tvec3 ip = floor(p);\n    p -= ip;\n    vec3 s = vec3(7.0,157.0,113.0);\n    vec4 h = vec4(0.0, s.yz, s.y+s.z)+dot(ip, s);\n    p = p*p*(3.0-2.0*p);\n    h = mix(fract(sin(h)*43758.5), fract(sin(h+s.x)*43758.5), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z);\n}\n\n\nfloat scene(in vec3 p, out Material mat){\n    \n    float pl = dot(p, normalize(vec3(0.0, 1.0, 0.0)))-cos(iTime*0.1)*0.5;\n    pl -= sin(noise(p*(sqrt(5.0)*0.5 + 0.5)*0.2+iTime*0.2));\n    \n    vec3 pp = p;\n    vec2 n = vec2(2.7, 8.0);\n    vec2 dif = n*0.5;\n    pp.xz = mod(p.xz+dif, n)-dif;\n    vec2 id = abs(floor((p.xz+dif)/n));\n    float idx = 1.0+sin(id.x);\n    float y = abs(cos(idx)+sin(id.y))+0.5;\n    \n    vec3 d = abs(pp-vec3(0.0, y, 0.0))-vec3(1.0, y, 1.0);\n    float sp = length(max(max(d.x, d.y), d.z));\n    \n    vec3 gd = abs(pp)-vec3(n.x, 10.0, n.y)*0.5;\n    \n    float guard = -length(max(max(gd.x, gd.y), gd.z));\n    guard = abs(guard) + n.x*0.1;\n    \n    if(pl < sp){\n        \n        mat = getGroundMaterial();\n    }\n    else{\n        mat = getBlockMaterial(id);\n    }\n    \n    return min(min(sp, guard), pl);\n}\n\nfloat march(in vec3 o, in vec3 d, in float far, in bool inside, out vec3 p, out bool hit, out Material mat){\n    float t = 0.0;\n    float dir = inside ? -1.0 : 1.0;\n    hit = false;\n    for(int i = 0; i < STEPS; ++i){\n        p = o + d*t;\n        float dist = dir*scene(p, mat);\n        \n        if(abs(dist) < E || t > far){\n            if(abs(dist) < E ){\n            \thit = true;\n            }\n            break;\n        }\n        t += dist;\n    }\n    \n    return t;\n}\n\nvec3 normal(in vec3 p){\n    vec3 eps = vec3(E, 0.0, 0.0);\n    Material mat;\n    return normalize(vec3(\n        scene(p+eps.xyy, mat) - scene(p-eps.xyy, mat),\n        scene(p+eps.yxy, mat) - scene(p-eps.yxy, mat),\n        scene(p+eps.yyx, mat) - scene(p-eps.yyx, mat)\n    ));\n}\n\nvec3 phong(in vec3 n, in vec3 d, in vec3 ld, in Material mat){\n    float lamb = max(dot(n,ld), 0.0);\n    vec3 angle = reflect(n, ld);\n    float spec = pow(max(dot(d, angle), 0.0), mat.shininess);\n    \n    return (lamb*mat.lambertian*0.5 + spec*mat.specular*0.8);\n}\n\nvec3 fog(in vec3 col, in vec3 p, in vec3 ro, in vec3 rd, in vec3 ld, in vec3 lc){\n    float d = length(p-ro);\n    float sa = max(dot(rd, -ld), 0.0);\n    float fa = 1.0-exp(-d*0.05);\n    vec3 fc = mix(FOG, lc, pow(sa, 4.0));\n    return mix(col, fc, fa);\n}\n\nvec3 shade(in vec3 p, in vec3 d, in vec3 ld, in vec3 lp, in Material mat){\n    \n    vec3 n = normal(p);\n    \n    vec3 col = phong(n, d, ld, mat);\n    \n    float l = distance(p, lp);\n    bool hit = false;\n    vec3 sp = vec3(0.0);\n    Material mats;\n    float st = march(p+E*n*2.0, ld, 40.0, false, sp, hit, mats);\n    vec3 s = vec3(1.0);\n    if(hit){\n        s = vec3(0.1, 0.2, 0.3);\n    }\n    \n    vec3 reflected = vec3(0.0);\n    if(mat.reflective){\n        hit = false;\n        vec3 refd = reflect(d, n);\n        float rt = march(p+E*n*2.0, refd, 20.0, false, sp, hit, mats);\n        if(hit){\n            vec3 nr = normal(sp);\n            reflected = phong(nr, refd, ld, mats);\n        }\n        else if(rt >= 20.0){\n            reflected = FOG*0.2;\n        }\n        col = mix(col, reflected, 0.5);\n        \n    }\n    \n    return col*s;\n}\n\nmat3 camera(in vec3 o, in vec3 t, in vec3 up){\n    \n    vec3 z = normalize(t-o);\n    vec3 x = normalize(cross(z, up));\n    vec3 y = normalize(cross(x, z));\n    \n    return mat3(x, y, z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 q = uv*2.0-1.0;//scaling from -1 to 1\n    q.x *= (iResolution.x/iResolution.y);\n    \n    vec3 ro = vec3(3.0, 4.5, iTime-30.0);\n    vec3 rt = vec3(0.0, -4.0, ro.z+10.0);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    \n    mat3 cam = camera(ro, rt, up);\n    vec3 rd = normalize(cam*vec3(q, radians(60.0)));\n    \n    vec3 p = vec3(0.0);\n    bool hit = false;\n    Material mat;\n    float t = march(ro, rd, 40.0, false, p, hit, mat);\n    vec3 col = AMBIENT * 0.6;\n    \n    vec3 lp = vec3(20.0*sin(iTime*0.25)+ro.x, -10.0, 10.0*cos(iTime*0.25)+ro.z-20.0);\n    vec3 lt = ro;\n    vec3 ld = normalize(lt-lp);\n    vec3 ld2 = normalize(rt-ro);\n    \n    if(hit){\n        vec3 c = shade(p, rd, ld, lp, mat);\n        c += shade(p, rd, -ld2, ro, mat);\n        c *= 0.5;\n        col += c;\n    }\n    \n    col = fog(col, p, ro, rd, ld, LC1);\n    col += fog(col, p, ro, rd, -ld2, LC2);\n    col *= 0.5;\n    \n    col = pow(smoothstep(0.08, 1.1, col)*smoothstep(0.8, 0.005*0.799, \n          distance(uv, vec2(0.5))*(0.8 + 0.005)), 1.0/gamma);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}