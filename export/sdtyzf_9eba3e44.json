{"ver":"0.1","info":{"id":"sdtyzf","date":"1653873232","viewed":140,"name":"Mars Landscape","username":"saalty","description":"My first attempt at making a landscape in Shadertoy. Feedback is greatly appreciated.\nUse your mouse to pan over the landscape.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float BLOOM_STRENGTH = 2.0;\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 final = texture(iChannel0, uv);\n    vec4 oldfinal = final;\n    float s = 1.0;\n    for (float Kx = 0.0;Kx < 6.283;Kx += 0.05)\n    {\n        for (float Ky = 0.0;Ky < 0.08;Ky += 0.008)\n        {\n            float blur = max(texture(iChannel1, uv + vec2(cos(Kx), sin(Kx)) * Ky).x, 0.0);\n            final += texture(iChannel0, uv + vec2(cos(Kx), sin(Kx)) * Ky) * vec4(blur);\n            s++;\n        }\n    }\n    final *= 1.0 / s;\n    fragColor = oldfinal + final * BLOOM_STRENGTH;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float AMBIENT_STRENGTH = 0.2;\nconst float DIFFUSE_STRENGTH = 1.0;\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 col;\n    vec2 mm = iMouse.xy == vec2(0) ? vec2(sin(iTime * 0.1) * iResolution.x, iResolution.y) : iMouse.xy;\n    vec3 ro = vec3(mm / iResolution.xy, mm == iMouse.xy ? 0.0 : -cos(iTime * 0.1));\n    vec3 rorigin = ro;\n    vec3 rd = normalize(vec3(uv - 0.5, 1.0)) * 0.001;\n    float steps = 0.0;\n    while (steps < 2.0)\n    {\n        ro += rd;\n        if (texture(iChannel0, round(ro.xz * 1000.0) * 0.001).x > ro.y)\n        {\n            vec3 v0 = vec3(\n                ro.xz,\n                texture(iChannel0, round(ro.xz * 1000.0) * 0.001).x\n            );\n            vec3 v1 = vec3(\n                ro.xz + vec2(0.0, 0.001),\n                texture(iChannel0, round(ro.xz * 1000.0 + vec2(0.0, 1.0)) * 0.001).x\n            );\n            vec3 v2 = vec3(\n                ro.xz + vec2(0.001, 0.0),\n                texture(iChannel0, round(ro.xz * 1000.0 + vec2(1.0, 0.0)) * 0.001).x\n            );\n            \n            vec3 sundir = normalize(vec3(cos(iTime), sin(iTime), -1.0));\n            vec3 normal = normalize(cross(v1 - v0, v2 - v0));\n            vec3 rr = reflect(normalize(ro - rorigin), normal);\n            \n            float ambient = AMBIENT_STRENGTH;\n            float diffuse = max(dot(normal, sundir), 0.0) * DIFFUSE_STRENGTH;\n            \n            vec4 col = texture(iChannel2, ro.xz); \n            \n            fragColor = vec4(vec3(ambient + diffuse), 1.0) * col;\n            return;\n        }\n        steps += 0.001;\n    }\n    fragColor = texture(iChannel1, rd);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 col;\n    vec2 mm = iMouse.xy == vec2(0) ? vec2(sin(iTime * 0.1) * iResolution.x, iResolution.y) : iMouse.xy;\n    vec3 ro = vec3(mm / iResolution.xy, mm == iMouse.xy ? 0.0 : -cos(iTime * 0.1));\n    vec3 rorigin = ro;\n    vec3 rd = normalize(vec3(uv - 0.5, 1.0)) * 0.001;\n    float steps = 0.0;\n    while (steps < 2.0)\n    {\n        ro += rd;\n        if (texture(iChannel0, round(ro.xz * 1000.0) * 0.001).x > ro.y)\n        {\n            fragColor = vec4(vec3(steps), 1.0);\n            return;\n        }\n        steps += 0.001;\n    }\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}