{"ver":"0.1","info":{"id":"7t3yzH","date":"1659285454","viewed":214,"name":"Glitter(ish)","username":"uiop","description":"Tried to do glitter, try out changing iChannel0 in Buffer A for different environments. All lighting is ambient/environment.","likes":14,"published":1,"flags":32,"usePreview":1,"tags":["sdf","glitter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = texelFetch(iChannel0,ivec2(fragCoord),0);\n    \n    // Post processing\n    \n    float thresh = 1.8;\n    float amt = 0.0009;\n    for(int i = 0; i < 40; i++){\n       vec4 col1 = texelFetch(iChannel0,ivec2(fragCoord)+i,0);\n        vec4 col2 = texelFetch(iChannel0,ivec2(fragCoord)-i,0);\n        if(length(col1) > thresh){\n            col += col1 *amt * float(40-i);\n        }\n                if(length(col2) > thresh){\n            col += col2 *amt  * float(40-i);\n        }\n          col1 = texelFetch(iChannel0,ivec2(fragCoord)+i*ivec2(-1,1),0);\n        col2 = texelFetch(iChannel0,ivec2(fragCoord)-i*ivec2(-1,1),0);\n        if(length(col1) > thresh){\n            col += col1 *amt * float(40-i);\n        }\n                if(length(col2) > thresh){\n            col += col2 *amt  * float(40-i);\n        }\n    }\n   \n    \n    fragColor = vec4(col.xyz,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 rotx(vec3 p, float a){\n    float s = sin(a);\n    float c = cos(a);\n    return(vec3(p.x*c+p.y*s,-p.x*s+p.y*c,p.z));\n}\n\nvec3 radialz(vec3 p, float n,float r){\n    float dir = atan(p.x,p.y)+r;\n    float len = length(vec2(p.x,p.y));\n    dir = abs(mod(dir,3.141592f*2.0f/n)-3.141592f/n);\n    return vec3(sin(dir)*len, cos(dir)*len, p.z);\n}\nvec3 radialz2(vec3 p, float n,float r){\n    float dir = atan(p.x,p.y)+r;\n    float len = length(vec2(p.x,p.y));\n    dir = mod(dir,3.141592f*2.0f/n)-3.141592f/n;\n    return vec3(sin(dir)*len, cos(dir)*len, p.z);\n}\nfloat sdSph(vec3 p, float r){\n    return length(p) - r;\n}\nfloat sdBox( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\nvec4 getSDF(vec3 p,float time){\n    vec3 pos = p;\n    float s = 0.5;\n    vec4 col = vec4(0,0,0,0);\n    vec4 mint = vec4(col.r,col.g,col.b,100000.0);\n    float di2 =sdSph(pos,0.5*s);\n    \n    if(di2 < mint.w){\n            mint = vec4(0.5,1.,0.5,di2);\n        }\n    pos = pos.yzx;\n    for(int i = 0; i < 4; i++){\n        pos = radialz(pos,3.,time*0.00).xyz-s*vec3(0.0,0.5,0.0);\n        //pos = rotx(pos.xzy,time*0.1);\n        //pos = rotx(pos.xyz,time*0.456);\n        pos += s*vec3(0.,-0.3,0.2);\n        //s = s*(0.65+0.10*cos(0.5301*time));\n        s*= 0.5;\n        float di = sdRoundBox(pos,vec3(1,1,1)*s*0.3,s*0.1);\n        if(di < mint.w){\n            mint = vec4(float(i)*8.1*length(pos),float(i)*0.4,0.9-float(i)*0.06,di);\n        }\n    }\n     di2 =sdSph(pos,0.9*s);\n    if(di2 < mint.w){\n            mint = vec4(1.0,0.5,0.5,di2);\n        }\n    return mint;   \n}\n\nvec3 findNormal(vec3 p, float d,float t){\n    return normalize(vec3(getSDF(p + vec3(d,0,d),t).w - getSDF(p - vec3(d,0,0),t).w,\n    getSDF(p + vec3(0,d,0),t).w - getSDF(p - vec3(0,d,0),t).w,\n    getSDF(p + vec3(0,0,d),t).w - getSDF(p - vec3(0,0,d),t).w\n    ));\n}\nfloat rand(vec3 po){\n    return (sin((cos(po.x*290.65+po.y*25.6+po.z*2.97)*5632.75+849.2*cos(po.y*534.24+po.x)+2424.64*cos(po.z*473.76))));\n}\nvec3 refl(vec3 d, vec3 n){\n    return d - 2.f * n * dot(d,n);\n}\n\n// MAGICAL GLITTER SCRIPT \nvec4 glitterNormal(vec3 pos, vec3 dir, float time){\n    vec3 nor = findNormal(pos,0.0001,time);\n\n    vec3 po = floor(pos*400.)/400.;\n\n    vec3 dis = vec3(rand(po+10.5),rand(po+0.23),rand(po+0.2));\n        \n    float offset = rand(po)*(0.2+0.2*sin(time*0.3));\n    nor += dis.xyz*offset;\n    float amt = 1.;\n    return vec4(nor,offset);\n}\n\nvec4 marchRay(inout vec3 pos, vec3 dir, int ma, float time, out bool hit, int bounces){\n    float mindist = 100000.;\n    hit = false;\n    vec4 newcol = vec4(0,0,0,0);\n    for(int i = 0; i < ma; i ++){\n        vec4 oc = getSDF(pos,time);\n        float dis = oc.w;\n        mindist = min(dis,mindist);\n        if(dis < 0.0005){\n            hit = true;\n            \n            float amt = 1.;    \n            vec3 nor = glitterNormal(pos,dir,time).xyz;\n            \n            newcol += 0.3*oc *pow(0.8,float(2-bounces));\n            if(bounces > 0){\n                pos += dir * -0.00055;\n                bounces--;\n                dir = normalize(refl(dir,nor));\n            }else{\n                i=ma;\n            }\n        }\n        if(dis > 2.){\n            newcol+=texture(iChannel0,dir)*1.0*pow(0.8,float(2-bounces));;\n        \n            return vec4(newcol.xyz,mindist);\n        }\n        pos += dir * dis;\n    }\n    return vec4(newcol.xyz,mindist);\n\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float speed = 1.0;\n    float time = iTime*speed+12.5;\n\n    vec2 uv = (fragCoord-0.5f*iResolution.xy)/iResolution.x;\n    \n\n    vec2 camdisp = vec2(rand(vec3(iTime,vec2(fragCoord))), rand(vec3(iTime+25.,vec2(fragCoord))))*0.5;\n    uv += camdisp/iResolution.x;\n    \n    vec3 pos = vec3(0.0*sin(time*0.1f),1.3*cos(time*0.18f),-1.3*sin(time*0.18f));\n    vec3 dir = normalize(rotx(vec3(uv.x,uv.y,-1.).zxy,time*0.18f).zxy);\n    vec3 sunDir = normalize(rotx(vec3(1,1,1),time*0.18f).zxy);\n    vec4 col = vec4(0,0,0,0);\n\n    bool hit;\n    vec4 co = marchRay(pos,dir,200,time,hit,2);\n    if(hit){\n        col = co*1.0;\n    }else{\n    col = co;\n        col = vec4(texture(iChannel0,dir))*0.;\n    }\n    vec4 pre = texelFetch(iChannel1,ivec2(fragCoord),0);\n    fragColor = vec4(col.xyz,1.0)*0.25 + pre *0.75;\n}","name":"Buffer A","description":"","type":"buffer"}]}