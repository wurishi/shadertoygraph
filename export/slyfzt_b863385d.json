{"ver":"0.1","info":{"id":"slyfzt","date":"1665033509","viewed":105,"name":"Math Series ExponentialClampStep","username":"nllorcajr","description":"Summary: A basic study and visualization of math functions used commonly in game development.\nIm new here in shadertoy, for any mistake, or needs improvement, \nyour constructive feedback is highly appreciated!","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: Noel Llorca Jr, Technical Artist, Ubisoft PHL\n\n// Summary: A basic study and visualization of math functions used commonly in game development.\n// Im new here in shadertoy, for any mistake, or needs improvement, \n// your constructive feedback is highly appreciated!\n\n// Function taken from my previous work: https://www.shadertoy.com/view/stGfRd\n// Parameters: Size1, Size2, UV, function, background, linecolor\nvec3 DrawLine(float s1, float s2,vec2 st, float fn, vec3 c1,  vec3 c2)\n{\n  float line = smoothstep( fn - s1, fn, st.y) - smoothstep( fn, fn + s2, st.y);\n  return c1  * (1. - line) + line * c2;\n}\n\nvec3 TimeLine(float s1, float s2,vec2 st, float fn, vec3 c1,  vec3 c2)\n{\n  float line = smoothstep( fn - s1, fn, st.x) - smoothstep( fn, fn + s2, st.x);\n  return c1  * (1. - line) + line * c2;\n}\n\nvec3 AnimDot (float size1, float size2, vec2 uv, float fn, float pos, vec3 c0, vec3 c1)\n{\n    float t = 1. - smoothstep(size1, size2, length(uv - vec2(fn, pos) )); \n    return c0  * (1. - t) + t * c1;\n}\n\n// myFunction\nfloat exponentialClampStep (float u, float k)\n{\n    float curve = (u * u  * (u / (k) * -1. + 2.));\n    return clamp((curve), 0., 1.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n     \n    // Time and Speed\n    float tl = min(1.,fract(iTime / 3.5));//mix(0.,1., abs(sin(iTime)));  \n    float TheFunction = exponentialClampStep (uv.x, tl);        \n    float Shape = 1.;  \n    \n    // Colors\n    vec3 LineColor = vec3(1);\n    vec3 pointFive = vec3(0.984,1.000,0.000);\n    vec3 Pink = vec3(0.988,0.192,0.404);\n    vec3 Warm = vec3(1.000,0.796,0.361);\n    vec3 color = mix(Pink, Warm, TheFunction);\n    vec3 Color2 = vec3(1.000,0.867,0.584);\n    vec3 Color3 = vec3(1.000,0.459,0.600);\n    vec3 Color4 = vec3(0.976,0.580,0.494);\n    vec3 Color5 = vec3(0.953,0.961,0.816);\n    vec3 Color6 = vec3(0.682,0.545,0.631);\n    vec3 Color7 = vec3(0.949,0.929,0.714);\n    vec3 Color8 = vec3(0.824,0.988,0.678);\n    vec3 Color9 = vec3(0.133,0.918,0.922);\n    vec3 Color10 = vec3(0.141,0.922,0.271);\n    vec3 Color11 = vec3(0.110,0.890,0.514);\n    vec3 TimeColor = vec3(0.188,0.188,0.188); \n    \n    color = DrawLine(.01, .01, uv, exponentialClampStep(uv.x, .1), color, Color2);\n    color = DrawLine(.01, .01, uv, exponentialClampStep(uv.x, .2), color, Color3);\n    color = DrawLine(.01, .01, uv, exponentialClampStep(uv.x, .3), color, Color4);\n    color = DrawLine(.01, .01, uv, exponentialClampStep(uv.x, .4), color, Color5); \n    color = DrawLine(.01, .01, uv, exponentialClampStep(uv.x, .5), color, Color6);\n    color = DrawLine(.01, .01, uv, exponentialClampStep(uv.x, .6), color, Color7); \n    color = DrawLine(.01, .01, uv, exponentialClampStep(uv.x, .7), color, Color8);\n    color = DrawLine(.01, .01, uv, exponentialClampStep(uv.x, .8), color, Color9);\n    color = DrawLine(.01, .01, uv, exponentialClampStep(uv.x, .9), color, Color10);\n    color = DrawLine(.01, .01, uv, exponentialClampStep(uv.x, 1.), color, LineColor); \n    \n    \n    // Animated expClampStepFn curve    \n    color = DrawLine(.01, .01, uv, exponentialClampStep(uv.x, tl), color, pointFive); //animated Line Vis in  0 -1 range \n    \n    // Vertical Vis! Notice yellow color will ramp up vertically only after .5 value\n    color = DrawLine(.01, .01, uv, exponentialClampStep(1., tl), color, pointFive); //vertical vis \n    \n    // Dot along the curve\n    color = vec3(AnimDot(.01,.01, uv, tl , exponentialClampStep(uv.x, 1.), color, LineColor )); \n    \n    //Vertical Line (Constant Time and Speed), should be linear and not affected by our function to demo\n    color = TimeLine(.002, .002, uv, tl , color, TimeColor); \n    color = DrawLine(.002, .002, uv,  tl, color, TimeColor);\n    color = vec3(AnimDot(.02,.02, uv, tl , .99, color, TimeColor ));  //Dot   \n    \n    //Vertical Line Speed affected by expClampStepFn\n    color = TimeLine(.002, .002, uv, exponentialClampStep(tl, 1.) , color, LineColor); \n    color = DrawLine(.002, .002, uv,  exponentialClampStep(tl, 1.), color, LineColor);\n    color = vec3(AnimDot(.02,.02, uv, exponentialClampStep(tl, 1.) , .99, color, LineColor )); //Dot\n     \n    // Finally render!\n    fragColor  = vec4(color, 1.0);\n}\n\n\n   ","name":"Image","description":"","type":"image"}]}