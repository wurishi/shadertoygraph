{"ver":"0.1","info":{"id":"XddcWH","date":"1518716252","viewed":207,"name":"Kinegram animations","username":"Fra32","description":"4 animations with a period of 1 second, converted into kinegram pictures that seem to move when a fitting grid slides over them. Change the viewmode to view the original animations or the kinegram pictures without the grid. ","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["illusion","perception","kinegram"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float frames = 20.;\nfloat speed = 1.;\nint viewmode = 0;\t  // 0: Kinegram animation\n\t\t\t\t\t  // 1: Kinegram picture\n\t\t\t\t\t  // 2: Original animation\n\n\nfloat slide = 0.;\nint anim = 1;\n\nvec3 hue(float h) {\n\tvec3 c = mod(h*6.0 + vec3(2, 0, 4), 6.0);\n\treturn h > 1.0 ? vec3(0.5) : clamp(min(c, -c+4.0), 0.0, 1.0);\n}\n\n\nvec2 rot(vec2 p, float a){\n mat2 rm = mat2(cos(a),-sin(a),sin(a),cos(a));   \n    return p*rm;\n}\n\n\nfloat box(vec2 p, vec2 pos, vec2 s,float a){\n    p = rot(p-pos,a);\n    if(abs(p.x)<=s.x/2.&&abs(p.y)<=s.y/2.)\n    \treturn 1.;\n    else\n        return 0.;\n}\n\nfloat circle(vec2 p, vec2 pos, float r){\n\tif(length(pos-p)<=r)\n        return 1.;\n    else\n        return 0.;\n    \n}\n\nfloat gear(vec2 p, vec2 pos, float r1, float r2, int n, float a){\n\tfloat arg = acos(dot(normalize(pos-p),vec2(1,0)));\n    float len = length(pos-p);\n    if(p.y<pos.y)\n        arg = -arg;\n    arg = fract(fract(arg/radians(360.)+.5+a)*float(n))*10.;\n    float r;\n    if(arg<2.)\n        r = r1;\n    else if(arg<3.)\n        r = r1+(arg-2.)*(r2-r1);\n    else if(arg<7.)\n        r = r2;\n    else if(arg<8.)\n        r = (arg-7.)*r1+(8.-arg)*r2;\n    else\n        r = r1;\n    if(len<r)\n        return 1.;\n    else\n        return 0.;\n}\n\n\nvec3 anim1(vec2 p, float t){\n    vec2 p2 = vec2(mod(p.x/2.-t,1.),p.y);\n  \tfloat box1 = box(p2,vec2(0,0),vec2(.75),0.);\n    vec3 col1;\n    if(abs(p.x)>1.)\n        col1 = 1.-vec3(1.);\n    else\n        col1 = 1. - vec3(0.);\n    return 1.-(box1*col1);\n}\n\nvec3 anim2(vec2 p, float t){\n  \tfloat circle1 = circle(p,vec2(0,0),.4);\n\tfloat circle2 = circle(p,vec2(-cos(t*radians(360.)),sin(t*radians(360.))),.125);\n\tfloat circle3 = circle(p,vec2(-cos(t*radians(720.))*.65,sin(t*radians(720.))*.65),.07);\n    vec3 col1 = 1.-vec3(.85,.6,.1);\n    vec3 col2 = 1.-vec3(.2,.5,.1);\n    vec3 col3 = 1.-vec3(.9,.1,.2);\n    return 1.-(circle1*col1+circle2*col2+circle3*col3);\n    \n    \n}\n\nvec3 anim3(vec2 p, float t){\n    \n    return hue(mod(length(p)-t,1.)) * 0.55 + 0.45;\n    \n}\n\nvec3 anim4(vec2 p, float t){\n  \tfloat gear1 = gear(p,vec2(-0.4,0),.5,.65,8,t/8.);\n  \tfloat gear2 = gear(p,vec2(0.5,0),.25,.36,4,-t/4.-.125);\n  \tfloat gear3 = gear(p,vec2(1.1,-0.5),.25*1.5,.35*1.5,6,t/6.-1./50.);\n    vec3 col = 1.-vec3(0);\n    return 1.-(gear1+gear2+gear3)*col;\n    \n    \n}\n\nvec3 animation(vec2 p, float t){\n    switch(anim){\n        case 1:\n        return anim1(p,t);\n        case 2:\n        return anim2(p,t);\n        case 3:\n        return anim3(p,t);\n        case 4:\n        return anim4(p,t);\n    }\n}\n\nfloat grid(vec2 p){\n    if(int(p.x-iTime*frames*speed)%int(frames)==0||abs(p.y/iResolution.y-1.45+slide/250.)>.45)\n        return 1.;\n    else\n        return .0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.x*4.;\n    \n    slide = mod(iTime,10.)*50.;\n    anim = int(iTime/10.)%4+1;\n    \n\tvec3 col;\n    float f = (frames+1.);\n    if(viewmode == 0)\n    \tcol = animation(uv,fragCoord.x/frames)*grid(fragCoord);\n    else if(viewmode == 1)\n       \tcol = vec3(animation(uv,fragCoord.x/frames));\n    else\n    col = vec3(animation(uv,iTime/speed));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}