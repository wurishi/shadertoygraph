{"ver":"0.1","info":{"id":"3dtfRr","date":"1604233985","viewed":275,"name":"Doodling with Bubblyfish","username":"Flopine","description":"Shader made for Bubblyfish's set during an online concert in September: Chipfest Cyberspace 5 \nYou can watch the record here: https://www.twitch.tv/videos/753627520\nCheck out the awesome talent of Bubblyfish here <3 https://bubblyfish.bandcamp.com/","likes":17,"published":1,"flags":64,"usePreview":0,"tags":["3d","raymarching","isometric","audioreactive","vj","twitch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ltS3Wd","filepath":"https://soundcloud.com/bubblyfish/excerpt-from-beethoven","previewfilepath":"https://soundcloud.com/bubblyfish/excerpt-from-beethoven","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n// Check out the awesome talent of Bubblyfish here <3 \n// https://bubblyfish.bandcamp.com/\n\n#define PI acos(-1.)\n#define TAU 6.283185\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define time iTime\n#define dt(speed, offset) fract(time*speed+offset)\n#define swa(speed) floor(sin(dt(speed,0.)*TAU)+1.)\n#define bouncy(speed, offset) sqrt(sin(dt(speed,offset)*PI)) \n\n#define od(pos,d) (dot(pos,normalize(sign(pos)))-d)\n#define cyl(pos,r,h) max(length(pos.xy)-r,abs(pos.z)-h)\n\nvoid mo(inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if(p.y>p.x) p = p.yx;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat sc (vec3 p, float d)\n{\n    p = abs(p);\n    p = max(p,p.yzx);\n    return min(p.x,min(p.y,p.z))-d;\n}\n\nfloat g1 = 0.;\nfloat SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n    vec3 still = p;\n\n    p.z += time;  \n    vec3 forward = p;\n\n    float perz = 0.5;\n    float id = floor(p.z/perz);\n    p.y = abs(p.y)-2.; p.x = abs(p.x)-5.; p.z = mod(p.z,perz)-perz*0.5;\n    float sy = .5+texture(iChannel0,vec2(id*0.002,0.25)).r;\n    float d = box(p,vec3(0.1,sy,0.1));  \n\n    p.x -= 2.; p.x += sin(id+dt(0.2,0.)*TAU)*0.2;\n    d = min(d,od(p,0.1));\n\n    p = still;\n    p.x = abs(p.x)-(1.+sin(p.z*0.5+dt(.5,0.)*TAU)*0.5); p.y += sin(p.z+dt(0.25,1.)*TAU)*0.2;\n    d = min(d, cyl(p, 0.1,1e10));\n\n    p = still;\n    mo(p.yz, vec2(0.5));\n    p.y -= bouncy(0.2,0.); p.xz *= rot(dt(0.5,0.)*PI);    \n    d = min(d,max(-sc(p,0.22),box(p,vec3(0.3))));\n\n    float obj2 = od(p,0.05);\n    g1 += 0.01/(0.01+obj2*obj2);\n    d = min(d,obj2);\n\n    return d;\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.01,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 center_uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n\n    if(swa(0.1)<0.5) mo(center_uv,vec2(0.5));\n\n    vec3 ro = vec3(center_uv*5.,-30.), rd = vec3(0.,0.,1.);\n\n    vec3 p = ro, col = vec3(0.), l = normalize(vec3(1.,2.,-3.));\n\n    bool hit = false;\n\n    for (float i=0.;i<64.;i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            hit = true;\n            break;\n        }\n        p += d*rd;\n    }\n\n    if (hit)\n    {\n        vec3 n = getnorm(p);\n        float light = max(dot(n,l),0.);\n        col = mix(vec3(0.3,0.1,0.5),vec3(0.05,0.9,0.5),light);\n    }\n    col += g1*0.1;\n    fragColor = vec4(sqrt(col),1.);\n}","name":"Image","description":"","type":"image"}]}