{"ver":"0.1","info":{"id":"lldyz7","date":"1532106752","viewed":70,"name":"Beginner Sphere","username":"dimeji","description":"Test sphere","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["beginner","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Largely inspired by a tutorial from Inigo Quilezles (https://iquilezles.org/)\n// https://www.youtube.com/watch?v=9g8CdctxmeU\n\nvec4 sphere_pos = vec4(0.0, 1.0, 1.0, 0.6);\n\nfloat iSphere( in vec3 sc, in float sr, in vec3 ro, in vec3 rd)\n{\n    vec3 oc = ro - sc;\n\n    float b = dot(rd, oc);\n    float c = dot(oc, oc) - sr*sr;\n    float t = b*b - c;\n    if( t > 0.0) {\n        t = -b - sqrt(t);\n\t}\n    return t;\n}\n\nvec3 nSphere(vec3 pos, vec4 sph)\n{\n    return (pos-sph.xyz)/sph.w;\n}\n\nfloat iPlane(in vec3 ro, in vec3 rd)\n{\n    return -ro.y/rd.y;\n}\n\nvec3 nPlane(vec3 pos)\n{\n    return vec3(0.0, 1.0, 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 light = normalize(vec3(0.57703));\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n\n    // accomodate x for the aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n\n    // ray origin\n    vec3 ro = vec3(0.0, 1.0, -4.0);\n    \t\t\t\t\t// center the sphere\n    vec3 rd = normalize(vec3(uv, 1.0));\n\n\tsphere_pos.x = cos(iTime);\n    sphere_pos.z = sin(iTime);\n\n    float tmin = 10000.0;\n    float id = -1.0;\n\n    float sph = iSphere(sphere_pos.xyz, 1.0, ro, rd);\n    float pla = iPlane (ro, rd);\n\n    if(sph > 0.0) {\n        id = 1.0;\n        tmin = sph;\n    }\n\n    if(pla > 0.0 && pla < tmin) {\n        id = 2.0;\n        tmin = pla;\n    }\n\n    vec3 pos = ro + tmin*rd;\n    vec3 col = vec3(0.7);\n\n    if(id > 0.5 && id < 1.5) {\n        vec3 nor = nSphere(pos, sphere_pos);\n        float dif = 0.5 + clamp(dot(nor, light), 0.0, 1.0);\n        float amb = 0.9 + 0.4 * nor.y;\n\t\tcol = vec3(0.9, 0.8, 0.6) * dif * amb + vec3(0.1, 0.2, 0.4);\n    } \n    else if(id > 1.5) {\n        vec3 nor = nPlane(pos);\n        float dif = clamp(dot(nor, light), 0.0, 1.0);\n        float amb = smoothstep(0.0, 2.0 * sphere_pos.w, length(pos.xz-sphere_pos.xz));\n\t\tcol = vec3(amb*0.7);\n    }\n\n    col = sqrt(col);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}