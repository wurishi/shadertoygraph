{"ver":"0.1","info":{"id":"4dSBDh","date":"1500157540","viewed":2439,"name":"Simple atan comparison","username":"etale_cohomology","description":"I've always been confused by trig functions. I think they're very complicated. Now I know this is because they're defined on a non-trivial manifold, which imprints its non-trivial topology on the functions that live on it.","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["2d","math","tutorial","mathematics","trig","trigonometry","manifold","calculus","topology"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// I've always been confused by trig functions. I think they're very complicated.\n// Now I know this is because they're defined on a non-trivial manifold,\n// the circle, which imprints its non-trivial topology on the functions that live on it.\n\n// Due to the topology of the circle, the trig functions are not injective, which implies\n// they don't have a unique, globally-defined inverse function.\n// Rather, to construct an inverse function, we must chop up the domain into injective pieces\n// and assemble those pieces together into a patchwork abomination that can be defined\n// in different, not quite equivalent, ways.\n\n// Another way to view this is: no continuous bijection from the circle to the\n// 1-dimensional (closed) box [-1;1] can have a continuous inverse. Equivalently, the circle\n// and the 1-dimensional (closed) box are not homeomorphic. The trig functions sine\n// and cosine are not even injective, so they're certainly not bijective; but, even if they were,\n// they *still* couldn't have a continuous inverse!\n\n// In the language of manifolds, the circle cannot be covered by a single chart, or, equivalently,\n// any atlas for the circle must have at least 2 charts.\n// And things get even worse if we want to preserve more properties of the circle.\n// Some algebraic-topological properties require at least 4 charts!\n// The circle is truly a whack manifold.\n\n// Different choices of charts yields different definitions for the inverse functions,\n// which have different advantages/disanvantages.\n\n// Here we compare 2 standard, off-the-shelf definitions for the inverse tangent function,\n// aka. arctan or atan or tan^-1, and try to visualize the values of their images,\n// where black means minimum and white means maximum.\n\n// Notice how atan1 has 2 discontinuities, while atan2 has 1 discontinuity. What the heck.\n// (Does anyone know why?)\n// Also, does anyone know if we can create arctan functions with 3 discontinuities?\n\n// Try ATAN 1 or ATAN 2 or ATAN 3\n#define ATAN 2\n#define PI 3.14159\n\n// We introduce a \"new\" atan function, atan3, with range [0; 2*pi]\nfloat atan3(vec2 st){\n    return mod(atan(st.t, st.s), 2. * PI);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n  vec2 st = (2. * fragCoord - iResolution.xy) / iResolution.y;\n\n  // Compute the distance from st to the origin, which we call `radius`.\n  // Equivalent to length(st), but conceptually clearer, imo\n  float radius = distance(st, vec2(0));\n\n#if ATAN == 1\n  float angle = atan(st.t / st.s);  // atan1\n  vec2 range = vec2(-.5 * PI, .5 * PI);  // The range of atan1 is [-pi / 2; pi / 2]\n#elif ATAN == 2\n  float angle = atan(st.t, st.s);  // atan2\n  vec2 range = vec2(-1. * PI, 1. * PI);  // The range of atan2 is [-pi / 1; pi / 1]\n#elif ATAN == 3\n  float angle = atan3(st);  // atan3\n  vec2 range = vec2(0. * PI, 2. * PI);  // The range of atan3 is [0; 2 * pi]\n#endif\n\n  float rgb = smoothstep(range[0], range[1], angle);  // Normalize the range of atan to [0;1]\n  fragColor.rgb = vec3(rgb);\n}\n","name":"Image","description":"","type":"image"}]}