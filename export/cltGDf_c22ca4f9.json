{"ver":"0.1","info":{"id":"cltGDf","date":"1683253185","viewed":83,"name":"Configurable Tonemapping","username":"lowellcamp","description":"A global tone map with a number of (hopefully intuitive) knobs to provide a range of aesthetic results.\nIf you click on the image, you can see a color sweep from -5 to +5 stops.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tonemap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CRUNCH 0.10 // [0-1]\n#define SOFTNESS 0.40 // [0-1]\n#define WHITE_POINT 32.00 // 2+\n#define HIGHLIGHT_SATURATION 2.0 // 0.1+\n#define HUE_SHIFT 0.5 // [0-1]\n\nconst float GUARD_RAIL = HIGHLIGHT_SATURATION * 4.0;\n\n#define INVTOE(x) 0.5 * ((x) + sqrt(x) * sqrt(4.0 * CRUNCH + (x)))\n#define TOE(x) (x) - CRUNCH + (CRUNCH * CRUNCH) / ((x) + CRUNCH)\n\nfloat tonemap(float x) {\n    const float x_lin = INVTOE(1.0 - SOFTNESS);\n    const float k_w = TOE(WHITE_POINT) - 1.0;\n    \n    x = max(0.0, x);\n    float toe = x - CRUNCH + (CRUNCH * CRUNCH) / (x + CRUNCH);\n    float k = mix(SOFTNESS, k_w, (x - x_lin) / (WHITE_POINT - x_lin));\n    \n    return smin(toe, 1.0, k);\n}\n\n#undef INVTOE\n#undef TOE\n\nvec3 tonemap(vec3 linear) {\n    // Tonemap each channel individually\n    vec3 mapped = vec3(\n        tonemap(linear.r),\n        tonemap(linear.g),\n        tonemap(linear.b)\n    );\n    \n    float y = MAX3(linear.r, linear.g, linear.b);\n    \n    // User-controlled hue shift\n    vec3 hueInvariant = linear / y;\n    float maxMapped = MAX3(mapped.r, mapped.g, mapped.b);\n    mapped = mix(\n        hueInvariant * maxMapped,\n        mapped,\n        HUE_SHIFT\n    );\n    // Highlight desaturation\n    return smax(\n        mapped,\n        vec3(maxMapped * reinhard(y * y, 4.0 * HIGHLIGHT_SATURATION)),\n        0.25 * maxMapped\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / (iResolution.xy );\n    \n    vec3 linear;\n    if (iMouse.z < 0.5) {\n        // Approximate linear image using inverse ACES\n        linear = inv_Tonemap_ACES(texture(iChannel0,uv).rgb);\n        // Adjust exposure\n        linear *= exp2(mix(-2.0, 2.0, sin(0.25 * iTime) * 0.5 + 0.5));\n    } else {\n        // Quantize UVs\n        uv.y = 1.0 - uv.y;\n        //uv.y -= mod(uv.y, 1.0 / 19.0) - 1.0 / 19.0;\n        uv.y *= 19.0 / 18.0;\n        //uv.x -= mod(uv.x, 1.0 / 32.0);\n        \n        // Exposure / hue sweep\n        linear = vec3(exp2(mix(-5.0, 5.0, uv.x)));\n        if (uv.y <= 1.0) {\n            linear *= hsv2rgb(vec3(uv.y, 1.0, 1.0));\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(vec3(tonemap(linear)),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define MAX3(a, b, c) max(a, max(b, c))\n#define MAX4(a, b, c, d) max(max(a, b), max(c, d))\n\nfloat smin(float a, float b, float k) {\n    float h = max(k - abs(a-b), 0.0) / k;\n    return min(a, b) - h * h * k * 0.25;\n}\n\nfloat smax(float a, float b, float k) {\n    float h = max(k - abs(a - b), 0.0) / k;\n    return max(a, b) + h * h * k * 0.25;\n}\n\nvec3 smax(vec3 a, vec3 b, float k) {\n    vec3 h = max(k - abs(a - b), 0.0) / k;\n    return max(a, b) + h * h * k * 0.25;\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat lum(vec3 color) {\n    return dot(color, vec3(0.2722287168, 0.6740817658, 0.0536895174));\n}\n\nfloat reinhard(float lum, float darken) {\n    return lum / (lum + darken);\n}\n\n// Taken from https://www.shadertoy.com/view/wlfyWr\n// by Chrisy\nvec3 inv_Tonemap_ACES(vec3 x) {\n    // Narkowicz 2015, \"ACES Filmic Tone Mapping Curve\"\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n   return (-0.59 * x + 0.03 - sqrt(-1.0127 * x*x + 1.3702 * x + 0.0009)) / (2.0 * (2.43*x - 2.51));\n}","name":"Common","description":"","type":"common"}]}