{"ver":"0.1","info":{"id":"ssBBzK","date":"1646626915","viewed":164,"name":"Space Donut","username":"rileyborgard","description":"rotating shapeshifting space donut","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX_ITER 100\n#define MAX_DIST 100.\n#define THRES 0.001\n\n\nvec3 donutOrientation() {\n    return normalize(vec3(cos(1. * iTime), cos(1.2746 * iTime + 0.238947), sin(3. * iTime)));\n}\n\nfloat getDist(vec3 p) {\n    float radius1 = sin(iTime * 1.) * 0.02 + 0.15;\n    float radius2 = cos(iTime * 1.) * 0.03 + 0.05;\n    \n    vec3 normal = donutOrientation();\n    \n    float distZ = dot(p, normal);\n    vec3 proj = p - normal * distZ;\n    float len = length(proj);\n    \n    return sqrt((radius1 - len) * (radius1 - len) + distZ * distZ) - radius2;\n    //return length(p - center) - radius;\n}\n\nvec3 getNormal(vec3 p) {\n    float radius1 = 0.15;\n    vec3 normal = donutOrientation();\n    \n    float distZ = dot(p, normal);\n    vec3 proj = p - normal * distZ;\n    vec3 closestPoint = normalize(proj) * radius1;\n    return normalize(p - closestPoint);\n}\n\nvec3 rayMarch(vec3 camera, vec3 dir) {\n    float amt = 0.;\n    for(int iter = 0; iter < MAX_ITER; iter++) {\n        float dist = getDist(camera + dir * amt);\n        if (dist < THRES || dist > MAX_DIST) {\n            break;\n        }\n        amt += dist;\n    }\n    return camera + dir * amt;\n}\n\nfloat lighting(vec3 p, vec3 light) {\n    vec3 normal = getNormal(p);\n    vec3 lightDir = normalize(light - p);\n    return max(0.2, dot(normal, lightDir));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.x;\n    \n    vec3 camera = vec3(0., 0., -1.);\n    vec3 light = vec3(0., 0., -20.);\n    vec3 ray = normalize(vec3(uv.xy, 1.0));\n    vec3 p = rayMarch(camera, ray);\n    \n    vec3 col = vec3(0, 0, 0);\n    if (getDist(p) < 5.) {\n        float shade = lighting(p, light);\n        col.rgb = vec3(1., 0.3, 0.5) * shade;\n    }\n    fragColor = vec4(col.rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}