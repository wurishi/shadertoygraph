{"ver":"0.1","info":{"id":"Xfdyz7","date":"1730412404","viewed":81,"name":"oct312024v2","username":"brendanluu","description":"more","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["popart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"oct182024\" by brendanluu. https://shadertoy.com/view/4XBfWz\n// 2024-10-19 04:52:23\n// Optimized Camo-style L-System Shader\n\n#define LAYERS 2\n#define ITERATIONS 3\n\nfloat hash(vec2 p) {\n    p = fract(p * vec2(123.34, 456.21));\n    p += dot(p, p + 400.32);\n    return fract(p.x * p.y);\n}\n\nfloat noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    f = f * f * (3.0 - 2.0 * f);\n    return mix(mix(hash(i), hash(i + vec2(1.0, 0.0)), f.x),\n               mix(hash(i + vec2(0.0, 1.0)), hash(i + vec2(1.0, 1.0)), f.x), f.y);\n}\n\nfloat fbm(vec2 p) {\n    float v = 0.0;\n    float a = 0.5;\n    for (int i = 0; i < 3; i++) {\n        v += a * noise(p);\n        p *= .9;\n        a *= 0.6;\n    }\n    return v;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize coordinates (0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Center coordinates with proper aspect ratio\n    vec2 p = uv * 2.0 - 1.0;\n    p.x *= iResolution.x / iResolution.y;\n    \n    vec3 col = vec3(0.0);\n    float time = iTime * .22;\n    \n    for (int layer = 0; layer < LAYERS; layer++) {\n        float layerTime = time + float(layer) * .5;\n        vec2 offset = vec2(sin(layerTime * 0.1), cos(layerTime * 0.1)) * .0; // Reduced scale\n        \n        for (int i = 0; i < ITERATIONS; i++) {\n            float scale = 1.0 + float(i) * 10.0 + sin(layerTime) * 10.1; // Adjusted scale\n            vec2 q = p * scale + offset;\n            \n            float angle = layerTime * .1 + float(i) * 1.5; // Reduced rotation\n            q = mat2(cos(angle), -sin(angle), sin(angle), cos(angle)) * q;\n            \n            float pattern = fbm(q + fbm(q + fbm(q)));\n            \n            vec3 layerColor = mix(\n                vec3(0.498, 0.102, 0.102),  // Dark green\n                vec3(0.380, 0.200, 0.800),  // Light tan\n                float(layer) / float(LAYERS - 1)\n            );\n            \n            col += layerColor * smoothstep(0.69, 0.7, pattern) * (1.0 - float(i) / float(ITERATIONS));\n        }\n    }\n    \n    col /= float(LAYERS);\n    col = mix(col, vec3(fbm(p * 5.0 + time)), 0.2);  // Reduced grain scale\n    \n    // Contrast and brightness adjustment\n    col = pow(col, vec3(1.0));\n    col = col / (1.0 + col);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}