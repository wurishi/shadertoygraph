{"ver":"0.1","info":{"id":"DljBDy","date":"1694458090","viewed":39,"name":"(3d) line - line intersection","username":"Envy24","description":"https://www.youtube.com/watch?v=ELQG5OvmAE8\n2d slice (XY plane).","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","line","intersection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCENE_SCALE               ( 2.0 )\n#define AA_UNIT                   ( (SCENE_SCALE*4.0) / iResolution.y  )\n#define SMAA(d)                   ( smoothstep(AA_UNIT, 0., d) )\n\n/* https://www.shadertoy.com/view/DdsGDj */\n#define MOUSE_OFFSET ( iMouse.z > 0. ? iMouse.xy - iResolution.xy * 0.5 : vec2(0) )\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin, in bool mouse_drag)\n{\n    vec2 M = MOUSE_OFFSET * (mouse_drag == true ? 1. : 0.);\n    return ((2. * (SC - M) - iResolution.xy) / iResolution.y) * scale + origin;\n}\n\nfloat diskSDF(in vec2 NDC, in vec2 C, in float r) { return length(C - NDC)-r; }\nfloat segmentSDF(in vec2 NDC, in vec2 B, in vec2 E, in float r)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0)) - r;\n}\nfloat y_axisSDF(vec2 NDC) { return abs(NDC.x); }\nfloat x_axisSDF(vec2 NDC) { return abs(NDC.y); }\nfloat vertical_lineSDF(vec2 NDC, float x0) { return abs(NDC.x-x0); }\nfloat horizontal_lineSDF(vec2 NDC, float y0) { return abs(NDC.y-y0); }\nfloat cellsSDF(vec2 NDC)\n{\n    //NDC *= 2.; // Finer cells\n    NDC = fract(NDC);\n    NDC = fract(min(NDC, 1. - NDC));\n    return\n        min(vertical_lineSDF(NDC, 0.), horizontal_lineSDF(NDC, 0.));\n}\n\nint line_line_intersection(vec3 b0, vec3 e0, vec3 b1, vec3 e1,   out vec3 b2, out vec3 e2)\n{\n    vec3 r = normalize(e0 - b0), s = normalize(e1 - b1);\n    float a = dot(s, r), b = dot(r, r), c = dot(b1, r) - dot(b0, r),\n          d = dot(s, s), e = dot(r, s), g = dot(b1, s) - dot(b0, s);\n          \n    float t = (c*d - g*a) / (b*d - e*a),\n          v = (t*b - c) / a;\n          \n    b2 = b0 + r * t,\n    e2 = b1 + s * v;\n         \n    float eps = 1e-3;\n    return length(e2 - b2) < eps ? 1 : 0;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = map_to_centered_ndc(SC, SCENE_SCALE, vec2(0), false),\n         MP = iMouse.xy == vec2(0) ? vec2(1) :\n             map_to_centered_ndc(iMouse.xy, SCENE_SCALE, vec2(0), false);\n    \n    vec3 a = vec3(-1,-1, 0),   b = vec3(2, 2, 0),\n         c = vec3(-1, 1, 0),   d = vec3(MP, 0),\n         r = normalize(b - a), s = normalize(d - c),\n         e,                    f;\n\n    int pred = line_line_intersection(a, b, c, d,   e, f);\n    \n    float d_seg_ab = segmentSDF(NDC, a.xy - r.xy * 100., b.xy + r.xy * 100., 0.),\n          d_seg_cd = segmentSDF(NDC, c.xy - s.xy * 100., d.xy + s.xy * 100., 0.),\n          d_seg_ef = segmentSDF(NDC, e.xy,               f.xy,               0.);\n    \n    vec3 color = pred == 1 ? vec3(1) : vec3(.95);\n         color = mix( color, vec3(0.8), SMAA(cellsSDF(NDC)) );\n         color = mix( color, vec3(0), SMAA(x_axisSDF(NDC)) );\n         color = mix( color, vec3(0), SMAA(y_axisSDF(NDC)) );         \n    \n    color = mix(color, vec3(1,0,0), SMAA(d_seg_ab));\n    color = mix(color, vec3(0,0,1), SMAA(d_seg_cd));\n    color = mix(color, vec3(0,1,0), SMAA(d_seg_ef));\n    \n    color = mix(color, vec3(1,0,1), SMAA(diskSDF(NDC, e.xy, 0.05)));\n    color = mix(color, vec3(0,1,1), SMAA(diskSDF(NDC, f.xy, 0.025)));\n    color = mix(color, vec3(0), SMAA(diskSDF(NDC, MP, 0.05)));\n\n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}