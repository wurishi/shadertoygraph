{"ver":"0.1","info":{"id":"lslSW8","date":"1456830233","viewed":120,"name":"CafeRealTrace","username":"cafe","description":"Analytical reflections","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["caferealtrace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI=3.14159;\n\n\n\n\n// Return rd\nvec3 proj(in vec2 uv, out vec3 ro){\n    vec2 mouse = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n\tro=vec3(cos(mouse.x*PI),mouse.y,sin(mouse.x*PI))*5.;\n\t\n\tvec3 lat=vec3(mouse*0.7,0.),\n\t\t lad=normalize(lat-ro),\n\t\t up=vec3(0.,1.,0.),\n\t\t px=normalize(cross(up,lad))*1.,\n\t\t py=normalize(cross(lad,px))*1.;\n\t\n\tvec3 rd=normalize(uv.x*px+uv.y*py+lad);\n\t\n\treturn rd;\n}\n\nfloat plane(vec3 ro, vec3 rd){\n\tfloat d;\n\t\n\t// Plane position\n\tro+=vec3(0.,7.+3.*sin(iTime),0.);\n\t\n\t// Plane orientation\n\tvec3 pl = vec3(cos(iTime)*0.2,1.,0.2*sin(iTime)); \n\t\n\tpl=normalize(pl*-sign(dot(ro,pl)));\n\n\tfloat p = dot(pl,rd);\n\tif(p<0.) return -1.;\n\t\n\td=dot(-ro,pl)/p-0.0001;\n\t\n\treturn d;\t\n}\n\nfloat skybox(vec3 ro, vec3 rd){\n\tvec3 rs=abs(rd)/(vec3(10.)-ro*sign(rd));\n\treturn 1./max(rs.x,max(rs.y,rs.z));\n}\n\nfloat sphere(vec3 ro, vec3 rd){\n\tif(length(ro)<=1.) return 0.;\n\tfloat dtod=max(0.,dot(-ro,rd)); // Max to avoid sphere behind camera\n\tfloat dins=1.-dot(ro,ro)+dtod*dtod;\n\tif(dins<0.) return -1.; // No collision\n\t\n\treturn dtod-dins;\n}\n\nvec3 normal;\nbool hit;\nfloat obj=-1.;\n\nvec4 colorize(vec3 p){\n\tvec4 color=vec4(1.);\n\t\n\tvec3 light=normalize(vec3(1.,1.,-2.));\n\tfloat diff=max(0.,dot(normal,light));\n\t\n\t\n\t\n\tif(obj==0.){\n\t\tcolor.xyz=0.5*(vec3(sin(dot(p,p)*0.7)*sin(7.*dot(abs(p),vec3(1.)))*0.4+0.8)-1.)+1.;\n\t\tcolor.a=0.7;\n\t\tdiff=1.-exp(-diff*4.);\n\t\t//diff=(diff-1.)*0.8+1.;\n\t}else if(obj>0. && obj<3.){\n\t\tcolor=vec4(1.,sin(iTime*2.)*0.5+0.5,0.2,0.5);\n\t    if(obj==2.)color.xyz=color.zyx;\n\t\tdiff=1.-exp(-diff*0.6);\n\t\tdiff=(diff-1.)*0.4+1.;\n\t\t\n\t}else{\n\t\tcolor=vec4(0.,1.,0.,1.);\n\t}\n\t\n\tcolor=clamp(color,vec4(0.),vec4(1.));\n\t\n\tcolor.rgb*=diff;\n\tcolor.a*=pow(diff,0.);\n\t\n\treturn color;;\n}\n\nvec3 intersect(vec3 ro, vec3 rd){\n    \n    vec3 s1=vec3(cos(iTime),1.5,sin(iTime));\n\tvec3 s2=vec3(sin(iTime),-0.7,0.2);\n    \n\thit=false;\n\tfloat d=-2.,\n\t\t  td=0.;\n\tvec3 p=vec3(0.);\n\t\n\t// DIST ORANGE SPHERE\n\ttd=sphere(ro-s1,rd);\n\tif((!hit||td<d)&&td>=0.){\n\t\td=td;\n\t\tp=(ro-s1)+d*rd;\n\t\tnormal=normalize(p);\n\t\thit=true;\n\t\tobj=1.;\n\t}\n\t\n\t// DIST BLUE SPHERE\n\ttd=sphere(ro-s2,rd);\n\tif((!hit||td<d)&&td>=0.){\n\t\td=td;\n\t\tp=(ro-s2)+d*rd;\n\t\tnormal=normalize(p);\n\t\thit=true;\n\t\tobj=2.;\n\t}\n\t\n\t// DIST BOX\n\ttd=skybox(ro,rd);\n\tif((!hit||td<d)&&td>=0.){\n\t\td=td;\n\t\tp=ro+d*rd;\n\t\tnormal=smoothstep(-0.1,0.,abs(p)-10.)*sign(-p);\n\t\tnormal=normalize(normal);\n\t\thit=true;\n\t\tobj=0.;\n\t}\n\t\n\t// PLANE\n\ttd=plane(ro,rd);\n\tif((!hit||td<d)&&td>=0.){\n\t\td=td;\n\t\tp=ro+d*rd;\n\t\tnormal=vec3(0.,1.,0.);\n\t\thit=true;\n\t\tobj=3.;\n\t}\n\t\n\treturn p;\t\n}\n\nvec3 shade(vec2 uv){\n\tvec3 ro,\n\t     rd = proj(uv,ro),\n\t\t p;\n\t\n\tfloat td;\n\t\n    vec4 color=vec4(0.);\n\t\n\tfor(int i=0 ; i<8 ; i++){\n\t\tif(i>0){\n\t\t\tro=p;\n\t\t\trd=reflect(rd,normal);\n\t\t}\n\t\tp = intersect(ro,rd);\n\t\ttd+=length(p-ro);\n\t\tvec4 tcol=colorize(p);\n\t\tcolor.a=1.-(1.-color.a)*exp(-td*0.03);\n\t\tcolor.xyz=mix(tcol.rgb,color.rgb,color.a);\n\t\tcolor.a=(color.a-1.)*tcol.a+1.;\n\t\tif(color.a>0.99) break;\n\t}\n\t\n\t// EMPTY\n\tif(!hit) return vec3(1.,0.,1.);\n\t\n\treturn color.rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n\tfragColor = shade(uv).rgbr;\n}","name":"Image","description":"","type":"image"}]}