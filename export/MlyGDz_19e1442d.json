{"ver":"0.1","info":{"id":"MlyGDz","date":"1474130562","viewed":180,"name":"Rorschach looking thing","username":"Gaktan","description":"My take on rorschach looking shader","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","perlin","rorschach","rorchach","roshach","rorschash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float mod289(float x)\n{\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 perm(vec4 x)\n{\n    return mod289(((x * 34.0) + 1.0) * x);\n}\n\nvec2 fade(vec2 t)\n{\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin 2D Noise \n// by Stefan Gustavson\nfloat cnoise(vec2 P)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n  vec4 i = perm(perm(ix) + iy);\n  vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\n  vec4 gy = abs(gx) - 0.5;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n  vec4 norm = 1.79284291400159 - 0.85373472095314 * \n    vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\nvec2 rotate(vec2 uv, float angle)\n{\n \tfloat sinX = sin(angle);\n    float cosX = cos(angle);\n    float sinY = sin(angle);\n    \n    mat2 rotationMatrix = mat2(cosX, -sinX, sinY, cosX);\n    return uv * rotationMatrix;\n}\n\n#define time (iTime * 2.0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    // Mirror\n    uv.x = uv.x > 0.5 ? 1.0 - uv.x : uv.x;\n    \n    // Rotation\n    vec2 r = vec2(0.25, 0.5);\n    uv -= r;\n    uv = rotate(uv, time*.007);\n    uv += r;\n    \n    // Translation\n    uv = (uv + time*0.003);\n    // Scale\n    uv *= 10.0;\n   \n\tfloat color = cnoise(uv);\n    \n    color *= 0.02;\n    color += (time * 0.1) * 0.0055;\n    color = mod(color, 0.03) * 18.5;\n    float smoothness = 35.0;\n    color = 1.0 - smoothstep(0.45, 1.0, color) * smoothness;\n    \n    fragColor = vec4(color, color, color, 1.0);\n}","name":"Image","description":"","type":"image"}]}