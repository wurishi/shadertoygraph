{"ver":"0.1","info":{"id":"7l2yzD","date":"1649321010","viewed":137,"name":"TP 5&6","username":"salah","description":"terrain","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["lifgraphique"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Texturing\n// Eric Galin\n\nconst float View = 2800.0;  // View distance\nconst float Epsilon = 0.01; // Marching epsilon\nconst int Steps = 400;      // Number of steps\n\n// Lipschitz constant\nconst float K=1.0;\n\n//fonction TP1&2&3&\nvec3 rotateX(vec3 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return p * mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Matrice de rotation selon l'axe Y\nvec3 rotateY(vec3 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return p * mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Matrice de rotation selon l'axe Z\nvec3 rotateZ(vec3 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return p * mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n//homotethie\n\nvec3 homo(vec3 p,float k)\n{\n    return p*k;\n}\n//translation\nvec3 translation(vec3 p,vec3 t)\n{\n    return p-t;\n}\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n//difference\nfloat diff(float a,float b)\n{\n    return max(a,-b);\n}\n\n\nfloat Noise(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix( 1.0-Hash(i+vec2(0,0)), \n                        1.0-Hash(i+vec2(1,0)),f.x),\n                   mix( 1.0-Hash(i+vec2(0,1)), \n                        1.0-Hash(i+vec2(1,1)),f.x),f.y);\n}\n\nvec2 N2D (vec2 p) //noise appliquer au 3 vecteurs\n{\n    return vec2(Noise(p+vec2(300,0)),Noise(p+vec2(105,0)));\n}\nvec3 N3D (vec3 p) //noise appliquer au 3 vecteurs\n{\n    return vec3(Noise(p+vec3(44,09.0,-12)),Noise(p+vec3(4,87,2)),Noise(p+vec3(-44,0,33)));\n}\n\nfloat turbulence(vec2 p, float l, float a, int o){\n// l permet de modifier le nombre de bosses\n// a permet de modifier la hauteur des bosses\n// o permet dInitialiser le nombre d'octave\n    float t = 0.0;\n    for(int i=0; i<o; i++){\n        t += a*Noise(p/l);\n        a *= 0.5;\n        l *= 0.5;\n    }\n    return t;\n   \n}\n\nfloat ridgeN(in vec2 a)\n{\n return 1.0-(2.0*(abs(Noise(a))));\n}\n\nfloat ridgeturbulence(vec2 p, float l, float a, int o){\n// l permet de modifier le nombre de bosses\n// a permet de modifier la hauteur des bosses\n// o permet dInitialiser le nombre d'octave\n    float t = 0.0;\n    for(int i=0; i<o; i++){\n        t += a*ridgeN(p/l);\n        a *= 0.5;\n        l *= 0.5;\n    }\n    return t;\n   \n}\nvec3 lerp(vec3 colorone, vec3 colortwo, float value)\n{\n\treturn (colorone + value*(colortwo-colorone));\n}\n\n// Terrain -----------------------------------------------------------------------------------------------\n\n// Terrain heightfield\n// x : Position in the plane\nfloat Terrain( in vec2 p )\n{\n\treturn ridgeturbulence(p.xy,400.0,200.0,7);\n} \n\n// Implicit surface defining the terrain\n// p : Point\nfloat ImplicitTerrain(in vec3 p)\n{\n    float z = Terrain( p.xy );\n    float h = (p.z - z)/2.0; \n    return h;\n}\nfloat mer(in vec3 p)\n{\n    float z = turbulence(p.xy,50.0,20.0,1);\n    float h = (p.z - z)/2.0; \n    return h;\n}\n// Primitive functions -----------------------------------------------------------------------------------\nvec3 bois(vec3 p)\n{\n    p = p + 0.50*N3D(p/1.5);//on applique du bruit sur p\nfloat d = length(p.xyz);//d est la longeur en tout point de p et d'un autre point\n  float v = 0.5*(cos(d/0.1))+(1.1);//on cree different cercle \n  \n  p = lerp(vec3(0.56,0.25,0.11),vec3(0.24,0.13,0.015),v);//lerp nous fait l’addition linéaire de deux vec3\n  return p;\n}\n// Sphere \n// p : Point\n// c : Center \n// r : Radius\nfloat Sphere(vec3 p, vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nfloat Intersection(float a,float b)\n{\n    return max(a,b);\n}\n\n// Scene --------------------------------------------------------------------------\n\n// Potential field of the object\n// p : point\nfloat Object(vec3 p)\n{\n    float a = mer(p+iTime*vec3(10,0,0));\n float u = Intersection(Union(\n    ImplicitTerrain(p),a),\n     Sphere(p,vec3(0.0,0.0,0.0),450.0));\n\n  return u;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n    float v = Object(p);\n  n.x = Object( vec3(p.x+eps, p.y, p.z) ) - v;\n  n.y = Object( vec3(p.x, p.y+eps, p.z) ) - v;\n  n.z = Object( vec3(p.x, p.y, p.z+eps) ) - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = Object(p);\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v/K);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Shading and lighting ---------------------------------------------------------------------------\n\nvec3 TextureRock(in vec3 p)\n{\n  return bois(p);\n  //return mix(vec3(0.92,0.91,0.90),vec3(0.74,0.72,0.72),Fbm(p/50.0));   \n}\n\nvec3 TextureWater(in vec3 p)\n{\n  return vec3(0.52,0.75,0.91);   \n}\n\nvec3 TextureBorder(in vec3 p)\n{\n    return vec3(0.25,0.24,0.24);   \n}\n\n// Compute color \n// p : Point\n// n : Normal\nvec3 Color(in vec3 p,in vec3 n)\n{\n    return TextureRock(p);\n}\n\n// Rendering \n// ro, rd : Ray origin and direction\n// pip : Picture in picture boolean\nvec4 Render( in vec3 ro, in vec3 rd, bool pip )\n{\n    // Light direction\n    vec3 light1 = normalize( vec3(-0.8,-0.3,0.4) );\n   \n    \n\tvec3 col;\n    int it;\n    bool b;\n    float t = SphereTrace( ro, rd, View,b , it);\n\tvec3 p = ro + t*rd;\n    float vp= Object(p);\n    vec3 n = ObjectNormal( p );\n\n\n    col = Color(p,n);\n    // Sky\n    if( b==false )\n    {\n        col = vec3(0.35,0.65,0.95) - rd.z*rd.z*2.5;\n    }\n\telse \n\t{\n        vec3 ref = reflect( rd, n );\n        float fre = clamp( 1.0+dot(rd,n), 0.0, 1.0 );\n        vec3 hal = normalize(light1-rd);\n                   \n\n         // Pseudo diffuse lighting\n\t\tfloat dif = 0.5*(1.0+dot( light1, n ));\n        dif*=dif;\n        \n        col = 0.45*col+0.55*dif*vec3(0.35,0.35,0.35);\n\t}\n    \n    // Shading for iterations\n    if (pip==true)\n    {\n    \tfloat s=float(it)/float(Steps);\n\t\treturn vec4(0.112+0.824*s,0.418+0.556*s,0.611-0.515*s,t);\n    }\n    else\n    {\n    \t// Gamma with square root\n    \treturn vec4( sqrt(col), t );\n    }\n}\n\nvec2 RayDirection(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Picture in picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // Time as function of the position of the mouse\n    float a = 3.14*2.0*1.5*iMouse.x/iResolution.x;\n\n    // Camera transform\n    vec3 ro; \n    mat3 cam = Camera( a, ro);   \n\n    // Picture in picture\n    bool pip=true;\n    \n    // Pixel coordinates\n    vec2 p = RayDirection(fragCoord, pip);\n   \n    // Camera ray    \n    vec3 rd = cam * normalize(vec3(p,5.0));\n    \n    // Render\n    vec4 res = Render( ro, rd, pip );\n     \n    fragColor = vec4( res.xyz, 0.0 );\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Texturing\n// Eric Galin\n\n// Texturing and noise ---------------------------------------------------------\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in the plane\nfloat Hash(in vec2 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\n\n// Procedural value noise with cubic interpolation\n// x : Point \n\n\n// Fractal brownian motion with 4 frequencies\n// p : Point\nfloat Fbm(in vec3 p)\n{\n    return Noise(p)/2.0+Noise(p*2.0)/4.0+Noise(p*4.0)/8.0+Noise(p*8.0)/16.0;\n}\n\n// Camera\n// a: Rotation angle around z axis\n// ro : Ray origin\nmat3 Camera(float a, out vec3 ro)\n{\n\tfloat range=1350.0;\n    // Origin\n    ro = vec3(range*cos(a),range*sin(a),range/4.0);\n\t\n    // Target\n    vec3 ta = vec3(0.0,0.0,50.0);\n    \n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(0.0, 0.0,1.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}","name":"Common","description":"","type":"common"}]}