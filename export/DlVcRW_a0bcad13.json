{"ver":"0.1","info":{"id":"DlVcRW","date":"1699989660","viewed":136,"name":"Perlin Waves","username":"zilian","description":"Wavy glowing lines scanning over perlin noise.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["waves","perlinnoise","perlin","glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nconst float temperature = 5.0;\nconst float noiseScale = 0.2;\nconst float effectWidth = 1.0;\nconst float lineThickness = 0.008;\nconst float speed = 0.4;\n\nvec2 fade(vec2 t) {\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n}\n\nvec4 permute(vec4 x) {\n    return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nfloat cnoise(vec2 P) {\n    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n    Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\n\n    vec4 ix = Pi.xzxz;\n    vec4 iy = Pi.yyww;\n    vec4 fx = Pf.xzxz;\n    vec4 fy = Pf.yyww;\n    vec4 i = permute(permute(ix) + iy);\n    vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\n    vec4 gy = abs(gx) - 0.5;\n    vec4 tx = floor(gx + 0.5);\n    gx = gx - tx;\n    vec2 g00 = vec2(gx.x, gy.x);\n    vec2 g10 = vec2(gx.y, gy.y);\n    vec2 g01 = vec2(gx.z, gy.z);\n    vec2 g11 = vec2(gx.w, gy.w);\n    vec4 norm = 1.79284291400159 - 0.85373472095314 *\n        vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n    g00 *= norm.x;\n    g01 *= norm.y;\n    g10 *= norm.z;\n    g11 *= norm.w;\n    float n00 = dot(g00, vec2(fx.x, fy.x));\n    float n10 = dot(g10, vec2(fx.y, fy.y));\n    float n01 = dot(g01, vec2(fx.z, fy.z));\n    float n11 = dot(g11, vec2(fx.w, fy.w));\n    vec2 fade_xy = fade(Pf.xy);\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n    return 2.3 * n_xy;\n}\n\nfloat perline(vec2 p, float noiseY, float lineThickness, float noiseScale) {\n    float x = p.x / 2.0;\n    float s = cnoise(vec2(x, noiseY) * temperature) * noiseScale;\n    float distanceToLine = abs(p.y - s);\n    return 0.009 / distanceToLine;\n}\n\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    uv *= 1.0;\n\n    float sampleY = 0.0;\n    sampleY += iTime * speed;\n\n    vec3 finalColor = vec3(0.0);\n    float deltaY = 0.003;\n\n    for(float i = -10.0; i <= 10.0; i += 1.0) {\n        vec2 p = uv + vec2(0.06 * i, 0.05 * i);\n\n        sampleY += i * deltaY;\n\n        if(p.x < -effectWidth || p.x > effectWidth) {\n            continue;\n        }\n\n        float line = perline(p, sampleY, lineThickness, noiseScale);\n        float opacity = exp(-abs(i * 0.2));\n        vec3 col = palette(i * .04 + 0.3) * 2.0 * line * opacity;\n\n        finalColor = max(finalColor, col);\n    }\n\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}