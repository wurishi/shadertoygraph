{"ver":"0.1","info":{"id":"3sffzr","date":"1587585310","viewed":79,"name":"Sundial by RM. simple shapes","username":"Shiera","description":"Following tutorials  \"ShaderToy Tutorial - Ray Marching for Dummies!\"  and \"Ray Marching Simple Shapes\" by \"The Art of Code\". Ended up doing an sundial.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","training"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\n//for rotating, copied from http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/#rotation-and-translation\nmat4 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n\n    return mat4(\n        vec4(c, 0, s, 0),\n        vec4(0, 1, 0, 0),\n        vec4(-s, 0, c, 0),\n        vec4(0, 0, 0, 1)\n    );\n}\n\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r){\n    \n    vec3 ab = b-a; \n    vec3 ap = p-a; \n    \n    float t = dot(ab, ap)/dot(ab, ab); \n    t = clamp(t, 0., 1.); \n    \n    vec3 c = a+t*ab;\n    return length(p-c)-r;   \n      \n}   \n\nfloat sdThorus(vec3 p, vec3 o, vec2 r){ \n    p = p-o; \n    float x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n\n    \n} \n\n\nfloat sdSphere(vec3 p, vec3 o, float r){\n   return length(p-o)-r; \n}    \n\nfloat sdBox(vec3 p, vec3 o, vec3 s, float angle){\n   //box with added stuff for rotating the squares in clock face\n   o.z = o.z+2.; \n   p = p-o;\n   p = (inverse(rotateY(angle)) * vec4(p, 1.0)).xyz; \n   p = p-vec3(0, 0, -2); \t\t\n    \n   return length(max(abs(p)-s, 0.)); \n} \n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r){\n    vec3 ab = b-a; \n    vec3 ap = p-a; \n    \n    float t = dot(ab, ap)/dot(ab, ab);     \n    vec3 c = a+t*ab;\n    float x = length(p-c)-r; \n    float y = (abs(t-.5)-.5)*length(ab); \n    float e = length(max(vec2(x, y), 0.)); \n    float i = min(max(x, y), 0.); \n    return e+i;\n}\n\n\n\nfloat GetDist(vec3 p) {\n\n    \n    float sd = sdSphere(p, vec3(0, 0., 7), 1.);\n    float planeDist = p.y;\n    float cd = sdCapsule(p, vec3(0, 2.5, 7), vec3(0, .4, 7), .05); \n    float td = sdThorus(p, vec3(0, .4, 7), vec2(2, .3)); \n    float cyd = sdCylinder(p, vec3(0, -10, 7), vec3(0, .5, 7 ), 2.2);\n    \n    float d = min(sd, planeDist); \n    d = min(d, cd);\n    d = min(d, td);\n    \n    d = min(d, cyd);\n    //12 squares for sun dial face\n    for (int i = 0; i <= 12; i++){\n        float bd = sdBox(p, vec3(0, .61, 5), vec3(.05,.1,.2), .1+(2.*3.14*float(i)/12.)); //draw box\n        d = min(d, bd);\n    }        \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.; \n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p); \n        dO += dS; \n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p); \n    vec2 e = vec2(.01, 0); \n    \n    vec3 n = d - vec3( \n        GetDist(p-e.xyy), \n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n); \n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 3.5, 7); \n    lightPos.xz += 1.*vec2(sin(iTime), cos(iTime)); \n    vec3 l = normalize(lightPos-p); \n    vec3 n = GetNormal(p); \n    \n    float dif = clamp(dot(n, l), 0., 1.); \n    float d = RayMarch(p+n*SURF_DIST*2., l); \n    if(d<length(lightPos-p)) dif *= .1; \n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y; \n\n    vec3 col = vec3(0); \n    \n    //camera\n    vec3 ro = vec3(0, 3, 0); \n    vec3 rd = normalize(vec3(uv.x, uv.y-.2, 1));\n    \n    //march\n    float d = RayMarch(ro, rd); \n    vec3 p = ro + rd * d;\n    \n    //light\n    float dif = GetLight(p); \n    col = vec3(dif); \n    \n    //color\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}