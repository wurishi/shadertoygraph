{"ver":"0.1","info":{"id":"fsffzs","date":"1645184986","viewed":69,"name":"Shader R&D Bibendum","username":"LouiG","description":"Dijsktra","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["ynov"],"hasliked":0,"parentid":"fsXBzs","parentname":"Shader R&D"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926538\n\nconst int Steps = 1000;\nconst float Epsilon = 0.05; // Marching epsilon\nconst float T=0.5;\n\nconst float rA=10.0; // Maximum and minimum ray marching or sphere tracing distance from origin\nconst float rB=40.0;\n\n// Transforms\nvec3 rotateX(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(p.x, ca*p.y - sa*p.z, sa*p.y + ca*p.z);\n}\n\nvec3 rotateY(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(ca*p.x + sa*p.z, p.y, -sa*p.x + ca*p.z);\n}\n\nvec3 rotateZ(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(ca*p.x + sa*p.y, -sa*p.x + ca*p.y, p.z);\n}\n\n\n// Smooth cubic falloff function\n// x : distance\n// R : radius\nfloat falloff(float x, float R)\n{\n    float u = clamp(x/R, 0., 1.);\n    float v = 1.-u*u;\n    return v*v*v;//pow(1.0-pow(x/R, 2.0), 3.0);\n}\n\n// Primitives ----------------------------------\n\n// Point skeleton\n// p : point\n// c : center of skeleton\n// e : energy associated to skeleton\n// R : radius\nfloat point(vec3 p, vec3 c, float e, float R)\n{\n  return e * falloff(length(p - c), R);\n}\n\n// Segment skeleton\n// p : point\n// a : first point of segment skeleton\n// b : second point of segment skeleton\n// e : energy associated to skeleton\n// R : radius\nfloat segment(vec3 p, vec3 a, vec3 b, float e,float R)\n{\n    return 0.;\n}\n\n\n// Operators -----------------------------------\n\n// Blending\n// a,b : field function of the sub-trees\nfloat Blend(float a,float b)\n{\n    return a+b;\n}\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nfloat Union(float a,float b)\n{\n    return 0.;\n}\n// Minus\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nfloat Minus(float a,float b)\n{\n    return min(a,(T*2.)-b);\n}\n\n// Intersection\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nfloat Intersection(float a,float b)\n{\n    return min(a,b);\n}\n\n// OBJECTS ----------------------------------------------------------\n\n// Random positions generator\nfloat random (float s) {\n    return (sin(71.233 + s * 17.5453123) + cos(12.1 + s * 27.358)) / 2.;\n}\n\n// Potential field of the object\n// p : point\nfloat Object(vec3 p)\n{\n    p.z=-p.z;\n    float v;\n    vec3 initPos = vec3(0,0,-3);\n    vec3[17] allPoint = vec3[17]( vec3(0,0,2), // HEAD\n                                vec3(0,0,1), //NECK\n                                vec3(1,0,0.5), vec3(1.5,0,0.5), vec3(2.5,0,0.5),//ARM Left\n                                vec3(-1,0,0.5), vec3(-1.5,0,0.5), vec3(-2.5,0,0.5),//ARM Left\n                                vec3(0,0,0),\n                                vec3(0,0,-1),\n                                vec3(0.5,0,-2.2), vec3(1.2,0,-2.8), vec3(2,0,-3.5), // Leg Right\n                                vec3(-0.5,0,-2.2), vec3(-1.2,0,-2.8), vec3(-2,0,-3.5), // Leg Left\n                                vec3(0,0,-2));\n  \n    for (int i=0; i < allPoint.length(); i++)\n    {\n        v += Blend(point(p, initPos - allPoint[i], 1., 1.), point(p, initPos - allPoint[i], 1., 1.));\n    }\n    return v-T;\n}\n\n\n\n// Rendering -------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n    float E = 0.0001;\n    float dist = Object(p);\n    \n    vec3 Normal;\n    Normal.x = Object(p + vec3(E, 0, 0)) - dist;\n    Normal.y = Object(p + vec3(0, E, 0)) - dist;\n    Normal.z = Object(p + vec3(0, 0, E)) - dist;\n    \n    return normalize(Normal);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// h : hit\n// s : Number of steps\nfloat Trace(vec3 o, vec3 u, float rB,out bool h,out int s)\n{\n  h = false;\n\n  // Don't start at the origin, instead move a little bit forward\n  float t=rA;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = Object(p);\n    // Hit object\n      if (v > 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += Epsilon;\n      // Escape marched far away\n      if (t>rB)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float rB, out bool h,out int s)\n{\n  h = false;\n\n    // Don't start at the origin, instead move a little bit forward\n    float t=rA;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = Object(p);\n    // Hit object\n      if (v > 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,abs(v)/4.0);\n      // Escape marched far away\n      if (t>rB)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n\n// Ambient occlusion\n// p : Point\n// n : Normal\n// a : Number of smaples\nfloat AmbientOcclusion(vec3 p,vec3 n, int a)\n{\n    if (a==0) { return 1.0; }\n    \n\tfloat ao=0.0; \n    \n    for (int i=0;i<a;i++)\n    {\n \t\tvec3 d = Cosine(581.123*float(i) , n);\n\n        int s;\n        bool h;\n        float t=SphereTrace(p,d,10.0,h,s);\n        if (!h) {ao+=1.0;}\n        else if (t>5.0)\n            {\n             ao+=1.0;   \n            }\n    }\n    \n    ao/=float(a);\n\treturn ao;\n}\n\n// Background color\nvec3 background(vec3 rd)\n{\n  return mix(vec3(0.1,0.1,0.1),vec3(0.15,0.1,0.15), rd.z*0.5+0.5);\n}\n\n\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(0.0, 0.0, -50.0);\n  vec3 l = normalize(lp - p);\n\n  // Not even Phong shading, use weighted cosine instead for smooth transitions\n  float diff = pow(0.5*(1.0+dot(n, l)),2.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\nfloat SmoothLight(vec3 p,vec3 n,int a)\n{\n   if (a==0)\n        return 1.0;\n    \n    // point light\n  const vec3 lp = vec3(0.0, 0.0, -50.0);\n\n  vec3 l = normalize(lp - p);\n    \nfloat lo=0.0; \n    \n    for (int i=0;i<a;i++)\n    {\n vec3 d = Cosine(   581.123*float(i) , n);\n d=normalize(l+d*0.15);\n        int s;\n        bool h;\n        float t=SphereTrace(p,d,10.0,h,s);\n        if (!h) {lo+=1.0;}\n        else if (t>100.0)\n            {\n             lo+=1.0;   \n            }\n    }\n    \n    lo/=float(a);\nreturn lo;\n\n}\n\n// Shading and lighting\n// p : point,\n// n : normal at point\nvec3 Shade(vec3 p, vec3 n)\n{\n    // Remplacer par Objet(c) pour avoir la couleur !\n    vec3 c = 0.25+0.25*background(n);\n    c+=0.15*AmbientOcclusion(p+0.1*n,n,15)*vec3(0.8,0.75,0.7);\n    c+=0.3*Light(p,n);\n    return c;\n}\n\n// Shading with number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Hashing function\n// Returns a random number in [-1,1]\nfloat Hash(float seed)\n{\n    return fract(sin(seed)*43758.5453 );\n}\n\n// Cosine direction \nvec3 Cosine( in float seed, in vec3 nor)\n{\n    float u = Hash( 78.233 + seed);\n    float v = Hash( 10.873 + seed);\n\n    \t// method 3 by fizzer: http://www.amietia.com/lambertnotangent.html\n        float a = 6.2831853 * v;\n        u = 2.0 * u - 1.0;\n        return normalize( nor + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u) );\n}\n\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 rotate_z(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n// m : Mouse position\n// p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.8;\n    \n    ro=vec3(20.0,0.0,5.0);\n    ro*=rotate_z(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,1.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n","name":"Common","description":"","type":"common"}]}