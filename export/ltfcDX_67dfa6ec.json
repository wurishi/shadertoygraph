{"ver":"0.1","info":{"id":"ltfcDX","date":"1530810650","viewed":459,"name":"Brusselator","username":"dazuma","description":"Emergence of turing patterns in the Brusselator. Press SHIFT to see the other concentration.\n\nRunge-kutta integrator of the finite differences Brusselator.\n","likes":3,"published":3,"flags":48,"usePreview":0,"tags":["diffusion","reaction","turingpatterns"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 components = texture(iChannel0, uv).xyz;\n    float val;\n    \n    float seeModel = texelFetch( iChannel1, ivec2(16,0), 0 ).x; // SHIFT KEY\n    \n    if (seeModel < 1.0) {val = components.x/2.;}\n    else {val = components.y/2.;}\n    fragColor = vec4(val, 1.-val, 1.-val, 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    vec2 delta = 1. / iResolution.xy;\n    vec2 uv =    texture(iChannel0, xy).xy;\n    vec2 uv_n =  texture(iChannel0, xy + vec2(0., delta.y)).xy;\n    vec2 uv_e =  texture(iChannel0, xy + vec2(delta.x, 0.)).xy;\n    vec2 uv_s =  texture(iChannel0, xy + vec2(0., -delta.y)).xy;\n    vec2 uv_w =  texture(iChannel0, xy + vec2(-delta.x, 0.)).xy;\n    vec2 d2x = dif2x(uv, uv_e, uv_w);\n    vec2 d2y = dif2y(uv, uv_n, uv_s);\n    \n    vec2 k1 = sources(uv, d2x, d2y);\n    \n    fragColor = vec4(k1,0,1);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    vec2 delta = 1. / iResolution.xy;\n    vec2 uv =    texture(iChannel0, xy).xy + texture(iChannel1, xy).xy * dt/2.;\n    vec2 uv_n =  texture(iChannel0, xy + vec2(0., delta.y)).xy + texture(iChannel1, xy + vec2(0., delta.y)).xy * dt/2.;\n    vec2 uv_e =  texture(iChannel0, xy + vec2(delta.x, 0.)).xy + texture(iChannel1, xy + vec2(delta.x, 0.)).xy * dt/2.;\n    vec2 uv_s =  texture(iChannel0, xy + vec2(0., -delta.y)).xy + texture(iChannel1, xy + vec2(0., -delta.y)).xy * dt/2.;\n    vec2 uv_w =  texture(iChannel0, xy + vec2(-delta.x, 0.)).xy + texture(iChannel1, xy + vec2(-delta.x, 0.)).xy * dt/2.;\n    vec2 d2x = dif2x(uv, uv_e, uv_w);\n    vec2 d2y = dif2y(uv, uv_n, uv_s);\n\n    vec2 k2 = sources(uv, d2x, d2y);\n     \n    fragColor = vec4(k2,0,1);\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    vec2 delta = 1. / iResolution.xy;\n    vec2 uv =    texture(iChannel0, xy).xy + texture(iChannel1, xy).xy * dt/2.;\n    vec2 uv_n =  texture(iChannel0, xy + vec2(0., delta.y)).xy + texture(iChannel1, xy + vec2(0., delta.y)).xy * dt/2.;\n    vec2 uv_e =  texture(iChannel0, xy + vec2(delta.x, 0.)).xy + texture(iChannel1, xy + vec2(delta.x, 0.)).xy * dt/2.;\n    vec2 uv_s =  texture(iChannel0, xy + vec2(0., -delta.y)).xy + texture(iChannel1, xy + vec2(0., -delta.y)).xy * dt/2.;\n    vec2 uv_w =  texture(iChannel0, xy + vec2(-delta.x, 0.)).xy + texture(iChannel1, xy + vec2(-delta.x, 0.)).xy * dt/2.;\n    vec2 d2x = dif2x(uv, uv_e, uv_w);\n    vec2 d2y = dif2y(uv, uv_n, uv_s);\n\n    vec2 k3 = sources(uv, d2x, d2y);\n     \n    fragColor = vec4(k3,0,1);\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"float hash(float seed)\n{\n    return fract(sin(seed) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    vec2 delta = 1. / iResolution.xy;\n    vec2 uv =    texture(iChannel0, xy).xy + texture(iChannel1, xy).xy * dt;\n    vec2 uv_n =  texture(iChannel0, xy + vec2(0., delta.y)).xy + texture(iChannel1, xy + vec2(0., delta.y)).xy * dt;\n    vec2 uv_e =  texture(iChannel0, xy + vec2(delta.x, 0.)).xy + texture(iChannel1, xy + vec2(delta.x, 0.)).xy * dt;\n    vec2 uv_s =  texture(iChannel0, xy + vec2(0., -delta.y)).xy + texture(iChannel1, xy + vec2(0., -delta.y)).xy * dt;\n    vec2 uv_w =  texture(iChannel0, xy + vec2(-delta.x, 0.)).xy + texture(iChannel1, xy + vec2(-delta.x, 0.)).xy * dt;\n    vec2 d2x = dif2x(uv, uv_e, uv_w);\n    vec2 d2y = dif2y(uv, uv_n, uv_s);\n\n    vec2 k4 = sources(uv, d2x, d2y);\n    \n    uv = texture(iChannel0, xy).xy;\n    vec2 k1 = texture(iChannel3, xy).xy;\n    vec2 k2 = texture(iChannel2, xy).xy;\n    vec2 k3 = texture(iChannel1, xy).xy;\n    \n    uv = uv + dt/6.*(k1 + 2.*k2 + 2.*k3 + k4);\n    \n    if(iFrame<5) {\n    \tfragColor = vec4(sin(xy.x),hash(hash(xy.x)*hash(xy.y+29.)),0,1);\n    } else {\n        fragColor = vec4(uv.x,uv.y,0,1);\n    }\n}","name":"Buf D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float dr = 0.01;\nconst float idr2 = 1./(dr*dr);\nconst float A = 1.;\nconst float B = 1.9;\nconst float g = 50000.;\nconst float d = 20.;\nconst float dt = 0.000001;\n\nvec2 dif2x(vec2 uv, vec2 uv_e, vec2 uv_w){\n    vec2 d2x = idr2*(uv_e - 2.*uv + uv_w);\n    return d2x;\n}\n\nvec2 dif2y(vec2 uv, vec2 uv_n, vec2 uv_s){\n    vec2 d2x = idr2*(uv_n - 2.*uv + uv_s);\n    return d2x;\n}\n\nvec2 sources(vec2 uv, vec2 d2x, vec2 d2y)\n{\n    vec2 k;\n    k.x = d2x.x + d2y.x + g*(A - B*uv.x + uv.x*uv.x*uv.y - uv.x);\n    k.y = d*(d2x.y + d2y.y) + g*(B*uv.x - uv.x*uv.x*uv.y);\n    return k;\n}\n","name":"Common","description":"","type":"common"}]}