{"ver":"0.1","info":{"id":"XtVyzw","date":"1535550985","viewed":1026,"name":"Let the sunshine in","username":"Flopine","description":"Leeeeeeet  the sunshiiiiiiiiiiine\nLeeeeeeeet the sunshine iiiiiin (8) \n\nAnd now it is stuck in my head... Oh no! ","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","flower","volumetric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// using simesgreen shader : https://www.shadertoy.com/view/Msf3Dj\n// Thanks to wsmind, leon, lsdlive, XT95, lamogui and Coyhot for teaching me :)\n// Thanks LJ for giving me the love of shadercoding :3\n\n\n#define ITER 64\n#define PI 3.141592\n#define minStep 0.02\n#define hitThreshold 0.01\n\nmat2 rot (float a)\n{return mat2 (cos(a),sin(a),-sin(a),cos(a));}\n\nvec2 mo (vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y > p.x) p.xy = p.yx;\n    return p;\n}\n\nvec2 moda(vec2 p, float per)\n{\n    float a = atan(p.y,p.x);\n    float l = length(p);\n    a = mod(a-per/2., per) - per/2.;\n\treturn vec2 (cos(a),sin(a))*l;\n}\n\nfloat stmin(float a, float b, float k, float n)\n{\n    float st = k/n;\n    float u = b-k;\n    return min(min(a,b), 0.5 * (u+a+abs(mod(u-a+st, 2.*st)-st)));\n}\n\nfloat od (vec3 p, float d)\n{\n    return dot(p, normalize(sign(p)))-d;\n}\n\nfloat box( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sphe (vec3 p, float r)\n{return length(p)-r;}\n\nfloat sc(vec3 p, float s) \n{\n    p.xz *= rot(iTime);\n    p = abs(p);\n    p = max(p, p.yzx);\n    return min(p.x, min(p.y, p.z)) - s;\n}\n\nfloat prim1 (vec3 p)\n{\n    p.xy = moda(p.xy, 2.*PI/7.);\n   \tp.x -= 2.5;\n    return max(-sc(p, 0.6), od(p,1.));\n}\n\nfloat prim2 (vec3 p)\n{ \n    p.xy *= rot(iTime*0.3);\n    p.xy = mo(p.xy, vec2(3.));\n    p.xy = moda(p.xy, 2.*PI/5.);\n    p.x -= 3.8;\n    return stmin(prim1(p),sphe(p,1.5),0.6,3.);\n}\n\nfloat SDF (vec3 p)\n{\n    float b = box(p, vec3(15.,10.,1.));\n    float d = max(b, -prim2(p));\n  \td += texture(iChannel0, p.xy).r*0.04;\n    return d;\n}\n\n//simesgreen raymarched inside function : https://www.shadertoy.com/view/Msf3Dj\nvec3 traceInside(vec3 ro, vec3 rd, out bool hit, out float insideDist)\n{\n    \n    hit = false;\n    insideDist = 0.0;\t\n    vec3 pos = ro;\n    vec3 hitPos = pos;\n    for(int i=0; i<ITER; i++)\n    {\n\t\tfloat d = SDF(pos);\n\t\td = max(abs(d), minStep) * sign(d);// enforce minimum step size\n\t\t\n\t\tif (d < hitThreshold && !hit) {\n\t\t\t// save first hit\n\t\t\thitPos = pos;\n\t\t\thit = true;\n\t\t}\n\t\t\n\t\tif (d < 0.01) {\n\t\t\t// sum up distance inside\n\t\t\tinsideDist += d;\n\t\t}\n\t\tpos += abs(d)*rd*0.45;\n    }\n    return hitPos;\n}\n\nvec3 getcam (vec3 eye, vec3 lookat, vec2 uv, float fov)\n{\n    vec3 forward = normalize(lookat-eye);\n    vec3 right = normalize(cross(vec3(0.,1.,0.),forward));\n    vec3 up = normalize(cross(forward, right));\n    return normalize(forward*fov+right*uv.x+up*uv.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.*(fragCoord/iResolution.xy)-1.;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0.,-1.3, -5.); \n    vec3 p = ro;\n    vec3 target = vec3(0.);\n    vec3 rd = getcam(ro, target, uv, 0.8);\n    \n    vec3 translucentColor = vec3(0.1, 0.2, length(uv*0.5));\n    // trace ray\n    bool hit;\n    float dist;\n    vec3 hitPos = traceInside(ro, rd, hit, dist);\n\n    vec3 rgb = vec3(0.0);\n    if(hit) \n    {\n\t\t// exponential fall-off:\n\t\trgb = exp(-dist*dist*translucentColor);\n     } \n      else \n      {\n        rgb = vec3(0.94,1.,1.);\n     }\n\n\n    // Output to screen\n    fragColor = vec4(pow(rgb, vec3(0.45)),1.0);\n}","name":"Image","description":"","type":"image"}]}