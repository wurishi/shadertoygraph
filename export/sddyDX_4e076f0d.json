{"ver":"0.1","info":{"id":"sddyDX","date":"1654189564","viewed":80,"name":"Pride Interference Circles","username":"Kneebiter","description":"Old school effect that I did not realize would scale so poorly to 6 layers. Randomly reduced the number of layers and faded in/out.\n\nI feel this is ultimately a dud. It did not work as well as I imagined it would.\n\nIt's more ugly than rainbow.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["interference","moire","pride"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rainbow_lookup(int c) {\n    vec3 col = vec3(0.);\n    if( c == 0 ) {\n        col = vec3(1.,0.,0.);\n    } else if ( c == 1 ) {\n        col = vec3(1.,.5,0.);\n    } else if ( c == 2) {\n        col = vec3(1.,1.,0.);\n    } else if ( c == 3 ) {\n        col = vec3(0.,.9,0.);\n    } else if ( c == 4 ) {\n        col = vec3(0.,0.,.9);\n    } else if ( c == 5 ) {\n        col = vec3(.5,0.,.8);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord;\n    uv -= 0.5 * iResolution.xy;\n    uv /= 20.;\n        \n    vec3 col = vec3(0.);\n    float hitCount = 0.;\n    \n    for(float i = 0.; i < 6.; i++) {\n        // want to restrict the number of layers visible at one time.\n        float intensity = clamp(sin( i * iTime*.3), 0., 1.);\n\n        vec2 offset = 10. * vec2(sin( (i/.37 + iTime*.7) * 2.1), cos((i + iTime*.7) * 1.31));\n        float hit = mod(floor(length(uv - offset)), 2.);\n        \n        // Hit count should be ramped up faster than the color is applied.\n        // This provides a better fade. Replace 200 with 1 to see how harsh the fade is otherwise.\n        float applied_intensity = 1. - pow(1. - intensity, 200.);\n        hitCount += hit * applied_intensity;\n        \n        col += hit * intensity * rainbow_lookup(int(i));\n    }\n    \n    col /= hitCount;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}