{"ver":"0.1","info":{"id":"XcGyDy","date":"1732296030","viewed":137,"name":"mandala #1","username":"nayk","description":"originals https://www.shadertoy.com/view/mtyGWy","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["fractal","spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n#define time iTime\n#define resolution iResolution.xy\n//https://www.shadertoy.com/view/mtyGWy\n\n\nvec3 palette2( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(1.0, 0.5, 0.5);\n    vec3 c = vec3(1.5, 0.5, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n#define rotation(angle) mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n\nfloat TAU = 2.*3.14159;\n\n// Thanks IQ\nfloat eqTri( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.x = p.x + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n vec2 p = fragCoord/iResolution.xy-0.5;\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n \n       vec2 uv2 = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n vec3 r2 = normalize(vec3(uv, 1.1 - dot(uv, uv) *4.002*cos(iTime)));\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n     vec3 c=vec3(0);\n    uv2*=mat2(cos(iTime),sin(iTime),-sin(iTime), cos(iTime));\n  uv+=r2.xy;\n  \n    for(int i=0;i<40;i++){\n        float t = 2.*3.14*float(i)/20. * time*0.1;\n \n        float x = cos(t*1.5);\n        float y = sin(t+cos(time / 1.0));\n\n        vec2 o = .2*vec2(x,y);\n\n        c += 0.01/(length(p-o))*vec3(0.2);\n    }\n    for (float i = 0.0; i < 5.0; i++) {\n\n        uv = fract(uv * 2.5) - 0.5;\n         uv *= rotation(2. * TAU * (.3 - clamp(length(uv2),0.,.3)));\n          uv*=vec2(fract(log(length(uv.xy))+iTime*0.25));\nuv2+=r2.xy;\nuv+=uv2;\n        float d = length(uv) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n\n        d = sin(d*8. + iTime)/8.;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n        finalColor += col * d;\n    }\n        \n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}