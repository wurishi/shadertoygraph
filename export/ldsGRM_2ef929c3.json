{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"video","id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"music","id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"vec2 fragCoord;\nvec4 fragColor;\n\nfloat distanceToLineSegment(vec2 a, vec2 b, vec2 p)\n{\n    float dist = distance(a,b);\n    vec2 v = normalize(b-a);\n    float t = dot(v,p-a);\n    vec2 spinePoint;\n    if (t > dist) spinePoint = b;\n    else if (t > 0.0) spinePoint = a + t*v;\n    else spinePoint = a;\n    return distance(p,spinePoint);\n\n}\n\nfloat distanceToLine(float angle, float factor)\n{\n  float s = sin(angle)*factor;\n  float c = cos(angle)*factor;\n  vec2 p1 = vec2(0.5,0.5) * iResolution.xy + vec2(s,c) * iResolution.yy;\n  vec2 p2 = vec2(0.5,0.5) * iResolution.xy;\n  return distanceToLineSegment(p1, p2, fragCoord.xy);\n}\n\nfloat distanceToLine(float angle, float end, float begin)\n{\n  float se = sin(angle)*end;\n  float ce = cos(angle)*end;\n  vec2 p1 = vec2(0.5,0.5) * iResolution.xy + vec2(se,ce) * iResolution.yy;\n  float sb = sin(angle)*begin;\n  float cb = cos(angle)*begin;\n  vec2 p2 = vec2(0.5,0.5) * iResolution.xy + vec2(sb,cb) * iResolution.yy;;\n  return distanceToLineSegment(p1, p2, fragCoord.xy);\n}\n\nvoid drawLine(float d, float lineWidth, float borderWidth)\n{\n  if (d <= lineWidth)\n  {\n\tfloat m = clamp(d-(lineWidth-1.0), 0.0, 1.0);\n\n    fragColor = mix(vec4(0.5,0.2,0.0,2.0), fragColor, m);\n\n    if (d <= (lineWidth-borderWidth))\n  \t{\n\t\tfloat m = clamp(d-(lineWidth-borderWidth-1.0), 0.0, 1.0);\n\t\n\t\tfragColor = mix(vec4(0.5,0.2,0.0,1.0), texture(iChannel0, fragCoord.xy / iResolution.xy), 1.0-m);\n    }\n  }\n}\n\nvoid mainImage( out vec4 oFragColor, in vec2 iFragCoord )\n{\n  fragCoord = iFragCoord;\n  float angleSeconds = ((mod(iDate.a,60.0)) * 3.14159265) / 30.0;\n  float angleMinutes = ((iDate.a / 60.0) * 3.14159265) / 30.0;\n  float angleHours   = ((iDate.a / 60.0 / 12.0) * 3.14159265) / 30.0;\n\t\n  float dSecond = distanceToLine(angleSeconds, 0.40);\n  float dMinute = distanceToLine(angleMinutes, 0.40);\n  float dHours  = distanceToLine(angleHours, 0.20);\n\n  fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);//  vec4(1.0,1.0,1.0,1.0);\n\n  for (float minute = 0.0; minute < 60.0; minute += 1.0)\n  {\n\t  float angle = (minute * 3.14159265) / 30.0;\n\t  if (mod(minute, 5.0)!=0.0)\n\t  {\n\t    float dDot = distanceToLine(angle, 0.475, 0.460);\n\t  \tdrawLine(dDot, 4.0, 1.5);\n\t  }\n\t  else\n\t  {\n\t    float dDot = distanceToLine(angle, 0.475, 0.450);\n\t  \tdrawLine(dDot, 4.0, 1.5);\n\t  }\n  }\n\t\n  drawLine(dHours, 20.0, 2.0);\n  drawLine(dMinute, 15.0, 2.0);\n  drawLine(dSecond, 10.0, 1.5);\n  oFragColor = fragColor;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldsGRM","date":"1367010529","viewed":239,"name":"Clock","username":"kootstra","description":"As always the simplest  first to learn about shaders.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["analogueclock"],"hasliked":0,"parentid":"","parentname":""}}