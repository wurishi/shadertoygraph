{"ver":"0.1","info":{"id":"ldjcRG","date":"1492634350","viewed":268,"name":"Majority vote / Ising model","username":"chronos","description":"As simple attempt to create an ising model like stochastic cellular automaton.\nImplemented using a majority vote rule with random noise.\nThis creates two opposing forces, one diffusion like, which promotes order, and one destructive which induces chaos.","likes":10,"published":1,"flags":48,"usePreview":0,"tags":["2d","cellular","model","stochastic","automaton","ising","majority","vote","toom","annealing","simulated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 remap(float x) {\n    return vec3((x + 1.) / 2.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 tex = texture(iChannel0, uv);\n    \n\tfragColor = vec4(remap(tex.r), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// From https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE1 .1031\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat initial(vec2 fragCoord) {\n    return texture(iChannel1, fragCoord/iResolution.xy).r;\n}\n\nvec4 lookUp(vec2 fragCoord, vec2 offset) {\n    return texture(iChannel0, fract((fragCoord + offset)/iResolution.xy));\n}\n\nfloat transition(vec2 fragCoord, const float h, const float T, float rnd) {\n    float left  = lookUp(fragCoord, vec2(-1.,  0.)).r;\n    float right = lookUp(fragCoord, vec2( 1.,  0.)).r;\n    float down  = lookUp(fragCoord, vec2( 0., -1.)).r;\n    float up    = lookUp(fragCoord, vec2( 0.,  1.)).r;\n    float center  = lookUp(fragCoord, vec2( 0.,  0.)).r;\n    float sum = left + right + down + up + center;\n    \n    float vote = step(0.0, sum);\n    float spin = 2.* vote - 1.;\n    \n    //T = Thermal noise, h = magnetic field\n    //T=p+q and h=(p-q)/(p+q)\n    float p = T * (1.+h) / 2.; // spin down to spin up probability\n    float q = T - p;           // spin up to spin down probability\n\n    // apply random noise:\n    // if((state > 0.0) && (rnd < q)) state = -1.;\n    // else if(rnd < p) state = 1.;\n    float state = \n        vote * (1. - 2.*step(rnd, q)) + \n        (1.-vote) * (2.*step(rnd, p) - 1.);\n \treturn state;           \n}\n\nbool key(vec2 keycode) {\n\treturn texture( iChannel2, keycode).x > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 prev = lookUp(fragCoord, vec2(0.0));\n    \n    float state = prev.r;\n    \n    const float bias  = 0.0; // h = f(x, y)\n    const float noise = .25;  // T = h(x, y, t)\n    \n    // T=p+q, h=(p-q)/(p+q)\n    // h = magnetic field\n    // T = thermal noise\n    // h = 0 -> T = 2q = 2p\n    // h = (p-q) / T\n    // Th = p - q\n    // Th + T = 2*p\n    // p = T(1+h)/2\n    // q = T - p\n    \n    \n\tfloat rnd = hash13(vec3(fragCoord.xy, iTime));\n    \n    state = transition(fragCoord, bias, noise, rnd);\n    \n    // Initialize\n    const vec2 spacebar = vec2(32.5/256.0,0.5);\n    if(iFrame < 10 || key(spacebar) ) {\n        state = 1.-2.*step(.5, initial(fragCoord));\n    }\n    \n    fragColor = vec4(state, 0.0 , 1.0 ,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}