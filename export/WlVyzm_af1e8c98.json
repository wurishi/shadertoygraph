{"ver":"0.1","info":{"id":"WlVyzm","date":"1610715474","viewed":93,"name":"Basic raymarching scroller","username":"seven_dc","description":"testing modulating the space and moving the camera.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","blur","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 25\n#define MAX_DIST 150.\n#define SURF_DIST .01\n\nfloat GetDistance(vec3 point) {\n\tvec4 sphere = vec4(2, 2, 2, 1);\n    // modulate the point by 4.\n    vec3 spoint = mod(point, 4.);\n    \n    float sphereDist = length(spoint-sphere.xyz)-sphere.w;    \n    float planeDist = point.y;\n    \n    float d = min(sphereDist, planeDist);\n    return d;\n}\n\nfloat RayMarch(vec3 rayOrgin, vec3 rayDirection) {\n\tfloat distance=0.;\n    \n    for(int i=0; i<(MAX_STEPS-int(sin(iTime*2.)*10.)); i++) {\n    \tvec3 point = rayOrgin + rayDirection * distance;\n        float surfaceDistance = GetDistance(point);\n        distance += surfaceDistance;\n        if(distance>MAX_DIST || surfaceDistance<SURF_DIST) break;\n    }\n    \n    return distance;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // put 0,0 in the center\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n       \n    // camera   \n    vec3 rayOrgin = vec3(0, 3.+sin(iTime)*2., mod(iTime,4.));\n    vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1));\n\n    float d = RayMarch(rayOrgin, rayDirection);   \n    \n    // color\n    vec3 col = vec3(1.-(d/20.));            \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}