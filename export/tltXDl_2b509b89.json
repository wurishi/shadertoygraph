{"ver":"0.1","info":{"id":"tltXDl","date":"1581980641","viewed":1991,"name":"Individual Rounded Rectangle","username":"amine_sebastian","description":"Renders a rectangle with border and rounded corners with individually controllable corner radii.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","round","rectangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// from https://iquilezles.org/articles/distfunctions\n// additional thanks to iq for optimizing my conditional block for individual corner radii!\nfloat roundedBoxSDF(vec2 CenterPosition, vec2 Size, vec4 Radius) {\n    Radius.xy = (CenterPosition.x>0.0)?Radius.xy : Radius.zw;\n    Radius.x  = (CenterPosition.y>0.0)?Radius.x  : Radius.y;\n    \n    vec2 q = abs(CenterPosition)-Size+Radius.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - Radius.x;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // The pixel space scale of the rectangle.\n    vec2 size = vec2(300.0f, 300.0f);\n    \n    // The pixel space location of the rectangle.\n    vec2 location = iMouse.xy;\n\n    // How soft the edges should be (in pixels). Higher values could be used to simulate a drop shadow.\n    float edgeSoftness  = 2.0f;\n    \n    // The radius of the corners (in pixels) clockwise starting in the top left.\n    vec4 radius = vec4((sin(iTime) + 1.0f)) * vec4(10.0f, 20.0f, 40.0f, 80.0f);\n    \n    // Calculate distance to edge.   \n    float distance = roundedBoxSDF(fragCoord.xy - location, size / 2.0f, radius);\n       \n    // Smooth the result (free antialiasing).\n    float smoothedAlpha =  1.0f-smoothstep(0.0f, edgeSoftness,distance);\n    \n    // Border.  \n    float borderThickness = 5.0f;\n    float borderSoftness  = 2.0f;\n    float borderAlpha     = 1.0f-smoothstep(borderThickness - borderSoftness, borderThickness, abs(distance));\n\n    // Colors\n    vec4 rectColor = vec4(0.0f, 0.2f, 1.0f, 1.0f);\n    vec4 borderColor = vec4(1.0f, 0.6f, 0.1f, 1.0f);\n    vec4 bgColor = vec4(1.0f, 1.0f, 1.0f, 1.0f);\n      \n    fragColor = mix(bgColor, mix(rectColor, borderColor, borderAlpha), smoothedAlpha);\n}","name":"Image","description":"","type":"image"}]}