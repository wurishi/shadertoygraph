{"ver":"0.1","info":{"id":"3tX3zl","date":"1557232259","viewed":2309,"name":"GPU hacks #05 - WebGL","username":"PrzemyslawZaworski","description":"HTML5 WebGL - simple framework. Copy code from line 2 to 70 and save as chess.html. Custom shader code paste between 22-27. Remember to set alpha(1.0) for gl_FragColor.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n<!--Basic template for WebGL pixel shaders. Author: PZ, 2017 -->\n<html>\n\t<head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /></head> \n\t<body onload = loop()>\n\t\t<canvas width = \"800\" height = \"600\" id = \"shader\"></canvas>\n\t\t<p>Chess Demo</p>\n\t\t<style TYPE=\"text/css\">\n\t\t\tbody {background: linear-gradient(to right,gray,white,gray);}\n\t\t\tp {font-size:300%;text-align:center;}\n\t\t\tcanvas {padding:0;margin:auto;display:block;position:absolute;top:0;bottom:0;left:0;right:0;}\n\t\t</style>\n\t\t<script id=\"VertexShader\" type=\"text/glsl\"> \n\t\t\tattribute vec2 position; \n\t\t\tvoid main(void) \n\t\t\t{ \n\t\t\t\tgl_Position = vec4(position,0.0,1.0);\n\t\t\t}\n\t\t</script>\n\t\t<script id=\"PixelShader\" type=\"text/glsl\"> \n\t\t\tprecision lowp float;\n\t\t\tuniform float iTime;\n\t\t\tvoid main(void) \n\t\t\t{\n\t\t\t\tvec2 p = ceil(gl_FragCoord.xy/30.0 + sin(iTime));\n\t\t\t\tgl_FragColor = vec4(mod(p.xxx + p.y, 2.0), 1.0);\n\t\t\t}\n\t\t</script>\t\n\t\t<script>\n\t\t\tvar canvas = document.getElementById('shader');\n\t\t\tvar gl = canvas.getContext(\"webgl\") || canvas.getContext('experimental-webgl'); \n\t\t\tvar vertices = [-1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1];\n\t\t\tvar buffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n\t\t\tvar vertexshader = gl.createShader(gl.VERTEX_SHADER);\n\t\t\tgl.shaderSource(vertexshader, document.getElementById(\"VertexShader\").text);\n\t\t\tgl.compileShader(vertexshader);\n\t\t\tvar pixelshader = gl.createShader(gl.FRAGMENT_SHADER);\n\t\t\tgl.shaderSource(pixelshader, document.getElementById(\"PixelShader\").text);\n\t\t\tgl.compileShader(pixelshader);\n\t\t\tvar program = gl.createProgram();\n\t\t\tgl.attachShader(program, vertexshader); \n\t\t\tgl.attachShader(program, pixelshader);\n\t\t\tgl.linkProgram(program);\n\t\t\tgl.useProgram(program);\n\t\t\tvar coordinates = gl.getAttribLocation(program, \"position\");\n\t\t\tgl.vertexAttribPointer(coordinates, 2, gl.FLOAT, false, 0, 0);\n\t\t\tgl.enableVertexAttribArray(coordinates);\n\t\t\twindow.requestAnimFrame = ( \n\t\t\tfunction() \n\t\t\t{ \n\t\t\t\treturn  window.requestAnimationFrame || \n\t\t\t\twindow.webkitRequestAnimationFrame ||  \n\t\t\t\twindow.mozRequestAnimationFrame || \n\t\t\t\twindow.oRequestAnimationFrame || \n\t\t\t\twindow.msRequestAnimationFrame ||\n\t\t\t\tfunction(callback) {window.setTimeout(callback, 1000/60);};  \n\t\t\t} ) (); \n\t\t\tvar time = 0;  \n\t\t\tfunction loop()\n\t\t\t{\n\t\t\t\trequestAnimFrame(loop);\n\t\t\t\ttime+=(1/60);\n\t\t\t\tgl.uniform1f(gl.getUniformLocation(program,\"iTime\"), time);\n\t\t\t\tgl.drawArrays(gl.TRIANGLES, 0, 6);\n\t\t\t}\t \n\t\t</script>     \n\t</body>\n</html>\n*/\n\n/*\n<!--Version for WebGL 2 -->\n<html>\n\t<head><meta charset=\"utf-8\"></head>\n\t<body onload = loop()>\n\t\t<canvas width = \"800\" height = \"600\" id = \"shader\"></canvas>\n\t\t<script id=\"VertexShader\" type=\"x-shader/x-vertex\">\n\t\t\t#version 300 es  \n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tfloat x = float((gl_VertexID & 1) << 2);\n\t\t\t\tfloat y = float((gl_VertexID & 2) << 1);\n\t\t\t\tgl_Position = vec4(x - 1.0, y - 1.0, 0, 1);\n\t\t\t}\n\t\t</script>\n\t\t<script id=\"PixelShader\" type=\"x-shader/x-fragment\">\n\t\t\t#version 300 es\n\t\t\tprecision highp float;\n\t\t\tuniform float iTime;\n\t\t\tout vec4 fragColor;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tvec2 p = ceil(gl_FragCoord.xy/30.0 + sin(iTime));\n\t\t\t\tfragColor = vec4(mod(p.xxx + p.y, 2.0), 1.0);\n\t\t\t}\n\t\t</script>\n\t\t<script>\n\t\t\tvar canvas = document.getElementById('shader');\n\t\t\tvar gl = canvas.getContext( 'webgl2', { antialias: false } );\n\t\t\tvar vertexshader = gl.createShader(gl.VERTEX_SHADER);\n\t\t\tgl.shaderSource(vertexshader, document.getElementById(\"VertexShader\").textContent.replace(/^\\s+|\\s+$/g, ''));\n\t\t\tgl.compileShader(vertexshader);\t\t\n\t\t\tvar pixelshader = gl.createShader(gl.FRAGMENT_SHADER);\n\t\t\tgl.shaderSource(pixelshader, document.getElementById(\"PixelShader\").textContent.replace(/^\\s+|\\s+$/g, ''));\n\t\t\tgl.compileShader(pixelshader);\n\t\t\tvar program = gl.createProgram();\n\t\t\tgl.attachShader(program, vertexshader);\n\t\t\tgl.attachShader(program, pixelshader);\n\t\t\tgl.linkProgram(program);\n\t\t\tgl.useProgram(program);\n\t\t\twindow.requestAnimFrame = ( \n\t\t\tfunction() \n\t\t\t{ \n\t\t\t\treturn  window.requestAnimationFrame || \n\t\t\t\tfunction(callback) {window.setTimeout(callback, 1000/60);};  \n\t\t\t} ) (); \n\t\t\tvar time = 0;  \n\t\t\tfunction loop()\n\t\t\t{\n\t\t\t\trequestAnimFrame(loop);\n\t\t\t\ttime+=(1/60);\n\t\t\t\tgl.uniform1f(gl.getUniformLocation(program,\"iTime\"), time);\n\t\t\t\tgl.drawArrays(gl.TRIANGLES, 0, 6);\n\t\t\t}\n\t\t</script>\n\t</body>\n</html>\n*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = ceil(fragCoord/30. + sin(iTime));   \n    fragColor = mod(p.xxxx + p.y, 2.);\n}","name":"Image","description":"","type":"image"}]}