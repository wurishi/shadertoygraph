{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"cubemap","id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"//Cheap curvature by nimitz (twitter: @stormoid)\n\n/*\n\tNot sure if this method is new, but I haven't seen it around.\n\tUsing a single extra tap to return analytic curvature of an SDF.\n\n\tMy first implementation required 16 taps, then 12, then thanks \n\tto some math help from a friend (austere) I got it down to 7 taps.\n\tAnd this is the\tfinal optimization which requires 5 taps or a\n\tsingle tap if you're already computing normals.\n\n\n\tEdit (April 2016):\n\n\tComing back to this I know realize that what I am returning is an\n\tapproximation of the Laplacian of the SDF and the Laplacian being \n\tthe divergence of the gradient of the field means that any point\n\ton the surface being a sink will return negative \"curvature\" and\n\tvice-versa (since the gradient of a SDF should point to the centroid\n\tat any point in space).\n\n\tSo now, I include the 7-tap version which is a more accurate Laplacian,\n\twhile the 5-tap version while cheaper, it is less accurate.\n\n\tN.B. Mean curvature is computed here, not Gaussian curvature. (thanks to Fabrice)\n*/\n\n#define ITR 80\n#define FAR 10.\n#define time iTime\n\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,s,-s,c);}\n\nfloat map(vec3 p)\n{\n    p.x += sin(p.y*4.+time+sin(p.z))*0.15;\n    float d = length(p)-1.;\n    float st = sin(time*0.42)*.5+0.5; \n    const float frq = 10.;\n    d += sin(p.x*frq + time*.3 + sin(p.z*frq+time*.5+sin(p.y*frq+time*.7)))*0.075*st;\n    \n    return d;\n}\n\nfloat march(in vec3 ro, in vec3 rd)\n{\n\tfloat precis = 0.001;\n    float h=precis*2.0;\n    float d = 0.;\n    for( int i=0; i<ITR; i++ )\n    {\n        if( abs(h)<precis || d>FAR ) break;\n        d += h;\n\t    float res = map(ro+rd*d);\n        h = res;\n    }\n\treturn d;\n}\n\n//5 taps total, returns both normal and curvature\nvec3 norcurv(in vec3 p, out float curv)\n{\n    vec2 e = vec2(-1., 1.)*0.01;   \n    float t1 = map(p + e.yxx), t2 = map(p + e.xxy);\n    float t3 = map(p + e.xyx), t4 = map(p + e.yyy);\n\n    curv = .25/e.y*(t1 + t2 + t3 + t4 - 4.0*map(p));\n    return normalize(e.yxx*t1 + e.xxy*t2 + e.xyx*t3 + e.yyy*t4);\n}\n\n//Curvature only, 5 taps, with epsilon width as input\nfloat curv(in vec3 p, in float w)\n{\n    vec2 e = vec2(-1., 1.)*w;   \n    \n    float t1 = map(p + e.yxx), t2 = map(p + e.xxy);\n    float t3 = map(p + e.xyx), t4 = map(p + e.yyy);\n    \n    return .25/e.y*(t1 + t2 + t3 + t4 - 4.0*map(p));\n}\n\n//Curvature in 7-tap (more accurate)\nfloat curv2(in vec3 p, in float w)\n{\n    vec3 e = vec3(w, 0, 0);\n    \n    float t1 = map(p + e.xyy), t2 = map(p - e.xyy);\n    float t3 = map(p + e.yxy), t4 = map(p - e.yxy);\n    float t5 = map(p + e.yyx), t6 = map(p - e.yyx);\n    \n    return .25/e.x*(t1 + t2 + t3 + t4 + t5 + t6 - 6.0*map(p));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tvec2 p = fragCoord.xy/iResolution.xy-0.5;\n\tp.x*=iResolution.x/iResolution.y;\n\tvec2 mo = iMouse.xy / iResolution.xy-.5;\n\tmo.x *= iResolution.x/iResolution.y;\n\t\n    vec3 ro = vec3(0.,0.,4.);\n    ro.xz *= mm2(time*0.05+mo.x*3.);\n\tvec3 ta = vec3(0);\n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(vec3(0.,1.,0.), ww));\n    vec3 vv = normalize(cross(ww, uu));\n    vec3 rd = normalize(p.x*uu + p.y*vv + 1.5*ww);\n\t\n\tfloat rz = march(ro,rd);\n\t\n    vec3 col = texture(iChannel0, rd).rgb;\n    \n    if ( rz < FAR )\n    {\n        vec3 pos = ro+rz*rd;\n        float crv;\n        vec3 nor = norcurv(pos, crv);\n        crv = curv2(pos, 0.01);\n        vec3 ligt = normalize( vec3(.0, 1., 0.) );\n        float dif = clamp(dot( nor, ligt ), 0., 1.);\n        float bac = clamp( dot( nor, -ligt), 0.0, 1.0 );\n        float spe = pow(clamp( dot( reflect(rd,nor), ligt ), 0.0, 1.0 ),400.);\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n        vec3 brdf = vec3(0.10,0.11,0.13);\n        brdf += bac*vec3(0.1);\n        brdf += dif*vec3(1.00,0.90,0.60);\n        col = abs(sin(vec3(0.2,0.5,.9)+clamp(crv*80.,0.,1.)*1.2));\n        col = mix(col,texture(iChannel0,reflect(rd,nor)).rgb,.5);\n        col = col*brdf + col*spe +.3*fre*mix(col,vec3(1),0.5);\n        col *= smoothstep(-1.,-.9,sin(crv*200.))*0.15+0.85;\n    }\n\t\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xts3WM","date":"1422553877","viewed":5306,"name":"Cheap curvature","username":"nimitz","description":"One extra fetch is required if you're already computing normals, also included (unused) is a 5-tap version if you want a different epsilon on the curvature check.  Here the curvature is used for coloring and isolines display.","likes":115,"published":1,"flags":0,"usePreview":0,"tags":["3d","cheap","technique","curvature","laplacian"],"hasliked":0,"parentid":"","parentname":""}}