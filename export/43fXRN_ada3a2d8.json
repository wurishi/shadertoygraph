{"ver":"0.1","info":{"id":"43fXRN","date":"1709175094","viewed":114,"name":"Bacon's Sphere","username":"jovem_bacon","description":"A sphere","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Angles\n\nfloat DEG  = 0.017453292519943295;\nfloat D90  = 1.5707963267948966;\nfloat D180 = 3.141592653589793;\nfloat D360 = 6.283185307179586;\n\n// Colors\n\nvec3 bgColor     = vec3(.12, .13, .14);\nvec3 sphereColor = vec3(0.1, 0.2, 0.3);\nvec3 gridColor   = vec3(1.0, 1.0, 1.0);\nvec3 copColor    = vec3(1.0, 0.7, 0.0);\n\nfloat gridOp = 0.35;\n\n// Structures\n\nstruct Ctx {\n    float scale;\n    float minSide;\n    float hpx;        // Size of half a pixel\n    float latGridSep; // Angle between lines of latitude\n    float lonGridSep; // Angle between lines of latitude\n    float gridHwid;   // Half width of a grid line\n};\n\nstruct CoP {\n    vec3 center;\n    vec4 chords; // Chordline distances\n};\n\n// Utils\n\nfloat interp(float value, float v0, float v1) {\n    return (value - v0) / (v1 - v0);\n}\n\nfloat trnc(float value) {\n    return clamp(value, 0.0, 1.0);\n}\n\nfloat angleToChord(float angle) {\n    return sin(angle / 2.0) * 2.0;\n}\n\nvec2 vecToLatLon(vec3 vec) {\n    float lat = asin(vec.z);\n    float len = length(vec.xy);\n    float lon = acos(vec.x/len) * sign(vec.y);\n    if (abs(vec.z) > 1.0) {\n        lat = sign(vec.z) * D90;\n        lon = 0.0;\n    };\n    return vec2(lat, lon);\n}\n\nvec3 latLonToVec(vec2 latLon) {\n    float lat = latLon[0];\n    float lon = latLon[1];\n    return vec3(\n        cos(lon) * cos(lat),\n        sin(lon) * cos(lat),\n        sin(lat)\n    );\n}\n\nmat3 rotX(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    vec3 i = vec3(1.0, 0.0, 0.0);\n    vec3 j = vec3(0.0, c, -s);\n    vec3 k = vec3(0.0, s, c);\n    return transpose(mat3(i, j, k));\n}\n\nmat3 rotY(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    vec3 i = vec3(c, 0.0, s);\n    vec3 j = vec3(0.0, 1.0, 0.0);\n    vec3 k = vec3(-s, 0.0, c);\n    return transpose(mat3(i, j, k));\n}\n\nmat3 rotZ(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    vec3 i = vec3(c, -s, 0.0);\n    vec3 j = vec3(s, c, 0.0);\n    vec3 k = vec3(0.0, 0.0, 1.0);\n    return transpose(mat3(i, j, k));\n}\n\n// Builders\n\nCtx buildCtx() {\n    float scale = 0.8;\n    float minSide = min(iResolution.x, iResolution.y);\n    float px = 2.0 / minSide / scale;\n    float hemDiv = 9.0;\n    float lonDiv = hemDiv * 4.0;\n    float gridWidth = 2.0 * px;\n    \n    return Ctx(\n        scale,\n        minSide,\n        px * 0.5,\n        D90 / hemDiv,\n        D360 / lonDiv,\n        gridWidth * 0.5\n    );\n}\n\nCoP buildCoP(Ctx ctx, vec2 latLon, float rad) {\n    vec3 center = latLonToVec(latLon);\n    vec4 chords = vec4(\n\t\tangleToChord(rad - ctx.gridHwid - ctx.hpx),\n\t\tangleToChord(rad - ctx.gridHwid + ctx.hpx),\n\t\tangleToChord(rad + ctx.gridHwid - ctx.hpx),\n\t\tangleToChord(rad + ctx.gridHwid + ctx.hpx)\n    );\n    \n    return CoP(center, chords);\n}\n\n// Color calculation\n\nfloat calcShadow(vec3 vec) {\n    vec3 lightSpot = normalize(vec3(10.0, 13.0, 12.0));\n    float dist = length(vec - lightSpot);\n    return trnc(interp(dist, 0.5, 1.5)) * 0.6;\n}\n\nfloat calcInGrid(Ctx ctx, float value, float sep, float adj) {\n    value = mod(value, sep);\n\n    float hwid = ctx.gridHwid * adj;\n    float hpx = ctx.hpx * adj;\n    float edge = sep - hwid;\n    \n    float inner = trnc(interp(\n        value,\n        hwid + hpx,\n        hwid - hpx\n    ));\n    \n    float outer = trnc(interp(\n        value,\n        edge - hpx,\n        edge + hpx\n    ));\n    \n    return trnc(inner + outer);\n}\n\nfloat calcInCoP(Ctx ctx, vec3 vec, CoP cop) {\n    float chord = length(vec - cop.center);\n    float inner = interp(chord, cop.chords[0], cop.chords[1]);\n    float outer = interp(chord, cop.chords[3], cop.chords[2]);\n    return trnc(inner) * trnc(outer);\n}\n\nmat3 getTransform(float lat, float lon, float az) {\n    mat3 m = transpose(mat3(\n        0.0, 1.0, 0.0,\n        0.0, 0.0, 1.0,\n        1.0, 0.0, 0.0\n    ));\n    m *= rotX(az);\n    m *= rotY(lat);\n    m *= rotZ(-lon);\n    return m;\n}\n\nfloat atmosphere(float dist) {\n    return 1.0;\n}\n\nvec3 spherePointColor(Ctx ctx, vec3 vec) {\n\n    CoP cop1 = buildCoP(ctx, vec2(61.650 * DEG, -16.234 * DEG), 34.742 * DEG);\n    CoP cop2 = buildCoP(ctx, vec2(19.087 * DEG, +32.120 * DEG), 62.919 * DEG);\n    CoP cop3 = buildCoP(ctx, vec2(11.875 * DEG, -29.103 * DEG), 19.231 * DEG);\n    \n    float shadow = calcShadow(vec);\n    vec *= getTransform(\n        +29.680 * DEG + sin(iTime*0.8)*0.2,\n        -36.943 * DEG + iTime*0.5,\n        +10.000 * DEG + sin(iTime)*0.2\n    );\n\n    vec2 latLon = vecToLatLon(vec);\n    float lat = latLon[0];\n    float lon = latLon[1];\n\n    vec3 color = sphereColor;\n    \n    float inThickGrid = (\n          calcInGrid(ctx, lat, ctx.latGridSep, 1.0)\n        + calcInGrid(ctx, lon, ctx.lonGridSep, 1.0 / cos(lat))\n    );\n    float inThinnGrid = (\n          calcInGrid(ctx, lat, ctx.latGridSep / 6.0, 1.0)\n        + calcInGrid(ctx, lon, ctx.lonGridSep / 6.0, 1.0 / cos(lat))\n    );\n\n    color = mix(color, gridColor, trnc(inThickGrid + inThinnGrid * 0.25) * gridOp);\n    \n    float inCoP = trnc(\n          calcInCoP(ctx, vec, cop1)\n        + calcInCoP(ctx, vec, cop2)\n        + calcInCoP(ctx, vec, cop3)\n    );\n\n    color = mix(color, copColor, inCoP);\n    \n    color *= 1.0 - shadow;\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    Ctx ctx = buildCtx();\n    \n    vec2 center = iResolution.xy * 0.5;\n    vec2 relPos = fragCoord - center;\n    vec2 normal = relPos / ctx.minSide * 2.0 / ctx.scale;\n\n    float len = length(normal);\n    float inside = 1.0 - step(1.0, len);\n    float z = sqrt(1.0 - len*len);\n    \n    vec3 vec = vec3(normal, z);\n    vec3 color = spherePointColor(ctx, vec);\n\n    fragColor = vec4(mix(bgColor, color, inside), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}