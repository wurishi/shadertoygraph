{"ver":"0.1","info":{"id":"XdsyDX","date":"1490178173","viewed":150,"name":"2DSolarSystem","username":"NCSylvia","description":"2D simple solar system","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 createOrbit(float m, vec2 uv) { return mix(vec4(0), vec4(0, .19, .51, 1), smoothstep(2./iResolution.y,0., abs(length(uv) -(m-0.01) ))) ; }\n\nvec4 createPlanet(vec4 col, vec2 uv, vec2 pos) {\n    \n \t\n    if((uv.x - pos.x)* (uv.x - pos.x) + (uv.y - pos.y)*(uv.y - pos.y) < 0.04*0.04) {\n        \n     \tcol = mix(vec4(1,0,0,1), vec4(0,0,0, 1), length(uv)*1.3); \n    }\n    return col;\n    \n    \n}\n\nvec2 computeRotation(vec2 pos, float angle) {\n   \n vec2 temp;\n temp.x =   cos(angle)*pos.x + sin(angle)*pos.y;\n temp.y =   -sin(angle)*pos.x + cos(angle)*pos.y;\n \n return temp;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 col = vec4(0);\n    \n    float rot = iTime;\n    vec2 p1 = vec2(0.25, 0.0);\n    vec2 p2 = vec2(0.35, 0.0);\n    vec2 p3 = vec2(0.45, 0.0);\n    \n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;;\n    \n    if (length(uv) < 0.45) {\n        col = createOrbit(0.45, uv);\n    }\n        \n     if (length(uv) < 0.35) {\n        col = createOrbit(0.35, uv);\n    }   \n        \n    if (length(uv) < 0.25) {\n        col = createOrbit(0.25, uv);\n        \n    }\n    if(length(uv) < 0.15) {\n        col = mix(vec4(1,1,0,1), vec4(0.86, 0.38, 0.0, 1), length(uv)*4.0);\n    }\n    \n   \tp1 = computeRotation(p1, rot);\n    p2 = computeRotation(p2, rot/2.0);\n    p3 = computeRotation(p3, rot/3.0);\n    \n    col = createPlanet(col, uv, p1); \n    col = createPlanet(col, uv, p2); \n    col = createPlanet(col, uv, p3); \n    \n    \n    \n    fragColor = col;\n        \n}","name":"Image","description":"","type":"image"}]}