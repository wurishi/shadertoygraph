{"ver":"0.1","info":{"id":"fsdXD8","date":"1633053513","viewed":74,"name":"Random Rectangles Test","username":"16384","description":"A simple test for generating psuedo-random rectanges","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float r = length(uv - vec2(0.5, 0.5));\n    vec2 thetaVec = normalize(uv - vec2(0.5, 0.5));\n    \n    float rMod = r + r / 100.0;\n    float gMod = r + r / 45.0;\n    float bMod = r + r / 30.0;\n    \n    vec2 rPos = vec2(0.5,  0.5) + thetaVec * rMod;\n    vec2 gPos = vec2(0.5,  0.5) + thetaVec * gMod;\n    vec2 bPos = vec2(0.5,  0.5) + thetaVec * bMod;\n    \n    float red = texture(iChannel0, rPos).r;\n    float green = texture(iChannel0, gPos).g;\n    float blue = texture(iChannel0, bPos).b;\n    \n    vec3 col = vec3(red, green, blue);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//SEED simply changes the random locations and sizes of the boxes, you can change this\n//#define SEED 0.02\n//NUM is the number of rectangles\n#define NUM 30\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float SEED = floor(iTime*2.0)/200.0;\n\n    vec2 uv = fragCoord/iResolution.xy * 2.;\n    \n    vec3 col = vec3(0.0);\n    \n    for(int i = 0; i < NUM; i++) {\n        //x1 - first x coordinate of corner rectangle\n        //y1 - first y coordinate of corner rectangle\n        //x2 - second x coordinate of corner of rectangle\n        //y2 - second y coordinate of corner of rectangle\n        \n        float preX = rand(float(i)+SEED);\n        float x1 = exp(-abs((preX-0.5)*6.0))+0.3;\n        float x2 = x1 + rand(float(i)+0.26545+SEED)*.4;\n        float y1 = 0.;\n        float y2 = y1 + rand(float(i)+0.3754654+SEED)*0.1*(pow(-abs(x1-0.75)+2.0, 5.0));\n        \n        //if the pixel is inside the rectangle, set the color to a purpleish color that fades as we loop through the boxes \n        if (uv.x > x1 && uv.x < x2 && uv.y > y1 && uv.y < y2) {\n            //col = mix(vec3(0.9, 0.3, 0.9) * exp(-float(i)/10.);\n            col = mix(vec3(0.6, 0.2, 0.65), vec3(0.9, 0.3, 0.9), float(i)/float(NUM)) * exp(-float(i)/20.0);\n            break;\n        }\n    }\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float SEED = floor(iTime*2.0)/200.0;\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 inColor = texture(iChannel0, uv).rgb;\n    \n    vec2 muv = vec2(fragCoord.x, floor(fragCoord.y/10.0)*10.0+floor(fragCoord.x/10.0)+60.0*rand(SEED+floor(20.0*rand(SEED+floor(fragCoord.y/5.0))+fragCoord.x/10.0))) / iResolution.xy;\n    vec3 color = vec3(1.0-muv.y, 0.2-muv.y/3.0, 0.0);\n    color = inColor / 1.4+ color;\n    color *= -pow(length(uv-vec2(0.5, 0.5)), 6.0) * 5.0 + 1.0;\n    fragColor = vec4(color, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}