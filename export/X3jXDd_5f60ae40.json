{"ver":"0.1","info":{"id":"X3jXDd","date":"1711240965","viewed":87,"name":"Cellular Music Visualizer","username":"berelium","description":"Simple music vis. Use Fullscreen for best effect!!","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["grid","music","distance","cells","dist","divisions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Some tracks I like with it:\n// https://soundcloud.com/louisthechild/fire-1  (current)\n// https://soundcloud.com/electricmantis/alina-baraz-ft-khalid-electric-electric-mantis-remix\n// https://soundcloud.com/subtronics/subtronics-scream-saver\n// For some reason Shadertoy's soundcloud API isnt working, so i selected one of the pregiven MP3s for now.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = !ITERATIVE && !POLAR ? fragCoord.xx / iResolution.xx\n                                   : fragCoord.xy / iResolution.xy;\n    if(!BLUR || !POLAR || ITERATIVE) {\n        fragColor = textureLod(iChannel0, uv, 0.);\n        return;\n    }\n\n    // GAUSSIAN BLUR SETTINGS {{{ (Credit to @existical for the blur)\n    float Directions = 16.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)\n    float Quality = 8.0; // BLUR QUALITY (Default 4.0 - More is better but slower)\n    float Size = 2.; // BLUR SIZE (Radius)\n    // GAUSSIAN BLUR SETTINGS }}}\n   \n    vec2 Radius = Size / iResolution.xy;\n    \n    vec3 col = textureLod(iChannel0, uv, 0.).rgb;\n    for( float d=0.0; d < TAU; d += TAU/Directions)\n    {\n\t\tfor(float i = 1.0/Quality; i <= 1.0; i += 1.0/Quality)\n        {\n\t\t\tcol += textureLod( iChannel0, uv+vec2(cos(d),sin(d))*Radius*i, 0.).rgb;\t\t\n        }\n    }\n    col /= Quality * Directions - 15.0;\n    \n    \n    if(TONEMAP) col = (col*(2.51*col+0.03))/(col*(2.43*col+0.59)+0.14);\n    col = pow(col, vec3(1.0 / GAMMA));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Note the iterative version works better with slower paced music, especially classical piano\n\n// Global Settings\nconst bool ITERATIVE = false; // Whether to use iterative (loop) approach or a distance based approach\nconst bool INVERT    = false; // Invert (high hz in center, low hz between)\nconst bool TONEMAP   = true; // ACESFilm toggle\nconst float GAMMA    = 2.2; // Gamma correction\nconst float CH_RES   = 512.; // Resolution to read from the music channel\n\n// Non-Iterative Settings\nconst bool POLAR   = true; // Whether to use polar or linear view\nconst bool REPEAT  = true; // Repeat pattern infinitely\nconst bool REMAP   = true; // Make rings near the center bigger (may result in interference patterns)\nconst bool BLUR    = true; // Gaussian blur (only needed with POLAR as true)\n\n// Iterative Settings\nconst bool ANIMATE  = true; // Add a slight rotation with time\n\n// Defines\n#define TAU 6.28318530718\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( TAU * (c*t+d) );\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","previewfilepath":"/media/ap/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float getFreq( float hz ) {\n    return texelFetch(iChannel0, ivec2(hz,0), 0).x;\n}\n\nvec3 palette( in float t ) {\n    //vec3 a = vec3(0.878,0.188,0.078); vec3 b = vec3(0.958,0.848,1.228); vec3 c = vec3(-0.662,0.558,0.768); vec3 d = vec3(2.538,2.448,0.638); // Thermal \n    vec3 a = vec3(0.878,0.168,0.078); vec3 b = vec3(0.958,0.848,1.228); vec3 c = vec3(-0.662,0.558,0.768); vec3 d = vec3(1.648,0.428,-0.424); // Thermal Deep\n    //vec3 a = vec3(0.000,0.168,0.078); vec3 b = vec3(0.000,0.908,1.708); vec3 c = vec3(-0.662,0.448,0.398); vec3 d = vec3(0.747,-0.473,-1.325); // blue\n    return pal(t, a, b, c, d);\n}\n\nfloat layer( in vec2 p, in float r ) {\n    return 1. / (length(p) - r);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float scale = ITERATIVE ? 600. : CH_RES * 3.75;\n    vec2  R = iResolution.xy,\n          I = round( scale * (fragCoord - 0.5*R ) / R.x );\n\n    vec3 col = vec3(0), c;\n    float f = 0.0;\n    \n    float intensity = 3.0;\n    \n    if(!ITERATIVE) {\n        float id = length(I);  \n        if(REPEAT) id = mod(id, CH_RES);\n        if(REMAP)  id = id * id / CH_RES;\n        \n        f = getFreq(INVERT ? CH_RES - id : id) ;\n        \n        //c = vec3(f, f*f, f*f*f) * f;\n        c = palette(f) * f;\n\n        col += pow(f, intensity + 1.) * sqrt(f) * c;\n        //col += mix(vec3(1,0,0), vec3(0,0,1), s);\n    } else {\n        float t = ANIMATE ? iTime * 0.5e-3\n                      :  0.0;\n        for(float i = CH_RES; i > 0.; i--) {\n            f = getFreq(INVERT ? CH_RES - i : i) ;\n          \n            c = vec3(f, f*f, f*f*f);\n            //c = palette(f) * f;\n            \n            //exp(f-0.2);\n            //pow(f*2., intensity);\n            //log(f+0.48)+0.65;\n            col += layer(I, i/(3. + t)) * pow(sqrt(f), 2.) * intensity * c;\n        }\n        \n        col /= CH_RES;\n    }\n    \n    if(!BLUR || !POLAR || ITERATIVE) { \n        if(TONEMAP) col = (col*(2.51*col+0.03))/(col*(2.43*col+0.59)+0.14);\n        col = pow(col, vec3(1.0 / GAMMA));\n    }\n        \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}