{"ver":"0.1","info":{"id":"MfX3RH","date":"1712495999","viewed":177,"name":"7 Segment Time Display","username":"Kamoshika","description":"I'd like to improve some more.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["time","clock","number","7segment","segment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 7セグの数字N（0～9）\nfloat sevenSegNum(vec2 p, int N) {\n    const vec2 segScale = vec2(0.18, 0.45); // セグメントの大きさ\n    const float a = sqrt(2.) * 0.5;\n    int char = int[](0xEE, 0xA0, 0xD6, 0xF4, 0xB8, 0x7C, 0x7E, 0xE0, 0xFE, 0xFC)[N];\n    \n    p.x += a * 3.;\n    p = vec2(p.x - p.y, p.x + p.y) * a; // pを反時計回りにPI/4だけ回転\n    ivec2 i = ivec2(floor(p));\n    int shift = i.x + 3 * i.y;\n    int musk = 1 << shift;\n    bool on = (char & musk) > 0;\n    on = on && (0 <= i.x) && (i.x <= 2);\n    \n    p = fract(p) - 0.5;\n    p.y *= 1. - float((0xAB & musk) > 0) * 2.;\n    \n    float d = abs(p.x - p.y) * a - segScale.x;\n    p = abs(p);\n    d = max(d, max(p.x, p.y) - segScale.y);\n    return smoothstep(.05, 0., d) * float(on);\n}\n\n// タイマー\nvec3 colTimer(vec2 p, int[8] timeDigit, vec2 size, vec2 pos) {\n    const float interval = 0.5;\n    const float tilt = 0.1;\n    const float pointSize = 0.08;\n    vec3 col = vec3(0);\n    \n    p -= pos;\n    p /= size;\n    \n    // 上下の領域は描画しない\n    if(abs(p.y) > sqrt(2.) * 0.75) {\n        return vec3(0);\n    }\n    \n    vec2 q = p;\n    q.x += 4. + interval * 1.5 - q.y * tilt;\n    \n    bool drawNum = mod(q.x, 2. + interval) < 2.;\n    \n    q.x -= floor(q.x / (2. + interval)) * interval;\n    int digit = 8 - int(floor(q.x));\n    \n    // 左右の領域は描画しない\n    if(digit < 1 || 8 < digit) {\n        return vec3(0);\n    }\n    \n    q.x = fract(q.x) - 0.5;\n    if(drawNum) {\n        return vec3(sevenSegNum(q * 2.3, timeDigit[digit - 1]));\n    }\n    \n    float s = 0.025;\n    // コロン\n    vec2 cpos = vec2(1. + interval * 0.5, 0.45);\n    q = p;\n    q.x += cpos.x - sign(q.y) * tilt * cpos.y;\n    q = abs(q) - cpos;\n    col += smoothstep(s, 0., length(q) - pointSize);\n    \n    // 100分の1秒の点\n    vec2 ppos = vec2(2. + interval, -0.6);\n    q = p - ppos;\n    q.x += sign(p.y) * tilt * ppos.y;\n    col += smoothstep(s, 0., length(q) - pointSize);\n    \n    return col;\n}\n\nint[8] calcTimeDigit(float time) {\n    int hundredths = int(fract(time) * 100. + 0.5) % 100;\n    int seconds = int(time) % 60;\n    int minutes = int(time / 60.) % 60;\n    int hours = int(time / 3600.) % 100;\n    int[8] timeDigit = int[](hundredths % 10,\n                             hundredths / 10,\n                             seconds    % 10,\n                             seconds    / 10,\n                             minutes    % 10,\n                             minutes    / 10,\n                             hours      % 10,\n                             hours      / 10);\n    return timeDigit;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 col = vec3(0);\n    \n    const vec2 size = vec2(0.27, 0.27);\n    const vec2 pos = vec2(0., 0.);\n    int[8] timeDigit = calcTimeDigit(iDate.w);\n    col += colTimer(uv, timeDigit, size, pos);\n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// backup\n\n/*\n//#define iTime (iTime*.1)\n#define AA 3\n\n// 7セグの数字N（0～9）\nfloat sevenSegNum(vec2 p, int N) {\n    const vec2 segScale = vec2(0.28, 0.47); // セグメントの大きさ\n    \n    const float a = sqrt(2.) * 0.5;\n    int char = int[](0xEE, 0xA0, 0xD6, 0xF4, 0xB8, 0x7C, 0x7E, 0xE0, 0xFE, 0xFC)[N];\n    \n    p.x += a * 3.;\n    p = vec2(p.x - p.y, p.x + p.y) * a; // pを反時計回りにPI/4だけ回転\n    ivec2 i = ivec2(floor(p));\n    int shift = i.x + 3 * i.y;\n    int musk = 1 << shift;\n    bool on = (char & musk) > 0;\n    //on = on && (0 <= i.x) && (i.x <= 2) && (0 <= i.y) && (i.y <= 2);\n    on = on && (0 <= i.x) && (i.x <= 2);\n    \n    p = fract(p) - 0.5;\n    //p.y = (0xAB & musk) > 0 ? -p.y : p.y;\n    p.y *= 1. - float((0xAB & musk) > 0) * 2.;\n    \n    float d = abs(p.x - p.y) - segScale.x;\n    p = abs(p);\n    d = max(d, max(p.x, p.y) - segScale.y);\n    \n    return step(d, 0.) * float(on);\n}\n\n// タイマー\nvec3 colTimer(vec2 p, int[8] timeDigit, vec2 size, vec2 pos) {\n    const float interval = 0.5;\n    const float tilt = 0.1;\n    const float pointSize = 0.008;\n    vec3 col = vec3(0);\n    \n    p -= pos;\n    p /= size;\n    \n    // 上下の領域は描画しない\n    if(abs(p.y) > sqrt(2.) * 0.75) {\n        return vec3(0);\n    }\n    \n    vec2 q = p;\n    q.x -= q.y * tilt;\n    q.x += 4. + interval * 1.5;\n    \n    bool drawNum = mod(q.x, 2. + interval) < 2.;\n    \n    q.x -= floor(q.x / (2. + interval)) * interval;\n    \n    int digit = 8 - int(floor(q.x));\n    \n    // 左右の領域は描画しない\n    if(digit < 1 || 8 < digit) {\n        return vec3(0);\n    }\n    \n    q.x = fract(q.x) - 0.5;\n    if(drawNum) {\n        return vec3(sevenSegNum(q * 2.3, timeDigit[digit - 1]));\n    }\n    \n    // コロン\n    vec2 cpos = vec2(1. + interval * 0.5, 0.45);\n    q = p;\n    q.x += cpos.x - sign(q.y) * tilt * cpos.y;\n    q = abs(q) - cpos;\n    col += step(dot(q,q), pointSize);\n    \n    // 100分の1秒の点\n    vec2 ppos = vec2(2. + interval, -0.6);\n    q = p - ppos;\n    q.x += sign(p.y) * tilt * ppos.y;\n    col += step(dot(q,q), pointSize);\n    \n    return col;\n}\n\nint[8] calcTimeDigit(float time) {\n    int hundredths = int(fract(time) * 100. + 0.5) % 100;\n    int seconds = int(time) % 60;\n    int minutes = int(time / 60.) % 60;\n    int hours = int(time / 3600.) % 100;\n    int[8] timeDigit = int[](hundredths % 10,\n                     hundredths / 10,\n                     seconds    % 10,\n                     seconds    / 10,\n                     minutes    % 10,\n                     minutes    / 10,\n                     hours      % 10,\n                     hours      / 10);\n    return timeDigit;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0);\n    const vec2 size = vec2(0.27, 0.27);\n    const vec2 pos = vec2(0., 0.);\n    int[8] timeDigit = calcTimeDigit(iTime);\n    \n    // AA（アンチエイリアシング）\n    for(int m = 0; m < AA; m++) {\n        for(int n = 0; n < AA; n++) {\n            vec2 of = vec2(m, n) / float(AA) - 0.5;\n            vec2 uv = ((fragCoord + of) * 2. - iResolution.xy) / min(iResolution.x, iResolution.y);\n            col += colTimer(uv, timeDigit, size, pos);\n        }\n    }\n    col /= float(AA * AA);\n    \n    fragColor = vec4(col, 1);\n}\n*/","name":"Common","description":"","type":"common"}]}