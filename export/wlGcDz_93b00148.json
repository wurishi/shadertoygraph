{"ver":"0.1","info":{"id":"wlGcDz","date":"1610803046","viewed":216,"name":"When the star aligns","username":"YitingLiu","description":"Experimenting with the change of shapes and learning the distance fields. ","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["distancefield","time","sin","color","pi","atan","cos","shader","distance","smoothstep","tan","radius","change","angles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Circles and distance fields \n// Reference to The book of shader \n// http://thndl.com/square-shaped-shaders.html\n\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 st = fragCoord.xy/iResolution.xy;\n  st.x *= iResolution.x/iResolution.y;\n  vec3 color = vec3(0.844*cos(iTime),0.980*sin(iTime),0.000*tan(iTime));\n  float d = 0.5;\n\n  // Remap the space to -1. to 1.\n  st = st *2.-1.;\n\n    // int change = int(abs(u_time)/1000.);\n  // Number of sides of your shape\n  int N = 5;\n  \n  // Angle and radius from the current pixel\n  float a = atan(st.x,st.y)+PI;\n  float r = TWO_PI/float(N);\n\n  // Shaping function that modulate the distance\n  d = cos(floor(0.5+a/r)*r-a)*length(st)*min(distance(st,vec2(1.000,1.000)*sin(iTime)),distance(st,vec2(-1.,-1.)*sin(iTime)));\n// pct = min(distance(st,vec2(0.4)),distance(st,vec2(0.6)));\n\n  color = vec3((smoothstep(0.208,-0.030,d/2.))*color);\n  // color = vec3(d);\n\n  fragColor = vec4(color,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}