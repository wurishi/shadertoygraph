{"ver":"0.1","info":{"id":"mlcyDr","date":"1715382919","viewed":30,"name":"Linear (box) blur","username":"StarstruckDreaming","description":"Might want to get your eyes checked out. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 blur(vec2 coord, int radius)\n{\n    //Since this averages adjacent pixels, use this function to find the amount of cubes.\n    float t = (1. + 2.*float(radius)) * (1. + 2.*float(radius));\n    \n    vec4 col = vec4(0);\n    \n    // This works because of how the texture is wrapped, I think. \n    for(int i = -radius; i <= radius; i++)\n    {\n        for(int j = -radius; j <= radius; j++)\n        {\n            col += texture(iChannel0, (coord + vec2(i, j)) / iResolution.xy) / t;\n        }\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    \n    // Output to screen\n    fragColor = blur(fragCoord, int(floor(20. * sin(iTime/2.) * sin(iTime/2.))));\n}\n\n","name":"Image","description":"","type":"image"}]}