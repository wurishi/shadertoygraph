{"ver":"0.1","info":{"id":"NsVGD1","date":"1631488791","viewed":223,"name":"Corrugated Sheet Panel","username":"jt","description":"A corrugated sheet panel.\nSee here [url]https://www.shadertoy.com/view/fdK3D1[/url] for 2d SDF.\n","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["corrugatedsheet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/NsVGD1\n// Corrugated Sheet Panel by jt\n// See https://www.shadertoy.com/view/fdK3D1 for the 2d SDF.\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\n\n// Create multiple copies of an object - https://iquilezles.org/articles/distfunctions\nvec2 opRepLim( in vec2 p, in float s, in vec2 lima, in vec2 limb )\n{\n    return p-s*clamp(round(p/s),lima,limb);\n}\n\n// Create infinite copies of an object -  https://iquilezles.org/articles/distfunctions\nvec2 opRep( in vec2 p, in float s )\n{\n    return mod(p+s*0.5,s)-s*0.5;\n}\n\n// https://www.shadertoy.com/view/3lSczz  Parabola Segment - distance 2D\nfloat sdParabola( in vec2 pos, in float wi, in float he )\n{\n    pos.x = abs(pos.x);\n\n    float ik = wi*wi/he;\n    float p = ik*(he-pos.y-0.5*ik)/3.0;\n    float q = pos.x*ik*ik*0.25;\n    float h = q*q - p*p*p;\n\n    float x;\n    if( h>0.0 ) // 1 root\n    {\n        float r = sqrt(h);\n        x = pow(q+r,1.0/3.0) - pow(abs(q-r),1.0/3.0)*sign(r-q);\n    }\n    else        // 3 roots\n    {\n        float r = sqrt(p);\n        x = 2.0*r*cos(acos(q/(p*r))/3.0); // see https://www.shadertoy.com/view/WltSD7 for an implementation of cos(acos(x)/3) without trigonometrics\n    }\n\n    x = min(x,wi);\n\n    return length(pos-vec2(x,he-x*x/ik)) * sign(ik*(pos.y-he)+pos.x*pos.x);\n}\n\nfloat sdWave( vec2 p, float h, float thickness )\n{\n    return 0.5 * (abs(sdParabola( p / 0.5, 1.0, h )) - thickness);\n}\n\nfloat sdPatternHalf(vec2 p, float h, float thickness, float lim )\n{\n    vec2 r = opRepLim(p,2.0,vec2(-lim, 0),vec2(+lim, 0 ));\n    return sdWave( r, h, thickness ) ;\n}\n\nfloat sdCorrugatedSheet2d(vec2 p, float h, float thickness, float lim )\n{\n    float a = sdPatternHalf(p, h, thickness, lim );\n    p.x += 1.0;\n    p.y *= -1.0;\n    float b = sdPatternHalf(p, h, thickness, lim );\n\n    return min(a, b);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdCorrugatedSheet(vec3 p, float h, float thickness, float lim )\n{\n    p *= lim;\n    return 1.0/lim*max(sdCorrugatedSheet2d(p.xy, h, thickness, lim), sdBox(p, vec3(lim, h, lim)));\n}\n\nfloat halfspace(vec3 p)\n{\n    return p.z + 1.2;\n}\n\nfloat map(vec3 p)\n{\n    float lim = 10.0;\n    float h = 0.5;\n    float thickness = 0.1;\n    return min(max(sdCorrugatedSheet(p, h, thickness, lim), sdBox(p, vec3(lim, h, lim))), halfspace(p));\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p )\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) +\n                      k.yyx*map( p + k.yyx*h ) +\n                      k.yxy*map( p + k.yxy*h ) +\n                      k.xxx*map( p + k.xxx*h ) );\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    for(float t = 0.0; t < DIST_MAX;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return DIST_MAX;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvec3 material(vec3 p)\n{\n    return pow(texture(iChannel0, p.xz/2.0).xyz, vec3(2.0));\n    //return vec3(1.0);\n    //vec3 n = normal(p);\n    //return 0.5 + 0.5 * n;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 6.28 * float(iMouse.x) / float(iResolution.x);\n    float my = pi / 2.0 + pi / 2.0 * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x != 0.0) ? mx : 2.0 * pi * fract(iTime * 0.1);\n    my = (iMouse.y != 0.0) ? my : pi / 2.0;\n\n    mat2 R = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 0.0, -3.0 );//vec3(0.0, -10.0 * my, 0.0);\n    //mat2 S = mat2(vec2(0.0, 1.0), vec2(-1.0, 0.0));\n    mat2 S = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz=S*ro.yz;\n    ro.xy = R * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz=S*rd.yz;\n    rd.xy = R * rd.xy;\n\n    float dist = trace(ro, rd);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.4);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX ); // XXX artifacts on cylinder XXX\n    //vec3 color = (n * 0.5 + 0.5);\n    vec3 color = mix(vec3(0.1), material(dst), step(-1.0, dst.z));\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n\n    fragColor = mix(vec4(color, 1.0), vec4(0.0), step(DIST_MAX, dist));\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}