{"ver":"0.1","info":{"id":"dsSyDy","date":"1688108333","viewed":38,"name":"plasmoidy","username":"sm","description":"Effect","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["fx"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 applyVignette(vec2 uv, float vignetteAmount, float vignetteSmoothness)\n{\n    float radius = length(uv - 0.5);\n    float vignette = smoothstep(0.7, vignetteSmoothness, radius);\n    return mix(vec3(1.0), vec3(vignetteAmount), vignette);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Convert pixel coordinates to UV coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n        \n    // Set the final color\n#if 1\n    vec4 color = 0.3*texture(iChannel0, uv) + texture(iChannel1, uv);\n#else\n    vec4 color = 0.3*texture(iChannel0, uv) + texture(iChannel0, uv)*texture(iChannel1, uv);\n#endif\n    fragColor = sqrt((1.0-applyVignette(uv, 0.1, 0.30).xxxx) * smoothstep(vec4(-0.001), vec4(1.55), color));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.y;\n    float time = (50.+iTime + 1.*(iMouse.y + iMouse.x)) * 0.005;\n    float intensity = 1.0;\n    float speed = 1.5;\n    float scale = 3.0;\n    float displacement = 0.0;\n\n    float kaleidoscopeSides = 6.0 + sin(time) * 4.0;\n    float kaleidoscopeAngle = time * 0.2 + sin(time * 0.5) * 2.0;\n    float angle = 2.0 * 3.14159265 / kaleidoscopeSides;\n    vec2 center = vec2(0.5);\n\n    uv -= center;\n\n    float c = cos(kaleidoscopeAngle);\n    float s = sin(kaleidoscopeAngle);\n    mat2 kaleidoscopeMatrix = mat2(c, -s, s, c);\n\n    uv = kaleidoscopeMatrix * uv;\n    uv += center;\n\n    int iterations = 6;\n    float fractalScale = 2.0 + sin(time) * 1.0;\n\n    for (int i = 0; i < iterations; i++) {\n        uv = fractalScale * (uv - center);\n        float rotationAngle = time * (.5*float(i) + 1.);\n        uv = mat2(cos(rotationAngle), -sin(rotationAngle), sin(rotationAngle), cos(rotationAngle)) * uv;\n        uv += center;\n        displacement += sin(uv.x * scale + time * speed) +\n                        sin(uv.y * scale + time * speed) +\n                        sin((uv.x + uv.y) * scale + time * speed);\n    }\n\n    vec3 color = vec3(displacement) / (3.0 * scale) + 0.5;\n    fragColor = vec4(smoothstep(vec3(0.1), vec3(1.5), color * intensity), 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const float BLURSIZE = 32.0;\n\nmat2 rot(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, s, -c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float cnt = 0.;\n    vec4 c = vec4(0.0);\n    for (float x = -BLURSIZE; x <= BLURSIZE; x+= 0.5) {\n        vec2 s = uv + rot(0.785398) * vec2(x, 0.0) / iResolution.xy;\n        c += texture(iChannel0, s);\n        cnt += 1.0;\n    }\n    fragColor = c / cnt;\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const float BLURSIZE = 32.0;\n\nmat2 rot(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, s, -c);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float cnt = 0.;\n    vec4 c = vec4(0.0);\n    for (float x = -BLURSIZE; x <= BLURSIZE; x+= 0.5) {\n        vec2 s = uv + rot(0.785398) * vec2(0.0, x) / iResolution.xy;\n        c += texture(iChannel0, s);\n        cnt += 1.0;\n    }\n    fragColor = c / cnt;\n}\n","name":"Buffer C","description":"","type":"buffer"}]}