{"ver":"0.1","info":{"id":"WlVXWz","date":"1600462591","viewed":108,"name":"Draw a 2D point","username":"GCScholar","description":"Draw a 2D point with radius r using the step function","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["point","step"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Draw a circular point P with a radius of r\n#define drawPoint(P, r) step( length(U - P), r)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalizing coordinates: the center of the screen is (0,0)\n    //  and the coordinates range from -1 to 1 along the y axis\n\tvec2 U = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n    \n    // Coordinates of the points\n    vec2 P1 = vec2(-1.,0.);\n    vec2 P2 = vec2(-.5,0.);\n    vec2 P3 = vec2(0.,0.);\n    vec2 P4 = vec2(.5,0.);\n    vec2 P5 = vec2(1.,0.);\n    \n    // The size of 1 pixel in normalized coordinates\n    float px_size = 2. / iResolution.y;\n    \n    \n    // Draw the points: if  if this pixel belongs to one of the points\n    //  one of the drawPoint will return 1., and we save this info\n    //  getting the maximum value of each call.\n    //  If the point do not belong to any point, \n    //  all the function will return 0.0\n    float f = drawPoint( P1, px_size);\n    f = max(f, drawPoint( P2, px_size * 2.));\n    f = max(f,drawPoint( P3, px_size * 4.));\n    f = max(f,drawPoint( P4, px_size * 8.));\n    f = max(f,drawPoint( P5, px_size * 16.));\n    \n    fragColor = vec4(f,f,f,1.);\n}","name":"Image","description":"","type":"image"}]}