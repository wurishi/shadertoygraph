{"ver":"0.1","info":{"id":"Xsy3DV","date":"1456364173","viewed":127,"name":"Make a square","username":"amdbcg","description":"My goal was to make a square. I succeeded. yay! ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["square"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate ( vec2 vec, float f){\n    // the rotation matrix. \n\tmat2 mrot = mat2( cos(f) ,sin(f), // column 1\n        \t\t\t-sin(f), cos(f));// column 2 \n    \n    return mrot*vec; //Rv\n}\n\nvec3 rotate(vec3 vec, float f){\n\tfloat sin_t  = sin(radians(f));\n    float cos_t  = cos(radians(f));\n    mat4 mrot  = mat4( 1.0, 0.0   ,\t0.0,\t0.0,\n                       0.0, cos_t ,\t-sin_t, 0.0,\n                       0.0, sin_t ,\tcos_t, \t0.0,\n                       0.0, 0.0   ,  0.0, \t1.0);\n    return vec;// NOT WORKING ATM\n\t\n}\nvoid transform(in mat4 mat){\n    mat4 m = mat4(mat[0][0], \tmat[0][1],\tmat[0][2],\tmat[0][3],\n                  mat[1][0],\tmat[1][1],\tmat[1][2],\tmat[1][3],\n                  mat[2][0],\tmat[2][1],\tmat[2][2],\tmat[2][3],\n                  mat[3][0],\tmat[3][1],\tmat[3][2],\tmat[3][3]);\n    //mInv\n                                              \n\n}\nvec2 multiply( vec2 ins, float cs, float sn ) {\n  vec2 result;\n  result.x = ins.x * cs - ins.y * sn;\n  result.y = ins.x * sn + ins.y * cs;\n  return result;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n\tvec2 p = uv - vec2(tan(iTime)*.3+.8,sin(iTime)*.3 + .5);\n    p *= 0.8;\n    vec3 col = vec3 ( .8,0.8,.8);\n    \n    float speed = 7.0;\n   // p = multiply(p, 3.0*cos(iTime*speed), 3.0*sin(iTime*speed));\n    vec2 q = p;\n    p = rotate(p,-iTime*1.50);\n   \n    float r = .1;\n    if(abs(p.y) < r ){\n\t\t col *= smoothstep( .1, .1, abs(p.x));\n             \n    }\n    \n    \n    fragColor = textureProj(iChannel0,vec3(p/length(p),p.x/length(p*uv) ) );       \n    fragColor += vec4(col,1.0);\n    \n}\n\n\n\n//https://en.wikipedia.org/wiki/Rotation_matrix\n//https://en.wikipedia.org/wiki/Gaussian_elimination","name":"Image","description":"","type":"image"}]}