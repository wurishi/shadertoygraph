{"ver":"0.1","info":{"id":"MtjyD1","date":"1508457148","viewed":116,"name":"Infinite Motion","username":"starmole","description":"simulate continuous motion","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["motion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 reflect2d( vec2 a ) {\n\treturn vec2 ( a.y, -a.x );\n}\n\nvec2 perturbation ( vec2 a, float freq, float ampl ) {    \n    return vec2 ( a.x + sin(a.y*freq),\n    \t\t\t  a.y + cos(a.x*freq) ) * ampl;     \n}\n\nvec2 sampledirfield( vec2 uv ) {\n     // just compute a direction vector: this should come from a texture! \n    vec2 p = perturbation(uv,20.0,.4);\n    vec2 r = normalize(uv - .5);\n    vec2 rr = reflect2d(r); \n    return normalize(rr+p);      \n    //return normalize(r+p+rr*10.0);      \n    //return normalize(uv - vec2(.5));  \n    //return normalize(uv);    \n    //return normalize(vec2(uv.x, 0)); \n    \n    //return normalize(texture(iChannel1,uv).xy-.5);      \n}\n\nvec2 multistepsample ( vec2 p, float amount, int n, float f ) {\n    float steps = f * float(n-1); \n    float stepf = fract(steps); \n    int nsteps = int(steps); \n    vec2 pnext = p + sampledirfield(p) * amount; \n    for ( int i=0; i<nsteps; i++ ) {\n        p = pnext;\n        pnext = p + sampledirfield(p) * amount; \n    }\n    return mix ( p, pnext, stepf );     \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float speed = .11;\n    float amount = .0113142;\n    \n    int nstep = 8; \n    amount *= float(nstep+1); \n    \n    float t0 = fract(iTime * speed); \n    float t1 = fract(iTime * speed + .5); \n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n           \n    vec2 dir0 = sampledirfield ( uv ) * amount; \n    \n    vec2 uv0, uv1;\n    if ( nstep == 0 ) {\n    \tuv0 = uv + dir0*t0; \n    \tuv1 = uv + dir0*t1;\n    } else {    \n    \tuv0 = multistepsample ( uv, amount, nstep, t0 );\n    \tuv1 = multistepsample ( uv, amount, nstep, t1 );\n    }\n    \n    vec4 c0 = texture(iChannel0, uv0);\n    vec4 c1 = texture(iChannel0, uv1);\n    \n    float blend = 2.0*t1;     \n    blend = 1.0 - abs(blend - 1.0); //if ( blend > 1.0 ) blend = 2.0 - blend; \n    \n   // blend = smoothstep(0.0, 1.0, blend); \n    \n    vec4 c = mix(c0,c1,blend); \n    \n\tfragColor = c;\n    \n    //fragColor = vec4(normalize(dir0),0,1);\n}","name":"Image","description":"","type":"image"}]}