{"ver":"0.1","info":{"id":"lsBBWy","date":"1502068413","viewed":5666,"name":"Separable circular bokeh","username":"bartwronski","description":"\"Circularly symmetric convolution and lens blur\" by Olli Niemitalo http://yehar.com/blog/?p=1495 (thanks to Kleber Garcia's presentation \"Circular Separable Convolution Depth of Field\" at Siggraph). More: http://bartwronski.com/2017/08/06/separable-bokeh/","likes":28,"published":3,"flags":32,"usePreview":1,"tags":["blur","bokeh","depthoffield","gaussian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define COMPARE \n\nfloat complexMag(in vec2 c)\n{\n    return sqrt(c.x * c.x + c.y * c.y);\n}\n\nvec2 complexMultiply(in vec2 a, in vec2 b)\n{\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + b.x * a.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 pixelUVSize = vec2(1.0, 1.0) / iChannelResolution[0].xy;\n    vec2 step = vec2(0.0, texture(iChannel0, pixelUVSize * 0.5).g);\n    \n    vec4 rgba = vec4(0.0);\n    \n    for(int i = -10; i <= 10; ++i)\n    {\n        vec4 samp = texture(iChannel1, uv + float(i) * step);\n        vec4 samp2 = texture(iChannel2, uv + float(i) * step);\n        vec4 samp3 = texture(iChannel3, uv + float(i) * step);\n        vec4 sampKernel = texture(iChannel0, pixelUVSize * 0.5 + pixelUVSize * vec2(i+50,0));\n        vec4 sampKernelW = texture(iChannel0, pixelUVSize * 0.5 + pixelUVSize * vec2(i+50,1));\n\n        rgba.r += complexMultiply(samp.xy, sampKernel.xy).x;\n        rgba.r += complexMultiply(samp.zw, sampKernel.zw).x;\n\n        rgba.g += complexMultiply(samp2.xy, sampKernel.xy).x;\n        rgba.g += complexMultiply(samp2.zw, sampKernel.zw).x;\n\n        rgba.b += complexMultiply(samp3.xy, sampKernel.xy).x;\n        rgba.b += complexMultiply(samp3.zw, sampKernel.zw).x;\n        \n        rgba.a += sampKernelW.r;\n    }\n    \n    float complexNormalization = 1.0 / rgba.a;\n\n    vec4 outColor = rgba * complexNormalization; \n\n#ifdef COMPARE    \n    ivec2 coordI = ivec2(fragCoord.xy + iTime*30.0) / 128;\n    \n    if ((coordI.x & 0x1) == (coordI.y & 0x1))\n    {\n        vec4 samp = texture(iChannel0, uv);\n        outColor = samp;\n    }\n#endif    \n    \n    fragColor = outColor;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SAMP_BIAS 50.0\n#define SAMP_DIVIDE 5.0\n\n#define C0_F0 1.624835\n#define C0_EXP_MULT0 -0.862325\n#define C0_REAL0 1.1793828124\n#define C0_IM0 -0.7895320249\n\n#define C1_F0 5.268909\n#define C1_EXP_MULT0 -0.886528\n#define C1_REAL0 -0.7406246191\n#define C1_IM0 -0.3704940302\n\n#define C1_F1 1.558213\n#define C1_EXP_MULT1 -1.960518\n#define C1_REAL1 1.5973700402\n#define C1_IM1 -1.4276936105\n\n\n#define ANIMATE_COMPARE\n#define TWO_COMPONENTS\n\nvec4 complexKernel(in float x)\n{\n\tvec4 complexWeights = vec4((C0_REAL0*cos(x*x*C0_F0) - C0_IM0*sin(x*x*C0_F0)) * exp(C0_EXP_MULT0*x*x),\n\t\t(C0_IM0*cos(x*x*C0_F0) + C0_REAL0*sin(x*x*C0_F0)) * exp(C0_EXP_MULT0*x*x), 0, 0);\n\tvec4 complexWeightsTwo = vec4(\n        (C1_REAL0*cos(x*x*C1_F0) - C1_IM0*sin(x*x*C1_F0))   * exp(C1_EXP_MULT0*x*x),\n\t\t(C1_IM0*cos(x*x*C1_F0)   + C1_REAL0*sin(x*x*C1_F0)) * exp(C1_EXP_MULT0*x*x),\n\t\t(C1_REAL1*cos(x*x*C1_F1) - C1_IM1*sin(x*x*C1_F1))   * exp(C1_EXP_MULT1*x*x),\n\t\t(C1_IM1*cos(x*x*C1_F1)   + C1_REAL1*sin(x*x*C1_F1)) * exp(C1_EXP_MULT1*x*x));\n    vec4 complexWeightsGauss = vec4(exp(-0.8 * x*x), 0, 0, 0);\n#ifdef TWO_COMPONENTS\n    complexWeights = complexWeightsTwo;\n#endif\n    \n#ifdef ANIMATE_COMPARE    \n    return mix(complexWeightsGauss, complexWeights,\n               sin(0.5 * iTime) * sin(0.5 * iTime));\n#else    \n    \n    return complexWeights;\n#endif\n}\n\n\nvec2 complexMultiply(in vec2 a, in vec2 b)\n{\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + b.x * a.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 kernel = complexKernel((fragCoord.x - SAMP_BIAS) / SAMP_DIVIDE);\n\tvec4 outColor = texture(iChannel0, uv);\n    outColor *= outColor * outColor * outColor * 3.0;\n    \n    vec4 kernelAccum = vec4(0.0);\n    for(int i = -10; i <= 10; ++i)\n    {\n        kernelAccum += complexKernel(float(i) / SAMP_DIVIDE);\n    }\n#ifdef ANIMATE_COMPARE      \n    if (uv.x > 0.98)\n        outColor = vec4(1.0 - sin(0.5 * iTime) * sin(0.5 * iTime), \n                        sin(0.5 * iTime) * sin(0.5 * iTime), 0.0, 1.0);\n#endif\n    \n    if (int(fragCoord.y) == 0)\n        outColor = kernel;\n    if (int(fragCoord.y) == 1)\n        outColor = vec4(\n            complexMultiply(kernel.xy, kernelAccum.xy).x + \n            complexMultiply(kernel.zw, kernelAccum.zw).x, 0.0, 0.0, 0.0);    \n    if (int(fragCoord.y) == 0 && int(fragCoord.x) == 0)\n        outColor = vec4(1.0 / iChannelResolution[0].xy, 0.0, 0.0);\n    \n    fragColor = outColor;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 complexMultiply(in vec2 a, in vec2 b)\n{\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + b.x * a.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 pixelUVSize = vec2(1.0, 1.0) / iChannelResolution[0].xy;\n    vec2 step = vec2(texture(iChannel0, pixelUVSize * 0.5).r, 0.0);\n    \n    vec4 complexR = vec4(0.0);\n    \n    for(int i = -10; i <= 10; ++i)\n    {\n        vec4 samp = texture(iChannel0, uv + float(i) * step);\n        vec4 kernel = texture(iChannel0, pixelUVSize * 0.5 + pixelUVSize * vec2(i+50,0));\n        complexR.xy += complexMultiply(vec2(samp.r * samp.a, 0.0), kernel.xy);\n        complexR.zw += complexMultiply(vec2(samp.r * samp.a, 0.0), kernel.zw);\n    }\n    \n\tfragColor = complexR;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec2 complexMultiply(in vec2 a, in vec2 b)\n{\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + b.x * a.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 pixelUVSize = vec2(1.0, 1.0) / iChannelResolution[0].xy;\n    vec2 step = vec2(texture(iChannel0, pixelUVSize * 0.5).r, 0.0);\n    \n    vec4 complexG = vec4(0.0);\n    \n    for(int i = -10; i <= 10; ++i)\n    {\n        vec4 samp = texture(iChannel0, uv + float(i) * step);\n        vec4 kernel = texture(iChannel0, pixelUVSize * 0.5 + pixelUVSize * vec2(i+50,0));\n        complexG.xy += complexMultiply(vec2(samp.g * samp.a, 0.0), kernel.xy);\n        complexG.zw += complexMultiply(vec2(samp.g * samp.a, 0.0), kernel.zw);\n    }\n    \n\tfragColor = complexG;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"vec2 complexMultiply(in vec2 a, in vec2 b)\n{\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + b.x * a.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 pixelUVSize = vec2(1.0, 1.0) / iChannelResolution[0].xy;\n    vec2 step = vec2(texture(iChannel0, pixelUVSize * 0.5).r, 0.0);\n    \n    vec4 complexB = vec4(0.0);\n    \n    for(int i = -10; i <= 10; ++i)\n    {\n        vec4 samp = texture(iChannel0, uv + float(i) * step);\n        vec4 kernel = texture(iChannel0, pixelUVSize * 0.5 + pixelUVSize * vec2(i+50,0));\n        complexB.xy += complexMultiply(vec2(samp.b * samp.a, 0.0), kernel.xy);\n        complexB.zw += complexMultiply(vec2(samp.b * samp.a, 0.0), kernel.zw);\n    }\n    \n\tfragColor = complexB;\n}","name":"Buffer D","description":"","type":"buffer"}]}