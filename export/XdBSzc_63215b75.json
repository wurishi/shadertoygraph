{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define TAU 6.283185307179586\n\nvec2 rect2polar(vec2 p) {\n    return vec2(atan(p.y, p.x), length(p));\n}\n\nvec2 polar2rect(vec2 p) {\n    return vec2(cos(p.x) * p.y, sin(p.x) * p.y);\n}\n\n#define NO_MATERIAL 0\n#define WHITE_MATERIAL 1\n#define RED_MATERIAL 2\n#define BLACK_MATERIAL 3\n#define LIGHT_MATERIAL 4\n#define GROUND_MATERIAL 5\n\nstruct ObjectDistance {\n    float distance;\n    int material;\n};\n\nObjectDistance distanceUnion(ObjectDistance a, ObjectDistance b) {\n    if(a.distance < b.distance) {\n        return a;\n    } else {\n     \treturn b;\n    }\n}\n\nObjectDistance distanceDifference(ObjectDistance b, ObjectDistance a) {\n    if(-a.distance > b.distance) {\n        a.distance *= -1.0;\n        return a;\n    } else {\n        return b;\n    }        \n}\n\nObjectDistance sphere(float radius, int material, vec3 p) {\n  \treturn ObjectDistance(length(p) - radius, material);\n}\n\nObjectDistance box(vec3 b, int material, vec3 p)\n{\n  vec3 d = abs(p) - b;\n  return ObjectDistance(\n      min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0)),\n      material\n  );\n}\n\nObjectDistance cylinder(vec2 h, int material, vec3 p)\n{\n  vec2 d = abs(vec2(length(p.xy), p.z)) - h;\n  return ObjectDistance(\n      min(max(d.x, d.y), 0.0) + length(max(d, 0.0)),\n      material\n  );\n}\n\nObjectDistance ground(float y, int material, vec3 p) {\n     return ObjectDistance(p.y - y, material);   \n}\n\nObjectDistance halve(float buttonRadius, float spacing, int material, vec3 p) {\n    float overshoot = 0.1;\n    ObjectDistance od;\n    \n    od = sphere(1.0, material, p);\n    \n    od = distanceDifference(\n        od,\n        box(\n            vec3(1.0 + overshoot, 0.5 + overshoot, 1.0 + overshoot),\n            material,\n            p + vec3(0.0, 0.5 + overshoot - spacing/2.0, 0.0)\n        )\n    );\n    \n    od = distanceDifference(\n        od,\n        cylinder(vec2(buttonRadius + spacing, 0.5), material, p + vec3(0.0, 0.0, 0.6))\n    );\n    \n    return od;\n}\n\nObjectDistance button(float radius, float innerRadius, int material, int innerMaterial, vec3 p) {\n    ObjectDistance od;\n    \n    od = cylinder(vec2(radius, 0.5), material, p + vec3(0.0, 0.0, 0.5));\n    \n    od = distanceUnion(\n    \tod,\n        cylinder(vec2(innerRadius, 0.5), innerMaterial, p + vec3(0.0, 0.0, 0.52))\n    );\n    \n    return od;\n}\n\nObjectDistance pokeball(vec3 p) {\n    float buttonRadius = 0.13;\n    float buttonInnerRadius = 0.65 * buttonRadius;\n    float spacing = 0.08;\n    \n    ObjectDistance od;\n    \n    od = halve(buttonRadius, spacing, RED_MATERIAL, p);\n    \n    od = distanceUnion(\n        od,\n        halve(buttonRadius, spacing, WHITE_MATERIAL, p * vec3(1.0, -1.0, 1.0))\n    );\n    \n    od = distanceUnion(\n        od,\n        sphere(0.97, BLACK_MATERIAL, p)\n    );\n    \n    od = distanceUnion(\n        od,\n        button(buttonRadius, buttonInnerRadius, WHITE_MATERIAL, LIGHT_MATERIAL, p)\n    );\n    \n    return od;\n}\n\nvec3 wobble(vec3 p) {\n    float angle = pow(sin(2.0 * iTime), 3.0) * 0.1 * sin(15.0 * iTime);\n    vec2 xy = polar2rect(rect2polar(p.xy) + vec2(angle, 0.0));\n    p.xy = xy;\n    float translation = angle;\n    p.x -= translation;\n    return p;\n}\n\nObjectDistance sceneDistance(vec3 p) {    \n\tObjectDistance od;\n    \n    od = ground(-1.0, GROUND_MATERIAL, p);\n    \n    od = distanceUnion(\n        od,\n        pokeball(wobble(p))\n    );\n            \n    return od;\n}\n\n#define THRESHOLD 0.001\n#define SHADOW_THRESHOLD 0.01\n#define MAX_ITERATIONS 256\n#define MAX_SHADOW_ITERATIONS 256\n#define NORMAL_DELTA 0.001\n#define MAX_DEPTH 60.0\n\nstruct MarchResult {\n    float length;\n    float distance;\n    int material;\n    int iterations;\n};\n    \nMarchResult march(vec3 origin, vec3 direction) {\n    MarchResult result = MarchResult(0.0, 0.0, NO_MATERIAL, 0);\n    for(int i = 0; i < MAX_ITERATIONS; i++) {\n\t    ObjectDistance sd = sceneDistance(origin + direction * result.length);\n        result.distance = sd.distance;\n        result.material = sd.material;\n        result.iterations++;\n        \n        if(result.distance < THRESHOLD || result.length > MAX_DEPTH) {\n            break;\n        }\n        \n        result.length += result.distance * (1.0 - 0.5*THRESHOLD);\n    }\n\n    if(result.length > MAX_DEPTH) {\n        result.material = NO_MATERIAL;\n    }\n    \n    return result;\n}\n\n// this is wrong, but looks very cool!\nfloat marchGlitchyShadow(vec3 lightPos, vec3 surfacePos, float k) {\n    vec3 origin = lightPos;\n    vec3 target = surfacePos;\n    \n    vec3 travel = target - origin;\n    vec3 forward = normalize(travel);\n    float maxLength = length(travel);\n    \n    float length = 0.0;\n    float distance = 0.0;\n    int iterations = 0;\n    for(int i = 0; i < MAX_SHADOW_ITERATIONS; i++) {\n        if(length >= maxLength) {\n         \treturn 1.0;   \n        }\n        \n        ObjectDistance od = sceneDistance(origin + forward * length);\n        distance = od.distance;\n        \n        if(abs(distance) < THRESHOLD) {\n            return 0.0;\n        }\n        \n        length += distance;\n        iterations++;\n    }\n\n    return 1.0;\n}\n\nfloat marchShadow(vec3 lightPos, vec3 surfacePos, float k) {\n    vec3 origin = lightPos;\n    vec3 target = surfacePos;\n    \n    vec3 travel = target - origin;\n    vec3 forward = normalize(travel);\n    float maxLength = length(travel) * 0.9;\n    \n    float length = 0.0;\n    float distance = 0.0;\n    float light = 1.0;\n    int iterations = 0;\n    for(int i = 0; i < MAX_SHADOW_ITERATIONS; i++) {\n        if(length >= maxLength - SHADOW_THRESHOLD) {\n         \tbreak;\n        }\n        \n        ObjectDistance od = sceneDistance(origin + forward * length);\n        distance = od.distance;\n        \n        if(distance < SHADOW_THRESHOLD) {\n            return 0.0;\n        }\n        \n        light = min(light, k * distance / length);\n        length += distance * 0.999;\n        \n        iterations++;\n    }\n\n    //return 1.0 - float(iterations) / float(MAX_SHADOW_ITERATIONS);\n    return light;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 pxPos = 2.0*(0.5 * iResolution.xy - fragCoord.xy) / iResolution.xx;\n    \n    vec2 camXZ = polar2rect(vec2(-TAU/4.0 + 0.3 * iTime, 3.0));\n  \tvec3 camPos = vec3(camXZ.x, 1.0 + 0.5 * sin(1.0 * iTime), camXZ.y);\n    \n    vec3 camLook = vec3(0.0, 0.0, 0.0);\n    \n    vec3 camUp = vec3(0.0, 1.0, 0.0); \n    vec3 camForward = normalize(camLook - camPos);\n    vec3 camLeft = normalize(cross(camUp, camForward));\n    vec3 camUp2 = cross(camForward, camLeft);\n    vec3 camPosForward = camPos + camForward;\n    vec3 screenPos = camPosForward - pxPos.x * camLeft - pxPos.y * camUp2;\n    vec3 rayForward = normalize(screenPos - camPos);\n    \n    MarchResult mr = march(camPos, rayForward);\n    \t\n    vec3 rayEnd = camPos + mr.length * rayForward;\n    vec3 color;\n    vec3 bgColor = vec3(0.1);\n    \n    /*if(mr.distance < 0.0) {\n       \tcolor = vec3(0.0, 1.0, 1.0);\n    } else */if(mr.material == NO_MATERIAL) {\n        color = bgColor;\n    } else {\n        vec3 baseColor;\n        \n        if(mr.material == WHITE_MATERIAL) {\n            baseColor = vec3(1.0);\n        } else if(mr.material == RED_MATERIAL) {\n            baseColor = vec3(1.0, 0.0, 0.0);\n        } else if(mr.material == BLACK_MATERIAL) {\n            baseColor = vec3(0.2);\n        } else if(mr.material == LIGHT_MATERIAL) {\n         \tbaseColor = vec3(1.0, 0.7, 0.7);   \n        } else if(mr.material == GROUND_MATERIAL) {\n            float tile = mod(floor(rayEnd.x) + floor(rayEnd.z), 2.0);\n            \n            if(tile < 1.0) {\n\t         \tbaseColor = vec3(0.2);\n            } else {\n                baseColor = vec3(0.3);\n            }\n        }\n        \n        float deltaTwice = 2.0 * NORMAL_DELTA;\n        vec3 dx = vec3(NORMAL_DELTA, 0.0, 0.0);\n        vec3 dy = vec3(0.0, NORMAL_DELTA, 0.0);\n        vec3 dz = vec3(0.0, 0.0, NORMAL_DELTA);\n        vec3 normal = normalize(vec3(\n            (sceneDistance(rayEnd + dx).distance - sceneDistance(rayEnd - dx).distance) / deltaTwice,\n            (sceneDistance(rayEnd + dy).distance - sceneDistance(rayEnd - dy).distance) / deltaTwice,\n            (sceneDistance(rayEnd + dz).distance - sceneDistance(rayEnd - dz).distance) / deltaTwice\n        ));\n\n       \tvec2 lightXZ = polar2rect(vec2(-0.5 * iTime, 3.0));\n        vec3 lightPos = vec3(lightXZ.x, 5.0, lightXZ.y);\n\n        float ambient = 0.2;\n        float diffuse = max(0.0, dot(normal, normalize(lightPos - rayEnd)));\n        float specular = pow(diffuse, 16.0);\n\t\tfloat shadow = 1.0;\n        shadow = marchShadow(lightPos, rayEnd, 32.0);\n        //shadow = marchGlitchyShadow(lightPos, rayEnd, 8.0);\n\n        color = ((ambient + shadow * diffuse) * baseColor + specular) * (1.0 - mr.length * 0.01);\n        //color = vec3(rayIterations / MAX_TRACE_ITERATIONS, 0.0, shadow);\n\n    }\n        \n\t//color = mix(vec3(0.0), vec3(0.0, 1.0, 0.0), float(mr.iterations)/float(MAX_ITERATIONS));\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdBSzc","date":"1414233719","viewed":165,"name":"catch?","username":"ahihi","description":"THE SUSPENSE IS UNBEARABLE\n\ntodo: make the button light into an actual light source","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching"],"hasliked":0,"parentid":"","parentname":""}}