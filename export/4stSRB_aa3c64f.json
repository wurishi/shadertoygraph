{"ver":"0.1","info":{"id":"4stSRB","date":"1496391889","viewed":506,"name":"Impossible Triangle","username":"rodolphito","description":"The impossible triangle. Based off of IQ's amazing work, using his lighting, and basically everything. Just a cool little trick I thought of to make an impossible triangle. Update: added camera rotation, still have to solve box lengths.","likes":26,"published":1,"flags":0,"usePreview":0,"tags":["triangle","illusion","escher","impossible"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\n//----------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n//----------------------------------------------------------------------\n\nvec2 map( in vec3 pos, float k, vec3 f)\n{\n    vec2 res = vec2(sdPlane(pos-vec3(0.0,-0.0,0.0)), 1.0);\n   \tres = opU(res,vec2(udRoundBox(pos+f*k, vec3(0.05,0.55,0.05), 0.05), 41.0));\n    \n    res = opU(res,vec2(udRoundBox(pos-f+vec3(0.0,0.5,0.0), vec3(0.05,0.05,1.55), 0.05), 41.0));\n    res = opU(res,vec2(udRoundBox(pos+vec3(0.0,-0.5,0.0), vec3(1.55,0.05,0.05), 0.05), 41.0));\n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd, float k, vec3 f )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n    \n\tfloat precis = 0.002;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<50; i++ )\n    {\n\t    vec2 res = map( ro+rd*t, k, f );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax, float k, vec3 f )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t, k, f ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos, float k, vec3 f )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy,k,f).x - map(pos-eps.xyy,k,f).x,\n\t    map(pos+eps.yxy,k,f).x - map(pos-eps.yxy,k,f).x,\n\t    map(pos+eps.yyx,k,f).x - map(pos-eps.yyx,k,f).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor, float k, vec3 f )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos,k,f ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 render( in vec3 ro, in vec3 rd, float k, vec3 f )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd,k,f);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos,k,f );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = vec3(0.2,0.2,1.0);\n        if(m<1.5)\n        {\n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = f*vec3(1.0,0.0,0.0);\n        }\n\n        // lighitng        \n        float occ = calcAO( pos, nor,k,f );\n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( pos, lig, 0.02, 2.5,k,f );\n        dom *= softshadow( pos, ref, 0.02, 2.5,k,f );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.20*dif*vec3(1.00,0.85,0.55);\n\t\tlin += 1.20*spe*vec3(1.00,0.85,0.55)*dif;\n        lin += 0.20*amb*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*dom*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.002*t*t ) );\n\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\nvec3 r(vec3 v, vec2 r)\n{\n\tvec4 t = sin(vec4(r, r + 1.5707963268));\n    vec4 g = vec4(v, dot(v.yz, t.yw));\n    return vec3(g.x * t.z - g.w * t.x,\n                g.y * t.w - g.z * t.y,\n                g.x * t.x + g.w * t.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat TMIN = 6.0 / sqrt(3.0);\n\tvec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.yy;\n    vec2 sd = iMouse.xy / iResolution.xy - 0.5;\n    sd.y = 0.0;\n    vec3 dd = vec3(0.3,0.3,0.3);\n    vec3 rd = normalize(vec3(-1.0,-1.0,-1.0));\n    rd = r(rd, sd);\n    vec3 ro = vec3(TMIN + uv.x - uv.y,TMIN + uv.y,TMIN - uv.x - uv.y);\n    ro = dd+r(ro-dd,sd);\n    vec3 col = render( ro, rd, smoothstep(-0.1,0.1,uv.y)-1.0, r(vec3(1.0),sd) );\n\tcol = pow( col, vec3(0.4545) );\n    fragColor=vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}