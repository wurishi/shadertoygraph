{"ver":"0.1","info":{"id":"DdlXDS","date":"1669493286","viewed":207,"name":"Irregular City Block Layout","username":"jt","description":"Irregular City Block Layout based on [url=https://www.shadertoy.com/view/ftcfWf]Asymmetric Blocks SDF[/url].\n","likes":17,"published":1,"flags":0,"usePreview":1,"tags":["city","blocks","urban","architecture","construction","building","layout","irregular","asymmetric","development","planning"],"hasliked":0,"parentid":"slcfWX","parentname":"Asymmetric Cubicles"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/DdlXDS Irregular City Block Layout by jt\n// based on https://www.shadertoy.com/view/slcfWX Asymmetric Cubicles\n// based on https://www.shadertoy.com/view/ftcfWf Asymmetric Blocks SDF\n\n// Thanks to Shane for the idea explained in https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks :)\n\n// tags: city, blocks, urban, architecture, construction, building, layout, irregular, asymmetric, development, planning\n\n// The MIT License\n// Copyright (c) 2022 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nfloat hash(uint x)\n{\n    return float(triple32(x)) / float(0xffffffffU);\n}\n\nfloat hash(uvec2 v)\n{\n    //return hash(v.x + triple32(v.y));\n    return mix(0.2, 0.8, hash(v.x + triple32(v.y)));\n}\n\nfloat hash(ivec2 v)\n{\n    return hash(uvec2(v));\n}\n\nfloat box( in vec2 p, in vec2 b ) // https://iquilezles.org/articles/distfunctions2d/ by iq\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat box2(vec2 p, vec2 p0, vec2 p1, float r) // min-max box\n{\n    return box(p-(p1+p0)/2.0, (p1-p0)/2.0-r)-r;\n}\n\n// Idea from https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane.\n// Checkerboard tiling of alternating (horizontal vs. vertical) (double-T-) crossings.\n// Implementation my own since I prefer writing code to reading code ;-)\nfloat blocks_original(vec2 p, float r)\n{\n    vec2 q = fract(p); // local coordinates inside tile\n    p = floor(p); // global coordinates of tile\n    ivec2 tile = ivec2(p);\n    //bool flip = (tile.x % 2) == (tile.y % 2); // XXX breaks on windows XXX\n    bool flip = (tile.x & 1) == (tile.y & 1);\n    if(flip) // vertical line goes through\n    {\n        float x = hash(tile); // x-coordinate of vertical line through this tile\n        float xsw = hash(tile+ivec2(-1,-1)); // x-coordinate of vertical line through south-west tile\n        float xnw = hash(tile+ivec2(-1,+1)); // x-coordinate of vertical line through north-west tile\n        float xse = hash(tile+ivec2(+1,-1)); // x-coordinate of vertical line through south-east tile\n        float xne = hash(tile+ivec2(+1,+1)); // x-coordinate of vertical line through north-east tile\n        float yw = hash(tile+ivec2(-1, 0)); // y-coordinate of horizontal line through west tile\n        float ye = hash(tile+ivec2(+1, 0)); // y-coordinate of horizontal line through east tile\n        float ys = hash(tile+ivec2( 0,-1)); // y-coordinate of horizontal line through south tile\n        float yn = hash(tile+ivec2( 0,+1)); // y-coordinate of horizontal line through north tile\n\n        //return box2(q, vec2(xsw-1.0, ys-1.0), vec2(x, yw)); // south-west\n        //return box2(q, vec2(xnw-1.0, yw), vec2(x, yn+1.0)); // north-west\n        //return box2(q, vec2(x, ys-1.0), vec2(xse+1.0, ye)); // south-east\n        //return box2(q, vec2(x, ye), vec2(xse+1.0, yn+1.0)); // north-east\n\n        return\n            min\n            (\n                min\n                (\n                    box2(q, vec2(xsw-1.0, ys-1.0), vec2(x, yw), r), // south-west\n                    box2(q, vec2(xnw-1.0, yw), vec2(x, yn+1.0), r ) // north-west\n                ),\n                min\n                (\n                    box2(q, vec2(x, ys-1.0), vec2(xse+1.0, ye), r ), // south-east\n                    box2(q, vec2(x, ye), vec2(xne+1.0, yn+1.0), r ) // north-east\n                )\n            );\n    }\n    else // horizontal line goes through\n    {\n        float y = hash(tile); // x-coordinate of horizontal line through this tile\n        float ysw = hash(tile+ivec2(-1,-1)); // y-coordinate of horizontal line through south-west tile\n        float ynw = hash(tile+ivec2(-1,+1)); // y-coordinate of horizontal line through north-west tile\n        float yse = hash(tile+ivec2(+1,-1)); // y-coordinate of horizontal line through south-east tile\n        float yne = hash(tile+ivec2(+1,+1)); // y-coordinate of horizontal line through north-east tile\n        float xw = hash(tile+ivec2(-1, 0)); // x-coordinate of vertical line through west tile\n        float xe = hash(tile+ivec2(+1, 0)); // x-coordinate of vertical line through east tile\n        float xs = hash(tile+ivec2( 0,-1)); // x-coordinate of vertical line through south tile\n        float xn = hash(tile+ivec2( 0,+1)); // x-coordinate of vertical line through north tile\n\n        //return box2(q, vec2(xw-1.0, ysw-1.0), vec2(xs, y)); // south-west\n        //return box2(q, vec2(xw-1.0, y), vec2(xn, ynw+1.0)); // north-west\n        //return box2(q, vec2(xs, yse-1.0), vec2(xe+1.0, y)); // south-east\n        //return box2(q, vec2(xn, y), vec2(xe+1.0, yne+1.0)); // north-east\n\n        return\n            min\n            (\n                min\n                (\n                    box2(q, vec2(xw-1.0, ysw-1.0), vec2(xs, y), r), // south-west\n                    box2(q, vec2(xw-1.0, y), vec2(xn, ynw+1.0), r) // north-west\n                ),\n                min\n                (\n                    box2(q, vec2(xs, yse-1.0), vec2(xe+1.0, y), r), // south-east\n                    box2(q, vec2(xn, y), vec2(xe+1.0, yne+1.0), r) // north-east\n                )\n            );\n    }\n}\n\n// Idea from https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane.\n// Checkerboard tiling of alternating (horizontal vs. vertical) (double-T-) crossings.\n// Implementation my own since I prefer writing code to reading code ;-)\nfloat blocks_reduced(vec2 p, float r)\n{\n    vec2 q = fract(p); // local coordinates inside tile\n    p = floor(p); // global coordinates of tile\n    ivec2 tile = ivec2(p);\n    // TODO: compute separate hash values for x and y offsets\n    ivec3 o = ivec3(-1, 0,+1);\n    vec2 c = vec2(hash(tile + o.yy)); // offset of vertical/horizontal line through this tile\n    vec2 sw = vec2(hash(tile + o.xx)); // offset of vertical/horizontal line through south-west tile\n    vec2 nw = vec2(hash(tile + o.xz)); // offset of vertical/horizontal line through north-west tile\n    vec2 se = vec2(hash(tile + o.zx)); // offset of vertical/horizontal line through south-east tile\n    vec2 ne = vec2(hash(tile + o.zz)); // offset of vertical/horizontal line through north-east tile\n    vec2 w = vec2(hash(tile + o.xy)); // offset of horizontal/vertical line through west tile\n    vec2 e = vec2(hash(tile + o.zy)); // offset of horizontal/vertical line through east tile\n    vec2 s = vec2(hash(tile + o.yx)); // offset of horizontal/vertical line through south tile\n    vec2 n = vec2(hash(tile + o.yz)); // offset of horizontal/vertical line through north tile\n    //bool flip = (tile.x % 2) == (tile.y % 2); // XXX breaks on windows XXX\n    bool flip = (tile.x & 1) == (tile.y & 1);\n    if(flip) // vertical line goes through\n    {\n        return\n            min\n            (\n                min\n                (\n                    box2(q, vec2(sw.x-1.0, s.y-1.0), vec2(c.x, w.y), r), // south-west\n                    box2(q, vec2(nw.x-1.0, w.y), vec2(c.x, n.y+1.0), r ) // north-west\n                ),\n                min\n                (\n                    box2(q, vec2(c.x, s.y-1.0), vec2(se.x+1.0, e.y), r ), // south-east\n                    box2(q, vec2(c.x, e.y), vec2(ne.x+1.0, n.y+1.0), r ) // north-east\n                )\n            );\n    }\n    else // horizontal line goes through\n    {\n        return\n            min\n            (\n                min\n                (\n                    box2(q, vec2(w.x-1.0, sw.y-1.0), vec2(s.x, c.y), r), // south-west\n                    box2(q, vec2(w.x-1.0, c.y), vec2(n.x, nw.y+1.0), r) // north-west\n                ),\n                min\n                (\n                    box2(q, vec2(s.x, se.y-1.0), vec2(e.x+1.0, c.y), r), // south-east\n                    box2(q, vec2(n.x, c.y), vec2(e.x+1.0, ne.y+1.0), r) // north-east\n                )\n            );\n    }\n}\n\n// Idea from https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane.\n// Checkerboard tiling of alternating (horizontal vs. vertical) (double-T-) crossings.\n// Implementation my own since I prefer writing code to reading code ;-)\nfloat blocks_reduced2(vec2 p, float r)\n{\n    vec2 q = fract(p); // local coordinates inside tile\n    p = floor(p); // global coordinates of tile\n    ivec2 tile = ivec2(p);\n    mat3 X, Y; // use two 3x3 matrices as replacement for 2d array of vec2\n    for(int i = -1; i <= +1; i++)\n        for(int j = -1; j <= +1; j++)\n        {\n            // TODO: use different random values for x and y\n            X[j+1][i+1] = hash(tile+ivec2(j,i));\n            Y[j+1][i+1] = hash(tile+ivec2(j,i));\n        }\n\n    //bool flip = (tile.x % 2) == (tile.y % 2); // XXX breaks on windows XXX\n    bool flip = (tile.x & 1) == (tile.y & 1);\n    if(flip) // vertical line goes through\n    {\n        return\n            min\n            (\n                min\n                (\n                    box2(q, vec2(X[0][0] - 1.0, Y[1][0] - 1.0), vec2(X[1][1], Y[0][1]), r), // south-west\n                    box2(q, vec2(X[0][2] - 1.0, Y[0][1]), vec2(X[1][1], Y[1][2] + 1.0), r) // north-west\n                ),\n                min\n                (\n                    box2(q, vec2(X[1][1], Y[1][0] - 1.0), vec2(X[2][0] + 1.0, Y[2][1]), r), // south-east\n                    box2(q, vec2(X[1][1], Y[2][1]), vec2(X[2][2] + 1.0, Y[1][2] + 1.0), r) // north-east\n                )\n            );\n    }\n    else // horizontal line goes through\n    {\n        return\n            min\n            (\n                min\n                (\n                    box2(q, vec2(X[0][1] - 1.0, Y[0][0] - 1.0), vec2(X[1][0], Y[1][1]), r), // south-west\n                    box2(q, vec2(X[0][1] - 1.0, Y[1][1]), vec2(X[1][2], Y[0][2] + 1.0), r) // north-west\n                ),\n                min\n                (\n                    box2(q, vec2(X[1][0], Y[2][0] - 1.0), vec2(X[2][1] + 1.0, Y[1][1]), r), // south-east\n                    box2(q, vec2(X[1][2], Y[1][1]), vec2(X[2][1] + 1.0, Y[2][2] + 1.0), r) // north-east\n                )\n            );\n    }\n}\n\n// Idea from https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane.\n// Checkerboard tiling of alternating (horizontal vs. vertical) (double-T-) crossings.\n// Implementation my own since I prefer writing code to reading code ;-)\nfloat blocks_reduced3(vec2 p, float r)\n{\n    vec2 q = fract(p); // local coordinates inside tile\n    p = floor(p); // global coordinates of tile\n    ivec2 tile = ivec2(p);\n    mat3 h; // use 3x3 matrix as replacement for 2d array\n    for(int i = -1; i <= +1; i++)\n        for(int j = -1; j <= +1; j++)\n            h[j+1][i+1] = hash(tile+ivec2(j,i)); // TODO: use different random values for x and y\n\n    //bool flip = (tile.x % 2) == (tile.y % 2); // XXX breaks on windows XXX\n    bool flip = (tile.x & 1) == (tile.y & 1);\n\n    if(!flip) // horizontal line goes through\n        h = transpose(h);\n\n    h[0][0]--;\n    h[0][2]--;\n    h[1][0]--;\n    h[1][2]++;\n    h[2][0]++;\n    h[2][2]++;\n\n    vec2 v0010 = vec2(h[0][0], h[1][0]); vec2 v1101 = vec2(h[1][1], h[0][1]);\n    vec2 v1110 = vec2(h[1][1], h[1][0]); vec2 v1112 = vec2(h[1][1], h[1][2]);\n    vec2 v0201 = vec2(h[0][2], h[0][1]); vec2 v2021 = vec2(h[2][0], h[2][1]);\n    vec2 v1121 = vec2(h[1][1], h[2][1]); vec2 v2212 = vec2(h[2][2], h[1][2]);\n\n    if(!flip) // horizontal line goes through\n    {\n        v0010 = v0010.yx; v1101 = v1101.yx;\n        v1110 = v1110.yx; v1112 = v1112.yx;\n        v0201 = v0201.yx; v2021 = v2021.yx;\n        v1121 = v1121.yx; v2212 = v2212.yx;\n    }\n\n    return\n        min\n        (\n            min\n            (\n                box2(q, v0010, v1101, r),\n                box2(q, v1110, v2021, r)\n            ),\n            min\n            (\n                box2(q, v0201, v1112, r),\n                box2(q, v1121, v2212, r)\n            )\n        );\n}\n\nfloat extrude_blocks(vec3 p, float b, float h, float s)\n{\n    float dp = p.z-h; // distance to plane\n    float df = blocks_reduced3(p.xy, 0.0); // distance to 2d SDF\n    df = abs(-abs(df)+s+b)-b;\n    //return max(df, dp); // 3dify - not an exact distance field\n\n    // Correct SDF, as suggested by iq - thanks!\n    vec2 w = vec2(df, dp);\n    return min(max(w.x, w.y), 0.0) + length(max(w, 0.0));\n\n    //return min(max(df, dp), 0.0) + length(max(vec2(df, dp), 0.0)); // rewritten to compare to incorrect approach\n}\n\nfloat halfspace(vec3 p, float d)\n{\n    return p.z - d;\n}\n\nfloat map(vec3 p)\n{\n    float b = 0.05; // building width\n    float h = 0.2; // building height\n    float s = 0.1; // street width\n    float d = mix(0.01, 0.1, 0.5 + 0.5 * cos(iTime));\n    return\n        min\n        (\n            min\n            (\n                extrude_blocks(p,b,h,s), // buildings\n                extrude_blocks(p,s/4.0,0.01,s/2.0) // sidewalk\n                //min // roof streets\n                //(\n                //    extrude_blocks(p,b/3.0,h+0.02,s),\n                //    extrude_blocks(p,b/3.0,h+0.02,s+b*4.0/3.0)\n                //)\n            ),\n            halfspace(p,0.0) // ground\n        );\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h)\n            +\n            k.yyx * map(p + k.yyx*h)\n            +\n            k.yxy * map(p + k.yxy*h)\n            +\n            k.xxx * map(p + k.xxx*h)\n        );\n}\n\n#define MAX_ITER 250u\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    float t;\n    uint i;\n    for(i = 0u, t = 0.0; i < MAX_ITER && t < DIST_MAX; i++)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return DIST_MAX;\n}\n\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    float t;\n    uint i = 0u;\n    if(t0 < 1.0)\n    {\n        for(t = t0; i < MAX_ITER && t < 1.0; i++)\n        {\n            float h = map(ro + rd * t);\n            if(h < EPSILON)\n                return t;\n            t += h;\n        }\n        t0 = 1.0;\n    }\n\n    for(t = t0; i < MAX_ITER && t < t1; i++)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON * t) // optimization: coarser epsilon in the distance\n            return t;\n        t += h;\n    }\n\n    return t1;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow(in vec3 ro, in vec3 rd, float mint, float maxt)\n{\n    float t;\n    uint i;\n    for(i = 0u, t = mint; i < MAX_ITER && t < maxt; i++)\n    {\n        float h = map(ro + rd*t);\n        if(h < EPSILON)\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = pi / 2.0 + pi / 2.0 * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x > 5.0) ? mx : 0.25 * pi + 2.0 * pi * fract(iTime * 0.01);\n    my = (iMouse.y > 5.0) ? my : pi * 2.5 / 4.0;;\n\n    mat2 R = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 0.0,-5.0);\n    mat2 S = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz = S * ro.yz;\n    ro.xy = R * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz = S * rd.yz;\n    rd.xy = R * rd.xy;\n\n    vec3 lightdir = normalize(vec3(3.0, 2.0, 1.0));\n    vec3 color = vec3(0.0);\n\n    float dist = trace(ro, rd);\n    //float dist = trace(ro, rd, 0.0, DIST_MAX);\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n\n        vec3 ambient = vec3(0.4);\n        float brightness = max(dot(lightdir, n), 0.0);\n        brightness *= shadow(dst+0.001*n,lightdir, 0.0, DIST_MAX);\n        //color = vec3(1.0);\n        color = vec3(dst.z > 0.02 ? 1.0 : dst.z > 0.01 ? 0.75 : 0.5); // quick hack to color ground for more contrast\n        //color = dst.z < 0.005 ? ((map(vec3(dst.xy, 0.5)) > 0.32) ? vec3(0.1,0.8,0.0) : vec3(0.5)) : dst.z < 0.02 ? vec3(0.75) : n.z > 0.5 ? vec3(0.8,0.04,0.04) : vec3(1.0, 0.8, 0.2); // quick hack to color ground for more contrast\n\n        //color *= (n * 0.5 + 0.5);\n        color = (ambient * calcAO(dst, n) + brightness) * color;\n    }\n\n    vec3 sky = vec3(0); // black sky\n    //vec3 sky = mix(vec3(0.2,0.5,1), vec3(0.0,0.0,0.5), rd.z); // blue sky\n    color = mix(color, sky, smoothstep(0.75*DIST_MAX, DIST_MAX, dist)); // blend city with sky in the distance\n\n    {\n        color += smoothstep(0.998, 0.999, dot(lightdir, rd)); // sun\n        color += 0.5 * smoothstep(0.997, 1.0, dot(lightdir, rd)); // halo\n    }\n\n    fragColor = vec4(sqrt(color), 1.0); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}