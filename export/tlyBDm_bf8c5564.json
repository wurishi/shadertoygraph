{"ver":"0.1","info":{"id":"tlyBDm","date":"1614453479","viewed":70,"name":"Multiple 2D Shapes v2","username":"inspirnathan","description":"Example on how to draw multiple 2D shapes to the scene with a background color of your choice using mix instead of passing the current color to each function","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2dshapes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 getBackgroundColor(vec2 uv) {\n    uv = uv * 0.5 + 0.5; // remap uv from <-0.5,0.5> to <0.25,0.75>\n    vec4 gradientStartColor = vec4(1., 0., 1., 1.);\n    vec4 gradientEndColor = vec4(1., 1., 0., 1.);\n    return mix(gradientStartColor, gradientEndColor, uv.y); // gradient goes from bottom to top\n}\n\nvec4 sdfSquare(vec2 uv, float size, vec2 offset, vec3 col) {\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    float d = max(abs(x), abs(y)) - size;\n    \n    return d <= 0. ? vec4(col, 1.) : vec4(0);\n}\n\nvec4 sdfCircle(vec2 uv, float r, vec2 offset, vec3 col) {\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    \n    float d = length(vec2(x, y)) - r;\n    \n    return d <= 0. ? vec4(col, 1.) : vec4(0);\n}\n\nvec4 sdfHeart(vec2 uv, float size, vec2 offset, vec3 col) {\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    float xx = x * x;\n    float yy = y * y;\n    float yyy = yy * y;\n    float group = xx + yy - size;\n    float d = group * group * group - xx * yyy;\n    \n    return d <= 0. ? vec4(col, 1.) : vec4(0);\n}\n\nvec3 drawScene(vec2 uv) {\n    vec4 col = vec4(0);\n    vec4 redHeart = sdfHeart(uv, 0.04, vec2(-0.5, 0.), vec3(1., 0., 0.));\n    vec4 greenSquare = sdfSquare(uv, 0.1, vec2(0., 0.), vec3(0., 1., 0.));\n    vec4 blueCircle = sdfCircle(uv, 0.1, vec2(0.3, 0.), vec3(0., 0., 1.));\n    vec4 yellowSquare = sdfSquare(uv, 0.1, vec2(0.6, 0.), vec3(1., 1., 0.));\n    \n    col = mix(getBackgroundColor(uv), redHeart, redHeart.a);\n    col = mix(col, greenSquare, greenSquare.a);\n    col = mix(col, blueCircle, blueCircle.a);\n    col = mix(col, yellowSquare, yellowSquare.a);\n    \n    return col.rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; // <0, 1>\n    uv -= 0.5; // <-0.5,0.5>\n    uv.x *= iResolution.x/iResolution.y; // fix aspect ratio\n\n\n    vec3 col = drawScene(uv);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}