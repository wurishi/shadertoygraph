{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"float noise(vec3 p) //Thx to Las^Mercury\n{\n\tvec3 i = floor(p);\n\tvec4 a = dot(i, vec3(1., 57., 21.)) + vec4(0., 57., 21., 78.);\n\tvec3 f = cos((p-i)*acos(-1.))*(-.5)+.5;\n\ta = mix(sin(cos(a)*a),sin(cos(1.+a)*(1.+a)), f.x);\n\ta.xy = mix(a.xz, a.yw, f.y);\n\treturn mix(a.x, a.y, f.z);\n}\nfloat atan2(float x, float y){\n\tif(x>0.0)return atan(y/x);\n\tif(x<0.0&& y>=0.0)return atan(y/x)+3.14;\n\tif(y<0.0&&x<0.0)return atan(y/x)-3.14;\n\tif(y>0.0&&x==0.0)return 3.14/2.0;\n\tif(y<0.0&& x==0.0)return -3.14/2.0;\n\treturn 0.0;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat R = 100.0;\n\t\n\t\n\t\n\t\n\tfloat t = 200.0*mod(iTime,(iResolution.x-2.0*R)/100.0);\n\tvec2 move =vec2(t+R,iResolution.y/2.0);\n\t\n\t\n\tif(move.x+R > iResolution.x)\n\tmove.x =iResolution.x-(move.x+R-iResolution.x)-R;\n\tif(move.x-R < -1.0)\n\tmove.x = -(move.x-R);\n\t\n\t//mouse control\n\tif(iMouse.z > 0.0)move = iMouse.xy;\n\t\n\tfloat x = fragCoord.x - move.x ;\n\tfloat y = fragCoord.y - move.y;\n\tfloat z = (R-sqrt(abs(x)*abs(x)+ abs(y)*abs(y)));\n\tvec4 v_pos = vec4(x,y,z,1.0);\n\t\n\tvec2 uv = v_pos.xy / iResolution.xy;\n\tvec3 norm = normalize(vec3(x,y,z));\n\tfloat u = move.x/iResolution.x+atan2(norm.z,norm.x)/(2.0*3.14);\n\tfloat v = move.y/iResolution.y - 2.0*asin(norm.y)/(2.0*3.14);\n\t//clamp\n\t//u = u > 1.0?1.0:u;u = u < .0?.0:u;\n\t//v = v > 1.0?1.0:v;v = v < .0?.0:v;\n\t\n\t//If input channel0\n\tvec4 f = texture( iChannel0, vec2( u, v) );\n\tfloat light = 0.8;\n\tvec4 light_color =vec4(0.2,0.2,0.2,1.0);\n\tvec4 mat = f+vec4(noise(vec3(0.2,0.0,0.0)),0.0,0.0,1.0);\n\tvec4 bkg =  texture( iChannel0, vec2(  fragCoord.x/iResolution.x,1.0-fragCoord.y/iResolution.y) ); \n\t\n\tif(v_pos.x*v_pos.x+v_pos.y*v_pos.y+v_pos.z*v_pos.z - R*R < 1.0)\n\t\tfragColor=mat;\n\telse \n\t\tfragColor = (1.0-light)*bkg+light*light_color;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xsf3DN","date":"1369901872","viewed":858,"name":"Math2GL - Sphere mapping","username":"4000103","description":"Sphere mapping.\nSupport mouse control","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["math","gl","3dto2d","spheremapping"],"hasliked":0,"parentid":"","parentname":""}}