{"ver":"0.1","info":{"id":"MtBcRd","date":"1509946911","viewed":824,"name":"Smith Chart and Standing Waves","username":"rory618","description":"Use the mouse to place a value for the normalized impedance at the end of the line onto the smith chart, or to set the location of the probe along the line.\nGreen and Purple indicate voltage and current plotted at different points along the line.","likes":37,"published":1,"flags":32,"usePreview":1,"tags":["waves","interactive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float lineLength = .8; //line length as a multiple of wavelength\n\nfloat r;\n\nfloat saa = 2.; //antialiasing width and height for smith chart\n\n#define S(v,p) smoothstep(-1., 1., (p-v) / fwidth(p) )\n\n\n\n\n\n\n\n\n// some modified drawing code from fabrice\nfloat PointLineSegDist2d(vec2 a, vec2 b, vec2 p)\n{\n    if (a==b) return length(p-a);\n    p -= a; b -= a;                        // go to A referential\n    float q = dot(p, b) / dot(b, b) ;      // projection of P on line AB: normalized ordinate\n    b *= clamp(q, 0., 1.);                 // point on segment AB closest to P \n    return length( p - b);                 // distance to P\n}\n\nfloat char(vec2 p, int c) { // --- access to the image of ascii code c\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return 0.;\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx(p/16.),dFdy(p/16.) ).x;\n}\nfloat pInt(vec2 p, float n, float len) { // --- display uint4\n    float v = 0.;\n    for (float i = len; i>=0.; i--) \n        n /=  9.999999, // 10., // for windows :-(\n        v += char(p - .5*vec2(i,0), 48+ int(fract(n)*10.) );\n    return v;\n}\nfloat pFloat(vec2 p, float n) { // --- display float\n    float v = 0.;\n    float w = floor(n);\n    float len = floor(log(1.+abs(w))/log(10.));\n    v += pInt(p,w,len);\n    v += char(p - .5*vec2(len+1.,0), 46);\n    float f = fract(n);\n    v += pInt(p - .5*vec2(len+2.,0),f*1000.,2.);\n    return v;\n}\nfloat pCpx(vec2 p, vec2 z){\n    float v = 0.;\n    float len = floor(log(1.+abs(z.x))/log(10.))+7.;\n    if(length(z)<=1000.){\n        if(z.x>=0.){\n            v += pFloat(p,z.x);\n        } else {\n            len += 1.;\n            v += char(p,45);\n            v += pFloat(p - .5*vec2(1,0),-z.x);\n        }\n        v += char((p - .5*vec2(len-2.,0)),z.y>=0.?43:45);\n        v += char((p - .5*vec2(len-1.,0)),106);\n        v += pFloat(p - .5*vec2(len,0),abs(z.y));\n    } else {\n        v += char(p,153);\n    }\n    return v;\n}\n//////////////\n\n///Complex operations\nvec2 cconj(vec2 z){\n  return z*vec2(1,-1);\n}\n\nvec2 cmul(vec2 a, vec2 b){\n  return mat2(a,-a.y,a.x) * b;\n}\n\nvec2 cinv(vec2 z){\n  return (cconj(z)+1e-6)/(cmul(z,cconj(z)).x+1e-16);\n}\n\nvec2 cdiv(vec2 a, vec2 b){\n  return cmul(a,cinv(b));\n}\nvec2 cexp(vec2 z) {\n    return exp(z.x)*vec2(cos(z.y),sin(z.y));\n}\n\nvec2 map(vec2 p){\n  return cdiv(vec2(1,0)+p,vec2(1,0)-p);\n}\n/////\n\n///Draw smith chart\nfloat sc(vec2 i){\n  float c = 0.;\n  vec2 p = i.xy;\n  //if(length(p)<=r){\n      p = r*map(p/r);\n\n      float pm = max(0.1,max(abs(p.x/r),abs(p.y/r)));\n\n      \n      float s = ceil(log(pm)/log(10.));\n      \n      \n      s = -2.+s*3.+float((pm)>.2*pow(10.,s))+float((pm)>.5*pow(10.,s));\n      \n      \n      //Grid line sizes\n      float w2 = r*float[](.05,.1,.1,.2,1.0,5.0,10.0,50.0)[int(s)+2];\n      float w1 = r*float[](.01,.02,.05,.1,.2,1.0,2.0,10.0)[int(s)+2];\n      \n      float ddp = 2./dot(vec2(1,0)-p,vec2(1,0)-p);\n\n      \n      float t = (5.+pow(length(p),1.5)/r)/20.;\n      \n      vec2 m = abs(mod(p+w1/2.,vec2(w1))-w1/2.);\n      m=abs(m);\n      float d = min(m.x,m.y);\n      c += .5 * S(0., t-d);\n      if(s<5.){\n          m = abs(mod(p+w2/2.,vec2(w2))-w2/2.);\n          m=abs(m);\n          d = min(m.x,m.y);\n          c += .5 * S(0., t*2.-d);\n      }\n  //}\n  return c* (1.- S(r,length(i)) );;\n}\n\nvoid mainImage( out vec4 o, in vec2 i ){\n    o = vec4(0);\n    vec2 mouseZl = texelFetch(iChannel0,ivec2(0),0).xy;\n    r = min(iResolution.x,iResolution.y)*.4;\n    vec2 c = iResolution.yy/2.;\n    for(float dx = -.5+.5/saa; dx < .5; dx += 1./saa){\n        for(float dy = -.5+.5/saa; dy < .5; dy += 1./saa){\n            o += vec4(vec3(sc(i-c+vec2(dx,dy))),1);\n        }\n    }\n    o /= o.w;\n    o = min(o,vec4(1.));\n    if(length(mouseZl-c)<=r){\n        vec2 Zl = map((mouseZl-c)/r);\n        if(abs(abs(Zl.y)-1.)<.001) Zl.y = sign(Zl.y);\n        \n        o += char((i/iResolution.y - vec2(1.05-.5/8.,.92))*20.,90)*vec4(1,0,1,1);\n        o += char((i/iResolution.y - vec2(1.05-.5/16.,.92))*20.,61)*vec4(1,0,1,1);\n        \n        \n        o += char((i/iResolution.y - vec2(1.05-.5/8.,.86))*20.,89)*vec4(0,1,1,1);\n        o += char((i/iResolution.y - vec2(1.05-.5/16.,.86))*20.,61)*vec4(0,1,1,1);\n        \n        \n        float z = texelFetch(iChannel0,ivec2(0),0).z*lineLength;\n    \to += max(0.,3.0-PointLineSegDist2d(iResolution.xy*vec2(.86,.41) +vec2(z/lineLength,0)  ,iResolution.xy*vec2(.86,.59)+vec2(z/lineLength,0) ,i))*vec4(.25,0,.5,1);\n    \n    \tfloat L = iResolution.x*.86-r*2.5;\n        \n        float Bz = 2.*3.1415*z/L;\n        \n        vec2 gamma = (mouseZl-c)/r;\n        \n        gamma = cmul(gamma,cexp(vec2(0.,2.*Bz)));\n        \n        gamma = min(vec2(1),max(vec2(-1),gamma*1.000001));\n        vec2 V = (c+gamma*r-(c-vec2(r,0)))/r;\n        vec2 I = (c+gamma*r-(c+vec2(r,0)))/r;\n        I =  min(vec2(2),max(-vec2(2),I*1.000001));\n        V =  min(vec2(2),max(-vec2(2),V*1.000001));\n        vec2 Z = map(gamma);\n        o += pCpx(( i/iResolution.y - vec2(1.05,.92)) *20., Z)*vec4(1,0,1,1);\n        o += pCpx(( i/iResolution.y - vec2(1.05,.86)) *20., cinv(Z))*vec4(0,1,1,1);\n        \n        o = mix(o,vec4(1,.5,0,1),clamp(1.5-abs(length(c-i)-length(c-mouseZl)),0.,1.));\n        \n        \n        o = mix(o,vec4(1,1,0,1),clamp(1.5-PointLineSegDist2d(c-gamma*r,c+gamma*r,i),0.,1.));\n        o = mix(o,vec4(.5,1,0,1),clamp(1.5-PointLineSegDist2d(c-vec2(r,0),c+gamma*r,i),0.,1.));\n        o = mix(o,vec4(.5,0,1,1),clamp(1.5-PointLineSegDist2d(c+vec2(r,0),c+gamma*r,i),0.,1.));\n        \n        o = mix(o,vec4(0,1,1,1),max(0.,min(1.,3.-length((c*2.-mouseZl)-i))));\n        \n        o += char((i/iResolution.y - vec2(1.05-.5/8.,.8))*20.,144)*vec4(1,1,0,1);\n        o += char((i/iResolution.y - vec2(1.05-.5/16.,.8))*20.,61)*vec4(1,1,0,1);\n        o += pCpx(( i/iResolution.y - vec2(1.05,.8)) *20., gamma)*vec4(1,1,0,1);\n        o = mix(o,vec4(1,0,1,1),max(0.,min(1.,5.-length(mouseZl-i))));\n        \n        \n        o += char((i/iResolution.y - vec2(1.05-1./8.,.74))*20.,124)*vec4(1,.5,0,1);\n        o += char((i/iResolution.y - vec2(1.05-1.5/16.,.74))*20.,144)*vec4(1,.5,0,1);\n        o += char((i/iResolution.y - vec2(1.05-.5/8.,.74))*20.,124)*vec4(1,.5,0,1);\n        o += char((i/iResolution.y - vec2(1.05-.5/16.,.74))*20.,61)*vec4(1,.5,0,1);\n        o += pFloat(( i/iResolution.y - vec2(1.05,.74)) *20., min(1.0,1.0001*length(gamma)))*vec4(1,.5,0,1);\n        \n        o += char((i/iResolution.y - vec2(1.05-.5/8.,.68))*20.,86)*vec4(.5,1,0,1);\n        o += char((i/iResolution.y - vec2(1.05-.5/16.,.68))*20.,61)*vec4(.5,1,0,1);\n        o += pCpx(( i/iResolution.y - vec2(1.05,.68)) *20., V)*vec4(.5,1,0,1);\n        \n        o += char((i/iResolution.y - vec2(1.05-.5/8.,.62))*20.,73)*vec4(.5,0,1,1);\n        o += char((i/iResolution.y - vec2(1.05-.5/16.,.62))*20.,61)*vec4(.5,0,1,1);\n        o += pCpx(( i/iResolution.y - vec2(1.05,.62)) *20., I)*vec4(.5,0,1,1);\n    }\n    \n    o += max(0.,2.-PointLineSegDist2d(vec2(r*2.5,iResolution.y*.58) ,iResolution.xy*vec2(.9,.58) ,i));\n    o += max(0.,2.-PointLineSegDist2d(vec2(r*2.5,iResolution.y*.42) ,iResolution.xy*vec2(.9,.42) ,i));\n    o += max(0.,2.-PointLineSegDist2d(iResolution.xy*vec2(.9,.55)   ,iResolution.xy*vec2(.9,.58) ,i));\n    o += max(0.,2.-PointLineSegDist2d(iResolution.xy*vec2(.9,.45)   ,iResolution.xy*vec2(.9,.42) ,i));\n    \n    o += max(0.,2.-PointLineSegDist2d(iResolution.xy*vec2(.91,.55)   ,iResolution.xy*vec2(.91,.45) ,i));\n    o += max(0.,2.-PointLineSegDist2d(iResolution.xy*vec2(.89,.55)   ,iResolution.xy*vec2(.89,.45) ,i));\n    o += max(0.,2.-PointLineSegDist2d(iResolution.xy*vec2(.91,.55)   ,iResolution.xy*vec2(.89,.55) ,i));\n    o += max(0.,2.-PointLineSegDist2d(iResolution.xy*vec2(.91,.45)   ,iResolution.xy*vec2(.89,.45) ,i));\n    \n    \n    o += max(0.,1.0-PointLineSegDist2d(vec2(r*2.5,iResolution.y*.59)   ,vec2(r*2.5,iResolution.y*.41) ,i));\n    o += max(0.,1.0-PointLineSegDist2d(iResolution.xy*vec2(.86,.41)   ,iResolution.xy*vec2(.86,.59) ,i));\n    \n    \n    \n    if(i.x>r*2.5 && i.x <iResolution.x*.86 && i.y>iResolution.y*.22 && i.y<iResolution.y*.35){\n        vec2 uv = (i - vec2(r*2.5,iResolution.y*.22))/(iResolution.xy*vec2(.86,.35)-vec2(r*2.5,iResolution.y*.22));\n        float L = iResolution.x*.86-r*2.5;\n        float Bz = -2.*3.1415*(1.-uv.x)*lineLength;\n        \n        vec2 gamma = (mouseZl-c)/r;\n        \n        gamma = cmul(gamma,cexp(vec2(0.,2.*Bz)));\n        \n        gamma = min(vec2(1),max(vec2(-1),gamma*1.000001));\n        vec2 V = (c+gamma*r-(c-vec2(r,0)))/r;\n        \n        V = min(vec2(2),max(-vec2(2),V*1.000001));\n        \n        o += (1.5-abs(uv.y-length(V)/(length(gamma)+1.05))*(iResolution.y*.13))*vec4(.5,1,0,1);\n        \n    }\n    \n    if(i.x>r*2.5 && i.x <iResolution.x*.86 && i.y>iResolution.y*.07 && i.y<iResolution.y*.2){\n        vec2 uv = (i - vec2(r*2.5,iResolution.y*.07))/(iResolution.xy*vec2(.86,.20)-vec2(r*2.5,iResolution.y*.07));\n        float L = iResolution.x*.86-r*2.5;\n        float Bz = -2.*3.1415*(1.-uv.x)*lineLength;\n        \n        vec2 gamma = (mouseZl-c)/r;\n        \n        gamma = cmul(gamma,cexp(vec2(0.,2.*Bz)));\n        \n        gamma = min(vec2(1),max(vec2(-1),gamma*1.000001));\n        vec2 I = (c+gamma*r-(c+vec2(r,0)))/r;\n        \n        I =  min(vec2(2),max(-vec2(2),I*1.000001));\n        \n        o += (1.5-abs(uv.y-length(I)/(length(gamma)+1.05))*(iResolution.y*.13))*vec4(.5,0,1,1);\n    }\n    \n    \n    o = mix(o,vec4(1),max(0.,2.-PointLineSegDist2d(vec2(r*2.5,iResolution.y*.22)   ,iResolution.xy*vec2(.86,.22) ,i)));\n    o = mix(o,vec4(1),max(0.,2.-PointLineSegDist2d(vec2(r*2.5,iResolution.y*.07)   ,iResolution.xy*vec2(.86,.07) ,i)));\n    o = mix(o,vec4(1),max(0.,2.-PointLineSegDist2d(iResolution.xy*vec2(.86,.22)   ,iResolution.xy*vec2(.86,.35) ,i)));\n    \n    o = mix(o,vec4(1),max(0.,2.-PointLineSegDist2d(iResolution.xy*vec2(.86,.07)   ,iResolution.xy*vec2(.86,.20) ,i)));\n    //o = 1.-min(vec4(1),o); //invert colors\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n    o = vec4(0);\n    vec2 c = iResolution.yy/2.;\n    float r = min(iResolution.x,iResolution.y)*.4;\n    o = iFrame<3?vec4(c.x-r,c.y,0,0):texelFetch(iChannel0, ivec2(i),0);\n    vec2 d = iMouse.xy-c;\n    float l = length(d);\n    if(iMouse.x<r*2.35){\n        d /= l==0.?1.:l;\n        l = min(l,r*(1.-1e-7));\n        o.xy = iMouse.xy==vec2(0)?c:c+d*l;\n    } else {\n        if(iMouse.x>=r*2.5 && iMouse.x<=iResolution.x*.86){\n            o.z = iMouse.x-iResolution.x*.86;\n        }\n    }\n}\n    ","name":"Buf A","description":"","type":"buffer"}]}