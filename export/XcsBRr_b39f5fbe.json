{"ver":"0.1","info":{"id":"XcsBRr","date":"1723246509","viewed":29,"name":"Noise field of view effect","username":"Mutsi","description":"An example of creating a more interesting vignette field of view effect by using two time offset noise maps","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","postprocess","fov"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Sample noise twice with two different time based offsets\n    float noise0 = texture(iChannel0, uv * vec2(0.2,0.2) + vec2(iTime * 0.1, iTime * 0.03)).r;\n    float noise1 = texture(iChannel0, uv * vec2(0.15,0.15) + vec2(iTime * -0.1, iTime * -0.025)).r;\n    \n    // Multiply the two noises together\n    float noiseMulti = noise0 * noise1;\n    \n    // Take the distance to center of screen (uv+0.5)\n    float rawDistance = length(uv - vec2(0.5,0.5));\n    // and use smoothstep to size the effect, 0.2 to 0.4 has the effect, before 0.2 has no effect, beyond 0.4 has full effect.\n    // change these smoothstep values to scale the 'light' circle.\n    float d = smoothstep(0.2, 0.4, rawDistance);\n    \n    // Take the original screen pixel (this would be from your game screen, as this is a post processing effect.\n    // Usually that means taking from a RenderTarget2D that you first render your entire game to,\n    // After that you would render that rendertarget to the screen while applying this effect.\n    vec4 colour = texture(iChannel1, uv);\n    \n    // Multiple the original screen colour with the inverse of the distance; \n    //you want higher values of distance to lower the amount of light\n    // Multiple the noise effect by the distance, you want more noise the higher the value for distance.\n    fragColor = colour * (1.0-d) - noiseMulti * d;\n}","name":"Image","description":"","type":"image"}]}