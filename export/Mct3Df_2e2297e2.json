{"ver":"0.1","info":{"id":"Mct3Df","date":"1712932961","viewed":49,"name":"ADS_Task2","username":"Krinpis","description":"?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["simple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.1415926535\nconst float z_max = 1000000.;\nconst int k = 7;\n\nstruct Square{\n    vec3 a, b, c;\n};\n\nstruct Triangle{\n    vec3 a, b, c;\n};\n\nstruct Tetr{\n    vec3 a, b, c, d;\n};\n\nstruct Cube{\n    vec3 a, b, c, d;\n};\n\nstruct Ball{\n    vec3 center;\n    float radius;\n};\n\nstruct figure_data{\n    bool cros;\n    int nom_col;\n    float z;\n};\n\nstruct quad_eq_data{\n    bool is_root;\n    float root;\n};\n\nbool pix_in_circle(vec2 pix, vec2 c, float r){\n    if (distance(pix, c) < r) return true;\n    return false;\n}\n\nbool pix_in_boot_ring(vec2 pix, float r, float R, float f){\n    float n = iResolution.y;\n    float m = iResolution.x;\n    float min_res = min(n, m);\n    float max_res = max(n, m);\n    vec2 c[k];\n    for(int i = 0; i < k; i++) c[i] = vec2(m*.5+cos(f+2.*pi*float(i)/float(k))*R, \n                                            n*.55+sin(f+2.*pi*float(i)/float(k))*R);\n    for(int i = 0; i < k; i++){\n        if (pix_in_circle(pix, c[i], r)) return true;\n    }\n    return false;\n}\n\nbool pix_in_boot_line(vec2 pix, vec2 a, float h){\n    float n = iResolution.y;\n    float m = iResolution.x;\n    if (pix.x > a.x && pix.x < m-a.x && pix.y>a.y && pix.y - a.y < h) return true;\n    return false;\n}\n\nvec4 plane(vec3 a, vec3 b, vec3 c){\n    vec3 v = cross(b-a, c-a);\n    float d = -(v.x*a.x + v.y*a.y + v.z*a.z);\n    return vec4(v, d);\n}\n\nquad_eq_data quad_eq(float a, float b, float c){\n    quad_eq_data q;\n    float d = b*b - 4.*a*c;\n    if (d>0.) {\n        q.root = (-b-sqrt(d))/(2.*a);\n        q.is_root = true;\n    }\n    else q.is_root = false;\n    return q;\n}\n\n\nvec3 ray_and_plane(vec3 a, vec3 b, vec3 c, vec2 pix, float foc_z){\n    vec4 pl = plane(a, b, c);\n    float n = iResolution.y;\n    float m = iResolution.x;\n    vec3 v = vec3(pix.x - m*.5, pix.y - n*.5, -foc_z);\n    float t = (pl.x*(m*.5) + pl.y*(n*.5) + pl.z*foc_z + pl.a)/(-dot(pl.xyz, v));\n    if (foc_z + v.z*t > -.1) return vec3(m*.5 + v.x*t, n*.5 + v.y*t, foc_z + v.z*t);\n    return vec3(0.);\n}\n\nvec3 around_x(vec3 a, vec2 d, float f){\n    a.y -= d.x;\n    a.z -= d.y;\n    vec3 a_0 = a;\n    a.y = a_0.y*cos(f)+a_0.z*(-sin(f));\n    a.z = a_0.y*sin(f)+a_0.z*cos(f);\n    a.y += d.x;\n    a.z += d.y;\n    return a;\n}\n\nvec3 around_y(vec3 a, vec2 d, float f){\n    a.x -= d.x;\n    a.z -= d.y;\n    vec3 a_0 = a;\n    a.x = a_0.x*cos(f)+a_0.z*sin(f);\n    a.z = a_0.x*(-sin(f))+a_0.z*cos(f);\n    a.x += d.x;\n    a.z += d.y;\n    return a;\n}\n\nvec3 around_z(vec3 a, vec2 d, float f){\n    a.x -= d.x;\n    a.y -= d.y;\n    vec3 a_0 = a;\n    a.x = a_0.x*cos(f)+a_0.y*(-sin(f));\n    a.y = a_0.x*sin(f)+a_0.y*cos(f);\n    a.x += d.x;\n    a.y += d.y;\n    return a;\n}\n\nbool dot_in_angle(vec3 b, vec3 a, vec3 c, vec3 d){\n    if (dot(cross(b-a, d-a), cross(c-a, d-a)) < .0) return true;\n    return false;\n}\n\nfigure_data ray_and_ball(Ball ball, vec2 pix, float foc_z){\n    float n0 = iResolution.y;\n    float m0 = iResolution.x;\n    figure_data ball_data;\n    ball_data.cros = false;\n    vec3 f = vec3(m0*.5, n0*.5, foc_z);\n    vec3 n = vec3(pix.x - m0*.5, pix.y - n0*.5, -foc_z);\n    float a = n.x*n.x + n.y*n.y + n.z*n.z;\n    float b = 2.*(dot(f, n) - dot(n, ball.center));\n    vec3 c0 = f-ball.center;\n    float c = dot(c0, c0) - pow(ball.radius, 2.);\n    quad_eq_data t = quad_eq(a, b, c);\n    if (t.is_root) {\n        ball_data.cros = true;\n        ball_data.z = foc_z - foc_z*t.root;\n    }\n    else {\n        ball_data.cros = false;\n        ball_data.z = z_max;\n    }\n    return ball_data;\n}\n\nfigure_data ray_and_triangle(Triangle tr, vec2 pix, float foc_z){\n    float z = z_max;\n    figure_data tr_data;\n    vec3 e = ray_and_plane(tr.a, tr.b, tr.c, pix, foc_z);\n    if (dot_in_angle(tr.a, tr.b, tr.c, e) && dot_in_angle(tr.b, tr.a, tr.c, e)) {z = e.z; tr_data.cros = true;}\n    else tr_data.cros = false;\n    tr_data.z = z;\n    return tr_data;\n}\n\nfigure_data ray_and_square(Square sq, vec2 pix, float foc_z){\n    vec3 d = sq.a + sq.c - sq.b;\n    float z = z_max;\n    figure_data sq_data;\n    vec3 e = ray_and_plane(sq.a, sq.b, sq.c, pix, foc_z);\n    if (dot_in_angle(sq.a, sq.b, sq.c, e) && dot_in_angle(sq.c, d, sq.a, e) && \n        dot_in_angle(sq.b, sq.a, d, e)) {z = e.z; sq_data.cros = true;}\n    else sq_data.cros = false;\n    sq_data.z = z;\n    return sq_data;\n}\n\nfigure_data ray_and_cube(Cube cube, vec2 pix, float foc_z){\n    figure_data cube_data, sq1_data, sq2_data, sq3_data, sq4_data, sq5_data, sq6_data;\n    cube_data.cros = true; \n    Square sq1, sq2, sq3, sq4, sq5, sq6;\n    float z = z_max, z1, z2, z3, z4, z5, z6;\n    int nom_col;\n    vec3 a = cube.a, b = cube.b, c = cube.c, d = cube.d;\n    vec3 e = b+c-a, f = d+b-a, h = d+c-a, g = f+e-b;\n    \n    sq1.a = c; sq1.b = a; sq1.c = b;\n    sq2.a = h; sq2.b = d; sq2.c = f;\n    sq3.a = d; sq3.b = a; sq3.c = b;\n    sq4.a = g; sq4.b = e; sq4.c = c;\n    sq5.a = f; sq5.b = b; sq5.c = e;\n    sq6.a = d; sq6.b = a; sq6.c = c;\n    \n    sq1_data = ray_and_square(sq1, pix, foc_z);\n    sq2_data = ray_and_square(sq2, pix, foc_z);\n    sq3_data = ray_and_square(sq3, pix, foc_z);\n    sq4_data = ray_and_square(sq4, pix, foc_z);\n    sq5_data = ray_and_square(sq5, pix, foc_z);\n    sq6_data = ray_and_square(sq6, pix, foc_z);\n    \n    z1 = sq1_data.z; z2 = sq2_data.z; z3 = sq3_data.z;\n    z4 = sq4_data.z; z5 = sq5_data.z; z6 = sq6_data.z;\n    \n    if (sq1_data.cros && z1<z2 && z1<z3 && z1<z4 && z1<z5 && z1<z6) {z = z1; nom_col = 0;}\n    else if (sq2_data.cros && z2<z3 && z2<z4 && z2<z5 && z2<z6) {z = z2; nom_col = 1;}\n    else if (sq3_data.cros && z3<z4 && z3<z5 && z3<z6) {z = z3; nom_col = 2;}\n    else if (sq4_data.cros && z4<z5 && z4<z6) {z = z4; nom_col = 3;}\n    else if (sq5_data.cros && z5<z6) {z = z5; nom_col = 4;}\n    else if (sq6_data.cros) {z = z6; nom_col = 5;}\n    else {cube_data.cros = false;}\n    cube_data.z = z;\n    cube_data.nom_col = nom_col;\n    return cube_data;\n}\n\nfigure_data ray_and_tetr(Tetr tetr, vec2 pix, float foc_z){\n    figure_data tetr_data, tr1_data, tr2_data, tr3_data, tr4_data;\n    tetr_data.cros = true;\n    float z = z_max, z1, z2, z3, z4;\n    int nom_col;\n    Triangle tr1, tr2, tr3, tr4;\n    tr1.a = tetr.a; tr1.b = tetr.d; tr1.c = tetr.c;\n    tr2.a = tetr.a; tr2.b = tetr.d; tr2.c = tetr.b;\n    tr3.a = tetr.b; tr3.b = tetr.d; tr3.c = tetr.c;\n    tr4.a = tetr.a; tr4.b = tetr.b; tr4.c = tetr.c;\n    \n    tr1_data = ray_and_triangle(tr1, pix, foc_z);\n    tr2_data = ray_and_triangle(tr2, pix, foc_z);\n    tr3_data = ray_and_triangle(tr3, pix, foc_z);\n    tr4_data = ray_and_triangle(tr4, pix, foc_z);\n    \n    z1 = tr1_data.z; z2 = tr2_data.z; z3 = tr3_data.z; z4 = tr4_data.z;\n    \n    if (tr1_data.cros && z1 < z2 && z1 < z3 && z1 < z4) {z = z1; nom_col = 6;}\n    else if (tr2_data.cros && z2 < z3 && z2 < z4) {z = z2; nom_col = 7;}\n    else if (tr3_data.cros && z3 < z4) {z = z3; nom_col = 8;}\n    else if (tr4_data.cros) {z = z4; nom_col = 9;}\n    else {tetr_data.cros = false;}\n    tetr_data.z = z;\n    tetr_data.nom_col = nom_col;\n    return tetr_data;\n}\n\nvec3 col_of_triangle(vec3 dot_in_tr, vec3 center_of_tr, vec3 col){\n    float n = 30.;\n    float m = 30.* iResolution.x/ iResolution.y;\n    float min_res = min(n, m);\n    float max_res = max(n, m);\n    return col + vec3(abs(sin(distance(dot_in_tr, center_of_tr)*m/1000.)));\n}\n\nvec3 col_of_first_scene(vec2 pix, float time_1, float foc_z){\n    float n = iResolution.y;\n    float m = iResolution.x;\n    float min_res = min(n, m);\n    float max_res = max(n, m);\n    vec2 uv = pix/iResolution.xy;\n    vec3 col = vec3(1.); //background colour\n    float time = iTime;\n    if (iTime > time_1) time = time_1;\n    Triangle tr1, tr2, tr3;\n    vec3 tr_cent = vec3(m*.5, n*.5, 0.);\n    float tr_size = min_res*.4;\n    vec3 tr1_coord = tr_cent + vec3(cos(time)*m*.4, 0., 0.);\n    vec3 tr2_coord = tr_cent + vec3(cos(time+pi)*m*.4, 0., 0.);\n    \n        \n    tr1.a = vec3(tr1_coord.x - tr_size*.5, tr1_coord.y - tr_size*sqrt(3.)/6., 0.);\n    tr1.b = vec3(tr1_coord.x, tr1_coord.y + tr_size/sqrt(3.), 0.);\n    tr1.c = vec3(tr1.a.x+tr_size, tr1.a.y, 0.);\n        \n    tr2.a = vec3(tr2_coord.x - tr_size*.5, tr2_coord.y - tr_size*sqrt(3.)/6., 0.);\n    tr2.b = vec3(tr2_coord.x, tr2_coord.y + tr_size/sqrt(3.), 0.);\n    tr2.c = vec3(tr2.a.x+tr_size, tr2.a.y, 0.);\n        \n    tr3.a = vec3(m*.4, n*.1, 0.);\n    tr3.b = vec3(m*.5, n*.4, 0.);\n    tr3.c = vec3(m*.6, n*.1, 0.);\n        \n    tr1.a = around_z(tr1.a, tr1_coord.xy, time*3.);\n    tr1.b = around_z(tr1.b, tr1_coord.xy, time*3.);\n    tr1.c = around_z(tr1.c, tr1_coord.xy, time*3.);\n    tr2.a = around_z(tr2.a, tr2_coord.xy, -time*3.);\n    tr2.b = around_z(tr2.b, tr2_coord.xy, -time*3.);\n    tr2.c = around_z(tr2.c, tr2_coord.xy, -time*3.);\n    \n    vec3 dot_int_tr1 = ray_and_plane(tr1.a, tr1.b, tr1.c, pix, foc_z);\n    vec3 dot_int_tr2 = ray_and_plane(tr2.a, tr2.b, tr2.c, pix, foc_z);\n        \n    Square sq;\n    float sq_size = min_res*.3;\n    sq.a = vec3(m*.5-sq_size*.5, n*.5+sq_size*.5, 0.);\n    sq.b = vec3(m*.5-sq_size*.5, n*.5-sq_size*.5, 0.);\n    sq.c = vec3(m*.5+sq_size*.5, n*.5-sq_size*.5, 0.);\n    sq.a = around_z(sq.a, vec2(m*.5, n*.5), time);\n    sq.b = around_z(sq.b, vec2(m*.5, n*.5), time);\n    sq.c = around_z(sq.c, vec2(m*.5, n*.5), time);\n        \n    figure_data tr1_data = ray_and_triangle(tr1, pix, foc_z);\n    figure_data sq_data = ray_and_square(sq, pix, foc_z);\n    figure_data tr2_data = ray_and_triangle(tr2, pix, foc_z);\n    figure_data tr3_data = ray_and_triangle(tr3, pix, foc_z);\n    if (iTime > time_1 && (abs(uv.x - uv.y) < .05 || abs(uv.x+uv.y-1.) < .05)) col = vec3(1., 0., 0.);\n    else if (tr1_data.cros) col = col_of_triangle(dot_int_tr1, tr1_coord, vec3(0.));\n    else if(tr3_data.cros) col = vec3(.3, .4, .3);\n    else if (pix_in_circle(pix, vec2(m*.5, n*.7), min_res*.2)) col = vec3(1., .6, 0.);\n    else if (sq_data.cros) col = vec3(1., 0., 1.);\n    else if(tr2_data.cros) col = col_of_triangle(dot_int_tr2, tr2_coord, vec3(0.));\n    return col;\n}\n\n\nvoid mainImage(out vec4 fragColor, vec2 pix){\n    float n = iResolution.y;\n    float m = iResolution.x;\n    float min_res = min(n, m);\n    float max_res = max(n, m);\n    vec2 uv = pix/iResolution.xy;\n    float foc_z = -max_res; //distance between screen and camera\n    vec3 col = vec3(1.); //background colour\n    float r = min_res/40.;\n    float R = min_res/10.;\n    vec2 boot_coord = vec2(m*.2, n*.15);\n    float time, boot_time = 10., first_scene = 13., time_1 = 10.;\n    if (iTime < boot_time+first_scene) time = pow((iTime-first_scene)/boot_time, 2.);\n    else time = iTime-boot_time+1.-first_scene;\n    \n    if (iTime < first_scene){\n        col = col_of_first_scene(pix, time_1, foc_z);\n    }\n    else{\n    vec3 cols[10];\n    \n    cols[0] = vec3(1., 0., 0.); //colours of cube edges\n    cols[1] = vec3(0., 1., 0.);\n    cols[2] = vec3(0., 0., 1.);\n    cols[3] = vec3(1., 1., .0);\n    cols[4] = vec3(1., 0., 1.);\n    cols[5] = vec3(0., 1., 1.);\n    \n    cols[6] = vec3(.3, .4, .3); //colours of tetr edges\n    cols[7] = vec3(.4, .3, .3);\n    cols[8] = vec3(.3, .3, .4);\n    cols[9] = vec3(.5, .3, .5);\n    \n    Triangle tr1, tr2;\n    float tr_rad = m*1.3, tr_size = min_res*.8;\n    vec3 tr_cent = vec3(m*.5, n*.4, tr_rad+min_res*1.2);\n    vec3 tr1_coord = tr_cent + vec3(cos(time)*tr_rad, 0.,sin(time)*tr_rad);\n    vec3 tr2_coord = tr_cent + vec3(cos(time+pi)*tr_rad, 0., sin(time+pi)*tr_rad);\n    \n    tr1.a = vec3(tr1_coord.x - tr_size*.5, tr1_coord.y - tr_size*sqrt(3.)/6., tr1_coord.z);\n    tr1.b = vec3(tr1_coord.x, tr1_coord.y + tr_size/sqrt(3.), tr1.a.z);\n    tr1.c = vec3(tr1.a.x+tr_size, tr1.a.y, tr1.a.z);\n    \n    tr2.a = vec3(tr2_coord.x - tr_size*.5, tr2_coord.y - tr_size*sqrt(3.)/6., tr2_coord.z);\n    tr2.b = vec3(tr2_coord.x, tr2_coord.y + tr_size/sqrt(3.), tr2.a.z);\n    tr2.c = vec3(tr2.a.x+tr_size, tr2.a.y, tr2.a.z);\n    \n    tr1.a = around_z(tr1.a, tr1_coord.xy, time*3.);\n    tr1.b = around_z(tr1.b, tr1_coord.xy, time*3.);\n    tr1.c = around_z(tr1.c, tr1_coord.xy, time*3.);\n    tr1.a = around_y(tr1.a, tr1_coord.xz, -time+pi*.5);\n    tr1.b = around_y(tr1.b, tr1_coord.xz, -time+pi*.5);\n    tr1.c = around_y(tr1.c, tr1_coord.xz, -time+pi*.5);\n    \n    tr2.a = around_z(tr2.a, tr2_coord.xy, -time*3.);\n    tr2.b = around_z(tr2.b, tr2_coord.xy, -time*3.);\n    tr2.c = around_z(tr2.c, tr2_coord.xy, -time*3.);\n    tr2.a = around_y(tr2.a, tr2_coord.xz, -time+pi*.5);\n    tr2.b = around_y(tr2.b, tr2_coord.xz, -time+pi*.5);\n    tr2.c = around_y(tr2.c, tr2_coord.xz, -time+pi*.5);\n    \n    Tetr tetr;\n    float tetr_size = max_res*.5;\n    vec3 a0 = vec3(m*.5, -max_res*.1, max_res + sin(time)*min_res*.4); //coord of tetr\n    vec3 b0 = vec3(a0.x + tetr_size*.5, a0.y, a0.z + tetr_size*sqrt(3.)*.5);\n    vec3 c0 = vec3(a0.x - tetr_size*.5, a0.y, a0.z + tetr_size*sqrt(3.)*.5);\n    vec3 d0 = vec3(a0.x, a0.y + tetr_size*sqrt(6.)/3., a0.z + tetr_size/sqrt(3.));\n    tetr.a = a0; tetr.b = b0; tetr.c = c0; tetr.d = d0;\n    \n    tetr.a = around_y(tetr.a, d0.xz, time*.7);\n    tetr.b = around_y(tetr.b, d0.xz, time*.7);\n    tetr.c = around_y(tetr.c, d0.xz, time*.7);\n    tetr.d = around_y(tetr.d, d0.xz, time*.7);\n    \n    /*tetr.a = around_x(tetr.a, d0.yz, time*.8);\n    tetr.b = around_x(tetr.b, d0.yz, time*.8);\n    tetr.c = around_x(tetr.c, d0.yz, time*.8);\n    tetr.d = around_x(tetr.d, d0.yz, time*.8);*/\n    \n    \n    Cube cube;\n    float cube_size = max_res*.5;\n    \n    //vec3 a = vec3(m*.3 + cos(time*1.2)*min_res, n*.5 + sin(time*1.2)*min_res, max_res*2. + sin(time*1.2)*min_res*1.5); //coord of cube\n    vec3 a = vec3(m*.3, n*.2, max_res + 100.);//coord of cube\n    vec3 b = vec3(a.x + cube_size, a.y, a.z);\n    vec3 c = vec3(a.x, a.y, a.z + cube_size);\n    vec3 d = vec3(a.x, a.y + cube_size, a.z);\n    \n    cube.a = a; cube.b = b; cube.c = c; cube.d = d;\n    \n    cube.a = around_x(cube.a, a.yz+vec2(cube_size*.5), time*1.5);\n    cube.b = around_x(cube.b, a.yz+vec2(cube_size*.5), time*1.5);\n    cube.c = around_x(cube.c, a.yz+vec2(cube_size*.5), time*1.5);\n    cube.d = around_x(cube.d, a.yz+vec2(cube_size*.5), time*1.5);\n    \n    cube.a = around_y(cube.a, a.xz+vec2(cube_size*.5), time);\n    cube.b = around_y(cube.b, a.xz+vec2(cube_size*.5), time);\n    cube.c = around_y(cube.c, a.xz+vec2(cube_size*.5), time);\n    cube.d = around_y(cube.d, a.xz+vec2(cube_size*.5), time);\n    \n    cube.a = around_z(cube.a, a.xy+vec2(cube_size*.5), time*.4);\n    cube.b = around_z(cube.b, a.xy+vec2(cube_size*.5), time*.4);\n    cube.c = around_z(cube.c, a.xy+vec2(cube_size*.5), time*.4);\n    cube.d = around_z(cube.d, a.xy+vec2(cube_size*.5), time*.4);\n    \n    Ball ball;\n    ball.center = a + vec3(cube_size*.5, n, cube_size*.5); \n    ball.radius = min_res*.4;\n    \n    figure_data cube_data = ray_and_cube(cube, pix, foc_z);\n    figure_data tetr_data = ray_and_tetr(tetr, pix, foc_z);\n    figure_data tr1_data = ray_and_triangle(tr1, pix, foc_z);\n    figure_data tr2_data = ray_and_triangle(tr2, pix, foc_z);\n    figure_data ball_data = ray_and_ball(ball, pix, foc_z);\n    \n    vec3 dot_int_tr1 = ray_and_plane(tr1.a, tr1.b, tr1.c, pix, foc_z);\n    vec3 dot_int_tr2 = ray_and_plane(tr2.a, tr2.b, tr2.c, pix, foc_z);\n    \n    if (cube_data.cros && cube_data.z < tetr_data.z && \n          cube_data.z < tr1_data.z && cube_data.z < tr2_data.z && cube_data.z < ball_data.z) col = cols[cube_data.nom_col];\n    else if (tetr_data.cros && tetr_data.z < tr1_data.z && \n             tetr_data.z < tr2_data.z && tetr_data.z < ball_data.z) col = cols[tetr_data.nom_col];\n    else if (tr1_data.cros && tr1_data.z<tr2_data.z && tr1_data.z < ball_data.z) col = col_of_triangle(dot_int_tr1, tr1_coord, vec3(0., 0., .5));\n    else if (tr2_data.cros && tr2_data.z < ball_data.z) col = col_of_triangle(dot_int_tr2, tr2_coord, vec3(0.));\n    else if (ball_data.cros) col = vec3(1., .6, 0.);\n    //boot scene\n    if (iTime < boot_time+first_scene){\n        if (pix_in_boot_ring(pix, r, R, -iTime*3.)) col = vec3(.3, .7, .75);\n        else if (pix_in_boot_line(pix, boot_coord, n*.05)){\n            if (pix.x < boot_coord.x + (iTime-first_scene)*(m-boot_coord.x*2.)/9.8) col = vec3(0., .9, 0.);\n        else col = vec3(0.);\n        }\n        else col -= vec3(.8);\n    }\n    }\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}