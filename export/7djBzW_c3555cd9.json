{"ver":"0.1","info":{"id":"7djBzW","date":"1645784417","viewed":279,"name":"I Stand With Ukraine","username":"stegu","description":"Words fail me.","likes":29,"published":1,"flags":0,"usePreview":0,"tags":["noise","flag","ukraine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 flagColor, in vec2 flagCoord )\n{\n    // Approximate \"raw\" RGB colors, from the official flag spec\n    vec3 ua_blu = vec3(0.0, 0.34, 0.72);\n    vec3 ua_yel = vec3(1.0, 0.84, 0.0);\n\n    vec3 bg = vec3(0.0);\n\n    // Map [-1,1] square with aspect 1:1 centered in viewport\n    vec2 uv = (2.0*flagCoord.xy-iResolution.xy)/min(iResolution.x, iResolution.y);\n\n    vec2 gsum, g;\n    float n, wave, mask, wear, shading;\n    n = psrdnoise(uv*vec2(2.0,1.0)-iTime*vec2(1.0,0.0), vec2(0.0), iTime, gsum);\n    wave = smoothstep(-1.0, 0.0, uv.x); // Wave more with distance from the flagpole\n    n = psrdnoise(uv*vec2(4.0,2.0)-iTime*vec2(2.0,0.0), vec2(0.0), 2.0*iTime, g);\n    gsum += wave*0.5*g; // Dampen high freq wrinkles even more near the pole\n    uv += wave*gsum*vec2(0.005, 0.02); // Move more up-down than right-left\n    uv.y += (uv.x+1.0)*(uv.x+1.0)*0.05; // Droop slightly at the free end\n    // The flag's official proportions are 2:3\n    mask = 1.0-max(aastep(1.0, abs(uv.x)), aastep(2.0/3.0, abs(uv.y)));\n    // No lighting model, just some \"plausible\" variation in shading\n    shading = 1.0-wave*0.02*max(0.0,dot(g,vec2(0.71)));\n    // Update 03-27: Some slight but proud wear after one month of terror\n    n = psrdnoise(uv*vec2(15.0,30.0), vec2(0.0), 0.0, g);\n    n += 0.5*psrdnoise(uv*vec2(35.0,70.0), vec2(0.0), 0.0, g);\n    float fray = aastep(8.0*(4.0*uv.x+uv.y-4.4), n); // Nowhere near in tatters yet!\n\n    vec3 ua_colors = shading*mix(ua_yel, ua_blu, aastep(0.0, uv.y));\n    flagColor = vec4(mix(bg, ua_colors, mask*fray), 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Screen-space auto-derivative anti-aliased step()\nfloat aastep(float threshold, float value) {\n\tfloat afwidth = 0.7 * length(vec2(dFdx(value), dFdy(value)));\n\treturn smoothstep(threshold-afwidth, threshold+afwidth, value);\n}\n\n// psrdnoise (c) Stefan Gustavson and Ian McEwan,\n// ver. 2021-12-02, published under the MIT license:\n// https://github.com/stegu/psrdnoise/\n\nfloat psrdnoise(vec2 x, vec2 period, float alpha, out vec2 gradient)\n{\n\tvec2 uv = vec2(x.x+x.y*0.5, x.y);\n\tvec2 i0 = floor(uv), f0 = fract(uv);\n\tfloat cmp = step(f0.y, f0.x);\n\tvec2 o1 = vec2(cmp, 1.0-cmp);\n\tvec2 i1 = i0 + o1, i2 = i0 + 1.0;\n\tvec2 v0 = vec2(i0.x - i0.y*0.5, i0.y);\n\tvec2 v1 = vec2(v0.x + o1.x - o1.y*0.5, v0.y + o1.y);\n\tvec2 v2 = vec2(v0.x + 0.5, v0.y + 1.0);\n\tvec2 x0 = x - v0, x1 = x - v1, x2 = x - v2;\n\tvec3 iu, iv, xw, yw;\n\tif(any(greaterThan(period, vec2(0.0)))) {\n\t\txw = vec3(v0.x, v1.x, v2.x);\n\t\tyw = vec3(v0.y, v1.y, v2.y);\n\t\tif(period.x > 0.0)\n\t\t\txw = mod(vec3(v0.x, v1.x, v2.x), period.x);\n\t\tif(period.y > 0.0)\n\t\t\tyw = mod(vec3(v0.y, v1.y, v2.y), period.y);\n\t\tiu = floor(xw + 0.5*yw + 0.5); iv = floor(yw + 0.5);\n\t} else {\n\t\tiu = vec3(i0.x, i1.x, i2.x); iv = vec3(i0.y, i1.y, i2.y);\n\t}\n\tvec3 hash = mod(iu, 289.0);\n\thash = mod((hash*51.0 + 2.0)*hash + iv, 289.0);\n\thash = mod((hash*34.0 + 10.0)*hash, 289.0);\n\tvec3 psi = hash*0.07482 + alpha;\n\tvec3 gx = cos(psi); vec3 gy = sin(psi);\n\tvec2 g0 = vec2(gx.x, gy.x);\n\tvec2 g1 = vec2(gx.y, gy.y);\n\tvec2 g2 = vec2(gx.z, gy.z);\n\tvec3 w = 0.8 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2));\n\tw = max(w, 0.0); vec3 w2 = w*w; vec3 w4 = w2*w2;\n\tvec3 gdotx = vec3(dot(g0, x0), dot(g1, x1), dot(g2, x2));\n\tfloat n = dot(w4, gdotx);\n\tvec3 w3 = w2*w; vec3 dw = -8.0*w3*gdotx;\n\tvec2 dn0 = w4.x*g0 + dw.x*x0;\n\tvec2 dn1 = w4.y*g1 + dw.y*x1;\n\tvec2 dn2 = w4.z*g2 + dw.z*x2;\n\tgradient = 10.9*(dn0 + dn1 + dn2);\n\treturn 10.9*n;\n}\n","name":"Common","description":"","type":"common"}]}