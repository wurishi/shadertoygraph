{"ver":"0.1","info":{"id":"tdjfRt","date":"1590642400","viewed":289,"name":"Over the Moon Pt. 2 :P","username":"hopeliz","description":"Followed The Art of Code's \"Over the Moon\" tutorial: https://youtu.be/XaiYKkxvrFM\nCreated for Day 17 of a 100 Days of Shaders and Textures project","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["trees","pretty","randomness"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a, b, t)\n\nfloat createTaperBox(vec2 point, float bottomWidth, float topWidth, float yBottom, float yTop, float blur) {\n    // Bottom edge    \n    float m = S(-blur, blur, point.y - yBottom);\n    // Top edge\n    m *= S(blur, -blur, point.y - yTop);\n    // Sides, mirrored\n    point.x = abs(point.x);\n    \n    float w = mix(bottomWidth, topWidth, (point.y - yBottom) / (yTop - yBottom));\n    m *= S(blur, -blur, point.x - w);\n    \n    return m;\n}\n\nvec4 createTree(vec2 uv, vec3 color, float blur) {\n    \n    // --- Trunk ---\n    float m = createTaperBox(uv, 0.03, 0.03, -0.05, 0.25, blur);\n    // --- Canopy 1 ---\n    m += createTaperBox(uv, 0.2, 0.1, 0.25, 0.5, blur);\n    // --- Canopy 2 ---\n    m += createTaperBox(uv, 0.15, 0.05, 0.5, 0.75, blur);\n    // --- Top ---\n    m += createTaperBox(uv, 0.1, 0.0, 0.75, 1.0, blur);\n    \n    float shadow = createTaperBox(uv - vec2(0.2, 0.0), 0.1, 0.5, 0.15, 0.25, blur);\n    shadow += createTaperBox(uv + vec2(0.25, 0.0), 0.1, 0.5, 0.45, 0.5, blur);\n    shadow += createTaperBox(uv - vec2(0.2, 0.0), 0.1, 0.5, 0.7, 0.75, blur);\n    color -= shadow * 0.8;\n    //m = 1.0;\n    \n    return vec4(color, m);\n}\n\nfloat GetHeight(float x) {\n    return sin(x * 0.435) + sin(x) * 0.3;\n}\n\nvec4 createLayer(vec2 uv, float blur) {\n    vec4 color = vec4(0.0);\n    \n    float id = floor(uv.x);\n    float n = fract(sin(id * 256.12) * 6854.3) * 2.0 - 1.0;\n    float x = n * 0.3;\n    float y = GetHeight(uv.x);\n    \n    // Ground\n    float ground = S(blur, -blur, uv.y + y);\n    color += ground;\n    \n    y = GetHeight(id + 0.5 + x);\n    \n    uv.x = fract(uv.x) - 0.5;\n    vec4 tree = createTree((uv - vec2(x, -y)) * vec2(1.0, 1.0 + n * 0.25), vec3(1.0), blur);\n    \n    color = mix(color, tree, tree.a);\n    color.a = max(ground, tree.a);\n    return color;\n}\n\nfloat Hash21(vec2 point) {\n    point = fract(point * vec2(1462.34, 1026.75));\n    point += dot(point, point + 864.23);\n    \n    return fract(point.x * point.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    // Move origin to the center\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 mouse = (iMouse.xy / iResolution.xy) * 2.0 - 1.0;\n    float time = iTime * 0.3;\n    \n    \n    //uv.x += iTime * 0.1;\n\t//uv.y += 0.5;\n    //uv *= 5.0;\n    \n    float blur = 0.005;\n    \n    // Initialize color\n    vec4 color = vec4(0.0);\n    vec4 layer;\n    \n    color *= 0.0;\n    float twinkle = dot(length(sin(uv + time)), length(cos(uv * vec2(22.0, 6.7) - time * 3.0)));\n    twinkle = sin(twinkle * 10.0) * 0.5 + 0.5 * 4.5;\n    \n    float dawn = S(-0.75, 0.4, -uv.y);\n    \n    float stars = pow(Hash21(uv), 60.0 * twinkle);\n    color += stars;\n    color.rgb -= vec3(0.5, 0.9, 0.1);\n    color += dawn;\n    \n    //float moon = S(0.01, -0.01, length(uv + vec2(-0.65, -0.275)) - 0.1);\n    float moon = S(0.0075, -0.0035, length(uv - vec2(0.47, 0.29)) - 0.1);\n    moon *= S(-0.075, 0.005, length(uv - vec2(0.43, 0.325)) - 0.175);\n    color.rgb += vec3(0.6);\n    color += moon;\n    \n    for (float i = 0.0; i < 1.0; i += 1.0 / 7.0) {\n        float scale = mix(10.0, 1.0, i);\n        blur = mix(0.02, 0.005, i);\n    \tlayer = createLayer(uv * scale + vec2(time + i * 50.0, i) - mouse, blur);\n        layer.rgb *= (1.0 - i) * vec3(0.3, 0.5, 1.0) * 1.2;\n        color = mix(color, layer, layer.a);\n    }\n    \n    layer = createLayer(uv + vec2(time , 1.0) - mouse, blur * 3.0);\n    color = mix(color, layer * 0.002, layer.a);\n    \n    float thickness = 1.0 / iResolution.y;\n    \n    \n    \n    // See axes\n    //if (abs(uv.x) < thickness) { color.g = 1.0; }\n    //if (abs(uv.y) < thickness) { color.r = 1.0; }\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}