{"ver":"0.1","info":{"id":"cs2SWz","date":"1670161515","viewed":132,"name":"raycast-generate","username":"Kolya142","description":"raycast-generate.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["raycast","generate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(a) mat2(cos( a+ vec4(0,33,11,0) ))\nfloat f(vec2 uv) {\n    return texture(iChannel1, uv).w;\n}\nvec3 castRay( const vec3 ro, const vec3 rd, float resT )\n{\n    float dt = 0.01f;\n    const float mint = 0.001f;\n    const float maxt = 300.0f;\n    float lh = 0.0f;\n    float ly = 0.0f;\n    for( float t = mint; t < maxt; t += dt )\n    {\n        vec3  p = ro + rd*t;\n        float h = f( p.xz / maxt)*maxt/2.;\n        if( p.y < h )\n        {\n            return texture(iChannel1, p.xz / maxt).rgb;\n        }\n        // allow the error to be proportinal to the distance\n        dt = 0.01f*t;\n        lh = h;\n        ly = p.y;\n    }\n    return texture(iChannel0, rd).rgb;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 vuv = fragCoord/iResolution.xy;\n    vuv.x *= iResolution.x / iResolution.y;\n    vuv.x -= .5;\n    vec2 uv = vuv * 2. - 1.;\n    vec2 M = vec2(-.7, .5);\n    vec3 rd = normalize(vec3(uv, 1.));\n    rd.yz *= rot(M.y);\n    rd.xz *= rot(M.x);\n    vec3 ro = vec3(0.);\n    ro.y = 200.;\n    //ro.x += iTime;\n\n    // Time varying pixel color\n    vec3 col = castRay(ro, rd, 1.);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = uv+(iTime/3.);\n    float n = noise(p*3.);\n    vec3 col;\n    \n    if (n < .1) {\n        col = vec3(.2, .2, .8);\n    }\n    else {\n        if (n < .3) {\n            col = vec3(.8, .7, .2);\n        }\n        else {\n            if (n < .7) {\n                col = vec3(.2, .8, .2);\n            }\n            else {\n                col = vec3(.8, .7, .86);\n            }\n        }\n    }\n    // Time varying pixel color\n\n    // Output to screen\n    fragColor = vec4(col,n);\n}","name":"Buffer A","description":"","type":"buffer"}]}