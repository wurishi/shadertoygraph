{"ver":"0.1","info":{"id":"ml3XRf","date":"1685646182","viewed":83,"name":"Texels - Shader Data Simplified","username":"Dirk","description":"This is a simple example of how shader programs CRED( Create, Read, Edit, Delete ) data.\nThe first grey strip is stored data of value 0.5.\nThe second grey strip is persistently updated data.\nAll other partitioned data is garbage collected.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["tutorial","data","cs","texels","bufferdata","computerscience"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n    // PIXEL SHADER //\n    \n    // The Pixel Shader is the main shader program.\n    \n    // This main \"Controller\" Shader uses Buffer Layers, External Functions and Macros.\n    // It recieves a pixel coordinate \"xy\" and returns a color \"rgba\".\n    // Any variable in the main shader may be retrieve from it's texel BufferA.\n\n\n    V loop( out v4 rbga, in v2 xy ){\n        \n        v2 p = (2.0*xy-iR.xy)/iR.y; // Convert Pixel Space to Centered Screen Space\n        \n        v3 c = v3(0.0);   // Set Clear Color\n        \n        F  d = L(p)-0.5;  // Generate a Model - SDF( Signed Distance Function/Field )\n        \n        d = S(d);         // Smoothstep SDF Function Result\n        \n        c = v3(d);        // Final Color\n        \n        rbga = T(i2(xy)); // Data Shader Output\n        \n        //rbga = v4(c,1.0); // Color Shader Output\n        \n    }","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n\n    // MACROS //\n    \n    // These definitions are symantic short-cuts\n    // This notation can help humans work at higher levels by using less notation.\n    // Macro notation does not effect performance, it is for readablity/typeablity only.\n    // Upon compilation the code is converted into it's native form.\n    // Therefore macro definitions are not visible to the application which runs the shader.\n    // When building your own macro library it is important to plane ahead your namespace rules.\n\n\n    #define loop mainImage\n    \n    #define iR iResolution\n    #define iM iMouse\n    #define iF iFrame\n    #define iT iTime\n    \n    #define v2 vec2\n    #define v3 vec3\n    #define v4 vec4\n    \n    #define m2 mat2\n    #define m3 mat3\n    #define m4 mat4\n    \n    #define i2 ivec2\n    #define i3 ivec3\n    #define i4 ivec4\n    \n    #define pi 3.14159265\n    #define e v4( 0.0, 0.0001, 0.5, 20.0 )\n    \n    #define V void\n    #define K fract\n    #define L length\n    #define F float\n    #define I int\n    #define T(uv) texelFetch( iChannel0, uv, 0 )\n    #define S(p)  smoothstep( e.x, e.y, p )","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\n    // TEXEL SHADER //\n    \n    // The Texel Shader is a data shader.\n    \n    // This Buffer Shader uses CRED Architecture to utilize the pixels like a virtual machine.\n    // The main restrictions of this approach to computing is the heavy lifting on the GPU.\n    // However, stored or externally calculated data may be passed rapidly to the Shader Program.\n    // In a real pipeline like Vulkan or Unreal supporting data may be passed to this layer\n    // by adding other Buffers and Uniform/Varying Variable.\n    // This serves to eliveate the GPU's workload. While providing internal data states and access.\n    \n\n    V loop( out v4 data, in v2 uv ){\n    \n        i2 ad = i2(uv);  // Pixel Address\n        \n        v4 d = v4(0.0);  // Declare Data Variable\n        \n        if( iF == 0 ){   // Init - frame 0\n        \n            d = v4(0.5); // Declare Data on Load\n            \n        }else{\n        \n            I rs = 128,  // RAM Partition Size\n              r1 = 0,    // RAM Partition 1 Address\n              r2 = 1;    // RAM Partition 2 Address\n        \n            if(  ad.x > rs*r1 && ad.x < rs*(r1+1) ){ // Partition1 - Keep Data\n            \n                d = T(ad); // Retrieve Data\n                \n            }else if( ad.x > rs*r2 && ad.x < rs*(r2+1) ){ // Partition2 - Edit Data\n            \n                d = T(ad); // Retrieve Data\n                \n                d = (d.x<=1.0) ? d+0.001 : d; // Edit Data based on conditions\n                \n            }else{ // Unpartitioned Ram\n            \n                d = v4(0.0); // Delete Data\n                \n            } \n        }\n        \n        data = d; //Store Updated Data for shader program access\n        \n    }","name":"Buffer A","description":"","type":"buffer"}]}