{"ver":"0.1","info":{"id":"4fc3Dj","date":"1712112684","viewed":140,"name":"exercise 2d other","username":"jorge2017a2","description":"exercise 2d other","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["exercise2dother"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a2\n///exercise 2d other---2-abril-2024\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.5),0. , d - (b) )\n#define S2(d,b) smoothstep(8.0*antialiasing(1.5),0.,d - (b) )\n\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\nvec3 D2(vec3 pColObj, vec3 colOut, float distObj ) \n{  colOut = mix(colOut,pColObj ,S2( distObj,0.0)); return colOut; }\n\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\n\n// distance to segment  ///iq\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b, in float th )\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    vec2  q = pa-h*ba;\n    return length(q) - th;\n}\n\nvec2 cs(float x)\n{ return vec2(cos(x),sin(x) );}\n\n\nvec2 MoverBrazo(vec2 p0, float ang, float l1)\n{  return p0+l1*cs(ang);}\n\n\nvec3 cabeza(vec2 p, vec3 colout)\n{   vec2 pos, med;\n    pos=vec2(1.45,2.98);\n    med=vec2(0.67,0.55);\n    float d1=sdEllipse(p-pos,med);\n    colout=D2(vec3(0.5), colout, d1);\n    \n    pos=vec2(1.47,3.19);\n    med=vec2(0.62,0.6);\n    float d2=sdEllipse(p-pos,med);\n    float dfin=min(d1, d2);\n    colout=D2(vec3(0.5), colout,dfin);\n    return colout;\n}\n\nvec3 orejas(vec2 p, vec3 colout)\n{   vec2 pos=vec2(1.04,3.58);\n    vec2 med=vec2(0.16,0.27);\n    float d3=sdEllipse(p-pos,med);\n    colout=D2(vec3(0.25), colout,d3);\n    pos=vec2(1.9,3.6);\n    med=vec2(0.11,0.27);\n    float d4=sdEllipse(p-pos,med);\n    colout=D2(vec3(0.25), colout,d4);\n    return colout;\n}\n\nvec3 ojos(vec2 p, vec3 colout)\n{\n    vec2 pos=vec2(1.64,3.35);\n    vec2 med=vec2(0.08,0.15);\n    float ang = 15. * PI / 180.0;\n    vec2 pr = Rotate(p-pos, med, ang);\n    float d5  = sdEllipse(pr, med);\n    colout=D2(vec3(0.05), colout,d5);\n    \n    pos=vec2(1.21,3.3);\n    med=vec2(0.08,0.15);\n     ang = 15. * PI / 180.0;\n     pr = Rotate(p-pos, med, ang);\n    float d6  = sdEllipse(pr, med);\n    colout = D2(vec3(0.05), colout, d6);\n    \n    return colout;\n}    \n\nvec3 pansa(vec2 p, vec3 colout)\n{\n    vec2 pos=vec2(1.52,1.52);\n    vec2 med=vec2(0.57,0.72);\n    float d8=sdEllipse(p-pos,med);\n    colout = D2(vec3(0.45), colout, d8);\n    return colout;\n}\n\nvec3 cuello(vec2 p, vec3 colout)\n{\n    vec2 pos=vec2(1.48,2.32);\n    vec2 med=vec2(0.11,0.145);\n    float d9= sdBox(p-pos, med );\n    colout=D2(vec3(0.2), colout, d9);\n    colout = D2(vec3(0.35), colout, d9);\n    return colout;\n}\n\nvec3 brazoIzq(vec2 p, vec3 colout)\n{\n    float ang,r1;\n    vec2 A=vec2(1.1,2.0);\n    ang=radians(180.0*sin(iTime)); r1=0.8;\n    vec2 B=MoverBrazo(A, ang, r1);\n    float d2= sdSegment(p, A,B, 0.1 );\n    colout=D2(vec3(0.25),colout, d2);\n    \n    return colout;\n}\n\n\nvec3 manoIzq(vec2 p, vec3 colout)\n{\n    float ang,r1;\n    vec2 A=vec2(1.1,2.0);\n    ang=radians(180.0*sin(iTime)); r1=0.8;\n    vec2 B=MoverBrazo(A, ang, r1);\n    float d3= sdCircle(p-B,0.2 );\n    colout = DrawFigBorde(vec3(0.9),colout, d3);\n    //colout = D2(vec3(0.9),colout, d3);\n    return colout;\n}\n\nvec3 brazoDer(vec2 p, vec3 colout)\n{\n    float ang,r1;\n    vec2 A,B;\n    A=vec2(2.0,2.0);\n    ang=radians(180.0*sin(iTime)); r1=0.7;\n    B=MoverBrazo(A, ang, r1);\n    float d1= sdSegment(p, A,B, 0.1 );\n    colout=D2(vec3(0.2),colout, d1);\n    \n    \n    return colout;\n}\n\nvec3 manoDer(vec2 p, vec3 colout)\n{\n    float ang,r1;\n    vec2 A,B;\n    A=vec2(2.0,2.0);\n    ang=radians(180.0*sin(iTime)); r1=0.7;\n    B=MoverBrazo(A, ang, r1);\n    //mano\n    float d3= sdCircle(p-B,0.2 );\n    colout = DrawFigBorde(vec3(0.9),colout, d3);\n    //colout = D2(vec3(0.9),colout, d3);\n    return colout;\n}\n\nvec3 piernaDer(vec2 p, vec3 colout)\n{   vec2 pos=vec2(2.02,0.77);\n    vec2 med=vec2(0.1,0.415);\n    float ang = -40. * PI / 180.0;\n    vec2 pr = Rotate(p- pos, med/2.0, ang);\n    float d12 = sdBox(pr, med);\n    //colout = DrawFigBorde(vec3(0.3), colout, d12);\n    colout =D2(vec3(0.3), colout, d12);\n    return colout;\n}\n\nvec3 piernaIzq(vec2 p, vec3 colout)\n{   vec2 pos=vec2(1.28,0.64);\n    vec2 med=vec2(0.1,0.415);\n    float ang = 40. * PI / 180.0;\n    vec2 pr = Rotate(p- pos, med/2.0, ang);\n    float d13 = sdBox(pr, med);\n    //colout = DrawFigBorde(vec3(0.3), colout, d13);\n    colout = D2(vec3(0.3), colout, d13);\n    return colout;\n}\n\n\nvec3 pieIzq(vec2 p, vec3 colout)\n{   vec2 pos=vec2(2.621,0.048);\n    vec2 med=vec2(0.12,0.28);\n    //rotar\n    float ang = 90. * PI / 180.0;\n    vec2 pr = Rotate(p-pos, med, ang);\n    float d16  = sdEllipse(pr, med);\n    colout = DrawFigBorde(vec3(1.0), colout, d16);\n    //colout = D2(vec3(1.0), colout, d16);\n    return colout;\n}\n\nvec3 pieDer(vec2 p, vec3 colout)\n{\n    vec2 pos=vec2(1.12,0.023);\n    vec2 med=vec2(0.12,0.28);\n    \n    float ang = 90. * PI / 180.0;\n    vec2 pr = Rotate(p-pos, med, ang);\n    float d18  = sdEllipse(pr, med);\n    colout = DrawFigBorde(vec3(1.0), colout, d18);\n    //colout = D2(vec3(1.0), colout, d18);\n    return colout;\n}\n\nvec3 boca(vec2 p, vec3 colout)\n{   vec2 pc1p1=vec2(1.120,2.900);\n    vec2 pc1p2=vec2(1.430,2.540);\n    vec2 pc1p3=vec2(1.750,2.980);\n   float d1= sdBezier(p,pc1p1,pc1p2,pc1p3);\n    colout=D2(vec3(0.0),colout,d1);\n    return colout;\n}\n\nvec3 mar(vec2 uv, vec3 colout)\n{   //https://www.shadertoy.com/view/lfdGz8\n    float time = iTime * 1.0;\n    float distortion = sin(uv.y * 15.0 + time) * 0.1;\n    float wave = sin((uv.x + uv.y * 0.8) * 18.0 + time) * 0.1+0.875;\n    vec3 waterColor = vec3(0.0, 0.6, 1.0);\n    // Final color distortion and wave animation\n    //vec3 col = waterColor + vec3(distortion, wave, distortion);\n    //colout=mix(col, colout, wave);\n    colout=mix(waterColor, colout, wave);\n    return colout;\n}\n\n\nvec3 pasto(vec2 p, vec3 colout)\n{   float d1=0.1*sin(p.x*10.0)+1.5+p.y;\n    d1=abs(d1)-1.7;\n    vec3 cm=mar(p,colout);\n    colout=D2(vec3(0.0,1.0,0.0)*cm,colout,d1);\n    return colout;\n}\n\nvec3 gato(vec2 p, vec3 colout)\n{   vec2 pos,med;\n    colout=orejas(p,colout);\n    colout=cuello(p,colout);\n    \n    colout=cabeza(p, colout);\n    colout=ojos(p,colout);\n    colout=boca(p,colout);\n    \n    colout=piernaIzq(p,colout);\n    colout=piernaDer(p,colout);\n    colout=pieIzq(p,colout);\n    colout=pieDer(p,colout);\n    \n    colout=pansa(p,colout);\n    \n    \n    colout=brazoIzq(p,colout);\n    colout=brazoDer(p,colout);\n    colout=manoDer(p,colout);\n    colout=manoIzq(p,colout);\n    \n    colout=pasto(p, colout);\n    return colout;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n        \n    uv-=vec2(0.0,-0.5);\n    float t=iTime;\n    float esc=5.0+1.5*sin(t*2.0);\n    //uv.y+=fract(t*0.5)*0.25;\n    uv*=esc;\n    vec2 uv0=uv;\n    vec3 col=vec3(1.0,0.0,0.0);    \n    //https://www.shadertoy.com/view/Xcd3Rl\n    float d = 1.5/length(uv-vec2(0.0,5.5));\n    // Time varying pixel color\n    \n    float op=abs(4.0*sin(t*0.5));\n    if(op>0.0)\n    col = vec3(0.0,0.5,1.0);  //Azul\n    if(op>1.0)\n    col = vec3(1.0,0.5,0.4); //cafe\n    if(op>2.0)\n    col = vec3(1.0,0.5,1.0);  //violeta\n    if(op>3.0)\n    col = vec3(0.2,0.4,0.2);  //verde\n    col *= d;\n    \n    col= gato(uv, col);\n    \n    col=pow(col,  vec3(0.554545));\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\n\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\n\n\n\n//Quadratic Bezier - exact   (https://www.shadertoy.com/view/MlKcDD)\n\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n","name":"Common","description":"","type":"common"}]}