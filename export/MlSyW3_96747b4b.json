{"ver":"0.1","info":{"id":"MlSyW3","date":"1510449291","viewed":451,"name":"Boiling melting smoke","username":"twenkid","description":"A practice, starting from an Electricity spark shader - https://www.shadertoy.com/view/MsSfRD  by Coolok - and mutating it. Could be a a basis of a background of a title sequence shader.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["electricity","modified"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Todor Arnaudov playing, \"Boiling melting smoke\"-something, starting with\n//https://www.shadertoy.com/view/MsSfRD by Coolok\n//10-11-2017\n\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\nfloat simplex3d(vec3 p) {\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec4 w, d;\n\t \n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t return dot(d, vec4(52.0));\n}\n\nfloat noise(vec3 m) {\n    return   0.5333333*simplex3d(m)\n\t\t\t+0.2666667*simplex3d(2.0*m)\n\t\t\t+0.1333333*simplex3d(4.0*m)\n\t\t\t+0.0666667*simplex3d(8.0*m);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float aspect = iResolution.y / iResolution.x; \n  vec2 uv = fragCoord.xy / iResolution.xy;  \n  //  uv.y *= 1.5+0.5*sin(iTime);\n  uv = uv * 2. -1.;  \n \n // vec2 p = fragCoord.xy*(sin(fragCoord.x))/iResolution.x*(cos(fragCoord.y));  \n  //vec2 p = fragCoord.xy*(sin(fragCoord.x))/iResolution.x*(cos(fragCoord.y));\n  vec2 p = fragCoord.xy/iResolution.x;\n  //p*=p*p*p*p; //lower frequency from the left\n  vec3 p3 = vec3(p, iTime*0.4*0.5);    \n  \n  float a = sin(iTime/299.);\n  mat2 rot = mat2(vec2(sin(a), cos(a)), vec2(cos(a), -sin(a)));\n  //mat2 tr = mat2(vec2(sin(a), cos(a)), vec2(cos(a), -sin(a)));\n  p3.xy*=rot;\n  p3.yz*=rot;\n  p3.xz*=rot;\n                 \n  \n  float intensity = noise(vec3(p3*12.0+12.0));\n    \n  float border = max(1.0, 1.0 + abs(sin(iTime)));\n  //float t = clamp((uv.x * -uv.x * 0.16) + 0.15, 0., 1.);                         \n  float t = clamp((uv.x * -uv.x * border) + 0.15, 0., 1.);  \n    \n  //t = clamp((uv.x*(max(min(cos(iTime), 0.5), 1.)) * -uv.x * border) + 0.15, 0., 1.);  \n  \n  float y;\n    \n  y = abs(intensity * -t + uv.y);//*sin(iTime); electricity\n  \n //Covers the screen\n  //y = abs(intensity*5. * -t + uv.y*sin(iTime/2.));//*sin(iTime);  //inverted, ...\n  \n    //\n  y = abs(clamp(intensity*2., 0.2, 1.0) * -t + uv.y*sin(iTime/2.));//*sin(iTime);\n  //y = abs(intensity * -t + uv.y*(1.5 + (sin(iTime/4.))));//*sin(iTime);\n    \n  float g = pow(y, 0.2);\n                          \n  vec3 col = vec3(1.70, 1.48, 1.78);\n  col = col * -g + col;                    \n  col = col * col;\n  col = col * col;\n    \n  col*=1.0-distance(p, vec2(0.5, 0.5*aspect))*cos(iTime)*5.; //Circle\n  col*=vec3(0.3, 0.8, 1.8); //Blue-ish\n    \n  if (sin(iTime)>0.5){\n    vec3 back = texture(iChannel0, p).rgb * noise(vec3(p3*6.+3.));\n    back*=vec3(9., 1.2, 1.3);\n    col = mix(col, back, 0.1);\n  }\n  //col = mix(col, texture(iChannel0, p).rgb, 0.1);  //OK\n  \n    \n // y = abs(intensity*5. * -t + uv.y*sin(iTime/2.));    \n // g = pow(y, 0.2);\n // col = min(col, vec3(1.70*(-g), 1.48*1.48, 1.78*1.78)/10.);\n  \n  fragColor.rgb = col;                          \n  fragColor.w = 1.;  \n}","name":"Image","description":"","type":"image"}]}