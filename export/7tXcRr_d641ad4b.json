{"ver":"0.1","info":{"id":"7tXcRr","date":"1647431785","viewed":455,"name":"QR Code Generator","username":"midorikuma","description":"Let's put in any number you like.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["2d","photo","qr","generator","qrcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//Enter numbers (0 - 1000000)\nconst int text = 1234567;\n\n//Referenced sites\n//https://www.nayuki.io/page/creating-a-qr-code-step-by-step\n//https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders\n\n//number of arrays\nconst int Ct = 19;\nconst int Cnsym = 7;\nconst int Ca = Ct + Cnsym;\nconst int gen = Cnsym + 1;\n\n//converter n,v->c\nint setc(int n, int v) {\n    int nd = 1 << (8 - n);\n    return (nd <= v * 2) ? v % nd * 2 / nd : 0;\n}\n\n//set position pattern\nvoid sq(ivec2 p, ivec2 ss, ivec2 se, int v, inout int c) {\n    if(all(lessThanEqual(ss, p)) && all(lessThanEqual(p, se)))\n        c = v;\n}\nvoid corner(ivec2 p, ivec2 s, inout int c) {\n    p -= s;\n    s = sign(s);\n    sq(p, ivec2(1), ivec2(8), 0, c);\n    sq(p, 1 + s, 7 + s, 1, c);\n    sq(p, 2 + s, 6 + s, 0, c);\n    sq(p, 3 + s, 5 + s, 1, c);\n}\n//set zigzag data number\nint ylen(int py, int l) {\n    ivec2 se;\n    if(l <= 4) {\n        se = ivec2(0, 12);\n    } else if(l <= 6) {\n        se = ivec2(0, 20);\n    } else {\n        se = ivec2(8, 4);\n    }\n    py -= se.x;\n    return (l % 2 == 1) ? py - 1 : se.y - py;\n}\n//data storage msg_in\nvoid bytes(inout int nn, int v, int d, inout int msg_in[Ct], inout int intemp) {\n    for(int i = d; 0 < i; i--) {\n        int nt = 7 - (nn - 1) % 8;\n        intemp += (1 << nt) * setc(8 - i, v);\n        if(nt <= 0) {\n            msg_in[(nn - 1) / 8] = intemp;\n            intemp = 0;\n        }\n        nn += 1;\n    }\n}\n//conversion from p to c (format information)\nvoid ptoc(ivec2 p, ivec2 ss, ivec2 se, int fd, inout int c) {\n    if(all(lessThanEqual(ss, p)) && all(lessThanEqual(p, se))) {\n        ivec2 ps = p - ss;\n        int n = ps.x + ps.y * (se.x - ss.x + 1);\n        if(15 < p.y)\n            n -= 1;\n        c = setc(n, fd);\n    }\n}\n\n//main\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    int i;\n    int j;\n    int k;\n    //set positions\n    vec2 p = fragCoord * 2.0 - iResolution.xy;\n    p /= min(iResolution.x, iResolution.y);\n    float f = float(abs(p.x) < 1.0 && abs(p.y) < 1.0);\n    p = (p + 1.0) / 2.0;\n    p = ceil(p * 21.0);\n    p += vec2(step(p.x, 0.0), step(p.y, 0.0));\n    ivec2 pbl = ivec2(p);\n    ivec2 pul = ivec2(pbl.x, 22 - pbl.y);\n    int c = -1;\n    vec2 fpbr = vec2(22.0 - p.x, p.y);\n    fpbr -= step(16.0, fpbr);\n    ivec2 pbr = ivec2(fpbr);\n    //set data number\n    int l = (pbr.x + 1) / 2;\n    int n = 24 * (clamp(l, 1, 5) - 1) + 40 * (clamp(l, 5, 7) - 5) + 8 * (clamp(l, 7, 10) - 7) + ylen(pbr.y, l) * 2 + (pbr.x + 1) % 2 + 1;\n    int nn = 1;\n\n    //Main data\n    //mode(1,4)\n    int intemp = 0;\n    int msg_in[Ct];\n    bytes(nn, 1, 4, msg_in, intemp);\n    //count(count,10)\n    float t = float(text);\n    int digi = int(log2(t) / log2(10.0)) + 1;\n    if(text == 0)\n        digi = 1;\n    bytes(nn, digi, 10, msg_in, intemp);\n    //character data\n    for(i = 1; i <= digi / 3 + 1; i++) {\n        int ln = 3 * i - digi;\n        ln = 3 - ln * int(0 <= ln);\n        int dn = digi - (i - 1) * 3;\n        int vn = int(mod(t, pow(10.0, float(dn))) / pow(10.0, float(dn - ln)));\n        bytes(nn, vn, ln * 3 + 1, msg_in, intemp);\n    }\n    //terminator(0,4)\n    bytes(nn, 0, 4, msg_in, intemp);\n    //bit padding(0,nbit)\n    int nbyte = (152 - nn + 1) / 8;\n    int nbit = (152 - nn + 1) - nbyte * 8;\n    bytes(nn, 0, nbit, msg_in, intemp);\n    //byte padding(0xEC or 0x11,nbyte)\n    for(i = 1; i <= nbyte; i++) {\n        //EC,11,EC...\n        int padding = (i % 2 == 1) ? 0xEC : 0x11;\n        bytes(nn, padding, 8, msg_in, intemp);\n    }\n    //1-152\n\n    //153-208(56)\n    //Reed-Solomon error correction codes\n    //generate gf_exp gf_log\n    int gf_exp[512];\n    int gf_log[256];\n    int x = 1;\n    for(i = 0; i < 255; i++) {\n        gf_exp[i] = x;\n        gf_log[x] = i;\n        int y = 2;\n        int r = 0;\n        while(y != 0) {\n            if((y & 1) != 0)\n                r ^= x;\n            y = y >> 1;\n            x = x << 1;\n            if(256 <= x)\n                x ^= 0x11d;\n        }\n        x = r;\n    }\n    for(i = 255; i < 512; i++) {\n        gf_exp[i] = gf_exp[i - 255];\n    }\n    //generate agen\n    int agen[gen];\n    int pl = 1;\n    int ap[gen];\n    int aq[2];\n    agen[0] = 1;\n    for(i = 0; i < Cnsym; i++) {\n        ap = agen;\n        aq = int[2] (1, gf_exp[(gf_log[2] * i) % 255]);\n        pl += 1;\n        for(j = 0; j < pl; j++) {\n            agen[j] = 0;\n        }\n        for(j = 0; j < 2; j++) {\n            for(k = 0; k < pl - 1; k++) {\n                int x = ap[k];\n                int y = aq[j];\n                int gf_mul = (x == 0 || y == 0) ? 0 : gf_exp[gf_log[x] + gf_log[y]];\n                agen[k + j] ^= gf_mul;\n            }\n        }\n    }\n    //generate msg_out\n    int msg_out[Ca];\n    for(i = 0; i < Ct; i++) {\n        msg_out[i] = msg_in[i];\n    }\n    for(i = Ct; i < Ca; i++) {\n        msg_out[i] = 0;\n    }\n    int msg_all[] = msg_out;\n    for(i = 0; i < Ct; i++) {\n        int coef = msg_out[i];\n        if(coef != 0) {\n            for(j = 1; j < gen; j++) {\n                if(agen[j] != 0) {\n                    int x = agen[j];\n                    int y = coef;\n                    int gf_mul = (x == 0 || y == 0) ? 0 : gf_exp[gf_log[x] + gf_log[y]];\n                    msg_out[i + j] ^= gf_mul;\n                }\n            }\n        }\n    }\n    for(i = Ct; i < Ca; i++) {\n        msg_all[i] = msg_out[i];\n    }\n    if(c == -1) {\n        c = setc((n - 1) % 8, msg_all[(n - 1) / 8]);\n    }\n\n    //Fixed patterns\n    //set mask0\n    if(c != -1) {\n        int mf = abs(pbl.x % 2 - pbl.y % 2);\n        c = (c == mf) ? 1 : 0;\n    }\n    //set format\n    //11101111,11000100\n    //0xEF,0xC4\n    int fd1 = 0xEF;\n    int fd2 = 0xC4;\n    ptoc(pbl, ivec2(9, 1), ivec2(9, 8), fd1, c);\n    ptoc(pbl, ivec2(14, 13), ivec2(21, 13), fd2, c);\n    ptoc(pbl, ivec2(1, 13), ivec2(8, 13), fd1, c);\n    ptoc(pbl, ivec2(9, 13), ivec2(9, 21), fd2, c);\n    //set timing\n    if(pul.x == 7 || pul.y == 7) {\n        c = pul.x % 2 * pul.y % 2;\n    }\n    //set position pattern\n    corner(pul, ivec2(0), c);\n    corner(pul, ivec2(13, 0), c);\n    corner(pul, ivec2(0, 13), c);\n\n    //Output\n    vec3 col = vec3(mix(0.5, float(1 - c), f));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}