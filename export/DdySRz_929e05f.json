{"ver":"0.1","info":{"id":"DdySRz","date":"1680691223","viewed":122,"name":"Distance estimated Julia","username":"rucksack","description":"It's all... a dream.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["fractal","julia"],"hasliked":0,"parentid":"mddXR4","parentname":"so apparently this isn't julia"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int iterations = 50;\n\n// f_n(z) = f_n-1(z)^2 + c, f_0(z) = z\nvec2 next(vec2 z, vec2 c) {\n    float real = z.x * z.x - z.y * z.y + c.x;\n    float imag = 2. * z.x * z.y + c.y;\n    return vec2(real, imag);\n}\n\n// f'_n(z) = 2*f_n-1(z)*f'_n-1(z), f'_0(z) = 1\nvec2 derivative(vec2 z, vec2 dr) {\n    float real = z.x * dr.x - z.y * dr.y;\n    float imag = z.x * dr.y + z.y * dr.x;\n    return vec2(real, imag);\n}\n\nfloat map(vec2 z, vec2 c, out int i) {\n    i = 0;\n    vec2 dr = vec2(1, 0);\n    float d = 0.;\n    for (; i < iterations && length(z) < 2.*length(c); i++) {\n        z = next(z, c);\n        dr = derivative(z, dr);\n    }\n    return .5 * log(length(z)) * length(z)/length(dr);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    float r = 0.7885;\n    float a = iTime + 2.88;\n    vec2 c = r * vec2(cos(a), sin(a));\n    //c = vec2(-0.4, 0.2);\n    \n    uv *= 3.*r; \n    int escape_time;\n    float d = map(uv, c, escape_time);\n    float f1 = (1. - .2*sqrt(d));\n    float f2 = sqrt(.4*abs(d));\n    float esc = float(10 + escape_time) / float(iterations);\n    vec3 col = esc * vec3(f2, 1, f1);\n\n    fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}