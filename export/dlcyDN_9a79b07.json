{"ver":"0.1","info":{"id":"dlcyDN","date":"1699208872","viewed":35,"name":"3d mandelbrot :DDD DELUXE","username":"Mablung","description":"HEHE MAndelbrot goes 3d and Graphics card goes BOOM!","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n   \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 camPos = vec3(0.1, -0.1, 0.1);\n    \n    vec3 camX = vec3( 1.0, 0.0, 0.0 )*0.3;\n    vec3 camY = normalize( vec3(0.0, 1.0, 2.0) )*0.3;\n    \n    vec3 camZ = normalize(cross(camX, camY));\n    \n    vec3 focPos = camPos + camX*0.5 + camY*0.5 + camZ*5.0;\n    \n    \n    \n    vec3 rayStart = camPos + uv.x*camX + uv.y*camY;\n    \n    float rayStepLength = 0.00001;\n    int MAX_ITER = 100000;\n    int i = 0;\n    \n    vec3 rayStep = normalize( rayStart - focPos )*rayStepLength;\n\n    vec3 rayPos = rayStart;\n    \n    vec3 col = vec3(0.0, 0.0, 0.0);\n\n    while( i < MAX_ITER ) {\n        rayPos += rayStep;\n        if( texture(iChannel0, rayPos.xy).w*0.02 > rayPos.z ) {\n            col = texture(iChannel0, rayPos.xy).xyz*(0.1 + rayPos.z*60.0);\n            break;\n        }\n        i++;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 palette (int i) {\n    float MAX_ITERATION = 500.0;\n    \n    \n    \n    float f = log(float(i));\n    \n    /*if(f == MAX_ITERATION) {\n        return vec4(0.0, 0.0, 0.0, 1.0);\n    }*/\n    \n    float v = f/log(MAX_ITERATION);\n    \n    vec3 col = vec3(sin(v)*0.5+0.5,sin(v*6.0)*0.5+0.5, sin(v*11.0)*0.5+0.5 );\n    return vec4( col , v);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y + vec2(0.0, -1.0);\n    \n    vec2 offset = vec2(-0.759728563, -0.071573096);\n    \n    vec2 c = uv*2.0*1.2/1000.0 + offset;\n    \n    vec2 z = vec2(0,0);\n    vec2 z_t = vec2(0,0);\n    \n    int i = 0;\n    int MAX_ITERATION = 500;\n    \n    while(i < MAX_ITERATION && length(z) < 2.0 ){\n    \n    \n        z_t.x = z.x*z.x - z.y*z.y + c.x;\n        z_t.y = 2.0*z.x*z.y + c.y;\n        \n        z = z_t;\n        i++;\n    }\n    \n    \n    \n    fragColor = palette(i);\n}","name":"Buffer A","description":"","type":"buffer"}]}