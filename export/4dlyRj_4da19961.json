{"ver":"0.1","info":{"id":"4dlyRj","date":"1488923020","viewed":194,"name":"collection of 2d patterns #1 pii","username":"public_int_i","description":"collection of 2d patterns","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","patterns","of","collection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nhttps://twitter.com/EthanShulman\nhttp://xaloez.com/\n\n\nCopyright 2017 Ethan Alexander Shulman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\n\n#define Smoothness 0.06\n#define\tTSmoothness (1./Smoothness)\n\n#define PI 3.14159265\n\n\n#define smoothDistanceMix(d) clamp(d*TSmoothness,0.,1.)\n\n\n\n//checker pattern\nvec4 checkerPattern(vec2 uv, vec4 colorA, vec4 colorB) {\n    return mix(colorA,colorB,mod(floor(uv.x)+floor(uv.y),2.));\n}\n\n//dot pattern\nvec4 dotPattern(vec2 uv, float size, vec4 colorA, vec4 colorB) {\n    return mix(colorA,colorB,smoothDistanceMix((length(fract(uv)-0.5)-size)));\n}\n\n//diamond pattern\nvec4 diamondPattern(vec2 uv, float size, vec4 colorA, vec4 colorB) {\n    return mix(colorA,colorB,smoothDistanceMix(length(max(abs((fract(uv)-0.5)*mat2(sin(PI/4.),cos(PI/4.),-cos(PI/4.),sin(PI/4.)))-size,0.))));\n}\n\n//grid pattern\nvec4 gridPattern(vec2 uv, vec2 size, vec4 colorA, vec4 colorB) {\n    return mix(colorA,colorB,smoothDistanceMix(length(max(abs((fract(uv)-0.5))-size,0.))));\n}\n\n//flower pattern\nvec4 flowerPattern(vec2 uv, float spikes, float spikeLength, vec4 colorA, vec4 colorB) {\n    return mix(colorA,colorB,smoothDistanceMix((length(uv-0.5)-0.25+spikeLength*sin(atan(uv.y-0.5,uv.x-0.5)*spikes))));\n}\n\n//wave pattern\nvec4 wavePattern(vec2 uv, vec4 colorA, vec4 colorB) {\n    return mix(colorA,colorB,sin(uv.x*3.+sin(uv.x*1.2+uv.y*1.1)*2.0)*0.5+0.5);\n}\n\n//noise pattern\nvec3 hash33(vec3 p) {\n\treturn fract(abs(cos(p*.19487)*9284.3459 + cos(p.zxy*29.97612)*37.92384));\n}\nvec4 noisePattern(vec2 uv, float col) {\n    vec3 n = hash33(uv.xyy+uv.yxx*7974.96);\n    return vec4(mix(vec3(n.x),n,col), 1.);\n}\n\n//voronoi pattern\nfloat repeatingCircle(vec2 uv, float man) {\n    vec2 p = fract(uv)-0.5;\n    return mix(dot(p,p),abs(p.x)/3.+abs(p.y)/3.,man);\n}\nvec4 voronoiPattern(vec2 uv, float man, vec4 colorA, vec4 colorB) {\n    return mix(colorA, colorB, smoothDistanceMix((\n    min(repeatingCircle(uv,man), \n    min(repeatingCircle(uv-vec2(0.39,0.22),man),\n       repeatingCircle(uv-vec2(0.77,0.56),man)))/3.\n    )));\n}\n\n//wood pattern\nvec4 woodPattern(vec2 uv, vec4 colorA, vec4 colorB) {\n    return mix(colorA, colorB, sin(uv.x+sin(uv.y*0.1)*7.0)*0.5+0.5);\n}\n\n\n//main image - split patterns into viewable collection or zoom in on specific pattern when clicked.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float nTilesHorizontal = 3.0;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy,\n         wuv = uv*nTilesHorizontal;\n    \n    if (iMouse.w > 0.) {\n        //zoom specific pattern\n        wuv = floor((iMouse.xy/iResolution.xy)*nTilesHorizontal)+uv;\n    }\n    \n    vec2 puv = fract(wuv);\n    float patId = floor(wuv.x)+floor(wuv.y)*nTilesHorizontal;\n    \n    \n    \n    vec4 o = vec4(0.);\n    float t = fract(iTime*0.2);\n    t = t*2.-max(0.,t*4.-2.);\n    \n    if (patId < 1.) {\n        o = checkerPattern(puv*10., vec4(1.), vec4(0.1));\n    } else \n    if (patId < 2.) {\n        o = dotPattern(puv*10., t*0.5, vec4(1.), vec4(0.1));\n    } else \n    if (patId < 3.) {\n        o = diamondPattern(puv*10., t*0.5, vec4(1.), vec4(0.1));    \n    } else \n    if (patId < 4.) {\n        o = gridPattern(puv*10., vec2(t*0.5,0.4), vec4(0.), vec4(1.));\n    } else \n    if (patId < 5.) {\n        o = flowerPattern(puv, 1.+floor(t*10.), 0.2, vec4(0.9,0.6,0.7,1.), vec4(0.)); \n    } else \n    if (patId < 6.) {\n        o = wavePattern(puv*10., vec4(0.02,0.03,0.56, 1.), vec4(0.09, 0.22, 0.9, 1.));        \n    } else \n    if (patId < 7.) {\n        o = noisePattern(puv, t);\n    } else\n    if (patId < 8.) {\n        o = voronoiPattern(puv*4., t, vec4(0.), vec4(1.));\n    } else\n    if (patId < 9.) {\n        o = woodPattern(puv*40., vec4(0.5,0.4,0.2,1.), vec4(0.8,0.6,0.3,1.));\n    }\n    \n    \n\tfragColor = vec4(o.xyz,1.);\n}","name":"Image","description":"","type":"image"}]}