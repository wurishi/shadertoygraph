{"ver":"0.1","info":{"id":"NdGGRG","date":"1631704748","viewed":57,"name":"update of traffic jam","username":"neurofuzzy","description":"Traffic jam model. Blue particles move to the right if there is space available. Red particles move up if there is space available. Blue particles have right-of way. Same as https://www.shadertoy.com/view/sdV3DW but making sure XY symmetry holds.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["automata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Starting point was IQ's https://www.shadertoy.com/view/XstGRf\n//update of https://www.shadertoy.com/view/sdV3DW\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t=texelFetch( iChannel0, ivec2(fragCoord), 0 ).x;\n    vec3 col = (t > (1.0/3.0) ) ? ((t > (2.0/3.0))? vec3(1.0,0.0,0.0) : vec3(0.0,0.0,1.0)) : vec3(0.9,0.9,0.9);\n\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nconst float fillingfraction=0.5;\n\n//converts a float in the range [0,1] to an integer {0,1,2}\nint multistep(float t) {\n    return (t > (1.0/3.0) ) ? ((t > (2.0/3.0))? 2 : 1) : 0;\n}\nfloat multistepf(float t) {\n    return (t > (1.0/3.0) ) ? ((t > (2.0/3.0))? 1.0 : 0.5) : 0.0;\n}\nint Cell( in ivec2 p )\n{\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n\n    // fetch texel\n    return multistep(texelFetch(iChannel0, p, 0 ).x);\n}\n\nfloat rightstep(int B, int X, int C){\n    float Y=float(X)*0.5;\n    //right-mover leaves\n    if(X==1 && C==0){\n        Y=0.0;\n    } else if(B==1 && X==0) {\n        Y=0.5;\n    }\n    return Y;\n}\nfloat upstep(int A, int X, int D){\n    float Y=float(X)*0.5;\n    if(X==2 && A==0){\n        Y=0.0;\n    } else if(X==0 && D==2) {\n        Y=1.0;\n    }\n    return Y;\n}\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*138.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2( fragCoord );\n\n\n    float f =0.0;\n    \n    if( iFrame==0 || iMouse.z>0.0) \n        f =((1.0/3.0)+(2.0/3.0)*hash1(fragCoord.x*13.0+hash1(fragCoord.y*71.1)))*step(1.0-fillingfraction,hash1(fragCoord.x*32.5+hash1(fragCoord.y*135.1)));\n    else if(iFrame%2==0)\n        f = rightstep(Cell(px+ivec2(-1, 0)),Cell(px),Cell(px+ivec2(1, 0)));\n    else \n        f = upstep(Cell(px+ivec2(0, 1)),Cell(px),Cell(px+ivec2(0, -1)));\n\n    \n    \n\tfragColor = vec4( f, 0.0, 0.0, 0.0 );\n}","name":"Buffer A","description":"","type":"buffer"}]}