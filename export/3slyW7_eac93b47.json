{"ver":"0.1","info":{"id":"3slyW7","date":"1584920548","viewed":64,"name":"RayMarch Practice","username":"GuillemDomenech","description":"RayMarch Practice","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n\nfloat GetDist(vec3 point)\n{\n    vec4 sphere = vec4(0, 1, 6, 1);\n    \n    float sphereDist = length(point - sphere.xyz)-sphere.w;\n    float planeDist = point.y;\n    \n    float minDistance = min(sphereDist, planeDist);\n    return minDistance;\n}\n\nfloat RayMarch(vec3 rayOrigin, vec3 rayDirection)\n{\n    float dO = 0.0;\n    \n    for(int i = 0; i < MAX_STEPS; i++) \n    {\n        vec3 point = rayOrigin + rayDirection * dO;\n        float distanceToScene = GetDist(point);\n        dO += distanceToScene;\n        if(dO > MAX_DIST || distanceToScene < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 point)\n{\n    float dist = GetDist(point);\n    vec2 e = vec2(0.01, 0.0);\n    \n    vec3 normal = dist - vec3(\n        GetDist(point-e.xyy),\n        GetDist(point-e.yxy),\n        GetDist(point-e.yyx));\n\t\n\treturn normalize(normal);        \n}\n\nfloat GetLight(vec3 point)\n{\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.0;\n    vec3 lightVec = normalize(lightPos-point);\n    vec3 normal = GetNormal(point);\n    \n    float dif = clamp(dot(normal, lightVec), 0., 1.);\n    float distanceToLight = RayMarch(point + normal * SURF_DIST * 2., lightVec);\n    if(distanceToLight < length(lightPos-point)) dif*= .1;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0);\n    \n    vec3 cameraPos = vec3(0, 1, 0);    \n    vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1));\n    \n    float distance = RayMarch(cameraPos, rayDirection);\n    \n    vec3 point = cameraPos + rayDirection * distance;\n    \n    float diffuse = GetLight(point);\n    \n    col = vec3(diffuse);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}