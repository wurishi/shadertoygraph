{"ver":"0.1","info":{"id":"ld33Dj","date":"1465094710","viewed":341,"name":"Avoiding the Mouse","username":"mplanck","description":"As if a character is avoiding a user's presence while walking a fixed path.  Found something interesting by pushing in a direction that mixes the vector perpendicular to movement and the vector pushing away from repulsor ","likes":7,"published":1,"flags":48,"usePreview":0,"tags":["mouse","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// INPUTS\n\n// SPACEBAR = make the repulsor act as a pin\n// 1 = show the force vector on the ball\n\n// MOUSE = drag the repulsor around to see how the \"actor\" reacts\n\nconst vec2 STATE_BALL = vec2(0., 0.);\nconst vec2 STATE_TARGET = vec2(1., 0.);\nconst vec2 STATE_REPULSE = vec2(2., 0.);\nconst vec2 STATE_FORCE = vec2(3., 0.);\nconst vec4 STATE_BOUNDS = vec4(0., 0., 3., 0.);\n\nconst float KEY_ONE = 49.5/256.0;\n\nvec4 loadState(vec2 stateCoord)\n{\n    return texture(iChannel0, (stateCoord+.5) / iChannelResolution[0].xy, -100.);    \n}\n\nvec3 drawLine(vec2 a, vec2 b, vec2 p)\n{\n    \n    vec2 n = b - a;\n    vec2 v = p - a;\n    \n    float t = clamp(dot(v, normalize(n))/length(n), 0., 1.);\n    float f = length(p - (a + n * t));\n    //float f = 10.;\n    f = min(f, length(p - b) - .004);\n    return vec3(1.) * smoothstep(.01, .005, f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec4 ball = loadState( STATE_BALL );\n    vec4 tgt = loadState( STATE_TARGET );\n    vec4 rep = loadState( STATE_REPULSE );\n    vec4 frc = loadState( STATE_FORCE );\n    \n\tvec2 uv = fragCoord.xy / iResolution.xx;\n    \n    uv -= .5 * vec2(1., iResolution.y/iResolution.x);\n    // Actor\n    vec3 c = smoothstep(.05, .04, length(uv - ball.xy)) * (.2 + 5. * abs(vec3(ball.z, 0., ball.w)));\n\t\n    // Target = red\n    c += vec3(.1, .7, .1) * smoothstep(.02, .01, length(uv - tgt.xy));\n    \n    // Repulsor = blue\n    c += vec3(0.6, .2, .2) * pow(smoothstep(.3, .03, length(uv - rep.xy)), 2.);\n    c += vec3(0.6, .2, .2) * pow(smoothstep(.05, .03, length(uv - rep.xy)), 2.);\n\n    // force vector\n    if (texture(iChannel1, vec2(KEY_ONE, 0.25)).r > .5)\n    {\n    \tc += abs(.2 + 10. * vec3(frc.x, 0., frc.y)) * drawLine(ball.xy, ball.xy + 5. * frc.xy, uv);\n    }\n    \n    //c += texture(iChannel0, (floor(.01 * fragCoord)+.5) / iChannelResolution[0].xy, -100.).rgb; \n    fragColor = vec4(c, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec2 STATE_BALL = vec2(0., 0.);\nconst vec2 STATE_TARGET = vec2(1., 0.);\nconst vec2 STATE_REPULSE = vec2(2., 0.);\nconst vec2 STATE_FORCE = vec2(3., 0.);\n\nconst vec4 STATE_BOUNDS = vec4(0., 0., 4., 0.);\n\nconst float KEY_SPACE = 32.5/256.0;\n\nfloat g_time = 0.;\n\nfloat isInside( vec2 fragCoord, vec2 stateCoord ) \n{ \n    vec2 d = abs(fragCoord-0.5-stateCoord) - 0.5; \n    return -max(d.x,d.y); \n}\n\nfloat isInside( vec2 fragCoord, vec4 stateRange ) \n{ \n    vec2 d = abs(fragCoord-0.5-stateRange.xy-stateRange.zw*0.5) - 0.5*stateRange.zw - 0.5; \n    return -max(d.x,d.y); \n}\n\nvec4 loadState(vec2 stateCoord)\n{\n    return texture(iChannel0, (stateCoord+.5) / iChannelResolution[0].xy, -100.);    \n}\n\nbool saveState(vec2 fragCoord, \n               vec2 stateCoord, \n               in vec4 stateValue, \n               inout vec4 fragColor)\n{\n    \n    if (isInside(fragCoord, stateCoord) > .0)\n    {\n        fragColor = stateValue;\n        return true;\n    }\n    \n    return false;\n}\n\nvoid initState(vec2 fragCoord, inout vec4 fragColor)\n{    \n    saveState(fragCoord, STATE_BALL, vec4(.2, 0., 0., 0.), fragColor); \n    saveState(fragCoord, STATE_TARGET, vec4(.2, 0., 0., 0.), fragColor); \n    saveState(fragCoord, STATE_REPULSE, vec4(-.5, -.5, 0., 0.), fragColor); \n}\n\nvoid updateState(float delta, vec2 fragCoord, inout vec4 fragColor)\n{\n    vec2 m = (iMouse.xy/iResolution.xx);\n    m -= .5 * vec2(1., iResolution.y/iResolution.x);\n    \n    vec4 ball = loadState(STATE_BALL);\n            \n    vec2 t = .2 * vec2(cos(g_time), sin(g_time)); \n    vec2 a = vec2(0.);\n    \n    float pressSpace = texture( iChannel1, vec2(KEY_SPACE,0.25) ).x;\n    if( pressSpace>0.5 )\n    {\n        ball = vec4(m + .001*(t-m) , 0., 0.);\n    }           \n    \n    else\n    {\n\n        vec2 k = .8 * (t - ball.xy);\n\n        vec2 v = ball.xy - m;\n        float f = min(5., max(.0, (.0025/max(.001, (length(v) * length(v)))) - .1));\n        float pushout = length(t) > length(m) ? 1. : -1.;\n        // blended vector that makes for believable avoidance\n        vec2 blendedv = normalize(normalize(v) + pushout * normalize(t));\n        a = f * blendedv;\n        \n        a += k;\n        a -= ball.zw * 1.5; // dampening\n\n        // euler-cromer\n        ball.zw += a * delta;\n        ball.xy += ball.zw * delta;\n    }\n    \n    saveState(fragCoord, STATE_BALL, ball, fragColor); \n    saveState(fragCoord, STATE_TARGET, vec4(t, 0., 0.), fragColor); \n    saveState(fragCoord, STATE_REPULSE, vec4(m, 0., 0.), fragColor); \n    saveState(fragCoord, STATE_FORCE, vec4(a, 0., 0.), fragColor); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     \n    g_time = 2. * iTime;\n    if (isInside(fragCoord, STATE_BOUNDS) <= 0.)\n    {\n        discard;\n    }\n    \n    fragColor = vec4(0.0);\n    \n    if(g_time < .1) \n    {\n        initState(fragCoord, fragColor);\n    }\n    else\n    {\n    \tupdateState(10. * iTimeDelta, fragCoord, fragColor);\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}