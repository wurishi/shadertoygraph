{"ver":"0.1","info":{"id":"Ml23Rc","date":"1431308363","viewed":312,"name":"003 Audio Spectrum Examples","username":"nmarsden","description":"Keys.. \nPress space to toggle between 'show all' and 'show selected' mode.  \nHold down 1-7 to 'select' one of 7 possible visualizations besides smiley\n\nPorted these old shadertoy examples https://github.com/notlion/audio-shadertoy/wiki/Shader-Examples","likes":4,"published":1,"flags":16,"usePreview":0,"tags":["2d","audio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"\n#define PI 3.141592653589793\n\n\n// Radial Spectrum\nvoid radialSpectrum( out vec4 fragColor, in vec2 fragCoord )\n{\n  float u_aspect = iResolution.x / iResolution.y;\n\n  vec2 v_texcoord = fragCoord.xy / iResolution.xy;\n    \n  vec2 pos = vec2((v_texcoord.x * 2. - 1.) * u_aspect, v_texcoord.y * 2. - 1.);\n\n  float theta = abs(atan(pos.x, pos.y)) / PI * .75;\n  float amp = texture(iChannel0, vec2(theta, 0.25)).x;\n  float dist = distance(pos, vec2(0., 0.));\n  dist *= dist;\n\n  vec3 c1 = vec3(0., 0., 0.);\n  vec3 c2 = vec3(0., .5, .8);\n\n  float fade = float(amp > dist) * (dist / amp);\n\n  fragColor = vec4(mix(c1, c2, fade), 1.);\n}\n\n\n// Radial Spectrum Variation 2\nvoid radialSpectrumVariationTwo( out vec4 fragColor, in vec2 fragCoord )\n{\n  float u_aspect = iResolution.x / iResolution.y;\n  vec2 v_texcoord = fragCoord.xy / iResolution.xy;\n    \n  vec2 pos = v_texcoord * 2. - 1.;\n  pos *= vec2(u_aspect, 1.);\n  float theta = (atan(pos.y, pos.x) + PI) / (PI * 2.);\n  float dist = length(pos);\n  float amp = texture(iChannel0, vec2(dist, 0.25)).x;\n  amp = sqrt(amp);\n\n  float fade = float(amp > theta) * (theta / amp);\n\n  fragColor = vec4(mix(\n    vec3(0., .1, .1),\n    vec3(0., 1., .8),\n    fade\n  ), 1.);\n}\n\n\n// Circluar Audio Spectrum\nvoid circluarAudioSpectrum( out vec4 fragColor, in vec2 fragCoord )\n{\n  float u_aspect = iResolution.x / iResolution.y;\n  vec2 v_texcoord = fragCoord.xy / iResolution.xy;\n  vec2 u_mouse = iMouse.xy / iResolution.xy;\n    \n  vec2 center = vec2(.5, .5); \n\n  vec2 pos = vec2(v_texcoord.x*u_aspect, v_texcoord.y);\n  pos.x-=1.0;\n\n  float freq = texture(iChannel0, v_texcoord).x;\n\n  vec3 color = vec3(freq > v_texcoord.y) * (v_texcoord.y / freq);\n\n  float d = distance(pos, center); \n  float radiusSize = texture(iChannel0, vec2(.1,0)).x; \n  if(d > radiusSize && d < (radiusSize+.1))\n  {\n    fragColor = vec4(d, 1.0-u_mouse.x, 1.0-u_mouse.y, 1.0);\n  }\n  else\n  {\n    d=d*d*d;\n    fragColor = vec4((1.0-freq)*d, (1.0-u_mouse.x)*d, (1.0-u_mouse.y)*d, 1.0); \n  }\n}\n\n\n// Circluar Strip Reactor\nvoid circluarStripReactor( out vec4 fragColor, in vec2 fragCoord )\n{\n  float u_aspect = iResolution.x / iResolution.y;\n  vec2 v_texcoord = fragCoord.xy / iResolution.xy;\n  vec2 u_mouse = iMouse.xy / iResolution.xy;\n  float u_time = iTime;\n    \n  vec2 center = vec2(.5, .5); \n\n  vec2 pos = vec2(v_texcoord.x*u_aspect, v_texcoord.y);\n  //  pos.x-=1.0;\n  vec2 scaledMouse = vec2(u_mouse.x*u_aspect, u_mouse.y);\n\n  float freq = texture(iChannel0, v_texcoord).x;\n\n  vec3 color = vec3(freq > v_texcoord.y) * (v_texcoord.y / freq);\n\n  float d = distance(pos, scaledMouse); \n  float radiusSize = texture(iChannel0, vec2(.1,0)).x; \n  if(d > radiusSize && d < (radiusSize+abs(sin(u_time))))\n  {\n     fragColor = vec4(d, 1.0-u_mouse.x, 1.0-u_mouse.y, 1.0);\n  }\n  else\n  {\n    d=d*d*d;\n    float id = .5*exp(1.-d);\n    d = 0.41; \n    fragColor = vec4(id*d, id*d, id*d, 1.0); \n  }\n}\n\n// Reza Glowies\nvoid rezaGlowies( out vec4 fragColor, in vec2 fragCoord )\n{\n  float u_aspect = iResolution.x / iResolution.y;\n  vec2 v_texcoord = fragCoord.xy / iResolution.xy;\n  vec2 u_mouse = iMouse.xy / iResolution.xy;\n  float u_time = iTime;\n\n  vec2 center = vec2(.5, .5); \n  vec2 pos = vec2(v_texcoord.x*u_aspect, v_texcoord.y);\n  pos.x+=-1.0;\n  vec2 scaledMouse = vec2(u_mouse.x*u_aspect, u_mouse.y);\n\n  float freq = texture(iChannel0, v_texcoord).x;\n\n  float d = distance(pos, center);  \n  d*=1.3*abs(sin(.5));\n  d = 1.-d;\n\n  vec3 vignette = vec3(d,d,d);\n\n  float scalar = 10.0*texture(iChannel0, vec2(0,0)).x;; \n  float scalar2 = 10.0*texture(iChannel0, vec2(.1,0)).x;; \n  float scalar3 = 10.0*texture(iChannel0, vec2(.2,0)).x;; \n  float scalar4 = 10.0*texture(iChannel0, vec2(.3,0)).x;; \n  float scalar5 = 10.0*texture(iChannel0, vec2(.4,0)).x;; \n  float scalar6 = 10.0*texture(iChannel0, vec2(.5,0)).x;; \n  float scalar7 = 10.0*texture(iChannel0, vec2(.6,0)).x;; \n  float scalar8 = 10.0*texture(iChannel0, vec2(.7,0)).x;; \n  float scalar9 = 10.0*texture(iChannel0, vec2(.8,0)).x;; \n  float scalar10 = 10.0*texture(iChannel0, vec2(.9,0)).x;; \n  float scalar11 = 10.0*texture(iChannel0, vec2(1.0,0)).x;; \n\n  vec2 s = vec2(sin(scalar*pos.x+sin(u_time+scalar2)),cos(scalar*pos.y+cos(u_time+scalar3)));\n  float amp = distance(s,vec2(0.,0.));\n\n  fragColor = vec4(vignette/amp, 1.0); \n}\n\n\n// Radial Spectrum Variation 3\nvoid radialSpectrumVariationThree( out vec4 fragColor, in vec2 fragCoord )\n{\n  float u_aspect = iResolution.x / iResolution.y;\n  vec2 v_texcoord = fragCoord.xy / iResolution.xy;\n  vec2 u_mouse = iMouse.xy / iResolution.xy;\n  float u_time = iTime;\n\n  vec2 pos = v_texcoord * 2. - 1.;\n  pos *= vec2(u_aspect, 1.);\n\n  float theta = abs(atan(pos.x, pos.y) / PI);\n\n  float dist = length(pos);\n  dist -= distance(pos, vec2(-.5, .5));\n  dist -= distance(pos, vec2(.5, .5));\n  dist += distance(pos, vec2(-.5, -.5));\n  dist += distance(pos, vec2(.5, -.5));\n  dist = sqrt(dist) / 2.;\n\n  float amp = texture(iChannel0, vec2(dist, 0.)).x;\n  amp = sqrt(amp);\n\n  float fade = float(amp > theta && amp < theta * 1.4) * (theta / amp);\n\n  fragColor = vec4(mix(\n    vec3(0., .1, .1),\n    vec3(0., 1., .8),\n    fade\n  ), 1.);\n}\n\n\n// Reza Glowies 2\nvoid rezaGlowiesTwo( out vec4 fragColor, in vec2 fragCoord )\n{\n  float u_aspect = iResolution.x / iResolution.y;\n  vec2 v_texcoord = fragCoord.xy / iResolution.xy;\n  vec2 u_mouse = iMouse.xy / iResolution.xy;\n  float u_time = iTime;\n    \n  vec2 center = vec2(.5, .5); \n  vec2 pos = vec2(v_texcoord.x*u_aspect, v_texcoord.y);\n  pos.x+=-1.0;\n  vec2 scaledMouse = vec2(u_mouse.x*u_aspect, u_mouse.y);\n\n  float freq = texture(iChannel0, v_texcoord).x;\n\n  float d = distance(pos, center);  \n  d*=1.3*abs(sin(.5));\n  d = 1.-d;\n\n  vec3 vignette = vec3(d,d,d);\n\n  float scalar = 10.0*texture(iChannel0, vec2(0,0)).x;; \n  float scalar2 = texture(iChannel0, vec2(.1,0)).x;; \n  float scalar3 = texture(iChannel0, vec2(.2,0)).x;; \n  float scalar4 = 10.0*texture(iChannel0, vec2(.3,0)).x;; \n  float scalar5 = 10.0*texture(iChannel0, vec2(.4,0)).x;; \n  float scalar6 = 10.0*texture(iChannel0, vec2(.5,0)).x;; \n  float scalar7 = 10.0*texture(iChannel0, vec2(.6,0)).x;; \n  float scalar8 = 10.0*texture(iChannel0, vec2(.7,0)).x;; \n  float scalar9 = 10.0*texture(iChannel0, vec2(.8,0)).x;; \n  float scalar10 = 10.0*texture(iChannel0, vec2(.9,0)).x;; \n  float scalar11 = 10.0*texture(iChannel0, vec2(1.0,0)).x;; \n\n  vec2 s = vec2(sin(scalar*pos.x+sin(u_time+scalar4)),cos(scalar*pos.y+cos(u_time+scalar6)));\n  vec2 s2 = vec2(sin(s.x), cos(s.y));\n  float amp = distance(s2,vec2(scalar8,scalar8));\n\n\n//  float amp = distance(s,u_mouse);\n\n  fragColor = vec4(vignette/amp, 1.0); \n}\n\n\n\n// quasicrystal fractal\nvoid quasicrystalFractal( out vec4 fragColor, in vec2 fragCoord )\n{\n  float u_aspect = iResolution.x / iResolution.y;\n  vec2 v_texcoord = fragCoord.xy / iResolution.xy;\n  vec2 u_mouse = iMouse.xy / iResolution.xy;\n  float u_time = iTime;\n\n  vec2 pos = vec2((v_texcoord.x * 2. - 1.) * u_aspect, v_texcoord.y * 2. - 1.);\n\n  float theta = abs(atan(pos.x, pos.y)) / PI * .75;\n  float amp = texture(iChannel0, vec2(0.5, 0.3)).x;\n  float dist = distance(pos, vec2(0., 0.));\n  dist *= dist;\n\n  float fade = float(amp > dist) * (dist / amp);\n\n  vec2 resolution = vec2(2.0, 2.0);\n  vec2 p = pos * 12.4 * u_mouse.y*4.;\n  const float tot = PI * 3.00;\n  const float n = 16.0;\n  const float df = tot / n;\n  float c = 2.0  * 10. * u_mouse.x;\n  float t = u_time * 0.232646 * (theta/7. * u_mouse.x) * 1.2234 * (amp * 5.0);\n\n  if (n > 1.0) {\n    for (float phi = 0.0; phi < tot; phi += df){\n        c += cos(cos(phi) * p.x+ sin(phi) * p.y + t);\n    }\n  }\n  c /= n;\n  //c = c > 0.07 ? 0. : 0.9 ;\n\n  fragColor = vec4(c, c, c, 1.);\n}\n\n    \n// quasi 2\nvoid quasiTwo( out vec4 fragColor, in vec2 fragCoord )\n{\n  float u_aspect = iResolution.x / iResolution.y;\n  vec2 v_texcoord = fragCoord.xy / iResolution.xy;\n  vec2 u_mouse = iMouse.xy / iResolution.xy;\n  float u_time = iTime;\n\n  vec2 pos = vec2((v_texcoord.x * 2. - 1.) * u_aspect, v_texcoord.y * 2. - 1.);\n\n  float theta = abs(atan(pos.x, pos.y)) / PI * 1.75;\n  float amp = texture(iChannel0, vec2(0.25, 0.2)).x;\n  float dist = distance(pos, vec2(0., 0.));\n  dist *= dist;\n\n  float fade = float(amp > dist*.210) * (dist);\n\n  vec2 resolution = vec2(2.0, 2.0);\n  vec2 p = pos * 12.4 * u_mouse.y*4.;\n  const float tot = PI * 3.00;\n  const float n = 16.0;\n  const float df = tot / n;\n  float c = 2.0  * 10.0 * (u_mouse.x/100.0);\n  float t = u_time * 0.232646 * (theta/7. * u_mouse.x) * 1.42363* (amp * 5.0);\n\n  if (n > 1.0) {\n    for (float phi = 0.0; phi < tot; phi += df){\n        c += cos(cos(phi) * p.x+ sin(phi) * p.y + t) * fade;\n    }\n  }\n  c /= n;\n  c = c > 0.05 ? 1.0 : 0. ;\n\n  fragColor = vec4(c, c, c, 1.);\n}\n\n\n// quasi crystal variable editing\nvoid quasiCrystalVariableEditing( out vec4 fragColor, in vec2 fragCoord )\n{\n  float u_aspect = iResolution.x / iResolution.y;\n  vec2 v_texcoord = fragCoord.xy / iResolution.xy;\n  vec2 u_mouse = iMouse.xy / iResolution.xy;\n  float u_time = iTime;\n\n  vec2 pos = vec2((v_texcoord.x * 2. - 1.) * u_aspect, v_texcoord.y * 2. - 1.);\n\n  float theta = abs(atan(pos.x, pos.y)) / PI * .75;\n  float amp = 1.0;\n\n  vec2 resolution = vec2(2.0, 2.0);\n\n  //     this one |\n  vec2 p = pos * 20.6 *4.;\n  const float tot = PI * 3.00;\n\n  //     this one |\n  const float n = 10.0;\n  const float df = tot / n;\n  float c = 2.0  * 0.2;\n  float t = u_time * 0.232646 * 5.0;\n\n  if (n > 1.0) {\n    for (float phi = 0.0; phi < tot; phi += df){\n        c += cos(cos(phi) * p.x+ sin(phi) * p.y + t);\n    }\n  }\n  c /= n;\n  c = c > 0.07 ? 0. : 0.9 ;\n\n  fragColor = vec4(c, c, c, 1.);\n}\n\n\n// Smiley\nfloat circle(vec2 px_pos, vec2 pos, float radius){\n  return float(distance(px_pos, pos) < radius);\n}\nfloat ampAt(float pos){\n  return texture(iChannel0, vec2(pos, 0.)).x;\n}\n\nvoid smiley( out vec4 fragColor, in vec2 fragCoord )\n{\n  float u_aspect = iResolution.x / iResolution.y;\n  vec2 v_texcoord = fragCoord.xy / iResolution.xy;\n  vec2 u_mouse = iMouse.xy / iResolution.xy;\n  float u_time = iTime;\n\n  vec2 pos = (v_texcoord * 2. - 1.) * vec2(u_aspect, 1.);\n\n  float fade = 0.;\n  fade += circle(pos, vec2(0., 0.), .7 + ampAt(.6) * .2);\n  fade -= circle(pos, vec2(0., 0.), .5 + ampAt(.5) * .2);\n  fade -= float(pos.y > 0.);\n  fade = max(fade, circle(pos, vec2(-.5, .5), .1 + ampAt(.2) * .4));\n  fade = max(fade, circle(pos, vec2(.5, .5),  .1 + ampAt(.4) * .4));\n\n  fragColor = vec4(mix(\n    vec3(0.),\n    vec3(1., 1., 0.),\n    fade\n  ), 1.);\n}\n\n\nvoid showAll( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord.x *= 4.0;\n   \tfragCoord.y *= 2.0;\n    \n    if (fragCoord.x < iResolution.x) {\n        \n\t\tif (fragCoord.y > iResolution.y) {\n            fragCoord.y -= iResolution.y;\n \t\t\tradialSpectrum(fragColor, fragCoord);\n\t\t} else {\n\t\t\tradialSpectrumVariationThree(fragColor, fragCoord);\n\t\t}\n    } else if (fragCoord.x < iResolution.x * 2.0) {\n        fragCoord.x -= iResolution.x;\n        \n\t\tif (fragCoord.y > iResolution.y) {\n            fragCoord.y -= iResolution.y;\n\t    \tradialSpectrumVariationTwo(fragColor, fragCoord);\n        } else {\n\t\t\tquasicrystalFractal(fragColor, fragCoord);\n        }\n    } else if (fragCoord.x < iResolution.x * 3.0) {\n        fragCoord.x -= iResolution.x * 2.0;\n        \n\t\tif (fragCoord.y > iResolution.y) {\n            fragCoord.y -= iResolution.y;\n\t    \tcircluarAudioSpectrum(fragColor, fragCoord);\n        } else {\n\t\t\tquasiTwo(fragColor, fragCoord);\n        }\n    } else {\n        fragCoord.x -= iResolution.x * 3.0;\n        \n\t\tif (fragCoord.y > iResolution.y) {\n            fragCoord.y -= iResolution.y;\n\t    \tcircluarStripReactor(fragColor, fragCoord);\n        } else {\n\t\t\tsmiley(fragColor, fragCoord);\n        }\n    }\n}\n\nbool keyToggle( int ascii ) \n{\n\treturn (texture(iChannel1, vec2((0.5 + float(ascii)) / 256.0, 0.75)).x > 0.0);\n}\n\nbool keyPress( int ascii ) \n{\n\treturn (texture(iChannel1, vec2((0.5 + float(ascii)) / 256.0, 0.25)).x > 0.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // check keyboard\n    bool key_space = keyToggle(32);\n    bool key_1     = keyPress(49); \n    bool key_2     = keyPress(50); \n    bool key_3     = keyPress(51); \n    bool key_4     = keyPress(52); \n    bool key_5     = keyPress(53); \n    bool key_6     = keyPress(54); \n    bool key_7     = keyPress(55); \n    bool key_8     = keyPress(56); \n     \n    if (key_space) {\n        if (key_1) {\n\t\t    radialSpectrum(fragColor, fragCoord);\n        } else if (key_2) {\n      \t\tradialSpectrumVariationTwo(fragColor, fragCoord);      \n        } else if (key_3) {\n            circluarAudioSpectrum(fragColor, fragCoord);\n        } else if (key_4) {\n            circluarStripReactor(fragColor, fragCoord);\n        } else if (key_5) {\n            radialSpectrumVariationThree(fragColor, fragCoord);\n        } else if (key_6) {\n            quasicrystalFractal(fragColor, fragCoord);\n        } else if (key_7) {\n            quasiTwo(fragColor, fragCoord);\n        } else {\n            smiley(fragColor, fragCoord);\n        }\n    } else {   \n\t\tshowAll(fragColor, fragCoord);\n    }\n\n    \n    \n    \n    \n\t//radialSpectrum(fragColor, fragCoord);\n    //radialSpectrumVariationTwo(fragColor, fragCoord);\n    //circluarAudioSpectrum(fragColor, fragCoord);\n    //circluarStripReactor(fragColor, fragCoord);\n    //rezaGlowies(fragColor, fragCoord);\n    //radialSpectrumVariationThree(fragColor, fragCoord);\n    //rezaGlowiesTwo(fragColor, fragCoord);\n    //quasicrystalFractal(fragColor, fragCoord);\n    //quasiTwo(fragColor, fragCoord);\n    //quasiCrystalVariableEditing(fragColor, fragCoord);\n    //smiley(fragColor, fragCoord);\n    \n    \n}","name":"","description":"","type":"image"}]}