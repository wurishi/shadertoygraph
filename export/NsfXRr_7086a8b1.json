{"ver":"0.1","info":{"id":"NsfXRr","date":"1618677067","viewed":53,"name":"316_galichin_v3v0","username":"andreuka18","description":"Группа 316\nГаличин Андрей Владимирович\nВариант: v3v0","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["316galichinv3v0"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\n\nconst vec3 CAMERA_POS = vec3(-3, 3, -8);\n\n// light1\nconst vec3 LIGHT1_POS = vec3(-3, 1.5, 2);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1.0, 0.4, 1.0);\n\n// light2\nconst vec3 LIGHT2_POS = vec3(3, 1.0, -1);\nconst float LIGHT2_RADIUS = 0.6;\nconst vec3 LIGHT2_COLOR = vec3(0.9, 0.9, 0);\nvec3 randDir;\n\n// ochtaedron dots\nconst vec3 bottomDot = vec3(0, -1, 0);\nconst vec3 ForwardL = vec3(1, 0.5, 1);\nconst vec3 ForwardR = vec3(-1, 0.5, 1);\nconst vec3 BackwardL = vec3(1, 0.5, -1);\nconst vec3 BackwardR = vec3(-1, 0.5, -1);\nconst vec3 topDot = vec3(0, 2, 0);\n\n// ochtaedron colorMult\nconst vec3 ochtaedronMult = vec3(0.8, 0.6, 0.0);\n\n\n// (CAMERA_POS + t * viewVec).y == -1\n// t = (-1 - CAMERA_POS.y) / viewVec.y;\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 dot1, vec3 dot2, vec3 dot3, out vec3 normal)\n{\n    // get triangle sides vectors\n    vec3 side1 = dot2 - dot1;\n    vec3 side2 = dot3 - dot1;\n    \n    vec3 n = cross(dir, side2);\n    float det = dot(side1, n);\n    \n    if (abs(det) < 0.0) {\n        return INF;\n    }\n    \n    vec3 view = pos - dot1;\n    float u = dot(view, n) / det;\n    \n    if (u < 0.0 || u > 1.0) {\n        return INF;\n    }\n    \n    vec3 n_view = cross(view, side1);\n    float v = dot(dir, n_view) / det;\n    \n    if (v < 0.0 || v > 1.0 - u) {\n        return INF;\n    }\n    \n    float t = dot(side2, n_view) / det;\n    if (t > 0.0) {\n        normal = normalize(cross(side1, side2));\n        return t;\n    }\n    else {\n        return INF;\n    }\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\n// noise\nfloat GetNoise(vec3 coord, float res)\n{\n\tconst vec3 s = vec3(1.0, 10.0, 100.0);\n\t\n\tcoord *= res;\n\t\n\tvec3 coord0 = floor(mod(coord, res)) * s;\n\tvec3 coord1 = floor(mod(coord + vec3(1.0), res)) * s;\n\t\n\tvec3 fr = fract(coord); \n    fr = fr * fr * (3.0 - 2.0 * fr);\n\n\tvec4 v = vec4(coord0.x+coord0.y+coord0.z, coord1.x+coord0.y+coord0.z,\n\t\t      \t  coord0.x+coord1.y+coord0.z, coord1.x+coord1.y+coord0.z);\n\n\tvec4 r = fract(sin(v * 0.1) * 100.0);\n\tfloat r0 = mix(mix(r.x, r.y, fr.x), mix(r.z, r.w, fr.x), fr.y);\n\t\n\tr = fract(sin((v + coord1.z - coord0.z) * 0.1) * 100.0);\n\tfloat r1 = mix(mix(r.x, r.y, fr.x), mix(r.z, r.w, fr.x), fr.y);\n\t\n\treturn mix(r0, r1, fr.z) * 2.0 - 1.0;\n}\n// end noise\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    const float GLASS_N_SPH = 3.0;\n    float GLASS_R_SPH = pow2(AIR_N - GLASS_N_SPH) / pow2(AIR_N + GLASS_N_SPH);\n    \n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        vec3 sphNorm;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        \n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        // Начало октаэдра\n        vec3 tNorm1;\n        float tr1T = traceTriangle(curPos, curDir, bottomDot, BackwardL, BackwardR, tNorm1);\n        if (tr1T < t) \n        {\n            t = tr1T;\n            materialType = DIFFUSE;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= ochtaedronMult;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            normal = tNorm1;\n            sphNorm = normal;\n        }\n        \n        vec3 tNorm2;\n        float tr2T = traceTriangle(curPos, curDir, bottomDot, ForwardL, ForwardR, tNorm2);\n        if (tr2T < t) \n        {\n            t = tr2T;\n            materialType = DIFFUSE;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= ochtaedronMult;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            normal = tNorm2;\n            sphNorm = normal;\n        }\n        \n        vec3 tNorm3;\n        float tr3T = traceTriangle(curPos, curDir, bottomDot, ForwardL, BackwardL, tNorm3);\n        if (tr3T < t) \n        {\n            t = tr3T;\n            materialType = DIFFUSE;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= ochtaedronMult;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            normal = tNorm3;\n            sphNorm = normal;\n        }\n        \n        vec3 tNorm4;\n        float tr4T = traceTriangle(curPos, curDir, bottomDot, ForwardR, BackwardR, tNorm4);\n        if (tr4T < t) \n        {\n            t = tr4T;\n            materialType = DIFFUSE;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= ochtaedronMult;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            normal = tNorm4;\n            sphNorm = normal;\n        }\n        \n        vec3 tNorm5;\n        float tr5T = traceTriangle(curPos, curDir, topDot, BackwardL, BackwardR, tNorm5);\n        if (tr5T < t) \n        {\n            t = tr5T;\n            materialType = DIFFUSE;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= ochtaedronMult;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            normal = tNorm5;\n            sphNorm = normal;\n        }\n        \n        vec3 tNorm6;\n        float tr6T = traceTriangle(curPos, curDir, topDot, ForwardL, ForwardR, tNorm6);\n        if (tr6T < t) \n        {\n            t = tr6T;\n            materialType = DIFFUSE;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= ochtaedronMult;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            normal = tNorm6;\n            sphNorm = normal;\n        }\n        \n        vec3 tNorm7;\n        float tr7T = traceTriangle(curPos, curDir, topDot, ForwardL, BackwardL, tNorm7);\n        if (tr7T < t) \n        {\n            t = tr7T;\n            materialType = DIFFUSE;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= ochtaedronMult;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            normal = tNorm7;\n            sphNorm = normal;\n        }\n        \n        vec3 tNorm8;\n        float tr8T = traceTriangle(curPos, curDir, topDot, ForwardR, BackwardR, tNorm8);\n        if (tr8T < t) \n        {\n            t = tr8T;\n            materialType = DIFFUSE;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= ochtaedronMult;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            normal = tNorm8;\n            sphNorm = normal;\n        }\n        // Конец октаэдра\n        \n        float sphT = traceSphere(curPos + vec3(0, -0.5, 0), curDir, 0.6, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            \n            materialType = EMISSION;\n           \n            if (randVals.x < GLASS_R_SPH) {\n                materialType = REFLECTION;\n            } else if (randVals.y < GLASS_R_SPH) {\n                //colorMult *= ochtaedronMult;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N_SPH;\n                }\n            }\n            \n            if (materialType == EMISSION) {\n                vec3 worldPos = t * curDir + curPos + vec3(0, -0.5, 0);\n                vec3 coord = worldPos;\n                float sphColor;\n                sphColor = 3.5 - (5.*length(1.1*worldPos.yx));\n            \n                for(int j = 1; j <= 3; ++j) {\n                    float power = pow(2.0, float(j));\n                    sphColor += (1.5 / power) * GetNoise(coord + vec3(0.,-iTime * .05, iTime * .01), power * 16.0);\n                }\n            \n                color = vec3(sphColor, pow(max(sphColor,0.),2.)*0.4, pow(max(sphColor,0.),3.)*0.15);\n            }\n        }\n        \n\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}