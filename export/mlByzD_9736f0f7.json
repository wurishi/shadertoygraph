{"ver":"0.1","info":{"id":"mlByzD","date":"1691521035","viewed":207,"name":"Radial Repeat SDF Mapping","username":"fizzer","description":"A function to remap coordinates (without using any loops!) for an SDF so that the SDF is repeated in a ring with a given size and number of repetitions without breaking the correctness of the resulting SDF. Three examples are given during the animation.","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","repeat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// A function to remap coordinates for an SDF so that the SDF is repeated in a ring with\n// a given size and number of repetitions without breaking the correctness of the resulting SDF.\n// The function does this without the use of any loops, so it can be a more efficient option for\n// cloning shapes in a ring when designing an SDF model.\n\n// The SDF visualisation and interaction is the same as that written\n// by iq and used in most of his 2D distance function shaders.\n\nconst float pi = 3.14159265358979323;\n\n// List of some other 2D distances from iq: https://www.shadertoy.com/playlist/MXdSRf\n// and iquilezles.org/articles/distfunctions2d\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdStar5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n\n// i is the number of times to repeat around the ring.\n// n is the number of domains around the ring.\n//\n// Note that for shapes which do not have x=0 as a line of reflective symmetry, both the\n// parameters i and n must be even to prevent an incorrect SDF mapping.\nvec2 radialRepeat(vec2 p, int n, int i)\n{\n    i = min(i, n);\n    \n    if(i > 1)\n    {\n        float dth = 2. * pi / float(n);\n        float th0 = dth * .5, th1 = th0 + float(i - 2) * dth, thm = (th0 + th1) / 2.;\n\n        vec2 v0 = vec2(sin(th0), -cos(th0)), v1 = vec2(sin(th1), -cos(th1));\n        vec2 w = vec2(sin(thm), -cos(thm));\n\n        float th = 0.;\n        bool flip = false;\n\n        if(dot(p, v1) < 0. && dot(p, w) <= 0.)\n        {\n            th = -th1 - dth / 2.;\n            flip = (i % 2) == 0;\n        }\n        else if(dot(p, v0) <= 0. || dot(p, w) <= 0.)\n        {\n            float j = floor(atan(p.y, p.x) / dth + .5);\n            flip = mod(j, 2.) > .5;\n            th = j * -dth;\n        }\n        \n        p = mat2(cos(th), sin(th), -sin(th), cos(th)) * p;\n        \n        if(flip)\n            p.y = -p.y;\n    }\n    \n    return p; \n}\n\n\nfloat sdf(vec2 p)\n{\n    float t = mod(iTime + 11., 24.);\n    if(t < 8.)\n    {\n        p = radialRepeat(p, 8, 1 + (int(floor(t))&7) );\n\n        p.x -= .75;\n        return min(min(sdBox( p-vec2(0.22,0.07), vec2(0.0) )-0.02,\n                       sdBox(p-vec2(0.0,-0.2), vec2(0.12,0.01))),\n                       sdStar5(p,0.2,0.4) );\n    }\n    else if(t < 16.)\n    {\n        t -= 8.;\n        p = radialRepeat(p, 15, int(t * 2.) + 1);\n        p.x -= .75;\n        return sdBox(p, vec2(.2,.1));\n    }\n    else\n    {\n        t -= 16.;\n        p = radialRepeat(p, 10, int(t / 1.) * 2);\n        p.x -= .75;\n        return sdStar5(p, .2, .4);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n\tfloat d = sdf(p);\n    \n\t// coloring\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    if( iMouse.z>0.001 )\n    {\n        d = sdf(m);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n        \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}