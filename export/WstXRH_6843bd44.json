{"ver":"0.1","info":{"id":"WstXRH","date":"1571439706","viewed":199,"name":"ShaderTober - Misfit","username":"Flopine","description":"A small doodle with inktober's theme \"Misfit\"","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","glow","inktober"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n#define ITER 100.\n#define PI 3.141592\n\nmat2 rot(float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a) );}\n\nfloat sc(vec3 p, float s) \n{\n    p = abs(p);\n    p = max(p, p.yzx);\n    return min(p.x, min(p.y, p.z)) - s;\n}\n\nfloat box (vec3 p, vec3 c)\n{return length(max(abs(p)-c,0.));}\n\nfloat cage (vec3 p)\n{\n    float size = .6;\n    float d = 1e10;\n    for (int i = 0; i<5; i++)\n    {\n        float ratio = float(i)/5.;\n        size += ratio;\n        p.xz *= rot(iTime*0.5);\n        p.xy *= rot(ratio);\n        d = min(d, max(-sc(p, size*0.85), box(p,vec3(size))));\n    }\n    return d;\n}\n\nfloat g1 = 0.;\nfloat misfit (vec3 p)\n{\n    p.xy += vec2(\n        mix(0.,-0.5+texture(iChannel0, p.yz*0.05).r,exp(-fract(iTime*0.5)*8.)*6.),\n         mix(0.,-.5+texture(iChannel0, p.xz*0.1).r,exp(-fract(iTime*0.5)*8.)*6.)\n    );\n    float d = length(p)-(.1+exp(-fract(iTime*0.5)*8.)*6.);\n    g1 += 0.1/(0.1+d*d);\n    return d;\n}\n\nfloat SDF (vec3 p)\n{return min(misfit(p),cage(p));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(0.,0.,-5.5),\n        p = ro,\n        rd = normalize(vec3(uv,1.)),\n        col = vec3(0.);\n    \n    float shad = 0.;\n    bool hit = false;\n    \n    for (float i=0.; i<ITER; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            hit = true;\n            shad = i/ITER;\n            break;\n        }\n        p += d*rd*0.5;\n    }\n    \n    if (hit) col = vec3(1.-shad);\n\n    col += g1*vec3(0.8,0.7,0.9)*0.1;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}