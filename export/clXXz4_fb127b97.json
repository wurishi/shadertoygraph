{"ver":"0.1","info":{"id":"clXXz4","date":"1674336443","viewed":70,"name":"Weird Fractal Thing","username":"Naitronbomb","description":"An easy way to make fractals","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"7sjfDW","parentname":"Fractal Maker - Naitronbomb"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float iterations = 500.0;\nfloat sigmoid_range = 20.0;\n\nfloat color(float x) {\n    return 2.0/(1.0+pow(2.71828182846,-x/(sigmoid_range*iTime)))-1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from -4 to 4)\n    vec2 pos = 4.0 * (iMouse.xy - iResolution.xy / 2.0)/min(iResolution.x,iResolution.y);\n    pos = vec2(pos.x,-pos.y);\n   \n    vec2 c = 4.0 * (fragCoord - iResolution.xy / 2.0)/min(iResolution.x,iResolution.y);\n    c = vec2(c.x,-c.y);\n\n    vec2 z = vec2(0.0,0.0);\n   \n    float iter = iterations;\n    float final_mag = 0.0;\n    for (float i = 0.0; i < iterations; i++) {\n        z = cm(z,z)+c;\n        if (mag(z) > iTime) {\n            final_mag = mag(z);\n            iter = i;\n            break;\n        }\n    }\n    \n    vec3 colorHSL = vec3(360.0 * color(final_mag), 1.0, 0.5);\n    \n    float chroma = (1.0-abs(2.0*colorHSL.z-1.0)) * colorHSL.y;\n    \n    float h1 = colorHSL.x/60.0;\n    \n    float x = chroma * (1.0 - abs(mod(h1,2.0)-1.0));\n    \n    vec3 col = vec3(0.0,0.0,0.0);\n    \n    if (h1 < 1.0) {\n        col = vec3(chroma,x,0.0);\n    } else if (h1 < 2.0) {\n        col = vec3(x,chroma,0.0);\n    } else if (h1 < 3.0) {\n        col = vec3(0.0,chroma,x);\n    } else if (h1 < 4.0) {\n        col = vec3(0.0,x,chroma);\n    } else if (h1 < 5.0) {\n        col = vec3(x,0.0,chroma);\n    } else if (h1 < 6.0) {\n        col = vec3(chroma,0.0,x);\n    }\n    \n    vec3 m = vec3(colorHSL.z-chroma/2.0);\n\n    // Output to screen\n    fragColor = vec4(col+m,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 cm(vec2 a, vec2 b) {\n    return vec2(a.x*b.x-a.y*b.y,a.y*b.x+a.x*b.y);\n}\n\nfloat mag(vec2 vector) {\n    return sqrt(vector.x*vector.x+vector.y*vector.y);\n}\n\nvec2 cpow2(vec2 z1, float n) {\n    float angle = atan(z1.y,z1.x);\n    return pow(mag(z1),n)*vec2(cos(n*angle),sin(n*angle));\n}","name":"Common","description":"","type":"common"}]}