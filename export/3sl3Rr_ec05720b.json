{"ver":"0.1","info":{"id":"3sl3Rr","date":"1544744661","viewed":212,"name":"Interactive Mandelbrot Zoom","username":"foodini","description":"WASD (if you're on a qwerty keyboard) and (>OEU on dvorak (if you change the #if 1 to #if 0)) and mouse clicks to navigate.","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["fractal","mandelbrot","interactive","realtime"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float CENTER = 0.5;\nfloat RIGHT = 1.5;\nfloat UP = 2.5;\nfloat _MAX_INDEX = 2.5;\n\nbool persisting_coord(vec2 fragCoord) {\n    if(fragCoord.x <= _MAX_INDEX && fragCoord.y == 0.5)\n        return true;\n    return false;\n}\n\nvec3 get_vec_val(float index) {\n\tvec2 uv = vec2(index / iResolution.x, 0.5/iResolution.y);\n    return texture(iChannel0, uv).xyz;\n}\n\nbool set_vec_val(float index, vec2 fragCoord, vec3 val, out vec4 col) {\n    if(fragCoord == vec2(index, 0.5)) {\n        col = vec4(val, 1.0);\n    \treturn true;\n    } \n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 center = get_vec_val(CENTER);\n    vec3 right = get_vec_val(RIGHT);\n    vec3 up = get_vec_val(UP);\n\n    vec2 screen_coords = 2. * (fragCoord - iResolution.xy/2.) / iResolution.x;\n    vec2 c = center.xy + right.xy*screen_coords.x + up.xy*screen_coords.y;\n    \n    vec2 z = c;\n    vec2 zn;\n    float i;\n\n    for(i=0.0; i<2048.0; i+=1.0){\n    \tif (dot(zn,zn) >= 4.0) {\n            float d = i + 1. - log(log(length(zn)))/log(2.);\n            fragColor=vec4(\n                (1.0+sin((iTime*5. + d)/17.))/2.0,\n                (1.0+cos((iTime*7. + d)/13.))/2.0,\n                (1.0+sin((iTime*11. + d)/11.))/2.0,\n                1.0);\n    \t\tbreak;\n    \t} else {\n\t    \t//zn.x = z.x*z.x - z.y*z.y + c.x;\n    \t\t//zn.y = 2.0 * z.x * z.y + c.y;\n            zn = mat2(zn,-zn.y,zn.x) * zn + c;\n    \t\tz = zn;\n    \t}\n    }  \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float CENTER = 0.5;\nfloat RIGHT = 1.5;\nfloat UP = 2.5;\nfloat _MAX_INDEX = 2.5;\n\nbool persisting_coord(vec2 fragCoord) {\n    if(fragCoord.x <= _MAX_INDEX && fragCoord.y == 0.5)\n        return true;\n    return false;\n}\n\nvec3 get_vec_val(float index) {\n\tvec2 uv = vec2(index / iResolution.x, 0.5/iResolution.y);\n    return texture(iChannel0, uv).xyz;\n}\n\nbool set_vec_val(float index, vec2 fragCoord, vec3 val, out vec4 col) {\n    if(fragCoord == vec2(index, 0.5)) {\n        col = vec4(val, 1.0);\n    \treturn true;\n    } \n    return false;\n}\n\nbool is_pressed(float keyCode) {\n    keyCode = (keyCode + 0.5) / 256.0;\n    vec2 uv = vec2(keyCode, 0.25);\n    float key = texture(iChannel1, uv).r;\n\n    return key > 0.0;\n}\n\nfloat KEY_W = 87.0;\nfloat KEY_A = 65.0;\nfloat KEY_S = 83.0;\nfloat KEY_D = 68.0;\nfloat KEY_PERIOD = 190.0; // .\nfloat KEY_O = 79.0;  // o\nfloat KEY_E = 69.0;  // e\nfloat KEY_U = 85.0;  // u\n\n//TODO: make the returns at the end of mainImage a single call.\n//      Encapsulate the click-and-drag of the previous demo to a single call.\n//      Create a mapper from (0..240, 0..180) to (x_min..x_max, y_min, y_max)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 center;\n    vec3 right;\n    vec3 vel;\n    if(iFrame == 0) {\n        center = vec3(-.75, 0., 0.);\n        right = vec3(1.5, 0., 0.);\n        vel = vec3(0., 0., 0.);\n    } else {\n        center = get_vec_val(CENTER);\n        right = get_vec_val(RIGHT);\n    }\n    vec3 up = right.yxz;\n    up.x = -up.x;\n\n    if(is_pressed(KEY_W) || is_pressed(KEY_PERIOD))\n        right *= .995;\n   \tif(is_pressed(KEY_S) || is_pressed(KEY_E))\n        right /= .995;\n\n    float theta = 0.;\n    if(is_pressed(KEY_A) || is_pressed(KEY_O))\n        theta += 0.02;\n    if(is_pressed(KEY_D) || is_pressed(KEY_U))\n        theta -= 0.02;\n    \n    float s = sin(theta);\n    float c = cos(theta);\n    \n    mat3 rot = mat3(\n        c, s, 0., \n        -s, c, 0.,\n        0., 0., 1.\n    );\n    right = right * rot;\n    up = up * rot;\n    \n    if(iMouse.z >= 0.0 && !(iMouse.x == 0. && iMouse.y == 0.)) {\n\t\tvec2 delta = iMouse.xy/iResolution.xy * 2. - 1.;\n        delta *= 0.01;\n        center += delta.x * right + delta.y * up;\n    }\n    \n    if(!persisting_coord(fragCoord))\n        return;\n    if(set_vec_val(CENTER, fragCoord, center, fragColor))\n        return;\n    if(set_vec_val(RIGHT, fragCoord, right, fragColor))\n        return;\n    if(set_vec_val(UP, fragCoord, up, fragColor))\n        return;\n}","name":"Buffer A","description":"","type":"buffer"}]}