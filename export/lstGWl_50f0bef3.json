{"ver":"0.1","info":{"id":"lstGWl","date":"1452792756","viewed":144,"name":"MyRayTracerVer1.0.0","username":"Tacoa","description":"Hello, world.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ray"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"struct Ray{\n\tvec3 origin;\n\tvec3 direction;\n};\n\nstruct Sphere{\n\tfloat radius;\n\tvec3  position;\n\tvec3  color;\n};\n\nstruct Intersection{\n\tbool hit;\n\tvec3 hitPoint;\n\tvec3 normal;\n\tvec3 color;\n};\n\nIntersection intersectSphere(Ray R, Sphere S){\n\tIntersection i;\n\tvec3  a = R.origin - S.position;\n\tfloat b = dot(a, R.direction);\n\tfloat c = dot(a, a) - (S.radius * S.radius);\n\tfloat d = b * b - c;\n\tif(d > 0.0){\n\t\tfloat t = -b - sqrt(d);\n\t\tif(t > 0.0){\n\t\t\ti.hit = true;\n\t\t\ti.hitPoint = R.origin + R.direction * t;\n\t\t\ti.normal = normalize(i.hitPoint - S.position);\n\t\t\tfloat d = clamp(dot(normalize(vec3(1.0)), i.normal), 0.1, 1.0);\n\t\t\ti.color = S.color * d;\n\t\t\treturn i;\n\t\t}\n\t}\n\ti.hit = false;\n\ti.hitPoint = vec3(0.0);\n\ti.normal = vec3(0.0);\n\ti.color = vec3(0.0);\n\treturn i;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n\tRay ray;\n\tray.origin = vec3(0.0, 0.0, 5.0);\n\tray.direction = normalize(vec3(p.x, p.y, -1.0));\n    \n\tSphere sphere;\n\tsphere.radius = 1.0;\n\tsphere.position = vec3(0,0,cos(iTime * 3.0) * 3.9);\n\tsphere.color = vec3(abs(cos(iTime)),abs(sin(iTime)),1.0);\n\t\n\tIntersection i = intersectSphere(ray, sphere);\n\tfragColor = vec4(i.color, 1.0);\n}","name":"","description":"","type":"image"}]}