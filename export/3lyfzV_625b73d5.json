{"ver":"0.1","info":{"id":"3lyfzV","date":"1614652732","viewed":114,"name":"Draw Hex Outline","username":"cutycutyhyaline","description":"ref: https://andrewhungblog.wordpress.com/2018/07/28/shader-art-tutorial-hexagonal-grids/","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["hexagon","tile"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 s = vec2(1, 1.7320508); // 1.7320508 = sqrt(3)\nconst float outlineWidthRatio = 0.1;\n\nvec3 hue( float c )\n{\n    return smoothstep(0.,1., abs(mod(c*6.+vec3(0,4,2), 6.)-3.)-1.);\n}\n\nfloat random(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nfloat calcHexDistance(vec2 p)\n{\n     const float hexHalfWidth= .5;\n     // 1.7320508 is sqrt(3)\n     const vec2 s = vec2(1, 1.7320508);\n     p = abs(p);\n     return max(dot(p, s * .5), p.x) - hexHalfWidth;\n}\n\n// xy - offset from nearest hex center\n// zw - unique ID of hexagon\nvec4 calcHexInfo(vec2 uv)\n{\n    vec4 hexCenter = round(vec4(uv, uv - vec2(.5, 1.)) / s.xyxy);\n    vec4 offset = vec4(uv - hexCenter.xy * s, uv - (hexCenter.zw + .5) * s);\n    return dot(offset.xy, offset.xy) < dot(offset.zw, offset.zw) ? vec4(offset.xy, hexCenter.xy) : vec4(offset.zw, hexCenter.zw);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    vec4 hexInfo = calcHexInfo(uv);\n    float distanceFromHexCenter = calcHexDistance(hexInfo.xy);\n    //fragColor.rgb = dist < -.01 ?  hue(random(hexInfo.zw)) : hue(random(hexInfo.zw))*.5;\n    fragColor.rgb = distanceFromHexCenter < (outlineWidthRatio * -.5) ?  vec3(.0,.0,.0) : vec3(1.0,1.0,1.0);\n}","name":"Image","description":"","type":"image"}]}