{"ver":"0.1","info":{"id":"MsjSDD","date":"1434985238","viewed":231,"name":"Base shader (raymarching)","username":"janneasdf","description":"Shader with basic functionality","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Smallest distance from pos to ball (ballPos, ballRadius)\nfloat dBall(vec3 pos, vec3 ballPos, float ballRadius)\n{   \n    float d = length(pos - ballPos) - ballRadius;\n    \n    return d;\n}\n\n// Distance to closest scene hit\nfloat map(vec3 pos)\n{\n\tfloat dist = dBall(pos, vec3(0.0, 0.0, 0.0), 0.2);\n    return dist;\n}\n\n// Uses map function (smallest distance to scene) for\n// approximating normal at pos\nvec3 approxNormal(vec3 pos)\n{\n    float epsilon = 0.001;\n\tvec2 t = vec2(0.0, epsilon);\n    vec3 n = vec3(map(pos + t.yxx) - map(pos - t.yxx),\n           \t  map(pos + t.xyx) - map(pos - t.xyx),\n              map(pos + t.xxy) - map(pos - t.xxy));\n    return normalize(n);\n}\n\nvec3 getColor(vec3 rayPos, vec3 rayDir)\n{\n    vec3 color;\n    vec3 bg = vec3(0.5, 0.6, 1.);\n    \n    color = bg;\n    for (int i = 0; i < 128; ++i)\n    {\n    \tfloat d = map(rayPos);\n        rayPos += d * rayDir;\n        if (d < 0.001)\n        {\n        \tcolor = approxNormal(rayPos);\n            break;\n        }\n    }\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    \n    // Make uv go [-0.5, 0.5] and scale uv.x according to aspect ratio\n    uv -= .5;\n    uv.x = aspect * uv.x;\n    \n    // Initialize camera stuff\n    vec3 camPos = vec3(0., 0., -1.);\n    vec3 camTarget = vec3(0., 0., 0.);\n    vec3 camUp = vec3(0., 1., 0.);\n    vec3 camDir = normalize(camTarget - camPos);\n    vec3 camRight = normalize(cross(camUp, camDir));\n    camUp = normalize(cross(camDir, camRight));\n    \n    vec3 rayPos = camPos;\n    vec3 rayDir = normalize(camDir + uv.x * camRight + uv.y * camUp);\n    \n    // Raymarch scene to get pixel color\n    vec3 color = getColor(rayPos, rayDir);\n    \n    // Set pixel color\n\tfragColor = vec4(color, 1.0);\n}","name":"","description":"","type":"image"}]}