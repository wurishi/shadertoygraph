{"ver":"0.1","info":{"id":"tsBBWt","date":"1592674843","viewed":244,"name":"Convergence (4k exegfx)","username":"slerpy","description":"lots of lines","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["4k","lines","nova","exegfx"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec4 col = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    col = pow(max(col, .0), vec4(1) / 2.2);\n    \n    col += .8*textureLod(iChannel0, uv, 5.);\n    col -= length(uv - .5);\n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    switch(iFrame)\n    {\n\tcase 0:\n        vec4 rv = vec4(fragCoord, 0, 1);\n        rv = fract(1e4*sin(rv) + rv.wxyz);\n        rv = fract(1e4*sin(rv) + rv.wxyz);\n        rv = fract(1e4*sin(rv) + rv.wxyz);\n        rv = fract(1e4*sin(rv) + rv.wxyz);\n        rv = fract(1e4*sin(rv) + rv.wxyz);\n        rv = fract(1e4*sin(rv) + rv.wxyz);\n\t\tfragColor = rv;\n        break;\n        \n\tcase 1:\n    \tfloat n = 1.0;\n        vec2 uv = fragCoord.xy / iResolution.xy;\n        vec4 acc = vec4(0);\n        acc += n * texture(iChannel0, uv/n + 0.7); n *= 2.0;\n        acc += n * texture(iChannel0, uv/n + 0.7); n *= 2.0;\n        acc += n * texture(iChannel0, uv/n + 0.7); n *= 2.0;\n        acc += n * texture(iChannel0, uv/n + 0.7); n *= 2.0;\n        acc += n * texture(iChannel0, uv/n + 0.7); n *= 2.0;\n        acc += n * texture(iChannel0, uv/n + 0.7); n *= 2.0;\n        acc += n * texture(iChannel0, uv/n + 0.7); n *= 2.0;\n        acc += n * texture(iChannel0, uv/n + 0.7); n *= 2.0;\n        fragColor = acc * exp2(-8.0);\n        break;\n        \n\tdefault:\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        break;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 map(vec2 p, int k)\n{\n    vec4 y = texture(iChannel0, mix(p, vec2(.5), .1))-.5;\n    for(;k>0;k--)y = y.wxyz;\n    return y.xy / (length(y.xy) + .1);\n}\n\nivec2 spiral(int n)\n{\n    int r=int(sqrt(float(n+1))-1.)/2+1,\n    a=1+n-4*r*(r-1),k=a/r/2;a%=r*8;\n    \n    ivec2 v=a%ivec2(r*2,1)-r;\n    for(;k>0;k--)v=ivec2(-v.y,v.x);\n    \n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 acc = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    if(iFrame < 0)acc = vec4(0);\n    \n    const int layers = 4;\n    const float gap = 10.;\n    const int steps = 60;\n    const float travel = .5;\n    \n    vec3 off = vec3(spiral(iFrame / layers), iFrame % layers);\n    \n    vec2 c0 = fragCoord - mod(fragCoord, gap) + gap * off.xy;\n    for(int i=0; i<steps; i++)c0 += travel * map(c0 / iResolution.xy, int(off.z));\n    \n    vec2 c1 = c0;\n    for(int i=0; i<steps; i++)c1 += travel * map(c1 / iResolution.xy, int(off.z));\n\n    vec2 ld = c1 - c0, le = fragCoord.xy - c0;\n    float ll = clamp(dot(ld, le)/dot(ld, ld), .0, 1.);\n    float d = length(le - ld * ll);\n\n    if(length(ld) > 8.)\n    {\n        ld = normalize(ld);\n        float b = 1.0 - smoothstep(0.3, 1.6 - 0.3 * (ld.x + ld.y), d);\n        vec4 col = vec4(max(ld, 0.), 1, 1) * b * exp2(-off.z);\n        acc = max(acc, col);\n    }\n    \n    fragColor = acc;\n}","name":"Buffer B","description":"","type":"buffer"}]}