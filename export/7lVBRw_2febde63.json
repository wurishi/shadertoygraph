{"ver":"0.1","info":{"id":"7lVBRw","date":"1664360441","viewed":172,"name":"Audio Circle","username":"WhiteWalrus518","description":"CLICK THE SHADER TO START\nCreates a mini sound diagram to demonstrate the pitches present in the audio sample bar.","likes":4,"published":1,"flags":64,"usePreview":0,"tags":["fft","music","soundanalysis"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XlBXW1","filepath":"https://soundcloud.com/soundcirclemusic/google-doodle-music-earth-day-2020","previewfilepath":"https://soundcloud.com/soundcirclemusic/google-doodle-music-earth-day-2020","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define res iResolution\n#define time iTime\n#define mouse iMouse\n#define PI 3.14159265828\nconst float cFreq = 261.0;\n\n// The coloured bars are the different notes on the chromatic scale\n// move the mouse around - the mouse position determines how much differences in height are amplified\n// Vertical determines how sigmoidal the function is\n// Horizontal controls the centre of the sigmoid\nconst int baseOct = 0;\nconst int octRange = 3;\n// vary the octaves sampled up here\n\nfloat atan2(vec2 rec)\n{\n    return atan(rec.y,rec.x);\n}\n\n\nfloat getLevel(float samplePos){\n   int tx = int(samplePos*512.0);\n   return texelFetch( iChannel1, ivec2(tx,0), 0 ).x; \n   // first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n}\nfloat samplePitch(float freq, int octave){\n   return getLevel(pow(2.0, float(octave)) * freq / 12000.0);\n}\n\nfloat sampleNote(float freq){\n   float pitch = 0.0;\n   for( int i = baseOct; i < baseOct + octRange; i++){\n       pitch += samplePitch(freq, i);\n   }\n   return pitch;\n}\n\nfloat logX(float x, float a, float c){\n   return 1.0 / (exp(-a*(x-c)) + 1.0);\n}\nfloat logisticAmp(float amp){\n   float c = 1.0 - mouse.x / res.x;\n   float a = 20.0 * (1.0 - mouse.y / res.y);\n   // c gives the point of greatest sensitivity to volume\n   // a determines the relative diference in size between similar bars\n   // https://www.desmos.com/calculator/7dzl9nuhli\n   \n   \n   if(mouse.xy == vec2(0.0)){c = 0.8; a = 19.0;}\n   \n\n   return (logX(amp, a, c) - logX(0.0, a, c)) / (logX(1.0, a, c) - logX(0.0, a, c));\n   // clamps range and domain into [0, 1]\n   }\n\nfloat bigWave(float x){\n   return 0.4 * sin(x + 0.3) + \n          0.1 * sin(0.1 * x + 0.4) + \n          0.2 * sin(2.0 * x) + \n          1.0 * sin(0.3 * x+ 0.9) + \n          0.7 * sin(0.87 * x + 0.1) + \n          0.1 * sin(4.0 * x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = fragCoord/res.xy;\n\n   float ar = res.x / res.y;\n   vec2 cSuv = 2.0 * (fragCoord/res.y - vec2(ar, 1.0) * 0.5);\n   // centred and scaled position\n   // vertical ranges +1 to -1\n   // horizontal range dependant on viewing window\n\n   vec2 polCoord = vec2(length(cSuv), atan2(cSuv));\n   // polar coords centred on middle of screen\n\n   float barNum = 100.0;\n   float bar = floor(barNum * 0.5 * polCoord.y / PI);\n\n   float backNum = 12.0;\n   float back = floor(backNum * 0.5 * polCoord.y / PI);\n\n   float rotate = (time * 0.04);\n   // below generates coloured backdrop\n   vec3 col = 0.9*\n   vec3( 2.0 * abs(fract(back / backNum + 0.25 + rotate) - 0.5),\n         2.0 * abs(fract(back / backNum + 0.58 + rotate) - 0.5),\n         2.0 * abs(fract(bar / barNum + 0.83 + rotate) - 0.5));\n   col = 1.1 * normalize(col);\n\n   float sampleFreq = pow(2.0, bar / barNum) * cFreq;\n   float centreRad = 0.1;\n   float outerRad = 1.0;\n   float barWidth = 0.1;\n\n   float normAmp = sampleNote(sampleFreq) / float(octRange);\n\n   if(polCoord.x < centreRad + (outerRad - centreRad) * logisticAmp(normAmp) ){\n   col = vec3(logisticAmp(normAmp));}\n\n   if(outerRad < polCoord.x){col = vec3(0.0);}\n   \n   if(cSuv.x < - ar + barWidth && uv.y < (mouse.y / res.y)){ \n       if(cSuv.x < - ar + barWidth * (mouse.x / res.x)){\n           col = vec3(0.6, 0.6, 0.6);}\n       else{\n           col = vec3(0.4, 0.4, 0.4);\n       }\n   }\n   //col = texture(iChannel1, vec2(uv.x, 0.25)).xyz;\n\n\n   // Output to screen\n   fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}