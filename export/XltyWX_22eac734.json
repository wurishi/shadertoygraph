{"ver":"0.1","info":{"id":"XltyWX","date":"1534383905","viewed":794,"name":"Organic X-Ray (WIP)","username":"momoro","description":"A strange mistake. Looks kind of cool though. I need to fix it to have less sharp black specks.","likes":10,"published":3,"flags":0,"usePreview":0,"tags":["voronoi","organic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\n// Commutative smooth minimum function. Provided by Tomkh, and taken \n// from Alex Evans's (aka Statix) talk:\nfloat smin(float a, float b, float k){\n\n   float f = max(0., 1. - abs(b - a)/k);\n   return min(a, b) - k*.25*f*f;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\t//vec2 fragCoord = gl_FragCoord.xy;\n    //vec2 iResolution = u_resolution;\n    //float iTime = u_time;\n    //vec4 fragColor;\n    \n    vec3 color;\n\n    vec2 st = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    \n\tst *=7.;\n    \n    // Tile\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n    \n    float m_dist = 1.; // min distance\n    \n    for(int j=-2; j<=2; j++) {\n        for(int i=-2; i<=2; i++) {\n\n            // Neighbor place in the grid\n            vec2 neighbor = vec2(float(i), float(j));\n            \n            // Random position from current + neighbor place in the grid\n            vec2 offset = random2(i_st + neighbor);\n            \n            // Animate the offset\n            offset = 0.5 + 0.5 * sin(iTime + 6.2831 * offset);\n            \n            // Position of the cell\n            vec2 pos = neighbor + offset - f_st;\n            \n            // Cell distance\n            float dist = length(pos);\n            \n            // Metaball\n            m_dist = smin(m_dist, dist, 0.90);\n           \n            \n        }\n    }\n    \n   color = 1.0 - vec3(smoothstep(0.0, fwidth(m_dist * iResolution.x/5.) * 1.5, m_dist));\n   // color = vec3(smoothstep(0.0, fwidth(m_dist) * 100., m_dist));\n   \t//color = sqrt(max(color, 0.)); // Rough gamma correction.\n    fragColor = vec4(color, 1.0);\n   // gl_FragColor = fragColor;\n    \n}","name":"Image","description":"","type":"image"}]}