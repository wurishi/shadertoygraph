{"ver":"0.1","info":{"id":"WdsSDM","date":"1551416452","viewed":399,"name":"WKWKWKW","username":"winstonrenatan","description":"kebanyakakn becanda","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["shapesquare"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n \nvec3 ambientColor = vec3(1.9, 0.35, 0.5);\nvec3 diffuseColor = vec3(0.95, 0.25, 0.9);\nvec3 specularColor = vec3(1.0, 1.0, 1.0);\nvec3 lightDir = normalize(vec3(0.0, 4.0, 5.0));\nvec3 spherePos = vec3(0.0, 0.5, 0.0);\n\n//Make Polygon\nfloat polygon(vec2 uv, vec2 pos, float size, float blur, int sides){\n    uv = uv-pos;\n    //Angle and radius of polygon\n    float angle = atan(uv.x,uv.y)+PI;\n    float rad = TWO_PI/float(sides);\n    float dist = cos(floor(0.5+angle/rad)*rad-angle)*length(uv);\n    float poly = smoothstep(size, size-blur, dist);\n    \n    return poly;\n}\n\nfloat boxSDF( vec3 p, vec3 b ) {\n    return length(max(abs(p)-b,0.0));\n}\n\nfloat sceneSDF(vec3 p) {\n    return boxSDF(p, vec3(0.5));\n}\n\n//Move Rectangle Function\nvec4 moveRectangle(vec4 try,vec2 uv){\n    vec2 translate = vec2(cos(iTime),sin(iTime));\n    uv += translate*0.35;\n    float rectangle = polygon(uv, vec2(0.0,0.0), 0.1, 0.001, 4);\n    \n    vec3 giveColor = vec3(1.0,1.0,0.0) * rectangle;\n    try = vec4(giveColor,1.0);\n    \n    return try;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (-iResolution.xy + 2.0 * fragCoord.xy) / iResolution.y;\n    vec3 eye = vec3(0.0, 1.0, 2.0);\n    vec2 rot = 6.2831 * (vec2(0.1 + iTime * 0.25, 0.0) + vec2(1.0, 0.0) * (iMouse.xy - iResolution.xy * 0.25) / iResolution.x);\n    eye.yz = cos(rot.y) * eye.yz + sin(rot.y) * eye.zy * vec2(-1.0, 1.0);\n    eye.xz = cos(rot.x) * eye.xz + sin(rot.x) * eye.zx * vec2(1.0, -1.0);\n\n    vec3 ro = eye;\n    vec3 ta = vec3(0.0, 0.2, 1.0);\n\t\n    //Phong Model\n    vec3 cw = normalize(ta - eye);\n    vec3 cu = normalize(cross(vec3(0.0, 1.0, 0.0), cw));\n    vec3 cv = normalize(cross(cw, cu));\n    mat3 cam = mat3(cu, cv, cw);\n\n    vec3 rd = cam * normalize(vec3(p.xy, 1.5));\n    vec3 color;\n    float tmin = 0.1;\n    float tmax = 50.0;\n    \n    //Move Object\n    vec2 translate = vec2(cos(iTime),sin(iTime));\n    p += translate*0.35;\n    float rectangle = polygon(p, vec2(0.0,0.0), 0.5, 0.001, 4);\n    \n    float t = rectangle;\n    if (t > tmin && t < tmax) {\n        vec3 pos = ro + rd * t;\n        vec3 norm = normalize(pos - spherePos);\n        float occ = 0.5 + 0.5 * norm.y;\n\n        float amb = clamp(0.5 + 0.5 * norm.y, 0.0, 1.0);\n        float dif = clamp(dot(lightDir, norm), 0.0, 1.0);\n        vec3 h = normalize(-rd + lightDir);\n        float spe = pow(clamp(dot(h, norm), 0.0, 1.0), 64.0);\n\n        color = amb * ambientColor * occ;\n        color += dif * diffuseColor * occ;\n        color += dif * spe * specularColor * occ;\n    }\n\n    vec3 gamma = vec3(1.0 / 2.2);\n    fragColor += vec4(pow(color, gamma), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}