{"ver":"0.1","info":{"id":"sdBfD1","date":"1668808032","viewed":189,"name":"Special 3D FBM texture","username":"Famousghost","description":"Seamless 3D FBM texture with special distortion","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["perlinfbmnoiseseamless"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = vec4(texture(iChannel0, uv * 2.0f).rgb,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    uv *= Freq;\n    vec3 p = vec3(uv, iTime * 0.2f);\n\n    // Time varying pixel color\n    vec3 col =  vec3(fbm(p+fbm(p+fbm(p)))) ;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Seamless Perlin Noise\n// Seamless algorithm based on: https://gamedev.stackexchange.com/questions/23625/how-do-you-generate-tileable-perlin-noise\n// Algorithm based on: https://iquilezles.org/articles/warp/\n// Seamless Perlin Noise\n\n#define OCTAVE 8\n#define Freq 12.0\n\nfloat random(in vec3 p)\n{\n    return fract(sin(dot(p, vec3(19.5423f, 33.32353, 44.5345f))) * 43567.4534f);\n}\n\nfloat sampleSeamlessNoise(in vec3 p, in float freq)\n{\n    return random(vec3(mod(p.x, freq), mod(p.y, freq), mod(p.z, freq)));\n}\n\nfloat noise(in vec3 p, in float freq)\n{\n    vec3 iuv = floor(p);\n    vec3 fuv = fract(p);\n    float a = sampleSeamlessNoise(iuv, freq);\n    float b = sampleSeamlessNoise(iuv + vec3(1.0f, 0.0f, 0.0f), freq);\n    float c = sampleSeamlessNoise(iuv + vec3(0.0f, 1.0f, 0.0f), freq);\n    float d = sampleSeamlessNoise(iuv + vec3(1.0f, 1.0f, 0.0f), freq);\n    \n    float a2 = sampleSeamlessNoise(iuv + vec3(0.0f, 0.0f, 1.0f), freq);\n    float b2 = sampleSeamlessNoise(iuv + vec3(1.0f, 0.0f, 1.0f), freq);\n    float c2 = sampleSeamlessNoise(iuv + vec3(0.0f, 1.0f, 1.0f), freq);\n    float d2 = sampleSeamlessNoise(iuv + vec3(1.0f, 1.0f, 1.0f), freq);\n    \n    vec3 u = fuv * fuv * fuv * (fuv *(fuv * 6.0f-15.0f)+ 10.0f); // w*w*w*(w*(w*6.0-15.0)+10.0);\n    \n    float ab = mix(a, b, u.x);\n    float cd = mix(c, d, u.x);\n    \n    float a2b2 = mix(a2, b2, u.x);\n    float c2d2 = mix(c2, d2, u.x);\n    \n    float abcd = mix(ab, cd, u.y);\n    float a2b2c2d2 = mix(a2b2, c2d2, u.y);\n    \n    return mix(abcd, a2b2c2d2, u.z);\n}\n\n//lacunarity should be 2.0f in order to get proper values for seamless Perlin Noise\nfloat fbm(in vec3 uv)\n{\n    float amp = 0.5f;\n    float gain = 0.5f;\n    float lacunarity = 2.0f;\n    float result = 0.0f;\n    float f = Freq;\n    for(int i =0; i < OCTAVE; ++i)\n    {\n       result += amp * noise(uv, f);\n       amp *= gain;\n       uv += uv * pow(lacunarity, float(i));\n       f += f * pow(lacunarity, float(i));\n    }\n    \n    return result;\n}","name":"Common","description":"","type":"common"}]}