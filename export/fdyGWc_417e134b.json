{"ver":"0.1","info":{"id":"fdyGWc","date":"1632268889","viewed":48,"name":"Rvachev normalization","username":"fayolle","description":"Distance field approximation using Rvachev normalization","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Adapted from a code by Inigo Quilez\n// See: https://www.shadertoy.com/view/MdfGWn\n// Same license as the original code\n\n\n// Illustrate how to approximate a distance field with the Rvachev normalization\n// u(x,y) / sqrt(u(x,y)^2 + |grad u(x,y)|^2)\n//\n// Orange color: u(x,y)\n// Purple color: normalization \n//\n\n\nconst float a = 1.0;\nconst float b = 3.0;\n\nfloat r, e;\n\n// f(x,y)\nfloat ellipse(vec2 p)\n{\n    float f = length( p*vec2(a,b) );\n    return abs(f-r);\n}\n\n// Rvachev normalization\nfloat ellipse_dist(vec2 p)\n{\n    float f = length( p*vec2(a,b) );\n    float f1 = abs(f-r);\n    float g = length( p*vec2(a*a,b*b) );\n    g = g/f;\n    return f1 / sqrt(f1*f1 + g*g);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    r = 1.0; \n    e = 2.0/iResolution.y;\n    \n\tvec2 uv = (2.0*fragCoord-iResolution.xy) / iResolution.y;\n    \n    float f = ellipse(uv);\n\tfloat fd = ellipse_dist(uv);\n\t\n\tvec3 col = vec3(0.3);\n\n    // ellipse\n    float ff = mix(f, fd, step(0.0, sin(iTime)));\n        \n    col = mix( mix( col, vec3(1.0,0.6,0.2), 1.0-smoothstep( 0.1, 0.11, ff ) ), \n            mix( col, vec3(0.6,0.2,1.0), 1.0-smoothstep( 0.1, 0.11, ff ) ), \n            step(0.0, sin(iTime)));\n    \n\tfragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}