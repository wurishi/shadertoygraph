{"ver":"0.1","info":{"id":"XsfyzX","date":"1489623663","viewed":101,"name":"Bacteria Creature","username":"JaoCaragg","description":"school activity","likes":1,"published":1,"flags":0,"usePreview":0,"tags":[],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotation(float angle)\n{\n    float rot = radians(angle);\n\treturn mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n}\n\nfloat rand(vec2 uv)\n{\n    //return fract(sin(dot(uv, vec2(12.9898,78.233)))*10000.*iTime);\n\t//return fract(sin(dot(uv, iMouse.xy))*10000.);\n\t//return (fract(sin(dot(uv, vec2(12., 70.)))*100000.));\n    return (fract(sin(dot(uv, vec2(12., 70.)))*43758.5453123));\n}\n\nfloat noise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) + \n            (c - a)* u.y * (1.0 - u.x) + \n            (d - b) * u.x * u.y;\n}\n\nvec3 bacteria(vec2 uv)\n{\n    float side = noise(uv*5. + iTime)*.1;\n    vec2 shapePos = vec2(.5 , .5);\n    float dist = distance(shapePos,uv)*4.0;\n    \n    uv-= shapePos;\n    uv*=rotation(10.*sin(iTime*2.));\n\n    float angle = atan(uv.y,uv.x);\n    float radius = sin(3.0*angle);\n    radius = sqrt(exp(abs(cos(angle * 36.) * sin (angle * 12.))) * .3+ .2/10.)+side*sin(iTime);\n    \n    return 1.-step(radius, dist) * vec3(1,1,1);\n}\n\nvec3 rectangle(vec2 uv , vec2 position , vec2 size , vec3 color)\n{\n    float xBorder = position.x + size.x;\n    float yBorder = position.y + size.y;\n    \n    float hor = step(0.0,uv.x-position.x)-step(0.0,uv.x-xBorder);\n    float ver = step(0.0,uv.y-position.y)-step(0.0,uv.y-yBorder);\n    \n    return (ver * hor) * color;\n}\n\nvec3 createCircle(vec2 uv, vec2 position,float radius,vec3 color)\n{\n    uv += position;\n  \tfloat pos =  (0.,distance(uv,vec2(0.6)));\n  \treturn step(pos,radius) * color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n    \n    float side = noise(uv*6. + iTime)*.1;\n    float uvNoise = noise(uv*2. + iTime)*.1;\n    vec3 white = vec3(1,1,1);\n    vec3 frag = vec3(0,0,0);\n    \n    uv.y+=cos(iTime)*uvNoise;\n    uv.x+=((fract(-iTime/6.5)+uvNoise)-1.5)*2.5;\n    uv.x+=1.5;\n    uv.x*=1.7;\n    vec3 circle = createCircle(uv,vec2(.1,0.1),.2,white);\n    vec3 rect1 = rectangle(uv , vec2(0.0,0.44+side) , vec2 (0.6,0.01) , white);\n    vec3 rect2 = rectangle(uv*rotation(-25.) , vec2(0.0,0.25+side) , vec2 (0.6,0.01) , white);\n    vec3 rect3 = rectangle(uv*rotation(25.) , vec2(-0.4,0.55+side) , vec2 (0.6,0.01) , white);\n    frag = rect1+bacteria(uv)+rect2+rect3;\n    \n\tfragColor = vec4(vec3(frag),1.0);\n}","name":"Image","description":"","type":"image"}]}