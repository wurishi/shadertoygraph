{"ver":"0.1","info":{"id":"msfXWS","date":"1669997458","viewed":152,"name":"Hilma","username":"garabatospr","description":"concentric circles\n","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["circles","hilma"],"hasliked":0,"parentid":"WstcRl","parentname":"circle_rotation"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n// Author: Elio Ramos (@garabatospr instagram, twitter) \n\n\n// color palette\n\nconst vec3 COLORS[14]=vec3[14](\n\tvec3(0.949,0.922,0.541),\n    vec3(0.996,0.816,0.),\n    vec3(0.988,0.518,0.0),\n    vec3(0.929,0.212,0.102),\n    vec3(0.886,0.941,0.953),\n    vec3(0.702,0.863,0.878),\n    vec3(0.267,0.392,0.631),\n    vec3(0.125,0.188,0.318),\n    vec3(1.,0.773,0.78),\n    vec3(0.953,0.596,0.765),\n    vec3(0.812,0.22,0.584),\n    vec3(0.427,0.208,0.541),\n    vec3(0.024,0.706,0.69),\n    vec3(0.294,0.541,0.373)  \n);\n\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(234.234, 435.145));\n    p += dot(p, p+34.236767);\n    return fract(p.x*p.y);\n}\n\n\nmat2 rotate2d(in float radians){\n  float c = cos(radians);\n  float s = sin(radians);\n  return mat2(c, -s, s, c);\n}\n\n\nvec3 drawConcentric(vec2 st,vec3 col)\n{\n\n    st *= 5.;\n\n\n    st -= 0.5;\n\n    vec2 id  = floor(st)+0.5;\n\n    vec2 fst = fract(st)-0.5;\n\n    int  inx1 = int(14.*Hash21(id*124.));\n    int  inx2 = int(14.*Hash21(id*566.));\n    int  inx3 = int(14.*Hash21(id*667.));\n    int  inx4 = int(14.*Hash21(id*158.));\n    int  inx5 = int(14.*Hash21(id*879.));\n    int  inx6 = int(14.*Hash21(id*910.));\n    \n    col = COLORS[inx5];\n    \n    fst *= rotate2d(floor(10.*Hash21(id))*PI/2.0);\n \n \n    // discrete continuous rotation \n \n    //fst *= rotate2d((floor(10.*Hash21(id)))*(PI/2.)*floor(iTime*0.5));\n    \n    \n    float r = length(fst);\n    \n    float blur = 0.1;\n    float rad = 0.4;\n    \n    vec3 col1 = COLORS[inx1];\n    vec3 col2 = COLORS[inx2];\n    vec3 col3 = COLORS[inx3];\n    \n    vec3 col4 = COLORS[inx4];\n    vec3 col5 = COLORS[inx5];\n    vec3 col6 = COLORS[inx6];\n    \n    // half concentric blur\n\n    col = mix(col1,col,smoothstep(rad-blur,rad,r));\n    col = mix(col2,col,smoothstep(rad/1.5-blur,rad/1.5,r));\n    col = mix(col3,col,smoothstep(rad/3.-blur,rad/3.,r));\n\n    // half concentric sharp \n\n    col = mix(col4,col,smoothstep(rad - 0.01,rad,r)+step(0.0,fst.y));\n    col = mix(col5,col,smoothstep(rad/1.5 - 0.01,rad/1.5,r)+step(0.0,fst.y));\n    col = mix(col6,col,smoothstep(rad/3.0 - 0.01,rad/3.0,r)+step(0.0,fst.y));\n\n    return col;\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 st = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0.0);\n  \n    col = drawConcentric(st,col);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}