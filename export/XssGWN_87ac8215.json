{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"\n#define ONE vec2(1.0, 0.0)\n#define EPS vec2(1e-3, 0.0)\n\nconst float pi = 3.1415926;\nfloat time;\n\nfloat N(vec2 p)\n{\n   p = mod(p, 4.0);\n   return fract(sin(p.x * 41784.0) + sin(p.y * 32424.0));\n}\n\nfloat smN2(vec2 p)\n{\n\tvec2 fp = floor(p);\n\tvec2 pf = smoothstep(0.0, 1.0, fract(p));\n\treturn mix( mix(N(fp), N(fp + ONE), pf.x), \n\t\t\t   mix(N(fp + ONE.yx), N(fp + ONE.xx), pf.x), pf.y);\n}\n\n\nfloat fbm2(vec2 p)\n{\n\tfloat f = 0.0, x;\n\tfor(int i = 1; i <= 9; ++i)\n\t{\n\t\tx = exp2(float(i));\n\t\tf += smN2(p * x) / x;\n\t}\n\treturn f;\n}\n\n// Scalar field for the surface undulations.\nfloat field(vec2 p)\n{\n\tp *= 0.5;\n\treturn mix(smN2(p * 4.0), smN2(p * 5.0), 0.5 + 0.5 * cos(time * 0.1));\n}\n\n// Vector field extracted from the scalar field.\nvec2 flow(vec2 p)\n{\n\tfloat f0 = field(p);\n\tfloat f1 = field(p + EPS.xy);\n\tfloat f2 = field(p + EPS.yx);\n\treturn normalize(vec2(f1 - f0, f2 - f0)).yx * vec2(-1, 1) * 0.01;\n}\n\n// Maps a scalar value to a range of interpolated colours.\nvec3 col(float x)\n{\n\tx *= 60.0;\n\treturn max(vec3(0.0), vec3(cos(x), cos(x * 1.2), cos(x * 1.7)));\n}\n\n// Returns the distance along the given ray to a sphere at the origin.\nfloat trace(vec3 ro, vec3 rd)\n{\n\tfloat ds = dot(rd, ro) * dot(rd, ro) - dot(ro, ro) + 1.0;\n\t\n\tif(ds < 0.0)\n\t\treturn 1e3;\n\telse\n\t\treturn -dot(rd, ro) - sqrt(ds);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\ttime = iTime;\n\tvec2 t = fragCoord.xy / iResolution.xy * 2.0 - vec2(1.0);\n\tt.x *= iResolution.x / iResolution.y;\n\t\n\tvec3 ro = vec3(0.0, 0.0, 3.5), rd = normalize(vec3(t, -3.0));\n\t\n\tfloat f = trace(ro, rd);\n\n\tif(f > 1e2)\n\t{\n\t\t// No intersection. Make a colourful background.\n\t\tfloat d = length(t);\n\t\tfloat a = 1.0 - smoothstep(0.9, 1.4, d);\n\t\td *= 10.0;\n\t\td -= time;\n\t\tfragColor.rgb = 0.6 * a * (vec3(0.5) + 0.5 * vec3(cos(d), cos(d*1.3), cos(d * 1.5)));\n\t\tfragColor.rgb *= texture(iChannel0, vec2(atan(t.y, t.x), d * 0.01)).rrr;\n\t\treturn;\n\t}\n\t\n\tvec3 rp = ro + rd * f;\n\tvec2 uv = vec2(atan(rp.z, rp.x) / pi * 2.0, acos(rp.y) / pi * 2.0 - 1.0);\n\tvec3 n = normalize(rp);\n\n\tuv.x += time * 0.02 * 2.0 + iMouse.x / iResolution.x * 2.0;\n\tuv.y += time * 0.013 * 2.0 + iMouse.y / iResolution.y * 2.0;\n\n\tfloat wsum = 0.0;\n\tfloat csum = 0.0;\n\t\n\t// Perform line integral convolution.\n\tconst int count = 32;\n\tfor(int i = 0; i < count; ++i)\n\t{\n\t\tfloat w = 1.0;\n\t\tcsum += fbm2(uv * 8.0) * 0.5 * (0.5 + 0.5 * cos(float(i) / float(count) * 3.1415926 * 4.0 + time * 4.0)) * w;\n\t\twsum += w;\n\t\t\n\t\t// Step the sampling point by the vector field.\n\t\tuv += flow(uv);\n\t}\n\t\n\tcsum /= wsum;\n\tcsum += texture(iChannel0, uv).r * 0.02;\n\n\tfragColor.rgb = col(mix(csum, 0.1, pow(abs(t.y) * 0.7, 2.0))) * mix(0.5, 1.0, abs(t.y));\n\n\tfragColor.rgb += 1.2 * vec3(0.7, 0.3, 1.0) * pow(1.0 - normalize(n).z, 2.0) * 0.5;\n\tfragColor.rgb += 1.5 * vec3(1.0) * pow(1.0 - normalize(n).z, 8.0) * 0.5;\n\t\n\tfragColor.rgb *= 1.6;\n}\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XssGWN","date":"1370716915","viewed":2215,"name":"Planet Funk","username":"fizzer","description":"The trippiest place in the galaxy, Planet Funk jives across the cosmos bringing good vibes to any star system it happens to strut into orbit around. It's natural resources are fresh and it's polar caps are cool. This is one happenin' heavenly body, bro.","likes":61,"published":1,"flags":0,"usePreview":1,"tags":["colorful","space","planet","funky","trippy","sampling"],"hasliked":0,"parentid":"","parentname":""}}