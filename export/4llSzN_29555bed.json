{"ver":"0.1","info":{"id":"4llSzN","date":"1435000802","viewed":393,"name":"CrossStructure","username":"dila","description":"Flying around some fractal structure. I think it kinda looks like bones :)","likes":17,"published":1,"flags":0,"usePreview":1,"tags":["fractal","camera","path"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const float pi = 3.14159;\n\nmat3 xrot(float t)\n{\n    return mat3(1.0, 0.0, 0.0,\n                0.0, cos(t), -sin(t),\n                0.0, sin(t), cos(t));\n}\n\nmat3 yrot(float t)\n{\n    return mat3(cos(t), 0.0, -sin(t),\n                0.0, 1.0, 0.0,\n                sin(t), 0.0, cos(t));\n}\n\nmat3 zrot(float t)\n{\n    return mat3(cos(t), -sin(t), 0.0,\n                sin(t), cos(t), 0.0,\n                0.0, 0.0, 1.0);\n}\n\nfloat box(vec3 p, vec3 s)\n{\n\tvec3 q = clamp(p, -s, s);\n    return length(p - q);\n}\n\nfloat wscl = 6.0;\n\nfloat map(vec3 p)\n{\n    float h = wscl * 2.0;\n\tvec3 g = (fract((p+vec3(h*0.5))/h) * 2.0 - 1.0) * h;\n    vec3 q = g;\n    for (int i = 0; i < 4; ++i) {\n        vec3 r = sign(q);\n        q = r + reflect(q - r, normalize(r));\n        vec3 aq = abs(q);\n        q -= sign(q) * min(aq.x, min(aq.y, aq.z)) * 0.5;\n    }\n    float d = box(q, vec3(1.0));\n    float tr = 0.5 + 0.5 * sin(p.z*0.5);\n    tr = mix(2.5, 6.0, tr);\n    float c = length(g.xy) - tr;\n    float e = length(g.xz) - tr;\n    float f = length(g.yz) - tr;\n    float cv = min(min(c, e), f);\n    return max(d,-cv);\n}\n\nvec3 normal(vec3 p)\n{\n\tvec3 o = vec3(0.01, 0.0, 0.0);\n    return normalize(vec3(map(p+o.xyy) - map(p-o.xyy),\n                          map(p+o.yxy) - map(p-o.yxy),\n                          map(p+o.yyx) - map(p-o.yyx)));\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n    float t = 0.0;\n    for (int i = 0; i < 42; ++i) {\n        vec3 p = o + r * t;\n        float d = map(p);\n        t += d * 0.35;\n    }\n    return t;\n}\n\nvec3 textex(vec3 p)\n{\n\tvec3 ta = texture(iChannel0, vec2(p.y,p.z)).xyz;\n    vec3 tb = texture(iChannel0, vec2(p.x,p.z)).xyz;\n    vec3 tc = texture(iChannel0, vec2(p.x,p.y)).xyz;\n    return (ta + tb + tc) / 3.0;\n}\n\nvec3 shade(vec3 o, vec3 r, vec3 w, vec3 sn, float t)\n{\n    float fd = map(w);\n    \n    float fog = 1.0 / (1.0 + t * t * 0.01 + fd * 100.0);\n    vec3 diff = textex(w);\n    \n    vec3 lit = vec3(0.5);\n    vec3 spec = vec3(0.0);\n    \n    for (int i = -1; i <= 1; i+=2) {\n        float j = float(i) * 0.5 + 0.5;\n\n        vec3 loff = vec3(0.0, 0.0, 4.0) * sign(float(i));\n\n        vec3 ldir = normalize(o + loff - w);\n\n        vec3 lcol = mix(vec3(1.0,1.0,0.5), vec3(0.5,1.0,1.0), j);\n        \n        lit += max(dot(sn,ldir), 0.0) * lcol;\n\n        vec3 refl = reflect(ldir, -sn);\n        float spr = clamp(dot(refl, r), 0.0, 1.0);\n        spr = pow(spr, 4.0);\n        \n        spec += lcol * spr;\n    }\n\n    diff *= lit;\n    diff += spec * 0.5;\n    return diff * fog;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 o = vec3(0.0, 0.0, iTime*2.0);\n    vec3 r = normalize(vec3(uv, 1.2));\n    r *= zrot(iTime*0.25);\n    \n    float t = trace(o, r);\n    vec3 w = o + r * t;\n    vec3 sn = normal(w);\n\tvec3 sc = shade(o, r, w, sn, t);\n    \n\tfragColor = vec4(sqrt(sc), 1.0);\n}","name":"Image","description":"","type":"image"}]}