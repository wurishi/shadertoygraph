{"ver":"0.1","info":{"id":"DlXXDN","date":"1674764155","viewed":120,"name":"Truchet circles","username":"nseven","description":"exercise from The book of shaders","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323846\n\n#define line(x, w, b) smoothstep(.5+w/2.-b/2.,.5+w/2.+b/2.,x)-smoothstep(.5-w/2.-b/2.,.5-w/2.+b/2.,x)\n\n#define rand(xy) fract(sin(dot(xy, vec2(12.9898, 78.233))) * 43758.5453123);\n\nmat2 rotate(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c,-s,s,c);\n}\n\nfloat halfCircles(vec2 xy, float size) {\n    float a = line(length(max(xy, 0.)), size, .01);\n    float b = line(length(max(1. - xy, 0.)), size, .01);\n    return a + b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 xy = (2. * fragCoord - iResolution.xy ) / iResolution.x;\n\n    xy = rotate(iTime * .2) * xy;\n    \n    xy *= 7. + sin(iTime) * 5.; // grid\n\n    float r = rand(floor(xy)); // stable random for grid cell\n\n    float angle = PI * .5 * floor(fract(r) * 4.); // pi/2 times 0-3\n    \n    xy = fract(xy); // grid cell\n\n    xy = rotate(angle) * (xy - .5) + .5;\n\n    float z = halfCircles(xy, .1);\n\n    vec3 gradientColor = .5 + .5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    fragColor = vec4(-z * gradientColor, 1.);\n}","name":"Image","description":"","type":"image"}]}