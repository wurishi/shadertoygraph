{"ver":"0.1","info":{"id":"mlXfRn","date":"1692514652","viewed":19,"name":"cubism ","username":"pwyvern","description":"some cubes","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Camera setup\n    vec3 camPos = vec3(0.0, 3.5, -7.5);\n    vec3 camDir = normalize(vec3(uv, 1.0));\n\n    float minDist = 1e3;\n    vec3 minRo;\n\n    for(int x = 0; x < 16; x++)\n    for(int y = 0; y < 2; y++)\n    for(int z = 0; z < 16; z++)\n    {\n        vec3 cubePos = vec3(float(x)-7.5, 0.0, float(y)*4.0 + float(z)*4.0 - 8.0); \n        vec3 ro = camPos - cubePos;\n        vec3 rd = camDir;\n\n        vec3 bMin = vec3(-0.5);\n        vec3 bMax = vec3(0.5);\n        vec3 t1 = (bMin - ro) / rd;\n        vec3 t2 = (bMax - ro) / rd;\n        vec3 tMin = min(t1, t2);\n        vec3 tMax = max(t1, t2);\n        float tNear = max(max(tMin.x, tMin.y), tMin.z);\n        float tFar = min(min(tMax.x, tMax.y), tMax.z);\n\n        if (tNear < tFar && tFar > 0.0)\n        {\n            if(tNear < minDist)\n            {\n                minDist = tNear;\n                minRo = vec3(float(x), float(y), float(z));\n            }\n        }\n    }\n    \n    // If hit, color the cube.\n    if(minDist < 1e3)\n    {\n        vec3 phaseOffset = vec3(0.1 * minRo.x, 0.15 * minRo.y, 0.2 * (minRo.x + minRo.y + minRo.z));\n        vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + phaseOffset + vec3(0, 2, 4));\n        fragColor = vec4(col,1.0);\n    }\n    else\n    {\n        fragColor = vec4(0.1, 0.1, 0.1, 1.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}