{"ver":"0.1","info":{"id":"wlcfR8","date":"1612216158","viewed":710,"name":"MandelOct","username":"nimitz","description":"Octahedral folding instead of box folding.","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// MandelOct by nimitz (twitter: @stormoid)\n// https://www.shadertoy.com/view/wlcfR8\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define ITR 200\n#define FAR 200.\n\nconst float fov = 1.4;\nfloat dfog = 0.;\nfloat matid = 0.;\n\n#define FLIP_SPEED 0.22\n#define FLIP_REV 0.5\n#define FLIP_CURVE 0.3\n\n\nfloat an = 0.;\n\nvoid sphere_fold(inout vec3 z, inout float dz, float rd1, float rd2) {\n    float r2 = dot(z, z);\n    if(r2 < rd1) \n    {\n        float temp = (rd2 / rd1);\n        z *= temp;\n        dz *= temp;\n    }\n    else if(r2 < rd2) {\n        float temp = (rd2 / r2);\n        z *= temp;\n        dz *= temp;\n    }\n}\n\nvoid octfold(inout vec3 z, float octsize, float limit) {\n    \n    float odst = dot(abs(z), vec3(0.57735));\n    \n    if (odst > octsize)\n    {\n        vec3 sn = vec3(lessThanEqual(vec3(0.0), z))*2.0 - 1.0;\n        vec3 n = vec3(sn)*0.57735;   \n        float fdist = (odst - octsize);\n        fdist = clamp(fdist, -limit, limit);\n        z -= 2.0*n*fdist;\n    }\n}\n\nmat2 rot(in float a){float c = cos(a), s = sin(a);return mat2(c,s,-s,c);}\n\nfloat smoothfloor(in float x, in float k)\n{\n    k = clamp(k, 0., 1.);\n    float xk = x+k*0.5;\n    return floor(xk)+smoothstep(0.,1.,smoothstep(0.,k,fract(xk)));\n}\n\nfloat map(vec3 p)\n{\n    p.yz *= rot(an);\n    p.xz *= rot(an);\n    \n    float an1 = sin(an*1.1*2.)*.2;\n    float an2 = sin(an*1.4*2. + 1.)*3.;\n    float an3 = cos(an*2.1*2.)*4.;\n    \n    float fixed_radius2 = 15.;\n\tfloat min_radius2 = 0.;\n\tfloat folding_limit = 8. + an2*.2;\n\tfloat scale = -1.85 + an1;\n\tfloat octsize = 8. + an3;\n    \n    vec3 c = p;\n    float ds = 1.;\n    for(int n = 0; n < 18; ++n) \n    {\n        octfold(p, octsize, folding_limit);\n        sphere_fold(p, ds, min_radius2, fixed_radius2);\n        p = scale*p + c;\n        ds = ds * abs(scale) + 1.;\n    }\n    return length(p)/abs(ds)*.8;\n}\n\nvec3 normal(const in vec3 p)\n{  \n    vec2 e = vec2(-1., 1.)*0.04;   \n\treturn normalize(e.yxx*map(p + e.yxx) + e.xxy*map(p + e.xxy) + \n\t\t\t\t\t e.xyx*map(p + e.xyx) + e.yyy*map(p + e.yyy) );   \n}\n\nfloat shadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<18; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.2, 0.5);\n        if( h<0.0005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nfloat curvM(in vec3 p, in float w, vec3 n)\n{\n    float t1 = map(p + n*w*1.0), t2 = map(p - n*w*1.0);\n    float t3 = map(p + n*w*3.0), t4 = map(p - n*w*3.0);\n    float t5 = map(p + n*w*9.0), t6 = map(p - n*w*9.0);\n    float t0 = map(p);\n    return smoothstep(-.1, .9, (10.*(t1 + t2) + 1.*(t3 + t4) + 1.*(t5+t6) - 40.*t0))*3.0;\n}\n\nstruct mtl{float rough; vec3 alb; vec3 f0;};\nvec3 lgt = normalize( vec3(-.5, 0.3, -0.2) );\nvec3 lcol = vec3(1.,0.9,0.8);\n\nmat3 rot_x(float a){float sa = sin(a); float ca = cos(a); return mat3(1.,.0,.0,    .0,ca,sa,   .0,-sa,ca);}\nmat3 rot_y(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,.0,sa,    .0,1.,.0,   -sa,.0,ca);}\nmat3 rot_z(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,sa,.0,    -sa,ca,.0,  .0,.0,1.);}\n\n//http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\nvec3 shade(in vec3 pos, in vec3 rd)\n{\n    vec3 nor = normal(pos);\n    \t\n    mtl m; //Material\n    m.alb = vec3(0.25,0.4,0.8);\n    m.rough = 0.5;\n    m.f0 = vec3(.04);\n    m.alb *= rot_y(sin(an*0.2 + 3.5)*0.2);\n    \n\tfloat nl = clamp(dot(nor,lgt), 0., 1.);\n\tvec3 col = vec3(0.);\n    \n    if (nl > 0.)\n    {\n        nl *= shadow(pos, lgt, .8,15.)+0.0001;\n        vec3 haf = normalize(lgt - rd);\n        float nh = clamp(dot(nor, haf), 0., 1.); \n        float nv = clamp(dot(nor, -rd), 0., 1.);\n        float lh = clamp(dot(lgt, haf), 0., 1.);\n        float a = m.rough*m.rough;\n        float a2 = a*a;\n        float dnm = nh*nh*(a2 - 1.) + 1.;\n        float D = a2/(3.14159*dnm*dnm);\n        float k = pow(m.rough + 1., 2.)/8.; //hotness reducing\n\t\tfloat G = (1./(nl*(1. - k) + k))*(1./(nv*(1. - k) + k));\n        vec3 F = m.f0 + (1. - m.f0) * exp2((-5.55473*lh - 6.98316) * lh); //\"optimization\"\n        vec3 spec = nl*D*F*G;\n        col = lcol*nl*(spec + m.alb*(1. - m.f0));\t\t\n    }\n    col += 0.015*m.alb;\n    float crv = curvM(pos, .17,nor);\n    col *= sin(vec3(1.,1.9,2.9) + crv*.8 + an*1.5)*vec3(0.2,0.2,0.3) + vec3(0.9,0.8,0.55);\n    col *= crv;\n    return col;\n}\n\n//From eiffie: https://www.shadertoy.com/view/XsSXDt\nvec3 marchAA(in vec3 ro, in vec3 rd, in vec3 bgc, in float px, in mat3 cam)\n{\n    float precis = px*0.1;\n    float prb = precis;\n    float t=map(ro);\n\tvec3 col = vec3(0);\n\tfloat dm=100.0,tm=0.0,df=100.0,tf=0.0,od=1000.0,d=0.;\n\tfor(int i=0;i<ITR;i++)\n    {\n\t\td=map(ro+rd*t)*1.2;\n\t\tif(df==100.0)\n        {\n\t\t\tif(d>od)\n            {\n\t\t\t\tif(od<px*(t-od))\n                {\n\t\t\t\t\tdf=od;tf=t-od;\n                    t += .01; //step forward a bit when the first occluder is found\n\t\t\t\t}\n\t\t\t}\n\t\t\tod=d;\n\t\t}\n\t\tif(d<dm){tm=t;dm=d;}\n\t\tt+=d;\n\t\tif(t>FAR || d<precis)break;\n\t}\n\tcol=bgc;\n    \n\tif(dm<px*tm)\n        col=mix(shade((ro+rd*tm) - rd*(px*(tm-dm)) ,rd),col,clamp(dm/(px*tm),0.0,1.0));\n    \n\tfloat qq=0.0;\n\t\n    if((df==100.0 || tm==tf) && t < FAR)\n    {\n        ro+=cam*vec3(0.5,0.5,0.)*px*tm*1.;\n        tf=tm;\n        df=dm;\n        qq= .01;\n\t}\n    dfog = tm;\n    return mix(shade((ro+rd*tf) - rd*(px*tf-df),rd),col,clamp(qq+df/(px*tf),0.0,1.0));\n}\n\nvec3 bgt(in vec3 rd)\n{\n    float sun = clamp(dot(lgt,rd),0.0,1.0 );\n\tvec3 c2 = mix( vec3(0.8,.95,1.1), vec3(1.,.8,0.55), sun );\n    vec3 col = mix( vec3(0.2,0.6,.9), c2, exp(-(4.0+2.0*(1.0-sun))*max(0.0,rd.y-0.1)) );\n    col *= 0.6;\n\tcol += 0.8*vec3(1.0,0.8,0.7)*pow(sun,128.0);\n\tcol += 0.3*vec3(1.0,0.6,0.2)*pow(sun,32.0);\n    col += 0.1*vec3(1.0,0.6,0.2)*pow(sun,4.0);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    float px= 1./(iResolution.y*fov);\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = q - 0.5;\n\tp.x*=iResolution.x/iResolution.y;\n\tvec2 mo = iMouse.xy / iResolution.xy-.5;\n    mo = (mo==vec2(-.5))?mo=vec2(0.,-0.02):mo;\n\tmo.x *= iResolution.x/iResolution.y;\n    mo*=4.14;\n    mo.y *= 0.6;\n    mo.x += sin(iTime*0.2) + 2.5;\n\t\n    vec3 ro = vec3(12.,-0.0, 70. + sin(iTime*0.5 + .5)*10.);\n    vec3 rd = normalize(vec3(p,-fov));\n    \n    //an = smoothfloor((iTime + 20.)*FLIP_SPEED, FLIP_CURVE)*6.2831853*FLIP_REV;\n    an = smoothfloor((iTime + 6.)*FLIP_SPEED, FLIP_CURVE)*6.2831853*FLIP_REV;\n    \n    mat3 cam = rot_x(-mo.y)*rot_y(-mo.x);\n   \tro *= cam;\n\trd *= cam;\n    \n    vec3 bg = bgt(rd);\n    vec3 col = bg;\n    \n    col = marchAA(ro, rd, bg, px, cam);\n    col = clamp(col, 0.,1.);\n    col = mix(col, bg, smoothstep(70.,FAR, dfog)); //Distance fog\n    \n\tcol = pow(clamp(col,0.,1.), vec3(0.416667))*1.055 - 0.055; //sRGB\n\n    col *= pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1)*0.7+0.3;\n    \n\tfragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}