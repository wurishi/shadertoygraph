{"ver":"0.1","info":{"id":"XcjcRh","date":"1721905393","viewed":21,"name":"boioioioioioioioioioing","username":"jy483752","description":"boi\nyoink","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["boing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This is my attempt at an elastic easing function\n// kinda bouncy if you know what i mean\n// left is linear, right is elastic\n// green channel on 1 means it's outside of 0-1\n// red channel is the easing visualized\n// blue ball is a demonstration\n\n// based on\n// https://www.entropy.energy/scholar/node/damped-harmonic-oscillator\n\nconst float E=2.71828;\n\nfloat linear(float n){return n;}\nfloat elastic(float n){\n// im not sure what phi does here\n// A * E^(-t * half gamma) * cos(om_d * t + phi)\nconst float om=16., // freq\n            ga=14., // drag\n            om_d=sqrt(pow(om,2.)-pow(ga*.5,2.));\n\nfloat t=n;\nfloat decay=pow(E,-t*ga/2.);\nfloat osci=cos(om_d * t);\nreturn t<0.?0.:t>1.?1.:1.-decay*osci;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    bool id=int(uv.x*2.)==0;\n    uv.x=fract(uv.x*2.);\n    uv-=.5;uv*=1.5;uv+=.5;\n\n    float f_t=fract(iTime);\n\n    float val=id?linear(uv.x):elastic(uv.x);\n    float ball=step(length(uv-vec2(.5,id?linear(f_t):elastic(f_t))),.1);\n\n    // Output to screen\n    fragColor = vec4(step(uv.y,val),step(.5,max(abs(uv.x-.5),abs(uv.y-.5))),ball,1.);\n}","name":"Image","description":"","type":"image"}]}