{"ver":"0.1","info":{"id":"cdcBDj","date":"1697634529","viewed":67,"name":"dzenflow","username":"Nabuki","description":"bubble like flow of shapeless figure","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["flow","hash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// main effect parameters\nfloat radius = 0.1;\nfloat glow = 0.5;\nconst float sharpness = 30.0;\n\n// hash effect parameters\nfloat expression = 10.0;\nfloat density = 1500.0;\n\nfloat hash(vec2 p)\n{\n  vec3 p3  = fract(vec3(p.xyx) * .1031);\n  p3 += dot(p3, p3.yzx + 19.19);\n  return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 random3(vec3 c) {\n  float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n  vec3 r;\n  r.z = fract(512.0*j);\n  j *= .125;\n  r.x = fract(512.0*j);\n  j *= .125;\n  r.y = fract(512.0*j);\n  return r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n  /* 1. find current tetrahedron T and it's four vertices */\n  /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n  /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n  \n  /* calculate s and x */\n  vec3 s = floor(p + dot(p, vec3(F3)));\n  vec3 x = p - s + dot(s, vec3(G3));\n  \n  /* calculate i1 and i2 */\n  vec3 e = step(vec3(0.0), x - x.yzx);\n  vec3 i1 = e*(1.0 - e.zxy);\n  vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n    \n  /* x1, x2, x3 */\n  vec3 x1 = x - i1 + G3;\n  vec3 x2 = x - i2 + 2.0*G3;\n  vec3 x3 = x - 1.0 + 3.0*G3;\n  \n  /* 2. find four surflets and store them in d */\n  vec4 w, d;\n  \n  /* calculate surflet weights */\n  w.x = dot(x, x);\n  w.y = dot(x1, x1);\n  w.z = dot(x2, x2);\n  w.w = dot(x3, x3);\n  \n  /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n  w = max(0.6 - w, 0.0);\n  \n  /* calculate surflet components */\n  d.x = dot(random3(s), x);\n  d.y = dot(random3(s + i1), x1);\n  d.z = dot(random3(s + i2), x2);\n  d.w = dot(random3(s + 1.0), x3);\n  \n  /* multiply d by w^4 */\n  w *= w;\n  w *= w;\n  d *= w;\n  \n  /* 3. return the sum of the four surflets */\n  return dot(d, vec4(52.0));\n}\n\n/* const matrices for 3d rotation */\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n\n/* directional artifacts can be reduced by rotating each octave */\nfloat simplex3d_fractal(vec3 m) {\n  return   0.5333333*simplex3d(m*rot1)\n    +0.2666667*simplex3d(2.0*m*rot2)\n    +0.1333333*simplex3d(4.0*m*rot3)\n    +0.0666667*simplex3d(8.0*m);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 _fragCoord) {\n  vec2 fragCoord = _fragCoord.xy;\n  vec2 p=(fragCoord.xy-.5*iResolution.xy)/min(iResolution.x,iResolution.y);\n  vec3 p3 = vec3(p, iTime*0.2);\n  float s3d = simplex3d(p3);\n  vec3 c=vec3(0,0,0); //background color\n\n  vec2 o;\n\n  // layer 1 green\n  // vec3 l1Col = vec3(31./255., 128./255., 76./255.);\n  // float l1Inf = 0.;\n  // for (float i = 1.;i<sharpness;i++) {\n  //     o = vec2(s3d, -s3d)*i;\n  //     l1Inf = mix(1., l1Inf, smoothstep(radius, radius+glow, length(o-p)));\n  // }\n  // c = mix(c, l1Col, l1Inf);\n\n  // layer 2 blue\n  vec3 l2Col = vec3(45./255., 65./255., 171./255.);\n  float l2Inf = 0.;\n  for (float i = 1.;i<sharpness;i++) {\n      o = vec2(s3d, -s3d)*i;\n      l2Inf = mix(1., l2Inf, smoothstep(radius, radius+glow, length(o-p)));\n  }\n  c = mix(c, l2Col, l2Inf);\n\n  // hash effect\n  float h = hash(floor(density*(fragCoord/iResolution.xy)));\n  c *= exp(-expression*h/c)*(1.0+sin(iTime*100.0*h))/2.0+1.0;\n\n  fragColor = vec4(c, 1);\n}","name":"Image","description":"","type":"image"}]}