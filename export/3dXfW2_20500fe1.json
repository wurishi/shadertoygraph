{"ver":"0.1","info":{"id":"3dXfW2","date":"1589047196","viewed":1531,"name":"Smoke and fire","username":"dcbrwn","description":"A result of kinda vague interpretation of shader by @flockaroo\n\nhttps://www.shadertoy.com/view/WdVXWy\n\nI still don't quite get how his shader works though.","likes":28,"published":1,"flags":32,"usePreview":1,"tags":["simulation","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Nothing interesting here. For the actual simulation\n// thingy look at Buffer A\n\nvec3 colorRamp(float heat) {\n    float value = pow(heat, 1.0);\n\n    return smoothstep(\n        vec3(0.0),\n        1.0 - vec3(0.05, 0.1, 0.2),\n        vec3(value)\n    );\n}\n\nvec3 fireColorRamp(float heat, float h) {\n    float value = pow(heat, 1.0 + h * 10.0);\n    \n    // Red\n    vec3 target = vec3(0.05, 0.1, 0.2);\n\n    // Blue\n    // vec3 target = vec3(0.2, 0.15, 0.1);\n\n    return smoothstep(vec3(0.0), target, vec3(value));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 vel = texture(iChannel0, uv).rgb;\n    float value = length(vel.xy);\n    vec3 smoke = colorRamp(value) * pow(uv.y + 0.2, 3.0);\n    vec3 fire = fireColorRamp(value, uv.y);\n    vec3 bg = mix(\n        vec3(0.0),\n        vec3(0.1, 0.15, 0.2),\n        uv.y\n    );\n\n    // fragColor =  vec4(vel.rgb,1.0);\n    fragColor =  vec4(bg + max(fire, smoke), 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define ROTATIONS 5\n#define SAMPLE_ROUNDS 2\n#define PI 3.1415926535\n#define PI2 6.2831853071\n\nconst float angle = PI2 / float(ROTATIONS);\nmat2 rotate = mat2(\n    cos(angle), sin(angle),\n    -sin(angle), cos(angle)\n);\n\nconst float unwindAngle = angle / 1.5;\nmat2 unwind = mat2(\n    cos(unwindAngle), -sin(unwindAngle),\n    sin(unwindAngle), cos(unwindAngle)\n);\n\nvec2 getAverageMomentum(sampler2D img, vec2 p, float r) {\n    vec2 avg = vec2(0.0);\n\n    for (int i = 0; i < SAMPLE_ROUNDS; i += 1) {\n   \t\tvec2 offset = vec2(r, 0);\n\n        for (int j = 0; j < ROTATIONS; j += 1) {\n            // Rotating velocity at \"p + offset\" by \"unwind\"\n            // tells us which effect that velocity will have\n            // on current point.\n            avg += texture(img, p + offset, r * 10.0).xy * unwind;\n            offset = offset * rotate;\n        }\n\n        r *= 2.0;\n    }\n\n    return avg / float(ROTATIONS * SAMPLE_ROUNDS);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 source = vec2(0.5, 0.15);\n    float sourceDist = length(source - uv);\n    vec2 current = texture(iChannel0, uv).xy;\n\n    if (sourceDist < 0.1) {\n        vec2 uv2 = uv + vec2(0.0, -iTime / 5.0);\n\t\tfloat dimmer = 0.7 * pow(cos(sourceDist * PI2), 20.0);\n        \n        current.x -= dimmer * texture(iChannel1, uv2).x;\n        current.y -= dimmer * texture(iChannel1, uv2 + 0.5).x;\n    }\n\n    // Minimum lookup radius\n    float r = 0.01;\n\n    vec2 avg = getAverageMomentum(iChannel0, uv, r);\n\n    // Simulate gas ascending due to heat\n    // with speed decreasing closer to top as it \"cools\" down\n    avg += vec2(0.0, -0.5 * (1.0 - uv.y));\n\n    vec2 next = texture(iChannel0, uv + avg * r).xy;\n    fragColor.xy = mix(current, next, 0.9);\n\n    // Simulate dissipation\n    fragColor *= (1.0 - uv.y * 0.01);\n}","name":"Buffer A","description":"","type":"buffer"}]}