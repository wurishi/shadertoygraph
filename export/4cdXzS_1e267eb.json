{"ver":"0.1","info":{"id":"4cdXzS","date":"1714076383","viewed":51,"name":"Koch Curve Nihilism","username":"bfoster68","description":"This fractal experiment should exhibit complex, symmetrical patterns that evolve. The colors will interplay, ranging from subtle shifts to vibrant transitions.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","math","fun"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 N(float angle) {\n    return vec2(sin(angle), cos(angle));\n}\n\nvec3 getColor(float angle) {\n    return vec3(\n        sin(angle * 2.0 * 3.1415926535897932384626433832795),\n        sin((angle * 2.0 + 0.666) * 3.1415926535897932384626433832795),\n        sin((angle * 2.0 + 1.333) * 3.1415926535897932384626433832795)\n    );\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    uv *= 1.25 + mouse.y;  // Ensure scalar operations are correctly applied to all components\n\n    vec3 col = vec3(0.0);\n    uv.x = abs(uv.x);\n    uv.y += tan((5.0 / 6.1) * 3.1415926535897932384626433832795) * 0.5;\n\n    vec2 n = N(5.0 / 6.0 * 3.1415926535897932384626433832795 + mouse.x * 2.0);\n    float d = dot(uv - vec2(0.5, 0.0), n);\n    uv -= n * max(0.0, d) * 2.0;\n\n    n = N(abs(sin(iTime * 0.025)) * (2.0 / 3.0) * 3.1415926535897932384626433832795);\n    float scale = 1.0 + mouse.y * 0.5;\n    uv.x += 0.5;\n    for (int i = 0; i < 30; i++) {\n        uv *= 2.5 - mouse.x * 0.5;  // Ensure scalar is correctly affecting the vector\n        scale *= 2.85;\n        uv.x -= 1.3;\n        uv.x = abs(uv.x);\n        uv.x -= 0.5;\n        uv -= n * min(0.0, dot(uv, n)) * 2.0;\n    }\n\n    d = length(uv - vec2(clamp(uv.x, -1.0, 1.0), 1.0));\n    vec3 colorOffset = getColor(iTime * 0.5);\n    col += colorOffset * smoothstep(1.0 / iResolution.y, 0.0, d / scale);  // Ensure colorOffset (vec3) is multiplied correctly\n    uv /= scale;\n    col += texture(iChannel0, uv * 3.0 - iTime * 0.01).rgb;\n\n    vec2 center = vec2(0.5, 0.5) - uv;\n    float vignette = smoothstep(0.3, 0.7, dot(center, center) * 4.0);\n    col *= vignette;  // Ensure vignette (float) is correctly applied to col (vec3)\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}