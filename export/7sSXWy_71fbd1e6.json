{"ver":"0.1","info":{"id":"7sSXWy","date":"1620910591","viewed":233,"name":"Rainbow Heart Tunnel","username":"Bleuje","description":"Simple 0.5 seconds loop.\nReproducing a gif animation from dvdp/davidope from memory (haven't got link, his tumblr posts are deleted). Using heart 2d sdf by iq.","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","heart","rainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// by @etiennejcb\n\n#define duration 0.5\n#define AA true\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\n// from iq https://www.shadertoy.com/view/3tyBzV\nfloat sdHeart( in vec2 p )\n{\n    p.x = abs(p.x);\n\n    if( p.y+p.x>1.0 )\n        return sqrt(dot2(p-vec2(0.25,0.75))) - sqrt(2.0)/4.0;\n    return sqrt(min(dot2(p-vec2(0.00,1.00)),\n                    dot2(p-0.5*max(p.x+p.y,0.0)))) * sign(p.x-p.y);\n}\n\nfloat de(vec3 p) {\n    p.y += 0.5+6.0*pow(0.1*abs(p.z),2.7);\n    float d = -sdHeart(p.xy);\n    \n    return d;\n}\n\nvec3 palette[8];\n\nvec3 colorOfPalette(float q)\n{\n    q = mod(q,1.0);\n    int ind = int(floor(q*7.999999999999));\n    return palette[ind];\n}\n\n\nvoid mainImage0(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = (fragCoord - .5*iResolution.xy) / iResolution.y;\n    \n    float time = mod(iTime/duration,1.0);\n    \n    // rainbow palette from https://loading.io/color/feature/Rainbow/\n    palette[0] = vec3(230.0,38.0,31.0)/256.0;\n    palette[1] = vec3(235.0,117.0,50.0)/256.0;\n    palette[2] = vec3(247.0,208.0,56.0)/256.0;\n    palette[3] = vec3(163.0,224.0,72.0)/256.0;\n    palette[4] = vec3(73.0,218.0,54.0)/256.0;\n    palette[5] = vec3(52.0,187.0,230.0)/256.0;\n    palette[6] = vec3(67.0,85.0,219.0)/256.0;\n    palette[7] = vec3(210.0,59.0,231.0)/256.0;\n\n\tvec3 ro = vec3(0, 0, -2);\n\tvec3 ta = vec3(0, 0, 0);\n\t\n\tvec3 fwd = normalize(ta - ro);\n\tvec3 left = cross(vec3(0, 1, 0), fwd);\n\tvec3 up = cross(fwd, left);\n\tvec3 rd = normalize(fwd + uv.x*left + uv.y*up);\n\n\tvec3 p;\n\tfloat t = 0., ri;\n\tfor (float i = 0.; i < 1.; i += .01) {\n\t\tri = i;\n\t\tp = ro + rd*t;\n\t\tfloat d = de(p);\n\t\tif (d < .001) break;\n\t\tt += d*.9;\n\t}\n    \n\tvec3 col = colorOfPalette(time+0.7*p.z);\n    \n\tfragColor = vec4(col, 1.);\n}\n\n// smart AA, from FabriceNeyret2\nvoid mainImage(out vec4 O, vec2 U) {\n    mainImage0(O,U);\n    if(AA)\n    if ( fwidth(length(O)) > .01 ) {  // difference threshold between neighbor pixels\n        vec4 o;\n        for (int k=0; k < 9; k+= k==3?2:1 )\n          { mainImage0(o,U+vec2(k%3-1,k/3-1)/3.); O += o; }\n        O /= 9.;\n     // O.r++;                        // uncomment to see where the oversampling occurs\n    }\n}","name":"Image","description":"","type":"image"}]}