{"ver":"0.1","info":{"id":"wljXWK","date":"1567171574","viewed":157,"name":"LBM_test_public_fix","username":"Ecter","description":"lbm implementation based off of this guys http://andrew.gibiansky.com/blog/physics/lattice-boltzmann-method/, click click to interact.  NO LONGER PRODUCES NANS!!!","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["lbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ifragCoord = ivec2(fragCoord-0.5);\n    vec4 density_velocity = texelFetch(iChannel0, ifragCoord, 0);\n    float density = density_velocity.r;\n    vec2 velocity = density_velocity.gb;\n    float vel_length = length(velocity);\n    velocity = normalize(velocity);\n\n    //Output to screen\n    fragColor = vec4(abs(velocity),density/100.0,vel_length/100.0);\n    fragColor = vec4(abs(velocity),0.0,1.0);\n    //fragColor = vec4(density/10000.0,0.0,0.0,1.0);\n    //\n    if(density_velocity.w == 1.0){\n        fragColor = vec4(1.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nconst int DIRECTION_COUNT = 9;\nconst int DIMENSION_COUNT = 2;\nconst float LATTICE_SPEED = 0.1;\nconst float TAU = 0.9;\n\n\nconst vec2 north_offset = vec2(0.0,1.0);\nconst vec2 north_west_offset = vec2(-1.0,1.0);\nconst vec2 north_east_offset = vec2(1.0,1.0);\nconst vec2 west_offset = vec2(-1.0,0.0);\nconst vec2 east_offset = vec2(1.0,0.0);\nconst vec2 south_offset = vec2(0.0,-1.0);\nconst vec2 south_west_offset = vec2(-1.0,-1.0);\nconst vec2 south_east_offset = vec2(1.0,-1.0);\nconst vec2 center_offset = vec2(0.0,0.0);\n\n\nconst vec2 offsets[DIRECTION_COUNT] = vec2[DIRECTION_COUNT](\n    north_west_offset, \n    north_offset, \n    north_east_offset,\n    west_offset, \n    center_offset,\n    east_offset,\n    south_west_offset,\n    south_offset,\n    south_east_offset);\n\n\n     \nconst int north_west_tex_idx = 0;\nconst int north_tex_idx = 1;\nconst int north_east_tex_idx = 2;\nconst int west_tex_idx = 3;\n\nconst int east_tex_idx = 0;\nconst int south_west_tex_idx = 1;\nconst int south_tex_idx = 2;\nconst int south_east_tex_idx = 3;\n\nconst int center_tex_idx = 0;\n\nfloat textureN(sampler2D NW_N_NE_W_channel, vec2 coord, vec2 resolution){\n    vec2 offset_coord = coord + south_offset;\n    return texture(NW_N_NE_W_channel, offset_coord/resolution)[north_tex_idx];\n}\n\nfloat textureNW(sampler2D NW_N_NE_W_channel, vec2 coord, vec2 resolution){\n    vec2 offset_coord = coord + south_east_offset;\n    return texture(NW_N_NE_W_channel, offset_coord/resolution)[north_west_tex_idx];\n}\n\nfloat textureNE(sampler2D NW_N_NE_W_channel, vec2 coord, vec2 resolution){\n    vec2 offset_coord = coord + south_west_offset;\n    return texture(NW_N_NE_W_channel, offset_coord/resolution)[north_east_tex_idx];\n}\n\nfloat textureW(sampler2D NW_N_NE_W_channel, vec2 coord, vec2 resolution){\n    vec2 offset_coord = coord + east_offset;\n    return texture(NW_N_NE_W_channel, offset_coord/resolution)[west_tex_idx];\n}\n\nfloat textureS(sampler2D E_SW_S_SE_channel, vec2 coord, vec2 resolution){\n    vec2 offset_coord = coord + north_offset;\n    return texture(E_SW_S_SE_channel, offset_coord/resolution)[south_tex_idx];\n}\n\nfloat textureSW(sampler2D E_SW_S_SE_channel, vec2 coord, vec2 resolution){\n    vec2 offset_coord = coord + north_east_offset;\n    return texture(E_SW_S_SE_channel, offset_coord/resolution)[south_west_tex_idx];\n}\n\nfloat textureSE(sampler2D E_SW_S_SE_channel, vec2 coord, vec2 resolution){\n    vec2 offset_coord = coord + north_west_offset;\n    return texture(E_SW_S_SE_channel, offset_coord/resolution)[south_east_tex_idx];\n}\n\nfloat textureE(sampler2D E_SW_S_SE_channel, vec2 coord, vec2 resolution){\n    vec2 offset_coord = coord + west_offset;\n    return texture(E_SW_S_SE_channel, offset_coord/resolution)[east_tex_idx];\n}\n\nfloat textureC(sampler2D C_channel, vec2 coord, vec2 resolution){\n    vec2 offset_coord = coord + center_offset;\n    return texture(C_channel, offset_coord/resolution)[center_tex_idx];\n}\n\n\nfloat calc_equilibrium(const in float density, \n                 const in vec2 velocity, \n                 const in ivec2 ij) {\n\n\tint i = ij.x;\n    int j = ij.y;\n    // u . u\n    float velmag = dot(velocity, velocity);\n    // Compute the weight.\n    float weight;\n    if(i == 0 && j == 0) {\n        weight = 4.0 / 9.0;\n    } else if(i == 0 || j == 0) {\n        weight = 1.0 / 9.0;\n    } else {\n        weight = 1.0 / 36.0;\n    }\n\n    // e_i . u\n    float dotprod = float(i) * velocity.x + float(j) * velocity.y;\n\n    float sum = 1.0;\n    sum += (3.0 / LATTICE_SPEED) * dotprod;\n    sum += (4.5 / (LATTICE_SPEED * LATTICE_SPEED)) * dotprod * dotprod;\n    sum -= (1.5 / (LATTICE_SPEED * LATTICE_SPEED)) * velmag;\n    if(density == 0.0){\n    \treturn 0.0;\n    }\n    return  weight * density * sum;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float[DIRECTION_COUNT] stream_all(\n    sampler2D NW_N_NE_W_channel, \n    sampler2D E_SW_S_SE_channel,\n    sampler2D C_channel, \n    in vec2 ifragCoord){\n\n    float north_west = textureNW(NW_N_NE_W_channel, ifragCoord, iResolution.xy);\n    float north = textureN(NW_N_NE_W_channel, ifragCoord, iResolution.xy);\n    float north_east = textureNE(NW_N_NE_W_channel, ifragCoord, iResolution.xy);\n    float west = textureW(NW_N_NE_W_channel, ifragCoord, iResolution.xy);\n    \n    float east = textureE(E_SW_S_SE_channel, ifragCoord, iResolution.xy);\n    float south_west = textureSW(E_SW_S_SE_channel, ifragCoord, iResolution.xy);\n    float south = textureS(E_SW_S_SE_channel, ifragCoord, iResolution.xy);\n    float south_east = textureSE(E_SW_S_SE_channel, ifragCoord, iResolution.xy);\n    \n    float center = textureC(C_channel, ifragCoord, iResolution.xy);\n    return float[DIRECTION_COUNT](\n        north_west, north, north_east, west, center, east, south_west, south, south_east\n    );\n    \n}\n\n\nfloat calc_density(const in float new_directions[DIRECTION_COUNT]) {\n    float density; \n    for(int i = 0; i < DIRECTION_COUNT; ++i){\n        density += new_directions[i];\n    }\n    return density;\n}\n\nvec2 calc_velocity(const in float new_directions[DIRECTION_COUNT], const in float density) {\n\n    if(density == 0.0){\n    \treturn vec2(0.0);\n    }\n    if(isinf(density)){\n        return vec2(0.0);\n    }\n    // Compute target indices.\n    vec2 velocity = vec2(0.0);\n    for(int idx = 0; idx < DIRECTION_COUNT; ++idx){\n        vec2 ij = offsets[idx];\n        float i = ij.x;\n        float j = ij.y;\n        velocity.x += new_directions[idx] * (i);\n        velocity.y += new_directions[idx] * (j);\n    }\n\n    return velocity * (LATTICE_SPEED/density);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \n    ivec2 ifragCoord = ivec2(fragCoord);\n    float new_directions[DIRECTION_COUNT] = stream_all(iChannel0, iChannel1, iChannel2, fragCoord);\n    float density = calc_density(new_directions);\n    vec2 velocity = calc_velocity(new_directions, density);\n    fragColor = vec4(density,velocity.x,velocity.y,0.0);\n    float center = textureC(iChannel2, fragCoord, iResolution.xy);\n    float debug = center;\n    if(iFrame < 10){\n        fragColor.x = 1.0;\n        fragColor.y = 0.0;\n        fragColor.z = 0.0;\n    }\n    if(isnan(density)){\n        debug = 1.0;\n        fragColor.w = debug;\n        \n    }\n    \n    //fragColor = vec4(1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame < 10){\n        fragColor = vec4(0.0);\n        return;\n    }\n    ivec2 ifragCoord = ivec2(fragCoord - 0.5);\n    float north_west = textureNW(iChannel0, fragCoord, iResolution.xy);\n    float north = textureN(iChannel0, fragCoord, iResolution.xy);\n    float north_east = textureNE(iChannel0, fragCoord, iResolution.xy);\n    float west = textureW(iChannel0, fragCoord, iResolution.xy);\n    \n    vec4 density_velocity = texelFetch(iChannel1, ifragCoord, 0);\n    float density = density_velocity.x;\n    vec2 velocity = density_velocity.yz;\n    \n    float north_west_eq = calc_equilibrium(density, velocity, ivec2(north_west_offset));\n    float north_eq = calc_equilibrium(density, velocity, ivec2(north_offset));\n    float north_east_eq = calc_equilibrium(density, velocity, ivec2(north_east_offset));\n    float west_eq = calc_equilibrium(density, velocity, ivec2(west_offset));\n    \n    \n    fragColor = vec4((north_west - (north_west - north_west_eq) / TAU),\n                     (north - (north - north_eq) / TAU),\n                     (north_east - (north_east - north_east_eq) / TAU),\n                     (west - (west - west_eq) / TAU));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame < 10){\n        fragColor = vec4(0.0);\n        return;\n    }\n    ivec2 ifragCoord = ivec2(fragCoord - 0.5);\n    float east = textureE(iChannel0, fragCoord, iResolution.xy);\n    float south_west = textureSW(iChannel0, fragCoord, iResolution.xy);\n    float south = textureS(iChannel0, fragCoord, iResolution.xy);\n    float south_east = textureSE(iChannel0, fragCoord, iResolution.xy);\n    \n    vec4 density_velocity = texelFetch(iChannel1, ifragCoord, 0);\n    float density = density_velocity.x;\n    vec2 velocity = density_velocity.yz;\n    \n    float east_eq = calc_equilibrium(density, velocity, ivec2(east_offset));\n    float south_west_eq = calc_equilibrium(density, velocity, ivec2(south_west_offset));\n    float south_eq = calc_equilibrium(density, velocity, ivec2(south_offset));\n    float south_east_eq = calc_equilibrium(density, velocity, ivec2(south_east_offset));\n    \n    \n    fragColor = vec4((east - (east - east_eq) / TAU),\n                     (south_west - (south_west - south_west_eq) / TAU),\n                     (south - (south - south_eq) / TAU),\n                     (south_east - (south_east - south_east_eq) / TAU));\n\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame < 10){\n        fragColor = vec4(10, 0.0,0.0,0.0);\n        return;\n    }\n    ivec2 ifragCoord = ivec2(fragCoord - 0.5);\n    float center = textureC(iChannel0, fragCoord, iResolution.xy);\n\n    \n    vec4 density_velocity = texelFetch(iChannel1, ifragCoord, 0);\n    float density = density_velocity.x;\n    vec2 velocity = density_velocity.yz;\n    \n    float center_eq = calc_equilibrium(density, velocity, ivec2(center_offset));\n\n\n    \n    fragColor = vec4((center - (center - center_eq) / TAU),\n                     0.0,\n                     0.0,\n                     0.0);\n\n    vec2 mouse = vec2(iMouse.zw);\n    if(mouse.x > 0.0 && mouse.y > 0.0){\n        vec2 current_mouse = vec2(iMouse.xy);\n        if(distance(fragCoord, current_mouse) < 3.0){\n            fragColor.r += vec4(1.0).r;\n        }\n    }\n}","name":"Buffer D","description":"","type":"buffer"}]}