{"ver":"0.1","info":{"id":"lfcfz7","date":"1732844351","viewed":29,"name":"GLSL_TEST10","username":"changlezeng","description":"TEST10","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test10"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 归一化像素坐标（从 0 到 1）\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // 将坐标中心化到 (0, 0)\n    vec2 pos = uv - 0.5;\n\n    // 圆环的内半径和外半径\n    float r1 = 0.3;\n    float r2 = 0.35;\n\n    // 计算当前像素点到圆心的距离\n    float dist = length(pos);\n\n    // 计算从圆心到当前像素点的角度（弧度），归一化到范围 [0.0, 1.0)\n    float angle = atan(pos.y, pos.x) / (2.0 * 3.14159265359);\n    if (angle < 0.0) angle += 1.0; // 确保角度为正值\n\n    // 旋转速度\n    float speed = 0.2; // 可根据需要调整速度\n    float rotation = mod(iTime * speed, 1.0);\n\n    // 计算经过旋转后，角度落在圆环分段中的位置\n    float segment = mod(angle - rotation, 1.0);\n\n    // 判断像素点是否位于黑色分段中（8/1 的部分）\n    bool isBlackSegment = (segment < 0.125); // 圆环的 1/8 部分为黑色\n    // 判断像素点是否在圆环内\n    bool isInRing = (dist < r2 && dist > r1);\n\n    // 根据条件设置颜色\n    vec3 col = isInRing ? (isBlackSegment ? vec3(0.0) : vec3(sin(iTime / 2.0))) : vec3(0.0);\n\n    // 输出到屏幕\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}