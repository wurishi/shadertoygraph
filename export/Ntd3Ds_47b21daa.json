{"ver":"0.1","info":{"id":"Ntd3Ds","date":"1636975494","viewed":60,"name":"DECOY Waves","username":"u7i","description":"Proof-of-Work shader","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["pow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 lerp(vec3 a, vec3 b, float alpha) {\n    return a*(1.0 - alpha) + b*alpha;\n}\n\nfloat normalizedDistance(vec2 p1, vec2 p2, float hwRatio) {\n    // Fix normalized coords\n    p1.y *= hwRatio;\n    p2.y *= hwRatio;\n    \n    return sqrt(pow(p1.x - p2.x, 2.0) + pow(p1.y - p2.y, 2.0));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 source = vec2(0.8, 0.8);\n    float wavesNum = 4.0;\n    \n    float animationSpeed = 0.05;\n    \n    vec3 startColor = vec3(0.0, 0.0, 0.0);\n    vec3 endColor = vec3(1.0, 0.528, 0.0);\n    \n    bool directionFromSource = true;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 resolution = iResolution.xy;\n    \n    float hwRatio = resolution.y / resolution.x;\n    \n    // Generate waves\n    float dist = normalizedDistance(source, uv, hwRatio);\n    float space = (1.0 - max(source.x, source.y)) / wavesNum;\n    float animCoof = iTime * animationSpeed;\n    float wave = mod(dist - animCoof, space) / space; \n    \n    // Invert wave if needed\n    if (directionFromSource) wave = 1.0 - wave;\n    \n    // Convert wave height to a color\n    vec3 col = lerp(endColor, startColor, wave);\n    \n    // Get strength ( from distance to the source )\n    float strength = 1.0 - dist;\n    col *= strength;\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}