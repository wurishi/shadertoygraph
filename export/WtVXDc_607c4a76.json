{"ver":"0.1","info":{"id":"WtVXDc","date":"1583790472","viewed":374,"name":"Day 81","username":"jeyko","description":"potaot","likes":13,"published":3,"flags":32,"usePreview":0,"tags":["mdtmjvm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Day 59\" by jeyko. https://shadertoy.com/view/3ldSWf\n// 2020-03-09 12:22:24\n\n// Fork of \"Day 55\" by jeyko. https://shadertoy.com/view/wl3Szs\n// 2020-02-16 14:20:34\n\n\n#define T(uv) texture(iChannel0,uv)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy);\n\n    #define chromaticAbberationAmt (0.01 + sin(iTime)*0.00)\n    //float f = length(uv  - 0.5);\n    float f = dot(uv  - 0.5,uv  - 0.5);\n    fragColor.x = T(uv + f*chromaticAbberationAmt).x;\n    fragColor.z = T(uv).y;\n    fragColor.y = T(uv -f*chromaticAbberationAmt).z;\n    //fragColor += clamp(texture(iChannel0,uv, 6.), 0., 1.)*0.1;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\n#define SPEED 200.\n#define iTime (iTime*SPEED )\n\n#define outline(x, w) (abs(x) - w)\n#define inline(x) -((x)) \n\n#define pi acos(-1.)\n#define tau (2.*pi)\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n#define pmod(a, x) mod(a, x) - x*0.5\n    \n#define pal(a,b,c,d,e) (a + b*sin(tau*(c*d + e)))\n\nvec2 sUv = vec2(0);\n#define mx (10.*iMouse.x/iResolution.x)\n\n\n#define spacing (0.00009)\n#define PLANES 400.\n    \n\n\nfloat xor(float x, float y) {return float(int(x) ^ int(y));}\n\n#define R iResolution.xy\n#define T(e) texture(iChannel0, (e)/R).x\n\nfloat gID;\n\n\nfloat get(vec2 fragCoord){\n    vec2 uv = (fragCoord);\n\n    //uv.x += sin(iTime)*200.;\n    \n    #define modD 100.\n    \n    vec2 id = floor(uv/modD);\n    \n\t//uv = mod(uv, modD);\n\n    //uv -= modD/2.;    \n    \n    uv *= 50. + 00.*iMouse.x/iResolution.x;\n\n    uv.y *= 3.;\n    uv.x *= 3.;\n    \n    \n    float col = 0.;\n    \n    vec2 iuv = vec2(uv);\n    \n    iuv = abs(iuv);\n    \n    //float rep = 10. + sin(floor(gID/0.3)/3.*0.001)*2.;\n    float dd = 40.3;\n    //float rep = 10. + sin(floor(gID/dd)/dd*0.1)*6.;\n    float rep = 20. + sin(floor(gID/dd)/dd*0.4)*5.;\n    iuv = floor(iuv/rep)*rep;\n    \n    #define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n    \n    \n    float r = xor(iuv.x, iuv.y);\n    \n    \n    float cumm = 0.;\n    \n    r = xor(iuv.x, iuv.y);\n    \n    \n    r = floor(r*0.006);\n    //r = floor(r*0.0065);\n    for(int i = 0; i < 1; i++){\n        if(floor(mod(r, 5.)) < 3.){\n        \tcumm += r + r + r;\n        }\n        //r += 0.3;\n        \n    }\n    \n    \n    float fr = float(r);\n    \n    \n    col += clamp(cumm, 0., 1.);\n    \n    col -= step(1.-cumm*0.01,0.)*1.;\n    \n    col = clamp(col, 0.,1.);\n    if (col == 0.) \n        col -= col + 1.;\n    return col;\n}\n\n\nfloat aa ( vec2 U) {\n\t\n\tvec3 col = vec3(0);\n    float st = 0.04;    \n    \n    // antialiasing\n    \n    float t = get(U);\n    float n = get(U + vec2(0.,st));\n    float w = get(U + vec2(0.,-st));\n    float e = get(U + vec2(st,0.));\n    float s = get(U + vec2(-st,0.));\n    \n    float ne = get(U + vec2(st,st));\n    float ns = get(U + vec2(-st,st));\n    float sw = get(U + vec2(st,-st));\n    float se = get(U + vec2(-st,-st));\n    \n    \n    float cumm = t + n + w + e + s + ne + ns + sw + se;\n    \n    //col += cumm/9.;\n    //col += (t + n + w + e + s )/5.;\n    col += (e + w)/2.;\n    \n    return col.x;\n\t\n}\n\nfloat iPlane(vec3 ro, vec3 rd, vec3 p0, vec3 n){\n    float denom = dot(rd,n);\n    if (denom > 1e-6) {\n        float t = - dot(ro - p0, n)/denom; \n\t\tif (t > 0.) return t;\n        return t;\n    }  \n    return 1e10;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\tsUv = uv;\n    uv *= 1. + dot(uv,uv)*4.;\n    \n    vec3 col = vec3(-0.0);\n\t\n    vec3 ro = vec3(0);\n    \n    \n    vec3 rd = normalize(vec3(uv,1));\n   \n    //ro.x -= 200.2;\n    ro -= rd*texture(iChannel0,60.*sUv*256.).x*0.0002;\n    \n    \n    //ro.x += 0.0 + mx*0.01;\n    ro.x += 0.033 + mx*0.01;\n    //ro.y += 0.004;\n    \n    rd.xy *= rot(1.6 );\n    rd.xz *= rot(0. + sin(iTime/SPEED)*0.06);\n    \n    #define fog(a) smoothstep(1., 0., a*23.4)\n    \n    float accum = 0.;\n    \n    float plA;\n    float m = 0.;\n    for(float i = 0.; i < PLANES + float(min(iFrame, 0)) ; i++ ){\n    \tplA = iPlane(ro, rd, vec3(0,0,mod(-iTime + i,PLANES))*spacing, vec3(0,0,1));\n        vec2 u = (ro+rd*plA).xy;\n        m = max(m, plA);\n    \t//col += sumonTheDemon( u, floor((-mx+i)/PLANES)*PLANES + i)*fog(plA);\n        gID = floor((-mx+i)/PLANES)*PLANES + i;\n        float g = smoothstep(0.,1., abs(aa( u*450.)));\n        accum += clamp(1. - g, 0., 1.)*0.06*fog(plA)*(smoothstep(1.,0.,accum*6.));\n        \n        //col += (1. - g)*fog(plA)*0.8;\n    }\n    col += accum;\n    \n    //col = mix(col, vec3(0),smoothstep(1.,0.,accum*6.));\n    \n    col *= 3.;\n    col = smoothstep(0.,1.,col);\n    col = smoothstep(0.,0.9,col);\n    col *= 1.9;\n    \n    col *= vec3(1.41,0.9,0.9);\n    col = 1. - col;\n    \n    \n    col *= 1. - 1.7*vec3(0.14 ,0.4 + sin(iTime/SPEED)*0.1,0.4)*pow(smoothstep(0.,1.,(1. - accum)*0.76), 3.);\n    \n    col *= 1. - dot(sUv,sUv)*vec3(1.8,0.7,0.8);\n    //col -=  0.8*vec3(0.7,0.4,0.5)*pow(smoothstep(0.,1.,(1. - accum)*0.87), 5.);\n    //col -= 0.5*vec3(0.7,0.9,0.5);\n    //col = pow(col, vec3(0.45));\n\t//#define pal(a,b,c,d,e) (a + b*sin(6.28*(c*d + e)))\n    \n    //col *= pal(1.,0., vec3(0.7,0.3,0.7), 0.9,0.9);\n    //col *= vec3(1.11,1.05,1.04);\n    \n    col = max(col, 0.);\n    col = pow(col, vec3(1. + 0.1*length(uv)));\n    \n    \n    fragColor = vec4(col,1.0);\n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}