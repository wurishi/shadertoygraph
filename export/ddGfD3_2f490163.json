{"ver":"0.1","info":{"id":"ddGfD3","date":"1698699325","viewed":47,"name":"Birthing the Mandelbrot","username":"FishDrowned","description":"First genuine animation","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Made via ShaderToy\n\n// Constants\nbool COLORBAND = false;\nfloat SLOWTIME = 20.0;\nfloat RADIUS = 20.0;\nfloat COLORFULL = 10.0;\nint ITERATIONS = 900;\n\n// Helper Functions\nvec2 complexPow(vec2 z, float n){return pow(length( z ), n) * vec2(cos(atan(z.y, z.x) * n), sin(atan(z.y, z.x) * n));}\nvec3 redColor(float iteration){return (iteration == float(ITERATIONS))? vec3(0.0) : vec3(iteration/float(ITERATIONS) * COLORFULL, 0.0, 0.0);}\nfloat frac(float f){return f - floor(f);}\n\n// MANDEL\nfloat mandelBrot(vec2 z_0, float i_m, float a) {\n    vec2 z_n = z_0 = (2.5 * z_0 - vec2(0.2, 0));\n    float i_z = 0.0;\n    while(i_z < i_m && length(z_n) < RADIUS){\n        z_n = (1.0 + a <= 2.0)? complexPow(z_n, 1.0 + a) + z_0 \n            : complexPow(z_n, 2.0) + (a - 1.0) * z_n + z_0;\n        i_z += 1.0;\n        if(i_z == float(ITERATIONS)) {return float(ITERATIONS);}\n    }\n    return float(i_z + 1.0 - (log(log(length(z_n)))/log(1.0 + a))); // Renormalization\n}\n\n// MAIN\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy)/iResolution.y;\n    fragColor = vec4(redColor(mandelBrot(uv, float(ITERATIONS), iTime / SLOWTIME)), 1.0);\n}","name":"Image","description":"","type":"image"}]}