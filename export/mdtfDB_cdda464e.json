{"ver":"0.1","info":{"id":"mdtfDB","date":"1697628464","viewed":48,"name":"2-D Cloud","username":"g1mishra","description":"Normal sunny cloud 2d","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cloudsky"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat random123(in vec2 uv) {\n        return fract(sin(dot(uv, vec2(122.456, 422.12)))*522.354);\n    }\n\n    float noise123(in vec2 uv) {\n        vec2 i = floor(uv);\n        vec2 f = fract(uv);\n        f = f * f * (3. - 2. * f);\n\n        float lb = random123(i + vec2(0., 0.));\n        float rb = random123(i + vec2(1., 0.));\n        float lt = random123(i + vec2(0., 1.));\n        float rt = random123(i + vec2(1., 1.));\n\n        return mix(mix(lb, rb, f.x), mix(lt, rt, f.x), f.y);\n    }\n\n    const int OCTAVES = 8;\n    float fbm123(in vec2 uv) {\n        float value = 0.;\n        float amplitude = .5;\n\n        for (int i = 0; i < OCTAVES; i++) {\n            value += noise123(uv) * amplitude;\n            amplitude *= .5;\n            uv *= 2.;\n        }\n\n        return value;\n    }\n\n    mat3 setCamera( float cr ) {\n        //vec3 cw = normalize(ta-ro);\n        vec3 cw = vec3(0.5,0.15,0.5);\n        vec3 cp = vec3(sin(cr), cos(cr),0.0);\n        // cp=vec3(0.5,0.15,0.5);\n        vec3 cu = normalize( cross(cw,cp) );\n        vec3 cv = normalize( cross(cu,cw) );\n        return mat3( cu, cv, cw );\n    }\n\n    vec3 Sky123( vec3 ro, vec3 rd) {\n        const float SC = 1e5;\n\n        // Calculate sky plane\n        float dist = (SC - ro.y) / rd.y;\n        vec2 p = (ro + dist * rd).xz;\n        p *= 1.2 / SC;\n\n        //  vec3 lightDir = normalize(vec3(-.8, .15, -.3));\n        //   float sundot = clamp(dot(rd, lightDir), 0.0, 1.0);\n\n        vec3 cloudCol =vec3(1.);//vec3(0.65,0.5,0.6);// vec3(0.7); //\n\n        vec3 skyCol = vec3(0.3,0.5,0.85) - rd.y*rd.y;\n\n        // sun\n        //  vec3 sun = 0.25 * vec3(1.0,0.7,0.4) * pow( sundot,5.0 );\n        // sun += 0.25 * vec3(1.0,0.8,0.6) * pow( sundot,64.0 );\n        //  sun += 0.2 * vec3(1.0,0.8,0.6) * pow( sundot,512.0 );\n        //  skyCol += sun;\n        //  vec3 skyCol = vec3(0.3,0.5,0.85) - rd.y*rd.y*0.5;\n        //  skyCol = mix( skyCol, 0.85 * vec3(0.7,0.75,0.85), pow( 1.0 - max(rd.y, 0.0), 4.0 ) );\n\n        // clouds\n\n        float t = -iTime * 0.1*0.25;\n        float den = fbm123(vec2(p.x - t, p.y + t));\n        skyCol = mix( skyCol, cloudCol, smoothstep(.4, .8, den));\n\n        // horizon\n        skyCol = mix( skyCol ,  vec3(.3, .5, .85), pow( 1.0 - max(rd.y, 0.0), 16.0 ) );\n\n        return skyCol;\n    }\n\n    vec3 getSky(vec2 uv) {\n        float atmosphere = sqrt(1.0-uv.y)/1.3;\n\n        vec3 skyColorTop = vec3(0.2,0.8,0.85);\n        vec3 skyColorBottom = vec3(0.5,0.96,0.95);\n        //return skyColor;\n        float scatter = pow(111.,1.0 / 15.0);\n        scatter = 1.0 - clamp(scatter,0.8,1.0);\n\n        vec3 scatterColor = mix(vec3(1.0),vec3(1.0,0.3,0.0) * 1.5,scatter);\n        return mix(skyColorBottom, skyColorBottom,0.5);\n    }\n\n    vec3 normalBlendWithWhiteSrc(vec3 b, float o) {\n        return b * (1. - o) + o;\n    }\n\n    vec3 normalBlend(vec3 b, vec3 f, float o) {\n        return b * (1. - o) + f * o;\n    }\n    \n    void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n        vec2 uv = fragCoord.xy / iResolution.xy;\n        uv -= 0.5;\n        uv.x *= iResolution.x / iResolution.y;\n  \n        vec3 ro = vec3(0.0, 0.0, 0.0);\n        mat3 cam = - setCamera(3.14);\n        vec3 rd =  normalize(cam * vec3(uv, 1.));\n    \n        vec3 col123 = Sky123(ro, rd);\n        vec3 sky = getSky(uv);\n        sky = sky + col123;\n    \n        fragColor = vec4(vec3(col123),1.0);\n    }","name":"Image","description":"","type":"image"}]}