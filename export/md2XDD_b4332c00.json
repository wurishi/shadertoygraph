{"ver":"0.1","info":{"id":"md2XDD","date":"1670413669","viewed":108,"name":"Circles tangent","username":"ABCDEFG","description":"Classic\n","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["tangents"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(p,r) smoothstep( 3./R.y, 0., abs( length(U-p) - r ) - .01 )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n   float t=iTime, x,r1=1.,r2 = .5+.3*sin(t/2.), r3,a,d, i=0.;\n   vec2 R = iResolution.xy, \n        U = ( u+u - R ) / R.y,\n       p2 = vec2(sin(t), cos(t)*sin(t/2.))  *(r1-r2);\n    O *= 0.;\n    \n    for( ; i < 6.28; i += 6.28/20. )  // ci\n    { \n       vec2 p1 = vec2(cos(i), sin(i)),\n            p3 = vec2( length(p1), length(p2) );\n        x = length(p2-p1);\n        d = p3.y,\n        \n         a =  ( dot(p3, p3) - x*x )             / 2. /   p3.x,\n        r3 =  ( r1*r1 + d*d - 2.*a*r1 - r2*r2 ) / 2. / ( r2 + r1 - a );\n        p3 = p1 * (r1-r3);\n\n        O += S(p3,r3);\n     }\n    O += S(p2,r2);\n}\n\n\n\n/*      My own old version\n\n#define ci 20.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y ;\n    vec3 col;\n    float interval = (2.*3.141) / ci;\n    float t = iTime;\n    for(float i = 0.; i < ci; i++) \n    {\n        float which = i * interval; \n        vec2 p0 = vec2(0.);\n        vec2 p1 = vec2(cos(which),sin(which));\n        float r1 = 1.;\n        float r2 = 0.5+0.3*sin(t/2.);\n        vec2 p2 = vec2(sin(t), cos(t)*sin(t/2.))*(r1-r2);\n        vec3 abc = vec3(length(p2-p1), length(p0-p1), length(p0-p2));\n        float angle = dot(abc.yz, abc.yz)-abc.x*abc.x;\n        angle /= 2.*abc.y*abc.z;\n        float d = abc.z; \n        float r3 = r1*r1+d*d-2.*angle*d*r1-r2*r2;\n        r3 /= 2.*(r2+r1-angle*d);\n        vec2 p3 = vec2(cos(which),sin(which))*(r1-r3);\n        float faktor = 15.;\n        float d4 = 1.-clamp(max(length(uv-p3)-r3, -(length(uv-p3)-r3-0.1))*faktor,0.,1.);\n        d4 *= 10.;\n        float d0 =  1.-clamp(max(length(uv-p2)-r2+0.1, -(length(uv-p2)-r2))*faktor,0.,1.);\n        col += d0 + d4;\n     }\n    fragColor = vec4(col,1.0);\n}\n*/","name":"Image","description":"","type":"image"}]}