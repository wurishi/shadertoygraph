{"ver":"0.1","info":{"id":"7tKXDz","date":"1649919172","viewed":50,"name":"fbm test dizndaz","username":"dizndaz","description":"This was my first shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat random(vec2 st){\n    return fract(sin(dot(st,vec2(78.233,12.988))) * 5462.543);\n}\n\nfloat noise(vec2 st){\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.-2.*f);\n    \n    float a = random(i);\n    float b = random(i + vec2(1.,0));\n    float c = random(i + vec2(0,1.));\n    float d = random(i + vec2(1.,1.));\n    \n    float rand = mix(mix(a,b,u.x),\n                     mix(c,d,u.x),u.y);\n    return rand;\n    \n}\n\nfloat fbm(vec2 st){\n    int octaves = 8;\n    float rand = 0.;\n    float amp = .5;\n    float freq = 1.;\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    float shift = 100.;\n    for(int i = 0; i < octaves; i++)\n    {\n        rand += amp * noise(st * freq);\n        amp *= .5;\n        st = rot * st * 2.0 + shift;\n    }\n    return rand;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    uv.x -= .5;\n    uv = uv * 5.;\n    // Time varying pixel color\n    float rand = fbm(uv);\n    float rand2 = fbm(uv *3.1415926 );\n    rand = fbm(vec2(rand,rand2) * 3.14159 + .9 * (iTime * .5 + 2.4));\n    rand += .2;\n    rand = rand * rand * rand;\n    vec3 col = vec3(noise(uv) * .2,\n                    rand * .74,\n                    rand * .9);\n                    \n    vec3 col2 = vec3(rand * 1.,\n                    rand * .55,\n                    rand * .85);\n    col += .4;\n    col = col * col* col;\n    \n    col2 += .4;\n    col2 = col2 * col2* col2;\n    col2 = col2;\n    rand = clamp(rand,0.,1. );\n    rand2 = clamp(rand2,0.,1. );\n    float o = (sin(iTime * .5)/3.) + .373;\n    float test = smoothstep(o, o + .01, rand)\n                 * 1. - smoothstep(o + .02, o + .03, rand);\n    vec3 flash = test * vec3(1.,1.,1.);\n    \n    if(rand > o){\n        col = mix(col, flash, test);\n    }else\n    {\n        col = mix(col2, flash, test);\n    }\n    col += test;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}