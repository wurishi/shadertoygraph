{"ver":"0.1","info":{"id":"4scyRs","date":"1519759059","viewed":305,"name":"Apollonianscopic kifs","username":"gPlatl","description":"A variant of 'Apollonian kifs' created by wyatt (sorry, couldn't resist) seen through a koleidoscope. \n\nMouse.Y changes symmetry, Mouse.X changes zoom factor, even if picture is paused!\n\nOK switch to full screen now and lean back!","likes":5,"published":1,"flags":64,"usePreview":0,"tags":["fractal","kifs","inversion","apollonian","koleidoscope"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MsBSWW","filepath":"https://soundcloud.com/simone-peltier/the-beatles-lucy-in-the-sky-with-diamonds","previewfilepath":"https://soundcloud.com/simone-peltier/the-beatles-lucy-in-the-sky-with-diamonds","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//-----------------------------------------------------\n// Apollonianscopic_kifs.glsl                2018-02-27\n//\n// a koleidoscopic variant of 'Apollonian kifs' which\n// original creator is wyatt, https://www.shadertoy.com/view/Xdcyzl\n//\n// input:\n//   Mouse.Y changes symmetry, \n//   Mouse.X changes zoom factor, even if picture is paused!\n//\n// Tags: apollonian, kifs, fractal, fractal, inversion, koleidoscope\n//-----------------------------------------------------\n\nfloat k=0.0;  // 1.2 .. 1.4\n\nmat3 mr;   // rotation matrix\n\nmat3 rot (vec3 s) {\n\tfloat \tsa = sin(s.x),\tca = cos(s.x),\n\t\t\tsb = sin(s.y),\tcb = cos(s.y),\n\t\t\tsc = sin(s.z),\tcc = cos(s.z);\n\treturn mat3 (\n\t\t\tvec3(cb*cc, -cb*sc, sb),\n\t\t\tvec3(sa*sb*cc+ca*sc, -sa*sb*sc+ca*cc, -sa*cb),\n\t\t\tvec3(-ca*sb*cc+sa*sc, ca*sb*sc+sa*cc, ca*cb));\n}\n\nvec3 app (vec3 v) \n{\n\tfor (int i = 0; i < 70; i++)\n        v = abs(k*mr*v/dot(v,v)*0.5-0.5)*2.-1.; \n    return v;\n}\n\nvec3 ap (vec3 v) \n{\n\tfor (int i = 0; i < 15; i++)\n        v = abs(k*mr*v/dot(v,v)*0.5-0.5)*2.-1.; \n    return v;\n}\n\nvec3 norm (vec3 p) {\n\t\tvec2 e = vec2 (.05,0.);\n    \tvec3 g = ap(p);\n\t\treturn normalize(vec3(\n\t\t\t\tap(p+e.xyy).x - g.x,\n\t\t\t\tap(p+e.yxy).y - g.y,\n\t\t\t\tap(p+e.yyx).z - g.z));\n}\n\nconst float PI = 3.14159265359;\n\n//----------------------------------------------------------------\nvoid smallKoleidoscope(inout vec2 uv, float ka)\n{\n  float angle = abs (mod (atan (uv.x, uv.y), 2.0 * ka) - ka) + 0.01*iTime;\n  uv = length(uv) * vec2(cos(angle), sin(angle));\n}\n//----------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    vec2 uv = fragCoord.xy / iResolution.xy*2. -1.;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec2 mp = iMouse.xy / iResolution.xy;\n    uv *= 0.2 + 10. * mp.x;\n    float sideCount = 1.0 + round(mp.y * 11.0);\n    smallKoleidoscope (uv, PI / sideCount);\n    \n    float t = 0.015*iTime;\n    mr = rot(t+vec3(2,3,5));\n    k = 1.3+0.1*sin(0.08*iTime);\n    vec3 v = (.5+0.25*sin(0.03*iTime))*mr*vec3(2.*uv,0);\n    vec3 col = sin(app(v))*0.5+0.5;\n    col = col*0.8+0.2*(sin(norm(v))*0.5+0.5);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}