{"ver":"0.1","info":{"id":"stccWN","date":"1659848890","viewed":82,"name":"autogen 16","username":"asynth","description":"Generated by a program written in Rust.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["generative"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec3 bi(vec3 x) { return 2. * x - 1.; }\nvec3 uni(vec3 x) { return 0.5 + 0.5 * x; }\n\nfloat tri(float x) { // triangle wave\n    float p = fract(x * .25 + .25) * 2. - 1.;\n    return 1. - 2.0 * abs(p);\n}\nvec3 tri(vec3 x) { // triangle wave\n    vec3 p = fract(x * .25 + .25) * vec3(2.) - vec3(1.);\n    return vec3(1.) - vec3(2.0) * abs(p);\n}\n\nvec3 well(vec3 x) { // a function that dips in the middle\n    return 1. - 2. / pow(1. + x*x, vec3(8.));\n}\n\nfloat quant(float a, float b) {\n    return b == 0.0 ? a : floor(a/b) * b;\n}\nvec2 quant(vec2 a, vec2 b) {\n    return vec2(\n        b.x == 0.0 ? a.x : floor(a.x/b.x) * b.x,\n        b.y == 0.0 ? a.y : floor(a.y/b.y) * b.y\n    );\n}\n\nvec3 quant(vec3 a, vec3 b) {\n    return vec3(\n        b.x == 0.0 ? a.x : floor(a.x/b.x) * b.x,\n        b.y == 0.0 ? a.y : floor(a.y/b.y) * b.y,\n        b.z == 0.0 ? a.z : floor(a.z/b.z) * b.z\n    );\n}\n\n\nvec3 sq(vec3 a) {\n    return a*a;\n}\n\nfloat sq(float a) {\n    return a*a;\n}\n\nvec3 sigmoid(vec3 a) {\n    return a / sqrt(1.0 + sq(a));\n}\n\nvec2 circ_inv(vec2 uv, vec2 center, float radius) {\n    float d = distance(uv, center);\n    if (d < radius) {\n        return uv;\n    } else {\n        float scale = sq(radius / d);\n        return (uv - center) * scale + center;\n    }\n}\n\n\nvec3 pthresh(float thresh, vec3 a, vec3 b, vec3 c) {\n    return vec3(\n        a.x < thresh ? b.x : c.x,\n        a.y < thresh ? b.y : c.y,\n        a.z < thresh ? b.z : c.z\n    );\n}\n\nvec2 xywarp(vec2 uv, vec2 a, vec2 b) {\n    return vec2(\n        uv.x + a.x * b.x,\n        uv.y + a.y * b.y\n    );\n}\n\nvec3 mix2(vec2 uv, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return mix(mix(a, b, uv.xxx), mix(c, d, uv.xxx), uv.yyy);\n}\n\nvec2 mix2(vec2 uv, vec2 a, vec2 b, vec2 c, vec2 d) {\n    return mix(mix(a, b, uv.xx), mix(c, d, uv.xx), uv.yy);\n}\n\nfloat mix2(vec2 uv, float a, float b, float c, float d) {\n    return mix(mix(a, b, uv.x), mix(c, d, uv.x), uv.y);\n}\n\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(p.xyx * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 noise(vec2 uv, vec2 period, float seed) {\n    vec2 quv = floor(uv / period) + seed;\n    vec2 fuv = mod(uv, period) / period;\n    float a = hash12(quv);\n    float b = hash12(quv + vec2(1.,0.));\n    float c = hash12(quv + vec2(0., 1.));\n    float d = hash12(quv + vec2(1.,1.));\n    \n    return vec3(mix2(smoothstep(0.,1.,fuv), a, b, c, d));\n} \n\nvec2 reflect_0(vec2 uv) { return vec2(uv.x, abs(uv.y)); }\nvec2 reflect_1(vec2 uv) { return vec2(abs(uv.x), uv.y); }\nvec2 reflect_2(vec2 uv) { return vec2(abs(uv.x), abs(uv.y)); }\nvec2 reflect_3(vec2 uv) { return uv.x > -uv.y ? uv : vec2(uv.y, uv.x); }\nvec2 reflect_4(vec2 uv) { return uv.x > uv.y ? uv : vec2(uv.y, uv.x); }\n\nvec2 repeat_0(vec2 uv, float q) { return vec2(quant(uv.x, q), uv.y); }\nvec2 repeat_1(vec2 uv, float q) { return vec2(uv.x, quant(uv.y, q)); }\nvec2 repeat_2(vec2 uv, float q) { return vec2(quant(uv.x, q), quant(uv.y, q)); }\nvec2 repeat_3(vec2 uv, float q) { return vec2(tri(uv.x / q) * q, uv.y); }\nvec2 repeat_4(vec2 uv, float q) { return vec2(uv.x, tri(uv.y / q) * q); }\nvec2 repeat_5(vec2 uv, float q) { return vec2(tri(uv.x / q) * q, tri(uv.y / q) * q); }\n\nvec2 rect_to_polar(vec2 uv) { return vec2(length(uv), atan(uv.y, uv.x)/1.570796); }\nvec2 polar_to_rect(vec2 uv) { float angle = uv.y*1.570796; return vec2(uv.x * cos(angle), uv.x * sin(angle)); }\n\nvec3 node_1(vec2 uv) {\n\tuv = (mat2(1.2619,1.0486,0.8529,-1.1948)*(uv-vec2(-0.5054,0.7199)+vec2(-0.5054,0.7199)));\n\treturn vec3(length(uv));\n}\n\nvec3 node_2(vec2 uv) {\n\tuv = circ_inv(uv, vec2(0.3627, -0.2220), 0.1125);\n\treturn vec3(uv.y);\n}\n\nvec3 node_3(vec2 uv) {\n\tvec3 a1 = tri(node_1(uv)*2.7190 + 0.4236 + iTime*0.1785);\n\tuv = xywarp(uv, vec2(-0.1548, 0.7680), a1.xy);\n\treturn node_2(uv);\n}\n\nvec3 node_4(vec2 uv) {\n\tuv = xywarp(uv, vec2(0.3024, 0.4623), vec3(uv.x).xy);\n\tvec3 b1 = mix2(uv, vec3(0.1973, 0.9887, 0.9613), vec3(0.8530, 0.1626, 0.6711), vec3(0.5560, 0.9921, 0.2919), vec3(0.1826, 0.4662, 0.5014));\n\tvec3 b2 = sin(quant((b1 + vec3(uv.y)), vec3(length(uv)))*3.2126 + 0.0560 + iTime*0.3583);\n\treturn b2;\n}\n\nvec3 node_5(vec2 uv) {\n\tvec3 a1 = mix2(uv, vec3(0.7324, 0.8535, 0.2358), vec3(0.6726, 0.4264, 0.1447), vec3(0.8431, 0.9339, 0.7440), vec3(0.1242, 0.1743, 0.8695));\n\tvec3 a2 = vec3(0.2288, 0.3798, 0.7304);\n\tuv = xywarp(uv, vec2(-0.2349, 0.9974), (a1 + a2).xy);\n\treturn vec3(uv.x);\n}\n\nvec3 node_6(vec2 uv) {\n\tuv = circ_inv(uv, vec2(0.0256, -0.0497), 0.2411);\n\tvec3 a1 = vec3(0.7334, 0.0211, 0.2476);\n\treturn a1;\n}\n\nvec3 node_7(vec2 uv) {\n\tuv = reflect_2(uv);\n\treturn vec3(uv.x);\n}\n\nvec3 node_8(vec2 uv) {\n\tuv = reflect_3(uv);\n\treturn vec3(length(uv));\n}\n\nvec3 node_9(vec2 uv) {\n\tuv = (mat2(0.7359,1.3568,-0.9913,1.0157)*(uv-vec2(0.6879,-0.0471)+vec2(0.6879,-0.0471)));\n\treturn sq(vec3(uv.x));\n}\n\nvec3 node_10(vec2 uv) {\n\tvec3 a1 = vec3(0.2523, 0.9597, 0.0029);\n\tuv = xywarp(uv, vec2(0.7184, -0.3449), mod(vec3(uv.x), mod(a1, vec3(uv.y))).xy);\n\tvec3 b1 = tri(node_8(uv)*4.2994 + 0.1626 + iTime*0.2177);\n\tvec3 b2 = vec3(0.3928, 0.7128, 0.6416);\n\treturn max(b1, (-((-node_9(uv)) / min(max(vec3(uv.x), b2), vec3(uv.y)))));\n}\n\nvec3 node_11(vec2 uv) {\n\tuv = circ_inv(uv, vec2(0.4817, -0.4488), 0.1637);\n\treturn (-node_10(uv));\n}\n\nvec3 node_12(vec2 uv) {\n\tuv = repeat_2(uv, 0.7559);\n\treturn node_11(uv);\n}\n\nvec3 node_13(vec2 uv) {\n\tuv = circ_inv(uv, vec2(0.5642, -0.0429), 0.3907);\n\tvec3 a1 = vec3(0.6496, 0.6894, 0.9126);\n\treturn uni((node_12(uv) + (-min(a1, vec3(uv.y)))));\n}\n\nvec3 top(vec2 uv) {\n\t\tvec3 a1 = sin(node_3(uv)*1.7530 + 0.5062 + iTime*0.2503);\n\tvec3 a2 = vec3(0.2477, 0.4561, 0.7621);\n\tvec3 a3 = tri(max(a2, node_7(uv))*2.8979 + 0.6512 + iTime*0.2142);\nreturn (mod(bi(a1), mod(node_4(uv), bi(mod((node_5(uv) / (node_6(uv) / (-vec3(uv.y)))), (-bi(a3)))))) + sq(uni(node_13(uv))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 col = abs(sin(top(uv)+0.04*iTime));\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}