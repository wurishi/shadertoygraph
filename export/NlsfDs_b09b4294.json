{"ver":"0.1","info":{"id":"NlsfDs","date":"1651680693","viewed":143,"name":"Hex Voronoi/Worley","username":"LoganOracio","description":"Hex organsised Vornoi noise\nDefinetly not the most optimised thing in the world i call cell 5 times , too lazy to derive the other cells coordinates from the cell position","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","hex"],"hasliked":0,"parentid":"flsfDs","parentname":"MultiColor HexGrid"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* https://www.shadertoy.com/view/XsX3zB\n *\n * The MIT License\n * Copyright Â© 2013 Nikita Miropolskiy\n * \n * ( license has been changed from CCA-NC-SA 3.0 to MIT\n *\n *   but thanks for attributing your source code when deriving from this sample \n *   with a following link: https://www.shadertoy.com/view/XsX3zB )\n *\n * ~\n * ~ if you're looking for procedural noise implementation examples you might \n * ~ also want to look at the following shaders:\n * ~ \n * ~ Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n * ~\n * ~ Noise shaders by iq:\n * ~     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n * ~     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n * ~     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n * ~     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n * ~     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n * ~     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n * ~     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n * ~     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n * ~     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n * ~     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n * ~ \n *\n */\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\nvec2 simplex2(vec3 uv)\n{\n    return 1.0+vec2(simplex3d(uv),simplex3d(uv+64.0));\n}\nvec2 cell(vec2 v)\n{\n    v.y*=1.1547;\n    v.x-=v.y*.5;\n    vec2 f = floor(v);\n    vec2 c = fract(v);\n    \n    float mx = mod(f.x,3.0);\n    if(mx==0.0)\n    {\n        f.y-=2.0;\n    }\n    else if(mx==2.0)\n    {\n        f.y+=2.0;\n    }\n    float my = mod(f.y,3.0);\n    if(my==0.0)\n    {\n        f.x += 1.0;\n    }\n    else if(my==1.0)\n    {\n        f.y += 1.0;\n    }\n    else if(c.x+c.y>1.0)\n    {\n        f.x += 1.0;\n        f.y += 1.0;\n    }\n    if(mx==0.0)\n    {\n        f.y+=2.0;\n    }\n    else if(mx==2.0)\n    {\n        f.y-=2.0;\n    }\n    \n    f.x+=f.y*.5;\n    f.y/=1.1547;\n    return f;\n}\n\nfloat hex_voronoi(vec2 uv,float randomness, float animation)\n{\n    vec2 coords = cell(uv);\n    vec2 coords_t = cell(uv+vec2(0.0,1.0));\n    vec2 coords_tr = cell(uv+vec2(1.,1.0));\n    vec2 coords_r = cell(uv+vec2(1.,-0.5));\n    vec2 coords_l = cell(uv+vec2(-.5,1.5));\n    \n    vec2 a00 = -randomness*simplex2(vec3(coords,animation))+coords;\n    vec2 a01 = -randomness*simplex2(vec3(coords_t,animation))+coords_t;\n    vec2 a11 = -randomness*simplex2(vec3(coords_tr,animation))+coords_tr;\n    vec2 a10 = -randomness*simplex2(vec3(coords_r,animation))+coords_r;\n    vec2 a111 = -randomness*simplex2(vec3(coords_l,animation))+coords_l;\n    \n    float min_dist = length(a00-uv);\n    min_dist = min(min_dist,length(a01-uv));\n    min_dist = min(min_dist,length(a11-uv));\n    min_dist = min(min_dist,length(a10-uv));\n    min_dist = min(min_dist,length(a111-uv));\n    \n    return min_dist*.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 8.*(2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    fragColor = vec4(hex_voronoi(uv,0.5,iTime));\n}","name":"Image","description":"","type":"image"}]}