{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define GLSLIFY 1\n\nfloat orenNayarDiffuse_3_0(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float roughness,\n  float albedo) {\n  \n  float LdotV = dot(lightDirection, viewDirection);\n  float NdotL = dot(lightDirection, surfaceNormal);\n  float NdotV = dot(surfaceNormal, viewDirection);\n\n  float s = LdotV - NdotL * NdotV;\n  float t = mix(1.0, max(NdotL, NdotV), step(0.0, s));\n\n  float sigma2 = roughness * roughness;\n  float A = 1.0 + sigma2 * (albedo / (sigma2 + 0.13) + 0.5 / (sigma2 + 0.33));\n  float B = 0.45 * sigma2 / (sigma2 + 0.09);\n\n  return albedo * max(0.0, NdotL) * (A + B * s / t) / 3.14159265;\n}\n\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_1_1(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_1_1(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_1_2(vec4 x) {\n     return mod289_1_1(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_1_3(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise_1_4(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D_1_5 = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g_1_6 = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g_1_6;\n  vec3 i1 = min( g_1_6.xyz, l.zxy );\n  vec3 i2 = max( g_1_6.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D_1_5.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289_1_1(i);\n  vec4 p = permute_1_2( permute_1_2( permute_1_2(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D_1_5.wyz - D_1_5.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1_1_7 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0_1_8 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1_1_7.xy,h.z);\n  vec3 p3 = vec3(a1_1_7.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt_1_3(vec4(dot(p0_1_8,p0_1_8), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0_1_8 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0_1_8,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_2_9(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289_2_9(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute_2_10(vec3 x) {\n  return mod289_2_9(((x*34.0)+1.0)*x);\n}\n\nfloat snoise_2_11(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289_2_9(i); // Avoid truncation effects in permutation\n  vec3 p = permute_2_10( permute_2_10( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\n\nfloat smin_4_12(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\n\n\n\n// Taken from https://www.shadertoy.com/view/4ts3z2\n// By NIMITZ  (twitter: @stormoid)\n// good god that dudes a genius...\n\nfloat tri( float x ){\n  return abs( fract(x) - .5 );\n}\n\nvec3 tri3( vec3 p ){\n\n  return vec3(\n      tri( p.z + tri( p.y * 1. ) ),\n      tri( p.z + tri( p.x * 1. ) ),\n      tri( p.y + tri( p.x * 1. ) )\n  );\n\n}\n\n\nfloat triNoise3D( vec3 p, float spd , float time){\n\n  float z  = 1.4;\n\tfloat rz =  0.;\n  vec3  bp =   p;\n\n\tfor( float i = 0.; i <= 3.; i++ ){\n\n    vec3 dg = tri3( bp * 2. );\n    p += ( dg + time * .1 * spd );\n\n    bp *= 1.8;\n\t\tz  *= 1.5;\n\t\tp  *= 1.2;\n\n    float t = tri( p.z + tri( p.x + tri( p.y )));\n    rz += t / z;\n    bp += 0.14;\n\n\t}\n\n\treturn rz;\n\n}\n\n\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll ) {\n  float s = sin(0.0);\n  float c = cos(0.0);\n  vec3 ww = normalize( ta - ro );\n  vec3 uu = normalize( cross(ww,vec3(s,c,0.0) ) );\n  vec3 vv = normalize( cross(uu,ww));\n  return mat3( uu, vv, ww );\n}\n\nvec3 doBackground(vec2 p) {\n  vec3 col = vec3(0.0);\n\n  col += snoise_1_4(vec3(p * 0.1, iTime)) * vec3(0.3, 0.1, 0.05);\n  col += snoise_1_4(vec3(iTime, p * 0.4)) * vec3(0.1, 0.2, 0.4);\n  return clamp(col, vec3(0.0), vec3(1.0));\n}\n\nfloat sdCone(vec3 p, vec2 c) {\n  float q = length(p.xy);\n  return dot(normalize(c),vec2(q,p.z));\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdCylinder(vec3 p, vec3 c) {\n  return length(p.xz-c.xy)-c.z;\n}\n\nvec2 doModel(vec3 p) {\n  float r = 0.5 + pow(triNoise3D(p * 0.5 + iTime * vec3(0, 0.1, 0), 1.5, iTime) * 0.1, 1.);\n  float d = length(p) - r;\n\n  return vec2(d, 0.0);\n}\n\nvec3 calcIntersection(vec3 ro, vec3 rd) {\n  const float maxd = 20.0;\n  const float prec = 0.001;\n  float h = prec * 2.0;\n  float t = +0.0;\n  float r = -1.0;\n  float k = -1.0;\n  float g = 0.0;\n\n  for (int i = 0; i < 90; i++) {\n    if (h < prec || t > maxd) break;\n    vec2 m = doModel(ro + rd * t);\n    h = m.x;\n    k = m.y;\n    t += h;\n    g += 0.025;\n  }\n\n  g = pow(g, 2.0);\n\n  if (t < maxd) r = t;\n\n  return vec3(r, k, g);\n}\n\nvec3 calcNormal(vec3 pos) {\n  const float eps = 0.002;\n\n  const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n  const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n  const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n  const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize(\n    v1*doModel( pos + v1*eps ).x +\n    v2*doModel( pos + v2*eps ).x +\n    v3*doModel( pos + v3*eps ).x +\n    v4*doModel( pos + v4*eps ).x\n \t);\n}\n\nvec3 doLighting(vec3 pos, vec3 nor, vec3 rd) {\n  vec3 lig = vec3(0.0);\n  \n  vec3  dir1 = normalize(vec3(0.3, 0.9, 0.1));\n  vec3  col1 = vec3(0.3, 0.5, 1.0);\n  float dif1 = orenNayarDiffuse_3_0(dir1, normalize(-rd), nor, 0.5, 1.9);\n  \n  vec3  dir2 = normalize(vec3(0, -1, 0.5));\n  vec3  col2 = vec3(0.4, 0.0, 0.2);\n  float dif2 = orenNayarDiffuse_3_0(dir2, normalize(-rd), nor, 0.5, 1.9);\n  \n  lig += dif1 * col1;\n  lig += dif2 * col2;\n  lig += vec3(0.005, 0.03, 0.01);\n  \n  return lig;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n  vec3 color = doBackground(p);\n\n  float an = 0.0; //9*iTime;\n\tvec3 camPos = vec3(3.5*sin(an),1.0,3.5*cos(an));\n  vec3 camTar = vec3(0.0,0.0,0.0);\n  mat3 camMat = calcLookAtMatrix(camPos, camTar, 0.0);\n\n  vec3 ro = camPos;\n  vec3 rd = normalize(camMat * vec3(p.xy, 2.0));\n\n  vec3 t = calcIntersection(ro, rd);\n  if (t.x > -0.5) {\n    vec3 pos = ro + rd * t.x;\n    vec3 nor = calcNormal(pos);\n\n    color = mix(doLighting(pos, nor, rd), color, 0.0);\n  }\n\n  color += t.z * mix(vec3(0.1, 0.8, 1.5), vec3(1.5, 0, 0), 1.0 - (p.y + 0.7)) * pow(triNoise3D(vec3(p, iTime), 2.5, iTime) * 3.0 + 0.9, 0.3);\n  color.g = smoothstep(-0.2, 1.1, color.g);\n  color.r = smoothstep(0.1, 0.9, color.r);\n    \n  fragColor.rgb = color;\n  fragColor.a   = 1.0;\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4t2Gzz","date":"1426663470","viewed":1132,"name":"[NV15] 18/3/15","username":"hughsk","description":"Experimenting with a few new techniques.","likes":55,"published":1,"flags":0,"usePreview":0,"tags":["noise","ray","triangle","glow","edge","nv15"],"hasliked":0,"parentid":"","parentname":""}}