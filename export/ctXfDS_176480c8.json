{"ver":"0.1","info":{"id":"ctXfDS","date":"1693408646","viewed":245,"name":"Tangent Space Matrix Spheremap","username":"gehtsiegarnixan","description":"This translates a vector from tangent space to world space or back from a sphere mapping.","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["3d","uv","mapping","matrix","tangent","tangentspace","tbn"],"hasliked":0,"parentid":"-1","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"/*\nThis demo shows the process of translating a vector between tangent \nand world space for sphere mapping without relying on any vertices.\nThis methodology proves particularly valuable for tasks like \ntranslating wind directions between world and tangent space.\n\nTo achieve this, it is necessary to generate the normal, tangent, \nand bitangent vectors corresponding to your mapping. The normal \nvector points upwards from the surface of the mapping, while the \ntangent vector aligns with the +X direction of your UV mapping in \nworld space. Similarly, the bitangent vector corresponds to the +Y \ndirection of your UV mapping.\n\nThese vectors are combined within a 3x3 matrix. When this matrix is \nmultiplied by a vector, it effectively transforms the vector to \nworld space. Conversely, the inverse of this matrix facilitates the \ntranslation of a vector from world space back to the tangent space \nof your mapping.\n\nThe visual representation is a fusion of a flow plot, which showcases \n3D coordinates in world space on a surface by displacing flowlines. \nThe wind direction is oriented perpendicular to this surface, \nmimicking the behavior of water waves. The arrows within the plot \nare in tangent space, indicating the direction of the vector in \ntangent space.\n\nSee here how the quiverplot works:\nhttps://www.shadertoy.com/view/dssyzf\n\nSee here how the flow plot works:\nhttps://www.shadertoy.com/view/dlSyDw\n\nThis plot has mouse controls to look around. Play with the constants\nbelow to edit the visualized vectors.\n*/\n\n// Define your custom direction here\n#define DIRECTION vec3(1.,1.,1.)\n\n// enable DIRECTION is worldspace, disable DIRECTION is tangent space\n//#define DIRECTIONIWORLDSPACE\n\n//Spherical mapping\nvec2 sphereMap(vec3 uvw) {\n    // merkator projection\n    float u = 0.5 + atan(uvw.y, uvw.x) / (2.*3.1415);\n    float v = 0.5 + asin(uvw.z) / 3.1415;\n    return vec2(u, v);\n}\n\n// TBN Matrix for the spheremapping above\nmat3 sphereTBNMatrix(vec3 normal) {\n    // vec3 poleAxis = vec3(0,0,1.);\n    // vec3 tangent = normalize(cross(poleAxis, normal));\n    vec3 tangent = normalize(vec3(-normal.y, normal.x, 0.));\n    vec3 bitangent = cross(normal, tangent);\n    return mat3(tangent, bitangent, normal);\n}\n\n// sphere normals form morgan3d https://www.shadertoy.com/view/4dsGD2\nvec3 inverseSphereMap(vec2 uv) {\n    // Inverse mapping for u\n    float theta = uv.y * 3.1415;\n\tfloat phi   = uv.x * 3.1415 * 2.0;     \n    float sinTheta = sin(theta);  \n\n    // Equation from http://graphicscodex.com  [sphry]\n\tvec3 dir = - vec3(sinTheta * cos(phi),                     \n                    sinTheta * sin(phi),\n                    cos(theta));\n    return dir;\n}\n\n// TBN Matrix Approximation for the spheremapping above\nmat3 sphereTBNMatrixApprox(vec3 normal) {\n    // Tiny offset in UV coordinates\n    vec2 offsetUV = sphereMap(normal) + vec2(0.001, 0.); \n    vec3 normalOffset = inverseSphereMap(offsetUV);\n    vec3 tangent = normalize(normalOffset - normal);\n    vec3 bitangent = cross(normal, tangent);\n    return mat3(tangent, bitangent, normal);\n}\n\nvec3 TangentSpacePlot(vec3 uvw, vec3 direction) {\n    // generate mercator projection\n    vec2 uv = sphereMap(uvw);\n    \n    // tangent space matrix\n    mat3 tbnMatrix = sphereTBNMatrix(uvw);\n\n    #ifdef DIRECTIONIWORLDSPACE\n        // translate world space vector to tangent space\n        vec3 directionWS = direction;\n        vec2 directionTS = vec3(inverse(tbnMatrix) * direction).xy;\n    #else\n        // translate tangent space vector to world space\n        vec3 directionWS = tbnMatrix * vec3(direction.xy,0);\n        vec2 directionTS = direction.xy;\n    #endif\n        \n    // quiver plot in tangent space\n    float arrowscale = 20.;\n    float tsPlot = quiverPlot(uv, directionTS, arrowscale);   \n    \n    // World Space flow plot\n    float time = iTime * 0.25;\n    vec3 wsPlot = flowPlot(uvw, directionWS, time);\n\n    return max(wsPlot, vec3(tsPlot));\n}\n\n// _____________________________3D Section_____________________________\n// https://www.shadertoy.com/view/4sjXW1 by nimitz (twitter: @stormoid)\n\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}\n\nfloat iSphere(in vec3 ro, in vec3 rd)\n{\n    vec3 oc = ro;\n    float b = dot(oc, rd);\n    float c = dot(oc,oc) - 1.;\n    float h = b*b - c;\n    if(h <0.0) return -1.;\n    return -b - sqrt(h);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tvec2 p = fragCoord.xy/iResolution.xy-0.5;\n\tp.x*=iResolution.x/iResolution.y;\n\tvec2 um = iMouse.xy / iResolution.xy-.5;\n\tum.x *= iResolution.x/iResolution.y;\n    p*= 1.5;\n\t\n    //camera\n\tvec3 ro = vec3(0.,0.,2.4);\n    vec3 rd = normalize(vec3(p,-1.5));\n    mat2 mx;\n    mat2 my;\n    if(iMouse.x > 0.0)\t{    \n        mx = mm2(um.x*5.);\n        my = mm2(um.y*5.);\n    } else {\n        mx = mm2(iTime*.1+um.x*5.);\n        my = mm2(iTime*0.05+um.y*5.);\n    }\n    ro.xz *= mx;rd.xz *= mx;\n    ro.xy *= my;rd.xy *= my;\n    \n    float t = iSphere(ro,rd);\n    vec3 col = vec3(0);\n    \n    if (t > 0.)\n    {\n    \tvec3 pos = ro+rd*t;\n        // Sphere mapping\n    \tcol = TangentSpacePlot(pos, DIRECTION);\n    } else {\n        // Background mapping\n        vec3 pos = rd;  \n        col = DIRECTION;\n    }\n    \n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//_____________________Flow Plot______________________________\n\n// 3D cube grid with lines in RGB for XYZ axes\nvec3 cubeGrid(vec3 uvw, float lineThickness) {\n    // Side distance of the cube\n    vec3 sideDistBig = abs(fract(uvw + 0.5) - 0.5);\n    \n    // Smaller scaled side distance of the cube\n    float detailScale = 4.0;\n    uvw *= detailScale;\n    vec3 sideDistDetail = abs(fract(uvw + 0.5) - 0.5);\n    \n    // Merge grids\n    vec3 joined = min(sideDistBig, sideDistDetail);\n    \n    // Create hard outlines of sides\n    return step(joined, vec3(lineThickness)); \n}\n\n// viszalizes 3D Vector\nvec3 flowPlot(vec3 uvw, vec3 direction, float time) {\n    // should probably be input paramters\n    float gridScale = 1.3;\n    float lineThickness = 0.02;\n    float vectorScale = 0.15;\n    \n    direction *= vectorScale;\n    \n    uvw *= gridScale;\n    \n    // Static grid (looks calmer)\n    vec3 grid = cubeGrid(uvw, lineThickness);\n    \n    // Animated grid\n    int count = 7;\n    for (int index = 1; index < count; index += 1) {\n        // Unique percentage of each individual grid \n        float percent = fract(float(index) / float(count - 1) + time);        \n        // Fading brightness\n        float brightness = 1.0 - percent;\n        \n        // Scale offset\n        vec3 offset = percent * direction;\n        \n        // Sample grid\n        vec3 aniGrid = cubeGrid(uvw - offset, lineThickness);\n        \n        // Apply brightness which fades with distance\n        aniGrid *= brightness;\n\n        // Add to the existing grid color output\n        grid = max(grid, aniGrid);\n    }\n    \n    return grid;\n}\n\n//_____________________Quiver Plot______________________________\n\nvec2 rotateUV(vec2 uv, vec2 direction) {\n    // Normalize the direction vector\n    direction = normalize(direction);\n\n    // Calculate the rotation matrix\n    mat2 rotationMatrix = mat2(\n        direction.x, -direction.y,\n        direction.y, direction.x\n    );\n\n    // Rotate the UV coordinates\n    return rotationMatrix * uv;\n}\n\n// 2D quiverplot for visualizing 2d vectors\nfloat quiverPlot(vec2 uv, vec2 direction, float gridSize) {\n    float lineThickness = 0.03;    // Thickness of the arrow line\n    float tipSteepness = 3.0;      // Controls the angle of the arrow tip\n\n    float maxSize = 0.9;           // Maximum arrow length (1 should be the max)\n    float minSize = 0.25;           // Minimum arrow length\n\n    // break UV coordinates into grid sections\n    uv = fract(uv * gridSize) - 0.5;\n        \n    // scale point size with vector length\n    float vectorLen = length(direction); \n    float size = mix(minSize, maxSize, clamp(vectorLen, 0.0, 1.0));\n    uv /= size;\n\n    // Rotate UV coordinates based on the direction vector\n    uv = rotateUV(uv, direction);\n\n    // absolute position\n    float absV = abs(uv.y);\n\n    // Calculate center line of the arrow shape\n    float lineOffset = tipSteepness * lineThickness; // offset so lines doesn't go over the tip\n    float line = max(absV, abs(uv.x + lineOffset) - 0.5 + lineOffset);\n\n    // Caculation of the Arror Tip\n    float tip = max(abs((uv.x / tipSteepness) + absV - (0.5 / tipSteepness) + lineThickness), -uv.x + 0.1);\n\n    // Combine line and tip to create the arrow shape\n    float arrow = min(tip, line) - lineThickness;\n\n    // Create a mask based on the arrow shape\n    return step(arrow, 0.0); // no AA\n    //float blur = (gridSize * 1.0)/(size * iResolution.y);\n    //return  smoothstep(blur, -blur, arrow) ; // cheap AA\n}","name":"Common","description":"","type":"common"}]}