{"ver":"0.1","info":{"id":"sdjyW3","date":"1644249393","viewed":89,"name":"Voronoi experiment 07-02-22","username":"jonny_townend","description":"Voronoi experiment","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(float x) {\n    return fract(sin(78.345*x)*2345.256);\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.x;\n    vec2 m = iMouse.xy/iResolution.x;\n    float t = iTime;\n    \n    float col = 0.;\n    \n    float N = 100.;\n    float minDist = 1.;\n    for (float i=0.; i<N; i++) {\n        // Create a random point\n        vec2 p = vec2(rand(i), rand(i*100.));\n        p += sin(10.*p + t) * 0.1;\n        p += vec2(sin(10.*p.x + t), cos(10.*p.y + t)) * 0.1;\n        \n        // Move the point away from the mouse\n        vec2 f = p - m;\n        float dfM = clamp(1./length(f), 0., 4.);\n        p += 0.01 * dfM * normalize(f);\n        \n        // Voronoi\n        float d = distance(uv, p);\n        if (d < minDist) {\n            minDist = d;\n            col = i / (N*1.5);\n        }\n    }\n    col /= minDist * 80.;\n    col += (1. - map(minDist, 0.01, 0.2, 0., 1.)) * 0.4;\n\n    // Output to screen\n    fragColor = vec4(vec3(col),1.0);\n}","name":"Image","description":"","type":"image"}]}