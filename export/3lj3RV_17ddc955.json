{"ver":"0.1","info":{"id":"3lj3RV","date":"1560283416","viewed":186,"name":"Nicknakin/RaymarchingV2","username":"Nicknakin","description":"ray marching","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdSphere(vec3 p, float r){\n    //vec3 q = fract(p)*2.0-1.0;\n    return length(p)-r;\n}\n\nfloat sdCube(vec3 p, vec3 b){\n\tvec3 d = abs(p) - b;\n\treturn length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sdUnion(float dist1, float dist2){\n\treturn min(dist1,dist2);   \n}\n\nfloat sdIntersect(float dist1, float dist2){\n\treturn max(dist1,dist2);  \n}\n\nfloat sdNegate(float dist1, float dist2){\n \treturn max(-dist1, dist2);   \n}\n\nfloat marchRay(vec3 o, vec3 r){\n \tfloat t = 0.0;\n    for(int i = 0; i < 512 && t >= 0.0; i++){\n\t\tvec3 p = o+r*t;\n        float cube = sdCube(fract(p)*2.0-1.0, vec3(0.9,0.9,0.9));\n        float sphere = sdSphere(fract(p)*2.0-1.0, 1.25);\n        \n        float d = sdNegate(sphere, cube)-0.1;\n        t += d*0.25;\n    }\n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n\t\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0));\n    float theta = iTime/10.0;\n    r.xz *= mat2(cos(theta), sin(theta), -sin(theta), cos(theta));\n    vec3 o = vec3(0.5, 0.5, -iTime);\n    \n    float t = marchRay(o, r);\n    \n    float fog = 1.0/(1.0+t*t*0.1);\n    vec3 fc = vec3(fog);\n\n    fragColor = vec4(fc, 1.0);\n}","name":"Image","description":"","type":"image"}]}