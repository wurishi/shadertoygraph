{"ver":"0.1","info":{"id":"fsycDR","date":"1654655687","viewed":215,"name":"glowdoodle interdimensional","username":"ericrosenbizzle","description":"remember to travel forward in time only","likes":2,"published":1,"flags":34,"usePreview":0,"tags":["webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec3 img = texture(iChannel0,fragCoord/iResolution.xy).xyz;\n   \tfragColor = vec4(img, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float rgbToGray(vec3 rgb) {\n\tconst vec3 W = vec3(0.2125, 0.7154, 0.0721);\n    return dot(rgb, W);\n}\n\nvec3 hueShift2(vec3 color, float hue)\n{\n    const vec3 k = vec3(0.57735, 0.57735, 0.57735);\n    float cosAngle = cos(hue);\n    return vec3(color * cosAngle + cross(k, color) * sin(hue) + k * dot(k, color) * (1.0 - cosAngle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // mirror reverse the camera input\n    vec2 pos = fragCoord/iResolution.xy;\n    pos = vec2(1.0 - pos.x, pos.y);\n    \n    vec3 cam = texture(iChannel0,pos).xyz;\n    \n    vec2 offsetPos = fragCoord/iResolution.xy;\n    //offsetPos /= 1.01;\n\n    vec2 center = vec2(0.5, 0.5);\n    vec2 v2 = (fragCoord/iResolution.xy) - center;\n    v2 *= 0.99;\n    offsetPos = v2 + center;\n\n    vec3 image = texture(iChannel1,offsetPos).xyz;\n    \n    float camBrightness = rgbToGray(cam);\n    float imageBrightness = rgbToGray(image);\n    \n    //vec3 shifted = hueShift2(cam, iTime); \n    vec3 shifted = cam;\n    \n    if (camBrightness > imageBrightness) {\n\t    fragColor = vec4(shifted, 1.);\n    } else {\n\t    fragColor = vec4(image, 1.);    \n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec3 hueShift(vec3 color, float hue)\n{\n    const vec3 k = vec3(0.57735, 0.57735, 0.57735);\n    float cosAngle = cos(hue);\n    return vec3(color * cosAngle + cross(k, color) * sin(hue) + k * dot(k, color) * (1.0 - cosAngle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 filtered = texture(iChannel0,fragCoord/iResolution.xy).xyz;\n    \n    // hue shift\n    vec3 shifted = hueShift(filtered, 0.1);\n    //vec3 shifted = filtered;\n    \n    // Slow fade\n    //fragColor = vec4(filtered * 0.999, 1.);\n    fragColor = vec4(shifted * 0.999, 1.);\n    //fragColor = vec4(shifted, 1.);\n    \n    // Click to clear\n    vec4 m = iMouse / iResolution.xxxx;\n    if(m.z>0.0 ) {\n        fragColor = vec4(0.,0.,0.,1.);\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}