{"ver":"0.1","info":{"id":"Dlt3D4","date":"1682447065","viewed":66,"name":"Pendulum Practice","username":"JSeligstein","description":"Just a little pendulum practice.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["pendulum"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// just a beginner playing with pendulum patterns.  no gravity.\n\nconst float NUM_OBJS = 10.0;\nconst float SPEED = 3.0;\nconst float SIZE_SPEED = 1.0;\nconst float MAX_DIST = 1.0/8.0; // radians\n\nconst float PI = 3.14159265358979323846264338327950288;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2(0.5, 1.0);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec2 pendCenter = vec2(0.0, 0.0);\n    \n    vec3 col = vec3(0);\n    \n    for (float i = 0.0; i < NUM_OBJS; i += 1.0) {\n        \n        float stringRadius = 0.3 * ((i+1.0)*0.3);\n        \n        float angle = (sin(iTime * SPEED * (i*0.1+1.0)) * MAX_DIST + 3.0/2.0) * PI;\n        \n        vec2 pos = vec2(cos(angle), sin(angle));\n        pos *= stringRadius;\n        pos += pendCenter;\n        \n        float outerRadius = 0.5 * sin((iTime + i) * SIZE_SPEED) * 0.01 + 0.02;\n        float innerRadius = outerRadius * 0.5;\n        float dist = length(uv-pos);\n        if (dist <= outerRadius && dist >= innerRadius) {\n           col = 0.5 + 0.5*cos(iTime+sin(i)+uv.xyx+vec3(0,2,4));\n        }\n    }\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}