{"ver":"0.1","info":{"id":"lltfDj","date":"1541137935","viewed":283,"name":"triangle blur","username":"raphael_h","description":"triangle blur from three.js","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define ITER 3.0\n#define delta vec2(0.01, 0.01)\n\nfloat rand( const in vec2 uv ) {\n\tconst float a = 12.9898, b = 78.233, c = 43758.5453;\n\tfloat dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n\nvec4 triangleBlur(const in vec2 uv) {\n    \n      vec4 sum = vec4(0.0);\n      float total = 0.0;\n      float offset = rand(uv);\n      for ( float t = -ITER; t <= ITER; t++) {\n\n          float percent = (t + offset - 0.5) / ITER;\n          float weight = 1.0 - abs(percent);\n          sum += texture(iChannel0, uv + delta * percent) * weight;\n          total += weight;\n          \n      }\n    \n      return sum / total;\n    \n  }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = triangleBlur(uv);\n\n}","name":"Image","description":"","type":"image"}]}