{"ver":"0.1","info":{"id":"7s2Szw","date":"1619946042","viewed":572,"name":"ReactionDiffusion - MIPmap Lapl","username":"FabriceNeyret2","description":"mouse paint.  Use plugin to accelerate x16.\n\nsimplifes aiekick RD [url]https://shadertoy.com/view/MlByzR[/url] using MIPmap LOD to compute Laplacian  ( + other things, but far from golfed ;-) )\nTry changing Laplacian width in Common ( default = 1. = LOD )","likes":20,"published":3,"flags":32,"usePreview":0,"tags":["diffusion","3","reaction","gpmipmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// simplified version of \"ReactionDiffusion 3\" by aiekick. https://shadertoy.com/view/MlByzR\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n   \n    float c = T().g, c2;\n    U--; c2 = T().g;               // c2 = offseted state for lighting\n \n    O =   c*c*1.5\n        + vec4(.2, .4, 1, 0) * max(c2*c2*c2 - c*c*c, 0.)*R.y*.2;  // Shane lighting model\n    O = sqrt(O);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2  diffusionCoef = vec2(1,.3);\nfloat feedCoef = .05,\n      killCoef = .062;\n      \nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = T();                                     // previous state\n    float l;\n   \tif (iFrame < 1)\n        l =  length(U+U-R)/R.y,                  // init\n        O.rg = vec2( l, 1.-l );\n\n    else if (iMouse.z > 0.)\t{                    // mouse paint\n        l = length(U-iMouse.xy)/R.y;\n        if ( l < .05 ) O.rg = vec2( l, 1.-l ); \n\t}\n    else {                                       // simulates reaction - diffusion\n        float feed =   feedCoef * (1. - O.x),\n              kill = ( feedCoef + killCoef ) * O.y,\n              reaction = O.x * O.y * O.y;\n        vec2 diffusion = diffusionCoef  *  lapl.rg;\n\n        O.rg += diffusion + vec2( feed - reaction, reaction - kill );\n     // O = clamp(O,0.,10.);\n    }\n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R       iResolution.xy\n#define T(l)    texture( iChannel0, U/R, l+0. )\n#define lapl    9./8.* ( T(1.) - T(0.) )         // approx Laplacian using MIPmap LOD difference\n                                                 // 9/8 because T(1) includes a bit of T(0) ;-)\n\n\n","name":"Common","description":"","type":"common"}]}