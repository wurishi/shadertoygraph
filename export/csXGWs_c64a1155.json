{"ver":"0.1","info":{"id":"csXGWs","date":"1666955008","viewed":211,"name":"Simple game of life (by trix)","username":"Trixelized","description":"Conway's game of life :)","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    // get the uv position\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // sample buffer A\n    vec4 samp = texture(iChannel0, uv);\n    \n    // return buffer A's red and green channel as greyscale\n    fragColor = vec4(vec3(samp.r + (samp.g * 0.75)), 1.0);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    \n    // get the uv position and pixel offset\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 off = vec2(1.0 / iResolution.x, 1.0 / iResolution.y);\n    \n    /*\n        \n        these are the neighbors we will check for\n        1,1 is the current pixel we're on\n        \n         0,0 | 1,0 | 2,0\n        -----------------\n         0,1 | 1,1 | 2,1\n        -----------------\n         0,2 | 1,2 | 2,2\n        \n    */\n    \n    // get current pixel's value\n    vec4 src_11 = texture(iChannel0, uv);\n    \n    // get all neighbor values\n    vec4 src_00 = texture(iChannel0, uv + vec2(-1.0, -1.0) * off);\n    vec4 src_10 = texture(iChannel0, uv + vec2(0.0, -1.0) * off);\n    vec4 src_20 = texture(iChannel0, uv + vec2(1.0, -1.0) * off);\n    vec4 src_21 = texture(iChannel0, uv + vec2(1.0, 0.0) * off);\n    vec4 src_22 = texture(iChannel0, uv + vec2(1.0, 1.0) * off);\n    vec4 src_12 = texture(iChannel0, uv + vec2(0.0, 1.0) * off);\n    vec4 src_02 = texture(iChannel0, uv + vec2(-1.0, 1.0) * off);\n    vec4 src_01 = texture(iChannel0, uv + vec2(-1.0, 0.0) * off);\n    \n    \n    // add all neighbors together\n    vec4 neighbors = (src_00 + src_10 + src_20 + src_21 + src_22 + src_12 + src_02 + src_01);\n    \n    \n    float result = 0.0;\n    \n    // check if the current pixel is inactive or active\n    if (src_11.r == 0.0) {\n    \n        // if inactive, turn on if there's 3 active neighbors\n        result = step(3.0, neighbors.r) * step(neighbors.r, 3.0);\n        \n    } else {\n    \n        // if active, only stay on if there's 2-3 active neighbors\n        result = step(2.0, neighbors.r) * step(neighbors.r, 3.0);\n        \n    }\n    \n    // populate with the mouse\n    if (iMouse.z > 0.0) {\n        float r = length(iMouse.xy - fragCoord);\n        result = max(result, step(r, 5.0));\n    }\n    \n    // return result in red channel\n    // return combined neighbors in green channel for a fancy bloom-like effect\n    fragColor = vec4(result, max(neighbors.g/8.0 * 0.995, neighbors.r/8.0), 0.0, 1.0);\n    \n    \n}","name":"Buffer A","description":"","type":"buffer"}]}