{"ver":"0.1","info":{"id":"msfyRM","date":"1686658470","viewed":347,"name":"Atmosphere for Uranus","username":"AndreiDespinoiu","description":"Atmosphere for Uranus, I guess. ðŸ˜… This was fun to make. Enjoy.\nPlay around with the values, see what kind of results you get, and maybe uncomment some of the final lines to see the individual components.","likes":14,"published":1,"flags":0,"usePreview":1,"tags":["planet","atmosphere","uranus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float planetSize                =   0.4;\nconst float planetShadeIntensity      =  16.0;\nconst float planetHighlightIntensity  =  32.0;\n\nconst vec3  atmColor                  =  vec3(0.3, 0.6, 1.0);\nconst vec2  atmOffset                 =  vec2(0.008, 0.006);\nconst float atmSize                   =   0.3;\nconst float atmTightness              =  15.0;\nconst float atmIntensity              =   1.8;\nconst float atmAmbientValue           =   0.15;\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy; // Normalized pixel coordinates (from 0 to 1)\n    uv -= 0.5; // Center it\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect; // Make it round\n    \n    // Fake \"planet\"\n    float dist  = length(uv);\n    float shape = smoothstep(planetSize + 0.01, planetSize, dist); // White round shape on a black backround\n    vec3  pixel = texture(iChannel0, uv).rgb; // Grab the \"Rusty Metal\" texture from page 3 of the textures window\n    pixel.r *= 0.3;   // Less red\n    pixel.g *= 0.5;   // Less green (leaving the blue \"as is\")\n    pixel   *= 1.8;   // Brighten it up over-all\n    pixel   *= shape; // Use the round shape as a cut-out\n    \n    // Some shade for the planet\n    float dist2 = length(uv - atmOffset * planetShadeIntensity);\n    float shade = smoothstep(planetSize + 0.15, planetSize - 0.15, dist2) + atmAmbientValue;\n    pixel *= shade;\n    \n    // A bit of highlight for the planet\n    float dist3 = length(uv - atmOffset * -planetHighlightIntensity);\n    float highlight = smoothstep(planetSize, planetSize + 0.35, dist3) * shape;\n    \n    // Atmosphere\n    float dist4 = length(uv - atmOffset);\n    float atmosphereShape = smoothstep(planetSize + atmSize, planetSize, dist4);\n    atmosphereShape = pow(atmosphereShape, atmTightness) * atmIntensity;\n    vec3 atmosphere = atmColor * atmosphereShape;\n    \n    vec3 combinedColor = mix(pixel, atmosphere, (1.0 - shape) * shade + highlight);\n    \n    // Output to screen\n    //fragColor = vec4(pixel.rgb, 1.0);\n    //fragColor = vec4(atmosphere, 1.0);\n    fragColor = vec4(combinedColor, 1.0);\n    //fragColor = vec4(vec3(shade * shape), 1.0); // Shade\n    //fragColor = vec4(vec3(highlight), 1.0);\n}","name":"Image","description":"","type":"image"}]}