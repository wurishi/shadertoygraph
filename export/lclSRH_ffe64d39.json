{"ver":"0.1","info":{"id":"lclSRH","date":"1705027516","viewed":138,"name":"It's raining in London. Again...","username":"DwayneBrah","description":"Rainy days. For making rainy days.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["water","rain","london"],"hasliked":0,"parentid":"Mf23Dd","parentname":"Bloopers 123"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noise( vec2 p ) {\n\tvec2 f = fract(p);\n\tp = floor(p);\n\tfloat v = p.x+p.y*1000.0;\n\tvec4 r = vec4(v, v+1.0, v+1000.0, v+1001.0);\n\tr = fract(10000.0*sin(r*.001));\n\tf = f*f*(3.0-2.0*f);\n\treturn 2.0*(mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y))-1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv_viewer_displace;\n    uv_viewer_displace.x = noise(vec2(iTime * 0.45))*0.037;\n    uv_viewer_displace.y = noise(vec2(iTime * 1.55))*0.003;\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 uv_mouse = iMouse.xy / iResolution.xy;\n\n    \n    vec2 uv_drops = uv*1.0;\n    uv_drops.y += iTime*0.037;\n    \n    uv_drops + uv_viewer_displace;\n    uv_drops += uv_viewer_displace;\n    vec4 col_a = texture(iChannel0, uv_drops);\n    vec4 col_a_2 = texture(iChannel0, uv_drops-0.002);\n    vec4 col_c = texture(iChannel2, uv);\n    vec4 col_d = texture(iChannel3, uv + uv_viewer_displace*0.22);\n    \n    \n    \n    vec4 col_b = texture(iChannel1, uv + uv_viewer_displace*0.22);\n    vec4 col_out;\n\n    \n    // 'SPECULAR'/FAKE REFRACTION HIS+LOS //\n    \n    float dark_bit = clamp(col_a_2.r-col_a.r, 0.0, 1.0)*0.14;\n    float light_bit = clamp(col_a.r-col_a_2.r, 0.0, 1.0)*0.15;\n    \n    \n    // THREASHOLD FOR SHARP EDGE //\n    float drop_edge = 0.05;\n\n    \n    if (drop_edge < col_a.r) {\n        \n        \n        \n            col_out  += col_d;\n        \n            col_out  += light_bit*5.0;\n            col_out  -= (dark_bit)*4.5;\n            \n    } else {\n        \n         col_out  += col_b*0.97;\n        \n    };    \n  \n    \n\n\n\n    if (uv_mouse.x < uv.x) {\n        \n        //col_out  = col_a;\n\n    };\n    \n    // REFLECTION //\n    float r;\n    if (uv.y+uv_viewer_displace.y*0.3 > (0.14-uv.x*0.11)) {\n    \n        if (uv.x+uv_viewer_displace.x*0.3 < 0.26) {\n             r += 1.0;\n        };\n        if (uv.x+uv_viewer_displace.x*0.3 > 0.30 && uv.x+uv_viewer_displace.x*0.3 < 0.70) {\n             r += 1.0;\n        };\n        if (uv.x+uv_viewer_displace.x*0.3 > 0.76) {\n             r += 1.0;\n        };\n\n    };\n    \n    float d_from_center = distance(uv, vec2(0.5,0.5));\n    r *= clamp(1.0-d_from_center*d_from_center*d_from_center*5.8, 0.0, 1.7)*0.08;\n    \n    \n    //col_out = mix(col_out, vec4(1.0), r);\n    col_out += r;\n\n\n    //  VINNIETTE //\n    col_out *= 1.0-(d_from_center*d_from_center*1.1);\n    \n    \n    \n    // GAMMA //\n    float GAMMA = 1.22;\n    col_out.r = pow(col_out.r, GAMMA);\n    col_out.g = pow(col_out.g, GAMMA);\n    col_out.b = pow(col_out.b, GAMMA);\n   \n    fragColor = col_out;\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n\n\n// COLOURS //\nvec4 col_white = vec4(1.0, 1.0, 1.0, 1.0);\nvec4 col_black = vec4(0.0, 0.0, 0.0, 0.0);\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//////////////////////////////////////////////////////////////////////\nuint seed = 0u;\nvoid hash(){\n    seed ^= 2747636419u;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n}\nvoid initRandomGenerator(vec2 fragCoord){\n    seed = uint(fragCoord.y*iResolution.x + fragCoord.x)+uint(iFrame)*uint(iResolution.x)*uint(iResolution.y);\n}\n\nfloat random(){\n    hash();\n    return float(seed)/4294967295.0;\n}\n/////////////////////////////////////////////////////////////////////\n\nfloat noise( vec2 p ) {\n\tvec2 f = fract(p);\n\tp = floor(p);\n\tfloat v = p.x+p.y*1000.0;\n\tvec4 r = vec4(v, v+1.0, v+1000.0, v+1001.0);\n\tr = fract(10000.0*sin(r*.001));\n\tf = f*f*(3.0-2.0*f);\n\treturn 2.0*(mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y))-1.0;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col_a = texture(iChannel0, uv);\n    \n    vec2 uv_zoomed = (uv-0.5)*1.00+0.5;\n    \n    uv_zoomed.y += (0.004) * (noise(vec2(iTime+uv.y*2.0))*0.4 + 0.9);\n    uv_zoomed.x -= 0.0008 * (1.0 + noise(vec2(iTime*0.5+uv.x*2.0))*0.7 );\n    vec4 col_a_2 = texture(iChannel0, uv_zoomed);\n    \n    uv_zoomed = (uv-0.5)*0.99+0.5;\n    vec4 col_a_3 = texture(iChannel0, uv_zoomed);\n\n    vec4 col_out = col_a * 0.501 + col_a_2 * 0.501;\n    \n    // FRAMES //\n    initRandomGenerator(vec2(iFrame) );\n    float rand = mod(random(), 1.0);\n    if (rand > 0.82) {\n        \n        vec2 uv_drop;\n        for (int x = 0; x < 8; x++) {\n            \n            uv_drop = vec2(mod(random(),1.0)*2.0, mod(random(), 1.0));\n\n            //uv.x *= iResolution.x/iResolution.y;\n            uv.x *= 1.88;\n\n            float d = distance(uv_drop, uv);\n            if (distance(uv_drop, uv) < 0.012 * pow(mod(rand*33.3,1.0), 1.0)+0.01) {\n\n                col_out.r *= 1.0+d;\n\n                col_out += col_white* clamp((1.0/d)*2.0+0.1, 0.0, 1.0);\n\n                //col_out.r = mod(random(), 1.0);\n                //col_out.g = mod(random(), 1.0);\n                //col_out.b = mod(random(), 1.0);\n\n\n            };\n\n            \n            \n        };\n        \n    };\n    if (col_out.r > 1.5) {\n        col_out.r = 1.0;\n    };\n    \n    \n    fragColor = col_out*0.99;\n    if (col_out.r > 0.88) {\n        fragColor += col_out*0.02;\n\n    } else {\n    \n        if (col_out.r  < 0.88) {\n            fragColor = col_out*0.960;\n        } else {\n            fragColor = col_out*0.98;\n        };\n        \n        if (col_out.r  > 0.90) {\n            col_out = col_out*1.01;\n        };\n        \n    };\n    \n    // if wanting it to stick about....\n    if (col_out.r  < 0.16) {\n        \n        fragColor = col_a*0.997 + col_a_3*0.001;\n        \n    };\n    \n    \n    \n    \n}\n\n\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv_drops = uv;\n    uv_drops.y -= 0.5;\n    uv_drops.x += (1.0 + uv.x*0.3);\n    uv_drops.y += 0.5;\n    vec4 col_a = texture(iChannel0, uv_drops);\n    \n    \n    vec4 col_b = texture(iChannel1, uv);\n    vec4 col_out;\n    \n    // THREASHOLD FOR SHARP EDGE //\n    float drop_edge = 0.05;\n    \n    //col_out  += col_a*0.2;\n    //col_out  += col_b;\n    \n    float drop_sample = clamp(col_a.r*0.7, 0.0, 1.0);\n    if (drop_sample < drop_edge) {\n        drop_sample = 0.0;\n        col_out *= 0.78;\n        \n        col_out += texture(iChannel2, uv);;\n\n        \n    } else {\n    \n        drop_sample = clamp(drop_sample, 0.0, 0.50);\n        vec2 uv_warp = vec2(uv.x+(1.0-0.0027*drop_sample), uv.y-(0.16*drop_sample));\n        vec4 image = texture(iChannel3, uv);\n        col_out += image;\n\n    };\n    \n    // Rain outside //\n    vec2 uv_outside = uv;\n    uv_outside.y *= 0.3;\n    uv_outside.y += (iTime*3.33);\n    uv_outside.x *= 5.2;\n    uv_outside.x += (1.0+ uv.y*0.78);\n    vec4 col_a_stretched = texture(iChannel0, uv_outside);\n    uv_outside.y *= -0.6;\n    col_a_stretched += texture(iChannel0, uv_outside);\n    col_a_stretched += texture(iChannel0, uv_outside*0.8);\n    col_a_stretched += texture(iChannel0, uv_outside*-1.4)*-0.8;\n    \n    col_out += clamp(col_a_stretched.r, -1.0, 1.0)*0.22;\n    \n    col_out -= uv.y*uv.y*0.38;\n    col_out += uv.y*0.28;\n\n    \n     fragColor = col_out;\n\n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float Pi = 6.28318530718; // Pi*2\n    \n    // GAUSSIAN BLUR SETTINGS {{{\n    float Directions = 16.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)\n    float Quality = 3.0; // BLUR QUALITY (Default 4.0 - More is better but slower)\n    float Size = 12.0; // BLUR SIZE (Radius)\n    // GAUSSIAN BLUR SETTINGS }}}\n   \n    vec2 Radius = Size/iResolution.xy;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Pixel colour\n    vec4 Color = texture(iChannel0, uv);\n    \n    // Blur calculations\n    for( float d=0.0; d<Pi; d+=Pi/Directions)\n    {\n\t\tfor(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)\n        {\n\t\t\tColor += texture( iChannel0, uv+vec2(cos(d),sin(d))*Radius*i);\t\t\n        }\n    }\n    \n    // Output to screen\n    Color /= Quality * Directions - 15.0;\n    fragColor =  Color;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//////////////////////////////////////////////////////////////////////\nuint seed = 0u;\nvoid hash(){\n    seed ^= 2747636419u;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n}\nvoid initRandomGenerator(vec2 fragCoord){\n    seed = uint(fragCoord.y*iResolution.x + fragCoord.x)+uint(iFrame)*uint(iResolution.x)*uint(iResolution.y);\n}\n\nfloat random(){\n    hash();\n    return float(seed)/4294967295.0;\n}\n/////////////////////////////////////////////////////////////////////\n\nfloat noise( vec2 p ) {\n\tvec2 f = fract(p);\n\tp = floor(p);\n\tfloat v = p.x+p.y*1000.0;\n\tvec4 r = vec4(v, v+1.0, v+1000.0, v+1001.0);\n\tr = fract(10000.0*sin(r*.001));\n\tf = f*f*(3.0-2.0*f);\n\treturn 2.0*(mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y))-1.0;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col_a = texture(iChannel0, uv);\n    \n    vec2 uv_zoomed = (uv-0.5)*1.00+0.5;\n    \n    uv_zoomed.y += (0.004) * (noise(vec2(iTime+uv.y*2.0))*0.4 + 0.9);\n    uv_zoomed.x -= 0.0008 * (1.0 + noise(vec2(iTime*0.5+uv.x*2.0))*0.7 );\n    vec4 col_a_2 = texture(iChannel0, uv_zoomed);\n    \n    uv_zoomed = (uv-0.5)*0.99+0.5;\n    vec4 col_a_3 = texture(iChannel0, uv_zoomed);\n\n    vec4 col_out = col_a * 0.501 + col_a_2 * 0.501;\n    \n    // FRAMES //\n    initRandomGenerator(vec2(iFrame) );\n    float rand = mod(random(), 1.0);\n    if (rand > 0.82) {\n        \n        vec2 uv_drop;\n        for (int x = 0; x < 8; x++) {\n            \n            uv_drop = vec2(mod(random(),1.0)*2.0, mod(random(), 1.0));\n\n            //uv.x *= iResolution.x/iResolution.y;\n            uv.x *= 1.88;\n\n            float d = distance(uv_drop, uv);\n            if (distance(uv_drop, uv) < 0.012 * pow(mod(rand*33.3,1.0), 1.0)+0.01) {\n\n                col_out.r *= 1.0+d;\n\n                col_out += col_white* clamp((1.0/d)*2.0+0.1, 0.0, 1.0);\n\n                //col_out.r = mod(random(), 1.0);\n                //col_out.g = mod(random(), 1.0);\n                //col_out.b = mod(random(), 1.0);\n\n\n            };\n\n            \n            \n        };\n        \n    };\n    if (col_out.r > 1.5) {\n        col_out.r = 1.0;\n    };\n    \n    \n    fragColor = col_out*0.99;\n    if (col_out.r > 0.88) {\n        fragColor += col_out*0.02;\n\n    } else {\n    \n        if (col_out.r  < 0.88) {\n            fragColor = col_out*0.960;\n        } else {\n            fragColor = col_out*0.98;\n        };\n        \n        if (col_out.r  > 0.90) {\n            col_out = col_out*1.01;\n        };\n        \n    };\n    \n    // if wanting it to stick about....\n    if (col_out.r  < 0.16) {\n        \n        fragColor = col_a*0.997 + col_a_3*0.001;\n        \n    };\n    \n    \n    \n    \n}\n\n\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv_drops = uv;\n    uv_drops.y -= 0.5;\n    uv_drops.x += (1.0 + uv.x*0.3);\n    uv_drops.y += 0.5;\n    vec4 col_a = texture(iChannel0, uv_drops);\n    \n    \n    vec4 col_b = texture(iChannel1, uv);\n    vec4 col_out;\n    \n    // THREASHOLD FOR SHARP EDGE //\n    float drop_edge = 0.05;\n    \n    //col_out  += col_a*0.2;\n    //col_out  += col_b;\n    \n    float drop_sample = clamp(col_a.r*0.7, 0.0, 1.0);\n    if (drop_sample < drop_edge) {\n        drop_sample = 0.0;\n        col_out *= 0.78;\n        \n        col_out += texture(iChannel2, uv);;\n\n        \n    } else {\n    \n        drop_sample = clamp(drop_sample, 0.0, 0.50);\n        vec2 uv_warp = vec2(uv.x+(1.0-0.0027*drop_sample), uv.y-(0.16*drop_sample));\n        vec4 image = texture(iChannel3, uv);\n        col_out += image;\n\n    };\n    \n    // Rain outside //\n    vec2 uv_outside = uv;\n    uv_outside.y *= 0.3;\n    uv_outside.y += (iTime*3.33);\n    uv_outside.x *= 5.2;\n    uv_outside.x += (1.0+ uv.y*0.78);\n    vec4 col_a_stretched = texture(iChannel0, uv_outside);\n    uv_outside.y *= -0.6;\n    col_a_stretched += texture(iChannel0, uv_outside);\n    col_a_stretched += texture(iChannel0, uv_outside*0.8);\n    col_a_stretched += texture(iChannel0, uv_outside*-1.4)*-0.8;\n    \n    col_out += clamp(col_a_stretched.r, -1.0, 1.0)*0.22;\n    \n    col_out -= uv.y*uv.y*0.38;\n    col_out += uv.y*0.28;\n\n    \n     fragColor = col_out;\n\n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float Pi = 6.28318530718; // Pi*2\n    \n    // GAUSSIAN BLUR SETTINGS {{{\n    float Directions = 16.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)\n    float Quality = 3.0; // BLUR QUALITY (Default 4.0 - More is better but slower)\n    float Size = 12.0; // BLUR SIZE (Radius)\n    // GAUSSIAN BLUR SETTINGS }}}\n   \n    vec2 Radius = Size/iResolution.xy;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Pixel colour\n    vec4 Color = texture(iChannel0, uv);\n    \n    // Blur calculations\n    for( float d=0.0; d<Pi; d+=Pi/Directions)\n    {\n\t\tfor(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)\n        {\n\t\t\tColor += texture( iChannel0, uv+vec2(cos(d),sin(d))*Radius*i);\t\t\n        }\n    }\n    \n    // Output to screen\n    Color /= Quality * Directions - 15.0;\n    fragColor =  Color;\n}","name":"Buffer C","description":"","type":"buffer"}]}