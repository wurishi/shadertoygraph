{"ver":"0.1","info":{"id":"4fBGWW","date":"1705658505","viewed":51,"name":"Fork Polygon -  dalvisual 601","username":"dalvisual","description":"Distance to an arbitrary polygon, based on [url]https://www.shadertoy.com/view/WdSGRd[/url]","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","distance","polygon"],"hasliked":0,"parentid":"wdBXRW","parentname":"Polygon - distance 2D"},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to a regular pentagon, without trigonometric functions. \n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat cross2d( in vec2 v0, in vec2 v1) { return v0.x*v1.y - v0.y*v1.x; }\n\nconst int N = 7;\n\nfloat sdPolygon( in vec2 p, in vec2[N] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n\tvec2 v0 = vec2(-1.6+(-sin(iTime / 2.5) * 0.5 + 0.5)*0.5,0.4+(sin(iTime / 2.5) * 0.5 + 0.5)*0.2);\n\tvec2 v1 = vec2(-0.+(sin(iTime / 2.5) * 0.5 + 0.5)*0.2,-1.3+(-sin(iTime / 2.5) * 0.5 + 0.5)*0.1);\n\tvec2 v2 = vec2(-0.9+(-sin(iTime / 1.5) * 0.5 + 0.5)*0.1,1.7+(cos(iTime / 2.5) * 0.5 + 0.5)*0.2);\n\tvec2 v3 = vec2(1.5+(cos(iTime / 2.5) * 0.5 + 0.5)*0.2,-3.9+(sin(iTime / 2.5) * 0.5 + 0.5)*0.4);\n    vec2 v4 = vec2(0.3+(sin(iTime / 2.5) * 0.5 + 0.5)*0.3,.5+(-sin(iTime / 2.5) * 0.5 + 0.5)*0.3);\n    vec2 v5 = vec2(1.9+(-sin(iTime / 3.1) * 0.5 + 0.5)*0.4,-1.9+(cos(iTime / 2.5) * 0.5 + 0.5)*0.1);\n    vec2 v6 = vec2(1.3+(cos(iTime / 1.7) * 0.5 + 0.5)*0.5,1.+(-sin(iTime / 2.5) * 0.5 + 0.5)*0.2);\n\n    \n    // add more points\n    vec2[] polygon = vec2[](v0,v1,v2,v3,v4,v5,v6);\n    \n\tfloat d = sdPolygon(p, polygon);\n\n   vec3 col = vec3(1., .0, 1.0) * sign(d) + ((p.x*p.y) * vec3(1.0, 0.0, 1.0));\n    //vec3 col =  vec3(sign(d));\n    float lightSpread = mix(0.01, 0.9, sin(iTime / 2.5) * 0.5 + 0.5);\n    float freq = mix(2., 10., sin(iTime / 2.5) * 0.5 + 0.5);\n    col = mix(col, vec3(1.0, 0.2, 1.3), 1.0 - smoothstep(0.0015, 0.4, abs(d)));\n    col = mix(col, vec3(1.0, .0, 1.5), 1.0 - smoothstep(lightSpread, 0.001, abs(d)));\n    col -= 0.0+ 0.2 * sin(freq * d - iTime * .2);\n    \n    //vec3 color = texture(iChannel0, vec2((p.x + p.y) / 2., (p.y) / 3.) - (vec2(col.g) * 0.9)).rbg;\n\n    //col.x-=color.r;\n    //col.y/=color.g;\n    if( iMouse.z>0.1 )\n    {\n    d = sdPolygon( m, polygon );\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.00025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.025));\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}