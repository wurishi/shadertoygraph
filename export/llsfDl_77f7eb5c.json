{"ver":"0.1","info":{"id":"llsfDl","date":"1514056605","viewed":1167,"name":"Spiral 3 (Blue/Pink)","username":"lsdlive","description":"Twisted menger cube.\n\nShort menger formula borrowed from aiekick/coyote.","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat smin(float a, float b) {\n\tfloat k = 7.;\n\tfloat res = exp(-k*a) + exp(-k*b);\n\treturn -log(res) / k;\n}\n\nfloat sdHexPrism(vec3 p, vec2 h) {\n\tvec3 q = abs(p);\n\treturn max(q.z - h.y, max((q.x*0.866025 + q.y*0.5), q.y) - h.x);\n}\n\nfloat sc(vec3 p, float r) {\n\tfloat s1 = sdHexPrism(p, vec2(r, 1e6));\n\tfloat s2 = sdHexPrism(p.yzx, vec2(r, 1e6));\n\tfloat s3 = sdHexPrism(p.zxy, vec2(r, 1e6));\n\treturn min(s1, min(s2, s3));\n}\n\nfloat ssc(vec3 p, float r) {\n\tfloat s1 = sdHexPrism(p, vec2(r, 1e6));\n\tfloat s2 = sdHexPrism(p.yzx, vec2(r, 1e6));\n\tfloat s3 = sdHexPrism(p.zxy, vec2(r, 1e6));\n\treturn smin(s1, smin(s2, s3));\n}\n\nmat2 r2d(float a) {\n\tfloat c = cos(a), s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\nfloat m_particule(vec3 p, float r, float x, float d, vec2 s) {\n\tfloat t = iTime*.3;\n\tp.z = mod(p.z + d, 4.) - 2.;\n\tp.x += s.x*sin(t)*.6;\n\tp.y += s.y*cos(t*2.)*.5;\n\tp.z += sin(t*2.);//*2.6;\n\n\t\t\t\t\t //p.xz *= r2d(iTime);\n\t\t\t\t\t //p.xy *= r2d(iTime);\n\t\t\t\t\t //return length(max(abs(p) - vec3(r*.5), 0.));// - r;\n\t\t\t\t\t //return sdHexPrism(p, vec2(r, r*.5));\n\treturn length(p) - r;\n}\n\nvec2 de(vec3 p) {\n\tfloat d = 0., s = 1.;\n\n\tfloat mp1 = m_particule(p, .02, .5, 0., vec2(-1.));\n\tfloat mp2 = m_particule(p, .045, -.7, 3., vec2(-1., 1.));\n\tfloat mp3 = m_particule(p, .03, .1, 2., vec2(1., -1.));\n\tfloat mp4 = m_particule(p, .025, .1, 1., vec2(1., 1.));\n\n\tfloat particules = min(mp1, min(mp2, mp3));\n\tparticules = min(particules, mp4);\n\n\tp.xy *= r2d(iTime*.1 + p.z);\n\n\tvec3 q = p;\n\n\tfor (int i = 0; i < 5; i++) {\n\t\tq = mod(p*s + 1., 2.) - 1.;\n\t\td = max(d, -ssc(q, .59) / s);\n\t\ts += 6.;\n\t}\n\n\tif (d < particules)\n\t\treturn vec2(d, 1);\n\telse\n\t\treturn vec2(particules, 2);\n}\n\n/*\nvec3 normal(in vec3 pos)\n{\n\tvec2 e = vec2(1., -1.)*.5773*.0005;\n\treturn normalize(e.xyy*de(pos + e.xyy).x +\n\t\te.yyx*de(pos + e.yyx).x +\n\t\te.yxy*de(pos + e.yxy).x +\n\t\te.xxx*de(pos + e.xxx).x);\n}\n*/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - .5;\n\tuv.x *= iResolution.x / iResolution.y;\n\n\tvec3 ro = vec3(.15*cos(iTime), .1*sin(iTime), -iTime*.4), p;\n\tvec3 rd = normalize(vec3(uv, -1));\n\tp = ro;\n\n\tfloat it = 0.;\n\tvec2 res;\n\tfor (float i = 0.; i < 1.; i += .02) {\n\t\tit = i;\n\t\tres = de(p);\n\t\tif (res.x < .001) break;\n\t\tp += rd*res.x*.75;\n\t}\n\n\tvec3 c;\n\n\tif (res.y == 2.) {\n\t\tc = mix(vec3(1., .1, .5), vec3(.2, .1, .2), it);\n\t\t//c += vec3(.5, .2, .4) * max(0., dot(-rd, normal(p)));\n\t}\n\telse {\n\t\tc = mix(vec3(.2, .7, .7), vec3(.2, .1, .2), it);\n\t}\n\n\tfloat dist = length(ro - p);\n\tc = mix(c, vec3(.2, .1, .2), 1. - exp(-.1 * dist*dist));\n\n\tfragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"}]}