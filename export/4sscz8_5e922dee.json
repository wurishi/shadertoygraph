{"ver":"0.1","info":{"id":"4sscz8","date":"1487120499","viewed":147,"name":"Voronoi Layers","username":"ptrgags","description":"Two layer Voronoi diagram","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","voronoi","layers","twolayeer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TILES 4.0\n#define INNER_TILES 10.0\n\nvec2 hash2(vec2 p) {\n    return fract(sin(vec2(\n        dot(p, vec2(127.0, 311.0)),\n        dot(p, vec2(269.0, 181.0) * 43759.0))));\n}\n\n//Create a voronoi distance field. Distances are to the nearest\n//seed point\nfloat voronoi(vec2 uv, float num_tiles) {\n    //Tile space\n    vec2 cell = floor(num_tiles * uv);\n    vec2 cell_uv = fract(num_tiles * uv);\n    \n    //Voronoi Level 1\n    float min_dist = 10000.0;\n    //Look at neighboring boxes only\n    for (int x = -1; x <= 1; x++) {\n        for (int y = -1; y <= 1; y++) {\n            //Find the random point in the neighbor box\n            vec2 offset = vec2(float(x), float(y));\n            vec2 neighbor_point = hash2(cell + offset);\n            neighbor_point = 0.5 + 0.5 * sin(45.0 * neighbor_point + iTime);\n            \n            //distance between pixel and neighbor center)\n            float dist = distance(offset + neighbor_point, cell_uv);\n            min_dist = min(dist, min_dist);\n        }\n    }\n    return min_dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    fragColor += voronoi(uv, 10.0) * vec4(0.0, 0.5, 1.0, 1.0);\n    fragColor += voronoi(uv, 3.0) * vec4(1.0, 0.5, 0.0, 0.5);\n    \n}","name":"Image","description":"","type":"image"}]}