{"ver":"0.1","info":{"id":"MfGGzD","date":"1712476730","viewed":184,"name":"Cosmic wheel","username":"ChunderFPV","description":"Just having fun with point grids & coordinate transforms again.  Comment out the group of lines under // transforms to see the point grid.","likes":14,"published":1,"flags":32,"usePreview":0,"tags":["spiral","points","buffer","transform","log"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// blend\n\n#define H(a) (cos(radians(vec4(0, 60, 120, 0))+(a)*6.2832)*.5+.5)\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    C = texture(iChannel1, U/R) * .03;\n    C += C*C + H( length((U-.5*R)/R.y) + C - iTime/10.)*C + texture(iChannel0, U/R)/4.;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define T .25-iTime/60.\n\nfloat P(vec2 u) // points\n{\n    vec2 w = fwidth(u); // pixel size\n    float t = T, // time\n          o = t+round(u.x-t), // offset\n          s = iResolution.y/1e3, // size\n          d = max(1., abs(u.x)); // darken limits\n    u.x -= o;\n    u.y -= pow(abs(o), 2.)/2.; // graph movement\n    u.y -= round(u.y); // tile y\n    return ( min(1., .01/length(u))\n           + min(1., s/length(u/w)) ) / d;\n}\n\n// fraction lines (denominator = t, numerator = 1/t)\nfloat F(float x, float t)\n{\n    float p = 2., // precision\n          l = min(1., 1.5*fwidth(x)/abs(fract(x+.5)-.5)), // lines\n          f = max(1.-abs(sin(3.1416*round(x)*t))*p, 0.), // frac\n          s = 1.-abs(sin(x*3.1416)), // smooth edges\n          d = max(1., sqrt(abs(x))); // darken limits\n    return l*f*s/d;\n}\n\n// denominator spiral\nfloat ds(vec2 u, float t, float n, float a, float s, float l)\n{\n    float r = exp(log(length(u))/n),\n          i = 0., c = i, h;\n    vec2 w = fwidth(u);\n    for (; i++<l;)\n        h = max(0., round((r-i)/l))*l+i,\n        c = max(c, s/length((u-cos(6.2832*t*h+a-vec2(0, 1.5708))*pow(h, n))/w));\n    return min(c, 1.);\n}\n\nvoid mainImage(out vec4 C, in vec2 U)\n{\n    float t = T,\n          pi = 3.1416,\n          pi_2 = 1.5708,\n          pi2 = 6.2832,\n          s, r, n, d;\n    \n    vec2 h = vec2(2., -3.), // spiral arms\n         //R = iResolution.xy,\n         m = (iMouse.xy-.5*R)/R.y*2.;\n    \n    vec3 u = normalize(vec3((U-R/2.)/R.y, 1)),\n         c = vec3(.02);\n    \n    if (iMouse.z < 1.) m = sin(t*pi-vec2(0, pi_2)); // circle movement\n    s = (1.-m.y)*2. + 4.; // scale\n    u *= s; // scale with mouse y\n    \n    r = length(u.xy); // radius\n    r = pow(min(r, 1./r), 4.); // ring\n    \n    n = .2;  // root\n    d = 50.; // density\n    c += 1.5*ds(u.yx*pow(d, n), t/2., n, -t*d*pi, .5, 5.) * r; // point spiral\n    \n    // transforms\n    u.xy /= sqrt(abs(1.-dot(u.xy, u.xy))); // spherize\n    u.xy = tan( log( length(u.xy) ) - ( atan(u.y, u.x) + pi*vec2(t, -t) ) *h/2.); // log spirals\n    u.xy -= m*s; // move coords with mouse\n    u /= abs(u.yzx); // quotient\n    \n    c += .5 * ( P(u.xy) + P(u.yx) + P(u.xz) + P(u.zx) + P(u.yz) + P(u.zy) ); // points\n    c.rb *= sin(u.z*pi2 - vec2(0, pi_2))*.2+.8; // a bit of color\n    c += max( F(u.x, t), F(u.y, t) ) * .1; // fraction lines\n    c += r*r*r*r; // brighten ring (and cover up that nasty pixelation)\n    \n    C = vec4(c, 1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// frame blur\n\n#define B(s) texture(iChannel1, mix(U/R, vec2(.5), s)).g*.95 + texture(iChannel0, U/R).g\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    C = vec4(min(B(.005), B(-.005)));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R iResolution.xy","name":"Common","description":"","type":"common"}]}