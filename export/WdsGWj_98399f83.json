{"ver":"0.1","info":{"id":"WdsGWj","date":"1547519550","viewed":187,"name":"AA Grid (Tup)","username":"Tup","description":"Drag mouse to scale/rotate. Number keys change line thickness. QWERTY row changes smoothed edge size.\n\nSometimes you get the Grid Illusion (https://en.wikipedia.org/wiki/Grid_illusion), which appears as shimmering dots at the intersections of the lines.","likes":3,"published":1,"flags":16,"usePreview":0,"tags":["grid","illusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ASCNUMS  48 // ASCII code for 0\n#define ASCALPHA 64 // ASCII code for a\n\nbool keyPressed(int ascii) {\n\treturn (texture(iChannel2,vec2((float(ascii)+0.5)/256.,0.5/3.0)).x > 0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // first part just sets the scale using the keyboard\n\n    float WIDTH; // percent width of grid-line relative to square\n\n         if (keyPressed(ASCNUMS+1))\n\t    WIDTH = 0.001;\n    else if (keyPressed(ASCNUMS+2))\n\t    WIDTH = 0.002;\n    else if (keyPressed(ASCNUMS+3))\n\t    WIDTH = 0.004;\n    else if (keyPressed(ASCNUMS+4))\n\t    WIDTH = 0.008;\n    else if (keyPressed(ASCNUMS+5))\n\t    WIDTH = 0.016;\n    else if (keyPressed(ASCNUMS+6))\n\t    WIDTH = 0.032;\n    else if (keyPressed(ASCNUMS+7))\n\t    WIDTH = 0.064;\n    else if (keyPressed(ASCNUMS+8))\n\t    WIDTH = 0.256;\n    else if (keyPressed(ASCNUMS+9))\n\t    WIDTH = 0.512;\n    else if (keyPressed(ASCNUMS+0))\n\t    WIDTH = 1.000;\n    else \n\t    WIDTH = 0.128;\n\n    float aa;\n        \n         if (keyPressed(ASCALPHA+17)) // Q\n\t    aa = 2.;\n    else if (keyPressed(ASCALPHA+23)) // W\n\t    aa = 3.;\n    else if (keyPressed(ASCALPHA+ 5)) // E\n\t    aa = 4.;\n    else if (keyPressed(ASCALPHA+18)) // R\n\t    aa = 5.;\n    else if (keyPressed(ASCALPHA+20)) // T\n\t    aa = 6.;\n    else if (keyPressed(ASCALPHA+25)) // Y\n\t    aa = 7.;\n    else if (keyPressed(ASCALPHA+21)) // U\n\t    aa = 8.;\n    else if (keyPressed(ASCALPHA+ 9)) // I\n\t    aa = 16.;\n    else if (keyPressed(ASCALPHA+15)) // O\n\t    aa = 32.;\n    else if (keyPressed(ASCALPHA+16)) // P\n\t    aa = 64.;\n    else \n\t    aa = 1.;\n        \n    // second part just sets up some interactivity with the mouse\n    \n\tvec2 center = iResolution.xy/2.;\n    \n    vec2 m = iMouse.xy - center;\n    \n    float len = length(m);\n\n    float scale = iResolution.x / len;\n    \n    mat2 rot = len > 0. ?\n        mat2(m.x, m.y, -m.y, m.x) / len :\n    \tmat2(1., 0., 0., 1.);\n\n\t// press space bar to stop rotation\n    if (!keyPressed(32)) {\n\t    float t = -iTime/60.;\n\t    rot *= mat2(cos(t), sin(t), -sin(t), cos(t));\n    }\n    \n    vec2 xy = (fragCoord.xy - center) * rot ;\n    \n    // third part does all the rendering\n   \n    // normalize coords and slide everything up and over half a square\n    vec2 uv = xy/iResolution.xx + .5/scale;\n\n    // scale coords up and center them around the origin\n    vec2 st = fract( scale * uv ) - .5;\n\n\tfloat edge  = aa/len;\n    float solid = (WIDTH - edge) / 2.;\n\n    st = 1. - clamp( (abs(st) - solid) / edge, 0., 1. );\n\n  \tfragColor = vec4(smoothstep(0., 1., max(st.x, st.y)));\n}\n","name":"Image","description":"","type":"image"}]}