{"ver":"0.1","info":{"id":"MdjyDR","date":"1491689175","viewed":110,"name":"Crazy Mandelbrot","username":"R4stafa","description":"simple but crazy looking mandelbrot implementation","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","crazy","mandebrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 cMult( in vec2 c1, in vec2 c2 )\n{\n    return vec2(c1.x * c2.x - c1.y * c2.y, c1.x * c2.y + c1.y * c2.x);\n}\n\n\n\nvoid mandelbrot( out int n, in vec2 C, in int maxIter)\n{\n    vec2 Z = vec2(0, 0);\n    \n    while( length(Z) < 2.0 && n < maxIter )\n    {\n        Z = cMult(Z, Z) + C;\n        n++;\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    float x = (fragCoord.x - iResolution.x/2.0) / iResolution.y;\n    float y = (fragCoord.y - iResolution.y/2.0) / iResolution.y;\n    \n    vec2 origin = vec2(0.9869, 0.2498);\n    float time = float(int(iTime) % 45) + fract(iTime);\n    float zoom = 4.0 / pow(2.0, time * 0.4);\n    \n    x = x*zoom - origin.x;\n    y = y*zoom - origin.y;\n    \n    int f;\n    float m = 0.01 + time / 45.0 * 4.0;\n    int maxIter = int(100.0 * m);\n    mandelbrot(f, vec2(x, y), maxIter);\n    \n    f = maxIter - f;\n    \n    int modr = 12;\n    int modg = 13;\n    int modb = 9;\n    \n    \n    float r = float((f+0) % modr) / float(modr);\n    float g = float((f+0) % modg) / float(modg);\n    float b = float((f+0) % modb) / float(modb);\n    \n    \n    fragColor = vec4( r, g, b, 1.0 );\n    \n}","name":"Image","description":"","type":"image"}]}