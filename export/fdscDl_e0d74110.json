{"ver":"0.1","info":{"id":"fdscDl","date":"1654887188","viewed":623,"name":"voxel raymarching","username":"lolucky","description":"wasd space z, arrow keys to move. Buffer A handles this. Buffer B renders the screen at a low resolution. The function tex in buffer B returns the color of the block hit. the alpha channel of the color is whether their is a block their.","likes":11,"published":1,"flags":48,"usePreview":0,"tags":["raymarching","voxels","shadows","texture3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    if(all(greaterThan(uv, vec2(1))))\n        return;\n    \n    uv *= RES / iResolution.y;\n\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define RES 256.\n\n#define load(P) texelFetch(iChannel3, ivec2(P), 0)\nconst ivec2 m_idx = ivec2(0,0);\nconst ivec2 pm_idx = ivec2(1,0);\nconst ivec2 pos_idx = ivec2(2,0);\n\nconst float pi = radians(180.);\n\nfloat max3(vec3 rd) {\n   return max(max(rd.x, rd.y), rd.z);\n}\nfloat min3(vec3 rd) {\n    return -max3(-rd);\n}\n\nmat4 rotY(vec3 pos, float m) {\n    m = -m;\n    float s = sin(m);\n    float c = cos(m);\n    \n    mat4 ret = mat4(mat3(c, 0.0, -s, 0.0, 1.0, 0.0, s, 0.0, c));\n    ret[3].xyz = pos;\n    return ret;\n}\n\nmat4 Trans(vec3 pos, vec2 m) {\n    float s = sin(m.y);\n    float c = cos(m.y);\n    return rotY(pos, m.x)\n    * mat4(mat3(1.0, 0.0, 0.0, 0.0, c, s, 0.0, -s, c));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define store(P, V) if (all(equal(ivec2(fragCoord), P))) fragColor = V\n#define key(K)  .1*step(0.5, texelFetch(iChannel0, ivec2(K, 0), 0).x)\n\nconst int KEY_SP    = 32;\nconst int KEY_Z     = 90;\nconst int KEY_W     = 87;\nconst int KEY_A     = 65;\nconst int KEY_Q     = 81;\nconst int KEY_S     = 83;\nconst int KEY_D     = 68;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    if(fragCoord.x >= 3. || fragCoord.y >= 1.)\n        return;\n    \n    fragColor = load(fragCoord);\n    \n    if(iTime == 0. || iFrame == 0) {\n        fragColor = vec4(0.);\n        store(pos_idx, vec4(0, 3, 0, 0));\n        store(m_idx, vec4(0, 0, 0, 1));\n        store(pm_idx, vec4(0, 0, 0, 1));\n        return;\n    }\n    \n    vec3 pos = load(pos_idx).xyz;\n    vec2   m = load(m_idx).xy;\n    vec2  pm = load(pm_idx).xy;\n    \n    store(pos_idx, rotY(pos, m.x) * vec4(2.*vec3(key(KEY_D)-key(KEY_A), key(KEY_SP)-key(KEY_Z), key(KEY_W)+2.*key(KEY_Q)-key(KEY_S)), 1));\n    \n    m.y = clamp(m.y, -pi*.5, pi*.5);\n    store(m_idx, vec4(m + .5*vec2(key(KEY_LEFT)-key(KEY_RIGHT), key(KEY_DOWN)-key(KEY_UP)), 0, 0));\n    \n    if(iMouse.z>0.) {\n        m = pm + 2.*(abs(iMouse.zw) - iMouse.xy) / iResolution.x;\n        m.y = clamp(m.y, -pi*.5, pi*.5);\n        store(m_idx, vec4(m, 0, 0));\n    } else\n        store(pm_idx, vec4(m, 0, 0));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define MAX_ITER 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nstruct ray {\n    vec3 o;\n    vec3 d;\n};\n\nvec4 tex(vec3 _p) {\n    vec3 p=ceil(_p);\n    if(length(p-vec3(-8,8,-8)) < 2.9+3.*abs(mod(iTime/10.,2.)-1.))\n        return vec4(1, 1, .5, 1);\n    if(p.xz == vec2(-16,8))\n        return vec4(1, _p.y/16., 0, 1);\n    float floor_h = 4.*texture(iChannel1, p.xz/64.).r-1.;\n    if(p.y <= floor_h) {\n        if(_p.y < -.5)\n            return vec4(.5, .5, .7, 1);\n        return vec4(.4, 1, .4, 1);\n    }\n    p = (p - 0.5)/32.;\n    if(clamp(p, vec3(0), vec3(1)) != p)\n        return vec4(0.);\n    return texture(iChannel0, p).rbbg;\n}\n\nray RayCast(ray cam, out bool didhit) {\n    ray h = ray(cam.o, vec3(0));\n    \n    for(int c = 0; c < int(60. * pow(3., .5)) && length(h.o - cam.o) < 50.; c++) { \n        if(tex(h.o).a > .98) {\n            didhit = true;\n            return h;\n        }\n        \n        vec3 ds = (1.-fract(h.o * sign(cam.d)) + 1e-5) / abs(cam.d);\n        float m = min3(ds);\n        vec3 ism = vec3(equal(vec3(m), ds));\n        \n        h.o = h.o + cam.d * m;\n        h.d = - ism * sign(cam.d);\n    }\n    didhit = false;\n    return h;\n}\nfloat diffuse_p(ray hit, vec3 light_d) {\n    float diff = max(0., dot(hit.d, light_d));\n    diff = diff*.5+.5;\n    \n    if(diff == 0.)\n        return 0.;\n        \n    bool didhit;\n    RayCast(ray(hit.o + hit.d*1e-4, light_d), didhit);\n    if(didhit)\n        return diff - .2;\n        \n    return diff;\n}\n\nvec3 shade(ray cam) {\n    bool didhit;\n    ray hit = RayCast(cam, didhit);    \n    if(!didhit)\n        return vec3(.4, .4, 1);\n    \n    vec4 col = tex(hit.o);\n\n    return col.rgb * vec3(diffuse_p(hit, normalize(vec3(-.5, 1, -.25))));\n}\n\nvec3 refl(vec3 c, vec3 n) {\n    return c - 2. * dot(c, n) * n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 off = vec2(iResolution.x / iResolution.y, 1);\n    vec2 uv = fragCoord / RES;\n    if(any(greaterThan(uv, off)))\n        return;\n\n    uv = 2. * uv - off;\n    \n    mat4 trans = Trans(load(pos_idx).xyz, load(m_idx).xy);\n    ray cam = ray((trans*vec4(0,0,0,1)).xyz, normalize((trans*vec4(uv, 1,0)).xyz)); // fov maybe?\n    \n    fragColor = vec4(shade(cam), 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}