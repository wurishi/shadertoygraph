{"ver":"0.1","info":{"id":"7tXSzl","date":"1626381062","viewed":87,"name":"ray disk intersection","username":"Envy24","description":"source: https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-plane-and-ray-disk-intersection","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ray","intersection","disk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BACKGROUND (vec4(normalize(1.0 - rayDir), 1.0))\n\n#define R iResolution\n\nvec4 shootRayInDisk(\n    vec3 ray,\n    vec3 rayDir,\n    vec3 O,\n    vec3 normal,\n    float radius)\n{\n\n    float denominator = dot(rayDir, normal);\n    float dist = dot(O-ray, normal) / denominator;\n\n    vec3 R = O - (ray + rayDir * dist);\n    float rr =radius * radius;\n    \n    return \n        //dist >= 0.0 &&         // in front of camera?\n        //denominator >= 0.0 &&  // frontface?\n        dot(R, R) <= rr ?        // inside disc?\n        \n        vec4(\n            1.0 - length(R),\n            1.0,\n            length(R),\n            1.0) :\n        \n        BACKGROUND;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float hw = 0.5;\n    float hh = 0.5;\n    vec3 N = vec3(0.0, 0.0, 1.0);\n    N = rotateAroundY(N, iTime * 0.7);\n    N = rotateAroundZ(N, iTime);\n    N = rotateAroundX(N, iTime * 0.5);\n    \n    \n    /* Perspective camera with lookat (Blender). */\n    vec3 lookAt = vec3(0.0, 0.0, 0.0);\n\n    float zFocalLength = 50.0; // mm.\n    vec3 camera = vec3(0.0, 0.0, 7.0);\n    camera = rotateAroundY(camera, iTime);\n\n    vec3 f = normalize(lookAt - camera);               // forward\n    vec3 r = normalize(cross(f, vec3(0.0, 1.0, 0.0))); // right\n    vec3 u = normalize(cross(r, f));                   // up   \n    \n    float size = 36.0;        // Sensor Fit: Mode = Auto.    \n    float aspectRatio = R.x / R.y;\n    float vpWidth = size;\n    float vpHeight = vpWidth / aspectRatio;\n       \n    uv.x = (uv.x * vpWidth) - vpWidth * 0.5;\n    uv.y = (uv.y * vpHeight) - vpHeight * 0.5;\n               \n    vec3 ray = camera;\n    vec3 rayDir = normalize(uv.x * r + uv.y * u + f * zFocalLength);\n    /* Perspective camera */\n    \n    // Output to screen\n    fragColor = shootRayInDisk(ray, rayDir, vec3(0.0, 0.0, -1.0), N, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 rotateAroundX(vec3 p, float a)\n{\n    float s = sin(-a);\n    float c = cos(-a);\n\n    return vec3(\n        p.x,\n        p.y * c + p.z * s,\n        p.z * c - p.y * s);\n}\n\nvec3 rotateAroundY(vec3 p, float a)\n{\n    float s = sin(-a);\n    float c = cos(-a);\n\n    return vec3(\n        p.x * c + p.z * s,\n        p.y,\n        p.z * c - p.x * s);\n}\n\nvec3 rotateAroundZ(vec3 p, float a)\n{\n    float s = sin(-a);\n    float c = cos(-a);\n\n    return vec3(\n        p.x * c + p.y * s,\n        p.y * c - p.x * s,\n        p.z);\n}","name":"Common","description":"","type":"common"}]}