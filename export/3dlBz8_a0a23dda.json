{"ver":"0.1","info":{"id":"3dlBz8","date":"1587682729","viewed":122,"name":"concentric circles aliasing","username":"bikemule","description":"Interesting effects due to aliasing when you draw many rings of a very small (<.0005ish?) width. Unlike my last submission, there is some illusory motion when you move your head ;)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circles","aliasing","opticalillusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* implemented from math memories as practice */\n\nbool ring(vec2 uv, vec2 c, float r, float w) {\n    // c = center of circle/arc\n    // r = radius of circle/arc\n    // w = width of ring, (0-1, 1 is full circle?)\n    \n    if(distance(uv, c) <= r && distance(uv, c) >= r-w)\n        return true;\n}\n\n/*\nTODO/Notes to self\n Maybe a more efficient way to do this?\n Use mod or something to figure out if it's in a ring?\n The if statement in this func duplicates the first expression\n in the ring function, so that would save some comparisons...\n*/\nbool concentrics(vec2 uv, vec2 c, float r, float w, float n) {\n    /*\n\tc = center, r = radius\n\tw = width of ring\n\tn = # of rings\n\t\n\tBecause of aliasing, weird patterns appear with many small rings close together.\n\t*/\n\n    for(float i=0.;i<n;i++) {\n        // This saves times if you are doing lots of rings\n        if(distance(uv, c) > r-(i*w*2.))\n           return false;\n        \n        if(ring(uv, c, r -(i*w*2.), w)) {\n            return true;\n        }\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;  // square proportions\n    \n    \n    // Play with this and the n arguments of concentrics for different effects\n    float w = .0004;  // width of ring\n\n    vec3 col = vec3(1., 1., 1.);\n    \n    // First is a bigger set of rings at a scale that looks normal\n    // Overlapping sets of rings gives even more patterns.\n    if(concentrics(uv, vec2(1.5, 0.), .3, .03, 100.) \n       || concentrics(uv, vec2(0.), 1., w, 999.)\n       || concentrics(uv, vec2(1.), 1., w, 1299.)) { \n\t\tcol = vec3(0., 0., 0.);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}