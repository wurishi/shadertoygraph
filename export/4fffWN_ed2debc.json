{"ver":"0.1","info":{"id":"4fffWN","date":"1723763180","viewed":54,"name":"Lambert lightning + shadows","username":"moloxe","description":"Raymarching from light to detect where they don't hit","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","lambert","lightning","creative"],"hasliked":0,"parentid":"lclcDX","parentname":"Lucid dream"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 color = texture(iChannel0, uv);\n    color.rgb += snoise(vec3(uv * 1e3, iTime * 2.)) * 0.1;\n    fragColor = color;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.1415926535897932384626433832795\n\nfloat sdTerrain(vec3 p) {\n  float height = cos(p.x) + cos(p.y) + cos(p.z);\n  return sin(p.z) - height;\n}\n\nfloat sdSphere(vec3 p, float r) {\n  return length(p) - r;\n}\n\nmat3 rotationY(float angle) {\n  float c = cos(angle);\n  float s = sin(angle);\n  return mat3(\n     c, 0.,  s,\n    0., 1., 0.,\n    -s, 0.,  c\n  );\n}\n\nmat3 rotationX(float angle) {\n  float c = cos(angle);\n  float s = sin(angle);\n  return mat3(\n    1., 0., .0,\n    0.,  c, -s,\n    0.,  s,  c\n  );\n}\n\nmat3 rotationZ(float angle) {\n  float c = cos(angle);\n  float s = sin(angle);\n  return mat3(\n     c, -s, 0.,\n     s,  c, 0.,\n    0., 0., 1.\n  );\n}\n\nmat3 rotation(vec3 angles) {\n  float cx = cos(angles.x);\n  float sx = sin(angles.x);\n  float cy = cos(angles.y);\n  float sy = sin(angles.y);\n  float cz = cos(angles.z);\n  float sz = sin(angles.z);\n\n  mat3 rotX = mat3(\n    1., 0., 0.,\n    0., cx, -sx,\n    0., sx, cx\n  );\n\n  mat3 rotY = mat3(\n    cy, 0., sy,\n    0., 1., 0.,\n    -sy, 0., cy\n  );\n\n  mat3 rotZ = mat3(\n    cz, -sz, 0.,\n    sz, cz, 0.,\n    0., 0., 1.\n  );\n\n  return rotZ * rotY * rotX;\n}\n\n// ---> https://github.com/ashima/webgl-noise/blob/master/src/noise3D.glsl\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20201014 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+10.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 105.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 lightOri;\nfloat lightR = .1;\nfloat lightD;\n\nfloat sdScene(vec3 p) {\n    lightD = sdSphere(p - lightOri, lightR);\n    p *= rotationY(.5);\n    p += PI;\n    float terrainD = sdTerrain(p);\n    return min(terrainD, lightD);\n}\n\nvec3 calcNormal(vec3 p) {\n    const float eps = 1e-4;\n    vec3 h = vec3(eps, 0.0, 0.0);\n    return normalize(vec3(\n        sdScene(p + h.xyy) - sdScene(p - h.xyy),\n        sdScene(p + h.yxy) - sdScene(p - h.yxy),\n        sdScene(p + h.yyx) - sdScene(p - h.yyx)\n    ));\n}\n\nvec3 applyLambertPointLight(vec3 p, vec3 normal, vec3 lightPos, vec3 lightColor, vec3 baseColor) {\n    vec3 lightDir = normalize(lightOri - p);\n    float diff = max(dot(normal, lightDir), 0.);\n    return lightColor * baseColor * diff;\n}\n\nvec3 calcPos(vec3 ro, vec3 rd) {\n    float z = 0.;\n    for(int i = 0; i < 256; i++) {\n        vec3 p = ro + z * rd;\n        float d = sdScene(p) / 2.;\n        if(d < 1e-3) {\n            return p;\n        }\n        z += d;\n        if(z > 1e3) break;\n    }\n    return vec3(0.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 ro = vec3(0., 0., 1.);\n    vec3 rd = normalize(vec3(uv, -1.));\n    \n    float t = iTime / 2.;\n    lightOri = vec3(\n        cos(t) * 2.5 - .5,\n        0.,\n        sin(t) * 2.5 - 5.\n    );\n    \n    vec3 p = calcPos(ro, rd);\n    float isSurface = step(1e-4, length(p)); // may be the bg\n    \n    vec3 lightDir = normalize(p - lightOri);\n    \n    vec3 lightRayP = calcPos(\n        lightOri + lightDir * (lightR + 0.01), lightDir\n    );\n    float visibility = max(1. - length(lightRayP - p), 0.1);\n    \n    vec3 normal = calcNormal(p);\n    \n    vec3 lightColor = vec3(1.);\n    vec3 lighting = applyLambertPointLight(\n        p, normal, lightOri, vec3(1.), lightColor\n    ) * visibility * isSurface;\n    \n    vec3 color = max(\n        step(lightD, 1e-2) * normal,\n        lighting\n    );\n    \n    fragColor = vec4(color, 1.);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}