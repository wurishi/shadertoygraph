{"ver":"0.1","info":{"id":"3t2fW1","date":"1598843721","viewed":172,"name":"image gradient based redraw","username":"wilsnat","description":"camera noise","likes":3,"published":1,"flags":34,"usePreview":0,"tags":["noise","camera","redraw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define blurm mat3(15.,12.0,5.0,12.0,9.0,4.0,5.0,4.0,2.0)\n#define tau  6.28318530718\n\nconst int samples = 50,\n          LOD = 2,         // gaussian done on MIPmap at scale LOD\n          sLOD = 1 << LOD; // tile size = 2^LOD\nconst float sigma = float(samples) * .25;\n\nfloat gaussian(vec2 i) {\n    return exp( -.5* dot(i/=sigma,i) ) / ( 6.28 * sigma*sigma );\n}\n\nvec4 blur(sampler2D sp, vec2 U, vec2 scale) {\n    vec4 O = vec4(0);  \n    int s = samples/sLOD;\n    \n    for ( int i = 0; i < s*s; i++ ) {\n        vec2 d = vec2(i%s, i/s)*float(sLOD) - float(samples)/2.;\n        O += gaussian(d) * textureLod( sp, U + scale * d , float(LOD) );\n    }\n    \n    return O / O.a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = blur(iChannel0,uv, 1./iChannelResolution[0].xy);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define sobelX mat3(-1.0, -2.0, -1.0, 0.0,  0.0, 0.0, 1.0,  2.0,  1.0)\n#define sobelY mat3(-1.0,  0.0,  1.0, -2.0,  0.0, 2.0,-1.0,  0.0,  1.0)\n#define PI 3.141592\n\nfloat maxmax(vec3 v){ return max(max(v.x,v.y),v.z);}\n\nfloat sobelGradient(vec2 uv)\n{\n    vec2 offset = vec2(1, 1)/iResolution.xy;\n    \n    vec3 sumX = vec3(0.0);\t// x-axis change\n    vec3 sumY = vec3(0.0);\t// y-axis change\n    \n    for(int i = -1; i <= 1; i++)\n    {\n        for(int j = -1; j <= 1; j++)\n        {\n            // texture coordinates should be between 0.0 and 1.0\n            vec3 textVal = texture(iChannel0, offset*vec2(i,j)+uv).xyz;\n            \n            // Convolve kernels with image\n            sumX += textVal * float(sobelX[1+i][1+j]);\n            sumY += textVal * float(sobelY[1+i][1+j]);\n        }\n    }\n    return atan(maxmax(sumX)/3.,maxmax(sumY)/3.)/PI;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float fFrame = float(iFrame);\n    fragColor = texture(iChannel2, uv);\n    \n    //fragColor = vec4(noise(test.rg-test.b),1.0);\n    float d = (sobelGradient(uv)+1.)/2.;//sin(texture.x+1.)/2.;\n    vec2 ds = vec2(cos(d),sin(d));\n    float o = .1;\n    vec4 cam = texture(iChannel1, uv);\n    float f = (abs(length(fragColor)-length(cam))+.9)/4.9;\n    float steps = 30.+iMouse.x;\n    fragColor = mix(fragColor,cam,mod(d*steps+fFrame,steps)/steps);\n    //fragColor = texture(iChannel0, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}