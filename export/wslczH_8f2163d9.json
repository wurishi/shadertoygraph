{"ver":"0.1","info":{"id":"wslczH","date":"1584210040","viewed":139,"name":"Julia Set Explorer2","username":"beyond","description":"Explore the Julia set interactively via the Mandelbrot set. \nPress the mouse button to place your POI in the Mandelbrot set and see how it reflects in the Julia set :)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//// \"Julia Set Explorer2\" \n//// by Theo Engell - 2020\n//// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\nvec3 colors[6] = vec3[]( \n    vec3(  0.0/255.0,   7.0/255.0, 100.0/255.0),\n    vec3( 32.0/255.0, 107.0/255.0, 203.0/255.0),\n    vec3(237.0/255.0, 255.0/255.0, 255.0/255.0),\n    vec3(255.0/255.0, 170.0/255.0,   0.0/255.0),\n    vec3(255.0/255.0,   2.0/255.0,  50.0/255.0),\n    vec3(  0.0/255.0,   7.0/255.0, 100.0/255.0)\n);\n\nvec3 getColor(float t)\n{\n \tfloat size = float(colors.length()-1);\n    t *= size;\n    int index = int(t);\n    return mix(colors[index], colors[index+1], fract(t));\n}\n\nvec3 fractal(vec2 z, vec2 c, int maxIterations)\n{\n    float iterations = 1.0;\n    for(int i=0; i<maxIterations; i++)\n    {\n        iterations++;\n        z = vec2(z.x*z.x-z.y*z.y, 2.0*z.x*z.y) + c;\n        if (length(z) > 4.0)\n            break;\n    }\n    if(iterations>=float(maxIterations)) return vec3(0.0,0.0,0.0);\n    iterations = iterations + 1.0 - log(log(z.x*z.x+z.y*z.y))/log(2.0);\n    float f = iterations/float(maxIterations);\n    return getColor(f);\n}\n\nvec3 mandelbrot(vec2 xy, int maxIterations)\n{\n    return fractal(vec2(0.0,0.0), xy, maxIterations);\n}\n\nvec3 julia(vec2 xy, vec2 p, int maxIterations)\n{\n    return fractal(xy, p, maxIterations);\n}\n\nvec2 transform(vec2 xy, float dx)\n{\n\txy = xy/iResolution.xy - vec2(0.5 + dx,0.5);\n    xy.y *= iResolution.y/iResolution.x;\n    return xy * 4.3;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p_mouse = iMouse.xy;\n    if (p_mouse.x == 0. && p_mouse.y == 0.) p_mouse=vec2(.3,.2);\n        \n    vec2 p_julia = transform(fragCoord, 0.0);\n    vec2 p_mandelbrot = transform(fragCoord, 0.1);\n    vec2 m_mandelbrot = transform(p_mouse, 0.1);\n    \n    vec3 color = julia(p_julia, m_mandelbrot, 200);\n    if (iMouse.z>0.0)\n    {\n\t    vec3 m = mandelbrot(p_mandelbrot, 50);\n        color = mix(color, m, 0.7);\n        \n        float factor = 1.0/(1.0+distance(p_mandelbrot,m_mandelbrot)); // mouse dot\n        color += vec3(1.0,1.0,1.0) * pow(factor,20.0);\n    }\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}