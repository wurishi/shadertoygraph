{"ver":"0.1","info":{"id":"fdlBDN","date":"1644884352","viewed":122,"name":"Frequency_","username":"do","description":":_:","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Frequency\n//2022\n\n#define SEED 1111\n\n#define AA 2\n#define EPS 0.0001\n#define STEPS 75\n#define NEAR 0.\n#define FAR 25.\n\n//pcg\nfloat h11(float p) {\n    uint st = uint(p) * 747796405u + 2891336453u + uint(SEED);\n    uint wd = ((st >> ((st >> 28u) + 4u)) ^ st) * 277803737u;\n    uint h = (wd >> 22u) ^ wd;\n    return float(h) *  (1./float(uint(0xffffffff))); \n}\n\nfloat h31(ivec3 q) {\n    vec3 p = 17.*fract(float(q)* \n    ( float(SEED)+.46537)+vec3(.11,.17,.13));\n    return fract(p.x*p.y*p.z*(p.x+p.y+p.z));\n}\n\nvec3 h33(vec3 p) {\n    uvec3 h = uvec3(ivec3(  p)) * \n    uvec3(1391674541U,SEED,2860486313U);\n    h = (h.x ^ h.y ^ h.z) * uvec3(1391674541U,SEED,2860486313U);\n    return vec3(h) * (1.0/float(0xffffffffU));\n}\n\nfloat cell(vec3 x,float n) {\n    x *= n;\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n \n    float min_dist = 1.0;\n    \n    for(int i = -1; i <= 1; i++) {\n        for(int j = -1; j <= 1; j++) {\n            for(int k = -1; k <= 1; k++) { \n\n                vec3 b = vec3(float(k),float(j),float(i));\n                vec3 r = h33( p + b );\n                \n                vec3 diff = (b + r - f);\n\n                float d = length(diff);\n                min_dist = min(min_dist,d);\n    \n            }\n        }\n    }\n \n    return min_dist;  \n\n}\n\nfloat n3(vec3 x) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f * f * (3.0 - 2.0 * f);\n    float q = p.x + p.y * 157.0 + 113.0 * p.z;\n\n    return mix(mix(mix(\n           h11(q + 0.0),h11(q + 1.0),f.x),\n           mix(h11(q + 157.0),h11(q + 158.0),f.x),f.y),\n           mix(mix(h11(q + 113.0),h11(q + 114.0),f.x),\n           mix(h11(q + 270.0),h11(q + 271.0),f.x),f.y),f.z);\n}\n\nfloat f3(vec3 p) {\n    float q = 1.;\n\n    mat3 m = mat3(vec2(.8,.6),-.6,\n                  vec2(-.6,.8),.6,\n                  vec2(-.8,.6),.8);\n\n    q += .5      * n3(p); p = m*p*2.01;\n    q += .25     * n3(p); p = m*p*2.02;\n    q += .125    * n3(p); p = m*p*2.03;\n    q += .0625   * n3(p); p = m*p*2.05;\n    q += .03125  * n3(p);\n\n    return q/.98;\n\n}\n\nfloat dd(vec3 p) {\n    vec3 q = vec3(f3(p+vec3(0.,1.,2.)),\n                  f3(p+vec3(4.,2.,3.)),\n                  f3(p+vec3(2.,5.,6.)));\n    vec3 r = vec3(f3(p + 4. * q + vec3(4.5,2.4,5.5)),\n                  f3(p + 4. * q + vec3(2.25,5.,2.)),\n                  f3(p + 4. * q + vec3(3.5,1.5,6.)));\n    return f3(p + 4. * r);\n}\n\nvec3 fm(float t,vec3 a,vec3 b,vec3 c,vec3 d) {\n    return a + b * cos((radians(180.)*2.0) * (c * t + d));\n}\n \nvec2 opu(vec2 d1,vec2 d2) {\n    return (d1.x < d2.x) ? d1 : d2;\n} \n\nfloat smax(float d1,float d2,float k) {\n    float h = max(k-abs(d1-d2),0.);\n    return max(d1,d2) + h*h*.25/k;\n}\n\nfloat smin(float d1,float d2,float k) {\n    float h = max(k-abs(d1-d2),0.);\n    return min(d1,d2) - h*h*.25/k;\n}\n \nmat2 rot(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    \n    return mat2(c,-s,s,c);\n}\n\nmat3 camera(vec3 ro,vec3 ta,float r) {\n     \n     vec3 w = normalize(ta - ro); \n     vec3 p = vec3(sin(r),cos(r),0.);           \n     vec3 u = normalize(cross(w,p)); \n     vec3 v = normalize(cross(u,w));\n\n     return mat3(u,v,w); \n}\n\nfloat re(vec3 p,float d,float h) {\n    vec2 w = vec2(d,abs(p.z) - h);\n    return min(max(w.x,w.y),0.) + length(max(w,0.)); \n}\n\nfloat spiral(vec2 p,float s) {\n     float d = length(p);\n     float a = atan(p.y,p.x);\n     float l = log(d) / .618 + a;\n     return sin(l*s);     \n}\n\nfloat plane(vec3 p,vec4 n) {\n    return dot(p,n.xyz) + n.w;\n}\n\nfloat dfn(ivec3 i,vec3 f,ivec3 c) {\n    float rad = .5*h31(i+c);\n    return length(f-vec3(c))-rad;\n}\n\nfloat base_df(vec3 p) {\n     ivec3 i = ivec3(floor(p));\n     vec3 f = fract(p);\n\n     return min(min(min(dfn(i,f,ivec3(0,0,0)),\n                        dfn(i,f,ivec3(0,0,1))),\n                    min(dfn(i,f,ivec3(0,1,0)),\n                        dfn(i,f,ivec3(0,1,1)))),\n                min(min(dfn(i,f,ivec3(1,0,0)),\n                        dfn(i,f,ivec3(1,0,1))),\n                    min(dfn(i,f,ivec3(1,1,0)),\n                        dfn(i,f,ivec3(1,1,1)))));\n}\n\nfloat base_fractal(vec3 p,float d) {\n     float s = 2.11;\n     \n     mat3 m = mat3(  0.,    .8,   .6,\n                   -  .8,   .36, -.48,\n                   -  .6,  -.48,  .64);       \n\n     for(int i = 0; i < 2; i++) {\n          float n = s*base_df(p);\n          n = smax(n,d-.1*s,.25*s);\n          d = smin(n,d,.3*s);\n \n          p = mat3( 0.,1.6,1.2,\n                   -1.6,.7,-.96,\n                   -1.2,-.96,1.28)*p;\n\n          p = 2.*m*p;\n          s = .5*s;\n                    \n     }\n     return d;\n} \n\n\nvec2 scene(vec3 p) { \n\nvec2 res = vec2(1.0,0.0);\n\nvec3 q = p;\n\nq.xy *= rot(iTime * .25);\np.xy *= rot(iTime * .11);\n\nfloat d = re(p,\n          spiral(q.xy,4.),.5\n          );\n\nfloat n = base_fractal(p,d);\nfloat pl = plane(p,vec4(0.,0.,1.,8.));\nres = opu(res,vec2(min(n,pl),1.));\n\n\nreturn res;\n\n}\n\nvec4 trace(vec3 ro,vec3 rd) { \n    float d = -1.0;\n    float s = NEAR;\n    float e = FAR; \n\n    float h = 0.;\n\n    for(int i = 0; i < STEPS; i++) {\n\n        vec3 p = ro + s * rd;\n        vec2 dist = scene(p);\n        h = float(i);   \n\n        if(abs(dist.x) < EPS || e <  dist.x ) { break; }\n        s += dist.x;\n        d = dist.y;\n\n        }\n\n        if(e < s) { d = -1.0; }\n        return vec4(s,d,h,1.);\n\n}\n\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(EPS,0.);\n    return normalize(vec3(\n    scene(p + e.xyy).x - scene(p - e.xyy).x,\n    scene(p + e.yxy).x - scene(p - e.yxy).x,\n    scene(p + e.yyx).x - scene(p - e.yyx).x));\n}\n\nvec3 render(vec3 ro,vec3 rd) {\n\n       vec4 d = trace(ro,rd);\n\n       vec3 linear = vec3(0.);\n       vec3 p = ro + rd * d.x;\n       vec3 n = calcNormal(p);\n       vec3 r = reflect(rd,n);\n\n       vec3 l = normalize(vec3(10.,10.,2.));\n\n       float amb = sqrt(clamp(.5+.5*n.y,0.,1.));  \n       float dif = clamp(dot(n,l),0.0,1.0);\n     \n       vec3 h = normalize(l-rd);\n       float spe = pow(clamp(dot(n,h),0.0,1.0),16.);\n       spe *= dif;\n       spe *= .04 + 0.9 * pow(clamp(1.+dot(h,l),0.,1.),5.);\n\n       vec3 c = vec3(.5);\n       vec3 e = vec3(1.);\n\n       if(d.y >= -.5) {\n\n           if(d.y == 1.) {\n        \n               float n;\n               p.xy *= rot(iTime*.05);\n\n               n = dd(p+cell(p*2.,5.));\n                   \n               c = fm(n+p.x*.0005*p.y*.005,\n                   vec3(.5),\n                   vec3(.5),\n                   vec3(1.),\n                   vec3(1.,h11(12.)*.5,h11(3.)*.5));\n\n               e = fm(f3(p)*p.y*.005,\n                   vec3(.5),\n                   vec3(.5),\n                   vec3(1.5),\n                   vec3(0.,.33,.71));                 \n\n               c *= mix(c,vec3(.5)+e,f3(p));\n\n               vec3 r;\n               vec2 s = vec2(.25);\n               vec2 q = mod(p.xy,s)-.5*s;\n               float d = length(q.xy)-.09;\n               r = vec3(1.-smoothstep(.01,.03,d));\n               r += mix(r,c,f3(p)); \n\n               if(p.z < -1.5) {\n                    \n                    c = fm(-n,\n                    vec3(.5),\n                    vec3(.5),\n                    vec3(1.),\n                    vec3(f3(p*.5)));\n\n                    c *= mix(c,r,.5);\n                    c += vec3(.1);\n\n               }\n           \n           }\n\n           linear += dif * vec3(.05);\n           linear += amb * vec3(.01);\n           linear += 2.5 * spe * vec3(.1);\n          \n           c += linear;        \n       } \n        \nreturn c;\n}\n\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord) { \n\nvec3 color = vec3(0.);\n\nvec3 ta = vec3(0.);\nvec3 ro = vec3(0.,0.,5.);\nro += sin(iTime*.1);\n\n#if AA > 1\nfor(int i = 0; i < AA; i++ ) {\n   for(int k = 0; k < AA; k++) {\n   \n       vec2 o = vec2(float(i),float(k)) / float(AA) * .5;\n       vec2 uv = (2.* (fragCoord.xy+o) -\n       iResolution.xy)/iResolution.y;\n#else\n       vec2 uv = (2.*(fragCoord.xy) -\n       iResolution.xy)/iResolution.y;\n\n#endif\n\n       mat3 cm = camera(ro,ta,0.);\n       vec3 rd = cm * normalize(vec3(uv.xy,2.));\n           \n       vec3 c = render(ro,rd);\n\n       c = pow(c,vec3(.4545));\n       color += c;\n   \n#if AA > 1 \n\n   }\n}   \n   color /= float(AA*AA);\n#endif\n\n   fragColor = vec4(color,1.0);\n\n\n}\n","name":"Image","description":"","type":"image"}]}