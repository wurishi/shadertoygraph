{"ver":"0.1","info":{"id":"NstBRS","date":"1656691695","viewed":109,"name":"Inverse UV deformation","username":"rcmz","description":"Brute force method to compute the inverse of a UV deformation map","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["uv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 pixel = ivec2(fragCoord);\n    vec2 coord = fragCoord / iResolution.xy;\n\n    float bestScore = 1000000.0;\n    ivec2 bestPixel = ivec2(0.0);\n    \n    for (int x = 0; x < int(iResolution.x); x++) {\n        for (int y = 0; y < int(iResolution.y); y++) {\n            ivec2 samplePixel = ivec2(x, y);\n            vec2 coordAtSample = texelFetch(iChannel0, samplePixel, 0).xy;\n            \n            float score = distance(coord, coordAtSample);\n            if (score < bestScore) {\n                bestScore = score;\n                bestPixel = samplePixel;\n            }\n        }\n    }\n    \n    // show inverse deformation\n    vec2 bestCoord = vec2(bestPixel) / iResolution.xy;\n    //fragColor = vec4(, 0.0, 1.0);\n    \n    // show deformation delta\n    vec2 delta = vec2(bestPixel - pixel) / iResolution.xy;\n    fragColor = vec4(abs(delta * 10.0), 0.0, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float map(float value, float from_min, float from_max, float to_min, float to_max) {\n    return (value - from_min) / (from_max - from_min) * (to_max - to_min) + to_min;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 coord = fragCoord / iResolution.xy;\n    \n    vec2 center = vec2(0.5, 0.5);\n    float alpha = clamp(0.4 - distance(center, coord), 0.0, 1.0) * 3.0;\n    mat2 rotation = mat2(cos(alpha), sin(alpha), -sin(alpha), cos(alpha));\n    \n    coord = (coord - center) * rotation + center + vec2(0.0, 0.0);\n    \n    fragColor = vec4(coord, 0, 1);\n}","name":"Buffer A","description":"","type":"buffer"}]}