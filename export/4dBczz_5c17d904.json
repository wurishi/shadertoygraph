{"ver":"0.1","info":{"id":"4dBczz","date":"1490588502","viewed":235,"name":"Basic circle example","username":"barakooda","description":"simple circle","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["simplecircle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simple Circle Example by Barakooda improved by Mike Walczyk.\n\n//27/03/2017\n\n\n\n\n//fitting by smallest axis function\n\nvec2 smallerAspectStretch(vec2 uv,float aspect)\n{    \n    if (aspect <= 1.0) \n    {\n    \tuv.y *= aspect ;\n        return uv;\n    }\n                          \n                          \n    else  \n    {\n        uv.x *= 1.0/aspect;\n        return uv;\n    }\n    \n    \n    \n}   \n    \n    \n// circle function\nvec4 circle (vec2 position,vec2 uv,float radius)\n{\n    \n\n    return vec4( step( distance(position,uv ),radius ) );\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    //normalize pixel space.\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n\n    //screen aspect ratio\n    float aspect = iResolution.y/iResolution.x ;\n    \n    \n    \n    // change cordinates range to -1 to 1 \n   \t\n\tuv = uv * 2.0 - 1.0;\n    uv = smallerAspectStretch(uv,aspect);\n    \n\t// circle properties\n\tfloat radius = 0.1;\n    \n    // notice here to multiplie the smaller axis by aspect\n  \tvec2 position = vec2(0.0,0.0*aspect);\n\t\n    //strecth by the smaller axis \n   \n    \n\tfragColor = circle (position,uv,radius); \n    \n    \n}\n","name":"Image","description":"","type":"image"}]}