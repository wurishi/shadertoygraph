{"ver":"0.1","info":{"id":"Ddyczc","date":"1702306383","viewed":33,"name":"Divide equally with lines ","username":"Tolisz","description":"Description","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI     3.14159265\n\n// rotates from +x to +y coordinate \nvec2 rotate(vec2 v, float a) { \n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = vec2(uv.x, 1.0 - uv.y);\n\n    // PARAMETRS BEGIN\n    vec2 center = vec2(0.5, 0.5);\n    float segments = 12.0;\n    float thickness = 0.002;\n    // PARAMETRS END\n  \n    vec2 direction = uv - center;\n    float range = (atan(direction.x, direction.y) + PI) / (2.0 * PI) ; // w zakresie pomiedzy [0, 1] \n    float discrete_range = floor(range * segments); // [0, 1, ..., segments - 1]\n\n    float rotation_base = (2.0 * PI) / segments;\n    vec2 v_begin = rotate(vec2(0.0, -1.0), - PI / segments);\n    \n    vec2 line_direction = rotate(v_begin, - rotation_base * discrete_range);\n    vec2 line_vec = rotate(line_direction, PI / 2.0);\n    \n    float line_value = smoothstep(1.0 - thickness, 1.0 - thickness, 1.0 - abs(dot(line_vec, direction)));\n    //line_value = 1.0 - abs(dot(line_vec, direction));\n    \n    // Output to screen\n    //fragColor = vec4(discrete_range / segments, 0.0, 0.0 ,1.0);\n    //fragColor = vec4(direction, 0.0, 1.0);\n    //fragColor = vec4(line_vec, 0.0, 1.0);\n    fragColor = vec4(0.0, line_value, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}