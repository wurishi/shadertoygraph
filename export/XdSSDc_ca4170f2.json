{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nfloat fancyStep(vec2 position, float x, float width, float offset) {\n    float stepCenter = snoise(position.xy*0.01) * (width*(sin(iTime *0.5)*1.5+1.)) + 0.5 + offset;\n    float stepWidth = snoise(position.xy*0.01 + 289.) * 0.3 + 0.4;\n    return smoothstep( stepCenter - stepWidth, stepCenter + stepWidth, x);\n}\n\nfloat striation(vec2 position, float time) {\n    return sin(position.y*0.17 + \n        0.2*sin(position.x*0.1 - time*10.) +\n        1.*snoise(position.xy*0.01 + time*0.1) +\n        2.*snoise(position.x*0.007 - position.y*0.003 + vec2(289.,1232.) ) +\n        8.*snoise(position.xx*0.001 + position.yy * 0.001 - time * 0.1)\n        );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    float t = iTime * 0.3;\n    float scale = 1.0 / (iResolution.x * 0.001);\n    vec2 position = scale * (fragCoord.xy - iResolution.xy/2. + vec2(t *100.,0.) + 50.*vec2(sin(t )*0.4, cos(t *0.4)*3.2));\n    \n    float red = fancyStep(position, striation(position, t -0.0), -1.2, -0.6);\n    float green = fancyStep(position, striation(position, t ), 1.1, 0.0);\n    float blue = fancyStep(position, striation(position, t +0.0), 2.8, 0.5);\n    fragColor = vec4( red, green, blue, 1.0 );\n\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdSSDc","date":"1416358237","viewed":354,"name":"Energy Wave","username":"aaaidan","description":"I have no idea what this is or how I made it.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["stripes"],"hasliked":0,"parentid":"","parentname":""}}