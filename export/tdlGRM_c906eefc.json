{"ver":"0.1","info":{"id":"tdlGRM","date":"1559835828","viewed":146,"name":"Ryan Mandelbrot","username":"rmccampbell7","description":"Mandelbrot fractal\nSee https://www.shadertoy.com/view/Wss3Dj for version with mouse and keyboard navigation.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SAMPLES 2\n#define MAXIT 512\n#define RAD 8.\n#define COLOR_FREQ 0.5\n#define INITSCALE 1.15\n#define INITCENTER vec2(-.5, 0)\n#define MAXZOOM 13.8\n#define SPEED .25\n#define FOCUS vec2(-1.78374, 0)\n\nint mandelbrot(vec2 c, out vec2 z) {\n    z = c;\n    for (int i=1; i<=MAXIT; i++) {\n        if (dot(z, z) > RAD*RAD) return i;\n        z = mat2(z, -z.y, z.x) * z + c;\n        //z = vec2(z.x*z.x - z.y*z.y, 2.*z.x*z.y) + c;\n    }\n    return -1;\n}\n\nfloat smooth_color(vec2 z, int i) {\n    return float(i) + 1. - log2(log2(length(z)));\n}\n\nvec3 get_color(vec2 pix) {\n    vec2 uv = (2.*pix - iResolution.xy)/iResolution.y;\n    float zoom = min(iTime*SPEED, MAXZOOM);\n    vec2 c = (uv*INITSCALE + INITCENTER - FOCUS) * pow(2., -zoom) + FOCUS;\n    vec2 z;\n    int i = mandelbrot(c, z);\n    if (i < 0) return vec3(0);\n    return colormap(fract(log(smooth_color(z, i))*COLOR_FREQ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 avg_col = vec3(0);\n    \n    for (int i=0; i<SAMPLES; i++) {\n\t    for (int j=0; j<SAMPLES; j++) {\n            vec2 pix = fragCoord + vec2(i, j)/float(SAMPLES);\n        \tavg_col += get_color(pix);\n        }\n    }\n    avg_col /= float(SAMPLES*SAMPLES);\n\n    fragColor = vec4(avg_col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Colormap taken from matplotlib.cm.twilight: https://matplotlib.org/\nvec3[] colors = vec3[] (\n    vec3(0.88575016, 0.85000925, 0.88797365),\n    vec3(0.76751109, 0.80980076, 0.83252817),\n    vec3(0.58301487, 0.70958888, 0.77925782),\n    vec3(0.44802471, 0.59238331, 0.75574176),\n    vec3(0.38407269, 0.46139019, 0.73094665),\n    vec3(0.3698798 , 0.3163841 , 0.67703755),\n    vec3(0.35060304, 0.1659513 , 0.56147965),\n    vec3(0.27008638, 0.07548368, 0.36056376),\n    vec3(0.18488036, 0.07942573, 0.21307652),\n    vec3(0.29128515, 0.07489905, 0.25755102),\n    vec3(0.45383005, 0.11622184, 0.30970441),\n    vec3(0.59659918, 0.20721296, 0.31258523),\n    vec3(0.69806082, 0.33828976, 0.32207479),\n    vec3(0.76257334, 0.48718907, 0.38675335),\n    vec3(0.80029415, 0.64098213, 0.53730535),\n    vec3(0.84892246, 0.77992021, 0.74663719)\n);\n\nconst int N = colors.length();\n\nvec3 colormap(float v) {\n    float i = clamp(v, 0., 1.)*float(N);\n    int i0 = int(i) % N;\n    int i1 = (i0+1) % N;\n    float f = fract(i);\n    return mix(colors[i0], colors[i1], f);\n}\n","name":"Common","description":"","type":"common"}]}