{"ver":"0.1","info":{"id":"3tyGWV","date":"1580182161","viewed":115,"name":"Particle Duality","username":"sbrown2","description":"Lines that fade with distance and who's colors change with distance on y axis.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","fade","tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 tile(inout vec2 uv, float tile_factor,out vec2 tile_id){\n\ttile_id = floor(uv*tile_factor);\n    uv*=tile_factor;\n    return fract(uv);\n}\n\nfloat distline(vec2 p, vec2 a, vec2 b){\n\tvec2 pa = p-a;\n    vec2 ba = b-a;\n    \n    float h = clamp(dot(pa,ba)/dot(ba,ba),0.,1.);\n    return length(pa-ba*h);\n    \n}\n\nfloat line(vec2 p, vec2 a, vec2 b){\n\tfloat d = distline(p,a,b);\n    float m = smoothstep(.03,.01,d);\n    \n    //fade line when far by multiplying by some number that\n    //increases as length decreases\n    m*=smoothstep(1.4,.8,length(b-a));\n    return m;\n}\n\nfloat N21(vec2 p){\n\n    p = fract(p*vec2(233.34,851.73));\n    p+= dot(p,p+23.45);\n    return fract(p.x*p.y);\n}\n\nvec2 N22(vec2 p){\n\tfloat n = N21(p);\n    return vec2(n,N21(p+n));\n}\n\nvec2 getPos(vec2 tile_id,vec2 offset){\n    vec2 noise = N22(tile_id+offset);\n    float  x = sin(iTime*noise.x);\n    float  y = cos(iTime*noise.y);\n    \n    return offset+vec2(x,y)*.35;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv-=.5;\n    uv.x*= iResolution.x/iResolution.y;\n    vec3 col = vec3(0.);\n    uv.x+=.1*pow((.05*iTime),2.);\n    uv.y+=.2*cos(iTime);\n    /* tile screen */\n    float tile_factor = 5.;\n    vec2 tile_id;\n    vec2 tile_uv = tile(uv,tile_factor,tile_id);\n    tile_uv-=.5;\n   \n    //add grid\n    if(tile_uv.x > .48 || tile_uv.x < -.48||\n       tile_uv.y > .48 || tile_uv.x < -.48){\n    col.r+=1.;\n    }\n\t\n\n    /*loop through neighbor cells and add to arra*/\n    vec2 neighbors[9];\n    int i = 0;\n    for(int y = -1; y <=1; y++){\n        for(int x = -1; x<=1;x++){\n        \tneighbors[i++] = getPos(tile_id,vec2(x,y));\n           \n        }\n    }\n    \n    float t = iTime*.02;\n    for(int x = 0; x<9; x++){\n       col+= line(tile_uv,neighbors[4],neighbors[x]);\n       vec2 j = (neighbors[x]-tile_uv)*20.;\n       float sparkle = 1./dot(j,j);\n        col+= sparkle*(.5*sin(t*fract(neighbors[x].y))+.5);\n    }\n       col+= line(tile_uv,neighbors[1],neighbors[3]);\n       col+= line(tile_uv,neighbors[1],neighbors[5]);\n       col+= line(tile_uv,neighbors[7],neighbors[3]);\n       col+= line(tile_uv,neighbors[7],neighbors[5]);\n\t   col = col*vec3(.8*uv.y,.5*uv.y,pow(fract(.1*iTime)*uv.y,2.))+.3;\n       \n    if(mod(iTime,20.) > 10.){col*=uv.y;}\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}