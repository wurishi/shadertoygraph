{"ver":"0.1","info":{"id":"dlVSzz","date":"1685909686","viewed":62,"name":"Smoothmin raymarch","username":"henrmota","description":"Testing smoothmin","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["smoothminraymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DISTANCE 100.\n#define DIST_SURFACE 0.001\n\nfloat hash21(vec2 st) {\n    return fract(sin(dot(st, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat snoise(vec2 st) {\n    vec2 id = floor(st);\n    vec2 gridUv = fract(st);\n\n    vec2 dx = vec2(1., 0);\n    \n    float tl = hash21(id);\n    float tr = hash21(id + dx);\n    float bl = hash21(id + dx.yx);\n    float br = hash21(id + dx.xx);\n    \n    gridUv = gridUv * gridUv * 3. - 2. *gridUv * gridUv * gridUv;\n    float t = mix(tl, tr, gridUv.x);\n    float b = mix(bl, br, gridUv.x);\n\n    return mix(t, b, gridUv.y);\n}\n\nfloat fbm(vec2 st) {\n    float amp = 1.;\n    float freq = 0.5;\n    float col = 0.;\n    for(float i = 0.; i < 10.; i++) {\n        col += amp * snoise(st * freq);\n        \n        amp *= 0.5;\n        freq *= 2.;\n    }\n    \n    return col / 2.;\n}\n\nmat2 Rot(float angle) {\n    float c = cos(angle), s = sin(angle);\n    \n    return mat2(c, -s, s, c);\n}\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\nfloat Distance(vec3 p) {\n    vec4 sphere1 = vec4(cos(iTime), 1.5 * cos(iTime * 3.), 10., 2.5);\n    \n    vec4 sphere2 = vec4(2. - 0.5 / cos(-0.3 * iTime) - 1., 1.5 * sin(iTime * 5.), 10. + cos(iTime), 0.5);\n    float rad = sphere1.w;\n    vec3 q = p - sphere1.xyz; \n    q.xz *= Rot(iTime);\n    q.xy *= Rot(iTime);\n   \n    rad += 0.1 *  pow(sin(atan(q.z, q.x) * 3. * 3.14) * sin(atan(q.z, q.y) * 3. * 3.14), 2.);\n    float d1 = length(q) - rad;\n    \n    p.xz = abs(p.xz);\n   \n    q = p - sphere2.xyz; \n    \n    float d2 = length(q) - sphere2.w;\n    return smin(d1, d2, 0.9);\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = Distance(p);\n        dO += dS;\n        if (dO > MAX_DISTANCE || abs(dS) < DIST_SURFACE) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p)\n{ \n    float d = Distance(p); // Distance\n    vec2 e = vec2(.01,0); // Epsilon\n    vec3 n = vec3(\n    Distance(p+e.xyy),  \n    Distance(p+e.yxy),\n    Distance(p+e.yyx)) - vec3(\n    Distance(p-e.xyy),  \n    Distance(p-e.yxy),\n    Distance(p-e.yyx));\n   \n    return normalize(n);\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    vec3 ro = vec3(0., 0., 0.);\n    vec3 rd = normalize(vec3(uv, 1.));\n    \n            vec3 color = palette(cos(iTime + length(rd))* 0.5 + 0.5, vec3(0.5), vec3(0.5), vec3(1.), vec3(0.3, 0.5, 0.9));\n\n    float rM = RayMarch(ro, rd);\n    if (rM < MAX_DISTANCE) {\n        vec3 p = ro + rd * rM;\n        vec3 l = vec3(0., 1., 5.);\n        \n        vec3 n = GetNormal(p);\n       \n        color.xy *= Rot(iTime + uv.x);\n        //rd.yz *= Rot(p.y + iTime);\n        float fresnel = pow(1. - pow(dot(-rd, n), 2.), 4.); \n        col += color * (0.5 * max(0., dot(n, normalize(l - p)) + 0.5));\n       \n        col += fresnel;\n        col = min(vec3(1.), col);\n       \n       \n    } else { col += (1. - color) * 0.5; }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}