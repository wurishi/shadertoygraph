{"ver":"0.1","info":{"id":"mstyW7","date":"1696357650","viewed":57,"name":"Rotating Glowing Star","username":"Peregrine","description":"Shader School with z0rg: introduction to shaders, 2D, SDFs, glow function.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","beginner","glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// from Inigo Quilez: https://iquilezles.org/articles/distfunctions2d/\nfloat sdf_star(in vec2 p, in float r, in float rf) {\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x, k1.y);\n    p.x = abs(p.x);\n    p -= 2.0 * max(dot(k1, p), 0.0) * k1;\n    p -= 2.0 * max(dot(k2, p), 0.0) * k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf * vec2(-k1.y, k1.x) - vec2(0, 1);\n    float h = clamp(dot(p, ba)/dot(ba, ba), 0.0, r);\n    return length(p - ba * h) * sign(p.y * ba.x - p.x * ba.y);\n}\n\nfloat glow(float pos, float radius, float intensity) {\n    return clamp(pow(0.01/pos, intensity) * radius, 0., 1.);\n}\n\nmat2 rotate(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nvec3 gamma_correction(vec3 color) {\n    float gamma = 2.2;\n    return pow(color, vec3(1. / gamma));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy; // adjust coordinates\n    uv -= 0.5;\n    uv.y /= iResolution.x/iResolution.y;\n    uv *= rotate(iTime);\n\n    float dist = sdf_star(uv, .2, .5);\n    dist = abs(dist) - .005; // star contour\n    vec3 color = vec3(step(0., -dist)); // cut the shape and invert fg/bg colors\n    color += glow(dist, 1., 1.9);\n    color *= vec3(1., 1., .5);\n    color = gamma_correction(color);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}