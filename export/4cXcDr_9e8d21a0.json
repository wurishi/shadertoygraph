{"ver":"0.1","info":{"id":"4cXcDr","date":"1720986694","viewed":50,"name":"Voronoi - hw8","username":"Morevita","description":"A Voronoi pattern shader, which is supposed to simulate the appearance of sparkling water. But it looks a little bit cyberpunk, which is accidentally pretty, so I kept it.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n\nvoid moda(inout vec2 uv, float rep) {\n    float per = 2. * PI / rep;\n    float a = atan(uv.y, uv.x);\n    float l = length(uv);\n    a = mod(a - per / 2., per) - per / 2.;\n    uv = vec2(cos(a), sin(a)) * l;\n}\n\nvec2 rand(vec2 x) {\n    return fract(sin(vec2(dot(x, vec2(1.2, 5.5)), dot(x, vec2(4.54, 2.41)))) * 4.45);\n}\n\nvec3 voro(vec2 uv) {\n    vec2 uv_id = floor(uv);\n    vec2 uv_st = fract(uv);\n\n    vec2 m_diff;\n    vec2 m_point;\n    vec2 m_neighbor;\n    float m_dist = 10.;\n\n    for (int j = -1; j <= 1; j++) {\n        for (int i = -1; i <= 1; i++) {\n            vec2 neighbor = vec2(float(i), float(j));\n            vec2 point = rand(uv_id + neighbor);\n            point = 0.5 + 0.5 * sin(2. * PI * point + iTime);\n            vec2 diff = neighbor + point - uv_st;\n\n            float dist = length(diff);\n            if (dist < m_dist) {\n                m_dist = dist;\n                m_point = point;\n                m_diff = diff;\n                m_neighbor = neighbor;\n            }\n        }\n    }\n\n    m_dist = 10.;\n    for (int j = -2; j <= 2; j++) {\n        for (int i = -2; i <= 2; i++) {\n            if (i == 0 && j == 0) continue;\n            vec2 neighbor = m_neighbor + vec2(float(i), float(j));\n            vec2 point = rand(uv_id + neighbor);\n            point = 0.5 + 0.5 * sin(point * 2. * PI + iTime);\n            vec2 diff = neighbor + point - uv_st;\n            float dist = dot(0.5 * (m_diff + diff), normalize(diff - m_diff));\n            m_point = point;\n            m_dist = min(m_dist, dist);\n        }\n    }\n\n    return vec3(m_point, m_dist);\n}\n\nvec3 water_color(vec2 uv, float detail) {\n    uv *= detail;\n    vec3 v = voro(uv);\n    return vec3(v.x, v.y, v.x + v.y); \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    \n    float scale = 1.0;\n    vec3 col = water_color(uv * scale, 12.);\n\n    vec2 mouse_uv = iMouse.xy / iResolution.xy;\n    float distort_factor = 0.2;\n    uv += distort_factor * (uv - mouse_uv) * length(uv - mouse_uv);\n    \n    col = water_color(uv * scale, 12.);\n    \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}