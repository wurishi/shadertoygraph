{"ver":"0.1","info":{"id":"dltBz8","date":"1700962900","viewed":31,"name":"Rainbow square noise","username":"pcunnell","description":"creating outlined squares and coloring them (patterns evolve after some time, and flickers every 10s due to the floor function)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Takes at least 10s before seeing anything fun\n\n#define SquareProportion .01\n#define NUMBER_OF_SQUARES 100.\n#define LOOP_FRACTION 100. // 100 is the default\n\nvec3 palette( in float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(-1.268, 0.546, 0.546);\n    vec3 c = vec3(-1.663, -1.338, -1.703);\n    vec3 d = vec3(-0.063, 1.412, 1.745);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nfloat Square(vec2 uv, float portion) {\n    vec2 bl = step(vec2(portion), uv);\n    vec2 tr = step(vec2(portion), 1. - uv);\n    \n    float tf = .1;\n    float scale = .25;\n    float shift = .5;\n    \n    float BLX = cos(bl.x + iTime * tf);\n    float BLY = sin(bl.y + iTime * tf * .1) * scale + shift;\n    \n    float trX = cos(tr.x + iTime * tf);\n    float trY = sin(tr.y - iTime * tf * .5) * scale + shift;\n    \n    //float BLX = (bl.x);\n    //float BLY = atan(bl.y) * scale + shift;\n    //float trX = (tr.x);\n    //float trY = sin(tr.y / iTime);\n    \n    float square = BLX * BLY * trX * trY;\n\n    return square;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.xy;\n    vec3 color = vec3(0.);\n    float y = st.y;\n\n    float square1 = Square(st, SquareProportion);\n    float m = st.x * (1. - square1);\n    float pct = square1;\n\n    for(float i = 0.; i <= NUMBER_OF_SQUARES; i++) {\n        if(mod(i, 2.) == 0.) {\n            pct -= Square(st, SquareProportion + i/LOOP_FRACTION); \n            pct *= floor(iTime * .1); // floor is the root cause of flicker every 10s, but i like it\n        } else {\n            pct -= Square(st, SquareProportion + i/LOOP_FRACTION);\n            pct /= iTime * .1;\n        }\n    }\n    \n    color = palette(length(pct) + .001 + iTime * 0.1);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}