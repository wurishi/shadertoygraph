{"ver":"0.1","info":{"id":"lX2BRK","date":"1729718175","viewed":51,"name":"Simple function visualizer","username":"gubebra","description":"Simple function visualizer shader.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle(vec2 uv, vec2 center, float r, float s, float k)\n{\n    return k / smoothstep(r, r + s, length(uv - center));\n}\n\nfloat xf(float x)\n{\n    return sin(x) * cos(x * 2.0) + sin(x * 0.5) * x * 0.2;\n}\n\nfloat yf(float y)\n{\n    return y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // variables\n    float zoom = mix(0.5, 30.0, iMouse.x / iResolution.x);\n    float k = zoom / iResolution.y;\n\n    // uv from -0.5, 0.5\n    vec2 uv = (fragCoord - iResolution.xy / 2.0) / iResolution.y * zoom;\n    \n    // function\n    vec3 color = vec3(k / abs(yf(uv.y) - xf(uv.x)));\n    \n    // circle\n    float anim = mix(-zoom, zoom, sin(iTime * 0.5) * 0.5 + 0.5);\n    color += circle(uv, vec2(yf(anim), xf(anim)), 0.01 * zoom, 0.2 * zoom, k) * 0.2 * vec3(1, 1, 0);\n    \n    // xy ----\n    color += k / abs(uv.y) * vec3(1, 0, 0) + k / abs(uv.x) * vec3(0, 1, 0);\n    \n    // out\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}