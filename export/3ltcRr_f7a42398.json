{"ver":"0.1","info":{"id":"3ltcRr","date":"1608402541","viewed":521,"name":"Gi reprojection","username":"ollj","description":"mouse rotates\n\nfork of\nhttps://www.shadertoy.com/view/Wt3XRX\ntemporal reprojection with global illumination (crepuscular fog)\n","likes":23,"published":1,"flags":32,"usePreview":1,"tags":["dof","fog","aces","henyeygreenstein","crepuscularity","gobalillumination","temporalreprojection","deptoffield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 ACESFilm(vec3 x\n){float a=2.51,b=0.03,c=2.43,d=0.59,e=0.14;return(x*(a*x+b))/(x*(c*x+d)+e);}\n\nmat3 fGauss=mat3(41,26,7,26,16,4,7,4,1)/273.;\n\n#ifdef Bloom\nvec3 bloom(float scale,float t,vec2 u//scale,threshold,uv\n){float logScale=log2(scale)\n ;vec3 r=vec3(0)\n ;for(int y=-2;y<=2;y++)for(int x=-2;x<=2;x++\n ){r+=fGauss[abs(x)][abs(y)]*textureLod(iChannel0,(u+vec2(x,y)*scale)/iR.xy,logScale).rgb;} \n ;return max(r-vec3(t),vec3(0));}\n#endif\n\nvoid mainImage(out vec4 O,vec2 u\n){Camera cam=getCam(iTime,iMouse,iR)\n ;bool zBu=false;\n #ifdef ShowDitheredAsBuffer\n ;vec2 a=mod(u,2.);if(a.x==a.y)zBu=true//dithered\n ;//zBu=true                           //fullscreen\n #endif\n ;if(zBu){\n  ;O=(texelFetch(iChannel1,ivec2(u),0))\n  ;if(O.a!=0.)O.xyz=1.-vec3(length(cam.pos-O.xyz)/4./MaxDist)\n ;}else{\n ;vec4 col=vec4(0.)\n ;float frd=iR.y*cam.aperture*DoFClamp\n ;int rd=int(ceil(frd-.5))\n ;if(DoFClamp!=0.){//depthOfField range is set by DoFClamp\n  ;for(int y=-rd;y<=rd;y++\n  ){int ln=int(ceil(sqrt(frd*frd-float(y*y))-.5))\n   ;for(int x=-ln;x<=ln;x++\n   ){vec4 p=texelFetch(iChannel0,ivec2(clamp(u+vec2(x,y),vec2(0),iR.xy-1.)),0)\n    ;float dof=min(abs(p.a-cam.focalDistance)/p.a,DoFClamp)*iR.y*cam.aperture\n    ;p.a=1.\n    ;p*=sat((dof-length(vec2(x,y)))+.5)/(dof*dof+.5)\n    ;col+=p;}}\n }else{//skip depthOfField\n  ;col+=vec4(texelFetch(iChannel0,ivec2(clamp(u,vec2(0),iR.xy-1.)),0).xyz,1);}\n ;col/=col.a;\n ;vec3 bloomSum=vec3(0.)\n #ifdef Bloom\n ;bloomSum+=bloom(.07*iR.y,.0,u)*.06\n #endif\n ;O=vec4(ACESFilm(col.rgb+bloomSum),1.)\n //;O=col\n ;}}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//temporal reprojection with global illumination (crepuscular fog)\n//self  : https://www.shadertoy.com/view/3ltcRr#\n//parent: https://www.shadertoy.com/view/Wt3XRX\n\n//code changes from parent shader, besides parameters (and comments)\n//- mouse input\n//- more parameters to toggle some effects off (no DoF,no Bloom)\n//- increased fog iterations\n//- different light color\n\n//I want to swap buff A and B for alphabetic order\n//I want to make the z-buffer greyscale and not worldspace \n//- failed below, see [compressed2Zbuffer]\n\n//buff B is like a z-buffer, but it buffers WorldSpopace.xyz of surface.\n//buff A reads buff B for z-buffer\n//buff C reads buff B for z-buffer\n//buff D reads buff B for z-buffer\n//\n//buff C reads buff A+C for TemporalReprojection/averaging\n//buff D reads buff   C+Noise for crepuscular fog\n//\n//buff Image reads buff D and adds postProcessing (DoF,gamma,bloom)\n\nconst vec3 LightDir=normalize(vec3(0,0,-1));\nconst vec3 LightColor=vec3(1,.6,.8)*6.;//distinct from parent\nconst float LightRadius=.02;\n\n//---Buffer All\n#define MaxDist 4.\n#define MinDist .015\n#define Pi acos(-1.)\n\n//---buffer B steps (z-buffer)\n#define MaxStepsZbuffer 128\n\n//---BuffC:\n//show what pexels get refreshed in TemporalAveraging\n//#define DebugReprojection\n//steps:\n#define MaxStepsIndirect 32\n//increase this number for a better GI\n#define IndirSmp 2.\n//noisiness can make results blurry/ambiental\n#define SamplesLimit 150\n//GI bounces\n#define Bounces 1\n//BuffC (incremental Averaging with reprojection)\n#define PixelAcceptance 1.5\n#define PixelCheckDistance .5\n\n//---buffer C+D \n#define Density vec3(.0025,.0045,.006)\n#define MaxShadowSteps 32\n//Anisotropy (only background and crepuscular) henyeyGreenstein()\n#define Aniso .51\n\n//---buffer D\n//set FogSteps==0 to skip Fog\n#define FogSteps 32\n#define FogRange 13.\n\n//-----BuffImage \n//DeptOfField >0. : set to [0.] to skip DoF\n#define DoFClamp .0\n//show buffer WorldSpace (as greyscale zBuffer)\n//#define ShowDitheredAsBuffer\n\nfloat sat(float a){return clamp(a,0.,1.);}\n#define iR iResolution\n\nstruct Camera{\n vec3 pos,rot;\n float focalLength,focalDistance,aperture;};\n\nmat3 rotationMatrix(vec3 a//eulerRot to mat3\n){float c=cos(a.x),s=sin(a.x);mat3 rx=mat3(1,0,0,0,c,-s,0,s,c)\n ;c=cos(a.y),s=sin(a.y)      ;mat3 ry=mat3(c,0,-s,0,1,0,s,0,c)\n ;c=cos(a.z),s=sin(a.z)      ;mat3 rz=mat3(c,-s,0,s,c,0,0,0,1)\n ;return rz*rx*ry;}\n\nCamera getCam(float t,vec4 m,vec3 r\n){//time=0.\n ;vec3 rot=vec3(0)\n ;if(m.z>0.\n ){m.xy/=r.xy\n  ;m.xy*=-acos(-1.)\n  ;rot=vec3(cos(m.y),cos(m.x),.0)\n ;}else{\n  ;rot=vec3(cos(t*.4)/6.,(1.8+t)*.2+sin(t*.2)/4.,.5);}\n ;return Camera(vec3(0.,0.,-10.)*rotationMatrix(rot),rot,1.,7.5,.025);}\n\nvec3 uv2dir(Camera cam,vec2 uv//get RayDirection\n){return normalize(vec3(uv,cam.focalLength))*rotationMatrix(cam.rot);}\n\nvec2 pos2uv(Camera cam,vec3 pos\n){vec3 dir=normalize(pos - cam.pos)*inverse(rotationMatrix(cam.rot))\n ;return dir.xy*cam.focalLength/dir.z;}\n\nvec3 dirFromUv(Camera cam,vec2 uv\n){return normalize(vec3(uv,cam.focalLength))*rotationMatrix(cam.rot);}\n\n\nfloat sdf(vec3 position,out vec3 diffuseColor,out vec3 emissionColor\n){diffuseColor=vec3(1.)\n ;emissionColor=vec3(0.)\n ;float Scale=2.25\n ;float Radius=.25\n ;mat3 Rotation\n ;float time=15.\n ;Rotation=rotationMatrix(vec3(time,time*.7,time*.4)*.2)\n ;Scale+=sin(time*.5)*.25\n ;Radius+=cos(time)*.25\n ;vec4 scalevec=vec4(Scale,Scale,Scale,abs(Scale))/Radius\n ;float C1=abs(Scale-1.0),C2=pow(abs(Scale),float(1-/*iterations*/7))\n ;vec4 p=vec4(position.xyz*Rotation,1.0),p0=p\n ;for(int i=0;i<7;i++\n ){p.xyz=clamp(p.xyz,-1.,1.)*2.-p.xyz\n  ;p.xyzw*=sat(max(Radius/dot(p.xyz,p.xyz),Radius))\n  ;if(i<3)p.xyz*=Rotation\n  ;p.xyzw=p*scalevec+p0;}\n /*\n ;diffuseColor=fract(p0.x)<.1 ? vec3(.2): vec3(1.)\n ;emissionColor=fract(p0.x)<.1 ? (normalize(p.xyz)*.5+.5)*10. : vec3(0.)\n */\n ;return(length(p.xyz)-C1)/p.w-C2;}\n\nfloat sdf(vec3 a){vec3 dc,ec;return sdf(a,dc,ec);}\n\nvec3 d3tap6(vec3 pos//estimate first derivative in 3d by 6 tapping.\n){vec2 k=vec2(MinDist,0)\n ;return normalize(vec3(sdf(pos+k.xyy)-sdf(pos-k.xyy)\n                       ,sdf(pos+k.yxy)-sdf(pos-k.yxy)\n                       ,sdf(pos+k.yyx)-sdf(pos-k.yyx)));}\n\nfloat henyeyGreenstein(vec3 i,vec3 o//for background\n){float cosTheta=dot(i,o)\n ;return Pi/4.*(1.-Aniso*Aniso)/pow(1.+Aniso*Aniso-2.*Aniso*cosTheta,1.5);}\n\nvec3 directLight(vec3 pos,vec3 normal\n){//return vec3(0.)\n ;float dotLight=-dot(normal,LightDir)\n ;if(dotLight<0.0)return vec3(0)\n ;vec3 pos0=pos\n ;float minAngle=LightRadius\n ;for(int i=0;i < MaxShadowSteps;i++\n ){float dist=sdf(pos)\n  ;if(dist>MaxDist)break\n  ;if(dist<MinDist)return vec3(0)\n  ;pos-=LightDir*dist*2.5//goes 2.5 times faster since we don't need details\n  ;minAngle=min(asin(dist/length(pos-pos0)),minAngle);}\n ;return LightColor*dotLight*sat(minAngle/LightRadius);}\n \n//#define compressed2Zbuffer\n//BUGGY code by ollj, to make thezbuffer NOT in worldspace\n//, but a distanceToCamera in ScreenSpace\n//z range[0..MaxDist]\nfloat w2z(vec3 surf,vec3 c){return length(surf-c);}\nvec3 z2w(vec2 u,float a,Camera c){return c.pos-a*uv2dir(c,u);}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 o,vec2 u){o=texelFetch(iChannel0,ivec2(u),0);}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//This is basically a z-buffer.\n//does one first pass with more iterations\n//either returns vec4(0)                 on hitting nothing\n//or     returns vec4(hitPosition.xyz,1) in worldSpace\n//is read by BufferC AND BufferD\nbool trace(inout vec3 pos,vec3 dir\n){pos+=dir*sdf(pos)\n ;pos+=dir*sdf(pos)\n ;for(int i=0;i<MaxStepsZbuffer;i++\n ){float dist=sdf(pos)\n  ;if(dist>MaxDist)break\n  ;if(dist<MinDist\n  ){pos-=(2.*MinDist-dist)*dir\n   ;pos-=(2.*MinDist-sdf(pos))*dir\n   ;pos-=(2.*MinDist-sdf(pos))*dir\n   ;return true;}\n  ;pos+=dir*dist;}\n ;return false;}\n\nvoid mainImage(out vec4 o,vec2 u\n){Camera cam=getCam(iTime,iMouse,iR)\n ;u=(u-iResolution.xy/2.0)/iResolution.y\n ;o=vec4(0.)\n ;vec3 cpos=cam.pos\n ;if(trace(cam.pos,uv2dir(cam, u)))o=vec4(cam.pos,1)\n #ifdef compressed2Zbuffer\n ;o.xyz=vec3(w2z(o.xyz,cpos))\n #endif\n ;}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"float seed;\n\nfloat randomFloat(){return fract(sin(seed++)*43758.54536156);}\n\nvec3 ortho(vec3 v){return abs(v.x)>abs(v.z)? vec3(-v.y,v.x,0.0):vec3(0.0,-v.z,v.y);}\n\nvec3 getCosineWeightedSample(vec3 dir\n){vec3 o1=normalize(ortho(dir))\n ;vec3 o2=normalize(cross(dir,o1))\n ;vec2 r=vec2(randomFloat(),randomFloat())\n ;r.x=r.x*2.0*Pi\n ;r.y=pow(r.y,.5)\n ;float oneminus=sqrt(1.0-r.y*r.y)\n ;return cos(r.x)*oneminus*o1+sin(r.x)*oneminus*o2+r.y*dir;}\n\nvec3 background(vec3 dir){return LightColor*Density*8.*henyeyGreenstein(-LightDir,dir);}\n\nvec3 directBackground(vec3 dir){return LightColor*Density*1.;}\n\nbool trace(inout vec3 pos,vec3 dir,out vec3 normal\n){for(int i=0;i<MaxStepsIndirect;i++\n ){float dist=sdf(pos)\n  ;if(dist>MaxDist)break\n  ;if(dist<MinDist\n  ){normal=d3tap6(pos)\n   ;pos-=(2.*MinDist-dist)*dir\n   ;return true;}\n  ;pos+=dir*dist;}\n ;return false;}\n\nvec3 sampleIndirectLight(vec3 pos,vec3 normal\n){vec3 dir\n ;vec3 abso=vec3(1.),light=vec3(0.),dc,ec\n ;for(int i=0;i<Bounces;i++\n ){dir=getCosineWeightedSample(normal)\n  ;if(!trace(pos,dir,normal))return light+abso*background(dir)\n  ;sdf(pos,dc,ec)\n  ;light+=abso*(ec+dc*directLight(pos,normal))\n  ;abso*=dc;}\n ;return light;}\n\nfloat distancePixel(vec2 p,vec4 h//prevu,hit\n){if(min(iR.xy,p)!=p && max(vec2(0.),p)!=p)return MaxDist\n ;vec4 prevPos=texture(iChannel2,p/iR.xy)\n ;Camera cam=getCam(iTime,iMouse,iR)\n ;return length(prevPos-h);}\n\nvec4 previousSample(vec4 hit//reprojection\n){vec2 prevUv=pos2uv(getCam(iTime-iTimeDelta,iMouse,iR),hit.xyz)\n ;vec2 prevu=prevUv*iR.y+iR.xy/2.\n ;vec2 pfc,pfcf\n ;float dist,f=MaxDist//dist finaldist\n ;for(int x=-1;x<=1;x++\n ){for(int y=-1;y<=1;y++\n  ){pfc=prevu+PixelCheckDistance*vec2(x,y)\n   ;dist=distancePixel(pfc,hit)\n   ;if(dist<f\n   ){pfcf=pfc;f=dist;}}}\n ;Camera cam=getCam(iTime,iMouse,iR)\n ;if(f<PixelAcceptance*length(hit.xyz-cam.pos)/cam.focalLength/iR.y\n ){return texture(iChannel0,pfcf/iR.xy);}\n ;return vec4(0.);}\n\nvoid mainImage(out vec4 O,in vec2 u\n){seed=.256435865*u.x+.316548465*u.y+sin(iTime)*16886.3158915\n ;Camera cam=getCam(iTime,iMouse,iR)\n ;vec4 hit=texelFetch(iChannel1,ivec2(u),0)\n #ifdef compressed2Zbuffer\n ;hit.xyz=z2w(u,hit.x,cam)\n #endif\n ;if(hit.a==0.\n ){vec2 uv=(u-iR.xy/2.0)/iR.y\n  ;O=vec4(directBackground(uv2dir(cam,uv)),1.)\n ;}else{\n ;\n  #ifdef DebugReprojection\n   ;O=previousSample(hit)\n   ;O.rgb=O.a==0.?vec3(1,0,0):vec3(0,1,0)//averageds=green, resets=red\n   ;O.a=1.;}}\n  #else\n   ;float j=floor(IndirSmp)\n   ;vec3 normal=d3tap6(hit.xyz)\n   ;vec3 iLight=vec3(0.)\n   ;for(float i=0.;i<j;i++\n   ){iLight+=sampleIndirectLight(hit.xyz,normal)/j;}\n   ;O=previousSample(hit)\n   ;O.a+=O.a>float(SamplesLimit)?0.:j\n   ;iLight=clamp(iLight,vec3(0),vec3(O.a/10.))// clamp gi for low sample count\n   ;O.rgb=mix(O.rgb,iLight,1./(O.a/j));}}\n  #endif\n","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//buff D only adds fog\n//sure could use some dither\nvoid mainImage(out vec4 O,in vec2 u\n){Camera cam=getCam(iTime,iMouse,iR)\n ;vec4 col=texelFetch(iChannel0,ivec2(u),0)\n #if (FogSteps==0)\n ;O=col;\n ;return\n #endif\n ;vec4 tx=texelFetch(iChannel1,ivec2(u),0)\n #ifdef compressed2Zbuffer\n ;tx.xyz=z2w(u,tx.x,cam)\n #endif\n ;vec3 finalPos=tx.xyz\n ;col.a=length(cam.pos-finalPos)\n ;vec2 uv=(u-iResolution.xy/2.0)/ iResolution.y\n ;vec3 dir=uv2dir(cam,uv)\n ;if(tx.a!=0.\n ){vec3 dc,ec\n  ;sdf(finalPos,dc,ec)\n  ;col.rgb=ec+dc*(col.rgb+directLight(finalPos,d3tap6(finalPos)));\n }else{finalPos=cam.pos+dir*100.;}\n ;vec3 volCol=vec3(0.),volAbs=vec3(1.),pos=cam.pos\n ;float stepDist=(tx.a==0. ? FogRange : min(FogRange,col.a))/float(FogSteps)\n ;vec3 stepAbs=exp(-Density*stepDist)\n ;vec3 stepCol=(vec3(1.)- stepAbs)*henyeyGreenstein(-LightDir,dir)\n ;pos+=stepDist*dir*texture(iChannel2,u/vec2(256)).a\n ;for(int i=0;i<FogSteps;i++\n ){volAbs*=stepAbs\n  ;volCol+=stepCol*volAbs*directLight(pos,-LightDir)\n  ;pos+=dir*stepDist;}\n ;col.rgb=col.rgb*volAbs+volCol\n ;O=col;}","name":"Buffer D","description":"","type":"buffer"}]}