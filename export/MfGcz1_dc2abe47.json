{"ver":"0.1","info":{"id":"MfGcz1","date":"1731467291","viewed":24,"name":"Rotating Parallelogram","username":"rulerofcakes","description":"Learning fragment shaders!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["matrix","rotation","fragment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec3 uv = vec3(fragCoord/iResolution.xy,1.);\n    \n    mat3 rot = mat3(cos(iTime),sin(iTime),0.,\n                    -sin(iTime),cos(iTime),0.,\n                    0.,0.,1.);\n    mat3 translateCenter = mat3(1.,0.,0.,\n    0.,1.,0.,\n    -0.5,-0.5,1.);\n    \n    mat3 translateInv = mat3(1.,0.,0.,\n    0.,1.,0.,\n    0.5,0.5,1.);\n    \n    mat3 centerRotation = translateInv*rot*translateCenter;\n    \n    uv = centerRotation*uv;\n    \n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float line1 = (uv.y-2.*uv.x) ;\n    line1 = step(0.,line1);\n    \n    float line2 = (uv.y+2.*uv.x-2.);\n    line2 = step(0.,line2);\n        \n    float line3 = -(uv.y-2.*uv.x+1.);\n    line3 = step(0.,line3);\n    \n    float line4 = -(uv.y+2.*uv.x-1.);\n    line4 = step(0.,line4);\n\n\n    col += line1;\n    col += line2;\n    col += line3;\n    col += line4;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}