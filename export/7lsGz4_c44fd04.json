{"ver":"0.1","info":{"id":"7lsGz4","date":"1621837475","viewed":189,"name":"Circle Fractal (Ford Circles)","username":"smjty","description":"For each pixel the code performs a tree search to find the circle which contains that pixel.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Source code for interactive piece: \"Touching Circles 1\" Twitter: @smjtyazdi\n//https://www.hicetnunc.xyz/objkt/95449\n\n#define PI 3.14159265\n#define DEL 0.002\n\n#define R vec3(255,171,225)/255.\n#define G vec3(255,230,230)/255.\n#define B vec3(166,133,226)/255.\n#define L vec3(250,245,245)/255.\n#define Z vec3(0,0,0)/955.\n\nfloat fx(vec2 r1 , vec2 r2,float r3){\n    float d1 = 2.*sqrt(r1.x*r3);\n    float d2 = 2.*sqrt(r2.x*r3);\n    float sol1 = r1.y + d1;\n    float sol2 = r1.y - d1;\n    if(abs(abs(sol1-r2.y)-d2)<abs(r1.y-r2.y)/1000. )return sol1;\n    return sol2;\n}\n\nfloat l(vec2 p,float r,float x){\n    return length(p-vec2(x,r))/r-1.;\n}\n\nvec3 l2(vec2 p,float r,float x){\n    return vec3(length(p-vec2(x,r))-r , atan(p.y-r,p.x-x),r);\n}\n\nbool check_in(vec2 p,float x1, float r1,float x2,float r2){\n    if(p.x < min(x1,x2) || p.x>max(x1,x2))return false;\n    if(p.y > (p.x-x1)*(r1-r2)/(x1-x2) + r1) return false;\n    return true;\n}\n\nvec3 col(float i){\n    if(i==1.)return R;\n    if(i==2.)return B;\n    if(i==3.)return G;\n}\n\nfloat trip(float x1,float x2){\n    if(3.!=x1 && 3.!=x2)return 3.;\n    if(1.!=x1 && 1.!=x2)return 1.;\n    return 2.;\n}\n\nfloat big(float r1,float r2){\n    return 1./pow(1./sqrt(min(r1,r2)) - 1./sqrt(max(r1,r2)),2.);\n}\n\nfloat smol(float r1,float r2){\n    return 1./pow(1./sqrt(r2) + 1./sqrt(r1),2.);\n}\n\nvec4  render(vec2 p,float t){\n\n    float sgn = sign(p.y);\n    p.y = abs(p.y);\n    \n    float r1 = 100.;\n    float ro = r1;\n    float r2 = 1./(0.1+0.3*abs(0.5+0.5*cos(t/24. *2.*PI) ));//iMouse.x/iResolution.x));\n    float kappa = sqrt(r1/r2);\n    if(abs(kappa*2.-round(kappa*2.))/2.<DEL) r2 = r1 / pow(round(kappa*2.)/2. + DEL ,2.);\n\n    float x1 = 0.;\n    float x2 = x1 + 2.*sqrt(r1*r2);\n\n\n    if(l(p,r1,x1)<0.0)return vec4(1.,sgn*l2(p,r1,x1)) ;\n    if(l(p,r2,x2)<0.0)return vec4(2.,sgn*l2(p,r2,x2));\n    \n    float c1 = 1.;\n    float c2 = 2.;\n    float c3 = 3.;\n    \n    float r3,x3;\n    \n    if(check_in(p,x1,r1,x2,r2))\n        r3 = smol(r1,r2);\n    else\n        r3 = big(r1,r2);\n\n    x3 = fx(vec2(r1,x1),vec2(r2,x2),r3);\n\n    if(l(p,r3,x3)<0.0)return vec4(3.,sgn*l2(p,r3,x3));\n    \n   \n    for(int i=0;i<80;i++){\n \n       if(r3>r1||r3>r2){\n            float rmax,xmax,cmax;\n            float rmin,xmin,cmin;\n            if(r1>r2){rmax=r1;xmax=x1;cmax=c1;rmin=r2;xmin=x2;cmin=c2;}\n                else{ rmax=r2;xmax=x2;cmax=c2;rmin=r1;xmin=x1;cmin=c1;}\n            if(check_in(p,x3,r3,xmin,rmin)){\n                float r3_old=r3;\n                x1 = x3; r1=r3; c1=c3;\n                x2 = xmin; r2=rmin; c2=cmin;\n                \n                r3 = smol(rmin,r3);\n                x3 = fx(vec2(r3_old,x3),vec2(rmin,xmin),r3);\n                c3 = trip(cmin,c3);\n                if(l(p,r3,x3)<0.0)return vec4(c3,sgn*l2(p,r3,x3));\n            }\n   \n            else{\n                if(!check_in(p,x3,r3,xmax,rmax)){\n                    float r3_old=r3;\n                    x1 = x3; r1=r3; c1=c3;\n                    x2 = xmax; r2=rmax; c2=cmax;\n\n                    r3 =big(r3,rmax);\n                    x3 = fx(vec2(r3_old,x3),vec2(rmax,xmax),r3);\n                    \n                    \n                    c3 = trip(cmax,c3);\n                    if(l(p,r3,x3)<0.0)return vec4(c3,sgn*l2(p,r3,x3));\n                }\n                else break;\n\n            }\n                \n       }\n       \n       else{\n           if(check_in(p,x1,r1,x3,r3)){\n           x2 = x3; r2 = r3;\n           c2 = c3;\n           }\n           else{\n               if(check_in(p,x2,r2,x3,r3)){\n               x1 = x3; r1 = r3;\n               c1 = c3;\n               }\n               else break;\n           }\n\n            r3 = 1./pow(1./sqrt(r1) + 1./sqrt(r2),2.);\n            x3 = fx(vec2(r1,x1),vec2(r2,x2),r3);\n            c3 = trip(c1,c2);\n\n            if(l(p,r3,x3)<0.0)return vec4(c3,sgn*l2(p,r3,x3));\n       }\n    }\n    \n    return vec4(0.);\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 p = (fragCoord.xy  - iResolution.xy/2.0)/iResolution.y*1000.;\n   float scale = 1.5*(0.5 + 1.* iMouse.y/iResolution.y);\n   p *= scale;\n\n   vec3 colr;\n   vec3 result = vec3(0.);\n   for(float k=0.;k<3.;k+=1.){\n       vec4 get = render(p,iTime - k/180.);\n       if(get.x==0.)colr = Z;\n       else {\n           colr = col(get.x);\n           vec2 pos = abs(1.-abs(get.y/get.w))*vec2(cos(get.z),sin(get.z));\n           colr*=  3./(3. + pow(length(pos-vec2(-0.5,0.5) ),2.) );\n           colr +=  0.02/(0.1 + length(pos-vec2(-0.5,0.5) ) )*L;\n           colr*=min(abs(get.y/scale*1.5),1.);\n        }\n        result+=colr/(1.+k);\n   }\n   fragColor = vec4(result/1.7,1.0);\n}","name":"Image","description":"","type":"image"}]}