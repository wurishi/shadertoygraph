{"ver":"0.1","info":{"id":"lctyWf","date":"1731296622","viewed":96,"name":"Semiregular 3 4 6 4","username":"Elsio","description":"\"Archimedean tessellations\"\n\nagora faltam 6","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["tiling","extrude","semiregular","archimedean"],"hasliked":0,"parentid":"dssXR7","parentname":"Extruded Semi-regular Tiling"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define H(p) fract(29. * sin(p + p) * sin(p).yx)\n#define h21(p) fract(sin(dot(p, vec2(117.619, 57.623))) * 43758.5453)\n#define rot(a) mat2(cos(a + vec4(0, 1, 3, 0) * pi / 2.))\n#define pi acos(-1.)\n#define tau (2.*pi)\n#define FAR 30.\n\nvec2 s = vec2(sqrt(3.), 1);\nvec2 ID;\n\nfloat opExtrusion(float sdf, float pz, float h) {\n    vec2 w = vec2(sdf, abs(pz) - h);\n    return min(max(w.x, w.y), 0.) + length(max(w, 0.));\n}\n\nfloat sdHex(vec2 p, float r, float sf) {\n    vec3 k = vec3(-sqrt(3.) / 2., .5, 1. / sqrt(3.));\n    p = abs(p);\n    p -= 2. * min(dot(k.xy, p), 0.) * k.xy;\n    r -= sf;\n    return length(p - vec2(clamp(p.x, - k.z * r, k.z * r), r)) * sign(p.y - r) - sf;\n}\n\nfloat sdTri(vec2 p, float r) {\n    const float k = sqrt(3.);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r / k;\n    \n    if(p.x + k * p.y > 0.) p = vec2(p.x - k * p.y, - k * p.x - p.y) / 2.;\n    p.x -= clamp(p.x, - 2. * r, 0.);\n    return - length(p) * sign(p.y);\n}\n\nfloat box(vec2 p, vec2 b, float sf) {\n    vec2 d = abs(p) - b + sf;\n    return min(max(d.x, d.y), 0.) + length(max(d, 0.)) - sf;\n}\n\nfloat hm(vec2 p) {\n    float t = iTime * .3;\n    float r = 34.;\n    vec2  c = tanh(cos(p + t * 2.) * 9.1 - 7.);\n    vec2  s = tanh(sin(p.yx + t * 3.) * 5.);\n    float x = abs(dot(c, s) / r * 8.) / 6.;\n\n    return x * (tanh(cos(iTime * .37) * 9. + 7.3) * .5 + .5);\n}\n\nvec2 polRot(vec2 p, inout float na, float aN) {\n    float a = atan(p.y, p.x);\n    na = mod(floor(a / tau * aN), aN);\n    \n    float ia = (na + .5) / aN;\n    p *= rot(- ia * tau);\n    return p;\n}\n\nvoid hexGrid(vec2 P, out vec2 q, out vec2 id) {\n    vec4 ip = floor(vec4(P / s, P / s - .5)) + .5;\n    vec4 p = P.xyxy - vec4(ip.xy, ip.zw + .5) * s.xyxy;\n    \n    q = p.zw;\n    id = ip.zw + .5;\n    if (dot(p.xy, p.xy) < dot(p.zw, p.zw)){\n        q = p.xy;\n        id = ip.xy;\n    }\n}\n\nfloat piece(vec3 p, float d, float h, vec2 id){\n    \n    float dd2 = opExtrusion(d, p.y - (h / 2. - 1. + h21(id + .051) * .02 - .04 ), h / 2. + 1.);\n    if(h21(id + .061) > .15)\n        if(h21(id + .04) < .5)\n            d = min(d + .05, abs(d + .01) - .01); // pino\n        else\n            d = abs(d + .01) - .01; // buraco\n\n    float dd = opExtrusion(d, p.y - (h / 2. - 1.), h / 2. + 1.);\n    dd += d * .1; // tampa\n\n    return min(dd, dd2);\n}\n\n\nfloat map(vec3 p) {\n    float gridScale = 4. * sqrt(3.) / pi;\n    \n    vec2[] vID = \n            vec2[](\n                vec2(-4,  0), \n                vec2(-2,  6),\n                vec2( 2,  6),\n                vec2( 4,  0), \n                vec2( 2, -6),\n                vec2(-2, -6)\n            );\n\n    vec2[] eID = \n            vec2[](\n                vec2(-3, 3),\n                vec2(0, 6),\n                vec2(3, 3), \n                vec2(3, -3),\n                vec2(0, -6),\n                vec2(-3, -3)\n            );\n\n    \n    vec2 q, q0, id;\n    hexGrid(p.xz * gridScale, q0, id);\n    \n    id *= 12.;\n    \n    vec2[4] mID;\n    float[4] h, dist;\n    \n    float r = sqrt(1. / 7.) / 2.;\n    float ew = .01 * gridScale;\n    float na;\n    \n    // hex\n    q = q0;\n    dist[0] = sdHex(q, r * sqrt(3.) - ew, 0.) / gridScale;\n    mID[0] = id;\n    h[0] = hm(mID[0]);\n    \n    // tri\n    q = (polRot(q * rot(-pi / 6.), na, 6.) - vec2(1. / sqrt(3.), 0)) * rot(pi / 6.);\n    dist[1] = sdTri(q, r - ew) / gridScale;\n    mID[1] = id + vID[int(mod(8. - na, 6.)) % 6 ];\n    h[1] = hm(mID[1]);\n    \n    // square a\n    q = polRot(rot(-pi / 6.) * q0, na, 3.) - vec2(.5, 0);\n    dist[2] = box(q, vec2(r - ew), 0.) / gridScale;\n    mID[2] = id + eID[int(mod(8. - na * 2., 6.)) % 6 ];\n    h[2] = hm(mID[2]);\n    \n    // square b\n    q = polRot(rot(pi / 6.) * q0, na, 3.) - vec2(.5, 0);\n    dist[3] = box(q, vec2(r - ew), 0.) / gridScale;\n    mID[3] = id + eID[int(mod(7. - na * 2., 6.)) % 6 ];\n    h[3] = hm(mID[3]);\n    \n    float d = 1e5;\n    \n    for(int i; i < 4; i++) {\n        float dd = piece(p, dist[i], h[i], mID[i]);\n        if(dd < d) \n            d = dd, ID = mID[i]; \n    }\n    \n    return d;\n}\n\nfloat march(vec3 ro, vec3 rd) {\n    float t, d;\n    for(int i; i < 196; i ++) {\n        d = map(ro + rd * t);\n        \n        if(abs(d) < .001 || t > FAR) break;\n        t += d * .9;\n    }\n    return t;\n}\n\n\nvec3 normal(vec3 p) {\n    vec3 e = vec3(.008, 0, 0);\n    vec3 v = vec3(\n                 map(p - e.xyy),\n                 map(p - e.yxy),\n                 map(p - e.yyx)\n             ) - map(p);\n    return normalize(-v);\n}\n\nfloat AO(vec3 p, vec3 n) {\n    float sca = 1., occ;\n    \n    for(int i = 0; i < 3; i ++) {\n        float hr = float(i + 1) * .15 / 5.;\n        \n        float d = map(p + n * hr);\n        occ += (hr - d) * sca;\n        sca *= .7;\n    }\n    return clamp(1. - occ, 0., 1.);\n}\n\n\n\n\nvoid mainImage(out vec4 o, vec2 u) {\n    vec2 r = iResolution.xy;\n    u = 3. * (u - r / 2.) / r.y;\n    \n    vec3 p = vec3(iTime / 4., .5, cos(iTime * 2.) * .05),\n         D = normalize(vec3(u, 2. + tanh(cos(iTime * .25) * 6. - 4.)));\n    \n    D.xy *= rot(tanh(cos(iTime / 8.) * 5. + 3.4));\n    D.yz *= rot(pi / 2.);\n    \n    float d = march(p, D);\n    \n    float a = iTime;\n    vec3 L = normalize(vec3(1, 1 , 0) - D);\n    \n    if (d < FAR){\n        vec2 id = ID;\n        vec3 p = p + d * D,\n             N = normal(p);\n             \n        o = vec4(H(id), H(id + .5)) * .8\n             * AO(p, N)\n             * (max(0., dot(L, N)) * .5 + .7)\n             + pow(max(0., dot(L, N)), 180.) * .3;\n    }\n    \n    o = mix(o, vec4(o.x + o.y + o.z) / 3., .5) * 1.4;\n    o = pow(o, vec4(.7));\n    o *= 1. - .08 * dot(u, u);\n}","name":"Image","description":"","type":"image"}]}