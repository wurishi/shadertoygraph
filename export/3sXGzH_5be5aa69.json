{"ver":"0.1","info":{"id":"3sXGzH","date":"1544835168","viewed":217,"name":"Hypnotic Eye","username":"raffjones","description":"A hypnotic animated eyeball, created after following Inigo Quilez (@iquilezles) live coding video here: https://www.youtube.com/watch?v=emjuqqyq_qc. I modified the shadows, highlights and added my own animation. My first ever shader.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["noise","eye","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// My first shader :) \n// Based almost completely on the work of Inigo Quilez @iquilezles so I can't really take credit\n// for any of it. I created this after following his live coding video here:\n// https://www.youtube.com/watch?v=emjuqqyq_qc\n// I modified the reflections, shadows and highlights, and added some new animation\n\n// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n// rotation matrix (proportional to sides of right triangle)\nmat2 m = mat2( 0.8, 0.6, -0.6, 0.8 );\n\n// fractional brownian motion\nfloat fbm( vec2 p ) {\n\tfloat f = 0.0;\n\tf += 0.5000 * noise( p );\n\tp *= 2.02;\n\n\t// repeat to add octaves\n\tf += 0.2500 * noise( p );\n\tp *= 2.02;\n\n\tf += 0.1250 * noise( p );\n\tp *= 2.01;\n\n\tf += 0.0625 * noise( p );\n\tp *= 2.04;\n\n\t// Add all of the above up - this normalizes it\n\tf /= 0.9375;\n\n\treturn f;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 q = fragCoord/iResolution.xy;\n\t\n    // Work from the centre\n\tvec2 p = -1.0 + 2.0 * q;\n    \n    // Correct aspect ratio\n\tp.x *= iResolution.x / iResolution.y;\n\t\n\tfloat r = sqrt( dot( p, p) );\n\tfloat a = atan( p.y, p.x );\n\t\n    // Sin of time to get some animation\n\tfloat ss = 0.5 + 0.5 * sin( 1.0 * iTime );\n\tfloat anim = 1.0 + 0.1 * ss * clamp( 1.0 - r, 0.0, 1.0 );\n\tr *= anim;\n\n\tfloat speed = 0.5;\n\tfloat s = sin( iTime * speed );\n\tfloat c = cos( iTime * speed );\n\n\tvec3 col = vec3(1.0);\n\t\n\tfloat f;\n\n\tif ( r < 0.8 ) {\n        \n        // This creates the base colour, using some noise\n\t\tcol = vec3( 0.2, 0.3, 0.4 );\n\t\tfloat f = fbm( 5.0 * p );\n\t\tcol = mix( col, vec3( 0.2, 0.3 + 0.3 * c, 0.4), f );\n\n\t\t// Yellow layer out from centre\n\t\tf = 1.0 - smoothstep( 0.2 + 0.1 * s, 0.3 + clamp(0.0, 0.3, 0.7 * s), r );\n\t\tcol = mix( col, vec3(0.9, 0.6, 0.2), f );\n\n\t\t// angle distortion\n\t\tfloat distortionFreq = 5.0 + c * 5.0 + 20.0 * sin( iTime * 0.001 );\n\t\ta += 0.05 + (0.5 * s) * fbm( p * distortionFreq );\n\n\t\t// Add white fibre noise with polar co-ordinates\n\t\tf = smoothstep( 0.3, 1.0, fbm( vec2( 10.0 * r, 15.0 * a) ) );\n\t\tcol = mix( col, vec3(1.0), f);\n\n\t\t// black areas - reducing 2nd number makes the blacks darker\n\t\tf = smoothstep( 0.5, 0.8 + s * 0.1, fbm( vec2( 8.0 * r, 10.0 * a ) ) );\n\t\tcol *= ( 1.0 - 0.5 * f );\n\t\t\n\t\t// dark edges - offset slightly down and left\n\t\tf = smoothstep( 0.6, 0.9, r - p.x/10.0 - p.y/10.0 );\n\t\tcol *= ( 1.0 - 0.8 * f); // Multiply\n\n\t\t// lighten in opposite corner\n\t\tf = smoothstep( 0.6, 0.9, r + p.x/10.0 + p.y/10.0 );\n\t\tcol += vec3( 0.8, 0.9, 1.0) * f * 0.4; // add\n\n\t\t// pupil\n\t\tf = smoothstep( 0.2 + 0.01 * s, 0.25 + 0.01 * s, r );\n\t\t// f = smoothstep( 0.2, 0.25, r );\n\t\tcol *= f;\n\n\t\t// reflection 1\n\t\tf = 1.0 - smoothstep( 0.0, 0.6, length( p - vec2(0.2, 0.2) ) );\n\t\tcol += vec3( 1.0, 0.9, 0.8 ) * f * 0.3;\n\n\t\t// reflection 2 (small glint in pupil)\n\t\tf = 1.0 - smoothstep( 0.0, 0.075 + 0.025 * s, length( p - vec2(0.1 + 0.01 * s, 0.1 + 0.01 * s) ) );\n\t\tcol += vec3( 1.0 ) * f * 0.3;\n\t\t\n        // Antialias the edges\n\t\tf = smoothstep( 0.75, 0.8, r );\n\t\tcol = mix( col, vec3(1.0), f);\n\t}\n\t\n    // and we're done\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}