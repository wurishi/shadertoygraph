{"ver":"0.1","info":{"id":"cl2yDz","date":"1691670164","viewed":52,"name":"GPT-4: 1","username":"jonasfrey","description":"the chat gpt conversation is in the comments","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["gpt4"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Image Shader\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Sample the buffer texture containing the automata data\n    vec3 color = texture(iChannel0, uv).rgb;\n\n    // Output the color to this pixel\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Buffer Shader\n//#version 330 core\n\n//uniform sampler2D iChannel0; // Previous frame\n//uniform vec3 iResolution;    // Screen resolution\n//uniform vec4 iMouse;         // Mouse interactions\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  // Get current pixel's position\n  vec2 uv = fragCoord.xy / iResolution.xy;\n\n if (iFrame == 0) {\n    // Generate random brightness value for each pixel when frame ID is 0\n    fragColor = vec4(fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453));\n    return;\n  }\n  \n  // The amount to offset by to get neighboring pixels\n  vec2 offset = 1.0 / iResolution.xy;\n\n  // Initialize sum of neighboring pixels\n  float sum = 0.0;\n\n  // Loop through neighboring pixels and sum their brightness\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      vec2 neighborUv = uv + vec2(x, y) * offset;\n      sum += texture(iChannel0, neighborUv).r;\n    }\n  }\n\n  // Take the average of the neighboring pixels\n  float avg = sum / 9.0;\n\n  // If left mouse button is held, draw at the mouse position\n  if (iMouse.w > 0.0) {\n    float dist = distance(uv, iMouse.xy / iResolution.xy);\n    if (dist < 0.01) avg = 1.0;\n  }\n\n  // Output the result to this pixel\n  fragColor = vec4(avg, avg, avg, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}