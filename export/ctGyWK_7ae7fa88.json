{"ver":"0.1","info":{"id":"ctGyWK","date":"1700633616","viewed":1703,"name":"Origami [318]","username":"Xor","description":"I wanted to try out soft shading like paper, but quickly discovered it looks better with color and looks like bounce lighting!","likes":131,"published":1,"flags":0,"usePreview":0,"tags":["shadow","paper","golf","sub512"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    \"Origami\" by @XorDev\n\n    I wanted to try out soft shading like paper,\n    but quickly discovered it looks better with\n    color and looks like bounce lighting!\n\n    X : X.com/XorDev/status/1727206969038213426\n    Twigl: twigl.app?ol=true&ss=-NjpcsfowUETZLMr_Ki6\n\n    <512 char playlist: shadertoy.com/playlist/N3SyzR\n    Thanks to FabriceNeyret2 for many tricks\n*/\n//Rotate trick\n#define R mat2(cos(a/4.+vec4(0,11,33,0)))\n\nvoid mainImage(out vec4 O, vec2 I )\n{\n    //Initialize hue and clear fragcolor\n    vec4 h; O=++h;\n    \n    //Uvs and resolution for scaling\n    vec2 u,r=iResolution.xy;\n    //Alpha, length, angle and iterator/radius\n    for(float A,l,L,a,i=7.;--i>0.;\n            //A = anti-aliased alpha using SDF\n            //Pick layer color\n            O=mix(h=sin(i+a/3.+vec4(1,3,5,0))*.2+.7,O, A=min(--l*r.y*.02,1.))*\n            //Soft shading\n            (l + h + .5*A*u.y/L )/L)\n        \n        //Smoothly rotate a quarter at a time\n        a-=sin(a-=sin(a=iTime*4.+i*.4)),\n        //Scale and center\n        u=(I+I-r)/r.y/.1,\n        //Compute round square SDF\n        L = l = max(length(u -= R*clamp(u*R,-i,i)),1.);\n        \n        \n}\n\n///Original [329]\n/*\n//Rotate trick\n#define R mat2(cos(a/4.+vec4(0,11,33,0)))\n\nvoid mainImage(out vec4 O, vec2 I )\n{\n    //Initialize hue and clear fragcolor\n    vec4 h; O=++h;\n    \n    //Uvs and resolution for scaling\n    vec2 u,r=iResolution.xy;\n    //Alpha, length, angle and iterator/radius\n    for(float A,l,a,i=.6;i>.1;i-=.1)\n        //Smoothly rotate a quarter at a time\n        a-=sin(a-=sin(a=(iTime+i)*4.)),\n        //Scale and center\n        u=(I+I-r)/r.y,\n        //Compute round square SDF\n        l=max(length(u-=R*clamp(u*R,-i,i)),.1),\n        //Compute anti-aliased alpha using SDF\n        A=min((l-.1)*r.y*.2,1.),\n        //Pick layer color\n        O=mix(h=sin(i/.1+a/3.+vec4(1,3,5,0))*.2+.7,O,A)*\n        //Soft shading\n        mix(h/h,h+.5*A*u.y/l,.1/l);\n}\n*/","name":"Image","description":"","type":"image"}]}