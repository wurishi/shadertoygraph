{"ver":"0.1","info":{"id":"ddsyD4","date":"1686834655","viewed":63,"name":"Burst particle test 2","username":"MartinRGB","description":"Burst particle test,my article about this effect:https://martinrgb.github.io/blog/#/Namedrop_Animation","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["burstparticletest"],"hasliked":0,"parentid":"DlySD3","parentname":"Burst particle test"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec3 oldCol = texture(iChannel0,fragCoord.xy/iResolution.xy).xyz;\n    fragColor = vec4(oldCol,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define TWO_PI 6.283185\n// https://www.shadertoy.com/view/XlGcRh\n\n\n// https://www.pcg-random.org/\nuint pcg(uint v)\n{\n\tuint state = v * 747796405u + 2891336453u;\n\tuint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n\treturn (word >> 22u) ^ word;\n}\n\nuvec2 pcg2d(uvec2 v)\n{\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    return v;\n}\n\n// http://www.jcgt.org/published/0009/03/02/\nuvec3 pcg3d(uvec3 v) {\n\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n    v ^= v >> 16u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n    return v;\n}\n\n\nfloat hash11(float p) {\n    return float(pcg(uint(p)))/4294967296.;\n}\n\nvec2 hash21(float p) {\n    return vec2(pcg2d(uvec2(p, 0)))/4294967296.;\n}\n\nvec3 hash33(vec3 p3) {\n    return vec3(pcg3d(uvec3(p3)))/4294967296.;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec3 base_color = vec3(0.2, 0.3, 1.0);\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 center = iResolution.xy*vec2(0.5,0.5);\n\n    float particle = 0.;\n\n    float nv;\n    \n    for(float i = 0.; i < 100.; ++i) {\n       // # the particle speed factor\n        float speedFactor = 2.;\n        float speed = speedFactor*iTime + hash11(i);\n        // # use time generate noise,the parameter is just the seed number\n        vec2 randomVal = hash21(i + 50.*floor(speed));\n        // # from 0 to 1 normalize the noised time,which is animation progress of every particles\n        float progress = fract(speed);\n        \n        \n        // # vec2(cos(translation.y*10.), sin(translation.y*10.)) is the angle direction\n        vec2 randomDir = vec2(cos(randomVal.y*10.), sin(randomVal.y*10.));\n        float randomDist = randomVal.x;\n        float translationRange = 390.;\n        vec2 translation = translationRange * randomDist * randomDir;\n        \n        // # iteration every pixels in a polar coordinate\n        vec2 p = center + progress*translation - gl_FragCoord.xy;\n        // # random rotation\n        p *= rotate2d(translation.x);\n\n        float size = 2.501;\n        float a = abs(p.x) < size ? 50./abs(translation.x) : 0.;\n        float b0 = max(2. - abs(p.y), 0.);\n        \n \n        \n        particle += a * b0;\n    }\n    \n    \n\n    vec3 particles = particle*base_color;\n    particles = pow(particles, vec3(0.4545)) ;\n    vec3 oldCol = texture(iChannel0,fragCoord.xy/iResolution.xy).xyz;\n    particles += 0.9 * oldCol;\n    fragColor = vec4(particles,1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}