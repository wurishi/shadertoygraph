{"ver":"0.1","info":{"id":"tsf3D8","date":"1545998754","viewed":427,"name":"img2shadertoy DCT example","username":"rkibria","description":"Generated using https://github.com/rkibria/img2shadertoy\nImage is compressed to 4x4 DCT values for 8x8 blocks. Values are quantized and stored in 1 byte each. 192x192 is the most I could make work with my laptop's integrated graphics.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["bitmap","compression","generated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Generated with https://github.com/rkibria/img2shadertoy\nconst vec2 bitmap_size = vec2(192, 192);\n#define PI 3.141592653589793\n\nconst int dct_pixels = 8;\nconst int dct_width = 4;\nconst int dct_cols = 24;\nconst int dct_rows = 24;\n\nconst int[] dct = int[] (\n1, 0, 0, 0,\n16842242, 255, 0, 0,\n64775, 65028, 16711681, 0,\n16776210, 516, 65535, 1,\n16646168, 16712194, 65536, 0,\n66456595, 33294584, 0, 1,\n17106916, 16644092, 66306, 65535,\n4278386401, 33423874, 4278320641, 16711936,\n16579064, 16775676, 17039358, 65536,\n4244966893, 50134025, 16907778, 4278255873,\n4278190823, 16712192, 65537, 0,\n4294965999, 65277, 0, 1,\n500, 257, 255, 0,\n130805, 253, 0, 1,\n16646905, 509, 0, 256,\n66035, 16776450, 2, 256,\n260855, 16842501, 0, 0,\n16706332, 16450056, 4278190592, 1,\n17170212, 16711681, 0, 0,\n16580652, 130818, 65536, 0,\n65576, 66048, 257, 0,\n33423656, 4278320640, 255, 0,\n16778004, 33489416, 258, 0,\n16577565, 2, 0, 0,\n\n1, 0, 0, 0,\n16842243, 0, 0, 0,\n5, 0, 0, 0,\n7, 65280, 0, 1,\n64780, 16776966, 257, 256,\n16776470, 65797, 65280, 256,\n16649995, 16715505, 4278322169, 4278386687,\n654322, 4244830188, 16712193, 16777733,\n132600, 65283, 511, 0,\n1116128, 4261413893, 16711680, 0,\n130537, 65536, 255, 0,\n492, 16776965, 65535, 511,\n65262, 4, 1, 254,\n65012, 5, 256, 254,\n16776701, 259, 255, 0,\n1530, 66299, 65535, 0,\n1009, 4278255613, 65280, 255,\n4278316546, 4244701194, 16973825, 16776961,\n4278518045, 33751046, 16777215, 0,\n4278190117, 772, 16776960, 0,\n16711721, 0, 0, 0,\n16386850, 16906758, 766, 65280,\n33358613, 197887, 130302, 16712193,\n16512537, 16776450, 66047, 1,\n\n2, 0, 0, 0,\n65028, 255, 0, 0,\n6, 255, 0, 0,\n7, 0, 0, 0,\n8, 0, 0, 0,\n130570, 130306, 65025, 65281,\n65297, 773, 66046, 16842240,\n33884930, 16907520, 16711680, 65792,\n4278324202, 6, 65280, 0,\n67828440, 131586, 0, 0,\n4294967013, 256, 1, 0,\n65256, 255, 0, 0,\n65006, 0, 256, 255,\n65013, 511, 255, 0,\n65019, 254, 0, 0,\n131070, 65280, 16711681, 256,\n16647675, 66300, 65535, 0,\n4278714094, 260101, 33488897, 16711680,\n4294506512, 4278256644, 4278255359, 257,\n63771, 16842501, 0, 0,\n16711460, 65286, 510, 1,\n4278322207, 4294838272, 16646910, 4278256381,\n131609, 130803, 64510, 16776707,\n65051, 130301, 16711941, 255,\n\n3, 255, 0, 0,\n16842245, 255, 0, 0,\n6, 255, 0, 0,\n8, 0, 0, 0,\n65289, 0, 0, 0,\n9, 0, 0, 0,\n9, 0, 0, 0,\n33293830, 16712956, 4278320896, 0,\n33624036, 65022, 65537, 255,\n33551577, 16974077, 256, 0,\n229, 3, 0, 0,\n65254, 65284, 255, 0,\n65258, 6, 255, 0,\n65007, 5, 256, 0,\n16776696, 261, 255, 0,\n65533, 257, 65280, 0,\n65280, 16711936, 0, 0,\n3315, 196602, 16711680, 0,\n16901372, 4294573832, 4278190592, 1,\n17038866, 16776449, 256, 0,\n281, 65538, 0, 0,\n16645912, 16776202, 130558, 510,\n16777747, 521, 4, 65281,\n16777233, 65286, 65285, 3,\n\n4, 0, 0, 0,\n64774, 0, 0, 0,\n8, 0, 0, 0,\n65289, 255, 0, 0,\n10, 255, 0, 0,\n10, 0, 0, 0,\n10, 0, 0, 0,\n10, 0, 0, 0,\n33299189, 328183, 16842240, 0,\n4277992671, 4294901246, 65280, 65280,\n226, 1, 255, 0,\n65761, 1, 255, 0,\n225, 1, 0, 0,\n130787, 1, 0, 1,\n64746, 65284, 0, 1,\n4278254326, 259, 65536, 0,\n16776448, 257, 0, 0,\n33294845, 511, 256, 0,\n4212194537, 16840712, 33619967, 0,\n4261413393, 16908801, 0, 0,\n16646673, 16711683, 65281, 1,\n14, 0, 0, 0,\n14, 255, 0, 0,\n14, 0, 0, 0,\n\n5, 0, 0, 0,\n16842246, 0, 0, 0,\n8, 0, 0, 0,\n9, 0, 0, 0,\n10, 0, 0, 0,\n11, 0, 0, 0,\n12, 255, 0, 0,\n16649218, 16774414, 4278387195, 16646656,\n133606, 2572, 4294771720, 16711169,\n224, 254, 65281, 0,\n16712159, 254, 1, 0,\n222, 254, 2, 0,\n65758, 16711680, 258, 65280,\n65503, 0, 1, 0,\n130530, 65282, 1, 0,\n4278319597, 4, 0, 0,\n16776446, 65793, 0, 0,\n33034488, 16841733, 130817, 0,\n4278386909, 131326, 65536, 257,\n4244043531, 66050, 65792, 0,\n13, 0, 0, 0,\n14, 0, 0, 0,\n14, 0, 0, 0,\n14, 0, 0, 0,\n\n5, 0, 0, 0,\n33553671, 0, 0, 0,\n9, 0, 0, 0,\n10, 0, 0, 0,\n11, 0, 0, 0,\n12, 0, 0, 0,\n33164038, 260103, 4278321407, 16711936,\n17104871, 16910077, 16843523, 66048,\n16647147, 130552, 255, 0,\n16776682, 506, 0, 0,\n65263, 66293, 16711681, 255,\n16711921, 245, 1, 65535,\n1004, 245, 0, 0,\n231, 251, 0, 0,\n65512, 251, 65536, 0,\n131048, 130558, 65281, 16711680,\n4294899449, 516, 0, 0,\n4244838126, 16646147, 65280, 0,\n4261805023, 33424636, 130818, 255,\n4261149452, 4294835453, 0, 0,\n14, 255, 0, 0,\n14, 255, 0, 0,\n15, 0, 0, 0,\n14, 255, 0, 0,\n\n5, 0, 0, 0,\n33553671, 0, 0, 0,\n9, 0, 0, 0,\n10, 0, 0, 0,\n65292, 0, 0, 0,\n12, 0, 0, 0,\n332792, 4261217282, 16711680, 0,\n261353, 33487622, 16711680, 255,\n4278322411, 265, 4294902272, 65280,\n16775918, 65797, 253, 1,\n16775420, 16776713, 16712186, 257,\n16711434, 1025, 65275, 511,\n4294904830, 16776192, 131069, 0,\n327918, 512, 16711425, 511,\n16711924, 16711932, 0, 0,\n498, 251, 257, 255,\n4278516466, 16907265, 16776961, 0,\n4278452988, 4278259185, 16712702, 16842243,\n194311, 194543, 196089, 66046,\n17, 255, 0, 0,\n16, 255, 0, 0,\n15, 0, 0, 0,\n15, 0, 0, 0,\n271, 0, 0, 0,\n\n5, 1, 0, 0,\n33553671, 0, 0, 0,\n9, 0, 0, 0,\n10, 0, 0, 0,\n65291, 0, 0, 0,\n12, 0, 0, 0,\n50464243, 16909058, 256, 256,\n4278323170, 4278386686, 130307, 16711680,\n65252, 16712705, 131836, 16776704,\n229, 500, 64768, 4,\n64493, 130805, 65282, 2,\n4294901241, 64259, 0, 65537,\n4278388719, 16582152, 16908031, 65792,\n16775674, 65530, 65790, 255,\n510, 253, 255, 0,\n16712190, 66045, 0, 0,\n1014, 65534, 0, 0,\n50262022, 513, 0, 0,\n18, 255, 0, 0,\n18, 0, 0, 0,\n273, 0, 0, 0,\n272, 0, 0, 0,\n15, 0, 0, 0,\n15, 0, 0, 0,\n\n3, 0, 0, 0,\n33553670, 0, 0, 0,\n9, 0, 0, 0,\n10, 0, 0, 0,\n65291, 0, 0, 0,\n50070283, 0, 65280, 0,\n503, 251, 257, 0,\n50005488, 4278386938, 65280, 0,\n130791, 769, 66557, 510,\n65004, 16712443, 251, 65024,\n65520, 251, 65534, 259,\n16777965, 4278256374, 16712447, 0,\n194801, 4278321142, 65280, 65535,\n4278254592, 253, 65281, 255,\n262, 251, 257, 0,\n515, 16777214, 16711680, 0,\n16844027, 254, 0, 0,\n50524417, 16776197, 766, 65281,\n16776722, 66305, 16776959, 257,\n19, 255, 0, 0,\n274, 255, 0, 0,\n273, 255, 0, 0,\n16, 0, 0, 0,\n271, 0, 0, 0,\n\n131071, 16711936, 131071, 260,\n16776454, 0, 0, 0,\n9, 0, 0, 0,\n65290, 0, 0, 0,\n11, 0, 0, 0,\n50135818, 0, 0, 0,\n16710919, 763, 255, 0,\n67046139, 16841467, 16711427, 0,\n17103848, 4294836990, 16907775, 16711937,\n65266, 65531, 257, 66047,\n260858, 16712190, 66301, 16776961,\n4278191621, 16712188, 16776956, 16842751,\n64263, 16712186, 65280, 255,\n16776210, 65272, 0, 255,\n66067, 65532, 0, 0,\n16713227, 254, 0, 0,\n66558, 65280, 0, 0,\n33552385, 130560, 131071, 255,\n16775694, 2, 16843006, 65280,\n21, 255, 0, 0,\n19, 255, 0, 0,\n18, 0, 0, 0,\n17, 0, 0, 0,\n272, 0, 0, 0,\n\n761, 130813, 65535, 65280,\n16710662, 256, 0, 0,\n8, 0, 0, 0,\n65289, 0, 0, 0,\n10, 0, 0, 0,\n33423627, 255, 1, 0,\n64773, 64517, 512, 0,\n16256004, 2046, 16776703, 1,\n16709113, 33552881, 16842495, 16908542,\n16912626, 33620975, 33486092, 4294901510,\n4294440445, 16775662, 198149, 66306,\n4278253326, 4278190838, 512, 16711681,\n4278254621, 130810, 65534, 255,\n288, 255, 0, 0,\n16712728, 0, 0, 0,\n16647439, 16711936, 255, 0,\n66304, 65534, 0, 0,\n4261412353, 16908797, 16776706, 0,\n17105160, 4294902017, 196608, 16842240,\n4294901524, 16843009, 0, 0,\n276, 0, 0, 0,\n19, 0, 0, 0,\n274, 0, 0, 0,\n17, 0, 0, 0,\n\n131837, 16711680, 0, 0,\n16776455, 0, 0, 0,\n8, 0, 0, 0,\n9, 0, 0, 0,\n33423625, 130307, 4278190591, 0,\n65290, 0, 0, 0,\n16976882, 4278059272, 1, 65280,\n258548, 16645646, 16712703, 256,\n4294898207, 16844793, 16711932, 0,\n33490210, 4278385657, 251, 255,\n196625, 4278257669, 4294770690, 33554430,\n16711197, 64257, 767, 65535,\n4278256155, 16776971, 508, 65282,\n65307, 773, 16776704, 65792,\n536, 256, 1, 0,\n4278256910, 255, 0, 0,\n33489924, 254, 0, 0,\n4260953605, 129543, 66046, 0,\n457726, 198149, 3, 0,\n4277992466, 256, 65280, 0,\n19, 255, 0, 0,\n19, 0, 0, 0,\n19, 0, 0, 0,\n18, 0, 0, 0,\n\n17040126, 0, 0, 0,\n16776455, 0, 0, 0,\n8, 0, 0, 0,\n9, 0, 0, 0,\n197378, 33489405, 4294836485, 4278255367,\n65286, 65534, 260, 261,\n67502827, 4278256128, 16712702, 16842497,\n458716, 33489414, 4278255360, 130814,\n4261141776, 4294770444, 66814, 65283,\n70680, 16580617, 50200573, 65794,\n4277863180, 260875, 4294902524, 16776705,\n68090, 16712726, 16710659, 65024,\n195573, 65801, 513, 1,\n16709385, 130315, 65789, 1,\n65042, 16712973, 65788, 65024,\n1039, 513, 255, 0,\n33424647, 255, 256, 0,\n4261150974, 4294903546, 33489662, 65281,\n49808391, 64255, 64763, 65534,\n4277530381, 4278256643, 66049, 0,\n277, 255, 0, 0,\n276, 0, 0, 0,\n19, 0, 0, 0,\n18, 0, 0, 0,\n\n17040382, 0, 0, 0,\n33553670, 0, 0, 0,\n8, 0, 0, 0,\n9, 0, 0, 0,\n264, 16712191, 255, 0,\n49940485, 16907523, 4278255616, 0,\n16842222, 16580608, 4294903803, 66046,\n17039592, 16842235, 33551869, 4278320893,\n1502703, 16972555, 16579841, 33489408,\n16651279, 16777731, 33423361, 252,\n135662, 260, 2, 4278190338,\n66649066, 4278386180, 4278452477, 16777215,\n390373, 16777736, 33293571, 4278190338,\n130289, 3, 16776706, 65535,\n17104120, 5, 1, 0,\n16776197, 16711942, 256, 0,\n16582149, 3, 255, 0,\n17038842, 33487372, 33424125, 4278190336,\n4294706438, 16908791, 4294769155, 770,\n4294505231, 33487610, 16843009, 0,\n21, 0, 0, 0,\n20, 0, 0, 0,\n275, 0, 0, 0,\n19, 0, 0, 0,\n\n17105662, 0, 0, 0,\n16776454, 0, 0, 0,\n264, 0, 0, 0,\n65288, 0, 0, 0,\n9, 0, 0, 0,\n16191743, 4278386432, 33488897, 0,\n1513, 0, 510, 65281,\n226, 16712192, 16711680, 258,\n4278515180, 4278320892, 130560, 0,\n4294641156, 16712199, 514, 256,\n133358, 511, 0, 0,\n4278318831, 16775938, 16581885, 4278190845,\n16712699, 65286, 195318, 252,\n16776951, 66303, 257, 0,\n4278255352, 1014, 256, 65025,\n130048, 246, 1022, 259,\n16647170, 65529, 249, 509,\n1016, 65531, 65278, 65534,\n66644746, 0, 16711680, 0,\n23, 0, 0, 0,\n278, 0, 0, 0,\n21, 0, 0, 0,\n276, 0, 0, 0,\n19, 0, 0, 0,\n\n17105918, 1, 0, 0,\n64774, 0, 0, 0,\n8, 0, 0, 0,\n8, 0, 0, 0,\n65289, 0, 0, 0,\n66782471, 33424637, 16712191, 511,\n16712945, 66288, 16776704, 16711937,\n130542, 65519, 65283, 255,\n4278253310, 130800, 258, 255,\n16648704, 16776700, 65281, 0,\n1262, 16711682, 16712192, 255,\n130540, 1021, 65279, 16711682,\n195318, 503, 65281, 1,\n16776196, 130551, 766, 0,\n65289, 0, 16776960, 0,\n16777222, 65281, 0, 0,\n771, 1, 0, 0,\n16778235, 256, 0, 0,\n32959500, 255, 0, 0,\n23, 0, 0, 0,\n279, 0, 0, 0,\n277, 0, 0, 0,\n277, 0, 0, 0,\n19, 0, 0, 0,\n\n328701, 0, 0, 0,\n33553670, 0, 0, 0,\n65799, 0, 0, 0,\n7, 0, 0, 0,\n65288, 0, 0, 0,\n9, 0, 0, 0,\n17039361, 16776192, 16711681, 0,\n16775693, 65538, 254, 511,\n16646165, 2, 65535, 65280,\n16777743, 16712957, 510, 0,\n66054, 66541, 16777215, 0,\n16712957, 196330, 4278320641, 0,\n65023, 64506, 263, 66045,\n64007, 66556, 16712708, 65280,\n268, 16711935, 65280, 0,\n16712200, 509, 0, 0,\n66307, 254, 1, 0,\n33424125, 65535, 0, 0,\n4260621838, 16842750, 256, 0,\n24, 0, 0, 0,\n23, 0, 0, 0,\n278, 255, 0, 0,\n21, 255, 0, 0,\n20, 0, 0, 0,\n\n328445, 65536, 0, 0,\n33553669, 0, 0, 0,\n6, 0, 0, 0,\n6, 1, 0, 0,\n65288, 0, 0, 0,\n9, 0, 0, 0,\n16712966, 4278256381, 130816, 0,\n64006, 65281, 255, 0,\n16646159, 514, 0, 0,\n65293, 65280, 0, 65280,\n64020, 4, 65538, 0,\n791, 2, 1, 255,\n16711956, 16711684, 0, 255,\n784, 1, 1, 0,\n65293, 0, 0, 0,\n16711949, 511, 0, 0,\n16712456, 65534, 0, 0,\n4278322429, 50135807, 4278386433, 511,\n4277926677, 4278058237, 16776960, 0,\n24, 0, 0, 0,\n24, 0, 0, 0,\n23, 0, 0, 0,\n278, 255, 0, 0,\n21, 255, 0, 0,\n\n328700, 1, 0, 0,\n64773, 0, 0, 0,\n6, 0, 0, 0,\n6, 0, 0, 0,\n65287, 0, 0, 0,\n65289, 0, 0, 0,\n65290, 0, 0, 0,\n131335, 131069, 16776960, 0,\n16776716, 255, 0, 0,\n13, 255, 1, 65280,\n4278318869, 510, 0, 0,\n68121, 65535, 65280, 0,\n16, 1, 1, 0,\n16711953, 255, 0, 0,\n65551, 255, 0, 0,\n17, 255, 511, 0,\n16779016, 16646148, 130815, 16712447,\n193548, 392693, 4278387713, 4294902016,\n24, 0, 0, 0,\n24, 0, 0, 0,\n25, 0, 0, 0,\n24, 255, 0, 0,\n24, 255, 0, 0,\n23, 255, 0, 0,\n\n263164, 1, 0, 0,\n16776196, 0, 0, 0,\n6, 1, 0, 0,\n65286, 1, 0, 0,\n65287, 1, 0, 0,\n8, 1, 0, 0,\n65290, 0, 0, 0,\n10, 0, 0, 0,\n65291, 65281, 65280, 0,\n65039, 258, 511, 0,\n129302, 65026, 16711680, 1,\n16712732, 1025, 66046, 1,\n532, 253, 255, 1,\n274, 65026, 254, 1,\n15, 261, 65024, 510,\n65549, 66557, 16712451, 16776961,\n64530, 65020, 65277, 131071,\n65303, 0, 0, 0,\n24, 0, 0, 0,\n24, 0, 0, 0,\n24, 0, 0, 0,\n16776985, 0, 0, 0,\n25, 0, 0, 0,\n281, 0, 0, 0,\n\n263164, 1, 0, 0,\n64771, 0, 0, 0,\n5, 0, 0, 0,\n5, 1, 0, 0,\n5, 1, 0, 0,\n65286, 1, 0, 0,\n65288, 1, 0, 0,\n9, 0, 0, 0,\n65290, 0, 0, 0,\n65292, 0, 0, 0,\n13, 0, 65281, 2,\n268, 0, 3, 2,\n13, 510, 257, 2,\n65294, 254, 255, 255,\n16, 0, 0, 0,\n65298, 1, 0, 0,\n65298, 1, 0, 0,\n65045, 1, 0, 0,\n24, 0, 0, 0,\n25, 0, 0, 0,\n25, 255, 0, 0,\n26, 255, 0, 0,\n26, 0, 0, 0,\n25, 0, 0, 0,\n\n263163, 0, 0, 0,\n16776451, 0, 0, 0,\n4, 0, 0, 0,\n4, 0, 0, 0,\n5, 0, 0, 0,\n5, 0, 0, 0,\n65286, 1, 0, 0,\n7, 1, 0, 0,\n8, 1, 0, 0,\n65290, 1, 0, 0,\n65292, 1, 0, 0,\n13, 1, 0, 0,\n13, 1, 0, 0,\n14, 1, 0, 0,\n14, 1, 0, 0,\n65295, 1, 0, 0,\n16, 1, 0, 0,\n65298, 2, 0, 0,\n65301, 1, 0, 0,\n65303, 2, 0, 0,\n65305, 1, 0, 0,\n26, 0, 0, 0,\n27, 0, 0, 0,\n27, 0, 0, 0,\n\n197626, 0, 0, 0,\n16776450, 0, 0, 0,\n3, 0, 0, 0,\n3, 0, 0, 0,\n4, 0, 0, 0,\n4, 0, 0, 0,\n4, 1, 0, 0,\n65284, 1, 0, 0,\n65287, 1, 0, 0,\n65289, 0, 0, 0,\n10, 0, 0, 0,\n11, 0, 0, 0,\n12, 1, 0, 0,\n12, 1, 0, 0,\n13, 0, 0, 0,\n13, 1, 0, 0,\n65295, 1, 0, 0,\n15, 1, 0, 0,\n65297, 1, 0, 0,\n65299, 1, 0, 0,\n65303, 1, 0, 0,\n65306, 0, 0, 0,\n27, 0, 0, 0,\n28, 0, 0, 0\n\n);\n\nconst int[] quant_mtx = int[] (\n0x100a0b10,\n0x130e0c0c,\n0x18100d0e,\n0x1d16110e\n);\n\nfloat get_dct_val(in int start, in int x, in int y) {\n    if(x < dct_width && y < dct_width) {\n        int int_block = dct[start + y];\n        int quant_val = (int_block >> (x << 3)) & 0xff;\n        if(quant_val > 127)\n            quant_val = -256 + quant_val;\n        float quant_factor = float((quant_mtx[y] >> (x << 3)) & 0xff);\n        float unquant_val = float(quant_val) * quant_factor;\n        return unquant_val;\n    }\n    else\n        return 0.;\n}\n\nfloat c_factor(in int i) {\n    return (i == 0) ? (1.0 / sqrt(2.0)) : 1.0;\n}\n\nfloat cos_term(in int inner, in int outer) {\n    return cos(PI * float(inner) * (2.0 * float(outer) + 1.0) / (2.0 * float(dct_pixels)));\n}\n\nfloat get_idct(in int start, in int i, in int j) {\n    float NN = float(dct_pixels);\n    float r = 0.;\n\n    for(int x = 0; x < dct_pixels; ++x) {\n        for(int y = 0; y < dct_pixels; ++y) {\n            r += c_factor(x) * c_factor(y) * get_dct_val(start, x, y) * cos_term(x, i) * cos_term(y, j);\n        }\n    }\n\n    r *= 2. / NN;\n    return r;\n}\n\nvec4 getBitmapColor(in vec2 uv) {\n    vec4 col = vec4(0);\n    ivec2 fetch_pos = ivec2(uv * bitmap_size);\n    if(fetch_pos.x >= 0 && fetch_pos.y >= 0\n        && fetch_pos.x < int(bitmap_size.x) && fetch_pos.y < int(bitmap_size.y)) {\n        int dct_row = fetch_pos.y / dct_pixels;\n        int dct_col = fetch_pos.x / dct_pixels;\n\n        int dct_values_per_row = dct_width * dct_cols;\n        int dct_block_index = dct_row * dct_values_per_row + dct_col * dct_width;\n\n        int pixel_x = fetch_pos.x % dct_pixels;\n        int pixel_y = fetch_pos.y % dct_pixels;\n\n        float idct = get_idct(dct_block_index, pixel_x, pixel_y);\n        col = vec4((idct + 128.)/ 255.);\n    }\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.y;\n    fragColor = getBitmapColor(uv);\n}\n\n","name":"Image","description":"","type":"image"}]}