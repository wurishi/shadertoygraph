{"ver":"0.1","info":{"id":"3scXWn","date":"1571734434","viewed":97,"name":"2d clumsy Water effect","username":"clumsyrthanu","description":"name says it all","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","water","effect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.14159;\n\nconst float flowSpeedFactor = 1.0;\nconst float amplitudeFactor = 3.0;\nconst float numberOfWaves = 20.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pi = 3.14159;\n    \n    // Normalized pixel coordinates (from 0 to 1) aka texCoords\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // corrected aspect ratio (not needed for the texture i've used)\n    //uv.x *= iResolution.x / iResolution.y;\n    \n    // one pixel in tex coord units, along the x axis\n    float one_px_tex = 1.0 / iResolution.x;\n    \n    // distort the uv.x based on a sine of the current fragments uv.y\n    uv.x += sin(uv.y * numberOfWaves * pi + iTime * flowSpeedFactor) * one_px_tex * amplitudeFactor;\n    \n    vec4 color = texture(iChannel0, uv);\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}