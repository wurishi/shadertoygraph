{"ver":"0.1","info":{"id":"tdjGRh","date":"1548177636","viewed":192,"name":"Colorspaces RGB HSV","username":"Chickenkiller","description":"Just playing with colorspace transformations and selective filters.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["rgb","hsv","colorspaces"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 1.0\n//#define STEPS 5.0\n#define GREEN 0.355\n\n\n\nvec3 hsv(vec3 rgb) //convert rgb to hsv color space\n{\n\tvec3 hsv;\n\tfloat c_max = max(rgb.r,rgb.g);\n\tc_max = max(c_max,rgb.b);\n\tfloat c_min = min(rgb.r,rgb.g);\n\tc_min = min(c_min,rgb.b);\n\t\n\tif (c_max==c_min) {hsv=vec3(6.0,0.0,c_max);}\n\telse if (c_max==rgb.r) {hsv=vec3(0.0+(rgb.g-rgb.b)/(c_max-c_min),(c_max-c_min)/c_max,c_max);}\n\telse if (c_max==rgb.g) {hsv=vec3(2.0+(rgb.b-rgb.r)/(c_max-c_min),(c_max-c_min)/c_max,c_max);}\t\n\telse if (c_max==rgb.b) {hsv=vec3(4.0+(rgb.r-rgb.g)/(c_max-c_min),(c_max-c_min)/c_max,c_max);}\n\tif(hsv.x < 0.0) hsv.x+=6.0;\n\thsv.x/=6.0;\n\thsv = clamp(hsv,0.0,1.0);\n\treturn hsv;\n}\n\nvec3 rgb(vec3 hsv) //convert hsv to rgb color space\n{\n\tvec3 rgb;\n\tfloat h=hsv.x * 6.0;\n\tfloat c = hsv.y*hsv.z;\n\tfloat x = c*(1.0-abs(mod(h,2.0)-1.0));\n\tif (h <=1.0) rgb = vec3(c,x,0.0);\n\telse if (h <=2.0) rgb = vec3(x,c,0.0);\n\telse if (h <=3.0) rgb = vec3(0.0,c,x); \n\telse if (h <=4.0) rgb = vec3(0.0,x,c); \n\telse if (h <=5.0) rgb = vec3(x,0.0,c); \n\telse if (h <=6.0) rgb = vec3(c,0.0,x);\n\trgb+=vec3(hsv.z-hsv.y);\n\treturn rgb;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) //play with color spaces\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\tvec3 c = texture(iChannel1,uv).rgb;\n   \tvec3 d = texture(iChannel2,uv).rgb;\n\t\n\tc=hsv(c);\n    if ((c.x > GREEN)&&(c.x < GREEN+0.01)) c=hsv(d);\n\n\tvec3 h = floor((c*STEPS+vec3(0.5)))/STEPS; //reduce to discrete STEPS\n\tc= rgb(h);\n    \n    \n    // Output to screen\n    fragColor = vec4(c,1.0);\n}\n","name":"Image","description":"","type":"image"}]}