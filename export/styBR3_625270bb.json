{"ver":"0.1","info":{"id":"styBR3","date":"1664907152","viewed":114,"name":"Outpainting experiment #3","username":"sh1boot","description":"Yet another attempt at filling in holes in data.\n\nThe frame rate isn't as bad as it looks.  It just takes a few iterations to do the JFA steps.","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["inpainting","jumpflood","outpainting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 origin = tex_coord(fragCoord, iResolution.xy);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n#if STEP_INTERVAL > 1\n    vec2 nearest = texture(iChannel0, uv).xy;\n    float lod = 0.0;\n#else\n    vec2 nearest = texture(iChannel0, uv).zw;\n    float lod = log2(distance(nearest, origin)) * 1.4 + 12.5;\n#endif\n\n    vec4 tex = textureLod(iChannel1, nearest, lod);\n    if (uv.x < 0.0) tex = vec4(0.5);\n    col += (tex.rgb - col.rgb) * tex.a;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"bool IsVisible(vec2 uv) {\n    uv -= 0.5;\n    float t = iTime * 0.7;\n    vec2 c0 = vec2(cos(t), sin(t)) * 0.2;\n    t = (t + 1.0) * 0.65;\n    vec2 c1 = vec2(cos(t), sin(t)) * 0.27;\n    t = (t + 1.0) * 0.65;\n    if (distance(uv, c0) < 0.07) return false;\n    if (distance(uv, c1) < 0.12) return false;\n\n    uv = vec2(dot(uv, vec2(cos(t), sin(t))),\n              dot(uv, vec2(-sin(t), cos(t))));\n    if (uv.y > 0.3) return false;\n    return true;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 tc = tex_coord(fragCoord, iResolution.xy);\n\n    vec4 r = texture(iChannel0, uv);\n\n    if (iFrame % STEP_INTERVAL >= 1) {\n        fragColor = r;\n        return;\n    }\n\n    int stage = (iFrame / STEP_INTERVAL) % NUM_STAGES;\n    float step_size = exp2(float(NUM_STAGES - 1 - stage));\n    vec2 scale = vec2(step_size) * tex_step(iResolution.xy);\n\n    for (int y = -1; y <= 1; ++y) {\n        for (int x = -1; x <= 1; ++x) {\n            vec2 nuv = uv + vec2(x, y) * scale;\n            vec4 neighbour = texture(iChannel0, nuv);\n            if (distance(neighbour.xy, tc) < distance(r.xy, tc)) {\n                r.xy = neighbour.xy;\n            }\n        }\n    }\n    if (stage >= NUM_STAGES - 1) {\n        r.zw = r.xy;\n        r.xy = vec2(-8.0);\n        if (IsVisible(tc)) {\n            r.xy = tc;\n        }\n    }\n    fragColor = r;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUM_STAGES 9\n#define STEP_INTERVAL 1\n\nvec2 tex_coord(vec2 fragCoord, vec2 resolution) {\n    return (fragCoord - resolution * 0.5) / resolution.xx + 0.5;\n}\nvec2 tex_step(vec2 resolution) {\n    return 1.0 / resolution.xx;\n}","name":"Common","description":"","type":"common"}]}