{"ver":"0.1","info":{"id":"7dyXD3","date":"1635391330","viewed":126,"name":"Jeff's carpet","username":"nkaretnikov","description":"Dedicated to my friend Jeff and his carpet.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","simple","carpet","jeff"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Public domain.\n\n#define S(a, b, x) smoothstep(a, b, x)\n\nvec4 Band(vec4 col, float dist, float start, float end, float blur)\n{\n    float step1 = S(start - blur, start + blur, dist);\n    float step2 = S(end   + blur, end   - blur, dist);\n\n    col.a = step1 * step2;  // intersection\n    \n    return col;\n}\n\nvec4 Rect(vec4 col, vec2 uv, float left, float right, float bot, float top,\n          float blur)\n{\n    vec4 band1 = Band(col, uv.x, left, right, blur);\n    vec4 band2 = Band(col, uv.y, bot,  top,   blur);\n\n    col.a = band1.a * band2.a;  // intersection\n    \n    return col;\n}\n\nvec4 Carpet(vec4 col, vec4 figCol, vec2 uv, float blur)\n{\n    vec4 square  = Rect(figCol, uv, -.2, .2, -.2, .2, blur);\n    \n    vec4 hLineM  = Band(figCol, uv.y, -.073, .073, blur);\n    \n    vec4 vLineTR = Rect(figCol, uv, .35,   .5,  .2,   .5, blur);\n    vec4 vLineTL = Rect(figCol, uv, -.5, -.35,  .2,   .5, blur);\n    vec4 vLineBL = Rect(figCol, uv, -.5, -.35, -.5,  -.2, blur); \n    vec4 vLineBR = Rect(figCol, uv, .35,   .5, -.5,  -.2, blur); \n    vec4 hLineT  = Rect(figCol, uv, -.4,   .4, .35,   .5, blur);\n    vec4 hLineB  = Rect(figCol, uv, -.4,   .4, -.5, -.35, blur);\n    \n    vec4 hLineTR = Rect(figCol, uv, .4,   1.5,   .2, .35, blur);\n    vec4 hLineBR = Rect(figCol, uv, .4,   1.5, -.35, -.2, blur);\n    vec4 hLineTL = Rect(figCol, uv, -1.5, -.4,   .2, .35, blur);\n    vec4 hLineBL = Rect(figCol, uv, -1.5, -.4, -.35, -.2, blur);\n    \n    col = mix(col, square,  square.a);\n    col = mix(col, hLineM,  hLineM.a);\n    col = mix(col, vLineTR, vLineTR.a);\n    col = mix(col, vLineTL, vLineTL.a);\n    col = mix(col, vLineBL, vLineBL.a);\n    col = mix(col, vLineBR, vLineBR.a);\n    col = mix(col, hLineT,  hLineT.a);\n    col = mix(col, hLineB,  hLineB.a);\n    col = mix(col, hLineTR, hLineTR.a);\n    col = mix(col, hLineBR, hLineBR.a);\n    col = mix(col, hLineTL, hLineTL.a);\n    col = mix(col, hLineBL, hLineBL.a);\n\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Move (0, 0) to the center of the screen.\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;  \n\n    // Draw the image.\n    vec4 col = vec4(.95, .87, .77, 1.);\n    \n    vec4 figCol = vec4(.37, .33, .3, 1.);\n    float blur  = .001;\n    \n    vec2 pq = uv * 4.;  // scaled coords\n    \n    // Middle.\n    for (int i = -10; i < 10; i += 2) {\n        float fi = float(i) * 1. + mod(iTime * 2., 2.);\n\n        vec4 c = Carpet(col, figCol, vec2(pq.x + fi, pq.y), blur);\n\n        col = c;    \n    }\n    \n    // Top.\n    for (int i = -10; i < 10; i += 2) {\n        float fi = float(i) * 1. - mod(iTime * 2., 2.);\n\n        vec4 ct = Carpet(col, figCol, vec2(pq.x + fi + 3., pq.y + 1.3), blur);\n\n        col = ct;\n    }\n    \n    // Bottom.\n    for (int i = -10; i < 10; i += 2) {\n        float fi = float(i) * 1. - mod(iTime * 2., 2.);\n\n        vec4 cb = Carpet(col, figCol, vec2(pq.x + fi + 3., pq.y - 1.3), blur);\n\n        col = cb;\n    }    \n    \n    // Return the color of this pixel.\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}