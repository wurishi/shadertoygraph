{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"float resMult = 10.0;\nfloat wobbleMult = 0.5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv *= resMult;\n    uv -= 0.5 * resMult;\n    uv.x *= iResolution.x/iResolution.y;\n    //uv += vec2(iTime,iTime);\n    vec2 uvd = uv;\n   float rTime = iTime * 15.0;\n    uvd.x +=cos(uvd.y + rTime)*wobbleMult;\n    uvd.y +=cos(uvd.x + rTime)*wobbleMult;\n    uvd.x +=cos(uvd.y + rTime*2.0)*wobbleMult*0.7;\n    uvd.y +=cos(uvd.x + rTime*2.0)*wobbleMult*0.7;\n    uvd.x +=cos(uvd.y + rTime*1.5)*wobbleMult*0.25;\n    uvd.y +=cos(uvd.x + rTime*1.5)*wobbleMult*0.25;\n    uv.x = uvd.x;\n    uv.y = uvd.y;\n    \n    uv = uv - floor(uv);\n    \n    \n    vec3 col = vec3(0.0,0.0,0.0);\n    \n    if ((uv.x >= 0.0 && uv.x < 0.05) || (uv.y >= 0.0 && uv.y < 0.05)){\n        col = vec3(0,0,0);\n    }else{\n        col = vec3(0,0,abs((uv.x - 0.5) * 2.0)+abs((uv.y - 0.5) * 2.0));\n    }\n    \n    \n\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":"float cbase = 16.35;\nfloat nps = 60.0;\nfloat oct = 0.0;\nfloat key = 0.0;\nfloat tone = 0.0;\nfloat vol = 0.25;\nfloat sound = 0.0;\nfloat square(float tone, float time){\n    float ntime = time * cbase * tone;\n    float ptime = (ntime - floor(ntime));\n    float sound = 1.0;\n    if (ptime > 0.5){\n        sound = 0.0;\n    }\n    return sound;\n}\nfloat saw(float tone, float time){\n    float ntime = time * cbase * tone;\n    float ptime = (ntime - floor(ntime));\n    float sound = ptime;\n    return sound;\n}\nfloat sine(float tone, float time){\n    float ntime = time * cbase * tone;\n    float ptime = (ntime - floor(ntime)) * 2.0;\n    float sound = sin(ptime * 3.14);\n    return sound;\n}\nfloat note(float key, float oct){\n    float interval = 1.0 / 12.0;\n    tone = pow(2.0,0.0 + interval * (key + oct * 8.0));\n    return tone;\n}\nvec2 mainSound( int samp, float time)\n{\n    float grah = (12.0 / nps);\n    tone = note(floor((time - floor(time / grah) * grah) * nps) + 5.0, 8.0);\n    float beep = smoothstep(1.0,0.0,(time * nps)-floor(time * nps));\n    //float beep = 1.0;\n    sound = sine(tone, time) * saw(tone, time) * 2.0;\n    vec2 noise = vec2(vol * sound * beep);\n    return noise;\n}","name":"Sound","description":"","type":"sound"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":true,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4XtyzS","date":"1735271515","viewed":70,"name":"Wobbly Grid Thing + Alarm","username":"Radioisotoast","description":"Just starting out","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["noise","beginner","pain","blue","mediocre"],"hasliked":0,"parentid":"","parentname":""}}