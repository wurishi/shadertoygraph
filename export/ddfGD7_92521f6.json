{"ver":"0.1","info":{"id":"ddfGD7","date":"1666217999","viewed":82,"name":"45-90-45 wedge 2d sdf","username":"jt","description":"Just a very simple 2d wedge sdf / isosceles right triangle sdf. One variant made by combining two boxes, the other based on iq's [url=https://www.shadertoy.com/view/MldcD7]Isosceles Triangle - distance 2D[/url].\n\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","triangle","euclidean","right","isosceles","exact","wedge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/ddfGD7 45-90-45 wedge 2d sdf by jt\n\n// Just a very simple 2d wedge sdf / isosceles right triangle sdf.\n// One variant made by combining two boxes,\n// the other based on\n// https://www.shadertoy.com/view/MldcD7 Isosceles Triangle - distance 2D by iq\n\n// tags: 2d, sdf, triangle, euclidean, right, isosceles, exact, wedge\n\n// MIT License, as in https://www.shadertoy.com/terms\n\n/*\n\nCopyright (c) 2022 Jakob Thomsen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox( in vec2 p)\n{\n    vec2 q = abs(p) - 1.0;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\nfloat sdWedge0(vec2 p)\n{\n    mat2 R = mat2(vec2(0.5,0.5), vec2(-0.5,0.5));\n    float a = sdBox(p);\n    float b = sqrt(2.0)*sdBox(R*p+vec2(0,1)); // rotate, scale, shift box\n    return max(a, b);\n}\n\nfloat sdWedge1(vec2 p)\n{\n    float a = sdBox(p);\n    p = vec2(-p.x+p.y,p.x+p.y+2.)*.5; // rotate, scale, shift\n    float b = sqrt(2.0)*sdBox(p);\n    return max(a, b);\n}\n\n// variant based on https://www.shadertoy.com/view/MldcD7 Isosceles Triangle by iq\nfloat sdWedge2(vec2 p)\n{\n    p += 1.0;\n    p /= 2.0;\n    p = vec2(p.x-p.y,p.x+p.y);\n    p.x = abs(p.x);\n    vec2 a = p - clamp((p.x+p.y)/2.0, 0.0, 1.0);\n    vec2 b = p - vec2(clamp(p.x, 0.0, 1.0), 1.0);\n    vec2 d = min(vec2(dot(a,a),-(p.x-p.y)),\n                 vec2(dot(b,b),-(p.y-1.0)));\n    return -sqrt(d.x)*sign(d.y)*sqrt(2.0);\n}\n\nfloat sdRightWedge( in vec2 p, float s ) // simplified version by iq\n{\n    p = (p.x>p.y)?p.xy:p.yx;\n\n    float h = min((p.x-p.y+s)/2.0, s);\n\n    vec2  a = vec2(p.x-h, p.y+h-s );\n\n    vec2  b = vec2(p.x-clamp(p.x,0.0,s), p.y );\n    vec2  d = min( vec2(dot(a,a), s-p.x-p.y),\n                   vec2(dot(b,b), p.y ));\n    \n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdf(vec2 p)\n{\n    //return sdBox(p*6.0)/6.0;\n    //return sdWedge0(p*6.0)/6.0;\n    //return sdWedge1(p*6.0)/6.0;\n    //return sdWedge2(p*6.0)/6.0;\n    return sdRightWedge(p*6.0+1.0,2.0)/6.0; // iq's simplified version\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    float d = sdf(p);\n\n    // using iq's sdf visualization\n    vec3 col = (d < 0.0) ? vec3(0.6,0.8,1.0) : vec3(0.9,0.6,0.3);\n    col *= 1.0 - exp(-9.0*abs(d));\n\tcol *= 1.0 + 0.2*cos(128.0*abs(d));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n    if(iMouse.x > 0.001)\n    {\n        d = sdf(m);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0015));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}