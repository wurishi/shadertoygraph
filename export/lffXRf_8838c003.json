{"ver":"0.1","info":{"id":"lffXRf","date":"1705514511","viewed":246,"name":"Fork 8-bit/16-b xebulon 340","username":"xebulon","description":"xeb: scaling factors by mouse coord, webcam, centre scaling zoom in/out\n\njust added dithering\n\noriginal shader: https://www.shadertoy.com/view/ts2XDG\ndither based on: https://www.bitshiftprogrammer.com/2018/05/dithering-image-effect-unity.html","likes":1,"published":3,"flags":2,"usePreview":0,"tags":["pixel","dithering","pixelart","8bit","16bit"],"hasliked":0,"parentid":"tsKGDm","parentname":"8-bit/16-bit FMV with dithering"},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float DPIXEL_FACTOR = 640.; // Lower num - bigger pixels (this will be the screen width)\nconst float DCOLOR_FACTOR = 8.;   // Higher num - higher colors quality\n\nconst mat4 ditherTable = mat4(\n    -4.0, 0.0, -3.0, 1.0,\n    2.0, -2.0, 3.0, -1.0,\n    -3.0, 1.0, -4.0, 0.0,\n    3.0, -1.0, 2.0, -2.0\n);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{                  \n    float scale = abs(sin(iTime * 0.1 + 3.1415/2.));\n    fragCoord *= scale;\n    fragCoord.x += (1.0-scale) * (iResolution.x / 2.);\n    fragCoord.y += (1.0-scale) * (iResolution.y / 2.);\n    // Reduce pixels   \n    float PIXEL_FACTOR = DPIXEL_FACTOR * (iMouse.x == 0. ? 0.5 : iMouse.x / iResolution.x);\n    float COLOR_FACTOR = DCOLOR_FACTOR * (iMouse.y == 0. ? 0.5 : iMouse.y / iResolution.y);\n    vec2 size = PIXEL_FACTOR * iResolution.xy/iResolution.x;\n    vec2 coor = floor( fragCoord/iResolution.xy * size) ;\n    vec2 uv = coor / size;   \n                \n   \t// Get source color\n    vec3 col = texture(iChannel0, uv).xyz;     \n\n    // Dither\n    col += ditherTable[int( coor.x ) % 4][int( coor.y ) % 4] * 0.03; // last number is dithering strength\n\n    // Reduce colors    \n    col = floor(col * COLOR_FACTOR) / COLOR_FACTOR;    \n   \n    // Output to screen\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}