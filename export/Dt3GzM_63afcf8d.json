{"ver":"0.1","info":{"id":"Dt3GzM","date":"1682065855","viewed":72,"name":"Configurable squircle masking","username":"artrointel","description":"MIT\n\nConfigurable minimum radius and maximum radius","likes":2,"published":1,"flags":0,"usePreview":1,"tags":["mask","squircle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float squircleDistance(vec2 center, vec2 uv) {\n    float displayRatio = iResolution.x / iResolution.y;\n    float pow_r4 = pow(center.x-uv.x, 4.0) * pow(displayRatio,4.0) + pow(center.y - uv.y, 4.0);\n    return sqrt(sqrt(pow_r4));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized configurable factors\n    float maxR = iMouse.x / iResolution.x;\n    float smoothness = iMouse.y / iResolution.y;\n    float minR = maxR * (1.0 - smoothness);\n    vec2 centerUv = vec2(0.5, 0.5);\n    \n    float displayRatio = iResolution.x / iResolution.y;\n    \n    // just to play animation\n    if (length(iMouse.xy) <= 10.0) {\n        // radius to cover the fullscreen \n        float diagonalRadius = length(vec2(\n            max(centerUv.x, (1.0 - centerUv.x)) * displayRatio, \n            max(centerUv.y, (1.0 - centerUv.y))\n        ));\n        maxR = diagonalRadius * (sin(iTime) + 1.0) * 0.5;\n        minR = maxR * abs(sin(iTime));\n    } \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 duv = uv;\n    //duv.x *= displayRatio;\n    //centerUv.x *= displayRatio;\n\n    vec3 col = texture(iChannel0, uv).rgb;\n    float dist = squircleDistance(centerUv, uv);\n    if (dist > maxR) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    } \n    \n    if (maxR > dist && dist > minR) {\n        col = mix(col, vec3(0.0, 0.0, 0.0), smoothstep(minR/maxR,1.0,dist/maxR));\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}