{"ver":"0.1","info":{"id":"MclcDN","date":"1721163169","viewed":31,"name":"Spiral 1 - Simple","username":"L1x3N","description":"Yep, that's a simple spiral alright.\nFeel free to change the consts and all, you know the drill.\nI converted the nodes Rotate and Twirl from Unity's Shader graph, as I admit that I'm not good enough yet to reproduce it by myself.\nHave fun :)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["spiral","endless","rotation","twirl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const bool ASPECT_RATIO = true;\nconst float SPIRAL_SPEED = 3.;\nconst float SPIRAL_STRENGTH = 25.;\nconst float SPIRAL_INTENSITY = 0.001;\nconst bool ADD_TIME = false;\n\nvec2 rotate_center(vec2 myUvs, vec2 center, float angle) {\n    float s = sin(angle), c = cos(angle);\n    mat2 rMatrix = (mat2(c, - s, s, c) * 0.5 + 0.5) * 2. - 1.;\n    return (myUvs - center) * rMatrix + center;\n}\n\nvec2 twirl_center(vec2 myUvs, vec2 center, float strength, vec2 offset) {\n    vec2 delta = myUvs - center;\n    float angle = strength * length(delta);\n    float x = cos(angle) * delta.x - sin(angle) * delta.y;\n    float y = sin(angle) * delta.x + cos(angle) * delta.y;\n    return vec2(x + center.x + offset.x, y + center.y + offset.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Uv setup\n\n    vec2 uv = gl_FragCoord.xy / iResolution.xy;\n    vec2 newUv = uv - 0.5;\n\n    if(ASPECT_RATIO)\n        newUv.x *= iResolution.x / iResolution.y;\n\n    newUv = rotate_center(newUv, vec2(0.), SPIRAL_SPEED * (ADD_TIME ? iTime : - iTime));\n    newUv = twirl_center(newUv, vec2(0.), SPIRAL_STRENGTH, vec2(0.));\n\n    // Uv fun stuff !\n\n    float spiralUv;\n\n    spiralUv = fract((newUv.x) * SPIRAL_INTENSITY);\n\n    vec3 myColor;\n\n    myColor = vec3(spiralUv);\n    // myColor = vec3((fract(newUv)), 0.);\n\n    fragColor = vec4(myColor, 1.);\n}","name":"Image","description":"","type":"image"}]}