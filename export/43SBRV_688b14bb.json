{"ver":"0.1","info":{"id":"43SBRV","date":"1729661300","viewed":117,"name":"OODA Loop (Aircraft Dogfight)","username":"Zi7ar21","description":"An implementation of an OODA (observe, orient, decide, act) loop\nSee https://en.wikipedia.org/wiki/OODA_loop\n\nIt is currently broken, ","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["aircraft","military","fighter","dogfight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(texture(iChannel0, fragCoord / iResolution.xy).rgb, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// position\n// velocity\n// acceleration\n\n// timestep (arb. time units per frame)\n#define dt 0.01\n\n#define TAU 6.2831853071795864769252867665590057683943387987502116419498891846\n\nvec2 rotate(vec2 v, float theta) {\n    return vec2(\n        v.x*cos(theta)-v.y*sin(theta),\n        v.x*sin(theta)+v.y*cos(theta)\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0);\n\n    ivec2 id = ivec2(fragCoord);\n\n    vec4 aircraft0_data0 = texelFetch(iChannel0, ivec2(0, 0), 0); // aircraft 0 position/speed/heading\n    vec4 aircraft0_data1 = texelFetch(iChannel0, ivec2(0, 1), 0); // aircraft 0 angular velocity/angular acceleration\n    vec4 aircraft1_data0 = texelFetch(iChannel0, ivec2(0, 2), 0); // aircraft 1 position/speed/heading\n    vec4 aircraft1_data1 = texelFetch(iChannel0, ivec2(0, 3), 0); // aircraft 1 angular velocity/angular acceleration\n\n    vec2  aircraft0_pos     = aircraft0_data0.xy;\n    vec2  aircraft0_vel     = aircraft0_data0.zw; // in polar coordinates (r, theta)\n    float aircraft0_ang_vel = aircraft0_data1.x;\n    float aircraft0_ang_acc = aircraft0_data1.y;\n\n    vec2  aircraft1_pos     = aircraft1_data0.xy;\n    vec2  aircraft1_vel     = aircraft1_data0.zw; // in polar coordinates (r, theta)\n    float aircraft1_ang_vel = aircraft1_data1.x;\n    float aircraft1_ang_acc = aircraft1_data1.y;\n\n    if(iFrame == 0) {\n        aircraft0_pos = vec2(-1.0, -0.5);\n        aircraft0_vel = vec2(5.0,  0.0);\n        aircraft0_ang_vel = -15.0;\n        aircraft0_ang_acc = 0.0;\n\n        aircraft1_pos = vec2( 1.0,  0.5);\n        aircraft1_vel = vec2(10.0,  0.0);\n        aircraft1_ang_vel = 10.0;\n        aircraft1_ang_acc = 0.0;\n\n        if(id.y < 4) {\n            if(id.y == 0) fragColor = vec4(aircraft0_pos    , aircraft0_vel);\n            if(id.y == 1) fragColor = vec4(aircraft0_ang_vel, aircraft0_ang_acc, 0.0, 0.0);\n            if(id.y == 2) fragColor = vec4(aircraft1_pos    , aircraft1_vel);\n            if(id.y == 3) fragColor = vec4(aircraft1_ang_vel, aircraft1_ang_acc, 0.0, 0.0);\n            return;\n        }\n    }\n\n    if(id.y < 4) {\n        if(id.x == 0) {\n            if(id.y == 0 || id.y == 1) {\n                // this is aircraft 0\n                aircraft1_vel = texelFetch(iChannel0, ivec2(0, 2), 0).zw;\n                aircraft1_pos = texelFetch(iChannel0, ivec2(0, 2), 0).xy + aircraft1_vel.x*vec2(cos(aircraft1_vel.y), sin(aircraft1_vel.y));\n                vec2 enemy_pos = rotate(aircraft1_pos-aircraft0_pos, -aircraft0_vel.y); // TODO: fix\n                aircraft0_ang_acc = clamp(100.0*atan(enemy_pos.y, enemy_pos.x)-2.0*aircraft0_ang_vel,-10.0, 10.0);\n            }\n\n            if(id.y == 2 || id.y == 3) {\n                // this is aircraft 1\n                aircraft0_vel = texelFetch(iChannel0, ivec2(120, 0), 0).zw;\n                aircraft0_pos = texelFetch(iChannel0, ivec2(120, 0), 0).xy + aircraft0_vel.x*vec2(cos(aircraft0_vel.y), sin(aircraft0_vel.y));\n                vec2 enemy_pos = rotate(aircraft0_pos-aircraft1_pos, -aircraft1_vel.y);\n                aircraft1_ang_acc = clamp(100.0*atan(enemy_pos.y, enemy_pos.x)-2.0*aircraft1_ang_vel,-7.5, 7.5);\n                //aircraft1_ang_acc = enemy_pos.y > 0.0 ? 5.0 : -5.0;\n            }\n\n            aircraft0_pos += dt*aircraft0_vel.x*vec2(cos(aircraft0_vel.y), sin(aircraft0_vel.y));\n            aircraft1_pos += dt*aircraft1_vel.x*vec2(cos(aircraft1_vel.y), sin(aircraft1_vel.y));\n            aircraft0_vel.y += dt*aircraft0_ang_vel;\n            aircraft1_vel.y += dt*aircraft1_ang_vel;\n            aircraft0_ang_vel = 8.0*tanh(0.125*aircraft0_ang_vel)+dt*aircraft0_ang_acc;\n            aircraft1_ang_vel = 8.0*tanh(0.125*aircraft1_ang_vel)+dt*aircraft1_ang_acc;\n\n            aircraft0_vel.y = mod(aircraft0_vel.y, TAU);\n            aircraft1_vel.y = mod(aircraft1_vel.y, TAU);\n\n            if(id.y == 0) fragColor = vec4(aircraft0_pos    , aircraft0_vel);\n            if(id.y == 1) fragColor = vec4(aircraft0_ang_vel, aircraft0_ang_acc, 0.0, 0.0);\n            if(id.y == 2) fragColor = vec4(aircraft1_pos    , aircraft1_vel);\n            if(id.y == 3) fragColor = vec4(aircraft1_ang_vel, aircraft1_ang_acc, 0.0, 0.0);\n        } else {\n            fragColor = iFrame > 0 ? texelFetch(iChannel0, ivec2(id.x - 1, id.y), 0) : fragColor; // buffer\n        }\n\n        return;\n    }\n\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/(0.5*iResolution.y);\n\n    uv *= 10.0; // zoom out\n\n    uv += 0.5*(aircraft0_pos+aircraft1_pos); // center on the point between both aircraft\n\n    fragColor.r = fract(uv.x) < 0.05 || fract(uv.y) < 0.05 || fract(uv.x) > 0.95 || fract(uv.y) > 0.95 ? 0.2 : 0.0;\n    \n\n    fragColor.rgb = fragColor.rrr;\n\n    fragColor.rgb = length(aircraft0_pos - uv) < 0.1 ? vec3(1, 0, 0) : fragColor.rgb;\n    fragColor.rgb = length(aircraft0_pos+(aircraft0_vel.x*vec2(cos(aircraft0_vel.y), sin(aircraft0_vel.y))) - uv) < 0.1 ? vec3(1, 0, 0.5) : fragColor.rgb;\n    fragColor.rgb = length(aircraft1_pos - uv) < 0.1 ? vec3(0, 1, 0) : fragColor.rgb;\n    fragColor.rgb = length(aircraft1_pos+(aircraft1_vel.x*vec2(cos(aircraft1_vel.y), sin(aircraft1_vel.y))) - uv) < 0.1 ? vec3(0, 1, 0.5) : fragColor.rgb;\n\n    //fragColor = vec4(fragColor.r, fragColor.g, 0.0, 1.0);\n\n    //fragColor += fract(uv).x > 0.9 ? 1.0 : 0.0;\n\n    //fragColor.rgb += 0.9 * texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;\n\n    fragColor.a = 1.0;\n}","name":"Buffer A","description":"","type":"buffer"}]}