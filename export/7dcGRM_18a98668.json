{"ver":"0.1","info":{"id":"7dcGRM","date":"1630154789","viewed":140,"name":"Sphere Physics 1","username":"Koulatko","description":"Trying to do some simple physics simulation, really glitchy but plausible at first glance :P","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["3d","learning","physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 ray_sphere(vec3 ro, vec3 rd, float r){\n    float b = -dot(ro, rd);\n    float c = dot(ro, ro) - r*r;\n    float d = b*b-c;\n    if(d < 0.0) return vec4(-1.0);\n    float h = sqrt(d);\n    float t = b < h ? b+h : b-h;\n    return vec4((ro+t*rd)/r, t);\n}\n\nvec4 ray_box(vec3 ro, vec3 rd, vec3 S){\n    vec3 c = -ro/rd;\n    vec3 d = S/abs(rd);\n    \n    vec3 N = c-d;\n    vec3 F = c+d;\n    \n    float tN = max(N.x, max(N.y, N.z));\n    float tF = min(F.x, min(F.y, F.z));\n    \n    if(tN > tF) return vec4(-1.0);\n    float t = tN > 0.0 ? tN : tF;\n    vec3 s = tN > 0.0 ? N : F;\n    vec3 nrm = -sign(rd)*vec3(\n    s.x == t ? 1.0 : 0.0,\n    s.y == t ? 1.0 : 0.0,\n    s.z == t ? 1.0 : 0.0\n    );\n    return vec4(nrm, t);\n}\n\nvec3 triplanar(sampler2D tex, vec3 p, vec3 d){\n    vec3 X = texture(tex, p.yz).xyz;\n    vec3 Y = texture(tex, p.xz).xyz;\n    vec3 Z = texture(tex, p.xy).xyz;\n    \n    vec3 w = abs(d);\n    w /= dot(w, vec3(1.0));\n    \n    return w.x*X + w.y*Y + w.z*Z;\n    \n    return mat3(X,Y,Z)*w;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 ro = vec3(7.0, -7.0, 5.0);\n\n    vec3 forward = -normalize(ro);\n    vec3 up = vec3(0.0, 0.0, 1.0);\n    vec3 right = normalize(cross(forward, up));\n    up = cross(right, forward);\n    \n    \n    \n    vec3 rd = normalize(vec3((2.0*fragCoord.xy-iResolution.xy)/iResolution.y, 1.0));\n    rd = mat3(right, up, forward)*rd;\n\n    vec3 col;\n    \n    vec4 h = vec4(0.0);\n    vec4 h1;\n    vec3 rp;\n    for(int i = 0; i < OBJ_COUNT; i++){\n        vec3 spos = texelFetch(iChannel0, wrap(i, 0), 0).xyz;\n        h1 = ray_sphere(ro-spos, rd, 1.0);\n        if(h1.w > 0.0 && (h1.w < h.w || h.w <= 0.0)){\n            h = h1;\n            rp = ro+h.w*rd-spos;\n        }\n    }\n    \n    h1 = ray_box(ro, rd, vec3(9.0));\n    if(h1.w > 0.0 && (h1.w < h.w || h.w <= 0.0)){\n        h = h1;\n        rp = ro+h.w*rd;\n    }\n    \n    if(h.w > 0.0){\n    \n        vec3 L = normalize(vec3(1.0, 0.4, 1.0));\n        vec3 N = h.xyz;\n        \n        vec3 illum = vec3(0.15, 0.2, 0.3);\n        \n        illum += vec3(1.5, 1.4, 1.3)*max(0.0, dot(N, L));\n    \n        col = illum*(N*0.5+0.5);\n    }\n    col = pow(col, vec3(1.0/2.2));\n    fragColor = vec4(col,1.0);\n    //fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord){\n    \n    ivec2 ind = unwrap(ivec2(fragCoord));\n    \n    if(ind.x >= OBJ_COUNT) return;\n    if(iFrame == 0){\n        if(ind.y == 0){\n            fragColor = -4.0+8.0*hash42(fragCoord);\n        }\n        if(ind.y == 1){\n            fragColor = -0.5+1.0*hash42(fragCoord);\n            fragColor *= 4.0;\n        }\n        return;\n    }\n    \n    const float cont_size = 8.0;\n    \n    if(ind.y == 0){\n        vec3 pos = texelFetch(iChannel0, wrap(ind.x, 0), 0).xyz;\n        vec3 vel = texelFetch(iChannel0, wrap(ind.x, 1), 0).xyz;\n        \n        \n        if(pos.x <-cont_size && vel.x < 0.0) pos.x =-cont_size;\n        if(pos.x > cont_size && vel.x > 0.0) pos.x = cont_size;\n        if(pos.y <-cont_size && vel.y < 0.0) pos.y =-cont_size;\n        if(pos.y > cont_size && vel.y > 0.0) pos.y = cont_size;\n        if(pos.z <-cont_size && vel.z < 0.0) pos.z =-cont_size;\n        if(pos.z > cont_size && vel.z > 0.0) pos.z = cont_size;\n        \n        for(int j = 0; j < OBJ_COUNT; j++){\n            if(ind.x != j){\n                vec3 o_pos = texelFetch(iChannel0, wrap(j, 0), 0).xyz;\n                vec3 o_vel = texelFetch(iChannel0, wrap(j, 1), 0).xyz;\n\n                float L = length(pos-o_pos);\n                if(L < 2.0){\n                    vec3 N = normalize(o_pos-pos);\n                    float penetration = 2.0-L;\n                    pos -= N*penetration/2.0;\n                }\n            }\n        }\n        \n        pos += iTimeDelta*vel;\n        \n        fragColor = vec4(pos, 1.0);\n    }\n    if(ind.y == 1){\n        vec3 pos = texelFetch(iChannel0, wrap(ind.x, 0), 0).xyz;\n        vec3 vel = texelFetch(iChannel0, wrap(ind.x, 1), 0).xyz;\n        \n        for(int j = 0; j < OBJ_COUNT; j++){\n            if(ind.x != j){\n                vec3 o_pos = texelFetch(iChannel0, wrap(j, 0), 0).xyz;\n                vec3 o_vel = texelFetch(iChannel0, wrap(j, 1), 0).xyz;\n\n                float L = length(pos-o_pos);\n                if(L < 2.0){\n                    vec3 N = normalize(o_pos-pos);\n                    \n                    vec3 nrm = N*dot(N, vel);\n                    vec3 tang = vel-nrm;\n                    if(dot(N, vel) > 0.0)\n                    vel = tang-0.2*nrm;\n                }\n            }\n        }\n        \n        if(pos.x <-cont_size) vel.x = abs(vel.x);\n        if(pos.x > cont_size) vel.x =-abs(vel.x);\n        if(pos.y <-cont_size) vel.y = abs(vel.y);\n        if(pos.y > cont_size) vel.y =-abs(vel.y);\n        if(pos.z <-cont_size) vel.z = 0.3*abs(vel.z);\n        if(pos.z > cont_size) vel.z =-abs(vel.z);\n        \n        vel += iTimeDelta*vec3(0.0, 0.0, -9.81);\n        \n        fragColor = vec4(vel, 1.0);\n    }\n    \n    \n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define BUF_PACK_WIDTH 256\n#define BUF_PACK_COMPS 2\n#define OBJ_COUNT 150\n\nivec2 unwrap(ivec2 fc){\n    int i = (fc.x + BUF_PACK_WIDTH*(fc.y-1) );\n    return ivec2(i/BUF_PACK_COMPS, i%BUF_PACK_COMPS);\n}\nivec2 wrap(int i, int c){\n    i *= BUF_PACK_COMPS;\n    i += c;\n    return ivec2(i%BUF_PACK_WIDTH, i/BUF_PACK_WIDTH + 1);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Hash without Sine\n// MIT License...\n/* Copyright (c)2014 David Hoskins.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.*/\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  2 out, 1 in...\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 3 in...\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n\n//----------------------------------------------------------------------------------------\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n//----------------------------------------------------------------------------------------\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 1 in...\nvec4 hash41(float p)\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 2 in...\nvec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 3 in...\nvec4 hash43(vec3 p)\n{\n\tvec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 4 in...\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}","name":"Common","description":"","type":"common"}]}