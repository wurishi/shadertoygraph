{"ver":"0.1","info":{"id":"4ctczX","date":"1730960065","viewed":71,"name":"1 Pass Fast Gaussian Blur","username":"yurk_deng","description":"Optimized single-pass blur ...","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// glsl-fast-gaussian-blur (Port by Experience Monks)\n// Source: https://github.com/Experience-Monks/glsl-fast-gaussian-blur \n// optimized single-pass blur shaders for GLSL \n\n// 16 Types Of Blur In Photoshop In Details: Box, Gaussian, Motion, Lens, Surface, Radial Etc. \n// Source: https://www.designiscope.com/post/types-of-blurs-in-photoshop-gaussian-motion-radial-etc \n// \n// WebGL/OpenGL is box blur this slow? \n// Source: https://gamedev.stackexchange.com/questions/120004/opengl-is-box-blur-this-slow \n// \n// Q: \n// I've never tried blur until recently, and by that i've noticed fps drop when doing box blur. My fps will go down from 4000-5000 fps to 1000-1500 fps. Currently rendering at 853x480 frame buffer and window size.\n// Is this normal? Oh, and i'm only rendering a basic triangle. Here's the fragment shader code (pretty much the same from open.gl): \n// #version 150\n// uniform sampler2D u_Texture0; \n// varying vec2 v_TexCoord; \n// const float blurSizeX = 1.0f / 853.0f;\n// const float blurSizeY = 1.0f / 480.0f;\n// void main(void) {\n//     vec4 color = vec4(0.0f);\n//     for (int y = -3; y < 4; y++) {\n//         for (int x = -3; x < 4; x++) {\n//             color += texture2D(u_Texture0, vec2(v_TexCoord.x + x * blurSizeX, v_TexCoord.y + y * blurSizeY)) / 49.0f;\n//         }\n//     }\n//     gl_FragColor = color;\n// } \n// Thank you in advance. \n// \n// A: \n// Yes and no.\n// Yes, generally: the convolution operation is usually very computationally heavy and if you are sampling 7x7 area, that is 49 times more samples than you would usually do.\n// No, in your case: One important thing about FPS is that it is inverse of a function. Because with 5000 FPS the time to render a frame is 0.20 ms and with 1500 FPS it is 0.66 ms the assumption the blur will always take away 3500fps (flat) is wrong. The blur just took 0.46 ms extra, with 60fps(=16.66 ms) target it is less than 3% of frame time. \n\n// Options are BLUR5, BLUR9 or BLUR13\n#define BLUR13\n\nbool flip = false;\nvec2 direction;\n\nvec4 blur5(sampler2D texture0, vec2 texCoord, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.3333333333333333) * direction;\n  color += texture(texture0, texCoord) * 0.29411764705882354;\n  color += texture(texture0, texCoord + (off1 / resolution)) * 0.35294117647058826;\n  color += texture(texture0, texCoord - (off1 / resolution)) * 0.35294117647058826;\n  return color; \n}\n\nvec4 blur9(sampler2D texture0, vec2 texCoord, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.3846153846) * direction;\n  vec2 off2 = vec2(3.2307692308) * direction;\n  color += texture(texture0, texCoord) * 0.2270270270;\n  color += texture(texture0, texCoord + (off1 / resolution)) * 0.3162162162;\n  color += texture(texture0, texCoord - (off1 / resolution)) * 0.3162162162;\n  color += texture(texture0, texCoord + (off2 / resolution)) * 0.0702702703;\n  color += texture(texture0, texCoord - (off2 / resolution)) * 0.0702702703;\n  return color;\n}\n\nvec4 blur13(sampler2D texture0, vec2 texCoord, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.4117647058823530) * direction;\n  vec2 off2 = vec2(3.2941176470588234) * direction;\n  vec2 off3 = vec2(5.1764705882352940) * direction;\n  color += texture(texture0, texCoord) * 0.1964825501511404;\n  color += texture(texture0, texCoord + (off1 / resolution)) * 0.296906964672834400;\n  color += texture(texture0, texCoord - (off1 / resolution)) * 0.296906964672834400;\n  color += texture(texture0, texCoord + (off2 / resolution)) * 0.094470397850447320;\n  color += texture(texture0, texCoord - (off2 / resolution)) * 0.094470397850447320;\n  color += texture(texture0, texCoord + (off3 / resolution)) * 0.010381362401148057;\n  color += texture(texture0, texCoord - (off3 / resolution)) * 0.010381362401148057;\n  return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  direction = vec2(1.0, 1.0);\n  \n  vec2 texCoord = vec2(fragCoord.xy / iResolution.xy);\n  if (flip) {\n    texCoord.y = 1.0 - texCoord.y;\n  }\n  \n#ifdef BLUR5 \n  fragColor = blur5(iChannel0, texCoord, iResolution.xy, direction);\n#endif\n  \n#ifdef BLUR9 \n  fragColor = blur9(iChannel0, texCoord, iResolution.xy, direction);\n#endif\n  \n#ifdef BLUR13 \n  fragColor = blur13(iChannel0, texCoord, iResolution.xy, direction);\n#endif\n}\n","name":"Image","description":"","type":"image"}]}