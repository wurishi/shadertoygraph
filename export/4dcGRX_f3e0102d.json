{"ver":"0.1","info":{"id":"4dcGRX","date":"1451136982","viewed":201,"name":"Simple sphere raytracer","username":"myownclone","description":"Modified raytracer based on sergei_am's raytracer.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raytracer","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"bool testSphere( out vec3 N, in vec3 ray, in vec3 sphere, in float radius )\n{\n    float A = dot( ray, ray );\n    float B = dot( ray, sphere )*(-2.0);\n    float C = dot( sphere, sphere ) - radius*radius;\n    float det = B*B - 4.0*A*C;\n    if( det < 0.0 ) return false;\n    \n    float t = (-B+sqrt(det)) / (2.0*A);\n    \n    vec3 hit = ray*t;\n   \n    N = normalize( hit - sphere );\n    return true;\n}\n\nbool scene( out vec3 N, in vec3 ray )\n{\n    if( testSphere( N, ray, vec3(0,0,5) /* sphere position */, 1.0 /* sphere radius */ ))\n        return true;\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float xKoef = 10.0*sin(iTime);\n    float yKoef = 10.0*cos(iTime);\n    float zKoef = 10.0*sin(iTime);\n    \n    vec3 V = normalize( vec3( (fragCoord.xy - iResolution.xy*0.5) / iResolution.xx, 1.0 )); // ray from \"screen\"\n    vec3 L = normalize( vec3(1.0*xKoef,1.0*yKoef,1.0*zKoef)); // light position\n    vec3 N;\n    \n    float Y = fragCoord.y / iResolution.y; // 2d y coord\n    \n    vec3 Sky = vec3( 0.45, 1.0-sin(iTime)*0.75, 1.0 )*Y*0.5; // background color\n    \n    vec3 frag = Sky;\n    \n    if( scene( N, V )) // if sphere is hit by ray, get ray hit normal\n    {\n        float dotNL =  max( dot( N, L ), 0.0 ); // dot product of ray hit normal, used by calculating lighting\n        vec3 H = normalize( V - reflect(V,N)); \n        float dotHL = max( dot( H, L ), 0.0 );\n        float spec = pow( dotHL, 32.0 ); // specular part\n        \n        float Albedo = 0.9; // intensity of light\n        \n        float F = pow( 1.0 - max( dot( V, N ), 0.0 ), 100.0);  // fresnel\n        \n        float Ambient = Albedo + (1.0-Albedo)*F;\n        \n        frag = vec3(sin(iTime),0.5,0.5)*dotNL*Albedo; // standart lighting\n        frag += vec3(1,1,1)*spec*Albedo; // specular lighting\n        frag += Sky * Ambient; // ambient lighting\n    }\n    fragColor = vec4( frag, 1.0 );\n}","name":"","description":"","type":"image"}]}