{"ver":"0.1","info":{"id":"X3sGR4","date":"1707203781","viewed":61,"name":"Just another Mandelbrot shader","username":"HexadecimalByte","description":"Simple Mandelbrot shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float scaled_x(float x)\n{\n\tfloat t = x / iResolution.x;\n\tt *= 2.47f;\n\tt -= 2.0f;\n\treturn t;\n}\nfloat scaled_y(float y)\n{\n\tfloat t = y / iResolution.y;\n\tt *= 2.24f;\n\tt -= 1.12f;\n\treturn t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(1, 1, 1);\n    \n    float scalar = 1.0f;\n    //scalar = abs(sin(iTime));\n    \n    vec2 p = ( 2.*fragCoord - iResolution.xy ) / iResolution.y;\n    float xp = scaled_x(p.x) * scalar;\n    float yp = scaled_y(p.y) * scalar;\n\n    float xi = 0.0f;\n    float yi = 0.0f;\n\n    int iteration = 0;\n    int max_iteration = 1000;\n\n    while (xi * xi + yi * yi <= 2.0f * 2.0f && iteration < max_iteration)\n    {\n        float xt = xi * xi - yi * yi + xp;\n        yi = 2.0f * xi * yi + yp;\n        xi = xt;\n        iteration++;\n    }\n    \n    if (iteration == max_iteration)\n    {\n        col = col * 0.0f;\n    }\n    else\n    {\n        col = col * float(iteration) / float(max_iteration);\n        //col.y = float(iteration) / float(max_iteration);\n        //col.x = float(iteration) / float(max_iteration);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}