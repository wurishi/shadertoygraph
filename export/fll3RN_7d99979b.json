{"ver":"0.1","info":{"id":"fll3RN","date":"1621657305","viewed":359,"name":"Milk Ocean","username":"ssartell","description":"raymarch, milk, sunset","likes":26,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","sunset","milk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nLots of stuff from IQ's blog, nothing special. Mostly trying to get something \nthat feels semi-translucent. Mouse drag for camera\n*/\n\nfloat farClip = 30.0;\nfloat pi = 3.14159;\n\nfloat rand(vec2 co){\n  return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat sphere(vec3 p, vec3 c, float r) {\n  return length(p - c) - r;\n}\n\nfloat plane( vec3 p, vec3 n, float h )\n{\n  return dot(p,n) + h;\n}\n\nfloat smin(float a, float b, float k)\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\nfloat map(vec3 p) {\n  float d1 = sphere(p, vec3(.1, sin(iTime*.9)*.2, 0.), .13);\n  float d2 = sphere(p, vec3(-.1, cos(iTime)*.15, 0.), .1);\n  float d3 = sphere(p, vec3(0., sin(iTime*.7)*.12, .1), .08);\n  float d4 = plane(p, vec3(0., 1., 0.), .2);\n  float r = length(p.xz);\n  float c = exp(-1.5 * r * r);\n  d4 += .03 * cos((r - iTime * .35) * 20.) * c * (1. - c*c*c*c*c);\n  float s1 = smin(smin(d1, d2, .07), d3, .07);\n  return smin(s1, d4, .2);\n}\n\nfloat map2(vec3 p) {\n  float d4 = plane(p, vec3(0., 1., 0.), .2);\n  return d4;\n}\n\nvec3 calcNormal(vec3 p) {\n  vec2 e = vec2(0.0001, 0.0);\n  return normalize(vec3(\n    map(p + e.xyy) - map(p - e.xyy),\n    map(p + e.yxy) - map(p - e.yxy),\n    map(p + e.yyx) - map(p - e.yyx)));\n}\n\nfloat marchRay(vec3 ro, vec3 rd) {\n  float t = 0.0;\n  for(int i = 0; i < 300; i++) {\n    vec3 p = ro + t * rd;\n    float h = map(p);\n    if (h < 0.0001) return t;\n    t += h;\n    if (t > farClip) return 0.0;\n  }\n  return t;\n}\n\nfloat softShadow(vec3 ro, vec3 rd, float k) {\n  float res = 1.0;\n    float ph = 1e20;\n    for( float t = 0.; t<100.;)\n    {\n        float h = map(ro + rd*t);\n        if( h<0.001 )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.x;\n\n  float tx = iTime / 2.0;\n  float ty = 0.2;\n  if (iMouse.z > 0.0) {\n    tx = iMouse.x / iResolution.x * 3.1416 * 3.0 + 3.14;\n    ty = iMouse.y / iResolution.y - .1;\n  }\n\n  vec3 ro = vec3(cos(tx * .7), ty, sin(tx * .7));\n  vec3 ta = vec3(0.0, 0.0, 0.0);\n\n  // camera axes\n  vec3 ww = normalize(ta - ro);\n  vec3 uu = normalize(cross(ww, vec3(0,1,0)));\n  vec3 vv = normalize(cross(uu, ww));\n\n  vec3 rd = normalize(uv.x*uu + uv.y*vv + .6*ww);\n\n  float t = marchRay(ro, rd);\n\n  vec3 l = normalize(vec3(1., cos(iTime * .3) + 1.1, 0.));\n  float vdotl = max(dot(rd, l), 0.0);\n  vec3 horizon = vec3(l.x, 0., l.y);\n  float atHorizon = pow(max(dot(l, horizon), 0.), 4.);\n\n  //vec3 fog = vec3(.55, .7, .9);\n  vec3 fog = mix(vec3(.55, .7, .9), vec3(0., .1, .2), max(rd.y, 0.));\n  vec3 sun = vec3(1.6, 1.2, 1.);\n  \n  float sunAmount = pow(vdotl, 64.);\n  fog = mix(fog, vec3(.25, .4, .6), atHorizon);\n  fog = mix(fog, vec3(1., .75, .6), (vdotl + .4) * atHorizon);\n  fog = mix(fog, sun, sunAmount);\n  vec3 col = fog;\n\n  if (t > 0.0) {\n    col = vec3(0.0);\n    vec3 p = ro + t * rd;\n\n    vec3 n = calcNormal(p);\n    vec3 r = reflect(-l, n);\n\n    float ndotl = clamp(dot(n, l), 0., 1.);\n    float rdotv = clamp(dot(-rd, r), 0., 1.);\n\n\n    vec3 albedo = vec3(0., .2, .5);\n    albedo = vec3(.75);\n    //albedo = n * .5 + .5;\n    //albedo = vec3(.2, .9, .2);\n\n    float fr = pow(1. + dot(n, rd), 4.) * .7;\n    float ao = clamp(map(p + n * .01) / .01, 0., 1.);\n    float sss = smoothstep(0., 1., map(p + l * .5) / .5);\n    float sha = softShadow(p + .01 * n, l, 6.);\n\n    float diff = ndotl;\n    float sp = pow(rdotv, 100.);\n    float sky = clamp(.5 + .5 * n.y, 0., 1.);\n    float ind = clamp(dot(n, normalize(l * vec3(-1., 0., -1.))), 0., 1.);\n\n    vec3 lin = (sss + diff * sha) * .5 * mix(sun, vec3(1.6, 1.1, .9), atHorizon);\n    lin += sky * vec3(.15, .2, .3) * ao;\n    lin += ind * vec3(.4, .3, .2) * ao;\n\n    col = albedo * lin + sp * sha;\n\n    col = mix(col, fog, fr + sunAmount);\n    col = mix(fog, col, exp(-.001*t*t*t));\n  }\n\n  //col = col / (col + vec3(1.0));\n  col = pow(col, vec3(1.0 / 2.2));\n\n  fragColor = vec4(col, 1.0);\n\n}","name":"Image","description":"","type":"image"}]}