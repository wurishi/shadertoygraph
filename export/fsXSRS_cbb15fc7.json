{"ver":"0.1","info":{"id":"fsXSRS","date":"1618737850","viewed":76,"name":"Fractal Recursion demo","username":"JustLewis","description":"Translated and modified code from person compute shader project. \nCompute shader original code created using wiki\nhttps://en.wikipedia.org/wiki/Plotting_algorithms_for_the_Mandelbrot_set\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 MandCentre = vec4(-0.998356,-0.177532,0.998356,0.177532);\n\nfloat Offset = 2.0;\nfloat FractalChange = 0.01191;\n\nfloat mandelbrot(vec2 centre, float Max_Iterations) \n{\n\tvec2 z = vec2(1.0,1.0);\n\tz *= FractalChange;\n\n\tfloat i = 0.;\n\twhile (i < Max_Iterations && (z.x*z.x + z.y*z.y) < 4.0)\n\t\t{\n\t\t\tz = vec2(z.x* z.x - z.y*z.y + centre.x, 2.0 * z.x *z.y + centre.y ) * Offset;\n\t\t\ti+= 0.31f;\n\t\t}\n\treturn i;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n\nfloat dx = (MandCentre.z - MandCentre.x  ) / (iResolution.x + iMouse.x);\nfloat dy = (MandCentre.w - MandCentre.y ) / (iResolution.y + iMouse.x);\n\nvec2 c = vec2(\tdx * fragCoord.x + MandCentre.x + (iMouse.x / iResolution.x * .50),\n\t\tdy * fragCoord.y + MandCentre.y );\n        \nfloat Iterations = 1.0 + exp(iMouse.y / iResolution.y * 4.0);\nfloat i = mandelbrot(c,Iterations);\nvec4 Colour = vec4(1.0,0.0,0.0,1);\nfloat ColourOff = 1.81f;\n\n if( i < Iterations ) \n\t{\n\t\tif( i < ColourOff ) Colour = vec4(sin(i/ColourOff),0,0,1);\n\t\telse if( i < ColourOff * 2.0 ) Colour = vec4(sin(i-ColourOff /ColourOff ),1,0,1);\n\t\telse if( i < ColourOff * 3.0 ) Colour = vec4(1.0 - sin((i-(ColourOff * ColourOff)) /ColourOff),0,(i-(ColourOff *ColourOff))/ColourOff ,1);\n\t\telse Colour = vec4(0,0,1,0);\n\t}\n\n  fragColor = Colour;\n}","name":"Image","description":"","type":"image"}]}