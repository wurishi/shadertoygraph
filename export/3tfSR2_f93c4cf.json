{"ver":"0.1","info":{"id":"3tfSR2","date":"1563486035","viewed":143,"name":"Weird chord IDK","username":"cafe","description":"Initially tried seeing what it would do to alias some sin wave on a \"wavy\" grid with a different frequency for each aliasing threshold.\n\nMostly adds noise, go figure.","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["soundnoiseexperiment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(float n){return fract(sin(n) * 43758.5453123);}\n\nfloat noise(float p){\n\tfloat fl = floor(p);\n  \tfloat fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\nfloat alias(float x, float y){\n\tfloat mul = 3.;\n    int aliased = int(round(x*mul));\n    \n    float hash = noise(float(aliased));\n    \n    return 0.05*sin(y*hash*10.)*hash + float(aliased)/mul;\n    \n    return float(aliased)/mul;\n}\n\nfloat sine(float x){\n    float res = sin(x);\n    \n    return alias(res, x);\n}\n\nfloat graph(vec2 uv){\n    float base = sine(uv.x*5.);\n    float height = uv.y*3.;\n    \n    float dist = smoothstep(0.02,0.04,abs(height-base));\n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y * vec2(1.,-1.);\n\n    fragColor = vec4(vec3(graph(uv)),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float rand(float n){return fract(sin(n) * 43758.5453123);}\n\nfloat noise(float p){\n\tfloat fl = floor(p);\n  \tfloat fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\nfloat alias(float x, float y){\n\tfloat mul = 3.;\n    int aliased = int(round(x*mul));\n    \n    float hash = noise(float(aliased));\n    \n    return 1.*sin(y*hash*0.007)*hash + float(aliased)/mul;\n    \n    return float(aliased)/mul;\n}\n\nfloat sine(float x){\n    float res = sin(x);\n    \n    return alias(res, x);\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    float tremolo = sin(time*50.)*0.1+1.;\n    \n    float R = time*6.2831*440.0;  // A\n    float T = time*6.2831*554.37; // C#\n    float F = time*6.2831*587.33; // E\n    float S = time*6.2831*830.61; // G#\n    \n    float octave = 0.;\n    \n    R /= pow(2.,-octave);\n    T /= pow(2.,-octave);\n    F /= pow(2.,-octave);\n    S /= pow(2.,-octave);\n    \n    vec4 balance = vec4(0.1,0.1,0.1,0.2);\n    \n    float chord = tremolo*dot(vec4(sine(R),sine(T),sine(F),sine(S))*balance,vec4(1.));\n    //float chord = tremolo*(sine(R) + sine(T) + sine(F) + sine(S))/4.;\n    return vec2( chord*exp(-1.*time));\n}","name":"Sound","description":"","type":"sound"}]}