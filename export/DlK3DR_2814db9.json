{"ver":"0.1","info":{"id":"DlK3DR","date":"1684057764","viewed":103,"name":"Mahalo","username":"orblivius","description":"Music visualizer I called it Mahalo, no idea why. It is derived from original which looked a bit strange I think. It desperately needed  that plasme feel added to it, so here we go.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["plasma","glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Please help me find original of this... \n// My addition to this is integrating plasma feel by adding\n// 8x8 ditehring, looks better doesn't it?\n\nconst float FREQ_RANGE = 512.0;\nconst float PI = 3.1415;\nconst float RADIUS = 0.5;\nconst float BRIGHTNESS = 0.13;\nconst float SPEED = 0.1;\n\n\n#define TIME (iTime)\n#define SCALE 2.0\n#define iAutoRotate 0\n#define MUSICCHANNEL(x) (0.5*texture(iChannel0, vec2(x, 0.25)).r);\n\n#define BEATMOVE 1\n\n//convert HSV to RGB\nvec3 hsv2rgb(vec3 color){\n    vec4 konvert = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 calc = abs(fract(color.xxx + konvert.xyz) * 6.0 - konvert.www);\n    return color.z * mix(konvert.xxx, clamp(calc - konvert.xxx, 0.0, 1.0), color.y);\n}\n\nfloat luma(vec3 color) {\n  return dot(color, vec3(0.299, 0.587, 0.114));\n  //return dot(color, vec3(0.299, 0.587, 0.5));\n}\n\nfloat getFrequency(float x) {\n\treturn MUSICCHANNEL(floor(x) ) + 0.06;\n}\n\nfloat getFrequency_smooth(float x) {\n\tfloat index = floor(x * FREQ_RANGE) / FREQ_RANGE;\n    float next = floor(x * FREQ_RANGE + 1.0) / FREQ_RANGE;\n\treturn mix(getFrequency(index), getFrequency(next), smoothstep(0.0, 1.0, fract(x * FREQ_RANGE)));\n}\n\nfloat getFrequency_blend(float x) {\n    return mix(getFrequency(x), getFrequency_smooth(x), 0.5);\n}\n\nvec3 circleIllumination(vec2 fragment, float radius) {\n\tfloat distance = length(fragment);\n\tfloat ring = 1.0 / abs(distance - radius - (getFrequency_smooth(0.0)/4.50));\n\t\n\t//float brightness = distance < radius ? BRIGHTNESS * 0.3 : BRIGHTNESS;\n\t\n\tvec3 color = vec3(0.0);\n\t\n\tfloat angle = atan(fragment.x, fragment.y);\n\tcolor += hsv2rgb( vec3( ( angle + iTime * 2.5 ) / (PI * 2.0), 1.0, 1.0 ) ) * ring * BRIGHTNESS;\n\t\n\tfloat frequency = max(getFrequency_blend(abs(angle / PI)) - 0.02, 0.0);\n\tcolor *= frequency;\n\t\n\t// Black halo\n\t//color *= smooth//step(radius * 0.5, radius, distance);\n\t\n\treturn color;\n}\n\nvec3 doLine(vec2 fragment, float radius, float x) {\n\tvec3 col = hsv2rgb(vec3(x * 0.23 + iTime * 0.12, 1.0, 1.0));\n\t\n\tfloat freq = abs(fragment.x * 0.5);\n\t\n\tcol *= (1.0 / abs(fragment.y)) * BRIGHTNESS * getFrequency(freq);\t\n\tcol = col * smoothstep(radius, radius * 1.8, abs(fragment.x));\n\t\n\treturn col;\n}\n\nvec3 aces(vec3 x) {\n    return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), 0.0, 1.0);\n}\n#define resolution 1.0 / 5.0\n\nfloat luma(in vec4 color) {\n    return dot(color.rgb, vec3(0.299, 0.587, 0.114));\n}\n\nfloat dither4x4(in vec2 position, in float brightness) {\n    int x = int(mod(position.x, 4.0));\n\tint y = int(mod(position.y, 4.0));\n\tint index = x + y * 4;\n\tfloat limit = 0.0;\n\n\tif (x < 8) {\n\t\tif (index == 0) limit = 0.0625;\n\t\tif (index == 1) limit = 0.5625;\n    \tif (index == 2) limit = 0.1875;\n    \tif (index == 3) limit = 0.6875;\n    \tif (index == 4) limit = 0.8125;\n    \tif (index == 5) limit = 0.3125;\n    \tif (index == 6) limit = 0.9375;\n    \tif (index == 7) limit = 0.4375;\n    \tif (index == 8) limit = 0.25;\n    \tif (index == 9) limit = 0.75;\n    \tif (index == 10) limit = 0.125;\n    \tif (index == 11) limit = 0.625;\n    \tif (index == 12) limit = 1.0;\n    \tif (index == 13) limit = 0.5;\n    \tif (index == 14) limit = 0.875;\n    \tif (index == 15) limit = 0.375;\n        limit *= 0.75;\n  }\n\n  return brightness < limit ? 0.0 : 1.0;\n}\n\nvec4 dither4x4(in vec2 position, in vec4 color) {\n\treturn vec4(color.rgb * dither4x4(position, luma(color)), 1.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 fragPos = fragCoord / iResolution.xy;\n\tfragPos = (fragPos - 0.5) * 2.0;\n    fragPos.x *= iResolution.x / iResolution.y;\n    \n    vec3 color = vec3(0.0,0.0,0.0);\n\tcolor += circleIllumination(fragPos, RADIUS);\n    \n    float c = cos(TIME * SPEED * 5.);\n    float s = sin(TIME * SPEED * 5.);\n    vec2 rot = mat2(c,s,-s,c) * fragPos;\n    color += doLine(rot, (RADIUS ), rot.x);\n    \n    float c1 = sin(TIME * SPEED * 5.);\n    float s1 = cos(TIME * SPEED * 5.);\n    vec2 rot1 = mat2(c1,s1,-s1,c1) * fragPos;\n    color += doLine(rot1, (RADIUS ), rot1.y);\n    \n    \n    color += max(luma(color) - 1.0, 0.0);\n   \n    color = dither4x4(fragCoord, vec4(color,1.0)).rgb;\n    fragColor =  vec4(aces(color), 1.0);\n}","name":"Image","description":"","type":"image"}]}