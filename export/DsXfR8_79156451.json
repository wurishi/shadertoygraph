{"ver":"0.1","info":{"id":"DsXfR8","date":"1692722531","viewed":36,"name":"Herringbone(2)","username":"poweredbygeeko","description":"herringbone","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["herringbone"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random(float seed, float seed2) {\n    return fract(sin(seed * 321.) + seed2 * .678);\n}\n\nfloat random21(vec2 position) {\n    return fract(sin(position.x * 99. + position.y * 876.) * 765.);\n}\n\nfloat noise(vec2 position) {\n\n    vec2 uv = fract(position);\n    vec2 id = floor(position);\n    \n    float bottomLeft = random21(id);\n    float bottomRight = random21(id + vec2(1, 0));\n    float bottom = mix(bottomLeft, bottomRight, uv.x);\n    \n    float topLeft = random21(id + vec2(0, 1));\n    float topRight = random21(id + vec2(1, 1));\n    float top = mix(topLeft, topRight, uv.x);\n\n    float value = mix(bottom, top, uv.y);\n\n    return value;\n}\n\nfloat smoothNoise(vec2 position) {\n    \n    float value = noise(position * 4.);\n    value += noise(position * 8.) * 0.5;\n    value += noise(position * 16.) * 0.25;\n    value += noise(position * 32.) * 0.125;\n    value += noise(position * 64.) * 0.0625;\n    \n    return value / 4.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    \n    float pi = 3.141592;\n    float theta = -pi / 4.;\n    \n    mat2 rotationMatrix;\n    rotationMatrix[0] = vec2(cos(theta), sin(theta));\n    rotationMatrix[1] = vec2(-sin(theta), cos(theta));\n    \n    uv *= rotationMatrix;\n    \n    float uvScale = 3.5;\n    uv *= uvScale;\n    \n    float scale = 3.;\n    uv *= scale;\n    \n    float columns = floor(uv.x);\n    columns += uv.y;\n    columns = mod(columns, scale * 2.);\n    columns /= scale;\n    \n    float rows = floor(uv.y);\n    rows += uv.x;\n    rows = mod(rows, scale);\n    rows /= scale;\n    \n    float mask = floor(uv.x);\n    mask += uv.y;\n    mask = mod(mask, scale * 2.);\n    mask = mask < scale ? 1. : 0.;\n    \n    float squish = 7.;\n    float stretch = 3.;\n    \n    vec2 uvRows = vec2(rows, fract(uv.y));\n    \n    vec2 noiseUVRows = vec2(uvRows.x / stretch, uvRows.y * squish);\n    \n    vec2 uvColumns = vec2(fract(uv.x), columns);\n    \n    vec2 noiseUVColumns = vec2(uvColumns.x * squish, uvColumns.y / stretch);\n    \n    vec2 localUV = mix(noiseUVRows, noiseUVColumns, mask);\n    \n    /************RANDOM UV*************/\n    \n    float randomRows = random(floor(uv.y) / scale / uvScale, 0.2);\n    float randomColumns = random(floor(uv.x) / scale / uvScale / 2., 0.7);\n    \n    float random = mix(randomRows, randomColumns, mask);\n    \n    randomRows = random21(uvRows);\n    \n    vec2 randomUV = vec2(uvRows.x * random, uvRows.y * random / scale);\n    \n    int f;\n    \n    float r = floor(uv.y) + uv.x;\n    r /= scale;\n    r  = floor(r) * 0.1;\n    \n   \n    \n    //vec3 color = vec3(r);\n    \n    \n    //randomUV += random * 0.75;\n    \n    /********************************/\n   \n   \n   \n   \n    \n    /*********** GAP MASK ************/\n    \n    float gapSize = 0.02;\n    \n    float rowGapMask = uvRows.x > gapSize / scale && uvRows.x < 1.0 - gapSize / scale\n        && uvRows.y > gapSize && uvRows.y < 1.0 - gapSize ? 1. : 0.;\n    \n    float columnGapMask = uvColumns.x > gapSize && uvColumns.x < 1.0 - gapSize \n        && uvColumns.y > gapSize / scale && uvColumns.y < 1.0 - gapSize / scale ? 1. : 0.;\n        \n    float gapMask = mix(rowGapMask, columnGapMask, mask);\n    \n    /********************************/\n    \n    vec2 position = vec2(localUV);\n    \n    float noise = smoothNoise(position);\n    \n    vec3 colorA = vec3(0.825, 0.7, 0.5);\n    vec3 colorB = vec3(0.3, 0.2, 0.1);\n    \n    vec3 gapColor = vec3(0.25);\n    vec3 tileColor = mix(colorA, colorB, noise);\n    \n    vec3 color = mix(gapColor, tileColor, gapMask);\n   \n    // Output to screen\n    fragColor = vec4(color, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}