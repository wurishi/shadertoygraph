{"ver":"0.1","info":{"id":"7dfGW8","date":"1616078835","viewed":155,"name":"Colorful waves","username":"pontusasp","description":"Colorful rotating cos- and sin-waves.\n\nMouse X shifts time passed between [-100, 100] s, Mouse Y shifts time scale between [-5, 5].","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["waves","colorful"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool even(float digit) {\n    return floor(digit) == floor(digit/2.0) * 2.0;\n}\n\nmat2 rotate2d(float theta) {\n    mat2 rot;\n    rot[0] = vec2(cos(theta), -sin(theta));\n    rot[1] = vec2(sin(theta), cos(theta));\n    return rot;\n}\n\nvec3 addRed(vec3 col, float r) {\n    col.r += r;\n    if (col.r > 1.) {\n        float rem = col.r - 1.;\n        col.r = 1.;\n        rem = min(rem, 2. - col.g + col.b);\n        col.g += min(rem/2., 1. - col.g);\n        col.b += min(rem/2., 1. - col.b);\n    }\n    return col;\n}\n\nvec3 addGreen(vec3 col, float g) {\n    col.g += g;\n    if (col.g > 1.) {\n        float rem = col.g - 1.;\n        col.g = 1.;\n        rem = min(rem, 2. - col.r + col.b);\n        col.r += min(rem/2., 1. - col.r);\n        col.b += min(rem/2., 1. - col.b);\n    }\n    return col;\n}\n\nvec3 addBlue(vec3 col, float b) {\n    col.b += b;\n    if (col.b > 1.) {\n        float rem = col.b - 1.;\n        col.b = 1.;\n        rem = min(rem, 2. - col.g + col.r);\n        col.g += min(rem/2., 1. - col.g);\n        col.r += min(rem/2., 1. - col.r);\n    }\n    return col;\n}\n\n\nvec3 addColor(vec3 col, vec3 add) {\n    col = addRed(col, add.r);\n    col = addGreen(col, add.g);\n    col = addBlue(col, add.b);\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float timeScale = (iMouse.y / iResolution.y - .5) * 10.;\n    float time = timeScale * iTime + ((iMouse.x / iResolution.x - .5) * 200.);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(time+uv.xyx+vec3(0,2,4));\n    vec3 r = vec3(col.r, 0.0, 0.0);\n    vec3 g = vec3(0.0, col.g, 0.3);\n    vec3 b = vec3(0.0, 0.0, col.b);\n    vec3 black = vec3(0.);\n    \n    vec3 fc;\n    \n    \n    float scale = (40.0 + 20.0 * sin(time / 5.0)) * 4.;\n    float unitsX = iResolution.x / scale;\n    float unitsY = iResolution.y / scale;\n    \n    float x = uv.x * unitsX - unitsX / 2.0;\n    float y = uv.y * unitsY - unitsY / 2.0;\n    \n    vec2 pos = rotate2d(time / 10.0) * vec2(x, y);\n    \n    x = pos.x;\n    y = pos.y + 2.*cos(x/1000. * time);\n    \n    float num = x + sin(y / 2.0 * sin(time/8.0)*5.0 + cos(time / 5.0) * 10.0);\n    float dist = min(abs(num - floor(num)), abs(num - ceil(num)));\n    float margin = 0.5;\n    \n    if (dist < margin) {\n        r = r * pow(1.0 - dist/margin, 4.0);\n        g = g * pow(1.0 - dist/margin, 4.0);\n        b = b * pow(1.0 - dist/margin, 4.0);\n        r = addColor(r, r * 0.7);\n        g = addColor(g, g * 0.9);\n        b = addColor(b, b * 0.7);\n        fc = r + g + b;\n    }\n    \n    \n    \n    vec3 final = fc;\n    float biggest = max(final.x, max(final.y, final.z));\n    if (biggest > 1.0) final /= biggest;\n    fragColor = vec4(final, 1.0);\n    // Output to screen\n    fragColor = vec4(fc,1.0);\n}","name":"Image","description":"","type":"image"}]}