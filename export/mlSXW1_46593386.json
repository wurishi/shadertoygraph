{"ver":"0.1","info":{"id":"mlSXW1","date":"1675990192","viewed":72,"name":"broken fluid but looks cool","username":"Rugged","description":"Working on a new fluid sim and this little cool thing happened while doing debug tests","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["fluid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nprecision highp float;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 col = texture(iChannel0, uv);\n    \n    vec2 muv = iMouse.xy / iResolution.xy;\n        \n    fragColor = col;//300. *  mix(vec4(col.w), (col), .5);\n}\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 to2D(vec3 p, vec3 res){\n    vec2 blockSize = floor(res.xy / 6.);\n    \n    ivec2 add = ivec2(vec2(floor(mod(p.z, 6.)), floor(p.z / 6.)) * blockSize);\n    \n    \n    return vec2(ivec2(p.xy) + add);\n}\n\nvec3 to3D(vec2 p, vec3 res){\n    vec2 blockSize = floor(res.xy / 6.);\n    \n    \n    return vec3(mod(p, blockSize), floor(p.x / blockSize.x) + (floor(p.y / blockSize.y) * 6.));\n    \n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"precision highp float;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 col = texture(iChannel0, uv);\n    \n    \n    \n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec2 uvc = uv - vec2(0.5);\n    \n    vec4 col = vec4(0.);\n    \n    \n    ivec2 fragI = ivec2(fragCoord);\n    \n    vec3 up = vec3(0., 0., 1.);\n    vec3 left = vec3(0., 1., 0.);\n    vec3 forward = vec3(1. , 0., 0.);\n    \n    vec3 coords3d = to3D(fragCoord, iResolution);\n    \n    vec3 cfx = coords3d + forward;\n    vec3 cbx = coords3d - forward;\n    vec3 cfy = coords3d + left;\n    vec3 cby = coords3d - left;\n    vec3 cfz = coords3d + up;\n    vec3 cbz = coords3d - up;\n    \n    \n    \n    if(iFrame == 0){\n        col = vec4(0.);\n    }\n    else if(distance(uvc, vec2(0.)) < 1.) {\n        \n        //advect to new spot\n        vec4 u = texture(iChannel0, vec2(fragCoord / iResolution.xy));\n        \n        vec4 ufx = texture(iChannel0, vec2(to2D(cfx, iResolution) / iResolution.xy));\n        vec4 ubx = texture(iChannel0, vec2(to2D(cbx, iResolution) / iResolution.xy));\n        vec4 ufy = texture(iChannel0, vec2(to2D(cfy, iResolution) / iResolution.xy));\n        vec4 uby = texture(iChannel0, vec2(to2D(cby, iResolution) / iResolution.xy));\n        vec4 ufz = texture(iChannel0, vec2(to2D(cfz, iResolution) / iResolution.xy));\n        vec4 ubz = texture(iChannel0, vec2(to2D(cbz, iResolution) / iResolution.xy));\n        \n        \n        \n        for(int i = 0; i < 1; i++){\n            float dpx = ufx.w - ubx.w;\n            float dpy = ufy.w - uby.w;\n            float dpz = ufz.w - ubz.w;\n        \n        \n            cfx -= ufx.xyz;\n            cbx -= ubx.xyz;\n            cfy -= ufy.xyz;\n            cby -= uby.xyz;\n            cfz -= ufz.xyz;\n            cbz -= ubz.xyz;\n            \n            \n            //coords3d -= u.xyz;\n            \n            \n            float densX = distance(coords3d, cfx) + distance(coords3d, cbx) - 2.;\n            float densY = distance(coords3d, cfy) + distance(coords3d, cby) - 2.;\n            float densZ = distance(coords3d, cfz) + distance(coords3d, cbz) - 2.;\n            \n            float density = densX + densY + densZ;\n            \n    \n            //apply changes\n            col = texture(iChannel0, vec2(to2D(coords3d, iResolution) / iResolution.xy));\n            \n            \n            col.x -= dpx / 8.;\n            col.y -= dpy / 8.;\n            col.z -= dpz / 8.;\n            \n            \n            \n            \n            \n            \n            //get data at new spot\n            ufx = texture(iChannel0, vec2(to2D(cfx, iResolution) / iResolution.xy));\n            ubx = texture(iChannel0, vec2(to2D(cbx, iResolution) / iResolution.xy));\n            ufy = texture(iChannel0, vec2(to2D(cfy, iResolution) / iResolution.xy));\n            uby = texture(iChannel0, vec2(to2D(cby, iResolution) / iResolution.xy));\n            ufz = texture(iChannel0, vec2(to2D(cfz, iResolution) / iResolution.xy));\n            ubz = texture(iChannel0, vec2(to2D(cbz, iResolution) / iResolution.xy));\n            \n            vec4 uAvg = (ufx + ubx + ufy + uby + ufz + ubz) / 6.;\n            \n            col.w = uAvg.w + (density / 10.); \n        }\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        u = texture(iChannel0, vec2(fragCoord / iResolution.xy));\n        \n        ufx = texture(iChannel0, vec2(to2D(cfx, iResolution) / iResolution.xy));\n        ubx = texture(iChannel0, vec2(to2D(cbx, iResolution) / iResolution.xy));\n        ufy = texture(iChannel0, vec2(to2D(cfy, iResolution) / iResolution.xy));\n        uby = texture(iChannel0, vec2(to2D(cby, iResolution) / iResolution.xy));\n        ufz = texture(iChannel0, vec2(to2D(cfz, iResolution) / iResolution.xy));\n        ubz = texture(iChannel0, vec2(to2D(cbz, iResolution) / iResolution.xy));\n        \n        \n        col += (ufx - ubx) / 2.;\n        \n        \n        //col.z = .1 * col.w;\n        //col.xy+= vec2(0., -.02) * iTimeDelta;\n        \n        \n        /*\n        if(iMouse.z > 0.){\n            vec2 muvc = (iMouse.xy / iResolution.xy) - vec2(.5);\n            \n            col += vec4(-muvc, 0., 1.) * iTimeDelta * (.1 / (0.001 + distance(uvc, muvc))) * .05;\n        }\n        */\n        \n        /*\n        if(abs(coords3d.x - iResolution.x * .5) >= iResolution.x * .4 || abs(coords3d.y - iResolution.y * .5) >= iResolution.y * .4){\n            col = vec4(0.); \n        }\n        */\n        \n        if(distance(fragCoord, iResolution.xy * vec2(.25, .5)) < 1.){\n            col += vec4(.2, .01 * sin(iTime), 0.05, .1);\n        }\n        \n        if(distance(fragCoord, iResolution.xy * vec2(.75, .5)) < 1.){\n            col += vec4(-.2, -.01 * sin(iTime), 0.05, .1);\n        }\n        \n        \n        //col = vec4(to2D(coords3d, iResolution), 0., 1.);\n        //col = vec4(fragCoord, 0., 1.)/ 100.;\n        //dye will dissipate over time\n        //col.w *= .9999;\n        \n    }\n    \n    \n    \n    fragColor = col;\n}","name":"Buffer B","description":"","type":"buffer"}]}