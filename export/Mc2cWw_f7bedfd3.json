{"ver":"0.1","info":{"id":"Mc2cWw","date":"1722438896","viewed":22,"name":"ARTS1308: Neon  Warrior","username":"lyhokia","description":"Homework: image processing","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["filter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Reference: \n// https://www.shadertoy.com/view/Xdf3Rf\n// https://www.shadertoy.com/view/XsfGzn\n\n// Use these parameters to fiddle with settings\nfloat step = 1.0;\n\nfloat intensity(in vec4 color){\n\treturn sqrt((color.x*color.x)+(color.y*color.y)+(color.z*color.z));\n}\n\nvec3 sobel(float stepx, float stepy, vec2 center){\n\t// get samples around pixel\n    float tleft = intensity(texture(iChannel0,center + vec2(-stepx,stepy)));\n    float left = intensity(texture(iChannel0,center + vec2(-stepx,0)));\n    float bleft = intensity(texture(iChannel0,center + vec2(-stepx,-stepy)));\n    float top = intensity(texture(iChannel0,center + vec2(0,stepy)));\n    float bottom = intensity(texture(iChannel0,center + vec2(0,-stepy)));\n    float tright = intensity(texture(iChannel0,center + vec2(stepx,stepy)));\n    float right = intensity(texture(iChannel0,center + vec2(stepx,0)));\n    float bright = intensity(texture(iChannel0,center + vec2(stepx,-stepy)));\n \n\t// Sobel masks (see http://en.wikipedia.org/wiki/Sobel_operator)\n\t//        1 0 -1     -1 -2 -1\n\t//    X = 2 0 -2  Y = 0  0  0\n\t//        1 0 -1      1  2  1\n\t\n\t// You could also use Scharr operator:\n\t//        3 0 -3        3 10   3\n\t//    X = 10 0 -10  Y = 0  0   0\n\t//        3 0 -3        -3 -10 -3\n \n    float x = tleft + 2.0*left + bleft - tright - 2.0*right - bright;\n    float y = -tleft - 2.0*top - tright + bleft + 2.0 * bottom + bright;\n    float color = sqrt((x*x) + (y*y));\n    return vec3(color,color,color);\n }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec4 color = texture(iChannel0, uv.xy);\n\tvec3 edge = sobel(step/iResolution[0], step/iResolution[1], uv);\n    \n    float maxrb = max( color.r, color.b );\n    float k = clamp( (color.g-maxrb)*5.0, 0.0, 1.0 );\n    float ll = length( color );\n    color.g = min( color.g, maxrb*0.8 );\n    color = ll*normalize(color);\n    color.rgb = mix(color.rgb, vec3(0.0), k);\n    \n    \n    bool is_background = color.r < 0.1 && color.g >= 0.60 && color.b < 0.2; \n    \n    \n    vec3 to_mix = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 mixed = mix(color.rgb, to_mix, edge.x);\n    fragColor.rgb = is_background? vec3(0.0) : mixed;\n}","name":"Image","description":"","type":"image"}]}