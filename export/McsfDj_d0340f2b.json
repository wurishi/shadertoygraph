{"ver":"0.1","info":{"id":"McsfDj","date":"1724407557","viewed":52,"name":"1d cellular automata","username":"jonasfrey","description":"1d cellular automata, a classic!\nuse the mouse to in- decrease the number of the rule ","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["1d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 omouserule = texelFetch(iChannel0, ivec2(1, 1), 0);\n\n    vec4 o = texture(iChannel0, uv);\n    uv.x *= 3.;\n    float n_idx_dig = floor(uv.x);\n    float n_rule = omouserule.y;\n    float n_dig = floor(mod(n_rule / pow(10., 2.-n_idx_dig), 10.));\n\n    vec4 ofont = texture(iChannel1, (fract(uv)+vec2(n_dig, 12))/16.);\n    float nmin = min(ofont.x,min(ofont.y, ofont.z));\n    float n = smoothstep(0.5, 0.2, ofont.x);\n    // Output to screen\n    fragColor = vec4(n)*o+nmin;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 hash22(vec2 p)\n{\n\n// Hash without Sine\n// MIT License...\n/* Copyright (c)2014 David Hoskins.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.*/\n\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 o_trn = fragCoord.xy / iResolution.xy;\n   vec2 o_trn_mou = iMouse.xy / iResolution.xy;\n   vec4 o = vec4(0.);\n   //o = vec4(sin(o_trn.x+iTime));\n   ivec2 ofc = ivec2(fragCoord.xy);\n   vec4 omouserule = texelFetch(iChannel0, ivec2(1, 1), 0);\n\n   int b_mouse_down_last = int(omouserule.x);\n   int b_mouse_down = int(sign(iMouse.z)>0.);\n   float n_rule = omouserule.y;\n   if(b_mouse_down_last ==  0 && b_mouse_down == 1){\n       n_rule = n_rule + 1. * sign(o_trn_mou.x -.5);\n       if(n_rule < 0.){\n           n_rule = 255.;\n       }\n       if(n_rule > 255.){\n           n_rule = 0.;\n       }\n   }\n   if(iFrame == 0){\n       n_rule = 161.;\n   }\n       \n   if(fragCoord.y > 1.){\n       o = texelFetch(iChannel0, ivec2(fragCoord.xy)-ivec2(0, 1), 0);\n   }else{\n\n       vec4 ocm1 = texelFetch(iChannel0, ivec2(fragCoord.xy)+ivec2(-1, 0), 0);\n       vec4 oc1 = texelFetch(iChannel0, ivec2(fragCoord.xy)+ivec2(0, 0), 0);\n       vec4 ocp1 = texelFetch(iChannel0, ivec2(fragCoord.xy)+ivec2(1, 0), 0);\n\n   \n       if(b_mouse_down_last ==  0 && b_mouse_down == 1){\n           ocm1 = vec4(hash22(fragCoord.xy+vec2(-1., 0.)).x);\n           oc1 = vec4(hash22(fragCoord.xy).x);\n           ocp1 = vec4(hash22(fragCoord.xy+vec2(1., 0.)).x);\n       }\n       \n       int n_idx = int(ocm1.x > 0.5) << 2 | int(oc1.x > 0.5) << 1 | int(ocp1.x > 0.5) << 0;\n       int n_rule = int(omouserule.y);//int(fract(iTime*.1)*255.);\n       int n_new_state = n_rule & (1 << n_idx);\n       o = vec4(float(n_new_state));\n\n   }\n   \n   if(ofc.x == 1 && ofc.y == 1){\n\n       o = vec4(\n           b_mouse_down, \n           n_rule, // n_rule\n           0., \n           0.\n       );\n   }\n   \n   fragColor = o;\n}","name":"Buffer A","description":"","type":"buffer"}]}