{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Translates t from [0.0, 1.0] to a point on an edge of the screen\nvec2 tToEdgePoint(float t, vec2 maxXY, vec2 offset)\n{\n    vec2 p;\n\tfloat fullLength = 2.0 * maxXY.x + 2.0 * maxXY.y;\n    float relativeWidth = maxXY.x / fullLength;\n    float relativeHeight = maxXY.y / fullLength;\n    t = mod(t, 1.0);\n    if (t < relativeWidth)\n    {\n    \tp.x = (t / relativeWidth) * maxXY.x;\n        p.y = maxXY.y;\n    }\n    else if (t < relativeWidth + relativeHeight)\n    {\n        float pt = t - relativeWidth;\n     \tp.x = maxXY.x;\n        p.y = (1.0 - pt / relativeHeight) * maxXY.y;\n    }\n    else if (t < 2.0 * relativeWidth + relativeHeight)\n    {\n        float pt = t - relativeWidth - relativeHeight;\n        p.x = (1.0 - pt / relativeWidth) * maxXY.x;\n        p.y = 0.0;\n    }\n    else\n    {\n        float pt = t - 2.0 * relativeWidth - relativeHeight;\n        p.x = 0.0;\n        p.y = (pt / relativeHeight) * maxXY.y;\n    }\n        \n    return p + offset;\n}\n\n// Returns distance of point p from line defined by l0 and l1\nfloat distanceFromLine(vec2 l0, vec2 l1, vec2 p)\n{\n    vec2 d = l1 - l0;\n    float dist = abs(d.y * p.x - d.x * p.y - l0.x * l1.y + l1.x * l0.y);\n    dist /= length(d);\n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n    vec3 color;\n    float speed = 0.3;\n    float t = speed * iTime;\n    vec2 maxXY = vec2(aspect, 1.0);\n    vec2 offset = vec2(0.0);\n    vec2 l0, l1;\n    float dist;\n    vec3 colors[4];\n    colors[0] = vec3(0.5, 0.5, 0.2);\n    colors[1] = vec3(0.0, 1.0, 0.0);\n    colors[2] = vec3(0.2, 0.0, 1.0);\n    colors[3] = vec3(0.0, 0.2, 1.0);\n    const int lines = 16;\n    for (int i = 0; i < lines; ++i)\n    {\n        // Find start and end points for the line\n        l0 = tToEdgePoint(t + float(i) / float(lines), maxXY, offset);\n        l1 = tToEdgePoint(t + float(i) / float(lines) + 0.5, maxXY, offset);\n        \n        // Find shortest distance from line to pixel\n        dist = distanceFromLine(l0, l1, uv);\n        color += .0001 / (dist * dist) * colors[int(mod(float(i), 4.0))];\n        \n        // Add a parabel worth of color (for glow)\n        float x = 4.*dist - 0.3;\n        float a = 18.0;\n        float b = 0.2;\n        color += max((-a*x*x + b) * colors[int(mod(float(i), 4.0))], 0.0); \n    }\n    \n\tfragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdBXDG","date":"1419792230","viewed":221,"name":"Line shader 2","username":"janneasdf","description":"Simple line shader","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","lines"],"hasliked":0,"parentid":"","parentname":""}}