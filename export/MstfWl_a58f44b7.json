{"ver":"0.1","info":{"id":"MstfWl","date":"1527265676","viewed":239,"name":"Blend Func Test","username":"cubisttriangle","description":"Testing different blend functions","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["blending"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Calculate alpha as a percentage of the distance from the band midpoint.\nvec4 calcBandColorLinear(vec3 inColor, vec2 coord, float bandWidth, float bandMidPoint)\n{\n    float halfBandWidth = 0.5 * bandWidth; \n    float upperEdgeOfBand = halfBandWidth + bandMidPoint;\n    float lowerEdgeOfBand = halfBandWidth - bandMidPoint;\n    \n    // In upper half of band\n    if (coord.y > bandMidPoint && coord.y <= upperEdgeOfBand) \n    {\n        float alpha = (upperEdgeOfBand - coord.y) / halfBandWidth;\n        return vec4(inColor, alpha);\n    }\n    // In lower half of band\n    else if (coord.y < bandMidPoint && coord.y >= lowerEdgeOfBand) \n    {\n        float alpha = (lowerEdgeOfBand + coord.y) / halfBandWidth;\n        return vec4(inColor, alpha);\n    }\n    // At the midpoint\n    else if (coord.y == bandMidPoint) \n    {\n        return vec4(inColor, 1.0);\n    }\n    // Outside of band\n    else\n    {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n    }\n}\n\n// glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)\nvec4 oneMinusSrcAlpha(vec4 srcColor, vec4 dstColor)\n{\n    return (srcColor.a * srcColor) + ((1.0 - srcColor.a) * dstColor);\n}\n\n// Pick a blend func for testing\nvec4 blendFunc(vec4 srcColor, vec4 dstColor)\n{\n    return oneMinusSrcAlpha(srcColor, dstColor);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Width of entire band\n    float bandWidth = 0.7;\n    \n    // Center of band on y-axis\n    float bandMidPoint = 0.5;\n    \n    // Band color\n    vec3 bandRgb = vec3(1.0, 0.0, 0.0);\n    \n    // Get texture color from 'Buf A'\n    vec4 texColor = texture(iChannel0, uv);\n    \n    // Get band color\n    vec4 bandColor = calcBandColorLinear(bandRgb, uv, bandWidth, bandMidPoint);\n    \n    // Final output color\n    fragColor = blendFunc(bandColor, texColor);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"bool inLeftHalf(vec2 coord)\n{\n    return coord.x <= 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n        \n    if (inLeftHalf(uv))\n    {\n        fragColor = vec4(0.0,0.0,0.0,0.0);\n    }\n    else\n    {\n        fragColor = vec4(0.3, 0.3, 0.3, 0.5);\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}