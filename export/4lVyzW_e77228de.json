{"ver":"0.1","info":{"id":"4lVyzW","date":"1535357448","viewed":114,"name":"Hash Random Testing","username":"mgear","description":"modifying the original shader from https://www.shadertoy.com/view/XlXcW4","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["hash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// attempt to make 'lite' version of this noise (by random-brute-force-try-method : )\n// Based on https://www.shadertoy.com/view/XlXcW4\n\nconst uint k = 1103515245U;  // GLIB C\n\nfloat hash( uvec2 x )\n{\n//    return float(((x.x+k)^x.y)*k)*0.00000000025;\n    return float(((x.x>>8U)^x.y)*k)*0.00000000025;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uvec2 p = uvec2(fragCoord.xy*float(iFrame));\n    float c = hash(p);\n    fragColor = vec4(c,c,c,1.0 );\n}","name":"Image","description":"","type":"image"}]}