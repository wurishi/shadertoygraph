{"ver":"0.1","info":{"id":"WsGyDy","date":"1605667288","viewed":198,"name":"Lighthouse at Alexandria","username":"Jinkweiq","description":"This is my first attempt at anything realistic. Pls give feedback. If the ocean is white, restart the shader (I think the texture isn't loading before the shader starts running)","likes":4,"published":1,"flags":32,"usePreview":1,"tags":["raymarching","ocean","sky","landscape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    fragColor=texture(iChannel0,fragCoord/iResolution.xy);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float random(in vec2 st){\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise(in vec2 st){\n    vec2 i=floor(st);\n    vec2 f=fract(st);\n    float a=random(i);\n    float b=random(i+vec2(1.,0.));\n    float c=random(i+vec2(0.,1.));\n    float d=random(i+vec2(1.,1.));\n    \n    vec2 u=f*f*(3.-2.*f);\n    \n    return mix(a,b,u.x)+\n    (c-a)*u.y*(1.-u.x)+\n    (d-b)*u.x*u.y;\n}\nvec4 mod289(vec4 x){return x-floor(x*(1./289.))*289.;}\nvec4 perm(vec4 x){return mod289(((x*34.)+1.)*x);}\nvec2 hash2(float n){return fract(sin(vec2(n,n+1.))*vec2(43758.5453123,22578.1459123));}\nfloat noise(vec3 p){\n    vec3 a=floor(p);\n    vec3 d=p-a;\n    d=d*d*(3.-2.*d);\n    \n    vec4 b=a.xxyy+vec4(0.,1.,0.,1.);\n    vec4 k1=perm(b.xyxy);\n    vec4 k2=perm(k1.xyxy+b.zzww);\n    \n    vec4 c=k2+a.zzzz;\n    vec4 k3=perm(c);\n    vec4 k4=perm(c+1.);\n    \n    vec4 o1=fract(k3*(1./41.));\n    vec4 o2=fract(k4*(1./41.));\n    \n    vec4 o3=o2*d.z+o1*(1.-d.z);\n    vec2 o4=o3.yw*d.x+o3.xz*(1.-d.x);\n    \n    return o4.y*d.y+o4.x*(1.-d.y);\n}\n\nfloat fbm6(in vec3 p)\n{\n    float n=0.;\n    n+=1.*noise(p*1.);\n    n+=.50000*noise(p*2.);\n    n+=.25000*noise(p*4.);\n    n+=.12500*noise(p*8.);\n    n+=.06250*noise(p*16.);\n    n+=.03125*noise(p*32.);\n    return n;\n}\n\n\n\n#define OCTAVES 1\nfloat fbm(in vec3 st){\n    // Initial values\n    float value=0.;\n    float amplitude=.5;\n    float frequency=0.;\n    //\n    // Loop of octaves\n    for(int i=0;i<OCTAVES;i++){\n        value+=amplitude*noise(st);\n        st*=2.;\n        amplitude*=.5;\n    }\n    return value;\n}\nfloat fbm(in vec2 st,int oct){\n    // Initial values\n    float value=0.;\n    float amplitude=.5;\n    float frequency=0.;\n    //\n    // Loop of octaves\n    for(int i=0;i<oct;i++){\n        value+=amplitude*noise(st);\n        st*=2.;\n        amplitude*=.5;\n    }\n    return value;\n}\n\nmat2 Rot(float a){\n    float s=sin(a),c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat hash(uint n)\n{\n    n=(n<<13U)^n;\n    n=n*(n*n*15731U+789221U)+1376312589U;\n    return uintBitsToFloat((n>>9U)|0x3f800000U)-1.;\n}\nfloat sdBox(vec3 p,vec3 b)\n{\n    vec3 q=abs(p)-b;\n    return length(max(q,0.))+min(max(q.x,max(q.y,q.z)),0.);\n}\n\nfloat sdPyramid(vec3 p,float h)\n{\n    float m2=h*h+.25;\n    \n    p.xz=abs(p.xz);\n    p.xz=(p.z>p.x)?p.zx:p.xz;\n    p.xz-=.5;\n    \n    vec3 q=vec3(p.z,h*p.y-.5*p.x,h*p.x+.5*p.y);\n    \n    float s=max(-q.x,0.);\n    float t=clamp((q.y-.5*p.z)/(m2+.25),0.,1.);\n    \n    float a=m2*(q.x+s)*(q.x+s)+q.y*q.y;\n    float b=m2*(q.x+.5*t)*(q.x+.5*t)+(q.y-m2*t)*(q.y-m2*t);\n    \n    float d2=min(q.y,-q.x*m2-q.y*.5)>0.?0.:min(a,b);\n    \n    return sqrt((d2+q.z*q.z)/m2)*sign(max(q.z,-p.y));\n}\nfloat sdOctahedron(vec3 p,float s)\n{\n    p=abs(p);\n    return(p.x+p.y+p.z-s)*.57735027;\n}\nfloat sdCappedCylinder(vec3 p,float h,float r)\n{\n    vec2 d=abs(vec2(length(p.xz),p.y))-vec2(h,r);\n    return min(max(d.x,d.y),0.)+length(max(d,0.));\n}\nfloat sdCone(in vec3 p,in vec2 c,float h)\n{\n    vec2 q=h*vec2(c.x/c.y,-1.);\n    \n    vec2 w=vec2(length(p.xz),p.y);\n    vec2 a=w-q*clamp(dot(w,q)/dot(q,q),0.,1.);\n    vec2 b=w-q*vec2(clamp(w.x/q.x,0.,1.),1.);\n    float k=sign(q.y);\n    float d=min(dot(a,a),dot(b,b));\n    float s=max(k*(w.x*q.y-w.y*q.x),k*(w.y-q.y));\n    return sqrt(d)*sign(s);\n}\nfloat opSmoothUnion(float d1,float d2,float k)\n{\n    float h=max(k-abs(d1-d2),0.);\n    return min(d1,d2)-h*h*.25/k;\n    //float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    //return mix( d2, d1, h ) - k*h*(1.0-h);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define pi acos(-1.)\n\n#define MAX_STEPS 100\n#define MAX_DIST 75.\n#define SURF_DIST.001\n\nvec3 skySun=vec3(.7,.1,.5);// ye old two suns trick\nvec3 sun=normalize(vec3(.7,.1,2.));\nvec3 sunCol=vec3(1.2,.30,.05)/1.2;\nvec3 skyCol=vec3(.3,.4,.6)*.3;\n//vec3 light=vec3(-2.6,2.15,2.);//vec3(-2.6,2.15,2.);\n\nvec2 lighthouse(vec3 p){\n    float dw=1000.;//distance to windows\n    // main\n    float d=sdPyramid(p,7.5);\n    d=max(d,p.y-2.);\n    //return d;\n    vec3 bp=p;\n    //4*symmetry\n    bp.xz*=Rot(pi/4.);\n    float an=pi/float(4.);\n    float bn=mod(atan(bp.x,bp.z),2.*an)-an;\n    bp.xz=length(bp.xz)*vec2(cos(bn),abs(sin(bn)));\n    //cutouts\n    vec3 nbp=bp;\n    bp+=vec3(-.5,.5,0);\n    //main box\n    d=max(d,-sdBox(bp,vec3(.15,2.13,.3)));\n    bp.y-=2.3;\n    //top box\n    d=max(d,-sdBox(bp,vec3(.15,.07,.3)));\n    //bricks\n    vec3 fp=1.-smoothstep(.0,fbm(p*500.)*.4,abs(fract(bp*vec3(40.,60.+fbm(p*30.)*.4,40.))-.5));\n    d+=max(fp.z,fp.y)*.001;\n    //walls\n    vec3 wp=nbp;\n    wp.x-=1.;\n    float wd=sdBox(wp,vec3(.1,.24,2.3));\n    wd=min(wd,sdBox(wp-vec3(.1,.26,.0),vec3(.02,.03,2.3)));\n    wp-=vec3(.0,-.1,1.);\n    wd=min(wd,max(sdPyramid(wp*3.,4.)/2.,p.y-.4)-fbm(p*3.)*.03);\n    float b=sdBox(wp-vec3(0,.51,0.),vec3(.12,.01,.12))-fbm(p*3.)*.02;\n    b=max(b,-(sdBox(wp-vec3(0,.5,0.),vec3(.1,1.,.11))));\n    wd=min(wd,b);\n    wd=max(wd,-(sdBox(wp-vec3(0.,-.3,-1.),vec3(.4,.5,.13))));\n    d=min(d,wd);\n    float wwd=sdBox(wp-vec3(0.,-.3,-1.),vec3(.4,.5,.13));\n    wwd=min(wwd,sdBox(wp-vec3(.1,.32,.0),vec3(.034,.06,.04)));\n    wp.z=mod(wp.z+1.,.15);\n    wp.z-=.075;\n    wwd=min(wwd,sdBox(wp-vec3(0,.15,0),vec3(.105,.02,.01)));\n    wwd=min(wwd,sdBox(wp-vec3(0,.25,0),vec3(.105,.02,.01)));\n    d=max(d,-max(wwd,sdBox(p+vec3(0,-.05,0),vec3(1.15,.2,1.15))));\n    d=min(d,sdBox(wp-vec3(.07,.14,-.065),vec3(.05,.2,.01)));\n    //brim\n    d=min(d,sdBox(bp-vec3(-.01,.23,0),vec3(.01,.015,.5)));\n    vec3 tbp=bp;\n    tbp.z=mod(tbp.z,.1);\n    d=min(d,sdBox(tbp-vec3(0.,.25,.04),vec3(.01,.015,.02)));\n    //windows\n    bp.y+=.72;\n    float o=-sdBox(bp+vec3(0,.2,0),vec3(.2,.76,.26));\n    bp.x+=.15;\n    bp.zy=mod(bp.zy,.08);\n    bp.y-=.04;\n    bp.z-=.04;\n    float w=-sdBox(bp,vec3(.011,.02,.014));\n    w=min(w,o);\n    dw=max(-w,0.);\n    d=max(d,w);\n    //lines\n    bp=nbp;\n    bp.y-=.8;\n    b=sdBox(bp,vec3(.5,.9,.35));\n    bp.z-=.04;\n    bp.z=mod(bp.z,.08);\n    bp.z-=.04;\n    bp.x-=.35;\n    float b2=sdBox(bp,vec3(.01,.85,.01));\n    b=max(b,b2);\n    d=min(d,b2);\n    //cap\n    d=min(d,sdPyramid((p+vec3(0,-2,0))*vec3(1,-1,1),.2));\n    d=min(d,sdBox(p+vec3(0,-2.01,0),vec3(.5,.011,.5)));\n    //corner cap\n    vec3 op=p;\n    op.xz=abs(op.xz);\n    op.xz-=.45;\n    op.y-=2.05;\n    op.xz*=Rot(pi/4.);\n    d=min(d,sdBox(op,vec3(.01,.03,.01)));\n    op.y-=.03;\n    op.xz*=Rot(pi/4.);\n    d=min(d,sdOctahedron(op,.03));\n    //top box\n    b=sdBox(p-vec3(0,2.,0),vec3(.3,.15,.3));\n    b=min(b,sdPyramid((p-vec3(0,2.15,0))*vec3(1.65,1.,1.65),.4));\n    fp=1.-smoothstep(.0,fbm(p*500.)*.2,abs(fract(bp*vec3(0.,40.+fbm(p*30.)*.4,20.))-.5));\n    b+=max(fp.y,fp.z)*.002;\n    b-=fbm(p*30.)*.003;\n    d=min(d,b);\n    d=max(d,p.y-2.25);\n    //top octogon\n    bp=p;\n    // bp.xz*=Rot(pi/4.);\n    an=pi/float(8.);\n    bn=mod(atan(bp.x,bp.z),2.*an)-an;\n    bp.xz=length(bp.xz)*vec2(cos(bn),abs(sin(bn)));\n    bp.y-=2.4;\n    b=sdBox(bp,vec3(.2,.25,1.));\n    //more bricks\n    fp=1.-smoothstep(.0,fbm(p*500.)*.4,abs(fract(bp*vec3(0.,60.+fbm(p*30.)*.4,40.))-.5));\n    b+=max(fp.y,fp.z)*.001;\n    b-=fbm(p*30.)*.01;\n    d=min(d,b);\n    d=min(d,sdBox(bp-vec3(.2,.257,0),vec3(.02,.03,.02)));\n    d=min(d,sdBox(bp-vec3(.2,.257,0),vec3(.01,.015,.2)));\n    //windows\n    o=-sdBox(bp-vec3(0,.04,0),vec3(.4,.15,1.));\n    bp.x-=.2;\n    bp.y=mod(bp.y,.1);\n    bp.y-=.05;\n    w=-sdBox(bp,vec3(.02,.03,.02));\n    d=max(d,min(w,o));\n    //top cyl\n    bp=p;\n    bp.y-=2.8;\n    d=min(d,sdCappedCylinder(bp,.11,.2)+fbm(p*10.)*.01);\n    bp.y-=.2;\n    d=min(d,sdCappedCylinder(bp,.12,.01));\n    d=min(d,sdCappedCylinder(bp,.12,.01));\n    bp.y-=.26;\n    d=min(d,sdCone(bp,vec2(.1,.15),.16));\n    //top cyl columns\n    bp=p;\n    bp.y-=3.05;\n    an=pi/float(8.);\n    bn=mod(atan(bp.x,bp.z),2.*an)-an;\n    bp.xz=length(bp.xz)*vec2(cos(bn),abs(sin(bn)));\n    bp.x-=.08;\n    d=min(d,sdCappedCylinder(bp,.015,.05));\n    d=max(d,p.y-3.24);\n    // base\n    b=sdBox(p+vec3(0,.25,0),vec3(1.2,.2,1.2));//+.03-fbm(p)*.15;\n    // fp=1.-smoothstep(.0,fbm(p*30.)*.12,abs(fract(p*vec3(6.,10.+fbm(p*3.)*.1,4.))-.5));\n    // b+=max(fp.x,max(fp.y,fp.z))*.005;\n    d=min(d,b);\n    \n    return vec2(d,dw);\n}\nfloat terrain(vec3 p){\n    float c=1.;\n    vec3 tp=p;\n    tp*=2.;\n    float t=fbm6(tp);\n    float d=length(p-vec3(-2.2,-6.,2.1))-5.;\n    d=opSmoothUnion(d,length(p-vec3(-2.,-6.2,1.))-5.,.2);\n    d=opSmoothUnion(d,length(p-vec3(0.,-6.2,3.3))-5.,.2);\n    d=opSmoothUnion(d,length(p-vec3(2.,-6.3,3.8))-5.,.2);\n    d=opSmoothUnion(d,length(p-vec3(-4.,-8.1,-1.))-7.5,.5);\n    \n    d+=t*opSmoothUnion(1.*(p.y+1.1),.1,.1);\n    \n    return d;\n}\nfloat ocean(vec3 p){\n    float d=0.;\n    d+=.100000*noise(p.xz*1.);\n    d+=.050000*noise(p.xz*2.);\n    d+=.025000*noise(p.xz*4.);\n    d+=.012500*noise(p.xz*8.);\n    d+=.006250*noise(p.xz*16.);\n    d+=.003125*noise(p.xz*32.);\n    d*=.4;\n    return d+p.y+1.5;\n}\nstruct ddata{\n    float x;\n    float c;\n    float dw;\n};\nddata mapFast(vec3 p,vec3 rd){\n    float d=10000.;\n    float dw=10000.;\n    if(rd.x<-.15&&abs(rd.y)<.38){\n        vec3 lp=p;\n        lp+=vec3(2.6,.8,-2.);\n        lp.xz*=Rot(.5*pi);\n        vec2 ld=lighthouse(lp);\n        dw=ld.y;\n        d=min(d,ld.x);\n    }\n    float t=10000.;\n    if(rd.y<0.){\n        vec3 tp=p;\n        tp+=vec3(.3,0.,-.7);\n        t=terrain(tp)-(.02-clamp(d*.1,0.,.02));\n    }\n    float o=ocean(p);\n    float c=0.;\n    if(d>t){\n        d=t;\n        c=1.;\n    }\n    if(d>o){\n        d=o;\n        c=2.;\n    }\n    return ddata(d,c,dw);\n}\nfloat map(vec3 p){\n    vec3 lp=p;\n    lp+=vec3(2.6,.8,-2.);\n    lp.xz*=Rot(.5*pi);\n    float d=lighthouse(lp).x;\n    vec3 tp=p;\n    tp+=vec3(.3,0.,-.7);\n    float t=terrain(tp)-(.02-clamp(d*.1,0.,.02));\n    float o=ocean(p);\n    if(d>t){\n        d=t;\n    }\n    if(d>o){\n        d=o;\n    }\n    return d;\n}\nstruct ray{\n    float d;\n    float s;\n    float c;\n    float dw;\n};\nray RayMarch(vec3 ro,vec3 rd){\n    ray d=ray(1.,0.,0.,10000.);\n    \n    for(int i=0;i<MAX_STEPS;i++){\n        vec3 p=ro+rd*d.d;\n        ddata dS=mapFast(p,rd);\n        d.d+=dS.x;\n        d.c=dS.c;\n        d.dw=min(d.dw,dS.dw);\n        d.s=float(i);\n        if(d.d>MAX_DIST||abs(dS.x)<SURF_DIST)break;\n    }\n    \n    return d;\n}\nvec3 GetNormal(vec3 p,vec3 rd){\n    vec3 n=vec3(0.);\n    for(int i=0;i<4;i++)\n    {\n        vec3 e=.5773*(2.*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.);\n        n+=e*mapFast(p+.0005*e,rd).x;\n        if(n.x+n.y+n.z>100.)break;\n    }\n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv,vec3 p,vec3 l,float z){\n    vec3 f=normalize(l-p),\n    r=normalize(cross(vec3(0,1,0),f)),\n    u=cross(f,r),\n    c=f*z,\n    i=c+uv.x*r+uv.y*u,\n    d=normalize(i);\n    return d;\n}\nfloat softShadow(vec3 ro,vec3 lp){\n    vec3 rd=normalize(lp);\n    float mh=10000.;\n    float res=1.;\n    for(float t=SURF_DIST;t<10.;)\n    {\n        float h=map(ro+rd*t);\n        res = min( res, 32.*h/t );\n        if(h<SURF_DIST)\n        \treturn 0.;\n        t+=h;\n    }\n    return res;\n}\nvec3 skyColor(in vec3 ro,in vec3 rd)\n{\n    rd.y+=.03;\n    vec3 col=skyCol-.3*rd.y*.7;\n    \n    float t=(1000.-ro.y)/rd.y;\n    if(t>0.)\n    {\n        vec2 uv=(ro+t*rd).xz;\n        float cl=texture(iChannel0,.00001*uv.yx).x;\n        cl=smoothstep(.3,.7,cl);\n        col=mix(col,vec3(.2,.2,.1),.1*cl);\n        cl-=smoothstep(.3,.7,0.1);\n        cl=clamp(cl,0.,1.);\n        col=mix(col,sunCol*.5,.1*cl);\n    }\n    \n    float sd=pow(clamp(.25+.75*dot(normalize(skySun),rd),0.,1.),4.);\n    col=mix(col,sunCol,sd*exp(-abs((60.-50.*sd)*rd.y)));\n    \n    return col;\n}\nvec4 textureBox(in sampler2D tex,in vec3 pos,in vec3 nor)\n{\n    vec4 cx=texture(tex,pos.yz);\n    vec4 cy=texture(tex,pos.xz);\n    vec4 cz=texture(tex,pos.xy);\n    vec3 m=nor*nor;\n    return(cx*m.x+cy*m.y+cz*m.z)/(m.x+m.y+m.z);\n}\n\nfloat calcOcclusion(in vec3 pos,in vec3 nor,float ra,vec3 rd)\n{\n    float occ=0.;\n    float sca=1.;\n    for(int i=0;i<5;i++)\n    {\n        float h=.01+.12*float(i)/4.;\n        float d=map(pos+h*nor);\n        occ+=(h-d)*sca;\n        sca*=.95;\n        if(occ>.35)break;\n    }\n    return clamp(1.-3.*occ,0.,1.)*(.5+.5*nor.y);\n}\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 uv=(fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    \n    float ran=hash(uint(fragCoord.x+iResolution.x*fragCoord.y+(iResolution.x*iResolution.y)));\n    vec3 col=vec3(0);\n    \n    vec3 lc=texture(iChannel1,fragCoord/iResolution.xy).xyz;\n    \n    /*\n    if(iFrame<=5){\n        fragColor=vec4(vec3(0),1.);\n        return;\n    }\n    if(lc.x+lc.y+lc.z>.01||ran<.99-float(max(iFrame,0))*.01){\n        fragColor=vec4(lc,1.);\n        return;\n    }\n\t*/\n    \n    vec3 ro=vec3(0,.5,-3);\n    \n    vec3 rd=GetRayDir(uv,ro,vec3(0,.5,0),1.);\n    \n    ray r=RayMarch(ro,rd);\n    vec3 lp=sun;\n    if(r.d<MAX_DIST){\n        vec3 sp=ro+rd*r.d;\n        vec3 sn=GetNormal(sp,rd);\n        \n        vec3 ld=normalize(sun);\n        \n        vec3 objCol=vec3(0.);\n        vec3 N=sn;\n        float rough=0.;\n        float occ=1.;\n        float sha=1.;\n        if(r.c<1.){// tower\n            objCol=vec3(.14,.10,.07)+.02*noise(sp*50.);\n            objCol*=1.15;\n            rough=textureBox(iChannel0,sp,sn).x;\n            N*=textureBox(iChannel0,sp,sn).x;\n            occ=calcOcclusion(sp,sn,ran,rd);\n        }\n        else if(r.c<2.){// land\n            objCol=vec3(.95,.9,.85)*.4*texture(iChannel0,sp.xz*.015).xyz;\n            objCol*=.25+.75*smoothstep(-25.,-24.,sp.y);\n            objCol*=.32;\n            float is_grass=smoothstep(.95,1.,sn.y);\n            \n            objCol=mix(objCol,vec3(.05,.07,.02)+texture(iChannel0,sp.xz*.015).xyz*.1-.05,is_grass);\n            occ=calcOcclusion(sp,sn,ran,rd);\n        }\n        else if(r.c<3.){//ocean\n            //foam\n            float f=texture(iChannel0,sp.xz*2.).x;\n            f*=(terrain(sp)+.9)*3.5+fbm(sp.xz*sp.xz*.001,8)*2.2;\n            f=clamp(f,0.,1.);\n            \n            //sun\n            float fresnel=(.04+(1.-.04)*(pow(1.-max(0.,dot(-sn,rd)),5.)));\n            vec3 R=reflect(rd,sn);\n            objCol=mix(vec3(1.),fresnel*skyColor(ro,R)*2.,f);\n        };\n        \n        //lighing from iq's Greek Temple https://www.shadertoy.com/view/wdKSzd\n        vec3 sunbak=normalize(vec3(-sun.x,0.,-sun.z));\n        float dif=clamp(dot(N,sun),0.,1.);\n        sha=softShadow(sp+N*SURF_DIST,sun);\n        dif*=sha;\n        float amb=(.8+.2*N.y);\n        amb=mix(amb,amb*(.5+.5*smoothstep(-8.,-1.,sp.y)),0.);\n        \n        vec3 qos=sp/1.5-vec3(0.,1.,0.);\n        \n        float bak=clamp(.4+.6*dot(N,sunbak),0.,1.);\n        bak*=.6+.4*smoothstep(-8.,-1.,qos.y);\n        \n        vec3 hal=normalize(sun-rd);\n        \n        float fre=pow(clamp(1.+dot(N,rd),0.,1.),5.);\n        float spe=pow(clamp(dot(N,hal),0.,1.),rough)*(.1+.9*fre)*sha*(.5+.5*occ);\n        col=vec3(0.);\n        col+=amb*1.*vec3(.15,.25,.35)*occ*(1.+0.);\n        col+=dif*7.*vec3(.9,.35,.35)*occ;\n        col+=bak*2.*vec3(.1,.1,.2);\n        col+=spe*10.*rough*occ;\n        \n        col*=objCol;\n        col=clamp(col,0.,1.);\n        \n    }else{\n        col=skyColor(ro,rd);\n    }\n    float fogF=smoothstep(0.,.95,r.d/50.);\n    col=mix(col,skyColor(ro,rd),fogF);\n    \n    col=pow(col,vec3(1./2.2));\n    fragColor=vec4(col,1.);\n    \n    /*\n    if(lc.x+lc.y+lc.z<.01){\n        fragColor=vec4(col,1.);\n    }else{\n        fragColor=vec4((col+lc)/2.,1.);\n    }\n\t*/\n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}