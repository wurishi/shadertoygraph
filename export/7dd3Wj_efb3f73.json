{"ver":"0.1","info":{"id":"7dd3Wj","date":"1673513735","viewed":61,"name":"Fractals 1","username":"malkimanna","description":"Study of Mandelbrot rendering","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","fractals","recursion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\n\nfloat mandelbrot(vec2 pixel)\n{\n    vec2 z = vec2(0.0, 0.0);\n//    vec2 z = iMouse.xy - iResolution.xy / 2.0;\n    float n = 0.0;\n    vec2 offset = vec2(-0.748991, -0.125175);\n    while (length(z) < 2.0 && n < 100.0)\n    {\n        z = vec2(pow(z.x, 2.0) - pow(z.y, 2.0), 2.0 * z.x * z.y);\n        z.x = z.x + pixel.x + offset.x;\n        z.y = z.y + pixel.y + offset.y;\n        n = n + 1.0;\n    }\n    return n;\n}\n\nvec3 colorMandelbrot(float n)\n{\n//    float h = smoothstep(0.0, 100.0, n);\n//    float s = 1.0;\n//    float b = sin(smoothstep(0.0, 100.0, n) * 3.14159265);\n//    return hsb2rgb(vec3(h, s, b));\n   float b = smoothstep(0.0, 33.0, n);\n   float g = smoothstep(33.0, 66.0, n);\n   float r = smoothstep(66.0, 100.0, n);\n   return vec3(r, g, b);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n//    vec3 col = vec3(smoothstep(0.0, 100.0, mandelbrot((fragCoord - vec2(400.0, 225.0)) / 200.0)));\n    float n =  mandelbrot((fragCoord - vec2(400.0, 225.0)) / pow(iTime, 5.0) / 100.0);\n    \n    vec3 col = colorMandelbrot(n);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}