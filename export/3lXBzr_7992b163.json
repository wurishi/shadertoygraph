{"ver":"0.1","info":{"id":"3lXBzr","date":"1596812456","viewed":102,"name":"Worst shader ever - I am new","username":"Khola","description":"I'm one of these people who had pretty spiteful Match teachers and I'm kicking mysekf now for paying less attention. I come for an emerge from a self taught 3D design and modelling are and have really taken a scattergun approach to my learning.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["newbie"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .5\n#define iGlobalTime iTime\nfloat GetDist(vec3 p) {\nvec4 s = vec4(2, 1, 1, 2);\n\nfloat sphereDist = length(p-s.xyz)-s.w;\nfloat planeDist = p.y;\nfloat d = min(sphereDist, planeDist);\n\n\n\n\nreturn d;\n\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=5.;\n    \nfor(int i=1; i<MAX_STEPS; i++) {\n\t\tvec3 p = ro + rd*dO;\n\t\tfloat dS =GetDist(p);\n\t\tdO += dS;\n\t\tif(dO>MAX_DIST || dS<SURF_DIST) break;\n    \n}\n\nreturn dO;\n\n    \n//wanting to move the camera but how?\n{\n    \n//vec3 camPos\t= vec3(.0, .0, 20.);\n    \n    }\n\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d= GetDist(p);\n\tvec2 e = vec2(1, 1);\n\nvec3 n = d - vec3(\n\tGetDist(p-e.xyy),\n\tGetDist(p-e.yxy),\n\tGetDist(p-e.yyx));\n\nreturn normalize(n);\n\n}\n\nfloat GetLight(vec3 p) {\n\tvec3 lightPos = vec3(1, 3, 1);\n\tlightPos.xz += vec2(sin(iTime), cos(iTime))*3.;\n\tvec3 l = normalize(lightPos-p);\n\tvec3 n = GetNormal(p);\n\n\nfloat dif = clamp(dot(n, l), 0., 1.);\nfloat d = RayMarch(p+n*SURF_DIST*2., l);\nif(d<length(lightPos-p)) dif *= .4;\n\nreturn dif;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy) /iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(3);\n\n  //setting up Camera  \n// can move camera with iTime?\nvec3 ro = vec3(1, 3, 1)*cos(iTime);\nvec3 rd = normalize(vec3(uv.x, uv.y, 1));\n\n\n\n\n\nfloat d = RayMarch(ro, rd);\n\nvec3 p = ro + rd * d;\nfloat dif = GetLight(p);\n//?? d/=6.;\ncol = vec3(dif);\n\n\n\n\n\n// Output to screen\n    fragColor = vec4(col,1.2);\n}","name":"Image","description":"","type":"image"}]}