{"ver":"0.1","info":{"id":"WsSczD","date":"1586169689","viewed":349,"name":"Morphahedron","username":"Shapkofil","description":"Morphing between a sphere and a octahedron using a simple displacement transition","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","simple","displacement","sphere","spheretracing","octahedron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float max_distance = 1000.;\nfloat plank = .001;\nint max_iter = 128;\nfloat EPSILON = .001;\n\n\n\n\nfloat displacement(vec3 p, float scale)\n{\n    return sin(scale*p.x)*sin(scale*p.y)*sin(scale*p.z);\n}\n\nfloat octahedronSDF( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\nfloat sceneSDF(vec3 p)\n{\n    return (length(p) - .8)*(cos(iTime)*.5+.5) + octahedronSDF(p,.8)*(cos(iTime+3.14)*.5+.5) + (sin(iTime * 2. - 3.14*.5)*.5+.5) * displacement(p,5.) / 3.;\n}\n\nvec3 estimateNormal(vec3 p)\n{\n\treturn normalize(vec3(\n\t\tsceneSDF(vec3(p.x+EPSILON,p.y,p.z)) - sceneSDF(vec3(p.x-EPSILON,p.y,p.z)),\n\t\tsceneSDF(vec3(p.x,p.y+EPSILON,p.z)) - sceneSDF(vec3(p.x,p.y-EPSILON,p.z)),\n\t\tsceneSDF(vec3(p.x,p.y,p.z+EPSILON)) - sceneSDF(vec3(p.x,p.y,p.z-EPSILON))\n\t\t));\n}\n\nvec3 calculateDeffuse(vec3 p)\n{\n\tvec3 deffuse = vec3(0, 0, 0);\n    vec3 normal = estimateNormal(p);\n    vec3 lightdir = normalize(vec3(2.,2.,-3.) - p);\n    float diff = max(dot(normal,lightdir),0.0);\n    deffuse += diff * (1.,1.,1.);\n\treturn deffuse;\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2. - iResolution.xy)/iResolution.x;\n    vec3 rd = vec3(uv, 1.);\n    \n    vec3 ro = vec3(.0,0.,-3.);\n    \n    vec3 col = vec3(167, 147, 204);\n    \n    for(int iter=0; iter<max_iter; iter++)    \n    {\n        float curr = sceneSDF(ro);\n        \n        //Hit condition\n        if(plank > curr)\n        {\n            col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n            col*= (.1 + calculateDeffuse(ro));\n        }\n            \n        \n        ro += rd*curr;\n    }\n        \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}