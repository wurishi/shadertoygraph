{"ver":"0.1","info":{"id":"Xd3SWX","date":"1461685910","viewed":4773,"name":"Flood Fill","username":"denilsonsa","description":"Flood Fill algorithm implemented in a fragment shader.\n\nHow to use: just click, and watch.\n\nOptionally change the constants, or change the source image.","likes":13,"published":3,"flags":34,"usePreview":1,"tags":["algorithm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Implements a \"Flood Fill\" algorithm in a fragment shader.\n//\n// Most of the logic is inside \"Buf A\" code.\n// The main code only copies from Buffer A onto the screen.\n//\n// 1. Grab a frame from SOURCE and store it at BUFFER.\n//    In this implementation, it happens at the very beginning, and also when clicking.\n// 2. IF this pixel is the clicked one\n//    THEN paint it.\n// 3. IF this pixel is neighbor to a painted pixel.\n//    AND its color is very similar to the clicked pixel.\n//    THEN paint it.\n// 4. Repeat these steps forever.\n//\n// In this case, the painting is done on the alpha channel.\n// A value of 1.0 is opaque/unpainted.\n// A value of 0.0 is transparent/painted.\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec4 pixel = texture(iChannel0, uv);\n    vec3 blinking = vec3(0.5 + 0.5 * sin(-iTime * 2.0 * 3.1415 + fragCoord.x - fragCoord.y));\n\n    fragColor.xyz = (pixel.w * pixel.xyz) + (1.0 - pixel.w) * blinking;\n    fragColor.w = 1.0;\n\n    // Debugging:\n    if (false) {\n        fragColor.x += 5.0 / distance(iMouse.xy, fragCoord);\n        fragColor.y += 5.0 / distance(iMouse.zw, fragCoord);\n        fragColor.z += 5.0 / distance(-iMouse.zw, fragCoord);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define COLOR_TOLERANCE 0.03125\n#define CLICK_TOLERANCE 1.0\n\n#define SOURCE iChannel0\n#define BUFFER iChannel1\n\nvec2 uv(vec2 coords) {\n    return coords.xy / iResolution.xy;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Thanks to: https://www.shadertoy.com/view/ldjSzd\n    // For explaining how the mouse coordinates work in ShaderToy.\n    bool is_mouse_down = !(iMouse.z < 0.0);\n    vec2 mouse_coords = iMouse.xy;\n\n    if (is_mouse_down || iTime <= 0.125) {\n        // Just update the buffer with a new copy of the source frame.\n    \tfragColor = texture(SOURCE, uv(fragCoord.xy));\n        fragColor.w = 1.0;\n    } else {\n        // Flood fill.\n\n        vec4 thispixel = texture(BUFFER, uv(fragCoord.xy));\n        vec4 clickpixel = texture(BUFFER, uv(mouse_coords));\n        vec4 north = texture(BUFFER, uv(fragCoord.xy + vec2( 0.0,  1.0)));\n        vec4 south = texture(BUFFER, uv(fragCoord.xy + vec2( 0.0, -1.0)));\n        vec4 east  = texture(BUFFER, uv(fragCoord.xy + vec2( 1.0,  0.0)));\n        vec4 west  = texture(BUFFER, uv(fragCoord.xy + vec2(-1.0,  0.0)));\n\n        fragColor = thispixel;\n\n        if (distance(fragCoord.xy, mouse_coords) < CLICK_TOLERANCE) {\n            // Initial pixel of the flood fill.\n            // All filled pixels have alpha=0.\n            fragColor.w = 0.0;\n        } else if (\n            north.w == 0.0 ||\n            south.w == 0.0 ||\n            west.w  == 0.0 ||\n            east.w  == 0.0\n        ) {\n            // This pixel is neighbor to a filled pixel.\n            // Should this one be filled as well?\n            if (distance(thispixel.xyz, clickpixel.xyz) < COLOR_TOLERANCE) {\n            \tfragColor.w = 0.0;\n            }\n        }\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}