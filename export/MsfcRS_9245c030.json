{"ver":"0.1","info":{"id":"MsfcRS","date":"1488645227","viewed":488,"name":"Simple Ping","username":"asmith13","description":"Simple Ping. With tutorial Comments.\n\nEdit: Some comments to help new programmers to understand what is going on.\nAdded a illustration what is going on. great source for undestanding smoothstep:\nhttp://www.fundza.com/rman_shaders/smoothstep/ ","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["radar","ping","sweep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Author: asmith13\n//Free to use as you wish. Have fun\n\n// Radar Bip\n//https://www.shadertoy.com/view/4s2SRt by ndel\n//https://www.shadertoy.com/view/Xsy3zG by Andre\n// mainly from https://www.shadertoy.com/view/MtdGW7 runekill\n\n#define green vec3(0.0,1.0,0.0)\n#define red vec3(1.0,0.0,0.0)\n#define blue vec3(0.0,0.0,1.0)\n\n// returns a vec3 color from every pixel requested.\n// Generates a BnW Ping on normalized 2d coordinate system\nvec3 RadarPing(in vec2 uv, in vec2 center, in float innerTail, \n               in float frontierBorder, in float timeResetSeconds, \n               in float radarPingSpeed, in float fadeDistance)\n{\n    vec2 diff = center-uv;\n    float r = length(diff);\n    float time = mod(iTime, timeResetSeconds) * radarPingSpeed;\n   \n    float circle;\n    // r is the distance to the center.\n    // circle = BipCenter---//---innerTail---time---frontierBorder\n    //illustration\n    //https://sketch.io/render/sk-14b54f90080084bad1602f81cadd4d07.jpeg\n    circle += smoothstep(time - innerTail, time, r) * smoothstep(time + frontierBorder,time, r);\n\tcircle *= smoothstep(fadeDistance, 0.0, r); // fade to 0 after fadeDistance\n        \n    return vec3(circle);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    //normalize coordinates \n    vec2 uv = fragCoord.xy / iResolution.xy; //move coordinates to 0..1\n    uv = uv.xy*2.; // translate to the center\n    uv += vec2(-1.0, -1.0);\n    uv.x *= iResolution.x/iResolution.y; //correct the aspect ratio\n    \n\tvec3 color;\n    // generate some radar pings\n    float fadeDistance = 1.0;\n    float resetTimeSec = 4.0;\n    float radarPingSpeed = 0.3;\n    vec2 greenPing = vec2(-1.0, 0.0);\n    vec2 redPing   = vec2( 0.0, 0.0);\n    vec2 bluePing  = vec2( 1.0, 0.0);\n    color += RadarPing(uv, greenPing, 0.25, 0.025, resetTimeSec, radarPingSpeed, fadeDistance) * green;\n    color += RadarPing(uv, redPing, .01, 0.01, resetTimeSec, radarPingSpeed, fadeDistance) * red;\n    color += RadarPing(uv, bluePing, .01, 0.5, resetTimeSec, radarPingSpeed, fadeDistance) * blue;\n    \n    //return the new color\n\tfragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}