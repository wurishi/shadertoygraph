{"ver":"0.1","info":{"id":"lcdSDS","date":"1714413641","viewed":54,"name":"Fork Psychedeli sleeplessm 436","username":"sleeplessmonk","description":"Circle fractal","likes":1,"published":1,"flags":4,"usePreview":0,"tags":["fractal","circles","psychedelic"],"hasliked":0,"parentid":"dtVSRw","parentname":"Psychedelic fractal"},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Declare global constants and variables\nconst float PI = 3.141592654;\nconst float ringsCount = 20.0;  // Declare ringsCount here\n\nvec3 palette(in float t) {\n    vec3 a = vec3(0.8, 0.5, 0.4);\n    vec3 b = vec3(0.2, 0.4, 0.2);\n    vec3 c = vec3(2.0, 1.0, 1.0);\n    vec3 d = vec3(0.00, 0.25, 0.25);\n    \n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    float d0 = length(uv);\n\n    // Modifying UV based on a function of d0 and a scaling factor\n    uv = fract(uv / ((d0 + 1.) * 0.3)) - .5;\n    \n    float d = length(uv);\n    \n    uv = fract(uv * (d0 + 2.)) - .5;\n    \n    d0 -= .7 + sin(iTime * .4) / 1.5;\n    d0 = 0.08 / d0;\n    \n    d = fract(d - d0) * 2.;\n    d = fract(d - d0);\n    d = sin((d * ringsCount) + 3.) / ringsCount;  // Uses ringsCount\n    d = abs(d);\n    d = ((sin((iTime) * 1.5) + 1.8) * 0.003) / d;\n    \n    vec3 col = vec3(palette(length(uv) + d0 + (iTime * .4)));\n\n    col *= d - ((d0 + cos(iTime * 2.)) * 0.3);\n    \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}