{"ver":"0.1","info":{"id":"7ljczz","date":"1649253562","viewed":1195,"name":"20220405_Eucredian Rhythms","username":"0b5vr","description":"Implemented eucredian rhythms for the first time, along with fancy visualization for no reason\nRhythm differs from the original paper\n\nOriginal paper: http://cgm.cs.mcgill.ca/~godfried/publications/banff.pdf","likes":72,"published":1,"flags":8,"usePreview":0,"tags":["2d","audio","techno","rhythms"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// (c) 2022 0b5vr, MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// constants\nconst vec3 BACKGROUND_COLOR = vec3( 0.12, 0.13, 0.15 );\nconst vec3 TICK_COLOR = vec3( 1.0, 0.1, 0.4 );\nconst vec3 OUTLINE_COLOR = vec3( 0.0, 0.0, 0.0 );\n\n// sdf\nfloat sdcapsule( vec2 p, vec2 tail ) {\n    float h = clamp( dot( p, tail ) / dot( tail, tail ), 0.0, 1.0 );\n    return length( p - ( tail * h ) );\n}\n\nvoid drawEuclideanCircle( vec2 p, vec3 color, float pulses, float steps, float offset, inout vec4 fragColor ) {\n    // early return if the p is not within the circle\n    if ( length( p ) > 0.5 ) { return; }\n    \n    vec2 pt = p;\n    \n    float phase = iTime * BPS * 4.0 / steps;\n    float currentStep = mod( iTime * BPS * 4.0, steps );\n    \n    // hit effect\n    {\n        float beat = iTime * TIME2BEAT;\n        float t = euclideanRhythmsInteg( pulses, steps, 4.0 * beat - offset ) / 4.0 * BEAT2TIME;\n\n        float radius = mix( 0.15, 0.1, exp( -10.0 * t ) );\n        float d = length( p ) - radius;\n\n        float shape = smoothstep( 4.0 / iResolution.y, 0.0, d );\n        fragColor.rgb = mix(\n            fragColor.rgb,\n            color,\n            shape * exp( -10.0 * t )\n        );\n    }\n    \n    // steps, using polar mod\n    {\n        pt = pt.yx;\n        float angle = atan( pt.y, pt.x );\n        float iStep = mod( floor( angle / TAU * steps + 0.5 ), steps );\n        pt = pt * rotate2D( iStep / steps * TAU );\n\n        bool isPulse = euclideanRhythms( pulses, steps, iStep - offset );\n        \n        if ( isPulse ) {\n            float elapsed = mod( currentStep - iStep, steps );\n\n            float radius = ( 0.02 + 0.02 * exp( -elapsed ) );\n            float d = sdcapsule( pt - vec2( 0.32, 0.0 ), vec2( 0.06, 0.0 ) ) - radius;\n\n            float outline = smoothstep( 4.0 / iResolution.y, 0.0, d - 0.01 );\n            float shape = smoothstep( 4.0 / iResolution.y, 0.0, d );\n            vec3 colort = mix( color, vec3( 1.0 ), exp( -elapsed ) );\n            fragColor.rgb = mix(\n                fragColor.rgb,\n                mix( OUTLINE_COLOR, colort, shape ),\n                outline\n            );\n        } else {\n            float d = length( pt - vec2( 0.35, 0.0 ) ) - 0.015;\n\n            float outline = smoothstep( 4.0 / iResolution.y, 0.0, d - 0.01 );\n            float shape = smoothstep( 4.0 / iResolution.y, 0.0, d );\n            fragColor.rgb = mix(\n                fragColor.rgb,\n                mix( OUTLINE_COLOR, color, shape ),\n                0.5 * outline\n            );\n        }\n    }\n    \n    // time tick\n    {\n        vec2 tail = 0.4 * vec2( sin( phase * TAU ), cos( phase * TAU ) );\n        float d = sdcapsule( p, tail ) - 0.005;\n\n        float shadow = smoothstep( 0.05, 0.0, d );\n        fragColor.rgb = mix( fragColor.rgb, vec3( 0.0 ), 0.3 * pow( shadow, 2.0 ) );\n\n        float shape = smoothstep( 4.0 / iResolution.y, 0.0, d );\n        fragColor.rgb = mix( fragColor.rgb, TICK_COLOR, shape );\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 p = ( uv * 2.0 - 1.0 ) * vec2( iResolution.x / iResolution.y, 1.0 );\n    \n    fragColor = vec4( BACKGROUND_COLOR, 1.0 );\n    \n    drawEuclideanCircle( p - vec2( -1.15, 0.5 ), vec3( 0.9, 0.4, 0.4 ), KICK_PULSES, KICK_STEPS, KICK_OFFSET, fragColor );\n    drawEuclideanCircle( p - vec2( -0.15, 0.5 ), vec3( 0.9, 0.7, 0.3 ), HIHAT_PULSES, HIHAT_STEPS, HIHAT_OFFSET, fragColor );\n    drawEuclideanCircle( p - vec2( 0.85, 0.5 ), vec3( 0.5, 0.6, 0.8 ), SNARE_PULSES, SNARE_STEPS, SNARE_OFFSET, fragColor );\n    drawEuclideanCircle( p - vec2( -0.85, -0.5 ), vec3( 0.5, 0.7, 0.3 ), HITOM_PULSES, HITOM_STEPS, HITOM_OFFSET, fragColor );\n    drawEuclideanCircle( p - vec2( 0.15, -0.5 ), vec3( 0.2, 0.7, 0.5 ), LOTOM_PULSES, LOTOM_STEPS, LOTOM_OFFSET, fragColor );\n    drawEuclideanCircle( p - vec2( 1.15, -0.5 ), vec3( 0.5, 0.8, 0.8 ), RIM_PULSES, RIM_STEPS, RIM_OFFSET, fragColor );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"vec2 kick( float t ) {\n    float phase = 45.0 * t - 6.0 * exp( -40.0 * t ) - 3.0 * exp( -400.0 * t );\n    float decay = exp( -3.0 * t );\n    return vec2( decay * sin( TAU * phase ) );\n}\n\nvec2 hihat( float t ) {\n    float decay = exp( -50.0 * t );\n    vec2 sig = 1.0 - 2.0 * texture( iChannel0, vec2( vec2( 140.0, 136.0 ) * t ) ).xy;\n    sig -= 1.0 - 2.0 * texture( iChannel0, vec2( vec2( 140.0, 136.0 ) * t + 0.007 ) ).xy; // pseudo high pass. shoutouts to aaaidan\n    return sig * decay;\n}\n\nvec2 snare( float t ) {\n    float decay = exp( -t * 20.0 );\n    vec2 snappy = texture( iChannel0, vec2( vec2( 70.0, 76.0 ) * t ) ).xy;\n    vec2 head = sin( TAU * ( t * 280.0 * vec2( 1.005, 0.995 ) - exp( -t * 100.0 ) ) );\n  return clip( ( 3.0 * snappy * head ) * decay );\n}\n\nvec2 rimshot( float t ) {\n    float attack = exp( -t * 400.0 ) * 0.6;\n    vec2 wave = (\n        tri( t * 450.0 * vec2( 1.005, 0.995 ) - attack ) +\n        tri( t * 1800.0 * vec2( 0.995, 1.005 ) - attack )\n    );\n    return clip( 2.0 * wave * exp( -t * 300.0 ) );\n}\n\nvec2 tom( float t, float freq ) {\n    float phase = freq * t - 5.0 * exp( -30.0 * t ) - 2.0 * exp( -100.0 * t );\n    float decay = exp( -20.0 * t );\n    return vec2( decay * sin( 2.0 * sin( TAU * phase ) ) );\n}\n\nvec2 mainSound( int samp, float time ) {\n    float beat = time * TIME2BEAT;\n    \n    vec2 dest = vec2( 0.0 );\n    \n    float tKick = euclideanRhythmsInteg( KICK_PULSES, KICK_STEPS, 4.0 * beat - KICK_OFFSET ) / 4.0 * BEAT2TIME;\n    dest += 0.5 * kick( tKick );\n    \n    float tHihat = euclideanRhythmsInteg( HIHAT_PULSES, HIHAT_STEPS, 4.0 * beat - HIHAT_OFFSET ) / 4.0 * BEAT2TIME;\n    dest += 0.2 * hihat( tHihat );\n    \n    float tSnare = euclideanRhythmsInteg( SNARE_PULSES, SNARE_STEPS, 4.0 * beat - SNARE_OFFSET ) / 4.0 * BEAT2TIME;\n    dest += 0.3 * snare( tSnare );\n    \n    float tHiTom = euclideanRhythmsInteg( HITOM_PULSES, HITOM_STEPS, 4.0 * beat - HITOM_OFFSET ) / 4.0 * BEAT2TIME;\n    dest += vec2( 0.2, 0.1 ) * tom( tHiTom, 180.0 );\n    \n    float tLoTom = euclideanRhythmsInteg( LOTOM_PULSES, LOTOM_STEPS, 4.0 * beat - LOTOM_OFFSET ) / 4.0 * BEAT2TIME;\n    dest += vec2( 0.1, 0.2 ) * tom( tLoTom, 120.0 );\n    \n    float tRim = euclideanRhythmsInteg( RIM_PULSES, RIM_STEPS, 4.0 * beat - RIM_OFFSET ) / 4.0 * BEAT2TIME;\n    dest += 0.2 * rimshot( tRim );\n\n    return clip( dest );\n}\n","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"#define saturate(i) clamp(i,0.,1.)\n#define clip(i) clamp(i,-1.,1.)\n#define lofi(i,j) (floor((i)/(j))*(j))\n#define tri(p) (1.-4.*abs(fract(p)-0.5))\n\n// constants that you might want to tweak\nconst float BPM = 140.0;\n\nconst float KICK_PULSES = 4.0;\nconst float KICK_STEPS = 16.0;\nconst float KICK_OFFSET = 0.0;\n\nconst float HIHAT_PULSES = 13.0;\nconst float HIHAT_STEPS = 16.0;\nconst float HIHAT_OFFSET = 0.0;\n\nconst float SNARE_PULSES = 3.0;\nconst float SNARE_STEPS = 16.0;\nconst float SNARE_OFFSET = 4.0;\n\nconst float HITOM_PULSES = 3.0;\nconst float HITOM_STEPS = 10.0;\nconst float HITOM_OFFSET = 1.0;\n\nconst float LOTOM_PULSES = 5.0;\nconst float LOTOM_STEPS = 13.0;\nconst float LOTOM_OFFSET = 2.0;\n\nconst float RIM_PULSES = 3.0;\nconst float RIM_STEPS = 5.0;\nconst float RIM_OFFSET = 0.0;\n\n// constants\nconst float PI = acos( -1.0 );\nconst float TAU = PI * 2.0;\nconst float SQRT2 = sqrt( 2.0 );\n\nconst float BPS = BPM / 60.0;\nconst float TIME2BEAT = BPS;\nconst float BEAT2TIME = 1.0 / BPS;\n\n// common\nmat2 rotate2D( float t ) {\n    float c = cos( t );\n    float s = sin( t );\n    return mat2( c, s, -s, c );\n}\n\n// euclidean rhythms stuff\nbool euclideanRhythms( float pulses, float steps, float i ) {\n    float t = mod( i * pulses, steps );\n    return t - pulses < 0.0;\n}\n\nfloat euclideanRhythmsInteg( float pulses, float steps, float time ) {\n    float t = mod( floor( time ) * pulses, steps );\n    return floor( ( t - pulses ) / pulses ) + 1.0 + fract( time );\n}\n","name":"Common","description":"","type":"common"}]}