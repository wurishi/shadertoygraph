{"ver":"0.1","info":{"id":"XcKGzG","date":"1712946509","viewed":116,"name":"New Dreamy Star Field","username":"pengliu916","description":"Tutorial","likes":7,"published":1,"flags":0,"usePreview":1,"tags":["starfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n#define MAXOFFSET 0.8\n#define LAYERS 8.0\nfloat star(float fTheta, float fR) {\n    float fBSignal = max(1.0 - fR * 2.0, 0.0);\n    float fFSignal = cos(fTheta * 5.0) * 0.5 + 0.5;\n    float fFallOff = clamp(1.0 - fR * 2.0, 0.0, 1.0);\n    float fSignal = fBSignal - fFSignal * fR;\n    return clamp(fSignal, 0.0, 1.0);\n}\n\n// --------------------------------------------------------\n// Palettes\n// iq https://www.shadertoy.com/view/ll2GD3\n// --------------------------------------------------------\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b * cos( PI * 2.0 * (c * t + d) );\n}\n\nmat2 rot(float angle) {\n    return mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 f2xyG = fragCoord/iResolution.xy - vec2(0.5);\n    f2xyG.y /= float(iResolution.x)/float(iResolution.y);\n    f2xyG *= 2.0; // give [-1,1] range\n    \n    vec3 f3TotalCol = vec3(0.0);\n    \n    for(float i = 0.0; i < LAYERS; ++i) {\n        vec2 f2xy = f2xyG;\n        f2xy = f2xy * rot(i * 2.0) + vec2(0.03, 0.04) * i;\n        float fDuration = LAYERS;\n        float fTick = mod(iTime * 0.5 + i, fDuration);\n        float fDistance = (fDuration - fTick)*0.25;\n        float fVisualSize = 1.0/fDistance;\n        f2xy /= fVisualSize;\n        \n        float fLumaFactor = 0.5/fDistance/fDistance;\n        \n        float fRepetition = 5.0;\n        f2xy *= fRepetition;\n        vec2 f2Id = trunc(f2xy + fRepetition);\n        f2xy = mod(f2xy, 1.0);\n        f2xy = f2xy * 2.0 - 1.0;\n        \n        vec3 f3Noise = 2.0 * texture(iChannel0, f2Id * 0.5/fRepetition + i*0.01).rbg - 1.0;\n        vec2 f2Offset = f3Noise.xy * 0.8;\n        f2xy += f2Offset;\n        \n        vec2 f2ScaleLimit = vec2(1.0) - abs(f2Offset);\n        float fMaxScale = min(f2ScaleLimit.x, f2ScaleLimit.y);\n        float fScale = mix(0.2, fMaxScale, f3Noise.z * 0.5 + 0.5);\n        f2xy /= fScale;\n        \n        float fTheta = atan(f2xy.y, f2xy.x); float fR = length(f2xy);\n        fTheta += sin(iTime * f3Noise.z + f3Noise.y * 5.0) * 20.0 * f3Noise.x;\n        float fSignal = star(fTheta, fR);\n        \n        vec3 f3Col= pal((f2Id.x * f2Id.y / 10.0 + iTime * f3Noise.z * 3.0), vec3(0.5), vec3(0.5), vec3(1.0), vec3(0.0,0.10,0.20));\n        f3TotalCol += vec3(fSignal) * f3Col * fLumaFactor;\n    }\n    fragColor = vec4(f3TotalCol, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}