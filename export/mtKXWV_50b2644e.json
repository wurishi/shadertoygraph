{"ver":"0.1","info":{"id":"mtKXWV","date":"1686381636","viewed":88,"name":"magnet123","username":"chenxianming","description":"magnet123","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define X .122\n#define Y .155\n#define threadLen .17\n\nmat2 rotation(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.yy;\n    vec2 m = iMouse.xy/iResolution.yy;\n\n    // Time varying pixel color\n    uv.x -= ( iResolution.x - iResolution.y ) / iResolution.y * .5;\n    uv = (uv - .5) * 2.;\n    \n    m.x -= ( iResolution.x - iResolution.y ) / iResolution.y * .5;\n    m = (m - .5) * 2.;\n    \n    if( iMouse.z < .001 ){\n        m = vec2( cos( iTime ), sin( iTime ) );\n    }\n\n    // Time varying pixel color\n    vec3 col = vec3( 0. );\n    \n    float p = 0.;\n    \n    vec2 h = vec2( X, Y ) * .5;\n    vec2 c = floor(( uv +  vec2( X, Y ) * .5 ) / vec2( X, Y ));\n    uv = mod(uv + vec2( X, Y ) * .5, vec2( X, Y ) ) - vec2( X, Y ) * .5;\n    uv *= rotation( -atan( m.x - ( X ) * c.x, m.y - Y * c.y ) );\n    col += step( length( vec2( ( abs( uv.x ) + ( threadLen - .01 ) ), uv.y ) ) - threadLen, 0. );\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}