{"ver":"0.1","info":{"id":"7dKfRW","date":"1657796868","viewed":105,"name":"反射（RayMarching）","username":"StarySky","description":"Realization of reflection through RayMarching.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","reflection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TMIN 0.01\n#define TMAX 150. \n#define RAYMARCH_TIME 256\n#define PRECISION .0001\n#define AA 3\n#define PI 3.14159265\n\nvec2 fixUV(in vec2 c) {\n    return (2. * c - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\nfloat sdfSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat sdfBox(vec3 p, vec3 b)\n{\n  //p -= vec3(0.,0.,mod(iTime,5.));\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdfcone(vec3 p)\n{\n  float r = length(p.xz);\n  float h = p.y;\n  return max(r-1.,abs(h)-1.) + min(max(r,h),0.);\n}\n\nfloat sdfPlane(in vec3 p) {\n    return p.y;\n}\n\nvec2 opU(vec2 a, vec2 b){\n    return a.x < b.x ? a : b;\n}\n\nvec2 map(in vec3 p) {\n    vec2 d = vec2(sdfPlane(p), 1.);\n    for (float i = 0.; i < sin(iTime)*5.+5.;){ // number of balls \n        vec3 rand = vec3(fract(i/PI)-0.5, fract(i*PI)/5., fract(i/0.3921)-0.5) * 5.;\n        d = opU(d, vec2(sdfSphere(p - rand, fract(i*PI)), 3.));\n        i += 1.;\n    }\n    \n    return d;\n}\n\nvec2 rayMarch(in vec3 ro, in vec3 rd) {\n    float t = TMIN;\n    vec2 res = vec2(-1.);\n    for(int i = 0; i < RAYMARCH_TIME && t < TMAX; i++) {\n        vec3 p = ro + t * rd;\n        vec2 d = map(p);\n        if(d.x < PRECISION){\n            res = vec2(t, d.y);\n            break;\n        }\n        t += d.x;\n        \n    }\n    return res;\n}\n\n// https://www.iquilezles.org/www/articles/normalsSDF/normalsSDF.htm\nvec3 calcNormal(in vec3 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * map(p + k.xyy * h).x +\n        k.yyx * map(p + k.yyx * h).x +\n        k.yxy * map(p + k.yxy * h).x +\n        k.xxx * map(p + k.xxx * h).x);\n}\n\nmat3 setCamera(vec3 ta, vec3 ro, float cr) {\n    vec3 z = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.);\n    vec3 x = normalize(cross(z, cp));\n    vec3 y = cross(x, z);\n    return mat3(x, y, z);\n}\n\n// https://www.iquilezles.org/www/articles/rmshadows/rmshadows.htm\nfloat softShadow(in vec3 ro, in vec3 rd, float k) {\n    float res = 1.0;\n    float ph = 1e20;\n    for(float t = TMIN; t < TMAX;) {\n        float h = map(ro + rd * t).x;\n        if(h < 0.001)\n            return 0.0;\n        float y = h * h / (2.0 * ph);\n        float d = sqrt(h * h - y * y);\n        res = min(res, k * d / max(0.0, t - y));\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\nvec3 CameraMove(float a) {\n    return vec3(2.5*cos(a), 3., 2.5*sin(a))*2.; // camera coords\n}\n\n\nvec2 tri( in vec2 x )\n{\n    vec2 h = fract(x*.5)-.5;\n    return 1.-2.*abs(h);\n}\n\nfloat checkersGrad( in vec2 uv, in vec2 ddx, in vec2 ddy )\n{\n    vec2 w = max(abs(ddx), abs(ddy)) + 0.001;    // filter kernel\n    vec2 i = (tri(uv+0.5*w)-tri(uv-0.5*w))/w;   // analytical integral (box filter)\n    return 0.5 - 0.5*i.x*i.y;                   // xor pattern\n}\n\nvec3 render(in vec2 uv, in vec2 px, in vec2 py) {\n    vec3 color = vec3(1.);\n    vec3 ro = CameraMove(iTime);\n    if(iMouse.z < 0.01) {\n        float theta = iMouse.x / iResolution.x * 2. * PI;\n        ro = CameraMove(theta);\n    }\n    vec3 ta = vec3(0.);\n    mat3 cam = setCamera(ta, ro, 0.);\n    float fl = 3.;\n    vec3 rd = normalize(cam * vec3(uv, fl));\n    vec2 t = rayMarch(ro, rd);\n\n    vec3 object_color = vec3(.0);\n    \n    \n    \n    vec3 p = ro + t.x * rd; \n    vec3 n = calcNormal(p); // normal vector of p\n    if (t.y > 2.9){\n        ro = p;\n        rd = 2.*n*dot(n,-rd) + rd; \n        \n        for (float x = 1.; x < 20.1;) {\n            t = rayMarch(ro, rd);\n            p = ro + t.x * rd;\n            n = calcNormal(p);\n            ro = p;\n            rd = 2.*n*dot(n,-rd) + rd; \n            if (t.y < 2.1){\n                break;\n            }\n            x += 1.;\n\n       }\n   }\n    \n    if(0.9<t.y && t.y<1.1) {\n        // plane\n        vec3 rdx = normalize(cam * vec3(px, fl));\n        vec3 rdy = normalize(cam * vec3(py, fl));\n        vec3 ddx = ro.y * (rd/rd.y - rdx/rdx.y);\n        vec3 ddy = ro.y * (rd/rd.y - rdy/rdy.y);\n        object_color = vec3(1.,0.,0.)*(0.1 + 0.3 * checkersGrad(p.xz, ddx.xz, ddy.xz));\n    }\n    if(1.9<t.y && t.y<2.1) {\n        // non reflectable\n        object_color = vec3(1., .0, .0);\n    }\n    \n    if(t.x < TMAX && t.x > TMIN) {\n        vec3 light = vec3(-5., 4., -2.); // light\n        float dif = clamp(dot(normalize(light - p), n), 0., 1.); // diffuse\n        p += PRECISION * n; // avoid self-shadowing\n        if (t.y < 2.1){\n        dif *= softShadow(p, normalize(light - p), 50.);\n         } // soft shadow\n        float amb = 0.5 + 0.5 * dot(n, vec3(0., 1., 0.)); // ambient\n        color = amb * object_color + dif * vec3(.3); // final color\n    }\n    \n    return sqrt(color);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = vec3(0.);\n    for(int m = 0; m < AA; m++) {\n        for(int n = 0; n < AA; n++) {\n            vec2 offset = 2. * (vec2(float(m), float(n)) / float(AA) - .5);\n            vec2 uv = fixUV(fragCoord + offset);\n            vec2 px = fixUV(fragCoord + vec2(1., 0.) + offset);\n            vec2 py = fixUV(fragCoord + vec2(0., 1.) + offset);\n            color += render(uv, px, py);\n        }\n    }\n    fragColor = vec4(color / float(AA * AA), 1.);\n}\n","name":"Image","description":"","type":"image"}]}