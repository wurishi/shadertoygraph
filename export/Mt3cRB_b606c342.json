{"ver":"0.1","info":{"id":"Mt3cRB","date":"1533002783","viewed":156,"name":"cross the black hole2","username":"Silas_Wang","description":"black hole","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["blackhole"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n//============================================================================\n// Constants.\n//============================================================================\nint NUM_LIGHTS ;\nint NUM_MATERIALS;\nint NUM_PLANES;\nint NUM_SPHERES;\n#define PI 3.14159265358979323846264338327950288\nvec3 BACKGROUND_COLOR;\n\n // Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * 3.1415926535 / 180.0; \n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0. \n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that on Slides 8 and 12 of \n// Lecture 11 (Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS { \n//                   I_a * k_a + \n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[10];\nSphere_t Sphere[10];\nLight_t Light[10];\nMaterial_t Material[10];\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene1.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene1(in vec2 fragCoord, in float time, out vec3 cam_pos, out vec3 cam_lookat, out vec3 cam_up_vec)\n{\n    NUM_LIGHTS = 1;\n\tNUM_MATERIALS = 3;\n\tNUM_PLANES = 0;\n\tNUM_SPHERES = 1;\n    BACKGROUND_COLOR = texture(iChannel0, fragCoord.xy/iResolution.xy).rgb;//vec3( 0.1, 0.2, 0.6 );\n    \n\n    // Center bouncing sphere.\n    float r;\n    float t;  \n    Sphere[0].center = vec3(100.0, 100.0, 100.0);\n    Sphere[0].radius = 0.2;\n   \n    if ( time > 2.0 )\n    {\n        t = time - 2.0;\n        r = 3.0 - t*t / 10.0;\n        Sphere[0].radius = 0.2 + t / 20.0;\n    \tif ( r > 0.0 )\n    \t\tSphere[0].center = vec3(r*sin(t*3.0), r*cos(t*3.0), 0.0); \n   \t \telse\n     \t \tSphere[0].center = vec3(0.0, 0.0, 0.0);\n    }\n    \n    Sphere[0].materialID = 1;\n\tBACKGROUND_COLOR += vec3(1.0,1.0,1.0) * time*time / 80.0;\n\n    // Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // Gold material.\n    Material[1].k_d = 0.5*vec3( 0.8, 0.7, 0.1 );\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 0.3 * Material[1].k_d;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 64.0;\n\n    // Green plastic material.\n    Material[2].k_d = vec3( 0.0, 0.8, 0.0 );\n    Material[2].k_a = 0.2 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.5 * Material[2].k_r;\n    Material[2].n = 128.0;\n\n    // Light 0.\n    Light[0].position = vec3( 0.0, 0.0, 8.0 );\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = vec3( 1.0, 1.0, 1.0 );\n\n    Material[1].k_d += vec3(1.0,1.0,1.0) * time*time / 60.0;\n    \n    float px = 0.0;\n    float py = 0.0;\n    float pz = 5.0;\n    cam_pos = vec3( px, py, pz );\n    if ( time > 7.0 )\n    {\n        t = time - 7.0;\n        pz = 5.0-3.0*t;\n        cam_pos = vec3( px, py, pz );\n    }\n    cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n    cam_lookat = vec3( 0.0, 0.0, 0.0 );\n    \n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene2.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene2(in float time, out vec3 cam_pos, out vec3 cam_lookat, out vec3 cam_up_vec)\n{\n    //time=time-8.4;\n    NUM_LIGHTS = 2;\n\tNUM_MATERIALS = 3;\n\tNUM_PLANES = 5;\n\tNUM_SPHERES = 1;\n    BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n    \n\t// Horizontal plane.\n\tPlane[0].A = 0.0;\n\tPlane[0].B = 0.0;\n\tPlane[0].C = -1.0;\n\tPlane[0].D = 12.5;\n\tPlane[0].materialID = 0;\n\n\tPlane[2].A = 0.0;\n\tPlane[2].B = 1.0;\n\tPlane[2].C = 0.0;\n\tPlane[2].D = -10.0;\n\tPlane[2].materialID = 0;\n\t// Vertical plane.\n\tPlane[1].A = 0.0;\n\tPlane[1].B = 0.0;\n\tPlane[1].C = 1.0;\n\tPlane[1].D = 12.5;\n\tPlane[1].materialID = 0;\n\n\tPlane[3].A = 1.0;\n\tPlane[3].B = 0.0;\n\tPlane[3].C = 0.0;\n\tPlane[3].D = 12.5;\n\tPlane[3].materialID = 0;\n\n\tPlane[4].A = -1.0;\n\tPlane[4].B = 0.0;\n\tPlane[4].C = 0.0;\n\tPlane[4].D = 12.5;\n\tPlane[4].materialID = 0;\n\n\n\n\t// Center bouncing sphere.\n\tSphere[0].center = vec3(0.0, 8.5 - time*5.0, 0.0);\n\tSphere[0].radius = 0.7;\n\tSphere[0].materialID = 1;\n\n\n\t// Silver material.\n\tMaterial[0].k_d = vec3(0.5, 0.5, 0.5);\n\tMaterial[0].k_a = 0.2 * Material[0].k_d;\n\tMaterial[0].k_r = 2.0 * Material[0].k_d;\n\tMaterial[0].k_rg = 0.5 * Material[0].k_r;\n\tMaterial[0].n = 64.0;\n\n\t// Gold material.\n\tMaterial[1].k_d = vec3(0.8, 0.7, 0.1);\n\tMaterial[1].k_a = 0.2 * Material[1].k_d;\n\tMaterial[1].k_r = 2.0 * Material[1].k_d;\n\tMaterial[1].k_rg = 0.5 * Material[1].k_r;\n\tMaterial[1].n = 64.0;\n\n\t// Green plastic material.\n\tMaterial[2].k_d = vec3(0.0, 0.8, 0.0);\n\tMaterial[2].k_a = 0.2 * Material[2].k_d;\n\tMaterial[2].k_r = vec3(1.0, 1.0, 1.0);\n\tMaterial[2].k_rg = 0.5 * Material[2].k_r;\n\tMaterial[2].n = 128.0;\n\n\t// Light 0.\n    if(time<3.0)\n    {\n\tLight[0].position = vec3(10.0, 10.0-time*40.0, 0.0);\n\tLight[0].I_a = vec3(0.1, 0.1, 0.1);\n\tLight[0].I_source = vec3(0.6, 0.5, 0.5);\n    \n\t// Light 1.\n\tLight[1].position = vec3(-10.0, 10.0-time*40.0, 0.0);\n\tLight[1].I_a = vec3(0.1, 0.1, 0.1);\n\tLight[1].I_source = vec3(0.6, 0.5, 0.5);\n    }\n    \n    else\n    {\n    Light[0].position = vec3(10.0, -110.0-(time-3.0)*80.0, 0.0);\n\tLight[0].I_a = vec3(0.1, 0.1, 0.1);\n\tLight[0].I_source = vec3(0.6, 0.5, 0.5);\n    \n\t// Light 1.\n\tLight[1].position = vec3(-10.0, -110.0-(time-3.0)*80.0, 0.0);\n\tLight[1].I_a = vec3(0.1, 0.1, 0.1);\n\tLight[1].I_source = vec3(0.6, 0.5, 0.5);\n    }\n    // Position the camera.\n    float t;\n    float px = 0.0;\n    float py = 5.0;\n    float pz = 5.0;\n    if ( time < 1.0 )\n    {\n        t = time;\n        cam_pos = vec3(px, py, pz);\n        cam_lookat = vec3(0.0, py, 0.0);\n\t\tcam_up_vec = vec3(0.0, 1.0, 0.0);\n    }\n    else if ( time < 3.0 )\n    {\n        t = time - 1.0;\n\n        cam_pos = vec3(0.0, pz*sin(t*PI/4.0)+py, pz*cos(t*PI/4.0));\n        cam_lookat = vec3(0.0, py, 0.0);\n\t\tcam_up_vec = vec3(0.0, cos(t*PI/4.0), -sin(t*PI/4.0));\n    }\n    else\n    {\n        t = time - 3.0;\n\t\tcam_pos = vec3(0.0, py+pz, 0.0);\n\t\tcam_lookat = vec3(0.0, py, 0.0);\n\t\tcam_up_vec = vec3(sin(t), 0.0, cos(t));\n    }\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection \n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the \n// smaller t, the position of the intersection (hitPos) and the normal \n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n\n\tvec3 Ro = ray.o - sph.center;\n\tvec3 Rd = ray.d;\n\t\n\tfloat a = dot(Rd, Rd);\n\tfloat b = 2.0 * dot(Rd, Ro);\n\tfloat c = dot(Ro, Ro) - sph.radius * sph.radius;\n\t\n\tfloat d = b * b - 4.0 * a * c;\n\tif ( d < 0.0 ) return false;\n\tfloat t1 = ( -b + sqrt(d) ) / ( 2.0 * a );\n\tfloat t2 = ( -b - sqrt(d) ) / ( 2.0 * a );\n\t\n    float t0;\n    bool t1_test = ( t1 > tmin && t1 < tmax );\n    bool t2_test = ( t2 > tmin && t2 < tmax );\n    if ( t1_test && t2_test ) t0 = t1 < t2 ? t1 : t2;\n    else if ( t1_test && !t2_test ) t0 = t1;\n    else if( !t1_test && t2_test ) t0 = t2;\n    else return false;\n\t\n\tt = t0;\n\thitPos = ray.o + t0 * ray.d;\n\thitNormal = normalize( Ro + t0 * Rd );\n    return true;  // Replace this with your code.\n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n\tvec3 Ro = ray.o - sph.center;\n\tvec3 Rd = ray.d;\n\t\n\tfloat a = dot(Rd, Rd);\n\tfloat b = 2.0 * dot(Rd, Ro);\n\tfloat c = dot(Ro, Ro) - sph.radius * sph.radius;\n\t\n\tfloat d = b * b - 4.0 * a * c;\n\tif ( d < 0.0 ) return false;\n\tfloat t1 = ( -b + sqrt(d) ) / ( 2.0 * a );\n\tfloat t2 = ( -b - sqrt(d) ) / ( 2.0 * a );\n\t\n    float t0;\n    bool t1_test = ( t1 > tmin && t1 < tmax );\n    bool t2_test = ( t2 > tmin && t2 < tmax );\n    if ( t1_test && t2_test ) t0 = t1 < t2 ? t1 : t2;\n    else if ( t1_test && !t2_test ) t0 = t1;\n    else if( !t1_test && t2_test ) t0 = t2;\n    else return false;\n        \n    return true;  // Replace this with your code.\n\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow, \n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a + \n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray, \n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg ) \n{\n    // Find whether and where the ray hits some object. \n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // \n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n\tfor( int i = 0; i < NUM_PLANES; i++ )\n\t{\n\t\tif(IntersectPlane( Plane[i], ray, DEFAULT_TMIN, DEFAULT_TMAX ))\n\t\t{\n\t\t\ttemp_hasHit = true;\n\t\t\tIntersectPlane( Plane[i], ray, DEFAULT_TMIN, DEFAULT_TMAX,\n                      temp_t, temp_hitPos, temp_hitNormal );\n\t\t\tif( temp_t < nearest_t )\n\t\t\t{\n\t\t\t\tnearest_t = temp_t;\n\t\t\t\tnearest_hitPos = temp_hitPos;\n\t\t\t\tnearest_hitNormal = temp_hitNormal;\n\t\t\t\thasHitSomething = temp_hasHit;\n\t\t\t\tnearest_hitMatID = Plane[i].materialID;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor( int i = 0; i < NUM_SPHERES; i++ )\n\t{\n\t\tif(IntersectSphere( Sphere[i], ray, DEFAULT_TMIN, DEFAULT_TMAX ))\n\t\t{\n\t\t\ttemp_hasHit = true;\n\t\t\tIntersectSphere( Sphere[i], ray, DEFAULT_TMIN, DEFAULT_TMAX,\n                      temp_t, temp_hitPos, temp_hitNormal );\n\t\t\tif( temp_t < nearest_t )\n\t\t\t{\n\t\t\t\tnearest_t = temp_t;\n\t\t\t\tnearest_hitPos = temp_hitPos;\n\t\t\t\tnearest_hitNormal = temp_hitNormal;\n\t\t\t\thasHitSomething = temp_hasHit;\n\t\t\t\tnearest_hitMatID = Sphere[i].materialID;\n\t\t\t}\n\t\t}\n\t}\n\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // \n    // * Accumulate lighting from each light source on the nearest hit point. \n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the \n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n\n\tRay_t lightRay;\n\tfloat dist;\n\tbool inShadow;\n\tvec3 L, N, V;\n\tfor( int i = 0; i < NUM_LIGHTS; i++ )\n\t{\n\t\tinShadow = false;\n\t\tlightRay.o = nearest_hitPos;\n\t\tlightRay.d = normalize( Light[i].position - nearest_hitPos );\n\t\tdist = distance( Light[i].position, nearest_hitPos );\n\t\t\n\t\tfor( int j = 0; j < NUM_PLANES; j++ )\n\t\t{\n\t\t\tif(IntersectPlane( Plane[j], lightRay, DEFAULT_TMIN, dist ))\n\t\t\t{\n\t\t\t\tinShadow = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor( int j = 0; j < NUM_SPHERES; j++ )\n\t\t{\n\t\t\tif( !inShadow && IntersectSphere( Sphere[j], lightRay, DEFAULT_TMIN, dist ))\n\t\t\t{\n\t\t\t\tinShadow = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tL = lightRay.d;\n\t\tN = nearest_hitNormal;\n\t\tV = -ray.d;\n\t\tI_local += PhongLighting( L, N, V, inShadow, \n\t\t\t\t\t\t\tMaterial[nearest_hitMatID], Light[i] );\n\t}\n\t\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n\tk_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//    BACKGROUND_COLOR = texture( iChannel0, fragCoord ).rgb;\n    // Position the camera.\n    vec3 cam_pos, cam_lookat, cam_up_vec;\n    float scene1_time = 8.5;\n    float scene2_time = 8.5;\n    float total_time = scene1_time + scene2_time;\n    if ( mod(iTime,total_time) < scene1_time )\n    \tInitScene1( fragCoord, mod(iTime,total_time) ,cam_pos, cam_lookat, cam_up_vec );\n    else\n        InitScene2( mod(iTime,total_time) - scene1_time, cam_pos, cam_lookat, cam_up_vec );\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ ) \n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float pi = 3.1415927;\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 pp = fragCoord.xy/iResolution.xy;\n\tpp = -1.0 + 2.0*pp;\n\tpp.x *= iResolution.x/iResolution.y;\n\n\tvec3 lookAt = vec3(0.0, -0.1, 0.0);\n    \n    float eyer = 2.0;\n    float eyea = 0.0;\n    float eyea2 =0.0;\n    \n\tvec3 ro = vec3(\n        eyer * cos(eyea) * sin(eyea2),\n       eyer * cos(eyea2),\n        eyer * sin(eyea) * sin(eyea2)); //camera position\n    \n    \n\tvec3 front = normalize(lookAt - ro);\n\tvec3 left = normalize(cross(normalize(vec3(0.0,1,-0.1)), front));\n\tvec3 up = normalize(cross(front, left));\n\tvec3 rd = normalize(front*1.5*mod(iTime,17.0)/6.0 + left*pp.x + up*pp.y); // rect vector\n\n    \n    vec3 bh = vec3(0.0,0.0,0.0);\n    float bhr = 0.3;\n    float bhmass = 20.0;\n   \tbhmass *= 0.001; // premul G\n    \n    vec3 p = ro;\n    vec3 pv = rd;\n    float dt = 0.02;\n    \n    vec3 col = vec3(0.0);\n    \n    float noncaptured = 1.0;\n    \n//    vec3 c1 = vec3(0.5,0.35,0.1);\n//    vec3 c2 = vec3(1.0,0.8,0.6);\n    \n    \n    for(float t=0.0;t<1.0;t+=0.01)\n    {\n        p += pv * dt * noncaptured;\n        \n        // gravity\n        vec3 bhv = bh - p;\n        float r = 10.0*dot(bhv,bhv);\n        pv += normalize(bhv) * ((bhmass) / r);\n        \n        noncaptured = smoothstep(0.0,0.01,sdSphere(p-bh,bhr));\n        \n        \n        \n        // texture the disc\n        // need polar coordinates of xz plane\n//        float dr = length(bhv.xz);\n//        float da = atan(bhv.x,bhv.z);\n//        vec2 ra = vec2(dr,da * (0.01 + (dr - bhr)*0.002) + 2.0 * pi + iTime*0.02 );\n//        ra *= vec2(10.0,20.0);\n        \n//        vec3 dcol = mix(c2,c1,pow(length(bhv)-bhr,2.0)) * max(0.0,texture(iChannel1,ra*vec2(0.1,0.5)).r+0.05) * (4.0 / ((0.001+(length(bhv) - bhr)*50.0) ));\n        \n//        col += max(vec3(0.0),dcol * step(0.0,-sdTorus( (p * vec3(1.0,50.0,1.0)) - bh, vec2(0.8,0.99))) * noncaptured);\n        \n        //col += dcol * (1.0/dr) * noncaptured * 0.01;\n        \n        // glow\n        col += vec3(1.0,0.9,0.7) * (1.0/vec3(dot(bhv,bhv))) * 0.003 * noncaptured;\n        \n        //if (noncaptured<1.0) break;\n        \n    }\n    \n    // background - projection not right\n    col += pow(texture(iChannel0,(pv.xy+vec2(1.5))).rgb,vec3(4.0));\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}