{"ver":"0.1","info":{"id":"7dyXzm","date":"1634418730","viewed":67,"name":"SolidTux - Newton Fractal","username":"SolidTux","description":"Newton fractal for 4th order polynomial. Drag mouse to set 4th point.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define N 4\n#define ITER 5\n#define ITERNORM 4\n\nvec2 conj(in vec2 a) {\n    return vec2(a.x, -a.y);\n}\n\nvec2 cmul(in vec2 a, in vec2 b) {\n    return vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\nvec2 cdiv(in vec2 a, in vec2 b) {\n    return cmul(a, conj(b))/(b.x*b.x + b.y*b.y);\n}\n\nvec2 p(in vec2 z, in vec2[N] points) {\n    vec2 res = vec2(1., 0.);\n    for (int i=0; i<N; i++) {\n        res = cmul(res, z - points[i]);\n    }\n    return res;\n}\n\nvec2 pd(in vec2 z, in vec2[N] points) {\n    vec2 res = vec2(0., 0.);\n    for (int i=0; i<N; i++) {\n        vec2 tmp = vec2(1., 0.);\n        for (int j=0; j<N; j++) {\n            if (i!=j) {\n                tmp = cmul(tmp, z - points[j]);\n            }\n        }\n        res += tmp;\n    }\n    return res;\n}\n    \n\nvec2 newton(in vec2 z, in vec2[N] points) {\n    return z - cdiv(p(z, points), pd(z, points));\n}\n\nvec2 s(in vec2 x) {\n    vec2 z = 2.*(x/iResolution.xy - 0.5);\n    z.x *= iResolution.x/iResolution.y;\n    z *= mix(0.5, 1., 0.5*(sin(iTime) + 1.));\n    return z;\n}\n    \n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 z = s(fragCoord);\n    \n    // points and colors\n    vec2 points[N];\n    points[0] = vec2(sin(2.02*iTime), 0.62*cos(1.2*iTime));\n    points[1] = vec2(-1.76*sin(0.3*iTime), 1.3*cos(1.01*iTime));\n    points[2] = vec2(1.33*sin(1.02*iTime), -0.3*cos(1.7*iTime));\n    if (iMouse.z > 0.) {\n        points[3] = s(iMouse.xy);\n    } else {\n        points[3] = vec2(0.11*sin(1.31*iTime), 0.05*cos(0.72*iTime));\n    }\n    vec3 color[N];\n    color[0] = vec3(0.863,0.208,0.133);\n    color[1] = vec3(0.851,0.797,0.620);\n    color[2] = vec3(0.216,0.255,0.251);\n    color[3] = vec3(0.741,0.765,0.780);\n    int ind = 0;\n    \n    // iterations\n    float dis = 2.;\n    float scale = 1.;\n    for (int i=0; i<ITER; i++) {\n        z = newton(z, points);\n        // calculate distance to nearest point\n        for (int i=0; i<N; i++) {\n            float cur = length(z - points[i]);\n            if (cur < dis) {\n                ind = i;\n                dis = cur;\n            }\n        }\n        if (dis < 0.05) {\n            scale = mix(0.1, 1., float(clamp(i, 0, ITERNORM-1))/float(ITERNORM-1));\n            break;\n        }\n    }\n\n    // set color\n    vec3 col = color[ind] * scale;\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}