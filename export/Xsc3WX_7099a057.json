{"ver":"0.1","info":{"id":"Xsc3WX","date":"1452359267","viewed":521,"name":"CSG NAND Logic","username":"paniq","description":"Demonstrates how a single operator can be used to make all other CSG operators. Not immediately useful, but interesting.","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["csg","xor","boolean","nand"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\n// for full list, see \n// https://en.wikipedia.org/wiki/NAND_logic\n\n// NAND, our only primitive\nfloat csg_nand (float a, float b) {\n    return -max(a,b);\n}\n\n// join two NANDs together\nfloat csg_not (float x) {\n    return csg_nand(x, x);\n}\n\n// NOT(NAND(A,B))\nfloat csg_and (float a, float b) {\n    float o = csg_nand(a, b);\n    return csg_nand(o, o);\n}\n\n// aka A AND NOT B, NOT(NAND(A,NOT(B)))\nfloat csg_sub (float a, float b) {\n    float o = csg_nand(a, csg_nand(b, b));\n    return csg_nand(o, o);\n}\n\n// NAND(NOT(A),NOT(B))\nfloat csg_or (float a, float b) {\n    return csg_nand(\n        csg_nand(a,a),\n        csg_nand(b,b));\n}\n\n// NAND(NAND(A,NAND(A,B)),NAND(B,NAND(A,B)))\nfloat csg_xor (float a, float b) {\n    float o = csg_nand(a, b);\n    return csg_nand(\n        csg_nand(a, o),\n        csg_nand(b, o));\n}\n\n//-------------------------------------------------------\n\nfloat circle (vec2 p, float r) {\n    return length(p) - r;\n}\n\nvec2 circles (vec2 p) {\n    return vec2(\n        circle(p - vec2(-0.15, 0.0), 0.3), \n        circle(p - vec2(0.15, 0.0), 0.3));\n}\n\n//-------------------------------------------------------\n\nfloat outline (float d) {\n    return 1.0 - smoothstep(0.0, 3.0 / iResolution.y, abs(d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = uv * 2. - 1.;\n    p.x *= iResolution.x / iResolution.y;\n    \n    vec2 c1 = circles(p - vec2(-1.0,0.3));\n    vec2 c2 = circles(p - vec2(0.0,0.3));\n    vec2 c3 = circles(p - vec2(1.0,0.3));\n    vec2 c4 = circles(p - vec2(0.0,-0.5));\n    \n    float d = csg_or(c1.x, c1.y);\n    d = csg_or(d, csg_and(c2.x, c2.y));\n    d = csg_or(d, csg_sub(c3.x, c3.y));\n    d = csg_or(d, csg_xor(c4.x, c4.y));\n    \n\tfragColor = vec4(vec3(outline(d) + 0.3 * step(d,0.0)),1.0);\n}","name":"","description":"","type":"image"}]}