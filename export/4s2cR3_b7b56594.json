{"ver":"0.1","info":{"id":"4s2cR3","date":"1493134867","viewed":280,"name":"Perlin-Worley","username":"cexcell","description":"perlin-worley noise as described in guerilla games siggraph","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["perlin","worley","perlinworley"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float saturate(float val)\n{\n    return clamp(val, 0.0, 1.0);\n}\n\nvec3 voronoi_hash( vec3 x, float s)\n{\n    x = mod(x, s);\n    x = vec3(   dot(x, vec3(127.1,311.7, 74.7)),\n                dot(x, vec3(269.5,183.3,246.1)),\n                dot(x, vec3(113.5,271.9,124.6)));\n\n    return fract(sin(x) * 43758.5453123);\n}\n\nvec3 voronoi( in vec3 x, float s, bool inverted)\n{\n    x *= s;\n    x += 0.5;\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    float id = 0.0;\n    vec2 res = vec2( 1.0 );\n    for(int k=-1; k <= 1; k++)\n    {\n        for(int j=-1; j<=1; j++)\n        {\n            for(int i=-1; i<=1; i++)\n            {\n                vec3 b = vec3(i, j, k);\n                vec3 r = vec3(b) - f + voronoi_hash(p + b, s);\n                float d = dot(r, r);\n\n                if(d < res.x)\n                {\n                    id = dot(p + b, vec3(1.0, 57.0, 113.0));\n                    res = vec2(d, res.x);\n                }\n                else if(d < res.y)\n                {\n                    res.y = d;\n                }\n            }\n        }\n    }\n\n    id = abs(id);\n    \n    vec2 inv = 1.0 - res;\n\n    if(inverted)\n        return vec3(inv, id);\n    else\n        return vec3(res, id);\n}\n\nfloat remap(float val, float old_min, float old_max, float min, float max)\n{\n\treturn min + (val - old_min) / (old_max - old_min) * (max - min);\n}\n\nfloat set_range(float value, float low, float high)\n{\n    return saturate((value - low) / (high - low));\n}\n\nvec3 set_ranges_signed(vec3 values, float low, float high)\n{\n    return (values - low) / (high - low);\n}\n\nfloat set_range_clamped(float value, float low, float high)\n{\n    float ranged_value = clamp(value, low, high);\n    ranged_value = (ranged_value - low)/(high - low);\n\treturn saturate(ranged_value);\n}\n\nfloat get_worley_2_octaves(vec3 p, vec3 offset) {\n    vec3 xyz = p + offset;\n\n    float worley_value1 = voronoi(xyz, 1.0, true).r;\n    float worley_value2 = voronoi(xyz, 2.0, false).r;\n\n    worley_value1 = saturate(worley_value1);\n    worley_value2 = saturate(worley_value2);\n\n    float worley_value = worley_value1 - worley_value2 * 0.25;\n\n    return worley_value;\n}\n\nfloat get_worley_3_octaves(vec3 p, float s) {\n    vec3 xyz = p;\n\n    float worley_value1 = voronoi(xyz, 1.0 * s, true).r;\n    float worley_value2 = voronoi(xyz, 2.0 * s, false).r;\n    float worley_value3 = voronoi(xyz, 4.0 * s, false).r;\n\n    worley_value1 = saturate(worley_value1);\n    worley_value2 = saturate(worley_value2);\n    worley_value3 = saturate(worley_value3);\n\n    float worley_value = worley_value1;\n    worley_value = worley_value - worley_value2 * 0.3;\n   \tworley_value = worley_value - worley_value3 * 0.3;\n\n    return worley_value;\n}\n\n// copy from https://www.shadertoy.com/view/Md3SzB\n\nvec2 hash22(vec2 p)\n{\n    p = p*mat2(127.1,311.7,269.5,183.3);\n\tp = -1.0 + 2.0 * fract(sin(p)*43758.5453123);\n\treturn sin(p*6.283);\n}\n\nfloat perlin2(vec2 p)\n{\n\tvec2 pi = floor(p);\n    vec2 pf = p-pi;\n    \n    vec2 w = pf*pf*(3.-2.*pf);\n    \n    float f00 = dot(hash22(pi+vec2(.0,.0)),pf-vec2(.0,.0));\n    float f01 = dot(hash22(pi+vec2(.0,1.)),pf-vec2(.0,1.));\n    float f10 = dot(hash22(pi+vec2(1.0,0.)),pf-vec2(1.0,0.));\n    float f11 = dot(hash22(pi+vec2(1.0,1.)),pf-vec2(1.0,1.));\n    \n    float xm1 = mix(f00,f10,w.x);\n    float xm2 = mix(f01,f11,w.x);\n    \n    float ym = mix(xm1,xm2,w.y); \n    return ym;\n}\n\nfloat perlin_noise(vec2 p, int octaves)\n{\n    p *= 4.0;\n    \n    float result = 0.0;\n    float weight = 1.0;\n    float weight_sum = 0.0;\n    \n    for (int i = 0; i < octaves; ++i )\n    {\n        result += weight * perlin2(p);\n        weight_sum += weight;\n        weight *= 0.5;\n        p *= 2.0;\n    }\n    \n    float noise = result / weight_sum;\n    \n    return noise + 0.3;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y *= iResolution.y / iResolution.x;\n    \n    float perlin = perlin_noise(uv, 8);\n    float worley = get_worley_3_octaves(vec3(uv, 1.0), 15.0);\n    \n    float res = set_range(worley, 0.0, 0.9);\n    \n\tfragColor = vec4(vec3(res), 1.0);\n}","name":"Image","description":"","type":"image"}]}