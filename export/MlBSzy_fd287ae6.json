{"ver":"0.1","info":{"id":"MlBSzy","date":"1444590061","viewed":200,"name":"Pu-239","username":"lebek","description":"Just learning - copied code from https://www.shadertoy.com/view/Xds3zN","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","donut"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\n\nfloat sdSphere(vec3 p, float s)\n{\n  return length(p)-s;\n}\n\nfloat sdTorus(vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat ripple(vec3 p) {\n    float t = iTime;\n    float o = cos(t*1.0)+sin(t+0.4);\n \treturn 0.07*o*sin(8.0*p.x+o)*sin(8.0*p.y)*sin(8.0*p.z);   \n}\n\nfloat rippleSphere(vec3 p, float s) {\n\treturn sdSphere(p, s)+ripple(p);\n}\n\nfloat rippleTorus(vec3 p, vec2 t) {\n\treturn sdTorus(p, t)+ripple(p);\n}\n\n\nvec2 map(vec3 p) {\n    return vec2(rippleTorus(p, vec2(1.0, 0.3)), 0);\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    vec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n    p.x *= iResolution.x/iResolution.y;\n    \n    float cam_path_r = 3.0;\n    \n    // camera\t\n    vec3 ro = vec3(cam_path_r*sin(iTime),cam_path_r*sin(iTime),cam_path_r*cos(iTime));\n\tvec3 ta = vec3(0);\n\t\n\t// camera-to-world transformation\n    mat3 ca = setCamera(ro, ta, 0.0);\n    \n    // ray direction\n\tvec3 rd = ca*normalize(vec3(p.xy,2.0));\n    \n    float tmin = 0.02;\n    float tmax = 6.0;\n    float t = tmin;\n    float precis = 0.0002;\n    float fg = tmin;\n    float bg = tmax;\n    for (int i = 0; i < 10; i++) {\n    \tfloat d1 = map(ro+rd*t).x;\n        \n        //float d2 = sdSphere(ro+rd*t-vec3(-1,-2,0), 1.0);\n        \n        float d = d1; //min(d1,d2);\n        if(d<precis || t>tmax) break;\n        \n        t += d/1.0;\n    }\n    \n    if (t<tmax) {\n        vec3 n = calcNormal(ro+rd*t);\n        float s1 = dot(n,-normalize(vec3(1,0,-1)));\n        float s2 = dot(n,-normalize(vec3(0,-1,1)));\n        float s = clamp(0.4+(s1+s2)/2.0, 0.0, 1.0);\n        fragColor = vec4(s,(sin(s)+1.0)/2.0,(cos(s)+1.0)/2.0,0);//1.0-t/tmax);\n        return;\n    }\n    \n\n\tfragColor = vec4(1);\n}","name":"","description":"","type":"image"}]}