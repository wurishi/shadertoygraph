{"ver":"0.1","info":{"id":"ddXfDN","date":"1688739186","viewed":63,"name":"Kosta First Shader","username":"kosovar","description":"My first shader","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dot2( in vec2 v ) { return dot(v,v); }\nfloat sdRoundedCross( in vec2 p, in float h )\n{\n    float k = 0.5*(h+1.0/h);\n    p = abs(p);\n    return ( p.x<1.0 && p.y<p.x*(k-h)+h ) ? \n             k-sqrt(dot2(p-vec2(1,k)))  :\n           sqrt(min(dot2(p-vec2(0,h)),\n                    dot2(p-vec2(1,0))));\n}\n\nvec3 colors(float t)\n{\n    vec3 a = vec3(0.0, 0.5, 0.5);\n    vec3 b = vec3(0.0, 0.5, 0.5);\n    vec3 c = vec3(0.0, 0.5, 0.33);\n    vec3 d = vec3(0.0, 0.5, 0.667);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    float tanVar = 12.;\n    \n    for (float i = 0.0; i < 2.; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n        float he = 0.501-0.3*cos(iTime*0.8+0.5);\n        float ra = 0.100+0.800*sin(iTime*1.2+2.0);\n        float d = abs((sdRoundedCross(uv, he) - ra) * (sdRoundedCross(uv0, he) + ra));\n        // Cool colors\n        vec3 col = colors(length(uv0) + iTime*.8);\n        d = tan(d*tanVar + iTime)/tanVar;\n        d = abs(d);\n        d = pow(0.01 / d, 1.12);\n        finalColor = col * d;\n    }\n    \n    fragColor = vec4(finalColor, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}