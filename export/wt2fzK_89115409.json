{"ver":"0.1","info":{"id":"wt2fzK","date":"1599404549","viewed":45,"name":"Voronoi + fBM","username":"mharitsnf","description":"Experimenting with voronoi and fbm","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","noise","fbm","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 4.000;\n        amplitude *= 0.204;\n    }\n    return value;\n}\n\nvec2 skew (vec2 st) {\n    vec2 r = vec2(0.0);\n    r.x = 1.1547*st.x;\n    r.y = st.y+0.5*r.x;\n    return r;\n}\n\nvec3 col255to1 (vec3 col) {\n    return col / 255.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    \n    st *= 2.5;\n    vec2 i_st = floor(skew(st));\n    vec2 f_st = fract(skew(st));\n    \n    vec2 q = vec2(0.);\n    q.x = fbm( st + 0.00*iTime);\n    q.y = fbm( st + vec2(1.0));\n\n    vec2 r = vec2(0.);\n    r.x = fbm( st + 1.0*q + vec2(1.7,9.2)+ 0.15*iTime );\n    r.y = fbm( st + 1.0*q + vec2(8.3,2.8)+ 0.126*iTime);\n\n    float f = fbm(st+r);\n    f_st += (f * f * f * 5.) + f * .3 + length(r * .1) - length(q * .2);\n    \n    float m_dist = 1.;\n    \n    for (int y = -1; y <= 1; y++) {\n        for (int x = -1; x <= 1; x++) {\n            \n            vec2 neighbor_offset = vec2(x, y);\n            \n            vec2 point = random2(i_st + neighbor_offset);\n            point = 0.8 + 0.05*sin(iTime + 6.2831*point);\n            \n            vec2 diff = neighbor_offset + point - f_st;\n            float len = smoothstep(-0.244, 1.548, length(diff));\n            // float len = length(diff);\n            m_dist = min(m_dist, len);\n        }\n    }\n    \n    vec3 color = mix(col255to1(vec3(7., 133., 135.)),\n                col255to1(vec3(163, 210, 202)),\n                clamp((m_dist*m_dist)*4.0,0.0,1.0));\n    \n    color = mix(color,\n                col255to1(vec3(94, 170, 168)),\n                clamp(m_dist*m_dist*q.r,0.0,1.0));\n    \n    color = mix(color,\n                col255to1(vec3(16., 25., 53.)),\n                clamp(length(r.x),0.0,1.0));\n\n    fragColor = vec4((m_dist*2. + m_dist * m_dist * m_dist + m_dist * .4) * color,1.0);\n}","name":"Image","description":"","type":"image"}]}