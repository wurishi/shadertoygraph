{"ver":"0.1","info":{"id":"ldGGWK","date":"1456367899","viewed":1721,"name":"zoomable, stored voronoi cells","username":"stb","description":"A strange idea that might have some use. I think I fixed all the artifacts. Looks good in fullscreen, but make sure to reset! Controls: mouse to magnify; R to reset; D to view smoothed distance field; B to view buffer","likes":20,"published":1,"flags":48,"usePreview":0,"tags":["2d","voronoi","zoom","distance","fields","magnify"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define t2D(o) texture(iChannel0, uv-o/res)\n#define len length(fc/zoom-pos) - rad\n#define isKeyHeld(key) texture(iChannel3, vec2(key, .2)).r\n\nfloat happy(vec2 p) {\n    float c, e, m, f;\n    c = .85-length(p);\n    e = length(vec2(abs(p.x)-.26, p.y/2.-.11))-.11;\n    m = abs(length(p-vec2(0., .2))-.7)-.08;\n    m = max(m, length(p+vec2(0., 1.))-.95);\n    f = min(m, min(e, c));\n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 res = iResolution.xy;\n    vec2 fc = fragCoord;\n\tvec2 uv = (fc+vec2(.01)) / res;\n    \n    vec3 RGB = vec3(0.);\n    \n    // zooming\n    float zoom = 1.;\n    vec2 uv2 = (uv-iMouse.xy/res) * vec2(res.x/res.y, 1.);\n    if(iMouse.z>0. && dot(uv2, uv2)<32./res.y) {\n        zoom = 12. - .1 * res.y * dot(uv2, uv2);\n        vec2 m = (1.-zoom) * iMouse.xy;\n    \tuv -= m / res;\n    \tfc -= m;\n        uv /= zoom;\n        // lens color\n        RGB += vec3(.5, .0, 1.) * pow(8./zoom, 8.);\n    }\n    \n    // some directions\n    vec2 dirs[8];\n    dirs[0] = vec2(1., 0.);\n    dirs[1] = vec2(-1., 0.);\n    dirs[2] = vec2(0., 1.);\n    dirs[3] = vec2(0., -1.);\n    dirs[4] = vec2(1., 1.);\n    dirs[5] = vec2(-1., 1.);\n    dirs[6] = vec2(1., -1.);\n    dirs[7] = vec2(-1., -1.);\n    \n    // initial values\n    vec2  pos = t2D(vec2(0.)).rg;\n    float rad = t2D(vec2(0.)).b;\n    float dist = len;\n    \n    // for mapping texture to cells\n    vec2 pos_ = pos;\n    float rad_ = rad;\n    \n    // Merge dists from neighboring cells to prevent artifacts.\n    // Using 4 dirs seems to be ok...\n    for(int i=0; i<4; i++) {\n        pos = t2D(dirs[i]).rg;\n    \trad = t2D(dirs[i]).b;\n        if(len<dist) {\n            dist = len;\n            pos_ = pos;\n            rad_ = rad;\n        }\n    }\n    \n    // variable for smooth-stepping (aa)\n    float ss = 1. / zoom / rad_;\n    \n    // texture mapped to cells\n    float tex = smoothstep(-ss, ss, happy((fc/zoom-pos_)/rad_));\n    vec2 uvc = 2. + (fc/zoom-pos_)/rad_;\n    tex = min(tex, dot(uvc, uvc)/10.);\n    \n    // final color\n    RGB +=\n        mix(\n            (1.-.25*sqrt(abs(dist))) * vec3(0., .3, 1.),\n            tex * vec3(1., .95, .25),\n            smoothstep(-ss, ss, -dist/rad_)\n        );\n    \n    // show smoothed distance field when D is held\n    if(isKeyHeld(68.5/256.)>0.)\n    \tRGB = vec3(dist/16.);\n    \n    // show buffer when B is held\n    if(isKeyHeld(66.5/256.)>0.)\n        RGB = texture(iChannel0, uv).rga*vec3(vec2(1./res), 1.);\n    \n    fragColor = vec4(RGB, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float RadMin = 0.25;\nconst float RadMax = 12.0;\n\n// hash without sine\n// https://www.shadertoy.com/view/4djSRW\n#define MOD3 vec3(.1031,.11369,.13787)\nvec2 hash21(float p) {\n\tvec3 p3 = fract(vec3(p) * MOD3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n\treturn fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\n#define t2D texture(iChannel0, uv)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 res = iResolution.xy;\n\tvec2 uv = fragCoord.xy / res;\n    \n    // values from previous frame\n    vec2  pos = t2D.rg;\n    float rad = t2D.b;\n\tfloat dist = t2D.a;\n    \n    // new values this frame\n    vec2  pos2   = res * hash21(-mod(iTime*10.-1., 1000.));\n    float rad2  = mix(RadMin, RadMax, pow(hash21(mod(iTime*10.+1., 1000.)).x, 4.));\n    float dist2 = length(fragCoord-pos2)-rad2;\n    \n    // merge values based on dists\n    if(dist2<dist) {// && iMouse.z<0.) {\n        pos = pos2;\n        rad = rad2;\n        dist = dist2;\n    }\n    \n    // initialize values first frame, or when R is pressed\n    if(iFrame==0 || texture(iChannel3, vec2(82.5/256., .5)).r>0.) {\n        pos = vec2(-1.e1000);\n        rad = 0.;\n        dist = res.x;\n    }\n    \n    fragColor = vec4(pos, rad, dist);\n}","name":"Buf A","description":"","type":"buffer"}]}