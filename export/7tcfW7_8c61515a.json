{"ver":"0.1","info":{"id":"7tcfW7","date":"1663187667","viewed":100,"name":"Flower Puzzle CIS 566","username":"nmoon","description":"Try to match the given flower patterns!\n\nBrownie points: how do you change the color of the flower from the center?","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"NsVBzy","parentname":"Flower puzzle"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author nmoon, based on code by rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\n \n \n \n //CHOOSE THE FLOWER TO RENDER\n \n //#define PULSING_FLOWER\n //#define SPINNING_FLOWER\n #define CUSTOM_FLOWER\n \n const int background_resolution = 40;\n const int flower_resolution = 15;\n \n \nvec4 circle(vec2 uv, vec2 resolution, float radius, vec3 color)\n{\n    vec2 center = resolution * 0.5;\n    \n#ifdef CUSTOM_FLOWER\n    int binnedX = int(uv.x) % flower_resolution;\n    int binnedY = int(uv.y) % flower_resolution;\n    int binNumberX = int(uv.x) / flower_resolution;\n    int binNumberY = int(uv.y) / flower_resolution;\n    uv = vec2(float(binNumberX), float(binNumberY));\n       \n    int binnedCenterX = int(center.x) % flower_resolution;\n    int binnedCenterY = int(center.y) % flower_resolution;\n    int binNumberCenterX = int(center.x) / flower_resolution;\n    int binNumberCenterY = int(center.y) / flower_resolution;\n    center = vec2(float(binNumberCenterX), float(binNumberCenterY));\n#endif\n\n    // Get distance of point from center, get difference from given radius\n\tfloat dist = length(center - uv) - radius;\n\tfloat t = clamp(dist, 0.0, 1.0);\n    \n#ifdef CUSTOM_FLOWER\n    vec3 a = vec3(color.x,color.y,color.z);\n    vec3 b = vec3(0.36,0.53, random1D(1.4));\n    vec3 c = vec3(.34, random1D(resolution.x / 100.0), random1D(float(int(iTime) % 100)));\n    vec3 d = vec3(random1D(float(flower_resolution)), .3, random1D(resolution.y));\n    color = getCosinePaletteColor(a,b,c,d, length(center - uv) / radius);\n    if (length(center - uv) > 0.9 * radius && length(center - uv) < 1.1 * radius) {\n        color = vec3(0,0,0);\n        t = 0.0;\n    }\n#endif\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n\nfloat computeRadius(vec2 uv, vec2 resolution)\n{\n#ifdef CUSTOM_FLOWER\n    int binnedX = int(uv.x) % flower_resolution;\n    int binnedY = int(uv.y) % flower_resolution;\n    int binNumberX = int(uv.x) / flower_resolution;\n    int binNumberY = int(uv.y) / flower_resolution;\n    uv = vec2(float(binNumberX), float(binNumberY));\n    \n    int binnedResolutionX = int(resolution.x) % flower_resolution;\n    int binnedResolutionY = int(resolution.y) % flower_resolution;\n    int binNumberResolutionX = int(resolution.x) / flower_resolution;\n    int binNumberResolutionY = int(resolution.y) / flower_resolution;\n    resolution = vec2(float(binNumberResolutionX), float(binNumberResolutionY));\n#endif\n\n    float radius = 0.25 * resolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - resolution);\n    \n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    \n#ifdef PULSING_FLOWER       \n    a = 0.5 * (cos((a / 0.523599) * 10.0) + 1.0) + 0.5;\n    float newRadius = radius * a;\n    float t_val = 0.5 * (sin(iTime) + 1.0);\n    t_val = bias(t_val, 0.05);\n    if (radius < newRadius) {\n        radius = mix(radius, newRadius, t_val);\n    }\n    else {\n        radius = mix(newRadius, radius, 1.0 - t_val);\n    }\n#endif\n\n#ifdef SPINNING_FLOWER\n        float tri_one = 0.5 * tri_wave(a - iTime, 0.399, 0.5) + 1.0;\n        float tri_two = 3.0 * tri_wave(a + 3.14159 - iTime, 0.399, 0.5) + 1.0;\n        a = mix(tri_one, tri_two, cos(iTime));\n        radius = a * radius;\n    \n#endif\n\n#ifdef CUSTOM_FLOWER\n    float custom_tri_one = 0.5 * tri_wave(a - iTime, 0.399, 0.5) + 1.0;\n    float custom_tri_two = 3.0 * tri_wave(a + 3.14159 - iTime, 0.399, 0.5) + 1.0;\n    \n    /*float custom_square_one = 0.5 * square_wave(a - iTime, 0.399, 0.5) + 1.0;\n    float custom_square_two = 3.0 * square_wave(a + 3.14159 - iTime, 0.399, 0.5) + 1.0;\n    float custom_square_mix = mix(custom_square_one, custom_square_two, cos(iTime * 0.5 + 10.0));*/\n    \n    a = mix(custom_tri_one, custom_tri_two, cos(iTime));\n    //a = mix(a, custom_square_mix, cos(iTime));\n    float new_a = fbm1D(a + iTime / 1000.0, 2.0, 2.0, 6, 0.5);\n    a = fbm1D(new_a + iTime / 1000.0, 3.0, 0.5, 2, 0.5);\n    radius = a * radius * 1.5;\n#endif\n    \n    return abs(radius);\n}\n\n\n\nvec3 genBackgroundColor(vec2 uv) {\n    int binnedX = int(uv.x) % background_resolution;\n    int binnedY = int(uv.y) % background_resolution;\n    int binNumberX = int(uv.x) / background_resolution;\n    int binNumberY = int(uv.y) / background_resolution;\n    \n    vec3 a = vec3(random1D(1.0),random1D(424.0),random1D(37.0));\n    vec3 b = vec3(random1D(43.0), random1D(53.0), 928.3);\n    vec3 c = vec3(random1D(7.0), random1D(85.0), random1D(96.0));\n    vec3 d = vec3(random1D(float(background_resolution)), 0.64, random1D(24.7));\n    vec3 color = getCosinePaletteColor(a,b,c,d, sin(float(binNumberX) + float(binNumberY) + iTime));\n    \n    \n    vec3 other_a = vec3(random1D(12.0),random1D(424.0),random1D(37.0));\n    vec3 other_b = vec3(random1D(43.0), random1D(53.0), random1D(698.0));\n    vec3 other_c = vec3(random1D(37.0), random1D(5.4), random1D(96.0));\n    vec3 other_d = vec3(random1D(float(background_resolution)), 0.2349, random1D(2435.7));\n    vec3 other_color = getCosinePaletteColor(other_a,other_b,other_c,other_d, sin((float(uv.x)) / 40.0 - iTime));\n    \n    color = mix(color, other_color, sin(float(binNumberX) + float(binNumberY) + iTime) * 0.5);\n    return color;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\t\n\tfloat radius = computeRadius(uv, iResolution.xy);\n    \n    // Background layer\n\tvec4 layer1 = vec4(rgb(255.0, 255.0, 210.0), 1.0);\n    \n#ifdef CUSTOM_FLOWER\n    layer1 = vec4(genBackgroundColor(uv), 1);\n#endif\n\t\n\t// Circle\n    vec3 circle_color = rgb(149.53, 55.43, 195.57);\n\n\tvec4 layer2 = circle(uv, iResolution.xy, radius, circle_color);\n\t\n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\nfloat tri_wave(float x, float freq, float amp) {\n    return abs(mod(x * freq, amp) - (0.5 * amp));\n}\n\nfloat square_wave(float x, float freq, float amp) {\n    return abs(mod(floor(x * freq), 2.0) * amp);\n}\n\n\n/*\n * Noise functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \n \n \nfloat random1D(float input_val) {\n\treturn fract(sin(input_val * 1209.53f) * 49045.478f);\n}\n\nfloat fbm1D(float input_val, float amp, float freq, int octaves, float persistence) {\n    float sum = 0.0;\n    \n    for(int i = 0; i < octaves; ++i) {\n    \n        float input_fract = fract(input_val * freq);\n        float input_floor = floor(input_val * freq);\n        \n        float random_val0 = random1D(input_floor);\n        float random_val1 = random1D(input_floor + 1.0);\n        \n        float t = smoothstep(0.0, 1.0, input_fract);\n        \n        sum += mix(random_val0, random_val1, t) * amp;\n        amp *= persistence;\n        freq *= 2.0;\n    }\n    return sum;\n}\n\nfloat random2D(vec2 input_vals) {\n\treturn fract(sin(dot(input_vals, vec2(3984.52f, 9538.3489f))) * 29834.259f);\n}\n\n\n\n\n\n/*\n * Color functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n \n\n// https://iquilezles.org/articles/palettes/\nvec3 getCosinePaletteColor(vec3 a, vec3 b, vec3 c, vec3 d, float t) {\n    return a + b * cos(2.0 * 3.1415927 * (c * t + d));\n}\n\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}