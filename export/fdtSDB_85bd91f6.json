{"ver":"0.1","info":{"id":"fdtSDB","date":"1635358250","viewed":179,"name":"Paradise Islands","username":"omegasbk","description":"Made these cute islands for fun, added basic day&night cycle to spice it up. \nSuper hacky.\n\nHint: You can use the mouse to change the water level!","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","islands"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Made by Darko Supe (omegasbk)\n// 27.10.2021.\n// Super hacky, I was just having fun :D\n\n#define MAX_STEPS 1000\n#define MAX_DIST 100.\n#define SURF_DIST .005\n\n#define PI 3.14159265359\n\n#define NONE 0.0\n#define SEA 1.0\n#define ISLAND 2.0\n#define SUN 3.0\n\n#define FLYING_SPEED 2.0\n#define SUN_SIZE 2.1\n\n#define SUN_DISTANCE 200.\n\n#define FOG_AMOUNT .97\n\nfloat SHORE_LINE = -4.5;\n\nvec3 lightPosition = vec3(0, 1, SUN_DISTANCE);\nvec3 lightColor = vec3(0.34, 0.3, 0.3) * 2.1;\nconst float lightIntensity = 1.5;\n\nfloat noise(vec2 uv)\n{\n    return fract((sin(uv.x * 113. + uv.y * 412.) + 1.) / 2. * 6339.);\n}\n\nfloat add(float d1, float d2) \n{ \n    return min(d1,d2); \n}\n\nfloat noiseSmooth(vec2 uv)\n{\n    vec2 index = floor(uv);\n    \n    vec2 pq = fract(uv);\n    pq = smoothstep(0., 1., pq);\n     \n    float topLeft = noise(index);\n    float topRight = noise(index + vec2(1, 0.));\n    float top = mix(topLeft, topRight, pq.x);\n    \n    float bottomLeft = noise(index + vec2(0, 1));\n    float bottomRight = noise(index + vec2(1, 1));\n    float bottom = mix(bottomLeft, bottomRight, pq.x);\n    \n    return mix(top, bottom, pq.y);\n}\n\nfloat plane(vec3 p, vec3 n, float h)\n{\n    return dot(p,n) + h;\n}\n\nfloat sea(vec3 p)\n{\n    return dot(p, vec3(0., 1., 0)) - SHORE_LINE;\n}\n\nfloat islands(vec3 p, float h)\n{\n    h += noiseSmooth(p.xz / 8.) * 4.;\n    h += noiseSmooth(p.xz / 16.) * 2.;\n    h += noiseSmooth(p.xz / 32.);\n\n    h += textureLod(iChannel1, p.xz / 25., 0.).r;\n    return dot(p, vec3(0., 1., 0)) - h;\n}\n\nfloat sun(vec3 p)\n{\n    return distance(p, lightPosition - vec3(0., 0., SUN_DISTANCE)) - SUN_SIZE;\n}\n\nvec2 getDist(in vec3 p, in float specific)\n{    \n    float dIslands = islands(p, -8.);\n    float dSea = sea(p);\n    float dSun = sun(p);\n    \n    if (int(specific) == int(ISLAND))\n        return vec2(dIslands, ISLAND);\n\n    if (dIslands < dSea && dIslands < dSun)\n    {\n        return vec2(dIslands, ISLAND);\n    }\n    else if (dSea < dIslands && dSea < dSun)\n    {\n        return vec2(dSea, SEA);\n    }\n\n    return vec2(dSun, SUN);\n}\n\nvec3 getNormal(in vec3 p) \n{\n    vec2 d = getDist(p, NONE);\n    \n    vec2 e = vec2(.01, 0); \n    \n    vec3 n = d.x - vec3(\n        getDist(p - e.xyy, NONE).x, \n        getDist(p - e.yxy, NONE).x, \n        getDist(p - e.yyx, NONE).x);\n        \n    return normalize(n);\n}\n\nvec2 rayMarch(in vec3 ro, in vec3 rd, float specific)\n{\n    float dO = 0.;\n    float body = -1.;\n    \n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd * dO;\n        vec2 distVec = getDist(p, specific);\n        float dS = distVec.x;\n        body = distVec.y;\n        \n        dO += dS;\n        \n        if (dO > MAX_DIST)\n            return vec2(MAX_DIST, -1.);\n            \n        if (dS < SURF_DIST)\n            return vec2(dO, body);\n    }\n    \n    return vec2(dO, body);\n}\n\nvec3 getLight(in vec3 p, in vec3 rd, float ambiant, float diff, float shininess)\n{    \n\tvec3 normal = getNormal(p);\n    \n    vec3 lightDir = normalize(p - lightPosition);   \n    \n    float cosa = pow(0.5+0.5*dot(normal, -lightDir), 3.0);\n    float cosr = max(dot(-rd, reflect(lightDir, normal)), 0.0);\n    \n    vec3 diffuse = vec3(diff * cosa);\n    vec3 phong = vec3(0.5 * pow(cosr, shininess));\n    \n    return lightColor * (vec3(ambiant) + diffuse + phong) * lightIntensity;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 skyColor = vec3(0.1, 0.5, 1.) * (1.4 - uv.y);\n    \n    vec3 ro = vec3(sin(iTime) / 4., 0.5 + sin(sin(iTime)) / 2., iTime * FLYING_SPEED) + vec3(0., 1.2, 0.);\n    vec3 rd = normalize(vec3(uv.x, uv.y-0.2, 0.8));\n    \n    float lightMovement = fract(iTime / 25.) - 0.5;\n    //float lightMovement = 0.;\n\n    lightPosition.x = 200. * lightMovement;\n    lightPosition.y += sin((lightPosition.x - 189.) / 40.) * 18.; \n    \n    lightPosition += ro + vec3(0., 0., 60.);\n          \n    lightColor *= 1.0 - pow(abs(lightMovement * 2.), 2.0); \n    \n    lightColor.z += pow(abs(lightMovement * 2.), 2.0) / 3.; \n    \n    skyColor *= lightColor + 0.5;\n    skyColor.x *= (18. - lightPosition.y) * smoothstep(0.5, 0.1, abs(lightMovement));\n          \n    SHORE_LINE =((iMouse.y / iResolution.y) * 5.) - 4.;\n   \n    vec2 distVec = rayMarch(ro, rd, NONE);\n    if (distVec.x < MAX_DIST)\n    {\n        vec3 p = ro + rd * distVec.x;   \n        vec3 n = getNormal(p);\n        \n        if (distVec.y == SEA)\n        {\n            col = vec3(0.1, 0.65, 0.9);\n            \n            vec3 refrRay = refract(rd, n, 1./1.4);\n            distVec = rayMarch(p + refrRay * 0.01, rd, ISLAND);\n            \n            if (distVec.x < MAX_DIST)\n            {\n                col = mix(col, vec3(max(0., 1. - distVec.x)), 0.1);\n            }\n                        \n            vec3 reflRay = reflect(rd, n);\n            distVec = rayMarch(p + reflRay * 0.01, reflRay, NONE);\n                        \n            if (distVec.x < MAX_DIST)\n            {\n                vec3 pRefl = p + reflRay * distVec.x;  \n                \n                if (distVec.y != SUN)\n                    col = mix(getLight(pRefl, reflRay, 0.4, 0.6, 0.2), col, 0.8);\n                else\n                    col = mix(lightColor * 4., col, 0.8);\n            }\n            \n            col *= getLight(p, n, 1.3, 0.4, 50.0) / 1.5;\n        }\n        else if (distVec.y == SUN)\n        {\n            col = lightColor * 4.;\n        }  \n        else\n        {\n            col = vec3(0.1, 0.8, 0.3);\n            float sand = smoothstep(SHORE_LINE + 0.5, SHORE_LINE, p.y);\n            col = mix(col, vec3(0.8, 0.7, 0.5) * (2.5 - sand), sand);\n            col *= getLight(p, rd, 0.4, 0.2, 1.); \n        }  \n        \n        col = mix(col, skyColor, clamp(mix((FOG_AMOUNT * distance(ro, p)) / MAX_DIST, 1., -.5), 0., 1.)); // Distance fog\n        col = mix(col, skyColor, clamp(mix(FOG_AMOUNT * 0.38, 1., -.5), 0., 1.)); // General fog\n    }\n    else \n    {    \n        col = skyColor;\n    }   \n    \n    \n    fragColor = vec4(col,1.0) / 1.1;\n}","name":"Image","description":"","type":"image"}]}