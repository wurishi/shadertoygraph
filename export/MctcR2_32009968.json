{"ver":"0.1","info":{"id":"MctcR2","date":"1731272439","viewed":25,"name":"Cool fractals","username":"tdkski","description":"nice","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 cmpmul(vec2 a, vec2 b) {\n    float real = a.x*b.x - a.y*b.y;\n    float imag = a.x*b.y + a.y*b.x;\n    return vec2(real, imag);\n}\nvec2 cmpdiv(vec2 a, vec2 b) {\n    float magsq = (b.x*b.x + b.y+b.y);\n    float real = a.x*b.x + a.y*b.y;\n    float imag = a.y*b.x - a.x*b.y;\n    return vec2(real, imag) / magsq;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float N = 2.7;\n    vec2 root1 = vec2(.5,-1);\n    vec2 root2 = vec2(-1,1);\n    vec2 root3 = 7. *(iMouse.xy - .5*iResolution.xy) / iResolution.x;\n    \n    vec2 x = 8. *(fragCoord.xy - .5*iResolution.xy) / iResolution.x;\n    \n    for(int i = 0; i < 1000; i ++) {\n        vec2 a = x - root1;\n        vec2 b = x - root2;\n        vec2 c = x - root3;\n        vec2 f = cmpmul(cmpmul(a, b), c);\n        vec2 dxdf = cmpmul(a, b + c - 2.*x) + cmpmul(b, c - 2.*x) + cmpmul(x, 3.*x - 2.*c);\n        \n        // Newton's Method Iteration\n        x -=  cmpdiv(f, dxdf);\n        if(distance(x,vec2(0,0)) > N){\n            //fragColor = vec4(d1, d2, d3,1) / distance(x,vec2(0,0)); // (max3(d1,d2,d3));\n            break;\n        }\n    }\n    \n    float d1 = distance(x, root1);\n    float d2 = distance(x, root2);\n    float d3 = distance(x, root3);\n    float m = max(max(d1, d2),d3);\n    vec3 col = 1.-1.2*vec3(0.7*tanh(0.9/(d1)), .1+.5*tanh(0.9/(d3)) , .6*tanh(1./(d2)));\n    \n     \n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}