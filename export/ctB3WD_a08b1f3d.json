{"ver":"0.1","info":{"id":"ctB3WD","date":"1673290576","viewed":138,"name":"Antipod - MAGFest #03","username":"Flopine","description":"One of the piece I made for ThronoCrigger's set at MAGFest 2023! ","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","animation","glow","truchet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU (2.*PI)\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define noise(u) textureLod(iChannel0, u, 0.).x\n#define rep(p,d) p=mod(p,d)-d*.5\n\n#define anim(of,st,po) ( (TAU/st)*(floor(iTime+of)+pow(fract(iTime+of), po)) )\n\nstruct obj\n{\n    float d;\n    vec3 c;\n};\n\nobj minobj (obj a, obj b)\n{\n    if (a.d<b.d) return a;\n    else return b;\n}\n\nvec2 frame (vec2 uv)\n{\n    vec2 id = floor(uv);\n    uv = fract(uv)-.5;\n    \n    float n = noise(id*.24);\n    if (n < .5) uv.x *= -1.;\n    \n    float d1 = abs(abs(uv.x+uv.y)-.5);\n    \n    float ru = abs(uv.x+uv.y)-.5;\n    rep(ru, .25);\n    float d2  = length(ru)-0.085;\n    \n    return vec2(d1, d2);\n}\n\nfloat extrude (vec3 p, float d, float h)\n{\n    vec2 q = vec2(d, abs(p.z)-h);\n    return min(max(q.x, q.y), 0.)+length(max(q,0.));\n}\n\nobj SDF (vec3 p)\n{\n    p.xy *= rot(anim(.5, 5., 20.));   \n    p.yz *= rot(PI/12.);   \n    p.y += iTime*4.;\n    \n    obj scene = obj(extrude(p, frame(p.xy).y, .05)-.01, vec3(.81, 0.81, .36));\n    scene = minobj( scene, obj(extrude(p, frame(p.xy).x, .3)-.1, vec3(1.) ));\n   \n    return scene;\n}\n\nvec3 gn (vec3 p)\n{\n    vec2 eps = vec2(0.001, 0.);\n    return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d, SDF(p-eps.yxy).d, SDF(p-eps.yyx).d));\n}\n\nfloat AO (vec3 p, vec3 n, float e)\n{return clamp(SDF(p+e*n).d/e, 0., 1.);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 ro=vec3(0.001, 0.001, -4.), rd=normalize(vec3(uv,1.)), p=ro,\n    col = vec3(0.4, .5, 0.2), \n    l=normalize(vec3( 0., .2, -1.));\n    \n    bool hit = false; obj O;\n    \n    for (float i=0.; i<64.; i++)\n    {\n        O = SDF(p);\n        if (O.d<0.001)\n        {\n           hit=true; break; \n        }\n        p += O.d*rd*.8;\n    }\n    \n    if (hit)\n    {\n        vec3 n = gn(p);\n        float li = max(dot(n,l),0.);\n        float ao = AO(p,n,0.1)+AO(p,n,0.15)+AO(p,n,0.2);\n        col = mix(vec3(0., .25, .15), O.c, li);\n        col = mix(vec3(0., .99, .1)*clamp(exp(-fract(iTime)), 0., 1.), \n                    col, \n                    ao/3.\n                );\n    }\n\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}