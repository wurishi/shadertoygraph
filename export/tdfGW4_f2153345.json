{"ver":"0.1","info":{"id":"tdfGW4","date":"1546209153","viewed":987,"name":"The Cave digital retexture 2","username":"oO0","description":"use muse XY to settings texture ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","tunnel","raymarch","texture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Fork of \"The Cave\" by BoyC. https://shadertoy.com/view/MsX3RH\n// 2018-12-30 22:01:35\n\n// constants for the camera tunnel\nconst vec2 cama=vec2(-2.6943,3.0483);\nconst vec2 camb=vec2(0.2516,0.1749);\nconst vec2 camc=vec2(-3.7902,2.4478);\nconst vec2 camd=vec2(0.0865,-0.1664);\n\nconst vec2 lighta=vec2(1.4301,4.0985);\nconst vec2 lightb=vec2(-0.1276,0.2347);\nconst vec2 lightc=vec2(-2.2655,1.5066);\nconst vec2 lightd=vec2(-0.1284,0.0731);\n\n// calculates the position of a single tunnel\nvec2 Position(float z, vec2 a, vec2 b, vec2 c, vec2 d)\n{\n\treturn sin(z*a)*b+cos(z*c)*d;\n}\n\n// calculates 3D positon of a tunnel for a given time\nvec3 Position3D(float time, vec2 a, vec2 b, vec2 c, vec2 d)\n{\n\treturn vec3(Position(time,a,b,c,d),time);\n}\n\n// 2d distance field for a slice of a single tunnel\nfloat Distance(vec3 p, vec2 a, vec2 b, vec2 c, vec2 d, vec2 e, float r)\n{\n\tvec2 pos=Position(p.z,a,b,c,d);\t\n\tfloat radius=max(5.0,r+sin(p.z*e.x)*e.y)/10000.0;\n\treturn radius/dot(p.xy-pos,p.xy-pos);\n}\n\n// 2d distance field for a slice of the tunnel network\nfloat Dist2D(vec3 pos)\n{\n\tfloat d=0.0;\n\t\n\td+=Distance(pos,cama,camb,camc,camd,vec2(2.1913,15.4634),70.0000);\n\td+=Distance(pos,lighta,lightb,lightc,lightd,vec2(0.3814,12.7206),17.0590);\n\td+=Distance(pos,vec2(2.7377,-1.2462),vec2(-0.1914,-0.2339),vec2(-1.3698,-0.6855),vec2(0.1049,-0.1347),vec2(-1.1157,13.6200),27.3718);\n\td+=Distance(pos,vec2(-2.3815,0.2382),vec2(-0.1528,-0.1475),vec2(0.9996,-2.1459),vec2(-0.0566,-0.0854),vec2(0.3287,12.1713),21.8130);\n\td+=Distance(pos,vec2(-2.7424,4.8901),vec2(-0.1257,0.2561),vec2(-0.4138,2.6706),vec2(-0.1355,0.1648),vec2(2.8162,14.8847),32.2235);\n\td+=Distance(pos,vec2(-2.2158,4.5260),vec2(0.2834,0.2319),vec2(4.2578,-2.5997),vec2(-0.0391,-0.2070),vec2(2.2086,13.0546),30.9920);\n\td+=Distance(pos,vec2(0.9824,4.4131),vec2(0.2281,-0.2955),vec2(-0.6033,0.4780),vec2(-0.1544,0.1360),vec2(3.2020,12.2138),29.1169);\n\td+=Distance(pos,vec2(1.2733,-2.4752),vec2(-0.2821,-0.1180),vec2(3.4862,-0.7046),vec2(0.0224,0.2024),vec2(-2.2714,9.7317),6.3008);\n\td+=Distance(pos,vec2(2.6860,2.3608),vec2(-0.1486,0.2376),vec2(2.0568,1.5440),vec2(0.0367,0.1594),vec2(-2.0396,10.2225),25.5348);\n\td+=Distance(pos,vec2(0.5009,0.9612),vec2(0.1818,-0.1669),vec2(0.0698,-2.0880),vec2(0.1424,0.1063),vec2(1.7980,11.2733),35.7880);\n\t\n\treturn d;\n}\n\nvec3 nmap(vec2 t, sampler2D tx, float str)\n{\n\tfloat d=1.0/1024.0;\n\n\tfloat xy=texture(tx,t).x;\n\tfloat x2=texture(tx,t+vec2(d,0)).x;\n\tfloat y2=texture(tx,t+vec2(0,d)).x;\n\t\n\tfloat s=(1.0-str)*1.2;\n\ts*=s;\n\ts*=s;\n\t\n\treturn normalize(vec3(x2-xy,y2-xy,s/8.0));///2.0+0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat time=iTime/3.0+291.0;//+43.63/3.0;\n\n\t//calculate camera by looking ahead in the tunnel\n\t\n\tvec2 p1=Position(time+0.05,cama,camb,camc,camd); //position ahead\n\tvec3 Pos=Position3D(time,cama,camb,camc,camd); //current position\n\tvec3 oPos=Pos;\n\t\n\tvec3 CamDir=normalize(vec3(p1.x-Pos.x,-p1.y+Pos.y,0.1));\n\tvec3 CamRight=normalize(cross(CamDir,vec3(0,1,0)));\n\tvec3 CamUp=normalize(cross(CamRight,CamDir));\t\n\tmat3 cam=mat3(CamRight,CamUp,CamDir);\n\n\t//ray calculation\t\n\tvec2 uv=2.0*fragCoord.xy/iResolution.xy-1.0;\n\tfloat aspect=iResolution.x/iResolution.y;\n\t\n\tvec3 Dir=normalize(vec3(uv*vec2(aspect,1.0),1.0))*cam;\n\t\n\t//raymarching\n\tfloat fade=0.0;\n\t\n\tconst float numit=75.0; //raymarch precision\n\tconst float threshold=1.20; //defines the thickness of tunnels\n\tconst float scale=1.5; //tunnel z depth\n\t\n\tvec3 Posm1=Pos;\n\t\n\t//calculate first hit\n\tfor (float x=0.0; x<numit; x++)\n\t{\n\t\tif (Dist2D(Pos)<threshold)\n\t\t{\n\t\t\tfade=1.0-x/numit;\n\t\t\tbreak;\n\t\t}\n\t\tPosm1=Pos;\n\t\tPos+=Dir/numit*scale;//*(1.0+x/numit);\n\t}\n\n\t//track back to get better resolution\n\tfor (int x=0; x<6; x++)\n\t{\n\t\tvec3 p2=(Posm1+Pos)/2.0;\n\t\tif (Dist2D(p2)<threshold) \n\t\t\tPos=p2;\n\t\telse\n\t\t\tPosm1=p2;\n\t}\t\n\n\t//lighting\t\n\tvec3 n=normalize(vec3(Dist2D(Pos+vec3(0.01,0,0))-Dist2D(Pos+vec3(-0.01,0,0)),\n\t\t\t\t\t\t  Dist2D(Pos+vec3(0,0.01,0))-Dist2D(Pos+vec3(0,-0.01,0)),\n\t\t\t\t\t\t  Dist2D(Pos+vec3(0,0,0.01))-Dist2D(Pos+vec3(0,0,-0.01))));\n\t\n\t//triplanar blend vector\n\tvec3 tpn=normalize(max(vec3(0.0),(abs(n.xyz)-vec3(0.2))*7.0))*0.5;\n\t\n\t//position of the light - uncomment the second line to get a more interesting path\n\tvec3 lp=Position3D(time+0.5,cama,camb,camc,camd); //current light position\n\t//lp=Position3D(time+0.3,lighta,lightb,lightc,lightd);\n\t\n\tvec3 ld=lp-Pos;\t//light direction\n\tfloat lv=1.0;\n\t\n\tconst float ShadowIT=15.0; //shadow precision\n\t\n\t//shadow calc\n\tfor (float x=1.0; x<ShadowIT; x++)\n\t\tif (Dist2D(Pos+ld*(x/ShadowIT))<threshold) \n\t\t{\n\t\t\tlv=0.0;\n\t\t\tbreak;\n\t\t}\n\n\tvec3 tuv=Pos*vec3(3.0,3.0,1.5);\t//texture coordinates\n\t\n\t//normal mapping\n\tfloat nms=0.19;\n\tvec3 nmx=nmap(tuv.yz,iChannel0,nms)+nmap(-tuv.yz,iChannel0,nms);\n\tvec3 nmy=nmap(tuv.xz,iChannel1,nms)+nmap(-tuv.xz,iChannel1,nms);\n\tvec3 nmz=nmap(tuv.xy,iChannel2,nms)+nmap(-tuv.xy,iChannel2,nms);\n\t\n\tvec3 nn=normalize(nmx*tpn.x+nmy*tpn.y+nmz*tpn.z);\n\t\n\tfloat dd;\n\t//normalmapped version:\n\tdd=max(0.0,dot(nn,normalize(ld*mat3(vec3(1,0,0),vec3(0,0,1),n))));\n\t//standard version:\n\t//dd=max(0.0,dot(n,normalize(ld)));\n\t\n\tvec4 diff=vec4(dd*1.2*lv)+vec4(0.2);\n\n\t//wisp\n\tfloat w=pow(dot(normalize(Pos-oPos),normalize(lp-oPos)),5000.0);\n\tif (length(Pos-oPos)<length(lp-oPos)) w=0.0;\t\n\n\t//texturing\n\t//double sampling to fix seams on texture edges\n    \n    float ctx=max(sin(Pos.x*200.),cos(Pos.y*200.));\n     ctx=min( ctx,sin(Pos.z*200.));\n    ctx=ctx*2.2;\n    \n    //tex stripes\n   float zStripes=min(atan(sin(Pos.z*5.)*55.),sin(Pos.z*111.));\n   zStripes*=10.;\n    \n    //tex dots\n    float ctxDots=sin(Pos.x*130.)*sin(Pos.y*130.)*sin(Pos.z*130.);\n    \tctxDots=ctxDots*ctxDots*ctxDots*10.;\n    \n   //mux   \n   ctx =max(ctx, zStripes*(sin(1.6+iMouse.x/100.)));\n\n    if (iMouse.xy==vec2(0)) //startup\n    {\n       ctx =mix(ctx,ctxDots,sin(iTime/2.));\n    }\n    else\n       ctx =mix(ctx,ctxDots,iMouse.y/iResolution.y);  \n    \n    \n    vec4 tx=vec4(\n        ctx*sin(Pos.x*10.) ,//+atan(sin(Pos.x*55.)*55.),\n        ctx*sin(Pos.y*10.)  ,\n       ctx*sin(Pos.z*10.) //+atan(sin(Pos.y*55.)*55.)\n        , 1.);\n\tvec4 col=tx*tpn.x;\n\t\n\tfragColor = col*min(1.0,fade*10.0)+w; //*diff\n  \n     \n\n}","name":"Image","description":"","type":"image"}]}