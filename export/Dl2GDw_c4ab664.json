{"ver":"0.1","info":{"id":"Dl2GDw","date":"1673399011","viewed":284,"name":"Fractal mosaic 35","username":"jarble","description":"Yet another fractal mosaic pattern.","likes":21,"published":3,"flags":8,"usePreview":0,"tags":["fractal","mosaic","rug"],"hasliked":0,"parentid":"flcBz7","parentname":"Fractal mosaic 13"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define fmod(x,y) mod(floor(x),y)\nvec2 triangle_wave(vec2 a){\n    vec2 a2 = //change this constant to get other interesting patterns\n        vec2(1.,.5)\n        //-vec2(1.,.5)\n        //vec2(1.5,0.)\n        //vec2(0.,2.)\n    ,\n    \n    a1 = a+a2;\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n    //a1 += (distance(floor(a1),round(a1)))/1.5;\n\n    return\n        abs(fract((a1)*(a2.x+a2.y))-.5)\n        //abs(abs(fract((a1)*(a2.x+a2.y))-.5)-.5)\n        //abs(abs(fract((a1)*(a2.x+a2.y))-.5)+.125)/1.125\n    ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 8.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv.x += iTime/t1/12.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    for(int k = 0; k < 12; k++){\n        //uv += pow(floor(uv.x*2.),3.)/2.;\n\n        //uv.x -= floor(uv.y*1.5)/1.5;\n        //uv += floor(uv+vec2(1.,.5))/1.5;\n        vec2 uv1 = uv;\n        //if(uv.x>uv.y)\n        uv = (uv+t2)/scale;\n        //uv += (distance(floor(uv),round(uv+.5)));\n\n        //uv *= sign(uv1-uv1.yx);\n        //uv *= sign(uv-uv.yx);\n        \n        //if(uv.y>uv.x) uv = uv.yx;\n        t2 = triangle_wave(uv+.5);\n        \n        //uv += floor(uv.y-uv.x);\n        uv = t2-triangle_wave(uv.yx);\n        \n        \n        //uv.x += sign(uv.y-uv.x-.5)+.5;\n        \n        //another really interesting pattern\n        //uv.x +=\n            //floor(uv1.x)/1.5\n            //.5\n        //;\n        \n        //uv += dot(uv,uv); //makes another interesting pattern\n        col.x =\n            max(max(abs(t2.y*sign(uv.y)-t2.x),abs(uv.y*sign(uv.y)-uv.x))/3.,col.x)\n            //max(max(abs(t2.y*(uv.y)-t2.x),abs(uv.y*(uv.y)-uv.x))/3.,col.x)\n            //max(max(fract(t2.y-t2.x+.5),fract(uv.y-uv.x+.5))/3.,col.x)\n            //max(max(abs(t2.y-t2.x),abs(uv.y*sign(uv.x)-uv.x))/3.,col.x)\n        ;\n        col =\n            abs(col-(1.-col.x))\n            //abs(col-(1.-max(col.x,max(col.y,col.z)))).yzx\n            //max(abs(col-(1.-col.x)),col/4.)\n        ;\n            //abs(col*col.yzx-(1.-col.x));\n        //{uv=uv.yx;t2=t2.yx;}\n    }\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define fract1(a) fract(a)*fract(a)\n\nfloat fmod2(float a, float b){\n    return mod(floor(a),b)*b;\n}\n\n\nfloat fmod(float a, float b){\n    //a += floor(a/8./pow(8.,fmod2(a,8.)));\n    //a = a/2. + floor(a)/b*8.;\n    //a += pow(b/2.,2.);\n    //divide by powers of 2 to get interesting rhythms\n    float a1 = a;\n    //a /= 1. + mod(floor(a1/3.),2.);\n    //a /= 1. + mod(floor(a1/4.),2.);\n    //a /= 1. + mod(floor(a1/2.),2.);\n    return\n        mod(floor(a),b)\n        //mod(floor(floor(a)/3.*b),b)\n        //mod(mod(floor(a)+4.,floor(a/4.)+4.),b)\n        //floor((mod(floor(a+b/2.),b)+mod(floor(a+b/4.),b/2.)))\n        //max(mod(floor(-a),b),mod(floor(a/2.),b))\n        //mod(floor(a+floor(a/b)),b)\n        //mod(floor(a)+floor(a+floor(a/b)),b)\n    ;\n}\n//#define fmod(a, b) mod(mod(floor(a),floor(1.+(a)/2.)),b)\n\n//#define fmod(x,y) mod(floor(floor(x)+mod((x)/8.,8.)/8.),y)\n//#define fmod(x,y) mod(floor(x+floor((x)/y/y)*floor((x)/y/y)),y)\n//#define fmod(x,y) max(floor(mod(floor(x)*(y*y+2.),y*y)/y),floor(mod(floor(x)*(y*y-2.),y*y)/y))\n\nvec2 mainSound(int samp, float time){\n  \n  float tempo = 1.;\n  time /= tempo;\n  \n  //time = (time + pow(2.,fmod(time*2.,3.)));\n  \n  //for(int i = 0; i < 5; i++){ time += fmod(floor(time*8.),2.); }\n  //time = time+floor(time)*floor(floor(time));\n  float s1 =\n      8.,\n  m4 =\n      fmod(floor(time*s1/2.)*floor(time/s1/2.),2.)\n  ,\n  s2 = s1*(.5-m4)*2.,\n  t=\n      time\n      //(time/2.+fmod(time/2.+.5,2.))*2.\n  ,\n  m1 =\n      fmod(floor(t/s1)*floor(t*s1/8.*(.5-m4)*2.),s2)\n  ,\n  m3 =\n      fmod(floor(t*s1)/(m1+.5),s2);\n  t /=\n      1.;\n  ;\n  t *=\n      s1*s1\n  ;\n  float m2 =\n      1. + fmod(t/s1,s1)\n  ;\n  \n  float a=\n      //pow(2.,log(1.)-log(fract(t/s1)/2.))\n      64.*(1.-(fract1(t/s1)/1.25))*.2\n  ,\n\n  nb =\n      time*pow(2.,(m3+m2)/5.+6.)*tempo\n      //pow(2.,(m3+m2+mod(m3/2.-m2,2.)*2.)/5.+5.5)\n  ;\n\n  return\n      //abs(.5-vec2(fract(nb*.998*2.),fract(nb*(1.+fmod(t/s1/s1,2.)))))*a\n      \n      //sitar\n      log(abs(a/16.-abs(.5-vec2(fract1(nb*.998),fract1(nb)))*a))\n      \n      //vec2(fract(nb*.998/4.*m2*s1)*a,fract(nb/4.*m2)*a)\n  ;\n}","name":"Sound","description":"","type":"sound"}]}