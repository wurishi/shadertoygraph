{"ver":"0.1","info":{"id":"fsjGWm","date":"1617496756","viewed":97,"name":"Penumbra Soft Shadow_HW09","username":"roamingsci","description":"This shader is a soft shadow approximation with distance fields.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["softshadow","penumbrashadow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int RAY_STEPS = 256;\nconst float FOVY = 3.141569 * 0.25;\n\n// The higher the value, the smaller the penumbra\nconst float SHADOW_HARDNESS = 6.0;\n// The higher the value, the denser the penumbra\nconst int SHADOW_STEPS = 10;\n\n#define IDBackWall 1\n#define IDFloorWall 2\n#define IDShortCube 3\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj)\n{\n    // Initialize to back wall sdf\n    t = plane(pos, vec4(0.0, 0.0, -1.0, 5.0));\n    obj = IDBackWall;\n\n    float t2;\n    // Check floor wall\n    if((t2 = plane(pos, vec4(0.0, 1.0, 0.0, 2.5))) < t)\n    {\n        t = t2;\n        obj = IDFloorWall;\n    }\n    // Check of short cube\n    if((t2 = box(rotateY(pos + vec3(0., 1., 1.75), 17.5 * 3.14159 / 180.0), vec3(1.5, 1.5, 1.5))) < t)\n    {\n        t = t2;\n        obj = IDShortCube;\n    }\n}\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t;\n    int obj;\n    sceneMap3D(pos,t,obj);\n    return t;\n}\n\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n    // If there is no object in 256 steps\n    t = -1.0;\n    hitObj = -1;\n}\n\n// Follow the code in Visual Effects PPT\nfloat softShadow(vec3 dir, vec3 origin, float min_t, float k) {\n    float res = 1.0;\n    float t = min_t;\n    for(int i = 0; i < SHADOW_STEPS; ++i) {\n        float m = sceneMap3D(origin + t * dir);\n        if(m < 0.0001) {\n            return 0.;\n        }\n        res = min(res, k * m / t);\n        t += m;\n    }\n    res = clamp(res, -1., 1.);    \n    return res;\n}\n\nfloat hardShadow(vec3 dir, vec3 origin, float min_t) {\n    float t = min_t;\n    for(int i = 0; i < RAY_STEPS; ++i) {\n        float m = sceneMap3D(origin + t * dir);\n        if(m < 0.0001) {\n            return 0.0;\n        }\n        t += m;\n    }\n    return 1.0;\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec, vec3 view)\n{\n    // Use the simple lamber shading for this scene\n    float lambert = abs(dot(-lightVec, n));\n    vec3 lightCol = vec3(1.0, 0.88, 0.7);\n    switch(hitObj){\n        case IDShortCube:\n        return (lambert) * lightCol * vec3(0.3, 0.5, 1.);\n        break;\n        case IDBackWall:\n        return lightCol * vec3(1., 1., 1.) * lambert;\n        break;\n        case IDFloorWall:\n        return lightCol * vec3(1., 1., 1.) * lambert;\n        break;\n        case -1:\n        return vec3(0., 0., 0.);\n        break;\n    }\n    return vec3(1.);\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    // Set the light as a point light\n    vec3 lightPos = vec3(2.0 * sin(iTime * 0.5), 6., -2. + 2.5 * cos(iTime * 0.5));\n\n    vec3 lightDir = normalize(isect - lightPos);\n    \n    float shadow = softShadow(-lightDir, isect, 0.02, SHADOW_HARDNESS);\n    \n    vec3 surfaceColor = shadow * computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));\n    surfaceColor = clamp(surfaceColor, 0., 1.);\n\n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\n\nvec3 rayCast(vec3 eye, vec3 ref, vec2 ndc)\n{\n    vec3 F = ref - eye;\n    vec3 R = normalize(cross(F, vec3(0.0, 1.0, 0.0)));\n    vec3 U = normalize(cross(R, F));\n\n    vec3 V = U * length(F) * tan(FOVY * 0.5);\n    vec3 H = R * length(F) * tan(FOVY * 0.5) * float(iResolution.x) / iResolution.y;\n\n    vec3 p = ref + ndc.x * H + ndc.y * V;\n\n    return normalize(p - eye);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // [-1, 1]\n    uv = uv * 2.0 - vec2(1.0, 1.0);\n\n    vec3 eye = vec3(0, 3, -20);\n\n    vec3 ref = vec3(0, 0, 100);\n\n    vec3 rayDir = rayCast(eye, ref, uv);\n\n    Intersection isect = sdf3D(rayDir, eye);\n\n    // Output to screen\n    fragColor = vec4(isect.color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}