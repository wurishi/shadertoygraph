{"ver":"0.1","info":{"id":"XtcXDM","date":"1479813953","viewed":99,"name":"Mandelbrot set s1511411","username":"RyoMorimoto","description":"筑波大学情報科学類の講義「複素関数論」の課題として制作しました。","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define xshift 43.0\n#define yshift 34.134\n#define scale .01\n\n\n// 複素数を２乗する関数\nvec2 dc_square(in vec2 z)\n{\t\n    float re = (z.x*z.x) - (z.y*z.y);\n    float im = 2.0 * z.x * z.y;\n    return vec2(re,im);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    //colは後に各座標の色になる\n    vec3 col = vec3(0.0, 0.0 ,0.0 );\n    vec2 p = vec2(\n       ((fragCoord.x - iResolution.x/2.0) / iResolution.x)*(iResolution.x/iResolution.y),\n       ((fragCoord.y - iResolution.y/2.0) / iResolution.y)\n       );\n    \n    //vec2 p = -1.0 + 2.5 * fragCoord.xy / iResolution.xy;\n    //p.x *= iResolution.x/iResolution.y;\n    float tz =   -0.7*cos(0.225*iTime)+0.1;\n    float zo = pow( 0.5, 13.0*tz );\n    \n    vec2 z = vec2(0,0);\n    \n    vec2 c = p*zo;\n    \n    c.x += xshift;\n   \tc.y += yshift;\n    c *= scale;\n    \n    \n    for (int i = 0; i < 500; i++) {\n        if(length(z) >= 3.5){\n           col = vec3(1.0-1.0/mod(float(i),8.0),1.0-1.0/mod(float(i),3.0),1.0-1.0/mod(float(i),7.0));\n        }\n        \n        z = dc_square(z) + c;\n    }\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}