{"ver":"0.1","info":{"id":"tldfz7","date":"1612465709","viewed":150,"name":"Spiral and lines","username":"DukeOfStraylight","description":"Rough reproduction of https://i.imgur.com/RDMFHkf.mp4","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// this setting does affect performance but 100 doesn't seem too bad\nconst float DOTS = 100.;\n\nmat2 rotate(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\nvec2 shellCircle(float shell) {\n    float t = iTime * shell;\n    return vec2(1.0, 0.) * rotate(iTime*shell*0.05) * (shell + 0.5);\n}\n\nfloat shellCircleDistance(float shell, vec2 uv) {\n    vec2 origin = shellCircle(shell);\n    return length(origin - uv);\n}\n\n// iq's line segment SDF from\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.);\n\n    uv *= (DOTS * 2.);\n    float phi = atan(uv.y, uv.x);\n    float dist = length(uv);\n    float shell = floor(dist);\n    if (shell > DOTS) {\n        fragColor = vec4(0.);\n        return;\n    }\n    // the circles overlap, so let's draw a bit of the previous or next shell's circle as\n    // needed\n    col.rgb += smoothstep(0.9, 0.7, shellCircleDistance(shell, uv));\n    float edge = step(0.5, fract(dist)) * 2. - 1.; // -1 or 1\n    // meh, very first circle wants to be so special\n    if (shell + edge >= 0.) {\n        col.rgb += smoothstep(0.9, 0.7, shellCircleDistance(shell + edge, uv));\n    }\n\n    // for line-drawing, we can only ever see lines on our own shell or ones further out,\n    // never ones from further in\n    for (float i = shell; i <= DOTS; i += 1.) {\n        vec2 that = shellCircle(i);\n        vec2 other = shellCircle(i + edge);\n        // meh, again edge cases\n        if (i == DOTS && edge == 1.) {\n            break;\n        }\n        col.r += 0.2 * smoothstep(0.4, 0.1, sdSegment(uv, that, other));\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}