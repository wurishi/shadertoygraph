{"ver":"0.1","info":{"id":"ctXBRB","date":"1693150622","viewed":62,"name":"cool web (?)","username":"77Tigers","description":"parallax","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["parallax"],"hasliked":0,"parentid":"ctfBzS","parentname":"Fork markuwu 77Tigers 251"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323\n\n#define FOG 1.0\n\n#define F_COL vec3(1.0, 1.0, 1.0)\n\nvoid fn(vec2 p, float layer, inout vec3 col, inout vec3 strength) {\n    float X, Y;\n    // angle of spin\n    float pdist = sqrt(p.x*p.x + p.y*p.y);\n    float a = -layer * PI / 10. + sin(iTime) * 0.;// + pdist * 0.2 * sin(layer * 2.0) * 0.1;\n    X = cos(a) * p.x - sin(a) * p.y + 1.0 * sin(layer * PI / 5.);\n    Y = sin(a) * p.x + cos(a) * p.y + 1.0 * cos(layer * PI / 5.);\n    // x^{5}-10x^{3}y^{2}+5xy^{4}\n    // 5x^{4}y-10x^{2}y^{3}+y^{5}\n    vec2 p5 = vec2(\n        X*X*X*X*X - 10. * X*X*X*Y*Y + 5. * X*Y*Y*Y*Y,\n        5. * X*X*X*X*Y - 10. * X*X*Y*Y*Y + Y*Y*Y*Y*Y\n    ) / pow(X*X + Y*Y, 2.5);\n    \n    float dist = sqrt(X*X + Y*Y);\n    \n    \n    float val = //sin ((X+ PI / 4.) * 2.) * sin ((Y - PI / 4.) * 2.)\n        //- sin(iTime + 0.5 * layer + 0.1 * X)\n        - 1. / dist\n        //+ 0.5 * sin (dist * 1.0 + iTime * 5.0)\n        + clamp(p5.x * sin (dist * 3. + sin(layer)), 0.0, 1.0)\n        + clamp(sin(p5.y * dist), 0.0, 1.0)\n        - dist / 10.\n        ;\n    if (val > 0.) {\n        float fog = (1.0 - clamp(val, 0.0, 1.0));\n        \n        float sl = sin(layer * 0.6 + iTime * 5.0);\n        float br = 0.0;\n        if (sl > 0.7 && val < 0.5) {\n            br = 5.0 * (sl - 0.7);\n        }\n        \n        col += strength * vec3(1.0, 1.0, 1.0 + br) * (1.0 - fog);\n        strength *= vec3(fog) * FOG;\n    } else {\n        col += strength * vec3(0.0);\n        strength *= FOG * F_COL;\n    }\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = 2.0*(fragCoord - vec2(iResolution.x/2.0, iResolution.y/2.0))/iResolution.y;\n    \n    p *= 4.0;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 strength = vec3(1.0);\n    \n    float depth = iTime * 2.0 ;//+ sin (iTime);\n    \n    float fi = mod(-depth, 1.0);\n    \n    //fi += 1.0;\n    //fn(vec2(0.0 * iTime, iTime * 0.0) + p * (fi + 5.), fi, col, strength);\n    //col = col * (1. - fi) + fi * vec3(0.0);\n    //strength = strength * fi + (1. - fi) * vec3(1.0);\n    for (int i = 1; i <= 40; i++) {\n        fn(vec2(0.0 * iTime, iTime * 0.0) + p * (fi + 0.0), fi, col, strength);\n        if (i == 1) {\n            strength /= 1.0 - (1. - fi) * (1. - FOG * F_COL);\n        }\n        fi += 1.0;\n    }\n    \n    col += .1 / (p.x*p.x + p.y*p.y);\n    col = clamp(col, 0., 1.);\n    \n    col *= 9.0 / (9.0 + p.x*p.x + p.y * p.y);\n    \n    col = clamp(col, 0., 1.);\n    \n    \n    \n    fragColor = vec4(sqrt(col), 1.0);\n}","name":"Image","description":"","type":"image"}]}