{"ver":"0.1","info":{"id":"M3lcW8","date":"1726126638","viewed":43,"name":"romanesque church","username":"Efim","description":"inspired by romanesque architecture, an example: [url]https://www.tourarmenia.am/wp-content/uploads/2018/09/khorvirap-monastery-Ancient-Churches-in-Armenia-1152x768.jpg[/url]","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf","raymatch","architecture","arch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI  3.14159265359\n#define TAU 6.28318530718\n#define rot(f) mat2(cos(f), -sin(f), sin(f), cos(f))\n\nconst float dist_infin = 10.0;\n#define nn 128\n\nconst float eps = 0.001;\nvec3 bg = vec3(0.08, 0.42, 0.87);\nvec3 col1 = vec3(0.73, 0.7, 0.4);\nfloat npp =15.;\nfloat lev = 0.995;\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  b.z = b.z/2.;\n  p.z -= b.z;\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\n\nfloat level2 (vec3 p, float R, float h, float w, float H)\n{\n    \n    float t = sdBox(p, vec3(w, w, H));\n    float fi = mod(atan(p.y, p.x), TAU);\n    fi = mod(fi+PI/4., TAU);\n    float n = floor(fi/(PI/2.));\n    p.xy*= rot(-n*PI/2.);\n    float t2 = length(vec2(p.y, max(p.z - h, 0.))) - R;\n    return max (t, -t2);\n    \n}\n\nfloat sdOctogon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.9238795325, 0.3826834323, 0.4142135623 );\n    p = abs(p);\n    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\nfloat sdOctogon3( in vec3 p, in float r, float h)\n{\n    p.z -= h/2.;\n    float d = sdOctogon(p.xy, r);\n    vec2 w = vec2( d, abs(p.z) - h/2. );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat level8(vec3 p, float r, float h, float R, float H)\n{\n    float t = sdOctogon3(p, R, H);\n    float fi = mod(atan(p.y, p.x), TAU);\n    fi = mod(fi+PI/8., TAU);\n    float n = floor(fi/(PI/4.));\n    p.xy*= rot(-n*PI/4.);\n    float t2 = length(vec2(p.y, max(p.z - h, 0.))) - r;\n    return max (t, -t2);\n}\n\n\n\n//https://iquilezles.org/articles/distfunctions/\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat udTriangle( vec3 p, vec3 a, vec3 b, vec3 c )\n{\n  vec3 ba = b - a; vec3 pa = p - a;\n  vec3 cb = c - b; vec3 pb = p - b;\n  vec3 ac = a - c; vec3 pc = p - c;\n  vec3 nor = cross( ba, ac );\n\n  \n  return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(ac,nor),pc))<2.0)\n     ?\n     min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n//https://iquilezles.org/articles/distfunctions/\nfloat udQuad( vec3 p, vec3 a, vec3 b, vec3 c, vec3 d )\n{\n  vec3 ba = b - a; vec3 pa = p - a;\n  vec3 cb = c - b; vec3 pb = p - b;\n  vec3 dc = d - c; vec3 pc = p - c;\n  vec3 ad = a - d; vec3 pd = p - d;\n  vec3 nor = cross( ba, ad );\n\n  return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(dc,nor),pc)) +\n     sign(dot(cross(ad,nor),pd))<3.0)\n     ?\n     min( min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(dc*clamp(dot(dc,pc)/dot2(dc),0.0,1.0)-pc) ),\n     dot2(ad*clamp(dot(ad,pd)/dot2(ad),0.0,1.0)-pd) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\nfloat dome(vec3 p, float R, float h)\n{\n    float fi = mod(atan(p.y, p.x), TAU);\n    fi = mod(fi + PI/8., TAU);\n    float n = floor(fi/(PI/4.)), fi0 = -PI/8. + n*PI/4., fi1 = PI/8. + n*PI/4.;\n    vec3 a = vec3(R*cos(fi0), R*sin(fi0), 0.);\n    vec3 b = vec3(R*cos(fi1), R*sin(fi1), 0.);\n    vec3 c = vec3(0., 0., h);\n    return udTriangle(p, a, b, c);\n}\n\nfloat roofh = 0.6/(2.39/2.), roofw = (2.39/2. - 0.44)/(2.39/2.);\nfloat roof(vec3 p, float R, float r)\n{\n    \n    float h = roofh, w = roofw;\n    float fi = mod(atan(p.y, p.x), TAU), n = floor(fi/(PI/4.)), turn = floor((n + 1.)/2.);\n    p.xy *= rot(-turn*PI/2.0);\n    vec3 a = vec3(0., 0., R*h), b = vec3 (R, 0., R*h), c = vec3(0), d = vec3(0);\n    vec3 a1 = vec3(0.), b1 = vec3(0.), c1 = vec3(0.);\n    vec3 a2 = vec3(R, -R*w, 0.), b2 = vec3(R, R*w, 0.), c2 = vec3(R, 0., R*h);\n    \n    if (mod(n, 2.0) == 0.)\n    {\n        c = vec3(R, R*w, 0.);\n        d = vec3(0, R*w, 0.);\n        a1 = vec3(R*w, R*w, 0.0); \n        b1 = vec3(R, R*w, 0.); \n        c1 = vec3(R, R, 0.); \n        \n    }\n    else\n    {\n        c = vec3(R, -R*w, 0.);\n        d = vec3(0, -R*w, 0.);\n        a1 = vec3(R*w, -R*w, 0.0); \n        b1 = vec3(R, -R*w, 0.); \n        c1 = vec3(R, -R, 0.); \n        \n\n        \n    }\n    float t0 = udQuad(p, a, b, c, d),\n          t1 = udTriangle(p, a1, b1, c1),\n          t2 = udTriangle(p, a2, b2, c2);\n    return min((min(t0, t1) - r), t2);\n}\n\nfloat dome1R = 2.51/2. - 0.35, dome0R = 2.51/2. - 0.4, t0R = 2.51/2. - 0.4, t1R = 2.51/2.-0.05;\nfloat t2R = (2.51-0.6*2.)/2., t2w = 2.51/2.;\n\nfloat map(vec3 p) {\n    p.yz *= rot(PI/2.);\n    p.z -= 2.1;\n    float d1 =  dome(p, dome1R, 0.9)-0.03;\n    p.z += 1.38;\n    float d0 =  level8(p, 0.17, 0.84, dome0R, 1.39);\n    p.z += 0.7;\n    float t0 = sdBox(p, vec3(t0R, t0R, 0.7))-0.03;\n    float t1 = roof(p, t1R, 0.03) - 0.05;\n    p.z+=2.6;\n    float t2 =  level2(p, t2R, 1.7, t2w, 2.6);\n    return min(min(min(min(t1, t2), t0), d0), d1);\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 pos) {\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * map(pos + k.xyy * h) +\n        k.yyx * map(pos + k.yyx * h) +\n        k.yxy * map(pos + k.yxy * h) +\n        k.xxx * map(pos + k.xxx * h));\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l - p), r = normalize(vec3(f.z, 0, -f.x)), u = cross(f, r), c = f * z, i = c + uv.x * r + uv.y * u;\n    return normalize(i);\n}\n\n//converts a vector on a sphere to longitude and latitude\nvec2 lonlat (vec3 p)\n{\n    float lon = mod(atan(p.y, p.x), TAU)/TAU;\n    float lat = atan(p.z, length(p.xy))/PI;\n    return vec2(1.0-lon, lat);\n}\n/*\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n*/\n#define AA 1\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 light = normalize(vec3(0.0, 1.0, -2.5)); \n    vec2 mo = vec2( -0.2 * iTime, 0.);\n    if  (iMouse.z > 0.0)\n    {\n        mo = (-iResolution.xy + 2.0 * (iMouse.xy)) / iResolution.y;\n    }\n    vec3 ro = vec3(0., 0., 5.5); // camera\n    //camera rotation\n    ro.yz *= rot(mo.y*2.);\n    ro.xz *= rot(-mo.x*2.);\n   \n    const float fl = 1.5; // focal length\n\n    //antialiasing\n    vec3 tot = vec3(0.0);\n    for(int m = 0; m < AA; m++) for(int n = 0; n < AA; n++) {\n            vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o)) / iResolution.y;\n            vec3 rd = GetRayDir(p, ro, vec3(0, 0., 0), fl); //ray direction\n            vec3 col = bg;\n            \n            //==========================raymatch=============================\n            float td = 0.;\n            vec3 pos = vec3(0.);\n            for(int i = 0; i < nn; i++) {\n                pos = ro + rd * td;\n                float h = map(pos);\n                if(h < eps || td >= dist_infin)\n                    break;\n                td += h;\n            }\n            //======================color====================================\n            if(td < dist_infin) {\n                //col = col1*col1;\n                vec2 tx = lonlat(pos);\n                tx = fract(tx * vec2(10., 10.));\n                col = texture(iChannel0, tx).rgb;\n                col = col*col;\n                vec3 nor = calcNormal(pos);\n                vec3 R = reflect(light, nor);\n                float specular = pow(max(abs(dot(R, rd)), 0.), 16.);\n                float difu = abs(dot(nor, light));\n                col = col * (clamp(difu, 0., 1.0) + 0.5) + vec3(1., .7, .4) * specular;\n                float fre = pow(clamp(dot(nor, rd) + 1., .0, 1.), 3.); // Fresnel, for some mild glow.\n                col += vec3(.4, .7, 1) * fre; //?\n                col = sqrt(col);\n            }\n            tot += col;\n        }\n    tot = tot / float(AA) / float(AA);\n    //tot = tot / float(AA);\n    //antialiasing\n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}