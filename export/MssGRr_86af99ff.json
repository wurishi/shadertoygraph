{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define pi 3.14159265358979323846264338327950288419716939937510\nfloat _pow(float x, float y) { return pow(abs(x), y); }\nfloat _sin(float x) { return (x < 0.0) ? 0.0 : sin(x); }\nfloat _cos(float x) { return (x < 0.0) ? 0.0 : cos(x); }\nfloat _sqrt(float x) { return sqrt(abs(x)); }\n\nvec3 orange_laser2(float f)\t{ return (vec3(1.3,0.7,0.2)) / _pow(0.9 + abs(f)*2.0, 1.1); }\nvec3 orange_laser(float f)\t{ return (vec3(1.3,0.7,0.2)) / _pow(0.9 + abs(f)*80.0, 1.1); }\nvec3 blue_laser(float f)\t{ return (vec3(0.5,0.5,1.25)) / _pow(0.5 + abs(f)*40.0, 1.1); }\nvec3 faint_blue_laser(float f)\t{ return (vec3(0.5,0.5,1.25)) / _pow(1.6 + abs(f)*80.0, 1.1); }\nvec3 red_laser(float f)\t\t{ return (vec3(1.25,0.5,0.5)) / _pow(0.0 + abs(f)*60.0, 1.3); }\nvec3 green_laser(float f)\t{ return (vec3(0.5,1.25,0.5)) / _pow(0.0 + abs(f)*80.0, 1.1); }\nvec3 violet_laser(float f)\t{ return (vec3(1.25,0.5,1.25)) / _pow(0.0 + abs(f)*80.0, 1.1); }\nvec3 cyan_laser(float f)\t{ return (vec3(0.5,1.25,1.25)) / _pow(0.0 + abs(f)*80.0, 1.1); }\nvec3 _main(vec2 fragCoord) {\n\tvec3 res = vec3(0,0,0);\n\tfloat rtime=iTime*0.5;\n\tvec2 p = fragCoord.xy / iResolution.xx;\n\tp -= vec2(0.5, 0.5 * iResolution.y/iResolution.x); // shift origin to center\n\tp *= 15.; // zoom out\n\t\n\t// grid\n\t//res += blue_laser(abs(p.x)); res += blue_laser(abs(p.y));\n\t//res += faint_blue_laser(abs(sin(p.x*pi))); res += faint_blue_laser(abs(sin(p.y*pi)));\n\n\t//res += orange_laser((sin(p.x)-p.y) / 15.0);\n\t//res += sqrt(blue_laser(p.x*_pow(sin(p.x)*cos(p.x),0.9)-p.y));\n\n\t\n\t//light saber duel!\n\t//res.rgb += red_laser((cross(p.xyy, vec3(sin(rtime), cos(rtime), tan(rtime))).y) / 20.0);\n\t//res.rgb += green_laser((cross(p.xyy, vec3(sin(-rtime), cos(rtime), tan(rtime))).y) / 20.0);\n    //return res;\n\t\n\n\tif (true)\n\t{\n\t\t// blue balls\n\t\tfloat sum = 0.0;\n\t\tfor (float i = 0.0; i <= 100.0; i +=pi*0.31){\n\t\t\tfloat t = i * (1.0 + 0.08*sin(0.2*rtime));\n\t\t\tfloat f = distance(p, 0.1*vec2(t * cos(t-rtime*0.2), t * sin(t-rtime*0.2)));\n\t\t\tsum += 1.0/_pow(f, 2.0);\n\t\t}\n\t\tres.rgb += cos(rtime) * faint_blue_laser((5.0-sum*0.2) / 50.0);\n\t}\n\n\t// cyan target\n\tif (true)\n\tif (sin(rtime)>0.0)\n\t\tres.rgb += sin(rtime) * cyan_laser((p.x*sin(3.*p.x)-p.y*sin(3.*p.y)) / 2.0);\n\t\n\t// orange balls\n\tif (true)\n\tres.rgb += -sin(rtime) * orange_laser2(1.9*sin(rtime*0.9)+p.x*sin(10.0*p.x)+p.y*cos(10.0*p.y));\n\n\t// green stuff\n\tif (true)\n\tif (-cos(rtime)>0.0)\n\t\tres.rgb += -cos(rtime) * green_laser((tan(p.x*p.y*rtime)) / 5.0); // resize your window for a new effect\n\t\n\t// 2 curved violet lasers\n\tif (true)\n\tres.rgb += violet_laser((distance(p, vec2(0.0)) - sin(0.1+0.5*rtime)*_pow(p.x, 1.05)) / 2.0);\n\t\t\n\t// 4 red circles\n\tif (true)\n\tres.rgb += \n\t\tred_laser((distance(p, vec2(0.0)) - _pow(sin(0.9+0.25*iTime), 3.0)*_sqrt(p.y-p.x)) / 2.0) +\n\t\tred_laser((distance(p, vec2(0.0)) - _pow(sin(0.9+0.25*iTime), 3.0)*_sqrt(p.y+p.x)) / 1.0);\n\treturn res;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) { fragColor.rgb = _main(fragCoord); }\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MssGRr","date":"1361918234","viewed":289,"name":"Playing around","username":"EldritchConundrum","description":"My first shader.\nIt broke when I bought a new GPU, so I had to fix the behavior of math functions.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["n00b2d"],"hasliked":0,"parentid":"","parentname":""}}