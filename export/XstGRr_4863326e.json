{"ver":"0.1","info":{"id":"XstGRr","date":"1447756165","viewed":176,"name":"Floating Circles #2","username":"nonlogical","description":"Just a modification of my first shader cause I'm bored. Looks best fullscreen as a screensaver.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define PI 3.141592\n\nfloat hash(float n) {return fract(sin(n * 0.021) * 43758.5453123);}//from iq\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 mo = iMouse.xy / iResolution.xy;\n    mo -= 0.5;\n    mo.x *= iResolution.x / iResolution.y;\n    \n    float time = iTime * 0.5;\n    \n    uv.x += 0.1 * sin(time * 0.1);\n    uv.y += 0.05 * sin(time * 0.2);\n    \n    uv.x *= (1.0 - 0.001 * abs(sin(time * 20.0)));\n    \n    float subd = 25.0 + 2.0 * sin(time * 0.1);\n    float radius = 0.1 + 0.45 + 0.05 * abs(sin(time));\n    vec3  color = vec3(0.0);\n    \n    float hsub = subd*2.0;\n    vec2 grid = uv * subd;\n    grid = vec2(floor(grid.x)/subd, floor(grid.y)/subd);\n    vec2 gridC = vec2(grid.x + 1.0/hsub, grid.y+1.0/hsub);\n    \n    vec2 mDist = vec2(sin(time)*(0.7 + 0.3 * cos(time * 0.5)), cos(time)*0.3) - grid;\n    \n    float weight = 0.0;\n    if(length(mDist) < radius) {\n        weight = smoothstep(0.0, 0.3, max(0.0, radius - length(mDist)));\n    }\n    \n    float qbRadius = clamp(0.5*smoothstep(0.5, 0.1, length(mDist)), 0.2, 0.5);\n    float qbWeight = 0.85*smoothstep(0.5, 0.1, length(mDist));   \n    \n    vec2 cellD = uv - gridC;\n\tfloat finalRadius = qbRadius/subd;\n    float rings = 0.0;\n    if(length(cellD) < qbRadius/subd) {\n        float col = 0.0;\n        col = smoothstep(0.9,0.85,length(cellD)/(qbRadius/subd));\n        col -= 0.93*smoothstep(1.0,0.9,length(cellD)/(qbRadius/subd*qbWeight));\n        \n        rings += col;\n    }\n       \n    float r = 0.5 + 0.5*((grid.x+0.5) * cos(time * 3.0));\n    float b = 0.7;\n    float g = 0.5 + 0.5*((grid.y+0.5) * sin(time * 2.0));\n    \n    color = \n        vec3(0.03) \n        + rings*vec3(r, g, b)*0.05\n        + rings*weight*vec3(r, g, b)*2.5\n        + weight*vec3(r, g, b)*0.3\n        + vec3(hash(uv.x * 0.05), hash(uv.y* 0.05), hash(uv.x + uv.y))* 0.01;\n    \n    fragColor = vec4(color.rgb, 1.0);\n    //fragColor = vec4(r,g,b, 1.0);\n}","name":"","description":"","type":"image"}]}