{"ver":"0.1","info":{"id":"l3BBDm","date":"1729530690","viewed":28,"name":"Gamma Calibration","username":"sampajama","description":"This uses dithering to figure out what your gamma is. The steps for gamma go:\n\n1.8, 1.9, 2.0, 2.1, (2.2), 2.3, (2.4), 2.5, 2.6, 2.7, 2.8, 2.9\n\nYou want the step that looks the most similar to the undithered image. \n\nI highlighted 2.2 (red) and 2.4 (blue).","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["gamma","dithering","bluenoise"],"hasliked":0,"parentid":"M3BBWh","parentname":"Temporal Blue Noise Dithering"},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI (3.1415926535897932384)\n#define TAU (2.0 * PI)\n\n#define COLORS (2.0)\n\n#define GAMMA_MIN (1.8)\n#define GAMMA_MAX (3.0)\n\nfloat round_gamma(float gamma) {\n    return floor(10.0 * gamma) / 10.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    \n    fragColor = 0.1 + 0.8 * fragColor;\n    \n    vec4 dither = (\n        texture(\n            iChannel1, \n            fragCoord.xy / iChannelResolution[1].xy\n        )\n    );\n    \n    if (true) {\n        float phi = (sqrt(5.0) - 1.0) / 2.0;\n        // phi /= 60.0;\n        \n        dither += fract(phi * float(iFrame));\n        dither = acos(cos(TAU * dither)) / PI;\n    }\n    \n    \n    float y = fract(uv.y * 2.0 + iTime * 0.1);\n    if (y < 0.5) {\n        float raw_gamma = (\n            (GAMMA_MIN) + \n            uv.x * ((GAMMA_MAX) - (GAMMA_MIN))\n        );\n        \n        float gamma = round_gamma(raw_gamma);\n        float border_gamma = round_gamma(raw_gamma + 4.0 / iResolution.x);\n\n        if (gamma != border_gamma) {\n        \n            float avg = (gamma + border_gamma) / 2.0;\n            fragColor = vec4(pow(2.0 * y, 1.0 / avg));\n                \n            if (gamma == 2.2 || border_gamma == 2.2) {\n                fragColor *= vec4(1.0, 0.0, 0.0, 1.0);\n            }\n            \n            else if (gamma == 2.4 || border_gamma == 2.4){\n                fragColor *= vec4(0.0, 0.0, 1.0, 1.0);\n            }\n            \n            return;\n        }\n\n        gamma = round_gamma(gamma);\n        \n        fragColor = pow(\n            round(\n                (COLORS - 1.0) * pow(fragColor, vec4(gamma))\n                + dither - 0.5\n            ) / (COLORS - 1.0),\n            vec4(1.0 / gamma)\n        );\n    }\n}","name":"Image","description":"","type":"image"}]}