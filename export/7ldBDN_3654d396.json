{"ver":"0.1","info":{"id":"7ldBDN","date":"1663131942","viewed":167,"name":"Color to Normal ","username":"wingto","description":"progam with shader into normal","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["normal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat getHeight(vec2 uv) {\n  return texture(iChannel0, uv).r;\n}\n\nvec4 bumpFromDepth(vec2 uv, vec2 resolution, float scale) {\n  vec2 step = 1. / resolution;\n    \n  float height = getHeight(uv);\n    \n  vec2 dxy = height - vec2(\n      getHeight(uv + vec2(step.x, 0.)), \n      getHeight(uv + vec2(0., step.y))\n  );\n    \n  return vec4(normalize(vec3(dxy * scale / step, 1.)), height);\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord;\n    vec2 vUV = fragCoord.xy / iResolution.xy;\n    // Time varying pixel color\n     uv =  uv / iResolution.xy - .5 ;\n    vec3 col = vec3(length(uv)<0.5);\n\n    // Output to screen\n    vec4 normalMap = vec4(bumpFromDepth(vUV, iResolution.xy, .1).rgb * .5 + .5, 0);\n    fragColor = vec4(normalMap);\n}","name":"Image","description":"","type":"image"}]}