{"ver":"0.1","info":{"id":"7tjSRy","date":"1627983922","viewed":458,"name":"Subdividing Halftone Pattern","username":"paniq","description":"proof of concept for a halftone pattern that subdivides. the calculations here are eyeballed; a proper version would do an exact coverage to area mapping.","likes":10,"published":3,"flags":0,"usePreview":0,"tags":["halftone","pattern","subdivision"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat ht(vec3 uvw) {\n    vec2 uv = uvw.xy * 2.0;\n    vec2 subuv = fract(uv);\n    \n    vec2 fo = mod(uv - subuv,vec2(2.0))-0.5;\n\n    float n = pow(1.0-uvw.z, 2.0);\n\n    return length(subuv + fo*n - 0.5) / sqrt(0.5 + 1.5*pow(n,1.5));\n}\n\nvec2 rotate (vec2 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return vec2(c*p.x + s*p.y, c*p.y - s*p.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 n = fragCoord/iResolution.xy;\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float s = iResolution.y / 50.0;\n    vec2 suv = rotate(uv,radians(25.0)) * s;\n\n#if 0\n    float w = 1.0 - length(uv);\n    float h = abs(dot(uv, normalize(vec2(1.0,1.0))))*1.5;\n#else\n    float w = n.y;\n    float h = n.x;\n#endif\n\n    w = clamp(w, 0.0, 1.0);\n    h = clamp(h, 0.0, 1.0);\n\n    float c = ht(vec3(suv,h));\n    \n    c = clamp((w - c)*10.0, 0.0, 1.0);\n\n    fragColor = vec4(vec3(pow(c,0.4545)),1.0);\n}","name":"Image","description":"","type":"image"}]}