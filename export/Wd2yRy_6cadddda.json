{"ver":"0.1","info":{"id":"Wd2yRy","date":"1586976686","viewed":78,"name":"AA in 2D","username":"rontinoum","description":"Test AA in 2D","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","aa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = asin(1.0) * 2.0;\nconst float pi_to_rad = pi / 180.0;\nconst float rad_to_pi = 180.0 / pi;\n\nconst vec2 cam_pos = vec2(0.0, 0.0);\nconst float cam_rot = 10.0 * pi_to_rad;\nconst float vp_size = 10.0;\n\nvec2 fragToNDC(in vec2 fragCoord)\n{\n    return 2.0 * vec2(fragCoord / iResolution.xy) - 1.0;\n}\n\nvec2 NDCToOrigin(in vec2 ndc)\n{\n    float aspect_ratio = iResolution.x / iResolution.y;\n    return vec2(ndc.x * aspect_ratio, ndc.y);\n}\n\nvec2 originToCamSpace(in vec2 pos)\n{\n    float dcr = iTime * cam_rot;\n    \n    return cam_pos + (pos * vp_size) * mat2(cos(dcr), -sin(dcr), sin(dcr), cos(dcr));\n}\n\nvec4 map(in vec2 pos)\n{\n    vec4 res = vec4(0.0, 0.0, 0.0, 0.0);\n    \n    vec3 color = vec3(0.0);\n\n    // checker board\n    {\n        vec2 fract_p = fract(pos + vec2(0.5));\n        vec2 floor_p = floor(pos);\n\n        // lines\n        vec2 ln_gradient = smoothstep(0.0, 0.01, 0.5 * cos(fract_p * 2.0 * pi) + 0.5);\n        float ln_strength = ln_gradient.x * ln_gradient.y;\n\n        // background\n        float bg_strength = floor_p.x + floor_p.y;\n        vec3 bg_color = mix(vec3(0.99), vec3(0.01), mod(bg_strength, 2.0));\n\n        // combine\n        color += bg_color * ln_strength;\n    }\n    \n    // sphere\n    {\n        float r = 1.0;\n        vec2 p = vec2(0.0, 5.0);\n\t\tfloat d = 1.0 - smoothstep(0.9, 1.0, length(pos - p) / r);\n        vec3 c = vec3(1.0, 0.0, 0.5);\n        \n        color = d * c + (1.0 - d) * color;\n    }\n    \n    res.xyz = color;\n    \n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    \n    int aa = 4;\n    float aa_nom = 1.0 / float(aa);\n    float aaa = 1.0 / float(aa * aa);\n    \n    for(int AA_x = 0; AA_x < aa; AA_x++)\n        for(int AA_y = 0; AA_y < aa; AA_y++)\n        {\n            vec2 frc = fragCoord + vec2(float(AA_x) * aa_nom, float(AA_y) * aa_nom);\n            vec2 ndc = fragToNDC(frc);\n            vec2 org = NDCToOrigin(ndc);\n            vec2 pos = originToCamSpace(org);\n            \n            vec4 res = map(pos);\n            \n            tot += res.xyz;\n        }\n    \n    tot = tot * aaa;\n    tot = pow(tot, vec3(1.0/2.2));\n    \n    fragColor = vec4(tot,1.0);\n}","name":"Image","description":"","type":"image"}]}