{"ver":"0.1","info":{"id":"NlXXWH","date":"1625542555","viewed":63,"name":"circle learning shader","username":"wigglewiggle","description":"just learning how to use shader toy","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 circle(vec2 checkPos,vec2 pos,float r,float outline){\n    float d=distance(checkPos,pos)+sin(checkPos.x/10.)*5.+sin(checkPos.y/10.)*5.;\n    if(d<=r){\n    d=1.;\n    }else if(d<=r+outline){\n    d=0.9;\n    }else{\n    d=0.;\n    }\n    return vec3(d,d,d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n   \n   vec3 col=circle(fragCoord,vec2(iResolution.x/2.+sin(iTime)*100.,iResolution.y/2.+cos(iTime)*100.),100.,10.);\n    col=clamp(col,0.,1.);\n  \n col-=circle(fragCoord,vec2(iResolution.x/2.+sin(iTime*2.)*100.,iResolution.y/2.+cos(iTime*2.)*100.),100.,0.);\n    col=clamp(col,0.,1.);\n  \n  col+=circle(fragCoord,vec2(iResolution.x/2.+sin(iTime*2.)*100.,iResolution.y/2.+cos(iTime*2.)*100.),50.,10.);\n    col=clamp(col,0.,1.);\n  \n  col*=vec3(abs(sin(iTime)),abs(cos(iTime)),1.-abs(sin(iTime)));\n   // Output to screen\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}