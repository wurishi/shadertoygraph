{"ver":"0.1","info":{"id":"WsccDf","date":"1601837403","viewed":387,"name":"Image Re-Painter","username":"Miestrode","description":"about a couple of weeks ago (2020-10-04) i began looking into Python.\nsoon enough i learned about a library called Pillow (PIL) and created this.\nit takes some image as an input and some colors as another input, it then will re-color the image","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["paint","image","repainter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Yoav Greenland - 2020\n\n// This work is licensed under a Creative Commons\n// Attribution-ShareAlike 4.0 International License.\n\n// Repainting an image is always quite a feat when done well,\n// so why not automate it? well that's the idea I had.\n// Originally I had a more broad idea in mind, which was to\n// repaint images from other images of differing colors, but\n// this is a step in the right direction.\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Created by Yoav Greenland - 2020\n\n// This work is licensed under a Creative Commons\n// Attribution-ShareAlike 4.0 International License.\n\n// Repainting an image is always quite a feat when done well,\n// so why not automate it? well that's the idea I had.\n// Originally I had a more broad idea in mind, which was to\n// repaint images from other images of differing colors, but\n// this is a step in the right direction.\n\n// below is the optimized code I used:\n\nvec3 array[9] = vec3[](vec3(1.0,0.1,0.5),vec3(1.0,0.5,0.6),vec3(0.7,0.25,0.5),vec3(0.8,0.8,0.8),vec3(0.7,0.6,0.7),vec3(0.9,0.9,0.9),vec3(0.95,0.95,0.95),vec3(0.3,0.1,0.1), vec3(0.1,0.1,0.1));\n\nvec3 repaint(in vec3 icol)\n{\n    float min = 1.0;\n    \n    vec3 col;\n    \n    for(int i; i<9; i++)\n    {\n        float d = distance(vec3(icol),vec3(array[i]));\n        if(d<min)\n        {\n            col = array[i]; \n            min = d;\n        }\n    }\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = vec4(repaint(texture(iChannel0,uv).xyz),1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}