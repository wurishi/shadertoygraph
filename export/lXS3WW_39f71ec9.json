{"ver":"0.1","info":{"id":"lXS3WW","date":"1708448898","viewed":77,"name":"Rydberg Excitations","username":"wilso692","description":"Shader for visualizing Rydberg atoms","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["quantum","atoms","rydberg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Pseudo-random number generator\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 grid = vec2(10.0, 10.0); // Number of circles horizontally and vertically\n    \n    uv *= grid; // Scale UV to grid size\n    \n    float freq = 0.5;\n    \n    // Calculate grid cell index\n    vec2 index = floor(uv);\n    \n    float mtime = iTime + 6.3;\n    \n    float timeStep = floor(freq * mtime / (3.14159265));\n    \n    // Find the center of the cell\n    vec2 center = index + 0.5;\n    \n    // Calculate distance to the center of the nearest circle\n    float dist = length(uv - center);\n    \n    // Time-dependent factor for pulsating effect\n    float time = abs(sin(freq * 2.0 * mtime)) + 0.2;\n    \n    // Adjust glow based on distance and time\n    float glow = 0.1 / dist * time;\n    \n    // Color of the circle\n    float n = rand(index * timeStep );\n    \n    \n    vec3 color = vec3(0.1, 0.1, 0.5) * glow;\n    \n    if (n > 0.9) {color = vec3(0.5, 0.1, 0.5) * glow;}\n\n    if (n < 0.5) color = vec3(0.0, 0.0, 0.0);\n    \n    // Set the fragment color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}