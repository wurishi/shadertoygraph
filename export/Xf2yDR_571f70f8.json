{"ver":"0.1","info":{"id":"Xf2yDR","date":"1722168538","viewed":28,"name":"newton's fractal_","username":"sp3ctre","description":"newton fractal","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//mouse.x position controls the depth of newton rapson \n#define z1 vec2 (-0.5,-0.5)\n#define col1 vec3(1.,1.,0.)\n\n#define z2 vec2 (.5,.5)\n#define col2 vec3(0.,1.,0.)\n\n#define z3 vec2 (0.9,-0.52)\n#define col3 vec3(0.,0.,1.)\n\n#define z4 vec2 (-0.4,0.52)\n#define col4 vec3(0.,1.,1.)\n\n#define z5 vec2 (-0.1,-0.82)\n#define col5 vec3(1.,0.,1.)\n#define n 5\n\n\nvec2 roots[n] = vec2[n](z1,z2,z3,z4,z5);\nvec3 cols[n] = vec3[n](col1,col2,col3,col4,col5);\n\nvec2 rcp(vec2 z){\n    if (length(z)<0.1) return vec2(100.,100.);\n    vec2 zi = vec2 (z.x, -z.y)/(length(z)*length(z));\n    return zi;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int depth = 9;\n    depth = int(floor(iMouse.x/iResolution.xy*10.));\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv*2. -1.;\n\n    for (int i=0; i<depth; i++){\n        vec2 dmt;\n        for (int j=0; j<n; j++){\n            vec2 dir = uv - roots[j];\n            dmt += rcp(dir);\n        }\n        uv -= rcp(dmt);\n    }\n    \n    int c =0;\n    float mindist = 100.;\n    for (int i=0; i<n; i++){\n        float dist = length(uv - roots[i]);\n        if (dist < mindist) {\n            mindist = dist;\n            c=i;\n        }\n    }\n    \n    uv = (uv+1.)*0.5;\n    // Output to screen\n    fragColor = vec4(uv,0.,1.0);\n    fragColor = vec4(cols[c],1.0);\n}","name":"Image","description":"","type":"image"}]}