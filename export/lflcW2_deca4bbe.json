{"ver":"0.1","info":{"id":"lflcW2","date":"1721696953","viewed":17,"name":"Oily Blobs","username":"dansh0","description":"Playing with domain 2D SDFs and noise interactions","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","sdf","simplex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Playing with simplex noise as a driver of size and shape of objects. Also working on domain, shaping functions, and 2D lighting\n\n// ---------------------------------\n// Simplex Noise functions by iq https://www.shadertoy.com/view/Msf3WH\n\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n// ------------------------------------\n\n// MAIN\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // COLORS\n    vec3 slateBlue = vec3(0.180, 0.180, 0.227);\n    vec3 electricPurple = vec3(0.749, 0.0, 1.0); \n    vec3 neonGreen = vec3(0.224, 1.0, 0.078);\n    vec3 black = vec3(0.05, 0.05, 0.05);\n    \n    // Params\n    float scale = 200.;\n    float shapeNoiseScale = 50.;\n    float sizeNoiseScale = 300.;\n    float shapeNoiseShiftInfl = 0.10;\n    float shapeNoiseDistInfl = 0.1;\n    float sizeNoiseDistInfl = 0.2;\n    float innerColLightness = 0.3;\n    float circRad = 0.23;\n    float edgeGradInv = 0.95;\n    float lightDistShift = 0.1*scale;\n    \n    // Subtle Background\n    vec3 bgndDark = black;\n    vec3 bgndLight = bgndDark.rgb+0.01;\n    vec3 col = mix(bgndDark, bgndLight, 0.5+0.5*noise(uv*scale));\n\n\n    // Circles\n    vec2 fragPos = fragCoord.xy;\n    vec2 modUV = mod(fragPos, scale);\n    vec2 center = vec2(0.5*scale, 0.5*scale);\n    float shapeNoise = noise(uv * (scale/shapeNoiseScale) + sin(iTime/5.));\n    float sizeNoise = noise(uv * (scale/sizeNoiseScale) + sin(iTime/10.));\n    \n    float dist = distance(modUV, center + shapeNoiseShiftInfl*scale*vec2(shapeNoise));\n    float lightDist = distance(modUV+vec2(lightDistShift), center + shapeNoiseShiftInfl*scale*vec2(shapeNoise));\n    float distComp = scale*(circRad + (shapeNoiseDistInfl * shapeNoise) + (sizeNoiseDistInfl * sizeNoise));\n    vec3 innerColor = electricPurple;\n    innerColor = mix(innerColor, innerColLightness*innerColor, smoothstep(0., distComp, lightDist));\n    col = mix(col, innerColor, 1. - smoothstep(edgeGradInv*distComp, distComp, dist));\n    \n    modUV = mod(fragPos + 0.5*scale, scale);\n    dist = distance(modUV, center + shapeNoiseShiftInfl*scale*vec2(shapeNoise));\n    lightDist = distance(modUV+vec2(lightDistShift), center + shapeNoiseShiftInfl*scale*vec2(shapeNoise));\n    distComp = scale*(circRad - (shapeNoiseDistInfl * shapeNoise) - (sizeNoiseDistInfl * sizeNoise));\n    innerColor = neonGreen;\n    innerColor = mix(innerColor, innerColLightness*innerColor, smoothstep(0., distComp, lightDist));\n    col = mix(col, innerColor, 1. - smoothstep(edgeGradInv*distComp, distComp, dist));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}