{"ver":"0.1","info":{"id":"XcBBDh","date":"1724844904","viewed":31,"name":"hex pattern explained","username":"Elsio","description":"remake","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["grid","math","colors","hexagon","geometry","pattern"],"hasliked":0,"parentid":"4cXGzf","parentname":"Trefoil de goma"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define t iTime\nvoid mainImage(out vec4 o, vec2 u){\n    vec2 r = iResolution.xy;\n         u = (u - r / 2.) / r.y;\n         \n    u *= 12.;\n\n    //u.x *= .577;         // sqr(3)/3\n    //u += u.x;            // explicado abaixo com uma belissima transição\n    \n    u.x *= .577              + .423 * smoothstep(0., .8, cos(t));\n    u += u.x                 * smoothstep(0., .8, -cos(t));\n    \n    \n    vec2 k = floor(u);   // parte inteira, identifica cada célula\n    u -= k;              // `u - floor(u)` =  `fract(u)`\n    \n    float d = mod(k.x + k.y, 3.); // uma diagonal a cada 3 blocos\n    \n    \n    // decrementos para encaixar as cores\n    o.xy = k - step(u, --u.yx + d);\n    \n    o = mod(o.yyxy, .8) // paleta baseada em floor(u)\n            * (1. - length(u) * .3)  // shadows\n                + .1                 // brights\n                ;\n}","name":"Image","description":"","type":"image"}]}