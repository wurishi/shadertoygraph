{"ver":"0.1","info":{"id":"wdfSD7","date":"1551404666","viewed":118,"name":"Cube-O-Sphere","username":"cbrpnk","description":"Everyday","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 p)\n{\n    return fract(sin(dot(p, vec2(123.2345, 3456.5678))) * 123789.234235);\n}\n\nmat2 rot(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat box(vec3 p, vec3 d)\n{\n    p = abs(p) - d;\n    return max(max(p.x, p.y), p.z);\n}\n\nfloat noise(vec2 p)\n{\n\n    p *= 5.;\n    vec2 fl = floor(p);\n    vec2 fr = pow(fract(p), vec2(20.));\n    \n    float tl = rand(fl);\n    float tr = rand(vec2(fl.x + 1., fl.y));\n    float bl = rand(vec2(fl.x, fl.y+1.));\n    float br = rand(vec2(fl.x + 1., fl.y + 1.));\n    \n    float left = mix(tl, bl, fr.y);\n    float right = mix(tr, br, fr.y);\n    return mix(left, right, fr.x);\n}\n\nvec2 map(vec3 p)\n{\n    p.xz *= rot(iTime);\n    p.yz *= rot(iTime);\n    float s = length(p)-1.;\n    float s2 = length(p)-.9;\n    s = max(min(max(s, -s2), length(p)-.8), box(p, vec3(1.*abs(sin(iTime)))));\n    float lat = dot(normalize(p), vec3(0, 0, -1));\n    float lon = dot(normalize(p), vec3(0, 1, 0));\n    return vec2(s + noise(vec2(lat, lon)*sin(iTime))*.1*abs(sin(iTime)), 0.);  \n}\n\nvec2 march(vec3 ro, vec3 rd)\n{\n    vec2 t = vec2(0.);\n    for(int i=0; i<128; ++i) {\n    \tvec2 d = map(ro+rd*t.x);\n        if(d.x < .0001) break;\n        t.x += d.x*.6;\n        t.y = d.y;\n    }\n    return t;\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec2 eps = vec2(.001, 0.);\n    return normalize(vec3(\n    \tmap(p+eps.xyy).x - map(p-eps.xyy).x,\n        map(p+eps.yxy).x - map(p-eps.yxy).x,\n        map(p+eps.yyx).x - map(p-eps.yyx).x\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.-iResolution.xy) / iResolution.y;\n\n    vec3 cam = vec3(0, 0, 2.5-abs(sin(iTime)));\n    vec3 dir = normalize(vec3(uv, -1));\n    vec2 res = march(cam, dir);\n    vec3 col = vec3(1.);\n    \n    if(abs(uv.y) > .7) {\n        col = vec3(0);\n    } else if(res.x < 100.) {\n            vec3 p = cam+dir*res.x;\n            vec3 normal = getNormal(p);\n            col = vec3(.1) * (1.-pow(max(0., dot(dir, -normal)), 2.));\n            col += vec3(.1) * (pow(max(0., dot(dir, -normal)), 100.));\n            col += vec3(.05) * max(0., dot(normal, vec3(1.))) * 1.5;\n            col += vec3(.05) * max(0., dot(normal, vec3(-1.))) * 1.5;\n    }\n    col += rand(uv*iTime)*.03;\n    //col = vec3(1.) * noise(uv);\n    col *= 1.-length(uv)*.2;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}