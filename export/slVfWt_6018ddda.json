{"ver":"0.1","info":{"id":"slVfWt","date":"1665654544","viewed":138,"name":"kidach1 - Demo2 for xr mtg","username":"kidach1","description":"test","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER 100\n#define MAX_DIST 1000.\n#define SURF_DIST .001\n#define PI 3.141592\n\nmat2 Rot(float a)\n{\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdBox(vec3 p, vec3 s)\n{\n    p = abs(p) - s;\n    return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sdTorus(vec3 p, vec2 r)\n{\n    vec2 peri = vec2(length(p.xz)-r.x, p.y);\n    return length(peri) - r.y;\n}\n\nfloat sdMenger(vec3 p, float holeSize)\n{\n    for (int i = 0; i < 4; i++)\n    {\n        p = abs(p);\n        if (p.y > p.x) p.yx = p.xy;\n        if (p.z > p.y) p.zy = p.yz;\n        \n        vec3 flag = (p.z > (holeSize * 0.5)) ? vec3(1) : vec3(1,1,0);\n        p -= flag * holeSize;\n        \n        holeSize /= 3.0;\n    }\n    return sdBox(p, vec3(holeSize * 1.5));\n}\n\n\nfloat smin(float a, float b, float k)\n{\n    float h = exp(-a*k) + exp(-b*k);\n    return -log(h)/k;\n}\n\nvec3 rep(vec3 p, float i)\n{\n    return mod(p, i) - i*.5;\n}\n\nfloat GetDist(vec3 p)\n{\n    vec3 sp = p - vec3(-3,-3,0);\n//    sp.x += sin(iTime)*5.;\n//    sp.y += cos(iTime*3.)*2.;\n    sp = rep(sp, 5.);\n    float sd = sdSphere(sp, 3.1);\n    sd = mix(sd, sdBox(sp, vec3(2.3)), sin(iTime)*.5 + .5);\n    \n    vec3 bp = p - vec3(0, 0, 0);\n//    bp.y += cos(iTime*2.)*3.;\n    bp = rep(bp, 2.5);\n    float bd = sdBox(bp, vec3(1.18));\n    \n    vec3 bp2 = p - vec3(0, -3.5, 0);\n    float bd2 = sdBox(bp2, vec3(5.3, .3, 5.4));\n    \n    vec3 tp = p - vec3(0, 1, 0);\n    tp.yz *= Rot(iTime*1.3);\n    tp.y += 3.;\n    float td = sdTorus(tp, vec2(3.2, .5));\n    \n    vec3 mengerp = p - vec3(0, 0, 0);\n    mengerp = rep(mengerp, 3.5);\n    float mengerd = sdMenger(mengerp, 1.);\n\n    float k = 1.9;\n    float d = 1e+10;\n//    d = smin(d, sd, k);\n//    d = smin(d, bd, k);\n//    d = smin(d, bd2, k);\n//    d = smin(d, td, k);\n//    d = smin(d, p.y, k);\n    d = smin(d, mengerd, k);\n\n    d = max(d, -sd);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    float depth = .0;\n    for (int i = 0; i < MAX_ITER; i++)\n    {\n        vec3 p = ro + rd * depth;\n        float res = GetDist(p);\n        depth += res;\n        if (depth > MAX_DIST || res < SURF_DIST) break;\n    }\n    return depth;\n}\n\nvec3 GetRayDir(vec3 ro, vec3 lookAt, vec2 uv, float z)\n{\n    vec3 f = normalize(lookAt-ro);\n    vec3 r = normalize(cross(vec3(0,1,0), f));\n    vec3 u = cross(f, r);\n    \n    return normalize(f*z + r*uv.x + u*uv.y);\n}\n\nvec3 GetNormal(vec3 p)\n{\n    float d = GetDist(p);\n    vec2 e = vec2(.01, .0);\n    return normalize(d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx)\n    ));\n}\n\nvec3 Render(inout vec3 ro, inout vec3 rd, inout vec3 ref, bool last)\n{\n    float d = RayMarch(ro, rd);\n    vec3 col = texture(iChannel0, rd).rgb;\n    \n    if (d < MAX_DIST)\n    {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        \n        vec3 lightPos = vec3(3, 3, -6);\n        vec3 l = normalize(lightPos-p);\n        float nDotL = clamp(dot(n, l), 0., 1.);\n        vec3 ambient = vec3(.05);\n        col = last ? texture(iChannel0, r).rgb : vec3(nDotL*.1) + ambient;\n\n        ref  = vec3(.6);\n        ro = p + n*SURF_DIST*3.;\n        rd = r;\n    }\n    \n    return col * d * d * vec3(.03, .03, 0.1) * .2;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord .xy- .5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    vec3 ro = vec3(0, 3, -10);\n    ro = vec3(1,0,0) * iTime * 5.;\n//    ro.xz *= Rot(iTime*.4);\n//    ro.xz *= Rot(-m.x*PI*2.);\n//    ro.yz *= Rot(m.y*PI-1.);\n\n    vec3 lookAt = ro + vec3(1.0, sin(iTime*.6)*.4, cos(iTime*.4)*1.55);\n    vec3 rd = GetRayDir(ro, lookAt, uv, 1.0);\n    \n    vec3 fil = vec3(1.);\n    vec3 ref = vec3(0.);\n    vec3 col = Render(ro, rd, ref, false);\n\n    const int NUM_BOUNCES = 1;\n    for (int i = 0; i < NUM_BOUNCES; i++)\n    {\n        fil *= ref;\n        vec3 bounce = fil*Render(ro, rd, ref, i==NUM_BOUNCES-1);\n        col += bounce;\n    }\n\n    col = pow(col, vec3(.4545));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}