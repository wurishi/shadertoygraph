{"ver":"0.1","info":{"id":"fdcSWS","date":"1633795860","viewed":130,"name":"Pressure Fork 1","username":"spalmer","description":"same thing but stateless","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","bounce","short","stateless","inktober2021"],"hasliked":0,"parentid":"sdtSRs","parentname":" Fab9b #inktober2021 \"pressure\""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fabrice is super-golfer!  Can golf anything.\n\n#define S(v) smoothstep(5./R.y, 0., v) \n// 1->2\n#define H(x) sin(float(x) / 11. + vec2(0,11))\n\n#define A(V) max(abs(V).x, abs(V).y)\n\n// changing initial conditions can result in some pretty cool patterns btw\n// I advance a bit to obtain a more chaotic start\n#define W(i, t) ( a = 9. * H(i) + (t) / 4. * H(i+9),                 \\\n                     fract(a * sign(mod(a, 2.) - 1.)) * 2. - 1. )\n                     \nvoid mainImage(out vec4 o, vec2 u)\n{\n    vec2 R = iResolution.xy\n    , q // dot pos\n    , c // closest\n    , a // temp\n    , e // prior pos\n    ;\n    u = 1.2 * (2. * u - R) / R.y;\n    float t = iTime\n    , d // temp distance\n    , m = 9. // min distance\n    , b = .99 // border\n    ;\n    int k = 64, i;\n    while (k-- > 0) {           // nearest particle\n        q = W(k, t),\n        d = length(u - q);\n        d < m ? m = d, c = q, i = k : i; // save 1 ch        \n    }\n    o = vec4(S(m - .01)); // draw dot\n    e = W(i, t - .01);\n    \n    q = u - c, a = (e - c) * 20.; // motion blur trace segment\n    d = clamp(dot(q, a) / dot(a, a), 0., 1.);\n    o += .6 * (1.-d) * S(length(q - a * d) -.01);\n    // red colliding dot and velocity\n    A(c) > b ? o.gb = R-R : R; // Fabrice saved 1 ch  ;)\n       \n    o += .5 * S(abs(A(u) - 1.02) -.01);      // draw box\n\n    // red colliding borders\n#define B(s,x) if (s c.x > b && s u.x > b)  o.gb *= 0.;\n    B(-,x) B(-,y) B(,x) B(,y)\n}\n\n\n\n// Fabrice 1->2 hash\n//#define H(p) (2.* fract(sin(float(p) * vec2(269.5, 183.3)) * 43758.5453) - 1.)\n\n        //if (d < m) m = d, c = q, i = k;\n        \n\n    // velocity trail drawing - square?\n    //a /= dot(a, a);\n    //d = dot(q, a);\n    //if (d > 0.)\n    //o += .6 * max(0., 1.-d) * S(abs(dot(q, a.yx * vec2(-1,1))) - .1); // longer!  wah\n\n    //o.gb *= step(A(c), b);\n    \n/*float mirror(float x)\n{\n    return (int(floor(x)) & 1) == 0 ? fract(x) : 1.-fract(x);\n}\nvec2 mirror(vec2 p)\n{\n    return vec2(mirror(p.x), mirror(p.y)); // TODO vectorize\n}*/\n/*\nvec2 state(int i, float t)\n{\n    //vec2 U = vec2(ivec2(i, i>>3)&7);\n    //, p = H(U) + H(U+.2) * t / 4.;\n    //return mirror(p) * 2. - 1.;\n    //U = H(U) + H(U+.2) * t/4.;\n    vec2 U =  H(i) + H(i+99) * t/4.;\n    //return fract( U * float((int(floor(U)) & 1)*2-1) )  * 2. - 1.;\n    //return fract( U * ( mod(floor(U),2.)*2.-1.) )  * 2. - 1.;\n    return fract(U * sign(mod(U, 2.) - 1.)) * 2. - 1.;\n}\n*/\n","name":"Image","description":"","type":"image"}]}