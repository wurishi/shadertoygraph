{"ver":"0.1","info":{"id":"mlGyR3","date":"1700530548","viewed":24,"name":"conformal map","username":"minHieu","description":"visualization of conformal map x -> x/|x|^2","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["visualize","conformalmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 coord_transform(vec2 x) {\n    x += vec2(.25);\n    // x *= 3.0;\n    float alpha = max(cos(iTime+3.14159265)*0.5+0.5, 0.01);\n    // float alpha = 1.;\n    float n = (1.-alpha) + alpha*length(x);\n    // float alpha = 0.;\n    // return x/(alpha + (1.-alpha)*length(x)*length(x));\n    return x / (n*n);\n}\n\nvec3 get_color(vec2 p, vec2 pp) {\n    if (pp.x < 0.5 || pp.x > 1. || pp.y < 0.5 || pp.y > 1.) \n        return vec3(1.0);\n    float thres = 0.0;\n    vec2 ixy = sign(cos((p+0.25)*18.*3.14159265));\n    float i  = ixy.x * ixy.y;\n    return i*vec3(0.706, 0.812, 0.98) + (1.-i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = normalize_uv(fragCoord, iResolution.xy);\n    vec2 uv_ = coord_transform(uv);\n\n    // Time varying pixel color\n\n\n    // Output to screen\n    fragColor = vec4(get_color(uv_, uv_),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 normalize_uv(vec2 fragCoord, vec2 ires) {\n    vec2 uv = fragCoord/ires.xy;\n    if (ires.x > ires.y) {\n        uv.x *= ires.x / ires.y;\n        uv.x += .5 * (1. - ires.x / ires.y);\n    } else {        \n        uv.y *= ires.y / ires.x;\n        uv.y += .5 * (1. - ires.y / ires.x);\n    }\n    return uv;\n}","name":"Common","description":"","type":"common"}]}