{"ver":"0.1","info":{"id":"ttyBzV","date":"1614808728","viewed":84,"name":"raymarchin1 Broken Continuum","username":"bradseeker","description":"infinite reps + spatial warping!!!\n\nmusical accompaniment: https://kuvapcsitrd01.kutztown.edu/~bsoel323/noah-muzak/only%20in%20gods%20country.mp3","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MIN_DISTANCE 0.01\n#define MAX_DISTANCE 100.0\n\n#define MAX_STEPS 200\n#define THRESHOLD 0.001\n\nconst float M_PI = 3.14159265358979323846264338327950288;\n\nvec4 sphere = vec4(0.,0.,0.,1.5); //x,y,z, diameter\n//vec4 sphere = vec4(0.,0.,18.,2.);\nvec3 camera = vec3(0.,0.,2.); //x,y,z\n//vec3 camera = vec3(3.,0.,2.); //x,y,z\nvec3 repPeriod = vec3(6.); //% x,y,z\n//vec3 repPeriod = vec3(6., 1.8, 6.);\nfloat beef2 = 3.0;\nfloat tmod = 30.0/69.0;// * 2.0;\n\nfloat getDistance(vec3 p, float travelled) {\n    if(travelled > MIN_DISTANCE) {\n        vec3 moff = mod(p- sphere.xyz+repPeriod/2.,repPeriod)-repPeriod/2.; // uncomment to enable infinite repetition\n        //vec3 moff = p- sphere.xyz; // uncomment to bypass infinite repetition\n        return length(moff)-sphere.w;\n    }\n    return MIN_DISTANCE;\n}\n\nfloat marchRay(vec3 dir, float wiggle) {\n    float dist = 0.0;\n    vec3 dir2 = dir;\n    for (int i = 0; i<MAX_STEPS; i++) {\n        dir2.xy += dir.xy/wiggle;\n\n        vec3 spot = camera + dist * ( normalize( dir2 ) );\n        float last = getDistance(spot, dist);\n        \n        dist += last;\n        if (dist > MAX_DISTANCE || last < THRESHOLD) {\n           break;\n        }\n    }\n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float mTime = iTime * tmod;\n    //camera.x = cos(mTime/8.0)*16.0;\n    camera.y = sin(mTime/4.0)*4.0;\n    //camera.y = (tan(mTime/16.0))+1.0; // crazy cam SEIZURE WARNING\n    //camera.z = mTime;\n    camera.z = cos(mTime/4.0)*16.0;\n\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord+(iResolution.xy/-2.0))/iResolution.y;\n\n\n    vec3 fire = normalize(vec3(uv.x, uv.y, 1.0 ));\n    float wiggle = 600.0-(sin(mTime*M_PI)+1.0)*275.0;\n    vec3 col = vec3(marchRay(fire.xyz, wiggle)/MAX_DISTANCE);\n    //vec3 col = vec3(marchRay(fire.xyz, 1.0)/MAX_DISTANCE);\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}