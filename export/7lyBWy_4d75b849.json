{"ver":"0.1","info":{"id":"7lyBWy","date":"1668643726","viewed":83,"name":"GPT-3 Earth Orbiting the Sun","username":"sferrando","description":"prompt:\nwrite a shadertoy code that renders the earth orbiting the sun.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["gpt3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime * 0.1;\n    \n    float sunSize = 0.2;\n\n    float earthSize = 0.1;\n\n    vec3 sunPos = vec3(0, 0, 0);\n\n    vec3 earthPos = vec3(sin(time), 0, cos(time));\n\n    vec4 sunColor = vec4(1, 1, 0, 1);\n\n    vec4 earthColor = vec4(0, 0, 1, 1);\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv *= 2.0;\n    \n    vec3 cameraPos = vec3(0, 0, -3);\n    vec3 cameraDir = normalize(vec3(uv, 1.0));\n    vec3 lightDir = normalize(sunPos - earthPos);\n    \n    vec3 sunRay = sunPos - cameraPos;\n    float sunRayLength = length(sunRay);\n    float sunAngle = acos(dot(sunRay, cameraDir) / sunRayLength);\n    \n    vec3 earthRay = earthPos - cameraPos;\n    float earthRayLength = length(earthRay);\n    float earthAngle = acos(dot(earthRay, cameraDir) / earthRayLength);\n    \n    if (sunAngle < sunSize)\n    {\n        fragColor = sunColor;\n    }\n    else if (earthAngle < earthSize)\n    {\n        float light = dot(normalize(earthRay), lightDir);\n        fragColor = earthColor * light;\n    }\n    else\n    {\n        fragColor = vec4(0, 0, 0, 1);\n    }\n}","name":"Image","description":"","type":"image"}]}