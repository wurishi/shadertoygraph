{"ver":"0.1","info":{"id":"dtKGWt","date":"1684889106","viewed":53,"name":"Fractal circles","username":"jcponcemath","description":"Testing","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["space","points"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) {\n    vec3 a = vec3(0.198, 0.438, 0.698);\n    vec3 b = vec3(-0.262, 0.208, 0.238);\n    vec3 c = vec3(2.238, 2.168, 1.000);\n    vec3 d = vec3(-0.052, 0.333, 0.667);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv =(fragCoord * 2.0 - iResolution.xy)/iResolution.y;\n    \n    vec2 uv0 = uv;\n    \n    vec3 finalColor = vec3(0.0);\n    \n    for(float i = 0.0; i < 3.0; i ++){\n        uv = fract(uv * 2.0)-0.5;\n    \n        float d = length(uv);\n        \n        vec3 col = palette(length(uv0) - iTime * 0.35);\n    \n        d -= 0.35;\n        //d = abs(d);\n    \n        d = 0.03/d;\n    \n        finalColor += col * d;\n    }\n\n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}