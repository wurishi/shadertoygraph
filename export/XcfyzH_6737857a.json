{"ver":"0.1","info":{"id":"XcfyzH","date":"1720749000","viewed":56,"name":"circle pair tangent","username":"jt","description":"Calculating the tangent to a pair of circles.\n(no tangent if one circle contains the other).","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["circle","tangent","pair"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/XcfyzH circle pair tangent, 2024 by jt\n\n// Calculating the tangent to a pair of circles.\n// (no tangent if one circle contains the other)\n\n// 3d variant: https://www.shadertoy.com/view/XfXcRN sphere pair tangent cone\n\n// tags: circle, pair, tangent\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//#define draw(q) o *= smoothstep(0.0, 0.01, abs(q))\n#define draw(q) o *= smoothstep(0.0, length(fwidth(I)), abs(q)) /* is fwidth supported on all devices? */\n\nfloat line(vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    return length(pa - ba*dot(pa,ba)/dot(ba,ba));\n}\n/*\n// original implementation, perhaps easier to understand\nvec4 circles_tangent(vec3 a, vec3 b) // https://www.shadertoy.com/view/XcfyzH circle pair tangent (jt)\n{\n    float q = (a.z-b.z)/distance(a.xy,b.xy);\n    float p = sqrt(1.0-q*q);\n    vec2 x = normalize(b.xy-a.xy);\n    vec2 y = x.yx*vec2(1,-1);\n    return\n        vec4\n        (\n            a.xy+a.z*(q*x+p*y),\n            b.xy+b.z*(q*x+p*y)\n        );\n}\n*/\n// compactified implementation using less square-roots (removed distance and normalize)\nvec4 circles_tangent(vec3 a, vec3 b) // https://www.shadertoy.com/view/XcfyzH circle pair tangent (jt)\n{\n    vec2 x = b.xy-a.xy;\n    float q = b.z-a.z;\n    float d = dot(x,x);\n    float p = sqrt(d-q*q);\n    vec2 y = vec2(x.y,-x.x);\n    vec2 r = p*y-q*x;\n    return vec4(a.xy+a.z*r/d,b.xy+b.z*r/d);\n}\n\nvec2 mirror(vec2 p)\n{\n    return abs(2.0 * fract(p / 2.0) - 1.0);\n}\n\nvoid mainImage(out vec4 o, in vec2 I) // [-1,+1]\n{\n    vec2 R = iResolution.xy;\n    I = (I+I-R)/R.y;\n\n    o = vec4(1);\n    //if(all(lessThan(abs(I), vec2(1))))\n    {\n        vec2 m = (2.*iMouse.xy-R)/R.y;\n        //vec3 a = vec3(0.2,0.3,0.5);\n        vec3 a = vec3(length(iMouse.xy) < 10.0 ? mirror(0.5+0.5*sqrt(vec2(2,1))*iTime*.1+0.2)*2.0-1.0 : vec2(0.2,0.3), 0.4);\n        //vec3 b = vec3(-0.4,-0.1,0.6);\n        vec3 b = vec3(length(iMouse.xy) < 10.0  ? mirror(0.5+0.5*vec2(.95,-.6)*iTime*.1)*2.0-1.0 : m, 0.6);\n        draw(length(I - a.xy) - a.z); // circle\n        draw(length(I - a.xy) - 0.01); // center\n        draw(length(I - b.xy) - b.z); // circle\n        draw(length(I - b.xy) - 0.01); // center\n\n        {\n            vec4 t = circles_tangent(a, b);\n            if(!any(isnan(t)))\n            {\n                draw(length(I - t.xy) - 0.01); // intersection\n                draw(length(I - t.zw) - 0.01); // intersection\n                draw(line(I, t.xy, t.zw)); // tangent\n            }\n        }\n        {\n            vec4 t = circles_tangent(b, a);\n            if(!any(isnan(t)))\n            {\n                draw(length(I - t.xy) - 0.01); // intersection\n                draw(length(I - t.zw) - 0.01); // intersection\n                draw(line(I, t.xy, t.zw)); // tangent\n            }\n        }\n    }\n}\n","name":"Image","description":"","type":"image"}]}