{"ver":"0.1","info":{"id":"3d3cRN","date":"1600455889","viewed":71,"name":"Camera Simulator in Shader","username":"yonng","description":"Camera and Cube Points\nRefer to the great tutorial: https://www.youtube.com/watch?v=PBxuVlp7nuM\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DistLine(vec3 ro, vec3 rd, vec3 p )  //think about the parralelogram\n{\n    return length(cross(p-ro,rd))/length(rd);\n}\n\nfloat DrawPoint(vec3 ro, vec3 rd, vec3 p)\n{\n    float d = DistLine(ro, rd, p);\n    d = smoothstep(.06,.05,d);  //use smooth setp to process edge case and cut out\n    return d;\n}\n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -=0.5;\n    uv.x*=iResolution.x/iResolution.y;\n\n     float t = iTime;\n    vec3 ro = vec3(3.*sin(t)+0.5,2.,-3.*cos(t)+0.5);   //ray origin\n    \n    vec3 p = vec3(sin(t),0.,1.+cos(t));\n    \n    vec3 lookat = vec3(.5);  //look at the center of the cube\n    vec3 forward = normalize(lookat - ro);\n    vec3 rightvec = cross(vec3(0.,1,0.),forward); //right vector\n    vec3 upvec = cross (forward,rightvec);    // to camera corrdinates -> screen that could be rotated\n    \n    //intersection\n    float zoom = 1.;\n    vec3 c = ro + forward * zoom;  //center\n    vec3 i = c + uv.x* rightvec + uv.y * upvec;\n    vec3 rd = i - ro;\n    //vec3 p  = vec3(0.,0.,2.);  //self defined 2 behind the screen\n    float d = 0.;\n    \n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\td += DrawPoint(ro,rd,vec3(0.,0,0.));\n    d += DrawPoint(ro,rd,vec3(0.,0,1.));\n    d += DrawPoint(ro,rd,vec3(0.,1,0.));\n    d += DrawPoint(ro,rd,vec3(0.,1,1.));\n    d += DrawPoint(ro,rd,vec3(1.,0,0.));\n    d += DrawPoint(ro,rd,vec3(1.,0,1.));\n    d += DrawPoint(ro,rd,vec3(1.,1,0.));\n    d += DrawPoint(ro,rd,vec3(1.,1,1.));\n    // Output to screen\n    fragColor = vec4(d,d,d,1.0);\n}","name":"Image","description":"","type":"image"}]}