{"ver":"0.1","info":{"id":"DtXcRr","date":"1690310619","viewed":59,"name":"Simple antialiased circle border","username":"rafaelbeckel","description":"Simple antialiased circle border for future reference.\n\nBased on: https://shadertoyunofficial.wordpress.com/2019/01/02/programming-tricks-in-shadertoy-glsl\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circle","antialiasing","smoothstep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simple antialiased circle border for future reference.\n//\n// Try it fullscreen. :)\n//\n// Based on:\n// https://shadertoyunofficial.wordpress.com/2019/01/02/programming-tricks-in-shadertoy-glsl\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Our circle properties\n    vec2 position = vec2(sin(iTime/4.), 0.) * .9;\n    float radius = .7;\n    float width = .1;\n    float dist = distance(uv, position);\n    vec4 color = vec4(.8, .7, 1., 1.);\n    \n    // AA Thresold that works across all screen sizes and orientations\n    float aa = 2. / min(iResolution.x, iResolution.y);\n\n    // Our alpha channel\n    float alpha = 1. - smoothstep(width - aa, width + aa, abs(dist - radius));\n\n    // Normally, you can multiply the result by your color's alpha channel.\n    // This will work with GL_BLEND enabled: glEnable(GL_BLEND);\n    color.a *= alpha;\n\n    // Because Shadertoy ignores the alpha, \n    // we'll use the other channels instead.\n    color.rgb *= alpha;\n    \n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}