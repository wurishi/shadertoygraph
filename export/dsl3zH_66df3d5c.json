{"ver":"0.1","info":{"id":"dsl3zH","date":"1665689104","viewed":113,"name":"Saturn cage","username":"Gijlf","description":"enclaved morphing ball","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["cage"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.1415926535898;\nconst float tau = 2.0 * pi;\n\nmat2 rot(float a) {\n    float c = cos(a), s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat smin(float d1, float d2, float k) {\n    float h = clamp(0.5+0.5*(d2-d1)/k, 0.0, 1.0);\n    return mix(d2, d1, h) - k*h*(1.0-h);\n}\n\nfloat sclamp(float x, float mi, float ma, float k) {\n    return smin(smin(x, mi, -k), ma, k);\n}\n\nfloat extrude(float axis, float dist) {\n    vec2 w = vec2(dist, axis);\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat octa(vec3 p, float s) {\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat tri(float x) {\n    return abs(fract(x)-0.5)*4.0-1.0;\n}\n\nfloat co(float x) { return cos(tau*x); }\nfloat si(float x) { return sin(tau*x); }\n\nvec2 map(vec3 p, float time) {\n    float ti  = sclamp(8.0*co(time),-1.0,1.0,2.0)*0.5+0.5;\n    float ti2 = sclamp(4.0*co(time),-1.0,1.0,2.0)*0.5+0.5;\n    float ti3 = sclamp(4.0*co(time+co(time)),-1.0,1.0,2.0)*0.5+0.5;\n\n    // anneau //\n    float r = length(p);\n    vec3 pp = p;\n    pp.xy *= rot(ti2*tau);\n    pp.yz *= rot(ti2*tau);\n    float l = mix(2.3, 3.0, ti3);\n    float d = extrude( abs(pp.y)-0.1, abs(r-l)-0.3 ) - 0.03;\n    vec2 dm = vec2(d, 1.0);\n\n    // shpere | octa //\n    float sb = mix(r-2.1, octa(p, (2.6)), clamp(6.0*co(time+0.11),-1.0,1.0)*0.5+0.5);\n    d = smin(d, sb, 0.07);\n    dm = sb < dm.x ? vec2(d, 2.0) : dm;\n\n    // plane //\n    d = min(p.y+4.0, d);\n    dm = p.y+4.0 < dm.x ? vec2(d, 3.0) : dm;\n\n    float mx = mix(0.55, 0.83, ti);\n    for (int i=0; i<3; i++) {\n        p.xz = abs(p.xz);\n        p.xz *= rot(-0.2 * float(i+1));\n        p.xy *= rot(mx*tau * float(i+1)*0.2);\n    }\n\n    // cage //\n    const float lsm = 0.08;\n    p.xyz = abs(p.xyz)-1.8;\n    p.xy *= rot(0.2);\n    p.xz = abs(p.xz)-0.9;\n    p.xy *= rot(-0.2);\n    d = smin(d, extrude(abs(p.y)-4.0, length(p.xz)-0.05), lsm);\n    float b = pow(0.5*tri(time*4.0+co(time*0.25))+0.5, 5.0);\n    p.zy = abs(p.zy)-0.24 + b * 0.06;\n    float cd = extrude(abs(p.y)-4.0, length(p.xz)-0.03);\n    d = smin(d, cd, lsm);\n    dm = cd < dm.x ? vec2(d, 4.0) : dm;\n\n    return dm;\n}\n\nconst float md = 100.0;\nfloat trace(vec3 st, vec3 rd, float time) {\n    float td = 0.0;\n    for (int i=0; i<128; i++) {\n        float d = map(st + rd * td, time).x;\n        td += d;\n        if (d < 1e-4 || td >= md) break;\n    }\n    return td;\n}\n\nfloat softShadow(vec3 p, vec3 rd, float mint, float maxt, float k, float time) {\n    float res = 1.0;\n    float ph = 1e20;\n    for (float t=mint; t<maxt;) {\n        float h = map(p + rd * t, time).x;\n        if (h < 1e-3) return 0.0;\n        float y = h*h/(2.0*ph);\n        res = min( res, k*h/max(0.0, t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 col = vec3(0);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.x;\n    float time = iTime*0.2;\n\n    vec3 st = vec3(cos(time), 0.08, sin(time))*18.0;\n\n    vec3 ta = vec3(0,0,0);\n    vec3 cz = normalize(ta-st);\n    vec3 cx = normalize(cross(cz, vec3(0,1,0)));\n    vec3 cy = normalize(cross(cx, cz));\n    vec3 rd = normalize(uv.x * cx + uv.y * cy + cz * 0.6);\n\n    float td = min(trace(st, rd, time), md);\n    vec3 pos = st + rd * td;\n    float mat = map(pos, time).y;\n    float fog = 1.0 - (td/md);\n    const vec2 off = vec2(1e-3,0);\n    vec3 nor = normalize(vec3(\n        map(pos+off.xyy, time).x - map(pos-off.xyy, time).x,\n        map(pos+off.yxy, time).x - map(pos-off.yxy, time).x,\n        map(pos+off.yyx, time).x - map(pos-off.yyx, time).x\n    ));\n    vec3 sun_dir = normalize(vec3(0.8, 0.4, -0.2));\n\n    float sun_dif = clamp(dot(nor, sun_dir), 0.0, 1.0);\n    float sky_dif = clamp(dot(nor, vec3(0,1,0)), 0.0, 1.0);\n    float spec = pow(clamp(dot(nor, normalize(sun_dir-rd)), 0.0, 1.0), 48.0);\n\n    float shadow = softShadow(pos, sun_dir, 0.01, 100.0, 18.0, time);\n    col += (0.002 + sun_dif) * vec3(1.00, 0.7, 0.48) * shadow;\n    col += (0.008 + sky_dif) * vec3(0.08, 0.2, 0.40);\n    col += spec;\n    col *= fog;\n\n    col = pow(col, vec3(0.4545));\n    fragColor = vec4(col, 1);\n}\n","name":"Image","description":"","type":"image"}]}