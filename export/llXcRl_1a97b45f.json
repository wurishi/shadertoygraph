{"ver":"0.1","info":{"id":"llXcRl","date":"1505936508","viewed":197,"name":"Kaleidoscope Test","username":"ackleyrc","description":"Shader to test the basis of a kaleidoscope algorithm.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["distortion","kaleidoscope","rotation","reflect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ----- math constants -----\n// const float PI = 3.14159265359;\nconst float TAU = 6.28318530718;\n\n// ------- parameters -------\nconst float NUM_SIDES = 6.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  \t// normalize and center the coordinate system\n \tvec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n    \n    // get the angle in radians of the current coords relative to origin (i.e. center of screen)\n  \tfloat angle = atan(uv.y, uv.x);\n    // repeat image over evenly divided rotations around the center\n  \tangle = mod(angle, TAU / NUM_SIDES);\n    // reflect the image within each subdivision to create a tielable appearance\n  \tangle = abs(angle - TAU / NUM_SIDES / 2.0);\n    // rotate image over time\n  \tangle += iTime;\n    \n    // get the distance of the coords from the uv origin (i.e. center of the screen)\n  \tfloat d = length(uv); \n    // map the calculated angle to the uv coordinate system at the given distance\n  \tuv = d * vec2(cos(angle), sin(angle));\n  \t\n    // introduce distortion\n    uv.x = smoothstep(0.0, 1.0+0.5*sin(iTime*1.123), d);\n    \n \t// vec4 color = texture(iChannel0, uv + 0.5);\n  \tfragColor = texture(iChannel0, uv + 0.5);\n}","name":"Image","description":"","type":"image"}]}