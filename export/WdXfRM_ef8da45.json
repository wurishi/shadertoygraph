{"ver":"0.1","info":{"id":"WdXfRM","date":"1587852636","viewed":91,"name":"Senin Flower","username":"mikelsv","description":"Draw any flowers.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["flower"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Research for http://senin.world\n// Idea: https://youtu.be/hsA1UfGwIHs?t=828\n\n#define PI 3.141592653589793\n\n// Maticals core functions\nfloat box_sin(float angle){\n\tif(angle < 0.)\n    \tangle = -1. * ( - PI * 2. - angle);\n    angle = mod(angle, PI * 2.);\n    \n\tif(angle <= PI * 0.75)\n\t\treturn min(angle / (PI * 0.25), 1.);\n \n\tif(angle <= PI * 1.75)\n\t\treturn max(-1., 1. - (angle - PI * 0.75) / (PI * 0.25));\n    \n    if(angle <= PI * 2.)\n\t\treturn -1. + (angle - PI * 1.75) / (PI * 0.25);\n\n\treturn 0.;\n}\n\nfloat box_cos(float angle){\n    if(angle < 0.)\n        angle = -1. * ( - PI * 2. - angle);\n    angle = mod(angle, PI * 2.);\n\n    if(angle <= PI * 0.25)\n        return 1.;\n    if(angle <= PI * 0.75)\n        return 1. - (angle - PI * 0.25) / (PI * 0.25);\n    if(angle <= PI * 1.25)\n        return -1.;\n    if(angle <= PI * 1.75)\n        return -1. + (angle - (PI * 1.25)) / (PI * 0.25);\n    if(angle <= PI * 2.)\n        return 1.;\n\n    return 0.;\n}\n\nfloat ms_angle(float angle){\n    if(angle < 0.)\n        angle = -1. * ( - PI * 2. - angle);\n    angle = mod(angle, PI * 2.);\n\n    if(angle <= PI * 0.5)\n\t\treturn angle / (PI * 0.5);\n    \n\tif(angle <= PI * 1.5)\n\t\treturn 1. - (angle - PI * 0.5) / (PI * 0.5);\n    \n    if(angle <= PI * 2.)\n\t\treturn -1. + (angle - PI * 1.5) / (PI * 0.5);\n\n    return 0.;\n}\n\n\n// From 0 to 2 PI\nfloat GetAngle(vec2 point){\n    if(point.y >= 0.)\n        if(point.x > 0.)\n        \treturn atan(point.x / point.y);\n        else\n            return atan(-point.y / point.x) + PI * 1.5;\n    else\n        if(point.x > 0.)\n        \treturn atan(-point.y / point.x) + PI * .5;\n        else\n            return atan(point.x / point.y) + PI;\n}\n\nfloat addVawe(float v, float m){\n    return 1. + v * m;\n}\n\n// Flower structure\nstruct Flower{\n    float count;\n    float spin;\n\t//float scale;\n};\n    \nFlower flo[] = Flower[](\n\tFlower(4., 2.),\n    Flower(8., .5),\n    Flower(8., -1.),\n    Flower(16., -.5),\n    Flower(16., 1.)//,\n    //Flower(32., .5)\n);\n\n\nfloat allCall(int id, float v){\n    switch(id){\n        default:\n    \tcase 0: return sin(v);   \n        case 1: return cos(v);\n        case 2: return box_sin(v);\n        case 3: return box_cos(v);\n        case 4: return ms_angle(v);\n    }\n}\n\nfloat allCall(float v){\n\tint id = int(mod(iTime * .5, 5.));\n    float t = mod(iTime * .5, 1.);\n    \n    return allCall(id, v) * (1. - t) + allCall(id + 1, v) * t;    \n}\n\n// Configure it <--------------------------------------------- CONFIG Flowers type\n// Use: sin, cos, box_sin, box_cos, ms_angle, allCall, any else.\n#define FLOVER_CALL(v)\tallCall(v)\n\n// Mouse reaction: click to center\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uc = fragCoord/iResolution.xy - 0.5;\n    vec2 mc = iMouse.xy/iResolution.xy - 0.5;\n    \n    // Configure it <--------------------------------------------------------------------- CONFIG Scale & color\n    float gscale = 16. + 4.; // Global scale\n    vec3 fcol = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)); // Flowers color\n    \n    // Go\n    float scale = 1.;\n    vec3 col = vec3(0., 0., 0.);\n    float opt = 1.;\n    \n    for(int i = 0; i < flo.length(); i ++){\n        // Mouse reaction\n        if(length(mc) <= 0.3)\n        \topt = sin(mod(iTime * flo[i].spin, PI * 2.));\n        \n        // Get angle\n        float a = GetAngle(uc) - mod(iTime * flo[i].spin, PI * 2.);\n        \n        // Get len\n    \tfloat fc = length(uc) * scale * gscale * opt; //(float(i) / float(flo.length()) * 1.);\n    \n    \t// Add vawe\n    \tfloat v = addVawe(FLOVER_CALL(a * flo[i].count), .1);\n    \n        // Mult\n    \tfc *= v;\n\n        // Crop\n      \tif(fc > 1.)\n          fc = 1. - (fc - 1.) * 40.1;\n        \n        // Result color\n        if(fc > 0.1)\n    \t\tcol = col + fcol * fc;\n        \n        // Next flower scale\n        scale *= .6;        \n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}