{"ver":"0.1","info":{"id":"dsKcRt","date":"1696485341","viewed":51,"name":"A Complex Polygon","username":"TLEsoft","description":"Generating a polygon using polar coordinates seems useful; using the time value to define its shape can create strange effects.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["polarcoordinates","polygons"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Equation for drawing polygons using polar coords adapted from: https://habr.com/ru/articles/519954/\n\n\nint polyCount = 3;\nint sideCount = 5;\nfloat vertexDepth = 4.627;\nfloat curveDepth = 1.0;\nfloat polygonScale = 0.398;\nfloat polygonColorFactor = 0.5;\n\nconst float pi = 3.14159265359;\n\nvec2 polarCoordinates(vec2 cartesianCoordinates){\n    return vec2(atan(cartesianCoordinates.x,cartesianCoordinates.y), length(cartesianCoordinates));\n}\n\nfloat polygonalRadius(float angle){\n    float top = cos(((2.0*asin(curveDepth))+(pi*vertexDepth))/(2.0*float(sideCount)));\n    float bottom = cos(((2.0*asin(curveDepth*cos(float(sideCount)*angle*360.0+(mod(iTime,360.0)))))+(pi*vertexDepth))/(2.0*float(sideCount)));\n    return (top/bottom)*polygonScale;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 UV = fragCoord/iResolution.xy;\n\n    vec3 outputColor = vec3(0.0);\n    \n    vec2 normalizedUV = UV*2.0-1.0;\n    \n    normalizedUV.x = normalizedUV.x * (iResolution.x/iResolution.y);\n\n    float angleFromCenter = polarCoordinates(normalizedUV).x;\n\n    outputColor.x += step(distance(polarCoordinates(normalizedUV),vec2(angleFromCenter,polygonalRadius(angleFromCenter))),0.5);\n    \n    fragColor = vec4(outputColor,1.0);\n\n}","name":"Image","description":"","type":"image"}]}