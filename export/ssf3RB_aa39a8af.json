{"ver":"0.1","info":{"id":"ssf3RB","date":"1616155608","viewed":103,"name":"demoballs","username":"mcheshkov","description":"metaballs for demo 2020.03.19","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["metaballs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float opSmoothUnion(float d1, float d2, float k){\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p)-s;\n}\n\nfloat scene(vec3 p) {\n    float d = 100500.;\n    for (int i=0;i<16;i+=1) {\n        float fi = float(i);\n        vec3 dir = sin(1.2*(sin(fi)+1.)*iTime + fi * vec3(1.5,0.5,3.0));\n        d = opSmoothUnion(\n            sdSphere(p - vec3(0.,1.,3.) + 2.*dir, 0.5 + 0.2*sin(iTime)),\n            d,\n            1.3\n        );    \n    }\n    return d;\n}\n\nvec3 marchScene(vec3 ro, vec3 rd) {\n    for(float t = 0.0; t < 10.0;) {\n        float h = scene(ro + rd*t);\n        if( h<0.001 )\n            return vec3(t, 0., 0.);\n        t += h;\n    }\n    return vec3(-1.0);\n}\n\nvec3 calcNormal(vec3 p) {\n    const float h = 1e-5; // or some other value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*scene( p + k.xyy*h ) + \n                      k.yyx*scene( p + k.yyx*h ) + \n                      k.yxy*scene( p + k.yxy*h ) + \n                      k.xxx*scene( p + k.xxx*h ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    float backFreq = 4.;\n    // Time varying pixel color\n    float backCol = 0.5 + 0.2*pow((sin(backFreq * iTime) + 1.) / 2., 8.);\n\n    // Output to screen\n    fragColor = vec4(vec3(backCol),1.0);\n    \n    vec3 ro = vec3(0.,0.,-1.);\n\tvec3 rd = vec3(uv, 0.) - ro;\n    \n    vec3 d = marchScene(ro, rd);\n    if (d.x > -1.) {\n        float colorP = pow(1.-d.x/4., 1./2.);\n        fragColor = vec4(0.9*colorP, 0.8*colorP, 0., 0.);\n        \n        vec3 p = ro + d.x * rd;\n        vec3 n = calcNormal(p);\n        float b = max(0.0, dot(n, vec3(0.577)));\n        vec3 col = (0.6 + 1.3 * cos((b + iTime * 3.0) + vec3(0,2,4)) * vec3(0.7, 0., 0.)) * (1.3*backCol + b * 0.35);\n        col *= exp( -d.x * 0.15 );\n        fragColor = vec4(col, 1.);\n    }\n\n}","name":"Image","description":"","type":"image"}]}