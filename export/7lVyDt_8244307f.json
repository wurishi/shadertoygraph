{"ver":"0.1","info":{"id":"7lVyDt","date":"1662472986","viewed":80,"name":"Ideal Gas Law","username":"romeosoft","description":"Ideal Gas Law formula visualization.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["thermodynamics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n            \n                          .-''--.\n                         _`>   `\\.-'<\n                      _.'     _     '._\n                    .'   _.='   '=._   '.\n                    >_   / /_\\ /_\\ \\   _<\n                      / (  \\o/\\\\o/  ) \\\n                      >._\\ .-,_)-. /_.<\n                          /__/ \\__\\\n                            '---'  \n            \n          “If I can’t picture it, I can’t understand it.”\n\n           The ideal gas state formula, visualized\n                           pV=nRT\n                        simple, funny\n*/\n#define pi 3.1416\n#define real float\n#define ROT(p, a) p=cos(a)*p+sin(a)*vec2(p.y, -p.x)\n\n// ***************************************************\n// main\n// ***************************************************\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pp = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    float eyer = 1.0;\n    float eyea = -((iMouse.x) / iResolution.x) * pi * 2.0;\n    float eyef = ((iMouse.y / iResolution.y)-0.24) * pi * 2.0;\n    \n\tvec3 cam = vec3(\n        eyer * cos(eyea) * sin(eyef),\n        eyer * cos(eyef),\n        eyer * sin(eyea) * sin(eyef));\n    \n    ROT(cam.xz, (0.1) * (iTime + 10.0)); // auto rotation\n     \n\tvec3 front = normalize(- cam);\n\tvec3 left = normalize(cross(normalize(vec3(0.0,1,-0.01)), front));\n\tvec3 up = normalize(cross(front, left));\n\tvec3 v = normalize(front*1.5 + left*pp.x + up*pp.y);\n    vec3 p = cam+v*0.5;\n    \n    float dt = 0.005;\n    vec3 cor = vec3(0.0);\n    \n    for(int i = 0; i < 100; i ++)\n    {\n        float r = length(p);\n        if(r < 0.5){\n            float P = p.x;\n            float V = p.y;\n            float T = p.z*0.1;\n\n            float f = abs((P)) * abs((V)) / (0.1+abs(T)); // pV/T = nR\n            cor += vec3(P,V,T) * (0.1 * sin(10.*f));\n        }\n        p += v * dt;\n    }\n    fragColor = vec4(cor,1.0);\n}","name":"Image","description":"","type":"image"}]}