{"ver":"0.1","info":{"id":"X3XGD4","date":"1707438951","viewed":123,"name":"Sines of Madness","username":"GreatBorealis","description":"A visual created using the sine function with the output rotated in radians per second. Made to practice while I work through Book of Shaders. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","trigonometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.14;\nconst float brightness_mult = 0.6;\nconst float angle_rate = pi / 2.0;\nconst float palette_period = 0.25;\n\n// Using the method found here to create simple color shift over time:\n// http://iquilezles.org/articles/palettes/\nconst vec3 a = vec3(0.5, 0.5, 0.5);\nconst vec3 b = vec3(0.5, 0.5, 0.5);\nconst vec3 c = vec3(1.0, 0.7, 0.4);\nconst vec3 d = vec3(0.0, 0.15, 0.20);\n\nvec3 palette( float t ) {\n    return a + b * cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Adjust coordinates\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // Solve for coordinate rotation\n    float magnitude = sqrt(pow(uv.x, 2.0) + pow(uv.y, 2.0));\n    float initial_angle = tan(uv.x / uv.y);\n    float new_angle = initial_angle + (iTime * angle_rate);\n    vec2 new_position = vec2(magnitude * cos(new_angle), magnitude * sin(new_angle));\n    \n    // Run new coordinate through sine function\n    vec3 col = vec3(sin(new_position.x / new_position.y) + vec3(sin(uv.x)));\n    \n    // Adjust palette over time\n    col = col * palette(iTime * palette_period) * vec3(brightness_mult);;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}