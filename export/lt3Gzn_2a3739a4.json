{"ver":"0.1","info":{"id":"lt3Gzn","date":"1467615304","viewed":215,"name":"screw","username":"Zoz","description":"screw","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["tunnel","spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat map(vec3 p) {\n    p.z *= .3;\n    float vk = 9. * p.z + iTime;\n    p.y += sin(vk);\n    p.x += cos(vk);\n    if (p.z > 0.)\n    \treturn length(p.xy) - .7;\n    return length(p) - .7;\n}\n\nfloat render(vec3 o, vec3 r) {\n \tfloat k = 0.;\n    for (int i = 0; i < 64; i++) {\n     \tvec3 p = o + r * k;\n        float m = map(p);\n        k += m * .5;\n    }\n    return k;\n}\n\nvec3 shade(vec3 o, vec3 r, float k) {\n    vec3 p = o + r * k;\n    float line_size =  .92 + .07 * sin(iTime);\n    vec3 c = vec3(1.) * floor(mod(p.z, .2) + line_size);\n    c *= 1. / (k * k * .9);\n    return c;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 o = vec3(0., 0., -4. + iTime);\n    vec3 r = normalize(vec3(uv, 1.));\n    \n    float k = render(o, r);\n    \n\n\tfragColor = vec4(shade(o, r, k), 1.);\n}","name":"Image","description":"","type":"image"}]}