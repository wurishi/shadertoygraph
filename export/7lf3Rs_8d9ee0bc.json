{"ver":"0.1","info":{"id":"7lf3Rs","date":"1622811319","viewed":144,"name":"DotGrid","username":"samuelraub","description":"DotGrid","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["dotgrid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define S smoothstep\n#define CAM_DIST 1.\n#define SIZE 0.02\n\n// Simplex 2D noise\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\n\nmat4 rotationX( in float angle ) {\n\treturn mat4(\t1.0,\t\t0,\t\t\t0,\t\t\t0,\n\t\t\t \t\t0, \tcos(angle),\t-sin(angle),\t\t0,\n\t\t\t\t\t0, \tsin(angle),\t cos(angle),\t\t0,\n\t\t\t\t\t0, \t\t\t0,\t\t\t  0, \t\t1);\n}\n\nmat4 rotationY( in float angle ) {\n\treturn mat4(\tcos(angle),\t\t0,\t\tsin(angle),\t0,\n\t\t\t \t\t\t\t0,\t\t1.0,\t\t\t 0,\t0,\n\t\t\t\t\t-sin(angle),\t0,\t\tcos(angle),\t0,\n\t\t\t\t\t\t\t0, \t\t0,\t\t\t\t0,\t1);\n}\n\nmat4 rotationZ( in float angle ) {\n\treturn mat4(\tcos(angle),\t\t-sin(angle),\t0,\t0,\n\t\t\t \t\tsin(angle),\t\tcos(angle),\t\t0,\t0,\n\t\t\t\t\t\t\t0,\t\t\t\t0,\t\t1,\t0,\n\t\t\t\t\t\t\t0,\t\t\t\t0,\t\t0,\t1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float ar = iResolution.x/iResolution.y;\n\n    vec2 myMouse = iMouse.xy / iResolution.xy;\n    myMouse -= 0.5;\n    myMouse.x *= ar;\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= ar;\n    \n    vec2 origUV = uv;\n    \n    \n    vec4 myUV = vec4(uv.x, uv.y + snoise(uv + iTime * 0.2) * 0.1 + 0.5, 0., 1.);\n    \n    mat4 rotX = rotationX(PI / 4. + myMouse.y);\n    mat4 rotZ = rotationZ(PI / 7. + myMouse.x);\n    \n    myUV = myUV * rotX;\n\n    myUV = myUV * rotZ;\n\n\n    mat4 proj = mat4(\n        1. / (CAM_DIST - myUV.z), 0, 0, 0,\n        0, 1. / (CAM_DIST - myUV.z), 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1\n    );\n    \n    uv = (myUV * proj).xy;\n    \n    uv = fract(uv * 20.) - 0.5;\n    \n    vec3 col = vec3(0.);\n    \n    col = vec3(0.1) + vec3(S(0.105, 0.1, length(uv)) * map(myUV.z, 0., .7, .3, 0.2));\n    // col = vec3(myUV.xyz);\n    \n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}