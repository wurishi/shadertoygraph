{"ver":"0.1","info":{"id":"lcdyRf","date":"1730983427","viewed":83,"name":"kuwahara_xx","username":"timuber","description":"kuwahara filter\n\nhttps://blog.maximeheckel.com/posts/on-crafting-painterly-shaders/","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["kuwahara","paint"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int kernelSize = 12;\n\n\nvec3 sampleColor(vec2 offset) {\n    vec2 coord = (gl_FragCoord.xy + offset) / iResolution.xy;\n    return texture(iChannel0, coord).rgb;\n}\n\nvoid getSectorVarianceAndAverageColor(vec2 offset, int boxSize, out vec3 avgColor, out float variance) {\n    vec3 colorSum = vec3(0.0);\n    vec3 squaredColorSum = vec3(0.0);\n    float sampleCount = 0.0;\n\n    \n    for (int y = 0; y < boxSize; y++) {\n        for (int x = 0; x < boxSize; x++) {\n            vec2 sampleOffset = offset + vec2(float(x), float(y));\n            vec3 color = sampleColor(sampleOffset);\n            colorSum += color;\n            squaredColorSum += color * color;\n            sampleCount += 1.0;\n        }\n    }\n\n    avgColor = colorSum / sampleCount;\n    vec3 varianceRes = (squaredColorSum / sampleCount) - (avgColor * avgColor);\n    variance = dot(varianceRes, vec3(0.299, 0.587, 0.114));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 boxAvgColors[4];\n    float boxVariances[4];\n\n    getSectorVarianceAndAverageColor(vec2(-kernelSize, -kernelSize), kernelSize, boxAvgColors[0], boxVariances[0]);\n    getSectorVarianceAndAverageColor(vec2(0, -kernelSize), kernelSize, boxAvgColors[1], boxVariances[1]);\n    getSectorVarianceAndAverageColor(vec2(-kernelSize, 0), kernelSize, boxAvgColors[2], boxVariances[2]);\n    getSectorVarianceAndAverageColor(vec2(0, 0), kernelSize, boxAvgColors[3], boxVariances[3]);\n\n    float minVariance = boxVariances[0];\n    vec3 finalColor = boxAvgColors[0];\n\n    for (int i = 1; i < 4; i++) {\n        if (boxVariances[i] < minVariance) {\n            minVariance = boxVariances[i];\n            finalColor = boxAvgColors[i];\n        }\n    }\n\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}