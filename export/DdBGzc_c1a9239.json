{"ver":"0.1","info":{"id":"DdBGzc","date":"1667925135","viewed":100,"name":"Black-pink chess pattern","username":"SNMetamorph","description":"Per-pixel black/pink chess pattern. Familiar for those who played games made on Source Engine from Valve :)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["proceduraltexture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PATTERN_GRID_SIZE_X 2.0\n#define PATTERN_GRID_SIZE_Y 2.0\n#define PATTERN_PER_PIXEL_STEP 0\n\nvec3 chessPatternStandard(in vec2 uv)\n{\n    float a = fract(uv.x * PATTERN_GRID_SIZE_X);\n    float b = fract(uv.y * PATTERN_GRID_SIZE_Y);\n    a = mix(a, 1.0 - a, step(0.5, b));\n    return mix(vec3(0.0, 0.0, 0.0), vec3(1.0, 0.0, 1.0), step(0.5, a));\n}\n\nvec3 chessPatternPerPixel(in vec2 fragCoord)\n{\n    float a = fract(fragCoord.x * 0.5);\n    float b = fract(fragCoord.y * 0.5);\n    a = mix(a, 1.0 - a, step(0.5, b));\n    return mix(vec3(0.0, 0.0, 0.0), vec3(1.0, 0.0, 1.0), step(0.5, a));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n#if PATTERN_PER_PIXEL_STEP == 1\n    vec3 col = chessPatternPerPixel(fragCoord);\n#else\n    vec3 col = chessPatternStandard(uv);\n#endif\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}