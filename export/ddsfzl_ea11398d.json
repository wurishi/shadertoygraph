{"ver":"0.1","info":{"id":"ddsfzl","date":"1689086983","viewed":54,"name":"Oscillating solar flares","username":"billyberkouwer","description":"Adapted from @kishimisu https://www.shadertoy.com/view/mtyGWy","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["flare","oscillation","solar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( float t ) {\n    vec3 a = vec3(0.3, 0.3, 0.3);\n    vec3 b = vec3(0.2, 0.2, 0.2);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.5,0.7,0.7);\n\n    return a + b*cos( 8.*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    vec4 noise = texture(iChannel0, uv+iTime*10.);\n    \n    for (float i = 10.0; i < 15.0; i++) {\n        uv = uv/1.;\n\n        float d = length(uv) / length(uv0+i/(iTime+1000.));\n\n        vec3 col = palette(length(uv0) + i);\n       \n       if (iMouse.x < iResolution.x/2.) {\n               d = sin(d*1000. - cos(iTime+iResolution.x/100.0)*10.);\n       } else {\n               d = sin(d*1000. + cos(iTime+iResolution.x/100.0)*10.);\n       }\n        d = abs(d) * 2.8;\n        d = exp(smoothstep(1.2, 0.3, d));\n        \n\n        finalColor += col / 2. * d;\n    }\n            \n    fragColor = (vec4(finalColor.x, finalColor.y/3., finalColor.z/2., 1.0) ) + noise / 4.;\n}","name":"Image","description":"","type":"image"}]}