{"ver":"0.1","info":{"id":"43BGR3","date":"1708642225","viewed":44,"name":"Malick Sow","username":"sow1236","description":"TP1 informatique graphique","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["malicksow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2023.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(60.,0.,15.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n\n//************************************** Opérateurs ******************************************//\n\n// Union\n// a,b : fonctions de champ des sous-arbres gauche et droit\nfloat Union(float a, float b) {\n  return min(a, b);\n}\n\n// Intersection\nfloat Intersection(float a, float b) {\n  return max(a, b);\n}\n\n// Différence\nfloat Difference(float a, float b) {\n  return max(a, -b);\n}\n\n// Translation\nvec3 translation(vec3 p, vec3 decalage) {\n    return p - decalage;\n}\n\n// Rotation autour de l'axe Y\nvec3 rotationY(vec3 p, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec3(p.x * c - p.z * s, p.y, p.x * s + p.z * c);\n}\n\n// Homothétie\nvec3 homothetie(vec3 p, float facteurEchelle) {\n    return p * facteurEchelle;\n}\n\n//**************************************Objet******************************************//\n// Sphere\n// p : point\n// c : centre du squelette\n// r : rayon\nfloat Sphere(vec3 p, vec3 c, float r) {\n  return length(p - c) - r;\n}\n\n// Plan\n// p : point\n// c : centre du plan\n// n : normale au plan\nfloat Plan(vec3 p, vec3 c, vec3 n) {\n  return dot(p - c, n);\n}\n\n// cube\nfloat Cube(vec3 p) {\n    float planBas = Plan(p, vec3(0, 0, 4), vec3(0, 0, 1));\n    float planDroit = Plan(p, vec3(10, 0, 5), vec3(1, 0, 0));\n    float planGauche = Plan(p, vec3(0, 0, 0), vec3(-1, 0, 0));\n    float planHaut = Plan(p, vec3(0, 1, 0), vec3(0, 1, 0));\n    float planArriere = Plan(p, vec3(0, -8, 0), vec3(0, -1, 0));\n    float planAvant = Plan(p, vec3(0, 0, -3), vec3(0, 0, -1));\n    \n    // Intersection des plans pour former un cube\n    float cube = Intersection(planBas, Intersection(planDroit, Intersection(planGauche, Intersection(planHaut, Intersection(planArriere, planAvant))))); \n    \n    return cube;\n}\n\n// Cercle\n// Représente un cercle dans l'espace 3D\n// p : point\n// c : centre du cercle\n// n : normale au cercle\n// rayon : rayon du cercle\nfloat Cercle(vec3 p, vec3 c, vec3 n, float radius) {\n  float h = dot(p - c, n);\n  float m = sqrt(dot(p - c, p - c) - h * h);\n  float l = m - radius;\n  float d = sqrt((h * h) + (l * l));\n  return d;\n}\n\n// Tore\n// Représente un tore dans l'espace 3D\n// p : point\n// c : centre du tore\n// n : normale au tore\n// R : grand rayon du tore\n// r : petit rayon du tore\nfloat Tore(vec3 p, vec3 c, vec3 n, float R, float r) {\n  return Cercle(p, c, n, R) - r;\n}\n\n// Segment\n// Représente un segment de ligne dans l'espace 3D\n// p : point\n// a : point de départ du segment\n// b : point d'arrivée du segment\nfloat Segment(vec3 p, vec3 a, vec3 b) {\n  vec3 u = (b - a) / length(b - a);\n  if (dot(p - a, u) < 0.0) {\n    float d = length(p - a);\n    return d;\n  } else if (dot(p - b, u) > 0.0) {\n    float d = length(p - b);\n    return d;\n  } else {\n    float l = dot(p - a, u);\n    float d = sqrt(dot(length(p - a), length(p - a)) - dot(l, l));\n    return d;\n  }\n}\n\n// Capsule\n// Représente une capsule dans l'espace 3D\n// p : point\n// a : point de départ de la capsule\n// b : point d'arrivée de la capsule\n// r : rayon de la capsule\nfloat Capsule(vec3 p, vec3 a, vec3 b, float r) {\n  return Segment(p, a, b) - r;\n}\n\n// Cylindre\n// Représente un cylindre dans l'espace 3D\n// p : point\n// a : point de départ du cylindre\n// b : point d'arrivée du cylindre\n// r : rayon du cylindre\nfloat Cylindre(vec3 p, vec3 a, vec3 b, float r) {\n  float premier = Plan(p, a, a - b);\n  float deuxieme = Plan(p, b, b - a);\n  float capsule = Capsule(p, a, b, r);\n  float res = Intersection(premier, Intersection(deuxieme, capsule));\n  return res;\n}\n\n\n// Champ potentiel de l'objet\n// p : point\nfloat object(vec3 p) {\n  \n  // Ajout du plan horizontal pour une meilleur scene\n  float planDessousDesObjets = Plan(p, vec3(0, 0, -4.), vec3(0, 0, 1));\n  \n  // Ajout des autres formes\n  float tore = Tore(p, vec3(-10, 5, 4), normalize(vec3(4, 10, 3)), 7.0, 2.0); // Tore\n  float capsule = Capsule(p, vec3(20,0, -2), vec3(20, 0, 8), 2.0);\n  float bol = Difference(Sphere(p, vec3(5., -3., 6.5), 2.32), Sphere(p, vec3(5., -3., 7.), 2.25));\n  float cylindre = Cylindre(p, vec3(10, 15, 2), vec3(10.0, 15.0, 1.3), 5.0);\n  float cube = Cube(p);\n  \n  // Union de toutes les formes\n  float EnsembleObjet=Union(Union(Union(Union(Union(cube, planDessousDesObjets), tore), capsule), bol), cylindre);\n  return  EnsembleObjet;\n}\n\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n","name":"Image","description":"","type":"image"}]}