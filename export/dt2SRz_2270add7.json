{"ver":"0.1","info":{"id":"dt2SRz","date":"1677539765","viewed":68,"name":"S3 Painting - Stereographic","username":"mattdeeds","description":"The canvas represents a conical stereographic mapping of a sphere.  Click to draw a circle on the sphere.  There are some points on the sphere that map to two places on the canvas.\nI'm pretty sure I have the math wrong on line 6.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["paint","skysphere"],"hasliked":0,"parentid":"mtXXR4","parentname":"S3 Painting"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415927\n\nvec2 TRfromUV(in vec2 uv) {\n  if (uv.x < 0.5) {\n   uv = (uv - vec2(0.25, 0.5)) * vec2(4.0, 2.0);\n   float rho = PI/2.0 * (1.0 - length(uv));\n   return vec2(atan(uv.y, uv.x), rho);\n  } else {\n   uv = (uv - vec2(0.75, 0.5)) * vec2(4.0, 2.0);\n   return vec2(PI - atan(uv.y, uv.x), -PI/2.0 * (1.0 - length(uv)));\n  }\n}\n\nvec3 S3fromTR(in vec2 tr) {\n/*\n  // Top down\n  return vec3(\n    cos(tr.y) * cos(tr.x),\n    sin(tr.y),\n    cos(tr.y) * sin(tr.x));\n*/\n  // Horizontal\n  return vec3(\n    cos(tr.y) * cos(tr.x),\n    cos(tr.y) * sin(tr.x),\n    sin(tr.y));\n}\n\nfloat pill(in vec3 a, in vec3 b, in vec3 x) {\n  vec3 xa = x-a;\n  if (a == b) {\n    return length(xa);\n  }\n  vec3 ba = b-a;\n  vec3 dir = normalize(ba);\n  float proj = dot(xa, dir);\n  if (proj <= 0.0) {\n    return length(xa);\n  } else if (proj >= length(b-a)) {\n    return length(x-b);\n  } else {\n    vec3 p = normalize(a + proj * dir);\n    return length(x-p);\n  }\n}\n\nvec3 background(in vec3 xyz) {\n  vec3 sky = 0.5 + 0.5* xyz;\n  if (xyz.y < 0.0) {\n    float a = xyz.y + 0.1 * sin(xyz.y * 100.0);\n    return \n      mix(vec3(0.5, 0.5, 1.0), vec3(0.1, 0.3, 1.0), a)\n      + 0.5 * sky;\n  }\n  float h = 0.2 * (1.0 + sin(xyz.x * 12.0 + 64.0) * cos(xyz.z * 27.0 + 31.0));\n  if (xyz.y < h) {\n    float a = xyz.y + 0.01 * sin(xyz.y * 100.0);\n    return mix(vec3(0.3, 0.2, 0.1), vec3(1.0, 1.0, 1.0), 2.0 * a);\n  }\n  return sky;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 tr = TRfromUV(uv);\n    vec3 xyz = S3fromTR(tr);\n    vec3 col = background(xyz);\n    \n    vec2 mxy1 = iMouse.xy / iResolution.xy;\n    vec2 mxy2 = abs(iMouse.zw) / iResolution.xy;\n    \n    if( iMouse.z <= 0.0 )  {\n      mxy1 = vec2(0.5 * sin(iTime) + 0.5, 0.5 * cos(iTime * 1.938) + 0.5);\n      mxy2 = vec2(0.5 * sin(iTime - 0.1) + 0.5, 0.5 * cos((iTime - 0.1) * 1.938) + 0.5);;\n    }\n    \n    if (length(mxy1 - uv) < 0.01) {\n      fragColor = vec4(1.0, 0.2, 0.2, 1.0);\n      return;\n    }\n    if (length(mxy2 - uv) < 0.01) {\n      fragColor = vec4(0.2, 0.2, 1.0, 1.0);\n      return;\n    }\n    \n    \n    vec3 mxyz1 = S3fromTR(TRfromUV(mxy1));\n    vec3 mxyz2 = S3fromTR(TRfromUV(mxy2));\n    \n    \n    float d = pill(mxyz1, mxyz2, xyz);\n    float intensity = smoothstep(0.20, 0.125, d);\n    col = max(col, vec3(intensity));\n   \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}