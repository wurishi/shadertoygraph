{"ver":"0.1","info":{"id":"4tBGDt","date":"1433390559","viewed":235,"name":"Ray marching cube minus sphere","username":"kjfung","description":"I'm a scrub at this","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["march"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float distToBox(vec3 p, float side) {\n    vec3 d = abs(p) - side;\n    float box = min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n    float sphere = -(-length(p) + side + 15.0);\n    return max(-sphere, box);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    //Setup properties of the eye along with its orientation\n\tvec3 eye   = vec3(200.0 * sin(iTime), 0.0, 200.0 * cos(iTime));\n    float focal = 200.0;\n    vec3 up    = vec3(0.0, 1.0, 0.0);\n    vec3 focus = vec3(0.0, 0.0, 0.0);\n    \n    //Calculate eye directions\n    vec3 look  = focus - eye;\n    vec3 right = cross(look, up);\n    \n    //Calculate this particular pixel's normalized coordinates\n    //on the virtual screen\n    float screenX = (2.0 * fragCoord.x)/(1.0 * iResolution.x) - 1.0;\n    float screenY = (2.0 * fragCoord.y)/(1.0 * iResolution.y) - 1.0;\n\n    //Calculate the direction that the ray through this pixel goes\n    vec3 dir = normalize(focal * normalize(look) \n               + screenX * normalize(right) * iResolution.x/2.0\n               + screenY * normalize(up) * iResolution.y/2.0);\n\n    //Ray march\n    vec3  p = eye + dir;\n    float d = distToBox(p, 50.0);\n    vec3  e = vec3(0.0005, 0.0, 0.0);\n    \n    for(int i = 0; i < 256; i++)\n    {\n        if(d <= e.x)\n        {\n            vec3 normal = normalize(vec3(distToBox(p + e.xyy, 50.0) - d,\n                \t\t\t\t\t     distToBox(p + e.yxy, 50.0) - d,\n                \t\t\t\t\t     distToBox(p + e.yyx, 50.0) - d));\n            float lighting = dot(normalize(vec3(0.5, 1.0, 1.0)), normal);\n            fragColor = vec4(1.0, 1.0, 1.0, 1.0) * lighting;\n            return;\n        }\n        p = p + d * normalize(dir);\n        d = distToBox(p, 50.0);\n    }\n    \n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    return;\n}","name":"Image","description":"","type":"image"}]}