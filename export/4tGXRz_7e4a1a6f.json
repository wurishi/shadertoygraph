{"ver":"0.1","info":{"id":"4tGXRz","date":"1482360976","viewed":105,"name":"Pinwheel from the Depths","username":"ptrgags","description":"Played around with a noise function from a tutorial. Surprisingly, this shader looks better with the low-res noise texture than the high-res one.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","red","polar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415\n\n//Very simplistic noise function\nfloat rand1(float x) {\n    return texture(iChannel0, vec2(x, 0.5)).r;\n}\n\n//Based on https://thebookofshaders.com/11/\nfloat smooth_noise(float x) {\n    float int_part = floor(x);\n    float fract_part = fract(x);\n    return mix(rand1(int_part), rand1(int_part + 0.01), smoothstep(0.0, 1.0, fract_part));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Centered UV coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n   \tuv -= 0.5;\n    \n    //Fix aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //Polar coordinates of point in UV space\n    float r = length(uv);\n    float theta = atan(uv.y, uv.x);\n    if (theta < 0.0)\n        theta += 2.0 * PI;\n    \n    float angle_noise = smooth_noise(3.0 * theta + iTime);\n    float radius_noise = rand1(r - 0.1 * iTime);\n    \n    \n    fragColor = angle_noise * radius_noise * vec4(1.0, 0.0, 0.0, 1.0);\n    \n    \n    \n}","name":"Image","description":"","type":"image"}]}