{"ver":"0.1","info":{"id":"lfy3WK","date":"1715385411","viewed":50,"name":"AK FYP20: Oct Particle System","username":"AKHC","description":"Similar to other 3D particle system but uses octahedron SDFs for particles instead of spheres. The smooth minimum function causes the large clusters of octahedrons to still resemble a spherical shape at the middle of the system.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash11(float p, float range) { //0 to range\n     // Bias towards positive x-direction\n    // 13-bit hash function by inigo quilez - https://www.shadertoy.com/view/4dS3Wd\n    vec3 p3 = fract(vec3(p) * vec3(0.1031, 0.1030, 0.0973));\n    p3 += dot(p3, vec3(1.0, 19.0, 57.0));\n    return fract(sin(p3.x) * 43758.5453) * range;\n}\n\nvec3 hash13(float p) {\n    vec3 p3 = fract(vec3(p) * vec3(0.1031, 0.1030, 0.0973));\n    p3 += dot(p3, vec3(1.0, 19.0, 57.0));\n    return normalize((fract(sin(p3) * 43758.5453) * 2.0 - 1.0) * 0.1);\n}\n\nvec3 palette1( in float t)\n{\n    vec3 a = vec3(0.756, 0.054, 0.590);\n    vec3 b = vec3(0.787, 0.227, 0.048);\n    vec3 c = vec3(1.195, 0.263, 0.702);\n    vec3 d = vec3(2.939, 0.116, 3.415);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat smin( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat opXor(float d1, float d2 )\n{\n    return max(min(d1,d2),-max(d1,d2));\n}\n\n/* * 0.1\n//old hash function that gets limited to one quadrant for some reason\n// 13-bit hash function by inigo quilez - https://www.shadertoy.com/view/4dS3Wd\n    vec3 p3 = fract(vec3(p) * vec3(0.1031, 0.1030, 0.0973));\n    p3 += dot(p3, vec3(1.0, 19.0, 57.0));\n    return fract(sin(p3) * 43758.5453);\n*/\n\nmat2 rot2D(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\n\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdOctahedron( vec3 p, float s )\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\nfloat sdfRaspberry(vec3 p, float r)\n{\n    float dist = length(p) - r;\n    float freq = 15.0;\n    float magnitude = 0.025;\n    float displacement = magnitude * sin(freq * p.x) * sin(freq * p.y) * sin(freq * p.z);\n\n    return dist + displacement;\n}\n\nfloat map(in vec3 p)\n{\n    //float disp = sin(5. * p.x * sin(iTime)) * sin(5. * p.y * sin(iTime + 1.)) * sin(5.0 * p.z * cos(iTime)) * 0.25; \n    p -= vec3(0,-2.,0);\n    \n    float rad = 0.1;\n    \n    float onion = sdOctahedron(p + vec3(iTime / 10.), rad);\n     \n    //float onion = sdfRaspberry(p + vec3(iTime / 10.), 1.);\n    //float newSphere = sdSphere(p + hash13(14213.), 0.05);\n    //onion = min(onion, newSphere);\n   \n    for(float i = 0.; i < 100.; i++)\n    {\n        vec3 randDir = hash13(i/130.);\n        randDir.y = -abs(randDir.y) - 0.8;\n     \n        float randSpeed = (hash11(i/281., 1.) + 1.) * 3.;\n        \n        float randLifeTime = hash11(i/44., 2.) * 4.;\n     \n        //rad = 0.1 * (smoothstep(1.0,0.9,fract(iTime/randSpeed)) * randLifeTime);\n     \n        //float speed = \n        vec3 xForm = p + randDir * fract(iTime/randSpeed) * randLifeTime ; //smoothstep(0., 1., fract(iTime)) * 4.;\n        \n        float disp2 = sin(5. * xForm.x * sin(iTime)) * sin(5. * xForm.y * sin(iTime + 1.)) * sin(5.0 * xForm.z * cos(iTime)) * 0.25;\n        \n        float newSphere = sdOctahedron(xForm, rad);\n        onion = smin(onion, newSphere, 0.5);\n    }\n    \n    \n    \n    return onion;\n}\n\nvec3 calcNormal(in vec3 p)\n{\n    const vec3 small_step = vec3(0.001, 0.0, 0.0);\n\n    float gradient_x = map(p + small_step.xyy) - map(p - small_step.xyy);\n    float gradient_y = map(p + small_step.yxy) - map(p - small_step.yxy);\n    float gradient_z = map(p + small_step.yyx) - map(p - small_step.yyx);\n\n    vec3 normal = vec3(gradient_x, gradient_y, gradient_z);\n\n    return normalize(normal);\n}\n\nvec3 raymarch(vec3 ro, vec3 rd)\n{\n    float t = 0.;\n\n    //Raymarching\n    //current position along ray\n    for(float i = 0.; i < 100.; i++)\n    {\n        vec3 p = ro + (rd) * t;   //marches ray: ray origin + the direction\n        \n        //p = vec3(p.x,  p.y + sin(t), p.z);\n        \n        float d = map(p); \n        t += d; \n        \n        \n        if(d < 0.001f) //minimum hit distance\n        {\n            vec3 normal = calcNormal(p);  \n            return normal * 0.5 + 0.5;\n            //return vec3(t);\n            break;   //stop if ray gets too close to object\n        }\n        \n        if(t > 500.)  //stop if ray goes too far\n        {\n            break;\n        }\n    }\n    \n    return vec3(t);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n    \n    vec3 col = vec3(1);\n    \n    vec3 ro = vec3(0, 0, -5);\n    float fov = 0.5;\n    vec3 rd = normalize(vec3(uv * fov, 1)); \n    float t = 0.;\n\n\n    //vertical cam rotation\n    ro.yz *= rot2D(-m.y);\n    rd.yz *= rot2D(-m.y);\n\n    //horizontal cam rotation\n    ro.xz *= rot2D(-m.x);\n    rd.xz *= rot2D(-m.x);\n\n    \n    vec3 rayFinal = raymarch(ro, rd);\n    \n    \n    \n    \n    \n    \n    bool hit = !(rayFinal.x > 500.);\n    \n    //col = hit ? rayFinal * palette1(iTime) / 2. :  vec3(1);\n    col = rayFinal;\n\n    //Lighting\n    vec3 n = (rayFinal - 0.5) / 0.5; //old normal\n    vec3 light = normalize(vec3(1., 1., 1.));\n    //vec3 light2 = normalize(vec3(0., 1., 0.));\n\n    float ambient = 0.00;\n    float brightness;\n    //n = erot(n, normalize(vec3(-1,1,0)), .96); // 0.96rad/54.7deg \"the magic angle\"\n    brightness += dot(max(n, 0.), vec3(0.4)) + ambient;\n    \n    \n    //col = vec3(hit ? smoothstep(0.1, .5, vec3(brightness) * palette1(iTime)) : vec3(1)) * 2.;\n    //col = vec3(hit ? vec3(brightness) * palette1(iTime) : vec3(1)) * 2.;\n    //col = n * palette1(iTime);\n    \n    \n    \n    \n    \n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}