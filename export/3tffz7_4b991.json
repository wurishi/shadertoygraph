{"ver":"0.1","info":{"id":"3tffz7","date":"1596302685","viewed":226,"name":"Grid Index","username":"nikat","description":"Inspired by the book of the same name by Carsten Nicolai, 2009.\n\nList of regular tilings in 2d. Line width is fixed in fragment space.\n","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid","square","tiling","regular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Grid Index\n// Created by Nikita Miropolskiy, nikat/2020\n// Inspired by the book of the same name by Carsten Nicolai, 2009\n\n// List of regular tilings in 2d. Line width is fixed in fragment space.\n\n//#define COLORS\n//#define BACKGROUND_GRID\n//#define BACKGROUND_AXES\n\nfloat SCALE=3.2;\n\n// palette\nvec3 bgColor  = vec3(1.,1.,.95);\nvec3 gridColor = vec3(0.2, 0.2, 0.5);\nvec3 positiveColor = vec3(2.0,.0,.0);\nvec3 negativeColor = vec3(.0,.0,2.0);\n\n// convert fragment space to point space\nvec2 frag2point(in vec2 frag) {\n    return SCALE*(frag - 0.5*iResolution.xy)/iResolution.yy;\n}\n\n// calculate stroke intensity from number of positive samples\nfloat samples2stroke(float ratio) {\n     return smoothstep(0.0, 0.5, ratio)*smoothstep(1.0, 0.5, ratio);\n}\n\n// signed fraction part\nfloat sfrac(float x) { return fract(x) - .5; }\nfloat sfrac2(float x) { return fract(.5*x) - .5; } // half-density\n\nfloat drawGrid(float x, float y, float animation)\n{\n    float i = mod(animation, 40.0)-0.01;\n    \n    if(--i<0.) return sfrac(x); // lines |\n    if(--i<0.) return sfrac(y); // lines -\n    if(--i<0.) return sfrac2(x)*sfrac2(y); // square grid\n    if(--i<0.) return sfrac(x) + sfrac(y); // dissected square grid \\\n    if(--i<0.) return sfrac(x) - sfrac(y); // dissected square grid /\n    if(--i<0.) return sfrac2(x+y)*(sfrac(x) - sfrac(y)); // dissected square grid X\n    if(--i<0.) return sfrac(x+y); // lines \\\n    if(--i<0.) return sfrac(x-y); // lines /\n    if(--i<0.) return sfrac2(x+y)*sfrac2(x-y); // square45 grid\n    if(--i<0.) return sfrac(x+y) + sfrac(x-y); // dissected square45 grid |\n    if(--i<0.) return sfrac(x+y) - sfrac(x-y); // dissected square45 grid - \n    if(--i<0.) return sfrac(x)*(sfrac(x+y) - sfrac(x-y)); // dissected square45 X\n    if(--i<0.) return sfrac(y*sqrt(.75)+x*.5) - sfrac(x); // isometric (pointy)\n\tif(--i<0.) return sfrac(x*sqrt(.75)+y*.5) - sfrac(y); // isometric (flat)\n    if(--i<0.) return sfrac(x)*(sfrac(y*sqrt(.75)+x*.5) - sfrac(x)); // trihex (pointy)\n    if(--i<0.) return sfrac(y)*(sfrac(x*sqrt(.75)+y*.5) - sfrac(y)); // trihex (flat)\n    if(--i<0.) return (sfrac(x+y)+0.25)*(sfrac(x-y)+0.25); // double square45\n    if(--i<0.) return (sfrac(x)+0.25)*(sfrac(y)+0.25); // double square\n    if(--i<0.) return length(vec2(sfrac(x), sfrac(y)))-0.5*(1.0-4.0/iResolution.y); // circles \n    if(--i<0.) return sfrac(x*sqrt(.75)+y*.5)*sfrac(y); // square60 \\_\n    if(--i<0.) return sfrac(x*sqrt(.75)-y*.5)*sfrac(y); // square60 _/\n    if(--i<0.) return length(vec2(sfrac(x+y), sfrac(x-y)))-0.5*(1.0-4.0/iResolution.y); // circles45  \n    if(--i<0.) return sfrac(x)*sfrac(y+abs(x-round(x))); // N-tiles\n    if(--i<0.) return sfrac(y)*sfrac(x+abs(y-round(y))); // Z-tiles\n    if(--i<0.) return sfrac(x)*sfrac2(y+abs(x-round(x))); // N-tiles half-density\n\tif(--i<0.) return sfrac(y)*sfrac2(x+abs(y-round(y))); // Z-tiles half-density\n    if(--i<0.) return sfrac(x*sqrt(.75)+y*.5) - sfrac(y) - 0.2; // dedicated triangles ^\n    if(--i<0.) return sfrac(x*sqrt(.75)+y*.5) - sfrac(y) + 0.2; // dedicated triangles V    \n    if(--i<0.) return sfrac(y*sqrt(.75)+x*.5) - sfrac(x) + 0.2; // dedicated triangles <\n    if(--i<0.) return sfrac(y*sqrt(.75)+x*.5) - sfrac(x) - 0.2; // dedicated triangles >    \n    if(--i<0.) return length(vec2(sfrac(x), sfrac(y)))-0.33; // dedicated circles\n    if(--i<0.) return length(vec2(sfrac(x+y), sfrac(x-y)))-0.33; // dedicated circles45\n    if(--i<0.) return sfrac2(y)*sfrac2(x+abs(y-round(y))); // big < tiles\n    if(--i<0.) return sfrac2(y)*sfrac2(x-abs(y-round(y))); // big > tiles\n    if(--i<0.) return sfrac2(x)*sfrac2(y+abs(x-round(x))); // big V tiles (shields)\n    if(--i<0.) return sfrac2(x)*sfrac2(y-abs(x-round(x))); // big ^ tiles (roofs)\n    if(--i<0.) return sfrac2(y)*sfrac2(y-sqrt(2.0)*abs(x-round(x))); // hills ^\n    if(--i<0.) return sfrac2(y)*sfrac2(y+sqrt(2.0)*abs(x-round(x))); // hills V       \n    if(--i<0.) return sfrac2(y)*sfrac(y*.5+abs(x*sqrt(.75)-round(x*sqrt(.75)))); // snake triangles  \n    if(--i<0.) return sfrac(x+y)+.25; // lines \\\\\n    if(--i<0.) return sfrac(x-y)+.25; // lines //\n    if(--i<0.) return sfrac(x)+0.25; // lines ||  \n    if(--i<0.) return sfrac(y)+0.25; // lines =\n    return 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    \n\tvec2 p = frag2point(fragCoord);\n    #ifdef BACKGROUND_GRID\n    vec3 col = mix(bgColor, bgColor*0.95, mod(floor(p.x)+floor(p.y), 2.0));\n    #else\n    vec3 col = bgColor;\n    #endif\n    \n    // 9x9 sampling\n    float grid, axes, total;\n    for (float x=-1.; x<=1.; x+=.25)\n    for (float y=-1.; y<=1.; y+=.25)\n    {\n        vec2 s = frag2point(fragCoord.xy+vec2(x, y));\n        float animation = 1.5*iTime + .08*s.x + .04*s.y;\n        if ( drawGrid(s.x, s.y, animation) > 0.0 ) grid++;\n        #ifdef BACKGROUND_AXES\n        if ( s.x*s.y > 0.0 ) axes++; \n        #endif\n        total++;\n    }\n    \n    #ifdef BACKGROUND_AXES\n    col = mix(col, bgColor*0.9,  samples2stroke(axes/total));\n    #endif\n    \n    #ifdef COLORS\n    if (grid<.5*total) col = mix(negativeColor, col, .7); \n    if (grid>.5*total) col = mix(positiveColor, col, .7); \n    #endif\n\n    // draw grid\n  \tcol = mix(col, gridColor, samples2stroke(grid/total));\n    // vignetting\t\n\tcol *= 1.0 - 0.1*length(p);\n    // output\n    fragColor = vec4(col, 1.0);  \n}","name":"Image","description":"","type":"image"}]}