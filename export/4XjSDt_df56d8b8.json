{"ver":"0.1","info":{"id":"4XjSDt","date":"1711231839","viewed":58,"name":"Phong Illiumination 3d Shader","username":"elifront","description":"My first 3d shader -- need to do some work to remove lighting artifacts","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","phong","light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n\n// Notes\n// SDF = sign distance function\n\n// SDSphere with ray march dist & radius\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\n// SdBox\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 d = abs(p) - b;\n    return length(max(d, 0.)) + min(max(d.x, max(d.y, d.z)), 0.);\n}\n\nfloat smin(float a, float b, float k) {\n    float h = max(k - abs(a - b), 0.) / k;\n    return min(a, b) - h * h * k * (1. / 6.);\n}\n\n// Return distance to object(s) in the scene from the position alogn the ray\nfloat map(vec3 p) {\n    vec3 spherePos = vec3(sin(iTime) * 3., 0., 0.);\n    float sphere = sdSphere(p - spherePos, 1.);\n\n    vec3 boxPos = vec3(cos(iTime) * 3., 0., 0.);\n    float box = sdBox(p - boxPos, vec3(.75));\n\n    float ground = p.y + 1.;\n\n    ground += sin(p.z * 10. + iTime * 3.) * .1;\n\n    return smin(ground, smin(box, sphere, 2.), 1.);\n}\n\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n            map(vec3(p.x + EPSILON, p.y, p.z)) - map(vec3(p.x - EPSILON, p.y, p.z)),\n            map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\n            map(vec3(p.x, p.y, p.z + EPSILON)) - map(vec3(p.x, p.y, p.z - EPSILON))\n        ));\n}\n\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n    vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n\n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n\n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    }\n\n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 ro) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n\n    vec3 light1Pos = vec3(4.0, 2.0, 4.0);\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n\n    color += phongContribForLight(k_d, k_s, alpha, p, ro,\n            light1Pos,\n            light1Intensity);\n\n    vec3 light2Pos = vec3(2.0 * sin(0.37), 2.0 * cos(0.37), 2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n\n    color += phongContribForLight(k_d, k_s, alpha, p, ro,\n            light2Pos,\n            light2Intensity);\n    return color;\n}\n\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy * 2. - iResolution.xy) / iResolution.y;\n    float fovMultiplier = 1. / tan(1.0472 * .5); // 1.0472 radians = 60 degrees\n\n    // Init\n    vec3 ro = vec3(0, 0, -3); // Ray Origin\n    vec3 rd = vec3(uv * fovMultiplier, 1); // Ray Direction\n    rd = normalize(rd); // Normalize Ray Direction, which sets the ray length to 1\n\n    float t = MIN_DIST; // Total distance traveled from ray origin\n    vec3 p = vec3(0); // Current position along the ray\n\n    // Ray Marching\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        p = ro + rd * t; // Current position along the ray\n        float d = map(p); // Distance to an object in the scene\n        t += d; // Move the distance traveled on the ray to hit the first object\n\n        if (d < EPSILON || t > MAX_DIST) break; // break if the ray is super close to an object or way too far from the origin\n    }\n\n    vec3 K_a = vec3(0.2, 0.2, 0.2);\n    vec3 K_d = palette(sin(iTime) * 0.5 + 0.5, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(1.0, 1.0, 1.0), vec3(0.0, 0.33, 0.67));\n\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 10.0;\n\n    vec3 col = phongIllumination(K_a, K_d, K_s, shininess, p, ro);\n    \n    \n    if (t > MAX_DIST - EPSILON) { // thanks to @dean_the_coder\n        col = K_d * 0.4;\n    }\n\n    fragColor = vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"}]}