{"ver":"0.1","info":{"id":"sdfSzH","date":"1618257976","viewed":91,"name":"Subsurface Scattering Sim","username":"FrancisL","description":"Nice","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cool"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int RAY_STEPS = 256;\nconst float FOVY = 3.141569 * 0.25;\nconst float TO_RADIANS = 3.1415 / 180.0;\nconst vec3 LIGHT_POS = vec3(0., -0.5, 5.);\nconst vec3 LIGHT_COLOR = vec3(0.27, 0.4, 1);\nconst float SHADOW_HARDNESS = 6.0;\n\n// Adjust these to alter where the subsurface glow shines through and how brightly\nconst float FIVETAP_K = 2.0;\nconst float AO_DIST = 0.085;\n\n// The larger the DISTORTION, the smaller the glow\nconst float DISTORTION = 0.2;\n// The higher GLOW is, the smaller the glow of the subsurface scattering\nconst float GLOW = 6.0;\n// The higher the BSSRDF_SCALE, the brighter the scattered light\nconst float BSSRDF_SCALE = 3.0;\n// Boost the shadowed areas in the subsurface glow with this\nconst float AMBIENT = 0.0;\n// Toggle this to affect how easily the subsurface glow propagates through an object\n#define ATTENUATION 0\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n    \nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\n\n#define SPHERE_1_SDF sphere(pos, 1.0, LIGHT_POS)\n#define SPHERE_1_ID 1\n\n#define FLOOR_SDF plane(pos, vec4(0.0, 1.0, 0.0, 3.5))\n#define FLOOR_ID 2\n\n#define TALL_BOX_SDF box(rotateY(pos + vec3(1.7, 1, -3), 27.5 * TO_RADIANS), vec3(1, 1, 1))\n#define TALL_BOX_ID 3\n\n#define SMALL_BOX_SDF box(rotateY(pos + vec3(-1.5, 0.5, -1.75), -27.5 * TO_RADIANS), vec3(1, 2, 1))\n#define SMALL_BOX_ID 4\n\nvec3 shootRay(vec3 eye, vec3 ref, vec2 ndc)\n{\n    vec3 eye2Ref  = ref - eye;\n    float n = length(eye2Ref);\n    \n    vec3 worldUp = vec3(0.0, 1.0, 0.0);\n    vec3 right  = normalize(cross(eye2Ref, worldUp));\n    \n    vec3 U = normalize(cross(right, eye2Ref));\n    vec3 V = U * n * tan(FOVY * 0.5);\n    \n    float aspect = iResolution.x / iResolution.y;\n    vec3 H = right * n * tan(FOVY * 0.5) * aspect;\n  \n    vec3 p = ref + ndc.x * H + ndc.y * V;\n    return normalize(p - eye);\n}\n\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj)\n{\n    t = FLOOR_SDF;\n    obj = FLOOR_ID;\n     \n    float t2 = TALL_BOX_SDF;\n\n    if(t2 < t)\n    {\n        t = t2;\n        obj = TALL_BOX_ID;\n    }\n    t2 = SMALL_BOX_SDF;\n    if(t2 < t)\n    {\n        t = t2;\n        obj = SMALL_BOX_ID;\n    }\n    t2 = SPHERE_1_SDF;\n    if(t2 < t)\n    {\n        t = t2;\n        obj = SPHERE_1_ID;\n    }\n}\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t = FLOOR_SDF;\n    t = min(t, TALL_BOX_SDF);\n    t = min(t, SMALL_BOX_SDF);\n    t = min(t, SPHERE_1_SDF);\n    return t;\n}\n\nfloat shadowMap3D(vec3 pos)\n{\n    float t = FLOOR_SDF;\n    t = min(t, TALL_BOX_SDF);\n    t = min(t, SMALL_BOX_SDF);\n    return t;\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nfloat softShadow(vec3 dir, vec3 origin, float min_t, float k) {\n    float res = 1.0;\n    float t = min_t;\n    for(int i = 0; i < RAY_STEPS; ++i) {\n        float m = shadowMap3D(origin + t * dir);\n        if(m < 0.0001) {\n            return 0.0;\n        }\n        res = min(res, k * m / t);\n        t += m;\n    }\n    return res;\n}\n\nfloat subsurface(vec3 lightDir, vec3 normal, vec3 viewVec, float thickness) {\n    vec3 scatteredLightDir = lightDir + normal * DISTORTION;\n    float lightReachingEye = pow(clamp(dot(viewVec, -scatteredLightDir), 0.0, 1.0), GLOW) * BSSRDF_SCALE;\n    float attenuation = 1.0;\n    #if ATTENUATION\n    attenuation = max(0.0, dot(normal, lightDir) + dot(viewVec, -lightDir));\n    #endif\n\tfloat totalLight = attenuation * (lightReachingEye + AMBIENT) * thickness;\n    return totalLight;\n}\n\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec, vec3 view, float thick)\n{\n    float cosine = dot(-lightVec, n);\n    float subsurface = subsurface(-lightVec, n, view, thick);\n    \n    switch(hitObj){\n        case TALL_BOX_ID:\n        return vec3(1., 1., 0.) * cosine  + subsurface * LIGHT_COLOR;\n        break;\n        case SMALL_BOX_ID:\n        return vec3(0., 1., 1.) * cosine  + subsurface * LIGHT_COLOR;\n        break;\n        case SPHERE_1_ID:\n        return LIGHT_COLOR;\n        case FLOOR_ID:\n        return cosine * softShadow(-lightVec, p, 0.1, 10.0) * LIGHT_COLOR;\n        break;\n        case -1:\n        return vec3(0., 0., 0.);\n    }\n}\n\nfloat fiveTapAO(vec3 p, vec3 n, float k) {\n    float aoSum = 0.0;\n    for(float i = 0.0; i < 5.0; ++i) {\n        float coeff = 1.0 / pow(2.0, i);\n        aoSum += coeff * (i * AO_DIST - shadowMap3D(p + n * i * AO_DIST));\n    }\n    return 1.0 - k * aoSum;\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye)\n{\n    float t;\n    int objectID;\n    march(eye, dir, t, objectID);\n    vec3 intersection = eye + t * dir;\n    vec3 nor = computeNormal(intersection);\n    vec3 lightDir = normalize(intersection - LIGHT_POS);\n    float thickness = fiveTapAO(intersection, -nor, FIVETAP_K);\n    vec3 surfaceColor = computeMaterial(objectID, intersection, nor, lightDir, normalize(eye - intersection), thickness);\n    return Intersection(t, surfaceColor, intersection, objectID);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy) * 2. - vec2(1.0, 1.0);\n    vec3 eye = rotateY(vec3(0, 2, -15), iTime);\n    vec3 ref = vec3(0, 2, 0);\n    vec3 rayDir = shootRay(eye, ref, uv);\n    Intersection it = sdf3D(rayDir, eye);\n    fragColor = vec4(it.color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}