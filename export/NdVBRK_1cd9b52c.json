{"ver":"0.1","info":{"id":"NdVBRK","date":"1659841674","viewed":117,"name":"cmyk tile space","username":"HaleyHalcyon","description":"...ernnns ","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["cmykcirclesquarespacezoom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI acos(-1.)\n#define HEX(x) (vec3((x >> 16) & 255, (x >> 8) & 255, x & 255) / 255.)\n\nvec3 color(float r, float aa) {\n    r = fract(r);\n    float mix0 = smoothstep(-aa, aa, r - 0.125);\n    float mix1 = smoothstep(-aa, aa, r - 0.375);\n    float mix2 = smoothstep(-aa, aa, r - 0.625);\n    float mix3 = smoothstep(-aa, aa, r - 0.875);\n    \n    vec3 color0 = HEX(0x009BE8);\n    vec3 color2 = HEX(0xfff100);\n    vec3 color1 = HEX(0xEB0072);\n    vec3 color3 = HEX(0x010a31);\n    \n    return (\n        color0 * (mix0 - mix1) +\n        color1 * (mix1 - mix2) +\n        color2 * (mix2 - mix3) +\n        color3 * (mix3 - mix0 + 1.)\n    );\n}\n\n#define ZIGZAG(x) 0.5 - abs(1. - 2. * fract(x))\nvec2 anglevec(float x){return vec2(cos(x), sin(x));}\nvec2 tiled(vec2 uv){return -1. + mod(uv + 1., 2.);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = fract(iTime / 4.);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2. * fragCoord - iResolution.xy)/length(iResolution);\n    uv *= .25;\n    float dist = log2(length(uv));\n    float angle = atan(uv.y, uv.x) / 2. / PI;\n    \n    // Bg checkerboard\n    float distzag = ZIGZAG(dist * 3. + t * 2.);\n    float distaa = fwidth(dist) * .75;\n    const float ANGLEFACT = 32.;\n    float anglezag = ZIGZAG(angle * ANGLEFACT + t * 1.);\n    float angleaa = ANGLEFACT * min(\n    fwidth(angle), fwidth(fract(angle + 0.5))\n    ) * .75;\n    float bgv = smoothstep(-distaa, distaa, distzag);\n    bgv = mix(bgv, 1.-bgv, smoothstep(-angleaa, angleaa, anglezag));\n    vec3 col = mix(\n        vec3(1), HEX(0xC4D7F0),\n        bgv\n    );\n\n    // Time varying pixel color\n    const float LAYERS = 4.;\n    const float ZOOMSCALE = 16.;\n    for (float layer = LAYERS; layer >= 0.; layer--) {\n        // circle\n        float z = layer + 1. - t;\n        vec2 uvScaled = uv * z * ZOOMSCALE;\n        vec2 uvTiled = tiled(uvScaled);\n        float lenScaled = length(uvTiled);\n        float scaledaa = min(0.125, fwidth(lenScaled));\n        float alpha = - smoothstep(\n            -scaledaa, scaledaa, lenScaled - 0.8\n        ) + smoothstep(\n            -scaledaa, scaledaa, lenScaled - 0.35\n        );\n        // far fade in\n        alpha *= smoothstep(LAYERS + 0.5, LAYERS - 0.5, z);\n        // near fade out\n        alpha *= smoothstep(0., 0.05, z);\n        float colorx = 0.625 + 0.125 * uvScaled.x - 0.875 * uvScaled.y;\n        col = mix(col, color(colorx, fwidth(colorx)*.75), alpha);\n        \n        // square\n        z = layer + 0.5 - t;\n        uvScaled = uv * z * ZOOMSCALE;\n        uvTiled = tiled(uvScaled);\n        float rotAngle = PI * 0.5 * t + (z * 0.8);\n        float x = dot(uvTiled, anglevec(rotAngle));\n        float y = dot(uvTiled, anglevec(PI * 0.5 + rotAngle));\n        scaledaa = min(0.125, min(fwidth(x), fwidth(y)));\n        const float sqOut = 0.7;\n        const float sqIn = 0.3;\n        float alphaOut = min(\n            smoothstep(\n                -scaledaa, scaledaa,\n                sqOut - abs(x)\n            ), smoothstep(\n                -scaledaa, scaledaa,\n                sqOut - abs(y)\n            )\n        );\n        alpha = alphaOut - min(\n            smoothstep(\n                -scaledaa, scaledaa,\n                sqIn - abs(x)\n            ), smoothstep(\n                -scaledaa, scaledaa,\n                sqIn - abs(y)\n            )\n        );\n        // far fade in\n        alpha *= smoothstep(LAYERS + 0.5, LAYERS - 0.5, z);\n        // near fade out\n        alpha *= smoothstep(0., 0.05, z);\n        colorx = 0.125 + 0.125 * uvScaled.x - 0.875 * uvScaled.y;\n        col = mix(col, color(colorx, fwidth(colorx)*.75), alpha);\n        \n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}