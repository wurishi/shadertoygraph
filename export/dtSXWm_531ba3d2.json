{"ver":"0.1","info":{"id":"dtSXWm","date":"1676156546","viewed":164,"name":"For the Win","username":"Carandiru","description":"C programming language\n\nFTW (For the Win)\n","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["logo","c"],"hasliked":0,"parentid":"mtjSDD","parentname":"C# (programming language) logo"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// CC0: C (programming language) logo\n\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat hexagon(vec2 p, float r) {\n  const vec3 k = 0.5*vec3(-sqrt(3.0), 1.0, sqrt(4.0/3.0));\n  p = abs(p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y);\n}\n\nvec4 cftw(vec2 p, float aa) {\n  const float invgamma = 2.0;\n  \n  vec3 fade = (1.5 - smoothstep(vec3(0), vec3(1), vec3(1,3,2) * abs(sin(iTime * 1.5)))) * 0.5 + 0.5;\n  vec3 bgcol0 = pow(fade.x * vec3(147.0, 1.0, 69.0)/255.0, vec3(invgamma));\n  vec3 bgcol1 = pow(fade.y * vec3(83.0, 1.0, 39.0)/255.0, vec3(invgamma));\n  vec3 bgcol2 = pow(fade.z * vec3(109.0, 1.0, 51.0)/255.0, vec3(invgamma));\n  const vec3 white  = vec3(1.0); \n\n  vec2 pp = p;\n  pp.y = abs(pp.y);\n\n  float l   = length(p);\n  float hd  = hexagon(p.yx, 0.4)-0.1;\n  float fsd = dot(normalize(vec2(-1.0, sqrt(3.0))), p);\n  float rsd = dot(normalize(vec2(-1.0, -sqrt(3.0))), p);\n  float cd  = abs(l-0.25)-0.08;\n  float sd  = max(fsd, rsd);\n  //float bd  = abs(l-0.25)-0.03;\n  //bd        = abs(bd) - 0.0125;\n  //float dd  = dot(normalize(vec2(-1.0, 2.9)), pp);\n  //bd        = max(bd, dd);\n  //float ld  = dot(normalize(vec2(-1.0, 7.0)), pp);\n  //ld        = abs(ld) - 0.0125;\n  //bd        = min(bd, ld);\n  //float od  = abs(l-0.25)-0.0666;\n  //bd        = max(bd, od);\n    \n  vec3 bgcol = mix(bgcol0, bgcol1, smoothstep(aa, -aa, fsd));\n  \n  vec3 col = vec3(0.0);\n  float t = smoothstep(aa, -aa, hd);\n  \n  col = bgcol;\n  col = mix(col, white  , smoothstep(aa, -aa, cd));\n  col = mix(col, bgcol2 , smoothstep(aa, -aa, sd));\n  //col = mix(col, white  , smoothstep(aa, -aa, bd));\n\n  return vec4(col, t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/iResolution.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = vec3(0.0);\n  vec4 cc = cftw(p, 2.0/RESOLUTION.y);\n  col = mix(col, cc.xyz, cc.w);\n  col = sqrt(col);\n  fragColor = vec4(col, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}