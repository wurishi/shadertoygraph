{"ver":"0.1","info":{"id":"wlc3DS","date":"1577403548","viewed":190,"name":"2d something noise","username":"alarch","description":"2d noise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noise1(int x, int y)\n{\n    int n;\n    n = x+y*57;\n    x = (n<<13) ^ n;\n    return ( 1.0 - float( (n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);\n \n}\n\nfloat smoothedNoise2D(int x, int y)\n{\n    int multiplier = 1;\n    float corners, sides, center;\n    corners = ( noise1(int(x-multiplier), int(y-multiplier))+noise1(int(x+multiplier), int(y-multiplier))+noise1(int(x-multiplier), int(y+multiplier))+noise1(int(x+multiplier), int(y+multiplier)) ) / 16.0;\n    sides   = ( noise1(int(x-multiplier), int(y))+noise1(int(x+multiplier), int(y))+noise1(int(x), int(y-multiplier))+noise1(int(x), int(y+multiplier)) ) /  8.0;\n    center  =  noise1(int(x), int(y)) / 4.0;\n    return corners + sides + center;\n}\n\n\nfloat interpol(float a, float b, float x)\n{\n    float ft, f;\n    ft = x * 3.1415927;\n    f = (1.0 - cos(ft)) * 0.5;\n    return  a*(1.0-f) + b*f;\n}\n\nfloat interpolatedNoise(float x,float y)\n{\n      float fractional_X,fractional_Y,v1,v2,v3,v4,i1,i2;\n      int integer_X,integer_Y;\n   \n      integer_X    = int(x);\n      fractional_X = x - float(integer_X);\n \n      integer_Y    = int(y);\n      fractional_Y = y - float(integer_Y);\n \n      v1 = smoothedNoise2D(integer_X,     integer_Y);\n      v2 = smoothedNoise2D(integer_X + 1, integer_Y);\n      v3 = smoothedNoise2D(integer_X,     integer_Y + 1);\n      v4 = smoothedNoise2D(integer_X + 1, integer_Y + 1);\n \n      i1 = interpol(v1 , v2 , fractional_X);\n      i2 = interpol(v3 , v4 , fractional_X);\n \n      return interpol(i1 , i2 , fractional_Y);\n \n}\n\nfloat fbmNoise(float x,float y)\n{\n    x = x*1000.0;\n    y = y*1000.0;\n    float total,p, frequency,amplitude;\n    int i,n;\n    total = 0.0;\n    p = 2.0;\n    n = 8;\n \n \n    for(i=0; i<=n;i++)\n    {\n        frequency = pow(2.0,float(i));    \n        amplitude = sin(iTime)+p/(pow(2.0,float(i)));\n        total = total+interpolatedNoise(x*frequency/20.0,y*frequency/20.0)*amplitude;\n    }\n    return total;\n}\n\n// END lesson04\n\nprecision lowp    float;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv;\n\n    // same as vec2 uv = fragCoord/iResolution.xy;\n    uv.x = fragCoord.x/iResolution.x;\n    uv.y = fragCoord.y/iResolution.y;\n    \n    uv.x -= 0.5;\n    uv.y -= 0.5;\n        \n    // set Image aspect to square or you will get an oval\n    uv *= iResolution.xy  / iResolution.y;\n    // same as vec2 uv = fragCoord/iResolution.xy;\n    \n   \n    int rngSeed = int(fragCoord.x) + int(fragCoord.y) * int(iResolution.x);\n    float col2;\n    \n    col2 = fbmNoise(uv.x+1.0, uv.y+1.0); // add 1.0 to coords, since perlin func only seems to work with positive floats\n       \n    fragColor = vec4(0.0, col2, 0.0, 1.0);\n}\t\n","name":"Image","description":"","type":"image"}]}