{"ver":"0.1","info":{"id":"l3c3RB","date":"1729882811","viewed":124,"name":"Tree with water","username":"capslpop","description":"tree and water","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["phong","lighting","voxel","pervoxel"],"hasliked":0,"parentid":"MfGSWd","parentname":"Fluid sim 3D"},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 screenPos = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n\tvec3 cameraDir = vec3(0.0, 0.0, 0.8);\n\tvec3 cameraPlaneU = vec3(1.0, 0.0, 0.0);\n\tvec3 cameraPlaneV = vec3(0.0, 1.0, 0.0) * iResolution.y / iResolution.x;\n\tvec3 rayDir = cameraDir + screenPos.x * cameraPlaneU + screenPos.y * cameraPlaneV;\n    //2.0 * sin(iTime * 2.7)\n\tvec3 rayPos = vec3(0.0, 0.0, -volumeSize);\n\t\t\n\trayPos.xz = rotate2d(rayPos.xz, iTime); //(iMouse.x/iResolution.x)*14.0);\n\trayDir.xz = rotate2d(rayDir.xz, iTime); //(iMouse.x/iResolution.x)*14.0);\n\t\n    rayPos += vec3(volumeSize)/2.0;\n    \n\tivec3 mapPos = ivec3(floor(rayPos + 0.));\n\n\tvec3 deltaDist = abs(vec3(length(rayDir)) / rayDir);\n\t\n\tivec3 rayStep = ivec3(sign(rayDir));\n\n\tvec3 sideDist = (sign(rayDir) * (vec3(mapPos) - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; \n\t\n\tbvec3 mask;\n\n\tvec4 color;\n\n    voxel vox;\n    \n\tfor (int i = 0; i < MAX_RAY_STEPS; i++) \n    {\n        vox = getVoxel(iChannel0, ivec3(mapPos), ivec2(iChannelResolution[0].xy));\n        \n        // todo: make it so when the ray leaves the volume it breaks the loop\n        if (all(lessThan(mapPos, volumeSize)) && all(greaterThan(mapPos, ivec3(0.0))))\n        {\n            if (vox.color.r > 0.001)\n            {\n                //fragColor = vec4(vox.normal/2.0 + 0.5, 1.0); // vox.color;\n                fragColor = (vec4(vox.color, 1.0) - pusedoRand3D(vec3(mapPos)) / 3.0) * vec4(vox.light, 1.0) * 3.5; // * vox.light * 3.5 + color;\n                return;\n            } else\n            {\n                color.rgb += vox.light.rgb * 0.003;\n            }\n        }\n\n        mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\t\t\n\t\t\n\t\tsideDist += vec3(mask) * deltaDist;\n\t\tmapPos += ivec3(vec3(mask)) * rayStep;\n\t}\n\n\tfragColor.rgb = color.rgb + texture( iChannel1, rayDir ).rgb;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const int MAX_RAY_STEPS = 256*2;\n\n#define range(i,a,b) for(int i = a; i <= b; i++)\n\n// size of the volume -- cant be bigger than the max about of pixels in the buffer\n// I set it manually for simplicity\nconst ivec3 volumeSize = ivec3(64);\n\n#define fluid_rho 0.5\nfloat Pf(float rho)\n{\n    return 0.10*rho*(rho/fluid_rho - 1.0);\n}\n\nfloat G(vec3 x)\n{\n    float norm_squared = dot(x, x);\n    float result = 0.0;\n    float radius_squared = 1.5; // assuming a unit radius for the kernel\n    if (norm_squared < radius_squared)\n    {\n        result = 1.0 - norm_squared / radius_squared;\n    }\n    return mix(result, exp(-norm_squared), 0.65);\n}\n\n// from Unorm Vec4 Packing \nhighp uint packUnorm(mediump uvec4 a) {\n    return uint( (a.x << 24)\n               | (a.y << 16)\n               | (a.z << 8 )\n               | (a.w << 0 ) ); }\nmediump uvec4 unpackUnorm(highp uint a) {\n    return uvec4( (a & 0xFF000000u) >> 24\n                , (a & 0x00FF0000u) >> 16\n                , (a & 0x0000FF00u) >> 8\n                , (a & 0x000000FFu) >> 0   ); }\n// Pack and unpack 4 floats in [0;1] <-> float (containing uint32)\nfloat packUnorm4x8(  vec4  a) { return uintBitsToFloat(packUnorm(uvec4(round(clamp(a, 0., 1.)*255.)))); }\nvec4  unpackUnorm4x8(float a) { return vec4(unpackUnorm(floatBitsToUint(a))) / 255.; }\n\n// Pack and unpack 4 floats in [-1;1] <-> float (containing uint32)\nfloat packSnorm4x8(  vec4  a) { return uintBitsToFloat(packUnorm(uvec4(round(clamp(a, -1., 1.)*127.5+127.5)))); }\nvec4  unpackSnorm4x8(float a) { return clamp((vec4(unpackUnorm(floatBitsToUint(a))) - 127.5) / 127.5, -1., 1.); }\n\n// from paint streams\nuint pack(vec2 x)\n{\n    x = 65534.0*clamp(0.5*x+0.5, 0., 1.);\n    return uint(round(x.x)) + 65535u*uint(round(x.y));\n}\n\nvec2 unpack(uint a)\n{\n    vec2 x = vec2(a%65535u, a/65535u);\n    return clamp(x/65534.0, 0.,1.)*2.0 - 1.0;\n}\n\nvec2 decode(float x)\n{\n    uint X = floatBitsToUint(x);\n    return unpack(X); \n}\n\nfloat encode(vec2 x)\n{\n    uint X = pack(x);\n    return uintBitsToFloat(X); \n}\n\nstruct voxel\n{\n    // color of the voxel\n    vec3 color;\n    \n    // light color\n    vec3 light;\n    \n    float height;\n    \n    vec3 velocity;\n    \n    vec3 normal;\n    \n    float material;\n};\n\n// first two positions are xy on buffer then which face of the cube map is z\nvec4 getPos(sampler2D buffer, ivec3 pos, ivec2 res)\n{\n    int c = pos.x + volumeSize.y * pos.y + volumeSize.z * volumeSize.y * pos.z;\n    \n    ivec2 d = ivec2(c%int(res.x), c/int(res.x));\n    \n    return texelFetch(buffer, d, 0);\n    }\n\n// this intakes the fragment position and outputs the correct voxel coord\nvec3 getPos(vec2 fragCoord, ivec2 res)\n{\n    int c = int(fragCoord.x) + int(fragCoord.y) * res.x;\n    \n    vec3 pos = vec3(c%volumeSize.x, (c/volumeSize.x)%volumeSize.y, c/(volumeSize.x*volumeSize.y));\n\n    return pos;\n}\n\nvoxel getVoxel(sampler2D buffer, ivec3 pos, ivec2 res)\n{\n    vec4 info = getPos(buffer, pos, res);\n\n    voxel v;\n    vec4 cx = unpackUnorm4x8(info.r);\n    v.color = cx.xyz;\n    vec4 ly = unpackUnorm4x8(info.g);\n    v.light = ly.xyz;\n    vec4 vz = unpackSnorm4x8(info.b);\n    v.velocity = vz.xyz;\n    \n    v.normal = vec3(cx.z, ly.z, vz.z);\n    \n    vec2 hm = decode(info.a);\n    v.height = hm.x;\n    v.material = hm.y;\n    \n    return v;\n}\n\nvec4 saveVoxel(voxel v)\n{\n    vec4 info;\n    info.r = packUnorm4x8(vec4(v.color, v.normal.x));\n    info.g = packUnorm4x8(vec4(v.light, v.normal.y));\n    info.b = packSnorm4x8(vec4(v.velocity, v.normal.z));\n    info.a = encode(vec2(v.height, v.material));\n    \n    return info;\n}\n\n\nfloat getNext(vec3 posOne, vec3 posTwo, voxel p, float s)\n{\n    // get height contribution with no slope\n    vec3 dif = posTwo - posOne;\n    \n    // make sure that the function does not fall out of bounds\n    vec3 n = min(abs(dif), 1.0);\n    \n    vec3 then = (2.0 * n - 3.0) * n * n + 1.0;\n    \n    float height = then.x*then.y*then.z*p.height;\n    \n    // boundries\n    float numCells = 27.0;\n    \n    // corners\n    if (posOne.x == 2.0 && posOne.y == 2.0 && posOne.z == 2.0)\n    {\n        numCells = 8.0;\n    }\n    else if (posOne.x == float(volumeSize.x) - 2.0 && posOne.y == 2.0 && posOne.z == 2.0)\n    {\n        numCells = 8.0;\n    }\n    else if (posOne.x == 2.0 && posOne.y == 2.0 && posOne.z == float(volumeSize.x) - 2.0)\n    {\n        numCells = 8.0;\n    }\n    else if (posOne.x == float(volumeSize.x) - 2.0 && posOne.y == 2.0 && posOne.z == float(volumeSize.x) - 2.0)\n    {\n        numCells = 8.0;\n    }\n    \n    // edges\n    else if (posOne.x == 2.0 && posOne.y == 2.0)\n    {\n        numCells = 12.0;\n    }\n    else if (posOne.z == 2.0 && posOne.y == 2.0)\n    {\n        numCells = 12.0;\n    }\n    else if (posOne.x == float(volumeSize.x) - 2.0 && posOne.y == 2.0)\n    {\n        numCells = 12.0;\n    }\n    else if (posOne.z == float(volumeSize.z) - 2.0 && posOne.y == 2.0)\n    {\n        numCells = 12.0;\n    }\n    \n    // sides\n    else if (posOne.y == 2.0)\n    {\n        numCells = 18.0;\n    }\n    else if (posOne.x == 2.0)\n    {\n        numCells = 18.0;\n    }\n    else if (posOne.z == 2.0)\n    {\n        numCells = 18.0;\n    }\n    else if (posOne.x == float(volumeSize.x) - 2.0)\n    {\n        numCells = 18.0;\n    }\n    else if (posOne.z == float(volumeSize.x) - 2.0)\n    {\n        numCells = 18.0;\n    }\n    \n    // remvove extra fluid out of bounds:\n    if (posOne.y < 2.0)\n    {\n        return 0.0;\n    }    \n    if (posOne.x < 2.0)\n    {\n        return 0.0;\n    }\n    if (posOne.z < 2.0)\n    {\n        return 0.0;\n    }\n    if (posOne.x > float(volumeSize.x) - 2.0)\n    {\n        return 0.0;\n    }\n    if (posOne.z > float(volumeSize.z) - 2.0)\n    {\n        return 0.0;\n    }\n    \n    return mix(height, p.height / numCells, s);\n}\n\nvec2 rotate2d(vec2 v, float a) {\n\tfloat sinA = sin(a);\n\tfloat cosA = cos(a);\n\treturn vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA);\t\n}\n\n\n\nfloat pusedoRand3D(vec3 pos)\n{\n return fract(sin(pos.x * 12.9898 + pos.y * 78.233 + pos.z * 48.752) * 43758.5453);\n}\n\nfloat pusedoRand2D(vec2 pos)\n{\n return fract(sin(pos.x * 12.9898 + pos.y * 78.233) * 43758.5453);\n}\n\nfloat pusedoRand1D(float pos)\n{\n return fract(sin(pos * 12.9898) * 43758.5453);\n}\n\n\nfloat lerp(vec2 pos, float t)\n{\n return pos.x + t*(pos.y - pos.x);\n}\n\nfloat fade(float t)\n{\n return ((6.0*t - 15.0)*t + 10.0)*t*t*t;\n}\n\nfloat getMtn(vec2 pos, float level, float offset)\n{\n float cornerOne    = pusedoRand2D(floor(pos / level));\n float cornerTwo    = pusedoRand2D(floor(vec2(pos.x + level, pos.y) / level));\n float cornerThree  = pusedoRand2D(floor(vec2(pos.x, pos.y + level) / level));\n float cornerFour   = pusedoRand2D(floor((pos + level) / level));\n\n vec2 cut = mod(pos, level) / level;\n\n vec2 fade = vec2(fade(cut.x), fade(cut.y));\n \n float sideOne = lerp(vec2(cornerOne, cornerTwo), fade.x);\n float sideTwo = lerp(vec2(cornerThree, cornerFour), fade.x);\n\n return lerp(vec2(sideOne, sideTwo), fade.y);\n}\n\nbool inCircle(vec3 cirPor, vec3 pos, float size)\n{\n float radius = distance(cirPor, pos);\n if (radius < size)\n {\n  return true;\n }\n return false;\n}\n\nbool sphere(vec3 posSph, vec3 pos, float size)\n{\n return distance(posSph, pos) < size && pusedoRand3D(pos) < 0.15;\n}\n\nbool cylinder(vec3 posCyl, vec3 pos, float height,  float radius, vec2 skew)\n{\n float offset = pos.y - posCyl.y;\n if (offset > height || offset < 0.0)\n {\n  return false;\n }\n return distance(posCyl.xz + offset * skew , pos.xz) < radius;\n}\n\nvec3 cylinderFall(vec3 posCyl, vec3 pos, float height,  float radius, vec2 skew, float fall)\n{\n float offset = pos.y - posCyl.y;\n if (offset > height || offset < 0.0)\n {\n  return vec3(0.0, 0.0, 0.0);\n }\n if (distance(posCyl.xz + offset * skew , pos.xz) < radius - offset * fall)\n {\n  if (fract(floor(pos.y * 1553.42 + sin(pos.x)/3.384  + pos.z/3.350) / 8.0) == 0.0)\n  {\n   return vec3(0.1, 0.0, 0.0);\n  }\n  else\n  {\n   return vec3(0.918,0.863,0.863);\n  }\n } \n return vec3(0.0);\n}\n\nvec3 treeBurch(int iterations, vec3 posTree, vec3 pos, vec2 size, vec2 skew)\n{\n vec3 pointOne = posTree;\n vec3 pointTwo = posTree;\n vec3 lastPoint = posTree;\n float isNeg = 1.0;\n float branchNum = 1.0;\n float heightO = 0.0;\n float heightT = 0.0;\n float lastH = size.y;\n vec2 oSkew = skew;\n\n vec3 voxel = cylinderFall(lastPoint, pos, size.y*3.0, size.x, skew/3.0, 0.0);\n if (voxel.r > 0.01)\n {\n  return voxel;\n }\n\n lastPoint = lastPoint + vec3(size.y * skew.x, size.y * 3.0,  size.y * skew.y);\n \n for (int i = 0; i < iterations; i++)\n {\n  skew.x = pusedoRand1D(branchNum) * (oSkew.x + 1.0 - float(i % 2));\n  skew.y = pusedoRand1D(branchNum + 1827.8) * (oSkew.y + float(i % 2));\n  heightO = pusedoRand1D(branchNum + 2263.2) * size.y + size.y/4.0; \n  heightT = pusedoRand1D(branchNum + 3864.3) * size.y + size.y/4.0; \n\n  voxel = cylinderFall(lastPoint, pos, heightO, size.x, skew, 0.1);\n  if (voxel.r > 0.01)\n  {\n   return voxel;\n  }\n  voxel = cylinderFall(lastPoint, pos, heightT, size.x, -skew, 0.1);\n  if (voxel.r > 0.01)\n  {\n   return voxel;\n  }\n\n  \n  pointOne = lastPoint + vec3( heightO * skew.x, heightO,  heightO * skew.y);\n  pointTwo = lastPoint + vec3(-heightT * skew.x, heightT, -heightT * skew.y);\n  size.x /= 1.3;\n  lastH /= 1.5;\n  \n  // todo: add another offset thing here\n  if (distance(pointOne, pos) >= distance(pointTwo, pos))\n  {\n   isNeg = -1.0;\n   branchNum += float(i);\n   lastH = heightT;\n   lastPoint = pointTwo;\n  } else\n  {\n   isNeg = 1.0;\n   branchNum *= float(i);\n   lastH = heightO;\n   lastPoint = pointOne;\n  }\n }\n if (sphere(lastPoint, pos, size.y*2.0))\n {\n  return vec3(0.506,0.757,0.200);\n }\n return vec3(0.0, 0.0, 0.0);\n}\n\nvec3 getVoxel(vec3 pos)\n{\n\n\n float treeSize = 80.0;\n vec2 warpPos = mod(pos.xz, treeSize);\n // here we get the height of the tree:\n float heighti = getMtn(treeSize/2.0 + pos.xz - mod(pos.xz, treeSize), 300.0, 0.0)*130.0;\n heighti += getMtn(pos.xz, 3000.0, 0.0)*1000.0;\n if (heighti > 100.0)\n {\n  vec3 tree = treeBurch(4, vec3(treeSize/2.0, heighti, treeSize/2.0), vec3(warpPos.x, pos.y, warpPos.y), vec2(3.0, 10.0 + 5.0 * pusedoRand2D(floor(pos.yz/treeSize))), vec2(0.2));\n  if (tree.r > 0.01)\n  {\n   return tree;\n  }\n }\n \n \n vec3 voxel = vec3(0.0);\n\n float height = getMtn(pos.xz, 300.0, 0.0)*130.0;\n height += getMtn(pos.xz, 3000.0, 0.0)*1000.0;\n\n if (height > 195.0)\n {\n  float grass = pusedoRand2D(pos.xz)*3.0;\n  height += grass;\n \n  if (pos.y <= floor(height) + 10.0 && pos.y >= floor(height) - 1.0)\n  {\n   voxel = vec3(0.400,0.612,0.310);\n   if (grass > 2.9)\n   {\n    voxel = vec3(1.000,0.945,0.361);\n   }\n  } else if (pos.y < height)\n  { \n   voxel = vec3(0.353,0.224,0.169);\n  }\n } else\n {\n  if(pos.y < height + 10.0)\n  {\n   voxel = vec3(0.875,0.784,0.467);\n  }\n  else if (pos.y < 180.0)\n  {\n   voxel = vec3(0.1, 0.0, 1.0);\n  }\n }\n\n return voxel;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// dave\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n// dave\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat sunRay(vec3 rayPos, vec3 rayDir)\n{\n    ivec3 mapPos = ivec3(floor(rayPos));\n\n\tvec3 deltaDist = abs(vec3(length(rayDir)) / rayDir);\n\t\n\tivec3 rayStep = ivec3(sign(rayDir));\n\n\tvec3 sideDist = (sign(rayDir) * (vec3(mapPos) - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; \n\t\n\tbvec3 mask;\n\n\tvec3 color;\n\n    voxel vox;\n    \n    // step out of yourself\n    mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    sideDist += vec3(mask) * deltaDist;\n    mapPos += ivec3(vec3(mask)) * rayStep;\n    \n    //mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    //sideDist += vec3(mask) * deltaDist;\n    //mapPos += ivec3(vec3(mask)) * rayStep;\n    //mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    //sideDist += vec3(mask) * deltaDist;\n    //mapPos += ivec3(vec3(mask)) * rayStep;\n    //mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    //sideDist += vec3(mask) * deltaDist;\n    //mapPos += ivec3(vec3(mask)) * rayStep;\n    \n    float opacity = 0.0;\n    \n\tfor (int i = 0; i < MAX_RAY_STEPS; i++) \n    {\n        vox = getVoxel(iChannel0, ivec3(mapPos), ivec2(iChannelResolution[0].xy));\n        if (any(greaterThanEqual(mapPos, volumeSize)) || any(lessThanEqual(mapPos, ivec3(0.0))))\n        {\n            return opacity;\n        }\n        if (vox.color.r > 0.01)\n        {\n            opacity += 0.05;\n            if (opacity > 0.1)\n            {\n                return opacity;\n            }\n        }\n\n        mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\t\t\n\t\t\n\t\tsideDist += vec3(mask) * deltaDist;\n\t\tmapPos += ivec3(vec3(mask)) * rayStep;\n\t}\n    \n    return opacity;\n}\n\n\nvec3 rayCast(vec3 rayPos, vec3 rayDir)\n{\n    ivec3 mapPos = ivec3(floor(rayPos));\n\n\tvec3 deltaDist = abs(vec3(length(rayDir)) / rayDir);\n\t\n\tivec3 rayStep = ivec3(sign(rayDir));\n\n\tvec3 sideDist = (sign(rayDir) * (vec3(mapPos) - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; \n\t\n\tbvec3 mask;\n\n\tvec3 color;\n\n    voxel vox;\n    \n    // step out of yourself\n    mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    sideDist += vec3(mask) * deltaDist;\n    mapPos += ivec3(vec3(mask)) * rayStep;\n    mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    sideDist += vec3(mask) * deltaDist;\n    mapPos += ivec3(vec3(mask)) * rayStep;\n    mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    sideDist += vec3(mask) * deltaDist;\n    mapPos += ivec3(vec3(mask)) * rayStep;\n    \n\tfor (int i = 0; i < MAX_RAY_STEPS; i++) \n    {\n        vox = getVoxel(iChannel0, ivec3(mapPos), ivec2(iChannelResolution[0].xy));\n        if (any(greaterThanEqual(mapPos, volumeSize)) || any(lessThanEqual(mapPos, ivec3(0.0))))\n        {\n            break;\n        }\n        if (vox.color.r > 0.01)\n        {\n            return clamp(vec3(vox.color.rgb * vox.light.rgb * 2.0) + color, 0.0, 1.0);\n        } else\n        {\n            // volumetric lighting \n            //color.rgb += vox.light.rgb * 0.003;\n        }\n\n        mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\t\t\n\t\t\n\t\tsideDist += vec3(mask) * deltaDist;\n\t\tmapPos += ivec3(vec3(mask)) * rayStep;\n\t}\n    \n    return clamp(texture( iChannel1, rayDir).rgb + color, 0.0, 1.0);\n}\n\n\nvec3 calculatePhong(vec3 normal, vec3 lightDir, vec3 viewDir, vec3 ambientColor, vec3 diffuseColor, vec3 specularColor, float shininess) {\n    // Normalize vectors\n    vec3 N = normalize(normal);\n    vec3 L = normalize(lightDir);\n    vec3 V = normalize(viewDir);\n\n    // Calculate reflection vector\n    vec3 R = reflect(-L, N);\n\n    // Ambient component\n    vec3 ambient = ambientColor;\n\n    // Diffuse component\n    float diffuseIntensity = max(dot(N, L), 0.0);\n    vec3 diffuse = diffuseIntensity * diffuseColor;\n\n    // Specular component\n    float specularIntensity = pow(max(dot(R, V), 0.0), shininess);\n    vec3 specular = specularIntensity * specularColor;\n\n    return ambient + diffuse + specular;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 pos = getPos(fragCoord, ivec2(iResolution.xy));\n    \n    voxel pCenter = getVoxel(iChannel0, ivec3(pos), ivec2(iResolution.xy));\n \n    voxel p;\n    p.height = 0.0;\n    p.velocity = vec3(0.0);\n    p.color = vec3(0.0);\n    \n    p.material = pCenter.material;\n    \n    vec3 stuf = getVoxel(pos + vec3(800.0, 190.0, 0.0));\n    \n    if (stuf.r > 0.01)\n    {\n        p.height = 2.0;\n        p.material = 1.0;\n        p.color = stuf;\n    }\n    \n    vec3 rayPos = vec3(0.0, 0.0, -volumeSize);\t\n\trayPos.xz = rotate2d(rayPos.xz, iTime); //(iMouse.x/iResolution.x)*14.0);\n\trayPos += vec3(volumeSize)/2.0;\n    \n    vec3 rayDir = normalize(pos - rayPos);\n    \n    // for calculating the forces\n    vec3 F = vec3(0.0);\n    vec4 avgV = vec4(0.0);\n    \n    float nextPoint = 0.0;\n    range(i, -1, 1) range(j, -1, 1) range(k, -1, 1)\n    {\n        ivec3 tpos = ivec3(pos) + ivec3(i, j, k);\n        \n        voxel p_ = getVoxel(iChannel0, ivec3(tpos), ivec2(iResolution.xy));\n        \n        // smoothing amount\n        // subtract by an amount here! Important makes the fluid more particlly   \n        float s = clamp((p_.height)/5.0, 0.0, 0.8);\n        \n        // pos one is the new center point pos\n        // pos two is the point that will add to this one\n        nextPoint = getNext(vec3(pos), vec3(tpos) + p_.velocity, p_, s);\n        \n        // multipy new velocity by the mass that each cell contribues\n        if (int(p_.material) != 1)\n        {\n            p.height += nextPoint;\n        }\n        p.velocity += p_.velocity * nextPoint;\n        \n        // now calculate forces on fluid       \n        vec3 dx = vec3(pos) - (vec3(tpos) + p_.velocity); \n        float avgP = 0.5*p_.height*(Pf(pCenter.height) + Pf(p_.height));\n        float Gdx = G(dx);\n        F -= 0.5*Gdx*avgP*dx;\n        avgV += p_.height*Gdx*vec4(p_.velocity,1.);\n    }\n    \n    // normalize the velocity baced on mass\n    if (p.height > 0.0)\n    {\n        p.velocity = p.velocity / p.height;\n    }\n    \n    avgV.xyz /= avgV.w*2.0;\n\n    //viscosity\n    F -= 0.0*p.height*(avgV.xyz - p.velocity);\n    \n    // force from mouse\n    //if (distance(fragCoord, vec2(iMouse.xy/(zooming))) < 20.0 && iMouse.z > 1.0)\n    //{\n    //    vec2 newF = (fragCoord - vec2(iMouse.xy/(zooming))) / 1000.0;\n    //    \n    //    F.x += -newF.y + newF.x/1.0;\n    //    F.y += newF.x + newF.y/1.0;\n    //    \n    //    p.height += 0.01;\n    //}\n    \n    p.velocity -= (F/p.height) * 2.0 + vec3(0.0, 0.005, 0.0);\n    \n    p.velocity += (hash32(fragCoord + iTime/64.0) - 0.5) / 12.0;\n    \n    if (distance(pos, vec3(5.0, 20.0, volumeSize.x)/2.0) < 8.0) // && iMouse.z > 1.0)\n    {\n        p.height = 0.7;\n        p.velocity = vec3(0.0, 0.5, 0.0);\n    }\n    \n    if (iMouse.z > 0.1)\n    {\n        p.velocity += vec3(0.001, 0.0, 0.0);\n    }\n    \n    if (p.height > 0.01)\n    {\n        p.height + 1.5;\n    }\n    \n    // make sure that the velocity does not exceed the limit\n    p.velocity = clamp(p.velocity, -2.0, 2.0); // sometimes it is infinite\n    float vel = length(p.velocity);\n    p.velocity /= (vel > 1.0)?vel:1.0;\n    \n        vec3 sunDirection = normalize(vec3(0.5, 0.5, 0.5)); // Example direction to the sun\n    sunDirection.xy = rotate2d(sunDirection.xy,iMouse.y*0.03);\n    \n    vec3 ambientColor = vec3(0.5); // Example ambient light color\n    vec3 diffuseColor = vec3(0.05); // Example diffuse light color\n    vec3 specularColor = vec3(0.1); // Example specular light color\n    float shininess = 35.0; // Example shininess factor\n    \n    if (p.color.r > 0.1)\n    {\n        p.light.rgb = calculatePhong(p.normal, sunDirection, -rayDir, ambientColor, diffuseColor, specularColor, 32.0);\n        p.light.rgb -= sunRay(pos, sunDirection);\n    } else\n    {\n        float inSun = sunRay(pos, sunDirection);\n        if (inSun <= 0.1)\n        {\n            p.light = vec3(1.0, 1.0, 1.0);\n        } else\n        {\n            p.light.rgb = vec3(0.5);\n        }\n    }\n    \n    p.light.rgb -= sunRay(pos, sunDirection);\n    \n    // boundry conditions\n    if (pos.y <= 2.0)\n    {\n        p.velocity.y = 0.0;\n    }\n    if (pos.x <= 2.0)\n    {\n        p.velocity.x = 0.0;\n    }\n    if (pos.z <= 2.0)\n    {\n        p.velocity.z = 0.0;\n    }\n    if (pos.x >= float(volumeSize.x) - 2.0)\n    {\n        p.velocity.x = 0.0;\n    }\n    if (pos.z >= float(volumeSize.z) - 2.0)\n    {\n        p.velocity.z = 0.0;\n    }\n    \n    if (p.height > 0.05 && int(p.material) != 1)\n    {\n        p.color.rgb = abs((1.0 - p.height*1.5 + length(p.velocity)*2.0 + 0.3)*vec3(0.329,0.447,0.573));\n        p.color.r += 0.002;\n    }\n    \n    fragColor = saveVoxel(p);\n}","name":"Buffer A","description":"","type":"buffer"}]}