{"ver":"0.1","info":{"id":"Ws2GzV","date":"1576702203","viewed":138,"name":"_lines_","username":"monada","description":"  ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["lines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 rotate2( vec2 p, float a )\n{\n    float c = cos( a );\n    float s = sin( a );\n    \n    return mat2(\n        c, -s,\n        s,  c ) * p;\n}\n\nfloat hash( float x )\n{\n    return fract( sin( x * 1230000.0 ) );\n}\n\nfloat hash2( vec2 p )\n{\n    return fract(\n        sin( \n            dot( p, vec2(12.9898,78.233) )\n        ) * 1242424.0\n    );\n}\n\nfloat random(in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    u = smoothstep(0.,1.,f);\n   \n //   u = f;\n    \n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat noise2( vec2 st )\n{\n   vec2 p = texture( iChannel0, st ).xy;\n   return noise( st + p * 0.1 );\n}\n\n\n\nvec3 step1( vec2 p, vec2 uv, float iTime, float m )\n{\n      \n    float v = abs( p.y + 0.2 * noise2( p * m + vec2( iTime * 1.1, 0.0 ) ) );\n    v = pow( v, 0.1 );\n    \n   // v *= noise( p * 4.0 );\n    \n    v = 1.0 - v;\n //   \n    vec3 col = vec3( v );\n \n    col *=  vec3( 2.4, 2.1, 2.2 ); //( hsv2rgb( vec3(  sin( iTime ) / PI , 0.5, 0.5 ) ) );\n   // col *= 2.8;\n    \n   \n  //  col = col * col * col * 2.0 - col * col * 3.0;\n    col = smoothstep( vec3( 0.0 ), vec3( 1.0 ), col );\n    col = pow( col, vec3( 1.4 ) );\n    col *= hsv2rgb( vec3(  sin( iTime + uv.x ) / PI , 0.5, 0.5 ) );\n    col *= 2.0;\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = 2.0 * uv - 1.0;\n    \n    vec3 col = step1( p, uv, iTime, 2.0 );\n    col += step1( rotate2( p - vec2( 0.0, 0.1 ), 0.32 ), uv, iTime + 50.0, 2.0 );\n    col += step1( rotate2( p - vec2( 0.0, -0.1 ), -0.32 ), uv, iTime + 100.0, 2.0 );\n    \n  //  col = pow( col, vec3( 0.2  ) );\n  //  col *= 1.4;\n    \n    fragColor = vec4(col,1.0);\n}\n\n/*\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = 2.0 * uv - 1.0;\n    \n    p = rotate2( p, pow( length( p ), 2.0 ) * PI * sin( length( p ) ) );\n    p *= ( 0.5 + 0.5 * sin( iTime ) );\n    float v = abs( p.y * sin( p.y * p.x * ( iTime * 0.946 ) ) );\n    v = pow( v, 0.1 );\n\n    v = 1.0 - v;\n //   \n    vec3 col = vec3( v );\n    \n  //  col *=  ( hsv2rgb( vec3( ( uv.x + mod( iTime, 10.0 ) ) / 3.1415, 0.5, 0.5 ) ) );\n    col *=  ( hsv2rgb( vec3( length( p ), 0.5, 0.5 ) ) );\n    col *= 8.0;\n    \n    col = pow( col, vec3( 1.4 ) );\n  //  col = col * col * col - col * col;\n    \n    \n  //  col = hsv2rgb( vec3( sin( iTime ), 0.5, 0.5 ) );\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n*/","name":"Image","description":"","type":"image"}]}