{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Twilight shader 1.2 by SifakaMon (at gmail)\n//\n// Recreation of the Twilight SGI desktop backdrop\n// originally written in Iris gl by Howard Look\n// Based on the original gl sources from SGI and inspired from\n// and borrowing the random generator from Starfield01\n// <https://www.shadertoy.com/view/Md2SR3> by xaot88\n\n// Changelog:\n// 1.0 15 Feb 2015 - Mostly captured original Twilight look\n// 1.1 19 Feb 2015 - Added dithering and colored star options, tweaked Hash\n// 1.2 20 Feb 2015 - Added animation (slowly gets darker, almost 100% night, cycles back)\n\nconst vec3 orange = vec3(1.0, 72.0 / 255.0, 0.0);\nconst vec3 blueish = vec3(0.0, 110.0/255.0, 189.0/255.0);\nconst vec3 black = vec3(0.0, 0.0, 0.0);\nconst vec3 white = vec3(1.0, 1.0, 1.0);\n\n// Point at which the orange horizon ends\nconst float TRANSITION = 0.2;\nconst float INVTRANSITION = 1.0 - TRANSITION * (1.0 - TRANSITION);\n\n// In the original shader expecting to be run at 1280x1024 or maybe as high as some 2K\n// resolution, the stars were 3 pixels wide at the maximum. Here I've made them 5 pixels\n// wide for todays displays which are usually closer to 4K, but you can make them smaller\n// for something closer to the original.  You may have to adjust the intensity along with\n// the starsize for better visibility.\nconst float STARSIZE = 5.;\nconst float INTENSITY = 60.;\n\n// Higher values (i.e., closer to one) yield a sparser starfield.\nconst float fThreshhold = 1.0 - INTENSITY / 10000.0;\n\n// Options that make the shader less like the original but perhaps more pleasing to the eye\n#define DO_DITHERING 1\n#define DO_STAR_COLOR 1\n#define DO_ANIMATION 1\n\n// The input, n, should have a magnitude in the approximate range [0, 100].\n// The output is pseudo-random, in the range [0,1].\nfloat Hash( float n )\n{\n\treturn fract( (cos(n) + sin(n / 23.0 + 1.45) + cos(n * n * n) ) * 415.926536);\n}\n\nfloat Noise2d( in vec2 x )\n{\n    float xhash = Hash( x.x * 37.0 );\n    float yhash = Hash( x.y * 57.0 ) ;\n    return fract( xhash + yhash );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    float fAspect = iResolution.y / iResolution.x;\n    vec2 vSamplePos = fragCoord.xy / iResolution.xy;\n    vSamplePos.x /= fAspect;\n\n    // Find our cell in a gridded noise function\n    \n    vec2 fStep = iResolution.xy / vec2(STARSIZE, STARSIZE * fAspect);\n    vec2 vLookup = floor(vSamplePos * fStep) / fStep;\n    float StarVal = Noise2d( vLookup );\n    float fRadius = distance(vec2(0.0), iResolution.xy) / 2.0;\n    \n    // Gradient Background\n    \n    float y = vSamplePos.y + 0.02;\n    \n    #if DO_ANIMATION\n    y -= cos(iTime / 31.41519) * 0.5 - 0.5;\n    #endif\n    \n    // On most systems I've run this shader, I get noticeable banding vertically, so take advantage\n    // of the noise calcuation used for the stars to do some stochastic blending/dithering\n    // The original probably had similar banding so if you want more pure SGI goodness, turn this off!\n    // Dithering is more pronounced at top of gradient since the transition is more gentle\n    #if DO_DITHERING\n    y += (Noise2d(vec2(StarVal, vSamplePos.x))) * 0.04 * y;\n    #endif\n    \n    vec3 vColor  = black; // mix(blueish, black, vSamplePos.y * (5.0 * TRANSITION));\n    vColor = mix(mix(orange, blueish, min(y / TRANSITION, 1.0)), black, min((y - TRANSITION) / INVTRANSITION, 1.0));\n\n    // The original version had purely white stars.\n    vec3 vStarColor = white;\n    \n    // This version has a red/orange/blue tint function I've written off the top of my head\n    #if DO_STAR_COLOR\n    float fShift = fract(StarVal * 10000.0) - 0.5;\n    float fShift2 = fract(StarVal * 100000.0) - 0.5;\n    vStarColor.r -= fShift;\n    vStarColor.g += (fShift + fShift2) / 2.0;\n    vStarColor.b += fShift;\n    vStarColor = mix(normalize(vStarColor), white, 0.5 + fShift2 / 2.0);\n\t#endif\n\n    if(StarVal > fThreshhold)\n    {\n        // Stars have a minimum visibility gradient that goes from bottom to middle\n\t\tfloat fMix = clamp(y * 2.0, 0.0, 1.0);\n        // Mix star size and intensity\n\t\tfMix *= (clamp((1.0 - StarVal) * INTENSITY * STARSIZE - distance(vSamplePos, vLookup  + (vec2(0.5) / fStep)) * fRadius, 0.0, 1.0));\n\t\tvColor = mix(vColor, vStarColor, fMix);\n    }\n    \t\n\tfragColor = vec4(vColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ltlGzX","date":"1424039391","viewed":586,"name":"Twilight","username":"SifakaMon","description":"Recreation of the Twilight SGI desktop backdrop (originally written in Iris gl by Howard Look) based on the original sources and random generator from Starfield01 > by xaot88.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sunset","sgi","starfield","irix"],"hasliked":0,"parentid":"","parentname":""}}