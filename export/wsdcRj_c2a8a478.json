{"ver":"0.1","info":{"id":"wsdcRj","date":"1601314511","viewed":209,"name":"Soft Star Distance ","username":"Shem_Namo","description":"\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["star","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// A simple star distance function\n// from this GitHub Repository:\n// https://github.com/cgvirus/Natron-Lens-Flare-Studio/blob/master/GLSL_Lense_Flare_Elements/Star.frag.glsl\n\nfloat globalSize = 1.0; // Global Scale, min=0., max=100.\n float globalRotate= 0.0; // Global Rotation, min=0., max=360.\n float evolution= 1.0; // Evolution, min=1.0, max=360.\n\n//parametres\n float Radius = .03; // Radius, min=0., max=1.\n float Polycount = 6.; // Polycount, min=3., max=30\n float GlowDistance = 0.0; // GlowDistance, min=0.0., max=1.0.\n float threshold = 0.04; // Threshold, min=0.0, max=5.\n float rotation = 0.0; // Rotation , min=0.,max=360.\n float squized = 1.0; // Ray Skew, min=1., max=10.\n float skewRot = 1.0; // Ray Skew Rotation, min=1., max=10.\n float chrome = 0.0; // Chromatic, min=0.0, max=0.5\n float brightness = 1.; // Brightness , min=1,max=10\n vec3 Color1 = vec3(1.,1.,1.); // Color1\n\n\n\nconst float      PI = 3.14159265359;\nconst float  TWO_PI = 6.28318530718;\n\n\nfloat rand(float n){\n    return fract(cos(n*89.42)*343.42);\n}\n\n\n//creates a Star\nfloat star(vec2 uv, vec2 pos, float n, float radius)\n{\n    float rot = radians(rotation+globalRotate)*evolution;\n\tmat2 m = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n   \tuv  = m*uv;\n   \tpos = m*pos;\n    \n    vec2 p = pos;\n    float angle = atan(p.x, p.y*squized) + PI*skewRot;\n    float r = TWO_PI / n;\n    float d = 1./(cos(floor(.5 + angle / r) * r - angle) * length(-p) / (radius*globalSize));\n\n    return smoothstep(GlowDistance, 1.0+threshold, d);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv -= 0.5;\n\tuv.x *= iResolution.x / iResolution.y;\n\t\n\tvec2 mouse = iMouse.xy/iResolution.xy;\n\tmouse -= 0.5;\n\tmouse.x *= iResolution.x / iResolution.y;\n\t\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    vec4 linker = texture(iChannel0,xy);\n\t\n\tfloat cr = star(uv, (vec2(uv.x+chrome*.04,uv.y)-mouse), Polycount, Radius)*brightness;\n\tfloat cg = star(uv, (vec2(uv.x+chrome*.01,uv.y)-mouse), Polycount, Radius)*brightness;\n\tfloat cb = star(uv, (vec2(uv.x+chrome*.03,uv.y)-mouse), Polycount, Radius)*brightness;\n\n\tvec3 col = vec3(cr,cg,cb)*Color1;\n\n\n\t\n\tfragColor = vec4(col, 1)+linker;\n}","name":"Image","description":"","type":"image"}]}