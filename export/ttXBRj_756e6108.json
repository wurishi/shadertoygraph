{"ver":"0.1","info":{"id":"ttXBRj","date":"1597435655","viewed":137,"name":"Particle Chaos Detective Story 2","username":"savegor","description":"Intermediate result of some experiments.","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat getVal(float x_shift, float v) {\n\tvec2 uv = vec2((x_shift + 0.5)/iResolution.x, v);\n    vec4 crd_raw = texture(iChannel0, uv);\n    return unpack(crd_raw);\n}\n\nvec4 getParticle(int index) {\n    float v = float(index)/iResolution.y;\n    return vec4(getVal(0.0, v) * iResolution.x,\n                getVal(1.0, v) * iResolution.y,\n                getVal(2.0, v),\n                getVal(3.0, v)); \n    \n}\n\nfloat sqrDistToPoint(int index, vec2 pixel) {\n    vec4 point = getParticle(index);\n\tvec2 diff = point.xy - pixel;\n    return dot(diff, diff) * 3.0 * (1.2 +  sin(10.0 * point.z));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float minDist = 999.0;\n    for(int i = 0; i < N; i++) {\n        minDist = min(minDist, sqrDistToPoint(i, fragCoord));\n    }\n    float p_sqr_rad = 10.0 * log(PARTICLE_RAD * PARTICLE_RAD);\n\t\n    float intensity = p_sqr_rad / minDist;\n    fragColor = vec4(intensity, intensity * 0.69, intensity * 0.7, 1.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float noise(vec2 st) {\n    return abs(fract(100.0 * sin(-130.0 + 0.0001 * -iTime * st.x * st.y)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord;\n\n    float rnd = noise(fragCoord);\n        \n    fragColor = pack(rnd);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const int N = 100;\nconst float PARTICLE_RAD = 8.0;\nconst vec4 BIT_SHIFT = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);\nconst vec4 BIT_MASK  = vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);\nconst vec4 INV_BIT_SHIFT = 1.0 / BIT_SHIFT;\n\n\n//---------------------------------------------//\nvec4 pack(float value) {\n    vec4 res = fract(value * BIT_SHIFT);\n    res = res - res.xxyz * BIT_MASK;\n    return res;\n}\n\nfloat unpack(vec4 rgba)\n{\n    float depth = dot(rgba, INV_BIT_SHIFT);\n    return depth;\n}\n//---------------------------------------------//\n","name":"Common","description":"","type":"common"}]}