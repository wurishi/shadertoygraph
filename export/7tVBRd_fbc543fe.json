{"ver":"0.1","info":{"id":"7tVBRd","date":"1665097728","viewed":102,"name":"railing","username":"jt","description":"The simplest railing structure I could come up with. Intended to be used in architectural constructions.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["architecture","construction","building","railing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/7tVBRd railing by jt\n// The simplest railing structure I could come up with\n// intended to be used in architectural constructions.\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\nfloat segment(vec2 p)\n{\n    p.y += 1.0;\n    float h = clamp(p.y / 2.0, 0.0, 1.0);\n    return length(p - h * vec2(0,2));\n}\n\n// Create multiple copies of an object - https://iquilezles.org/articles/distfunctions\nvec2 opRepLim( in vec2 p, in float s, in vec2 lima, in vec2 limb )\n{\n    return p-s*clamp(round(p/s),lima,limb);\n}\n\nfloat railing(vec2 p, int lima, int limb )\n{\n    vec3 o = vec3(0.0, 0.5, 1.0);\n    p = opRepLim(p, 2.0, vec2(lima, 0), vec2(limb, 0));\n    return\n        min\n        (\n            min(segment(p.xy + o.yx), segment(p.xy - o.yx)),\n            min(segment(p.yx - o.zx), segment(p.yx))\n        );\n}\n\nfloat halfspace(vec3 p)\n{\n    return p.z + 1.0;\n}\n\nfloat railing(vec3 p, int lima, int limb )\n{\n    float dp = abs(p.y); // distance to plane\n\n    vec3 o = vec3(0.0, 0.5, 1.0);\n    float df = railing(p.xz, lima, limb ); // distance to 2d SDF\n    \n    return sqrt(dp*dp+df*df); // 3dify 2d SDF ( https://www.shadertoy.com/view/sdscDs )\n}\n\nfloat map(vec3 p)\n{\n    vec2 o = vec2(0,1);\n    //return min(railing(p,-1,+1) - 0.05, halfspace(p));\n    return\n        min\n        (\n            min\n            (\n                railing(p.xyz + o.yxx, -2, 0) - 0.05,\n                railing(p.yxz + o.yxx, -1, 0) - 0.05\n            ),\n            halfspace(p)\n        );\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p ) \n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    for(float t = t0; t < t1;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return t1;\n}\n/*\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    if(t0 < 1.0)\n    {\n        for(float t = t0; t < 1.0;)\n        {\n            float h = map(ro + rd * t);\n            if(h < EPSILON)\n                return t;\n            t += h;\n        }\n        t0 = 1.0;\n    }\n\n    for(float t = t0; t < t1;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON * t) // optimization: coarser epsilon in the distance\n            return t;\n        t += h;\n    }\n\n    return t1;\n}\n*/\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = pi / 2.0 + pi / 2.0 * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x > 10.0) ? mx : 2.0 * pi * fract(iTime * 0.05);\n    my = (iMouse.y > 10.0) ? my : pi / 2.0;\n\n    mat2 Yaw = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 0.5, -5.0 );//vec3(0.0, -10.0 * my, 0.0);\n    //mat2 Pitch = mat2(vec2(0.0, 1.0), vec2(-1.0, 0.0));\n    mat2 Pitch = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz = Pitch * ro.yz;\n    ro.xy = Yaw * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz = Pitch * rd.yz;\n    rd.xy = Yaw * rd.xy;\n\n    float dist = trace(ro, rd, 0.0, DIST_MAX);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n    \n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.1);\n    float brightness = max(dot(lightdir, n), 0.0);\n    //brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX );\n    brightness *= softshadow(ro+rd*dist,lightdir, 0.01, DIST_MAX, 50. );\n    //vec3 color = (n * 0.5 + 0.5);\n    vec3 color = mix(vec3(0.25), vec3(1), step(-0.99, dst.z)); // quick hack to color ground differently\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n    //color = (ambient + calcAO(dst, n) * brightness) * color;\n\n    fragColor = mix(vec4(color, 1.0), vec4(0.0), smoothstep(DIST_MAX - 2.0, DIST_MAX, dist));\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}