{"ver":"0.1","info":{"id":"M3fyWr","date":"1726038078","viewed":30,"name":"golden tower","username":"Efim","description":"SDF for simple arch. Noise for simple starry sky","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","sdf","raymatch","architecture","arch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\ngolden tower\nSDF,raymatch,noise,arch,architecture\nSDF for simple arch. Noise for simple starry sky\n*/\n\n\n#define PI  3.14159265359\n#define TAU 6.28318530718\n#define rot(f) mat2(cos(f), -sin(f), sin(f), cos(f))\n\nconst float dist_infin = 10.0;\n#define nn 128\n\nconst float eps = 0.001;\nvec3 bg = vec3(0.08, 0.42, 0.87);\nvec3 col1 = vec3(0.73, 0.7, 0.4);\nfloat npp =15.;\nfloat lev = 0.995;\n\nfloat hash (vec3 p) {\n    return fract(sin(dot(p, vec3(127.1,311.7, 74.7))) * 43758.5453123);\n}\nfloat arch(vec3 p, float R, float h, float l) {\n    float res = 0.;\n    if(p.z >= 0.)\n        res = length(vec2(p.x, max(p.z - h, 0.))) - R;\n    else\n        res = length(vec2(p.z, abs(p.x) - R));\n    res = length(vec2(max(abs(p.y) - l, 0.), res));\n    return res;\n}\n\nfloat level(vec3 p, float R, float h)\n{\n    return max((arch(p, R, h, 100.)), (arch(p.yxz, R, h, 100.)));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = vec3(0.);  \n  abs(-p.z), (p.z - b.z);\n  if (p.z > 0.)  \n    q = vec3(p.z - b.z, abs(p.xy)-b.xy);\n  else\n    q = vec3(-p.z, abs(p.xy)-b.xy);  \n\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat arch2(vec3 p, float R, float h)\n{\n    float res = 0.;\n    res = min(length(vec2(p.x, max(p.z - h, 0.))), length(vec2(p.y, max(p.z - h, 0.)))) - R;\n    return res;    \n}\n\nfloat level2 (vec3 p, float R, float h, float w, float H)\n{\n    float t = sdBox(p, vec3(w, w, H));\n    float t2 = arch2(p, R, h);\n    return max (t, -t2);\n}\n\n\nfloat map(vec3 p) {\n    p.yz *= rot(PI/2.);\n    p.z -= 1.;\n    float t0 = level(p, 0.2, 0.3) - 0.1;\n    p.z += 0.95;\n    float t1 = level(p, 0.4, 0.5) - 0.15;\n    p.z += 1.55;\n    float t2 = level2(p, 0.4, 0.9, 0.65, 1.5)-0.03;\n    return min(t0, min(t1, t2));\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 pos) {\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * map(pos + k.xyy * h) +\n        k.yyx * map(pos + k.yyx * h) +\n        k.yxy * map(pos + k.yxy * h) +\n        k.xxx * map(pos + k.xxx * h));\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l - p), r = normalize(vec3(f.z, 0, -f.x)), u = cross(f, r), c = f * z, i = c + uv.x * r + uv.y * u;\n    return normalize(i);\n}\n/*\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n*/\n#define AA 1\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 light = normalize(vec3(0.0, 1.0, -2.5)); \n    vec2 mo = vec2( -0.2 * iTime, 0.);\n    if  (iMouse.z > 0.0)\n    {\n        mo = (-iResolution.xy + 2.0 * (iMouse.xy)) / iResolution.y;\n    }\n    vec3 ro = vec3(0., 0., 3.4); // camera\n    //camera rotation\n    ro.yz *= rot(mo.y*2.);\n    ro.xz *= rot(-mo.x*2.);\n   \n    const float fl = 1.5; // focal length\n\n    //antialiasing\n    vec3 tot = vec3(0.0);\n    for(int m = 0; m < AA; m++) for(int n = 0; n < AA; n++) {\n            vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o)) / iResolution.y;\n            vec3 rd = GetRayDir(p, ro, vec3(0, 0., 0), fl); //ray direction\n            vec3 col = bg*bg;\n            //================================sky color========================\n            float d = length(cross(ro, rd));\n            float td = abs(dot(ro, rd));\n            d = sqrt(dist_infin * dist_infin - d * d);\n            vec3 pos = ro + rd * (td + d);\n            vec3 pp = floor(pos*npp)/npp;;\n            float fil = hash(pp);\n            if(fil > lev) {\n                if ((length(pos - (pp + vec3(0.5/npp, 0.5/npp, 0.5/npp)))) < 0.5/npp)\n                    col = vec3(1.);\n            }\n            //==========================raymatch=============================\n            td = 0.;\n            pos = vec3(0.);\n            for(int i = 0; i < nn; i++) {\n                pos = ro + rd * td;\n                float h = map(pos);\n                if(h < eps || td >= dist_infin)\n                    break;\n                td += h;\n            }\n            //======================color====================================\n            if(td < dist_infin) {\n                col = col1*col1;\n                vec3 nor = calcNormal(pos);\n                vec3 R = reflect(light, nor);\n                float specular = pow(max(abs(dot(R, rd)), 0.), 16.);\n                float difu = abs(dot(nor, light));\n                col = col * (clamp(difu, 0., 1.0) + 0.5) + vec3(1., .7, .4) * specular;\n                float fre = pow(clamp(dot(nor, rd) + 1., .0, 1.), 3.); // Fresnel, for some mild glow.\n                col += vec3(.4, .7, 1) * fre; //?\n                col = sqrt(col);\n            }\n            tot += col;\n        }\n    tot = tot / float(AA) / float(AA);\n    //tot = tot / float(AA);\n    //antialiasing\n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}