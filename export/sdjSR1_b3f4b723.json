{"ver":"0.1","info":{"id":"sdjSR1","date":"1619682123","viewed":57,"name":"Purple UFO","username":"wlk","description":"still learning","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","reflect","softshadow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 250    // int\n#define MAX_DIST 40.    // float\n#define SURF_DIST 0.01\nfloat smin(float a, float b, float k) \n{\n  float h = clamp(0.5 + 0.5 * (a - b) / k, 0.0f, 1.0f);\n  return h*a+(1.0-h)*b - k * h * (1.0 - h);\n}\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n  p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat sdLink( vec3 p, float le, float r1, float r2 )\n{\n  vec3 q = vec3( p.x, max(abs(p.y)-le,0.0), p.z );\n  return length(vec2(length(q.xy)-r1,q.z)) - r2;\n}\n\nstruct material{\nvec3 baseColor;\nfloat roughness, specular,meatlic,opacity; };\n\nvec2 Scene(vec3 p) {\n      \n    float sphereDist1 = length(p-vec3(0.,1.,4.))-1.;\n    float sphereDist2 = length(p-vec3(2.0*sin(iTime),2.0,3.0))-1.;\n    float sphereDist3 = length(p-vec3(3.,1.,5.))-.8;\n    float boxFrameDist= sdBoxFrame(p-vec3(-2.,1.,5.),vec3(0.1,4.,5.),1.);\n    float linkDist=sdLink(p-vec3(0.,1.2,2.),.0,1.,0.025);\n    float planeDist= p.y;\n    float ID;\n    \n    if(sphereDist1<=0.) ID=1.;\n    if(sphereDist2<=0.) ID=2.;\n    \n    if(sphereDist3<=0.) ID=3.;\n    if(planeDist<=0.0) ID=4.;\n    float d = smin(sphereDist1, sphereDist2,.5);\n     d= min(d,planeDist);\n     d=min(d,sphereDist3);\n     d=min(d,boxFrameDist);\n     d=min(d,linkDist);\n    return vec2(d,ID);\n}\n\nfloat getMaterial (float ID){\n  if(ID==1.) return 0.85;\n if(ID==2.) return 0.85;\n if(ID==3.) return 0.5;\n if(ID==4.) return 0.1;\n\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    for(int i = 0; i < MAX_STEPS; i++){\n        vec3 p = ro + rd*dO;\n        float dS =Scene(p).x;\n        dO += dS-0.00001;\n        if ( dS < SURF_DIST) break;\n        if(dO > MAX_DIST ) {dO=MAX_DIST+1.;break;}\n    }    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = Scene(p).x;\n    vec2 e = vec2(0.001, 0.);\n    \n    vec3 n = d - vec3(\n        Scene(p-e.xyy).x, \n        Scene(p-e.yxy).x, \n        Scene(p-e.yyx).x);\n    return normalize(n);\n}\n\nvec3 GetLight(vec3 p,vec3 lightPos,vec3 lightColor) {\n    \n    vec3[4] FlatlightPOS=vec3[4](vec3(10.*sin(iTime),15,0),vec3(4,15,0),vec3(-4,15,8),vec3(10.*sin(iTime)+10.,15,8));\n   \n    //lightPos.xyz += vec3(sin(2.5*iTime), 3.0,sin(3.0*iTime))*3.;\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    vec3 v=normalize(p-0.0);\n    vec3 h=normalize(0.5*(l+v));\n    float spec=max(dot(h,n),0.0);\n    float spe=getMaterial(Scene(p).y);\n    \n   \n    vec3 specular = spe*spec*lightColor;\n    vec3 dif=(1.-spe)*lightColor; \n     float shadowPer=1.;\n    for(;FlatlightPOS[0].x<=FlatlightPOS[3].x&& shadowPer>0.;){\n     \n    for(;FlatlightPOS[0].z<=FlatlightPOS[3].z&& shadowPer>0.;){\n    vec3 l=normalize(FlatlightPOS[0]-p);\n    float d = RayMarch(p+n*0.01, l);\n    if (d < length(FlatlightPOS[0]-p)) shadowPer-=(1./30.);\n    FlatlightPOS[0].z+=.4;}\n    FlatlightPOS[0].x+=.4;}\n    \n    \n    float d = RayMarch(p+n*0.00001, l);\n    vec3 total=dif+specular;\n    if (d < length(lightPos-p)) total*=shadowPer;// shadow \n    \n    return total;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.);\n    vec3 lightPos1=vec3(-5.*sin(iTime),15.,4.);\n    \n    vec3 ro = vec3(0., 1., -2.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n\n    float d = RayMarch(ro, rd);\n    \n    \n    vec3 p = ro + rd * d;\n    float spec=getMaterial(Scene(p).y);\n     float reflectD=RayMarch(p+GetNormal(p)*0.01,GetNormal(p));\n     vec3 reflectP=p+GetNormal(p)*reflectD;\n     vec3 reflectCol=GetLight(reflectP,lightPos1,vec3(uv*sin(iTime),0.6));\n     \n     float reflect2=RayMarch(reflectP+GetNormal(reflectP)*0.01,GetNormal(reflectP));\n     vec3 reflectP2=reflectP+GetNormal(reflectP)*reflect2;\n     vec3 reflectCol2=GetLight(reflectP2,lightPos1,vec3(uv*sin(iTime),0.6));\n       \n    \n    col = GetLight(p,lightPos1,vec3(uv*sin(iTime),0.6));\n    \n    fragColor = vec4(col+0.5*reflectCol+0.5*reflectCol2,1.0);\n    if (d==MAX_DIST+1.) fragColor=vec4(uv*sin(iTime),0.6,1.);\n}","name":"Image","description":"","type":"image"}]}