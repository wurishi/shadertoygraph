{"ver":"0.1","info":{"id":"clsGR8","date":"1671298309","viewed":128,"name":"wedge intersection","username":"jt","description":"While [url=https://www.shadertoy.com/view/mllGzH]iq's implementation[/url] returns distance and normal,\nmy implementation returns both intersection-points (enter, leave) of the line with the wedge.\nUse dist.x if ray origin outside, dist.y if inside wedge.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["intersection","wedge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/clsGR8 wedge intersection by jt\n\n// Returns both intersection-points (enter, leave) of a line with a wedge.\n\n// XXX There still seems to be a bug when ray origin inside box but above plane XXX\n\n// tags: wedge, intersection\n\n// The MIT License\n// Copyright (c) 2022 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n#define DIST_MAX 1000.0\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n// Returns both intersection-points (enter, leave) of a line with a wedge.\n// For simple visualization use (depending on ray origin):\n//    outside wedge: dist.x\n//    inside wedge: dist.y\nvec2 wedge_intersection(vec3 ro, vec3 rd, vec3 ext)\n{\n    vec2 dists = vec2(DIST_MAX);\n\n    // box intersection\n    {\n        // from https://iquilezles.org/articles/boxfunctions/ resp. https://iquilezles.org/articles/intersectors/\n        vec3 m = -1.0 / rd;\n        vec3 n = m * ro;\n        vec3 k = abs(m) * ext;\n        vec3 t1 = n - k;\n        vec3 t2 = n + k;\n        float tn = max(max(t1.x, t1.y), t1.z);\n        float tf = min(min(t2.x, t2.y), t2.z);\n        if(tn <= tf && tf >= 0.0)\n            dists = vec2(tn, tf);\n    }\n\n    float dist = DIST_MAX;\n\n    vec3 n = normalize(vec3(0.0,-ext.z, ext.y));\n\n    // wedge-plane intersection\n    {\n        // plane-intersection\n        // plane: dot(point - origin, normal) = 0.0\n        // where point = ro + rd * t\n        //     dot(ro + rd * t - origin, normal) = 0.0\n        //     dot(ro - origin, normal) + dot(rd * t, normal) = 0.0\n        //     t * dot(rd, normal) = dot(origin - ro, normal)\n        //     t = dot(origin - ro, normal) / dot(rd, normal)\n        float t = -dot(ro, n) / dot(rd, n);\n        if(t >= 0.0 && all(lessThanEqual(abs(ro + rd * t), ext)))\n            dist = t;\n    }\n\n    if(dot(ro + dists.x * rd, n) > 0.0) dists.x = dist;\n    if(dot(ro + dists.y * rd, n) > 0.0) dists.y = dist;\n\n    return dists;\n}\n\nvec3 wedge_normal(vec3 p, vec3 e)\n{\n    vec3 d = abs(p) - e;\n    vec3 s = sign(p);\n\n    vec3 n = normalize(vec3(0.0,-e.z, e.y));\n    float w = dot(p, n);\n    if(w > d.z && w > d.y && w > d.x) return n;\n    if(d.z > d.y && d.z > d.x) return vec3(0.0, 0.0, s.z);\n    if(d.y > d.x) return vec3(0.0, s.y, 0.0);\n    return vec3(s.x, 0.0, 0.0);\n}\n\nbool wedge_inside(vec3 p, vec3 e)\n{\n    vec3 n = normalize(vec3(0.0,-e.z, e.y));\n    return all(lessThanEqual(abs(p), e)) && dot(p, n) <= 0.0;\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(pi * p.x + pi/2.0)*sin(pi *p.y + pi/2.0)*sin(pi *p.z + pi/2.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 I)\n{\n    bool demo = max(iMouse.x, iMouse.y) < 5.0;\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y;\n    vec3 rd = normalize(vec3(I.x, 2.0, I.y)); // must be normalized!\n    //vec3 ro = vec3(0.0,-0.0, 0.0); // inside view\n    //vec3 ro = vec3(0.0,-5.0, 0.0); // outside view\n    vec3 ro = vec3(0.0,fract(iTime/10.0)<0.5 ? -5.0 : 0.0, 0.0); // alternate outside/inside view\n\n    float mx = -2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = -pi / 2.0 + pi * float(iMouse.y) / float(iResolution.y);\n    mx = !demo ? mx : +pi / 4.0 + 2.0 * pi * fract(iTime * 0.01);\n    my = !demo ? my : -pi / 6.0;\n\n    mat3 M = yaw_pitch_roll(mx, my, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n\n    vec3 lightdir = normalize(vec3(1.0, 2.0, 3.0));\n    //vec3 lightdir = normalize(vec3(0.0,-1.0, 0.0));\n    vec3 color = vec3(0.0);\n    vec3 ext = vec3(1.0, sqrt(3.0), 1.0);\n\n    ro.z -= ext.z / 2.0;\n\n    float dist = DIST_MAX;\n    {\n        vec2 dists = wedge_intersection(ro, rd, ext);\n        dist = wedge_inside(ro, ext) ? dists.y : dists.x;\n    }\n\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + dist * rd;\n        vec3 normal = wedge_normal(dst, ext);\n        float ambient = 0.1;\n        float diffuse = max(0.0, dot(normal, lightdir));\n        color = vec3(1);\n        color *= normal * 0.5 + 0.5;\n        color *= mix(vec3(0.2), vec3(1.0), checker(dst));\n        color *= (diffuse + ambient);\n    }\n\n    // Output to screen\n    fragColor = vec4(sqrt(color),1.0);\n}\n","name":"Image","description":"","type":"image"}]}