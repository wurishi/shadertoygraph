{"ver":"0.1","info":{"id":"ddfBzM","date":"1688568984","viewed":71,"name":"The Meatgrinder","username":"Ronush","description":"Munchy Crunchy","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat smin( float a, float b )\n{\n    float k=3.;\n\tfloat res = exp2( -k*a ) + exp2( -k*b );\n\treturn -log2( res )/k;\n}\n\n\nfloat Sphere(vec3 p, float r){\n    float sphere = (length(p)-r);\n    return sphere;\n}\nfloat Capsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\nfloat Box( vec3 p, vec3 r)\n{\n  p=abs(p)-r;\n  return max(max(p.x, p.y), p.z);\n}\n\n\n//global variables\nfloat g1=0.; vec3 np, bp;\nvec3 ld = normalize(vec3(0, 0.3, -2))*1.3;\n\n\n\nvec2 getDist(vec3 p){\n    vec2 h, t=vec2(Capsule(p-vec3(0, -1.5, 0), 3., 1.), 5);\n    \n\tt.x=max(t.x, -Sphere(p-vec3(0, 0, 0), 1.5));\n    h = vec2(Box(p, vec3(0.3, 1., 0.3)), 1.);\n    t.x = smin(t.x, h.x);\n    h = vec2(Box(p, vec3(4., 1.+sin(p.x-3.141/2.), 0.3)), 1.);\n    t = (t.x<h.x)?t:h;\n\tt.x*=0.5;\n    \n    return t;\n    \n}\n\nmat2 r2(float r){return mat2(cos(r), sin(r), -sin(r), cos(r));}\n\nvec2 map(vec3 p)\n{\n    \n    float tt = mod(iTime, 1000.);\n    p.xy*=r2(tt+sin(p.z*0.2+tt));\n    vec3 np = p;\n    float s = sin(p.z*0.1+tt*2.-5.)*0.1;\n    for (int i=0; i<8; i++){\n        np = abs(np)-vec3(3.141, 0, 5.);\n        np.xy*=r2(0.4+s*2.);\n        np.xz*=r2(0.3+s);\n    \n    }\n\tvec2 t = getDist(np);\n    \n    \n    \n\treturn t;\n}\n\n\nvec2 RayMarch( vec3 ro, vec3 rd )\n{\n  vec2 h,t=vec2(0.1);\n  for(int i=0;i<128;i++){\n    h=map(ro+rd*t.x);\n    if(h.x<.0001||t.x>50.) break;\n    t.x+=h.x;t.y=h.y;\n  }\n  if(t.x>50.) t.x=0.;\n  return t;\n}\n\nvec3 getNormal(vec3 p){\n    float d0 = map(p).x;\n    vec2 e = vec2(0.00, 0.0001);\n    vec3 d1 = vec3(\n   \t map(p-e.yxx).x,\n   \t map(p-e.xyx).x,\n   \t map(p-e.xxy).x);\n    vec3 n = normalize(d0-d1);\n    \n    \n    \n    return n;\n}\nfloat noise(vec3 p){//Noise function stolen from Virgil who stole it from Shane who I assume understands this shit, unlike me who is too busy throwing toilet paper at my math teacher's house\n  vec3 ip=floor(p),s=vec3(7,157,113);\n  p-=ip; vec4 h=vec4(0,s.yz,s.y+s.z)+dot(ip,s);\n  p=p*p*(3.-2.*p);\n  h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n  h.xy=mix(h.xz,h.yw,p.y);\n  return mix(h.x,h.y,p.z);\n}\n\n//lighting functions\nfloat Diffuse(vec3 p){\n    vec3 normal = getNormal(p);\n    float dif = max(0.9, dot(normal, ld));\n    return dif;\n}\n\nfloat ambientOcc(vec3 p, float dist){\n    \n    float aor = dist/50.; // ambient occ range\n    vec3 normal = getNormal(p);\n    float ao=exp2(-2.*pow(max(0.,1.-map(p+normal*aor).x/aor),2.));\n    return ao;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat tt=mod(iTime, 100.);\n\t// Normalized pixel coordinates (from 0 to 1)\n\tvec2 uv=(fragCoord.xy/iResolution.xy-0.5)/vec2(iResolution.y/iResolution.x,1);\n    \n\tvec3 ro = vec3(0.2, 0, sin(tt/3.)*30.);\n\tvec3 cw=normalize(vec3(0)-ro);\n    //vec3 cw = normalize(vec3(0, 1, 0)-ro);\n    vec3 cu = normalize(cross(cw, vec3(0, 1, 0)));\n    vec3 cv = normalize(cross(cw, cu));\n    vec3 rd = mat3(cu, cv, cw)*normalize(vec3(-uv, 0.5));\n    \n    \n    \n    vec3 col=vec3(.04)*(1.-(length(uv)-.2));\n\tvec3 fog = col;\n\tfloat dist = RayMarch(ro, rd).x;\n\tvec3 p = ro+rd*dist;\n\tvec3 normal = getNormal(p);\n\tfloat basecol = map(p).y;\n    vec3 hue;\n    if (dist>0.){ // we inside something broski\n\thue = vec3(1, 0.05, 0);\n\tif (basecol == 5.) hue = vec3(1., 0., 0.);\n\tif (basecol == 0.) hue = vec3(0.2, 0.2, 0.2);\n\tif (basecol == 1.) hue = vec3(1., 1., 1.);\n    \n\tcol = hue;\n    }\n    float spo=exp(1.+3.*noise(np/vec3(.1,.2,.4)));\n    vec3 sss = vec3(1.5)*smoothstep(0., 1., map(p-rd*0.9).x/0.4); //sub surface scattering\n    vec3 specular = max(vec3(1.)*pow(max(dot(reflect(rd, normal), -rd), 0.2), spo), 0.2); //specular\n    float fr=pow(1.+dot(normal,rd),4.); //fresnel\n    \n\tfloat dif = Diffuse(p);\n    float ao =ambientOcc(p, dist)*0.8+0.2;\n    col *=sss;\n    col*=dif;\n    col*=specular;\n    col*=ao;\n    //col=mix(col,fog,1.-exp(-.0001*dist*dist*dist));//Fog\n    \n\tcol+=g1*0.3;\n\tfragColor = vec4(col,1.0);\n}\n\n\n\n","name":"Image","description":"","type":"image"}]}