{"ver":"0.1","info":{"id":"mlKyRd","date":"1700842849","viewed":77,"name":"LSD audio reactive webcam","username":"Chriscamplin","description":"Trippy Audio Reactive webcam filter","likes":1,"published":1,"flags":66,"usePreview":0,"tags":["audio","webcam","audioreactive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4s3GRX","filepath":"https://soundcloud.com/chris-camplin/theymustbesilenced","previewfilepath":"https://soundcloud.com/chris-camplin/theymustbesilenced","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265359\n\n#define PI2 6.28318530718\n// The MIT License\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org/\n// Copyright Â© 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// A simple way to create color variation in a cheap way (yes, trigonometrics ARE cheap\n// in the GPU, don't try to be smart and use a triangle wave instead).\n\n// See https://iquilezles.org/articles/palettes for more information\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = (iTime*PI)*.0675;\n    vec2 si = iResolution.xy;\n    float sec = 8.;\n    float s = sin(PI*(0.75-iTime)/sec)/2.+.5;\n    vec2 uv=(2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    vec2 uv2 = fragCoord.xy/iResolution.xy;\n    vec3 cam = texture(iChannel1, uv2).rgb;\n    vec2 pos = fragCoord - si * 0.5;\n    float ratio = -2.5;\n    vec2 aUv = pos / (si - pos * ratio).y+.5;\n    vec3 snd = texture(iChannel0, uv2).rgb;\n    aUv.x-=.75;\n    aUv.y-=1.5;\n     //aUv*=abs(aUv)-dot(aUv.x, aUv.y);\n    // central uv\n    vec2 uvc = (2.*fragCoord.xy-si)/si.y;\n    float r = dot(uv2.x, uv2.y)+t;\n\t//aUv*=2.5;//*s+1.25;\n    vec4 col = vec4(cam, 0.);\n    float a = atan(aUv.y, aUv.x)+t;\n       \n    float d = length(aUv);\n    float s1 = 0.01+cam.x;//(snd.x*.01);\n    float s2 = 0.0105+cam.z;//(snd.x*.01)+0.01;\n    float f = 2.0;\n\n    //s1+(sin(t-d*.1)*.1+.15);\n    for(float i=0.;i<20.28;i+=2.528/10.){\n       f+=smoothstep(s1,s2,exp(sin(a*(9.)-(s)*cos(i)*(s+snd.x*.12*.5))*.7*d+(d-i*.75)));\n       f+=snd.x*.01;\n       f=abs(f);\n       //f+=smoothstep(s2,s1,exp(cos(a*(5.)-(s*6.)+cos(i-(s*6.))*(s*6.))*.4*d+(d-i*.4)));\n    }\n    //f+=t+snd.x;\n    float spread=sin(t*.01)*2.21;\n    col.rgb = pal( f+spread, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );\n    // Output to screen\n    fragColor = vec4(normalize(col.rgb),1.0);\n}","name":"Image","description":"","type":"image"}]}