{"ver":"0.1","info":{"id":"cdGcDt","date":"1696725479","viewed":59,"name":"trigonally interlocked grids dda","username":"jt","description":"Render three 2d xor-interlocked grids (rotated by 60 degrees with aspect sqrt(3)): lift to 6d, apply hyper voxel DDA, project to 2d.\n(see [url=https://www.shadertoy.com/view/dt2fDd]Kisrhombille DDA[/url] for variant using two triangular grids instead).\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","3d","raytracing","raycasting","voxel","slice","honeycomb","dda","cut","kisrhombille","project","hyper","6d","lift"],"hasliked":0,"parentid":"cl2fRd","parentname":"DDA test site 2d"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/cdGcDt trigonally interlocked grids dda, 2023 by jt\n// based on https://www.shadertoy.com/view/cl2fRd DDA test site 2d\n\n// DDA originally inspired by https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n// and tutorial http://lodev.org/cgtutor/raycasting.html\n// 3d-texture on voxels addon, normals reconstruction and grid transform by jt\n\n// Render three 2d xor-interlocked grids\n// (rotated by 60 degrees with aspect sqrt(3)/2)\n// by using a 6d hyper voxel DDA.\n\n// (See https://www.shadertoy.com/view/dt2fDd Kisrhombille DDA\n//  for a variant using two triangular grids instead.)\n\n// tags: 2d, 3d, raytracing, raycasting, voxel, slice, honeycomb, dda, cut, kisrhombille, project, hyper, 6d, lift\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\n#define DIST_MAX 100.0\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat checker(vec3 p)\n{\n    //return step(0.5, length(1.0 - abs(2.0 * fract(p) - 1.0))); // dots\n    return step(0.0, sin(pi * p.x + pi/2.0)*sin(pi *p.y + pi/2.0)*sin(pi *p.z + pi/2.0));\n    //return step(0.0, sin(p.x)*sin(p.y)*sin(p.z));\n}\n\n// Emulate 6d vector. Would be so much easier if GLSL supported vec6...\n#define VEC6 vec2[3]\n#define BVEC6 bvec2[3]\n#define IVEC6 ivec2[3]\n\nVEC6 RECIPROCAL(VEC6 v)\n{\n    return VEC6(1.0 / v[0], 1.0 / v[1], 1.0 / v[2]);\n}\n\nVEC6 SCALAR_TO_VEC6(float s)\n{\n    return VEC6(vec2(s),vec2(s),vec2(s));\n}\n\nIVEC6 SCALAR_TO_IVEC6(int s)\n{\n    return IVEC6(ivec2(s),ivec2(s),ivec2(s));\n}\n\nVEC6 TO_FLOAT(BVEC6 v)\n{\n    return VEC6(vec2(v[0]),vec2(v[1]),vec2(v[2]));\n}\n\nVEC6 TO_FLOAT(IVEC6 v)\n{\n    return VEC6(vec2(v[0]),vec2(v[1]),vec2(v[2]));\n}\n\nIVEC6 TO_INT(BVEC6 v)\n{\n    return IVEC6(ivec2(v[0]),ivec2(v[1]),ivec2(v[2]));\n}\n\nIVEC6 TO_INT(VEC6 v)\n{\n    return IVEC6(ivec2(v[0]),ivec2(v[1]),ivec2(v[2]));\n}\n\nVEC6 ABS(VEC6 v)\n{\n    return VEC6(abs(v[0]), abs(v[1]), abs(v[2]));\n}\n\nVEC6 SIGN(VEC6 v)\n{\n    return VEC6(sign(v[0]), sign(v[1]), sign(v[2]));\n}\n\nVEC6 NEG(VEC6 v)\n{\n    return VEC6(-v[0], -v[1], -v[2]);\n}\n\nIVEC6 NEG(IVEC6 v)\n{\n    return IVEC6(-v[0], -v[1], -v[2]);\n}\n\nVEC6 FLOOR(VEC6 v)\n{\n    return VEC6(floor(v[0]), floor(v[1]), floor(v[2]));\n}\n\nVEC6 SCALE(VEC6 a, float b)\n{\n    return VEC6(a[0] * b, a[1] * b, a[2] * b);\n}\n\nVEC6 ADD_HALF(VEC6 v)\n{\n    return VEC6(v[0] + 0.5, v[1] + 0.5, v[2] + 0.5);\n}\n\nVEC6 ADD(VEC6 a, VEC6 b)\n{\n    return VEC6(a[0] + b[0], a[1] + b[1], a[2] + b[2]);\n}\n\nIVEC6 ADD(IVEC6 a, IVEC6 b)\n{\n    return IVEC6(a[0] + b[0], a[1] + b[1], a[2] + b[2]);\n}\n\nVEC6 SUB(VEC6 a, VEC6 b)\n{\n    return VEC6(a[0] - b[0], a[1] - b[1], a[2] - b[2]);\n}\n\nVEC6 MUL(VEC6 a, VEC6 b)\n{\n    return VEC6(a[0] * b[0], a[1] * b[1], a[2] * b[2]);\n}\n\nIVEC6 MUL(IVEC6 a, IVEC6 b)\n{\n    return IVEC6(a[0] * b[0], a[1] * b[1], a[2] * b[2]);\n}\n\nVEC6 DIV(VEC6 a, VEC6 b)\n{\n    return VEC6(a[0] / b[0], a[1] / b[1], a[2] / b[2]);\n}\n\nIVEC6 DIV(IVEC6 a, IVEC6 b)\n{\n    return IVEC6(a[0] / b[0], a[1] / b[1], a[2] / b[2]);\n}\n\nfloat DOT(VEC6 a, VEC6 b)\n{\n    return dot(a[0], b[0]) + dot(a[1], b[1]) + dot(a[2], b[2]);\n}\n\nfloat LENGTH(VEC6 v)\n{\n    return sqrt(DOT(v, v));\n}\n\nVEC6 MIN(VEC6 a, VEC6 b)\n{\n    return VEC6(min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2]));\n}\n\nVEC6 MAX(VEC6 a, VEC6 b)\n{\n    return VEC6(max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2]));\n}\n\nBVEC6 LTE(VEC6 a, VEC6 b)\n{\n    return BVEC6(lessThanEqual(a[0], b[0]), lessThanEqual(a[1], b[1]), lessThanEqual(a[2], b[2]));\n}\n\nBVEC6 GTE(VEC6 a, VEC6 b)\n{\n    return BVEC6(greaterThanEqual(a[0], b[0]), greaterThanEqual(a[1], b[1]), greaterThanEqual(a[2], b[2]));\n}\n\n// sets bit to true if corresponding component is the minimum (multiples possible)\nBVEC6 LEAST(VEC6 v)\n{\n    float minimum = min(min(min(v[0].x, v[0].y), min(v[1].x, v[1].y)), min(v[2].x, v[2].y));\n    return LTE(v, SCALAR_TO_VEC6(minimum));\n}\n\nVEC6 apply(mat2 M0, mat2 M1, mat2 M2, VEC6 v)\n{\n    return VEC6(M0*v[0].xy, M1*v[1].xy, M2*v[2].xy);\n}\n\nvec2 project(VEC6 v) // collapse 6d to 2d by identifying (x,y) triples\n{\n    return v[0].xy + v[1].xy + v[2].xy;\n}\n\nuint stage()\n{\n    float t = fract(iTime / 6.0);\n    return uint(floor(t * 6.0));\n}\n\nbool get_voxel(IVEC6 v)\n{\n    ivec2 size = ivec2(12,8);\n\n    if(any(lessThan(v[0], ivec2(-size)))) return false;\n    if(any(lessThan(v[1], ivec2(-size)))) return false;\n    if(any(lessThan(v[2], ivec2(-size)))) return false;\n    if(any(greaterThanEqual(v[0], ivec2(size)))) return false;\n    if(any(greaterThanEqual(v[1], ivec2(size)))) return false;\n    if(any(greaterThanEqual(v[2], ivec2(size)))) return false;\n\n    if(fract(iTime / 12.0) < 0.5)\n    {\n        v[0] >>= 2;\n        v[1] >>= 2;\n        v[2] >>= 2;\n    }\n    \n    if(stage() == 0u) return ((v[0].x^v[0].y^v[1].x^v[1].y^v[2].x^v[2].y)&1) != 0; // checker\n    if(stage() == 1u) return ((v[0].x^v[0].y^v[1].x^v[1].y)&1) != 0;\n    if(stage() == 2u) return ((v[0].x^v[0].y)&1) != 0;\n    if(stage() == 3u) return ((v[1].x^v[1].y)&1) != 0;\n    if(stage() == 4u) return ((v[2].x^v[2].y)&1) != 0;\n    if(stage() == 5u) return ((v[1].x^v[1].y^v[2].x^v[2].y)&1) != 0;\n    return false;\n}\n\n#define MAX_RAY_STEPS 64\n\nvec4 traverse_trigonally_interlocked_grids(vec3 ray_pos_orig, vec3 ray_dir_orig)\n{\n    float h = 0.5;\n\n    float plate_dist = abs(ray_pos_orig.z) <= h ? 0.0 : min((-h-ray_pos_orig.z)/ray_dir_orig.z, (+h-ray_pos_orig.z)/ray_dir_orig.z); // distance from camera to plate\n\n    if(plate_dist < 0.0) return vec4(-ray_dir_orig, DIST_MAX); // if entire plate missed return sky\n\n    ray_pos_orig += plate_dist * ray_dir_orig; // snap camera to nearest border of plate\n\n    // Fortunately mat2x6 can be replaced by three mat2 here\n    // | +1, 0,+c,-s,+c,+s |\n    // |  0,+1,+s,+c,-s,+c |\n    float c = cos(radians(60.0)), s = sin(radians(60.0));\n    // NOTE: matrix constructor by column therefore matrix looks transposed here\n    mat2 M0 = mat2(+1, 0, 0,+1); // rotate   0 deg\n    mat2 M1 = mat2(+c,+s,-s,+c); // rotate +60 deg\n    mat2 M2 = mat2(+c,-s,+s,+c); // rotate -60 deg\n\n    vec2 a = vec2(sqrt(3.0),1); // change aspect ratio so grid vertices meet\n    // Lift 2d coordinates to 6d coodrinates (this would be q=M*p)\n    VEC6 ray_pos = VEC6((M0*ray_pos_orig.xy)*a, (M1*ray_pos_orig.xy)*a, (M2*ray_pos_orig.xy)*a);\n    VEC6 ray_dir = VEC6((M0*ray_dir_orig.xy)*a, (M1*ray_dir_orig.xy)*a, (M2*ray_dir_orig.xy)*a);\n\n    IVEC6 tile_pos = TO_INT(FLOOR(ray_pos)); // round down position to get tile position\n    if(get_voxel(tile_pos)) return vec4(vec3(0,0,sign(ray_pos_orig.z)), plate_dist); // if starting point at filled volume return surface normal (comment this out to remove floors & ceilings)\n\n    // decompose ray direction into reciprocal absolute ray direction and sign (-1,+1)\n    VEC6 delta_dist = RECIPROCAL(ABS(ray_dir)); // reciprocal absolute ray direction\n    IVEC6 ray_step = TO_INT(SIGN(ray_dir)); // sign of ray direction\n    // initial distances to nearest walls by dimension:\n    //     calculate ray position in relation to tile origin\n    //     (requires adding one half because tile origin is floor of ray position)\n    //     adjust sign according to ray direction\n    //     because tile has size 1 and we start in the middle wall is located at 0.5 (sign depends on ray direction)\n    //     divide by ray direction (to get distance with respect to ray)\n    VEC6 side_dist = MUL(ADD_HALF(MUL(TO_FLOAT(ray_step), ADD_HALF(SUB(TO_FLOAT(tile_pos), ray_pos)))), delta_dist); // initial distances to nearest walls by dimension\n    BVEC6 nearest = LEAST(side_dist); // component is true if nearest wall in that dimension\n\n    vec4 result = vec4(-ray_dir_orig, DIST_MAX); // sky\n\n    for (int i = 0; i < MAX_RAY_STEPS; i++)\n    {\n        if(get_voxel(tile_pos))\n        {\n            float dist = LENGTH(MUL(TO_FLOAT(nearest), SUB(side_dist, delta_dist)));\n            if(abs(ray_pos_orig.z + dist * ray_dir_orig.z) > h) return vec4(-ray_dir_orig, DIST_MAX); // leaving plate? sky\n            // NOTE: nearest contains only one component set to true indicating nearest direction and since normal points along this direction just cast nearest to normal (sign opposite to ray direction)\n            // Then: Project 6d coordinates back to 2d (this would be p=transpose(M)*q)\n            //result = vec4(project(apply(inverse(M0),inverse(M1),inverse(M2),MUL(TO_FLOAT(nearest),TO_FLOAT(NEG(ray_step))))), 0.0, dist + plate_dist);\n            result = vec4(project(apply(transpose(M0),transpose(M1),transpose(M2),MUL(TO_FLOAT(nearest),TO_FLOAT(NEG(ray_step))))), 0.0, dist + plate_dist);\n\n            break;\n        }\n\n        // adapted from core of https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 (somewhat reduced)\n        nearest = LEAST(side_dist); // component is true if nearest wall in that dimension\n        side_dist = ADD(side_dist, MUL(TO_FLOAT(nearest), delta_dist)); // update distances to nearest walls by dimension\n        tile_pos = ADD(tile_pos, MUL(TO_INT(nearest), ray_step)); // step to next tile in direction of nearest wall\n    }\n\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 I )\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // concise pixel-position mapping thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = -pi/4.0 + pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.5 * pi/2.0;\n\n    vec3 ray_pos = vec3(0.0, 0.0, -16.0);\n    vec3 ray_dir = vec3(I.x, I.y, 2.0); // NOTE: un-normalized direction appears to work fine here!\n    //ray_dir = normalize(ray_dir); // looks like ray-direction does not need to be normalized\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0); // rotate camera\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n\n    //ray_pos.z -= 0.0;\n\n    //ray_dir = normalize(ray_dir);\n\n    vec4 result = traverse_trigonally_interlocked_grids(ray_pos, ray_dir);\n    vec3 color = vec3(0);\n    if(result.w < DIST_MAX)\n    {\n        vec3 n = result.xyz;\n        float d = result.w;\n        vec3 dst = ray_pos + ray_dir * d;\n        d *= length(ray_dir); // fix distance in case ray was not normalized\n\n        vec3 light_dir = normalize(vec3(1,2,3));\n        //float brightness = max(0.0, dot(lightdir, n));\n        float diffuse = abs(dot(light_dir, n));\n        float shadow = diffuse > 0.0 ? traverse_trigonally_interlocked_grids(dst+result.xyz*0.001, light_dir).w < DIST_MAX ? 0.0 : 1.0 : 0.0;\n        float ambient = 0.2;\n        float specular = max(0.0, dot(result.xyz, normalize(-normalize(ray_dir) + light_dir)));\n        color = vec3(1);\n        //color *= mix(vec3(0.5), vec3(1.0), checker(dst*2.0)); // texture\n        color *= (shadow * diffuse + ambient) * vec3(0.5 + 0.5 * result.xyz);\n        color += shadow * 0.5 * pow(specular, 50.0);\n\n        vec3 fogcolor = vec3(0); // fog\n        color *= mix(fogcolor, color, exp(-d * d / 1000.0)); // fog for depth impression & to suppress flickering\n    }\n    else\n    {\n        color = vec3(0,0,0);\n    }\n\n    //color = mix(vec3(1,1,0),vec3(0,0,1),result.w/20.0); // debug distance\n\n    color = tanh(color); // roll-off overly bright colors\n\n    fragColor = vec4(sqrt(color), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}