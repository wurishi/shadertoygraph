{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// Fork of \"Sphere Real 3D brute force loop\" by SnackEater. https://shadertoy.com/view/4fKBzW\n\n// Shader: Color_Dotted_Sphere.glsl   https://www.shadertoy.com/view/XcKBRD\n\n// toDo: AA circle disks\n\n// see also: \n//   https://www.shadertoy.com/view/mdtyzN\n//   https://www.shadertoy.com/view/4XXfRf\n\nconst float PI = 3.141592653589;\nconst float TAU = 2.0 * PI;\nconst float RAD = PI / 180.;\nconst float R5 = 5.*PI / 180.;\n\n//float ToRad (float alpha) { return alpha * RAD; }\n\n#define R iResolution\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (2.0*fragCoord.xy - R.xy) / R.y;\n//vec2 mp = (2.0 * iMouse.xy  - R.xy) / R.y;\n  uv += vec2 (0.8*cos(iTime), 0.3*sin(iTime));\n      \n  float a = 0.3*iTime;\n  float d = 2.0;   // sphere size\n  float ca = cos(a), sa = sin(a);\n  vec3 col;\n  mat2 m2 = mat2(ca,-sa,sa,ca);\n  for(float theta = 0.03; theta < TAU; theta += R5)\n  { for(float phi = 0.01; phi < PI; phi += R5)\n    {\n//    uv = mod(uv,2.)-1.;   // mirroring\n      vec3 z = vec3(sin(theta) * sin(phi)\n                   ,cos(theta) * sin(phi), cos(phi));\n      z.xz *= m2;   // rotate about y axis\n      z.yz *= m2;   // rotate about x axis\n      z.xy = vec2(z.x / (d-z.z), z.y / (d-z.z));\n      float L = length(z.xy - uv);\n      if (L < 0.01)\n        col += 0.7*vec3(length(z), ca, sa);\n    }\n  }\n  fragColor = vec4 (col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XcKBRD","date":"1733846891","viewed":165,"name":"Color_Dotted_Sphere","username":"tholzer","description":"animated colored dots on a sphere...","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["3d","sphere","color","dots","dot","dottedsphere"],"hasliked":0,"parentid":"","parentname":""}}