{"ver":"0.1","info":{"id":"7lVSRc","date":"1641177495","viewed":232,"name":"Abnormis (Genuary 22 - Day 2)","username":"villedieumorgan","description":"Day 2 of the Genuary artificially generated month https://genuary.art.\nPrompt of the day: Dithering","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["organic","dithering","symmetry","genesis","generativeart","genuary"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Generative piece coded for Genuary 2022 (Day 2)\n// Prompt: \"Dithering\"\n// by @VilledieuMorgan\n\n#define TIME iTime * 0.1\n#define DITH_RES vec2(256.)\n\nmat2 makem2(in float theta) { float c = cos(theta); float s = sin(theta); return mat2(c, -s, s, c); }\nfloat noise(in vec2 x) { return texture(iChannel0, x * .01).x; }\nfloat fbm(in vec2 p)\n{\n  float z = 2.;\n  float rz = 0.;\n  vec2 bp = atan(p);\n  for (float i = 1.; i < 12.; i++)\n  {\n    rz += abs((noise(p) - 0.5) * 2.) / z;\n    z = z * 2.;\n    p = p * 2.;\n  }\n  return rz;\n}\n\nfloat fbm2(in vec2 p)\n{\n  vec2 basis = vec2(fbm(p - mod(TIME, 100.) * 1.6), fbm(p + TIME * 1.7));\n  basis = (basis - 2.5) * .2;\n  p += basis;\n  return fbm(p * makem2(TIME * 0.2));\n}\n\n// based on IQ https://iquilezles.org/articles/distfunctions2d\nfloat sdAxisAlignedRect(vec2 uv, vec2 tl, vec2 br)\n{\n  vec2 d = max(tl - uv, uv - br);\n  return length(max(vec2(0.0), d)) + min(0.0, max(d.x, d.y));\n}\n\nfloat sdEquilateralTriangle(in vec2 p)\n{\n  const float k = sqrt(3.0);\n  p.x = abs(p.x) - 1.0;\n  p.y = p.y + 1.0 / k;\n  if (p.x + k * p.y > 0.0) p = vec2(p.x - k * p.y, -k * p.x - p.y) / 2.0;\n  p.x -= clamp(p.x, -10.0, 0.0);\n  return -length(p) * sign(p.y) * 5.;\n}\n\n// based on glsl-dither\n\nfloat luma(vec3 color) {\n  return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nfloat dither8x8(vec2 position, float brightness) {\n  int x = int(mod(position.x, 8.0));\n  int y = int(mod(position.y, 8.0));\n  int index = x + y * 8;\n  float limit = 0.0;\n\n  if (x < 8) {\n    if (index == 0) limit = 0.015625;\n    if (index == 1) limit = 0.515625;\n    if (index == 2) limit = 0.140625;\n    if (index == 3) limit = 0.640625;\n    if (index == 4) limit = 0.046875;\n    if (index == 5) limit = 0.546875;\n    if (index == 6) limit = 0.171875;\n    if (index == 7) limit = 0.671875;\n    if (index == 8) limit = 0.765625;\n    if (index == 9) limit = 0.265625;\n    if (index == 10) limit = 0.890625;\n    if (index == 11) limit = 0.390625;\n    if (index == 12) limit = 0.796875;\n    if (index == 13) limit = 0.296875;\n    if (index == 14) limit = 0.921875;\n    if (index == 15) limit = 0.421875;\n    if (index == 16) limit = 0.203125;\n    if (index == 17) limit = 0.703125;\n    if (index == 18) limit = 0.078125;\n    if (index == 19) limit = 0.578125;\n    if (index == 20) limit = 0.234375;\n    if (index == 21) limit = 0.734375;\n    if (index == 22) limit = 0.109375;\n    if (index == 23) limit = 0.609375;\n    if (index == 24) limit = 0.953125;\n    if (index == 25) limit = 0.453125;\n    if (index == 26) limit = 0.828125;\n    if (index == 27) limit = 0.328125;\n    if (index == 28) limit = 0.984375;\n    if (index == 29) limit = 0.484375;\n    if (index == 30) limit = 0.859375;\n    if (index == 31) limit = 0.359375;\n    if (index == 32) limit = 0.0625;\n    if (index == 33) limit = 0.5625;\n    if (index == 34) limit = 0.1875;\n    if (index == 35) limit = 0.6875;\n    if (index == 36) limit = 0.03125;\n    if (index == 37) limit = 0.53125;\n    if (index == 38) limit = 0.15625;\n    if (index == 39) limit = 0.65625;\n    if (index == 40) limit = 0.8125;\n    if (index == 41) limit = 0.3125;\n    if (index == 42) limit = 0.9375;\n    if (index == 43) limit = 0.4375;\n    if (index == 44) limit = 0.78125;\n    if (index == 45) limit = 0.28125;\n    if (index == 46) limit = 0.90625;\n    if (index == 47) limit = 0.40625;\n    if (index == 48) limit = 0.25;\n    if (index == 49) limit = 0.75;\n    if (index == 50) limit = 0.125;\n    if (index == 51) limit = 0.625;\n    if (index == 52) limit = 0.21875;\n    if (index == 53) limit = 0.71875;\n    if (index == 54) limit = 0.09375;\n    if (index == 55) limit = 0.59375;\n    if (index == 56) limit = 1.0;\n    if (index == 57) limit = 0.5;\n    if (index == 58) limit = 0.875;\n    if (index == 59) limit = 0.375;\n    if (index == 60) limit = 0.96875;\n    if (index == 61) limit = 0.46875;\n    if (index == 62) limit = 0.84375;\n    if (index == 63) limit = 0.34375;\n  }\n\n  return brightness < limit ? 0.0 : 1.0;\n}\n\nvec3 dither8x8(vec2 position, vec3 color) {\n  return color * dither8x8(position, luma(color));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  vec2 p = fragCoord.xy / iResolution.xy - 0.5;\n  p.x *= iResolution.x / iResolution.y;\n  p.xy = abs(atan(p.xy)) * 5.;\n  float r = fbm2(p);\n  p /= (atan(TIME * 4.) + 1. * 2.) * 0.5;\n  r *= abs((0.2 - sdEquilateralTriangle(p.yx + r * 0.2)));\n  r *= abs(sdAxisAlignedRect(uv.xy, vec2(0.), vec2(1.)) * 8.);\n  vec3 col = vec3(0.1, 0.1, 0.1) / r;\n  col = pow(abs(col), vec3(.5));\n  vec3 d = dither8x8(fragCoord / iResolution.xy * DITH_RES, col);\n  fragColor = vec4(d, 1.);\n}\n","name":"Image","description":"","type":"image"}]}