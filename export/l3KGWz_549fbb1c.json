{"ver":"0.1","info":{"id":"l3KGWz","date":"1717536691","viewed":88,"name":"LiveArchive #03","username":"Flopine","description":"I'm digging up old shaders made during VJ sessions to archive them here! \n\nFamiBites 2020","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","isometric","vj"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n//FamiBites 2020\n\n#define PI acos(-1.)\n#define ITER 64.\n#define BPM (160./60.)\n\n#define time(speed) fract(iTime*speed)\n\n#define bouncy(speed) sqrt(abs(sin(time(speed)*PI)))\n#define switchanim(speed) floor(sin(time(speed)*2.*PI)+1.) \n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y>p.x) p = p.yx;\n}\n\nvoid moda(inout vec2 p, float rep)\n{\n    float per = (2.*PI)/rep;\n    float a = mod(atan(p.y,p.x)-per*.5,per)-per*0.5;\n    p = vec2(cos(a),sin(a))*length(p);\n}\n\nfloat box(vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat od (vec3 p ,float d)\n{return dot(p,normalize(sign(p)))-d;}\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r,abs(p.z)-h);}\n\nfloat room (vec3 p, float size)\n{\n    vec3 pp = p;\n\n    float d = max(p.y-.5,abs(box(p, vec3(size,3.,size)))-0.02);\n    p.xz *= rot(-time(0.2)*2.*PI);\n    mo(p.xz, vec2(2.));\n    p.x -= 0.5+bouncy(BPM/8.);\n    d = min(d, od(p,0.5));\n\n    p = pp;\n    moda(p.xz, 4.);\n    p.x -= size;\n    d = max(d,-box(p+vec3(0.,1.3,0.),vec3(0.05,0.7,size*.5)));\n\n    return d;\n}\n\nfloat ball (vec3 p, float speed)\n{\n    p.y -= -2.9+bouncy(speed)*8.; \n    return length(p)-0.8;\n}\n\nfloat ba, rom, pill; vec2 idba;\nfloat SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1.));\n    p.xz *= rot(PI/4.);\n    vec3 piso = p;\n\n    float size = 5.;\n    float per = size*2.3;  \n    idba = floor(p.xz/per);\n    p.xz = mod(p.xz,per)-per*.5;\n    ba = ball(p, BPM/2.+length(idba)*0.2);\n    float d = ba;\n\n    p = piso;\n    p.xz = mod(p.xz,per)-per*.5;\n    rom = room(p,size);\n    d = min(d,rom); \n\n    p = piso; \n    p.xz = mod(p.xz-per*5.*.5,per*5.)-per*5.*.5;\n    p.xz *= rot(time(BPM/8.)*2.*PI);\n    mo(p.xz, vec2(5.));\n    p.x -= 5.;\n    pill = cyl(p.xzy, (1.+sin(p.y)*0.5)+bouncy(BPM),15.);\n    d = min(d, pill);\n\n    return d;\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.01,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nvec3 rainbow(float t, vec3 c)\n{return vec3(.5)+vec3(.5)*cos(2.*PI*(c*t+vec3(0.,0.37,0.64)));}\n\nfloat mask (vec2 uv)\n{return smoothstep(0.1,0.2, sin(abs((uv.x+uv.y)-time(BPM/2.)*PI)-0.5));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    if(switchanim(BPM/4.)<=0.) mo(uv,vec2(0.2));\n\n    vec3 ro = vec3(uv*50.,-50.),\n    rd = vec3(0.,0.,1.),\n    p = ro,\n    l = normalize(vec3(1.,1.,-1.)),\n    col = vec3(0.,0.01,0.02);\n\n    float shad, d = 0.; bool hit = false;\n\n    for (float i=0.; i<ITER;i++)\n    {\n        d = SDF(p);\n        if (d<0.001)\n        {\n          hit = true;\n          shad = i/ITER;\n          break;\n        }\n        rd += (1.-mask(uv))*0.006;\n        p += d*rd;\n    }\n\n    if (hit)\n    {\n        if (d == ba) col = rainbow(idba.x,vec3(0.1));\n        if (d == rom) col = vec3(1.);\n        if (d == pill) col = vec3(0.8,0.5,0.1);\n        vec3 n = getnorm(p);\n        float lighting = dot(n,l)*.5+.5;\n        col *= lighting;\n    }\n    \n    col = (mask(uv)<=0.)? 1.-col:col;\n    \n    fragColor = vec4(sqrt(col),1.);\n}","name":"Image","description":"","type":"image"}]}