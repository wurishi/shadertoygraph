{"ver":"0.1","info":{"id":"ldBfRW","date":"1499693578","viewed":423,"name":"16 bit one channel color","username":"Jodie","description":"encoding rgb color into a single 16 bit channel","likes":1,"published":1,"flags":32,"usePreview":1,"tags":["encoding","encode","compress","compressing","onechannel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 decodeColor(float a){\n\tconst vec3 constant1 = color_rpositions / color_values;\n\tconst vec3 constant2 = color_values * color_rmaxValues;\n\n\treturn fract( a * constant1 ) * constant2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor.rgb = decodeColor(texture(iChannel0,uv).r);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float encodeColor(vec3 a){\n\tconst vec3 maxValues  = color_maxValues;\n\tconst vec3 constant1  = color_positions / 65535.;\n\n\treturn dot( floor( a * color_maxValues + .5 ), constant1 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor.r = encodeColor(texture(iChannel0,uv).rgb);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define color_bits vec3( 5, 6, 5 )\n#define color_values exp2( color_bits )\n#define color_rvalues (1. / color_values)\n#define color_maxValues (color_values - 1.)\n#define color_rmaxValues (1. / color_maxValues)\n#define color_positions vec3( 1., color_values.x, color_values.x*color_values.y )\n#define color_rpositions (65535. / color_positions)","name":"Common","description":"","type":"common"}]}