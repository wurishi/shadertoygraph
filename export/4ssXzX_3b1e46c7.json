{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//fast vec2 -> vec4 hash function for webgl\n//github.com/victor-shepardson\n\n//hash based on Blum, Blum & Shub 1986\n//and Sharpe http://briansharpe.wordpress.com/2011/10/01/gpu-texture-free-noise/\nfloat pi = 3.14159265359;\nfloat bbsm = 1739.;\nvec2 bbsopt(in vec2 a){\n\treturn fract(a*a*(1./bbsm))*bbsm;\n}\nvec2 mod1024(in vec2 a){\n\treturn fract(a*(1./1024.))*1024.;\t\n}\nvec4 hash(in vec2 pos){\n\tvec2 a0 = mod1024(pos*pi);\n\tvec2 a1 = bbsopt(a0);\n\tvec2 a2 = a1.yx + bbsopt(a1);\n\tvec2 a3 = a2.yx + bbsopt(a2);\n\treturn fract((a2.xyxy + a3.xxyy + a1.xyyx)*(1./bbsm));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tconst vec2 vel = vec2(60., 60.); //animation speed\n    const vec2 scale = vec2(1., 1.);\n\tconst int num = 1; //average multiple instances\n\t\n\tvec2 p = scale*floor(fragCoord.xy-vel*iTime);\n\t\n\tvec4 c = vec4(0.);\n\tfor(int i=0; i<num; i++)\n\t\tc+= hash(p+float(i*1024));\n\tc*=1./float(num);\n\t\n\tfragColor = vec4(c.x,c.y,c.z,c.w);\n\t\t\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4ssXzX","date":"1405135003","viewed":1617,"name":"Fast 2D Hash Function for WebGL","username":"victor_shepardson","description":"a pretty fast, pretty good looking function for hashing 2D integer coordinates to random 4-vectors, useful for grid based noises\n\nsee https://www.shadertoy.com/view/4tfyW4 for a webgl2 version with bitwise operations","likes":33,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","noise","random","hash"],"hasliked":0,"parentid":"","parentname":""}}