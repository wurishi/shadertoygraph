{"ver":"0.1","info":{"id":"dsKfW3","date":"1698735296","viewed":31,"name":"Random Rectangle Matrix","username":"Arbethi","description":"Shaders map pixels positions uv from [-1,1]² to color space [0,1]³ (ignoring alpha)\nHere we compute random rectangle matrix of shape (2,3) between these 2 spaces \n(with appropriate normalization for color space)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["random","projection","matrix"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shaders map pixels positions uv from [-1,1]² to color space [0,1]³ (ignoring alpha)\n// Here we compute random rectangle matrix of shape (2,3) between these 2 spaces \n// (with appropriate normalization for color space)\n\nfloat hash(vec2 p, float seed) {\n    vec2 m1 = vec2(3.12, 3.87 + seed);\n    float m2 = 437588.678;\n    return fract(sin(dot(p, m1)) * m2);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = 2. * fragCoord / iResolution.xy - 1.;\n    // Random parameters\n    float seed=1.;\n    uv*=10./2.;\n    vec2 fl_uv=floor(uv);\n    uv=2.*fract(uv)-1.;\n    uv *=  10.;\n    \n    // Initialize random matrix\n    mat2x3 w;\n    for(int i = 0; i < 2; i++) {\n        for(int j = 0; j < 3; j++) {\n            w[i][j] = hash(fl_uv + 0. + 2. * float(i) + 3. * float(j), seed);\n        }\n    }\n    w*=2.;\n    \n    // Matrix multiplication + Normalization\n    vec3 col = w * uv;\n    col = (col + 1.) / 2.;\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}