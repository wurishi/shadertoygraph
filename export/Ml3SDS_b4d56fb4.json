{"ver":"0.1","info":{"id":"Ml3SDS","date":"1481384416","viewed":884,"name":"Sierpinski2D","username":"EvilRyu","description":"Make use of symmetry","likes":11,"published":3,"flags":0,"usePreview":0,"tags":["2d","fractal","pattern","sierpinski"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by evilryu\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define sqrt3 1.732050808\n\n// Equilateral triangle is defined by\n// max(-2y, y-x*sqrt3, y+x*sqrt3) = R\n// R is the circumradius\nfloat tri(vec2 p, float r)\n{\n    float d=abs(max(-2.*p.y, max(p.y-sqrt3*p.x, p.y+sqrt3*p.x))-r);\n    return smoothstep(0.0,0.015,d);\n}\n\nvec2 symm(float a, float b, float c, vec2 p)\n{\n    float x = ((b*b-a*a)*p.x-2.0*a*b*p.y-2.0*a*c) / (a*a+b*b);\n    float y = ((a*a-b*b)*p.y-2.0*a*b*p.x-2.0*b*c) / (a*a+b*b);\n    return vec2(x,y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord.xy - iResolution.xy)/iResolution.y;\n \tp.y+=0.2;\n    \n    float s=1.0;\n    vec3 col=vec3(tri(p,s));\n\tp.y=-p.y;    \n    float iter = mod(floor(iTime),7.0);\n    for(int i = 0; i < 7; ++i)\n    {\n        if(i < int(iter+0.5))\n        {\n            s*=0.5;\n            col*=tri(p,s);\n\n            if(p.y+sqrt3*p.x>s)// Bottom right triangle\n                p=symm(sqrt3/3., 1.0, 0., p);// Folding along y+1/3*x\n\n            if(p.y-sqrt3*p.x>s)// Bottom left triangle\n                p=symm(-sqrt3/3., 1.0, 0., p);// Folding along y-1/3*x\n\n            p.y+=s;\n        }\n        else\n        {\n            // The animation\n            float a=-2.0*fract(iTime);\n            col*=tri(vec2(p.x*cos(a)-p.y*sin(a), p.y*cos(a)+p.x*sin(a)),\n                     fract(iTime)*s*0.5);\n        }\n    }\n    fragColor.xyz=col; \n}","name":"Image","description":"","type":"image"}]}