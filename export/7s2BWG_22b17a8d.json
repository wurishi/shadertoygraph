{"ver":"0.1","info":{"id":"7s2BWG","date":"1647009691","viewed":112,"name":"Pixelated spotlight","username":"soilmaster","description":"Simple shape and effect that follows the mouse when clicked","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["intro"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// -0.5 to 0.5\n// takes into account aspect ration\nvec2 normaliseToScreen(vec2 inVal)\n{\n    float aspectRatio = iResolution.x/iResolution.y;\n    vec2 outVal = inVal/iResolution.xy - vec2(0.5);\n    outVal.x *= aspectRatio; \n    return outVal;\n}\n\n#define NO_OF_PIXELS_ON_AXIS 80.\n\nfloat pixelate(float inVal)\n{\n    return (ceil(inVal * NO_OF_PIXELS_ON_AXIS) / NO_OF_PIXELS_ON_AXIS)  ;\n}\n\nvec2 pixelate(vec2 inVal)\n{\n    return vec2(pixelate(inVal.x), pixelate(inVal.y));\n}\n\nfloat circle(vec2 uv, float radius, float blurWidth)\n{\n    float o = length(uv);\n    return smoothstep(radius, radius-blurWidth, o);\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalise\n    vec2 uvMouse = normaliseToScreen(iMouse.xy);\n    vec2 uvFrag = normaliseToScreen(fragCoord.xy);\n    // offset screen pos by mouse pos to create illusion of cursor\n    vec2 uvOffset = uvFrag - uvMouse;\n\n\n    float o = circle(uvOffset, 0.1, 0.1);\n  \n    \n    fragColor = vec4(vec3(o), 1.0);\n}","name":"Image","description":"","type":"image"}]}