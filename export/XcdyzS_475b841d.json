{"ver":"0.1","info":{"id":"XcdyzS","date":"1730819254","viewed":337,"name":" cosmic space ","username":"nayk","description":"combination of many shaders from shadertoy\nsource https://www.shadertoy.com/view/XlfGRj https://www.shadertoy.com/view/MdXSzS https://www.shadertoy.com/view/wdtczM https://www.shadertoy.com/view/tllfRX","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["space","galaxy","stars","universe"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R(p,a,t) mix(a*dot(p,a),p,cos(t))+sin(t)*cross(p,a)\n#define R2(p,t) p*cos(t)+vec2(p.y,-p.x)*sin(t)\n#define H(h) (cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\n#define iterations 12\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n#define NUM_LAYERS 8.\n#define TAU 6.28318\n#define PI 3.141592\n#define Velocity .025 //modified value to increse or decrease speed, negative value travel backwards\n#define StarGlow 0.025\n#define StarSize 02.\n#define CanvasView 20.\n\n\nfloat Star(vec2 uv, float flare){\n    float d = length(uv);\n  \tfloat m = sin(StarGlow*1.2)/d;  \n    float rays = max(0., .5-abs(uv.x*uv.y*1000.)); \n    m += (rays*flare)*2.;\n    m *= smoothstep(1., .1, d);\n    return m;\n}\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\n\nvec3 StarLayer(vec2 uv){\n    vec3 col = vec3(0);\n    vec2 gv = fract(uv);\n    vec2 id = floor(uv);\n    for(int y=-1;y<=1;y++){\n        for(int x=-1; x<=1; x++){\n            vec2 offs = vec2(x,y);\n            float n = Hash21(id+offs);\n            float size = fract(n);\n            float star = Star(gv-offs-vec2(n, fract(n*34.))+.5, smoothstep(.1,.9,size)*.46);\n            vec3 color = sin(vec3(.2,.3,.9)*fract(n*2345.2)*TAU)*.25+.75;\n            color = color*vec3(.9,.59,.9+size);\n            star *= sin(iTime*.6+n*TAU)*.5+.5;\n            col += star*size*color;\n        }\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy) - .5;\n\tfloat t3 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t3);\n\tfloat co = cos(t3);\n\tmat2 ma = mat2(co, si, -si, co);\n    vec4 O=fragColor;\n    vec2 C= fragCoord;\n    vec3 dir=vec3(uv*zoom,1.);\n    vec3 from=vec3(1.,.5,0.5);\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n    vec2 uv3 = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 M = vec2(0);\n    M -= vec2(M.x+sin(iTime*0.22), M.y-cos(iTime*0.22));\n    M +=(iMouse.xy-iResolution.xy*.5)/iResolution.y;\n    float t4 = iTime*Velocity; \n    vec3 col4= vec3(0);  \n    for(float i=0.; i<1.; i+=1./NUM_LAYERS){\n        float depth = fract(i+t4);\n        float scale = mix(CanvasView, .5, depth);\n        float fade = depth*smoothstep(1.,.9,depth);\n        col4 += StarLayer(uv*scale+i*453.2-iTime*.05+M)*fade;} \n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p3=from+s*dir*.5;\n\t\tp3 = abs(vec3(tile)-mod(p3,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp3=abs(p3)/dot(p3,p3)-formuparam; \n            p3.xy*=mat2(cos(iTime*0.01),sin(iTime*0.01),-sin(iTime*0.01) ,cos(iTime*0.01));// the magic formula\n\t\t\ta+=abs(length(p3)-pa); // absolute sum of average change\n\t\t\tpa=length(p3);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n   vec4 o =fragColor;\n   vec2 F=fragCoord;\n vec2 R = iResolution.xy; \n    o-=o;\n    for(float d,t = -iTime*0.01, i = 0. ; i > -1.; i -= .06 )          \t\n    {   d = fract( i -3.*t );                                          \t\n        vec4 c = vec4( ( F - R *.5 ) / R.y *d ,i,0 ) * 2.;            \t\n        for (int j=0 ; j++ <27; )                                      \t\n            c.xzyw = abs( c / dot(c,c)                                 \t\n                    -vec4( 7.-.2*sin(t) , 6.3 , .7 , 1.-cos(t/.8))/7.);\t\n       o -= c * c.yzww  * d--*d  / vec4(1,2,1,1);                     \n    }\nvec2 uv2 = (C.xy / iResolution.xy) - .5;\nfloat t2 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .37)) * 2.2;\n\tfloat si2 = sin(t2);\n\tfloat co2 = cos(t2);\n\tmat2 ma2 = mat2(co2, si2, -si2, co2);\n\n    vec3 p,q,r=iResolution,c=vec3(0),\n    d=normalize(vec3((C-.5*r.xy)/r.y,1.));\n    float i=0.,e,g=0.,t=iTime;\n\tfor(;i++<90.;)\n    {\n   \n        p=R(g*d,normalize(H(t*.001)*2.),0.);\n      \n      \n     \n        q=p;\n        p.z-=t*1.01;\n        \n        p=abs(fract(p)-.5);\n        e=length(p)-.15;\n        p=p.x<p.z?p.zyx:p;\n        p=p.x>p.y?p.yxz:p;\n         \n       \n        g+=e=max(-e,length(p.xy))*0.7;\n\t    c+=mix(vec3(1),H(q.z*1.15+.4),.7)*.4/exp(30.*e)/g;\n\t}\n    O=vec4(c,1);\n\tfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\t\n\tfloat s3 = 0.0;\n\tfor (int i = 0; i < 40; i++)\n\t{\n\t\tvec3 p = s3 * vec3(uv, 0.0);\n\t\t\n\t\tp += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1)+O.xyz*o.xyz;\n\t\tfor (int i = 0; i < 8; i++)\tp = abs(p) / dot(p,p) - 0.659;\n\t\tv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\n\t\tv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\n\t\tv3 += length(p.xy*10.) * .0003;\n\t\ts3  += .035;\n\t}\n\t\n\tfloat len = length(uv);\n\tv1 *= smoothstep(2.2, .0, len);\n\tv2 *= smoothstep(.52, .0, len);\n\tv3 *= smoothstep(2.5, .0, len);\n\t\n\tvec3 col = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n\t\t\t\t\t(v1 + v3) * .3,\n\t\t\t\t\t v2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n\n\tfragColor=vec4(min(pow(abs(col*v*.03*col4)*30.+o.xyz*vec3(0.1,0.1,4.)*3., vec3(1.2)), 1.0), 1.0);\n}","name":"Image","description":"","type":"image"}]}