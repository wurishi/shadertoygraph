{"ver":"0.1","info":{"id":"Xfc3RS","date":"1711804415","viewed":33,"name":"tp3nourbaananou","username":"nbaananou","description":"tp3","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["t"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2024.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\nstruct Ray {\nvec3 ro; // Ray origin\nvec3 rd; // Direction\n};\n\n// Compute a point on the ray\n// ray : Ray\n// t   : depth\nvec3 Point(Ray ray,float t)\n{\n  return ray.ro+t*ray.rd;\n}\n\n// Compute the ray\n//     m : Mouse position\n//     p : Pixel\nRay CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x; \n  float le=3.5;\n  \n  // Origin\n  vec3 ro=vec3(35.,0.,10.)*Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,3.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return Ray(ro,rd);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Plane\n// p : point\n// c : center of skeleton\n// n : Normal\nfloat Plane(vec3 p,vec3 c,vec3 n)\n{\n  return dot(p-c,n);\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n// Union, extension to four sub-trees\n// a,b,c,d : field function of left, right, and additional sub-trees\nfloat Union(float a,float b,float c,float d)\n{\n  return min(min(a,b),min(c,d));\n}\n\n// Difference\n// a,b : field function of left and right sub-trees\nfloat Difference(float a,float b)\n{\n  return max(a,-b);\n}\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n  float v=  Sphere(p,vec3(3.,0.,6.),4.);\n\n  v=Union(v,\n    Sphere(p,vec3(0.,2.,3.),3.));\n  \n  float d=Union(\n      Sphere(p,vec3(5.,1.,5.),3.),\n    Sphere(p,vec3(-1.,1.,6.),3.),\n    Sphere(p,vec3(-1.,2.,2.),2.),\n    Sphere(p,vec3(1.,1.,6.),2.));\n  v=Difference(v,d);\n  \n  v=Union(v,\n    Plane(p,vec3(0.,0.,-1.),vec3(0.,0.0,1.0))\n  );\n  \n  return v;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n\n// Trace ray using ray marching\n// ray : Ray \n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(Ray ray,float e,out bool h,out int s)\n{\n   h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n\n// d : Ray direction\nvec3 Background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shading and lighting\n\n\n// Fonction de génération de nombres aléatoires\nfloat rand(vec2 co) {\n    float a = 12.9898, b = 78.233, c = 43758.5453;\n    float dt = dot(co.xy, vec2(a, b)), sn = mod(dt, 3.14);\n    return fract(sin(sn) * c);\n}\n\n\n// Générer une direction aléatoire dans l'hémisphère orienté par la normale 'n'\nvec3 hemisphereSample_uniform(float u, float v, vec3 n) {\n    // u et v sont des nombres aléatoires dans l'intervalle [0,1]\n    float phi = v * 2.0 * 3.1415926535897932384626433832795;\n    float cosTheta = 1.0 - u;\n    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n    vec3 s;\n    s.x = cos(phi) * sinTheta;\n    s.y = sin(phi) * sinTheta;\n    s.z = cosTheta;\n    vec3 up = abs(n.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n    vec3 tangent = normalize(cross(up, n));\n    vec3 bitangent = cross(n, tangent);\n    return s.x * tangent + s.y * bitangent + s.z * n;\n}\n\n// Fonction d'ombres douces\nfloat SoftShadow(vec3 ro, vec3 rd, float start, float end, float k, int samples) {\n    float shadow = 1.0;\n    float t = start;\n    for (int i = 0; i < samples; ++i) {\n        float h = object(Point(Ray(ro, rd), t));\n        if (h < 0.001) return 0.0;\n        shadow = min(shadow, k * h / t);\n        t += clamp(h, 0.02, 0.10);\n        if (t >= end) break;\n    }\n    return shadow;\n}\n\n// Fonction d'occlusion ambiante\nfloat AmbientOcclusion(vec3 p, vec3 n, int samples) {\n    float ao = 0.0;\n    float scale = 1.0;\n    for (int i = 0; i < samples; ++i) {\n        vec2 randVec = vec2(rand(p.xy + float(i)), rand(p.xz + float(i)));\n        vec3 sampleDir = hemisphereSample_uniform(randVec.x, randVec.y, n);\n        float len = scale * randVec.y;\n        Ray aoRay = Ray(p + n * Epsilon, sampleDir);\n        bool hit;\n        int steps;\n        float dist = SphereTrace(aoRay, len, hit, steps);\n        if (hit) ao += 1.0 - smoothstep(0.0, scale, dist);\n    }\n    return 1.0 - ao / float(samples);\n}\n\n\n  \n // Ombres dures\nfloat Shadow(vec3 p, vec3 lightPos) {\n  vec3 dir = normalize(lightPos - p);\n  Ray shadowRay = Ray(p + dir * 0.01, dir);\n  bool hit;\n  int steps;\n  float dist = SphereTrace(shadowRay, length(lightPos - p), hit, steps);\n  return hit ? 0.0 : 1.0;\n}\nvec3 Shade(vec3 p, vec3 n, vec3 rd) {\n    const vec3 lp = vec3(5.0, 10.0, 30.0); // Emplacement de la source lumineuse\n    vec3 l = normalize(lp - p); // Direction de la lumière\n    vec3 ambient = vec3(0.25); // Couleur ambiante\n    float diff = max(dot(n, l), 0.0);\n    \n    float shadowHard = Shadow(p, lp);\n    float shadowSoft = SoftShadow(p + n * Epsilon, l, 0.1, 10.0, 8.0, 16);\n    float occlusion = AmbientOcclusion(p, n, 16);\n\n    //couleur\n    vec3 color = ambient + diff * shadowHard * shadowSoft * vec3(1.0, 1.0, 1.0) * occlusion;\n    return color;\n\n}\n    \n\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)  \n{\n  // Pixel\n  vec2 pixel=(-iResolution.xy+2.*pxy)/iResolution.y;\n\n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  Ray ray=CreateRay(m,pixel);\n  \n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n   // Trace ray\n float t=SphereTrace(ray,75.,hit,s);\n  \n  // Shade background\n  vec3 rgb=Background(ray.rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=Point(ray,t);\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,-ray.rd);\n  }\n    \n  color=vec4(rgb,1.);\n}\n","name":"Image","description":"","type":"image"}]}