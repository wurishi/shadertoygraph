{"ver":"0.1","info":{"id":"ssfGDf","date":"1616685946","viewed":150,"name":"Lemniscate of Bernoulli - DE II","username":"oneshade","description":"I tried gradient descent and bisection as well as a combination of them but none of them worked so I ended up brute forcing it, at least it has some symmetry! Suggestions for other optimization methods are welcome!","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["bernoulli","parametric","approximate","lemniscate","propeller"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nPrevious distance estimation: https://www.shadertoy.com/view/3tKyD3\nIt is much faster than this one and is a decent estimate (good enough\nto raymarch in around 100 steps)\n\nDesmos graph: https://www.desmos.com/calculator/fmafjbtbu4\n*/\n\n#define dot2(v) dot(v, v)\n\nfloat sqLineDist(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return dot2(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\n// Parametrized lemniscate of Bernoulli\nvec2 pos(in float t, in vec2 ab) {\n    return vec2(cos(t), sin(t)) * ab * sqrt(max(0.0, cos(2.0 * t)));\n}\n\n// ab: vec2(lobe width, lobe height)\nfloat sdPropeller(in vec2 p, in vec2 ab) {\n    p = abs(p);\n    float dt = 0.025; // Adjust to desired accuracy\n    vec2 prev = pos(dt, ab);\n    float dist = sqLineDist(p, pos(0.0, ab), prev);\n    for (float t=2.0 * dt; t < 0.78539816339 + dt; t += dt) {\n        vec2 cur = pos(t, ab);\n        dist = min(dist, sqLineDist(p, prev, cur));\n        prev = cur;\n    }\n\n    p = p / ab * sqrt(2.0);\n    float sgn = sign(dot2(vec2(p.x - 1.0, p.y)) * dot2(vec2(p.x + 1.0, p.y)) - 1.0);\n    return sqrt(dist) * sgn;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 3.0;\n\n    float d = sdPropeller(uv, 1.0 + vec2(cos(iTime), sin(iTime)));\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(140.0 * d);\n\tcolor = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, abs(d)));\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}