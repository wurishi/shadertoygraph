{"ver":"0.1","info":{"id":"Dsfczr","date":"1686508256","viewed":137,"name":"Height to Normal - NatLab","username":"NatShadLab","description":"create normals from height input, apply a diffuse and specular lighting on top of it.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["normalmap","bump","normal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 softligth( vec3 x, vec3 y){\n    vec3 result = 2.*x*y + x*x*(1.-2.*y);\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 uv2 =  (fragCoord-iResolution.xy)/iResolution.y;\n    vec2 uvX = uv;\n    vec2 uvY = uv;\n    \n    uvX.x -= 1. / iResolution.y;\n    uvY.y -= 1. / iResolution.y;\n\n    vec3 tex0 = texture(iChannel0, uv).xyz;\n    vec3 tex1 = texture(iChannel0, uvX).xyz;\n    vec3 tex2 = texture(iChannel0, uvY).xyz;\n    \n\n    \n    vec3 nor;\n    nor.x = tex1.x - tex0.x;\n    nor.y = tex2.x - tex0.x;\n    nor.z = pow(1.-((nor.x * nor.x)+(nor.y * nor.y)),.5);\n    nor.xy *= 100.;\n    nor = normalize(nor);\n    vec3 normalmap = vec3(.5) * ( vec3(1.) +nor);\n    \n    vec3 curv = texture(iChannel2, uv).xyz;\n    float h = texture(iChannel1, uv2).x;\n    \n    vec3 cam = vec3(0.,0.,-1.);\n    \n    //BaseColor\n    vec3 col = vec3(0.953,0.718,0.447);\n    col = mix(1.- col,col * col, h);\n    //col = mix(col * mix(.5,1.,h), vec3(1.), pow(h,1.618));\n    \n    col = softligth(col, vec3(sqrt(h)));\n    col = mix(col, softligth(col, vec3(.5+ .5*nor.y)), .618); \n    col = mix(col, softligth(col, curv.xyz), .618);\n    \n    float gloss = mix(0., 1.618, clamp(length(col),0.,1.));\n    \n    vec3 dirlight = normalize(vec3(sin(iTime)*.5,cos(iTime)*.5,2.5));\n    float lightstr = 1.;    \n    float dirdif = pow(clamp(mix(.5,1.,dot(nor, dirlight)),0.,1.),gloss) * lightstr * length(col);\n    float spec = pow(clamp(dot(nor, normalize(mix(cam,dirlight,.5))),0.,1.),gloss) * lightstr *  length(col);\n    \n    float shades = dirdif + spec;\n    \n\n    \n\n    vec3 speccol = col * spec;\n    \n    col = mix(col * dirdif + speccol, vec3(1.),clamp(shades-1.,0.,1.));\n    \n    //col = vec3(h);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy)/iResolution.y;\n    vec3 tex = texture(iChannel1, uv).xyz;\n    \n    fragColor = vec4(tex,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float HeightMap( vec2 p ){\n\treturn texture(iChannel0, p).x;\n}\nfloat Curve( vec2 p, vec2 o ){\n\tfloat a = HeightMap(p+o);\n\tfloat b = HeightMap(p-o);\n\treturn -a - b;\n}\nfloat CurvatureMap( vec2 p, float r ){\n\tconst float q = 8.0; // sample quality\n\tfloat s = r/q;\n\tfloat H = HeightMap(p)*2.0;\n\tfloat v = 0.0;\n\tvec2 o;\n\tfor( o.x = -q; o.x < q; o.x++ )\n\tfor( o.y = -q; o.y < q; o.y++ ){\n\t\tfloat c = Curve(p, o*s);\n\t\tv += (H + c) * ((r-length(o*s)) / r);\n\t}\n\treturn v/(q*q);\n}\n\nvoid mainImage( out vec4 oFragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord-iResolution.xy)/iResolution.y;\n\tfloat c;\n    float s = 4.;\n\tc += CurvatureMap(uv, s/iResolution.y)*8.0; // sharp curvature\n\tc += CurvatureMap(uv, 2.*s/iResolution.y)*4.0; // sharp curvature\n\tc += CurvatureMap(uv, 4.*s/iResolution.y)*2.; // sharp curvature\n    oFragColor.rgb = vec3(.5 + c );\n\toFragColor.a = 1.0;\n}\n","name":"Buffer B","description":"","type":"buffer"}]}