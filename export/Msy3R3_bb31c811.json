{"ver":"0.1","info":{"id":"Msy3R3","date":"1455578086","viewed":1229,"name":"Lorenz Attractor Divergence","username":"Flyguy","description":" Each pixel is a chaotic Lorenz attractor with the initial conditions varying with screen position which will eventually diverge into random noise.","likes":9,"published":3,"flags":32,"usePreview":0,"tags":["math","attractor","chaos","lorenz"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define XYZ 0\n#define GRADIENT 1\n\n#define DISP_MODE GRADIENT\n\nvec3 Grad(float x)\n{\n    x = clamp(x, 0.0, 1.0);\n    \n    vec3 col = vec3(1);\n    \n    col = mix(col, vec3(1.00, 0.50, 0.00), pow(x, 0.3));\n    col = mix(col, vec3(0.40, 0.00, 0.30), smoothstep(0.05,0.8,x));\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 p = texture(iChannel0, uv);\n    \n    float l = length(p*0.015)-0.05;\n    \n    vec3 c = vec3(0);\n    \n    #if(DISP_MODE == XYZ)\n    c = abs(p.xyz * 0.06);\n    #elif(DISP_MODE == GRADIENT)\n    c = Grad(log(1.0 + p.w/iTimeDelta)/log(10.0));\n    #endif\n    \n\tfragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n//https://en.wikipedia.org/wiki/Lorenz_system\n\n//Settings\n#define STEPS 64.0\n#define SPEED 0.02\n\n//System Parameters\nfloat O = 10.0;\nfloat P = 28.0;\nfloat B = 8.0/3.0;\n\n//Initial Position (startOrig +/- startRang)\nvec3 startOrig = vec3(64.0, 5.0, 30.0);\nvec2 startRang = vec2(30.0, 30.0);\n\n//Calculate the next position \nvec3 Integrate(vec3 cur, float dt)\n{\n\tvec3 next = vec3(0);\n    \n    next.x = O * (cur.y - cur.x);\n    next.y = cur.x * (P - cur.z) - cur.y;\n    next.z = cur.x*cur.y - B*cur.z;\n    \n    return cur + next * dt;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 res = iResolution.xy / iResolution.y;\n    vec2 uv = fragCoord / iResolution.y;\n    //uv.x += 1.0-res.x;\n    \n    vec3 last = texture(iChannel0, uv/res).xyz;\n    vec3 next = vec3(0);\n    vec3 vel = vec3(0);\n    \n    for(float i = 0.0;i < STEPS;i++)\n    {\n    \tnext = Integrate(last, iTimeDelta * SPEED);\n        vel = next - last;\n        last = next;\n    } \n\n    if(iFrame == 5) //Setup initial conditions.\n    {\n        uv = (uv - res/2.0) * 2.0;\n        \n        startOrig.yz += uv.xy * startRang;\n        \n        fragColor = vec4(startOrig, 0);\n    }\n    else //Save current position.\n    {\n        fragColor = vec4(next, length(vel));\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}