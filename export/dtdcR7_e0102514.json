{"ver":"0.1","info":{"id":"dtdcR7","date":"1699027359","viewed":21,"name":"Fork Fork Paral ElSolem 909","username":"ElSolem","description":"It uses the iCamPos for parallax view but it cause issues on the reflection. Still fun to mess with it though. [url]https://cineshader.com/view/wtdSR8[/url]\n\nAdding xy = x/y just to see what it does","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["triangle","cineshader"],"hasliked":0,"parentid":"DtdyRM","parentname":"Fork Parallax v Ars77"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415\n#define TAU PI * 2.\n#define rot( r ) mat2(cos(r), sin(r), -sin(r), cos(r) )\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec3 opRep( in vec3 p, in vec3 c, in vec3 l)\n{\n    return p-c*clamp(round(p/c),-l,l);\n}\n\n// IQ\nfloat tri( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat rep(inout vec2 p, float rep) \n{\n\n    float an = TAU/rep;\n    \n    float fa = (atan(p.y,p.x)+an*0.5)/an;\n    float ia = floor( fa );\n    \n    float sym = an*ia;\n    \n    p *= rot(sym);\n\n    return ia;\n}\n\n\nfloat tex( vec2 u ){\n    \n    u.y -= 1. / 3.;\n    \n    vec2 u2 = u;\n    float p = 1.;\n    // fpos\n    for( float i = 0.; i < 3.; i++ ){\n        u2.y += sqrt( 3. ) * .1;\n        u2.x = abs( u2.x ) - .1;\n        p = min(\n            p,\n            tri( u2, .1 )\n        );\n    }\n    \n    p = min(\n        p,\n        tri( u, .1 )\n    );\n    \n    return p;\n}\n\nfloat TFace( vec3 p ){\n    /*\n    // tri geo\n    float py = clamp( -p.y, 0., 1. );\n    py = abs( py ) - .01;\n    \n    return max(\n        tri( p.xz, 1. * py ),\n        abs( p.y ) - .2\n    );\n    \n    */ \n    \n    // faces\n    \n    return max(\n        tri( p.xy, .21 ),\n        abs( p.z ) - .001\n    );\n}\n\nfloat map( vec3 p ){\n\n    \n    \n    return TFace( p );\n}\n\n\nvec3 calcNormal( in vec3 p )\n{\n    const float h = 1e-5; // or some other value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Convert pixel coordinates to a normalized range (-1 to 1)\n    vec2 p = (2.0*fragCoord-iResolution.xy)/min(iResolution.y,iResolution.x);\n\n    // Calculate the value of xy using your equation\n    float xy = p.x / p.y;\n\n    // Define a threshold for plotting the point\n    float threshold = 2.4; // Adjust this value as needed // air: 1.0, water: 1.33, glass: 1.5, diamond: 2.4\n\n    // Check if xy is within the threshold to plot the point\n    if (abs(xy) > abs(threshold))\n    {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // use different camera setting for CineShader\n    #ifdef IS_CINESHADER\n    \n    // use the relative position of the camera to the center of the screen as ray origin\n\tvec3 rayOri = iCamPos;\n    \n    // screen size is 6m x 6m, or you can use iScreenSize.xy(CineShader only) to get the screen size\n\tvec3 rayDir = normalize(vec3((uv - 0.5) * vec2(iResolution.x/iResolution.y, 1.0) * 1.0, 0.0) - iCamPos);\n    \n    // make the maxDepth further\n    float maxDepth = 30.0;\n    #else\n\tvec3 rayOri = vec3((uv - 0.5) * vec2(iResolution.x/iResolution.y, 1.0) * 1.0, 3.0);\n\tvec3 rayDir = vec3(0.0, 0.0, -1.0);\n    float maxDepth = 6.0;\n    #endif\n\t\n\tfloat depth = 0.0, dist;\n\tvec3 p;\n\t\n\tfor(int i = 0; i < 64; i++) {\n\t\tp = rayOri + rayDir * depth;\n        \n        p.x = abs( p.x ) - .25,\n        p.xz *= rot( iTime ),\n        rep( p.xz , 3. ),\n        p.x -= .105,\n        p.y += .1,\n        p.xz *= rot( PI * .5 ),\n        p.yz *= rot( PI * .11 ),\n        p.y -= .1;\n        \n\t\tdist = map(p);\n        \n        \n        depth += dist;\n\t\tif (abs(xy) > abs(threshold)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n    depth = min(maxDepth, depth);\n\tvec3 n = calcNormal(p);\n    float b = max(0.0, dot(n, vec3(0.577)));\n    vec3 col = (0.5 + 0.5 * cos((b + iTime * 3.0) + uv.xyx * 2.0 + vec3(0,2,4))) * (0.85 + b * 0.35);\n    \n        \n    if(abs(xy) > abs(threshold)){\n        col -= vec3( step( tex( p.xy * 2. ), 0. ) * max( -calcNormal( p ).z, 0. ) ) * .2;\n    }\n    \n    col *= exp( -depth / maxDepth );\n\t\n    #ifdef IS_CINESHADER\n    // set the screen thickness to zero in CineShader\n    fragColor = vec4(col, 0.0);\n    #else\n    // maximum thickness is 2m in alpha channel\n    fragColor = vec4(col, 1.0 - (depth - 0.5) / 2.0);\n    #endif\n    }\n    else\n    {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // use different camera setting for CineShader\n    #ifdef IS_CINESHADER\n    \n    // use the relative position of the camera to the center of the screen as ray origin\n\tvec3 rayOri = iCamPos;\n    \n    // screen size is 6m x 6m, or you can use iScreenSize.xy(CineShader only) to get the screen size\n\tvec3 rayDir = normalize(vec3((uv - 0.5) * vec2(iResolution.x/iResolution.y, 1.0) * 1.0, 0.0) - iCamPos);\n    \n    // make the maxDepth further\n    float maxDepth = 30.0;\n    #else\n\tvec3 rayOri = vec3((uv - 0.5) * vec2(iResolution.x/iResolution.y, 1.0) * 1.0, 3.0);\n\tvec3 rayDir = vec3(0.0, 0.0, -1.0);\n    float maxDepth = 6.0;\n    #endif\n\t\n\tfloat depth = 0.0, dist;\n\tvec3 p;\n\t\n\tfor(int i = 0; i < 64; i++) {\n\t\tp = rayOri + rayDir * depth;\n        \n        p.x = abs( p.x ) - .25,\n        p.xz *= rot( iTime ),\n        rep( p.xz , 3. ),\n        p.x -= .105,\n        p.y += .1,\n        p.xz *= rot( PI * .5 ),\n        p.yz *= rot( PI * .11 ),\n        p.y -= .1;\n        \n\t\tdist = map(p);\n        \n        \n        depth += dist;\n\t\tif (abs(xy) > abs(threshold)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n    depth = min(maxDepth, depth);\n\tvec3 n = calcNormal(p);\n    float b = max(0.0, dot(n, vec3(0.577)));\n    vec3 col = (0.5 + 0.5 * cos((b + iTime * 3.0) + uv.xyx * 2.0 + vec3(0,2,4))) * (0.85 + b * 0.35);\n    \n        \n    if(abs(xy) > abs(threshold)){\n        col -= vec3( step( tex( p.xy * 2. ), 0. ) * max( -calcNormal( p ).z, 0. ) ) * .2;\n    }\n    \n    col *= exp( -depth / maxDepth );\n\t\n    #ifdef IS_CINESHADER\n    // set the screen thickness to zero in CineShader\n    fragColor = vec4(col, 0.0);\n    #else\n    // maximum thickness is 2m in alpha channel\n    fragColor = vec4(col, 1.0 - (depth - 0.5) / 2.0);\n    #endif\n    }\n}\n\n/** SHADERDATA\n{\n\t\"title\": \"Parallax view on Cineshader\",\n\t\"description\": \"It uses the iCamPos for parallax view but it cause issues on the reflection. Still fun to mess with it though.\",\n\t\"model\": \"person\"\n}\n*/","name":"Image","description":"","type":"image"}]}