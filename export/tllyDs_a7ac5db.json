{"ver":"0.1","info":{"id":"tllyDs","date":"1593496027","viewed":398,"name":"Blue Warping Waves","username":"jackwitherell","description":"Combining Tiling, sin SDF on one axis, gradients, wave scaling, color filter","likes":2,"published":3,"flags":2,"usePreview":0,"tags":["webcam","skooma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Cheated Noise: https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n// Stole some Pi: https://gist.github.com/patriciogonzalezvivo/986341af1560138dde52\n\nconst float PI = 3.1415926535897932384626433832795;\n\nvec2 fade(vec2 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\n\nfloat cnoise(vec2 P){\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n  vec4 i = permute(permute(ix) + iy);\n  vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\n  vec4 gy = abs(gx) - 0.5;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n  vec4 norm = 1.79284291400159 - 0.85373472095314 * \n    vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv *= vec2(sin(uv.x+iTime)+3.0);\n    vec4 col;\n    float pscale = 6.0;\n    if((mod((fragCoord.x+(15.0*sin((fragCoord.y/18.0)+(iTime/2.0)*18.0)))/pscale, 8.0)<1.0)||(mod(fragCoord.y/pscale, 8.0)<1.0)){\n        col = vec4(uv.y,0.3,1.0,1.0);\n    }\n    else{\n        float lights=cnoise(uv+iTime*0.5);\n        col = vec4(lights, 0.5, 1.0, 1.0);\n    }\n    col*=texture(iChannel0,mod(uv,1.0))*vec4(1.7,1.7,1.7,1.0);\n\tfragColor = col;\n}","name":"Image","description":"","type":"image"}]}