{"ver":"0.1","info":{"id":"lcBBzR","date":"1724565867","viewed":46,"name":"Collection of implicit surfaces","username":"Efim","description":"Rendering implicit surfaces. Using raytracing and binary searchy. \nHere, these same surfaces are obtained by creating grids using an algorithm \n3D Marching Cubes: https://flightphone.github.io/paramgeometry.html\n","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","surfaces","implicit","bisect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////=====================================================================================\n//Collection of implicit surfaces. implicit surfaces, raytracing, binary search\n/*\nRendering implicit surfaces. Using raytracing and binary searchy. \nHere, these same surfaces are obtained by creating grids using an algorithm \n3D Marching Cubes: https://flightphone.github.io/paramgeometry.html\n*/\n#define PI  3.14159265359\n#define TAU 6.28318530718\n#define rot(f) mat2(cos(f), -sin(f), sin(f), cos(f))\n#define nn 128.\n#define newton 8\nfloat csurf = 0.;\nfloat dist_infin =2.2;\nvec3 q1, q2, q3, q4, q5;\nfloat potential(vec3 p) {\n        float res = 0.;\n        res += 0.55/length(p - q1);\n        res += 0.55/length(p - q2);\n        res += 0.55/length(p - q3);\n        res += 0.55/length(p - q4);\n        res += 0.55/length(p - q5);\n        return 4.5 - res;\n    }\n\nfloat heart(vec3 p)\n    //https://www.shadertoy.com/view/XtXGR8\n    {\n        float x = p.x, y = p.z, z = p.y;\n        float s = sin(iTime * 5.0);\n        s *= s;\n        s *= s;\n        s *= 0.2;\n        float a = (x*x + 2.25*y*y + z*z - (1.+s));\n        return a*a*a - (x*x + 0.1125*y*y)*z*z*z;\n    }    \n\n\nfloat kummerj(vec3 p) {\n        p.xz*=rot(PI/4.);\n        p.yx*=rot(PI/2.);\n        float x = p.x, y = p.y, z = p.z;\n        return x * x * x * x + y * y * y * y + z * z * z * z - 5. * (x * x * y * y + y * y * z * z + z * z * x * x) + 56. * x * y * z -\n            20. * (x * x + y * y + z * z) + 16.;\n        \n    }\n\nfloat gyroide(vec3 p) {\n    float x = p.x, y = p.y, z = p.z; \n    return cos(x) * sin(y) + cos(y) * sin(z) + cos(z) * sin(x);\n}\n\nfloat isf(vec3 p) {\n   float x = p.x, y = -p.z, z = p.y; \n   return (2. * y * (y * y - 3. * x * x) * (1. - z * z) + (x * x + y * y) * (x * x + y * y) - (9. * z * z - 1.) * (1. - z * z));// IMPLICIT SURFACE Function\n}\nfloat desimp(vec3 p)\n{\n    float res = p.x*p.x + p.y*p.y + p.z*p.z + sin(4.*p.x) + sin(4.*p.y) + sin(4.*p.z) - 1.11;\n    return (res);\n}\n\nfloat cassinian(vec3 p) {\n\n        p.xy*=rot(PI/4.);\n        p.yz*=rot(PI/4.);\n        float res = 1., b = 4.15, h0 = 3., h1 = 5.0, r = (h0 + h1)/2. - (h1 - h0)/2.*cos(2.*iTime);\n        \n        for (float i = 0.; i < 2.; i++)\n            for (float j = 0.; j < 2.; j++)\n                for (float k = 0.; k < 2.; k++)\n                    res *= length(p - vec3(r * (i - 0.5), r * (j - 0.5), r * (k - 0.5)));\n        return res - b * b * b * b * r * r * r * r;\n    }    \n\n\nfloat map(vec3 p) {\n    if (csurf == 0.)\n        return desimp(p);\n    if (csurf == 1.)\n        return isf(p);\n    if (csurf == 2.)\n        return cassinian(p);\n    if (csurf == 3.)\n        return gyroide(p);\n    if (csurf == 4.)\n        return potential(p);\n    if (csurf == 5.)\n        return kummerj(p);\n    if (csurf == 6.)\n        return heart(p);  \n}\n\n\nvec3 calcNormal(in vec3 p) {\n    const float eps = 0.0001;\n    vec2 q = vec2(0.0, eps);\n\tvec3 res =  vec3(map(p+q.yxx) - map(p-q.yxx), \n\t\t\t    map(p+q.xyx) - map(p-q.xyx),\n\t\t\t    map(p+q.xxy) - map(p-q.xxy));\n    return normalize(res);\n}\n\nvec3 getPoint(vec3 a, vec3 b, float v0, float v1) {\n            vec3 m;\n            //binary search with  n iterations, n = newton\n            for (int i = 0; i < newton; i++) {\n                m = (a+b)*0.5;\n                float v = map(m);\n                if (v == 0.)\n                    break;\n\n                if (sign(v) * sign(v0) <= 0.) {\n                    v1 = v;\n                    b = m;\n                }\n                else {\n                    v0 = v;\n                    a = m;\n                }\n            }\n            return m;\n        }\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l - p), r = normalize(vec3(f.z, 0, -f.x)), u = cross(f, r), c = f * z, i = c + uv.x * r + uv.y * u;\n    return normalize(i);\n}\n\nvec3 calccolor(vec3 col_in, vec3 backcol, vec3 rd, vec3 light1, vec3 light2, vec3 nor) {\n    vec3 col = col_in;\n    float d = dot(rd, nor);\n    if(d < 0.0)\n        col = backcol;\n\n    float difu1 = dot(nor, light1);\n    float difu2 = dot(nor, light2);\n    float difu = max(difu1, difu2);\n   \n\n    vec3 R1 = reflect (light1, nor);\n    vec3 R2 = reflect (light2, nor);\n    float shininess=20.0;\n    float specular1    =  pow(max(dot(R1, rd), 0.), shininess);\n    float specular2    =  pow(max(dot(R2, rd), 0.), shininess);\n    float specular = max(specular1, specular2);\n    col = col*(col*clamp(difu, 0., 1.0) + 0.3) + vec3(.5)*specular*specular;\n    col = sqrt(col);    \n    return col;\n}\n\nvoid initQ()\n{\n    float x, y, z, i, time = 2.*iTime;\n    i = 1.;\n    x = sin(i + 0.62 * time * (1.03 + 0.5 * cos(1.51 * i)))*0.3;\n    y = (cos(i + 1.17 * time * cos(1.22 + 1.1424 * i)))*0.8; // dip into the floor //Math.abs\n    z = cos(i + 0.51 * time * 0.1 * sin((0.92 + 1.43 * i)))*0.3;\n    q1 = vec3(x, y, z);\n\n    i = 2.;\n    x = sin(i + 0.62 * time * (1.03 + 0.5 * cos(1.51 * i)))*0.3;\n    y = (cos(i + 1.17 * time * cos(1.22 + 1.1424 * i)))*0.8; // dip into the floor //Math.abs\n    z = cos(i + 0.51 * time * 0.1 * sin((0.92 + 1.43 * i)))*0.3;\n    q2 = vec3(x, y, z);\n\n    i = 3.;\n    x = sin(i + 0.62 * time * (1.03 + 0.5 * cos(1.51 * i)))*0.3;\n    y = (cos(i + 1.17 * time * cos(1.22 + 1.1424 * i)))*0.8; // dip into the floor //Math.abs\n    z = cos(i + 0.51 * time * 0.1 * sin((0.92 + 1.43 * i)))*0.3;\n    q3 = vec3(x, y, z);\n\n    i = 4.;\n    x = sin(i + 0.62 * time * (1.03 + 0.5 * cos(1.51 * i)))*0.3;\n    y = (cos(i + 1.17 * time * cos(1.22 + 1.1424 * i)))*0.8; // dip into the floor //Math.abs\n    z = cos(i + 0.51 * time * 0.1 * sin((0.92 + 1.43 * i)))*0.3;\n    q4 = vec3(x, y, z);\n\n    i = 5.;\n    x = sin(i + 0.62 * time * (1.03 + 0.5 * cos(1.51 * i)))*0.3;\n    y = (cos(i + 1.17 * time * cos(1.22 + 1.1424 * i)))*0.8; // dip into the floor //Math.abs\n    z = cos(i + 0.51 * time * 0.1 * sin((0.92 + 1.43 * i)))*0.3;\n    q5 = vec3(x, y, z);\n\n}\n/*\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n*/\n#define AA 1\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    csurf = mod(floor(iTime/6.) , 7.);\n    //csurf  = 0.;\n    float hh = 5.;\n    if (csurf == 0.)\n    {\n        dist_infin = 2.2;\n        hh = 4.;\n        //desimp(p);\n    }  \n\n    if (csurf == 1.)\n    {\n        dist_infin = 2.;\n        hh = 4.;\n        //isf(p);\n    }    \n        \n    if (csurf == 2.)\n    {\n        dist_infin = 5.;\n        hh = 9.;\n        //cassinian(p);\n    }    \n        \n    if (csurf == 3.)\n    {\n        dist_infin = PI*6.;\n        hh = PI*12.;\n        //gyroide(p);\n    }    \n\n    if (csurf == 4.)\n    {\n        initQ();\n        dist_infin = 1.5;\n        hh = 3.;\n        //potential(p);\n    }   \n\n    if (csurf == 5.)\n    {\n        dist_infin = 7.5;\n        hh = 15.;\n        //kummerj(p); \n    }\n\n    if (csurf == 6.)\n    {\n        dist_infin = 1.8;\n        hh = 4.;\n        //heart\n    }   \n        \n    vec3 light = normalize(vec3(0.0, 1.0, -2.5)); //light\n    vec3 light2 = normalize(vec3(0.0, -1.0, 2.5)); //light\n    vec2 mo = 1.5*cos(1.5*iTime + vec2(0,11));//vec2(0.0, 0.0);\n    if  (iMouse.z > 0.0)\n    {\n        mo = (-iResolution.xy + 2.0 * (iMouse.xy)) / iResolution.y;\n    }\n    vec3 ro = vec3(0.0, 0.0, hh ); // camera\n    //camera rotation\n    ro.yz *= rot(mo.y);\n    ro.xz *= rot(-mo.x-1.57);\n\n    const float fl = 1.5; // focal length\n    float dist = dist_infin;\n\n    vec3 b1 = vec3(0.23529411764705882, 0.4235294117647059, 0.7725490196078432), b2 = vec3(0.3686274509803922, 0.5725490196078431, 0.8941176470588236);\n    vec3 bg = 2.0*mix(b2, b1*b1, fragCoord.y / iResolution.y);  \n    vec3 col1 = vec3(0.7304607400847158,0.5906188409113381,0.3005437944049895);\n    vec3 col2 = vec3(0.7230551289161951, 0.0060488330203860696, 0.0060488330203860696);\n \n    \n    //antialiasing\n    vec3 tot = vec3(0.0);\n    for(int m = 0; m < AA; m++) \n    for(int n = 0; n < AA; n++) {\n            vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o)) / iResolution.y;\n            vec3 rd = GetRayDir(p, ro, vec3(0, 0., 0), fl); //ray direction\n            vec3 col = bg * bg; // background  \n            \n            \n            //STEP 1. Calculating bounding sphere\n            float d = length(cross(ro, rd));\n            if (d >= dist)\n            {\n                 tot += col;\n                 continue;\n            }\n            /*\n            STEP 2.\n            ray tracing inside the bounding sphere, \n            searching for a segment with different signs of the function value \n            at the ends of the segment\n            */\n            float td = abs(dot(ro, rd));\n            d = sqrt(dist*dist - d*d);\n            vec3 pos0 = ro + rd * (td - d);\n            vec3 pos1 = ro + rd * (td + d);\n            vec3 rd0 = pos1 - pos0;\n            vec3 pos = pos0;\n            float val0 = map(pos0);\n            for(float i = 1.; i < nn; i++) {\n                pos1 = pos0 + rd0 * i / (nn - 1.);\n                float val1 = map(pos1);\n                if (sign(val0)*sign(val1) <= 0.)\n                {\n                    //different signs of the function value  at the ends of the segment\n                    //STEP 3. binary search to clarify the intersection of a ray with a surface.\n                    col = col1;\n                    pos = getPoint(pos, pos1, val0, val1);\n                    vec3 nor = calcNormal(pos);\n                    col = calccolor(col, col2, -rd, light, light2, nor);\n                    break;\n                }\n                val0 = val1;\n                pos = pos1;\n            }\n            tot += col;\n        }\n    tot = tot / float(AA)/float(AA);\n    //antialiasing\n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}