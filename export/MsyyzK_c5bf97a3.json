{"ver":"0.1","info":{"id":"MsyyzK","date":"1522593737","viewed":339,"name":"Doodling #5: North","username":"lsdlive","description":"Things I did before the Revision 2018 to train shader showdown (but showmatch were cancelled).\n\nVarious utilities code from iq, lj, mercury, shane, aiekick & balkhan.","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","architecture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// @lsdlive\n\nmat2 r2d(float a) {\n\tfloat c = cos(a), s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\nvoid amod(inout vec2 p, float m) {\n\tfloat a = mod(atan(p.x, p.y) - m*.5, m) - m*.5;\n\tp = vec2(cos(a), sin(a)) * length(p);\n}\n\nvoid mo(inout vec2 p, vec2 d) {\n\tp.y = abs(p.y) - d.x;\n\tp.x = abs(p.x) - d.y;\n\tif (p.y > p.x) p.xy = p.yx;\n}\n\nfloat rep(float p, float m) {\n\treturn mod(p - m*.5, m) - m*.5;\n}\n\nvec2 rep(vec2 p, float m) {\n\treturn mod(p - m*.5, m) - m*.5;\n}\n\nvec3 rep(vec3 p, float m) {\n\treturn mod(p - m*.5, m) - m*.5;\n}\n\nfloat smin(float a, float b, float k) {\n\tfloat h = clamp(.5 + .5*(b - a) / k, 0., 1.);\n\treturn mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat cmin(float a, float b, float k) {\n\treturn min(min(a, b), (a - k + b) * sqrt(.5));\n}\n\nfloat stmin(float a, float b, float k, float n) {\n\tfloat s = k / n;\n\tfloat u = b - k;\n\treturn min(min(a, b), .5 * (u + a + abs((mod(u - a + s, 2. * s)) - s)));\n}\n\nfloat length8(vec2 p) {\n\tvec2 q = p*p*p*p*p*p*p*p;\n\treturn pow(q.x + q.y, 1. / 8.);\n}\n\nfloat torus88(vec3 p, vec2 d) {\n\tvec2 q = vec2(length8(p.xz) - d.x, p.y);\n\treturn length8(q) - d.y;\n}\n\n\nfloat box(vec3 p, vec3 d) {\n\treturn length(max(abs(p) - d, 0.));\n}\n\nfloat g = 0.;\nfloat id = 0.;\nfloat de(vec3 p) {\n    \n    float wl = p.x + 1.25;\n    float wr = -p.x + 1.25;\n    float fl = p.y + 1.;\n    float cl = -p.y + 1.;\n    \n    vec3 q = p;\n    q.x += sin(q.z*.2)*4.;\n    q += iTime;\n    q.yz += sin(iTime*.2)*4.;\n    q = rep(q, 2.);\n    float s1 = length(q) - .01 + sin(iTime*30.)*.004;\n    \n    p.x += 1.;\n    p = rep(p, 2.);\n    \n\tfloat d = box(p, vec3(.2, 1., .2));\n    d = smin(d, cl +d*.9, .2);\n    d = stmin(d, fl, .2, 3.);\n    \n    //d = stmin(d, wl+d*.8, .4, 8.);\n    //d = stmin(d, wr+d*.8, .4, 8.);\n    d = cmin(d, wl+d*.2, .4);\n    d = cmin(d, wr+d*.2, .4);\n    \n    d = min(s1, d);\n    \n    \n    p.z += .4;\n    p.y-=.6;\n    q=p;\n    q.xy*=r2d(3.14/4.);\n    float symb = 1e6;\n    symb = min(symb, torus88(q.xzy, vec2(.05, .01)));\n    p.y+=.07;\n    p.xy*=r2d(3.14/4.);\n    symb = min(symb, box(p, vec3(.01, .07, .01)));\n    p.xy*=r2d(-3.14/2.);\n    symb = min(symb, box(p, vec3(.01, .07, .01)));\n    \n    d=min(d,symb);\n    \n\tg += .01 / (.01 + d*d);\n\treturn d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord / iResolution.xy - .5;\n\tuv.x *= iResolution.x / iResolution.y;\n\n\tvec3 ro = vec3(0, 0, -3. + iTime);\n\tvec3 rd = normalize(vec3(uv, 1));\n\n\n\tvec3 p;\n\tfloat t = 0., ri;\n\tfor (float i = 0.; i < 1.; i += .01) {\n\t\tri = i;\n\t\tp = ro + rd*t;\n\t\tfloat d = de(p);\n\t\tif (t > 30.) break;\n        d = max(abs(d), .001);\n        t+=d*.2;\n\t}\n\n\t vec3 bg = vec3(.2, .1, .2);\n\n    vec3 col = bg;\n    if(t<=30.)\n\t    col = mix(vec3(.2, .2, .4), bg, uv.y*2.+ri);\n    \n    //if(p.y < .13 && p.y > -.2) col = mix(vec3(1, 0,0), bg, uv.y+ri);\n    \n    //if (id == 1.)\n      //  col = vec3(1., 0.,0.);;\n    \n\tcol+=g*.015;\n    col = mix(col, bg, 1.-exp(-.09*t*t));\n\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}