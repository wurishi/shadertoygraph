{"ver":"0.1","info":{"id":"sttyWr","date":"1659624736","viewed":184,"name":"Rectangular Hyperbola SDF","username":"danac","description":"Distance to the hyperbola y=1/x, using the Newton-Raphson method to solve a quartic.\nBased on Inigo Quilez's style (https://www.shadertoy.com/playlist/MXdSRf)\nClick to see the distance to the mouse.\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","distance","hyperbola"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float newtonRaphson1D(float x, float fx, float fpx)\n{\n    return x-fx/fpx;\n}\n\nfloat hyperbolaQuartic(vec2 p, float t)\n{\n    float t3 = t*t*t;\n    return t3*t-p.x*t3+p.y*t-1.0;\n}\n\nfloat DhyperbolaQuartic(vec2 p, float t)\n{\n    float t2 = t*t;\n    return 4.0*t2*t-3.0*p.x*t2+p.y;\n}\n\nvec2 closestPointOnHyperbola(vec2 p)\n{\n    float t = 1000.;\n    vec2 point = p.x < p.y ? vec2(p.y, p.x) : vec2(p.x, p.y);\n    for(int i = 0; i < 30; i += 1)\n    {\n        float ft = hyperbolaQuartic(point, t);\n        float dft = DhyperbolaQuartic(point, t);\n        t = newtonRaphson1D(t, ft, dft);\n    }    \n    return p.x < p.y ? vec2(1./t, t) : vec2(t, 1./t);\n}\n\nfloat sdfHyperbola(vec2 p)\n{\n    vec2 pt = closestPointOnHyperbola(p);\n    float d = length(pt-p);\n    \n    return p.x*p.y < 1.0 ? d : -d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float scale = 3.0;\n\tvec2 pixel = scale*fragCoord/iResolution.y;\n    vec2 mouse = scale*iMouse.xy/iResolution.y;\n    float onePixel = scale/iResolution.y;\n    \n    float d = sdfHyperbola(pixel);\n    \n    // colorize\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.7 + 0.2*cos(110.0/scale*2.*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,3.0*onePixel,abs(d)) );\n    \n    if( iMouse.z>0.001 )\n    {\n        float d = sdfHyperbola(mouse);\n        vec2 mouse2Pixel = pixel-mouse;\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 2.0*onePixel, abs(length(mouse2Pixel)-abs(d))));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 2.0*onePixel, length(mouse2Pixel)-onePixel*3.0));\n    }\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}