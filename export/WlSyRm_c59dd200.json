{"ver":"0.1","info":{"id":"WlSyRm","date":"1593923831","viewed":162,"name":"I'm Melting","username":"wnu","description":"using a buffer to cause pixels to flow, creating a melting flow-like effect","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["melting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 R = iResolution.xy;\n    vec2 uv = fragCoord/iResolution.xy;\n    //uv.x*= R.x/R.y;\n    \n    \n    // Time varying pixel color\n   \tvec3 col = texture(iChannel0,uv).rgb;\n   // col += 0.5 + 0.5*cos(uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvec2 wrap (vec2 uv){\n \tvec2 up = step(1.,uv);   \n    vec2 down = 1.-step(0.,uv);\n    vec2 both = (1.-up)*(1.-down);\n    \n    \n    //vec2 output = uv*both + fract(uv\n    return vec2(0.);\n        \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy / iResolution.xy;\n    //vec3 tex = texture(iChannel0,st).rgb;\n    vec2 stx = st-0.5;\n    stx.x *= iResolution.x/iResolution.y;\n    \n \tfloat p = step(0.5,length(stx));\n    vec2 arr = vec2(noise(stx*10.+ noise(vec2(iTime/2.,0.))*2.-1.),noise(stx*10. + vec2(10.245,-582.014923) -1. + 2.*noise(vec2(iTime/2.,0.))));\n    arr = arr*2.-1.;\n    //vec2 mover = mix(vec2(0.),(0.5-st)/100.,p);\n    vec2 mover = -stx/100.;\n\tvec3 col = vec3(0.);\n    if(iFrame == 0){\n       // col = vec3(noise(stx*100.));\n        col = texture(iChannel1,st).rgb;\n    } else {\n        col = texture(iChannel0,fract(st+vec2(arr.x/400.,arr.y/400.))).rgb;\n    }\n    vec3 tFile = texture(iChannel1,st).rgb;\n    col = mix(col,tFile,0.05);\n    \n    //vec3 col = tex + vec3(c);\n    //col = clamp(col,0.,1.);\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}