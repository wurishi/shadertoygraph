{"ver":"0.1","info":{"id":"43jfzV","date":"1729703780","viewed":114,"name":"Glowing Orb of Light","username":"smit3131","description":"The \"Glowing Orb of Light\" shader showcases a glowing, reflective orb floating in a soft gradient background.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["glowinglight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize fragment coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y; // Aspect ratio correction\n\n    // Animated light position (rotating around the center)\n    float t = iTime * 0.5; // Time-based animation speed\n    vec3 lightPos = vec3(sin(t), cos(t), 1.5); // Moving light position\n\n    // Surface normal at each point (simplified sphere shape)\n    vec3 normal = normalize(vec3(uv, 1.0));\n\n    // View direction (camera looking towards the center)\n    vec3 viewDir = normalize(vec3(0.0, 0.0, 1.0));\n\n    // Gradient background\n    vec3 backgroundColor = mix(vec3(0.1, 0.1, 0.3), vec3(0.9, 0.3, 0.5), uv.y * 0.5 + 0.5);\n    \n    // Lighting calculations\n    vec3 lightDir = normalize(lightPos - normal);\n    float diffuse = max(dot(lightDir, normal), 0.0);\n\n    // Animated color palette for the object\n    vec3 baseColor = vec3(0.5 + 0.5 * sin(iTime), 0.5 + 0.5 * cos(iTime * 0.7), 0.7);\n\n    // Diffuse lighting (color influenced by light direction)\n    vec3 diffuseColor = diffuse * baseColor;\n\n    // Specular highlight (shiny effect)\n    vec3 reflectDir = reflect(-lightDir, normal);\n    float specular = pow(max(dot(viewDir, reflectDir), 0.0), 32.0); // Shiny factor\n    vec3 specularColor = specular * vec3(1.0, 1.0, 1.0); // White highlight\n\n    // Fresnel effect (edge glow)\n    float fresnel = pow(1.0 - max(dot(viewDir, normal), 0.0), 3.0);\n    vec3 fresnelColor = fresnel * vec3(0.8, 0.9, 1.0); // Light blue glow at edges\n\n    // Final color combining all effects\n    vec3 color = backgroundColor + diffuseColor + specularColor + fresnelColor;\n\n    // Apply soft glow using exponential falloff for a smooth finish\n    float glow = exp(-length(uv) * 3.0);\n    color += glow * vec3(0.3, 0.5, 0.9); // Add soft glow effect\n\n    // Output final color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}