{"ver":"0.1","info":{"id":"Xl3fzX","date":"1540380333","viewed":346,"name":"Hilbert curve","username":"a0a","description":"My first shader toy: a space filling Hilbert curve (or at least a part of it)\n\nCode is far from optimal; I brute-forced the segments, and I'm not quite sure how to repeat and rotate each block, or even solve the recursion. \n\nThoughts & comments welcome!","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["hilbertspacefillingcurve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Info on Hilbert curves: http://mathworld.wolfram.com/HilbertCurve.html\n// https://arxiv.org/pdf/1109.2323.pdf\n// \n// Inspiration from https://www.shadertoy.com/view/XtjXW3\n\n\n#define AA 1   // make this 1 is your machine is too slow\n\n//------------------------------------------------------------------\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = (p-a), ba = (b-a);\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat length2( vec2 p )\n{\n\treturn sqrt( p.x*p.x + p.y*p.y );\n}\n\nfloat length6( vec2 p )\n{\n\tp = p*p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/6.0 );\n}\n\nfloat length8( vec2 p )\n{\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/8.0 );\n}\n\n//------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRotXZ(vec3 p)\n{\t\n    float angle = 3.1415/2.0;\n\treturn vec3(cos(angle) * p.x + sin(angle) * p.z, p.y, -sin(angle) * p.x + cos(angle) * p.z);\n}\n\nvec3 opRotYZ(vec3 p)\n{\t\n    float angle = 3.1415/2.0;\n\treturn vec3(p.x,cos(angle) * p.y + sin(angle) * p.z, -sin(angle) * p.y + cos(angle) * p.z);\n}\n\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\n//------------------------------------------------------------------\n\nvec2 hilbert(in vec3 center, float scale)\n{\n\tvec2 o =         vec2( sdCapsule(   center ,vec3(-.5,-.5, .5)*scale, vec3(-.5,-.5,-.5)*scale, 0.01  ), 31.9 );\n\t     o = opU( o, vec2( sdCapsule(   center ,vec3( .5,-.5,-.5)*scale, vec3( .5, .5,-.5)*scale, 0.01  ), 31.9 ) );\n\t     o = opU( o, vec2( sdCapsule(   center ,vec3( .5, .5,-.5)*scale, vec3( .5, .5, .5)*scale, 0.01  ), 31.9 ) );\n\t     o = opU( o, vec2( sdCapsule(   center ,vec3( .5, .5, .5)*scale, vec3(-.5, .5, .5)*scale, 0.01  ), 31.9 ) );\n\t     o = opU( o, vec2( sdCapsule(   center ,vec3(-.5, .5, .5)*scale, vec3(-.5, .5,-.5)*scale, 0.01  ), 31.9 ) );\n\t     o = opU( o, vec2( sdCapsule(   center ,vec3(-.5, .5,-.5)*scale, vec3(-.5,-.5,-.5)*scale, 0.01  ), 31.9 ) );\n\t     o = opU( o, vec2( sdCapsule(   center ,vec3( .5,-.5, .5)*scale, vec3( .5,-.5,-.5)*scale, 0.01  ), 31.9 ) );\n\t     o = opU( o, vec2( sdCapsule(   center ,vec3( .5,-.5,-.5)*scale, vec3( .5,-.5, .5)*scale, 0.01  ), 31.9 ) );\n\treturn o;\n}\n\nvec2 hilbertBlock(in vec3 botLeft, in vec3 topRight, float scale)\n{\n\tvec3 center = botLeft + (topRight - botLeft) / 2.;\n\tvec3 offset = (topRight - botLeft) * scale;\t\n\tvec3 offsetSub1 = offset / 2.; offsetSub1.z*=-1.0;\n\tvec3 offsetSub2 = offset / 2.; offsetSub2.z*=-1.0; offsetSub2.y*=-1.0;\n\tvec3 offsetSub3 = offset / 2.; offsetSub3.z*=-1.0; offsetSub3.x*=-1.0;\n\t\n\tvec2 o = \t    \t\thilbert( \topRotYZ(opRotXZ(\t\t\t\t\t\t\t\t\t\tcenter + offset * vec3(-1, 1,-1) )\t\t)\t\t,\t scale);\n\t\t o = opU( o,vec2( \tsdCapsule( \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcenter, -(offset+offsetSub1) * vec3(-1, 1,-1), -(offset+offsetSub1) * vec3(-1, 1, 1), 0.01), 71.9 ) );\n\t\t o = opU( o,\t\thilbert( \topRotXZ(opRotYZ(opRotXZ(opRotXZ(\t\t\t\t\t\tcenter + offset * vec3(-1, 1, 1) )\t\t)))\t\t,\t scale));\n\t\t o = opU( o,vec2( \tsdCapsule( \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcenter, -(offset+offsetSub2) * vec3(-1, 1, 1), -(offset+offsetSub2) * vec3(-1,-1, 1), 0.01), 71.9 ) );\n\t\t o = opU( o,\t\thilbert( \topRotXZ(opRotYZ(opRotXZ(opRotXZ(\t\t\t\t\t\tcenter + offset * vec3(-1,-1, 1) )\t\t)))\t\t,\t scale));\n\t\t o = opU( o,vec2( \tsdCapsule( \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcenter, -(offset+offsetSub1) * vec3(-1,-1, 1), -(offset+offsetSub1) * vec3(-1,-1,-1), 0.01), 71.9 ) );\n\t\t o = opU( o,\t\thilbert( \topRotYZ(opRotYZ(\t\t\t\t\t\t\t\t\t\tcenter + offset * vec3(-1,-1, -1) \t\t))\t\t,\t scale));\n\t\t o = opU( o,vec2( \tsdCapsule( \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcenter, -(offset+offsetSub3) * vec3(-1,-1,-1), -(offset+offsetSub3) * vec3( 1,-1,-1), 0.01), 71.9 ) );\n\t\t o = opU( o,\t\thilbert( \topRotYZ(opRotYZ(\t\t\t\t\t\t\t\t\t\tcenter + offset * vec3( 1,-1,-1) \t\t))\t\t,\t scale));\n\t\t o = opU( o,vec2( \tsdCapsule( \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcenter, -(offset+offsetSub1) * vec3( 1,-1,-1), -(offset+offsetSub1) * vec3( 1,-1, 1), 0.01), 71.9 ) );\n\t\t o = opU( o,\t\thilbert( \topRotXZ(opRotYZ(opRotYZ(opRotYZ(\t\t\t\t\t\tcenter + offset * vec3( 1,-1, 1) \t\t))))\t,\t scale));\n\t\t o = opU( o,vec2( \tsdCapsule( \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcenter, -(offset+offsetSub2) * vec3( 1,-1, 1), -(offset+offsetSub2) * vec3( 1, 1, 1), 0.01), 71.9 ) );\n\t\t o = opU( o,\t\thilbert( \topRotXZ(opRotYZ(opRotYZ(opRotYZ(\t\t\t\t\t\tcenter + offset * vec3( 1, 1,  1) \t\t))))\t,\t scale));\n\t\t o = opU( o,vec2( \tsdCapsule( \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcenter, -(offset+offsetSub1) * vec3( 1, 1, 1), -(offset+offsetSub1) * vec3( 1, 1, -1), 0.01), 71.9 ) );\n\t\t o = opU( o,\t\thilbert( \topRotYZ(opRotXZ(opRotXZ(opRotXZ(\t\t\t\t\t\tcenter + offset * vec3( 1, 1,-1) \t\t))))\t,\t scale));\n\n\treturn o;\n}\n\nvec2 map( in vec3 pos )\n{\n \n\tvec3 center = pos - vec3(0,.7, 0);\t\t\t\t\t\t\t\t\t\t\t\t\n\tvec2 o = \t\t\thilbert (center,1.2);\t\t\t\t\t\t\t\t\t\t// slightly oversized to show the idea\n\t\t //o = opU( o, \thilbert(opRep(center,vec3(.25,.25,.25)),.125) );            // repeating does not include rotation :/?\n\t\t o = opU( o, \thilbertBlock( center               - vec3(.5), center               + vec3(.5),.25) );\n\t\t //o = opU( o, \thilbertBlock( center + vec3(1,0,0) - vec3(.5), center + vec3(1,0,0) + vec3(.5),.25) ); //next block\n\t\t \n\t\n\n\tvec2 res = opU( vec2( sdPlane(     pos),1. ),\n\t\t\t\t\to);\n        \n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 0.2;\n    float tmax = 20.0;\n   \n#if 1\n    // bounding volume\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<64; i++ )\n    {\n\t    float precis = 0.0004*t;\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n    /*\n\tvec3 eps = vec3( 0.0005, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n\t*/\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox( in vec2 p )\n{\n    // filter kernel\n    vec2 w = fwidth(p) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5)-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        if( m<1.5 )\n        {\n            \n            float f = checkersGradBox( 5.0*pos.xz );\n            col = 0.3 + f*vec3(0.1);\n        }\n\n        // lighitng        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.4, 0.7, -0.6) );\n        vec3  hal = normalize( lig-rd );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.2, 0.2, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n        \n        dif *= calcSoftshadow( pos, lig, 0.02, 2.5 );\n        dom *= calcSoftshadow( pos, ref, 0.02, 2.5 );\n\n\t\tfloat spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),16.0)*\n                    dif *\n                    (0.04 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 5.0 ));\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.30*dif*vec3(1.00,0.80,0.55);\n        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.40*dom*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\t\tcol += 10.00*spe*vec3(1.00,0.90,0.70);\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 15.0 + iTime;\n\n    \n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n\n\t\t// camera\t\n        vec3 ro = vec3( 4.5*cos(0.1*time + 6.0*mo.x), 1.0 + 2.0*mo.y, 0.5 + 4.5*sin(0.1*time + 6.0*mo.x) );\n        vec3 ta = vec3( -0.5, -0.4, 0.5 );\n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta, 0.0 );\n        // ray direction\n        vec3 rd = ca * normalize( vec3(p.xy,2.2) );\n\n        // render\t\n        vec3 col = render( ro, rd );\n\n\t\t// gamma\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    \n    fragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}