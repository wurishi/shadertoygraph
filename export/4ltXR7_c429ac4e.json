{"ver":"0.1","info":{"id":"4ltXR7","date":"1478755541","viewed":182,"name":"Saddle points","username":"MrShoor","description":"Saddle points from light sources.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raycast","diffuse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool SphereIntersect(vec3 SpPos, float SpRad, vec3 ro, vec3 rd, out vec3 crd, out vec3 norm) {\n    ro -= SpPos;\n    \n    float A = dot(rd, rd);\n    float B = 2.0*dot(ro, rd);\n    float C = dot(ro, ro)-SpRad*SpRad;\n    float D = B*B-4.0*A*C;\n    if (D < 0.0) return false;\n    \n    D = sqrt(D);\n    A *= 2.0;\n    float t1 = (-B+D)/A;\n    float t2 = (-B-D)/A;\n    if (t1 < 0.0) t1 = t2;\n    if (t2 < 0.0) t2 = t1;\n    t1 = min(t1, t2);\n    if (t1 < 0.0) return false;\n    norm = ro+t1*rd;\n    crd = norm + SpPos;\n    norm = normalize(norm);\n    return true;\n}\n\nstruct LightInfo {\n  vec3 position;\n  vec3 La;\n  vec3 Ld;\n};\n    \nstruct MaterialInfo {\n  vec3 Ma;\n  vec3 Md;\n};\n    \nLightInfo light[2];\nMaterialInfo material;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec3 rd;\n    rd.xy = 2.0*fragCoord.xy/iResolution.xy - 1.0;\n    rd.x *= iResolution.x/iResolution.y;\n    rd.z = 1.0;\n    vec3 ro = vec3(0.0,0.0,-10.0);\n    \n    light[0].position = vec3(-10.0, 5.0, 0.0)+ro;\n    light[1].position = vec3( 10.0, 5.0, 0.0)+ro;\n    light[0].La = vec3(0.0);\n    light[1].La = vec3(0.0);\n    light[0].Ld = vec3(0.5);\n    light[1].Ld = vec3(0.5);\n    \n    material.Ma = vec3(0.0);\n    material.Md = vec3(1.0);\n    \n    vec4 Out;\n    vec3 crd, norm;\n    if (SphereIntersect(vec3(0.0, 0.0, 0.0), 4.0, ro, rd, crd, norm)) {\n        vec3 sum_amb_intens = vec3(0.0);\n        vec3 sum_dif_intens = vec3(0.0);\n        for (int i = 0; i < 2; i++){\n            sum_amb_intens += light[i].La;\n            sum_dif_intens += light[i].Ld*max(dot(normalize(light[i].position - crd), norm),0.0);\n        }\n        Out = vec4(material.Ma*sum_amb_intens + material.Md*sum_dif_intens, 1.0);\n        //Out = vec4(fract(Out.r/0.04)); //uncomment me for gradients\n    } else {\n        Out = vec4(0.0);\n    }\n    fragColor = Out;\n}","name":"Image","description":"","type":"image"}]}