{"ver":"0.1","info":{"id":"Xs2yRV","date":"1620409049","viewed":232,"name":"8-bitify","username":"donniet","description":"makes you look 8 bit","likes":4,"published":1,"flags":2,"usePreview":0,"tags":["8bit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // the number of boxes on the horzontal axis\n    vec2 numBoxes;\n    numBoxes.x = 64.;\n    // scale the numBoxes y dimension by the resolution to ensure square boxes\n    numBoxes.y = numBoxes.x * iResolution.y / iResolution.x;\n    \n    vec2 n2 = numBoxes +vec2(1,1);\n    \n    // the compression of each color, set to the size of each channel, so bigger equals more potential color values\n    vec4 colorCompression = vec4(4., 8., 8., 1.);\n    \n    \n   \t// convert the frag coordinate to a percentage\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // mirror the x coordinate\n    uv.x = 1. - uv.x;\n    \n    // compress the uv coordinates by the boxes\n    vec2 ul = floor(uv * numBoxes) / numBoxes;\n    vec2 lr = floor(uv * n2) / n2;\n    \n    // get the upper left color from the image\n    vec4 col = texture(iChannel0, ul);\n    vec4 col1 = texture(iChannel0, lr);\n    \n    col = (col + col1) / 2.;\n    \n    // compress the color channels\n    col = floor(col * colorCompression) / colorCompression;\n    \n    // output the color\n\tfragColor = col;\n}","name":"Image","description":"","type":"image"}]}