{"ver":"0.1","info":{"id":"ftdBz8","date":"1662720269","viewed":83,"name":"Simple Mandelbrot Oscillation","username":"Renslay","description":"A simple Mandelbrot set","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 coord = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    // parameters of the zoom oscillation\n    float time_period = 30.0;\n    float zoom0 = 0.0;\n    float zoom1 = 12.0;\n\n    // which point to zoom in\n    vec2 POI = vec2(-0.7450222, -0.1099885);\n    \n    // recalculate the position\n    float time = cos(iTime*2.*PI / time_period) * (zoom0 - zoom1)/2. + (zoom0 + zoom1)/2.;\n    coord /= exp(time);\n    coord += POI;\n    \n    // escape time algorithm\n    float x0 = coord.x;\n    float y0 = coord.y;\n    float x = 0.0;\n    float y = 0.0;\n    float x2 = 0.0;\n    float y2 = 0.0;\n    int iteration = 0;\n    int max_iteration = 1000;\n    while (x2 + y2 <= 4.0 && iteration < max_iteration) {\n        y = 2.0*x*y + y0;\n        x = x2 - y2 + x0;\n        x2 = x*x;\n        y2 = y*y;\n        ++iteration;\n    }\n    \n    // coloring\n    float limit = float(iteration) / float(max_iteration);\n    float limitSqrt = sqrt(limit);   \n    vec3 color = vec3(limit*limitSqrt, limit, limitSqrt);\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}