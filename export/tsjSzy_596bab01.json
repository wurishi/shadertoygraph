{"ver":"0.1","info":{"id":"tsjSzy","date":"1554278823","viewed":361,"name":"Smallest 2D SDF","username":"egon","description":"Shows the simplest way of implementing signed distance functions.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265359;\n\n// sdf_circle returns:\n//    negative value when inside the circle\n//    positive value when outside the circle\nfloat sdf_circle(vec2 sampleAt, vec2 center, float radius) {\n    return length(center - sampleAt) - radius;\n}\n\nvec4 color_blue_green(float value) {\n    // quick hack way to color things, such that \n    // negative values are blue and positive values are green\n    const float offset = 0.5;\n    float offsetValue = value + offset;\n    \n    vec4 colorMask = vec4(0.8, 1.0, 0.8, 1.0);\n    if(offsetValue < offset){\n        colorMask = vec4(0.8, 0.8, 1.0, 1.0);\n    }\n    // to disable coloring set:\n    // colorMask = vec4(1.0); \n    \n    return vec4(offsetValue, offsetValue, offsetValue, 1.0) * colorMask;\n}\n\n// color negative (inside) black and outside white\nvec4 color_black_white(float value) {\n    if(value > 0.0){\n        return vec4(0.0, 0.0, 0.0, 1.0);\n    } else {\n        return vec4(1.0, 1.0, 1.0, 1.0);\n    }\n}\n\n// color using absolute value of the signed distance function\nvec4 color_grayscale(float value) {\n    return vec4(abs(value), abs(value), abs(value), 1);\n}\n\n\nfloat smin(float a, float b, float k) {\n    // see https://iquilezles.org/articles/smin\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime * 1.0;\n\t// this part ensures we don't distort the image\n    vec2 sampleAt = 2.0 * (fragCoord.xy / iResolution.xy) - 1.0;\n  \tsampleAt.x *= iResolution.x / iResolution.y;\n\n    // calculating the shapes\n    float right = sdf_circle(sampleAt, vec2(sin(t)*0.8, 0), 0.4);\n    float left  = sdf_circle(sampleAt, vec2(0, sin(t*2.41)*0.3), 0.5);\n    \n    // try using max, smin\n    float value = min(left, right);\n    \n    // min acts like addition of shapes:\n    //   min(negative, positive) ~= min(inside, outside) = inside\n    // max acts like intersection of shapes\n    //   max(negative, positive) ~= max(inside, outside) = outside\n\n    // try different coloring functions:\n    // color_blue_green:\n    //   blue  = negative value\n    //   green = positive value\n    // color_black_white\n    //   all negative values will be white, positive black\n    // color_grayscale\n    //   absolute value of the distance field\n    fragColor = color_blue_green(value);\n}\n\n","name":"Image","description":"","type":"image"}]}