{"ver":"0.1","info":{"id":"tsXfWS","date":"1589213145","viewed":227,"name":"Dodecahedralis II","username":"sl2c","description":"A hyperbolic 3-manifold sliced along a horosphere, based on [url=http://archive.bridgesmathart.org/2018/bridges2018-531.html]this paper by Vladimir Bulatov[/url].  Four-coloring the right-angled dodecahedron gives a blueprint for joining 16 dodecahedra.","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["circles","tiling","hyperbolic","horosphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright 2020 Google LLC\n// SPDX-License-Identifier: Apache-2.0\n// NOT an official Google project; see Google Open Source guidelines for more info on copyright transfer\n// written by William Cadegan-Schlieper \n\nfloat tau = 6.283185307179586;\n\nbool flip(inout vec3 z, inout float ds, in vec2 c, in float r, inout float t) {\n    z -= vec3(c,0.0);\n    bool res = (dot(z,z) < r*r) ^^ (r < 0.0);\n    if (res) {\n        ds *= r * r / dot(z,z);\n        z *= r * r / dot(z,z);\n    }\n    t = min(t, (dot(z,z)-r*r)/(2.0 * r * ds));\n    z += vec3(c,0.0);\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3[4] colorizers = vec3[](\n        vec3(0.25,0.0,0.0),\n        vec3(0.0,0.3,0.0),\n        vec3(-0.05,-0.02,0.4),\n        vec3(-0.15)\n    );\n    int[12] m = int[](2,0,1,3,0,1,2,3,2,3,0,1);\n    \n    vec2 z = 2.0 * (fragCoord - iResolution.xy * 0.5)/iResolution.y;\n    float ds = 1.0 / iResolution.y;\n    z *= 9.0; ds *= 9.0;\n    vec3 zh = vec3(z, 1.0);\n    \n    vec2[12] c; float[12] r;\n    float r1 = pow(1.5 + 0.5 * sqrt(5.0) - sqrt(1.5 * sqrt(5.0) + 2.5), 0.5);\n    r[0] = r1; c[0] = vec2(0.0);\n    float r2 = r1 * sqrt(sqrt(5.0));\n    float x2 = sqrt(r1*r1+r2*r2);\n    float r3 = r2 / ( x2 * x2 - r2 * r2);\n    float x3 = -x2 / ( x2 * x2 - r2 * r2);\n    for (int i=0; i<5; i++) {\n        float theta = tau * 0.2 * float(i);\n        vec2 eit = vec2(cos(theta), sin(theta));\n        r[i+1] = r2;\n        c[i+1] = x2 * eit;\n        r[i+6] = r3;\n        c[i+6] = x3 * eit;\n    }\n    float r4 = -1.0 / r1;\n    r[11] = r4; c[11] = vec2(0.0);\n    \n    \n    float period = -8.0 * log(r1);\n    float d = mod(iTime * 0.2, period) - period * 0.5;\n    zh *= exp(-d); ds *= exp(-d);\n\t\n    bool[4] flips=bool[](false,false,false,false);\n    float[4] ts=float[](1.0,1.0,1.0,1.0);\n    for (int i=0; i<6; i++) {\n        for (int j=0; j<12; j++) {\n            flips[m[j]] = flips[m[j]] ^^ flip(zh, ds, c[j], r[j], ts[m[j]]);\n        }\n    }\n    vec3 col = vec3(0.5);\n    for (int i=0; i<4; i++) {\n        if (flips[i]) {\n            ts[i] = -ts[i];\n        }\n        col += colorizers[i] * ts[i];\n    }\n    fragColor = vec4(col,1.0);\n    fragColor = pow(fragColor, vec4(1.0/2.2));\n}","name":"Image","description":"","type":"image"}]}