{"ver":"0.1","info":{"id":"MtsSz2","date":"1438245955","viewed":848,"name":"Emix","username":"noby","description":"This is the video artifacting effect used in our demo Emix (https://www.pouet.net/prod.php?which=66066). Don't ask how this works, it was coded in pretty ad-hoc fashion at the last minute. Not optimized at all.","likes":18,"published":1,"flags":0,"usePreview":1,"tags":["video","glitch","lofi","emix","artifact","macroblock"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// license: \"public domain, but I appreciate credits mentions if you use this :)\"\n#define BLOCK_SIZE 28.0\n#define BLOCK_CTRL 0.1\n\nfloat sat( float t ) {\n\treturn clamp( t, 0.0, 1.0 );\n}\nvec2 sat( vec2 t ) {\n\treturn clamp( t, 0.0, 1.0 );\n}\nfloat remap  ( float t, float a, float b ) {\n\treturn sat( (t - a) / (b - a) );\n}\nfloat linterp( float t ) {\n\treturn sat( 1.0 - abs( 2.0*t - 1.0 ) );\n}\n// this function and the ones above aren't mine\n// they aren't really needed but I don't feel like\n// removing them either\n// I don't remember where they were from...\nvec3 spectrum_offset( float t ) {\n\tvec3 ret;\n\tfloat lo = step(t,0.5);\n\tfloat hi = 1.0-lo;\n\tfloat w = linterp( remap( t, 1.0/6.0, 5.0/6.0 ) );\n\tfloat neg_w = 1.0-w;\n\tret = vec3(lo,1.0,hi) * vec3(neg_w, w, neg_w);\n\treturn pow( ret, vec3(1.0/2.2) );\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y *= iResolution.y/iResolution.x;\n\tfloat time = iTime;\n    vec4 sum = texture(iChannel0, vec2(1.0,1.778)*uv);\n\n    const float amount = 6.0;\n    for(float i = 0.0; i < amount; i++){\n        uv /= pow(mix(vec2(1.0), fract(BLOCK_SIZE*uv)+0.5, clamp(pow(length(texture(iChannel1, vec2(0.06*iTime)).xyz ), 15.0),0.0, 1.0)), vec2(BLOCK_CTRL)); \n        sum = clamp(sum, 0.15, 1.0);\n        sum /= 0.1+0.9*clamp(texture(iChannel0, vec2(1.0,1.778)*uv+vec2(1.0/iResolution.x,i/iResolution.y)),0.0,2.0);\n    \tsum *= 0.1+0.9*clamp(texture(iChannel0, vec2(1.0,1.778)*uv+vec2(1.0/iResolution.x,-i/iResolution.y)),0.0,2.0);\n    \tsum *= 0.1+0.9*clamp(texture(iChannel0, vec2(1.0,1.778)*uv+vec2(-i/iResolution.x,i/iResolution.y)),0.0,2.0);\n    \tsum /= 0.1+0.9*clamp(texture(iChannel0, vec2(1.0,1.778)*uv+vec2(-i/iResolution.x,-i/iResolution.y)),0.0,2.0);\n        sum.xyz /= 1.01-0.025*spectrum_offset( 1.0-length(sum.xyz) );\n    \tsum.xyz *= 1.0+0.01*spectrum_offset( length(sum.xyz) );\n        \n    }\n    sum = 0.1+0.9*sum;\n    float chromaf = pow(length(texture(iChannel1, vec2(0.0213*iTime)).xyz ), 2.0);\n    sum /= length(sum);\n    sum = (-0.2+2.0*sum)*0.9;\n\tfragColor = sum;\n}\n","name":"","description":"","type":"image"}]}