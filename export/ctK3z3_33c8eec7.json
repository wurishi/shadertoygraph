{"ver":"0.1","info":{"id":"ctK3z3","date":"1684359688","viewed":60,"name":"Small triangular tiling","username":"zenzicubic","description":"A small, simple triangular texture using minimal code","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tiling","short","tweet","triangular","golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nHere's how this works. \n\nImagine the unit square, with one of its diagonals. \n\nIf you shear it by the right amounts, the square becomes a parallelogram, with the diagonal\ncutting it into two equilateral triangles.\n\nThe input point is first scaled down, then multiplied by the inverse of this shear matrix.\n\nThe sheared coordinates are then remapped to the unit square, and colored by which side of the diagonal \nthey lie on.\n*/\n\n\nvoid mainImage(out vec4 k, vec2 c)\n{\n    c = fract(c * .01 * mat2(1, -.58, 0, 1.15));\n    k = vec4(c.y > 1. - c.x);\n}","name":"Image","description":"","type":"image"}]}