{"ver":"0.1","info":{"id":"tsXyRX","date":"1585220831","viewed":103,"name":"TP5&6 - Lucas Barthélemy","username":"EpikWem","description":"Infographie","likes":3,"published":1,"flags":0,"usePreview":1,"tags":["infographie"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Texturing\n// Lucas Barthelemy\n\nconst float View = 2800.0;  // View distance\nconst float Epsilon = 0.01; // Marching epsilon\nconst int Steps = 200;      // Number of steps\n\n// Lipschitz constant\nconst float K = 1.0;\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n// Terrain -----------------------------------------------------------------------------------------------\n\n// Smooth compactly supported polynomial\n// x : Real\n// r : Radius\nfloat Smooth( in float x, in float r)\n{\n    x/=r;\n    x=clamp(x,0.0,1.0);\n    float y=(1.0-x*x);\n    return y*y*y;\n}\n    \n// Sphere \n// p : Point, z will be used for height of flat part\n// c : Center \n// r : Radius\nfloat Flatten( in vec2 p, in float h, in vec3 c, in float r)\n{\n    float d = length(p-c.xy);\n    float u = Smooth(d,r);\n    return mix(h,c.z,u);\n}\n\n// Terrain heightfield\n// x : Position in the plane\nfloat Terrain( in vec2 p ) {\n    // abaisse le terrain\n    // valeur par defaut: 195.0\n\tconst float abaisse = 195.0;\n    \n    // Rotation matrix\n\tconst mat2 m2 = mat2(0.8,-0.6,0.6,0.8);\n\n    const float l0 = 530.0;\n    const float a0 = 195.0;\n    \n\t// Scale\n    p = p/l0;\n    \n    float a = 0.0;\n    float b = 1.0;\n    for( int i=0; i<9; i++ ) {\n        float n = Noise(p);\n        a += b*n;\n\t\tb *= 0.5;\n        p *= m2*2.0;\n    }\n\treturn a0*a - abaisse;\n} \n\n// Implicit surface defining the terrain\n// p : Point\n// index : texture index\nV ImplicitTerrain(in vec3 p, int index) {\n    float z = Terrain( p.xy );\n    z = Flatten(p.xy, z, vec3(200.0,200.0,150.0), 200.0);\n    float h = p.z - z;\n    \n    return V(h,index);\n}\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Union, preserve the color of the first object\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nV Union(V a, V b) {\n    if (a.v < b.v)\n        return V(a.v, a.i);\n    else {\n        if (a.v < 0.0)\n        \treturn V(b.v,a.i);\n        else\n            return V(b.v,b.i);\n    }\n}\n\nV Union(V a, V b, V c) {\n\treturn Union(Union(a, b), c);\n}\n\nV Union(V a, V b, V c, V d) {\n\treturn Union(Union(a, b), Union(c, d));\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Intersection(V a, V b){\n    if (a.v > b.v)\n        return V(a.v, a.i);\n    else \n    \treturn V(b.v, a.i);  \n}\n\nV Intersection(V a, V b, V c) {\n    return Intersection(a, Intersection(b, c));\n}\n\nV Intersection(V a, V b, V c, V d, V e, V f) {\n    return Intersection(Intersection(a, b, c), Intersection(d, e, f));\n}\n\n// Difference\n// a, b : field function of left and right sub-trees\nV Diff ( V a, V b ) {\n    return V(max(a.v, -b.v), a.i);\n}\n\n// Sphere \n// p : Point\n// c : Center \n// r : Radius\n// index : Texture index\nV Sphere(vec3 p, vec3 c, float r, int index) {\n  return V(length(p-c)-r,index);\n}\n\nV Tunnel(vec3 p) {\n\tfloat r = 35.0 + Noise(p);\n\tV u = Union(\n        Sphere(p, vec3(300.0, 300.0, -50.0), r, 1),\n\t\tSphere(p, vec3(280.0, 280.0, -50.0), r, 1),\n\t\tSphere(p, vec3(260.0, 260.0, -100.0), r, 1),\n\t\tSphere(p, vec3(270.0, 270.0, -75.0), r, 1)\n    );\n    return u;\n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\n// index : Texture index\nV Plane(vec3 p, vec3 n, vec3 o, int i){\n    return V( dot((p-o), n), i );\n}\n\n// cree un cube parallele au plan, selon deux sommets opposés a et b\n// p : point\n// a, b : sommets opposés l'un l'autre\nV Box ( vec3 p, vec3 a, vec3 b, int i ) {\n    vec3 x = vec3(1.0, 0.0, 0.0);\n  \tvec3 y = vec3(0.0, 1.0, 0.0);\n  \tvec3 z = vec3(0.0, 0.0, 1.0);\n    return Intersection(\n            Plane(p, -x, a, i),\n            Plane(p, -y, a, i),\n            Plane(p, -z, a, i),\n            Plane(p, x, b, i),\n            Plane(p, y, b, i),\n            Plane(p, z, b, i)\n        );\n}\n\n// cree un cylindre selon un centre de base a, une normale u, et un rayon r\n// p : point\n// a : \nV CylinderInf( vec3 p, vec3 a, vec3 u, float r, int i ) {\n    float l= dot((p-a), u);\n    float d = distance(p, a); \n    return V( (sqrt(d*d - l*l) - r), i);\n}\n\nV Cylinder( vec3 p, vec3 a, vec3 b, float r, int i ) {\n    vec3 r3 = vec3(r, r, r);\n    vec3 l = (b-a)/length(b-a);\n    V ci = CylinderInf(p, a, l, r, i);\n    V pa = Plane(p, a, l, i);\n    V pb = Plane(p, b, -l, i);\n    return Intersection( ci, Box(p, a-r, b+r, 3) );\n}\n\n // House\nV House (vec3 p, vec3 o, float t) {\n\tvec3 a = vec3(-t, -t, -0.2*t) + o;\n    vec3 b = vec3(t, t, 1.8*t) + o;\n    return Box(p, a, b, 4);\n}\n\n // Fort\nV Fort (vec3 p, vec3 o) {\n    float d = 30.0;\n\tvec3 a = vec3(-d, -d, 0.0) + o;\n    vec3 b = vec3(d, d, 60.0) + o;\n    float r = 15.0;\n    return Union(\n        Diff( Box(p, a, b, 3), Box(p, (vec3(-d, -d, -20.0)*0.7 + o), (vec3(d, d, 60.0)*0.7 + o), 3) ),\n        Cylinder(p, a, vec3(a.x, a.y, b.z), r, 3)\n    );\n}\n\n\n\n// Water ------------------------------------------------------------------------------------------------\n\n// Water heightfield\n// x : Position in the plane\nfloat Water( in vec2 x ) {    \n    return 4.0*Noise(x/8.0 + iTime)- 4.0;\n} \n\n// Implicit surface defining the terrain\n// p : Point\n// index : texture index\nV ImplicitWater(in vec3 p, int index){\n\tfloat h = p.z - Water( p.xy );\n    return V(h,index);\n}\n\n// Scene --------------------------------------------------------------------------\n\n// Potential field of the object\n// p : point\nV Object(vec3 p) {\n  V u = Union(\n      \t\tImplicitTerrain(p,0),\n      \t\tImplicitWater(p, 1)\n  \t\t);\n    u = Intersection(u,Sphere(p,vec3(0.0,0.0,0.0),450.0,2));\n    if (p.z < 50.0)\n    \tu = Diff(u, Tunnel(p));\n    u = Union(\tu,\n              \tFort(p, vec3(-50.0, 350.0, 50.0)),\n             \tHouse(p, vec3(0.0, 0.0, 5.0), 12.0),\n              \tUnion(\n             \t\tHouse(p, vec3(60.0, -40.0, 25.0), 10.0),\n             \t\tHouse(p, vec3(80.0, -80.0, 40.0), 10.0),\n             \t\tHouse(p, vec3(40.0, -120.0, 25.0), 10.0),\n             \t\tHouse(p, vec3(-20.0, -80.0, 20.0), 10.0)\n                )\n             );\n\n  return u;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n    float v = Object(p).v;\n  n.x = Object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = Object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = Object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = Object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v/K);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Shading and lighting ---------------------------------------------------------------------------\n\nvec3 color01(vec3 c) {\n    return c / vec3(255.0, 255.0, 255.0);\n}\n\nvec3 TextureRock(in vec3 p) {\n  return (\n      mix(vec3(0.92,0.91,0.90),\n          vec3(0.64,0.52,0.32),\n          Fbm(p/50.0)\n      ) - vec3(0.2, 0.2, 0.2)\n  );   \n}\n\nvec3 TextureWater(in vec3 p) {\n    return vec3(0.0,0.2,0.5);   \n}\n\nvec3 TextureBorder(in vec3 p) {\n    return vec3(0.25,0.24,0.24);   \n}\n\nvec3 TextureStone(in vec3 p) {\n    return mix(vec3(0.22,0.22,0.30),\n               vec3(0.60,0.62,0.80),\n               1.0*Noise(p/3.0) // - vec3(0.5, 0.5, 0.3)\n              );\n}\n\nvec3 TextureWood(in vec3 p) {\n    return mix(color01(vec3(66.0, 45.0, 15.0)),\n               color01(vec3(155.0, 113.1, 137.0)),\n               Fbm(p/5.0)\n              ) - vec3(0.2, 0.2, 0.2);\n}\n\n// Compute color \n// p : Point\n// n : Normal\nvec3 Color(in vec3 p,in vec3 n) {\n    V vp= Object(p);\n    if (vp.i==0)       \n        return TextureRock(p);\n    else\n    \tif (vp.i==1)\n        \treturn TextureWater(p);\n        else\n            if (vp.i==2)\n        \t\treturn TextureBorder(p);\n            else\n                if (vp.i==3)\n                    return TextureStone(p);\n                else\n                    if (vp.i==4)\n                        return TextureWood(p);\n}\n\n// Rendering \n// ro, rd : Ray origin and direction\n// pip : Picture in picture boolean\nvec4 Render( in vec3 ro, in vec3 rd, bool pip )\n{\n    // Light direction\n    vec3 light1 = normalize( vec3(-0.8,-0.3,0.4) );\n\n\tvec3 col;\n    int it;\n    bool b;\n    float t = SphereTrace( ro, rd, View,b , it);\n\tvec3 p = ro + t*rd;\n    V vp= Object(p);\n    vec3 n = ObjectNormal( p );\n\n\n    col = Color(p,n);\n    // Sky\n    if( b==false )\n    {\n        col = vec3(0.35,0.65,0.95) - rd.z*rd.z*2.5;\n    }\n\telse \n\t{\n        // Mountains\t\t\n        if (vp.i==0)\n        {\n            vec3 ref = reflect( rd, n );\n            float fre = clamp( 1.0 + dot(rd,n), 0.0, 1.0 );\n            vec3 hal = normalize(light1-rd);\n\n\n             // Pseudo diffuse lighting\n            float dif = 0.5*(1.0+dot( light1, n ));\n            dif*=dif;\n\n            col = 0.45*col+0.55*dif*vec3(0.35,0.35,0.35);\n            \n             // Forest\n            vec3 fc1 = vec3(250.0, -50.0, 0.0);\n            vec3 fc2 = vec3(-250.0, 100.0, 0.0);\n            float forest = max(\n                smoothstep( 500.0, 0.0, (distance(p, fc1) + 100.0*Noise(p/500.0)) ),\n                smoothstep( 400.0, 0.0, (distance(p, fc2) + 100.0*Noise(p/500.0)) )\n                );\n            if (forest < 0.2)\n                forest = 0.0;\n            //forest = smoothstep( 10.0, 200.0, (p.z + 100.0*Noise(p/500.0)));\n            col = mix(col, vec3(0.05, 0.20, 0.00), forest);         \n            \n             // Snow\n            float snow = 0.0;\n            snow = smoothstep( 75.0, 200.0, (p.z + 100.0*Noise(p/100.0)) );\n            if(snow < 0.0)\n                snow = 0.0;\n            col = mix(col, vec3(0.9, 0.9, 1.0), snow);\n            \n        }\n        \n        // Water\n        if (vp.i == 1)\n        {\n            vec3 ref = reflect( rd, n );\n            bool br;\n            int itr;\n            float tr = SphereTrace(p + 0.15*n, ref, View, br, itr);\n            if (br)\n                col = mix(TextureRock(p), TextureWater(p), p.z);\n            \n            float fre = clamp( 1.0 + dot(rd,n), 0.0, 1.0 );\n            vec3 hal = normalize(light1-rd);\n\n            float h = Terrain(p.xy) - 0.1;\n\t\t\tvec3 q = vec3(p.xy, h);\n            vec3 nq = ObjectNormal(q);\n            \n            float prof = smoothstep((p.z - h), 0.0, 5.0);\n            float trans = 0.2 + 0.8*prof;\n            \n             // Pseudo diffuse lighting\n            float dif = 0.5*(1.0+dot( light1, n ));\n            dif *= dif;\n            col = 0.45*col + 0.55*dif*vec3(0.35, 0.35, 0.35);\n            \n            // Pseudo diffuse lighting\n            float difq = 0.5*(1.0 + dot( light1, nq ));\n            difq *= difq;\n            vec3 colq = TextureRock(q);\n            colq = 0.45*colq + 0.55*difq*vec3(0.35, 0.35, 0.35);\n            \n            col = mix( colq, col, trans );\n        }\n\t}\n    \n    // Shading for iterations\n    if (pip==true)\n    {\n    \tfloat s=float(it)/float(Steps);\n\t\treturn vec4(0.112+0.824*s,0.418+0.556*s,0.611-0.515*s,t);\n    }\n    else\n    {\n    \t// Gamma with square root\n    \treturn vec4( sqrt(col), t );\n    }\n}\n\n\n\nvec2 RayDirection(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Picture in picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // Time as function of the position of the mouse\n    float a = 3.14*2.0*1.5*iMouse.x/iResolution.x;\n\n    // Camera transform\n    vec3 ro; \n    mat3 cam = Camera( a, ro);   \n\n    // Picture in picture\n    bool pip=true;\n    \n    // Pixel coordinates\n    vec2 p = RayDirection(fragCoord, pip);\n   \n    // Camera ray    \n    vec3 rd = cam * normalize(vec3(p,5.0));\n    \n    // Render\n    vec4 res = Render( ro, rd, pip );\n     \n    fragColor = vec4( res.xyz, 0.0 );\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Texturing\n// Eric Galin\n\n// Texturing and noise ---------------------------------------------------------\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in the plane\nfloat Hash(in vec2 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix( Hash(i+vec2(0,0)), \n                        Hash(i+vec2(1,0)),f.x),\n                   mix( Hash(i+vec2(0,1)), \n                        Hash(i+vec2(1,1)),f.x),f.y);\n}\n\n// Fractal brownian motion with 4 frequencies\n// p : Point\nfloat Fbm(in vec3 p)\n{\n    return Noise(p)/2.0+Noise(p*2.0)/4.0+Noise(p*4.0)/8.0+Noise(p*8.0)/16.0;\n}\n\n// Camera\n// a: Rotation angle around z axis\n// ro : Ray origin\nmat3 Camera(float a, out vec3 ro)\n{\n\tfloat range = 1300.0;\n    // Origin\n    ro = vec3(range*cos(a),range*sin(a),range/2.0);\n\t\n    // Target\n    vec3 ta = vec3(0.0, 0.0, -75.0);\n    \n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(0.0, 0.0,1.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}","name":"Common","description":"","type":"common"}]}