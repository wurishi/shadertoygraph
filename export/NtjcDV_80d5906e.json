{"ver":"0.1","info":{"id":"NtjcDV","date":"1650268838","viewed":197,"name":"Canonical Logarithm","username":"KingHashish","description":"domain colouring of numerically evaluated Cauchy integral along spiral path","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["math","complex","domaincoloring"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323\n#define tt 10. + 6.*cos(.1*iTime) //float(int(iTime)%16)\n#define st 0.03\n\nvec2 clog(vec2 z)\n{\n    vec2 w;\n    \n    w.x = 0.5*log(z.x*z.x + z.y*z.y);\n    w.y = atan(z.y, z.x);\n    \n    return w;\n}\n\nvec2 cmul(vec2 z1, vec2 z2)\n{\n    return mat2(z1, -z1.y, z1.x)*z2;\n}\n\nvec2 cdiv(vec2 z1, vec2 z2) //z1/z2\n{\n    return z1 * mat2(z2, -z2.y, z2.x) / dot(z2, z2);\n}\n\n\nvec3 hrgb2(vec2 w)\n{\n    float a = atan(w.y, w.x); \n    \n    vec2 v;\n    \n    if (true) { //polar\n        v = w;\n        w.x = atan(v.y, v.x)/(PI/128.) /*+ iTime*/;\n        w.y = length(v);\n        //w.y = log(1. + 100.*w.y);\n        \n        \n        //w.y -= fract(iTime);\n        \n    }\n\n    vec3 c;\n    \n    \n    //***\n    a = (PI + a)/(2.*PI);\n    \n    //c.r =  0.5 - 0.5*sin(2.0*PI*a - PI/2.0 );\n    //c.g = (0.5 + 0.5*sin(2.0*PI*a*1.5 - PI/2.0 )) * float(a < 0.66);\n    //c.b = (0.5 + 0.5*sin(2.0*PI*a*1.5 + PI/2.0 )) * float(a > 0.33);\n    \n    c.r =  0.5 - 0.5*sin(2.0*PI*a - PI/2.0 );\n    c.g = (0.5 + 0.5*sin(2.0*PI*a*2.0 - PI)); //* float(a < 0.66);\n    c.b = (0.5 + 0.5*sin(2.0*PI*a*1.5 + PI/2.0 )) * float(a > 0.33);\n                \n    c -= 0.15*fract(10.*w.y) + 1.5*fract(mod(a, 1.0/64.0));\n    c -= 0.45*pow( abs(sin(4.*PI*v.x))*abs(sin(4.*PI*v.y)), 0.2);\n    //***\n    \n        \n    /*\n    float c1;\n    c1 = 1. - 1.0*pow(abs(sin(2.*PI*w.x))*abs(sin(2.*PI*w.y)), 0.15);\n    c = vec3(c1, c1, c1);\n    */\n    \n\n    \n    if (false) { //checkerboard\n        int b = (abs(int(2.*fract(w.x)))) \n              ^ (abs(int(2.*fract(w.y))));\n\n        if (b == 0)\n            if (abs(a) > PI/2.) \n                if (a > 0.) c = vec3(1.,0.,0.); else c = vec3(0.,1.,0.);\n            else \n                if (a > 0.) c = vec3(1.,1.,1.); else c = vec3(0.,0.,1.);\n\n        else {\n            c = vec3(0.,0.,0.);\n        }\n    }\n       \n    return c;\n}\nvec3 hrgb(vec2 w)\n{\n    vec3 c;\n    float mm;\n    float p;\n    \n    float m = length(w);\n    float a = (PI + atan(w.y, w.x))/(2.0*PI);\n    \n    c.r =  0.5 - 0.5*sin(2.0*PI*a - PI/2.0);\n    c.g = (0.5 + 0.5*sin(2.0*PI*a*1.5 - PI/2.0)) * float(a < 0.66);\n    c.b = (0.5 + 0.5*sin(2.0*PI*a*1.5 + PI/2.0)) * float(a > 0.33);\n    \n    mm = fract(mod(m, 1.0/10.));\n    p = fract(mod(a, 1.0/128.0));\n     \n    c -= 1.5*mm + 35.*p;\n    //c *= pow( abs(sin(4.*PI*w.x))*abs(sin(4.*PI*w.y)), 0.1);\n    /*\n    if (length(w) + .05 > 1. &&\n        (fract(w.x) < .05 || fract(-w.x) < .05 ||\n         fract(w.y) < .05 || fract(-w.y) < .05)) c -= 0.4;\n         */\n    \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 z, w, p, q, sum;\n    float t;\n    \n    float a = 0.5, k = 0.09;\n    float sx = 2., sy = 1.;\n    \n    float tx = a*exp(k*16.)*cos(16.) + sx;\n    float ty = a*exp(k*16.)*sin(16.) + sy;\n    \n    z = fragCoord - iResolution.xy/2.;\n    \n\n    //if (iMouse.xy != vec2(0., 0.)) //to center at origin\n    //    z -= iMouse.xy - iResolution.xy/2.;\n    \n    z /= (0.2*iResolution.y); //zoom\n    \n    \n    //symbolic case\n    //w = clog( cdiv(vec2(z.x - 1., z.y), vec2(z.x + 1., z.y)) );\n    \n    sum = vec2(0., 0.);\n    //for (t=tt; t<16.; t+=st) {\n    for (t=16.-st; t>=tt; t-=st) {\n        p.x = a*exp(k*t)*cos(t) + sx - tx;\n        p.y = a*exp(k*t)*sin(t) + sy - ty;\n        \n        w = cdiv( vec2(1.,0.), p - z );\n        \n        q.x = a*exp(k*t)*(k*cos(t) - sin(t));\n\t\tq.y = a*exp(k*t)*(k*sin(t) + cos(t));\n        \n        w = cmul( w, q );\n        \n        sum += 0.1*w;\n    }\n    for (t=16.; t>=tt; t-=st) {\n        p.x =-a*exp(k*t)*cos(t) - sx + tx;\n        p.y =-a*exp(k*t)*sin(t) - sy + ty;\n        \n        w = cdiv( vec2(1.,0.), p - z );\n        \n        q.x = a*exp(k*t)*(k*cos(t) - sin(t));\n\t\tq.y = a*exp(k*t)*(k*sin(t) + cos(t));\n        \n        w = cmul( w, q );\n        \n        sum += 0.1*w;\n    }\n    \n    w = cmul( sum, vec2(0., -1./(2.*PI)) );\n               \n             \n    fragColor = vec4(hrgb(w), 1.0);\n}","name":"Image","description":"","type":"image"}]}