{"ver":"0.1","info":{"id":"7tBXRt","date":"1628352822","viewed":57,"name":"Patterned_Circles","username":"Dmitry_Gantimurov","description":"Hypnodance","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float BlackCircle(vec2 uv, vec2 p, float r, float blur) {\n\n    float d = length(uv - p);\n    float c = smoothstep(r - blur, r, d);\n    \n    return c;\n}\n\nfloat RoundLine(vec2 uv, vec2 p, float r, float thickness) {\n    float c = BlackCircle(uv, p, r, 0.);\n    c += 1. - BlackCircle(uv, p, r - thickness, 0.);\n    \n    return c;\n}\n\nfloat PatternedCircle(vec2 uv, vec2 p, float r, float thickness, float gap) {\n    \n    float c = RoundLine(uv, p, r, thickness);\n    \n    float new_r = r - (thickness + gap);\n    for(new_r; new_r > 0.; new_r -= (thickness+gap)) {\n    \n        c *= RoundLine(uv, p, new_r, thickness);\n    \n    }\n    return c;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    uv *= 5.;\n    vec3 col = vec3(1.0);\n    \n    vec2 p = vec2(0.);\n    \n    vec2 gv = fract(uv) - .5;\n    vec2 id = floor(uv);\n    //float c = PatternedCircle(gv, p, 0.6, 0.02, 0.03);\n    float c = PatternedCircle(gv, p, 0.6, abs(3.*sin(iTime*0.1)*0.01), abs(3.*cos(iTime*0.1)*0.01));\n    col *= c;\n    //if(gv.x>.48 || gv.y>.48) col.r = 0.;\n    // Output to screen\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}