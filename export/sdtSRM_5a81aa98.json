{"ver":"0.1","info":{"id":"sdtSRM","date":"1634094031","viewed":456,"name":"BB8 Camera Filter","username":"ChutneyPot","description":"Everyone in my meetings has a cool camera filter/background. So decided to make one for myself!","likes":9,"published":1,"flags":2,"usePreview":0,"tags":["camera","droid","starwars","bb8"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// BB8 Camera Filter, October 2021\n// by Tito Morab - ChutneyPot\n// https://www.shadertoy.com/view/sdtSRM\n//--------------------------------------------------------------------------\n#define BG1 vec4(0.96, 0.84, 0.55, 1.0)\n#define BG2 vec4(0.55, 0.35, 0.24, 1.0)\n#define BODY1 vec4(0.81, 0.79, 0.71, 1.0)\n#define BODY2 vec4(0.45, 0.42, 0.41, 1.0)\n#define BODY3 vec4(0.88, 0.49, 0.27, 1.0)\n#define BODY4 vec4(0.05, 0.05, 0.2, 1)\n#define BODY5 vec4(0.35, 0.32, 0.31, 1.0)\n#define BODY6 vec4(1.0, 0.92, 0.43, 1.0)\n#define OUTLINE vec4(0.18, 0.02, 0.07, 1.0)\n#define SCREEN vec4(0.0, 0.0, 0.1, 1.0)\n#define GREYSCALE vec3(0.3, 0.59, 0.11)\n\n#define ss(a, b, x) smoothstep(a, b, x)\n#define BLUR 4.0 / iResolution.y\n\n//https://iquilezles.org/articles/distfunctions2d\nfloat circle(in vec2 uv, float r)\n{\n    return length(uv) - r;\n}\n\nfloat box(in vec2 uv, in vec2 s)\n{\n    vec2 d = abs(uv) - s;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nfloat line(in vec2 uv, in vec2 a, in vec2 b)\n{\n    vec2 pa = uv - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\nfloat parallelogram(in vec2 uv, float wd, float ht, float sk)\n{\n    vec2 e = vec2(sk, ht);\n    uv = (uv.y < 0.0) ? -uv : uv;\n    vec2 w = uv - e; \n    w.x -= clamp(w.x, -wd, wd);\n    vec2 d = vec2(dot(w, w), -w.y);\n    float s = uv.x * e.y - uv.y * e.x;\n    uv = (s < 0.0) ? -uv : uv;\n    vec2 v = uv - vec2(wd, 0); \n    v -= e * clamp(dot(v, e) / dot(e, e), -1.0, 1.0);\n    d = min(d, vec2(dot(v, v), wd * ht - abs(s)));\n    return sqrt(d.x) * sign(-d.y);\n}\n\nvec2 rotate(in vec2 uv, float d)\n{\n    float rad = radians(d);\n    return uv * mat2(cos(rad), sin(rad), -sin(rad), cos(rad));\n}\n\nvec4 camera(in vec2 uv)\n{\n    float feed = dot(texture(iChannel0, uv * 1.6 - vec2(0.25, 0.37)).xyz, GREYSCALE);\n    \n    uv *= 4.0;\n    float l1 = step(fract(uv.y + iTime * 0.2), 0.005);\n    \n    uv *= 50.0;\n    float l2 = step(fract(uv.y + iTime * 0.7), 0.5);\n    \n    uv /= 200.0;\n    uv -=0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    float c = smoothstep(0.35, 0.2, length(uv));\n    \n    return vec4(mix(0.0, feed, (l1 + l2) * c)) + SCREEN; \n}\n\nvec4 bb8(in vec2 uv, in vec2 cuv)\n{\n    uv = rotate(uv, sin(iTime * 0.2) + sin(iTime * 0.4));\n    \n    //Head\n    float uo1 = ss(0.0, 0.0 - BLUR, circle((uv - vec2(0, -0.6)) * vec2(0.55, 0.66), 0.96));\n    float uo2 = ss(0.0, 0.0 - BLUR, circle(uv - vec2(0, -12.0), 11.06));\n    float uo = uo1 - min(uo1, uo2);\n    float ui1 = ss(0.0, 0.0 - BLUR, circle((uv - vec2(0.01, -0.61)) * vec2(0.55, 0.66), 0.95));\n    float ui2 = ss(0.0, 0.0 - BLUR, circle(uv - vec2(0.05, -11.997), 11.07));\n    float ui = ui1 - min(ui1, ui2);\n    \n    //Bottom bar\n    float bbo1 = ss(0.0, 0.0 - BLUR, circle(uv - vec2(0, -12.0), 11.26));\n    float bbo = min(uo, bbo1);\n    float bbi1 = ss(0.0, 0.0 - BLUR, circle(uv - vec2(-0.05, -12.0), 11.248));\n    float bbi = min(ui, bbi1);\n    \n    //Top bar\n    float tbo1 = ss(0.0, 0.0 - BLUR, circle(uv - vec2(0.2, -10.56), 11.26));\n    float tbo = uo - min(uo, tbo1);\n    float tbi1 = ss(0.0, 0.0 - BLUR, circle(uv - vec2(0.2, -10.56), 11.27));\n    float tbi = ui - min(ui, tbi1);\n    float tl1 = ss(0.01, 0.01 - BLUR, line(uv, vec2(0.4, 0.71), vec2(0.4, 0.79)));\n    float tl2 = ss(0.008, 0.008 - BLUR, line(uv, vec2(0.15, 0.71), vec2(0.15, 0.82)));\n    float tl3 = ss(0.01, 0.01 - BLUR, line(uv, vec2(-0.15, 0.7), vec2(-0.15, 0.82)));\n    float tl4 = ss(0.008, 0.008 - BLUR, line(uv, vec2(-0.4, 0.69), vec2(-0.4, 0.79)));\n    float tl = max(max(max(tl1, tl2), tl3), tl4);\n    \n    //Side bars\n    float sbro = ss(0.0, 0.0 - BLUR, parallelogram(uv - vec2(0.905, 0.45), 0.28, 0.1, -0.12));\n    float sbri = ss(0.0, 0.0 - BLUR, parallelogram(uv - vec2(0.905, 0.45), 0.26, 0.09, -0.12));\n    float sblo = ss(0.0, 0.0 - BLUR, parallelogram(rotate(uv - vec2(-0.95, 0.4), 5.5), 0.32, 0.1, 0.12));\n    float sbli = ss(0.0, 0.0 - BLUR, parallelogram(rotate(uv - vec2(-0.95, 0.4), 5.5), 0.3, 0.09, 0.11));\n    \n    //Centre\n    float cco = ss(0.0, 0.0 - BLUR, circle(uv - vec2(0, 0.08), 0.57));\n    float cbo = ss(0.0, 0.0 - BLUR, box(uv - vec2(-0.28, -0.2), vec2(0.29, 0.29)));\n    float co = max(cco, cbo);\n    float cci = ss(0.0, 0.0 - BLUR, circle(uv - vec2(0, 0.08), 0.555));\n    float cbi = ss(0.0, 0.0 - BLUR, box(rotate(uv, 0.5) - vec2(-0.28, -0.2), vec2(0.275, 0.275)));\n    float ci = max(cci, cbi);\n    float cc = ss(0.0, 0.0 - BLUR, circle(uv - vec2(0, 0.08), 0.54));\n    float c = ss(0.0, 0.0 - BLUR, circle(uv - vec2(0, 0.08), 0.51));\n    float clb = ss(0.0, 0.0 - BLUR, abs(box(uv - vec2(-0.82, -0.352), vec2(0.25, 0.12)) - 0.01) - 0.008);\n    float cll = ss(0.011, 0.011 - BLUR, line(uv, vec2(-0.557, -0.8), vec2(-0.557, -0.4)));\n    float cl = max(clb, cll);\n    float crtbo = ss(0.0, 0.0 - BLUR, box(uv - vec2(0.58, -0.4), vec2(0.3, 0.4)) - 0.1);\n    float crbbo = ss(0.0, 0.0 - BLUR, box(uv - vec2(1.1, -0.6), vec2(0.2, 0.3)));\n    float crco = ss(0.0, 0.0 - BLUR, circle(uv - vec2(0.9, -0.3), 0.4));\n    float cro = max(max(crbbo, crtbo - min(cco, crtbo)), crco);\n    float crtbi = ss(0.0, 0.0 - BLUR, box(uv - vec2(0.58, -0.4), vec2(0.29, 0.39)) - 0.1);\n    float crbbi = ss(0.0, 0.0 - BLUR, box(uv - vec2(1.1, -0.6), vec2(0.19, 0.3)));\n    float crci = ss(0.0, 0.0 - BLUR, circle(uv - vec2(0.9, -0.3), 0.39));\n    float cri = max(max(crbbi, crtbi - min(cco, crtbi)), crci);\n    float csr = ss(0.0, 0.0 - BLUR, abs(circle(uv - vec2(0.9, -0.3), 0.3)) - 0.03);\n    float csc = ss(0.0, 0.0 - BLUR, circle(uv - vec2(0.9, -0.3), 0.25));\n    float csci = ss(0.0, 0.0 - BLUR, circle(uv - vec2(0.9, -0.3), 0.2));\n    float cscr = ss(0.02, 0.017 - BLUR, parallelogram(uv - vec2(0.82, -0.22), 0.01, 0.01, 0.01));\n    float ccr = ss(0.02, 0.017 - BLUR, parallelogram(uv - vec2(-0.25, 0.35), 0.01, 0.01, 0.01));\n    \n    //Bottom panels\n    float brpo1 = ss(0.0, 0.0 - BLUR, box(uv - vec2(1.1, -0.76), vec2(0.06, 0.07)));\n    float brpi1 = ss(0.0, 0.0 - BLUR, box(uv - vec2(1.1, -0.76), vec2(0.05, 0.06)));\n    float brpo2 = ss(0.0, 0.0 - BLUR, box(uv - vec2(1.435, -0.76), vec2(0.15, 0.15)));\n    float brpi2 = ss(0.0, 0.0 - BLUR, box(uv - vec2(1.435, -0.76), vec2(0.14, 0.14)));\n    float brp = max(brpo1, brpo2);\n    float brpi = max(brpo1 - brpi1, brpo2 - brpi2);\n    float bco = ss(0.0, 0.0 - BLUR, abs(circle(uv - vec2(0, -0.615), 0.1)) - 0.01);\n    float bci = ss(0.0, 0.0 - BLUR, circle(uv - vec2(0, -0.615), 0.08));\n    float blpo1 = ss(0.0, 0.0 - BLUR, box(uv - vec2(-0.6, -0.63), vec2(0.05, 0.15)));\n    float blpi1 = ss(0.0, 0.0 - BLUR, box(uv - vec2(-0.6, -0.63), vec2(0.04, 0.14)));\n    float blpo2 = ss(0.0, 0.0 - BLUR, box(uv - vec2(-1.35, -0.72), vec2(0.27, 0.15)));\n    float blpi2 = ss(0.0, 0.0 - BLUR, box(uv - vec2(-1.35, -0.72), vec2(0.26, 0.14)));\n    float blp = max(blpo1, blpo2);\n    float blpi = max(blpo1 - blpi1, blpo2 - blpi2);\n    float blplo1 = ss(0.0, 0.0 - BLUR, box(uv - vec2(-1.2, -0.65), vec2(0.08, 0.03)));\n    float blpli1 = ss(0.0, 0.0 - BLUR, box(uv - vec2(-1.2, -0.65), vec2(0.07, 0.02)));\n    float blplo2 = ss(0.0, 0.0 - BLUR, box(uv - vec2(-1.2, -0.75), vec2(0.08, 0.03)));\n    float blpli2 = ss(0.0, 0.0 - BLUR, box(uv - vec2(-1.2, -0.75), vec2(0.07, 0.02)));\n    float blpl = max(blplo1, blplo2);\n    float blpli = max(blplo1 - blpli1, blplo2 - blpli2);\n    float blb = ss(0.007, 0.007 - BLUR, line(uv, vec2(-0.19, 0.94), vec2(-0.21, 0.93)));\n    \n    //Antennae\n    float abro = ss(0.0, 0.0 - BLUR, box(uv - vec2(0.15, 0.87), vec2(0.04, 0.04)));\n    float abri = ss(0.0, 0.0 - BLUR, box(uv - vec2(0.15, 0.87), vec2(0.03, 0.03)));\n    float atro = ss(0.0, 0.0 - BLUR, box(uv - vec2(0.15, 1.0), vec2(0.02, 0.1)));\n    float atri = ss(0.0, 0.0 - BLUR, box(uv - vec2(0.15, 1.0), vec2(0.01, 0.09)));\n    float alo = ss(0.0, 0.0 - BLUR, box(uv - vec2(-0.2, 0.92), vec2(0.025, 0.1)));\n    float ali = ss(0.0, 0.0 - BLUR, box(rotate(uv - vec2(-0.201, 0.92), 1.5), vec2(0.015, 0.09)));\n    float ald1 = ss(0.007, 0.007 - BLUR, line(uv, vec2(-0.19, 0.94), vec2(-0.21, 0.93)));\n    float ald2 = ss(0.007, 0.007 - BLUR, line(uv, vec2(-0.19, 0.9), vec2(-0.21, 0.89)));\n    float ald = max(ald1, ald2);\n    \n    vec4 col = vec4(0);\n    col = mix(col, OUTLINE, uo1);\n    col = mix(col, BODY1, uo);  \n    col = mix(col, BODY3, sbro);\n    col = mix(col, BODY3, sblo);\n    col = mix(col, BODY2, abro);\n    col = mix(col, BODY1, atro);\n    col = mix(col, BODY1, alo);\n    col = mix(col, BODY4, cc);    \n    col = mix(col, OUTLINE, sbro - sbri);\n    col = mix(col, OUTLINE, sblo - sbli);\n    col = mix(col, OUTLINE, abro - abri);\n    col = mix(col, OUTLINE, atro - atri);\n    col = mix(col, OUTLINE, alo - ali);\n    col = mix(col, OUTLINE, ald);\n    col = mix(col, OUTLINE, co - ci);\n    col = mix(col, OUTLINE, cl);\n    col = mix(col, OUTLINE, cro - cri);\n    col = mix(col, OUTLINE, csc);\n    col = mix(col, BODY4, csci);\n    col = mix(col, BODY5, csr);\n    col = mix(col, BODY3, brp);\n    col = mix(col, BODY3, blp);\n    col = mix(col, mix(BODY6, BODY2, round(sin(iTime) * 0.5 + 0.5)), blplo1);\n    col = mix(col, mix(BODY2, BODY6, round(sin(iTime) * 0.5 + 0.5)), blplo2);\n    col = mix(col, BODY5, bci);\n    col = mix(col, OUTLINE, brpi);\n    col = mix(col, OUTLINE, blpi);\n    col = mix(col, OUTLINE, blpli);\n    col = mix(col, OUTLINE, bco);\n    col = mix(col, BODY2, bbo);\n    col = mix(col, BODY2, tbo);\n    col = mix(col, OUTLINE, tl);\n    col = mix(col, OUTLINE, uo1 - ui);\n    col = mix(col, OUTLINE, bbo - bbi);\n    col = mix(col, OUTLINE, tbo - tbi);    \n    col = mix(col, camera(cuv), c);\n    col = mix(col, vec4(1), max(ccr, cscr));\n        \n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    vec4 col = vec4(0);\n    col = mix(BG2, BG1, uv.y * 0.5 + 0.5);\n    \n    vec4 bb8 = bb8(uv, fragCoord / iResolution.xy); \n    col = mix(col, bb8, bb8.w);\n    \n    //Vig\n    vec2 st = fragCoord / iResolution.xy;\n    st *= 1.0 - st;\n    float v = st.x * st.y * 30.0;\n    v = pow(v, 0.2);\n          \n    fragColor = col * v;\n}","name":"Image","description":"","type":"image"}]}