{"ver":"0.1","info":{"id":"lcfyR4","date":"1720886329","viewed":45,"name":"counterhex","username":"pb","description":"layers of hexy goodness","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["raymarch","4d","exp"],"hasliked":0,"parentid":"M3VXDK","parentname":"tangled space"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//philip.bertani@gmail.com\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec2 R = iResolution.xy,\n        uv = u/R;\n\n    O *= 0.;\n\n    float[] gk1s = float[](\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.023792, 0.094907, 0.150342, 0.094907, 0.023792,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765\n    );\n\n    //golfed by fabriceneyret2\n    for (int k; k < 25; k++)      \n        O += gk1s[k] * texture(iChannel0, uv + ( vec2(k%5,k/5) - 2. ) / R );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define rot(x) mat2(cos(x+vec4(0,11,33,0)))\n\n//Rodrigues-Euler axis angle rotation\n#define ROT(p,axis,t) mix(axis*dot(p,axis),p,cos(t))+sin(t)*cross(p,axis)\n\n//formula for creating colors;\n#define H(h)  (  cos(  h*2. + vec3(1,12,3)   )*.8 + .6 )\n\n\n//formula for mapping scale factor \n#define M(c)  log(c)\n\n#define R iResolution\n\n     \n#define ex exp(p.x)\n#define cy cos(p.y)\n#define sy sin(p.y)\n#define cz cos(p.z)\n#define sz sin(p.z)\n#define cw cos(p.w)\n#define sw sin(p.w)\n\n\n//polar repeat by fabriceneyret2\nvec2 polarRep(vec2 U, float n) {\n    n = 6.283/n;\n    float a = atan(U.y, U.x),\n          r = length(U);\n    a = mod(a+n/2.,n) - n/2.;\n    U = r * vec2(cos(a), sin(a));\n    return .5* ( U+U - vec2(1,0) );\n}\n\nvoid mainImage( out vec4 O, vec2 U) {\n  \n    O = vec4(0);\n    \n    vec3 c=vec3(0);\n    vec4 rd = normalize( vec4(U-.5*R.xy, .5*R.y, R.y))*600.;\n    \n    float sc,dotp,totdist=0., tt=iTime, t=0.;\n    \n    for (float i=0.; i<50.; i++) {\n        \n        vec4 p = vec4( rd*totdist);\n        \n        if (totdist< .1) { p.xy*=rot(tt/2.); }\n        else if (totdist < .3) p.xy*=rot(-tt/3.);\n        \n        p.z -= 160. - 6.*mod(iTime,10.);\n        \n        p.xz *= rot( 3.14/2. );\n            \n        p.yzw = (p.xyz);\n        \n   \n        sc = 1.; \n        \n        \n        p.wz = polarRep(p.wz,6.); \n         \n        vec4 w = p;\n     \n\n        for (float j=0.; j<8.; j++) {\n          \n            p = abs(p)*.9;\n            \n            dotp = max(1./dot(w,w),.01);\n            \n            sc *= dotp; \n            \n            p = p * dotp - .6; \n       \n            w =\n                    .16*\n                    (vec4( \n                        ex*(cy*cz*cw - sy*sz*sw),\n                        ex*(sy*cz*cw + cy*sz*sw),\n                        ex*(cy*sz*cw - sy*cz*sw),\n                        ex*(sy*sz*cw + cy*cz*sw) ) +  6.*p ); \n           \n                                  \n            \n        }\n         \n       \n        float dist = abs( length(p.zw )-.1)/sc ;  //funky distance estimate\n        float stepsize = dist/200.+3e-4;     \n        totdist += stepsize;                  //move the distance along rd\n        \n        //accumulate color, fading with distance and iteration count\n        \n        c +=\n             .5e-1* \n               H(M(sc))\n               * exp(-i*i*stepsize*stepsize*1e3);\n    }\n    \n    c = 1. - exp(-c*c);\n    O = ( vec4(c,0) );\n               \n}","name":"Buffer A","description":"","type":"buffer"}]}