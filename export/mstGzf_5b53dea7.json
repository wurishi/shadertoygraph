{"ver":"0.1","info":{"id":"mstGzf","date":"1677649902","viewed":41,"name":"sphereboi","username":"Ch1cky","description":"asd","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["asd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Calculate the normalized screen coordinates\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    \n    // Calculate the distance from the center of the sphere\n    float dist = length(uv);\n    \n    // Calculate the radius of the sphere\n    float radius = 0.5;\n    \n    // If the pixel is outside the sphere, color it black\n    if (dist > radius) {\n        fragColor = vec4(0.0, 0.0, 0.0, 2.0);\n        return;\n    }\n    \n    // Calculate the normal vector at the current point\n    vec3 normal = normalize(vec3(uv, sqrt(radius * radius - dist * dist)));\n    \n    // Calculate the lighting color at the current point\n    vec3 lightDir = normalize(vec3(0.5, 0.7,-1.0));\n    vec3 ambientColor = vec3(cos(iTime), sin(iTime), 0.1);\n    vec3 diffuseColor = vec3(sin(iTime), cos(iTime), 1.0);\n    vec3 specularColor = vec3(-sin(iTime), -cos(iTime), 1.0);\n    vec3 reflectDir = reflect(-lightDir, normal);\n    vec3 viewDir = normalize(vec3(0.0, 0.0, -1.0));\n    float shininess =5.0;\n    vec3 lightingColor = ambientColor + max(dot(lightDir, normal), 0.0) * diffuseColor +\n                          pow(max(dot(reflectDir, viewDir), 0.0), shininess) * specularColor;\n    \n    // Color the pixel with the lighting color\n    fragColor = vec4(lightingColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}