{"ver":"0.1","info":{"id":"lXSyR3","date":"1727480327","viewed":25,"name":"Curves_test","username":"alex_","description":"curves test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["curves"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize the coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Parameters for the curves\n    float frequency = 5.0; // Number of curves in each tile\n    float amplitude = 0.1; // Height of the curves\n    float thickness = 0.04; // Thickness of the curves\n    \n    // Number of tiles\n    vec2 tiles = vec2(4.0, 30.0); // 4x3 grid of tiles\n    \n    // Scale UV to create tiling\n    vec2 tileUV = fract(uv * tiles);\n    \n    // Calculate the y-position of the curve at this x-coordinate\n    float y = amplitude * sin(tileUV.x * frequency * 6.28318) + 0.5;\n    \n    // Check if the current pixel is within the curve\n    float curve = smoothstep(y - thickness, y, tileUV.y) - smoothstep(y, y + thickness, tileUV.y);\n    \n    // Add some color based on the tile position\n    vec3 col = vec3(0.5 + 0.5 * sin(uv.x * tiles.x), \n                    0.5 + 0.5 * cos(uv.y * tiles.y), \n                    0.5);\n    \n    // Output the final color\n    fragColor = vec4(col * curve, 1.0);\n}","name":"Image","description":"","type":"image"}]}