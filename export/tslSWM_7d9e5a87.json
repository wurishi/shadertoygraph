{"ver":"0.1","info":{"id":"tslSWM","date":"1551526016","viewed":554,"name":"SPH fluid 2d","username":"kuma720","description":"smoothed particle hydrodynamics","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["fluid2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void getStatus( int id , out vec2 pos , out vec2 velocity , out float pressure ) {\n\n    int fcx = (id * DATANUM) % rx;\n    int fcy = (id * DATANUM) / rx;\n    ivec2 fc = ivec2(fcx,fcy);\n    vec4 t1 = texelFetch( iChannel0 , fc , 0) ;\n   \tpos = t1.xy;\n    velocity = t1.zw;\n    \n    int fcx2 = (id * DATANUM + 1) % rx;\n    int fcy2 = (id * DATANUM + 1) / rx;\n    ivec2 fc2 = ivec2(fcx2,fcy2);\n    vec4 t2 = texelFetch( iChannel0 , fc2 , 0 ) ;\n    pressure = t2.x;\n    \n}\n          \n                               \nvoid mainImage( out vec4 c, in vec2 ifc )\n{\n    vec2 uv = ifc / iResolution.xx ;\n    uv = uv * LIM ;\n\n    float len = 9999.;\n    float op;\n    vec2 ce;\n    for( int I=0 ; I<PARTICLE_CNT ; ++I ) {\n        \n        vec2 pos2;\n        vec2 vel2;\n        float p2;\n        getStatus(I,pos2,vel2,p2);\n        \n        float l = distance( pos2 , uv );        \n        if ( l < len ) {\n            len = l;\n            op = p2;\n            ce = pos2;\n        }\n    }\n    \n    float l  = smoothstep( 0.01 , 0.3 , particle_size - len );\n    c = l * vec4( 0.4,0.5,1.9 , 1. ) ;\n    \n#if RENDERING_RE\n    float l2 = smoothstep( 0.01 , 0.3 , re - len );\n    c += l2 * vec4( 1.4,0.,0. , 1. ) ;\n#endif    \n    \n    //c += texelFetch( iChannel0 , ivec2(ifc) , 0 ) ;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PARTICLE_CNT 900\n#define PI 3.1415\n#define rx int(iResolution.x);\n#define DATANUM 10\n#define LIM 50.\n\nfloat re = LIM / 30.; //effective radius\nfloat mass = 1.;\nfloat viscu = 99.;  //visc\nfloat dense = 40.;  \nfloat p0 = 1000. ;  //starting dense\nfloat pik = 1.; //dense constant\nfloat dt = .1; //time step\n\nfloat particle_size = 0.5;\n#define RENDERING_RE 0","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void getStatus( int id , out vec2 pos , out vec2 velocity , out float pressure ) {\n\n    int fcx = (id * DATANUM) % rx;\n    int fcy = (id * DATANUM) / rx;\n    ivec2 fc = ivec2(fcx,fcy);\n    vec4 t1 = texelFetch( iChannel0 , fc , 0) ;\n   \tpos = t1.xy;\n    velocity = t1.zw;\n    \n    \n    int fcx2 = (id * DATANUM + 1) % rx;\n    int fcy2 = (id * DATANUM + 1) / rx;\n    ivec2 fc2 = ivec2(fcx2,fcy2);\n    vec4 t2 = texelFetch( iChannel0 , fc2 , 0 ) ;\n    pressure = t2.x;\n    \n}\n\nfloat getPressureW( float r ) {\n    if ( 0. < r && r < re ) {\n        float alpha = 4. / ( PI * pow( re , 8. ) );\n        float q = re * re - r * r;\n        return alpha * q ; \n    } else {\n        return 0.;\n    }\n}\n\nvec2 getFpW( float r ,  vec2 rij ) {\n    if ( 0. < r && r < re ) {\n        float alpha = - 30. / ( PI * pow( re , 6. ) );\n        float q = re - r;\n        return alpha * q * q * rij / r;     \n    } else {\n        return vec2(0.);\n    }\n}\n\nfloat getFvW( float r ) {\n    if ( 0. < r && r < re ) {\n        float alpha = 20. / ( 3. * PI * pow( re , 5. ) );\n        float q = re - r;\n        return alpha * q ;     \n    } else {\n        return 0.;\n    }\n}\n\nfloat clacPreesure( vec2 pos , vec2 vel , float p1 ) {\n\t\n    float a = 0.;\n    \n    for( int I=0 ; I<PARTICLE_CNT ; ++I ) {\n        \n        vec2 pos2;\n        vec2 vel2;\n        float p2;\n        getStatus(I,pos2,vel2,p2);\n\n       float w = getPressureW( distance( pos , pos2 ) );\n        a += mass * w ;\n    }\n    \n    return pik * ( a - p0 );\n    \n}\n\nvec2 clacFp( vec2 pos , vec2 vel , float p1 ) {\n\t\n    vec2 a = vec2(0.);\n    \n    for( int I=0 ; I<PARTICLE_CNT ; ++I ) {\n        \n        vec2 pos2;\n        vec2 vel2;\n        float p2;\n        getStatus(I,pos2,vel2,p2);\n\n        vec2 w = getFpW( distance( pos , pos2 ) , normalize(vec2(pos2 - pos)) );\n        a += mass * ( p1 + p2 ) / ( 2. * dense ) * w ;\n    }\n    \n    return - a;\n    \n}\n\nvec2 clacFv( vec2 pos , vec2 vel , float p1 ) {\n\n    vec2 a = vec2(0.);\n    \n    for( int I=0 ; I<PARTICLE_CNT ; ++I ) {\n        \n        vec2 pos2;\n        vec2 vel2;\n        float p2;\n        getStatus(I,pos2,vel2,p2);\n\n        float w = getFvW( distance( pos , pos2 ) );\n        a += mass * ( pos - pos2 ) / ( dense ) * w ;\n        \n    }\n    \n    return viscu * a;\n}\n\n                               \n                               \nvoid mainImage( out vec4 c, in vec2 ifc )\n{\n    int t = int(ifc.x) + int(ifc.y) * int(iResolution.x);\n    int id = t / DATANUM;\n    int type = t % DATANUM;\n    if ( PARTICLE_CNT < id ) {\n        c = vec4(0.);\n    \treturn;\n    }\n\n    vec2 pos;\n    vec2 vel;\n    float p;\n    getStatus(id,pos,vel,p);\n\n    if ( iFrame < 30 ) {\n        \n        if ( type ==0 ) {\n            int M = 41;\n            float xs = .7; //x-step\n            float ys = .7; //y-step\n            float xo = 1.; //x-offset\n            float yo = 2.; //y-offset\n            c.x = float( id % M ) * xs + xo ; \n            c.y = float( id / M ) * ys + yo ; \n            c.z = 0.;\n            c.w = 0.;\n        }\n        \n        if ( type ==1 ) {\n            c.x = 1. ; \n            c.y = 1. ; \n            c.z = 0.;\n            c.w = 0.;\n        }\n        return;\n    }\n    \n    if ( type ==1 ) {        \n        c.x = clacPreesure(pos,vel,p);\n        c.y = 0.;\n        c.zw = vec2(0.);\n        return;\n    }    \n    \n    if ( type == 0 ) {\n        \n        vec2 g = vec2(0.,-9.8);\n\n        vec2 fp = clacFp(pos,vel,p);\n        vec2 fv = clacFv(pos,vel,p);\n        vec2 dv = dt / p0 * (fp + fv + g);\n        \n        vel += dv;\n        float l = length(vel);\n        float ms = .1;\n        if( ms < l ) {\n            vel = normalize(vel) * ms;\n        }\n        \n        pos += vel;\n        \n        if ( LIM < pos.x ) {\n            pos.x -= LIM;\n        }\n        if ( LIM < pos.y ) {\n            vel.y = - vel.y * .5;\n        }\n        if ( pos.x < 0. ) {\n            pos.x += LIM;\n        }\n        if ( pos.y < 1. ) {\n            vel.y = - vel.y;\n            pos.y = 1.;\n        }\n        \n        c.xy = pos;\n        c.zw = vel;\n        \n        return;\n    }\n    \n\n    //c = vec4(0.,1.,0.,1.);\n    return;\n}","name":"Buffer A","description":"","type":"buffer"}]}