{"ver":"0.1","info":{"id":"7d2SWW","date":"1620398632","viewed":108,"name":"metaball_hw6","username":"shadow_ray","description":"3D Graphics 6th homework\n2021 may 7","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["procedural","raymarching","cubemap"],"hasliked":0,"parentid":"Nd2SDD","parentname":"Ray marching homework base"},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 3Dgr 6th homework\n// 2021 may 7\n\n#define MAX_STEPS 64\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define NORM_EPS .0001\n\nfloat sdPlane( vec3 p ){ return p.y;}\nfloat sdSphere(vec3 p, float s){ return length(p) - s; }\nfloat sdTorus( vec3 p, vec2 t ){ return length( vec2(length(p.xz)-t.x,p.y) )-t.y; }\n\nfloat smin( float a, float b, float k ){\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdScene(vec3 p) {\n    float d;\n    float ds = sdSphere(p-vec3(-0,1,0), 1.);\n    //float sb = sdSphere(p-vec3(sin(iTime)*3.,1,0), 1.);\n    float dt = sdTorus(p-vec3(sin(iTime)*3.,1,0), vec2(1.,0.1));\n    d = smin(ds, dt, 1.);\n    d = min(d, sdPlane(p));\n    return d;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n\tfloat t = 0.;    \n    for(int i=0; i<MAX_STEPS; ++i) {\n    \tvec3 p = ro + rd*t;\n        float dS = sdScene(p);\n        t += dS; //distance to Scene\n        if(t>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return t;\n}\n\nvec3 getNormal(vec3 p){\n    float d = sdScene(p);    \n    vec2 e = vec2(NORM_EPS, 0);    \n    vec3 n = d - vec3(\n        sdScene(p-e.xyy),\n        sdScene(p-e.yxy),\n        sdScene(p-e.yyx));    \n    return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;    \n    vec3 ro = vec3(0, 2, -5);\n    ro.x = sin(iTime);\n    ro.z = cos(iTime)-5.;\n    vec3 rd = normalize(vec3(uv.x, uv.y-0.2, 1));\n        \n    float d = rayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    vec3 n = getNormal(p);\n    \n    vec3 col = n;\n    if(d > MAX_DIST){\n        col = texture(iChannel0, rd).xyz;\n    }else{\n        vec3 ref_dir = reflect(rd, n);\n        col = texture(iChannel0, ref_dir).xyz;\n    }\n    \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}