{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define NUM_COEF 128\n#define TAU 6.283185307179586476925286766559\n\nfloat Sinc(float filterCoeffs, int i)\n{\n    float ret = 0.0;\n\tif ((i-(NUM_COEF/2)) == 0)\n\t{\n\t\tret = (TAU * filterCoeffs);\n\t}else\n\t{\n\t\tret = sin(TAU * filterCoeffs * float(i-(NUM_COEF/2))) / float(i-(NUM_COEF/2));\n\t}\n    \n   \t// Hann window...\n    ret *= 0.5 * (1.0 - cos(TAU*float(i)/float(NUM_COEF)));\n    \n    // Blackman window\n\t//ret *= 0.54 - 0.46 * cos(TAU * float(i) / float(NUM_COEF));\n    \n    ret /= (TAU * filterCoeffs)*1.3;\n    return ret;\n}\n\nfloat Line(vec2 a, vec2 b, vec2 p)\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp(dot(pa,ba) / dot(ba,ba), 0.0, 1.0 );\n    h = length( pa - ba*h );\n    return pow(smoothstep(-0.03, .03, h) * smoothstep(0.03, -.03, h), .2)*1.3;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y -=.2;\n    float time = iTime;\n    \n    int i = int(uv.x * (float(NUM_COEF)-.1));\n    float cutoff = 31.0 + cos(time*.7) * 30.0;\n    cutoff = cutoff * cutoff;\n    \n//    if (iMouse.z > 0.0)\n//    {\n//        cutoff = iMouse.x / iResolution.x * 1000.0;\n//    }\n\n    vec2 p1 = vec2(float(i)   / float(NUM_COEF), Sinc(2.0 * cutoff / iSampleRate, i));\n    vec2 p2 = vec2(float(i+1) / float(NUM_COEF), Sinc(2.0 * cutoff / iSampleRate, i+1));\n    \n    vec3 col = vec3(Line(p1, p2, uv));\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"XsfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define NUM_COEF 128\n#define TAU 6.283185307179586476925286766559\n\nfloat Sinc(float filterCoeffs, int i)\n{\n    float ret = 0.0;\n\tif ((i-(NUM_COEF/2)) == 0)\n\t{\n\t\tret = (TAU * filterCoeffs);\n\t}else\n\t{\n       \tret = sin(TAU * filterCoeffs * float(i-(NUM_COEF/2))) / float(i-(NUM_COEF/2));\n        //ret -= cos(.5*TAU * filterCoeffs * float(i-(NUM_COEF/2))) / float(i-(NUM_COEF/2));\n\t}\n    //ret = -ret;\n\t//if (i == NUM_COEF/2) ret += 1.0;\n\n    // Hann window...\n    ret *= 0.5 * (1.0 - cos(TAU*float(i)/float(NUM_COEF)));\n\n\t// Blackman window\n\t//ret *= 0.54 - 0.46 * cos(TAU * float(i) / float(NUM_COEF));\n        \n    \n    return ret;\n}\n\nfloat Noise( float n )\n{\n    return texture(iChannel0, vec2(n*13.67331, n* 31.123230), -100.0).x-.5;\n}\nfloat Saw( float x)\n{\n    return fract( x ) * 1.0 - .5;\n}\nvec2 mainSound( in int samp,float time)\n{\n    float sam = 1.0 / iSampleRate;\n    \n    float cutoff = 31.0 + cos(time*.7) * 30.0;\n    cutoff = cutoff * cutoff;\n    \n    float s = 0.0;\n    float t = 0.0;\n    float frequency = 2.0*cutoff / iSampleRate;\n\tfor (int i = 0; i < NUM_COEF; i++)\n\t{\n\t    float num = float(i) * sam;\n\t       \n\t    float filt = Sinc(frequency, i);\n\t        \n\t    float w = Saw(110.0 * (time-num)) + Noise(time-num);\n\t    \n        s += w * filt;\n\t    t += filt;\n\t}\n    s /= t;// 3.14159265359;\n    return vec2(s) * smoothstep(0.0, 1.0, time) * smoothstep(60.0, 55.0, time);\n}","name":"Sound","description":"","type":"sound"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":true,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsXXW2","date":"1406839974","viewed":681,"name":"FIR Sinc Filter","username":"Dave_Hoskins","description":"Audio.   Linear phase sinc filter.","likes":17,"published":1,"flags":8,"usePreview":0,"tags":["sound","sincfilter"],"hasliked":0,"parentid":"","parentname":""}}