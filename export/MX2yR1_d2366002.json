{"ver":"0.1","info":{"id":"MX2yR1","date":"1726993384","viewed":34,"name":"Infinite Hexagonal Prism Space","username":"jcponcemath","description":"A happy accident while trying to follow Kishimisu's tutorial about Ray Mariching: https://www.youtube.com/watch?v=khblXafu7iA&ab_channel=kishimisu","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","space","hexagonal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2D rotation function\nmat2 rot2D(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// https://iquilezles.org/articles/distfunctions/\n// Hexagonal prism\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n  const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n  p = abs(p);\n  p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n  vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n// Scene distance\nfloat map(vec3 p) {\n    p.z += iTime * 0.3; // Animate\n  \n    vec3 q = p;\n  \n    q = fract(p) - 0.5;\n    \n    // distance to an object\n    return sdHexPrism(q, vec2(.15,.075)); \n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n\n//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(2.0, 1.0, 0.0);\n    vec3 d = vec3(0.50, 0.20, 0.25);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( fragCoord - 0.5 * iResolution.xy ) / iResolution.y;\n\n    vec2 m = (iMouse.xy * 2.0 - iResolution.xy) / iResolution.y;\n  \n\t// render\n    vec3 tot = vec3(0.0);\n  \n    vec3 ro = vec3(0.0, 0.0, -3.0); // ray origin\n    vec3 rd = normalize(vec3(uv, 1.0)); // ray direction\n    \n    float t = 0.0; // total distance travelled\n  \n    // Horizontal camera rotation\n    ro.yz *= rot2D(-m.y);\n    rd.yz *= rot2D(-m.y);\n  \n    // Horizontal camera rotation\n    ro.xz *= rot2D(-m.x);\n    rd.xz *= rot2D(-m.x);\n  \n    // Raymarching\n    const float tmax = 10.0;\n    for(int i = 0; i < 256; i++){\n      vec3 p = ro + rd * t; // position aling the ray\n      \n      float d = map(p);\n    \n      t += d;\n      \n      if (d < 0.001 || t > tmax) break; // early stop if close enough\n    }\n  \n        // shading/lighting\t\n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t * rd;\n            vec3 nor = calcNormal(pos);\n            float dif = clamp( dot(nor,vec3(0.57703)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n            // I was playing around with these\n            // and I got a lovely pattern :)\n            col = vec3(0.1,0.3,0.9)*palette(amb) + \n                  vec3(0.1,0.2,0.2)*palette(dif);\n            col += palette(t);\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    \n\n    // Output to screen\n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}