{"ver":"0.1","info":{"id":"l3tSRf","date":"1719371977","viewed":160,"name":"n.e.b.u.l.a.1.","username":"danielfelipe","description":"WebGL","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["nebula"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fragment Shader\n\nvec2 rotate(vec2 uv, float th) {\n    return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n}\n\nfloat neuro_shape(vec2 uv, float t, float p) {\n    vec2 sine_acc = vec2(0.0);\n    vec2 res = vec2(0.0);\n    float scale = 8.0;\n\n    for (int j = 0; j < 15; j++) {\n        uv = rotate(uv, 1.0);\n        sine_acc = rotate(sine_acc, 1.0);\n        vec2 layer = uv * scale + float(j) + sine_acc - t;\n        sine_acc += sin(layer);\n        res += (0.5 + 0.5 * cos(layer)) / scale;\n        scale *= (1.2 - 0.07 * p);\n    }\n    return res.x + res.y;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec2 pointer = uv - iMouse.xy / iResolution.xy;\n    pointer.x *= iResolution.x / iResolution.y;\n    float p = clamp(length(pointer), 0.0, 1.0);\n    p = 0.5 * pow(1.0 - p, 2.0);\n\n    // Time variable for animation\n    float t = 0.01 * iTime;\n    vec3 color = vec3(0.0);\n\n    float noise = neuro_shape(uv, t, p);\n\n    noise = 1.2 * pow(noise, 3.0);\n    noise += pow(noise, 10.0);\n    noise = max(0.0, noise - 0.5);\n    noise *= (1.0 - length(uv - 0.5));\n\n    color = normalize(vec3(0.2, 0.5 + 0.4 * cos(3.0 * p), 0.5 + 0.5 * sin(3.0 * p)));\n\n    color = color * noise;\n\n    fragColor = vec4(color, noise);\n}\n\n","name":"Image","description":"","type":"image"}]}