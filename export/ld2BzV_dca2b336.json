{"ver":"0.1","info":{"id":"ld2BzV","date":"1501315217","viewed":206,"name":"3D Metaball Objects","username":"dhygns","description":"Metaball example\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","sphere","metaball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPDETAIL 0.0125\n\nstruct Cam {\n    vec3 pos;\n    vec3 dir;\n};\n\nvec2 aspectRatio(in vec2 st) {\n    return 2.0 * (st - 0.5) * iResolution.xy / max(iResolution.x, iResolution.y);\n}\n\nfloat sphere(in vec3 pos, float size, in vec3 spc) {\n    vec3 psc = spc - pos;\n    return smoothstep(size, 0.0, length(psc));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 st = aspectRatio(uv);\n    \n    \n    //Camera Control\n    Cam camera;\n    camera.pos = vec3(0.0, 0.0, -2.0);\t//set position\n    camera.dir = vec3((st) * 1.1, 1.0); //set direction in this pixel coord.\n \n    //camera rotating\n    float radian = iTime * 0.3;\n    mat2 rot = mat2(cos( radian), sin( radian), -sin( radian), cos( radian));\n   \tcamera.pos.xz *= rot;\n    camera.dir.xz *= rot;\n    \n    //transform of shpere (x, y, z, scale)\n    vec4 pos1 = vec4(0.10 * sin(radian * 0.5), 0.60 * sin(radian * 1.3), 0.09 * sin(radian * 3.0), 0.35);    \n    vec4 pos2 = vec4(0.15 * sin(radian * 3.1), 0.30 * sin(radian * 0.2), 0.12 * sin(radian * 2.7), 0.40);\n    vec4 pos3 = vec4(0.25 * sin(radian * 2.7), 0.50 * sin(radian * 3.2), 0.10 * sin(radian * 1.1), 0.16);\n    vec4 pos4 = vec4(0.10 * sin(radian * 2.3), 0.20 * sin(radian * 0.1), 0.15 * sin(radian * 2.1), 0.18);\n\n    \n    \n    //raycasting by depth \n    const float near = 1.625;\n    const float far = 2.125;\n    \n    float e = 0.0;\n    for(float stepf = near; stepf < far; stepf+= STEPDETAIL){\n        vec3 spc = camera.pos + camera.dir * stepf;\n        \n        e += sphere(pos1.xyz, pos1.w, spc); // shepre1\n        e += sphere(pos2.xyz, pos2.w, spc); // shepre2\n        e += sphere(pos3.xyz, pos3.w, spc); // shepre3\n        e += sphere(pos4.xyz, pos4.w, spc); // shepre4\n        if(e > 0.2) {\n            e = 0.2 + 0.8 * (1.0 - (stepf - near) / ( far - near ));\n            break;\n        } else {\n            e = 0.0;\n        }\n        \n        \n\n    }\n \n\tfragColor = vec4(e, e, e, 1.0);\n}","name":"Image","description":"","type":"image"}]}