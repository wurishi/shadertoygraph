{"ver":"0.1","info":{"id":"MtlXz4","date":"1435030178","viewed":275,"name":"My First Raymarch","username":"rubixcom","description":"My first try at simple raymarching. Sorry for the performance.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["sphereraymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"vec3 rayVector(in vec3 position, in vec3 target, in vec2 fragCoord)\n{\n    vec3 eye = normalize(target - position);\n    vec3 up = vec3(0., 1., 0.);\n    vec3 right = cross(eye, up);\n    up = cross(eye,right);\n\n    mat3 cameraMatrix = mat3(right.x, up.x, eye.x,\n                \t\t\t right.y, up.y, eye.y,\n                \t\t\t right.z, up.z, eye.z);\n\n    vec2 uv = fragCoord.xy / iResolution.xy - vec2(.5);\n    uv.x = uv.x * iResolution.x/iResolution.y;\n    float focalDistance = 0.5;\n    return normalize(vec3(uv.x,uv.y,focalDistance)) * cameraMatrix;\n}\n\nvec4 shade(in vec3 pos, in vec3 normal, in vec3 cameraLoc, in vec3 lightPos, in vec4 lightColor, in vec4 surface)\n{\n    vec3 light = normalize(lightPos - pos);\n    float dotlight = dot(normal,light);\n\n    vec3 camera = normalize(cameraLoc - pos);\n    vec3 cameraReflected = normalize(reflect(camera,normal));\n    float spec = 0.0;\n    if (dot(cameraReflected,light) < 0.0)\n        spec = min(1.0,pow(dot(cameraReflected,light),2.0));\n    return (surface\n        * vec4(0.2+dotlight) * lightColor\n        + vec4(0.5*spec)) * 10.0/length(lightPos - pos); // Sphere color\n}\n\n    const int maxSteps = 60;\n    const int reflectionSteps = 10;\n\nvec4 reflection(in vec3 ro, in vec3 rd, in vec3 cameraLoc, in vec3 shapeLoc, in vec3 light,  in vec3 light2,  in vec3 light3)\n{\n    vec4 color = vec4(0.0); // Sky color\n\n    float t = 0.0;\n    for(int i = 0; i < reflectionSteps; ++i)\n    {\n        vec3 p = ro + rd * t;\n        \n        vec3 pm = mod(p,6.0) - shapeLoc;\n        \n        float d = length(mod(p,6.0) - shapeLoc) - 1.8; \n        if(d < 0.1)\n        {\n            vec3 normal = normalize(pm);\n            color = (shade(\n                p, normal, cameraLoc, light, \n                vec4(1.0,0.0,0.0,0.0), \n                texture( iChannel0, vec2(atan(pm.x,pm.z),pm.y)))\n                + shade(\n                p, normal, cameraLoc, light2, \n                vec4(0.0,1.0,0.0,0.0), \n                texture( iChannel0, vec2(atan(pm.x,pm.z),pm.y)))\n                + shade(\n                p, normal, cameraLoc, light3, \n                vec4(0.0,0.0,1.0,0.0), \n                texture( iChannel0, vec2(atan(pm.x,pm.z),pm.y)))) * .333;\n                ;\n            break;\n        }\n\n        t += d;\n    }\n    return color;\n}\n\nvec4 march(in vec3 ro, in vec3 rd, in vec3 cameraLoc, in vec3 shapeLoc, in vec3 light,  in vec3 light2,  in vec3 light3)\n{\n    vec4 color = vec4(0.0); // Sky color\n\n    float t = 0.0;\n    for(int i = 0; i < maxSteps; ++i)\n    {\n        vec3 p = ro + rd * t;\n        \n        vec3 pm = mod(p,6.0) - shapeLoc;\n        \n        float d = length(mod(p,6.0) - shapeLoc) - 1.8; \n        if(d < 0.01)\n        {\n            vec3 normal = normalize(pm);\n\n            vec3 cameraReflected = normalize(reflect(rd, normal));\n\n            color = (shade(\n                p, normal, cameraLoc, light, \n                vec4(1.0,0.0,0.0,0.0), \n                texture( iChannel0, vec2(atan(pm.x,pm.z),pm.y)))\n                + shade(\n                p, normal, cameraLoc, light2, \n                vec4(0.0,1.0,0.0,0.0), \n                texture( iChannel0, vec2(atan(pm.x,pm.z),pm.y)))\n                + shade(\n                p, normal, cameraLoc, light3, \n                vec4(0.0,0.0,1.0,0.0), \n                texture( iChannel0, vec2(atan(pm.x,pm.z),pm.y)))) * .333\n            + 0.5*reflection(p + normal*.1, cameraReflected, p, shapeLoc, light, light2, light3);\n                ;\n            break;\n        }\n\n        t += d;\n    }\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 shapeLoc = vec3(3.0,3.0,3.0);\n    vec3 cameraLoc = vec3(3. + 4.0 * sin(iTime), 3.0 + 4.0 * sin(0.4*iTime) , 3.+4.0 * cos(iTime));\n    vec3 cameraTarget = shapeLoc;\n    vec3 light = vec3(3. + 4.0 * sin(iTime*2.), 3.0 + 8.0 * sin(0.4*iTime) , 3.+4.0 * cos(2.*iTime));\n    vec3 light2 = vec3(3. + 4.0 * sin(iTime*3.), 3.0 + 4.0 * sin(0.2*iTime) , 3.+8.0 * cos(3.*iTime));\n    vec3 light3 = vec3(3. + 8.0 * sin(iTime*4.), 3.0 + 4.0 * sin(0.1*iTime) , 3.+4.0 * cos(4.*iTime));\n    \n    vec3 ro = cameraLoc;\n    vec3 rd = rayVector(cameraLoc, cameraTarget, fragCoord);\n\n    \n    fragColor = march(ro, rd, cameraLoc, shapeLoc, light, light2, light3);\n}","name":"","description":"","type":"image"}]}