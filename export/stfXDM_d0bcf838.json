{"ver":"0.1","info":{"id":"stfXDM","date":"1625781453","viewed":174,"name":"3D sphere","username":"dstratonov","description":"my first try to create 3d rendering","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","sphere","spheres","raymarching3drender"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec2 sphereIntersect(vec3 ro, vec3 rd, vec3 ce, float ra){\n    vec3 oc = ro - ce;\n    float b = dot(oc, rd);\n    float c = dot(oc, oc) - ra * ra;\n    float h = b * b - c;\n    if (h < 0.0) return vec2(-1.0);\n    h = sqrt(h);\n    return vec2(-b-h, -b+h);\n}\n\nfloat angleBetween(vec3 lh, vec3 rh){\n    return dot(lh, rh) / (length(lh) * length(rh));\n}\n\nvoid renderSphere(vec3 cameraPosition, vec3 rayDirection, vec3 spherePosition, float sphereRadius, vec3 lightDirection, out vec3 color, vec3 sphereColor){\n    vec2 result = sphereIntersect(cameraPosition, rayDirection, spherePosition, sphereRadius);\n    vec3 spherePoint = cameraPosition + rayDirection * result.x;\n    vec3 sphereNormal = normalize(spherePoint - spherePosition);\n    float diffuse = max(dot(sphereNormal, lightDirection), 0.0);\n    vec3 refr = reflect(rayDirection, sphereNormal);\n    float specular = max(dot(lightDirection, refr), 0.0);\n    specular = pow(specular, 32.0);\n    if (result.x == -1.0) return;\n    float light = diffuse + specular;\n    light = pow(light, 1.0);\n    color = light * sphereColor;\n \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    uv = uv * vec2(aspect, 1.0);\n    \n    vec3 cameraPosition = vec3(aspect / 2.0 + sin(iTime) * 0.2, 0.5, sin(iTime));\n    vec3 rayDirection = normalize(vec3(uv.x - cameraPosition.x  + sin(iTime) * 0.5, uv.y - cameraPosition.y, 1.0));\n    \n    vec3 lightDirection = normalize(vec3(sin(iTime) * -2.0, 0.0, -1.0));\n\n  \n    vec3 spherePosition1 = vec3(-6.0, 0.0, 25.0);\n    float sphereRadius1 = 10.0;\n    \n    vec3 spherePosition2 = vec3(-2.0, 0.0, 5.0);\n    float sphereRadius2 = 1.5;\n    \n    vec3 spherePosition3 = vec3(3.0, 0.0, 10.0);\n    float sphereRadius3 = 3.0;\n    \n    vec3 spherePosition4 = vec3(3.0, 0.0, 3.0);\n    float sphereRadius4 = 0.5;\n    \n    vec3 ans = vec3(0.0);\n    \n    renderSphere(cameraPosition, rayDirection, spherePosition1, sphereRadius1, lightDirection, ans, vec3(0.5, 0.0, 0.5));\n    renderSphere(cameraPosition, rayDirection, spherePosition3, sphereRadius3, lightDirection, ans, vec3(0.2, 0.2, 0.5));\n    renderSphere(cameraPosition, rayDirection, spherePosition2, sphereRadius2, lightDirection, ans, vec3(0.0, 0.5, 0.7));\n    renderSphere(cameraPosition, rayDirection, spherePosition4, sphereRadius4, lightDirection, ans, vec3(0.5, 0.0, 0.0));\n\n    fragColor = vec4(ans,1.0);\n}","name":"Image","description":"","type":"image"}]}