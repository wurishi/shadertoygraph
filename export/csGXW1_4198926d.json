{"ver":"0.1","info":{"id":"csGXW1","date":"1711619924","viewed":55,"name":"Learning SDFs/RayMarching","username":"w84death","description":"learning","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat opUnion( float d1, float d2 ) { return min(d1,d2); }\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\nfloat map(in vec3 pos){\n    float sphere0 = sdSphere(pos, 0.2);\n    float plane = pos.y + 0.2;\n    float box0 = sdRoundBox(\n        pos+vec3(0.25,sin(iTime)*0.2,cos(iTime)*0.3), \n        vec3(0.1), \n        0.02);\n    float box1 = sdRoundBox(\n        pos+vec3(sin(iTime)*0.25,-0.1,cos(iTime)*0.1), \n        vec3(0.1), \n        0.02);\n        \n    float scene=opSmoothUnion(sphere0, opUnion(box0,box1), 0.1);\n       \n    return opSmoothUnion(plane,scene,0.1);\n}\n\nvec3 calcNormal( in vec3 pos){\n    vec2 e = vec2(0.0001,0.0);\n    return normalize( \n        vec3(map(pos+e.xyy)-map(pos-e.xyy),\n             map(pos+e.yxy)-map(pos-e.yxy),\n             map(pos+e.yyx)-map(pos-e.yyx)));\n}\n\nfloat castRay(in vec3 ro, vec3 rd){\n   float t = 0.0;    \n    for (int i=0; i<100; i++){\n        vec3 pos = ro + t*rd;\n        float dis = map(pos);\n        if (dis<0.001) break;\n        t+=dis;\n        if (t>20.0) break;\n    }\n    if (t>20.0) t = -1.0;\n    return t;\n}\n\nvec2 getUV(in vec2 fragCoord, vec2 offset){\n\treturn ((2.0*fragCoord+offset)-iResolution.xy)/iResolution.y;\n}\n\nvec3 render(in vec2 p){\n   float an = 0.5*iTime;\n    vec3 ro = vec3(1.0*sin(an),0.0,1.0*cos(an));\n    vec3 ta = vec3(0.0,0.0,0.0);\n    \n    vec3 ww = normalize (ta-ro);\n    vec3 uu = normalize( cross(ww, vec3(0,1,0)));\n    vec3 vv = normalize (cross(uu,ww));\n    \n    vec3 rd = normalize(p.x*uu+p.y*vv+1.5*ww);\n\n    vec3 col = vec3(0.4,0.75,1.0) - 0.5*rd.y;\n    col =  mix(col, vec3(0.7,0.8,0.8), exp(-10.0*rd.y));\n    \n    vec3 mate = vec3(0.2);\n    float t = castRay(ro,rd);\n\n    if (t>0.0){\n        vec3 pos = ro+t*rd;\n        vec3 nor = calcNormal(pos);\n        vec3 sun_dir = normalize(vec3(0.6,0.8,-0.2));\n        float sun_shadow = step(castRay( pos+nor*0.001, sun_dir), 0.0);\n        float sun_dif = clamp(dot(nor,sun_dir),0.0,1.0);\n        float sky_dif = clamp(0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0)),0.0,1.0);\n        float bou_dif = clamp(0.5 + 0.5*dot(nor,vec3(0.0,-1.0,0.0)),0.0,1.0);\n        \n        col  = mate*vec3(2.5,2.0,0.0);\n        col += mate*vec3(5.0,3.0,2.0)*sun_dif*sun_shadow;\n        col += mate*vec3(0.5,0.8,0.9)*sky_dif;\n        col += mate*vec3(0.7,0.3,0.2)*bou_dif;\n        \n    }\n\treturn col;\n}\n\nvec3 renderAAAA(in vec2 fragCoord){\n\tvec4 e =vec4(0.125,-0.125,0.375,-0.375);\n    vec3 colAA = render(getUV(fragCoord,e.xz))+\n    render(getUV(fragCoord,e.yw))+\n    render(getUV(fragCoord,e.wx))+\n    render(getUV(fragCoord,e.zy));\n    \n    return colAA/=4.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = renderAAAA(fragCoord);\n\n    col = pow (col, vec3(0.4545));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}