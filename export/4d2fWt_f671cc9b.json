{"ver":"0.1","info":{"id":"4d2fWt","date":"1502800623","viewed":273,"name":"Fermat spiral","username":"MichelPaulissen","description":" Fermat spiral. Optimized by first finding the appropriate range to search for a point.\n\nAKA Vogel spiral, parabolic spiral","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["spiral","vogel","parabolic","fermat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fermat (vogel, parabolic) spiral. Optimized by first finding the appropriate range to search for a point.\n\n#define sqr(a) ((a)*(a))\n\n#define PI 3.14159265358979323846\n// This angle combined with the square root of the point index makes it a Vogel spiral. \n#define GOLDEN_ANGLE 2.39996322972865332\n\n\n//#define COLOR(INDEX) ((INDEX % 3 == 0) ? vec3(1,0,0) : (INDEX % 3 == 1) ? vec3(0,0,1) : vec3(0,1,0))\n#define COLOR(INDEX) vec3(1)\n\n//#define MOVEMENT(value) (-iTime * 1.0 / sqrt(value))\n#define MOVEMENT(value) 0.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - iResolution.xy / 2.0) / min(iResolution.x, iResolution.y);\n\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    \n    float ZOOM = 10.0 * (8.0 + 2.0 * sin(iTime));\n    uv *= ZOOM;\n    \n    float rotspeed = 0.1;\n    mat2 rot = mat2(cos(rotspeed * iTime), sin(rotspeed * iTime),\n                    -sin(rotspeed * iTime), cos(rotspeed * iTime));\n    uv = rot * uv;\n    \n    float d = length(uv);\n    \n    // Increasing this shows very nicely how the density of points is uniform in a Vogel spiral (except in the middle). \n    //float pointScale = 1.0;\n    float pointScale = 0.5 + (iMouse.x / iResolution.x) * 10.0;\n    \n    float dMin = d - pointScale;\n    float dMax = d + pointScale;\n    \n    vec3 color = vec3(0.0);\n    \n    // 1 minimum because Vogel spiral is 1-indexed\n    #define FIRST_INDEX 1\n    \n    int start = max(FIRST_INDEX,int(sqr(max(0.0,floor(dMin))))); \n    int end = int(sqr(ceil(dMax)));\n    \n    for( int z = start; z <= end; z++) {\n        float fz = float(z);\n    \tfloat a = (fz) * GOLDEN_ANGLE + MOVEMENT(fz);\n        vec2 pos = vec2(cos(a) * sqrt(fz), sin(a) * sqrt(fz));\n        \n        float distance = length(pos - uv);\n        //if (distance < 1.0) \n        {\n            float gauss = exp(-distance*distance*PI/pointScale)/max(1.0,pointScale);\n            color += gauss * COLOR(z);\n        }\n    }\n    \n    //fragColor.xyz = vec3(fract(dMin), fract(dMax), color.z);\n    fragColor.xyz = vec3(color);\n}\n","name":"Image","description":"","type":"image"}]}