{"ver":"0.1","info":{"id":"7dtBDX","date":"1657376644","viewed":87,"name":"*kough, kough*","username":"rucksack","description":"Based on https://www.youtube.com/watch?v=il_Qg9AqQkE","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","kifs","koch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define MOUSE_CONTROL\n\nconst float PI = 3.14159265359;\n\nconst float time_offset = 2.3;\n\n// Point on unit circle (direction of bend line)\nvec2 unit(float angle) {\n    return vec2(sin(angle), cos(angle));\n}\n\nvec2 fold(in vec2 uv, in int iterations, out float scale) {\n    uv *= 4.;\n\n    // Center\n    float shape_angle = 11./6.*PI;\n    uv.y += tan(shape_angle)*1.5;\n    \n    // Mirror along two mirrored lines to create a triangle base\n    uv.x = abs(uv.x);\n    vec2 m = unit(shape_angle);\n    uv -= m*min(0., dot(uv-vec2(1.5, 0), m))*2.;\n    \n#ifdef MOUSE_CONTROL\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    vec2 n = unit(mouse.x*PI);\n#else\n    float details_angle = sin(iTime*.5 + .3 + .5*time_offset) * 2./3.*PI;\n    vec2 n = unit(details_angle);\n#endif\n    \n    scale = 1.;\n    \n    for (int i = 0; i < iterations; i++) {\n        // Fold over the middle\n        uv.x = abs(uv.x);\n        // Widen the line to 3 units (carving out special 1 unit part in middle)\n        uv.x -= .5;\n        // Bend this part that we just carved out (TODO how does this work)\n        // -> Rotate uv, but leave negative side not reflected\n        uv -= n*min(0., dot(uv, n))*2.;\n\n        if (i < iterations - 1) {\n            // Invert transformations of uv coords to perform another iteration\n            // Make room\n            uv *= 3.;\n            scale *= 3.;\n            // Reset origin\n            uv.x -= 1.5;\n        }\n    }\n    return uv;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0);\n\n    float scale;\n    uv = fold(uv, 4, scale);\n    \n    // Draw something in this folded space\n    //float d = length(uv - vec2(clamp(uv.x, -1., 1.), 0)) / scale;\n    //float d = length(uv - .9) / scale;\n    //float d = (sin(uv.x) + length(uv - 10.)) / scale;\n    float d = sin(uv.x*abs(smoothstep(-1.5, 1., cos(iTime*3. + time_offset)))) / scale;\n    \n    // Display rendered thing with a uv tint\n    col += smoothstep(20./iResolution.y, .0, d);\n    col.rg += uv / 81. / 3.;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}