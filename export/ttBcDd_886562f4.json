{"ver":"0.1","info":{"id":"ttBcDd","date":"1595805933","viewed":124,"name":"Interactive Mandelbrot Explorer","username":"ddrcoder","description":"Controls\n - click/drag to pan.\n - up/down arrow to increase/decrease antialiasing samples (1->4->9->...)\n - left/right to adjust iteration limit, scaling color scale proportionately.\n - hold [O] to smoothly zoom out, [I] to smoothly zoom in. Hold shift to","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Original Mandelbrot renderer by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Forked by Tom Jackson - ddrcoder, shared alike.\n\n/*\nControls\n - click/drag to pan.\n - up/down arrow to increase/decrease antialiasing samples (1->4->9->...)\n - left/right to adjust iteration limit, scaling color scale proportionately.\n - hold [O] to smoothly zoom out, [I] to smoothly zoom in. Hold shift to run.\n - click and drag:\n   - no key held: pan\n   - hold [Z] and click/drag to zoom.\n   - hold [S]: change seed position.\n   - hold [T]: adjust \"twist\" parameter\n*/\n\n#define AA 3\n#define P 1\n#define MAX 200\nvec2 center = vec2(-0.5, 0.0);\nvec2 transform(float time, vec2 p) {\n    float scale = 1. / 1.;\n    return p * scale;\n}\n\nvec2 lerp(vec2 a, vec2 b, float t) {\n    return a + (b - a) * t;\n}\nvec2 square(vec2 z) {\n    float p = z.x * z.y;\n\treturn vec2(z.x * z.x - z.y * z.y, p + p);\n}\nvec2 recip(vec2 z) {\n    float m2 = dot(z, z);\n\treturn vec2(z.x, -z.y) / m2;\n}\nvec2 recip2(vec2 z) {\n    float m2 = dot(z, z);\n\treturn vec2(z.x, z.y) / m2;\n}\n\nvec2 mandelStep(vec2 z, vec2 c, float coeff) {\n    for (int i = 0; i < P; ++i) {\n        #if 1\n\t    z = vec2(z.x * z.x - z.y * z.y, (2. + coeff) * (z.x * z.y));\n        #else\n        float m = (z.x * z.x + z.y * z.y);\n\t    z = square(z);\n        float t = coeff;\n        \n        z = lerp(z, recip2(z), t);//0.02 * z * m2;\n        #endif\n        \n    }\n    return z + c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    if (1==12) {\n        fragColor.xyz = vec3(1,1,1) * texelFetch(iChannel0,\n                                              ivec2(int(fragCoord.x * 0.01), 0), 0)\n                                              [3 - int(fragCoord.y * 4. / iResolution.y)];\n        return;\n    }\n    \n    State state = getState(iChannel0, iTime);\n    vec2 center = state.current.center;\n    vec2 seed = state.current.seed;\n    float zoom = state.current.zoom;\n    float coeff = state.current.coeff;\n    float julia = state.current.julia;\n    mat2 transform = mat2(state.current.transform);\n    int maxIter = int(float(state.maxIter) * log(zoom + 1.));\n    int aa = state.changing == 0 ? state.aa : 1;\n    vec3 col = vec3(0.0);\n    for( int m=0; m<aa; m++ )\n    for( int n=0; n<aa; n++ )\n    {\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord.xy+vec2(float(m),float(n))/float(aa)))/iResolution.y;\n        \n        float w = float(aa*m+n);\n        float time = iTime;// + 0.5*(1.0/24.0)*w/float(AA*AA);\n        if (state.changing == CHANGE_CENTER_ZOOM && distance(distance(p, state.clickAt), 0.1) < 0.01) { col += vec3(1,0,0); continue; }\n        p *= transform;\n        vec2 c = center + p * 1.0 / zoom;\n        float l = 0.0;\n        int i = 0;\n        vec2 add = lerp(c, seed, julia);\n        vec2 start = lerp(seed, c, julia);\n\t    vec2 z = start;\n        for( ; i<maxIter; i+=4 )\n        {\n            // z = z*z + c\t\t\n\t\t    z = mandelStep(z, add, coeff);\n\t\t    z = mandelStep(z, add, coeff);\n\t\t    z = mandelStep(z, add, coeff);\n\t\t    z = mandelStep(z, add, coeff);\n            if (dot(z, z) > 7e1) {\n                break;\n            }\n        }\n\n    \t// ------------------------------------------------------\n        // smooth interation count\n    \t// float sco = co - log2(log(length(z))/log(256.0));\n\t\n        // equivalent optimized smooth interation count\n    \tfloat f = i < maxIter ? (float(i) - log2(log2(dot(z,z)))/ float(P) + 4.0) / float(maxIter) : 1.;\n        \n        col += clamp(vec3(0,0,0),f * 3. - vec3(2,1,0), vec3(1,1,1));\n    }\n    col /= float(aa*aa);\n\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// State Updates\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nbool keyDown(int key) {\n    return texelFetch(iChannel1, ivec2(key, 0), 0).x > 0.;\n}\nbool keyPress(int key) {\n    return texelFetch(iChannel1, ivec2(key, 1), 0).x > 0.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    State state = getState(iChannel0, iTime);\n    vec2 mouseAt = (-iResolution.xy + 2.0 * iMouse.xy) / iResolution.y;\n    switch (state.changing) {\n      case CHANGE_CENTER_ZOOM:\n        state.current.zoom = state.start.zoom * exp(3. * (mouseAt.x - state.clickAt.x));\n        state.current.center = state.start.center - state.clickAt * (1. / state.current.zoom - 1. / state.start.zoom);\n        break;\n      case CHANGE_CENTER:\n        state.current.center = state.start.center - (mouseAt - state.clickAt) / state.current.zoom;\n        break;\n      case CHANGE_COEFF:\n        state.current.coeff = state.start.coeff + (mouseAt.x - state.clickAt.x) / state.current.zoom;\n        break;\n      case CHANGE_ZOOM:\n        state.current.zoom = state.start.zoom * exp(3. * (mouseAt.x - state.clickAt.x));\n        break;\n      case CHANGE_SEED:\n        state.current.seed = state.start.seed - (mouseAt - state.clickAt) / state.current.zoom;\n        break;\n      case CHANGE_JULIA:\n        state.current.julia = state.start.julia - (mouseAt.x - state.clickAt.x) / state.current.zoom;\n        break;\n      case CHANGE_TRANSFORM1:\n        state.current.transform.xy = state.start.transform.xy - (mouseAt.x - state.clickAt.x);\n        break;\n      case CHANGE_TRANSFORM2:\n        state.current.transform.zw = state.start.transform.zw - (mouseAt.x - state.clickAt.x);\n        break;\n      default:\n        state.start = state.current;\n        break;\n    }\n    bool dragging = iMouse.z > 0.5;\n    if (dragging) {\n        if (state.changing == 0) {\n            state.clickAt = mouseAt;\n            if (keyDown(90 /* Z */)) {\n                state.changing = CHANGE_CENTER_ZOOM;\n            } else if (keyDown(84 /* T */)) {\n                state.changing = CHANGE_COEFF;\n            } else if (keyDown(83 /* S */)) {\n                state.changing = CHANGE_SEED;\n            } else if (keyDown(65 /* A */)) {\n                state.changing = CHANGE_JULIA;\n            } else if (keyDown(70 /* F */)) {\n                state.changing = CHANGE_TRANSFORM1;\n            } else if (keyDown(71 /* G */)) {\n                state.changing = CHANGE_TRANSFORM2;\n            } else {\n                state.changing = CHANGE_CENTER;\n            }\n        }\n    } else {\n        state.changing = 0;\n    }\n    float dt = iTimeDelta;\n    float f = 0.01 * pow(2.,-dt);\n    if (keyDown(16 /* SHIFT */)) {\n        f *= 8.;\n    }\n\n    if (keyDown(KEY_LEFT)) {\n        state.maxIter *= 0.99;\n    } else if (keyDown(KEY_RIGHT)) {\n        state.maxIter *= 1.01;\n    } else if (keyDown(82 /* R */)) {\n        state.current.center -= (state.current.center - vec2(-0.5, 0.000001)) * f / state.current.zoom;\n        state.current.zoom -= (state.current.zoom - 1.) * f;\n        state.current.coeff *= f;\n        state.current.seed *= f;\n        state.current.transform += (vec4(mat2(1,0,0,1)) - state.current.transform) * f;\n        state.maxIter = 96.;\n        state.aa = 2;\n    } else if (keyDown(79 /* O */)) { // Smoothly zoom out\n        state.current.zoom -= (state.current.zoom - 1.) * f;\n        state.maxIter -= (state.maxIter - 96.) * f / state.current.zoom; \n    } else if (keyDown(73 /* I */)) { // Smoothly zoom in\n        state.maxIter += (state.maxIter - 96.) * f / state.current.zoom;\n        state.current.zoom += (state.current.zoom - 1.) * f;\n    }\n    if (keyPress(KEY_UP)) {\n        ++state.aa;\n    } else if (keyPress(KEY_DOWN) && state.aa > 1) {\n        --state.aa;\n    }\n    store(state, fragColor, fragCoord);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const int CHANGE_CENTER_ZOOM = 1;\nconst int CHANGE_CENTER = 2;\nconst int CHANGE_COEFF = 3;\nconst int CHANGE_ZOOM = 4;\nconst int CHANGE_SEED = 5;\nconst int CHANGE_JULIA = 6;\nconst int CHANGE_TRANSFORM1 = 7;\nconst int CHANGE_TRANSFORM2 = 8;\nconst int RESET = 9;\n\nstruct Position {\n    vec2 center;\n    vec2 seed;\n    float zoom;\n    float coeff;\n    float julia;\n    vec4 transform;\n};\n\nstruct State {\n    Position current;\n    Position start;\n    vec2 clickAt;\n    int changing;\n    float maxIter; // TODO make this float now that it scales with zoom\n    int aa;\n};\nPosition vecToPos(vec4 v0, vec4 v1, vec4 v2) {\n    Position pos;\n    pos.center = v0.xy;\n    pos.zoom = v0.z;\n    pos.coeff = v0.w;\n    pos.seed = v1.xy;\n    pos.julia = v1.w;\n    pos.transform = v2;\n    return pos;\n}\n\nvec4 posToVec0(Position pos) {\n    return vec4(pos.center.xy, pos.zoom, pos.coeff);\n}\n\nvec4 posToVec1(Position pos) {\n    return vec4(pos.seed.xy, 0, pos.julia);\n}\n\nvec4 posToVec2(Position pos) {\n    return vec4(pos.transform);\n}\n\nState getState(sampler2D data, float t) {\n    State state;\n    vec4 v[8] = vec4[](\n        texelFetch(data, ivec2(0, 0), 0),\n        texelFetch(data, ivec2(1, 0), 0),\n        texelFetch(data, ivec2(2, 0), 0),\n        texelFetch(data, ivec2(3, 0), 0),\n        texelFetch(data, ivec2(4, 0), 0),\n        texelFetch(data, ivec2(5, 0), 0),\n        texelFetch(data, ivec2(6, 0), 0),\n        texelFetch(data, ivec2(7, 0), 0)\n    );\n    state.current = vecToPos(v[2], v[3], v[4]);\n    state.start = vecToPos(v[5], v[6], v[7]);\n    state.changing = int(v[1].x);\n    \n    //state.current.zoom = clamp(0.01, v[1].z, 1e5);\n    \n    state.clickAt = v[0].xy;\n    if (v[1].w == 0.) {\n        state.current.center = vec2(-0.5, 0.000001);\n        state.current.zoom = 1. + t;\n        state.current.coeff = 0.;\n        state.current.seed = vec2(0.01, 0.01);\n        state.current.transform = vec4(mat2(1, 0, 0, 1));\n        state.maxIter = 96.;\n        state.aa = 2;\n    } else { \n        state.maxIter = clamp(2., v[0].z, 4096.);\n        state.aa = clamp(1, int(v[0].w), 7);\n    }\n    return state;\n}\n\nvoid store(State state, out vec4 fragColor, in vec2 fragCoord) {\n    if (fragCoord.x > 8. || fragCoord.y > 1.) {\n       discard;\n       return;\n    }\n    switch (int(fragCoord.x)) {\n        case 0:\n        fragColor.xyzw = vec4(state.clickAt, state.maxIter, float(state.aa));\n        break;\n        \n        case 1:\n        fragColor.x = float(state.changing);\n        fragColor.w = 1.0;\n        break;\n        \n        case 2:\n        fragColor.xyzw = posToVec0(state.current);\n        break;\n        case 3:\n        fragColor.xyzw = posToVec1(state.current);\n        break;\n        case 4:\n        fragColor.xyzw = posToVec2(state.current);\n        break;\n        \n        case 5:\n        fragColor.xyzw = posToVec0(state.start);\n        break;\n        case 6:\n        fragColor.xyzw = posToVec1(state.start);\n        break;\n        case 7:\n        fragColor.xyzw = posToVec2(state.start);\n        break;\n    }\n}\n","name":"Common","description":"","type":"common"}]}