{"ver":"0.1","info":{"id":"7t3cRS","date":"1661804329","viewed":55,"name":"yellcorp-jwtflare","username":"yellcorp","description":"I'm not very good at this","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["wip"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.141592653589793;\n\nmat2 rot2d(float angle) {\n    vec2 bx = vec2(cos(angle), sin(angle));\n    vec2 by = vec2(-sin(angle), cos(angle));\n    return mat2(bx, by);\n}\n\nfloat to_gamma(float n) {\n    return pow(n, 1.0 / 2.2);\n}\n\nfloat to_linear(float n) {\n    return pow(n, 2.2);\n}\n\nvec2 to_polar(vec2 xy) {\n    return vec2(length(xy), atan(xy.y, xy.x));\n}\n\nfloat screen1(float a, float b) {\n    return 1.0 - ((1.0 - a) * (1.0 - b));\n}\n\nconst float RAY_SQUISH = 16.0;\nconst float RAY_MOD_FREQ = 192.0;\nconst float RAY_MOD_AMP = 0.25;\nfloat star_ray(vec2 uv, mat2 tf) {\n    vec2 uvt = tf * uv;\n    vec2 uv_streak = uvt * vec2(RAY_SQUISH, 1.0);\n    \n    float d = 1.0 - length(uv_streak) + cos(uvt.x * RAY_MOD_FREQ) * RAY_MOD_AMP;\n    \n    return to_linear(max(0.0, d));\n}\n\nconst float FLARE_SIZE_DIV = 3.0;\nconst float FLARE_A_FREQ = 16.0;\nconst float FLARE_A_AMP = 1.0 / 48.0;\nfloat star_flare(vec2 uv) {\n    vec2 p = to_polar(uv);\n    float d = 1.0 - p.x * FLARE_SIZE_DIV - sin(p.y * FLARE_A_FREQ) * FLARE_A_AMP;\n    d = clamp(d, 0.0, 1.0);\n    return to_linear(d);\n}\n\n// const float TEXTURE_FREQ = 192.0;\n// float texture_artifact(vec2 uv) {\n//    vec2 uvt = uv * TEXTURE_FREQ;\n//    return cos(uvt.x) * cos(uvt.y);\n// }\n\nfloat star(vec2 uv) {\n    //float tex = texture_artifact(uv);\n\n    float ray0 = star_ray(uv, rot2d(0.0));\n    float ray1 = star_ray(uv, rot2d(PI / 3.0));\n    float ray2 = star_ray(uv, rot2d(PI / -3.0));\n    \n    float rays = dot(\n        vec3(ray0, ray1, ray2),\n        vec3(0.34, 0.33, 0.33)\n    );\n    \n    float flare = star_flare(uv);\n    return screen1(rays, flare);\n}\n\nconst vec2 KERNEL_STEP = vec2(1.0, 1.0) / 256.0;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Coordinates [-1, 1]\n    vec2 uv = (fragCoord/iResolution.xy) * 2.0 - 1.0;\n\n    float star_ = 0.0;\n    for (int ky = -2; ky <= 2; ky++) {\n        for (int kx = -2; kx <= 2; kx++) {\n            star_ += star(uv + vec2(kx, ky) * KERNEL_STEP) / 25.0;\n        }\n    }\n\n    // float star_ = (star(uv));\n    vec3 star_rgb = vec3(star_);\n\n    // Output to screen\n    fragColor = vec4(star_rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}