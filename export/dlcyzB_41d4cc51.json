{"ver":"0.1","info":{"id":"dlcyzB","date":"1699360239","viewed":42,"name":"2d cloud by fbm","username":"tomcat7479","description":"2d cloud","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fbm","valuenoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//This function adds turbulence to the clouds\n// from https://www.shadertoy.com/view/DldyRj, thanks\nvec2 fluid(vec2 uv){\n float t1 = iTime/2.;\n for (float i = 1.; i < 15.; i++)\n  {\n    float i1 = i/4.;\n    uv.x += (sin(uv.y*i1)/i1)/4.;\n    uv.y += (cos(uv.x*i1)/i1+t1/i1/i1)/4.;\n    \n  }\n  return uv;\n}\n\nvec2 fix(in vec2 coord, float multi) {\n    return multi * (2.0 * coord.xy - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\nfloat hash1(vec2 p) {\n    return fract(sin(dot(p.xy, vec2(12.9898,78.233))) * 43758.5453123);  \n}\n\nfloat hash2(vec2 p) {\n    vec2 q = 55.1876653 * fract(p * 10.1321513);\n    return fract((q.x + q.y) * q.x * q.y);\n}\n\nfloat hermite(float x) {\n    return x * x * (3.0 - 2.0 * x);\n}\n\nfloat fade(float x) {\n    return x * x * x * (x * (6.0 * x - 15.0) + 10.0);\n}\n \nvec3 value_noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = vec2(hermite(f.x), hermite(f.y));\n    vec2 du = 6.0 * u * (1.0 - u);\n    vec2 offset = vec2(1.0, 0.0);\n\n    float grad1 = hash2(i);\n    float grad2 = hash2(i + offset.xy);\n    float grad3 = hash2(i + offset.yx);\n    float grad4 = hash2(i + offset.xx);\n\n    float k1 = grad1;\n    float k2 = grad2 - grad1;\n    float k3 = grad3 - grad1;\n    float k4 = grad1 - grad2 - grad3 + grad4;\n\n    float noiseValue = k1 + u.x * k2 + u.y * k3 + u.x * u.y * k4;\n    vec2 noiseGrad = du * (u.yx * k4 + vec2(k2, k3));\n\n    return vec3(noiseValue, noiseGrad);\n}\n\nmat2 rotateM = mat2(0.6, -0.8, 0.8, 0.6);\n\nfloat fbm(vec2 p) {\n    float res = 0.0;\n    float scale = 0.5;\n    for (int i = 0; i < 4; i++) {\n        res += scale * value_noise(p).x;\n        p = rotateM * p * 2.0;\n        scale *= 0.5;\n    }\n    return res;\n}\n \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fix(fragCoord, 1.0);\n    // uv.y += iTime * 0.5;\n    uv = fluid(5.0 * uv);\n    vec3 col = vec3(0.0);\n    vec3 baseSkyCol = vec3(0.3, 0.5, 0.85);\n    vec3 cloudCol = vec3(1.0, 0.95, 1.0);\n    col = baseSkyCol;\n    float fbm = fbm(uv);\n    fbm = smoothstep(0.4, 0.8, fbm);\n    col = mix(col, cloudCol, fbm);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}