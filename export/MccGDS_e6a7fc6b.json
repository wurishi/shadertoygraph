{"ver":"0.1","info":{"id":"MccGDS","date":"1712073786","viewed":81,"name":"NYAN CAT Music","username":"jarvarvarvis","description":"Nya\n\nNote that Shadertoy doesn't allow music to loop indefinitely, so the song will cut off after 180 seconds.","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["music","nyancat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float wave(float t, vec2 uv, float frequency, float speed, float wave_width) {\n    const float AMPLITUDE = .02;\n    \n    float offset = sin(uv.x * frequency + iTime * speed) * AMPLITUDE;\n    \n    return 1. - step(wave_width, abs(uv.y + offset - .5));\n}\n\n#define TRANS_FLAG\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 res = iResolution.xy;\n    vec2 uv = fragCoord/res; // Normalized pixel coordinates (from 0 to 1)\n    \n    // Color\n    vec3 color = vec3(0.);\n    \n    // Nyan cat animation\n    // Source: https://www.shadertoy.com/view/WlGSWy\n    const int frameCount = 6;\n    const vec2 fSize = vec2(40, 32);\n    \n    vec2 imSize = iChannelResolution[0].xy;\n    float scale = floor(res.y/72.);\n    \n    float frame = mod(floor(iTime*float(frameCount)), float(frameCount));\n    vec2 center = res/2. + vec2(0, scale*sin(TWO_PI*iTime));\n    vec2 coord = clamp((fragCoord - center) / scale + fSize/2., vec2(0), fSize);\n    vec4 nyan = texture(iChannel0, (coord + vec2(frame,0)*fSize)/imSize);\n    \n    vec3 background = vec3(0.);\n    \n    // Define colors\n    const vec3 colors[] = vec3[](\n    #ifdef TRANS_FLAG\n        vec3(0., 1., 1.),\n        vec3(1., .5, 1.),\n        vec3(1., 1., 1.),\n        vec3(1., .5, 1.),\n        vec3(0., 1., 1.)\n    #else\n        vec3(1., 0., 0.),\n        vec3(1., .6, 0.),\n        vec3(1., 1., 0.),\n        vec3(0., 1., 0.),\n        vec3(0., .5, 1.),\n        vec3(.6, 0., 1.)\n    #endif\n    );\n    \n    // Define additional parameters\n    #ifdef TRANS_FLAG\n        const int COLOR_COUNT = 5;\n        vec2 y_off = vec2(0.0, 0.02);\n        float wave_width = 0.0125;\n    #else\n        const int COLOR_COUNT = 6;\n        vec2 y_off = vec2(0.0, -0.01);\n        float wave_width = 0.0125;\n    #endif\n        \n    // Rainbow trail\n    if (uv.x < 0.5) {\n        vec3 trail = vec3(0.);\n        \n        vec2 offset = vec2(0., 0.025);\n    \n        // Trail colors\n        for (int i = 0; i < COLOR_COUNT; ++i) {\n            trail += colors[i] * wave(iTime, uv + offset * float(i - 3) + y_off, 15., 7., wave_width);\n        }\n        \n        // Add trail onto background\n        background += trail;\n    }\n    \n    // Calculate final color\n    color += mix(background, nyan.rgb, nyan.a);\n    \n    // Output to screen\n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound(int samp, float t) {\n    vec2 sig = vec2(0);\n   \n    sig += song(t);\n   \n    return sig;\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"// Frequencies and timings having been generated from a midi file using a custom python script (with the pysmf library)\n//\n// The note -> frequency conversion table is from this Google Colab Notebook: \n// https://colab.research.google.com/github/stevetjoa/musicinformationretrieval.com/blob/gh-pages/midi_conversion_table.ipynb\n//\n// Midi source: https://onlinesequencer.net/3915008\n// The intro and main loop have been split into two parts to apply different effects\n//\n// One thing I needed to be careful about was to not have two notes play at the same\n// time because of the way I play notes one after the other.\n\n#define TWO_PI 6.2831\n#define INCLUDE_NYA_SOUND\n\n// Intro\nconst int INTRO_NOTES = 26;\nconst float INTRO_NOTE_FREQS[] = float[INTRO_NOTES](\n    626.484, 660.0, 742.5, 990.0, 626.484, 660.0, 742.5, 990.0, 1113.75, 1252.969, 1113.75, 939.727, 990.0, 742.5, 626.484, 660.0, 742.5, 990.0, 1113.75, 939.727, 990.0, 1113.75, 1320.0, 1252.969, 1320.0, 1113.75\n);\nconst float INTRO_NOTE_DURATIONS[] = float[INTRO_NOTES](\n    0.115, 0.115, 0.231, 0.231, 0.115, 0.115, 0.115, 0.115, 0.115, 0.115, 0.115, 0.115, 0.231, 0.231, 0.115, 0.115, 0.231, 0.231, 0.115, 0.115, 0.115, 0.115, 0.115, 0.115, 0.115, 0.231\n);\n\nconst float INTRO_DURATION = 3.692304;\n\n// Main theme\nconst int MAIN_NOTES = 216;\nconst float MAIN_NOTE_FREQS[] = float[MAIN_NOTES](\n    742.5, 835.312, 626.484, 626.484, 0.0, 495.0, 586.667, 556.875, 495.0, 0.0, 495.0, 556.875, 586.667, 586.667, 556.875, 495.0, 556.875, 626.484, 742.5, 835.312, 626.484, 742.5, 556.875, 626.484, 495.0, 556.875, 495.0, 626.484, 742.5, 835.312, 626.484, 742.5, 556.875, 626.484, 495.0, 586.667, 626.484, 586.667, 556.875, 495.0, 556.875, 586.667, 495.0, 556.875, 626.484, 742.5, 556.875, 626.484, 556.875, 495.0, 556.875, 495.0, 556.875, 742.5, 835.312, 626.484, 626.484, 0.0, 495.0, 586.667, 556.875, 495.0, 0.0, 495.0, 556.875, 586.667, 586.667, 556.875, 495.0, 556.875, 626.484, 742.5, 835.312, 626.484, 742.5, 556.875, 626.484, 495.0, 556.875, 495.0, 626.484, 742.5, 835.312, 626.484, 742.5, 556.875, 626.484, 495.0, 586.667, 626.484, 586.667, 556.875, 495.0, 556.875, 586.667, 495.0, 556.875, 626.484, 742.5, 556.875, 626.484, 556.875, 495.0, 556.875, 495.0, 556.875, 495.0, 371.25, 417.656, 495.0, 371.25, 417.656, 495.0, 556.875, 626.484, 495.0, 660.0, 626.484, 660.0, 742.5, 495.0, 495.0, 371.25, 417.656, 495.0, 371.25, 660.0, 626.484, 556.875, 495.0, 371.25, 313.242, 330.0, 371.25, 495.0, 371.25, 417.656, 495.0, 371.25, 417.656, 495.0, 495.0, 556.875, 626.484, 495.0, 371.25, 417.656, 371.25, 495.0, 495.0, 469.863, 495.0, 371.25, 417.656, 495.0, 660.0, 626.484, 660.0, 742.5, 495.0, 469.863, 495.0, 371.25, 417.656, 495.0, 371.25, 417.656, 495.0, 556.875, 626.484, 495.0, 660.0, 626.484, 660.0, 742.5, 495.0, 495.0, 371.25, 417.656, 495.0, 371.25, 660.0, 626.484, 556.875, 495.0, 371.25, 313.242, 330.0, 371.25, 495.0, 371.25, 417.656, 495.0, 371.25, 417.656, 495.0, 495.0, 556.875, 626.484, 495.0, 371.25, 417.656, 371.25, 495.0, 495.0, 469.863, 495.0, 371.25, 417.656, 495.0, 660.0, 626.484, 660.0, 742.5, 495.0, 556.875\n);\nconst float MAIN_NOTE_DURATIONS[] = float[MAIN_NOTES](\nn);\n\nconst float MAIN_DURATION = 29.487432;\n\n// Functions to generate sound\nfloat envelope(float t, float decay, float factor) {\n    return exp(-decay * t) * factor;\n}\n\nfloat sinPluck(float freq, float decay, float t) {\n    return sin(TWO_PI * freq * t) * envelope(t, decay, 0.1);\n}\n\nfloat triPluck(float freq, float decay, float t) {\n    return fract(t*freq) * envelope(t, decay, 0.1);\n}\n\nvec2 intro(float t) {\n    vec2 sig = vec2(0);\n    float dur = 0.0;\n    \n    for (int i = 0; i < INTRO_NOTES; ++i) {\n        float freq = INTRO_NOTE_FREQS[i];\n        \n        // Get note duration\n        float t0i = dur;\n        dur += INTRO_NOTE_DURATIONS[i];\n        \n        float ti = mod(t - t0i, INTRO_DURATION);\n        \n        // Add signals\n        sig += sinPluck(freq, 10.0, ti) * 0.4;\n        sig += triPluck(freq, 10.0, ti) * 0.6;\n    }\n    \n    return sig;\n}\n\n\n////////////////////////////////////////////////////////////////////////////\n\n// Nya sound generated from a Fourier series\n// Inspired by https://www.shadertoy.com/view/WlGSWy\n\n// The amplitude, frequencies and phases have been generated from a \"nya\" wav file with\n// a python script using the scipy library and it's fftpack functions\n\n#ifdef INCLUDE_NYA_SOUND\n\nfloat a[] = float[](\n0.002, 0.002, 0.002, 0.003, 0.004, 0.004, 0.006, 0.005, 0.012, 0.012, 0.04, 0.043, 0.05, 0.063, 0.043, 0.03, 0.027, 0.016, 0.01, 0.01, \n0.007, 0.004, 0.003, 0.002, 0.002, 0.002, 0.003, 0.003, 0.005, 0.004, 0.007, 0.009, 0.016, 0.024, 0.031, 0.035, 0.026, 0.013, 0.002, 0.007, \n0.01, 0.005, 0.002, 0.004, 0.002, 0.002, 0.002, 0.002, 0.002, 0.001, 0.001, 0.003, 0.004, 0.005, 0.007, 0.008, 0.007, 0.005, 0.002, 0.002, \n0.002, 0.002, 0.002, 0.002, 0.002, 0.002, 0.004, 0.006, 0.006, 0.007, 0.008, 0.007, 0.005, 0.004, 0.004, 0.004, 0.003, 0.001, 0.001, 0.002, \n0.003, 0.003, 0.004, 0.004, 0.005, 0.004, 0.004, 0.004, 0.004, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.002, 0.002, 0.002, 0.002, 0.002, \n0.002, 0.002, 0.002, 0.002, 0.002, 0.001, 0.002, 0.001, 0.001, 0.002, 0.004, 0.004, 0.004, 0.004, 0.003, 0.004, 0.004, 0.004, 0.004, 0.004, \n0.003, 0.003, 0.003, 0.002, 0.002, 0.001, 0.002, 0.002, 0.002, 0.002, 0.002, 0.001, 0.002, 0.002, 0.002, 0.002, 0.003, 0.002, 0.002, 0.002, \n0.002, 0.002, 0.002, 0.002, 0.002, 0.001, 0.002, 0.002, 0.002, 0.002, 0.001, 0.002, 0.001, 0.001, 0.001, 0.002, 0.002, 0.002, 0.002, 0.003, \n0.003, 0.002, 0.002, 0.002, 0.002, 0.001, 0.002, 0.002, 0.002, 0.002, 0.002, 0.001, 0.001, 0.002, 0.002, 0.002, 0.002, 0.002, 0.002, 0.002, \n0.002, 0.002, 0.001, 0.002, 0.003, 0.003, 0.002, 0.002, 0.002, 0.002, 0.001, 0.001, 0.001, 0.002, 0.002, 0.002, 0.001, 0.001, 0.002, 0.001\n);\nfloat f[] = float[](\n32.082, 60.292, 60.845, 61.398, 61.951, 62.504, 63.057, 63.611, 64.164, 64.717, 65.27, 65.823, 66.376, 66.929, 67.483, 68.036, 68.589, 69.142, 69.695, 70.248, \n70.801, 71.354, 71.908, 72.461, 73.014, 126.668, 127.774, 128.327, 128.881, 129.434, 129.987, 130.54, 131.093, 131.646, 132.199, 132.753, 133.306, 133.859, 134.412, 134.965, \n135.518, 136.071, 136.624, 137.178, 137.731, 138.837, 139.39, 164.834, 165.388, 167.047, 194.151, 196.363, 196.916, 197.469, 198.023, 198.576, 199.129, 199.682, 200.235, 200.788, \n201.341, 201.894, 202.448, 204.107, 261.633, 262.186, 262.739, 263.293, 263.846, 264.399, 264.952, 265.505, 266.058, 266.611, 267.164, 267.718, 268.271, 269.93, 270.483, 271.036, \n271.59, 272.143, 272.696, 273.249, 273.802, 274.355, 274.908, 275.462, 276.015, 276.568, 277.121, 277.674, 278.227, 278.78, 279.333, 279.887, 280.44, 280.993, 281.546, 282.099, \n282.652, 283.205, 283.759, 284.312, 284.865, 285.418, 297.034, 297.587, 303.118, 329.116, 329.669, 330.222, 330.775, 331.328, 331.881, 332.434, 332.988, 333.541, 334.094, 334.647, \n335.2, 335.753, 336.306, 336.86, 337.413, 388.301, 388.854, 389.407, 389.961, 390.514, 391.067, 391.62, 392.173, 392.726, 393.279, 393.833, 394.386, 394.939, 395.492, 396.045, \n396.598, 397.151, 401.576, 402.13, 402.683, 662.656, 663.21, 663.763, 664.316, 682.569, 683.122, 716.311, 719.076, 719.629, 721.289, 721.842, 722.395, 727.373, 727.926, 728.48, \n729.033, 729.586, 730.139, 734.564, 735.117, 735.67, 741.755, 742.308, 748.392, 748.946, 749.499, 777.709, 780.474, 786.006, 792.643, 793.196, 793.75, 794.303, 794.856, 795.409, \n795.962, 796.515, 799.834, 800.387, 800.94, 801.493, 802.047, 806.472, 807.025, 809.237, 809.79, 813.109, 813.662, 821.959, 822.513, 823.066, 825.831, 863.445, 863.998, 864.551\n);\nfloat p[] = float[](\n2.371, 1.425, -0.272, -0.33, -2.264, -2.687, 1.691, 2.034, -0.053, -0.196, -2.197, 2.08, 0.539, -1.686, 1.777, -1.718, 1.415, -1.577, 1.142, -2.111, \n1.048, -2.29, 0.51, -2.637, 0.78, -1.115, -2.755, 2.519, 1.202, 0.244, -0.667, -1.735, -2.962, 1.788, 0.199, -1.615, 2.78, 1.033, -0.425, 0.233, \n-1.877, 2.006, -1.944, 1.165, -1.707, -2.794, 0.388, 2.485, -0.055, -0.493, -0.763, 2.161, 0.559, -0.802, -2.458, 2.139, 0.405, -1.322, -3.026, 3.081, \n1.471, -0.065, -1.946, 0.892, -2.919, 1.354, 0.055, -1.839, 2.484, 0.927, -1.009, 3.11, 1.154, -0.841, 2.835, -0.102, -3.045, -2.119, 0.463, 2.992, \n-0.599, 2.299, -1.043, 2.013, -1.099, 2.113, -1.058, 1.934, -1.328, 1.644, -1.769, 1.132, -2.096, 1.045, -2.153, 0.767, -2.518, 0.726, -2.175, 1.097, \n-1.91, 1.576, -1.091, 2.079, -1.189, 2.014, 2.513, -0.362, -1.895, -2.724, 1.524, -0.603, -2.855, 0.985, -1.74, 1.809, -0.805, 2.911, 0.288, -2.43, \n1.039, -1.704, 1.915, -0.669, 3.062, -2.236, 2.107, 0.071, -1.925, 2.44, 0.38, -1.498, 2.922, 1.009, -0.892, -2.775, 1.577, -0.36, -2.231, 2.131, \n0.219, -1.652, -0.871, -2.869, 1.199, 2.662, 1.081, -0.63, -2.415, 1.258, -0.448, 3.045, -2.873, 1.892, -1.234, -2.791, 1.856, -1.761, 2.565, 0.631, \n-1.18, -2.933, 1.664, -2.021, 2.13, -0.166, 0.543, -1.415, -1.985, 2.197, 0.086, 0.263, -0.715, -0.743, -2.207, 2.403, 0.751, -0.806, -2.392, 2.225, \n0.545, -1.207, -2.426, 1.85, -0.295, -2.461, 1.75, 0.698, -1.233, -0.381, -2.334, -1.399, 2.783, 2.481, 0.343, -1.709, -0.723, 0.665, -1.133, -3.076\n);\n\nfloat makeNya(float freq, float t) {\n    float sig = 0.;\n    \n    // 66.929 is the fundamental harmonic\n    float x = t * freq / 66.929;\n    \n    if (x > 1.) return 0.; // Play only once\n\n    // Reconstruct the sound from the amplitude, \n    // frequency and phase arrays\n    for (int i = 0; i < f.length(); ++i) {\n        sig += a[i] * cos(TWO_PI * f[i] * x + p[i]);\n    }\n    \n    return sig;\n}\n\n#endif\n\n////////////////////////////////////////////////////////////////////////////\n\n\nvec2 mainPart(float t) {\n    vec2 sig = vec2(0);\n    float dur = 0.0;\n    \n    // Add main notes\n    for (int i = 0; i < MAIN_NOTES; ++i) {\n        float freq = MAIN_NOTE_FREQS[i];\n        \n        // Get note duration\n        float t0i = dur;\n        dur += MAIN_NOTE_DURATIONS[i];\n        \n        float ti = mod(t - t0i, MAIN_DURATION);\n        \n        // Add signals\n        sig += sinPluck(freq / 2., 10.0, ti) * 0.15; // one octave lower\n        sig += triPluck(freq, 10.0, ti) * 0.3;\n        \n        // If enabled, add nya sound\n        #ifdef INCLUDE_NYA_SOUND\n        sig += makeNya(freq, ti) * 0.15;\n        #endif\n    }\n        \n    return sig;\n}\n\n\nvec2 song(float t) {\n    // Play intro at the beginning once and loop the main theme after that\n    if (t < INTRO_DURATION) {\n        return intro(t);\n    }\n    \n    return mainPart(t - INTRO_DURATION);\n}\n","name":"Common","description":"","type":"common"}]}