{"ver":"0.1","info":{"id":"cl3Xz7","date":"1685149591","viewed":68,"name":"fract squares","username":"satorielectronics","description":"trig palettes and fractal squares ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["trippy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 4. * atan(1.);\nconst float TAU = 2. * PI;\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.821, 0.328, 0.242);\n    vec3 b = vec3(0.659, 0.481, 0.896);\n    vec3 c = vec3(0.612, 0.340, 0.296);\n    vec3 d = vec3(2.820, 3.026, -0.273);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) /iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i<3.0; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n        vec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n        vec2 m = (0.01 * fragCoord.xy-iResolution.xy)/iResolution.y;\n        p *= 1.0 * length(uv) * exp(-length(uv0));\n        m *= 1.0 * length(uv) * exp(-length(uv0));\n        float d = sdBox(p, m);\n        d = tan(d*8. + iTime)/8.;\n        //d = sin(d*8. + iTime)/8. + sin(d*2. + iTime)/7.;\n        //d = sin(d*16. + iTime)/16.;\n        //d = sin(d*32. + iTime)/32.;\n        \n\n\n        d = abs(d);\n        d = pow(0.02 / d, 1.2);\n\n        // Time varying pixel color\n        vec3 col = palette(length(uv0) + i*3. + iTime*.3);\n        finalColor = col * d;\n\n    }\n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}