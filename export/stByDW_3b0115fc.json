{"ver":"0.1","info":{"id":"stByDW","date":"1649685311","viewed":63,"name":"MetaBall Test","username":"beherca","description":"MetaBall \nSee How it work here https://www.desmos.com/calculator/zuibhrwjce","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["metaball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 N22(vec2 uv){\n    vec3 a = fract(uv.xyx * vec3(123.34,234.34,345.65));\n    a += dot(a, a+34.45);\n    return fract(vec2(a.x*a.y, a.y*a.z));\n}\n\n\nvec3 circle(vec2 uv, vec2 pos, float size) {\n    uv.x = uv.x*iResolution.x/iResolution.y;\n    uv = uv - pos;\n    vec3 col = vec3(length(10./size*uv));\n    vec3 result = vec3(smoothstep(.98,1.0,col.x)); \n    return result;\n}\n\nfloat c(float x, float y, float t0, float t1, float r){\n    float result = r/sqrt((x-t0)*(x-t0) + (y-t1)*(y-t1)); \n    \n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = uv.x*iResolution.x/iResolution.y;\n    // Time varying pixel color\n    vec3 col =vec3(0.);\n    vec2 pos = vec2(1.);\n    float sum  = 0.;\n    for(int i = 0; i < 20; i++ ){\n        pos = N22(vec2(float(i)+1.));\n        //col += 1.* (1. - circle(uv, N22(pos), 1.));\n        sum += c(uv.x, uv.y, pos.x + 0.9*cos(iTime/pos.x/10.), pos.y + 0.22*cos(iTime/10.), pos.x/100.); \n        \n    }\n    \n    col = vec3( sum > 0.3 ? 1.: 0.);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}