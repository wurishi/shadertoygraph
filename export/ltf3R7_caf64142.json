{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Created by Iain Melvin 2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  vec3 col = vec3(0,0,0); // zero\n    \n  // render original wave at the bottom\n  float wave_orig = texture( iChannel0, vec2(uv.x,0.75) ).x;\n  col += 1.0 -  smoothstep( 0.0, 0.01, abs(wave_orig - uv.y*2.0) ); \n \n  // find max offset (there is probably a better way)\n  float jmax = 0.0;\n  float jmaxf=0.0;\n  float jf=0.0;\n  float ja;\n  for (int j=0;j<200;j++){\n    jf = jf+0.005;\n    ja = texture( iChannel0, vec2(jf,0.75)).x;\n    if ( ja>jmaxf) {jmax = jf;jmaxf = ja;}\n  }\n    \n  // new sample index\n  float si = uv.x+jmax;\n    \n  // if we haven't gone out of range, render it\n  if (si<1.0){\n    float wave = texture( iChannel0, vec2(uv.x+jmax,0.75) ).x;\n    col += 1.0 -  smoothstep( 0.0, 0.01, abs(wave - ((uv.y-0.5)*2.0)) );\n  } \n \n  // output final color\n  fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ltf3R7","date":"1419911273","viewed":186,"name":"max wave offset","username":"pixelbeast","description":"Sample displayed is offset by max sample. Gives 'stable' waves especially for low frequencies. Offset wave above, original wave below.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["wavemax"],"hasliked":0,"parentid":"","parentname":""}}