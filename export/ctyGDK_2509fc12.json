{"ver":"0.1","info":{"id":"ctyGDK","date":"1684674025","viewed":38,"name":"Cell effect with purple lights","username":"CanadianWarship","description":"A WIP for a more advanced idea revolving around rounded lights, with AA","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["cells","purple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // move along uv\n    uv = uv + sin(2. * iTime * vec2(0.0420, 0.069));\n    \n    // out of cell effect\n    vec2 uy = (uv + 0.5 + 0.1*sin(5.*iTime)*vec2(1.414,0.69)) * 0.595;\n    \n    // uv for the cell (I use two letter variables for vec2)\n    vec2 cv = fract( 10. * uv);\n    \n    // luminosity is \n    float lum = 1. - length(cv-uy);\n    \n    \n    // input channel\n  //  lum *= texture(uv);\n    \n    // Render in b/w\n    fragColor = vec4(vec3(lum), 1.);\n    \n    fragColor.rgb *= vec3(.8,.05,.6);\n  //  fragColor.gb *= min(uv,0.);7\n    fragColor.rgb = smoothstep(0.,1., fragColor.rgb); // AntiAliasing\n}\n\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}