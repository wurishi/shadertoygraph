{"ver":"0.1","info":{"id":"ssGfzd","date":"1658690573","viewed":168,"name":"Thoughts","username":"rodgzilla","description":"A combination of what I've been experimenting with during the past few weeks.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","braid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n#define ZPOS -10. + 5. * time\n\nfloat PI = acos(-1.);\n\nmat2 rot2d(float a){\n  float c = cos(a), s = sin(a);\n  \n  return mat2(c, s, -s, c);\n}\n\nfloat cyl(vec3 p, vec3 c){\n  return length(p.xy - c.xy) - c.z;\n}\n\n\nvec3 thread(vec3 p, float m, float r, float n, float xm, float ym, float i) {\n    p.z += (i * 2. * PI) / (m * n);\n    p.x += xm * sin(p.z * m);\n    p.y += ym * sin(p.z * m * (n - 1.));\n    \n    return p;\n}\n\nfloat dir1 = 1.;\nfloat recbraid(vec3 p, float m, float r) {\n    float d = 10.;\n    float n1 = 3.;\n    float n2 = 3.;\n\n    for (float i = 0.; i < n1; i += 1.) {\n        vec3 p1 = thread(p, m * .5, r, n1, 3., 3., i);\n        p1.z += time * 5. * dir1;\n        dir1 *= -1.;\n        for (float j = 0.; j < n2; j += 1.) {\n            p1.xy *= rot2d(time * .1);\n            vec3 p2 = thread(p1, m * 2., r, n2, .7, .5, j);\n            \n            d = min(d, cyl(p2, vec3(0, 0, r)));\n        }\n    }\n\n    return d;    \n}\n\n\nvec3 glow = vec3(0, 0, 0);\nfloat at = 0.;\n\nfloat map(vec3 p) {\n    float d = 10000.;\n    \n    vec3 offset = vec3(0, 5., 0);\n    float m = 4.;\n    \n    for (float i = 0.; i < m; i++) {\n        vec3 pc = p;\n        pc.xy *= rot2d(PI * cos(0.04 * pc.z * (i / m)));\n        vec3 oc = offset;\n        oc.xy *= rot2d(2. * PI * (i / m));\n        float b = recbraid(pc - oc, 0.1, 0.05);\n        d = min(d, b);\n    }\n\n    at += 1. / (d * 3.1);\n \n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0., ZPOS);\n  vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n\n  float d = 0.;\n  vec3 glow = vec3(0);\n\n  for (int i = 0; i < 100; i++) {\n    vec3 p = ro + d * rd;\n    float ds = map(p);\n    \n    if (ds < 0.01 || ds > 50.) {\n      break;\n    }\n    d += ds * 1.;\n//    glow += .007 * at * vec3(\n    glow += .015 * at * vec3(\n      .1,\n      .0, \n      .7\n    );\n  }\n  \n  vec3 p = ro + d * rd;\n  vec2 e = vec2(0.01, 0);\n  vec3 n = normalize(map(p) - \n    vec3(\n      map(p - e.xyy),\n      map(p - e.yxy),\n      map(p - e.yyx)\n    )\n  );\n\n  vec3 lp = ro;\n  vec3 tl = lp - p;\n  vec3 tln = normalize(tl);\n  float dif = dot(tln, n);\n  \n  col = 1.5 * vec3(dif);\n  col = dif * glow;\n  fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}