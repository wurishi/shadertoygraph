{"ver":"0.1","info":{"id":"7dtGRr","date":"1629057560","viewed":82,"name":"star with chromatic aberration","username":"modog","description":"simple star with effect","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["chromatic","aberration","start"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float THRESHOLD_ABERRATION = .044;\nconst float SMOOTHNESS = .16;\nconst float LINE_WEIGHT = SMOOTHNESS * .5;\nconst float DISTANCE = 1.;\nconst float ROTATION_SPEED = .9;\n\nmat2 rotate2d(float angle){\n    return mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle));\n}\n\nfloat fract2(float x){\n  return abs((fract(x) - .5) * 2.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screen = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    vec3 color = vec3(1.0);\n    float time = iTime * .5;\n    \n    screen = screen / .5;\n    screen = rotate2d(time * ROTATION_SPEED) * screen;\n    \n    float radius = length(screen) * 2., \n          threshold = atan(screen.y , screen.x);\n          \n    for(int i = 0; i < 3; i++){\n        color[i] *= smoothstep(LINE_WEIGHT, \n        SMOOTHNESS, \n        fract2(radius * (abs(sin(threshold * 3. + float(i) * THRESHOLD_ABERRATION)) + 1.) * DISTANCE + time * ROTATION_SPEED));\n    }\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}