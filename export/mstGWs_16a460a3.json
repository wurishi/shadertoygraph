{"ver":"0.1","info":{"id":"mstGWs","date":"1678077907","viewed":343,"name":"PreIntegrate Skin SSS LUT ","username":"nuomi","description":"Skin SSS LUT Generator\n\nreference：\n1.https://www.slideshare.net/leegoonz/penner-preintegrated-skin-rendering-siggraph-2011-advances-in-realtime-rendering-course","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["skinlut"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n\nfloat saturate(float x)\n{\n    return max(0.0, min(1.0, x));\n}\n\nfloat Gaussian(float v,float r)\n{\n    return 1.0/sqrt(2.0 * PI * v) * exp(-(r*r)/(2.0*v));\n}\n\n\n#define A 0.15\n#define B 0.50\n#define C 0.10\n#define D 0.20\n#define E 0.02\n#define F 0.30\n#define W 11.2\n\nvec3 Tonemap(vec3 x)\n{\n    return ((x * ( A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E/F;\n}\n\nvec3 DiffusionProfile(float r)\n{\n    return vec3(0.0, 0.0, 0.0)\n        + Gaussian(0.0064, r) * vec3(0.233, 0.455, 0.649)\n        + Gaussian(0.0484, r) * vec3(0.100, 0.336, 0.344)\n        + Gaussian(0.187, r) * vec3(0.118, 0.198, 0.0)\n        + Gaussian(0.567, r) * vec3(0.113, 0.007, 0.007)\n        + Gaussian(1.99, r) * vec3(0.358, 0.004, 0.0)\n        + Gaussian(7.41, r) * vec3(0.233, 0.0, 0.0);\n}\n\n// ring integrate \nvec3 BakeSkinLUT(vec2 uv)\n{\n    float NoL = uv.x;\n    float INV_R = uv.y;\n    float theta = acos(NoL * 2.0 - 1.0);\n    float R = 1.0 / INV_R;\n    \n    vec3 Integral = vec3(0,0,0);\n\tvec3 NormalizationFactor = vec3(0,0,0);\n    \n    for (float x = -PI/2.0; x < PI/2.0; x+= PI * 0.001)\n    {\n        //R(2r*sin(2/x))\n        float dis = 2.0 * R * sin(x * 0.5);\n        \n        //saturate(cos(θ + x)) * R(dis)\n        Integral += saturate(cos(x + theta)) * DiffusionProfile(dis);\n        \n        NormalizationFactor += DiffusionProfile(dis);\n    }\n    \n    vec3 result = Integral / NormalizationFactor;\n    \n    vec3 tonedResult = Tonemap(result * 12.0);\n    vec3 whiteScale = 1.0 / Tonemap(vec3(W, W, W));\n           \n    tonedResult = tonedResult * whiteScale;\n    \n    return tonedResult;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = vec4(BakeSkinLUT(uv), 1.0);;\n}","name":"Image","description":"","type":"image"}]}