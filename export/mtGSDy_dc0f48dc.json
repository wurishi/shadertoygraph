{"ver":"0.1","info":{"id":"mtGSDy","date":"1686322508","viewed":55,"name":"GlowBow","username":"deep2universe","description":"I am still learning the whole thing. Here is an attempt to play with iMouse. Haven't quite figured it out yet.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["experiment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"   // cosine based palette, 4 vec3 params\nvec3 palette( in float t)\n{\n    vec3 a = vec3(0.650, 0.500, 0.310);\n    vec3 b = vec3(-0.650, 0.500, 0.600);\n    vec3 c = vec3(1.208, 2.168, 2.976);\n    vec3 d = vec3(2.660, 1.000, 3.667);\n    \n    return a + b*cos( 3.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for(float i=0.0; i< 3.0; i++){ \n    \n        uv = fract(uv * 0.2)- (pow(i*0.3, 0.8));\n\n        float d = pow(length(uv), 2.2) * exp(length(uv0));\n        d *= cos(d);\n        //d = iMouse.x + iMouse.y;\n        //d -= pow(length(iMouse.x + iMouse.y), .9);\n        d -= length(iMouse.xy) * 0.001;\n        //d = iMouse.x + iMouse.y;\n        \n\n        vec3 col = palette(length(uv0) + i*.2 + -iTime*0.4);\n        //vec3 col = palette(length(uv0) + exp(i*7.2) + -iTime*0.4);\n        //vec3 col = palette(length(uv0) + exp(i*7.2) + sin(-iTime*0.4)*1.2);\n\n        d = sin(d*18. + iTime)/18.;\n        d = abs(d);\n        //d += length(pow(sin(iTimeDelta*6.), 1.67));\n        d = pow(0.01/d, 0.2);\n        \n        \n        finalColor += col *d;\n        \n    }\n    \n    fragColor = vec4(finalColor, .1);\n}","name":"Image","description":"","type":"image"}]}