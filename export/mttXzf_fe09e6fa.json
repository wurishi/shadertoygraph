{"ver":"0.1","info":{"id":"mttXzf","date":"1685682246","viewed":90,"name":"Mountain sunset","username":"jdpe","description":"Moveable sun with arrow keys. It starts in bottom left corner.","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["beginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 getCoord() {\n    return vec2(\n    \ttexelFetch(iChannel0, ivec2(0, 0), 0).r,\n        texelFetch(iChannel0, ivec2(1, 0), 0).r\n    );\n}\n\n// Random function to create triangle waves\nfloat peakValue(float x,float a, float b)\n{\n    float r = asin(sin(x*a)*b);\n    return abs(r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 blueSky = vec3(103.0/256.0,161.0/256.0,199.0/256.0);\n    vec3 orangeSky = vec3(228.0/256.0,114.0/256.0,37.0/256.0);\n    vec3 mountainColor = vec3(113.0/256.0,131.0/256.0,142.0/256.0);\n    vec3 sunColor = vec3(245.0/256.0,245.0/256.0,14.0/256.0);\n    // Mountain range peak\n    float avgPeak = 250.0;\n    float colorPeak = getCoord().y;\n    float x = fragCoord.x;\n    float randomPeak = peakValue(x,0.015,0.9)+peakValue(x,0.047,1.0)+peakValue(x,0.052,0.25);\n    float peak = randomPeak*20.0+avgPeak;\n    vec3 col = vec3(0,0,0);\n    float dist = distance(fragCoord, getCoord())+1.0;\n    // If pixel is above peak\n    if(fragCoord.y > peak)\n    {\n        col = blueSky * (fragCoord.y - colorPeak)/(576.0-colorPeak)+orangeSky*(1.0-(fragCoord.y - colorPeak)/(576.0-colorPeak));\n        col += sunColor*10.0/dist;\n    }else{\n        // Otherwise we need to do more calculations to partially shade\n        col = mountainColor + orangeSky * 0.05;\n        // Calculate peak where the sun is, not the current pixel\n        float x= getCoord().x;\n        float sunPeak = peakValue(x,0.015,0.9)+peakValue(x,0.047,1.0)+peakValue(x,0.052,0.25);\n        sunPeak = sunPeak * 20.0 + avgPeak;\n        // Shading if sun is over the range\n        if(getCoord().y>sunPeak)\n        {\n        \n        //col += sunColor*10.0/dist;\n        float intensity = clamp((1.0/(getCoord().y-sunPeak+50.0)*100.0),0.0,10.0);\n        col += sunColor*clamp(intensity*1.0*10.0/(dist+550.0),0.0,0.05);\n        }else\n        {\n        // shading if sun is under the range\n        dist = distance(fragCoord, vec2(getCoord().x,sunPeak))+1.0;\n        float intensity = clamp((1.0/(sunPeak-getCoord().y+5.0)),0.0,1.0);\n        col += sunColor*clamp(intensity*1.0*10.0/(dist+1.0),0.0,0.01);\n        }\n    }\n      \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n//sin(fragCoord.x/10.0)\n//fract(sin(fragCoord.x/1000.0)*10000000.0);\n//col += vec3(1,1,1)*dist*0.005; flashlight effect","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nconst float speed = 100.0;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float outData = 0.0;\n    \n    switch(int(fragCoord.x)) {\n        case 0:\n        \toutData = texelFetch(iChannel0, ivec2(0), 0).r +\n                (iTimeDelta * speed) * texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).r -\n                (iTimeDelta * speed) * texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).r;\n        \tbreak;\n        \n        case 1:\n        \toutData = texelFetch(iChannel0, ivec2(1, 0), 0).r +\n                (iTimeDelta * speed) * texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).r -\n        \t\t(iTimeDelta * speed) * texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).r;\n        \tbreak;\n    }\n    \n    fragColor = vec4(outData, 0.0, 0.0, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}