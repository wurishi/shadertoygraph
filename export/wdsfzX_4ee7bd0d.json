{"ver":"0.1","info":{"id":"wdsfzX","date":"1588791531","viewed":365,"name":"Cosmic Cycles + Music","username":"GoldenGod","description":"wanted to try and add music to shader I found","likes":13,"published":1,"flags":64,"usePreview":0,"tags":["music","star","space","starfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ltj3Wm","filepath":"https://soundcloud.com/erick-koala-ramirez/tame-impala-love-paranoia","previewfilepath":"https://soundcloud.com/erick-koala-ramirez/tame-impala-love-paranoia","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Original Shader: https://www.shadertoy.com/view/wly3Dy\n \n#define NUM_LAYERS 5.\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat Star(vec2 uv, float a, float sparkle) {\n    vec2 av1 = abs(uv);\n \tvec2 av2 = abs(uv*Rot(a));\n    vec2 av = min(av1, av2);\n    \n    vec3 col = vec3(0);\n    float d = length(uv);\n    float star = av1.x*av1.y;\n   // star = max(av1.x*av1.y, av2.x*av2.y);\n    star = max(0., 1.-star*1e3);\n    \n    float m = min(5., 1e-2/d);\n    \n    return m+pow(star, 4.)*sparkle;\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34,145.54));\n    p += dot(p, p+45.23);\n    return fract(p.x*p.y);\n}\n\nvec3 StarLayer(vec2 uv, float t, float sparkle) {\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n\tvec3 col = vec3(0);\n    \n    \n    for(int y=-1; y<=1; y++) {\n        for(int x=-1; x<=1; x++) {\n            vec2 offs = vec2(x, y);\n            float n = Hash21(id-offs);\n\t\t\tvec3 N = fract(n*vec3(10,100,1000));\n            vec2 p = (N.xy-.5)*.7;\n            \n            float brightness = Star(gv-p+offs, n*6.2831+t, sparkle);\n            vec3 star = brightness*vec3(.6+p.x, .4, .6+p.y)*N.z*N.z;\n            \n            \n            \n            star *= 1.+sin((t+n)*20.)*smoothstep(sin(t)*.5+.5, 1., fract(10.*n));\n            \n            float d = length(gv+offs);\n            \n            col += star*smoothstep(1.5, .8, d);\n        }\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n\n    float sl = texture(iChannel0, vec2(0.)).x;\n    float sl2 = texture(iChannel0, vec2(0.25)).x ;\n    float sm = texture(iChannel0, vec2(0.5,.0)).x ;\n    float sm2 = texture(iChannel0, vec2(0.75,0.0)).x ;\n    float sh = texture(iChannel0, vec2(1.,0.0)).x ;\n    float st = (sl+sl2+sm+sm2+sh);\n    \n    vec2 M = vec2( iTime/8.,0.4 * iTime/16.0);\n   // M.x += st * 0.1;\n    \n\tfloat t = iTime * .03;\n    //float t = 0.0;\n\t\n    float twirl = sin(t*.1);\n    twirl *= twirl*twirl*sin(dot(uv,uv));\n    uv *= Rot(-t*.2);\n    \n    uv *= 2.+sin(t*.05);\n    \n    vec3 col = vec3(0);\n    float speed = -.2;\n    \n    speed = .1;\n    float bla = sin(t+sin(t+sin(t)*.5))*.5+.5;\n    float d = dot(uv,uv);\n    \n    uv /= d;\n    float burst = sin(1.0);\n    uv *= .2;\n    \n    \n    float stp = 1./NUM_LAYERS;\n        \n    for(float i=0.; i<1.; i+=stp) {\n    \tfloat lt = fract(t*speed+i);\n        float scale = mix(10., .25, lt) ;\n        float fade = smoothstep(0., .4, lt) *smoothstep(1., .95, lt); \n        fade += st *0.3;\n        //float fade = sm;\n        vec2 sv = uv*scale+i*134.53-M;\n       // sv.x += t;\n        col += StarLayer(sv, t, fade)*fade;\n    }\n    \n   \n    //t = iTime*.5;\n    float burstFade = smoothstep(0.0, .02, abs(burst));\n    float size = sl * 0.2;\n    //size += 0.9 * sin(t);\n    size = max(size, sqrt(size));\n    float fade = size/d;\n    col *= mix(0., fade, burstFade);\n    col += fade*.2*vec3(1., .5, .1)*bla*burstFade;\n    \n    //t*=1.5;\n    \n    \n\n    col += 1.-burstFade;\n   \n    \n    \n   \n   \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}