{"ver":"0.1","info":{"id":"cdKcRD","date":"1695845830","viewed":39,"name":"Progressive Rendering Experiment","username":"pizzahollandaise","description":"Rendering only 1/20th of the pixels at one time to save performance for ray marching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["hash","optimisation","progressive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * pcg2d, from:\n * Mark Jarzynski and Marc Olano, Hash Functions for GPU Rendering, \n * Journal of Computer Graphics Techniques (JCGT), vol. 9, no. 3, 21-38, 2020\n * Available online http://jcgt.org/published/0009/03/02/\n * Code at: https://www.shadertoy.com/view/XlGcRh\n */\nuvec2 hash2u(uvec2 v) {\n    v = v * 1664525u + 1013904223u;\n    v.x += v.y * 1664525u; v.y += v.x * 1664525u;\n    v ^= v >> 16u;\n    v.x += v.y * 1664525u; v.y += v.x * 1664525u;\n    v ^= v >> 16u;\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    if (iFrame % 40 == 0) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    } else if (hash2u(uvec2(fragCoord.xy)).x % 20u == uint(iFrame) % 20u) {\n        fragColor = vec4(1.0);\n    } else {\n        discard;\n    }\n}","name":"Image","description":"","type":"image"}]}