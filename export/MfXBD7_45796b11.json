{"ver":"0.1","info":{"id":"MfXBD7","date":"1723885659","viewed":18,"name":"Visualizing Cosmic Expansion","username":"romeosoft","description":"This shader visualizes the concept of cosmic expansion and the calculation of the Hubble constant through a dynamic grid and moving galaxies. The grid represents the fabric of spacetime, expanding as time progresses.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cosmology"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// -------------------------------------------------\n// This shader visualizes the concept of cosmic expansion and the calculation of the Hubble constant \n// through a dynamic grid and moving galaxies. The grid represents the fabric of space, expanding as time progresses.\n// \n// The equations used in this shader are derived from Newtonian gravity and describe the dynamics of an expanding universe. \n// In cosmology, the scale factor a(t) represents the relative expansion of the universe at a given time t.\n// \n// The Hubble parameter (H) is defined as the rate of expansion of the universe, given by the equation:\n//   a'/a = H\n// where a' is the time derivative of the scale factor a, indicating how fast the universe is expanding relative to its current size.\n// \n// The Friedmann equations, which are derived from Einstein's field equations of General Relativity, can be simplified \n// under certain assumptions to yield:\n//   (a'/a)² = 1 / a³\n// This equation shows that the expansion rate of the universe is related to the density of matter within it. \n// Specifically, as the universe expands (a increases), the density of matter decreases, influencing the rate of expansion.\n// \n// The specific form of the scale factor for a matter-dominated universe can be expressed as:\n//   a(t) = c * pow(t, 2/3)\n// where c is a constant related to the speed of light, and pow(t, 2/3) shows how the scale factor grows over time.\n// This indicates that as time progresses, the size of the universe expands, leading to the observed redshift of distant galaxies.\n// \n// This visualization provides insight into the dynamic nature of the universe, where galaxies move apart \n// as the fabric of space itself expands over time.\n// -------------------------------------------------\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Space unit size a(t)\n    float a = pow(mod(iTime, 1.0), 2.0 / 3.0); // a = c * pow(t, 2/3)\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Convert coordinates to the range [-1, 1]\n    vec2 p = uv * 2.0 - 1.0;\n    p.x *= iResolution.x / iResolution.y; // Maintain aspect ratio\n\n    // Background color\n    vec3 bgColor = vec3(0.0, 0.0, 0.1); // Deep blue background\n    vec3 col = bgColor;\n\n    // Grid parameters\n    float gridSize = a; \n    float gridnum = 1.0 / gridSize; // Number of grid cells\n\n    // Determine grid cell locations\n    vec2 gridlocs = vec2(\n        floor(p.x / (gridSize * 2.0) + 0.5), \n        floor(p.y / (gridSize * 2.0) + 0.5)\n    ) * 2.0 * gridSize;\n    \n    // Calculate checkerboard effect\n    float checker = step(0.5, mod(floor(p.x * gridnum / 2.0) + floor(p.y * gridnum / 2.0), 2.0));\n    col = mix(col, vec3(1.0), checker); // Grid lines in white\n\n    // Galaxy parameters\n    int numGalaxies = 5;\n    float galaxyRadius = 0.025;\n\n    // Moving galaxies over time\n    for(int i = 0; i < numGalaxies; i++)\n    {\n        // Generate random galaxy positions, using time parameter to move galaxies\n        float angle = float(i) * 6.28318 / float(numGalaxies);\n        float distance = 0.05 + 0.02 * sin(iTime + float(i)); // Dynamic variation of galaxies\n         \n        // Calculate galaxy position with offset\n        vec2 galaxyPos = gridlocs + vec2(\n            cos(angle + iTime * 0.2 + gridlocs.x), \n            sin(angle + iTime * 0.2 + gridlocs.y)\n        ) * distance;\n\n        // Calculate the distance from the current fragment to the galaxy center\n        float dist = length(p - galaxyPos);\n\n        // If within galaxy radius, draw the galaxy\n        if(dist < galaxyRadius)\n        {\n            col = mix(col, vec3(1.0, 1.0, 0.5), smoothstep(galaxyRadius, galaxyRadius * 0.9, dist));\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}