{"ver":"0.1","info":{"id":"4fVyD1","date":"1731807082","viewed":118,"name":"Entropy grid","username":"Flopine","description":"A study on octree based on 0b5vr shader https://www.shadertoy.com/view/NsKGDy  <3","likes":13,"published":1,"flags":0,"usePreview":1,"tags":["2d","green","octree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n// Based on 0b5vr shader https://www.shadertoy.com/view/NsKGDy\n\n#define fs(u) texture(iChannel0, u).x\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(0.02,fwidth(val-thre)))\n\nstruct octree{\n    vec2 center;\n    vec2 size;\n    float id;\n};\n\nfloat box (vec2 p, vec2 c)\n{\n    vec2 q = abs(p)-c;\n    return min(0., max(q.x, q.y))+length(max(q, 0.));\n}\n\noctree frame (vec2 p, vec2 scale)\n{\n    float MIN_SIZE = .25,\n    seed = floor( iTime / 4.0 )+.1,\n    id;\n    \n    vec2 domainMin = vec2(-.5) * scale,\n    domainMax = vec2(.5) * scale,\n    dim = domainMax - domainMin;\n    \n    for (float i = 0.; i<8.; i++)\n    {\n        vec2 divCenter = vec2( fs( vec2(i + id, seed*0.3) ), \n                                fs( vec2(i + id + 4.3, seed*0.1) )\n        );\n        \n        divCenter = divCenter * dim + domainMin;\n        divCenter = clamp( divCenter, domainMin + MIN_SIZE, domainMax - MIN_SIZE);\n\n        vec2 minSizeOfAxis = min( abs( domainMin - divCenter ), abs( domainMax - divCenter ) );\n        float minSize = min( minSizeOfAxis.x,minSizeOfAxis.y);\n        if (minSize < MIN_SIZE) break;\n\n        domainMax = mix( domainMax, divCenter, step( p, divCenter ) ),\n        domainMin = mix( divCenter, domainMin, step( p, divCenter ) );\n        dim = domainMax - domainMin;\n        \n        vec2 diff = mix( -divCenter, divCenter, step( p, divCenter ) );\n        id = length( diff);\n    }\n  \n    vec2 center = (domainMax + domainMin)/2.;\n  \n    return octree(center, (domainMax - domainMin)/2., id) ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    uv *= 2.;\n    octree O = frame(uv, vec2(7.1, 4));\n    \n    vec3 col = 1.-vec3(AAstep(.01 ,abs(abs(box(uv-O.center, O.size-0.04))-0.02)));\n    float b = AAstep(.001, box(uv-O.center, O.size-.09));\n    col = mix(vec3(fs(vec2(O.id, 0.)), 1., O.id*.2), col, b);\n    \n    fragColor = vec4(sqrt(clamp(col, 0., 1.)),1.0);\n}","name":"Image","description":"","type":"image"}]}