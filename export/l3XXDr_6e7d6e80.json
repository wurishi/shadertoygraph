{"ver":"0.1","info":{"id":"l3XXDr","date":"1709335224","viewed":109,"name":"Neon Mandala Symphony","username":"Chengkai","description":"resembles a vibrant kaleidoscopic pattern or a digital mandala with neon colors","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","kaleidoscopic","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: Chengkai Xu\n// Title: Neon Mandala Symphony\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvec3 palette(float t) {\n    // Define key colors for the gradient\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.0, 0.33, 0.67);\n\n    // Compute the color\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalize the fragment coordinates\n    vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // Store the initial value of uv\n    vec2 uv0 = uv;\n    \n    // Initialize the final color\n    vec3 finalColor = vec3(0.0);\n\n    // Loop to modify uv and accumulate color\n    for (float i = 0.0; i < 4.0; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n        float d = length(uv) * exp(-length(uv0));\n\n        // Obtain a color from a palette function\n        vec3 col = palette(length(uv0) + i * 0.4 + iTime * 0.4);\n\n        // Apply some transformation to d\n        d = sin(d * 8.0 + iTime) / 8.0;\n        d = abs(d);\n        d = pow(0.01 / d, 1.2);\n\n        // Accumulate the final color\n        finalColor += col * d;\n    }\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}