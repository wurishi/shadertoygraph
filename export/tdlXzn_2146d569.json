{"ver":"0.1","info":{"id":"tdlXzn","date":"1550513702","viewed":321,"name":"Simple Honeycomb","username":"AdrianPi","description":"Honeycomb tiling","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","texture","patterns"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nThis is public domain. Do what you please with it :)\n\n*/\n\nconst float SIN60 = 0.86602540378443864676372317075294;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    // Aspect ratio\n    //float aspect = iResolution.x / iResolution.y;\n    \n    // Subpixel size\n    float sx = 1. / 4. / iResolution.x;\n    float sy = 1. / 4. / iResolution.x;\n    \n    // Color accum\n    vec4 color = vec4(0,0,0,1);\n    \n    // Oversample\n    for(int i = 0; i < 4; i++)\n    {\n        for(int j = 0; j < 4; j++)\n        {    \n            // Tex space\n            vec2 uv = fragCoord/iResolution.y;\n\n            // Subpixel offset\n            uv.x += sx * float(j);\n            uv.y += sy * float(i);\n            \n            // Correct\n            //uv.x *= aspect;\n            \n            // Overall scale\n            uv *= vec2(6./SIN60,6.);\n\n            // Offset columns\n            uv.y += floor(uv.x) * 0.5;\n\n            // Tile, tex-space -> Tile space\n            vec2 q = mod(uv,1.);\n            q *= 2.;\n            q -= 1.0;\n            q *= vec2(1.1,1.2);\n            q = abs(q);\n\n            // Signed distance\n            float d = max((q.x*SIN60+q.y*0.5),q.y);\n\n            // Choose color\n            color += d > 1. ? vec4(1,0,0,1) : vec4(1,1,0,1);\n        }\n    }\n    \n    color *= (1./16.);\n    fragColor = color;\n} ","name":"Image","description":"","type":"image"}]}