{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define PI 3.14519265358979323846264338327950288419716939937510\n\nfloat hash( uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return float(x)/pow(2.,32.);\n}\nvec3 RandVec(uint Seed){\n    return normalize(vec3(hash(Seed),hash(Seed+1u),hash(Seed+2u)));\n}\n\nconst float a = -2.+sqrt(3.)/2.;\n\nvec3[] Positions = vec3[] (vec3(-2.0,-3.0,-2.0),vec3(0.0,-3.0,-2.0),\n                           vec3(2.0,-3.0,-2.0), vec3(-2.0,-3.0,0.0),\n                           vec3(0.0,-3.0,0.0),  vec3(2.0,-3.0,0.0) ,\n                           vec3(-2.0,-3.0,2.0), vec3(0.0,-3.0,2.0) ,\n                           vec3(2.0,-3.0,2.0) ,/* Base */\n                           vec3(-1.0,a,-1.0)  , vec3(1.0,a,-1.0)   ,\n                           vec3(-1.0,a,1.0)  , vec3(1.0,a,1.0),\n                           vec3(0.0,-a-1.,0.0),\n                           vec3(0.0,-1000004.,0.0));\nfloat[] Radius = float[] (1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,\n                          1.0,1.0,1.0,1.0,1000000.);\nvec3[] Color = vec3[] (vec3(1.0),vec3(1.0),vec3(1.0),vec3(1.0),\n                       vec3(1.0),vec3(1.0),vec3(1.0),vec3(1.0),\n                       vec3(1.0),vec3(1.0),vec3(1.0),vec3(1.0),\n                       vec3(1.0),vec3(1.0),vec3(.9));\n\nstruct HitInfo {\n    vec3 HitPos;\n    vec3 Normal;\n    float Dst;\n    bool DidHit;\n    vec3 Color;\n    float Sd;\n};\n\nconst vec3 SkyCol = vec3(0.2,0.9,0.9);\nconst vec3 SunDir = vec3(1.0,1.0,-1.0);\n\nHitInfo RayTrace(vec3 Origin, vec3 Dir){\n    \n    HitInfo Hit;\n    Hit.DidHit=false;\n    float d;\n    float dst;\n    float mindst=pow(10.,10.);\n    float Sd = 1000.0;\n    for (int i=0;i<Positions.length();i++){\n        if (distance(Origin,Positions[i])<Radius[i]){\n            continue; //Skips the sphere if inside it\n        }\n    \n        dst = dot(Positions[i]-Origin,Dir);\n        if (dst<0.){continue;} //Sphere behind the camera\n        d = distance(Origin+Dir*dst,Positions[i]);\n        if (d>Radius[i]){\n            Sd = min(Sd,d-Radius[i]);\n            continue;\n        }//Ray Misses the Sphere\n        dst-= sqrt(pow(Radius[i],2.)-pow(d,2.));\n        if (dst<mindst){//Check if it's the closest one\n            mindst = dst;\n            Hit.DidHit=true;\n            Hit.HitPos=Origin+Dir*dst;\n            Hit.Normal = normalize(Positions[i]-Hit.HitPos);\n            Hit.Dst = mindst;\n            Hit.Color = Color[i];\n        }\n    }\n    Hit.Sd=Sd;\n    return Hit;\n}\n\nfloat GetAmbiantOc(vec3 Pos,vec3 Normal,uint Seed){\n    float Total=0.;\n    for (int i=0;i<25;i++){\n        vec3 Dir = RandVec(uint(i)+Seed);\n        Dir *= sign(dot(-Normal,Dir));\n        HitInfo Hit = RayTrace(Pos,Dir);\n        if (Hit.DidHit){\n            Total+=1./Hit.Dst;\n        }\n        \n    }\n    float t = float(Total)/25./2.;\n    return 1./(t+1.);\n}\n\nvec2 DDRot(vec2 P,float A){\n    float s=sin(A);\n    float c=cos(A);\n    return vec2(P.x*c+P.y*s,\n            P.x*-s+P.y*c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 Mouse = iMouse.xy/iResolution.xy*2.0-1.0;\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 Cam = vec3(0.0,-1.0,iTime-6.0);\n    vec3 Dir = normalize(vec3(uv,1.0));\n\n    Dir = vec3(DDRot(Dir.xz,Mouse.x*PI),Dir.y).xzy;\n    \n    Cam = vec3(DDRot(Cam.xz,Mouse.x*PI),Cam.y).xzy;\n    \n    vec3 col;\n    \n    HitInfo Hit = RayTrace(Cam,Dir);\n    if (Hit.DidHit) {\n         uint Seed = uint(iFrame);\n         col = Hit.Color;\n         col = clamp(col*(0.5+dot(-SunDir,Hit.Normal)/3.),0.,1.0);\n         HitInfo Shadow = RayTrace(Hit.HitPos,SunDir);\n         if (Shadow.DidHit==true){\n             col *= 0.7;\n         }\n    }\n    else {\n        col=SkyCol;\n        //if (Hit.Sd<0.1){col=vec3(0.);}//Free Edge detection\n    }\n\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4X3cRn","date":"1734694016","viewed":39,"name":"Raytracing zgvgnvbgqmeofbjhqeb","username":"12446GD","description":"e","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["e"],"hasliked":0,"parentid":"","parentname":""}}