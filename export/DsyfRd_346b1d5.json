{"ver":"0.1","info":{"id":"DsyfRd","date":"1698524883","viewed":42,"name":"basicLookAtCamera","username":"GabrielTheWalrus","description":"basicLookAtCamera","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float distPoint(vec3 ro, vec3 rd, vec3 p){\n    \n    return length(cross(p-ro, rd))/length(rd);\n\n}\n\nfloat drawPoint(vec3 ro, vec3 rd, vec3 pos){\n\n    float res = distPoint(ro, rd, pos);\n    \n    res = smoothstep(.05, .049999, res);\n    \n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float t = iTime;\n    \n    uv = uv*2.0 - 1.0f;\n    \n    //uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // Camera\n    \n    vec3 ro = vec3(3.*sin(t), 2., -3.*cos(t));\n    vec3 lookat = vec3(.0);\n    \n    vec3 f = normalize(lookat - ro);\n    vec3 r = normalize(cross(vec3(0., 1., 0.), f));\n    vec3 u = normalize(cross(f, r));\n    \n    float zoom = 2.;\n    \n    vec3 c = ro + f*zoom;\n    vec3 i = c + uv.x * r + uv.y * u;\n    \n    vec3 rd = i - ro;\n    \n    // End Camera\n    \n    float p = .0;\n\n    p += drawPoint(ro, rd, vec3(0.0, 0.0f, 0.)- vec3(.5f));\n    p += drawPoint(ro, rd, vec3(0.0, 0.0f, 1.)- vec3(.5f));\n    p += drawPoint(ro, rd, vec3(0.0, 1.0f, 0.)- vec3(.5f));\n    p += drawPoint(ro, rd, vec3(0.0, 1.0f, 1.)- vec3(.5f));\n    p += drawPoint(ro, rd, vec3(1.0, 0.0f, 0.)- vec3(.5f));\n    p += drawPoint(ro, rd, vec3(1.0, 0.0f, 1.)- vec3(.5f));\n    p += drawPoint(ro, rd, vec3(1.0, 1.0f, 0.)- vec3(.5f));\n    p += drawPoint(ro, rd, vec3(1.0, 1.0f, 1.)- vec3(.5f));\n    \n    fragColor = vec4(p);\n}","name":"Image","description":"","type":"image"}]}