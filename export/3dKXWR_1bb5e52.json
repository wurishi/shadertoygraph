{"ver":"0.1","info":{"id":"3dKXWR","date":"1573771259","viewed":239,"name":"[TWITCH] Keke Tribute","username":"Flopine","description":"A tribute to the AWESOME french artist keke flipnote : https://twitter.com/Kekeflipnote\nMade during a live twitch here : https://www.twitch.tv/flopine","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","dithering","keke","baguette","pigeon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n#define ITER 64.\n#define PI 3.141592\n#define time iTime\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\n// iq website https://iquilezles.org/articles/distfunctions\nfloat ellipse( vec3 p, vec3 r )\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\nfloat vcaps( vec3 p, float h, float r )\n{\n    p.y -= clamp( p.y, 0.0, h );\n    return length(p) - r;\n}\n\nfloat od (vec3 p, float d)\n{return dot(p, normalize(sign(p)))-d;}\n\n#define anim(t, sp, st) (fract(t*sp)*st*(1.-(fract(t*sp))))\n\nfloat head (vec3 p)\n{\n    float y = anim(time, 4.,3.);\n    float v =  vcaps(p-vec3(0.,y*0.2,0.), 0.4, 0.2);\n\n    return v;\n}\n\nfloat eyes (vec3 p)\n{\n    float y = anim(time, 4.,3.);\n    p.y -= 0.6;\n    p.z += 0.1;\n    p.x = abs(p.x)-0.15;\n\n    return length(p+vec3(0.,y*0.2,0.))-0.05;\n}\n\nfloat mouth (vec3 p)\n{\n    float y = anim(time, 4.,3.);\n    p.y -= 0.5;\n    p.z += 0.18;\n    return od (p+vec3(0.,y*0.2,0.), 0.05);\n}\n\nfloat body (vec3 p)\n{\n    p.y -=.5;\n    float y = anim(time,4.,3.);\n\n    float sy = 0.6+y;\n    float sxz = 1./sy;\n    return ellipse(p+vec3(0.,y*0.5,0.), vec3(0.5*sxz,0.5*sy,0.5*sxz));\n}\n\nfloat feets (vec3 p)\n{\n    p.y += 1.4;\n    p.x = abs(p.x)+0.2;\n    p.x -= anim(p.y,1., anim(time, 4., 18.))*0.2+.3;\n    return vcaps(p, 1.,0.05);\n}\n\nfloat baguette (vec3 p)\n{\n\n    float per = 0.6;\n    p.x = abs(p.x);\n    p.x -= 2.;\n    p.xz *= rot(time*5.);\n    vec3 pp = p;\n    p.z += 0.2;\n    p.y = mod(p.y, per)-per*0.5;\n    float c = length(p.yz)-(0.15-abs(p.x)*0.1);\n\n    p = pp;\n    p.y += 1.1;\n    return max(-c,vcaps(p,2.2, .2));\n}\n\nint mat_id;\nfloat SDF (vec3 p)\n{\n    float f = feets(p);\n    float b = body(p+vec3(0.,.45,0.));\n    float h = head(p);\n    float e = eyes(p);\n    float m = mouth(p);\n    float ba = baguette(p);\n\n    float d = min(min(e,m),min(f,min(h, b)));\n    d = min(d, ba);\n\n    if (d == f || d == m) mat_id = 1;\n    if (d == b || d == h) mat_id = 2;\n    if (d == e) mat_id = 3;\n    if (d == ba) mat_id = 4;\n\n    return d;\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.01, 0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nfloat lighting (vec3 n, vec3 l)\n{\n    return max(0.,dot(n, l));\n}\n\nfloat background (vec2 uv)\n{\n    float per = .9;\n\n    vec2 id = floor(uv/per);\n    uv = mod(uv,per)-per*0.5;\n    uv.x = abs(uv.x)-0.05;\n    uv *= rot(-PI/4.);\n\n    return step(length(uv*vec2(1.,0.5)),clamp(sin(length(id*2.)-time),0.05,0.15));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    vec3 ro = vec3(0.,0.,-4.),\n        p = ro,\n        rd = normalize(vec3(uv,1.)),\n        l = normalize(vec3(1.,2.,-3.)),\n        col = mix(vec3(0.97),vec3(.95,0.,0.),background(uv*8.));\n\n    float shad = 0.;\n    bool hit = false;\n\n    for (float i=0.; i<ITER;i++)\n    {\n        float d = SDF(p);\n        if (d<0.01)\n        {\n            hit = true;\n            shad = i/ITER;\n            break;\n        }\n\n        p += d*rd*0.5;\n    }\n\n    if (hit)\n    {\n        vec3 n = getnorm(p);\n        float light = floor(lighting(n, l)*3.)/3.;\n        if (mat_id == 1) col = mix(vec3(0.5,0.3,0.),vec3(0.8,0.8,0.),light);\n        if (mat_id == 2) col = mix(vec3(0.2,0.2,0.3),vec3(0.5,0.5,0.6),light);\n        if (mat_id == 3) col = vec3(0.); \n        if (mat_id == 4) col = mix(vec3(0.5,0.2,0.1),vec3(0.8,0.8,0.5),light);\n        col  *= vec3(1.-shad);\n    }\n\n    float dit = texture(iChannel0, fragCoord.xy/8.).r;\n\n    float detail = 4.;\n    col += dit/detail;\n    col = floor(col*detail)/detail;\n\n    fragColor = vec4(sqrt(col),1.);\n}","name":"Image","description":"","type":"image"}]}