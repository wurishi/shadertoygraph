{"ver":"0.1","info":{"id":"NtfSz7","date":"1625332303","viewed":102,"name":"Koch reflections","username":"conceptblend","description":"Exploration after implementing the Koch Snowflake KIFS from Art of Code on YouTube.\nhttps://youtu.be/il_Qg9AqQkE","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["koch","artofcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Modified based on learnings from Art of Code on YouTube.\n * https://youtu.be/il_Qg9AqQkE\n **/\n#define PI 3.14159\n\nvec2 N(float angle) {\n    return vec2(sin(angle), cos(angle));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    float recip = 1./iResolution.y;\n\n    vec3 col = vec3(0.);\n    \n    uv *= 1.05;\n    \n    // Reflection angle changes over time\n    float angle = 7./8.*PI;\n    vec2 n = N(angle);\n    \n    // Reflect x across y\n    uv.x = abs(uv.x);\n    // Move up to adjust for reflection angle `n`\n    uv.y += tan(angle) * .5;\n    \n    // Move the reflection origin to the right\n    float d = dot(uv - vec2(0.5, 0), n);\n    // Calculate the distance from `uv` to the reflection line\n    uv -= n * max(0., d) * 2.;\n    \n    // Draw the reflect line in red\n    //col.r += smoothstep(.01, .0, abs(d));\n    \n    // Offset X to counter the increment in the first\n    // iteration of the loop.\n    uv.x += .5;\n    \n    n = N(mod(-iTime * 0.06, 1.00000000) * PI);\n        \n    float scale = 1.;\n    for (int i=0; i<4; i++) {\n        uv *= 3.;\n        scale *= 3.;\n        uv.x -= 1.5;  \n\n        uv.x = abs(uv.x);\n        uv.x -= .5;\n        uv -= n * min(0., dot(uv, n)) * 2.;\n        // paint the fold lines\n        col.rgb += smoothstep(4.*recip, .0, abs(dot(uv,n))/scale);\n    }\n\n    d = length(uv - vec2(clamp(uv.x, -1., 1.), 0.));\n    \n    \n    // Fill a boundary around the Koch\n    //col += smoothstep(12.5*recip, 12.25*recip, d/scale);\n    //col -= smoothstep(8.5*recip, 8.25*recip, d/scale);\n    \n    // Paint the Koch line\n    col += smoothstep(4.*recip, .0, d/scale);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}