{"ver":"0.1","info":{"id":"4X2GRd","date":"1719444071","viewed":56,"name":"Game of life (by 5weetdev)","username":"5weetdev","description":"The implementation of Conway's Game of Life","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["gameoflife","cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel0, uv).rgb;\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// RULES:\n// Any live cell with fewer than two live neighbors dies, as if by underpopulation.\n// Any live cell with two or three live neighbors lives on to the next generation.\n// Any live cell with more than three live neighbors dies, as if by overpopulation.\n// Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n\n\nvoid SetDie(inout vec3 col){\n    col = vec3(DEAD);\n}\n\nvoid SetLive(inout vec3 col){\n    col = vec3(LIVE);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 pix = 1.0 / iResolution.xy;\n\n    vec3 col = texture(iChannel0, uv).rgb;\n\n    int neighbours = 0;\n    vec2 offsets[8] = vec2[](vec2(-pix.x, -pix.y), vec2(0.0, -pix.y), vec2(pix.x, -pix.y), vec2(-pix.x, 0.0), vec2(pix.x, 0.0), vec2(-pix.x, pix.y), vec2(0.0, pix.y), vec2(pix.x, pix.y));\n\n    // Blur gausian\n    float kernel[8] = float[](\n        0.0625, 0.125,  0.0625,\n        0.125, 0.125,\n        0.0625, 0.125,  0.0625\n    );\n    float kernelCenter = 0.25;\n\n    for(int i = 0; i < 8; i++) {\n        vec3 neighbor = texture(iChannel0, uv + offsets[i]).rgb;\n        if(neighbor.x >= LIVE) {\n            neighbours += 1;\n        }\n    }\n\n    if(col.x >= LIVE) {\n        if(neighbours < 2) {\n            SetDie(col);\n        } else if(neighbours > 3) {\n            SetDie(col);\n        }\n    } else {\n        if(neighbours == 3) {\n            SetLive(col);\n        }else{\n            vec3 smoothed = col * kernelCenter;\n            for(int i = 0; i < 8; i++) {\n                vec3 neighbor = texture(iChannel0, uv + offsets[i]).rgb;\n                smoothed += neighbor * kernel[i];\n            }\n            smoothed = clamp(smoothed, vec3(0.0), vec3(0.5));\n            col = smoothed;\n            col -= 0.003;\n        }\n    }\n\n    if(distance(fragCoord, iMouse.xy) < BRUSH) {\n        SetLive(col);\n    }\n\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define BRUSH 3.0\n#define LIVE 1.0\n#define DEAD 0.8","name":"Common","description":"","type":"common"}]}