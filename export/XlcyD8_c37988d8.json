{"ver":"0.1","info":{"id":"XlcyD8","date":"1532337391","viewed":7868,"name":"is_prime(X xor Y)","username":"python273","description":"https://habr.com/post/417861/\n\nGaussian Blur source: https://www.shadertoy.com/view/XdfGDH","likes":61,"published":3,"flags":32,"usePreview":0,"tags":["pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 c = texture(iChannel0, fragCoord.xy / iResolution.xy).rgb;\n\t\n    if (c.b == 0.0) {\n        const int mSize = 8;\n        const int kSize = (mSize-1)/2;\n        float kernel[mSize];\n        vec3 final_colour = vec3(0.0);\n\n        //create the 1-D kernel\n        float sigma = 8.0;\n        float Z = 0.0;\n        for (int j = 0; j <= kSize; ++j)\n        {\n            kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n        }\n\n        //get the normalization factor (as the gaussian has been clamped)\n        for (int j = 0; j < mSize; ++j)\n        {\n            Z += kernel[j];\n        }\n\n        //read out the texels\n        for (int i=-kSize; i <= kSize; ++i)\n        {\n            for (int j=-kSize; j <= kSize; ++j)\n            {\n                final_colour += kernel[kSize+j]*kernel[kSize+i]*texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iResolution.xy).rgb;\n\n            }\n        }\n\n\n        fragColor = vec4(final_colour/(Z*Z)*0.8, 1.0);\n    } else {\n        fragColor = vec4(c, 1.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float is_prime(int num)\n{\n     if (num <= 1) return 0.0;\n     if (num % 2 == 0 && num > 2) return 0.0;\n\n     for(int i = 3; i < int(floor(sqrt(float(num)))); i+= 2)\n     {\n         if (num % i == 0)\n             return 0.0;\n     }\n     return 1.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int temp = (\n        int(fragCoord.x + iTime * 80.0 + iMouse.x * 10.0)\n        ^  // try & |\n        int(fragCoord.y + iTime * 80.0 + iMouse.y * 10.0)\n    );\n\n    float p = is_prime(temp);\n\n    fragColor = vec4(p / 0.4, p / 1.5, p, 1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}