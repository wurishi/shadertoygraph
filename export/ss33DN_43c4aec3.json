{"ver":"0.1","info":{"id":"ss33DN","date":"1629834234","viewed":197,"name":"Geometric Heart","username":"Flopine","description":"An other lunch doodling :D ","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","cube","animation","heart","isometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings and FabriceNeyret for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU (2.*PI)\n\n#define time iTime\n#define frt(sp,off) fract((time+off)*sp)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define crep(p,c,l) p-=c*clamp(round(p/c),-l,l)\n#define mo(p,d) p=abs(p)-d;if(p.y>p.x)p=p.yx\n\n\nstruct obj{\n    float d;\n    vec3 sha;\n    vec3 li;\n};\n\nobj minobj (obj a, obj b)\n{if (a.d<b.d)return a; else return b;}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat sc (vec3 p, float d)\n{\n    p = abs(p);\n    p=max(p,p.yzx);\n    return min(p.x,min(p.y,p.z))-d;\n}\n\nobj prim1 (vec3 p)\n{\n    float per = 2.;\n    vec3 id = round(p/2.);\n    crep(p,per,1.);\n    float d = max(-sc(p,per*.3),box(p,vec3(per*.4)));\n    obj scene = obj(d,vec3(0.1,0.,0.),vec3(1.,0.1,0.1));\n    \n    float size = clamp(sin(length(id)+frt(1.,0.)*TAU)+1.9,1.,1.2);\n    p *= size;\n    d = max(sc(p,per*.2),box(p,vec3(per*.4)))/size;\n    scene = minobj(scene, obj(d,vec3(0.1,0.,0.03),vec3(0.9,0.9,0.95)));\n    \n    return scene;\n}\n\nobj SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n    p.y += 1.5;\n    \n    \n    obj scene = prim1(p);\n    scene = minobj(scene,prim1(p-vec3(0.,0.,6.)));\n    scene = minobj(scene,prim1(p-vec3(6.,0.,0.)));\n    return scene;\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.01,0.);\n    return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(uv*6.,-30.),rd=vec3(0.,0.,1.),p=ro,\n    col=vec3(0.,0.,0.008),l=normalize(vec3(2.,2.,-2.));\n\n    bool hit=false; obj O;\n    for (float i=0.;i<100.;i++)\n    {\n        O = SDF(p);\n        if (O.d<0.001)\n        {\n            hit=true;break;\n        }\n        p += O.d*rd;\n    }\n\n    if (hit)\n    {\n        float light = max(dot(getnorm(p),l),0.);\n        col = mix(O.sha, O.li, light);\n    }\n\n    // Output to screen\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}