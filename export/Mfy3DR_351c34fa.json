{"ver":"0.1","info":{"id":"Mfy3DR","date":"1712603541","viewed":131,"name":"MIP map chain UV","username":"Zavie","description":"Just a very quick shader for MIP mapping chain generation and other pyramid based post-processing.\nNote: it is currently incomplete as it's not very useful without a fonction to convert coordinates between the different levels.","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["uv","mipmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n// This shader is a quick test at splitting the available renderbuffer\n// into MIP chain sub-buffers.\n//\n\n#define DIAGONAL 0\n#define SPIRAL 1\n#define MODE SPIRAL\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    int stop = 10;\n    while (true)\n    {\n#if MODE == SPIRAL\n        uv = vec2(uv.y, 1.0 - uv.x * 2.0);\n#elif MODE == DIAGONAL\n        uv = vec2(1.0 - uv.y, 1.0 - 2.0 * uv.x);\n#endif\n\n        if (uv.y < 0.)\n        {\n            uv.y += 1.;\n            break;\n        }\n        if (stop-- < 0) break;\n    }\n\n    float dUV = length(fwidth(uv));\n#if MODE == SPIRAL\n    float d = length(uv - vec2(0.0, 1.0));\n    float pattern = 1.0 - smoothstep(-dUV, dUV, abs(d - 1.) - dUV);\n#elif MODE == DIAGONAL\n    float d = uv.y + 2.0 * uv.x - 2.0;\n    float pattern = 1.0 - smoothstep(-dUV, dUV, abs(d) - dUV);\n#endif\n    vec3 color = mix(vec3(uv, 0.0), vec3(1.0), pattern);\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}