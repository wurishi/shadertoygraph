{"ver":"0.1","info":{"id":"4tjfWz","date":"1515371156","viewed":169,"name":"Sin Terrain","username":"Brendan","description":"A ray-marched terrain based on a sin wave with shadows and \"phong shading\" (in quotes coz there's no specular shading). ","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","terrain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//material parameters\nconst float ks = 0.0;\nconst float kd = 1.0;\nconst float ka = 1.0;\nconst float al = 20.0;\n//light parameters\nconst float ia = 0.2;\nconst vec3 lm = normalize(vec3(3,1,0));\nconst float id = 0.6;\nconst float is = 1.0;\n\nfloat t = 0.0;\n\nfloat rand2 (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = rand2(i);\n    float b = rand2(i + vec2(1.0, 0.0));\n    float c = rand2(i + vec2(0.0, 1.0));\n    float d = rand2(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    vec2 u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm(vec2 p){\n\tfloat f = 0.0;\n    f+=0.5*noise(p); p*=2.03;\n    f+=0.25*noise(p); p*=2.03;\n    f+=0.125*noise(p); p*=2.03;\n    f+=0.0625*noise(p); p*=2.03;\n    f+=0.03125*noise(p); p*=2.03;\n    f+=0.015625*noise(p); p*=2.03;\n    f/=0.984325;\n    return f;\n}\n\nmat2 rotate(float p){\n\treturn mat2(\n    \tcos(p),sin(p),\n        -sin(p),cos(p)\n    );\n}\n\n\nfloat f(float x, float z){\n\treturn sin(x)*sin(z);\n}\n\nfloat castRay(vec3 o, vec3 r, float mint, float maxt, float delt){\n    float lh = 0.0;\n    float ly = 0.0;\n    for(t = mint; t<maxt; t+=delt){\n    \tvec3 p = o+r*t;\n        float h = f(p.x,p.z);\n        if(p.y<h){\n        \treturn t-delt + delt*(lh-ly)/(p.y-ly-h+lh);\n        }\n        lh = h;\n        ly=p.y;\n    }\n    return t;\n}\n\nvec3 sky(vec2 p){\n\tmat2 m=rotate(fbm(p+iTime));\n    \n    p*=m;\n    \n    float n=fbm(p);\n    \n    n=abs(n);\n    \n    //n = pow(n,2.0);\n    \n    vec3 fc = vec3(n);\n    \n    fc*=vec3(0.1,0.6,0.8);\n    \n    return fc;\n}\n\n/*vec3 getNormal( vec3 p )\n{\n    float eps = 0.01;\n    vec3 n = vec3( f(p.x-eps,p.z) - f(p.x+eps,p.z),\n                         2.0f*eps,\n                         f(p.x,p.z-eps) - f(p.x,p.z+eps) );\n    return normalize( n );\n}\n*/\nvec3 phong(vec3 n, vec3 v){\n    \n    vec3 rm = 2.0*dot(lm,n)*n-lm;\n    \n    float a = ka*ia;\n    float d = kd*clamp(dot(lm,n),0.0,1.1)*id;\n    float s = 0.0; //(no specular in this scene)ks*pow(clamp(dot(rm,v),0.0,1.0),al)*is;\n    \n    return vec3(a,d,s);\n        \n   }\n\nvec3 calcNormal(vec3 p){\n\tfloat dx=sin(p.z)*cos(p.x);\n    float dz=sin(p.x)*cos(p.z);\n    \n    vec3 n = vec3(dx,1,dz);\n    return normalize(n);\n}\n/*\nfloat calcShadow(vec3 o){\n    float maxt=10.0;\n    float delt=0.4;\n    vec3 r = lm;\n    r.x*=-1.0;\n    for(float t=0.1; t<maxt;t+=delt){\n    \tvec3 p = o+r*t;\n        float h = f(p.x,p.z);\n        if(p.y<h){\n        \treturn 0.0;\n        }\n    }\n    return 1.0;\n}\n*/\n\nvec3 terrain(vec3 p,vec3 r){\n\tvec3 n = calcNormal(p);\n    \n    vec3 sh = phong(n,r);\n    \n    //float s = calcShadow(p);\n    //No shadows because the lighting is soft\n    \n    sh*=vec3(1,1,1);\n    \n    float ip = dot(sh,vec3(1));\n    \n    return (ip*texture(iChannel0,p.xz)).xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv = uv * 2.0 - 1.0;\n\n    uv.x*= iResolution.x/iResolution.y;\n    \n    vec3 r = normalize(vec3(uv,2));\n    \n    vec3 o = vec3(1.0,f(1.0,iTime)+0.6,iTime);\n    \n    vec3 fc;\n    \n    float t = castRay(o,r,0.1,20.0,0.2);\n    \n    vec3 pos = o+r*t;\n    \n    if(!(t>20.0)){\n    \t\n        fc = terrain(pos,r);\n    }else{\n        \n        fc = sky(uv);\n    \n    }\n    \n    float f = length(uv);\n    \n    f=smoothstep(2.5,0.8,f);\n    \n    fc*=f;\n    \n    fc*=1.3;\n    \n\tfragColor = vec4(fc,1.0);\n}","name":"Image","description":"","type":"image"}]}