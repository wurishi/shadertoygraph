{"ver":"0.1","info":{"id":"wllBW4","date":"1596788055","viewed":137,"name":"theyaremanycolors 4 - green","username":"thefox231","description":"i like this one a lot","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["theyaremanycolors"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define angle 0.9\n#define scale 8.0\n#define scaleFg 1.5\n\n#define alpha 1.0 - fract(iTime * 7.0)\n\nconst vec3 colFg = vec3(0.0, 0.843, 0.0);\n\nvec2 rotateVec(vec2 v, float a){\n  float s = sin(a);\n  float c = cos(a);\n  mat2 m = mat2(c, -s, s, c);\n  return m * (v - .5) + .5;\n}\n\nfloat hash(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec3 lines(vec2 uv) {\n    bool mirror = false;\n    \n    uv = rotateVec(uv, angle);\n    uv += iTime * 0.3; // Offset lines\n    \n    if (fract(uv.x * scale/2.0) > 0.5) {\n    \tuv.x += uv.y;   // Make it diagonal\n    } else {\n        mirror = true;\n        uv.x -= uv.y;   // Make it diagonal\n    }\n    uv *= scale;     // Upscale\n    uv = fract(uv); // Fraction\n    \n    vec3 col = vec3(0.0, 0.0, 0.0); // Background color\n        \n    if (mirror) {\n        col = mix(colFg, col, step(uv.x, 0.5)); // Line color\n    } else {\n    \tcol = mix(col, colFg, step(uv.x, 0.5)); // Line color\n    }\n    \n    return col * alpha;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.y;\n    \n    float angleOffset = hash(floor(iTime * 0.7)) * 3.14;\n    \n    fragColor = vec4(lines(rotateVec(uv, angleOffset)) + lines(rotateVec(uv * scaleFg + 0.2, angle * 2.0 + angleOffset)) * 0.2, 1.0);\n}","name":"Image","description":"","type":"image"}]}