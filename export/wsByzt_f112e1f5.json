{"ver":"0.1","info":{"id":"wsByzt","date":"1587145663","viewed":443,"name":"Color Circle SmoothStep","username":"nickcody","description":"Click and drag to four corners: x-axis controls width of circle edge, y-axis controls blend.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["circle","geometry","smoothstep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 white = vec3(1., 1., 1.);\nconst vec3 black = vec3(0., 0., 0.);\nconst float EDGE_SCALE = .02;\n\n// circleTest\n//\n// coord      - pixel to test\n// center     - center of circle\n// radius     - radius of circle\n// width      - thickness of circle line\n// pixelWidth - blendiness\nvec3 circleTest(vec2 coord, vec2 center, float radius, float width, float pixelWidth) {\n    float dist_to_center = sqrt(pow(coord.x - center.x, 2.) + pow(coord.y - center.y, 2.));\n    float delta = dist_to_center-radius;\n\n    // From shadertoy default shader\n    vec2 uv = gl_FragCoord.xy/iResolution.xy;\n    vec3 inside = .5 + .5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float blend = smoothstep(0., pixelWidth, abs(delta) - width);\n    \n    if (delta  < 0.) {\n    \t// rgb -> white (inside  edge)\n        return mix(white, inside, blend);\n    } else if (delta  > 0.) {\n    \t// white -> black (outside edge)\n        return mix(white, black, blend);\n    } else {\n        // can't decide\n        return white;\n    }\n        \n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord) {\n\tvec2 center = iResolution.xy/2.;\n    float pixelWidth;\n    float width;\n    \n    if (iMouse.xy == vec2(0)) {\n        pixelWidth = width = 1.;\n    } else {\n        pixelWidth = EDGE_SCALE * distance(iMouse.y, 0.);\n        width = EDGE_SCALE * distance(iMouse.x, 0.);\n    }\n    \n    vec3 c = circleTest(gl_FragCoord.xy, center, center.y/2., width, pixelWidth);\n\t\n    out_color = vec4(c, 1.);\n}","name":"Image","description":"","type":"image"}]}