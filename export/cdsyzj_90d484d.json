{"ver":"0.1","info":{"id":"cdsyzj","date":"1686993048","viewed":77,"name":"PatternSquare","username":"samsim","description":"Working on patterns","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","pattern","mosaic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( float t ) {\n     vec3 a = vec3(0.5,0.5,0.5);\n     vec3 b = vec3(0.5,0.5,0.5);\n     vec3 c = vec3(-3.142, 1.000, 1.000);\n     vec3 d = vec3(-2.022, 0.618, 0.667);\n     return a + b * cos(6.28318 * (c * t + d));\n\n}\n\nmat2 rotationMatrix(float angle)\n{\n\tangle *= 3.14 / 180.0;\n    float s=sin(angle), c=cos(angle);\n    return mat2( c, -s, s, c );\n}\n\n#define UV_ORIGIN 0.5\n#define ZOOM 1.0\n#define SPEED 10.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 nextColor = uv*rotationMatrix( SPEED * iTime ) * ZOOM;;\n    \n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 4.0; i++) {\n        uv = fract(uv * 1.3) - 0.5;\n\n        float d = length(uv) * exp(-length(nextColor)*sin(iTime)*1.3);\n        nextColor =nextColor *i ;\n        vec3 col = palette(length(nextColor) + i * .8 - iTime*.4);\n\n        d = sin(d*8. - iTime)/8.;\n        d = abs(d)*.8;\n        d = pow(0.01 / d, 2.2);\n\n        finalColor += col * d;\n    }\n        \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}