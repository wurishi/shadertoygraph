{"ver":"0.1","info":{"id":"wt23Rt","date":"1560789816","viewed":5435,"name":"Color conversions","username":"anastadunbar","description":"Different color conversion functions that I've shortened. I'm not so sure about the sRGB. And CMYK is unfinished I guess.","likes":29,"published":1,"flags":0,"usePreview":0,"tags":["rgb","hsv","lab","hsl","ycbcr"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Hue to RGB (red, green, blue).\n//Source: https://github.com/tobspr/GLSL-Color-Spaces/blob/master/ColorSpaces.inc.glsl\n#ifndef saturate\n#define saturate(v) clamp(v,0.,1.)\n//      clamp(v,0.,1.)\n#endif\nvec3 hue2rgb(float hue){\n\thue=fract(hue);\n\treturn saturate(vec3(\n\t\tabs(hue*6.-3.)-1.,\n\t\t2.-abs(hue*6.-2.),\n\t\t2.-abs(hue*6.-4.)\n\t));\n}\n\n//HSV (hue, saturation, value) to RGB.\n//Sources: https://gist.github.com/yiwenl/745bfea7f04c456e0101, https://gist.github.com/sugi-cho/6a01cae436acddd72bdf\nvec3 hsv2rgb(vec3 c){\n\tvec4 K=vec4(1.,2./3.,1./3.,3.);\n\treturn c.z*mix(K.xxx,saturate(abs(fract(c.x+K.xyz)*6.-K.w)-K.x),c.y);\n}\n\n//RGB to HSV.\n//Source: https://gist.github.com/yiwenl/745bfea7f04c456e0101\nvec3 rgb2hsv(vec3 c) {\n\tfloat cMax=max(max(c.r,c.g),c.b),\n\t      cMin=min(min(c.r,c.g),c.b),\n\t      delta=cMax-cMin;\n\tvec3 hsv=vec3(0.,0.,cMax);\n\tif(cMax>cMin){\n\t\thsv.y=delta/cMax;\n\t\tif(c.r==cMax){\n\t\t\thsv.x=(c.g-c.b)/delta;\n\t\t}else if(c.g==cMax){\n\t\t\thsv.x=2.+(c.b-c.r)/delta;\n\t\t}else{\n\t\t\thsv.x=4.+(c.r-c.g)/delta;\n\t\t}\n\t\thsv.x=fract(hsv.x/6.);\n\t}\n\treturn hsv;\n}\n//Source: https://gist.github.com/sugi-cho/6a01cae436acddd72bdf\nvec3 rgb2hsv_2(vec3 c){\n\tvec4 K=vec4(0.,-1./3.,2./3.,-1.),\n\t     p=mix(vec4(c.bg ,K.wz),vec4(c.gb,K.xy ),step(c.b,c.g)),\n\t     q=mix(vec4(p.xyw,c.r ),vec4(c.r ,p.yzx),step(p.x,c.r));\n\tfloat d=q.x-min(q.w,q.y),\n\t      e=1e-10;\n\treturn vec3(abs(q.z+(q.w-q.y)/(6.*d+e)),d/(q.x+e),q.x);\n}\n\n//RGB to HSL (hue, saturation, lightness/luminance).\n//Source: https://gist.github.com/yiwenl/745bfea7f04c456e0101\nvec3 rgb2hsl(vec3 c){\n\tfloat cMin=min(min(c.r,c.g),c.b),\n\t      cMax=max(max(c.r,c.g),c.b),\n\t      delta=cMax-cMin;\n\tvec3 hsl=vec3(0.,0.,(cMax+cMin)/2.);\n\tif(delta!=0.0){ //If it has chroma and isn't gray.\n\t\tif(hsl.z<.5){\n\t\t\thsl.y=delta/(cMax+cMin); //Saturation.\n\t\t}else{\n\t\t\thsl.y=delta/(2.-cMax-cMin); //Saturation.\n\t\t}\n\t\tfloat deltaR=(((cMax-c.r)/6.)+(delta/2.))/delta,\n\t\t      deltaG=(((cMax-c.g)/6.)+(delta/2.))/delta,\n\t\t      deltaB=(((cMax-c.b)/6.)+(delta/2.))/delta;\n\t\t//Hue.\n\t\tif(c.r==cMax){\n\t\t\thsl.x=deltaB-deltaG;\n\t\t}else if(c.g==cMax){\n\t\t\thsl.x=(1./3.)+deltaR-deltaB;\n\t\t}else{ //if(c.b==cMax){\n\t\t\thsl.x=(2./3.)+deltaG-deltaR;\n\t\t}\n\t\thsl.x=fract(hsl.x);\n\t}\n\treturn hsl;\n}\n\n//HSL to RGB.\n//Source: https://github.com/Jam3/glsl-hsl2rgb/blob/master/index.glsl\n/*float hueRamp(float a,float b,float hue){\n\thue=fract(hue);\n\tfloat o=a;\n\tif((6.*hue)<1.){\n\t\to=a+(b-a)*6.*hue;\n\t}else if((2.*hue)<1.){\n\t\to=b;\n\t}else if((3.*hue)<2.){\n\t\to=a+(b-a)*((2./3.)-hue)*6.;\n\t}\n\treturn o;\n}*/\nvec3 hsl2rgb(vec3 hsl){\n\tif(hsl.y==0.){\n\t\treturn vec3(hsl.z); //Luminance.\n\t}else{\n\t\tfloat b;\n\t\tif(hsl.z<.5){\n\t\t\tb=hsl.z*(1.+hsl.y);\n\t\t}else{\n\t\t\tb=hsl.z+hsl.y-hsl.y*hsl.z;\n\t\t}\n\t\tfloat a=2.*hsl.z-b;\n\t\treturn a+hue2rgb(hsl.x)*(b-a);\n\t\t/*vec3(\n\t\t\thueRamp(a,b,hsl.x+(1./3.)),\n\t\t\thueRamp(a,b,hsl.x),\n\t\t\thueRamp(a,b,hsl.x-(1./3.))\n\t\t);*/\n\t}\n}\n\n//RGB to YCbCr, ranges [0, 1].\n//Source: https://github.com/tobspr/GLSL-Color-Spaces/blob/master/ColorSpaces.inc.glsl\nvec3 rgb2ycbcr(vec3 c){\n\tfloat y=.299*c.r+.587*c.g+.114*c.b;\n\treturn vec3(y,(c.b-y)*.565,(c.r-y)*.713);\n}\n\n//YCbCr to RGB.\nvec3 ycbcr2rgb(vec3 yuv){\n\treturn vec3(\n\t\tyuv.x+1.403*yuv.z,\n\t\tyuv.x- .344*yuv.y-.714*yuv.z,\n\t\tyuv.x+1.770*yuv.y\n\t);\n}\n\n//CIE L*a*b* (CIELAB, L* for lightness, a* from green to red, b* from blue to yellow)\n//Source: https://gist.github.com/mattatz/44f081cac87e2f7c8980 (HLSL)\nvec3 rgb2xyz(vec3 c){\n\tvec3 tmp=vec3(\n\t\t(c.r>.04045)?pow((c.r+.055)/1.055,2.4):c.r/12.92,\n\t\t(c.g>.04045)?pow((c.g+.055)/1.055,2.4):c.g/12.92,\n\t\t(c.b>.04045)?pow((c.b+.055)/1.055,2.4):c.b/12.92\n\t);\n\tmat3 mat=mat3(\n\t\t.4124,.3576,.1805,\n\t\t.2126,.7152,.0722,\n\t\t.0193,.1192,.9505\n\t);\n\treturn 100.*(tmp*mat);\n}\nvec3 xyz2lab(vec3 c){\n\tvec3 n=c/vec3(95.047,100.,108.883),\n\t     v=vec3(\n\t\t(n.x>.008856)?pow(n.x,1./3.):(7.787*n.x)+(16./116.),\n\t\t(n.y>.008856)?pow(n.y,1./3.):(7.787*n.y)+(16./116.),\n\t\t(n.z>.008856)?pow(n.z,1./3.):(7.787*n.z)+(16./116.)\n\t);\n\treturn vec3((116.*v.y)-16.,500.*(v.x-v.y),200.*(v.y-v.z));\n}\nvec3 rgb2lab(vec3 c){\n\tvec3 lab=xyz2lab(rgb2xyz(c));\n\treturn vec3(lab.x/100.,.5+.5*(lab.y/127.),.5+.5*(lab.z/127.));\n}\nvec3 lab2xyz(vec3 c){\n\tfloat fy=(c.x+16.)/116.,\n\t      fx=c.y/500.+fy,\n\t      fz=fy-c.z/200.;\n\treturn vec3(\n\t\t 95.047*((fx>.206897)?fx*fx*fx:(fx-16./116.)/7.787),\n\t\t100.   *((fy>.206897)?fy*fy*fy:(fy-16./116.)/7.787),\n\t\t108.883*((fz>.206897)?fz*fz*fz:(fz-16./116.)/7.787)\n\t);\n}\nvec3 xyz2rgb(vec3 c){\n\tmat3 mat=mat3(\n\t\t3.2406,-1.5372,-.4986,\n\t\t-.9689, 1.8758, .0415,\n\t\t .0557, -.2040,1.0570\n\t);\n\tvec3 v=(c/100.0)*mat,\n\t     r=vec3(\n\t\t(v.r>.0031308)?((1.055*pow(v.r,(1./2.4)))-.055):12.92*v.r,\n\t\t(v.g>.0031308)?((1.055*pow(v.g,(1./2.4)))-.055):12.92*v.g,\n\t\t(v.b>.0031308)?((1.055*pow(v.b,(1./2.4)))-.055):12.92*v.b\n\t);\n\treturn r;\n}\nvec3 lab2rgb(vec3 c){return xyz2rgb(lab2xyz(vec3(100.*c.x,2.*127.*(c.y-.5),2.*127.*(c.z-.5))));}\n\n//RGB to sRGB (standard Red Green Blue).\n//Source: https://github.com/tobspr/GLSL-Color-Spaces/blob/master/ColorSpaces.inc.glsl\nconst float SRGB_ALPHA=.055;\nfloat linear2srgb(float x){\n\tif(x<=.0031308){\n\t\treturn 12.92*x;\n\t}else{\n\t\treturn(1.+SRGB_ALPHA)*pow(x,1./2.4)-SRGB_ALPHA;\n\t}\n}\nvec3 rgb2srgb(vec3 c){\n\treturn vec3(\n\t\tlinear2srgb(c.r),\n\t\tlinear2srgb(c.g),\n\t\tlinear2srgb(c.b)\n\t);\n}\n//sRGB to RGB.\nfloat srgb2linear(float x) {\n\tif(x<=.04045){\n\t\treturn x/12.92;\n\t}else{\n\t\treturn pow((x+SRGB_ALPHA)/(1.+SRGB_ALPHA),2.4);\n\t}\n}\nvec3 srgb2rgb(vec3 c){\n\treturn vec3(\n\t\tsrgb2linear(c.r),\n\t\tsrgb2linear(c.g),\n\t\tsrgb2linear(c.b)\n\t);\n}\n\n//XYZ to CIE 1931 Yxy color space (luma (Y) along with x and y chromaticity), I found that Photoshop used this.\nvec3 xyz2yxy(vec3 c){\n\tfloat s=c.x+c.y+c.z;\n\treturn vec3(c.y,c.x/s,c.y/s); //Blue's within s.\n}\nvec3 yxy2xyz(vec3 c){\n\tfloat x=c.x*(c.y/c.z); //Y*(x/y)\n\treturn vec3(x,c.x,(x/c.y)-x-c.x); //(X,Y,(X/x)-X-Y)\n}\nvec3 rgb2yxy(vec3 c){return xyz2yxy(rgb2xyz(c));}\nvec3 yxy2rgb(vec3 c){return xyz2rgb(yxy2xyz(c));}\n\n//RGB to CMYK (cyan, magenta, yellow, key).\nvec4 rgb2cmyk(vec3 c){\n\tfloat k=1.-max(max(c.r,c.g),c.b);\n\treturn vec4(\n\t\t(1.-c.r-k)/(1.-k),\n\t\t(1.-c.g-k)/(1.-k),\n\t\t(1.-c.b-k)/(1.-k),\n\t\tk\n\t);\n}\n//CMYK to RGB.\nvec3 cmyk2rgb(vec4 c){\n\treturn vec3(\n\t\t(1.-c.x)*(1.-c.w),\n\t\t(1.-c.y)*(1.-c.w),\n\t\t(1.-c.z)*(1.-c.w)\n\t);\n}\nvec3 inkColors[18]=vec3[]( //SWOP (Coated), RGB and Yxy.\n\tvec3(0.,1.,1.),   vec3(26.25,.1673,.2328), //C\n\tvec3(1.,0.,1.),   vec3(14.5,.4845,.2396),  //M\n\tvec3(1.,1.,0.),   vec3(71.2,.4357,.5013),  //Y\n\tvec3(1.,0.,0.),   vec3(14.09,.6075,.3191), //MY\n\tvec3(0.,1.,0.),   vec3(19.25,.2271,.5513), //CY\n\tvec3(0.,0.,1.),   vec3(2.98,.2052,.1245),  //CM\n\tvec3(.25,.25,.25),vec3(2.79,.3227,.2962),  //CMY\n\tvec3(1.,1.,1.),   vec3(83.02,.3149,.3321), //W\n\tvec3(0.,0.,0.),   vec3(.82,.3202,.3241)    //K\n);\n//TODO: Look at SWOP 2006 ICC Profile.\n//vec3 pal[]=vec3[](vec3(0.,.5765,.8275),vec3(.8,0.05,.4196),vec3(1.,.9451,.0471),vec3(.0784));\nvec3 cmyk2rgb_pal(vec4 c){ //This might be an incorrect way of blending.\n\t/*return saturate((1.-(\n\t\t(c.x*(1.-vec3(0.,.5765,.8275)))+\n\t\t(c.y*(1.-vec3(.8,0.05,.4196)))+\n\t\t(c.z*(1.-vec3(1.,.9451,.0471)))\n\t))*(1.-(c.w*.9216)));*/\n\treturn\n\t\tmix(vec3(1.),vec3(0.,.5765,.8275),c.x)*\n\t\tmix(vec3(1.),vec3(.8,0.05,.4196),c.y)*\n\t\tmix(vec3(1.),vec3(1.,.9451,.0471),c.z)*\n\t\tmix(1.,.0784,c.w);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    vec2 uv=fragCoord/iResolution.xy;\n    vec3 col=hsl2rgb(vec3(uv.x,1.,uv.y));\n\tcol=cmyk2rgb_pal(rgb2cmyk(col));\n    col=rgb2lab(col);\n    col.g+=cos(iTime+uv.x)*.05;\n    col.b+=sin(iTime+uv.y)*.05;\n    col=lab2rgb(col);\n    fragColor=vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}