{"ver":"0.1","info":{"id":"7t2GW1","date":"1623858039","viewed":124,"name":"Dorothy","username":"SnoopethDuckDuck","description":"Experiment using CA (sort of) with other cool 2D stuff","likes":9,"published":1,"flags":48,"usePreview":0,"tags":["cellularautomata"],"hasliked":0,"parentid":"ssBXDy","parentname":"Interactive automata"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code forked from Inigo Quilez's game of life shader\n// https://www.shadertoy.com/view/XstGRf\n// Reset code stolen from somewhere else - sorry!\n// (Press R to reset shader)\n// + thanks Fabrice for the improvements\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nfragColor.rgb = vec3[] ( \n                vec3(34,  32, 52),\n                vec3(69,  40, 60),\n                vec3(172, 50, 50),\n                vec3(223,113, 38),\n                vec3(255,182, 45),\n                vec3(251,242, 54),\n                vec3(255)) \n[ min( 7, int( 42. *  texelFetch( iChannel0, ivec2(fragCoord), 0 ).x * 0.15) ) ] / 255.;\n\n\n\n//fragColor = vec4( 1. - step(3. * texelFetch( iChannel0, ivec2(fragCoord), 0 ).x ,0.2));\n/*\nfloat x = 6. *  texelFetch( iChannel0, ivec2(fragCoord), 0 ).x;\nx = min(x,1.);\nvec3 col = vec3(34.,32.,52.) / 255.;\nvec3 col2 = vec3(69.,40.,60.) / 255.;\nvec3 col3 = vec3(172.,50.,50.) / 255.;\nvec3 col4 = vec3(223.,113.,38.) / 255.;\nvec3 col5 = vec3(255.,182.,45.) / 255.;\nvec3 col6 = vec3(251.,242.,54.) / 255.;\n\n//vec3 col6 = vec3(1.);\nfloat m = 1. / 7.;\nif (x < m)\nfragColor = vec4(col,1.);\nelse if (x < 2. * m)\nfragColor = vec4(col2,1.);\nelse if (x < 3. * m)\nfragColor = vec4(col3,1.);\nelse if (x < 4. * m)\nfragColor = vec4(col4,1.);\nelse if (x < 5. * m)\nfragColor = vec4(col5,1.);\nelse if (x < 6. * m)\nfragColor = vec4(col6,1.);\nelse\nfragColor = vec4(1.);\n//fragColor = 1. - fragColor;\n*/\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define KEYBOARD iChannel1\n#define KEY_RESET 82\n\n\nfloat Cell( in ivec2 p )\n{\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n   // return (texelFetch(iChannel0, p, 0 ).x > 0.5 ) ? 1 : 0;\n   return texelFetch(iChannel0, p, 0 ).x;\n}\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*138.5453123);\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nfloat S(float x)\n{\nreturn step(0.5,x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nivec2 px = ivec2( fragCoord );\n    \n    float time = 0.8 * iTime + 900.;\n    \n// center cell\nfloat e = Cell(px); \n\n// neighbour cells\nfloat t = Cell(px + ivec2(0,-1));\nfloat b = Cell(px + ivec2(0,1));\nfloat l = Cell(px + ivec2(-1,0));\nfloat r = Cell(px + ivec2(1,0));   \n\n// \"average\" of neighbours\nfloat k = max(0.5 * (t + b), 0.5 * (l + r));\n\n// difference between \"average\" and center\nfloat j = abs(e - k);\n\nfloat L = 0.5 * (1. + cos(time));\n//0.2 * vec2(cos(iTime),sin(iTime)) + \nvec2 dir = (fragCoord -.5* iResolution.xy) / iResolution.y;\nfloat theta = atan(dir.y,dir.x);\nfloat d = 1. - ( L * length(dir) + (1.-L) * (abs(dir.x) + abs(dir.y)));\n\nfloat p = (0.6 + 0.05 * cos(0.2 * time)) * cos(  2. * theta + (2. + 0.01 * e) * time);\nif (d < p )\ne = 1. - pow((1. - d / p),2.);\nelse\ne = 0.25 * (t + b + l + r) - 0.00875 -0.00375 * cos(0.3 * time);\n\n/*\nfloat lth = length(fragCoord - iMouse.xy);\nif (lth < 100.) // 200. * j // or k\n e = pow(lth / (100. * j), 2.);\n*/\ne = max(0., min(1.,e));\nfragColor = vec4( e, 0.0, 0.0, 0.0 );\n}","name":"Buffer A","description":"","type":"buffer"}]}