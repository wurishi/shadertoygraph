{"ver":"0.1","info":{"id":"ddBSWG","date":"1670787988","viewed":71,"name":"Parula Matlab Colormap","username":"wagyx","description":"Inspired by https://www.shadertoy.com/view/3lBXR3\nUsing numpy polyfit, the top one uses a degree 12 polynimial, the bottom one uses a degree 6 polynomial.\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["colormap","matlab","fitcolormap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// License CC0 (public domain) \n//   https://creativecommons.org/share-your-work/public-domain/cc0/\n//\n// feel free to use these in your own work!\n//\n// similar to https://www.shadertoy.com/view/3lBXR3\n//\n//  - use degree 6 instead of degree 5 polynomials\n//  - use nested horner representation for polynomials\n//  - polynomials were fitted to minimize least square error\n\nvec3 parula12(float t) {\n    const vec3 c0 = vec3(2.35823373e-01, 1.49256342e-01, 6.46357598e-01);\n    const vec3 c1 = vec3(2.27805283e+00, 1.10359901e+00, 5.73693221e+00);\n    const vec3 c2 = vec3(-9.25935259e+01, -7.02721632e+00, -1.17363325e+02);\n    const vec3 c3 = vec3(1.88692632e+03, 1.60626301e+02, 2.02973281e+03);\n    const vec3 c4 = vec3(-1.99146220e+04, -1.35579191e+03, -2.00107716e+04);\n    const vec3 c5 = vec3(1.21571275e+05, 6.10623463e+03, 1.17860001e+05);\n    const vec3 c6 = vec3(-4.64081499e+05, -1.52879102e+04, -4.42732980e+05);\n    const vec3 c7 = vec3(1.15427193e+06, 1.80182829e+04, 1.09870097e+06);\n    const vec3 c8 = vec3(-1.89936434e+06, 3.88017881e+03, -1.82102597e+06);\n    const vec3 c9 = vec3(2.05085215e+06, -4.10941677e+04, 1.99182410e+06);\n    const vec3 c10 = vec3(-1.39723148e+06, 5.34337695e+04, -1.37836965e+06);\n    const vec3 c11 = vec3(5.44741547e+05, -3.07474332e+04, 5.46171247e+05);\n    const vec3 c12 = vec3(-9.26408423e+04, 6.89297618e+03, -9.43356433e+04);\n    return c0 + t * (c1 + t * (c2 + t * (c3 + t * (c4 + t * (c5 + t * (c6 + t * (c7 + t * (c8 + t * (c9 + t * (c10 + t * (c11 + t * c12)))))))))));\n}\nvec3 parula6(float t) {\n    const vec3 c6 = vec3( 1.06652837e+02, -1.07075762e+01, -8.37729675e+01);\n    const vec3 c5 = vec3(-3.25068057e+02,  3.87339330e+01,  2.38466727e+02);\n    const vec3 c4 = vec3( 3.54679594e+02, -4.51177381e+01, -2.53217221e+02);\n    const vec3 c3 = vec3(-1.63995733e+02,  1.97284255e+01,  1.28751410e+02);\n    const vec3 c2 = vec3( 3.02928593e+01, -3.22651412e+00, -3.63808525e+01);\n    const vec3 c1 = vec3(-1.89612390e+00,  1.47390611e+00,  5.58086436e+00);\n    const vec3 c0 = vec3( 2.85251835e-01,  1.37220184e-01,  6.17373938e-01);\n    return c0 + t * (c1 + t * (c2 + t * (c3 + t * (c4 + t * (c5 + t * c6)))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    float y;\n    vec2 uv;\n    float ncolormaps=2.;\n    \n    if (max(iMouse.z, iMouse.w) > 0.) {\n        \n        uv = fragCoord / iResolution.xy;\n        y = floor(iMouse.y * ncolormaps / iResolution.y );\n        \n    } else {\n\n        const float m = 2.0;\n\n        vec2 dims = iResolution.xy - vec2(2.*m, 2.*m);\n\n        float h = floor(dims.y/ncolormaps);\n\n        \n        dims.y = ncolormaps*h;\n\n        fragCoord -= 0.5*(iResolution.xy-dims) + mod(m, 2.)*0.5;\n\n        y = floor(fragCoord.y / h);\n\n        uv = fragCoord / dims;\n\n        float b = mod(fragCoord.y + 0.5*h, h);\n\n        if (abs(b - 0.5*h) < 0.5*m || uv.x < 0. || uv.x >= 1.) {\n            y = -1.;\n        }\n        \n    }\n\n    fragColor = vec4(0, 0, 0, 1);\n    \n    if (y == 0.) {\n        fragColor.xyz = parula12(uv.x);\n    } else if (y == 1.) {\n        fragColor.xyz = parula6(uv.x);\n    }\n\n}","name":"Image","description":"","type":"image"}]}