{"ver":"0.1","info":{"id":"MffGRX","date":"1703287704","viewed":41,"name":"Mandlebrot <-> Julia","username":"randfur","description":"Oscillating between the Mandlebrot (left) and Julia (right) fractals.\nClick and drag to change mouse position.\nPause at 0 to play with the Julia fractal.\n \nz' = z^2 + c\n\nMandlebrot:\nz0 = mouse\nc = pixel\n\nJulia:\nz0 = pixel\nc = mouse","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 screenToWorld(vec2 position) {\n    return (position - (iResolution.xy / 2.)) / min(iResolution.x, iResolution.y) * 1.8;\n}\n\nvec2 complexSquare(vec2 c) {\n    return vec2(c.x * c.x - c.y * c.y, 2. * c.x * c.y);\n}\n\nvec3 redToGreen(float progress) {\n  vec3 result = vec3(sqrt(max(progress, 0.)), sqrt(max(1. - progress, 0.)), 0);\n  return result / max(result.r, result.g);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouseScreenXy = iMouse.xy == vec2(0, 0) ? iResolution.xy / 2. : iMouse.xy;\n    float t = (cos(iTime / 6.) + 1.) / 2.;\n    vec2 pixelXy = screenToWorld(fragCoord);\n    vec2 mouseXy = screenToWorld(mouseScreenXy);\n\n    vec2 outlineZ = vec2(0, 0);\n    vec2 outlineC = pixelXy;\n\n    vec2 z = mix(mouseXy, pixelXy, t);\n    vec2 c = mix(pixelXy, mouseXy, t);\n    const int max = 500;\n    int count = 0;\n    bool escaped = false;\n    for (int i = 0; i < max; ++i) {\n      escaped = length(z) > 2.;\n      z = escaped ? z : complexSquare(z) + c;\n      count =  escaped ? count : i;\n      \n      outlineZ = complexSquare(outlineZ) + outlineC;\n    }\n\n    float escapeFraction = pow(1. - (length(z) - 2.) / 2., 2.);\n    float escapeFade = pow((float(count) + escapeFraction) / float(max), 0.5);\n    vec3 col = escaped\n        ? escapeFade * vec3(1, 1, 1)\n        : redToGreen(length(z));\n\n    col = length(outlineZ) < 2. && iMouse.z > 0. ? col + 0.2 * vec3(1, 1, 1) : col;\n    col = length(fragCoord.xy - mouseScreenXy) < 2. ? vec3(1, 1, 1) : col;\n    col = (fragCoord.y < 10. && abs(fragCoord.x - t * iResolution.x) < 5.) ? vec3(1, 1, 1) : col;\n\n    fragColor = vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"}]}