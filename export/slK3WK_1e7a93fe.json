{"ver":"0.1","info":{"id":"slK3WK","date":"1638380874","viewed":111,"name":"Animated 3D cellular noise","username":"guitio2002","description":"Animated 3D cellular noise.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["animatedcellularnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// setup copied from: https://www.shadertoy.com/view/XsXfRH\n\n\nvec2 worley(in vec4 P)  // animated 3D cellular noise\n{\n    vec3 p;\n    vec3 Pi = floor(P.xyz);\n    vec3 Pf = fract(P.xyz);\n    float F1 = 1.0, F2 = 1.0;\n    for(p.z = -1.0; p.z <= 1.0; ++p.z)\n        for(p.y = -1.0; p.y <= 1.0; ++p.y)\n            for(p.x = -1.0; p.x <= 1.0; ++p.x)\n            {\n                vec3 Pn = Pi + p;\n                Pn = fract(sin(vec3(dot(Pn, vec3(127.1, 311.7, 251.3)),\n                                    dot(Pn, vec3(269.5, 183.3, 478.5)),\n                                    dot(Pn, vec3(307.3, 284.9, 154.1)))) * 43758.5453);\n                Pn = 0.5 * sin(P.w + 6.2831 * Pn) + 0.5;\n                float d = length(p + Pn - Pf);\n                if(d < F1)\n                {\n                    F2 = F1;\n                    F1 = d;\n                }\n                else if(d < F2)\n                    F2 = d;\n            }\n    return vec2(F1, F2);\n}\n\n\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n\n    // camera movement\t\n\tfloat an = 0.5*iTime;\n\tvec3 ro = vec3( 2.5*cos(an), 1.0, 2.5*sin(an) );\n    vec3 ta = vec3( 0.0, 1.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n    // sphere center\t\n\tvec3 sc = vec3(0.0,1.0,0.0);\n\n    // raytrace\n\tfloat tmin = 10000.0;\n\tvec3  nor = vec3(0.0);\n\tfloat occ = 1.0;\n\tvec3  pos = vec3(0.0);\n\n\t// raytrace-plane\n\tfloat h = (0.0-ro.y)/rd.y;\n\tif( h>0.0 ) \n\t{ \n\t\ttmin = h; \n\t\tnor = vec3(0.0,1.0,0.0); \n\t\tpos = ro + h*rd;\n\t\tvec3 di = sc - pos;\n\t\tfloat l = length(di);\n\t\tocc = 1.0 - dot(nor,di/l)*1.0*1.0/(l*l); \n\t}\n\n\t// raytrace-sphere\n\tvec3  ce = ro - sc;\n\tfloat b = dot( rd, ce );\n\tfloat c = dot( ce, ce ) - 1.0;\n\th = b*b - c;\n\tif( h>0.0 )\n\t{\n\t\th = -b - sqrt(h);\n\t\tif( h<tmin ) \n\t\t{ \n\t\t\ttmin=h; \n\t\t\tnor = normalize(ro+h*rd-sc); \n\t\t\tocc = 0.5 + 0.5*nor.y;\n\t\t}\n\t}\n\n    // shading/lighting\t\n\tvec3 col = vec3(0.9);\n\tif( tmin<100.0 )\n\t{\n\t    pos = ro + tmin*rd;\n\n        vec2  n = worley( vec4(6.0*pos,iTime) );\n        float f = (p.x < 0.0 ? n.x : n.y - n.x);\n\n        f *= f * occ;\n\n\t\tcol = mix( vec3(f), vec3(0.9), 1.0-exp( -0.003*tmin*tmin ) );\n\t}\n\n    col  = sqrt( col );\n    col *= smoothstep( 0.006, 0.008, abs(p.x) );\n\n\tfragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}