{"ver":"0.1","info":{"id":"NsVyRz","date":"1654318780","viewed":359,"name":"Apollonian Fractal [299 chars]","username":"Xor","description":"New experiment with a compact shadow algorithm\n    ","likes":22,"published":1,"flags":0,"usePreview":0,"tags":["fractal","golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    \"Apollonian Fractal [300 chars]\" by @XorDev\n    New experiment with a compact shadow algorithm\n    \n    Based on Shane's Apollonian Fractal: https://www.shadertoy.com/view/4d2BW1\n    \n    Twigl: https://bit.ly/3xgtDUD\n    -14 thanks to coyote\n    \n    <300 chars playlist: https://www.shadertoy.com/playlist/fXlGDN\n*/\nvoid mainImage(out vec4 O, vec2 I)\n{\n    float i=0.,e,j,s,t=iTime;\n    //Resolution for scaling\n    vec3 r = iResolution,\n    //Position and transformed vector\n    p = r-r,v;\n    \n    //Clear color\n    for(O-=O;\n\n        //Scroll forward\n        v = p+t/r,\n        \n        //Rotate view\n        v.xy *= mat2(sin(t*.1+vec4(0,11,33,0))),\n        //Center\n        v--,\n        i++<2e2;\n\n        \n        //Shadow tracing after 100 iterations\n        i>1e2 ?\n            //Step forward in vec3(1,1,1) direction\n            p += e+=1e-5,\n            //Add lighting\n            O += e\n        :\n            //Add fog and step forward\n            O+=vec4(5,6,9, p+=(vec3(I+I,r)-r)/r.x*e )/2e2*e\n    )\n    //Apollonian fractal\n    for(j=s=4.;j++<11.;e=length(v*=e)/s-p.z/6e2)\n            s*=e=1.5/dot(v=mod(--v,2.)-1.,v);\n}","name":"Image","description":"","type":"image"}]}