{"ver":"0.1","info":{"id":"cdVyRm","date":"1695999578","viewed":5,"name":"Attitude indicator","username":"RayRayB","description":"A shader I used as an attitude indicator in a game with a plane made with Godot.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotate(float angle)\n{\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nfloat line(vec2 uv, float thickness)\n{\n    return smoothstep(0., .01, 1. - abs(uv.y) / thickness);\n    return smoothstep(1. - abs(uv.y) / thickness, .8, 1.);\n}\n\nfloat rectangle(vec2 uv, float thickness, float length)\n{\n   return 0.; \n}\n\nvec3 drawLineAndRotate(vec2 uv)\n{\n    float nMouseX = iMouse.x / iResolution.x;\n    mat2 r = rotate(3.14 * (nMouseX - .5));\n    //uv.y -= (nMouseY);\n    vec3 line = vec3(line(uv * r, .01));\n    \n    return line;\n}\n\nvec3 drawHorizonAndTranslate(vec2 uv, bool translate)\n{\n    float nMouseY = iMouse.y / iResolution.y;\n    if(translate) uv.y += nMouseY - .5;\n    float g = smoothstep(.0, .001, uv.y * -1.);\n    vec3 ground = vec3(g) * vec3(.6, .25, .0);\n    \n    for(int i=0; i<4; i++)\n    {\n    \n    }\n    \n    float s = smoothstep(.0, .001, uv.y * 1.);\n    vec3 sky = vec3(s) * vec3(.2, .7, 1.);\n    return sky + ground;\n}\n\nfloat circle(vec2 uv, float r)\n{\n    return 1.-smoothstep(r, r+.001, length(uv));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    \n    vec3 line = drawLineAndRotate(uv);\n    vec3 horizon = drawHorizonAndTranslate(uv, false);\n    vec3 horizonRotate = drawHorizonAndTranslate(uv, true) - line;\n    \n    vec3 col = horizonRotate + line * vec3(7., .1, .1);\n    float circle = circle(uv, .5);\n    col *= circle;\n    \n    //col = vec2(rectangle(uv, 1., 2.);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}