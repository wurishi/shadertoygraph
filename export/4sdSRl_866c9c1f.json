{"ver":"0.1","info":{"id":"4sdSRl","date":"1460901504","viewed":312,"name":"StarBox","username":"dila","description":"Complete rip-off of Escher's box-bird sketch, but it works well as a shader. I added a little sphere to the head of the object to avoid any religious symbolism.\nhttp://www.math.technion.ac.il/S/rl/M.C.Escher/1/space_birds.gif","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nvec4 map(vec3 p)\n{\n\tfloat os = sdBox(p, vec3(1.0));\n    float is = sdBox(p, vec3(0.8));\n    float d = max(os, -is);\n    \n    vec3 tex = vec3(p);\n    \n\tvec3 sz = vec3(0.2, 0.6, 0.6);\n    vec3 of = vec3(1.0, 0.0, 0.0);\n    \n    float bx = sdBox(abs(p) - of, sz);\n    if (bx < d)\n    {\n\t\td = bx;\n        tex = vec3(0.0, 0.5 - p.yz);\n    }\n    \n    float by = sdBox(abs(p) - of.zxy, sz.zxy);\n    if (by < d)\n    {\n\t\td = by;\n        tex = vec3(0.0, 0.5 - p.zx * vec2(-1.0, 1.0));\n    }\n    \n    float bz = sdBox(abs(p) - of.yzx, sz.yzx);\n    if (bz < d)\n    {\n\t\td = bz;\n        tex = vec3(0.0, 0.5 - p.xy);\n    }\n    \n    return vec4(tex, d);\n}\n\nvec3 normal(vec3 p)\n{\n\tvec3 o = vec3(0.01, 0.0, 0.0);\n    return normalize(vec3(map(p+o.xyy).w - map(p-o.xyy).w,\n                          map(p+o.yxy).w - map(p-o.yxy).w,\n                          map(p+o.yyx).w - map(p-o.yyx).w));\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n    float t = 0.0;\n    for (int i = 0; i < 16; ++i) {\n\t\tvec3 p = o + r * t;\n        float d = map(p).w;\n        t += d;\n    }\n    return t;\n}\n\nmat2 rot(float t)\n{\n    return mat2(cos(t), sin(t), -sin(t), cos(t));\n}\n\nfloat omap(vec3 p)\n{\n\tfloat gp = 0.5 - p.y;\n    float tn = 0.125;\n    float bx = sdBox(p - vec3(0.0, 0.0, 1.5), vec3(tn, 1.0, tn));\n    float bc = sdBox(p - vec3(0.0, -0.5, 1.5), vec3(0.5, tn, tn));\n    float cc = length(p - vec3(0.0, -1.0, 1.5)) - 0.25;\n    return min(min(min(gp, bx), bc), cc);\n}\n\nvec3 onormal(vec3 p)\n{\n\tvec3 o = vec3(0.01, 0.0, 0.0);\n    return normalize(vec3(omap(p+o.xyy) - omap(p-o.xyy),\n                          omap(p+o.yxy) - omap(p-o.yxy),\n                          omap(p+o.yyx) - omap(p-o.yyx)));\n}\n\nfloat otrace(vec3 o, vec3 r)\n{\n    float t = 0.0;\n    for (int i = 0; i < 32; ++i) {\n        vec3 p = o + r * t;\n        float d = omap(p);\n        t += d;\n    }\n    return t;\n}\n\nvec3 textex(vec3 p)\n{\n    vec3 ta = texture(iChannel0, p.yz).xyz;\n    vec3 tb = texture(iChannel0, p.xz).xyz;\n    vec3 tc = texture(iChannel0, p.xy).xyz;\n    return (ta*ta + tb*tb + tc*tc) / 3.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 0.5 - dot(uv,uv) * 0.33));\n    r.yz *= rot(iTime * 0.5);\n    r.xy *= rot(iTime);\n    \n    vec3 o = vec3(0.0);\n    \n    float t = trace(o, r);\n    \n    vec3 w = o + r * t;\n    vec3 n = normal(w);\n    vec4 fd = map(w);\n    \n    vec2 ouv = fd.yz * 2.0 - 1.0;\n\tvec3 or = normalize(vec3(ouv, 1.0));\n    \n    vec3 oo = vec3(0.0, 0.0, 0.0);\n    float ot = otrace(oo, or);\n    vec3 ow = oo + or * ot;\n    vec3 on = onormal(ow);\n    float op = max(dot(or, -on), 0.0);\n    \n    vec3 otex = textex(ow);\n    float ofog = 1.0 / (1.0 + ot * ot * 0.1);\n    vec3 oc = op * otex * ofog;\n    \n    vec3 sky = vec3(0.0);\n    for (int i = 0; i < 3; ++i) {\n        float fi = float(i) / 3.0;\n        float an = fract(iTime + fi);\n        vec3 st = texture(iChannel1, ouv * an).xyz;\n        st *= st;\n        sky += st * an * (1.0 - an) * 4.0;\n    }\n    \n    oc = mix(oc, sky, pow(1.0-ofog,2.0));\n    \n    vec3 tex = textex(fd.xyz).xyz;\n    float fog = 1.0 / (1.0 + t * t * 0.1);\n    float ip = max(dot(r, -n), 0.0);\n    vec3 ic = ip * tex * fog;\n    ic *= 0.5;\n    \n    vec3 fc = mix(ic, oc, 1.0-abs(sign(fd.x)));\n    \n\tfragColor = vec4(sqrt(fc), 1.0);\n}","name":"Image","description":"","type":"image"}]}