{"ver":"0.1","info":{"id":"7llXzN","date":"1625302652","viewed":289,"name":"foliage shadow with fake convol2","username":"FabriceNeyret2","description":"Procedural variant of https://shadertoy.com/view/stlXzN\nfoliage shadowing requires convolution with (solar) disk scaled with distance to floor.\nHere I approximate this with SDF to foliage mask. That I approximate with MIPmap of mask.","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["sdf","convolution","penumbra","boket"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// procedural variant of https://shadertoy.com/view/stlXzN\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    //O = vec4(T(U,0.)); return;\n    float m = iMouse.y/R.y,\n          l = floor(2.*log2(R.y)),          // for jigsaw between min-max LOD\n          t = floor(l*fract(iTime/8.-.1));\n          t = min(t,l-t);\n          \n    m = .8;                                 // foliage threshold\n    t = 3.+log2(R.y/360.);                  // log2( distance to floor )\n    \n    float v = T(U, t )- (1.-m); \n    O = vec4( smoothstep(-6., 6., v*R.y/10. ) );  // -4..4 to reproduce soft disk\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define hash(p) fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{  \n   O-=O;                                        // foliage mask \n   vec2 U = 30.*u/R.y/vec2(4,1);\n   float d = 1e9;\n   for( int i=0; i < 9; i++) {\n       vec2 D = vec2(i%3-1,i/3-1),\n            I = floor(U)+D,\n            H = hash(I+.5),\n            P = hash(I) + .5*cos( .5*iTime*(1.+(H.y-.5)) + 6.3*H.x + vec2(0,11) );\n            d = min(d, length(fract(U)-D-P) );  \n   }\n   O.x = smoothstep(.1,-.1,  d - .3 );\n    \n\n   { vec2 D = R/5.*cos(iTime+vec2(0,11));    \n     O.x *= step( R.y/5., length(u-R/2.+D));    // occluder mask \n   }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R         iResolution.xy\n#define T( U, l ) textureLod( iChannel0, (U)/R , l ).x","name":"Common","description":"","type":"common"}]}