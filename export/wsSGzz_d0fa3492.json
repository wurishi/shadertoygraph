{"ver":"0.1","info":{"id":"wsSGzz","date":"1547942988","viewed":109,"name":"evankh_Mandelbrot","username":"evankh","description":"A basic Mandelbrot set zoom, the \"Hello world\" of shaders.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float boundary = 7.0;\t// Defines the boundary beyond which a point is considered to have escaped; almost completely irrelvant but artifacts occur less than ~5.0\nint iterations = 500;\t// The maximum number of iterations to perform on a given point\nfloat zoomspeed = 0.5;\t// Initial zoom level at t = 0.0\nvec2 zoomcenter = vec2(-0.7335185, 0.197);\t// The point to zoom in on\n\n// The set of colors that define the gradient\nvec3[] colors = vec3[](vec3(1.0,0.0,0.0), vec3(1.0,1.0,0.0), vec3(0.0,1.0,0.0), vec3(0.0,1.0,1.0), vec3(0.0,0.0,1.0), vec3(1.0, 0.0, 1.0));\n\n// Multiply two vec2's like they're complex numbers\nvec2 cpx_mul(vec2 a, vec2 b) {\n    return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\n\n// Sample a gradient\nvec3 color_ramp(float fac, vec3[6] colors, bool repeat) {\n    if (repeat) fac = mod(fac, 6.0);\n    else fac = clamp(fac, 0.0, 5.0);\n    return mix(colors[int(fac)], colors[(int(fac) + 1) % 6], fract(fac));\n}\n\nvec3 fractal(vec2 c) {\n    // Zoom mechanics\n    float zoomlevel = exp(-iTime * zoomspeed);\n    c *= zoomlevel;\n    c += zoomcenter;\n    int maxiter = int(iTime / zoomspeed) + iterations;\n    \n    // Algorithm iteration with early exit for efficiency\n    int i = 0;\n    vec2 f = vec2(0.0);\n    while (i < maxiter && length(f) < boundary) {\n        i++;\n        f = cpx_mul(f, f) + c;\n    }\n    \n    // Color according to escape time\n    if (length(f) < boundary)\n        // Point is still bounded\n        return vec3(0.0);\n    else {\n        // Point has diverged beyond the specified boundary\n    \tfloat smoothfac = float(i + 1) - log(log(length(f))) / log(2.0);\n        return color_ramp(smoothfac - iTime, colors, true);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv1 = fragCoord;\n    vec2 uv2 = fragCoord + vec2(0.5, 0.0);\t// 4xAA\n    vec2 uv3 = fragCoord + vec2(0.0, 0.5);\n    vec2 uv4 = fragCoord + vec2(0.5);\n    vec2 c1 = uv1 / iResolution.yy - vec2(1.0, 0.5);\t// Centers the set in the window\n    vec2 c2 = uv2 / iResolution.yy - vec2(1.0, 0.5);\n    vec2 c3 = uv3 / iResolution.yy - vec2(1.0, 0.5);\n    vec2 c4 = uv4 / iResolution.yy - vec2(1.0, 0.5);\n    \n    fragColor.rgb = fractal(c1);\n    fragColor.rgb += fractal(c2);\n    fragColor.rgb += fractal(c3);\n    fragColor.rgb += fractal(c4);\n    fragColor.rgb /= 4.0;\n}","name":"Image","description":"","type":"image"}]}