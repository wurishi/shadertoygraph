{"ver":"0.1","info":{"id":"MdjyRw","date":"1491423048","viewed":323,"name":"STAD 0002","username":"tpen","description":"Shadertoy-a-day, entry #2!\n\nShadertoy version of http://i.imgur.com/dWiqpjO.gif","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","circles","stad","copyagif","shadereveryday"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/MdjyRw\n\nconst float TOTAL_RADIUS = 177.0;\nconst float CIRCLE_RADIUS = 13.5;\nconst float MARGIN = 50.0;\nconst float NUMBER_OF_CIRCLES = 24.0 / 2.0;\n\nconst float INTERNAL_RADIUS = (CIRCLE_RADIUS)/(TOTAL_RADIUS+MARGIN);\nconst float EXTERNAL_RADIUS = (TOTAL_RADIUS-CIRCLE_RADIUS)/(TOTAL_RADIUS+MARGIN);\nconst float PI = 3.14159265359;\n\n// http://www.chilliant.com/rgb2hsv.html\nvec3 hueToRGB(float H)\n{\n    float R = abs(H * 6.0 - 3.0) - 1.0;\n    float G = 2.0 - abs(H * 6.0 - 2.0);\n    float B = 2.0 - abs(H * 6.0 - 4.0);\n    return clamp(vec3(R,G,B), vec3(0.0), vec3(1.0));\n}\n\nfloat pointCircle(vec2 p, vec2 center, float radius)\n{\n    float d = distance(p, center);\n    float aaf = fwidth(d);\n\treturn 1.0 - smoothstep(radius - aaf, radius, d);\n}\n\nfloat pointCircleStroke(vec2 p, vec2 center, float radius)\n{\n    float d = distance(p, center);\n    float aaf = fwidth(d);\n    \n    return smoothstep(radius-aaf, radius, d) - smoothstep(radius, radius+aaf, d);\n}\n\nvec4 alphaBlend(vec4 src, vec4 dst)\n{\n    vec3 col = mix(dst.xyz, src.xyz, src.w);\n    return vec4(col, 1.0);\n}\n\nvec4 circlePattern(vec2 p)\n{\n    vec4 ret = vec4(vec3(0.0), 1.0);\n    for (float i = 0.0; i < NUMBER_OF_CIRCLES; i++)\n    {\n        float angle0 = i * PI * 2.0 / NUMBER_OF_CIRCLES;\n        float angle1 = (i + 1.5) * PI * 2.0 / NUMBER_OF_CIRCLES;\n        \n        float radius = INTERNAL_RADIUS;\n                \n        vec2 circlePos0 = vec2(cos(angle0), sin(angle0)) * EXTERNAL_RADIUS;        \n        vec2 circlePos1 = vec2(cos(angle1), sin(angle1)) * EXTERNAL_RADIUS;\n        vec2 middlePos = (circlePos0 + circlePos1) / 2.0;\n        vec2 diff = middlePos - circlePos0;\n        float middleRadius = length(diff);\n        \n        float middleAngle = atan(diff.y,diff.x);\n        \n        float ratio = smoothstep(0.0,1.0,mod(iTime*0.5+i*0.25,3.0));\n        middleAngle -= ratio * PI;\n            \n        vec2 realPos0 = middlePos + vec2(cos(middleAngle), sin(middleAngle)) * middleRadius;\n        vec2 realPos1 = middlePos + vec2(cos(PI + middleAngle), sin(PI + middleAngle)) * middleRadius;\n        \n        vec3 color0 = hueToRGB(mod(0.25 + 1.0/24.0 - (i+1.5) / NUMBER_OF_CIRCLES, 1.0));\n        vec3 color1 = hueToRGB(mod(0.25 + 1.0/24.0 - (i-0.0) / NUMBER_OF_CIRCLES, 1.0));\n        \n        float bandRatio = 1.0 - abs(2.0 * ratio - 1.0);\n        \n        vec3 realColor0 = mix(color0, color1, ratio);\n        vec3 realColor1 = mix(color1, color0, ratio);\n               \n        float st = pointCircleStroke(p, middlePos, middleRadius);\n\t\tret = alphaBlend(vec4(color0, st * bandRatio), ret);\n        \n        float c0 = pointCircle(p, realPos0, radius);\n        ret = alphaBlend(vec4(realColor0, c0), ret);\n        \n        float c1 = pointCircle(p, realPos1, radius);\n        ret = alphaBlend(vec4(realColor1, c1), ret);\n    }\n    return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2.0 * fragCoord.xy / iResolution.xy - vec2(1.0);\n    uv.x *= iResolution.x / iResolution.y;\n    \n\tfragColor = circlePattern(uv);\n}","name":"Image","description":"","type":"image"}]}