{"ver":"0.1","info":{"id":"MtySzd","date":"1485446493","viewed":1002,"name":"AA Sinus Scroller","username":"gPlatl","description":"Draw antialiased sinus scroller as a modification of shader XtyXzt from @Himred.\nPress mouse button to switch to unlighted characters.\nMouse.y set sinus amplitude.\n","likes":18,"published":1,"flags":64,"usePreview":1,"tags":["font","sinus","antialiased","scroller","fonttexture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XtfGRr","filepath":"https://soundcloud.com/virgill/amiga-interference-vite-and-plack","previewfilepath":"https://soundcloud.com/virgill/amiga-interference-vite-and-plack","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//---------------------------------------------------------\n// AA_Sinus_Scroller.glsl  \n// Draw antialiased sinus scroller with lighted characters. \n//  v1.0  2017-01-27  initial version\n//  v2.0  2017-01-28  now 3d lighted\n//  v2.1  2018-10-09  Soundcloud music changed  \n// scroller: https://www.shadertoy.com/view/XtyXzt\n// aa font:  https://www.shadertoy.com/view/4ltXzl\n// 2d & 3d:  https://www.shadertoy.com/view/MtVXRd\n//---------------------------------------------------------\n\n//--- common data ---\nfloat time = 0.0;\nvec2 pos = vec2(0);  //  0 .. 1\nvec2 uv  = vec2(0);  // -1 .. 1\nvec2 tp  = vec2(0);  // text position\n\n//--- font data ---\n#define FONT_SIZE1 0.45\n#define FONT_SIZE2 0.3\n#define FONT_SPACE 0.45\n#define SIN_FREQ 0.75\n#define SIN_SPEED 3.0\n#define SCROLL_LEN 30.\n#define SCROLL_SPEED 2.0\n\n//----- access to the image of ascii code characters ------\n//#define S(a) c+=texture(iChannel0,clamp(tp,0.,1.)/16.+fract(floor(vec2(a,15.999-float(a)/16.))/16.)).x; uv.x-=FONT_SPACE;\n\n#define S(a) c+=char(float(a)); tp.x-=FONT_SPACE;\n\n#define _note  S(10);\n#define _star  S(28);\n#define _smily S(29);\n#define _    S(32);\n#define _exc S(33);\n#define _add S(43);\n#define _dot S(46);\n\n#define _A S(65);\n#define _B S(66);\n#define _C S(67);\n#define _D S(68);\n#define _E S(69);\n#define _F S(70);\n#define _G S(71);\n#define _H S(72);\n#define _I S(73);\n#define _J S(74);\n#define _K S(75);\n#define _L S(76);\n#define _M S(77);\n#define _N S(78);\n#define _O S(79);\n#define _P S(80);\n#define _Q S(81);\n#define _R S(82);\n#define _S S(83);\n#define _T S(84);\n#define _U S(85);\n#define _V S(86);\n#define _W S(87);\n#define _X S(88);\n#define _Y S(89);\n#define _Z S(90);\n\n#define _a S(97);\n#define _b S(98);\n#define _c S(99);\n#define _d S(100);\n#define _e S(101);\n#define _f S(102);\n#define _g S(103);\n#define _h S(104);\n#define _i S(105);\n#define _j S(106);\n#define _k S(107);\n#define _l S(108);\n#define _m S(109);\n#define _n S(110);\n#define _o S(111);\n#define _p S(112);\n#define _q S(113);\n#define _r S(114);\n#define _s S(115);\n#define _t S(116);\n#define _u S(117);\n#define _v S(118);\n#define _w S(119);\n#define _x S(120);\n#define _y S(121);\n#define _z S(122);\n\n#define _0 S(48);\n#define _1 S(49);\n#define _2 S(50);\n#define _3 S(51);\n#define _4 S(52);\n#define _5 S(53);\n#define _6 S(54);\n#define _7 S(55);\n#define _8 S(56);\n#define _9 S(57);\n\n// return character intensity of ch at position tp\nfloat char(float ch)\n{\n  vec4 f = texture(iChannel0,clamp(tp,0.,1.)/16.+fract(floor(vec2(ch,15.999-float(ch)/16.))/16.));\n  if (iMouse.z > 0.0) \n    return f.x;   // 2d \n  else\n    return f.x * (f.y+0.3)*(f.z+0.3)*2.0;   // 3d\n}\n\nvec4 ScrollText1()\n{\n  tp = uv / FONT_SIZE1;  // set font size\n  tp.x = 2.0*(tp.x -4. +mod(time*SCROLL_SPEED, SCROLL_LEN));\n  float SIN_AMP = 1.5 * iMouse.y  / iResolution.y - 0.5;\n  tp.y = tp.y +0.5 +SIN_AMP*sin(tp.x*SIN_FREQ +time*SIN_SPEED);\n\n  float c = 0.0;\n    \n  _H _e _l _l _o _  _s _h _a _d _e _r _t _o _y _ _exc _exc\n\n  _ _T _h _i _s _ _i _s _ _a _ _b _a _s _i _c\n\n  _ _e _x _a _m _p _l _e _ _o _f _ _a \n\n  _ _s _i _n _u _s _ _s _c _r _o _l _l _e _r\n\n  _ _w _i _t _h _ _a _n _ _a _n _t _i _a _l _i _a _s _e _d \n      \n  _ _3 _d _ _b _i _t _m _a _p _  _f _o _n _t\n      \n  //_ _dot _dot _dot _dot _ _u _s _e _ _i _t \n      \n  //_ _a _t _ _y _o _u _r _ _o _w _n _ _r _i _s _k _ \n      \n  _ _smily _ _dot _dot _dot _dot \n\n  return c * vec4(pos, 0.5+0.5*sin(2.0*time),1.0);\n}\n\nvec4 ScrollText2()\n{\n  tp = uv / FONT_SIZE2;  // set font size\n  tp.x = 2.0*(tp.x-5.8+mod(time*SCROLL_SPEED, SCROLL_LEN));\n  tp.y = tp.y + 3.2;\n\n  float c = 0.0;\n  _ _star _ _star _ _star _ _star _ _note _note _note _note _  \n  _p _l _a _y _i _n _g _  _s _o _u _n _d _c _l _o _u _d _  \n\n//  _m _u _s _i _c _  _note _e _n _i _g _m _a _note _ _a _n _\n//  _a _m _i _g _a _  _r _e _m _i _x _  _f _r _o _m _  _d _a _X _X _\n\n  //Virgill: Amiga - Interference (Vite and plack)       \n  _m _u _s _i _c _  _note _f _r _o _m _ _V _i _r _g _i _l _l _ _note _\n  _A _m _i _g _a _ _I _n _t _e _r _f _e _r _e _n _c _e\n  _note _note _note _note _ _star _ _star _ _star _ _star\n  // _1 _2 _3 _4 _5 _6 _7 _8 _9 _0 \n  return c * vec4(pos, 0.5+0.5*sin(time),1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  time = iTime;\n  pos = fragCoord.xy / iResolution.xy; //  0 .. 1\n  uv = pos*2.0 - 1.0;                  // -1 .. 1\n\n  fragColor  = ScrollText1();\n  fragColor += ScrollText2();\n}","name":"Image","description":"","type":"image"}]}