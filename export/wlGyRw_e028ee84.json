{"ver":"0.1","info":{"id":"wlGyRw","date":"1610658977","viewed":196,"name":"Complex Number Tetration","username":"CelestialAmber","description":"Tetration with complex numbers.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["tetration"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float arg(vec2 c){\n    return atan(c.y,c.x);\n}\n\n\n\nvec2 complexPow(vec2 a, vec2 b){\n    float coefficient = pow(dot(a,a), b.x/2.0)*exp(-b.y*arg(a));\n    float innerValue = b.x*arg(a) + 0.5*b.y*log(dot(a,a));\n    \n    return coefficient*vec2(cos(innerValue),sin(innerValue));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 pos = uv - vec2(0.0,0.0); \n    \n    pos *= 2.5;\n  \n    int iterations = 100;//int(mod(iTime*10.0, 80.0));\n    \n    vec3 col1 = vec3(0,0,0), col2 = vec3(1,1,1);\n    vec3 col = col1;\n    \n    vec2 power = pos;\n    vec2 c = power;\n    \n    for(int i = 0; i < iterations; i++){\n        c = complexPow(power,c);\n        \n        if(dot(c,c) > 2500.0){\n            float value = smoothstep(0.0,log(float(iterations)),float(i));\n            \n            col = mix(col,col2,value);\n            break;\n        }\n    }\n    \n    fragColor = vec4(col,1);\n    \n}","name":"Image","description":"","type":"image"}]}