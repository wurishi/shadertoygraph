{"ver":"0.1","info":{"id":"43B3zz","date":"1708095136","viewed":86,"name":"Null Space","username":"Astral","description":"Rotating Null Space","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["nullspace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shadertoy GLSL\n// Author: Amir Rezaei\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Time variable for animation\n    float time = iTime * 0.05;\n\n    // Aspect ratio correction\n    vec2 uv = sin(time)*(fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    // Pattern setup\n    float pattern = 0.0;\n    vec2 grid = vec2(20.0, 20.0); // Define the number of cubes along x and y\n\n    // Loop to create pattern\n    for (int x = 0; x < int(grid.x); ++x) {\n        for (int y = 0; y < int(grid.y); ++y) {\n            // Grid position\n            vec2 pos = vec2(float(x), float(y));\n            \n            // Animate rotation\n            float rot = sin(time + float(x) * float(y)) * 1.0;\n\n            // Define the center of the cube and rotate uv coordinates\n            uv = mat2(cos(rot), -sin(rot), sin(rot), cos(rot)) * uv;\n\n            // Add cube pattern to the grid\n            vec2 r = abs(fract(uv * grid * 0.5) - 0.5);\n            float d = max(r.x, r.y) - 0.485; // Cube size\n            pattern = 0.8*max(pattern, 1.0 - smoothstep(0.0, 0.01, d));\n        }\n    }\n\n    // Coloring\n    vec3 color = mix(vec3(1.0), vec3(0.0), pattern*2.0);\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4))*sin(time);\n    \n    // Output to screen\n    fragColor = vec4(color+col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}