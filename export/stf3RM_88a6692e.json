{"ver":"0.1","info":{"id":"stf3RM","date":"1621763976","viewed":168,"name":"flow noise test 2","username":"RiceFields","description":"noise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","lava","flow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define OCTAVES 2\n#define LACUNARITY 2.0\n#define GAIN 0.5\n\nvec2 rotate2d(vec2 uv, float angle) {\n    mat2 mat = mat2(cos(angle), -sin(angle), sin(angle), cos(angle)); \n    return (mat*(uv));\n}\n\n\nvec2 random2(vec2 uv){\n    uv = vec2( dot(uv,vec2(127.1,311.7)), dot(uv,vec2(269.5,183.3)) );\n    vec2 v = -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);  \n    v = rotate2d(v, iTime); // rotated random direction\n    return v;\n}\n\n\nfloat noise(vec2 uv) {\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n    \n    // four corners\n    float a = dot( random2(i + vec2(0.0,0.0) ), f);\n    float b = dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) );\n    float c = dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) );\n    float d = dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) );\n    \n    // interplation, cubic hermite\n    vec2 u = f*f*(3.0 - 2.0*f);\n    \n    return mix(mix(a,b, u.x), mix(c, d, u.x), u.y);\n}\n\nfloat fbm(vec2 uv) {\n    float v = 0.0f;\n    float amplitude = 0.5f;\n    float frequency = 5.0f;\n    \n    for(int i = 0; i < OCTAVES; ++i) {\n        float n = abs(noise((uv)*frequency)); //abs(noise) - turbulence, create creases\n        \n        // creating ridge\n        n = 1.0f - n; // invert so creases are at top\n        n *= n*n; // sharpen creases\n        \n        v += amplitude * n; \n        frequency *= LACUNARITY;\n        amplitude *= GAIN;\n    }\n    return v*2.0f - 0.5f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.y;\n\n    float f = fbm(uv);\n    \n    vec3 col = mix(vec3(0.81,0.06,0.13), vec3(0.80,0.40,0.00), f*f);\n    \n    //float u = f; // fix saturation linearly\n    float u = f*f*(3.0f - 2.0f*f); // fix saturation with cubic hermite - looks more natural\n    col *= u; \n    \n    // Output to screen\n    fragColor = vec4(vec3(3.0f*col),1.0);\n}","name":"Image","description":"","type":"image"}]}