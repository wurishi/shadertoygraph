{"ver":"0.1","info":{"id":"wtBSWw","date":"1566050470","viewed":904,"name":"Conservative Particle Grid","username":"paniq","description":"simulating particles on a grid without accidentally duplicating or deleting any particle. Particles start from a random position and then move along the cloud gradient.","likes":16,"published":3,"flags":32,"usePreview":0,"tags":["grid","particles","conservative"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 p = ivec2(fragCoord);\n\n    vec4 bg = texelFetch(iChannel2, p, 0);\n    vec4 col = texelFetch(iChannel1, p, 0);\n    \n    col = col / (col + 1.0);\n    col += clamp(bg, 0.0, 1.0);\n    col = pow(col, vec4(0.4545));\n    \n    fragColor = vec4(col.xyz,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 sr = ivec2(iResolution.xy);\n    ivec2 p = ivec2(fragCoord);\n    if (iFrame < 120) {\n        Data data;\n        data.pos = vec2(0.5);\n        if (hash12(fragCoord) < 0.01) {\n            data.vel = vec2(0.1, 0.0);//(hash22(fragCoord) * 2.0 - 1.0);\n            data.orig = ivec2(hash22(fragCoord) * iResolution.xy);\n        } else {\n            data.orig = ivec2(65535);\n        }\n        fragColor = from_data(data);\n        return;\n    }\n    \n    // velocity field\n    vec2 velf = -texelFetch(iChannel1, p, 0).rg;\n    // gradient is orthogonal to vector field\n    velf = vec2(velf.y, -velf.x);\n    Data c = to_data(texelFetch(iChannel0, p, 0));\n    if (c.orig.x == 65535) {\n        // find exactly one neighbor candidate\n        Data newc;\n        int numc = 0;\n        bool moved = false;\n        for (int y = -1; y <= 1; ++y) {\n            for (int x = -1; x <= 1; ++x) {\n                ivec2 up = (p + ivec2(x,y) + sr) % sr;\n                if (up == p)\n                    continue;\n                Data n = to_data(texelFetch(iChannel0, up, 0));\n                if (n.orig.x == 65535) continue;\n                numc++;\n                vec2 np = vec2(up) + n.pos + n.vel;\n                ivec2 inp = (ivec2(np) + sr) % sr;\n                if (inp == p) {\n                    moved = true;\n                    newc = n;\n                    newc.pos = fract(np);\n                }                \n            }\n        }        \n        if ((numc == 1) && moved) {\n            c = newc;\n        }\n    } else {\n        c.vel = c.vel + velf * 0.1;\n        float L = length(c.vel);\n        if (L > 0.5) {\n            c.vel = c.vel / L * 0.5;\n        }\n        \n    \tvec2 np = vec2(p) + c.pos + c.vel;\n    \tivec2 inp = (ivec2(np) + sr) % sr;\n        if (inp == p) {\n            // intra-cell movement\n            c.pos = fract(c.pos + c.vel);\n        } else {\n            // cross cell movement\n            bool blocked = false;\n            for (int y = -1; y <= 1; ++y) {\n                for (int x = -1; x <= 1; ++x) {\n                    ivec2 up = (inp + ivec2(x,y) + sr) % sr;\n                    if (up == p)\n                        continue;\n                    Data n = to_data(texelFetch(iChannel0, up, 0));\n                    if (n.orig.x != 65535) {\n                        blocked = true;\n                    }\n                }\n            }\n            if (!blocked) {\n                // we can clear here\n                c.orig = ivec2(65535);\n            } else {\n                // deflect\n                c.vel = vec2(-c.vel.y, c.vel.x);\n            }\n        }\n    }\n    \n    fragColor = from_data(c);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"struct Data {\n\t// position within cell (0..1)\n\tvec2 pos;\n    // velocity (max length 1)\n    vec2 vel;\n    // where this cell came from\n    ivec2 orig;\n};\n\nData to_data(vec4 q) {\n    uvec3 d = floatBitsToUint(q.xyz);\n    return Data(\n        \tvec2(d.x & 65535u, (d.x >> 16) & 65535u) / 65535.0,\n        \t(vec2(d.y & 65535u, (d.y >> 16) & 65535u) / 65535.0) * 2.0 - 1.0,\n        \tivec2(d.z & 65535u, (d.z >> 16) & 65535u)\n        );\n}\n\nvec4 from_data(Data data) {\n    uvec2 pos = uvec2(clamp(data.pos, 0.0, 1.0) * 65535.0);\n    uvec2 vel = uvec2(clamp(data.vel * 0.5 + 0.5, 0.0, 1.0) * 65535.0);\n    uvec2 orig = uvec2(data.orig);\n    return vec4(\n        uintBitsToFloat(pos.x | (pos.y << 16)),\n        uintBitsToFloat(vel.x | (vel.y << 16)),\n        uintBitsToFloat(orig.x | (orig.y << 16)),\n        0.0);\n}\n\nvec2 hash22(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 p = ivec2(fragCoord);\n    \n    vec4 oldcol = texelFetch(iChannel2, p, 0);\n    vec4 col = vec4(0.0);\n    for (int y = -1; y <= 1; ++y) {\n        for (int x = -1; x <= 1; ++x) {\n            ivec2 np = p + ivec2(x,y);\n            vec4 q = texelFetch(iChannel0, np, 0);\n\t\t    Data data = to_data(q);\n            if (data.orig.x != 65535) {\n                vec3 color = vec3(vec2(data.orig) / iResolution.xy, 0.0);\n                color.z = max(0.0, 1.0 - color.r - color.g);\n                color = normalize(color);\n                vec2 fc = vec2(np) + data.pos;\n                vec2 d = (fc - fragCoord);\n                float w = exp2(-dot(d,d));\n                col += vec4(color * w,1.0);\n            }\n        }\n    }\n                \n\tfragColor = oldcol * 0.9 + col;\n\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 c = vec4(0.0);\n    vec2 uv = fragCoord / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 p = vec2(0.5, 0.5) + iTime * vec2(0.1,0.3) * 0.001;\n    float w = 0.0;\n    for (int i = 0; i < 3; ++i) {\n        float x = exp2(-float(i));\n        c += (texture(iChannel0, p + uv / x * exp(-3.0)) * 2.0 - 1.0) * x;\n        w += x;\n    }\n    c /= w;\n    fragColor = vec4(c.r * 0.5 + 0.5);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float d = texelFetch(iChannel0, ivec2(fragCoord), 0).r;\n    \n    vec2 v = vec2(dFdx(d), dFdy(d))*100.0;\n    \n    fragColor = vec4(v,0,0);\n}","name":"Buffer D","description":"","type":"buffer"}]}