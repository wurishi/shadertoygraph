{"ver":"0.1","info":{"id":"ft3yDB","date":"1663004100","viewed":128,"name":"outerwilds suit hud(WIP)","username":"aliiscript","description":"attempt at making oxygen and fuel hud from outerwilds when in suit\nBlur used from user robobo1221 (thx)","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["postprocessing","hud"],"hasliked":0,"parentid":"fl3yW7","parentname":"polar coords starter"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define colorRange 24.0\n\nvec3 jodieReinhardTonemap(vec3 c){\n    float l = dot(c, vec3(0.2126, 0.7152, 0.0722));\n    vec3 tc = c / (c + 1.0);\n\n    return mix(c / (l + 1.0), tc, tc);\n}\n\nvec3 bloomTile(float lod, vec2 offset, vec2 uv){\n    return texture(iChannel1, uv * exp2(-lod) + offset).rgb;\n}\n\nvec3 getBloom(vec2 uv){\n\n    vec3 blur = vec3(0.0);\n\n    blur = pow(bloomTile(2., vec2(0.0,0.0), uv),vec3(2.2))       \t   \t+ blur;\n    blur = pow(bloomTile(3., vec2(0.3,0.0), uv),vec3(2.2)) * 1.3        + blur;\n    blur = pow(bloomTile(4., vec2(0.0,0.3), uv),vec3(2.2)) * 1.6        + blur;\n    blur = pow(bloomTile(5., vec2(0.1,0.3), uv),vec3(2.2)) * 1.9 \t   \t+ blur;\n    blur = pow(bloomTile(6., vec2(0.2,0.3), uv),vec3(2.2)) * 2.2 \t   \t+ blur;\n\n    return blur * colorRange;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = pow(texture(iChannel0, uv).rgb * colorRange, vec3(2.2));\n    color = pow(color, vec3(2.2));\n    color += pow(getBloom(uv), vec3(2.2));\n    color = pow(color, vec3(1.0 / 2.2));\n    \n    color = jodieReinhardTonemap(color);\n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n#define colorRange 24.0\n\nvec3 getTexture(vec2 uv){\n    vec4 textureSample = texture(iChannel0, uv);\n\treturn sqrt(textureSample.rgb * textureSample.a);\n}\n\n// stroke function makes it an outline of that sdf thats passed to it\nfloat outlinedShape(float x, float s, float w) {\n    float d = step(s, x+w*.5) - step(s, x-w*.5);\n    return clamp(d, 0.0, 1.0);\n}\n\nfloat rectSDF(vec2 st, vec2 s) {\n    st = st*2.0-1.0;\n    return max(abs(st.x/s.x), abs(st.y/s.y));\n}\n\nfloat square(vec2 st, vec4 dimensions) {\n    float lW = dimensions.x;\n    float bH = dimensions.y;\n    float rW = dimensions.z;\n    float tH = dimensions.w;\n    vec2 bl = step(vec2(lW, bH),st);\n    vec2 tr = step(vec2(rW, tH),1.0-st);\n    \n    float square = bl.x * bl.y * tr.x * tr.y;\n    \n    return square;\n}\n\nfloat dashCircle(vec2 uv) {\n    float circle = 0.0;\n    \n    //Get Distance and Angle of each pixel\n    float radius = length(uv) + .045;\n    // multplied by 180 and divided by PI to convert from radian to degrees\n    // did this to get the whole range of \"angles\"\n    float angle  = 180.0 * atan(uv.x,uv.y) / PI;\n    \n    float gap = 98.0;\n    \n    float offset = 195.0;\n    \n    // make sure divisble by 360.0\n    float dashNums = 2.0;\n    \n    float dashes = smoothstep(gap, gap +.1, abs(mod(angle+offset,360.0/dashNums)-offset));\n    \n    circle = dashes * radius;\n    \n    circle = smoothstep(.91, .9, circle)-smoothstep(.895, .894, circle);\n    \n    return circle;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Get the fragcoords / UV cordinates of the image \n    vec2 uv = fragCoord.xy;\n    \n    // Normalize UV map going from Zero to One i.e divide the frag coordinates by the maximum image width & height\n    uv = fragCoord.xy/iResolution.xy;\n    \n    // Offset cordinates to center 0.5\n    uv -= vec2(0.5,0.5);\n    \n    // set Image aspect to square or you will get an oval gradient instaed of a circular gradient    \n    uv *= iResolution.xy  / iResolution.y;\n        \n    // now our coordinates go from 0 - 0.5 and 0 to - 0.5. We want to remap cordinates going from -1 to +1 so we multiply by 2 \n    uv*=2.0;\n    \n    //Get Distance and Angle of each pixel\n    float radius = length(uv);\n    float angle  = atan(uv.y,uv.x);\n\n    vec3 color = vec3( 0.0 );\n    \n    float r2 = .6;\n    float a2 = atan(uv.x,uv.y);\n    \n    float tlRectSlider = sin(iTime);\n    \n    // Polar Rectangle\n    \n    // TR rectangle \n    float tlRect = square(vec2(radius, (a2  * -PI/5.) - .1), vec4(r2, .0, .2, .0));\n    float tlRectOutline = square(vec2(radius, (a2 * -PI/5.) - .1), vec4(.59, -0.01, .19, -0.01));\n    \n    float brRect = square(vec2(radius, (-angle * PI/5.) + .1), vec4(r2, 0.0, .2, 0.0));\n    float brRectOutline = square(vec2(radius, (-angle * PI/5.) + .1), vec4(.59, -0.01, .19, -0.01));\n    \n    float thinBrRect = square(vec2(radius, (-angle* PI/5.) + .1), vec4(.9, 0.0, .06, 0.0));\n    vec4 outline = vec4(.59, -0.01, .19, -0.01);\n    float thinBrRectOutline = square(vec2(radius, (-angle * PI/5.) + .1), vec4(.89, -0.01, .05, -0.01));\n    \n    // Cartesian Rectangle\n    //float cartRect = 1.0 - square(uv, vec4(.1));\n    \n    // Dash Circle\n    \n    float circle = dashCircle(uv);\n    \n    // Colors \n    vec3 o2Color = vec3(2.0, 12.0, 30.0) * .5;\n    \n    //vec3 fuelColor = vec3(255.0/255.0, 127.0/255.0, 80.0/255.0);\n    vec3 fuelColor = vec3(30.0, 15.0, 2.0) * .5;\n    \n    //vec3 boostColor = vec3(255.0/255.0, 215.0/255.0, 0.0/255.0);\n    vec3 boostColor = vec3(30.0, 25.0, 0.0) * .5;\n    \n    // bloom boost color =  vec3(30.0, 12.0, 2.0) * 2.0\n    \n    vec3 mixColor = mix(fuelColor, boostColor +  vec3(.2), uv.x);\n    \n    \n    color += vec3(tlRect) * o2Color;\n    \n    color += vec3(brRect) * mixColor;\n    \n    color += vec3(thinBrRect) * boostColor;\n    \n    if (color == vec3(0.0)) {\n        color = vec3(tlRectOutline) * vec3(30.0) * .5;\n        color += vec3(brRectOutline) * vec3(30.0) * .5;\n        color += vec3(thinBrRectOutline) * vec3(30.0) * .5;\n    };\n    \n    //color = pow(getTexture(uv), vec3(1.2));\n    color += vec3(circle);\n    \n\tfragColor = vec4(pow(color, vec3(1.0 / 2.2)) / colorRange,1.0);  \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec3 makeBloom(float lod, vec2 offset, vec2 bCoord){\n    \n    vec2 pixelSize = 1.0 / vec2(iResolution.x, iResolution.y);\n\n    offset += pixelSize;\n\n    float lodFactor = exp2(lod);\n\n    vec3 bloom = vec3(0.0);\n    vec2 scale = lodFactor * pixelSize;\n\n    vec2 coord = (bCoord.xy-offset)*lodFactor;\n    float totalWeight = 0.0;\n\n    if (any(greaterThanEqual(abs(coord - 0.5), scale + 0.5)))\n        return vec3(0.0);\n\n    for (int i = -5; i < 5; i++) {\n        for (int j = -5; j < 5; j++) {\n\n            float wg = pow(1.0-length(vec2(i,j)) * 0.125,6.0);\n\n            bloom = pow(texture(iChannel0,vec2(i,j) * scale + lodFactor * pixelSize + coord, lod).rgb,vec3(2.2))*wg + bloom;\n            totalWeight += wg;\n\n        }\n    }\n\n    bloom /= totalWeight;\n\n    return bloom;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n\tvec3 blur = makeBloom(2.,vec2(0.0,0.0), uv);\n\t\tblur += makeBloom(3.,vec2(0.3,0.0), uv);\n\t\tblur += makeBloom(4.,vec2(0.0,0.3), uv);\n\t\tblur += makeBloom(5.,vec2(0.1,0.3), uv);\n\t\tblur += makeBloom(6.,vec2(0.2,0.3), uv);\n\n    fragColor = vec4(pow(blur, vec3(1.0 / 2.2)),1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}