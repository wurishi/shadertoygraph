{"ver":"0.1","info":{"id":"NlKczy","date":"1661757442","viewed":305,"name":"Bilateral Filtering","username":"yd4011439","description":"This shader implements the bilateral filtering which is an edge preserving - smoothing filter!","likes":10,"published":1,"flags":0,"usePreview":1,"tags":["bilateralfiltering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Half the window size the actual size of window will be 2*HW + 1\n#define HW 7\n#define sigmaSpace 10.0\n#define sigmaColor 25.0\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if(uv.x<0.5){\n        fragColor = texture(iChannel0, uv);\n        return;\n    }\n    \n    uv.x = uv.x - 0.5;\n    vec4 I = texture(iChannel0, uv);\n    if(uv.y>0.0){\n        // Bilateral Filter\n        // Caluclate the 2*sigma^2 of both\n        float Ss = pow(sigmaSpace, 2.0)*2.0;\n        float Sc = pow(sigmaColor, 2.0)*2.0;\n\n        highp vec4 TW = vec4(0.0); // Sum of Weights\n        highp vec4 WI = vec4(0.0); // Sum of Weighted Intensities\n        highp vec4 w;\n        for(int i=-HW;i<=HW;i++){\n            for(int j=-HW;j<=HW;j++){\n               vec2 dx = vec2(float(i), float(j));\n               vec2 tc = uv + dx/iResolution.xy;\n               vec4 Iw = texture(iChannel0, tc);\n               vec4 dc = (I-Iw)*255.0;\n\n               w = exp(-dot(dx,dx)/Ss - dc*dc/Sc);\n               TW += w;\n               WI += Iw * w;\n            }\n        }\n        \n        fragColor = vec4((WI/TW).rgb, 1.0);\n        \n    }else{\n        // Mean Blur\n        highp vec4 TI = vec4(0.0);\n        for(int i=-HW;i<=HW;i++){\n            for(int j=-HW;j<=HW;j++){\n               vec2 dx = vec2(float(i), float(j));\n               vec2 tc = uv + dx/iResolution.xy;\n               vec4 Iw = texture(iChannel0, tc);\n               TI += Iw;\n             }\n        }\n        float ksq = (2.0*float(HW)+1.0);\n        ksq = ksq*ksq;\n        fragColor = vec4((TI/ksq).rgb, 1.0);\n    }\n    \n}","name":"Image","description":"","type":"image"}]}