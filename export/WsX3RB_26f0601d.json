{"ver":"0.1","info":{"id":"WsX3RB","date":"1546601075","viewed":155,"name":"First Audio Visual Test","username":"aadebdeb","description":"my first audio visual shaders","likes":1,"published":1,"flags":8,"usePreview":0,"tags":["sound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592654\n#define TAU 6.283185307\n\n#define BPM 128.0\n#define SECONDS_PER_MINUTE 60.0\n\nfloat noise(float time) {\n  return (fract(sin(time * 3424.233) * 7432.212 + 4234.123)) * 2.0 - 1.0;\n}\n\nfloat sine(float phase) {\n  return 2.0 * sin(phase * TAU) - 1.0;\n}\n\nfloat square(float phase) {\n  return fract(phase) < 0.5 ? -1.0 : 1.0;\n}\n\nfloat kick(float time) {\n  float amp = exp(-12.0 * time);\n  return amp;\n}\n\nfloat snare(float time) {\n  return 0.7 * exp(-20.0 * time) + 0.3 * exp(-10.0 * time);\n}\n\nfloat hihat(float time) {\n  return exp(-100.0 * time);\n}\n\nfloat kickAmp(float time) {\n  float beat = time / SECONDS_PER_MINUTE * BPM;\n  float bar = mod(beat * 0.25, 4.0);\n  int bari = int(bar) % 4;\n  float barTime = fract(bar) * SECONDS_PER_MINUTE / (BPM * 0.25); \n  float note4 = mod(beat, 4.0); // [0, 4.0]\n  int note4i = int(note4);\n  float note4Time = fract(note4) * SECONDS_PER_MINUTE / BPM;\n  float note8 = mod(beat * 2.0, 8.0); // [0, 8.0)\n  int note8i = int(note8);\n  float note8Time = fract(note8) * SECONDS_PER_MINUTE / (BPM * 2.0);\n  float note16 = mod(beat * 4.0, 16.0); // [0, 16.0)\n  int note16i = int(note16);\n  float note16Time = fract(beat * 4.0) * SECONDS_PER_MINUTE / (BPM * 4.0);\n\n  float res = 0.0;\n\n  if (bari == 0 || bari == 2) {\n    if (note8i == 0 || note8i == 4) {\n       res += 0.8 * kick(note8Time);\n    }\n  } else if (bari == 1) {\n    if (note8i == 0 || note8i == 4) {\n      res += 0.8 * kick(note8Time);\n    }\n  } else if (bari == 3) {\n    if (note8i == 0) {\n      res += 0.8 * kick(note8Time);\n    }\n    if (note16i == 8 || note16i == 9 || note16i == 12 || note16i == 14) {\n      res += 0.8 * kick(note16Time);\n    }\n  }\n  return clamp(res, -1.0, 1.0);\n}\n\nfloat snareAmp(float time) {\n  float beat = time / SECONDS_PER_MINUTE * BPM;\n  float bar = mod(beat * 0.25, 4.0);\n  int bari = int(bar) % 4;\n  float barTime = fract(bar) * SECONDS_PER_MINUTE / (BPM * 0.25); \n  float note4 = mod(beat, 4.0); // [0, 4.0]\n  int note4i = int(note4);\n  float note4Time = fract(note4) * SECONDS_PER_MINUTE / BPM;\n  float note8 = mod(beat * 2.0, 8.0); // [0, 8.0)\n  int note8i = int(note8);\n  float note8Time = fract(note8) * SECONDS_PER_MINUTE / (BPM * 2.0);\n  float note16 = mod(beat * 4.0, 16.0); // [0, 16.0)\n  int note16i = int(note16);\n  float note16Time = fract(beat * 4.0) * SECONDS_PER_MINUTE / (BPM * 4.0);\n\n  float res = 0.0;\n\n  if (bari == 0 || bari == 2) {\n    if (note8i == 2 || note8i == 6) {\n      res += 0.5 * snare(note8Time);\n    }\n  } else if (bari == 1) {\n    if (note8i == 2 || note8i == 6 || note8i == 7) {\n      res += 0.5 * snare(note8Time);\n    }\n  } else if (bari == 3) {\n    if (note16i == 4 || note16i == 10 || note16i == 15) {\n      res += 0.5 * snare(note16Time);\n    }\n  }\n\n  return clamp(res, -1.0, 1.0);\n}\n\nfloat hihatAmp(float time) {\n  float beat = time / SECONDS_PER_MINUTE * BPM;\n  float note16 = mod(beat * 4.0, 16.0); // [0, 16.0)\n  int note16i = int(note16);\n  float note16Time = fract(beat * 4.0) * SECONDS_PER_MINUTE / (BPM * 4.0);\n\n  return 0.2 * hihat(note16Time);  \n}\n\nfloat sphere(vec3 p, float r) {\n  return length(p) - r;\n}\n\nvec4 minDist(vec4 a, vec4 b) {\n  if (a.w < b.w) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\nvec4 map(vec3 p) {\n  vec4 res = vec4(vec3(0.0), 10000.0);\n  res = minDist(res, vec4(vec3(1.0, 0.0, 0.0), sphere(p - vec3(2.4, -1.0, 2.0), 2.0 + 1.0 * kickAmp(iTime))));\n  res = minDist(res, vec4(vec3(0.0, 1.0, 0.0), sphere(p - vec3(-3.0, 2.0, 0.0), 1.5 + 1.2 * snareAmp(iTime))));\n  res = minDist(res, vec4(vec3(0.0, 0.0, 1.0), sphere(p - vec3(0.0, -0.5, -2.0), 1.2 + 1.6 * hihatAmp(iTime))));\n  return res;\n}\n\nvec3 calcNormal(vec3 p) {\n    float d = 0.01;\n    return normalize(vec3(\n        map(p + vec3(d, 0.0, 0.0)).w - map(p - vec3(d, 0.0, 0.0)).w,\n        map(p + vec3(0.0, d, 0.0)).w - map(p - vec3(0.0, d, 0.0)).w,\n        map(p + vec3(0.0, 0.0, d)).w - map(p - vec3(0.0, 0.0, d)).w\n    ));\n}\n\nvec3 lightDir = normalize(vec3(1.0));\n\nbool raymarch(vec3 ro, vec3 rd, out vec3 col) {\n    vec3 p = ro;\n    for (int i = 0; i < 64; i++) {\n        vec4 m = map(p);\n        float d = m.w;\n        p += d * rd;\n        if (d < 0.01) {\n            vec3 c = m.rgb;\n            vec3 n = calcNormal(p);\n            col = c * max(0.0, dot(n, lightDir)) + c * 0.2;\n            return true;\n        }\n    }\n    return false;\n}\n\nvec3 background(vec2 st) {\n  return mix(vec3(0.7), vec3(0.4), smoothstep(0.5, 2.0, length(st)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = (2.0 * fragCoord.xy - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    vec3 ro = vec3(8.0 * cos(iTime), 3.0 * sin(iTime * 0.8), 8.0 * sin(iTime));\n    vec3 ta = vec3(0.0);\n    vec3 z = normalize(ta - ro);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 x = normalize(cross(z, up));\n    vec3 y = normalize(cross(x, z));\n    vec3 rd = normalize(x * st.x + y * st.y + z * 1.5);\n\n    vec3 c;\n    if (!raymarch(ro, rd, c)) {\n      c = background(st);\n    }\n\n    fragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.141592654\n#define TAU 6.283185307\n\n#define BPM 128.0\n#define SECONDS_PER_MINUTE 60.0\n\nfloat noise(float time) {\n  return (fract(sin(time * 3424.233) * 7432.212 + 4234.123)) * 2.0 - 1.0;\n}\n\nfloat sine(float phase) {\n  return 2.0 * sin(phase * TAU) - 1.0;\n}\n\nfloat square(float phase) {\n  return fract(phase) < 0.5 ? -1.0 : 1.0;\n}\n\nfloat kick(float time) {\n  float amp = exp(-12.0 * time);\n  float freq = 40.0+ 25.0 * exp(-8.0 * time);\n  return mix(sine(freq * time), square(freq * time), 0.3) * amp;\n}\n\nfloat snare(float time) {\n  float freq = 100.0 + 40.0 * exp(-10.0 * time);\n  return 0.7 * sine(freq * time) * exp(-20.0 * time) + 0.3 * noise(time) * exp(-10.0 * time);\n}\n\nfloat hihat(float time) {\n  return noise(time) * exp(-100.0 * time);\n}\n\nvec2 mainSound( in int samp,float time) {\n  float beat = time / SECONDS_PER_MINUTE * BPM;\n  float bar = mod(beat * 0.25, 4.0);\n  int bari = int(bar) % 4;\n  float barTime = fract(bar) * SECONDS_PER_MINUTE / (BPM * 0.25); \n  float note4 = mod(beat, 4.0); // [0, 4.0]\n  int note4i = int(note4);\n  float note4Time = fract(note4) * SECONDS_PER_MINUTE / BPM;\n  float note8 = mod(beat * 2.0, 8.0); // [0, 8.0)\n  int note8i = int(note8);\n  float note8Time = fract(note8) * SECONDS_PER_MINUTE / (BPM * 2.0);\n  float note16 = mod(beat * 4.0, 16.0); // [0, 16.0)\n  int note16i = int(note16);\n  float note16Time = fract(beat * 4.0) * SECONDS_PER_MINUTE / (BPM * 4.0);\n\n  vec2 res = vec2(0.0);\n\n  if (bari == 0 || bari == 2) {\n    if (note8i == 0 || note8i == 4) {\n       res += 0.8 * kick(note8Time);\n    }\n    if (note8i == 2 || note8i == 6) {\n      res += 0.5 * snare(note8Time);\n    }\n    if (note16i != 0) {\n      res += 0.2 * hihat(note16Time);\n    }\n  } else if (bari == 1) {\n    if (note8i == 0 || note8i == 4) {\n      res += 0.8 * kick(note8Time);\n    }\n    if (note8i == 2 || note8i == 6 || note8i == 7) {\n      res += 0.5 * snare(note8Time);\n    }\n    res += 0.2 * hihat(note16Time);\n  } else if (bari == 3) {\n    if (note8i == 0) {\n      res += 0.8 * kick(note8Time);\n    }\n    if (note16i == 8 || note16i == 9 || note16i == 12 || note16i == 14) {\n      res += 0.8 * kick(note16Time);\n    }\n    if (note16i == 4 || note16i == 10 || note16i == 15) {\n      res += 0.5 * snare(note16Time);\n    }\n    res += 0.2 * hihat(note16Time);  \n  }\n\n  return clamp(res, -1.0, 1.0);\n}","name":"Sound","description":"","type":"sound"}]}