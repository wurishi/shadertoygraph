{"ver":"0.1","info":{"id":"mtfBz8","date":"1692588954","viewed":48,"name":"Ray-Sphere refraction (2d slice)","username":"Envy24","description":".","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","ray","refraction","sphere","intersection"],"hasliked":0,"parentid":"ctByzm","parentname":"Ray-Sphere (2d slice)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Scene defined in 3d, but you see just a slice for some z value.\n    Drag magenta dot to change ray direction (camera look_at).\n    \n    Debug:\n        Lower left dots - last executed branch (case),\n        Lower right dots - picked root (if any).\n        Dots decreases in size as iteration count increases.\n*/\n\n#define ORIGIN                    ( vec2(0) )\n#define SCENE_SCALE               ( 2.5 )\n#define UNIT                      ( 4.0*SCENE_SCALE / iResolution.y )          // Affects AA and thickness\n#define SMAA(x)                   ( smoothstep(UNIT, 0., x) )\n\n/* https://www.shadertoy.com/view/DdsGDj */\n#define MOUSE_OFFSET ( iMouse.z > 0. ? iMouse.xy - iResolution.xy * 0.5 : vec2(0) )\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin, in bool mouse_drag)\n{\n    vec2 M = MOUSE_OFFSET * (mouse_drag == true ? 1. : 0.);\n    return ((2. * (SC - M) - iResolution.xy) / iResolution.y) * scale - origin;\n}\n \nstruct RAY\n{\n    vec3 position;\n    vec3 direction;\n};\nstruct HIT\n{\n    bool hit_something;\n    float hit_dist;\n    vec3 hit_point;\n    vec3 hp_normal;\n    int hitted_idx;\n    float is_inside;\n};\nvec3 debug_color = vec3(0);\nvec3 root_color = vec3(0);\nHIT ray_unit_sphere_int(RAY ray) // sphere_pos always equals vec3(0), and sphere_r equals to 1.\n{\n    float half_b = dot(ray.position, ray.direction),\n          c = dot(ray.position, ray.position) - 1.,\n          discriminant = (half_b * half_b - c),\n          sqrt_D = sqrt(discriminant),\n          rootA = -half_b - sqrt_D,\n          rootB = -half_b + sqrt_D;\n    \n    HIT hit;   \n    \n    // Mark negative roots as \"infinite\".\n    rootA = rootA < 0. ? 9e5 : rootA;\n    rootB = rootB < 0. ? 9e5 : rootB;\n    \n    float root = min(rootA, rootB);\n    \n    if (discriminant < 0. || // no real roots?\n        root == 9e5)         // behind camera?\n    { \n        debug_color = vec3(1,0,0);\n        hit.hit_something = false; \n        return hit; \n    }\n    \n    \n    hit.hit_something = true;\n    hit.hit_dist = root;\n    hit.hit_point = ray.position + ray.direction * root;\n    hit.hp_normal = normalize(hit.hit_point);\n    hit.is_inside = float(dot(ray.position, ray.position) < 1.);\n    \n    debug_color = vec3(0,1,0);\n    root_color = root == rootA ? vec3(1,0,0) : vec3(0,1,0);\n    \n    return hit;\n}\n\nfloat implicit(float x, float y, float z) { return x*x + y*y + z*z - 1.; }\nfloat implicitAA( in vec3 P )\n{\n    float coverage = 0., // You can cheat and set this variable to some negative value.\n          th = 6.,        // thickness\n          c = implicit(P.x, P.y, P.z) >= 0. ? 1. : -1.; // only sign\n    \n    vec2 ps = vec2(0.65*SCENE_SCALE/iResolution.y); // affects thickness and artifacts\n   \n    // Supersampling.\n    for (float y = -th; y <= th; y += 1.)\n        for (float x = -th; x <= th; x += 1.)\n        {\n            vec3 p = P + vec3(x, y, 0)*vec3(ps, 0);\n            float n = implicit(p.x, p.y, p.z);\n            \n            /* 1. Filled shape *\n            coverage += n >= 0.0 ? 0.0 : 1.0;\n            /* 2. Shape contour */\n            n = n >= 0.0 ? 1. : -1.;\n            coverage += c == n ? 0. : 1.;\n            /**/\n        }\n  \n    // Convert coverage into intensity (.35 is arbitrary weight for AA).\n    return smoothstep(0., th*th, coverage*0.35);\n}\n \nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = map_to_centered_ndc(SC, SCENE_SCALE, ORIGIN, false),\n         MP = iMouse.xy == vec2(0) ? vec2(0,1) :  \n              map_to_centered_ndc(iMouse.xy, SCENE_SCALE, ORIGIN, false);\n\n    vec3 color = vec3(1);\n         color = mix( color, vec3(0.8), SMAA(cellsSDF(NDC)) );\n         \n    // Z for slice.\n    float z_coord = 0.;\n          //z_coord = MP.y;\n          \n    // Draw 2d slice.\n    vec3 point3d = vec3(NDC, z_coord);\n    //color = mix(color, vec3(1,0,0), SMAA(diskSDF(NDC, vec2(0), 0.02)));\n    color = mix(color, vec3(0,0,1), implicitAA(point3d));\n    \n    // Ray position, direction.\n    float T = iTime * 0.2;\n    vec3 r_orig = vec3(-2.5, 0., z_coord), // outside sphere\n         //r_orig = vec3(-2.5, 0.6, z_coord), // outside sphere\n         //r_orig = vec3(-0.1, 0.6, z_coord), // inside sphere\n         //r_orig = vec3(2. * cos(T), 2. * sin(cos(T*2.5)), z_coord),\n         //r_orig = vec3(MP, z_coord),\n         //r_dir = normalize(vec3(0.5, -0.2, z_coord) - r_orig);\n         r_dir = normalize(vec3(MP, z_coord) - r_orig);\n     \n    // Camera position, view direction, and ray.\n    color = mix(color, vec3(0.5), SMAA(diskSDF(NDC, r_orig.xy, 0.03)));  \n    color = mix(color, vec3(0.7), SMAA(segmentSDF(NDC, r_orig.xy, (r_orig+r_dir*100.).xy, 0.)));\n    color = mix(color, vec3(1,0,1), SMAA(arrowSDF(NDC, r_orig.xy, (r_orig+r_dir).xy, 0.)));\n    \n    // Intersection.\n    RAY ray = RAY(r_orig, r_dir);\n    HIT hit = ray_unit_sphere_int(ray);\n    \n    // Color for last executed branch.\n    color = mix(color, debug_color, SMAA(diskSDF(NDC, vec2(-4, -2), 0.125)));\n    color = mix(color, root_color, SMAA(diskSDF(NDC, vec2(-3, -2), 0.125)));\n    \n    // Primary hit?\n    if (hit.hit_something == true)\n    {\n        // Hit point and normal direction.\n        color = mix(color, vec3(0, 0.5, 0.5), SMAA(diskSDF(NDC, hit.hit_point.xy, 0.03)));\n        color = mix(color, vec3(0, 0.5, 0.5), SMAA(arrowSDF(NDC, hit.hit_point.xy, hit.hit_point.xy + hit.hp_normal.xy, 0.)));\n    \n    \n        const float glass_ior = 1.485;\n        const float liquid_helium_ior = 1.025;\n        const float air_ior = 1.000293;\n    \n        // Process refractions.\n\n        float inside_ior = glass_ior, outside_ior = air_ior, max_num_of_refr_rays = 2.;\n        for (float i = 0.; i < max_num_of_refr_rays; i += 1.)\n        {           \n            float ratio = hit.is_inside == 1. ? \n                outside_ior/inside_ior : // leaving primitive\n                inside_ior/outside_ior;  // entering primitive\n            vec3 refr_dir = \n                hit.is_inside == 1. ? // Leaving the primitive?\n                    refract(ray.direction, -hit.hp_normal, ratio) :\n                    refract(ray.direction,  hit.hp_normal, ratio);\n            RAY refr_ray = RAY(hit.hit_point+(refr_dir*0.01), refr_dir);\n\n            // Refracted direction, refracted ray, \n            float at = (100. + i*20.)/100.; // attenuation.\n            color = mix(color, vec3(0.7), SMAA(segmentSDF(NDC, hit.hit_point.xy, (hit.hit_point+refr_dir*100.).xy, 0.)));\n            color = mix(color, vec3(.1,.4,.7) * at, SMAA(arrowSDF(NDC, hit.hit_point.xy, hit.hit_point.xy + refr_dir.xy, 0.)));\n\n            // Trace scene with refracted ray.\n            HIT refr_hit = ray_unit_sphere_int(refr_ray);\n            \n            // Color for last executed branch.\n            at = (100. - i*40.)/100.; // attenuation.\n            color = mix(color, debug_color, SMAA(diskSDF(NDC, vec2(-4, -2), 0.1*at)));\n            color = mix(color, root_color, SMAA(diskSDF(NDC, vec2(-3, -2), 0.1*at)));\n\n            // Secondary, ternary, e.t.c. hit?\n            if (refr_hit.hit_something == true)\n            {\n                // Hit point and normal direction.\n                color = mix(color, vec3(0, 0.5, 0.5), SMAA(diskSDF(NDC, refr_hit.hit_point.xy, 0.03)));\n                color = mix(color, vec3(0, 0.5, 0.5), SMAA(arrowSDF(NDC, refr_hit.hit_point.xy, refr_hit.hit_point.xy + refr_hit.hp_normal.xy, 0.)));\n                \n                // Prepare data for next iteration.\n                ray = refr_ray;\n                hit = refr_hit;\n            }\n            else\n            {\n                // Miss, e.g. environment hit.\n                // Environment doesn't reflect or refract rays.\n                break;   \n            }           \n        }\n    }\n\n    color = mix( color, vec3(1,0,1), SMAA(diskSDF(NDC, MP, 0.03)) );    \n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float y_axisSDF(vec2 NDC) { return abs(NDC.x); }\nfloat x_axisSDF(vec2 NDC) { return abs(NDC.y); }\nfloat vertical_lineSDF(vec2 NDC, float x0) { return abs(NDC.x-x0); }\nfloat horizontal_lineSDF(vec2 NDC, float y0) { return abs(NDC.y-y0); }\nfloat cellsSDF(vec2 NDC)\n{\n    //NDC *= 2.; // Finer cell\n    NDC = fract(NDC);\n    NDC = fract(min(NDC, 1. - NDC));\n    return\n        min(vertical_lineSDF(NDC, 0.), horizontal_lineSDF(NDC, 0.));\n}\nfloat diskSDF(in vec2 NDC, in vec2 C, in float r) { return length(C - NDC)-r; }\nfloat segmentSDF(in vec2 NDC, in vec2 B, in vec2 E, in float r)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0)) - r;\n}\nfloat arrowSDF(\n    in vec2 NDC,\n    in vec2 B,\n    in vec2 E,\n    in float R)\n{\n    float len = length(B-E);    \n    vec2 dir = normalize(E-B),\n         //up = cross(vec3(dir, 0.), vec3(0, 0, -1)).xy,   \n         up = vec2(-dir.y, dir.x),\n         C = E - dir * 0.0475, //      U--\n         U = C + up  * 0.030,  // B----C----E\n         D = C - up  * 0.030;  //      D--\n    \n    vec3 BARY = inverse(mat3(\n            U.x, U.y, 1.0,\n            D.x, D.y, 1.0,\n            E.x, E.y, 1.0)) * vec3(NDC.x, NDC.y, 1.0);\n    \n    float sign = \n        BARY.x >= 0.0 &&    \n        BARY.y >= 0.0 && \n        BARY.z >= 0.0 ?  // inside triangle?\n            -1. : 1.;\n    \n    float d = segmentSDF(NDC, U, D, 0.);\n          d = min(d, segmentSDF(NDC, U, E, 0.));\n          d = min(d, segmentSDF(NDC, D, E, 0.));\n          d = \n              len < 0.0475 ? \n                  d :\n                  min(d, segmentSDF(NDC, B, C, 0.));\n    \n    return sign*d-R;           \n}\n\nvec3 refract_(vec3 direction, vec3 normal, float ratio)\n{\n    float cosTheta = dot(direction, normal),   \n          k = 1.0 - ratio * ratio * (1.0 - cosTheta * cosTheta);\n\n    return k < 0. ? vec3(0) : \n        ratio * direction - (ratio * cosTheta + sqrt(k)) * normal;\n}","name":"Common","description":"","type":"common"}]}