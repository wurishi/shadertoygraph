{"ver":"0.1","info":{"id":"XfjcWD","date":"1722409617","viewed":24,"name":"Strange space","username":"MonadoMaster0","description":"I was playing around with this piece of art:\nhttps://www.shadertoy.com/view/tsXBzS\n\nAnd came up with this. Its not as good but I found this interesting enough to share","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","spacemanipulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define RES iResolution.xy\n\n#define MAX_STEPS 50\n#define MAX_D 20.0\n#define MIN_D 0.001\n\n#define MAT_SP 1\n#define MAT_FR 2\n\nmat2 rot(float t) {\n    return mat2(cos(t),-sin(t),sin(t),cos(t));\n}\n\nvec3 getCam(vec2 uv, vec3 ro, vec3 la, float zoom) {\n    vec3 f = normalize(la-ro);\n    vec3 r = normalize(cross(f, vec3(0,1,0)));\n    vec3 u = cross(f,r);\n    \n    return normalize(f*zoom + r*uv.x + u*uv.y);\n}\n\nfloat sdTetra(vec3 p, float s) {\n    return dot(sign(p),p)-s;\n}\n\nvec2 map(vec3 p) {\n    float val=0.0;\n    int id;\n    \n    float obj1 = length(p)-0.3;\n    vec3 p1 = fract(p)-0.5;\n    p1.xz*=rot(iTime);\n    \n    float obj2;\n    vec3 p2 = p/length(p);\n    p2*=2.0;\n    for(int z=0;z<12;z++) {\n        p2.xz*=rot(iTime*0.2);\n        p2.xy*=rot(iTime*0.4);\n        p2.yz*=rot(-iTime*0.05);\n        p2.xz = abs(p2.xz);\n        p2-=0.5;\n    }\n    \n    obj1 = sdTetra(p1, 0.1);\n    obj2 = dot(sign(p2),p2)/5.0;\n    \n    val+= min(obj1,obj2);\n    \n    if(val==obj1) {id=MAT_SP;} else\n    if(val==obj2) id=MAT_FR;\n    \n    return vec2(val, id);\n}\n\nvec2 map2(vec3 p, inout float e) {\n    float val=0.0;\n    int id;\n    \n    float obj1 = length(p)-0.3;\n    vec3 p1 = fract(p)-0.5;\n    p1.xz*=rot(iTime);\n    \n    float obj2;\n    vec3 p2 = p/length(p);\n    p2*=2.0;\n    for(int z=0;z<12;z++) {\n        p2.xz*=rot(iTime*0.2);\n        p2.xy*=rot(iTime*0.4);\n        p2.yz*=rot(-iTime*0.05);\n        p2.xz = abs(p2.xz);\n        p2-=0.5;\n    }\n    \n    \n    obj1 = sdTetra(p2, 0.1);\n    obj2 = dot(sign(p2),p2)/5.0;\n    \n    val+= min(obj1,obj2);\n    \n    e = length(vec2(obj1,obj2));\n    \n    if(obj1==obj2) e=1.0;\n    \n    if(val==obj1) {id=MAT_SP;} else\n    if(val==obj2) id=MAT_FR;\n    \n    return vec2(val, id);\n}\n\nvec3 getNorm(vec3 p) {\n    vec2 e = vec2(0.001,0);\n    return normalize(\n           map(p).x - vec3(map(p-e.xyy).x,\n                           map(p-e.yxy).x,\n                           map(p-e.yyx).x)\n           );\n}\n\nvec2 rm(vec3 ro, vec3 rd, inout float s) {\n    float t=2.0;\n    vec2 d;\n    int i;\n    \n    for(i=0;i<MAX_STEPS;i++) {\n        vec3 p = ro + rd*t;\n        d = map(p);\n        t+= d.x;\n        s = float(i);\n        \n        if(d.x<MIN_D || t>MAX_D) break;\n    }\n    return vec2(t,d.y);\n}\n\nvec3 pal(float t) {\n    return mix(vec3(0.3,0.7,0.2),vec3(0.5,0.5,0.2),t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*RES)/RES.y;\n    vec3 col = vec3(0.0);\n    \n    vec3 ro=vec3(0,3,-3), la=vec3(0);\n    ro.xz*=rot(iTime*0.1);\n    vec3 rd= getCam(uv, ro, la, 1.0);\n    vec3 ld= normalize(-vec3(0,-2,10));\n    \n    float s;\n    vec2 t = rm(ro,rd,s);\n    if(t.x<MAX_D) {\n    vec3 p = ro + rd*t.x;\n    \n    vec3 n = getNorm(p);\n    float diff = dot(n,ld);\n    \n    \n    \n    \n    if(int(t.y)==MAT_SP) {\n    col += diff;} else\n    if(int(t.y)==MAT_FR) {\n    float ex; map2(p,ex);\n    diff = dot(n,normalize(p/abs(p)));\n    col+=pal(diff+pow(ex,32.));}\n    } else {col+=vec3(0,0.9,1)*0.9;}\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}