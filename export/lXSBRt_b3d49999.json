{"ver":"0.1","info":{"id":"lXSBRt","date":"1729806724","viewed":46,"name":"Mandelbrot cross product formula","username":"IgorZdrowowicz","description":"Welcome to my little Mandelbrot formula. Not sure how but apparently \ncross producing z with 2,2,1 and 0.5,0.5,-1 consecutively \nbefore squaring it etc., gives us this pretty boi. \n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","crossproduct","raw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// by Igor Zdrowowicz\n// Welcome to my little Mandelbrot formula. Not sure how but apparently \n// cross producing z with 2,2,1 and 0.5,0.5,-1 consecutively \n// before squaring it etc., gives us this pretty boi. \n// Maybe there is some insight (aside from it coming out tilted by 135*) in this formula... \n// Let me know!\n//\n//\n// golfed by @Xor\n\nvoid mainImage(out vec4 O, vec2 I)\n{\n    vec2 r = iResolution.xy,\n    u = (I*3.-r) / r.y;\n    u.x -= .5;\n    vec3 o = vec3(u,0),\n    z = o,\n    a = vec3(2,2,1),\n    b = 2.-3./a;\n    for (int i; i++<77; z = z * z + o) \n        z = cross(cross(z,a), b);\n    O = vec4(z,0);\n}\n\n// Initial code:\n//\n// void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n//\n//    vec2 uv = (fragCoord.xy / iResolution.xy) * 1.2 -.4;\n//    uv.x *= iResolution.x / iResolution.y; \n//    \n//    float sc = 2.5;\n//    vec2 os = vec2(-0.5,0.0);\n//    uv = uv * sc + os;\n//    \n//    vec3 z = vec3(uv,0.);\n//    \n//  constants for cross product\n//    vec3 a = vec3(2.0,2.0,1.0);\n//    vec3 b = vec3(0.5,0.5,-1.0);\n//    \n//    for (int i = 0; i <77; i++) {\n//        z = cross(z, a);\n//        z = cross(z, b);\n//        z = z * z + vec3(uv,0.); \n//    }\n//    \n//\n//    fragColor = vec4(z,0.);\n//}","name":"Image","description":"","type":"image"}]}