{"ver":"0.1","info":{"id":"MlKXDV","date":"1486055156","viewed":130,"name":"Sonar - Immersion","username":"LLB","description":"Was initially created for H-Immersion (http://www.pouet.net/prod.php?which=69654), but we finally didn't use it.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sonar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Noise generation functions borrowed from: \n// https://github.com/ashima/webgl-noise/blob/master/src/noise2D.glsl\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\nhighp float rand(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\nvec4 content(vec2 p) {\n\tfloat x =// max(0.5, abs(snoise(p * 3.))) *\n        snoise(p * 1.) *\n        snoise(p * 5.) *\n        snoise(p * 50.) *\n        snoise(p * 300.);\n    \n    return mix(\n      vec4(0.1,0.3,0.1,0.),\n      vec4(0.1,0.1,0.1,0.),\n      10.*x);   \n}\n\nvec4 staticScreen(vec2 p) {\n    float d = length(p);\n    float circles = smoothstep(0., 0.15\t, abs(sin(d * 50.))) + 0.5;\n\tfloat grid = smoothstep(0., 0.003, min(abs(p.x), abs(p.y)));\n    \n\tfloat angle = atan(p.x, p.y);\n    float ticks1 = min(\n        smoothstep(0.15, 0., abs(sin(angle * 20.))),\n        smoothstep(0.22, 0.25, d));\n\tfloat ticks2 = min(\n        smoothstep(0.3, 0., abs(sin(angle * 100.))),\n        smoothstep(0.24, 0.25, d));\n    float ticks = max(ticks1, ticks2);\n    \n    return mix(\n        mix(\n          vec4(0.2,0.5,0.2,0.),\n          content(p), // vec4(0.1,0.3,0.1,0.),\n          min(grid, circles)),\n\n\t\tvec4(0.,0.8,0.,0.),\n        ticks);\n}\n\nvec4 sonar(vec2 p, float style) {\n    float d = length(p);\n    \n\tvec4 circles = staticScreen(p);\n\n    float angle = atan(p.x, p.y);\n\tfloat a = mod(-angle + iTime, 2.*3.1415);\n    float line = pow(2., 1.-4.*a);\n    \n    vec4 foreground1 = mix(circles, vec4(0.,0.7,0.,0.), line);\n    vec4 foreground2 = circles * vec4(0.,0.7,0.,0.) * clamp(line, 0.45, 1.);\n    vec4 foreground = mix(foreground1, foreground2, style);\n    \n    vec4 background = clamp(2.5*p.y, 0.5, 1.)*vec4(0.3, 0.4, 0.2, 0.);\n    vec4 col = mix(background, foreground, smoothstep(0.255, 0.25, d));\n    return col;\n}\n\nvec2 distortion(vec2 uv) {\n    float amplitude = clamp(sin(iTime), 0.1, 1.);\n\n    // from https://www.shadertoy.com/view/4dBGzK\n    uv.x = uv.x + rand(vec2(iTime*0.03,uv.y*0.42)) * 0.02 * amplitude;\n\tuv.x += sin(rand(vec2(iTime*0.2, uv.y)))*0.005 * amplitude;\n    \n    // from https://www.shadertoy.com/view/ldXGW4\n    float vertJerkOpt = 1.;\n    float vertJerk = (1.0-step(snoise(vec2(iTime*1.5,5.0)),0.6))*vertJerkOpt;\n    float vertJerk2 = (1.0-step(snoise(vec2(iTime*5.5,5.0)),0.2))*vertJerkOpt;\n\tfloat vertMovementOpt = 1.;\n    float vertMovementOn = (1.0-step(snoise(vec2(iTime*0.2,8.0)),0.4)) * vertMovementOpt;\n    float yOffset = abs(sin(iTime)*2.0)*vertMovementOn+vertJerk*vertJerk2*0.3;\n    float y = mod(uv.y+yOffset,1.0);\n\tuv.y = y;\n    \n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \tvec2 uv = fragCoord.xy / iResolution.xx;\n\tuv = distortion(uv);\n    \n\tvec2 c = vec2(0.5, 0.3);\n    vec2 p = uv - c;\n    \n    vec2 bootSize = vec2(smoothstep(0., 0.1, iTime), smoothstep(0., 0.8, iTime));\n\tp /= bootSize;\n\tvec2 bounds = smoothstep(0.501, 0.5, p) * smoothstep(-0.501, -0.5, p);\n\tfloat warmup = 1. - pow(2., -(iTime+0.2));\n\tfloat intensity = bounds.x*bounds.y * warmup/(bootSize.x*bootSize.y);\n    \n    float style = 0.;//smoothstep(0.45, 0.55, 0.5+0.5*sin(iTime*0.5));\n    vec4 col = sonar(p, style);\n\n    // postprocessing from https://www.shadertoy.com/view/4dfGzn\n    col *= 0.5 + 0.5*16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y);\n    col *= 0.9+0.1*sin(10.0*iTime+uv.y*1000.0);\n    //col *= 0.97+0.03*sin(110.0*iTime);\n\n    col *= 0.7 + 0.3*snoise(p * 1000. + 100.*vec2(iTime));\n    fragColor = col * intensity;\n}","name":"Image","description":"","type":"image"}]}