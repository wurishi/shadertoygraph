{"ver":"0.1","info":{"id":"McdfzS","date":"1733242790","viewed":47,"name":"Walk on sphere 2D","username":"kenhu","description":"Walk on sphere 2D","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["wos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on https://www.shadertoy.com/view/ttByDw\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // get the interpolated color\n    vec3 color = texelFetch(iChannel0, ivec2(fragCoord.xy),0).rgb;\n    \n    // convert from linear to sRGB and output the color\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// RNG\nuint wang_hash(inout uint seed)\n{\n    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));\n    seed *= uint(9);\n    seed = seed ^ (seed >> 4);\n    seed *= uint(0x27d4eb2d);\n    seed = seed ^ (seed >> 15);\n    return seed;\n}\n\nfloat RandomFloat01(inout uint state)\n{\n    return float(wang_hash(state)) / 4294967296.0;\n}\n\nbool boundary(vec2 p, out vec3 color)\n{\n    float epsilon = 1E-6;\n    \n    vec3 lt = vec3(1.0, 0.0, 0.0);\n    vec3 lb = vec3(0.0, 0.0, 1.0);\n    vec3 rt = vec3(0.0, 1.0, 0.0);\n    vec3 rb = vec3(0.0, 0.0, 0.0);\n    \n    if (p.x < epsilon || p.x > 1.0 - epsilon || p.y < epsilon || p.y > 1.0 - epsilon)\n    {\n        color = mix(mix(lt, lb, p.y), mix(rt, rb, p.y), p.x);\n        return true;\n    }\n        \n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // initialize a random number state based on frag coord and frame\n    uint rngState = uint(uint(fragCoord.x) * uint(1973) + uint(fragCoord.y) * uint(9277) + uint(iFrame) * uint(26699)) | uint(1);    \n    \n    // this is our starting point\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    p.y = 1.0 - p.y; // flip y to make y = 0 at top\n    \n    int cStepCountMax = 64;\n    vec3 color = vec3(0.0, 0.0, 0.0);\n    for (int i = 0; i < cStepCountMax; i++)\n    {\n        if (boundary(p, color))\n            break;\n            \n        float cPI = 3.1415926;\n        float random = RandomFloat01(rngState) * (2.0 * cPI);\n        vec2 random_direction = vec2(sin(random), cos(random));\n        \n        float radius = min(min(p.x, 1.0 - p.x), min(p.y, 1.0 - p.y));\n        p += random_direction * radius;\n    }\n    \n    // how to properly handle out of step?\n    \n    vec4 prev = texelFetch(iChannel0, ivec2(fragCoord.xy), 0);\n    float weight = (iFrame < 2) ? 1.0 : 1.0 / (1.0 + (1.0 / prev.a));    \n    color = mix(prev.rgb, color, weight);\n    \n    fragColor = vec4(color, weight);\n}","name":"Buffer A","description":"","type":"buffer"}]}