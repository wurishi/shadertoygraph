{"ver":"0.1","info":{"id":"3tBfWz","date":"1598615794","viewed":414,"name":"Minimalism #05","username":"Flopine","description":"Fifth piece of a shader serie about minimalism, how to do small and quick artwork that are about composition and animation.","likes":27,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid","animation","motion","hexagons","minimalist"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n#define TAU 6.2831853\n\n#define BPM (120./60.)\n#define dt(speed) fract(iTime*speed)\n#define AnimOutExpoLoop(speed) easeOutExpo(abs(2.*dt(speed)-1.))\n#define AnimOutExpo(speed) easeOutExpo(dt(speed))\n\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(0.07,fwidth(val-thre)))\n#define square(puv,s) (max(abs(puv.x),abs(puv.y))-s)\n#define hexa(puv,s) (max(abs(puv.x),dot(abs(puv), normalize(vec2(1.,sqrt(3.))))))-s\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define moda(puv,r) float a=mod(atan(puv.x,puv.y),TAU/r)-(TAU/r)*0.5; puv=vec2(cos(a),sin(a))*length(puv)\n\n#define palette(t,c,d) (vec3(0.5)+vec3(0.5)*cos(TAU*(c*t+d)))\n\nfloat easeOutExpo (float x)\n{ \treturn x == 1. ? 1. : 1. - pow(2., -10. * x); }\n\nfloat equitri (vec2 p, float r)\n{\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/sqrt(3.);\n    if (p.x+sqrt(3.)*p.y>0.) p=vec2(p.x-sqrt(3.)*p.y,-sqrt(3.)*p.x-p.y)/2.;\n    p.x -= clamp( p.x, -2.*r, 0. );\n    return -length(p)*sign(p.y);\n}\n\nfloat frame (vec2 uv)\n{\n    vec2 hper = vec2(1.,sqrt(3.));\n    vec2 auv = mod(uv,hper)-hper*0.5;\n    vec2 buv = mod(uv-hper*0.5,hper)-hper*0.5;\n    vec2 guv = (dot(auv,auv)<dot(buv,buv)) ? auv : buv;\n    vec2 gid = uv-guv;\n\n    float cellsize = 0.4;\n    guv *= rot(AnimOutExpo(BPM/6.+length(gid.x+gid.y*.5))*TAU);\n    float mask = AAstep(0.02,abs(hexa(guv,cellsize)));\n    if(mod(gid.x+0.1,2.) < 1.) \n    {\n        moda(guv,3.);\n        float line = max(abs(guv.y)-0.02,abs(guv.x)-cellsize*1.1);\n        mask *= AAstep(0.01,line);\n    }\n    else mask *= AAstep(0.03,abs(equitri(guv,cellsize*0.95)));\n    return mask;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    vec3 col = vec3(frame(uv*3.5));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}