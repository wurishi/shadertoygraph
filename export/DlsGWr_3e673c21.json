{"ver":"0.1","info":{"id":"DlsGWr","date":"1671609219","viewed":58,"name":"Weird Planet","username":"jianinz","description":"Experiments with ray marching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Credits to https://thebookofshaders.com/13/ to get the radom, noise, fbm funtions\n// Credits to https://michaelwalczyk.com/blog-ray-marching.html for great tutorial about ray marching and shaering\n\n#define NUM_OCTAVES 5\n#define NUMBER_OF_STEPS 32\n#define MINIMUM_HIT_DISTANCE 0.001\n#define MAXIMUM_TRACE_DISTANCE 1000.0\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat seededRandom(float seed) {\n    int x = int(seed);\n    x = x << 13 ^ x;\n    x = (x * (x * x * 15731 + 789221) + 1376312589);\n    x = x & 0x7fffffff;\n    return float(x)/1073741824.0;\n}\n\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\n\n\nfloat distanceFromSphere(in vec3 p, in vec3 c, float r)\n{\n    return length(p - c) - r;\n}\n\nfloat mapTheWorld(in vec3 p)\n{\n    float sphere_0 = distanceFromSphere(p, vec3(0.0), 1.0);\n\n    return sphere_0;\n}\n\nvec3 calculateNormal(in vec3 p)\n{\n    const vec3 small_step = vec3(0.001, 0.0, 0.0);\n\n    float gradient_x = mapTheWorld(p + small_step.xyy) - mapTheWorld(p - small_step.xyy);\n    float gradient_y = mapTheWorld(p + small_step.yxy) - mapTheWorld(p - small_step.yxy);\n    float gradient_z = mapTheWorld(p + small_step.yyx) - mapTheWorld(p - small_step.yyx);\n\n    vec3 normal = vec3(gradient_x, gradient_y, gradient_z);\n\n    return normalize(normal);\n}\n\nvec3 rayMarching(in vec3 ro, in vec3 rd)\n{\n\n    float total_distance_traveled = 0.0;\n    \n    for (int i = 0; i < NUMBER_OF_STEPS; ++i)\n    {\n        // Calculate our current position along the ray\n        vec3 current_position = ro + total_distance_traveled * rd;\n\n        // We wrote this function earlier in the tutorial -\n        // assume that the sphere is centered at the origin\n        // and has unit radius\n        float distance_to_closest = mapTheWorld(current_position);\n\n        if (distance_to_closest < MINIMUM_HIT_DISTANCE) // hit\n        {\n            // We hit something!\n            vec3 normal = calculateNormal(current_position);\n            vec3 light_position = vec3(.4, -3.0, 2.0);\n            vec3 direction_to_light = normalize(current_position - light_position);\n\n            float diffuse_intensity = max(1.6, dot(normal, direction_to_light));\n\n            return vec3(0.200,1.000,0.434) * diffuse_intensity;\n        }\n\n        if (total_distance_traveled > MAXIMUM_TRACE_DISTANCE) // miss\n        {\n            break;\n        }\n\n        // accumulate the distance traveled thus far\n        total_distance_traveled += distance_to_closest;\n    }\n\n    // If we get here, we didn't hit anything so just\n    // return a background color (black)\n    return vec3(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    // Set up camera position 5 unit radius negative along the z-xis\n    vec3 camera_position = vec3(0.0, 0.0, -5.0);\n    // Assign camera position to the ray origin\n    vec3 ro = camera_position;\n    // Assign ray direction as a tracing line from the cameraâ€™s position through a point on the image plane. \n    vec3 rd = vec3(uv, abs(cos(iTime)));\n    \n    \n    vec2 q = vec2(0.);\n    q.x = fbm(uv + 0.00*iTime);\n    q.y = fbm( uv + vec2(1.0));\n\n    vec2 r = vec2(0.);\n    r.x = fbm( uv + 1.0*q + vec2(1.7,9.2)+ 0.15*iTime );\n    r.y = fbm( uv + 1.0*q + vec2(8.3,2.8)+ 0.126*iTime);\n\n    float f = fbm(uv+r);\n    vec3 color = vec3(0.0);\n    vec3 col = rayMarching(ro, rd);\n    color = mix(vec3(1.,0.0,0.),vec3(0.666667,0.666667,0.498039),clamp((f*f)*4.0,0.0,1.0));\n    color = mix(color,vec3(0,0,0.164706),clamp(length(q),0.0,1.0));\n    color = mix(color,vec3(0.666667,1,1),clamp(length(r.x),0.0,1.0));\n    // Output to screen\n    fragColor = vec4((f*f*f+.6*f*f+.5*f)*col*color,1.);\n    //fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}