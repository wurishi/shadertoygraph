{"ver":"0.1","info":{"id":"wl3fzl","date":"1613247557","viewed":141,"name":"Encoder poison","username":"eimink","description":"Did this while listening to mayor's DJ set. Poisonous to h264 encoders.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float E = 0.001;\nconst float FAR = 40.0;\nconst int STEPS = 64;\nconst float START = 127.7;//20.0;\n\nvec3 glow = vec3(0.0);\n\nfloat time = 0.0;\n\nvoid rot(inout vec2 p, float a) {\n    p = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat sphere (vec3 p, float s)\n{\n    return length(p)-s;\n}\n\nfloat box (vec3  p, vec3 r){\n    vec3 d = abs(p) - r;\n    return length(max(d,0.0) + min(max(d.x, max(d.y, d.z)), 0.0));\n}\n\nvec3 bend( in vec3 p, float k)\n{\n    float c = cos(k*p.x);\n    float s = sin(k*p.x);\n    mat2  m = mat2(c,-s,s,c);\n    return vec3(m*p.xy,p.z);\n}\n\nvec3 twist(vec3 p, float k)\n{\n    float c = cos(k*p.y);\n    float s = sin(k*p.y);\n    mat2  m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\n\nfloat torus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat scene(vec3 p){\n    vec3 pp = p;\n    float scale = 1.+(sin(fract(time)*8.)*0.5);\n    float a = box(twist(p,2.+8.*sin(time))/scale,vec3(1.2,1.2,1.2))*scale;\n    float b = torus(twist(p,sin(time)*2.)/scale,vec2(1.5,1.2))*scale;\n    float c = sphere(p/scale,1.5)*scale;\n    for (int i = 0; i < 2; ++i) {\n        rot(pp.xz,time*.01*float(1+i));\n        float t = torus(twist(pp,-cos(time)*2.*float(2+i))/scale,vec2(.3,.2))*scale;\n        b = max(-t,b);\n    }\n    float r = max(c,-b);\n    for (int i = 0; i  < 4; ++i)\n    {\n        pp = abs(pp) - vec3(6.0,3.0,6.0);\n        rot(pp.yz,time*0.1);\n        rot(pp.xy,sin(time*0.0125));\n        rot(pp.xz,sin(time*0.1));\n    }\n    float d = 10000.0;\n    if (iTime > 6.0)\n        d = torus(twist(pp,-sin(time)*10.),vec2(4.,0.15));\n    \n    float s = min(d,max(r,min(a,b)));\n    vec3 g = vec3(0.3, 0.2, 0.6)*0.05 / (0.01+abs(r));\n    vec3 g2 = vec3(0.3, 0.2, 0.6)*0.05 / (0.01+abs(d));\n    glow += g*0.1;\n    glow += g2*0.1;\n    return s;\n}\n\nfloat march(in vec3 ro, in vec3 rd, out vec3 p)\n{\n    p = ro;\n    float t = E;\n    for (int i = 0; i < STEPS; ++i) {\n        float d = scene(p);\n        t += d;        \n        if (d < E || t > FAR) {\n            break;\n        }\n        p += rd*d;\n    }\n    return t;\n}\n\nvec2 map( in vec3 pos)  \n{\n    float id = 0.;\n    \n    float d = scene(pos);\n    \n    return vec2(d, id);\n}\n\nvec3 calcNormal( in vec3 pos) \n{\n    vec2 e = vec2(0.0000001, 0.0);\n    return normalize( vec3(map(pos+e.xyy).x-map(pos-e.xyy).x,\n                           map(pos+e.yxy).x-map(pos-e.yxy).x,\n                           map(pos+e.yyx).x-map(pos-e.yyx).x ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    time = START+iTime;\n    vec3 cp = vec3(2.+sin(time),3.+cos(time),0.);\n    vec3 ct = vec3(0,0,0);\n    vec3 ld = vec3(-2.,0.,4.);\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = -1.0+2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 cf = normalize(ct-cp);\n    vec3 cr = normalize(cross(vec3(0.0,1.0,0.0),cf));\n    vec3 cu = normalize(cross(cf,cr));\n    \n    vec3 rd = normalize(mat3(cr,cu,cf)*vec3(q,radians(60.0)));\n    \n    vec3 p = vec3(0.0);\n    \n    float t = march(cp,rd,p);\n\n    vec3 col = vec3(0.0);\n    if(t < FAR){\n        col = vec3(0.2,0.6,0.8) + (clamp(dot(calcNormal(p), ld), 0.0, 1.0)*0.1);\n        \n    }\n    \n    col += glow;\n\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 bufB = texelFetch(iChannel1,ivec2(fragCoord),0);\n    vec4 bufA = texelFetch(iChannel0,ivec2(fragCoord),0);\n    fragColor = mix(bufB,bufA,0.025);\n}","name":"Buffer B","description":"","type":"buffer"}]}