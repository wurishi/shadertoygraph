{"ver":"0.1","info":{"id":"XsVcWt","date":"1523763654","viewed":245,"name":"Septagram Loader","username":"blackle","description":"bep","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n//returns p's projection onto and distance to line segment p0:p1\nvec2 projectToSegment(vec2 p, vec2 p0, vec2 p1) {\n    vec2 v = p1 - p0;\n    vec2 w = p - p0;\n    \n    float b = dot(v,w)/dot(v,v);\n    float dist = distance(p, p0 + v * clamp(b, 0.0, 1.0));\n    return vec2(b, dist);\n}\n\n//returns ith star point coordinates\nvec2 pointFromIndex(float i) {\n    float ang = i/7.0*6.28;\n    return vec2(sin(ang), cos(ang));\n}\n\n//antialiases a distance value to an edge\nfloat aaEdge(float edge) {\n    float pixelSize = 2.0/iResolution.y*1.1;\n    return clamp(edge/pixelSize, 0.0, 1.0);\n}\n\n\nfloat smin( float a, float b, float k )\n{\n    // if (k == 0.0) return min(a,b);\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sclamp(float x, float a, float b, float k) {\n    return smin(-smin(-x, -a, k), b, k);\n}\n\n\n//returns color+alpha for distance to a line segment\nvec2 colorForDistance(float dist, float projx) {\n    float thiccness = 0.035;\n    float border = 0.015;\n\n    float pixelSize = 2.0/iResolution.y*1.1;\n    \n    float col = aaEdge(thiccness - dist);\n    //shading\n    col *= mix(0.6,1.0,smin(pow(projx-1.00,2.0)*128.0,1.0,4.0));\n    col *= mix(0.6,1.0,smin(pow(projx-0.56,2.0)*512.0,1.0,4.0));\n    col *= mix(0.6,1.0,smin(pow(projx-0.35,2.0)*512.0,1.0,4.0));\n    \n    float alpha = aaEdge(thiccness + border - dist);\n\n    return vec2(col, alpha);\n}\n\n//mixes two colours with alpha blending\nvec2 compose(vec2 bottom, vec2 top) {\n    float outalpha = top.y + bottom.y * (1.0- top.y);\n    float outcol = (bottom.x*bottom.y*(1.0-top.y) + top.x*top.y)/outalpha;\n    return vec2(outalpha == 0.0 ? 0.0 : outcol, outalpha);\n}\n\nfloat septagram(vec2 uv, float time) {\n    \n    vec2 col = vec2(0.0);\n    for (float i = 0.0; i < 7.0; i++) {\n        vec2 p0 = pointFromIndex(i*3.0);\n        vec2 p1 = pointFromIndex(i*3.0+3.0);\n        vec2 proj = projectToSegment(uv, p0, p1);\n        \n        //this part does the cool loading fade\n        float fillCol = mix(0.1, 1.0, sclamp((time - proj.x - i)*16.0, 0.0, 1.0, 1.0));\n        if (time > 15.0) {\n            float fillCol2 = mix(0.1, 1.0, cos((time - proj.x - i)*6.283)*0.5+0.5);\n            fillCol = mix(fillCol, fillCol2, clamp(time-15.0, 0.0, 1.0));\n        }\n        vec2 lineCol = colorForDistance(proj.y, proj.x) * vec2(fillCol, 1.0);\n        //the first half of the line goes over everything, the second half goes under everything\n        if (proj.x > 0.4 && proj.x < 0.5) {\n            col = compose(col, lineCol);\n        } else if (proj.x > 0.5 && proj.x < 0.6) {\n            col = compose(lineCol, col);\n        } else if (proj.x > 0.6 && proj.x < 0.7) {\n            col = compose(col, lineCol);\n        } else if (proj.x < 0.1) {\n            col = compose(col, lineCol);\n        } else {\n            col = compose(lineCol, col);\n        }\n    }\n    \n    float capborder = length(uv) - 0.97 + (0.08 - cos(atan(uv.x,uv.y)*7.0*2.0)*0.08);\n    \n    vec2 caps = 1.0 - vec2(aaEdge(capborder*0.9 + 0.015), aaEdge(capborder*0.9));\n    col = vec2(min(caps.x, col.x), min(caps.y, col.y));\n    \n    //set iChannel0 to a texture to see alpha transparency\n    return compose(vec2(texture(iChannel0, uv*0.5).x,1.0), col).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 1.1;\n\n    float col = septagram(uv, iTime*0.5 - 0.5);\n\n    // Output to screen\n    fragColor = vec4(vec3(col),1.0);\n}","name":"Image","description":"","type":"image"}]}