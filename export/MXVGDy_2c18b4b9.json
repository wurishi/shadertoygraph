{"ver":"0.1","info":{"id":"MXVGDy","date":"1718196331","viewed":27,"name":"Fork thx mball manthrax 321","username":"manthrax","description":"mball","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mball"],"hasliked":0,"parentid":"lXVGDy","parentname":"thx mball"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 simBall( vec3 pos ){\nfloat fTime = iTime*-.5;\nvec3 apos = pos;\napos.y+=fTime * pos.z * 10.; //Scroll vertically.. and randomize speed based on radius\napos.xy = fract(apos.xy); //Wrap to 0 to 1 space\napos.xy-=.5; // make it screen center based...\napos.z *= max(0.,(.5-abs(apos.y))); //Scale radius when close to top or bottom\nreturn apos;\n}\n\nfloat random(int seed){\n//Generates a random number 0 to 1 based on a seed integer\n    return fract(cos((float(seed)*1.2347)-56.789));\n}\n\nconst float minRad = .01;\nconst float radRange = .03;\nconst int ballCount = 100;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec3 mouseball = vec3(iMouse.xy / iResolution.y, 0.05);\n    \n    //The position of the current pixel/fragment we're drawing...\n\tvec2 ssnormal = (fragCoord.xy-(iResolution.xy*.5)) / iResolution.y;\n    \n    float frag = 0.0; //var to hold accumulated field value...\n    \n    for(int i = 0; i < ballCount; i++){\n        vec3 bp = vec3(random(i),random(i*12),random(i*13)*radRange+minRad);\n        vec3 sb = simBall(bp);\n        frag += sb.z / distance(sb.xy, ssnormal);\n    }\n    //frag = clamp(frag, 0.0, 1.0);\n    //frag = frag == 1.0 ? 1.0 : 0.0;\n    \n    fragColor = vec4(frag, frag, frag, 1.0);\n}","name":"Image","description":"","type":"image"}]}