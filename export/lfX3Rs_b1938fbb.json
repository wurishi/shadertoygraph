{"ver":"0.1","info":{"id":"lfX3Rs","date":"1703358333","viewed":35,"name":"asymmetric blocks connected int","username":"jt","description":"Extend edges into adjacent blocks\nin the pattern of (asymmetric/irregular)\nrandom-blocks-by-alternating-double-T-crossings\nfor placement of structures overlapping blocks.\nThis implementation is intended for lookup with integer indices.\nClick displays grid","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["random","t","blocks","double","alternating","irregular","asymmetric"],"hasliked":0,"parentid":"mdcBR2","parentname":"asymmetric blocks compactified"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/lfX3Rs asymmetric blocks connected int, 2023 by jt\n// based on https://www.shadertoy.com/view/mdcBR2 asymmetric blocks compactified\n\n// also related to: https://www.shadertoy.com/view/DdVfRz asymmetric blocks with portals\n\n// Extend edges into adjacent blocks\n// in the pattern of (asymmetric/irregular)\n// random-blocks-by-alternating-double-T-crossings\n// for placement of structures overlapping blocks.\n// This implementation is intended for lookup with integer indices.\n// Click to show underlying grid.\n\n// float variant: https://www.shadertoy.com/view/Mcf3zs asymmetric blocks connected flt\n\n// tags: random, t, blocks, portal, double, door, passage, connection, alternating, irregular, asymmetric\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\n#define HASH(u) triple32(u)\n//#define HASH(u) lowbias32(u)\n\nuint uhash(uvec2 v)\n{\n//return uvec2(0u); // verify grid alignment\n    return HASH((uint(v.x) + HASH(uint(v.y))));\n}\n\n// https://www.shadertoy.com/view/DtjyWD integer division - rounding down\nivec2 div_floor(ivec2 a, int b) // vector version thanks to Fabrice\n{\n    ivec2  S = (sign(abs(a*b))-sign(a*b))/2; // 0 if a*b >= 0\n    return S * ((1 - abs(a)) / abs(b) - 1)+(1-S)*(a / b); // emulates ()?:\n}\n\n// this implementation avoids operator % for stability on windows XXX differs from original at 0 ? XXX\nivec2 mod_positive(ivec2 a, int b)\n{\n    return a - div_floor(a, b) * b;\n}\n\n// resolution of underlying grid\n#define RES 8\n\nstruct block\n{\n    ivec4 outer;\n    ivec4 inner;\n    ivec2 id;\n    ivec2 nb;\n};\n\nint block_hash(ivec2 tile, int x, int y, bool choose, bool mirror)\n{\n    ivec2 d = (mirror?ivec2(y, x):ivec2(x, y));\n    return int(uhash(uvec2(tile+d)*2u+uint(choose)) % uint(RES))+(choose?d.y:d.x)*RES;\n    //ivec2 r = ivec2(uhash(uvec2(tile+d)*2u+uint(choose)) % uint(RES))+d*RES;\n    //return choose?r.y:r.x;\n}\n\n// Inspired by https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane,\n// and also by https://www.shadertoy.com/view/tsVGRz Oddtiles (optimized) by stb.\n// Checkerboard tiling of alternating (horizontal vs. vertical) (double-T-) crossings.\n// Returns outer box (minimum, maximum) and inner box (aligned with neighbors), id, neighbor id.\n// Severely compactified/crunched version.\nblock blocks_layout(ivec2 p) // https://www.shadertoy.com/view/mdcBR2 asymmetric blocks compactified by jt\n{\n    ivec2 tile = div_floor(p, RES); // global coordinates of tile\n    ivec2 local = p - tile * RES;\n\n    //bool flip = (tile.x % 2) != (tile.y % 2); // XXX breaks on windows XXX\n    bool flip = (tile.x & 1) != (tile.y & 1); // true: vertical line goes through, false: horizontal line goes through\n    //flip = !flip; // \"dual\" pattern (i.e. T-crossings flipped)\n\n    // | identity\n    // NW N NE\n    //  W C E\n    // SW S SE\n\n    // - transposed (NOTE: y-coordinate up but matrix y-index down!)\n    // SE W NE\n    //  N C S\n    // SW E NW\n\n    if(flip) // horizontal line goes through: swap vertical with horizontal\n    {\n        local = local.yx;\n    }\n\n    // vertical line goes through (on flip transpose for horizontal line)\n\n    //                 c\n    //   +-+---------+---+-------+\n    //   | |         |   |       |\n    //   | |         |   #-------+ d\n    // d +-#-#-------+---M       |\n    //   |   |       |   |       |\n    //   +---+-------+---+-------+\n    //   |   |       |   |       |\n    //   |   m-------+---#---#---+\n    //   +---#       |       |   |\n    //   |   |       |       |   |\n    //   +---+-------+-------+---+\n\n    int c = block_hash(tile, 0, 0, flip, flip); // offset of central line\n\n    int x = 1-int(local.x < c); // [0,1]\n    int X = 2*x-1; // [-1,+1]\n\n    int d = block_hash(tile,+X, 0,!flip, flip); // offset of branching line\n    int e = block_hash(tile,-X, 0,!flip, flip); // offset of branching line\n\n    int y = 1-int(local.y < d); // [0,1]\n    int Y = 2*y-1; // [-1,+1]\n\n    ivec4 outer =\n        ivec4\n        (\n            // block corner in (0,0) tile\n            c,\n            d,\n            // block corner in (X,Y) tile\n            block_hash(tile,X,Y, flip, flip),\n            block_hash(tile,0,Y,!flip, flip)\n        );\n\n    ivec4 inner =\n        ivec4\n        (\n            block_hash(tile,  0,2*Y, flip, flip),\n            e,\n            block_hash(tile,  X, -Y, flip, flip),\n            block_hash(tile,2*X,  Y,!flip, flip)\n        );\n\n    if(flip) tile = tile.yx;\n\n    outer += tile.xyxy * RES;\n    inner += tile.xyxy * RES;\n\n    ivec2 id = tile + ivec2(x,y);\n    ivec2 nb = tile + ivec2(1-x,1-int(local.y < e));\n\n    if(flip) // horizontal line goes through: unswap vertical with horizontal\n    {\n        outer = outer.yxwz;\n        inner = inner.yxwz;\n        id = id.yx;\n        nb = nb.yx;\n    }\n\n    {\n        // sort: fix order of outer min/max corners NOTE: defer division by 2 because center & extend could be half-integers!\n        ivec2 center2 = outer.xy+outer.zw;\n        ivec2 extent2 = abs(outer.xy-outer.zw);\n\n        outer.xy = (center2-extent2)/2;\n        outer.zw = (center2+extent2)/2;\n    }\n\n    {\n        // sort: fix order of inner min/max corners NOTE: defer division by 2 because center & extend could be half-integers!\n        ivec2 center2 = inner.xy+inner.zw;\n        ivec2 extent2 = abs(inner.xy-inner.zw);\n\n        inner.xy = (center2-extent2)/2;\n        inner.zw = (center2+extent2)/2;\n    }\n\n    return block(outer, inner, id, nb);\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n#define scale (float(RES*3))\n\nvoid mainImage(out vec4 fragColor, in vec2 p)\n{\n    vec2 R = iResolution.xy;\n    p = (2.0 * p - R) / R.y;\n    vec2 m = iMouse.xy;\n    m = (2.0 * m - R) / R.y;\n\n    block b = blocks_layout(ivec2(floor(p*scale)));\n\n    vec3 color = hash32(vec2(b.id));\n    if(((b.id.x^b.id.y)&1)==0)\n        color = 1.0 - color;\n    // differences between pixel-position and corners\n    vec2 q0 = p-vec2(b.outer.xy)/scale;\n    vec2 q1 = p-vec2(b.outer.zw)/scale;\n    vec2 Q0 = p-vec2(b.inner.xy)/scale;\n    vec2 Q1 = p-vec2(b.inner.zw)/scale;\n    // visualize edges\n    color = min(color, vec3(smoothstep(2.5/R.y, 5.0/R.y,+q0.x)));\n    color = min(color, vec3(smoothstep(2.5/R.y, 5.0/R.y,+q0.y)));\n    color = min(color, vec3(smoothstep(2.5/R.y, 5.0/R.y,-q1.x)));\n    color = min(color, vec3(smoothstep(2.5/R.y, 5.0/R.y,-q1.y)));\n    if(false) // visualize min-max\n    {\n        color = min(color, vec3(smoothstep(2.0/R.y, 4.0/R.y, abs(length(q0)-0.5/scale))));\n        color = min(color, vec3(smoothstep(2.0/R.y, 4.0/R.y, abs(length(q1)-0.5/scale))));\n        color = min(color, vec3(smoothstep(2.0/R.y, 4.0/R.y, abs(length(Q0)-0.5/scale))));\n        color = min(color, vec3(smoothstep(2.0/R.y, 4.0/R.y, abs(length(Q1)-0.5/scale))));\n    }\n    // visualize extended edges\n    color = min(color, vec3(smoothstep(1.0/R.y, 2.0/R.y,abs(+Q0.x))));\n    color = min(color, vec3(smoothstep(1.0/R.y, 2.0/R.y,abs(+Q0.y))));\n    color = min(color, vec3(smoothstep(1.0/R.y, 2.0/R.y,abs(+Q1.x))));\n    color = min(color, vec3(smoothstep(1.0/R.y, 2.0/R.y,abs(+Q1.y))));\n\n    //if(Q0.x < 0.0 || Q0.y < 0.0 || Q1.x > 0.0 || Q1.y > 0.0) color *= 0.5;\n\n    //vec3 color = vec3((b.id.x^b.id.y)&1);\n    if(iMouse.z > 0.0)\n    {\n        vec2 r = p*scale/2.0;\n        float pi = 3.1415926;\n        color *= mix(0.5, 1.0, step(0.0, sin(r.x*pi*2.0)*sin(r.y*pi*2.0)));\n        vec2 q = fract(p*scale/float(RES));\n        q = step(0.01, q);\n        //color = min(color, vec3(min(q.x, q.y)));\n        color = max(color, vec3(1.0-min(q.x, q.y)));\n    }\n\n    color = sqrt(color);\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}