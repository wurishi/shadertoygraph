{"ver":"0.1","info":{"id":"mlXSzs","date":"1675197324","viewed":149,"name":"convolutional cellular automata","username":"vilimus","description":"cellular automata. technically a 1-layer CNN :3 based on https://neuralpatterns.io\n\nplay with kernel and activation under Buffer A - make game of life if you're clever!","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["2d","cellularautomata","multipass","automaton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// knobs - play with these!\nfloat MOUSE_R = 8.;\n\n// convolution kernel (preferably a probability kernel)\nmat3 K = mat3(\n    0.68, -0.9, 0.68,\n    -0.9, -0.66, -0.9,\n    0.68, -0.9, 0.68\n);\n\n// activation function - applied pointwise\nfloat activation(float x) {\n    return 1. - pow(2., -0.6*pow(x, 2.)); // inverse gaussian\n}\n\n// ----------------------------------------\nfloat cell(vec2 uv) {\n    return texture(iChannel0, uv/iResolution.xy).x;\n}\nfloat convolve(vec2 uv) {\n    return\n        K[0][0] * cell(uv + vec2(-1,  1)) + \n        K[0][1] * cell(uv + vec2( 0,  1)) +\n        K[0][2] * cell(uv + vec2( 1,  1)) +\n        K[1][0] * cell(uv + vec2(-1,  0)) +\n        K[1][1] * cell(uv + vec2(-0,  0)) +\n        K[1][2] * cell(uv + vec2( 1,  0)) +\n        K[2][0] * cell(uv + vec2(-1, -1)) +\n        K[2][1] * cell(uv + vec2( 0, -1)) +\n        K[2][2] * cell(uv + vec2( 1, -1));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float c = activation(convolve(fragCoord));\n    if (iFrame <= 1) {\n        c = texture(iChannel1, fragCoord/iChannelResolution[1].xy).r;\n    }\n    \n    // interactive\n    if (iMouse.z > 0.) {\n        if(length((fragCoord.xy - iMouse.xy)/iResolution.xx) <= MOUSE_R / iResolution.x) {\n        \tc = 1. - c;\n        }\n    }\n   \n    fragColor = vec4(c, c, c, 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}