{"ver":"0.1","info":{"id":"3sKGWw","date":"1570349280","viewed":1525,"name":"MULTICOLOURED STARS","username":"alro","description":"Despite the three nested loops, it's still technically loopless. Could use some optimisation at higher resolutions.","likes":47,"published":1,"flags":0,"usePreview":0,"tags":["2d","space","particles","glow","stars","infinite","sparkle","loopless"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Based on https://www.youtube.com/watch?v=3CycKKJiwis\n\n// https://www.shadertoy.com/view/4djSRW\nfloat random(vec2 p){\n   vec3 p3  = fract(vec3(p.xyx) * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 random2(vec2 p){\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(0.1031, 0.1030, 0.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\n//https://www.shadertoy.com/view/3s3GDn\nfloat getGlow(float dist, float radius, float intensity){\n    return pow(radius/dist, intensity);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    float t = 1.0 + iTime * 0.06;\n    float layers = 10.0;\n    float scale = 32.0;\n    float depth;\n    float phase;\n    float rotationAngle = iTime * -0.1;\n    float size;\n    float glow;\n    //Iteration step size for outermost loop\n    float del = 1.0/layers;\n    \n   \tvec2 uv;\n    //Value of floor(uv)\n    vec2 fl;\n    vec2 local_uv;\n    vec2 index;\n    vec2 pos;\n    //Seed for random values\n    vec2 seed;\n    vec2 centre;    \n    //The indices of 3x3 cells surrounding the fragment\n    vec2 cell;\n    //To move the focus of the camera in a circle\n    vec2 rot = vec2(cos(t), sin(t));\n    \n    //To rotate layers\n    mat2 rotation = mat2(cos(rotationAngle), -sin(rotationAngle), \n                         sin(rotationAngle),  cos(rotationAngle));\n \tvec3 col = vec3(0);\n    vec3 tone;\n    \n    //For all layers\n    for(float i = 0.0; i <= 1.0; i+=del){\n        //Find depth from layer index and move it in time\n        depth = fract(i + t);\n        \n        //Move centre in a circle depending on the depth of the layer\n        centre = rot * 0.2 * depth + 0.5;\n        \n        //Get uv from the fragment coordinates, rotation and depth\n    \tuv = centre-fragCoord/iResolution.x;\n        uv *= rotation;\n    \tuv *= mix(scale, 0.0, depth);\n        fl = floor(uv);\n        //The local cell coordinates. uv-fl == fract(uv)\n        local_uv = uv - fl - 0.5;\n\n        \n        //For a 3x3 group of cells around the fragment, find the distance from the points \n        //of each to the current fragment and draw an accumulative glow accordingly\n        //The local cell is (0,0)\n       \tfor(float j = -1.0; j <= 1.0; j++){\n            for(float k = -1.0; k <= 1.0; k++){\n        \t\tcell = vec2(j,k);\n            \n                //Cell index\n        \t\tindex = fl + cell;\n        \n                //Cell seed\n        \t\tseed = 128.0 * i + index;\n                \n        \t\t//Get a random position in the considered cell\n        \t\tpos = cell + 0.9 * (random2(seed) - 0.5);\n        \n        \t\t//Get a random phase\n        \t\tphase = 128.0 * random(seed);\n                //Get colour from cell information\n        \t\ttone = vec3(random(seed), random(seed + 1.0), random(seed + 2.0));\n        \n        \t\t//Get distance to the generated point, fade distant points\n                //and make glow radius pulse in time\n        \t\tsize = (0.1 + 0.5 + 0.5 * sin(phase * t)) * depth;\n        \t\tglow = size * getGlow(length(local_uv-pos), 0.07, 2.5);\n                //Add white core and glow\n        \t\tcol += 5.0 * vec3(0.02 * glow) + tone * glow;\n        \t}\n        }\n    }\n    \n    //Tone mapping\n    col = 1.0 - exp(-col);\n    \n    //Gamma\n    col = pow(col, vec3(0.4545));\n    \n    //Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n    Copyright (c) 2019 al-ro\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/","name":"Common","description":"","type":"common"}]}