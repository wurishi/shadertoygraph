{"ver":"0.1","info":{"id":"NdXfzr","date":"1648466689","viewed":160,"name":"Ink Leaking","username":"SamOrantin","description":"Ink Leaking, u can use mouse for interact","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["ink"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 color1 = vec4(1.0,1.0,1.0,1.0);\nvec4 color2 = vec4(0.7,0.7,0.7,1.0);\nvec4 color3 = vec4(0.0,0.0,0.0,1.0);\nfloat multiplier = 1.0;\nfloat midPosition = 0.5;\n\n#define NUM_OCTAVES 5\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    vec4 c = texture(iChannel0, uv);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec4 tex = texture(iChannel1, uv);\n    \n    float l = clamp(((c.x+c.y+c.z)/3.0)*multiplier,0.0,1.0);\n    \n    vec4 res1 = mix(color1, color2, smoothstep(0.0,midPosition,l));\n    vec4 res2 = mix(res1, color3, smoothstep(midPosition,1.0,l));\n    \n    fragColor = res2*(0.9 + tex*0.1);\n    //fragColor = c;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 cam = texture(iChannel1, uv);\n    float keying = smoothstep(0.0,1.0,distance(cam.xyz, vec3(13.0/255.0,163.0/255.0,37.0/255.0))*1.0);\n    \n    fragColor = vec4(clamp(cam.xyz + vec3(0.8), vec3(0.0), vec3(1.0))*keying, keying);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float sampleDistance = 30.0;\nfloat diffusion = 1.0;\nfloat turbulence = 0.2;\nfloat fluidify = 0.18;\nfloat attenuate = 0.005;\n\n//vec2 m = iMouse.xy/iResolution.y;\n    \n//float mask = mouseMask(m,uv,0.2);\n\n//mix(vec2(0.5),\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy/iResolution.xy);\n    \n    vec4 baseColor = texture(iChannel0, uv);\n    \n    vec2 sDist = sampleDistance/iResolution.xy;\n    \n    vec4 newColor = texture(iChannel1, uv);\n    vec2 turb = (texture(iChannel3, uv).xy*0.9-1.35)*7.;\n\n    vec4 newColor1 = texture(iChannel1, uv + vec2(1.0,0.0)*sDist);\n    vec4 newColor2 = texture(iChannel1 , uv + vec2(-1.0,0.0)*sDist);\n    vec4 newColor3 = texture(iChannel1, uv + vec2(0.0,1.0)*sDist);\n    vec4 newColor4 = texture(iChannel1, uv + vec2(0.0,-1.0)*sDist);\n    \n    vec4 newColor5 = texture(iChannel1, uv + vec2(1.0,1.0)*sDist);\n    vec4 newColor6 = texture(iChannel1, uv + vec2(-1.0,1.0)*sDist);\n    vec4 newColor7 = texture(iChannel1, uv + vec2(1.0,-1.0)*sDist);\n    vec4 newColor8 = texture(iChannel1, uv + vec2(-1.0,-1.0)*sDist);\n     \n    vec2 t = (newColor1.x+newColor1.y+newColor1.z)/3.0 * vec2(1.0,0.0);\n    t += (newColor2.x+newColor2.y+newColor2.z)/3.0 * vec2(-1.0,0.0);\n    t += (newColor3.x+newColor3.y+newColor3.z)/3.0 * vec2(0.0,1.0);\n    t += (newColor4.x+newColor4.y+newColor4.z)/3.0 * vec2(0.0,-1.0);\n    \n    t += (newColor5.x+newColor5.y+newColor5.z)/3.0 * vec2(1.0,1.0);\n    t += (newColor6.x+newColor6.y+newColor6.z)/3.0 * vec2(-1.0,1.0);\n    t += (newColor7.x+newColor7.y+newColor7.z)/3.0 * vec2(1.0,-1.0);\n    t += (newColor8.x+newColor8.y+newColor8.z)/3.0 * vec2(-1.0,-1.0);\n    \n    t /= 8.0;\n    \n    vec2 dir = texture(iChannel2, uv).x * vec2(t+turb*turbulence)*iTimeDelta*diffusion*0.2;\n    \n    vec4 res = texture(iChannel1, uv+dir);\n    \n    if(iFrame < 10)\n    {\n    \tfragColor =  baseColor;\n    }\n    else\n    {\n    \tfragColor = mix(res, baseColor, clamp(baseColor.a*fluidify + attenuate,0.0,1.0));\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec2 speed = vec2(1.0,2.0);\nfloat v = 30.0;\nfloat dist = 0.3;\nfloat random1 = 1.0;\nfloat random2 = 100.0;\n\n#define NUM_OCTAVES 5\n\nfloat hash(float n)\n{\n   return fract(sin(dot(vec2(n,n) ,vec2(12.9898,78.233))) * 43758.5453);  \n}  \n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvec2 turbulence (in vec2 _st) {\n    \n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    \n    float m1 = mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n    \n    float a1 = random(i+1.0);\n    float b1 = random(i + vec2(1.0, 0.0));\n    float c1 = random(i + vec2(0.0, 1.0));\n    float d1 = random(i + vec2(1.0, 1.0));\n\n    vec2 u1 = f * f * (3.0 - 2.0 * f);\n\n    float m2 = mix(a1, b1, u1.x) +\n            (c1 - a1)* u1.y * (1.0 - u1.x) +\n            (d1 - b1) * u1.x * u1.y;\n    return vec2(m1,m2);\n}\n\nvec2 fbmV ( in vec2 _st) {\n\n    vec2 v = vec2(0.0);\n    vec2 a = vec2(0.5);\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * turbulence(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= vec2(0.5);\n    }\n    return v;\n}\n\nfloat fbmF ( in vec2 _st) {\n\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * turbulence(_st).x;\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ratio = iResolution.x/iResolution.y;\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv.x *= ratio;\n    \n    vec2 r = vec2(0.);\n    vec2 q = vec2(0.);\n    q.x = fbmF(uv*3.0 + 21.10*iTime);\n    q.y = fbmF(uv*3.0 + vec2(1.0));\n    \n    vec2 turb1 = fbmV(uv*13.0 + 1.0*q + vec2(1.7,9.2)+ 0.35*iTime )*0.5+0.5;\n    vec2 turb2 = fbmV(uv*152.0 + 1.0*q + vec2(8.3,2.8)+ 0.326*iTime)*0.5+0.5;\n    \n    vec2 turb = turb1 + turb2;\n    \n    fragColor = vec4(turb.x, turb.y, 0.0, 0.0);\n      \n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"float mouseMask(vec2 p,vec2 uv,float r){\n\n    float dist = sqrt(dot(uv-p,uv-p));\n    return smoothstep(r,r-0.1,dist);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy/iResolution.xy);\n    \n    float ratio = iResolution.x/iResolution.y;\n\n    vec4 pf = texture(iChannel0, uv);\n    \n    vec2 m = iMouse.xy/iResolution.y;\n    float mask = mouseMask(m,uv*vec2(ratio,1),0.2);\n    fragColor = max(pf*vec4(0.98),vec4(mask));\n}","name":"Buffer D","description":"","type":"buffer"}]}