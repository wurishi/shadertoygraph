{"ver":"0.1","info":{"id":"Ns2Bzy","date":"1646722167","viewed":139,"name":"Tiles Refraction","username":"benedikt","description":"the idea of a bell-shaped volume of glass sliding over a chess board","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["refraction","tiles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//the idea of a bell-shaped volume of glass sliding over a chess board\n\n#define PI 3.1415926538\n#define E 2.71828182845904523536\n\nfloat gauss(float x, float s, float w, float o){\n    // curve of gaussian normal distribution\n    return 1./(1./s)/sqrt(2.*PI) * pow(E, -.5*pow(((x/w)-o)/(1./s),2.)); \n    }\n    \nvec3 surf(vec2 pos, float s, float w, vec2 o, float h){\n    // s=steepness, w=width, o=offset, h = height\n    float maximum = gauss(0., s, 1., 0.);\n    float x = gauss(pos.x, s, w, o.x) / maximum; // 0<>1\n    float y = gauss(pos.y, s, w, o.y) / maximum; // 0<>1\n    return vec3(pos, sqrt(x*y) * h);\n    }\n\nvec3 bell(vec2 pos, float s, float w, vec2 o, float h){\n    // s=steepness, w=width, o=offset, h = height\n    float maximum = gauss(0., s, 1., 0.);\n    float x = gauss(pos.x, s, w, o.x) / maximum; // 0<>1\n    float y = gauss(pos.y, s, w, o.y) / maximum; // 0<>1\n    float x2 = -(pos.x/w - o.x)/pow(1./s,2.) * x;\n    float y2 = -(pos.y/w - o.y)/pow(1./s,2.) * y;\n    return normalize(cross(vec3(1, 0, x2*y*h), vec3(0, 1, y2*x*h))); //normals\n    } \n\n// tiles\nfloat tiles(vec2 uv){\n    float tx = floor(mod(uv.x * 13., 2.)); // 0 or 1\n    float ty = floor(mod(uv.y * 13., 2.));\n    float t = abs(ty+tx-1.); //0 or 1\n    return t * .75 + .2;  \n    }\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y; \n\n    // Time varying pixel color\n    float p = length(uv);\n    \n    // generate bell surface\n    float steepness = 2.6;\n    float width = .4;\n    vec2 offset = vec2(sin(iTime), sin(iTime*2.)/4.);\n    float height = .7;\n    // normal at uv\n    vec3 bn = bell(uv, steepness, width, offset, height);\n    // surf point at uv\n    vec3 bs = surf(uv, steepness, width, offset, height); \n    \n    // refraction\n    vec3 ray = normalize(vec3(0,0,-1)) ;\n    vec3 ri = vec3(1.265, 1.27, 1.275); //refraction index \n    float c = dot(-bn, ray);\n    //vec3 rDirR = vec3(ri.x*ray  + (ri.x * c - sqrt(1.-pow(ri.x,2.)*(1.-pow(c,2.)))) * bn);\n    //vec3 rDirG = vec3(ri.y*ray  + (ri.y * c - sqrt(1.-pow(ri.y,2.)*(1.-pow(c,2.)))) * bn);\n    //vec3 rDirB = vec3(ri.z*ray  + (ri.z * c - sqrt(1.-pow(ri.z,2.)*(1.-pow(c,2.)))) * bn);\n    // oh sh*it, there is a function!\n    vec3 rDirR = refract(ray, bn, ri.x);  \n    vec3 rDirG = refract(ray, bn, ri.y);\n    vec3 rDirB = refract(ray, bn, ri.z);    \n\n    // refracted ray from surface to tile\n    vec3 rayOnTileR = bs + bs.z/dot(-bs,rDirR)*rDirR;\n    vec3 rayOnTileG = bs + bs.z/dot(-bs,rDirG)*rDirG;\n    vec3 rayOnTileB = bs + bs.z/dot(-bs,rDirB)*rDirB;\n    float tcolR = tiles(vec2(rayOnTileR.xy));\n    float tcolG = tiles(vec2(rayOnTileG.xy));\n    float tcolB = tiles(vec2(rayOnTileB.xy));\n    vec3 tcol = vec3(tcolR, tcolG, tcolB);\n\n    // light\n    vec3 dirParalLight = normalize(vec3(-1.4, 1.1, 4.8));\n    vec3 lightOrigin = vec3(.5, .3, .7);\n    vec3 lightOrigin2 = vec3(-.2, -.3, 1.5);\n    vec3 liColP = vec3(.99, .9, .7);\n    vec3 liCol1 = vec3(.9, .97, .99);\n    vec3 dirToLight = normalize(lightOrigin - bs);\n    vec3 dirToLight2 = normalize(lightOrigin2 - bs);\n    vec3 dirToLight3 = normalize(vec3(-1, 1, 0));\n    vec3 li1 = pow(clamp(dot(bn, dirToLight), 0., 1.),80.) * liCol1 * 1. ;\n    vec3 li2 = clamp(dot(bn, dirToLight2), 0., 1.) * vec3(.1, .1, .9)  * .0 ;\n    vec3 li3 = clamp(dot(bn, dirToLight3), 0., 1.) * vec3(0.5, 0., 1)  * .0;\n    vec3 col = li1 + li2 + li3;\n    col += pow(clamp(dot(bn, dirParalLight), 0., 1.), 80.) * liCol1 * 1.; \n    \n    // spec\n    vec3 ref = reflect(ray, bn);\n    float spec = clamp(dot(lightOrigin-bs, ref),0.,1.);\n    spec = 3.*clamp(4.*(spec-.85), 0., 1.);\n    vec3 specRGB = spec * liCol1;\n    \n    // caustics\n    vec3 rDirFromTileR = reflect(rayOnTileR, -ray);\n    vec3 rDirFromTileG = reflect(rayOnTileG, -ray);\n    vec3 rDirFromTileB = reflect(rayOnTileB, -ray);\n    vec3 bs2R = surf(rayOnTileR.xy, steepness, width, offset, height);\n    vec3 bs2G = surf(rayOnTileG.xy, steepness, width, offset, height);\n    vec3 bs2B = surf(rayOnTileB.xy, steepness, width, offset, height);\n    // estimate ray back on glass\n    vec3 rBackOnSurfR = rayOnTileR + bs2R.z/dot(bs2R,rDirFromTileR)*rDirFromTileR;\n    vec3 rBackOnSurfG = rayOnTileG + bs2G.z/dot(bs2G,rDirFromTileG)*rDirFromTileG;\n    vec3 rBackOnSurfB = rayOnTileB + bs2B.z/dot(bs2B,rDirFromTileB)*rDirFromTileB;\n    vec3 bn3R = bell(rBackOnSurfR.xy, steepness, width, offset, height);\n    vec3 bn3G = bell(rBackOnSurfG.xy, steepness, width, offset, height);\n    vec3 bn3B = bell(rBackOnSurfB.xy, steepness, width, offset, height);\n    vec3 rDirBackOutR = refract(rDirFromTileR, bn3R, -ri.x);\n    vec3 rDirBackOutG = refract(rDirFromTileG, bn3G, -ri.y);\n    vec3 rDirBackOutB = refract(rDirFromTileB, bn3B, -ri.z);\n    vec3 bs3R = bell(rBackOnSurfR.xy, steepness, width, offset, height);\n    vec3 bs3G = bell(rBackOnSurfG.xy, steepness, width, offset, height);\n    vec3 bs3B = bell(rBackOnSurfB.xy, steepness, width, offset, height);\n    float causR = abs(pow(clamp(dot(rDirBackOutR, lightOrigin-bs3R), -1., 1.), 3.));\n    float causG = abs(pow(clamp(dot(rDirBackOutG, lightOrigin-bs3G), -1., 1.), 3.));\n    float causB = abs(pow(clamp(dot(rDirBackOutB, lightOrigin-bs3B), -1., 1.), 3.));\n    vec3 causRGB = vec3(causR, causG, causB);\n    \n    //vec3 lightInGlassG = refract(-dirToLight, bn, ri.y);\n    //vec3 lightOnTile2 = -bs - vec3(-bs.z/dot(-bs,rDir2)*rDir2);    \n    \n    col += tcol;\n    col += vec3(specRGB);\n    col += vec3(causRGB);\n    \n    // Output to screen \n    fragColor = vec4(vec3((col)), 1.0);\n}","name":"Image","description":"","type":"image"}]}