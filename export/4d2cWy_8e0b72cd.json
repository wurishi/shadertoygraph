{"ver":"0.1","info":{"id":"4d2cWy","date":"1493629987","viewed":333,"name":"Knitting","username":"andras","description":"Knitting test\n\nFirst attempt\n\nTrying to recreate \nhttps://www.youtube.com/watch?v=VzAalW-RUzU\n\nand \n\nhttp://www.videocopilot.net/blog/wp-content/uploads/2016/12/sweater_controls.jpg\n\n\n\n\n","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["knitting","sweater"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n#define tile 70.0\n#define circleRadius 0.47\n#define speed vec2(iTime * 0.0, 0.0)\n\nmat2 rotm(float d)\n{\n\n\tfloat c = cos(d);\n\tfloat s = sin(d);\n\t\n\treturn mat2(c, -s, s, c);\n}\n\nvec2 random2(vec2 st);\nfloat noise(vec2 st);\nfloat fbm (in vec2 st);\n\nfloat seem(vec2 uv)\n{\n\t\n\t// Leave a little space between seem on the x\n\tuv.x = uv.x * 1.2;\n\tuv.y = uv.y * 0.5 + 0.5;\n\t\n\tfloat sb = length(uv - vec2(0.5, 1.0));\n\t\n\tfloat sl = length(uv - vec2(0.0, 0.5));\n\t\n\tfloat sr = length(uv - vec2(1.0, 0.5));\n\t\n\t\n\t// ---\n\tsl = max(sb, sl);\n\tsr = max(sb, sr);\n\t\n\tfloat s = min(sl, sr);\n\t//float s = sl;\n\t\n\tfloat e = 0.01;\n\t\n\treturn smoothstep(s - e, s + e, 0.5);\n}\n\nfloat cGrid(in vec2 p)\n{\n\tvec2 grid = fract(p * tile);\n\t\n\treturn seem(grid);\n}\n\nvec2 modP(in vec2 p)\n{\n\n\tconst float nScale = 50.0;\n\t\n\t// Gen noise only based on x\n\t// Each row column needs to be offset by the same amount\n\tvec2 n = vec2(\n\t\t0.0,\n\t\tfbm(p.xx * nScale + 300.0)\n\t);\n\t\n\treturn p + n * 0.017;\n}\n\n\nfloat sum( vec3 v ) { return v.x+v.y+v.z; }\n// IQ\n// https://www.shadertoy.com/view/Xtl3zf\nvec3 textureNoTile( in vec2 x)\n{\n    float v = 1.0;\n    \n    //float k = texture( iChannel1, 0.005*x ).x; // cheap (cache friendly) lookup\n    float k = noise(x * 3.0);\n    \n    float l = k*8.0;\n    float i = floor( l );\n    float f = fract( l );\n    \n    vec2 offa = sin(vec2(3.0,7.0)*(i+0.0)); // can replace with any other hash\n    vec2 offb = sin(vec2(3.0,7.0)*(i+1.0)); // can replace with any other hash\n\n    vec3 cola = texture( iChannel0, x + v*offa ).xyz;\n    vec3 colb = texture( iChannel0, x + v*offb ).xyz;\n    \n    return mix( cola, colb, smoothstep(0.2,0.8,f-0.1*sum(cola-colb)) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.yy;\n    \n    vec3 c = vec3(0.0);\n\t\n\t\n\tvec2 g = modP(p);\n\t\n    //vec3 pic = getPicture(g);\n    \n    vec3 pic = texture(iChannel1, fragCoord.xy / iResolution.xy).xyz;\n    \n\tc = cGrid(g) * pic;\n   \n    vec3 e1 = textureNoTile(p * 5.0 + speed) * 2.5;\n    vec3 e2 = textureNoTile(p * rotm(1.6) * 5.0 + speed) * 2.5;\n    \n    c *= pow(e1.x, e2.y);\n    \n\tfragColor = vec4( c, 1.0 );\n}\n\n// ###########################################################################\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\n// Value Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/lsf3WH\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// http://thebookofshaders.com/13/\nfloat fbm (in vec2 st)\n{\n    // Initial values\n    float value = 0.0;\n    float amplitud = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < 3; i++) {\n        value += amplitud * noise(st);\n        st *= 2.;\n        amplitud *= .5;\n    }\n    return value;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n#define tile 80.0\n\n// TODO\n#define speed vec2(iTime * 0.0, 0.0)\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\n// Value Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/lsf3WH\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nmat2 rotm(float d)\n{\n\n\tfloat c = cos(d);\n\tfloat s = sin(d);\n\t\n\treturn mat2(c, -s, s, c);\n}\n\n// http://thebookofshaders.com/08/\nfloat box(in vec2 _st, in vec2 _size){\n    _size = vec2(0.5) - _size*0.5;\n    vec2 uv = smoothstep(_size, _size+vec2(0.001), _st);\n    uv *= smoothstep(_size, _size+vec2(0.001), vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nfloat getCross(in vec2 _st, float _size){\n    return  box(_st, vec2(_size,_size/8.)) + \n            box(_st, vec2(_size/8.,_size));\n}\n\n// uv must be [-1, 1]\n// http://thebookofshaders.com/07/\nfloat getShape(int sides, vec2 uv) {\n    \n  \tfloat a = atan(uv.x,uv.y) + PI;\n  \tfloat r = TWO_PI/float(sides);\n    \n    \tfloat d = cos(floor(.5+a/r)*r-a)*length(uv);\n    \n\treturn 1.0-smoothstep(.4,.41,d);\n}\n\nvec3 getPicture(in vec2 p)\n{\n    \n    float h = noise(p + 13.) * 0.5 + 0.3;\n    float ch = step(p.y, h);\n    \n    // Repeat factor\n    const float rf = 0.9;\n    \n    float o = floor(p.x / rf);\n    \n    p.y += 0.03;\n    \n    p = mod(p, rf);\n    \n\tp = floor(p * tile) / tile;\n\n    vec2 r = p;\n    \n\tr -= 0.5;\n\tr = rotm(iTime * 0.25 + o + 2.) * r;\n\tr += 0.5;\n\t\n\t//vec3 shape = vec3(getShape(3, p * 2.0 - 1.0));\n\t\n    float c = getCross(r, 0.5);\n    \n    float triang = getShape(3, (p * 2.0 - 1.0) * 2.4) - getShape(3, (p * 2.0 - 1.0) * 3.4);\n    \n    p.y += 0.185;\n    float rect = getShape(4, (p * 2.0 - 1.0) * 1.8) - getShape(100, (p * 2.0 - 1.0) * 3.8);    \n    \n\tvec3 bg = vec3(0.2, .3, 0.9);\n\n\treturn bg + c + triang + rect + ch;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 p = fragCoord.xy / iResolution.yy;\n    \n    \n    vec3 c = getPicture(p + speed);\n    \n    fragColor = vec4(c, 1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}