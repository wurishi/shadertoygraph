{"ver":"0.1","info":{"id":"mlXXDM","date":"1674951589","viewed":172,"name":"voronoi giraffe 2","username":"jonasfrey","description":"giraffe","likes":11,"published":3,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// lazy hash steal from dave hoskins\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n// lazy voronoi steal from iq \n\nvec4 voronoi( in vec2 x )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash22( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash22( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>0.00001 )\n        md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n\n    return vec4( md, md, mg );\n}\n\n\n#define n_aa (1./iResolution.x)*10.\n#define n_tau 6.283185\nfloat f_n_dist_sqr(vec2 o){\n    return max(abs(o.x), abs(o.y));\n}\nfloat f_n_dist_rct(vec2 o, float n){\n    n = abs(n);\n    float nx = o.x-n;\n    float ny = abs(o.y);\n    float nd = max(nx, ny);\n    float nx2 = (-1.*o.x)-n;\n    float nd2 = max(nx2, ny);\n    \n    return max(nd, nd2);\n}\nvec2 f_o_rotd(vec2 o, float n_angle_nor){\n    float n_ang_rad = n_angle_nor * n_tau;\n    return vec2(\n        cos(n_ang_rad)*o.x - sin(n_ang_rad)*o.y, \n        sin(n_ang_rad)*o.x + cos(n_ang_rad)*o.y\n    );\n}\n\nvec4 f_o_col_horn(vec2 o_fc){\n    vec4 o_col = vec4(0.);\n    vec2 o = o_fc; \n    o *= vec2(3.+sin(o.y-.5*n_tau*.93)*5.+o.y*o.y*o.y*20., .9);\n    o *= vec2(1.5, 1.);\n    float nr = .5;\n    float n = length(o);\n    n = smoothstep(nr+n_aa, nr, n);\n    o_col+=vec4(n);\n    vec3 o_cl = vec3(0.545,0.498,0.506);\n    vec3 o_cd = vec3(0.055,0.078,0.059);\n    \n    return o_col*vec4(mix(o_cl, o_cd, o.y*2.), 1.);\n}\nvec4 f_o_col_head(vec2 o_fc){\n\n    vec4 o_col = vec4(0.);\n    vec2 o = o_fc; \n\n    //head \n    o = f_o_rotd(o, -0.05);\n    o.y *= 1.78-o.x;\n    float nr = .5;\n    float n = length(o);\n    n = smoothstep(nr+n_aa, nr, n);\n    o_col+=vec4(n);\n    \n    // \"horn?\" 1\n    o = o_fc;\n    o*= 2.5;\n    o = f_o_rotd(o, 0.05);\n    o+= vec2(-0.02, -1.3);\n    vec4 o_ch1 = f_o_col_horn(o);\n    // horn 2\n    o = o_fc;\n    o*= 2.5;\n    o = f_o_rotd(o, 0.02);\n    o+= vec2(0.2, -1.1);\n    vec4 o_ch2 = f_o_col_horn(o);\n    vec4 o_ch = ((1.- (o_ch1 * o_ch2)))*o_ch1;//+o_ch2;\n    o_col += o_ch1+o_ch2;\n    return o_col;\n}\nvec4 f_o_col_neck(vec2 o_fc){\n\n    vec4 o_col = vec4(0.);\n    vec2 o = o_fc; \n\n    //head \n    o*= vec2(-1.,-1.);\n    o = f_o_rotd(o, -0.05+o.x*0.18);\n    o = f_o_rotd(o, -0.05);\n    o *= vec2(4., 1.);\n    float nr = .5;\n    float n = length(o);\n    n = smoothstep(nr+n_aa, nr, n);\n    o_col+=vec4(n);\n    \n    return o_col;\n    \n}\nvec4 f_o_col_body(vec2 o_fc){\n\n    vec4 o_col = vec4(0.);\n    vec2 o = o_fc; \n\n    //o = f_o_rotd(o, -0.05);\n    o*=vec2(1.,(1.+o.x*1.5)*.5+1.);\n    float nr = .5;\n    float n = length(o);\n    n = smoothstep(nr+n_aa, nr, n);\n    o_col+=vec4(n);\n    \n    return o_col;\n    \n}\nvec4 f_o_col_leg(vec2 o_fc, float n_t_offset){\n\n    vec4 o_col = vec4(0.);\n    \n    o_fc *= vec2(-1., 1.);\n    float n_tf = fract(iTime+n_t_offset);\n    float n_tfo = n_tf;\n    float n_tthr, n_tnor;\n    vec2 o = o_fc;\n    //upper leg\n    n_tthr = 0.8;\n    n_tfo = n_tf;\n    n_tnor = (n_tfo/n_tthr);\n    if(n_tfo > n_tthr){\n        n_tnor = 1.-(n_tfo - n_tthr)/ (1.-n_tthr);\n    }\n    o = f_o_rotd(o, n_tnor*0.2-0.1);\n    o*=vec2(2.-sin(o.y*n_tau*.5)*.8,1.);\n\n    float nr = .5;\n    float n = length(o);\n    n = smoothstep(nr+n_aa, nr, n);\n    o_col+=vec4(n);\n    \n    vec2 o_2 = o;\n    //under leg\n    \n    o = o_fc;\n\n    o = o_fc;\n    n_tthr = 0.8;\n    n_tfo = fract(n_tf-0.02);\n    n_tnor = (n_tfo/n_tthr);\n    if(n_tfo > n_tthr){\n        n_tnor = 1.-(n_tfo - n_tthr)/ (1.-n_tthr);\n    }\n    \n    o = f_o_rotd(o, n_tnor*0.2-0.1);\n    \n    o+=vec2(0.0,0.8);\n\n    \n    o*=vec2(o.x*33.,1.);\n    nr = .5;\n    n = length(o);\n    n = smoothstep(nr+n_aa, nr, n);\n    o_col+=vec4(n);\n    \n    //hoove\n    o = o_fc;\n    n_tthr = 0.8;\n    n_tfo = n_tf;\n    n_tnor = (n_tfo/n_tthr);\n    if(n_tfo > n_tthr){\n        n_tnor = 1.-(n_tfo - n_tthr)/ (1.-n_tthr);\n    }\n    \n    //o = f_o_rotd(o, n_tnor*0.2);\n    \n    o*=3.;\n\n\n    o = f_o_rotd(o, 0.2*n_tnor-.12);\n    o+=vec2(0.5,4.);\n    o = f_o_rotd(o, 0.);\n    o*=vec2(1.5+o.y*2.,1.);\n    nr = .5;\n    n = length(o);\n    n = smoothstep(nr+n_aa, nr, n);\n    o_col+=vec4(n);\n    \n    return o_col;\n    \n}\nvec4 f_o_col_giraffe(vec2 o_fc){\n    vec2 o = o_fc;\n    vec4 o_col = vec4(0.);\n    o*=8.;\n    o+=vec2(3.,-3.);\n    o_col += f_o_col_head(o);\n    o = o_fc;\n    o*=3.;\n    o+=vec2(0.8,-0.7);\n    o_col += f_o_col_neck(o);\n    o = o_fc;\n    o*=3.;\n    o+=vec2(0.2,-0.2);\n    o_col += f_o_col_body(o);\n    \n    o = o_fc;\n    o*=5.;\n    o+=vec2(0.8,0.4);\n    o_col += f_o_col_leg(o, 0.5);\n    \n    o = o_fc;\n    //o*=vec2(-4.,4.);\n    o*=vec2(5., 4.);\n    o+=vec2(-0.1,0.01);\n    o_col += f_o_col_leg(o, 1.);\n    return o_col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 o_fc = (fragCoord.xy - iResolution.xy*.5)/iResolution.y;\n    \n    vec2 o = o_fc;\n    vec4 o_col = clamp(f_o_col_giraffe(o),0., 1.);\n    //vec4 o_col2 = clamp(f_o_col_giraffe(o*1.05+vec2(0.002, -0.002)), 0., 1.);\n    \n    //o_col2 = o_col - o_col2;\n\n    \n    vec4 o_voronoi = voronoi(o_fc*20.);\n    \n    float n_thills = iTime*10.;\n    vec2 o_fc_vonoroi_hills = o_fc*20.+vec2(-n_thills, 0.);\n    vec4 o_voronoi_hills = voronoi(o_fc_vonoroi_hills);\n    vec2 o_voronoi_hills_rnd = hash22(floor(o_fc_vonoroi_hills)+o_voronoi_hills.zw);\n    float n_d_hills = o_fc.y - sin(o_fc.x*n_tau-n_thills/3.3)*0.1+0.2;\n    n_d_hills = smoothstep(0.1+n_aa, 0.1, n_d_hills);\n    n_d_hills -= o_col.x;\n    vec4 o_col_hills = vec4(0.,o_voronoi_hills_rnd.x*2.+.4,0.,1.);\n    vec4 o_cola_hills = o_col_hills*n_d_hills*o_voronoi_hills.x;    \n    \n\n    float n_tbg = iTime*3.;\n    vec2 o_fc_vonoroi_bg = o_fc*20.+vec2(-n_tbg, 0.);\n    vec4 o_voronoi_bg = voronoi(o_fc_vonoroi_bg);\n    vec2 o_voronoi_bg_rnd = hash22(floor(o_fc_vonoroi_bg)+o_voronoi_bg.zw);\n    float n_d_bg = clamp(1.-n_d_hills, 0., 1.); \n    n_d_bg -= o_col.x;\n    vec4 o_col_bg = vec4(o_voronoi_bg_rnd.y*4.,0.,o_voronoi_bg_rnd.x*10.,1.);\n    vec4 o_cola_bg = o_col_bg*n_d_bg*o_voronoi_bg.x;    \n    \n\n\n    float n_tgiraffe = 0.;\n    vec2 o_fc_vonoroi_giraffe = o_fc*20.+vec2(-n_tgiraffe, 0.);\n    vec4 o_voronoi_giraffe = voronoi(o_fc_vonoroi_giraffe);\n    vec2 o_voronoi_giraffe_rnd = hash22(floor(o_fc_vonoroi_giraffe)+o_voronoi_giraffe.zw);\n    float n_d_giraffe = clamp(o_col.x, 0., 1.); \n    vec3 o_colg = vec3(0.761,0.6,0.38);\n    vec4 o_col_giraffe = vec4(o_colg,1.);//*o_voronoi_giraffe_rnd.y;\n    float n_thick = o_voronoi_giraffe_rnd.x*0.1;\n    float n_ss = smoothstep(n_thick, n_thick+n_aa,o_voronoi_giraffe.x);\n    vec4 o_cola_giraffe = o_col_giraffe*n_d_giraffe;    \n    o_cola_giraffe += n_d_giraffe*vec4(1.-n_ss);\n    \n    fragColor = vec4(0.0);\n    //fragColor = vec4(vec4(n_col_bg)*(o_voronoi_bg));\n    \n    fragColor += o_cola_hills;\n    fragColor += o_cola_bg;\n    fragColor = clamp(fragColor, 0., 1.);\n    fragColor += o_cola_giraffe;\n    //fragColor = o_col;\n    //fragColor = vec4(n_d_hills);\n    \n}","name":"Image","description":"","type":"image"}]}