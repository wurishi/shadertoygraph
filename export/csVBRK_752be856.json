{"ver":"0.1","info":{"id":"csVBRK","date":"1698405755","viewed":36,"name":"CSSBattle#012 Wiggly Moustache","username":"Beowolve","description":"CSSBattle - #012 Wiggly Moustache: [url]https://cssbattle.dev/play/12[/url]\n\nFirst target with some animation added, now its really wiggly :D","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cssbattle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Arc function used from https://www.shadertoy.com/view/XlsSRr\n\n#define S(v)  smoothstep(width-ss,width, abs(v) )\n\n// Arc segment with certain depth\nstruct Arc {\n  vec2 p0;\n  vec2 p1;\n    \n  // Depth of the Arc, valid range of (-1.0, 1.0)\n  // with 0.0 = straight line, 1.0 = semi-circle\n  float d;\n};\n\nvec2 perpendicular (const vec2 v) {\n  return vec2 (-v.y, v.x);\n}\n\nfloat tan2atan (float d) {\n  return 2. * d / (1. - d * d);\n}\n\nvec2 computeArcCenter (const Arc a) {\n  return mix (a.p0, a.p1, .5) +\n\t perpendicular (a.p1 - a.p0) / (2. * tan2atan (a.d));\n}\n\nfloat sdArcWedge (Arc a, const vec2 p) {\n  vec2 c = computeArcCenter (a);\n  return -sign (a.d) * (distance (a.p0, c) - distance (p, c));\n}\n\nbool isPointInsideArcWedge (const Arc a, const vec2 p) {\n  float d2 = tan2atan (a.d);\n  return dot (p - a.p0, (a.p1 - a.p0) * mat2(1,  d2, -d2, 1)) >= 0. &&\n\t dot (p - a.p1, (a.p1 - a.p0) * mat2(1, -d2,  d2, 1)) <= 0.;\n}\n\nfloat sdArcOutsideWedge (const Arc a, const vec2 p) {\n  vec2 m = mix (a.p0, a.p1, .5);\n  float d2 = tan2atan (a.d);\n  if (dot (p - m, a.p1 - m) < 0.)\n    return -dot (p - a.p0, normalize ((a.p1 - a.p0) * mat2(+d2, -1, +1, +d2)));\n  else\n    return -dot (p - a.p1, normalize ((a.p1 - a.p0) * mat2(-d2, -1, +1, -d2)));\n}\n\nfloat sdArc(Arc arc, vec2 p) {\n  // trick to avoid depth values very close to 0.0\n  arc.d = max(abs(arc.d), 0.0001) * (2. * step(0.9, sign(arc.d)) - 1.);\n  \n  if (isPointInsideArcWedge(arc, p))\n    return sdArcWedge(arc, p);\n  \n  return min (distance (p, arc.p0), distance (p, arc.p1)) * sign(sdArcOutsideWedge(arc, p));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy) / iResolution.y;\n    vec2 p = uv;\n    float ss = .75/iResolution.y;\n      \n    vec3 c1 = vec3(0.847,0.435,0.271);\n    \n    float size = .2;\n    float width = size * .25;\n    \n    Arc arc;\n    arc.p0 = vec2(-size, 0);\n    arc.p1 = vec2(size, 0);\n    arc.d = cos(iTime);\n    \n    // set bg color\n    vec3 col = vec3(0.961,0.839,0.706);\n    \n    // center arc\n    col = mix( col, c1, 1.0-S(sdArc(arc, p)));\n    \n    // side arcs\n    arc.d *= -1.; // inverse arc\n    vec2 o = vec2(size*2.,0);\n    col = mix( col, c1, 1.0-S(sdArc(arc, uv + o)));\n    col = mix( col, c1, 1.0-S(sdArc(arc, uv - o)));\n\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}