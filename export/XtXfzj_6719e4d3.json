{"ver":"0.1","info":{"id":"XtXfzj","date":"1512450330","viewed":142,"name":"2D Julia DE","username":"dust","description":"A little bit of fun with 2D distance estimation :)\nEDIT 5/12/2017: Fixed DE errors noted by iq, moved old code under the BANDED #define.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","distanceestimation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Banded-ness switch; zero for no banding, one for banding with\n// light shading, two for banding with dark shading\n#define BANDED 0\n\nvec2 PolyMul(vec2 a, vec2 b)\n{\n    return vec2((a.x * b.x) - (a.y * b.y), \n                (a.x * b.y) + (a.y * b.x));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Scaling function from iq's Mandelbrot DE\n    // https://www.shadertoy.com/view/lsX3W4\n    float scale = 1.5;\n\tvec2 z = vec2(-1.0 * scale, -1.0 * scale) + 2.0 * (fragCoord.xy / iResolution.xy) * scale;\n   \tz.x *= iResolution.x / iResolution.y;\n    float sTime = sin(iTime);\n    vec2 c = vec2(-0.4, 0.6) * sTime;\n        \n    // Iterations\n    #if !BANDED\n    float maxDist = 200.0;\n    vec2 dz = vec2(1, 0);\n    float iter = 0.0;\n    float maxIter = 1024.0;\n    while (iter < maxIter &&\n           length(z) < maxDist)\n    {\n        dz = 2.0 * PolyMul(z, dz);\n    \tz = PolyMul(z, z) + c;\n        iter += 1.0;\n    }\n    #else\n    float maxDist = 2.0;\n    vec2 dz = vec2(1, 0);\n    float iter = 0.0;\n    float maxIter = 1024.0;\n    while (iter < maxIter &&\n           length(z) < maxDist)\n    {\n    \tz = PolyMul(z, z) + c;\n        dz = 2.0 * PolyMul(z, dz);\n        iter += 1.0;\n    }\n    #endif\n    \n    // Final distance\n    float r = length(z);\n    float dr = length(dz);\n    float dist = 0.5 * r * log(r) / dr;\n    \n    // Color treatment from iq's Mandelbrot DE\n    // https://www.shadertoy.com/view/lsX3W4\n    dist = clamp(pow(4.0 * dist/scale, 0.2), 0.0, 1.0);\n    #if BANDED==2\n\tfragColor = vec4(dist / maxDist,\n                     dist / maxDist, \n                     dist / maxDist,\n                     1.0);\n    #else\n  \tfragColor = vec4(dist,\n                     dist, \n                     dist,\n                     1.0);    \n    #endif\n}","name":"Image","description":"","type":"image"}]}