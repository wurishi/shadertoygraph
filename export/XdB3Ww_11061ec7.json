{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// Copyright Per Bloksgaard, 2014 - https://perbloksgaard.dk\n// I was inspired by https://www.shadertoy.com/view/XsX3zf but instead of a fast \n// distance approximation, I wanted the exact distance to a quadratic bezier spline.\n\n//Blog article about this shader below. (In danish)\n//http://www.hinnerup.net/permanent/2014/01/23/bezier_spline_shader/\n\n#define dd(a) dot(a,a)\nfloat addv(vec2 a) { return a.x + a.y; }\n\n//Find roots using Cardano's method. http://en.wikipedia.org/wiki/Cubic_function#Cardano.27s_method\nvec2 solveCubic2(vec3 a)\n{\n\tfloat p = a.y-a.x*a.x/3.;\n\tfloat p3 = p*p*p;\n\tfloat q = a.x*(2.*a.x*a.x-9.*a.y)/27.+a.z;\n\tfloat d = q*q+4.*p3/27.;\n\tif(d>.0)\n\t{\n\t\tvec2 x = (vec2(1,-1)*sqrt(d)-q)*.5;\n  \t\treturn vec2(addv(sign(x)*pow(abs(x),vec2(1./3.)))-a.x/3.);\n  \t}\n \tfloat v = acos(-sqrt(-27./p3)*q*.5)/3.;\n \tfloat m = cos(v);\n \tfloat n = sin(v)*1.732050808;\n\treturn vec2(m+m,-n-m)*sqrt(-p/3.)-a.x/3.;\n}\n\n// How to solve the equation below can be seen on this image.\n// http://www.perbloksgaard.dk/research/DistanceToQuadraticBezier.jpg\nfloat calculateDistanceToQuadraticBezier(vec2 p, vec2 a, vec2 b, vec2 c)\n{\n\tb += mix(vec2(1e-4),vec2(0.),abs(sign(b*2.-a-c)));\n\tvec2 A = b-a;\n\tvec2 B = c-b-A;\n\tvec2 C = p-a;\n\tvec2 D = A*2.;\n\tvec2 T = clamp((solveCubic2(vec3(-3.*dot(A,B),dot(C,B)-2.*dd(A),dot(C,A))/-dd(B))),0.,1.);\n\treturn sqrt(min(dd(C-(D+B*T.x)*T.x),dd(C-(D+B*T.y)*T.y)));\n}\n\nvec3 HSL2RGB_CubicSmooth(in vec3 c)\n{\n    vec3 rgb = clamp(abs(mod(c.x+vec3(0.,4.,2.),6.)-3.)-1.,0.,1.);\n    rgb = rgb*rgb*(3.0-2.0*rgb); // iq's cubic smoothing\n    return c.z+ c.y*(rgb-0.5)*(1.-abs(2.*c.z-1.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 s = (-iResolution.xy+2.*gl_FragCoord.xy)/iResolution.y;\n\tvec2 p0 = vec2(-cos(iTime*0.5)*0.4,sin(iTime*0.9)*0.4);\n\tvec2 p1 = vec2(-cos(iTime*2.3),sin(iTime*1.1));\n\tvec2 p2 = vec2(cos(iTime*1.3)*0.4,-sin(iTime*0.3)*0.3);\n\tfloat zRot = sin(iTime)-iTime*0.9;\n\tfloat fCos = cos(zRot);\n\tfloat fSin = sin(zRot);\n\tp0 *= mat2(fCos,fSin,-fSin,fCos);\n\tzRot = sin(iTime*0.6);\n\tfCos = cos(zRot);\n\tfSin = sin(zRot);\n\tp1 *= mat2(fCos,fSin,-fSin,fCos);\n\tzRot = cos(iTime*1.85)+iTime;\n\tfCos = cos(zRot);\n\tfSin = sin(zRot);\n\tp2 *= mat2(fCos,fSin,-fSin,fCos);\n\tfloat d = calculateDistanceToQuadraticBezier(s,p0,p1,p2);\n    d *= length(iResolution.xy)*0.25;\n\td *= (2.0+sin(iTime*0.7)*1.6);\n\tfloat h = d*0.023+5.4;\n\tfloat q = smoothstep(-5.0, 35.0, d);\n\tfloat l = 0.5*q;\n\tl *= 1.0-smoothstep(180.0, 250.0, d);\n\tl += 1.0-smoothstep(2.0, 3.0, d);\n\tfragColor = vec4(HSL2RGB_CubicSmooth(vec3(h,q,l)),1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdB3Ww","date":"1388751874","viewed":2580,"name":"Bezier DistanceGlow","username":"bloxard","description":"I was inspired by https://www.shadertoy.com/view/XsX3zf but instead of a fast distance approximation, \nI wanted the exact distance to a quadratic bezier spline.","likes":37,"published":1,"flags":0,"usePreview":0,"tags":["cardanosmethod","bezierspline","quadraticbezier"],"hasliked":0,"parentid":"","parentname":""}}