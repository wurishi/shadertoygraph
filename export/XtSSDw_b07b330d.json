{"ver":"0.1","info":{"id":"XtSSDw","date":"1443970449","viewed":171,"name":"Fire","username":"ranger_x3","description":"My first shader on here. It's based on code I wrote for my thesis years ago. Gotta start somewhere.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"//\tnoise3D code courtesy of iq.\n\nconst float octaves = 4.;\nconst int iOctaves = 4;\nconst float persistence = .45;\nconst float zoom = 512.;\n\nfloat noise3D( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture( iChannel0, (uv+ 0.5)/256., 0. ).yx;\n    vec2 rg2 = texture( iChannel1, (uv+ 0.5)/256., 0. ).yx;\n    rg = mix(rg, rg2, .5);\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nfloat interpolate(float a, float b, float x)\n{\n\tfloat f = 6. * pow(x, 5.) - 15. * pow(x, 4.) + 10. * pow(x, 3.);\n\treturn mix(a, b, f);\n}\n\nvec4 interpolate(vec4 a, vec4 b, float x)\n{\n\tfloat f = 6. * pow(x, 5.) - 15. * pow(x, 4.) + 10. * pow(x, 3.);\n\treturn mix(a, b, f);\n}\n\nfloat noise3D(float x, float y, float z)\n{\n    return noise3D(vec3(x,y,z));\n}\n\nfloat perlinNoise3D(float x, float y, float z)\n{\n\tfloat frequency, amplitude, returnVal = 0.0, maxH = 0.0;\n\t\n\tvec3 dir1 = iTime * vec3(0, -3, 0);\n\tvec3 dir2 = iTime * vec3(.5, -3, .25);\n\tvec3 dir3 = iTime * vec3(.66, -3, .5);\n\tvec3 dir4 = iTime * vec3(.35, -3, .9);\n\n\tfor(int o = 0; o < iOctaves; o++)\n\t{\n\t\tfrequency = pow(2., float(o));\n\t\tamplitude = pow(persistence, float(o));\n\t\tmaxH += amplitude;\n\t\tif(float(o) < .25 * octaves)\n\t\t\treturnVal += (noise3D(x * frequency / zoom + dir1.x, y * frequency / zoom + dir1.y, z * frequency / zoom + dir1.z)) * amplitude;\n\t\telse if(float(o) < .5 * octaves)\n\t\t\treturnVal += (noise3D(x * frequency / zoom + dir2.x, y * frequency / zoom + dir2.y, z * frequency / zoom + dir2.z)) * amplitude;\n\t\telse if(float(o) < .75 * octaves)\n\t\t\treturnVal += (noise3D(x * frequency / zoom + dir3.x, y * frequency / zoom + dir3.y, z * frequency / zoom + dir3.z)) * amplitude;\n\t\telse\n\t\t\treturnVal += (noise3D(x * frequency / zoom + dir4.x, y * frequency / zoom + dir4.y, z * frequency / zoom + dir4.z)) * amplitude;\n\t}\n\t\n\treturn (returnVal / maxH);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat temperature = fragCoord.y / (iResolution.y);\n\t\n\tvec4 color;\n\tvec4 lightOrange = vec4(252. / 255., 238. / 255., 209. / 255., 1);\n\tvec4 middleOrange = vec4(247. / 255., 209. / 255., 76. / 255., 1);\n\tvec4 darkOrange = vec4(133. / 255. ,39. / 255., 3. / 255., 1);\n\tvec4 background = vec4(0, 0, 0, 1);\n\n\tfloat c = perlinNoise3D(fragCoord.x * 256., fragCoord.y * 256., 0.);\n\t\n\tfloat d = perlinNoise3D(fragCoord.y * 256., fragCoord.x * 256., 0.);\n\n\ttemperature = clamp(temperature + c * .35, 0., 1.);\n\n\tif(temperature < .1)\n\t\tcolor = background;\n\telse if(temperature < .45)\n\t\tcolor = interpolate(background, darkOrange, clamp(3. * (temperature - .1) + .1 * d, 0., 1.));\n\telse if(temperature < .65)\n\t\tcolor = interpolate(darkOrange, middleOrange, clamp(5. * (temperature - .45) + .1 * d, 0., 1.));\n\telse if(temperature < .9)\n\t\tcolor = interpolate(middleOrange, lightOrange, clamp(4. * (temperature - .65) + .1 * d, 0., 1.));\n\telse\n\t\tcolor = lightOrange;\n\t\n\tvec4 ambientColor = color * .2;\n\tvec4 diffuseColor = color;\n\tfloat diffuseValue = 1.;\n\tfragColor = ambientColor + diffuseColor * diffuseValue;\n}","name":"","description":"","type":"image"}]}