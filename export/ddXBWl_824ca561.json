{"ver":"0.1","info":{"id":"ddXBWl","date":"1689269007","viewed":35,"name":"Pulsating Circle Shader","username":"Gautam","description":"The shader creates a throbbing circle that changes its size over time. The color of the circle also changes from red to blue based on the distance from the center. The shader uses several GLSL built-in functions such as `sin`, `length`, `mix`, and `smooth","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pulsatingcircle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Pulsating Circle Shader\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalize pixel coordinates to range between -0.5 to 0.5\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n    \n    // Oscillating time value between 0 and 1 (inclusive)\n    float t = 0.5 * (sin(iTime) + 1.0);\n    \n    // Distance from current pixel to screen's center\n    float dist = length(uv);\n    \n    // Interpolate color between red and blue based on the smoothstep of dist and t\n    vec3 col = mix(vec3(1.0, 0.2, 0.1), vec3(0.1, 0.2, 1.0), smoothstep(t, t+0.01, dist));\n    \n    // Set the pixel's color\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}