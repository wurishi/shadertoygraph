{"ver":"0.1","info":{"id":"XtGBzK","date":"1543063668","viewed":205,"name":"Noisy transition","username":"Simplyfire","description":"fun transition between two colors - click with mouse to interact","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["noise","color","lava"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define outer vec3(.1 , 1.0, 1.)\n#define inner vec3(.15,0.5, 1.)\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n#define s smoothstep\n\nfloat map(float x, float a1, float a2, float b1, float b2){\n  return b1 + (b2-b1) * (x-a1) / (a2-a1);\n}\n\nvec3 rgb( in vec3 c){\n vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0), 6.0)-3.0)-1.0, 0.0, 1.0 );\n rgb = rgb*rgb*(3.0-2.0*rgb);\n return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nfloat maxrect(vec2 uv, vec2 c){\n\treturn max(abs(c.x-uv.x), abs(c.y-uv.y));\n}\n\n// book of shaders mathemagic\n// https://thebookofshaders.com/11/\n// https://thebookofshaders.com/edit.php#11/iching-03.frag\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\nfloat snoise(vec3 p) {\n\n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n\n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n\n    vec4 w, d;\n\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n\n    w = max(0.6 - w, 0.0);\n\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n\n    w *= w;\n    w *= w;\n    d *= w;\n\n    return dot(d, vec4(52.0));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 m = iMouse.xy / iResolution.xy;\n    if(m.x == 0. && m.y == 0.){\n        m.x = .5;\n        m.y = .25;\n    }\n    vec2 c = vec2(.5, .5);\n    float transitionSize = m.y;\n    float granularity = m.x*5.;\n    float t = iTime*m.y;\n    vec3 colorA = vec3(.0, 1., 1.);\n    vec3 colorB = vec3(.6, 1.6, 0.2);\n    float noiseInX = uv.x*granularity;\n    float noiseInY = uv.y*granularity-t;\n    float n = snoise(vec3(noiseInX, noiseInY, 0));\n    float pct = s(0., 1., uv.y+transitionSize*n);\n    vec3 hsb = mix(colorA, colorB, pct);\n    \n    fragColor = vec4(rgb(hsb), 1.);\n}\n\n","name":"Image","description":"","type":"image"}]}