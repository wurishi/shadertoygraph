{"ver":"0.1","info":{"id":"cltfzr","date":"1700889805","viewed":34,"name":"20231125","username":"wwwww","description":"circle","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S smoothstep\n#define PI 3.14159265359\n\n\n\n// 円形のSigned Distance Function\nfloat circleSDF(vec2 p, vec2 center, float radius) {\n    return length(p - center) - radius;\n}\n\n// ノイズ関数で星空を作成\nfloat noise(vec2 p) {\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec3 starField(vec2 uv) {\n    float n = noise(uv * 25.0);\n    return n > 0.98 ? vec3(1.0) : vec3(0.0);\n}\n\n// 光の放射効果を描画する関数\nvec3 drawRadiantLight(vec2 uv, vec2 lightPos, vec3 lightColor, float intensity, float radius) {\n    float d = distance(uv, lightPos);\n    float glow = intensity / (d * radius);\n    return lightColor * glow;\n}\n\n#define R mat2(cos(a/4.+vec4(0,11,33,0)))\n\nvoid mainImage(out vec4 O, vec2 I) {\n    vec4 h;\n    vec2 u, r = iResolution.xy;\n    float a, L, l;\n    vec3 col = starField(I / iResolution.xy);\n\n    for (float i = 7.; --i > 0.;) {\n        a = iTime * 4. + i * 0.4;\n        a -= sin(a -= sin(a));\n        \n        u = (I + I - r) / r.y / .1;\n        L = l = max(length(u -= R * clamp(u * R, -i, i)), 1.);\n        \n        // 円形オブジェクトの描画\n        float newShape = circleSDF(u, vec2(0.5, 0.5), 0.3);\n        if (newShape < 0.0) {\n            col += vec3(0.5, 0.3, 0.2);\n        }\n\n        // 光の放射効果の追加\n        vec3 lightColor = vec3(0.4, 0.2, 0.2);\n        col += drawRadiantLight(u, vec2(0.5, 0.5), lightColor, 0.5, 0.3);\n    }\n\n    O = vec4(col + O.rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}