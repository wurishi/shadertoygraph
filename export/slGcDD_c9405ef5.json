{"ver":"0.1","info":{"id":"slGcDD","date":"1717603886","viewed":56,"name":"DNA spiral","username":"valena","description":"Here's a cute litle dna code. Just for fun","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["spiral","dna"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nmat2 rmatrix(float a)    //Rotation matrix;\n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat map(vec3 p)\n{\n    float t = 10000.0;\n    vec3 p1;\n    p.xz *= rmatrix(iTime);\n    \n    p1 = p;\n    \n    \n    \n    float sectorLen = 0.15;\n    float k = 3.0;\n    float ti = iTime;\n    \n    float sector = round(p1.y / sectorLen);\n    p1.xz *= rmatrix(sectorLen * sector * k);\n    p1.y -= sectorLen * sector;\n    vec2 d = abs(vec2(length(p1.xy), p1.z)) - vec2(0.01, 0.30);\n    float cilinder = min(max(d.x, d.y), 0.0) + length(max(d, vec2(0.0))) - 0.01;\n    \n    t = min(t, cilinder * 0.87);\n    \n    p1 = p;\n    p1.xz *= rmatrix(p.y * k);\n    p1.z = abs(p1.z);\n    p1.z -= 0.3;\n    \n    \n    float spiral = length(vec2(p1.x / 1.0, abs(p1.z * 3.0))) - 0.1;\n    t = min(t, spiral * 0.35);\n    \n    return t;\n}\n\n\nvec3 getSpiral(vec2 uv)\n{\n    //uv = floor(uv * 40.0) / 40.0;\n    uv *= rmatrix(-PI / 4.0);\n    \n    vec3 rayDir = (vec3(-1.0, 0.0, 0.0) + vec3(0.0, 0.0, 1.0) * uv.x + vec3(0.0, 1.0, 0.0) * uv.y);\n    vec3 col = vec3(0.0);\n    vec3 rayOrigin = vec3(1.5, 0.0, 0.0);\n    vec3 rp = rayOrigin;\n    float t = 0.0;\n    float d;\n    \n    for (t = 0.0; t <= 40.0; t += d)\n    {\n        rp = rayOrigin + rayDir * t;\n        d = map(rp) * 0.8;\n        if (d < 0.001)\n            break;\n    }\n    if (t < 40.0)\n    {\n        vec3 p = vec3(1.5, 0.0, 0.0) + rayDir * t;\n        vec2 e = vec2(0.001, 0.0);\n        float m = map(p);\n        vec3 norm = normalize(vec3(m - map(p + e.xyy), m - map(p + e.yxy), m - map(p + e.yyx)));\n        vec3 light = normalize(vec3(1.0));\n        float l = 0.3 + max(0.0, dot(-light, norm)) * 0.7;\n        col = vec3(0.0, 0.8, 1.0) * l;\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.x * 2.0;\n    \n    vec3 col = getSpiral(uv);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}