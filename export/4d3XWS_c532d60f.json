{"ver":"0.1","info":{"id":"4d3XWS","date":"1461063227","viewed":456,"name":"Bacteria 0","username":"repsej42","description":"Draw with mouse to place bacteria.\n\nCTRL + mouse to delete.\n\nSimple rules for bacteria growth.\n\nChange the FACTOR and LIGHT_FACTOR to change behaviour :)\n\nCode based on 'Game of Life' by sixstring982\nRandom functions from 'Noise Distributions' by hornet","likes":9,"published":1,"flags":48,"usePreview":0,"tags":["2d","automata","cellular","bacteria"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    fragColor = vec4( .8 );\n    if (texture(iChannel0, uv).g > 0.5) {\n        fragColor = vec4(0.0, 0.2, 0.1, 0.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define ON_COLOR vec4(0.0, 1.0, 0.0, 1.0)\n#define OFF_COLOR vec4(0.0, 0.0, 0.0, 1.0)\n\n\n#define CTRL ( texelFetch(iChannel1,ivec2(17,0),0).x  > 0.)\n\n#define keyToggle(ascii)  ( texelFetch(iChannel1,ivec2(ascii,2),0).x > 0.)\n#define keyClick(ascii)   ( texelFetch(iChannel1,ivec2(ascii,1),0).x > 0.)\n#define keyDown(ascii)    ( texelFetch(iChannel1,ivec2(ascii,0),0).x > 0.)\n\n\nconst float LIGHT_FACTOR = 0.16  ; // how much the changing light affects the growth\nconst float LIGHT_FREQ = 4.; \n\nconst float D_LOW  = 0.65; // Lower than this => death\nconst float D_HIGH = 1.17; // Higher than this => death\nconst float RANDOM_FACTOR = .2;\n\nconst float BRUSH_SIZE = 30.0; \n\n\n//note: uniformly distributed, normalized rand, [0;1[\nfloat nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nfloat rand( vec2 n )\n{\n//\tfloat t = fract( sin( iTime ) );\n    float t = 0.0;\n    float nrnd0 = nrand( n + t );\n\treturn nrnd0;\n    \n}\n\n\n\nbool isLive(in vec2 uv) {\n\n    //if (uv.y <= 0.01) return true;\n\n    if ( uv.x < 0. || uv.x > 1. || uv.y > 1. || uv.y < 0. ) return false;\n    \n    return texture(iChannel0, uv).g > 0.0;\n}\n\nfloat countNeighbors(in vec2 c, in int size) {\n    float nc = 0.;\n    vec2 n;\n    for (int x = -size; x <= size; x++) {\n        for (int y = -size; y <= size; y++) {\n            n.x = c.x + float(x);\n            n.y = c.y + float(y);\n            n /= iResolution.xy;\n\n            if (isLive(n)) nc++;\n        }\n    }\n    \n    return nc / float( (size*2+1)*(size*2+1) );\n}\n\n\nbool paused = false;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n\n    \n    if ( iMouse.x == 0.0 && iMouse.y == 0.0 && iTime < .1 ) {\n        fragColor = OFF_COLOR;\n        if ( length( fragCoord.xy - (iResolution.xy / 2.0) ) < iResolution.x/4. &&\n           rand(fragCoord.xy / iResolution.xy) < .5 ) fragColor = ON_COLOR;\n        return;            \n    }\n    \n    if (iMouse.z > 0.0 && length(iMouse.xy - fragCoord.xy) < BRUSH_SIZE) {\n        fragColor = ON_COLOR;\n\n        if (CTRL) fragColor = OFF_COLOR;\n\n        return;\n    }\n  \n    //if (keyDown(32)) paused = !paused;\n  \n    paused = keyToggle(32);\n  \n    if (paused) {\n        float nc = countNeighbors(fragCoord, 0);\n        fragColor = OFF_COLOR;\n        if (nc > .5)     fragColor = ON_COLOR;\n        return;\n    }\n  \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n\n    float nc = countNeighbors(fragCoord, 3);\n    \n    nc += (1.+sin(iTime*LIGHT_FREQ)) * LIGHT_FACTOR;\n    \n    nc += (rand(uv) - .5) * RANDOM_FACTOR;\n    \n\n\n    fragColor = OFF_COLOR;\n  \n    if ( nc >= D_LOW && nc <= D_HIGH ) \n    {\n\t    fragColor = ON_COLOR;\n        return;\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}