{"ver":"0.1","info":{"id":"DdtfDf","date":"1697720949","viewed":54,"name":"miter","username":"ahmadierfan","description":"miter","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","circle","distance","segment"],"hasliked":0,"parentid":"3tdSDj","parentname":"Segment - distance 2D"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Signed distance to a line segment. Tutorial on how to derive\n//\n// the formula and code: https://www.youtube.com/watch?v=PMltMdi1Wzg\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n\nfloat cross2d( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat msign( in float x ) { return (x>0.0)?1.0:-1.0; }\n\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n\n\tp.x = abs(p.x);\n    vec2 ca = vec2(max(0.0,p.x-((p.y<0.0)?r1:r2)), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    \n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    \n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n// trapezoid / capped cone\nfloat sdTrapezoid( in vec2 p, in vec2 a, in vec2 b, in float ra, float rb )\n{\n#if 0\n\n    float rba  = rb-ra;\n    float baba = dot(b-a,b-a);\n    float papa = dot(p-a,p-a);\n    float paba = dot(p-a,b-a)/baba;\n    float x = sqrt( papa - paba*paba*baba );\n    float cax = max(0.0,x-((paba<0.5)?ra:rb));\n    float cay = abs(paba-0.5)-0.5;\n    float k = rba*rba + baba;\n    float f = clamp( (rba*(x-ra)+paba*baba)/k, 0.0, 1.0 );\n    float cbx = x-ra - f*rba;\n    float cby = paba - f;\n    float s = (cbx < 0.0 && cay < 0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(cax*cax + cay*cay*baba,\n                       cbx*cbx + cby*cby*baba) );\n#else\n    vec2 dir = normalize(b-a);\n    mat2 rot = mat2(dir.y,dir.x,-dir.x,dir.y);\n    float h = length(b-a)/2.0;\n    p = rot * p;\n    p -= vec2(0.0,h-0.3);\n    return sdTrapezoid(p, ra, rb, h);\n#endif\n}\n\n// Erfan's Code:\n// Form miter with two halfspace\nfloat miterSDF(vec2 p)\n{\n    float thickness = 0.3f;\n    float radius = thickness;\n\n    float alpha = -3.14159 * 0.0;\n    float theta = 3.14159 * abs(cos(iTime*0.2));\n    vec2 n0 = vec2(cos(theta), sin(theta));\n\tvec2 n1 = vec2(cos(alpha), sin(alpha));\n\t\n    float cosAngleBetweenNormal = dot(n0, n1);\n    // All we need to precompute on vertex shader now is just \n    // 1. intersectionDirection \n    // 2. one of the angle values below (others can be derived)\n    float cosHalfAngleBetweenNormal = sqrt((1.0+cosAngleBetweenNormal)/2.0);\n    float sinHalfAngleBetweenNormal = sqrt((1.0-cosAngleBetweenNormal)/2.0);\n    vec2 intersectionDirection = normalize(n0+n1);\n    \n    float vLen = 1.0 / cosHalfAngleBetweenNormal;\n    vec2 v = intersectionDirection * vLen;\n\n    // cutoff\n    const float miterLimit = 3.5;\n    float longBase = sinHalfAngleBetweenNormal;\n    float shortBase = max((vLen - miterLimit)*cosHalfAngleBetweenNormal/sinHalfAngleBetweenNormal, 0.0);\n    \n    // height of the trapezoid / triangle\n    float hLen = min(miterLimit, vLen);\n\n#if 0\n    return sdTrapezoid(p,\n        intersectionDirection * cosHalfAngleBetweenNormal * thickness,\n        intersectionDirection * hLen * thickness,\n        longBase * thickness,\n        shortBase * thickness);\n#else\n    return sdTrapezoid(p,\n        -intersectionDirection * thickness,\n        intersectionDirection * hLen * thickness,\n        sinHalfAngleBetweenNormal * ((1.0+vLen) / (vLen-cosHalfAngleBetweenNormal)) * thickness,\n        shortBase * thickness);\n#endif\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    p *= 1.4;\n    m *= 1.4;\n    \n    float d = miterSDF(p);\n    \n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-3.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(120.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n    if( iMouse.z>0.001 )\n    {\n        d = miterSDF(m);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}