{"ver":"0.1","info":{"id":"WlScDw","date":"1594469778","viewed":115,"name":"Spinning Triangles","username":"julianlumia","description":"Trying to wrap my head around looping shader motion graphics stuff..","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["mograph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// OG code adapted from: day 104 by Jeyko\n// https://www.shadertoy.com/view/WdlcDX\n\n#define T(uv) texture(iChannel0,uv)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy);\n\n    \n    float f = length(uv  - .5);\n    fragColor.x = T(uv + f*0.01).x;\n    fragColor.y = T(uv -f*0.01).y;\n    fragColor.z = T(uv-f*0.01).z;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// OG code adapted from: day 104 by Jeyko\n// https://www.shadertoy.com/view/WdlcDX\n\n#define pi acos(-1.)\n#define tau (2.*pi)\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n\n#define timeStep (4./30.)\n#define motionBlurSteps 50\n\n\nfloat bayer8(ivec2 uv)\n{   \n    uv %= 8;\nreturn texelFetch(iChannel1,uv,0).r;\n}\n\nfloat smease(float p, float g) {\n    float s = p;\n    for(float i = 0.; i < g; i++){\n    \ts = smoothstep(0.,1.,s);\n    }\n    return s;\n}\n\nfloat ease(float p, float g) {\n    if(p < 0.){\n        return 0.;\n    } else if(p > 1.){\n    return 1.;\n    } else {\n        if (p < 0.5) \n            return 0.5 * pow(2.*p, g);\n        else\n            return 1. - 0.5 * pow(2.*(1. - p), g);\n    }\n}\n\nfloat sdEquilateralTriangle(  vec2 p, float s )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - s;\n    p.y = p.y + s/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    float d = -length(p)*sign(p.y);\n    \n    d = abs(d) - 0.0025;\n    return d;\n}\nconst float speed = 2.;\nfloat[] scenes = float[2](1.*speed,1.*speed); \n\n\nvec3 get( vec2 uv, float t  )\n{\n    uv *= 2.;\n    float col = 0.;\n    float d = 10e6;\n    float d2;\n    t = mod(t, scenes[0]);\n\n    if(t < scenes[0]){\n        float lsp = 2.;\n        float env = ease(t/scenes[0]*lsp,2.5);  \n        uv *= rot(env*pi*1./3.);\n        d = min(d,  sdEquilateralTriangle( uv*-1.,  0.5 ));\n        lsp = 1.;\n        env = ease(t/scenes[0]*lsp,5.);  \n        uv *= rot(env*pi*4./3.);\n        d2 = max(d2,  sdEquilateralTriangle( uv,  0.5 ));     \n    }\n    \n        if(t < scenes[1]){\n        float lsp = 2.;\n        float env = ease(t/scenes[0]*lsp,2.5);  \n        uv *= rot(env*pi*5./3.);\n        d = min(d,  sdEquilateralTriangle( uv*-1.,  0.5 ));\n        lsp = 1.;\n        env = ease(t/scenes[0]*lsp,5.);  \n        uv *= rot(env*pi*4./3.);\n        d2 = max(d2,  sdEquilateralTriangle( uv,  0.5 ));     \n    }\n    d = min(d,d2);\n    return vec3(-d);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;  \n    vec3 col = vec3(0);\n    \n    float edge = dFdx(uv.x)*5.;\n    \n    for (int i = 0; i < motionBlurSteps + min(iFrame,0); ++i) {\n        float subsample = bayer8(ivec2(fragCoord));\n        float time = iTime + ((float(i)+subsample)/float(motionBlurSteps)-.1) * timeStep;\n        col += smoothstep(-edge,edge,-get(uv,time));\n    }\n        col *= max((1. + 1.*cos(sin(0.25*tau*iTime/(scenes[0] + scenes[1] ))*tau+length(uv)*2.+vec3(4,2.5,1.5)))*.5, 0.);\n\n    \n    col/=float(motionBlurSteps);\n    \n    col *= 1. - pow(smoothstep(0.,1.,dot(uv,uv)*1.),.5);\n        \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}