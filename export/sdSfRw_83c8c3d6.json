{"ver":"0.1","info":{"id":"sdSfRw","date":"1645824895","viewed":285,"name":"correct interpolation of random2","username":"FabriceNeyret2","description":"in https://shadertoy.com/view/ss2BRh we just renormalized the Gaussian statistic (middle) when interpolating 2 stochastic distributions (naive way, left).   red < 0  green > 1.\nHere, we also restore the initial law, i.e. the Uniform histogram ( right ).","likes":13,"published":3,"flags":0,"usePreview":0,"tags":["random","interpolation","short","stochastic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// continuing https://shadertoy.com/view/ss2BRh\n// which just renormalize statistics when mixing stochastic fields ( textures, noises, etc )\n// Here we also restore the law distribution back, by recovering the histogram \n// ( just uniform here. For general case see https://hal.inria.fr/hal-01824773 )\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec3 R = iResolution;\n    float v,z = iMouse.z > 0. ? 1. : 3.,\n          t = mod(iTime,2.); t = min(t,2.-t);          // saw interpolant  \n    O = U.y > R.y/2. \n          ? texelFetch(iChannel0, ivec2(U/z)%256, 0 )  // top: white noise\n          : texelFetch(iChannel1, ivec2(U/z)%256, 0 ); // bottom: blue noise\n\n    if (    int(U)/2 == int(R)/6                       // red separators\n         || int(U)/2 == int(R)/3              \n         || int(U.y)/2 == int(R.y)/4 )\n      { O = vec4(1,0,0,1); return; }\n      \n    if ( U.x < R.x/3. )                       // --- left: naive interpolation\n        v =  mix( O.x , O.y, t);\n\n    else  if ( U.x < R.x*2./3. ){             // --- middle: interpolation with moments renormalization\n        O = (O-.5) / .289 ;                   // move to 0-mean, 1-variance\n        // go-to 1-variance is only required when mixing 2 different statistics\n        v = mix( O.x , O.y, t);\n        v /=  sqrt(2.*t*t-2.*t+1.);           // renormalize from variance =  (1-t)² + t²\n        v = .5 + .289 * v;                    // back to target (here, initial) statistics\n    }\n    else {                                    // right: restore the uniform distribution\n        v = mix( O.x , O.y, t);\n        float m = min(t,1.-t), T = 2.*t*(1.-t); // apply cumulative distrib as histogram\n        v = v < m ? v*v/T : v < 1.-m ? m*m/T + (v-m)/(1.-m) : 1. - (1.-v)*(1.-v)/T;\n    }\n    if ( iMouse.z > 0. ) v = clamp(v,0.,1.);\n    O = v < 0. ? vec4(1,0,0,0)                // red/green = under/over shoots\n      : v > 1. ? vec4(0,1,0,0)\n      :          vec4( pow(v, 1./2.2) );      // to sRGB\n}","name":"Image","description":"","type":"image"}]}