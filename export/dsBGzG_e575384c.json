{"ver":"0.1","info":{"id":"dsBGzG","date":"1692585515","viewed":23,"name":"Golden ratio sampling","username":"WhiteWalrus518","description":"Implementing something cool I saw on this website [https://blog.bruce-hill.com/6-useful-snippets], snippet number 2 btw\n\nSorry if your eyes hurt after that","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\nfloat ran (float s) {\n    return rand(vec2(s, 0.192836129));\n}\nvec3 genCol(int val){\n    vec2 r = vec2( 0.0,  2.0 / sqrt(3.0));\n    vec2 g = vec2(-1.0, -1.0 / sqrt(3.0));\n    vec2 b = vec2( 1.0, -1.0 / sqrt(3.0));\n    float theta = rand(vec2(val)) * 2.0 * 3.14159;\n    vec2 cis = 1.5 * vec2(cos(theta), sin(theta));\n    \n    \n    return vec3(ran(float(val) + 0.1), ran(float(val) + 0.2), ran(float(val) + 0.3));\n    // Comment out ^this^ line to make it somehow even worse\n    \n    return (0.8 + 0.4 * rand(vec2(val)))*normalize(vec3(length(r - cis), length(g - cis), length(b - cis)));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float phi = 1.61803;\n    float depth = iTime;\n    \n    int slot = 200;\n    if(uv.y > 0.5){\n        //top half\n        float dist = 10.0;\n        for(int i = 0; i < int(depth); i++){\n            if(abs(fract(float(i) * phi) - uv.x) < dist){\n                dist = abs(fract(float(i) * phi) - uv.x);\n                slot = i ;\n            }\n        }\n    }\n    else{\n        // bottom\n        slot = (int(floor(uv.x * depth)));\n    }\n    \n    vec3 col = genCol(slot);\n    \n    if(abs(0.5 - uv.y) < 0.01){\n        col = vec3(0., 0., 0.);\n    }\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}