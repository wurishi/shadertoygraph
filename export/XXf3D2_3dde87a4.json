{"ver":"0.1","info":{"id":"XXf3D2","date":"1707916811","viewed":43,"name":"aqdqsfw","username":"12446GD","description":"a","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["a"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int HitID = 0;\n\n\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdSphere(vec3 p, float r){\n    return length(p)-r ;\n}\n\nfloat sdPlane( vec3 p, vec3 n, float h )\n{\n  return dot(p,normalize(n)) + h;\n}\n\nfloat dst(vec3 p) {\n    float Plane = sdPlane(p, vec3(0.0, 1.0, 0.0), 1.0) ;\n    float Sphere = sdSphere(p, 1.0) ;\n    return min(Plane, Sphere) ;\n}\n\n\nvec3 Checkerboard(vec2 Pos){\n    vec2 s = sign(mod(Pos+1.0, 2.0)-1.0) ;\n        \n        if (s.x == s.y) {return vec3(1.0, 0.0, 0.0);}\n        else {return vec3(0.0, 0.0, 1.0);}\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n    float ratio = iResolution.x/iResolution.y ;\n    uv.x *= ratio ;\n    \n    \n    vec3 Sun = normalize(vec3(1.0, 5.0, -2.0))*10.0 ;\n    \n    \n    //Raymarch Collision\n    \n    vec3 o = vec3(0.0, 0, -3.0) ;\n    vec3 dir = normalize(vec3(uv, 1.0)) ;\n    float t = 0.0 ;\n    vec3 col = vec3(1.0, 1.0, 1.0) ;\n    float dist ;\n    for (int i=0; i<1000; i++) {\n        dist = dst(o+dir*t) ;\n        t += dist ;\n        if (dist < 0.01 || dist > 1000.0){break;}\n    }\n    \n    if (dist < 0.01) {\n    \n    if (1.-(o+dir*t).y > 1.99){\n    col = Checkerboard(o.xz+dir.xz*t) ;}\n    else {col = vec3(0.0, 1.0, 0.0);}\n    \n    col /= t/10. ;\n    \n    col = min(col, vec3(1.0)) ;\n    \n    //RayMarch Shadow\n    \n    vec3 n = normalize(o) ;\n    \n    vec3 o = o+dir*t ;\n    o += 0.01*n ;\n    vec3 dir = normalize(Sun-o) ;\n    float t = 0.0 ;\n    float dist ;\n    for (int i=0; i<100; i++) {\n        dist = min(dst(o+dir*t), length(Sun-o-dir*t)) ;\n        t += dist ;\n        if (dst(o+dir*t) < 0.0001){break;}\n    }\n    \n    if (length(Sun - o+dir*t) < 15.0){\n    col *= 0.2 ;\n    }  \n    \n    \n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}