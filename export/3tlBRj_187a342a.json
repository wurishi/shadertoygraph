{"ver":"0.1","info":{"id":"3tlBRj","date":"1597175271","viewed":82,"name":"Julia Set over Mandelbrot Set","username":"BlockMaster","description":"Just a visualization of Julia set using Mandelbrot set plane.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/// Visualization of Julia set using Mandelbrot set plane. (You can change its c value with the mouse.)\n/// The max zoom value (before it starts to look distorted) is about 93 500.\n\n//Gneral Variables\nint iterations = 50;\nvec2 center = vec2(0.);\n\n//Mandlebrot Set Propeerties\nfloat mandelbrotZoom = 0.5;\nfloat mandelbrotOpacity = 0.2;\nvec2 mandelbrotOffset = vec2(0.3, 0.);\n\n//Julia Set Properties\nfloat juliaZoom = 0.4;\nfloat juliaOpacity = 1.5;\n\n//Mandelbrot Set\nfloat mandelbrotSet(vec2 coordinates, int iterations)\n{\n    float value = 1.;\n    vec2 c = coordinates;\n    vec2 z = c;\t//do the first iteration (sqr(z) + c; z = 0 => z = c)\n    for (int i = 1; i < iterations; i ++)\n    {\n        if (pow(z.x, 2.) + pow(z.y, 2.) > 4.)\n        {\n            value = float(i) / float(iterations);\n            break;\n        }\n        \n        vec2 tempZ = z;\n        z = vec2(pow(tempZ.x, 2.) - pow(tempZ.y, 2.) + c.x,\t//next z's real component\n                 2. * tempZ.x * tempZ.y + c.y);\t\t\t\t//next z's complex component\n        \n    }\n    return value;\n}\n\n//Julia Set\nfloat juliaSet(vec2 coordinates, int iterations, vec2 cValue)\n{\n    float value = 1.;\n    vec2 c = cValue;\n    vec2 z = coordinates;\n    for (int i = 0; i < iterations; i ++)\n    {\n        if (pow(z.x, 2.) + pow(z.y, 2.) > 4.)\n        {\n            value = float(i) / float(iterations);\n            break;\n        }\n        \n        vec2 tempZ = z;\n        z = vec2(pow(tempZ.x, 2.) - pow(tempZ.y, 2.) + c.x,\t//next z's real component\n                 2. * tempZ.x * tempZ.y + c.y);\t\t\t\t//next z's complex component\n        \n    }\n    return value;\n}\n\n//HSV to RGB Converter (author: https://stackoverflow.com/users/111461/sam-hocevar)\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    //Remap the fragCoord\n    vec2 uv = fragCoord / iResolution.xy;\n    float aspectRatio = iResolution.y / iResolution.x;\n    uv.x /= aspectRatio;\n    \n    //Mandelbrot Zoom\n    /*mandelbrotZoom = pow(2., iTime) * 0.3;\t//linear zoom\n    iterations = 100 + int(mandelbrotZoom * 10.);*/\n    \n    //Set the c Value for Julia Set\n    vec2 mousePosition = vec2(iMouse) / iResolution.y;\n    vec2 cValue = (iMouse.z > 0.) ? center + (mousePosition - vec2(0.5 / aspectRatio, 0.5)) * (1. / mandelbrotZoom) - mandelbrotOffset\n       \t\t\t\t\t \t\t  : vec2(sin(iTime * 0.8), cos(iTime * 0.5 + 0.5) * 0.7);\n    \n    //Get the Pixel's Value\n    float value = juliaSet(center + (uv - vec2(0.5 / aspectRatio, 0.5)) * (1. / juliaZoom), iterations, cValue) * juliaOpacity;\n    value += mandelbrotSet(center + (uv - vec2(0.5 / aspectRatio, 0.5)) * (1. / mandelbrotZoom) - mandelbrotOffset, iterations) * mandelbrotOpacity;\n    \n    //Set the fragColor\n    //vec3 colour = mix(vec3(0.), vec3(1.), value);\n    vec3 colour = mix(hsv2rgb(vec3(0., 0., 0.)), hsv2rgb(vec3(1., 0.5, 1.)), value);\n    fragColor = vec4(colour, 1.);\n}","name":"Image","description":"","type":"image"}]}