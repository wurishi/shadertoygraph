{"ver":"0.1","info":{"id":"WsXcWs","date":"1585807550","viewed":89,"name":"mandelbrot with fractional power","username":"sniffle","description":"another mandelbrot shader","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","madelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float zoom = 0.1;\nvec2 center = vec2(-0.58, 0.5);\nfloat PI = 3.14159265359;\nint max_i = 200;\nfloat POWER = 2.0;\n\nvec2 toPolar(vec2 c)\n{\n    float r = length(c);\n    float arg = 0.0;\n\n    arg = atan(c.y/c.x);\n    return vec2(r, arg);\n}\nvec2 toCartesian(vec2 pol)\n{\n    vec2 c;\n    c.x = pol.x*cos(pol.y);\n    c.y = pol.x*sin(pol.y);\n    return c;\n}\n\nint iterate(vec2 c)\n{\n    vec2 pol;\n    vec2 c_temp = c;\n    for(int i = 0; i < max_i; i++)\n    {\n        if(length(c_temp) > 2.0)\n            return i;\n        pol = toPolar(c_temp);\n        pol.x = pow(pol.x, POWER);\n        pol.y *= POWER;\n        c_temp = toCartesian(pol);\n        c_temp += c;\n    }\n    return max_i;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    POWER = 10.0*iTime/iResolution.x + 1.96;\n   // center = iMouse.xy/iResolution.xy - 0.5;\n    // Normalized pixel coordinates (from 0 to 1);\n    vec2 worldCoord = zoom*(fragCoord-0.5*iResolution.xy)/iResolution.y + center;\n    \n    float col = 1.0 - float(iterate(worldCoord))/float(max_i);\n\n    // Output to screen\n    fragColor = vec4(col,col,col,1.0);\n}","name":"Image","description":"","type":"image"}]}