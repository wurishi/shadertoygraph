{"ver":"0.1","info":{"id":"XfjGRG","date":"1704356112","viewed":41,"name":"Dynamic Circles","username":"kingz","description":"Bunch of circles moving around in front of a nice background.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["color","circle","dynamic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MOVE_SPEED 0.75\n#define COLOR 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4))\n#define MAX_X 1.8\n#define MIN_X -1.8\n#define MAX_Y 1.0\n#define MIN_Y -1.0\n#define MAX_I 25.0\n\nfloat circle(float r,float blur,vec2 p, vec2 uv) {       \n       return smoothstep(r,r-blur,length(uv-p));\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n   \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // Normalize pixel coordinates\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // Set background color\n    vec3 col = vec3(vec2(COLOR-0.2),1.0)*0.5;\n    \n    for(float i = 0.0; i < MAX_I; i++) {\n        \n        // Make the circle move\n        float x = map(cos(i*20.0+iTime*MOVE_SPEED),0.0,1.0,MIN_X,MAX_X);\n        float y = map(fract(sin(iTime*MOVE_SPEED+i)+iTime/10.0),0.0,1.0,MIN_Y-0.5,MAX_Y+0.5);\n        \n        // Make the circle continuously grow and shrink\n        float r = map(abs(sin(iTime+i)),0.0,1.0,0.01,0.3);\n    \n        // Make the circle and its color\n        float c = circle(r,0.1,vec2(x,y),uv);\n        vec3 c_col = vec3(vec2(COLOR),0.8);\n        \n        // Add it\n        col = mix(col, c_col, c); \n    }\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}