{"ver":"0.1","info":{"id":"tld3zf","date":"1577238200","viewed":73,"name":"rayMarchinConvTest","username":"migizo","description":"test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox( vec3 p, vec3 b )\n{\n  p = mod(p, 8.0f) - 4.0f;\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  p = mod(p, 8.0f) - 4.0f;\n  return length(p)-s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy * 2.0f - iResolution.xy) / max(iResolution.x, iResolution.y);\n    vec3 col = vec3(0.71f, 0.9f, 0.92f);\n    \n    float time = iTime * 0.5;\n    \n    float camNum = 3.0f;\n    int currentCamMotionID = int(floor(mod(time, camNum)));\n    float currentCamMotion = smoothstep(0.8, 1.0, mod(time, 1.0f));\n    \n    vec3 cam1 = vec3(cos(time) * 6.0f, 5, sin(time) * 6.0f);\n    vec3 cam2 = vec3(cos(time) * 6.0f, 0, sin(time) * 6.0f + 15.0f);\n    vec3 cam3 = vec3(cos(time) * 5.0f, 0, sin(time) * 5.0f);\n    vec3 camera_pos;\n    if (currentCamMotionID == 0) {\n        camera_pos = mix(cam1, cam2, pow(currentCamMotion, 0.5f));\n    }\n    if (currentCamMotionID == 1) {\n        camera_pos = mix(cam2, cam3, pow(currentCamMotion, 0.5f));\n    }\n    if (currentCamMotionID == 2) {\n        camera_pos = mix(cam3, cam1, pow(currentCamMotion, 0.5f));\n    }\n    \n    vec3 camera_up = vec3(0, 1, 0);\n    vec3 camera_dir = normalize(vec3(0) - camera_pos);\n    vec3 camera_right = normalize(cross(camera_up, camera_dir));\n    \n    vec3 ray_pos = camera_pos;\n    vec3 ray_dir = normalize(camera_dir + uv.x * camera_right + uv.y * camera_up);\n    \n    vec3 boxT_pos = vec3(0, 1, 0);\n    vec3 boxT_size = vec3(1.1, 0.1, 0.1);\n    \n    vec3 boxL_pos = vec3(-1, 0, 0);\n    vec3 boxL_size = vec3(0.1, 1, 0.1);\n    \n    vec3 boxR_pos = vec3(1, 0, 0);\n    vec3 boxR_size = vec3(0.1, 1, 0.1);\n    \n    vec3 boxC_pos = vec3(0, -0.45, 0);\n    vec3 boxC_size = vec3(0.1, 0.55, 0.1);\n    \n    vec3 box_color = vec3(0.25f, 0.22f, 0.36);\n    \n    vec3 sphereL_pos = vec3(-0.5, 0.1, 0);    \n    vec3 sphereR_pos = vec3(0.5, 0.1, 0);\n    float sphere_size = 0.1;\n    vec3 sphere_color = vec3(0.25f, 0.22f, 0.36);\n\n    const int countMax = 30;\n\tconst float EPS = 0.01f;\n    for (int i = 0; i < countMax; i++) {\n    \tfloat boxT_dist = sdBox(ray_pos - boxT_pos, boxT_size);\n        float boxL_dist = sdBox(ray_pos - boxL_pos, boxL_size);\n        float boxR_dist = sdBox(ray_pos - boxR_pos, boxR_size);\n        float boxC_dist = sdBox(ray_pos - boxC_pos, boxC_size);\n        float sphereL_dist = sdSphere(ray_pos - sphereL_pos, sphere_size);\n        float sphereR_dist = sdSphere(ray_pos - sphereR_pos, sphere_size);\n\n        if (boxT_dist < EPS) {\n      \t\tcol = box_color;\n            // vec3 normal;\n            // normal.x = sdBox(ray_pos + vec3(0.1, 0, 0) - box_dist, box_size);\n            // normal.y = sdBox(ray_pos + vec3(0, 0.1, 0) - box_dist, box_size);\n            // normal.x = sdBox(ray_pos + vec3(0, 0, 0.1) - box_dist, box_size);\n\t\t\t// col = vec3(normalize(normal));\n            break;\n        }\n        \n         if (boxL_dist < EPS) {\n      \t\tcol = box_color;\n            break;\n        }\n        \n        if (boxR_dist < EPS) {\n      \t\tcol = box_color;\n            break;\n        }\n        if (boxC_dist < EPS) {\n      \t\tcol = box_color;\n            break;\n        }\n        \n        if (sphereL_dist < EPS) {\n      \t\tcol = sphere_color;\n            break;\n        }\n        if (sphereR_dist < EPS) {\n      \t\tcol = sphere_color;\n            break;\n        }\n        float _dist = min(boxT_dist, min(boxC_dist, min(boxL_dist, boxR_dist)));\n        _dist = min(_dist, min(sphereL_dist, sphereR_dist));\n        ray_pos += _dist * ray_dir;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}