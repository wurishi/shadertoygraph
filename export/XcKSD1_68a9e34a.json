{"ver":"0.1","info":{"id":"XcKSD1","date":"1715120750","viewed":54,"name":"Eyespace","username":"joj","description":"Random and math functions.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","eyes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\nvec2 rotate(vec2 uv, float a)\n{\n    mat2 R = mat2(cos(a), -sin(a),\n                  sin(a), cos(a));\n    return uv * R;\n}\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat fbm (in vec2 st, in float scale, in int octaves, in float roughness, in float lacunarity) {\n    float amplitude = .5;\n    float frequency = 0.;\n    float value = 0.;\n    st *= scale;\n    \n    // Loop of octaves\n    for (int i = 1; i < octaves; i++) {\n        value += amplitude * noise(st);\n        st *= lacunarity;\n        amplitude *= roughness;\n    }\n    return value;\n}\n\nfloat random (vec2 uv) {\n    return fract(sin(dot(uv.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nvec2 pixelate(vec2 uv, float pixelsize)\n{\n    return floor(uv * pixelsize) / pixelsize;\n}\n\nfloat map( float value, float fromMin, float fromMax, float toMin, float toMax ) \n{\n    return toMin + (toMax - toMin) * (value - fromMin) / (fromMax - fromMin);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    float gradNoise = fbm(uv + iTime * .1, 5., 4, 0.5, 2.) + .5;\n    uv *= 2.;\n    uv.x += iTime;\n    uv.y -= iTime / 2.;\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n    //f = pixelate(f, 50.);\n    f -= .5;\n    float stretchX = random(i + vec2(56., 11.)) * 3.5 + 0.5; // the more the squishier\n    float stretchY = random(i + vec2(123., 33.)) * .14 + .05; // the less the squishier\n    float blinkingSpeed = random(i) * 2.123 + 1.3;\n    f = rotate(f, random(i) * 90. - 45.);\n    \n    float eyeChance = step(.7, random(i));\n    float upperEye = eyeChance * step(f.y - stretchY + max(sin(iTime * blinkingSpeed + random(i)), .0) * stretchY * 2., - f.x * f.x * (stretchX - max(sin(iTime * blinkingSpeed + random(i)), .0) * stretchX * 2.));\n    float lowerEye = eyeChance * step(f.x * f.x * stretchX, f.y + stretchY);\n    float eye = upperEye * lowerEye;\n    \n    float pupil = 1. - step(.07 * random(i) + .02, length(f)) + step(.10 * random(i) + .02, length(f));\n    \n    // Output to screen\n    fragColor = vec4(mix(vec3(1., 1., .08), vec3(.62, .14, .04), gradNoise) * pupil * eye, 1.);\n}","name":"Image","description":"","type":"image"}]}