{"ver":"0.1","info":{"id":"dscSzM","date":"1679587327","viewed":32,"name":"Ray Marching Alg","username":"WalterCubix","description":"Mi primer shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_PASOS 100\n#define MAX_DIST 100.\n#define MIN_DIST .01\n\nfloat sdEsfera(vec3 c, float r, vec3 p){\n   return distance(c,p)-r;\n}\n\n\nfloat getDist(vec3 p){\n   \n    //configuramos la distancia\n    float d = sdEsfera(vec3(0.,0.,0.), .6 , p);\n    \n    \n    return d;\n}\n\n\nfloat rayMarch(vec3 ro, vec3 rd){\n\n    float dist = 0.;\n    \n    for(int i = 0; i < MAX_PASOS; i++){\n        vec3 p = ro + rd * dist;\n        float distP = getDist(p);\n        dist += distP;\n        \n        \n        if(dist > MAX_DIST || dist < MIN_DIST) \n            break;\n        \n    }      \n    return dist;\n}\n\n\nvec3 getNormal(vec3 p){\n    vec2 e = vec2(0.01, 0.0);\n    return normalize(vec3(getDist(p + e.xyy), getDist(p + e.yxy), getDist(p + e.yyx)));\n}\n\n\nfloat PointLight(vec3 p){\n\n    vec3 lightPos = vec3(10.,3.,-5.);\n    vec3 lightDir = normalize(p-lightPos);\n    return -dot(getNormal(p),lightDir);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //Position of \"camera\"\n    float fov = 1.;\n    vec3 ro = vec3(0.,0.,-2.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, fov ));\n    vec3 col = vec3(0.);\n    \n    //RayCasting using RayMarching Alg\n    float dist = rayMarch(ro, rd);\n    \n    //testing if the ray hit something or not\n    if(dist < MAX_DIST)\n    {\n        vec3 pHit = ro + rd * dist;\n        col = vec3(0.8, 0.6, 0.6);\n        col *= vec3(PointLight(pHit)) + vec3(.2);\n    }\n   \n   \n   \n   \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}