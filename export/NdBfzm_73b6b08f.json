{"ver":"0.1","info":{"id":"NdBfzm","date":"1700596261","viewed":56,"name":"Driver Passenger","username":"Firepal","description":"Crude recreation of the animation I made for the song \"Driver Passenger\" by Zoot Woman.\nSound shader includes a loop of the last part of the song.","likes":1,"published":1,"flags":8,"usePreview":0,"tags":["raymarching","sound","music","flanger"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_MARCH_STEPS 256\n#define MAX_MARCH_DIST 10.0\n\n\nfloat cySDF(vec3 ray) {\n    float cyl = abs(length(ray.xy) - 1.0) - 0.03;\n    cyl = max(cyl, -sdBox(ray+vec3(1.0,1.0,0.0),vec3(1.0)));\n    float bound = sdBox(ray,vec3(1.0,1.0,0.02)*1.1);\n    return max(cyl,bound);\n}\n\nfloat map(vec3 ray) {\n    float res = 1e20;\n    \n    float ang = round(ray.z)*iTime*0.1;\n    mat3 r = rotationZ(-ang-1.57);\n    \n    \n    ray *= r;\n    \n    //ray = max(ray,vec3(-1e20,-1e20,0.0));\n    \n    ray = opRepLim(ray,1.0,vec3(0.0,0.0,1e20));\n    \n    res = min(res, cySDF(ray));\n    \n    \n    return res;\n}\n\n\nfloat raymarch(in vec3 ro, in vec3 rd) {\n    float total_dist = 0.0;\n    \n    for (int i = 0; i < MAX_MARCH_STEPS; i++) {\n        vec3 ray = ro + rd * total_dist;\n        float march = map(ray);\n        \n        if (total_dist > MAX_MARCH_DIST) {\n            return -1.0;\n        }\n        \n        if (march < 0.0001) {\n            //return float(i) / float(MAX_MARCH_STEPS);\n            return total_dist;\n        }\n    \n        total_dist += march;\n    }\n    \n    \n    return -1.0;\n}\n\nvec3 calcNormal( in vec3 p ) // for function f(p)\n{\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float f = max(iResolution.x,iResolution.y);\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 ro = vec3(0.0,0.0,-4.0+iTime);\n    vec3 rd = normalize(vec3(uv,0.75));\n\n    float marched = raymarch(ro,rd);\n    \n    vec3 col = vec3(marched);\n    if (marched > 0.0) {\n        vec3 normal = calcNormal(ro + rd * marched);\n        col = vec3(1.,0.,1.);\n        col *= 1.0-pow(dot(rd,-normal),20.0);\n        col *= 1.0/marched;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"mat3 rotationX(float angle) {\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\n\treturn mat3(\n\t\t1.0, 0.0, 0.0,\n\t\t0.0, c, s,\n\t\t0.0, -s, c\n\t);\n}\n\nmat3 rotationZ(float angle) {\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\n\treturn mat3(\n\t\tc, s, 0.0,\n\t\t-s, c, 0.0,\n\t\t0.0, 0.0, 1.0\n\t);\n}\n\n\n\nvec3 opRepLim( in vec3 p, in float c, in vec3 l )\n{\n    return p-c*clamp(round(p/c),vec3(0.0),l);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\nfloat smax( float a, float b, float k )\n{\n    return -smin(-a,-b,k);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define BPM 110.0\nconst float BPS = BPM/60.0;\n\n#define N_DS4 311.13\n#define N_F4 349.23\n#define N_G4 392.0\n#define N_GS4 415.3\n#define N_AS4 466.16\n#define N_C5 523.25\n\n\n\n\n\nfloat getNote(float t, out float att) {\n    float ot = t;\n    t = mod(ot,16.0);\n    float n = 523.25;\n    \n    att = t;\n    \n    if ( t > 3.6666 )  { n = N_G4; att -= 3.6666; }\n    if ( t > 4.0 )     { n = N_DS4; att -= 0.3333; }\n    if ( t > 7.6666 )  { n = N_G4; att -= 3.6666; }\n    if ( t > 8.0 )     { n = N_F4; att -= 0.3333; }\n    if ( t > 11.6666 ) { n = N_G4; att -= 3.6666; }\n    if ( t > 12.0 )    { n = N_GS4; att -= 0.3333; }\n    if ( t > 13.6666 ) { n = N_AS4; att -= 1.6666; }\n    if ( t > 14.0 )    { n = N_F4; att -= 0.3333; }\n    if ( t > 15.6666 ) { n = N_G4; att -= 1.6666; }\n    \n    return n;\n}\n\nfloat kick(float t, float period) {\n    float beattime = fract(t*period)/period;\n    float freq = 440.0*6.281;\n    freq *= beattime;\n    freq *= exp(-50.*beattime);\n    return sin(freq)*exp(-20.*beattime);\n}\n\nfloat snare(float t, float period) {\n    float noise = texture(iChannel0,vec2(t*50.0,t*63.0)).g;\n    return pow(fract(-t*period),15.0) * noise;\n}\n\nfloat lead(float t, float n) {\n    return fract(t*n*0.5);\n}\n\nfloat bass(float t, float n) {\n    return abs(fract(t*n*0.5)*2.0-1.0);\n}\n\nfloat limiter(float s) {\n    return smin(s,1.0,0.2);\n}\n\nvec2 limiter(vec2 st) {\n    st *= 0.99;\n    st.x = limiter(st.x);\n    st.y = limiter(st.y);\n    return st;\n}\n\nvec2 mainSound( int samp, float time )\n{\n    float atten = 0.0;\n    float note = getNote(time*BPS,atten);\n    \n    float fl = sin(time)*0.005;\n    float fr = cos(time)*0.005;\n    \n    float sy = lead(time,note);\n    float syr = lead(time-fl,note);\n    float syl = lead(time-fr,note);\n    \n    vec2 s = vec2( sy + syl, sy + syr )*0.1*exp(-1.0*atten);\n    s += vec2( bass(time,note*0.25) * 0.5 );\n    s += vec2( snare(time+0.55,BPS*0.5) *0.5 );\n    s += vec2( kick(time,BPS) *0.3 );\n    \n    return s;\n}","name":"Sound","description":"","type":"sound"}]}