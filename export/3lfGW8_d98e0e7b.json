{"ver":"0.1","info":{"id":"3lfGW8","date":"1556127385","viewed":228,"name":"Raytraced kaleidoscope","username":"stduhpf","description":"Just as the title says","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["reflections","raytracingh"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define cam_rotation\n\nfloat intersect(vec3 ro, vec3 rd, vec3 po, vec3 pn){\n    if(dot(rd,pn)<1e-4)\n        return -1.;\n  \treturn dot(po-ro,pn)/(dot(rd,pn));\n}\n\n#define FACES 3\nconst float angle = 6.28318530718/float(FACES);\nconst mat3 rot = mat3( cos(angle),sin(angle),0,\n                      -sin(angle),cos(angle),0,\n                       0,\t\t  0,\t\t 1);\n#define _ 15.  //half length of the kaleidoscope\n#define __ .6+.5*sin(iTime)  //radius (inverse effect of _)\nvoid raytrace(inout vec3 ro, inout vec3 rd,out bool stop){\n    stop=false;\n    vec3 n;\n    vec3 po = vec3(0,__,0),pn = vec3(0,1,0);\n    float d1 = 1e6;\n    for(int i=0;i<FACES;i++){\n    \tfloat d =intersect(ro,rd,po,pn);\n        if(d<d1&&d>0.){\n            d1=d;\n            n=pn;\n        }\n\n        po=po*rot;\n        pn=pn*rot;\n    }\n    ro =ro+rd*d1;\n    if(abs(ro.z)<_)\n    {\n    \trd =reflect(rd,n);\n    \tro+=rd*.00001; /// to fix nans\n    }\n    if(abs(ro.z)>_|| d1>1000.)\n        stop=true;\n}\n\n#define bounces 500\n\nvec3 render(vec3 rd){\n    vec3 ro =vec3(0,0,14.); //you can play with that if you want\n    for(int i =0;i++<bounces;){\n        bool stop;\n    \traytrace(ro,rd,stop);\n        if(stop || i==bounces){\n            rd = rd*mat3(cos(iTime),sin(iTime),0,-sin(iTime),cos(iTime),0,0,0,1);\n            float t = iTime*.1513;\n            rd*=mat3(cos(t),0,sin(t),0,1,0,-sin(t),0,cos(t));\n            return mix(texture(iChannel0,rd).rgb,vec3(.5,.6,.7),float(i-1)/float(bounces));\n        }\n    }\n    return ro;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy);\n\t\n    vec3 rd = normalize(vec3(uv,-iResolution.y*.8));\n    \n    #ifdef cam_rotation\n    vec2 mse=3.14*(2.*iMouse.xy-iResolution.xy)/iResolution.x;\n    if(iMouse.xy==vec2(0))\n        mse=vec2(-2.3,-.7);\n\tmat3 r = mat3(1,0,0,0,cos(mse.y),sin(mse.y),0,-sin(mse.y),cos(mse.y));\n\tr*= mat3(cos(mse.x),0,sin(mse.x),0,1,0,-sin(mse.x),0,cos(mse.x));\n    rd*=r;\n    #endif\n    vec3 col = render(rd);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}