{"ver":"0.1","info":{"id":"XttXzr","date":"1478067470","viewed":234,"name":"Rainbow Heart","username":"sparrow","description":"This is the cellular automaton 'Larger than life' rule {20.0, 270.0, 368.0, 452.0, 1021.0}\n\nThe shader B draws a circle in the center as the initial configuration. The starting radius is determined by mouse position, try clicking in different places.","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Draws the final image.\n * \n */\n\n\nvec3 hsv2rgb(vec3 c)\n{\n    const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    // cs is vec2( state, weighted sum )\n    vec2 cs = texture(iChannel0, uv).rg;\n    float hue = cs.y;\n    const float saturation = 1.0;\n    float value = 1.0;\n    if (cs.y == 0.0) {\n        value = 0.2;\n    }\n    if (cs.x == 0.0) {\n        value = value * 0.75;\n    }\n    vec3 color = hsv2rgb(vec3(hue, saturation, value));\n  \tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/**\n * Cellular Automaton.\n * For each pixel,\n *   r: cell state (1.0 or 0.0)\n *   g: weighted moving sum of cell state\n *   b: unused\n *   a: unused\n*/\nstruct LTLRule {\n    float r;\n    float b1;\n    float b2;\n    float d1;\n    float d2;\n};\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const LTLRule rule = LTLRule(20.0, 270.0, 368.0, 452.0, 1021.0);\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float total = 0.0;\n    for (float dx = -rule.r; dx <= rule.r; dx++) {\n      for (float dy = -rule.r; dy <= rule.r; dy++) {\n        vec2 txy = mod((fragCoord.xy + vec2(dx,dy)) / iResolution.xy, 1.0);\n        float val = texture(iChannel0, txy).x; \n        total += val;\n      }\n    }\n\n   vec2 stateAndAvg = texture(iChannel0, uv).xy;\n   float s = stateAndAvg.x;\n   float c = s;\n   if (s == 0.0) {\n       if (total > rule.b1 && total < rule.b2) {\n           c = 1.0;\n       }\n   } else {\n       if (total < rule.d1 || total > rule.d2) {\n           c = 0.0;\n       }\n   }\n\n   if (iFrame < 10 || iMouse.z > 0.) {\n       c = texture(iChannel1, uv).x;\n       fragColor = vec4(c, 0.0, 0.0, 1.0);\n   } else {\n      fragColor = vec4(c, mod(stateAndAvg.y + (c / 128.0), 1.0), 0.0, 1.0);\n   }\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/**\n * Renders initial state on startup or mouse click.\n *\n * Draw a circle at vec2 `pos` with radius `rad` and\n * color `color`.\n */\nvec4 circle(vec2 uv, vec2 pos, float rad, vec3 color) {\n\tfloat d = length(pos - uv) - rad;\n\tfloat t = clamp(d, 0.0, 1.0);\n\treturn vec4(color, 1.0 - t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n    vec2 mouse = iMouse.xy;\n    float radius = max(distance(mouse, center), 12.0);\n    if (iMouse.z < 1.0) {\n        radius = 13.0;\n    }\n\n    // Background layer\n\tvec4 layer1 = vec4(0.0, 0.0, 0.0, 1.0);\n\t// Circle\n\tvec4 layer2 = circle(uv, center, radius, vec3(1.0, 1.0, 1.0));\n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n}","name":"Buf B","description":"","type":"buffer"}]}