{"ver":"0.1","info":{"id":"X32yzm","date":"1727104561","viewed":12,"name":"originista","username":"RichSaCa","description":"Al principio\ncuando nada existía, \nno eras ni polvo estelar \nni tampoco eras ideas\ntu estado era potencial \n\n¿Qué serás?\n\nCon vestidos de luz de galaxias \ncreaste signos de tiempo en tu danza \nhechos piel en capas de historias.  \n\nTu verdad\n es el origen","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["origin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shader adaptado para Shadertoy.com\n// Representación visual de los conceptos del poema\n\n// Función de ruido simplificada\nfloat noise(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\n// Función para crear formas fractales\nfloat fractal(vec2 st) {\n    float value = 0.0;\n    float amplitude = 0.7;\n    float frequency = 1.0;\n    for (int i = 0; i < 5; i++) {\n        value += amplitude * noise(st * frequency);\n        frequency *= 2.0;\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 st = uv * 2.0 - 1.0;\n    st.x *= iResolution.x / iResolution.y;\n    \n    vec3 color = vec3(0.0);\n\n    // El vacío inicial y la potencialidad\n    float darkness = noise(st * 10.0 + iTime * 0.1);\n    color = vec3(darkness * 0.3);\n\n    // La formación de la existencia\n    float existence = fractal(st + iTime * 5.05);\n    color += vec3(0.2, 0.4, 0.6) * existence;\n\n    // La danza cósmica\n    float angle = atan(st.y, st.x);\n    float radius = length(st);\n    float spiral = sin(angle * 6.0 + iTime + radius * 7.0);\n    color += vec3(0.6, 0.3, 0.7) * spiral * 0.5;\n\n    // Capas de historias\n    float layers = fractal(st * 2.0 - iTime * 0.1) * fractal(st * 3.0 + iTime * 0.15);\n    color += vec3(0.8, 0.7, 0.3) * layers * 0.6;\n\n    // La verdad en el origen\n    float distance = length(st);\n    float origin = 1.0 - smoothstep(0.0, 1.7, distance);\n    color += vec3(1.0) * origin * (0.5 + 0.5 * sin(iTime * 2.0));\n\n    // Viñeta para enfatizar el centro\n    color *= 1.0 - distance * 0.5;\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}