{"ver":"0.1","info":{"id":"tdKBDz","date":"1606946636","viewed":732,"name":"Rust Shader Compiled To GLSL!","username":"Boscop","description":"Explanation:\nThis was the original shader: https://www.shadertoy.com/view/XlSGzz\nThis is the Rust port: https://github.com/msiglreith/grr-gpu\nThis is an adaptation of that Rust shader so that it compiles to GLSL which adheres to the Shadertoy format.\n","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["torus","glow","rust","rustgpu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nExplanation:\nThis was the original shader: https://www.shadertoy.com/view/XlSGzz\nThis is the Rust port of that shader: https://github.com/msiglreith/grr-gpu\nYes, you can write shaders in Rust now: https://shader.rs\n\nWhat you see here is the GLSL that resulted from compiling a modified version of that Rust shader.\nIt was modified in order to generate GLSL code which adheres to the Shadertoy format (uniforms and mainImage signature),\nso that the compiled GLSL could be copy-pasted verbatim into Shadertoy and it just works.\n\nNote: You can find the Rust code below the GLSL code\n*/\n\nvec2 _61;\nvec4 _62;\n\nfloat shader_sdf_torus(vec2 _63)\n{\n    return 1.0 / (8.0 * abs((2.0 * sqrt((_63.x * _63.x) + (_63.y * _63.y))) - 1.0));\n}\n\nvoid shader_mainImage(out vec4 _79, vec2 _80, vec3 _81, float _82, vec4 _83, vec4 _84, float _85, int _86, float _87, float _88, float _89[4], vec3 _90[4])\n{\n    vec2 _97 = _61;\n    _97.x = _81.x;\n    vec2 _98 = _97;\n    _98.y = _81.y;\n    vec2 _104 = _61;\n    _104.x = 2.0 * _80.x;\n    vec2 _105 = _104;\n    _105.y = 2.0 * _80.y;\n    vec2 _112 = _61;\n    _112.x = _105.x - _98.x;\n    vec2 _113 = _112;\n    _113.y = _105.y - _98.y;\n    vec2 _119 = _61;\n    _119.x = _113.x / _98.y;\n    vec2 _120 = _119;\n    _120.y = _113.y / _98.y;\n    vec2 _92 = _120;\n    float _121 = shader_sdf_torus(_92);\n    vec4 _122 = _62;\n    _122.x = _121;\n    vec4 _123 = _122;\n    _123.y = _121;\n    vec4 _124 = _123;\n    _124.z = _121;\n    vec4 _125 = _124;\n    _125.w = 1.0;\n    _79 = _125;\n}\n\n// The mainImage function is the only handwritten GLSL here\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    shader_mainImage(fragColor, fragCoord, iResolution, iTime, iMouse, iDate, iSampleRate, iFrame, iTimeDelta, iFrameRate, iChannelTime, iChannelResolution);\n}\n\n/*\n// This is the Rust code that was compiled to SPIR-V and then compiled to the above GLSL\n\n#![cfg_attr(target_arch = \"spirv\", no_std)]\n#![feature(lang_items, register_attr)]\n#![register_attr(spirv)]\n#![allow(non_snake_case)]\n\nuse spirv_std::glam::{Vec2, Vec3, Vec4};\nuse spirv_std::num_traits::Float;\nuse spirv_std::storage_class::{Input, Output, UniformConstant};\n\n// Based upon https://www.shadertoy.com/view/XlSGzz\nfn sdf_torus(p: Vec2) -> f32 {\n    1.0 / (8.0 * (2.0 * p.length() - 1.0).abs())\n}\n\nfn mainImage(\n    fragColor: &mut Vec4,\n    fragCoord: Vec2,\n\n    // Shadertoy uniforms\n    iResolution: Vec3,\n    iTime: f32,\n    iMouse: Vec4,\n    iDate: Vec4,\n    iSampleRate: f32,\n    iFrame: i32,\n    iTimeDelta: f32,\n    iFrameRate: f32,\n    iChannelTime: [f32; 4],\n    iChannelResolution: [Vec3; 4],\n) {\n    let viewport = Vec2::new(iResolution.x, iResolution.y);\n    let p = (2.0 * fragCoord - viewport) / viewport.y;\n    let coverage = sdf_torus(p);\n    *fragColor = Vec4::new(coverage, coverage, coverage, 1.0);\n}\n\n#[allow(unused_attributes)]\n#[spirv(fragment)]\npub fn main_fs(\n    mut outColor: Output<Vec4>,\n    #[spirv(frag_coord)] frag_coord: Input<Vec2>,\n\n    // Shadertoy uniforms\n    iResolution: UniformConstant<Vec3>,\n    iTime: UniformConstant<f32>,\n    iMouse: UniformConstant<Vec4>,\n    iDate: UniformConstant<Vec4>,\n    iSampleRate: UniformConstant<f32>,\n    iFrame: UniformConstant<i32>,\n    iTimeDelta: UniformConstant<f32>,\n    iFrameRate: UniformConstant<f32>,\n    iChannelTime: UniformConstant<[f32; 4]>,\n    iChannelResolution: UniformConstant<[Vec3; 4]>,\n) {\n    let frag_coord = frag_coord.load();\n\n    // Shadertoy uniforms\n    let iResolution = iResolution.load();\n    let iTime = iTime.load();\n    let iMouse = iMouse.load();\n    let iDate = iDate.load();\n    let iSampleRate = iSampleRate.load();\n    let iFrame = iFrame.load();\n    let iTimeDelta = iTimeDelta.load();\n    let iFrameRate = iFrameRate.load();\n    let iChannelTime = iChannelTime.load();\n    let iChannelResolution = iChannelResolution.load();\n\n    // Calling mainImage like Shadertoy's injected footer code does\n    let mut color = Vec4::new(0.0, 0.0, 0.0, 1.0);\n    mainImage(\n        &mut color,\n        frag_coord,\n        iResolution,\n        iTime,\n        iMouse,\n        iDate,\n        iSampleRate,\n        iFrame,\n        iTimeDelta,\n        iFrameRate,\n        iChannelTime,\n        iChannelResolution,\n    );\n    color.w = 1.0;\n    outColor.store(color);\n}\n*/\n","name":"Image","description":"","type":"image"}]}