{"ver":"0.1","info":{"id":"NlGBWy","date":"1665125111","viewed":105,"name":"Trembling sphere","username":"Asif","description":" ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 eps = vec2(0.0001, 0.0000);\n\nstruct Ray\n{\n    vec3 or;\n    vec3 dir;\n};\n\nfloat sdSphere(in vec3 p, in float r)\n{\n    return length(p) - r;\n}\n\nfloat map(in vec3 p)\n{\n    float t = iTime * 5.0;\n    float rad = 2.0;\n\n    rad -= 0.01 * ((0.5 + 0.5 * sin(10.0 * p.x + t)) + 0.5 + 0.5 * sin(10.0 * p.y + t));\n    \n    return sdSphere(p, rad);\n}\n\nconst float min_dist = 0.0;\nconst float max_dist = 100.0;\nfloat trace(in Ray ray)\n{\n    const int max_steps = 64;\n        \n    float depth = min_dist, dist;\n    \n    for (int i = 0; i < max_steps; ++i) {\n        dist = map(ray.or + ray.dir * depth);\n        \n        if (dist < eps.x)\n            return depth;\n            \n        depth += dist;\n        \n        if (depth > max_dist)\n            return max_dist;\n            \n    }\n    \n    return max_dist;\n}\n\nvec3 calcNormal(in vec3 p)\n{\n    return normalize(vec3(\n        map(p + eps.xyy) - map(p - eps.xyy),\n        map(p + eps.yxy) - map(p - eps.yxy),\n        map(p + eps.yyx) - map(p - eps.yyx)\n    ));\n}\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord)\n{\n    vec3 col = vec3(0);\n\n    Ray ray = Ray (\n        vec3(0, 0, 5), \n        normalize(vec3(frag_coord - iResolution.xy * 0.5, -iResolution.y))\n    );\n    \n    float t = trace(ray);\n    \n    if (t < max_dist) {\n        const vec3  ld  = normalize(vec3(0, 1, 1));\n        vec3        p   = ray.or + ray.dir * t;\n        vec3        n   = calcNormal(p);\n        \n        col = texture(iChannel0, reflect(ray.dir, n)).rgb * max(dot(n, ld), 0.0);\n    }\n    \n    frag_color = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}