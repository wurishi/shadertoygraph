{"ver":"0.1","info":{"id":"NsjGW1","date":"1627408922","viewed":81,"name":"Rock Paper Scissors Automata","username":"cheasify","description":"Green beats Red beats Blue beats Green\nIf any of the four adjacent pixels defeats the center point it is swapped for that new color.\nHold 1,2 or 3 and drag to draw \n","likes":5,"published":1,"flags":48,"usePreview":0,"tags":["automata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom=1.;\n    ivec2 uv=ivec2(fragCoord/zoom);\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    fragColor = vec4(texelFetch( iChannel0, (uv+r)%r, 0 )); \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n//each pixel is matched against all its neighbors if it loses any pairings \n//then it is replaced by the victor \n\n#define keyClick(ascii)   ( texelFetch(iChannel1,ivec2(ascii,0),0).x > 0.)\n\n\n\n\nvec4 load(ivec2 p)\n{\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    \n   \n    \n    /*float pixelsize=5.0;\n    vec2 temp=pixelsize*round(vec2(p)/pixelsize);\n    p=ivec2(temp);\n    */\n    //p=mod(p+r,r);\n    return texelFetch(iChannel0,p , 0);\n}\n\n//a pixel duels each of the adjacent neighbors\n//returns 1 when v(other) beats c(center) and 0 otherwise\nfloat duel(vec3 c, vec3 v)\n{\n    return dot(v-c,v-c.yzx);\n}\n\n\n\nfloat dirac(float x,float v){//1 if same 0 else, dirac delta\n    return step(v,x)*step(x,v);\n}\n\n\n//returns either red, green or blue\nvec3 randRGB(vec2 p){\n\n    float r= floor(3.*fract(sin(dot(p, vec2(13.98,78.233)))* 43758.5453123));\n    return vec3(dirac(r,0.),dirac(r,1.),dirac(r,2.));\n}\n\nvec4 reset(vec2 coords)\n{\n    coords = coords/iResolution.yy;\n    float n=20.;\n    vec2 tile=floor(coords*n);\n    return vec4(randRGB(tile+vec2(iDate.w/60.)),1.);\n    \n    //return vec4(0.,0.,0.,0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    //shifting\n    //broken for negative shifts so left and down\n    //problem in load with neg modulo\n    \n    /*float shiftStep=1.;\n    if(keyClick(87)){fragCoord+=vec2(0.,shiftStep); }//up\n    if(keyClick(83)){fragCoord-=vec2(0.,shiftStep);}//down\n    if(keyClick(68)){fragCoord+=vec2(shiftStep,0.); }//right\n    if(keyClick(65)){fragCoord-=vec2(shiftStep,0.);}//left\n    */\n    \n    float ps=8.;//needs to be whole number?\n    ivec2 p = ivec2( ps*trunc(fragCoord/ps ));\n    vec3 c = load(p).xyz;\n\n    float total=0.0;\n    total+=duel(c,load(p+ivec2(0.,ps)).xyz);//up\n    total+=duel(c,load(p+ivec2(0.,-ps)).xyz);//down\n    total+=duel(c,load(p+ivec2(-ps,0.)).xyz);//left\n    total+=duel(c,load(p+ivec2(ps,0.)).xyz);//right\n    vec3 winner =min(total,1.)*c.zxy+(1.-min(total,1.))*c;\n    \n    \n    \n   \n    //slow time because proportionally to the pixelsize becuase it can be quite jarring at full speed\n    if(iFrame%int(ps)<=1){fragColor = vec4(winner,1.0);}\n    else{fragColor=load(p);}\n\n    //drawing capabilities \n    vec2 mouse=iMouse.xy;\n    float draw =step(length(vec2(p)-mouse),80.);//circle\n    //float draw=step(length(max(abs(vec2(p)-mouse)-vec2(30.),0.0)),0.);//square\n    if(keyClick(49)){fragColor+=draw*(vec4(1.,0.,0.,0.)-fragColor); }\n    if(keyClick(50)){fragColor+=draw*(vec4(0.,1.,0.,0.)-fragColor); }\n    if(keyClick(51)){fragColor+=draw*(vec4(0.,0.,1.,0.)-fragColor); }\n    if(keyClick(82)){fragColor=reset(fragCoord); }\n    \n    if( iFrame==0 )//initial conditions\n    {\n       \n       fragColor=reset(fragCoord);\n \n       \n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}