{"ver":"0.1","info":{"id":"3tfXDS","date":"1564009851","viewed":624,"name":"3D Flame Fractal","username":"rory618","description":"Replica attempt of https://www.deviantart.com/c-91/art/Awakening-316290566\nMouse and r to change camera and reset.","likes":40,"published":1,"flags":48,"usePreview":0,"tags":["3d","particles","montecarlo","reproduction","flam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n\tO = texture(iChannel2,I/R.xy);\n\tfloat Z = texture(iChannel1,vec2(I/R.xy)).z;\n\tif(texelFetch(iChannel0, ivec2(82,0),0).x<.5)\n    \tO = pow(O/Z*4.,vec4(1.0));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R iResolution\n#define F iFrame\n#define branches 6\n#define mIters 25.\n\n#define pi 3.14159\n#define R iResolution\n#define iR ivec3(R)\n#define uR uvec3(R)\n#define IHash3(x,y,z) IHash(int(x)^IHash(int(y)^IHash(int(z))))\n#define dot2(o) dot((o),(o))\n#define tx(ch,p,R) texelFetch(ch, Zmod(p,iR.xy),0)\n\n//Roboust/universal integer modulus function\n#define Zmod(x,y) (((x)+(y)+(y)+(y))-(((x)+(y)+(y)+(y))/(y))*(y))\n//#define Zmod(x,y) ((x+y*10)%y)\n\nint IHash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn a;\n}\n\nfloat Hash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn float(a) / float(0x7FFFFFFF);\n}\nvec4 rand4(int seed){\n    return vec4(Hash(seed^0x348593),\n                Hash(seed^0x8593D5),\n                Hash(seed^0x625384),\n                Hash(seed^0x253625));\n}\nvec3 rand3(int seed){\n    return vec3(Hash(seed^0x348593),\n                Hash(seed^0x8593D5),\n                Hash(seed^0x625384));\n}\nvec2 rand2(int seed){\n    return vec2(Hash(seed^0x348593),\n                Hash(seed^0x8593D5));\n}\n\n\nvec2 randn(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(-2.*log(1e-9+abs(r.x)));\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}\nvec2 randc(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(r.x);\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}\n\n\nstruct particle {\n    bool nil;\n    vec2 coord;\n    vec3 color;\n};\n    \nvec2 packParticle(particle p){\n    uvec2 px = uvec2(p.coord);\n    uvec3 c = uvec3(p.color * 7000. + 1000.);\n    uint n = uint(p.nil);\n    uint x = px.x & 0x7FFu;\n    uint y = px.y & 0x7FFu;\n    uint r = c.r & 0x1FFFu;\n    uint g = c.g & 0x1FFFu;\n    uint b = c.b & 0x1FFFu;\n    uint A = (b >> 9) | (g << 4) | (r << 17) | (n << 30);\n    uint B = (y) | (x << 11) | ((b & 0x1FFu) << 22);\n    return vec2(uintBitsToFloat(A),uintBitsToFloat(B));\n}\nparticle unpackParticle(vec2 p){\n    uint A = floatBitsToUint(p.x);\n    uint B = floatBitsToUint(p.y);\n    uint n = (A >> 30) & 0x1u;\n    uint r = (A >> 17) & 0x1FFFu;\n    uint g = (A >> 4) & 0x1FFFu;\n    uint b = ((B >> 22) & 0x1FFu) | ((A & 0xFu) << 9);\n    uint y = B & 0x7FFu;\n    uint x = (B >> 11) & 0x7FFu;\n    return particle(bool(n), vec2(x,y)+.5,(vec3(r,g,b)-1000.)/7000.);\n}\n\n#define mapping_iters 2\nvec2 forward_mapping(vec2 Z,vec3 R, int seed){\n    int p = int(R.x);\n    int q = int(R.y);\n    \n    int x=int(Z.x);\n    int y=int(Z.y);\n    \n    for(int i = 0; i < mapping_iters; i++){\n        x = Zmod(x + IHash(y^seed)%p,p);\n        y = Zmod(y + IHash(x^seed)%q,q);\n    }\n        \n    return vec2(x,y)+.5;\n    \n}\nvec2 reverse_mapping(vec2 Z,vec3 R, int seed){\n    \n    int p = int(R.x);\n    int q = int(R.y);\n    \n    int x=int(Z.x);\n    int y=int(Z.y);\n    \n    for(int i = 0; i < mapping_iters; i++){\n        x = Zmod(x - IHash(y^seed)%p,p);\n        y = Zmod(y - IHash(x^seed)%q,q);\n    }\n        \n    return vec2(x,y)+.5;\n}\n\nfloat score(particle p, vec2 I, vec3 R, int seed){\n    if(p.nil) return 1e6;\n    \n    vec2 Z = forward_mapping(p.coord, R, seed);\n    \n    vec2 D = Z-I;\n    D = mod(D+R.xy/2.,R.xy)-R.xy/2.;\n    return max(abs(D.x),abs(D.y));\n    \n}\n\n//Update ranking, save a list of two particle xy indices. O.xy is better particle, O.zw is a different not as good one\nvoid updateRank2x(particle n, inout vec4 O, inout float s0, inout float s1, vec2 I, vec3 R,int seed){\n    float sn = score(n,I,R,seed);\n    if(sn<s0){\n        //Shift down the line\n        s1=s0;\n        O.zw=O.xy;\n        s0=sn;\n        O.xy=packParticle(n);\n    } else if(sn<s1){\n        //Bump off the bottom one\n        s1=sn;\n        O.zw=packParticle(n);\n        \n    }\n}\n\n\nfloat scale = 100.;\nvec2 center =vec2(-0.126, -0.159);\nfloat Sqrt1pm1(float x)\n\t{\n\t\tif (-0.0625 < x && x < 0.0625)\n\t\t{\n\t\t\tfloat num = 0.;\n\t\t\tfloat den = 0.;\n\t\t\tnum += 1.0 / 32.;\n\t\t\tden += 1.0 / 256.;\n\t\t\tnum *= x;\n\t\t\tden *= x;\n\t\t\tnum += 5.0 / 16.;\n\t\t\tden += 5.0 / 32.;\n\t\t\tnum *= x;\n\t\t\tden *= x;\n\t\t\tnum += 3.0 / 4.;\n\t\t\tden += 15.0 / 16.;\n\t\t\tnum *= x;\n\t\t\tden *= x;\n\t\t\tnum += 1.0 / 2.;\n\t\t\tden += 7.0 / 4.;\n\t\t\tnum *= x;\n\t\t\tden *= x;\n\t\t\tden += 1.;\n\t\t\treturn num / den;\n\t\t}\n\n\t\treturn sqrt(1. + x) - 1.;\n\t}\n\nvec3 Cylinder(vec3 x){\n    return vec3(sin(x.x),x.y,cos(x.x));\n}\nvec3 zcone(vec3 x){\n    return vec3(0,0,length(x.xy));\n}\nvec2 Elliptic(vec2 x){\n    vec2 o;\n    float x2 = 2.*x.x;\n    float l = dot(x,x);\n    float u = l + x2;\n    float v = l - x2;\n    float xmaxm1 = 0.5 * (Sqrt1pm1(u) + Sqrt1pm1(v));\n    float a = x.x / (1. + xmaxm1);\n    float ssx = xmaxm1 < 0. ? 0. : sqrt(xmaxm1);\n    o.x = clamp(a, -1., 1.);\n\tif (x.y > 0.)\n\t\to.y = log(1.+xmaxm1 + ssx);\n\telse\n\t\to.y = -log(1.+xmaxm1 + ssx);\n\n\treturn o;\n    \n}\n\nvec2 Bipolar(vec2 x, float m_S) {\n\t\tfloat x2y2 = dot(x,x);\n\t\tfloat t = x2y2 + 1.;\n\t\tfloat x2 = 2. * x.x;\n\t\tfloat y = 0.5 * atan(2. * x.y, x2y2 - 1.) + m_S;\n\n\t\tif (y > pi*2.)\n\t\t\ty = -pi*2. + mod(y + pi*2., pi*2.);\n\t\telse if (y < -pi*2.)\n\t\t\ty = pi*2. - mod(pi*2. - y, pi*2.);\n\n\t\tfloat f = t + x2;\n\t\tfloat g = t - x2;\n\n\t\tif ((g == 0.) || (f / g <= 0.))\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn vec2(pi/2. * log((t + x2) / (t - x2)), pi*2. * y);\n\t\t}\n\t}\n\nvec3 splits(vec3 x, vec2 m) {\n    vec3 o;\n    o.z=x.z;\n\t\tif (x.x >= 0.)\n\t\t\to.x = x.x + m.x;\n\t\telse\n\t\t\to.x = x.x - m.x;\n\n\t\tif (x.y >= 0.)\n\t\t\to.y = x.y + m.y;\n\t\telse\n\t\t\to.y = x.y - m.y;\n\n\treturn o;\n}\n\nvec3 Bubble(vec3 x){\n    float denom = 0.25 * dot(x.xy,x.xy) + 1.;\n    return vec3(x.xy/denom,2./(denom)-1.);\n}\nvec3 Spherical(vec3 x){\n    return vec3(x.xy/(1e-6+dot(x.xy,x.xy)),x.z);\n}\nvec3 Spherical3D(vec3 x){\n    return vec3(x/(1e-6+dot(x.xyz,x.xyz)));\n}\nvec3 Hyperbolic(vec3 x){\n    float a = atan(x.x, x.y);\n    float r = length(x.xy) + 1e-6;\n    return vec3(sin(a)/r,cos(a)*r,x.z);\n}\n/*\nint IHash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn a;\n}\n\nfloat Hash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn float(a) / float(0x7FFFFFFF);\n}*/\n\nvec2 julia(vec2 x, int seed){\n    float a = atan(x.y, x.x)/2.0;\n    if(Hash(seed)>.5) a += 3.14159;\n    float r = pow(dot(x,x), 0.25);\n    return vec2(r*cos(a),r*sin(a));\n}\n\nvec3 Julia3D(vec3 x, int seed, float m_N){\n    float m_AbsN = abs(m_N);\n    float m_Cn = (1. / m_N - 1.) / 2.;\n\tfloat z = x.z / m_AbsN;\n\tfloat r = pow(dot(x.xy,x.xy) + z*z, m_Cn);\n\tfloat tmp = r * length(x.xy);\n\tfloat ang = (atan(x.x,x.y) + pi*2. * floor(m_AbsN*Hash(seed^0x6aca43d3 ) ) ) / m_N;\n\treturn vec3(tmp * cos(ang),tmp * sin(ang),r * z);\n}\n\nint[] palette = int[] (\n\n   0x310C00,0x4C5520,0x327858,0x36825E,0x307A59,0x235752,0x2B0005,0x2E0000,0x560000,0x7C0000,0x9F1600,0xB54300,0xB44C00,0xB45700,0xB96100,0xC07100,0xC68400,0xD89C06,0xD99F19,0xDAA525,0xBE9D44,0xB5A964,0xBDAA76,0xC5A679,0xD8AF39,0xDBAC21,0xDB9C07,0xD59300,0xC46F00,0xBE5C00,0xBA4800,0xA21B00,0x860000,0x7A0000,0x772939,0x7F2D41,0x8A6640,0x6A9756,0x6F945C,0x90946B,0x9D8766,0xCD8E2F,0xDBA322,0xDBAC21,0xDBA81E,0xD99F1B,0xD89B15,0xD69216,0xD08602,0xBA5E00,0xAF4B00,0xA01900,0x840000,0x5E0000,0x3D0000,0x310000,0x350000,0x3E0007,0x31000B,0x396550,0x377E5C,0x5A9752,0x6C9853,0xA8892A,0xA56705,0xA15000,0x871000,0x580000,0x470000,0x390000,0x390000,0x540000,0x5A0000,0x931600,0xAF4A00,0xB75800,0xCA8200,0xC8981A,0xB49F44,0x8AA261,0x6FA25B,0x67A05C,0x639F59,0x669D5F,0x729E63,0x8F9967,0xA5AA6A,0xB1AA89,0xB5B298,0xB1B697,0x91AA8B,0x7AA083,0x4D988F,0x449694,0x3C8E92,0x217D96,0x2283A6,0x388A84,0x4D896A,0x5E9B58,0x609958,0x5D9751,0x569348,0x387251,0x43000C,0x480000,0x580000,0x870E00,0xB33E00,0xB64C00,0xBB5900,0xC06A00,0xC77A00,0xCD8D09,0xD69F13,0xD79F19,0xD9A71D,0xDBA51C,0xDAA120,0xD39D1F,0xB89339,0x7F9D53,0x6A9959,0x629858,0x659756,0x669A5D,0x619861,0x498D93,0x3F9499,0x3D969E,0x2E88A3,0x208CAE,0x218BA9,0x2E91A1,0x3B9288,0x5F9D5E,0x659755,0x635338,0x5C1226,0x3B000F,0x320009,0x2E0005,0x2E0001,0x270000,0x260000,0x000600,0x000300,0x000000,0x000000,0x000000,0x000000,0x000000,0x240000,0x320008,0x3D2E12,0x337A56,0x5C9555,0x6E8A6C,0x808D7C,0xA29586,0xB4A39B,0xAEA793,0x90A67B,0x78A56C,0x68A05C,0x63954E,0x714E2A,0x7B0100,0x820000,0x8B0000,0x8F0000,0x920000,0x7F0000,0x600000,0x540000,0x570000,0x6D3C1D,0x7E7029,0x659550,0x679853,0x74974D,0xB29B33,0xC89B25,0xD9A82B,0xCCB252,0xC4B386,0xC7B790,0xC1B992,0xAFB387,0x7DAA72,0x71A76B,0x70A567,0x7EA368,0x92A563,0xA3A053,0xC79823,0xCE8B10,0xC35E00,0xC05A00,0xBD5600,0xC15400,0xBB5800,0xBD5A00,0xBC5F00,0xC26E00,0xC58300,0xB89222,0x94944B,0x769E59,0x76A664,0x7BA86F,0x99AF81,0xABB7A2,0xA7B8A8,0xA5B3A6,0x729E89,0x4D9D94,0x5A9F89,0x6D9D61,0x839D5B,0xB2753F,0xB26000,0xB75600,0xBA4E00,0xB94C00,0xBC5200,0xBC5200,0xBB5300,0xB75400,0xB75700,0xB65A00,0xB66300,0xC47D00,0xCE8832,0xAB9764,0xC3B08A,0xC0B599,0xC0AF9D,0xC3B9A0,0xBFBA9F,0xBEB899,0xBAB79D,0xBCC0A1,0xB8BBAC,0xACBAA9,0xB5BCA1,0xB4B79A,0xB9B78A,0xA99C6E,0xA6646D,0xB76B30,0xA15C00,0xA73400,0x800000,0x590000,0x420000);\nint palette_count = 256;\nvec3 get_pallete(float f){\n    //f = fract(f+iMouse.x/R.x);\n    int a = int(f*float(palette_count));\n    int c0 = palette[a%palette_count];\n    int c1 = palette[(a+1)%palette_count];\n    vec3 rgb0 = vec3((c0>>16)&0xFF,(c0>>8)&0xFF,c0&0xFF)/255.;\n    vec3 rgb1 = vec3((c1>>16)&0xFF,(c1>>8)&0xFF,c1&0xFF)/255.;\n    return rgb0;//mix(rgb0,rgb1,fract(f*float(palette_count)));\n}\n\n\nfloat particles = 4e6;\n/*\nvec4 rand4(int seed){\n    return vec4(Hash(seed^0x348593),\n                Hash(seed^0x8593D5),\n                Hash(seed^0x625384),\n                Hash(seed^0x253625));\n}\nvec2 rand2(int seed){\n    return vec2(Hash(seed^0x34a513),\n                Hash(seed^0xf5d32b));\n}\n\n//Convert uniform random to normal\nvec2 randn(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(-2.*log(1e-9+abs(r.x)));\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}*/\n\n\n\nint getParticle(float id, vec3 R, int iFrame){\n    int seed = IHash(int(id))^IHash(int(iFrame));\n    return seed;\n}\n\n\n/*\nvec3 V0(vec3 x,int seed){return (x);}\nvec3 V1(vec3 x,int seed){return Hyperbolic(x)+vec3(0,0,15);}\nvec3 V2(vec3 x,int seed){return Cylinder(x)+vec3(0,0,-1);}\nvec3 V3(vec3 x,int seed){return 0.383*Bubble(x)+vec3(0,0,length(x))+vec3(0,0,15);}\n\nvec3 F0(vec3 x,int seed){\n    vec2 rnd = (floor(rand4(seed).zw*3.)-1.);\n    if(rnd==vec2(0)) rnd=vec2(1);\n    x.xy = mat2(0.728968, 0.684548, -0.684548, 0.728968) * x.xy  + vec2(2, 2)*rnd;\n    return \tV0(x,seed);\n}\nvec3 F1(vec3 x,int seed){\n    x.xy += randn(rand4(seed).zw)*0.00001;\n    x.xy = mat2(0.728968, 0.684548, -0.684548, 0.728968) * x.xy + vec2(0, 0);\n    return \tV1(x,seed);\n}\nvec3 F2(vec3 x,int seed){\n    x.xy = mat2(0.728968, 0.684548, -0.684548, 0.728968) * x.xy + vec2(0, 0);\n    return \tV2(x,seed);\n}\nvec3 F3(vec3 x,int seed){\n    x.xy = mat2(-0.571373, -0.536555, 0.536555, -0.571373) * x.xy + vec2(0, 0);\n    return \tV3(x,seed) + vec3(1,0,0);\n}\n\nvec3 FF(vec3 x,int seed){\n    return Julia3D(x,seed,-2.);\n    //return 2.*Bipolar(x*mat2(1, 0, 0, 1),0.);\n}\n*/\n\nvec3 V0(vec3 x){return Bubble(x);}\nvec3 V1(vec3 x){return Spherical3D(x);}\nvec3 V2(vec3 x){return 0.45*Cylinder(x);}\n\nvec3 F0(vec3 x,int seed){\n    x.xy = x.xy + vec2(1, 0);\n    return Spherical3D(x)*1.401;\n}\n\nvec3 F1(vec3 x,int seed){\n    x.xy = x.xy + vec2(-0.5, -0.866025);\n    return \tSpherical3D(x);\n}\nvec3 F2(vec3 x,int seed){\n    x.xy = x.xy + vec2(-0.5, 0.866025);\n    return \tSpherical3D(x);\n}\nvec3 F3(vec3 x,int seed){\n    x.xy += randn(rand2(seed))*2.;\n    //x.z += 1.702;\n    return Cylinder(x)*0.07+zcone(x)*2.651 + vec3(0,0,1.702);\n}\nvec3 F4(vec3 x,int seed){\n    return x*0.23;\n}\nvec3 F5(vec3 x,int seed){\n    x.xy += randn(rand2(seed))*0.1;\n    //x.z += 0.497;\n    return \tBubble(x)*0.068 + vec3(randn(rand2(IHash(seed)))*0.001,0) + vec3(0,0,0.497);\n}\n\nvec3 FF(vec3 x,int seed){\n    return x+vec3(0,0,sqrt(max(0.,1.-dot(x.xy,x.xy))));\n    //return 2.*Bipolar(x*mat2(1, 0, 0, 1),0.);\n}\n\nvoid iter(inout vec3 x, inout float col, inout int seed){\n    //vec4 r = rand4(seed);\n    float r = Hash(seed)*5.779;\n    seed=IHash(seed);\n    if(r<1.5){\n        col = mix(col,0.,0.2);\n        x = (F0(x,seed));\n    } else if (r<3.0){\n        col = mix(col,0.,0.2);\n        x = (F1(x,seed));\n    } else if (r<4.5){\n        col = mix(col,0.,0.2);\n        x = (F2(x,seed));\n    } else if (r<4.5+0.529){\n       //col = mix(col,0.,0.5);\n        \n        x = F3(x,seed);\n        \n    } else if (r<5.529){\n       //col = mix(col,0.,0.5);\n        \n        x = F4(x,seed);\n        \n    } else {// if (r<5.529){\n        col = mix(col,0.316,1.-0.406);\n        \n        x = F5(x,seed);\n        \n    }\n}\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 perspectiveTransform(vec3 x, int seed){\n    //x.z+=iMouse.x/iResolution.x-.5;\n    float cam_pitch=1.13446401379631-3.14159/2.;\n    float cam_yaw=3.14159/2.-0.253072741539178;//-3.14159/2.;\n    if(iMouse.x>0.){\n        cam_yaw = pi*2.*iMouse.x/iResolution.x;\n        cam_pitch = pi*2.*(iMouse.y/iResolution.y-.5);\n    }\n    //float cam_perspective=0.1505;\n    vec3 forward = normalize(vec3(cos(cam_pitch)*cos(cam_yaw),cos(cam_pitch)*sin(cam_yaw),sin(cam_pitch)));\n    vec3 right = normalize(cross(forward,vec3(0,0,-1)));\n    vec3 up = cross(right,forward);\n    vec3 c0 = vec3(0,0,0);\n    float a = dot(x-c0,forward);\n    float b = dot(x-c0,-right);\n    float c = dot(x-c0,up);\n    return 25.*(vec2(b,c)-center)+randc(rand2(seed))*a*0.15;///cam_perspective ;\n}\n//Particle buffer\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec3 col = texture(iChannel0, I/R.xy).xyz*.01+.5;\n    vec2 coord;\n    \n    int seed = int(iMouse.x);\n\n    int seed2 = int(I.x + I.y*2000.)+iFrame*4000000;\n    coord = rand2(seed2)*R.xy;\n    vec4 t = texture(iChannel3,I/R.xy);\n    \n    coord = (.04*R.y*(perspectiveTransform(t.xyz,seed2))*vec2(1,-1)+.5*R.xy);\n    coord += rand2(IHash(seed2))-.5;\n    col = get_pallete(t.w);\n    particle p = particle(!(coord.x>0.&&coord.x<R.x&&coord.y>0.&&coord.y<R.y), coord, col);\n    O.xy = packParticle(p);\n    \n    O.z = max(texture(iChannel0,I/R.xy).z,max(texture(iChannel0,rand2(seed2)).z,texture(iChannel1,rand2(seed2)).w));\n    \n\t    if(texelFetch(iChannel2, ivec2(82,0),0).x>.5) O.z*=0.;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n    //Split frames into 8 stages\n    int stage = iFrame%8;\n    int seed = iFrame/8;\n    int size = int(.5+pow(2.45,float(7-stage)));\n    \n    \n    float s0;\n    float s1;\n    //init with top left corner and center\n    if(stage==0){\n        vec2 u0 = tx(iChannel0, ivec2(I)-size,R).xy;\n        vec2 u1 = tx(iChannel0, ivec2(I),R).xy;\n        particle p0 = unpackParticle(u0);\n        particle p1 = unpackParticle(u1);\n                                                                         \n        s0 = score(p0,I,R,seed);\n        s1 = score(p1,I,R,seed);\n        \n        O.xy=u0;\n        O.zw=u1;\n        \n        //Select the better one, make sure scores are in order with s0<s1\n        if(s0>s1){\n            vec2 _ = O.xy;\n            O.xy = O.zw;\n            O.zw = _;\n            _.x = s0;\n            s0 = s1;\n            s1 = _.x;\n        }\n    } else {\n        O = tx(iChannel1, ivec2(I)-size,R );\n        particle p0 = unpackParticle(O.xy);\n        particle p1 = unpackParticle(O.zw);\n        s0 = score(p0,I,R,seed);\n        s1 = score(p1,I,R,seed);\n    }\n    for(int i = 1; i < 9; i++){\n        if(stage==0){\n        \tvec2 u = tx(iChannel0,ivec2(I)-size+size*ivec2(i/3,i%3),R).xy;\n            particle p = unpackParticle(u);\n            updateRank2x(p,O,s0,s1,I,R,seed);\n            \n        } else {\n        \tvec4 t;\n            vec4 u = tx(iChannel1,ivec2(I)-size+size*ivec2(i/3,i%3),R); \n            particle p0 = unpackParticle(u.xy);\n            particle p1 = unpackParticle(u.zw);\n            updateRank2x(p0,O,s0,s1,I,R,seed);\n            updateRank2x(p1,O,s0,s1,I,R,seed);\n        }\n        \n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void splat(inout vec4 O, vec2 I, particle p){\n    if(floor(I) == floor(p.coord) && !p.nil){\n        O += vec4(p.color,1); \n    }\n}\n\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n\n    O = vec4(0);\n    int seed = iFrame/8;\n    \n    if(iFrame%8==7){\n            vec2 ip = forward_mapping(I,R,seed);\n            vec4 t = texelFetch(iChannel0,ivec2(ip),0);\n            \n\n            splat(O,I,unpackParticle(t.xy));\n            splat(O,I,unpackParticle(t.zw));\n        O += texture(iChannel2,I/R.xy);\n    } else {\n        O = texture(iChannel2,I/R.xy);\n    }\n    O += vec4(0,0,.2,1)/15.;\n    if(iFrame%8==6)\n\t    if(texelFetch(iChannel1, ivec2(82,0),0).x>.5) O*=0.;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n    int seed2 = int(I.x + I.y*2000.)+iFrame*4002400;\n    \n    O = texture(iChannel3, rand2(seed2));\n    \n    if(Hash(seed2)<.004){\n        O = vec4(10.*randn(rand2(seed2)),0,0);\n    } else {\n        iter(O.xyz,O.w,seed2);\n    }\n}","name":"Buffer D","description":"","type":"buffer"}]}