{"ver":"0.1","info":{"id":"fscGzX","date":"1630302483","viewed":269,"name":"StarFieldAleph","username":"AriesTiger","description":"Just a project on making a starfield following the Art of Code tutorial https://www.youtube.com/watch?v=rvDo9LvfoVE.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["random","star","space","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//takes input angle rotation func, returns a rotation matrix\n\n#define NUM_LAYERS 9.\nmat2 Rotate(float a)\n\n{\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Star(vec2 uv, float flare)\n{\n     \n    //gets length to center of screen\n    float d = length(uv);\n    float m = .05/d;\n    \n    //lense flare\n    float rays = max(0., .5-abs(uv.x*uv.y*1200.0));\n    m += rays*flare;\n    \n    //second lense flare\n    uv *= Rotate(3.14159265/4.);\n    rays = max(0., 1./.5-abs(uv.x*uv.y*2000.0));\n    m += rays*.3*flare;\n    m*= smoothstep(.4, .2, d);\n    return m;\n     \n}\n//RNG\nfloat Hash21(vec2 p)\n{\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\nvec3 StarLayer(vec2 uv)\n{\n    vec3 col = vec3(0);\n //making boxes\n    vec2 gv = fract(uv)-.5;\n   vec2 id = floor(uv);\n   \n   //iter thru 3x3 nbhd to add local contributions of light\n   for(int y=-1; y<=1; y++)\n    {\n        for(int x = -1; x<=1; x++)\n        {\n        //offset\n        vec2 offs = vec2(x, y);\n        float r = Hash21(id + offs); //rand btwn 0 & 1\n        float luminosity = fract(r*3817345.32);\n        float star = Star(gv-offs-vec2(r-.5,fract(r*72.)), smoothstep(.6, .8, luminosity));\n        col += star*luminosity;\n        \n        float colNum = 8682.90;\n        vec3 color = sin(vec3(.2, .3, .9)*fract(r*546.657)*colNum)*.7+.5;\n        //specifying colors\n        color = color*vec3(1.+.5, 0., 1.+.5);\n        star *= sin(iTime*3.+r*6.3)*.5+1.;\n        col+=star*luminosity*color;\n\n        }\n    }\n            return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float t = iTime*.05;\n    uv*=8.;\n    uv*= Rotate(t);\n    vec3 col = vec3(0);\n    \n    for(float i=0.; i<1.; i+=1./NUM_LAYERS)\n    {\n        float depth = fract(i+t);\n        \n        float scale = mix(7., .5, depth);\n        float fade = depth*smoothstep(1., .9, depth);\n        col+=StarLayer(uv*scale+i*42.)*fade;\n    }\n    \n   \n \n   \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}