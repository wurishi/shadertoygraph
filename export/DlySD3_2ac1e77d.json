{"ver":"0.1","info":{"id":"DlySD3","date":"1686665379","viewed":105,"name":"Burst particle test","username":"MartinRGB","description":"Burst particle test","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["burstparticletest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 base_color = vec3(0.2, 0.3, 1.0);\nconst vec3 blue_shift = vec3(1.0, 1.0, 1.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 center = iResolution.xy*vec2(0.5,0.5);\n\n    float c0 = 0., c1 = 0.;\n    \n\n    // pulse effect from https://www.shadertoy.com/view/ldycR3\n    float fac = 1. + (sin(iTime*2.)+1.)/2.;\n    float r = (fac+1.)/2.;\n    float a = pow(r, 2.0);\n    float b = sin(r * 0.8 - 1.6);\n    float c = sin(r - 0.010);\n    float s = sin(a - fac * 3.0 + b) * c;\n    \n    for(float i = 0.; i < s*600.; ++i) {\n        float speed = 2.;\n        float t = speed*iTime + hash11(i);\n\n        //use time generate noise,the parameter is just the seed number\n        vec2 v = hash21(i + 50.*floor(t));\n        //from 0 to 1 normalize the noised time\n        t = fract(t);\n        //polar the coordnates\n        \n        //v = vec2(sqrt(-2.*log(1.-v.x)), 6.283185*v.y);       \n        \n        //v = toPolar(v);\n        // distance & emit around the center\n        float burstRange = 390.;\n        v = burstRange*v.x*vec2(cos(v.y*10.), sin(v.y*10.));\n\n        vec2 p = center + t*v - fragCoord;\n        //the glow center\n        //c0 += 4.*(1.-t)/(1. + 0.3*dot(p,p));\n\n        p = p.yx;\n        v = v.yx;\n        p = vec2(\n            p.x/v.x,\n            p.y - p.x/v.x*v.y\n        );\n\n        float length = 0.01;\n        float a = abs(p.x) < length ? 50./abs(v.x) : 0.;\n        float b0 = max(2. - abs(p.y), 0.);\n        //float b1 = 0.2/(1.+0.0001*p.y*p.y);\n        c0 += (1.-t)*b0*a;\n        //c1 += (1.-t)*b1*a;\n        \n        //accumulate the particles,\n        c0 += (t)*b0*a;\n    }\n    \n    \n\n    vec3 rgb = c0*base_color;\n    //rgb += hash33(vec3(fragCoord,iTime*256.))/512.;\n    rgb = pow(rgb, vec3(0.4545)) ;\n    fragColor = vec4(rgb,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define TWO_PI 6.283185\n// https://www.shadertoy.com/view/XlGcRh\n\n\n// https://www.pcg-random.org/\nuint pcg(uint v)\n{\n\tuint state = v * 747796405u + 2891336453u;\n\tuint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n\treturn (word >> 22u) ^ word;\n}\n\nuvec2 pcg2d(uvec2 v)\n{\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    return v;\n}\n\n// http://www.jcgt.org/published/0009/03/02/\nuvec3 pcg3d(uvec3 v) {\n\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n    v ^= v >> 16u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n    return v;\n}\n\n\nfloat hash11(float p) {\n    return float(pcg(uint(p)))/4294967296.;\n}\n\nvec2 hash21(float p) {\n    return vec2(pcg2d(uvec2(p, 0)))/4294967296.;\n}\n\nvec3 hash33(vec3 p3) {\n    return vec3(pcg3d(uvec3(p3)))/4294967296.;\n}","name":"Common","description":"","type":"common"}]}