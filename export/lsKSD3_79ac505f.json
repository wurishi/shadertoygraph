{"ver":"0.1","info":{"id":"lsKSD3","date":"1467170990","viewed":97,"name":"L1 - Gr","username":"bradleygriffith","description":"L1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float time = iTime / 1.0;\n    float heatDistanceScale = 6.5; // Larger equates to smaller spread\n\n    \n    // Create heat points\n    // --------------------------------\n    \n    // Define 3 heat points\n    float heatPoint1X = (0.5 + sin(time * 1.05) / 4.0);\n    float heatPoint1Y = (0.5 - cos(time * 2.5) / 4.0);\n    vec2 heatPoint1Uv = vec2(heatPoint1X, heatPoint1Y);\n    \n    float heatPoint2X = (0.5 + sin(time * 1.0) / 4.0);\n    float heatPoint2Y = (0.5 - cos(time * 2.0) / 4.0);\n    vec2 heatPoint2Uv = vec2(heatPoint2X, heatPoint2Y);\n    \n    float heatPoint3X = (0.5 + sin(time * 3.0) / 4.0);\n    float heatPoint3Y = (0.5 - cos(time * 0.5) / 4.0);\n    vec2 heatPoint3Uv = vec2(heatPoint3X, heatPoint3Y);\n    \n    // Calculate distances from current UV and combine\n    float heatPoint1Dist = distance(uv, heatPoint1Uv);\n    float heatPoint2Dist = distance(uv, heatPoint2Uv);\n    float heatPoint3Dist = distance(uv, heatPoint3Uv);\n    float combinedDist = (heatPoint1Dist) * (heatPoint2Dist) * (heatPoint3Dist);\n\t\n    // Invert and scale\n    float amount = 1.0 - smoothstep(0.05, 0.295, combinedDist * heatDistanceScale);\n\n    \n    fragColor = vec4(vec3(amount), 1.0);\n}","name":"Image","description":"","type":"image"}]}