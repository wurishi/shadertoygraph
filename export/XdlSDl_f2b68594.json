{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"video","id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //float dotSize = 1.0 * texture(iChannel1,vec2(0.0,0.0)).r + 0.5;\n    float dotSize = 1.0;\n    const float off = 0.2;\n    const vec2 offR = off * vec2(-1.0, -1.0);\n    const vec2 offG = off * vec2( 1.0, -1.0);\n    const vec2 offB = off * vec2( 0.0,  1.0);\n    \n    //vec2 rez = 30.0 * vec2(sin(iTime*0.05)+1.7, cos(iTime*0.07)+1.7) * sin(iTime * 0.2) + 40.0;\n    vec2 rez = 30.0 * vec2(1.0, 1.0) * sin(iTime * 1.2) + 40.0;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 m_sample = texture(iChannel0,(floor(uv*rez)+vec2(0.5,0.5))/rez).rgb;\n    \n    vec3 rot = vec3(0.0, 0.0, iTime * 0.1);\n    //vec3 rot = vec3(0.0, 0.0, iTime * 0.1);\n    mat4 rotX = mat4( 1.0,       0.0,       0.0,       0.0,\n        \t          0.0,       cos(rot.x), -sin(rot.x), 0.0,\n                      0.0,       sin(rot.x),  cos(rot.x), 0.0,\n                      0.0,       0.0,       0.0,       1.0);\n    mat4 rotY = mat4( cos(rot.y),  0.0,       sin(rot.y),  0.0,\n                      0.0,       1.0,       0.0,       0.0,\n                     -sin(rot.y), 0.0,       cos(rot.y),  0.0,\n                      0.0,       0.0,       0.0,       1.0);\n    mat4 rotZ = mat4( cos(rot.z), -sin(rot.z),  0.0,       0.0,\n                      sin(rot.z),  cos(rot.z),  0.0,       0.0,\n                      0.0,       0.0,       1.0,       0.0,\n                      0.0,       0.0,       0.0,       1.0);\n    \n    mat4 scale = mat4(rez.x, 0.0, 0.0, 0.0, \n                      0.0, rez.y, 0.0, 0.0,\n                      0.0, 0.0, 1.0, 0.0,\n                      0.0, 0.0, 0.0, 1.0);\n    vec4 inCoord = vec4(uv - vec2(0.5, 0.5), 0.0, 1.0);\n    vec2 outCoord = (inCoord * scale * rotX * rotY * rotZ).xy;\n    \n    float isInR = length((fract(outCoord - offR) - vec2(0.5,0.5)) * 2.0) / (m_sample.r * dotSize);\n    float isInG = length((fract(outCoord - offG) - vec2(0.5,0.5)) * 2.0) / (m_sample.g * dotSize);\n    float isInB = length((fract(outCoord - offB) - vec2(0.5,0.5)) * 2.0) / (m_sample.b * dotSize);\n    vec3 color = vec3(isInR, isInG, isInB);\n    color = vec3(1.0) - pow(color, vec3(4.0));\n    \n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdlSDl","date":"1407871197","viewed":291,"name":"SIG2014 - Halftone","username":"AMagill","description":"For the SIGGRAPH 2014 Shadertoy Hackathon!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2dhalftone"],"hasliked":0,"parentid":"","parentname":""}}