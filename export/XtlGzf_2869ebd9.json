{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// --- GLOBALS ---\nconst float e = 2.71828182845904523536028747135266249;\n\n// sun\nvec3 sunDir = normalize(vec3(0.4, 1.0, 0.2));\n\n// red light\nvec3 redLight = vec3(1.2, 1.5, -0.4);\nvec3 redLightc = vec3(1.0, 0.2, 0.1);\nfloat redLightd = 8.0;\n\n// ambient color\nvec3 amb = vec3(0.0, 0.01, 0.02);\n\n// sphere 1\nvec4 sphere1 = vec4(1.0, 0.5, 0.2, 0.5);\nvec3 sphere1c = vec3(0.5, 0.72, 0.92);\n\n// sphere 2\nvec4 sphere2 = vec4(-0.7, 0.3, 1.2, 0.3);\nvec3 sphere2c = vec3(0.8, 0.65, 0.7);\n\n\n// --- GEOMETRY ---\n\n// test ray against a sphere\nfloat sphere(in vec3 ro, in vec3 rd, in vec4 s) {\n    float t = -1.0;\n    \n    ro -= s.xyz;\n    float r = s.w;\n    \n    // t^2 + 2 * <ro, rd> * t + |ro|^2 - r^2 = 0\n    \n    float b = dot(ro, rd);\n    float c = dot(ro, ro) - r * r;\n    float h = b * b - c;\n    \n    if (h >= 0.0)\n        t = (-b - sqrt(h));\n    \n    return t;\n}\n\n// get sphere normal in position\nvec3 sphereNormal(in vec3 point, in vec4 s) {\n    return (point - s.xyz) / s.w;\n}\n\n// test ray against a plane\nfloat plane(in vec3 ro, in vec3 rd) {\n    float t = -1.0;\n    \n    // ro.y + t * rd.y = 0\n    \n    t = -ro.y / rd.y;\n    \n    vec3 p = ro + t * rd;\n    float l = length(p.xz);\n    if (l > 3.0)\n        t = -1.0;\n    \n    return t;\n}\n\n// shoot the ray into the world\nvec2 shoot(in vec3 ro, in vec3 rd) {\n    vec2 res;\n    float t = 1000.0;\n    \n    // test sphere 1\n    float s = sphere(ro, rd, sphere1);\n    if (s > 0.0) {\n        t = s;\n        res.y = 1.0;\n    }\n    \n    // test sphere 2\n    float s2 = sphere(ro, rd, sphere2);\n    if (s2 > 0.0 && s2 < t) {\n        t = s2;\n        res.y = 3.0;\n    }\n    \n    // test plane\n    float p = plane(ro, rd);\n    if (p > 0.0 && p < t) {\n        t = p;\n        res.y = 2.0;\n    }\n    \n    res.x = t;\n    return res;\n}\n\n// --- LIGHTING ---\n\n// diffuse lighting\nvec3 diffuseLight(vec3 normal, vec3 light) {\n    return max(dot(normal, light), 0.0) * vec3(1.0);\n}\n\n// specular highlights\nvec3 specularLight(vec3 normal, vec3 light, vec3 rd, float s) {\n    vec3 r = reflect(light, normal);\n    return pow(max(dot(r, rd), 0.0), s) * vec3(1.0);\n}\n\n// --- MAIN ---\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    // screen uv\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    \n    // ray\n    float d = 2.0;\n    vec3 ro = vec3(cos(iTime * -0.2) * d, 1.0, sin(iTime * -0.2) * d);\n    vec3 ta = vec3(0.0, 0.4, 0.0);\n    \n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww, vec3(0.0, 1.0, 0.0)));\n    vec3 vv = normalize(cross(uu, ww));\n    \n    vec3 rd = normalize(uv.x * (iResolution.x / iResolution.y) * uu + uv.y * vv + 2.0 * ww);\n    \n    // shoot the ray\n    vec2 res = shoot(ro, rd);\n    \n    // background\n    vec3 color = amb;\n    \n    // objects\n    if (res.x > 0.0 && res.x < 1000.0) {\n        \n        vec3 point = ro + res.x * rd;\n        \n        if (res.y < 1.5) {\n            // sphere\n            color = sphere1c;\n            \n            vec3 normal = sphereNormal(point, sphere1);\n            vec3 rld = redLight - point;\n            float d = length(redLight - point);\n            rld = normalize(rld);\n            \n            // light\n            vec3 diff = diffuseLight(normal, sunDir) + diffuseLight(normal, rld) * redLightc * (1.0 - smoothstep(0.0, redLightd, d));\n            \n            color = color * diff + amb;\n        }\n        \n        else if (res.y < 2.5) {\n            // plane\n            color = vec3(0.35, 0.33, 0.2);\n            \n            vec3 normal = vec3(0.0, 1.0, 0.0);\n            vec3 rld = redLight - point;\n            float d = length(redLight - point);\n            rld = normalize(rld);\n            d = 1.0 - smoothstep(0.0, redLightd, d);\n            \n            // light\n            vec3 diff = diffuseLight(normal, sunDir) + diffuseLight(normal, rld) * redLightc * d;\n            \n            // shadow\n            vec3 sh = vec3(0.0);\n            float sd = 0.0;\n            for(float sx = -0.1; sx <= 0.1; sx += 0.05)\n                for(float sz = -0.1; sz <= 0.1; sz += 0.05) {\n                    vec2 sr = shoot(point + vec3(0.0, 0.01, 0.0), sunDir + vec3(sx, 0.0, sz));\n                    if (sr.x > 0.0 && sr.x < 1000.0)\n                        sh += 1.0;\n                    sd += 1.0;\n                    \n                    vec2 sr2 = shoot(point + vec3(0.0, 0.01, 0.0), rld + vec3(sx, 0.0, sz));\n                    if (sr2.x > 0.0 && sr2.x < 1000.0)\n                        sh += redLightc * d;\n                    sd += 1.0;\n                }\n            sh /= sd;\n            \n            color *= 1.0 - sh * 0.8;\n            \n            color = color * diff + amb;\n        }\n        \n        else if (res.y < 3.5) {\n            // sphere 2\n            color = sphere2c;\n            \n            vec3 normal = sphereNormal(point, sphere2);\n            vec3 rld = redLight - point;\n            float d = length(redLight - point);\n            rld = normalize(rld);\n            \n            // light\n            vec3 diff = diffuseLight(normal, sunDir) + diffuseLight(normal, rld) * redLightc * (1.0 - smoothstep(0.0, redLightd, d));\n            vec3 spe = specularLight(normal, sunDir, rd, 10.0) + specularLight(normal, rld, rd, 10.0) * redLightc;\n            \n            color = color * diff + amb + spe;\n        }\n        \n        // fog\n        float f = pow(e, -pow(res.x*0.3, 2.0));\n        color = mix(amb, color, f);\n            \n    }\n        \n    // gamma\n    color = sqrt(color);\n    \n    // output\n    fragColor = vec4(color, 1.0);\n    \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XtlGzf","date":"1423910531","viewed":142,"name":"Raytracing, 2 Spheres, 2 Lights","username":"chuckeles","description":"I added more spheres and more lights","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","spheres","lights"],"hasliked":0,"parentid":"","parentname":""}}