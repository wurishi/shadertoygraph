{"ver":"0.1","info":{"id":"M3VGzw","date":"1717452965","viewed":35,"name":"Eye Spirals","username":"ronangrant","description":"eye","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["eye"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Highly Detailed Eyeball Shader with Spirals\n\n// Function to create a 2D circle\nfloat circle(vec2 uv, vec2 center, float radius) {\n    return smoothstep(radius, radius - 0.01, length(uv - center));\n}\n\n// Function to create a radial gradient\nvec3 radialGradient(vec2 uv, vec2 center, float radius, vec3 innerColor, vec3 outerColor) {\n    float dist = length(uv - center) / radius;\n    return mix(innerColor, outerColor, dist);\n}\n\n// Function to create an iris pattern\nvec3 irisPattern(vec2 uv, vec2 center, float radius, vec3 baseColor) {\n    float dist = length(uv - center);\n    float angle = atan(uv.y - center.y, uv.x - center.x);\n    float pattern = sin(30.0 * angle + iTime) * cos(15.0 * dist) * 0.5 + 0.5;\n    return baseColor * pattern;\n}\n\n// Function to add shadows\nvec3 addShadows(vec3 color, vec2 uv, vec2 lightPos, float intensity) {\n    float shadow = smoothstep(0.0, 0.5, dot(normalize(uv - lightPos), vec2(0.0, -1.0)));\n    return mix(color, color * 0.5, shadow * intensity);\n}\n\n// Function to create spirals in the background\nvec3 spirals(vec2 uv) {\n    float angle = atan(uv.y, uv.x);\n    float radius = length(uv);\n    float spiral = sin(angle * 10.0 + radius * 10.0 - iTime * 2.0);\n    return vec3(0.1, 0.2, 0.3) * (spiral * 0.5 + 0.5);\n}\n\n// Improved function to add veins\nvec3 addVeins(vec2 uv, vec2 center) {\n    float dist = length(uv - center);\n    float veins = sin((uv.x + uv.y) * 40.0 + iTime * 2.0) * cos((uv.x - uv.y) * 40.0 + iTime * 2.0);\n    veins *= smoothstep(0.3, 0.4, dist);\n    veins = veins * 0.5 + 0.5; // Normalize to range [0, 1]\n    return mix(vec3(0.9, 0.9, 0.9), vec3(1.0, 0.2, 0.2), veins * 0.1); // Subtle red veins\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Define the eye properties\n    vec3 eyeColor = vec3(0.9, 0.9, 0.9);\n    vec3 irisInnerColor = vec3(0.1, 0.5, 0.7);\n    vec3 irisOuterColor = vec3(0.0, 0.2, 0.4);\n    vec3 pupilColor = vec3(0.0, 0.0, 0.0);\n    \n    float eyeRadius = 0.4;\n    float irisRadius = 0.2;\n    float pupilRadius = 0.08;\n\n    // Calculate the iris position\n    vec2 irisPos = vec2(sin(iTime) * 0.05, cos(iTime) * 0.05);\n\n    // Render the eyeball\n    vec3 color = eyeColor * circle(uv, vec2(0.0), eyeRadius);\n\n    // Add veins to the eyeball\n    color = mix(color, addVeins(uv, vec2(0.0)), circle(uv, vec2(0.0), eyeRadius));\n\n    // Render the iris with a radial gradient and pattern\n    vec3 irisColor = radialGradient(uv, irisPos, irisRadius, irisInnerColor, irisOuterColor);\n    irisColor = irisPattern(uv, irisPos, irisRadius, irisColor);\n    color = mix(color, irisColor, circle(uv, irisPos, irisRadius));\n\n    // Render the pupil\n    color = mix(color, pupilColor, circle(uv, irisPos, pupilRadius));\n\n    // Add shadows to the eyeball\n    vec2 lightPos = vec2(0.1, 0.1);\n    color = addShadows(color, uv, lightPos, 0.5);\n\n    // Add spirals to the background\n    vec3 backgroundColor = spirals(uv);\n    color = mix(backgroundColor, color, circle(uv, vec2(0.0), eyeRadius));\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}