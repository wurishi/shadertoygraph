{"ver":"0.1","info":{"id":"ttffDf","date":"1597910279","viewed":447,"name":"motion blur 3","username":"FabriceNeyret2","description":"Combine 2 motion blur technique: multisampling in time + relaxation with previous frame\nAlternate 3 modes: time relaxation only, multisampling only, both\nNB: here, blurring is exaggerated.","likes":15,"published":3,"flags":32,"usePreview":0,"tags":["raymarching","motionblur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, vec2 u ) { O = sqrt( T(u) ); }  // to sRGB","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define n          normalize\n#define d(a,b)     max( 0., dot(a,b) )\n#define hash(p,i)  fract(sin(dot(vec3(p,i), vec3(12.9898, 78.233, 1))) * 43758.5453)\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n  O -= O;\n  vec2 R = iResolution.xy; \n  float T = 20.,                                     // multisampling\n       dt = .1,                                      // blur span\n        r = 1.,                                      // fading prev frames\n        t = mod(iTime, 3.);                          // render mode\n  if (t<1.) T = 1., dt = 0., r=.1;                   // 0: multisampling off, fading on \n                                                     // 1: multisampling on,  fading off          \n  else if (t>2.)  r=.1;                              // 2: multisampling on,  fading on          \n \n  for(float k=0.; k++ < T; ) {                       // add rays of different time\n    float i = 0., d = 1., \n          t = 10.*( iTime + dt*hash(u,k) ),          // jitter time\n          c = .3;                                    // sphere radium\n      \n    vec3 N, L = n(vec3(1,2,-1)),                     // set scene\n         D = n( vec3( 2.*u - R, R.y ) +.1 ), P = D-D,// ray dir and pos\n         C = vec3(0,0,2)+ cos(t)*vec3(1,0,0) + sin(t)*vec3(0,.5,.87); // sphere center\n\n    for(; i++ < 99. && d > 1e-3; P += d*D )          // ray march\n        d = length(P-C) - c;                         // distance to sphere surface\n    \n    N = n(P-C);                                      // normal\n    O += i>99. ?   vec4(0,.5,1,0)                    // noHit\n               : ( .1 + .8* d(N,L) *vec4(1,0,0,0) + .8* pow( d(N,n(L-D)), 40.) ) // Phong\n                 * 3.; // compensate overtransparency due to exaggerated blur\n  }\n  O = mix( T(u), O/T, r);                            // slow fading\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define T(U) texelFetch( iChannel0, ivec2(U), 0)","name":"Common","description":"","type":"common"}]}