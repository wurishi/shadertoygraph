{"ver":"0.1","info":{"id":"cdjSRh","date":"1670411015","viewed":133,"name":"Multiple Texture Filters","username":"thewhiteambit","description":"Nearest neighbor texture filtering on first, Bilinear texture filtering in second, Lagrange Bicubic texture filtering on third, cubic hermite on the fourth, Catmull-Rom filtering on fifths.  Use the mouse to control pan / zoom.\n\nStolen/combined from other","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["catmullrom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define c_onePixel (1.0 / (c_textureSize - 0.0))\n#define c_twoPixels (2.0 / (c_textureSize - 0.0))\n\nfloat c_x0 = -1.0;\nfloat c_x1 =  0.0;\nfloat c_x2 =  1.0;\nfloat c_x3 =  2.0;\n    \n//=======================================================================================\nvec3 CubicLagrange (vec3 A, vec3 B, vec3 C, vec3 D, float t)\n{\n    return\n        A * \n        (\n            (t - c_x1) / (c_x0 - c_x1) * \n            (t - c_x2) / (c_x0 - c_x2) *\n            (t - c_x3) / (c_x0 - c_x3)\n        ) +\n        B * \n        (\n            (t - c_x0) / (c_x1 - c_x0) * \n            (t - c_x2) / (c_x1 - c_x2) *\n            (t - c_x3) / (c_x1 - c_x3)\n        ) +\n        C * \n        (\n            (t - c_x0) / (c_x2 - c_x0) * \n            (t - c_x1) / (c_x2 - c_x1) *\n            (t - c_x3) / (c_x2 - c_x3)\n        ) +       \n        D * \n        (\n            (t - c_x0) / (c_x3 - c_x0) * \n            (t - c_x1) / (c_x3 - c_x1) *\n            (t - c_x2) / (c_x3 - c_x2)\n        );\n}\n\n//=======================================================================================\nvec3 BicubicLagrangeTextureSample (vec2 P)\n{\n    vec2 pixel_full = P * vec2(textureSize(iChannel0,0)) - vec2(0.5, 0.5);\n    vec2 frac = fract(pixel_full);\n    vec2 pixel_floor = floor(pixel_full);\n    vec2 pixel_center = pixel_floor + vec2(0.5, 0.5);\n    vec2 pixel = pixel_center / vec2(textureSize(iChannel0,0));\n    \n    vec2 onePixelOffset = vec2(1.0, 1.0) / vec2(textureSize(iChannel0,0));\n    \n    vec3 C00 = texture(iChannel0, pixel - onePixelOffset).rgb;\n    vec3 C10 = texture(iChannel0, pixel + vec2( 0.0        ,-onePixelOffset.y)).rgb;\n    vec3 C20 = texture(iChannel0, pixel + vec2( onePixelOffset.x ,-onePixelOffset.y)).rgb;\n    vec3 C30 = texture(iChannel0, pixel + vec2( 2.0 * onePixelOffset.x,-onePixelOffset.y)).rgb;\n    \n    vec3 C01 = texture(iChannel0, pixel + vec2(-onePixelOffset.x , 0.0)).rgb;\n    vec3 C11 = texture(iChannel0, pixel + vec2( 0.0        , 0.0)).rgb;\n    vec3 C21 = texture(iChannel0, pixel + vec2( onePixelOffset.x , 0.0)).rgb;\n    vec3 C31 = texture(iChannel0, pixel + vec2( 2.0 * onePixelOffset.x, 0.0)).rgb;    \n    \n    vec3 C02 = texture(iChannel0, pixel + vec2(-onePixelOffset.x , onePixelOffset.y)).rgb;\n    vec3 C12 = texture(iChannel0, pixel + vec2( 0.0        , onePixelOffset.y)).rgb;\n    vec3 C22 = texture(iChannel0, pixel + onePixelOffset).rgb;\n    vec3 C32 = texture(iChannel0, pixel + vec2( 2.0 * onePixelOffset.x, onePixelOffset.y)).rgb;    \n    \n    vec3 C03 = texture(iChannel0, pixel + vec2(-onePixelOffset.x , 2.0 * onePixelOffset.y)).rgb;\n    vec3 C13 = texture(iChannel0, pixel + vec2( 0.0        , 2.0 * onePixelOffset.y)).rgb;\n    vec3 C23 = texture(iChannel0, pixel + vec2( onePixelOffset.x , 2.0 * onePixelOffset.y)).rgb;\n    vec3 C33 = texture(iChannel0, pixel + 2.0 * onePixelOffset).rgb;    \n    \n    vec3 CP0X = CubicLagrange(C00, C10, C20, C30, frac.x);\n    vec3 CP1X = CubicLagrange(C01, C11, C21, C31, frac.x);\n    vec3 CP2X = CubicLagrange(C02, C12, C22, C32, frac.x);\n    vec3 CP3X = CubicLagrange(C03, C13, C23, C33, frac.x);\n    \n    return CubicLagrange(CP0X, CP1X, CP2X, CP3X, frac.y);\n}\n\n//=======================================================================================\nvec3 CubicHermite (vec3 A, vec3 B, vec3 C, vec3 D, float t)\n{\n\tfloat t2 = t*t;\n    float t3 = t*t*t;\n    vec3 a = -A/2.0 + (3.0*B)/2.0 - (3.0*C)/2.0 + D/2.0;\n    vec3 b = A - (5.0*B)/2.0 + 2.0*C - D / 2.0;\n    vec3 c = -A/2.0 + C/2.0;\n   \tvec3 d = B;\n    \n    return a*t3 + b*t2 + c*t + d;\n}\n\n//=======================================================================================\nvec3 BicubicHermiteTextureSample (vec2 P)\n{\n    vec2 pixel_full = P * vec2(textureSize(iChannel0,0)) - vec2(0.5, 0.5);\n    vec2 frac = fract(pixel_full);\n    vec2 pixel_floor = floor(pixel_full);\n    vec2 pixel_center = pixel_floor + vec2(0.5, 0.5);\n    vec2 pixel = pixel_center / vec2(textureSize(iChannel0,0)) ;\n    \n    vec2 onePixelOffset = vec2(1.0, 1.0) / vec2(textureSize(iChannel0,0));\n    \n    vec3 C00 = texture(iChannel0, pixel - onePixelOffset).rgb;\n    vec3 C10 = texture(iChannel0, pixel + vec2( 0.0        ,-onePixelOffset.y)).rgb;\n    vec3 C20 = texture(iChannel0, pixel + vec2( onePixelOffset.x ,-onePixelOffset.y)).rgb;\n    vec3 C30 = texture(iChannel0, pixel + vec2( 2.0 * onePixelOffset.x,-onePixelOffset.y)).rgb;\n    \n    vec3 C01 = texture(iChannel0, pixel + vec2(-onePixelOffset.x , 0.0)).rgb;\n    vec3 C11 = texture(iChannel0, pixel + vec2( 0.0        , 0.0)).rgb;\n    vec3 C21 = texture(iChannel0, pixel + vec2( onePixelOffset.x , 0.0)).rgb;\n    vec3 C31 = texture(iChannel0, pixel + vec2( 2.0 * onePixelOffset.x, 0.0)).rgb;    \n    \n    vec3 C02 = texture(iChannel0, pixel + vec2(-onePixelOffset.x , onePixelOffset.y)).rgb;\n    vec3 C12 = texture(iChannel0, pixel + vec2( 0.0        , onePixelOffset.y)).rgb;\n    vec3 C22 = texture(iChannel0, pixel + onePixelOffset).rgb;\n    vec3 C32 = texture(iChannel0, pixel + vec2( 2.0 * onePixelOffset.x, onePixelOffset.y)).rgb;    \n    \n    vec3 C03 = texture(iChannel0, pixel + vec2(-onePixelOffset.x , 2.0 * onePixelOffset.y)).rgb;\n    vec3 C13 = texture(iChannel0, pixel + vec2( 0.0        , 2.0 * onePixelOffset.y)).rgb;\n    vec3 C23 = texture(iChannel0, pixel + vec2( onePixelOffset.x , 2.0 * onePixelOffset.y)).rgb;\n    vec3 C33 = texture(iChannel0, pixel + 2.0 * onePixelOffset).rgb;    \n    \n    vec3 CP0X = CubicHermite(C00, C10, C20, C30, frac.x);\n    vec3 CP1X = CubicHermite(C01, C11, C21, C31, frac.x);\n    vec3 CP2X = CubicHermite(C02, C12, C22, C32, frac.x);\n    vec3 CP3X = CubicHermite(C03, C13, C23, C33, frac.x);\n    \n    return CubicHermite(CP0X, CP1X, CP2X, CP3X, frac.y);\n}\n\n//=======================================================================================\n\n//note: see also http://www.decarpentier.nl/2d-catmull-rom-in-4-samples.\n\n// note: entirely stolen from https://gist.github.com/TheRealMJP/c83b8c0f46b63f3a88a5986f4fa982b1\n//\n// Samples a texture with Catmull-Rom filtering, using 9 texture fetches instead of 16.\n// See http://vec3.ca/bicubic-filtering-in-fewer-taps/ for more details\nvec4 CatmullRomTextureSample( vec2 uv )\n{\n    vec2 texSize = vec2(textureSize(iChannel0,0));\n    // We're going to sample a a 4x4 grid of texels surrounding the target UV coordinate. We'll do this by rounding\n    // down the sample location to get the exact center of our \"starting\" texel. The starting texel will be at\n    // location [1, 1] in the grid, where [0, 0] is the top left corner.\n    vec2 samplePos = uv * texSize;\n    vec2 texPos1 = floor(samplePos - 0.5) + 0.5;\n\n    // Compute the fractional offset from our starting texel to our original sample location, which we'll\n    // feed into the Catmull-Rom spline function to get our filter weights.\n    vec2 f = samplePos - texPos1;\n\n    // Compute the Catmull-Rom weights using the fractional offset that we calculated earlier.\n    // These equations are pre-expanded based on our knowledge of where the texels will be located,\n    // which lets us avoid having to evaluate a piece-wise function.\n    vec2 w0 = f * ( -0.5 + f * (1.0 - 0.5*f));\n    vec2 w1 = 1.0 + f * f * (-2.5 + 1.5*f);\n    vec2 w2 = f * ( 0.5 + f * (2.0 - 1.5*f) );\n    vec2 w3 = f * f * (-0.5 + 0.5 * f);\n    \n    // Work out weighting factors and sampling offsets that will let us use bilinear filtering to\n    // simultaneously evaluate the middle 2 samples from the 4x4 grid.\n    vec2 w12 = w1 + w2;\n    vec2 offset12 = w2 / w12;\n\n    // Compute the final UV coordinates we'll use for sampling the texture\n    vec2 texPos0 = texPos1 - vec2(1.0);\n    vec2 texPos3 = texPos1 + vec2(2.0);\n    vec2 texPos12 = texPos1 + offset12;\n\n    texPos0 /= texSize;\n    texPos3 /= texSize;\n    texPos12 /= texSize;\n\n    vec4 result = vec4(0.0);\n    result += texture(iChannel0, vec2(texPos0.x,  texPos0.y)) * w0.x * w0.y;\n    result += texture(iChannel0, vec2(texPos12.x, texPos0.y)) * w12.x * w0.y;\n    result += texture(iChannel0, vec2(texPos3.x,  texPos0.y)) * w3.x * w0.y;\n\n    result += texture(iChannel0, vec2(texPos0.x,  texPos12.y)) * w0.x * w12.y;\n    result += texture(iChannel0, vec2(texPos12.x, texPos12.y)) * w12.x * w12.y;\n    result += texture(iChannel0, vec2(texPos3.x,  texPos12.y)) * w3.x * w12.y;\n\n    result += texture(iChannel0, vec2(texPos0.x,  texPos3.y)) * w0.x * w3.y;\n    result += texture(iChannel0, vec2(texPos12.x, texPos3.y)) * w12.x * w3.y;\n    result += texture(iChannel0, vec2(texPos3.x,  texPos3.y)) * w3.x * w3.y;\n\n    return result;\n}\n\n//note: uniform pdf rand [0;1[\nvec3 hash32n(vec2 p)\n{\n\tp  = fract(p * vec2(5.3987, 5.4421));\n    p += dot(p.yx, p.xy +  vec2(21.5351, 14.3137));\n\treturn fract(vec3(p.x * p.y * 95.4307, p.x * p.y * 97.5901, p.x * p.y * 93.8369));\n}\n\n//=======================================================================================\nvec3 BilinearTextureSample (vec2 P)\n{\n    vec2 pixel_full = P * vec2(textureSize(iChannel0,0)) - vec2(0.5, 0.5);\n    vec2 frac = fract(pixel_full);\n    vec2 pixel_floor = floor(pixel_full);\n    vec2 pixel_center = pixel_floor + vec2(0.5, 0.5);\n    vec2 pixel = pixel_center / vec2(textureSize(iChannel0,0)) ;\n    \n    vec2 onePixelOffset = vec2(1.0, 1.0) / vec2(textureSize(iChannel0,0));\n\n    vec3 C11 = texture(iChannel0, pixel + vec2( 0.0        , 0.0)).rgb;\n    vec3 C21 = texture(iChannel0, pixel + vec2( onePixelOffset.x , 0.0)).rgb;\n    vec3 C12 = texture(iChannel0, pixel + vec2( 0.0        , onePixelOffset.y)).rgb;\n    vec3 C22 = texture(iChannel0, pixel + vec2( onePixelOffset.x , onePixelOffset.y)).rgb;\n\n    vec3 x1 = mix(C11, C21, frac.x);\n    vec3 x2 = mix(C12, C22, frac.x);\n    return mix(x1, x2, frac.y);\n}\n\n//=======================================================================================\nvec3 NearestTextureSample (vec2 P)\n{\n    vec2 pixel = P * vec2(textureSize(iChannel0,0));\n    \n    vec2 frac = fract(pixel);\n    pixel = (floor(pixel) / vec2(textureSize(iChannel0,0)));\n    vec2 onePixelOffset = vec2(vec2(1.0, 1.0) / vec2(textureSize(iChannel0,0)));\n    return texture(iChannel0, pixel + 0.5 * onePixelOffset).rgb;\n}\n\n\n//=======================================================================================\n\n//modified from https://www.shadertoy.com/view/ltfXWS, tested a few different versions of this same function and this one seemed to have the nicest results\nvec4 NearestTextureSample2DAA(sampler2D tex, vec2 uv) {\n    vec2 texsize = vec2(textureSize(tex,0));\n    vec2 uv_texspace = uv*texsize;\n    vec2 seam = floor(uv_texspace+.5);\n    uv_texspace = (uv_texspace-seam)/fwidth(uv_texspace)+seam;\n    uv_texspace = clamp(uv_texspace, seam-.5, seam+.5);\n    return texture(tex, uv_texspace/texsize);\n}\n\n//=======================================================================================\nvoid AnimateUV (inout vec2 uv)\n{\n    float rotation = iMouse.x * 0.001;\n    if (iMouse.z > 0.0)\n    {\n        uv -= vec2(0.0,0.5) * iResolution.y / iResolution.x;\n        float rotation = iMouse.x * 0.001;\n        uv = vec2(sin(rotation)*uv.x + cos(rotation) * uv.y, -cos(rotation)*uv.x + sin(rotation) * uv.y );\n        uv *= vec2(10.0 * iMouse.y / iResolution.y);\n        uv += vec2(1.5 * iMouse.x / iResolution.x, 0.0);\n        \n    }\n    else\n    {   \n        uv = vec2(sin(iTime * 0.1)*uv.x + cos(iTime * 0.1) * uv.y, -cos(iTime * 0.1)*uv.x + sin(iTime * 0.1) * uv.y );\n    \tuv += vec2(sin(iTime * 0.3)*0.5+0.5, sin(iTime * 0.7)*0.5+0.5);\n    \tuv *= (sin(iTime * 0.3)*0.5+0.5)*3.0 + 0.2;\n        \n    }\n}\n\n//=======================================================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // set up our coordinate system\n    float aspectRatio = iResolution.y / iResolution.x;\n    vec2 uv = (fragCoord.xy / iResolution.xy);\n    uv.y *= aspectRatio;\n    \n    // do our sampling\n    vec3 color;\n    if (abs(uv.x - (1.0/5.0)) < 0.0025)\n    {\n        color = vec3(1.0);\n    }   \n    else if (abs(uv.x - (2.0/5.0)) < 0.0025)\n    {\n        color = vec3(1.0);\n    }          \n    else if (abs(uv.x - (3.0/5.0)) < 0.0025)\n    {\n        color = vec3(1.0);\n    }   \n    else if (abs(uv.x - (4.0/5.0)) < 0.0025)\n    {\n        color = vec3(1.0);\n    }   \n    else if (uv.x < (1.0/5.0))\n    {\n        AnimateUV(uv);\n        //color = NearestTextureSample(uv);\n        color = NearestTextureSample2DAA(iChannel0, uv).rgb;\n    }\n    else if (uv.x < (2.0/5.0))\n    {\n        uv -= vec2((1.0/5.0),0.0);\n        AnimateUV(uv);\n        //color = texture(iChannel0, uv).xyz;\n        color = BilinearTextureSample(uv);\n    }\n    else if (uv.x < (3.0/5.0))\n    {\n        uv -= vec2((2.0/5.0),0.0);\n        AnimateUV(uv);\n        color = BicubicLagrangeTextureSample(uv);\n    }\n    else if (uv.x < (4.0/5.0))\n    {\n        uv -= vec2((3.0/5.0),0.0);\n        AnimateUV(uv);\n        color = BicubicHermiteTextureSample(uv);\n\t}\n    else\n    {\n        uv -= vec2((4.0/5.0),0.0);\n        AnimateUV(uv);\n        color = CatmullRomTextureSample(uv).rgb;\n\t}\n    \n    // set the final color\n\tfragColor = vec4(color,1.0);    \n}\n","name":"Image","description":"","type":"image"}]}