{"ver":"0.1","info":{"id":"7dS3z3","date":"1617724648","viewed":423,"name":"Space warp","username":"forij","description":"Simple space warp shader","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["space","warp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float speed = 10.0;\nfloat frequency = 10.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float t = iTime * speed;\n    vec2 position = (fragCoord.xy - iResolution.xy * .5) / iResolution.x;\n   \n    float angle = atan(position.y, position.x) / (2. * 3.14159265359);\n    angle -= floor(angle);\n    float rad = length(position);\n    float angleFract = fract(angle * 256.);\n    float angleRnd = floor(angle * 100.) + 1.;\n    float angleRnd1 = fract(angleRnd * fract(angleRnd * .7235) * 45.1);\n    float angleRnd2 = fract(angleRnd * fract(angleRnd * .82657) * 13.724);\n    float t2 = t + angleRnd1 * frequency;\n    float radDist = sqrt(angleRnd2);\n    float adist = radDist / rad * .1;\n     float dist = (t2 * .1 + adist);\n    dist = abs(fract(dist) - 0.5);\n    \n    float outputColor = (1.0 / (dist)) * cos(0.7 ) * adist / radDist / 30.0;\n    angle = fract(angle + .61);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    fragColor = vec4(outputColor * col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}