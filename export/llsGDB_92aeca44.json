{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Blackbody Color Shader\n\n// Written By: Nicholas Whitney\n\n// Modification: Used alternate equations for color. Seems to be more accurate.\n\n// Licensed and released under Creative Commons 3.0 Attribution\n// https://creativecommons.org/licenses/by/3.0/\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nfloat timeFactor = 30.;\n\n// Temperature range in Kelvins from minTemp to maxTemp. \n// The equations are fitted to a minimum of 1,500 K and a maximum temp of 15,000K.\n\n// Minimum temperature to represent.\nfloat minTemp = 1500.;\n\n// Maximum temperature to represent.\nfloat maxTemp = 15000.;\n\nfloat calcRed(float temp) {\n\t\n\tfloat red; \n\t\n\tif ( temp <= 6600. ) {\n\t\t\n\t\tred = 1.;\n\t}\n\telse {\n\t\ttemp = temp - 6000.;\n\t\t\n\t\ttemp = temp / 100.;\n\t\t\n\t\tred = 1.29293618606274509804 * pow(temp, -0.1332047592);\n\t\t\n\t\tif (red < 0.) {\n\t\t\tred = 0.;\n\t\t}\n\t\telse if (red > 1.) {\n\t\t\tred = 1.;\n\t\t}\n\t}\n\t\n\treturn red;\n}\n\nfloat calcGreen(float temp) {\n\t\n\tfloat green; \n\t\n\tif ( temp <= 6600. ) {\n\t\ttemp = temp / 100.;\n\t\t\n\t\tgreen = 0.39008157876901960784 * log(temp) - 0.63184144378862745098;\n\t\t\n\t\tif (green < 0.) {\n\t\t\tgreen = 0.;\n\t\t}\n\t\telse if (green > 1.) {\n\t\t\tgreen = 1.;\n\t\t}\n\t}\n\telse {\n\t\ttemp = temp - 6000.;\n\t\t\n\t\ttemp = temp / 100.;\n\t\n\t\tgreen = 1.12989086089529411765 * pow(temp, -0.0755148492);\n\t\t\n\t\tif (green < 0.) {\n\t\t\tgreen = 0.;\n\t\t}\n\t\telse if (green > 1.) {\n\t\t\tgreen = 1.;\n\t\t}\n\t}\n\t\n\treturn green;\n}\n\nfloat calcBlue(float temp) {\n\t\n\tfloat blue;\n\t\n\tif ( temp <= 1900. ) {\n\t\tblue = 0.;\n\t}\n\telse if ( temp >= 6600.) {\n\t\tblue = 1.;\n\t}\n\telse {\t\n\t\ttemp = temp / 100.;\n\t\t\n\t\tblue = .00590528345530083 * pow(temp, 1.349167257362226); // R^2 of power curve fit: 0.9996\n\t\tblue = 0.54320678911019607843 * log(temp - 10.0) - 1.19625408914;\n\t\t\n\t\tif (blue < 0.) {\n\t\t\tblue = 0.;\n\t\t}\n\t\telse if (blue > 1.) {\n\t\t\tblue = 1.;\n\t\t}\n\t}\n\t\n\treturn blue;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 position = ( fragCoord.xy / iResolution.xy );\n\t\n\tfloat temp = minTemp + position.x * (maxTemp - minTemp);\n\t\n\tvec3 color = vec3(0.);\n\t\n\tif (position.y > .85) {\n\t\tcolor = vec3( calcRed(temp), 0., 0.);\n\t}\n\telse if (position.y > .7) {\n\t\tcolor = vec3( 0., calcGreen(temp), 0.);\n\t}\n\telse if (position.y > .55) {\n\t\tcolor = vec3( 0., 0., calcBlue(temp));\n\t}\n\telse if (position.y > .3) {\n\t\tcolor = vec3(calcRed(temp), calcGreen(temp), calcBlue(temp));\n\t}\n\telse {\n\t\tfloat calcTemp = mod(( iTime / timeFactor), 1.);\n\t\ttemp = minTemp + calcTemp * maxTemp;\n\t\t\n\t\tcolor = vec3(calcRed(temp), calcGreen(temp), calcBlue(temp));\n\t}\n\t\n\tvec3 lineColor = vec3(0.);\n\t\n\tif ((position.x > mod((iTime / timeFactor), 1.)) \n        && (position.x < mod((iTime / timeFactor) + (2. / iResolution.x), 1.))) \n    {\t\n\t\tlineColor = vec3(1.);\n\t}\n\t\n\tif (position.y > 0.3){\n\t\tcolor += lineColor;\n\t}\n\t\n\tfragColor = vec4( color , 1.0 );\n\t\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"llsGDB","date":"1424992381","viewed":873,"name":"Blackbody Radiation","username":"Razaekel","description":"Blackbody Radiation spectra, broken into RGB components.\n\nThis is also at a constant brightness, and doesn't take into account the shifting of blackbody radiation into the infrared or UV regions at the lower or upper temperature ranges.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","blackbody"],"hasliked":0,"parentid":"","parentname":""}}