{"ver":"0.1","info":{"id":"lcKXDh","date":"1715138290","viewed":91,"name":"Fork Rotating Rect","username":"chenxiang","description":"Simple rotating rectangles.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["rotate","rectangle"],"hasliked":0,"parentid":"wdfBWn","parentname":"Rotating Rect"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ROT(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n//#define ROT(a) mat2(cos(a + vec4(0, 11, 33, 0)))\n\n#ifdef UNIFORM_PARAM\n\nuniform int layers; //[1,16,50]\n\nuniform float speed; //[0.1,1.5,8.0]\n\n#else\n\nconst int layers = 16;\n\nconst float speed = 1.5;\n\n#endif\n\nfloat sdfRect(vec2 p, float a)\n{\n    vec2 q = abs(p) - a;\n    return length(max(q, 0.0)) + min(max(q.x, q.y), 0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 R = iResolution.xy;\n    vec2 u = fragCoord / R;\n    vec2 p = (fragCoord - 0.5 * R) / min(R.x, R.y);\n    vec2 m = (iMouse.xy - 0.5 * R) / min(R.x, R.y);\n\n    vec3 col = vec3(0);\n\n    float aa = 0.1 / min(R.x, R.y);\n    float tt = iMouse.z <= 0.0 ? iTime : 4.0 * m.x;\n    \n    float st = 0.5 / float(layers);\n    for (float i = 0.0; i <= 1.0; i += st)\n    {\n        vec2 pp = p * ROT(speed * cos(tt + i * 4.0));\n\n        float d = sdfRect(pp, 0.5 - i) - st;\n        col += smoothstep(aa, 0.0, d) * i;\n    }\n\n    col = sqrt(col * 0.2);\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}