{"ver":"0.1","info":{"id":"7sGyz3","date":"1672732080","viewed":147,"name":"vector_field23","username":"edwardbraed","description":"Vector field (clickable)","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["field","vector"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aX = iResolution.x / iResolution.y;\n    \n    vec2 auv = vec2(uv.x * aX, uv.y);\n    \n    vec2 grs = 1.0 / FIELD_SIZE;\n    vec2 agrs = vec2(grs.x / aX, grs.y);\n    \n    vec2 rpos = floor(auv / grs) * grs + grs * 0.5;\n    \n    vec2 vf = texture(iChannel0, vec2(rpos.x / aX, rpos.y)).xy * VEC_LENGTH;\n    vec3 col = mix(COLOR_A, COLOR_B, min(distance(auv, rpos) / length(vf), 1.0));\n                   \n    float res = drwLine(auv, rpos, rpos + vf, VEC_WIDTH / iResolution.y);\n\n    fragColor = vec4(col* 2.0 * res, 1.0);\n    //fragColor = vec4(abs(vf)* 20.0, vec2(0.0)) * 2.0; //dbg\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float aX = iResolution.x / iResolution.y;\n    vec2 auv = vec2(uv.x * aX, uv.y);\n    \n    vec2 res  = texelFetch(iChannel0, ivec2(fragCoord), 0).xy;\n    \n    vec2 cPos = iMouse.xy / iResolution.xy;\n    if(iMouse.z < 1.0)\n        cPos = drwInf(iTime * 6.0, vec2(0.2, 0.4)) + 0.5;\n    cPos.x *= aX;\n    \n    float ln = (1.0 - distance(auv, cPos) / PEN_SIZE);\n    if(ln > 0.01)\n    {\n        float mg = ln*ln*ln * mix(1.0, 2.0, float(iMouse.z < 1.0));\n        vec2 vm = normalize(cPos - auv) * mg;\n        res = clamp(res + (INVERT_MAGNET ? -vm : vm), -1.0, 1.0);\n    }\n        \n    res = mix(res, vec2(0.0), DECAY_RATE);\n\n    fragColor = vec4(res, 0.0, 0.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define FIELD_SIZE vec2(40.0)\n#define PEN_SIZE 0.2\n#define VEC_WIDTH 2.0\n#define VEC_LENGTH 0.010\n#define INVERT_MAGNET true\n#define DECAY_RATE 0.05\n#define COLOR_A vec3(0.0, 0.0, 1.0)\n#define COLOR_B vec3(0.0, 1.0, 0.0)\n\n//thanks: https://www.shadertoy.com/view/XtdGW4\nfloat drwLine(vec2 uv, vec2 a, vec2 b, float sz) \n{ \n    vec2 ab = b - a, ap = uv - a;\n    float seg = length(ap - ab * clamp(dot(ab, ap) / dot(ab, ab), 0.0, 1.0));\n    return smoothstep(sz, 0.0, abs(seg));\n}\n\nvec2 drwInf(float t, vec2 sz)\n{\n    return vec2((sz.x * sqrt(2.0) * cos(t)) / (1.0 + pow(sin(t), 2.0)),\n                (sz.y * sqrt(2.0) * sin(t) * cos(t)) / (1.0 + pow(sin(t), 2.0)));\n}","name":"Common","description":"","type":"common"}]}