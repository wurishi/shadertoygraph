{"ver":"0.1","info":{"id":"NldGzN","date":"1672601540","viewed":153,"name":"ca ","username":"Carandiru","description":"ca","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["ca"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    float t = textureLod(iChannel0, uv, 0.0f).r;\n    \n    \n    vec3 color;\n\n    color = vec3(t);\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define bits (8u)\nconst float rule[bits] = float[bits]( 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0 );\n\nfloat state(in float p, in float c, in float n)\n{\n    uint d = 0u;\n    \n    d |= uint(bool(p)) << 2u;\n    d |= uint(bool(c)) << 1u;\n    d |= uint(bool(n)) << 0u;\n    \n    return rule[7u - d];\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 auto = vec2(0);\n    \n    vec2 bn = textureLod(iChannel0, fragCoord/1024.0f, 0.0f).rg;\n    \n    if (iFrame < 10) {\n        \n        uvec2 uuv = uvec2(fragCoord.xy);\n        \n        auto.x = rule[uuv.x & (bits - 1u)];\n        auto.y = 1.0f - rule[uuv.y & (bits - 1u)];\n    }\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    float c = textureLod(iChannel0, uv, 0.0f).r;\n    \n    float yp = textureLodOffset(iChannel0, uv, 0.0f, ivec2(0, 1)).r;\n    float yn = textureLodOffset(iChannel0, uv, 0.0f, ivec2(0,-1)).r;\n\n    float xp = textureLodOffset(iChannel0, uv, 0.0f, ivec2( 1, 0)).r;\n    float xn = textureLodOffset(iChannel0, uv, 0.0f, ivec2(-1, 0)).r;\n\n    auto.x += state(xp, c, xn);\n    auto.y += state(yp, c, yn);\n    \n    float t = 0.5f;//round(fract(iTime * float(iFrame)));\n    \n    vec4 ii_iv;\n    ii_iv.x = mix(yp, auto.x, uv.y - t / iResolution.y);\n    ii_iv.y = mix(xp, auto.y, uv.x - t / iResolution.x);\n    ii_iv.z = mix(yn, auto.x, 1.0f - (uv.y - t / iResolution.y));\n    ii_iv.w = mix(xn, auto.y, 1.0f - (uv.x - t / iResolution.x));\n    vec4 i_iii;\n    i_iii.x = mix(yp, auto.x, uv.y - t / iResolution.y);\n    i_iii.y = mix(xp, auto.y, uv.x - t / iResolution.x);\n    i_iii.z = mix(yn, auto.x, 1.0f - (uv.y - t / iResolution.y));\n    i_iii.w = mix(xn, auto.y, 1.0f - (uv.x - t / iResolution.x));\n    \n    auto.x = min(ii_iv.x, ii_iv.z) + min(ii_iv.y, ii_iv.w);\n    auto.y = min(i_iii.x, i_iii.z) + min(i_iii.y, i_iii.w);\n    \n    //auto.x = min(auto.x, min(ii_iv.x, ii_iv.w) + min(ii_iv.z, ii_iv.y));\n    //auto.y = min(auto.y, min(i_iii.x, i_iii.w) + min(i_iii.z, i_iii.y));\n    \n    //auto.x = abs(auto.x - auto.y);\n    //auto.x = mix(auto.x, auto.y, 0.5);\n    auto.x = auto.x + auto.y;\n    \n    fragColor = vec4(auto.x,0.0,0.0,0.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define PI (3.141592654f)\n\nfloat bellcurve(float x) // 0..1 input to 0..1 output\n{\n    // mu is 0.0 (centered), sigma is 0.5\n    const float c = float(PI / -1.25331414f); // optimized magic value - bellcurve perfect match (to six digits of precision) - removes sqrt\n                                            // https://www.desmos.com/calculator/xxwdiqa4sk\n    x = 2.0f * (2.0f * x - 1.0f);  // converts input range\n\n    return(exp(x * x * c));\n}","name":"Common","description":"","type":"common"}]}