{"ver":"0.1","info":{"id":"7sSSDW","date":"1621520149","viewed":184,"name":"block dithering","username":"barakooda","description":"block dithering","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//block dithering 2021 by Barakooda.\n\n// click on the image and move the mouse along the x axis.\n\n//General notes.\n// 1.Buffer B process the texture in iChannel0 to WB texture and interpolate to any resoultion.\n// 2.Buffer A generate block average pixel value at center of block.\n// 3. final Image fill the tiles with the avreage value.\n//    the average value used as threshold for the step funciton.\n// use the common tab for playing with the paramters.\n\n//black and white\n//http://www.glbasic.com/forum/index.php?topic=8025.0\n\n\n\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 index = ivec2(fragCoord);\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    \n    \n    \n    float block_sizeFloat = float(block_size); \n    \n    int block_size_div_2 = block_size / 2;\n    vec2 fract_uv = fract(vec2(index) / vec2(tile_size));\n    \n    vec4 BufferA = vec4(0.0);\n    vec4 temp = vec4(0.0);\n    \n    if ( IsCenterOfBlock(index ,block_size,iResolution) )  \n    {\n    \n   \n        temp = texture(iChannel1,uv);\n    \n    }\n    \n    else {// else\n         \n         \n         ivec2 BottomLeftCorner = index - ivec2(block_size_div_2);\n         ivec2 TopRightCorner = index + ivec2(block_size_div_2);\n         \n         for (int index_x = BottomLeftCorner.x;index_x < TopRightCorner.x;index_x++){ // for 1\n             for (int index_y = BottomLeftCorner.y;index_y < TopRightCorner.y;index_y++){ //for 2\n           \n                 ivec2 block_index = ivec2(index_x,index_y);\n                 \n                if ( IsCenterOfBlock(block_index ,block_size,iResolution) )\n                     \n                        {\n                        \n                            temp = texelFetch(iChannel1,block_index,0);\n                            \n                        }\n            \n            }  // end for 2      \n         }  // end for 1\n     /*   \n    */\n    } // end else\n    \n    // Output to screen\n    temp = vec4( step( 1.0 - temp.x,texture(iChannel3,fract_uv).x ) );\n    \n\n    float dithered = step(mouse.x,uv.x);\n    \n    vec4 rgb = texture(iChannel0,uv) ;\n\n    BufferA = mix(temp,rgb,dithered);\n    fragColor = BufferA;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":3,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    ivec2 index = ivec2(fragCoord);\n    vec2 uv = fragCoord/iResolution.xy;\n    \n\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    float block_sizeFloat = float(block_size) * 0.5; \n    \n    int block_size_div_2 = block_size / 2;\n   \n    vec4 image = vec4(0.0);\n \n     if (IsCenterOfBlock(index ,block_size,iResolution) )\n    {\n        \n         ivec2 BottomLeftCorner = index - ivec2(block_size_div_2);\n         ivec2 TopRightCorner = index + ivec2(block_size_div_2);\n         \n         for (int index_x = BottomLeftCorner.x;index_x < TopRightCorner.x;index_x+=2){\n             for (int index_y = BottomLeftCorner.y;index_y < TopRightCorner.y;index_y+=2){\n           \n                 ivec2 block_index = ivec2(index_x,index_y);\n             \n                 image = image + texelFetch(iChannel2,block_index,0);\n          }       \n         }\n\n    }\n    \n    image = vec4(intensity * image.r / (block_sizeFloat * block_sizeFloat));\n    \n    fragColor = image;\n}\n\n\n\n ","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // coord index to normalized 0-1 space\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    //sample from iChannel0 which contain texture\n    vec4 pixel = texture(iChannel0,uv);\n    \n    //convert to WB image\n    float grayPixel = max( pixel.r,max(pixel.g,pixel.b ) );\n    \n    //buffer output\n    fragColor = vec4(grayPixel);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float intensity = 1.0 ;\nint block_size = 16; // block size for averaging\nint tile_size = 16;\n\n\n\n\nbool IsCenterOfBlock( ivec2 index ,int block_size,vec3 iResolution )\n{\n\n    int block_size_div_2 = block_size / 2;\n   \n   if ( (index % ivec2(block_size) == ivec2(0)) &&\n       (index.x >= block_size_div_2) && \n       (index.y >= block_size_div_2) &&\n       (index.x <= int(iResolution.x) - block_size_div_2) &&\n       (index.y <= int(iResolution.y) - block_size_div_2)\n       )  \n    {\n        return true;\n    }\n    \n    else{\n        return false;\n    }\n\n\n    \n}","name":"Common","description":"","type":"common"}]}