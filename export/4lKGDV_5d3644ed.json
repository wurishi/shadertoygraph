{"ver":"0.1","info":{"id":"4lKGDV","date":"1476900012","viewed":511,"name":"RGB Histogram EQ","username":"ttoinou","description":"Reset time for synchronization ! (2 frames late btw). Horizontal click for reducing the effect of EQ (click to the right = original video). Vertical click for changing gamma (top = 2.2 = histogram in linear space, bottom = 1.)","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["stats","data","histogram","rvb","equalization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define sourceGamma    (mix(1.,2.2,iMouse.y/iResolution.y))\n#define histogramCoeff (1. - iMouse.x/iResolution.x)\n\n#define min3(a,b,c)     (min( (a) , min( (b) , (c) ) ))\n#define minvec3(x)     (min3( (x).r , (x).g , (x).b ))\n#define pow3(x,y)      (pow( max(x,0.) , vec3(y) ))\n\n#define histogramMargin  (0.05) \t\t// == 0. <=> black and white are perfectly at the left and the right\n#define histogramLineSmooth  (3./255.)\n#define histogramLineBlack  (0.5)\n#define histogramGain    (iResolution.y*0.9)\n\nvec4 histogramLookup(float x){\n    return texture(iChannel0,vec2(x,0.))/texture(iChannel0,vec2(1.,0.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 original = texture(iChannel1,uv).rgb;\n    \n    // ungamma\n    fragColor = vec4(pow3( original , sourceGamma ),1.);\n    \n    fragColor.r = histogramLookup(fragColor.r).r;\n    fragColor.g = histogramLookup(fragColor.g).g;\n    fragColor.b = histogramLookup(fragColor.b).b;\n    \n    // regamma\n    fragColor.rgb = pow3( fragColor.rgb , 1./sourceGamma );\n    \n    fragColor.rgb = mix(original,fragColor.rgb,histogramCoeff);\n    \n    // show histogram\n    float H = iChannelResolution[0].y;\n    \n    vec3 bars;\n    // next 2 lines to show histogram and not cumulated histogram\n    //float pos = pow(uv.x,sourceGamma);\n    //bars = 0.2*iChannelResolution[0].x*( histogramLookup(pos) - histogramLookup(pos-1./iChannelResolution[0].x) ).rgb*histogramGain/(3.*H) - vec3(0.,-1./3.,-2./3.) + vec3(0.01);\n    bars = histogramLookup(pow(uv.x,sourceGamma)).rgb*histogramGain/(3.*H) - vec3(0.,-1./3.,-2./3.) + vec3(0.01);\n    bars = (1. - abs( (bars - uv.y) / histogramLineSmooth ));\n    fragColor.rgb += clamp(bars.rgb,0.,1.);\n    \n    float black = (1. - minvec3( abs(bars) )/histogramLineBlack);\n    fragColor *= 1. - clamp( black , 0. , 1. );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define sourceGamma    (mix(1.,2.2,iMouse.y/iResolution.y))\n#define smooth         (1./1024.)\n#define maxWidth       (640)\n#define maxHeight      (360)\n#define pow3(x,y)      (pow( max(x,0.) , vec3(y) ))\n#define PI             (3.14159265359)\n#define smoothTimeCoeff (0.2)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 histogramValue = vec3(uv.x);\n    vec3 histogram = vec3(0.);\n    vec2 pos;\n    \n    vec2 thisWH = iChannelResolution[0].xy;\n    float thisH = thisWH.y;\n    \n    vec2 sourceWH = iChannelResolution[1].xy;\n    float sourceW = sourceWH.x;\n    \n    if( fragCoord.y < 1. ){\n        fragColor = vec4(0.);\n    \tvec4 k;\n        \n        for( int i = 1 ; i < maxHeight ; i++ ){\n            if( float(i) < thisH ){\n                pos = vec2(fragCoord.x,float(i))/thisWH;\n                k = texture(iChannel0,pos);\n                fragColor += k;\n            }\n        }\n        \n        //fragColor /= thisH;\n        fragColor.rgb = mix(fragColor.rgb,texture(iChannel0,uv).rgb,smoothTimeCoeff);\n        \n    } else {\n    \tvec3 k;\n\n        for( int i = 0 ; i < maxWidth ; i++ ){\n            if( float(i) < sourceW ){\n                pos = vec2(float(i),fragCoord.y)/sourceWH;\n                k = texture(iChannel1,pos).rgb;\n                // ungamma\n                k = pow3( k , sourceGamma ) - histogramValue;\n                histogram += 0.5 + 0.5*cos(clamp(k/smooth,0.,1.)*PI);\n            }\n        }\n\n        fragColor = vec4(histogram/sourceW,1.);\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}