{"ver":"0.1","info":{"id":"4cdSRS","date":"1714068867","viewed":152,"name":"kaleidoscope1.0","username":"oliver0zzx","description":"kaleidoscope","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t) {\n    vec3 a = vec3(0.6, 0.6, 0.6);\n    vec3 b = vec3(0.8, 0.8, 0.8);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n\n   \n    vec2 squareCenter = vec2(0.0, 0.0);\n    float squareSize = 0.5;\n\n    \n    float numAxes = 7.0;\n\n    for (float i = 0.0; i < numAxes; i++) {\n     \n        float angle = i * (3.14159 / numAxes);\n        vec2 rotatedUV = vec2(cos(angle) * uv.x - sin(angle) * uv.y,\n                               sin(angle) * uv.x + cos(angle) * uv.y);\n\n        \n        vec2 symUV = fract(rotatedUV * 1.5) - 0.5;\n\n       \n        vec2 scaledUV = uv0 * 0.5;\n\n       \n        float squareUV = max(abs(symUV.x), abs(symUV.y));\n\n        float d = squareUV * exp(-length(scaledUV) * 0.8); \n      \n        vec3 col = palette(length(scaledUV) + i * 0.3 + iTime * 0.4 + sin(iTime + i));\n\n        d = sin(d * 12.0 + iTime) / 6.0;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n      \n        if (abs(symUV.x) < squareSize && abs(symUV.y) < squareSize) {\n            finalColor += col * d;\n        }\n    }\n\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}