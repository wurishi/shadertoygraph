{"ver":"0.1","info":{"id":"dtcXzf","date":"1685650120","viewed":40,"name":"patrón ondulado con variación al","username":"Crofts","description":"patrón ondulado con variación aleatoria","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["patrnonduladoconvariacinaleatoria"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Define los colores del patrón\n    vec3 color1 = vec3(0.2, 0.8, 0.4);\n    vec3 color2 = vec3(0.8, 0.4, 0.2);\n    \n    // Define los parámetros del patrón\n    float frequency = 100.0 * sin(iTime);\n    float amplitude = 1. * -sin(iTime);\n    \n    \n    \n    // Calcula la posición normalizada del píxel\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // Calcula la coordenada y desplazada por una función senoidal y el tiempo\n    float offset = sin(uv.x * frequency + iTime) * amplitude;\n    vec2 displacedUV = vec2(uv.x , uv.y + offset);\n    \n    // Interpola los colores según la coordenada desplazada\n    vec3 finalColor = mix(color1, color2, displacedUV.y);\n    \n    // Asigna el color al fragmento\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}