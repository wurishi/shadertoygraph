{"ver":"0.1","info":{"id":"MdcXR8","date":"1457575598","viewed":1536,"name":"Renderbuffer noise","username":"KylBlz","description":"This program uses perlin noise to generate a height map for the water. The main image uses the stone texture as a height map. The latest change from line 40 - 65 is using a difference of normals to achieve some ghetto AO for the rocks.","likes":28,"published":1,"flags":32,"usePreview":1,"tags":["procedural","fractal","noise","water","heightmap","stones"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define tex(a,b) textureLod(a,b,0.)\n\nfloat waterStrength = 2.;\nfloat waterDye = 0.075;\nfloat sin120 = 0.86602540378;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 px = 2. / iResolution.xy,\n         uv = fragCoord.xy * px * 0.5,\n         time = vec2(0., iTime * 0.05),\n         uvtime = uv + time;\n    \n    vec2 mouse = (iMouse.z > 0.)? iMouse.xy / iResolution.xy: vec2(.5);\n    \n    //p123 is sampling the water (render buffer A)\n    vec3 p1 = vec3(uv, tex(iChannel0, uv).r);\n    uv.x += px.x;\n    vec3 p2 = vec3(uv, tex(iChannel0, uv).r);\n    uv.x -= px.x;\n    uv.y += px.y;\n    vec3 p3 = vec3(uv, tex(iChannel0, uv).r);\n    uv.y -= px.y;\n    \n    //height map value\n    float rockHeight = tex(iChannel1, uvtime).r,\n    \t  //water height value\n          waterHeight = p1.z,\n          //depth of water\n    \t  depth = clamp(waterHeight - rockHeight, 0., 1.);\n    \n    //calculate surface normal of water\n  \tvec3 norm = cross(p2-p1, p3-p1);\n    norm.z *= 50./waterStrength;\n    //calculate specular\n    float reflection = smoothstep(0.994, 1.0, refract(-normalize(norm), normalize(vec3(uv - mouse, -1.)), 0.6).z);\n  \t//get a less extreme surface normal\n    norm.z *= ((1. - depth) * 50.)/waterStrength;\n\tnorm = normalize(norm);  \n    //distort with water\n    vec2 displacement = norm.xy * float(int(waterHeight > rockHeight));\n    \n    //r0123 is sampling rock height map\n    vec3 r0 = vec3(uv, tex(iChannel1, uvtime + displacement).r);\n    \n    //sample equalateral triangle around initial point\n    uv.y += px.y;\n    p1 = vec3(uv, tex(iChannel1, uv + time + displacement).r);\n    \n    //down 0.75 pixels\n    uv.y -= px.y * 1.5;\n    //right a sin120 pixel\n    uv.x += px.x * sin120;\n    p2 = vec3(uv, tex(iChannel1, uv + time + displacement).r);\n    \n    //left two sin120 pixels\n    uv.x -= px.x * sin120 * 2.;\n    p3 = vec3(uv, tex(iChannel1, uv + time + displacement).r);\n    \n    //get the rocks surface normal\n    vec3 rockNorm = normalize(cross(p2-p1, p3-p1) * vec3(1., 0.5, 1.));\n    \n    //fine detail calculation\n    vec3 norm1 = normalize(cross(p1-r0, p2-r0));\n    vec3 norm2 = normalize(cross(p2-r0, p3-r0));\n    vec3 norm3 = normalize(cross(p3-r0, p1-r0));\n    \n    //oh baby\n    float AOfactor = 2.0 - sqrt(length(rockNorm*3.0 - (norm1+norm2+norm3)));\n    \n    //rock brightness, clamp at -.2 to overexpose rocks a bit\n\tfloat rockDiffuse = 0.3 + clamp(reflect(rockNorm, normalize(vec3(uv - mouse, -1.))).z, -.2, 1.),\n          lightPow = 1.5 - distance(uv, mouse);\n    \n\t//sample height map at calculated place and tiem\n\tvec2 smp = uvtime + rockNorm.xy * 0.01;\n    \n\t//rock texture * brightness * diffuse + brightness\n\tfragColor = vec4((tex(iChannel2, smp).rgb + 0.2) *\n                     (tex(iChannel3, smp).rgb + 0.2) *\n                     rockDiffuse * AOfactor * p1.z * lightPow\n                     , 1.);\n    \n    //get local max for noise function and assume its always wet\n \n    //draw water\n    if (waterHeight > rockHeight) {\n        //enhance contrast for 'wet' surfaces\n        fragColor = fragColor * 1.2 - 0.1;\n        //calculate a color that is more blue as depth increases\n    \tvec3 color = vec3(rockHeight + 0.5 - waterDye * 2., rockHeight + 0.6 - waterDye, max(rockHeight + 0.4, rockHeight + 0.6) + waterDye);\n        //sample height map at calculated place and tiem\n        float amb = 0.8 - p1.z;\n        //new blending eq\n\t\tfragColor.rgb = fragColor.rgb * (color + amb) + (color * lightPow * lightPow * 0.2) + reflection * (lightPow * 2. - 1.75);   \n    }      \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// GLSL textureless classic 2D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec2 P)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;  \n  g01 *= norm.y;  \n  g10 *= norm.z;  \n  g11 *= norm.w;  \n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = (vec4(vec3(cnoise(uv.xy*20. + vec2(0.,iTime)) * 0.5 + 0.5),1.0) +\n        texture(iChannel0, 1. - uv)) * 0.5;\n}","name":"Buffer A","description":"","type":"buffer"}]}