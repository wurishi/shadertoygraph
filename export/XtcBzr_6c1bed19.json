{"ver":"0.1","info":{"id":"XtcBzr","date":"1538453548","viewed":170,"name":"Intrinsic Gravity Colors","username":"digital","description":"A recreation of one of my favorite scenes from Intrinsic Gravity.\nhttps://www.youtube.com/watch?v=-ZxPhDC-r3w","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n\nfloat sdCircle( vec2 p, float r )\n{\n \tfloat param = 1.0 - (length(p) - r);\n    \n    param = smoothstep(0.0, 0.1, param);\n    return param;;\n}\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 scene(vec2 uv, float time)\n{\n    float dist = (2.97 - 2.97*cos(min(PI,time)))/2.0;\n    float radius = 0.500; // circles just touching\n    float circles = 12.0;\n    float alpha = 0.20; // color intensity\n    \n    radius += smoothstep(4.6, 5.0, time)*0.615 +\n        smoothstep(6.5, 6.7, time)*0.47 + \n        smoothstep(8.5, 8.7, time)*0.57 + \n        smoothstep(9.5, 12.0, time)*12.0;\n    \n    vec3 col = vec3(0.0);\n    \n    for(int i = 0; i < int(circles); i++) {\n        float x = dist*cos(2.0*PI*float(i)/circles);\n        float y = dist*sin(2.0*PI*float(i)/circles);\n        vec2 pos = uv/0.1;\n        pos.x += x;\n        pos.y += y;\n        float hue = float(i)/circles;\n        \n        float sdf = clamp(sdCircle(pos, radius), 0.0, alpha);\n        col = col + hsv2rgb(vec3(hue, 0.8, sdf));\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5*iResolution.xy) / iResolution.y;\n    uv *=1.20;\n    \n    float period = 23.0;\n    float rot = iTime*0.2;\n    uv *= mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n    \n    float time = mod(iTime, period);\n    \n    vec3 white = scene(uv, time);\n    vec3 black = vec3(1.0) - scene(uv, time-period/2.0);\n    \n    // fade in the first pass and fade back to normal state on last pass\n    white =  mix(vec3(0.0), white,\n                 smoothstep(0.0, 1.0,time) -\n                 smoothstep(period-1.0, period,time)\n                );\n    \n    // transition between \"scenes\"\n    vec3 col = mix(white, black, smoothstep(0.0, 0.1, -sin(2.0*PI*time/period)));\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}