{"ver":"0.1","info":{"id":"XdyfDm","date":"1531048856","viewed":168,"name":"Implicit function plotter.","username":"olympus223","description":"Plots an implicit function. There is still some work to be done, sharp edges don't get rendered correctly.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","function","plot","implicit","plotter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.141592;\nconst float TWOPI = 6.283184;\nconst float eps = 0.005;\nconst float scale = 15.0;\nconst float speed = 5.0;\nconst float thickness = 0.1;\n\n// Color values\nfloat hue = 0.0;\nfloat saturation = 1.0;\nfloat brightness = 0.0;\n\nfloat map(float x, float in_min, float in_max, float out_min, float out_max) {\n  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n   \nfloat f(float x, float y) { \n    //return sin(x+iTime)-y;\n\treturn sin(x + sin(y + y * sin(x + iTime)));\n    //return mod(y-sin(x), 1.0);\n    //return y - x;\n    //return sin(x-y-x*y+iTime)-y + sin(x + sin(y + y*sin(x + 2.0*iTime)));\n}\n\nfloat gx(float x, float y) {\n\tfloat dx = f(x + eps, y) - f(x - eps, y);\n    return dx / 2.0 / eps;              \n}\n\nfloat gy(float x, float y) {\n    float dy = f(x, y + eps) - f(x, y - eps);\n    return dy / 2.0 / eps;              \n}\n\nfloat dxy(float x, float y) {\n    float gx = gx(x, y);\n    float gy = gy(x, y);\n\treturn f(x, y) / sqrt(gx * gx + gy * gy);\n}\n\nfloat coverage(float dist, float radius) {\n\tradius *= 0.5;\n\treturn 1.0 - smoothstep(floor(radius), radius, dist);\n}\n\n\nbool eq(float v, float e, float eps) {\n    return v > e - eps && v < e + eps;\n}\n\nvec3 hsb_rgb(vec3 color) {\n    const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(color.xxx + K.xyz) * 6.0 - K.www);\n    return color.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), color.y);\n}\n\nvoid drawFunction(float x, float y) {\n\tfloat dxy = dxy(x, y);\n    if (eq(dxy, 0.0, thickness)) {\n    \thue = map(x + iTime, -scale / 2.0, scale / 2.0, 0.0, 1.0);\n    \tbrightness = coverage(dxy, thickness) - 0.2;\n    \tsaturation = 1.0;        \n        /*if (eq(x,sin(iTime) * scale / 2.2,1.0)) {\n            brightness += 0.2;   \n        }*/\n    } \n}\n\nvoid taylor(float x0, float y0) {\n    float f = f(x0, y0);\n    float df = -gx(x0, y0) / gy(x0, y0);\n    \n}\n\nvoid line(float x, float y, float x0, float y0, float dxdy) {\n\tfloat f = y0 + dxdy * (x - x0) - y;   \n    float dxy =  f / sqrt(1.0 + dxdy * dxdy);\n\n    if (eq(dxy, 0.0, thickness)) {\n    \thue = map(x + iTime, -scale / 2.0, scale / 2.0, 0.0, 1.0);\n    \tbrightness = coverage(dxy, thickness) - 0.2;\n    \tsaturation = 1.0;        \n    } \n}\n\nvoid circle(float x, float y, float x0, float y0, float r) {\n    if (eq((x - x0) * (x - x0) + (y - y0) * (y - y0), 0.0, r)) {\n    \tbrightness = 1.0;\n    \tsaturation = 0.0;        \n    } \n}\n\nvoid drawAxes(float x, float y) {\n    float axesThickness = 0.02;\n    if (\n        eq(x, 0.0, axesThickness) ||\n        eq(y, 0.0, axesThickness) ||\n        eq(x * x + y * y, 0.0, axesThickness) ||\n        (eq(mod(x, 1.0), 0.0, axesThickness) && eq(y, 0.0, 6.0 * axesThickness)) ||\n        (eq(mod(y, 1.0), 0.0, axesThickness) && eq(x, 0.0, 6.0 * axesThickness))\n    ) {\n    \tbrightness = 1.0;\n        saturation = 0.0;\n    }\n}\n                   \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    \n    // Remap coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n   \tfloat aspect = iResolution.y / iResolution.x;\n    float x = (uv.x - 0.5) * scale;\n    float y = (uv.y - 0.5) * scale * aspect;\n    \n    // Draw axes\n    drawAxes(x, y);\n    \n    // Draw function\n    float x0 = 0.0;\n    float y0 = sin(iTime);\n    drawFunction(x, y);\n    \n    /*float g = 1.0;\n    hue = map(mod(abs(f(x, y)), g), 0.0, g, 0.0, 1.0);\n    brightness = 1.0;*/\n    \n\tfragColor = vec4(hsb_rgb(vec3(hue, saturation, brightness)), 1.0);\n}","name":"Image","description":"","type":"image"}]}