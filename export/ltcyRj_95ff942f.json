{"ver":"0.1","info":{"id":"ltcyRj","date":"1533152475","viewed":202,"name":"Voronoi smooth","username":"darkeclipz","description":"Another Voronoi where the color is based on the distance, and a color map.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float seed = 52452.0;\nfloat random() {\n\treturn fract( sin( seed++ * 4871452.47 ) * 87175.89 );\n}\n\n#define N 64\n#define t iTime\n\nvec3 cmap(float x) {\n    \n    vec3 c = vec3(0);\n    \n    c = mix( c, vec3(1, 1, 1), smoothstep(0.0, 0.2, x) );\n    c = mix( c, vec3(1, .5, .0), smoothstep(0.2, 0.4, x) );\n    c = mix( c, vec3(1, .7, 0), smoothstep(0.4, 0.6, x) );\n    c = mix( c, vec3(1., 1., 1.), smoothstep(0.6, 0.8, x) );\n    c = mix( c, vec3(0., 0, 0), smoothstep(0.8, 1.0, x) );\n    \n    return c;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //fragColor = vec4( cmap( fragCoord.x/iResolution.x ), 0);\n    //return;\n    \n    // Rescale.\n    vec2 R = iResolution.xy;\n    vec2 uv = (2.*fragCoord-R)/R.y;\n    vec2 M = (2.*iMouse.xy-R)/R.y;\n    \n    // Colors.\n    vec3 col = vec3(0);\n    \n    // Location of each points (x, y)\n    vec2 points[N];\n    \n    // Distance to the closest point from uv.\n    float minDist = 0.0;\n    \n    // Index of the closest point.\n\tint minN = 0;\n    \n    float maxDist = 0.;\n    \n    for(int i=0; i < N; i++) {\n                \n        // Create a random point.\n        points[i] = 2. * vec2(2.*random()-.5, random()) - 1.;\n        \n        // Override this with two circling points.\n        if(i == N-1) points[i] = .8*vec2(cos(t/4.), sin(t/4.));\n        if(i == N-2) points[i] = .4*vec2(cos(-t/2.), sin(-t/2.));\n        \n        // Distance from uv to the created point.\n        float d = distance(points[i], uv);\n        \n        // if min dist = 0, this is the first point, so we use that.\n        if(minDist == 0.0) minDist = d;\n        \n        // Save the closest point.\n        minDist = min(minDist, d);\n        maxDist = max(maxDist, d);\n        \n        // Store the index.\n        if(minDist == d) minN = i;    \n        \n    }\n    \n    float d = 0.0125/minDist;\n     \n    // Get a color for the cell.\n    col = cmap( d );\n\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}