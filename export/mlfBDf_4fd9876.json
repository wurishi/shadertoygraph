{"ver":"0.1","info":{"id":"mlfBDf","date":"1695945964","viewed":27,"name":"my basic sun","username":"jaafarodgers","description":"sun 2.0 moving and flaring sun","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = iMouse.xy/iResolution.xy; // normalized mouse coords [0,1]\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //vec2 uv = (fragCoord.xy-iResolution.xy) / iResolution.y\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    \n    // remaps the uv to a coordinate system from -1 to 1\n    vec2 coords = (uv - 0.5) * 2.;\n    // remaps coordinates to [-2,2]\n    coords *= 2.;\n    \n    // remap coordinates to reflect aspect ratio (now the coords [-2,2] are square, not skewed in a rectangle)\n    //coords *= vec2(iResolution.x/iResolution.y, 1.);\n    coords *= vec2(1., iResolution.y/iResolution.x);\n    \n    // give color to gradient\n    coords += vec2(cos(iTime)*3.,sin(iTime)*3.+3.);\n    float gradient = length(coords);\n    \n    // creates a color with range 0-1\n    //vec3 col = sin(uv.xyx * vec3(1,0,1) + (vec3(.5,0,.5)) + vec3(1,0,5))*.5+.5;\n    //col = vec3(gradient*col.x, gradient*col.y, gradient*col.z);\n    vec3 col = vec3(1, 1, gradient*2.);\n    \n    //vec3 col = vec3(0., 0., gradient+.1*sin(iTime));\n    //vec3 col;\n    // set to black when for x range\n    \n    if (length(coords) > 0.5) col = vec3(vec2(((sin(iTime/1.5)+.1)*.1)+(1.-gradient+.44)), 1);\n    //vec3 sunColor = col;\n    //col = vec3(0.0);\n    //coords /= vec2(1., iResolution.y/iResolution.x);\n    //if (length(coords + vec2(sin(iTime*10.),sin(iTime*9.))) < .2) col = vec3(1.0);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    //vec3 m = mix(vec3(1.,0.,0.), vec3(0.,0.,1.), mod(iTime/2., 1.));\n    //vec3 m = mix(vec3(1.,0.,0.), vec3(0.,0.,1.), sin(iTime)*.5+.5);\n    //fragColor = vec4(m, 1.0);\n    \n    // [1.5,.5] <-> [1.5,1.5]\n    //fragColor = vec4(vec2(((sin(iTime*10.)+mouse.x)*mouse.y)+(1.-gradient+.5)), 0,1.);\n    //fragColor = vec4(mouse, 0., 1.);\n    \n}","name":"Image","description":"","type":"image"}]}