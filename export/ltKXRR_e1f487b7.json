{"ver":"0.1","info":{"id":"ltKXRR","date":"1482575094","viewed":166,"name":"Tessellated","username":"alytile","description":"Tessellated","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#version 150\n//https://www.shadertoy.com/view/ltKXRR\n#define SHADER_SHADERTOY 0\n#define SHADER_VSCODE 1\n#define SHADER_HTML 2\n#define SHADER_KODELIFE 3\n\n#if __VERSION__ != 150\n#define SHADER SHADER_SHADERTOY\n//#define SHADER SHADER_VSCODE\n//#define SHADER SHADER_HTML\n#else\n#define SHADER SHADER_KODELIFE\n#endif\n\n#if SHADER == SHADER_VSCODE\n#define texture vec4(0);\n#endif\n#if SHADER == SHADER_HTML\n#define texture texture2D\n#endif\n#if SHADER == SHADER_KODELIFE\n#define texture vec4(0);\nout vec4 fragColor;\n#endif\n#if SHADER >= SHADER_HTML\nuniform float time;uniform vec2 mouse, resolution;uniform vec3 spectrum;uniform sampler2D texture0, texture1, texture2, texture3, prevFrame;\n#define iResolution resolution\n#define iTime time\n#define iMouse mouse\n#define iChannel0 texture0\n#define iChannel1 texture1\n#define iChannel2 texture2\n#define iChannel3 texture3\n#endif\n\n\nconst float maxiter=256.;\nconst float pi = 4.0*atan(1.,1.);\nconst float pi2 = pi*2.;\nconst float degree = 2.0;\nconst float ratio = 1.;\nconst float ratiopi2 = ratio*pi2;\nconst float bailout = exp(ratiopi2);\nconst float speed = -0.65;\nconst float scale = 1.5;\n\nconst float pxa = 0.07;\nconst float pxb = 0.225;\nconst float pxc = 0.75;\nconst float pxd = 0.9;\nconst float pxw = (pxb-pxa)/(pxc-pxb);\nconst float pxz = (pxd-pxc)/(pxc-pxb);\nconst float pxv = pxz/(1.+pxw+pxz);\n\nconst float pyb = 0.27;\nconst float pyc = 0.70;\nconst float pyd = 0.78;\nconst float pyz = (pyd-pyc)/(pyc-pyb);\nconst float pyv = pyz/(1.+pyz);\n\nvec2 transNyanCat(vec2 pos, float time) {\n \tpos.x = pos.x*40.0/256.0;\n\tpos.y = 0.5 + 1.2*(0.5-pos.y);\n\tpos = clamp(pos,0.0,1.0);\n\tfloat fr = floor( mod( 20.0*time, 6.0 ) );\n\tpos.x += fr*40.0/256.0;           \n    return pos;\n}\nvec4 getNyanCatColor( vec2 p, float time)\n{\n\tp = clamp(p,0.0,1.0);\n    \n    vec4 txtr = vec4(1.,1.,1.,1.);\n    if (p.x <= pxz ) {\n        vec2 r =  vec2(p.x/pxv, p.y);\n        r.x = mix(pxc, pxd, r.x);\n        r.y = mix(pyb, pyc,r.y);\n        r = transNyanCat(r, time);\n  \t    txtr = texture( iChannel0, r );    \n       if (!(txtr.x==1. && txtr.y==1. && txtr.z==1. )) {\n           return txtr;\n       }\n    }\n    if ( p.y <= pyv) {\n        vec2 q = vec2(mod(p.x*2.,1.), p.y/pyv);\n        q.x = mix(pxb, pxc, q.x); // intentinally shoten to avoid conflict\n        q.y = mix(pyc, pyd, q.y);\n        q = transNyanCat(q, time);\n  \t    txtr = texture( iChannel0, q );\n       if (!(txtr.x==1. && txtr.y==1. && txtr.z==1. )) {\n          return txtr;\n       }\n    }\n    p.x = mix(pxb, pxc, p.x);\n    p.y = mix(pyb, pyc, p.y);   \n    p = transNyanCat(p, time);\n\ttxtr = texture( iChannel0, p );\n    return txtr;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n    float iter=0.;\n    float near = 0.0000005;\n    float mod_iter;\n    float intensity;\n    float dist;\n    vec2 q = vec2(-0.100398, 0.752054 );\n\tvec2 z =  scale*(2.*fragCoord.xy /iResolution.y-vec2(iResolution.x/iResolution.y,1.));\n    vec2 uv=2.*iMouse.xy /iResolution.y-vec2(iResolution.x/iResolution.y,1.);\n    if(iMouse.xy==vec2(0.))\n        uv=vec2(-0.1,0.75);\n    bool bailed=false;\n    for(float i = 0.;i<maxiter;i++)\n    {\n        iter=i;\n        \n        z=z*mat2(z*vec2(1,-1),z.yx)+uv;\n        dist = distance(z,q);\n        if (dist< near) {\n            bailed = true;\n            break;\n        }\n    }\n    if (bailed==false) {\n        fragColor = vec4(0);\n        return;\n    }\n    mod_iter = mod(iter,3.);\n    intensity = (iter-mod_iter)*5./maxiter;\n    if (mod_iter==0.) {\n         fragColor = vec4(intensity,0.,0.0,1.0);\n    } else if (mod_iter==1.) {\n         fragColor = vec4(0.,intensity,0.,1.0);\n    } else if (mod_iter==2.) {\n         fragColor = vec4(0.,0.,intensity,1.0);\n    }\n        \n    /*\n    float cx = atan(z.y,z.x);\n    float cy = log(length(z));\n\n    cx += speed*time*pow(degree,iter);\n    */\n    /*\n    float red = mod(cy/(ratiopi2),1.);\n    float green = 0.;\n    float blue  = mod(cx/(2.*pi),1.);\n#if SHADER == SHADER_HTML\n\t    fragColor = vec4(red,0.,blue,1.0);\n        //fragColor = getNyanCatColor(vec2(blue,red),time); \n#elif SHADER == SHADER_SHADERTOY\n    \n\t    fragColor = vec4(red,0.,blue,1.0);\n        //fragColor = getNyanCatColor(vec2(blue,red),time);    \n#else\n\t    fragColor = vec4(red,0.,blue,1.0);\n#endif\n\t*/\n\n}\n\n#if SHADER != SHADER_SHADERTOY\nvoid main(void)\n{\n#if SHADER <= SHADER_HTML\n    vec4 fragColor = vec4(0);\n#endif\n    mainImage(fragColor,gl_FragCoord.xy);\n#if SHADER <= SHADER_HTML\n    gl_FragColor = fragColor;\n#endif\t\n}\n#endif","name":"Image","description":"","type":"image"}]}