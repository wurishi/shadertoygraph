{"ver":"0.1","info":{"id":"fsfyR4","date":"1641824264","viewed":70,"name":"Radial Density","username":"lordjone","description":"used to calculate radial density through spherical lines","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["radial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat GetMaxDistance(vec2 po, vec2 referenceCenter)\n{\n    vec2 dir = normalize(po - referenceCenter);\n    vec2 p = referenceCenter;\n    vec2 q = p + 3.0f * dir;\n\n    float a = pow(q.x - p.x, 2.0f) + pow(q.y - p.y, 2.0f); \n    float b = 2.0f*(q.x -p.x)*p.x + 2.0f*(q.y -p.y)*p.y;\n    float c = p.x*p.x + p.y*p.y - 1.0f;\n\n    float delta = sqrt(b*b -4.0f*a*c);\n    \n    float t = 2.0f*c /(-b -delta);\n    return length(t*(q-p));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv*2.0f - vec2(1.0f,1.0f);\n\n    float speed = 0.3f;\n    vec2 origin = vec2(0.0f,0.0f);\n    vec2 center = vec2(mix(-0.5f, 0.5f, 0.5f*cos( speed* iTime) + 0.5f),mix(-0.5f, 0.5f,  0.5f*cos( speed* iTime) + 0.5f) );\n    //vec2 center = vec2(0.0f,0.75f);\n    //float maxDistance = mix(1.0f, 2.0f, clamp(distance(origin, center), 0.0f, 1.0f));\n    \n    float dcenter = distance(uv, center);\n    float dorigin = distance(uv, origin);\n        \n    float mask = step(dorigin, 1.0f);\n    \n    float col = 1.0f -dcenter / GetMaxDistance(uv, center);\n    \n    //float col = 1.0f- dcenter;\n    //float col = 1.0f- min(maxDistance, dcenter)/maxDistance;\n\n    //col *= 1.0f-dorigin;\n    //col *= mask;\n\n    // Output to screen\n    fragColor = vec4(col,col,col,1.0);\n}","name":"Image","description":"","type":"image"}]}