{"ver":"0.1","info":{"id":"4fSBR3","date":"1725222797","viewed":22,"name":"regular temperament phase space","username":"saezhe","description":"2d regular temperament phase space","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["xenharmonics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// inputs arithmetic ratios\nfloat centserror(float a, float b) {\n    return 1200.0*(log2(b)-log2(a));\n}\n\n// function source: https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // finding bearings and reference points for positioning the frame with respect to the screen resolution\n    float displaySquareSize = min(iResolution.x,iResolution.y);\n    vec2 displaySquarePixelsOffset = (iResolution.xy-vec2(displaySquareSize,displaySquareSize))/2.0;\n    // the bottom left here will actually be the bottom left of the center-square area on screen.\n    \n    // pan/zoom display settings\n    \n    vec2 bottomLeftRep = vec2(465.0,0.0);\n    float squareSizeRep = 1200.0;\n    \n    // pan from 600cents being in the middle\n    //vec2 pan = bottomleftrep+squaresizerep/2.0-vec2(600.0,600.0);\n    //float zoom = 1200.0/squaresizerep;\n    \n    // alternate settings order:\n    //vec2 pan = (0.0,0.0);\n    //float zoom = 1.0;\n    //vec2 bottomleftrep = vec2(600.0,600.0)-vec2(600.0,600.0)/zoom+pan;\n    //float squaresizerep = 1200.0/zoom;\n    \n    // other helpful values\n    //vec2 toprightrep = bottomleftrep+squaresizerep\n    //vec2 midpointrep = bottomleftrep+squaresizerep/2.0\n    \n    // calculation of local coordinates\n    \n    // local coordinates with the middle square being from 0 to 1\n    vec2 frag = (fragCoord-displaySquarePixelsOffset)/displaySquareSize;\n    // zoomed and panned interval cent-size coords\n    vec2 cents = bottomLeftRep+frag*squareSizeRep;\n    //float centsTotal = centscartesian.x+centscartesian.y;\n    vec2 arith = vec2(pow(2.0,(cents.x/1200.0)),pow(2.0,(cents.y/1200.0)));\n    \n    // target scale setup\n    \n    float targetScaleRaw[9] = float[9](8.,9.,10.,11.,12.,13.,14.,15.,16.);\n    float targetScale[9] = targetScaleRaw;\n    // setup of possible linear combinations lattice\n    \n    // hexagonally layed out lattice of interval-multipliers\n    int n = 8; // max reach along one axis the hexagon extends\n    // number of points in the lattice\n    int latticePointsN = 3*n*(n+1)+1;\n    \n    \n    float val = centserror(arith.x,arith.y)/1200.0;\n    vec3 col = vec3(val, val, val);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}