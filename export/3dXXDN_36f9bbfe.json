{"ver":"0.1","info":{"id":"3dXXDN","date":"1551272781","viewed":193,"name":"TorusKnot 2","username":"gaz","description":"3d","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["knot","raymarchig"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotate(float a)\n{\n    float s=sin(a),c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat deTorus(vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat lengthN(vec2 p, float n)\n{\n\tp = pow(abs(p), vec2(n));\n\treturn pow(p.x+p.y, 1.0/n);\n}\n\nvec3 knot(float t)\n{\n  t *= 6.283;\n\treturn vec3(\n    sin(t)+2.0*sin(2.0*t),\n    cos(t)-2.0*cos(2.0*t),\n    -sin(3.0*t)\n  );\n}\n\nvec3 torusKnot(float t)\n{\n    //return knot(t);\n    t *= 6.283;\n    vec3 p = 0.6*vec3(cos(t*5.0),sin(t*5.0),0);\n    p.x += 1.5;\n    p.xz *= rotate(t*3.0);\n    return p;\n}\n\nfloat deTorusKnot(vec3 p)\n{\n    float ITR = 40.0, pitch = 1.0, t = 0.5, de = 1e10;   \n    for(int j=0; j<2; j++)\n    {\n        float t0 = t-pitch*0.5;\n        pitch /= ITR;\n        for(float i=0.0; i<=ITR; i++) \n        {\n            t0 += pitch;\n            float de0 = distance(p,torusKnot(t0));\n            if (de0<de)\n            {\n                de = de0;\n                t=t0;\n            }       \n        }\n    }\n    vec3 u = normalize(torusKnot(t));\n    vec3 v = normalize(torusKnot(t+0.01)-torusKnot(t-0.01));\n    vec3 w = normalize(cross(u,v));\n    u = cross(v,w);\n    p -= torusKnot(t);\n    p = vec3(dot(p,w), dot(p,u), dot(p,v));       \n    return lengthN(vec2(length(p.yz), p.x), 3.0)-0.25;\n}\n\nfloat map(in vec3 p)\n{   \n    p.xz *= rotate(iTime*0.3);\n    p.xy *= rotate(iTime*0.5);\n    return  deTorusKnot(p);\n    return  min(deTorusKnot(p),deTorus(p,vec2(1.5,0.12)));\n}\n\nvec3 calcNormal(in vec3 p)\n{\n    vec2 e = vec2(1,-1)*0.05;\n    return normalize(\n        e.xyy*map(p+e.xyy)+e.yyx*map(p+e.yyx)+ \n        e.yxy*map(p+e.yxy)+e.xxx*map(p+e.xxx));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    vec2 q = fract(abs(uv*0.5)+iTime*0.2+vec2(0,0.6));\n    vec3 col = 0.3* textureLod(iChannel0, \n    \t5.0 * vec2(1.0/length(uv), atan(q.y,q.x) * 0.8),\n        0.0).xyz;\n    col = pow(col,vec3(1.5,0.8,0.7));\n    col *= smoothstep(-1.0, 2.5, length(uv));\n    vec3 ro = vec3(\n        sin(iTime*0.3+0.3*sin(iTime*0.3)),\n        cos(iTime*0.2+0.5*cos(iTime*0.8)), \n        6.0+2.0*sin(iTime*0.4+0.7*sin(iTime*0.7)));\n    vec3 rd = normalize(vec3(uv, -2.0));\n    float ITR=100.0, t=0.0, d, a=1.0, maxd=20.0, st=1.0/ITR;\n    for(float i = 0.0; i < ITR; i++)\n    {\n        t += d = map(ro+rd*t);\n        if(d<0.001 || t>maxd) break;\n        a -= st;\n    }\n    if(t<maxd)\n    {\n        vec3 p = ro+t*rd;\n     \tvec3 li = normalize(vec3(1));\n        vec3 nor = calcNormal(p);\n\t\tcol = vec3(0.9, 0.4, 0.2);\n        col *= a*a*a; \n\t    col *= clamp(dot(nor,li),0.4,1.0);\n        col *= max(0.5+0.5*nor.y,0.0);\n        col += pow(clamp(dot(reflect(rd, nor),li),0.0,1.0),80.0);\n        col = pow(col,vec3(0.6));\n    }\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}