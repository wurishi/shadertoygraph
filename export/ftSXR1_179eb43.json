{"ver":"0.1","info":{"id":"ftSXR1","date":"1627030792","viewed":129,"name":"Voronoi Archipelago [Raymarched]","username":"Hamish","description":"A 3D Raymarched version of a previous 2D shader of mine, 'Voronoi Archipelago'.\nMy first published Raymarched shader","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","noise","raymarch","simplex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define UI0 1597334673U\n#define UI1 3812015801U\n#define UI2 uvec2(UI0, UI1)\n#define UIF (1.0 / float(0xffffffffU))\n\n#define STEPINTERSECT 20\n#define STEPSOFTSHADOW 10\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nvec4 smin(vec4 a, vec4 b, float k) {\n    float h = clamp(0.5 + 0.5*(a.x-b.x)/k, 0.0, 1.0);\n    return vec4(mix(a.x, b.x, h) - k*h*(1.0-h),mix(a.yzw, b.yzw, h) - k*h*(1.0-h));\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404;\n    const float K2 = 0.211324865;\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvec4 minWithColor(vec4 obj1, vec4 obj2) {\n  if (obj2.x < obj1.x) return obj2;\n  return obj1;\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 0.3*iTime + 10.0*mouseX;\n\tcamPos = vec3(3.5-.5*iTime,0.5,-1.0+sin(iTime));\n    camTar = vec3(0.0-.5*iTime,-2.5,-1.0+cos(iTime));\n}\n\nvec3 doBackground( in float x )\n{\n    vec3 skyCol = mix(vec3(0.45,0.62,0.96),vec3(0.01,0.37,0.82),x);\n    return skyCol;\n}\n    \nvec4 doModel( vec3 p )\n{\n    vec2 st = vec2(p.x*10.,p.z*10.);\n    vec2 i_st = floor(st); vec2 f_st = fract(st);    \n    \n    float m_dist = 10.;\n    vec2 m_point;       \n\n    for (int j=-1; j<=1; j++ ) {\n        for (int i=-1; i<=1; i++ ) {\n            vec2 neighbor = vec2(float(i),float(j));\n            vec2 point = random2(i_st + neighbor);\n            point = 0.6 + 0.4*sin(iTime + 10.*point);\n            vec2 diff = neighbor + point - f_st;\n            float dist = length(diff);\n\n            if( dist < m_dist) {\n                m_dist = dist;\n                m_point = point;\n            }\n        }\n    }\n    \n    vec3 colorbackground = vec3(0.);\n   \tcolorbackground.r += dot(0.5*m_point,vec2(.1,.1));\n  \tcolorbackground.g += dot(0.5*m_point,vec2(.3,.2));   \n    colorbackground.b += dot(0.5*m_point,vec2(.8,.7));\n    \n    vec4 planeIsland = vec4(p.y +0.1 + 0.25*noise(vec2(p.x,p.z)),mix(vec3(0.15,0.35,0.15),vec3(.225,.2,.15),1.-(p.y-2.0*noise(vec2(p.x,p.z)))));\n    vec4 planeRocks = vec4(p.y +.2 + 0.25*noise(vec2(p.z,p.x)),mix(vec3(0.3,0.3,0.3),vec3(.2,.2,.2),1.-(p.y-2.0*noise(vec2(p.x,p.z)))));\n    vec4 planeSea = vec4(p.y-0.001*0.8*sin(iTime)+0.01*noise(vec2(p.z + 0.3*iTime,p.x + 0.3*iTime)),colorbackground);\n    vec4 a = smin(planeIsland, planeRocks, 0.3);\n    vec4 b = minWithColor(a, planeSea);\n    return b;\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )\n{\n    vec3 lin = vec3(0.0);\n\n    vec3  lig = normalize(vec3(0.3,0.7,0.9));\n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.02*nor, lig );\n    lin += dif*vec3(2.00,2.00,2.00)*sha;\n\n    lin += vec3(0.50,0.50,0.50);\n\n    vec3 col = mal*lin;\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 20.0;           \n\tconst float precis = 0.001;        \n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<STEPINTERSECT; i++ )\n    {\n        if( h<precis||t>maxd ) break;\n\t    h = (doModel( ro+rd*t )).x;\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal(in vec3 pos) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005;\n    return normalize(\n      e.xyy * doModel(pos + e.xyy).x +\n      e.yyx * doModel(pos + e.yyx).x +\n      e.yxy * doModel(pos + e.yxy).x +\n      e.xxx * doModel(pos + e.xxx).x);\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 \n\tfloat h = 1.0;\n    for( int i=0; i<STEPSOFTSHADOW; i++ )         \n    {\n        h = (doModel(ro + rd*t)).x;\n        res = min( res, 64.0*h/t );   \n\t\tt += clamp( h, 0.02, 2.0 );   \n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 ); \n   \n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); \n\n\tvec3 col = doBackground(p.y);\n    float t = calcIntersection( ro, rd );\n    if( t>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n        vec3 mal = (doModel(ro+rd*t)).yzw;\n\n        col = doLighting( pos, nor, rd, t, mal );\n\t}\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.5454) );\n\t   \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}