{"ver":"0.1","info":{"id":"3l3BzH","date":"1612192784","viewed":53,"name":"2d-cuadros salto","username":"jorge2017a1","description":"2d-cuadros salto","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2dcuadrossalto"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// por jorge2017a1 ...jorge flores p.!!!\n\n#define PI 3.14159265359\n#define PI2 PI*2.0\n\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec2 sCuadroHueco(vec2 p,vec2 a, vec2 b)\n{\n\n    float sdhSup= sdSegment(  p, vec2(a.x, a.y), vec2(b.x,a.y) ); //---- sup\n    float sdhInf= sdSegment(  p, vec2(a.x, b.y), vec2(b.x,b.y) ); //---- inf\n    float sdVIzq= sdSegment(  p, vec2(a.x, a.y), vec2(a.x,b.y) ); //---- izq\n    float sdVDer= sdSegment(  p, vec2(b.x, a.y), vec2(b.x,b.y) ); //---- sup\n    float d=9999.9;\n    \n    d=min(d,sdhSup/fwidth(sdhSup));  //by jeyko\n    d=min(d,sdhInf/fwidth(sdhInf));\n    d=min(d,sdVIzq/fwidth(sdVIzq));\n    d=min(d,sdVDer/fwidth(sdVDer));\n    \n    return vec2(d, 0.0);\n}\n\nvec2 simpleCuadro(vec2 p)\n{\n    \n    float minfin=9999.0;\n    const int COUNT = 10;\n    float x, y;\n    float a,cc;\n    \n    \n    for(int c = 0; c < COUNT; c++)\n    { \n     a=0.5-float(c)*0.1250;\n     cc=float(c);\n     x=cc*cos(a);\n     y=cc*sin(a);\n     \n     \n     vec2 a1=vec2(x,y);\n     vec2 b1=vec2(x+0.5,y+0.5);\n     \n     vec2 sb1v2= sCuadroHueco( p, a1,  b1);\n     \n     minfin=min(minfin,sb1v2.x/fwidth(sb1v2.x));  //by jeyko\n    }\n    \n    return vec2(minfin, 2.0);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n     p*=3.0;\n     float tt=mod(iTime,5.0);\n     p.x=p.x+tt;\n    p.y=p.y-1.0;\n    \n    vec3 colOut=vec3(0.5,0.3,1.0);\n    \n    vec2 sl= simpleCuadro( p);\n    \n     \n    colOut= ProcesoColorVec2Grosor( colOut, sl, 1.0);  // by jeyko\n    \n    vec4 color =vec4(colOut, 1.0);\n  \tfragColor = color;\n\n}\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///------------------------------------\nstruct TObj\n{ vec3 color; };\n    \nTObj mObj;\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.75),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(0.9),  //31\nvec3(0.8),  //32\nvec3(0.7),  //33\nvec3(0.6),  //34\nvec3(150.,75.,0.0)/255.,  //35  //marron o cafe\nvec3(204.,119.,34.0)/255.,  //36 //marron o cafe\nvec3(184.,115.,51.0)/255.  //37 //marron o cafe\n\n    \n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n\nvec3 getColorf(float ii)\n{\n    int i=int(ii);\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n\n\n\n\n///------------------\nvec3 ProcesoColor(vec3 colBorde , vec3 colOut, float dist)\n{\n    float thickness = 0.005;  //grosor\n\tfloat blur = 0.004;\t //difuminar\n    \n    float step1 = thickness;\n\tfloat step2 = thickness + blur;\t\n    float step3= smoothstep(step1, step2, dist);\n    vec3 color1 = mix(colBorde, colOut, step3);\t\n    return color1;\n}\n\nvec3 ProcesoColorVec2( vec3 colOut, vec2 dist)\n{\n    float thickness = 0.005;  //grosor\n\tfloat blur = 0.004;\t //difuminar\n    vec3 colBorde=getColorf(dist.y);\n    \n    float step1 = thickness;\n\tfloat step2 = thickness + blur;\t\n    float step3= smoothstep(step1, step2, ( dist.x) );\n    vec3 color1 = mix(colBorde, colOut, step3);\t\n    return color1;\n}\n\nvec3 ProcesoColorVec2Grosor( vec3 colOut, vec2 dist, float grosor)\n{\n    float thickness = grosor;  //grosor\n\t//float blur = 0.004;\t //difuminar\n    float blur = 1.;\t //difuminar  by jeyko\n    \n    vec3 colBorde=getColorf(dist.y);\n    \n    float step1 = thickness;\n\tfloat step2 = thickness + blur;\t\n    float step3= smoothstep(step1, step2, ( dist.x) );\n    vec3 color1 = mix(colBorde, colOut, step3);\t\n    return color1;\n}\n","name":"Common","description":"","type":"common"}]}