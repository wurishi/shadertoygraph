{"ver":"0.1","info":{"id":"XdlyR4","date":"1487249923","viewed":89,"name":"Sp","username":"Bas1ck","description":"Raymarch","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["spheres"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float epsilon = 0.001;\nfloat sphere_r = 0.20;\nvec3 sphere_c = vec3(0.9,0.5,0.5);\nvec3 point_behind_screen = vec3 (0.9,0.5,-2.0); \nfloat z = 0.0;\nvec3 camera_pos = vec3(0.0,0.0,-3.0);\n\n\nfloat SDF(vec3 p, inout int id){\n    vec3 sphere_c2 = vec3(0.1 + cos(iTime),0.35, 3.5 + 3.8*sin(iTime));\n    float c1 = length(p - sphere_c) - sphere_r;\n    float c2 = length(p - sphere_c - sphere_c2) - sphere_r;\n    \n    if(c1 < c2){ \n        id = 0;\n    }\n    else{ \n        id = 1;\n    }\n    \n    return min(c1,c2);\n}\n\nvec3 calc_gradient (in vec3 p){\n    int id;\n    return normalize (vec3((SDF(vec3(p.x+epsilon,p.y,p.z),id) - SDF(vec3(p.x,p.y,p.z),id))/epsilon, \n             (SDF(vec3(p.x,p.y + epsilon,p.z),id) - SDF(vec3(p.x,p.y,p.z),id))/epsilon, \n             (SDF(vec3(p.x,p.y,p.z + epsilon),id) - SDF(vec3(p.x,p.y,p.z),id))/epsilon));\n}\n\n\nbool ray_march(in vec3 start, in vec3 dir, out vec3 end, inout int id){\n    end = start;\n    \n    for(int i = 0; i < 200; i++){\n    \t\n        float dist_to_object = SDF(end,id);\n        \n        if(dist_to_object < epsilon){\n            return true;\n        }\n        \n        if(dist_to_object > 1000.0){\n            return false;\n        }\n        \n        end += dist_to_object * dir;\n        \n    }\n    return false;\n} \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 light_point = vec3(2.0*sin(iTime),0.5,2.0*cos(iTime));\n    vec2 screen = fragCoord/iResolution.y;\n    vec3 point_on_screen = vec3(screen,z);\n    vec3 end;\n\tvec3 point_dir = normalize (point_on_screen - point_behind_screen);\n    int id = 1;\n    \n    if(!ray_march(point_on_screen, point_dir,end,id)){\n        fragColor = vec4(0.0,0.0,0.0,0.1);\n        return;\n    }\n    \n    if(id == 0)\n    \tfragColor = vec4 (0.0, 0.0, 0.1, 1.0);\n    if(id == 1)\n        fragColor = vec4 (0.1, 0.0, 0.1, 1.0);\n    \n    vec3 lm = normalize (light_point - end) ;\n\tvec3 normal = normalize (calc_gradient(end));\n\tvec3 rm = normalize (2.0 * dot(lm , normal) * normal-lm);\n    vec3 v = normalize (camera_pos - point_on_screen); \n    fragColor.xyz += vec3(0.1, 0.1, 0.1) +\n        0.3 * dot(lm, normal) +\n        0.4 * pow(clamp(dot(rm, v),0.0,1.0), 10.0);\n    \n}\n","name":"Image","description":"","type":"image"}]}