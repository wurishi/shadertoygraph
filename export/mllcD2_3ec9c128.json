{"ver":"0.1","info":{"id":"mllcD2","date":"1691238516","viewed":125,"name":"Triangle Prisms via Hyper-Voxels","username":"jt","description":"Proof-of-concept: implementation of a prism DDA as special case of a hyper-voxel DDA, by stepping through the hyper-voxels along the space composed of the plane orthogonal to the main diagonal (1,1,1) (prism base) and the fourth dimension (prism height).\n","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","raycasting","triangle","triangles","voxel","prism","4d","slice","honeycomb","dda","step","tesselation","triangular","prisms"],"hasliked":0,"parentid":"mlfXD7","parentname":"Triangle DDA via Voxel DDA Slice"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mllcD2 Triangle Prisms via Hyper-Voxels DDA written 2023 by jt\n// based on https://www.shadertoy.com/view/mlfXD7 Triangle DDA via Voxel DDA Slice\n// based on https://www.shadertoy.com/view/mtfXDM Branchless Voxel Raycasting Tex2\n// clean-up of https://www.shadertoy.com/view/7dK3D3 Branchless Voxel Raycasting Tex\n// using voxel DDA of https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n// (with loop optimization by kzy), DDA based on http://lodev.org/cgtutor/raycasting.html\n\n// Proof-of-concept:\n// implementation of a prism DDA as special case of a hyper-voxel DDA,\n// by stepping through the hyper-voxels along the space composed of\n// the plane orthogonal to the main diagonal (1,1,1) (prism base)\n// and the fourth dimension (prism height).\n\n// See also: https://www.shadertoy.com/view/mlXBRj prismatic honeycomb with objects\n// See also: https://www.shadertoy.com/view/Dt2czD]tetrahedral-octahedral honeycomb\n\n// tags: 3d, raytracing, raycasting, triangle, triangles, voxel, prism, 4d, slice, honeycomb, dda, step, tesselation, triangular, prisms\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n#define DIST_MAX 1000.0\n\n#define MAX_RAY_STEPS 64\n\nfloat torus(vec3 p, vec2 t)\n{\n    return length(vec2(length(p.xy) - t.x, p.z)) - t.y;\n}\n\nbool example()\n{\n    return false;// fract(iTime / 10.0) < 0.5;\n}\n\n#define ESSENTIAL_MATRIX\n\n#ifdef ESSENTIAL_MATRIX\n#else\nvec3 project(vec3 v)\n{\n    vec3 n = vec3(1,1,1);\n    return v - dot(v,n)*n/dot(n,n); // remove component along diagonal\n}\n#endif\n\nvec4 triangle_prism_trace(vec3 ray_pos_orig, vec3 ray_dir_orig) // step triangles by stepping through voxels along plane orthogonal to main diagonal (additional fourth dimension to step along prism height) by jt\n{\n    // Use of the transform matrix T:\n    // T*v lifts vector v from triangular 2d to rectangular 3d (triangular = barycentric)\n    // v*T projects vector v from rectangular 3d back down to triangular 2d (NOTE: v*T = transpose(T)*v)\n    // Cutting a cube grid (lattice?) perpendicular to diagonal (1,1,1) results in a triangular grid.\n    // I think this is a simple case of the cut-and-project method https://tilings.math.uni-bielefeld.de/glossary/cut-and-project/\n    // This special case could be called \"lift-and-project\" (I suppose cut-and-project does some additional things).\n#ifdef ESSENTIAL_MATRIX\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat2x3 T =\n        mat2x3\n        (\n            normalize(vec3(+1,-1, 0)),\n            normalize(vec3(-1,-1, 2))\n        );\n    // move z coordinate to w coordinate and lift (x,y) triangular grid coordinates to (x,y,z) cube grid coordinates\n    vec4 ray_pos = vec4(T * ray_pos_orig.xy, ray_pos_orig.z);\n    vec4 ray_dir = vec4(T * ray_dir_orig.xy, ray_dir_orig.z);\n#else\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat3 T =\n        mat3\n        (\n            normalize(vec3(+1,-1, 0)),\n            normalize(vec3(-1,-1, 2)),\n            normalize(vec3(-1,-1,-1))\n        );\n    // move z coordinate to w coordinate and lift (x,y) triangular grid coordinates to (x,y,z) cube grid coordinates\n    vec4 ray_pos = vec4(T * vec3(ray_pos_orig.xy, 0), ray_pos_orig.z);\n    vec4 ray_dir = vec4(T * vec3(ray_dir_orig.xy, 0), ray_dir_orig.z);\n#endif\n    // initialization from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n    ivec4 tile_pos = ivec4(floor(ray_pos)); // round down position to get tile position\n    // decompose ray direction into reciprocal absolute ray direction and sign (-1,+1)\n    vec4 delta_dist = 1.0 / abs(ray_dir); // reciprocal absolute ray direction\n    ivec4 ray_step = ivec4(sign(ray_dir)); // sign of ray direction\n    vec4 side_dist = (sign(ray_dir) * (vec4(tile_pos) - ray_pos) + (sign(ray_dir) * 0.5) + 0.5) * delta_dist; // initial distances to nearest walls by dimension\n\n    for (int i = 0; i < MAX_RAY_STEPS; i++)\n    {\n        // core (three lines) based on https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n        bvec4 nearest = lessThanEqual(side_dist.xyzw, min(min(side_dist.yzwx, side_dist.zwxy), side_dist.wxyz)); // component is true if nearest wall in that dimension\n        side_dist += vec4(nearest) * delta_dist; // update distances to nearest walls by dimension\n        tile_pos += ivec4(vec4(nearest)) * ray_step; // step to next tile in direction of nearest wall\n#ifdef ESSENTIAL_MATRIX\n        vec3 unpos = vec3(vec3(tile_pos.xyz)*T, tile_pos.w); // project (x,y,z) cube grid coordinates to (x,y) triangular grid coordinates and move w coordinate to z coordinate\n#else\n        vec3 unpos = vec3((vec3(tile_pos.xyz)*T).xy, tile_pos.w); // project (x,y,z) cube grid coordinates to (x,y) triangular grid coordinates and move w coordinate to z coordinate NOTE: after transforming back z component should be 0 here so we can drop it\n#endif\n        float d = length(vec4(nearest) * (side_dist - delta_dist)); // assume ray_dir normalized\n        bool solid = false;\n        if(example())\n        {\n            //solid = (torus(ray_pos_orig+ray_dir_orig*d, vec2(9.0, 3.0)) < 0.0);\n            //ivec3 unmap = ivec3(2*map_pos.x-map_pos.z, 2*map_pos.y-map_pos.z, 2*map_pos.w); // works somehow but asymmetric\n            //solid = torus(vec3(unmap), vec2(19.0, 7.0)) < 0.0;\n            solid = torus(unpos, vec2(9.0, 3.5)) < 0.0;\n        }\n        else\n            //solid = length(vec4(map_pos)) < 7.0; // 4d sphere (before converting cell position back to 3d)\n            solid = length(unpos) < 6.9; // 3d sphere XXX why do we have to subtract 0.1 here?!\n            //solid = length(unpos.xy) < 15.0 && (sin(unpos.x/2.0)*sin(unpos.y/2.0)) > abs(unpos.z / 4.5); // XXX more complex shape reveal shadow bugs near light XXX\n\n        if(solid)\n        {\n            // NOTE: currently no distinction between front and back (restored by caller)\n            if(nearest.w) return vec4(vec3(0,0,1),d);\n#ifdef ESSENTIAL_MATRIX\n            // Calculate the normal-vector directly from the mask\n            return vec4(normalize(vec3((vec3(nearest.xyz)*vec3(-ray_step))*T,0)), d);\n#else\n            return vec4(normalize(project((vec3(nearest.xyz)*vec3(-ray_step))))*T, d);\n#endif\n            if(nearest.z) return vec4(vec3(0,1,0),d);\n            if(nearest.y) return vec4(vec3(-sqrt(3.0)/2.0,-0.5,0),d);\n            if(nearest.x) return vec4(vec3(+sqrt(3.0)/2.0,-0.5,0),d);\n            //if(nearest.w) return vec4(vec3(0,0,1),d);\n            //if(nearest.z) return vec4(vec3(-sin((0.0/3.0)*2.0*pi),cos((0.0/3.0)*2.0*pi),0),d);\n            //if(nearest.y) return vec4(vec3(-sin((1.0/3.0)*2.0*pi),cos((1.0/3.0)*2.0*pi),0),d);\n            //if(nearest.x) return vec4(vec3(-sin((2.0/3.0)*2.0*pi),cos((2.0/3.0)*2.0*pi),0),d);\n            return vec4(0,0,0,d); // just in case...\n        }\n    }\n\n    return vec4(-ray_dir_orig, DIST_MAX); // sky-sphere\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // concise pixel-position mapping thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    //if(iMouse.y < iResolution.y / 2.0)\n    //    yaw = 1.0*pi-yaw;\n    //float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    float pitch = -pi/4.0 - 1.5 * pi * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.25 * pi/2.0;\n\n    vec3 ray_pos = vec3(0.0, 0.0, -25.0);\n    vec3 ray_dir = vec3(I.x, I.y, 2.0); // NOTE: un-normalized direction appears to work fine here!\n    //ray_dir = normalize(ray_dir); // looks like ray-direction does not need to be normalized\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n    ray_pos.z += 0.5;\n\n    vec3 color = vec3(0);\n    vec4 result = triangle_prism_trace(ray_pos, ray_dir);\n    if(result.w < DIST_MAX)\n    //if(result.w < 12.0 + 5.0 * cos(iTime))\n    {\n        color = vec3(1);\n        if(example())\n        {\n            vec3 light_dir = normalize(vec3(5,2,1));\n            float diffuse = 0.1 + max(0.0, dot(result.xyz, light_dir));\n            color = 0.5 + 0.5 * result.xyz; // debug normals\n            color *= diffuse;\n        }\n        else\n        {\n            float t = iTime * 2.0 * pi / 20.0;\n            result.xyz *= dot(result.xyz, ray_dir) < 0.0 ? +1.0 : -1.0; // repair front-back\n            vec3 dst = ray_pos + ray_dir * result.w;\n            // multiple close-up point-lights to verify visually that normals are correct\n            vec3 light_pos0 = 8.0*vec3(-cos(t),-sin(t),0.0);\n            vec3 light_pos1 = 8.0*vec3(cos(t),0.0,sin(t));\n            vec3 light_pos2 = 8.0*vec3(0.0,-cos(t),-sin(t));\n            vec3 light_diff0 = light_pos0 - dst;\n            vec3 light_diff1 = light_pos1 - dst;\n            vec3 light_diff2 = light_pos2 - dst;\n            float light_dist0 = length(light_diff0);\n            float light_dist1 = length(light_diff1);\n            float light_dist2 = length(light_diff2);\n            float shadow0 = triangle_prism_trace(dst, light_pos0 - dst).w < light_dist0 ? 0.0 : 1.0;\n            float shadow1 = triangle_prism_trace(dst, light_pos1 - dst).w < light_dist1 ? 0.0 : 1.0;\n            float shadow2 = triangle_prism_trace(dst, light_pos2 - dst).w < light_dist2 ? 0.0 : 1.0;\n            vec3 light_dir0 = light_diff0 / light_dist0;\n            vec3 light_dir1 = light_diff1 / light_dist1;\n            vec3 light_dir2 = light_diff2 / light_dist2;\n            vec3 light_color = vec3(1);\n            float brightness = 0.0;\n            brightness += shadow0 * max(0.0, dot(result.xyz, light_dir0)) / (light_dist0 * light_dist0);\n            brightness += shadow1 * max(0.0, dot(result.xyz, light_dir1)) / (light_dist1 * light_dist1);\n            brightness += shadow2 * max(0.0, dot(result.xyz, light_dir2)) / (light_dist2 * light_dist2);\n            vec3 diffuse = 10.0 * light_color * brightness;\n            float ambient = 0.05;\n            color = (diffuse + ambient) * (0.5 + 0.5 * result.xyz); // visualize normals\n            //color = vec3(fract(result.w));\n\n            //color = 0.5 + 0.5 * result.xyz; // debug normals\n        }\n    }\n    else\n    {\n        color = vec3(0);\n    }\n    color = tanh(color); // roll-off / soft-clamp overly bright colors\n    fragColor = vec4(sqrt(color), 1.0); // gamma\n    //fragColor = vec4(color, 1.0); // no gamma\n}\n","name":"Image","description":"","type":"image"}]}