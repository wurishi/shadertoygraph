{"ver":"0.1","info":{"id":"fl23RR","date":"1623239245","viewed":169,"name":"Fork of The Infinit Pattern","username":"FMS_Cat","description":"Alien's trival pattern\n\nThe original one is written by fancyzero: https://www.shadertoy.com/view/slXGDl\n\nThis is soooo much fun\n","likes":14,"published":1,"flags":32,"usePreview":0,"tags":["random","pattern","generate"],"hasliked":0,"parentid":"slXGDl","parentname":"The Infinite Pattern "},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (fragCoord * 2.0 - iResolution.xy)/iResolution.y;\n\n    vec4 d= texture( iChannel0, uv );\n    \n    float brighten = 0.;\n    float flashDuration = .3;\n    if (iTime - d.y  < flashDuration && d.x > 0.)\n    {\n        brighten =clamp(-log((iTime-d.y)/flashDuration)*20.,0.,10.);\n\n     }\n    float a = mod(d.z,100.0)*0.008;\n\n    fragColor =pal( a, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) ).xyzz*step(0.5,d.x);\n    \n    fragColor += fragColor*brighten;\n    \n    fragColor *= 1.0 - 0.2 * length(p);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n  const uint k = 1103515245U;  // GLIB C\n\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\nmat2 makerot(float r)\n{\n    mat2 rotmat = mat2(vec2(cos(r),sin(r)), vec2(-sin(r), cos(r)));\n    return rotmat;\n}\n\n\nfloat hex(in vec2 p){\n    const float hexSize = .5;\n    const vec2 s = vec2(1, 1.7320508);\n    \n    p = abs(p);\n    return max(dot(p, s*.5), p.x) - hexSize;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (fragCoord * 2.0 - iResolution.xy)/iResolution.y;\n\n    int frame = iFrame % 200 ;\n    \n    // init\n    if ( frame <= 1 ) {\n        vec2 diff = abs(fragCoord - iResolution.xy/2.);\n        float f = max(diff.x, diff.y);\n        fragColor = vec4(step(f,2.),iTime,iFrame,1);// * step(hash(uvec3(fragCoord.xyy)).x,0.001);\n        return;\n    }\n        \n    //setup random parameters\n        \n    int rndFrame = int(texture(iChannel1,vec2(0.5)).x)%213;//iFrame / 332 +4;\n    \n    int kernelShape = 0;\n    int rangeStart=32;\n    vec3 hh = hash(uvec3(rndFrame));\n    int frameDivid=int(hh.x*6.)+3;\n    hh = hash(uvec3(rndFrame+32));\n    int frameMod=int(hh.x*5.)+3;\n\n    hh = hash(uvec3(rndFrame+12));\n    int ppFrameDivid=int(hh.x*11.)+11;\n    hh = hash(uvec3(rndFrame+882));\n    int ppFrameMod=int(hh.x*4.)+3;;\n\n    kernelShape=int (hash(uvec3(iFrame+77)).x*100.)%4;\n    \n\n    \n\n    \n\n    frame += int(hash(uvec3(iFrame+77)).x*13.)+13;\n\n    int range = rangeStart>>((frame/frameDivid)%frameMod);    \n\n    if (range < 4 )\n        range = 4;\n        \n    fragColor = texture( iChannel0, fragCoord/iResolution.xy);\n\n    if ( fragColor.x > 0. )\n        return;\n\n    if (frame > 100 )\n        return;\n\n    //counting using a kernel\n    int count = 0;\n    for (int i = -range; i <= range; i++ )\n    {\n        for (int j = -range; j <= range; j++ )\n        {\n            // manhattan\n            if ( kernelShape == 0 && abs(i) + abs(j) > range )\n                continue;\n\n            // horizontal\n            if ( kernelShape == 1 && abs(j) > range / 2 )\n                continue;\n\n            // vertical\n            // if ( kernelShape == 2 && abs(i) > range / 2 )\n            //     continue;\n            \n            vec2 coord = clamp(fragCoord + 2.0 * vec2(i,j), vec2(0.0), iResolution.xy - 1.0);\n\n            vec4 data = texelFetch( iChannel0, ivec2( coord ), 0 );\n            if ( data.x > 0. ) {\n                count ++;\n            }\n        }\n    }\n\n    int pp = range;\n    int m = pp/(frame/ppFrameDivid+1)%ppFrameMod;\n    if (m < 2 )\n        m = 2;\n\n    // where the magic happens\n    if ( ( count <= m ) && ( count > 0 ) && ( ( count % pp ) < m ) ) {\n        fragColor = vec4( 1, iTime, iFrame, 1 );\n    }\n\n    // int ecount = total - count;\n    // if ( ( ecount <= m ) && ( ecount > 0 ) && ( ( ecount % pp ) < m ) ) {\n    //     fragColor = vec4( 0 );\n    // }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//for random seeds and resolution change detect\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n        fragColor = texture(iChannel0,fragCoord/iResolution.xy);\n    if ( int(mod(float(iFrame),50.)) == 0 )\n        fragColor.x = (iDate.w);\n    if ( int(mod(float(iFrame),200.))== 0 )\n        fragColor.y = (iDate.w);\n        \n    if (  int(mod(float(iFrame),200.)) == 0 && fragCoord.y<= 1.0)\n        fragColor.xy = iResolution.xy;\n}","name":"Buffer B","description":"","type":"buffer"}]}