{"ver":"0.1","info":{"id":"wlsfW7","date":"1596930268","viewed":381,"name":"for my website","username":"nisargpatel","description":"Cool gradient shader for my website","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["gradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define POINTS 32 // try between 2 and 256, gets slow fast\n#define PI 3.1415926536\n#define TAU (2.0 * PI)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    float bias = 0.0001;\n    float power = 15.0;\n    // mouse x controls bias, mouse y controls power\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n    bias = iMouse.z <= 0.0 ? bias : pow(10.0, (-0.5 + mouse.x) * 10.0);\n\tpower = iMouse.z <= 0.0 ? power : 0.5 + mouse.y * 9.5;\n    \n    float cN = 0.0;\n    // array used to store contributions in first loop\n    float contribution[POINTS];\n    \n    for (int i = 0; i < POINTS; i++)\n    {\n        float f = float(i) / float(POINTS) * TAU;\n\t    vec2 pos = 0.5 + 0.35 * vec2(cos(iTime * 1.0 + f), sin(iTime * 0.8*4.0 + f * 2.0));\n\t\tpos = uv - pos;\n        float dist = length(pos);\n        // calculate contribution\n    \tfloat c = 1.0 / (bias + pow(dist, power));\n        contribution[i] = c;\n        // sum total contribution\n        cN += c;\n    }\n    \n    // normalize contributions and weigh colors\n    vec3 col = vec3(0, 0, 0);\n    cN = 1.0 / cN;\n    for (int i = 0; i < POINTS; i++)\n    {\n        float f = float(i) / float(POINTS) * TAU + iTime * 0.1;\n\t    vec3 pcol = 0.5 + 0.5 * cos(vec3(f * 2.0, f, f * 4.0));\n        col += contribution[i] * cN * pcol;\n    }\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}