{"ver":"0.1","info":{"id":"lXGSDt","date":"1720622724","viewed":67,"name":"Detonate a nuclear bomb!","username":"Capo","description":"Draw a pattern with your mouse and get ready to watch the nuclear bomb explode!","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["randomnumbers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//referenceï¼šhttps://www.shadertoy.com/view/mtyGWy\n//reference:https://www.shadertoy.com/view/XsGXDd\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 state = texture(iChannel0, uv);\n\n    if (state.r > 0.0) {\n        vec3 color = palette(state.g + iTime * 0.1);\n        fragColor = vec4(color, 1.0);\n    } else {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float threshold = 0.4; \nconst int MIN = -2147483648;\nconst int MAX = 2147483647;\nconst vec3 white = vec3(1.0, 1.0, 1.0);\n\nint xorshift(in int value) {\n    value ^= value << 13;\n    value ^= value >> 17;\n    value ^= value << 5;\n    return value;\n}\n\nint nextInt(inout int seed) {\n    seed = xorshift(seed);\n    return seed;\n}\n\nfloat nextFloat(inout int seed) {\n    seed = xorshift(seed);\n    return abs(fract(float(seed) / 3141.592653));\n}\n\nfloat nextFloat(inout int seed, in float max) {\n    return nextFloat(seed) * max;\n}\n\nvec3 nearby(in vec2 fragCoord, in vec2 offset) {\n    vec2 uv = (fragCoord + offset) / iResolution.xy;\n    return vec3(texture(iChannel0, uv));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    int rngSeed = int(fragCoord.x) + int(fragCoord.y) * int(iResolution.x) + int(iTime * 1000.0);\n\n    float mouseDown = iMouse.z;\n    vec2 uvMouse = vec2(iMouse) / iResolution.xy;\n\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 previous = vec3(texture(iChannel0, uv));\n    vec3 next = previous;\n    next *= 0.90;\n\n    if (next[0] < 0.1) {\n        vec3 up = nearby(fragCoord, vec2(0.0, -1.0));\n        vec3 down = nearby(fragCoord, vec2(0.0, 1.0));\n        vec3 left = nearby(fragCoord, vec2(-1.0, 0.0));\n        vec3 right = nearby(fragCoord, vec2(1.0, 0.0));\n        if (up[0] > 0.9 || down[0] > 0.9 || left[0] > 0.9 || right[0] > 0.9) {\n            if (nextFloat(rngSeed, 1.0) > threshold) {\n                next = white;\n            }\n        }\n    }\n\n    if (length(uvMouse - uv) < .01 && mouseDown > 0.5) {\n        next = white;\n    }\n\n    fragColor = vec4(next, 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}