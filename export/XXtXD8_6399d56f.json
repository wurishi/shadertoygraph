{"ver":"0.1","info":{"id":"XXtXD8","date":"1718968952","viewed":74,"name":"halftone cmyk","username":"novogrammer","description":"halftone cmyk","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["halftone","cmyk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795\n#define DEG2RAD (M_PI/180.0)\n\nstruct LayerParameters{\n  float rotation;\n  vec4 cmykMask;\n};\n\n\nvec4 rgbToCmyk(vec3 rgb) {\n  float r=rgb.r;\n  float g=rgb.g;\n  float b=rgb.b;\n  float k = 1.0 - max(r, max(g, b));\n  if (k == 1.0) {\n      return vec4(0.0,0.0,0.0,1.0);\n  }\n  float c = (1.0 - r - k) / (1.0 - k);\n  float m = (1.0 - g - k) / (1.0 - k);\n  float y = (1.0 - b - k) / (1.0 - k);\n  return vec4(c, m, y, k);\n}\nvec3 cmykToRgb(vec4 cmyk) {\n  float c=cmyk[0];\n  float m=cmyk[1];\n  float y=cmyk[2];\n  float k=cmyk[3];\n  \n  float r = (1.0 - c) * (1.0 - k);\n  float g = (1.0 - m) * (1.0 - k);\n  float b = (1.0 - y) * (1.0 - k);\n  return vec3(r, g, b);\n}\n\nvec2 coordToUv(vec2 coord){\n  vec2 uv = coord/iResolution.xy;\n  return uv;\n}\nvec2 uvToCoord(vec2 uv){\n  vec2 coord = uv*iResolution.xy;\n  return coord;\n}\n\n\nvec4 coordToHexCoords(vec2 coord,float height)\n{\n  vec2 r = vec2(1., 1.73)*height;\n  vec2 h = .5 * r;\n  vec2 a = mod(coord, r) - h;\n  vec2 b = mod(coord - h, r) - h;\n  vec2 gv = dot(a, a) < dot(b, b) ? a : b; \n  vec2 id = coord - gv;\n  \n  return vec4(gv, id);\n}\n\nmat3 rotationMatrix(float rotation){\n  float c=cos(rotation);\n  float s=sin(rotation);\n  mat3   mat = mat3(\n    c, -s,0.0,\n    s, c,0.0,\n    0.0,0.0,1.0\n  );\n  return mat;\n}\n\nmat3 translationMatrix(vec2 translation){\n  return mat3(\n  1.0,0.0,0.0,\n  0.0,1.0,0.0,\n  translation.x,translation.y,1.0\n  );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  float sizeMin=2.0;\n  float sizeMax=min(iResolution.x,iResolution.y)/8.0;\n  float gridSize=(sin(iTime * 0.5)*0.5+0.5)*(sizeMax - sizeMin)+sizeMin;\n  \n  LayerParameters layerParamertersList[4];\n  layerParamertersList[0]=LayerParameters(15.0*DEG2RAD,vec4(1.0,0.0,0.0,0.0));\n  layerParamertersList[1]=LayerParameters(75.0*DEG2RAD,vec4(0.0,1.0,0.0,0.0));\n  layerParamertersList[2]=LayerParameters(30.0*DEG2RAD,vec4(0.0,0.0,1.0,0.0));\n  layerParamertersList[3]=LayerParameters(45.0*DEG2RAD,vec4(0.0,0.0,0.0,1.0));\n  \n  vec4 cmykTotal=vec4(0.0);\n  \n  for(int i=0;i<4;i++){\n    LayerParameters layerParamerters=layerParamertersList[i];\n    \n    mat3 rotationMatrix=rotationMatrix(layerParamerters.rotation + iTime*0.1);\n    mat3 inverseRotationMatrix=inverse(rotationMatrix);\n    mat3 transformMatrix=rotationMatrix*translationMatrix(iResolution.xy*-0.5);\n    mat3 inverseTransformMatrix=inverse(transformMatrix);\n  \n    vec2 transformedCoord=(transformMatrix*vec3(fragCoord,1.0)).xy;\n    vec4 transformedHexCoords=coordToHexCoords(transformedCoord,gridSize);\n    vec2 gridCoord=(inverseRotationMatrix*vec3(transformedHexCoords.xy,1.0)).xy;\n    vec2 hexCenterCoord=(inverseTransformMatrix*vec3(transformedHexCoords.zw,1.0)).xy;\n\n\n    vec2 uv = coordToUv(hexCenterCoord);\n    vec3 col = texture(iChannel0, uv).rgb;\n    float layerColorStrength=dot(rgbToCmyk(col) , layerParamerters.cmykMask);\n    float radius=gridSize*0.5*sqrt(layerColorStrength);\n    \n    float d=length(gridCoord)-radius;\n    vec4 cmyk=mix(layerParamerters.cmykMask,vec4(0.0),smoothstep(-1.0,1.0, d));\n  \n    cmykTotal+=cmyk;\n  }\n  \n\n  // Output to screen\n  fragColor = vec4(cmykToRgb(cmykTotal),1.0);\n}","name":"Image","description":"","type":"image"}]}