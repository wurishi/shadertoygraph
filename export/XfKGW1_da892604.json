{"ver":"0.1","info":{"id":"XfKGW1","date":"1712698429","viewed":223,"name":"loopless epicycloid","username":"FabriceNeyret2","description":"here loopless means iterationless:\nI analytically solve pixel closest to Cycloid_n(t), yielding 2n solutions whatever the screen resolution.\n\nAny idea how to have less jaggies ?","likes":10,"published":3,"flags":0,"usePreview":0,"tags":["golf","loopless","epicycloid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CS(a) cos(a+vec2(0,11))\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy, P,\n          U = 2.*( u+u - R ) / R.y,              // normalized coordinates\n          V = U; V.y = -V.y;\n    float n = 9., r = .2, l,                     // epicycloid parameters\n                                                 // solve | P(t) | = | U | \n          t = acos( clamp(.5*( dot(U,U) - 1. - r*r ) / r ,-1.,1.) ) / n;  // clamp to avoid NaN\n          // atan(P) = atan(U) is harder to exploit, but could at leat give a range.\n    for( O = vec4(0); t < 6.283; t += 6.283/n )  // all the cos( nt ) solutions\n       P = CS(t) + r*CS((n+1.)*t),               // epicycloid_n(t)\n       l =  min( length(P-U), length(P-V) ),     // cos(t) & cos(-t) solutions\n       O += smoothstep( 1.5, 0., l/fwidth(l) );  // draw\n}","name":"Image","description":"","type":"image"}]}