{"ver":"0.1","info":{"id":"7tl3zB","date":"1622372358","viewed":155,"name":"Phase Functions Comparison","username":"cjhoward","description":"A comparison of phase functions. From left to right: Rayleigh, Henyey-Greenstein, Cornette-Shanks. Left-click along the vertical axis to set the anisotropy factor (g) between -1 and 1.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["scattering","rayleigh","phase","henyeygreenstein","cornetteshanks"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * MIT License\n * \n * Copyright (c) 2023 Christopher J. Howard\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Control anisotropy factor\n    float g = (iMouse.y / iResolution.y) * 2.0 - 1.0;\n    \n    // Animate anisotropy factor\n    if (iMouse.xy == vec2(0.0))\n    {\n        g = sin(iTime);\n    }\n    \n    // Map UV to mu\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 pos;\n    pos.x = (fract(uv.x * 3.0) * 2.0 - 1.0) / 3.0;\n    pos.y = uv.y * 2.0 - 1.0;\n    float mu = pos.y / length(pos);\n    \n    // Calculate phase\n    float phase;\n    if (uv.x < 1.0 / 3.0)\n    {\n        phase = phase_rayleigh(mu);\n    }\n    else if (uv.x < 2.0 / 3.0)\n    {\n        phase = phase_henyey_greenstein(mu, g, g * g);\n    }\n    else\n    {\n        phase = phase_cornette_shanks(mu, g, g * g);\n    }\n    \n    // Render phase\n    fragColor = vec4(vec3(srgb_oetf(phase)), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * MIT License\n * \n * Copyright (c) 2023 Christopher J. Howard\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/// Pi\n#define PI 3.1415926535897932384626433832795\n\n/**\n * Returns the square root of @p x cubed. Equivalent to calling pow(x, 1.5).\n *\n * @param x Base value.\n *\n * @return sqrt(x^3).\n */\nfloat cube_sqrt(float x)\n{\n\treturn sqrt(x * x * x);\n}\n\n/**\n * Rayleigh phase function.\n *\n * @param mu Cosine of the angle between the light and view directions.\n *\n * @return Phase.\n */\nfloat phase_rayleigh(float mu)\n{\n\tconst float k = 3.0 / (16.0 * PI);\n\treturn k * (1.0 + mu * mu);\n}\n\n/**\n * Henyey-Greenstein phase function.\n *\n * @param mu Cosine of the angle between the light and view directions.\n * @param g Anisotropy factor, on `[-1, 1]`. Positive values cause forward scattering, negative values cause back scattering.\n * @param gg Squared anisotropy factor.\n *\n * @return Phase.\n */\nfloat phase_henyey_greenstein(float mu, float g, float gg)\n{\n\treturn (1.0 - gg) / (4.0 * PI * cube_sqrt(1.0 + gg - 2.0 * g * mu));\n}\n\n/**\n * Cornette-Shanks phase function.\n *\n * @param mu Cosine of the angle between the light and view directions.\n * @param g Anisotropy factor, on `[-1, 1]`. Positive values cause forward scattering, negative values cause back scattering.\n * @param gg Squared anisotropy factor.\n *\n * @return Phase.\n */\nfloat phase_cornette_shanks(float mu, float g, float gg)\n{\n\tconst float k = 3.0 / (8.0 * PI);\n\tfloat num = (1.0 - gg) * (1.0 + mu * mu);\n\tfloat den = (2.0 + gg) * cube_sqrt(1.0 + gg - 2.0 * g * mu);\n\treturn k * num / den;\n}\n\n/**\n * sRGB opto-electronic transfer function (OETF). Maps a linear sRGB color to a non-linear sRGB signal.\n *\n * @param x Linear sRGB color.\n *\n * @return Non-linear sRGB signal.\n *\n * @see IEC 61966-2-1:1999\n */\n/// @{\nfloat srgb_oetf(in float x)\n{\n\treturn x > 0.0031308 ? pow(x, 1.0 / 2.4) * 1.055 - 0.055 : x * 12.92;\n}\nvec3 srgb_oetf(in vec3 x)\n{\n\tvec3 low = pow(x, vec3(1.0 / 2.4)) * 1.055 - 0.055;\n\tvec3 high = x * 12.92;\n\treturn mix(low, high, step(x, vec3(0.0031308)));\n}\n/// @}","name":"Common","description":"","type":"common"}]}