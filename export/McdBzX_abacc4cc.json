{"ver":"0.1","info":{"id":"McdBzX","date":"1733349026","viewed":51,"name":"fractal curves 1204","username":"kukovisuals","description":"fractal, having issues with the big arcs","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Calculate Lissajous factor with arc suppression\nfloat calculateLissajousFactor(vec2 z, float iTime, float a, float b, float delta) {\n    // Compute the raw Lissajous factor\n    float lissajousRaw = abs(sin(a * z.x + iTime * 0.0001) * cos(b * z.y + delta));\n    \n    // Suppress large arcs by scaling based on the position magnitude\n    float suppressionFactor = exp(-length(z) * 0.01); // Exponential falloff for large z\n    lissajousRaw *= suppressionFactor;\n    \n    // Clamp the final factor to limit large contributions\n    return clamp(lissajousRaw, 0.009, 0.015); // Ensure the value stays in a reasonable range\n}\n\n\n// Calculate Rose curve factor\nfloat calculateRoseFactor(vec2 z, float k, float roseScale) {\n    float theta = atan(z.y, z.x); // Polar angle\n    return abs(cos(k * theta)) * roseScale;\n}\n\n// Calculate Logarithmic spiral factor\nfloat calculateSpiralFactor(vec2 z, float spiralA, float spiralB) {\n    float theta = atan(z.y, z.x); // Polar angle\n    return spiralA * exp(spiralB * theta);\n}\n\n// Calculate combined distortion factor\nfloat calculateCombinedFactor(vec2 z, float iTime, float a, float b, float delta, float k, float roseScale, float spiralA, float spiralB) {\n    float lissajousFactor = calculateLissajousFactor(z, iTime, a, b, delta);\n    float roseFactor = calculateRoseFactor(z, k, roseScale);\n    float spiralFactor = calculateSpiralFactor(z, spiralA, spiralB);\n    return lissajousFactor + roseFactor + spiralFactor;\n}\n\n// Convert HSB (Hue, Saturation, Brightness) to RGB\nvec3 hsb2rgb(vec3 c) {\n    vec3 rgb = clamp(abs(mod(c.x * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\n// Calculate Julia set with Lissajous beams, Rose curves, and Logarithmic spirals\nfloat calculateJuliaSetWithLissajousBeams(vec2 point, float iTime, out vec3 beamColor) {\n    vec2 c = vec2(-0.770, 0.114); // Julia set constant\n    vec2 z = point * 0.08;        // Initial value\n    const float escapeRadiusSquared = 256.0;\n    float minBeamValue = 1.0;     // Initialize minimum beam value\n    const float noiseThreshold = 0.01; // Threshold to filter out noise\n    const float maxArcThreshold = 0.016; // Threshold to exclude large arcs\n\n    // Lissajous parameters\n    float a = 3.0 + sin(iTime * 0.07);\n    float b = 2.0 + cos(iTime * 0.2);\n    float delta = sin(iTime * 0.004) * 3.14159;\n\n    // Rose curve parameters\n    float k = 4.0 + sin(iTime * 0.6);\n    float roseScale = 0.01;\n\n    // Logarithmic spiral parameters\n    float spiralA = 0.002;\n    float spiralB = 0.1;\n\n    int i;\n    for (i = 0; i < 500; i++) {\n        if (dot(z, z) > escapeRadiusSquared) break;\n\n        // Julia set iteration\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n\n        // Calculate combined distortion factor\n        float combinedFactor = calculateCombinedFactor(z, iTime, a, b, delta, k, roseScale, spiralA, spiralB);\n            \n        // Skip insignificant contributions\n        if (combinedFactor < noiseThreshold) continue;\n        \n        //if (combinedFactor > 0.014) continue;\n        \n         // Exclude large arcs\n        if (combinedFactor > maxArcThreshold) continue;\n        \n        // Beam effect modulated by combined distortion\n        float fractValue = fract(dot(z, vec2(0.5)) + iTime * 0.07 + float(i) * 30.02);\n        float beamValue = combinedFactor + 0.009 * fractValue;\n        \n        minBeamValue = min(minBeamValue, beamValue);\n    }\n\n    // Apply exponential scaling for smoother visual transitions\n    float beamIntensity = exp(-70.0 * minBeamValue) * 0.9;\n\n    // Assign color based on beamIntensity\n    float beamID = floor(beamIntensity * 2.0); // Increase factor for more hue variation\n    float hue = mod(beamID * 0.15, 1.0);       // Ensure hue stays within [0, 1]\n    float saturation = 0.9;                    // Slightly reduce saturation for shininess\n    float brightness = clamp(beamIntensity * 1.2, 0.0, 1.0); // Enhance brightness\n\n\n    // Convert HSB to RGB\n    beamColor = hsb2rgb(vec3(hue, saturation, brightness));\n    if (i >= 60) return 0.0;\n\n    return 1.0;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize coordinates\n    vec2 point = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    // Add movement\n    float moveX = 0.5 * sin(iTime * 0.05);      // Horizontal movement\n    float moveY = 0.5 * cos(iTime * 0.03);      // Vertical movement\n    vec2 centerOffset = vec2(moveX, moveY);\n    point -= centerOffset;\n\n    // Add zoom\n    float zoom = 1.0 + 0.5 * sin(iTime * 0.02); // Zoom factor\n    point /= zoom;\n\n    // Add rotation\n    float angle = iTime * 0.01;                 // Rotation angle (radians)\n    float cosAngle = cos(angle);\n    float sinAngle = sin(angle);\n    mat2 rotation = mat2(\n        cosAngle, -sinAngle,\n        sinAngle,  cosAngle\n    );\n    point = rotation * point;\n\n    // Calculate light beams modulated by Lissajous waves, get beam color\n    vec3 beamColor;\n    calculateJuliaSetWithLissajousBeams(point, iTime, beamColor);\n\n    // Add subtle glow\n    vec3 glow = beamColor * 0.5;\n    \n    vec3 color = mix(vec3(0.1), beamColor, 0.1) + glow;\n\n    fragColor = vec4(color, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}