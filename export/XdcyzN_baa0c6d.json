{"ver":"0.1","info":{"id":"XdcyzN","date":"1518004043","viewed":288,"name":"Fractured Poses","username":"104","description":"enjoy!","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["xor","sizecoding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n//327 chars. original before a lot of size optimizing but it at least works on\n// mac & safari again.\nvoid mainImage(out vec4 o, vec2 s)\n{\n    vec2 R = iResolution.xy,\n        r = ( s - .5 * R ) /R.y,\n        q = s / R-.5;\n    float t = iTime,\n        k = 1.;\n    t+=sin(t);\n    o-=o;\n    vec3 a;\n    for(float i = 1.;i>0.;i-=.1) {\n        a = (vec3(-.03,0.,.03)+i)*(k=-k);\n        for(int x=0;x<3;++x)\n            if(sin(8.*length(r-(cos(vec2(a[x]+t*.4,a[x]+t*.7))*i)))<0.)\n                o[x]=1.-o[x];\n            }\n    o -= .1*fract(sin(dot(r*t,r+t))*1e5);\n    o *= 1.-dot(q,q*1.4);\n}\n\n\n\n\n\n// parity=k\n// fragcood = s\n// uvn = q\n// uv = r\n// 268ch\n// compromises I made for size coding:\n// - behavior changes based on aspect ratio, but almost always good looking\n// - noise is not well distributed\n// - output color may go out of bounds. black areas output around -1.0\n// BUT DOESNT WORK ON SAFARI\n/*void mainImage(out vec4 o, vec2 s)\n{\n    vec2 R = iResolution.xy,\n        r = ( s - .5 * R ) /R.y,\n        q = s / R-.5;\n    float t = iTime,\n        k = 1.,i,x;\n    t+=sin(t);\n    o-=o-k+.1*fract(sin(dot(R+t,r))*1e5)+dot(q,q+q);\n    for(i = k;i>0.;i-=.1,k=-k)\n        for(x=0.;x<3.;)\n            o[int(x)]*=sign(sin(8.*length(r-cos(R/R.y*.4*t+(++x*.03+i)*k)*i)));\n}\n*/\n\n/*\n271\nvoid mainImage(out vec4 o, vec2 s)\n{\n    vec2 R = iResolution.xy,\n        r = ( s - .5 * R ) /R.y,\n        q = s / R-.5;\n    float t = iTime,\n        k = 1.,i,x;\n    t+=sin(t);\n    o-=o-k+.1*fract(sin(dot(r*t,r+t))*1e5)+dot(q,q);\n    for(i = k;i>0.;i-=.1,k=-k)\n        for(x=0.;x<3.;++x)\n            o[int(x)]*=sign(sin(8.*length(r-(cos(R/R.y*.4*t+(x*.03+i)*k)*i))));\n}\n*/\n\n\n// 180 ch minimalistic version with no post or aberration\n/*void mainImage(out vec4 o, vec2 s)\n{\n    vec2 R = iResolution.xy,\n        r = ( s - .5 * R ) /R.y;\n    \n    float t = iTime,\n        k = 1.,i;\n    \n    t+=sin(t);\n    o++;\n    \n    for(i = k;i>0.;i-=.1,k=-k)\n        o*=sign(sin(8.*length(r-cos(R/R.y*.4*t+i*k)*i)));\n}\n*/\n\n\n/*\n// 289\nvoid mainImage(out vec4 o, vec2 s)\n{\n    vec2 R = iResolution.xy,\n        r = ( s - .5 * R ) /R.y,\n        q = s / R-.5;\n    float t = iTime,\n        k = 1.,i,x;\n    t+=sin(t);\n    o-=o-k;\n    for(i = 1.;i>0.;i-=.1,k=-k)\n        for(x=0.;x<3.;++x)\n            o[int(x)]*=sign(sin(8.*length(r-(cos(vec2(t*.4,t*.7)+(x*.03+i)*k)*i))));\n    o -= .1*fract(sin(dot(r*t,r+t))*1e5);\n    o *= k-dot(q,q*1.4);\n}\n*/\n\n\n/*\n//312\nvoid mainImage(out vec4 o, vec2 s)\n{\n    vec2 R = iResolution.xy,\n        r = ( s - .5 * R ) /R.y,\n        q = s / R-.5;\n    float t = iTime,\n        k = 1.,i;\n    t+=sin(t);\n    o-=o-1.;\n    vec3 a;\n    for(i = 1.;i>0.;i-=.1, a = (vec3(-.03,0.,.03)+i)*(k=-k))\n        for(int x=0;x<3;++x)\n            o[x]*=sign(sin(8.*length(r-(cos(vec2(t*.4,t*.7)+a[x])*i))));\n    o -= .1*fract(sin(dot(r*t,r+t))*1e5);\n    o *= 1.-dot(q,q*1.4);\n}\n*/\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}