{"ver":"0.1","info":{"id":"3dBBWt","date":"1591046016","viewed":133,"name":"Doodling w/ ThronoCrigger #2","username":"Flopine","description":"This is the second part of a 30 minutes concert for which I made live coded visuals. \nThanks to 0r4 for the invitation and ThronoCrigger for his trust :D I had a lot of fun","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","animation","spaceship","chiptune"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU 6.2831853071\n#define triratio vec2(1.,.5)\n\n#define BPM (150./60.)\n#define ft(speed) fract(iTime*speed)\n#define loopease(speed) easeInOutCirc(abs(-1.+2.*ft(speed)))\n#define switchanim(speed) (floor(sin(ft(speed)*TAU))+1.)\n\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(.03,fwidth(val-thre)))\n#define circle(s,puv) AAstep(s, length(puv))\n#define line(s,puv1) AAstep(s, abs(puv1))\n#define triY(s,puv) AAstep(s, max(-uv.y,dot(abs(puv),triratio)))\n#define xor(a,b) ((1.-b)*a + (1.-a)*b)\n\n/////////////////////// Tools ////////////////////\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y>p.x) p = p.yx;\n}\n\nvoid moda (inout vec2 p, float rep)\n{\n    float per = TAU/rep;\n    float a = atan(p.y,p.x);\n    a = mod(a,per)-per*0.5;\n    p = vec2(cos(a),sin(a))*length(p);\n}\n\nfloat easeInOutCirc (float x)\n{\n    return x < 0.5\n        ? (1. - sqrt(1. - (2. * x) * (2. * x))) / 2.\n        : (sqrt(1. - (-2. * x + 2.) * (-2. * x + 2.)) + 1.) / 2.;\n}\n\n/////////////////////// 2D  //////////////////////\nvec3 spaceship (vec2 uv)\n{\n    uv *= rot(PI/4.);\n    float per = 0.3;\n    vec2 uu = uv;\n    vec2 us = uv;\n    us.x += -.25+loopease(BPM/8.)*.5;\n    float mask = triY(0.2,us);\n\n    vec2 us2 = vec2(abs(us.x)-.2,us.y);\n    mask = xor(mask,triY(0.1,(us2)));\n\n    uv.y -= 1.5*ft(BPM/2.);\n    float udx = abs(uv.x)-1.;\n    float udyid = floor(uv.y/per);\n    float udy = mod(uv.y,per)-per*.5;\n    vec2 ud = vec2(udx,udy);\n    float l = line(0.1,ud.x);\n    ud.x += sin(udyid+ft(1.)*TAU)*.2;\n    mask = xor(mask,xor(circle(0.08,ud),l));\n\n    uv = uu;\n    uv *= rot(sin(loopease(BPM/8.)*.5));\n    mo(uv,vec2(.5));\n    uv.x -= 0.3;\n    moda(uv,5.);\n    mask = xor(mask, line(0.1, uv.y));\n\n    vec3 col = (mask <= 0.) ? vec3(0.4,0.8,.6) : vec3(.01,0.0,0.08);\n    return col;\n}\n\n/////////////////////// Main  ////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    if (switchanim(BPM/8.)<=0.)mo(uv,vec2(.5));\n\n    vec3 col = spaceship(uv);\n    \n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}