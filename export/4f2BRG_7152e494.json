{"ver":"0.1","info":{"id":"4f2BRG","date":"1725100631","viewed":13,"name":"basic sphere without shades","username":"dragonmuffin","description":"basic sphere without shades","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_STEPS = 50;\nconst float FAR = 300.;\nconst float EPS = 0.001;\nconst vec3  CAM_POS = vec3(0.);\n\nfloat SphereSdf(in vec3 center, in float radius, in vec3 crd) {\n    return length(crd-center)-radius;\n}\n\nfloat SceneSdf(in vec3 crd) {\n    return SphereSdf(vec3(0.,1.,0.), .1, crd);\n}\n\nfloat RayMarch(in vec3 start, in vec3 orientation) {\n    orientation = orientation/length(orientation);\n    vec3 pos = start;\n    float dist;\n    float depth = 0.;\n    for(int i=0;i<MAX_STEPS;i++) {\n        dist = SceneSdf(pos);\n        if(dist<EPS || depth>FAR) {\n            break;\n        }\n        depth += dist;\n        pos = start + orientation * depth;\n    }\n    return depth;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy-0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 orientation = vec3(uv.x,1.,uv.y);\n    float dpt = RayMarch(CAM_POS,orientation);\n    fragColor = vec4((dpt>FAR)?vec3(0.):vec3(1.), 1.);\n}\n\n","name":"Image","description":"","type":"image"}]}