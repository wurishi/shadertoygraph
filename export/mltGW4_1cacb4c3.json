{"ver":"0.1","info":{"id":"mltGW4","date":"1682470444","viewed":153,"name":"All Your Pixels Base Belong ToUs","username":"tomachi","description":"red eats green buts fears blue, green eats blue but fears red, etc.","likes":2,"published":1,"flags":34,"usePreview":0,"tags":["automata","webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define tex0(pos) texture(iChannel0, pos)\n#define tex1(pos) texture(iChannel1, pos)\n/*#define tex2(pos) texture(iChannel2, pos)\n#define tex3(pos) texture(iChannel3, pos)*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec4 col = tex1(uv);\n\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define resolution 8\n#define texr(pos) texture(iChannel0, pos).r\n#define texg(pos) texture(iChannel0, pos).g\n#define texb(pos) texture(iChannel0, pos).b\n#define tex0(pos) texture(iChannel0, pos)\n#define tex1(pos) texture(iChannel1, pos)\n#define webcam(pos) texture(iChannel2, pos)\n/* Buffer A carries direction and intensity values in .xy and z */\n/* Buffer B carries imagery */ \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float R = texr(uv);\n    float G = texg(uv);\n    float B = texb(uv);\n    vec4 col = tex1(uv); // colour\n    vec2 dir = vec2(0.); // best direction after here\n    int strong = species(col); // 1 = red 2 = green 3 = green what kind of cell or empty\n    vec3 p = vec3(vec2(1.)/iResolution.xy, 0.);\n    float best = sin(iTime*0.8) - 0.095;\n   // float best = 0.75;\n    // find out the strongest colour\n\n      for (int x = -resolution; x <= resolution; x++) {\n            for (int y = -resolution; y <= resolution; y++) {\n              //  float xx = float(x) * p.x /float(resolution);\n              //  float yy = float(y) * p.y /float(resolution);\n                float xx = float(x) * p.x;\n                float yy = float(y) * p.y;\n                float speed = 1./float(resolution); \n                vec4 look = webcam(uv+vec2(xx,yy));\n                int  neighbour = species(look);\n                float bright = look.r * look.g * look.b;\n               // red = x \n               // green = y \n                if (strong == 1) {// RED EATS GREEN\n                    if ( neighbour == 2 && look.g > best) {\n                        dir = vec2(xx*speed,yy*speed); \n                        best = look.g;\n                    } else if(neighbour == 3) {\n                        // RUN AWAY\n                        dir = vec2(-xx*speed,-yy*speed); \n                    }\n                    break;\n                } else if (strong == 2) { // GREEN EATS BLUE\n                     if ( neighbour == 3 && look.b > best) {\n                        dir = vec2(xx*speed,yy*speed); \n                        best = look.b;\n\n                    } else if(neighbour == 1 && look.r > best) {\n                        // RUN AWAY\n                        dir = vec2(-xx*speed,-yy*speed); \n                        best = look.b;\n                    }\n                    break;\n                } else  if (strong == 3) { // BLUE EATS RED\n                    if ( neighbour == 1) {\n                        dir = vec2(xx*speed,yy*speed); \n                    } else if(neighbour == 2) {\n                        // RUN AWAY\n                        dir = vec2(-xx*speed,-yy*speed); \n                    }\n                    break;\n                } else { // black or dark pixel GO DOWNWARDS\n                    if (strong == 0) {\n                         dir = vec2(0., -p.y*bright);\n                    } else {\n                         dir = vec2(0., p.y*bright);\n                    }\n                  break;\n                 }\n            }\n      }\n    if (iFrame == 1 || iMouse.z > 0.) {\n      col = vec4(1.);\n      dir = vec2(0.);\n    }\n    fragColor = vec4(dir.x,dir.y,float(strong),1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define tex0(pos) texture(iChannel0, pos)\n#define tex1(pos) texture(iChannel1, pos)\n#define webcam(pos) texture(iChannel2, pos)\n#define tex3(pos) texture(iChannel3, pos)\n#define direx0(pos) vec2(texture(iChannel0, pos))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 p = vec3(vec2(1.)/iResolution.xy, 0.);\n    vec2 dir = direx0(uv);\n    float xx = dir.x;\n    float yy = dir.y;\n    vec4 oldc = tex0(uv);\n    vec4 cam = webcam(uv);\n    float magni = 0.9 + (uv.y*0.3);\n    // grab existing buffer image:\n    vec4 col = 0.9* tex1(vec2(uv.x + xx, uv.y + yy)); // \n    int s = species(cam);\n    if (iFrame == 1 || iMouse.z > 0.1) {\n      //col = tex3(uv)*0.91;\n      col = vec4(0.5);\n    } else {\n     // grab existing webcam image:\n        col += webcam(uv) * 0.06 ;\n    }\n      // saturate the colours:\n    if (s ==1 ){ col.r *= magni;     \n    } \n    else if ( s==2 ) { col.g *= magni;} \n    else if (s==3) { col.b *= magni;  } \n    else { col *= vec4(0.9); }\n\n    fragColor = col;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/*\n0 - empty or black\n1 - red \n2 - green \n3 - blue\n*/\nint species(vec4 c) {\n   if (c.r > c.g && c.r > c.b) { return 1; } else if (c.g > c.b && c.g > c.r) {return 2; } else if (c.b > c.g && c.b > c.r) { return 3; }\n   if (c.r * c.g * c.b > 0.0015) { return 0; } else { return -1; } \n}","name":"Common","description":"","type":"common"}]}