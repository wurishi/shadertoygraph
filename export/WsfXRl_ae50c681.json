{"ver":"0.1","info":{"id":"WsfXRl","date":"1555455368","viewed":136,"name":"QPSK","username":"daulpavid","description":"Constellation diagrams are often used in wireless communications to visualize channel effects on the received symbols.\nhttps://en.wikipedia.org/wiki/Phase-shift_keying","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["constellation","wireless","communications"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON  (0.0000001)\n#define PI       (3.1415927)\n#define TWO_PI   (6.2831853)\n\nfloat urand(float seed)\n{\n    return fract(sin(seed) * 43758.5453);\n}\n\n// Implements the Box-Muller transform\n// to generate stand normally distributed random numbers\nfloat nrand(float mu, float sigma, float seed)\n{\n\tfloat u1 = urand(seed * 0.983 + 0.5);\n    float u2 = urand(seed * 0.712 + 0.3);\n\n    float z0 = sqrt(-2.0 * log(u1)) * cos(TWO_PI * u2);\n    float z1 = sqrt(-2.0 * log(u1)) * sin(TWO_PI * u2);\n\n    return z0 * sigma + mu;\n}\n\nfloat clip(float value, float threshold)\n{\n    return value > threshold ? 1.0 : -1.0;\n}\n\n// Bit mapping using neigboring pixels\nvec2 psk_mod(int order)\n{\n    vec2 symbol;\n    \n    symbol.x = clip(urand(iTime * 0.87), 0.5);\n    symbol.y = clip(urand(iTime * 0.42), 0.5);\n    \n    return symbol;\n}\n\nvec2 awgn(vec2 symbol, float std)\n{\n\tsymbol.x += nrand(0.0, std, iTime * 0.23);\n    symbol.y += nrand(0.0, std, iTime * 0.59);\n    \n    return symbol;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy - 0.5 * iResolution.xy;\n    vec2 st = 8.0 * uv.xy / iResolution.x;\n    \n    vec2 symbol_coord = awgn(psk_mod(4), 0.1);\n\n    vec2 disk = st - symbol_coord;\n    \n    vec3 pixel = vec3(0.0);\n    \n    // Draw symbols\n    if (length(disk) < 0.05)\n    {\n        pixel = vec3(1.0, 0.0, 0.0);\n    }\n    \n    // Draw decision boundaries\n    if (abs(st.x) < 0.008 || abs(st.y) < 0.009)\n    {\n        pixel = vec3(0.0, 0.0, 1.0);\n    }\n    \n\tfragColor = vec4(pixel, 1.0);\n}","name":"Image","description":"","type":"image"}]}