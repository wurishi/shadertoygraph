{"ver":"0.1","info":{"id":"mdSSDW","date":"1670296003","viewed":148,"name":"Dodecahedron Test","username":"dgreensp","description":"Simple dodecahedron / icosahedral symmetry","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["sphere","icosahedron","dodecahedron"],"hasliked":0,"parentid":"mdjXW1","parentname":"Octahedral Voronoi on Sphere"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float phi = 1.618033988749894;\nconst vec3 V = normalize(vec3(1.,phi,0.));\n\nvec3 render(vec2 uv) {\n    // p is the (x,y) position with the origin centered and room to\n    // view a unit sphere\n    vec2 p = (uv - vec2(0.5)) * 2.4;\n    // z2 is the z coordinate for a unit sphere, squared, or\n    // a negative number if the sphere does not overlap that (x,y)\n    float z2 = 1. - dot(p,p);\n    // return early if sphere does not overlap this (x,y)\n    if (z2 < 0.0) {\n        return vec3(0.);\n    }\n    // q is p with the z coordinate filled in; position on unit sphere\n    vec3 q = vec3(p, sqrt(z2));\n    \n    // rotate q in time\n    float th = iTime;\n    q.xz = vec2(q.x * cos(th) + q.z * sin(th), - q.x * sin(th) + q.z * cos(th));\n    \n    vec3 absq = abs(q);\n    vec3 signq = sign(q);\n    \n    // The centers of the faces of a dodecahedron / vertices of an icosahedron,\n    // of which there are 12, have an interesting structure.  In each octant,\n    // there are three such points we might be closest to: V.xyz, V.zxy, and\n    // V.yzx (with the same x/y/z/ signs as q).  We can figure out which one\n    // we're closest to by seeing what the largest component of \"tester\" is.\n    vec3 tester = absq + phi * absq.yzx;\n    vec3 vertex = (tester.x > max(tester.y, tester.z) ? V.xyz :\n      tester.y > tester.z ? V.zxy : V.yzx) * signq;\n\n    return (floor(vertex*3.)+3.)*0.2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float minDimension = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord - (iResolution.xy - minDimension)*0.5) / minDimension;\n    vec3 col = any(lessThan(uv, vec2(0.0))) || any(greaterThan(uv, vec2(1.0))) ?\n        vec3(0.0) : render(uv);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}