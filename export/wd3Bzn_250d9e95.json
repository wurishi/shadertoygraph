{"ver":"0.1","info":{"id":"wd3Bzn","date":"1604175573","viewed":121,"name":"MC integration over time","username":"damart3d","description":"integration over time using temporal variable noise.\nusable for integrating such effects as AO, SRR etc.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["dithering","integration","temporal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 fragUV = fragCoord / iResolution.xy;\n    fragColor.rgb = texture(iChannel0, fragUV).rgb;\n    fragColor.a = 1.0;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float PI = 3.14159265359;\n\nvec4 bluenoise( vec2 fc )\n{\n    return texture( iChannel2, fc / iChannelResolution[2].xy );\n}\n\n//----------------------------------------------------------------------------------\nvec4 ImportanceSampleGGX( vec2 E, float Roughness )\n{\n\tfloat m = Roughness * Roughness;\n\tfloat m2 = m * m;\n\n\tfloat Phi = 2.0 * PI * E.x;\n\tfloat CosTheta = sqrt( (1.0 - E.y) / ( 1.0 + (m2 - 1.0) * E.y ) );\n\tfloat SinTheta = sqrt( 1.0 - CosTheta * CosTheta );\n\n\tvec3 H;\n\tH.x = SinTheta * cos( Phi );\n\tH.y = SinTheta * sin( Phi );\n\tH.z = CosTheta;\n\t\n\tfloat d = ( CosTheta * m2 - CosTheta ) * CosTheta + 1.0;\n\tfloat D = m2 / ( PI*d*d );\n\tfloat PDF = D * CosTheta;\n\t\n\treturn vec4( H, PDF );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 noise = bluenoise(fragCoord).xyz;\n    float roughness = 0.3;\n    \n    float goldenRation = 1.6180339887;\n    float frame = ceil(iTime*10.0);\n\n    float g = 1.32471795724474602596;\n\tvec2 a = vec2(1.0 / g, 1.0 / ( g * g));\n    vec2 Xi = fract(noise.xy + a.xy * vec2(iFrame, iFrame) );\n    vec4 GGX = ImportanceSampleGGX( Xi, roughness );\n    vec2 texCoord = uv + 100.0*GGX.xy/iResolution.xy;\n    vec4 sampleTex = textureLod( iChannel3, texCoord, 0.0);\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec4 inputImage = texture( iChannel3, uv);\n    //float luma = dot(inputImage,vec3(0.2126, 0.7152, 0.0722));\n    float luma = inputImage.y;\n   \n    vec3 temporalNoise = fract(noise + goldenRation*float(iFrame));\n\tvec3 t = floor(inputImage.xyz+temporalNoise);\n\n   \n    // Output to screen\n    fragColor = sampleTex;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 current = texture(iChannel0, fragCoord / iResolution.xy);\n\n    \n    vec4 history = texture(iChannel1, fragCoord / iResolution.xy);\n\t\n    float blend = 0.05;\n    \n    if(fragCoord.x/ iResolution.x> 0.5)\n    {\n       blend = 1.0;\n    }\n    \n    fragColor.rgb = mix(history.xyz, current.xyz, blend);\n\n    fragColor.a = 1.0;\n}","name":"Buffer B","description":"","type":"buffer"}]}