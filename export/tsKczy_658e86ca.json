{"ver":"0.1","info":{"id":"tsKczy","date":"1603182551","viewed":196,"name":"Black-body Gradient","username":"cjhoward","description":"Black-body color temperature gradient.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["blackbody","colortemperature","cct"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * MIT License\n * \n * Copyright (c) 2023 Christopher J. Howard\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Lerp temperature from 1,000 to 12,000 Kelvin\n    float t = mix(1000.0, 12000.0, fragCoord.x / iResolution.x);\n    \n    // Calculate correlated sRGB color for temperature\n    fragColor = vec4(srgb_oetf(srgb_cct(t)), 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * MIT License\n * \n * Copyright (c) 2023 Christopher J. Howard\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/// CIE XYZ to linear sRGB transformation matrix.\nconst mat3 xyz_to_srgb = mat3\n(\n\t 3.24100323297636050, -0.96922425220251640,  0.05563941985197549,\n\t-1.53739896948878640,  1.87592998369517530, -0.20401120612391013,\n\t-0.49861588199636320,  0.04155422634008475,  1.05714897718753330\n);\n\n/**\n * Calculates the correlated sRGB color of an ideal black-body radiator, given its temperature in Kelvin.\n *\n * @param t Temperature, in Kelvin.\n *\n * @return Linear sRGB color.\n *\n * @see Krystek, M. (1985), An algorithm to calculate correlated colour temperature. Color Res. Appl., 10: 38-40.\n */\nvec3 srgb_cct(float t)\n{\n\t// Approximate the Planckian locus in CIE 1960 UCS color space (Krystek's algorithm)\n    float tt = t * t;\n    float u = (0.860117757 + 1.54118254e-4 * t + 1.28641212e-7 * tt) / (1.0 + 8.42420235e-4 * t + 7.08145163e-7 * tt);\n\tfloat v = (0.317398726 + 4.22806245e-5 * t + 4.20481691e-8 * tt) / (1.0 - 2.89741816e-5 * t + 1.61456053e-7 * tt);\n\t\n\t// CIE 1960 UCS -> CIE xyY, with Y = 1\n    vec2 xyy = vec2(3.0 * u, 2.0 * v) / (2.0 * u - 8.0 * v + 4.0);\n\t\n\t// CIE xyY -> CIE XYZ\n\tvec3 xyz = vec3(xyy.x / xyy.y, 1.0, (1.0 - xyy.x - xyy.y) / xyy.y);\n    \n\t// CIE XYZ -> linear sRGB\n    vec3 srgb = xyz_to_srgb * xyz;\n    \n    // Normalize sRGB to preserve chromaticity\n\treturn srgb / max(srgb.x, max(srgb.y, srgb.z));\n}\n\n/**\n * sRGB opto-electronic transfer function (OETF). Maps a linear sRGB color to a non-linear sRGB signal.\n *\n * @param x Linear sRGB color.\n *\n * @return Non-linear sRGB signal.\n *\n * @see IEC 61966-2-1:1999\n */\n/// @{\nfloat srgb_oetf(float x)\n{\n\treturn x > 0.0031308 ? pow(x, 1.0 / 2.4) * 1.055 - 0.055 : x * 12.92;\n}\nvec3 srgb_oetf(vec3 x)\n{\n\tvec3 low = pow(x, vec3(1.0 / 2.4)) * 1.055 - 0.055;\n\tvec3 high = x * 12.92;\n\treturn mix(low, high, step(x, vec3(0.0031308)));\n}\n/// @}\n","name":"Common","description":"","type":"common"}]}