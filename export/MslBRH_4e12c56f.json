{"ver":"0.1","info":{"id":"MslBRH","date":"1495010375","viewed":136,"name":"kaleidoskop","username":"pixartist","description":"Kaleidoskop effect. load any texture you want (or another layer)","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["kaleidoskop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int r = 200; // size of the triangles\nconst float s3 = sqrt(3.0);\nvec2 rot(vec2 v, float a)\n{\n    float ca = cos(a);\n    float sa = sin(a);\n    return vec2(ca*v.x - sa*v.y, sa*v.x + ca*v.y);\n}\nvec2 rotN(vec2 v, float a, float scale)\n{\n    \n    v -= vec2(0.5);\n    v = rot(v, a);\n    return (v * scale + vec2(0.5));\n}\nivec3 getTri(vec2 fragCoord, out vec2 inCoord)\n{\n\n    ivec3 loc = ivec3(0.0);\n    vec2 uv = fragCoord / float(r);\n    \n    \n    vec3 floc = vec3(2.0 * uv.y/s3, uv.x - uv.y/s3, uv.x + uv.y/s3);\n    while(floc.x < 0.0)\n        floc.x += 3.0;\n    while(floc.y < 0.0)\n        floc.y += 3.0;\n    while(floc.z < 0.0)\n        floc.z += 3.0;\n    loc = ivec3(floc);\n    floc = fract(floc);\n    if(loc.x%3 == 0 && loc.y%3 == 0 && loc.z%3 == 0)\n    \tinCoord = vec2(0.5 * (floc.y+floc.z), floc.x);\n\tif(loc.x%3 == 0 && loc.y%3 == 0 && loc.z%3 == 1)\n    \tinCoord = vec2(1.0 - 0.5 * (floc.x+floc.z), 1.0 - floc.y);\n    if(loc.x%3 == 0 && loc.y%3 == 2 && loc.z%3 == 0)\n    \tinCoord = vec2(- 0.5 * (floc.y - floc.x - 1.0), floc.z);\n    if(loc.x%3 == 0 && loc.y%3 == 1 && loc.z%3 == 1)\n    \tinCoord = vec2(1.0 - 0.5 * (floc.x+floc.z),  floc.y);\n    if(loc.x%3 == 0 && loc.y%3 == 2 && loc.z%3 == 2)\n    \tinCoord = vec2(0.5 * (1.0 + floc.x - floc.y), 1.0 - floc.z);\n    if(loc.x%3 == 0 && loc.y%3 == 1 && loc.z%3 == 2)\n    \tinCoord = vec2(0.5 * (floc.y+floc.z), 1.0 - floc.x);\n    \n    if(loc.x%3 == 1 && loc.y%3 == 1 && loc.z%3 == 2)\n    \tinCoord = vec2(0.5 * (floc.y+floc.z), floc.x);\n\tif(loc.x%3 == 1 && loc.y%3 == 1 && loc.z%3 == 0)\n    \tinCoord = vec2(1.0 - 0.5 * (floc.x+floc.z), 1.0 - floc.y);\n    if(loc.x%3 == 1 && loc.y%3 == 0 && loc.z%3 == 2)\n    \tinCoord = vec2(- 0.5 * (floc.y - floc.x - 1.0), floc.z);\n    if(loc.x%3 == 1 && loc.y%3 == 2 && loc.z%3 == 0)\n    \tinCoord = vec2(1.0 - 0.5 * (floc.x+floc.z),  floc.y);\n    if(loc.x%3 == 1 && loc.y%3 == 0 && loc.z%3 == 1)\n    \tinCoord = vec2(0.5 * (1.0 + floc.x - floc.y), 1.0 - floc.z);\n    if(loc.x%3 == 1 && loc.y%3 == 2 && loc.z%3 == 1)\n    \tinCoord = vec2(0.5 * (floc.y+floc.z), 1.0 - floc.x);\n    \n    if(loc.x%3 == 2 && loc.y%3 == 2 && loc.z%3 == 1)\n    \tinCoord = vec2(0.5 * (floc.y+floc.z), floc.x);\n\tif(loc.x%3 == 2 && loc.y%3 == 2 && loc.z%3 == 2)\n    \tinCoord = vec2(1.0 - 0.5 * (floc.x+floc.z), 1.0 - floc.y);\n    if(loc.x%3 == 2 && loc.y%3 == 1 && loc.z%3 == 1)\n    \tinCoord = vec2(- 0.5 * (floc.y - floc.x - 1.0), floc.z);\n    if(loc.x%3 == 2 && loc.y%3 == 0 && loc.z%3 == 2)\n    \tinCoord = vec2(1.0 - 0.5 * (floc.x+floc.z),  floc.y);\n    if(loc.x%3 == 2 && loc.y%3 == 1 && loc.z%3 == 0)\n    \tinCoord = vec2(0.5 * (1.0 + floc.x - floc.y), 1.0 - floc.z);\n    if(loc.x%3 == 2 && loc.y%3 == 0 && loc.z%3 == 0)\n    \tinCoord = vec2(0.5 * (floc.y+floc.z), 1.0 - floc.x);\n    \n    return loc;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 localCoord;\n    ivec3 coord = getTri(fragCoord.xy, localCoord);\n    vec3 color = vec3(0.0);\n   // localCoord.x *= cos(iTime);\n   // localCoord.y *= sin(iTime);\n    uv = rotN(localCoord, sin(iTime*0.05) * 20.0,0.7);\n    uv.x /= iResolution.x / iResolution.y;\n\tfragColor = texture(iChannel0, uv);\n    //fragColor = vec4(coord%ivec3(3), 1.0) / 2.0;\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//custom random function\nfloat seed;\nvec2 uv;\nfloat rand() \n{ \n    vec2 s = uv;\n    float n = fract(sin(seed+=1.0)*43758.5453123);\n    return fract(n + fract(sin(dot(vec2(n * s.y, s.x)*0.123,vec2(12.9898,78.233))) * 43758.5453));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = fragCoord.xy / iResolution.xy;\n    seed = (uv.y * 9.1234 + (iTime +4324.123) * 0.523413187) * sqrt(uv.x * 0.77777777 * (iTime + 923.132));\n\tif(iFrame < 1)\n    {\n        if(rand() < 0.1)\n        {\n    \t\tfragColor = vec4(rand(), rand(), rand(), 1.0);\n        }\n    }\n    else\n        fragColor = texture(iChannel0, uv);\n}","name":"Buf B","description":"","type":"buffer"}]}