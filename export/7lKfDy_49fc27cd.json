{"ver":"0.1","info":{"id":"7lKfDy","date":"1665214315","viewed":139,"name":"Math Series: P Functions","username":"nllorcajr","description":"Summary: A basic study and visualization of math functions used commonly in game development.\nIm new here in shadertoy, for any mistake, or needs improvement, \nyour constructive feedback is highly appreciated!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: Noel Llorca Jr, Technical Artist, Ubisoft PHL\n\n// Summary: A basic study and visualization of math functions used commonly in game development.\n// Im new here in shadertoy, for any mistake, or needs improvement, \n// your constructive feedback is highly appreciated!\n\n// Parameters: Size1, Size2, UV, function, background, linecolor\n// Draw Line Fn\nvec3 dL(float s1, float s2,vec2 st, float fn, vec3 c1,  vec3 c2)\n{\n  float line = smoothstep( fn - s1, fn, st.y) - smoothstep( fn, fn + s2, st.y);\n  return c1  * (1. - line) + line * c2;\n}\n\n// Time Line Fn\nvec3 tmFn(float s1, float s2,vec2 st, float fn, vec3 c1,  vec3 c2)\n{\n  float line = smoothstep( fn - s1, fn, st.x) - smoothstep( fn, fn + s2, st.x);\n  return c1  * (1. - line) + line * c2;\n}\n\n// Dot Fn\nvec3 dtFn (float size1, float size2, vec2 q, float fn, float pos, vec3 c0, vec3 c1)\n{\n    float t = 1. - smoothstep(size1, size2, length(q - vec2(fn, pos) )); \n    return c0  * (1. - t) + t * c1;\n}\n\n// Line Gradient Fn\nvec3 lgFn (vec3 c1,vec3 c2, float fn)\n{\n    return mix(c1, c2, fn); \n}\n\n\n// FUNCTIONS\n\n// linear Fn\nfloat lFn (float b, float k)\n{\n    float c =  b ;\n    return clamp(c * k,0., 1.); \n}\n// quadratic Fn\nfloat qFn (float b, float k)\n{\n    float c =  b * b;\n    return clamp(c * k,0., 1.); \n}\n// cubic Fn\nfloat cFn (float b, float k)\n{\n    float c =  b * b * b;\n    return clamp(c * k,0., 1.);\n} \n// sqrtRoot Fn\nfloat sqFn (float b, float k)\n{\n    float c =  sqrt(b);\n    return clamp(c * k,0., 1.);\n} \n\n// pow Fn\nfloat pwFn (float b, float k)\n{\n    float c =  pow(b, k);\n    return clamp(c * k,0., 1.);\n} \n\n\n// my Function\nfloat myFn (float u, float k)\n{\n    float curve = (u * u  * (u / (k) * -1. + 2.));\n    return clamp((curve), 0., 1.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 q = fragCoord/iResolution.xy;\n    \n    // Colors\n    vec3 col = vec3(.23);\n    vec3 c2 = vec3(1.000,0.867,0.584);\n    vec3 c3 = vec3(1.000,0.459,0.600);\n    vec3 c4 = vec3(0.976,0.580,0.494);\n    vec3 c5 = vec3(0.949,1.000,0.000);\n    vec3 c6 = vec3(1.000,0.000,0.635);\n    vec3 c7 = vec3(1.000,0.000,0.000);\n    vec3 c8 = vec3(0.686,0.929,0.471); \n    vec3 c9 = vec3(0.933,0.569,0.871);\n    vec3 Dot = vec3(0.859,0.859,0.859);\n    vec3 tmc = vec3(0.820,0.820,0.820); //Time Color\n    \n    // Time and Speed\n    float ts = min(1.,fract(iTime / 3.5));          \n     \n    // MATH VISUALIZATION HERE:\n    //static line\n    //animated line\n    //racing Dot\n    //racing Dot on animated curve\n    \n    //col = dL(.01, .01, q, lFn(q.x, 1.), col, c2); \n    col = dL(.01, .01, q, lFn(q.x, ts), col, lgFn(c2, c3,qFn(q.x, ts) ));\n    col = vec3(dtFn(.02,.02, q, lFn(ts, 1.) , .99, col, lgFn(c2, c3,qFn(q.x, ts ) )));\n    col = vec3(dtFn(.01,.03, q, ts , lFn(q.x, ts), col, lgFn(c2, c3,qFn(q.x, ts ) )));\n    \n    \n    //col = dL(.01, .01, q, qFn(q.x, 1.), col, c3);\n    col = dL(.01, .01, q, qFn(q.x, ts), col, lgFn(c3, c4,qFn(q.x, ts ) ));\n    col = vec3(dtFn(.02,.02, q, qFn(ts, 1.) , .99, col, lgFn(c3, c4,qFn(q.x, ts ) )));\n    col = vec3(dtFn(.01,.03, q, ts , qFn(q.x, ts), col, lgFn(c3, c4,qFn(q.x, ts ) )));\n    \n    //col = dL(.01, .01, q, cFn(q.x, 1.), col, c4);\n    col = dL(.01, .01, q, cFn(q.x, ts), col, lgFn(c5, c6,cFn(q.x, ts ) ));\n    col = vec3(dtFn(.02,.02, q, cFn(ts, 1.) , .99, col, lgFn(c5, c6,cFn(q.x, ts ) )));\n    col = vec3(dtFn(.01,.03, q, ts , cFn(q.x, ts), col, lgFn(c5, c6,cFn(q.x, ts ) )));\n    \n    //col = dL(.01, .01, q, sqFn(q.x, 1.), col, c5);\n    col = dL(.01, .01, q, sqFn(q.x, ts), col, lgFn(c7, c8,sqFn(q.x, ts ) ));\n    col = vec3(dtFn(.02,.02, q, sqFn(ts, 1.) , .99, col, lgFn(c7, c8,sqFn(q.x, ts ) )));\n    col = vec3(dtFn(.01,.03, q, ts , sqFn(q.x, ts), col, lgFn(c7, c8,sqFn(q.x, ts ) )));\n    \n    //col = dL(.01, .01, q, myFn(q.x, 1.), col, c6);\n    col = dL(.01, .01, q, myFn(q.x, ts), col, lgFn(c9, c8,sqFn(q.x, ts ) ));\n    col = vec3(dtFn(.02,.02, q, myFn(ts, 1.) , .99, col, lgFn(c9, c8,sqFn(q.x, ts ) )));\n    col = vec3(dtFn(.01,.03, q, ts , myFn(q.x, ts), col, lgFn(c9, c8,sqFn(q.x, ts ) )));\n    \n    //col = dL(.01, .01, q, pwFn(q.x, 20.), col, c7);\n    col = dL(.01, .01, q, pwFn(q.x, ts * 20.), col, lgFn(c2, c3,pwFn(q.x, ts * 20.) ));\n    col = vec3(dtFn(.02,.02, q, pwFn(ts, 20.) , .99, col, lgFn(c2, c3,pwFn(q.x, ts * 20.) )));\n    col = vec3(dtFn(.01,.03, q, ts , pwFn(q.x, ts* 20.), col, lgFn(c2, c3,pwFn(q.x, ts * 20.) )));\n\n    \n    //Vertical Line (Time Color)\n    col = tmFn(.002, .002, q, lFn(ts, 1.), col, tmc);  \n    col = dL(.002, .002, q,  ts, col, tmc);\n    \n    \n    // Finally render!\n    fragColor  = vec4(col, 1.0);\n}\n\n//Realization:\n//exponential, quadratic, cubic are slower but end up in finish line at same exact time.\n//the purpose of the visualization, since Im not a mathematician, \n//is to FEEL the characteristics, in a visual artistic form.\n\n\n","name":"Image","description":"","type":"image"}]}