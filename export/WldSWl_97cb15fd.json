{"ver":"0.1","info":{"id":"WldSWl","date":"1581947260","viewed":210,"name":"Simple Spherical Shader","username":"redwater","description":"A simple spherical shader that wraps a 2D texture onto a sphere rotating around a vertical axis.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["simple","sphere","rotate","shader","rotating","easy","rotation","spherical","spin","spinning","wrap","globe","vertical","wrapper"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The constant Pi.\nfloat pi = 3.14159;\n\n// Sphere radius, relative.\nfloat radius_rel = 0.45;\n\n// Sphere centre, relative.\nvec2 centre_rel = vec2(0.5, 0.5);\n\n// Sphere rotation speed, rpm.\nfloat rot_vel = 5.0;\n\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n    // Sphere radius, px.\n    float radius = radius_rel * min(iResolution.x, iResolution.y);\n    \n    // Sphere centre, px.\n    vec2 centre = centre_rel * iResolution.xy;\n    \n    // Screen coordinates relative to sphere centre.\n    vec2 coord_rel = coord - centre;\n    \n    // Relative screen coordinates normalised to [-1, 1].\n    vec2 coord_rel_norm = coord_rel / radius;\n    \n    // Relative and normalised screen coordinates squared.\n    vec2 coord_rel_norm_sq = coord_rel_norm * coord_rel_norm;\n\t\n    // Output black if screen coordinates outside sphere.\n    if (coord_rel_norm_sq.x + coord_rel_norm_sq.y > 1.0)\n    {    \n\t\tcolor = vec4(0.0, 0.0, 0.0, 1.0);\n    \treturn;\n    }\n    \n    // Ratio between parallel radius and sphere radius.\n    float radius_ratio = cos(asin(coord_rel_norm.y));\n\t\n    // Texture coordinates for these screen coordinates.\n    vec2 coord_tex = 0.5 + vec2(\n        asin(coord_rel_norm.x / radius_ratio),\n        asin(coord_rel_norm.y)) / pi;\n\t\n    // Rotate sphere according to elapsed time.\n    coord_tex.x -= rot_vel * iTime / 30.0;\n    \n\t// Output color at these texture coordinates.\n    color = texture(iChannel0, coord_tex);\n}\n","name":"Image","description":"","type":"image"}]}