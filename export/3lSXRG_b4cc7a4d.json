{"ver":"0.1","info":{"id":"3lSXRG","date":"1566196402","viewed":195,"name":"sculpt attempt","username":"MonterMan","description":"try sculpt!\ncredit of the sdf goes to iq's Sculpture III","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["sculpt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord / iResolution.xy;\n    \n    float ct = 2.0;\n    float r = texture(iChannel0, (1.0 - ct*0.007) * uv).r;\n    float g = texture(iChannel0, (1.0 - ct*0.008) * uv).g;\n    float b = texture(iChannel0, (1.0 - ct*0.009) * uv).b;\n    \n    vec3 col = texture(iChannel0, uv).rgb;\n    col = sqrt(vec3(r, g, b));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"mat2 rotate2d(float theta)\n{\n    return mat2(cos(theta), -sin(theta), sin(theta), cos(theta));\n}\n\nfloat map(vec3 p)\n{\n    float amp = 1.0;\n    float freq = 2.0;\n    for (int i = 0; i < 3; ++i)\n    {\n        float s = i % 2 == 0? 1.0: -1.0;\n        p.xz *= rotate2d(s * (1.0 + 3.0*float(i)) * 0.1 * iTime);\n        p += amp * sin(freq * p.zxy);\n        amp *= 0.5;\n        freq *= 2.1;\n    }\n    return length(p) - 1.0;\n}\n\nvec3 calc_n(vec3 p)\n{\n    float e = 0.001;\n    float d = map(p);\n    float dx = map(p + vec3(e, 0, 0)) - d;\n    float dy = map(p + vec3(0, e, 0)) - d;\n    float dz = map(p + vec3(0, 0, e)) - d;\n    return normalize(vec3(dx, dy, dz));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord / iResolution.xy;\n   \tuv = 2.0 * uv - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n\tfloat camt = 0.2*iTime;\n    float camdist = 3.0;\n    vec3 ro = camdist*vec3(cos(camt), 0, sin(camt));\n    vec3 at = vec3(0, 0, 0);\n    vec3 camz = normalize(at - ro);\n    vec3 camx = normalize(cross(vec3(0, 1, 0), camz));\n    vec3 camy = cross(camz, camx);\n    vec3 rd = normalize(uv.x * camx + uv.y * camy + 1.37 * camz);\n    \n    int id = -1;\n    float t = 0.0;\n    int i = 0;\n    for (i = 0; i < 256; ++i)\n    {\n        float d = 0.1*map(ro + t*rd);\n        if (d < 0.001) { id = 0; break; }\n        t += d;\n    }\n    float ao = 1.0 - pow(float(i) / 256.0, 0.5);\n    ao = ao;\n    \n    vec3 col = texture(iChannel0, rd).rgb;\n    if (id != -1)\n    {\n        vec3 p = ro + t*rd;\n        vec3 n = calc_n(p);\n        \n        vec3 l = normalize(vec3(0.5, 0.5, -0.5));\n        \n        vec3 diffuse = max(0.0, dot(n, l)) * vec3(0.6);\n        vec3 ambient = textureLod(iChannel1, n, 6.0).rgb;\n        col = 1.3 * ambient * vec3(ao) + diffuse;\n    }\n\n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}