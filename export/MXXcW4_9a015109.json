{"ver":"0.1","info":{"id":"MXXcW4","date":"1726188877","viewed":24,"name":"Test 3only2 pass Gauss + Ridged","username":"zhavoronoki","description":"-","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["shaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = texture(iChannel0, uv).rgb;\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const int blurRad = 32;\nconst float weight[32] = float[] (0.049870, 0.049482, 0.048336, 0.046484, 0.044010, 0.041022, 0.037644, 0.034009, 0.030248, 0.026486, 0.022832, 0.019377, 0.016190, 0.013318, 0.010785, 0.008599, 0.006749, 0.005215, 0.003968, 0.002972, 0.002191, 0.001591, 0.001137, 0.000800, 0.000554, 0.000378, 0.000254, 0.000168, 0.000109, 0.000070, 0.000044, 0.000027);\n\n#define PI 3.14159265358979323846\nfloat random(vec2 p)\n{\n    return fract(sin(dot(p.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(random(ip),random(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(random(ip+vec2(0.0,1.0)),random(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}\n\n\nvec3 hash( vec3 p ) \n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n            dot(p,vec3(269.5,183.3,246.1)),\n            dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\n\nfloat ridgedFBM(vec2 p, int octaves, float persistence, float lacunarity) {\n  float amplitude = 0.5;\n  float frequency = 10.0;\n  float total = 0.0;\n  float normalization = 0.0;\n\n  for (int i = 0; i < octaves; ++i) {\n    float noiseValue = noise(p * frequency);\n    noiseValue = abs(noiseValue);\n    noiseValue = 1.0 - noiseValue;\n\n    total += noiseValue * amplitude;\n    normalization += amplitude;\n    amplitude *= persistence;\n    frequency *= lacunarity;\n  }\n\n  total /= normalization;\n  total *= total;\n\n  return total;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 fragSize = vec2(1)/iResolution.xy;\n    \n    vec3 col = texture(iChannel0, uv).rgb  * weight[0]; // center pixel\n\nfor(int i = 1; i < blurRad; ++i)\n        {\n            col += texture(iChannel0, uv + vec2(fragSize.x * float(i), 0.0)).rgb * weight[i];\n            col += texture(iChannel0, uv - vec2(fragSize.x * float(i), 0.0)).rgb * weight[i];\n        }\n\n\n\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 fragSize = vec2(1)/iResolution.xy;\n    \n    vec3 col = texture(iChannel0, uv).rgb  * weight[0]; // center pixel\n\nfor(int i = 1; i < blurRad; ++i)\n        {\n            col += texture(iChannel0, uv + vec2(0.0, fragSize.y * float(i))).rgb * weight[i];\n            col += texture(iChannel0, uv - vec2(0.0, fragSize.y * float(i))).rgb * weight[i];\n        }\n\n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"float uPower = 0.01;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \n    vec2 uv = fragCoord / iResolution.xy;\n    float ridged = ridgedFBM(uv,4, 0.9, 10.0);\n\n    vec3 color = texture(iChannel0, uv+ridged*uPower).rgb;\n    fragColor = vec4(vec3(color), 1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}