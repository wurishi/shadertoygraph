{"ver":"0.1","info":{"id":"7ddSWr","date":"1633105569","viewed":77,"name":"grid frist test","username":"liamzi","description":"grid frist test16","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["gridfristtest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#if HW_PERFORMANCE==0\n//#define AA 1\n//#else\n//#define AA 2   // make this 2 or 3 for antialiasing\n//#endif\n\n#define ZERO (min(iFrame, 0))\n\nvec2 less(in vec2 d1, in vec2 d2 )\n{\n\treturn (d1.x < d2.x) ? d1 : d2;\n}\n\nfloat Sphere(in vec3 p, in float s )\n{\n    return length(p) - s;\n}\n\nvec2 Heart(in vec3 q)\n{\n    q *= 100.0;\n\n    vec2 res = vec2(q.y, -0.0);\n    float r = 25.0;\n    q.y -= r;\n    float ani = pow( 0.5 + 0.5 * sin(6.28318 * iTime + q.y / 25.0), 4.0 );\n    //float ani = 1.0;\n    q *= 1.0 - 0.2 * vec3(1.0, 0.5, 1.0) * ani;\n    q.y -= 1.5 * ani;\n    float x = abs(q.x);\n    float y = q.y;\n    float z = q.z;\n    y = 4.0 + y * 1.2 - x * sqrt(max((35.0 - x) / r, 0.0));\n    z *= 2.0 - y / r;\n    float d = sqrt(x * x + y * y + z * z) - r;\n    d = d / 7.0;\n    float tmp = step(d, res.x);\n    res = vec2(d * tmp + d , 1.0);\n    res.x /= 100.0;\n    \n    return res;\n}\n\n\nvec2 map(in vec3 pos)\n{\n    vec2 res = vec2(1e10, 0.0);\n    res = less(res, vec2(Sphere(pos - vec3(-0.1, 0.25, -1.0),  0.25),  3.0));\n    res = less(res, vec2(length(Heart(pos - vec3(1.5, 0.0, -1.0)).x), 8.0));\n\n    return res;\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i < 4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e * map(pos + 0.0005*e).x;\n      //if( n.x+n.y+n.z>100.0 ) break;\n    }\n    return normalize(n);\n}\n\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n    // bounding volume\n    float tp = (0.8-ro.y)/rd.y; if( tp>0.0 ) tmax = min( tmax, tp );\n\n    float res = 1.0;\n    float t = mint;\n    for( int i=ZERO; i<32; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n\n        float s = clamp(32.0*h/t,0.0, 1.0);\n        res = min( res, s*s*(3.0-2.0*s) );\n        // t += clamp( h, 0.02, 0.2 );\n        t += clamp(h, 0.02, 0.2);\n        if( res < 0.004 || t > tmax ) break;\n\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i = ZERO; i < 5; i++ )\n    {\n        float h = 0.01 + 0.12 * float(i) / 4.0;\n        float d = map( pos + h * nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) * (0.5+0.5*nor.y);\n}\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox( in vec2 p, in vec2 dpdx, in vec2 dpdy )\n{\n    // filter kernel\n    vec2 w = abs(dpdx) + abs(dpdy) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0 * (abs(fract((p - 0.5 * w) * 0.5) - 0.5)-abs(fract((p + 0.5 * w) * 0.5)-0.5)) / w;\n    // xor pattern\n    return 0.5 - 0.5 * i.x * i.y;                  \n}\n\n\nmat3 setCamera(in vec3 ro, in vec3 ta, float cr)\n{\n    vec3 cw = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.0);\n    vec3 cu = normalize(cross(cw, cp));\n    vec3 cv = cross(cu, cw);\n    return mat3(cu, cv, cw);\n}\n\n// https://iquilezles.org/articles/boxfunctions\nvec2 iBox( in vec3 ro, in vec3 rd, in vec3 rad ) \n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\treturn vec2( max( max( t1.x, t1.y ), t1.z ),\n\t             min( min( t2.x, t2.y ), t2.z ) );\n}\n\nvec2 raycast( in vec3 ro, in vec3 rd )\n{\n    vec2 res = vec2(-1.0,-1.0);\n\n    float tmin = 1.0;\n    float tmax = 20.0;\n\n    // raytrace floor plane\n    float tp1 = (0.0-ro.y)/rd.y;\n    if( tp1 > 0.0 )\n    {\n        tmax = min( tmax, tp1 );\n        res = vec2( tp1, 1.0 );\n    }\n    // else \n    // {\n    //     return res;\n    // }\n    \n    // raymarch primitives   \n    vec2 tb = iBox(ro - vec3(0.0, 0.4, -0.5), rd, vec3(2.5, 0.41, 3.0));\n    if( tb.x < tb.y && tb.y > 0.0 && tb.x < tmax)\n    {\n        //return vec2(tb.x,2.0);\n        tmin = max(tb.x,tmin);\n        tmax = min(tb.y,tmax);\n\n        float t = tmin;\n        for( int i=0; i<300 && t<tmax; i++ )\n        {\n            vec2 h = map( ro+rd*t );\n            if( abs(h.x)<(0.0001*t) )\n            { \n                res = vec2(t,h.y); \n                break;\n            }\n            t += h.x;\n        }\n    }\n    \n    return res;\n}\n\nvec3 render(in vec3 ro, in vec3 rd, in vec3 rdx, in vec3 rdy)\n{\n    vec3 col = vec3(1.0, 1.0, 1.0) * max(rd.y, 0.0);\n    vec2 res = raycast(ro, rd);\n    float t = res.x;\n    float m = res.y;\n    \n    //if( m > -0.5)\n    {\n        vec3 pos = ro + t * rd;\n        vec3 nor = (m < 1.5) ? vec3(0.0, 1.0, 0.0) : calcNormal(pos);\n        // vec3 nor = (m > sin(iTime)) ? vec3(0.0, cos(iTime) + 1.0, sin(iTime)) : calcNormal(pos);\n        vec3 ref = reflect(rd, nor);\n        \n        col = 0.2 + 0.2 * sin(m * 2.0 + vec3(0.0, 1.0, 2.0));\n        float ks = 1.0;\n        float fre = clamp( 1.0 + dot(nor,rd), 0.0, 1.0 );\n        float occ = calcAO(pos, nor);\n        if(m < 1.5)\n        {\n            vec3 dpdx = ro.y * (rd / rd.y - rdx / rdx.y);\n            vec3 dpdy = ro.y * (rd / rd.y - rdy / rdy.y);\n            float f = checkersGradBox(3.0 * pos.xz, 3.0 * dpdx.xz, 3.0 * dpdy.xz);\n            col = 0.15 + f * vec3(0.05);\n            ks = 0.4;\n        }\n        \n       \n        \n        vec3 light = normalize(vec3(-1.5, 0.6, -0.6));\n        vec3 hal = normalize(light - rd);\n        float dif = clamp(dot(nor, light), 0.0, 1.0) * calcSoftshadow( pos, light, 0.02, 2.5);\n        \n        float spe = pow(clamp(dot(nor, hal), 0.0, 1.0), 16.0);\n        spe *= dif;\n        spe *= 0.04 + 0.96 * pow(clamp(1.0 - dot(hal, light), 0.0, 1.0), 5.0);\n        col += col * 2.20 * dif * vec3(1.30, 1.00, 0.70);\n        col += 5.00 * spe * vec3(1.30, 1.00, 0.70) * ks;\n        //col += tmp;\n       // col += spe;\n    }\n    \n\n    return vec3(clamp(col, 0.0, 1.0));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy / iResolution.xy;\n    float time = 32.0 + iTime * 1.5;\n    vec3 ta = vec3(0.5, 0.5, -0.6);\n   \n    // vec3 ro = ta + vec3(4.5 *  sin(mo.x), 1.3 + 1.0 * mo.y, 4.5 * cos(mo.x));\n    vec3 ro = ta + vec3(4.5 * sin(iTime) + mo.x, 1.3 + 1.0 * mo.y, 4.5 * cos(iTime) + cos(mo.x) );\n    mat3 ca = setCamera(ro, ta, 0.0);\n    vec3 total = vec3(0.0);\n    \n    vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    const float f1 = 2.5;\n    \n    vec3 rd = ca * normalize(vec3(p, f1));\n    vec2 px = (2.0 * (fragCoord + vec2(1.0, 0.0)) - iResolution.xy) / iResolution.y;\n    vec2 py = (2.0 * (fragCoord + vec2(0.0, 1.0)) - iResolution.xy) / iResolution.y;\n    vec3 rdx = ca * normalize(vec3(px, f1));\n    vec3 rdy = ca * normalize(vec3(py, f1));\n    \n    vec3 col = render(ro, rd, rdx, rdy);\n    \n    col = pow(col, vec3(0.4545));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}