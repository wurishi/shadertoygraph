{"ver":"0.1","info":{"id":"tdfBWs","date":"1589257335","viewed":324,"name":"Trippier Menger Journey","username":"kowbell","description":"A fork of Snytopia's excellent shadertoy: https://www.shadertoy.com/view/Mdf3z7\n\n","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","colorful","fractals","menger","trippy","psychadelic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Original by Snytopia (https://www.shadertoy.com/view/Mdf3z7)\n// I've made very very minimal changes to it. All credit goes to them :)\n// This one is modified to have ~ t r i p p i e r ~ parameters!\n\n\n// /////////////////////////////////////////////////////////////////// //\n// Feel free to mess with the values here,                             //\n// then hit the Play button down in the bottom left of this text area! //\n// /////////////////////////////////////////////////////////////////// //\n\n\n// Try between 8 and 40!\n#define MaxSteps 30\n\n// Noise intensity\n// 1 = everything is hella noise\n// 0.05 = what I tend to use\n#define Jitter 0.00\n\n// Default 0.5\n#define ForwardSpeed 0.1\n\n// This one goes back and forth a little\n// Default 0.125\n#define ForwardSpeed2 0.0\n\n\n\n\n// 0 = center, -1 = right/up, +1 = left/down\n#define CenterOffset vec2(0.0, 0.0)\n\n\n\n// How deep/intricate the fractal goes; higher numbers hurts performance (probably?)\n// Values above 10 or so aren't really perceptively different\n// Values below 4 look like random goop, which is kinda cool\n#define Iterations 10\n\n// No time to explain all these, just mess with 'em!\n#define Scale 3.0\n#define FieldOfView 1.0\n#define FudgeFactor 0.7\n#define NonLinearPerspective 3.0\n\n// Modified time used for color effects\n// Haven't hooked this up to tweak how fast you \"fly through\" everything.\n#define xTime iTime * 0.1\n#define sTime (sin(xTime) + 2.0) / 0.5\n#define cTime (cos(xTime) + 2.0) / 0.5\n\n// Ambient brightness\n#define Ambient 0.3\n// Strength of the two light colors\n#define Diffuse 0.9\n\n// Tweak these!\n#define LightColor hsv2rgb(vec3(cTime, 3.0, 1.5))\n#define LightColor2 hsv2rgb(vec3(sTime, 3.0, 1.5))\n\n\n#define Wobble 0.4\n// long-term wobbliness (builds up over time)\n#define Wobble2 0.0\n\n//#define WobbleOffset (((iMouse.x / iResolution.x) - 0.5) * 10.0)\n// -3.0 = straight\n#define WobbleOffset -3.0\n\n\n// Does absolutely CRAZY stuff\n//#define Offset (vec3(0.92858, 0.92858, 0.32858)* ( ((iMouse.x/iResolution.x)-0.5) * 10.0 ) )\n#define Offset (vec3(0.92858, 0.92858, 0.32858)* (1.563 - 0.00))\n//#define Offset (vec3(0.92858, 0.92858, 0.32858)* (1.563 + (((iMouse.x/iResolution.x)-0.5)) ))\n\n// /////////////////////////////////////////////////////////////////// //\n// Messing with these won't do you much good...                        //\n// /////////////////////////////////////////////////////////////////// //\n#define MinimumDistance 0.0009\n#define normalDistance  0.0002\n\n#define LightDir vec3(1.0)\n#define LightDir2 vec3(1.0,-1.0,1.0)\n\n#define PI 3.141592\n\n\n\n\n// from iq, https://www.shadertoy.com/view/lsS3Wc\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec2 rotate(vec2 v, float a) {\n\treturn vec2(cos(a)*v.x + sin(a)*v.y, -sin(a)*v.x + cos(a)*v.y);\n}\n\n// Two light sources. No specular \nvec3 getLight(in vec3 color, in vec3 normal, in vec3 dir) {\n\tvec3 lightDir = normalize(LightDir);\n\tfloat diffuse = max(0.0,dot(-normal, lightDir)); // Lambertian\n\t\n\tvec3 lightDir2 = normalize(LightDir2);\n\tfloat diffuse2 = max(0.0,dot(-normal, lightDir2)); // Lambertian\n\t\n\treturn\n\t(diffuse*Diffuse)*(LightColor*color) +\n\t(diffuse2*Diffuse)*(LightColor2*color);\n}\n\n\n// DE: Infinitely tiled Menger IFS.\n//\n// For more info on KIFS, see:\n// http://www.fractalforums.com/3d-fractal-generation/kaleidoscopic-%28escape-time-ifs%29/\nfloat DE(in vec3 z)\n{\n\t// enable this to debug the non-linear perspective\n    /**\n    z = fract(z);\n    float d=length(z.xy-vec2(0.5));\n    d = min(d, length(z.xz-vec2(0.5)));\n    d = min(d, length(z.yz-vec2(0.5)));\n    return d-0.01;\n\t**/\n    \n\t// Folding 'tiling' of 3D space;\n\tz  = abs(1.0-mod(z,2.0));\n\n\tfloat d = 1000.0;\n\tfor (int n = 0; n < Iterations; n++) {\n\t\tz.xy = rotate(z.xy,4.0+2.0*cos( ForwardSpeed2 * iTime));\t\t\n\t\tz = abs(z);\n\t\tif (z.x<z.y){ z.xy = z.yx;}\n\t\tif (z.x< z.z){ z.xz = z.zx;}\n\t\tif (z.y<z.z){ z.yz = z.zy;}\n\t\tz = Scale*z-Offset*(Scale-1.0);\n\t\tif( z.z<-0.5*Offset.z*(Scale-1.0))  z.z+=Offset.z*(Scale-1.0);\n\t\td = min(d, length(z) * pow(Scale, float(-n)-1.0));\n\t}\n\t\n\treturn d-0.001;\n}\n\n// Finite difference normal\nvec3 getNormal(in vec3 pos) {\n\tvec3 e = vec3(0.0,normalDistance,0.0);\n\t\n\treturn normalize(vec3(\n\t\t\tDE(pos+e.yxx)-DE(pos-e.yxx),\n\t\t\tDE(pos+e.xyx)-DE(pos-e.xyx),\n\t\t\tDE(pos+e.xxy)-DE(pos-e.xxy)\n\t\t\t)\n\t\t);\n}\n\n// Solid color \nvec3 getColor(vec3 normal, vec3 pos) {\n\treturn vec3(1.0);\n}\n\n\n// Pseudo-random number\n// From: lumina.sourceforge.net/Tutorials/Noise.html\nfloat rand(vec2 co){\n\treturn fract(cos(dot(co,vec2(4.898,7.23))) * 23421.631);\n}\n\nvec4 rayMarch(in vec3 from, in vec3 dir, in vec2 fragCoord) {\n\t// Add some noise to prevent banding\n\tfloat totalDistance = Jitter*rand(fragCoord.xy+vec2(iTime));\n\tvec3 dir2 = dir;\n\tfloat distance;\n\tint steps = 0;\n\tvec3 pos;\n\tfor (int i=0; i < MaxSteps; i++) {\n\t\t// Non-linear perspective applied here.\n\t\tdir.zy = rotate(dir2.zy, (totalDistance*WobbleOffset) + totalDistance*cos(Wobble2 * iTime * Wobble)*NonLinearPerspective);\n\t\t\n\t\tpos = from + totalDistance * dir;\n\t\tdistance = DE(pos)*FudgeFactor;\n\t\ttotalDistance += distance;\n\t\tif (distance < MinimumDistance) break;\n\t\tsteps = i;\n\t}\n\t\n\t// 'AO' is based on number of steps.\n\t// Try to smooth the count, to combat banding.\n\tfloat smoothStep =   float(steps) + distance/MinimumDistance;\n\tfloat ao = 1.1-smoothStep/float(MaxSteps);\n\t\n\t// Since our distance field is not signed,\n\t// backstep when calc'ing normal\n\tvec3 normal = getNormal(pos-dir*normalDistance*3.0);\n\t\n\tvec3 color = getColor(normal, pos);\n\tvec3 light = getLight(color, normal, dir);\n\tcolor = (color*Ambient+light)*ao;\n\treturn vec4(color,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Camera position (eye), and camera target\n\tvec3 camPos = ForwardSpeed*iTime*vec3(1.0,0.0,0.0);\n\tvec3 target = camPos + vec3(1.0,0.0*cos(iTime),0.0*sin(0.4*iTime)); // NOTE - v trippy if you play with these values\n\tvec3 camUp  = vec3(0.0,1.0,0.0);\n\t\n\t// Calculate orthonormal camera reference system\n\tvec3 camDir   = normalize(target-camPos); // direction for center ray\n\tcamUp = normalize(camUp-dot(camDir,camUp)*camDir); // orthogonalize\n\tvec3 camRight = normalize(cross(camDir,camUp));\n\t\n\tvec2 coord =-1.0+2.0*fragCoord.xy/iResolution.xy + CenterOffset;\n\tcoord.x *= iResolution.x/iResolution.y;\n\t\n\t// Get direction for this pixel\n\tvec3 rayDir = normalize(camDir + (coord.x*camRight + coord.y*camUp)*FieldOfView);\n\t\n\tfragColor = rayMarch(camPos, rayDir, fragCoord );\n}\n\n\n","name":"Image","description":"","type":"image"}]}