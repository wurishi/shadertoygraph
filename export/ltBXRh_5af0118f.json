{"ver":"0.1","info":{"id":"ltBXRh","date":"1441402620","viewed":2376,"name":"TwoPass Gaussian Blur vs OnePass","username":"starea","description":"Two-Pass Gaussian Blur; haven't done the gamma correction; haven't optimized using constants arrays.","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["blur","filter","gaussian","twopass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// TwoPass Gaussian Blur vs OnePass\n// Ruofei Du, www.duruofei.com\n// normpdf and onepass forked from https://www.shadertoy.com/view/XdfGDH\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#ifndef TWO_PASS_GAUSSIAN\n    vec3 res = vec3(0.0);\n\n    float Z = 0.0;\n    for (int j = 0; j <= kSize; ++j) {\n        kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n    }\n\n    for (int j = 0; j < mSize; ++j) {\n        Z += kernel[j];\n    }\n\n    for (int i=-kSize; i <= kSize; ++i) {\n        for (int j=-kSize; j <= kSize; ++j) {\n            res += kernel[kSize+j]*kernel[kSize+i]*texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iResolution.xy).rgb;\n\n        }\n    }\n\n    fragColor = vec4(res / (Z * Z), 1.0);\n#else\n    vec3 res = vec3(0.0);\n    float sigma = 7.0;\n    float Z = 0.0;\n    for (int j = 0; j <= kSize; ++j) {\n        kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n    }\n\n    for (int j = 0; j < mSize; ++j) {\n        Z += kernel[j];\n    }\n\n    for (int i=-kSize; i <= kSize; ++i) {\n        res += kernel[kSize+i]*texture(iChannel1, (fragCoord.xy+ vec2(0.0,float(i)) ) / iResolution.xy).rgb;\n    }\n    \n    \n    fragColor = vec4(res / Z, 1.0);\n#endif\n    \n    vec2 q = fragCoord.xy / iResolution.xy;\n    //fragColor.rgb *= 0.25 + 0.75 * pow( 16.0 * q.x * q.y * (1.0 - q.x) * (1.0 - q.y), 0.15 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 res = vec3(0.0);\n    \n    float Z = 0.0;\n    for (int j = 0; j <= kSize; ++j) {\n        kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n    }\n\n    for (int j = 0; j < mSize; ++j) {\n        Z += kernel[j];\n    }\n\n    for (int i=-kSize; i <= kSize; ++i) {\n        res += kernel[kSize+i]*texture(iChannel0, (fragCoord.xy+ vec2(float(i),0.0) ) / iResolution.xy).rgb;\n    }\n    \n    fragColor = vec4(res / Z, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const int mSize = 25;\nconst int kSize = (mSize-1)/2;\nconst float sigma = 7.0;\nfloat kernel[mSize];\n#define TWO_PASS_GAUSSIAN\n\n\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5 * x * x / (sigma * sigma)) / sigma;\n}\n","name":"Common","description":"","type":"common"}]}