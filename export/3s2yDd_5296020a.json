{"ver":"0.1","info":{"id":"3s2yDd","date":"1587598877","viewed":53,"name":"Noise & UV Mapping_HaoyuSui","username":"HaoyuSui","description":"Noise & UV Mapping","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","uvmapping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int RAY_STEPS = 256;\nconst float HALF_PI = 3.14159 * 0.5;\n\nconst vec3 a = vec3(0.5, 0.5, 0.4);\nconst vec3 b = vec3(0.5, 0.5, 0.43);\nconst vec3 c = vec3(0.46, 0.57, 0.4);\nconst vec3 d = vec3(0.63, 0.4233, -1.573);\n\nvec3 cosinePalette(float t) {\n    return clamp(a + b * cos(2.0 * 3.14159 * (c * t + d)), 0.0, 1.0);\n}\n\nvec3 cosinePalette1(float t) {\n    return clamp(d + b * sin(iTime) * cos(2.0 * 3.14159 * (a * t + c)), 0.0, 1.0);\n}\n\nfloat random1( vec2 p ) {\n    return fract(sin(dot(p,vec2(127.1,311.7)))*43758.5453);\n}\n\nfloat random12( vec2 p ) {\n    return fract(sin(dot(p,vec2(789.152,434.7)))*65433.6543);\n}\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nfloat mySmoothStep(float a, float b, float t) {\n    t = t*t*t*(t*(t*6.0 - 15.0) + 10.0);\n    return mix(a, b, t);\n}\n\nfloat WorleyNoise(vec2 uv)\n{\n    // Tile the space\n    vec2 uvInt = floor(uv);\n    vec2 uvFract = fract(uv);\n\n    float minDist = 1.0; // Minimum distance initialized to max.\n\n    // Search all neighboring cells and this cell for their point\n    for(int y = -1; y <= 1; y++)\n    {\n        for(int x = -1; x <= 1; x++)\n        {\n            vec2 neighbor = vec2(float(x), float(y));\n\n            // Random point inside current neighboring cell\n            vec2 point = random2(uvInt + neighbor);\n\n            // Animate the point\n            point = 0.5 + 0.5 * sin(iTime + 6.2831 * point); // 0 to 1 range\n\n            // Compute the distance b/t the point and the fragment\n            // Store the min dist thus far\n            vec2 diff = neighbor + point - uvFract;\n            float dist = length(diff);\n            minDist = min(minDist, dist);\n        }\n    }\n    return minDist;\n}\n\n\nfloat interpNoise2D(vec2 uv) {\n    vec2 uvFract = fract(uv);\n    float ll = random12(floor(uv));\n    float lr = random12(floor(uv) + vec2(1,0));\n    float ul = random12(floor(uv) + vec2(0,1));\n    float ur = random12(floor(uv) + vec2(1,1));\n\n    float lerpXL = mySmoothStep(ll, lr, uvFract.x);\n    float lerpXU = mySmoothStep(ul, ur, uvFract.x);\n\n    return mySmoothStep(lerpXL, lerpXU, uvFract.y);\n}\n\nfloat fbm(vec2 uv) {\n    float amp = 0.5;\n    float freq = 8.0;\n    float sum = 0.0;\n    float maxSum = 0.0;\n    // octaves 4\n    for(int i = 0; i < 4; i++) {\n        sum += interpNoise2D(uv * freq) * amp;\n        maxSum += amp;\n        amp *= 0.5;\n        freq *= 2.0;\n    }\n    return sum / maxSum;\n}\n\n\n\nfloat surflet(vec2 P, vec2 gridPoint) {\n    // Compute falloff function by converting linear distance to a polynomial (quintic smootherstep function)\n    float distX = abs(P.x - gridPoint.x);\n    float distY = abs(P.y - gridPoint.y);\n    float tX = 1.0 - 6.0 * pow(distX, 5.0) + 15.0 * pow(distX, 4.0) - 10.0 * pow(distX, 3.0);\n    float tY = 1.0 - 6.0 * pow(distY, 5.0) + 15.0 * pow(distY, 4.0) - 10.0 * pow(distY, 3.0);\n\n    // Get the random vector for the grid point\n    vec2 gradient = random2(gridPoint);\n    // Get the vector from the grid point to P\n    vec2 diff = P - gridPoint;\n    // Get the value of our height field by dotting grid->P with our gradient\n    float height = dot(diff, gradient);\n    // Scale our height field (i.e. reduce it) by our polynomial falloff function\n    return height * tX * tY;\n}\n\n\nfloat PerlinNoise(vec2 uv) {\n    // Tile the space\n    vec2 uvXLYL = floor(uv);\n    vec2 uvXHYL = uvXLYL + vec2(1,0);\n    vec2 uvXHYH = uvXLYL + vec2(1,1);\n    vec2 uvXLYH = uvXLYL + vec2(0,1);\n\n    return surflet(uv, uvXLYL) + surflet(uv, uvXHYL) + surflet(uv, uvXHYH) + surflet(uv, uvXLYH);\n}\n\nvec3 random3( vec3 p ) {\n    return fract(sin(vec3(dot(p,vec3(127.1, 311.7, 191.999)),\n                          dot(p,vec3(269.5, 183.3, 765.54)),\n                          dot(p, vec3(420.69, 631.2,109.21))))\n                 *43758.5453);\n}\n\nfloat surflet3D(vec3 p, vec3 gridPoint)\n{\n    vec3 t3 = abs(p - gridPoint);\n    \n    float tX = 1.f - 6.f * pow(t3.x, 5.f) - 15.f * pow(t3.x, 4.f) + 10.f * pow(t3.x, 3.f);\n    float tY = 1.f - 6.f * pow(t3.y, 5.f) - 15.f * pow(t3.y, 4.f) + 10.f * pow(t3.y, 3.f);\n    float tZ = 1.f - 6.f * pow(t3.z, 5.f) - 15.f * pow(t3.z, 4.f) + 10.f * pow(t3.z, 3.f);\n    \n    vec3 t = vec3(tX, tY, tZ);\n    \n    vec3 gradient = random3(gridPoint);\n    vec3 diff = p - gridPoint;\n    float height = dot(diff, gradient);\n    return height * t.x * t.y * t.z;\n}\n\nfloat PerlinNoise3D(vec3 p)\n{\n    float surfletSum = 0.0;\n    vec3 pXLYLZL = floor(p);\n    \n    for(int dx = 0; dx <= 1; ++dx)\n    {\n        for(int dy = 0; dy <= 1; ++dy)\n        {\n            for(int dz = 0; dz <= 1; ++dz)\n            {\n                surfletSum += surflet3D(p, pXLYLZL + vec3(dx, dy, dz));\n            }\n        }\n    }\n    \n    return surfletSum;\n}\n\n\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n    \n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\n\n\nvoid sceneMap3D(vec3 pos, out float t, out int hitObj, vec3 lightPos)\n{\n    // back wall\n    t = plane(pos, vec4(0.0, 0.0, -1.0, 5.0));  \n    hitObj = 0;  // 0 is the back wall\n    \n    float t2;\n    \n    if((t2 = plane(pos, vec4(-1.0, 0.0, 0.0, 5.0))) < t)  // right wall\n    {\n        t= t2;\n        hitObj = 1;\n    } \n    if((t2 = plane(pos, vec4(1.0, 0.0, 0.0, 5.0))) < t)  // left wall\n    {\n        t= t2;\n        hitObj = 2;\n    }\n    if((t2 = plane(pos, vec4(0.0, -1.0, 0.0, 7.5))) < t)  // celling \n    {\n        t= t2;\n        hitObj = 3;\n    }\n    if((t2 = plane(pos, vec4(0.0, 1.0, 0.0, 2.5))) < t)  // floor\n    {\n        t= t2;\n        hitObj = 4;\n    }\n    if((t2 = box(rotateY(pos + vec3(-2.2, 0.5, -3), -27.5 * 3.14159 / 180.0), vec3(1.5, 3.0, 1.5))) < t)  // large box\n    {\n        t= t2;\n        hitObj = 5;\n    }\n    if((t2 = sphere(pos, 1.5, vec3(-1.5, 1.0, -1.0))) < t)  // sphere\n    {\n        t= t2;\n        hitObj = 6;\n    }\n}\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t = plane(pos, vec4(0.0, 0.0, -1.0, 5.0));\n    \n    t = min(t, plane(pos, vec4(-1.0, 0.0, 0.0, 5.0)));\n    t = min(t, plane(pos, vec4(1.0, 0.0, 0.0, 5.0)));\n    t = min(t, plane(pos, vec4(0.0, -1.0, 0.0, 7.5)));\n    t = min(t, plane(pos, vec4(0.0, 1.0, 0.0, 2.5)));\n    t = min(t, box(rotateY(pos + vec3(-2.2, 0.5, -3), -27.5 * 3.14159 / 180.0), vec3(1.5, 3.0, 1.5)));\n    t = min(t, sphere(pos, 1.5, vec3(-1.5, 1.0, -1.0)));\n    \n    return t;\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj, vec3 lightPos)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, hitObj, lightPos);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n    // No intersection\n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvec2 sphereUV(vec3 center, float r, vec3 p)\n{\n    vec3 pDir = normalize(p - center);\n    vec3 worldUp = vec3(0.0, 1.0, 0.0);\n    float theta = acos(dot(pDir, worldUp));\n    // If p is located at the positive part of z axis, then phi is 0-180.\n    // If p is located at the negative part of z axis, then phi is 180-360.\n    vec3 xzDir = normalize(vec3(pDir.x, 0.0, pDir.z));\n    float phi = acos(dot(xzDir, vec3(1.0, 0.0, 0.0)));\n    \n    if(pDir.z < 0.0)\n    {\n        phi = phi + 3.14159;\n    }\n    \n    return vec2(theta / 3.14159, phi / (2.0 * 3.14159));\n}\n\nvoid planeUVAxis(in vec3 p, in vec3 n, out vec3 u, out vec3 v)\n{\n    vec3 worldUp = vec3(0.0, 1.0, 0.0);\n    u = normalize(cross(worldUp, n));\n    v = normalize(cross(n, u));\n}\n\nvec2 planeUV(vec3 origin, vec3 n, vec3 p)\n{\n    vec3 uAxis;\n    vec3 vAxis;\n    planeUVAxis(origin, n, uAxis, vAxis);\n    vec3 diff = p - origin;\n    float uVal = dot(diff, uAxis);\n    float vVal = dot(diff, vAxis);\n    return vec2(uVal, vVal);\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightDir, vec3 view)\n{\n    switch(hitObj)\n    {\n        case 0:  // back wall\n        vec3 normal = vec3(0.0, 0.0, -1.0);\n        vec2 uv0 = planeUV(normal * 5.0, normal, p);\n        float worleyNoiseUV = WorleyNoise(uv0);\n        vec3 color0 = cosinePalette(1.0 - worleyNoiseUV) * dot(lightDir, n);\n        return color0;\n        break;\n        \n        case 1:  // right wall \n        vec3 color1 = vec3(1.0, 0.0, 0.0) * dot(lightDir, n);\n        return color1;\n        break;\n        \n        case 2:  // left wall\n        vec3 color2 = vec3(0.0, 1.0, 0.0) * dot(lightDir, n);\n        return color2;\n        break;\n        \n        case 3:  // celling\n        vec3 color3 = vec3(1.0, 1.0, 1.0) * dot(lightDir, n);\n        return color3;\n        break;\n        \n        case 4:  // floor\n        vec3 normal1 = vec3(0.0, 0.0, -1.0);\n        vec2 uv4 = planeUV(normal1 * 5.0, normal1, p);      \n        uv4.x = (uv4.x + sin(iTime * 0.3) + 1.0) / 3.0;\n        uv4.y = (uv4.y + sin(iTime * 0.3) + 1.0) / 3.0;        \n        float fbmUV4 = fbm(uv4);\n        vec3 color4 = cosinePalette1(fbmUV4);        \n        return color4 * dot(lightDir, n); \n        break;\n        \n        case 5:  // large box\n        vec3 noisePosition = vec3(p.x + sin(iTime * 0.5), p.y + sin(iTime * 0.5), p.z + sin(iTime * 0.5));\n        float perlinNoise = PerlinNoise3D(noisePosition);\n        vec3 color5 = cosinePalette(perlinNoise);\n        return color5 * dot(lightDir, n);\n        break;\n        \n        case 6:  // sphere\n        vec2 uv6 = sphereUV(vec3(2.0, 0.0, 1.0), 1.0, p);        \n        uv6.x = (uv6.x + sin(iTime * 0.2) + 1.0) / 3.0;\n        uv6.y = (uv6.y + sin(iTime * 0.2) + 1.0) / 3.0;        \n        float fbmUV = fbm(uv6);\n        vec3 color6 = cosinePalette1(fbmUV);        \n        return color6 * dot(lightDir, n); \n        break;\n        \n        case -1:\n        return vec3(0., 0., 0.);\n        break;\n        \n    }\n    return vec3(0.0);\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye, vec3 lightPos)\n{\n\tfloat t;\n    int hitObj;\n    \n    march(eye, dir, t, hitObj, lightPos);\n    \n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    vec3 lightDir = normalize(lightPos - isect);\n    \n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));\n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\nvoid raycast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref)\n{\n    \n    eye = vec3(0.0, 3.0, -15.0);\n    ref = vec3(0.0, 3, 0.0);\n    \n    vec3 look = normalize(ref - eye);\n    vec3 right = normalize(cross(look, vec3(0.0, 1.0, 0.0)));\n    vec3 up = cross(right, look);\n    \n    float tanFovV = tan(3.14159 * 0.125);\n    float len = distance(ref, eye);\n    float aspect = float(iResolution.x) / float(iResolution.y);\n    \n    vec3 V = up * len * tanFovV;\n    vec3 H = right * len * aspect * tanFovV;\n    \n    vec3 p =ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Light\n\tvec3 lightPos = vec3(0.0, 5.3, -5.0);\n    \n    //Normalized pixel coordinate (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    //[-1, 1]\n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n    \n    vec3 dir, eye, ref;\n    // Cast ray\n    raycast(uv2, dir, eye, ref);\n    \n    // Intersection\n    Intersection isect;\n    \n    isect = sdf3D(dir, eye, lightPos);\n    \n\t \n    \n    //Output color\n    fragColor = vec4(isect.color, 1.0);\n}","name":"Image","description":"","type":"image"}]}