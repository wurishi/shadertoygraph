{"ver":"0.1","info":{"id":"Nt3GR4","date":"1635749186","viewed":103,"name":"Swaggy Circles","username":"ysp125","description":"Some swaggy circles.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n#define PI     3.14159265\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n   vec2 uv = fragCoord.xy;\n   \n   float cols[3] = float[3](0.0,0.0,0.0);\n\n   \n   float rVariableSize = max(cos(iTime*0.4), 0.4);\n   float gVariableSize = max(cos(PI + iTime*0.4), 0.4);\n   float bVariableSize = max(cos(PI/2.0 + iTime*0.4), 0.4);\n\n   \n   float size = 1.0;\n   float spinDistance = 150.0*cos(iTime);\n   float spinDistance2 = 100.0*cos(iTime);\n   float spinDistance3 = 50.0*cos(iTime);\n   \n   for (int i = 0; i < 4; i++) {\n      float x = float(i);\n      vec2 center;\n      vec2 displacement;\n      if (i % 3 == 0) {\n          center = vec2(iResolution.x/2.0 + (float(i&1) * cos(iTime) * spinDistance), iResolution.y/2.0 + (float(i&1)-1.0 * sin(iTime) * spinDistance));\n          displacement = uv - center;\n          cols[0] += 1.0/(length(displacement)*0.1*size);\n      } else {\n          center = vec2(iResolution.x/2.0 + (float(i&1) * sin(iTime) * spinDistance), iResolution.y/2.0 + (float(i&1)-1.0 * -cos(iTime) * spinDistance));\n          displacement = uv - center;\n          cols[0] += 1.0/(length(displacement)*0.1*size);\n      }\n   }\n   \n   for (int i = 0; i < 4; i++) {\n      float x = float(i);\n      vec2 center;\n      vec2 displacement;\n      if (i % 3 == 0) {\n          center = vec2(iResolution.x/2.0 + (float(i&1) * -cos(iTime) * spinDistance2), iResolution.y/2.0 + (float(i&1)-1.0 * sin(iTime) * spinDistance2));\n          displacement = uv - center;\n          cols[1] += 1.0/(length(displacement)*0.1*size);\n      } else {\n          center = vec2(iResolution.x/2.0 + (float(i&1) * sin(iTime) * spinDistance2), iResolution.y/2.0 + (float(i&1)-1.0 * cos(iTime) * spinDistance2));\n          displacement = uv - center;\n          cols[1] += 1.0/(length(displacement)*0.1*size);\n      }\n   }\n   \n   for (int i = 0; i < 4; i++) {\n      float x = float(i);\n      vec2 center;\n      vec2 displacement;\n      if (i % 3 == 0) {\n          center = vec2(iResolution.x/2.0 + (float(i&1) * cos(iTime + PI/4.0) * spinDistance3), iResolution.y/2.0 + (float(i&1)-1.0 * -sin(iTime + PI/4.0) * spinDistance3));\n          displacement = uv - center;\n          cols[2] += 1.0/(length(displacement)*0.1*size);\n      } else {\n          center = vec2(iResolution.x/2.0 + (float(i&1) * -sin(iTime + PI/4.0) * spinDistance3), iResolution.y/2.0 + (float(i&1)-1.0 * cos(iTime + PI/4.0) * spinDistance3));\n          displacement = uv - center;\n          cols[2] += 1.0/(length(displacement)*0.1*size);\n      }\n   }\n   \n   for (int i = 1; i <= 4; i++) {\n      float x = float(i);\n      vec2 center;\n      vec2 displacement;\n      if (i % 2 == 0) {\n          center = vec2(iResolution.x/2.0 + cos(iTime * 1.0/x) * spinDistance, iResolution.y/2.0 + cos(iTime * 1.0/x) * spinDistance);\n          displacement = uv - center;\n      } else {\n          center = vec2(iResolution.x/2.0 + sin(iTime * 1.0/x) * spinDistance, iResolution.y/2.0 + sin(iTime * 1.0/x) * spinDistance);\n          displacement = uv - center;\n      }\n      \n      cols[0] += 1.0/(length(displacement)*0.1*size*rVariableSize);\n   }\n   \n   for (int i = 1; i <= 4; i++) {\n      float x = float(i);\n      vec2 center;\n      vec2 displacement;\n      if (i % 2 == 0) {\n          center = vec2(iResolution.x/2.0 + cos(iTime * 1.0/x) * spinDistance2, iResolution.y/2.0 + -cos(iTime * 1.0/x) * spinDistance);\n          displacement = uv - center;\n      } else {\n          center = vec2(iResolution.x/2.0 + sin(iTime * 1.0/x) * spinDistance2, iResolution.y/2.0 + -sin(iTime * 1.0/x) * spinDistance);\n          displacement = uv - center;\n      }\n      \n      cols[1] += 1.0/(length(displacement)*0.1*size*gVariableSize);\n   }\n   \n   for (int i = 1; i <= 4; i++) {\n      float x = float(i);\n      vec2 center;\n      vec2 displacement;\n      if (i % 2 == 0) {\n          center = vec2(iResolution.x/2.0 + -cos(iTime * 1.0/x) * spinDistance3, iResolution.y/2.0 + cos(iTime * 1.0/x) * spinDistance);\n          displacement = uv - center;\n      } else {\n          center = vec2(iResolution.x/2.0 + -sin(iTime * 1.0/x) * spinDistance3, iResolution.y/2.0 + sin(iTime * 1.0/x) * spinDistance);\n          displacement = uv - center;\n      }\n      \n      cols[2] += 1.0/(length(displacement)*0.1*size*bVariableSize);\n   }\n    \n   \n   fragColor = vec4(cols[0],cols[1],cols[2],0.0);\n             \n}","name":"Image","description":"","type":"image"}]}