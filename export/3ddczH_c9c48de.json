{"ver":"0.1","info":{"id":"3ddczH","date":"1600417975","viewed":156,"name":"glitch@effect","username":"Stephen_epa","description":"glitch effect practice","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["chromaticaberration","glitch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Amplitude .05\n#define Frequency 7.\n\nbool uvRect(vec2 uv, vec4 bound) {\n    return bool(min(step(bound.x, uv.x), \n                min(step(bound.y, uv.y), \n                min(step(uv.x, bound.z), step(uv.y, bound.w)))));\n}\n\nfloat hash11(float x) {\n    return fract(129.*sin(339.1*x));\n}\n\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    return mix(hash11(i), hash11(i+1.), f); \n}\n\nfloat fbm(float x) {\n    float t = 0.;\n    float f = 1.;\n    float a = 1.;\n    for (int i = 0; i < 8+1; ++i) {\n        t += a*noise(x*f);\n        a /= 2.; f*=2.;\n    }\n    return t;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.);\n    vec4 bound = vec4(0.);\n    bound = vec4(0., 0., .5, .5);\n    if (uvRect(uv, bound)) {\n        vec2 p = (uv - bound.xy) * 2.;\n        col = vec3(texture(iChannel0, p).r, 0., 0.);\n    }\n    bound = vec4(0., .5, .5, 1.);   \n    if (uvRect(uv, bound)) {\n        vec2 p = (uv - bound.xy) * 2.;\n        col = vec3(0., texture(iChannel0, p).g, 0.);\n    }\n    bound = vec4(.5, .5, 1., 1.);\n    if (uvRect(uv, bound)) {\n        vec2 p = (uv - bound.xy) * 2.;\n        col = vec3(0., 0., texture(iChannel0, p).b);\n    }\n    bound = vec4(.5, 0., 1., .5);      \n    if (uvRect(uv, bound)) {\n        vec2 p = (uv - bound.xy) * 2.;\n        float var = Frequency * iTime;\n        float on = step(.8, noise(var));\n        p.x += hash11(iTime+p.y)*.09*on;\n        col = texture(iChannel0, p).rgb;\n        vec2 offset = vec2(2.*noise(var+43.)-1., 2.*noise(var-77.)-1.)*Amplitude*on;\n        col.r = texture(iChannel0, p+offset).r;\n        col.g = texture(iChannel0, p-offset).g;\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}