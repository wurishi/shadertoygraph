{"ver":"0.1","info":{"id":"3dVBDh","date":"1607017673","viewed":397,"name":"Tumbling alternating squares","username":"A_Toaster","description":"Based on https://www.shadertoy.com/view/wdyfW1","likes":18,"published":3,"flags":0,"usePreview":0,"tags":["checkerboard","squares","generativeart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"uniform vec2 u_resolution;\nuniform float u_time;\n\n#define PI 3.14159265358979323846\n\nvec2 rotate2D(vec2 st, float angle){\n    st -= 0.5;\n    st =  mat2(cos(angle),-sin(angle),\n                sin(angle),cos(angle)) * st;\n    st += 0.5;\n    return st;\n}\n\nvec2 tile(vec2 st, float zoom,float rotD){\n    st *= zoom;\n     if(rotD==1.) {\n        st.x+=.5;\n        st.y+=.5;\n     }\n    return fract(st);\n}\n\nfloat square(vec2 st, vec2 side){\n    vec2 border = vec2(0.5)-side*0.5;\n    vec2 pq = smoothstep(border,border+.01,st);\n    pq *= smoothstep(border,border+.01,vec2(1.0)-st);\n    return pq.x*pq.y;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord.xy/iResolution.y;\n    float color;\n    float Nsquares=5.;\n    float rotDirection=0.;\n\tfloat warpedTime = iTime * 0.5 + uv.x + uv.y * 0.5;\n    rotDirection=step(0.,sin(warpedTime * 2.0));\n    \n    uv = tile(uv,Nsquares,rotDirection);\n    uv = rotate2D(uv,PI/4.0-warpedTime);\n    if (rotDirection==1.)\n        color = 1.0-square(uv,vec2(0.71));\n    else \n    color=square(uv,vec2(0.72));\n    fragColor = vec4(vec3(color),1.0);\n} ","name":"Image","description":"","type":"image"}]}