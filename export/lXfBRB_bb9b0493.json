{"ver":"0.1","info":{"id":"lXfBRB","date":"1728527743","viewed":20,"name":"Rolling squares","username":"Elsio","description":"need organization ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["animate","pentagon","loopless","geometri","dodecagon","slip","heptagon","tetra","octogono","octagono","cabri","geogebra"],"hasliked":0,"parentid":"lXXBRS","parentname":"Rolling square"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI acos(-1.)\n#define TAU 2. * PI\n#define r iResolution.xy\n\n\n#define frasco .0      // .05\n\n\nfloat Poly(vec2 p, float k, float ra, float T, bool fill) {\n    float d;\n    d = atan(p.y, p.x) - T;\n    d = mod(d, TAU / k) - PI / k;\n    d = cos(d) * length(p) - ra;\n    if(fill) return d;\n    return abs(d);\n}\n\nvec3 Enum(vec2 R, float n, float m) {\n    vec2 ret = mod(\n                   vec2(floor(n / 2.), n) * 2., \n                   4.\n               ) - 1.;\n    \n    return vec3(\n               ret * (R.y - R.x * (n > 3.? vec2(0, 1) : vec2(1, 0))),\n               float(m)\n           );\n}\n\nvec2 Tempo(float time){\n    float t = cos(time * 12.) * .3 + .2;\n    float T = fract(time);\n          T = floor(time) * 2.\n                + smoothstep(.0, t + .2, T)\n                + smoothstep(t + .1, .6, T)\n                + 1.;\n                \n    t = mod(floor(T), 8.);\n    \n    return vec2(t, T);\n}\n\nvec3 desloc(float t, vec2 R){\n    vec3 k;\n    // https://oeis.org/A240908\n    if(t == 0.) k = Enum(R, 0., 3.);\n    if(t == 7.) k = Enum(R, 1., 4.);\n    if(t == 3.) k = Enum(R, 2., 0.);\n    if(t == 4.) k = Enum(R, 3., 7.);\n    if(t == 1.) k = Enum(R, 4., 6.);\n    if(t == 6.) k = Enum(R, 5., 1.);\n    if(t == 2.) k = Enum(R, 6., 5.);\n    if(t == 5.) k = Enum(R, 7., 2.);\n    \n    return k;\n}\n\nvec3 desloc2(float t, vec2 R){\n    vec3 k;\n    \n    if(t == 0.) k = Enum(R, 4., 0.);\n    if(t == 7.) k = Enum(R, 0., 1.);\n    if(t == 2.) k = Enum(R, 2., 2.);\n    if(t == 1.) k = Enum(R, 6., 3.);\n    if(t == 4.) k = Enum(R, 7., 4.);\n    if(t == 3.) k = Enum(R, 3., 5.);\n    if(t == 6.) k = Enum(R, 1., 6.);\n    if(t == 5.) k = Enum(R, 5., 7.);\n    \n    return k;\n}\n\nvec4 move(vec2 u, vec2 R) {\n    \n    float tmp = iTime * .25;\n    vec2 t = Tempo(tmp);\n    vec3 k = desloc(t.x, R);\n    \n    vec2 t2 = Tempo(tmp + 3.5);\n    vec3 k2 = desloc2(t2.x, R);\n    \n    return  \n           smoothstep(\n                 2. / r.y, .0, \n                 Poly(\n                     u + k.xy + cos((fract(t.y) + k.z) * PI / 4. + vec2(0, 11)) * R.x, \n                     4., \n                     R.y, \n                     (t.x + fract(t.y) + 1.) * PI / 4., \n                     true\n                 ) - frasco\n           ) * vec4(0, 0, 1, 0) +\n           \n           smoothstep(\n                 2. / r.y, .0, \n                 Poly(\n                     u + k2.xy + cos((fract(t2.y) + k2.z) * PI / 4. + vec2(0, 11)) * R.x, \n                     4., \n                     R.y, \n                     (t2.x + fract(t2.y)) * PI / 4., \n                     true\n                 ) + frasco\n           ) * vec4(1, 0, 0, 0);\n}\n\nvoid mainImage(out vec4 o, vec2 U) {\n    vec2 u = (U - r / 2.) / r.y;\n    \n    o *= .0;\n    float k = 4.;\n    float scale = .48,\n          c = cos(PI / (k * 2.)) * scale;\n    \n    vec2 R = vec2(1, cos(PI / k)) * c /(cos(PI / k) + 1.);\n    \n    o += move(u, R);\n    o += smoothstep(\n             2. / r.y, .0, \n             Poly(u, k * 2., c, PI /(2. * k), false)\n         ) * .4 \n         \n         + mix(\n               o, \n               vec4(0, .4, 0, 0), \n               smoothstep(\n                   2. / r.y, .0, \n                   length(u) - scale\n               )\n           );\n}","name":"Image","description":"","type":"image"}]}