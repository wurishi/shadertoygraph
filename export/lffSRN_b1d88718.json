{"ver":"0.1","info":{"id":"lffSRN","date":"1705267208","viewed":221,"name":"Quanta half","username":"liamegan","description":"Doctor Who vibes","likes":23,"published":1,"flags":32,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"  void mainImage( out vec4 c, in vec2 f ) {\n    c = texture(iChannel0,f/iResolution.xy);\n  }","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n  /* Shading constants */\n  /* --------------------- */\n  const vec3 LP = vec3(0, 0, 0);  // light position\n  const vec3 LC = vec3(.85,0.80,0.70);    // light colour\n  const vec3 HC1 = vec3(.5, .4, .3);      // hemisphere light colour 1\n  const vec3 HC2 = vec3(0.1,.1,.6)*.5;    // hemisphere light colour 2\n  const vec3 HLD = vec3(0,1,0);           // hemisphere light direction\n  const vec3 BC = vec3(0.25,0.25,0.25);   // back light colour\n  const vec3 FC = vec3(1.30,1.20,1.00);   // fresnel colour\n  const float AS = .5;                    // ambient light strength\n  const float DS = 1.;                    // diffuse light strength\n  const float BS = .3;                    // back light strength\n  const float FS = .3;                    // fresnel strength\n  /* Raymarching constants */\n  /* --------------------- */\n  const float MAX_TRACE_DISTANCE = 50.;             // max trace distance\n  const float INTERSECTION_PRECISION = 0.0001;       // precision of the intersection\n  const int NUM_OF_TRACE_STEPS = 256;               // max number of trace steps\n  const float STEP_MULTIPLIER = 1.;                 // the step mutliplier - ie, how much further to progress on each step\n  \n  /* Structures */\n  /* ---------- */\n  struct Camera {\n    vec3 ro;\n    vec3 rd;\n    vec3 forward;\n    vec3 right;\n    vec3 up;\n    float FOV;\n  };\n  struct Surface {\n    float len;\n    vec3 position;\n    vec3 colour;\n    float id;\n    float steps;\n    float AO;\n  };\n  struct Model {\n    float dist;\n    vec3 colour;\n    float id;\n  };\n  \n  /* RNG */\n  /* ---------- */\n  // Hash without sine from Dave Hoskins\n  // https://www.shadertoy.com/view/4djSRWa\n  float hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n  }\n  vec2 hash22(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n  }\n  \n  \n  /* Utilities */\n  /* ---------- */\n  vec2 toScreenspace(in vec2 p) {\n    vec2 uv = (p - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n    return uv;\n  }\n  mat2 R(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, -s, s, c);\n  }\n  Camera getCamera(in vec2 uv, in vec3 pos, in vec3 target) {\n    vec3 f = normalize(target - pos);\n    vec3 r = normalize(vec3(f.z, 0., -f.x));\n    vec3 u = normalize(cross(f, r));\n    \n    float FOV = .6;\n    \n    return Camera(\n      pos,\n      normalize(f + FOV * uv.x * r + FOV * uv.y * u),\n      f,\n      r,\n      u,\n      FOV\n    );\n  }\n  // folding from gaz: https://www.shadertoy.com/view/4tX3DS\n  vec2 fold(vec2 p, float a) {\n      p.x=abs(p.x);\n      vec2 n = vec2(cos(a),sin(a));\n      for(int i = 0; i < 2; ++i)\n      {\n          p -= 2.*min(0.,dot(p,n))*n;\n          n = normalize(n-vec2(1.,0.));\n      }\n      return p;\n  }\n  vec3 path(in float delta) {\n    return vec3(cos(delta*.1) * 2.2 + sin((delta) * .3) * .5*cos(delta * .05), sin(delta * .04) * 5.4+cos(delta * .04) * 5.4, delta);\n  }\n  \n  #define PI 3.14159236\n  #define SCALE 2.\n  \n  \n  //--------------------------------\n  // Modelling\n  //--------------------------------\n  Model model(vec3 p) {\n    float d = length(p)-.4;\n    \n    p.xy -= path(p.z).xy;\n    float m=length(p.xy)*.5;\n    float z = p.z;\n    float r = cos(z*.2+sin(m)*.3)*.4+.5;\n    float r2 = (sin(z*.05124)*cos(z*.025203))+1.;\n    p*=SCALE;\n    \n    vec3 q=p;\n    p=vec3(R(0.05*p.z+r)*p.xy, p.z);\n    p.xy=fold(p.xy,PI/6.+z*.2);\n    p=mod(p,3.)-1.5;\n    \n    vec3 o = abs(p); \n    o-=(o.x+o.y+o.z)*0.33333;\n    float d0=max(o.x,max(o.y,o.z))-0.01;\n    float d1=length(q.xy)-1.-r2*2.;\n    d0=max(d0,-d1);\n    d0=max(d0,length(q.xy)-4.-r2*2.);\n    d=length( vec2(abs(d0), length(mod(p,vec3(.1))-.05)) )-.3*r;\n    \n    vec3 colour = mix(mix(vec3(.8,.3,.6), vec3(.3,.9,.9), vec3(cos(z*.1)*.5+.5, sin(z*.12)*.5+.5, cos(z*.05+1.)*.5+.5)), vec3(1.,.6,.4)*.1, m);\n    return Model(d/SCALE, colour, 1.);\n  }\n  Model map( vec3 p ){\n    return model(p);\n  }\n  \n  /* Modelling utilities */\n  /* ---------- */\n  // I *think* I borrowed this from Shane, but probably orginally comes from IQ. \n  // Calculates the normal by taking a very small distance,\n  // remapping the function, and getting normal for that\n  vec3 calcNormal( in vec3 pos ){\n    vec3 eps = vec3( 0.001, 0.0, 0.0 );\n    vec3 nor = vec3(\n      map(pos+eps.xyy).dist - map(pos-eps.xyy).dist,\n      map(pos+eps.yxy).dist - map(pos-eps.yxy).dist,\n      map(pos+eps.yyx).dist - map(pos-eps.yyx).dist );\n    return normalize(nor);\n  }\n  \n  //--------------------------------\n  // Raymarcher\n  //--------------------------------\n  Surface march( in Camera cam ){\n    float h = 1e4; // local distance\n    float d = 0.; // ray depth\n    float id = -1.; // surace id\n    float s = 0.; // number of steps\n    float ao = 0.; // march space AO. Simple weighted accumulator. Not really AO, but ¯\\_(ツ)_/¯\n    vec3 p; // ray position\n    vec3 c; // surface colour\n\n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ) {\n      if( abs(h) < INTERSECTION_PRECISION || d > MAX_TRACE_DISTANCE ) break;\n      p = cam.ro+cam.rd*d;\n      Model m = map( p );\n      h = m.dist;\n      d += h * STEP_MULTIPLIER;\n      id = m.id;\n      s += 1.;\n      ao += max(h, 0.);\n      c = m.colour;\n    }\n\n    if( d >= MAX_TRACE_DISTANCE ) id = -1.0;\n\n    return Surface( d, p, c, id, s, ao );\n  }\n  \n  //--------------------------------\n  // Shading\n  //--------------------------------\n  /*\n   * Soft shadows and AO curtesy of Inigo Quilez\n   * https://iquilezles.org/articles/rmshadows\n  */\n  float softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax ) {\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ ) {\n      float h = map( ro + rd*t ).dist;\n      res = min( res, 8.0*h/t );\n      t += clamp( h, 0.02, 0.10 );\n      if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n  }\n  float AO( in vec3 pos, in vec3 nor ) {\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n      float hr = 0.01 + 0.12*float(i)/4.0;\n      vec3 aopos =  nor * hr + pos;\n      float dd = map( aopos ).dist;\n      occ += -(dd-hr)*sca;\n      sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n  }\n  vec3 shade(vec3 col, vec3 pos, vec3 nor, vec3 ref, Camera cam) {\n    \n    vec3 plp = LP - pos; // point light\n    \n    float o = AO( pos, nor );                 // Ambient occlusion\n    vec3  l = normalize( plp );                    // light direction\n    \n    float d = clamp( dot( nor, l ), 0.0, 1.0 )*DS;   // diffuse component\n    float b = clamp( dot( nor, normalize(vec3(-l.x,0,-l.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0)*BS; // back light component\n    float f = pow( clamp(1.0+dot(nor,cam.rd),0.0,1.0), 2.0 )*FS; // fresnel component\n\n    vec3 c = vec3(0.0);\n    c += d*LC;                           // diffuse light integration\n    c += mix(HC1,HC2,dot(nor, HLD))*AS;        // hemisphere light integration (ambient)\n    c += b*BC*o;       // back light integration\n    c += f*FC*o;       // fresnel integration\n    \n    return col*c;\n  }\n  vec3 render(Surface surface, Camera cam, vec2 uv) {\n    vec3 colour = vec3(.04,.045,.05);\n    colour = vec3(.1, .0, .3);\n    vec3 colourB = vec3(.1, .05, .2);\n    \n    vec2 pp = uv;\n    \n    colour = mix(colourB, colour, pow(length(pp), 2.)/1.5);\n    vec3 bg = colour;\n\n      vec3 surfaceNormal = calcNormal( surface.position );\n      vec3 ref = reflect(cam.rd, surfaceNormal);\n      colour = surfaceNormal;\n      vec3 pos = surface.position;\n      \n      vec3 col = surface.colour;\n      \n      colour = shade(col, pos, surfaceNormal, ref, cam);\n    \n    \n    float sceneLength = length(cam.ro - surface.position);\n    float fog = smoothstep(MAX_TRACE_DISTANCE, -3., sceneLength);\n    colour = mix(bg, colour, pow(fog, 2.));\n    \n    \n    colour *= clamp(1./(surface.steps*.02), .2, 10.);\n\n\n    return colour;\n  }\n  \n  \n  void mainImage( out vec4 c, in vec2 f ) {\n    vec2 uv = toScreenspace(f.xy);\n    \n    float t = iTime*5.;\n    vec3 la = path(t+.5);\n    Camera cam = getCamera(uv, path(t), la);\n    \n    vec2 a = sin(vec2(1.5707963, 0) - path(la.z).x/4.); \n    mat2 rM = mat2(a, -a.y, a.x);\n    cam.rd.xy *= rM;\n    \n    Surface surface = march(cam);\n    \n    vec3 r = render(surface, cam, uv);\n    \n    c = texture(iChannel0,f/iResolution.xy)*.8;\n    vec4 c2 = vec4(r,1);\n    c = clamp(mix(c+c2, c2*2., clamp(surface.len*.03, 0., 1.)), vec4(0.), vec4(1));\n  }\n","name":"Buffer A","description":"","type":"buffer"}]}