{"ver":"0.1","info":{"id":"lXSSWw","date":"1710668957","viewed":71,"name":"Semi Fractal","username":"WhateverMeen","description":"Simple random shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["neon"],"hasliked":0,"parentid":"M3SSWw","parentname":"Shifting Planes"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t)\n{\n    vec3 a = vec3(0.938, 0.328, 0.718);\n    vec3 b = vec3(0.659, 0.438, 0.328);\n    vec3 c = vec3(0.388, 0.388, 0.296);\n    vec3 d = vec3(2.538, 2.478, 0.168);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat sdRandom(vec3 p){\n    float s = sin(p.x);\n    float c = cos(p.y);\n    float g = sin(p.z);\n    \n    return length(vec3(s, c, g));\n}\n\n\nfloat map(vec3 p) {\n    return sdRandom(p); \n}\n\nmat2 rot2D(float angle){\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    \n    vec3 ro = vec3(0, 0, -3);         \n    vec3 rd = normalize(vec3(uv, 1)); \n    vec3 col = vec3(0);               \n\n    //rd.xy *= rot2D(sin(3.14/2.));\n    //ro.xy *= rot2D(sin(3.14/2.));\n    rd.xy *= rot2D(sin(iTime * 0.2));\n    rd.xz *= rot2D(sin(iTime * 0.2));\n    rd.yz *= rot2D(sin(iTime * 0.2));\n\n    float t = 0.; \n\n    \n    for (int i = 0; i < 80; i++) {\n        vec3 p = ro + rd * t;     \n\n        float d = map(p);         \n\n        t += d;                   \n\n        if (d < .001) break;      \n        if (t > 100.) break;      \n    }\n\n    \n    col = palette(t * .2);           \n\n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}