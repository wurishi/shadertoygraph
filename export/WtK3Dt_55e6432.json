{"ver":"0.1","info":{"id":"WtK3Dt","date":"1580188320","viewed":698,"name":"Fireworks send","username":"aethelwhat","description":"Voronoi particle tracking learned from a variety of Wyatt's shaders. I want to track particle lifetime, color, type (for multiple firework types) separately so i tried syncing a second buffer that also sorts on the position xy in buffer a. Next time","likes":17,"published":3,"flags":32,"usePreview":0,"tags":["fireworks","voronoiparticles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* see description\n * click and drag I dare u\n * i'll fix full screen and other resolutions next time\n */\n\nvoid mainImage( out vec4 Q, in vec2 U)\n{\n\n    vec4 a = A(U);\n    vec4 b = B(U);\n    vec4 color = vec4(1.0);\n    Q = smoothstep(1.,0.,length(a.xy-U))*(.2+2.*COLOR);\n\n    Q += vec4(1.0)-B(U) * .9;\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Buffer A\n//swap and Voronoi particle tracking learned from user Wyatt on Shadertoy.\nvoid swap (inout vec4 a, vec2 U, vec2 r) {\n    vec4 n = A(U+r);\n    if (length(U-n.xy)<length(U-a.xy)){\n        a = n;\n    }\n}\n\nvoid mainImage( out vec4 Q, in vec2 U)\n{\n    // FIND NEAREST PARTICLE\n    vec4 a = A(U);\n    swap(a,U,vec2(1,0));\n    swap(a,U,vec2(0,1));\n    swap(a,U,vec2(-1,0));\n    swap(a,U,vec2(0,-1));\n\n    Q = a;\n    Q.w -= .005;\n    Q.xy += Q.zw;\n    Q.zw *= AIR;\n\n    if(length(Q.zw) < 0.001){ // firework explodes\n      \tQ.zw = normalize(U - Q.xy);//* VELOCITY;\n        Q.xy = Q.xy + Q.zw;\n    }\n\n    // Creating particles per frame\n    float randomX = iResolution.x * rand(float(iFrame)); \n    vec2 pos = vec2(randomX * 6., 1.);\n    if (length(U-pos)<length(U-a.xy)){// && iTime < 1.){\n      Q = vec4(pos, 0., 2. + rand(iTime)*1.5);\n    }\n    \n    // Click to paint in color\n    if ((iMouse.z>0.&&length(iMouse.xy-U)<1.)) {\n        Q = vec4(U, 0., 1.);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Buffer B\n//fade the smoke blown by wind\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    vec4 a = A(U);\n    //U -= .5*a.xy;\n    Q = B(U);\n    vec4\n        n = B(U+vec2(0,1)),\n        e = B(U+vec2(1,0)),\n        s = B(U-vec2(0,1)),\n        w = B(U-vec2(1,0));\n    Q = mix(Q,0.2*n+.8*w,.02*vec4(2,4,6,5));\n    Q = mix(Q,vec4(1.),0.001);\n    vec4 h = vec4(0.);\n    Q += .1*(h-Q)*smoothstep(1.,0.,length(a.xy-U));\n\n    if (iFrame < 1) Q = vec4(1.);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//Common\n#define R iResolution.xy\n#define A(U) texture(iChannel0, (U)/R)\n#define B(U) texture(iChannel1, (U)/R)\n\n#define AIR .99\n#define VELOCITY 119.8\n#define FADE 1.\n#define TRAIL_FACTOR 1.3\n#define LIFETIME 1.\n#define COLOR vec4(1.,.8,.9,1.)\n\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\n","name":"Common","description":"","type":"common"}]}