{"ver":"0.1","info":{"id":"clKyz3","date":"1700505004","viewed":30,"name":"test drop on the wind for UE5","username":"oleg304","description":"simple Drop with struct for the UE5 material custom node","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["drop","hlsl","ue5"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// HLSL -> GLSL https://anteru.net/blog/2016/mapping-between-HLSL-and-GLSL/\n#define float2   vec2\n#define float3   vec3\n#define float4   vec4\n#define lerp     mix\n#define atan2    atan\n#define frac     fract\n#define fmod     mod\n#define float2x2 mat2     \n#define mul(a, b) a*b \n#define texSampl 1.\n#define Texture2DSample(iChannel0, texSampl, uv) texture(iChannel0, uv)\n#define ddx dFdx\n#define ddy dFdy\n#define saturate(oo) clamp(oo, 0.0, 1.0)\n\n//--------------------------------------------------------------------------\n\n// Support multifunctions insdide the UE5 material custome node. \n// GLSL does not support functions inside structs.\n\n//struct Functions{ \n\n   // rotate uv\n   float2x2 rotate(float a){float s=sin(a),c=cos(a);return float2x2(c,-s,s,c);}\n\n   // https://iquilezles.org/articles/checkerfiltering\n   float checker(float2 p){\n        float2 w = fwidth(p) + 0.01;  \n        float2 i = 2.0*(abs(frac((p-0.5*w)/2.0)-0.5)-abs(frac((p+0.5*w)/2.0)-0.5))/w;\n        return 0.5 - 0.5*i.x*i.y;                  \n    }\n\n   // bend https://www.shadertoy.com/view/dtVczm\n   float2 bend(float2 p, float a){\n        if(abs(a)<.001) return p;  // if perfectly straight    \n        float ra = .5/a;p.x -= ra;    \n        float2 sc = float2(sin(a),cos(a));\n        float2 q = p-2.*sc*max(0.,dot(sc,p));    \n        float s = sign(a);\n        return float2((p.y>0.) ? ra-s*length(q)        : sign(-s*p.x)*(q.x+ra),\n                      (p.y>0.) ? ra*atan2(s*p.y,-s*p.x): (s*p.x<0.)?p.y:1.-p.y);\n   }\n   \n   // waving https://www.shadertoy.com/view/wstBDN\n   float2 UvWave(float2 uv, float a, float b, float c, float s){\n        float x = abs(uv.x) * a, y = abs(uv.y) * b, k = sin(x * y + s); \n        float kkc = abs(pow(k,2.) * c), w1 = 1. + kkc * a, w2 = 1. + kkc * b;\n        return float2(uv.x * w1, uv.y / w2);\n   }\n   \n   float Out(float2 uv, float time){\n       // set shape to the center ans scale       \n       uv = (uv-float2(.5,.7))*2.;\n       \n       // rotate 180 degree \n       uv = mul(uv,rotate(3.1416));\n       \n       // set width\n       uv.x*= 4.+ 2.*abs(2.-cos(time*2.));       \n       \n       // blend uv              \n       float angle = sin(time)*.1;\n       uv = bend(uv,angle);\n       \n       // set shape and transform height\n       uv.y *= 2.2-.4*abs(2.-sin(time*2.));\n       uv.y = pow(uv.y,3.);       \n       return saturate(lerp(-(distance(uv,float2(0.,.508))-.54)*30.,1.,-20.));\n       \n       // display grid for testing\n      // return checker(uv);\n    }\n\n// End function struct for UE5\n//}; Functions f; \n\n// Output by the UE5 material custom node with two inputs: TexCoord and Time\n//return f.Out(in_uv, in_time);\n\n// Output to screen by shadertoy\nvoid mainImage(out float4 fragColor, in float2 fragCoord) {\n    //vec2 uv = (fragCoord/iResolution.xy-.5)*float2(iResolution.x/iResolution.y, 1.)*8.;        \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    fragColor = Out(uv, iTime)*vec4(.0,.1,1.,1.);\n}\n","name":"Image","description":"","type":"image"}]}