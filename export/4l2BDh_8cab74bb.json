{"ver":"0.1","info":{"id":"4l2BDh","date":"1515592955","viewed":234,"name":"tone mapping","username":"Simeon","description":"On repère les objets brillants, on y applique un filtre flou gaussien et on l'ajoute à l'image de sortie","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["bloom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float exposition = 1.0;\n    float gamma = 2.2;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 pixelOriginal = texture(iChannel1, uv);\n    vec4 pixelFlou = texture(iChannel0, uv);\n    fragColor = 1.0 - exp(-(pixelOriginal+pixelFlou)*exposition);\n\n    fragColor.r = pow(fragColor.r, 1.0/gamma);\n    fragColor.g = pow(fragColor.g, 1.0/gamma);\n    fragColor.b = pow(fragColor.b, 1.0/gamma);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 black = vec4(0,0,0,1);\n    vec4 textu = texture(iChannel0, uv);\n    float luminosity = dot(vec3(0.21, 0.72, 0.07), textu.rgb);\n    float cond = float( luminosity  >= 0.7 );\n    \n\tfragColor = mix(black, textu, cond);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":" #define KERNEL_SIZE 9\n\nconst float kernel[KERNEL_SIZE] = float[KERNEL_SIZE]( 1.0/16.0, 2.0/16.0, 1.0/16.0,\n                                                      2.0/16.0, 4.0/16.0, 2.0/16.0,\n                                                      1.0/16.0, 2.0/16.0, 1.0/16.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 sortie = vec4(0,0,0,1);\n    //Récupère la texture de channel0\n    \n    // ... appliquer le filtre ...\n    iChannelResolution[0];\n    for(int u = -1; u <= 1; u++){\n        for(int v = -1; v <= 1; v++){\n            sortie += kernel[(u+1) + 3*(v+1)] * texture(iChannel0, uv + vec2(u,v)/iChannelResolution[0].xy);\n        }\n    }   \n   \tfragColor = sortie;\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Buf C","description":"","type":"buffer"}]}