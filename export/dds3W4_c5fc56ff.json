{"ver":"0.1","info":{"id":"dds3W4","date":"1666227788","viewed":147,"name":"Fraction Spiral collection","username":"ChunderFPV","description":"Updated Sept 1 2023\n3 different number spirals.  I call them 'fraction spirals' because they provide visual decimal to fraction conversion.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["math","spiral","number","fractions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CS(a) vec2(cos(a), sin(a))\n#define N(r) ((abs(r) > 1.) ? 1./(2.*sign(r)-r): r)  // range +/-2 to number line\n\nvoid mainImage(out vec4 C, in vec2 U)\n{\n    vec2 R = iResolution.xy,\n         m = iMouse.xy/R*4.-2.,\n         u = (U-R/2.)/R.y,\n         w, f;\n    u = u.yx; // clock orientation\n    float pi = 3.1416,\n          pi2 = pi*2.,\n          t = 1. + iTime/60.,\n          s = 25.,                      // scale\n          wr = 2.5,                     // warp radius\n          ps = 1.,                      // point size\n          l = 10.,                      // detail loop\n          e = N(clamp(m.y, -1.8, 1.8)), // exponent from mouse\n          z = pow(s, e),                // zoom\n          a1 = -t*s*pi2,                // spiral 1 rotation\n          a2 = -sqrt(t*s*2.)*pi2,       // spiral 2 rotation\n          a3 = -log(t)*s*pi,            // spiral 3 rotation\n          fr = length(u)*wr,            // frame\n          fe = pow(fr, 1./e),           // frame with exponent\n          i = 0., r, h, j, v, rv, sc;\n    \n    vec3 c = vec3(0);\n    u *= z*wr; // apply zoom\n    r = pow(length(u), 1./e); // radius\n    w = fwidth(u); // pixel size\n    c.gb += pow(min(fr, 1./fr), 5.)*.2; // circle frame\n    \n    for (; i++<l;) // cell overlap loop\n        h = max(0., round((r-i)/l))*l+i, // rounded radius\n        j = pow(h, e), // apply exponent\n        f.x = max(f.x, ps/length((u-CS(a1+pi2*t*h)*j)/w)),          // spiral 1\n        f.y = max(f.y, ps/length((u-CS(a2+pi2*sqrt(t*h*2.))*j)/w)); // spiral 2\n    f = min(f, 1.) * min(fe, 1./fe); // limit brightness & darken limits\n    c.rg += f; // add spirals\n    \n    v = (atan(u.y, u.x)-a3)/pi2;\n    rv = r-v;\n    sc = pi*pow(ceil(rv)+v, 2.)/t; // spiral coords\n    c.b += max(0., sin(sc)*cos(sc*2.)) // spiral 3\n         * pow(abs(sin(pi*rv)), abs(e)+1.) // smooth edges\n         * min(1., 1./fe); // darken limits\n    \n    C = vec4(c+c.brg, 1);\n}","name":"Image","description":"","type":"image"}]}