{"ver":"0.1","info":{"id":"l3lyWj","date":"1726677067","viewed":56,"name":"umbrella 2","username":"Efim","description":"simple umbrella","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","noise","sdf","pattern","umbrella"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\numbrella 2\nsdf,raymarching,pattern,umbrella,noise\nsimple umbrella\n*/\n\nfloat hash (vec3 p) {\n    return fract(sin(dot(p, vec3(127.1,311.7, 74.7))) * 43758.5453123);\n}\n\n#define PI  3.14159265359\n#define TAU 6.28318530718\n#define rot(f) mat2(cos(f), -sin(f), sin(f), cos(f))\n\nconst float dist_infin = 10.0;\n#define nn 128\nconst float eps = 0.001;\n\n\n\nvec3 getSg(vec3 p, float nseg) {\n    float fi = mod(atan(p.y, p.x), TAU);\n    fi = mod(fi + PI / nseg, TAU);\n    float n = floor(fi / TAU * nseg);\n    p.xy *= rot(-n * TAU / nseg);\n    return p;\n}\nfloat sdSegment(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\nfloat detail = 0.;\n\nfloat umb(vec3 p) {\n    p.yz*=rot(PI/2.);\n    float n1 = 14., R = 2., h = 2.1;\n    //============================handle=======================\n    float d = length(vec2(length(vec2(p.xy)), max(abs(p.z) - h, 0.))) - 0.07;\n    detail = 0.;\n    float d1 = length(vec2(length(vec2(p.xy)), \n    p.z - clamp(p.z, -h, -0.8*h))) - 0.12;\n    if (d1 < d)\n    {\n        d = d1;\n        detail = 1.;\n    }\n    \n    p = getSg(p, n1);\n    //============================spokes=====================\n    float dz = 0.5, dr = sqrt(R*R - dz*dz);\n    vec2 a0 = vec2(dr * cos(PI / n1), dr * sin(PI / n1)*sign(p.y));\n    float d2 = sdSegment(p.xy, a0, vec2(0.));\n    d2 = length(vec2(d2, p.z-dz)) - 0.02;\n    if (d2 < d)\n    {\n        d = d2;\n        detail = 1.;\n    }\n    //=======================================================\n\n    //===================tent=========================\n    vec3 p0 = normalize(p);\n    vec2 a = vec2(R * cos(PI / n1), R * sin(PI / n1)), b = vec2(R * cos(PI / n1), -R * sin(PI / n1));\n    float t = 0.;\n    if(p.z > 0.) {\n        t = sqrt(R * R / (p0.z * p0.z + p0.x * p0.x / cos(PI / n1) / cos(PI / n1)));\n        float l = p0.x * t / cos(PI / n1);\n        a = vec2(l * cos(PI / n1), l * sin(PI / n1));\n        b = vec2(l * cos(PI / n1), -l * sin(PI / n1));\n    }\n    float d3 = sdSegment(p.xy, a, b);\n    d3 = 0.95*length(vec2(d3, p.z - p0.z * t))-0.02;\n    if (d3 < d)\n    {\n        d = d3;\n        detail = 2.;\n    }\n    //=================================================\n\n    //=====================edges========================\n    p.xy *= rot(-PI / n1 * sign(p.y));\n    float d4 = abs(length(p.xz) - R);\n    if(p.z < 0.)\n        d4 = length(p.xz - vec2(R, 0));\n    d4 = length(vec2(d4, p.y)) - 0.03;\n    if (d4 < d)\n    {\n        d = d4;\n        detail = 2.;\n    }\n    return d;\n\n}\n\n\nfloat map(vec3 p) {\n    return umb(p);\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 pos) {\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * map(pos + k.xyy * h) +\n        k.yyx * map(pos + k.yyx * h) +\n        k.yxy * map(pos + k.yxy * h) +\n        k.xxx * map(pos + k.xxx * h));\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l - p), r = normalize(vec3(f.z, 0, -f.x)), u = cross(f, r), c = f * z, i = c + uv.x * r + uv.y * u;\n    return normalize(i);\n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n\n//#define AA 2\nvec3 col0 = vec3(0.73, 0.59, 0.3);\nvec3 col1 = vec3(0.75, 0.75, 0.75);\nvec3 col2 = vec3(0.7, 0.7, 1.);\nvec3 col4 = vec3(0.9, 0.1, 0.1);\n//vec3 resColor = vec3(0.73, 0.59, 0.3);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 light = normalize(vec3(0.0, .0, 1.)); //light\n    vec3 light2 = normalize(vec3(0.0, 0.0, -1.)); //light\n    vec2 mo = 1.5 * cos(0.5 * iTime + vec2(0, 11));\n    if  (iMouse.z > 0.0)\n    {\n        mo = (-iResolution.xy + 2.0 * (iMouse.xy)) / iResolution.y;\n        mo*=1.5;\n    }\n    vec3 ro = vec3(0.0, 0.0, 5.); // camera\n    //camera rotation\n    ro.yz *= rot(mo.y);\n    ro.xz *= rot(-mo.x - 1.57);\n\n    const float fl = 1.5; // focal length\n    float dist = dist_infin;\n\n    vec3 b1 = vec3(0.23529411764705882, 0.4235294117647059, 0.7725490196078432), b2 = vec3(0.3686274509803922, 0.5725490196078431, 0.8941176470588236);\n    vec3 bg = mix(b2, b1, fragCoord.y / iResolution.y);  \n    //antialiasing\n    vec3 tot = vec3(0.0);\n    for(int m = 0; m < AA; m++) for(int n = 0; n < AA; n++) {\n            vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o)) / iResolution.y;\n            vec3 rd = GetRayDir(p, ro, vec3(0, 0., 0), fl); //ray direction\n            vec3 col = bg; // background  \n            \n            //==========================raymatch=============================\n            float td = 0.;\n            vec3 pos = vec3(0.);\n            for(int i = 0; i < nn; i++) {\n                pos = ro + rd * td;\n                float h = map(pos);\n                if(h < eps || td >= dist_infin)\n                    break;\n                td += h;\n            }\n            if(td < dist_infin) {\n                if (detail == 0.) col = col0;\n                if (detail == 1.) col = col1;\n                if (detail == 2.) \n                {\n                    col = col2*col2;\n                    vec3 bp = floor(pos);\n                    float h = hash(bp);\n                    if (h < 0.1)\n                        col = col4;\n                }\n                vec3 nor = calcNormal(pos);\n                vec3 R = reflect(light, nor);\n                float specular = pow(max(abs(dot(R, rd)), 0.), 16.);\n                float difu = abs(dot(nor, light));\n                col = col * (clamp(difu, 0., 1.0) + 0.5) + vec3(1., .7, .4) * specular;\n                float fre = pow(clamp(dot(nor, rd) + 1., .0, 1.), 3.); // Fresnel, for some mild glow.\n                col += vec3(.1, .1, 0.1) * fre; //?\n                col = sqrt(col);\n            }\n            //==========================raymatch=============================\n            tot += col;\n        }\n    tot = tot / float(AA) / float(AA);\n    //tot = tot / float(AA);\n    //antialiasing\n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}