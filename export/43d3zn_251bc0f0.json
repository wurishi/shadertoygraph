{"ver":"0.1","info":{"id":"43d3zn","date":"1716081185","viewed":79,"name":"Point Containment - Tetrahedron","username":"natevm","description":"Sample code for an efficient point-in-tetrahedron test, including per-vertex value interpolation.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["volume","point","finite","element","containment","query"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2024 Nate Morrical\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// More point containment queries here: https://www.shadertoy.com/playlist/fXdfzX\n\n#if HW_PERFORMANCE==0\n#define NUM_STEPS 16\n#else\n#define NUM_STEPS 32    \n#endif\n\n#define EXPOSURE 2.5\n\n// Node positions, with \"y\" up and data values stored in \"w\" \nstruct Tetrahedron {\n    // Bottom triangle (counter-clockwise order)\n    vec4 v0, v1, v2;\n    \n    // Top point\n    vec4 v3;\n};\n\nbool interpolate(vec3 P, in Tetrahedron e, out float value) {\n    float vol_all = determinant(mat3(e.v1.xyz - e.v0.xyz, e.v2.xyz - e.v0.xyz, e.v3.xyz - e.v0.xyz)); \n    if (vol_all == 0.0) return false;\n    float w0 = determinant(mat3(P - e.v1.xyz, e.v3.xyz - e.v1.xyz, e.v2.xyz - e.v1.xyz)) / vol_all;\n    if (w0 < 0.0) return false;\n    float w1 = determinant(mat3(P - e.v0.xyz, e.v2.xyz - e.v0.xyz, e.v3.xyz - e.v0.xyz)) / vol_all;\n    if (w1 < 0.0) return false;\n    float w2 = determinant(mat3(P - e.v0.xyz, e.v3.xyz - e.v0.xyz, e.v1.xyz - e.v0.xyz)) / vol_all;\n    if (w2 < 0.0) return false;\n    float w3 = determinant(mat3(P - e.v0.xyz, e.v1.xyz - e.v0.xyz, e.v2.xyz - e.v0.xyz)) / vol_all;\n    if (w3 < 0.0) return false;\n    value = e.v0.w * w0 + e.v1.w * w1 + e.v2.w * w2 + e.v3.w * w3;\n    return true;\n}\n\n//-----------------------------------------------------------------------------\n// Utils\n//-----------------------------------------------------------------------------\n\nvec3 viridis(float t) {\n    t = clamp(t, 0.0, 1.0);\n    \n    const vec3 c0 = vec3(0.2777273272234177, 0.005407344544966578, 0.3340998053353061);\n    const vec3 c1 = vec3(0.1050930431085774, 1.404613529898575, 1.384590162594685);\n    const vec3 c2 = vec3(-0.3308618287255563, 0.214847559468213, 0.09509516302823659);\n    const vec3 c3 = vec3(-4.634230498983486, -5.799100973351585, -19.33244095627987);\n    const vec3 c4 = vec3(6.228269936347081, 14.17993336680509, 56.69055260068105);\n    const vec3 c5 = vec3(4.776384997670288, -13.74514537774601, -65.35303263337234);\n    const vec3 c6 = vec3(-5.435455855934631, 4.645852612178535, 26.3124352495832);\n\n    vec3 srgb = c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n    return pow(srgb, vec3(2.2));\n}\n\nvec4 over(vec4 a, vec4 b) {\n  vec4 result;\n  result.a = a.a + b.a * (1.f - a.a);\n  if (result.a == 0.f)\n    return a; // avoid NaN\n  result.rgb = (a.rgb * a.a + b.rgb * b.a * (1.f - a.a)) / result.a;\n  return result;\n}\n\n#define M_2PI 6.2831853071795865f\n#define M_GRC 0.61803398875f\n\n// Vertex positions for the element\nconst vec3 pa = vec3(sin((1.0 / 3.0) * M_2PI), -.75, cos((1.0 / 3.0) * M_2PI));\nconst vec3 pb = vec3(sin((2.0 / 3.0) * M_2PI), -.75, cos((2.0 / 3.0) * M_2PI));\nconst vec3 pc = vec3(sin((3.0 / 3.0) * M_2PI), -.75, cos((3.0 / 3.0) * M_2PI));\nconst vec3 pd = vec3( 0.0, .75, 0.0);\n\n\n//-----------------------------------------------------------------------------\n// Main functions\n//-----------------------------------------------------------------------------\nTetrahedron CreateTetrahedron() {\n    Tetrahedron tet;\n    \n    float time = iTime * 10.0;\n    const float angle_offset = M_2PI / 3.0;\n\n    // Base tri\n    tet.v0 = vec4(cos(1.0 * angle_offset), -0.75, sin(1.0 * angle_offset), .5 + .5 * cos(time*0.1));\n    tet.v1 = vec4(cos(2.0 * angle_offset), -0.75, sin(2.0 * angle_offset), .5 + .5 * cos(time*0.2));\n    tet.v2 = vec4(cos(3.0 * angle_offset), -0.75, sin(3.0 * angle_offset), .5 + .5 * cos(time*0.3));\n\n    // Top point\n    tet.v3 = vec4( 0.0, .75, 0.0, .5 + .5 * cos(time*0.4));\n\n    return tet;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 v = -1.0 + 2.0*q;\n    v.x *= iResolution.x/ iResolution.y;\n           \n    float an = 0.25*iTime + 6.283185*iMouse.x/iResolution.x;\n    vec3 ro = vec3( 3.5*cos(an), 0.7, 3.5*sin(an) );\n    vec3 ta = vec3( 0.0, -0.1, 0.0 );\n    \n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n    // create view ray\n    vec3 rd = normalize( v.x*uu + v.y*vv + 3.0*ww );\n    \n    // create element\n    Tetrahedron tet = CreateTetrahedron();\n        \n\tvec4 color = vec4(.0);\n\t\n    float startRayOffset = 0.0f;\n    int frame = iFrame % 64;\n        \n    // blue noise\n    startRayOffset = texture(iChannel0, fragCoord / 1024.0f).r;\n    startRayOffset = fract(startRayOffset + float(frame) * M_GRC);\n\t\n\t\n\tfloat zMin         = 2.0;\n    float zMax         = 5.0;\n\tfloat step         = (zMax - zMin) / float(NUM_STEPS);\n    vec3 p             = ro + rd * zMin + rd * step * startRayOffset;    \n\tint zer = int(min(iTime, 0.)); // Hack to force loop unrolling.\n    for(int i = zer; i < NUM_STEPS; i++)\n\t{\n        float value; \n        if (interpolate(p, tet, value)) {\n            // Colormapped value and a hardcoded optical density\n            vec3 rgb = viridis(value) * EXPOSURE;\n            float density = 2.0;\n            float rho = 1.0 - exp(-density * step);\n            color = over(color, vec4(rgb, rho));\n            if (color.a > .95) break;\n        }\n\t\tp += rd*step;\n\t}\n         \n    // Composite over a background\n    color = over(color, vec4(vec3(0.01)*(1.0-0.2*length(v)), 1.0));\n\n    color.rgb = pow(color.rgb, vec3(1.0/2.2));\n    \n    // cheap dithering\n    color.rgb += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)/512.0;\n\n    fragColor = color;\n}\n","name":"Image","description":"","type":"image"}]}