{"ver":"0.1","info":{"id":"flKBR1","date":"1664051915","viewed":83,"name":"2d- parametric","username":"jorge2017a2","description":"2d- parametric","likes":10,"published":1,"flags":8,"usePreview":0,"tags":["sound","bezier","parametric","2dparametric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a2\n\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///2d- parametric--24-sep-2022\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(6.0*antialiasing(0.5),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\n// curve\nvec2 mapD0(vec2 p, float t)\n{ float a=2.0,b=3.0,c=.3;\n    vec2 m=2.5*p;\n    vec2 n=vec2(10.0);\n    return a*cos(t+m)*(b+c*cos(t*7.0+n));\n}\n\nvec2 map(float t)\n{ return 0.85*cos( t + vec2(0.0,1.0) )*(0.6+0.4*cos(t*7.0+vec2(0.0,1.0))); }\n\nfloat sdSqSegment( in vec2 p, in vec2 a, in vec2 b )\n{\tvec2 pa = p - a, ba = b - a;\n\treturn dot2( pa - ba*clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 ) );\n}\n\nvec3 fig(vec2 p, vec3 colOut)\n{   vec2 d1= mapD0(p, 0.0);\n    vec3 col= DrawFigBorde(vec3(0.5), colOut, d1.x );\n    float d2=sdCircle( vec2(p.x,d1.x), 3.0 );\n    float d3=sdCircle( d1, 3.0 );\n    col= DrawFigBorde(vec3(1.,0.0,0.0), col, d1.y );\n    col= DrawFigBorde(vec3(0.,0.0,1.0), col, d2 );\n    col= DrawFigBorde(vec3(0.,0.5,1.0), col, d3 );\n  //https://www.shadertoy.com/view/Xlf3zl\n    float h = 0.05; //6.2831/70.0;\n    float t=0.0+iTime;\n    vec2  a = map(t)+vec2(1.0,0.0);\n    float d = dot2( p - a );\n    vec2  b = map(t);\n    d = sdSqSegment( p, a, b ) ;\n    col= DrawFigBorde(vec3(0.,1.0,1.0), col, d );\n    return col;\n}\n\nvec3 fig2(vec2 q , vec3 colOut)\n{   float r = 0.2 + 0.1*cos( atan(q.y,q.x)*10.0 + 20.0*q.x + 1.0+iTime);\n\tfloat d1=r/length( q ); \n    vec3 col= DrawFigBorde(vec3(0.5,0.5,1.0), colOut, d1 );\n    return col;\n}\n\nvec3 fig3(vec2 q , vec3 colOut)\n{   float r = 0.2 + 0.1*cos( atan(q.y,q.x)*10.0 + 20.0*q.x + 1.0);\n    float d2= smoothstep( r, r+0.1, length( q ) );\n    return  DrawFigBorde(vec3(0.5,0.0,0.5), colOut, abs(d2)-0.1);\n    \n}\n\nvec3 fig5(vec2 q , vec3 colOut)\n{   float r = 0.2 + 0.1*cos( atan(q.y,q.x)*10.0 + 20.0*q.x*sin((q.y+q.x)*5.0) + 1.0);\n    float d2= smoothstep( r, r+0.01, length( q ) );\n    vec3 col= DrawFigBorde(vec3(0.0,1.0,0.0), colOut, d2 );\n    return col;\n}\n\nvec3 fig4(vec2 q , vec3 colOut)\n{   \n    vec2 q0=q;\n    float r = 0.2 + 0.1*cos( atan(q.y,q.x)*10.0 + 20.0*q.x + 1.0);\n     r=r+sin(r);\n     float  d0= sdBox( q, vec2(1.0) );\n    float d2= smoothstep( r, r+0.01, length( q )+d0 );\n    float d3= sdTunnel( vec2(q.x,-q.y)-vec2(0.0,0.4), vec2(0.4,0.5) );\n    \n    q.x=abs(q.x)-0.18;\n    float d4= sdTunnel( q-vec2(0.0,-0.22), vec2(0.1,0.15) );\n    float t=iTime;\n    q=q0;\n    float d5a= sdCircle(q-vec2(-0.15+0.05*cos(t-sin(t)),-0.25+0.1*sin(t)), 0.05 );\n    float d5b= sdCircle(q-vec2( 0.15+0.05*cos(t-sin(t)),-0.25+0.1*sin(t)), 0.05 );\n    \n    d5a=intersectSDF(d4,d5a);\n    d5b=intersectSDF(d4,d5b);\n    \n    float d6= sdBezier(q-vec2(-0.1,-0.5), vec2(0.0,0.0), vec2(0.125,-0.125), vec2(0.25,0.0) );\n    \n    vec3 col= DrawFigBorde(vec3(0.0,1.0,0.0), colOut, d2 );\n    col= DrawFigBorde(vec3(0.5,1.0,0.0), col, d3 );\n    \n    col= DrawFigBorde(vec3(1.0), col, d4);\n    col= DrawFigBorde(vec3(1.0,0.0,0.0), col, d5a);\n    col= DrawFigBorde(vec3(1.0,0.0,0.0), col, d5b);\n    col= DrawFigBorde(vec3(1.0,0.0,0.0), col, d6);\n    return col;\n}\n\nvec3 fig6(vec2 q , vec3 colOut)\n{   \n    vec2 q0=q;\n    float r = 0.2 + 0.1*cos( atan(q.y,q.x)*10.0 + 20.0*q.x*sin(q.y*0.25/(cos(q.x)*cos(q.y))) + 1.0);\n     r=r+sin(r);\n     float  d0= sdBox( q, vec2(1.0) );\n     \n    float d2= smoothstep( r, r+0.01, length( q )+d0 );\n    float d3= sdTunnel( vec2(q.x,-q.y)-vec2(0.0,0.4), vec2(0.4,0.5) );\n    q.x=abs(q.x)-0.18;\n    float d4= sdTunnel( q-vec2(0.0,-0.22), vec2(0.1,0.15) );\n    float t=iTime-2.0;\n    q=q0;\n    float d5a= sdCircle(q-vec2(-0.15+0.05*cos(t-sin(t)),-0.25+0.1*sin(t)), 0.05 );\n    float d5b= sdCircle(q-vec2( 0.15+0.05*cos(t-sin(t)),-0.25+0.1*sin(t)), 0.05 );\n    d5a=intersectSDF(d4,d5a);\n    d5b=intersectSDF(d4,d5b);\n    float d6= sdBezier(q-vec2(-0.1,-0.5), vec2(0.0,-0.075), vec2(0.125,-0.125), vec2(0.25,0.0) );\n    vec3 col= DrawFigBorde(vec3(0.0,1.0,0.0), colOut, d2 );\n    col= DrawFigBorde(vec3(0.5,1.0,0.0), col, d3 );\n    col= DrawFigBorde(vec3(1.0), col, d4);\n    col= DrawFigBorde(vec3(1.0,0.0,0.0), col, d5a);\n    col= DrawFigBorde(vec3(1.0,0.0,0.0), col, d5b);\n    col= DrawFigBorde(vec3(1.0,0.0,0.0), col, d6);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    float esc=8.0;\n    uv*=esc;\n    vec2 uv0=uv;\n    vec3 col=vec3(1.0);\n    float t=iTime;\n    if(3.0*sin(t)>0.0)\n     col= fig(uv,col);\n   \n    col= fig2(uv*2.0 , col);\n    \n    col= fig4((uv-vec2(-5.0,5.0))*0.125,col);\n    col= fig3((uv-vec2(-2.0,6.0))*0.125,col);\n    col= fig6((uv-vec2(7.5,5.0))*0.125,col);\n    col=pow(col,  vec3(0.554545));\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///---IQ\nfloat dot2( in vec2 v ) { return dot(v,v); }\n///---IQ\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n\n\n///Iq\nfloat sdTunnel( in vec2 p, in vec2 wh )\n{\n    p.x = abs(p.x); p.y = -p.y;\n    vec2 q = p - wh;\n\n    float d1 = dot2(vec2(max(q.x,0.0),q.y));\n    q.x = (p.y>0.0) ? q.x : length(p)-wh.x;\n    float d2 = dot2(vec2(q.x,max(q.y,0.0)));\n    float d = sqrt( min(d1,d2) );\n    \n    return (max(q.x,q.y)<0.0) ? -d : d;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"//----por jorge flores--JFP\nfloat tamborIndiov1(float time, float freq)\n{   float t=mod(time,0.8);\n    float x=t*freq;\n    float fx1 = 2.0*(sin(8.*x)+cos(5.*x))/x; //tambor de indios\n    return fx1;\n}\n\nvec2 mainSound( int samp, float time )\n{  float t1= tamborIndiov1(time,140.0);\n    float t2= tamborIndiov1(time+2.0,80.0);\n    float tm1=time;\n    float t3=0.0, t4=0.0;\n    if(2.0*sin(tm1)>0.0)\n     t3= tamborIndiov1(time+5.0,200.0);\n    else\n     t4= tamborIndiov1(time+5.0,1200.0);\n    return vec2(t1+t2+t3+t4);\n}","name":"Sound","description":"","type":"sound"}]}