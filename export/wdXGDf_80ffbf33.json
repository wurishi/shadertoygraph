{"ver":"0.1","info":{"id":"wdXGDf","date":"1547646327","viewed":203,"name":"Deep Space Sky","username":"ReavenTehDerg","description":"Just played around with smooth noise generation that i learnt from the youtube channel ArtOfCode.\n\nAlso a friend of mine wanted me to do something sky alike. So i came up with this :)","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["noise","sky"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float N21(vec2 p)\n{\n    p = fract(p * vec2(6574.5414, 8961.8778));\n    p += dot(p, p + 23.45);\n    return fract(p.x * p.y);\n}\nvec2 N22(vec2 p)\n{\n    float x = N21(p);\n    float y = N21(p + x);\n    return vec2(x, y);\n}\nvec2 GetPos(vec2 id)\n{\n    vec2 n = N22(id) * 24.;\n    return sin(n) * .4;\n}\nfloat sn(vec2 uv)\n{\n    vec2 lv = fract(uv * 10.0);\n    vec2 id = floor(uv * 10.0);\n\n    lv = lv * lv * (3. - 2. * lv);\n\n    float bl = N21(id);\n    float br = N21(id +vec2(1, 0));\n    float b = mix(bl, br, lv.x);\n\n    float tl = N21(id + vec2(0,1));\n    float tr = N21(id +vec2(1, 1));\n    float t = mix(tl, tr, lv.x);\n\n    return mix(b, t, lv.y);\n}\nfloat stars(vec2 uv)\n{\n\n    vec2 gv = fract(uv) - 0.5;\n    vec2 id = floor(uv);\n    vec2 pos = GetPos(id);\n    float distance = length(gv - pos);\n    float shineRate = abs(sin(iTime * 0.8 * N21(id)));\n\n    float star = smoothstep(0.06, clamp(0.9 - sqrt(iTime / 10.0), 0.001, 0.059), distance) * shineRate;\n    return star - 0.15;\n}\n\nvec3 animate(vec2 uv)\n{\n    float zoomout = sqrt((iTime * 0.25));\n    float andromedaFade = sqrt(iTime / 8.);\n    uv *= clamp(zoomout, 0.0, 1.8);\n\n    vec3 spaceCol = vec3(0.0, 0.0, 0.10);\n    vec3 andromedaColPink = vec3(0.8, 0.0, 0.7);\n    vec3 andromedaColGreen = vec3(0.2, 0.9, 0.2);\n\n    spaceCol += stars(uv);\n\n    vec2 androUV = uv;\n    float s = sin(iTime * 0.08);\n    float c = cos(iTime * 0.08);\n    mat2 rotmat = mat2(c, -s, s, c);\n    //androUV -= iTime * 0.2;\n    androUV *= rotmat;\n    float andromedaPinkNoise = sn(androUV * 0.03) * clamp(andromedaFade, 0.0, 1.6);\n    andromedaPinkNoise += sn(androUV * 0.25) * 0.125;\n    andromedaPinkNoise += sn(androUV * 0.125) * 0.625;\n    andromedaPinkNoise /= 5.0;\n    spaceCol +=  mix(spaceCol, andromedaColPink, andromedaPinkNoise);\n\n\n    s = sin(iTime * 0.03);\n    c = cos(iTime * 0.03);\n    rotmat = mat2(c, s, -s, c);\n    vec2 androUV2 = uv;\n    androUV2.y += iTime * 0.3;\n    androUV2 *= rotmat;\n    float andromedaGreenNoise = sn(androUV2 * 0.03) * clamp(andromedaFade, 0.0, 1.6);\n    andromedaGreenNoise += sn(androUV2 * 0.25) * 0.125;\n    andromedaGreenNoise += sn(androUV2 * 0.125) * 0.625;\n    andromedaGreenNoise /= 3.0;\n    spaceCol +=  mix(spaceCol, andromedaColGreen, andromedaGreenNoise);\n\n    return spaceCol;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y * 10.;\n    vec3 col = animate(uv);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}