{"ver":"0.1","info":{"id":"tlsGRj","date":"1556971895","viewed":81,"name":"Zooming in the Mandelbrot set","username":"StormCreeper","description":"My first implementation of the Mandelbrot Set in GLSL","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvec3 getColor(float n) {\n\tvec3 col = vec3(0);\n    float l = 1./log(2.);\n    col.x = (1.-cos(l*n))/2.;\n    col.y = (1.-cos(1./(3.*sqrt(2.))*l*n))/2.;\n    col.z = (1.-cos(1./(7.*pow(3., 1./8.))*l*n))/2.;\n    \n    /*vec3 palette[4];\n    palette[0] = vec3(0.);\n    palette[1] = vec3(0., 0., 1.);\n    palette[2] = vec3(1.);\n    palette[3] = vec3(0., 1., 0.);\n    \n    return palette[n%4];\n\t*/\n    return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float size = pow(10., -iTime/3. + 0.5);\n    vec2 pos = vec2(-0.743643887037151, 0.13182590420533);\n    float limit = 800.;//(iMouse.y*iMouse.y);\n    vec2 res = normalize(iResolution.xy);\n    float ca = map(fragCoord.x, 0., iResolution.x, pos.x-size*res.x, pos.x+size*res.x);\n    float cb = map(fragCoord.y, 0., iResolution.y, pos.y-size*res.y, pos.y+size*res.y);\n    float a = 0.;//iMouse.x / iResolution.x * 2. - 1.;\n    float b = 0.;//iMouse.y / iResolution.y * 2. - 1.;\n    float n = 0.; \n    float log2 = log(2.);\n    while(n < limit) {\n        float aa = a*a - b*b;\n        float bb = 2.*a*b;\n        a = aa+ca;\n        b = bb+cb;\n        n++;\n        if(a*a+b*b > 4.) { \n            n = n + 1. - log((log(a*a+b*b)/2.)/log2)/log2;\n        \tbreak;\n        }\n        \n        \n    }\n\tvec3 col;\n    if(n < limit) {\n        col = getColor(n);\n        \n    } else {\n    \tcol = vec3(0.);\n    }\n    fragColor = vec4(col, 1.);\n    \n}","name":"Image","description":"","type":"image"}]}