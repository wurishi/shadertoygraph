{"ver":"0.1","info":{"id":"WljfDV","date":"1599902853","viewed":229,"name":"Grunge Colorwheel","username":"postpoptart","description":"Just added some color mods to celns 3tSBDV shader. Been staring at it for hours. Looks good at lower resolutions. Try some lower octaves values.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractalfbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Fractal_FBM\" by celns. https://shadertoy.com/view/3tSBDV\n\n// just added some \n\n//base on: https://github.com/patriciogonzalezvivo/thebookofshaders\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(67.,113.)))*\n        3141.59);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\n//四点插值噪声\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define NUM_OCTAVES 8\n//fbm函数，其中增加了一个旋转的叠加\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = abs(sin(iTime*.09))+.25;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 5.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.xy*3.;\n    st.x *= iResolution.x / iResolution.y;\n    \n    vec3 color = vec3(0.0);\n\n    vec2 q = vec2(0.);\n    q.x = fbm( st + .1*sin(iTime*.25));\n    q.y = fbm( st + .1*cos(iTime*.0625));\n\n    //用fbn来实现对fbm参数的初始化，\n    //也就是说fbm嵌套fbm\n    vec2 r = vec2(0.);\n    r.x = fbm( st + 1.0*q + vec2(1.7,9.2)+ 0.15*iTime );\n    r.y = fbm( st + 1.0*q + vec2(8.3,2.8)+ 0.126*iTime);\n\n    //可以改变f的取值方式，来观察有什么不同的效果\n    float f = fbm(r);\n    f = fbm(st * r);\n\n    //使用f的二次函数值作为alpha\n    //进行双色插值\n    color = mix(vec3(0.0745, 0.6667, 0.7216),\n                vec3(0.2078, 0.9333, 0.898),\n                clamp((f*f)*4.0,0.0,1.0));\n\n    //使用q的模作为alpha   \n    //进行color与单色插值\n    color = mix(color,\n                vec3(0,0,0.164706),\n                clamp(length(q),0.0,1.0));\n\n    //使用r.x的clamp值作为alpha\n    //进行color与单色插值\n    color = mix(color,\n                vec3(abs(cos(iTime*.011)),\n                     abs(sin(iTime*.037)), \n                     sin(iTime*.007)*sin(iTime*.007))+.1,\n                clamp(length(r.x),0.0,1.0));\n\n    //使用f的三次函数对color进行后期处理\n    fragColor = vec4((f*f*f+.6*f*f+.5*f)*color,1.);\n    //使用平方进行锐化\n    fragColor = vec4(color * color, 1.0);\n    //\n    //fragColor = vec4(sin(u_time) * color, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}