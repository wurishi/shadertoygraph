{"ver":"0.1","info":{"id":"4sGyDd","date":"1531880859","viewed":904,"name":"Pixel Sorter","username":"ChrisK","description":"Click to restart.\n\nSorting criteria can be controlled with the #define directives in Buffer A (options are 'luma', 'hue', 'saturation' and 'brightness').","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["sort","sorting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define XAXIS hue\n#define YAXIS luma\n\n\nfloat luma( vec3 c ) {\n    return 0.2126*c.r + 0.7152*c.g + 0.0722*c.b;\n}\n\nfloat hue( vec3 c ) {\n    float mx = max(max(c.r,c.g),c.b);\n    float d = mx-min(min(c.r,c.g),c.b);\n    if ( mx==c.r ) return (c.g-c.b)/d;\n    else if ( mx==c.g ) return 2.0+(c.b-c.r)/d;\n    else return 4.0+(c.r-c.g)/d;\n}\n\nfloat saturation( vec3 c ) {\n\tfloat mx = max(max(c.r,c.g),c.b);\n    float mn = min(min(c.r,c.g),c.b);\n    return (mx-mn)/(mx+mn);\n}\n\nfloat brightness( vec3 c ) {\n    return c.r+c.g+c.b;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 col;\n    \n    if (iFrame<10 || iMouse.z>0.0) {\n    \tcol = texture(iChannel1, fragCoord/iResolution.xy).rgb;\t\t\t\t\t\t//initialize with image\n    } else {\n        col = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;\n        \n        //if ( mod(fragCoord.x+fragCoord.y+(float(iFrame)/2.0),2.0)>=1.0 ) {\t\t//glitchy but cool\n        if ( mod(floor(iTime/2.0),2.0)==1.0 ) {\t\t\t\t\t\t\t\t\t//faster, better results\n    \t//if ( mod(float(iFrame/2),2.0)==1.0 ) {\t\t\t\t\t\t\t\t\t//more attractive sorting, slightly sloppier\n        \tif ( mod(fragCoord.x+fragCoord.y+float(iFrame),2.0)==1.0 ) {\n            \tfloat ny = min(fragCoord.y+1.0, iResolution.y);\n                vec3 c = texelFetch(iChannel0, ivec2(fragCoord.x, ny), 0).rgb;\n                if ( YAXIS(col) <= YAXIS(c) ) col = c;\n        \t} else {\n                float ny = max(fragCoord.y-1.0, 0.0);\n                vec3 c = texelFetch(iChannel0, ivec2(fragCoord.x, ny), 0).rgb;\n                if ( YAXIS(col) >= YAXIS(c) ) col = c;\n        \t}\n        } else {\n            if ( mod(fragCoord.x+fragCoord.y+float(iFrame),2.0)==1.0 ) {\n            \tfloat nx = min(fragCoord.x+1.0, iResolution.x);\n                vec3 c = texelFetch(iChannel0, ivec2(nx, fragCoord.y), 0).rgb;\n                if ( XAXIS(col) <= XAXIS(c) ) col = c;\n        \t} else {\n                float nx = max(fragCoord.x-1.0, 0.0);\n                vec3 c = texelFetch(iChannel0, ivec2(nx, fragCoord.y), 0).rgb;\n                if ( XAXIS(col) >= XAXIS(c) ) col = c;\n        \t}\n        }  \n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}