{"ver":"0.1","info":{"id":"ldXBz8","date":"1494789692","viewed":275,"name":" Gray-Scott diffusion selection","username":"tholzer","description":"I modified knighty's shader (see header) to examine diffusion-reaction with constant parameters. \nPress <Blanc> to set random scenery. \nClick on overview picture (with scaled parameters) to select fixed parameters you are interrested in.\n\n","likes":8,"published":1,"flags":112,"usePreview":0,"tags":["diffusion","gray","reaction","scott"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dlSz7","filepath":"https://soundcloud.com/megadrivemusic/night-prowl","previewfilepath":"https://soundcloud.com/megadrivemusic/night-prowl","type":"musicstream","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//==========================================================\n// GrayScottDR_Image.glsl\n//\n// Gray-Scott Diffusion Reaction selection\n//\n//   v1.0  2017-05-14  initial release\n//         2017-05-24  working on...\n//\n// improved version of https://www.shadertoy.com/view/MdVGRh\n// \n// Range of overview picture: x=k 0,025..0,030  y=F 0,0..0,05 \n// Select left top sub picture parameter with mouse click \n// on overview picture. \n//\n// Info:  http://mrob.com/pub/comp/xmorphia/\n//        http://www.karlsims.com/rd.html \n//       \n//==========================================================\n\nvec3 getColor(vec2 uv)\n{\n    return 0.5+0.5*sin(vec3(uv,uv.x-uv.y)*vec3(12.2,6.8,1.25)+vec3(1.,.0,1.25));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 mo = iMouse.xy / iResolution.xy;\n\tvec2 val = texture(iChannel0, uv).xy;\n    vec3 col = getColor(val)*(1.9*val.y+0.25);\n    \n\tif (iMouse.z > 0.5)       // mousePressed ?\n    {                         // draw red cross\n      uv = (mo - uv);         // -1.0 .. 1.0\n      float grid =     step(abs(uv.x), 0.0014);\n      grid = max(grid, step(abs(uv.y), 0.0020));\n\t  col.x += grid;\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//==========================================================\n// GrayScottDR_BufA.glsl\n//\n// Gray-Scott Diffusion Reaction selection\n// \n//   v1.0  2017-05-14  initial release\n//   v1.1  2017-05-15  code optimization \n//   v1.2  2017-05-15  start with texture (iChannel1)\n//==========================================================\n\n\n//==========================================================\n//  k e y    handling\n//==========================================================\n\nconst int KEY_SPACE = 32;\nconst int KEY_RETURN = 13;\n\n//----------------------------------------------------------\nbool KeyPressed(int key) // return true if given key is pressed\n{\n  return 0.5 < texture(iChannel3, vec2(key,0.25) / 256.0).x;\n}\n\n//==========================================================\n//  Gray-Scott diffusion-reaction\n//==========================================================\n\n#define USE_FIXED\n\nconst vec2 Diffusion = vec2(0.08,0.03);\n\nconst float dt = 2.0;\n\nfloat rand(vec2 co)\n{\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid random(inout vec4 fragColor, in vec2 uv)\n{\n    float rnd = fract(rand(uv)+(sin(50.*uv.x)+sin(50.*uv.y)));\n    fragColor.x = rnd*0.5;\n    fragColor.y = rnd*0.5;\n}\n\n// nine point stencil\nvec2 laplacian(vec2 position, float ps) \n{\n    vec2 pixelSize = ps / iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t  0.5*texture( iChannel0, position -P.xy).xy // first row\n\t+     texture( iChannel0, position -P.zy).xy\n\t+ 0.5*texture( iChannel0, position -P.wy).xy\n\t+     texture( iChannel0, position -P.xz).xy // seond row\n\t- 6.0*texture( iChannel0, position      ).xy\n\t+     texture( iChannel0, position +P.xz).xy\n\t+ 0.5*texture( iChannel0, position +P.wy).xy // third row\n\t+     texture( iChannel0, position +P.zy).xy\n\t+ 0.5*texture( iChannel0, position +P.xy).xy;\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;  //  0 .. 1\n    vec2 mo = iMouse.xy / iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;    // aspect ratio\n    vec2 ratio = vec2(aspect, 1.0);                 //      \n    \n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    if ((iFrame == 0) || (KeyPressed(KEY_SPACE)))\n    {\n        random (fragColor, uv);\n        mo = vec2(0.030, 0.055);\n        return;\n    }\n\n    if (KeyPressed(KEY_RETURN))\n    {\n        fragColor = texture(iChannel1, uv);\n        mo = vec2(0.035, 0.050);\n        return;\n    }\n\n    // use scaled parameter\n    const float xmin = 0.025,  xMul = 0.05;  \n    const float ymin = 0.000,  yMul = 0.08;\n    \n    float k = xmin + uv.x*xMul;   // 0.025 .. 0.030\n    float F = ymin + uv.y*yMul;   // 0.000 .. 0.080\n\n    #ifdef USE_FIXED\n    if ((uv.x < 0.4) && (uv.y > 0.5)) \n    {   // use fixed parameters                     \n        k = xmin + mo.x*xMul;\n        F = ymin + mo.y*yMul;;         \n    }\n    #endif\n    \n    vec4 data = texture(iChannel0, uv);  // previous image data\n    float u = data.x;\n    float v = data.y;\n    vec2 Duv = (1.0*laplacian(uv, 1.0)\n               +0.0*laplacian(uv, 7.0)\n               +0.0*laplacian(uv, 9.0))*Diffusion;\n    float du = Duv.x - u*v*v + F*(1.-u);\n    float dv = Duv.y + u*v*v - (F+k)*v;\n    fragColor.xy = clamp(vec2(u+du*dt,v+dv*dt), 0., 1.);\n}","name":"Buf A","description":"","type":"buffer"}]}