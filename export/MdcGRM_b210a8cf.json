{"ver":"0.1","info":{"id":"MdcGRM","date":"1448548043","viewed":232,"name":"Simple HSV Palette fade","username":"prozacgod","description":"I'm trying to understand shaders, another piece to the puzzle of getting cool stuff working, this seems to be a decent prof of concept!\nvalue boundary","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["colors","palette","hsv","fade"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"/*\n\tThis code creates a color gradiant from the palette!\n\t\n\t* You can also make the color gradiant palette have dynamic stops.\n\n*/\n\n// this was shamelessly pulled from the web\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n/* the following code is generated from a python script */\nvec4 _p_0 = vec4(1.0, 0.750,0.380,0.000);\nvec4 _p_1 = vec4(0.006,0.780,0.760,0.200);\nvec4 _p_2 = vec4(0.033,0.750,1.000,0.400);\nvec4 _p_3 = vec4(0.125,0.520,1.000,0.600);\nvec4 _p_4 = vec4(0.244,0.070,1.000,0.800);\nvec4 _p_5 = vec4(0.000,0.000,1.000,1.000);\nvec4 _palette_lo(float i) {\n  return  (i<=_p_1.w)?_p_0: (i<=_p_2.w)?_p_1: (i<=_p_3.w)?_p_2: (i<=_p_4.w)?_p_3: (i<=_p_5.w)?_p_4: _p_5;\n}\nvec4 _palette_hi(float i) {\n  return  (i<=_p_1.w)?_p_1: (i<=_p_2.w)?_p_2: (i<=_p_3.w)?_p_3: (i<=_p_4.w)?_p_4: (i<=_p_5.w)?_p_5: _p_5;\n}\n/* end generated code */\n\nvec3 palette(float i) {\n    vec4 hi = _palette_hi(i);\n    vec4 lo = _palette_lo(i);\n    \n    float i_p = clamp((i - lo.w) / (hi.w - lo.w), 0.0, 1.0);\n    float i_pp = (1.0 - i_p);\n        \n    float xc = (lo.x*i_pp) + (hi.x*i_p);\n    \n    if (abs(hi.x - lo.x) > 0.5) {\n        xc = ((lo.x + 1.0 + hi.x) / 2.0) - 1.0;\n    }\n    \n    vec3 rlo = lo.xyz * i_pp;\n    vec3 rhi = hi.xyz * i_p;\n    vec3 r = rlo.xyz + rhi.xyz;\n    r.x = xc;\n    \n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n    float t = sin(mod(iTime, 1.0) * 6.288);\n    \n    // this just plays around with the hue start/stop positions...\n    \n    _p_1.w = 0.200 + (sin(t+0.0) * 0.05);\n    _p_2.w = 0.400 + (sin(t+2.0) * 0.05);\n    _p_3.w = 0.600 + (sin(t+4.0) * 0.05);\n    _p_4.w = 0.800 + (sin(t+6.0) * 0.05);\n    \n    fragColor = vec4(hsv2rgb(palette(uv.x)), 1.0);\n}","name":"","description":"","type":"image"}]}