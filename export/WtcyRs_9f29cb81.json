{"ver":"0.1","info":{"id":"WtcyRs","date":"1609696418","viewed":72,"name":"Genuary2021 3: Something Human","username":"qw","description":"Entry for Day 3 of #Genuary2021 - see https://genuary2021.github.io/\nPrompt of the day: Make something Human\n\nAlthough a watch is mechanical, Humans create these machines to help them on their journeys (eg: tell the time).","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","time","watch","genuary2021","genuary"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// It's a watch\n//\n// Start-of point, using: \n//\"RayMarching starting point\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2020: https://www.shadertoy.com/view/WtGXDD\n//\n//Added some of IQ's raymarching formulas too,\n//Thanks for your educational efforts\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34,233.53));\n    p += dot(p, p+23.234);\n    return fract(p.x*p.y);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCircularBox(vec3 p, vec3 size, float circleRadius, float rotOffset){\n    float d=10000.;\n    float braceletBoxCount = 15.;\n    for(float i = 0.; i<braceletBoxCount; i++){\n    \n        vec3 rotP = p;\n        float rotation = 2.*3.14* (i/braceletBoxCount) + rotOffset;\n        rotP.xz *= Rot(rotation);\n        rotP += vec3(circleRadius,0.,0.);\n       \n        d = min( d, sdBox(rotP, size) - 0.01);\n        //Add pins for center boxes\n        if( rotOffset == 0. ){\n            vec3 pinOffset = vec3(0.);\n            pinOffset.xz *= Rot(rotation);\n            pinOffset.xz += vec2(0.0,0.1);\n            d = min(d, sdCappedCylinder(rotP+pinOffset,0.04, .43) );\n            d = min(d, sdCappedCylinder(rotP-pinOffset,0.04, .43) );\n        }\n    }\n    return d;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat GetDist(vec3 p) {\n    float d;\n    \n    vec3 braceletBoxSize = vec3(.07,.2,.25);\n    vec3 braceletOuterBoxSize = vec3(braceletBoxSize.x,braceletBoxSize.y*.4,braceletBoxSize.z);\n    float braceletCenter = sdCircularBox(p, braceletBoxSize, 1.3, 0.);\n    vec3 outerPos = p;\n    outerPos.y = abs(outerPos.y)-.32; //Use symetry to draw outer bracelet loops with same call\n    float braceletOuter = sdCircularBox( outerPos, braceletOuterBoxSize, 1.3, 0.2*3.14);\n    d = min(braceletCenter, braceletOuter);\n    \n    //Watch Main\n    vec3 mainWatchOuterPos = p+vec3(0.,0.,-1.3);\n    mainWatchOuterPos.yz *= Rot(0.5*3.14);\n    \n    float mainWatchOuter = sdCappedCylinder(mainWatchOuterPos,0.8, .2);\n    float mainWatchOuterCutOut = sdCappedCylinder(mainWatchOuterPos+vec3(0.,0.3,0.),0.66, .2);\n    mainWatchOuter = opSubtraction(mainWatchOuterCutOut, mainWatchOuter);\n    //knobs\n    vec3 mainWatchKnob1Pos = mainWatchOuterPos;\n    mainWatchKnob1Pos.yz *= Rot(0.5*3.14);\n    mainWatchKnob1Pos.xy *= Rot(0.25*3.14);\n    float mainWatchKnob1 = sdCappedCylinder(mainWatchKnob1Pos+vec3(0.,0.85,0.),0.16, .07);\n    \n    vec3 mainWatchKnob2Pos = mainWatchKnob1Pos;\n    mainWatchKnob2Pos.xy *= Rot(-0.25*3.14);\n    float mainWatchKnob2 = sdCappedCylinder(mainWatchKnob2Pos+vec3(0.,0.85,0.),0.16, .07);\n    \n    vec3 mainWatchKnob3Pos = mainWatchKnob1Pos;\n    mainWatchKnob3Pos.xy *= Rot(-0.5*3.14);\n    float mainWatchKnob3 = sdCappedCylinder(mainWatchKnob3Pos+vec3(0.,0.85,0.),0.16, .07);\n    \n    \n    mainWatchOuter = min(mainWatchOuter,mainWatchKnob1);\n    mainWatchOuter = min(mainWatchOuter,mainWatchKnob2);\n    mainWatchOuter = min(mainWatchOuter,mainWatchKnob3);\n    d = min(d,mainWatchOuter);\n    \n    //Hour/Minute arms\n    vec3 sharedArmPos = mainWatchOuterPos+vec3(0.,0.2,0.);\n    sharedArmPos.xy *= Rot(0.5*3.14);\n    vec3 hourArmPos = sharedArmPos;\n    hourArmPos.yz *= Rot(-iTime);\n    hourArmPos += vec3(0.0,.2,.0);\n    float hourArm = sdCappedCylinder(hourArmPos, .03, 0.2);\n    d = min(d, hourArm);\n    \n    vec3 minArmPos = sharedArmPos;\n    minArmPos.yz *= Rot(-iTime * 12.);\n    minArmPos += vec3(0.0,.3,.0);\n    float minArm = sdCappedCylinder(minArmPos, .03, 0.3);\n    d = min(d, minArm);\n    \n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 3, -4);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 n = GetNormal(p);\n        \n    \tfloat dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n    \tcol += dif;  \n        col = pow(col, vec3(.4545));\t// gamma correction\n    \n    }else{\n        //Background\n        float yCoord = fragCoord.y / iResolution.y; \n        vec3 colTop = vec3(0.678, 0.937, 0.819);\n        vec3 colBottom = vec3(0, 0.125, 0.247);\n        col = mix( colBottom, colTop, smoothstep(0.1,0.9, yCoord));\n        \n    }\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}