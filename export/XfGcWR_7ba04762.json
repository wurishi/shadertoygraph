{"ver":"0.1","info":{"id":"XfGcWR","date":"1731672176","viewed":36,"name":"ShaderAmp Sound Blob","username":"ArthurTent","description":"blobby sound visualizer\nExample on YT: https://www.youtube.com/watch?v=8FmvUGyTrwc\nShaderAmp version is currently available in 'dev/more-shaders' branch.\nhttps://github.com/ArthurTent/ShaderAmp/tree/dev/more-shaders/dist/shaders","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","metaball","soundcloud"],"hasliked":0,"parentid":"Ms3SWr","parentname":"Sound Blob"},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/Ms3SWr\n// Modified by ArthurTent\n// Created by seb0fh\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n/*\n\tSound Blob\n\t05/2016\n\tseb chevrel\n*/\n#define TWO_PI 6.2831\n#define FFT(a) pow(texelFetch(iChannel0, ivec2(a, 0), 0).x, 5.)\nfloat snd = 0.;\nconst float PI = 3.1415926;\n// MIT Licensed hash From Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec3 hash33(vec3 p)\n{\n    p = fract(p * vec3(443.8975,397.2973, 491.1871));\n    p += dot(p.zxy, p.yxz+19.27);\n    return fract(vec3(p.x * p.y, p.z*p.x, p.y*p.z));\n}\n\nvec3 stars(in vec3 p)\n{\n    vec3 c = vec3(0.);\n    float res = iResolution.x*0.8;\n    \n\tfor (float i=0.;i<4.;i++)\n    {\n        vec3 q = fract(p*(.15*res))-0.5;\n        //q*= snd/10.;\n        vec3 id = floor(p*(.15*res));\n        vec2 rn = hash33(id).xy;\n        float c2 = 1.-smoothstep(0.,.6,length(q));\n        c2 *= step(rn.x,.0005+i*i*0.001);\n        c += c2*(mix(vec3(1.0,0.49,0.1),vec3(0.75,0.9,1.),rn.y)*0.25+0.75);\n        p *= 1.4;\n    }\n    return c*c*.65;\n}\nvoid camera(vec2 fragCoord, out vec3 ro, out vec3 rd, out mat3 t)\n{\n    float a = 1.0/max(iResolution.x, iResolution.y);\n    //rd = normalize(vec3((fragCoord - iResolution.xy*0.5)*a, 0.5));\n    rd = normalize(vec3(fragCoord, 1.0));\n\n    ro = vec3(0.0, 0.0, -15.);\n\n    //float ff = min(1.0, step(0.001, iMouse.x) + step(0.001, iMouse.y));\n    float ff = min(1.0, step(0.001, iMouse.x) + step(0.001, iMouse.y))+sin(iTime/20.);\n    vec2 m = PI*ff + vec2(((iMouse.xy + 0.1) / iResolution.xy) * (PI*2.0));\n    //m.y = -m.y;\n    m.y = sin(m.y*0.5)*0.3 + 0.5;\n\n    //vec2 sm = sin(m)*sin(iTime), cm = cos(m)*(1.+sin(iTime));\n    vec2 sm = sin(m)*(1.+sin(iTime/10.)/2.), cm = cos(m);\n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, cm.y, sm.y, 0.0, -sm.y, cm.y);\n    mat3 rotY = mat3(cm.x, 0.0, -sm.x, 0.0, 1.0, 0.0, sm.x, 0.0, cm.x);\n\n    t = rotY * rotX;\n\n    ro = t * ro;\n    rd = t * rd;\n\n    rd = normalize(rd);\n}\n\n// rotations\nvec3 rotateX(vec3 p, float a) { float c = cos(a), s = sin(a); return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z); }\nvec3 rotateY(vec3 p, float a) { float c = cos(a), s = sin(a); return vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x); }\nvec3 rotateZ(vec3 p, float a) { float c = cos(a), s = sin(a); return vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z); }\n// signed distance primitives (from IQ)\nfloat sdSphere(vec3 p,float r) { return (length(p) - r); }\nfloat sdTorus(vec3 p,float r,float r2) { return(length( vec2(length(p.xz)-r,p.y) )-r2); }\nfloat sdBox( vec3 p, vec3 b ) { vec3 d = abs(p) - b; return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0)); }\nfloat sdHexPrism( vec3 p, vec2 h ) { vec3 q = abs(p); return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x); }\n\nfloat smin( float a, float b, float k ) {float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 ); return mix( b, a, h ) - k*h*(1.0-h); }\n\n\n// scene distance function\n// returns vec2( ID, distance) ID of object and distance from scene to point p\n#define NUMFREQ 12\nvec2 map(in vec3 p)\n{\n\tfloat freqs[NUMFREQ];\n    float t,d,minD = 100000000.0,minID=0.0;\n\n    float a=2.5*TWO_PI,b,c;\n    float total=0.0;\n\n\tfor(int i=0; i<NUMFREQ; i++) {\n        t=float(i)/float(NUMFREQ);\n    \tfreqs[i]=texture(iChannel0,vec2(t,0.25)).x;\n        b=sin(PI*t+iTime*1.3);\n        c=t*a;\n        d=sdSphere(p+vec3(cos(c*0.9+iTime*2.)*b, sin(c+iTime*1.7)*b, 2.0*t-1.0)*0.1 , 0.01+freqs[i]*pow(1.11,float(i))*0.05);\n        total+=d;\n        minD=smin(minD,d,0.07);\n        //if (d<minD) { minD=d; }\n\n    }\n    return vec2( 1.0, minD );\n}\n\n// calculate scene normal vector at point p\n// normal is calculated from the distance gradient on each axis\nvec3 calcNormal( in vec3 pos,in float epsilon )\n{\n\tvec3 eps = vec3( epsilon, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).y - map(pos-eps.xyy).y,\n\t    map(pos+eps.yxy).y - map(pos-eps.yxy).y,\n\t    map(pos+eps.yyx).y - map(pos-eps.yyx).y );\n\treturn normalize(nor);\n}\n\n// Raymarch function\n// returns vec2(ray length,normalized iterations, object ID)\n\n\n#define RM_EPSILON 0.002\n#define RM_MIN_STEP_SIZE 0.001\n#define RM_MIN_DISTANCE 0.01\n\nvec3 rayMarch(in vec3 from, \t\t// ray origin\n               in vec3 direction \t// ray normalized direction\n)\n{\n    float travel_distance = 0.0; // the total length of the ray\n    for (float i = 0.0; i < 64.0; i+=1.0)\n    {\n\t    vec3 position = from + direction * travel_distance; // current position\n        vec2 result = map(position);\n\n        float object_id = result.x;\n        float distance_to_scene = result.y;\n\n        if (distance_to_scene < RM_EPSILON) \t// distance to obj is below epsilon\n        {\n            return vec3(travel_distance,i/64.0,object_id); // return distance\n    \t}\n        // advance the ray by the scene distance or minimum ray step size\n        travel_distance += max(distance_to_scene,RM_MIN_STEP_SIZE);\n    }\n    // we haven't hit anything, return 0.0 distance, 1.0 iterations, ID 0.0\n    return vec3(0.0,1.0,0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int max_freq = 100;\n    for(int i=1; i < max_freq; i++){\n        snd +=FFT(i)*float(i);\n    }\n    snd /=float(max_freq*20);\n    \n\tvec2 uv = (fragCoord.xy / iResolution.xx) -vec2( 0.5,0.5*iResolution.y/iResolution.x);\n\n\t//camera + rd for stars\n    vec3 ro = vec3(0.0);//rd = vec3( 0.0 );\n\tvec3 rd = normalize(vec3(uv,-1.5));\n    mat3 t = mat3(1.0);\n\tcamera(uv, ro, rd, t);\n\n    float time=iTime*1.5;\n    float dist=0.8;\n\n    vec3 camera_position = vec3(0.0,0.0,-dist);\n    vec3 ray_direction = normalize(vec3(uv, 1.0)); // fov\n\n    //ray_direction=rotateX(ray_direction,iMouse.y/iResolution.y);\n    camera_position=vec3(sin(time)*dist,0.,-cos(time)*dist); // orbit cam\n    ray_direction=rotateY(ray_direction,-time);\n\n    // raymarch the scene (result x = distance, y = iterations, z = object_ID)\n    vec3 result = rayMarch(camera_position, ray_direction);\n\n    float amp=texture(iChannel0,vec2(0.5,0.75)).x;\n    vec4 color=vec4( vec3(0.3,0.9,1.0)*amp*0.1/length(uv),1.0);\n    //vec4 color=vec4( vec3(20.3*amp,10.0*amp,20.0*amp)*amp*0.1/length(uv),1.0);\n\n    rd.x+=sin(iTime/1000.)*2.;\n    vec3 bg = stars(rd)*(1.+30.*snd);\n    \n\tif (result.x!=0.0) {\n        vec3 position = camera_position+(ray_direction*result.x);\n    \tvec3 normal = calcNormal(position,0.001);\n    \tvec3 light = normalize(vec3(-1.0,1.0,-0.5));\n        vec3 reflection = reflect( ray_direction, normal );\n    \tfloat diffuse = dot(normal,light);\n        float specular = pow(clamp( dot( reflection, light ), 0.0, 1.0 ),20.0);\n        float iterations = (1.-result.y);\n        color=vec4( vec3(specular*diffuse)*vec3(1.,1.,1.)+\n                    vec3(diffuse*0.4+0.6)*vec3(0.9,0.5-(result.y)*0.5,(1.0/result.x)*0.1),1.0);\n\t\tcolor -=vec4(bg,1.);\n    }\n\tfragColor = color;\n\tfragColor+=vec4(bg, 1.);\n}\n","name":"Image","description":"","type":"image"}]}