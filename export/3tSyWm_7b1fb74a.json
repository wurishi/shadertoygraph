{"ver":"0.1","info":{"id":"3tSyWm","date":"1594503364","viewed":280,"name":"GlowLife","username":"savegor","description":"Another implementation of Conway's Game of Life","likes":15,"published":1,"flags":32,"usePreview":0,"tags":["conwaysgameoflife"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat getGlow(vec2 cell, vec2 point) {\n    vec2 cell_uv = cell / (iResolution.xy * CELL_SIZE);\n    vec4 status = texture(iChannel0, cell_uv);\n    float alive = status.b;\n    \n    vec2 diff = point - cell;\n    float invSqrDist = CELL_SIZE / dot(diff, diff);\n    \n    return mix(0.0, invSqrDist, alive);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sumGlow = 0.0;\n    float averageArea = CELL_SIZE * GLOW_RAD_FACTOR;\n    \n    vec2 cell = floor(fragCoord / CELL_SIZE) * CELL_SIZE;\n    cell += CELL_SIZE * 0.5;\n    for(float i = -averageArea; i < averageArea + 1.0; i = i + CELL_SIZE) {\n        for(float j = -averageArea; j < averageArea + 1.0; j = j + CELL_SIZE) {\n            vec2 cell_ij = cell + vec2(i, j);\n            sumGlow += getGlow(cell_ij, fragCoord);\n        }\n    }\n    \n    // output color\n\tfloat red = sumGlow;\n    float green = sumGlow;\n    float blue = 2.0 * sumGlow;\n    fragColor = vec4(red, green, blue, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float CELL_SIZE = 14.0;\nconst float GLOW_RAD_FACTOR = 8.0;\nconst int SLOWDOWN = 5;","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nfloat noise(vec2 st) {\n    return fract(sin(st.x * st.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // just lazy trick to generate first state \n    // sorry\n    if(iFrame == 0) { \n    \tfragColor = vec4(0.0,0.0,noise(fragCoord) > 0.5,1.0);\n    }\n    else {\n        vec4 mouse = iMouse;\n        mouse.xy /= CELL_SIZE;\n\t\t\n        vec2 uv = fragCoord / iResolution.xy;\n        vec4 status = texture(iChannel0, uv);\n\n\n        float was_alive = status.b;\n        float is_alive = 0.0;\n        vec2 diff = abs(fragCoord - mouse.xy);\n\t\t\n        // if left mouse button pressed\n        // just freeze world and revive selected cells\n        if(mouse.z > 0.0) {\n            is_alive = was_alive;\n            if(diff.x < 0.5 &&  diff.y < 0.5) {\n                is_alive = 1.0;    \n            }\n        }\n        else {\n            if( iFrame % SLOWDOWN == 0) {\n                int living_count = 0;\n                for(int i = -1; i < 2; i = i + 1) {\n                    for(int j = -1; j < 2; j = j + 1) {\n\n                        float not_center = float((abs(i) + abs(j)) != 0);\n                        vec2 uv_ij = (fragCoord + vec2(i, j)) / iResolution.xy;\n                        vec4 status_ij = texture(iChannel0, uv_ij);\n\n                        living_count += int(status_ij.z * not_center);\n                    }\n                }\n\n                float keepAlive = float(living_count == 2 || living_count == 3);\n                float revive = float(living_count == 3);\n\n                is_alive = mix(revive, keepAlive, was_alive);\n            }\n            else {\n                is_alive = was_alive;\n            }\n        }\n        fragColor = vec4(0.0,was_alive,is_alive,1.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}