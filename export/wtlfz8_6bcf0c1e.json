{"ver":"0.1","info":{"id":"wtlfz8","date":"1596041322","viewed":2757,"name":"Unstable Universe","username":"julianlumia","description":"The shader compiles perfectly on one computer but when i checked on another macbook using the same browser (brave) I only see a black screen.. anybody have any idea as to why?","likes":48,"published":1,"flags":32,"usePreview":0,"tags":["dofvisual"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define T(uv) texture(iChannel0,uv)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy);\n\n    \n    float f = length(uv  - 0.6);\n    fragColor.x = T(uv + f*0.001).x;\n    fragColor.y = T(uv -f*0.002).y;\n    fragColor.z = T(uv-f*0.001).z;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define MAX_STEPS 64\n#define MAX_DIST 50.\n#define SURF_DIST .001\n\n\n\nvec2 condmin(in vec2 d1, in vec2 d2) {\nreturn vec2(min(d1.x, d2.x), mix(d1.y, d2.y, step(d2.x, d1.x)));\n}\n\nfloat sdOctahedron( vec3 p, float s)\n{\n p = abs(p);\n return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nmat2 Rot(float a) {\n float s = sin(a);\n float c = cos(a);\n return mat2(c, -s, s, c);\n}\n\n\n\nfloat displacement(vec3 p, float scale)\n{\n    return sin(scale*p.x)*sin(scale*p.y)*sin(scale*p.z);\n}\n\n\nfloat smin( float a, float b, float k ) {\n float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdSphere(vec3 p, float s)\n{\n return length(p) - s;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n p = abs(p)-s;\n return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat g1;\nfloat g2;\nfloat g3;\nfloat g4;\nfloat g8;\n\nmat3 rotate( in vec3 v, in float angle)\n{\n\tfloat c = cos(radians(angle));\n\tfloat s = sin(radians(angle));\n\t\n\treturn mat3(c + (1.0 - c) * v.x * v.x, (1.0 - c) * v.x * v.y - s * v.z, (1.0 - c) * v.x * v.z + s * v.y,\n\t\t(1.0 - c) * v.x * v.y + s * v.z, c + (1.0 - c) * v.y * v.y, (1.0 - c) * v.y * v.z - s * v.x,\n\t\t(1.0 - c) * v.x * v.z - s * v.y, (1.0 - c) * v.y * v.z + s * v.x, c + (1.0 - c) * v.z * v.z\n\t\t);\n}\n\nconst float PI = 3.14159265;\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nvec3 spherepos2;\n\nvec3 spherepos;\nvec2 GetDist(vec3 p) {\n vec2 d;\n d = vec2(p.y +1.,7);\n vec3 size3 = vec3(1.);\n vec3 pos = vec3(0,0.,.5);\n vec3 p4 = p;\n p4 -=vec3(-0.,2.,.5);\n float the = iTime *.5;\n p4.xy *= -mat2(cos(the), -sin(the), sin(the), cos(the));\n p4.yz *= -mat2(cos(the), -sin(the), sin(the), cos(the));\n vec2 box10 = vec2((sdOctahedron(p4, 2.)),5.);\n vec2 octabox = vec2(sdBox(p4, vec3( 1.5)),5);\n vec2    box25 = vec2(sdBox(p+vec3(-0,3.,0.), vec3(1.,2.5,1.)),3);\n float displacement = sin(1.5*p.x+ iTime*1.4)*sin(1.2*p.y+ iTime)*cos(1.5*p.z+ iTime);\n box25.x += displacement;\n spherepos = vec3(-10,8,6);\n the = iTime*0.25;\n spherepos.xz *= -mat2(cos(the), -sin(the), sin(the), cos(the));\n float box9 = (sdSphere(p-spherepos, 1.2));\n vec2 box;\n vec3 p2 = p;\n float two = ((dot(sin(p2.zzy+iTime*0.2)*5., cos(p2.zxy*6.+iTime))));\n d.x = mix(d.x,two,sin(p.x*0.5+iTime)*0.06);\n d.x *= 0.8;\n vec3 size = size3;\n p2.xz *= -mat2(cos(the), -sin(the), sin(the), cos(the));\n box = vec2(sdSphere(p2+vec3(3,-1.2,cos(iTime)*2.), 1.),3);\n vec2    box2 = vec2(sdSphere(p2+vec3(-3,-0.5,sin(iTime)*3.), .75),3);\n \n box.x = min(box.x,box2.x); \n //teken lichtpunt\n box.x = min(box.x,box9);//box9\n  if( box.x < d.x)\n  {\n   d = condmin(d,box);\n  }\n box10.x = mix(octabox.x,box10.x,0.5);\n d.x = smin(d.x,box10.x,2.);\n g2 +=.04/(.05+pow(abs(box.x),6.));\n g4 +=1./(.4+pow(abs(box10.x),10.));\n//zon\n g8 +=2./(.04+pow(abs(box9),3.));\n g3 +=1./(1.+box9*box9);\n d.x =smin(d.x,box25.x,1.);//box9\n d = condmin(d,box10);\n return d;\n}\n\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\nvec2 h, t=vec2( 0.);   \nfor (int i=0; i<MAX_STEPS; i++) \n{   \nh = GetDist(ro + t.x * rd);\nif(h.x<SURF_DIST||abs(t.x)>MAX_DIST) break;\nt.x+=h.x *1.;\nt.y=h.y;\n}\nif(t.x>MAX_DIST) \nt.x=100.;\nt.x +=h.x*1.;\nreturn t;\n}\nfloat marchCount;\n\n\nfloat traceRef(vec3 o, vec3 r){\n    \n float t = 0.0;\n marchCount = 0.0;\n float dO = 0.;  \n for (int i = 0; i < 60; i++)\n {\n  vec3 p = o + r * t;   \n  float d = GetDist (p).x;\n  if(d<.001 || (t)>100.) break;\n  t += d * .12;\n  marchCount+= 1./d*1.;\n }    \n return t;\n}\n\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n vec3 f = normalize(l-p),\n r = normalize(cross(vec3(0,1,0), f)),\n u = cross(f,r),\n c = p+f*z,\n i = c + uv.x*r + uv.y*u,\n d = normalize(i-p);\n return d;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr ){\n vec3 cw = normalize(ta-ro);\n vec3 cp = vec3(sin(cr), cos(cr),0.0);\n vec3 cu = normalize( cross(cw,cp) );\n vec3 cv = cross(cu,cw);\n return mat3( cu, cv, cw );\n}\n\nvec3 GetNormal(vec3 p){\nvec2 e = vec2(.00035, -.00035); \nreturn normalize(\n e.xyy * GetDist(p + e.xyy).x + \n e.yyx * GetDist(p + e.yyx).x + \n e.yxy * GetDist(p + e.yxy).x + \n e.xxx * GetDist(p + e.xxx).x);\n}\n\nconst float PI2 = 3.14159265359;\n#define HASHSCALE1 .1031\nfloat hash(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 randomSphereDir(vec2 rnd)\n{\n\tfloat s = rnd.x*PI*2.;\n\tfloat t = rnd.y*2.-1.;\n\treturn vec3(sin(s), cos(s), t) / sqrt(1.0 + t * t);\n}\nvec3 randomHemisphereDir(vec3 dir, float i)\n{\n\tvec3 v = randomSphereDir( vec2(hash(i+1.), hash(i+2.)) );\n\treturn v * sign(dot(v, dir));\n}\n\nfloat ambientOcclusion( in vec3 p, in vec3 n, in float maxDist, in float falloff )\n{\n\tconst int nbIte = 32;\n    const float nbIteInv = 1./float(nbIte);\n    const float rad = 1.-1.*nbIteInv; //Hemispherical factor (self occlusion correction)\n    \n\tfloat ao = 0.0;\n    \n    for( int i=0; i<nbIte; i++ )\n    {\n        float l = hash(float(i))*maxDist;\n        vec3 rd = normalize(n+randomHemisphereDir(n, l )*rad)*l; // mix direction with the normal\n        \t\t\t\t\t\t\t\t\t\t\t\t\t    // for self occlusion problems!\n        \n        ao += (l - max(GetDist( p + rd ),0.).x) / maxDist * falloff;\n    }\n\t\n    return clamp( 1.-ao*nbIteInv, 0., 1.);\n}\n\n\nfloat shadow(vec3 r0, vec3 rd, float maxDist)\n{\n    float d = .001;\n    float shadow = 1.0;\n    while(d < maxDist)\n    {\n        float t = GetDist(r0 + d * rd).x;\n        if(t < 0.05) return 0.0;\n        d += t;\n        shadow = min(shadow,50.0 * (t / d));\n    }\n    return shadow;\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(spherepos);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*1., l).x;\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nvec2 uv =( 2. * fragCoord.xy - iResolution.xy ) / iResolution.y;\n/*\n//motion blurr algorithm // by noby:   https://www.shadertoy.com/view/wljSz1\n const float tm = 2.5;\n const int samples = 1;\n float T = iTime*tm / 4.5;\n float ot = T;\n for(int y = 0; y < samples; ++y)\n for(int x = 0; x < samples; ++x)\n {\n  vec2 p = -1.0 + 3.0 * (uv + (-0.5+(vec2(x, y)/float(samples)))/iResolution.xy);\n  p.x *= iResolution.x/iResolution.y;  \n  float r = texelFetch(iChannel0, ivec2(mod(fragCoord*float(samples)+vec2(x,y),1024.)),0).r;\n  T = ot+(tm*r)/46.0;\n };\n     \n*/\nvec2 m = iMouse.xy/iResolution.xy;\n\nvec3 eye = 1.0*vec3(0.,0.,6.5);\n       float the = -(iTime*.35);\n        eye.xz *= -mat2(cos(the), -sin(the), sin(the), cos(the));\n\nvec3 col;\nvec2 d;\nvec3 hoek = vec3(0,-0.,0.);  \n//float   the = (iTime*1.);\nmat3 camera = setCamera( eye, hoek,0.);\nfloat fov = .8;\nvec3 dir = camera * normalize(vec3(uv, fov));\n\n    \n    \nvec3 p;\nvec3 n;\nvec3 focalPoint = eye + (dir * 1.);\n \n \n      \n    \nvec3 shiftedRayOrigin = eye;\n      \n       \n      \n      \nvec3 shiftedRay = (focalPoint - shiftedRayOrigin);\n d = RayMarch(shiftedRayOrigin, shiftedRay);\nfloat t =d.x *1.;\nvec3  shiftedRayOrigin2 = shiftedRayOrigin;\n      \nvec3  shiftedRay2= shiftedRay;\nif(t<MAX_DIST) {\n    \n shiftedRayOrigin2 += shiftedRay2 * t;\n vec3 sn = GetNormal(shiftedRayOrigin2);\n    \n//        if(d.y==5.) col+= vec3(1.,3,2);\n\n shiftedRay2 = reflect(shiftedRay2, sn);\n if(d.y==3.) traceRef(shiftedRayOrigin2 +  shiftedRay2*.9, shiftedRay2);\n  if(d.y==5.) traceRef(shiftedRayOrigin2 +  shiftedRay2*.9, shiftedRay2);\n  if(d.y==7.) traceRef(shiftedRayOrigin2 +  shiftedRay2*.9, shiftedRay2);\n    //if(d.y==7.) col*= vec3(.25,.3,2.);\n\n    if(d.y==5.) col+= vec3(1.,3,2);\n        if(d.y==7.) col+= vec3(2.,3,2);\n\n    //sn *= GetNormal(shiftedRayOrigin2);   \n //if(d.y==3.) col *= sn;\n\n p = shiftedRayOrigin + shiftedRay * t;\n    \n  n= GetNormal(p.xyz);\n float a = ambientOcclusion(p,n, 5.5,5.);\n\n vec3 lp =    spherepos*1.;\n const int numIter = 60;\n vec3 vD = shiftedRay;\n vD = normalize(vD);\n    \n    \n float stepSize = length(p - shiftedRayOrigin) / float(numIter);\n vec3 vO = shiftedRayOrigin + stepSize * vD;\n float accum = 0.0;\n\n for(int i = 0; i  < numIter; ++i)\n  {\n\tvec3 ld = normalize(lp - vO);\n\tfloat shad = shadow(vO, ld, 5.);\n\tfloat d = dot(vO, vO);\n\taccum += (.001 / d ) * shad;\n\tvO += stepSize * vD;\n   }\ncol*= a+0.; \n vec3   color= vec3(1., 1., 1.);\n col +=g2*vec3(0.05)*vec3(.2,.5,.6)*5.;    \n col +=g4*vec3(0.03)*vec3(1.,.6,0.6)*.9;    \n col +=g8*vec3(5.)*vec3(1.,.4,0.0)*1.; \n col *= marchCount * vec3(.4, .4,0.4) * 0.0007;\n float dif = GetLight(p);\n col *= vec3(dif)+2.;\n vec3 sky = vec3(5.9, 3., 10.);\n col *= mix(sky, col, 1./(t*t/1./3.*.1+1.5));   \n col += g3 * color;\n col *= accum * color *3.;\n }    \n col*=1.;\n col=smoothstep(0.0,1.,col);\n col=pow(col, vec3(0.4545));\n fragColor = vec4(col,t);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Dof code from: 42yeah, https://shadertoy.com/view/wsXBRf\n\n// Random hash function\nvec2 rand2d(vec2 uv) {\n    return fract(sin(vec2(\n        dot(uv, vec2(215.1616, 82.1225)),\n        dot(uv, vec2(12.345, 856.125))\n    )) * 41234.45) * 2.0 - 1.0;\n}\n\n// Calculate CoC: https://developer.download.nvidia.com/books/HTML/gpugems/gpugems_ch23.html\nfloat getCoC(float depth, float focalPlane) {\n    float focalLength = .08;\n    float aperture = min(1.0, focalPlane * focalPlane);\n    return abs(aperture * (focalLength * (focalPlane - depth)) /\n        (depth * (focalPlane - focalLength)));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Sample original texture data at uv\n    vec4 texData = texture(iChannel0, uv);\n    \n    // Get its depth\n    float depth = texData.w;\n    \n    // Focal plane at 3.9 (the camera is looking at the center from ~4.0)\n    float focalPlane = sin(iTime)+4.4;\n    \n    // Calculate CoC, see above\n    float coc = getCoC(depth, focalPlane);\n    \n    // Sample count\n    const int taps = 32;\n    \n    // Golden ratio: https://www.youtube.com/watch?v=sj8Sg8qnjOg\n    float golden = 3.141592 * (3.0 - sqrt(5.0));\n    \n    // Color & total weight\n    vec3 color = vec3(0.0);\n    float tot = 0.0;\n    \n    for (int i = 0; i < taps; i++) {\n        // Radius slowly increases as i increases, all the way up to coc\n        float radius = coc * sqrt(float(i)) / sqrt(float(taps));\n        \n        // Golden ratio sample offset\n        float theta = float(i) * golden;\n        vec2 tapUV = uv + vec2(sin(theta), cos(theta)) * radius;\n        \n        // Sample the bit over there\n        vec4 tapped = texture(iChannel0, tapUV);\n        float tappedDepth = tapped.w;\n\n        if (tappedDepth > 0.0) {\n            // Use CoC over there as weight\n            float tappedCoC = getCoC(tappedDepth, focalPlane);\n            float weight = max(0.001, tappedCoC);\n            \n            // Contribute to final color\n            color += tapped.rgb * weight;\n            // And final weight sum\n            tot += weight;\n        }\n    }\n    // And normalize the final color by final weight sum\n    color /= tot;\n    fragColor = vec4(color, 1.0);\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//radial blur code from jeyko: https://www.shadertoy.com/view/WlKXRR :)\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n\n    float steps = 20.;\n    float scale = 0.00 + pow(length(uv - 0.5)*1.2,3.)*0.4;\n    float chromAb = pow(length(uv - 0.5),1.4)*2.1;\n    vec2 offs = vec2(0);\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n    \n        scale *= 0.91;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.r += texture(iChannel0, target + chromAb*1./iResolution.xy).x;\n    \tradial.g += texture(iChannel0, target).y;\n    \tradial.b += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    radial /= steps;\n    \n    \n    fragColor = radial*1.; \n    \n    fragColor *= 1.3;\n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.2);\n    \n    fragColor = max(fragColor, 0.);\n    fragColor.xyz = pow(fragColor.xyz, vec3(1.,1.1,1.));\n\n    fragColor *= 1. - dot(uvn,uvn)*1.8;\n}\n\n\n","name":"Buffer D","description":"","type":"buffer"}]}