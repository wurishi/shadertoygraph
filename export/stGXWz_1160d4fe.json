{"ver":"0.1","info":{"id":"stGXWz","date":"1640475613","viewed":109,"name":"realPretty Flowers","username":"BetaSoftCologne","description":"Just some flowery things I came up with when playing around. NEW! V2.0! ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["psychedelic","flowers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: BetaSoftCologne\n// Title: Flowers\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvec3 foo(in vec2 uv, vec3 n) {\n    // make polar\n    vec2 st = vec2(atan(uv.x, uv.y), length(uv));\n\n\tfloat s = sin(iTime * n.x);\n\n\t// normalize using TAU\n    uv = vec2(st.x/6.2831 + s*sin(st.y), st.y + s);\n   \n    float f = n.y + n.y/2.0 * sin(iTime / n.z);\n    float g = n.y + n.x * cos(iTime);\n    \n    // zig-zag\n    float x = uv.x*f;\n    float a = min(fract(x), 1.-fract(x));\n    //float b = smoothstep(0., .1, a*0.5);\n    float b = smoothstep(0., .1, a*0.6 + g-uv.y);\n    return vec3(b, b+a, b*a);\n}\n\n\nvec3 bar(in vec2 uv) {\n    // make polar, normalize via PI\n    vec2 st = vec2(atan(uv.x, uv.y), length(uv));\n\n\tfloat s = sin(iTime);\n\n    uv = vec2(st.x/6.2831 + s*0.2, st.y);\n    \n    float f = 10.;\n    float g = .5 + 0.2*sin(iTime*5.);\n    \n    // zig-zag\n    float x = uv.x*f;\n    float a = min(fract(x), 1.-fract(x));\n    //float b = smoothstep(0., .1, a*0.5);\n    float b = smoothstep(0., .1, a*0.6 + g-uv.y);\n    return vec3(b, b+a, b-a);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy-.5*iResolution.xy) / iResolution.y;\n    \n    float s = sin(iTime);\n    float t = abs(sin(iTime / 10.));\n    //t = 0.9;\n\n    // create\n    vec3 col = foo(uv, vec3(0.5, 15., -2.0));\n    vec3 a = bar(uv / s);\n    vec3 b = bar(vec2(uv.yx) / uv);\n    vec3 c = bar(vec2(s*0.002 * uv.yx)).gbr;\n    vec3 d = bar(uv.yx).brb * t * 3.;\n    vec3 e = foo(uv.yy, vec3(0.03, 2.5, 5.0));\n    vec3 f = foo(vec2(uv.yx), vec3(2.1234, 2.0, 1.));\n\n    // mix and mash\n    if (t < 0.6) col /= a;\n    if (t > 0.5) col += b-a;\n    if (t < 0.9) col -= c;\n    if (t > 0.8) col *= d-c;\n    if (t < 0.3) col /= e;\n    if (t > 0.2) col *= f+a;\n    \n    // Output to screen\n    fragColor = vec4(col, 1.);\n\n}","name":"Image","description":"","type":"image"}]}