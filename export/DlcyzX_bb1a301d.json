{"ver":"0.1","info":{"id":"DlcyzX","date":"1699457221","viewed":115,"name":"Riemann's  surface","username":"Efim","description":"https://mathcurve.com/surfaces.gb/weber/weber.shtml","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","cubic","analyticall"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Finite Riemann's minimal surface https://mathcurve.com/surfaces.gb/weber/weber.shtml\n#define PI 3.14159265359\n#define TAU 6.28318530718\n\nvec3 calcSkyReflect(vec3 rd, vec3 nor, mat3 sky)\n{\n    vec3 n = nor;\n    float d = dot(rd, nor);\n    n = nor*sign(d);\n    vec3 r = reflect(rd, n);\n    //vec2 fon = lonlat(sky*r); //get longitude and latitude\n    //vec3 col = texture(iChannel0, fon).rgb;\n    vec3 col = texture(iChannel0, r).rgb;\n    return col;\n\n}\n\n\nmat3 rotateX(float f)\n{\n    return mat3(\n    vec3(1.0,    0.0,      0.0),\n    vec3(0.0,\t cos(f),  -sin(f)), \t\n\tvec3(.0, sin(f), cos(f))\n    );\n}\n\n\nmat3 rotateZ(float f)\n{\n    return mat3(\n    vec3(cos(f),    -sin(f),  0.0),\n    vec3(sin(f),\t cos(f),  0.0), \t\n\tvec3(0.0, 0.0, 1.0)\n    );\n    \n}\n\n\nmat3 rotateY(float f)\n{\n    return mat3(\n    vec3(cos(f), 0.0,  sin(f)),\n    vec3(0.0,\t 1.0,  0.0), \t\n\tvec3(-sin(f), 0.0, cos(f))\n    );\n}\n\n\nstruct HIT\n{\n    float dist;\n    vec3 nor;\n    vec3 pos;\n};\n\n\n\nconst float dist_infin = 100000.0;\nconst HIT hit_inf = HIT(100000.0, vec3(0.0), vec3(0.0));\n\n\n\n//===================https://www.shadertoy.com/view/wsXGWS======================\nfloat sgn(float x) {\n  return x < 0.0? -1.0: 1.0; // Return 1 for x == 0\n}\n\nint quadratic(float A, float B, float C, out vec2 res) {\n  float x1,x2;\n  float b = -0.5*B;\n  float q = b*b - A*C;\n  if (q < 0.0) return 0;\n  float r = b + sgn(b)*sqrt(q);\n  if (r == 0.0) {\n    x1 = C/A; x2 = -x1;\n  } else {\n    x1 = C/r; x2 = r/A;\n  }\n  res = vec2(x1,x2);\n  return 2;\n}\n\nint quadratic(vec3 coeffs, out vec2 res) {\n  return quadratic(coeffs[0],coeffs[1],coeffs[2],res);\n}\n\nvoid eval(float X, float A, float B, float C, float D,\n          out float Q, out float Q1, out float B1,out float C2) {\n  float q0 = A*X;\n  B1 = q0+B;\n  C2 = B1*X+C;\n  Q1 = (q0+B1)*X + C2;\n  Q = C2*X + D;\n}\n\n// Solve: Ax^3 + Bx^2 + Cx + D == 0\n// Find one real root, then reduce to quadratic.\nint cubic(float A, float B, float C, float D, out vec3 res) {\n  float X,b1,c2;\n  if (A == 0.0) {\n    X = 1e8; A = B; b1 = C; c2 = D;\n  } else if (D == 0.0) {\n    X = 0.0; b1 = B; c2 = C;\n  } else {\n    X = -(B/A)/3.0;\n    float t,r,s,q,dq,x0;\n    eval(X,A,B,C,D,q,dq,b1,c2);\n    t = q/A; r = pow(abs(t),1.0/3.0); s = sgn(t);\n    t = -dq/A; if (t > 0.0) r = 1.324718*max(r,sqrt(t));\n    x0 = X - s*r;\n    if (x0 != X) {\n      for (int i = 0; i < 6; i++) {\n        X = x0;\n        eval(X,A,B,C,D,q,dq,b1,c2);\n        if (dq == 0.0) break;\n        x0 -= (q/dq);\n      }\n      if (abs(A)*X*X > abs(D/X)) {\n        c2 = -D/X; b1 = (c2 - C)/X;\n      }\n    }\n  }\n  res.x = X;\n  return 1 + quadratic(A,b1,c2,res.yz);\n}\n\nint cubic(vec4 coeffs, out vec3 res) {\n  float A = coeffs[0], B = coeffs[1], C = coeffs[2], D = coeffs[3];\n  return cubic(A,B,C,D,res);\n}\n\n// Special wrapper for cubic function for solving quartic.\n// Find largest real root of x**3 + a*x**2 + b*x + c\n// Assume c < 0\nfloat qcubic(float a, float b, float c) {\n  // c is always <= 0, but may be very\n  // small, in which case we return an\n  // approximation. Never return < 0.\n  //assert(c <= 0.0);\n  if (c == 0.0) return 0.0;\n  \n  vec3 res;\n  int nroots = cubic(1.0,a,b,c,res);\n  if (nroots == 1) return res.x;\n  else return max(res.x,max(res.y,res.z));\n}\n\nint quartic(vec4 coeffs, out vec4 res) {\n  float c1 = coeffs[0];\n  float c2 = coeffs[1];\n  float c3 = coeffs[2];\n  float c4 = coeffs[3];\n  float alpha = 0.5*c1;\n  float A = c2-alpha*alpha;\n  float B = c3-alpha*A;\n  float a,b,beta,psi;\n  psi = qcubic(2.0*A-alpha*alpha, A*A+2.0*B*alpha-4.0*c4, -B*B);\n  //assert(!isnan(psi));\n  //assert(!isinf(psi));\n  //assert(psi >= 0.0);\n  a = sqrt(psi);\n  beta = 0.5*(A + psi);\n  if (psi <= 0.0) {\n    b = sqrt(max(beta*beta-c4,0.0));\n  } else {\n    b = 0.5*a*(alpha-B/psi);\n  }\n  int resn = quadratic(1.0,alpha+a,beta+b,res.xy);\n  vec2 tmp;\n  if (quadratic(1.0,alpha-a,beta-b,tmp) != 0) { \n    res.zw = res.xy;\n    res.xy = tmp;\n    resn += 2;\n  }\n  return resn;\n}\n\nint quartic(float A, float B, float C, float D, float E, out vec4 roots) {\n  int nroots;\n  vec4 coeffs = vec4(B,C,D,E)/A;\n  nroots = quartic(coeffs,roots);\n  return nroots;\n}\n\n//https://www.shadertoy.com/view/wsXGWS\n\nHIT giper3D(vec3 ro, vec3 rd, float t, float r)\n{\n    float a = ro.x;\n    float b = rd.x;\n    float c = ro.y;\n    float d = rd.y;\n    float e = ro.z;\n    float f = rd.z;\n    \n    //https://github.com/flightphone/shaderty/blob/master/staples_polynomial.py\n    //for generate this expression used python script staples_polynomial.py\n\n    float a0 = 1.*a*a*e + 1.*c*c*e-1.*e*t*t-1.*a*t;\n    float a1 = 2.*a*b*e + 2.*c*d*e + 1.*a*a*f + 1.*c*c*f-1.*f*t*t-1.*b*t;\n    float a2 = 1.*b*b*e + 1.*d*d*e + 2.*a*b*f + 2.*c*d*f;\n    float a3 = 1.*b*b*f + 1.*d*d*f;\n\n    //https://github.com/flightphone/shaderty/blob/master/staples_polynomial.py\n\n    vec3 roots = vec3(dist_infin);\n    int nroots = cubic(a3, a2, a1, a0, roots); //quartic(a4, a3, a2, a1, a0, roots); \n    \n    \n    float dist = dist_infin;\n    vec3 pos = vec3(0.0);\n    vec3 nor = vec3(0.0);\n    for (int i = 0; i < 4; i++)\n    {\n        if (i >= nroots)\n            break;\n        if (roots[i] < 0.0)\n            continue;\n        vec3 p = ro + roots[i]*rd;\n        if (length(p) > r)    \n            continue;\n        if (roots[i] < dist)    \n        {\n            dist = roots[i];\n            pos = p;\n        }\n\n    }\n    if (dist < dist_infin)\n    {\n        nor = vec3(0.+2.*pos.x*pos.z-1.*t, 0.+2.*pos.y*pos.z, 0.+1.*pos.x*pos.x+1.*pos.y*pos.y-1.*t*t);\n        nor = normalize(nor);\n    }\n    return HIT(dist, nor, pos);\n    \n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 3\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 light = normalize(vec3(0.0, 0.0, -1.0)); //light\n    vec3 light2 = normalize(vec3(0.0, 0.0, 1.0)); //light\n\n    float ra = 3.0;\n    float g = .8;\n\n    float t = iTime/2.0;\n    vec2 m = vec2(0.0, 0.0);\n    if  (iMouse.z > 0.0)\n    {\n        m = (-iResolution.xy + 2.0*(iMouse.xy))/iResolution.y;\n        t = 0.;\n    }\n    vec3 ro = vec3(0.0, 0.0, 6.5); // camera\n    ro = rotateY(-m.x*TAU)*rotateX(-m.y*PI)*ro; //camera rotation\n    \n    \n    const float fl = 1.5; // focal length\n    float dist = dist_infin;\n    mat3 rota  = rotateZ(t)*rotateY(-t);\n    mat3 rota_1  = rotateY(t)*rotateZ(-t);\n    //mat3 sky = rotateZ(0.0)*rotateX(PI/2.0);\n    mat3 sky = rotateZ(0.0);\n    \n    vec2 torus = vec2(1.0,0.3);\n    vec3 tot = vec3(0.0);\n    \n    //antiblick\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec3 col = vec3(0.7, 0.7, 0.9); // background        \n            // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        //vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n        //vec3 rd = normalize( vec3(p,fl) ); // ray direction\n        vec3 rd = GetRayDir(p, ro, vec3(0,0.,0), fl); //ray direction\n        HIT giper = giper3D(rota*ro, rota*rd, g, ra);\n        if (giper.dist < dist)\n        {\n           col = vec3(0.5, 0.5, 1.0);\n            vec3 backcol = vec3(1.0, 0.2, 0.2);\n            vec3 nor = rota_1*giper.nor;\n            //col = culccolor(col, backcol, -rd, light, light2, nor);\n            // gamma\n            //col = pow( col, vec3(0.4545) ); \n            //reflect\n            col = calcSkyReflect(rd, nor, sky);\n        }\n        tot += col;\n    }\n    //antiblick\n    tot /= float(AA*AA);\n    fragColor = vec4(tot,1.0);\n    \n}\n","name":"Image","description":"","type":"image"}]}