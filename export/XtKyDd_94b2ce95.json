{"ver":"0.1","info":{"id":"XtKyDd","date":"1538178614","viewed":111,"name":"raytrace iterative (raymarch)","username":"GraphicsFromScratch","description":"raymarching","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["graphics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdf(in vec3 p, out int matid)\n{\n    float sphere_sdf = length(p) - 1.0;\n    float floor_sdf = abs(p.y);\n    \n    //sphere_sdf += sin(p.x * p.y);\n    \n    float sdf = min(sphere_sdf, floor_sdf);\n    if (sdf == sphere_sdf)\n    {\n        matid = 1;\n    }\n    else\n    {\n        matid = 0;\n    }\n    \n    return sdf;\n}\n\nfloat intersect(in vec3 ro, in vec3 rd, out int matid)\n{\n\tfloat t = 0.0;\n    matid = -1;\n    for (int i = 0; i < 256; ++i)\n    {\n        int curr_matid = -1;\n\t\tfloat d = sdf(ro + t*rd, curr_matid);\n        if (d < 0.01)\n        {\n            matid = curr_matid;\n            break;\n        }\n        t += d;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2.0 * fragCoord / iResolution.xy - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 ro = vec3(0, 1, -3);\n    vec3 at = vec3(0, 0, 0);\n    vec3 cam_z = normalize(at - ro);\n    vec3 cam_x = normalize(cross(vec3(0,1,0), cam_z));\n    vec3 cam_y = cross(cam_z, cam_x);\n    vec3 rd = normalize(uv.x * cam_x + uv.y * cam_y + 1.73 * cam_z);\n\t\n    vec3 col = vec3(0);\n    \n    int matid = -1;\n    float t = intersect(ro, rd, matid);\n    if (matid != -1)\n    {\n        if (matid == 0)\n        {\n        \tcol = vec3(1);\n        }\n        else\n        {\n            col = vec3(1, 0, 0);\n        }\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}