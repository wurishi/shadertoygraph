{"ver":"0.1","info":{"id":"MfXyWX","date":"1721697956","viewed":71,"name":"overgrown","username":"pb","description":"folks who have played with 2d sin(z) and exp(z) fractals may see some familiar shapes in this 3d projection of 4d quaternion ","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["raymarch","4d","quaternion","exp"],"hasliked":0,"parentid":"4flyDj","parentname":"oily exp"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//philip.bertani@gmail.com\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec2 R = iResolution.xy,\n        uv = u/R;\n\n    O *= 0.;\n\n    float[] gk1s = float[](\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.023792, 0.094907, 0.150342, 0.094907, 0.023792,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765\n    );\n\n    //golfed by fabriceneyret2\n    for (int k; k < 25; k++)      \n        O += gk1s[k] * texture(iChannel0, uv + ( vec2(k%5,k/5) - 2. ) / R );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define rot(x) mat2(cos(x+vec4(0,11,33,0)))\n\n//Rodrigues-Euler axis angle rotation\n#define ROT(p,axis,t) mix(axis*dot(p,axis),p,cos(t))+sin(t)*cross(p,axis)\n\n//formula for creating colors;\n#define H(h)  (  cos(  h/7. + vec3(1,2,3)   )*.8 + .1 )\n\n\n#define R iResolution\n     \n#define ex exp(w.x)\n#define cy cos(w.y)\n#define sy sin(w.y)\n#define cz cos(w.z)\n#define sz sin(w.z)\n#define cw cos(w.w)\n#define sw sin(w.w)\n\n\nvoid mainImage( out vec4 O, vec2 U) {\n      \n    O = vec4(0);\n    \n    vec3 c=vec3(0);\n    vec4 rd = normalize( vec4(U-.5*R.xy, R.y, 0.));\n    \n    float totdist=0., t=iTime, tt=61.;\n    \n    vec4 ro = vec4(0, min(0.,max(-8.,8.*sin(t/3.)-4.)) ,2,0);\n    \n    for (float i=0.; i<10.; i++) {\n        \n        vec4 p = vec4( rd*totdist);\n    \n        p += ro; \n        \n        p.xz *= rot( 1.8  ); \n        p.xy *= rot( 20.13 );\n        p.yz *= rot( 15.7425 + t/10.); \n        p.xw *= rot( .6 ) ;\n        \n        vec4 w=vec4(0) , dz, z;\n     \n        \n        for (float j=0.; j<5.; j++) {\n        \n                w = abs(w) - .3;\n\n                z = vec4( \n                        ex*(cy*cz*cw - sy*sz*sw),\n                        ex*(sy*cz*cw + cy*sz*sw),\n                        ex*(cy*sz*cw - sy*cz*sw),\n                        ex*(sy*sz*cw + cy*cz*sw)\n                        );\n                       \n                //iterated derivative here instead of just scale factor\n                dz = vec4(z.x*dz.x-z.y*dz.y-z.z*dz.z-z.w*dz.w,\n                          z.x*dz.y+z.y*dz.x+z.z*dz.w-z.w*dz.z,\n                          z.x*dz.z-z.y*dz.w+z.z*dz.x+z.w*dz.y,\n                          z.x*dz.w+z.y*dz.z-z.z*dz.y+z.w*dz.x);\n                          \n                dz.x += 1.;\n                \n                w = z + p ;\n                        \n        }\n         \n        float ddz = clamp(dot(dz,dz),1e-3,1e6);\n        float ddw = clamp(dot(w.xw,w.xw),1e-3,1e4);\n        \n        float dist = sqrt(sqrt( ddw /(.01+ddz)));\n\n        float stepsize = dist/4. + 1.;   \n        totdist += stepsize;\n   \n        \n        if (totdist > 3.)\n        c +=\n             .3*\n             H( log(ddz) ) * exp(-i*i*dist*dist*.51e-1);\n    }\n    \n    c = 1. - exp(-c*c);\n    O = ( vec4(c,0) );\n               \n}","name":"Buffer A","description":"","type":"buffer"}]}