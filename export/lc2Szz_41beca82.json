{"ver":"0.1","info":{"id":"lc2Szz","date":"1705992200","viewed":223,"name":"fancy border","username":"sergeyzom68","description":"Tring to convert remonvv's https://www.shadertoy.com/view/4dSfDK shader to rectangle with configurable rounded corners (border radius)","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["border"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795\n#define M_TWO_PI (2.0 * M_PI)\n\nfloat rand(vec2 n) {\n    return fract(sin(dot(n, vec2(12.9898,12.1414))) * 83758.5453);\n}\n\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n);\n    vec2 f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nvec3 ramp(float t) {\n\treturn t <= .5 ? vec3( 1. - t * 1.4, .2, 1.05 ) / t : vec3( .3 * (1. - t) * 2., .2, 1.05 ) / t;\n}\nvec2 polarMap(vec2 uv, float shift, float inner) {\n\n    uv = vec2(0.5) - uv;\n    \n    \n    float px = 1.0 - fract(atan(uv.y, uv.x) / 6.28 + 0.25) + shift;\n    \n    float square = max(abs(uv.x) , uv.y);\n    float circle = sqrt(uv.x * uv.x + uv.y * uv.y);\n    float squircle = length(uv*uv*uv*4.);\n    //float shape = abs(uv.x) > 0.4 && uv.y > 0.32 ? circle : square;\n    float py = (squircle * (1.0 + inner * 2.0) - inner) * 2.0;\n    \n    return vec2(px, py);\n}\nfloat fire(vec2 n) {\n    return noise(n) + noise(n * 2.1) * .6 + noise(n * 5.4) * .42;\n}\n\nfloat shade(vec2 uv, float t) {\n    uv.x += uv.y < .5 ? 23.0 + t * .035 : -11.0 + t * .03;    \n    uv.y = abs(uv.y - .5);\n    uv.x *= 35.0;\n    \n    float q = fire(uv - t * .013) / 2.0;\n    vec2 r = vec2(fire(uv + q / 2.0 + t - uv.x - uv.y), fire(uv + q - t));\n    \n    return pow((r.y + r.y) * max(.0, uv.y) + .1, 4.0);\n}\n\nvec3 color(float grad) {\n    \n    float m2 = iMouse.z < 0.0001 ? 1.15 : iMouse.y * 3.0 / iResolution.y;\n    grad =sqrt( grad);\n    vec3 color = vec3(1.0 / (pow(vec3(0.5, 0.0, .1) + 2.61, vec3(2.0))));\n    vec3 color2 = color;\n    color = ramp(grad);\n    color /= (m2 + max(vec3(0), color));\n    \n    return color;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t\n    float m1 = iMouse.z < 0.0001 ? 3.6 : iMouse.x * 5.0 / iResolution.x;\n    \n    float t = iTime;\n    vec2 uv = fragCoord / iResolution.xy;\n    float ff = 1.0 - uv.y;\n    //uv.x -= (iResolution.x / iResolution.y - 1.0) / 2.0;\n    vec2 uv2 = uv;\n    uv2.y = 1.0 - uv2.y;\n   \tuv = polarMap(uv, 1.3, m1);\n   \tuv2 = polarMap(uv2, 1.9, m1);\n\n    vec3 c1 = color(shade(uv, t)) * ff;\n    vec3 c2 = color(shade(uv2, t)) * (1.0 - ff);\n    \n    fragColor = vec4(c1 + c2, 1.0);\n}","name":"Image","description":"","type":"image"}]}