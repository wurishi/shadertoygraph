{"ver":"0.1","info":{"id":"Ms3cWs","date":"1520549855","viewed":272,"name":"Blob Drawer","username":"ramagosula","description":"Iteratively collapes blobs to a single point. Draw with cursor. Edit drawing type in Buf A between circle,diamond, and square and change radius.\nChange blob properties (rate and resolution)","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["blobsclollapsetopoint"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 screenPercent = (vec2(iMouse.x/iResolution.x,iMouse.y/iResolution.y));\n    \n    // Time varying pixel color\n    vec3 col = vec3(1,1,1);\n    float radius = 0.01;\n    col *= smoothstep(1.0,0.999,length(screenPercent - uv)/radius);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    vec3 colorOffset = vec3(0.000000,0.000000,0.0000);\n    \n    fragColor = vec4(texture(iChannel0,uv + vec2(1.0,1.0)*colorOffset.x).r,texture(iChannel0,uv+colorOffset.y).g,texture(iChannel0,uv+colorOffset.z).b,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define DRAW \n\nconst int DIAMOND = 0;\nconst int SQUARE = 1;\nconst int CIRCLE = 2;\n\nint drawType = DIAMOND;\n    \n    \nconst float drawRadius = 5.0;\nconst float stretchX = 1.10;//0.350;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\t#ifdef DRAW\n    vec2 screenPercent = (vec2(iMouse.x/iResolution.x,iMouse.y/iResolution.y));\n    \n    // Time varying pixel color\n    vec3 col = vec3(1,1,1);\n    \n    //float dist = length(screenPercent - uv)/drawRadius;\n    float dist = 0.0;\n    if(drawType == DIAMOND)\n    {\n    \tdist = (abs(fragCoord.x - iMouse.x)*stretchX + abs(fragCoord.y - iMouse.y))/drawRadius;\n    }\n    if(drawType == SQUARE)\n    {\n    \tdist = max(abs(fragCoord.x - iMouse.x)*stretchX , abs(fragCoord.y - iMouse.y))/drawRadius;\n    }\n    if(drawType == CIRCLE)\n    {\n    \tdist = length(vec2(abs(fragCoord.x - iMouse.x)*stretchX , abs(fragCoord.y - iMouse.y)))/drawRadius;\n    }\n    //dist = length(screenPercent - uv)/drawRadius;\n    \n    \n    col *= smoothstep(1.0,0.999,dist);\n\n    // Output to screen\n    fragColor = texture(iChannel0,uv) + vec4(col,1.0);\n    #else\n    fragColor = texture(iChannel0,uv);\n    #endif\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const float PI = 3.1415926535897932;\nfloat c_textureSize = 64.0;\n\n#define c_onePixel  (1.0 / c_textureSize)\n#define c_twoPixels  (2.0 / c_textureSize)\n\nvec3 NearestTextureSample (vec2 P)\n{\n\tfloat textureSize = iResolution.x*iResolution.y;\n    vec2 pixel = P * textureSize;\n    \n    float onePixel = 1.0/textureSize;\n    vec2 frac = fract(pixel);\n    pixel = (floor(pixel) / textureSize);\n    return texture(iChannel0, pixel + vec2(onePixel/2.0)).rgb;\n}\n\nvec4 blobDrawer(vec2 uv, float resolution, float rate)\n{\n    vec3 gen = vec3(1.0,1.0,1.0);\n   \t\n    float textureSize = iResolution.x*iResolution.y;    \n    float onePixel = 1.0/textureSize;\n    \n    float sum = 0.0;\n    for(float i = 0.0; i < resolution; i++)\n    {\n      sum += texture(iChannel0,(uv + rate*vec2(cos(i*PI*2.0/resolution)/iResolution.x, sin(i*PI*2.0/resolution)/iResolution.y))).r;\n    }\n\tgen *= pow(smoothstep(0.0,1.0,(sum/resolution)),1.0);\n    \n    return vec4(gen,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //blobdrawer(uv,resolution,speed)\n    fragColor = blobDrawer(uv,24.0,2.0);//modify the arguments for interesting results\n\n}","name":"Buffer B","description":"","type":"buffer"}]}