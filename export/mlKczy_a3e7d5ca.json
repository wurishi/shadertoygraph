{"ver":"0.1","info":{"id":"mlKczy","date":"1729065122","viewed":38,"name":"(Fork) GLSL Shader to UE version","username":"DynameshDude","description":"Experimenting and Learning","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["learnglsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"(Fork) 1st GLSL Shader\" by DynameshDude. https://shadertoy.com/view/dsBcz3\n// 2023-11-19 09:14:46\n\nvec3 palette (float t)\n{\n    //Variables that contain gradient colours (vec3)\n    vec3 a = vec3(0.058, 0.168, 0.448);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(1.448, 0.142, 0.278);\n    vec3 e = vec3(1.448, -3.142, 0.278);\n    \n    return a + b* -sin(7.28318*(c*t+d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Makes canvas 1:1 and centres coordinates\n    vec2 uv = (fragCoord* 2.0 - iResolution.xy)/iResolution.x;\n    vec2 uv0 = uv;\n    vec3 finalColour =vec3(0.0);\n    \n    \n    for (float i = 0.0; i < 25.0; i++)\n    {\n    \n        //\n        uv *= 1.0;\n        uv = fract(uv);\n        uv -=0.5;\n        \n        float d = length(uv);\n\n        //Assigns colour and offsets the gradient\n        vec3 Colour = palette(length(uv0)+ i* 5.0 - iTime* 2.0);\n\n        //Frequency of circles according to sign function\n        d -= sin(d * 50.0 + iTime)/1.0;\n        d = abs(d);\n\n\n       //Inverts the radial spheres (1-x) and affects the threshold of spheres\n        //power function accentuates the the shader\n        d = pow(0.1/d, 1.8);\n\n        finalColour += Colour-= d;\n    }\n    \n    \n    //Colour of canvas\n    fragColor = vec4(finalColour, 1.0);\n}","name":"Image","description":"","type":"image"}]}