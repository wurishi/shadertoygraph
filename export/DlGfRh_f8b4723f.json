{"ver":"0.1","info":{"id":"DlGfRh","date":"1701803395","viewed":54,"name":"apollonius problem moebius map 2","username":"jt","description":"Generate random solutions of the Problem of Apollonius by Moebius Transformation of tangent circles on a regular triangle.\nThis variant calculates the circle centers and radii (instead of transforming the image).\nTODO: How can this be extended to 3d?","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["circles","triangle","map","animation","learning","complex","center","transformation","tangent","moebius","problem","radius","apollonius"],"hasliked":0,"parentid":"dlKBzz","parentname":"apolloniusproblem by moebius map"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/DlGfRh apollonius problem moebius map 2, 2023 by jt\n// based on https://www.shadertoy.com/view/dlKBzz apolloniusproblem by moebius map\n// based on https://www.shadertoy.com/view/dlGfzz moebius map b triangle pair anim\n// using https://www.shadertoy.com/view/DlsGWN Bouncy Ball in a Disk by oneshade\n\n// Generate random solutions of the\n// Problem of Apollonius https://en.wikipedia.org/wiki/Problem_of_Apollonius\n// by Moebius Transformation https://en.wikipedia.org/wiki/Moebius_transformation\n// of tangent circles on a regular triangle.\n// Using this transformation because it maps generalized circles to generalized circles.\n// This variant calculates the circle centers and radii (instead of transforming the image)\n// as described in https://www.johndcook.com/blog/2022/06/26/mobius-transformation-circles/\n\n// Thanks to mla for fixing missing complex multiplication!\n// Thanks to oneshade for the wonderful circle bounce function!\n\n// TODO: How can this be extended to 3d?\n\n// see also\n// https://en.wikipedia.org/wiki/Moebius_transformation\n// https://delta.cs.cinvestav.mx/~mcintosh/comun/complex/node10.html\n// https://delta.cs.cinvestav.mx/~mcintosh/comun/complex/node11.html\n// https://delta.cs.cinvestav.mx/~mcintosh/comun/complex/node12.html\n\n// tags: circles, triangle, map, animation, learning, complex, center, transformation, tangent, moebius, problem, radius, apollonius\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define scale 5.0\n\n#define pi 3.1415926\n\nmat2 rotate(float phi)\n{\n    float c = cos(phi), s = sin(phi);\n    return mat2(c,s,-s,c);\n}\n\n// Thanks to oneshade for this wonderful disk_bounce function!\nvec4 disk_bounce(float r, vec4 pv, float t) // https://www.shadertoy.com/view/DlsGWN Bouncy Ball in a Disk by oneshade\n{\n    vec2 p0 = pv.xy;\n    vec2 v0 = pv.zw;\n    vec2 pos;\n    vec2 vel;\n    float a = dot(v0, v0);\n    float b = dot(p0, v0);\n    float c = dot(p0, p0) - r * r;\n    float dis = b * b - a * c;\n    if (dis >= 0.0 && c <= 0.0)\n    {\n        dis = sqrt(dis);\n        t += (dis + b) / a;\n\n        vec2 hit = p0 + v0 * (dis - b) / a;\n        float reflDelta = 2.0 * asin((p0.y * v0.x - p0.x * v0.y) / (r * sqrt(a))) - pi;\n\n        float pathLen = 2.0 * dis / a;\n        float hitIndex = floor(t / pathLen);\n\n        float angle = reflDelta * hitIndex;\n        vec2 startPos = rotate(angle - reflDelta) * hit;\n        vec2 startVel = rotate(angle) * v0;\n\n        t -= pathLen * hitIndex;\n        pos = startPos + startVel * t, vel = startVel;\n    }\n    return vec4(pos,vel);\n}\n\nvec4 hash41(float p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n// MÃ¶bius transform:\n// Complex numbers\n//     a z + b\n//     -------\n//     c z + d\n\n#define real(z) (z).x\n#define imag(z) (z).y\n\nvec2 cmul(vec2 a, vec2 b)\n{\n    return\n        vec2\n        (\n            a.x*b.x-a.y*b.y,\n            a.x*b.y+a.y*b.x\n        );\n}\n\nvec2 cdiv(vec2 a, vec2 b)\n{\n    return\n        vec2\n        (\n            a.x*b.x+a.y*b.y,\n            a.y*b.x-a.x*b.y\n        )\n        /\n        dot(b,b);\n}\n\nvec2 conjugate(vec2 z)\n{\n    return vec2(z.x,-z.y);\n}\n\n// translated from https://www.johndcook.com/blog/2022/06/26/mobius-transformation-circles/\nvec3 transform(vec2 a, vec2 b, vec2 c, vec2 d, vec2 center, float radius)\n{\n    center += cdiv(d,c);\n\n    vec2 temp = center;\n    center = conjugate(center) / (dot(center, center) - radius * radius);\n    radius /= abs(dot(temp, temp) - radius * radius);\n\n    vec2 e = (cmul(b,c) - cmul(a,d)) / dot(c,c);\n    center = cmul(center,e);\n    radius *= length(e);\n\n    center += cdiv(a,c);\n\n    return vec3(center, radius);\n}\n\nstruct cmat2\n{\n    vec2 a, b, c, d;\n};\n\n// / a b \\   / A B \\   / aA+bC aB+bD \\\n// |     | * |     | = |             |\n// \\ c d /   \\ C D /   \\ cA+dC cB+dD /\ncmat2 cmul(cmat2 p, cmat2 q)\n{\n    return\n        cmat2\n        (\n            p.a * q.a + p.b * q.c, p.a * q.b + p.b * q.d,\n            p.c * q.a + p.d * q.c, p.c * q.b + p.d * q.d\n        );\n}\n\n// https://en.wikipedia.org/wiki/M%C3%B6bius_transformation#Formula_for_the_inverse_transformation\ncmat2 inverse_moebius(cmat2 m)\n{\n    return\n        cmat2\n        (\n            m.d,-m.b,\n            -m.c,m.a\n        );\n}\n\n// https://en.wikipedia.org/wiki/M%C3%B6bius_transformation#Specifying_a_transformation_by_three_points\ncmat2 moebius_by_triangle(vec2 z1, vec2 z2, vec2 z3)\n{\n    return // transform from three points to 0,1,infty\n        cmat2\n        (\n            // Thanks to mla for debugging missing complex multiplication here!!!\n            z2-z3,-cmul(z1,z2-z3),\n            z2-z1,-cmul(z3,z2-z1)\n        );\n}\n\n// https://en.wikipedia.org/wiki/M%C3%B6bius_transformation#Specifying_a_transformation_by_three_points\ncmat2 moebius_by_triangles(vec2 p0, vec2 q0, vec2 p1, vec2 q1, vec2 p2, vec2 q2)\n{\n    // map triangle to 0,1,infinity then 0,1,infinity to other triangle\n    if(false) // which direction?\n    {\n    return\n        cmul\n        (\n            moebius_by_triangle(p0,p1,p2),\n            inverse_moebius(moebius_by_triangle(q0,q1,q2))\n        );\n    }\n    return\n        cmul\n        (\n            inverse_moebius(moebius_by_triangle(p0,p1,p2)),\n            moebius_by_triangle(q0,q1,q2)\n        );\n}\n\n// Thanks to mla for the (in retrospect) obvious concise implementation:\n// mla: \"How about just defining complex multiplication\n//       and division as cmul and cdiv say,\n//       and doing return cdiv(cmul(z,a)+b,cmul(z,c)+d) ?\"\nvec2 apply_moebius(vec2 a, vec2 b, vec2 c, vec2 d, vec2 z)\n{\n    return cdiv(cmul(z,a)+b,cmul(z,c)+d);\n}\n\nvec2 apply_moebius(cmat2 m, vec2 z)\n{\n    return cdiv(cmul(z,m.a)+m.b,cmul(z,m.c)+m.d);\n}\n\nfloat checker(vec2 p)\n{\n    float d = 10.0/iResolution.y;\n    if(true)\n    {\n        p = sin(2.0*pi*p);\n        return smoothstep(-d,+d, p.x*p.y);\n    }\n    p = fract(p)-0.5;\n    return smoothstep(-d,+d,max(min(p.x,p.y),-max(p.x,p.y))); // fuzzy logic\n}\n\nvec2 polar(float phi)\n{\n    return vec2(cos(phi), sin(phi));\n}\n\nfloat circles(vec3 p0, vec3 p1, vec3 p2, vec3 p3, vec2 I)\n{\n    vec4 d =\n        1.0\n        -\n        smoothstep\n        (\n            0.0,\n            scale*3.0/iResolution.y,\n            abs\n            (\n                vec4\n                (\n                    length(I-p0.xy),\n                    length(I-p1.xy),\n                    length(I-p2.xy),\n                    length(I-p3.xy)\n                )\n                -\n                vec4\n                (\n                    p0.z,\n                    p1.z,\n                    p2.z,\n                    p3.z\n                )\n            )\n        );\n    return max(max(d.x,d.y),max(d.z,d.w));\n}\n\nvec3 discs(vec3 p0, vec3 p1, vec3 p2, vec3 p3, vec2 I)\n{\n    vec4 d =\n        1.0\n        -\n        smoothstep\n        (\n            0.0,\n            scale*3.0/iResolution.y,\n            (\n                vec4\n                (\n                    length(I-p0.xy),\n                    length(I-p1.xy),\n                    length(I-p2.xy),\n                    length(I-p3.xy)\n                )\n                -\n                vec4\n                (\n                    p0.z,\n                    p1.z,\n                    p2.z,\n                    p3.z\n                )\n            )\n        );\n    vec2 c = vec2(0,1);\n    return max(max(c.yxx*d.x,c.xyx*d.y),max(c.xxy*d.z,0.5*d.w));\n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise to-unit map thanks to Fabrice\n    o = vec4(0);\n    //if(all(lessThan(abs(I), vec2(1))))\n    {\n        I *= scale;\n\n        float b = 2.0;\n        float r = sqrt(3.0)/2.0;\n        vec2 p0 = vec2(+r,0.5)/* 30*/, q0 = disk_bounce(b, hash41(123.0), iTime/10.0).xy;\n        vec2 p1 = vec2(-r,0.5)/*150*/, q1 = disk_bounce(b, hash41(456.0), iTime/10.0).xy;\n        vec2 p2 = vec2(0,-1)  /*270*/, q2 = disk_bounce(b, hash41(789.0), iTime/10.0).xy;\n\n        if(iMouse.z > 0.0) // click to show untransformed\n        {\n            o.xyz = vec3(circles(vec3(p0,r),vec3(p1,r),vec3(p2,r),vec3(0,0,1.0+r), I));\n            //o.xyz = max(o.xyz, discs(vec3(p0,r),vec3(p1,r),vec3(p2,r),vec3(0,0,1.0+r), I)); // COLOR\n        }\n        else // show transformed\n        {\n            cmat2 m = moebius_by_triangles(p0, q0, p1, q1, p2, q2);\n\n            vec3 c0 = transform(m.a, m.b, m.c, m.d, p0, r);\n            vec3 c1 = transform(m.a, m.b, m.c, m.d, p1, r);\n            vec3 c2 = transform(m.a, m.b, m.c, m.d, p2, r);\n            vec3 c3 = transform(m.a, m.b, m.c, m.d, vec2(0), 1.0 + r);\n            o.xyz = vec3(circles(c0,c1,c2,c3, I));\n            //o.xyz = max(o.xyz, vec3(discs(c0,c1,c2,c3, I))); // COLOR\n            \n            //o.xyz = max(o.xyz,circles(vec3(q0,0.01),vec3(q1,0.01),vec3(q2,0.01),vec3(0), I)); \n\n            //I = apply_moebius(m, I);\n            //o.xyz = vec3(mix(0.25,0.75,checker(I)));\n        }\n    }\n}\n","name":"Image","description":"","type":"image"}]}