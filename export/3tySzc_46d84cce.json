{"ver":"0.1","info":{"id":"3tySzc","date":"1583220324","viewed":106,"name":"Line/Circle Morph Flawed","username":"JaapSuter","description":"Trying to find a visually appealing way to morph between a horizontal line and a circle.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["morph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat pi = 3.14159265359f;\n\nvec2 toCartesian(float a, float r) {\n    return vec2(cos(a) * r, sin(a) * r);\n}\n\n\nfloat test(vec2 p, float t) {\n    \n    float begin = 0.0f * pi;\n    float end = 2.0f * pi;\n    \n    \n    for (float s = begin; s < end; s += 0.01f) {\n        \n        float a = s * t - mix(0.0f, 2.0f * pi, t);\n        float r = mix(s, 1.0f, t);\n        \n        vec2 cart = toCartesian(a, r);\n        \n        if (distance(cart, p) < 0.03f)\n            return (s / 2.0f / pi) + 0.6f;\n    }\n    \n    return 0.0f;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    \n    float t = fract(iTime * 0.2f);\n    \n    float aspectRatio = float(iResolution.y) / float(iResolution.x);\n    float xRange = 10.0f;\n    float yRange = aspectRatio * xRange;\n    \n    \n    vec2 xy = vec2(\n        mix(-xRange, xRange, uv.x),\n        mix(-yRange, yRange, uv.y));\n    \n    float result = test(xy, t);\n    fragColor = result * vec4(1.0f, 1.0f, 1.0f, 1.0f);\n}","name":"Image","description":"","type":"image"}]}