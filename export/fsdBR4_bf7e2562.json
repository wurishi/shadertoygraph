{"ver":"0.1","info":{"id":"fsdBR4","date":"1656132263","viewed":41,"name":"Astroid (Math Shape)","username":"Sent","description":"astroid","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 vec2ar(float ar, float x, float y) {return vec2(ar*x, y);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float PI = 3.14159265;\n    // pixel coordinates (from 0 to 1)\n    vec2 st = fragCoord.xy/iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n    st.x *= aspect;\n    \n    // Use polar coordinates\n    vec2 toCenter = vec2ar(aspect, .5, .5)-st;\n    float phi = atan(toCenter.y,toCenter.x)*2. - PI;\n    float r = length(toCenter);\n    \n    // Asteroid\n    vec2 ast2 = pow(abs(toCenter), vec2(2.));\n    float a = .15;\n    float a2 = pow(a, 2.);\n    float f = pow(ast2.x + ast2.y - a2, 3.) + 27.*a2*ast2.x*ast2.y;\n    \n    // Time varying pixel color\n    vec3 col = vec3(1.);\n    col *= step(0., -f);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}