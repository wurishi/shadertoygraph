{"ver":"0.1","info":{"id":"4ddSz4","date":"1458237155","viewed":303,"name":"Multipass Example","username":"aaecheve","description":"Learning to multipass","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["test","example","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 readMemory(vec2 coords)\n{\n    return texture(iChannel0, (coords + 0.5)/iChannelResolution[0].xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 data1 = readMemory(vec2(0,0));\n    vec4 data2 = readMemory(vec2(1,1)); \n    \n    vec2 pos1 = data1.xy;\n    vec2 pos2 = data2.xy;\n    \n    vec4 col = vec4(0,0,0,1);\n    if (distance(pos1, fragCoord.xy) < 20.0)\n        col = vec4(1,0,0,1);\n    else if (distance(pos2, fragCoord.xy) < 15.0)\n        col = vec4(1,1,0,1);\n    \n\tfragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 readMemory(vec2 coords)\n{\n    return texture(iChannel0, (coords + 0.5)/iChannelResolution[0].xy);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Read data\n    vec4 data1 = readMemory(vec2(0,0));\n    vec2 pos1 = data1.xy;\n    vec2 vel1 = data1.zw;\n    \n    vec4 data2 = readMemory(vec2(1,1));\n    vec2 pos2 = data2.xy;\n    vec2 vel2 = data2.zw;\n    \n    \n    //Set initial values\n    if(pos1.x == 0.0 && pos1.y == 0.0)\n       pos1 = vec2(20,30); \n    if(pos2.x == 0.0 && pos2.y == 0.0)\n       pos2 = vec2(iChannelResolution[0].x - 20.0,30); \n    if(vel1.x == 0.0 && vel1.y == 0.0)\n       vel1 = vec2(1,1); \n    if(vel2.x == 0.0 && vel2.y == 0.0)\n       vel2 = vec2(-1,1); \n    \n    //Update positions\n    pos1 += vel1;    \n    pos2 += vel2;\n    \n    \n    //Check boundaries and bounce\n    if(pos1.x > iResolution.x)\n        vel1.x = -1.0;\n    if(pos1.x < 0.0)\n        vel1.x = 1.0;\n    if(pos1.y > iResolution.y)\n        vel1.y = -1.0;\n    if(pos1.y < 0.0)\n        vel1.y = 1.0;\n    \n    if(pos2.x > iResolution.x)\n        vel2.x = -1.0;\n    if(pos2.x < 0.0)\n        vel2.x = 1.0;\n    if(pos2.y > iResolution.y)\n        vel2.y = -1.0;\n    if(pos2.y < 0.0)\n        vel2.y = 1.0;\n    \n   \n    //Write data\n    if(fragCoord.x < 1.0 && fragCoord.y < 1.0) \n    \tfragColor = vec4(pos1.x, pos1.y, vel1.x, vel1.y);\n    else if(fragCoord.x < 2.0 && fragCoord.y < 2.0) \n    \tfragColor = vec4(pos2.x, pos2.y, vel2.x, vel2.y);\n    else\n       discard;\n    \n}","name":"Buf A","description":"","type":"buffer"}]}