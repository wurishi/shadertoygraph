{"ver":"0.1","info":{"id":"DljfWD","date":"1694229192","viewed":13,"name":"tomografia experimento v4","username":"davidmachadosf","description":"new iteration","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"ctSfzW","parentname":"tomografia experimento 01"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float   a   = 1./3.;\nconst float   b   = 1./6.;\nconst float scale =  5.5 ;\n\n\nvec3 palette(float t) {\n\n    vec3 a = vec3( .2,  .7,     .4    );\n    vec3 b = vec3( .5,  .8,     .5    );\n    vec3 c = vec3(1. , 2.,     1.     );\n    vec3 d = vec3( .0,  .33333, .66666);\n    \n    return a + b*cos(6.28318*(c*t + d));\n}\n\n\n\nvec3 grayScale(float t) {\n\n    return vec3(t,t,t);\n}\n\n\n\n\n\nfloat uniform_to_widthNanometers (float u){\n    return 380. + 400.*(1.-u);\n}\n\n\n\nfloat uniform_to_freqTeraHertz (float u){\n    return (384. + 405.*u)*1.e3;\n}\n\nvec3 paletteReal( float w ) {\n    \n    float red, green, blue;\n\n    if (w >= 380. && w < 440.) {\n        red   = -(w - 440.) / (440. - 380.);\n        green = 0.;\n        blue  = 1.;\n    }\n    else \n    if (w >= 440. && w < 490.) {\n        red   = 0.;\n        green = (w - 440.) / (490. - 440.);\n        blue  = 1.;\n    }\n    else \n    if (w >= 490. && w < 510.) {\n        red   = 0.;\n        green = 1.;\n        blue  = -(w - 510.) / (510. - 490.);\n    }\n    else \n    if (w >= 510. && w < 580.) {\n        red   = (w - 510.) / (580. - 510.);\n        green = 1.;\n        blue  = 0.;\n    }\n    else \n    if (w >= 580. && w < 645.) {\n        red   = 1.;\n        green = -(w - 645.) / (645. - 580.);\n        blue  = 0.;\n    }\n    else \n    if (w >= 645. && w < 781.) {\n        red   = 1.;\n        green = 0.;\n        blue  = 0.;\n    }\n    else {\n        red   = 0.;\n        green = 0.;\n        blue  = 0.;\n    }\n\n\n    // Let the intensity fall off near the vision limits\n    float factor;\n    if (w >= 380. && w < 420.)\n        factor = .3 + .7*(w - 380.) / (420. - 380.);\n    else \n    if (w >= 420. && w < 701.)\n        factor = 1.;\n    else \n    if (w >= 701. && w < 781.)\n        factor = .3 + .7*(780. - w) / (780. - 700.);\n    else\n        factor = 0.;\n\n    float gamma = .8;\n    float R = (red   > 0. ? 255.*pow(red   * factor, gamma) : 0.);\n    float G = (green > 0. ? 255.*pow(green * factor, gamma) : 0.);\n    float B = (blue  > 0. ? 255.*pow(blue  * factor, gamma) : 0.); \n    \n    return vec3(R/255.,G/255.,B/255.);\n    //return vec3(r,0.,b);\n}\n\n\n\n\nfloat f(float x, float y, float iTime) { \n  \n  float d =  x*x + y*y;\n  float n=0.;\n  \n  float pa=a*log(3.3/iTime);\n  float pb=b*log(iTime/2.);\n  \n  \n  for(int i=0; i<200; i++) {\n  \n      float newX = (.5*x + pa/d)*x - y*y;\n\t  float newY = (.7*x + pb/d)*y;  \n\t  \n\t  x = newX;\n\t  y = newY;\t  \n\t  n+=1.;\n      \n      // sentinela\n      //if(n>10.) break;\n      \n      d = x*x + y*y;\n      if(d >= 6.) break;\n  }\n  \n  return 1.-sin(371.*n)*cos(129.*n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = scale*(fragCoord/iResolution.xy - .5);\n    \n    float x = uv.x;\n    float y = uv.y;\n    \n  \n    float valxy = f(y, x, 1.*iTime);\n    \n    //vec3 col = grayScale(valxy);\n    //vec3 col = palette(valxy);\n    //vec3 col = palette(valxy)*(grayScale(valxy));\n    \n    vec3 col = (paletteReal( uniform_to_widthNanometers(valxy)))*grayScale(valxy);\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}