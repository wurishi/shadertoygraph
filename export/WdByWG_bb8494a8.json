{"ver":"0.1","info":{"id":"WdByWG","date":"1587215377","viewed":85,"name":"Simplex gradient stripes","username":"trajektorijus","description":"describing","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["stripes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SAT_START 0.1\n#define LIGHT_START 0.4\n\n#define HUE_OFFSET 0.04\n#define SAT_OFFSET 0.0\n#define LIGHT_OFFSET 0.03\n\n#define stripe_count 9\n#define stripe_size 0.5\n#define noise_zoom 0.9  \n\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    //  x0 = x0 - 0. + 0.0 * C \n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n    // Permutations\n    i = mod(i, 289.0 ); \n    vec4 p = permute( permute( permute( \n        i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n                              + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n                     + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n    // Gradients\n    // ( N*N points uniformly over a square, mapped onto an octahedron.)\n    float n_ = 1.0/7.0; // N=7\n    vec3  ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                 dot(p2,x2), dot(p3,x3) ) );\n}\n\n//https://github.com/Jam3/glsl-hsl2rgb\nfloat hue2rgb(float f1, float f2, float hue) {\n    if (hue < 0.0)\n        hue += 1.0;\n    else if (hue > 1.0)\n        hue -= 1.0;\n        float res;\n    if ((6.0 * hue) < 1.0)\n        res = f1 + (f2 - f1) * 6.0 * hue;\n    else if ((2.0 * hue) < 1.0)\n        res = f2;\n        else if ((3.0 * hue) < 2.0)\n            res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n            else\n                res = f1;\n            return res;\n        }\n\nvec3 hsl2rgb(vec3 hsl) {\n    vec3 rgb;\n\n    if (hsl.y == 0.0) {\n        rgb = vec3(hsl.z); // Luminance\n    } else {\n        float f2;\n\n        if (hsl.z < 0.5)\n            f2 = hsl.z * (1.0 + hsl.y);\n        else\n            f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n\n        float f1 = 2.0 * hsl.z - f2;\n\n        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n        rgb.g = hue2rgb(f1, f2, hsl.x);\n        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n    }   \n    return rgb;\n}\n\nvec3 hsl2rgb(float h, float s, float l) {\n    return hsl2rgb(vec3(h, s, l));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float time = iTime / 10.0;\n    vec2 vUv = fragCoord/iResolution.xy;\n    float hueAmplitude = 0.06;\n    float startHue = hueAmplitude + 0.4 + (time / 10.0);\n\n    startHue = mod(startHue, 1.0) - hueAmplitude;\n\n    float noise = snoise(vec3(vUv.xy * (1.0 + ((1.0 - noise_zoom) * 9.0)), time));\n    vec3 hsl = vec3(startHue + (noise * hueAmplitude), SAT_START, LIGHT_START);\n\n    //stripes\n    float stripeWidth = (1.0 / float(stripe_count)) * stripe_size;\n    for (int i = 0; i < 100; i++) {\n        // hack to use dynamic count as loop ceiling... https://stackoverflow.com/a/39298265/1257868\n        if (i < stripe_count) {\n            float xPos = float(i) / float(stripe_count) - (time);\n\n            // float rotation = (sin(vUv.y + time) + 1.0) / 2.0 * ANGLE;\n            // xPos += rotation; // rotate stripes\n\n            xPos += noise; // noise\n            xPos = mod(xPos, 1.0); // repeat the stripe\n\n            if (vUv.x > (xPos) && vUv.x <= (xPos + stripeWidth)) {\n                hsl += vec3(HUE_OFFSET, SAT_OFFSET, LIGHT_OFFSET);\n            }\n\n            //finish the lines\n            if (xPos > (1.0 - stripeWidth) && xPos <= 1.0 && vUv.x > 0.0 && vUv.x <= stripeWidth - (1.0 - xPos)) {\n                hsl += vec3(HUE_OFFSET, SAT_OFFSET, LIGHT_OFFSET);\n            }\n        }\n    }\n\n    vec3 col = hsl2rgb(hsl);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}