{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Colorful tessellation by nimitz (stormoid.com) (twitter: @stormoid)\n// https://www.shadertoy.com/view/lslXDn\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n//flat version\n//#define flat\n\n#define WARP_ORDER 1.\n\n#define time iTime\n\nfloat hash21(in vec2 n){ return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453); }\nfloat noise( in vec2 x ){return texture(iChannel0, x*.01).x;}\n\nmat2 m2 = mat2( 0.80,  0.60, -0.60,  0.80 );\nfloat fbm( in vec2 p )\n{\t\n\tfloat z=2.;\n\tfloat rz = 0.;\n\tp *= 0.25;\n\tfor (float i= 1.;i < 6.;i++ )\n\t{\n\t\trz+= (sin(noise(p)*5.)*0.5+0.5) /z;\n\t\tz = z*2.;\n\t\tp = p*2.*m2;\n\t}\n\treturn rz;\n}\n\nvec2 field4( in vec2 x )\n{\n\tvec2 n = floor(x);\n\tvec2 f = fract(x);\n\n\tvec2 m = vec2(5.,0.);\n\t//4 samples\n\tfor(int j=0; j<=1; j++)\n\tfor(int i=0; i<=1; i++)\n    {\n\t\tvec2 g = vec2( float(i),float(j) );\n\t\tvec2 r = g - f;\n\t\tfloat minkpow = (iMouse.y/iResolution.x)*3.+.8;\n\t\tfloat d = pow(pow(abs(r.x),minkpow)+pow(abs(r.y),minkpow),1./minkpow)*.5;\n\t\td *= (iMouse.x/iResolution.x)*1.4+.5;\n\t\td = sin(d*10.+time*0.1);\n\t\tm.x *= d;\n\t\tm.y += d*1.2;\n    }\n\treturn pow(abs(m),vec2(0.8));\n}\n\nvec2 warp(vec2 uv, vec2 p, float offset)\n{\n\tuv -= p;\n\tfloat minkpow = WARP_ORDER;\n\tfloat d = pow(pow(abs(uv.x),minkpow)+pow(abs(uv.y),minkpow),1./minkpow);\n\tuv /= pow(d,2.)*1.-offset;\n\tuv += p;\n\treturn uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy-0.5;\n\tp.x *= iResolution.x/iResolution.y;\n\tp*= 5.;\n\t\n\t#ifndef flat\n\tp = warp(p,vec2(0.),-.1);\n\t#endif\n\t\n\tvec2 rz = field4(p);\n\t\n\tvec3 col = sin(vec3(.9,0.6,0.2)*rz.y*1.4)*rz.x;\n\tcol = pow(col,vec3(.99))*.85;\n\t\n\t//lights\n\tvec3 ligt = normalize(vec3(sin(time)*10.,1.,cos(time)*10.));\n\tvec3 nor = normalize(vec3(dFdx(rz.y), .08, dFdy(rz.y)));\n\t\n\t//fbm variation on the normals\n\tnor.xz *= fbm(p*4.);\n\tvec3 bnor = nor;\n\tnor.yz *= fbm(p*2.);\n\t\n\tfloat dif = clamp(dot( nor,ligt ),0.0,1.0)*1.9;\n\tcol *= 0.5+.4*dif;\n\tcol *= 1.+3e2*pow(abs(dot(bnor,ligt)), 30.);\n\t\n\t//simple fbm \"texturing\"\n\tcol *= fbm(p*70.)*0.2+0.85;\n\t\n\t//vignetting\n\tcol *= 1.-pow(dot(p,p),3.)*0.9e-4;\n\t\n\tfragColor = vec4(pow(col,vec3(0.6))-0.1,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lslXDn","date":"1399486758","viewed":1859,"name":"Colorful tessellation","username":"nimitz","description":"Drag mouse horizontally to increase frequency, Drag mouse vertically to change the minkowski order.\nUsing glsl derivatives for lighting, faster but somewhat pixelated.","likes":36,"published":1,"flags":0,"usePreview":1,"tags":["2d","grid","2dlighting","glslderivatives"],"hasliked":0,"parentid":"","parentname":""}}