{"ver":"0.1","info":{"id":"XtlBWl","date":"1513908990","viewed":480,"name":"Basic 2D Physics Engine","username":"Assossa","description":"Click to place ball","likes":14,"published":1,"flags":32,"usePreview":0,"tags":["2d","basic","physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BALL_RADIUS 0.1\n\nvec2 uvToWorld(vec2 v) {\n    v = v * 2.0 - 1.0;\n    v.x *= iResolution.x / iResolution.y;\n    return v;\n}\n\nfloat sdfBall(vec2 ball, vec2 p) {\n    return distance(ball, uvToWorld(p)) - BALL_RADIUS;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    //vec2 uv2 = uv * vec2(iResolution.x / iResolution.y, 1.0);\n    \n    vec2 ballPos = texelFetch(iChannel1, ivec2(0), 0).xy;\n    \n    float sdf = min(texture(iChannel0, uv).x, abs(sdfBall(ballPos, uv)));\n    \n\tfragColor = vec4(smoothstep(0.0, 3.0 / iResolution.y, sdf));\n    //fragColor = vec4(sin(sdf * 100.0 + iTime * 10.0) * 0.5 + 0.5);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float sdfCircle(vec2 p) {\n    return length(p) - 1.0;\n}\n\nfloat sdfBox(vec2 p) {\n  vec2 d = abs(p) - vec2(1.0);\n  return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nfloat scene(vec2 uv) {\n    return min(\n        (sdfCircle(uv / 1.75 + vec2(0.0, -0.5)) * -1.75),\n        min(\n            sdfBox(uv / 0.5 + vec2(0.0, 2.5)) * 0.5,\n            sdfCircle(uv / 0.25 + vec2(0.1, 3.5)) * 0.25\n        )\n\t);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    fragColor = vec4(scene(uv));\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define BALL_RADIUS 0.1\n#define SUB_STEPS 16\n\nvec2 screenToWorld(vec2 v) {\n    v = v / iResolution.xy * 2.0 - 1.0;\n    v.x *= iResolution.x / iResolution.y;\n    return v;\n}\n\nvec2 worldToUV(vec2 v) {\n    v.x /= iResolution.x / iResolution.y;\n    v = (v + 1.0) * 0.5;\n    return v;\n}\n\nfloat sdf(vec2 p) {\n    return texture(iChannel0, worldToUV(p)).x;\n}\n\nvec2 normal(vec2 uv) {\n\tvec2 eps = vec2( 0.0005, 0.0 );\n\treturn normalize(\n\t\tvec2(sdf(uv+eps.xy) - sdf(uv-eps.xy),\n\t\t     sdf(uv+eps.yx) - sdf(uv-eps.yx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = screenToWorld(fragCoord);\n    vec2 ballPos = texelFetch(iChannel1, ivec2(0), 0).xy;\n    vec2 ballVel = texelFetch(iChannel1, ivec2(0), 0).zw;\n    \n    if(iMouse.z > 0.0) {\n        ballPos = screenToWorld(iMouse.zw);\n        ballVel = vec2(0.0);\n    } else {\n        float dt = iTimeDelta / float(SUB_STEPS);\n        \n        for(int i = 0; i < SUB_STEPS; i++) {\n            // Collisions\n            if(sdf(ballPos) < BALL_RADIUS) {\n                ballVel = length(ballVel) * reflect(normalize(ballVel), -normal(ballPos)) * 0.99;\n            } else\n\n            // Gravity\n            ballVel.y -= 0.05 * dt;\n\n            // Add velocity\n            ballPos += ballVel * dt * 100.0;\n        }\n    }\n    \n    fragColor = vec4(ballPos, ballVel);\n}","name":"Buf B","description":"","type":"buffer"}]}