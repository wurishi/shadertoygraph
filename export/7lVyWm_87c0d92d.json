{"ver":"0.1","info":{"id":"7lVyWm","date":"1661628030","viewed":80,"name":"Punchcard Generator","username":"ljdp","description":"Punchcard shader to prototype a material for game I'm making. Change ROW_A/B_DATA to a number from 0 to 255. This number is a bitset for which holes are punched out in each row.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n#define ROW_A_DATA 35\n#define ROW_B_DATA 22\n\nfloat sdLine(vec2 uv, vec2 p, float angle) {\n    p = (uv - vec2(0.5, 0.5) - p);\n    float s = sin(angle), c = cos(angle);\n    p = p * mat2( c, -s, s, c );\n    return p.x;\n}\n\nfloat sdBox( vec2 uv, vec2 p, vec2 b ) {\n    p = (uv - vec2(0.5,0.5)) - p;\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdBoxOutline( vec2 uv, vec2 p, vec2 b ) {\n    float boxOuter = sdBox(uv, p, b);\n    float boxInner = sdBox(uv, p, b * 0.99);\n    return max(-boxInner, boxOuter);\n}\n\nfloat hardEdge(float dist) {\n    return smoothstep(0.001, 0.0001, dist);\n}\n\nvec2 punchBits(vec2 uv, vec2 p, vec2 s, int dataMask) {\n    vec2 t = vec2(0.0);\n    for (int i = 0; i < 8; ++i) {\n        int bit = int(pow(2.0, float(i)));\n        float mask = float((dataMask & bit) == bit);\n        float x = float(8 - i);\n        float bitSqr = hardEdge(\n            sdBox(uv, vec2(x * 0.08, 0.0) + p, s)\n        );\n        t.x += bitSqr * mask;\n        \n        float bitSqrOutline = hardEdge(\n            sdBoxOutline(uv, vec2(x * 0.08, 0.0) + p, s)\n        );\n        t.y += bitSqrOutline;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    float dist0 = sdBox(uv, vec2(0.0, 0.0), vec2(0.4, 0.3));\n    float dist1 = sdLine(uv, vec2(-0.59, 0.0), 3.9);\n    float dist2 = sdLine(uv, vec2(0.48, -0.2), PI/4.0);\n    float dist3 = sdLine(uv, vec2(-0.48, -0.2), (PI/4.0)*3.0);\n    float dist4 = sdLine(uv, vec2(0.48, 0.2), (-PI/4.0));\n    float t0 = hardEdge(dist0);\n    float t1 = hardEdge(dist1);\n    float t2 = hardEdge(dist2);\n    float t3 = hardEdge(dist3);\n    float t4 = hardEdge(dist4);\n    float mask = min(t0, t1);\n    mask = min(mask, t2);\n    mask = min(mask, t3);\n    mask = min(mask, t4);\n    \n    int rowCData = int(iTime * 8.0) % 256;\n    \n    vec2 bitSqrSize = vec2(0.014, 0.05);\n    vec2 rowAOffset = vec2(-0.34, 0.14);\n    vec2 punchMask = vec2(0.0);\n    punchMask += punchBits(uv, rowAOffset, bitSqrSize, ROW_A_DATA);\n    punchMask += punchBits(uv, rowAOffset + vec2(0.0, -0.16), bitSqrSize, ROW_B_DATA);\n    punchMask += punchBits(uv, rowAOffset + vec2(0.0, -0.32), bitSqrSize, rowCData);\n    mask -= punchMask.x;\n    \n    vec3 backcol = vec3(1.0, 0.0, 1.0) * (1.0 - mask) * (0.2 + 0.2*cos(iTime+uv.xyx+vec3(2,0,4)));\n    vec3 col = mask * vec3(247.0/255.0, 210.0/225.0, 177.0/255.0);\n    col = mix(col, vec3(0.5), punchMask.y);\n    fragColor = vec4(col + backcol, 1.0);\n}","name":"Image","description":"","type":"image"}]}