{"ver":"0.1","info":{"id":"wd2SRc","date":"1554609265","viewed":74,"name":"Basins of Attraction","username":"lscosta","description":"For the function f(z) = z^5 - 1.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","math","polynomial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_ITERS = 500;\n\nconst vec3 COLOR_1 = 1.5 * vec3(139, 38, 53) / 255.;\nconst vec3 COLOR_2 = 1.5 * vec3( 13, 92, 99) / 255.;\nconst vec3 COLOR_3 = 1.5 * vec3( 11, 57, 84) / 255.;\nconst vec3 COLOR_4 = 5. * vec3(  4, 15, 15) / 255.;\nconst vec3 COLOR_5 = 1.5 * vec3( 46, 53, 50) / 255.;\n\nvec2 cmult(vec2 z1, vec2 z2) {\n    return vec2(\n        z1.x * z2.x - z1.y * z2.y,\n        z1.x * z2.y + z1.y * z2.x\n    );\n}\n\nvec2 cdiv(vec2 z1, vec2 z2) {\n    vec2 conj = vec2(z2.x, -z2.y);\n    return cmult(z1, conj) / (length(z2) * length(z2));\n}\n\nvec3 colorFromEndpoint(vec2 pole) {\n    if (pole.x > 0.1 && pole.y > 0.1) return COLOR_1;\n    if (pole.x > 0.1 && pole.y < -0.1) return COLOR_2;\n    if (pole.x < -0.1 && pole.y > 0.1) return COLOR_3;\n    if (pole.x < -0.1 && pole.y < -0.1) return COLOR_4;\n    return COLOR_5;\n}\n\nvec2 newton(vec2 z) {\n    vec2 diff = cmult(cmult(z, z), cmult(z, z)) * 5.;\n    vec2 func = cmult(cmult(z, z), cmult(z, cmult(z, z))) - vec2(1, 0);\n    return z - cdiv(func, diff);\n}\n\nvec3 getColor(vec2 z) {\n    for (int i = 0; i < MAX_ITERS; i++) {\n        vec2 n = newton(z);\n        if (length(z - n) < 0.001) {\n            break;\n        }\n        z = n;\n    }\n    return colorFromEndpoint(z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 z = 3.0 * (fragCoord - iResolution.xy / 2.0) / iResolution.y;\n    vec3 color = getColor(z);\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}