{"ver":"0.1","info":{"id":"XtdBWM","date":"1540676274","viewed":342,"name":"Flowmaps","username":"TylerWalters","description":"Testing the implementation of flow maps. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["distortion","water","uv","map","flow","flowmap","flowing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Tyler Walters\n// Technical Artist\n// https://www.artstation.com/tylerwalters/blog\n\n// Inspired by Valve's 2010 paper\n// https://steamcdn-a.akamaihd.net/apps/valve/2010/siggraph2010_vlachos_waterflow.pdf\n\n\nconst float rate = 0.2;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 1.5 * fragCoord/iResolution.xy;\n    \n    float t = iTime * rate;\n    \n    // Flow masks (note the low high mip level for smoother texture offset transition)\n    float r = texture(iChannel1, (uv * 2.0) + vec2(iTime * 0.075), 5.0).r * .25;\n\tfloat a = fract(t + r);\n    float b = fract((t + r) - 0.5);\n    \n    // Trangle wave\n    float x = distance(fract(b), 0.5) * 2.0;\n    \n    // UV distortion (requires a real flow map texture to become useful over basic panning)\n    vec2 c = a * vec2(-0.1, 0.0) + uv;\n   \tvec2 d = b * vec2(-0.1, 0.0) + (uv + vec2(0.5, 0.5));\n    \n    // Textures using distorted UVs\n    vec3 tex_a = texture(iChannel0, c, 1.0).rgb;\n    vec3 tex_b = texture(iChannel0, d, 1.0).rgb;\n    \n\t\n    // Final color\n    vec3 col = mix(tex_b, tex_a, x).xxx * vec3(0.6, 0.8, 0.2) ;\n\n\n    // Output to screen\n    fragColor = vec4(col ,1.0);\n}","name":"Image","description":"","type":"image"}]}