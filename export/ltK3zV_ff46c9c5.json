{"ver":"0.1","info":{"id":"ltK3zV","date":"1475658129","viewed":122,"name":"slugs","username":"efairbanks","description":"Slugs are red, right? Sure.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MARCH_STEPS 150.0\n#define EPSILON 0.00005\n#define GRADIENT_STEP 0.02\n\n#define M_PI 3.1415926535897932384626433832795\n\nfloat torus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sphere( vec3 p, float s )\n{\n  p = p - vec3(0.,0.,-0.25);\n  return length(p)-s;\n}\n\nfloat box(vec3 p, vec3 b, float roundness)\n{\n\treturn length(max(abs(p)-(b-vec3(roundness)),0.0))-roundness;\n}\n\nvoid cameraRay(vec2 scanLines, vec3 cameraPosition, vec3 target, float fov, out vec3 pos, out vec3 dir)\n{\n\tvec3 forward = normalize(target-cameraPosition);\n    vec3 up = vec3(0.,1.,0.);\n    vec3 right = normalize(cross(forward, up));\n    up = normalize(cross(forward,right));\n    \n    right = right*scanLines.x*fov;\n    up = up*scanLines.y*fov;\n    \n    pos = cameraPosition;\n    dir = (right+up+forward);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp(0.5+0.5*(b-a)/k,0.0,1.0);\n    return mix(b,a,h)-k*h*(1.0-h);\n}\n\n#define FOV 0.8\nfloat map(vec3 p)\n{\n    const float times = 9.;\n\tfloat d = 1000.;\n    for(float i=0.;i<times;i++)\n    {\n    \td = smin(sphere(p,pow(0.83,i)*1.8),d,pow(1.,i)*0.9);\n        p.z-=pow(sin(iTime+(2.*M_PI*i/times)),2.);\n        p.x+=-pow(0.99,i)*1.;\n    }\n   \tfor(float i=0.;i<times;i++)\n    {\n    \td = smin(sphere(p,pow(0.83,7.-i)*1.8),d,pow(1.,i)*0.9);\n        p.z-=pow(sin(iTime+(2.*M_PI*i/times)),2.);\n        p.x-=-pow(0.99,i)*1.;\n    }\n   \tfor(float i=0.;i<times;i++)\n    {\n    \td = smin(sphere(p,pow(0.83,i)*1.8),d,pow(1.,i)*0.9);\n        p.z+=pow(sin(iTime+(2.*M_PI*i/times)),2.);\n        p.x-=-pow(0.99,i)*1.;\n    }\n    for(float i=0.;i<times;i++)\n    {\n    \td = smin(sphere(p,pow(0.83,7.-i)*1.8),d,pow(1.,i)*0.9);\n        p.z+=pow(sin(iTime+(2.*M_PI*i/times)),2.);\n        p.x+=-pow(0.99,i)*1.;\n    }\n    return d;\n}\n\nvoid march(vec3 origin, vec3 direction, out vec3 rayHead, out bool hit, out float dist, out float steps)\n{\n    float distanceTraveled = 0.;\n    hit = true;\n    for(float step=0.; step<MARCH_STEPS; step++)\n    {\n        rayHead = origin + (direction*distanceTraveled);\n        dist = map(rayHead);\n        steps = step;\n        if(dist<EPSILON||step>=MARCH_STEPS) return;\n        distanceTraveled += dist;\n    }\n    hit = false;\n}\n\nvec3 gradient( vec3 pos )\n{\n\tconst vec3 dx = vec3( GRADIENT_STEP, 0.0, 0.0 );\n\tconst vec3 dy = vec3( 0.0, GRADIENT_STEP, 0.0 );\n\tconst vec3 dz = vec3( 0.0, 0.0, GRADIENT_STEP );\n\treturn normalize(vec3(\n\t\tmap( pos + dx ) - map( pos - dx ),\n\t\tmap( pos + dy ) - map( pos - dy ),\n\t\tmap( pos + dz ) - map( pos - dz )\n\t));\n}\n\nfloat diffuse(vec3 normal, vec3 lightPosition)\n{\n\treturn max(dot(normal,normalize(lightPosition)),0.);\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nfloat shadePoint(vec3 position, vec3 normal, vec3 lightPosition)\n{\n    float diffuseLight = diffuse(normal, lightPosition);\n\t// is this specular?\n    // no, this could only be\n    // speculative light\n    float specularLight = pow(diffuseLight,30.);\n\tfloat shadow = 1.;//softshadow(position, normalize(lightPosition), 0.02, 2.25);\n    return (diffuseLight+specularLight)*shadow;\n}\n\nvec3 background(vec2 uv)\n{\n\treturn vec3(0.5,0.5,0.5)*uv.y;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    // scale coordinates to -1 -> +1, adjusted for screen aspect ratio\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = uv*2.-1.;\n    uv.x = uv.x*iResolution.x/iResolution.y;\n    \n    // get ray representing camera scanline position and direction\n    vec3 cameraPosition = vec3(sin(iTime/4.),-1.,cos(iTime/4.))*5.;\n    vec3 cameraOrigin;\n    vec3 cameraDirection;\n    cameraRay(uv, cameraPosition, vec3(0.,0.,0.), FOV, cameraOrigin, cameraDirection);\n    \n    // calculate distance, hit point, etc of distance field via raymarching\n    vec3 rayHead;\n    bool hit;\n    float dist;\n    float steps = 40.;\n    march(cameraOrigin, cameraDirection, rayHead, hit, dist, steps);\n    \n    // calculate normal for point on distance field\n    vec3 normal = gradient(rayHead);\n    \n    // calculate light for point\n\tvec3 rotLightPos = vec3(-1.,-1.,0.);\n    vec3 latRotLightPos = vec3(0.,-1.,-1.);\n    vec3 lightPos = vec3(cos(iTime),sin(iTime),cos(iTime));\n    float light = 0.;\n    light += shadePoint(rayHead, normal, rotLightPos);\n    light += shadePoint(rayHead, normal, latRotLightPos);\n    light += shadePoint(rayHead, normal, lightPos);\n    light /= 3.;\n    \n    // specify color of entire distance field\n    vec3 fieldColor = vec3(1.0,0.4,0.4);\n    \n    // final steps and background\n    vec3 color = fieldColor*light;\n    if(!hit) color = background(uv);\n    \n    // set fragment shader color\n    fragColor = vec4(color,1.);\n}\n","name":"Image","description":"","type":"image"}]}