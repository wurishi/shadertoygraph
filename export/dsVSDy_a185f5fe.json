{"ver":"0.1","info":{"id":"dsVSDy","date":"1681577054","viewed":94,"name":"Rainbow Eye","username":"OliverS","description":"Rainbow colored eye","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["eye","rainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat PI = 3.1415;\n\nvec3 backgroundColor = vec3(1);\n\nfloat eyeRadius = 0.40;\nfloat pupilSize = 0.3;\n\n//blinkFreq should always be greater than or equal to blinkSpeed\nfloat blinkFreq = 0.0;//7.5;\nfloat blinkSpeed = 2.5;\nfloat blinkPower = 3.0;\n\nfloat lineFreq = 20.0;\n\nfloat colorShiftRate = 0.5;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float proportions = iResolution.x / iResolution.y;\n    \n    vec2 center = vec2(0.5*proportions, 0.5);    \n    vec2 size = vec2(proportions, 1);\n    vec2 uv = fragCoord/iResolution.yy;\n    \n \n    vec2 offset = pow(sin(iTime/2.0+vec2(0, 5)), vec2(3, 3))*0.03;\n        \n    \n    vec3 col = backgroundColor;\n    \n    //pupilSize *= 0.75+0.25*sin(iTime/2.0);\n    \n    vec2 eyeCenter = center + offset;\n    vec2 relativePos = (uv.xy - eyeCenter) / eyeRadius;\n    float irisDist = length(relativePos);\n    float angle = atan(relativePos.x, relativePos.y);\n    \n    //angle += 2.0*sin(relativePos.x) + 1.0 * cos(relativePos.y);\n    \n    \n    //Iris\n    if(irisDist < 1.0){\n    \n        //Base Color\n        col = cos0To1(relativePos.xyx + iTime*colorShiftRate + vec3(3, 1, 4)); \n        \n        //Lines\n        float r = 0.2+0.3*cos(angle*lineFreq+10.0*sin(angle*13.0)*sin(angle*23.0+7.0))*sin(angle*31.0);\n        col = mix(col, vec3(1,1,1) * 1.5*(1.0-smoothstep(r, r*2.0, irisDist)), r*0.7);\n        \n        //Shading\n        col *= 1.0-0.5*smoothstep(0.8, 1.0, irisDist);\n        \n        //Pupil\n        col *= smoothstep(pupilSize, pupilSize*1.4, irisDist);\n\n        //Edge smoothing\n        float f = smoothstep(0.95, 1.0, irisDist);\n        col = mix(col, backgroundColor, f);\n        \n        //Light Higlight\n        f = 1.0-smoothstep(0.0, 0.2, 0.2*length(relativePos-vec2(0.4, 0.45)));\n        col += vec3(1, 0.9, 0.7) * 0.8*pow(f, 2.5);\n    }\n    \n    \n\n    //Blinking eyelids\n    if(blinkFreq != 0.0){\n        float blinkTimer = mod(iTime, blinkFreq);    \n\n        if(blinkTimer < blinkSpeed){\n            float amount = blinkTimer/blinkSpeed;\n            if(0.5-abs(uv.y-center.y) < size.y/2.0 * pow(sin(amount*PI), blinkPower)){\n                col=vec3(229.0/255.0, 181.0/255.0, 131.0/255.0);\n            }\n        }\n    }\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float cos0To1(float x){\n    return 0.5 + 0.5 * cos(x);\n}\nvec2 cos0To1(vec2 x){\n    return 0.5 + 0.5 * cos(x);\n}\nvec3 cos0To1(vec3 x){\n    return 0.5 + 0.5 * cos(x);\n}\nvec4 cos0To1(vec4 x){\n    return 0.5 + 0.5 * cos(x);\n}\n\nfloat sin0To1(float x){\n    return 0.5 + 0.5 * sin(x);\n}\nvec2 sin0To1(vec2 x){\n    return 0.5 + 0.5 * sin(x);\n}\nvec3 sin0To1(vec3 x){\n    return 0.5 + 0.5 * sin(x);\n}\nvec4 sin0To1(vec4 x){\n    return 0.5 + 0.5 * sin(x);\n}","name":"Common","description":"","type":"common"}]}