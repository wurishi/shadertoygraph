{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"\nfloat drawSphere(vec2 position, vec2 texCoord)\n{\n\tfloat aspect = iResolution.x / iResolution.y;\n\ttexCoord.x *= aspect;\n\tposition.x *= aspect;\n\n\treturn 0.01 / min(length(texCoord - position), 0.3);\n}\n\nfloat drawStars(vec2 texCoord)\n{\n\tfloat result;\n\t\t\n\tresult += drawSphere(vec2(0.3, 0.9), texCoord);\n\tresult += drawSphere(vec2(0.8, 0.75), texCoord);\n\tresult += drawSphere(vec2(0.1, 0.82), texCoord);\n\tresult += drawSphere(vec2(0.64, 0.79), texCoord);\n\tresult *= 0.2;\n\treturn result;\n\t\n}\n\nfloat drawGround(vec2 texCoord, vec2 lightPosition)\n{\n\n\tfloat yBorder = 0.1 +  sin(texCoord.x * 10.0) * 0.05 * sin(texCoord.x * 25.0) + 0.005 * sin(texCoord.x * 10.0) * cos(texCoord.x * 300.0) + 0.14 * sin(texCoord.x);\n\n\tif (texCoord.y > yBorder) return 0.0;\t\n\t\n\t// Calculate slope\n\tfloat yBorderDerivative = 0.14 * cos(texCoord.x) + cos(10.0 * texCoord.x) * (0.5 * sin(25.0 * texCoord.x) + 0.05 * cos(300.0 * texCoord.x)) + sin(10.0*texCoord.x)*(1.25 * cos(25.0*texCoord.x) - 1.5 * sin(300.0 * texCoord.x));\n\n\tvec2 slopeVector = normalize(vec2(1.0, yBorderDerivative));\n\t\t\n\t// Calculate ground-normal\n\tfloat piHalf = 3.14159 / 2.0;\n\tvec2 groundNormal;\n\tgroundNormal.x = slopeVector.x * cos(piHalf) - slopeVector.y * sin(piHalf);\n\tgroundNormal.y = slopeVector.x * sin(piHalf) + slopeVector.y * cos(piHalf);\t\n\n\tif (texCoord.y < yBorder - 0.04) return yBorder * 1.6 * texCoord.y;\n\n\t\n\tnormalize(groundNormal);\n\t\n\t// Vector from ground to light\n\tvec2 groundToLight = lightPosition - texCoord.xy;\n\tfloat distanceToLight = length(groundToLight);\n\tgroundToLight = normalize(groundToLight);\n\t\n\t// Calculate light on the ground\n\tfloat diffuse = pow((0.12 / distanceToLight), 2.0) * dot(groundToLight, groundNormal);\n\t\n\tif (texCoord.y < yBorder) return max(0.001, diffuse);\n\t\n\treturn 0.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 lightPosition = vec2(0.5 * (1.0 + sin(iTime * 0.5)) , 0.35 + 0.01 * (1.0 + sin(iTime * 10.0)));\n\n    // Calculate uv\n\tvec2 uv = fragCoord.xy / iResolution.xy;\t\n\t\n\t// Draw sky\n\tvec4 result = vec4(0.0, 0.0, 0.0, 1.0);\n\tresult.a = 1.0;\n\tresult.b = 0.01;// * (sin(uv.y));\n\t\n\t// Draw sand\n\tresult.g = 0.3 * (sin((uv.y + 0.05 * sin(uv.x * 5.0) + 0.68) * 3.0)) - 0.1;\n\tresult.r = 0.29 * (sin((uv.y + 0.05 * sin(uv.x * 5.0) + 0.68) * 3.0)) - 0.1;\n\tresult.b += 0.25 * (sin((uv.y + 0.05 * sin(uv.x * 5.0) + 0.6) * 1.7)) - 0.1;\n\t\n\t// Draw ground\n\tfloat ground = drawGround(uv,lightPosition);\n\t\n\tif (ground > 0.0)\n\t{\n\t\tresult.g = 0.5 * ground;\n\t\tresult.r = ground;\n\t\tresult.b = 0.0;\n\t}\n\t\n\t// Draw sphere\n\tresult += drawSphere(lightPosition, uv);\n\t\n\t// Draw stars\n\tresult += drawStars(uv);\n\t\n\n\tfragColor = result;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lds3z4","date":"1364685890","viewed":1051,"name":"Chocolate mountain","username":"Tim","description":"A night in the chocolate mountains. A glowing light levitates above the terrain. First self-made shader. I'm sure the code is a mess :)","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""}}