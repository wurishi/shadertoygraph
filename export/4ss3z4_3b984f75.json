{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"float time;\n\n// ******* Tools  ******* \n\nvec3 rotate(vec3 r, float v){ return vec3(r.x*cos(v)+r.z*sin(v),r.y,r.z*cos(v)-r.x*sin(v));}\n\nfloat box( vec3 p, vec3 b ){ \n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0)+length(max(d,0.0));\n}\n\nfloat sphere( vec3 p, float r ){\n    return r-length(p);\n}\n\nfloat rand2d(vec2 n){ \n  return fract(sin(dot(n,vec2(12.9898,4.1414))) * 43758.5453);\n}\n\nfloat noise2d(vec2 n){\n  vec2 b = floor(n);\n  vec2 f = smoothstep(vec2(0.0,0.0),vec2(1.0,1.0),fract(n));\n  return mix(mix(rand2d(b),rand2d(b+vec2(1.0,0.0)),f.x),mix(rand2d(b+vec2(0.0,1.0)),rand2d(b+vec2(1.0,1.0)),f.x),f.y);\n}\n\n// ******* Scene  ******* \n\nvec3 path(float t){\n\tt += 6.0;\n    return vec3(sin(t*-0.2)*200.0,sin(t*0.053)*300.0-470.0,sin(t*0.13)*400.0+3.2);\n}\n\nvec3 env(vec3 r){\n    return mix(vec3(0.05,0.08,0.15),vec3(0.41,0.45,0.45),pow(0.6+sin(r.y)*0.4,4.0));\n}\n\nfloat terrain(vec3 pos){ \n\n    pos = rotate(pos,time*0.01);\n    float  n1 = noise2d(pos.xz*0.1+pos.z*0.1);\n    float  p1 =  pos.y - 500.0;\n    float  s1 =  450.0 + pos.y + sin(pos.x*0.01)*30.0 - abs(pos.z*0.2) - n1*10.0;\n    \n    vec3 pp =   abs(pos) -120.0; \n         pp =   abs(pp)  -120.0; \n         pp =   abs(pp)  -120.0; \n           \n    float p2 = 8.0 - box(pp+vec3(0.0,0.0,30.0),   vec3(10.0,115.0,10.0)); \n    float p3 = 1.0 - box(pp+vec3(0.0,0.0,0.0),    vec3(110.0,3.0,115.0))-sin(n1*10.)*0.1; \n    float p4 = 1.0 - box(pp+vec3(0.0,0.0,30.0),   vec3(120.0,6.0,10.0));\n    float p5 = 1.0 - box(pp+vec3(-120.0,20.0,0.0),vec3(2.0,80.0,120.0));\n    float p6 = 1.0 - box(pp+vec3(0.0,20.0,-120.0),vec3(120.0,40.0,2.0));\n    float p7 = 1.0 - box(pp+vec3(70.0,0.0,-130.0),vec3(2.0,120.0,2.0));\n\n    float c1 = sphere(pos,300.0)+n1*10.0 -sin(pos.y*0.01)*10.0;\n    float c2 = sphere(pos+vec3(0.0,300.0+sin(time*0.3)*50.0,00.0),120.0)+n1*5.0*sin(time*2.0+pos.z*0.01);\n    \n    float s = min(max(min(min(max(max(max(max(max(max(p2,p3),p4),p1),p5),p6),p7),-c1),-c2-50.0),c2),s1);\n\n\treturn s;\n}\n\n\n// ******* Main  ******* \n\nfloat test = 0.0;\nfloat tran = 0.0;\nvec3  pos = vec3(0.0);\n\nvoid raymarch(vec3 p,vec3 r){\n    test = 0.0;\n    tran = 0.0;\n\tpos  = p;\n    for(int i=0;i<40;i++){\n        test  = terrain(pos); \n        pos  += r*test;\n        tran += test;\n        if(abs(test)<=0.01){ break; }\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n \n    time        = iTime*2.0;\n    float pulse\t= pow(max(sin(time*0.5),0.0)*0.98,50.0);\n\t\n\tvec2 uv     = fragCoord.xy/(iResolution.xx*0.5)-vec2(1.0,iResolution.y/iResolution.x);\n    vec3 ray1   = normalize(vec3(uv.x,uv.y,0.5));   \n    vec3 campos = path(time)+vec3(iMouse.x,-50.0+iMouse.y,500.0+sin(time*0.02)*400.0);\n    vec3 lightpos = path(time+0.5);\n    \n\t\n    // Surface\n    raymarch(campos + ray1*-10.0, ray1);\n    float test1 = test;\n    float tran1 = tran; \n    vec3  pos1  = pos;\n\n    // Shadow\n\tvec3  ray2   = normalize(pos1-lightpos);\n    raymarch(pos1+ray1,ray2);\n    float test2  = test;\n    float tran2  = tran; \n    vec3  pos2   = pos;\n    float dist   = distance(lightpos,pos1);\n\tfloat dist2  = distance(lightpos,campos);\n\n    // Normal\n    vec3  axe = vec3(0.1,0.0,0.0);\n    vec3  nor = normalize(vec3( test1-terrain(pos1-axe.xyy) , test1-terrain(pos1-axe.yxy) , test1-terrain(pos1-axe.yyx) ) ); \n    float ang = max(0.0,dot(nor,-ray1)); \n    \n    // Shade\n    float bkg = smoothstep(4000.0,0.0,distance(campos,pos1));    \n    float ocl = min(smoothstep(0.0,80.0,test1-terrain(pos1-nor*20.0)),pow(smoothstep(0.0,1000.0,test1-terrain(pos1-nor*200.0)),1.0))*bkg;  \n    float sha = smoothstep(-50.0,0.0,abs(tran2)-dist)*pow(smoothstep(2000.0+pulse*1000.0,0.0,dist),20.0)*bkg;    \n   \n\tfloat fog = noise2d(ray1.xy*3.0+campos.xz*0.001+vec2(0.0,-time*0.2));\n\tfloat mtr = noise2d(pos1.xz*0.5+pos1.y)*1.0;\n\t\n    float dif = smoothstep(0.0,1.0,ang)*sha; \n    float spc = smoothstep(0.8,1.0,ang)*sha; \n   \n    vec3  col  = mix(env(ray1)*0.3,(0.01+mtr*0.1+env(nor))*pow(ocl,0.6),bkg);\n          col += (vec3(1.70,1.65,1.60)+mtr*0.3)*dif;\n          col += (vec3(0.80,0.80,0.70)+mtr*0.3)*spc;\n    \n\t\n    // Fake some visible light\n\tfloat lightdist = smoothstep(200.0+pulse*400.0,0.0,length(cross(ray1,lightpos-campos)));\n    float lightdepth = smoothstep(10.0,-100.0,tran1+dist2); \n\tfloat l = pow(lightdist,20.0)*lightdepth;\n\t\t  l += fog*0.2*lightdist*lightdepth + fog*0.01;\n\t\n    fragColor = vec4(sqrt(col+l)-dot(uv,uv)*0.12,1.0);\n\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4ss3z4","date":"1364161661","viewed":3279,"name":"Shady Building","username":"ztri","description":"Playing with lights, shadows and a bit larger model","likes":48,"published":1,"flags":0,"usePreview":0,"tags":["shadows"],"hasliked":0,"parentid":"","parentname":""}}