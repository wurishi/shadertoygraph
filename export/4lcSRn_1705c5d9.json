{"ver":"0.1","info":{"id":"4lcSRn","date":"1477553718","viewed":6139,"name":"Cylinder - intersection","username":"iq","description":"Intersection of a ray and a generic (oriented in any direction) capped cylinder. See capsule here: [url]https://www.shadertoy.com/view/Xt3SzX[/url]","likes":25,"published":3,"flags":0,"usePreview":0,"tags":["3d","raycasting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2016 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Intersection of a ray and a capped cylinder oriented in an arbitrary direction\n//\n// List of ray-surface intersectors at https://www.shadertoy.com/playlist/l3dXRf\n//\n// and https://iquilezles.org/articles/intersectors\n//\n// Other cylinder functions:\n//   Cylinder intersection: https://www.shadertoy.com/view/4lcSRn\n//   Cylinder bounding box: https://www.shadertoy.com/view/MtcXRf\n//   Cylinder distance:     https://www.shadertoy.com/view/wdXGDr\n\n\nvec4 iCylinder( in vec3 ro, in vec3 rd, in vec3 pa, in vec3 pb, float ra ) \n{\n    vec3  ba = pb - pa;\n    vec3  oc = ro - pa;\n\n    float baba = dot(ba,ba);\n    float bard = dot(ba,rd);\n    float baoc = dot(ba,oc);\n    \n    float k2 = baba            - bard*bard;\n    float k1 = baba*dot(oc,rd) - baoc*bard;\n    float k0 = baba*dot(oc,oc) - baoc*baoc - ra*ra*baba;\n    \n    /*\n    // in case you really need to handle parallel raycasts\n    if( k2==0.0 )\n    {\n        float ta = -dot(ro-pa,ba)/bard;\n        float tb = ta + baba/bard;\n        \n        vec4 pt = (bard>0.0) ? vec4(pa,-ta) : vec4(pb,tb);\n        \n        vec3 q = ro + rd*abs(pt.w) - pt.xyz;\n        if( dot(q,q)>ra*ra ) return vec4(-1.0);\n        \n        return vec4( abs(pt.w), sign(pt.w)*ba/sqrt(baba) );\n    }\n    */\n    \n    float h = k1*k1 - k2*k0;\n    if( h<0.0 ) return vec4(-1.0);\n    h = sqrt(h);\n    float t = (-k1-h)/k2;\n\n    // body\n    float y = baoc + t*bard;\n    if( y>0.0 && y<baba ) return vec4( t, (oc+t*rd - ba*y/baba)/ra );\n    \n    // caps\n    t = ( ((y<0.0) ? 0.0 : baba) - baoc)/bard;\n    if( abs(k1+k2*t)<h ) return vec4( t, ba*sign(y)/sqrt(baba) );\n\n    return vec4(-1.0);\n}\n\n// cylinder normal at point p\nvec3 nCylinder( in vec3 p, in vec3 a, in vec3 b, in float ra )\n{\n    // body\n    vec3  pa = p - a;\n    vec3  ba = b - a;\n    float baba = dot(ba,ba);\n    float paba = dot(pa,ba);\n    return (pa - ba*paba/baba)/ra;\n}\n\n// same as above, but specialized to the Y axis\nvec4 iCylinderVertical( in vec3 ro, in vec3 rd, float he, float ra )\n{\n    float k2 = 1.0        - rd.y*rd.y;\n    float k1 = dot(ro,rd) - ro.y*rd.y;\n    float k0 = dot(ro,ro) - ro.y*ro.y - ra*ra;\n    \n    float h = k1*k1 - k2*k0;\n    if( h<0.0 ) return vec4(-1.0);\n    h = sqrt(h);\n    float t = (-k1-h)/k2;\n\n    // body\n    float y = ro.y + t*rd.y;\n    if( y>-he && y<he ) return vec4( t, (ro + t*rd - vec3(0.0,y,0.0))/ra );\n    \n    // caps\n    t = ( ((y<0.0)?-he:he) - ro.y)/rd.y;\n    if( abs(k1+k2*t)<h ) return vec4( t, vec3(0.0,sign(y),0.0) );\n\n    return vec4(-1.0);\n}\n\nvec3 pattern( in vec2 uv )\n{\n    vec3 col = vec3(0.6);\n    col += 0.4*smoothstep(-0.01,0.01,cos(uv.x*0.5)*cos(uv.y*0.5)); \n    col *= smoothstep(-1.0,-0.98,cos(uv.x))*smoothstep(-1.0,-0.98,cos(uv.y));\n    return col;\n}\n\n#define AA 3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // camera movement\t\n\tfloat an = 0.5*iTime;\n\tvec3 ro = vec3( 1.0*cos(an), 0.4, 1.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        const vec3  capA = vec3(-0.3,-0.1,-0.1);\n        const vec3  capB = vec3(0.3,0.1,0.4);\n        const float capR = 0.2;\n        \n\t    vec3 col = vec3(0.08)*(1.0-0.3*length(p)) + 0.02*rd.y;\n\n        vec4 tnor = iCylinder( ro, rd, capA, capB, capR );\n        if( tnor.x>0.0 )\n        {\n            float t = tnor.x;\n            vec3  pos = ro + t*rd;\n            vec3  nor = tnor.yzw;\n            vec3  lig = normalize(vec3(0.7,0.6,0.3));\n            vec3  hal = normalize(-rd+lig);\n            float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n            float amb = clamp( 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0)), 0.0, 1.0 );\n            float occ = 0.5 + 0.5*nor.y;\n\n            vec3 w = normalize(capB-capA);\n            vec3 u = normalize(cross(w,vec3(0,0,1)));\n            vec3 v = normalize(cross(u,w) );\n            vec3 q = (pos-capA)*mat3(u,v,w);\n            col = pattern( vec2(12.0,64.0)*vec2(atan(q.y,q.x),q.z) );\n\n\n            col *= vec3(0.2,0.3,0.4)*amb*occ + vec3(1.0,0.9,0.7)*dif;\n            col += 0.4*pow(clamp(dot(hal,nor),0.0,1.0),12.0)*dif;\n        }\n\n        col = sqrt( col );\n\t\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n    // dither to remove banding in the background\n    tot += fract(sin(fragCoord.x*vec3(13,1,11)+fragCoord.y*vec3(1,7,5))*158.391832)/255.0;\n\n\n    fragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}