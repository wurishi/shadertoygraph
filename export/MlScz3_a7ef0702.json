{"ver":"0.1","info":{"id":"MlScz3","date":"1509485467","viewed":332,"name":"MPEG encoding fail","username":"dascandy","description":"Simulating a form of MPEG data stream corruption in the image","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["mpegblockrangeerasure"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"uniform sampler2D tex;\nconst mat3 yuv2rgb = mat3(1.0, 0.0, 1.28033, 1.0, -0.21482, -0.38059, 1.0, 2.12798, 0.0);\nconst mat3 rgb2yuv = mat3(0.2126, 0.7152, 0.0722, -0.09991, -0.33609, 0.43600, 0.615, -0.5586, -0.05639);\n\nvec3 coord2xyz(vec2 coord, int size) {\n    vec2 uv = vec2(ivec2(vec2(coord.x, iResolution.y - coord.y) / (vec2(size, size))));\n    int block = int(uv.y * iResolution.x / float(size) + uv.x);\n    vec2 fragCoordY = mod(coord,vec2(size, size));\n    return vec3(fragCoordY, block);\n}\n\nvec2 xyz2coord(vec3 xyz, int size, bool flip) {\n    int block = int(xyz.z);\n    int width = int(iResolution.x) / size;\n    vec2 fullC = vec2(size, size)*vec2(block % width, block / width);\n    if (flip)\n\t    return vec2(fullC.x + xyz.x, iResolution.y - fullC.y - xyz.y);\n    else\n\t    return vec2(fullC.x + xyz.x, fullC.y + xyz.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float terminateAt = 10000.0 * fract(sin(iTime*42.54));\n    bool flip = (fract(sin(iTime * 29.977)) < 0.21);\n    if (terminateAt < 10000.0-40.0*iTime) {\n        fragColor = vec4(texture(tex, fragCoord.xy / iResolution.xy));\n    } else {\n        float firstBlockY = (4000.0 * fract(sin(iTime*77.54))), \n            lastBlockY = (4000.0 * fract(sin(iTime*26.54)));\n        float firstBlockU = (1000.0 * fract(sin(iTime*44.54))), \n            lastBlockU = (1000.0 * fract(sin(iTime*41.54)));\n        float firstBlockV = (1000.0 * fract(sin(iTime*47.54))), \n            lastBlockV = (1000.0 * fract(sin(iTime*14.54)));\n\n        vec3 uv_y = coord2xyz(fragCoord, 8);\n        vec3 uv_u = coord2xyz(fragCoord, 16);\n        vec3 uv_v = coord2xyz(fragCoord, 16);\n        for (int n = 0; n < int(iTime/10.0); n++) {\n            float deletionS = 4000.0 * fract(sin(iTime*(22.54+float(n))));\n            float deletionL = 30.0 * fract(sin(iTime*(28.56+float(n))));\n            if (uv_y.z > deletionS) {\n                uv_y.z += deletionL;\n            }\n        }\n        for (int n = 0; n < int(iTime/10.0); n++) {\n            float deletionS = 4000.0 * fract(sin(iTime*(12.54+float(n))));\n            float deletionL = 30.0 * fract(sin(iTime*(24.56+float(n))));\n            if (uv_u.z > deletionS) {\n                uv_u.z += deletionL;\n            }\n        }\n        for (int n = 0; n < int(iTime/10.0); n++) {\n            float deletionS = 4000.0 * fract(sin(iTime*(23.54+float(n))));\n            float deletionL = 30.0 * fract(sin(iTime*(20.56+float(n))));\n            if (uv_v.z > deletionS) {\n                uv_v.z += deletionL;\n            }\n        }\n        vec2 uvY = xyz2coord(uv_y, 8, flip) / iResolution.xy;\n        vec2 uvU = xyz2coord(uv_u, 16, flip) / iResolution.xy;\n        vec2 uvV = xyz2coord(uv_v, 16, flip) / iResolution.xy;\n        vec3 col = rgb2yuv * vec3(texture(tex, uvY).x, texture(tex, uvU).y, texture(tex, uvV).z);\n        if (uv_y.z >= firstBlockY && uv_y.z <= lastBlockY) col.r = 0.0;\n        if (uv_u.z >= firstBlockU && uv_u.z <= lastBlockU) col.g = 0.0;\n        if (uv_v.z >= firstBlockV && uv_v.z <= lastBlockV) col.b = 0.0;\n        if (uv_y.z > terminateAt) col = vec3(0,0,0);\n        fragColor = vec4(yuv2rgb * col, 1);\n    }\n}","name":"Image","description":"","type":"image"}]}