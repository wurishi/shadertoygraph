{"ver":"0.1","info":{"id":"XdcSzs","date":"1460761949","viewed":188,"name":"ChessField","username":"greg_o","description":"Chess field shader","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["chessfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 calcColor(vec3 ambient, vec3 view, vec3 normal, vec3 light,float lightintensity){\nambient *= 0.2;\n\nvec3 nview = normalize(view);\nvec3 nnormal = normalize(normal);\nvec3 nlight = normalize(light);\nvec3 nhalf = normalize(nview+nlight);\nvec3 reflected = reflect(nnormal*-1.0,nlight);\n\t\nreturn ambient+(max(dot(nnormal,nlight),0.0)*0.6+0.3*pow(max(dot(reflected,nview),0.0),2.0))*lightintensity;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy) * 1.0 + vec2(-0.5, -0.5);\n\n    vec3 chessBlack= vec3(0.2, 0.23, 0.3); \n    vec3 chessWhite = vec3(0.93, 0.9, 0.98); \n    vec3 pixel; \n    \n    \n    if(uv.y > -0.1){\n    \tpixel = vec3(smoothstep(-0.1, 1., uv.y))*0.2+ 0.8;\n    }\n    else{\n    \n        float de = 0.5;\n        float scale = 0.4;\n        float speed = 0.1;\n        vec2 textCoord = vec2( uv.x / uv.y , de/uv.y) * scale - vec2(0.0, (iTime * speed));\n        float cube = sign((mod(textCoord.x,0.1) - 0.05) * (mod(textCoord.y,0.1) - 0.05));\n        if(0.0 < cube) {\n        pixel = chessBlack; \n        } else{ \n        pixel = chessWhite; \n        }\n        vec3 nd = vec3(0.,0.,0.);\n        if(abs(cube) < 0.1){\n        \tnd + vec3(1.0,1.0, 1.0);\n        }\n        pixel = calcColor(pixel, vec3(textCoord.x, -1.0, textCoord.y) + nd, vec3(0.0 + (uv.x / uv.y)*2.0 ,1.0,0.0), vec3(0.0, 1.53, 2.0- (iTime * speed)) , length(textCoord)/3. );\n\t\t\n    }\n    \n    fragColor = vec4(vec3(pixel), 1.0); \n}","name":"Image","description":"","type":"image"}]}