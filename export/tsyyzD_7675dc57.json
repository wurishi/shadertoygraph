{"ver":"0.1","info":{"id":"tsyyzD","date":"1602319768","viewed":446,"name":"parallel sort / histogram 2","username":"FabriceNeyret2","description":"2020 int-based version of [url]https://www.shadertoy.com/view/4dd3Wj[/url]\nAt each frame  pixels are randomly paired (using pairPos = xor( Pos, f(T) )  )\nPixels in each pair are swapped if not in expected (luminance) order.  Sort of // random bubble sort.","likes":9,"published":3,"flags":32,"usePreview":0,"tags":["sorting","histogram","parallel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2020 int-base version of my 2016 https://shadertoy.com/view/4dd3Wj ( 677 chars )\n\nvoid mainImage(out vec4 O, vec2 U) { O = T(U); }","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float R = 256.;  // sort array RxR\n\n#define id(I)   ( I.x + int(R) * I.y )\n#define hash(t)   ivec2( t*7177 +103  , t*1151 +151  ) % int(R)\n//#define hash(t) ivec2( t*1.73 +103.7, t*11.4 +51.8 ) % int(R)\n\nvoid mainImage( out vec4 O,  vec2 U )\n{   \n    if (iResolution.y < R) R /= 2.;                       // for icon resolution\n    int t = iFrame%512;\n    if (t==10 ) { O = texture(iChannel1, U/R).rrrr; return; } // init with texture to sort\n    if (t==266) { O = texture(iChannel2, U/R);      return; }\n       \n    O =  T(U);                                            // restore state\n    if ( max(U.x,U.y) > R ) return;                       // treat only array RxR\n    \n    ivec2 I = ivec2(U),\n          S = I ^ hash(t);                                // dual location\n    vec4 OS = T(S);                                       // its pixel value\n    if ( dot(OS,OS) < dot(O,O) == id(S) < id(I) ) O = OS; // swap if bad ordered\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define T(U) texelFetch( iChannel0, ivec2(U), 0 )","name":"Common","description":"","type":"common"}]}