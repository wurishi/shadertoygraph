{"ver":"0.1","info":{"id":"7dtyDj","date":"1654099239","viewed":306,"name":"Optimized Rainbow Fire","username":"__mk_km__","description":"Pulls 21-23 fps on my laptop with integrated graphics. Needed to optimize it, since I wanted to use raymarching to make this 3D\nAlso rainbow, cuz why not ","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["fire","rainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on '301's Fire Shader - Remix 3' : https://www.shadertoy.com/view/4ttGWM\n\n// Noise optimized using code from:\n// https://github.com/ashima/webgl-noise/blob/3e2528debc5e5e51a35bf154e7d27c8f98078f8a/src/classicnoise2D.glsl\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+10.0)*x);\n}\n\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n), f = fract(n);//smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    \n    vec4 p = mod289(b.xyxy + vec4(0,0,1,1));\n    vec4 v = permute(permute(p.xzxz) + p.yyww) / 289.0;\n    return mix(mix(v.x, v.y, f.x), mix(v.z, v.w, f.x), f.y);\n}\n\nfloat fbm(vec2 n) {\n    float total = 0.0, amplitude = 1.0;\n    for (int i = 0; i < 5; i++) {\n        // float val = 0.5 * cnoise(n) + 0.5;\n        float val = noise(n);\n        total += val * amplitude;\n        n += n*1.7;\n        amplitude *= 0.47;\n    }\n    return total / 1.84351981;\n}\n\n// Found on https://gist.github.com/983/e170a24ae8eba2cd174f\n// Original: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 speed = vec2(0.1, 0.9);\n    float shift = 1.327+sin(iTime*2.0)/2.4;\n    float alpha = 1.0;\n    \n\tfloat dist = 3.5-sin(iTime*0.4)/1.89;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = fragCoord.xy * dist / iResolution.xx;\n    p += sin(p.yx*4.0+vec2(.2,-.3)*iTime)*0.04;\n    p += sin(p.yx*8.0+vec2(.6,+.1)*iTime)*0.01;\n    \n    //p.x -= iTime/1.1;\n    float distort1 = fbm(p - iTime * 0.3+1.0*sin(iTime+0.5)/2.0);\n    float distort2 = fbm(p - iTime * 0.9 - 10.0*cos(iTime)/15.0);\n    float distort3 = fbm(p - iTime * 1.4 - 20.0*sin(iTime)/14.0);\n    float distort = (distort1 - 2.0 * distort2 + 0.6 * distort3) / 3.8;\n    \n    float fire = fbm(p + distort - iTime * speed.y);\n    fire *= clamp(0.7-0.4*p.y, 0.0, 1.0);\n    fire *= 4.5;\n    \n    float highlights = 0.4*pow(max(0.0, fire - 0.3), 8.0);\n    float lowlights = 0.3*pow(fire, 2.0);\n    \n    float hue = fract(0.41*(p.x + distort) + 0.23);\n    vec3 color = hsv2rgb(vec3(hue, 0.9, 0.9));\n    color *= highlights + lowlights;\n    color /= 1.0 + max(vec3(0), color);\n    fragColor = vec4(color, alpha);\n}","name":"Image","description":"","type":"image"}]}