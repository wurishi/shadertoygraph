{"ver":"0.1","info":{"id":"wlGGRy","date":"1579194549","viewed":512,"name":"Simple Perspective Grid","username":"izutionix","description":" ","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["grid","perspective"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float d = 1./abs(uv.y); //depth\n    vec2 pv = vec2(uv.x*d, d); //perspective\n    pv.y += iTime; //offset\n    pv *= 2.; //scale\n    \n#if 0\n    // my anti-aliasing attempt\n    pv = abs((fract(pv)-.5)*2.); //grid vector\n    float b = 10./iResolution.y*d; //blur\n    float t = .02; //thickness\n    float g = 1.-smoothstep(t-b,t+b,pv.x)*smoothstep(t-b,t+b,pv.y); //grid\n    \n    vec3 col = vec3(g/d);\n#else\n    // better version by iq:\n    // https://iquilezles.org/articles/filterableprocedurals\n    pv += 0.5;\n    const float N = 64.0;\n    vec2 w = fwidth(pv) + 0.001;\n    vec2 a = pv + 0.5*w;\n    vec2 b = pv - 0.5*w;\n    vec2 i = (floor(a)+min(fract(a)*N,1.0)-floor(b)-min(fract(b)*N,1.0))/(N*w);\n    float g = i.x + i.y - i.x*i.y;\n    \n\tvec3 col = vec3(g);\n#endif    \n\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}