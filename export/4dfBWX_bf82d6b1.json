{"ver":"0.1","info":{"id":"4dfBWX","date":"1498351516","viewed":630,"name":"Bipolar_FBM","username":"duvengar","description":"The idea was to mix two fbm patterns together and see what happens. Use of mouse for variations.\n(Uncomment line 67 and comment line 65  for symmetry) ","likes":31,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//// COLORS ////\nconst vec3 ORANGE = vec3(1.0, 0.6, 0.2);\n \nconst vec3 BLUE   = vec3(0.2, 0.6, 0.6);\nconst vec3 BLACK  = vec3(0.1, 0.0, 0.1);\n\n///// MATHS /////\nconst float PI = 3.14;\n\nvec2 maplinear ( in vec2 x, in vec2 a1, in vec2 a2, in vec2 b1, in vec2 b2 ) {\n    return b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n}\n\n///// NOISE /////\nfloat hash( float n ) {\n    return fract(sin(n)*43758.5453123);   \n}\n\nfloat noise( in vec2 x ){\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f * f * (3.0 - 2.0 * f);\n    float n = p.x + p.y * 57.0;\n    return mix(mix( hash(n + 0.0), hash(n + 1.0), f.x), mix(hash(n + 57.0), hash(n + 58.0), f.x), f.y);\n}\n\n////// FBM ////// \nmat2 m = mat2( 0.6, 0.6, -0.6, 0.8);\nfloat fbm0(vec2 p){\n \n   \n    \n    float f = 0.0;\n    f += 0.5000 * noise(p); p *= m * 2.02;\n    f += 0.2500 * noise(p); p *= m * 2.03;\n    f += 0.1250 * noise(p); p *= m * 2.01;\n    f += 0.0625 * noise(p); \n    f /= 0.9375;\n \n    return f;\n}\n\n\nfloat fbm(vec2 p){\n \n    \n    int layers = 4;\n    float persistance = .5;\n    float strength = .5;\n    float cstrength = .0;\n    float n = .0;\n    float offset = .01;\n    float amplitude = 2.03;\n    \n    \n    for(int i = 0; i< layers; i++){\n        \n    \tn += strength * noise(p);\n    \tp *= m*amplitude;\n        cstrength += strength;\n        strength *= persistance;\n        amplitude -= offset;\n    \n    }\n    \n     n /= cstrength;\n    \n    return n;\n   \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    \n    // pixel ratio  \n\tvec2 uv = fragCoord.xy / iResolution.xy;  \n    vec2 p = - 1. + 2. * uv;  \n    p.x *= iResolution.x / iResolution.y ;\n  \t\n    // 2 Fbm origins\n    vec2  ctr  = vec2( 1.0, 0.0);\n    vec2  ctr2 = vec2(-1.0, 0.0);  \n    \n    // MOUSE\n    vec2 m = maplinear(iMouse.xy,\n                       vec2(0.0),\n                       vec2(iResolution.x, iResolution.y),\n                       vec2(1.5, -PI),\n                       vec2(7.0, 0.));\n        \n    // domains\n    float rad  = sqrt(dot(p, p)); \n    float r    = sqrt(dot(p + ctr, p + ctr)) + m.y; \n    float r2   = sqrt(dot(p + ctr2, p + ctr2))+ m.y;  \n    float a = r * r2;\n                    \n    // distortions      \n    a *= fbm(m.x * p);\n    // with symmetry\n    //a *= fbm(m.x * sqrt(p*p));\n    a -= iDate.w * 0.3 ;\n\n    // colorize\n    vec3 col = BLACK;\n    float f = smoothstep(0.1, 0.9, fbm(vec2(a * 20.0, r * r2)));  \n    col =  mix( col, BLUE, f); \n    f = smoothstep(0.4, 0.9, fbm(vec2(a * 2.0 , r * r2)));  \n    col =  mix( col, ORANGE, f );\n    f = smoothstep(0.3, 0.9, fbm(vec2(a * 50.0, r * r2)));  \n    col *=  1.8 - f ; \n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}