{"ver":"0.1","info":{"id":"3lGfz1","date":"1614199458","viewed":110,"name":"Circle Inverted Koch Snowflake","username":"oneshade","description":"Cool result of circle inverting a koch snowflake.","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["snowflake","inverted","koch","circleinversion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R120 2.09439510239\n#define R150 2.61799387799\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    float r = 0.3;\n    uv = uv * r * r / dot(uv, uv); // Circle inversion\n\n    uv *= 1.25;\n    uv.x = abs(uv.x);\n    uv.y -= 0.28867513459;\n\n    vec2 n = vec2(sin(R150), cos(R150));\n    uv -= n * max(0.0, dot(uv - vec2(0.5, 0.0), n)) * 2.0;\n\n    n = vec2(sin(R120), cos(R120));\n    float scale = 1.0;\n    uv.x += 0.5;\n\n    int iters = int(iTime) % 10;\n    for (int i=0; i < iters; i++) {\n        uv *= 3.0;\n        scale *= 3.0;\n        uv.x -= 1.5;\n\n        uv.x = abs(uv.x);\n        uv.x -= 0.5;\n        uv -= n * min(0.0, dot(uv, n)) * 2.0;\n    }\n\n    float line = length(uv - vec2(clamp(uv.x, -1.0, 1.0), 0.0)) * sign(uv.y) / scale;\n    color += smoothstep(unit, 0.0, line);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}