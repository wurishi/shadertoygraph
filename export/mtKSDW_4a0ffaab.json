{"ver":"0.1","info":{"id":"mtKSDW","date":"1686108252","viewed":52,"name":"Golden Ration Colors Palette","username":"Dettamada","description":"The golden ratio palette is a color scheme used for web design. It uses the golden ratio number to generate a limited set of 10 colors values for each RGB channel. This creates a balanced combination of colos that are easy to work with.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["palette","goldenratio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int nChannels = 3;\nconst int nColors = 10;\nconst float[nColors] grc = float[nColors] (0.0, 14.0, 37.0, 60.0, 97.0, 158.0, 195.0, 218.0, 241.0, 255.0); // Golden Ratio Colors\n\n\nint argmin(float[nColors] v) \n{\n    int minIndex = 0;\n    float minValue = v[0];\n    \n    for (int i = 1; i < nColors; i++)\n    {\n        if (v[i] < minValue)\n        {\n            minIndex = i;\n            minValue = v[i];\n        }\n    }\n    \n    return minIndex;\n}\n\nfloat[nColors] get_dists(float x)\n{\n    float[nColors] dist;\n    for (int i = 0; i < nColors; i++)\n    {\n        dist[i] = abs(grc[i]/255. - x);\n\n    }\n    \n    return dist;\n}\n\nvec3 get_golden(vec3 pixel)\n{\n    vec3 minDist = vec3(1.);\n    vec3 minNumb;\n    \n    for (int i = 0; i < nChannels; i++)\n    {   \n        minNumb[i] = grc[argmin(get_dists(pixel[i]))];\n    }\n    \n    return minNumb / 255.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float PI = 3.141592;\n\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n\n    float weight = clamp(1. + 2.*sin(PI * iTime/2.), 0., 1.);\n    vec3 pixel = weight*get_golden(col.rgb) + (1.-weight)*col.rgb;\n\n    fragColor = vec4(pixel, 1.0);\n}","name":"Image","description":"","type":"image"}]}