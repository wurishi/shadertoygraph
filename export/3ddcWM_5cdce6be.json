{"ver":"0.1","info":{"id":"3ddcWM","date":"1601038364","viewed":61,"name":"chroma tunnel","username":"nexor","description":".","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","tunnel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = acos(-1.);\nconst float pi2 = pi*2.;\n\nfloat fcos(float x)\n{\n    float w = fwidth(x);\n \treturn cos(x) *smoothstep(pi2,0.0,w);   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n    // Normalized pixel coordinates (from 0 to 1)\n    float m = iTime*.12;\n    float c=cos(m),s=sin(m);\n    mat2 rot = mat2(c,-s,s,c);\n    \n    for(int i=0;i<3;++i)\n    {\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.x;\n        \n\tfloat angle = atan(uv.y,uv.x);\n    vec2 offset = vec2(cos(angle),sin(angle))*length(uv)*float(i)*5.;\n        \n    float n = iTime*.2;    \n    //offset += vec2(cos(n*5.),sin(n*7.))*50.;\n        \n    uv = (fragCoord+offset-.5*iResolution.xy)/iResolution.x;\n        \n    uv *= rot;\n    float d = 1e3;\n    \n    float a = atan(uv.y,uv.x);\n    \n\t//float t = mix(.5,5.,pow(fcos(iTime*3.)*.5+.5,5.));\n        \n        \n    uv = .35*uv/dot(uv,uv);\n    float k = length(uv);\n//    k = floor(length(uv))/k;\n    \n    \n    d = cos(a*15.+k*25.+fcos(k*pi2+k*iTime*.2));\n    \n    d = smoothstep(1.-fwidth(length(uv)),.0,abs(d)-.1);\n    d = abs(d)*(2.-.1*k);\n    col[i] += d-.5;\n        \n    }\n    \n    col = col;\n    \n    col = pow(col,vec3(1./2.2));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}