{"ver":"0.1","info":{"id":"wtcBRN","date":"1612324450","viewed":180,"name":"A Pie Chart","username":"ivomontigatti","description":"a pie chart","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["chart","pie"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float HPI = 1.5707963269;\nfloat PI = 3.1415926538;\nfloat PI2 = 6.2831853076;\nfloat radius = 0.4;\nfloat innerRadius = 0.25;\n\nfloat ratios[5] = float[5](0.2, 0.3, 0.6, 0.9, 1.0);\nvec4 colors[5] = vec4[5](\n    vec4(0.17254, 0.24313, 0.254901, 1.0),\n    vec4(0.94901, 0.18823, 0.25490, 1.0),\n    vec4(0.5490, 0.14901, 0.22352, 1.0),\n    vec4(0.4705, 0.7490, 0.69803, 1.0),\n    vec4(0.94901, 0.0745, 0.0745, 1.0));\n    \nfloat nsin(float t, float from, float to){\n    return ((sin(t) + 1.0) / 2.0) * (to - from) + from;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x / iResolution.y;\n    float u = ((fragCoord.x - iResolution.x * 0.5) / iResolution.x) * aspect;\n    float v = ((fragCoord.y - iResolution.y * 0.5) / iResolution.y);\n    vec2 uv = vec2(u, v);\n    vec2 nuv = normalize(uv);\n    vec2 up = normalize(vec2(radius, 0.0));\n    float l = length(uv);\n    float _dot = up.x*nuv.x + up.y*nuv.y;\n    float _det = up.x*nuv.y - up.y*nuv.x;\n    float angle = atan(_dot, _det);\n    if(angle < 0.0) angle = PI + (PI + angle);\n    angle /= PI2 * nsin(iTime, 0.0, 1.0);\n    \n    fragColor = vec4(1.0);\n    if(l < radius && l > innerRadius){\n        for(int i = 0; i < 5; i+=1) {\n            float r = ratios[i];\n            if(angle < r) {\n                vec4 color = colors[i];\n                fragColor = color;\n                break;\n            }\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}