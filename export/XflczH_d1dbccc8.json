{"ver":"0.1","info":{"id":"XflczH","date":"1720848060","viewed":37,"name":"Read/write to a single pixel","username":"unravelwinter","description":"Draw a single pixel, and read the color of that pixel in the next frame. An easy reference for uv to pixel coordinates conversion.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["example","texture","reference","buffer","channels","ichannel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // Normalized pixel coordinates (from 0 to 1)\n   vec2 uv = fragCoord/iResolution.xy;\n   \n   // Display all pixels from Buffer A, as is.\n   fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 uvToPixelCoords(vec2 uv) {\n\treturn vec2(floor(uv * iResolution.xy));\n}\n\nvec2 pixelCoordsToUV(vec2 pixelCoords) {\n\treturn (pixelCoords + 0.5) / iResolution.xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;    \n    vec2 pixelCoord = uvToPixelCoords(uv); // Current pixel\n\n\tvec2 POS = vec2(30.0, 30.0); \n\t \n    // Draw an aqua pixel at (30, 30)\n\tif (pixelCoord.x == POS.x && pixelCoord.y == POS.y) {\n\t\tfragColor = vec4(0.1, 0.6, 0.4, 0.2);\n\t}\n\t\n    else {\n\t\tvec2 uvToRead = pixelCoordsToUV(POS);\n        \n        // Read the aqua pixel at (30, 30). These are the same\n\t    vec4 pixelColor = texture(iChannel0, uvToRead); //\n\t    //vec4 pixelColor = textureLod(iChannel0, uvToRead, 0.0);\n\t    //vec4 pixelColor = texelFetch(iChannel0, ivec2(POS), 0);\n\n\t\t// Copy the color of that pixel onto the line \"y = 100\"\n        // Note that regardless of what alpha is on line 18, this line looks the same.\n\t\tif (abs(float(pixelCoord.y) - 100.0) < 4.0) { \n\t\t\tfragColor = pixelColor;\n\n\t\t// However, we can use the alpha to color the blue line \"y = 200\".\n\t\t} else if (abs(float(pixelCoord.y) - 200.0) < 4.0) { \n\t\t\tfragColor = vec4(0., 0., pixelColor.a, 1.0);\t\t\t\n\t\t}\n\t} \n}","name":"Buffer A","description":"","type":"buffer"}]}