{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 c = 2.0 * fragCoord.xy / min(iResolution.x, iResolution.y);\n\tc -= 2.0 * iResolution.xy / max(iResolution.x, iResolution.y);\n\t\n\tvec3 len = vec3(0.0,0.0,0.0);\n\tvec2 dir = vec2(0.0, 0.0);\n\tvec2 curr = vec2(0.0,0.0);\n\tvec2 prev = curr;\n\tbool iterate = true;\n\n\tfor(int i=0; i<64; i++){\n\t\tif(iterate) {\n\t\t\tcurr.x = prev.x*prev.x - prev.y*prev.y;\n\t\t\tcurr.y = 2.0 * prev.x * prev.y;\n\t\t\tcurr += c;\n\t\t\t\n\t\t\tvec2 tmp = curr - prev;\n\t\t\tlen += vec3(abs(tmp), sqrt(dot(tmp,tmp)));\n\t\t\tdir += tmp;\n\t\n\t\t\tif(dot(curr,curr) >= 4.0) iterate = false;\n\t\t\t\n\t\t\tprev = curr;\n\t\t}\n\t}\n\t\n\tfloat gtx = 0.1 + 0.1*cos(0.5*iTime + atan(c.y,c.x));\n\tfloat gty = 0.1 + 0.1*sin(0.5*iTime + atan(c.y,c.x));\n\tfloat angle = atan(dir.y,dir.x);\n\tangle += 0.5*iTime;\n\t\n\tvec3 col = len * vec3(gtx, gty, 0.05);\n\tclamp(col, 0.0, 1.0);\n\t//determine quadrant\n\tvec2 test = vec2(sin(angle),cos(angle));\n\tif(test.x > 0.0 && test.y < 0.0) col.x = 1.0 - col.x;\n\tif(test.x > 0.0 && test.y > 0.0) col.y = 1.0 - col.y;\n\tif(test.x < 0.0 && test.y < 0.0) col.z = 1.0 - col.z;\n\t\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sfSRS","date":"1402849805","viewed":216,"name":"Mandelbrot kaleidoscope","username":"phtolo","description":"Colors from the cycling quadrant where the real and imaginary parts are heading.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""}}