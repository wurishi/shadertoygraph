{"ver":"0.1","info":{"id":"4lKfRd","date":"1543631464","viewed":655,"name":"Persistent State Demo","username":"foodini","description":"(Again, I largely do these so I have a quick-reference for my own later work.)\n\nA way to do expensive computations only once & make available to all pixels. Also, a way to accumulate that state from one frame to the next.","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["persistence","persistent"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Each pixel in BufA/iChannel0 has 3 floats that I'm abusing to store\n//state. At the end of each rendering of BufA, I've stored values in a\n//number of pixels in iChannel0 (well, only one pixel for this demo, but\n//you get the point.) When the Image rendering gets its turn, it can\n//read out these values and apply them to.... whatever.\n\n//The \"indices\" are offset by 0.5 because I want to be looking at the\n//middle of the pixel. This is just in case I forget to change the filter\n//on iChannel0 to \"nearest.\" (You should do that, by the way.)\n\n//In this case, the rendering in BufA pulls the last stored state from\n//iChannel0, checks to see if the mouse was clicked in the last frame and\n//whether it's clicked now. If the mouse button has gone down in this\n//frame, we increment mouse_state.x by 1.0. Here, we just render the window\n//at an intensity of sin(mouse_state.x^2).\n\nfloat CLICKS = 0.5;\nfloat _MAX_INDEX = 0.5;\n\nvec3 get_vec_val(float index) {\n\tvec2 uv = vec2(index / iResolution.x, 0.5/iResolution.y);\n    return texture(iChannel0, uv).xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 click_state = get_vec_val(CLICKS);\n    \n    float intensity = sin(click_state.x);\n    intensity *= intensity;\n    \n   \tfragColor = vec4(vec3(intensity), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float CLICKS = 0.5;\nfloat _MAX_INDEX = 0.5;\n\nbool persisting_coord(vec2 fragCoord) {\n    if(fragCoord.x <= _MAX_INDEX && fragCoord.y == 0.5)\n        return true;\n    return false;\n}\n\nvec3 get_vec_val(float index) {\n\tvec2 uv = vec2(index / iResolution.x, 0.5/iResolution.y);\n    return texture(iChannel0, uv).xyz;\n}\n\nbool set_vec_val(float index, vec2 fragCoord, vec3 val, out vec4 col) {\n    if(fragCoord == vec2(index, 0.5)) {\n        col = vec4(val, 1.0);\n    \treturn true;\n    } \n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //we return early to avoid doing any work on non-indexed pixels.\n    if(!persisting_coord(fragCoord))\n        return;\n    \n    vec3 click_state;\n    if(iFrame == 0) {\n        click_state = vec3(0., 0., 0.);\n    } else {\n        //get the previous value...\n    \tclick_state = get_vec_val(CLICKS);\n    }\n    \n    //click_state.x is the number of unique clicks.\n    //click_state.y is whether we were clicked the last frame.\n    if(click_state.y > 0.0 && iMouse.z < 0.0)\n        click_state.x += 1.;\n    \n    click_state.y = iMouse.z;\n    \n    //make sure that this pixel sets its output color to the values that\n    //should be stored there. If I had more than one participating\n    //pixel, I'd do something like:\n    //if (set_vec_val(THING_ONE, fragCoord, thing_one, fragColor))\n    //    return;\n    //if (set_vec_val(THING_TWO, fragCoord, thing_two, fragColor))\n    //    return;\n    //if (set_vec_val(THING_THREE, fragCoord, thing_three, fragColor))\n    //    return;\n    \n    set_vec_val(CLICKS, fragCoord, click_state, fragColor);\n}","name":"Buf A","description":"","type":"buffer"}]}