{"ver":"0.1","info":{"id":"XlSyRt","date":"1509647746","viewed":90,"name":"ray casting spheres","username":"0e4ef622","description":"Use the mouse to move the shiny ball around.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raycasting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 endp1 = vec3(0.0, 0.0, 1.0);\nvec3 endp2 = vec3(0.0, 1.0, 1.0);\nfloat radius = 1.0;\nfloat aspect; // = iResolution.x / iResolution.y;\nvec3 campos = vec3(0.0, 0.0, -1.0);\nvec3 camdir = vec3(0.0, 0.0, 1.0);\nfloat fov = 40.0;\nconst float PI = 3.141592653589793238;\nvec3 da_sun = vec3(-1.0, -1.0, 0.6);\nconst vec4 skie = vec4(135.0/255.0, 206.0/255.0, 235.0/255.0, 1.0);\nconst vec4 ambient = vec4(0.2, 0.2, 0.2, 1.0) * skie;\n\nstruct Ray {\n    vec3 pos;\n    vec3 dir;\n};\n\nvec4 lighting(in vec4 color, in vec3 normal) {\n    float diffuse = max(dot(-da_sun, normal), 0.0);\n    return color * (ambient + diffuse);\n}\n\nvoid sphere(in Ray ray, in vec3 p, in float r, in vec4 color, inout vec4 fragColor, inout float depth) {\n    vec3 yaymath = ray.pos - p;\n    float somemath = dot(ray.dir, yaymath);\n    float somemoremath = length(yaymath);\n    float lolmath = somemath*somemath - somemoremath*somemoremath + r*r;\n    float test = step(0.0, lolmath) * step(0.0, dot(ray.dir, -yaymath));\n    float hooraymath = sqrt(lolmath);\n    float d = min(-somemath + hooraymath, -somemath - hooraymath);\n    test *= step(d, depth); //d < depth;\n    vec3 intersect = ray.pos + ray.dir * d;\n    vec3 normal = normalize(intersect - p);\n\n    fragColor = lighting(color, normal) * vec4(test) + vec4(1.0-test) * fragColor;\n    depth = min(d, depth);\n}\n\nvec4 ccolor(Ray ray) {\n    float depth = 999.0;\n    float a = iTime;\n    float c = .5*cos(a);\n    float s = .5*sin(a);\n    vec4 p1 = vec4(-c, 0.0, s, 1.0);\n    vec4 p2 = vec4( c, 0.0, -s, 1.0);\n    mat4 test = mat4(1.0, 0.0, 0.0, 0.0,\n                     0.0, 0.0, -1.0, 0.0,\n                     0.0, 1.0, 0.0, 0.0,\n                     0.0, 0.0, 10.0, 1.0);\n    vec4 color = texture(iChannel0, ray.dir);\n    sphere(ray, (test * p1).xyz, radius, vec4(1.0, 0.0, 0.0, 1.0), color, depth);\n    sphere(ray, (test * p2).xyz, 1.0, vec4(1.0), color, depth);\n    //reflective_sphere(ray, vec3(0.0, 2.0, 10.0), 1.0, color, depth);\n    return color;\n}\nvoid reflective_sphere(in Ray ray, in vec3 p, in float r, inout vec4 fragColor, inout float depth) {\n    vec3 yaymath = ray.pos - p;\n    float somemath = dot(ray.dir, yaymath);\n    float somemoremath = length(yaymath);\n    float lolmath = somemath*somemath - somemoremath*somemoremath + r*r;\n    float test = step(0.0, lolmath) * step(0.0, dot(camdir, -yaymath));\n    float hooraymath = sqrt(lolmath);\n    float d = min(-somemath + hooraymath, -somemath - hooraymath);\n    test *= step(d, depth); //d < depth;\n    vec3 intersect = ray.pos + ray.dir * d;\n    vec3 normal = normalize(intersect - p);\n\n    fragColor = ccolor(Ray(intersect, normalize(reflect(ray.dir,normal)))) * vec4(test) + vec4(1.0-test) * fragColor;\n    depth = min(d, depth);\n}\n\nvec4 color(Ray ray) {\n    float depth = 999.0;\n    float a = iTime;\n    float c = .5*cos(a);\n    float s = .5*sin(a);\n    vec4 p1 = vec4(-c, 0.0, s, 1.0);\n    vec4 p2 = vec4( c, 0.0, -s, 1.0);\n    mat4 test = mat4(1.0, 0.0, 0.0, 0.0,\n                     0.0, 0.0, -1.0, 0.0,\n                     0.0, 1.0, 0.0, 0.0,\n                     0.0, 0.0, 10.0, 1.0);\n    vec4 color = texture(iChannel0, ray.dir);\n    sphere(ray, (test * p1).xyz, radius, vec4(1.0, 0.0, 0.0, 1.0), color, depth);\n    sphere(ray, (test * p2).xyz, 1.0, vec4(1.0), color, depth);\n    reflective_sphere(ray, vec3((iMouse.x-iResolution.x/2.0)/iResolution.x*17.0, (iMouse.y-iResolution.y/2.0)/iResolution.y*10.0, 10.0), 1.5, color, depth);\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    da_sun = normalize(da_sun);\n\taspect = iResolution.x / iResolution.y;\n    vec2 xy = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    xy.x *= aspect;\n\tfloat d = (aspect/2.0)/tan(radians(fov/2.0));\n    camdir = normalize(camdir);\n\n    vec3 z = camdir;\n    vec3 x = normalize(cross(vec3(0.0, 1.0, 0.0), z));\n    vec3 y = cross(z, x);\n    mat4 cmat = mat4(x, 0.0,\n                     y, 0.0,\n                     z, 0.0,\n                     0.0, 0.0, 0.0, 1.0);\n    vec4 raydir = cmat * vec4(xy, d, 1.0);\n    Ray ray = Ray(campos, normalize(raydir.xyz));\n    fragColor = color(ray);\n}\n","name":"Image","description":"","type":"image"}]}