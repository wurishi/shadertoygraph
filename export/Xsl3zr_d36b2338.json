{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// little fluffy clouds\n// @simesgreen\n\nconst int _VolumeSteps = 64;\nconst float _StepSize = 0.05; \nconst float _Density = 0.1;\nconst float _OpacityThreshold = 0.95;\n\nconst float _SphereRadius = 1.2;\nconst float _NoiseFreq = 0.5;\nconst float _NoiseAmp = 2.0;\n\nconst vec4 innerColor = vec4(0.7, 0.7, 0.7, _Density);\nconst vec4 outerColor = vec4(1.0, 1.0, 1.0, 0.0);\n\n//const vec3 sunDir = vec3(-0.577, 0.577, 0.577);\nconst vec3 sunDir = vec3(-0.666, 0.333, 0.666);\n\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\t  \n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n  // Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\n  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  //Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n\nfloat fbm(vec3 p)\n{\n    float f;\n    f = 0.5000*snoise( p ); p = p*2.02;\n    f += 0.2500*snoise( p ); p = p*2.03;\n    f += 0.1250*snoise( p ); p = p*2.01;\n    f += 0.0625*snoise( p );\n    return f;\n}\n\nfloat fbm2(vec3 p)\n{\n    const int octaves = 4;\n    float amp = 0.5;\n    float freq = 1.0;\n    float n = 0.0;\t\n    for(int i=0; i<octaves; i++) {\n        n += snoise(p*freq)*amp;\n\tfreq *= 2.1;\n\tamp *= 0.5;\n    }\n    return n;\n}\n\n// returns signed distance to surface\nfloat distanceFunc(vec3 p)\n{\t\n\tp.x -= iTime;\t\t// translate with time\n\t//p += snoise(p*0.5)*1.0;\t// domain warp!\n\t\n\tvec3 q = p;\t\n\t// repeat on grid\n\tq.xz = mod(q.xz - vec2(2.5), 5.0) - vec2(2.5);\n    q.y *= 2.0;\t// squash in y\n\tfloat d = length(q) - _SphereRadius;\t// distance to sphere\n\n\t// offset distance with noise\n\t//p = normalize(p) * _SphereRadius;\t// project noise point to sphere surface\n\tp.y -= iTime*0.3;\t// animate noise with time\n\td += fbm(p*_NoiseFreq) * _NoiseAmp;\n\treturn d;\n}\n\n// map distance to color\nvec4 shade(float d)\n{\t\n\treturn mix(innerColor, outerColor, smoothstep(0.5, 1.0, d));\n}\n\n// maps position to color\nvec4 volumeFunc(vec3 p)\n{\n\tfloat d = distanceFunc(p);\n\tvec4 c = shade(d);\n\tc.rgb *= smoothstep(-1.0, 0.0, p.y)*0.5+0.5;\t// fake shadows\n\tfloat r = length(p)*0.04;\n\tc.a *= exp(-r*r);\t// fog\n\treturn c;\n}\n\nvec3 sky(vec3 v)\n{\n\t// gradient\n\tvec3 c = mix(vec3(0.0, 0.5, 1.0), vec3(0, 0.25, 0.5), abs(v.y));\n\t//vec3 c = mix(vec3(1.0, 0.5, 0.0), vec3(0, 0.5, 1.0), abs(sqrt(v.y)));\n\tfloat sun = pow(dot(v, sunDir), 200.0);\n\tc += sun*vec3(3.0, 2.0, 1.0);\n\treturn c;\n}\n\nfloat sampleLight(vec3 pos)\n{\n\tconst int _LightSteps = 8;\n\tconst float _ShadowDensity = 1.0;\n\tvec3 lightStep = (sunDir * 2.0) / float(_LightSteps);\n\tfloat t = 1.0;\t// transmittance\n\tfor(int i=0; i<_LightSteps; i++) {\n\t\tvec4 col = volumeFunc(pos);\n\t\tt *= max(0.0, 1.0 - col.a * _ShadowDensity);\n\t\t//if (t < 0.01)\n\t\t\t//break;\n\t\tpos += lightStep;\n\t}\n\treturn t;\n}\n\n// ray march volume\nvec4 rayMarch(vec3 rayOrigin, vec3 rayStep, vec4 sum, out vec3 pos)\n{\n\tpos = rayOrigin;\n\tfor(int i=0; i<_VolumeSteps; i++) {\n\t\tvec4 col = volumeFunc(pos);\n#if 0\n\t\t// volume shadows\n\t\tif (col.a > 0.0) {\n\t\t\tcol.rgb *= sampleLight(pos);\t\t\n\t\t}\n#endif\t\t\n\t\t\n#if 0\n\t\tsum = mix(sum, col, col.a);\t// under operator for back-to-front\n#else\t\n\t\tcol.rgb *= col.a;\t\t// pre-multiply alpha\n\t\tsum = sum + col*(1.0 - sum.a);\t// over operator for front-to-back\n#endif\n\t\t\n#if 0\n\t\t// exit early if opaque\n        \tif (sum.a > _OpacityThreshold)\n            \t\tbreak;\n#endif\t\t\n\t\tpos += rayStep;\n\t\t//rayStep *= 1.01;\n\t}\n\treturn sum;\n}\n\nbool\nintersectBox(vec3 ro, vec3 rd, vec3 boxmin, vec3 boxmax, out float tnear, out float tfar)\n{\n\t// compute intersection of ray with all six bbox planes\n\tvec3 invR = 1.0 / rd;\n\tvec3 tbot = invR * (boxmin - ro);\n\tvec3 ttop = invR * (boxmax - ro);\n\t// re-order intersections to find smallest and largest on each axis\n\tvec3 tmin = min (ttop, tbot);\n\tvec3 tmax = max (ttop, tbot);\n\t// find the largest tmin and the smallest tmax\n\tvec2 t0 = max (tmin.xx, tmin.yz);\n\ttnear = max (t0.x, t0.y);\n\tt0 = min (tmax.xx, tmax.yz);\n\ttfar = min (t0.x, t0.y);\n\t// check for hit\n\tbool hit;\n\tif ((tnear > tfar)) \n\t\thit = false;\n\telse\n\t\thit = true;\n\treturn hit;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy / iResolution.xy)*2.0-1.0;\n    p.x *= iResolution.x / iResolution.y;\n\t\n    float rotx = 2.5 + (iMouse.y / iResolution.y)*4.0;\n    float roty =  -0.2 - (iMouse.x / iResolution.x)*4.0;\n\n    float zoom = 4.0;\n\n    // camera\n    vec3 ro = zoom*normalize(vec3(cos(roty), cos(rotx), sin(roty)));\n\t\n    vec3 ww = normalize(vec3(0.0,0.0,0.0) - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww, uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\t\n    // box\n    vec3 boxMin = vec3(-50.0, 2.0, -50);\n    vec3 boxMax = vec3(50.0, -2.0, 50);\n    //vec3 boxMin = vec3(-3.0, -2.0, -3.0);\n    //vec3 boxMax = vec3(3.0, 2.0, 3.0);\n\t\n    float tnear, tfar;\n    bool hit = intersectBox(ro, rd, boxMin, boxMax, tnear, tfar);\n    tnear = max(tnear, 0.0);\n    tfar = max(tfar, 0.0);\t\n\n\tvec3 pnear = ro+rd*tnear;\n    vec3 pfar = ro+rd*tfar;\n\t\n    //ro = pfar; rd = -rd; // back to front\n    ro = pnear;\t// front to back\n    float stepSize = length(pfar - pnear) / float(_VolumeSteps);\t\n\t\n    vec3 hitPos;\n    //vec4 col = vec4(0, 0.25, 0.5, 0);\n    //vec4 col = vec4(sky(rd), 0);\n    vec4 col = vec4(0);\n    if (hit) {\n\t    //col = rayMarch(ro, rd*_StepSize, col, hitPos);\n\t    col = rayMarch(ro, rd*stepSize, col, hitPos);\n    }\n\n    // blend sun under clouds\n    col += vec4(sky(rd), 0)*(1.0 - col.w);\n\n    //col *= smoothstep(4.0, 0.7, dot(p, p));\n\t\n    fragColor = vec4(col.rgb, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xsl3zr","date":"1361789366","viewed":3432,"name":"little fluffy clouds","username":"simesgreen","description":"what were the skies like when you were young?","likes":53,"published":1,"flags":0,"usePreview":0,"tags":["volume","raymarched","clouyds"],"hasliked":0,"parentid":"","parentname":""}}