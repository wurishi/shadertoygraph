{"ver":"0.1","info":{"id":"XlyXRc","date":"1485198523","viewed":315,"name":"Random function tester","username":"huttarl","description":"Loosely test whether a given pseudorandom hash function is \"sufficiently random\" by plotting its output in a couple of different ways.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["testing","prng","pseudorandom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/** Randomness tester:\n * Loosely test whether a given pseudorandom hash function is \"sufficiently random.\"\n * Display 1 shows a plot where each pixel's color is given by calling the hash\n * function with that pixel's coordinates.\n * Display 2 shows a plot of the first n coordinates generated by the hash function.\n * (Idea for these 2 displays comes from http://blog.runevision.com/2015/01/primer-on-repeatable-random-numbers.html)\n\n * Look for artifacts in the displays. Is the function sufficiently random for your needs?\n * iGlobaltime is used as the seed. Pause to check static (seed-independent) output.\n */\n\n//// CHANGE THIS LINE to test desired noise function\n// #define RAND(p, seed) poltergeist((p), (seed))\n#define RAND(p, seed) snoise((p), (seed))\n\n#define NPOINTS 512\n\n\n\n// From http://www.shadertoy.com/view/ltB3zD\nfloat poltergeist(in vec2 coordinate, in float seed) {\n    return fract(sin(dot(coordinate*seed, vec2(12.9898, 78.233)))*43758.5453);\n}\n\n\n\n// From ollj at http://www.shadertoy.com/view/ltB3zD\nvec2 sc(in float i){return vec2(sin(i),cos(i));}\n\nfloat snoise(in vec2 i, in float seed){\n    i*=sc(seed);\n    return fract(sin(dot(i,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Left side: plot random numbers as colors\n    if (fragCoord.x < iResolution.x * .5) {\n        float r = RAND(fragCoord.xy, iTime);\n        // float r = poltergeist(fragCoord.xy, iTime);\n        fragColor = vec4(r, r, r, 1.0);\n    } else {\n        // right side: plot random numbers as coordinates\n        float r = 0.;\n        for (int i=0; i < NPOINTS; i++) {\n            vec2 p = vec2((RAND(vec2(float(i)), float(i*2) + iTime) * .5 + .5)\n                          * iResolution.x,\n                          RAND(vec2(float(i)), float(i*2+1) + iTime) * iResolution.y);\n            r += smoothstep(-2., 0., -distance(p, fragCoord.xy));\n        }\n        fragColor = vec4(r, r, r, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}