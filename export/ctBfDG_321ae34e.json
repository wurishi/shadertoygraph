{"ver":"0.1","info":{"id":"ctBfDG","date":"1694436513","viewed":53,"name":"simple orbits","username":"Nephas","description":"simple solar system","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["space","planets"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 ZERO = vec2(0.,0.);\nconst float TIMESCALE = 0.1;\nconst vec2 INCL = vec2(1., .5);\n\nconst float radii[8] = float[8](.1, .15, .2, .3, .6, .8, 1., 1.2);\nconst float sizes[8] = float[8](.00004, .00005, .00006, .00005, .00015, .00012, .0001, .0001);\n\n\nfloat star(vec2 uv, vec2 offset, float r){\n    vec2 p = uv + offset;\n    return max(0., 1. - dot(p,p) / r);\n}\n\n\nfloat sun(vec2 uv, float r){\n\tvec3 k = vec3(uv.x * 75., uv.y * 75., iTime * 2.);\n    \n    mat3 mat = .4 * mat3(vec3(-2.0,-2.0, 0.0), \n                         vec3( 3.0,-1.0, 1.0), \n                         vec3( 1.0,-1.0,-1.0));\n    \n    float val1 = length(0.5-fract(k*=mat));\n    float val2 = length(0.5-fract(k*=mat));\n    float val3 = length(0.5-fract(k*=mat));\n    float fluctuation = -3. * pow(min(min(val1,val2),val3), 5.0);\n\n    return (1. + fluctuation) * 0.66 * star(uv, ZERO, r) + \n                                0.33 * star(uv, ZERO, r * 2.) ;\n}\n\n\n\nfloat planet(vec2 uv, vec2 offset, float r){\n    float orbitRadius = length(offset);\n    float shade = 1.25 * smoothstep(orbitRadius + 50.*r, orbitRadius - 50.*r, length(uv));\n    \n    return shade * star(uv, offset, r);\n}\n\nfloat orbitAngle(float r, float M, float phi){\n    // t^2/a^3 = 4pi^2/GM = 1 / M\n    // T = sqrt(a^3)\n\n    float T = sqrt(r*r*r) / M / TIMESCALE;\n    return iTime / T + phi;\n}\n\nvec2 orbit(float r, float M, vec2 origin, float phi){\n    float angle = orbitAngle(r, M, phi);\n\n    return r * INCL * vec2(sin(angle), cos(angle)) + origin;\n}\n\nvec2 ellipse(float r, float M, vec2 origin, float phi, float e){\n    float angle = orbitAngle(r, M, phi);\n    float delta = sin(angle + phi) * e + 1.;\n\n    return delta * r * INCL * vec2(sin(angle), cos(angle)) + origin;\n}\n\nfloat asteroidBelt(vec2 uv, float r, float w){\n    float l = 0.;\n    for (int i = 0; i < 20; i++){\n        float r = r + randGauss[i] * w;\n        vec2 o = ellipse(r, 1., ZERO, float(i), randGauss[i] * w);\n        l += star(uv, o, .000005 * (1. + randGauss[99 - i]) );\n    }\n    return l;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // centered uv, with aspect ratio correction\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y + vec2(.6, .2);\n\n    // sun\n    vec3 col = vec3(0.,0.,0.);\n    col += vec3(1.,1.,.8) * sun(uv, .0005);\n    \n    // planets\n    for (int i = 0; i < 8; i++){\n        vec2 o = orbit(radii[i], 1., ZERO, 0.);\n        col += vec3(1.,.8,.8) * planet(uv, o, sizes[i]);\n        \n                \n        if (i==2){ // Earth\n            vec2 mo = orbit(.01, .05, o, 0.);\n            col += planet(uv, mo, .00001);\n        }\n        \n        if (i==4){ // Jupiter\n            for (int i = 0; i < 4; i++){\n                vec2 mo = orbit(float(i) * .01 + .015, .05, o, 0.);\n                col += planet(uv, mo, .00001);\n            }\n        }\n    }\n    \n    // asteroids\n    col += vec3(.7,.7,.8) * asteroidBelt(uv, .4, .05);\n    col += vec3(.7,.7,.8) * asteroidBelt(uv, 1.5, .1);\n    col += vec3(.7,.7,.8) * asteroidBelt(uv, 1.75, .25);\n\n    fragColor = vec4(col.x, col.y, col.z, 1.);    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float randGauss[100] = float[100](\n-5.1873479730e-1,\n 2.6755659350e-1,\n 2.1690115410e-1,\n-8.1683707890e-1,\n 9.6488079050e-1,\n-1.0393993690e-1,\n 6.7924524400e-2,\n 2.6594142120e-1,\n 8.5698350150e-1,\n 5.7026900660e-1,\n-5.4608839020e-1,\n-7.1139976920e-1,\n 3.4272704760e-1,\n-5.9561118140e-1,\n 6.6812805060e-2,\n-2.8836361060e-1,\n-6.3537107100e-1,\n-1.4393964050e-1,\n 1.1600650500e-1,\n 3.9503703880e-1,\n-4.5281289020e-1,\n 1.1275324280e-1,\n 2.4441429050e-1,\n-3.1588063560e-1,\n 4.4792231260e-1,\n-3.1716981130e-1,\n-6.0089634900e-1,\n 2.1314756460e-1,\n 3.5807322280e-1,\n-1.1418952790e-1,\n-4.8780528810e-1,\n 3.6855238620e-1,\n 6.5303336100e-1,\n 2.9396500790e-2,\n 4.0465503160e-1,\n 9.4241281400e-1,\n-5.3224039230e-1,\n-8.9432098100e-1,\n 1.8683182470e-1,\n 2.2827187040e-1,\n-7.4425204710e-1,\n 5.2299832890e-1,\n-5.2905746140e-2,\n 3.5882014670e-1,\n-3.0751237900e-1,\n-1.1597588950e-1,\n-7.4775121430e-2,\n 7.5149139840e-1,\n-7.6947446490e-1,\n 4.3504127250e-1,\n-6.1261033450e-2,\n-8.8525108690e-1,\n-5.1939215310e-1,\n-4.8931005320e-1,\n-4.7161072970e-1,\n-2.7269351590e-1,\n-3.5380320280e-1,\n 4.8864995100e-1,\n-2.1571399170e-1,\n-4.0798114070e-1,\n 8.6724246040e-1,\n-1.7909369340e-1,\n 1.3240705410e-1,\n-8.7700437720e-1,\n-6.6701059980e-2,\n 2.6989225580e-1,\n 2.0734642930e-1,\n 2.2576647120e-1,\n 8.4778523780e-1,\n-6.2017585290e-1,\n-5.2258680450e-1,\n 1.2303487520e-1,\n-8.9939010490e-1,\n-5.0550676830e-1,\n-2.2960285420e-1,\n-9.1669611200e-2,\n-1.8144311810e-1,\n 1.2176695770e-1,\n 3.9751101260e-2,\n 5.8276448670e-1,\n-6.3037765860e-1,\n 7.7760544030e-1,\n-7.1446715530e-2,\n 2.2166151620e-1,\n 2.6761952250e-2,\n 4.1814424440e-1,\n-8.2646755180e-1,\n 1.7732969420e-1,\n 5.5712897810e-1,\n-6.3643890690e-1,\n-9.0461942850e-1,\n 2.0097642710e-1,\n 4.4295314960e-3,\n 6.2369253650e-1,\n 1.6702452630e-1,\n 1.5048493510e-1,\n 8.2339793450e-1,\n-9.9749645460e-2,\n-3.4246371260e-1,\n-2.5364565580e-1\n);","name":"Common","description":"","type":"common"}]}