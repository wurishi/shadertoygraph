{"ver":"0.1","info":{"id":"ttcXRB","date":"1581194107","viewed":198,"name":"Messed up starfield","username":"nucleomancer","description":"I followed Matthijs description. (https://www.youtube.com/watch?v=rvDo9LvfoVE&list=PLGmrMu-IwbguU_nY2egTFmlg691DN7uE5&index=31)\nBut I clearly messed up somewhere. Don't know exactly what went wrong. But it must have its features for someone.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["zoom","space","stars","martijn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_LAYERS 10.\nmat2 Rotate(float angle) {\n\tfloat s = sin(angle*3.14159265/180.), c = cos(angle*3.14159265/180.);\n    return mat2(c,-s,s,c);\n}\n\n// Returns a psuedo random number.\nfloat Hash21(vec2 p) {\n    vec2 result = fract(p*vec2(123.456, 427.123));\n    result += dot(p, p+.12)*0.023;\n    return fract(result.x*result.y);\n}\n\nfloat Star(vec2 uv, float flare, float r) {\n    float d = length(uv);\n    float result = .01/d; //smoothstep(0.2, .05, d);\n    \n    if (flare>0.) {\n    for (float x=0.;x<2.;x++) {\n        uv *= Rotate(x*(237.*r));\n        float rays2 = max(0.0, 1.-abs(uv.x*uv.y*1500.));    \n        result += rays2*.1*flare;\n    }\n    }\n    \n    result *= smoothstep(1.0, 0.2, d);\n    \n    return result;\n}\n\nvec3 StarLayer(vec2 uv) {\n    // Time varying pixel color\n    vec3 result = vec3(0);\n    \n    vec2 grid_uv = fract(uv)-0.5;\n    vec2 id = floor(uv); // Identify each square.\n    \n    for (int y=-1;y<=1;y++) {\n        for (int x=-1;x<=1;x++) {\n            vec2 offset = vec2(x,y);\n            vec2 local_id = id+offset;\n            float n = Hash21(local_id)-0.5;\n            float size = 5.*(fract(n*1247.238));\n            vec3 color = (sin( vec3(.7,.3,.9) * fract(n*222.112)*347.)*.5)+.5;\n            color *= vec3(1.,0.5,1.+size/5.);\n\t\t    result += color*Star(grid_uv-offset-vec2(n,fract(n*34.)-.5), smoothstep(0.8, 1., size), 17.*(fract(n*873.43)-0.2))*size;            \n        }\n    }\n\treturn result;    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float t = iTime*.5;\n    // Zoom out\n    uv *= 3.;\n\n//    if (grid_uv.x>0.49 || grid_uv.y>0.49) {\n//        col.r = 1.;\n//    }\n//    col.rg += id*0.4;\n//    col.rg = grid_uv;\n//    col += Hash21(id);\n    vec3 col = vec3(0);\n    uv *= Rotate(6.*t);\n    \n    for (float i=0.; i<=1. ; i+=1./NUM_LAYERS) {\n//    float i = 1.;\n        float depth = fract(i*t);\n        float scale = mix(20., 0.15, depth);\n        float fade = depth;\n    \tcol += StarLayer(uv*(scale-(i*7.1232)))*fade;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}