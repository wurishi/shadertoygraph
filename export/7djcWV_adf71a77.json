{"ver":"0.1","info":{"id":"7djcWV","date":"1644679644","viewed":117,"name":"3d practice","username":"SilverInk","description":"lol","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float print(vec2 uv, float v)\n{\n    if (uv.x < -0.47 && uv.y > 0.47)\n    {\n        return v;\n    }\n    return -1.;\n}\n\nfloat DistLine(vec3 ro, vec3 rd, vec3 p)\n{\n    return length(cross(p-ro, rd)) / length(rd);\n}\n\nfloat DrawPoint(vec3 ro, vec3 rd, vec3 p)\n{\n    return smoothstep(.06, .05, DistLine(ro, rd, p));\n}\n\nfloat DrawLine(vec3 ro, vec3 rd, vec3 p1, vec3 p2)\n{\n    vec3 w = cross(p1-p2, rd); // vecteur normal du plan parallèle à rd et p1 p2\n    float d = abs(dot(w, p1-ro))/length(w);\n    return smoothstep(0.01, 0.005, d);\n}\n\nfloat DrawLine_(vec3 ro, vec3 rd, vec3 p1, vec3 p2)\n{\n    vec3 m = (p1+p2)/2.;\n    float r = length(p2-p1)/2.;\n    if (DistLine(ro, rd, m) > r)\n    {\n        return 0.;\n    }\n    vec3 w = cross(p1-p2, rd); // vecteur normal du plan parallèle à rd et p1 p2\n    float d = abs(dot(w, p1-ro))/length(w);\n    return smoothstep(0.01, 0.005, d) + DrawPoint(ro, rd, m); \n}\n\nfloat DrawCube(vec2 uv, float eyeDist)\n{\n    vec3 ro = vec3(3. * sin(iTime),2. , -2. * cos(iTime));\n\n    vec3 lookat = vec3(0);\n    \n    float zoom = .8;\n    \n    vec3 _f = normalize(lookat - ro);\n    vec3 _r = cross(vec3(0., 1., 0.), _f);\n    vec3 _u = cross(_f, _r);\n    \n    ro += eyeDist * _r ;\n\n    vec3 rd = _f*zoom + _r*uv.x + _u*uv.y;\n    \n    float color = 0.;\n    float scale = 1.;\n    \n    \n    \n    vec3 a = vec3(-.5,-.5, .5)* scale;\n    vec3 b = vec3(-.5, .5,-.5)* scale;\n    vec3 c = vec3(-.5, .5, .5)* scale;\n    vec3 d = vec3( .5,-.5,-.5)* scale;\n    vec3 e = vec3( .5,-.5, .5)* scale;\n    vec3 f = vec3( .5, .5,-.5)* scale;\n    vec3 g = vec3( .5, .5, .5)* scale;\n    vec3 h = vec3(-.5,-.5,-.5)* scale;\n\n    color += DrawLine(ro, rd, a, c);\n    color += DrawLine(ro, rd, b, c);\n    color += DrawLine(ro, rd, f, b);\n    color += DrawLine(ro, rd, e, a);\n    color += DrawLine(ro, rd, h, a);\n    color += DrawLine(ro, rd, h, b);\n    color += DrawLine(ro, rd, h, d);\n    color += DrawLine(ro, rd, d, f);\n    color += DrawLine(ro, rd, f, g);\n    color += DrawLine(ro, rd, c, g);\n    color += DrawLine(ro, rd, g, e);\n    color += DrawLine(ro, rd, e, d);\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( fragCoord - .5*iResolution.xy ) /iResolution.y;\n\n\n    vec3 color = vec3(0);\n    \n    float eyeDist = 0.025;\n    color += DrawCube(uv, -eyeDist) * vec3(0, 1., 1); //Only keep green and blue for left view\n    color += DrawCube(uv, eyeDist) * vec3(1, 0 , 0); //Only keep red for right view\n    \n    fragColor= vec4(color, 1);\n}","name":"Image","description":"","type":"image"}]}