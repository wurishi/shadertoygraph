{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// this is a \"nearest-aa\" filter, for continuous magnification of pixel art\n// and such without flickering.\n//\n// the left half shows \"nearest-aa\", while the right half shows normal\n// filtering (nearest or linear, depending on options)\n\n// comment this to disable gamma correction\n#define GAMMA 2.2\n\n// comment this to only show \"nearest-aa\" filter\n#define SPLITSCREEN\n\n// enable nyan cat mode\n#define NYAN\n\n// premultiply alpha fixes edge blending\n#define PREMULTIPLY_ALPHA  //fixme\n\n// motion controls\n#define ROTATE\n#define MOVE\n#define ZOOM\n#define ANIMATE_NYAN\n\n//#define UNITBASED\n\n// --- 8< ---\n\nvec2 textureSizef (int i);\nvec4 textureNearest (sampler2D smp, int smpi, vec2 uv);\n\n// smp is the texture sampler to use\n// smpi is a workaround for getting the texture size. in desktop GL/GLES 3,\n//    there's a built-in textureSize function you can pass the sampler to directly\n// uv is the texture coordinates\nvec4 textureNearestAA (sampler2D smp, int smpi, vec2 uv)\n{\n\tvec2 span = fwidth(uv);\n\tvec2 hspan = span / 2.0;\n\tvec4 uva = vec4(uv - hspan, uv + hspan);\n\n\tvec2 ss = sign(span);\n\tvec2 fmul = ss / (1.0 - ss + span);  // 1.0/span or 0.0\n\tvec2 size = textureSizef(smpi);\n\tvec2 f = min((uva.zw - floor(uva.zw * size)/size) * fmul, 1.0);\n\n\treturn mix(\n\t\tmix(textureNearest(smp, smpi, uva.xy), textureNearest(smp, smpi, uva.zy), f.x),\n\t\tmix(textureNearest(smp, smpi, uva.xw), textureNearest(smp, smpi, uva.zw), f.x), f.y\n\t);\n}\n\n// --- 8< ---\n\n#ifdef NYAN\n#define SAMPLER iChannel1\n#define SAMPLERI 1\n#else\n#define SAMPLER iChannel0\n#define SAMPLERI 0\n#endif\n\nvec2 textureSizef (int i)\n{\n\tvec2 size = i == 0 ? iChannelResolution[0].xy : iChannelResolution[1].xy;\n#ifdef NYAN\n\tif (i == 1)\n\t\tsize.x = 42.0;\n#endif\n\treturn size;\n}\n\nvec2 fixUV (vec2 uv, int i)\n{\n#ifdef NYAN\n\tif (i == 1)\n\t{\n\t\tfloat run = mod(iTime,16.0) < 9.0 ? 1.0 : 0.0;\n\t\tuv.x = clamp(uv.x, 0.0, 0.9) / 6.0;\n#ifdef ANIMATE_NYAN\n\t\tuv.x += run * floor(mod(iTime*6.0,6.0))*40.0/iChannelResolution[SAMPLERI].x;\n#endif\n\t}\n#endif\n\treturn uv;\n}\n\nvec4 setColor (vec4 col)\n{\n#ifdef GAMMA\n\tcol = vec4(pow(col.rgb, vec3(1.0/(GAMMA))), col.a);\n#endif\n\treturn col;\n}\n\nvec4 colorGamma (vec4 col)\n{\n#ifdef GAMMA\n\tcol = vec4(pow(col.rgb, vec3(GAMMA)), col.a);\n#endif\n\treturn col;\n}\n\nvec4 textureLinear (sampler2D smp, int smpi, vec2 uv)\n{\n\tvec4 col = colorGamma(texture(smp, fixUV(uv, smpi)));\n#ifdef PREMULTIPLY_ALPHA\n\tcol.rgb *= col.a;\n#endif\n\treturn col;\n}\n\nvec4 textureNearest (sampler2D smp, int smpi, vec2 uv)\n{\n\tvec2 size = textureSizef(smpi);\n\treturn textureLinear(smp, smpi, floor(uv * size) / size);\n}\n\nvec2 getUVs (vec2 fragCoord)\n{\n\tvec2 coord = vec2(fragCoord.x, iResolution.y - fragCoord.y);\n\tvec2 hres = vec2(\n#ifdef SPLITSCREEN\n\t\tfloor(iResolution.x / 2.0),\n#else\n\t\tiResolution.x,\n#endif\n\t\tiResolution.y);\n\n\tcoord.x = mod(coord.x, hres.x);\n\tcoord /= hres.xy;\n#ifndef UNITBASED\n\tfloat aspect = hres.x / hres.y;\n\tcoord.x = coord.x * aspect - (aspect-1.0)/2.0;\n#endif\n\treturn coord;\n}\n\nvoid rotate (inout vec2 uv, float t)\n{\n#ifdef ROTATE\n\tfloat rad = radians(360.0 * fract(iTime / t));\n\tmat2 rotate = mat2(cos(rad),sin(rad),-sin(rad),cos(rad));\n\tuv = rotate * (uv - 0.5) + 0.5;\n#endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = getUVs(fragCoord);\n\tvec2 bguv = uv;\n#ifdef UNITBASED\n\tuv *= iResolution.xy / textureSize(SAMPLERI);\n\tbguv *= iResolution.xy / textureSize(0);\n#ifdef SPLITSCREEN\n\tuv.x /= 2.0;\n\tbguv.x /= 2.0;\n#endif\n#endif\n\tvec2 move = vec2(cos(iTime/2.0), sin(iTime/2.0)) / 8.0;\n\tfloat zoom = sin(iTime/7.0)+1.5;\n\trotate(uv, -60.0);\n\trotate(bguv, 120.0);\n#ifdef MOVE\n\tuv += move;\n\tbguv += move * 0.5;\n#endif\n#ifdef ZOOM\n\tuv = (1.0-zoom)/2.0 + uv*zoom;\n#endif\n\tvec4 color, bgcol;\n\n#ifdef SPLITSCREEN\n\tif (fragCoord.x < iResolution.x / 2.0)\n\t{\n#endif\n\t\tcolor = textureNearestAA(SAMPLER, SAMPLERI, uv);\n\t\tbgcol = textureNearestAA(iChannel0, 0, bguv);\n#ifdef SPLITSCREEN\n\t}\n\telse\n\t{\n\t\tcolor = textureNearest(SAMPLER, SAMPLERI, uv);\n\t\tbgcol = textureNearest(iChannel0, 0, bguv);\n\t}\n#endif\n\tbgcol = vec4(mix(colorGamma(vec4(15.0/255.0, 77.0/255.0, 143.0/255.0, 1.0)).rgb, bgcol.rgb, 0.5), 1.0);\n#ifdef NYAN\n\tcolor = vec4(mix(bgcol.rgb, color.rgb, color.a), 1.0);\n#endif\n\n#ifdef SPLITSCREEN\n\tbool edge = abs(fragCoord.x - iResolution.x / 2.0) < 1.0;\n\tfragColor = setColor(edge ? vec4(vec3(0.0), 1.0) : color);\n#else\n\tfragColor = setColor(color);\n#endif\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dlXzB","date":"1403457871","viewed":1888,"name":"nearest-aa filter","username":"mjau","description":"An example of nearest-aa filtering (could be a lot simpler without rotation support)","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["filter","filtering"],"hasliked":0,"parentid":"","parentname":""}}