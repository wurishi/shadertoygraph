{"ver":"0.1","info":{"id":"ttdGDj","date":"1577660102","viewed":101,"name":"Learning Code [01]","username":"ozu","description":"grid, circles, forloop, packing","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["circles","grid","packing","forloop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int max_i = 20;\nfloat Circle(vec2 uv, vec2 p, float radius, float blur){\n\n    float d = length(uv - p);    \n    float c = smoothstep(blur,  0., abs(d-radius));\n    \n    return c;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.y *= iResolution.y/iResolution.x;\n    float c = 0.;\n    \n\n    vec2 p ;\n    //vec2 p = vec2(-.5 + radius, 0.);\n\n    float dist = 1. / float(max_i);\n    float radius = dist / 2.;\n    float speed = -2.;\n    \n    for (int i=0; i<max_i; i++){\n\t\t\n        p.x = float(i) * dist -.5 + dist / 2.;\n        float t = sin(speed * iTime + float(i) * .125) * .5 +.5;\n        radius = t * (sin(float(i/max_i)) * .5 +.5) * dist;\n        float blur  = 1.5 / iResolution.x;\n\n        float circle = Circle(uv, p, radius, blur);\n        //circle -= Circle(uv, p, radius - .002, 0.003);\n\n        c +=circle;\n    }\n    \n\t// Output to screen\n    fragColor = vec4(c, c, c,1.0);\n}","name":"Image","description":"","type":"image"}]}