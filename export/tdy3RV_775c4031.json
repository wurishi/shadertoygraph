{"ver":"0.1","info":{"id":"tdy3RV","date":"1571162242","viewed":114,"name":"Star with n flares","username":"nurof3n","description":"Mathematical function to shape a star with a given number of flares;)","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["star","geometry","shape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n#define smoothsaw(x) (smoothstep(0.0, 1.0, fract(x)))\n\nconst float innerRadius = .3;\nconst float outerRadius = .5;\nconst float nrflares = 5.;\nconst float r = TWO_PI/nrflares;\nvec3 COLORout = vec3(.1, .3, .3);\nvec3 COLORin = vec3(.9, .5, .3);\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat det(vec2 A, vec2 B, vec2 C) {\n\treturn A.x*B.y+B.x*C.y+C.x*A.y-C.x*B.y-A.x*C.y-B.x*A.y;   \n}\n\nfloat dist(vec2 uv, vec2 A, vec2 B) {\n\tfloat m = (A.y - B.y) / (A.x - B.x);\n    float n = A.y - m * A.x;\n    \n    return sign(det(B, A, uv)) * abs(m*uv.x + n - uv.y) / sqrt(m*m + 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n    uv = 2. * uv - vec2(aspect, 1.);\n    float unghi = smoothsaw(iTime) + floor(iTime);\n\tuv = rotate2d(unghi) * uv;\n    \n    // Angle from the current pixel plus offset\n    float angle = atan(uv.y, uv.x);// + PI / 2.;\n    float alpha = r * floor(.5 + angle / r);\n    float d = cos(angle - alpha) * length(uv);\n    \n    //COLORin *= vec3(1.+cos(iTime), 2.+sin(iTime), .5) * vec3(2.+sin(angle), 1.+cos(angle), .5);\n    uv = rotate2d(alpha) * uv;\n    vec3 color;\n    if(d < innerRadius)\n        color = COLORin - length(uv) / 3.;\n   // else if(d > outerRadius)\n        //color = smoothstep(outerRadius, outerRadius + 0.05, d) * COLOR;\n    else {\n        vec2 A = vec2(innerRadius, 0.0);\n        vec2 B = outerRadius * vec2(cos(r/2.), sin(r/2.));\n        vec2 C = vec2(B.x, -B.y);\n     \tfloat d = min(dist(uv, A, B), dist(uv, C, A));\n        color = mix(COLORin - length(uv) / 3., COLORout, smoothstep(0.0, 0.005, d));\n    }\n    color -= length(uv) / 10.;       \n   \t\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}