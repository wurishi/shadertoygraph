{"ver":"0.1","info":{"id":"7sXBRj","date":"1645056293","viewed":107,"name":"Noise Coverage Tester","username":"playbyan1453","description":"Left White Noise, and Right screen using blue noise.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["noise","blue","white","uniform","rng"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 c, vec2 p) {\n    vec4 a = texelFetch(iChannel0, ivec2(p), 0);\n    c = normalize(cos((a/a.w)*6.2831853*8.0))*0.5+0.5;\n    c = abs(p.x*2.0-iResolution.x) > iResolution.x*0.0025 ? c : vec4(1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Hash functions by markjarzynski:\n// https://www.shadertoy.com/view/XlGcRh\nuint baseHash(uvec2 p) {\n    uvec2 state = ((p * 747796405u) ^ p.yx) + 2891336453u;\n\tuint word = ((state.x >> ((state.y >> 28u) + 4u)) ^ state.y) * 277803737u;\n\treturn (word >> 28u) ^ word;\n}\n\nfloat hash1(inout float seed) {\n    uint n = baseHash(floatBitsToUint(vec2(seed+=0.1, seed+=0.1)));\n    return float(n) / float(0xffffffffu);\n}\n\nvec2 hash2(inout float seed) {\n    uint n = baseHash(floatBitsToUint(vec2(seed+=0.1, seed+=0.1)));\n    uvec2 rz = uvec2(n, n * 48271u);\n    return vec2(rz & uvec2(0x7fffffffu)) / float(0x7fffffff);\n}\n\nvec3 hash3(inout float seed) {\n    uint n = baseHash(floatBitsToUint(vec2(seed+=0.1, seed+=0.1)));\n    uvec3 rz = uvec3(n, n * 25135u, n * 48271u);\n    return vec3(rz & uvec3(0x7fffffffu)) / float(0x7fffffff);\n}\n\n// Blue Hash by michael0884:\n// https://www.shadertoy.com/view/wltcRS\nivec2 px;\n\nvec4 baseBlueHash(inout float seed) {\n    uint n = baseHash(floatBitsToUint(vec2(seed+=0.1, seed+=0.1)));\n    uvec2 rz = uvec2(n, n * 48271u) & uvec2(0x7fffffffu);\n    ivec2 p = (px + ivec2((rz >> 4u) % 0x0fffffffu)) % 1024;\n    return abs(2.0 * fract(texelFetch(iChannel1, p, 0) + 1.61803398 * seed) - 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 p) {\n    vec2 uv = p/iResolution.xy;\n    fragColor = texelFetch(iChannel0, ivec2(p), 0);\n    \n    px = ivec2(p);\n    float s0 = float(baseHash(uvec2(0) + uint(iFrame)))/float(0xffffffffu);\n    \n    float s1 = float(baseHash(floatBitsToUint(p) + uint(iFrame)))/float(0xffffffffu);\n    \n    vec3 col = uv.x > 0.5 ? baseBlueHash(s0).xyz : hash3(s1);\n    \n    fragColor += vec4(step(col, vec3(0.1)), 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}