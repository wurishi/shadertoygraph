{"ver":"0.1","info":{"id":"fsdBzX","date":"1656926233","viewed":72,"name":"Fork 色调入门 chenxiaolo 206","username":"chenxiaolong","description":"Convert color-space from RGB to HSV (https://en.wikipedia.org/wiki/HSL_and_HSV).\nMight be usefull as post-effect.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["colorspace","colorconversion","huesaturationvalue","redgreenblue"],"hasliked":0,"parentid":"7dccDf","parentname":"色调入门"},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Color-Space Conversion RGB to HSV written 2015 by Jakob Thomsen\n// https://en.wikipedia.org/wiki/HSL_and_HSV\n\nvec3 RGBtoHSV(vec3 rgb)\n{\n    // Hue: red = 0/6, yellow = 1/6, green = 2/6,\n    //      cyan = 3/6, blue = 4/6, magenta = 5/6\n    vec3 hsv;\n    float cmax = max(rgb.r, max(rgb.g, rgb.b));\n    float cmin = min(rgb.r, min(rgb.g, rgb.b));\n    \n    hsv.z = cmax; // value\n\n    float chroma = cmax - cmin;\n    //if(chroma != 0.0)\n    {\n        hsv.y = chroma / cmax; // saturation\n\n        //if(cmax == rgb.r)\n        if(rgb.r > rgb.g && rgb.r > rgb.b)\n        {\n            hsv.x = (0.0 + (rgb.g - rgb.b) / chroma) / 6.0; // hue\n        }\n        //else if(cmax == rgb.m_Green)\n        else if(rgb.g > rgb.b)\n        {\n            hsv.x = (2.0 + (rgb.b - rgb.r) / chroma) / 6.0; // hue\n        }\n        else\n        {\n            hsv.x = (4.0 + (rgb.r - rgb.g) / chroma) / 6.0; // hue\n        }\n\n        // Make sure hue is in range [0..1]\n        hsv.x = fract(hsv.x);\n    }\n    return hsv;\n}\n\nvec3 HSVtoRGB(in vec3 c) // thanks to iq for this much more compact version!\n{\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\n/*\nvec3 HSVtoRGB(vec3 hsv) // clumsy original\n{\n    hsv.x = fract(hsv.x); // make sure hue is in [0..1]\n    vec3 rgb;\n\n    float PartFrac = fract(6.0 * hsv.x); // by hue\n    float PartNr = 6.0 * hsv.x; // by hue\n\n    float a = hsv.z * (1.0 - hsv.y); // by value, by saturation\n    float b = hsv.z * (1.0 - PartFrac * hsv.y); // by value, by saturation\n    float c = hsv.z * (1.0 - (1.0 - PartFrac) * hsv.y); // by value, by saturation\n\n    if(PartNr < 1.0)\n    {\n        rgb.r = hsv.z; // by value\n        rgb.g = c;\n        rgb.b = a;\n    }\n    else if(PartNr < 2.0)\n    {\n        rgb.r = b;\n        rgb.g = hsv.z; // by value\n        rgb.b = a;\n    }\n    else if(PartNr < 3.0)\n    {\n        rgb.r = a;\n        rgb.g = hsv.z; // by value\n        rgb.b = c;\n    }\n    else if(PartNr < 4.0)\n    {\n        rgb.r = a;\n        rgb.g = b;\n        rgb.b = hsv.z; // by value\n    }\n    else if(PartNr < 5.0)\n    {\n        rgb.r = c;\n        rgb.g = a;\n        rgb.b = hsv.z; // by value\n    }\n    else\n    {\n        rgb.r = hsv.z; // by value\n        rgb.g = a;\n        rgb.b = b;\n    }\n\n    return rgb;\n}\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 取纹理坐标\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    // 取纹理像素值\n    vec3 rgb = texture(iChannel0, uv).rgb;\n    // 把纹理像素值转HSV\n    vec3 hsv = RGBtoHSV(rgb);\n    // 取随机数\n    float v = .5 - .5 * cos(.1 * iTime * 2. * 3.1415926);\n    // 左边：变化饱和度  右变：变化色调 left: de-saturate, right: rotate hue\n    hsv = mix(hsv * vec3(1.,v,1.), fract(hsv + vec3(v,0.,0.)), step(0.5, uv.x)); \n    rgb = HSVtoRGB(hsv);\n\tfragColor = vec4(rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}