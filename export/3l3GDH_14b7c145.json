{"ver":"0.1","info":{"id":"3l3GDH","date":"1576249552","viewed":194,"name":"Explore Julia sets","username":"adipy","description":"Explore Julia sets for f(z)=z^2+c. Drag the mouse to adjust the complex parameter. Zooming gives finer control.\nZ/X - zoom in/out\nArrow keys - pan\nR - reset zoom/center\nQ - reset Julia set parameter","likes":5,"published":1,"flags":48,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/// Image Rendering ///\n\n// constants\nconst float iters = 256.; // iterations\nconst vec3 col_converge1 = vec3(0.8, 0.8, 1);  // the \"converges to large value\" color\nconst vec3 col_converge2 = vec3(0.1, 0.1, 0.2);  // the \"converges to zero\" color\nconst vec3 col_diverge1 = vec3(0.9, 0.7, 0.5); // diverges slowly - almost convergent\nconst vec3 col_diverge2 = vec3(0.); // diverges quickly\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 col = vec3(0.);\n    float q;\n    vec2 z;\n    \n    get_state(iChannel0);\n    \n    // map fragCoord to a complex coordinate\n    z = center + 2. * (zoom*bound) * (fragCoord/iResolution.xy - 0.5);\n    \n    // Compute sequence for point z, colorize convergence/divergence\n    for(float n = 0.; n < iters; n++) {\n        z = vec2( z.x*z.x - z.y*z.y, 2. * z.x * z.y ) + c;\n        if(dot(z,z) > 2.) {\n            q = pow(n/iters, 0.6);  // adds a nice glow\n            // col = vec3(sin(n/thick), 1.-cos(n/thick), tan(n/thick));\n            col = q * col_diverge1 + (1.-q) * col_diverge2;\n            break;\n        } else {\n            float q = dot(z,z)/(0.5+dot(c,c));\n            col =  q * col_converge1 + (1.-q) * col_converge2;\n        }\n    }\n\n    // Output pixel\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/// Input and Logic ///\n\n/// Keyboard ///\nconst int kLeft=37, kUp=38, kRight=39, kDown=40;\nconst int kZ=90, kX=88, kSpace=32, kQ=81, kR=82;\n\nbool keyheld(in int keycode)\n{\n    return texelFetch(iChannel1, ivec2(keycode, 0), 0).x > 0.;\n}\n\nbool keytoggle(in int keycode)\n{\n    return texelFetch(iChannel1, ivec2(keycode, 2), 0).x > 0.;\n}\n\n/// Main controls: Dragging, scrolling, zooming ///\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iDate.w;\t// seconds of the date\n    ivec2 addr = ivec2(fragCoord-0.5);\n    \n    // don't process if there's no output variable at this buffer address\n    if(addr.x > addressBounds.x || addr.y > addressBounds.y) discard;\n    \n    get_state(iChannel0);\n    \n    // initialize / reset\n    if(keyheld(kQ)) c = c0 = vec2(0.);\n    if(iFrame == 0 || keyheld(kR)) {\n        timestamp = 0.;\n\t\tcenter = vec2(0.);\n\t\tzoom=1.;\n    }\n    \n    // update if the mouse is held down\n    // don't update for clicks - allows grabbing focus and right click > save as...\n    if(iMouse.z > 0. && iMouse.x != iMouse.z && iMouse.y != iMouse.w) {\n      // adjust the complex parameter proportional to mouse drag displacement x+iy\n      c = c0 + (zoom*bound) * (vec2(iMouse.x, iMouse.y) - vec2(iMouse.z,iMouse.w)) / iResolution.xy;  // Julia set parameter by mouse\n    } else if(iMouse.x != iMouse.z && iMouse.y != iMouse.w) {\n      // save the new parameter on mouse release\n      c0 = c;\n    }\n    \n    // Take input and adjust view - with time limiter to prevent fast frame rates from hurting\n    if(t - timestamp > timestep) {\n        vec2 pan = vec2(0.);\n        timestamp = t;\n        if(keyheld(kZ)) zoom *= 0.98;\n        if(keyheld(kX)) zoom *= 1.02;\n        if(zoom > 3.) zoom = 3.;\n        if(zoom < 1.0e-5) zoom = 1.0e-5;\n        if(keyheld(kLeft)) pan += vec2(-1.,0.);\n        if(keyheld(kRight)) pan += vec2(1.,0.);\n        if(keyheld(kUp)) pan += vec2(0.,1.);\n        if(keyheld(kDown)) pan += vec2(0.,-1.);\n    \tcenter = center + 0.07*zoom*pan;\n    }\n    \n    // Store the data if this is the appropriate buffer coordinate\n    if(addr == aTimestamp) {\n        fragColor = vec4(timestamp,0.,0.,0.);\n    } else if(addr == aCenter) {\n        fragColor = vec4(center,0.,0.);\n    } else if(addr == aZoom) {\n        fragColor = vec4(zoom,0.,0.,0.);\n    } else if(addr == aParam) {\n        fragColor = vec4(c, 0.,0.);\n    } else if(addr == aParam0) {\n        fragColor = vec4(c0, 0.,0.);\n    }\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/// Program State and Persistence ///\n\n// Shared Constants\nconst float bound = 1.8; // graph covers [-bound,bound] x [-bound,bound]\nconst float timestep = 0.02;\n\n// Shared buffer addresses\nconst ivec2 aTimestamp = ivec2(1,0);\nconst ivec2 aCenter = ivec2(2,0);\nconst ivec2 aZoom = ivec2(3,0);\nconst ivec2 aParam = ivec2(4,0);\nconst ivec2 aParam0 = ivec2(5,0);\nconst ivec2 addressBounds = ivec2(5,0);\n\n// Shared variables (loaded from buffer)\nfloat timestamp = 0.;\nvec2 center = vec2(0.);\nfloat zoom=1.;\nvec2 c=vec2(0.), c0=vec2(0.);\n\nvec4 load(in sampler2D channel, in ivec2 address)\n{\n    return texelFetch(channel, address, 0);\n}\n\nvoid get_state(in sampler2D channel)\n{\n    timestamp = load(channel, aTimestamp).x;\n    center = load(channel, aCenter).xy;\n    zoom = load(channel, aZoom).x;\n    c = load(channel, aParam).xy;\n    c0 = load(channel, aParam0).xy;\n}\n","name":"Common","description":"","type":"common"}]}