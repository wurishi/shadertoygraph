{"ver":"0.1","info":{"id":"tsG3zR","date":"1573388746","viewed":794,"name":"Laser Renderer","username":"FreddyDoll","description":"Rendering Lines in 3D space","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","lines","vector","renderer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 beamCol = vec3(.5,.2,.1);\nconst vec3 glowCol = vec3(0.2,.5,0.2);\n\nconst int pointCount = 8;\nconst vec3 points[pointCount] = vec3[pointCount](\n    vec3(.2,+.2,+.2),\n    vec3(.2,+.2,-.2),\n    vec3(.2,-.2,-.2),\n    vec3(.2,-.2,+.2),\n    \n    vec3(-.2,+.2,+.2),\n    vec3(-.2,+.2,-.2),\n    vec3(-.2,-.2,-.2),\n    vec3(-.2,-.2,+.2)\n);\n\nconst int lineCount = 12;\nconst ivec2 lines[lineCount] = ivec2[lineCount](\n    ivec2(0,1),\n    ivec2(1,2),\n    ivec2(2,3),\n    ivec2(3,0),\n    \n    ivec2(4,5),\n    ivec2(5,6),\n    ivec2(6,7),\n    ivec2(7,4),\n    \n    ivec2(0,4),\n    ivec2(1,5),\n    ivec2(2,6),\n    ivec2(3,7)\n    );\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec3 dLine(vec2 p, vec2 start, vec2 end,float thickness)\n{\n    \n    vec2 dir = normalize(end-start);\n    float l = length(start-end);\n    vec2 ndir = vec2(dir.y,-dir.x);\n    float dLine = abs(dot(start-p,ndir));\n    float dFuss = dot(p-start,dir);\n    if(dFuss<0.)\n        dLine = length(p-start);\n    else if(dFuss > l)\n        dLine = length(p-(start+l*dir));\n        \n    thickness+=(rand(p*iTime*dFuss)-0.5)*0.001;\n        \n    vec3 ret=smoothstep(3.*thickness,thickness*1.1,dLine)*beamCol;\n    if(dLine>thickness)\n        ret+=smoothstep(8.*thickness,thickness,dLine)*glowCol;\n    return ret;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.)/max(iResolution.x,iResolution.y);\n\n    vec3 up = vec3(0.,0.,1.);\n    float camDist = (sin(iTime*.2)+2.);\n    vec3 camPos = vec3(camDist*sin(iTime),camDist*cos(iTime),0.8*sin(iTime*0.8));\n    vec3 camDir = normalize(-camPos);\n    vec3 camX = cross(camDir,up);\n    vec3 camY = cross(camDir,camX);\n    \n    mat3 camFrame = mat3(camX,camY,camDir);\n    \n    vec3 projected[pointCount];\n    for(int n=0;n<pointCount;n++)\n    {\n\t\tprojected[n] = (points[n] - camPos)*camFrame;\n        projected[n].xy /= projected[n].z;\n    }\n\n    fragColor = vec4(0.,0.,0.,1.0);\n    for(int n=0;n<lineCount;n++)\n    {\n    \tfragColor += vec4(dLine(uv,projected[lines[n].x].xy,projected[lines[n].y].xy,0.003/projected[lines[n].y].z),1.);\n    }\n}","name":"Image","description":"","type":"image"}]}