{"ver":"0.1","info":{"id":"3tBcDm","date":"1594487400","viewed":309,"name":"The Engineer - Solskogen 2020","username":"bitnenfer","description":"My entry for the 4k executable graphics category at Solskogen 2020.\n[url]https://www.pouet.net/prod.php?which=86207[/url]","likes":19,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","pathtracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* ================================================================ */\n/* The Engineer - 4k Executable Graphics released at Solskogen 2020 */\n/* \t\t\t\t\t\t\t    by\t\t\t\t\t\t\t\t\t*/ \n/* \t\t\tbitnenfer / Latitude Independent Association\t\t\t*/\n/* ================================================================ */\n\n/* Port from HLSL to ESSL */\n/* Source: Work based from Luna / yx path tracer https://www.shadertoy.com/view/ts2cWm */\n/* Source: http://blog.hvidtfeldts.net/index.php/2015/01/path-tracing-3d-fractals/ */\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec3 color = texture(iChannel0, uv).rgb;\n\tfragColor = vec4(clamp((color * (2.51 * color + 0.03)) / (color * (2.43 * color + 0.59) + 0.14), 0.0, 1.0), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/* ================================================================ */\n/* The Engineer - 4k Executable Graphics released at Solskogen 2020 */\n/* \t\t\t\t\t\t\t    by\t\t\t\t\t\t\t\t\t*/ \n/* \t\t\tbitnenfer / Latitude Independent Association\t\t\t*/\n/* ================================================================ */\n\n/* Port from HLSL to ESSL */\n/* Source: Work based from Luna / yx path tracer https://www.shadertoy.com/view/ts2cWm */\n/* Source: http://blog.hvidtfeldts.net/index.php/2015/01/path-tracing-3d-fractals/ */\n#define f1 float\n#define f2 vec2\n#define f3 vec3\n#define f4 vec4\n#define NZ normalize\n#define LN length\n#define M min\n#define Q max\n#define PHI 1.6180\n#define PI 3.1415\n#define mul(x,y) (x) * (y)\nf3 seed = f3(0, 0, 0);\nf1 random()\n{\n    return fract(sin(fract(sin(dot(seed.xy, f2(12.98, 78.23)) * (seed.z += 13.)) * 437.54))*73.54);\n}\n\nf3 getSampleBiased(f3 dir, f1 power) {\n    dir = NZ(dir);\n    f3 o1 = NZ(abs(dir.x) > abs(dir.z) ? f3(-dir.y, dir.x, 0) : f3(0, -dir.z, dir.y));\n    f3 o2 = NZ(cross(dir, o1));\n    f2 r = f2(random(), random());\n    r.x = r.x * 2. * PI;\n    r.y = pow(r.y, 1. / (power + 1.));\n    f1 oneminus = sqrt(1. - r.y * r.y);\n    return cos(r.x) * oneminus * o1 + sin(r.x) * oneminus * o2 + r.y * dir;\n}\n\nf1 hash( f1 n ) { return fract(sin(n)*753.5); }\n\nf4 noised( in f3 x )\n{\n    f3 p = floor(x);\n    f3 w = fract(x);\n    f3 u = w*w*(3.-2.*w);\n    f3 du = 6.*w*(1.-w);\n    \n    f1 n = p.x + p.y*157. + 113.*p.z;\n    \n    f1 a = hash(n);\n    f1 b = hash(n+  1.);\n    f1 c = hash(n+157.);\n    f1 d = hash(n+158.);\n    f1 e = hash(n+113.);\n    f1 f = hash(n+114.);\n    f1 g = hash(n+270.);\n    f1 h = hash(n+271.);\n    \n    f1 k0 =   a;\n    f1 k1 =   b - a;\n    f1 k2 =   c - a;\n    f1 k3 =   e - a;\n    f1 k4 =   a - b - c + d;\n    f1 k5 =   a - c - e + g;\n    f1 k6 =   a - b - e + f;\n    f1 k7 = - a + b + c - d + e - f - g + h;\n\n    return f4( k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z, \n                 du * (f3(k1,k2,k3) + u.yzx*f3(k4,k5,k6) + u.zxy*f3(k6,k4,k5) + k7*u.yzx*u.zxy ));\n}\n\nf4 fbmd( in f3 x )\n{\n    const f1 scale  = 1.5;\n\n    f1 a = 0.,\n    b = 0.5,\n    f = 1.;\n    f3  d = f3(0,0,0);\n    for( int i=0; i<3; i++ )\n    {\n        f4 n = noised(f*x*scale);\n        a += b*n.x;           // accumulate values      \n        d += b*n.yzw*f*scale; // accumulate derivatives\n        b *= 0.5;             // amplitude decrease\n        f *= 1.8;             // frequency increase\n    }\n\n    return f4( a, d );\n}\n\nmat2 rot(f1 r)\n{\n    f1 c = cos(r), s = sin(r);\n    return mat2(c, s, -s, c);\n}\n\nstruct HD\n{\n    f1 D;\n    f3 C;\n    f1 S;\n    f1 X;\n    f1 T;\n    f1 I;\n    f1 G;\n    bool E;\n};\n\n/* iq's distance functions */\nf1 sdBox( f3 p, f3 b )\n{\n  f3 q = abs(p) - b;\n  return LN(Q(q,0.)) + M(Q(q.x,Q(q.y,q.z)),0.);\n}\n\nf1 sdCapsule( f3 p, f3 a, f3 b, f1 r )\n{\n  f3 pa = p - a, ba = b - a;\n  return LN( pa - ba*clamp( dot(pa,ba)/dot(ba,ba), 0., 1. ) ) - r;\n}\n    \nHD opUnion(HD a, HD b)\n{\n    if (a.D < b.D) return a;\n    return b;\n}\n\nf1 fOpDifferenceRound(f1 a, f1 b, f1 r) {\n    return M(-r, Q (a, -b)) + LN(Q(f2(r + a,r + -b), f2(0, 0)));\n}\n\nf1 smin( f1 a, f1 b, f1 k )\n{\n    f1 h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1. );\n    return mix( b, a, h ) - k*h*(1.-h);\n}\n\n// struct HD\n// {\n//     f1 D;\n//     f3 C;\n//     f1 S;\n//     f1 X;\n//     f1 T;\n//     f1 ior;\n//     f1 G;\n//     bool E;\n// };\n\nHD map(f3 p)\n{\n    f4 noiseVec = fbmd(p * 2.);\n    f4 noiseVec2 = fbmd(p * 5.);\n    HD scene;\n    scene.D = 50.;\n    f3 p0 = p - f3(0., -1.4, -4.),p1,ap,neckp,e2p,hp,eyp;\n    p0.xy = mul(p0.xy, rot(-0.85));\n\n    /* ================ */\n    /* =Feto Ingeniero= */\n    /* ================ */\n    p1 = p0 + f3(0.1, 0.1, 0);\n    f1 fetoSDF = LN(p1 - f3(0, 0.3, 0)) - 0.25,fetoEyesSDF,fetoSphereSDF,alienHeadSDF,\n    alienHeadBlend,alienEyesHolesSDF,alienEyesHolesSDF2,alienHandSDF,alienEyesSDF;\n    fetoSDF = smin(fetoSDF, LN(p1 - f3(0.1, 0.3, 0)) - 0.25, 0.1);\n    fetoSDF = smin(fetoSDF, LN(p1 - f3(-0.1, 0.12, 0)) - 0.2, 0.1);\n    //fetoSDF = smin(fetoSDF, LN(p1 - f3(-0.12, 0.0, 0)) - 0.15, 0.1);\n    fetoSDF = smin(fetoSDF, LN(p1 - f3(-0.04, -0.1, 0)) - 0.15, 0.2);\n    fetoSDF = smin(fetoSDF, LN(p1 - f3(0.1, -0.2, 0)) - 0.23, 0.2);\n    //fetoSDF = smin(fetoSDF, sdCapsule(p1 - f3(0.1, -0.24, -0.19), f3(0, 0, 0), f3(0.15, 0.1, -0.1), 0.05), 0.03);\n    fetoSDF = smin(fetoSDF, sdCapsule(p1 - f3(0.1, -0.24, -0.19) - f3(0.15, 0.1, -0.1), f3(0, 0, 0), f3(0.10, -0.1, 0.0), 0.05), 0.03);\n    fetoSDF = smin(fetoSDF, sdCapsule(p1 - f3(0.1, -0.24, -0.19) - f3(0.15, 0.1, -0.1) - f3(0.10, -0.1, 0.0), f3(0, 0, 0), f3(0.05, 0.05, 0.0), 0.05), 0.03);\n    fetoSDF = smin(fetoSDF, sdCapsule(p1 - f3(0.1, -0.24, 0.19), f3(0, 0, 0), f3(0.15, 0.1, 0.1), 0.05), 0.03);\n    fetoSDF = smin(fetoSDF, sdCapsule(p1 - f3(0.1, -0.24, 0.19) - f3(0.15, 0.1, 0.1), f3(0, 0, 0), f3(0.10, -0.1, 0.0), 0.05), 0.03);\n    fetoSDF = smin(fetoSDF, sdCapsule(p1 - f3(0.1, -0.24, 0.19) - f3(0.15, 0.1, 0.1) - f3(0.10, -0.1, 0.0), f3(0, 0, 0), f3(0.05, 0.05, 0.0), 0.05), 0.03);\n   //fetoSDF = smin(fetoSDF, sdCapsule(p1 - f3(-0, -0.01, -0.19), f3(0, 0, 0), f3(0.1, -0.03, -0.1), 0.05), 0.03);\n   // fetoSDF = smin(fetoSDF, sdCapsule(p1 - f3(-0, -0.01, -0.19)-f3(0.1, -0.03, -0.1), f3(0, 0, 0), f3(0.15, 0.03, 0.05), 0.05), 0.03);\n    fetoSDF = smin(fetoSDF, sdCapsule(p1 - f3(-0, -0.01, 0.19), f3(0, 0, 0), f3(0.1, -0.03, 0.1), 0.05), 0.03);\n    fetoSDF = smin(fetoSDF, sdCapsule(p1 - f3(-0, -0.01, 0.19)-f3(0.1, -0.03, 0.1), f3(0, 0, 0), f3(0.15, 0.03, -0.05), 0.05), 0.03);\n    fetoEyesSDF = LN(abs(p1 - f3(0.18, 0.14, 0)) - f3(0, 0, 0.18)) - 0.02;\n    fetoEyesSDF = M(fetoEyesSDF, LN(abs(p1 - f3(0.12, 0.14, 0)) - f3(0, 0, 0.2)) - 0.02);\n    fetoEyesSDF = M(fetoEyesSDF, LN(abs(p1 - f3(0.15, 0.17, 0)) - f3(0, 0, 0.22)) - 0.02);\n    HD fetoInner = HD( fetoSDF+0.08, f3(1.1, 0.1, 0.1)*0.5, 0., 0., 0., 0., 0., false );\n    HD feto = HD( (abs(fetoSDF)-0.005)*0.5, f3(1, 0.8, .8)*1.2, 0., 0., 0.7, 1.2, 150., false );\n    HD fetoEyes = HD( fetoEyesSDF, f3(1, 0.8, 0.8)*1.9, 0., 0., 0.0, 0.0, 0., true );\n    scene = opUnion(scene, fetoInner);\n    scene = opUnion(scene, feto);\n    scene = opUnion(scene, fetoEyes);\n    /* ================ */\n\n    /* ================ */\n    /* = Feto Esfera == */\n    /* ================ */\n    fetoSphereSDF = length(p0) - 0.76;\n    HD fetoSphere = HD( (abs(fetoSphereSDF) - 0.01)*0.5, f3(0.93, .9, 1)*1.2, 1., 1000., 0.8, 1.3, 9000., false );\n    scene = opUnion(scene, fetoSphere);\n    /* ================ */\n\n    /* ================ */\n    /* == Alien Head == */\n    /* ================ */\n    ap = p * f3(1, 0.8, 0.9);\n    ap -= f3(0, 0, 0.8);\n    ap.xy = mul(ap.xy, rot(0.4));\n    alienHeadSDF = LN(ap) - 2.;\n    alienHeadBlend = 0.8;\n    alienHeadSDF = smin(alienHeadSDF, LN((abs(ap) - f3(1.7, 0, 0))*f3(0.9, 1, 1.8)) - 0.5, 0.1);\n    alienHeadSDF = fOpDifferenceRound(alienHeadSDF, LN((abs(ap-f3(0, 0, -0.1)) - f3(2.0, 0, 0))*f3(0.2,1,1.2)) - 0.2, 0.1);\n    alienHeadSDF = smin(alienHeadSDF, LN((ap + f3(0, 1.9, 1.1)) * f3(0.8, 1, 1)) - 0.6, alienHeadBlend);\n    alienHeadSDF = fOpDifferenceRound(alienHeadSDF, (LN(abs(ap + f3(0, 2.2, 0.6)) - f3(2.5, 0, 0)) - 1.6), 0.8);\n    alienHeadSDF = fOpDifferenceRound(alienHeadSDF, LN(ap + f3(0, 1.7,-1.6)) - 1.4, 0.8);\n    neckp = ap;\n    neckp.xy = mul(neckp.xy, rot(-0.6));\n    float eyeHoleSize = 0.15;\n    alienHeadSDF = smin(alienHeadSDF, sdCapsule(neckp - f3(0.9, 0, 0.5), f3(0, 0, 0), f3(0, -5, 1), 0.5), 1.5);\n    alienEyesHolesSDF = LN(abs(ap - f3(0, -0.4, -1.6)) - f3(1, 0, 0)) - eyeHoleSize;\n    alienEyesHolesSDF = M(alienEyesHolesSDF, LN((ap - f3(0.9, -0.7, -1.4)) - f3(0.2, 0, 0)) - eyeHoleSize);\n    alienEyesHolesSDF = M(alienEyesHolesSDF, LN((ap - f3(0.55, -0.7, -1.67)) - f3(0.2, 0, 0)) - eyeHoleSize);\n    alienEyesHolesSDF = M(alienEyesHolesSDF, LN((ap - f3(-1, -0.7, -1.67)) - f3(0.2, 0, 0)) - eyeHoleSize);\n    alienEyesHolesSDF = M(alienEyesHolesSDF, LN((ap - f3(-1.3, -0.7, -1.4)) - f3(0.2, 0, 0)) - eyeHoleSize);\n    alienEyesHolesSDF = fOpDifferenceRound(alienEyesHolesSDF, (alienEyesHolesSDF+.005), 0.1);\n    alienHeadSDF = smin(alienHeadSDF, alienEyesHolesSDF, 0.1);\n    alienHeadSDF = fOpDifferenceRound(alienHeadSDF, (LN(abs(ap + f3(0, 1.6, 1.9))*f3(2.8,0.2,0.01)-f3(0.12, 0, 0)) - 0.1),0.05);\n    alienHeadSDF = fOpDifferenceRound(alienHeadSDF, (LN(abs(ap + f3(0, 1.65, 1.9))*f3(2.8,0.5,0.01)-f3(0.4, 0, 0)) - 0.1),0.2);\n    alienHeadSDF = fOpDifferenceRound(alienHeadSDF, (LN(abs(ap + f3(0, 1.7, 1.9))*f3(2.8,0.9,0.01)-f3(0.7, 0, 0)) - 0.1),0.2);\n    \n    e2p = f3(1, 1, 0.4);\n    alienEyesHolesSDF2 = LN((abs(ap - f3(0, -0.4, -1.6)) - f3(1, 0, 0))*e2p) - eyeHoleSize;\n    alienEyesHolesSDF2 = M(alienEyesHolesSDF2, LN(((ap - f3(0.9, -0.7, -1.4)) - f3(0.2, 0, 0))*e2p) - eyeHoleSize);\n    alienEyesHolesSDF2 = M(alienEyesHolesSDF2, LN(((ap - f3(0.6, -0.7, -1.67)) - f3(0.2, 0, 0))*e2p) - eyeHoleSize);\n    alienEyesHolesSDF2 = M(alienEyesHolesSDF2, LN(((ap - f3(-1, -0.7, -1.67)) - f3(0.2, 0, 0))*e2p) - eyeHoleSize);\n    alienEyesHolesSDF2 = M(alienEyesHolesSDF2, LN(((ap - f3(-1.3, -0.7, -1.4)) - f3(0.2, 0, 0))*e2p) - eyeHoleSize);\n    alienHeadSDF = fOpDifferenceRound(alienHeadSDF, alienEyesHolesSDF2, .1);\n\n    hp = ap;\n    hp.xy = mul(hp.xy, rot(-.4));\n    hp -= f3(0, 0.1, -1);\n    alienHandSDF = sdCapsule(hp - f3(0, -4, -4), f3(0, 0, .25), f3(0, .5, 0), .07);\n    alienHandSDF = smin(alienHandSDF, sdCapsule(hp - f3(0, -4, -4) - f3(0, .7, 0), f3(0, 0, 0), f3(0, .5, 0), .07), .23);\n    alienHandSDF = smin(alienHandSDF, sdCapsule(hp - f3(0, -4, -4) - f3(0, 1.4, 0), f3(0, 0, 0), f3(0, .5, .1), .07), .23);\n\n    alienHandSDF = smin(alienHandSDF, sdCapsule(hp - f3(0.8, -4, -4), f3(-0.1, 0, 0.25), f3(0, .5, 0), .07), .23);\n    alienHandSDF = smin(alienHandSDF, sdCapsule(hp - f3(0.8, -4, -4) - f3(0, 0.7, 0), f3(0, 0, 0), f3(0, .5, .1), .07), .23);\n    alienHandSDF = smin(alienHandSDF, sdCapsule(hp - f3(0.8, -4, -4) - f3(0, 1.4, 0.1), f3(0, 0, 0), f3(0, .25, .5), .07), .23);\n  \n    alienHandSDF = smin(alienHandSDF, sdCapsule(hp - f3(-.8, -4, -2.3), f3(-.1, 0, -.25), f3(0, .5, 0), .07), .23);\n    alienHandSDF = smin(alienHandSDF, sdCapsule(hp - f3(-.8, -4, -2.3) - f3(0, .7, 0), f3(0, 0, 0), f3(0, .5, -.1), .07), .23);\n    alienHandSDF = smin(alienHandSDF, sdCapsule(hp - f3(-.8, -4, -2.3) - f3(0, 1.4, -0.14), f3(0, 0, 0), f3(0, .25, -.2), .07), .23);\n\n    HD alienHeadInner = HD( alienHeadSDF+.08, f3(0.8,1,0.8)*(.4-noiseVec2.y*.6), 0., 0., 0., 0., 0., false );\n    HD alienHead = HD( (abs(alienHeadSDF-noiseVec.x*.08-noiseVec2.x*0.03) - .02) * .5,f3(1, 0.8, 0.75), .68, 1000., .75, 1.8, 0.5, false );\n    scene = opUnion(scene, alienHeadInner);\n    scene = opUnion(scene, alienHead);\n    alienHeadInner.D = (alienHandSDF)+0.005;\n    alienHead.D = abs(alienHandSDF-noiseVec.x*.08-noiseVec2.x*0.04) - 0.01;\n    scene = opUnion(scene, alienHeadInner);\n    scene = opUnion(scene, alienHead);\n     /* ================ */\n\n    /* ================ */\n    /* == Alien Eyes == */\n    eyp = p+f3(0, .2, -.64);\n    eyp.xy = mul(eyp.xy, rot(.5));\n\n    alienEyesSDF = LN((abs(eyp - f3(0, -.4, -1.6)) - f3(1, 0, 0))) - .16;\n    alienEyesSDF = M(alienEyesSDF, LN(((eyp - f3(0.9, -0.7, -1.4)) - f3(.2, 0, 0))) - .16);\n    alienEyesSDF = M(alienEyesSDF, LN(((eyp - f3(0.6, -0.7, -1.67)) - f3(.2, 0, 0))) - .16);\n    alienEyesSDF = M(alienEyesSDF, LN(((eyp - f3(-1.1, -0.7, -1.67)) - f3(.2, 0, 0))) - .16);\n    alienEyesSDF = M(alienEyesSDF, LN(((eyp - f3(-1.4, -0.67, -1.4)) - f3(.2, 0, 0))) - .16);\n    HD alienEyesInner = HD( alienEyesSDF+.08, f3(0,0,0), 1., 1000., 0., 0., 0., false );\n    HD alienEyes = HD( abs(alienEyesSDF)-.01, f3(1, 1, 1), 1., 1000., .8, 1.3, 10., false );\n    scene = opUnion(scene, alienEyes);\n    scene = opUnion(scene, alienEyesInner);\n    /* ================ */\n    \n    /* ================ */\n    /* ===== Light ==== */\n    /* ================ */\n    HD light = HD( sdBox((p) + f3(5, 5, 18), f3(10, 15, .1)), f3(1, 1, 1)*2.5, 0., 0., 0., 0., 0., true );\n    HD light2 = HD( sdBox((p) + f3(-22, -10, -28), f3(25, 10, .1)), f3(1, .5, 1)*2., 0., 0., 0., 0., 0., true );\n    scene = opUnion(scene, light);\n    scene = opUnion(scene, light2);\n    /* ================ */\n    return scene;\n}\n\nf3 pathtrace(f2 uv)\n{\n    f3 ro = f3(-0.8,-.5,-18.5);\n    f3 rd = NZ(f3(uv.x, uv.y, 6.5));\n    f3 direct = f3(0, 0, 0), luminance = f3(1, 1, 1);\n    f2 e = f2(0, .001);\n    f1 mx = (.45 * 2. - 1.) * 6.28;\n    f1 my = (.8077 * 2. - 1.) * .8;\n    ro.yz = mul(ro.yz, rot(my));\n    rd.yz = mul(rd.yz, rot(my));\n    ro.xz = mul(ro.xz, rot(mx));\n    rd.xz = mul(rd.xz, rot(mx));\n    for (int b = 0; b < 7; ++b)\n    {    \n        HD data;\n        bool hit = false;\n        f1 t = 0.0;\n        for (int i = 0; i < 250; ++i)\n        {\n            HD d = map(ro + rd * t);\n            if (d.D < .001)\n            {\n                data = d;\n                data.D = t;\n                hit = true;\n                break;\n            }\n            t += d.D;\n            if (t > 50.) break;\n        }\n        if (hit)\n        {\n            f3 p = ro + rd * data.D;\n            f3 n = NZ(map(p).D - f3(\n                map(p - e.yxx).D,\n                map(p - e.xyx).D,\n                map(p - e.xxy).D\n            ));\n            f1 rng = random();\n            f1 offset = .2;\n            if (rng < data.T)\n            {\n                rd = getSampleBiased(NZ(refract(rd, n, 1./Q(data.I, 1.))), data.G);\n                offset = .08;\n            }\n            else if (rng < data.S)\n            {\n                rd = getSampleBiased(NZ(reflect(rd, n)), data.X);\n            }\n            else\n            {\n                rd = getSampleBiased(n, 1.);\n            }\n            rd = NZ(rd);\n            ro = p + rd * offset;\n            luminance *= data.C;\n            \n            if (data.E)\n            {\n                direct += luminance;\n            }\n        }\n        else\n        {\n            break;\n        }\n    }\n    return direct;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    f2 uv = f2(fragCoord.xy) / iResolution.xy;\n    if (uv.y < .0666 || uv.y > .9333)\n    {\n        fragColor = f4(0, 0, 0, 1);\n        return;\n    }\n    f3 fragColor3 = f3(0, 0, 0);\n    f4 prevFrame = texture(iChannel0, uv);\n    if (iFrame < 5000)\n    {\n        seed = f3(uv,iTime);\n        f2 jitter = 2. / iResolution.xy * (f2(random(), random()) * 2. - 1.);\n        fragColor3 = pathtrace((uv * 2. - 1.) * f2(iResolution.x / iResolution.y, 1.) + jitter);\n        f1 blend = (prevFrame.a == 0. || iTime < .1 || iMouse.z > 0.) ? 1. : 1. / (1. + (1. / prevFrame.a));\n        fragColor3 = mix(prevFrame.rgb, fragColor3, blend);\n        fragColor = f4(fragColor3, blend);\n    }\n    else\n    {\n        fragColor = prevFrame;\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"}]}