{"ver":"0.1","info":{"id":"WsVyWW","date":"1602854072","viewed":247,"name":" segment tracing, knot scene","username":"halcy","description":"https://www.shadertoy.com/view/wdGyDD but with an extremely unpleasant implicit surface and defines for using only standard sphere tracing or only segment tracing","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["segment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SSAA\nconst int SSAA_Cnt = 1;\n//#define showCost\n\n#define EVALS_INSTEAD_OF_STEPS // Uncomment to see evals instead of steps\n\n#define eps 0.0001\n#define global_k 10.0\n#define Lipschitz_GridSize 0.05\n\n// Uncomment exactly one of these\n//#define ONLY_PROPOSED\n//#define ONLY_OLD\n#define BOTH\n\n#define PI 3.141593\nvec2 rotate(vec2 v, float angle) {\n    return vec2(\n         cos(angle) * v.x + sin(angle) * v.y,\n        -sin(angle) * v.x + cos(angle) * v.y\n    );\n}\n\nfloat scene(vec3 pos)\n{\n    \n    float rad1 = 2.3; // 0 -> 2.3\n\tfloat rad2 = 0.2; // 0 -> 2.3\n    float rad3 = 0.7; // 0 -> 2.3\n    float rad4 = 0.1; // 0 -> 2.3\n    float a = 1.0; // 0 -> 5\n    float b = 1.0; // 0 -> 5\n    float polyfold = 8.0; // 0 -> 15\n    \n    vec3 plane_p = pos;\n    float mobius = (a + b / polyfold) * atan(plane_p.y, plane_p.x);\n    plane_p.x = length(plane_p.xy) - rad1;\n    plane_p.xz = rotate(plane_p.xz, mobius);\n    float a_step = polyfold / (2.0 * PI);\n    float angle = floor(0.5 + a_step *(PI / 2.0 - atan(plane_p.x, plane_p.z))) / a_step;\n    plane_p.yz = rotate(plane_p.yz, rad4);\n    plane_p.xz = rotate(plane_p.xz, angle);\n    plane_p.x = plane_p.x - rad3;\n    float knot_dist = length(plane_p.xz) - rad2;\n\n    return knot_dist;\n}\n\nvec3 calcGradient( in vec3 pos )\n{\n    const vec3 v1 = vec3(1.0,0.0,0.0);\n    const vec3 v2 = vec3(0.0,1.0,0.0);\n    const vec3 v3 = vec3(0.0,0.0,1.0);\n\treturn (vec3(scene(pos + v1*eps),scene(pos + v2*eps),scene(pos + v3*eps))\n           -vec3(scene(pos - v1*eps),scene(pos - v2*eps),scene(pos - v3*eps)))/(2.0*eps);\n}\nvec3 calcGradientCheap( in vec3 pos ,in float original)\n{\n    const vec3 v1 = vec3(1.0,0.0,0.0);\n    const vec3 v2 = vec3(0.0,1.0,0.0);\n    const vec3 v3 = vec3(0.0,0.0,1.0);\n\treturn (vec3(scene(pos + v1*eps),scene(pos + v2*eps),scene(pos + v3*eps))\n           -vec3(original))/(eps);\n}\nfloat calcGradientDirAbs( in vec3 pos, in vec3 dir )\n{\n    return abs(scene(pos + dir*eps) - scene(pos - dir*eps))/(2.0*eps);\n}\nvec2 sceneK(vec3 start,vec3 end,vec3 dir)\n{\n    float dist = 0.0;\n    dist = scene(start);\n    \n    //vec3 gs = calcGradient(start);\n    //vec3 ge = calcGradient(end);\n    //vec3 gs = calcGradientCheap(start,dist);\n    //vec3 ge = calcGradientCheap(end,dist);\n    //float fds = abs(dot(gs,dir));\n    //float fde = abs(dot(ge,dir));\n    float fds = calcGradientDirAbs(start, dir);\n    float fde = calcGradientDirAbs(end, dir);\n\n    float lam = max(fds,fde);\n    \n    \n    return vec2(lam,dist);\n}\nvec2 calcIntersection( in vec3 ro, in vec3 rd )\n{\n    float mint = 5.0;\n    float maxt = 25.0;//min max intersect\n\tfloat t = mint;\n\n\tfor(int i=0;i<2048;i++)\n\t{\n\t\tfloat d = scene(ro+rd*t);\n\t\tif (d < 0.0)\n        {\n\t\t\treturn vec2(t,float(i));\n        }\n        float ts = max(abs(d)/global_k, eps);\n\t\tt += ts;\n        if(t > maxt)\n        {\n            break;\n        }\n\t}\n\treturn vec2(-1.0,0.0);\n}\n\nvec2 calcIntersection2( in vec3 ro, in vec3 rd )\n{\n    float mint = 5.0;\n    float maxt = 25.0;\n\tfloat t = mint;\n\tfloat c = 1.5;\n\tfloat ts = (maxt - mint);\n    ts = min(ts,Lipschitz_GridSize);\n\tfor(int i=0;i<2048;i++)\n\t{\n        vec3 pt = ro+rd*t;\n\t\tvec3 pts = ro+rd*(t + ts);\n        vec2 data = sceneK(pt,pts,rd);\n\t\tfloat dist = data.y;\n\t\tif (dist < 0.0)\n        {\n            #ifdef EVALS_INSTEAD_OF_STEPS\n\t\t\t\treturn vec2(t,float(i*(1+2+2)));\n            #else\n                return vec2(t,float(i));\n            #endif\n        }\n\t\tfloat k = data.x;\n\t\tfloat tk = abs(dist) / max(k,0.01);\n\t\ttk = max(abs(dist)/global_k,min(tk, ts));\n\t\tts = tk;\n\t\tif(tk >= 0.0)\n\t\t{\n\t\t\tt += max(tk, eps);\n\t\t}\n\t\tts = tk * c;\n        ts = min(ts,Lipschitz_GridSize);\n        if(t > maxt)\n        {\n            break;\n        }\n\t}\n\treturn vec2(-1.0,0.0);\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const vec3 v1 = vec3(1.0,0.0,0.0);\n    const vec3 v2 = vec3(0.0,1.0,0.0);\n    const vec3 v3 = vec3(0.0,0.0,1.0);\n\treturn normalize(vec3(scene(pos + v1*eps),scene(pos + v2*eps),scene(pos + v3*eps))\n                     -vec3(scene(pos - v1*eps),scene(pos - v2*eps),scene(pos - v3*eps)));\n}\nvec3 illuminate( in vec3 pos , in vec3 camdir )\n{\n    return calcNormal(pos)*0.5+0.5;\n}\n\nvec3 background( vec3 rd )\n{\n\treturn texture(iChannel0, rd).rgb * texture(iChannel0, rd).rgb;\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 colAcc = vec3(0.0,0.0,0.0);\n    \n    float t = 1.5*iTime;\n    vec3 campos = vec3(10.0*sin(t*0.3),3.5*sin(t*0.5)+6.0,-10.0*cos(t*0.3));\n    vec3 camtar = vec3(0.0,0.0,0.0);\n    \n    mat3 camMat = calcLookAtMatrix( campos, camtar, 0.0 );\n    #ifdef SSAA\n    for(int i=-SSAA_Cnt;i<SSAA_Cnt;i++)\n    {\n    for(int j=-SSAA_Cnt;j<SSAA_Cnt;j++)\n    {    \n    vec2 xy = (fragCoord.xy+0.5*(vec2(i,j)+vec2(0.5,0.5))/float(SSAA_Cnt) - iResolution.xy/2.0) / min(iResolution.xy.x, iResolution.xy.y);\n    #else\n    vec2 xy = (fragCoord.xy - iResolution.xy/2.0) / min(iResolution.xy.x, iResolution.xy.y); \n    #endif\n\tvec3 camdir = normalize( camMat * vec3(xy,1.0) );\n    \n    vec3 col = vec3(0.0,0.0,0.0);\n        float dist = 0.0;\n    float times = 256.0;\n#ifdef BOTH   \n    if(fragCoord.x/iResolution.x>0.501)\n    {        \n        vec2 data = calcIntersection2(campos, camdir);\n        dist = data.x;\n        times = data.y;\n    }\n    else if(fragCoord.x/iResolution.x<0.499)\n    {\n        vec2 data = calcIntersection(campos, camdir);\n        dist = data.x;\n        times = data.y;\n    }\n    else\n    {\n        dist = -2.0;   \n    }\n#endif\n        \n#ifdef ONLY_PROPOSED\n\tvec2 data = calcIntersection2(campos, camdir);\n    dist = data.x;\n    times = data.y;\n#endif\n        \n#ifdef ONLY_OLD\n\tvec2 data = calcIntersection(campos, camdir);\n    dist = data.x;\n    times = data.y; \n#endif\n        \n    if (dist==-1.0)\n    {\n        col = background(camdir);\n    }\n    else if(dist == -2.0)\n    {\n        col = vec3(1.0,0.0,0.0);   \n    }\n    else\n    {\n    \tvec3 inters = campos + dist * camdir;\n    \tcol = illuminate(inters, camdir);\n    }\n    \n    float bannerHeight = 0.2;\n    float bannerOffset = 0.5*sin(iTime);\n    if(fragCoord.y/iResolution.y<0.5 +bannerOffset+ bannerHeight && fragCoord.y/iResolution.y>0.5+bannerOffset - bannerHeight)\n    {\n        #ifdef showCost\n        col = mix(vec3(0.0,1.0,0.0),vec3(1.0,0.0,0.0),times/128.0);   \n        #endif\n    }\n        col = pow(col, vec3(0.8));\n        colAcc+=col;\n        \n    #ifdef SSAA\n    }\n    }\n\tfragColor = vec4(colAcc/float(4*SSAA_Cnt*SSAA_Cnt),1.0);\n    #else\n    fragColor = vec4(colAcc,1.0);\n    #endif\n}\n","name":"Image","description":"","type":"image"}]}