{"ver":"0.1","info":{"id":"lcfXz4","date":"1729084938","viewed":115,"name":"Cheap? Wave Based Noise Forked","username":"Nieb","description":"This is a mess of tinkering.\nThough, the \"Bubbly Goop\" wave vectors produced an interesting result.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["noise","wave","sin","cos"],"hasliked":0,"parentid":"ctcXRj","parentname":"Cheap wave based noise"},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Original -by- afl_ext 2023\n\n//##############################################################################\n//##############################################################################\n#if 0\n//  Random normalized vectors:\nconst vec3 Wave[] = vec3[](\n    vec3( 0.279196,-0.667131, 0.690642), vec3(-0.664240, 0.629172,-0.403643),\n    vec3( 0.997788, 0.052717, 0.040495), vec3(-0.622084, 0.563070, 0.544025),\n    vec3(-0.964686,-0.210363,-0.158519), vec3(-0.470825, 0.877089,-0.095074),\n    vec3( 0.800082, 0.045761, 0.598143), vec3( 0.494922, 0.517846, 0.697773),\n\n    vec3( 0.771501, 0.371413,-0.516564), vec3( 0.761650, 0.569243,-0.309598),\n    vec3( 0.110063,-0.992238,-0.057877), vec3( 0.611018, 0.356810,-0.706643),\n    vec3(-0.832192, 0.481972,-0.274152), vec3( 0.524251, 0.638449,-0.563511),\n    vec3( 0.422480,-0.137603,-0.895866), vec3(-0.702963,-0.389678, 0.594974),\n\n    vec3( 0.825772, 0.552815,-0.111788), vec3( 0.101522,-0.994818, 0.005565),\n    vec3( 0.617009,-0.571622, 0.540877), vec3(-0.566232, 0.754613,-0.331572),\n    vec3(-0.264682, 0.455684, 0.849880), vec3(-0.472291,-0.561242, 0.679668),\n    vec3(-0.993287,-0.020693,-0.113814), vec3(-0.380304,-0.468103,-0.797652),\n\n    vec3( 0.648454,-0.350168,-0.675936), vec3(-0.982160,-0.182644,-0.044766),\n    vec3(-0.609546, 0.085353, 0.788142), vec3(-0.147970,-0.634050,-0.759003),\n    vec3( 0.327103, 0.471388,-0.819022), vec3(-0.580709, 0.669026,-0.463876),\n    vec3(-0.536004,-0.758832,-0.369964), vec3( 0.643686, 0.295622, 0.705887),\n\n    vec3( 0.872954, 0.108036, 0.475688), vec3( 0.528976,-0.630564,-0.567956),\n    vec3(-0.758875, 0.597431,-0.259201), vec3( 0.545057,-0.410643,-0.730948),\n    vec3(-0.525466, 0.687443,-0.501306), vec3(-0.649374, 0.759258, 0.042899),\n    vec3(-0.491596,-0.244813,-0.835703), vec3( 0.733889,-0.657876,-0.169133),\n\n    vec3( 0.481996,-0.828295,-0.285672), vec3( 0.023697,-0.778329, 0.627410),\n    vec3(-0.787985, 0.447105,-0.423292), vec3(-0.130078,-0.679416, 0.722131),\n    vec3( 0.732866,-0.666525,-0.136577), vec3( 0.386794, 0.643833,-0.660204),\n    vec3( 0.660071, 0.748717, 0.061068), vec3( 0.905584,-0.419935,-0.059766),\n\n    vec3( 0.655855, 0.369263, 0.658407), vec3( 0.244242,-0.881394, 0.404339),\n    vec3(-0.723977,-0.652822,-0.222892), vec3( 0.667514, 0.322202,-0.671276),\n    vec3( 0.003961, 0.585296,-0.810810), vec3(-0.357912, 0.900480,-0.247053),\n    vec3( 0.824031, 0.470402,-0.315747), vec3( 0.812673,-0.354620,-0.462393),\n\n    vec3(-0.174017,-0.109566, 0.978628), vec3( 0.598829,-0.234301, 0.765838),\n    vec3(-0.778627,-0.617773, 0.109985), vec3(-0.268305,-0.472539,-0.839476),\n    vec3(-0.129074,-0.910764, 0.392237), vec3( 0.575303, 0.519273, 0.631967),\n    vec3(-0.604903, 0.794533, 0.052998), vec3(-0.862521, 0.492076,-0.117975),\n\n    vec3( 0.896393,-0.270386,-0.351241), vec3(-0.450010, 0.521172, 0.725170),\n    vec3( 0.872962,-0.446094,-0.197329), vec3( 0.462365,-0.196462, 0.864651),\n    vec3( 0.398371,-0.514626, 0.759250), vec3(-0.935910, 0.351402, 0.024275),\n    vec3(-0.264305, 0.173093,-0.948779), vec3( 0.701079,-0.538708,-0.467206),\n\n    vec3( 0.108000, 0.398713, 0.910694), vec3( 0.340056,-0.690908, 0.637972),\n    vec3(-0.369864,-0.659681, 0.654233), vec3( 0.692135, 0.164169,-0.702850),\n    vec3(-0.078356, 0.804063,-0.589359), vec3(-0.458824,-0.426945, 0.779230),\n    vec3(-0.903967, 0.296495,-0.308113), vec3(-0.710780,-0.093143, 0.697220)\n);\n#elif 1\n//  \"Bubbly Goop\" -- Generated via 3D Fibonacci/Phyllotaxis Spiral:\nconst vec3 Wave[] = vec3[](\n    vec3(-0.106470, 0.116223,0.987500), vec3( 0.221354,-0.019426,0.975000),\n    vec3(-0.215289,-0.165058,0.962500), vec3( 0.054388, 0.307477,0.950000),\n    vec3( 0.186774,-0.293614,0.937500), vec3(-0.366940, 0.098641,0.925000),\n    vec3( 0.363035, 0.188546,0.912500), vec3(-0.149527,-0.409441,0.900000),\n\n    vec3(-0.175824, 0.425946,0.887500), vec3( 0.438487,-0.205193,0.875000),\n    vec3(-0.482861,-0.151455,0.862500), vec3( 0.264134, 0.455778,0.850000),\n    vec3( 0.117331,-0.533692,0.837500), vec3(-0.462314, 0.325025,0.825000),\n    vec3( 0.578127, 0.074918,0.812500), vec3(-0.386668,-0.458790,0.800000),\n\n    vec3(-0.025467, 0.615788,0.787500), vec3( 0.445772,-0.447954,0.775000),\n    vec3(-0.646298, 0.029885,0.762500), vec3( 0.507840, 0.423790,0.750000),\n    vec3(-0.090057,-0.669316,0.737500), vec3(-0.393366, 0.565365,0.725000),\n    vec3( 0.684563,-0.154003,0.712500), vec3(-0.619625,-0.355056,0.700000),\n\n    vec3( 0.220713, 0.691830,0.687500), vec3( 0.309458,-0.669784,0.675000),\n    vec3(-0.690991, 0.289181,0.662500), vec3( 0.715086, 0.257201,0.650000),\n    vec3(-0.358436,-0.681995,0.637500), vec3(-0.198976, 0.754840,0.625000),\n    vec3( 0.664885,-0.427517,0.612500), vec3(-0.788441,-0.135502,0.600000),\n\n    vec3( 0.495488, 0.639793,0.587500), vec3( 0.067556,-0.815360,0.575000),\n    vec3(-0.606927, 0.561456,0.562500), vec3( 0.835155,-0.004078,0.550000),\n    vec3(-0.624569,-0.566575,0.537500), vec3( 0.078543, 0.847470,0.525000),\n    vec3( 0.519130,-0.683994,0.512500), vec3(-0.852042, 0.155000,0.500000),\n\n    vec3( 0.738976, 0.465036,0.487500), vec3(-0.232596,-0.848690,0.475000),\n    vec3(-0.404803, 0.788814,0.462500), vec3( 0.837336,-0.310432,0.450000),\n    vec3(-0.832852,-0.339045,0.437500), vec3( 0.387654, 0.817985,0.425000),\n    vec3( 0.268397,-0.870521,0.412500), vec3(-0.790725, 0.463416,0.400000),\n\n    vec3( 0.901323, 0.193545,0.387500), vec3(-0.536854,-0.755753,0.375000),\n    vec3(-0.115260, 0.924829,0.362500), vec3( 0.713333,-0.607170,0.350000),\n    vec3(-0.940700,-0.034310,0.337500), vec3( 0.673591, 0.663815,0.325000),\n    vec3(-0.048511,-0.948678,0.312500), vec3(-0.607616, 0.735393,0.300000),\n\n    vec3( 0.948593,-0.132346,0.287500), vec3(-0.791878,-0.545257,0.275000),\n    vec3( 0.216370, 0.940360,0.262500), vec3( 0.477295,-0.842430,0.250000),\n    vec3(-0.923981, 0.299755,0.237500), vec3( 0.886499, 0.404345,0.225000),\n    vec3(-0.381637,-0.899554,0.212500), vec3(-0.327114, 0.923578,0.200000),\n\n    vec3( 0.867252,-0.461212,0.187500), vec3(-0.953259,-0.246316,0.175000),\n    vec3( 0.537697, 0.827331,0.162500), vec3( 0.162715,-0.975204,0.150000),\n    vec3(-0.780145, 0.610301,0.137500), vec3( 0.989156, 0.077109,0.125000),\n    vec3(-0.678316,-0.726107,0.112500), vec3( 0.009717, 0.994940,0.100000),\n\n    vec3( 0.665707,-0.741066,0.087500), vec3(-0.992467, 0.096872,0.075000),\n    vec3( 0.797928, 0.599503,0.062500), vec3(-0.183551,-0.981738,0.050000),\n    vec3(-0.528088, 0.848361,0.037500), vec3( 0.962837,-0.268925,0.025000),\n    vec3(-0.891837,-0.452184,0.012500), vec3( 0.352178, 0.935933,0.000000)\n);\n#elif 0\n//  \"Bubbly Goop\":   truncated\nconst vec3 Wave[] = vec3[](\n    vec3( 0.738976, 0.465036,0.487500), vec3(-0.232596,-0.848690,0.475000),\n    vec3(-0.404803, 0.788814,0.462500), vec3( 0.837336,-0.310432,0.450000),\n    vec3(-0.832852,-0.339045,0.437500), vec3( 0.387654, 0.817985,0.425000),\n    vec3( 0.268397,-0.870521,0.412500), vec3(-0.790725, 0.463416,0.400000),\n\n    vec3( 0.901323, 0.193545,0.387500), vec3(-0.536854,-0.755753,0.375000),\n    vec3(-0.115260, 0.924829,0.362500), vec3( 0.713333,-0.607170,0.350000),\n    vec3(-0.940700,-0.034310,0.337500), vec3( 0.673591, 0.663815,0.325000),\n    vec3(-0.048511,-0.948678,0.312500), vec3(-0.607616, 0.735393,0.300000),\n\n    vec3( 0.948593,-0.132346,0.287500), vec3(-0.791878,-0.545257,0.275000),\n    vec3( 0.216370, 0.940360,0.262500), vec3( 0.477295,-0.842430,0.250000),\n    vec3(-0.923981, 0.299755,0.237500), vec3( 0.886499, 0.404345,0.225000),\n    vec3(-0.381637,-0.899554,0.212500), vec3(-0.327114, 0.923578,0.200000),\n\n    vec3( 0.867252,-0.461212,0.187500), vec3(-0.953259,-0.246316,0.175000),\n    vec3( 0.537697, 0.827331,0.162500), vec3( 0.162715,-0.975204,0.150000),\n    vec3(-0.780145, 0.610301,0.137500), vec3( 0.989156, 0.077109,0.125000),\n    vec3(-0.678316,-0.726107,0.112500), vec3( 0.009717, 0.994940,0.100000),\n\n    vec3( 0.665707,-0.741066,0.087500), vec3(-0.992467, 0.096872,0.075000),\n    vec3( 0.797928, 0.599503,0.062500), vec3(-0.183551,-0.981738,0.050000),\n    vec3(-0.528088, 0.848361,0.037500), vec3( 0.962837,-0.268925,0.025000),\n    vec3(-0.891837,-0.452184,0.012500), vec3( 0.352178, 0.935933,0.000000)\n);\n#elif 0\n//  \"Bubbly Goop\":   reversed\nconst vec3 Wave[] = vec3[](\n    vec3( 0.352178, 0.935933,0.000000), vec3(-0.891837,-0.452184,0.012500),\n    vec3( 0.962837,-0.268925,0.025000), vec3(-0.528088, 0.848361,0.037500),\n    vec3(-0.183551,-0.981738,0.050000), vec3( 0.797928, 0.599503,0.062500),\n    vec3(-0.992467, 0.096872,0.075000), vec3( 0.665707,-0.741066,0.087500),\n\n    vec3( 0.009717, 0.994940,0.100000), vec3(-0.678316,-0.726107,0.112500),\n    vec3( 0.989156, 0.077109,0.125000), vec3(-0.780145, 0.610301,0.137500),\n    vec3( 0.162715,-0.975204,0.150000), vec3( 0.537697, 0.827331,0.162500),\n    vec3(-0.953259,-0.246316,0.175000), vec3( 0.867252,-0.461212,0.187500),\n\n    vec3(-0.327114, 0.923578,0.200000), vec3(-0.381637,-0.899554,0.212500),\n    vec3( 0.886499, 0.404345,0.225000), vec3(-0.923981, 0.299755,0.237500),\n    vec3( 0.477295,-0.842430,0.250000), vec3( 0.216370, 0.940360,0.262500),\n    vec3(-0.791878,-0.545257,0.275000), vec3( 0.948593,-0.132346,0.287500),\n\n    vec3(-0.607616, 0.735393,0.300000), vec3(-0.048511,-0.948678,0.312500),\n    vec3( 0.673591, 0.663815,0.325000), vec3(-0.940700,-0.034310,0.337500),\n    vec3( 0.713333,-0.607170,0.350000), vec3(-0.115260, 0.924829,0.362500),\n    vec3(-0.536854,-0.755753,0.375000), vec3( 0.901323, 0.193545,0.387500),\n\n    vec3(-0.790725, 0.463416,0.400000), vec3( 0.268397,-0.870521,0.412500),\n    vec3( 0.387654, 0.817985,0.425000), vec3(-0.832852,-0.339045,0.437500),\n    vec3( 0.837336,-0.310432,0.450000), vec3(-0.404803, 0.788814,0.462500),\n    vec3(-0.232596,-0.848690,0.475000), vec3( 0.738976, 0.465036,0.487500),\n\n    vec3(-0.852042, 0.155000,0.500000), vec3( 0.519130,-0.683994,0.512500),\n    vec3( 0.078543, 0.847470,0.525000), vec3(-0.624569,-0.566575,0.537500),\n    vec3( 0.835155,-0.004078,0.550000), vec3(-0.606927, 0.561456,0.562500),\n    vec3( 0.067556,-0.815360,0.575000), vec3( 0.495488, 0.639793,0.587500),\n\n    vec3(-0.788441,-0.135502,0.600000), vec3( 0.664885,-0.427517,0.612500),\n    vec3(-0.198976, 0.754840,0.625000), vec3(-0.358436,-0.681995,0.637500),\n    vec3( 0.715086, 0.257201,0.650000), vec3(-0.690991, 0.289181,0.662500),\n    vec3( 0.309458,-0.669784,0.675000), vec3( 0.220713, 0.691830,0.687500),\n\n    vec3(-0.619625,-0.355056,0.700000), vec3( 0.684563,-0.154003,0.712500),\n    vec3(-0.393366, 0.565365,0.725000), vec3(-0.090057,-0.669316,0.737500),\n    vec3( 0.507840, 0.423790,0.750000), vec3(-0.646298, 0.029885,0.762500),\n    vec3( 0.445772,-0.447954,0.775000), vec3(-0.025467, 0.615788,0.787500),\n\n    vec3(-0.386668,-0.458790,0.800000), vec3( 0.578127, 0.074918,0.812500),\n    vec3(-0.462314, 0.325025,0.825000), vec3( 0.117331,-0.533692,0.837500),\n    vec3( 0.264134, 0.455778,0.850000), vec3(-0.482861,-0.151455,0.862500),\n    vec3( 0.438487,-0.205193,0.875000), vec3(-0.175824, 0.425946,0.887500),\n\n    vec3(-0.149527,-0.409441,0.900000), vec3( 0.363035, 0.188546,0.912500),\n    vec3(-0.366940, 0.098641,0.925000), vec3( 0.186774,-0.293614,0.937500),\n    vec3( 0.054388, 0.307477,0.950000), vec3(-0.215289,-0.165058,0.962500),\n    vec3( 0.221354,-0.019426,0.975000), vec3(-0.106470, 0.116223,0.987500)\n);\n#else\n//  \"Bubbly Goop\":   reversed, truncated\nconst vec3 Wave[] = vec3[](\n    vec3(-0.852042, 0.155000,0.500000), vec3( 0.519130,-0.683994,0.512500),\n    vec3( 0.078543, 0.847470,0.525000), vec3(-0.624569,-0.566575,0.537500),\n    vec3( 0.835155,-0.004078,0.550000), vec3(-0.606927, 0.561456,0.562500),\n    vec3( 0.067556,-0.815360,0.575000), vec3( 0.495488, 0.639793,0.587500),\n\n    vec3(-0.788441,-0.135502,0.600000), vec3( 0.664885,-0.427517,0.612500),\n    vec3(-0.198976, 0.754840,0.625000), vec3(-0.358436,-0.681995,0.637500),\n    vec3( 0.715086, 0.257201,0.650000), vec3(-0.690991, 0.289181,0.662500),\n    vec3( 0.309458,-0.669784,0.675000), vec3( 0.220713, 0.691830,0.687500),\n\n    vec3(-0.619625,-0.355056,0.700000), vec3( 0.684563,-0.154003,0.712500),\n    vec3(-0.393366, 0.565365,0.725000), vec3(-0.090057,-0.669316,0.737500),\n    vec3( 0.507840, 0.423790,0.750000), vec3(-0.646298, 0.029885,0.762500),\n    vec3( 0.445772,-0.447954,0.775000), vec3(-0.025467, 0.615788,0.787500),\n\n    vec3(-0.386668,-0.458790,0.800000), vec3( 0.578127, 0.074918,0.812500),\n    vec3(-0.462314, 0.325025,0.825000), vec3( 0.117331,-0.533692,0.837500),\n    vec3( 0.264134, 0.455778,0.850000), vec3(-0.482861,-0.151455,0.862500),\n    vec3( 0.438487,-0.205193,0.875000), vec3(-0.175824, 0.425946,0.887500),\n\n    vec3(-0.149527,-0.409441,0.900000), vec3( 0.363035, 0.188546,0.912500),\n    vec3(-0.366940, 0.098641,0.925000), vec3( 0.186774,-0.293614,0.937500),\n    vec3( 0.054388, 0.307477,0.950000), vec3(-0.215289,-0.165058,0.962500),\n    vec3( 0.221354,-0.019426,0.975000), vec3(-0.106470, 0.116223,0.987500)\n);\n#endif\n\n//##############################################################################\n//##############################################################################\nfloat WaveNoise(vec3 POS, float MUL, int ITR) {\n    float result = 0.0;\n\n    for (int i = 0; i < ITR; ++i) {\n        float x = dot(Wave[i], POS);\n\n        float wave = exp(sin(x) - 1.0);\n        float dx = wave * cos(x);\n\n        result += wave;\n        POS += Wave[i] * dx * MUL;\n    }\n\n    return result / float(ITR);\n}\n\n\n//##############################################################################\n//##############################################################################\nvoid mainImage(out vec4 FragColor, in vec2 FragCoord) {\n    //==========================================================================\n    vec2 ScrnUV = FragCoord/iResolution.y*0.5;\n\n    //==========================================================================\n    vec3 POS = vec3(\n        ScrnUV.x * 100.0,\n        ScrnUV.y * 100.0,\n        iTime * 1.5\n    );\n\n    float MUL = 0.95;\n    if (iMouse.x > 0.5) MUL = (iMouse.x/iResolution.x - 0.5) * 2.0;\n\n    int ITR = 40;\n    if (iMouse.y > 0.5) ITR = int(min(80.0, (iMouse.y/iResolution.y))*80.0);\n\n    float Value = WaveNoise(POS, MUL, ITR);\n\n    //==========================================================================\n    //  Colorize value gradient:\n    #if 0\n        vec3 cMin = vec3(0.5,0.0,0.5);\n        vec3 cMid = vec3(0.0,0.5,0.5);\n        vec3 cMax = vec3(0.5,0.5,0.0);\n        #if 1\n            cMin = vec3(0.60,0.10,0.09); //  Red\n            cMid = vec3(1.00,0.60,0.20);\n            cMax = vec3(1.00,0.95,0.50);\n        #elif 0\n            cMin = vec3(0.07,0.45,0.22); //  Grn\n            cMid = vec3(0.50,0.80,0.10);\n            cMax = vec3(1.00,0.95,0.30);\n        #elif 0\n            cMin = vec3(0.10,0.30,0.60); //  Blu\n            cMid = vec3(0.30,0.70,0.80);\n            cMax = vec3(0.80,1.00,0.90);\n        #endif\n\n        vec3 COLOR = (Value < 0.5) ? mix(cMin, cMid, (Value-0.5) * 8.0 + 1.0)\n                                   : mix(cMid, cMax, (Value-0.5) * 9.0);\n    #elif 1\n        vec3 COLOR = GradientMap(  (Value-0.5)*3.0+0.5  );\n    #else\n        vec3 COLOR = GradientMap_(  (Value-0.5)*3.0+0.5  );\n    #endif\n\n    COLOR = clamp(COLOR, vec3(0.0), vec3(1.0));\n\n    //==========================================================================\n    //  Show noise iterations:\n    vec4 TEXT = PRINT(float(ITR), FragCoord.xy, iResolution.xy, iChannel3);\n\n    COLOR = mix(COLOR, TEXT.rgb, TEXT.a);\n\n    //==========================================================================\n    FragColor = vec4(COLOR, 1.0);\n\n    //==========================================================================\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//##############################################################################################################################################################\n//##############################################################################################################################################################\n// From: https://www.shadertoy.com/view/4sBfRd\nfloat char(vec2 p, int c, sampler2D FONT) {\n    return (p.x < 0.0 || p.x > 1.0 || p.y < 0.0 || p.y > 1.0) ? 1.0\n         : texture(FONT,  p/16.0 + fract( vec2(c, 15-c/16)/16.0 ) ).a;\n}\n\n//==============================================================================================================================================================\nvec4 PRINT(float PrintMe, vec2 FragCoord, vec2 iResolution, sampler2D FONT) {\n    const int[] CharCode = int[](48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 46, 45); // 0-9 . -\n    const float FontSize = 20.0;\n\n    int Digits[15];\n    int CharCount = 0;\n    float tmp = abs(PrintMe);\n\n    // do not display numbers higher than this due to precision issues\n    if (tmp > 999999.0) {\n        while (CharCount < 8) \n            Digits[CharCount++] = 11; //  \"--------\"\n    } else {\n        if (PrintMe < 0.0)\n            Digits[CharCount++] = 11; //  \"-\"\n\n        int v;  //  Current digit\n        bool f; //  True if first digit > 0 found\n\n        for (int i = 8; i >= -4; i--) {\n            v = int(tmp / pow(10.0, float(i))); // calculate digit\n\n            //  Omit leading zeros:\n            if (v > 0 || f) {\n                Digits[CharCount++] = v; // add digit 0-9\n                tmp -= float(v) * pow(10.0, float(i)); // subtract\n                f = true;\n            }\n\n            //  Decimal point:\n            if (i == 0 && abs(PrintMe) < 1.)  Digits[CharCount++] =  0; // add \"0\"\n            if (i == 0)                       Digits[CharCount++] = 10; // add \".\"\n        }\n\n        while (Digits[CharCount-1] ==  0) CharCount--; // strip trailing \"0\"s\n\n        if    (Digits[CharCount-1] == 10) CharCount--; // strip trailing \".\"\n    }\n\n    vec2 p = (FragCoord.xy/iResolution.y) * 256.0/FontSize;\n    float Field = 1.0;\n    for(int i = 0; i < CharCount; ++i) {\n        Field = min(Field, char(p + vec2(-0.5*float(i), 0.0), CharCode[Digits[i]], FONT));\n    }\n\n    vec4 Result;\n    float M = 0.51;\n    float W = (20.0/iResolution.y);\n    Result.rgb = vec3(smoothstep(M  , M-W, Field));\n    Result.a   =      smoothstep(M+W, M  , Field);\n\n    return Result;\n}\n\n//##############################################################################################################################################################\n//##############################################################################################################################################################\nvec3 GradientMap(float Pos) {\n    // vec4(Red, Green, Blue, GradientPosition)\n#if 0\n    const vec4 Color[] = vec4[](\n        vec4(1.0, 0.0, 0.0, 0.083),\n        vec4(1.0, 1.0, 0.0, 0.250),\n        vec4(0.0, 1.0, 0.0, 0.416),\n        vec4(0.0, 1.0, 1.0, 0.583),\n        vec4(0.0, 0.0, 1.0, 0.750),\n        vec4(1.0, 0.0, 1.0, 0.916)\n    );\n#elif 1\n    const vec4 Color[] = vec4[](\n        vec4(0.40,0.18,0.12, 0.000),\n        vec4(0.34,0.12,0.02, 0.169),\n        vec4(0.28,0.09,0.08, 0.203),\n        vec4(0.60,0.12,0.11, 0.255),\n        vec4(1.00,0.60,0.20, 0.513),\n        vec4(1.00,0.78,0.37, 0.750),\n        vec4(1.00,0.95,0.50, 0.916)\n    );\n#elif 1\n    const vec4 Color[] = vec4[](\n        vec4(0.28,0.09,0.08, 0.000),\n        vec4(0.34,0.12,0.02, 0.129),\n        vec4(0.40,0.18,0.12, 0.203),\n        vec4(0.60,0.12,0.11, 0.255),\n        vec4(1.00,0.60,0.20, 0.513),\n        vec4(1.00,0.78,0.37, 0.750),\n        vec4(1.00,0.95,0.50, 0.916)\n    );\n#else\n    const vec4 Color[] = vec4[](\n        vec4(0.33,0.11,0.01, 0.019),\n        vec4(0.39,0.18,0.11, 0.193),\n        vec4(0.60,0.10,0.09, 0.260),\n        vec4(1.00,0.60,0.20, 0.563),\n        vec4(1.00,0.78,0.37, 0.750),\n        vec4(1.00,0.95,0.50, 0.916)\n    );\n#endif\n\n    for(int i = 0; i <= Color.length(); ++i) {\n        if (i == Color.length()) {\n            return vec3(Color[i-1].rgb);\n        } else if (Pos < Color[i].a) {\n            return (i == 0) ? vec3(Color[i].rgb)\n                            : vec3(mix(  Color[i-1].rgb, Color[i].rgb,  (Pos - Color[i-1].a)/(Color[i].a - Color[i-1].a)  ));\n        }\n    }\n}\n\n//==============================================================================================================================================================\nvec3 GradientMap_(float Pos) {\n#if 1\n    const vec3 Color[] = vec3[](\n        vec3(1.0, 0.0, 0.0),\n        vec3(1.0, 1.0, 0.0),\n        vec3(0.0, 1.0, 0.0),\n        vec3(0.0, 1.0, 1.0),\n        vec3(0.0, 0.0, 1.0),\n        vec3(1.0, 0.0, 1.0)\n    );\n#else\n    const vec3 Color[] = vec3[](\n        vec3(0.40,0.18,0.12),\n        vec3(0.34,0.12,0.02),\n        vec3(0.60,0.10,0.09),\n        vec3(0.80,0.35,0.15),\n        vec3(1.00,0.60,0.20),\n        vec3(1.00,0.77,0.35),\n        vec3(1.00,0.95,0.50)\n    );\n#endif\n\n    Pos = clamp(Pos*float(Color.length()), 0.0, float(Color.length()));\n\n    int iCa = int(floor(Pos));\n    int iCb = int(ceil(Pos));\n\n    Pos = fract(Pos);\n\n    return mix(Color[iCa], Color[iCb], Pos);\n}\n","name":"Common","description":"","type":"common"}]}