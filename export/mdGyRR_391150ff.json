{"ver":"0.1","info":{"id":"mdGyRR","date":"1695745379","viewed":42,"name":"Netwton's Fractal","username":"ThePersonOfStuff","description":"newton's fractal","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["newtonsfractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 p1;\nvec2 p2;\nvec2 p3;\nvec2 p4;\nconst float PI = 3.14159265358979323846264338;\n\nvec2 mult(vec2 i1, vec2 i2) {\n    return vec2(i1.x*i2.x-i1.y*i2.y, i1.x*i2.y+i1.y*i2.x);\n}\n\nvec2 div(vec2 i1, vec2 i2) {\n    float ac = i1.x * i2.x;\n    float bd = i1.y * i2.y;\n    float bc = i1.y * i2.x;\n    float ad = i1.x * i2.y;\n    \n    float denom = i2.x*i2.x + i2.y * i2.y;\n    \n    return vec2(ac + bd, bc - ad)/denom;\n    \n}\n\nvec2 eval(vec2 p) {\n    return mult(mult(p - p1, p - p2), mult(p - p3, p - p4));\n}\n\nvec2 evalPrime(vec2 p) {\n    //derivative of p^4+(p1+p2+p3+p4)p^3+(p1p2+p1p3+p1p4+p2p3+p2p4+p3p4)p^2+(p1p2p3+p1p2p4+p1p3p4+p2p3p4)p+p1p2p3p4\n    // is equal to 4p^3+3(p1+p2+p3+p4)p^2+2(p1(p2+p3+p4)+p2(p3+p4)+p3p4)p+(p1(p2(p3+p4)+p3p4)+p2p3p4)\n    vec2 comp1 =  4.0 * mult(mult(p, p), p); //4p^3\n    vec2 comp2 = 3.0 * mult(mult(p, p), p1+p2+p3+p4);//3p^2(p1+p2+p3+p4)\n    vec2 comp3 = 2.0 * mult(p, mult(p1, p2+p3+p4) + mult(p2, p3+p4) + mult(p3, p4)); //2p(p1p2+p1p3+p1p4+p2p3+p2p4+p3p4)\n    vec2 comp4 = mult(p1, mult(p2, p3+p4) + mult(p3, p4)) + mult(p2, mult(p3, p4)); //p1(p2(p3+p4)+p3p4)+p2p3p4\n    return comp1 - comp2 + comp3 - comp4;\n}\n\nvec2 netwonify(vec2 p) {\n    return p  - div(eval(p), evalPrime(p));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy - 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 2.0;\n    \n    p1 = vec2(sin(iTime), cos(iTime));\n    p2 = vec2(sin(iTime + 2.0*PI/3.0), cos(iTime+ 2.0*PI/3.0));\n    p3 = vec2(sin(iTime - 2.0*PI/3.0), cos(iTime - 2.0*PI/3.0));\n    p4 = p1+p2+p3+vec2(sin(iTime/1.61/1.61/1.61), cos(iTime / 1.61 /1.61 / 1.61 / 1.61));\n    \n    \n    p1 *= sin(iTime/1.61);\n    p2 *= vec2(cos(iTime/1.61/1.61), sin(iTime/1.61/1.61));\n    p3 += sin(iTime*1.61);\n    p4 *= sin(iTime);\n    \n    p1 *= 1.0;\n    p2 *= 1.0;\n    p3 *= 0.5 + 0.25 * sin(iTime*1.61*1.61);\n    \n    \n    \n    if(length(uv-p1) < 0.01 || length(uv-p2) < 0.01 || length(uv-p3) < 0.01 || length(uv-p4) < 0.01) {\n        fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n        return;\n    }\n    \n    const int iters = 19;\n    float totIters = 0.0;\n    for(int i = 0; i < iters; i++) {\n        uv = netwonify(uv);\n        totIters += 1.0;\n        if(length(uv - p1) < 0.0001) {\n            break;\n        }\n        if(length(uv - p2) < 0.0001) {\n            break;\n        }\n        if(length(uv - p3) < 0.0001) {\n            break;\n        }\n        if(length(uv - p4) < 0.0001) {\n            break;\n        }\n    }\n    \n    float distp1 = max(0.0, 1.0-length(uv - p1) * 1000.0);\n    float distp2 = max(0.0, 1.0-length(uv - p2) * 1000.0);\n    float distp3 = max(0.0, 1.0-length(uv - p3) * 1000.0);\n    float distp4 = max(0.0, 1.0-length(uv - p4) * 1000.0);\n    \n    const vec3 col1 = vec3(1.0, 0.0, 0.0);\n    const vec3 col2 = vec3(0.0, 1.0, 0.0);\n    const vec3 col3 = vec3(0.0, 0.0, 1.0);\n    const vec3 col4 = vec3(1.0, 1.0, 0.0);\n    \n    vec3 col = col1 * distp1 + col2 * distp2 + col3 * distp3 + col4 * distp4;\n    \n    \n    col *= 1.0-(totIters/float(iters));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}