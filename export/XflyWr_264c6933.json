{"ver":"0.1","info":{"id":"XflyWr","date":"1721301394","viewed":44,"name":" ball  (hw9)","username":"zemi","description":"a good reflection, adapt from marble","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","reflection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float zoom = 1.;\n\nvec2 cmul(vec2 a, vec2 b) { return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x); }\nvec2 csqr(vec2 a) { return vec2(a.y * a.y - a.x * a.x, 2. * a.x * a.y); }\n\nmat2 rot(float a) {\n    return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\nvec2 iSphere(in vec3 ro, in vec3 rd, in vec4 sph) {\n    vec3 oc = ro - sph.xyz;\n    float b = dot(oc, rd);\n    float c = dot(oc, oc) - sph.w * sph.w;\n    float h = b * b - c;\n    if (h < 0.0) return vec2(-1.0);\n    h = sqrt(h);\n    return vec2(-b - h, -b + h);\n}\n\nfloat map(in vec3 p) {\n    float res = 0.;\n    vec3 c = p;\n    for (int i = 0; i < 5; ++i) {\n        p = .99 * abs(p) / dot(p*p*p, p*p) - .7;\n        p.yz = csqr(p.yz);\n        p = p.yzx;\n        res += exp(-2. * abs(dot(p, c)));\n    }\n    return res;\n}\n\nvec3 raymarch(in vec3 ro, vec3 rd, vec2 tminmax) {\n    float t = tminmax.x;\n    float dt = .2 - .1 * cos(iTime * .05); // animated\n    vec3 col = vec3(0.);\n    float c = 0.;\n    for (int i = 0; i < 10; i++) {\n        t += dt * exp(-1. * c);\n        if (t > tminmax.y) break;\n        c = map(rd + t * ro);\n        col = 0.09 * col + 5. * vec3(c*c*c*c, c*c, c*c * 2.); // blue\n    }\n    return col;\n}\n\nvec3 calcNormal(in vec3 pos) {\n    const float eps = 0.001;\n    const vec3 v1 = vec3(1.0, -1.0, -1.0);\n    const vec3 v2 = vec3(-1.0, -1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0, -1.0);\n    const vec3 v4 = vec3(1.0, 1.0, 1.0);\n    return normalize(v1 * map(pos + v1 * eps) +\n                     v2 * map(pos + v2 * eps) +\n                     v3 * map(pos + v3 * eps) +\n                     v4 * map(pos + v4 * eps));\n}\n\nvec3 refractRay(vec3 ro, vec3 rd, vec3 normal, float eta) {\n    vec3 refrd = refract(rd, normal, eta);\n    vec2 tmm = iSphere(ro, refrd, vec4(0., 0., 0., 2.));\n    vec3 col = raymarch(ro, refrd, tmm);\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float time = iTime;\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x / iResolution.y;\n    vec2 m = vec2(0.);\n    if (iMouse.z > 0.0) m = iMouse.xy / iResolution.xy * 3.14;\n    m -= .5;\n\n    // camera\n    vec3 ro = zoom * vec3(4.);\n    ro.yz *= rot(m.y);\n    ro.xz *= rot(m.x + 0.1 * time);\n    vec3 ta = vec3(0.0, 0.0, 0.0);\n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww, vec3(0.0, 1.0, 0.0)));\n    vec3 vv = normalize(cross(uu, ww));\n    vec3 rd = normalize(p.x * uu + p.y * vv + 4.0 * ww);\n\n    vec2 tmm = iSphere(ro, rd, vec4(0., 0., 0., 2.));\n\n    // raymarch\n    vec3 col = raymarch(ro, rd, tmm);\n    if (tmm.x < 0.) col = texture(iChannel0, rd).rgb;\n    else {\n        vec3 hitPos = ro + tmm.x * rd;\n        vec3 nor = calcNormal(hitPos);\n        float eta = 1.0 / 1.5; // Example refractive index\n\n        // Compute refracted ray and its color\n        vec3 refractedCol = refractRay(hitPos, rd, nor, eta);\n        col = mix(col, refractedCol, 0.5); // Blend original color with refracted color\n        \n        // Compute reflected ray and its color\n        vec3 reflectedDir = reflect(rd, nor);\n        float fre = pow(.5 + clamp(dot(nor, rd), 0.0, 1.0), 3.) * 1.3;\n        col += texture(iChannel0, reflectedDir).rgb * fre;\n    }\n\n    // shade\n    col = .5 * (log(1. + col));\n    col = clamp(col, 0., 1.);\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}