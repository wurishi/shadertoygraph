{"ver":"0.1","info":{"id":"lcK3R3","date":"1713100485","viewed":123,"name":"Minimalism Solar(?) System","username":"samshen0826","description":"A practice after learning how to draw shapes","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["2d","solarsystem"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat planet(vec2 st, float radius, float distanceFromCenter, float rps) {\n    vec2 position = distanceFromCenter * vec2(1.0, 0.0) * rotate2d(iTime * 2.0 * PI * rps);\n    float distance = length(st - position);\n\n    return (1.0 - smoothstep(radius, radius + 0.001, distance));\n}\n\nfloat route(vec2 st, float radius, float width){\n    float dist = length(st);\n\n    float circle1 = smoothstep(radius + width/2.0 + 0.001, radius + width/2.0 - 0.001, dist);\n    float circle2 = smoothstep(radius - width/2.0 + 0.001, radius - width/2.0 - 0.001, dist);\n    \n    float ring = 0.0;\n    ring += circle1;\n    ring -= circle2;\n\n    return ring;\n}\n\nfloat add(float a, float b) {\n    return ((a + b) > 1.0) ? 1.0 : a + b;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 st = fragCoord/iResolution.xy;\n    st -= vec2(0.5);\n    st.x *= iResolution.x / iResolution.y;\n\n    vec3 color = vec3(0.0);\n\n    float sun = planet(st, 0.05, 0., 0.);\n    float earth = planet(st, 0.02, 0.15, 0.2);\n    float mars = planet(st, 0.02, 0.2, 0.3);\n    float earthRoute = route(st, 0.15, 0.005);\n    float mercury = planet(st, 0.01, 0.1, 0.5);\n\n    color += earth;\n    color += earthRoute;\n    color += mars;\n    color += mercury;\n    color += sun;\n\n    float planet1 = planet(st, 0.04, 0.3, 0.1);\n    color += planet1;\n    float planet2 = planet(st, 0.1, 0.5, 0.05);\n    color += planet2;\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}