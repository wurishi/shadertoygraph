{"ver":"0.1","info":{"id":"Ntjfzw","date":"1651937054","viewed":222,"name":"perfect squares","username":"Carandiru","description":"anti-aliased squares for grid pattern","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["grid","aa"],"hasliked":0,"parentid":"fdfBzs","parentname":"grid trick"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define GRID_SIZE 0.25        // world grid size scaler\n\nvec2 rotate( in vec2 p, in float angle )\n{\n\t#define fma(a,b,c) (a*b+c)\n    #define c_ x\n\t#define s_ y\n\t\n    vec2 cossin = vec2(cos(angle), sin(angle));\n\treturn( vec2(fma(p.x, cossin.c_, p.y * cossin.s_), fma(p.x, -cossin.s_, p.y * cossin.c_)) );\n\n\t#undef c_\n\t#undef s_\n    #undef fma\n}\n\nfloat grid( in vec2 uv, in float scale/*, in float thin*/ ) // older not so good\n{\n    vec2 tiledUV = fract(uv*scale+0.5f);\n    vec2 square = -abs(tiledUV*2.-1.);\n    \n    float d = abs(min(square.x, square.y));\n    \n    return 1.0f - exp2(-2.7 * (d /*- thin*/) * (d /*- thin*/));\n    //return smoothstep(1.0f - thin, 1.0f, d);\n}\nfloat grid2( in vec2 uv, in float scale ) // perfect, derived from https://www.shadertoy.com/view/ft2Bzw\n{\n    vec2 tile = floor(uv/scale);\n    vec2 tile_coord = fract(uv/scale) * 2.0 - 1.0;\n    \n    float max_norm = max(abs(tile_coord.x), abs(tile_coord.y));\n    float square = smoothstep(0.5 - 2.0 * fwidth(max_norm), 0.5, max_norm);\n    \n    return(square);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv - 0.5f;\n\n    uv = rotate(uv, iTime * 0.125f);\n    // grid / grid2\n    float result = grid2(uv, GRID_SIZE);\n           \n    result = sqrt(result);\n    \n    fragColor = vec4(vec3(result), 1.0f); // gamma correct\n}","name":"Image","description":"","type":"image"}]}