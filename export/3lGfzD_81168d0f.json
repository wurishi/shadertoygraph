{"ver":"0.1","info":{"id":"3lGfzD","date":"1613944531","viewed":74,"name":"Circle Rect experience","username":"colinb","description":"Shader avec des cercles et des rectangles r√©agissant au son","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["circlerect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define PI 3.1415926535897932384626433832795\n#define TAU 6.283185307179586476925286766559\n\nfloat circle(vec2 st) {\n    return length(st-.5)*2.;\n}\n\nfloat rect(vec2 st, vec2 s) {\n    st = st*2.-1.;\n    return max( abs(st.x/s.x),\n                abs(st.y/s.y) );\n}\n\nfloat stroke(float x, float size, float w) {\n    float d = step(size, x+w*.5) - step(size, x-w*.5);\n    return clamp(d, 0., 1.);\n}\n\nfloat fill(float x, float size) {\n    return 1.-step(size, x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // the sound texture is 512x2\n    int tx = int(uv.x*512.0);\n    \n\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\tfloat fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x; \n    \n    // second row is the sound wave, one texel is one mono sample\n    float wave = texelFetch( iChannel0, ivec2(tx,1), 0 ).x;\n    \n    float col = 0.;\n    \n    for (int i = 0 ; i < 20 ; ++i) {\n        col += stroke(circle(uv),0.1*float(i)*cos(0.4*iTime+float(i)*0.2)+fft*0.01*float(i),0.04*cos(5.0*iTime)+0.021);\n    }\n    col = clamp(col, 0., 1.);\n    \n    vec2 s = vec2(1.);\n    for (int i = 0 ; i < 20 ; ++i) {\n        float c = stroke(rect(uv,s),0.1*float(i)*cos(0.5*iTime+float(i)*0.22)+fft*0.01*float(i), 0.04*cos(4.0*iTime)+0.027);\n        if(col>0.5)\n            col = 1.-c;\n        else\n            col = c;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,col,col,1.0);\n}","name":"Image","description":"","type":"image"}]}