{"ver":"0.1","info":{"id":"WtdXDX","date":"1581864508","viewed":420,"name":"Best Integer Hash - test pairs","username":"FabriceNeyret2","description":"quality test :  distrib of points ( hash(t) , hash(t+1) )\nhash from from Chris Wellons [url]https://nullprogram.com/blog/2018/07/31/[/url] \n\nvariants: see comments and #if","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["hash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of https://shadertoy.com/view/WttXWX\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = texelFetch(iChannel0, ivec2(U), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Fork of https://shadertoy.com/view/WttXWX\n// --- from Chris Wellons https://nullprogram.com/blog/2018/07/31/\n// Note that it might not be costlier than the infamous fract(big*sin(big*x)) ;-) \n\n        // --- choose one:\n//#define hashi(x)   lowbias32(x)\n  #define hashi(x)   triple32(x) \n\n  #define hash(x)  ( float( hashi(x) ) / float( 0xffffffffU ) )\n\n//bias: 0.17353355999581582 ( very probably the best of its kind )\nuint lowbias32(uint x)\n{\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\n// bias: 0.020888578919738908 = minimal theoretic limit\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\n#define N 130\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = texelFetch(iChannel0, ivec2(U), 0); // * .996;\n    int t = iFrame*N;\n    \n    for (int i=0; i < N; i++) {\n        ivec2 P = ivec2( hashi(uint(i+t)),hashi(uint(i+1+t)) ) % ivec2(iResolution);\n#if 0\n        O += .3* max(0., 1.-.3*length(vec2(P)-U) ); // better with * .996 above\n#else\n        if (P  == ivec2(U) )\n            O++;\n        //  O = 1.-O;\n#endif\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}