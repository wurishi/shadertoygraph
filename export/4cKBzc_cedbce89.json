{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"float afloct(vec3 p, float tile){\n    p = mod(p, tile);\n    return fract(4768.1232345456 * sin((p.x+p.y*43.0+p.z*137.0)));\n}\n\nfloat aflnoisetile(vec3 x, float tile){\n    vec3 p = floor(x);\n    vec3 fr = smoothstep(0.0, 1.0, fract(x));\n    vec3 LBZ = p + vec3(0.0, 0.0, 0.0);\n    vec3 LTZ = p + vec3(0.0, 1.0, 0.0);\n    vec3 RBZ = p + vec3(1.0, 0.0, 0.0);\n    vec3 RTZ = p + vec3(1.0, 1.0, 0.0);\n\n    vec3 LBF = p + vec3(0.0, 0.0, 1.0);\n    vec3 LTF = p + vec3(0.0, 1.0, 1.0);\n    vec3 RBF = p + vec3(1.0, 0.0, 1.0);\n    vec3 RTF = p + vec3(1.0, 1.0, 1.0);\n\n    float l0candidate1 = afloct(LBZ, tile);\n    float l0candidate2 = afloct(RBZ, tile);\n    float l0candidate3 = afloct(LTZ, tile);\n    float l0candidate4 = afloct(RTZ, tile);\n\n    float l0candidate5 = afloct(LBF, tile);\n    float l0candidate6 = afloct(RBF, tile);\n    float l0candidate7 = afloct(LTF, tile);\n    float l0candidate8 = afloct(RTF, tile);\n\n    float l1candidate1 = mix(l0candidate1, l0candidate2, fr[0]);\n    float l1candidate2 = mix(l0candidate3, l0candidate4, fr[0]);\n    float l1candidate3 = mix(l0candidate5, l0candidate6, fr[0]);\n    float l1candidate4 = mix(l0candidate7, l0candidate8, fr[0]);\n\n\n    float l2candidate1 = mix(l1candidate1, l1candidate2, fr[1]);\n    float l2candidate2 = mix(l1candidate3, l1candidate4, fr[1]);\n\n    float l3candidate1 = mix(l2candidate1, l2candidate2, fr[2]);\n\n    return l3candidate1;\n}\n\nfloat aflsupernoise3dtile(vec3 p, float tile){\n\tfloat a = aflnoisetile(p, tile);\n\tfloat b = aflnoisetile(p + 120.5, tile);\n\treturn (a * b);\n}\n\n#define FBM_ITERATIONS 5\nfloat aflfbmtile(vec3 p, float tile){\n    float res = 0.0;\n    float w = 1.0;\n    for(int i=0; i<FBM_ITERATIONS; i++){\n        res += aflsupernoise3dtile(p, tile) * w;\n        w *= 0.5;\n        p *= 2.0;\n        tile *= 2.0;\n    }\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy) * 100.0;\n    uv = mod(uv, 10.0);\n\n    // Time varying pixel color\n    float col = aflfbmtile(vec3(uv, iTime * 1.0), 10.0);\n\n    // Output to screen\n    fragColor = vec4(col, col, col ,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4cKBzc","date":"1734292757","viewed":102,"name":"Tileable FBM noise","username":"afl_ext","description":"I always wondered how to do it","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["noise","fbm","tileable","tile"],"hasliked":0,"parentid":"","parentname":""}}