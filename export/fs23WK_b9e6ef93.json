{"ver":"0.1","info":{"id":"fs23WK","date":"1617977081","viewed":61,"name":"Sims_Witch","username":"KING277","description":"-","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["cg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    \n //if (iFrame<60)\n    fragColor = texture(iChannel0, uv) /float(iFrame+1);\n    \n  //  else\n//fragColor = texture(iChannel0, uv);\n}\n\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\n \nconst vec3 CAMERA_POS = vec3(1.3, 1.6, -5) ;// vec3(   float(iFrame-600)/100.0, 1.6, -6); //vec3(0, 1.6, -6)\n\n vec3 LIGHT1_POS = vec3(-2,0.5,6);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(0.8,0.8,0.1); // нужно немножко всех цветов иначе не будет отражать свет от них?\n\nvec3 LIGHT2_POS = vec3(2,0.5,2.0);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.6,1.6,5); // нужно немножко всех цветов иначе не будет отражать свет от них?\nvec3 randDir;    // для мягких теней\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal)\n{\n    // (viewVec * t + CAMERA_POS).y == -1; // найдём пересечение viewVec(линия из камеры) с плоскостью y=-1 =>\n    float t = (-1.2 - pos.y) / dir.y; //float t = (-1.0 - CAMERA_POS.y) / viewVec.y;  t - длинна трассировки\n    if (t<=0.0)\n        return INF;\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz)>=250.0) // if (dot(worldPos.xz, worldPos.xz)>=100) было\n            return INF;\n        normal  = vec3(0,1,0);\n        return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal)                       // r -radius\n{\n    //dot(pos + t*dir, pos + t*dir) == r*r;\n    //dot(pos,pos) + 2*t*dot(pos,dir) + t*t*dot(dir, dir) == r*r;\n    // t*t + 2.0*t + dot(pos,dir) + dot(pos,pos) - r*r == 0;\n    //float a = dot(dir,dir); // =1\n    //float c = dot(pos, pos) - r*r; \n    float b = dot(pos,dir);                                          // kv ur-e\n    float D = b*b - dot(pos, pos) + r*r;                             // diskriminant\n    if (D<0.0)\n        return INF;\n    float t = -b - sqrt(D);\n    if (t>0.0)\n    {\n        normal = normalize(pos + t * dir);  /////////////////////////это и есть нормаль О_о\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t<0.0)                                                          //мы внутри сферы либо она сзади\n        return INF;\n    normal = normalize(pos + t * dir);    \n    return t;        //////////////////////////////////////////////////// IF T >= 0 \n}\n\n\nfloat traceSims(vec3 pos, vec3 dir, float r, out vec3 normal)\n{\n    //float a,b,c;\n    \n    vec3 p = dir;\n    vec3 d = pos;\n    float t, t2;\n    \n    t=INF;\n    \n    if ((p.x+p.y+p.z)!=0.0) { \n        t2=(r-d.x-d.y-d.z)/(p.x+p.y+p.z);\n            if ((dir.x*t2+pos.x>0.0)&&(dir.y*t2+pos.y>0.0)&&(dir.z*t2+pos.z>0.0)&&(t2>0.0))\n             t=t2;\n    }\n    \n    if ((p.x+p.y-p.z)!=0.0) { \n    t2=(r-d.x-d.y+d.z)/(p.x+p.y-p.z);\n    if ((dir.x*t2+pos.x>0.0)&&(dir.y*t2+pos.y>0.0)&&(dir.z*t2+pos.z<0.0)&&(t2>0.0))\n      t=min(t,t2);\n    }\n\t\n\tif ((p.x-p.y+p.z)!=0.0) { \n    t2=(r-d.x+d.y-d.z)/(p.x-p.y+p.z);\n    if ((dir.x*t2+pos.x>0.0)&&(dir.y*t2+pos.y<0.0)&&(dir.z*t2+pos.z>0.0)&&(t2>0.0))\n        t=min(t,t2);\n    }\n\t\n\tif ((-p.x+p.y+p.z)!=0.0) { \n    t2=(r+d.x-d.y-d.z)/(-p.x+p.y+p.z);\n    if ((dir.x*t2+pos.x<0.0)&&(dir.y*t2+pos.y>0.0)&&(dir.z*t2+pos.z>0.0)&&(t2>0.0))\n       t=min(t,t2);\n    }\n\t\n\tif ((-p.x-p.y+p.z)!=0.0) { \n    t2=(r+d.x+d.y-d.z)/(-p.x-p.y+p.z);\n    if ((dir.x*t2+pos.x<0.0)&&(dir.y*t2+pos.y<0.0)&&(dir.z*t2+pos.z>0.0)&&(t2>0.0))\n        t=min(t,t2);\n    }\n\t\n\tif ((-p.x+p.y-p.z)!=0.0) { \n    t2=(r+d.x-d.y+d.z)/(-p.x+p.y-p.z);\n    if ((dir.x*t2+pos.x<0.0)&&(dir.y*t2+pos.y>0.0)&&(dir.z*t2+pos.z<0.0)&&(t2>0.0))\n        t=min(t,t2);\n    }\n\t\n\tif ((p.x-p.y-p.z)!=0.0) { \n    t2=(r-d.x+d.y+d.z)/(p.x-p.y-p.z);\n    if ((dir.x*t2+pos.x>0.0)&&(dir.y*t2+pos.y<0.0)&&(dir.z*t2+pos.z<0.0)&&(t2>0.0))\n        t=min(t,t2);\n    }\n\t\n\tif ((-p.x-p.y-p.z)!=0.0) { \n    t2=(r+d.x+d.y+d.z)/(-p.x-p.y-p.z);\n    if ((dir.x*t2+pos.x<0.0)&&(dir.y*t2+pos.y<0.0)&&(dir.z*t2+pos.z<0.0)&&(t2>0.0))\n        t=min(t,t2);\n\t}\n\t\n    if (dir.x*t+pos.x>0.0)\n        normal.x=1.0;\n    else\n        normal.x=-1.0;\n        \n    if (dir.y*t+pos.y>0.0)\n        normal.y=1.0;\n    else\n        normal.y=-1.0;\n    \n    if (dir.z*t+pos.z>0.0)\n        normal.z=1.0;\n    else\n        normal.z=-1.0;\n        \n    normal=normalize(normal);\n     \n    return t;\n}\n\n\nfloat traceCube(vec3 pos, vec3 dir, float a, float b, float c, out vec3 normal)\n{\n    float r, t;\n    r=INF;\n    //dir*t+pos = <нужная плоскость>\n    \n    if (dir.x!=0.0){\n        t=(a*0.5-pos.x)/dir.x;\n        if ((t>0.0)&&(abs(dir.y*t+pos.y)<(b*0.5))&&(abs(dir.z*t+pos.z)<(c*0.5)))\n            if (t<r){\n                r=t;\n                normal=vec3(1.0,0.0,0.0);\n            }\n        \n        t=(-a*0.5-pos.x)/dir.x;\n        if ((t>0.0)&&(abs(dir.y*t+pos.y)<(b*0.5))&&(abs(dir.z*t+pos.z)<(c*0.5)))\n            if (t<r){\n                r=t;\n                normal=vec3(-1.0,0.0,0.0);\n            }\n    }\n    \n    if (dir.y!=0.0){\n        t=(b*0.5-pos.y)/dir.y;\n        if ((t>0.0)&&(abs(dir.x*t+pos.x)<(a*0.5))&&(abs(dir.z*t+pos.z)<(c*0.5)))\n            if (t<r){\n                r=t;\n                normal=vec3(0.0,1.0,0.0);\n            }\n        t=(-b*0.5-pos.y)/dir.y;\n        if ((t>0.0)&&(abs(dir.x*t+pos.x)<(a*0.5))&&(abs(dir.z*t+pos.z)<(c*0.5)))\n            if (t<r){\n                r=t;\n                normal=vec3(0.0,-1.0,0.0);\n            }\n    }\n    \n   if (dir.z!=0.0){\n        t=(c*0.5-pos.z)/dir.z;\n        if ((t>0.0)&&(abs(dir.x*t+pos.x)<(a*0.5))&&(abs(dir.y*t+pos.y)<(b*0.5)))\n            if (t<r){\n                r=t;\n                normal=vec3(0.0,0.0,1.0);\n            }\n        t=(-c*0.5-pos.z)/dir.z;\n        if ((t>0.0)&&(abs(dir.x*t+pos.x)<(a*0.5))&&(abs(dir.y*t+pos.y)<(b*0.5)))\n            if (t<r){\n                r=t;\n                normal=vec3(0.0,0.0,-1.0);\n            }\n    }\n    \n    \n    return r;\n}\n\n\n\n\n\n\n\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal)\n{\n    float t = (-1.0 - pos.y) / dir.y; //float t = (-1.0 - CAMERA_POS.y) / viewVec.y;  t - длинна трассировки\n    if (t<=0.0)\n        return INF;\n    vec3 worldPos = t * dir + pos;\n    if (dot (worldPos.xz, worldPos.xz) < 0.5)\n   // if  (worldPos.x > -0.45 && worldPos.x < 0.45 && worldPos.z < 0.9 && worldPos.z > -0.9)\n    {\n        normal = vec3 (0,1,0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz,dir.xz); \n    float c = dot(pos.xz, pos.xz) -0.5;\n    float D = b*b - a*c;                             // diskriminant\n    if (D<0.0)\n        return INF;\n    t = (-b - sqrt(D)) / a;\n    if (t>0.0)\n    {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0)\n        {\n            normal = normalize (vec3(worldPos.x , 0 , worldPos.z));\n            return t;\n        }\n    }\n    //t = -b - sqrt(D);// / dot(dir.xz, dir.xz);\n    ///if (t>0.0)\n    //{\n    //    normal = normalize(pos + t * dir);  /////////////////////////это и есть нормаль О_о\n    //    return t;\n    //}\n    t = (-b + sqrt(D)) / a;\n    if (t<0.0)                                                          //мы внутри сферы либо она сзади\n        return INF;\n    worldPos = t*dir + pos;\n    if (worldPos.y<=-1.0)\n    {\n        normal = normalize (vec3(worldPos.x , 0 , worldPos.z));\n        return t;     \n    }\n    \n    \n    \n    \n    return INF;\n}\n\n\nbool isOccluded (vec3 pos, vec3 target)\n{\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    //vec3 dirN = normalize(dir);\n\n    vec3 simsNorm;\n        float simsT = traceSims (pos, dir, 1.0, simsNorm);\n    if (simsT < dist)\n        return true;\n     vec3 cylNorm;\n     float cylT = traceCylinder(pos, dir, cylNorm);\n     return (cylT < dist);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal )\n{\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);    // SQR   length(toLight1);\n    float att1 = isOccluded (pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 :   20.f/distSq1;// Освещение для материала из задания + мяхкые тени\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);    // SQR   length(toLight2);\n    float att2 = isOccluded (pos, LIGHT2_POS+ randDir * LIGHT2_RADIUS) ? 0.0 :    6.f/distSq2;// Освещение для материала из задания + мяхкые тени\n    \n    return \n    color * (max (0.0, dot (normal, normalize(toLight1)))*att1*LIGHT1_COLOR// формула из задания\n    + max (0.0, dot (normal, normalize(toLight2)))*att2*LIGHT2_COLOR\n    + texture(iChannel1, normal).rgb * 0.1);  //\n    // Освещение по Ламберту. *att1 - из задания (если не умножать, свет будет \"плавнее\")\n    // texture(iChannel1, normal).rgb * 0.1); - из задания (влияние света окружения ambient)\n\n}\n\n\nvec3 refraction(vec3 v,vec3 normal, float n1, float n2)\n{\n    if (dot(v, normal) < 0.0)\n        normal = -normal;\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA*cosA);\n    vec3 tang = normalize(v-cosA*normal);\n    float sinB = sinA/n2*n1;\n    float cosB = sqrt(1.0 - sinB*sinB);\n    return sinB*tang + cosB*normal;\n}\n\nfloat pow2(float x)\n{\n    return x*x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin(dot(vec3(frame), vec3(12.9898, 78.233, 45.5432))) * 43758.5453);\n}\n/*\nfloat sdfFog(vec3 pos)\n{\n    return length(pos) - 0.5;  // туман внутри шара с радиусом 0,5\n}\n\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = sdfFog(pos);\n\n}\n*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    \n    \n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame+5)), rand(float(iFrame+15)));\n    randDir = normalize(randVals - 0.5); // для мягких теней\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.4)*1.3 ) / iResolution.x; // координаты от -1 до 1, смещение нуля в центр. + anti-alising\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up)); // векторное произведение\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    const float AIR_N = 1.0; // коэфф. преломления водзуха для рефракции.\n    const float GLASS_N = 1.5;  // коэфф преломления стекла для рефракции.\n    const float DIAMOND_N = 2.5; \n    float n1 = AIR_N;\n    //float n2 = GLASS_N;\n    float GLASS_R = pow2 (AIR_N-GLASS_N) / pow2 (AIR_N + GLASS_N);\n    float DIAMOND_R = pow2 (DIAMOND_N-GLASS_N) / pow2 (DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1,1,1);\n    \n    vec3 LIGHT1_POS = vec3(-4,2.3,8) + randVals*0.25;// размытие источника света\n    vec3 LIGHT2_POS = vec3(1.5,2.0,-2) + randVals*0.3;// размытие источника света\n    \n    \n    //// (CAMERA_POS * t + viewVec).y == -1; // найдём пересечение viewVec(линия из камеры) с плоскостью y=-1 =>\n    //float t = (-1.0 - CAMERA_POS.y) / viewVec.y; // t - длинна трассировки\n    //if (t>0.0)                             // иначе видим спиной \"на потолок\"\n    //{\n    //    vec3 worldPos = t * viewVec + CAMERA_POS;\n    //    if (dot(worldPos.xz, worldPos.xz)<100.0)    // \"откусим\" в виде круга\n    //    fragColor = texture(iChannel0,worldPos.xz); // основной цвет\n    //}\n    \n    \n    \n    \n    const int EMISSION = 0; //материал - (источники света) не отражает\n    const int DIFFUSE = 1; //материал\n    const int REFLECTION = 2; //материал\n    const int REFRACTION = 3; //материал\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec; // направление трассировки\n    float mult = 1.0;\n    \n    \n    \n    for (int i = 0; i<10; ++i)\n    {\n        float t = INF;\n        vec3 normal;\n        vec3 planeNorm;\n        int materialType;\n        float nEnter = AIR_N;\n        vec3 color;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t)\n        {\n            t = planeT;\n            materialType = DIFFUSE;//EMISSION;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.7).rgb; //worldPos.xz * K,  K = коэфф размера текстуры\n            normal = planeNorm;\n            if (randVals.y < 0.1)\n                materialType = REFLECTION;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere (curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t)\n        {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        \n        vec3 l2Norm;\n        float light2T = traceSphere (curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t)\n        {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n           \n        }\n        \n       \n       \n       vec3 sphNorm;\n       /*\n        float sphT = traceSphere (curPos, curDir, 1.0, sphNorm);\n        if (sphT < t)\n        {\n            t = sphT;\n            normal = sphNorm;\n            if (randVals.x * 0.2 < GLASS_R)\n                materialType = REFLECTION;\n            else\n            {\n               // color = vec3(1,1,1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0)\n                    //nEnter= GLASS_N;\n                    nEnter = AIR_N;\n                else\n                   //nEnter = AIR_N;\n                    nEnter= GLASS_N;\n                    \n            }\n            //color = LIGHT2_COLOR;\n            \n            \n         }   \n         */\n        \n        /*\n            float sph2T = traceSphere (curPos, curDir, 0.5, sphNorm);\n        if (sph2T < t)\n        {\n            t = sph2T;\n            normal = sphNorm;\n            if (randVals.x * 0.2 < DIAMOND_R)\n                materialType = REFLECTION;\n            else\n            {\n                colorMult = vec3(1,0.5,0.5);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0)\n                    nEnter= GLASS_N;\n                    //nEnter = AIR_N;\n                else\n                   // nEnter = AIR_N;\n                    nEnter= DIAMOND_N;\n                    \n            }\n            \n            \n            */\n \n        vec3 SimsNorm;\n        float SimsT = traceSims (curPos, curDir, 1.0, SimsNorm);\n        if (SimsT < t)\n        {\n            t = SimsT;\n            normal = SimsNorm;\n            materialType = REFLECTION;\n            if (randVals.x * 0.2 < GLASS_R)\n                materialType = REFLECTION;\n            else\n            {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0)\n                   //nEnter= GLASS_N;\n                 nEnter =1.0;\n                else\n                 nEnter = 1.005;\n                 // nEnter= GLASS_N;\n                    \n            }\n         //   color = vec3(1, 0, 0);\n           \n        }\n      // */\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT<t)\n        {\n            vec3 worldPos = t*curDir+curPos;\n            t = cylT;\n            materialType = DIFFUSE;\n            color = texture(iChannel2,worldPos.xz ).rgb;//color = vec3(0,1,0);\n            normal = cylNorm;\n        }\n        \n        \n        if (t != INF)\n        {\n            vec3 worldPos = t * curDir + curPos;\n            //fragColor = texture(iChannel0,worldPos.xz); // основной цвет\n            if (materialType == EMISSION)\n            {\n                fragColor.rgb = color *colorMult;// normal;\n                break;\n            }\n            else if (materialType == DIFFUSE)\n            {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            }    \n             else if (materialType == REFLECTION)\n          \n            {\n                curDir = reflect(curDir, normal);       // viewVec!! -  где-то портится? => 20e-5 вместо 1е-5\n                curPos = worldPos + curDir * 4e-4; // умножая на маленькую величину убираем отражение сферой самой себя, иначе \"шум\"\n                \n                //fragColor.rgb = computeLight(worldPos, color, normal);\n                //break;\n            }    \n            else if (materialType == REFRACTION)\n            {\n               curDir = refraction(curDir, normal, n1, nEnter); \n               curPos = worldPos + curDir * 4e-4;\n               \n               \n           \n                \n              n1 = nEnter; \n         \n               \n            }\n        }\n        else \n        {\n       \n           fragColor.rgb += texture(iChannel1, curDir).rgb* colorMult;//*0.6 ;//curDir);\n           break;\n        }\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv) + texture(iChannel2, uv)*0.6 + texture(iChannel3, uv)*0.4;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const float INF = 1e9;\nconst float SPHERE_R = 1.0;\nconst vec3 CAMERA_POS = vec3(0, 1.2, -6);\nconst vec3 LIGHT_POS = vec3(2, 1.5, 0);\nconst float LIGHT_RADIUS = 0.25;\nconst vec4 LIGHT_COLOR = vec4(1, 1, 1, 1);\n\n\n\nfloat traceSphere(vec3 pos, vec3 dir, float R, out vec3 normal) {\n\n    float b = dot(pos, dir);\n    float D = b * b - (dot(pos, pos) - R * R);\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(D));\n    if (t < 0.0)\n        t = (-b + sqrt(D));\n    if (t < 0.0)\n        return INF;\n    vec3 wPos = pos + t * dir;\n    normal = normalize(wPos);\n    return t;\n}\n\n\n\n\nvec3 refraction(vec3 v_in, vec3 normal, float n1, float n2) {\n    if (dot(v_in, normal) < 0.0)\n        normal = -normal;\n    float cosA = dot(v_in, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v_in - cosA * normal);\n    float sinB = n1 * sinA / n2;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return tang * sinB + normal * cosB;\n}\n\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - 0.75;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    //return vec4(vec3(5, 2, 5) * totalAbs, 1.0 - opacity);\n    return vec4(vec3(8,1,1) * totalAbs, 1.0 - opacity);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenUV = fragCoord/iResolution.xy;\n  \n    vec2 uv = (fragCoord - iResolution.xy * 0.5)/iResolution.x;\n\n    vec3 forward = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(forward, up));\n    up = normalize(cross(right, forward));\n    vec3 viewVec = normalize(forward + uv.x * right + uv.y * up);\n\n    const float GLASS_N = 1.5;\n   \n    float curN = 1.0;\n    float nextN = GLASS_N;\n    vec3 currentPos = CAMERA_POS;\n    \n   \n    const int REFRACTION = 3;\n    int iterationType;\n    vec3 color;\n    float mult = 1.0;\n\n    // Output to screen\n    for (int i = 0; i < 7; ++i) {\n        vec3 normal = vec3(0, 0, 0);\n//\n       float t = traceSphere(currentPos - LIGHT_POS, viewVec, LIGHT_RADIUS, normal);\n       \n        \n       \n        \n\n       float sphere_t = traceSphere(currentPos, viewVec, SPHERE_R, normal);\n       \n       \n     \n           \n         \n                iterationType = REFRACTION;\n          \n            t = sphere_t;\n      \n\n       \n      \n           \n           iterationType == REFRACTION ;\n                currentPos += viewVec * t;\n                viewVec =refraction(viewVec, normal, curN, nextN);\n                currentPos += viewVec * 4e-4;\n                \n                \n                \n                vec4 fog = sampleFog(currentPos, viewVec);\n                fragColor.rgb += fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n                \n                \n                \n  \n       \n        \n    }\n}\n// iChannel3 - это VOLUME, первый ","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XdfGR8","channel":0}],"code":"const float INF = 1e10;\n \nconst vec3 CAMERA_POS = vec3(1.3, 1.6, -5) ;// vec3(   float(iFrame-600)/100.0, 1.6, -6); //vec3(0, 1.6, -6)\n\n vec3 LIGHT1_POS = vec3(-2,0.5,6);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(0.8,0.8,0.1); // нужно немножко всех цветов иначе не будет отражать свет от них?\n\nvec3 LIGHT2_POS = vec3(2,0.5,2.0);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.6,1.6,5); // нужно немножко всех цветов иначе не будет отражать свет от них?\nvec3 randDir;    // для мягких теней\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal)\n{\n    // (viewVec * t + CAMERA_POS).y == -1; // найдём пересечение viewVec(линия из камеры) с плоскостью y=-1 =>\n    float t = (-1.2 - pos.y) / dir.y; //float t = (-1.0 - CAMERA_POS.y) / viewVec.y;  t - длинна трассировки\n    if (t<=0.0)\n        return INF;\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz)>=250.0) // if (dot(worldPos.xz, worldPos.xz)>=100) было\n            return INF;\n        normal  = vec3(0,1,0);\n        return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal)                       // r -radius\n{\n    //dot(pos + t*dir, pos + t*dir) == r*r;\n    //dot(pos,pos) + 2*t*dot(pos,dir) + t*t*dot(dir, dir) == r*r;\n    // t*t + 2.0*t + dot(pos,dir) + dot(pos,pos) - r*r == 0;\n    //float a = dot(dir,dir); // =1\n    //float c = dot(pos, pos) - r*r; \n    float b = dot(pos,dir);                                          // kv ur-e\n    float D = b*b - dot(pos, pos) + r*r;                             // diskriminant\n    if (D<0.0)\n        return INF;\n    float t = -b - sqrt(D);\n    if (t>0.0)\n    {\n        normal = normalize(pos + t * dir);  /////////////////////////это и есть нормаль О_о\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t<0.0)                                                          //мы внутри сферы либо она сзади\n        return INF;\n    normal = normalize(pos + t * dir);    \n    return t;        //////////////////////////////////////////////////// IF T >= 0 \n}\n\nfloat traceSims(vec3 pos, vec3 dir, float r, out vec3 normal)\n{\n    float a,b,c;\n    \n    vec3 p = dir;\n    vec3 d = pos;\n    float t, t2;\n    \n    t=INF;\n    \n    if ((p.x+p.y+p.z)!=0.0) { \n        t2=(r-d.x-d.y-d.z)/(p.x+p.y+p.z);\n            if ((dir.x*t2+pos.x>0.0)&&(dir.y*t2+pos.y>0.0)&&(dir.z*t2+pos.z>0.0)&&(t2>0.0))\n             t=t2;\n    }\n    \n    \n    t2=(r-d.x-d.y+d.z)/(p.x+p.y-p.z);\n    if ((dir.x*t2+pos.x>0.0)&&(dir.y*t2+pos.y>0.0)&&(dir.z*t2+pos.z<0.0)&&(t2>0.0))\n      t=min(t,t2);\n    \n    t2=(r-d.x+d.y-d.z)/(p.x-p.y+p.z);\n    if ((dir.x*t2+pos.x>0.0)&&(dir.y*t2+pos.y<0.0)&&(dir.z*t2+pos.z>0.0)&&(t2>0.0))\n        t=min(t,t2);\n    \n    t2=(r+d.x-d.y-d.z)/(-p.x+p.y+p.z);\n    if ((dir.x*t2+pos.x<0.0)&&(dir.y*t2+pos.y>0.0)&&(dir.z*t2+pos.z>0.0)&&(t2>0.0))\n       t=min(t,t2);\n    \n    t2=(r+d.x+d.y-d.z)/(-p.x-p.y+p.z);\n    if ((dir.x*t2+pos.x<0.0)&&(dir.y*t2+pos.y<0.0)&&(dir.z*t2+pos.z>0.0)&&(t2>0.0))\n        t=min(t,t2);\n    \n    t2=(r+d.x-d.y+d.z)/(-p.x+p.y-p.z);\n    if ((dir.x*t2+pos.x<0.0)&&(dir.y*t2+pos.y>0.0)&&(dir.z*t2+pos.z<0.0)&&(t2>0.0))\n        t=min(t,t2);\n    \n    t2=(r-d.x+d.y+d.z)/(p.x-p.y-p.z);\n    if ((dir.x*t2+pos.x>0.0)&&(dir.y*t2+pos.y<0.0)&&(dir.z*t2+pos.z<0.0)&&(t2>0.0))\n        t=min(t,t2);\n    \n    t2=(r+d.x+d.y+d.z)/(-p.x-p.y-p.z);\n    if ((dir.x*t2+pos.x<0.0)&&(dir.y*t2+pos.y<0.0)&&(dir.z*t2+pos.z<0.0)&&(t2>0.0))\n        t=min(t,t2);\n\n    if (dir.x*t+pos.x>0.0)\n        normal.x=1.0;\n    else\n        normal.x=-1.0;\n        \n    if (dir.y*t+pos.y>0.0)\n        normal.y=1.0;\n    else\n        normal.y=-1.0;\n    \n    if (dir.z*t+pos.z>0.0)\n        normal.z=1.0;\n    else\n        normal.z=-1.0;\n        \n    normal=normalize(normal);\n     \n    return t;\n}\n\n\nfloat traceRoof(vec3 pos, vec3 dir, float r, out vec3 normal)\n{\n    float a,b,c;\n    \n    vec3 p = dir;\n    vec3 d = pos;\n    float t, t2;\n    \n    t=INF;\n    \n    if ((p.x+p.y+p.z)!=0.0) { \n        t2=(r-d.x-d.y-d.z)/(p.x+p.y+p.z);\n            if ((dir.x*t2+pos.x>0.0)&&(dir.y*t2+pos.y>0.0)&&(dir.z*t2+pos.z>0.0)&&(t2>0.0))\n             t=t2;\n    }\n    \n    \n   t2=(r-d.x-d.y+d.z)/(p.x+p.y-p.z);\n   if ((dir.x*t2+pos.x>0.0)&&(dir.y*t2+pos.y>0.0)&&(dir.z*t2+pos.z<0.0)&&(t2>0.0))\n      t=min(t,t2);\n    \n//    t2=(r-d.x+d.y-d.z)/(p.x-p.y+p.z);\n  //if ((dir.x*t2+pos.x>0.0)&&(dir.y*t2+pos.y<0.0)&&(dir.z*t2+pos.z>0.0)&&(t2>0.0))\n    //t=min(t,t2);\n    \n   t2=(r+d.x-d.y-d.z)/(-p.x+p.y+p.z);\n   if ((dir.x*t2+pos.x<0.0)&&(dir.y*t2+pos.y>0.0)&&(dir.z*t2+pos.z>0.0)&&(t2>0.0))\n       t=min(t,t2);\n    \n//    t2=(r+d.x+d.y-d.z)/(-p.x-p.y+p.z);\n  //  if ((dir.x*t2+pos.x<0.0)&&(dir.y*t2+pos.y<0.0)&&(dir.z*t2+pos.z>0.0)&&(t2>0.0))\n    //    t=min(t,t2);\n    \n    t2=(r+d.x-d.y+d.z)/(-p.x+p.y-p.z);\n    if ((dir.x*t2+pos.x<0.0)&&(dir.y*t2+pos.y>0.0)&&(dir.z*t2+pos.z<0.0)&&(t2>0.0))\n        t=min(t,t2);\n    //\n//    t2=(r-d.x+d.y+d.z)/(p.x-p.y-p.z);\n  //  if ((dir.x*t2+pos.x>0.0)&&(dir.y*t2+pos.y<0.0)&&(dir.z*t2+pos.z<0.0)&&(t2>0.0))\n    //    t=min(t,t2);\n    \n//   t2=(r+d.x+d.y+d.z)/(-p.x-p.y-p.z);\n  //  if ((dir.x*t2+pos.x<0.0)&&(dir.y*t2+pos.y<0.0)&&(dir.z*t2+pos.z<0.0)&&(t2>0.0))\n    //    t=min(t,t2);\n\n    if (dir.x*t+pos.x>0.0)\n        normal.x=1.0;\n    else\n        normal.x=-1.0;\n        \n    if (dir.y*t+pos.y>0.0)\n        normal.y=1.0;\n    else\n        normal.y=-1.0;\n    \n    if (dir.z*t+pos.z>0.0)\n        normal.z=1.0;\n    else\n        normal.z=-1.0;\n        \n    normal=normalize(normal);\n     \n    return t;\n}\n\n\nfloat traceCube(vec3 pos, vec3 dir, float a, float b, float c, out vec3 normal)\n{\n    float r, t;\n    r=INF;\n    //dir*t+pos = <нужная плоскость>\n    \n    if (dir.x!=0.0){\n        t=(a*0.5-pos.x)/dir.x;\n        if ((t>0.0)&&(abs(dir.y*t+pos.y)<(b*0.5))&&(abs(dir.z*t+pos.z)<(c*0.5)))\n            if (t<r){\n                r=t;\n                normal=vec3(1.0,0.0,0.0);\n            }\n        \n        t=(-a*0.5-pos.x)/dir.x;\n        if ((t>0.0)&&(abs(dir.y*t+pos.y)<(b*0.5))&&(abs(dir.z*t+pos.z)<(c*0.5)))\n            if (t<r){\n                r=t;\n                normal=vec3(-1.0,0.0,0.0);\n            }\n    }\n    \n    if (dir.y!=0.0){\n        t=(b*0.5-pos.y)/dir.y;\n        if ((t>0.0)&&(abs(dir.x*t+pos.x)<(a*0.5))&&(abs(dir.z*t+pos.z)<(c*0.5)))\n            if (t<r){\n                r=t;\n                normal=vec3(0.0,1.0,0.0);\n            }\n        t=(-b*0.5-pos.y)/dir.y;\n        if ((t>0.0)&&(abs(dir.x*t+pos.x)<(a*0.5))&&(abs(dir.z*t+pos.z)<(c*0.5)))\n            if (t<r){\n                r=t;\n                normal=vec3(0.0,-1.0,0.0);\n            }\n    }\n    \n   if (dir.z!=0.0){\n        t=(c*0.5-pos.z)/dir.z;\n        if ((t>0.0)&&(abs(dir.x*t+pos.x)<(a*0.5))&&(abs(dir.y*t+pos.y)<(b*0.5)))\n            if (t<r){\n                r=t;\n                normal=vec3(0.0,0.0,1.0);\n            }\n        t=(-c*0.5-pos.z)/dir.z;\n        if ((t>0.0)&&(abs(dir.x*t+pos.x)<(a*0.5))&&(abs(dir.y*t+pos.y)<(b*0.5)))\n            if (t<r){\n                r=t;\n                normal=vec3(0.0,0.0,-1.0);\n            }\n    }\n    \n    \n    return r;\n}\n\n\n\n\n\n\n\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal)\n{\n    float t = (-1.0 - pos.y) / dir.y; //float t = (-1.0 - CAMERA_POS.y) / viewVec.y;  t - длинна трассировки\n    if (t<=0.0)\n        return INF;\n    vec3 worldPos = t * dir + pos;\n    if (dot (worldPos.xz, worldPos.xz) < 0.5)\n   // if  (worldPos.x > -0.45 && worldPos.x < 0.45 && worldPos.z < 0.9 && worldPos.z > -0.9)\n    {\n        normal = vec3 (0,1,0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz,dir.xz); \n    float c = dot(pos.xz, pos.xz) -0.5;\n    float D = b*b - a*c;                             // diskriminant\n    if (D<0.0)\n        return INF;\n    t = (-b - sqrt(D)) / a;\n    if (t>0.0)\n    {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0)\n        {\n            normal = normalize (vec3(worldPos.x , 0 , worldPos.z));\n            return t;\n        }\n    }\n    //t = -b - sqrt(D);// / dot(dir.xz, dir.xz);\n    ///if (t>0.0)\n    //{\n    //    normal = normalize(pos + t * dir);  /////////////////////////это и есть нормаль О_о\n    //    return t;\n    //}\n    t = (-b + sqrt(D)) / a;\n    if (t<0.0)                                                          //мы внутри сферы либо она сзади\n        return INF;\n    worldPos = t*dir + pos;\n    if (worldPos.y<=-1.0)\n    {\n        normal = normalize (vec3(worldPos.x , 0 , worldPos.z));\n        return t;     \n    }\n    \n    \n    \n    \n    return INF;\n}\n\n\nbool isOccluded (vec3 pos, vec3 target)\n{\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    //vec3 dirN = normalize(dir);\n\n    vec3 sphNorm;\n        float sphT = traceSphere (pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n     vec3 cylNorm;\n     float cylT = traceCylinder(pos, dir, cylNorm);\n     return (cylT < dist);\n}\n\n\n\n\nvec3 refraction(vec3 v,vec3 normal, float n1, float n2)\n{\n    if (dot(v, normal) < 0.0)\n        normal = -normal;\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA*cosA);\n    vec3 tang = normalize(v-cosA*normal);\n    float sinB = sinA/n2*n1;\n    float cosB = sqrt(1.0 - sinB*sinB);\n    return sinB*tang + cosB*normal;\n}\n\nfloat pow2(float x)\n{\n    return x*x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin(dot(vec3(frame), vec3(12.9898, 78.233, 45.5432))) * 43758.5453);\n}\n/*\nfloat sdfFog(vec3 pos)\n{\n    return length(pos) - 0.5;  // туман внутри шара с радиусом 0,5\n}\n\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = sdfFog(pos);\n\n}\n*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    \n    \n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame+5)), rand(float(iFrame+15)));\n    randDir = normalize(randVals - 0.5); // для мягких теней\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.4)*1.3 ) / iResolution.x; // координаты от -1 до 1, смещение нуля в центр. + anti-alising\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up)); // векторное произведение\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    const float AIR_N = 1.0; // коэфф. преломления водзуха для рефракции.\n    const float GLASS_N = 1.5;  // коэфф преломления стекла для рефракции.\n    const float DIAMOND_N = 2.5; \n    float n1 = AIR_N;\n    //float n2 = GLASS_N;\n    float GLASS_R = pow2 (AIR_N-GLASS_N) / pow2 (AIR_N + GLASS_N);\n    float DIAMOND_R = pow2 (DIAMOND_N-GLASS_N) / pow2 (DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1,1,1);\n    \n    vec3 LIGHT1_POS = vec3(-4,2.3,8) + randVals*0.25;// размытие источника света\n    vec3 LIGHT2_POS = vec3(1.5,2.0,-2) + randVals*0.3;// размытие источника света\n    \n    \n    //// (CAMERA_POS * t + viewVec).y == -1; // найдём пересечение viewVec(линия из камеры) с плоскостью y=-1 =>\n    //float t = (-1.0 - CAMERA_POS.y) / viewVec.y; // t - длинна трассировки\n    //if (t>0.0)                             // иначе видим спиной \"на потолок\"\n    //{\n    //    vec3 worldPos = t * viewVec + CAMERA_POS;\n    //    if (dot(worldPos.xz, worldPos.xz)<100.0)    // \"откусим\" в виде круга\n    //    fragColor = texture(iChannel0,worldPos.xz); // основной цвет\n    //}\n    \n    \n    \n    \n    const int EMISSION = 0; //материал - (источники света) не отражает\n    const int DIFFUSE = 1; //материал\n    const int REFLECTION = 2; //материал\n    const int REFRACTION = 3; //материал\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec; // направление трассировки\n    float mult = 1.0;\n    \n    \n    \n    for (int i = 0; i<10; ++i)\n    {\n        float t = INF;\n        vec3 normal;\n        vec3 planeNorm;\n        int materialType;\n        float nEnter = AIR_N;\n        vec3 color;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t)\n        {\n            t = planeT;\n            materialType = DIFFUSE;//EMISSION;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.7).rgb; //worldPos.xz * K,  K = коэфф размера текстуры\n            normal = planeNorm;\n            if (randVals.y < 0.1)\n                materialType = REFLECTION;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere (curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t)\n        {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        \n        vec3 l2Norm;\n        float light2T = traceSphere (curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t)\n        {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n           \n        }\n        \n       \n       vec3 qNormal;\nfloat BuildingT = traceCube(curPos- vec3(0.02, -0.055, 0), curDir, 1.0, 0.45, 0.45, qNormal);\nif (BuildingT < t){\n    t= BuildingT;\n    normal = qNormal;\n    materialType = EMISSION;\n    color = vec3(0.3,0.3,0.3);     \n}         \n       for (int row = 1; row < 3; row++)\n       {\n                float x;\n                if (row == 1)\n                    x = 0.4;\n                else \n                    x = -0.2;\n                float doorsT = traceCube(curPos- vec3(x, -0.075  , -0.5), curDir, 0.1, 0.135, 0.02, qNormal);\n                if (doorsT < t)\n                {\n                    t= doorsT;\n                    normal = qNormal;\n                    if (randVals.y * 0.1 < GLASS_R)\n                    {\n                        materialType = EMISSION;\n                        color = vec3(0.0,0.0,0);\n                    }\n                    else\n                    {\n                        materialType = REFLECTION;\n        //                if (dot(curDir, normal) > 0.0)\n          //                  nEnter= GLASS_N;\n                           // nEnter = AIR_N;\n            //            else\n                            // nEnter = AIR_N;\n                            //nEnter= DIAMOND_N;\n              //              nEnter= GLASS_N;\n                     }\n                }\n       }\n           \n      for (int row = 1; row < 3; row++)   \n           for (int floor = 4; floor >0; floor-- )\n           {\n                float x;\n                if (row == 1)\n                    x = 0.5;\n                else \n                    x = -0.3;\n             float smallWindowsT = traceCube(curPos- vec3(x, 0.3 - (float(floor)/13.0) - 0.03  , -0.5), curDir, 0.05, 0.05, 0.02, qNormal);\n                if (smallWindowsT < t)\n                {\n                    t= smallWindowsT;\n                    normal = qNormal;\n                    if (randVals.y * 0.20 < GLASS_R)\n                    {\n                        materialType = EMISSION;\n                        color = vec3(0,0,1);\n                    }\n                    else\n                    {\n                        materialType = REFLECTION;\n                //        if (dot(curDir, normal) > 0.0)\n                //            nEnter= GLASS_N;\n                    //       // nEnter = AIR_N;\n                      //  else\n                            // nEnter = AIR_N;\n                            //nEnter= DIAMOND_N;\n                    //        nEnter= GLASS_N;\n                     }\n                }\n           }\n           \n           \n           \n           for (int row = 3; row > -3; row--)\n           \n           \n             for (int floor = 4; floor >0; floor-- )\n           {\n             float smallWindows2T = traceCube(curPos - vec3((float(row)/13.0)+0.06, 0.3 - (float(floor)/13.0) - 0.03  , -0.5), curDir, 0.05, 0.05, 0.02, qNormal);\n                if (smallWindows2T < t)\n                {\n                    t= smallWindows2T;\n                    normal = qNormal;\n                    if (randVals.y * 0.2 < GLASS_R)\n                    {\n                        materialType = EMISSION;\n                        color = vec3(0.1,0.2,1);\n                    }\n                    else\n                    {\n                        materialType = REFLECTION;\n                        //if (dot(curDir, normal) > 0.0)\n                         //   nEnter= GLASS_N;\n                           // nEnter = AIR_N;\n                      //  else\n                            // nEnter = AIR_N;\n                            //nEnter= DIAMOND_N;\n                        //    nEnter= GLASS_N;\n                     }\n                }\n           }\n                \n                \n         for (int row = 1; row < 3; row++)       \n           for (int floor = 3; floor >0; floor-- )\n           {     \n                float x;\n                if (row == 1)\n                    x = 0.4;\n                else \n                    x = -0.2;\n             float wideWindowsT = traceCube(curPos- vec3(x, 0.3 - (float(floor)/13.0) - 0.03, -0.5), curDir, 0.1, 0.05, 0.02, qNormal);\n                if (wideWindowsT < t)\n                {\n                t= wideWindowsT;\n                 \n                normal = qNormal;\n                if (randVals.y * 0.25 < GLASS_R)\n                  {  materialType = EMISSION;\n                    color = vec3(0.75,0.75,0);\n                  }\n                    else\n                    {\n                materialType = REFLECTION;\n           //      if (dot(curDir, normal) > 0.0)\n             //       nEnter= GLASS_N;\n                   // nEnter = AIR_N;\n              // else\n                   // nEnter = AIR_N;\n                    //nEnter= DIAMOND_N;\n                //     nEnter= GLASS_N;\n                    }\n            }\n            \n            \n            \n            }\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n           /*  vec3 roofNorm;\n        float roofT = traceRoof (curPos -  vec3(0, -0.25, 0), curDir, 0.50, roofNorm);\n        if (roofT < t)\n        {\n            t = roofT;\n            normal = roofNorm;\n            //materialType = REFLECTION;\n            //if (randVals.x * 0.2 < GLASS_R)\n                materialType = EMISSION;\n                color = vec3(1,1,1);\n            //else\n            //{\n            //   materialType = REFRACTION;\n            //    if (dot(curDir, normal) > 0.0)\n            //      // nEnter= GLASS_N;\n            //     //nEnter = AIR_N;\n            //     \n            //    else\n            //     //nEnter = AIR_N;\n            //       nEnter= GLASS_N;\n                    \n            //}\n         //   color = vec3(1, 0, 0);\n           \n        }\n      // */\n            \n            \n         \n           \n            \n      // */\n      ///*\n       \n        \n        \n        if (t != INF)\n        {\n            vec3 worldPos = t * curDir + curPos;\n            if (materialType == EMISSION)\n            {\n                fragColor.rgb = color *colorMult;// normal;\n                break;\n            }\n            else if (materialType == DIFFUSE)\n            {\n              //  fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            }    \n             else if (materialType == REFLECTION)\n          \n            {\n                curDir = reflect(curDir, normal);       // viewVec!! -  где-то портится? => 20e-5 вместо 1е-5\n                curPos = worldPos + curDir * 4e-4; // умножая на маленькую величину убираем отражение сферой самой себя, иначе \"шум\"\n\n            }    \n\n        }\n        else \n        {\n       \n           //fragColor.rgb += texture(iChannel1, curDir).rgb* colorMult;//*0.6 ;//curDir);\n           break;\n        }\n    }\n    \n}","name":"Buffer D","description":"","type":"buffer"}]}