{"ver":"0.1","info":{"id":"3l33D8","date":"1576098357","viewed":143,"name":"Centered Zooming Rect Fractal !","username":"HyperChromatica","description":"This was easier than expected !\nedit : never mind. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","rectangular","centered"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float fmod(float x, int modu)\n{\n    return x - float(int(x) - int(x)%modu);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv = uv/ (fmod(iTime*8.0f,4) +4.0f) + .5f - .5f/(fmod(iTime*8.0f,4) +4.0f);\n    \n    float boundary = 1.0f; //boundary is position of edge between fractals\n    float fract = 2.0f; //fract is the ratio of fractal n-1/n\n    float nx =  ceil(-log2(  abs(uv.x-.5f)  )/log2(fract)); //nx is the depth of the fractal (recursively) in x dir.\n    float ny = ceil(-log2(  abs(uv.y-.5f)  )/log2(fract));\n    float n = min(nx,ny);\n    boundary = 1.0f;\n    for(int i = 0 ; i < int(n); i++)\n    {\n        boundary /= fract;\n    }\n    \n    float L = (max( (abs(uv.y-.5f)-boundary) ,(abs(uv.x-.5f)- boundary) )*(.85f + .15 * sin(iTime) ))/(boundary-boundary/fract ) +.5f;\n    float r = float(int(n + fmod(iTime*2.0f,4))%4) ;\n    float g = float(int(n+1.0f+fmod(iTime*2.0f,4))%4);\n    float b = float(int(n+2.0f+fmod(iTime*2.0f,4))%4);\n    vec3 col = vec3( r/4.0f, (g)/4.0f, (b)/4.0f)/L;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}