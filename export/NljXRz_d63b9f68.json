{"ver":"0.1","info":{"id":"NljXRz","date":"1626977237","viewed":67,"name":"Menger Sponge 4517489750987401","username":"jy483752","description":"My attempt at a Menger Sponge, probably not well optimized, mainly just testing my skill on 3d shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"7llXDs","parentname":"3d sjdhfnhfeahfnvahoief"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//I learnt ray marching from Art of Code Youtube channel, go check him out!\n\n#define MAX_STEPS 40\n#define MAX_DIST 40.\n#define SURF_DIST .01\n#define LAYER 2\n//feel free to play with layer, tho for me just 3 is enough to lag\n//I didn't optimize this\n\n//https://iquilezles.org/articles/distfunctions\nfloat sdBox( vec3 p, vec3 pos, vec3 b )\n{\n  vec3 q = abs(p-pos) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n//not used, this is my attempt at a basic box\nfloat MysdBox(vec3 p, vec3 pos, vec3 s){\n    if(length(p-pos)<length(s)){\n        vec3 l = abs(p-pos);\n        return -min(s.x-l.x, min(s.y-l.y, s.z-l.z));\n    }\n    else{\n        return length(max(abs(p-pos)-s, 0.));\n    }\n}\n//------------\n\n//SPONGE\nfloat GetDist(vec3 p){\n    //the main cube\n    float d = sdBox(p, vec3(0.), vec3(1.));\n    \n    //subtracting rods\n    for(int i=0; i<LAYER; i++){\n        float p3 = pow(3., float(i)); //1, 3, 9, 27\n        vec2 e = vec2(2., 1./(p3*3.)); //for the first hole its 1/3 on the two small sides\n                                       //for the second its 1/9\n                                       //the x is at 2 which is bigger than the main cube\n        for(float j=-floor(p3/2.); j<ceil(p3/2.); j++){\n            for(float k=-floor(p3/2.); k<ceil(p3/2.); k++){\n                //-floor(p3/2.); ceil(p3/2.); is basically just for 1, [0]\n                //for 2, [-1, 0, 1], for 3, [-4 ... 4]\n                float g = 2./p3;//this is the distance between one hole center to the next hole center\n                d = max(d, -sdBox(p, vec3(0., j*g, k*g), e.xyy)); //max(shape1, -shape2) is shape subtraction\n                d = max(d, -sdBox(p, vec3(j*g, 0., k*g), e.yxy)); //do the same thing for all three directions\n                d = max(d, -sdBox(p, vec3(j*g, k*g, 0.), e.yyx));\n            }\n        }\n        \n    }\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.;\n    \n    for(int i=0; i<MAX_STEPS; i++){\n        vec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p){\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0.);\n    \n    vec3 n = d-vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p){\n    vec3 lightPos = vec3(2., 10., 6.);\n    \n    vec3 l = normalize(lightPos-p);\n    \n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<length(lightPos-p)) dif*=0.1;\n    \n    return dif;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    \n    vec3 ro = vec3(1.);\n    ro.xz = vec2(cos(iTime), sin(iTime))*5.;\n    ro.y = sin(20.+iTime/4.)*5.;\n    \n    \n    vec3 lookat = vec3(0.);\n    \n    float zoom = 1.5;\n    \n    vec3 f = normalize(lookat-ro);\n    vec3 r = normalize(cross(vec3(0., 1., 0.), f));\n    vec3 u = cross(f, r);\n    \n    vec3 c = ro + f*zoom;\n    vec3 i = c + uv.x*r + uv.y*u;\n    \n    vec3 rd = normalize(i-ro);\n\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd*d;\n    \n    float dif = GetLight(p);\n    if(d<=MAX_DIST){\n        dif += 0.2;\n    }\n    \n    vec3 col = vec3(dif);\n    \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}