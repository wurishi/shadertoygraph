{"ver":"0.1","info":{"id":"fdKyRh","date":"1654402999","viewed":138,"name":"Cubic spline cell noise","username":"Dubswitcher","description":"Has a very similar appearance to perlin noise. Has not been tested against it for speed. Looks quite natural.\nGetting the spline to flow in a 2d space took a bit of thinking. If you know of or can think of a faster method, let me know. Mouse controls mix.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","bezier","perlin","spline","cubic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//Uncomment this to run multiple instances for a cloud texture.\n//#define cloud\n\nfloat h31(vec2 xy, float s)\n{// Seedable 2d hash\n    vec3 p = fract(vec3(xy,s)*64.23);\n    p += dot(p, p.xzy*36.5);\n    return fract((p.x,p.y)*p.z);\n}\n\nfloat cubicSp (float x, float a, float b, float c, float d) \n{// 1 dimensional form of cubic spline\n    float p = (d-c) - (a-b);\n    return p*(x*x*x) + ((a-b)-p)*(x*x) + (c-a)*x + b;\n}\n\nfloat cubicSpNoise(vec2 uv, float size, float seed)\n{\n    // creating cell variables\n    vec2 v = floor(uv*size), c = fract(uv*size);\n    // creating arrays for the spline and random values\n    vec2 b[4];\n    for (int y = 0; y < 4; y++)\n    {\n        for (int x = 0; x < 4; x++)\n        {\n        // assigning the hash to the 4 random slots\n            b[x].x = h31(v+vec2(x,y),seed);\n        }\n        // applying the random values to the slots of the spline\n        // for the active horizontal segment\n        b[y].y = cubicSp(c.x,b[0].x,b[1].x,b[2].x,b[3].x);\n    }\n    // returning the 4 horizontal segments splined together\n    return cubicSp(c.y,b[0].y,b[1].y,b[2].y,b[3].y);\n}\n\nfloat cell(vec2 uv, float size, float seed)\n{// Basic cell noise\n    vec2 v = floor(uv*size+0.5);\n    return h31(v+1.,seed);\n}\n\nvec2 rot(vec2 uv, in float r, in vec2 o)\n{\n    return (uv-0.5+o) * mat2(cos(r),-sin(r),sin(r),cos(r)) + 0.5-o;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 mp = (iMouse.xy-0.5*iResolution.xy)/iResolution.y; //mouse control\n    \n    \n    vec2 p = vec2(uv.x+iTime/12.,uv.y); // UV with offset\n#ifdef cloud\n    vec2 p2 = rot(p,0.4,vec2(0.5))*2. +57.413;\n    vec2 p3 = rot(p,0.9,vec2(0.5))*3. +85.556;\n    vec2 p4 = rot(p,1.3,vec2(0.5))*5. +125.251;\n    vec2 p5 = rot(p,1.1,vec2(0.5))*8. +345.213;\n#endif\n    \n    float seed = 0.2443, size = 15.; // Input params\n    \n    // Generate both noise types in parallel\n    float spline = cubicSpNoise(p,size,seed);\n    float noise = cell(p,size,seed)*0.8+0.1;\n    \n    \n    \n#ifdef cloud\n    spline = 1.-abs(spline-0.5);\n    spline = mix(spline,abs(cubicSpNoise(p2,size,seed)-0.5),0.2);\n    spline = mix(spline,abs(cubicSpNoise(p3,size,seed)-0.5),0.1);\n    spline = mix(spline,abs(cubicSpNoise(p4,size,seed)-0.5),0.05);\n    spline = 1.-mix(spline,abs(cubicSpNoise(p5,size,seed)-0.5),0.03);\n    noise = mix(noise,cell(p2,size,seed)*0.8+0.1,0.2);\n    noise = mix(noise,cell(p3,size,seed)*0.8+0.1,0.1);\n    noise = mix(noise,cell(p4,size,seed)*0.8+0.1,0.05);\n    noise = mix(noise,cell(p5,size,seed)*0.8+0.1,0.03);\n#endif\n    // Draw divider\n    float div = clamp(smoothstep(-0.21+mp.x,-0.205+mp.x,uv.x) - \n                      smoothstep(-0.195+mp.x,-0.19+mp.x,uv.x),0.,1.) +\n                clamp(smoothstep(0.19+mp.x,0.195+mp.x,uv.x) - \n                      smoothstep(0.205+mp.x,0.21+mp.x,uv.x),0.,1.);\n                      \n    float slider = min(min(smoothstep(0.1,0.09,distance(uv,mp)),\n                    smoothstep(0.02,0.01,uv.y-mp.y)),\n                    smoothstep(-0.02,-0.01,uv.y-mp.y));\n                      \n    // Mix the noise types \n    vec3 col = vec3(mix(spline,noise,1.-smoothstep(-0.2+mp.x,0.2+mp.x,uv.x)));\n\n#ifdef cloud\n    col = smoothstep(0.1-mp.y,0.9-mp.y,col);\n    col = mix(col,vec3(0.5,0.1,0.1),slider);\n#endif\n    \n    col = mix(col,vec3(0.1,0.2,0.5),div);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}