{"ver":"0.1","info":{"id":"MflSzl","date":"1705608074","viewed":54,"name":"Reālā laika apgaismojums","username":"Konsey","description":"Reālā laika dziļuma datu un virsmas virzienu datu apvienošana, lai panāktu mainīgu apgaismojumu\nLai redzētu koda izvadi, nepieciešams manuāli pievienot dziļuma karti kanālam 0 un normāļu karti kanālam 1\nDarbības ieraksts: https://imgur.com/a/vLJax0D","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["equirect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec4 depthmap_rgba = texture(iChannel0, uv);\n    vec4 normalmap_rgba = texture(iChannel1, uv);\n    \n    float depth = depthmap_rgba.r * 65536.;\n    \n    vec2 screen_space = uv * 2. - 1.;\n    \n    float theta = screen_space.x * PI;\n    float phi = screen_space.y * (PI/2.) + (PI/2.);\n    \n    vec3 cartesian = vec3(\n        depth * sin(phi) * cos(theta),\n        depth * sin(phi) * sin(theta),\n        depth * cos(phi)\n    );\n    \n    vec3 normal = normalize(normalmap_rgba.rgb-.5);\n    \n    vec3 LIGHT_POS = vec3(0.,sin(iTime*1.5)*2500., -100.);\n    \n    vec3 light_dir = cartesian - LIGHT_POS; \n    \n    float dist_to_light = min((length(light_dir) / (256. * 25.)), 1.);\n    \n    float light_level = max(dot(normal, normalize(light_dir)), 0.) * (1.- dist_to_light);\n\n\n    // Output to screen\n    fragColor = vec4(vec3(light_level), 1.);\n}","name":"Image","description":"","type":"image"}]}