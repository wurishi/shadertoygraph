{"ver":"0.1","info":{"id":"3lfBzj","date":"1597114902","viewed":78,"name":"My First Simple Circle","username":"zhangshan","description":"My ShaderToy HelloWorld Sample","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","simple","helloworld","study"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nfloat EPSILON = 0.0001;\n\nstruct Ray{\n\tvec3 origin;\n    vec3 direction;\n};\n\nfloat SphereSDF(vec3 samplePoint) {\n    return length(samplePoint) - 1.;\n}\n\nfloat shortestDistanceToSurface(Ray ray, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = SphereSDF(ray.origin + depth * ray.direction);\n        if (dist < EPSILON) {\n            return depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Scale and bias uv\n    // [0.0, iResolution.x] -> [0.0, 1.0]\n    // [0.0, 1.0] \t\t\t-> [-1.0, 1.0]\n    vec2 xy = fragCoord / iResolution.xy;\n\txy = xy * 2.- vec2(1.);\n\txy.x *= iResolution.x/iResolution.y;\n\n    // SphereSDF position at (0,0,0)\n\n    vec3 pixelPos = vec3(xy, 2.); // Image plane at (0,0,2)\n    vec3 eyePos = vec3(0.,0.,5.); // Camera position at (0,0,5)\n    vec3 rayDir = normalize(pixelPos - eyePos);\n    \n    Ray ray = Ray(eyePos, rayDir);\n\n    float dist = shortestDistanceToSurface(ray, MIN_DIST, MAX_DIST);\n\n    // Didn't hit anything\n    if (dist > MAX_DIST - EPSILON) {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n    }\n\n    // Hit on the surface\n    fragColor = vec4(1.0);\n}","name":"Image","description":"","type":"image"}]}