{"ver":"0.1","info":{"id":"XftyDH","date":"1730585847","viewed":139,"name":"Rainbow Fluids","username":"Spectraledge","description":"Fork of Isovalues added brightening of the colors on beat detection also modified some calculations to improve perfomance","likes":2,"published":3,"flags":36,"usePreview":0,"tags":["noise","contour","short"],"hasliked":0,"parentid":"ldfczS","parentname":"isovalues 3"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O,  vec2 U )\n{\n\tO = texture( iChannel0, U / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Optimized Noise Function with Reduced Calculations and Type Fixes\nfloat noise3(vec3 x) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    #define hash3(p) fract(sin(1e3*dot(p,vec3(1.0,57.0,-13.7)))*4375.5453)\n\n    // Precompute values to avoid redundant calculations in mix\n    float v00 = mix(hash3(p), hash3(p+vec3(1.0,0.0,0.0)), f.x);\n    float v10 = mix(hash3(p+vec3(0.0,1.0,0.0)), hash3(p+vec3(1.0,1.0,0.0)), f.x);\n    float v01 = mix(hash3(p+vec3(0.0,0.0,1.0)), hash3(p+vec3(1.0,0.0,1.0)), f.x);\n    float v11 = mix(hash3(p+vec3(0.0,1.0,1.0)), hash3(p+vec3(1.0,1.0,1.0)), f.x);\n\n    // Flatten mix calls for efficiency\n    return mix(mix(v00, v10, f.y), mix(v01, v11, f.y), f.z);\n}\n\n#define noise(x) (noise3(x)+noise3(x+11.5)) / 2.0\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 R = iResolution.xy;\n    \n    // Combine calculations to avoid redundancy\n    vec3 p = vec3(fragCoord*8.0/R.y, 0.1*iTime); \n\n    float n = noise(p);\n    float v = sin(6.28*10.0*n);\n    v = smoothstep(1.0, 0.0, 0.5*abs(v)/fwidth(v));\n\n    // Simplified texture lookup with combined calculations\n    vec2 uv = (fragCoord+vec2(1.0,sin(iTime)))/R;\n    vec4 texColor = texture(iChannel0, uv);\n    \n    // Optimized color calculations with precomputed values\n    vec4 sinColor = vec4(0.5) + vec4(0.5)*sin(12.0*n + vec4(0.0,2.1,-2.1,0.0));\n    sinColor.rgb *= 0.5 + texture(iChannel1, vec2(0.1, 0.0)).x * 2.0;\n\n    fragColor = mix(exp(-33.0/R.y)*texColor, sinColor, v);\n}","name":"Buffer A","description":"","type":"buffer"}]}