{"ver":"0.1","info":{"id":"cldSWB","date":"1685740941","viewed":213,"name":"Separable Gaussian Blur","username":"jcsaltfish","description":"2-pass sperable gaussian kernel.\n\nMouse x to adjust sigma(radius).","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["blur","gaussian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Vertical\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 texelSize = 1. / iResolution.xy;\n    \n    float sigma = mix(.1, 32., iMouse.x / iResolution.x);\n    int kernelSize = 2 * int(floor(4. * sigma + .5)) + 1;\n    \n    float weightSum = 0.;\n    fragColor *= 0.;\n    for (int i = 0; i < kernelSize; i++)\n    {\n        float x = float(i) - (float(kernelSize) * .5);\n        float weight = exp(-(x * x) / (2.0 * sigma * sigma));\n        weightSum += weight;\n        \n        fragColor += texture(iChannel0, uv + vec2(0., x * texelSize.y)) * weight;\n    }\n    fragColor /= weightSum;\n    \n    fragColor = vec4(fragColor.rgb, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Horizontal\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 texelSize = 1. / iResolution.xy;\n    \n    float sigma = mix(.1, 32., iMouse.x / iResolution.x);\n    int kernelSize = 2 * int(floor(4. * sigma + .5)) + 1;\n    \n    float weightSum = 0.;\n    fragColor *= 0.;\n    for (int i = 0; i < kernelSize; i++)\n    {\n        float x = float(i) - (float(kernelSize) * .5);\n        float weight = exp(-(x * x) / (2.0 * sigma * sigma));\n        weightSum += weight;\n        \n        fragColor += texture(iChannel0, uv + vec2(x * texelSize.x, 0.)) * weight;\n    }\n    fragColor /= weightSum;\n    \n    fragColor = vec4(fragColor.rgb, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}