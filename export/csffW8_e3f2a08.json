{"ver":"0.1","info":{"id":"csffW8","date":"1688715707","viewed":117,"name":"stable fluid test ashiato45","username":"ashiato45","description":"fluid","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["fluid"],"hasliked":0,"parentid":"ddlfDn","parentname":"Fork fluid test ashiato45 290"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = texture(iChannel0, uv)*0.1 + vec4(0.5, 0.5, 0.0, 0.0);\n    //fragColor = vec4(texture(iChannel3, uv).x, 0.0, 0.0, 1.0);\n    //fragColor = vec4(texture(iChannel3, uv).yz + vec2(0.5), 0.0, 1.0);\n    fragColor = vec4(texture(iChannel3, uv).x, texture(iChannel3, uv).yz + vec2(0.5), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// density start + velocity\n\nfloat r = 0.05;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    r *= (iResolution.x/640.0);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    if(iFrame == 0){\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        float dist = distance(uv, vec2(0.3, 0.5));\n\n        // Time varying pixel color\n        if(0.1 <= uv.x && uv.x <= 0.3 && 0.4 <= uv.y && uv.y <= 0.6){\n            fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n            if(uv.x >= 0.3){\n                fragColor.yz = vec2(1.0, 0.2);\n                }\n        }\n    }else{\n        //fragColor = texture(iChannel0, uv - vec2(1.0, 0.0)/iResolution.xy);\n        fragColor = texture(iChannel3, uv);\n        vec2 pos = (vec2(cos(iTime), sin(iTime))*0.3 + vec2(0.5, 0.5));\n        float dist = distance(uv, pos);\n        \n        if(dist < r){\n            fragColor.yz += (uv -  pos)*(r - dist)*16.0;\n            }\n\n    }\n\n    // Output to screen\n    //fragColor = vec4(1.0, cos(uv.y*12.0)*sin(uv.y*6.0) , 0.0, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// diffuse(just once.  add layers to make it more precise)\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float a = dt*diff*iResolution.x*iResolution.y;\n    \n    \n    vec4 colC = texture(iChannel0, uv);\n    vec4 colN = texture(iChannel0, uv + vec2(0.0, -1.0)/iResolution.xy);\n    vec4 colE = texture(iChannel0, uv + vec2(1.0, 0.0)/iResolution.xy);\n    vec4 colS = texture(iChannel0, uv + vec2(0.0, 1.0)/iResolution.xy);\n    vec4 colW = texture(iChannel0, uv + vec2(-1.0, 0.0)/iResolution.xy);\n    fragColor = (colC + a*(colN + colE + colS + colW))/(1.0 + 4.0*a);\n    //fragColor.r = 1.0;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(1.0, cos(uv.y*12.0)*sin(uv.y*6.0) , 0.0, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// http://graphics.cs.cmu.edu/nsp/course/15-464/Fall09/papers/StamFluidforGames.pdf\n\nfloat dt = 0.01;\n\nfloat diff = 0.0001;\n\nvec4 someFunction( vec4 a, float b )\n{\n    return a+b;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// advection\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float a = dt*diff*iResolution.x*iResolution.y;\n    \n    vec2 prev = fragCoord - dt*iResolution.xy*texture(iChannel1, uv).yz;\n    fragColor = texture(iChannel1, prev/iResolution.xy);\n    \n    //fragColor.r = 1.0;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(1.0, cos(uv.y*12.0)*sin(uv.y*6.0) , 0.0, 1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// projection\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float h = 1.f/(iResolution.x/640.0);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 col = texture(iChannel2, uv);\n    vec4 colN = texture(iChannel2, uv + vec2(0.0, -1.0)/iResolution.xy);\n    vec4 colE = texture(iChannel2, uv + vec2(1.0, 0.0)/iResolution.xy);\n    vec4 colS = texture(iChannel2, uv + vec2(0.0, 1.0)/iResolution.xy);\n    vec4 colW = texture(iChannel2, uv + vec2(-1.0, 0.0)/iResolution.xy);\n    \n    \n    float div = -0.5*h*(colE.y - colW.y + colS.z - colN.z);\n    \n    float pNew = (div + colN.x + colE.x + colS.x + colW.x)/4.0f;\n    vec2 velSub = 0.5*vec2(colE.x - colW.x, colS.x - colN.x)/h;\n    \n    fragColor = vec4(pNew, col.yz - velSub, 1.0);\n}","name":"Buffer D","description":"","type":"buffer"}]}