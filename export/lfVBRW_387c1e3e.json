{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"//\n// Graphic Designer VS Programmer\n// ===========================================================================\n//\n// *Not super accurate* recreation of the famous\n// \"Graphic Designer VS Programmer\" meme, which can be found here:\n// https://www.youtube.com/watch?v=5qHHm7ooavo\n//\n// NOTE: This shader is a total mess!\n//\n// Copyright (c) srvstr 2024\n// Licensed under MIT\n//\n\nconst vec3 background_color = vec3(0.824, 0.851, 0.898);\n\n// Colors of the day.\nconst vec3 primary_cloud_color = vec3(1);\nconst vec3 secondary_cloud_color = vec3(0.659, 0.792, 0.902);\nconst vec3[] day_sky_gradient = vec3[](\n    vec3(0.38, 0.6,  0.79),\n    vec3(0.33, 0.57, 0.77),\n    vec3(0.26, 0.51, 0.73),\n    vec3(0.18, 0.46, 0.71)\n);\n// Each vec3 is sphere with center at XY and radius Z.\n// Two arrays of spheres for two layers of clouds.\nconst vec3[] cloud1 = vec3[](\n    vec3( 1,    -0.5,  1.0),\n    vec3( 1.2,   0.0,  1.0),\n    vec3( 0.95, -0.15, 0.7),\n    vec3( 0.65, -0.45, 0.9),\n    vec3( 0.35, -0.5,  0.7),\n    vec3( 0,    -0.55, 1.0),\n    vec3(-0.4,  -0.5,  0.6),\n    vec3(-0.7,  -0.7,  1.0)),\n              cloud2 = vec3[](\n    vec3( 1,    -0.5,  1.0),\n    vec3( 1.2,   0.3,  1.0),\n    vec3( 0.9,   0.05, 0.7),\n    vec3( 0.6,  -0.2,  1.0),\n    vec3( 0.25, -0.3,  0.6),\n    vec3( 0,    -0.3,  0.8),\n    vec3(-0.35, -0.4,  0.7),\n    vec3(-0.75, -0.7,  1.4));\n\n// Colors of the night.\nconst vec3 moon_base_color = vec3(0.792, 0.808, 0.813);\nconst vec3 moon_crater_color = vec3(0.635, 0.651, 0.718);\nconst vec3[] night_sky_gradient = vec3[](\n    vec3(0.34, 0.35, 0.38),\n    vec3(0.27, 0.28, 0.33),\n    vec3(0.2,  0.21, 0.26),\n    vec3(0.12, 0.13, 0.19));\nconst vec3[] stars = vec3[](\n    vec3( 0.275, 0.25, 3.0),\n    vec3( 0.2,  -0.2,  6.0),\n    vec3( 0.0,  -0.25, 4.0),\n    vec3(-0.1,  -0.1,  6.0),\n    vec3( 0,     0.2,  7.0),\n    vec3(-0.5,   0.1,  5.0),\n    vec3(-0.6,  -0.3,  5.0),\n    vec3(-0.75, -0.35, 8.0),\n    vec3(-0.7,  -0.2, 10.0),\n    vec3(-0.7,   0.25, 3.0),\n    vec3(-0.85,  0.1,  5.0));\n\n// Cubic ease-in-out, mathamatically equivalent to\n// GLSL's  `smoothstep()` except the clamping.\nfloat cc(in float x)\n{\n    float x2 = x*x;\n    return 3.0*x2 - 2.0*x2*x;\n}\n\n// Recursively nest ease-in-out function\n// in order to stepen falloff.\n#define CC6(x) cc(CC5(x))\n#define CC5(x) cc(CC4(x))\n#define CC4(x) cc(CC3(x))\n#define CC3(x) cc(CC2(x))\n#define CC2(x) cc(cc(x))\n\n// Compute the signed distance field of capsule.\n// Source: https://iquilezles.org/articles/distfunctions2d\nfloat sdCapsule(in vec2 p, in vec2 a, in vec2 b)\n{\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\n// Sample lookup table for the background gradient.\nvec3 sky_lut(in vec3[4] lut, in vec2 uv)\n{\n    // Compute LUT index.\n    float idx = smoothstep(-0.5, 3.0, dot(uv, uv)) * float(lut.length());\n    return lut[min(int(idx), lut.length() - 1)];\n}\n\n// Compute color of the background when the sun is shining.\n// Additionally consideres clouds.\nvec3 sun_bg(in vec2 uv, in float sp)\n{\n    vec3 sky = sky_lut(day_sky_gradient, uv + vec2(sp, 0));\n\n    vec2 off0 = vec2(0, -sp / 0.75 + 1.0)*0.5,\n         off1 = off0*off0 * 2.5,\n         cloud_mask = vec2(1);\n\n    const vec2 cloud_falloff = vec2(0.3, 0.31);\n    \n    for (int i = 0; i < cloud1.length(); i++)\n    {\n        vec2[] offsets = vec2[](off0, off1);\n        vec3[] clouds  = vec3[](cloud1[i], cloud2[i]);\n    \n        for (int k = 0; k < 2; k++)\n        {\n            vec2 s = clouds[k].z * cloud_falloff;\n            float cloud_df = length(uv + offsets[k] - clouds[k].xy);\n            cloud_mask[k] *= smoothstep(s.x, s.y, cloud_df);\n        }\n    }\n\n    vec3 cloud_color = mix(primary_cloud_color, secondary_cloud_color, cloud_mask.x);\n    return mix(cloud_color, sky, cloud_mask.x * cloud_mask.y);\n}\n\n// Compute mask for stars.\nfloat star(in vec2 uv, in float scale)\n{\n    vec2 sp = uv * scale;\n    return smoothstep(0.9, 1.0,\n        smoothstep(1.0, 0.0,\n            abs(sp.x*sp.y) * 5e1)\n            * smoothstep(1.0, 0.4, length(sp) * 2.0));\n}\n\n// Compute color of the sky at night.\n// Additonally consideres stars.\nvec3 moon_bg(in vec2 uv, in float sp)\n{\n    vec3 sky = sky_lut(night_sky_gradient, uv + vec2(sp, 0));\n    \n    vec2 off = vec2(0, sp / 0.75 + 1.0)*0.5;\n    \n    for (int i = 0; i < stars.length(); i++)\n    {\n        // Use non-linear falloff for star of smaller size.\n        vec2 rel = stars[i].z > 4.0 ? off : off*off * 2.5;\n        float star = star(uv - stars[i].xy - rel, stars[i].z);\n        // Screen star mask onto sky.\n        sky += (1.0 - sky) * star;\n    }\n\n    return sky;\n}\n\n// Compute color of the moon.\nvec3 moon_fg(in vec2 uv)\n{\n    vec3 mesh = moon_base_color;\n    \n    mesh = mix(mesh, \n        moon_crater_color\n        * smoothstep(0.3, 0.12, length(uv + vec2(0.1, 0.1) )),\n        smoothstep(0.16, 0.15, length(uv + vec2(0.1, 0.1) )) );\n    \n    mesh = mix(mesh,\n        moon_crater_color\n        * smoothstep(0.2, 0.04, length(uv + vec2(0, -0.2) )),\n        smoothstep(0.08, 0.07, length(uv + vec2(0, -0.2) )) );\n\n    mesh = mix(mesh, \n        moon_crater_color\n        * smoothstep(0.2, 0.04, length(uv + vec2(-0.2, 0.1) )),\n        smoothstep(0.08, 0.07, length(uv + vec2(-0.2, 0.1) )) );\n\n    return mesh;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ToD = CC5(cos(iTime * 0.5) * 0.5 + 0.5);\n\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 2.0;\n\n    // boundary points of button capsule shape\n    vec2 a = vec2(-0.75, 0.0), b = vec2(0.75, 0.0);\n\n    float button_df = sdCapsule(uv, a, b),                    // distance field of button\n                  m = smoothstep(0.0, 0.01, button_df - 0.5); // mask of button\n    \n    float sp = 0.75 * (ToD * 2.0 - 1.0);\n\n    // celestial bodies (sun/moon)\n    vec3 cbs = vec3(0.969, 0.749, 0.126),              // sun\n         cbm = moon_fg(uv + vec2(sp * 0.4 - 0.45, 0)); // moon\n    \n    vec2 of = vec2(sp, 0);\n    \n    // celestial body composition\n    vec3 cb = mix(cbm, cbs, smoothstep(0.4, 0.41, length(uv + vec2(sp * 0.4 - 0.45, 0))));\n    // add highlight\n    cb = mix(cb, vec3(1),\n             smoothstep(0.3, 0.475, length(uv + of)) *\n             smoothstep(0.4, 0.6,   length(uv + of + vec2(-0.125, 0.125))) );\n    // add shadow\n    cb = mix(cb, vec3(0.4),\n             smoothstep(0.3, 0.5, length(uv + of)) *\n             smoothstep(0.4, 0.6, length(uv + of - vec2(-0.125, 0.125))) );\n\n    float sm = smoothstep(0.3, 0.43, \n        length(uv + vec2(sp, 0) - vec2(0.04, -0.06)))\n        * 0.5 + 0.5;\n\n    // background\n    vec3 bgs = sun_bg(uv, sp),\n         bgm = moon_bg(uv, sp);\n\n    vec3 bg = mix(bgm, bgs, ToD) * sm,\n         content = mix(cb,\n            // background and inside shadows\n            bg * smoothstep(0.7, 0.4, button_df)\n               * smoothstep(1.4, 0.7, button_df + uv.y),\n            // mask of planet\n            smoothstep(0.4, 0.41, length(uv + vec2(sp, 0))));\n\n    vec3 col = mix(content, background_color, m)\n       // background highlight\n       + (1.0 - smoothstep(-0.1, 0.03, abs(button_df - 0.52) ))\n       * smoothstep(0.0, 0.4, -uv.y + uv.x * 0.1);\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lfVBRW","date":"1733870732","viewed":2522,"name":"Graphic Designer VS Programmer","username":"servostar","description":"Recreation of the \"Graphic Designer VS Programmer\" meme.\nA variant of the meme can be found on YouTube: https://www.youtube.com/watch?v=5qHHm7ooavo\nNote that this is not an exact recreation but rather a proof of concept.","likes":59,"published":3,"flags":0,"usePreview":0,"tags":["cycle","night","ui","challenge","button","day"],"hasliked":0,"parentid":"","parentname":""}}