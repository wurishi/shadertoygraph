{"ver":"0.1","info":{"id":"3dB3DK","date":"1549953610","viewed":175,"name":"Raymarch fBM","username":"darkeclipz","description":"raymarchinig a function with an fBM applied to it.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define MaxSteps 128.\n#define MinDistance 0.0001\n#define PI 3.141592\nmat3 ry3(float angle) {\n\tfloat c = cos(angle), s = sin(angle);\n    return mat3(c, 0, s, 0, 1, 0, -s, 0, c);\n}\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 8\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 1.2;\n        amplitude *= .66;\n    }\n    return value;\n}\n\nfloat sdCircle(vec3 p, float r) { return length(p) - r; }\nfloat sdYPlane(vec3 p, float y) { return p.y - y; }\n\nfloat sdYPlaneCosSin(vec3 p, float y) {\n\treturn p.y - y + 0.5*(cos(p.x) + sin(p.z));    \n}\n\nfloat sdYPlaneFbm(vec3 p, float y) {\n\treturn p.y - y + 2.*(vec3(fbm(p.xz), fbm(p.xz), 0.)).y;    \n}\n\nfloat scene(vec3 p) {\n    return sdYPlaneFbm(p, 0.025);;\n}\n\nvec3 calcNormal(vec3 p) {\n    float h = 0.0001;\n    vec2 k = vec2(1,-1);\n    vec3 n = normalize( k.xyy*scene( p + k.xyy*h ) + \n                  k.yyx*scene( p + k.yyx*h ) + \n                  k.yxy*scene( p + k.yxy*h ) + \n                  k.xxx*scene( p + k.xxx*h ) );    \n    return n;\n}\n\nfloat trace(vec3 o, vec3 r) {\n\tfloat t = 0.;\n    for(float i=0.; i < MaxSteps; i++) {\n    \tvec3 p = o + t * r;\n        float d = scene(p);\n        if(d < MinDistance) {\n        \treturn 1. - i / MaxSteps;\n        }\n        t += d;\n    }\n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord-R)/R.y;\n\tvec3 o = vec3(0,1.05,-5);\n    vec3 r = normalize(vec3(uv, 0) - o);\n    o.z += 2.*iTime;\n    float t = trace(o, r);\n    \n    vec3 col = vec3(0);\n    \n\tvec3 bg1 = vec3(16./255., 88./255., 148./255.);\n\tvec3 bg2 = vec3(10./255., 60./255., 100./255.);\n    float eps = 0.0001;\n    if(t < eps) {\n        \n    \tcol = mix(bg2, bg1, uv.y);   \n        //col = mix(col, vec3(t), 0.5);\n    }\n    else {\n        vec3 p = o + t*r;\n        vec3 normal = calcNormal(p);\n        col = vec3(t);\n        //col = mix(col, vec3(0), t);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}