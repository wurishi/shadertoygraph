{"ver":"0.1","info":{"id":"XtBfDd","date":"1517514692","viewed":107,"name":"Shader Night - Textures","username":"inantop","description":"texture","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","beginner","shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Expand \"Shader Inputs\" above to take a look at what variables you have to play with.\n\n//This function is executed for each pixel in the coloured box to the left.\n//fragColor - the output for this pixel\n//fragCoord - the position of the pixel inside the buffer - ranges from (0,0) in the bottom left to (iResolution.x, iResolution.y)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //The acceptable range for our output is 0..1 for each of the 4 vector elements - which are RGBA.\n    \n    //We normalize the position of the pixel by the resolution to get a (0..1, 0..1) vector\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //You might have noticed that iResolution is a vec3 meaning it has three elements, but we're using it in an operation with a vec2. \n    //Typing .xy on the vector constructs a 2D vector with its x and y elements.\n    \n    \n    //The texture look-up takes values from 0...1 representing the left/top and right/bottom of the image.\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"}]}