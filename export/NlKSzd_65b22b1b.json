{"ver":"0.1","info":{"id":"NlKSzd","date":"1641275204","viewed":179,"name":"Square Cake","username":"panna_pudi","description":"Day 5 of the Genuary artificially generated month https://genuary.art\nPrompt of the day: Destroy a Square","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["2d","slice","motion","minimalistic","genuary"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Desert Square like Cake by Pudi\n// Email: k.a.komissar@gmail.com\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// Thanks to Flopine, provod, YX, NuSan, slerpy, wwrighter, Shane,\n// BigWings, FabriceNeyret, iq, and Blackle for sharing their knowledge\n\n#define time iTime\n#define rep(p, c) mod((p) - (c) / 2., (c)) - (c) / 2.\n\nconst float PI = acos(-1.);\nconst float TAU = 2. * PI;\n#define AAstep(x0, x) clamp((x - x0) / (2. * 2. / iResolution.y), 0., 1.)\n\nfloat hash(float p) {\n    return fract(sin(p * 78.233) * 43758.5453);\n}\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\n// https://www.desmos.com/calculator/f3osmasbev\nfloat smooth_floor(float x, float c) {\n    float a = fract(x);\n    float b = floor(x);\n    return ((pow(a, c) - pow(1. - a, c)) / 2.) + b;\n}\n\nconst int NUM_CUTS = 5;\nvec2 CUT_DIR[NUM_CUTS];\nfloat CUT_WIDTH[NUM_CUTS];\nfloat CUT_OFFSET[NUM_CUTS];\n\nvoid setup_cuts() {\n    for (int i = 0; i < NUM_CUTS; ++i) {\n        float seed = ceil(time * .5 - 0.25) * 10. + float(i);\n        float rng = hash(seed);\n        CUT_DIR[i] = rot((rng * 0.3) * TAU + PI) * vec2(0., 1.);\n        CUT_OFFSET[i] = (hash(seed + 5.) * 2. - 1.) * 0.18;\n        CUT_WIDTH[i] = 0.011 * rng + 0.030;\n    }\n}\n\nstruct Cut {\n    vec2 off;\n    float d;\n    float sign;\n};\n\nCut op_cut(vec2 p, vec2 n, float w, float width) {\n    float dt = dot(p, n) - w;\n    float dcut = abs(dt) - width;\n    float s = sign(dt);\n    return Cut(width * n * s, dcut, s);\n}\n\nCut merge_cuts(Cut a, Cut b) {\n    return Cut(a.off + b.off, min(a.d, b.d), a.sign * b.sign);\n}\n\nCut dummy_cut() {\n    return Cut(vec2(0.), 9999., 1.);\n}\n\nfloat square(vec2 p, vec2 h) {\n    p = abs(p) - h;\n    return length(max(p, 0.)) + min(max(p.x, p.y), 0.0);\n}\n\nfloat broken_square(vec2 p, vec2 h) {\n    float dist = 1e9;\n\n    Cut cut = dummy_cut();\n    for (int i = NUM_CUTS - 1; i >= 0; --i) {\n        Cut current_cut = op_cut(p, CUT_DIR[i], CUT_OFFSET[i], CUT_WIDTH[i]);\n        cut = merge_cuts(cut, current_cut);\n        p -= current_cut.off;\n    }\n\n    dist = square(p, h);\n    dist = max(dist, -cut.d);\n\n    return dist;\n}\n\nconst vec3 PINK = vec3(212., 33., 93.) / 256.;\nconst vec3 WHITE = vec3(1.);\nconst vec3 BLACK = vec3(0.);\n\nvec3 draw_right(float d) {\n    vec3 col = mix(BLACK, WHITE, smoothstep(0.0, 0.04, d + 0.005));\n    d = 1. - AAstep(0., d);\n    col += d * PINK ;\n    return col;\n}\n\nvec3 draw_left(float d) {\n    d = AAstep(0., d);\n    return mix(WHITE, PINK, d);\n}\n\n// Thanks Akhinos\nfloat wave(float x, float t) {\n    x = sqrt(x * x + 1.) - 1.;\n    x = t - x - PI / 2.;\n    return sin(x);\n}\n\nfloat fade(float x, float t) {\n    return exp(-x * x / (t * t)) / (t * t + 1.);\n}\n\nfloat edge(vec2 uv) {\n    float t = mod(.5 * (time - 1.), 1.) + 0.08;\n    float base = wave(uv.y * 10., t * 20.);\n    float fading = fade(uv.y * 10., t * 35.);\n    return uv.x + base * fading * 1.9;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float aspect = iResolution.x / iResolution.y;\n    vec2 uv = (fragCoord/iResolution.xy * 2. - 1.)\n            * vec2(aspect, 1.);\n\n    setup_cuts();\n\n    vec3 col = vec3(uv, 1.);\n\n    vec2 p = uv + vec2(0.5 * aspect, 0.);\n    p.x -= smooth_floor(time, 9.7) * aspect;\n    p.x = rep(p.x, 2. * aspect);\n\n    vec2 h = vec2(0.25);\n    float edge = edge(uv);\n    col = mix(draw_left(square(p, h)),\n              draw_right(broken_square(p, h)), AAstep(0.,edge));\n\n    col = vec3(pow(col, vec3(1.35)));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}