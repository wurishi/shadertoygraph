{"ver":"0.1","info":{"id":"XllfDl","date":"1514638280","viewed":289,"name":"FitzHugh-Nagumo Quasi Snowflake","username":"FlexMonkey","description":"FitzHugh-Nagumo Quasi Snowflake with hexagonal Laplacian","likes":9,"published":1,"flags":48,"usePreview":0,"tags":["fitzhughnagumosnowflake"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 zero = texture(iChannel0, coord).xyz;\n\n    float value = 1.0 - smoothstep(0.0, 0.5, sqrt(zero.y * zero.x)); \n    \n\tfragColor = vec4(vec3(value, value , zero.x + value), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | December 2017\n\n\tBased on https://github.com/GollyGang/ready/tree/gh-pages/Patterns/FitzHugh-Nagumo\n*/\n\nfloat a0 = -0.1;\nfloat a1 = 2.0;\nfloat epsilon = 0.145;\nfloat delta = 4.0;\nfloat k1 = 1.4;\nfloat k2 = -0.4;\nfloat k3 = 1.8;\n\nfloat timestep = 0.062; \n\n// Keyboard reset taken from https://www.shadertoy.com/view/XtcGD2\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0) * 1.0;  \n\n    vec4 ab = texture(iChannel0, coord);\n\n    vec2 laplacian = ab.xy * -6.0; \n\n    float radius = 1.0;\n\n    for (int i = 0; i <6; i++) {\n            \n    \tfloat angle = radians(iTime+60.0 * float(i)); \n\n       \tvec2 neighbourCoord = (fragCoord + (radius*vec2(cos(angle), sin(angle)))) / iResolution.xy ; \n    \n      \tlaplacian += texture(iChannel0, neighbourCoord).xy;\n  \t}\n\n    float foo = smoothstep(0.0, 1.0, cos(6.0 * atan(fragCoord.x - iResolution.x*0.5, fragCoord.y - iResolution.y*0.5)));\n\tk2 *= foo;\n    \n    vec2 ncoord = (coord-0.5) * vec2(1.0, iResolution.y/iResolution.x);\n   \ttimestep *= 1.0-smoothstep(0.8, 1.0, 3.0*length(ncoord));\n    timestep *= 1.0-sqrt(foo);\n    \n    float a = ab.x; \n    float b = ab.y;\n    \n    float delta_a = k1*a - k2*a*a - a*a*a - b + laplacian.x;\n    float delta_b = epsilon*(k3*a - a1*b - a0) + delta*laplacian.y; \n    \n   \tvec2 result = vec2(a + delta_a * timestep, \n                       b + delta_b * timestep);\n\n    if(iFrame < 2 || reset()) {\n        // taken from: https://www.shadertoy.com/view/4scXWS\n        float radius = 0.1;\n        vec2 R = iResolution.xy*radius, U = abs(fragCoord+fragCoord - R/radius);      \n    \tbool foo = ( U.x < min( .5*R ,R - U*sqrt(3.0) ).y );\n            \n        if (!foo) {\n            fragColor = vec4(-0.9, -0.3, 0.0, 1.0);  \n        }\n        else {\n           fragColor = vec4(1.0, 0.0, 0.0, 1.0); \n        }\n\n        \n    } else {\n        fragColor = vec4(result, 0.0, 1.0);\n    }\n    \n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | December 2017\n\n\tBased on https://github.com/GollyGang/ready/tree/gh-pages/Patterns/FitzHugh-Nagumo\n*/\n\nfloat a0 = -0.08;\nfloat a1 = 2.0;\nfloat epsilon = 0.155;\nfloat delta = 4.1;\nfloat k1 = 1.3;\nfloat k2 = -0.3;\nfloat k3 = 1.81;\n\nfloat timestep = 0.062; \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0) * 1.0;  \n\n    vec4 ab = texture(iChannel0, coord);\n\n    vec2 laplacian = ab.xy * -6.0; \n\n    float radius = 0.8;\n\n    for (int i = 0; i <6; i++) {\n            \n    \tfloat angle = radians(iTime+60.0 * float(i)); \n\n       \tvec2 neighbourCoord = (fragCoord + (radius*vec2(cos(angle), sin(angle)))) / iResolution.xy ;  \n    \n      \tlaplacian += texture(iChannel0, neighbourCoord).xy;\n  \t}\n\n    float foo = smoothstep(0.0, 1.0, cos(6.0 * atan(fragCoord.x - iResolution.x*0.5, fragCoord.y - iResolution.y*0.5)));\n\tk2 *= foo;\n    \n    vec2 ncoord = (coord-0.5) * vec2(1.0, iResolution.y/iResolution.x);\n   \ttimestep *= 1.0-smoothstep(0.8, 1.0, 3.0*length(ncoord));\n    timestep *= 1.0-sqrt(foo);\n    \n    float a = ab.x; \n    float b = ab.y;\n    \n    float delta_a = k1*a - k2*a*a - a*a*a - b + laplacian.x;\n    float delta_b = epsilon*(k3*a - a1*b - a0) + delta*laplacian.y; \n    \n   \tvec2 result = vec2(a + delta_a * timestep, \n                       b + delta_b * timestep);\n\n    fragColor = vec4(result, 0.0, 1.0);\n    \n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | December 2017\n\n\tBased on https://github.com/GollyGang/ready/tree/gh-pages/Patterns/FitzHugh-Nagumo\n*/\n\nfloat a0 = -0.06;\nfloat a1 = 2.0;\nfloat epsilon = 0.165;\nfloat delta = 4.2;\nfloat k1 = 1.2;\nfloat k2 = -0.2;\nfloat k3 = 1.82;\n\nfloat timestep = 0.062; \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0) * 1.0;  \n\n    vec4 ab = texture(iChannel0, coord);\n\n    vec2 laplacian = ab.xy * -6.0; \n\n    float radius = 0.6;   \n\n    for (int i = 0; i <6; i++) {\n            \n    \tfloat angle = radians(iTime+60.0 * float(i)); \n\n       \tvec2 neighbourCoord = (fragCoord + (radius*vec2(cos(angle), sin(angle)))) / iResolution.xy ;  \n    \n      \tlaplacian += texture(iChannel0, neighbourCoord).xy;\n  \t}\n\n    float foo = smoothstep(0.0, 1.0, cos(6.0 * atan(fragCoord.x - iResolution.x*0.5, fragCoord.y - iResolution.y*0.5)));\n\tk2 *= foo;\n\n    vec2 ncoord = (coord-0.5) * vec2(1.0, iResolution.y/iResolution.x);\n   \ttimestep *= 1.0-smoothstep(0.8, 1.0, 3.0*length(ncoord));\n    timestep *= 1.0-sqrt(foo);\n    \n    float a = ab.x; \n    float b = ab.y;\n    \n    float delta_a = k1*a - k2*a*a - a*a*a - b + laplacian.x;\n    float delta_b = epsilon*(k3*a - a1*b - a0) + delta*laplacian.y; \n    \n   \tvec2 result = vec2(a + delta_a * timestep, \n                       b + delta_b * timestep);\n\n    fragColor = vec4(result, 0.0, 1.0);\n    \n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | December 2017\n\n\tBased on https://github.com/GollyGang/ready/tree/gh-pages/Patterns/FitzHugh-Nagumo\n*/\n\nfloat a0 = -0.04;\nfloat a1 = 2.0;\nfloat epsilon = 0.175;\nfloat delta = 4.3;\nfloat k1 = 1.1;\nfloat k2 = -0.10;\nfloat k3 = 1.83;\n\nfloat timestep = 0.062; \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0) * 1.0;  \n\n    vec4 ab = texture(iChannel0, coord);\n\n    vec2 laplacian = ab.xy * -6.0; \n    \n    float radius = 0.4;\n\n    for (int i = 0; i <6; i++) {\n            \n    \tfloat angle = radians(iTime+60.0 * float(i)); \n        \n       \tvec2 neighbourCoord = (fragCoord + (radius*vec2(cos(angle), sin(angle)))) / iResolution.xy ; \n    \n      \tlaplacian += texture(iChannel0, neighbourCoord).xy;\n  \t}\n\n    float foo = smoothstep(0.0, 1.0, cos(6.0 * atan(fragCoord.x - iResolution.x*0.5, fragCoord.y - iResolution.y*0.5)));\n\tk2 *= foo;\n    \n    vec2 ncoord = (coord-0.5) * vec2(1.0, iResolution.y/iResolution.x);\n   \ttimestep *= 1.0-smoothstep(0.8, 1.0, 3.0*length(ncoord));\n    timestep *= 1.0-sqrt(foo);\n    \n    float a = ab.x; \n    float b = ab.y;\n    \n    float delta_a = k1*a - k2*a*a - a*a*a - b + laplacian.x;\n    float delta_b = epsilon*(k3*a - a1*b - a0) + delta*laplacian.y; \n    \n   \tvec2 result = vec2(a + delta_a * timestep, \n                       b + delta_b * timestep);\n\n    fragColor = vec4(result, 0.0, 1.0);\n    \n}","name":"Buf D","description":"","type":"buffer"}]}