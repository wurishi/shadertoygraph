{"ver":"0.1","info":{"id":"Xst3R7","date":"1448661676","viewed":159,"name":"BinaryTreeVar","username":"jt","description":"A variant of [url]https://www.shadertoy.com/view/Mt2XW3[/url] with cosine-distortion\n(a cleaner version of [url]https://www.shadertoy.com/view/MljXDV[/url])","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["branching","binarytree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Binary Tree variant with (almost) fix line-size - written 2015 by Jakob Thomsen\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define mirror(v) abs(2. * fract(v / 2.) - 1.)\n\nfloat C01(float v)\n{\n    v += .25;\n    float w = abs(2. * fract(v*2.) - 1.);\n    return 0.5 + 0.5 * sign(.5-fract(v))*(1.-w*w);\n}\n/*\nfloat c01(float v)\n{\n    return 0.5 + 0.5 * cos(2.0 * 3.1415926 * v);\n}\n*/\nvoid mainImage( out vec4 o, in vec2 U )\n//void mainImage( inout vec4 o, vec2 U ) // ERROR: overloaded functions must have the same parameter qualifiers\n{\n    U /= iResolution.xy;\n    U.y = mirror(U.y+1.);\n    //U.y = 2./(2.-U.y) - 1.;\n    U.y = 1.-log2(2.-U.y);\n    float y = (1.-U.y);\n    //float f = 7.*(1.-mirror(iTime*.1));\n    float f = 7.*(1.-C01(iTime*.05));\n    U.y *= f;\n    U.x *= exp2(ceil(U.y))/2.;\n    U = fract(U);\n    o -= o;\n    //o += 1. - smoothstep(0., (.4 - .2 * U.y), abs(4. * abs(U.x - .5) - C01(.5 * (U.y + 1.0)))); // \"plant\"\n    o += 1. - smoothstep(0., f*(.02 - .01 * U.y)/y, abs(4. * abs(U.x - .5) - C01(.5 * (U.y + 1.0)))); // fixed size\n}\n","name":"","description":"","type":"image"}]}