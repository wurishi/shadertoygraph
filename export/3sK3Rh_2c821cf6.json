{"ver":"0.1","info":{"id":"3sK3Rh","date":"1573676432","viewed":273,"name":"Ray tracing some spheres","username":"janiorca","description":"First ray tracing efforts with glsl. A couple of lights with shadows and spheres with fresnel reflections ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","sphere","fresnel","whittedshadows"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int num_spheres = 15;\n\nconst vec4 lights[2] = vec4[2] (\n    vec4( 28.0, 80.0, 28.0, 8742.0 ),\n    vec4( -28.0, 8.0, 8.0,  616.0 )\n);\n\nfloat w_intersect_sphere( float max_t, vec3 ray_dir, vec3 origin, \n    vec3 sphere, float sphere_radius2, int idx_in, \n    out vec3 pos, out vec3 norm, out int idx ) {\n   // intersect with sphere \n    vec3 origToSphere = sphere - origin;\n    float tCA = dot( origToSphere, ray_dir);\n    if( tCA < 0.0 ) {\n        // ray center is towards back of ray. cant intsesect\n        return max_t;\n    } else \n    {\n        float dd = length(origToSphere);\n        float distToMidpoint2 = dd*dd-tCA*tCA;\n        if( distToMidpoint2 > sphere_radius2 ) {\n            return max_t;\n        } \n        else {\n            float thc = sqrt(sphere_radius2-distToMidpoint2);\n            float t0 = tCA - thc;           // entry \n            if( t0 < max_t ) {\n                pos = origin + t0*ray_dir;\n                norm = normalize( pos-sphere);\n                idx = idx_in;\n                return t0;\n            } else {\n                return max_t;\n            }\n        }\n    }\n}\n\n// For shadows we only care if there was intersection\nbool intersects_sphere( vec3 ray_dir, vec3 origin, vec3 sphere, float sphere_radius2 ) {\n   // intersect with sphere \n    vec3 origToSphere = sphere - origin;\n    float tCA = dot( origToSphere, ray_dir);\n    if( tCA < 0.0 ) {\n        // ray center is towards back of ray. cant intsesect\n            return false;\n    } else \n    {\n        float dd = length(origToSphere);\n        float distToMidpoint2 = dd*dd-tCA*tCA;\n        if( distToMidpoint2 > sphere_radius2 ) {\n            return false;\n        } \n        else {\n            return true;\n        }\n    }\n}\n\nfloat ground_plane_intersect( vec3 ray_dir, vec3 origin, float ground, out vec3 pos, out vec3 norm ) {\n    if( ray_dir.y >= 0.0 ) {\n        return 99999999.0;\n    }\n    float t = ( ground-origin.y ) /  ray_dir.y; \n    norm = vec3( 0.0, 1.0f, 0.0f );\n    pos = origin + ray_dir*t;\n    return t;\n}\n\n// code from demo foxes blog\n// https://blog.demofox.org/2017/01/09/raytracing-reflection-refraction-fresnel-total-internal-reflection-and-beers-law/\nfloat fresnel( float n, vec3 normal, vec3 incident )\n{\n        // Schlick aproximation\n        float r0 = (1.0-n) / (1.0+n);\n        r0 *= r0;\n        float cosX = -dot(normal, incident);\n        float x = 1.0-cosX;\n        float ret = r0+(1.0-r0)*x*x*x*x*x;\n        return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 center = vec2( 0.5, 0.5 );\n    vec3 spheres[num_spheres];\n    for( int idx=0; idx < num_spheres; idx++ ) \n    {\n        float fidx = float(idx);\n        float fidx2 = fidx*fidx;\n        vec3 spos = vec3( sin( fidx*0.12312 + iTime * 0.121312 + 0.423 + fidx2*0.1324), \n            sin( fidx*0.13312 + iTime * .372 + 0.4223+ fidx2*1.54 ),\n            sin( fidx*0.2912 + iTime * .255552 + 1.423+ fidx2*1.1324 )\n        );\n        spos *= 15.0f;\n        spheres[ idx ] = spos;\n    }\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.x;\n    // [ -0.5, 05 ]    \n    vec2 screen_pos_2d = 2.0*(uv - center);\n    vec3 screen_pos_3d = vec3( screen_pos_2d, -29.0 );\n\n    float _angle = iTime/3.0;\n    mat3 rot_m = mat3( cos(_angle),0,  -sin( _angle ), \n                        0,          1,          0,\n                        sin(_angle), 0, cos(_angle) );\n\n    vec3 origin = rot_m*vec3( 0,0,-30.0) ;\n    vec3 ray_dir = normalize(rot_m*screen_pos_3d - origin);\n\n\n    float contribution = 1.0;\n    vec3 final_color = vec3( 0,0,0);\n    for( int bounce =3; bounce >0 ; bounce -- ) {\n        vec3 new_ray_dir;\n        vec3 norm;\n        vec3 pos;\n        vec3 diffuseCol;\n        float refractive_index;\n        float reflectance = 0.0;\n        int final_idx = -1;\n        float current_t = 99999999.0;\n\n        current_t = ground_plane_intersect( ray_dir, origin , -20.0, pos, norm );\n        if( current_t <= 99999999.0 ) {\n            diffuseCol = vec3( 0.05, 0.55, 0.05 );\n            if( ( ( int( pos.x/5.0) +int(pos.z/5.0) ) & 1 )== 1){\n                diffuseCol = vec3( 0.59, 0.6, 0.5 );\n            }   \n        } else {\n            diffuseCol = vec3( 1.0, 1.0, 0.0);\n\n        }\n\n        for( int idx=1; idx < num_spheres; idx++ ) {\n            vec3 vv = vec3( 0.0, 0.0, 0.0 )*float(idx);\n           current_t  =  w_intersect_sphere( current_t, ray_dir, origin, spheres[idx], 4.2*4.2, idx, \n               pos, norm, final_idx);\n        }\n        // workout out material properties\n        if( final_idx > 0 ) {\n            if( final_idx % 3 == 0 ) {\n                diffuseCol = vec3( 0.02, 0.02, 0.12 );\n                refractive_index = 1.77;\n            } else if( final_idx % 3 == 1 ) {\n                diffuseCol = vec3( 0.5, 0.1, 0.1 );\n                refractive_index = 1.2;\n            } else {\n                diffuseCol = vec3( 0.2, 0.5, 0.1 );\n                refractive_index = 1.5;\n            }\n            reflectance = fresnel( refractive_index, norm, ray_dir);\n            new_ray_dir = reflect( ray_dir, norm );\n        }\n\n\n        // light the point\n        vec3 point_color = vec3( 0, 0, 0 );\n        for( int lt=0; lt<2; lt++ ) \n        {\n            // Is the light shadowed\n            vec3 point_light = lights[ lt ].xyz - pos;\n            vec3 point_light_dir = normalize( point_light );\n            float current_t = 99999999.0;\n            bool in_shade = false;\n            for( int idx=1; idx < num_spheres; idx++ ) \n            {\n                if( intersects_sphere( point_light_dir, pos, spheres[idx], 4.2*4.2 ) ) \n                {\n                    in_shade = true;\n                    break;\n                }\n            }\n            if( !in_shade)\n            {\n                float dd = length( point_light );\n                float attenutation = lights[ lt ].w/( dd*dd);\n                vec3 reflectedLight = reflect( -point_light_dir, norm );\n                vec3 toCamera = -ray_dir;\n                float diffuse = attenutation*dot( point_light_dir, norm );\n\n                vec3 halfway = normalize( toCamera + point_light_dir );\n                float specular = attenutation*pow( dot( norm, halfway ), 121.0 );\n            \n                specular = clamp( specular, 0.0, 1.0 );\n\n                vec3 fragDiffuse = diffuseCol * diffuse;\n                point_color += vec3(specular,specular,specular) + fragDiffuse;\n            }\n        }\n        final_color += point_color * contribution * ( 1.0 - reflectance );\n        contribution = contribution * reflectance;\n        ray_dir = new_ray_dir;\n        origin = pos;\n    }\n    vec3 fragFinal = pow( final_color, vec3(1.0 / 2.2) );\n    fragColor = vec4(fragFinal, 1.0);\n}","name":"Image","description":"","type":"image"}]}