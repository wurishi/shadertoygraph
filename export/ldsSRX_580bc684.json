{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"vec2 saturate(vec2 x)\n{\n\treturn clamp(x, 0.0, 1.0);   \n}\n\nvec2 magnify(vec2 uv)\n{\n    uv *= iChannelResolution[0].xy; \n    return (saturate(fract(uv) / saturate(fwidth(uv))) + floor(uv) - 0.5) / iChannelResolution[0].xy;\n}\n\nvec2 quantize(vec2 uv)\n{\n    return (floor(uv * iChannelResolution[0].xy) + 0.5) / iChannelResolution[0].xy;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    vec2 sc = fragCoord / iResolution.xy;\n    \n\tvec2 uv = vec2(sc.x * 0.1 - 0.05, 0.1) / (sc.y - 1.0);\n\tuv *= mat2(sin(iTime * 0.1), cos(iTime * 0.1), -cos(iTime * 0.1), sin(iTime * 0.1));\n\t\t\t\n\tvec2 uvMod = sc.x < 0.33 ? uv : sc.x < 0.66 ? magnify(uv) : quantize(uv);\n\n\tfragColor = textureGrad(iChannel0, uvMod, dFdx(uv), dFdy(uv));\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldsSRX","date":"1405200045","viewed":4170,"name":"Texture anti-aliasing","username":"Ikaros","description":"Point-style sampling, but anti-aliased using bilinear sampling with modified modified fraction. Fades out effect when mipmaps kick in.","likes":63,"published":1,"flags":0,"usePreview":1,"tags":["texture","antialiasing","bilinear"],"hasliked":0,"parentid":"","parentname":""}}