{"ver":"0.1","info":{"id":"ttlXDH","date":"1562822690","viewed":104,"name":"crazy2","username":"mardinator2","description":"something went crazy","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["eye"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const mat2 m = mat2 ( 0.80,  0.60, -0.60,  0.80);\n#define PI 3.14159265359\n\nfloat hash( float n)\n{\n    return fract (sin (n)*43758.5453);\n}\n\nfloat noise( in vec2 x)\n{\n    vec2 p = floor ( x);\n    vec2 f = fract ( x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0;\n\n    return mix(mix( hash (n+  0.0), hash (n+  1.0), f.x),\n               mix( hash (n+ 57.0), hash (n+ 58.0), f.x), f.y);\n}\n\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n\n    f += 0.50000*noise( p); p = m*p*2.02;\n    f += 0.25000*noise( p); p = m*p*2.03;\n    f += 0.12500*noise( p); p = m*p*2.01;\n    f += 0.06250*noise( p); p = m*p*2.04;\n    f += 0.03125*noise( p);\n\n    return f/0.984375;\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 q = fragCoord/iResolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n    p.x *= iResolution.x/iResolution.y;\n    \n    //float background = smoothstep (-0.25, 0.25, p.x);\n    \n    p.y = p.y + 0.3*sin(iTime*PI);\n    p.x = p.x - 0.8*sin(iTime);\n    \n    p = 0.2-rotate2d( 0.3*sin(0.1*iTime)*PI) * p;\n    float r = sqrt ( dot( p, p));\n    float a = atan ( p.y, p.x);\n    \n    //background color\n    vec3 col = mix (sin (vec3(1.0,0.4,0.1)*clamp(iTime, 0.9, 0.5)), sin( vec3(1.0, 0.8, 0.3)*iTime), cos ( (sin(q.x+q.y) * sin(q.x+q.y*iTime))*iTime));\n    \n    //animation\n    float ss = 0.5 + 0.5*sin (2.0*iTime);\n    float anim = 1.0 + 0.1*ss*clamp ( 1.0-r, 0.5, 1.0);\n    r *= anim;\n    \n    if ( r< 0.8)\n    {\n        //eye color\n        col = vec3 ( 0.458, 0.262, 0.062);\n        float f = fbm ( 0.5*p);\n        //noise color\n        col = mix ( col, vec3( 0.458, 0.294, 0.121), f);\n        //glow color\n        f = 1.0 - smoothstep ( 0.2, 0.5, r);\n        col = mix ( col, vec3( 0.9, 0.6, 0.2), f);\n        //distorsion\n        a += 0.9*fbm ( 20.0*p);\n        //white noise\n        f = smoothstep ( 0.3, 1.0, fbm ( vec2 ( 6.0*r, 20.0*a)));\n        col = mix ( col, vec3 ( 0.368, 0.270, 0.172), f);\n        //black noise\n        f = smoothstep ( 0.4, 0.9, fbm ( vec2 ( 10.0*r, 15.0*a)));\n        col *= 1.0 - 0.5*f;\n        //outer glow\n        f = smoothstep ( 0.7, 0.8, r);\n        col *= 1.0 - 1.0*f;\n        //center color\n        f = smoothstep ( 0.2, 0.25, r);\n        //col *= f;\n        //specular highlight\n        f = 1.0 - smoothstep ( 0.01, 0.1, length ( p - vec2 ( 0.24, 0.2)));\n        col += vec3 ( 1.0, 0.9, 0.8)*f*0.9;\n        //anti aliasing\n        f = smoothstep ( 0.75, 0.8, r);\n        col = mix ( col, vec3 ( 0.0), f);\n                   \n    }\n    \n    ss = 0.5 + 0.2*sin (0.5*iTime);\n    anim = 1.0 + 0.1*ss*clamp ( 1.0-r, 0.5, 1.0);\n    r *= anim;\n    \n    p.y = p.y*3.0 + sin(iTime*1.);\n    p.x = p.x*3.0 + sin(iTime*5.);\n    \n    r = sqrt ( dot( p, p));\n    \n    if ( r< 0.5)\n    {\n        float f = fbm ( 0.5*p);\n        //center color\n        f = smoothstep ( 0.5, 0.5, r);\n        //col *= f;\n        col *= 0.5 + 0.5*cos(iTime+p.xyx+vec3(0,2,4));\n                   \n    }\n  \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n\n\n\n","name":"Image","description":"","type":"image"}]}