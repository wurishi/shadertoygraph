{"ver":"0.1","info":{"id":"tsGyRD","date":"1602304613","viewed":333,"name":"negatives","username":"Carandiru","description":"comparing the interpolating functions behaviour with negative values.\n\nanyone know of a trick to avoid ZERO without conditional expressions?","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["mix","smoothstep","negative"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 mixed = vec3(1,0,0);\nconst vec3 smoothed = vec3(0,0,1);\nconst vec3 avoid_zero = vec3(0.4,0.1,0.9);\n\nfloat line(float width, float offset, float magnitude) {\n    float mid = 0.5f + offset;\n    return (smoothstep(mid - width, mid - width + 0.01f, magnitude) - \n            smoothstep(mid + width, mid + width + 0.01f, magnitude));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    uv = uv * 2.0f; \t\t\t\t\t\t\t   // make it smaller\n    \n    float t0 = cos(uv.x + iTime * 0.5f);\t\t   // input = advancing x axis -1,1 w/cos \n    \n    float bn = textureLod(iChannel0, \t\t\t   // sample blue noise\n                          (uv * iResolution.xy) / iChannelResolution[0].xy, 0.0f).r;\n    \n    vec3 color = vec3(0);\n    \n    // highlight area when input is negative\n    if (bool(uint(fragCoord.x) & 5u)) {   \t\t\t// every n columns\n        color.r = step(0.0f, t0);\t\t\t\t\t// if less than zero\n        color.r *= abs(t0) + bn * (17.0f/255.0f);\t// shade with bluenoise dithering\n        color.r *= abs(fract(iTime) * 2.0f - 1.0f); // pulse w/ triangle wave\n    }\n    \n    float c0 = uv.y + mix(0.0f, 1.0f, t0);\t\t\t// input -1,1 to 0,1 w/mix\n    float c1 = uv.y + smoothstep(0.0f, 1.0f, t0);\t// input -1,1 to 0,1 w/smoothstep\n    float c2 = uv.y + mix(0.1f, 1.0f, t0);\n    \n    color += mixed * line(0.05f, 0.5f, c0);\t\t\t// red = mix\n    color += smoothed * line(0.05f, 0.5f, c1);\t\t// blue = smoothstep\n\tcolor += avoid_zero * line(0.05f, 0.5f, c2);\n    \n    color.g += mix(0.0f, 1.0f, bool(0.0f == t0));\n    \n    fragColor = color.rgbr;\n}","name":"Image","description":"","type":"image"}]}