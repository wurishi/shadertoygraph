{"ver":"0.1","info":{"id":"DsBBRW","date":"1689456063","viewed":44,"name":"HUD Distortion","username":"ttphb","description":"I've seen many modern games distort their HUD for a bit to make it look more interesting. So I wanted to recreate that thing. It's quite simple, the comments outline the idea.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["distortion","warp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //We normalize the coordinates and place the (0, 0) point in the center.\n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0; \n    \n    //We get normalized mouse position for effect intensity.\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    \n    float EFFECT_INTENSITY = 1.0 - mouse.x;\n    \n    //The UV position is shifted like so:\n    \n    //The quadratic function determines the general offset based on x position. The parabola is inverted,\n    //    that's why we're adding to uv.y and the center values get pulled down.\n    \n    //The cubic function regulates the intensity and signs based on y values. It smoothly translates \n    //    the linear y = -x graph.\n    \n    //EFFECT_INTENSITY regulates intensity on top of everything.\n    uv.y += (-0.2 * (pow(uv.x, 2.0)) + 0.2) * pow(uv.y, 3.0) * EFFECT_INTENSITY;\n    \n    //Texture should also be given converted uv values to be placed right in center.\n    \n    vec4 color = texture(iChannel0, uv / 2.0 - 0.5);\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}