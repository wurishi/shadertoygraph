{"ver":"0.1","info":{"id":"4fSGD1","date":"1704137943","viewed":23,"name":"Julia_test","username":"janOluFue","description":"test","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst int max_iter = 200;\nconst float max_rad = 2.5;\n\n\nvec2 complex_mult(vec2 p, vec2 q)\n{\n    \n vec2 pq = vec2(p.x*q.x-p.y*q.y,p.x*q.y+p.y*q.x);\n\nreturn pq;\n}\n\n\nvec2 julia_iter(vec2 p, vec2 c)\n{\nvec2 zz = complex_mult(p,p);\nreturn zz - c;\n\n}\n\nvec2 expo(vec2 p)\n{\nvec2 ep = vec2(exp(float(p.x))*cos(float(p.y)),exp(float(p.x))*sin(float(p.y)));\nreturn ep;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 c = vec2(0.6+0.1*sin(98.+sqrt(iTime/90.)),0.436);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = fragCoord/iResolution.xy;\n    p *= .8;\n   p -= vec2(-0.2+0.2*sin(iTime/8.),.2);\n    vec3 col = length(p)*vec3(0.,0.,.5);\n    float x = p.x;\n    float y = p.y;\n    //p = vec2(-p.y,p.x);\n    for (int n = 1; n<=max_iter; n++){\n    //p = julia_iter(p,c);\n    p = complex_mult(julia_iter(p,c),julia_iter(p,c));\n    if(length(p)>=max_rad){\n        float scalar = sqrt(length(p))*(float(n))/190.*log(float(max_iter));\n        col = vec3(1,1,1)-scalar*vec3(0.95,0.64,0.23);\n        break;\n    }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,.5);\n}","name":"Image","description":"","type":"image"}]}