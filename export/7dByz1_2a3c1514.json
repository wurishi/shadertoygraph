{"ver":"0.1","info":{"id":"7dByz1","date":"1643080067","viewed":222,"name":"apply insulate to binary tree","username":"jt","description":"Extending my 2d binary tree sdf [url]https://www.shadertoy.com/view/sdBcR1[/url] to a 3d sdf using my 2d-to-3d operator [url]https://www.shadertoy.com/view/sdscDs[/url] to obtain a simple but fast tree - or rather forest of trees :)","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","3d","binary","sdf","tree","forest","distance","project","binarytree","bound","wire","2dto3d","extrusion","insulate","embed","3dify"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/7dByz1 apply insulate to binary tree by Jakob Thomsen\n// 3dify (wireify? stringify?) i.e. embed my binary tree 2d sdf in 3d by projection on a plane.\n// Based on https://www.shadertoy.com/view/sdscDs insulate\n// and https://www.shadertoy.com/view/sdBcR1 binary tree SDF\n\n#define EPSILON 0.001\n#define DIST_MAX 500.0\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat halfspace(vec3 p, float d)\n{\n    return p.z - d;\n}\n\n// TODO: cleanup\nfloat tree2d(vec2 v)\n{\n    v *= vec2(0.5, 1.0);\n    v.x += 0.5;\n    v.y = 1.0 - v.y;\n    float s = exp2(ceil(-log2(v.y)));\n    vec2 w = v * s;\n    w.x *= 0.5;\n    w = fract(w);\n    return (v.y < 0.0) ? -v.y : (1.0 - 1.0 / s * ((1.0 + w.y) / v.y - abs(4.0 * abs(w.x - 0.5) - (1.0 - w.y)))) / sqrt(2.0);\n}\n\nfloat insulate_tree(vec3 p)\n{\n    float dp = p.y; // distance to plane\n    float df = tree2d(p.xz); // distance to 2d SDF\n    return sqrt(dp*dp+df*df); // 3dify 2d SDF\n    //return max(abs(dp),df); // variant: square cut as suggested by Fabrice\n    //return min(max(abs(dp),df), sqrt(dp*dp+df*df)-.005); // variant suggested by Fabrice\n}\n\nfloat map(vec3 p)\n{\n    float d = mix(0.01, 0.01, 0.5 + 0.5 * cos(iTime));\n    return\n        min\n        (\n            insulate_tree(p) - d,\n            halfspace(p, -1.0)\n        );\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h)\n            +\n            k.yyx * map(p + k.yyx*h)\n            +\n            k.yxy * map(p + k.yxy*h)\n            +\n            k.xxx * map(p + k.xxx*h)\n        );\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    for(float t = 0.0; t < DIST_MAX;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return DIST_MAX;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = pi / 2.0 + pi / 2.0 * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x != 0.0) ? mx : 2.0 * pi * fract(iTime * 0.1);\n    my = (iMouse.y != 0.0) ? my : pi * 3.0 / 4.0;\n\n    mat2 R = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 0.0, -5.0 );//vec3(0.0, -10.0 * my, 0.0);\n    //mat2 S = mat2(vec2(0.0, 1.0), vec2(-1.0, 0.0));\n    mat2 S = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz=S*ro.yz;\n    ro.xy = R * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz=S*rd.yz;\n    rd.xy = R * rd.xy;\n\n    float dist = trace(ro, rd);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.4);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX); // XXX artifacts on cylinder XXX\n    vec3 color = vec3(1.0);\n    color *= (n * 0.5 + 0.5);\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n\n    fragColor = mix(vec4(color, 1.0), vec4(0.0), step(DIST_MAX, dist));\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}