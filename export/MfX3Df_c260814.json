{"ver":"0.1","info":{"id":"MfX3Df","date":"1703706652","viewed":65,"name":"Hex Moiré ","username":"Cleric","description":"Hexagonal Moiré patterns","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["waves","interference","moire","moir","honeycomb","hex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Hex grid code taken from https://www.shadertoy.com/view/wtdSzX\n\n//#define FLAT_TOP_HEXAGON\n\n// Helper vector. If you're doing anything that involves regular triangles or hexagons, the\n// 30-60-90 triangle will be involved in some way, which has sides of 1, sqrt(3) and 2.\n#ifdef FLAT_TOP_HEXAGON\nconst vec2 s = vec2(1.7320508, 1);\n#else\nconst vec2 s = vec2(1, 1.7320508);\n#endif\n\nconst float sheet_min_x = -.6;\nconst float sheet_max_x = .6;\nconst float sheet_min_y = -.4;\nconst float sheet_max_y = .4;\n\n\n\n// The 2D hexagonal isosuface function: If you were to render a horizontal line and one that\n// slopes at 60 degrees, mirror, then combine them, you'd arrive at the following. As an aside,\n// the function is a bound -- as opposed to a Euclidean distance representation, but either\n// way, the result is hexagonal boundary lines.\nfloat hex(in vec2 p)\n{    \n    p = abs(p);\n    \n    #ifdef FLAT_TOP_HEXAGON\n    return max(dot(p, s*.5), p.y); // Hexagon.\n    #else\n    return max(dot(p, s*.5), p.x); // Hexagon.\n    #endif    \n}\n\n// This function returns the hexagonal grid coordinate for the grid cell, and the corresponding \n// hexagon cell ID -- in the form of the central hexagonal point. That's basically all you need to \n// produce a hexagonal grid.\n//\n// When working with 2D, I guess it's not that important to streamline this particular function.\n// However, if you need to raymarch a hexagonal grid, the number of operations tend to matter.\n// This one has minimal setup, one \"floor\" call, a couple of \"dot\" calls, a ternary operator, etc.\n// To use it to raymarch, you'd have to double up on everything -- in order to deal with \n// overlapping fields from neighboring cells, so the fewer operations the better.\nvec4 getHex(vec2 p)\n{    \n    // The hexagon centers: Two sets of repeat hexagons are required to fill in the space, and\n    // the two sets are stored in a \"vec4\" in order to group some calculations together. The hexagon\n    // center we'll eventually use will depend upon which is closest to the current point. Since \n    // the central hexagon point is unique, it doubles as the unique hexagon ID.\n    \n    #ifdef FLAT_TOP_HEXAGON\n    vec4 hC = floor(vec4(p, p - vec2(1, .5))/s.xyxy) + .5;\n    #else\n    vec4 hC = floor(vec4(p, p - vec2(.5, 1))/s.xyxy) + .5;\n    #endif\n    \n    // Centering the coordinates with the hexagon centers above.\n    vec4 h = vec4(p - hC.xy*s, p - (hC.zw + .5)*s);\n    \n    \n    // Nearest hexagon center (with respect to p) to the current point. In other words, when\n    // \"h.xy\" is zero, we're at the center. We're also returning the corresponding hexagon ID -\n    // in the form of the hexagonal central point.\n    //\n    // On a side note, I sometimes compare hex distances, but I noticed that Iomateron compared\n    // the squared Euclidian version, which seems neater, so I've adopted that.\n    return dot(h.xy, h.xy) < dot(h.zw, h.zw) \n        ? vec4(h.xy, hC.xy) \n        : vec4(h.zw, hC.zw + .5);\n}\n\nfloat getHexPixel(in vec2 coords) {\n    //vec2 u = (coords - iResolution.xy*.5)/iResolution.y*20.0;\n    vec2 u = coords*60.;\n    \n    // Scaling, translating, then converting it to a hexagonal grid cell coordinate and\n    // a unique coordinate ID. The resultant vector contains everything you need to produce a\n    // pretty pattern, so what you do from here is up to you.\n    vec4 h = getHex(u);\n    float eDist = hex(h.xy); // Edge distance.\n\n    // Initiate the background to a white color, putting in some dark borders.\n    float v = smoothstep(0., .05, eDist - .5 + .12);\n    \n    return step(sheet_min_x, coords.x)*(1. - step(sheet_max_x, coords.x))\n        * step(sheet_min_y, coords.y)*(1. - step(sheet_max_y, coords.y))\n        * v;\n}\n\nvec2 refl(in vec2 uv, in vec4 f) {\n    mat2 r = mat2(f.w, -f.z, f.zw);\n    vec2 v = transpose(r)*(uv - f.xy);\n    v = vec2(-v.x, v.y);\n    return r*v + f.xy;\n    \n}\n\n\nfloat fold1(in vec2 uv, in vec4 f) {\n    vec2 r = refl(uv, f);\n    vec2 tmp = uv - f.xy;\n\n    return ( getHexPixel(uv)+ getHexPixel(r))*max(.0, sign(f.z*tmp.y - f.w*tmp.x)); //;\n}\n\nfloat fold2(in vec2 uv, in vec4 f1, in vec4 f2) {\n    vec2 r = refl(uv, f2);\n    vec2 tmp = uv - f2.xy;\n\n    return ( fold1(uv, f1)+ fold1(r, f1))*max(.0, sign(f2.z*tmp.y - f2.w*tmp.x)); //;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    \n    vec2 uv = (fragCoord - .5*iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec2 muv = (iMouse.xy - .5*iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    float t = mod(iTime, 40.0);\n    float ratio = smoothstep(0.0, 10.0, t) - smoothstep(25.0, 35.0, t);\n    \n    float d = 3.14/180.*(33.+2.*cos(3.14/2. + .7*iTime));\n    float d2 = 3.14/180.*(67.+2.*cos(iTime));\n\n    vec4 f1 = vec4(mix(.4, .0, ratio), mix(.4, .0, ratio), -sin(d),cos(d));\n    vec4 f2 = vec4(mix(-.4, .05, ratio), mix(.4, .05, ratio), -sin(d2),-cos(d2));\n    //vec4 f2 = vec4(-.4, .4, -sin(d2),-cos(d2));\n    //vec4 f1 = vec4(.4-.25*(1.+sin(.1*iTime)), .4-.25*(1.+sin(.1*iTime)), -sin(d),cos(d));\n    //vec4 f1 = vec4(.1-.05*(1.+cos(.1*iTime)), .1-.05*(1.+cos(.1*iTime)), -sin(d),cos(d));\n    //vec4 f2 = vec4(muv,-sin(d2),-cos(d2));\n    //vec4 f2 = vec4(-.4+.2*(1.+sin(3.14/10. +.1*iTime)), .4-.2*(1.+sin(3.14/10. +.1*iTime)),-sin(d2),-cos(d2));\n    //vec4 f2 = vec4(-.0+.02*(1.+cos(3.14/10. +.1*iTime)), .0-.02*(1.+cos(3.14/10. +.1*iTime)),-sin(d2),-cos(d2));\n    \n    vec3 col = mix(vec3(1.), vec3(.3,0,.8),\n    //getHexPixel(uv+vec2(.1,.1)*iTime*1.)\n      // + getHexPixel(uv+vec2(.05,.1)*-iTime*1.)\n      fold2(uv, f1, f2)\n    );\n    fragColor = vec4(col,1.);    \n}","name":"Image","description":"","type":"image"}]}