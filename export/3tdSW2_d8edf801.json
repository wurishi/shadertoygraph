{"ver":"0.1","info":{"id":"3tdSW2","date":"1581721821","viewed":275,"name":"Blood moon","username":"Dijkstra","description":"Attempt at making a dynamic sky full of stars and a cloud","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["noise","cloud","moon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand21(vec2 uv){\n \tuv = fract(uv*vec2(267.665, 393.725));\n \tuv += dot(uv, uv + 93.89872);\n \treturn fract(uv.x*uv.y);\n}\n\nfloat smoothrand2(vec2 uv, float size){\n    vec2 lv = smoothstep(0.,1., fract(uv*size));\n    vec2 id = floor(uv*size);\n    \n    float bl = rand21(id + vec2(0.,0.));\n    float br = rand21(id + vec2(1.,0.));\n    float tl = rand21(id + vec2(0.,1.));\n    float tr = rand21(id + vec2(1.,1.));\n    float b = mix(bl, br, lv.x);\n    float t = mix(tl, tr, lv.x);\n    float c = mix(b, t, lv.y);\n    \n    return c;\n}\n\nfloat smootherrand2(vec2 uv, float size){\n    float total = smoothrand2(uv, size);\n    total += smoothrand2(uv, size*2.)/4.;\n    total += smoothrand2(uv, size*4.)/8.;\n    total += smoothrand2(uv, size*8.)/16.;\n    total += smoothrand2(uv, size*16.)/32.;\n \treturn total;\n}\n\nfloat cloud2(vec2 uv){\n\tvec2 uv2 = uv;\n\tuv2.x+=iTime*.03;\n\tuv2.x = mod(uv2.x+10.,300.);\n\tfloat color = smootherrand2(uv2, 10.)*1.5;\n\n\tfloat d = 1.-length(uv)+.3;\n\td = pow(d, 10.);\n\td = clamp(d, 0.,1.);\n\tcolor *= d;\n\t\n\tfloat min = .2;\n\tfloat h = clamp((1.+min)-length(uv.y),0.,1.);\n\th = pow(h, 10.);\n\tclamp(h, 0.,1.);\n\tcolor *= h;\n\t\n\treturn color * .9;\n}\n\nfloat star(vec2 uv, vec2 id){\n\t\n\tfloat d = length(uv);\n\tfloat rand = rand21(id);\n\tfloat o = (.003/d) * rand;\n\tfloat r2 = id.x -id.y *id.x;\n\to += sin(r2+iTime)*.015;\n\to *= smoothstep(.4,.1,d);\n\treturn o;\n}\n\nfloat skyFullOfStars(vec2 uv){\n\tuv*= 10.;\n\tvec2 gv = fract(uv)-.5;\n\tvec2 id = floor(uv);\n\tfloat col = 0.;\n\tfor(int i=-1;i<=1;++i){\n\t\tfor(int j=-1;j<=1;++j){\n\t\t\tvec2 offset = vec2(i,j);\n\t\t\tfloat rand = rand21(id+offset);\n\t\t\tcol += star(gv-offset - vec2(rand-.5, fract(rand*10.)-.5), id+offset);\n\t\t}\n\t}\n\treturn col;\n}\n\nvec3 backSun(vec2 uv){\n\tvec3 color = vec3(skyFullOfStars(uv));\n\tfloat tmp = clamp((1.- length(uv*2.5)), 0., 1.);\n\tcolor = clamp(color - tmp , 0., 1.);\n\n\tif(length(uv) < .3){\n\t\tcolor = mix(vec3(.94, .29, .26),vec3(.99, .63, .38), 1.-(uv.y+.3)/.6); // color sun original\n\t\t//color = mix(vec3(0.5, 0.,0.),vec3(.86, .07, .23), 1.-(uv.y+.3)/.6); // gregoire color\n\t}\n\n\telse{\n\t\tfloat x = 1.3-length(uv);\n\t\tx = pow(x, 25.); \n\t\tcolor += x * vec3(.84,.16,.16);\n\t}\n\treturn color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=.5;\n    uv.x*= iResolution.x/iResolution.y;\n    vec3 color = backSun(uv);\n    float alpha = clamp(cloud2(vec2(uv.x, uv.y+.2)), 0., 1.);\n    alpha = clamp(alpha-.01, 0.,1.);\n    vec3 cloudColor = mix(vec3(.15,.14,.32), vec3(.94, .29, .56), (uv.y+.3)*3.); // original\n    //vec3 cloudColor = vec3(.0,.0,.5);\n\n    color = cloudColor*alpha + (1. - alpha)*color;\n    //color = vec3(uv.y+.1)*3.;\n    //color = vec3(skyFullOfStars(uv));\n    fragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}