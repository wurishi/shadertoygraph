{"ver":"0.1","info":{"id":"mtVGDt","date":"1684901434","viewed":51,"name":"Basic patterns 2 - Polar Coords","username":"rafaelbeckel","description":"Some of the basic patterns I've got from Char Stiles:\nhttps://www.youtube.com/watch?v=0kcbWQg99TA\n\nBasic Patterns 1 - sin & mod: https://www.shadertoy.com/view/dtVGDt","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["polarcoordinates","basics","length"],"hasliked":0,"parentid":"dtVGDt","parentname":"Basic patterns 1 - sin & mod"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Check Basic Patterns 1: https://www.shadertoy.com/view/dtVGDt\n    vec2 normCoord = fragCoord/iResolution.xy;\n    vec2 uv = -1. + 2. * normCoord;\n    float time = iTime/2.;\n    \n    // Re-scale the x coordinate to get a perfect circle\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // length returns the distance from the center.\n    float radius = length(uv); \n    \n    // Multiplying by a constant increases the frequency\n    // so we can create this illusion of many rings.\n    // Subtracting the radius from the time makes the circles\n    // spread from the center, otherwise they will move inwards.\n    float rings = sin(time - radius * 40.);\n\n    // Output to screen\n    fragColor = vec4(rings);\n}","name":"Image","description":"","type":"image"}]}