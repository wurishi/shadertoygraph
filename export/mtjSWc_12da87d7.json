{"ver":"0.1","info":{"id":"mtjSWc","date":"1676743691","viewed":220,"name":"Inverse H-Curve","username":"MartyMcFly","description":"Inverse Mapping of the H-Curve (or H-Order), a discrete variant of the Sierpinsky-Knopp Order / space filling curve.","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["hilbert","morton","spacefillingcurve","hcurve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2023 Pascal Gilcher\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//\n// Inverse Mapping of the H-Curve (index -> coordinate)\n// for coordinate->index and more information see https://www.shadertoy.com/view/mlS3Rm \n//\n// \"Towards Optimal Locality in Mesh-Indexings\" (1997)\n// Rolf Niedermeier, Klaus Reinhardt and Peter Sanders\n//\n\n// plotting based on https://www.shadertoy.com/view/XdlcWr (inigo quilez)\n\nconst int level = 6;//change in both tabs\n\nfloat sdSqLine( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n    vec2 d = pa - ba*h;\n    return dot(d,d);\n}\n\nvec2 get_point(int i)\n{\n    return texelFetch(iChannel0, ivec2(i % int(iResolution.x), i / int(iResolution.x)), 0).xy;\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float e = 1.0/iResolution.y;\n    vec2 p = (fragCoord - vec2(0.5*(iResolution.x - iResolution.y),0.0))*e;\n    \n    p = -0.25 + (1.0+2.0*0.25)*p;\n    \n    const int numPoints = 1<<(level<<1);\n    const float w = float((1<<level)-1); // distance between grid points\n    \n    float d = 2.0;\n    float rcpw = 1.0 / w;\n    vec2 o = vec2(get_point(0)) * rcpw; \n    \n    for(int i=1; i<numPoints/2; i++)\n    {\n        vec4 pair = texelFetch(iChannel0, ivec2(i % int(iResolution.x), i / int(iResolution.x)), 0);\n        pair *= rcpw;        \n        d = min(d, sdSqLine(p, pair.xy, o));\n        d = min(d, sdSqLine(p, pair.zw, pair.xy));\n        o = pair.zw;\n    }\n    \n    d = min(d, sdSqLine(p, vec2(get_point(0)) * rcpw, o));//close gap    \n    d = sqrt(d);  \n    \n    // colors\n    float f  = smoothstep(0.0,2.0*e,d); \n          //f *= 0.8 + 0.2*sqrt(clamp(d/(8.0*e),0.0,1.0));          \n   \n       float fade = 1.0/(1.0 + d);\n       fade = pow(fade, 6.0);\n          \n     fragColor.w = 1.0;     \n     fragColor.xyz = 0.5 + 0.5*cos( 3.0 + 2.7*fade + vec3(0.0,0.6,1.0));     \n     fragColor.xyz *= f;  \n  \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//precalculating the positions here - texture fetches in Image are faster than evaluating directly\n\nconst int level = 6;  \n\n//this took me far longer than I want to admit...\nivec2 H_curve_inverse(int i, int N)\n{\n    ivec2 p = ivec2(0);    \n    \n    while((N>>=2) >= 16)\n    {    \n        //calculate quadrant \n        //0 3\n        //1 2\n        int q = (i / N) & 0x3;  \n        \n        //offset\n        p = 2 * p + ivec2(q>>1, (q ^ (q>>1)) & 0x1); //00 01 11 10 \n        //\"toroidal\" wrap of indices (see q)\n        //so index 0 is at center again\n        i += ((q * 2 + 5) & 0x7) * (N >> 3); //5, 7, 1, 3\n    }   \n    \n    //up until now, this is basically Sierpinsky order\n    //to get a SFC from the mapping that does not visit points twice\n    //switching to a \"H\" at the smallest level is (up to isometry) \n    //the only way to solve this.\n    \n    //TODO minimize this\n    ivec2 H[16] = ivec2[](ivec2(1, 1), ivec2(1, 0), ivec2(0, 0), ivec2(0, 1),ivec2(0, 2),ivec2(0, 3),ivec2(1, 3),ivec2(1, 2),ivec2(2, 2),ivec2(2, 3),ivec2(3, 3),ivec2(3, 2),ivec2(3, 1),ivec2(3, 0),ivec2(2, 0),ivec2(2, 1));\n    \n    p *= 4;\n    p += H[i & 0xF];     \n    return p;    \n}\n\nivec2 curve( int i )\n{\n    return H_curve_inverse(i, (1<<level)*(1<<level));\n}\n\nvec2 curve_to_ring(int i)\n{\n    vec2 curve_p = vec2(curve(i));    \n    float N = float((1<<level)*(1<<level));\n    \n    float ang = (float(i) / N - 0.5) * 3.1415927 * 2.0;\n    vec2 ring_p = vec2(sin(ang), cos(ang)) * 0.5 + 0.5;\n    ring_p *= sqrt(N);\n    \n    float timeang = iTime * 0.5;\n    mat2 rot = mat2(cos(timeang), -sin(timeang), sin(timeang), cos(timeang));\n    \n    float fact = smoothstep(0.0, 1.0, -cos(3.1415927 * iTime*0.25)*0.5+0.5); \n    fact *= fact;\n    vec2 res = mix(curve_p, ring_p, vec2(fact));\n    \n    res /= sqrt(N);    \n    res -= 0.5;\n    res *= rot;\n    res += 0.5;\n    res *= sqrt(N);    \n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int i = int(fragCoord.x) + int(iResolution.x) * int(fragCoord.y);    \n    int numPoints = 1<<(level<<1);\n    if(i > numPoints) return;\n    fragColor = vec4(curve_to_ring(i * 2),curve_to_ring(i * 2 + 1));\n}","name":"Buffer A","description":"","type":"buffer"}]}