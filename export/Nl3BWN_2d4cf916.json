{"ver":"0.1","info":{"id":"Nl3BWN","date":"1663083593","viewed":209,"name":"Finite Water Cymatic Fork","username":"tarnith","description":"Fork of Finite Water by overlii \n\nTreating the render window as a kind of Chladni plate. Fun to watch the modes.","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["procedural","simulation","water","multipass"],"hasliked":0,"parentid":"4sd3WB","parentname":"Finite Water"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Wave propagation simulation using finite differences.\n// See (f.ex.) http://www.uio.no/studier/emner/matnat/ifi/INF2340/v05/foiler/sim04.pdf\n// for the model and equations.\n\nvoid mainImage( out vec4 C, in vec2 co )\n{\n\tvec2 uv = co.xy / R.xy;\n\tC = vec4(T(uv).r*vec3(.5,0,0)+T(uv).r*vec3(.0,0.2,0)+abs(T(uv).g)*vec3(0,0.,.5),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 C, in vec2 co )\n{\n    float dx = 1.0/R.x;\n    float dy = 1.0/R.y;\n    vec2 uv = co.xy / R.xy;\n\n    vec2 udu = T(uv).xy;\n    \n\t// old elevation\n    float u = udu.x;\n    // old velociy\n    float du = udu.y;\n    \n    // Finite differences\n    float ux = T(vec2(uv.x+dx, uv.y)).x;\n    float umx = T(vec2(uv.x-dx, uv.y)).x;\n    float uy = T(vec2(uv.x, uv.y+dy)).x;\n    float umy = T(vec2(uv.x, uv.y-dy)).x;\n\n    // new elevation\n    float nu = u + du + 0.5*(umx+ux+umy+uy-4.0*u);\n    nu *= 0.999;\n    if (iFrame == 1)\n        C = T(uv)+vec4(vec3(sin(length((uv-.5)*R.x*.1)))*length((uv-.5)),1.0);\n    else\n    // store elevation and velocity\n        C = vec4(nu,nu-u,0.0,0.0);\n\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define T(u) texture(iChannel0,u)\n#define R iResolution","name":"Common","description":"","type":"common"}]}