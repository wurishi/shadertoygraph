{"ver":"0.1","info":{"id":"7dyfRw","date":"1657830714","viewed":111,"name":"Alien Biotech","username":"halvqr","description":"click and hold to run the automaton, drag vertically and horizontally to change the reset values, and press space to reset.","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["cellularautomaton","sandpiles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec4 col = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    float lum = clamp(col.x, 0.0, 1.0);\n    //fragColor = vec4(lum, lum, lum, 1.0);\n    fragColor = vec4(lum, lum - sig(col.x - lum), lum, 1.0);\n    //fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    ivec2 ic = ivec2(fragCoord);\n    ivec2 ts = textureSize(iChannel1, 0);\n    vec4 self = texelFetch(iChannel1,ic,0);\n    float m = 10.0;\n    float p;\n    float q;\n    // starting texture\n    if(texelFetch(iChannel2,ivec2(32,0),0).x > 0.0 || iFrame == 0){\n        // down in corner\n        //fragColor = texelFetch(iChannel0, ic, 0) * (1.0 + m + m) - m;\n        // full screen loop\n        fragColor = texture(iChannel0, fragCoord/iResolution.yy) * (1.0 + m + m) - m;\n        // blank\n        //fragColor = vec4(0.5);\n    }else if(iMouse.z >= 0.0){\n        if(iMouse.z == 0.0){\n            p = 0.25 + cos(0.2 * iTime) * 0.25;\n            q = 0.75 - cos(0.2 * iTime) * 0.25;\n        }else{\n            p = iMouse.x / iResolution.x;\n            q = iMouse.y / iResolution.y;\n        }\n         \n        vec4 moore = vec4(0.0);\n        vec4 vonN = vec4(0.0);\n            \n        for(int i = -1; i < 2; i++){\n            for(int j = -1; j < 2; j++){\n                vec4 neighbor = texelFetch(iChannel1,ivec2(ic.x + i,ic.y + j),0);\n                // edges\n                if(ic.x + i >= ts.x\n                    || ic.y + j >= ts.y\n                    || ic.x + i < 0\n                    || ic.y + j < 0){\n                    // blank\n                    //neighbor = vec4(0.5);\n                    // checkerboard\n                    //neighbor = vec4(float((ic.x + ic.y) % 2) * (1.0 + m + m) - m);\n                    // looping (adjust ts)\n                    neighbor = texelFetch(iChannel1,\n                        ivec2((ic.x + i + ts.x) % ts.x,(ic.y + j + ts.y) % ts.y),0);\n                }\n                if(j != 0 || i != 0){\n                    moore += (neighbor - p) / 8.0 * step(1.0, neighbor);\n                    moore += (neighbor - q) / 8.0 * (1.0 - step(0.0, neighbor));\n                    if(j == 0 || i == 0){\n                        vonN += (neighbor - p) / 4.0 * step(1.0, neighbor);\n                        vonN += (neighbor - q) / 4.0 * (1.0 - step(0.0, neighbor));\n                    }\n                }\n            }\n        }\n        vec4 mode = moore;\n        fragColor = vec4((p + mode.x) * step(1.0, self.x)\n            + (q + mode.x) * (1.0 - step(0.0, self.x))\n            + (self.x + mode.x) * (step(0.0, self.x) * (1.0 - step(1.0, self.x))),\n            \n            (p + mode.y) * step(1.0, self.y)\n            + (q + mode.y) * (1.0 - step(0.0, self.y))\n            + (self.y + mode.y) * (step(0.0, self.y) * (1.0 - step(1.0, self.y))),\n            \n            (p + mode.z) * step(1.0, self.z)\n            + (q + mode.z) * (1.0 - step(0.0, self.z))\n            + (self.z + mode.z) * (step(0.0, self.z) * (1.0 - step(1.0, self.z))),\n            \n            1.0);\n    }else{\n        fragColor = self;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float sig(float x)\n{\n    return(x / sqrt(x * x + 1.0));\n}","name":"Common","description":"","type":"common"}]}