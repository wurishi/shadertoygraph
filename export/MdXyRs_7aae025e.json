{"ver":"0.1","info":{"id":"MdXyRs","date":"1489397677","viewed":143,"name":"HelloRayMarching","username":"comoc","description":"A basic shader of ray marching.\nReference: https://wgld.org/d/glsl/g009.html","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision mediump float;\nconst float sphereSize = 1.0; // radius of the sphere\n\nfloat distanceFunc(vec3 p){\n#if 0 // sphere\n    return length(p) - sphereSize;\n#else  // box\n    vec3 q = abs(p);\n    return length(max(q - vec3(0.5, 0.5, 0.5), 0.0));\n#endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // fragment position\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    // camera\n    vec3 cPos = vec3(0.0,  0.0,  2.0);\n    vec3 cDir = vec3(0.0,  0.0, -1.0);\n    vec3 cUp  = vec3(0.0,  1.0,  0.0);\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 1.0;\n    \n    // ray\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n    \n    // marching loop\n    float distance = 0.0; // distance between a ray anad the object\n    float rLen = 0.0;     // additional length to the ray\n    vec3  rPos = cPos;    // a tip of the ray\n    for(int i = 0; i < 16; i++){\n        distance = distanceFunc(rPos);\n        rLen += distance;\n        rPos = cPos + ray * rLen;\n    }\n    \n    // hit check\n    if(abs(distance) < 0.001){\n        fragColor = vec4(vec3(1.0), 1.0);\n    }else{\n        fragColor = vec4(vec3(0.0), 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}