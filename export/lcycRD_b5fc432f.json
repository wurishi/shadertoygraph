{"ver":"0.1","info":{"id":"lcycRD","date":"1731548660","viewed":153,"name":"Perlin Stargate","username":"thedarkbunny","description":"Had a vaguely-clever idea for a perlin-based ripple pattern.  Turned out pretty well, all told.","likes":8,"published":3,"flags":0,"usePreview":0,"tags":["perlinnoise","practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// --- noise functions from https://www.shadertoy.com/view/XslGRr\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\nvec3 hash3( vec3 p ) {  \t\t\t\t\t\t// rand in [-1,1]\n\tp = vec3( dot(p,vec3(127.1,311.7,213.6)),\n\t\t\t  dot(p,vec3(327.1,211.7,113.6)),\n\t\t\t  dot(p,vec3(269.5,183.3,351.1)) );\n\treturn -1. + 2.*fract(sin(p)*43758.5453123);\n}\nfloat noise3( in vec3 p ) {\n    vec3 i = floor(p), f = fract(p);\n\tvec3 u = f*f*(3.-2.*f);\n    return mix(\n\t\t   mix( mix( dot( hash3( i + vec3(0.,0.,0.) ), f - vec3(0.,0.,0.) ), \n                     dot( hash3( i + vec3(1.,0.,0.) ), f - vec3(1.,0.,0.) ), u.x),\n                mix( dot( hash3( i + vec3(0.,1.,0.) ), f - vec3(0.,1.,0.) ), \n                     dot( hash3( i + vec3(1.,1.,0.) ), f - vec3(1.,1.,0.) ), u.x), u.y),\n           mix( mix( dot( hash3( i + vec3(0.,0.,1.) ), f - vec3(0.,0.,1.) ), \n                     dot( hash3( i + vec3(1.,0.,1.) ), f - vec3(1.,0.,1.) ), u.x),\n                mix( dot( hash3( i + vec3(0.,1.,1.) ), f - vec3(0.,1.,1.) ), \n                     dot( hash3( i + vec3(1.,1.,1.) ), f - vec3(1.,1.,1.) ), u.x), u.y),\n\t\t   u.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    //Scale screenspace to something that looks good\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y*20.;\n\n    //Position vector uses (normalized):\n    //(1,1,1) for time\n    //(-2,1,1) for X\n    //(0,1,-1) for Y\n    //I could have used a mat3, but I'm lazy.\n    vec3 pos = vec3(iTime);\n    pos += uv.x*vec3(-0.816496581,0.40824829,0.40824829);\n    pos += uv.y*vec3(0,0.707106781,-0.707106781);\n    \n    //Taking sine of noise gives us those nice ripples\n    float n = smoothstep(-0.5,0.5,sin(20.*noise3(pos))-length(uv)*0.07);\n    \n    //Tonemap to give it some color\n    vec3 tm = pow(vec3(n),vec3(0.861500049,0.119706701,0.002050083));\n\n    fragColor = vec4(tm,0);\n    \n}\n\n\n\n","name":"Image","description":"","type":"image"}]}