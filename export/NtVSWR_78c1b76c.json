{"ver":"0.1","info":{"id":"NtVSWR","date":"1640490906","viewed":122,"name":"Two Pass Gaussian Blur","username":"allllll3n","description":"Gaussian blur shader study","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["2d","blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PICONST 0.3989467 //1.0f/sqrt(2.0f*PI)\n\nfloat GaussianKernel(float radius,float sigma){\n    return PICONST/sigma*exp(-0.5*radius*radius/(sigma*sigma));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float sigma=10.0f;\n    float Z=0.0f;\n    const int kernelSize=10;\n    const int halfKernelSize=(kernelSize-1)/2;\n    float Customkernel[kernelSize];\n\n    for(int i=0;i<=halfKernelSize;i++){\n        Customkernel[halfKernelSize-i]=Customkernel[halfKernelSize+i]=GaussianKernel(float(i),sigma);\n    }\n    \n    for(int i=0;i<kernelSize;i++){\n    \n        Z+=Customkernel[i];\n    }\n\n    //float Kernel[5]=float[5](1.0f,4.0f,6.0f,4.0f,1.0f);//Predefine 1D kernal;\n    vec3 color=vec3(0.0f);\n    \n    //int KernelSize=5/2;\n    \n    for(int i=0;i<kernelSize;i++){\n        color+=Customkernel[i]*texture(iChannel0,(fragCoord.xy+vec2(0.0f,float(i-halfKernelSize)))/iResolution.xy).rgb;\n    }\n    \n    //test code for bufferA\n    //vec2 uv=fragCoord.xy / iResolution.xy;\n    //vec3 col=texture(iChannel0, uv).xyz;\n    //test code end\n    \n    \n    // Output to screen\n    fragColor = vec4(color/(Z*Z),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PICONST 0.3989467 //1.0f/sqrt(2.0f*PI)\n\nfloat GaussianKernel(float radius,float sigma){\n    return PICONST/sigma*exp(-0.5*radius*radius/(sigma*sigma));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Calculate 1D Kernel;\n    float sigma=10.0f;\n    float Z=0.0f;\n    const int kernelSize=10;\n    const int halfKernelSize=(kernelSize-1)/2;\n    float Customkernel[kernelSize];\n\n    for(int i=0;i<=halfKernelSize;i++){\n        Customkernel[halfKernelSize-i]=Customkernel[halfKernelSize+i]=GaussianKernel(float(i),sigma);\n    }\n\n    //float Kernel[5]=float[5](1.0f,4.0f,6.0f,4.0f,1.0f);//Predefine 1D kernal;\n    vec3 color=vec3(0.0f);\n    \n    //int KernelSize=5/2;\n    \n    for(int i=0;i<kernelSize;i++){\n        color+=Customkernel[i]*texture(iChannel0,(fragCoord.xy+vec2(float(i-halfKernelSize),0.0f))/iResolution.xy).rgb;\n    }\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n    //fragColor = vec4(float(Customkernel[4]),float(Customkernel[2]),float(Customkernel[3]),1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}