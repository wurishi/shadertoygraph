{"ver":"0.1","info":{"id":"7sGyWG","date":"1655469381","viewed":350,"name":"Cosmic Clock","username":"ChunderFPV","description":"A line is segmented into a logarithmic number spiral.  Mouse y to zoom.","likes":18,"published":1,"flags":0,"usePreview":1,"tags":["2d","spiral","logarithmic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE 2.0\n#define PI radians(180.0)\n#define TAU (PI*2.0)\n#define CS(a) vec2(cos(a), sin(a))\n#define PT(u,r) smoothstep(0.0, r, r-length(u))\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    float n = -3.0; // spiral exponent\n    float sec = 10.0; // time for lesser cycle\n    float lt = -iTime/sec; // lesser cycle (color alignment)\n    float gt = (iTime*TAU)/(sec*3.0); // greater cycle (left/right alignment)\n    vec2 R = iResolution.xy;\n    vec4 m = iMouse; m.xy = m.xy*2.0/R-1.0; // ±1x, ±1y\n    float z = (m.z > 0.0) ? pow(1.0-abs(m.y), 2.0*sign(m.y)): 1.0; // mouse y zoom\n    vec2 uv = (U-0.5*R)/R.y*SCALE*z; // apply cartesian, scale, zoom\n    float px = length(fwidth(uv)*0.7); // pixel size\n    float l = length(uv); // unit radius\n    float r = pow(l, n); // spiral radius\n    float sa = gt+round(r)*lt*TAU; // segmented spiral arc\n    vec2 xy = CS(sa)*l; // point xy coords\n    vec3 c = vec3(0); // background color\n    float f = (r > 0.5) ? 1.0: -1.0; // flip trails\n    vec2 g = vec2(atan(uv.y, uv.x), atan(-uv.y, -uv.x))*f; // spiral gradients\n    g = mod(g-sa*f, TAU)/0.15; // continue building spiral gradients\n    g = min(g, 1.0/g); // darken filter\n    c += g.x*vec3(1.0, 0.3, 0.0)*0.1; // add orange gradient\n    c += g.y*vec3(0.3, 0.0, 1.0)*0.2; // add purple gradient\n    c *= texture(iChannel0, CS(lt)*l).xyz*4.0; // multiply with texture\n    c += vec3(0.9, 0.7, 0.0)*PT(uv-xy, px*15.0)*0.32; // gold glow\n    c += vec3(0.2, 0.4, 1.0)*PT(uv+xy, px*15.0)*0.4; // blue glow\n    c += PT(uv-xy, px); // white line 1\n    c += PT(uv+xy, px); // white line 2\n    float d = mod(r+0.5, 1.0); // gradient to smooth edges\n    d = min(d, 1.0-d); // darken filter\n    c *= d*3.0; // smooth\n    float cg = pow(max(1.0-length(uv), 0.0), 13.0); // center glow\n    if (z < 1.0) cg *= z; // fade glow on zoom in\n    c = max(c, cg); // lighten filter\n    O = vec4(c*1.5, 1.0); // draw\n}","name":"Image","description":"","type":"image"}]}