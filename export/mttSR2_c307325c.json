{"ver":"0.1","info":{"id":"mttSR2","date":"1685607482","viewed":164,"name":"Frequency modulation shader","username":"dragan","description":"First shader try. \nFrequency modulation technique. https://en.wikipedia.org/wiki/Frequency_modulation","likes":4,"published":1,"flags":40,"usePreview":0,"tags":["sound","fm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor =  texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define M_TAU 6.28318530718\n\nfloat mTime( float t ) {\n    return t * 0.1;\n}\n\nvec2 mController( float time ) {\n    return vec2(sin(time * 0.005), \n                sin(time+sin(time+sin(time+sin(time)))) * 5.0);\n}\n\nfloat sine( float x, vec2 m ) {\n    float frequency = 1.0 + m.x * 10.0;\n    float modulator = 2.0 * m.y * sin(M_TAU * x * frequency); \n    return sin(M_TAU * x + modulator);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    float s = sine(uv.x, mController(mTime(iTime))) * 0.49 + 0.5;\n    float y = uv.y - s;\n    float col = smoothstep(1.0, 0.0, abs(y) / fwidth(y));\n    vec3 tex = 0.999 * texture(iChannel0, uv).rgb;\n    tex = tex.x == 0.0 ? vec3(0.0) : sin(tex);\n    fragColor = vec4(vec3(col + dot(tex, tex)) + tex, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time ) {\n    float basFreq = 40.0, offset = 0.2;\n    vec2 lr = vec2(\n                   sine(time * basFreq, mController(mTime(time-offset))),\n                   sine(time * basFreq, mController(mTime(time+offset)))\n                );\n    return lr;\n}","name":"Sound","description":"","type":"sound"}]}