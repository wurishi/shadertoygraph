{"ver":"0.1","info":{"id":"DlVfRh","date":"1702611970","viewed":22,"name":"Shader Practice 2.1","username":"pfyuan","description":"a practice for creative tech","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractual"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( in float t)\n{\n    vec3 a = vec3(1.000, 0.500, 0.500);\n    vec3 b = vec3(0.500, 0.500, 0.500);\n    vec3 c = vec3(0.750, 1.000, 0.667);\n    vec3 d = vec3(0.800, 1.000, 0.333);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.x / 1.0;\n    vec2 uv0 = uv;\n    \n    float angle = iTime * 0.005;\n    \n    vec3 col = vec3(0.0);\n    \n    for(float i = 0.0; i < 128.0; i += 1.0){\n        uv = abs(uv);\n        uv -= 0.5;\n        uv *= 1.015;\n        uv *= mat2(\n            cos(angle), -sin(angle), \n            sin(angle), cos(angle));\n            \n        float d = length(uv) * exp(-length(uv0));\n        //d = sin(d * 8. + iTime)/8.0;\n        //d = abs(d);\n        \n        col = palette(length(uv) + i * 0.1 + iTime * 0.1);\n        col += d;\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}