{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat pointRadius = 0.06;\n\tfloat linkSize = 0.04;\n\tfloat noiseStrength = 0.08; // range: 0-1\n\t\n\tfloat minDimension = min(iResolution.x, iResolution.y);\n\tvec2 bounds = vec2(iResolution.x / minDimension, iResolution.y / minDimension);\n\tvec2 uv = fragCoord.xy / minDimension;\n\t\n\tvec3 pointR = vec3(0.0, 0.0, 1.0);\n\tvec3 pointG = vec3(0.0, 0.0, 1.0);\n\tvec3 pointB = vec3(0.0, 0.0, 1.0);\n\t\n\t// Make the points orbit round the origin in 3 dimensions.\n\t// Coefficients are arbitrary to give different behaviours.\n\t// The Z coordinate should always be >0.0, as it's used directly to\n\t//  multiply the radius to give the impression of depth.\n\tpointR.x += 0.32 * sin(1.32 * iTime);\n\tpointR.y += 0.3 * sin(1.03 * iTime);\n\tpointR.z += 0.4 * sin(1.32 * iTime);\n\t\n\tpointG.x += 0.31 * sin(0.92 * iTime);\n\tpointG.y += 0.29 * sin(0.99 * iTime);\n\tpointG.z += 0.38 * sin(1.24 * iTime);\n\t\n\tpointB.x += 0.33 * sin(1.245 * iTime);\n\tpointB.y += 0.3 * sin(1.41 * iTime);\n\tpointB.z += 0.41 * sin(1.11 * iTime);\n\t\n\t// Centre the points in the display\n\tvec2 midUV = vec2(bounds.x * 0.5, bounds.y * 0.5);\n\tpointR.xy += midUV;\n\tpointG.xy += midUV;\n\tpointB.xy += midUV;\n\t\n\t// Calculate the vectors from the current fragment to the coloured points\n\tvec2 vecToR = pointR.xy - uv;\n\tvec2 vecToG = pointG.xy - uv;\n\tvec2 vecToB = pointB.xy - uv;\n\t\n\tvec2 dirToR = normalize(vecToR.xy);\n\tvec2 dirToG = normalize(vecToG.xy);\n\tvec2 dirToB = normalize(vecToB.xy);\n\t\n\tfloat distToR = length(vecToR);\n\tfloat distToG = length(vecToG);\n\tfloat distToB = length(vecToB);\n\t\n\t// Calculate the dot product between vectors from the current fragment to each pair\n\t//  of adjacent coloured points. This helps us determine how close the current fragment\n\t//  is to a link between points.\n\tfloat dotRG = dot(dirToR, dirToG);\n\tfloat dotGB = dot(dirToG, dirToB);\n\tfloat dotBR = dot(dirToB, dirToR);\n\t\n\t// Start with a bright coloured dot around each point\n\tfragColor.x = 1.0 - smoothstep(distToR, 0.0, pointRadius * pointR.z);\n\tfragColor.y = 1.0 - smoothstep(distToG, 0.0, pointRadius * pointG.z);\n\tfragColor.z = 1.0 - smoothstep(distToB, 0.0, pointRadius * pointB.z);\n\tfragColor.w = 1.0;\t\n\t\n\t// We want to show a coloured link between adjacent points.\n\t// Determine the strength of each link at the current fragment.\n\t// This tends towards 1.0 as the vectors to each point tend towards opposite directions.\n\tfloat linkStrengthRG = 1.0 - smoothstep(dotRG, -1.01, -1.0 + (linkSize * pointR.z * pointG.z));\n\tfloat linkStrengthGB = 1.0 - smoothstep(dotGB, -1.01, -1.0 + (linkSize * pointG.z * pointB.z));\n\tfloat linkStrengthBR = 1.0 - smoothstep(dotBR, -1.01, -1.0 + (linkSize * pointB.z * pointR.z));\n\t\n\t// If the current fragment is in a link, we need to know how much the\n\t//  linked points contribute of their colour.\n\tfloat sumDistRG = distToR + distToG;\n\tfloat sumDistGB = distToG + distToB;\n\tfloat sumDistBR = distToB + distToR;\n\t\n\tfloat contribRonRG = 1.0 - (distToR / sumDistRG);\n\tfloat contribRonBR = 1.0 - (distToR / sumDistBR);\n\t\n\tfloat contribGonRG = 1.0 - (distToG / sumDistRG);\n\tfloat contribGonGB = 1.0 - (distToG / sumDistGB);\n\t\n\tfloat contribBonGB = 1.0 - (distToB / sumDistGB);\n\tfloat contribBonBR = 1.0 - (distToB / sumDistBR);\n\t\n\t// Additively blend the link colours into the fragment.\n\tfragColor.x += (linkStrengthRG * contribRonRG) + (linkStrengthBR * contribRonBR);\n\tfragColor.y += (linkStrengthGB * contribGonGB) + (linkStrengthRG * contribGonRG);\n\tfragColor.z += (linkStrengthBR * contribBonBR) + (linkStrengthGB * contribBonGB);\n\t\n\t// Use an underlying texture to provide some noise\n\tfloat noiseMin = 1.0 - noiseStrength;\n\tfragColor.xyz *= (1.0 - noiseStrength) + (noiseStrength * texture(iChannel0, uv * 2.0).xyz);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdX3WN","date":"1369818439","viewed":11093,"name":"Plasma Triangle","username":"ElusivePete","description":"3 points of a glowing triangle orbit round each other. Sine waves with various coefficients define the orbits. The links are rendered by using dot products to determine how close a given fragment is to the edge of the triangle.","likes":97,"published":1,"flags":0,"usePreview":0,"tags":["pseudo3d","additiveblending"],"hasliked":0,"parentid":"","parentname":""}}