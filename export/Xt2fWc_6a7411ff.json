{"ver":"0.1","info":{"id":"Xt2fWc","date":"1517418876","viewed":123,"name":"Hexagoniser","username":"mooped","description":"Quantize distance field based on hexiness of the gradient. Break your eyes.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["hexes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle(vec2 pos, float rad)\n{\n    return length(pos) - rad;\n}\n\nvec2 getMouse()\n{\n    return iMouse.xy/iResolution.xy;\n}\n\nfloat dist(vec2 uv)\n{\n    //return texture(iChannel0, uv).r;\n    return min(\n        min(circle(uv - vec2(0.5, 0.0), 0.1),\n           circle(uv - vec2(0.0, 1.f), 0.1)\n        ),\n        circle(uv - getMouse(), 0.1)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y + 0.5;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // Distance field\n    float d = dist(uv);\n    vec2 n = normalize(vec2(dFdx(d), dFdy(d)));\n    \n    float ang = (atan(n.y, n.x) / 3.1415 + 1.0) * 0.5;\n    \n    ang = floor(ang * 6.f) / 6.f;\n    ang = ang * 2.f - 1.f;\n    \n    float v = dot(uv, vec2(sin(3.1415 * (ang)), cos(3.1415 * (ang))));\n    \n    col *= sin((v + iTime * 0.5) * 50.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}