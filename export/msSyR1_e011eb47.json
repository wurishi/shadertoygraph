{"ver":"0.1","info":{"id":"msSyR1","date":"1702666020","viewed":23,"name":"outSideIn1","username":"mw_frac","description":"fjkdsal","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette ( float t )\n{\n    vec3 a = vec3(0.778, -1.612, 1.108);\n    vec3 b = vec3(-0.082, -0.422, -0.422);\n    vec3 c = vec3(2.043, 3.173, 0.138);\n    vec3 d = vec3(2.075, 2.409, 2.742);\n    \n    return a + b*cos(6.28318*(c*t*d));\n}\n\nfloat easeInSine(float x)\n{\n    return 1. - cos((x * 3.141593) / 3.);\n}\n\nfloat easeOutCubic(float x)\n{\n    return 1. - pow(1. - x, 3.);\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv0 = (fragCoord * 1.0 - iResolution.xy) / iResolution.y;\n    uv0 = fract(uv0 * 64.);\n    // vertical mirror\n    uv0.x = abs(0.5-uv0.x);\n    // horizontal mirror\n\tuv0.y = abs(0.5-uv0.y);\n    \n    uv0 = sin((uv0 - iTime) * .5);\n    vec2 uv1 = uv0;\n    float d2 = length(uv0);\n\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    float rot = radians(iTime * 5.);\n    mat2 rotation_matrix = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n   \tuv = rotation_matrix * uv;\n\n    float d = uv.x;\n    d = easeInSine(d) * .25;\n    d = abs(d*8.) + 1.;\n    d /= easeOutCubic(d) * 4.;\n    \n    d = sin(d * 20. + (iTime * .65));\n    d = sin(d  * 12.);\n    d += length(uv);\n    d -= (d2 * .5);\n    d = map(d, -1., 1., -.25, .75) - .3;\n    \n    vec3 col = palette(length(uv) * length(uv0));\n    col *= d;\n           \n    fragColor = vec4(col, 1.0); \n    //fragColor = vec4(d,d,d,1.0);\n}\n","name":"Image","description":"","type":"image"}]}