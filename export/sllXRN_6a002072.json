{"ver":"0.1","info":{"id":"sllXRN","date":"1625922787","viewed":213,"name":"Dancing Julia Spheres","username":"golinad","description":"Animated Juliaset rendered using min distance to origin.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Click in image to change pattern.\n*/\n#define SPHERES\n\nconst int maxIt = 16;\n \nvec2 cSqr(vec2 c){\n    return vec2(c.x*c.x - c.y*c.y, 2.0*c.x*c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y*4.0;\n    int it = 0;\n    vec2 z = uv;\n    vec2 c = (iMouse.xy-iResolution.xy*0.5)/iResolution.y*4.0;\n    float minD = length(z);\n    c = vec2(sin(iTime), cos(iTime))*(length(c)+abs(sin(iTime*3.14)*0.25));\n    for(int i=0; i< maxIt;i++){\n        z = cSqr(z) + c;\n        if(length(z) > 50.0) break;\n        it++;\n        minD = min(length(z), minD);\n    }\n    // Time varying pixel color\n#ifdef SPHERES\n    vec3 col = 1.0-vec3(1,iMouse.x/iResolution.x,iMouse.y/iResolution.y)*minD;\n#else\n    vec3 col = vec3(1.0)*float(it)/float(maxIt);\n#endif\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}