{"ver":"0.1","info":{"id":"7ttyD4","date":"1660416710","viewed":86,"name":"autogen 44","username":"asynth","description":"Generated by a program written in Rust.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["generative"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec3 bi(vec3 x) { return 2. * x - 1.; }\nvec3 uni(vec3 x) { return 0.5 + 0.5 * x; }\n\nfloat tri(float x) { // triangle wave\n    float p = fract(x * .25 + .25) * 2. - 1.;\n    return 1. - 2.0 * abs(p);\n}\nvec3 tri(vec3 x) { // triangle wave\n    vec3 p = fract(x * .25 + .25) * vec3(2.) - vec3(1.);\n    return vec3(1.) - vec3(2.0) * abs(p);\n}\n\nvec3 well(vec3 x) { // a function that dips in the middle\n    return 1. - 2. / pow(1. + x*x, vec3(8.));\n}\n\nfloat quant(float a, float b) {\n    return b == 0.0 ? a : floor(a/b) * b;\n}\nvec2 quant(vec2 a, vec2 b) {\n    return vec2(\n        b.x == 0.0 ? a.x : floor(a.x/b.x) * b.x,\n        b.y == 0.0 ? a.y : floor(a.y/b.y) * b.y\n    );\n}\n\nvec3 quant(vec3 a, vec3 b) {\n    return vec3(\n        b.x == 0.0 ? a.x : floor(a.x/b.x) * b.x,\n        b.y == 0.0 ? a.y : floor(a.y/b.y) * b.y,\n        b.z == 0.0 ? a.z : floor(a.z/b.z) * b.z\n    );\n}\n\n\nvec3 sq(vec3 a) {\n    return a*a;\n}\n\nfloat sq(float a) {\n    return a*a;\n}\n\nvec3 sigmoid(vec3 a) {\n    return a / sqrt(1.0 + sq(a));\n}\n\nvec2 circ_inv(vec2 uv, vec2 center, float radius) {\n    float d = distance(uv, center);\n    if (d < radius) {\n        return uv;\n    } else {\n        float scale = sq(radius / d);\n        return (uv - center) * scale + center;\n    }\n}\n\n\nvec3 pthresh(float thresh, vec3 a, vec3 b, vec3 c) {\n    return vec3(\n        a.x < thresh ? b.x : c.x,\n        a.y < thresh ? b.y : c.y,\n        a.z < thresh ? b.z : c.z\n    );\n}\n\nvec2 xywarp(vec2 uv, vec2 a, vec2 b) {\n    return vec2(\n        uv.x + a.x * b.x,\n        uv.y + a.y * b.y\n    );\n}\n\nvec3 mix2(vec2 uv, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return mix(mix(a, b, uv.xxx), mix(c, d, uv.xxx), uv.yyy);\n}\n\nvec2 mix2(vec2 uv, vec2 a, vec2 b, vec2 c, vec2 d) {\n    return mix(mix(a, b, uv.xx), mix(c, d, uv.xx), uv.yy);\n}\n\nfloat mix2(vec2 uv, float a, float b, float c, float d) {\n    return mix(mix(a, b, uv.x), mix(c, d, uv.x), uv.y);\n}\n\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(p.xyx * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 noise(vec2 uv, vec2 period, float seed) {\n    vec2 quv = floor(uv / period) + seed;\n    vec2 fuv = mod(uv, period) / period;\n    float a = hash12(quv);\n    float b = hash12(quv + vec2(1.,0.));\n    float c = hash12(quv + vec2(0., 1.));\n    float d = hash12(quv + vec2(1.,1.));\n    \n    return vec3(mix2(smoothstep(0.,1.,fuv), a, b, c, d));\n} \n\nvec2 reflect_0(vec2 uv) { return vec2(uv.x, abs(uv.y)); }\nvec2 reflect_1(vec2 uv) { return vec2(abs(uv.x), uv.y); }\nvec2 reflect_2(vec2 uv) { return vec2(abs(uv.x), abs(uv.y)); }\nvec2 reflect_3(vec2 uv) { return uv.x > -uv.y ? uv : vec2(uv.y, uv.x); }\nvec2 reflect_4(vec2 uv) { return uv.x > uv.y ? uv : vec2(uv.y, uv.x); }\n\nvec2 repeat_0(vec2 uv, float q) { return vec2(quant(uv.x, q), uv.y); }\nvec2 repeat_1(vec2 uv, float q) { return vec2(uv.x, quant(uv.y, q)); }\nvec2 repeat_2(vec2 uv, float q) { return vec2(quant(uv.x, q), quant(uv.y, q)); }\nvec2 repeat_3(vec2 uv, float q) { return vec2(tri(uv.x / q) * q, uv.y); }\nvec2 repeat_4(vec2 uv, float q) { return vec2(uv.x, tri(uv.y / q) * q); }\nvec2 repeat_5(vec2 uv, float q) { return vec2(tri(uv.x / q) * q, tri(uv.y / q) * q); }\n\nvec2 rect_to_polar(vec2 uv) { return vec2(length(uv), atan(uv.y, uv.x)/1.570796); }\nvec2 polar_to_rect(vec2 uv) { float angle = uv.y*1.570796; return vec2(uv.x * cos(angle), uv.x * sin(angle)); }\n\nvec3 node_1(vec2 uv) {\n\tuv = repeat_4(uv, 0.6564);\n\treturn vec3(length(uv));\n}\n\nvec3 node_2(vec2 uv) {\n\tuv = (mat2(-1.0643,-0.9468,-1.3964,-0.9689)*(uv-vec2(-0.8837,-0.2193)+vec2(-0.8837,-0.2193)));\n\treturn node_1(uv);\n}\n\nvec3 node_3(vec2 uv) {\n\tuv = xywarp(uv, vec2(-0.0201, -0.5224), vec3(uv.y).xy);\n\treturn vec3(uv.x);\n}\n\nvec3 node_4(vec2 uv) {\n\tuv = repeat_2(uv, 0.4033);\n\tvec3 a1 = mix2(uv, vec3(0.8950, 0.2387, 0.1999), vec3(0.9559, 0.1943, 0.1482), vec3(0.3866, 0.0316, 0.2008), vec3(0.1439, 0.5064, 0.4584));\n\treturn abs(a1);\n}\n\nvec3 node_5(vec2 uv) {\n\tuv = xywarp(uv, vec2(0.7560, -0.7363), vec3(atan(uv.y, uv.x)).xy);\n\treturn vec3(uv.y);\n}\n\nvec3 node_6(vec2 uv) {\n\tuv = repeat_3(uv, 0.6378);\n\treturn abs(abs(node_5(uv)));\n}\n\nvec3 node_7(vec2 uv) {\n\tvec3 a1 = mix2(uv, vec3(0.3391, 0.7691, 0.5329), vec3(0.4057, 0.6496, 0.3128), vec3(0.4017, 0.8459, 0.1003), vec3(0.9180, 0.9961, 0.2689));\n\tuv = xywarp(uv, vec2(-0.0914, 0.1498), mod(max(a1, vec3(length(uv))), node_6(uv)).xy);\n\tvec3 b1 = mix2(uv, vec3(0.6387, 0.0321, 0.1989), vec3(0.4988, 0.3361, 0.3860), vec3(0.6385, 0.3251, 0.8771), vec3(0.2776, 0.3741, 0.5564));\n\treturn quant(b1, vec3(atan(uv.y, uv.x)));\n}\n\nvec3 node_8(vec2 uv) {\n\tuv = (mat2(-1.3470,-0.8695,-1.1324,-0.9340)*(uv-vec2(0.1405,-0.6552)+vec2(0.1405,-0.6552)));\n\treturn ((pthresh(0.4554, vec3(length(uv)), vec3(uv.x), vec3(uv.x)) / vec3(uv.x)) / vec3(atan(uv.y, uv.x)));\n}\n\nvec3 node_9(vec2 uv) {\n\tuv = repeat_0(uv, 0.1255);\n\tvec3 a1 = mix2(uv, vec3(0.4095, 0.0967, 0.4727), vec3(0.3400, 0.0385, 0.4634), vec3(0.0258, 0.4711, 0.6632), vec3(0.3127, 0.9106, 0.0743));\n\tvec3 a2 = sin(vec3(length(uv))*2.7206 + 0.5444 + iTime*0.2847);\n\tvec3 a3 = mix2(uv, vec3(0.4802, 0.2876, 0.0814), vec3(0.7848, 0.3026, 0.9116), vec3(0.0284, 0.9120, 0.4041), vec3(0.3052, 0.1902, 0.2144));\n\tvec3 a4 = sin(a3*2.3442 + 0.1212 + iTime*0.1940);\n\tvec3 a5 = well(bi(vec3(atan(uv.y, uv.x)))*2.6437 + 0.8496 + iTime*0.3607);\n\tvec3 a6 = tri(((a4 * max(uni(a5), bi(bi((mod(vec3(atan(uv.y, uv.x)), vec3(uv.y)) / min(vec3(uv.x), vec3(length(uv)))))))) * node_2(uv))*4.1511 + 0.7483 + iTime*0.3660);\n\tvec3 a7 = vec3(0.7017, 0.5499, 0.0172);\n\tvec3 a8 = sin(node_4(uv)*5.8248 + 0.8791 + iTime*0.1354);\n\tvec3 a9 = well((-node_8(uv))*4.4749 + 0.5278 + iTime*0.0953);\n\treturn pthresh(0.8149, (uni(a1) * a2), a6, abs(quant(max(node_3(uv), vec3(uv.x)), quant(quant(uni((-(mod(vec3(length(uv)), a7) * vec3(atan(uv.y, uv.x))))), ((vec3(length(uv)) / vec3(atan(uv.y, uv.x))) * vec3(uv.y))), quant((a8 * node_7(uv)), a9)))));\n}\n\nvec3 node_10(vec2 uv) {\n\tvec3 a1 = tri(node_9(uv)*5.1347 + 0.0813 + iTime*0.0689);\n\tvec3 a2 = sin(a1*3.5139 + 0.5853 + iTime*0.3056);\n\tuv = xywarp(uv, vec2(0.4299, -0.0809), a2.xy);\n\treturn vec3(atan(uv.y, uv.x));\n}\n\nvec3 top(vec2 uv) {\n\treturn node_10(uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 col = abs(sin(top(uv)));\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}