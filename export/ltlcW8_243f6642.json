{"ver":"0.1","info":{"id":"ltlcW8","date":"1506051674","viewed":174,"name":"Hmmm","username":"rory618","description":"Weird mandelbrot set glitching...\nUse mouse to do sort of add iterations / zoom\nAdd iterations on line 148","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["mandelbrot","zoom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n    o = texelFetch(iChannel2, ivec2(i),0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"highp int;\nhighp float;\n\n#define frame (iFrame-200)%7820\n\nconst int I = 32768;\nconst int l = 16;\nconst ivec2[] c = ivec2[](\n            ivec2(-2,0),\n            ivec2(24565,1025),\n            ivec2(26201,18633),\n            ivec2(25682,19700),\n            ivec2(21793,8204),\n            ivec2(10229,29796),\n            ivec2(1816,24779),\n            ivec2(4545,17780),\n            ivec2(22202,27783),\n            ivec2(30401,2374),\n            ivec2(22824,23216),\n            ivec2(5569,25379),\n            ivec2(32603,21391),\n            ivec2(8817,4731),\n            ivec2(9636,29056),\n            ivec2(0,0));\n\nivec2[l] sum(ivec2[l] x, ivec2[l] y){\n    \n    ivec2[l] z;\n    \n    for(int h = 0; h < l; h++){\n        z[h] = x[h] + y[h];\n    }\n    \n    \n    ivec2 carry = ivec2(0);\n    for(int h = 15; h >= 0; h--){\n        z[h]+=carry;\n        carry = z[h]/I;\n        //z[h]=z[h]%I;\n        z[h]-=carry*I;\n    }\n    \n    return z;\n}\n\nivec2[l] product(ivec2[l] x, ivec2[l] y){\n    ivec2 sum = ivec2(0);\n\n    ivec2[l] z;\n    for(int h = 0; h < l; h++){\n        z[h] = ivec2(0);\n    }\n    \n    for(int h = l-1; h >= 0; h--){\n        ivec2 carry = ivec2(0);\n        \n        //loop along the diagonal and sum the partial products\n        ivec2 ts = sum;\n        for(int t = 0; t <= h; t++){\n            ivec2 a = z[t];\n            ivec2 b = z[h-t];\n            sum += ivec2(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);\n\n            //compute overflow and carry\n            carry += sum/I;\n            //sum %= I;\n            sum -= (sum/I)*I;\n        }\n        \n        z[h] = sum;\n        sum = carry;\n    }\n    return z;\n}\n\nivec2[l] timestwo(ivec2[l] z){\n    return sum(z,z);\n}\nivec2[l] square(ivec2[l] z){\n    ivec2 sum = ivec2(0);\n\n    ivec2[l] z2;\n    for(int x = 0; x < l; x++){\n        z2[x] = ivec2(0);\n    }\n    \n    for(int h = l-1; h >= 0; h--){\n        ivec2 carry = ivec2(0);\n        \n        //loop along the diagonal and sum the partial products\n        ivec2 ts = sum;\n        for(int t = 0; t < (h+1)/2; t++){\n            ivec2 a = z[t];\n            ivec2 b = z[h-t];\n            sum += ivec2(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);\n\n            //compute overflow and carry\n            carry += sum/I;\n            //sum %= I;\n            sum -= (sum/I)*I;\n        }\n        \n        carry *= 2;\n        sum = 2*sum-ts;\n        \n        \n        sum += ((h+1)-2*((h+1)/2))*ivec2(z[h/2].x*z[h/2].x-z[h/2].y*z[h/2].y,z[h/2].x*z[h/2].y*2);\n        \n        \n        carry += sum/I;\n        //sum %= I;\n        sum -= (sum/I)*I;\n        \n        \n        z2[h] = sum;\n        sum = carry;\n    }\n    return z2;\n}\n\nvoid iterate(inout ivec2[l] z, ivec2[l] c, inout ivec2[l] A, inout ivec2[l] B, inout ivec2[l] C){\n    \n    ivec2[l] one;\n    one[0].x = 1;\n    ivec2[l] zp = sum(square(z),c);\n    ivec2[l] Ap = sum(timestwo(product(z,A)),one);\n    ivec2[l] Bp = sum(timestwo(product(z,B)),square(A));\n    ivec2[l] Cp = timestwo(sum(product(z,C),product(A,B)));\n    z = zp;\n    A = Ap;\n    B = Bp;\n    C = Cp;\n    \n}\n\nvec4 get(float index) {\n    float n = floor(sqrt(index+.5));\n    if(index > n*n+n){\n        return texelFetch(iChannel0,ivec2(2.+n*n+2.*n-index,n),0);\n    } else {\n        return texelFetch(iChannel0,ivec2(2.+n,index-n*n),0);\n    }\n}\n\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    \n    \n    if(int(i.x) < 2 && int(i.y) < l){\n        ivec2[l] z;\n        ivec2[l] A;\n        ivec2[l] B;\n        ivec2[l] C;\n        for(int x = 0; x < l; x++){\n            vec4 g = iFrame==0?vec4(0,0,(x==0)?1:0,0):texelFetch(iChannel0,ivec2(0,x),0);\n            z[x] = ivec2(floatBitsToInt(g.x),floatBitsToInt(g.y));\n            A[x] = ivec2(floatBitsToInt(g.z),floatBitsToInt(g.w));\n            g = iFrame==0?vec4(0):texelFetch(iChannel0,ivec2(1,x),0);\n            B[x] = ivec2(floatBitsToInt(g.x),floatBitsToInt(g.y));\n            C[x] = ivec2(floatBitsToInt(g.z),floatBitsToInt(g.w));\n        }\n        iterate(z,c,A,B,C);\n        if(int(i.x)==0){\n            ivec2 dz = z[int(mod(i.y,float(l)))];\n            ivec2 dA = A[int(mod(i.y,float(l)))];\n            o = vec4(intBitsToFloat(dz.x),intBitsToFloat(dz.y),\n                    intBitsToFloat(dA.x),intBitsToFloat(dA.y));\n        } else {\n            ivec2 dB = B[int(mod(i.y,float(l)))];\n            ivec2 dC = C[int(mod(i.y,float(l)))];\n            o = vec4(intBitsToFloat(dB.x),intBitsToFloat(dB.y),\n                    intBitsToFloat(dC.x),intBitsToFloat(dC.y));\n        }\n    } else if(i.x>2.){\n        ivec2 p = ivec2(i.x-2.,i.y);\n        int m = max(p.x,p.y);\n        int index = (p.x<p.y)? m*(2+m)-p.x:m*m+p.y;\n        if(index/2==iFrame-1){\n            ivec2[l] z;\n            ivec2[l] A;\n            ivec2[l] B;\n            ivec2[l] C;\n            for(int x = 0; x < l; x++){\n                vec4 g = iFrame==0?vec4(0):texelFetch(iChannel0,ivec2(0,x),0);\n                z[x] = ivec2(floatBitsToInt(g.x),floatBitsToInt(g.y));\n                A[x] = ivec2(floatBitsToInt(g.z),floatBitsToInt(g.w));\n                g = iFrame==0?vec4(0):texelFetch(iChannel0,ivec2(1,x),0);\n                B[x] = ivec2(floatBitsToInt(g.x),floatBitsToInt(g.y));\n                C[x] = ivec2(floatBitsToInt(g.z),floatBitsToInt(g.w));\n            }\n            vec2 z_, A_, B_, C_;\n            for(int x = 4; x >= 0; x--){\n                z_ /= float(I);\n                A_ /= float(I);\n                B_ /= float(I);\n                C_ /= float(I);\n                z_ += vec2(z[x]);\n                A_ += vec2(A[x]);\n                B_ += vec2(B[x]);\n                C_ += vec2(C[x]);\n            }\n            o = (index-(index/2)*2==0)?vec4(z_,A_):vec4(B_,C_);\n            \n        } else {\n            ivec2 p = ivec2(i.x-2.,i.y);\n            int m = max(p.x,p.y);\n            int index = (p.x<p.y)? m*(2+m)-p.x:m*m+p.y;\n            o = get(float(index));\n        }\n    }\n    \n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define I vec2(0,1)\n#define R vec2(1,0)\n#define PI 2.*asin(1.)\n#define E exp(1.)\n\nhighp int;\nhighp float;\n\nconst int NUM_BUCKETS = 32;\nconst int ITER_PER_BUCKET = 1024;\nconst float HIST_SCALE = 8.0;\n\nconst float NUM_BUCKETS_F = float(NUM_BUCKETS);\nconst float ITER_PER_BUCKET_F = float(ITER_PER_BUCKET);\n\n\n//note: uniformly distributed, normalized rand, [0;1[\nfloat nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n//note: remaps v to [0;1] in interval [a;b]\nfloat remap( float a, float b, float v )\n{\n\treturn clamp( (v-a) / (b-a), 0.0, 1.0 );\n}\n//note: quantizes in l levels\nfloat truncf( float a, float l )\n{\n\treturn floor(a*l)/l;\n}\n\nfloat n1rand( vec2 n )\n{\n\tfloat t = fract( iTime );\n\tfloat nrnd0 = nrand( n + 0.07*t );\n\treturn nrnd0;\n}\n//alternative Gaussian,\n//thanks to @self_shadow\n//see http://www.dspguide.com/ch2/6.htm\nfloat n4rand_ss( vec2 n )\n{\n\tfloat nrnd0 = nrand( n + 0.07*fract( iTime ) );\n\tfloat nrnd1 = nrand( n + 0.11*fract( iTime + 0.573953 ) );\t\n\treturn 0.23*sqrt(-log(nrnd0+0.00001))*cos(2.0*3.141592*nrnd1)+0.5;\n}\n\n\n\n\n#define frame (iFrame)\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\nfloat creal(vec2 z) {\n    return z.x;\n}\nfloat cimag(vec2 z) {\n    return z.y;\n}\nvec2 conj(vec2 z) {\n    return vec2(z.x,-z.y);\n}\nvec2 cprod(vec2 a, vec2 b){\n    return mat2(a,-a.y,a.x) * b;\n}\nvec2 csqr(vec2 a){\n    return cprod(a,a);\n}\nfloat cabs(vec2 z) {\n    return length(z);\n}\nfloat cabs2(vec2 z) {\n    return dot(z,z);\n}\nvec2 cinv(vec2 z){\n    return conj(z)/cabs2(z);\n}\nvec2 cdivide(vec2 a, vec2 b){\n    return cprod(a,cinv(b));\n}\nfloat carg(vec2 z) {\n    return atan(z.y,z.x);\n}\nvec2 cis(float t){\n    return cos(R*t - I*PI/2.);\n}\nvec2 cexp(vec2 z) {\n    return exp(z.x)*cis(z.y);\n}\nvec2 clog(vec2 z) {\n    return R*log(cabs(z))+I*carg(z);\n}\nconst int l = 16;\nconst int i = 32768;\nconst float zs = 100.;\n\nvec2 zoom(vec2 d0, int a) {\n    d0 *= exp(-float(a)/zs);\n    return d0;\n}\n\nvec4 get(float index) {\n    float n = floor(sqrt(index+.5));\n    if(index > n*n+n){\n        return texelFetch(iChannel0,ivec2(2.+n*n+2.*n-index,n),0);\n    } else {\n        return texelFetch(iChannel0,ivec2(2.+n,index-n*n),0);\n    }\n}\n\nvoid mainImage( out vec4 o, in vec2 fragCoord )\n{\n    o.w = 0.;\n    float e=0.;\n    vec3 r = hash33(vec3(iResolution.xy,frame));\n    vec2 jitter = vec2(n4rand_ss(r.xy),n4rand_ss(r.yz));\n\tvec2 d0 = zoom((fragCoord - iResolution.xy/2.+jitter ),frame);\n    //vec2 log_d0 = clog(fragCoord - iResolution.xy/2.+jitter ) - vec2(frame,0.)/zs;\n    float ds = exp(1.-.01*sin(.5*float(frame)/zs));;\n    vec2 d = d0;\n    int it;\n    int start = int(iMouse.x+iMouse.y*3.);max(0,iFrame/3-100);\n    vec4 g = get(float(start*2));\n    vec2 z_ = g.xy;\n    vec2 A_ = g.zw;\n    g = get(float(start*2+1));\n    vec2 B_ = g.xy;\n    vec2 C_ = g.zw;\n    \n    \n    \n    //vec2 a = clog(A_)+log_d0;\n    //vec2 b = clog(B_)+log_d0*2.;\n    //vec2 c = clog(C_)+log_d0*3.;\n    //vec2 m = a;\n    //    m = (b.x>m.x)?b:m;\n    //    m = (c.x>m.x)?c:m;\n    //vec2 log_d = m + clog(cexp(a-m)+cexp(b-m)+cexp(c-m));;\n    d = cprod(A_,d0)+cprod(B_+cprod(C_,d0),csqr(d0));\n    \n    for(it = 0; it <1500; it++){\n        \n        vec2 z_ = get(float((it+start)*2)).xy;\n        \n        //vec2 a = clog(2.*z_)+log_d;\n        //vec2 b = 2.*log_d;\n        //vec2 c = log_d0;\n        vec2 m = A_;\n        m = (B_.x>m.x)?B_:m;\n        m = (C_.x>m.x)?C_:m;\n        //log_d = m + clog(cexp(a-m)+cexp(b-m)+cexp(c-m));\n        d = (2.0+.01*sin(iTime))*cprod(z_,d)+cprod(d,d)*ds + d0;\n        float l = length(z_+d);\n        if(l>24.){\n\t        e = l;\n            break;\n        }\n    }\n        \n    float mu = 10.+log(log(24.))/log(2.) - log(abs(log(e)))/log(2.);\n    vec3 col = .5+.5*cos(.8*sqrt(mu+float(it+start))*vec3(1.2,1.3,1.4));\n    //col.xy = abs((d)/32.);\n    \n    vec3 op = min(e,1.)*texture(iChannel2, ((fragCoord - iResolution.xy/2.)*exp(-1./zs) + iResolution.xy/2.)/iResolution.xy).xyz;\n    if(e!=0.){\n        o.xyz = mix(col,op,.6);\n        o.xyz = max(vec3(0),o.xyz);\n    } else {\n        o.xyz = op;\n    }\n    \n}","name":"Buf C","description":"","type":"buffer"}]}