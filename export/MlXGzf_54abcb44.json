{"ver":"0.1","info":{"id":"MlXGzf","date":"1429805132","viewed":3177,"name":"Transitions : Swap","username":"aiekick","description":"Im not the author of this code. I have just adapted it to ShaderToy.\nCode from here : [url=https://glsl.io/]Glsl.io[/url]","likes":27,"published":3,"flags":0,"usePreview":0,"tags":["swap","transitions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define from iChannel0\n#define to iChannel1\n#define resolution (iResolution.xy)\n\nfloat progress;\nfloat reflection = .4;\nfloat perspective = .2;\nfloat depth = 3.;\n \nconst vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\nconst vec2 boundMin = vec2(0.0, 0.0);\nconst vec2 boundMax = vec2(1.0, 1.0);\n \nbool inBounds (vec2 p) {\n  return all(lessThan(boundMin, p)) && all(lessThan(p, boundMax));\n}\n \nvec2 project (vec2 p) {\n  return p * vec2(1.0, -1.2) + vec2(0.0, -0.02);\n}\n \nvec4 bgColor (vec2 p, vec2 pfr, vec2 pto) {\n  vec4 c = black;\n  pfr = project(pfr);\n  if (inBounds(pfr)) {\n    c += mix(black, texture(from, pfr), reflection * mix(1.0, 0.0, pfr.y));\n  }\n  pto = project(pto);\n  if (inBounds(pto)) {\n    c += mix(black, texture(to, pto), reflection * mix(1.0, 0.0, pto.y));\n  }\n  return c;\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  progress = sin(iTime*.5)*.5+.5;\n  vec2 p = fragCoord.xy / resolution.xy;\n  if (iMouse.z>0.) progress = iMouse.x/iResolution.x;\n\n  vec2 pfr, pto = vec2(-1.);\n \n  float size = mix(1.0, depth, progress);\n  float persp = perspective * progress;\n  pfr = (p + vec2(-0.0, -0.5)) * vec2(size/(1.0-perspective*progress), size/(1.0-size*persp*p.x)) + vec2(0.0, 0.5);\n \n  size = mix(1.0, depth, 1.-progress);\n  persp = perspective * (1.-progress);\n  pto = (p + vec2(-1.0, -0.5)) * vec2(size/(1.0-perspective*(1.0-progress)), size/(1.0-size*persp*(0.5-p.x))) + vec2(1.0, 0.5);\n \n  bool fromOver = progress < 0.5;\n \n  if (fromOver) {\n    if (inBounds(pfr)) {\n      fragColor = texture(from, pfr);\n    }\n    else if (inBounds(pto)) {\n      fragColor = texture(to, pto);\n    }\n    else {\n      fragColor = bgColor(p, pfr, pto);\n    }\n  }\n  else {\n    if (inBounds(pto)) {\n      fragColor = texture(to, pto);\n    }\n    else if (inBounds(pfr)) {\n      fragColor = texture(from, pfr);\n    }\n    else {\n      fragColor = bgColor(p, pfr, pto);\n    }\n  }\n}","name":"Image","description":"","type":"image"}]}