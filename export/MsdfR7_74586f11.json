{"ver":"0.1","info":{"id":"MsdfR7","date":"1524578814","viewed":436,"name":"Conways game of life","username":"saidwho12","description":"Conway's game of life\nWASD/Arrow Keys = pan camera around\nR = reset all cells\nClick = paint cells\nPage-Up/Page-Down/Q/E = zoom-In / zoom-out","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["2d","game","sobel","grid","automata","life","cell","conways","celluar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159\n#define sqr(x) (x*x)\n\nfloat luminosity( in vec3 color ) {\n\treturn sqrt(.299*sqr(color.r)+.587*sqr(color.g)+.114*sqr(color.b));\n}\n\n#if 0\n#define L(uv) texture(iChannel0, uv).b\n#else\n#define L(uv) luminosity(texture(iChannel0, uv).rgb)\n#endif\n\nvec2 sobel( in vec2 uv, in vec2 pixel ) {\n    float tleft = L(uv + vec2(-pixel.x,pixel.y));\n    float left = L(uv + vec2(-pixel.x,0));\n    float bleft = L(uv + vec2(-pixel.x,-pixel.y));\n    float top = L(uv + vec2(0,pixel.y));\n    float bottom = L(uv + vec2(0,-pixel.y));\n    float tright = L(uv + vec2(pixel.x,pixel.y));\n    float right = L(uv + vec2(pixel.x,0));\n    float bright = L(uv + vec2(pixel.x,-pixel.y));\n    float gx = tleft + 2.*left + bleft - tright - 2.*right - bright;\n    float gy = -tleft - 2.*top - tright + bleft + 2. * bottom + bright;\n    return vec2(gx, gy);\n}\n\n#define edgeOpacity .275\n#define gridOpacity .3125\n#define historyOpacity .25\n#define gamma 2.2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec4 state = texelFetch(iChannel0, ivec2(0), 0);\n    vec2 p = state.z*((fragCoord/iResolution.xy)*2.-1.)-(1.-state.z)*state.xy;\n    vec2 uv = p*.5+.5;\n    \n    vec2 s = sobel(uv, state.z/iResolution.xy);\n    float g = sqrt(sqr(s.x) + sqr(s.y));\n    \n    vec4 data = texture(iChannel0, uv);\n\tfloat b = (1.-state.z)*max(cos(pi*p.x*iResolution.x), cos(pi*p.y*iResolution.y));\n    vec3 col = max(vec3(data.xy, 0.), vec3(historyOpacity*data.z))\n        +(1.-state.z) *edgeOpacity *g /*+gridOpacity*(1.-b))*/;\n    fragColor = vec4(col*pow(col, vec3(1./gamma)), 0.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define brushRadius .025\n\n#define historyImpact .2\n#define historyMultiplier .9925\n#define neighboorsOpacity .5\n\n#define loopInterval 60.\n#define loopTime .25\n\n#define zoomMax .1\n#define zoomDelta .1\n#define panDelta .1\n\n#define snoise(c) fract(sin(dot(c, vec2(12.9898,78.233))) * 4e5)\n#define T(x, y) (texture(iChannel0, (fragCoord + vec2(x, y) ) /iResolution.xy ).r)\n#define N(x, y)  + float( T(x, y) > 0.)\n\n#define K(c) (texelFetch(iChannel1, ivec2(c, 1), 0).x > 0.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec4 state = texelFetch(iChannel0, ivec2(0), 0);\n    float aspect = iResolution.y/iResolution.x;\n    vec2 p = (2.*fragCoord - iResolution.xy)/iResolution.x;\n    vec2 mp = (iMouse.xy/iResolution.xy)*2.-1.;\n    \n    vec4 data = vec4(0);\n    \n    if (fragCoord.x < 1. && fragCoord.y < 1.) {\n        data.xy = clamp(state.xy+state.z*panDelta*vec2(float(K(37)||K(65)) - float(K(39)||K(68)),\n        \t\t\t\t\t\t\t\t\tfloat(K(40)||K(83)) - float(K(38)||K(87)) ), -1., 1.);\n        data.w = clamp(state.w+zoomDelta*float(K(33)||K(69))-zoomDelta*float(K(34)||K(81)), 0., 1.);\n        data.z = exp(mix(0.,log(zoomMax), data.w));\n    } else if(mod(iTime, loopInterval) < loopTime) {\n        data.x = float(snoise(fragCoord) > .8);\n    }\n    else if (K(82)) {\n        data.x = 0.;\n    } else {\n            \n        data.y = .125*(N(-1,-1)+N(-1,0)+N(-1,1)+N(0,-1)+N(0,1)+N(1,-1)+N(1,0)+N(1,1));\n        data.x = T(0,0);\n        data.x += float(data.x <= 0. && data.y == .375);\n        data.x *= float(data.y == .25 || data.y == .375);\n        data.x -= float(data.x > .4)/20.;\n        data.y *= neighboorsOpacity*float(data.x<1.);\n        if (distance((state.z*mp-(1.-state.z)*state.xy)*vec2(1., aspect), p) < brushRadius && iMouse.z > 0.) {\n            data.x = 1.;\n        }\n        data.z = clamp(historyImpact*data.x+historyMultiplier*texture(iChannel0, fragCoord.xy/iResolution.xy).z, 0., 1.);\n        //data.z -= float(data.z > .4)/20.;\n    }\n    fragColor = data;\n}","name":"Buffer A","description":"","type":"buffer"}]}