{"ver":"0.1","info":{"id":"ftdSRl","date":"1639588217","viewed":138,"name":"Dynamic Cubemap #3","username":"snolot","description":"New attempt for dynamic cubemap, I finally keep the name and work on framerate and get a lot of fun to work on it ;) This one is dedicated to Fabrice Neyret and morimea, Thx guys for help and comments.\n","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["sdf","cubemap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License (MIT)\n// Copyright © 2018 genis sole\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .005\n\nconst vec3 lightPosition = vec3(0, 3, 4);\nconst vec3 lightColor    = vec3(0.2, 0.2, 0.2) * 2.;\n\nvec4 bufferCubemap(in sampler2D buffer, in vec2 bufferSize, in vec3 d) \n{\n    bufferSize.y = min(bufferSize.y, bufferSize.x*0.66667 + 4.0);\n    \n    vec3 i = 1.0 / min(-d, d);\n    vec3 p = d * -0.5 * max(max(i.x, i.y), i.z);\n\tvec3 n = sign(d) * step(i.yzx, i.xyz) * step(i.zxy, i.xyz);\n    \n\tvec2 px = vec2(-p.z*n.x, p.y) * step(0.5, n.x)\n              + vec2(-p.y, p.z*n.x) * step(n.x, -0.5);\n    vec2 py = vec2(-p.x*n.y, -p.z) * abs(n.y);\n    vec2 pz = vec2(p.x*n.z, p.y) * abs(n.z);\n    \n\tvec2 t = vec2(abs(n.x) + 2.0*(step(n.y, -0.5) + step(n.z, -0.5)),\n\t\t\t      abs(n.y) + step(n.x, -0.5));\n    \n    vec2 uv = (vec2(t.x, 0.0) + (px + py + pz) + 0.5)\n              * (bufferSize.y - 2.0) * 0.5/bufferSize;\n    uv.y = abs(t.y - uv.y);\n    \n    return texture(buffer, uv, -100.0);\n}\n\nfloat displacement(vec3 p){\n    return sin(p.x)*sin(p.y)*sin(p.z);\n}\n\nfloat opDisplace(vec3 p){\n    vec3 offset = 0.1*iTime * normalize(vec3(1.0, -1.0, 0.1));\n    return displacement(5.0*(p+offset));\n}\n\nfloat opSmoothIntersection( float d1, float d2, float k )\n{\n    float h = max(k-abs(d1-d2),0.0);\n    return max(d1, d2) + h*h*0.25/k;\n\t//float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n\t//return mix( d2, d1, h ) + k*h*(1.0-h);\n}\n\nfloat getDistCube(in vec3 p) \n{\n\n    //p.y += max(opDisplace(p* p.x *.1) + ( (iMouse.y+.5) / iResolution.y) * 7., .95);//sin(iTime) * 1.25;\n\n    vec3 b = vec3(1.1,1.1,1.1);\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\nfloat getDistSphere(in vec3 p) \n{\n    \n    vec4 s = vec4(0, 0, 0, 1.25);\n    \n    float sphereDist = length(p - s.xyz) - s.w;    \n    return sphereDist;\n}\n\n\nconst float PI = 3.14159;\n\nmat4 camera() \n{\n\tvec2 m = vec2(((iMouse.xy + 0.1) / iResolution.xy) * 2.0*PI) + vec2(PI);\n    m.y = -m.y;\n    if (all(lessThan(iMouse.xy, vec2(10.0)))) {\n        m = vec2(sin(iTime*0.1), cos(iTime*0.1));\n    }\n    \n    vec2 c = cos(m);\n    vec2 s = sin(m);\n    \n   \tmat4 t = mat4(c.x, 0.0, -s.x, 0.0, \n                  s.x*s.y, c.y, c.x*s.y, 0.0, \n                  s.x*c.y, -s.y, c.x*c.y, 0.0,\n                  0.0, 0.0, 0.0, 1.0);\n    \n    t[3] = vec4(t[2].xyz * -3.0, 1.0); \n    \n    return t;\n    \n}\n\nfloat getDist(in vec3 p)\n{\n    float height = p.y+.1;\n    \n    float strength = mix(0.02, 1.1, smoothstep(-0.1, -2., height));\n    if(height < -1.){\n        strength = mix(strength, 0.0, smoothstep(-.5, -2.92, height));\n    }\n    \n    float dist = strength * opDisplace(p);\n    \n    return opSmoothIntersection(getDistCube(p),  getDistSphere(p),.5);// opSmoothIntersection( getDistSphere(p),getDistCube(p)+dist,.05);\n}\nvec3 getNormal(in vec3 p) \n{\n    int body;\n    float d = getDist(p);\n    \n    vec2 e = vec2(.01, 0); \n    \n    vec3 n = d - vec3(\n        getDist(p - e.xyy), \n        getDist(p - e.yxy), \n        getDist(p - e.yyx));\n        \n    return normalize(n);\n}\nvec3 getLight(in vec3 p, in vec3 rd)\n{    \n\tvec3 normal = getNormal(p);\n    vec3 lightDir = normalize(p - lightPosition);\n    \n    float cosa = pow(0.5+0.5*dot(normal, -lightDir), 3.0);\n    float cosr = max(dot(-rd, reflect(lightDir, normal)), 0.0);\n    \n    vec3 ambiant = vec3(0.72);\n    vec3 diffuse = vec3(0.8 * cosa);\n    vec3 phong = vec3(0.5 * pow(cosr, 16.0));\n    \n    return lightColor * (ambiant + diffuse + phong);\n}\n\n\nfloat rayMarch(in vec3 ro, in vec3 rd)\n{\n    float dO = 0.;\n    \n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd * dO;\n        float dS = getDist(p);\n        dO += dS;\n        \n        if (dO > MAX_DIST || dS < SURF_DIST) \n            break;\n    }\n    \n    return dO;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \t\n   \tfloat e = 1.0 / max(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord - iResolution.xy*0.5) * e;\n    \n    mat4 T = camera();\n    \n    vec3 ro = (T * vec4(0.0, 0.0, 0.0, 1.0)).xyz;\n    vec3 rd = mat3(T) * normalize(vec3(uv, 0.5));\n    \n    //ro.y += .2;\n    vec3 p0 = vec3(0.0);\n    \n    float d = rayMarch(ro, rd);\n    \n    if (d < MAX_DIST){\n\n        p0 = ro + rd * d;\n        \n    \tfragColor = bufferCubemap(iChannel1, iChannelResolution[1].xy, \n                                  reflect(rd, p0));\n    }\n    else {\n        //fragColor = vec4(vec3(0.), 1.);\n        fragColor = bufferCubemap(iChannel1, iChannelResolution[1].xy, rd);\n        fragColor.rgb *= .2;\n    }\n\n    //fragColor = vec4(pow(fragColor.rgb, vec3(0.55)), 1.0); \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float wavedx(vec2 position, vec2 direction, float time, float freq){\n    float x = dot(direction, position) * freq + time;\n    return exp(sin(x) - 1.0);\n}\n\nfloat getwaves(vec2 position){\n    float iter = 0.0,phase = 6.0,speed = 2.0;\n    float weight = 1.0,w = 0.0,ws = 0.0;   \n    for(int i=0;i<5;i++){\n        vec2 p = vec2(sin(iter), cos(iter));\n        float res = wavedx(position,p,speed*iTime,phase);        \n        w += res * weight; ws += weight;\n        iter += 12.0; weight *=0.75; phase *= 1.18; speed *= 1.08;\n    }\n    return w / ws;\n}\nfloat sea_octave(vec2 uv,float choppy){\nreturn getwaves(uv*choppy)+getwaves(uv); }\n\nfloat noise3D(vec3 p){ \n   vec3 s = vec3(7, 157, 113);\n   vec3 ip = floor(p); // Unique unit cell ID. \n   vec4 h = vec4(0.0, s.yz, s.y + s.z) + dot(ip, s);\n    p -= ip; // Cell's fractional component. \n    p = p*p*(3.0 - 2.0*p); \n    h = mix(fract(sin(h)*43758.5453),fract(sin(h + s.x)*43758.5453),p.x); \n    h.xy = mix(h.xz, h.yw, p.y); \n    return mix(h.x, h.y, p.z);\t\n}\n//borrowed from\n//https://www.shadertoy.com/view/Xs33Df\nfloat smaxP(float a, float b, float s){\n    float h = clamp(0.5 + 0.5*(a - b)/s,0.0,1.0);\n    return mix(b, a, h) + h*(1.0 - h)*s;\n}\nvec3 Freq=vec3(0.125,0.31,0.128),Amp= vec3(1.0,1.5,2.5);\nvec2 path(float z){\n    return vec2(\n        Amp.x*sin(z * Freq.x),\n        Amp.y*cos(z * Freq.y) + Amp.z*(sin(z*Freq.z) - 1.0)\n    );\n}\n     \n     \nfloat map(vec3 p){\n    float n=noise3D(p);\n    float tx =n;\n    vec3 q = p*0.35;//rock\n    float h = dot(sin(q)*cos(q.yzx),vec3(0.222)) \n       + dot(sin(q*1.5)*cos(q.yzx*1.5),vec3(0.111));    \n    float d = p.y+h*3.9;//some hills.   \n    q = sin(p*0.5 + h);\n    h = q.x*q.y*q.z; //tunnel walls.\n    p.xy -= path(p.z);//detail wall\n    float tnl = 1.5 - length(p.xy*vec2(.33, .66)) + (0.25 - tx*0.35);\t\n    return smaxP(d, tnl, 2.) - tx*.25 + tnl*.8;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, in float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n\n\n#define STEP 36\n#define FAR 35.0\n#define sat(x) clamp(x,0.,1.)\n\nfloat logBisectTrace(vec3 ro, vec3 rd){\n    float t = 0., told = 0., mid, dn;\n    float d = map(ro);\n    float sgn = sign(d);\n    for (int i=0; i<STEP; i++){\n       if (sign(d) != sgn || d < 0.001 || t > FAR) break; \n        told = t;\n        t += step(d,1.0)*(log(abs(d) + 1.1) - d) + d;        \n        d = map(rd*t + ro); }\n    // If a threshold was crossed without a solution, use the bisection method.\n    if (sign(d) != sgn){    \n        dn = sign(map(rd*told + ro));        \n        vec2 iv = vec2(told, t); // Near, Far\n        for (int ii=0; ii<5; ii++){ \n            mid = dot(iv,vec2(0.5));\n            float d = map(rd*mid + ro);\n            if (abs(d) < 0.001)break;\n            iv = mix(vec2(iv.x, mid), vec2(mid, iv.y), step(0.0, d*dn));\n        }\n        t = mid;       \n    }\n    return min(t,FAR);\n}\n\nvec3 normal(vec3 p,float t){ vec2 e = vec2(-t, t);   \n\treturn normalize(e.yxx*map(p + e.yxx) + e.xxy*map(p + e.xxy) + \n\t\t e.xyx*map(p + e.xyx) + e.y*map(p + e.y));   \n} \n\nvec3 render( in vec3 pos, in vec3 dir )\n{\n    float time = iTime*0.2;\n    vec3 sun = vec3(-0.6, 0.5,-0.3); \n    float i = max(0.0, 1.2/(length(sun-dir)+1.0));\n    vec3 col = vec3(pow(i, 1.9), pow(i, 1.0), pow(i, .8)) * 1.25;\n    col = mix(col, vec3(0.0,0.39,0.62),(1.0-dir.y)*0.9);   \n\n   if (dir.y > 0.0){//water suf\n        float d = (pos.y-3.0)/dir.y;\t\n        vec2 wat = (dir * d).xz-pos.xz;\n        d += sin(wat.x + time);\n        wat = (dir * d).xz-pos.xz;     \n        wat = wat * 0.1 + 0.2* texture(iChannel0,wat*0.01).xz;      \n        col += sea_octave(wat,0.5)*0.6 * max(2.0/-d, 0.0);\n    }\n    else{//rock        \n       vec3 ro=pos;ro.y+=12.0;\n       \n       float t = logBisectTrace(ro,dir);\n       vec3 rock=vec3(0.0);\n       if (t < FAR){   \n        pos=ro+dir*t;\n        t/=FAR;\n        vec3 sn = normal(pos,0.1/(1.0 + t));\n        float fre = clamp(1.0+dot(sun, sn),0.0,1.0); // Fresnel reflection.\n        float Schlick = pow(1.0- max(dot(dir, normalize(dir + sun)),0.0), 5.0);\n        fre *= mix(0.2, 1.0, Schlick);//Hard clay.\n        float dif=dot(sn,sun)*0.2;    \n        rock=(dif*texture(iChannel0,pos.xz*0.05).xyz+fre*fre*0.35)*col;\n        float y=smoothstep(0.9,1.0,(1.0+dir.y)); \n        if(y>0.0) rock=mix(rock,col, y*t);     \n        col=mix(rock,col,t);\n      }\t\n      float f =(-dir.y-0.3+sin(time*0.05)*0.2)*0.3185;\n\t  f = clamp(f, 0.0, 1.0);\t\t\n\t  col = mix(col,rock,f);\n    }\n    \n    float t = iTime;\t\t\t\t// add god rays\n\n    float a = sin(dir.x);\n    \n    float x = atan(dir.x, dir.z);\t\t// from -pi to pi\t\n\tfloat y = 3.141592 *0.15-acos(dir.y);  \n    \n    float beam = sat(sin(10.*x+a*y*5.+t));\n    beam *= sat(sin(7.*x+a*y*3.5-t));\n\n    float beam2 = sat(sin(42.*x+a*y*21.-t));\n    beam2 *= sat(sin(34.*x+a*y*17.+t));\n\n    beam += beam2;\n    col *= 1.+beam*.05;\n\n\n    return col;\n}\n\nvec3 ComputeNormal( in vec3 pos ) {\n    vec2 epsilon = vec2(0.0, 0.001);\n    float mapVal = map(pos);\n    return normalize( vec3( map(pos + epsilon.yxx) - mapVal,\n                            epsilon.y,\n                            map(pos + epsilon.xxy) - mapVal));\n}\n\n\n//\n// END iq's Elevated \n///////////////////////////////////////////////////////////////////////////////////////\n\nvec3 Render(in vec3 ro, in vec3 rd, in vec2 fragCoord) {\n    return render(ro, rd);\n}\n\nvec3 cubemapRayDir(in vec2 fragCoord, vec2 bufferSize) \n{     \n    bufferSize.y = min(bufferSize.y, bufferSize.x*0.66667 + 4.0);\n    \n    float ts = (bufferSize.y - 2.0) * 0.5;\n    \n    fragCoord = min(fragCoord, \n                    vec2(ts*3.0 - 1.0, 2.0*ts + 1.0));\n    \n    vec2 tc = vec2(fragCoord.x / ts, \n                   fragCoord.y*2.0 / bufferSize.y); \n    \n    vec2 ti = floor(tc) - vec2(1.0, 0.0);\n    vec3 n = -vec3((1.0 - abs(ti.x))*(ti.y*2.0 - 1.0), \n                   ti.x*ti.y, ti.x*(1.0 - ti.y));\n\n    float bpy = min(0.9999, fragCoord.y / ts);\n    float tpy = max(1.0, (fragCoord.y - 2.0) / ts);\n\n    vec2 p = fract(vec2(tc.x, (bpy * (1.0 - floor(tc.y)) \n                               + tpy * floor(tc.y)))) - 0.5;\n    \n    vec3 px = vec3(0.5*n.x, p.y, -p.x*n.x) * step(0.5, n.x)\n              + vec3(0.5*n.x, -p.x, -p.y*n.x) * step(n.x, -0.5);\n    vec3 py = vec3(-p.x*n.y, 0.5*n.y, p.y) * abs(n.y);\n    vec3 pz = vec3(p.x*n.z, p.y, 0.5*n.z) * abs(n.z);\n    \n    return normalize(px + py + pz);\n}\n\nbool isSpacePressed()\n{\n    const float KEY_SP = 32.5/256.0;\n\treturn bool(step(0.5, texture( iChannel3, vec2(KEY_SP, 0.5) ).x));\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel1, fragCoord / iResolution.xy);\n    \n    \n    // Should be iFrame > 1 but we have to wait until textures are loaded.\n    #ifdef CACHE_TEST\n    if (!isSpacePressed() && iFrame > 30) return;\n    #else\n    if(iFrame % 20 == 0)  return;\n    #endif\n    \n    vec3 ro = vec3(0.0, 0.0, 0.0);\n    ro.y = 2.;//terrainL( ro.xz) + 11.0*SC;\n    vec3 rd = cubemapRayDir(fragCoord, iResolution.xy);\n    \n    vec3 finalColor = Render(ro, rd, fragCoord);\n    \n   \n    fragColor = vec4(finalColor, 1.0);\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}