{"ver":"0.1","info":{"id":"XfVXRW","date":"1714875509","viewed":31,"name":"um.. ray marching test","username":"Qwasdfet","description":"my implementation of raymarching after watching a few videos","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define shit\n\n#define worldViewport iResolution.xy * 1.0 / iResolution.x\n#define focalLength 0.50\n#define pi (3.141592653589)\n\nstruct rayDeats {\n    vec3 col;\n    float dist;\n    vec3 pos;\n    vec3 dir;\n};\n\nvec3 sphereTangent(vec3 pos, vec3 cent){\n    return normalize(pos - cent);\n}\n\nfloat sphericalDropoff(float dist){\n    return 1.0 / (2.0 * pi * pow(dist, 3.0));\n}\n\nvec3 toneMap(vec3 col){\n    //float lum = (col.x + col.y + col.z) / 3.0;\n    \n    //float mappedLum = lum / (lum + 1.0);\n    \n    //return col * mappedLum / lum;\n    return col / (col + vec3(1.0,1.0,1.0));\n}\n\nfloat distanceSphere(vec3 point, vec3 center, float radius){\n    return distance(point,center) - radius;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 spherePos = vec3(0.0,0.0,10.0 * abs(sin(iTime)) + 2.0);\n    float sphereRad = 1.0;\n    vec3 sphereCol = vec3(-2.0,-2.0,-2.0);\n    \n    vec3 lightDir = vec3(0.0, -1.0, 0.0);\n    vec3 lightCol = vec3(1.0,1.0,0.0) * 1.0;\n\n\n    vec3 col = vec3(0.0,0.0,0.0);\n\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 rayDir_xy = (uv - vec2(0.5,0.5)) * worldViewport;\n    vec3 camSurf = vec3(rayDir_xy.xy,focalLength);\n    \n    vec3 normRayDir = normalize(camSurf);\n    \n    float distCam = 0.0;\n    vec3 rayPos = vec3(0.0,0.0,0.0);\n    for(int i = 0; i < 100; i++){\n        float nearestDist = distanceSphere(rayPos, spherePos, sphereRad);\n        rayPos += normRayDir * nearestDist;\n        \n        \n        distCam += nearestDist;\n        \n        \n        if(nearestDist < 0.1) {\n            \n            break;\n        }\n        if(nearestDist > 1000.0) {\n            break;\n        }\n    }\n    \n    col += sphereCol;\n    \n    vec3 hitPos = normRayDir * distCam;\n    \n    vec3 lightRayPos = hitPos;\n    vec3 lightRayDir = sphereTangent(lightRayPos,spherePos);\n    \n    for(int i = 0; i < 100; i++){\n        float nearestDist = 0.0;//distanceSphere();\n        lightRayPos += lightRayDir * nearestDist;\n        \n        \n        \n        \n        \n        if(nearestDist < 0.1) {\n            \n            break;\n        }\n        if(nearestDist > 10.0) {\n            col += lightCol * abs(dot(lightRayDir, lightDir));\n            break;\n        }\n    }\n    \n    \n    col =  vec3(1.0,1.0,1.0) * distCam;\n\n    vec3 mappedCol = toneMap(col * 1.0);\n\n    // Output to screen\n    fragColor = vec4(1.0/col,1.0);\n}","name":"Image","description":"","type":"image"}]}