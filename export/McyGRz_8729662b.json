{"ver":"0.1","info":{"id":"McyGRz","date":"1712319839","viewed":25,"name":"Ebbinghaus Illusion Demo","username":"PG_TG","description":"Description","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tag"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*--------------------------\n  EBBINGHAUS ILLUSION DEMO\n--------------------------*/\n\n#define PI acos(-1.0)\n\n// CIRCLE FUNCTION\nvec4 circle(vec2 uv, vec2 pos, float rad, vec3 col, bool edg, float smt) {\n    float value = distance(pos, uv);\n\n    if (edg) // Smooth edges mode\n        value = smoothstep(value, value + smt, rad);\n    else     // Hard edges mode\n        value = step(value, rad);\n    \n    return vec4(col, value);\n}\n\n// LINE FUNCTION\nvec4 line(vec2 uv, vec2 A, vec2 B, vec3 col, float thic, float blur) {\n    \n    vec2 g = B - A;\n    vec2 h = uv - A;\n    float d;\n    \n    d = length(h - g * clamp(dot(g, h) / dot(g, g), 0.0, 1.0));\n    if(blur != 0.)\n        if((blur * thic) >= thic)\n            d = smoothstep(blur * thic, thic, d);\n        else\n            d = smoothstep(thic, blur * thic * length(0.05), d);\n    else\n        d = step(thic, d);\n    \n    return vec4(col, d);\n}\n\n// ROTATION FUNCTION\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle), -sin(_angle),\n                sin(_angle), cos(_angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Aspect Ratio Fix\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 1.75;\n    vec2 uv2 = uv;\n    \n    uv.x += cos(iTime)/2.;\n    uv.y += cos(iTime)/2.;\n    \n    vec4 background, foreground;\n    background = vec4(1.);\n    \n    // Guide Lines\n    foreground = line(\n        uv2,\n        vec2(-2.0, -2.0),\n        vec2(2.0, 2.0),\n        vec3(0.95) + sin(iTime/2.)/10.,\n        0.15,\n        1.001\n    );\n    background = mix(background, foreground, foreground.a);\n    \n    // Central Circle\n    foreground = circle(\n        uv,\n        vec2(0.0),\n        0.15,\n        vec3(0.),\n        true,\n        0.005\n    );\n    background = mix(background, foreground, foreground.a);\n    \n    // Outer Circles\n    for(float i = 0.; i < 6.; i++) {\n        vec2 uv3 = uv;\n        uv3 = rotate2d(i * PI/3. + iTime) * uv3;\n        foreground = circle(\n            uv3,\n            vec2(0.5 + cos(iTime)/4., 0.0),\n            0.2 + cos(iTime)/6.,\n            vec3(0.),\n            true,\n            0.005\n        );\n        background = mix(background, foreground, foreground.a);\n    }\n\n    // Output to screen\n    fragColor = background;\n}","name":"Image","description":"","type":"image"}]}