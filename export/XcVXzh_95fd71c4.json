{"ver":"0.1","info":{"id":"XcVXzh","date":"1714896683","viewed":2362,"name":"Catch3 (+sound; 860 char; 3D) ","username":"ukeshet","description":"3D game, now more playable + sound(=ball height+dir); rewind for sound synchronization.\nLeft-click to navigate. Game pauses (discard) if red glowing ball is caught. \nSound added to Catch2 (https://www.shadertoy.com/view/lfGSR); still <1000 chars.","likes":19,"published":1,"flags":40,"usePreview":0,"tags":["3d","fractal","game","raymarch","sound"],"hasliked":0,"parentid":"lfGSRz","parentname":"Catch2 (824 char 3D game)"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Minimalistic playable 3D ray-marched fractal game with sound.\n// Demo for ICP course, by ukeshet.\n\nM;  // Main image\n    w=F; \n    while (++l<S && w>Q) {          // ray march\n\t\tv=p; w=Q; f=length(p+q); \n        for (i=S+S;i>Z;i*=.4)       // fractalize\n\t\t\tv=.85*i-abs(mod(v+.5*V(v.z,0,-v),i+i)-i),\n            w=min(f,max(w,min(v.x,min(v.y,v.z))));   // ray distance\n        r=w*normalize(V(C+C-R.xy,-R.y));             // ray step\n        P; \n        if (f<5.) \n            {F=S; if(l<Z) discard;}                  // mark/catch ball\n    }\n    O.xyz=mix(V(.5,.7,0),a*Q,l/S); O.x+=F+.6-.003*f; // ray color\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Buffer A: update player position+direction with mouse input.\n// Common+Buffer golfed thanks to FabriceNeyret2 and SnoopethDuckDuck.\n\nM;                             // load\n    m.z > Q ? a += .04*m : a;  // mouse input\n    r.z = -11.*iTimeDelta;\n    P;                         // update p with rotated r                   \n    O = iFrame > 1 ?           // update theta,phi\n         W(round(a.x/Q)+.1*(clamp(a.y,-Z,Z)+Z),p)  \n         : W(.1*Z, V(-6,-6,1)/.1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define V vec3//\n#define W vec4//\n#define G i=sin(T*=F); V q=130.*V(i*cos(F*iDate.w),.5+i,Z+F*T)  // Get target\n#define M void mainImage( out W O, vec2 C ) {           \\\n          V v, r,                                       \\\n            R = iResolution,                            \\\n            m = iMouse.xyz/R - .5,                      \\\n            a = V( Q*round( O=texture(iChannel0,C) ).x, \\\n                   fract(O)/.1-Z ),                     \\\n            p = O.yzw;                                  \\\n          T=iTime;                                      \\\n          G//         init + load buffer A\n#define E(k) mat2(cos(a.k+W(0,Z,-Z,0)))\n#define P r.yz*=E(y); r.xz*=E(x); p+=r// update p with rotated r\nfloat Z=1.57,      // pi/2\n      Q=.001,      // data packing precision\n      F=.07,       // target speed\n      S=50.,\n      w,f,l,T,i,t; ","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"vec2 mainSound(int j, float T) { // j=sample #; not used here\n    t=mod(T,3.);                 // some mod, against long-term loss of precision\n    G;                           // load q=-(target position)\n    W n=W(12,9,10,8)/3.;         // descending notes: G-D-E-C normalized\n    if (cos(T)<Q) n=1./n;        // switch descending/ascending notes\n    return vec2(sin((1.e3-q.y)*t*n[int(t/.75)])); // move (L,R) speakers\n}","name":"Sound","description":"","type":"sound"}]}