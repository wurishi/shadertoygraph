{"ver":"0.1","info":{"id":"DdKGzd","date":"1678957746","viewed":115,"name":"TP2 damier, bois","username":"lylia","description":"saperlipopette","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["matina"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Daoudi Lylia p2105694\n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n// Structure for texture\n// c : Color\n// s : Specular\nstruct T {\nvec3 c;\nfloat s;\n};\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere \n// p : point\n// c : center \n// r : radius\nV Sphere(vec3 p, vec3 c,float r,int index)\n{\n  return V(length(p-c)-r,index);\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Intersection(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\n\n// Cube \n// p : point\n// c : center \n// r : radius\nV Cube(vec3 p,vec3 c,float r,int index)\n{\n   vec3 q = abs(p-c) - vec3(r);\n  return V(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0),index);\n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\nV Plane(vec3 p, vec3 n, vec3 o,int index)\n{\n    return V(dot((p-o),n),index);\n}\n\n//Le damier\n\nint damier (float x, float y, float z)\n{ \n    return (abs(int(x)+ int (y)+ int (z)))% 2;\n}\n\n// lignes autour d'un objet\n\nfloat lignes (float x, float y, float z)\n{\n   return ((1.+sin(2.*3.14*z/0.6))/2.);\n}\n\n//capsula\n\nV capsule(vec3 p, vec3 a, vec3 b,float r,int index)\n{\n   vec3 u=normalize(b-a);\n   if(dot(-u,p-a)>0.)\n       {return V(length(p-a)-r,index);}\n   else if(dot(u,p-b)>0.)\n       {return V(length(p-b)-r,index);}\n   else{float h =length(dot(p-a,u));\n        return V(sqrt(pow(length(p-a),2.)-pow(h,2.))-r,index); }\n}\n\n//cylindre\n\nV cylindre (vec3 p, vec3 a, vec3 b, float r, int index)\n{\n    vec3 u= normalize(b-a);\n    if(dot(-u,p-a)>0.)\n        {\n            return Intersection(Plane(p,-u,a,index),capsule(p,a,b,r,index));\n        }\n    else if (dot(u,b-p)<0.) \n        {   \n           return Intersection(Plane(p,u,b,index),capsule(p,a,b,r,index));\n        }\n    else \n        {\n            float h= length(dot(p-a,u));\n            return V (sqrt(pow(length(p-a),2.)-pow(h,2.))-r,index);\n        }\n}\n\nT sable (vec3 p)\n{\n    float d=fbm(15.*p);\n    return T(mix(vec3(245./255.,245./255.,220./255.),vec3(139./255.,69./255.,19./255.),d),0.);\n}\n\n\nT bois_zebre (vec3 p) \n{\n    float d=sqrt((p.x+2.)*(p.x+2.)+(p.y-10.)+(p.y-10.));\n    float f= (1.+sin(2.*3.14*d/1.))/2.;\n    if (f>(1.+1.25*sin(Noise(p)))/2.)\n        { \n            return T(vec3(1.,248./255.,200./255.),0.5);\n        }\n    else\n        { \n            return T(vec3(133./255.,90./255.,100./255.),0.5);\n        }\n}\n\n\nT bois (vec3 p)\n{\n    float d=sqrt((p.x)*(p.x)+(p.y-10.)*(p.y-10.));\n    float f= (1.+sin(2.*3.14*d/1.))/2.;\n    if (f>(1.+1.25*sin(Noise(p)))/2.)\n        { \n            return T(vec3(1.,235./255.,205./255.),0.25);\n        }\n    else\n        { \n            return T(vec3(139./255.,69./255.,19./255.),0.25);\n        }\n}\n\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n        return V(a.v,a.i);\n    else \n    {\n        return V(b.v,b.i);\n    }\n}\n\n\n\n// Dice \n// p : point\n// c : center \n// r : radius\nV Dice(vec3 p,vec3 c,float r,int index)\n{\n  return Intersection(Cube(p,c,r*0.75,index),Sphere(p,c,r,index));\n}\n\n// Potential field of the object\n// p : point\nV object(vec3 p)\n{\n  V u = Plane(p,normalize(vec3(0.0,0.0,1.0)),vec3(0.0,0.0,-20.0),0);\n  \n  u=Union(u,Cube(p,vec3( -8.0, -10.0, -2.0),2.7,1));\n  u=Union(u,Sphere(p,vec3( -18.0, -10.0, -2.0),4.0,2));\n  u=Union(u,Dice(p,vec3( 10.0, -10.0, -2.0),4.0,3));\n  u=Union(u,Sphere(p,vec3(-11.,-10.0, 7.0), 2.,4));\n  u=Union(u,capsule(p,vec3(-11.,-10.0, 7.0),vec3(-15.,-10.,6.),0.3,5));//don't\n  u=Union(u,capsule(p,vec3(-11.,-10.0, 7.0),vec3(-13.,-10.,10.),0.3,5));\n  u=Union(u,capsule(p,vec3(-11.,-10.0, 7.0),vec3(-13.,-10.,3.),0.3,5));//don't\n  u=Union(u,capsule(p,vec3(-11.,-10.0, 7.0),vec3(-7.,-10.,9.),0.3,5));//dont\n  u=Union(u,capsule(p,vec3(-11.,-10.0, 7.0),vec3(-7.,-10.,4.),0.3,5));//youvhr pl\n  u=Union(u,capsule(p,vec3(-11.,-10.0, 7.0),vec3(-9.5,-10.,2.),0.3,5));//plutouch\n  u=Union(u,cylindre(p,vec3(0.,10.,-1.), vec3(0.,10.,-4.),3.,6));\n  u=Union(u,Dice(p,vec3( -0.0, -10.0, -2.0),4.0,7));\n  u=Union(u,Sphere(p,vec3( 20.0, -10.0, -2.0),4.0,8));\n\n  \n  \n  \n  return u;\n}\n\n// pour la texture unie\n\nT unie(vec3 p)\n{\n    return T(vec3(210./255.,147./255.,188./255.),3.5);\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n  V vp = object(p);\n    float v = vp.v;\n  n.x = object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.992,0.785,1.995),vec3(2.652,0.97,1.995), d.z*0.5+0.5);\n}\n\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 15.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\n\n// Shading and lighting ---------------------------------------------------------------------------\n\nT Texture0(in vec3 p)\n{\n  return T(vec3(0.549,0.407,0.588),0.25);   // pour le plan // \n  //                          il faut diviser par 255 pour avoir la couleur escomptÃ©e\n}\n\nT Texture1(in vec3 p)\n{\n  return T(vec3(1.,Noise(p),0.),0.25);   // le soleil\n}\n\nT Texture2(in vec3 p)\n{\n  return T(vec3(0.996,0.784,0.847),0.0);\n}\n\nT Texture3(in vec3 p)\n{\n  return T(vec3(1.,0.97,0.819),0.0);   \n}\n\nT damierT(in vec3 p)\n{\n    bool b=damier(p.x,p.y,p.z)%2==0;\n    if (p.x>0.) b=!b;\n    if (p.y>0.) b=!b;\n    if (p.z>0.) b=!b;\n\n    if (b) {\n                return T(vec3(1.,0.841,0.827), 0.2);\n           }\n    else \n        {\n            return T(vec3(1.,0.2,0.5),0.3);\n         }   \n         \n}\n\nT ligneT(in vec3 p)\n{\n    if(lignes(p.x,p.y,p.z)<0.2){ return T(vec3(151./255.,150./255.,188./255.), 0.2); }\n            else (T(vec3(1.,1.,1.),0.3));\n}\n\n// Compute texture \n// p : Point\n// n : Normal\nT Color(in vec3 p,in vec3 n)\n{\n    V vp= object(p);\n    if (vp.i==0){\n        \n        return Texture0(p);\n    }\n    else if (vp.i==1)\n    {\n        return damierT(p);\n    }\n    else if (vp.i==2)\n    {\n        return ligneT(p);\n    }\n    else if (vp.i==3)\n    {\n        return bois_zebre(p);\n    }\n    else if (vp.i==4 || vp.i==5)\n    {\n        return Texture1(p);\n    }\n    else if (vp.i==6)\n    {\n        return bois(p);\n    }\n     else if (vp.i==7)\n    {\n        return sable(p);\n    }\n    else if (vp.i==8)\n    {\n        return unie(p);\n    }\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p,l,100.0,h,s);\n    if (!h)\n    {\n     return 1.0;\n    }\n    return 0.0; \n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n     // Point light\n    const vec3 lp = vec3(5.0, 10.0, 25.0);\n    \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n\n    T tex=Color(p,n);\n\n    // Ambient color\n    vec3 ambient = 0.5*tex.c;\n        \n    // Shadow computation\n    float s = Shadow(p+0.01*n,n,l);\n\n// Phong diffuse\n    vec3 diffuse = 0.5  * clamp(dot(n, l),0.0,1.0) * tex.c;\n\n    // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = tex.s * pow(clamp(dot(r,l),0.0,1.0),28.0) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + s * (diffuse + specular);\n    return c;\n}\n\n// Picture in picture ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Texturing and noise \n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\nfloat fbm(in vec3 p)\n{\n    \n    return (Noise(p)+0.5*Noise(p))/(1.+0.5);\n}\n\n    \n\n// Compute the distance to the Voronoi boundary\n// x : Point\n// Return (closest distance, second closest, cell id)\nvec3 Voronoi( in vec3 x )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + Hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\n\n// Camera -----------------------------------------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0, -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.8;\n    \n    ro=vec3(36.,15.,15.0);\n    ro*=Rz(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n","name":"Common","description":"","type":"common"}]}