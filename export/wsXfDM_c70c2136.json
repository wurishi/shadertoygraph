{"ver":"0.1","info":{"id":"wsXfDM","date":"1588345435","viewed":474,"name":"3D cubic noise","username":"schnautzi","description":"A 3D cubic noise implementation","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d","noise","cubic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\t3D Cubic Noise\n//\n//  https://github.com/jobtalle/CubicNoise\n\nfloat random(vec3 x) {\n    return texture(iChannel0, x.xy * 124.03 + x.z * 0.1).r;\n}\n\nfloat interpolate(float a, float b, float c, float d, float x) {\n    float p = (d - c) - (a - b);\n    \n    return x * (x * (x * p + ((a - b) - p)) + (c - a)) + b;\n}\n\nfloat sampleX(vec3 at) {\n    float floored = floor(at.x);\n    \n    return interpolate(\n        random(vec3(floored - 1.0, at.yz)),\n        random(vec3(floored, at.yz)),\n        random(vec3(floored + 1.0, at.yz)),\n        random(vec3(floored + 2.0, at.yz)),\n    \tat.x - floored) * 0.5 + 0.25;\n}\n\nfloat sampleY(vec3 at) {\n    float floored = floor(at.y);\n    \n    return interpolate(\n        sampleX(vec3(at.x, floored - 1.0, at.z)),\n        sampleX(vec3(at.x, floored, at.z)),\n        sampleX(vec3(at.x, floored + 1.0, at.z)),\n        sampleX(vec3(at.x, floored + 2.0, at.z)),\n        at.y - floored);\n}\n\nfloat cubicNoise(vec3 at) {\n    float floored = floor(at.z);\n    \n    return interpolate(\n        sampleY(vec3(at.xy, floored - 1.0)),\n        sampleY(vec3(at.xy, floored)),\n        sampleY(vec3(at.xy, floored + 1.0)),\n        sampleY(vec3(at.xy, floored + 2.0)),\n        at.z - floored);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 coords = fragCoord.xy * 0.02;\n    \n    // The noise is sampled with a tilted plane to avoid directional artifacts\n    vec3 X = vec3(coords, iTime);\n    X = mat3(\n        0.788675134594813, -0.211324865405187, -0.577350269189626,\n        -0.211324865405187, 0.788675134594813, -0.577350269189626,\n        0.577350269189626, 0.577350269189626, 0.577350269189626) * X;\n    float n = cubicNoise(X);\n    \n    vec3 a = vec3(0.9, 0.8, 0.25);\n    vec3 b = vec3(0.1, 0.5, 0.9);\n    \n    fragColor = vec4(n > 0.5 ? a : b, 1.0);\n}","name":"Image","description":"","type":"image"}]}