{"ver":"0.1","info":{"id":"msBBzz","date":"1689614176","viewed":49,"name":"Icy Blue Introduction","username":"antonideli","description":"First shader. Credit to kishimisu for providing the excellent tutorial to play around with and draw inspiration from. Video link: https://www.youtube.com/watch?v=f4s1h2YETNY","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["circles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Credit to kishimisu's tutorial for giving me a starting point.\n// Video link: https://www.youtube.com/watch?v=f4s1h2YETNY\n\nvec3 rainbowPalette( float t )\n{\n    vec3 a = vec3(0.500, 0.500, 0.500);\n    vec3 b = vec3(0.718, 0.480, 0.480);\n    vec3 c = vec3(2.000, 2.000, 2.000);\n    vec3 d = vec3(0.808, 1.142, 1.475);\n    return a + b*cos(6.28318*(c*t+d));\n}\n\nvec3 tvRainbowPalette( float t )\n{\n    vec3 a = vec3(0.500, 0.500, 0.500);\n    vec3 b = vec3(0.718, 0.668, 2.558);\n    vec3 c = vec3(1.055, 1.741, 2.419);\n    vec3 d = vec3(-0.002, 0.338, 0.667);\n    return a + b*cos(6.28318*(c*t+d));\n}\n\nvec3 hotColdPalette( float t )\n{\n    vec3 a = vec3(0.608, 0.498, 0.608);\n    vec3 b = vec3(-0.472, 0.528, -0.642);\n    vec3 c = vec3(2.000, 2.000, 2.000);\n    vec3 d = vec3(0.808, 1.142, 1.475);\n    return a + b*cos(6.28318*(c*t+d));\n}\n\nvec3 sunbeam( float t )\n{\n    vec3 a = vec3(0.500, 0.500, 0.500);\n    vec3 b = vec3(0.718, 0.668, 0.498);\n    vec3 c = vec3(-0.624, 0.777, 0.942);\n    vec3 d = vec3(-0.002, 0.778, 0.498);\n    return a + b*cos(6.28318*(c*t+d));\n}\n\nvec3 candySlush( float t )\n{\n    vec3 a = vec3(0.500, 0.418, 0.918);\n    vec3 b = vec3(0.838, 0.498, 0.108);\n    vec3 c = vec3(0.649, 1.082, 1.517);\n    vec3 d = vec3(-0.503, -0.503, 0.497);\n    return a + b*cos(6.28318*(c*t+d));\n}\n\nvec3 blackRainbow( float t )\n{\n    vec3 a = vec3(0.500, 0.500, 0.500);\n    vec3 b = vec3(0.825, 0.825, 0.825);\n    vec3 c = vec3(0.549, 0.440, 0.329);\n    vec3 d = vec3(0.497, 0.497, 0.497);\n    return a + b*cos(6.28318*(c*t+d));\n}\n\nvec3 sky( float t )\n{\n    vec3 a = vec3(-0.032, 0.038, 0.400);\n    vec3 b = vec3(0.338, 0.778, 3.138);\n    vec3 c = vec3(0.909, 0.909, 0.909);\n    vec3 d = vec3(-0.832 -0.832 -0.832);\n    return a + b*cos(6.28318*(c*t+d));\n}\n\nfloat sdCircle(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    vec2 uv0 = uv;\n\n    vec3 finalColor = vec3(0.0);\n\n    for(float i = 0.0; i < 3.0; i++)\n    {\n        uv = fract(1.6 * uv) - 0.5;\n    \n        // Adjust for canvas size. Multiply the x by the aspect ration (16:9)\n        // We only do the x so that the image still maintains the same height, but varies the width to stay even with the height\n        //uv.y = uv.y * 100.0;\n        //uv.x = uv.x * iResolution.x / iResolution.y;\n\n        // Dictates the inital shape.\n        float d = sdCircle(uv, i) * exp(-length(uv0));\n\n        vec3 col = sky(length(uv0) + i*.4 +  iTime / 4.);\n\n        d = sin(d*8. + iTime)/8.;\n        //d = abs(d);\n\n        //d = step(0.01, d);\n        //d = smoothstep(0.0, 0.1, d);\n        d = 0.05 / d, 2.;\n\n        //col *= d;\n        finalColor += col * d;\n    }\n\n\n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}