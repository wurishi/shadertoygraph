{"ver":"0.1","info":{"id":"dtt3Dl","date":"1686469101","viewed":117,"name":"Rain ripples","username":"peremoya2000","description":"Some drop ripples on a wet surface. Quite cheap and definitely simple and modifiable to output normals if you don't like the albedo tricks","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["rain","uvs","df","tiles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_SCALE 7.\n#define MIN_SCALE 2.\n\nfloat ripplesLayer(vec2 baseUVs, float scale)\n{\n    float time = iTime+100.*scale;\n    // Tile the space\n    vec2 scaledUVs = baseUVs.xy*scale;\n    vec2 tile = floor(scaledUVs);\n    vec3 fr = vec3(fract(scaledUVs),0);\n \n    vec2 point = hash22(tile+scale);\n    point = 0.5 + 0.5*sin(iTime*.5 + TAU*point);\n    \n    float size = hash21(tile+scale)*.75;\n    vec2 toPoint = point - fr.xy;\n    fr.z=length(fr.xy-vec2(.5)+toPoint*.15)/(size*.4+.1);\n    \n    float speed = (4.+cos(point.x+time*.6)*.001+(1.-size));\n    float circles=smoothstep(.5, 1., sin(speed*time-fr.z));\n    circles*=(1.-min(fr.z,1.));\n    return circles;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y; \n             \n    float circles = 0.;\n    \n    for(float i = MIN_SCALE; i<MAX_SCALE; i+=1.5)\n    {\n        circles=max(circles,ripplesLayer(uv, i));\n    }\n    \n    vec3 cellCol = mix(vec3(0,.16,.5),vec3(.15,.45,.9),circles);      \n    vec3 col = mix(texture(iChannel0,uv).rgb,cellCol,.3);\n    \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265359\n#define TAU 6.283185307\nfloat hash11(float p){\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p * PI;\n    return fract(p);\n}\n\nfloat hash21(vec2 p) {\n\tp = fract(p*vec2(1.34, 435.345));\n    p += dot(p, p+34.23);\n    return fract(p.x*p.y);\n}\n\n// Gradient Noise by iq\n// https://www.shadertoy.com/view/XdXGW8\nvec2 hash22(vec2 p){\n    return fract(\n    sin(vec2(dot(p,vec2(127.1,311.7)),\n    dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nfloat gNoise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash22(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( hash22(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash22(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( hash22(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}","name":"Common","description":"","type":"common"}]}