{"ver":"0.1","info":{"id":"3tdSRj","date":"1581346816","viewed":182,"name":"Hexagonal Image Shuffle","username":"ajlende","description":"I saw a cool effect on https://burohaus.cargo.site/ but I thought it would be even cooler with hexagonal tiling, so I borrowed some code from https://www.shadertoy.com/view/ltlSW4 and made it happen\n","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["hexagon","image"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ISQRT3 0.5773502691896258\n#define HEXES 5.0\n#define MOVE 0.04\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Scale our coordinates uniformly to show more hexes\n\tvec2 p = HEXES * fragCoord / iResolution.y;\n    \n    // Produce hexagonal pattern by scaling the x and shearing the y\n    vec2 q = vec2( p.x * 2.0 * ISQRT3, p.y + p.x * ISQRT3 );\n\t\n    // Quantize into hexagons\n\tvec2 qi = floor( q );\n\tvec2 qf = fract( q );\n\tfloat v = mod( qi.x + qi.y, 3.0 );\n\tfloat ca = step( 1.0, v );\n\tfloat cb = step( 2.0, v );\n\tvec2  ma = step( qf.xy, qf.yx );\n    vec2 s = qi + ca - cb * ma;\n\t\n    // Calculate an offset for the tile\n\tvec2 o = MOVE * sin( iTime + s );\n    \n    fragColor = texture( iChannel0, uv + o );\n}","name":"Image","description":"","type":"image"}]}