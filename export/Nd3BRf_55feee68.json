{"ver":"0.1","info":{"id":"Nd3BRf","date":"1656877481","viewed":75,"name":"Snow man","username":"hjagu","description":"A simpel snow man shader white an cartoon shader.\nThe snow man could use some love as an background pixel will do six square root operations","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["snow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define colers 10.\n#define thich 0.003\n#define dif 0.7\n#define scale 3.\n\nfloat interp(float a0, float a1, float w){\n    return (a1 - a0) * ((w *\n(w * 6.0 - 15.0) + 10.0) * w * w\n* w) + a0;\n}\n\nvec2 randVec(vec2 co) {\n    float m = dot(co, vec2(12.9898, 78.233));\n    return fract(vec2(sin(m),cos(m))* 43758.5453) * 2. - 1.;\n}\n\nfloat dotGridGraient(vec2 uv, int x, int y){\n    vec2 grad = randVec(vec2(float(x), float(y)));\n    \n    vec2 d;\n    d.x = uv.x - float(x);\n    d.y = uv.y - float(y);\n    \n    return (d.x * grad.x + d.y * grad.y);\n}\n\nfloat perlin(float x, float y){\n    vec2 pos = vec2(x, y);\n\n    int ix0 = int(floor(x));\n    int ix1 = ix0 + 1;\n    \n    int iy0 = int(floor(y));\n    int iy1 = iy0 + 1;\n    \n    float sx = x - float(ix0);\n    float sy = y - float(iy0);\n    \n    //n0, n1, x0, x1, value;\n    \n    float n0 = dotGridGraient(pos, ix0, iy0);\n    float n1 = dotGridGraient(pos, ix1, iy0);\n    float x0 = interp(n0, n1, sx);\n    \n    n0 = dotGridGraient(pos, ix0, iy1);\n    n1 = dotGridGraient(pos, ix1, iy1);\n    float x1 = interp(n0, n1, sx);\n    \n    float value = interp(x0, x1, sy);\n    \n    value = value * 0.5 + 0.5;\n    \n    return value;\n}\n\nfloat dist(vec2 start, vec2 stop){\n    float dx = start.x - stop.x;\n    float dy = start.y - stop.y;\n    \n    return sqrt(dx*dx + dy*dy);\n}\n\nvec4 getcol(vec2 uv){\nvec4 col = vec4(0., uv.y, 1., 1.);\n    \n    if (dist(uv, vec2(0.5, 0.5)) < 0.15){\n       col = vec4(1., 1., 1., 1.);\n    }\n    if (dist(uv, vec2(0.5, 0.3)) < 0.2){\n       col = vec4(1., 1., 1., 1.);\n    }\n    if (dist(uv, vec2(0.5, 0.7)) < 0.1){\n       col = vec4(1., 1., 1., 1.);\n    }\n    if (dist(uv, vec2(0.55, 0.7)) < 0.04){\n       col = vec4(1., 0.55, 0.15, 1.);\n    }\n    if (dist(uv, vec2(0.55, 0.75)) < 0.01){\n       col = vec4(0., 0., 0., 1.);\n    }\n    if (dist(uv, vec2(0.45, 0.75)) < 0.01){\n       col = vec4(0., 0., 0., 1.);\n    }\n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 col = vec4(0., uv.y, 1., 1.);\n    vec4 testCol = getcol(uv);\n    if (!(testCol == vec4(0., 0., 0., 0.)))\n    {\n        col = testCol;\n    }\n    if (fragCoord.x < iMouse.x){\n    col.r = float(int(col.r * colers)) / colers;\n    col.g = float(int(col.g * colers)) / colers;\n    col.b = float(int(col.b * colers)) / colers;\n    \n    \n    vec2[4] cross;\n    cross[0] = vec2(thich, 0);\n    cross[1] = vec2(0., -thich);\n    \n    cross[2] = vec2(0., thich);\n    cross[3] = vec2(-thich, 0);\n   \n    for (int i = 0; i < cross.length(); i++){\n        if ( abs((col.r + col.b + col.g) - (getcol(uv + cross[i]).r\n        + getcol(uv + cross[i]).g + getcol(uv + cross[i]).b)) > dif)\n           col = vec4(0., 0., 0., 0.);\n    }\n    if (perlin(uv.x * scale + col.r * col.b * 999., uv.y * scale + col.g * col.a * 999.) > 0.6){\n        col.rgb -= vec3(0.1, 0.1, 0.1);\n    }\n    \n    \n    }\n    \n    if (fragCoord.x == iMouse.x)\n    col = vec4(0., 0., 0., 1.);\n  \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}