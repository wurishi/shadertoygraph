{"ver":"0.1","info":{"id":"ftdGRn","date":"1649084598","viewed":82,"name":"Spirograph by Osa","username":"Osakazaur","description":"This shader draws beautiful lines\n\nParameters are on Buffer A page:\n- elg - offset of lines, the result is how elongated the picture will be\n- speed - speed of drawing and also density of line\n- baseCol - color of background\n- mainCol - color of lines\n","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["2d","line","geometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n   vec2 uv = fragCoord/iResolution.xy;\n   \n   fragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float Pi = 6.28;\n\n//change this parameters\n\n// -- MAIN PARAMETER -- \nfloat elg = 0.05; //can be any. Try: 10., 1., 0.1 and 0.01 to see how it influences.\n\n// -- other parameters --\nfloat speed = .5;\nvec3 baseCol = vec3(0.);\nvec3 mainCol = vec3(0., 255., 205.)/255.;\n\n\nbool spiralMask(vec2 pos)\n{\n    vec2 cen = vec2(iResolution)*.5;\n\n    float alpha = iTime*elg;\n    pos -= cen; \n    pos *= mat2(cos(alpha), sin(alpha), -sin(alpha), cos(alpha));\n    pos += cen;\n    float w = 1.5;\n    \n    \n    float time_x = fract(iTime*speed);\n    float time_y = fract(iTime*speed+.125);\n    float rad = cen.y*.75;\n    \n    bool maskX = distance(pos.x, cen.x+sin(time_x*Pi)*rad) < w;\n    bool maskY = distance(pos.y, cen.y+sin(time_y*Pi)*rad) < w;\n    \n    return maskX && maskY;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n   vec2 uv = fragCoord/iResolution.xy;\n   \n   fragColor = spiralMask(fragCoord)? vec4(mainCol, 1.) : vec4(baseCol, 1.);\n   \n   fragColor += texture(iChannel0,uv)*1.;\n}","name":"Buffer A","description":"","type":"buffer"}]}